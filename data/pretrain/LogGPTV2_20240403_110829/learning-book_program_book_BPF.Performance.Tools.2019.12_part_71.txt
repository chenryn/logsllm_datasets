kernel context alone, you can trace them along with the user-level code path responsible, and with
application context: which user requests led to how much disk I/O or page faults, etc. In many cases,
kernel events can identify and quantify an issue, but it's the user-level code that shows how to fix it.
For some languages (e.g., Java), showing which stack trace led to an event is easier to get working than
tracing its function/method calls Combined with the numerous other kermel events that BPF can
instrument, stack traces can accomplish much. You can see which application code paths led to disk
I/O, page faults, and other resource usage; you can see which code paths led to the thread blocking and
leaving the CPU; and you can use timed sampling to profile CPU usage and build CPU flame graphs
12.1.5 Strategy
Here is a suggested overall strategy you can follow for the analysis of a language:
1. Determine how the language is executed. For the software that runs it, is it using
compilation to binaries, JIT compilation on the fly, interpretation, or a mix of these? This
directs your approach as discussed in this chapter.
2. Browse the tools and one-liners in this chapter to understand the kinds of things that are
possible for each language type.
3. Do an internet search for *|e]BPF language", “BCC Ingwge", and *bpftrace lamgumge” to see
if there are already tools and know-how for analyzing the language with BPE
4. Check if the language software has USDT probes and if they are enabled in the distributed
binaries (or if you need to recompile to enable them). These are a stable interface and
Suppe 1apisuoo 'saqod 1s asrq tou saop auemgos a8enue[ aq 31 'asn o aqeragand
them. Most language software is open source.
5. Write a sample program to instrument. Call a function with a known name a known
number of times, and with known latency (explicit sleep). This can be used to check if your
analysis tools are working, by checking that they identify all these knowns correctly.
6. For user-level software, use uprobes to inspect the language execution at the native level.
For kernel-level software, use kprobes
---
## Page 559
522
Chapter 12 Languages
The sections that follow are longer discussions on three example languages: C for compiled, Java
for JIT compiled, and the bash shell for interpreted languages.
12.1.6
BPF Tools
The BPF tools covered in this chapter are pictured in Figure 12-1.
Applicatione
bapbruhciae
Runtimes
System Libraries
System CallIinterface
javathreeds
bpftrace
Jnistecks
Rest of Kemel
Scheduler
offeputine
Device Drivers
Figure 1.2-1 BPF tools for language analysis
These tools cover C, Java, and bash.
12.2
C
Cis the easiest of the languages to trace.
For kernel-level C, the kernel has its own symbol table, and most distributions honor the
frame pointer for their kernel builds (CONFIG_FRAME_POINTER=y). This makes tracing kernel
functions with kprobes straightforward: the functions can be seen and traced, arguments follow
the processor ABI, and stack traces can be fetched. At least, most functions can be seen and traced:
exceptions include inlined functions, and those marked on a tracing blacklist by the kernel as
unsafe to instrument.
For user-level C, if a compiled binary does not strip its symbol tables, and does not omit the
frame pointer, then tracing is straightforward with uprobes: functions can be seen and traced, 
arguments follow the processor ABI, and stack traces can be fetched. Unfortunately, many
binaries do strip their symbol tables and compilers do omit the frame pointer, meaning you need
to recompile them or find other ways to read symbols and stacks.
USDT probes can be used in C programs for static instrumentation. Some C libraries, including
libc, provide USDT probes by default.
This section discusses C function symbols, C stack traces, C function tracing, C function offset
tracing, C USDT, and C one-liners. Table 12-1 lists tools for instrumenting custom C code that
have already been covered in other chapters.
---
## Page 560
12.2C
523
C++ tracing is similar to C and is summarized in Section 12.5.
Table 12-1
C-Related Tools
Source
Target
Description
Chapter
funccount
BCC
Functions
Count function calls
4
stackcount
BCC
Stacks
Count native stacks to events
BCC
Functions
Print function calls and retums with details
V
trace
Functions
argdist
BCC
Summarize function arguments or retum value
bpftrace
BT
AlI
Custom function and stack instrumentation
12.2.1
C Function Symbols
Function symbols can be read from the ELF symbol tables, readelf(1) can be used to check if these
are present. For example, here are symbols in a microbenchmark program:
$ readelf -s bench1
Synbol table ',dynsyn*
contains 10 entriest
lun:
Value
S1ze Type
B1nd
V1.s
Ndx Kane
0: 0000000000000000
0 NOTYPE LOCAL
DEFAULT UD
1 : 0000000000000000
0 NOTYPE MEAK
DEFAULT OND _ITH_deregisterTNCloneTab
2: 0000000000000000
0 FUNC
GL0BAL DEFAULT tRD put.sBGLIBC_2.2,S (2)
3: 0000000000000000
OX030
GLOBAL DEFAULT OND 1ibc_start_nalngGLIBC..
4: 0000000000000000
0 NOTYPE MEAK
DEFAUlT tND gmon_start._
5: 0000000000000000
0 FUNC
GLOBAL DEFAULT OND mal1oc@GLIBC_2.2.5 (21
6: 0000000000000000
0 FUNC
GL0BAL DEFAULT tRD atoiBGLIBC_2.2,S (2)
7: 000000000000000
OXn. 0
GLOBAL DEFAULT OND exItBGLIBC_2.2,5 (2)
8: 0000000000000000
0 NOTYFE
MEAK
DEFAULT UMD _ITM_registerTMCloneTable
9: 0000000000000000
0 FUNC
MEAK
DEFAULT OND _cxa_f1na11ze8GLIBC_2.2,5 (2)
Synbol table ,syntab* contains 66 entzles:
Mum1
 Value
Size Type
Bind
Vis
Ndx Mane
0: 0000000000000000
0NOTYPE
L0CAL
DEFAULT
UND
1: 0000000000000238
0 SECTION LOCAL
DEFAULT
2: 0000000000000254
D SECTI0N
L0CAL
DEFAULT
3: 0000000000000274
0 SECTION LOCAL
DEFAULT
4: 0000000000000298
D SECTION LOCAL
3
DEFAULT
[... ]
61: 0000000000000000
0 FUNC
CLOBAL DEFAULT
62: 0000000000201010
0 0BJECT
GLOBAL BICOEN
23
_IHC_BND_.
63: 0000000000000000
0BOTYPE
NEAK
DEFAULT
UND _ITH_reglsterTXClone/Tab1e
64: 0000000000000000
0FUNC
NEAK
DEFAULT
UND
_cxa_finalizeBeGLIBC_2.2
65 : 0000000000000590
0 FUNC
GLOBAL DEFAULT
11_in1 t
---
## Page 561
524
4Chapter 12 Languages
The symbol table, *.symtab*, has dozens of entries (truncated here). There is an additional symbol
table used for dynamic linking, *.dynsym*, which has six function symbols.
the case for many packaged binaries:
Now consider these symbol tables after the binary has been run through strip(1), which is often
$ readelf -s bench1
Synboltable *,dynsyn*contains 10 entcies1
Run:
Value
51ze Type
B1nd
V1s
Ndx Kane
0: 00000000000
0 HOTYPE
LOCAL
DEFAULT
UND
1: 0000000000000000
0 NOTYPE
NEAK
DEFAULT
UND _ITH_deregisterTNCloneTab
2: 000000000000
0 FUNC
GLOBAL DEFAULT
UMD putsBGLIBC_2.2,5 (2)
3: 0000000000000
0 FUNC
GLOBAL DEFAULT
UND _libc_start_naingGLIBC.
4: 0000000000000000
0HOTYPE
NEAK
DEFAOLT tuD gnon_start_
0 FUNC
GLOBAL DEFAOLTUND ma11ocfGLIBC_2.2.5 (2)
6: 00000000000
0 FUNC
GLOBAL DEFAULT UMD atoiBGLIBC_2.2,S (2)
7: 000000000000000
0 FUNC
GLOBAL DEFAOLT UND exIt8GLIBC_2.2,5 (2)
: 0000000000000000
38人10N0
NEAK
DEFAULT UMD _ITM_registerTMCloneTable
9: 0000000000000000
0 FUNC
NEAK
DEFAULT UND Cxa_final1zeRGLIBC_2 
strip(1) removes the .symtab symbol table but leaves the .dynsym table. .dynsym contains exter
nal global symbols that are called, and .symtab contains the same plus local symbols from the
 nq se eq o Aeuq at u soqu.s auuos as are aata *qes nog “uogeordde
may be missing the most interesting ones.
Statically compiled applications that are stripped may lose all symbols, since they had all been
placed in the .symtab that is removed.
There are at least two ways to fix this:
 Remove strip(1) from the software build process and recompile the software.
• Use a different source of symbols: DWARF debuginfo or BTE
Debuginfo for software packages is sometimes available as a software package with a -dbg,
-dbgsym, or -debuginfo extension. It is supported by the perf(1) command, BCC, and
bpftrace.
Debuginfo
Debuginfo files may have the same name as the binary with a *.debuginfo? extension, or use a
build ID unique checksum for the filename and reside under /usr/lib/debug/.build-id or a user
version of this. For the latter, the build ID is stored in the binary ELF notes section, and can be
seen using reade1f =n.
---
## Page 562
12.2C525
As an example, this system has openjdk-11-jre and openjdk-11-dbg packages installed, providing
both libjvm.so and libjvm.debuginfo files. Here are the symbol counts for each:
$ readelf -s /usr/lib/jvm/.../libjvm.so 1 wc -1
456
$ readelf -s /usr/lib/jvn/.../libjvm.debuginfo 1 wc -1
The stripped version has 456 symbols, and the debuginfo version has 52,299.
Lightweight Debuginfo
While it might seem worthwhile to always installthe debuginfo file, it comes at a file size cost: the
debuginfo file is 222 Mbytes, compared to 17 Mbytes for libjvm.so. Much of this size is not symbol
information but other debuginfo sections. The size of the symbol information can be checked
using readelf(1):
S readelf -g 1ibjvn.debuginfo
There are 39 section beaders, starting at offset 0xdd40468:
Section Hesders:
[]Nase
Type
offset
Size
EntSize
FlagsLinkInfo Align
[..-]
[36]
5ymtab
SYMTAB
00000000000da07530
00000000001326c0
0000000000000018
LE
51845
8
[...]
This shows the size of symtab is only 1.2 Mbytes. For comparison, the openjdk package that
provided libjvm.so is 175 Mbytes.
If the full debuginfo size is a problem, you could explore stripping down the debuginfo file. The
following commands use objcopy(I1) to strip out the other debuginfo sections (which begin with
'.debug.“) to create a lightweight debuginfo file. This can be used as a debuginfo replacement that
contains symbols, or it can also be reattached to the binary using eu-unstrip(1). Example commands:
5 objcopy -B.debug_\* 1ibjvn.debuginfo 1ibjvm.sy强tab
$ eu-unstrip -o libjvm.ne.so libjvm.so libjvm.syntab
5 1s -1h 1ibjvm.orig. so 1ibjvm.debuginfo 1ibjvn.symtab 1ibjvm.new.s0
=Evxe=xe=x 1 coot root 222M Mov 13 04:53 1ibjvm.debuginfo*
=zvxz=xz=x 1 zoot root 20m Feb 16 19:02 1ibjvn,nev,so*
-Ev----- 1 root root 17α Mov 13 04:53 1ibjvm.so
vxx=xz=x 1 zoot root 3.3x Feb 16 19:00 11bjvm,synitab*
T-on 1 os wauufqTT 8-yrepeex
52748
---
## Page 563
526
3Chapter 12 Languages
The new libjvm.new.so is only 20 Mbytes and contains all the symbols. Note that this is a proof of
concept technique I developed for this book, and has not yet had production testing.
In the future, the BPF Type Format (BTF) may provide another lightweight source of debuginfo,
and one that was designed for use by BPF: So far BTF is kernel only: work has not yet began on a
user-level version. See Chapter 2 for BTF.
Using bpftrace
Apart from using readelf(1), bpftrace can also list symbols from a binary by matching which
uprobes are available to instrument:
yseq/uq/:eqoxdn, T- soexagdq 
uprobe:/bin/bash:r1_o1d_nenu_complete
uprobe :/bin/bash:naybe_make_expoxt_env
uprobe:/bin/bash:initialize_she1l_oui1tins
uprobe:/bin/bash:extglob_patterr_p
uprobe:/bin/bash:dispose_cond_node
[..-]
Wildcards can also be used:
peaz:seq/ura/:qoxdn,T-soexdq 
uprobe:/bin/bash:reader_1oop
uprobe:/bin/bash:read_octa1
uprobe:/bin/bash:readline_internal_char
uprobe:/bin/bash:xeadonly_bu11t.in
uprobe:/bin/bash:read_tty_modified
[.--]
Section 12.2.3 instruments one of these as an example.
12.2.2 C Stack Traces
BPF currently supports frame pointer-based stack walking, For this to work, the software
must be compiled to use the frame pointer register. For the gcc compiler, this is the
fnoonl tfranepo1nter option. In the future, BPF may support other types of stack
walking as well.
Since BPF is programmable, I was able to code a frame pointer stack walker in pure BPF before
‘ad6 deu mau e qm μuoddns [epoggo pappe sogoaores axary [+e1] pappe sem μoddns [ea1
BPF_MAP_TYPE_STACK_TRACE, and a helper, bpf_get_stackid). The helper returns a unique ID
4 Matheus Marchini developed this feature after reviewing a draft of this chapter and realizing it was needed
---
## Page 564
12.2C527
for the stack, and the map stores the contents of the stack. This minimizes storage for stack traces,
since duplicates reuse the same ID and storage.
From bpftrace, stacks are available via the ustack and kstack built-ins, for user-level and kernel
stacks. Here is an example of tracing the bash shell, which is a large C program, and printing the
stack trace that led to a read of file descriptor O (STDIN):
79 yseq, == mmoo/ pesxxoguss5s:stteos5s:a, 8- sseangdg 
args->fd = 0/ ( e[ustack] = count () : 1*
Attaching l probe...
]
zead+16
0x6c63004344006d
1: 7
This stack is actually broken: after the read() function is a hexadecimal number that does not look
like an address. (pmap(1) can be used to check the address space mappings for a PID to see if it is
in a range or not; in this case, it isn’t.)
Now a bash shell that's been recompiled with -fno-omit-frame-pointer:
59 qseq, == mo/ peexxaquass:streosfs:2 , a- soerdq +
args->fd == 0/ ( @[ustack] = count () : 1′
Attaching 1 prebe...
C
read+16
r1_zead_key+30T
readline_internal_char+155
readline_1ntexnal_charloop+22
readline_internsl+23
readline+91
YY_readline_get+142
Yy_eadlLne_get+412
YY_gete+13
shell_getc+464
reos_token+250
yylex+184
VYparse+776
2+puesaooessed
reas_cormand+203
reader_1oop+37T
---
## Page 565