# Kubernetes Privilege Escalation: Container Escape == Cluster Admin?

**Presenters: Yuval Avrahami & Shaul Ben Hai, Palo Alto Networks**
- **Event:** #BHUSA @BlackHatEvents

## About the Presenters
- **Who We Are:**
  - Cloud security researchers at Palo Alto Networks.
  - Specializing in vulnerability research and threat hunting in the cloud.
  - Notable projects: Azurescape, Slioscape.

## Agenda
1. Container Escapes
2. Kubernetes 101
3. Malicious Node
4. Attack Classes
5. Escape == Admin?
6. Recommendations & Takeaways

## Container Escapes
- **Do Containers Contain?**
  - Containers are excellent for packaging and deploying software.
  - However, they present a weak security boundary.
  - Escapes are inevitable:
    - Vulnerabilities in 2022: DirtyPipe, containerd CVE-2022-23648, multiple kernel vulnerabilities in Google's kctf, cri-o CVE-2022-0811.
    - Misconfigurations: privileged containers, host mounts, etc.
    - In-the-wild malware: Siloscape, TeamTNT.
  - **Impact:** Compromised node.

## Kubernetes 101
- **Overview:**
  - Kubernetes orchestrates pods (containers) on nodes (VMs).
  - It is widely used across various platforms.
- **Authentication:**
  - Certificates: for users and nodes.
  - ServiceAccount tokens: for pods.
- **Authorization (RBAC):**
  - Permissions are expressed as actions (e.g., list secrets, create pods).
  - Permissions are grouped into Roles.
  - Bindings grant Roles, which can be namespace-scoped or cluster-wide.

## Post-Container Escape
- **Credentials on a Rogue Node:**
  - Kubelet credentials: restricted by NodeAuthorizer and NodeRestriction.
  - Neighboring pods' service accounts: permissions vary.
  - Node permissions are largely defined by its pods' permissions.

## Trampoline Pods
- **Definition:**
  - Powerful pods with enough permissions to escalate privileges, jump to other nodes, and access critical resources.
- **Types:**
  - **Trampoline Pods:** Attacker might hit the jackpot.
  - **Trampoline DaemonSets:** Attacker is guaranteed to hit the jackpot.
- **Real Impact:**
  - Spotting trampolines: what makes a pod bouncy?
  - Example infra pod: list services, delete pods, create configmaps, update nodes/status.
  - **Powerful Permissions?**
    - No public list of risky permissions.
    - Seemingly restricted permissions can be surprisingly powerful.
    - Define interesting attacks and classify permissions.

## Kubernetes Attack Classes
- **Manipulate AuthN/AuthZ:**
  - Impersonate other identities, alter permissions, escalate roles, bind, approve signers, control mutating webhooks.
- **Remote Code Execution:**
  - Execute code on pods/nodes, move pods, control pods, control pod controllers, control mutating webhooks.
- **Acquire Tokens:**
  - List secrets, create secrets, create serviceaccounts/token, control pod controllers, control validating webhooks, control mutating webhooks.
- **Steal Pods:**
  - Modify nodes, modify nodes/status, create pods/eviction, delete pods, delete nodes, modify pods/status, modify pods.

## Trampolines Across Popular Platforms
- **Analyzed Platforms:**
  - Focused on common infrastructure components.
  - Managed Kubernetes Services and Kubernetes Distributions: AKS, EKS, GKE, OpenShift.
  - Container Network Interfaces (CNIs): Antrea, Calico, Cilium, WeaveNet.
- **Findings:**
  - Most (62.5%) installed Trampoline DaemonSets by default.
  - In half the platforms, escape == admin by default.

## Case Study: Cilium
- **Cilium:**
  - Popular Container Network Interface (CNI) used in GKE Dataplane v2.
  - Showcases several attack classes and released fixes.
- **Trampoline Examples:**
  - **cilium DaemonSet:** Can delete pods and update nodes/status (Steal Pods).
  - **cilium-operator Deployment:** Can list secrets (Acquire Tokens).
- **Attack Steps:**
  1. Zero other nodes' capacity and delete cilium-operator.
  2. Abuse operator to retrieve a powerful built-in token.
  3. Add admin permissions to the ClusterRole bound to the token.

## Fixes by Affected Platforms
- **Disclosed Findings:**
  - Great experience overall.
  - Most platforms have fixed the issues.
- **Fixes:**
  - Remove, relocate, or restrain.
- **Platform Status:**
  - AKS: Yes (No fix yet).
  - EKS: Yes (Fixed in >=v1.18).
  - GKE: With Dataplane v2 (Fixed in >=1.23.4-gke.900, $13,022 bounty).
  - OCP: Yes (Fixed in >=v4.11).
  - Antrea: Yes (Fixed in v1.6.1 + an admission policy).
  - Calico: No (No fix needed).
  - Cilium: Yes (Fixed in >=v1.12.0-rc2).
  - Weave Net: No (No fix needed).

## Identifying Risky Permissions
- **rbac-police:**
  - New open-source tool to evaluate RBAC permissions of pods, service accounts, and nodes.
  - ~20 policies out-of-the-box, each targeting risky permissions and privEsc techniques.
  - Customizable policies written in Rego (OPA).
  - GitHub: [PaloAltoNetworks/rbac-police](https://github.com/PaloAltoNetworks/rbac-police)
- **Checkov:**
  - Open-source Infra-as-Code (IaC) security scanner.
  - Alerts on risky permissions before they are installed in the cluster.
  - GitHub: [bridgecrewio/checkov](https://github.com/bridgecrewio/checkov)

## Takeaways
- **Key Points:**
  - Trampolines introduce new privilege escalation avenues in Kubernetes, potentially leading to cluster admin access.
  - Understanding Kubernetes attack classes and powerful permissions is crucial.
  - Configuring RBAC safely is challenging; seemingly restricted permissions may allow privilege escalation.
  - Good RBAC hygiene is key:
    - Regularly monitor RBAC using tools like rbac-police and Checkov.
    - Minimize the distribution of powerful tokens.
    - Implement admission and audit policies to detect attacks.

## Questions?
- **Report and Further Reading:**
  - For more details, refer to the full report and additional resources.

Thank you for your attention!