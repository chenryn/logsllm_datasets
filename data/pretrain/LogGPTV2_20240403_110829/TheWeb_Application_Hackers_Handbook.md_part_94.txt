application is probably vulnerable to arbitrary command execution.
URL Redirection
The following APIs can be used to issue an HTTP redirect in PHP:
n http_redirect
n header
n HttpMessage::setResponseCode
n HttpMessage::setHeaders
The usual way to cause a redirect is through the http_redirect function,
which takes a string containing a relative or absolute URL. If the value of
cc1199..iinndddd 773311 88//1199//22001111 1122::1188::3377 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 732
732 Chapter 19 n Finding Vulnerabilities in Source Code
this string is user-controllable, the application is probably vulnerable to a
phishing vector.
Redirects can also be performed by calling the header function with an appro-
priate Location header, which causes PHP to deduce that an HTTP redirect is
required. For example:
header(“Location: /target.php”);
You should also review any uses of the setResponseCode and setHeaders
APIs. Given that a redirect simply involves a 3xx response containing an HTTP
Location header, an application may implement redirects using these APIs.
Sockets
The following APIs can be used to create and use network sockets in PHP:
n socket_create
n socket_connect
n socket_write
n socket_send
n socket_recv
n fsockopen
n pfsockopen
After a socket is created using socket_create, it is connected to a remote
host via a call to socket_connect, which takes the target’s host and port details
as its parameters. If this host information is user-controllable in any way, the
application may be exploitable to cause network connections to arbitrary hosts,
either on the public Internet or on the private DMZ or internal network on which
the application is hosted.
The fsockopen and pfsockopen functions can be used to open sockets to a
specifi ed host and port and return a fi le pointer that can be used with regular
fi le functions such as fwrite and fgets. If user data is passed to these functions,
the application may be vulnerable, as described previously.
Confi guring the PHP Environment
PHP confi guration options are specifi ed in the php.ini fi le, which uses the
same structure as Windows INI fi les. Various options can affect an applica-
tion’s security. Many options that have historically caused problems have been
removed from the latest version of PHP.
cc1199..iinndddd 773322 88//1199//22001111 1122::1188::3377 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 733
Chapter 19 n Finding Vulnerabilities in Source Code 733
Register Globals
If the register_globals directive is enabled, PHP creates global variables for
all request parameters. Given that PHP does not require variables to be initial-
ized before use, this option can easily lead to security vulnerabilities in which
an attacker can cause a variable to be initialized to an arbitrary value.
For example, the following code checks a user’s credentials and sets the
$authenticated variable to 1 if they are valid:
if (check_credentials($username, $password))
{
$authenticated = 1;
}
...
if ($authenticated)
{
...
Because the $authenticated variable is not fi rst explicitly initialized to 0, an
attacker can bypass the login by submitting the request parameter authenti-
cated=1. This causes PHP to create the global variable $authenticated with a
value of 1 before the credentials check is performed.
NOTE From PHP 4.2.0 onward, the register_globals directive is disabled
by default. However, because many legacy applications depend on regis-
ter_globals for their normal operation, you may often fi nd that this direc-
tive has been explicitly enabled in php.ini. The register_globals option
was removed in PHP 6.
Safe Mode
If the safe_mode directive is enabled, PHP places restrictions on the use of some
dangerous functions. Some functions are disabled, and others are subject to
limitations on their use. For example:
n The shell_exec function is disabled because it can be used to execute
operating system commands.
n Themail function has the parameter additional_parameters disabled
because unsafe use of this parameter may lead to SMTP injection fl aws
(see Chapter 10).
n The exec function can be used only to launch executables within the
confi gured safe_mode_exec_dir. Metacharacters within the command
string are automatically escaped.
cc1199..iinndddd 773333 88//1199//22001111 1122::1188::3377 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 734
734 Chapter 19 n Finding Vulnerabilities in Source Code
NOTE Not all dangerous functions are restricted by safe mode, and some
restrictions are affected by other confi guration options. Furthermore, there
are various ways to bypass some safe mode restrictions. Safe mode should
not be considered a panacea to security issues within PHP applications. Safe
mode has been removed from PHP version 6.
Magic Quotes
If the magic_quotes_gpc directive is enabled, any single quote, double quote,
backslash, and NULL characters contained within request parameters are auto-
matically escaped using a backslash. If the magic_quotes_sybase directive is
enabled, single quotes are instead escaped using a single quote. This option is
designed to protect vulnerable code containing unsafe database calls from being
exploitable via malicious user input. When reviewing the application codebase to
identify any SQL injection fl aws, you should be aware of whether magic quotes
are enabled, because this affects the application’s handling of input.
Using magic quotes does not prevent all SQL injection attacks. As described
in Chapter 9, an attack that injects into a numeric fi eld does not need to use
single quotation marks. Furthermore, data whose quotes have been escaped
may still be used in a second-order attack when it is subsequently read back
from the database.
The magic quotes option may result in undesirable modifi cation of user input,
when data is being processed in a context that does not require any escaping.
This can result in the addition of slashes that need to be removed using the
stripslashes function.
Some applications perform their own escaping of relevant input by passing
individual parameters through the addslashes function only when required.
If magic quotes are enabled in the PHP confi guration, this approach results in
double-escaped characters. Doubled-up slashes are interpreted as literal back-
slashes, leaving the potentially malicious character unescaped.
Because of the limitations and anomalies of the magic quotes option, it is
recommended that prepared statements be used for safe database access and
that the magic quotes option be disabled.
NOTE The magic quotes option has been removed from PHP version 6.
Miscellaneous
Table 19-10 lists some miscellaneous confi guration options that can affect the
security of PHP applications.
cc1199..iinndddd 773344 88//1199//22001111 1122::1188::3388 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 735
Chapter 19 n Finding Vulnerabilities in Source Code 735
Table 19-10: Miscellaneous PHP Confi guration Options
OPTION DESCRIPTION
allow_url_fopen If disabled, this directive prevents some fi le functions
from accessing remote fi les (as described previously).
allow_url_include If disabled, this directive prevents the PHP fi le include
functions from being used to include a remote fi le.
display_errors If disabled, this directive prevents PHP errors from being
reported to the user’s browser. The log_errors and
error_log options can be used to record error infor-
mation on the server for diagnostic purposes.
file_uploads If enabled, this directive causes PHP to allow fi le uploads
over HTTP.
upload_tmp_dir This directive can be used to specify the temporary
directory used to store uploaded fi les. This can be used
to ensure that sensitive fi les are not stored in a world-
readable location.
Perl
This section describes ways to acquire user-supplied input, ways to interact with
the user’s session, potentially dangerous APIs, and security-relevant confi gura-
tion options on the Perl platform.
The Perl language is notorious for allowing developers to perform the same
task in a multitude of ways. Furthermore, numerous Perl modules can be used to
meet different requirements. Any unusual or proprietary modules in use should
be closely reviewed to identify whether they use any powerful or dangerous
functions and thus may introduce the same vulnerabilities as if the application
made direct use of those functions.
CGI.pm is a widely used Perl module for creating web applications. It provides
the APIs you are most likely to encounter when performing a code review of a
web application written in Perl.
Identifying User-Supplied Data
The functions listed in Table 19-11 are all members of the CGI query object.
cc1199..iinndddd 773355 88//1199//22001111 1122::1188::3388 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 736
736 Chapter 19 n Finding Vulnerabilities in Source Code
Table 19-11: CGI Query Members Used to Acquire User-Supplied Data
FUNCTION DESCRIPTION
param Called without parameters, param returns a list of all the
parameter names in the request.
param_fetch
Called with the name of a parameter, param returns the
value of that request parameter.
The param_fetch method returns an array of the named
parameters.
Vars Returns a hash mapping of parameter names to values.
cookie The value of a named cookie can be set and retrieved
using the cookie function.
raw_cookie
The raw_cookie function returns the entire contents of
the HTTP Cookie header, without any parsing having been
performed.
self_url Return the current URL, in the fi rst case including any
query string.
url
query_string Returns the query string of the current request.
referer Returns the value of the HTTP Referer header.
request_method Returns the value of the HTTP method used in the request.
user_agent Returns the value of the HTTP User-agent header.
http Return a list of all the HTTP environment variables derived
from the current request.
https
ReadParse Creates an array named %in that contains the names and
values of all the request parameters.
Session Interaction
The Perl module CGISession.pm extends the CGI.pm module and provides sup-
port for session tracking and data storage. For example:
$q->session_data(“MyName”=>param(“username”)); // store user’s name
print “Welcome “ . $q->session_data(“MyName”); // retrieve user’s name
Potentially Dangerous APIs
This section describes some common Perl APIs that can introduce security
vulnerabilities if used in an unsafe manner.
cc1199..iinndddd 773366 88//1199//22001111 1122::1188::3388 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 737
Chapter 19 n Finding Vulnerabilities in Source Code 737
File Access
The following APIs can be used to access fi les in Perl:
n open
n sysopen
The open function reads and writes the contents of a specifi ed fi le. If user-
controllable data is passed as the fi lename parameter, an attacker may be able
to access arbitrary fi les on the server fi lesystem.
Furthermore, if the fi lename parameter begins or ends with the pipe character,
the contents of this parameter are passed to a command shell. If an attacker
can inject data containing shell metacharacters such as the pipe or semicolon,
he may be able to perform arbitrary command execution. For example, in the
following code, an attacker can inject into the $useraddr parameter to execute
system commands:
$useraddr = $query->param(“useraddr”);
open (MAIL, “| /usr/bin/sendmail $useraddr”);
print MAIL “To: $useraddr\n”;
...
Database Access
The selectall_arrayref function sends a query to a database and retrieves
the results as an array of arrays. The do function executes a query and simply
returns the number of rows affected. In both cases, the SQL statement is passed
as a simple string.
If user-controllable input comprises part of the string parameter, the applica-
tion is probably vulnerable to SQL injection. For example:
my $username = “admin’ or 1=1--”;
my $password = “foo”;
my $sql=”SELECT * FROM users WHERE username = ‘$username’ AND password =
‘$password’”;
my $result = $db_connection->selectall_arrayref($sql)
executes this unintended query:
SELECT * FROM users WHERE username = ‘admin’ or 1=1--’
AND password = ‘foo’
The functions prepare and execute can be used to create prepared state-
ments, allowing an application to create a SQL query containing parameter
cc1199..iinndddd 773377 88//1199//22001111 1122::1188::3388 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 738
738 Chapter 19 n Finding Vulnerabilities in Source Code
placeholders and set their values in a secure and type-safe way. If used as
intended, this mechanism is not vulnerable to SQL injection. For example:
my $username = “admin’ or 1=1--”;
my $password = “foo”;
my $sql = $db_connection->prepare(“SELECT * FROM users
WHERE username = ? AND password = ?”);
$sql->execute($username, $password);
results in a query that is equivalent to the following:
SELECT * FROM users WHERE username = ‘admin’’ or 1=1--’
AND password = ‘foo’
Dynamic Code Execution
eval can be used to dynamically execute a string containing Perl code. The
semicolon delimiter can be used to batch multiple statements. If user-controllable
data is passed into this function, the application is probably vulnerable to script
injection.
OS Command Execution
The following functions can be used to execute operating system commands:
n system
n exec
n qx
n The backtick operator (`)
In all these cases, commands can be chained together using the | character.
If user-controllable data is passed unfi ltered into any of these functions, the
application is probably vulnerable to arbitrary command execution.
URL Redirection
The redirect function, which is a member of the CGI query object, takes a
string containing a relative or absolute URL, to which the user is redirected. If
the value of this string is user-controllable, the application is probably vulner-
able to a phishing vector.
cc1199..iinndddd 773388 88//1199//22001111 1122::1188::3388 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 739
Chapter 19 n Finding Vulnerabilities in Source Code 739
Sockets
After a socket is created using socket, it is connected to a remote host via a call
to connect, which takes a sockaddr_in structure composed of the target’s host
and port details. If this host information is user-controllable in any way, the
application may be exploitable to cause network connections to arbitrary hosts,
either on the Internet or on the private DMZ or internal network on which the
application is hosted.
Confi guring the Perl Environment
Perl provides a taint mode that helps prevent user-supplied input from being
passed to potentially dangerous functions. You can execute Perl programs in
taint mode by passing the -T fl ag to the Perl interpreter as follows:
#!/usr/bin/perl -T
When a program is running in taint mode, the interpreter tracks each item
of input received from outside the program and treats it as tainted. If another
variable has its value assigned on the basis of a tainted item, it too is treated as
tainted. For example:
$path = “/home/pubs” # $path is not tainted
$filename = param(“file”); # $filename is from request parameter and
# is tainted
$full_path = $path.$filename; # $full_path now tainted
Tainted variables cannot be passed to a range of powerful commands, includ-
ing eval,system,exec, and open. To use tainted data in sensitive operations,
the data must be “cleaned” by performing a pattern-matching operation and
extracting the matched substrings. For example:
$full_path =~ m/^([a-zA-Z1-9]+)$/; # match alphanumeric submatch
# in $full_path
$clean_full_path = $1; # set $clean_full_path to the
# first submatch
# $clean_full_path is untainted
Although the taint mode mechanism is designed to help protect against many