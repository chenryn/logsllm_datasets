9
not treat divergences that stem from these instructions as a reliable detection
method.
Overall, Proteus provides us with the instruction encoding that caused
the divergent behavior, register values before that instruction, divergence group
as well as the diﬀerence between the traces of emulated and real CPU (e.g.,
signal number, CPU mode, etc.) which occurs after executing the divergent
instruction. We can optionally identify why QEMU fails to faithfully provide
the correct behavior as implemented by the real CPU and ﬁx the source of mis-
match ( 5 ). Proteus can also generate a proof-of-concept emulation detector
( 6 ), which reconstructs the divergent behavior by setting respective register val-
ues, executing the divergent instruction and checking for the resulting mismatch
that Proteus identiﬁes during the “Divergence Identiﬁcation & Categorization”
stage.
4 Proteus Implementation
In this section, we describe our implementation of the proposed Proteus system
for detecting instruction-level diﬀerences between emulated and real ARM CPUs.
In Sect. 4.1, we describe our framework for acquiring instruction-level traces.
Section 4.2 describes how we use this framework to collect a large number of
sample traces and automatically identify discrepancies.
4.1 Instruction-Level Tracing on ARM-Based Platforms
Collected Trace Information: For our purposes, a trace consists of all
general-purpose registers that are visible to user-level programs, which provide
a snapshot of the architectural state. Speciﬁcally, we record the R0-R12, SP, PC,
LR and CPSR registers (see Sect. 2). Finally, we record operands of all memory
operations. Various ARM instructions can load/store multiple registers sequen-
tially from a base address. We record all the data within the memory transaction
as well as the base address. This trace information gives us a detailed program-
visible behavior of CPU instructions. Thus, any discrepancy within the trace is
visible to a malware and can be potentially leveraged for evasion purposes.
Emulator Traces Through QEMU Instrumentation: QEMU dynamically
translates the guest instructions (e.g., ARM) for execution on the host machine
(e.g., x86). Translation consists of several steps. First, guest instructions within a
basic block are disassembled and converted into a platform-agnostic intermediate
representation called TCG (Tiny Code Generator). Next, generated TCG code
blocks (i.e., translation block) are compiled into host ISA for execution.
To implement tracing capability in QEMU, we inject extra TCG operations
into each translation block during the translation phase. These extra TCG oper-
ations dump the trace information during the execution phase. We use the helper
functionality within QEMU to generate the extra TCG code. The main use of the
helper functionality in QEMU is to allow developers to extend the capabilities
10
O. Sahin et al.
of TCG operations for implementing complex instructions. We inject the extra
TCG operations for every disassembled instruction to achieve per-instruction
tracing granularity. Speciﬁcally, we modify the disassembly routines of ARM
instructions to inject TCG operations that record registers. We also modify the
load/store routines to record address and data values for memory transactions.
We use QEMU 2.7.0 from Android repositories2, which forms the base of the
SDK emulator used in modern Android malware analyzers [23,28,30]. QEMU
2.7.0 is the most recent version adopted in current SDK emulators. To ease
instrumentation and facilitate the data collection, we use QEMU in user-mode
conﬁguration as opposed to full-system emulation. We use full-system SDK emu-
lators during our evaluation of discovered discrepancies (Sect. 5.3).
Accurate Real CPU Traces Using ARM Fast Models: Gathering detailed
instruction-level traces from real CPUs is challenging and, due to practical lim-
itations on the number of devices that can be used, does not scale well. In this
work, we propose to use accurate functional models of ARM CPUs (i.e., Fast
Models [3]) to obtain traces corresponding to execution on real CPUs. Fast Mod-
els are oﬃcial software models developed and maintained by ARM and provide
complete accuracy of software-visible semantics of instructions.
ARM Fast Models provide a set of trace sources which generate a stream of
trace events when running the simulation. Once a target set of trace sources are
speciﬁed, Fast Models emit trace events whenever a change occurs on a trace
source. These trace events are provided over a standardized interface called Model
Trace Interface (MTI). We use an existing plugin called GenericTrace to record
trace events over the MTI interface.
Our work is based on a Cortex-A15 fast model which implements the ARMv7
ISA. We specify “inst”, “cpsr”, “core_loads”, “core_stores” and “core_regs” trace
sources, which capture changes in register values as well as data/address operand
values in memory transactions.
4.2 Identifying Emulated vs. Real CPU Discrepancies with Tracing
This section describes how we use our tracing capabilities (Sect. 4.1) to ﬁnd
diﬀerences in instruction semantics between emulated and real ARM CPUs.
Generating Test Cases: We generate valid ELF binaries as inputs to our
tracing platforms. We choose to use programs that contain random instructions.
Speciﬁcally, each input binary contains 20 random bytes corresponding to 5 ARM
instructions. We use this randomized approach to be able to exercise emulators
with uncommon instructions which are not likely to be emitted by compilers. We
use more than one instruction per binary to be able to cover more instructions
each time a simulation is launched for a test program.
2 https://android.googlesource.com/platform/external/qemu-android/+/qemu-2.7.0.
Proteus: Detecting Android Emulators from Instruction-Level Proﬁles
11
Fig. 3. Illustration of the ﬂow for comparing the Fast Model and QEMU traces.
Each test program starts with a few instructions that set the CPU state, clear
registers and condition ﬂags. By default, the programs run on the Fast Model
in svc mode and no stack space is allocated. Thus, we use these initialization
instructions to ensure that CPU mode is set to usr and SP points to the same
address on both platforms. We also clear all registers to ensure that programs
start from identical architectural state on both emulator and real CPU. These
initialization instructions are followed by 5 random instructions. Finally, each
test case ends with an exit system call sequence (i.e., mov r7,#1; svc 0x0).
Identifying Divergence Points: This phase of the Proteus system consumes
the traces collected from QEMU and ARM Fast Model to identify and group
divergent behaviors. To identify the initial point where QEMU and Fast Model
traces of an input program diverge, we perform a step-by-step comparison.
The step-by-step comparison procedure is illustrated in Fig. 3. We skip
the portion of the traces which corresponds to the initialization instructions
described in the previous section (Step 1) to avoid false alarms that arise from
the initial state diﬀerences between QEMU and Fast Model. We walk through
the remaining instruction sequence until either a diﬀerence exists in the collected
trace data or the test program on QEMU terminates due to an exception. If the
program terminates on QEMU or the CPU mode on Fast Models switches to a
diﬀerent mode than usr, we examine whether this exception behavior matches
between QEMU and real CPU (Step 2). We perform the comparison using the
CPU mode from the Fast Model and the signal received by the program upon
termination on QEMU. Note that there is no exception handling or signal mech-
anism on Fast Models as no OS is running. Depending on this CPU mode and
signal comparison, we determine whether the observed behavior falls into one
of the four possible divergent types below. We use a tuple representation as
 to categorize divergent behavior.
– : This group represents the cases where QEMU fails to rec-
ognize an architecturally Undefined instruction. If the Fast Models indicate
12
O. Sahin et al.
that CPU switches to und mode, the expected behavior for QEMU is to
deliver a SIGILL signal to the target program. This is because execution of
an Undefined instruction takes the CPU into und mode and generates an ille-
gal instruction exception. Thus, the cases where Fast Model switches to und
mode while QEMU does not deliver a SIGILL signal is a sign of divergence.
– : This class of divergence contains cases where QEMU termi-
nates by an illegal instruction signal (SIGILL) while Fast Models indicate the
target instruction is valid (i.e., cpu remains in usr mode).
– : This class captures the cases where QEMU fails to recognize
a data/prefetch abort and hence does not generate a bus error (i.e., deliver
SIGBUS). Prefetch aborts are caused by failing to load a target instruction
while data aborts indicate that the CPU is unable to read data from memory
(e.g., due to privilege restrictions, misaligned addresses etc.) [4].
– : This divergence type represents the opposite of the previous
case. Speciﬁcally, QEMU detects a bus error and delivers a SIGBUS to the test
program while the Fast Models indicate that the memory access made by the
target program is valid (i.e., cpu is not in abt mode).
If no exception is triggered for an instruction, we further compare the registers
and memory operands within the collected trace data. We determine memory
operand divergence (Step 3) if the address or the number of transferred bytes
diﬀer between QEMU and Fast Model traces. We do not treat data diﬀerences
as divergence since subtle diﬀerences may exist in the initial memory states
of QEMU and Fast Models. We drop cases with diﬀerent memory values from
further examination as the loaded data would propagate into register state and
cause false positive divergence detection. Finally, if no divergence is identiﬁed in
exception behavior or in memory operands, we compare the user-level registers
(Step 4) to detect any register state divergence. Steps 2–4 presented in Fig. 3
continues for the remaining random instructions in the test program.
Since Unpredictable instructions can cause diﬀerent legitimate behaviors on
any two CPU implementations, we cannot use these instructions to determinis-
tically diﬀerentiate emulators from real systems. Thus, if a divergent instruction
identiﬁed in Steps 2–4 is Unpredictable, we do not classify this case into any
divergence group. However, an oﬃcially veriﬁed tool or a programmatic method-
ology to check if a given ARM instruction would generate Unpredictable behav-
ior is unavailable. Thus, we use an open-source speciﬁcation of ARMv7 archi-
tecture written in Standard ML (SML) and proposed by the earlier work [15].
Generating Detector Programs: Based on the identiﬁed divergent instruc-
tion semantics, Proteus can optionally generate a proof-of-concept program
that determines whether the program is executed on an emulator or a real sys-
tem. This section describes how our system generates these programs and pro-
vides insight into how a real-life malware can implement CPU semantic attacks.
Proteus: Detecting Android Emulators from Instruction-Level Proﬁles
13
if ( signum == SIGBUS )
sig_info = 1;
siglongjmp (buf , 1) ;
prepare () ; // register signal
handlers
if (! sigsetjmp (buf ,1) ) {
}
cleanup () ; // remove signal handlers
return sig_info ;
r4 ,=0 x00008075 ");
// Set target registers
asm (" LDR
// execute divergent instruction
asm (". byte 0x10 ,0 x00 ,0 x97 ,0 xe8 ");
siglongjmp (buf , 1) ;
11
12
13
14
15
16
17
18
19
20 }
21 void main () {
22
23
1 sig_atomic_t sig_info = 0;
2 sigjmp_buf buf ;
3
4 void catch_signals ( int signum ) {
5
6
7
8 }
9 sig_atomic_t say_my_name () {
10
Proteus generates detector programs by
rewriting a set of pre-built template bina-
ries to reconstruct the divergent behavior.
The template programs simply execute the
divergent instruction and check whether the
resulting eﬀect matches with QEMU or real
CPU behavior. Before executing the diver-
gent instruction, we set up the environ-
ment with the necessary changes to trig-
ger divergent behavior and observe its eﬀect.
These changes are (1) setting the regis-
ter values (CPSR and R0-R12) with the val-
ues provided from the divergence identiﬁ-
cation phase, (2) installing signal handlers
for exception-related divergent behavior. We
use sigsetjmp/siglongjmp provided by the
standard C library to preserve the CPU state
which would otherwise be altered by the changes we perform. Listing 1.1 illus-
trates an example detector program for the  group. The current
CPU state is saved with sigsetjmp on line 11. The register state is loaded with
target values (line 13) and the divergent instruction (LDM r7,{r4}) is executed
(line 15) to reconstruct the divergent behavior. The program determines emula-
tion if it does not receive a SIGBUS after the divergent instruction accesses the
misaligned memory address stored in R4. The original CPU state before con-
structing the divergent behavior is restored on either line 7 or 16. We simply
build one template program for each of the six divergence groups. Depending on
the divergence group, for a given divergent instruction, we pick the corresponding
sample template to rewrite a new detector program.
Listing 1.1. A sample program
snippet for detecting Android
emulator.
sig_atomic_t ret = say_my_name () ;
( ret ==1) ? printf (" real cpu "): printf (
24 }
" emulator ");
5 Evaluation
This section demonstrates the capabilities of Proteus for identifying the dis-
crepancies of QEMU’s emulated CPU from a real ARM CPU. We systematically
analyze the divergences reported by Proteus to identify the root causes of the
discrepancies. On a real smartphone and Android emulator, we demonstrate how
our ﬁndings can ﬁngerprint the underlying platform. Finally, we demonstrate
the feasibility of ﬁxing several root causes of divergences without any observable
performance penalty. Overall, we seek to answer the following questions:
– Are there any observable discrepancies between an emulated and real CPU?
If so, how prevalent are these diﬀerences? (Sect. 5.1)
– How eﬀective are the divergences reported by Proteus in terms of ﬁnger-
printing real hardware and dynamic analysis platforms? (Sect. 5.3)
– What are the root causes of the discrepancies (Sect. 5.2) and can we eliminate
them in QEMU without impacting its performance? (Sect. 5.4)
14
O. Sahin et al.
5.1 Divergence Statistics from Proteus
In order to address our ﬁrst research question,
we use Proteus to examine the instruction-level
traces from 500K input test programs. Figure 4
shows the number of instructions executed in the
test programs until a divergence occurs or QEMU
stops due to an exception. The majority of the