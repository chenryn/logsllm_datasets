only
- Low
- High
Whether CVM
is required
Table 2: Parameters that deﬁne target conﬁgurations.
Our analysis methodology, which we used in both our pre-
vious work and the current work, is structured by target con-
ﬁgurations. A target conﬁguration is a choice of up to four
parameters (depending on the kernel) from Table 2. A target
model is derived from the EMV contactless protocol model
and allows any execution of the latter while only assessing
the security of accepted transactions sharing the same target
conﬁguration.
The use of multiple conﬁgurations enables one to focus
the security analysis on those transactions of interest, deﬁned
by the corresponding choice of target conﬁgurations. For
example, one might be interested in whether authentication
to the terminal holds for high-value transactions performed
using the Mastercard kernel and cards supporting DDA as the
Ofﬂine Data Authentication method and online PIN as the
Cardholder Veriﬁcation Method. Further details can be found
at [4].
4.2 Extended Model with PAN-based Routing
Our previous model of the EMV contactless protocol speci-
ﬁes the terminal-issuer channel in a way that these two par-
ties always agree on the kernel used for online-authorized
transactions. In other words, we assumed that the transaction
authorization request is routed to a payment network that only
processes cards of the brand determined by the kernel used (or
equivalently the AID chosen during the application selection
phase). For example, if the transaction was processed with
the Visa kernel, then the authorization request is routed to a
network that handles Visa cards only.
This modeling assumption means that Mastercard cards can
only be used for transactions performed using the Mastercard
kernel. Clearly, our brand mixup attack demonstrates other-
wise. That is, in some cases the authorization request reaches
the card issuer, even when the card is not of the brand deter-
mined by the kernel used by the terminal. We have extended
our previous model with a more general model of routing,
where the terminal routes the authorization to the payment
network determined by the card’s PAN. The employed mod-
eling techniques are standard ones, but we generalized the
formalization of our previous model to consider this PAN-
based routing choice.
In Table 3 we summarize the results of our analysis, con-
ducted using our extended model. All target models have
56 Tamarin rules and about 800 lines of code on average.
Remarks 1 and 2 in the table indicate authentication issues,
which were ﬁrst identiﬁed by the original model (see [6],
Table 2, p. 11).
Remarks 3 and 4 indicate the newly discovered lack of
authentication of the AID and the CVM used in the EMV
contactless transaction. This is the underlying ﬂaw that leads
to our card brand mixup attack. For each of the affected target
models, our Tamarin analysis reveals an accepted transaction
where the following statements hold:
• the card used was a Mastercard,
• the terminal ran the transaction using the Visa kernel,
• no cardholder veriﬁcation was performed, and
• if the transaction value was high, then the CDCVM was
successfully performed from the terminal’s perspective.
We remark that our current ﬁndings do not contradict those
from our previous work. Our claim in [6] is that the Master-
card protocol is secure, whereas in this paper we show that
Mastercard cards are not secure. In fact, as we have explained,
our attack is possible precisely because one can use Master-
card cards for transactions not performed with the Mastercard
protocol!
4.3 Veriﬁed Countermeasures
In [6], we proposed two ﬁxes to the PIN bypass attack on
Visa. These ﬁxes are:
1. The terminal must always set the bit 1 of byte 1 of the
Terminal Transaction Qualiﬁers (TTQ).
2. The terminal must always verify the Signed Dynamic
Authentication Data (SDAD).
The above ﬁxes ensure that high-value transactions pro-
cessed with the Visa kernel use Visa’s secure conﬁguration
(DDA on online authorizations), where the card is requested
to supply the SDAD and the terminal veriﬁes it. As can be
observed in our results (Table 3, Line 4), we have veriﬁed that
this conﬁguration, and by extension the two ﬁxes listed above,
prevents one from turning a Mastercard card into a Visa
card. The ﬁxes work because of the kernel-speciﬁc format
of the data that cards sign to produce the SDAD. Namely,
USENIX Association
30th USENIX Security Symposium    189
No. Target model
issuer accepts
auth. to terminal
auth. to issuer
Properties
1
Visa_EMV_Low_PaynetPAN
2
Visa_EMV_High_PaynetPAN
3
Visa_DDA_Low_PaynetPAN
Visa_DDA_High_PaynetPAN
4
5
Mastercard_SDA_OnlinePIN_Low_PaynetPAN
6
Mastercard_SDA_OnlinePIN_High_PaynetPAN
7
Mastercard_SDA_NoPIN_Low_PaynetPAN
8
Mastercard_SDA_NoPIN_High_PaynetPAN
9
Mastercard_DDA_OnlinePIN_Low_PaynetPAN
10 Mastercard_DDA_OnlinePIN_High_PaynetPAN
11 Mastercard_DDA_NoPIN_Low_PaynetPAN
12 Mastercard_DDA_NoPIN_High_PaynetPAN
13 Mastercard_CDA_OnlinePIN_Low_PaynetPAN
14 Mastercard_CDA_OnlinePIN_High_PaynetPAN
15 Mastercard_CDA_NoPIN_Low_PaynetPAN
16 Mastercard_CDA_NoPIN_High_PaynetPAN
Legend:
(cid:88): property veriﬁed
(2): disagrees with the card on the AC (3): disagrees with the terminal on the AID (4): disagrees with the card on the CVM
×(1)
×(1)
(cid:88)
(cid:88)
×(3)
×(3,4)
×(3)
–
×(3)
×(3,4)
×(3)
–
×(3)
×(3,4)
×(3)
–
×(1)
×(1)
×(2)
(cid:88)
×(2)
(cid:88)
×(2)
–
×(2)
(cid:88)
×(2)
–
(cid:88)
(cid:88)
(cid:88)
–
(cid:88)
(cid:88)
×(2)
(cid:88)
×(2)
(cid:88)
×(2)
–
×(2)
(cid:88)
×(2)
–
(cid:88)
(cid:88)
(cid:88)
–
×: property falsiﬁed
–: not applicable
(1): disagrees with the card on the CVM
Table 3: Analysis results for the EMV contactless protocol where the authorization is routed to a payment network determined by
the brand indicated by the PAN. Each target model is named according to the corresponding target conﬁguration.
the Visa protocol speciﬁes that the input to the SDAD has
the header 0x95 for online authorizations (see [17], p. 128),
whereas the Mastercard kernel speciﬁes the usage of the 0x05
header (see [16], p. 310 and [14], p. 73). In other words, no
SDAD generated by a Mastercard card will pass the veriﬁ-
cation by a terminal running the Visa kernel for transactions
requiring online authorization.
Additionally, we propose the following novel EMV-wide
countermeasures that kernels can implement internally to
guarantee secure online-authorized transactions, without hav-
ing to rely on Visa-speciﬁc countermeasures.
pass attacks. Note that the second countermeasure will be
costly as it requires reissuing cards.
4.4 Countermeasures by Mastercard
We shared our countermeasures with Mastercard, as part of
the disclosure process, and learned from them the following:
1. Mastercard acquirers are required to include the AID in
the authorization data, allowing issuers to check the AID
against the PAN.
1. All transactions must have the card generate the SDAD
and the terminal verify it.
2. Mastercard has other data points in the authorization
request that can be used to identify our attack.
2. The selected AID must be part of the input to the SDAD.
Our ﬁrst countermeasure generalizes the two ﬁxes we pro-
posed in [6], listed earlier in this section. The second coun-
termeasure defends precisely against the card brand mixup
attack that we have described in this paper. We have produced
machine-checked security proofs for these countermeasures,
using our extended model. This means that they effectively
prevent the card brand mixup attack as well as both PIN by-
As a result of the disclosure process and once Mastercard
learned that not all issuers check the AID or these other data
points, they implemented these checks on their network. Our
interaction with Mastercard also provided us additional in-
sights on how certain terminals, such as the ones from SIX,
can detect a mismatching AID and PAN and thus decline the
transaction from the start.
With the mentioned checks in place, we again attempted
our attack. This time it failed: the terminal requested the
190    30th USENIX Security Symposium
USENIX Association
insertion of the card into the terminal and the entry of a PIN.
Our experiments therefore provide evidence that these checks,
deployed now by Mastercard, prevent our Mastercard-Visa
mixup attack.
5 Related Work
In this section we review some of the related work on EMV
(in)security, focusing on other practical attacks against the
payment standard. As can be seen in our and others’ work,
the EMV contactless protocol is a prime target for hackers,
given the ease of eavesdropping and modifying transaction
data on the NFC channel. Widely available hardware such as
mobile phones, Arduino boards, and Raspberry Pi boards can
easily be used for these attacks.
Ten years ago, Murdoch et al. [27] reported the ﬁrst PIN
bypass attack against the EMV payment system.3 The authors
demonstrated that, for transactions where the card veriﬁes the
PIN entered on the terminal’s PIN pad, a man-in-the-middle
can simply reply with the “PIN veriﬁed” response to any PIN
entered, right or wrong. The security ﬂaw leading to this at-
tack is the lack of authentication of the card’s response to
the terminal’s PIN veriﬁcation request, used in ofﬂine Card-
holder Veriﬁcation Methods (CVMs). Our prior research [6]
showed that this ﬂaw still exists in old cards that support
neither asymmetric cryptography nor online PIN veriﬁcation.
Ferradi et al. [18] described the forensic analysis of a series
of credit card fraud events where criminals used 40 modiﬁed
cards and carried out 7,000 fraudulent transactions, totaling
about 600,000 Euros. The technical ﬂaw that was presumably
exploited by these criminals is that of [27].
Barisani et al. [5] presented a PIN harvest attack, also
against EMV contact cards. Their attack works by downgrad-
ing the card’s list of supported CVMs to a Plaintext PIN-only
list. The authors showed that the protection against modiﬁca-
tion that the Ofﬂine Data Authentication (ODA) offers to the
CVM list can be bypassed by setting the card-sourced Issuer
Action Code (IAC)-Denial object to zero. This prevents the
terminal from declining transactions with ODA failure. The
terminal’s selection of the CVM is determined by the card’s
list of supported CVMs. The authors found out that, even
if this list is authenticated to the terminal during the ofﬂine
authentication of the card, the list can be downgraded to a
Plaintext PIN-only list. This is possible by setting the Issuer
Action Code (IAC)-Denial data to zero, which prevents the
terminal from declining the transaction.
EMV’s speciﬁcation v4.3 [15] (p. 115) recommends using
a non-zero Terminal Action Code (TAC)-Denial object, which
results in ODA-failing transactions being declined and thus
prevents the PIN harvest of [5]. Indeed, during the (contact-
less) tests we performed using our app, all the transactions
3BBC News coverage at https://youtu.be/1pMuV2o4Lrw.
where we modiﬁed the IAC-Denial object were declined. We
exposed a similar PIN harvest attack in [6].
Another PIN-related issue for EMV was observed by Emms
et al. in [13]. The authors reported that some Visa contactless
cards issued in the UK do not request PIN veriﬁcation for non-
GBP transactions. We note that this is unlikely to be exploited
with modern cards and terminals. The reasons are two-fold:
(1) the current Visa kernel establishes that if the terminal
requires cardholder veriﬁcation for a given transaction, then
the card must offer at least one method to do so, and (2) Emms
et al.’s observation seems to work only for transactions in
EMV’s magstripe mode, which is now deprecated.