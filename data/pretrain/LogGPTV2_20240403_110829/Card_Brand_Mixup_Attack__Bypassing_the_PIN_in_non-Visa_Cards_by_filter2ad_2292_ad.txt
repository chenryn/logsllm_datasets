### Table 2: Parameters that Define Target Configurations

Our analysis methodology, used in both our previous and current work, is structured around target configurations. A target configuration is a selection of up to four parameters (depending on the kernel) from Table 2. The target model is derived from the EMV contactless protocol model and allows any execution of the latter while only assessing the security of accepted transactions sharing the same target configuration.

Using multiple configurations enables a focused security analysis on specific transactions of interest, defined by the corresponding choice of target configurations. For example, one might be interested in whether authentication to the terminal holds for high-value transactions performed using the Mastercard kernel, with cards supporting DDA as the Offline Data Authentication method and online PIN as the Cardholder Verification Method. Further details can be found in [4].

### 4.2 Extended Model with PAN-based Routing

In our previous model of the EMV contactless protocol, we specified the terminal-issuer channel such that these two parties always agreed on the kernel used for online-authorized transactions. In other words, we assumed that the transaction authorization request was routed to a payment network that processes only cards of the brand determined by the kernel used (or equivalently, the AID chosen during the application selection phase). For instance, if the transaction was processed with the Visa kernel, the authorization request would be routed to a network that handles Visa cards exclusively.

This modeling assumption meant that Mastercard cards could only be used for transactions performed using the Mastercard kernel. However, our brand mixup attack demonstrated otherwise. In some cases, the authorization request reaches the card issuer even when the card is not of the brand determined by the kernel used by the terminal. We have extended our previous model to include a more general routing model, where the terminal routes the authorization to the payment network determined by the card’s PAN. The employed modeling techniques are standard, but we generalized the formalization of our previous model to consider this PAN-based routing choice.

Table 3 summarizes the results of our analysis conducted using the extended model. All target models have 56 Tamarin rules and about 800 lines of code on average. Remarks 1 and 2 in the table indicate authentication issues first identified by the original model (see [6], Table 2, p. 11).

Remarks 3 and 4 indicate newly discovered issues with the lack of authentication of the AID and CVM used in the EMV contactless transaction. This flaw leads to our card brand mixup attack. For each affected target model, our Tamarin analysis reveals an accepted transaction where:
- The card used was a Mastercard.
- The terminal ran the transaction using the Visa kernel.
- No cardholder verification was performed.
- If the transaction value was high, the CDCVM was successfully performed from the terminal's perspective.

We note that our current findings do not contradict those from our previous work. Our claim in [6] is that the Mastercard protocol is secure, whereas in this paper, we show that Mastercard cards are not secure. In fact, our attack is possible precisely because one can use Mastercard cards for transactions not performed with the Mastercard protocol.

### 4.3 Verified Countermeasures

In [6], we proposed two fixes to the PIN bypass attack on Visa:
1. The terminal must always set bit 1 of byte 1 of the Terminal Transaction Qualifiers (TTQ).
2. The terminal must always verify the Signed Dynamic Authentication Data (SDAD).

These fixes ensure that high-value transactions processed with the Visa kernel use Visa's secure configuration (DDA on online authorizations), where the card is requested to supply the SDAD and the terminal verifies it. As observed in our results (Table 3, Line 4), we verified that this configuration, and by extension the two fixes listed above, prevent turning a Mastercard card into a Visa card. The fixes work because of the kernel-specific format of the data that cards sign to produce the SDAD. Specifically, the Visa protocol specifies that the input to the SDAD has the header 0x95 for online authorizations (see [17], p. 128), whereas the Mastercard kernel specifies the usage of the 0x05 header (see [16], p. 310 and [14], p. 73). Thus, no SDAD generated by a Mastercard card will pass the verification by a terminal running the Visa kernel for transactions requiring online authorization.

Additionally, we propose the following novel EMV-wide countermeasures that kernels can implement internally to guarantee secure online-authorized transactions without relying on Visa-specific countermeasures:
1. All transactions must have the card generate the SDAD and the terminal verify it.
2. The selected AID must be part of the input to the SDAD.

Our first countermeasure generalizes the two fixes we proposed in [6]. The second countermeasure defends against the card brand mixup attack described in this paper. We have produced machine-checked security proofs for these countermeasures using our extended model, confirming their effectiveness in preventing the card brand mixup attack as well as both PIN bypass attacks.

### 4.4 Countermeasures by Mastercard

We shared our countermeasures with Mastercard as part of the disclosure process and learned the following:
1. Mastercard acquirers are required to include the AID in the authorization data, allowing issuers to check the AID against the PAN.
2. Mastercard has other data points in the authorization request that can be used to identify our attack.

As a result of the disclosure process, once Mastercard learned that not all issuers check the AID or these other data points, they implemented these checks on their network. Our interaction with Mastercard also provided additional insights into how certain terminals, such as those from SIX, can detect a mismatching AID and PAN and thus decline the transaction from the start.

With these checks in place, we attempted our attack again. This time, it failed: the terminal requested the insertion of the card into the terminal and the entry of a PIN. Our experiments provide evidence that these checks, now deployed by Mastercard, prevent our Mastercard-Visa mixup attack.

### 5 Related Work

In this section, we review related work on EMV (in)security, focusing on practical attacks against the payment standard. The EMV contactless protocol is a prime target for hackers due to the ease of eavesdropping and modifying transaction data on the NFC channel. Widely available hardware, such as mobile phones, Arduino boards, and Raspberry Pi boards, can easily be used for these attacks.

Ten years ago, Murdoch et al. [27] reported the first PIN bypass attack against the EMV payment system. The authors demonstrated that, for transactions where the card verifies the PIN entered on the terminal’s PIN pad, a man-in-the-middle can simply reply with the "PIN verified" response to any PIN entered, right or wrong. The security flaw leading to this attack is the lack of authentication of the card’s response to the terminal’s PIN verification request, used in offline Cardholder Verification Methods (CVMs). Our prior research [6] showed that this flaw still exists in old cards that support neither asymmetric cryptography nor online PIN verification.

Ferradi et al. [18] described the forensic analysis of a series of credit card fraud events where criminals used 40 modified cards and carried out 7,000 fraudulent transactions, totaling about 600,000 Euros. The technical flaw exploited by these criminals is similar to the one described by Murdoch et al. [27].

Barisani et al. [5] presented a PIN harvest attack against EMV contact cards. Their attack works by downgrading the card’s list of supported CVMs to a Plaintext PIN-only list. The authors showed that the protection against modification offered by the Offline Data Authentication (ODA) to the CVM list can be bypassed by setting the card-sourced Issuer Action Code (IAC)-Denial object to zero. This prevents the terminal from declining transactions with ODA failure. The terminal’s selection of the CVM is determined by the card’s list of supported CVMs. Even if this list is authenticated to the terminal during the offline authentication of the card, it can be downgraded to a Plaintext PIN-only list by setting the IAC-Denial data to zero, which prevents the terminal from declining the transaction.

EMV’s specification v4.3 [15] (p. 115) recommends using a non-zero Terminal Action Code (TAC)-Denial object, which results in ODA-failing transactions being declined, thus preventing the PIN harvest attack. During our (contactless) tests using our app, all transactions where we modified the IAC-Denial object were declined. We exposed a similar PIN harvest attack in [6].

Another PIN-related issue for EMV was observed by Emms et al. [13]. The authors reported that some Visa contactless cards issued in the UK do not request PIN verification for non-GBP transactions. However, this is unlikely to be exploited with modern cards and terminals. The reasons are two-fold: (1) the current Visa kernel establishes that if the terminal requires cardholder verification for a given transaction, then the card must offer at least one method to do so, and (2) Emms et al.’s observation seems to work only for transactions in EMV’s magstripe mode, which is now deprecated.