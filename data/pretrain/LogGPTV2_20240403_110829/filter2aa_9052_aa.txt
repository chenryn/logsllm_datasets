# NFC
Category: Reversing, 200 points
## Description
> Our target adopted a new way to keep sensitive information! They use secure NFC tags to keep secure and confidential information inside them.
> 
> We managed to place a strong NFC reader near our targetâ€™s secret NFC tag. Now we want to communicate with the that tag and extract the secret information from it.
> 
> In order to connect to our reader and send commands to the tag, you just need to open a TCP socket to:
> 
> nfc.shieldchallenges.com 80
> 
> Each message you send on this socket will be transferred to the NFC tag, and the response from the tag will be sent back to you on that same socket.
> 
> In addition, our sources equipped us with some information that may help you to communicate with the tag and extract the secret information from it:
> 
> 1. A secret document from our target (attached).
> 
> 2. An authentic message sent to the NFC tag. Due to a low signal, we managed to extract only 5 bytes from the message. The message is presented below (X stands for an unknown nibble).
> 
>                1BXXXXBEAF4930
> 
> 3. The secret information you need to extract is located somewhere in the memory space of the tag, and its size is 16 characters.
> 
> Good luck! We trust you!
A [PDF File](nfc_specification_details.pdf) titled "Security NFC Tag Specification" was attached.
## Solution:
We'll start with what we think is the intended solution, then summarize what we did during the CTF.
### Intended Solution(?)
The spec gives us a new command which can be run without authentication:
![](images/nfc4.png)
This command returns the value of `CFG0` and `CFG1`, which are the first two DWORDs in the configuration pages range (Page addresses `0x29`, `0x2A`):
![](images/nfc3.png)
They are interpreted as:
![](images/nfc5.png)
Let's start by reading them:
```python
from pwn import *
import pydtn_pydtn_encoding_crc as crc # https://git.ifne.eu/space-public/pyDTN/-/blob/master/pydtn/pydtn/encoding/crc.py
import ctypes
import textwrap
crc16_a = crc.CRC(16, 0x1021, 0x6363 , 0x0000, True, True)
class Struct_Base(ctypes.LittleEndianStructure):
    INDENT =  "|- "
    def __str__(self):
        res = self.__class__.__name__ + "\n"
        for field in self._fields_:
            field_name = field[0]
            field_type = field[1]
            if hasattr(field_type, '_fields_'):
                res += f"{self.INDENT}{field_name}: " + textwrap.indent(str(getattr(self, field_name)), "   ").lstrip()
            else:
                res += f"{self.INDENT}{field_name}: {getattr(self, field_name)}\n"
        return res
class NAK(Struct_Base):
   _pack_ = 1
   _fields_ = [
      ("value", ctypes.c_uint8, 4),
      ("reserved", ctypes.c_uint8, 4)
   ]
   _values = {
       0x0: "Invalid Argument",
       0x1: "CRC Error",
       0x4: "Authentication count overflow",
       0x5: "EEPROM write error",
       0x6: "Unsupported command"
   }
   def __str__(self):
       return "NAK({})".format(self._values.get(self.value, f"Unknown value {self.value}"))
class NFC_Base(Struct_Base):
    def is_checksum_valid(self):
        b = bytes(self)[:self.__class__.crc.offset]
        return (crc16_a(b) == self.crc)
    def update_checksum(self):
        b = bytes(self)[:self.__class__.crc.offset]
        self.crc = crc16_a(b)
class GET_CFG_Request(NFC_Base):
   _pack_ = 1
   _fields_ = [
      ("cmd", ctypes.c_uint8),
      ("crc", ctypes.c_uint16)
   ]
   def __init__(self):
       self.cmd = 0x66
       self.update_checksum()
class CFG0_Mirror(Struct_Base):
   _pack_ = 1
   _fields_ = [
      ("RFUI1",        ctypes.c_uint8, 2),
      ("STRG_MOD_EN",  ctypes.c_uint8, 1),
      ("RFUI2",        ctypes.c_uint8, 1),
      ("MIRROR_BYTE",  ctypes.c_uint8, 2),
      ("MIRROR_CONF",  ctypes.c_uint8, 2),
   ] 
class CFG0(Struct_Base):
   _pack_ = 1
   _fields_ = [
      ("MIRROR",      CFG0_Mirror),
      ("RFUI1",       ctypes.c_uint8),
      ("MIRROR_PAGE", ctypes.c_uint8),
      ("AUTH0",       ctypes.c_uint8),
   ] 
class CFG1_Access(Struct_Base):
   _pack_ = 1
   _fields_ = [
      ("AUTHLIM",           ctypes.c_uint8, 3),
      ("NFC_CNT_PWD_PROT",  ctypes.c_uint8, 1),
      ("NFC_CNT_EN",        ctypes.c_uint8, 1),
      ("RFUI1",             ctypes.c_uint8, 1),
      ("CFGLCK",            ctypes.c_uint8, 1),
      ("PROT",              ctypes.c_uint8, 1),
   ]  
class CFG1(Struct_Base):
   _pack_ = 1
   _fields_ = [
      ("ACCESS",      CFG1_Access),
      ("RFUI1",       ctypes.c_uint8),
      ("RFUI2",       ctypes.c_uint8),
      ("RFUI3",       ctypes.c_uint8),
   ] 
class GET_CFG_Response(NFC_Base):
   _pack_ = 1
   _fields_ = [
      ("cfg0", CFG0),
      ("cfg1", CFG1),
      ("crc",  ctypes.c_uint16)
   ]
def get_cfg(r):
    cfg_req = GET_CFG_Request()
    r.send(bytes(cfg_req))
    raw_response = r.recv(ctypes.sizeof(GET_CFG_Response))
    response = GET_CFG_Response.from_buffer_copy(raw_response)
    if not response.is_checksum_valid():
        raise Exception("Invalid CRC for GET_CFG response")
    return (response.cfg0, response.cfg1)
if __name__ == "__main__":
    r = remote("nfc.shieldchallenges.com", 80)
    cfg0, cfg1 = get_cfg(r)
    print(cfg0)
    print(cfg1)
```
Output: 
```console
root@kali:/media/sf_CTFs/shabak/NFC# python3 solve.py
[+] Opening connection to nfc.shieldchallenges.com on port 80: Done
CFG0
|- MIRROR: CFG0_Mirror
   |- RFUI1: 0
   |- STRG_MOD_EN: 1
   |- RFUI2: 0
   |- MIRROR_BYTE: 0
   |- MIRROR_CONF: 0
|- RFUI1: 0
|- MIRROR_PAGE: 0
|- AUTH0: 36
CFG1
|- ACCESS: CFG1_Access
   |- AUTHLIM: 0
   |- NFC_CNT_PWD_PROT: 0
   |- NFC_CNT_EN: 0
   |- RFUI1: 0
   |- CFGLCK: 1
   |- PROT: 1
|- RFUI1: 5
|- RFUI2: 0
|- RFUI3: 0
```
From here we can learn a few things about the system:
1. `AUTH0: 36`
   1. `AUTH0` defines the page address from which the password verification is required. 
   2. As we saw in the memory layout diagram, user memory is between pages 3 and 39. So, we should be able to read pages 4-36 without authentication. We should try that.
2. `CFGLCK: 1`
   1.  User configuration permanently locked against write access, except PWD and
PACK
3. `PROT: 1`
   1. Read and write access is protected by the password verification
So, let's go ahead and try to read pages 4-36:
```python
# ...
class READ_Request(NFC_Base):
   _pack_ = 1
   _fields_ = [
      ("cmd", ctypes.c_uint8),
      ("addr", ctypes.c_uint8),
      ("crc", ctypes.c_uint16)
   ]
   def __init__(self, address):
       self.cmd = 0x30
       self.addr = address
       self.update_checksum()
class READ_Response(NFC_Base):
   _pack_ = 1
   _fields_ = [
      ("data", ctypes.c_uint8 * 16),