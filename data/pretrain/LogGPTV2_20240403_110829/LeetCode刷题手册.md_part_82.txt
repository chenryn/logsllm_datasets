---
## Page 854
解题思路
小元素的差。返回 A的所有子序列的宽度之和。由于答案可能非常大，请返回答案模 10^9+7。
给定一个整数数组A，考虑A 的所有非空子序列。对于任意序列 S，设 S 的宽度是 S 的最大元素和最
题目大意
Note:
Example 1: 
As the answer may be very large, return the answer modulo 10^9 + 7.
Return the sum of the widths of all subsequences of A.
element of S. 
For any sequence S, let the width of S be the difference between the maximum and minimum
 Given an array of integers A, consider all non-empty subsequences of A.
题目
891. Sum of Subsequence Widths
●1b{
return b 
return diff
 return a
---
## Page 855
Example 1: 
Return the total surface area of the resulting shapes.
Each value V = grid[i] [j] represents a tower of  cubes placed on top of grid cell (i, j).
On a N * N grid, we place some 1 * 1 * 1 cubes.
892. Surface Area of 3D Shapes
题目
代码
·理解题意以后，可以发现，数组内元素的顺序并不影响最终求得的所有子序列的宽度之和。
func sumsubseqwidths(A []int) int {
import（
packageleetcode
return res
"sort"
for i := O; i = A[i]。所以 A[i] 会在 2^i 个子序列的右边界出现，2^(n-i-1)个左边界出现。那么 A[i] 对最终
间中间的时候，不影响最终结果。先对 A[] 进行排序，排序以后，有i个数b{
return area
for i := O; i o{ 
// left 
if i{ 
// up 
area += grid[i][j]*4 + 2
if grid[i][j] == 0 {
// right 
/ / down 
m := min(grid[i][j], grid[i][j+1]]
m := min(grid[i][j], grid[i][j-1]]
area -= m 
m := min(grid[i][j], grid[i-i][j]] 
area -= m 
area -= m 
 continue
area -= m 
 := min(grid[i][j], grid[i+l][j]]
---
## Page 858
FreqStack 有两个函数：
实现FreqStack，
题目大意
Note:
Example 1: 
and returned.
If there is a tie for most frequent element, the element closest to the top of the stack is removed
popO, which removes and returns the most frequent element in the stack.
push(int x), which pushes an integer x onto the stack.
·push(int x)，将整数×推入栈中。
The stack becomes [5,7].
pop() -> returns 4.
The stack becomes [5,7,4].
The stack becomes [5,7,5,4].
top.
u o asao s  anq ‘uanb aso a s  pu s e ‘ suaa  returns 5, as 5 is the most frequent.
top.
After making six .push operations, the stack is [5,7,5,7,4,5] from bottom to
Explanation:
Output: [null,null,null,null,null,null,null,5,7,5,4] 
[[] , [5],[7] ,[5],[7],[4], [5],[],[],[],[]] 
"..dod..dod..od...od....ysnd....ysnd....ysnd...ysnd..ysnd....ysnd....?ersbau..
Input:
pop()，它移除并返回栈中出现最频繁的元素。如果最频繁的元素不只一个，则移除并返回最接近
all test cases.
 It is guaranteed that FreqStack.pop( won't be called if the stack has zero elements.
 Calls to FreqStack.push(int x) will be such that 0  this.maxfreq {
+
}6
return FreqStack{freq: hash, group: maxHash}
maxHash := make(map[int] []int)
hash := make(map[int]int) 
return x
3
maxfreq int 
group 
freq 
 this.maxfreq--
 := this.freq[x]
this.freq[x]++
this.freq[x] =
else { 
 map[int]int 
map[int][]int
---
## Page 860
Note:
Example 5: 
Example 4: 
 Example 3:
 Example 2: 
 Example 1: 
 Return true if and only if the given array A is monotonic.
decreasing if for all i = A[j] .
An array A is monotone increasing if for all i =A[j]，那么数组 A 是单调递减的。当给定的数组 A 是单调数 
如果数组是单调递增或单调递减的，那么它是单调的。如果对于所有iA[1] { 
if A[i]A[i+l] { 
 return dec(A[l:])
return inc(A[1:]]
 return true
return false 
return false 
Y
---
## Page 862
题目大意
Note:
Example 1:
now the root of the tree, and every node has no left child and only 1 right child.
Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is 
题目
 2. Each node will have a unique integer value from 0 to 1000. 
 1. The number of nodes in the given tree will be between 1 and 100.
[6'nu'8"nu*'LInu'9"Lnu′s'Lnu''LLnu'"nu''Lnu*] :ndno 
Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]
の
6
---
## Page 863
代码
解题思路
提示：
点，只有一个右子结点。
给定一个树，按中序遍历重新排列树，使树中最左边的结点现在是树的根，并且每个结点没有左子结
·每个结点都有一个从0到1000 范围内的唯一整数值。
func recBST(root, tail *TreeNode) *TreeNode {
//解法—链表思想
package leetcode
·给定树中的结点数介于1和100 之间。
func increasingBST(root *TreeNode) *TreeNode {
if root == nil {
tail.Right，tail=root，root //把root 接上 tail，并保持 tail指向尾部
recBST(root, tail)
var head = &TreeNode{} 
要求的样子了。代码实现见解法一。
按照题意，可以先中根遍历原树，然后按照中根遍历的顺序，把所有节点都放在右子树上。见解法
给出一颗树，要求把树的所有孩子都排列到右子树上。
root.Left = nil 
tail = recBST(root.Left, tail) 
return head.Right
tail := head 
 type TreeNode struct {
 Definition for a binary tree node.
上一次遍历的最后节点tail，边遍历，边把后续节点串起来。最终"反转"完成以后，就得到了题目
了。先找到左子树中最左边的节点，这个节点是新树的根节点。然后依次往回遍历，不断的记录下
以看做是有多个孩子的链表。这一题可以看成是链表的类似反转的操作。这一点想通以后，就好做
软件开发过程中不建议更改原有的值，但是算法题中追求空间和时间的最优，可以考虑一下。树可
上一种解法会重新构造一颗新树，有没有办法可以直接更改原有的树呢？节约存储空间。虽然平时
!
 return tail
Right *TreeNode
Val int
Left *TreeNode
// 切断 root 与其 Left 的连接，避免形成环
---
## Page 864
Example 2: 
Example 1:
in the final answer.)
Return the number of possible results. (Results that occur more than once are only counted once
bitwise OR of all the elements in B, obtaining a result A[i] I A[i+1] I ... I A[j] .
For every (contiguous) subarray B = [A[i] , A[i+1], ..., A[j]] (with i <= j), we take the 
We have an array A of non-negative integers.
题目
898. Bitwise ORs of Subarrays
There is only one possible result: 0.
Explanation: 
Output:1
Input: [0]
func increasingBSTl(root *TreeNode) *TreeNode {
//解法二模拟
return newRoot
newRoot = &TreeNode{val: list[O], Left: nil, Right: nil}
inorder(root, &list)
list, newRoot := []int{}， &TreeNode{} 
return tail 
tail = recBST(root.Right, tail)
for index := l; index < len(list); index++ {
cur := newRoot 
if len(list) == 0 {
 return root 
cur = tmp
cur.Right = tmp 
tmp := &TreeNode{val: list[index], Left: nil, Right: nil}
---
## Page 865
己为单独集合。这样就可以生成原数组的所有子集。
可以发现，从左往右遍历原数组，每次新来的一个元素，依次加入到之前已经生成过的集合中，再以自
解题思路
结果在最终答案中仅计算一次。）
中的每个元素进行按位或操作，获得结果 A[i]丨A[i+1]”..丨Aj]。返回可能结果的数量。（多次出现的
我们有一个非负整数数组 A。对于每个（连续的）子数组 B=[A[i], A[i+1],.…,Aj]]（i<=j），
题目大意
Note:
Example 3: 
·第二步，将每一行的子集内的所有元素都进行”运算，得到:
·给出一个数组，
2. 0 <= A[i] <= 10^9
1. 1 <= A.length <= 50000
·这道题可以这样考虑，第一步，先考虑所有的子数组如何得到，以［001，011，100，110，
The possible results are 1, 2, 3, 4, 6, and 7.
Explanation:
Output: 6 
Input: [1,2,4]
There are 3 unique values, so the answer is 3.
The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].
Explanation:
Output:3
Input: [1,1,2] 
果的种类数。
101]为例，所有的子数组集合如下：
[001 011 100 110 101] [011 100 110 101] [100 110 101] [110 101] [101]
[001 011 100110][011 100 110] [100110] [110]
[001 011 100] [011 100] [100]
[001 011][011]
[001]
，要求求出这个数组所有的子数组中，每个集合内所有数字取”运算以后，不同结
，我们对 B
---
## Page 866