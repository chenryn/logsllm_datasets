# 深入分析Windows系统DHCP漏洞（CVE-2019-0726）
##### 译文声明
本文是翻译文章，文章原作者 ptsecurity，文章来源：blog.ptsecurity.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
微软发布1月份补丁时，人们发现竟然有关于DHCP客户端存在严重漏洞的信息（[CVE-2019-0547](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0547)）。这个漏洞CVSS评分很高，微软也没有立即发布Exploitability
Index（可利用指数），因此用户难以抉择是否应该立即更新系统，这引起了广泛讨论。[有些机构](https://www.thezdi.com/blog/2019/1/8/the-january-2019-security-update-review)甚至认为，官方没有公布Exploitability
Index，代表很快就会有利用代码公布。
MaxPatrol等解决方案可以识别网络上哪些计算机存在漏洞，其他解决方案可以检测利用漏洞的攻击行为。为了能让这些解决方案行之有效，我们需要描述能够用来检测漏洞以及检测攻击行为的具体规则。另一方面，当我们找到攻击方法以及利用条件后，我们就可以制定出相应的规则。换句话说，我们需要找到与漏洞利用相关的所有细枝末节。与厂商网站以及CVE中的粗略描述不同，这个过程需要我们更加深入以及全面理解这些信息，厂商的描述通常比较简单，比如：
> 这个漏洞的原因在于操作系统没有正确处理内存中的对象。
因此，为了及时更新我们产品中的规则，以便检测利用DHCP漏洞的攻击行为、确定受影响的设备，我们需要深入分析所有细节。在二进制漏洞方面，许多人一上来就会通过patch-diff方式直达底层，比较并找到打补丁前后应用程序、库或者操作系统内核上的修改，但实际上第一步还是应该搜集信息。
> 注意：如果想直接阅读漏洞分析内容，大家可以跳过DHCP背景知识，直接查看“DecodeDomainSearchListData函数”这部分内容。
## 0x01 信息搜集
使用搜索引擎查找目前关于漏洞的所有信息后，我们并没有找到太多细节，并且获得的主要信息都转述自MSRC网站的[原始资料](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0547)，当微软在内部审计期间发现错误时经常会出现这种情况。
从这些公开信息中，我们发现这个漏洞与内存破坏有关，运行Windows 10 version
1803的客户端和服务端都会受此漏洞影响，当攻击者向DHCP客户端发送精心构造的响应时就会触发该漏洞。几天之后，该页面又新增了Exploitation
Index等级。
如上图所示，MSRC给的等级指数为2：不大可能成功利用。这意味着这个漏洞很有可能要么不可利用，要么利用起来非常困难。不可否认的是，微软在这方面并没有打低分的习惯，部分原因可能是考虑到声誉风险，也有可能是公司内部响应中心职能相对独立的结果。因此我们可以相信微软，认为官方给的可利用等级很有可能是真实的，然后以此开始分析利用方法。但不论如何，仔细检查漏洞成因总归不是坏事。漏洞形式可能多种多样，可能某事某刻又在某个地方重新出现。
我们在官方站点上下载`.msu`形式的补丁（安全更新），解压补丁后查找最可能与客户端DHCP响应处理有关的文件。现在这种操作已经越来越难，微软已经不通过独立的补丁来修复特定的错误，而是采用一个补丁包来包含整个月的补丁。这种方式增加了许多无关信息，我们必须找到真正感兴趣的目标。
在各种文件中，我们设置的过滤器筛选出了几个库，然后将这些库与未打补丁时的库进行对比，其中`dhcpcore.dll`库看上去似乎最有希望。此外，[BinDiff](https://www.zynamics.com/bindiff.html)还找到了最小改动的地方：
实际上，微软只在1个函数上做了或多或少的改动：`DecodeDomainSearchListData`。如果大家对DHCP协议及相关函数非常熟悉，那么应该知道该函数负责处理哪个列表。如果不熟悉，我们可以来分析一下这个协议。
## 0x02 DHCP协议及相关选项
DHCP（[RFC 2131](https://tools.ietf.org/html/rfc2131) |
[wiki](https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol)）是一个可扩展协议，由选项字段保证整个协议的扩展性。每个选项由唯一的tag（编号，标识符）来描述，选项中包含数据内容及数据大小，这也是网络协议常用的布局方式。在这些选项中，有一个“Domain
Search”选项（参考[RFC
3397](https://tools.ietf.org/html/rfc3397)），该选项允许DHCP服务器在客户端上设置标准的域名后缀。这种方式可以作为DNS后缀，方便网络连接。
比如，假设我们在客户端上设置了如下后缀域名：
     .microsoft.com
     .wikipedia.org
随后，如果采用域名方式获取客户端地址，这些尾部域名就会逐一插入DNS请求中，直到找到匹配项为止。比如，如果用户在浏览器地址中输入`ru`字符串，那么DNS请求就会先构造`ru.microsoft.com`，然后再构造`ru.wikipedia.org`：
实际上，现代浏览器都太智能了，它们会将类似FQDN的名字重定向到搜索引擎，因此我们可以看到不那么“智能”的输出结果：
大家可能会觉得这就是漏洞的根源所在。就这个行为而言，DHCP服务器能够修改DNS后缀，这对使用DHCP协议来请求网络参数的客户端而言的确可以算是一种安全风险。然而根据RFC，这是非常正常且已经在文档中描述的一种行为。DHCP服务器实际上是一种可信组件，的确能够影响接入的设备。
## 0x03 域名搜索选项
域名搜索（Domain
Search）选项编号为`0x77`（`119`）。与其他选项一样，该选项由单字节tag的选项编号来标识。与大多数选项类似，该选项tag后都跟着数据大小（1字节）。DHCP信息可以包含多个域名搜索选项，在这种情况下，这些选项会按照消息中的顺序拼接在一起。
上图来自[RFC
3397](https://tools.ietf.org/html/rfc3397)中的一个示例，相关数据被分成3块，每块数据大小为9字节。如上图所示，各个子域名开头为子域名所占大小（1字节），随后是子域名字符串。完整域名以`null`字节作为结尾符。
此外，该选项使用的是最简单的数据压缩方法：reparse
points（重解析点）。除了域名大小之外，选项字段中可能还包含`0xc0`。此时，下一个字节就代表相对于选项开头数据的一个偏移量，用来搜索域名的结尾符。因此，在这个例子中，我们可以得到两个域名后缀：
    .eng.apple.com
    .marketing.apple.com
## 0x04 DecodeDomainSearchListData函数