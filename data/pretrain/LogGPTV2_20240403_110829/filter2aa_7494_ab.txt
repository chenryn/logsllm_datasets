		}
	}
	return true
}
```
#### 1.2.2【必须】 文件访问权限
- 根据创建文件的敏感性设置不同级别的访问权限，以防止敏感数据被任意权限用户读取。例如，设置文件权限为：`-rw-r-----`
```go
ioutil.WriteFile(p, []byte("present"), 0640)
```
### 1.3 系统接口
**1.3.1【必须】命令执行检查**
- 使用`exec.Command`、`exec.CommandContext`、`syscall.StartProcess`、`os.StartProcess`等函数时，第一个参数（path）直接取外部输入值时，应使用白名单限定可执行的命令范围，不允许传入`bash`、`cmd`、`sh`等命令；
- 使用`exec.Command`、`exec.CommandContext`等函数时，通过`bash`、`cmd`、`sh`等创建shell，-c后的参数（arg）拼接外部输入，应过滤\n  $  &  ;  |  '  "  ( )  `等潜在恶意字符；
```go
// bad
func foo() {
	userInputedVal := "&& echo 'hello'" // 假设外部传入该变量值
	cmdName := "ping " + userInputedVal
	// 未判断外部输入是否存在命令注入字符，结合sh可造成命令注入
	cmd := exec.Command("sh", "-c", cmdName)
	output, _ := cmd.CombinedOutput()
	fmt.Println(string(output))
	cmdName := "ls"
	// 未判断外部输入是否是预期命令
	cmd := exec.Command(cmdName)
	output, _ := cmd.CombinedOutput()
	fmt.Println(string(output))
}
// good
func checkIllegal(cmdName string) bool {
	if strings.Contains(cmdName, "&") || strings.Contains(cmdName, "|") || strings.Contains(cmdName, ";") ||
		strings.Contains(cmdName, "$") || strings.Contains(cmdName, "'") || strings.Contains(cmdName, "`") ||
		strings.Contains(cmdName, "(") || strings.Contains(cmdName, ")") || strings.Contains(cmdName, "\"") {
		return true
	}
	return false
}
func main() {
	userInputedVal := "&& echo 'hello'"
	cmdName := "ping " + userInputedVal
	if checkIllegal(cmdName) { // 检查传给sh的命令是否有特殊字符
		return // 存在特殊字符直接return
	}
	cmd := exec.Command("sh", "-c", cmdName)
	output, _ := cmd.CombinedOutput()
	fmt.Println(string(output))
}
```
### 1.4 通信安全
#### 1.4.1【必须】网络通信采用TLS方式
- 明文传输的通信协议目前已被验证存在较大安全风险，被中间人劫持后可能导致许多安全风险，因此必须采用至少TLS的安全通信方式保证通信安全，例如gRPC/Websocket都使用TLS1.3。
```go
// good
func main() {
	http.HandleFunc("/", func(w http.ResponseWriter, req *http.Request) {
		w.Header().Add("Strict-Transport-Security", "max-age=63072000; includeSubDomains")
		w.Write([]byte("This is an example server.\n"))
	})
	// 服务器配置证书与私钥
	log.Fatal(http.ListenAndServeTLS(":443", "yourCert.pem", "yourKey.pem", nil))
}
```
#### 1.4.2【推荐】TLS启用证书验证
- TLS证书应当是有效的、未过期的，且配置正确的域名，生产环境的服务端应启用证书验证。
```go
// bad
import (
	"crypto/tls"
	"net/http"
)
func doAuthReq(authReq *http.Request) *http.Response {
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	res, _ := client.Do(authReq)
	return res
}
// good
import (
	"crypto/tls"
	"net/http"
)
func doAuthReq(authReq *http.Request) *http.Response {
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: false},
	}
	client := &http.Client{Transport: tr}
	res, _ := client.Do(authReq)
	return res
}
```
### 1.5 敏感数据保护
#### 1.5.1【必须】敏感信息访问
- 禁止将敏感信息硬编码在程序中，既可能会将敏感信息暴露给攻击者，也会增加代码管理和维护的难度
- 使用配置中心系统统一托管密钥等敏感信息
#### 1.5.2【必须】敏感数据输出
- 只输出必要的最小数据集，避免多余字段暴露引起敏感信息泄露
- 不能在日志保存密码（包括明文密码和密文密码）、密钥和其它敏感信息
- 对于必须输出的敏感信息，必须进行合理脱敏展示
```go
// bad
func serve() {
	http.HandleFunc("/register", func(w http.ResponseWriter, r *http.Request) {
		r.ParseForm()
		user := r.Form.Get("user")
		pw := r.Form.Get("password")
		log.Printf("Registering new user %s with password %s.\n", user, pw)
	})
	http.ListenAndServe(":80", nil)
}
// good
func serve1() {
	http.HandleFunc("/register", func(w http.ResponseWriter, r *http.Request) {
		r.ParseForm()
		user := r.Form.Get("user")
		pw := r.Form.Get("password")
		log.Printf("Registering new user %s.\n", user)
		// ...
		use(pw)
	})
	http.ListenAndServe(":80", nil)
}
```
- 避免通过GET方法、代码注释、自动填充、缓存等方式泄露敏感信息
#### 1.5.3【必须】敏感数据存储
- 敏感数据应使用SHA2、RSA等算法进行加密存储
- 敏感数据应使用独立的存储层，并在访问层开启访问控制
- 包含敏感信息的临时文件或缓存一旦不再需要应立刻删除
#### 1.5.4【必须】异常处理和日志记录
- 应合理使用panic、recover、defer处理系统异常，避免出错信息输出到前端
```go
defer func () {
	if r := recover(); r != nil {
		fmt.Println("Recovered in start()")
	}
}()
```
- 对外环境禁止开启debug模式，或将程序运行日志输出到前端
```bash
// bad
dlv --listen=:2345 --headless=true --api-version=2 debug test.go
// good
dlv debug test.go
```
### 1.6 加密解密
#### 1.6.1【必须】不得硬编码密码/密钥
- 在进行用户登陆，加解密算法等操作时，不得在代码里硬编码密钥或密码，可通过变换算法或者配置等方式设置密码或者密钥。
```go
// bad
const (
	user     = "dbuser"
	password = "s3cretp4ssword"
)
func connect() *sql.DB {
	connStr := fmt.Sprintf("postgres://%s:%s@localhost/pqgotest", user, password)
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		return nil
	}
	return db
}
// bad
var (
	commonkey = []byte("0123456789abcdef")
)
func AesEncrypt(plaintext string) (string, error) {
	block, err := aes.NewCipher(commonkey)
	if err != nil {
		return "", err
	}
}
```
#### 1.6.2【必须】密钥存储安全
- 在使用对称密码算法时，需要保护好加密密钥。当算法涉及敏感、业务数据时，可通过非对称算法协商加密密钥。其他较为不敏感的数据加密，可以通过变换算法等方式保护密钥。
#### 1.6.3【推荐】不使用弱密码算法
- 在使用加密算法时，不建议使用加密强度较弱的算法。
```
// bad
crypto/des，crypto/md5，crypto/sha1，crypto/rc4等。
// good
crypto/rsa，crypto/aes等。
```
### 1.7 正则表达式
#### 1.7.1【推荐】使用regexp进行正则表达式匹配
- 正则表达式编写不恰当可被用于DoS攻击，造成服务不可用，推荐使用regexp包进行正则表达式匹配。regexp保证了线性时间性能和优雅的失败：对解析器、编译器和执行引擎都进行了内存限制。但regexp不支持以下正则表达式特性，如业务依赖这些特性，则regexp不适合使用。
  - 回溯引用[Backreferences](https://www.regular-expressions.info/backref.html)
  - 查看[Lookaround](https://www.regular-expressions.info/lookaround.html)
```go
// good
matched, err := regexp.MatchString(`a.b`, "aaxbb")
fmt.Println(matched) // true
fmt.Println(err)     // nil
```
# 后台类
## 1 代码实现类
### 1.1 输入校验
#### 1.1.1【必须】按类型进行数据校验
- 所有外部输入的参数，应使用`validator`进行白名单校验，校验内容包括但不限于数据长度、数据范围、数据类型与格式，校验不通过的应当拒绝
```go
// good
import (
	"fmt"
	"github.com/go-playground/validator/v10"
)
var validate *validator.Validate
func validateVariable() {
	myEmail := "PI:EMAIL"
	errs := validate.Var(myEmail, "required,email")
	if errs != nil {
		fmt.Println(errs)
		return
		//停止执行
	}
	// 验证通过，继续执行
	...
}
func main() {
	validate = validator.New()
	validateVariable()
}
```
- 无法通过白名单校验的应使用`html.EscapeString`、`text/template`或`bluemonday`对`, &, ',"`等字符进行过滤或编码
```go
import (
	"text/template"
)
// TestHTMLEscapeString HTML特殊字符转义
func main(inputValue string) string {
	escapedResult := template.HTMLEscapeString(inputValue)
	return escapedResult
}
```
### 1.2 SQL操作
#### 1.2.1【必须】SQL语句默认使用预编译并绑定变量
- 使用`database/sql`的prepare、Query或使用GORM等ORM执行SQL操作
```go
import (
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
)
type Product struct {
	gorm.Model
	Code  string
	Price uint
}
...
var product Product
...
db.First(&product, 1)
```
- 使用参数化查询，禁止拼接SQL语句，另外对于传入参数用于order by或表名的需要通过校验
```go
// bad
import (
	"database/sql"
	"fmt"
	"net/http"
)
func handler(db *sql.DB, req *http.Request) {
	q := fmt.Sprintf("SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='%s' ORDER BY PRICE",
		req.URL.Query()["category"])
	db.Query(q)
}
// good
func handlerGood(db *sql.DB, req *http.Request) {
	// 使用?占位符
	q := "SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='?' ORDER BY PRICE"
	db.Query(q, req.URL.Query()["category"])
}
```
### 1.3 网络请求
####  1.3.1【必须】资源请求过滤验证
- 使用`"net/http"`下的方法`http.Get(url)`、`http.Post(url, contentType, body)`、`http.Head(url)`、`http.PostForm(url, data)`、`http.Do(req)`时，如变量值外部可控（指从参数中动态获取），应对请求目标进行严格的安全校验。
- 如请求资源域名归属固定的范围，如只允许`a.qq.com`和`b.qq.com`，应做白名单限制。如不适用白名单，则推荐的校验逻辑步骤是：
  - 第 1 步、只允许HTTP或HTTPS协议
  - 第 2 步、解析目标URL，获取其HOST
  - 第 3 步、解析HOST，获取HOST指向的IP地址转换成Long型
  - 第 4 步、检查IP地址是否为内网IP，网段有：
    ```
    // 以RFC定义的专有网络为例，如有自定义私有网段亦应加入禁止访问列表。
    10.0.0.0/8
    172.16.0.0/12
    192.168.0.0/16
    127.0.0.0/8