### Analysis of Custom Permissions in Android Applications

#### Overview
We analyzed 1308 applications to identify the usage and statistics related to custom permissions. Despite some collection failures, our dataset provides a comprehensive view of how custom permissions are used and their potential security implications.

#### Key Findings
- **Custom Permission Usage**: 
  - 65% of the apps in our dataset declare custom permissions (either statically or dynamically).
  - 70% of these apps request custom permissions.
  - 89% of all custom permissions created by these apps have a protection level of "signature" (see Table I and Table II).

**Table I: Apps at Risk Due to Custom Permissions**

| Usage | Number of Apps | Percentage |
|-------|----------------|------------|
| Create Static Custom Permissions | 834 | 64% |
| Create Dynamic Custom Permissions | 50 | 3% |
| Create Custom Permissions | 847 | 65% |
| Request Third-party Permissions | 919 | 70% |
| Total number of apps in dataset | 1308 | 100% |

**Table II: Protection Levels of Custom Permissions**

| Permission Protection Level | Number of Permissions | Percentage |
|-----------------------------|-----------------------|------------|
| Signature Permissions | 1203 | 89% |
| Dangerous Permissions | 14 | 1% |
| Normal Permissions | 40 | 2% |
| Signature or System Permissions | 57 | 4% |
| Total Number of Permissions | 1350 | 100% |

These findings indicate that app developers typically use custom permissions to allow other apps to access their protected components only if they are signed by the same developer or company.

#### Security Implications
The widespread use of custom permissions poses significant security risks. Vulnerabilities in their implementation can be exploited to launch attacks on the platform and key applications. For example, attackers can gain unauthorized access to system resources (e.g., camera, microphone) without user consent and access protected components and data of other apps. This is particularly concerning for apps running on Android 6.0 or newer, which currently includes more than 50% of all Android devices.

#### Case Studies

**CareZone**
- **Description**: CareZone is a medical Android app with over 1,000,000 downloads and a 4+ rating on the Google Play Store. It allows users to store medical-related information such as health background, medication lists, and insurance information.
- **Vulnerability**: The app uses a single content provider to store all medical data, protected by a signature permission. Our attack bypasses this signature requirement, allowing us to read the entire content provider and access sensitive data without the user's knowledge.

**Skype**
- **Description**: Skype is an Android app by Microsoft with over 500,000,000 downloads and a 4+ rating. It allows users to make voice and video calls over the Internet.
- **Vulnerability**: Skype has an activity protected by a signature permission that, once bypassed, allows an adversary to invoke calls to any specified person or number. This could be used for spying or other malicious activities.

#### Attack Vectors

**A. Custom Permission Upgrade Attack**
- **Threat Model**: An adversary can download and reverse-engineer victim apps, analyze their manifest files, and create malicious apps that exploit custom permission vulnerabilities.
- **Attack Overview**: The adversary creates an app with a custom permission declaration (protection level normal or signature) and updates it to dangerous. This bypasses the user consent screen, granting the app dangerous permissions without user interaction.
- **Internals**: The system incorrectly treats the custom permission upgrade as an app upgrade, automatically granting the dangerous permission. This violates the principle that no dangerous runtime permission should be granted without user interaction.

**B. Confused Deputy Attack**
- **Threat Model**: The adversary exploits the lack of naming conventions for custom permissions to launch an attack on a victim app.
- **Attack Overview**: The adversary develops two apps: a definer attack app that spoofs the custom permission of the victim app, and a user attack app that requests this permission. This allows the adversary to gain unauthorized access to the victim app's protected components.
- **Internals**: The system fails to revoke undefined permissions, allowing the adversary to gain access to components protected by a signature permission with the same name. This violates the principle that there should be no unauthorized component access.

#### Conclusion
Custom permissions are commonly used in Android apps but pose significant security risks. The identified vulnerabilities, such as the custom permission upgrade and confused deputy attacks, can be exploited to gain unauthorized access to system resources and protected components. These issues highlight the need for better security measures and more robust permission management in the Android ecosystem.