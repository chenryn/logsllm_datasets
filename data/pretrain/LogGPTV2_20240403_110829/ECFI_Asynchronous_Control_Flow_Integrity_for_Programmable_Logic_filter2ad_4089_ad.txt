use it for our target PLC, due to its hardware limitation. Our WAGO
PFC PLC contains 256MB of RAM and a 64bit ARM CPU, while
the minimum RAM requirements of SPEC in a 64bit CPU is two
gigabytes. Therefore, in our work, it is impossible to use SPEC for
benchmarking the WAGO PLC.
5.1 Performance Overhead
We follow two paths to evaluate performance overhead in ECFI.
Firstly, we use CPU cycles used by our application which is a com-
mon practice in real-time systems [11, 26]. Secondly, we use the
SciMark2 [40] scientific computing benchmarking suite designed
by NIST, as another benchmarking suite, since its functionality was
integrated as part of SPEC but did (unlike the full SPEC suite) meet
the requirements of our platform.
To evaluate our performance overhead with CPU cycles, we used
perf [13] which was the only available benchmarking tool in our
PLC firmware. Using perf, we calculated the CPU cycles of Open-
PLC in each PLC scan cycle using the control logic illustrated in
Algorithm 1. This control logic involves all analog and digital I/O
interfaces of the PLC and performs basic arithmetic operations. We
then instrumented the OpenPLC runtime and our simple control
logic code and used the perf tool for calculating the CPU cycles.
Table 1 shows the worst CPU cycle and average CPU cycles for pro-
tected (instrumented) and unprotected OpenPLC runtime running
our logic. The table indicates that ECFI using simple logic imposes
at worst 1.5% overhead.
input :Read In.25 (Temprature Sensor Readings)
output:Write Out .22 (ServoMotor PWM)
while True do
read input;
while input True & input bigger than 100 do
A, B, C =Random Int; //set points; D= A+B+C;
//Update Pulse Width Modulation I/O;
PWM.IO(22) = 1.5 + 0.5*SIN(t);
t := t + D;
end
if input smaller than 100 then
A = 0.1; B = 0.01; C = 0.001; //set points;
D = (A -B -C);
//Update Pulse Width Modulation I/O;
PWM.IO(22) = 0.7 + 0.2*SIN(t);
t = t + D;
go to first while;
go to first while;
else
end
end
Algorithm 1: Simple Control Logic
However, the basic control logic only represents the simple oper-
ation of the PLC. To demonstrate the worst scenario of performance
overhead in ECFI, instead of executing a control logic which at most
involves several IF conditions, we created a logic binary which fol-
lows a complex path of SHA-2 hash calculation. We break our new
logic (SHA-2 hash calculator) to smaller functions to increase the
number of instrumentation points (the locations where the CIP
module injects instrumentation code). Breaking the SHA-2 hash
generator into smaller functions caused a significant code overhead
as illustrated in Table 1.
ECFI: Asynchronous Control Flow Integrity for Programmable Logic Controllers
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Figure 5: Ring buffer update procedure.
We then compared the CPU cycles of our application with and
without instrumentation code as shown in Table 1. While it is un-
realistic to assume that the PLC logic calculates expensive hash
functions (especially when we have broken it into multiple smaller
functions), we followed this approach to evaluate the worst possi-
ble overhead in our ECFI implementation. As illustrated in Table 1,
ECFI had 8.3% worst case overhead in a SHA-2 hash function calcu-
lation. Table 2 illustrates generic worst CPU overhead of ECFI in 50
individual runs using SciMark2. The results show that ECFI overall
(Composite Score) induces around 1.5% performance overhead.
Finally, we used the baseline of worst CPU cycle (98,046) as a
basis for detecting ring buffer overwrites in the SHA-2 control logic
(note that we use a different baseline for each logic). As mentioned
earlier, any attempt by the attacker to overwrite the ring buffer
which must involve a Denial of Service attack will raise the number
of CPU cycles. This is discussed in Section 5.3.
5.2 Checker Performance Overhead
We evaluated the checker performance overhead for nearly 1000
iterations and computed its CPU cycles. We could identify that our
checker imposed around 2.52% CPU cycles overhead. The perfor-
mance of the checker does not include the initial target calculation
after receiving the main function address (to cope with ASLR) since
it will only happen one time at the beginning of the application
execution.
5.3 Vulnerable Application and Detection
Capabilities
To evaluate our detection capabilities, we intentionally put two
vulnerable functions inside the OpenPLC runtime. First, the Open-
PLC will contain a simple function which never gets called in the
OpenPLC call graph. The attacker will try to hijack the control flow
toward this function. We use the first function only to determine
capabilities of ECFI for simple stack overflow attacks. In the second
example, we have a vulnerable function which contains a trivial
stack buffer overflow vulnerability. We tried to hijack the control
flow and perform a ROP attack against the OpenPLC. The objective
in the second example was to execute a system-level command
using the system() function in libc. To write our ROP payload,
PLC RuntimeRWPriority: HighestRunningRB Shadow StackCFG CheckPriority: FlexibleWaitRead OffsetWrite OffsetWritten 24 Bytes to RB (each write 8 bytes)PLC RuntimeRWPriority: HighestRunningRB Shadow StackCFG CheckPriority: FlexibleWaitRead OffsetWrite OffsetRing Buffer (RB)Resource N/A0 0Ring BufferR W PLC RuntimeRWPriority: HighestRunningRB Shadow StackCFG CheckPriority: FlexibleRunRead OffsetWrite OffsetWritten 32 Bytes to RB+8+16+24Resource N/Aoffset 0 0Ring BufferR W Resource N/Aoffset 0+8Ring Buffer Resource N/Aoffset 0+16Ring Buffer Resource N/Aoffset 0+24Ring Buffer Resource N/A 00Ring BufferR W Resource N/A 0+8Ring Buffer Resource N/A 0+16Ring Buffer Resource N/A 0+24Ring Buffer Resource Free +24+32Ring Buffer ABCWrite Direction Available to RuntimeRing buffer memory contentRing buffer memory contentRing buffer memory contentUpdate by Checker (R)Update by Instrumentation Code (W)Update by Checker (R)Update by Instrumentation Code (W)Update by Checker (R)Update by Instrumentation Code (W)No Resource AvailableNo Resource AvailableResource AvailableACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Ali Abbasi, Thorsten Holz, Emmanuele Zambon, and Sandro Etalle
Table 1: ECFI Performance Overhead including worst and average CPU cycles overhead for protected and unprotected Open-
PLC Runtime.
Target Logic worst unprotected worst protected
Simple Logic
SHA-2 Logic
67836
90521
68906
98046
average unprotected
53912
81383
average protected
54184
86913
average protected % worst protected %
0.55%
6.8%
1.57%
8.3%
code overhead %
8.6%
20.8%
Table 2: ECFI worst performance overhead in 50 individual runs using NIST SciMark2 benchmark.
SciMark2
No Protection
Protected
Overhead %
FFT
8.69
8.98
3.34%
SOR
33.19
33.32
0.4%
6.24
6.41
2.7%
Sparse matmult Monte Carlo
11.18
11.51
2.9%
LU
19.71
19.99
1.4%
Composite Score
15.81
16.05
1.52%
we need to use ROP gadgets. In our example, we use two instruc-
tions in the seed48() function as ARM gadgets to prepare function
argument for the system() function. In both examples, ECFI could
detect the control-flow violation, and identify the function which
diverted the control flow (via HotsiteID).
5.4 Attacking The Ring Buffer
As described earlier, there is a possibility that the attacker tries to
overwrite the ring buffer after performing a ROP attack by some-
how flooding the system with the performance-intensive tasks. We
evaluate our PMU measurements to see how ECFI reacts to an at-
tacker who tries to overwrite our ring buffer with his desired value
in the PLC program scan cycle. We wrote a payload to overwrite
32 bytes of the ring buffer (the last four entries in the buffer) after
control-flow hijacking with valid control-flow data while the PLC
was under heavy requests and its CPU was fully used.
It is important to mention that our ROP payload only contained
two single instructions. One to copy the write values and destina-
tion address (ring buffer address) to the registers and another one
to use a STR gadget to overwrite the last four entries of the buffer
(each entry contains destination address and HotSiteID).
However, we could not fool the checker application. The checker
raised an alert for both control flow hijacking and ring buffer over-
writes attack. The reason for the detection of control-flow hijacking
is that even though the PLC runtime was under heavy load, the
RTOS was randomly allocating some resource to the checker. This
situation caused our ring buffer overwrite to be unsuccessful since
we could not fully overwrite the buffer before checker verifies the
integrity of control-flow data. Besides that, the checker also raised
another alert for the extra CPU cycles consumed by attack payload
(the DoS attack and two gadgets) which was overwriting the ring
buffer. The average CPU cycles consumed by PLC (caused by the
combination of DoS attack and overwriting the ring buffer with
two gadgets) was 28,565 CPU cycles (worst scenario 32,026 and
minimum 24,927 in 1,000 iterations). We set the baseline for the
CPU cycle counts in our checker to the worst observed protected
runtime CPU cycles of our logic which were 68,906 (as illustrated
in Table 1). The extra 29,000 CPU cycle was clearly suggesting that
there was an overwrite to the ring buffer shadow stack. As a result,
ECFI raised an alert for ring buffer overwrite. Using PMU to detect
ring buffer overwrite makes ECFI unaffected to attacks based on
flushing buffers against CFI approaches [43].
Having adaptive scheduler in RTOSes makes the attack against
ring buffer even more complicated since the checker application
will always have guaranteed percentage of CPU cycles within the
RTOS. Assuming that a PLC runtime which runs the RTOS with
adaptive scheduler, the uncertainty for the attacker to overwrite
the shadow stack before checker reads the data will be even higher.
It is safe to assume that once the RTOS has an adaptive scheduler,
ECFI does not need extra protection for ring buffer overwrites.
6 LIMITATIONS
False Positive. There is a possibility for ECFI to generate a false
positive on an attack targeting a shadow stack overwrite. We can
imagine this can occur when we have a unpredicted I/O input,
something that was not expected in the PLC logic variable set
points. If during sampling of CPU cycles in a PLC scan cycle, we do
not spot this specific I/O input, there is the possibility that the PLC
logic follows a different path which was never modeled during our
learning mode. As a result of this unexpected I/O input, the CPU
cycles count will significantly change, and ECFI will raise an alert
for ring buffer overwrite attack, which is not true. However, this
will not be a significant problem in the industrial control domain.
Significant fluctuation in the I/O input readings is always being
monitored by the SCADA servers as well. Therefore, the plant
operator can correlate between abnormal I/O inputs and alert for
an attack against the ring buffer raised by ECFI.
Delay on Control-flow Violation Detection. ECFI does not have
any major delay in detecting control-flow violations. However, if
there are no resources available at the moment, ECFI raise the
alert with delay. This delay based on our evaluation is only in
millisecond/nanosecond scale. Considering our attacker model,
the delay between infection of the PLC and exploitation of the
physical process in an industrial network will be far greater than
nano/milliseconds scale. The alert generated by ECFI will give the
operator an opportunity to start manual safety overrides of the
physical process before attacker initiates the exploitation stage.
ECFI Fine-grained Approach Limitations. The OpenPLC runtime
used in our evaluation did not have any code-pointer call, and thus
we did not face code pointer call issues, which is a common problem
in fine-grained CFI systems for general-purpose applications. We
believe that unresolvable code-pointer calls are not common in real-
time systems. This is the case because the PLC runtime must be
ECFI: Asynchronous Control Flow Integrity for Programmable Logic Controllers
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
predictable in its execution path. Therefore, the code pointer calls
in the PLCs and other real-time applications will be deterministic
and thus resolvable by the compiler. In case the PLC runtime does
have a non-deterministic code-pointer call, one has to either use
the coarse-grained approach for ECFI forward edge or use the
common techniques for fine-grained CFG generation as mention
in the literature [20, 33, 49].
7 RELATED WORK
Some previous research introduced tailored CFI for high-end em-
bedded devices such as mobile phones namely MoCFI [12] and
CFR [38]. MoCFI [12] is a CFI for embedded systems which enforce
CFI on the ARM architecture. MoCFI analyzes the binary of an iOS
app to extract its CFG. At load time, MoCFI inserts trampolines into
a runtime component before each jump. This runtime component