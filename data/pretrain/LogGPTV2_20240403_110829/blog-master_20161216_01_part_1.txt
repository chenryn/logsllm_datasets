## 分析加速引擎黑科技 - LLVM、列存、多核并行、算子复用 大联姻 - 一起来开启PostgreSQL的百宝箱         
##### [TAG 16](../class/16.md)
### 作者                                                       
digoal                                                        
### 日期                                                      
2016-12-16                                                         
### 标签                                                      
PostgreSQL , LLVM , OLAP , 列存储 , IMCS , cstore , column storage , Code Gen , 数据分析                                                                                                               
----                                                      
## 背景          
随着移动互联网的发展，数据爆炸性增长，企业对数据产生价值的渴望越来越多。         
比如很多APP中会埋点（已经不是什么秘密），以此收集用户的行为数据，用户的位置变化，上了什么网站，浏览了哪些网页，和什么人聊天。         
又比如汽车类的应用，汽车的轨迹，油耗，停留的时间，最喜欢去的商圈等。         
金融方面，用户的付费行为，和哪个商铺发生的交易，交易的明细，和哪些人有资金的往来等。         
数据无处不产生，无处不在，但是这么多的数据，怎么存储，怎么快速计算，怎么构建关系模型，分析模型？         
这么多的问题，没有机器猫怎么行？         
机器猫的百宝箱里可是什么都有的，PostgreSQL就是你们家的机器猫，要啥呢？快来问一问吧。          
机器猫啊，能告诉我怎么解决数据爆炸后存储成本、计算效率的问题么？         
**列存、LLVM、多核并行、OP SFUNC代码复用，四管齐下** ，解决存储效率，检索效率、计算效率的三大问题。          
关于并行基于算OP算子的sfunc复用本文不展开细讲，可以参考我另外的文章         
[《PostgreSQL 9.6 引领开源数据库攻克多核并行计算难题》](../201610/20161001_01.md)        
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201610/20161002_01.md)        
[《PostgreSQL 9.6 并行计算 在 xfs, ext4 下的表现对比》](../201610/20161002_02.md)        
[《PostgreSQL 9.6 内核优化之 聚合代码优化OP复用浅析》](../201610/20161008_01.md)       
[《PostgreSQL 并行计算tpc-h测试和优化分析》](../201611/20161108_01.md)        
## 存储成本压缩 - 列存储      
随着数据量的暴增，存储成本是一个问题，另一个问题是查询效率。         
传统的方法使用行存储，行存储的好处是行操作效率高，例如同时查询多列时效率高，因为访问的数据块更少。          
但是行存储的压缩比并不高，即使使用块级压缩，原因是单行涉及的数据类型繁杂，数据值的离散型更强。          
所以列存出现了，在分析领域几乎成了标配，列存的压缩比可以做到更高，而且对单列或少量的列进行分析时，访问的块更少，速度更快。          
PostgreSQL社区很多年前就已经有列存储的插件，比如cstore, imcs（借鉴自monetdb思想）等。           
https://github.com/citusdata/cstore_fdw        
http://www.garret.ru/imcs/user_guide.html      
https://www.pgcon.org/2016/schedule/events/919.en.html        
本文介绍CSTORE这个存储引擎，有兴趣的童鞋可以另外再研究一下in memory column store引擎。       
## 计算效率提升 - LLVM + 列存储      
llvm其实在分析场景用得比较多，但是在传统数据库中引入LLVM的不是很常见，特别是开源领域，目前能看到的传统数据库PostgreSQL是领导者的地位。          
LLVM的改造工作量非常庞大，需要支持所有算子的话，所有的算子相关的代码都进行改造，而如果只是支持几个简单的算子，还远远不能满足数据分析的场景。         
一般数据库支持的数据类型就有几十上百，每种数据类型都有几十上百的算子，所以说改造的工作量是非常庞大的。         
PostgreSQL的LLVM开源版本        
https://github.com/ispras/postgres         
![pic](20161216_01_pic_001.png)         
目前在重计算的SQL场景中，需要对大批量的数据进行运算，比如过滤数据，从代码层面来讲涉及到函数外的调用(get row后，需要对其进行filter涉及表达式的function调用)，interpretation耗费较大，通过profileing可以发现瓶颈出现在filter节点。         
[《PostgreSQL 源码性能诊断(perf profiling)指南》](../201611/20161129_01.md)          
![pic](20161216_01_pic_002.png)         
针对性优化手段是尽量的减少函数切换，使用LLVM的接口可以帮你将这个部分的代码重新生成，在一个函数内完成所有的运算。         
![pic](20161216_01_pic_003.png)         
![pic](20161216_01_pic_004.png)         
文档详见        
http://llvm.org/devmtg/2016-09/slides/Melnik-PostgreSQLLLVM.pdf         
对大量数据分析，filter或select clause的表达式越多的情况，效果越明显。         
### 如何部署PostgreSQL llvm版本      
### 1\. 安装gcc, python, clang, llvm         
#### 1 安装新版本gcc, 建议安装6.x  
预备    
```
yum install -y texinfo
wget https://ftp.gnu.org/gnu/autoconf/autoconf-2.65.tar.bz2
wget https://ftp.gnu.org/gnu/automake/automake-1.14.1.tar.gz
tar -jxvf autoconf-2.65.tar.bz2
tar -zxvf automake-1.14.1.tar.gz
cd autoconf-2.65
./configure; make; make install
cd ../automake-1.14.1
./configure; make; make install
```
下载新版本  
https://gcc.gnu.org/mirrors.html  
解压  
```  
# tar -xvzf gcc-6.2.0.tar.gz  
# cd gcc-6.2.0 
```  
下载依赖包  
```  
./contrib/download_prerequisites  
```  
下载依赖包到gcc src根目录    
在我github的package目录中可以直接下载  
```  
-- cd gcc-6.2.0
tar -zxvf cloog-0.18.4.tar.gz
tar -jxvf gmp-4.3.2.tar.bz2
tar -jxvf isl-0.15.tar.bz2
tar -jxvf mpfr-2.4.2.tar.bz2
tar -zxvf mpc-0.8.1.tar.gz
mv cloog-0.18.4 cloog
mv gmp-4.3.2 gmp
mv mpfr-2.4.2 mpfr
mv mpc-0.8.1 mpc
sed -e 's/isl_stat_ok = 0,/isl_stat_ok = 0/' isl-0.15/include/isl/ctx.h > isl-0.15/include/isl/ctx.h.tem && mv isl-0.15/include/isl/ctx.h.tem isl-0.15/include/isl/ctx.h
mv isl-0.15 isl
```
编译gcc  
```
跳出gcc src目录
cd ..
mkdir objdir
cd objdir
../gcc-6.2.0/configure --prefix=/home/digoal/gcc6.2.0 --disable-isl-version-check --disable-multilib
make -j 32
make install
ln -s /home/digoal/digoal/bin/gcc /home/digoal/gcc6.2.0/bin/cc
```
修改环境变量  
```
export LD_LIBRARY_PATH=/home/digoal/gcc6.2.0/lib:$LD_LIBRARY_PATH  
export LD_RUN_PATH=$LD_LIBRARY_PATH  
export PATH=/home/digoal/gcc6.2.0/bin:$PATH 
```  
修改ld.so.conf  
```  
# vi /etc/ld.so.conf  
/home/digoal/gcc6.2.0/lib64  
# ldconfig  
```  
参考  
1\. https://gcc.gnu.org/install/prerequisites.html    
#### 安装clang  
1\. cmake  