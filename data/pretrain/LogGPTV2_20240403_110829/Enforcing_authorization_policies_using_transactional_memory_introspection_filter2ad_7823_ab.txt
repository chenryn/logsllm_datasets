read from a ﬁle: Zhang et al. [62, Figure 10] found a case where
an unchecked ﬁle object is used by page cache read upon a page
fault from a memory-mapped region.
Second, security-relevant metadata, such as the permissions to
check for authorizing access, are also typically identiﬁed manually
and hard-coded into server software. Such decentralized, ad hoc
checking is highly error prone, especially as code is changed over
time. Not surprisingly, Jaeger et al. [37, Pages 193-196] found
several inconsistencies in the ﬁle-access permissions checked on
diﬀerent code paths in the Linux kernel.
(2) Diﬃculty in preventing Time-Of-Check To Time-Of-Use race
conditions (TOCTTOU bugs). With the possibility of concurrent
execution, the current practice of authorization enforcement shown
in Figure 1(a) becomes even more problematic. In multi-threaded
server software, the resource accesses authorized on lines a8 and
a12 must still be valid at lines a9 and a13, respectively, for all pos-
sible execution interleavings. Otherwise, an attacker may be able
to maliciously exploit the resulting race condition, or TOCTTOU
bug [8]. For instance, in the chat server example, if the forum is
public when the authorization check is performed, then there must
be no way for the forum to become private before a user joins; oth-
erwise, an unauthorized user may be able to join a private forum.
It is particularly diﬃcult to prevent TOCTTOU bugs when en-
forcing authorization in eﬃcient, multi-threaded server software,
written using modern, modular techniques. Unless all code paths
are accounted for, attackers may be able to induce context switches
between authorization and access, and perturb shared state in ways
that violate the security policy. For instance, such TOCTTOU bugs
were found in the analysis of the LSM-protected Linux kernel [62].
(3) Diﬃculty in correctly handling authorization failures and
other errors. Server software must continue to function despite
errors and authorization failures due to one client. In Figure 1(a),
this is the task of the error handlers (lines a10 and a14), which must
return the server software back into a consistent state. Depending
on the service, this may involve executing a complex, uncommon
error path, and performing compensating actions, e.g., to undo
other, previously-authorized operations related to a single server
request [2, 9, 57]. If the security policy that is being enforced is
stateful, the state of the enforcement mechanism may also have to
be wound back. For example, if a chat server user requests to join a
forum, and processing this request involves several steps, then—if
the request is eventually not authorized—an error handler may need
to undo all of the chat server state changes due to the processing of
that request.
Several studies show that error-handling code can be a large
fraction of server software; one IBM survey reports error handling
to be up to two-thirds of code [12]. Authorization failures and se-
curity exceptions account for a large fraction of errors, and they
are no easier to handle than other errors [6, 24]. Much software
simpliﬁes this problem by treating all errors equally: by either ig-
noring them or by halting execution [57]. However, server software
must correctly deal with the corner cases resulting from errors and
authorization failures. In current enforcement practice, shown in
Figure 1(a), the result is likely error-prone and diﬃcult-to-maintain
software.
2.2 Beneﬁts of TMI-based authorization
The TMI architecture helps avoid the above diﬃculties by decou-
pling security enforcement from application functionality in soft-
ware that uses STM techniques. For this, TMI requires that ac-
cesses to security-relevant, shared resources be enclosed within a
transaction{. . .} code section, as shown in Figure 1(b).
TMI also requires an application-speciﬁc TMI authorization
manager that provides the security checks to be performed for each
access to a security-relevant resource. In addition to implement-
ing checks, this authorization manager also provides the mapping
between low-level access to shared, security-relevant resources
(e.g., individual reads and writes to ﬁelds of memory objects) and
policy-speciﬁc, security-relevant operations. In a chat server, for
example, the authorization manager might map certain writes to
the shared data structures for users and groups to the operation of
joining a chat forum, when security policy restricts that operation.
As the server executes, all accesses to shared resources within
a transaction are precisely monitored for the read/write sets of the
STM runtime system. (For this, all shared state is identiﬁed to the
STM system, e.g., using language-level annotations or types; as
an optimization, security-relevant resources may also be separately
identiﬁed to reduce TMI enforcement overhead.) A TMI reference
monitor builds on this bookkeeping to trigger authorization checks.
Speciﬁcally, in Figure 1(b), the security-relevant resource1
and resource2 are accessed within a transaction{. . .} code sec-
tion. Using TMI-based enforcement, those accesses will trigger
authorization-manager-speciﬁed security checks corresponding to
those in lines a8 and a12 of Figure 1(a). With TMI, if a transac-
tion is to commit, all such authorization checks as well as a ﬁnal
transaction validation must have succeeded.
TMI oﬀers improved protection against violation of complete
mediation by ensuring that the reference monitor is implicitly in-
voked whenever shared, security-relevant resources are accessed
within a transaction{. . .} code section. In particular, with TMI,
a developer need no longer identify and guard individual re-
source accesses as in Figure 1(a). Rather, as shown in Figure 1(b),
transaction{. . .} code sections may span multiple resource ac-
cesses and method calls; in server software, such a code section
may naturally encompass the code that dispatches and handles
client requests.
TMI also simpliﬁes failure handling: authorization failures sim-
ply cause a transaction abort, thereby reverting back into the consis-
tent state at the start of a transaction. Thus, a server can be assured
that upon an authorization failure, a request will have no eﬀect. As
shown in Figure 1(b), transaction aborts may be silent, and software
may be written to indicate access failure by default. Alternatively,
a transaction abort may throw an exception, as we do in our imple-
mentation of Section 4. With TMI, the reference monitor state itself
can also have transactional memory semantics, which can further
simplify correct failure handling for stateful authorization policies.
For multi-threaded software TMI can reduce the possibil-
ity of TOCTTOU bugs by building on the STM serialization of
transaction{. . .} code sections. Furthermore, TMI can also allow
lazy or concurrent evaluation of security checks, such as the expen-
sive, high-latency group-membership tests often used to check au-
thorization. This enhancement can signiﬁcantly reduce overheads,
as shown in Section 5; it is discussed further in Section 3.3.
Because TMI reference monitors are integrated directly with an
STM runtime system, they can perform introspection to determine
security-relevant information, such as old or new data values, ac-
cess types, or other authorization metadata. Such introspection also
allows TMI-based enforcement of history-based or data-dependent
authorization policies, as well as the enforcement of security poli-
cies based on well-formed transactions [14].
2.3 Software transactional memory
As deﬁned by the database community [31], a transaction is a se-
quence of actions that must satisfy the ACID properties: Atomicity
requires that all actions complete successfully, in their totality, (a
transaction commit), or that none of them have any visible eﬀects
(a transaction abort). Consistency requires transactions to maintain
application-speciﬁc data invariants that hold before transactions.
Isolation requires transaction to give the same result, irrespective
of other simultaneous transactions. Finally, Durability requires that
the data changes of a committed transaction must be persistent and
visible to all subsequent transactions.
STM techniques aim to ease the writing of correct, multi-
threaded programs by providing an abstraction for transactional
access to shared-memory data. Many STM systems extend a pro-
gramming language with new code sections, identiﬁed by a special
keyword (often atomic). These code sections execute with trans-
actional semantics as deﬁned above, except that memory is still
transient (the D from ACID is missing). In this paper, we denote
atomic code sections using transaction{. . .}, to avoid confusion
with any given STM proposal.
To see the beneﬁts of STM transactions as a programming ab-
straction, consider the example shown in Figure 3 (adapted from
[42]). In this example, data is popped oﬀ a ﬁrst stack, S1, and
pushed onto a second stack, S2. If executed concurrently, this
code must simultaneously synchronize access to both stacks—
otherwise, execution interleaving may expose abnormal states,
e.g., states where data is on neither stack. Conventionally, this
synchronization would be achieved as shown in Figure 3(a): by
acquiring dedicated locks for S1 and S2, before performing the
pop() and push() operations.
acquire (S1.lock);
acquire (S2.lock);
value = S1.pop();
S2.push(value);
release (S2.lock);
release (S1.lock);
(a) Lock-based programming
}
transaction {
value = S1.pop();
S2.push(value);
(b) STM-based programming
Figure 3. A comparison of code for atomically moving a data
item between two stacks.
Unfortunately, programming using locks is error-prone. The
programmer must ensure that all the required locks are acquired;
otherwise, a race condition may be possible. The programmer must
also ensure that locks are always acquired in a correct order; other-
wise, a deadlock may be possible.
In contrast to locks, with STM the programmer need not specify
how concurrency control is achieved: automatically, each declared
transaction{. . .} code section will execute atomically. Thus, the
code in Figure 3(b) can provide the same functionality, yet be
simpler and less error-prone than the code in Figure 3(a).
STM systems must be able to detect and resolve runtime con-
ﬂicts between diﬀerent transactions. There is great variability in
the implementation of STM runtime support. For instance, imple-
mentations may use compiler support [3], support from software
libraries [34], or hybrid schemes that combine hardware and soft-
ware [18, 22, 49]. Similarly, STM systems also diﬀer in the granu-
larity at which they detect conﬂicts: word-based STM tracks indi-
vidual memory words (these include most hardware STM systems),
while object-based STM tracks language-level objects (these in-
clude most language-based STM systems). A comprehensive dis-
cussion is beyond the scope of this paper; the book by Larus and
Rajwar gives a good overview of much recent research [42].
Any STM runtime system must track the data dependencies of
transactions, i.e., what data is read, as well as what data is writ-
ten. The STM runtime system must validate that the sets of those
reads and writes (the read/write sets) are not in conﬂict with other
transactions; a conﬂict occurs when, concurrently, the same mem-
ory object is used by multiple transactions, and at least one trans-
action changes the value of that memory object. An STM runtime
system that considers only conﬂicts between accesses within trans-
actions can provide weak atomicity; STM systems that also detect
conﬂicts from non-transactional activity, and provide strong atom-
icity, may incur greater costs and are less common [1, 33, 53]. Val-
idation can happen eagerly or lazily, as long as each access is val-
idated before a transaction commits. If validation detects conﬂicts,
the STM runtime system consults a contention manager to decide
which transaction to commit. To allow other, conﬂicting transac-
tions to be aborted, the STM runtime system must also provide
rollback mechanisms that undo the execution eﬀects of those trans-
actions. Finally, STM systems may support nested transactions, or
other transaction composition.
For software that uses declarative concurrency control, existing
STM mechanisms already perform the majority of the work needed
for TMI-based enforcement. Thus, the adoption of TMI-based se-
curity enforcement is likely to add little in terms of complexity,
mechanism, or performance overhead.
3. TRANSACTIONAL MEMORY
INTROSPECTION
In this section, we describe the TMI architecture and its use in
enforcing authorization policies. We also show a concrete example
of TMI-based enforcement and discuss enhancements.
Figure 4. An overview of a TMI reference monitor and the lazy, commit-time enforcement of a stateless authorization policy. The
solid boxes are standard components of STM systems, while the dotted boxes show components added by the TMI architecture.
3.1 The TMI architecture
The TMI architecture aims to raise the level of abstraction in the
implementation of security enforcement mechanisms. It does so
by decoupling application functionality from security enforcement
code, much as STM techniques decouple applications from con-
cerns about lock acquisition order. TMI-based enforcement can
thereby eliminate concerns about check placement, race conditions,
and exceptional execution paths.
A TMI reference monitor observes the execution of transac-
tions in an STM system. Each transaction is associated with a spe-
ciﬁc principal; this principal may be given as an explicit argument
to transaction{. . .} code sections, as shown in Figure 1. The
TMI reference monitor is invoked, implicitly, whenever a security-
relevant, shared resource is accessed, so that compliance with the
security policy can be checked. The TMI reference monitor is also
invoked at the end of a transaction to ensure that only policy-
compliant transactions are allowed to commit.
With TMI, the application software deﬁnes the security policy,
the set of resources that are security-relevant, as well as the code
that checks security-policy compliance. In particular, when TMI
is used for authorization in a server, the server code must identify
the resources for which access must be authorized. Depending on
the underlying STM system, this may require code changes, such
as annotations. The server must also deﬁne an authorization man-
ager that contains code for security checks; upon each access to
a security-relevant resource, the TMI reference monitor consults
the authorization manager. The authorization manager may evalu-
ate application-speciﬁc expressions and maintain its own security
state. Furthermore, TMI supports introspection on security-relevant
information, such as the old or new values for a memory access.
Thus, a TMI reference monitor can observe a rich trace of exe-
cution activity, and evaluate predicates on that trace; this allows
the enforcement of most practical security policies—in particular,
history-based policies and other EM-enforceable policies [50].
Figure 4 shows how a TMI reference monitor extends the
mechanisms of an STM runtime system. As transactions ex-
ecute, the STM runtime system tracks accesses to shared re-
sources in its read/write sets. All accesses within the scope of a
transaction{. . .} code section are tracked, including those that
happen indirectly (e.g., through deeply-nested method calls). To
ensure complete mediation, the TMI reference monitor is invoked
whenever a security-relevant resource is added or updated in the
read/write sets. For some STM systems, a language-level type, or
annotation (e.g., @sensitive in our DSTM2 implementation) is
suﬃcient to guarantee these TMI reference monitor invocations.
Alternatively, security-relevant resources may be placed in the
read/write sets of concurrently-executing, dummy transactions, so
that they trigger a conﬂict. (A similar technique is used to trigger
eﬃcient retry in some STM systems [32].)
As seen in Figure 4, TMI extends the validation step for STM
transactions to also enforce correct authorization, or general com-
pliance with security policies. With TMI, a transaction is aborted
(and not retried) if it performs unauthorized resource access or oth-
erwise violates the security policy. Alternatively, certain authoriza-
tion failures such as those due to a timeout, might trigger a retry (al-
though we have not pursued that option). Upon an abort, the STM
runtime system will roll back all eﬀects of a transaction, including
any changes to the state of the TMI reference monitor. Thus, the
application is restored into the same consistent state as before the
transaction, apart from an error code that is returned to the applica-
tion to indicate the security violation.
The results of security checks must be established before trans-
actions attempt to commit. TMI-based enforcement should abort a
transaction if, and only if, a security check fails and validation of
the complete execution ﬁnds no conﬂicts. However, security checks
need not be fully evaluated when the TMI reference monitor is in-
voked; the bulk of the work can often be performed lazily, or even
overlapped with the execution of the transaction. We have used both
lazy and overlapped enforcement of authorization policies for our
experiments in Section 5, and found that they can signiﬁcantly re-
duce overheads.
The TMI reference monitor is invoked implicitly upon access
to security-relevant resources, as described above. However, there
are cases when code within an STM transaction must explicitly
query the security policy. For example, a tar utility that archives
all the ﬁles in a directory might need to create a consistent archive,
even when one ﬁle is not accessible. Therefore, for such excep-
tional cases, the TMI architecture supports immediate evaluation
of security policy, without the risk of a transaction abort. Such sup-
port can be implemented in many ways, e.g., by exposing a direct,
Boolean authorization query interface to application software.
The underlying STM system, and its language integration, has
an inﬂuence on aspects of TMI-based enforcement that range from