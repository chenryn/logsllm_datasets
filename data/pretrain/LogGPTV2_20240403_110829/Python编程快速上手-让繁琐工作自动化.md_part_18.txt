| |
Turn for O. Move on which space?
low-L
| |
-+-+-
|X|
-+-+-
O| |
--snip--
O|O|X
-+-+-
X|X|O
-+-+-
O| |X
Turn for X. Move on which space?
low-M
O|O|X
-+-+-
X|X|O
-+-+-
O|X|X
这不是一个完整的井字棋游戏（例如，它并不检查玩家是否获胜），但这已足
够展示如何在程序中使用数据结构。
注意 如果你很好奇，完整的井字棋程序的源代码在网上有介绍，网址是
http://nostarch.com/automatestuff/。
5.3.2 嵌套的字典和列表
对井字棋盘建模相当简单：棋盘只需要一个字典，包含9个键值对。当你对复
第5章 字典和结构化数据 91
杂的事物建模时，可能发现字典和列表中需要包含其他字典和列表。列表适用于包
含一组有序的值，字典适合于包含关联的键与值。例如，下面的程序使用字典包含
其他字典，用于记录谁为野餐带来了什么食物。totalBrought()函数可以读取这个数
据结构，计算所有客人带来的食物的总数。
allGuests = {'Alice': {'apples': 5, 'pretzels': 12},
'Bob': {'ham sandwiches': 3, 'apples': 2},
'Carol': {'cups': 3, 'apple pies': 1}}
def totalBrought(guests, item):
numBrought = 0
 for k, v in guests.items():
 numBrought = numBrought + v.get(item, 0)
return numBrought
print('Number of things being brought:')
print(' - Apples ' + str(totalBrought(allGuests, 'apples')))
print(' - Cups ' + str(totalBrought(allGuests, 'cups')))
print(' - Cakes ' + str(totalBrought(allGuests, 'cakes')))
print(' - Ham Sandwiches ' + str(totalBrought(allGuests, 'ham sandwiches')))
p rint(' - Apple Pies ' + str(totalBrought(allGuests, 'apple pies')))
在totalBrought()函数中，for循环迭代guests中的每个键值对。在这个循环里，
客人的名字字符串赋给 k，他们带来的野餐食物的字典赋给 v。如果食物参数是字
典中存在的键，它的值（数量）就添加到numBrought。如果它不是键，get()方法
就返回0，添加到numBrought。
该程序的输出像这样：
Number of things being brought:
- Apples 7
- Cups 3
- Cakes 0
- Ham Sandwiches 3
- Apple Pies 1
这似乎对一个非常简单的东西建模，你可能认为不需要费事去写一个程序来做
到这一点。但是要认识到，这个函数totalBrought()可以轻易地处理一个字典，其中
包含数千名客人，每个人都带来了“数千种”不同的野餐食物。这样用这种数据结
构来保存信息，并使用totalBrought()函数，就会节约大量的时间！
你可以用自己喜欢的任何方法，用数据结构对事物建模，只要程序中其他代码能够
正确处理这个数据模型。在刚开始编程时，不需要太担心数据建模的“正确”方式。随
着经验增加，你可能会得到更有效的模型，但重要的是，该数据模型符合程序的需要。
5.4 小结
在本章中，你学习了字典的所有相关知识。列表和字典是这样的值，它们可以
包含多个值，包括其他列表和字典。字典是有用的，因为你可以把一些项（键）映
92 Python编程快速上手——让繁琐工作自动化
射到另一些项（值），它不像列表，只包含一系列有序的值。字典中的值是通过方
括号访问的，像列表一样。字典不是只能使用整数下标，而是可以用各种数据类型
作为键：整型、浮点型、字符串或元组。通过将程序中的值组织成数据结构，你可
以创建真实世界事物的模型。井字棋盘就是这样一个例子。
这就介绍了Python编程的所有基本概念！在本书后面的部分，你将继续学习一
些新概念，但现在你已学习了足够多的内容，可以开始编写一些有用的程序，让一
些任务自动化。你可能不觉得自己有足够的Python知识，来实现页面下载、更新电
子表格，或发送文本消息。但这就是Python模块要干的事！这些模块由其他程序员
编写，提供了一些函数，让这些事情变得容易。所以让我们学习如何编写真正的程
序，实现有用的自动化任务。
5.5 习题
1．空字典的代码是怎样的？
2．一个字典包含键'fow'和值42，看起来是怎样的？
3．字典和列表的主要区别是什么？
4．如果spam是{'bar': 100}，你试图访问spam['foo']，会发生什么？
5．如果一个字典保存在spam中，表达式'cat' in spam和'cat' in spam.keys()之间
的区别是什么？
6．如果一个字典保存在变量中，表达式'cat' in spam和'cat' in spam.values()之间
的区别是什么？
7．下面代码的简洁写法是什么？
if 'color' not in spam:
spam['color'] = 'black'
8．什么模块和函数可以用于“漂亮打印”字典值？
5.6 实践项目
作为实践，编程完成下列任务。
5.6.1 好玩游戏的物品清单
你在创建一个好玩的视频游戏。用于对玩家物品清单建模的数据结构是一个字
典。其中键是字符串，描述清单中的物品，值是一个整型值，说明玩家有多少该物
品。例如，字典值{'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}意味着玩
家有1条绳索、6个火把、42枚金币等。
写一个名为displayInventory()的函数，它接受任何可能的物品清单，并显示如下：
第5章 字典和结构化数据 93
Inventory:
12 arrow
42 gold coin
1 rope
6 torch
1 dagger
Total number of items: 62
提示 你可以使用for循环，遍历字典中所有的键。
# inventory.py
stuff = {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}
def displayInventory(inventory):
print("Inventory:")
item_total = 0
for k, v in inventory.items():
print(str(v) + ' ' + k)
item_total += v
print("Total number of items: " + str(item_total))
displayInventory(stuff)
5.6.2 列表到字典的函数，针对好玩游戏物品清单
假设征服一条龙的战利品表示为这样的字符串列表：
dragonLoot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']
写一个名为 addToInventory(inventory, addedItems)的函数，其中 inventory参数
是一个字典，表示玩家的物品清单（像前面项目一样），addedItems参数是一个列表，
就像dragonLoot。
addToInventory()函数应该返回一个字典，表示更新过的物品清单。请注意，列
表可以包含多个同样的项。你的代码看起来可能像这样：
def addToInventory(inventory, addedItems):
# your code goes here
inv = {'gold coin': 42, 'rope': 1}
dragonLoot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']
inv = addToInventory(inv, dragonLoot)
displayInventory(inv)
前面的程序（加上前一个项目中的displayInventory()函数）将输出如下：
Inventory:
45 gold coin
1 rope
1 ruby
1 dagger
Total number of items: 48
94 Python编程快速上手——让繁琐工作自动化
6
第 章
字符串操作
2
文本是程序需要处理的最常见的数据形式。你已经知道如
何用+操作符连接两个字符串，但能做的事情还要多得多。可
以从字符串中提取部分字符串，添加或删除空白字符，将字母
转换成小写或大写，检查字符串的格式是否正确。你甚至可以
编写Python代码访问剪贴板，复制或粘贴文本。
在本章中，你将学习所有这些内容和更多内容。然后你会
看到两个不同的编程项目：一个是简单的口令管理器，另一个
将枯燥的文本格式化工作自动化。
6.1 处理字符串
让我们来看看，Python提供的写入、打印和访问字符串的一些方法。
6.1.1 字符串字面量
在Python中输入字符串值相当简单的：它们以单引号开始和结束。但是如何才
能在字符串内使用单引号呢？输入'That is Alice's cat.'是不行的，因为Python认为这
个字符串在Alice之后就结束了，剩下的（s cat.'）是无效的Python代码。好在，有
几种方法来输入字符串。
6.1.2 双引号
字符串可以用双引号开始和结束，就像用单引号一样。使用双引号的一个好处，
就是字符串中可以使用单引号字符。在交互式环境中输入以下代码：
>>> spam = "That is Alice's cat."
因为字符串以双引号开始，所以Python知道单引号是字符串的一部分，而不是
表示字符串的结束。但是，如果在字符串中既需要使用单引号又需要使用双引号，
那就要使用转义字符。
6.1.3 转义字符
“转义字符”让你输入一些字符，它们用其他方式是不可能放在字符串里的。转义
字符包含一个倒斜杠（\），紧跟着是想要添加到字符串中的字符。（尽管它包含两个字符，
但大家公认它是一个转义字符。）例如，单引号的转义字符是\’。你可以在单引号开始和
结束的字符串中使用它。为了看看转义字符的效果，在交互式环境中输入以下代码：
>>> spam = 'Say hi to Bob\'s mother.'
Python知道，因为Bob\'s中的单引号有一个倒斜杠，所以它不是表示字符串结
束的单引号。转义字符\'和\"让你能在字符串中加入单引号和双引号。
表6-1列出了可用的转义字符。
表6-1 转义字符
转义字符 打印为
\' 单引号
\" 双引号
\t 制表符
\n 换行符
\\ 倒斜杠
在交互式环境中输入以下代码：
>>> print("Hello there!\nHow are you?\nI\'m doing fine.")
Hello there!
How are you?
I'm doing fine.
6.1.4 原始字符串
可以在字符串开始的引号之前加上r，使它成为原始字符串。“原始字符串”完
全忽略所有的转义字符，打印出字符串中所有的倒斜杠。例如，在交互式环境中输
入以下代码：
Python编程快速上手——让繁琐工作自动化
>>> print(r'That is Carol\'s cat.')
That is Carol\'s cat.
因为这是原始字符串，Python认为倒斜杠是字符串的一部分，而不是转义字符
的开始。如果输入的字符串包含许多倒斜杠，比如下一章中要介绍的正则表达式字
符串，那么原始字符串就很有用。
6.1.5 用三重引号的多行字符串
虽然可以用\n转义字符将换行放入一个字符串，但使用多行字符串通常更容易。
在Python中，多行字符串的起止是3个单引号或3个双引号。“三重引号”之间的
所有引号、制表符或换行，都被认为是字符串的一部分。Python的代码块缩进规则
不适用于多行字符串。
打开文件编辑器，输入以下代码：
print('''Dear Alice,
Eve's cat has been arrested for catnapping, cat burglary, and extortion.
Sincerely,
Bob''')
将该程序保存为catnapping.py并运行。输出看起来像这样：
Dear Alice,
Eve's cat has been arrested for catnapping, cat burglary, and extortion.
Sincerely,