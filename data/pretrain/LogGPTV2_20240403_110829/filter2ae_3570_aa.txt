翻译：玄猫安全团队-Javierlev
原文：`https://github.com/ethereum/go-ethereum/blob/master/docs/audits/2017-04-25_Geth-audit_Truesec.pdf`
近期，以太坊`go-ethereum`公开了两份审计报告，玄猫安全团队第一时间对其进行了翻译工作。此为第一篇《Go Ethereum Security
Review》即`2017-04-25_Geth-audit_Truesec`，此审计报告完成时间为2017年4月25日。
如果您正在使用的是较旧版本的 `go-ethereum`，强烈建议升级至最新版本，以免遭受不必要的损失。
## 1.1. 概述
`TrueSec`在2017年4月对[以太坊的GO语言](https://ethereum.github.io/go-ethereum/)实现进行了代码审计。审计结果表明代码质量是比较高的，且开发者具备一定的安全意识。在审计过程中没有发现严重的安全漏洞。最严重的一个漏洞是当客户端的RPC
HTTP开启时，web浏览器同源策略的绕过。其他发现的问题并没有直接的攻击向量可供利用，报告的其他部分为通用的评论和建议。
## 1.2. 目录
### 1.2.1. P2P和网络
  * 已知问题
  * 内存分配过大
### 1.2.2. 交易和区块处理
  * 零除风险
  * 代码复杂性
### 1.2.3. IPC和RPC接口
  * CORS:在HTTP RPC中默认允许所有域
### 1.2.4. Javascript引擎和API
  * 伪随机数生成器的弱随机种子
### 1.2.5. EVM实现
  * 滥用`intPool`导致廉价的内存消耗
  * 在挖矿区块中脆弱的负值保护
### 1.2.6. 杂项
  * 在挖矿代码中的条件竞争
  * 许多第三方依赖
## 1.3. 结果细节
### 1.3.1. P2P和网络
`TrueSec`对`p2p`和网络部分的代码进行了审计，主要关注：
  * 安全的通道实现 - 握手和共享`secrets`的实现
  * 安全的通道属性 - 保密性和完整性
  * 消息的序列化
  * 节点发现
  * 对于DOS的防范：超时和消息大小限制
`TrueSec`还通过[go-fuzz](https://github.com/dvyukov/go-fuzz/)对RLP解码进行fuzz，没有发现节点崩溃的现象。
#### 1.3.1.1. 已知问题
虽然`共享secrets`在`encryption handshake`中实现得比较好，但是由于在对称加密算法中的`two-time-pad`缺陷，使得通道缺乏保密性。这个是已知的问题。(详情参考`https://github.com/ethereum/devp2p/issues/32`和`https://github.com/ethereum/go-ethereum/issues/1315`)。由于现在通道只传输公开的区块链数据，这个问题暂时不必解决。
另外一个一直存在的问题是在安全的通道等级(在以太坊开发者讨论中提到过一个默认的基于时间的重放保护机制)中缺乏`重放保护`。`TrueSec`建议协议的下一个版本通过控制消息数量来实现`重放保护`。
#### 1.3.1.2. 内存分配过大
在`rlpx.go`, `TrueSec`发现两个用户可控的，过大的内存分配。`TrueSec`没有发现可以利用的DOS情景，但是建议恰当地对其进行验证。
当读取协议消息时，`16.8MB`大小的内存可以被分配:
    func (rw *rlpxFrameRW) ReadMsg() (msg Msg, err error) {
        ...
        fsize := readInt24(headbuf)
        // ignore protocol type for now
        // read the frame content
        var rsize = fsize // frame size rounded up to 16 byte boundary
        if padding := fsize % 16; padding > 0 {
        rsize += 16 - padding
        }
        // TRUESEC: user-controlled allocation of 16.8MB:
        framebuf := make([]byte, rsize)
        ...
    }
由于以太坊协议中，对消息大小的最大值定义为`10MB`,`TrueSec`推荐内存分配也定义为相同大小。
在`encryption handshake`过程中，可以给握手信息分配`65KB`大小内存。
    func readHandshakeMsg(msg plainDecoder, plainSize int,
                          prv *ecdsa.PrivateKey, r io.Reader) ([]byte, error) {
        ...
        // Could be EIP-8 format, try that.
        prefix := buf[:2]
        size := binary.BigEndian.Uint16(prefix)
        if size < uint16(plainSize) {
            return buf, fmt.Errorf("size underflow, need at least ...")
        }
        // TRUESEC: user-controlled allocation of 65KB:
        buf = append(buf, make([]byte, size-uint16(plainSize)+2)...)
        ...
    }
除非握手消息确实包含`65KB`大小的数据，`TrueSec`建议对握手消息的大小作限制。
### 1.3.2. 交易和区块处理
`TrueSec`对交易和区块下载，区块处理的部分进行了代码审计，主要关注:
  * 由内存分配，`gorountine泄露`和`IO操作`导致的拒绝服务
  * 同步问题
#### 1.3.2.1. 零除风险
在Go中，除以零会导致一个`panic`。在`downloader.go`的`qosReduceConfidence`方法中，是否出现零除取决于调用者正确调用:
    func (d *Downloader) qosReduceConfidence() {
        peers := uint64(d.peers.Len())
        ...
        // TRUESEC: no zero-check of peers here
        conf := atomic.LoadUint64(&d.rttConfidence) * (peers - 1) / peers
        ...
    }
`TrueSec`没有发现可以导致节点崩溃的利用方式，但是仅仅依赖调用者来保证`d.peers.Len()`不为零是不安全的。`TrueSec`建议所有非常数的被除数应该在进行除法之前进行检查。
#### 1.3.2.2. 代码复杂性
`TrueSec`发现交易和区块处理的代码部分相对其他部分代码来说更加复杂，更难阅读和审计。这部分的方法相对更大，在`fetcher.go`,`downloader.go`
和`blockchain.go`中有超过200行的代码。同步的实现有时候会结合互斥锁和通道消息。比如说，结构体`Downloader`定义需要60行代码，包含3个互斥锁和11个通道。
难以阅读和理解的代码是滋生安全问题的肥沃土壤。特别是`eth`包中存在一些代码量大的方法，结构体，接口与扩展的互斥锁和通道。`TrueSec`建议花一些功夫重构和简化代码，来防止未来安全问题的发生。
### 1.3.3. IPC和RPC接口
`TrueSec`对IPC和RPC(HTTP和Websocket)接口进行了审计，关注于潜在的访问控制问题，从公共API提权到私有API(admin,
debug等)的问题。
#### 1.3.3.1. CORS:在默认的HTTP RPC里允许所有域
`HTTP
RPC`接口可以通过`geth`的`--rpc`参数开启。这会启动一个web服务器，用于监听8545端口的HTTP请求，且任何人都可以对其进行访问。由于潜在暴露端口的可能性(比如连接到不可信的网络)，默认只有公共API允许HTTP
RPC接口。
同源策略和默认的跨域资源共享(CORS)配置限制了web浏览器的访问，并且限制通过XSS攻击RPC API的可能性。`allowed
origins`能够通过`--rpccorsdomain "domain"`来配置，也可以通过逗号分隔来配置多个域名`-- rpccorsdomain
"domain1,domain2"`，或者配置`为--rpccorsdomain
"*"`,使得所有的域都可以通过标准web浏览器访问。如果没有进行配置，CORS头将不会被设置——并且浏览器不会允许跨域请求。如图1
    Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at
     http://localhost:8545/. (Reason: CORS header 'Access-Control-Allow-Origin missing').
图1: 由于缺少CORS头，`Firefox`禁止跨域请求
但是，在[commit 5e29f4b](https://github.com/ethereum/go-ethereum/commit/5e29f4be935ff227bbf07a0c6e80e8809f5e0202)中(从2017年4月12日开始)——同源策略可以被绕过，RPC可以从web浏览器被访问。
HTTP RPC的CORS配置被改变为处理`allowed origins`的字符数组——而不是在内部作为一个单引号分隔的字符串传输。
在此之前，逗号分隔的字符串被分成一个数组，在实例化`cors`中间件之前(请见Listing 1)。with默认值(防用户没有显性配置任何设置时，如使用--rpccorsdomain)空字符串，这会导致一个字符数组包含一个空字符串。
在`commit 5e29f4b`之后，默认值是一个空的数组，这个数组传递给位于`newCorsHandler`的中间件`cors`(请见 Listing
2)。
`cors`中间件随后检查`allowed origins`数组的长度(请见 Listing
3)。如果长度为0，在这里即代表空数组，[cors中间件](https://github.com/rs/cors)将会变成默认值并且允许所有域。
这个问题可以通过运行`geth -rpc`来复现，不需要指定任何`allowed origins`,并检查`commit
5e29f4b`前后带有`OPTION`请求的CORS头。第二个输出的`Access-Control-Allow-Origin`值得注意。
注意即使是改变之前，这里也是这样。如果不是因为字符串分割导致在`cors`没有解释输入值(一个数组包含一个空字符串)为空。
这个问题可以通过下面的`JavaScript`代码来利用，从任意域来执行(甚至可以是本地文件系统，即无效或者null origin)
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "http://localhost:8545", true);
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.onreadystatechange = function() {
        if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
        console.log("Modules: " + xhr.responseText);
        }
    }
    xhr.send('{"jsonrpc":"2.0","method":"rpc_modules","params":[],"id":67}')
`TrueSec`建议将CORS的默认配置进行显性的限制，(如将`allowed
origin`设置为`localhost`,或根本不设置CORS头)，而不是依赖外界来选择一个正常(安全)的默认设置
    165 func newCorsHandler(srv *Server, corsString string) http.Handler {
    166     var allowedOrigins []string
    167     for _, domain := range strings.Split(corsString, ",") {
    168         allowedOrigins = append(allowedOrigins, strings.TrimSpace(domain))
    169     }
    170     c := cors.New(cors.Options{
    171         AllowedOrigins: allowedOrigins,
    172         AllowedMethods: []string{"POST", "GET"},