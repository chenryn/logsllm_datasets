with Metasploit
105
■ Enabling xp_cmdshell
106
Running OS commands with xp_cmdshell
108
6.2
Stealing Windows account password hashes
110
Copying registry hives with reg.exe
111
■ Downloading registry 
hive copies
113
6.3
Extracting password hashes with creddump
115
Understanding pwdump’s output
116
6.4
Summary
117
CONTENTS
vi
7 
Attacking unpatched services
118
7.1
Understanding software exploits
119
7.2
Understanding the typical exploit life cycle
120
7.3
Compromising MS17-010 with Metasploit
121
Verifying that the patch is missing
122
■ Using the 
ms17_010_psexec exploit module
124
7.4
The Meterpreter shell payload
125
Useful Meterpreter commands
127
7.5
Cautions about the public exploit database
130
Generating custom shellcode
130
7.6
Summary
132
PHASE 3 POST-EXPLOITATION AND PRIVILEGE ESCALATION......133
8 
Windows post-exploitation
135
8.1
Fundamental post-exploitation objectives
136
Maintaining reliable re-entry
137
■ Harvesting credentials
137
Moving laterally
137
8.2
Maintaining reliable re-entry with Meterpreter
138
Installing a Meterpreter autorun backdoor executable
139
8.3
Harvesting credentials with Mimikatz
141
Using the Meterpreter extension
141
8.4
Harvesting domain cached credentials
143
Using the Meterpreter post module
143
■ Cracking cached 
credentials with John the Ripper
144
■ Using a dictionary file 
with John the Ripper
146
8.5
Harvesting credentials from the filesystem
147
Locating files with findstr and where
148
8.6
Moving laterally with Pass-the-Hash
149
Using the Metasploit smb_login module
150
■ Passing-the-hash 
with CrackMapExec
152
8.7
Summary
154
CONTENTS
vii
9 
Linux or UNIX post-exploitation
155
9.1
Maintaining reliable re-entry with cron jobs
156
Creating an SSH key pair
157
■ Enabling pubkey 
authentication
159
■ Tunneling through 
SSH
160
■ Automating an SSH tunnel with cron
162
9.2
Harvesting credentials
163
Harvesting credentials from bash history
165
■ Harvesting 
password hashes
166
9.3
Escalating privileges with SUID binaries
166
Locating SUID binaries with the find command
167
■ Inserting a 
new user into /etc/passwd
169
9.4
Passing around SSH keys
171
Stealing keys from a compromised host
172
■ Scanning multiple 
targets with Metasploit
172
9.5
Summary
174
10 
Controlling the entire network
175
10.1
Identifying domain admin user accounts
178
Using net to query Active Directory groups
178
■ Locating logged-
in domain admin users
179
10.2
Obtaining domain admin privileges
180
Impersonating logged-in users with Incognito
182
■ Harvesting 
clear-text credentials with Mimikatz
183
10.3
ntds.dit and the keys to the kingdom
184
Bypassing restrictions with VSC
185
■ Extracting all the hashes 
with secretsdump.py
188
10.4
Summary
190
PHASE 4 DOCUMENTATION ...............................................191
11 
Post-engagement cleanup
193
11.1
Killing active shell connections
195
11.2
Deactivating local user accounts
195
Removing entries from /etc/passwd
196
CONTENTS
viii
11.3
Removing leftover files from the filesystem
196
Removing Windows registry hive copies
197
■ Removing SSH key 
pairs
198
■ Removing ntds.dit copies
199
11.4
Reversing configuration changes
199
Disabling MSSQL stored procedures
200
■ Disabling anonymous 
file shares
201
■ Removing crontab entries
201
11.5
Closing backdoors
202
Undeploying WAR files from Apache Tomcat
202
■ Closing the 
Sticky Keys backdoor
204
■ Uninstalling persistent Meterpreter 
callbacks
204
11.6
Summary
206
12 
Writing a solid pentest deliverable
207
12.1
Eight components of a solid pentest deliverable
208
12.2
Executive summary
209
12.3
Engagement methodology
210
12.4
Attack narrative
211
12.5
Technical observations
211
Finding recommendations
214
12.6
Appendices
214
Severity definitions
214
■ Hosts and services
215
■ Tools 
list
216
■ Additional references
216
12.7
Wrapping it up
216
12.8
What now?
218
12.9
Summary
218
appendix A
Building a virtual pentest platform
221
appendix B
Essential Linux commands
240
appendix C
Creating the Capsulecorp Pentest lab network
247
appendix D
Capsulecorp internal network penetration test report
254
appendix E
Exercise answers
268
index
273
ix
preface
My name is Royce Davis, and I’m a professional hacker, red teamer, penetration tester,
offensive security guy—we go by many names in this industry. For the past decade and
change, I have been offering professional adversarial emulation services to a wide
spectrum of clients in just about every business vertical you could imagine. Through-
out that time, there has been no question in my mind which service companies are
most interested in paying professional hackers to conduct. I’m talking, of course,
about the internal network penetration test (INPT).
 The INPT is a complex enterprise engagement that can easily be summarized in a
few sentences. An attacker (played by you) has managed to gain physical entry to a
corporate office using any one of numerous and highly plausible techniques that are
intentionally absent from the scope of this book. Now what? Armed with only a laptop
loaded with hacker tools, and with no up-front knowledge of the company’s network
infrastructure, the attacker penetrates as far as they can into the company’s corporate
environment. Individual goals and objectives vary from engagement to engagement,
company to company. Typically, though, a global domination scenario where you (the
attacker) gain complete control of the network is more or less the primary objective
driving an INPT.
 In my career, I’ve done hundreds of these engagements for hundreds of compa-
nies ranging from small businesses with a single “IT guy” to Fortune-10 conglomerates
with offices on every continent. 
 What has surprised me the most during my journey is how simple the process is to
take over a company’s network from the inside regardless of the specifics of the
PREFACE
x
company’s size or industry vertical. It doesn’t matter if the target is a bank in South
Dakota, a video game company in California, a chemical plant in Singapore, or a call
center in London. The networks are all configured more or less the same way. Sure, the
individual technologies, hardware, and applications are wildly different from
organization to organization, but the use cases are the same.
 Businesses have employees who use devices to access centralized servers hosting
documents and internal applications that the employees access using credentials to
process requests, transactions, tickets, and information that ultimately help the com-
pany operate and make money. As an attacker, no matter what my target is, my
method for identifying network hosts, enumerating their listening services (their
attack surface), and discovering security weaknesses within the authentication, config-
uration, and patch mechanisms of those systems doesn’t change from engagement to
engagement.
 After all these years and all these INPTs, I have decided to document my method-
ology for performing INPTs and provide a comprehensive set of actionable guidelines
that someone fairly new to penetration testing can follow in step-by-step fashion to
conduct a proper penetration test on their own. It is solely my opinion that such a
resource is not available or, at least, was not available at the time I wrote this book. 
 Lots of professional training and certification programs exist that offer students a
wide variety of valuable skills and techniques. I have hired and trained many such stu-
dents, but even after graduating from the toughest and most highly respected training
programs, many students don’t really know how to do a penetration test. That is, I
can’t say to them, “OK, you’ve got a gig with client XYZ starting next Monday; here’s
the statement of work (SOW),” without them staring at me like a deer in headlights.