information about the underlying secret value.
To see the correctness of the protocol ΠConvInt observe the
following:
(1) For input values upper bounded by 2𝐵, the parties, invoking
the protocol ΠRand2k, sample shares of a random value
upper bounded by 2𝐵+𝜎. The additional 𝜎 bits of the random
value ensure that, upon additive masking, the randomness
statistically hides the input. The parties here receive two
types of additive shares of the same random value: one CRT
share, and the corresponding share over the integers.
(2) In Step 2, the parties additively mask their input share, using
the CRTshareoftherandomvalue,opentheresult,andlocally
perform the CRT reconstruction of the masked value 𝑡.
(3) In Step 3, the parties “unmask" their local value 𝑡, by
subtracting the integer share of the randomness they possess
from the local value 𝑡. Correctness follows because both the
Functionality FMPC−CRT
Let [𝑥,ℓ] denote the identifiers for the ℓ components of the CRT
representation a value 𝑥 stored in the functionality. Let 𝐴 ⊂ {1, ...,𝑛}
denote the index set of the corrupted parties.
Init: Receive 𝑝1,...,𝑝ℓ primes from all parties, store them and compute
𝑖=1𝑝𝑖.
𝑀ℓ = Πℓ
Input: Receive a tuple (𝑥,ℓ′) ∈ Z𝑀ℓ′ with ℓ′ ≤ ℓ from some party and
store ([𝑥,ℓ′]).
Add([𝑥,ℓ′],[𝑦,ℓ′]): Retrieve (𝑥,ℓ′) and (𝑦,ℓ′) from memory, compute
𝑧 =𝑥+𝑦 mod 𝑀ℓ′, and store ([𝑧,ℓ′]).
Mult([𝑥,ℓ′],[𝑦,ℓ′]): Retrieve (𝑥,ℓ′) and (𝑦,ℓ′) from memory, compute
𝑧 =𝑥 ·𝑦 mod 𝑀ℓ′, and store ([𝑧,ℓ′]).
Open([𝑥,ℓ′]): Retrieve (𝑥,ℓ′) from memory and send the value 𝑥 to all
parties.
OpenTo([𝑥,ℓ′], 𝑗): Retrieve (𝑥, ℓ′) from memory and send the CRT
represented values (𝑥,ℓ′) to party 𝑃 𝑗 .
Figure 4: MPC over CRT Functionality.
CRT sharing of the randomness, and the integer sharing
thereof reconstruct to the same value, and no wrap around
can happen, due to the bound on the product of the CRT
components, which is sufficiently large to accommodate the
bounded input, the statistical security parameter, and the
addition that is necessary to perform the masking.
The execution of the protocol ΠConvInt does not leak any informa-
tion about the secret. Indeed, the only opened value in the protocol
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea600ΠMPC−CRT
...
Init(ℓ): To initialize ℓ MPC engines, parties call FMPC.Init(F𝑚𝑖) ∀ ℓ
primes [𝑚1,𝑚2,...,𝑚ℓ ].
Input(𝑥, ℓ′): To provide an input 𝑥 ∈ Z𝑀ℓ′ (where ℓ′ ≤ ℓ) any party
calls FMPC.Input(𝑥 mod 𝑚𝑖) for 𝑖 ∈ [1, ℓ′] to get (cid:74)𝑥 mod 𝑚𝑖,𝑖(cid:75) as
((𝑥 mod 𝑚𝑖) (1) ,
, (𝑥 mod 𝑚𝑖) (𝑛)), where each (𝑥 mod 𝑚𝑖) ( 𝑗)
(cid:74)𝑥,ℓ′(cid:75)= ((cid:74)𝑥 mod 𝑚1,1(cid:75),...,(cid:74)𝑥 mod 𝑚ℓ′,ℓ′(cid:75)).
represents the 𝑖’th CRT share that each player 𝑗 obtains. The output is
Add((cid:74)𝑧,ℓ′(cid:75),(cid:74)𝑥,ℓ′(cid:75),(cid:74)𝑦,ℓ′(cid:75)): To add two shared values (cid:74)𝑥,ℓ′(cid:75),(cid:74)𝑦,ℓ′(cid:75)
parties call FMPC.Add((cid:74)𝑧 mod 𝑚𝑖,𝑖(cid:75),(cid:74)𝑥 mod 𝑚𝑖,𝑖(cid:75),(cid:74)𝑦 mod 𝑚𝑖,𝑖(cid:75)) for
all 𝑖 ∈ [1,ℓ′] engines and set(cid:74)𝑧,ℓ′(cid:75)← ((cid:74)𝑧 mod 𝑚1,1(cid:75),...,(cid:74)𝑧 mod 𝑚ℓ′,ℓ′(cid:75)).
Mult((cid:74)𝑧,ℓ′(cid:75),(cid:74)𝑥,ℓ′(cid:75),(cid:74)𝑦,ℓ′(cid:75)): To multiply two shared values(cid:74)𝑥,ℓ′(cid:75),(cid:74)𝑦,ℓ′(cid:75)
parties call FMPC.Mult((cid:74)𝑧 mod 𝑚𝑖,𝑖(cid:75),(cid:74)𝑥 mod 𝑚𝑖,𝑖(cid:75),(cid:74)𝑦 mod 𝑚𝑖,𝑖(cid:75)) for
𝑖 ∈ [1,ℓ′] and set(cid:74)𝑧,ℓ′(cid:75)← ((cid:74)𝑧 mod 𝑚1,1(cid:75),...,(cid:74)𝑧 mod 𝑚ℓ′,ℓ′(cid:75).
Open((cid:74)𝑥,ℓ′(cid:75)): To open a shared value (cid:74)𝑥,ℓ′(cid:75) all parties call
FMPC.Open((cid:74)𝑥 mod 𝑚𝑖,𝑖(cid:75)) and receive (𝑥 mod 𝑚𝑖, 𝑖) for 𝑖 ∈ [1, ℓ′].
OpenTo((cid:74)𝑥,ℓ′(cid:75), 𝑗): To open a shared value (cid:74)𝑥,ℓ′(cid:75) party 𝑃 𝑗 calls
FMPC.OpenTo((cid:74)𝑥 mod 𝑚𝑖,𝑖(cid:75),𝑗) and receives (𝑥 mod 𝑚𝑖,𝑖) for 𝑖 ∈ [1,ℓ′].
They set (𝑥,ℓ′) ← (𝑥 mod 𝑚1,...,𝑥 mod 𝑚ℓ′).
Party 𝑗 sets (𝑥,ℓ′) ← (𝑥 mod 𝑚1,...,𝑥 mod 𝑚ℓ′).
Figure 5: Protocol for arithmetic MPC over CRT moduli.
Functionality FAdvMPC−CRT
$← Z2𝑘 and store ([𝑟,ℓ′]), for ℓ′ ≤ ℓ.
This functionality reproduces all the commands of FMPC−CRT and extends
it with:
Rand2k(ℓ′,𝑘): Sample 𝑟
ConvInt([𝑥,ℓ′]): Retrieve (𝑥,ℓ′) from memory, sample random shares
𝑥 (𝑖)
Int = 𝑥, and send them to the
corresponding parties. (Note: the sum is taken in Z).
LevelUp([𝑝,ℓ],ℓ′): Receive 𝑝ℓ+1,...,𝑝ℓ′ from all parties, store them and
Int ∈ Z for each party 𝑃𝑖 s.t.𝑛
compute 𝑀ℓ′ =ℓ′
𝑖=1𝑝𝑖. Store ([𝑝,ℓ′]).
𝑖=1 𝑥 (𝑖)
Figure 6: Advanced MPC over CRT Functionality.
Functionality FmaBits
(1) For 𝑖 =1,...,𝑚 the functionality calls FMPC.GenBit() so as to store
(2) The bits 𝑏𝑖 are retrieved from FMPC and are enterred into the
(3) The functionality samples a sharing of 𝑏𝑖 in Z𝑝 and send its share
a bit 𝑏𝑖.
FMPC-CRT functionality.
𝑏( 𝑗)
𝑖
to every party 𝑃 𝑗 .
It also publicly outputs 𝑘𝑖 = ⌊𝑏( 𝑗)
⌋.
𝑖
𝑝
(4) The functionality waits for a message Abort or Ok from the
adversary. If the message is Ok then it continues.
Figure 7: Random Bits Generation Functionality.
is(cid:74)𝑥,ℓJac(cid:75)+(cid:74)𝑟,ℓJac(cid:75) with 𝑟
$← [2𝐵+𝜎] and 𝑥  𝑀ℓ for these two values. In our ΠRSAGen
protocol, we use LevelUp command whenever a new operation on 𝑝
and 𝑞 could overflow the current CRT modulus. This happens twice:
first during the consistency check, and then in the GCD test. We note
that we execute this command only on [𝑝,ℓ] and [𝑞,ℓ], which we
know to be bounded by 2𝜆+𝜎. We use this property in the ΠLevelUp
The protocol ensures that the new(cid:74)𝑝,ℓ′(cid:75) is a sharing of the same
protocol (Fig. 10), which implements the LevelUp command.
value as(cid:74)𝑝,ℓ(cid:75). Indeed, by sampling small enough values 𝑟 and 𝑠 at ran-
dom, we can use 𝑟 as a MAC key and 𝑠 as a mask while avoiding any
overflow. As in all MAC checks, a cheating adversary would have to
guess 𝑟 to successfully cheat. In addition, we make sure to only open
𝑝·𝑟 +𝑠 which is statistically close to uniform randomness because
𝑠 is chosen uniformly random in [0,2𝜆+3·𝜎] whereas 𝑝·𝑟  ℓ, and 𝑝 2𝜆+𝜎 .
In addition, let ℓc be the number of primes, the product of which (𝑀ℓc
)
serves as the space over which we compute without overflow the product
sample the candidate primes 𝑝 and 𝑞, such thatℓ1
of the candidate primes 𝑝 and 𝑞, such thatℓc
>22·(𝜆+𝜎) .
𝑖=1𝑚𝑖 =𝑀ℓc
(1) On receiving Sample from all parties, First query S for the
values 𝑚𝑝 = 𝑝 mod 𝑀sample and 𝑚𝑞 = 𝑞 mod 𝑀sample together
with the shares 𝑝( 𝑗) , 𝑞( 𝑗) of corrupt parties 𝑃 𝑗 ∈ C. Then,
uniformly sample 𝑝( 𝑗) , 𝑞( 𝑗) and send them to honest parties
𝑃 𝑗 ∈ H with the condition that𝑗 𝑝( 𝑗) mod 𝑀sample = 𝑚𝑝 and
𝑗𝑞( 𝑗) mod 𝑀sample =𝑚𝑞.
(3) On receiving Jacobi(𝛾)
(2) On receiving Combine from all parties, send 𝑁𝑖 = (𝑝 ·𝑞) mod 𝑚𝑖
for all 𝑖 ∈ [ℓc] to all parties. If gcd(𝑁 ,𝑀sample) ≠1 send AbortGCD
to all parties; if 𝑁 ∉ [22𝜆,22·(𝜆+𝜎) ] send AbortOutOfRange to all
parties.