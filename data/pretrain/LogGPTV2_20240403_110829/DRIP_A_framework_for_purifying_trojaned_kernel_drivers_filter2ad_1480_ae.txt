drivers to run in user processes by emulating a Linux kernel
environment in user space. These research efforts are designed
to isolate buggy drivers at runtime. Compared with DRIP,
they incur additional performance overhead and cannot target
intentionally malicious drivers.
Fig. 6: Comparison of Network Throughput between Trojaned
Drivers and Puriﬁed Drivers
with that under trojaned drivers. This is intuitive to understand
because the puriﬁed drivers are without unnecessary kernel
API invocations and thus execute less code than the trojaned
drivers.
Besides testing CPU performance, we also utilize Iperf to
measure the network throughput for all cases involving the NIC
driver. We compare the TCP throughput of the trojaned driver
with the puriﬁed driver and present the result in Figure 6. The
left bars are bandwidths for trojaned drivers and the right bars
are for puriﬁed drivers. From the results, we observe that 4
out of 7 puriﬁed drivers maintain the same or slightly better
throughput compared with the trojaned drivers. The worst-case
overhead observed is only 4% for the puriﬁed E1000+Sebek
driver.
Our performance evaluation results demonstrate that pu-
riﬁed drivers generated by DRIP can maintain (almost) the
same network performance as under their trojaned versions.
Moreover, the puriﬁed drivers lead to better CPU performance
with the removal of embedded malicious operations.
V. DISCUSSION
In this section, we discuss the limitations of DRIP and
propose some possible solutions.
Coverage of Test Suite: A test suite can only ensure the
correctness of the tested behaviors within a speciﬁc application
and the environment in which it executes. Correspondingly, by
using a test suite, we only guarantee to preserve the driver
functionalities that those tests exercise. This may not cover all
benign functionality within a driver, or it may require new
tests in order to preserve behaviors not originally covered
by a test suite. For practical deployment, we recommend
adjusting test suite and generating new puriﬁed drivers based
on different deployments of applications. This can also be
treated as specialization of the driver. If we do not need some
of the redundant features, we can use DRIP to minimize the
functionalities of the driver.
False Positives of Removed Kernel API Invocations: We
remove function invocations that are not necessary to our test
HUKO [12] provides a hypervisor-based approach to en-
force mandatory access control policies on the untrusted
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:46:27 UTC from IEEE Xplore.  Restrictions apply. 
 0 20 40 60 80 100E1000+KBeastE1000+DRE1000+adore-ngE1000+SebekE1000+RedirE1000325+SSDTE1000325+KlogBandwidth(Mbits/sec)Comparison of Network Throughput between Trojaned Drivers and Purified DriversOriginalPurified94.894.794.893.291.994.694.694.894.893.489.894.794.694.5extension. It
limits the attacker’s ability to jeopardize the
integrity of the kernel. Gateway [11] is also a hypervisor-based
approach to trace kernel malware behavior. It monitors kernel
APIs invoked by untrusted kernel extensions and isolates the
driver at an address space separate from the kernel. These two
approaches both require the underlying hypervisor to support
online monitoring and they do not aim at purifying trojaned
malicious drivers.
Ofﬂine Device Driver Testing: SDV [13] statically checks
source code paths of device drivers to make sure they use
the Windows API correctly. DDT [14] exercises the closed
source device drivers to ﬁnd bugs by using symbolic execution.
These two ofﬂine approaches are designed to test buggy drivers
thoroughly but not for removing malicious behaviors from the
driver. On the other hand, both of them can complement DRIP
for improving the coverage of test suites.
Sandboxing: SFI [28] proposed the concept of sandboxing
to prevent unsafe instructions in untrusted modules from
writing or jumping to an address outside of their domain.
Based on SFI, XFI [29] leverages control ﬂow integrity to
prevent circumvention and support ﬁne-grained memory access
control. Vx32 [30] and NaCl [31] isolate the execution of an
application to a sandbox with restricted memory access and
system interface to prevent it from jeopardizing the system.
BGI [32] is a compiler-based software fault isolation approach
to provide byte-granularity memory protection. In order to
enforce API integrity, LXFI [33] utilizes a compiler plug-in
to generate instrumented driver code with security policies
speciﬁed by programmers. We can enhance DRIP to perform
ﬁner-grained puriﬁcation at the level of memory operation by
leveraging their ideas in the future.
Emulation-Based Analysis: Emulation-based techniques
have been widely used in malware proﬁling and analysis.
Panorama [34] captures the privacy-breaching behavior of
malware by leveraging whole-system taint tracking. K-Tracer
[35] dynamically analyzes a rootkit’s malicious behavior by
using backward slicing and chopping techniques. HookFinder
[36] and HookMap [37] perform dynamic analysis to identify
kernel hooks implanted by rootkits. PoKeR [38] proﬁles a
kernel rootkit’s behavior by traversing from static objects to
locate dynamic objects and performing address-object map-
ping. Rather than detect malware, DRIP extends the emulation
platform to perform trojaned malicious behavior elimination
from a driver. Virtuoso [39] involves a technique to create
introspection-based security tools automatically out of a VM
by tracing and combining the execution traces of In-VM
programs. RevNIC [40] is a technique that helps automatically
reverse engineer the logic of a network device driver and
synthesize a new driver with the same functionality for a
different platform. Rather than combining traces to re-create
a new binary, the goal of DRIP is to identify malicious logic
in existing drivers and perform binary rewriting to eliminate
their malicious effects.
VII. CONCLUSION
We develop and evaluate DRIP, a framework to eliminate
malicious/unnecessary behaviors of a trojaned kernel driver
and preserve its benign functionalities for a target application.
Through our evaluation, we demonstrate the effectiveness of
DRIP to achieve this goal. After loading a puriﬁed driver,
we can maintain or even improve the system’s performance
compared with running the same workload under the trojaned
driver.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for their
insightful comments. This research has been supported by
DARPA under Contract 12011593. Any opinions, ﬁndings, and
conclusions in this paper are those of the authors only and do
not necessarily reﬂect the views of DARPA.
REFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
bootkits,”
http://www.securelist.com/en/analysis/204792203/
“Sony, Rootkits and Digital Rights Management Gone Too Far,”
http://blogs.technet.com/b/markrussinovich/archive/2005/10/31/sony-
rootkits-and-digital-rights-management-gone-too-far.aspx.
“Legit
Legit bootkits.
“Infecting loadable kernel modules,” http://www.phrack.org/issues.
html?issue=61&id=10#article.
“Infecting loadable kernel modules kernel versions 2.6.x/3.0.x,” http:
//www.phrack.org/issues.html?issue=68&id=11#article.
“Module
forum/showﬂat.php?Cat=&Board=security&Number=536404&page=
0&view=collapsed&sb=5&o=31&fpart.
“Driverless Kernel Mode Rootkit,” http://www.rohitab.com/discuss/
topic/28440-driverless-kernel-mode-rootkit.
“Kernel Driver Backdooring,” http://securitylabs.websense.com/content/
Blogs/2730.aspx.
“The ERESI Reverse Engineering Software Interface,” http://www.
eresi-project.org.
http://www.linuxforum.net/
injection
in
2.6
kernel,”
[9] M. M. Swift, B. N. Bershad, and H. M. Levy, “Improving the Reliability
of Commodity Operating Systems,” in Proceedings of the nineteenth
ACM symposium on Operating systems principles, ser. SOSP ’03.
ACM, 2003, pp. 207–222.
[10] S. Boyd-Wickizer and N. Zeldovich, “Tolerating Malicious Device
Drivers in Linux,” in Proceedings of the 2010 USENIX conference on
USENIX annual technical conference. USENIX Association, 2010, pp.
9–9.
[11] A. Srivastava and J. Gifﬁn, “Efﬁcient Monitoring of Untrusted Kernel-
Mode Execution,” in Proceedings of the 18th Annual Network and
Distributed Systems Security Symposium, 2011.
[12] X. Xiong, D. Tian, and P. Liu, “Practical Protection of Kernel Integrity
for Commodity OS from Untrusted Extensions,” in Proceedings of
the 18th Annual Network and Distributed System Security Symposium,
2011.
[13] T. Ball, E. Bounimova, B. Cook, V. Levin, J. Lichtenberg, C. McGarvey,
B. Ondrusek, S. K. Rajamani, and A. Ustuner, “Thorough Static Analy-
sis of Device Drivers,” in Proceedings of the 1st ACM SIGOPS/EuroSys
European Conference on Computer Systems 2006, ser. EuroSys ’06.
ACM, 2006, pp. 73–85.
[15]
[16]
[14] V. Kuznetsov, V. Chipounov, and G. Candea, “Testing Closed-Source
Binary Device Drivers with DDT,” in Proceedings of the 2010 USENIX
conference on USENIX annual technical conference. USENIX Asso-
ciation, 2010, pp. 12–12.
“Linux Test Project,” http://ltp.sourceforge.net.
“skipﬁsh web application security scanner,” https://code.google.com/p/
skipﬁsh.
“curl-loader,” http://curl-loader.sourceforge.net.
[17]
[18] C. Cadar, D. Dunbar, and D. Engler, “KLEE: Unassisted and Automatic
Generation of High-Coverage Tests for Complex Systems Programs,” in
Proceedings of the 8th USENIX conference on Operating systems design
and implementation. USENIX Association, 2008, pp. 209–224.
[19] M. J. Renzelmann, A. Kadav, and M. M. Swift, “SymDrive: Testing
Drivers without Devices,” in Proceedings of the 10th USENIX confer-
ence on Operating Systems Design and Implementation.
USENIX
Association, 2012, pp. 279–292.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:46:27 UTC from IEEE Xplore.  Restrictions apply. 
Security and Privacy (SP), 2011 IEEE Symposium on.
pp. 297–312.
IEEE, 2011,
[40] V. Chipounov and G. Candea, “Reverse Engineering of Binary Device
Drivers with RevNIC,” in Proceedings of the 5th European conference
on Computer systems. ACM, 2010, pp. 167–180.
[20] V. Chipounov, V. Kuznetsov, and G. Candea, “S2E: A Platform for
In-Vivo Multi-Path Analysis of Software Systems,” pp. 265–278, 2011.
[21] K. Sen, D. Marinov, and G. Agha, “CUTE: A Concolic Unit Testing
Engine for C,” in Proceedings of the 10th European software engi-
neering conference held jointly with 13th ACM SIGSOFT international
symposium on Foundations of software engineering, ser. ESEC/FSE-13.
ACM, 2005, pp. 263–272.
[22] F. Bellard, “QEMU, a Fast and Portable Dynamic Translator.”
USENIX, 2005.
[23] A. Mavinakayanahalli, P. Panchamukhi, J. Keniston, A. Keshavamurthy,
and M. Hiramatsu, “Probing the Guts of Kprobes,” in Proceedings of
the 2006 Linux Symposium, vol. 2, 2006, pp. 109–124.
“Linux kernel module that allows you to set events on pressed
keys,” http://en.chuso.net/linux-kernel-module-that-allows-you-to-set-
events-on-pressed-keys.html.
[24]
[25] F. Zhou, J. Condit, Z. Anderson, I. Bagrak, R. Ennals, M. Harren,
G. Necula, and E. Brewer, “SafeDrive: Safe and Recoverable Exten-
sions Using Language-Based Techniques,” in Proceedings of the 7th
symposium on Operating systems design and implementation. USENIX
Association, 2006, pp. 45–60.
[26] V. Ganapathy, M. J. Renzelmann, A. Balakrishnan, M. M. Swift, and
S. Jha, “The Design and Implementation of Microdrivers,” in Pro-
ceedings of the 13th international conference on Architectural support
for programming languages and operating systems, ser. ASPLOS XIII.
ACM, 2008, pp. 168–178.
[27] D. Williams, P. Reynolds, K. Walsh, E. Sirer, and F. Schneider,
“Device Driver Safety Through a Reference Validation Mechanism,”
in Proceedings of the 8th USENIX conference on Operating systems
design and implementation. USENIX Association, 2008, pp. 241–254.
[28] R. Wahbe, S. Lucco, T. Anderson, and S. Graham, “Efﬁcient Software-
Based Fault Isolation,” in ACM SIGOPS Operating Systems Review,
vol. 27, no. 5. ACM, 1994, pp. 203–216.
´U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. Necula, “XFI:
Software Guards for System Address Spaces,” in Proceedings of the 7th
symposium on Operating systems design and implementation. USENIX
Association, 2006, pp. 75–88.
[29]
[30] B. Ford and R. Cox, “Vx32: Lightweight User-level Sandboxing on
the x86,” in USENIX 2008 Annual Technical Conference on Annual
Technical Conference. USENIX Association, 2008, pp. 293–306.
[31] B. Yee, D. Sehr, G. Dardyk, J. Chen, R. Muth, T. Ormandy, S. Okasaka,
N. Narula, and N. Fullagar, “Native Client: A Sandbox for Portable,
Untrusted x86 Native Code,” in Security and Privacy, 2009 30th IEEE
Symposium on.
IEEE, 2009, pp. 79–93.
[32] M. Castro, M. Costa, J. Martin, M. Peinado, P. Akritidis, A. Don-
nelly, P. Barham, and R. Black, “Fast Byte-Granularity Software Fault
Isolation,” in Proceedings of the ACM SIGOPS 22nd symposium on
Operating systems principles. ACM, 2009, pp. 45–58.
[33] Y. Mao, H. Chen, D. Zhou, X. Wang, N. Zeldovich, and M. Kaashoek,
“Software fault isolation with API integrity and multi-principal mod-
ules,” in Proceedings of the Twenty-Third ACM Symposium on Operat-
ing Systems Principles. ACM, 2011, pp. 115–128.
[34] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda, “Panorama:
Capturing System-wide Information Flow for Malware Detection and
Analysis,” in Proceedings of the 14th ACM conference on Computer
and communications security. ACM, 2007, pp. 116–127.
[35] A. Lanzi, M. Sharif, and W. Lee, “K-Tracer: A System for Extracting
Kernel Malware Behavior,” in Proceedings of the 16th Annual Network
and Distributed System Security Symposium, 2009.
[36] H. Yin, Z. Liang, and D. Song, “HookFinder: Identifying and Un-
derstanding Malware Hooking Behaviors,” in Proceedings of the 15th
Annual Network and Distributed System Security Symposium, 2008.
[37] Z. Wang, X. Jiang, W. Cui, and X. Wang, “Countering Persistent Kernel
Rootkits Through Systematic Hook Discovery,” in Recent Advances in
Intrusion Detection. Springer Berlin Heidelberg, 2008, pp. 21–38.
[38] R. Riley, X. Jiang, and D. Xu, “Multi-Aspect Proﬁling of Kernel Rootkit
Behavior,” in Proceedings of the 4th ACM European conference on
Computer systems. ACM, 2009, pp. 47–60.
[39] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Gifﬁn, and W. Lee, “Virtuoso:
Narrowing the Semantic Gap in Virtual Machine Introspection,” in
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:46:27 UTC from IEEE Xplore.  Restrictions apply.