### Drivers in User Processes via Linux Kernel Emulation

Research efforts have been directed towards enabling drivers to run within user processes by emulating a Linux kernel environment in user space. These initiatives aim to isolate faulty drivers at runtime. Compared to DRIP, these methods introduce additional performance overhead and cannot address intentionally malicious drivers.

### Comparison of Network Throughput: Trojaned vs. Purified Drivers

Figure 6 compares the network throughput between trojaned and purified drivers. The purified drivers, which lack unnecessary kernel API invocations, execute less code, leading to comparable or slightly better throughput compared to trojaned drivers.

In addition to CPU performance testing, we used Iperf to measure network throughput for all cases involving the NIC driver. The results, presented in Figure 6, show that 4 out of 7 purified drivers maintain the same or slightly better throughput compared to their trojaned counterparts. The worst-case overhead observed was only 4% for the purified E1000+Sebek driver.

Our performance evaluation demonstrates that drivers purified by DRIP can maintain (almost) the same network performance as their trojaned versions. Furthermore, the removal of embedded malicious operations leads to improved CPU performance.

### Discussion

#### Limitations and Possible Solutions

**Test Suite Coverage:**
A test suite ensures the correctness of tested behaviors within a specific application and its execution environment. Consequently, using a test suite guarantees the preservation of driver functionalities exercised by those tests. This may not cover all benign functionality within a driver, necessitating new tests to preserve uncovered behaviors. For practical deployment, we recommend adjusting the test suite and generating new purified drivers based on different application deployments. This can also be seen as driver specialization. If certain redundant features are not needed, DRIP can be used to minimize the driver's functionalities.

**False Positives in Removed Kernel API Invocations:**
We remove function invocations that are not necessary for our tests. HUKO [12] provides a hypervisor-based approach to enforce mandatory access control policies on untrusted extensions, limiting the attacker's ability to compromise kernel integrity. Gateway [11] is another hypervisor-based method that traces kernel malware behavior by monitoring kernel APIs invoked by untrusted kernel extensions and isolating the driver in a separate address space from the kernel. Both approaches require an underlying hypervisor to support online monitoring and do not aim to purify trojaned malicious drivers.

**Offline Device Driver Testing:**
SDV [13] statically checks device driver source code paths to ensure correct Windows API usage. DDT [14] uses symbolic execution to find bugs in closed-source device drivers. While these offline approaches thoroughly test buggy drivers, they do not remove malicious behaviors. However, they can complement DRIP to improve test suite coverage.

**Sandboxing:**
SFI [28] introduced sandboxing to prevent unsafe instructions in untrusted modules from writing or jumping to addresses outside their domain. XFI [29] enhances SFI with control flow integrity and fine-grained memory access control. Vx32 [30] and NaCl [31] isolate application execution in a sandbox with restricted memory access and system interfaces. BGI [32] offers byte-granularity memory protection, and LXFI [33] uses a compiler plugin to generate instrumented driver code with security policies. Future enhancements to DRIP could leverage these ideas for finer-grained purification at the memory operation level.

**Emulation-Based Analysis:**
Emulation techniques are widely used in malware profiling and analysis. Panorama [34] captures privacy-breaching behavior using whole-system taint tracking. K-Tracer [35] dynamically analyzes rootkit behavior with backward slicing and chopping. HookFinder [36] and HookMap [37] identify kernel hooks implanted by rootkits. PoKeR [38] profiles kernel rootkit behavior by traversing static objects to locate dynamic ones and performing address-object mapping. Unlike these detection tools, DRIP extends the emulation platform to eliminate trojaned malicious behavior from drivers. Virtuoso [39] creates introspection-based security tools by tracing and combining VM execution traces. RevNIC [40] automatically reverse engineers and synthesizes new drivers with the same functionality for different platforms. DRIP aims to identify and eliminate malicious logic in existing drivers through binary rewriting.

### Conclusion

We developed and evaluated DRIP, a framework that eliminates malicious or unnecessary behaviors in trojaned kernel drivers while preserving their benign functionalities for target applications. Our evaluation demonstrates DRIP's effectiveness in achieving this goal. After loading a purified driver, system performance is maintained or even improved compared to running the same workload with a trojaned driver.

### Acknowledgment

We thank the anonymous reviewers for their insightful comments. This research was supported by DARPA under Contract 12011593. The opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of DARPA.

### References

[References listed here]

---

This optimized version improves clarity, coherence, and professionalism, making the content more accessible and easier to understand.