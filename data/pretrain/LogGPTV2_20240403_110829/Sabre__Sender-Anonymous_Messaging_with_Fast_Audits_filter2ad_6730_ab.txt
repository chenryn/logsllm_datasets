2𝜆)ℎ×1 having a
1-hot sum (cid:174)𝑠0 + (cid:174)𝑠1 whose sole non-zero element resides
in the 𝑞th row and has a least-significant bit of 1;
3) computes (cid:174)𝑣 (cid:66) 𝐺((cid:174)𝑠0[𝑞]) + 𝐺((cid:174)𝑠1[𝑞]) + (𝑀 (cid:174)𝑒𝑟), where (cid:174)𝑠0[𝑞]
and (cid:174)𝑠1[𝑞] respectively denote the 𝑞th rows of (cid:174)𝑠0 and (cid:174)𝑠1,
and where (cid:174)𝑒𝑟 ∈ (F
2𝐿)1×𝑤 is the standard basis vector
having a 1 in its 𝑟 th column; and then, finally,
2) samples two column vectors (cid:174)𝑠0, (cid:174)𝑠1 ∈R (F
2𝐿 to the bulletin board, the sender
2𝜆 → (F
4) sends ((cid:174)𝑠𝑏, (cid:174)𝑣) to server 𝑏 for 𝑏 = 0, 1.
Upon receiving ((cid:174)𝑠𝑏, (cid:174)𝑣), server 𝑏 forms the matrix
which it adds component-wise to the bulletin board to
effectuate the write.
An easy calculation verifies that 𝑀0 + 𝑀1 ∈ (F
2𝐿)ℎ×𝑤 has
message 𝑀 in its (𝑞, 𝑟)th component and zero elsewhere—
provided the sender generated the ((cid:174)𝑠𝑏, (cid:174)𝑣) honestly, which the
servers confirm via the audit protocol. In the audit protocol,
2𝐿)1×𝑤, and
server 𝑏 sums the rows of 𝑀𝑏 to get (cid:174)𝑚𝑏 ∈ (F
then all three servers run a secure (2+ 1)-party computation
to verify that (cid:174)𝑚0 + (cid:174)𝑚1 is indeed 1-hot. Notice that auditing
requires O(𝑛 𝐿) work by each of server 0 and server 1.
a) Express: The state-of-the-art system in the sender-
is the Express scheme of Es-
anonymous mailbox model
kandarian, Corrigan-Gibbs, Zaharia, and Boneh [14]. Express
uses O(lg 𝑛)-sized DPFs of Boyle, Gilboa, and Ishai [5] to
2As a hedge against this aggressively high collision rate, Riposte users can
write ordered pairs of the form (𝑀, 𝑀2). This way, if a collision places two
messages 𝑀 and ¯𝑀 in the same bucket, both recipients will receive the pair
(𝑀+ ¯𝑀, 𝑀2+ ¯𝑀2) from which they can recover 𝑀− ¯𝑀 = (𝑀2+ ¯𝑀2)(𝑀+ ¯𝑀)−1
and, thereby, solve for 𝑀 and ¯𝑀.
𝐺((cid:174)𝑠𝑏[0])
𝐺((cid:174)𝑠𝑏[1])
...
𝐺((cid:174)𝑠𝑏[ℎ − 1])
 + (cid:174)𝑣 ·
𝑀𝑏 (cid:66)
lsb((cid:174)𝑠𝑏[0])
lsb((cid:174)𝑠𝑏[1])
...
lsb((cid:174)𝑠𝑏[ℎ − 1])
 ∈ (F2𝐿)ℎ×𝑤 ,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
21954
implement oblivious writes into pre-registered mailboxes.
Specifically, a recipient registers a mailbox with the servers
and receives a uniform 𝜆-bit string addr (the “mailbox ad-
dress”). A sender can deposit a message into the mailbox if
and only if it knows addr. If the registered mailboxes form
a negligibly sparse subset of {0, 1}𝜆, then attempts to guess
a valid address fail with overwhelming probability.
Express requires (and supports) just two servers. Con-
sider an Express instance with security parameter 𝜆 ∈ N
(say, 𝜆 = 128) having 𝑛 registered mailboxes addressed
by addr1, . . . , addr𝑛. To deposit a message 𝑀 ∈ F
2𝐿 into
the mailbox addressed by addr𝑖, the sender samples a DPF
representation (dpf0, dpf1) of 𝑀 (cid:174)𝑒addr𝑖 , where (cid:174)𝑒addr𝑖 ∈ (F
2𝐿)1×2𝜆
is the standard basis vector having a 1 in its (addr𝑖)th column,
and then it sends dpf𝑏 to server 𝑏 for 𝑏 = 0, 1.
Upon receiving dpf𝑏, server 𝑏 expands it to the vector
𝑀𝑏 ∈ (F
2𝐿)1×𝑛 in which the 𝑗 th component is obtained by
evaluating dpf𝑏 at addr𝑗 for 𝑗 = 1, . . . , 𝑛; server 𝑏 adds 𝑀𝑏 to
its mailbox database to effectuate the write.
2𝐿)1×𝑛 has
An easy calculation verifies that 𝑀0 + 𝑀1 ∈ (F
message 𝑀 in its 𝑖 th column and zero elsewhere—provided
the sender generated (dpf0, dpf1) honestly, which the servers
confirm via the audit protocol. In the audit protocol, the
two servers engage in a secret-shared non-interactive proof
(SNIP) to verify that 𝑀0 + 𝑀1 is (at-most-)1-hot. Notice that
auditing requires O(𝑛 𝜆) work—i.e., O(𝑛) evaluations of the
DPF costing O(𝜆) length-doubling PRG evaluations a piece—
by each of server 0 and server 1.
D. De l’Épée au Sabre
We present Sabre, a family of SAM protocols with in-
stances operating in both the bulletin-board and mail-
box models. Sabre protocols inherit much of their basic
structure from Riposte and Express, but incorporate key
innovations that improve not only concrete performance
and scalability under normal operations, but also resilience
to resource exhaustion-style DoS attacks in the mailbox
model.
From a technical perspective, the primary difference is how
Sabre implements auditing to identify malformed write re-
quests: the senders construct compact (2- or 3-verifier) SNIPs
that “directly” attest to the well-formedness of the DPFs they
submit. We construct the SNIPs in a novel paradigm we call
multi-verifier MPC-in-the-head, which generalizes the (single-
verifier) MPC-in-the-head paradigm of
Ishai, Kushilevitz,
Ostrovsky, and Sahai [19] to achieve good soundness at low
cost in scenarios where two or more distinct verifiers can
check two or more distinct subsets of simulated interaction
transcripts. In the sender-anonymous mailbox model, Sabre
also uses a new trick to decouple the cost of DPF evaluation
from the bit length of the mailbox addresses. Together, these
modifications yield speedups that exceed an order of magni-
tude relative to Express when all the write requests are “well-
formed” and increase significantly—with the performance
gap growing exponentially in the number of mailboxes—in
the presence of resource-exhaustion DoS attacks.
𝑣 (𝜀)
𝑣 (0)
𝑣 (1)
𝑣 (00)
𝑣 (01)
𝑣 (10)
𝑣 (11)
0
0
0
0
0 𝒚
0
0
Fig. 1: Binary-tree representation of the generalized
point function with point (𝑥5, 𝑦) ∈ 𝐷 × 𝑅, |𝐷| = 23.
As with both Riposte and Express, the correctness of Sabre
requires that all servers faithfully audit all incoming DPFs—
that is, none of these protocols can operate in the presence
of Byzantine servers. However, like Express, Sabre’s reliance
on non-interactive (SNIP-based) auditing deprives would-
be malicious servers of the opportunity to deviate from
the protocol
in ways that might leak information about
the mapping between writers and the messages they have
penned.
E. Our Contributions
The main contribution of this paper is the design and
evaluation of the Sabre family of SAM protocols. Sabre
protocols are more performant than prior work by a (signifi-
cant) constant factor when there is no attacker and they are
asymptotically faster in the presence of DoS attacks. Toward
the construction of Sabre, we make several contributions of
independent interest, including
1) an efficient secure (2 + 1)-party computation for the
oblivious evaluation of O(lg 𝑛)-sized DPFs;
2) fast SNIPs from “multi-verifier” MPC-in-the-head;
3) non-interactive zero-knowledge arguments of knowl-
edge for the well-formedness of O(lg 𝑛)-sized DPFs;
and O(lg 𝑛)-sized DPF evaluation; and
4) parallel (bitsliced) implementations of fixed-key LowMC
5) a novel, constant-complexity mailbox address check.
II. Building Blocks
This section gives a brief overview of the various building
blocks used to construct Sabre.
A. Distributed point functions
A 𝑡-out-of-ℓ distributed point function, or (𝑡, ℓ)-DPF,
is
a compact (𝑡, ℓ)-threshold shared representation of a so-
called (generalized) point function. Sabre and the related SAM
constructions we consider exclusively use (2, 2)-DPFs (that is,
the special case of 𝑡 = ℓ = 2); thus, for brevity, we generally
omit the (2, 2)- qualifier and refer merely to “DPFs”.
1) (Non-distributed) point functions: Fix a domain 𝐷 ⊆
{0, 1}∗ and range 𝑅 (a ring with unity), and let 0 and 1 denote
the additive and multiplicative identities in 𝑅.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
31955
Definition 1. The point function at 𝑥 ∈ 𝐷 over 𝑅 is the
function P𝑥 : 𝐷 → 𝑅 defined via
(cid:40)
P𝑥(𝑖) (cid:66)
1 if 𝑖 = 𝑥, and
0 otherwise.
That is, the point function at 𝑥 ∈ 𝐷 over 𝑅 is 0 everywhere
except at 𝑥 where it is 1. Alternatively, one can think of it as
a “functional representation” of a vector from the standard
basis of a |𝐷|-dimensional module over 𝑅.
A “generalized” point function is just a point function
scaled by some value from its range.
Definition 2. If P𝑥 : 𝐷 → 𝑅 is the point function at 𝑥 ∈ 𝐷
over 𝑅 and if 𝑦 ∈ 𝑅 is a fixed scalar, then P𝑥,𝑦 : 𝑖 ↦→ 𝑦·P𝑥(𝑖) is
the generalized point function with point (𝑥, 𝑦) ∈ 𝐷 × 𝑅.
is 0) or to the right child (if the next bit of 𝑗
Point functions as binary trees: Suppose 𝐷 ⊆ {0, 1}∗ is
a well-ordered set with cardinality 2ℎ. One can naturally
represent the generalized point function with point (𝑥, 𝑦) ∈
𝐷 × 𝑅 by a complete binary tree of height ℎ having one
leaf node labelled “𝑦” and all other leaf nodes labelled “0”.
To evaluate the point function on input 𝑥 𝑗 ∈ 𝐷 —the “𝑗 th-
smallest” element of 𝐷 —begin at the root and parse the
binary-string representation of 𝑗 bit-by-bit from left to right,
iteratively traversing either to the left child (if the next bit
of 𝑗
is 1)
of the current node until eventually arriving at a leaf. The
label on this leaf defines the output of the point function on
input 𝑥 𝑗. Figure 1 depicts the binary-tree representation of
the generalized point function with point (𝑥5, 𝑦) ∈ 𝐷 × 𝑅,
where 𝐷 has cardinality 23.
Before describing distributed point functions, we elaborate
on some properties of such binary-tree representations that
will prove useful in constructing the Sabre audit protocol. We
first observe that such a tree comprises two distinct kinds of
nodes, which we refer to as type-0 nodes and type-1 nodes. For
brevity, we sometimes use 0-nodes and 1-nodes to reference
type-0 nodes and type-1 nodes, respectively.
Definition 3. A node is of type 0 if it is either (i) a leaf with
label “0”, or (ii) a non-leaf and both of its children are of type
0; the node is of type 1 if it is either (i) a leaf with a label
other than “0”, or (ii) a non-leaf with one type-1 child and one
type-0 child.
The next observation follows from Definition 3.
Observation 1. If a tree is rooted at a 0-node, then all of its
leaves are of type 0; if it is rooted at a 1-node, then exactly one
of its leaves is of type 1 and all others are of type 0.
The proof of Observation 1 is by induction on the tree
height ℎ; it appears in Appendix A.
Observation 1 implies that any tree rooted at a 1-node
contains exactly one path consisting entirely of 1-nodes from
the root to some leaf node (and, moreover, that all 1-nodes
reside along this path). We refer to such a path as a type-1
path through the tree (or a 1-path for short). For example,
the highlighted path in Figure 1 is the 1-path: every node on
it is type 1 while every node not on it is type 0.
The above notions of 1-nodes and 1-paths give us some
alternative ways to characterize the representation of gener-
alized point functions as binary trees.
Corollary 1. The following three characterizations are all
equivalent: A complete binary tree of height ℎ represents a
generalized point function if and only if
1) exactly one leaf has type 1 and all others have type 0;
2) its root has type 1; or
3) it contains a 1-path of height ℎ.
The first characterization in Corollary 1 is appealing be-
cause it most directly maps to the definition of a generalized
point function (as stated in Definition 2); however, looking
ahead, the third characterization will prove particularly con-
venient because it references just ℎ nodes on a path from
the root to a leaf, as opposed to all 2ℎ leaves. (The second
references just one node, yet the property of being a 1-node
implicitly references a 1-path rooted at that node.)
2) 2-out-of-2 distributed point functions: We now present a
formal definition of (2, 2)-DPFs based on those of Gilboa and
Ishai [17] and Boyle, Gilboa, and Ishai [5], [6].
Definition 4. A (2, 2)-distributed point function, or (2, 2)-
is a pair of PPT algorithms (Gen, Eval) defining an
DPF,
infinite family of secret-shared representations of generalized
point functions; that is, given (i) a security parameter 𝜆 ∈ N,
(ii) a domain 𝐷 and range 𝑅, and (iii) a distinguished point
(𝑥, 𝑦) ∈ 𝐷 × 𝑅, we have
1. Correctness: If (dpf0, dpf1) ← Gen(1𝜆, 𝐷, 𝑅; 𝑥, 𝑦), then,
for all 𝑖 ∈ 𝐷,
(cid:40) 𝑦 if 𝑖 = 𝑥, and
0 otherwise.
Eval(dpf0, 𝑖) + Eval(dpf1, 𝑖) (cid:66)
2. Simulatability: There exists a PPT simulator S such that,
for any given domain 𝐷, range 𝑅, distinguished point
(𝑥, 𝑦) ∈ 𝐷×𝑅, and bit 𝑏 ∈ {0, 1}, the distribution ensembles
(cid:8)S(1𝜆, 𝐷, 𝑅; 𝑏)(cid:9)
and
(cid:8)dpf𝑏
𝜆∈N
(cid:12)(cid:12) (dpf0, dpf1) ← Gen(1𝜆, 𝐷, 𝑅; 𝑥, 𝑦)(cid:9)
𝜆∈N
are computationally indistinguishable.
The dpf𝑏 output by Gen are called (2, 2)-DPF keys; the 𝑥-
coordinate of the distinguished point is the distinguished input.
3) The Boyle-Gilboa-Ishai DPF construction: The most com-
pact DPF representation in the literature is due to Boyle,
Gilboa, and Ishai [6]. Their construction uses a length-
doubling PRG to define a pair of “secret-shared” binary trees
that collectively represent some generalized point function.
Let 𝐺2× : {0, 1}∗ → {0, 1}∗ be any length-doubling PRG and
2𝐿 : {0, 1}∗ → F
2𝐿 be a PRG with 𝐿-bit outputs. Boyle et
𝐺
al.’s construction follows from the simple observation that
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
41956
𝐺2×(𝑟0) = 𝐺2×(𝑟1) if and (essentially) only if 𝑟0 = 𝑟1; that is,
length-doubling PRGs map additive shares of 0 to additive
shares of (0, 0), while they map additive shares of 𝑥 ≠ 0 to
additive shares of (𝑦, 𝑧) such that both 𝑦 ≠ 0 and 𝑧 ≠ 0 with
a probability overwhelming in |𝑥|.
In the context of binary-tree representations of generalized
point functions, this roughly equates to observing that 𝐺2×
preserves the property of being a 0-node. The challenge is
now to extend this so that 𝐺2× preserves node type for all
nodes in the tree, be they the 0-nodes that comprise most of
the tree or the 1-nodes along the path from the root to the
distinguished point. To this end, the DPF keys include one
𝜆-bit correction word (CW) per tree level, which is specially
crafted to map exactly one child of the 1-node on that level to
a 0-node. Finally, 𝐺
2𝐿 “stretches” each node in the final (i.e.,
leaf) level into a pseudorandom 𝐿-bit value, and then a final
𝐿-bit CW maps the leaf-level 1-node to the desired output 𝑦 ∈
𝑅. We elaborate on the semantics of CWs when constructing
our (2+ 1)-party computation for DPF auditing in Section V;
for now, we emphasize only that this approach yields very
compact DPF keys, each comprising a length-ℎ (i.e., length-
⌈lg|𝐷|⌉) sequence of 𝜆-bit values, plus one additional 𝐿-bit
value to map the leaf-level 1-node to 𝑦 ∈ 𝑅.
B. Secure multiparty computation
A secure multiparty computation (MPC) protocol is a cryp-
tographic protocol through which two or more mutually
distrusting parties jointly compute some function over their
private inputs while disclosing nothing about their inputs
beyond what is deducible from the shared output. In addition
to the functionality being computed, MPC protocols are