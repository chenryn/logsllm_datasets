### 4. TA Availability Modeling

The availability modeling of the Travel Agency (TA) system will be carried out according to a hierarchical description in four steps, as shown in Figure 1. This process starts at the service level, considering both the basic and redundant architectures presented in Figures 7 and 8.

#### 4.1. Service Level Availability

At this step, we evaluate the external and internal service availabilities.

##### 4.1.1. External Services

Each external system is modeled as a black box that fails independently of all others. The following notations are used:
- \( A_{Fi} \), \( A_{Hj} \), and \( A_{Ck} \): Availabilities of the flight, hotel, and car reservation systems, respectively, where \( i = 1, \ldots, N_F \); \( j = 1, \ldots, N_H \); \( k = 1, \ldots, N_C \).
- \( A_{PS} \): Availability of the payment system.
- \( A_{net} \): Availability of the TA's connectivity to the Internet.

Assuming independence and that the service is provided as long as at least one reservation system for each item of a trip (flight, hotel, and car) is available, the availability of the external services can be derived as follows:

\[
A_1(\text{Flight}) = 1 - \prod_{i=1}^{N_F} (1 - A_{Fi})
\]

\[
A_1(\text{Hotel}) = 1 - \prod_{j=1}^{N_H} (1 - A_{Hj})
\]

\[
A_1(\text{Car}) = 1 - \prod_{k=1}^{N_C} (1 - A_{Ck})
\]

\[
A(\text{Payment service}) = A_{PS}
\]

It is worth noting that if the TA's connectivity to the Internet is unavailable, none of these services can be provided. Therefore, the availability of the TA's connectivity to the Internet, \( A_{net} \), will be accounted for by multiplying the user-perceived availability expression by \( A_{net} \) (cf. Section 4.3).

##### 4.1.2. Internal Services

These concern the web application and database services. For both architectures in Figures 7 and 8, communication between servers is achieved via a local area network (LAN). The LAN is assumed to be a single point of failure; when the LAN is unavailable, all internal services are also unavailable. Consequently, the LAN availability, denoted by \( A_{LAN} \), is a multiplying factor in all equations giving the various function availabilities (as will be seen in Section 4.2). \( A_{LAN} \) can be evaluated using models discussed in [16, 17].

To illustrate the applicability of the proposed approach to the TA example, we make simplistic assumptions for the application and database services. More realistic assumptions are made for the web service to demonstrate more complex calculations.

**Application and Database Service Availability:**

Let us denote by \( A(CAS) \) and \( A(CDS) \) the availabilities of the computer hosts associated with the application and database servers, respectively. The disk availability is denoted by \( A(Disk) \). We assume that the computer hosts and disks fail independently of each other. The application and database service availabilities, denoted as \( A(AS) \) and \( A(DS) \), are given in Table 4.

| Architecture | \( A(AS) \) | \( A(DS) \) |
|--------------|-------------|-------------|
| Basic        | \( A(CAS) \) | \( A(CDS) \times A(Disk) \) |
| Redundant    | \( 1 - (1 - A(CAS))^2 \) | \( 1 - (1 - A(CDS) \times A(Disk))^2 \) |

**Web Service Availability:**

We consider two types of failures:
1. Hardware and software failures that affect the computer host and lead to web server failure.
2. Performance-related failures that occur when incoming requests are not serviced due to the limited capacity of the web servers.

The web service is assumed to be available when neither type of failure occurs. The impact of both types of failures on the web service availability can be accounted for by adopting a composite performance and availability evaluation approach [18, 19]. This approach combines the results from a pure performance model and a pure availability model. The performance model evaluates performance-related measures conditioned on the state of the system as determined from the availability model. The availability model evaluates the steady-state probability associated with the system states resulting from the occurrence of failures and recoveries.

This approach assumes that the system reaches a quasi-steady state with respect to performance-related events between successive occurrences of failure-recovery events. This assumption is valid when the failure/recovery rates are much lower than the request arrival/service rates, which is typically true in our context.

**Basic Architecture:**

It consists of a unique computer host, \( CWS \). Let \( p_K \) be the probability that the web server input buffer (size \( K \)) is full when a request is received. The evaluation of \( p_K \) is derived from the performance model and depends on the assumptions made about the request arrival and service processes. Assuming Poisson request arrivals with rate \( \lambda \) and exponentially distributed service times with rate \( \mu \), the web server behavior can be modeled by an M/M/1/K queue. The probability that an arriving request is lost due to a full buffer is given by:

\[
p_K = \frac{\left( \frac{\lambda}{\mu} \right)^K \frac{1}{K!}}{\sum_{n=0}^{K} \left( \frac{\lambda}{\mu} \right)^n \frac{1}{n!}}
\]

The availability model has two states: up and down. The steady-state probability of the up state corresponds to the system's steady-state availability, denoted \( A(CWS) \). Thus, the availability of the web service is:

\[
A(\text{Web service}) = A(CWS) \times (1 - p_K)
\]

**Redundant Architecture:**

This architecture consists of \( N_W \) identical web servers. We assume that all component failures are independent and that the web service is provided as long as at least one of the redundant component systems is available.

The performance model for this architecture, to evaluate \( p_K(i) \), the probability that web requests are lost due to a full input buffer, is described by an M/M/i/K queue, where \( i \) is the number of available servers and \( K \) is the buffer size. For a system state with \( i \) operational servers, \( p_K(i) \) is given by:

\[
p_K(i) = \frac{\left( \frac{\lambda}{\mu} \right)^{iK-i} \frac{1}{i!}}{\sum_{j=0}^{K} \left( \frac{\lambda}{\mu} \right)^j \frac{1}{j!} + \sum_{j=i}^{K} \left( \frac{\lambda}{\mu} \right)^{j-i} \frac{1}{i!}}
\]

With respect to the availability model, the aim is to model the redundant architecture's behavior resulting from the occurrence of failures/repairs to evaluate the steady-state probability associated with system states \( i \) (where \( i \) is the number of operational servers).

**Perfect Coverage:**

In the model shown in Figure 9, each web server runs on a dedicated computer host. Web server failures occur with rate \( \alpha \). The model assumes shared repair facilities with repair rate \( \mu \). When a server fails, it is automatically disconnected, and the system is reconfigured (with probability 1) with the remaining operational web servers.

The steady-state probability of state \( i \) is:

\[
\pi_i = \frac{\left( \frac{\alpha}{\mu} \right)^i \frac{1}{i!}}{\sum_{j=0}^{N_W} \left( \frac{\alpha}{\mu} \right)^j \frac{1}{j!}}
\]

The availability of the web service is:

\[
A(\text{Web service}) = \sum_{i=1}^{N_W} \pi_i \times (1 - p_K(i)) + \pi_0
\]

**Imperfect Coverage:**

This assumption is included in the model presented in Figure 10, where from each state \( i \), two transitions are considered:
1. After a covered failure (transition with rate \( i c \alpha \)), the system is automatically reconfigured into an operational state with \( (i-1) \) web servers.
2. Upon the occurrence of an uncovered failure (transition with rate \( i (1-c) \alpha \)), the system moves to a down state \( y_i \), where manual reconfiguration is required before moving to an operational state \( (i-1) \). The reconfiguration times are exponentially distributed with mean \( \frac{1}{\beta} \).

Solving the model in Figure 10 for steady-state probabilities leads to:

\[
\pi_i = \frac{\left( \frac{\alpha}{\mu} \right)^i \frac{1}{i!}}{\sum_{j=0}^{N_W} \left( \frac{\alpha}{\mu} \right)^j \frac{1}{j!}}
\]

\[
\pi_{yi} = \pi_0 \times \frac{\left( \frac{(1-c) \alpha}{\beta} \right)^{i-1} \frac{1}{(i-1)!}}{\sum_{j=0}^{N_W} \left( \frac{(1-c) \alpha}{\beta} \right)^j \frac{1}{j!}}
\]

The availability of the web service is:

\[
A(\text{Web service}) = \sum_{i=1}^{N_W} \pi_i \times (1 - p_K(i)) + \pi_0
\]