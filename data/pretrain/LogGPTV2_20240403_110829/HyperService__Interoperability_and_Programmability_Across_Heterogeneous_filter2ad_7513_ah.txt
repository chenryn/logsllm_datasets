.
ISC
).
VES
VES
, PI
CLI
arguments, where each argument is a hybrid construction of FUIP,
a subset of dummy parties of IFUIP
, and a subset of real-world
parties of ProtUIP, except that the first argument that is ProtUIP
without any ideal parties and the last argument is IFUIP
without
any real world parties. We prove that E cannot distinguish any
two consecutive hybrid arguments. Then based on the transitivity
of protocol emulation [28], we prove that the first argument (i.e.,
ProtUIP) UC-emulates the last argument (i.e., IFUIP
Real World. We start with the real world ProtUIP with a dummy
adversary that simply passes messages to and from E.
Hybrid A1. Hybrid A1 is the same as the real world, except that the
(PVES, PCLI) pair is replaced by the dummy (PI
, PI
) pair. Upon
observing an instruction from E to execute some dApp executables
CLI
GT , S calls the CreateContract interface of PISC (living in the
Hybrid A1) to obtain the contract code contract. Upon contract is
received, S calls the SessionCreate interface of FUIP with parameter
(GT , contract, PI
), which will output a certificate to both
dummy parties to emulate the handshake result between PVES and
PCLI in the real world. S also deploys contract on PNSB or PBC in
the Hybrid A1. Finally, S stakes required funds into FUIP to unblock
its execution.
Upon observing an instruction from E (sent to either dummy
parties) to execute a transaction in GT , based on its construction
in § 8.4, S has enough information to construct a call to FUIP
with a proper interface and parameters. If the call generates a
certificate Cert, S retrieves Cert to emulate the PoAs staking in
the real world. In particular, if in the real world, PVES (and PCLI)
publishes a certificate on PNSB after receiving the same instruction
from E, then S publishes the corresponding certificate on PNSB
in the Hybrid A1 as well. Otherwise, S skip the publishing. Later,
S retrieves (and stores) the Merkle proof from PNSB, and then
instructs FUIP to output the proof to the dummy party which, from
the point view of E, should be the publisher of Cert.
Upon observing an instruction from E (to either dummy party)
to invoke the smart contract, S uses its saved certificates or Merkle
proofs to invoke PISC in the Hybrid A1 accordingly.
Note that in the real world, the execution of GT is automatic in
the sense that GT can continuously proceed even without additional
instructions from E after successful session setup. In the Hybrid A1,
although PVES and PCLI are replaced by dummy parties, S, with
fully knowledge of GT , is still able to drive the execution of GT so
that from E’s perspective, GT is executed automatically. Further,
since PISC still lives in the Hybrid A1, S should not trigger the
TermExecution interface of FUIP to avoid double execution on the
same contract terms. S can still reclaim its funds staked in FUIP via
“backdoor” channels since S and FUIP are allowed to communicate
freely under the UC framework.
Fact 1. With the aforementioned construction of S and FUIP, it is
immediately clear that the outputs of both dummy parties in the
Hybrid A1 are exactly the same as the outputs of the corresponding
actual parties in the real world, and all side effects in the real world
are accurately emulated by S in the Hybrid A1. Thus, E cannot
distinguish with the real world and the Hybrid A1.
Hybrid A2. Hybrid A2 is the same as the Hybrid A1, expect that
PISC is further replaced by the dummy PI
. As a result, S is
required to resume the responsibility of PISC in the Hybrid A2.
ISC
ISC
ISC
VES
In particular, when observing an instruction to execute a GT , S
computes the arbitration code contract, and then instructs FUIP to
publish the contract on PI
, which is observable by E. For any
instruction to invoke contract, S locally executes contract with the
input and then publishes the updated contract to PI
via FUIP.
Finally, upon the predefined contract timeout, S calls the TermExe-
cution interface of FUIP with parameter (sid, PI
) or (sid, PI
)
CLI
to execute the contract, which emulates the arbitration performed
by PISC in the Hybrid A1.
It is immediately clear that with the help of S and FUIP, the out-
put of the dummy PI
and all effects in the Hybrid A2 are exactly
the same as those in the Hybrid A1. Thus, E cannot distinguish
ISC
these two worlds.
Hybrid A3. Hybrid A3 is the same as the Hybrid A2, expect that
PNSB is further replaced by the dummy PI
. Since the structure of
PNSB and messages sent to PNSB are public, simulating its function-
ality by S is trivial. Therefore, Hybrid A3 is identically distributed
as Hybrid A2 from the view of E.
Hybrid A4, i.e., the ideal world. Hybrid A4 is the same as the
Hybrid A3, expect that PBC (the last real-world party) is further
replaced by the dummy PI
. Thus, the Hybrid A4 is essentially
. Since the functionality of PBC is a strict subset of that of
IFUIP
BC
PNSB, simulating PBC by S is straightforward. Therefore, IFUIP
is
indistinguishable with the Hybrid A3 from E’s perspective.
Then given the transitivity of protocol emulation, we show that
ProtUIP UC-emulates IFUIP
, and therefore prove that ProtUIP UC-
realizes FUIP. Throughout the simulation, we maintain a key in-
variant: S and FUIP together can always accurately simulate the
desired outputs and side effects on all (dummy and real) parties
in all Hybrid worlds. Thus, from E’s view, the indistinguishability
between the real and ideal worlds naturally follows.
NSB
8.6 Byzantine Corruption Model
Theorem 8.1 considers the passive corruption model. In this section,
we discuss the more general Byzantine corruption model for PVES
and PCLI (by assumption of this paper, blockchains and smart con-
tracts are trusted for correctness). Previously, we construct S and
FUIP accurately to match the desired execution of ProtUIP. However,
if one party is Byzantinely corrupted, the party behaves arbitrarily.
As a result, a Byzantine-corrupted party may send conflicting mes-
sages to off-chain channels and PNSB. Note that for any transaction
state, ProtUIP always processes the first received attestation (either
a certificate from channels or Merkle proof from the PNSB) and
effectively ignores the other one. The adversary could then inject
message inconsistency to make the protocol execution favors one
type of attestations over the other. This makes it impossible for S
to always accurately emulate its behaviors, resulting in difference
between the ideal world and the real world from E’s view.
To incorporate the Byzantine corruption model into our security
analysis, we consider a variant of ProtUIP, referred to as H-ProtUIP,
that requires PVES and PCLI to only use PNSB as the communication
medium. Thus, the full granularity of protocol execution is guar-
anteed to be public and unique, allowing S to emulate whatever
actions a (corrupted) part may take in the real world. Therefore, it
is not hard to conclude the Theorem 8.2.
9 CONCLUSION
In this paper, we presented HyperService, the first platform that
offers interoperability and programmability across heterogeneous
blockchains. HyperService is powered by two innovative designs:
HSL, a programming framework for writing cross-chain dApps by
unifying smart contracts written in different languages, and UIP,
the universal blockchain interoperability protocol designed to se-
curely realize the complex operations defined in these dApps on
blockchains. We implemented a HyperService prototype in approx-
imately 35,000 lines of code to demonstrate its practicality, and ran
experiments on the prototype to report the end-to-end execution
latency for dApps, as well as the aggregate platform throughput.
10 ACKNOWLEDGMENTS
We thank the anonymous reviewers for their valuable feedback. We
thank Harmony Protocol for their discussion on cross-shard trans-
actions. This material is based upon work partially supported by
NSF under Contract Nos. CNS-1717313 and TWC-1518899, and by
National Key Research and Development Program of China under
grant No. 2018YFB0803605 and NSFC under grant No. 61702045.
Correspondence authors are Zhuotao Liu and Haoyu Wang.
REFERENCES
[1] Cosmos WhitePaper. https://cosmos.network/resources/whitepaper, 2019.
[2] Harmony: Technical Whitepaper. https://harmony.one/whitepaper.pdf, 2019.
[3] Monoxide: Scale Out Blockchain with Asynchronized Consensus Zones.
In
[4] Open Source Code for HyperService by HyperService-Consortium. https://github.
USENIX NSDI (2019).
com/HyperService-Consortium, 2019.
[5] Bitcoin Wiki: Atomic Cross-Chain Trading. https://en.bitcoin.it/wiki/Atomic_
swap, Accessed on 2019.
[6] CoinMarketCap. https://coinmarketcap.com, Accessed on 2019.
[7] Cosmos. https://cosmos.network, Accessed on 2019.
[8] DPOS Consensus Algorithm. https://steemit.com/dpos/@dantheman/dpos-
consensus-algorithm-this-missing-white-paper, Accessed on 2019.
[9] J.P. Morgan: Blockchain and Distributed Ledger. https://www.jpmorgan.com/
global/blockchain, Accessed on 2019.
[10] Nebulas. https://github.com/nebulasio, Accessed on 2019.
[11] Oraclize. http://www.oraclize.it, Accessed on 2019.
[12] Polkadot. https://polkadot.network, Accessed on 2019.
[13] rhombus. https://rhombus.network, Accessed on 2019.
[14] Solidity. https://solidity.readthedocs.io/en/v0.5.6/, Accessed on 2019.
[15] Standards for the Cosmos network & Interchain Ecosystem. https://github.com/
cosmos/ics, Accessed on 2019.
[16] Substrate. https://github.com/paritytech/substrate, Accessed on 2019.
[17] Tendermint Core. https://tendermint.com, Accessed on 2019.
[18] Tor Directory Authorities. https://metrics.torproject.org/rs.html#search/flag:
authority, Accessed on 2019.
[19] Vyper. https://github.com/ethereum/vyper, Accessed on 2019.
[20] Al-Bassam, M., Sonnino, A., Bano, S., Hrycyszyn, D., and Danezis, G.
Chainspace: A Sharded Smart Contracts Platform. NDSS (2017).
[21] Back, A., Corallo, M., Dashjr, L., Friedenbach, M., Maxwell, G., Miller, A.,
Poelstra, A., Timón, J., and Wuille, P. Enabling Blockchain Innovations with
Pegged Sidechains. URL: tinyurl. com/mj656p7 (2014).
[22] Blackshear, S., Cheng, E., Dill, D. L., Gao, V., Maurer, B., Nowacki, T., Pott,
A., Qadeer, S., Rain, Russi, D., Sezer, S., Zakian, T., and Zhou, R. Move: A
language with programmable resources. Tech. rep., The Libra Association, 2019.
[23] Borders, K., Springer, J., and Burnside, M. Chimera: A Declarative Language
for Streaming Network Traffic Analysis. In USENIX Security Symposium (2012).
[24] Breidenbach, L., Cornell Tech, I., Daian, P., Tramer, F., and Juels, A. Enter the
Hydra: Towards Principled Bug Bounties and Exploit-Resistant Smart Contracts.
In 27th USENIX Security Symposium (2018).
[25] Bünz, B., Bootle, J., Boneh, D., Poelstra, A., Wuille, P., and Maxwell, G.
Bulletproofs: Short proofs for Confidential Transactions and More. In 2018 IEEE
Symposium on Security and Privacy (SP) (2018), IEEE, pp. 315–334.
[26] Buterin, V. Chain Interoperability. R3 Reports (2016).
[27] Buterin, V., et al. A Next-Generation Smart Contract and Decentralized Appli-
cation Platform. white paper (2014).
[28] Canetti, R. Universally Composable Security: A New Paradigm for Crypto-
graphic Protocols. In IEEE Symposium on Foundations of Computer Science (2001).
[29] Cheng, R., Zhang, F., Kos, J., He, W., Hynes, N., Johnson, N. M., Juels, A.,
Miller, A., and Song, D. Ekiden: A Platform for Confidentiality-Preserving,
Trustworthy, and Performant Smart Contract Execution. In IEEE EuroS&P (2019).
[30] Costan, V., and Devadas, S. Intel SGX explained, Accessed on 2019. https:
//eprint.iacr.org/2016/086.pdf.
[31] Dingledine, R., Mathewson, N., and Syverson, P. Tor: The Second-Generation
[32] Eyal, I., Gencer, A. E., Sirer, E. G., and Van Renesse, R. Bitcoin-NG: A Scalable
Onion Router. In USENIX Security Symposium (2004).
Blockchain Protocol. In USENIX NSDI (2016).
[33] Gao, P., Xiao, X., Li, D., Li, Z., Jee, K., Wu, Z., Kim, C. H., Kulkarni, S. R., and
Mittal, P. SAQL: A Stream-based Query System for Real-time Abnormal System
Behavior Detection. In USENIX Security Symposium (2018).
[34] Gao, P., Xiao, X., Li, Z., Jee, K., Xu, F., Kulkarni, S. R., and Mittal, P. AIQL:
Enabling Efficient Attack Investigation from System Monitoring Data. In USENIX
ATC (2018).
[35] Garay, J., Kiayias, A., and Leonardos, N. The Bitcoin Backbone Protocol with
Chains of Variable Difficulty.
In Annual International Cryptology Conference
(2017).
In IEEE
[37] Green, M., and Miers, I. Bolt: Anonymous Payment Channels for Decentralized
[36] Gazi, P., Kiayias, A., and Zindros, D. Proof-of-stake Sidechains.
Symposium on Security & Privacy (2019).
Currencies. In ACM CCS (2017).
[38] Herlihy, M. Atomic Cross-Chain Swaps. In ACM PODC (2018).
[39] Kalodner, H., Goldfeder, S., Chen, X., Weinberg, S. M., and Felten, E. W.
Arbitrum: Scalable, Private Smart Contracts. In USENIX Security Symposium
(2018).
[40] Khalil, R., and Gervais, A. Revive: Rebalancing Off-blockchain Payment Net-
[41] Kiayias, A., and Zindros, D. Proof-of-work Sidechains. Tech. rep., Cryptology
works. In ACM CCS (2017).
ePrint Archive, Report 2018/1048, 2018.
[42] Killian, C. E., Anderson, J. W., Braud, R., Jhala, R., and Vahdat, A. M. Mace:
[46] Krupp, J., and Rossow, C.
teEther: Gnawing at Ethereum to Automatically
[47] Lamport, L. Time, Clocks, and the Ordering of Events in a Distributed System.
Language support for building distributed systems. In ACM PLDI (2007).
[43] Kogias, E. K., Jovanovic, P., Gailly, N., Khoffi, I., Gasser, L., and Ford, B. En-
hancing Bitcoin Security and Performance with Strong Consistency via Collective
Signing. In USENIX Security Symposium (2016).
[44] Kokoris-Kogias, E., Jovanovic, P., Gasser, L., Gailly, N., Syta, E., and Ford, B.
OmniLedger: A Secure, Scale-out, Decentralized Ledger via Sharding. In IEEE
Symposium on Security and Privacy (2018).
[45] Kosba, A., Miller, A., Shi, E., Wen, Z., and Papamanthou, C. Hawk: The
Blockchain Model of Cryptography and Privacy-preserving Smart Contracts. In
IEEE Symposium on Security and Privacy (2016).
Exploit Smart Contracts. In USENIX Security Symposium (2018).
Communications of the ACM (1978).
Framework for Architecting TEEs. arXiv preprint arXiv:1907.10119 (2019).
[49] Loo, B. T., Condie, T., Garofalakis, M., Gay, D. E., Hellerstein, J. M., Maniatis,
P., Ramakrishnan, R., Roscoe, T., and Stoica, I. Declarative networking:
Language, execution and optimization. In SIGMOD (2006).
Contracts Smarter. In ACM CCS (2016).
Secure Sharding Protocol for Open Blockchains. In ACM CCS (2016).
currency and Privacy with Payment-channel Networks. In ACM CCS (2017).
org/bitcoin.pdf, 2008.
[52] Malavolta, G., Moreno-Sanchez, P., Kate, A., Maffei, M., and Ravi, S. Con-
[53] Nakamoto, S. Bitcoin: A Peer-to-Peer Electronic Cash System. https://bitcoin.
[51] Luu, L., Narayanan, V., Zheng, C., Baweja, K., Gilbert, S., and Saxena, P. A
[48] Lee, D., Kohlbrenner, D., Shinde, S., Song, D., and Asanović, K. Keystone: A
[50] Luu, L., Chu, D.-H., Olickel, H., Saxena, P., and Hobor, A. Making Smart
[54] Parr, T. Antlr. https://www.antlr.org/, 2014.
[55] Sergey, I., and Hobor, A. A Concurrent Perspective on Smart Contracts. In
Financial Cryptography and Data Security (2017).
[56] Sommer, R., Vallentin, M., De Carli, L., and Paxson, V. Hilti: An abstract
execution environment for deep, stateful network traffic analysis. In IMC (2014).
[57] Vallentin, M., Paxson, V., and Sommer, R. VAST: A Unified Platform for
Interactive Network Forensics. In USENIX NSDI (2016).
2013.
[58] Van Saberhagen, N. CryptoNote v 2.0. https://cryptonote.org/whitepaper.pdf,
[59] Wood, G. Ethereum: A secure decentralised generalised transaction ledger.
[60] Zamani, M., Movahedi, M., and Raykova, M. RapidChain: Scaling Blockchain
Ethereum Project Yellow Paper (2014).
via Full Sharding. In ACM CCS (2018).
[61] Zamyatin, A., Harz, D., Lind, J., Panayiotou, P., Gervais, A., and Knottenbelt,
W. XCLAIM: Trustless, Interoperable, Cryptocurrency-Backed Assets. In IEEE
Symposium on Security and Privacy (2019).
[62] Zhang, F., Cecchetti, E., Croman, K., Juels, A., and Shi, E. Town Crier: An
Authenticated Data Feed for Smart Contracts. In ACM CCS (2016).