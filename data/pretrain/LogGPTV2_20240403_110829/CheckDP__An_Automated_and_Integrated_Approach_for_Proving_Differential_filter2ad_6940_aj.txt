5
6
7
8
9
10
11
out := false :: out ;
i := i + 1;
returns (out)
function Transformed BadSVT2 (T,N,size,q,(cid:98)q, sample, θ)
vϵ := vϵ + |A1| × ϵ/2; (cid:98)η1 := A1;
16 (cid:99)Tη := (cid:98)η1;
vϵ := 0; idx = 0;
η1 := sample[idx]; idx := idx + 1;
Tη := T + η1 ;
15
12
13
14
17
18
19
20
21
22
23
24
25
26
27
28
29
count := 0; i := 0;
while (i < size )
η2 := sample[idx]; idx := idx + 1;
if (q[i] + η2 ≥ Tη ) then
vϵ := vϵ + |A2| × ϵ/2; (cid:98)η2 := A2;
assert(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 ≥ Tη + (cid:99)Tη );
assert(¬(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 ≥ Tη + (cid:99)Tη ));
out := true :: out ;
count := count + 1;
else
out := false :: out ;
i := i + 1;
assert(vϵ ≤ ϵ );
Figure 14: BadSVT3 and its transformed code, where under-
lined parts are added by CheckDP. The transformed code
contains two alignment templates for η1 and η2: A1 = θ[0]
and A2 = (q[i] + η2 ≥ Tη) ? (θ[1] + θ[2] ×(cid:98)Tη + θ[3] ×(cid:98)q[i]) :
(θ[4] + θ[5] × Tη + θ[6] ×(cid:98)q[i]).
Figure 13: BadSVT2 and its transformed code, where under-
lined parts are added by CheckDP. The transformed code
contains two alignment templates for η1 and η2: A1 = θ[0]
and A2 = (q[i] + η2 ≥ Tη) ? (θ[1] + θ[2] ×(cid:98)Tη + θ[3] ×(cid:98)q[i]) :
(θ[4] + θ[5] × Tη + θ[6] ×(cid:98)q[i]).
21
η1 := Lap (2/ϵ);
Tη := T + η1 ;
count := 0; i := 0;
while ( count < N)
η2 := Lap (4N/ϵ);
if (q[i] + η2 ≥ Tη ) then
out :=
(q[i] + η2) :: out ;
count := count + 1;
else
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
out := 0:: out ;
i := i + 1;
Tη := T + η1 ;
returns (out)
vϵ := 0; idx = 0;
η1 := sample[idx]; idx := idx + 1;
function Transformed BadGapSVT (T,N,size,q,(cid:98)q, sample, θ)
vϵ := vϵ + |A1| × ϵ/2; (cid:98)η1 := A1;
16 (cid:99)Tη := (cid:98)η1;
vϵ := vϵ + |A2| × ϵ/4N ; (cid:98)η2 := A2;
assert(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 ≥ Tη + (cid:99)Tη );
assert((cid:98)q[i] + (cid:98)η2 = 0);
assert(¬(q[i] + η2 +(cid:98)q[i] + (cid:98)η2 ≥ Tη + (cid:99)Tη ));
count := 0; i := 0;
while ( count < N ∧ i < size )
η2 := sample[idx]; idx := idx + 1;
if (q[i] + η2 ≥ Tη ) then
out := (q[i] + η2 ):: out ;
count := count + 1;
else
17
18
19
24
25
26
20
21
22
23
27
28
29
30
out := 0:: out ;
i := i + 1;
assert(vϵ ≤ ϵ );
Figure 15: BadGapSVT and its transformed code. The trans-
formed code contains two alignment templates for η1 and η2:
A1 = θ[0] and A2 = (q[i] + η2[i] ≥ Tη) ? (θ[1] + θ[2] ×(cid:98)Tη +
θ[3]×(cid:98)q[i]):(θ[4]+θ[5]×Tη +θ[6]×(cid:98)q[i]). Note that the random
variables and θ are inserted as part of the function input.
D.3 Partial Sum
Next, we study a simple algorithm PartialSum (Figure 16) which
outputs the sum of queries in a privacy-preserving manner: it di-
rectly computes sum of all queries and adds a Lap 1/ϵ to the final
output sum. Note that similar to SmartSum, it has the same adja-
cency requirement (only one query can differ by at most one). The
alignment is easily found for η by CheckDP which is to “cancel
out” the distance of sum variable (i.e., -(cid:100)sum). With the alignment
CPAChecker verifies this algorithm.
An incorrect variant for PartialSum called BadPartialSum is cre-
ated where Line 5 is changed from 1/ϵ to 1/(2×ϵ), therefore making
it fail to satisfy ϵ-differential privacy (though it actually satisfies
2ϵ-differential privacy). A counterexample [0, 0, 0, 0, 0],[0, 0, 0, 0, 1]
is found by CheckDP and further validated by PSI.
function BadGapSVT (size,T,N : num0 , q : list num∗ )
returns (out : list num0 ), check(ϵ)
precondition ∀ i. −1 ≤(cid:98)q[i] ≤ 1
function PartialSum (size : num0 , q : list num∗ )
returns (out : num0 ), check(ϵ)
precondition ∀i. −1 ≤(cid:98)q[i]≤ 1∧(∀i. ((cid:98)q[i](cid:44) 0) ⇒ (∀j.(cid:98)q[j] = 0))
1
2
3
4
5
6
sum := 0; i := 0;
while (i < size )
sum := sum + q[i ];
i := i + 1;
η = Lap (1/ϵ);
out := sum + η ;
8
9
10
11
7
sum := sum + q[i ];
returns (out)
sum := 0; i := 0;
while (i < size )
function Transformed PartialSum (size,q,(cid:98)q, sample, θ)
vϵ := 0; (cid:99)sum := 0;
(cid:99)sum := (cid:99)sum +(cid:98)q[i];
vϵ := vϵ + |A| × ϵ ;(cid:98)η := θ ;
assert((cid:99)sum +(cid:98)η);
CheckDP, where A = θ[0] + θ[1] ×(cid:100)sum + θ[2] ×(cid:98)q[i].
Figure 16: PartialSum and its
out := sum + η ;
assert(vϵ ≤ ϵ );
i := i + 1;
12
13
15
16
14
transformation using
prefix sum: q[0], q[0] + q[1], · · · ,T
component of the prefix sum sequencek
D.4 SmartSum and BadSmartSum
SmartSum [19] continually releases aggregated statistics with pri-
vacy protections. For a finite sequence of queries q[0], q[1], · · · , q[T],
where T is the length of q, the goal of SmartSum is to release the
i =0 q[i] in a private way. To
achieve differential privacy, SmartSum first divides the sequence
into non-overlapping blocks B0, · · · , Bl with size M, then maintains
the noisy version of each query and noisy version of the block sum,
both by directly adding Lap 1/ϵ noise. Then to compute the k
th
i =0 q[i], it only has to add
up the noisy block sum that covers before k, plus the remaining
(k + 1) mod M noisy queries. The pseudo code is shown in Figure 17.
The if branch is responsible for dividing the queries and summing
up the block sums (stored in sum variable), where else branch adds
the remaining noisy queries.
Notably, SmartSum satisfies 2ϵ-differential privacy instead of
ϵ-differential privacy. Moreover, the adjacency requirement of the
inputs is that only one of the queries can differ by at most one.
These two requirements are specified in the function signature
(check(2ϵ) and precondition).
An incorrect variant of SmartSum, called BadSmartSum, is ob-
tained by changing Line 4 to η1 :=0 in Figure 17. It directly releases
sum + q[i] without adding any noise (since η1 = 0), where sum
stores the accurate, non-noisy sum of queries (at Line 11), hence
breaking differential privacy. Interestingly, the violation only hap-
pens in a rare branch if ((i + 1) mod M = 0), where the
accurate sum is added to the output list out. In other words, out
contains mostly private data with only a few exceptions. This rare
event makes it challenging for sampling-based tools to find the
violation.
22
function SmartSum (M,T,size : num0 , q : list num∗ )
returns (out : list num0 ), check(2ϵ)
precondition ∀i. −1 ≤(cid:98)q[i]≤ 1∧(∀i. ((cid:98)q[i](cid:44) 0) ⇒ (∀j.(cid:98)q[j] = 0))
next := 0; i := 0; sum := 0;
while (i < size ∧ i ≤ T)
if (( i + 1) mod M = 0) then
η1 := Lap (1/ϵ);
next := sum + q[i] + η1 ;
sum := 0;
out := next :: out ;
η2 := Lap (1/ϵ);
next := next + q[i] + η2 ;
sum := sum + q[i ];
out := next :: out ;
else
1
2
3
4
5
6
7
8
9
10
11
12
17
18
19
23
24
25
26
27
28
32
33
34
35
36
37
13
i := i + 1;
returns (out)
function Transformed SmartSum (M,T,size,q,(cid:98)q, sample, θ)
16 (cid:100)sum := 0; next := 0;
vϵ := 0; idx := 0;
next := 0; i := 0; sum := 0;
while (i < size ∧ i ≤ T)
14
15
20
22 next := (cid:100)sum +(cid:98)q[i] + (cid:98)η1;
21
if (( i + 1) mod M = 0) then
η1 := sample[idx]; idx := idx + 1;
sum := 0;
next := sum + q[i] + η1 ;
vϵ := vϵ + |A1| × ϵ ; (cid:98)η1 := A1;
(cid:100)sum := 0;
assert(next = 0);
vϵ := vϵ + |A2| × ϵ ; (cid:98)η2 := A2;
(cid:100)sum := (cid:100)sum +(cid:98)q[i];
assert(next = 0);
next := next + q[i] + η2 ;
sum := sum + q[i ];
out := next :: out ;
η2 := sample[idx]; idx := idx + 1;
else
29
31 next := next +(cid:98)q[i] + (cid:98)η2;
30
out := next :: out ;
i := i + 1;
assert(vϵ ≤ 2ϵ );
Figure 17: SmartSum and its transformed code. Underlined
parts are added by CheckDP. A1 = θ[0] + θ[1] ×(cid:100)sum + θ[2] ×
(cid:98)q[i] + θ[3] ×next and A2 = θ[4] + θ[5] ×(cid:100)sum + θ[6] ×(cid:98)q[i] +
θ[7] ×next.
23