3. Let K (j) = {k(j)
mation on transactions sent from A, and similarly
for B1, B2.)
If none of the data requested is batch-shared, then
skip to step 6. Otherwise, let f (1), . . . , f (w) denote
all the batch-sharings that contain requested data.
} denote the locations in
batch f (j) that correspond to U ’s data, and let g(j)
denote the canonical sharing of the batch with ones
in locations K (j) and zeros elsewhere.
1 , . . . , k(j)
mj
4. The servers invoke ZeroB w times to generate poly-
nomials r(1), . . . , r(w) and locally compute their
shares of h(j) = g(j) + r(j) for each j = 1, . . . , w.
5. The servers invoke MultB to multiply each pair
for j =
resulting in sharings s(j)
(f (j), h(j)),
1, . . . , w.
6. The servers send their shares of all the requested se-
cret sharings to U , along with their shares of each
s(j) if any batch-shared data was requested. Addi-
tionally, the servers send U the associated transac-
tion meta-data and the current transaction counter
in the balance ledger entry for A.
3.6 Accountability Protocols
One of the advantages of secret sharing the identity of
the users is to prevent accidental or malicious loss of coins.
This is a considerable problem with deployed schemes such
as Bitcoin as they exist today. Bitcoin users often loose their
private keys, and hence their coins. There have been several
bitcoin thefts, in one case totaling $1.2 million [35]. Even
though the addresses to which the stolen coins are sent are
often public knowledge, there is no means by which to return
the coins to the victim or at least freeze the suspect address
until the issue is resolved [25]. In theory, addresses could be
frozen and transactions reversed in decentralized schemes,
but this would require coordination among a decentralized
group of ledger operators who have disparate interests and
frequently operate anonymously. Each of the above prob-
lems can be easily addressed in PDC. We brie(cid:13)y describe
solutions to these problems in this section (see the full ver-
sion [23] for more details).
3.6.1 Address Freezing and De-anonymization
Suppose that some law enforcement or investigative entity,
R, has reason to believe that a particular address, A, is
associated with criminal or illegal activity. So long as more
than 2t Ledger Servers agree that the address is suspect,
the secret-shared identity can be revealed, and the Ledger
Servers can refuse to process further transactions from/to
that address. This provides some level of privacy guarantee
to the user, in that the user knows her address cannot be
de-anonymized unless there is some consensus.
The protocol for freezing operates as follows: Each Ledger
Server that receives a properly signed message of the form
(freeze, nonce, A, E) from R examines the evidence, E, and
determines whether or not the address, A should be frozen
and de-anonymized. Each Ledger Server that agrees to coop-
erate with R its share of the identity to R. If R receives more
than 2t shares, R interpolates the identity D(0) of the user
associated with address A. Each Ledger Server that decides
that address A is suspect will ignore any further transaction
requests that send coins to or from that address.
83.6.2 Lost Coin Retrieval
Since the private key associated with an address is used
to sign all messages sent to the Ledger Servers, loosing the
private key is tantamount to loosing the coins stored in the
address, as the coins can no longer be accessed. Loss of pri-
vate keys has been a persistent problem for Bitcoin users, as
there is no way to retrieve such lost coins. Because the user’s
identity is linked to the address in PDC, one can retrieve lost
coins.
Suppose the user has lost the private key for address L
and wants to send the coins in L to a new address A. She
constructs a degree t polynomial Q that is uniformly ran-
dom subject to the constraint that Q(0) = ID, where ID is
her identity. The user sends (ret_coins, nonce, L, A, Q(i))
signed by the identity veri(cid:12)cation server, IV S, to Si for each
i = 1, . . . , n. The Ledger Servers verify IV S’ signature then
subtract the sharing Q provided by the user from the shar-
ing of the identity in the balance ledger entry for L. This
sharing is then multiplied by a random number, and the
product is publicly opened. If the opened value is zero, this
means that the identity provided by the user is the same
as the secret-shared identity stored in the balance ledger, so
the Ledger Servers transfer the coins in L to A as requested.
3.7 Ledger Server Loop
The main protocol run by the Ledger Servers continues in
an inde(cid:12)nite loop, since we assume the currency will exist
for a long time. The core of the PDC scheme is the collection
of data into blocks and the broadcasting of those blocks to
the other servers. Di(cid:11)erent actions are taken according to
what is found in those blocks. The servers are loosely syn-
chronized so as to broadcast their blocks at approximately
the same time. We refer to these points in time as broad-
cast points. We refer to the block broadcast by server Si at
broadcast point T as B(T )
.
Each message received by the Ledger Servers consists of
a header and a collection of shares (although the collection
of shares may be empty). These parts are denoted [header]
and [shares], respectively. (For example, the [header] part
of the message mi sent in Initialize AddressU is (nonce, A, V )
and the [shares] part is (f (i), g(i))). Each header contains
a nonce, and each nonce contains a time-stamp. Recall from
Section 3.4.2 that the Ledger Servers assume that the delay
for transmission from the user is less than M . A time-stamp
is considered out of date if it varies from the Ledger Server’s
clock by at least M .
i
Ledger Server Si performs the following steps:
Ledger Server Loop
1. Set T = 1.
2. Set B(T )
i = ∅. If T ≥ 2, add all messages in B(T−1)
i
that were not in B(T−2)
i
to B(T )
.
i
3. Collect all properly formed and signed messages re-
ceived from users, adding them to the set B(T )
as
they are received. Messages that are out of date,
messages that are duplicates of messages already in
B(T )
, and tx messages with incorrect transaction
counters are deleted. (Duplicates are de(cid:12)ned to be
messages with the same nonce, init_addr messages
with the same address, or tx messages with the same
sending address.)
i
i
i
7.
6.
5.
4. When the broadcast point T is reached (at time T ·
M ), broadcast the headers of all messages in B(T )
.
If some [header] is broadcast by at least n−t Ledger
Servers, and if this is the second broadcast contain-
ing messages with that header, then one of steps 6
through 8 is performed:
If [header] = (init_addr, nonce, A, V ), and if the
address A does not already exist in the balance
ledger, then run Initialize AddressS with A, V as pub-
lic input and Si using the [shares] = (vi, wi) portion
of its message as private input.
If [header] = (tx, nonce, A1, A2, j), and if the ad-
dresses A1, A2 already exist in the balance ledger,
then run TransferS with A1, A2, j as public input
and Si using the [shares] = (v(γ−1)
) por-
tion of its message as private input.
If [header] = (check_bal, nonce, A, j1, j2, B1, B2),
and if
in the
then run Check BalanceS with
balance ledger,
A, j1, j2, B1, B2 as public input. (Here, [shares] =
∅.)
If there are m ≥ ℓ secret sharings in the transaction
ledger, the Ledger Servers run Convert Sharings on
the (cid:12)rst ⌊m/ℓ⌋ℓ of these sharings.
the address A already exists
, . . . , v(0)
9.
8.
i
i
10. Set T ← T + 1.
11. Jump to step 2.
Note that we have not added the protocol Refresh Ledger
to the main loop. It could either be added between steps 10
and 11 in the main loop, or the Ledger Servers could run
a separate loop in parallel with the main loop, constantly
refreshing shared data.
3.8 Security Analysis
The PDC protocols described in this paper build upon
protocols from the MPC literature (listed in Section 3.2)
that are already proven secure in the Universal Composabil-
ity (UC) framework in their respective papers, so security
of our protocols can be proven using the UC composition
theorem [17]. Since the share conversion protocol, Con-
vert Sharings, is one of the main technical contribution of
this paper, we provide its functionality, simulator, and se-
curity proof in Appendix A. We sketch a proof of security
for the entire PDC scheme in Appendix B. (Due to space
constraints, we cannot provide a full security analysis and
proof for each protocol in this version of the paper. Such
details will be provided in the full version [23])
4.
INCREASING ANONYMITY GUARAN-
TEES AND CORRUPTION THRESHOLD
Increasing Anonymity Guarantees: PDC can be made
strictly anonymous, without the user ever revealing her iden-
tity to anyone. The Identity Veri(cid:12)cation Server can be elim-
inated entirely, and the addition of an address to the balance
ledger can be performed in essentially the same way as Bit-
coin: The user generates a private key and corresponding
public key as an address, and the Ledger Servers add this
address to the balance ledger the (cid:12)rst time that a user sends
value to it. Note that lost coins cannot be restored using the
protocol above in this case.
9Anonymizing Tra(cid:14)c: We sketch a protocol allowing a
group of k users to transfer funds from k addresses to k
addresses without any Ledger Server learning which input
address maps to which output address.
Let k be some power of 2. Then k users will send transfer
requests to the Ledger Servers as speci(cid:12)ed in the Transfer
protocol, except that the receiving address will be secret-
shared. The transfer values will be subtracted from the
sending addresses. Then each Ledger Server in turn will
apply a permutation (unknown to the other Ledger Servers)
to the secret-shared transfer values, and apply the same per-
mutation to the secret-shared receiving addresses. This pre-
vents any one Ledger Server from mapping input to output
address.
A secret permutation is applied by server Sq as follows:
Sq picks a random permutation π, and the Ledger Servers
invoke PermuteLayer from the full version of [4] (found in
refrence [2] in that paper) twice with the same permutation,
once the sharings of the transfer values, and once on the
sharings of the receiving addresses. Since the batch size ℓ in
this case is 1, the only subprotocol used will be PermuteBe-
tweenBlocks. Since the permutation is not publicly known,
the Ledger Servers do not known their shares of fI and fI
without input from Sq. So Sq generates polynomials fI and
fI as needed. The Ledger Servers need to prove that one
of these polynomials stores a zero and the other stores a
one. They do this by opening the sum of the sharings and
checking that it is one, and by invoking a secure multiplica-
tion protocol on the sharings and verifying that the product
is zero. The same polynomials fI and fI will be used for
both invocations of PermuteLayer to ensure that the same
permutation is used.
Once the permutation is completed, the receiving addresses
are publicly opened. Then the (permuted) transfer values
are added to the receiving addresses.
Increasing the Corruption Threshold: Although our PDC
scheme assumes signatures, the underlying protocols that
manipulate secret sharings make no computational assump-
tions. Hence the threshold is t < (1/3 − ϵ)n, which is near
optimal for information theoretic protocols. The threshold
can be raised to t < (1/2 − ϵ)n if some computational as-
sumptions are made. For instance, instead of using \stan-
dard" secret sharing, the modi(cid:12)ed PDC could use Pedersen’s
scheme [39], which uses commitments based on the discrete
logarithm assumption. Modifying the PDC sub-protocols to
use Pedersen commitments is fairly straightforward.
5. ACKNOWLEDGEMENTS
We thank the anonymous reviewers for their helpful com-
ments and our shepherd Abhishek Jain for his suggestions
on how to address them. We also thank Joshua Baron,
Jonathan Katz and Gene Tsudik for insightful discussions
about digital currency and MPC.
6. REFERENCES
[1] Litecoin, 2013. https://litecoin.org/.
[2] Primecoin: Cryptocurrency with prime number
proof-of-work, 2013. http:
//primecoin.org/static/primecoin-paper.pdf.
[4] Joshua Baron, Karim El Defrawy, Joshua Lampkins,
and Rafail Ostrovsky. How to withstand mobile virus
attacks, revisited. In Proceedings of the 2014 ACM
Symposium on Principles of Distributed Computing,
PODC ’14, pages 293{302, New York, NY, USA, 2014.
ACM.
[5] Elwyn R. Berlekamp. Algebraic Coding Theory.
Aegean Park Press, 1984.
[6] Ernest F. Brickell, Peter Gemmell, and David W.
Kravitz. Trustee-based tracing extensions to
anonymous cash and the making of anonymous
change. In SODA, pages 457{466, 1995.
[7] J. Camenisch, A. Lysyanskaya, and M. Meyerovich.
Endorsed e-cash. In Security and Privacy, 2007. SP
’07. IEEE Symposium on, pages 101{115, 2007.
[8] Jan Camenisch. Group signature schemes and
payment systems based on the discrete logarithm
problem, 1998.
[9] Jan Camenisch, Susan Hohenberger, and Anna
Lysyanskaya. Compact e-cash. In EUROCRYPT 2005,
pages 302{321. 2005.
[10] Jan Camenisch, Susan Hohenberger, and Anna
Lysyanskaya. Balancing accountability and privacy
using e-cash. In Security and Cryptography for
Networks, pages 141{155. 2006.
[11] Jan Camenisch, Ueli M. Maurer, and Markus Stadler.
Digital payment systems with passive
anonymity-revoking trustees. In ESORICS, pages
33{43, 1996.
[12] Jan Camenisch, Ueli M. Maurer, and Markus Stadler.
Digital payment systems with passive
anonymity-revoking trustees. Journal of Computer
Security, 5(1):69{90, 1997.
[13] Jan Camenisch, Jean-Marc Piveteau, and Markus
Stadler. An e(cid:14)cient fair payment system. In ACM
Conference on Computer and Communications
Security, pages 88{94, 1996.
[14] Jan Camenisch and Markus Stadler. E(cid:14)cient group
signature schemes for large groups. In Jr. Kaliski,
BurtonS., editor, Advances in Cryptology CRYPTO
’97, volume 1294 of Lecture Notes in Computer
Science, pages 410{424. Springer Berlin Heidelberg,
1997.
[15] R. Canetti. Universally composable signature,
certi(cid:12)cation, and authentication. In Computer
Security Foundations Workshop, 2004. Proceedings.
17th IEEE, pages 219{233, June 2004.
[16] Ran Canetti. Security and composition of multiparty
cryptographic protocols. Journal of Cryptology,
13(1):143{202, 2000.
[17] Ran Canetti. Universally composable security: A new
paradigm for cryptographic protocols. IACR
Cryptology ePrint Archive, 2000:67, 2000.
[18] David Chaum. Blind signatures for untraceable
payments. In CRYPTO, pages 199{203, 1982.
[19] David Chaum, Amos Fiat, and Moni Naor.
Untraceable electronic cash. In CRYPTO, pages
319{327, 1988.
[3] Giuseppe Ateniese, Antonio Faonio, Bernardo Magri,
[20] Ivan Damg(cid:23)ard, Matthias Fitzi, Eike Kiltz,
and Breno de Medeiros. Certi(cid:12)ed bitcoins. Cryptology
ePrint Archive, Report 2014/076, 2014.
http://eprint.iacr.org/.
Jesper Buus Nielsen, and Tomas Toft. Unconditionally
secure constant-rounds multi-party computation for
10equality, comparison, bits and exponentiation. In
TCC, pages 285{304, 2006.
[21] Ivan Damg(cid:23)ard and Jesper Buus Nielsen. Scalable and
unconditionally secure multiparty computation. In
CRYPTO, pages 572{590, 2007.
[22] Ivan Damg(cid:23)ard, Yuval Ishai, and Mikkel Kr(cid:28)igaard.
Perfectly secure multiparty computation and the
computational overhead of cryptography. In Henri
Gilbert, editor, Advances in Cryptology
EUROCRYPT 2010, volume 6110 of Lecture Notes in
Computer Science, pages 445{465. Springer Berlin
Heidelberg, 2010.