# Space-Partitioning Trees in PostgreSQL: Realization and Performance

**Authors:**
Mohamed Y. Eltabakh, Ramy Eltarras, Walid G. Aref  
Computer Science Department, Purdue University  
{meltabak, rhassan, aref}@cs.purdue.edu

## Abstract
Many evolving database applications require non-traditional indexing mechanisms beyond B+-trees and hash tables. SP-GiST is an extensible indexing framework that broadens the class of supported indexes to include disk-based versions of a wide variety of space-partitioning trees, such as tries, quadtrees, and kd-trees. This paper presents a comprehensive effort to implement and realize SP-GiST-based indexes within PostgreSQL. The study addresses challenges, experiences, and performance issues. Performance comparisons are conducted within PostgreSQL to evaluate the update and search performances of SP-GiST-based indexes against B+-tree and R-tree for string, point, and line segment datasets. The results highlight the potential performance gains of SP-GiST-based indexes.

## 1. Introduction
Emerging database applications necessitate the use of non-traditional indexing mechanisms beyond B+-trees and hash tables. Database vendors have recognized this need and initiated efforts to support various non-traditional indexes, such as those in Oracle and IBM DB2.

A major challenge in implementing non-traditional indexes within a database engine is the wide variety of such indexes and the significant overhead associated with their realization and integration. Generalized search trees (e.g., GiST) and Space-Partitioning Generalized Search Trees (SP-GiST) are designed to address these issues. GiST supports the class of balanced trees (B+-tree-like trees), while SP-GiST supports the class of space-partitioning trees.

The contributions of this paper are:
1. We implemented SP-GiST within PostgreSQL to extend available access methods to include space-partitioning trees, making it portable without recompiling PostgreSQL.
2. We extended index operations in SP-GiST to include prefix and regular expression matching, and a generic incremental nearest-neighbor (NN) search for SP-GiST-based indexes.
3. We conducted extensive experiments within PostgreSQL to compare the performance of SP-GiST indexes against B+-tree and R-tree. Our results show that a disk-based SP-GiST trie performs more than two orders of magnitude better than the B+-tree for regular expression match searches, and a disk-based SP-GiST kd-tree performs over 300% better than an R-tree for point match searches.
4. We realized a disk-based suffix tree index using SP-GiST to support substring match searching. Our experiments demonstrate that the suffix tree performs more than three orders of magnitude better than existing techniques.
5. We made the PostgreSQL version of SP-GiST available for public access and download at: www.cs.purdue.edu/spgist.

## 2. Related Work
Multidimensional searching is fundamental for many database applications. Several index structures beyond B-trees and hash tables have been proposed for multidimensional data, including R-trees, quadtrees, kd-trees, and tries. Extensible indexing frameworks, such as GiST and SP-GiST, have been proposed to instantiate a variety of index structures efficiently without modifying the database engine.

## 3. Space-Partitioning Trees: Overview, Challenges, and SP-GiST
Space-partitioning trees partition multi-dimensional space into disjoint (non-overlapping) regions. Partitioning can be either space-driven or data-driven. There are many types of space-partitioning trees, each differing in various ways. Key characteristics include:

- **Path Shrinking**: Avoiding lengthy and skinny paths from root to leaf by collapsing single child nodes.
- **Node Shrinking**: Omitting empty partitions in space-driven partitions.
- **Clustering**: Efficiently packing tree nodes into disk pages to reduce I/O operations.

To handle the differences among various SP-GiST-based indexes, SP-GiST provides a set of interface parameters and external method interfaces. These include:

- **NodePredicate**: Specifies the predicate type at index nodes.
- **KeyType**: Specifies the data type stored at leaf nodes.
- **NumberofSpacePartitions**: Specifies the number of disjoint partitions produced at each decomposition.
- **Resolution**: Limits the number of space decompositions based on required granularity.
- **PathShrink**: Specifies how the index tree can shrink (NeverShrink, LeafShrink, TreeShrink).
- **NodeShrink**: Boolean parameter specifying whether empty partitions should be kept.
- **BucketSize**: Specifies the maximum number of data items a data node can hold.

For example, to instantiate the trie variants in Figure 1, we set PathShrink to NeverShrink, LeafShrink, and TreeShrink, respectively. For the quadtree and kd-tree in Figures 3, NoOfSpacePartitions is set to 4 and 2, respectively.

SP-GiST external methods include PickSplit() to specify how the space is decomposed and how data items are distributed over new partitions. PickSplit() is invoked by the internal method Insert() when a node needs to be split.

## 4. Implementation of SP-GiST in PostgreSQL
This section describes the implementation of SP-GiST within PostgreSQL, detailing the steps and considerations involved in integrating the framework.

## 5. Nearest-Neighbor Search Functionality for SP-GiST
We extended the SP-GiST framework to include a nearest-neighbor (NN) search algorithm, enhancing its functionality and performance for specific use cases.

## 6. Performance Results
We present the performance results of a disk-based SP-GiST trie versus the B+-tree for string datasets, and a disk-based SP-GiST kd-tree and PMR quadtree versus the R-tree for two-dimensional point and line segment datasets, respectively.

## 7. Concluding Remarks
In conclusion, this paper demonstrates the feasibility and performance benefits of SP-GiST-based indexes within PostgreSQL. The results highlight significant performance gains and advanced search functionalities provided by SP-GiST, making it a valuable addition to the database indexing toolkit.

---

This revised text is more structured, coherent, and professional, providing a clear and detailed overview of the research and its contributions.