title:SPIDER: stealthy binary program instrumentation and debugging via
hardware virtualization
author:Zhui Deng and
Xiangyu Zhang and
Dongyan Xu
SPIDER: Stealthy Binary Program Instrumentation and
Debugging Via Hardware Virtualization
Department of Computer Science and CERIAS, Purdue University, West Lafayette, IN 47907
Zhui Deng, Xiangyu Zhang and Dongyan Xu
{deng14, xyzhang, dxu}@cs.purdue.edu
ABSTRACT
The ability to trap the execution of a binary program at de-
sired instructions is essential in many security scenarios such
as malware analysis and attack provenance. However, an in-
creasing percent of both malicious and legitimate programs
are equipped with anti-debugging and anti-instrumentation
techniques, which render existing debuggers and instrumen-
In this paper, we present Spi-
tation tools inadequate.
der, a stealthy program instrumentation framework which
enables transparent, eﬃcient and ﬂexible instruction-level
trapping based on hardware virtualization. Spider uses in-
visible breakpoint, a novel primitive we develop that inher-
its the eﬃciency and ﬂexibility of software breakpoint, and
utilizes hardware virtualization to hide its side-eﬀects from
the guest. We have implemented a prototype of Spider on
KVM. Our evaluation shows that Spider succeeds in re-
maining transparent against state-of-the-art anti-debugging
and anti-instrumentation techniques; the overhead of in-
visible breakpoint is comparable with traditional hardware
breakpoint. We also demonstrate Spider’s usage in various
security applications.
1.
INTRODUCTION
In a wide range of security scenarios, researchers need to
trap the execution of a binary program, legitimate or mali-
cious, at desired instructions to perform certain actions. For
example, in high accuracy attack provenance, instruction-
level trapping allows recording of events which are more
ﬁne-grained than system calls and library calls.
In mal-
ware analysis, where malware often includes large number
of garbage instructions to hamper analysis, it allows ana-
lysts to skip such instructions and focus on the instructions
that are related to the behavior of malware.
Debuggers [1, 2, 40] and dynamic instrumentation tools [26,
27, 10, 32, 8, 15] both support eﬃcient instruction-level trap-
ping. As a countermeasure, an increasing percent of malware
is equipped with anti-debugging and anti-instrumentation
techniques. Such techniques are also commonly used in le-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee. Request permissions from Permissions@acm.org.
ACSAC ’13 December 09-13, 2013, New Orleans, LA, USA
Copyright 2013 ACM 978-1-4503-2015-3/13/12 ...$15.00.
http://dx.doi.org/10.1145/2523649.2523675
289
gitimate software for protection purpose [20]. While they do
prevent reverse-engineering and software modiﬁcation, they
also render any security application that relies on instruction-
level trapping infeasible at the same time.
Researchers have proposed to build systems that enable
transparent trapping to solve the problem. However, exist-
ing approaches are insuﬃcient to support transparent, ef-
ﬁcient and ﬂexible instruction-level trapping. In-guest ap-
proaches [36, 34] could be detected by program running in
the same privilege level. Emulation based approaches [6,
33] are not transparent enough due to imperfect emulation.
Hardware virtualization based systems [14, 28, 38, 37, 12]
provide better transparency. However, none of them sup-
ports instruction-level trapping with both ﬂexibility and ef-
ﬁciency. Some of them utilize single-stepping which results
in prohibitive performance overhead; others could trap only
a certain subset of instructions. More detailed discussion
about existing work is presented in Section 2.
In this paper, we present Spider, a stealthy program in-
strumentation and debugging framework built upon hard-
ware virtualization. We propose a novel primitive called
invisible breakpoint that supports transparent, eﬃcient and
ﬂexible trapping of execution at any desired instruction in
a program.
Invisible breakpoint is an improvement over
traditional software breakpoint, with all its side-eﬀects hid-
den from the guest. Spider hides the existence of invisible
breakpoint in the guest memory by utilizing the Extended
Page Table (EPT) to split the code and data view seen by
the guest, and handles invisible breakpoint at the hypervi-
sor level to avoid any unexpected in-guest execution. Spi-
der also provides data watchpoint which enables monitoring
memory read/write at any address.
We have developed a prototype of Spider on KVM [3].
We have evaluated the transparency of Spider using soft-
ware protectors and programs equipped with state-of-the-art
anti-debugging and anti-instrumentation techniques. The
result shows that Spider successfully maintains transparency
against all of them. We have also applied Spider to the fol-
lowing cases: (1) We improve the applicability and security
of an existing attack provenance system [25] by replacing its
underlying in-guest instrumentation engine with Spider; (2)
We demonstrate a threat that involves stealthy introspection
on protected software to capture sensitive application data.
The performance overhead introduced by Spider is less than
6% in our case studies. The quantitative cost of each trap
is around 3200 CPU cycles according to our measurement,
which is less than a previous work [36] and comparable with
a hardware breakpoint.
2. RELATED WORK
In this section, we take an in-depth look at existing pro-
gram debugging, instrumentation and analysis tools and dis-
cuss their limitations. We only focus on instruction-level
tools as they are most related to Spider. We classify them
into four categories: in-guest, emulation based, hardware vir-
tualization based and hybrid.
In-Guest Approaches. Traditional in-guest debuggers [1,
2, 40] use software and hardware breakpoints to gain con-
trol at arbitrary points during the execution of a program.
In x86, software breakpoint is implemented by replacing the
target instruction with a special 1-byte instruction (int3 ),
which triggers a #BP exception upon its execution. Hard-
ware breakpoints are implemented as four debug registers
(DR0-DR3 ). Each of these registers holds a target address;
a #DB exception is triggered upon instruction execution
or data access at the target address. Software breakpoints
could be easily detected by code integrity checks as the in-
struction is modiﬁed. Hardware breakpoints are not trans-
parent either. The reason is that they are limited resource
such that programs could hold and use all hardware break-
points exclusively to prevent debuggers from using them.
To solve the transparency issue of traditional breakpoints,
researchers proposed to use page-level mechanism to trap
execution of arbitrary instruction [36, 34]. The page which
contains the target instruction is set to non-present, which
will cause a page fault upon execution. In the page fault han-
dler, the page is set to present and the target instruction is
executed in single-step mode. Then the page is set back to
non-present to enable breakpoint again. There are two lim-
itations with this approach. First, execution of any instruc-
tion in the non-present page will cause a page fault, even if
there is no breakpoint set on that instruction. This would
result in prohibitively high performance overhead. Second,
although it is not as straightforward as detecting traditional
breakpoints, the modiﬁed page table and page fault handler
could still be detected by kernel-level programs.
Dynamic binary instrumentation (DBI) frameworks [26,
27, 10, 32, 8, 15] are able to insert instrumentation code
at arbitrary points during the execution of a program. The
mechanism of DBI frameworks is to relocate and instrument
code blocks dynamically and handle control ﬂow transitions
between basic blocks. Transparency is an important con-
cern in DBI frameworks. For example, position-independent
code makes assumption about relative oﬀsets between in-
structions and/or data. DBI frameworks may break such as-
sumptions when relocating basic blocks, so they must change
some instructions in the program to create an illusion that
every address is the same as in a native run. However, de-
spite recent eﬀorts [11, 35] targeting at improving the trans-
parency of DBI frameworks, they are still insuﬃcient. A
recent work [30] has also shown that there are a number
of ways to detect DBI frameworks. More essentially, the
DBI framework itself, along with the relocated and instru-
mented basic blocks must occupy additional memory in the
virtual address space. Programs could scan the virtual ad-
dress space to detect unsolicited memory consumption and
hence the DBI framework.
Emulation Based Approaches. To get rid of in-guest
components that are visible to guest programs, researchers
have proposed to build program analysis and instrumenta-
tion tools [6, 33] using full system emulators such as QEMU [7]
and Bochs [24]. Full system emulators create a virtual envi-
ronment for the guest so it feels like running in a dedicated
machine. Instruction-level trapping could be easily imple-
mented as each instruction is emulated. However, attackers
have been able to identify various methods [16, 17, 29] to de-
tect emulators by exploiting imperfect emulation of instruc-
tions and hardware events (e.g. interrupts and exceptions).
Although imperfection that is already known could be ﬁxed,
the problem still exists as long as there might be unrevealed
imperfections. In fact, it has been proved in [14] that de-
termining whether an emulator achieves perfect emulation
is undecidable.
Hardware Virtualization Based Approaches. With re-
cent advances in processor features, researchers propose to
leverage hardware virtualization to construct more transpar-
ent program analysis and instrumentation tools [14, 28, 38,
37, 12]. Hardware virtualization naturally provides better
transparency than emulation by executing all guest instruc-
tions natively on processor.
None of the existing hardware virtualization based ap-
proaches supports transparent, eﬃcient and ﬂexible trap-
ping of arbitrary instructions during execution of a program.
PinOS [12] implements a DBI framework on the Xen [5] hy-
pervisor. As it needs to occupy part of the guest virtual
address space, it suﬀers from the same transparency issue as
in-guest DBI frameworks. Ether [14] and MAVMM [28] use
single-stepping for instruction-level trapping, which triggers
a transition between hypervisor and guest upon execution
of every guest instruction. Such transition causes signiﬁcant
performance overhead as it costs hundreds to thousands cy-
cles while an instruction only costs several to tens cycles
on average. The mechanism is not ﬂexible either as one is
forced to single-step through the whole program even if he
is only interested in the states at speciﬁc points during ex-
ecution. Such scenario is often encountered when analyzing
obfuscated programs which contain lots of garbage code.
Several recent approaches [38, 37] propose to use x86 pro-
cessor features to trap speciﬁc events for program analy-
sis.
In [38], the authors use branch tracing to record all
the branches taken by the program during its execution.
While the performance is much better than single-stepping,
it is still 12 times slower than normal execution. Also, the
tool is only able to record all branches.
It cannot trap a
speciﬁc branch, which renders detailed analysis at arbitrary
given points during execution impossible. In [37], the au-
thors make use of performance monitoring counters (PMCs)
to trap certain types of instructions (e.g. call, ret and condi-
tional branches). However, there are still many other types
of instructions (e.g. mov) that could not be trapped this
way. Also, the tool does not support trapping instruction at
a speciﬁc location.
Hybrid Approaches. Researchers have also proposed to
use hybrid approaches [22, 39] to take advantage of both
the transparency granted by hardware virtualization and
the ﬂexibility provided by emulation. In [22], the authors
utilize the trace obtained from a transparent reference sys-
tem (e.g. Ether) to guide the execution of program in an
emulator. However, as discussed above, it incurs high per-
formance overhead to obtain execution trace using current
hardware virtualization based approaches. V2E [39] takes
another approach by emulating only the instructions that
can be perfectly emulated. For other instructions in the
program, it records the state changes caused by these in-
290
structions in a hardware virtualization based system, and
then replays the state changes in the emulator. While this
method could substantially reduce performance overhead,
how to precisely identify the set of instructions that can be
perfectly emulated remains a problem.
3. OVERVIEW
The goal of Spider is to provide a program debugging
and instrumentation framework with ﬂexibility, eﬃciency,
transparency and reliability, which we deﬁne as follows:
(R1) Flexibility: Spider should be able to trap the execu-
tion of the target program at any desired instruction
and data access at any memory address.
(R2) Eﬃciency: Spider should not introduce high perfor-
mance overhead on the target program.
(R3) Transparency: The target program should not be
able to detect the existence of Spider.
(R4) Reliability: The trap should not be bypassed or tam-
pered with by the target program.
An overview of Spider is shown in Figure 1. For sim-
plicity, we only show the trapping of instruction execution
here. The trapping of data access using data watchpoint
(Section 4.5) is much simpler and omitted in the ﬁgure.
To trap the execution of an instruction, the user provides
these inputs to Spider: the program address space identi-
ﬁer (CR3 register value in x86), the virtual address to set
trap and the function to call on trap. As shown in the ﬁg-
ure, Spider is mainly implemented inside the Hypervisor.
The guest virtual-to-physical mapping monitor component
(Section 4.3), which captures guest virtual-to-physical map-
ping changes, translates the address space identiﬁer and the
virtual address into guest physical address and invokes the
breakpoint manager to set the trap. The breakpoint man-
ager sets invisible breakpoint to trap the execution of the
target program.
Invisible breakpoint uses the same triggering mechanism
as traditional software breakpoint to inherit its ﬂexibility
(R1) and eﬃciency (R2). However, as discussed in Sec-
tion 2, traditional software breakpoint is not transparent
because: (1) The instructions needs to be modiﬁed in order
to set breakpoint; (2) The triggering and handling of the
breakpoint involves control-ﬂow which is diﬀerent from nat-
ural execution. These side-eﬀects are neutralized in invisible
breakpoint to guarantee transparency (R3). Regarding the
ﬁrst side-eﬀect, the breakpoint manager uses EPT to split
the code and data views (Section 4.1) of the guest physical
page that contains the breakpoint. In the code view, which
is used for instruction fetching (shown as the grey path in
Figure 1), the instruction is modiﬁed to set breakpoint; in
the data view, which is used for read/write access (shown
as the white path in Figure 1), the instruction is not mod-
iﬁed at all, so the guest sees no change to the instruction.
To neutralize the second side-eﬀect, when a breakpoint is
triggered, the breakpoint manager will capture the event,
call the corresponding user-provided function and handle the
breakpoint transparently (Section 4.2) so that the control-
ﬂow in the guest is the same as a natural execution. The
code modiﬁcation handler (Section 4.4) captures any mod-
iﬁcation made to the data view and synchronizes with the
code view to guarantee transparency (R3); it also makes sure
the breakpoint is not maliciously overwritten by the guest
to guarantee reliability (R4).
291
4. DESIGN
4.1 Splitting Code and Data View
Spider neutralizes memory side-eﬀects of traditional soft-
ware breakpoint by splitting the code and data views of
guest pages. Several existing techniques could have been
used here to split the two views; however, they all have
some limitations. For example, one could intercept all read
accesses to modiﬁed instructions by setting the correspond-
ing pages to not-present, and return original instructions
upon read accesses. However, it would introduce signiﬁcant
performance overhead as every instruction fetching or data
access in these pages will cause a page fault. A recent work
hvmHarvard [19] tries to implement a Harvard architecture
on x86 by de-synchronizing the instruction TLB (iTLB) and
the data TLB (dTLB). More speciﬁcally, it tries to maintain
two diﬀerent virtual-to-physical page mappings in iTLB and
dTLB for the code and data view respectively. To prevent
the mapping of the code view from being loaded into dTLB,
the page table is set to map the data view all the time; the
code view is only mapped when an instruction fetching hap-
pens, and a single-step is performed in the guest to load the
code view into iTLB. Unfortunately, such mechanism could
not guarantee the de-synchronization of iTLB and dTLB.
As the code view is readable, one could still load the code
view into dTLB by executing an instruction that reads from
the page that contains it. An attacker could exploit this
limitation to read and detect the modiﬁed instructions.
Spider splits the code and data views of a guest physical
page by mapping it to two host physical pages with mutu-
ally exclusive attributes. We call such guest physical page
with split code and data views a split page. The code view
of a split page is executable but not readable; the data view
is readable but not executable. Both views are set to not
writable to handle code modiﬁcation, which will be discussed
in Section 4.4. The mutually exclusive attributes ensure that
the guest could neither read from the code view nor execute
instruction from the data view of a split page. Tradition-
ally, in x86 there is no way to set a page to executable but
not readable; however, recent processors introduces a feature
that allows one to specify such attribute in EPT entries [21].
Legacy page table still lacks such capability, which is the
reason we split physical pages instead of virtual pages.
Spider performs on-demand transparent switching be-
tween the two views of a split page. For example, let us
assume its corresponding EPT entry is currently set to map-
ping its code view. When a data access happens in the page,