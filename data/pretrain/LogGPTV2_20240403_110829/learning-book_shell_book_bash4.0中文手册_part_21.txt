撤销对本行的所有修改。这就和多次执行undo命令以恢复到开始是一样的，
tilde=expand ( M-&])
对当前的单词进行大括号扩展。
set:mark （C)
在标志点设置记号。如果给定数值参数，则在指定位置设置记号。
exchange=point=and-nark ([CxCx)
交换标志点的记号的位置。当前光标的位置变成已保存的位
置：原来光标的位置设成记号。
character=search (C)
读取一个字符（作为参数）并把标志点移动到下一个同样的字符旁。负参数
则向前移动。
character=search-backward (M-C])
读取一个字符（作为参数）并把标志点移动到上一个同样的字
符旁，负参数则后前移动，
insert=comment （M-#）
如果没有数值参数，则把comment=begin变量的值插入到当前行的开始，如
果指定数值参数，这个数就作为开关：如果行开头的字符和comment=begin变量的值不一样就插入这
个值，否则就把comnent-begin变量里的字符从行的开头删除。不管哪种情况，都提交本行，就好像
输入了Newline
一样。如果使用comnent-begin的默认值，这个命令就会把当前行变成shell注释。
如果带有数值参数，就副除注释字符并把本行交给shell执行。
dump-functions
把所有函数和它们的键绑定打印到Readline的输出流中。如果给定数值参数，就把输
出格式化意以便于作为inputrc文件的一部分。这个命令默认没有绑定。
dunp-variables
把所有可设置变量和它们的值打印到Readline的输出流中。如果给定数值参数，就把
输出格式化意以便于作为inputrc文件的一部分。这个命令默认没有绑定。
p85
目录
BASH 中文文
---
## Page 97
第八章编辑命令行
8.5 READLINE 的 VI 模式
dunp-macros
把Readline中所有绑定到宏的键序和它们绑定的字符串列打印出来。如果给定数值参数，
就把输出格式化意以便于作为inputrc文件的一部分。这个命令默认没有绑定。
glob=complete=vord (M-g])
把标志点前的单词当成模式并隐式的在后面加上一个星号，然后进行文
件名扩展，这个模式可以生成一系列匹配的文件名以用来补全。
glob=expand-word(C-x）
把标志点前的单词当成模式并进行文件名扩展，把匹配的文件名列表
插入进来并替换原来的单词，如果指定数值参数，就在文件名扩展之前先插入“”。
glob-1ist=expansions(Cx）
列出glob-expand-word可以生成的扩展并重新显示本行。如果
指定数值参数，就在文件名扩展之前先插入“”
display=shell=version ([CxCv)
显示当前Bash的版本信息。
shell=expand=1ine (M-C-e)
像shell一样扩展本行，它除了进行所有的shell扩展（参见g3.5[Shell
扩展]，p14）以外还要进行别名的历史扩展。
history=expand-1ine ( M- )
对当前行进行历史扩展。
magic=space
对当前行进行历史扩展并插入一全空格（参见9[历史的交互使用]：p90）。
aliag=expand-line
对当前行进行别名扩展（参见56.6别名]p62）
history-and-alias=expand-line
对当前行进行历史和别名扩展。
（）x
和yank-last-arg是同义的。
operate=and-get=next (C-o)
提交并执行当前行，然后从历史中取出相对于当前行的下一行进行编
辑，忽略任何参数。
edit=and=execute=conmand (C-xC-e])
启动一个编辑器来编辑当前行，并把结果当作shell命令来
执行。Bash会试图依次启动 $VISUAL，$EDITOR 和emacs 作为编辑器。
$8.5
Readline的vi模式
尽管Readlline库里面没有完整的vi编辑命令，却已经包含了足够的命令进行简单的行编辑。Readlline
的vi模式在行为上遵循POSIX1003.2标准。可以使用set=0enacs和set=ovi命令（参见g86[内部
命令set]，p43）在emace和vi模式之间交互的切换。默认的是emacs模式。
在Vi模式下输入文本行时已经进入了“插入"模式，就好像已经输入了一样。按下ESC会切换
到“命令”模式，这时可以用标准的vi移动键来编辑文本，用k"移动到上一个历史行，用"移动到下一行，
等等。
$8.6
可编程的补全
如果已经使用内部命令conplete（参见58.7[可编程补全的内部命令]，p87）定义了补全的方法（即
conpspec），则在对命令中的参数进行单词补全时，就会启用可编程的补全功能。
首先识别命令名。如果已经为这个命令定义了conpspec补全方法，就用compspec来生成一个可以补
全当前单词的条目列表。如果命令词是一个完整路径，则首先用compBpec生成一个完整路径的补全列表：
BASH 中文文档
目录
p86
---
## Page 98
8.7可编程补全的内部命令
第八章编辑命令行
补全列表。找到conp&pec以后，就用它来生成和当前单词匹配的条目列表。如果没有找到，Bash就生成
默认的补全列表（参见58.4.6补全命令]p84）。
首先同，执行compepec指定的动作。这时只返回以待补全单词作为前缀的条目。如果在补全文件或目
条目。
其次，扩展“-G”选项的文件名模式并生成补全列表。根据模式生成的单词不一定要和待补全的单词匹
配。
这时不会使用shell变量GLOBIGNORE来过滤匹配的条目，而使用FIGNORE过滤。
然后，处理“-W"选项指定的字符串参数。首先用特殊变量IFS中的字符作为分隔符把这个字符申分开。
这时会使用shell的引用机制。然后对每个单词进行在括号扩展、波浪号扩展、参数和变量扩展、命令替换、
以及算术扩展（参见53.5Shell扩展]，pI4），并对扩展结果进行单词拆分（参见53.5.7[单词拆分]，p19）.扩
展的结果加上待补全的单词作为前缀：这样匹配的单词就成为可以补全的条目。
生成匹配的条目以后，就执行“-F"和“-C"选项指定的任何shell函数和命令，执行这些函数或命令时，
会对COMPLINE、CONP_POINT、COMP_KEY、和COMP_TYPE变量进行赋值（参见≤5.2[Bash的变量]：p50）。如
果执行的是shell函数，则还会设置COMP_WORDS和CONP_CWORD变量。执行函数或命令时，第一个参数是等
待补全其参数的命令的名称，第二个参数是要补全的单词，第三个参数是在当前命令中待补全单词的前一个
生成的条目。“-F"指定的函数将行执行.这个函数可以使用任何shell功能来生成匹配条目，包括下面的内
单词。这时不会按照待补全的单词对生成的补全条目进行过滤：而所执行的函数或命令可以完全自由的控制
部命令conpgen和compopt（参见58.7[可编程补全的内部命令]：p87），但是它必须把补全条目放在数组变
量CONPREPLY中.
接下来，在类似于命令替换的环境中执行“-C"选项指定的命令.这个命令应该在标准输出中打印出匹
配条目，每个一行。如有必要，可以使用反斜杠来转义换行符。
当所有补全条目都生成好以后，“-X"选项指定的过滤器过滤条目列表。这个过滤器是一个模式，就和文
件名扩展的模式一样。模式中的“”将替换成待补全的文本：而“&”本身可以用反斜杠转义，在匹配之前反斜
杠会被去除。与这个模式匹配的条目将从列表中删除。模式中前导的“！"表示否定，这种情况下会删除所有
不与模式匹配的条目。
最后，对补全列表的每个条目加上"-P和"-S"选项指定的前缀和后级，并把结果作为最终补全列表返
回给Readline的补全代码。
如果上一次执行的动作没有生成任何条目，并且在定义conpspec时指定了"-odirnames”，则将试图
进行目录名称补全，如果定义conpspec时指定了"=oplu&dirg"选项，则会试图进行目录名称补全，并加
上其它动作生成的任何补全条目。
默认情况下，如果找到一个compepec，则不管它生成什么，都将完整的返回给补全代码：这时不会
进行Bash默认的补全，也不会进行Readlline 默认的文件名补全，在定义conp&pec时，可以使用"-o
bashdefault"选项，这样如果conpspec没有生成任何条目就会试图进行Bash默认的补全。在定义
conpepec时，可以使用"-odefault"选项，这样如果conpepec没有生成任何条目（并且如果试图进行
Bash默认的补全也没有生成任何条目）就会试图进行Readline默认的补全。
如果compspec指示进行目录名称补全，则可编程的补全功能会强制Readline在每个指向目录的符号链
接后面加上斜杠（取决于Readline的mark-directories变量），而不管Readline的marx=Bymlinked-directorie&
变量如何设置。
58.7可编程补全的内部命令
可编程补全的功能是由两个命令实现的。此外，还可以特殊的设置补全的选项。
A. compgen
conpgen[选项][单词]
根据选项生成与单词相匹配的补全，并写到标准输出中：这些选项可以是内部命令conplete所能接受的任
何选项，但不能是“-p"和"-r”.如果使用了“-F"或"-C"选项，则由可编程补全功能设置的各个shell变量虽
原文的章节安排有点乱，这里做了适当改功。
p87
目录
BASH中文文
---
## Page 99
第八章编辑命令行
58.7可编程补全的内部命令
然仍可以使用，它们的值却没有什么作用。生成的补全条目就好像可编程补全的代码用相同的选项按照补全
方法直接生成的一样。如果指定了单词，则只显示匹配该单词的条目，返回状态是真，除非指定了无效的选
项，或没有生成任何匹配条目。
B. complete
conplete[abedefgjkguv][-o补全选项][-E][-A动作][-G模式][-W单词列表]
[-F函数][-C命令][-x过滤模式][-P前缀][-S后缀]名称[名称-·]
[][-]xd
指定如何对每个名称进行补全。如果指定了“-p"选项，或者没有指定任何选项，则把已有的补全方法用一种
便于重新作为输入的格式打印出来。“-r"选项会把每个名称的补全方法副除。“-E"选项告诉后续选项和动
作要补全“空"命令，即补全空白行。对单词进行补全时处理补全方法的过程已经在上文中介绍（参见58.6[可
编程的补全]，p86）。
如果指定了其它选项，则会有如下的含义。“-G”、“-u、和-x"选项（如有必要，还有“-P"和"-S”选
项）的参数需要引用，以防止它们在补全开始前被扩展。
补全选项
除了简单的生成补全条目以外，补全选项还控制着conpspec的多方面行为。补全选项可
以是：
bashdefault
如果conpepec没有生成任何条目就进行Bash默认的其它补全。
default
如果conpaspec没有生成任何条目就使用Readline 默认的文件名补全。
dirnames
如果conpepec没有生成任何条目就进行目录名称补全，
filenanes
告诉 Readline 由conpepec 生成文件名，以便进行与文件名相关的处理（例如在目录
名后面加上斜杠，引用特殊字符，或去掉行尾的空格）。这个选项是为和"-F"选项所指定的函数
一起使用而设计的。
nospace
告诉Readline不要在结尾补全的单词后添加空格。
plusdirs
生成compepec 定义的所有匹配条目后，还试图进行目录名补全，并把生成的条目加入
到其它动作得到的结果中.
-A动作
动作可以是下列之一：它用来生成补全条目，
alia8
所有别名。还可以指定为”=8”选项。
arrayvar
所有数组变量名。
binding
Readline的所有键绑定名（参见58.4[可以绑定的 Readlline命令]，p80）。
builtin
所有的shell内部命令名。还可以指定为“-b"选项。
所有的命令名。还可以指定为“=e"选项。
directory
所有的目录名。还可以指定为“-d"选项。
disabled
所有已经禁用的 shell 内部命令。
enabled
所有已经启用的shell内部命令。
export
Shell导出的所有变量名。还可以指定为"-e"选项，
BASH 中文文档
目录
p88
---
## Page 100
58.7可编程补全的内部命令
第八章编辑命令行
file
所有的文件名。还可以指定为"-r"选项。
function
所有的 shell 函数名。
group
所有的用户组名。还可以指定为“-g”选项。
helptopic
内部命令help（参见&4.2Bash的内部命令help]，p38）所接受的所有帮助主题。
hostnane
Shell变量HOSTFILE（参见&5.2|Bash的变量]，p52）指定文件中的所有主机名。
job
如果使用了作业控制，则是所有作业的名称。还可以指定为”-j”选项。
keyword
Shell中的所有保留字，还可以指定为"-k"选项，
running
如果使用了作业控制，则是所有正在运行的作业。
service
所有的服务名称。还可以指定为“="选项。
setopt
内部命令Bet的=o选项（参见s4.3.1[内部命令set]，p42）所接受的所有有效参数。
shopt
内部命令shopt（参见g4.3.2[内部命令shopt]，p45）所接受的所有shell选项名称。
s1gnal
所有信号名称。
stopped
如果使用了作业控制，则是所有已停止的作业名称。
user
所有用户名。还可以指定为"-u"选项。
variable
所有shell变量的名称。还可以指定为"-v选项。
G模式
对模式进行文件名扩展来生成补全条目。
-W单词列表
使用特殊变量IFS中的字符拆分单词列表并扩展拆分后的每个单词。结果中与待补全单词
匹配的条目就是补全条目。
C命令
在子shell中执行命令，并把其结果作为补全条目。
在当前的shell环境中执行shell函数，结束执行时，从数组变量COMPREPLY中获取补全条目。
-X过滤模式