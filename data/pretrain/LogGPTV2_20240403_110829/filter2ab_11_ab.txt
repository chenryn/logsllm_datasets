\fIcminflt\fP %u
进程及其子进程所导致的小错误（minor faults）数目.
.TP
\fImajflt\fP %u
进程所导致的大错误（major faults）数目, 这样的
大错误（major faults）需要重新载入内存页. 
.TP
\fIcmajflt\fP %u
进程及其子进程所导致的大错误（major faults）数目.
.TP
\fIutime\fP %d
进程被调度进用户态的时间(以 jiffy 为单
位, 1 jiffy=1/100 秒，另外不同硬件体系略有不同).
.TP
\fIstime\fP %d
进程被调度进内核态的时间, 以 jiffy 为
单位. 
.TP
\fIcutime\fP %d
进程及其子进程被调度进用户态的时间, 
以 jiffy 为单位. 
.TP
\fIcstime\fP %d
进程及其子进程被调度进内核态的时间, 
以 jiffy 为单位. 
.TP
\fIcounter\fP %d
如果进程不是当前正在运行的进程, 就是
进程在下个时间片当前可以拥有的最大时
间, 以 jiffy 为单位. 如果进程是当前正
在运行的进程, 就是当前时间片中所剩下
jiffy 数目. 
.TP
\fIpriority\fP %d
标准优先数只再加上 15, 在内核里该值总
是正的. 
.TP
\fItimeout\fP %u
当前至进程的下一次间歇时间, 以 jiffy
为单位. 
.TP
\fIitrealvalue\fP %u
由于计时间隔导致的下一个 SIGALRM
发送进程的时延，以 jiffy 为单位.
.TP
\fIstarttime\fP %d 
进程自系统启动以来的开始时间, 以 jiffy
为单位.
.TP
\fIvsize\fP %u
虚拟内存大小. 
.TP
\fIrss\fP %u
Resident Set Size（驻留大小）: 进程所占用的真实内
存大小, 以页为单位, 为便于管理而减去
了 3. rss 只包括正文, 数据以及堆栈的空间, 
但不包括尚未要求装入内存的或已被交换出去的.
.TP
\fIrlim\fP %u
当前进程的 rss 限制, 以字节为单位, 通
常为 2,147,483,647. 
.TP
\fIstartcode\fP %u
正文部分地址下限. 
.TP
\fIendcode\fP %u
正文部分地址上限. 
.TP
\fIstartstack\fP %u
堆栈开始地址.
.TP
\fIkstkesp\fP %u
esp(32 位堆栈指针) 的当前值, 与在进程
的内核堆栈页得到的一致. 
.TP
\fIkstkeip\fP %u
EIP(32 位指令指针)的当前值.
.TP
\fIsignal\fP %d
待处理信号的 bitmap(通常为 0).
.TP
\fIblocked\fP %d
被阻塞信号的 bitmap(对 shell 通常是 0, 2)．
.TP
\fIsigignore\fP %d
被忽略信号的 bitmap. 
.TP
\fIsigcatch\fP %d
被俘获信号的 bitmap. 
.TP
\fIwchan\fP %u
进程在其中等待的通道, 实际是一个系统
调用的地址. 如果你需要文本格式的, 也
可以在名字列表中找到. 
(如果有最新版本的 /etc/psdatabase, 你
可以在 \fIps -l\fP 的结果中的 WCHAN 域看到)
.RE
.RE
.TP
.I cpuinfo 
保存了CPU 以及体系架构依赖条目的列表. 对于不同的系
统架构有不同的列表, 共有的两项是 \fIcpu\fP 和 \fIBogoMIPS\fP, \fIcpu\fP
可能是当前在用的 CPU, 而 \fIBogoMIPS\fP 则是内核初始化时计算出
的一个系统常数. 
.TP
.I devices
主设备号及设备组的列表, 文本格式. MAKEDEV 脚本使用
该文件来维持内核的一致性. 
.TP
.I dma
一个列表, 指出正在使用的\fIISA\fP DMA (直接内存访问)通道. 
.TP
.I filesystems
以文本格式列出了被编译进内核的文件系统. 当没有给
.I mount(1)
指明哪个文件系统的时候, 
.I mount(1)
就依靠该文件遍历不同的文件系统.
.TP
.I interrupts
该文件以 ASCII 格式记录了（至少是在 i386 体系上的）每次 IRQ 的中断数目. 
.TP
.I ioports
该文件列出了当前在用的已注册 I/O 端口范围. 
.TP
.I kcore
该伪文件以 core 文件格式给出了系统的物理内存映象, 再
利用未卸载的内核 (/usr/src/linux/tools/zSystem), 我
们就可以用 GDB 查探当前内核的任意数据结构. 
该文件的总长度是物理内存 (RAM) 的大小再加上 4KB. 
.TP
.I kmsg
可以用该文件取代系统调用
.I syslog(2)
来记录内核信息. 
但是读该文件需要超级用户权限, 并且一次只能有一个进
程可以读该文件, 因而如果一个使用了
.I syslog(2)
系统调用功能来记录内核信息的系统日志进程正在运行的话,
别的进程就不能再去读该伪文件了.
该文件的内容可以用
.I dmesg(8)
来察看. 
.TP
.I ksyms
该文件保存了内核输出的符号定义, 
.I modules(X)
使用该文件
动态地连接和捆绑可装载的模块. 
.TP
.I loadavg
平均负载数给出了在过去的 1, 5, 15 分钟里在运行队列里
的任务数, 与
.I uptime(1)
等命令的结果相同. 
.TP
.I locks
这个文件显示当前文件锁．
.TP
.I malloc
只有在编译时定义了 CONFIGDEBUGMALLOC 才会有该文件．
.TP
.I meminfo
.I free(1)
利用该文件来给出系统总的空闲内存和已用内存
(包括物理内存和交换内存), 以及内核所使用的共享内存
和缓冲区. 
该文件与
.I free(1)
\h'-1' 格式相同, 但是以字节为单位而不是 KB. 
.TP
.I modules
列出了系统已载入的模块, 文本格式. 
.TP
.I net
该子目录包括多个 ASCII 格式的网络伪文件, 描述了网络
层的部分情况. 可以用 cat 来察看这些文件, 但标准的
.I netstat(8)
命令组更清晰地给出了这些文件的信息. 
.RS
.TP
.I arp
该文件以 ASCII 格式保存了内核 ARP 表, 用于地址解析, 
包括静态和动态 arp 数据. 文件格式如下: 
.nf
.ft CW
.ie t .in +3n
.el .in -2n
IP address       HW type     Flags       HW address
10.11.100.129    0x1         0x6         00:20:8A:00:0C:5A
10.11.100.5      0x1         0x2         00:C0:EA:00:00:4E
44.131.10.6      0x3         0x2         GW4PTS
.ft
.fi
.in
.PP
其中 'IP address' 是机器的 IPv4 地址; 'HW type' 是地址的硬
件类型, 遵循 RFC 826; flags 是 ARP 结构的内部标志, 在
/usr/include/linux/if_arp.h 中定义; 'HW address' 是该
IP 地址的物理层映射(如果知道的话). 
.TP
.I dev
该伪文件包含网络设备状态信息, 给出了发送和收
到的包的数目, 错误和冲突的数目, 以及别的一些
基本统计数据. 
.I ifconfig(8)
利用了该文件来报
告网络设备状态. 文件格式如下: 
.nf
.ft CW
.if n .in -13n
Inter-|   Receive                  |   Transmit
face |packets errs drop fifo frame|packets errs drop fifo colls carrier
lo:      0    0    0    0    0     2353    0    0    0     0    0
eth0: 644324    1    0    0    1   563770    0    0    0   581    0
.if n .in
.ft
.fi
.TP
.I ipx
无信息.
.TP
.I ipx_route
无信息.
.TP
.I rarp
该文件具有和
.I arp
同样的格式, 包含当前的逆向
地址映射数据. 
.I rarp(8)
利用这些数据来作逆向
地址查询服务. 只有将 RARP 配置进内核, 该文件才
存在. 
.TP
.I raw
该文件保存了 RAW 套接字表, 大部分信息除用于调试以外没有什么用.
`sl' 指出了套接字的内核散列槽号; 'local address'
包括本地地址和协议号对; "St" 是套接字的内部状态;
tx_queue 和 rx_queue 是内核存储器使用意义上的输入输
出数据队列; RAW 没有使用"tr", "tm-&gt;when" 和 "rexmits";