title:Memento: Learning Secrets from Process Footprints
author:Suman Jana and
Vitaly Shmatikov
2012 IEEE Symposium on Security and Privacy
Memento: Learning Secrets from Process Footprints
Suman Jana and Vitaly Shmatikov
The University of Texas at Austin
Abstract—We describe a new side-channel attack. By track-
ing changes in the application’s memory footprint, a concurrent
process belonging to a different user can learn its secrets. Using
Web browsers as the target, we show how an unprivileged, local
attack process—for example, a malicious Android app—can
infer which page the user is browsing, as well as ﬁner-grained
information: whether she is a paid customer, her interests, etc.
This attack is an instance of a broader problem. Many
isolation mechanisms in modern systems reveal accounting in-
formation about program execution, such as memory usage and
CPU scheduling statistics. If temporal changes in this public
information are correlated with the program’s secrets, they
can lead to a privacy breach. To illustrate the pervasiveness of
this problem, we show how to exploit scheduling statistics for
keystroke snifﬁng in Linux and Android, and how to combine
scheduling statistics with the dynamics of memory usage for
more accurate adversarial inference of browsing behavior.
I. INTRODUCTION
Modern software increasingly leverages OS mechanisms
to improve its security and reliability. For example, every
Android application runs as a separate user, relying on the
OS to ensure that different applications do not affect each
other. Network daemons run as user “nobody” rather than
“root,” using the same mechanism for privilege separation.
The Chrome browser forks a new process for every site in-
stance, relying on the OS process isolation. Other browsers,
including Internet Explorer, are moving to the process-per-
tab model so that crashes in one tab do not affect other tabs.
In this paper, we show that the reliance on OS abstrac-
tions has unintended consequences. It prevents malicious
programs from reading the ﬁles or memory of another appli-
cation, but the “accounting” API supported by standard OS
isolation mechanisms can indirectly leak information about
an application to concurrently executing programs—even if
they belong to a different user!
Consider an attacker who gets to execute an unprivileged,
user-level process on the victim’s machine. For example, he
convinces the victim to run a utility or game app on her
Android smartphone—a seemingly safe decision, because
each Android app runs as a separate user. Any Android
app, however, can measure the memory footprint (data+stack
size) or CPU scheduling statistics of another app using the
standard Unix proc facility without any permissions or the
phone owner’s consent. At ﬁrst glance, this feature appears
harmless: it may reveal that the other app is a memory or
CPU hog, but seems unlikely to leak any secrets.
Our contributions. In the 2000 movie “Memento,” the main
character, suffering from anterograde amnesia, writes out his
memories in small increments using snapshots and tattoos.
When put together, these snippets reveal the answer to a
murder mystery. In this paper, we show that the dynamics
of memory footprints—sequences of snapshots of the pro-
gram’s data resident size (DRS)—are correlated with the
program’s secrets and allow accurate adversarial inference.
This robust side channel can be exploited in any multi-user
environment: for example, by a malicious app on an Android
smartphone or a nosy user on a shared workstation.
We focus on Web browsers as an example of a sophis-
ticated application that keeps important secrets (browsing
behavior). After a brief introduction to memory management
in modern browsers, we explain how differences in content
rendered by the browser manifest in the browser’s DRS, i.e.,
total size of its heap, stack, and mmap-allocated memory, and
how a concurrent attack process can measure the browser’s
DRS even if it belongs to a different user.
We used Chrome, Firefox, and the default Android
browser to render the front pages of Alexa top 100,000 web-
sites and measured the corresponding patterns of changes in
each browser’s DRS. Depending on the browser, between
30% and 50% of these pages are distinguishable:
they
produce patterns that are both stable (similar across visits
to the same page) and diverse (dissimilar to visits to other
pages). The attacker can thus pre-compute a database of
browser-speciﬁc “signatures” for the distinguishable pages.
We give an algorithm for matching attack measurements
against this database. Stability and diversity ensure that the
matching threshold can be set to produce no false positives:
any successful match to a signature of some distinguishable
page is correct. We also measure the true positive rate (rec-
ognizability), i.e., how often a visit to each distinguishable
page produces a match.
In addition to inferring which pages the victim is brows-
ing, we show how to combine the dynamics of the browser’s
memory usage with secondary side channels to (1) improve
accuracy of inference, and (2) track the state of Web sessions
and infer ﬁner-grained information, including the victim’s
relationship with the site, her interests, etc. Our attack also
works against OP [8] and all WebKit-based browsers, but
we omit the detailed results for space reasons.
Attacks exploiting the dynamics of memory usage are a
symptom of a bigger problem and have implications for all
multi-user systems. Any ﬁne-grained accounting information
© 2012, Suman Jana. Under license to IEEE.
DOI 10.1109/SP.2012.19
143
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:37 UTC from IEEE Xplore.  Restrictions apply. 
about program execution revealed by the OS, sandbox,
or another containment mechanism is a potential leakage
channel, as long as temporal changes in this information
are (a) correlated with the program’s secrets and (b) can be
observed by the attacker.
To illustrate this thesis, we show how the CPU scheduling
statistics, which are public by default for any process in
Linux and Android, can be exploited for keystroke snifﬁng
and improving accuracy of the memory-footprint attack.
II. RELATED WORK
to observe that
Zhang and Wang were the ﬁrst
the
information revealed by the Unix proc ﬁlesystem can be
used for adversarial
inference. Their attack exploits the
correlation between the program’s system calls and its ESP
(stack pointer) value for keystroke snifﬁng [20]. This attack
does not work well against nondeterministic programs, in-
cluding non-trivial GUI applications such as Web browsers.
Our main attack exploits an entirely different side channel
(dynamics of the browser’s memory usage) and infers the
page being browsed by the victim, as well as ﬁner-grained
information, even if they are not associated with keystrokes
(e.g., the user clicks on a link). Unlike ESP, which has no
legitimate uses for other processes, the size of the memory
footprint is used by popular utilities and revealed by most
operating systems even when proc is not available.
Starting from [11], there has been much work on ana-
lyzing encrypted communications, including webpage iden-
tiﬁcation [6, 16], state of Web applications [5], voice-over-
IP [19], and multimedia streams [13]. Our attack model is
fundamentally different. In contrast to a network attacker
who observes the victim’s network communications, ours is
a local attacker who simply runs an unprivileged process as
a different user on the victim’s machine. This attacker can
observe only very coarse information: the target application’s
memory usage, total number of its context switches, etc. In
Section IV, we explain why webpage ﬁngerprinting based
on object sizes does not work in this setting.
A famous bug in the TENEX operating system for PDP-
10 allowed malicious users to trigger memory-page faults
in the middle of password matching, thus enabling letter-
by-letter password guessing. Side-channel attacks can also
exploit compromising radiation [7, 18], sounds [1], and
reﬂections [2]. On smartphones, side channels include on-
board sensors [14] and touch-screen motion [3]. Timing
analysis of keystrokes is discussed in [9, 15].
III. OVERVIEW OF THE ATTACK
The basic setting for our attack is two processes executing
in parallel on the same host. The processes belong to
different users. We refer to them as the target process
(victim) and attack process (attacker). The attack process
is unprivileged and does not have root access to the host.
144
We focus mainly on learning the secrets of Web-browser
processes. For example, the victim is an Android browser,
while the attacker is masquerading as a game or utility while
trying to infer which page the phone owner is browsing,
her relationship with the site (is she a paying customer or
not?), etc. Similarly, on a multi-user workstation (e.g., in a
computer lab on a university campus), a malicious user may
be trying to learn which pages are being browsed by the
concurrent users of the same workstation.
Measuring the target’s memory footprint. The only in-
formation needed for our basic attack is the size of the
target’s memory footprint. By default in Linux and Android,
the drs ﬁeld in the /proc//statm ﬁle reveals
data resident size of the process identiﬁed by pid, i.e.,
the combined size of its anonymous memory (allocated
via mmap), heap (allocated via brk), and stack. This
value is calculated in the kernel as mm->total_vm -
mm->shared_vm. In FreeBSD, memory footprints can be
measured via kvm_getprocs and via utilities like ps.
In Android, an application can use this method to measure
the memory footprint of another application regardless of
what it lists in its manifest. This requires neither the phone
owner’s consent, nor any permissions beyond what
the
application needs for the legitimate side of its operation.
In Windows, the Performance Data Helper (PDH) library
can be used to install a counter for measuring private,
non-shared memory pages of a process [12] (equivalent
to data+heap+code in Linux). GetProcessMemoryInfo
can be used to measure the process’s working set size (pri-
vate+shared pages).1 iOS provides no per-process memory
usage information, but host_statistics shows system-
wide free, resident, wired, active, and inactive pages.
In addition to exploiting memory usage information re-
vealed by proc, in Section VIII we show how to exploit
CPU scheduling statistics. In some systems, proc may also
reveal certain networking information, such as the system-
wide list of IP addresses, but if the host is connected to the
Internet via a proxy, this list contains only the address of
the proxy. As a local, user-level process, the attacker cannot
observe the target’s network trafﬁc.
Building the signature database. The attacker ﬁrst proﬁles
the target program and creates attack signatures. They
capture the relationship between the program’s secrets and
the pattern of changes in its memory usage.
To attack browsers, this stage requires large-scale web-
page analysis, repeated for every browser because footprints
are browser-speciﬁc. There are sufﬁciently few popular
browsers that the signature database can be pre-computed
for every major version of every common browser. We did
this for Chrome, Firefox, and the default Android browser.
1http://msdn.microsoft.com/en-us/library/windows/desktop/
ms683219(v=vs.85).aspx
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:37 UTC from IEEE Xplore.  Restrictions apply. 
To build the signature database, the attacker selects w
webpages (w should be as large as feasible) and visits
each page n times. While the browser is loading the page,
the attacker periodically measures the browser’s memory
footprint as described in Section V. The sequence of mea-
surements for each page is converted into a memprint, a
set of (E, c) tuples where E is an integer representing a
particular footprint size, c is how often it was observed
during measurement. Memory usage is reported by the OS at
page granularity, thus each footprint value E is the number
of memory pages used by the process.
For
example,
this
is
the
partial memprint
of
google.com when loaded by Chrome:
(2681,1) (2947,2) (2948,1) (3203,2)
...............
(17168,1) (17172,1) (17204,1) (17210,1)
On the left side of these tuples are drs values read from
the 6th ﬁeld of /proc//statm. They represent
Chrome’s data resident size (DRS) measured in memory
pages. The values on the right are how many times this DRS
was observed while Chrome was loading the webpage.
The number of tuples in a memprint depends on both the
webpage and the browser. Table I shows the distribution of
memprint sizes for the front pages of popular websites.
MEMPRINT SIZES FOR THE FRONT PAGES OF ALEXA TOP 1,000 SITES.
Table I
Browser
Chrome
Firefox
Android
Memprint size
Min Max Avg
80
247
79
536
1117
343
13
81
6
Given two memprints m1 and m2, m1 ∩ m2 and m1 ∪ m2
are computed in the standard way:
((E, c1) ∈ m1) ∧ ((E, c2) ∈ m2) ⇒ (E, min(c1, c2)) ∈ m1 ∩ m2
((E, c1) ∈ m1) ∧ ((E, c2) ∈ m2) ⇒ (E, max(c1, c2)) ∈ m1 ∪ m2
We compute similarity between two memprints using the
|m1∪m2| . The higher the index,
Jaccard index: J(m1, m2) = |m1∩m2|
the more similar the memprints.
Different visits to the same page may produce different
memprints due to the nondeterminism of the browser’s
memory allocation behavior even when rendering the same
content (see Section IV). The attacker may store all n
memprints in his database as the “signature” associated with
the page. This requires O(mnw) storage, where m is the
size of a single memprint (see Table I). An alternative is to
cluster the memprints and use the set of cluster centers as
the signature. For simplicity, we used the former method in
the experiments presented in this paper.
Some pages produce highly variable memory allocations
in the browser due to content variation between visits (see
145
Section IV). They are removed from the database, leaving
only the pages for which a signiﬁcant fraction of the repeated
visits produce similar memprints. The similarity threshold is
a parameter of the system; it controls the tradeoff between
false negatives and false positives (see Section VI).
Performing the attack. The attack process runs concur-
rently with the browser process and periodically measures
the latter’s memory footprint as described above. Different
browser versions have different base footprints, enabling
the attacker to infer which signature database to use. The
attacker can download the database or send attack memprints
to a remote server for ofﬂine or online matching.
We use the term attack memprint
to refer to the at-
tacker’s measurements of the browser’s memory footprint
as the browser loads some webpage. The attack memprint is
matched against the signature database using Algorithm 1.
Algorithm 1 Main steps of the matching algorithm
Input: Signature database D, attack memprint sm
Output: Matched page or no match
for each page p in D do
for each signature sigp for page p in D do
if J(sm, sigp) > threshold then
Return matched page p
end if
end for
end for
Return no match
In Section VI, we show how to tune the parameters of
the algorithm so that it produces at most one match, with no
false positives. A successful match thus reveals which page
the victim is browsing. In Section VII, we extend the attack
to infer ﬁner-grained information by exploiting the semantics
of pages within the site and secondary side channels.
IV. MEMORY MANAGEMENT IN MODERN BROWSERS
To explain why the attack of Section III can use temporal
changes in the size of the browser’s memory footprint
to infer which webpage is being loaded, we give a brief
overview of memory management
in modern browsers.
The same principles apply to other applications, too. The
discussion below is Linux-centric, but memory allocators in
other operating systems use similar techniques.
Memory allocation in browsers. Fig. 1 shows an overview
of browser memory management. With a few exceptions
(e.g., Lobo browser implemented in Java), browsers are
implemented in languages from the C family and thus
responsible for their own memory management. Most mem-
ory allocations within the browser are caused by loading
and rendering Web content: running the JavaScript engine,
storing DOM trees, rendering large images, etc.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:37 UTC from IEEE Xplore.  Restrictions apply. 
Different browsers use different allocators. For example,
the main Firefox and Chrome processes use jemalloc and
tcmalloc, respectively. Dynamically and statically linked
libraries often have their own allocators. Libraries linked to
Firefox allocate memory in 22 different ways.2
In Linux, memory is requested from and returned to the
OS using either brk, ormmap/ munmap. brk increases or
decreases contiguous heap space by the requested amount; if
the top of the heap is being used by the program, free space
below cannot be returned to the OS. mmap can allocate non-
contiguous space at page granularity and, unlike brk, freed
pages can be returned to the OS. On some systems, mmap
is signiﬁcantly slower than brk. Memory usage reported by
the OS is rounded up to page size (4KB in Linux).
Most allocators try to minimize the overhead of system
calls and do not call the OS on every malloc and free.
Instead, they use mmap or brk to obtain a chunk of memory
from the OS and manage it internally, allocating and freeing
smaller blocks in response to the program’s requests.
The allocator maintains a list of free blocks, which can
be of different ﬁxed sizes (bins) to minimize fragmentation
when the program’s allocation request does not match the
size of an available block exactly. When the program frees
memory,
it may be added to the list and not returned
immediately to the OS. This has several consequences. First,
a process’s memory footprint from the OS’s viewpoint is
always an overestimate of its actual memory usage. Second,
small allocations do not result in changes in data resident
size and thus remain invisible to the attacker.
Whether a particular malloc call made by the program
results in a mmap or brk call to the OS depends on the
allocator. For example, by default the malloc implemen-
tation in glibc uses mmap for allocations greater than 128
KB. This allocator is employed by the Qt user-interface
library, which is used in the OP browser. Most allocation
requests made by the user-interface component of OP are
below the threshold and thus managed internally by the
allocator, resulting in no visible changes in the observable
2http://blog.mozilla.com/nnethercote/2011/01/07/
memory-proﬁling-ﬁrefox-with-massif-part-2/
footprint. (This does not affect the efﬁcacy of our attack
against OP because we target the rendering process, not the
UI.) Another factor is the amount of fragmentation in the
allocator’s internally managed memory. It depends on the
allocation sequence, as well as mmap/brk usage.
We use the term sensitivity for the extent to which the
program’s memory allocation behavior “ﬁlters through” the
allocator and becomes visible to the OS and—via memory
usage reports—to the attacker. We say that an allocator has
good sensitivity if (1) big differences in the size and order of
objects allocated by the program result in big differences in
the allocator’s mmap/brk behavior, but (2) small differences
in the program’s allocation behavior result in few differ-
ences in the allocator’s mmap/brk behavior. Intuitively, our
attack succeeds if visits to different pages produce different
mmap/brk patterns, but variations between visits to the
same page produce the same pattern.
Figs. 2 through 5 illustrate that (a) the browser’s allocation
requests do not directly translate into OS-visible changes
in the memory footprint, and (b) the pattern of OS-visible
footprints varies between different pages.
Unlike C/C++ allocators, allocators for managed lan-
guages like Java have very low sensitivity. Therefore, the
attack does not work against browsers implemented in Java.
Memory management varies signiﬁcantly not only be-
tween browsers, but also between major releases of the
same browser, thus attack signatures are only valid for a
particular browser and major version. Fortunately, only a
few browsers are in common use, thus the requirement to
compute multiple signature databases is unlikely to present
a signiﬁcant obstacle to the attacker.
Justly or unjustly,
the size of the memory footprint
is a popular metric for comparing browsers. Therefore,
browser implementors try hard to minimize it. For example,
MemShrink is an active software engineering task force that
works on reducing the footprint of Firefox.3 Most of these
changes improve the efﬁcacy of our attack because they
make OS-visible footprints more sensitive to the browser’s
inputs. For instance, in recent versions of Firefox, as soon as
the browser frees a large image, the allocator immediately
returns memory to the OS. This produces an observable
change in the footprint, beneﬁting the attacker.
Nondeterminism of allocation behavior. Typically, given
the same sequence of requests, allocators are largely deter-
ministic. Requests made by the browser, however, are not
the same even when rendering the same HTML content be-
cause of threads, event-driven user interfaces, and JavaScript
execution, which is nondeterministic because of garbage col-
lection, just-in-time compilation, etc. Furthermore, repeated
visits to the same page may return different HTML due to
changes in ads and other dynamic content, thus changing
Figure 1. Overview of browser memory management and memory usage
reporting.
3For
example,
see
http://blog.mozilla.com/nnethercote/2011/10/19/
memshrink-progress-weeks-13-18/
146
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:37 UTC from IEEE Xplore.  Restrictions apply. 
106
105
104
103
102
101
100
l
)
e