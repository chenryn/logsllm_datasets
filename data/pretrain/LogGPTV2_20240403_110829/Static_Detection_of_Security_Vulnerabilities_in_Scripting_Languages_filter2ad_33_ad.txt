$error = 1;
if (!$error) { /* database access using $account */ }
if ($error) redirect("index.php");
Instead of terminating the program immediately based
on the result from preg match, the program sets the $error
ﬂag to true and delays error handling, which is in general
not a good practice. This idiom can be handled by adding
slightly more information in the block summary.
We investigated the ﬁrst two of the remaining warn-
ings for potential exploits and conﬁrmed that both are
indeed exploitable on a test installation. Unsurprisingly
8Information about the results, along with the source codebases, are
available online at:
http://glide.stanford.edu/yichen/research/.
9Database conﬁguration variables such as $db preﬁx accounted for
3 false positives, and information derived from the database queries and
conﬁguration settings (e.g. locale settings) caused the remaining 12.
188
Security ’06: 15th USENIX Security Symposium
USENIX Association
1
both errors are made possible because of the extract op-
eration. We explain these two errors in detail below.
1) Vulnerability in script for recovering lost pass-
word. This is a remotely exploitable vulnerability that
allows any registered user to elevate his privileges via a
carefully constructed URL. We show the relevant code
below:
$new pass .= chr(rand(97, 122));
1 /* php-ﬁles/lostpassword.php */
2 for ($i=0;$i<=7;$i++)
3
4 . . .
5 $result = dbquery("UPDATE ".$db preﬁx."users
6
7
SET user_password=md5(’$new_pass’)
WHERE user_id=’".$data[’user_id’]."’");
Our tool issued a warning for $new pass, which is unini-
tialized on entry and thus defaults to the empty string
during normal execution. The script proceeds to add
seven randomly generated letters to $new pass (lines 2-
3), and uses that as the new password for the user (lines
5-7). The SQL request under normal execution takes the
following form:
UPDATE users SET user password=md5(’???????’)
WHERE user id=’userid’
However, a malicious user can simply add a new pass
ﬁeld to his HTTP request by appending, for example, the
following string to the URL for the password reminder
site:
&new pass=abc%27%29%2cuser level=%27103%27%2cuser aim=%28%27
The extract operation described above will magically in-
troduce $new pass in the current variable scope with the
following initial value:
abc0), user level =0 1030, user aim = (0
The SQL request is now constructed as:
UPDATE users SET user password=md5(’abc’),
user level=’103’, user aim=(’???????’)
WHERE user id=’userid’
Here the password is set to “abc”, and the user privilege
is elevated to 103, which means “Super Administrator.”
The newly promoted user is now free to manipulate any
content on the website.
Our
2) Vulnerability in the messaging sub-system. This
vulnerability exploits another use of potentially unini-
tialized variable $result where message id in the messag-
ing sub system. We show the relevant code in Figure 5.
tool warns about unsanitized use of $re-
sult where message id. On normal input,
the program
initializes $result where message id using a cascading if
statement. As shown in the code, the author is very care-
ful about sanitizing values that are used to construct $re-
sult where message id. However, the cascading sequence
of if statements does not have a default branch. And
therefore, $result where message id might be uninitialized
on malformed input. We exploit this fact, and append
&request where message id=1=1/*
The query string submitted on line 11-13 thus becomes:
if (!isNum($msg view)) fallback("messages.php");
$result where message id="message_id=".$msg view;
if (!isNum($msg reply)) fallback("messages.php");
$result where message id="message_id=".$msg reply;
1 if (isset($msg view)) {
2
3
4 } elseif (isset($msg reply)) {
5
6
7 }
8 . . . /* ˜100 lines later */ . . .
9 } elseif (isset($ POST[’btn_delete’]) | |
10
11
12
13
isset($msg delete)) { // delete message
$result = dbquery("DELETE FROM ".$db preﬁx.
"messages WHERE ".$result where message id. // BUG
" AND ".$result where message to);
Figure 5: An exploitable vulnerability in PHP-fusion
6.00.204.
DELETE FROM messages WHERE 1=1 /* AND . . .
Whatever follows “/*” is treated as comments in MySQL
and thus ignored. The result is loss of all private mes-
sages in the system. Due to the complex control and data
ﬂow, this error is unlikely to be discovered via code re-
view or testing.
We reported both exploits to the author of PHP-fusion,
who immediately ﬁxed these vulnerabilities and released
a new version of the software.
5 Related Work
5.1 Static techniques
WebSSARI is a type-based analyzer for PHP [7]. It uses
a simple intraprocedural tainting analysis to ﬁnd cases
where user controlled values ﬂow into functions that re-
quire trusted input (i.e. sensitive functions). The analysis
relies on three user written “prelude” ﬁles to provide in-
formation regarding: 1) the set of all sensitive functions–
those require sanitized input; 2) the set of all untainting
operations; and 3) the set of untrusted input variables.
Incomplete speciﬁcation results in both substantial num-
bers of false positives and false negatives.
WebSSARI has several key limitations that restrict the
precision and analysis power of the tool:
1. WebSSARI uses an intraprocedural algorithm and
thus only models information ﬂow that does not
cross function boundaries.
Large PHP codebases typically deﬁne a number of
application speciﬁc subroutines handling common
operations (e.g., query string construction, authen-
tication, sanitization, etc) using a small number of
system library functions (e.g., mysql query). Our
algorithm is able to automatically infer information
ﬂow and pre- and post-conditions for such user-
deﬁned functions whereas WebSSARI relies on the
USENIX Association
Security ’06: 15th USENIX Security Symposium
189
1
user to specify the constraints of each, a signiﬁcant
burden that needs to be repeated for each source
codebase examined. Examples in Section 3.3 repre-
sent some common forms of user-deﬁned functions
that WebSSARI is not able to model without anno-
tations.
To show how much interprocedural analysis im-
proves the accuracy of our analysis, we turned off
function summaries and repeated our experiment
on News Pro, the smallest of the ﬁve codebases.
This time, the analysis generated 19 error messages
(as opposed to 8 with interprocedural analysis).
Upon inspection, all 11 extra reports are false posi-
tives due to user-deﬁned sanitization operations.
2. WebSSARI does not seem to model conditional
branches, which represent one of the most common
forms of sanitization in the scripts we have ana-
lyzed. For example, we believe it will report a false
warning on the following code:
if (!is numeric($ GET[’x’]))
exit;
mysql query(‘‘. . . $ GET[’x’] . . .’’);
Furthermore, interprocedural conditional sanitiza-
tion (see the example in Section 3.1.6) is also fairly
common in codebases.
3. WebSSARI uses an algorithm based on static types
that does not speciﬁcally model dynamic features
in scripts. For example, dynamic typing may in-
troduce subtle errors that WebSSARI misses. The
include statement, used extensively in PHP scripts,
dynamically inserts code to the program which may
contain, induce, or prevent errors.
We are unable to directly compare the experimental
results due to the fact that neither the bug reports nor the
WebSSARI tool are available publicly. Nor are we able
to compare false positive rates since WebSSARI reports
per-ﬁle statistics which may underestimate the false pos-
itive ratio. A ﬁle with 100 false positives and 1 real bug
is considered to be “vulnerable” and therefore does not
contribute to the false positive rate computed in [7].
Livshits and Lam [9] develop a static detector for secu-
rity vulnerabilities (e.g., SQL injection, cross site script-
ing, etc) in Java applications. The algorithm uses a BDD-
based context-sensitive pointer analysis [19] to ﬁnd po-
tential ﬂow from untrusted sources (e.g., user input) to
trusting sinks (e.g., SQL queries). One limitation of this
analysis is that it does not model control ﬂow in the pro-
gram and therefore may misﬂag sanitized input that sub-
sequently ﬂows into SQL queries. Sanitization with con-
ditional branching is common in PHP programs, so tech-
niques that ignore control ﬂow are likely to cause large
numbers of false positives on such code bases.
Other tainting analysis that are proven effective on C
code include CQual [4], MECA [21], and MC [6, 2].
Collectively they have found hundreds of previously un-
known security errors in the Linux kernel.
Christensen et. al. [3] develop a string analysis that ap-
proximates string values in a Java program using a con-
text free grammar. The result is widened into a regular
language and checked against a speciﬁcation of expected
output to determine syntactic correctness. However, syn-
tactic correctness does not entail safety, and therefore it
is unclear how to adapt this work to the detection of SQL
injection vulnerabilities. Minamide [10] extends the ap-
proach and construct a string analyzer for PHP, citing
SQL injection detection as a possible application. How-
ever, the analyzer models a small set of string operations
in PHP (e.g., concatenation, string matching and replace-
ment) and ignores more complex features such as dy-
namic typing, casting, and predicates. Furthermore, the
framework only seems to model sanitization with string
replacement, which represents a small subset of all san-
itization in real code. Therefore, accurately pinpointing
injection attacks remains challenging.
Gould et. al. [5] combines string analysis with type
checking to ensure not only syntactic correctness but also
type correctness for SQL queries constructed by Java
programs. However, type correctness does not imply
safety, which is the focus of our analysis.
5.2 Dynamic Techniques
Scott and Sharp [15] propose an application-level ﬁre-
wall to centralize sanitization of client input. Firewall
products are also commercially available from compa-
nies such as NetContinuum, Imperva, Watchﬁre, etc.
Some of these ﬁrewalls detect and guard against pre-
viously known attack patterns, while others maintain a
white list of valid inputs. The main limitation here is that
the former is susceptible to both false positives and false
negatives, and the latter is reliant on correct speciﬁca-
tions, which are difﬁcult to come by.
The Perl taint mode [12] enables a set of special secu-
rity checks during execution in an unsafe environment. It
prevents the use of untrusted data (e.g., all command line
arguments, environment variables, data read from ﬁles,
etc) in operations that require trusted input (e.g., any
command that invokes a sub-shell). Nguyen-Tuong [11]
proposes a taint mode for PHP, which, unlike the Perl
taint mode, not deﬁne sanitizing operations. Instead, it
tracks each character in the user input individually, and
employs a set of heuristics to determine whether a query
is safe when it contains fragments of user input. For ex-
ample, among others, it detects an injection if an opera-
tor symbol (e.g., “(”, “)”, “%”, etc) is marked as tainted.
This approach is susceptible to both false positives and
190
Security ’06: 15th USENIX Security Symposium
USENIX Association
1
false negatives. Note that static analyses are also sus-
ceptible to both false positives and false negatives. The
key distinction is that in static analyses, inaccuracies are
resolved at compile time instead of at runtime, which is
much less forgiving.
6 Conclusion
We have presented a static analysis algorithm for detect-
ing security vulnerabilities in PHP. Our analysis employs
a novel three-tier architecture that enables us to handle
dynamic features unique to scripting languages such as
dynamic typing and code inclusion. We demonstrate
the effectiveness of our approach by running our tool
on six popular open source PHP code bases and ﬁnding
105 previously unknown security vulnerabilities, most of
which we believe are remotely exploitable.
Acknowledgement
This research is supported in part by NSF grants
SA4899-10808PG, CCF-0430378, and an IBM Ph.D.
fellowship. We would like to thank our shepherd An-
drew Myers and the anonymous reviewers for their help-
ful comments and feedback.
References
[1] A. Aiken, E. Wimmers, and T. Lakshman. Soft typ-
ing with conditional types. In Proceedings of the
21st Annual Symposium on Principles of Program-
ming Languages, 1994.
[2] K. Ashcraft and D. Engler. Using programmer-
written compiler extensions to catch security holes.
In 2002 IEEE Symposium on Security and Privacy,
2002.
[3] A. Christensen, A. Moller, and M. Schwartzbach.
Precise analysis of string expressions. In Proceed-
ings of the 10th Static Analysis Symposium, 2003.
[4] J. S. Foster, T. Terauchi, and A. Aiken. Flow-
sensitive type qualiﬁers.
In Proceedings of the
2002 ACM SIGPLAN Conference on Programming
Language Design and Implementation, pages 1–12,
June 2002.
[5] C. Gould, Z. Su, and P. Devanbu. Static checking
of dynamically generated queries in database ap-
plications. In Proceedings of the 26th International
Conference on Software Engineering, 2004.
[6] S. Hallem, B. Chelf, Y. Xie, and D. Engler. A
system and language for building system-speciﬁc,
In Proceedings of the ACM SIG-
static analyses.
PLAN 2002 Conference on Programming Lan-
guage Design and Implementation, Berlin, Ger-
many, June 2002.
[7] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D. Lee,
and S.-Y. Kuo. Securing web application code by
static analysis and runtime protection. In Proceed-
ings of the 13th International World Wide Web Con-
ference, 2004.
[8] X. Leroy, D. Doligez, J. Garrigue, and J. Vouil-
lon.
Soft-
ware and documentation available on the web,
http://caml.inria.fr.
The Objective Caml system.
[9] V. Livshits and M. Lam. Finding security vulner-
abilities in Java applications with static analysis.
In Proceedings of the 14th Usenix Security Sympo-
sium, 2005.
[10] Y. Minamide. Approximation of dynamically gen-
erated web pages. In Proceedings of the 14th Inter-
national World Wide Web Conference, 2005.
[11] A. Nguyen-Tuong, S. Guarnieri, D. Greene,
J. Shirley, and D. Evans. Automatically harden-
ing web applications using precise tainting. In Pro-
ceedings of the 20th International Information Se-
curity Conference, 2005.
[12] Perl documentation: Perlsec. http://search.
cpan.org/dist/perl/pod/perlsec.pod.
[13] PHP: Hypertext Preprocessor. http://www.php.
net.
[14] PHP usage statistics. http://www.php.net/
usage.php.
[15] D. Scott and R. Sharp. Abstracting application-
level web security. In Proceedings of the 11th In-
ternational World Wide Web Conference, 2002.
[16] Security space apache module survey (Oct 2005).
http://www.securityspace.com/s survey/
data/man.200510/apachemods.html.
[17] Symantec Internet security threat report: Vol. VII.
Technical report, Symantec Inc., Mar. 2005.
[18] TIOBE programming
community
index
for
November 2005.
http://www.tiobe.com/tpci.htm.
[19] J. Whaley and M. Lam. Cloning-based context-
sensitive pointer alias analysis using binary de-
cision diagrams.
the ACM
SIGPLAN 2004 Conference on Programming Lan-
guage Design and Implementation, 2004.
In Proceedings of
USENIX Association
Security ’06: 15th USENIX Security Symposium
191
1
[20] A. Wright and R. Cartwright. A practical soft type
system for Scheme. ACM Trans. Prog. Lang. Syst.,
19(1):87–152, Jan. 1997.
[21] J. Yang, T. Kremenek, Y. Xie, and D. Engler.
MECA: an extensible, expressive system and lan-
guage for statically checking security properties. In
Proceedings of the 10th Conference on Computer
and Communications Security, 2003.
192
Security ’06: 15th USENIX Security Symposium
USENIX Association
1