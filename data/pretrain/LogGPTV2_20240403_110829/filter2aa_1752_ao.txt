### 5.5.3 改变有效用户和组 ID

在 Linux 中，POSIX 提供了改变进程的有效用户 ID 和组 ID 的方法。

#### 相关函数
```c
#include <unistd.h>
#include <sys/types.h>

int seteuid(uid_t euid);
int setegid(gid_t egid);
```

- `seteuid()` 函数将调用进程的有效用户 ID 设置为 `euid`。
- `setegid()` 函数将调用进程的有效组 ID 设置为 `egid`。

#### 使用说明
- 只有 root 用户可以将有效用户 ID 设置为任何值。普通用户只能将其设置为真实用户 ID 或保存的设置用户 ID。
- 如果 `seteuid()` 调用失败，返回 -1 并将 `errno` 设置为 `EPERM`。
- 对于 root 用户，`seteuid()` 和 `setuid()` 是等效的。对于非 root 用户，`seteuid()` 可以更灵活地改变有效用户 ID。

### 5.5.4 BSD 改变用户 ID 和组 ID 的方式

BSD 系统提供了不同的方法来改变用户 ID 和组 ID。

#### 相关函数
```c
#include <unistd.h>
#include <sys/types.h>

int setreuid(uid_t ruid, uid_t euid);
int setregid(gid_t rgid, gid_t egid);
```

- `setreuid()` 函数将调用进程的真实用户 ID 和有效用户 ID 分别设置为 `ruid` 和 `euid`。
- `setregid()` 函数将调用进程的真实组 ID 和有效组 ID 分别设置为 `rgid` 和 `egid`。

#### 使用说明
- 如果 `ruid` 或 `euid` 设置为 -1，则表示保持当前的值不变。
- 只有 root 用户可以将有效用户 ID 设置为任何值。普通用户只能将其设置为真实用户 ID 或保存的设置用户 ID。
- 如果 `setreuid()` 调用失败，返回 -1 并将 `errno` 设置为 `EPERM`。

### 5.5.5 HP-UX 中改变用户 ID 和组 ID 的方式

HP-UX (Hewlett-Packard's Unix) 提供了另一种改变用户 ID 和组 ID 的方法。

#### 相关函数
```c
#define _GNU_SOURCE
#include <unistd.h>
#include <sys/types.h>

int setresuid(uid_t ruid, uid_t euid, uid_t suid);
int setresgid(gid_t rgid, gid_t egid, gid_t sgid);
```

- `setresuid()` 函数将调用进程的真实用户 ID、有效用户 ID 和保存的设置用户 ID 分别设置为 `ruid`、`euid` 和 `suid`。
- `setresgid()` 函数将调用进程的真实组 ID、有效组 ID 和保存的设置组 ID 分别设置为 `rgid`、`egid` 和 `sgid`。

#### 使用说明
- 如果 `ruid`、`euid` 或 `suid` 设置为 -1，则表示保持当前的值不变。
- 只有 root 用户可以将这些 ID 设置为任何值。普通用户只能将其设置为真实用户 ID 或保存的设置用户 ID。
- 如果 `setresuid()` 调用失败，返回 -1 并将 `errno` 设置为 `EAGAIN`（如果进程数超过 `NPROC`）或 `EPERM`（如果权限不足）。

### 5.5.6 操作用户 ID 和组 ID 的首选方法

- 对于 root 用户，建议使用 `seteuid()` 来设置有效用户 ID。
- 对于非 root 用户，可以在需要时使用 `setuid()` 和 `seteuid()` 来灵活地改变用户 ID。

### 5.5.7 对保存设置的用户 ID 的支持

- 保存的设置用户 ID 是 IEEE Std 1003.1-2001 (POSIX 2001) 引入的一个特性。
- Linux 从 1.1.38 版本开始支持保存的设置用户 ID。
- 其他 Unix 系统可能也支持这一特性，但具体实现可能有所不同。

### 5.5.8 获取用户 ID 和组 ID

#### 相关函数
```c
#include <unistd.h>
#include <sys/types.h>

uid_t getuid(void);
gid_t getgid(void);

uid_t geteuid(void);
gid_t getegid(void);
```

- `getuid()` 和 `getgid()` 分别获取调用进程的真实用户 ID 和真实组 ID。
- `geteuid()` 和 `getegid()` 分别获取调用进程的有效用户 ID 和有效组 ID。

### 5.6 会话和进程组

#### 会话和进程组的概念
- 进程组是一组相关的进程，通常用于控制终端输入输出。
- 会话是一个或多个进程组的集合，由一个会话领导进程 (session leader) 创建。
- 会话领导进程通常是 shell 进程。

#### 相关系统调用
```c
#include <unistd.h>

pid_t setsid(void);
pid_t getsid(pid_t pid);
```

- `setsid()` 创建一个新的会话，并使调用进程成为会话领导进程。
- `getsid(pid)` 获取指定进程的会话 ID。如果 `pid` 为 0，则获取调用进程的会话 ID。

#### 进程组相关系统调用
```c
#include <unistd.h>

int setpgid(pid_t pid, pid_t pgid);
pid_t getpgid(pid_t pid);
```

- `setpgid(pid, pgid)` 将指定进程的进程组 ID 设置为 `pgid`。如果 `pgid` 为 0，则设置为 `pid`。
- `getpgid(pid)` 获取指定进程的进程组 ID。如果 `pid` 为 0，则获取调用进程的进程组 ID。

### 5.7 守护进程

守护进程是一种在后台运行的特殊进程，通常不与终端交互。常见的守护进程包括 `crond` 和 `sshd`。

#### 创建守护进程的步骤
1. 调用 `fork()` 创建一个新的进程，并使父进程退出。
2. 调用 `setsid()` 创建一个新的会话，并成为会话领导进程。
3. 调用 `chdir("/")` 将工作目录设置为根目录。
4. 关闭所有打开的文件描述符。
5. 重定向标准输入、输出和错误到 `/dev/null`。

#### 示例代码
```c
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <sys/stat.h>

int main(void) {
    pid_t pid;
    int i;

    // 创建新的进程
    pid = fork();
    if (pid == -1) {
        return -1;
    } else if (pid != 0) {
        exit(EXIT_SUCCESS);
    }

    // 创建新的会话和进程组
    if (setsid() == -1) {
        return -1;
    }

    // 设置工作目录为根目录
    if (chdir("/") == -1) {
        return -1;
    }

    // 关闭所有打开的文件
    for (i = 0; i < NR_OPEN; i++) {
        close(i);
    }

    // 重定向标准输入、输出和错误
    open("/dev/null", O_RDWR);
    dup(0);
    dup(0);

    // 主程序逻辑
    while (1) {
        // 守护进程的主要任务
    }

    return 0;
}
```

### 5.8 总结

本章介绍了进程管理中的关键概念和技术，包括改变用户 ID 和组 ID、会话和进程组、以及创建守护进程的方法。通过这些内容，读者可以更好地理解和应用进程管理的相关 API 和技术。

---

### 第 6 章 高级进程管理

本章将进一步探讨高级进程管理的技术，包括进程调度、时间片分配等内容。

#### 6.1 进程调度

进程调度是操作系统的核心功能之一，负责决定哪些进程可以获得 CPU 时间。Linux 使用多种调度算法来优化性能和响应时间。

#### 6.1.1 大 O 记法

大 O 记法用于描述算法的时间复杂度。例如，O(1) 表示常数时间复杂度，即无论输入规模如何，算法的执行时间都是固定的。

#### 6.1.2 时间片

时间片是指每个进程在 CPU 上运行的一段时间。合理的时间片分配可以提高系统的响应性和吞吐量。

通过这些内容，读者可以深入了解 Linux 进程调度的机制和优化方法。