abc:\]\[\}\{
The following regex matches the string, $25.50:
\$\d+\.\d+
The following regex matches the string, ^*+.:
\^\*\+\.
Escaping inside a character class
In the Java regex engine, all the special regex metacharacters lose their special meaning
inside a character class except the ^ (carrot), - (hyphen), ] (right square bracket), and \
(backslash) characters.
[ 27 ]
Understanding the Core Constructs of Java Regular Expressions
Inside a character class, the hyphen also does not need to be escaped when
used as the first or last character, since a character range requires both the
left-hand side and the right-hand side characters. Similarly, ^ (carrot)
needs to escaped only when used as the first character inside a character
class.
Examples of escaping rules inside the character class
The following regex matches a string containing one or more of the ap.9 characters:
^[ap9.]+$
The dot (.) doesn't need to be escaped inside the character class.
The following regex matches a string containing one or more of the @#$%.* characters:
^[$#@%.*]+$
None of the preceding special characters require escaping inside the character class.
The following regex matches a string containing one or more of the ?*+. characters:
^[*+?.]+$
The following regex matches an input that allows any digit, ], or ^ in the input:
^[\^\]0-9]+$
We can also write our regex as ^[\]0-9^]+$ by moving ^ away from the first position and
avoiding the escaping.
The following regex matches an input that allows any alphanumeric character, hyphen, dot,
or backslash, such as xyzTR-4.5\00:
^[a-zA-Z0-9.\-\\]+$
We can also write our regex as follows by moving - to the last position inside the character
class, thus avoiding the escaping:
^[a-zA-Z0-9.\\-]+$
[ 28 ]
Understanding the Core Constructs of Java Regular Expressions
Literally matching a string that may contain special
regex metacharacters
We have seen how we need to escape all the special regex metacharacters to be able to
match them literally.
The Java regex engine provides special escape sequences, \Q and \E, for this purpose. Any
string that is wrapped between \Q and \E looses interpretation of all the regex
metacharacters in the wrapped string.
For example, to write a regex that matches a string ^*+., we can avoid all escaping and use
this regex:
\Q^*+.\E
Note that there must not be any character escaping between \Q and \E sequences.
To match an input string, "[a-z0-9]", we can write our regex as follows:
\Q[a-z0-9]\E
Java provides a convenient method to return a literal pattern sting for the given string
called Pattern.quote(String). We will learn about this method in Chapter 5,
Introduction to Java Regular Expressions APIs - Pattern and Matcher Classes, of the book.
Negated character classes
By placing the carrot character (^) in the first position inside a character class (just next to [)
negates the matching of the character class. A negated character class matches any character
that is not included in the class. A negated character class also negates a character range by
matching any character not matched by the character range.
You learned in Chapter 1, Getting Started with Regular Expressions, that dot
(.) matches any character except the newline character. However, note
that the negated character class also matches newline characters such as
\r, \n, and so on.
Examples of negated character classes
The following regex matches any character except a forward slash:
[^/]
[ 29 ]
Understanding the Core Constructs of Java Regular Expressions
Also, remember the fact that a negated character such as [^/] must match a single
character. It doesn't match zero-width assertions such as ^, $, \Z, \z, \b, \B, and so on.
The following regex matches any character but a and A:
[^aA]
The following regex matches all the consonants of the English language:
[^aeiou]
All non-vowels are considered consonants; hence, we just need to negate the vowel character
class.
The following regex matches all the characters except digits, dots, and line breaks:
[^0-9.\r\n]
In this regex, we could also use the predefined property \d for [0-9]:
[^\d.\r\n]
This regex matches http followed by any character except s:
http[^s]
Predefined shorthand character classes
As we have seen from the preceding examples, certain character classes, such as digits
[0-9] or word characters [0-9A-Za-z_], are used in most regex patterns. The Java
language, like all regular expression flavors, provides convenient predefined character
classes for these character classes. Here is the list:
Shorthand Meaning Character Class
Class
\d A digit 0-9 [0-9]
\D A non-digit [^\d]
\w A word [a-zA-Z0-9_]
character
W A non-word [^\w]
character
[ 30 ]
Understanding the Core Constructs of Java Regular Expressions
\s A whitespace [ \t\r\n\f\x0B]
character,
including line
break
\S A non- [^\s]
whitespace
chacracter
\h A horizontal [ \t\xA0\u1680\u180e\u2000-
whitespace \u200a\u202f\u205f\u3000]
character
\H A non- [^\h]
horizontal
whitespace
character
\v A vertical [\n\x0B\f\r\x85\u2028\u2029]
whitespace
character
\V A non-vertical [^\v]
whitespace
character
POSIX character classes
Java also supports many POSIX character classes for matching ASCII text. Here is the list:
POSIX Meaning Character Class
Character Class
\p{ASCII} All ASCII characters [\x00-\x7F]
\p{Digit} Any digit [0-9]
\p{Lower} Lowercase alphabets [a-z]
\p{Upper} Uppercase alphabets [A-Z]
\p{Alpha} Any alphabet [\p{Lower}\p{Upper}]
\p{Alnum} Any alpha-numeric [\p{Lower}p{Upper}\p{Digit}]
character
\p{Punct} A punctuation [!"\#$%&'()*+,-./:;?@\[\\\]^_`{|}~]
character
[ 31 ]
Understanding the Core Constructs of Java Regular Expressions
\p{Blank} Space or tab [ \t]
\p{Space} A whitespace character [ \t\n\x0B\f\r]
\p{Graph} A visible ASCII [\p{Alnum}\p{Punct}]
character
\p{Print} A printable character [\p{Graph}\x20]
\p{Cntrl} A control character [\x00-\x1F\x7F]
\p{XDigit} A hexadecimal digit [0-9a-fA-F]
Java also supports four additional predefined character classes based on the
java.lang.Character methods:
Class Name Implementing Method
\p{javaLowerCase} Equivalent to java.lang.Character.isLowerCase()
\p{javaUpperCase} Equivalent to java.lang.Character.isUpperCase()
\p{javaWhitespace} Equivalent to java.lang.Character.isWhitespace()
\p{javaMirrored} Equivalent to java.lang.Character.isMirrored()
Unicode support in Java regular expressions
So far, all the examples that we have seen in the first two chapters are for the English
language only. However, a regular expression needs to have full support for all the
languages using Unicode characters. Java has a Unicode-based regex engine and has
extensive support for various Unicode scripts, blocks, and categories.
A specific Unicode character can be matched in two different ways in Java:
1. Unicode escape sequence or the \u notation: This can be written as "\u1234" or
"\\u1234".
2. Hex notation: This can be written as "\x{1234}".
Commonly used Unicode character properties
Here is the list of commonly used Unicode character properties in regular expressions that
require to match Unicode texts:
[ 32 ]
Understanding the Core Constructs of Java Regular Expressions
Unicode Meaning
character
class
\p{L} Match any letter from any language
\p{Lu} Match any uppercase letter from any language
\p{Ll} Match any lowercase letter from any language
\p{N} Match any digit from any language
\p{P} Match any punctuation letter from any language
\p{Z} Match any kind of whitespace or invisible separator
\p{C} Match any invisible control letter
\p{Sc} Match any currency symbol
\R Any Unicode linebreak sequence; is equivalent to
\u000D\u000A|[\u000A\u000B\u000C\u000D\u0085\u2028\u2029]
It is recommended to use \R to match any newline character even if dealing
with ASCII text.
Negation of the preceding regex directives
To match a single character belonging to a particular category, we use the
\p{propertyName} directive.
To match a single character not belonging to a particular category, we use the
\P{propertyName} directive (note the uppercase P instead of the lowercase p).
Unicode scripts support
Java supports all the Unicode scripts as defined by the Unicode standard. Here is a list of all
the supported Unicode scripts:
\p{IsCommon}
\p{IsArabic}
\p{IsArmenian}
\p{IsBengali}
\p{IsBopomofo}
\p{IsBraille}
[ 33 ]
Understanding the Core Constructs of Java Regular Expressions
\p{IsBuhid}
\p{IsCanadian_Aboriginal}
\p{IsCherokee}
\p{IsCyrillic}
\p{IsDevanagari}
\p{IsEthiopic}
\p{IsGeorgian}
\p{IsGreek}
\p{IsGujarati}
\p{IsGurmukhi}
\p{IsHan}
\p{IsHangul}
\p{IsHanunoo}
\p{IsHebrew}
\p{IsHiragana}
\p{IsInherited}
\p{IsKannada}
\p{IsKatakana}
\p{IsKhmer}
\p{IsLao}
\p{IsLatin}
\p{IsLimbu}
\p{IsMalayalam}
\p{IsMongolian}
\p{IsMyanmar}
\p{IsOgham}
\p{IsOriya}
\p{IsRunic}
\p{IsSinhala}
\p{IsSyriac}
\p{IsTagalog}
\p{IsTagbanwa}
\p{IsTaiLe}
\p{IsTamil}
[ 34 ]
Understanding the Core Constructs of Java Regular Expressions
\p{IsTelugu}
\p{IsThaana}
\p{IsThai}
\p{IsTibetan}
\p{IsYi}
Unicode blocks: Java supports all the previously listed script for matching Unicode blocks.
We just need to replace Is with In in the preceding expressions. For example, to check for a
Thai code block, we can use:
\p{InThai}
Examples of matching Unicode text in regular expressions
The following regex will match accented characters, such as "à":
^\p{L}+$
The following regex will match a text consisting of Latin characters and Unicode
whitespaces:
^[\p{IsLatin}\p{Zs}]+$
The following regex should be used to detect the presence of a Hebrew character in input:
\p{InHebrew}
The following regex should be used to detect an input that contains only Arabic text:
^\p{InArabic}+$
How can we match Urdu text? Since Urdu is not a script, we will need to match certain
Unicode code ranges. These are as follows:
U+0600 to U+06FF
U+0750 to U+077F
U+FB50 to U+FDFF
U+FE70 to U+FEFF
A Java regex to detect the presence of any Urdu character will be:
[\u0600-\u06FF\u0750-\u077F\uFB50-\uFDFF\uFE70​-\uFEFF]
[ 35 ]
Understanding the Core Constructs of Java Regular Expressions
Double escaping in a Java String when defining regular
expressions
In Java, all the regular expressions are entered as a String type, where \ acts as an escape
character and is used to interpret certain special characters such as \t, \n, and so on. So, it
is necessary to double-escape all the predefined classes, such as \w, \d, \s, using two
backslashes and while escaping metacharacters, such as \[, \(, \+, and so on, in string
literals.
If we have to use the preceding regex for a dollar amount in Java, then it would be as
follows:
final String re = "\\$\\d+\\.\\d+";
The preceding example that matches a signed decimal number has to be written as follows
in Java:
final String re = "^[+-]?\\d*\\.?\\d+$";
For the same reasons, if we have to match a single backslash character, then it would be as
follows:
\\\\
How can we write a regex string that matches an input that allows any alphanumeric
character, hyphen, dot, or backslash, such as xyzTR-4.5\00? Here is how:
final String re = "^[a-zA-Z0-9.\-\\\\]+$";
How can we write a regular expression in Java that will accept any Latin character, Unicode
whitespaces, or Unicode digits? Refer to the following regex:
final String re = "^[\\p{IsLatin}\\p{Zs}\\p{N}]+$";
How to write a regular expression in Java that will accept any Unicde character, Unicode
whitespaces, Unicode digits, or Unicode punctuation characters? Check out the following
regex:
final String re = "^[\\p{L}\\p{Z}\\p{N}\\p{P}]+$";
The following Java regex matches the string, "abc:][}[":
final String re = "abc:\\]\\[\\}\\{";
[ 36 ]
Understanding the Core Constructs of Java Regular Expressions
Embedded regular expression mode modifiers
Like all other regular expression flavors, Java also allows the embedding of some standard
modes in the regular expression itself. These mode modifiers are used to change regular
expression behavior in a certain manner. In the following table, we will list all these modes
and their meaning:
Mode Name Meaning
(?i) Ignore case mode Enables case-insensitive matching for US-ASCII text
(?s) DOTALL mode Makes DOT match all the characters, including line
breaks
(?m) Multiline mode Makes the carrot and dollar match the start and end of
each line in a multiline input
(?u) Unicode-aware case folding Enables Unicode-aware case folding
(?U) Unicode matching Enables the Unicode version of predefined character
classes and POSIX character classes.
(?d) Unix line mode Enables Unix lines mode
(?x) Comment mode Allows for the presence of whitespace and comments in
the regex pattern
Let's check some examples to understand these modes better.
How to match an input in which the starting word is Java and the ending word is Mode,
and we don't know what is in between these two words? Also, the input may contain line
breaks as well.
Consider the following example input text, which is in two lines:
Java regex
Embedded Mode
Let's use the following regex:
\AJava.*Mode\z
If we use the preceding regex, then the match will fail because we know that DOT matches
all the characters except line breaks by default. Hence, we need to enable the DOTALL
mode here using the following:
(?s)\AJava.*Mode\z
[ 37 ]
Understanding the Core Constructs of Java Regular Expressions
Our regex will match the input because (?s) will enable the DOTALL mode and then .*
will match the text between Java and Mode.
It is considered good practice to insert comments and line breaks in a complex and lengthy
regular expression. In order to allow that, we will need to enable the comment mode using
(?x).
Here is an example of a regex with comments and extra whitespaces using multiple
modifiers, including (?x):
String regex = "(?ixs)\\A # assert start of the string\n"
+ "java\n"
+ "\\s\n"
+ "regex\n"
+ ".* # match 0 or more of any character including line breaks\n"
+ "Mode\n"
+ "\\z # assert end of the string";
It is interesting to note that this regular expression will still match the input text that we
used in the previous example. You can clearly see how the use of (?x) allows us to use
arbitrary white-spaces and inline comments in our regex.
Let's examine the use of the MULTILINE mode. In the same input text, that is, Java
regex\nEmbedded Mode, what would be the regular expression that validates the first line
only, which contains the text, Java regex?
Let's use anchors (caret and dollar) and write the regex as follows:
^Java regex$
This regex will fail to match our input because the input contains two lines and $ will not
assert the position at the end of every line without enabling the MULTILINE mode.
Change your regex to the following: