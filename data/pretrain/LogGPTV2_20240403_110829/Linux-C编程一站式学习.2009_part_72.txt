第31章Shell脚本
起始页
上一级
1. Shell的历史
586
下一F
---
## Page 587
8
---
## Page 588
很多变种。
文件/etc/shells给出了系统中所有已知（不一定已安装）的Shell，除了上面提到的Shell之外还有
由于历史原因，UNIX系统上有很多种Shell:
行敲到Shell提示符下执行。
要编译，Shel程序从脚本中-
命令。Shell脚本和编程语言很相似，
个Shell脚本（Script）
互式（Interactive），Shell还有一种执行命令的方式称为批处理（Batch）
Shell的作用是解释执行用户的命令,
1. Shell的历史 请点评
1．sh（Bourne Shell）：由Steve Bourne开发，各种UNIX系统都配有sh。
上一页
4.tcsh（TENEXC Shell）：是csh的增强版本，引入了命令补全等功能，在FreeBSD、Mac
时兼顾对sh的兼容，bash从csh和ksh借鉴了很多功能，是各种Linux发行版标准配置的Shell,
OS X等系统上替代了csh。
假装自己是sh，不认扩展的命令，并且行为与sh保持一致。
接
是目前很多UNIX系统标准配置的Shell，在这些系统上/bin/sh往往是指向/bin/ksh的符号链
多Bourne Shell所不支持的功能：作业控制，命令历史，命令行编辑。
csh (C Shell) :
为并不一
不同的，
/bin/bash
/bin/dash
/usr/bin/esh
/usr/bin/rc 
/bin/sh
/bin/csh
。
/etc/shells: valid login shells
一方面，
：由Bill Joy开发，
 其中有很多条命令，让Shell一次把这些命令执行完，
一行一
一行读取并执行这些命令，相当于-
 也有变量和流程控制语句,
用户输入一条命令，
随BSD UNIX发布，
全国嵌入式人才培训基地
第31章 Shell脚本
1. Shell的历史
，向后兼容sh的功能，并且添加了csh引入的新功能,
，Shell就解释执行一条,
，主要目标是与POSIX标准保持一致，
，它的流程控制语句很像C语言，支持很
 但Shell脚本是解释执行的，不需
个用户把脚本中的命令一行
，而不必一条一条地敲
用户事先写一
 这种方式称为交
下一页
同
---
## Page 589
[3] 最新的发行版有一些变化,
本章只介绍bash和sh的用法和相关语法，
用户mia从字符终端登录或者打开图形终端窗口时就会自动执行/bin/bash。如果要切换到其
用户的默认Shell设置在/etc/passwd文件中，例如下面这行对用户mia的设置:
第31章 Shell脚本
它Shell，可以在命令行输入程序名，例如：
一种类似bash的Shell。
一页
$ ls /bin/sh /bin/dash -l
S
mia:L2N0fqdlPrHwE:504:504:Mia Maya:/home/mia:/bin/bash
lrwxrwxrwx 1
-rwxr-
S
/usr/bin/screen
/bin/rbash 
S
(再次按ctrl-d或者输入exit命令会退出登录或者关闭图形终端窗口）
（按Ctrl-d或者输入exit命令）
 sh（在bash提示符下输入sh命令)
root
root
root
root
例如Ubuntu 7.10的/bin/sh是指向/bin/dash的符号链接，dash也是
全国嵌入式人才培训基地
，不介绍其它Shell。所以下文提到Shell都是指bash或sh。
起始页
上一级
/bin/sh 
-> dash
 2. Shel如何执行命令
1
589
FI
7
---
## Page 590
Shell脚本中用#表示注释，相当于C语言的//注释。但如果#位于第一行开头，
2.2.执行脚本 请点评
现cd命令的功能，用chdir(2)函数可以改变进程的当前工作目录。
执行cd命令,
进程，但执行结束后也会有一个状态码，也可以用特殊变量s?读出。
令都是内建命令，内建命令没有单独的man手册，要在man手册中查看内建命令，应该 
的cd、alias、umask、exit等命令即是内建命令,
2.1.执行交互式命令 请点评
2. Shell如何执行命令 请点评
件加上可执行权限然后执行：
为Shebang）则例外，
首先编写一个简单的脚本，
就像/bin/ls一样?
2、思考一下，
1、在完成第5节“练习：实现简单的Shelr时也许有的读者已经试过了,
习题请点评
建新的进程,
本节会介绍很多内建命令，
行内建命令相当于调用Shell进程中的一个函数，
用户在命令行输入命令后，
上一页
例31.1.简单的Shell脚本
S
因为cd是一
但也会有Exit Status，
，为什么cd命令要实现成内建命令？可不可以实现一个独立的ca程序，例如/bin/cd,
8
#! /bin/sh
，它表示该脚本使用后面指定的解释器/bin/sh解释执行。如果把这个脚本文
一个内建命令，
，保存为script.sh:
一般情况下Shell会fork并exec该命令，
，通常也用0表示成功非零表示失败，虽然内建命令不创建新的
没有程序文件,
2.Shell如何执行命令
全国嵌入式人才培训基地
第31章Shell脚本
并不创建新的进程。以前学过
凡是用which命令查不到程序文件所在位置的命
不能用exec执行。现在请完善该程序，实
，、for、while等等。内建命令虽然不创
，但是Shell的内建命令例外，执
在自己实现的Shell中不能
，并且是#！（称
590
下一
贝
---
## Page 591
这两种方法本质上是一样的，执行上述脚本的步骤为:
以上介绍了两种执行Shell脚本的方法:
执行./script相当于执行程序
是script，它的开头是
以这种方式执行不需要script.sh文件具有可执行权限。再举个例子，比如某个sed脚本的文件名
行程序
件，并且第一行用Shebang指定了解释器，
段替换成./script.sh程序的代码段,
Shell会fork一个子进程并调用exec执行./script.sh这个程序，
图 31.1. Shell脚本的执行过程
$ /bin/sed -f ./script.sh
S
SS
#！
S
./script.sh
 /bin/sh ./script.sh
sh
 chmod +x script.sh
 /bin/sed -f
./script.sh
，则用解释器程序的代码段替换当前进程，
 exec系统调用应该把子进程的代码
如果要执行的是一个文本文
-.............
，并且从解释器
根
---
## Page 592
式相当于这样执行Shell脚本：
则有不同的效果，
交互式Shell。然而命令
和上面两种方法执行Shell脚本的效果是相同的，cd..命令改变的是子Shell的pwD，而不会影响到
行中可以输入由分号;隔开的多个命令，比如：
如果将命令行下输入的命令用()括号括起来，
5．sh终止后，bash继续执行，打印提示符等待用户输入。
4．ls终止后，sh继续执行，
3．sh读取脚本中的1s命令，fork/exec这个程序，列出当前工作目录下的文件，sh等待1s终止。
2.s
1.
 sh读取脚本中的cd..命令，调用相应的函数执行内建命令，改变当前工作目录为上一级目
交互Shell（bash）fork/exec一个子Shell（sh）用于执行脚本，
录。
止。
5
w
N
S
S
S
 source ./script.sh
(cd ..;ls -l)
cd
cwd: /home/akaedu
cwd: /home/akaedu
cwd: /home/akaedu
cwd: /home/akaedu
cwd:/home/akaedu
··;ls-l
cd
bash
bash
bash
bash
bash
..命令是直接在交互式Shell下执行的，改变交互式Shell的pwD，然而这种方
读到脚本文件末尾，sh终止。
wait
wait
wait
wait
fork
cwd:/home/akaedu
，那么也会fork出一个子Shell执行小括号中的命令，
cwd: /home
cwd: /home
cwd: /home
sh
sh
sh
sh
EOF
cd ..
fork
父进程bash等待子进程sh终
cwd: /home
---
## Page 593
1、解释如下命令的执行过程：
习题请点评
执行脚本中的命令。
source或者.命令是Shell的内建命令，这种方式也不会创建子Shell，而是直接在交互式Shell下逐行
或者
1. Shell的历史
一页
S
S
S
(exit 
./script.sh
全国嵌入式人才培训基地
起始页
上一级
 3. Shell的基本语法
593
---
## Page 594
用sVARNAME表示它的值。通过以下例子比较这两种表示法的不同：
如果一个变量叫做VARNAME，
用unset命令可以删除已定义的环境变量或本地变量。
也可以分两步完成：
变量，定义和导出环境变量通常可以一步完成：
注意等号两边都不能有空格，否则会被Shel解释成命令和命令行参数。
环境变量
3.1.变量 请点评
3. Shell的基本语法 请点评
一个变量定义后仅存在于当前Shell进程，它是本地变量，用export命令可以把本地变量导出为环境
量的定义和用法相似。在Shel中定义或赋值一个变量：
环境变量是任何进程都有的概念，
本地变量
按照惯例，
上一页
量和环境变量）和函数。
只存在于当前Shell进程,
变量。
可以从当前Shell进程传给fork出来的子进程。用printenv命令可以显示当前Shell进程的环境
在第2节“环境变量"中讲过，环境变量可以从父进程传给子进程，
$ unSet VARNAME
SS
S
 export VARNAME
VARNAME=value
VARNAME=Value
，Shell变量由全大写字母加下划线组成，有两种类型的Shell变量:
用${VARNAME}可以表示它的值，
 用set命令可以显示当前Shell进程中定义的所有变量（包括本地变
 而本地变量是Shell特有的概念。在Shell中，环境变量和本地变
全国嵌入式人才培训基地
第31章 Shell脚本
3.Shell的基本语法
，在不引起歧义的情况下也可以
因此Shell进程的环境变量
下二
贝
---
## Page 595
用于算术计算，s(（)中的ShelI变量取值将转换成整数，例如:
3.4.算术代换：$(O)请点评
命令代换也可以用s()表示:
3.3.命令代换：或 $O 请点评
3.2.文件名代换（Globbing）：＊？‘点评
例如定义一个变量存放date命令的输出：
由反引号括起来的也是一条命令，
上是这两个文件名，而不是一个匹配字符串。
注意，
这些用于匹配的字符称为通配符（Wildcard），具体如下:
数。Shell变量不需要先定义后使用，
型
注意，
 事实上Shell变量的值都是字符串,
，在定义变量时不用$，取变量值时要用$。和C语言不同的是，She变量不需要明确定义类
Globbing所匹配的文件名是由Shell展开的，
[若干字符]匹配方括号中任意
表31.1.通配符
$ DATE=$(date)
SS
SS
S
S
?
SS
S
S
echo $(($vAR+3))
VAR=45
den->date
1S
echo
echo
echo
echo
S
n
cho?
/dev/ttyS*
${SHELL}abc
$SHELL abc
$SHELLabc
 $SHELL
[匹配一个任意字符
匹配0个或多个任意字符
.doc
：如果当前目录下有choo.doc和ch02.doc，
，Shell先执行该命令，然后将输出结果立刻代换到当前命令行中。
，如果对一
一个字符的一次出现
比如我们定义VAR=45，其实vAR的值是字符串45而非整
一个没有定义的变量取值，则值为空字符串。
也就是说在参数还没传给程序之前已经展开了
 则传给1s命令的参数实际
---
## Page 596
3.6.单引号请点评
还有一种用法，在\后敲回车表示续行,
以-号开头的文件名，可以有两种办法：
即使加上\转义也还是报错：
件名以-号开头的文件，这样是不行的：
比如创建一个文件名为"$ $"的文件可以这样:
3.5.转义字符\请点评
因为各种UNIX命令都把-号开头的命令行参数当作命令的选项，而不会当作文件名。如果非要处理
还有一
$(())中只能用+-*/和()运算符，并且只能做整数运算。
或者
和C语言类似，
一个续行提示符>，等待用户继续输入，
一个字符虽然不具有特殊含义，
S
$ touch ./-hello
$ touch \-hello 
$ touch \$\ \$ 
S
Try
touch:
Try
touch:
S
S
$SHELL
/bin/bash
(ls
 touch -- -hello
 touch -hello
echo ll
 echo $SHELL
-1
-1命令的输出)
touch
touch 
.........
，\在Shell中被用作转义字符，
invalid option -- h 
\$SHELL
紧跟其后的字符取字面值。例如：
.-help
for more information
 for more information.
但是要用它做文件名也很麻烦，就是-号。如果要创建一个文
最后把所有的续行接到一起当作一个命令执行。例如：
 Shell并不会立刻执行命令，
用于去除紧跟其后的单个字符的特殊意义（回车除
，而是把光标移到下一行，给出
8
---
## Page 597
3.7.双引号请点评
2.Shell如何执行命令
双引号用于保持引号内所有字符的字面值（回车也不例外）
把引号配上对。例如：