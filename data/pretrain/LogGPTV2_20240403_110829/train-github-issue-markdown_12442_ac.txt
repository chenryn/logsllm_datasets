       * Deno.close(file.rid);
       *
       * // Example writing to buffer
       * const contentBytes = new TextEncoder().encode("Hello World");
       * const writer = new Deno.Buffer();
       * Deno.writeAllSync(writer, contentBytes);
       * console.log(writer.bytes().length);  // 11
       * ```
       */
      export function writeAllSync(w: WriterSync, arr: Uint8Array): void;
      export interface MkdirOptions {
        /** Defaults to `false`. If set to `true`, means that any intermediate
         * directories will also be created (as with the shell command `mkdir -p`).
         * Intermediate directories are created with the same permissions.
         * When recursive is set to `true`, succeeds silently (without changing any
         * permissions) if a directory already exists at the path, or if the path
         * is a symlink to an existing directory. */
        recursive?: boolean;
        /** Permissions to use when creating the directory (defaults to `0o777`,
         * before the process's umask).
         * Ignored on Windows. */
        mode?: number;
      }
      /** Synchronously creates a new directory with the specified path.
       *
       * ```ts
       * Deno.mkdirSync("new_dir");
       * Deno.mkdirSync("nested/directories", { recursive: true });
       * Deno.mkdirSync("restricted_access_dir", { mode: 0o700 });
       * ```
       *
       * Defaults to throwing error if the directory already exists.
       *
       * Requires `allow-write` permission. */
      export function mkdirSync(path: string, options?: MkdirOptions): void;
      /** Creates a new directory with the specified path.
       *
       * ```ts
       * await Deno.mkdir("new_dir");
       * await Deno.mkdir("nested/directories", { recursive: true });
       * await Deno.mkdir("restricted_access_dir", { mode: 0o700 });
       * ```
       *
       * Defaults to throwing error if the directory already exists.
       *
       * Requires `allow-write` permission. */
      export function mkdir(path: string, options?: MkdirOptions): Promise;
      export interface MakeTempOptions {
        /** Directory where the temporary directory should be created (defaults to
         * the env variable TMPDIR, or the system's default, usually /tmp). */
        dir?: string;
        /** String that should precede the random portion of the temporary
         * directory's name. */
        prefix?: string;
        /** String that should follow the random portion of the temporary
         * directory's name. */
        suffix?: string;
      }
      /** Synchronously creates a new temporary directory in the default directory
       * for temporary files (see also `Deno.dir("temp")`), unless `dir` is specified.
       * Other optional options include prefixing and suffixing the directory name
       * with `prefix` and `suffix` respectively.
       *
       * The full path to the newly created directory is returned.
       *
       * Multiple programs calling this function simultaneously will create different
       * directories. It is the caller's responsibility to remove the directory when
       * no longer needed.
       *
       * ```ts
       * const tempDirName0 = Deno.makeTempDirSync();  // e.g. /tmp/2894ea76
       * const tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp339c944d
       * ```
       *
       * Requires `allow-write` permission. */
      // TODO(ry) Doesn't check permissions.
      export function makeTempDirSync(options?: MakeTempOptions): string;
      /** Creates a new temporary directory in the default directory for temporary
       * files (see also `Deno.dir("temp")`), unless `dir` is specified.  Other
       * optional options include prefixing and suffixing the directory name with
       * `prefix` and `suffix` respectively.
       *
       * This call resolves to the full path to the newly created directory.
       *
       * Multiple programs calling this function simultaneously will create different
       * directories. It is the caller's responsibility to remove the directory when
       * no longer needed.
       *
       * ```ts
       * const tempDirName0 = await Deno.makeTempDir();  // e.g. /tmp/2894ea76
       * const tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' }); // e.g. /tmp/my_temp339c944d
       * ```
       *
       * Requires `allow-write` permission. */
      // TODO(ry) Doesn't check permissions.
      export function makeTempDir(options?: MakeTempOptions): Promise;
      /** Synchronously creates a new temporary file in the default directory for
       * temporary files (see also `Deno.dir("temp")`), unless `dir` is specified.
       * Other optional options include prefixing and suffixing the directory name
       * with `prefix` and `suffix` respectively.
       *
       * The full path to the newly created file is returned.
       *
       * Multiple programs calling this function simultaneously will create different
       * files. It is the caller's responsibility to remove the file when no longer
       * needed.
       *
       * ```ts
       * const tempFileName0 = Deno.makeTempFileSync(); // e.g. /tmp/419e0bf2
       * const tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098
       * ```
       *
       * Requires `allow-write` permission. */
      export function makeTempFileSync(options?: MakeTempOptions): string;
      /** Creates a new temporary file in the default directory for temporary
       * files (see also `Deno.dir("temp")`), unless `dir` is specified.  Other
       * optional options include prefixing and suffixing the directory name with
       * `prefix` and `suffix` respectively.
       *
       * This call resolves to the full path to the newly created file.
       *
       * Multiple programs calling this function simultaneously will create different
       * files. It is the caller's responsibility to remove the file when no longer
       * needed.
       *
       * ```ts
       * const tmpFileName0 = await Deno.makeTempFile();  // e.g. /tmp/419e0bf2
       * const tmpFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098
       * ```
       *
       * Requires `allow-write` permission. */
      export function makeTempFile(options?: MakeTempOptions): Promise;
      /** Synchronously changes the permission of a specific file/directory of
       * specified path.  Ignores the process's umask.
       *
       * ```ts
       * Deno.chmodSync("/path/to/file", 0o666);
       * ```
       *
       * For a full description, see [chmod](#chmod)
       *
       * NOTE: This API currently throws on Windows
       *
       * Requires `allow-write` permission. */
      export function chmodSync(path: string, mode: number): void;
      /** Changes the permission of a specific file/directory of specified path.
       * Ignores the process's umask.
       *
       * ```ts
       * await Deno.chmod("/path/to/file", 0o666);
       * ```
       *
       * The mode is a sequence of 3 octal numbers.  The first/left-most number
       * specifies the permissions for the owner.  The second number specifies the
       * permissions for the group. The last/right-most number specifies the
       * permissions for others.  For example, with a mode of 0o764, the owner (7) can
       * read/write/execute, the group (6) can read/write and everyone else (4) can
       * read only.
       *
       * | Number | Description |
       * | ------ | ----------- |
       * | 7      | read, write, and execute |
       * | 6      | read and write |
       * | 5      | read and execute |
       * | 4      | read only |
       * | 3      | write and execute |
       * | 2      | write only |
       * | 1      | execute only |
       * | 0      | no permission |
       *
       * NOTE: This API currently throws on Windows
       *
       * Requires `allow-write` permission. */
      export function chmod(path: string, mode: number): Promise;
      /** Synchronously change owner of a regular file or directory. This functionality
       * is not available on Windows.
       *
       * ```ts
       * Deno.chownSync("myFile.txt", 1000, 1002);
       * ```
       *
       * Requires `allow-write` permission.
       *
       * Throws Error (not implemented) if executed on Windows
       *
       * @param path path to the file
       * @param uid user id (UID) of the new owner
       * @param gid group id (GID) of the new owner
       */
      export function chownSync(path: string, uid: number, gid: number): void;
      /** Change owner of a regular file or directory. This functionality
       * is not available on Windows.
       *
       * ```ts
       * await Deno.chown("myFile.txt", 1000, 1002);
       * ```
       *
       * Requires `allow-write` permission.
       *
       * Throws Error (not implemented) if executed on Windows
       *
       * @param path path to the file
       * @param uid user id (UID) of the new owner
       * @param gid group id (GID) of the new owner
       */
      export function chown(path: string, uid: number, gid: number): Promise;
      export interface RemoveOptions {
        /** Defaults to `false`. If set to `true`, path will be removed even if
         * it's a non-empty directory. */
        recursive?: boolean;
      }
      /** Synchronously removes the named file or directory.
       *
       * ```ts
       * Deno.removeSync("/path/to/empty_dir/or/file");
       * Deno.removeSync("/path/to/populated_dir/or/file", { recursive: true });
       * ```
       *
       * Throws error if permission denied, path not found, or path is a non-empty
       * directory and the `recursive` option isn't set to `true`.
       *
       * Requires `allow-write` permission. */
      export function removeSync(path: string, options?: RemoveOptions): void;
      /** Removes the named file or directory.
       *
       * ```ts
       * await Deno.remove("/path/to/empty_dir/or/file");
       * await Deno.remove("/path/to/populated_dir/or/file", { recursive: true });
       * ```
       *
       * Throws error if permission denied, path not found, or path is a non-empty
       * directory and the `recursive` option isn't set to `true`.
       *
       * Requires `allow-write` permission. */
      export function remove(path: string, options?: RemoveOptions): Promise;
      /** Synchronously renames (moves) `oldpath` to `newpath`. Paths may be files or
       * directories.  If `newpath` already exists and is not a directory,
       * `renameSync()` replaces it. OS-specific restrictions may apply when
       * `oldpath` and `newpath` are in different directories.
       *
       * ```ts
       * Deno.renameSync("old/path", "new/path");
       * ```
       *
       * On Unix, this operation does not follow symlinks at either path.
       *
       * It varies between platforms when the operation throws errors, and if so what
       * they are. It's always an error to rename anything to a non-empty directory.
       *
       * Requires `allow-read` and `allow-write` permissions. */
      export function renameSync(oldpath: string, newpath: string): void;
      /** Renames (moves) `oldpath` to `newpath`.  Paths may be files or directories.
       * If `newpath` already exists and is not a directory, `rename()` replaces it.
       * OS-specific restrictions may apply when `oldpath` and `newpath` are in
       * different directories.
       *
       * ```ts
       * await Deno.rename("old/path", "new/path");
       * ```
       *
       * On Unix, this operation does not follow symlinks at either path.
       *
       * It varies between platforms when the operation throws errors, and if so what
       * they are. It's always an error to rename anything to a non-empty directory.
       *
       * Requires `allow-read` and `allow-write` permission. */
      export function rename(oldpath: string, newpath: string): Promise;
      /** Synchronously reads and returns the entire contents of a file as utf8 encoded string
       *  encoded string. Reading a directory returns an empty string.
       *
       * ```ts
       * const data = Deno.readTextFileSync("hello.txt");
       * console.log(data);
       * ```
       *
       * Requires `allow-read` permission. */
      export function readTextFileSync(path: string): string;
      /** Asynchronously reads and returns the entire contents of a file as a utf8
       *  encoded string. Reading a directory returns an empty data array.
       *
       * ```ts
       * const data = await Deno.readTextFile("hello.txt");
       * console.log(data);
       * ```
       *
       * Requires `allow-read` permission. */
      export function readTextFile(path: string): Promise;
      /** Synchronously reads and returns the entire contents of a file as an array
       * of bytes. `TextDecoder` can be used to transform the bytes to string if
       * required.  Reading a directory returns an empty data array.
       *
       * ```ts
       * const decoder = new TextDecoder("utf-8");
       * const data = Deno.readFileSync("hello.txt");
       * console.log(decoder.decode(data));
       * ```
       *
       * Requires `allow-read` permission. */
      export function readFileSync(path: string): Uint8Array;
      /** Reads and resolves to the entire contents of a file as an array of bytes.
       * `TextDecoder` can be used to transform the bytes to string if required.
       * Reading a directory returns an empty data array.
       *
       * ```ts
       * const decoder = new TextDecoder("utf-8");
       * const data = await Deno.readFile("hello.txt");
       * console.log(decoder.decode(data));
       * ```
       *
       * Requires `allow-read` permission. */
      export function readFile(path: string): Promise;
      /** A FileInfo describes a file and is returned by `stat`, `lstat`,
       * `statSync`, `lstatSync`. */
      export interface FileInfo {
        /** True if this is info for a regular file. Mutually exclusive to
         * `FileInfo.isDirectory` and `FileInfo.isSymlink`. */
        isFile: boolean;
        /** True if this is info for a regular directory. Mutually exclusive to
         * `FileInfo.isFile` and `FileInfo.isSymlink`. */
        isDirectory: boolean;
        /** True if this is info for a symlink. Mutually exclusive to
         * `FileInfo.isFile` and `FileInfo.isDirectory`. */
        isSymlink: boolean;
        /** The size of the file, in bytes. */
        size: number;
        /** The last modification time of the file. This corresponds to the `mtime`
         * field from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This
         * may not be available on all platforms. */
        mtime: Date | null;
        /** The last access time of the file. This corresponds to the `atime`
         * field from `stat` on Unix and `ftLastAccessTime` on Windows. This may not
         * be available on all platforms. */
        atime: Date | null;
        /** The creation time of the file. This corresponds to the `birthtime`
         * field from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may
         * not be available on all platforms. */
        birthtime: Date | null;
        /** ID of the device containing the file.
         *
         * _Linux/Mac OS only._ */
        dev: number | null;
        /** Inode number.
         *
         * _Linux/Mac OS only._ */
        ino: number | null;
        /** **UNSTABLE**: Match behavior with Go on Windows for `mode`.
         *
         * The underlying raw `st_mode` bits that contain the standard Unix
         * permissions for this file/directory. */
        mode: number | null;
        /** Number of hard links pointing to this file.
         *
         * _Linux/Mac OS only._ */
        nlink: number | null;
        /** User ID of the owner of this file.
         *
         * _Linux/Mac OS only._ */
        uid: number | null;
        /** Group ID of the owner of this file.
         *
         * _Linux/Mac OS only._ */
        gid: number | null;
        /** Device ID of this file.
         *
         * _Linux/Mac OS only._ */
        rdev: number | null;
        /** Blocksize for filesystem I/O.
         *
         * _Linux/Mac OS only._ */
        blksize: number | null;
        /** Number of blocks allocated to the file, in 512-byte units.
         *
         * _Linux/Mac OS only._ */
        blocks: number | null;
      }
      /** Returns absolute normalized path, with symbolic links resolved.
       *
       * ```ts
       * // e.g. given /home/alice/file.txt and current directory /home/alice
       * Deno.symlinkSync("file.txt", "symlink_file.txt");
       * const realPath = Deno.realPathSync("./file.txt");
       * const realSymLinkPath = Deno.realPathSync("./symlink_file.txt");
       * console.log(realPath);  // outputs "/home/alice/file.txt"
       * console.log(realSymLinkPath);  // outputs "/home/alice/file.txt"
       * ```
       *
       * Requires `allow-read` permission. */
      export function realPathSync(path: string): string;
      /** Resolves to the absolute normalized path, with symbolic links resolved.
       *
       * ```ts
       * // e.g. given /home/alice/file.txt and current directory /home/alice
       * await Deno.symlink("file.txt", "symlink_file.txt");
       * const realPath = await Deno.realPath("./file.txt");
       * const realSymLinkPath = await Deno.realPath("./symlink_file.txt");
       * console.log(realPath);  // outputs "/home/alice/file.txt"
       * console.log(realSymLinkPath);  // outputs "/home/alice/file.txt"
       * ```
       *
       * Requires `allow-read` permission. */
      export function realPath(path: string): Promise;
      export interface DirEntry {
        name: string;
        isFile: boolean;