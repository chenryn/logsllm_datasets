# Go二进制文件逆向分析从基础到进阶——Tips与实战案例
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 书接前文，本文介绍 Go 语言二进制文件逆向的几个 Tips，最后用实际案例演示一个 Go 二进制文件逆向分析的进阶玩法——还原复杂数据结构的 Go
> 语言定义。
**传送门** ：
  1. [Go二进制文件逆向分析从基础到进阶——综述](https://www.anquanke.com/post/id/214940)
  2. [Go二进制文件逆向分析从基础到进阶——MetaInfo、函数符号和源码文件路径列表](https://www.anquanke.com/post/id/215419)
  3. [Go二进制文件逆向分析从基础到进阶——数据类型](https://www.anquanke.com/post/id/215820)
  4. [Go二进制文件逆向分析从基础到进阶——itab和strings](https://www.anquanke.com/post/id/218377)
## 11\. 逆向分析 Tips
###  11.1 函数的参数与返回值
本系列第一篇《[Go二进制文件逆向分析从基础到进阶——综述](https://www.anquanke.com/post/id/214940)》中提到过，Go
语言有自己独特的调用约定和栈管理机制，使 C/C++ 二进制文件逆向分析的经验在这里力不从心：Go 语言用的是 [continue stack
栈管理机制](https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.5.html) ，并且
Go 语言函数中 callee 的栈空间由上层调用函数 caller 来维护，callee 的参数、返回值都由 caller 在栈中预留空间，
**传入参数和返回值都是通过栈空间里的内存** ，就难以直观看出哪个是参数、哪个是返回值。详见 [The Go low-level calling
convention on x86-64](https://dr-knz.net/go-calling-convention-x86-64.html)
。Go 中函数内存空间布局如下：
那么，在 IDAPro 中打开某个函数的反汇编代码看一看，函数头部一堆 **args** 中哪些是传入的参数，哪些又是返回的值呢？
一个简单粗暴的办法，是先去函数末尾找有没有返回值，确定了返回值，剩下的 **args** 就是需要传入的参数。比如下面这个函数：
可以看到，函数头中显示共有 6 个 **arg_*** 的变量，而函数尾部显示最后的 **arg_20** 和 **arg_28**
分别被传入两个值以后，函数返回。据此可以确定最后两个 **arg** 就是函数的返回值，而前面 4 个 **arg** 就是函数需要传入的参数。其实，用
IDAPro 打开 Go 二进制文件中的函数来分析，如果函数有返回值的话，返回值总是最后面的 **arg** ，即距离栈底较近的位置。
###  11.2 入口函数与初始化函数
通常，在 IDAPro 中打开一个可执行二进制文件，IDAPro 的自动化分析过程结束后，会自动跳转到一个入口函数的位置，等待我们分析。对于 Go
二进制文件来说，64bit PE 文件通常会自动跳转到 `_rt0_amd64_windows` 函数：
64bit ELF 文件，通常会自动跳转到 `_rt0_amd64_linux` 函数：
但是，千万不要上来就从这样的函数开始分析，因为它们只不过是 Go runtime 的入口函数而已。 **真正的 Go
语言程序逻辑的入口，其实是`main.main()` 函数**。
那么，上手就开始分析 `main.main()` 函数就一定 OK 了吗？并不是。因为 Go 语言规范中还有个特殊的函数，自己实现之后会在 `main()`
函数之前就执行—— **init()** 函数。
**init()** 函数一般用来初始化一些全局设置，详细作用如下：
  * 全局变量初始化
  * 检查和修复程序状态
  * 运行前注册，例如 decoder，parser 的注册
  * 运行只需计算一次的模块，像 sync.once 的作用，或全局数据库连接句柄的初始化等等。
**init()** 函数的特性有以下几个：
  * init 函数先于 main 函数自动执行，不能被其他函数调用；
  * init 函数没有输入参数、返回值；
  * 每个包可以有多个 init 函数；
  * **包的每个源文件也可以有多个 init 函数** ，这点比较特殊；
  * 不同包的 init 函数按照包导入的依赖关系决定该初始化函数的执行顺序；
  * init 函数在 main 函数执行之前，由 runtime 来调用。
举个栗子，在《[DDG的新征程——自研P2P协议构建混合P2P网络](https://blog.netlab.360.com/ddg-upgrade-to-new-p2p-hybrid-model/)》一文中，可以看到 DDG 木马样本里，就通过多个 **init()** 函数实现了不同的初始化设置：
  1. 在函数 `ddgs_common_init()` 中，DDG 基于 **自定义的 Alphabet** 创建了一个 **全局的 Base64 编解码句柄** ：
  2. 在函数 `ddgs_global_init()` 中，DDG 还有另外一项关键全局变量的初始化工作：创建一对全局 **ed25519** 密钥，用以在后续存取 BoltDB 中数据时对数据进行签名和校验；
  3. 在全局初始化函数 `ddgs_global_init()` 中，DDG 调用了一个函数 `ddgs_global_decodePasswords` ，在这个函数中解密并校验内置的弱口令字典，这些弱口令将在后续传播阶段被用来暴破 SSH 服务；
  4. 在函数 `ddgs_xnet_init_0()` 中，DDG 解析了内置的 **xhub** 和 **xSeeds** 数据，还对 **xhub** 数据用 **ed25519** 算法校验是否被伪造。
由此可见，上手分析一个 Go 二进制文件时，应该先看它里面有没有实现 `init()` 函数，然后再分析它的 `main()` 函数。但是，也不能就只看
`main.init()` 函数，因为上文说过了，一个 Go 项目中可能用到了不同的 Package，每个 Package 甚至每个源码文件都可以实现自己的
`init()` 函数，而这些被导入的 Package 中的 `init()` 函数，会在 `main.init()` 之前被调用执行。当然，并不是所有的
Package 中的 `init()` 函数都需要分析，需要分析的一般是指二进制文件里导入的 **私有 Package** 中的 `init()` 函数。
再举个栗子，最新的 DDG v5031 样本中，Malware 作者自己实现的 `init()` 函数如下：
    ddgs_cmd_init
    ddgs_common_init
    ddgs_common_init_0
    ddgs_common_init_0_func1
    ddgs_global_init
    ddgs_slave_jobs_init
    ddgs_slave_jobs_init_0
    ddgs_slave_lib__lockfile_init
    ddgs_slave_lib__lockfile_init_func1
    ddgs_slave_lib_init
    ddgs_xnet_init
    ddgs_xnet_init_0
这些函数都会在 `main.init()` 函数之前执行，当然也会早于 `main.main()` 函数执行。由于它们都是被 Go runtime
来调用执行的，在样本的主逻辑中并不会被调用。所以务必在分析样本主逻辑之前，先分析它们。
###  11.3 GC write barrier
Golang 内部有比较高效的垃圾回收（GC）机制，这个机制在逆向分析 Golang 二进制文件的过程中，会经常遇到。Golang 中的内存写操作，会先通知
GC，在 GC 中为目的内存做标记。通知 GC 的方式，是在内存写操作之前检查 `runtime.writeBarrier.enbaled`
标志位，如果设定了这个标志位，就会通过 `runtime.gcWriteBarrier` 来进行内存写操作。
反映到 IDAPro 中，就可以经常看到类似这样的 CFG（Control Flow Graph）：
上图的流程，是把 `runtime.makeslice()` 生成的 slice ( **var_78** ) 的地址，写入 `[rax+20h]` 中。在
64bit Go 二进制文件中，调用 `runtime.gcWriteBarrier()` 时，总是把目标地址放入 `rdi` ，把源地址(值)放入
`rax`。
逆向分析的时候遇到这种代码块，知道它只是 runtime GC Barrier 相关的常规操作，就不会再困惑了。
###  11.4 runtime.growslice()
在 Go 语言中， **切片(Slice)** 是一种特殊的数据类型。Go 中数组类型(Array)的长度不可改变，在特定场景中这样的类型就不太适用，所以
Go 就以 “动态数组” 的概念提供了一个类似数组，但可灵活伸缩的数据结构——切片。每当一个切片类型的数据在进行 **Append**
操作时如果需要动态增长（扩容），就会在底层由 runtime 调用 **runtime.growslice()** 来调整切片的内部空间。
**runtime.growslice()** 的函数声明如下：
    func growslice(et *_type, old slice, cap int) slice
即该函数会在调整旧 Slice 内部元素之后，返回一个基于旧 Slice 扩容后的新 Slice。这种操作在 Go 二进制文件中，只要用到 Slice
类型数据的地方，就有可能碰到。下图是一个比较典型的情形：
在逆向分析过程中，遇到这种带 `runtime.growslice()` 的代码块，知道这是在 Slice
容量不足的情况下进行的扩容操作即可。这块代码不一定会执行，粗暴一些甚至可以直接忽略，直接去看这块代码前后的代码，这块代码前后的代码，才是业务逻辑中真实操作
Slice 中元素的代码。
###  11.5 调试
本系列大部分内容讲的都是静态分析相关的知识点，但静态分析不是万能的。有些时候碰上复杂的代码逻辑，静态分析可能会卡在某个关键点上，比如自定义加密逻辑中的密钥换算逻辑无法理解透彻，需要做一下动态调试，用调试器中跑出来的真实结果来验证自己静态分析得出的结论。甚至有的师傅喜欢调试甚于静态分析，拿到二进制文件就想直接扔到调试器中跑一下看看。
网上搜 Go debug，绝大部分资料跟 **[dlv](https://github.com/go-delve/delve)** 调试工具和 **[GDB
的 Go 调试插件](https://golang.org/doc/gdb)** 有关。但是这两个工具的使用有一个前提：需要有调试符号甚至 Go
项目的源码。它们是给常规的 Go 语言开发者使用的。然而我们要分析的 Go 恶意软件，绝大部分是没有调试符号的，strip 处理的很干净。
没有符号就不能调试了吗？不存在的，有困难也要上。好在前面讲的静态分析的姿势，可以让我们通过静态分析就掌握足够的信息，把没符号的 Go
二进制文件扔调试器里，也可以调。
静态分析的姿势掌握之后，Go 二进制文件调试面临的第一个、甚至是唯一一个问题，就是 **断点** 。
常规用 C/C++ 编写的二进制文件，里面没有 runtime，我们可以方便地加载到调试器中，让调试器在 `main()` 函数处断下来。而 Go
二进制文件做不到这样。以 ELF 文件为例，对于个别旧版本的 Go 二进制文件，我们可以加载到 GDB 中，直接 用以下命令断下：
    > b main
    > run
此时，断下来的位置可不是 Go 中的 `main.main()` 函数，而是 cgo 的入口函数 `__libc_start_main`
，断下之后，就可以根据 ELF 加载的地址，在 Go 程序 package main 的入口 main 函数 **地址处** 下断点。
对于较新版本的 Go 二进制文件，上述做法就不起作用了，因为新的 Go 自己实现的构建工具链不再用 cgo
那套东西了。这种情况只能直接在想要断下来的地址处直接给地址下断点。
另外需要注意的是，Go 语言 runtime 内部通过协程来实现高并发。在调试器中可以看到代码在不同的函数中跳来跳去，所以断点务必要打准，不然很容易就被
Go runtime 的协程调度给搞蒙了。
## 12\. 进阶案例实战演示
对于 Go 二进制文件的逆向分析，恢复函数符号、解析字符串，本系列五篇文章看下来对比衡量一下，只能算是基础姿势；对于上面列出来的几个
Tips，以及一些其他没列出的细节，也只能算是 Go
二进制文件一些特有的小知识点；而涉及加解密、内存执行、复杂协议分析等方面，其他类型的二进制文件中也会涉及，只能算是普适性的进阶逆向内容。
但是，进阶的逆向分析姿势中，Go 二进制文件还有一个独特的方面： **复杂数据结构解析** 。
根据前文的内容可以知道，Go 语言中可以通过 **Struct** 来定义复杂的数据结构，通常可以跟一个 JSON
数据结构相互转换，即它可以定义一个结构复杂的 JSON 数据。而 Go 还允许为自定义数据类型绑定一些方法，使 Struct
这个数据类型实际上拥有了面向对象概念中的 **类** 的特性，这就更进一步增加了数据类型的复杂程度。
好在，这些复杂数据类型的定义，都包含在了 Go
二进制文件中。我们可以通过本系列第三篇《[Go二进制文件逆向分析从基础到进阶——数据类型](https://www.anquanke.com/post/id/215820)》中的内容来将这些复杂数据类型的定义解析、还原出来。
下文就结合 **[go_parser](https://github.com/0xjiayu/go_parser)** ，以 DDG
样本中的一个最新版关键配置数据 **slave configure** 的解析，来演示一下这种逆向过程。
###  12.1 DDG 中的 Slave Configure
DDG 是一个专注于扫描控制 SSH 、 Redis 数据库 和 OrientDB
数据库服务器，并攫取服务器算力挖矿（门罗币）的僵尸网络，后来的版本升级中，DDG 还加入了对 Supervisord 和 Nexus
的漏洞利用来传播自身。从 2019 年 11 月，DDG 又[大幅更新一波](https://blog.netlab.360.com/ddg-upgrade-to-new-p2p-hybrid-model/)，新增自研 P2P 协议，把自己打造成了一个 P2P 结构的挖矿僵尸网络。
DDG 在 v3010 版本的时候， **[新增了一份结构复杂的配置文件](https://blog.netlab.360.com/ddg-mining-botnet-jin-qi-huo-dong-fen-xi/)** ： **slave** 。这份配置文件由
**[msgpack](https://msgpack.org/)** 编码(可以简单粗暴理解为压缩版的 JSON 数据通用序列化编码方案)，由 Bot 向
C2 发一个请求后 C2 返回给 Bot。这份配置文件中指定了矿机程序的下载地址、另存为 Path 和
MD5；还指定了要启用的传播模块以及相关配置属性，比如是要内网传播还是公网传播、要爆破的 SSH 服务的端口列表，以及拿下肉鸡后要执行的恶意 Shell
脚本的下载链接等等。最后，还专门为这份配置数据加了一个签名，以防被别人篡改。这份配置文件有自己的版本号，其内部结构至今已经更改多次，在最新的 DDG
v5031 版本中仍然在用。
这份配置文件的旧版，我曾在开源旧版 DDG Botnet Tracker 时，把它解码后传到了 Github。限于篇幅，此处仅贴出 URL：
###  12.2 逆向分析
对 **slave** 配置文件的操作，都集中在 DDG 样本的 **main.pingpong()** 函数中。这个函数有一个参数是 C&C
的地址，它首先向 `http:///slave` 发一个 POST 请求(HTTP Request Header 的设置此处略去)，然后等待
C&C 回复：
收到 C&C 的响应之后，该函数继续执行以下逻辑：
上图左边和右上方的代码块，显示该函数先用 **common.SignData** 这个 Struct 类型来对 C&C
返回的数据执行解码操作。然后右下方的代码块又用 **main.Payload** 这个 Struct 类型，对前面解码出来的部分数据进行 **第二层
msgpack 解码** 操作。
经过 **[go_parser](https://github.com/0xjiayu/go_parser)** 解析，可以看到
**common.SignData** 这个类型的定义：
可以看到它包含两个字段：`[]uint8(即 []byte)` 类型的 **Signature** ，和 `[]byte` 类型的 **Data** 。Go
语言定义表示如下：
    package common
    type SignData struct{
        Signature []byte
        Data      []byte
    }
其实，下面进行第二层 **msgpack** 解码的，正式这个 **Data** 字段的内容。即 Slave 第一层编码是用来校验配置数据的
Signature，和被编码过的配置数据的字节切片，后面真正的配置数据还要再经过一层 **msgpack** 解码。第二层解码真正的配置数据
**main.Payload** ，是在函数 `ddgs_common__SignData_Decode()` 中进行的，该函数很简单，先校验数据，后用
**msgpack** 解码（此处略去校验过程）：
而这个 **main.Payload** Struct 类型的定义，正是我在
**[go_parser](https://github.com/0xjiayu/go_parser)** 开源项目 README 中展示的那个效果图：
当然，上面效果图只是 **main.Payload** Struct 定义的一部分内容，通过
**[go_parser](https://github.com/0xjiayu/go_parser)** 的解析，我们可以很方便地在 IDAPro
中，从该数据类型定义的起始位置开始，通过 **双击跳转** 到特定位置的操作，一步一步深入查看每一层、每一个字段的定义。完整的结构我梳理如下：
###  12.3 尝试解码数据
看到上面梳理出来的数据结构定义图，先不要急着用 Go 语言去把它写出来并解码数据。前方有坑，出手需谨慎。不妨先大概看一下这个 **Payload**
里到底是什么数据，这份数据的结构能不能与上面的结构图对的上。
上文说过， **Payload** 数据又加了一层 **msgpack** 编码，如果要用 Go
代码来反序列化解码数据的话，必须要逆向、恢复出一个准确的数据结构定义，拿这个准确定数据结构定义去解码数据。这在 Go
语言二进制文件逆向的数据反序列化解码、解密方面，是一个常见的难题（参考 Go 语言中 JSON 数据的操作姿势）。
好在 **msgpack** 是一个 **通用** 的序列化编码方案，它提供了很多种编程语言的 API。所以同一份 **msgpack**
序列化编码过的数据，用 Go 语言可解，用其他语言也可以解。而用 Python 这种动态类型的高级语言来解的话，有一个好处是
**不需要提前知道数据的结构定义** 。下面我们先看一下如何用 Python 解码这份数据。
> **NOTE:**
>