[107] A. Shamir, “How to share a secret,” Commun. ACM, 1979.
[108] A. Solovyev, M. S. Baranowski, I. Briggs, C. Jacobsen, Z. Rakamari´c,
and G. Gopalakrishnan, “Rigorous estimation of ﬂoating-point round-
off errors with symbolic taylor expansions,” ACM Trans. Program.
Lang. Syst., 2018.
[109] E. M. Songhori, M. S. Riazi, S. U. Hussain, A.-R. Sadeghi, and
F. Koushanfar, “ARM2GC: Succinct garbled processor for secure
computation,” arXiv 2019.
[110] S. Wagh, D. Gupta, and N. Chandran, “SecureNN: 3-Party Secure
Computation for Neural Network Training,” PoPETs 2019.
[111] E. Wang, Q. Zhang, B. Shen, G. Zhang, X. Lu, Q. Wu, and Y. Wang,
Intel Math Kernel Library, 2014.
[112] P. Warden, “Speech Commands: A Dataset for Limited-Vocabulary
Speech Recognition,” arXiv 2018.
[113] W.-F. Wong and E. Goto, “Fast evaluation of the elementary functions
in single precision,” IEEE Transactions on Computers 1995.
[114] K. Yang, C. Weng, X. Lan, J. Zhang, and X. Wang, “Ferret: Fast
extension for correlated OT with small communication,” in CCS.
ACM, 2020, pp. 1607–1626.
[115] A. C. Yao, “How to Generate and Exchange Secrets (Extended Ab-
stract),” in FOCS 1986.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:57 UTC from IEEE Xplore.  Restrictions apply. 
1017
A. Optimized Protocol for F (cid:96)
MUX
APPENDIX
In this section, we present an optimized protocol for F (cid:96)
MUX
which utilizes COT and builds over the protocol used in [99].
Our optimization relies on the following observation: consider
x ∈ Z2 with shares (cid:104)x(cid:105)B = (x0, x1) and y ∈ ZL with shares
(cid:104)y(cid:105)(cid:96) = (y0, y1), then the following holds:
x ∗(cid:96) y = (x0 ⊕ x1) ∗(cid:96) (y0 + y1)
= (x0 + x1 − 2x0 ∗(cid:96) x1) ∗(cid:96) (y0 + y1)
= x0 ∗(cid:96) y0 + x1 ∗(cid:96) (y0 − 2x0 ∗(cid:96) y0)
+ x1 ∗(cid:96) y1 + x0 ∗(cid:96) (y1 − 2x1 ∗(cid:96) y1)
1
terms, we use (cid:0)2
(cid:1)-COT(cid:96) protocol. In particular, to calculate
In the above, the terms x0 ∗(cid:96) y0 and x1 ∗(cid:96) y1 can be locally
computed by P0 and P1, respectively, while for the other two
shares of x1∗(cid:96) (y0−2x0∗(cid:96) y0) term, P0 acts as the sender with
correlation (y0 − 2x0 ∗(cid:96) y0) and P1 acts as the receiver with
choice bit x1; similarly the term can be computed with the
sender and receiver roles reversed. Note that both the COTs
can be done in parallel giving us a 2-round solution which
communicates 2(cid:96) less bits than prior approach from [99] that
used 2 instances of(cid:0)2
(cid:1)-OT(cid:96).
1
B. Wrap and All Ones
that
Recall
the functionality F (cid:96)
Wrap&All1s(x, y) outputs
((cid:104)w(cid:105)B||(cid:104)e(cid:105)B) such that w = wrap(x, y, L) and e = 1{(x +
y mod L) = L − 1}. Consider
functionality
F (cid:96)
Eq(x, y) that returns (cid:104)e(cid:105)B such that e = 1{x = y}. Then,
F (cid:96)
Wrap&All1s(x, y) = F (cid:96)
Eq(L − 1 − x, y),
that is, millionaires’ and equality on the same inputs. Now,
to construct an efﬁcient protocol for F (cid:96)
Mill, CrypTFlow2 [99]
used the following recurrence relations: Let x = (x1||x0) and
y = (y1||y0) such that xi, yi ∈ {0, 1}(cid:96)/2 for i ∈ {0, 1}. Then,
Mill(L − 1 − x, y)||F (cid:96)
the (cid:96)-bit
1{x  2(cid:96)−s − 1}. Then
x0 + x1 = v(cid:48) + 2s(u(cid:48) + c − w(cid:48) · 2(cid:96)−s) + L · (d + w(cid:48))
(3)
When d = 1, then e = 0 and u(cid:48) = u0 + u1 − 2(cid:96)−s. Since
u0, u1 (cid:54) 2(cid:96)−s − 1, we have that u(cid:48) (cid:54) 2(cid:96)−s − 2. Therefore,
w(cid:48) = 0 (because c ∈ {0, 1}). On the other hand when d = 0,
u(cid:48) = u0 + u1 (cid:54) 2(cid:96)−s − 1. Therefore, w(cid:48) = 1 when u(cid:48) =
2(cid:96)−s − 1 (i.e., e = 1) as well as c = 1, and 0 otherwise.
Since at most one of d and w(cid:48) is 1 in any given case, we can
rewrite Equation 3 as:
x0 + x1 = v(cid:48) + 2s(u(cid:48) + c − w(cid:48) · 2(cid:96)−s) + L · (d ⊕ (c ∧ e))
Since v(cid:48)  n, we simply reverse the roles of the parties in
our protocol so that only n COTs are performed. Correctness
of this protocol follows similarly to the prior works.
2) Matrix Multiplication: Before we look at matrix mul-
tiplication, we ﬁrst set some notation starting with operator
: Zd1×d2 × Zd2×d3 → Zd1×d3
(cid:2)(cid:96)
, which does a matrix
multiplication between two input matrices X and Y such that
X (cid:2)(cid:96) Y = X × Y mod L . Similarly to the ∗(cid:96) notation, when
one of the matrices has elements over ring ZM , we use the
L
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:57 UTC from IEEE Xplore.  Restrictions apply. 
1018
L
N
M
).
UMatMul
deﬁne
MatCrossTerm
Similar
0 , Y (cid:48)
for matrices
CrossTerm, we
1 + X0 (cid:2)(cid:96) Y (cid:48)
X (cid:2)(cid:96) Y (cid:48) = X0 (cid:2)(cid:96) Y (cid:48)
to F m,n(cid:48)
1 and X1 (cid:2)(cid:96) Y (cid:48)
1 +
0 − 2n(cid:48) ∗(cid:96) (X (cid:2)m WY (cid:48))− M ∗(cid:96) (WX (cid:2)n(cid:48) Y (cid:48)), where
lossless typecast operator ζm to map all elements of that matrix
to Z. All the single-input functionalities we consider naturally
extend to matrices, where the functionality is independently
applied to all elements of the input matrix to output a matrix of
the same dimensions. The shares of a matrix X ∈ Zd1×d2
are
denoted by (cid:104)X(cid:105)m, where (cid:104)X(cid:105)m = {(cid:104)X[i, j](cid:105)m}i∈[d1],j∈[d2],
and the shares of its transpose are denoted by (cid:104)X T(cid:105)m.
the matrix multiplication functionality
Now, consider
F m,n,d1,d2,d3
takes as input (cid:104)X(cid:105)m ∈ Zd1×d2
and
that
(cid:104)Y (cid:105)n ∈ Zd2×d3
and outputs (cid:104)Z(cid:105)(cid:96) ∈ Zd1×d3
M
such that
(cid:96) = m + n + (cid:100)log d2(cid:101) and Z = X (cid:2)(cid:96) Y . As described in
Section IV-C, we need the additional e = (cid:100)log d2(cid:101) bits to
prevent integer overﬂow due to additions. When m (cid:54) n, we
extend the input matrix (cid:104)Y (cid:105)n to get (cid:104)Y (cid:48)(cid:105)n(cid:48)
for n(cid:48) = n + e.
Then, Equation 2 generalizes to matrices as follows:
0 + X1 (cid:2)(cid:96) Y (cid:48)
X1 (cid:2)(cid:96) Y (cid:48)
WX = wrap(X0, X1, M ) and WY (cid:48) = wrap(Y (cid:48)
1 , 2n(cid:48)
functionality
a
F m,n(cid:48),d1,d2,d3
to compute the cross-terms
X0 (cid:2)(cid:96) Y (cid:48)
0. This functionality can be realized
naively by making d1d2d3 independent calls to Πm,n(cid:48)
CrossTerm.
Instead, we can do much better by observing that
in a
matrix multiplication, each element of X is multiplied with
d3 elements of Y . Thus, rather than doing d3 independent
COTs on (cid:96) − i bit-strings in Step 3 of Πm,n(cid:48)
CrossTerm, we can
perform a single COT on d3 · ((cid:96) − i) bit-strings (while
respecting the independent correlations). This method of
batching COTs was also used in prior works on secure
inference [92], [99], and it leads to an overall communication
of d1d2(mλ + (mn(cid:48) + m2/2 + m/2)d3) bits.
Note that (cid:104)WX(cid:105)B and (cid:104)WY (cid:48)(cid:105)B can be computed by making
d1d2 calls to F m
Wrap and d2d3 calls to F n(cid:48)
Wrap, respectively.
Since the terms Xi (cid:2)(cid:96) Y (cid:48)
i can be computed locally, the only
to compute are X (cid:2)m WY (cid:48) and WX (cid:2)n(cid:48) Y (cid:48).
terms left
They can be computed using the following functionality
F (cid:96),d1,d2,d3
that takes a bit-matrix (cid:104)W(cid:105)B ∈ {0, 1}d1×d2 and
a matrix (cid:104)X(cid:105)(cid:96) ∈ Zd2×d3
as inputs, and outputs a matrix
(cid:104)Z(cid:105)(cid:96) ∈ Zd1×d3
such that Z = W (cid:2)(cid:96) X. We use the OT-
based MUX protocol from [99] to implement F (cid:96),d1,d2,d3
BitMatMul ,
and also leverage the batching technique here to reduce the
number of OTs. The communication required by this protocol
is 2d1d2(λ + 2(cid:96)d3) bits.
is presented in
Algorithm 5 for the m (cid:54) n case. The total communication cost
of this protocol is d1d2d3((2m + 4)(n + e) + m2 + 5m) +
d1d2(λ(3m + 6) + 14m + e − 6) + d2d3(λ(n + 2) + 14n)
bits. In the protocol, we extend Y because it has elements
of larger bitwidth, and this strategy leads to better overall
communication in most cases. The other case of m > n is
similar and we extend the entries of matrix X by e bits.
Our complete protocol for F m,n,d1,d2,d3
BitMatMul
UMatMul
L
L
E. Digit Decomposition
We consider the functionality F (cid:96),{di}i∈[c]
that decomposes
an (cid:96)-bit number into c sub-strings or digits of lengths {di}
DigDec
Algorithm 5 Unsigned Matrix Multiplication, Πm,n,d1,d2,d3
:
Input: P0 & P1 hold (cid:104)X(cid:105)m and (cid:104)Y (cid:105)n, where X ∈ Zd1×d2
,
Output: P0 & P1 get (cid:104)Z(cid:105)(cid:96), where Z = X (cid:2)(cid:96) Y , (cid:96) = m + n + e
and m (cid:54) n.
UMatMul
M
Y ∈ Zd2×d3
and e = (cid:100)log d2(cid:101).
N
ZExt
b and Y (cid:48)
((cid:104)Y (cid:105)n) and learn (cid:104)Y (cid:48)(cid:105)n(cid:48)
1: P0 & P1 invoke F n,n+e
.
b = (cid:104)Y (cid:48)(cid:105)n(cid:48)
2: For b ∈ {0, 1}, let Xb = (cid:104)X(cid:105)m
b .
3: P0 and P1 invoke the following functionalities.
4:
5: