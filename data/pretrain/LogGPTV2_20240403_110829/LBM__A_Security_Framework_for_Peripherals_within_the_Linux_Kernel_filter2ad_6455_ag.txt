(cid:2)atom(cid:3) ::= (cid:2)number(cid:3) | ‘-’ (cid:2)number(cid:3)
(cid:2)struct(cid:3)
(cid:2)string(cid:3)
‘(’ (cid:2)expr(cid:3) ‘)’
|
|
|
(cid:2)DEC_NUMBER(cid:3) ::= (cid:2)DIGIT(cid:3)+
(cid:2)HEX_NUMBER(cid:3) ::= ‘0x’ (cid:2)HEXDIGIT(cid:3)+
(cid:2)LETTER(cid:3) ::= ‘a’ ... ‘z’ | ‘A’ ... ‘Z’
(cid:2)STRING(cid:3) ::= ‘"’ (‘\"’ | /[^‘"’]/)* ‘"’
(cid:2)DIGIT(cid:3) ::= ‘0’...‘9’
(cid:2)HEXDIGIT(cid:3) ::= ‘a’ ... ‘f’ | ‘A’ ... ‘F’ | (cid:2)DIGIT(cid:3)
(cid:2)IDENTIFIER(cid:3) ::= (‘_’ | (cid:2)LETTER(cid:3)) ( ‘_’ | (cid:2)LETTER(cid:3) | (cid:2)DIGIT(cid:3))*
Figure 11: The Extended Backus-Naur Form (EBNF) of our
constructed LBM expression grammar.
LBM Program
usb.idVendor == 0x413c && usb.idProduct == 0x3010
Intermediate Representation
0: t1 := call(lbm_usb_get_idVendor)
1: t0 := binop(EQ, t1, 16700)
2: t3 := call(lbm_usb_get_idProduct)
3: t2 := binop(EQ, t3, 12304)
4: t4 := binop(AND, t0, t2)
eBPF Assembly
LSTART:
MOV64_REG(REG_9, REG_1)
MOV64_REG(REG_1, REG_9)
CALL_FUNC(FUNC_lbm_usb_get_idVendor)
MOV64_REG(REG_1, REG_0)
MOV64_IMM(REG_6, 1)
JMP_IMM(JEQ, REG_1, 16700, L1_)
MOV64_IMM(REG_6, 0)
MOV64_REG(REG_1, REG_9)
CALL_FUNC(FUNC_lbm_usb_get_idProduct)
MOV64_REG(REG_2, REG_0)
MOV64_IMM(REG_3, 1)
JMP_IMM(JEQ, REG_2, 12304, L2_)
MOV64_IMM(REG_3, 0)
JMP_IMM(JEQ, REG_6, 0, L3_)
JMP_IMM(JEQ, REG_3, 0, L3_)
MOV64_IMM(REG_4, 1)
JMP_A(L4_)
MOV64_IMM(REG_4, 0)
JMP_IMM(JNE, REG_4, 0, L5_)
MOV64_IMM(REG_0, 0)
EXIT_INSN()
MOV64_IMM(REG_0, 1)
EXIT_INSN()
L1_:
L2_:
L3_:
L4_:
L6_:
L5_:
LEND:
Figure 12: The compilation stages of an LBM expression.
C. lmbench
Table VII presents the complete summary of lmbench
results from Section V-D We use lmbench to benchmark
the whole system across different kernel conﬁgurations and
demonstrate that LBM does indeed introduce minimal over-
head across the whole system.
(cid:26)(cid:25)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
Open/Close
1.39
1.38
1.38
Select TCP
6.26
5.65
5.65
Signal install
0.27
0.27
0.27
Signal Handle
0.81
0.80
0.80
Fork
151.
141.
92.6
Execute
497.
400.
415.
Exec. Shell
1425
1411
1446
mod
6.5700
6.4900
6.5300
Stat
0.65
0.66
0.66
div
6.1100
6.0200
6.0300
mod
11.7
11.7
11.7
add
0.1400
0.1400
0.1400
div
3.7800
3.6800
3.6800
div
5.6200
5.6300
5.6500
Processor & Processes (ns)
Null I/O
Null call
0.32
0.23
0.32
0.22
0.22
0.32
Basic integer operations (ns)
bit
0.2800
0.2800
0.2800
Basic uint64 operations (ns)
div
bit
12.0
0.280
12.1
0.280
0.280
12.1
Basic ﬂoat operations (ns)
mul
add
1.3900
0.8400
1.3900
0.8400
0.8400
1.3900
Basic Double Operations (ns)
add
0.8400
0.8400
0.8400
Context Switching (ns)
2p/0K
1.7300
1.6500
1.6100
Local Communication Latencies (us)
2p/0K context switch
1.730
1.650
1.610
File & VM system latencies (us)
0K File Cre.
5.7323
5.7247
5.7531
Local Communication bandwidths (MB/s), Larger is better
Pipe
5597
5606
5686
Memory latencies (ns)
Mhz
3192
3192
3192
10K File Cre.
13.3
13.2
13.7
0K File Del.
3.8630
3.8566
3.8511
AF UNIX
6.97
6.31
7.27
AF UNIX
12.K
12.K
12.K
L2 Cache
3.3420
3.3420
3.3430
mul
1.3900
1.3900
1.3900
2p/16K
1.6600
1.5800
1.5000
L1 Cache
1.1140
1.1140
1.1140
2p/64K
2.4000
2.1900
2.2600
Pipe
5.028
4.998
5.068
TCP
7539
7365
7466
bogo
1.9500
1.9500
1.9600
bogo
3.9000
3.9000
3.9100
8p/16K
4.2000
3.3800
3.2200
UDP
9.127
8.973
8.966
Vanilla
LBM
LBM-JIT
Vanilla
LBM
LBM-JIT
Vanilla
LBM
LBM-JIT
Vanilla
LBM
LBM-JIT
Vanilla
LBM
LBM-JIT
Vanilla
LBM
LBM-JIT
Vanilla
LBM
LBM-JIT
Vanilla
LBM
LBM-JIT
Vanilla
LBM
LBM-JIT
Vanilla
LBM
LBM-JIT
16p/16K
4.24000
4.11000
3.28000
16p/64K
5.79000
7.77000
7.55000
TCP/connection
17.
17.
17.
Prot. Fault
0.501
0.502
0.500
Bcopy (libc)
8126.0
8193.2
8169.2
Page Fault
0.22380
0.22080
0.22310
100 FD Select
1.609
1.602
1.613
Bcopy (custom) Memory Read Memory Write
5886.8
5911.6
5909.9
8528.
8535.
8542.
14.K
14.K
14.K
8p/64K
5.0700
4.9100
7.5000
TCP
11.5
11.3
11.4
10K File Del. Mmap Latency
6.8787
7.0278
6.8543
6493.0
6518.0
6523.0
File Reread
7455.9
7473.6
7494.9
Main memory
15.2
14.6
15.2
Mmap Reread
15.0K
15.0K
15.0K
Random memory
84.1
84.9
83.9
Table VII: lmbench results for a Vanilla kernel, LBM, and LBM-JIT.
(cid:26)(cid:25)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply.