load time. For an ELF ﬁle that is dynamically linked
to some shared object, its call sites to the shared ob-
ject functions are actually jump instructions to some stub
function in the ELF’s procedure linkage table (PLT). This
stub function then performs a memory load on some en-
try in the ELF’s global offset table (GOT) in order to re-
trieve the real target address of this function call to which
it then branches. In other words, the ELF’s global offset
table contains an array of function pointers of all dynam-
ically linked external functions referenced by its code.
During dynamic linking this table is ﬁlled with appropri-
ate function pointers; this is controlled by the metadata
stored in the ELF ﬁle, such as which GOT entry maps to
which function in which shared object.
This level of indirection introduced by dynamic link-
ing can be exploited to implement the required interpo-
sition mechanism neatly:
it is sufﬁcient to go through
every loaded ELF ﬁle and overwrite its GOT entries with
pointers to our monitoring functions. This is equivalent
to doing the dynamic linking again but substituting func-
tion pointers of interposition routines1.
Because Java code is incapable of directly modifying
process memory, we implemented our interposition rou-
tines in C++ and compiled them to native code. All the
detour functions are also implemented in C++ and they
will preprocess the relevant function call arguments be-
fore feeding them to Aurasium’s policy logic. We try to
minimize the amount of native code because it is gener-
ally difﬁcult to write and test. As a result most of the
policy logic is implemented in Java, which also means it
can take advantage of many helper functions in the stan-
dard Android framework. However, in the preprocessing
step of the IPC calls we make an effort to reconstruct
the inter-process communication parameters as well as
high-level Java objects out of marshalled byte streams
in our native code. It turns out that despite the system
changes between Android 2.2, 2.3 and 3.x, the IPC pro-
tocol remains largely unaffected2 and hence our interpo-
sition code is able to run on all major Android versions
reliably.
With all these facilities in place, Aurasium is capa-
ble of intercepting virtually all framework APIs and en-
forcing many classes of security and privacy policies on
them. It remains to be discussed what policies we cur-
rently implement (Section 2.3) and how reliable Aura-
sium’s sandboxing mechanism is (Section 4). But before
that, let us explain how we repackage an Android appli-
cation such that Aurasium’s sandboxing code is inserted.
2.2.3 APK Repackaging
Android applications are distributed as a single ﬁle called
an Android Application Package (APK) (Figure 2). An
APK ﬁle is merely a Java JAR archive containing the
compiled manifest ﬁle AndroidManifest.xml, the ap-
plication’s code in the form of dex bytecode, compiled
XML resources such as window layout and string con-
stant tables, and other resources like images, sound and
native libraries. It also includes its own signature in a
form identical to the standard Java JAR ﬁle signatures.
1We did not consider other advanced dynamic linking techniques
such as lazy linking here because they are not adopted in the current
Android OS. They can be dealt with similarly.
2An exception is the introduction of Strict Mode from version
4
Decompiled
smali ﬁles
Aurasium
Java Code
Android Package (.apk)
classes.dex
resources.arsc
uncompiled resources
AndroidManifest.xml
Aurasium
Native
Library
Aurasium
Component
Declaration
Figure 2: Android Application Package
Because the Aurasium code contains both a native li-
brary for low-level interposition and high-level Java code
that executes the policy logic, we need a way of in-
serting both into the target APK. Adding a native li-
brary is trivial as native libraries are standalone Linux
shared object (.so) ﬁles and are stored as is. Adding
Java code is slightly tricky because Android requires all
the application’s compiled bytecode to reside in a sin-
gle ﬁle called classes.dex. To insert Aurasium’s Java
code into an existing application, we have to take the
original classes.dex, disassemble it back to a col-
lection of individual classes, add Aurasium’s classes,
and then re-assemble everything back to create the new
classes.dex.
There exist open source projects that can perform such
task. For example, smali [7], an assembler/disassembler
for dex ﬁles, and android-apktool [1], which is an
integrated solution that can process not only code but
also compiled resources in APK ﬁles.3 In Aurasium we
adopt apktool in our repackaging process. In the de-
code phase, apktool takes in an APK ﬁle, disassembles
its dex ﬁle, and produces a directory such that each byte-
code ﬁle maps to a single Java class, and its path corre-
sponds to the package hierarchy, together with all other
resources in the original APK ﬁle. Aurasium’s Java code
is then merged into the directory and apktool is en-
gaged again to assemble the bytecode back into a new
classes.dex ﬁle. Together with other resources, a new
APK ﬁle is ﬁnally produced.
In reality, before producing the ﬁnal APK ﬁle there is
one more thing to do: merely merging Aurasium code
into the target application does not automatically imply
that it will run. We need to make sure that Aurasium
code is invoked somehow, preferably before any of the
original application code, so that the application does not
execute any of its code before Aurasium’s sandboxing is
established. One option would be to modify the applica-
tion’s entry point so that it points to Aurasium. This turns
2.3 Gingerbread.
3apktool is actually built on top of a fork of smali.
out to be not as easy as one might expect. Android appli-
cations often possess many possible entry points, in the
sense that every public application component including
activity, service, broadcast receiver, and content provider
can be invoked directly and hence they all act as entry
points.
In Aurasium we take a different approach: The
Android SDK allows an application to specify an
Application class in its manifest ﬁle which will
be instantiated by the runtime whenever the applica-
tion is about to start. By declaring Aurasium as this
Application class, Aurasium runs automatically be-
fore any other parts of the application. There is a small
caveat that the original application may have already de-
ﬁned such Application class.
In this case, we trace
the inheritance of this class until we ﬁnd the root base
class. This class will have to be inherited directly from
Application, and we modify its deﬁnition (which is
in the decompiled bytecode form) such that it inherits
from Aurasium’s Application class instead. This al-
lows Aurasium to be instantiated as before, and being
the root class ensures that Aurasium gets run before the
application’s Application class is instantiated.
Figure 2 illustrates the composition of an APK and the
various Aurasium modules added at repackaging time.
2.2.4 Application Signing
The last thing to worry about is that when an application
is modiﬁed and repackaged, its signature is inevitably
destroyed and there is no way to re-sign the applica-
tion under its original public key. We believe this is a
problem, but manageable. Every Android application
is indeed required to have a valid signature, but signa-
tures in Android work more like a proof of authorship,
in the sense that applications signed by the same certiﬁ-
cate are believed to come from the same author, hence
they are trusted by each other and enjoy certain ﬂexibil-
ities within Android’s security architecture, e.g., signa-
ture permission. Application updates are also required
to be signed with the same certiﬁcate as the original ap-
plication. Other than that, signatures impose few other
restrictions, and developers often use self-signed certiﬁ-
cates for their applications.
This observation means that Aurasium can just re-
sign the repackaged application using a new self-signed
certiﬁcate. To preserve the authorship relation, Aura-
sium performs the re-signing step using a parallel set
of randomly generated Aurasium certiﬁcates, maintain-
ing a one-to-one mapping between this set to arbitrary
developer certiﬁcates. In other words, whenever Aura-
sium is about to re-sign an application, it ﬁrst veriﬁes
the validity of the old signature. If it passes, then Aura-
sium will proceed to sign the application with its own
5
certiﬁcate that corresponds to the application’s original
certiﬁcate, or a newly generated one if this application
has not been encountered earlier. In this way, the equiv-
alence classes of authorship among applications are still
maintained by Aurasium’s re-signing procedure. Prob-
lems can still arise if Aurasium re-signs only a partial set
of applications in the cases of application updates or ap-
plications intending to cooperate with their siblings. We
consider these cases non-severe, with one reason being
that Aurasium is more likely to be applied to a standalone
application from a non-trusted source where application
updates and application cooperation are not common.
Because all private keys of the generated certiﬁcates
need to be stored4 for future queries, the re-signing pro-
cess contains highly conﬁdential information and, hence,
requires careful protection. It should be (physically) sep-
arated from Aurasium’s other services and perceived as
an oracle with minimal interfaces to allow re-signing an
already-signed application. For higher assurance, hard-
ware security modules could be used.
2.2.5 Aurasium’s Security Manager
Aurasium-wrapped applications are self-contained in the
sense that the policy logic and the relevant user inter-
face are included in the repackaged application bundle,
and so are remembered user decisions stored locally in
the application’s data directory. Alternatively, Aurasium
Security Manager (ASM) can also be installed, enabling
central handling of policy decisions of all repackaged
application on the device. Depending on the enforced
polices at repackaging time, an application queries the
ASM for a policy decision via IPC mechanisms with in-
tents describing the sensitive operation it is about to per-
form, and the ASM either prompts the user for consent,
uses a remembered user decision recorded earlier, or au-
tomatically makes a decision without user interaction by
enforcing a predeﬁned policy embedded at repackaging
time. The policy logic in individual applications prefers
delegating policy decisions to the ASM, and will fall
back to local decisions only if a genuine ASM instance
is not detected on the device.
Using ASM for central policy decision management
has one major advantage: policy logic can be controlled
globally, and it can also be improved by updating the
ASM instance on the device. For example, IP address
blacklisting and whitelisting can be managed and kept
up to date by ASM. Repackaged applications are able
to take advantage of better policy logics once ASM is
updated, even after they have been repackaged and de-
ployed to users’ devices. There is a tradeoff between the
ﬂexibility of ASM and the efﬁciency of repackaged ap-
4Alternatively, these new certiﬁcates can be generated from the
original certiﬁcate under a master key.
plication, though. In extreme cases, a repackaged appli-
cation can proxy every IPC call to ASM, but this would
be vastly inefﬁcient. In our implementation ASM is con-
sulted only with high-level summaries of potential sensi-
tive operations, the set of which is ﬁxed at repackaging
time.
2.3 Policies
Now that we have demonstrated the ability to repackage
arbitrary applications with Aurasium to insert monitor-
ing code, we discuss various security policies that lever-
age this technique. It is important to point out that these
are just some examples that we implemented as a proof
of concept so far. Aurasium itself provides a ﬂexible
framework under which many more potent policies are
possible.
We are interested primarily in enforcing some security
policy that protects the device from untrusted applica-
tions. This includes not only attempts by the application
to access sensitive information, leaking to the outside
world or modifying it, but also attempts by the applica-
tion to escalate privilege and to gain root access on the
device by running suspicious system calls and loading
native libraries. Aurasium’s architecture and design al-
low us to implement many of the already-proposed poli-
cies such as dynamically constraining permissions [33],
or setting up default dummy IMEI and IMSI numbers as
well as phone numbers, as in [27].
The following subsections describe a set of policies
that are easily checkable by Aurasium. The enforcement
of these policies is supported by Aurasium intercepting
the following functions:
• ioctl()
This is the main API through which all IPCs are
sent. By interposing this and reconstructing the
high-level IPC communication, Aurasium is able to
monitor most Android system APIs and enforce the
privacy and SMS policies, and modifying the IPC
arguments and results on the ﬂy.
In certain cases
such as content providers, Aurasium replaces the re-
turned Cursor object with a wrapper class to allow
ﬁner control over the returned data.
• getaddrinfo() and connect()
These functions are responsible for DNS resolving
and socket connection.
Intercepting them allows
Aurasium to control the application’s Internet ac-
cess.
• dlopen(), fork() and execvp()
The loading of native code from Java and execution
of external programs are provided by these func-
tions, which Aurasium monitors.
6
• read(), write()
These functions reﬂect access to the ﬁle system. In-
tercepting them allows Aurasium to control private
and shared ﬁles accesses.
• open() and reﬂection APIs in libdvm.so5
These functions are intercepted to prevent malicious
applications from circumventing Aurasium’s sand-
boxing. Because Aurasium may stores policy de-
cisions in the application’s local directory, it must
prevent the application from tampering with the de-
cision ﬁle. open() is hooked such that whenever it
is invoked on the decision ﬁle it will check the JNI
call stack and allow only Aurasium code to success-
fully open the ﬁle. The various reﬂection APIs are
also guarded to prevent malicious applications from
modifying Aurasium’s Java-based policy logic by
reﬂection.
2.3.1 Privacy Policy
The most obvious set of policies that can be deﬁned re-
lates to users’ privacy. These policies protect the pri-
vate data of the user such as the IMEI, IMSI, phone
number, location, stored SMS messages, phone conver-
sations, and contact list. These policies can be checked
by monitoring access to the system services provided by
the Framework APIs. While many APIs are available
to access system services, they all translate to a single
call to the ioctl() system call. By monitoring calls to
ioctl(), and parsing the data that is transmitted in the
call, we are able to determine which service is being ac-
cessed and alert the user.
Figure 3: Enforcement of Privacy Policies: Access to
Phone Number
Figure 3 illustrates how Aurasium intercepts a request
made by an application to access the user’s phone num-
ber. Aurasium displays a warning message and prompts
5Dalvik java lang reflect Method invokeNative(),
Dalvik java lang reflect Field setField()
Dalvik java lang reflect Field setPrimitiveField()
and
7
the user to either accept the requested access or deny
it. The user can also make Aurasium store that user’s
answer to the request so that the same request never
prompts the user for approval again and the cached an-
swer is used instead. Finally, the user has the option to
terminate the application.
Aurasium is capable of intercepting requests for the
IMEI (Figure 4) and IMSI identiﬁers. Both the IMEI and
IMSI numbers are often abused by applications to track
users and devices for analytics and advertisement pur-
poses, but are also used by malware to identify victims.
Similar policies are also implemented for accessing
device location and contact list. In all of the above cases,
if the user denies an request for the private information,
Aurasium will provide shadow data to the application in-
stead, similar to the approach in [27];
Figure 4: Enforcement of Privacy Policies: Access to
IMEI from repackaged Android Market Security Tool
malware.
2.3.2 Preventing SMS Abuse
Figure 5 illustrates how Aurasium intercepts SMS mes-
sages sent to a premium number, which is initiated by the
malicious application AndroidOS.FakePlayer [2] found
in the wild. Aurasium displays the destination number as
well as the SMS’s content, so users can make informed
decision on whether to allow the operation or not.