**作者：w7ay @ 知道创宇404实验室  
时间：2020年8月12日**
开源的域名收集工具有很多，本文会从代码的角度去看各类开源的域名收集工具的技术特点，以及各有哪些优缺点，来帮助大家，在合适的时候选择合适的利用工具。
这里选取了常用和知名的工具，包括`subDomainBrute`,`Sublist3r`,`ESD`,`OneForAll`,`dnsprobe`,`subfinder`,`shuffledns`,`massdns`
## subDomainBrute
Github:
最早使用是lijiejie的子域名爆破工具,也是学习python时最早看的源码。
看了下commit，最早发布是在2015年，另外最近的一次更新使它支持了Python3。
`subDomainBrute`是通过纯DNS爆破来找到子域名，为了最大提升效率，`subDomainBrute`用协程+多进程的方式进行爆破。
对于python3，使用`asyncio`,`aiodns`库进行异步dns的发包，但对于python2，使用的是`dnspython`
`gevent`库，应该是历史原因导致的。
### Dns server test
对于爆破dns来说，有足够多且快的dns server是关键(爆破一段时间后，可能会有dns不再回应请求)
可以自己配置dns server在`dict/dns_servers.txt`文件中，`subDomainBrute`会在程序启动时测试DNS。
首先测试dns server
测试 public-dns-a.baidu.com 返回 180.76.76.76 是正确的dns
测试 test.bad.dns.lijiejie.com 抛出异常则为正确的dns，如果有返回结果，则不正常。
### 泛域名
`subDomainBrute`没有泛域名处理，如果存在泛域名解析，程序就会直接退出。
## Sublist3r
Github [https://github.com/aboul3la/Sublist3r
](https://github.com/aboul3la/Sublist3r "https://github.com/aboul3la/Sublist3r
")
Sublist3r也是2015年发布的,在暴力破解的基础上还会通过接口枚举来获取域名。
它的爆破模块用的是 
>
> SubBrute是一个社区驱动的项目，旨在创建最快，最准确的子域枚举工具。SubBrute背后的神奇之处在于它使用开放式解析器作为一种代理来规避DNS速率限制（https://www.us-> cert.gov/ncas/alerts/TA13-088A）。该设计还提供了一层匿名性，因为SubBrute不会将流量直接发送到目标的名称服务器。
提供了一层匿名性 => 用很多代理DNS来进行DNS请求
它只有多进程来运行爆破程序，如果在Windows下，它只会使用线程
可能是觉得在Windows下难以操控多线程吧。
但这样一来它的效率就太慢了。
它支持的搜索引擎
    supported_engines = {'baidu': BaiduEnum,
                             'yahoo': YahooEnum,
                             'google': GoogleEnum,
                             'bing': BingEnum,
                             'ask': AskEnum,
                             'netcraft': NetcraftEnum,
                             'dnsdumpster': DNSdumpster,
                             'virustotal': Virustotal,
                             'threatcrowd': ThreatCrowd,
                             'ssl': CrtSearch,
                             'passivedns': PassiveDNS
                             }
用随机数来判断是否泛解析
    #Using a 32 char string every time may be too predictable.
    x = uuid.uuid4().hex[0:random.randint(6, 32)]
    testdomain = "%s.%s" % (x, host)
同样它也不支持泛解析的支持。
唯一有优势的就是它能作为一个python包存在，通过pip就能快速安装使用，或者把它集成在代码中。
## ESD
Github:
相比于的暴力收集手段，esd在很多方面有独特的想法。
#### 支持泛解析域名
> 基于`RSC`（响应相似度对比）技术对泛解析域名进行枚举（受网络质量、网站带宽等影响，速度会比较慢）
>
> 基于`aioHTTP`获取一个不存在子域名的响应内容，并将其和字典子域名响应进行相似度比对。
> 超过阈值则说明是同个页面，否则则为可用子域名，并对最终子域名再次进行响应相似度对比。
#### 更快的速度
> 基于`AsyncIO`异步协程技术对域名进行枚举（受网络和DNS服务器影响会导致扫描速度小幅波动，基本在250秒以内）
>
> 基于`AsyncIO`+`aioDNS`将比传统多进程/多线程/gevent模式快50%以上。
> 通过扫描`qq.com`，共`170083`条规则，找到`1913`个域名，耗时`163`秒左右，平均`1000+条/秒`。
#### 更全的字典
> 融合各类字典，去重后共170083条子域名字典
>
>   * 通用字典
>     * 单字母、单字母+单数字、双字母、双字母+单数字、双字母+双数字、三字母、四字母
>     * 单数字、双数字、三数字
>   * 域名解析商公布使用最多的子域名
>     * DNSPod: dnspod-top2000-sub-domains.txt
>   * 其它域名爆破工具字典
>     * subbrute: names_small.txt
>     * subDomainsBrute: subnames_full.txt
>
#### 更多的收集渠道
>   * 收集DNSPod接口泄露的子域名
>   * 收集页面响应内容中出现的子域名
>   * 收集跳转过程中的子域名
>   * 收集HTTPS证书透明度子域名
>   * 收集DNS域传送子域名
>   * 收集搜索引擎子域名
>   * 收集zoomeye、censys、fofa、shodan的接口结果
>
#### DNS服务器
>   * 解决各家DNS服务商对于网络线路出口判定不一致问题
>   * 解决各家DNS服务商缓存时间不一致问题
>   * 解决随机DNS问题，比如fliggy.com、plu.cn等
>   * 根据网络情况自动剔除无效DNS，提高枚举成功率
>
很多实现都值得学习，这里贴出一些值得学习的代码。
### 域传输漏洞实现
    class DNSTransfer(object):
        def __init__(self, domain):
            self.domain = domain
        def transfer_info(self):
            ret_zones = list()
            try:
                nss = dns.resolver.query(self.domain, 'NS')
                nameservers = [str(ns) for ns in nss]
                ns_addr = dns.resolver.query(nameservers[0], 'A')
                # dnspython 的 bug，需要设置 lifetime 参数
                zones = dns.zone.from_xfr(dns.query.xfr(ns_addr, self.domain, relativize=False, timeout=2, lifetime=2), check_origin=False)
                names = zones.nodes.keys()
                for n in names:
                    subdomain = ''
                    for t in range(0, len(n) - 1):
                        if subdomain != '':
                            subdomain += '.'
                        subdomain += str(n[t].decode())
                    if subdomain != self.domain:
                        ret_zones.append(subdomain)
                return ret_zones
            except BaseException:
                return []
### HTTPS证书透明度获取子域名
    class CAInfo(object):
        def __init__(self, domain):
            self.domain = domain
        def dns_resolve(self):
            padding_domain = 'www.' + self.domain
            # loop = asyncio.get_event_loop()
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            resolver = aiodns.DNSResolver(loop=loop)
            f = resolver.query(padding_domain, 'A')
            result = loop.run_until_complete(f)
            return result[0].host
        def get_cert_info_by_ip(self, ip):
            s = socket.socket()
            s.settimeout(2)
            base_dir = os.path.dirname(os.path.abspath(__file__))
            cert_path = base_dir + '/cacert.pem'
            connect = ssl.wrap_socket(s, cert_reqs=ssl.CERT_REQUIRED, ca_certs=cert_path)
            connect.settimeout(2)
            connect.connect((ip, 443))
            cert_data = connect.getpeercert().get('subjectAltName')
            return cert_data
        def get_ca_domain_info(self):
            domain_list = list()
            try:
                ip = self.dns_resolve()
                cert_data = self.get_cert_info_by_ip(ip)
            except Exception as e:
                return domain_list
            for domain_info in cert_data:
                hostname = domain_info[1]
                if not hostname.startswith('*') and hostname.endswith(self.domain):
                    domain_list.append(hostname)
            return domain_list
        def get_subdomains(self):
            subs = list()
            subdomain_list = self.get_ca_domain_info()
            for sub in subdomain_list:
                subs.append(sub[:len(sub) - len(self.domain) - 1])
            return subs
### 纯socket实现的check dns server
    def check(self, dns):
            logger.info("Checking if DNS server {dns} is available".format(dns=dns))
            msg = b'\x5c\x6d\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x03www\x05baidu\x03com\x00\x00\x01\x00\x01'
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.settimeout(3)
            repeat = {
                1: 'first',
                2: 'second',
                3: 'third'
            }
            for i in range(3):
                logger.info("Sending message to DNS server a {times} time".format(times=repeat[i + 1]))
                sock.sendto(msg, (dns, 53))
                try:
                    sock.recv(4096)
                    break
                except socket.timeout as e:
                    logger.warning('Failed!')
                if i == 2:
                    return False
            return True
### 基于文本相似度过滤泛解析域名
这个代码跨度很大，下面是简化版本
    from difflib import SequenceMatcher
    # RSC ratio
    self.rsc_ratio = 0.8
    self.wildcard_html # 获取一个随机子域名的html
    ratio = SequenceMatcher(None, html, self.wildcard_html).real_quick_ratio()
                            ratio = round(ratio, 3)
    if ratio > self.rsc_ratio:
        # passed
        logger.debug('{r} RSC ratio: {ratio} (passed) {sub}'.format(r=self.remainder, sub=sub_domain, ratio=ratio))
    else:
      # added
### 其他
ESD只能用文本相似度来过滤泛解析，但以此会导致机器的内存，CPU都暴涨，机器性能小不建议使用。
另外ESD似乎不能在windows下使用，因为看最后保存的路径写死了是`/tmp/esd`
其他感觉没有不兼容的地方，解决了这个路径Windows应该就可以用了。
另外
>   * 解决各家DNS服务商对于网络线路出口判定不一致问题
>   * 解决各家DNS服务商缓存时间不一致问题
>   * 解决随机DNS问题，比如fliggy.com、plu.cn等
>
这三个不知道怎么解决的，可能代码躲在了哪个角落，没发现。
## OneForAll
OneForAll 
OneForAll的更新很勤快，我写这篇文章时，发现1小时前就有新的提交。
OneForAll的功能也很多，被动搜索域名，子域爆破，子域接管，端口探测，指纹识别，导出等等。
### 被动搜索
OneForAll集成了很多收集域名的web接口，每个接口为一个py文件，py文件中最后都会基于`common/module.py
Module`这个类，这个类提供了很多需要通用方法，如网页的请求，匹配域名，保存结果以及运行时需要的各类方法。
比较令人注意的是匹配域名的方法，因为很多web的接口返回格式都不太一样，要每个插件都处理一遍这样的格式吗?不必，OneForAll编写了通用域名匹配函数，即通过正则对最终结果匹配。
    def match_subdomains(domain, html, distinct=True, fuzzy=True):
        """
        Use regexp to match subdomains
        :param  str domain: main domain
        :param  str html: response html text
        :param  bool distinct: deduplicate results or not (default True)
        :param  bool fuzzy: fuzzy match subdomain or not (default True)
        :return set/list: result set or list
        """
        logger.log('TRACE', f'Use regexp to match subdomains in the response body')
        if fuzzy:
            regexp = r'(?:[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?\.){0,}' \
                     + domain.replace('.', r'\.')