### 0x00 前言
续师傅前些天跟我说骑士 CMS 更新了一个补丁，`assign_resume_tpl`这个全局函数出现了问题，让我分析看看，我看了下官网公告：
`/Application/Common/Controller/BaseController.class.php`文件的`assign_resume_tpl`函数因为过滤不严格，导致了模板注入，可以进行远程命令执行。
### 0x01 知识背景
骑士 CMS 采用的同样是 Thinkphp 框架，不过其版本是 3.2.3，我们知道 3.2.3 的标准 URL 路径如下：
    http://serverName/index.php/模块/控制器/操作
但骑士 CMS 采用的是普通模式，即传统的GET传参方式来指定当前访问的模块和操作，举个简单的例子，如果我们想要调用 Home 模块下的 User
控制器中的 login 方法如下：
    http://localhost/?m=home&c=user&a=login&var=value
m参数表示模块，c参数表示控制器，a参数表示操作/方法，后面的表示其他GET参数
当然，这些参数是可以改变的，如在系统配置中设置如下：
    'VAR_MODULE'            =>  'module',     // 默认模块获取变量
    'VAR_CONTROLLER'        =>  'controller',    // 默认控制器获取变量
    'VAR_ACTION'            =>  'action',    // 默认操作获取变量
那么刚才的地址就变成了：
    http://localhost/?module=home&controller=user&action=login&var=value
知道这些那么这个漏洞就很清楚应该如何构造了
### 0x02 漏洞分析
漏洞文件：`/Application/Common/Controller/BaseController.class.php`中的`assign_resume_tpl`方法：
    public function assign_resume_tpl($variable,$tpl){
            foreach ($variable as $key => $value) {
                $this->assign($key,$value);
            }
            return $this->fetch($tpl);
        }
传入两个变量，其中`$tpl`变量被传到`fetch()`方法中，跟进该方法
`/ThinkPHP/Library/Think/View.class.php`
    public function fetch($templateFile='',$content='',$prefix='') {
            if(empty($content)) {
                $templateFile   =   $this->parseTemplate($templateFile);
                // 模板文件不存在直接返回
                if(!is_file($templateFile)) E(L('_TEMPLATE_NOT_EXIST_').':'.$templateFile);
            }else{
                defined('THEME_PATH') or    define('THEME_PATH', $this->getThemePath());
            }
            // 页面缓存
            ob_start();
            ob_implicit_flush(0);
            if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { // 使用PHP原生模板
                $_content   =   $content;
                // 模板阵列变量分解成为独立变量
                extract($this->tVar, EXTR_OVERWRITE);
                // 直接载入PHP模板
                empty($_content)?include $templateFile:eval('?>'.$_content);
            }else{
                // 视图解析标签
                $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix);
                Hook::listen('view_parse',$params);
            }
            // 获取并清空缓存
            $content = ob_get_clean();
            // 内容过滤标签
            Hook::listen('view_filter',$content);
            // 输出模板文件
            return $content;
        }
首先判断传入的模板文件是否为空，如果不为空，那么继续判断是否使用了PHP原生模板，我们查看配置文件：`/ThinkPHP/Conf/convention.php`
大概111 行：
    'TMPL_ENGINE_TYPE'      =>  'Think',     // 默认模板引擎 以下设置仅对使用Think模板引擎有效
        'TMPL_CACHFILE_SUFFIX'  =>  '.php',      // 默认模板缓存后缀
        'TMPL_DENY_FUNC_LIST'   =>  'echo,exit',    // 模板引擎禁用函数
        'TMPL_DENY_PHP'         =>  false, // 默认模板引擎是否禁用PHP原生代码
可以看到骑士 CMS 默认启用的是Think模板，因此判断就进入了
    $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix);
     Hook::listen('view_parse',$params);
将值带入数组，并传入`Hook::listen()`，并解析`view_parse`标签，继续跟进`/ThinkPHP/Library/Think/Hook.class.php`，大概
80 行：
    /**
         * 监听标签的插件
         * @param string $tag 标签名称
         * @param mixed $params 传入参数
         * @return void
         */
        static public function listen($tag, &$params=NULL) {
            if(isset(self::$tags[$tag])) {
                if(APP_DEBUG) {
                    G($tag.'Start');
                    trace('[ '.$tag.' ] --START--','','INFO');
                }
                foreach (self::$tags[$tag] as $name) {
                    APP_DEBUG && G($name.'_start');
                    $result =   self::exec($name, $tag,$params);
                    if(APP_DEBUG){
                        G($name.'_end');
                        trace('Run '.$name.' [ RunTime:'.G($name.'_start',$name.'_end',6).'s ]','','INFO');
                    }
                    if(false === $result) {
                        // 如果返回false 则中断插件执行
                        return ;
                    }
                }
                if(APP_DEBUG) { // 记录行为的执行日志
                    trace('[ '.$tag.' ] --END-- [ RunTime:'.G($tag.'Start',$tag.'End',6).'s ]','','INFO');
                }
            }
            return;
        }
     /**
         * 执行某个插件
         * @param string $name 插件名称
         * @param string $tag 方法名（标签名）     
         * @param Mixed $params 传入的参数
         * @return void
         */
        static public function exec($name, $tag,&$params=NULL) {
            if('Behavior' == substr($name,-8) ){
                // 行为扩展必须用run入口方法
                $tag    =   'run';
            }
            $addon   = new $name();
            return $addon->$tag($params);
        }
也就是说当系统触发了`view_parse`事件，ThinkPHP会找到`Hook::listen()`方法，该方法会查找`$tags`中有没有绑定`view_parse`事件的方法，然后用foreach遍历`$tags`属性，并执行`Hook:exec`方法。
`Hook:exec`方法会检查行为名称，如果包含`Behavior`关键字，那么入口方法必须为`run`方法，而执行`run`方法的参数在调用`Hook::listen`时指定。
Hook的配置写在`/ThinkPHP/Mode/common.php`中，如下：
    // 行为扩展定义
        'tags'  =>  array(
            'app_init'     =>  array(
                'Behavior\BuildLiteBehavior', // 生成运行Lite文件
            ),        
            'app_begin'     =>  array(
                'Behavior\ReadHtmlCacheBehavior', // 读取静态缓存
            ),
            'app_end'       =>  array(
                'Behavior\ShowPageTraceBehavior', // 页面Trace显示
            ),
            'view_parse'    =>  array(
                'Behavior\ParseTemplateBehavior', // 模板解析 支持PHP、内置模板引擎和第三方模板引擎 
            ),
            'template_filter'=> array(
                'Behavior\ContentReplaceBehavior', // 模板输出替换
            ),
            'view_filter'   =>  array(
                'Behavior\WriteHtmlCacheBehavior', // 写入静态缓存
            ),
        ),
从配置文件可以看到`view_parse`标签执行了`ParseTemplateBehavior`这个类，因为所有行为扩展的入口都是`run`方法，所以我们只需要看`run`方法实现即可，`/ThinkPHP/Library/Behavior/ParseTemplateBehavior.class.php`17
行左右：
    class ParseTemplateBehavior {
        // 行为扩展的执行入口必须是run
        public function run(&$_data){
            $engine             =   strtolower(C('TMPL_ENGINE_TYPE'));
            $_content           =   empty($_data['content'])?$_data['file']:$_data['content'];
            $_data['prefix']    =   !empty($_data['prefix'])?$_data['prefix']:C('TMPL_CACHE_PREFIX');
            if('think'==$engine){ // 采用Think模板引擎
                if((!empty($_data['content']) && $this->checkContentCache($_data['content'],$_data['prefix'])) 
                    ||  $this->checkCache($_data['file'],$_data['prefix'])) { 
                    // 缓存有效
                    //载入模版缓存文件
                   Storage::load(C('CACHE_PATH').$_data['prefix'].md5($_content).C('TMPL_CACHFILE_SUFFIX'),$_data['var']);
                }else{
                    $tpl = Think::instance('Think\\Template');
                    // 编译并加载模板文件
                    $tpl->fetch($_content,$_data['var'],$_data['prefix']);
                }
            }else{
                // 调用第三方模板引擎解析和输出
                if(strpos($engine,'\\')){
                    $class  =   $engine;
                }else{