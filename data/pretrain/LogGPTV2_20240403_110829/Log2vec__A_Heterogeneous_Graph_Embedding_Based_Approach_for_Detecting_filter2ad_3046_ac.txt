anomalous log sequences depends on edge weight as shown in
Figure 4b. The similar numbers of log entries involved in two se-
quences cause a high weight between them. Appendix A details
edge weight computation.
Further, we propose a rule involving H:
Rule5 (edge5): daily log sequences of the same host are connected
and weights are positively related to similarity of the numbers of log
entries that they contain.
Last, we present a rule involving sub, H, A and T :
Rule6 (edge6): daily log sequences of the same operation type
and the same host are connected and weights are positively related to
similarity of the numbers of log entries that they contain.
3.2.3 Constructing graph based on objects. Object is a relatively
complicated meta-attribute because it indicates different types of
entities such as domain names, files, emails. In particular, objects of
logon operation are destination hosts as previously mentioned. We
design rules to preserve relationships among objects in the graph
based on attack of intranet and penetration from the Internet.
In intranet, an APT actor compromises a computer. If he cannot
gain information or permissions that he wants. He would employ
this account to seek for other users’ credentials [4, 50]. For instance,
the attacker utilizes the stolen account to log in to a remote server
(obj) from a computer and injects a backdoor for monitoring infor-
mation stream and stealing credentials. However, the authentication
protocol exposes the threat. This server may be a database used
for information query and a service principal name (SPN), speci-
fying the service that this server provides, has been registered in
active directory (AD). Therefore, the victim accesses this server for
querying information through Kerberos protocol. However, other
services (e.g. installing software involving a backdoor) have not
been registered in AD. NTLM, an alternative protocol, would re-
place Kerberos. Hence, we partition normal logon and anomalous
one into different subgraphs, through differentiating authentication
protocols and hosts for each user:
Rule7 (edge7): log entries of accessing the same destination host
from the same source host with the same authentication protocol are
connected in chronological order with the highest weight (value 1).
Rule8a (edge8): log sequences of the same destination host and
source one with different authentication protocols are connected and
weights are positively related to the similarities of the numbers of log
entries that they contain.
Rule8b (edge8): log sequences of different destination hosts or
source ones with the same authentication protocol are connected and
weights are positively related to the similarities of the numbers of log
entries that they contain.
Appendix A introduces weight computations of Rule8a and Rule8b.
Figure 4: Examples of constructing graph within a day and
among days. (a) user’s daily log sequence involving log en-
tries of the same host (pc1) (b) user’s daily log sequences
are connected. Log sequences of day2 and day3 have simi-
lar numbers of log entries (200, 201), thus their weight w1
higher than w2 and w3. The sequence in (a) can be respec-
tively connected to ones in (b) according to rule4. However,
when considering rule5, the sequence of day3 (b) should be
divided into two subsequences, day3/pc1 and day3/pc2, and
only the former can be connected to the one in (a) due to the
same host, pc1 (rule5). (c) user’s daily log sequence involving
log entries of the same operation type and host.
Rule3 (edge3): log entries of the same operation type, the same
host and the same day are connected in chronological order with the
highest weight (value 1).
Through these rules, log2vec constructs various daily behav-
ioral sequences. They are finer (some involving only a few log
entries) and comprise more stronger logical relationships than the
conventional ones [38, 41].
3.2.2 Constructing graph among days. An employee’s daily behav-
ior is in general regular during a period. The existing methods
mainly focus on numbers of daily operations [13, 27, 41, 46, 57].
Specifically, an employee usually has an average workload every
day. An exception far exceeding this average is likely to involve
malicious operations, as the example depicted in Section 2.2.
A logical relationship among daily log sequences reflects this
regularity of user’s behavior. Specifically, the numbers of log entries
involved in benign daily sequences are close to the average and thus
close to each other, while those of malicious ones are far different
from them. Put another way, these benign daily sequences share
similar behavioral patterns, different from the malicious ones.
To compare user’s daily behavioral sequences derived from
rule1∼rule3, we present rule4∼rule6, comprising meta-attributes
separately corresponding to those of rule1∼rule3. Through these
rules, log2vec respectively isolates anomalous behavioral sequences,
from various scenarios mentioned in Section 3.2.1, in the graph.
logonopenwritelogoff¼¼day2/pc2200 itemslogonlogonopenlogoffday3/pc1+pc2201 itemslogonconnect¼¼¼¼copylogoff day4/pc2270 itemslogonconnect¼¼openlogoffday1/pc1200 items(a)(b)w1w1w2w2w3w3logonopen¼¼viewlogoffsend    writeviewview(c)day1/pc1Session 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom1782
P(t|v) =
w(t,v)
WN(v) ,
0,
0,
0,
(t, v)∈ E,ψ(t, v)∈ Sn, Rw(t,v) ≤ neiдh
(t, v)∈ E,ψ(t, v)∈ Sn, Rw(t,v) >neiдh
(t, v)∈ E,ψ(t, v)(cid:60)Sn
(t, v)(cid:60) E
(1)
4.1 Random Walk with Different Sets of Edge
Type
Random walk generates paths traversed by walkers based on edge
type and weight. The transition probability is shown in the follow-
ing paragraph. Log2vec’s improvements are controlling the number
of neighbor nodes (neiдh) and extracting context in varying propor-
tions of sets of edge type (ps), which are designed towards tackling
problems of imbalanced dataset and varied attack scenarios.
4.1.1 Transition probability. We specify a set of edge type, Sn (e.g.
{edge1, edge4}) and the walker only considers edges, pertaining to
this set, to traverse. The transition probability at node v is defined:
where N(v) denotes specific neighbor nodes of v and WN(v) is the
sum of weights between v and N(v). In fact, N(v) does not involve
v’s all neighbors and only comprises ones that satisfy the three
subsequent conditions. Specifically, t is an arbitrary neighbor node
to v. If t belongs to N(v), it must meet the three requirements. First,
there is at least an edge between t and v. Second, there exists at
least an edge type between t and v, ψ(t, v), pertaining to Sn. Note
that there may be more than one edge type between t and v but
each random walk actually needs only one of them, which is in-
troduced in the next paragraph, thus ψ(t, v) referring to just one
type (e.g. edge1 or edge4) in this formula. In the third condition,
w(t,v) indicates weight between t and v, corresponding to the edge
type ψ(t, v) ∈ Sn. Rw(∗,v) means the descending weight rank or-
der of a certain node connecting to v with the specific edge type
ψ(∗, v) ∈ Sn. w(t,v) is taken into account iff its ranking Rw(t,v) is
not greater than the number of neighbor nodes (neiдh) that we set
in Section 4.1.2.
With regard to our task, we concretely define five sets of edge
type, {edge1, edge4}, {edge2, edge5}, {edge3, edge6}, {edge7, edge8}
and {edge9, edge10}, respectively corresponding to ten rules in
Section 3.2. Only one set is considered in each random walk. This
definition allows us to differentially extract each node’s context. It
also guarantees that each two nodes share at most one edge type in
function 1. Specifically, in each set, there exist a type focusing on
intra group (e.g. edge1, edge2, edge3, edge7 and edge9) and another
paying attention to inter group (e.g. edge4, edge5, edge6, edge8
and edge10). For instance, we specify Sn as {edge1, edge4}. Edge1
concatenates nodes (log entries) within a day while edge4 correlates
log sequences of different days. As a result, there is not such two
nodes, whose edge types simultaneously belong to these two types.
4.1.2 The number of neighbor nodes. Each set involves two edge
types, separately focusing on intra group (the same day/object) and
inter group, as previously mentioned. Edge type of intra group (e.g.
edge1 and edge9) constructs sequences of log entries and each node
in such a sequence has two neighbor nodes. Log2vec allows the
walker not to revisit the last node that he has visited and thus he
actually has only one node to visit in the sequence. Edge type of inter
group (e.g. edge4 and edge10) correlates multiple log sequences.
Figure 5: Examples of constructing graph among objects
(hosts and domain names). (a) logon operations of the same
source host, destination one and authentication protocol
(e.g. Kerberos, NTLM) are connected into log sequences. The
first sequence and the second one are connected due to the
same destination and source host (rule8a). The first one and
the third one are connected due to the same authentication
protocol (rule8b). (b) log entries of accessing the same do-
main name are connected into log sequences. Log2vec corre-
lates sequences of different domain names.
Internet is a major channel whereby an employee leaks intelli-
gence to the outside (e.g. upload data). Meanwhile, malware infect-
ing hosts in intranet is mostly from the Internet. For instance, a
victim accidentally downloads a malicious tool from an unfamiliar
website or clicks a link in an email and installs malware. Afterward,
the program executes APTs. Therefore, websites (or domain names)
are crucial objects [20, 24]. We propose rules for each user:
Rule9 (edge9): log entries of the same host and accessing the same
domain name are connected in chronological order with the highest
weight (value 1).
The goal of an attacker is to entice users to download the mali-
cious code and execute it [17]. Therefore, websites providing soft-
ware to download, instead of news to visit, are relatively more
dangerous. Access mode (visit, download, upload) is an important
element and we present a rule:
Rule10 (edge10): log sequences of the same host and different
domain names are connected and weights are positively related to the
similarities of accessing modes and numbers of log entries that they
contain.
Figure 5b depicts an instance. In log2vec, the access mode is superior
to the number. Thereby, weight w1 should be higher than w2 and w3
because of no uploads and downloads in sequence of domain name3
(implying a website just providing news), which is a difference in
accessing mode. Appendix B details how to calculate edge weight.
4 GRAPH EMBEDDING
In Section 4.1, we present an improved random walk capable of
extracting context of each node (also log entry) from the above
heterogeneous graph and Section 4.2 introduces a specific word2vec
model, to represent each node.
logonlogonlogonlogoff¼¼srcpc1+dstpc2kerberos200 itemslogonlogonlogonlogoffsrcpc1+dstpc2NTLM220 itemslogonlogon¼¼¼¼logonlogoffsrcpc3+dstpc4kerberos210 items(a)w1w1w2w2visituploaddownloadvisit¼¼domain name1200 itemsvisitdownloaduploadvisitdomain name2270 itemsvisit¼¼¼¼visitvisitdomain name3201 items(b)w1w1w2w2w3w3visitSession 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom1783Therefore the first/last node of a sequence has many neighbor nodes.
Log2vec, in essence, tunes the numbers of neighbor nodes (neiдhs)
of these nodes.
There exist two reasons why log2vec tunes neiдh. The first one
is that insider threat typically embraces only a few malicious log
entries. They cannot be isolated in the vector space if random walk
considers all neighbor nodes. For instance, we suppose that there
exist two malicious daily sequences containing similar numbers of
log entries. Meanwhile, these two sequences also connect to other
benign ones comprising far different numbers of log entries from
them. Although the edge weight between two malicious sequences
(w(t,v)) is very high due to the similar numbers of log entries,
there are such many benign ones connecting to them (increasing
WN(v)) that transition probability between these two malicious
ones (P(t|v)) sharply decreases. Therefore, context of these mali-
cious sequences inevitably involves a large number of benign ones
and their vectors cannot be isolated.
Second, the fact that in an enterprise more than one employee
may perform attacks [21], results in different numbers of malicious
log sequences. The optimal neiдh is thereby varied based on vari-
ous users. It is noticeable that neiдh is a hyperparameter and set
experimentally. However, we in principle tend to set a lower value,
such as 1, to ensure that the most similar sequence connects to the
given one.
4.1.3 The proportion of sets of edge type. Log2vec can determine
importance of each set of edge type based on different scenarios
and differentially extract contextual information. Generally, varied
attack scenarios leave different traces to be detected. That is, only
one or two meta-attributes of a log entry become anomalous in
each kind of insider attacks. For instance, an employee stealthily
connects a storage device to a computer and copies a large number
of confidential files. However, he seldom performs such operations
before. Log2vec should catch this trace and extract more contex-
tual information using {edge3, edge6} (operation type, A). Another
malicious user uploads confidential files to an unfamiliar website.
Log2vec should capture information using {edge9, edge10} (website,
obj).
More specifically, log2vec initially gives the proportion, 1:1:1:1:1,
corresponding to {edge1, edge4}, {edge2, edge5}, {edge3, edge6},
{edge7, edge8} and {edge9, edge10}. Next, log2vec selects {edge3,
edge6}, {edge7, edge8} and {edge9, edge10} to adjust because they
cover meta-attributes concerning anomalies. Specifically, {edge1,
edge4}, {edge2, edge5} and {edge3, edge6} belong to the same type,
focusing on user’s daily behavior. Compared with others, {edge3,
edge6} involves more meta-attributes, operation type (A) and host
(h), and can produce finer behavioral sequences. {edge7, edge8} and
{edge9, edge10} respectively concentrate on destination host (obj)
in intranet and website (obj) in Internet. Last, log2vec compares
user’s behavior during current period (e.g. two months) and the
last one. Meanwhile, it also makes a comparison of his behavior
with that of his colleagues, who process similar tasks. For instance,
if an employee performs a large number of logons, different from
his previous behavior and his colleagues’, log2vec should increase
the value of {edge7, edge8} in the proportion (ps). In practice, the
value is two times of sum of other sets and thereby ps is 1:1:1:8:1.
More details are given in Appendix C.
In addition, we set the number of random walk, r. Each value
of the proportion is multiplied by r. We take r=10 as an example.
According to the above proportion (1:1:1:8:1), log2vec conducts
random walk 80 times and 10 times when we respectively set Sn as
{edge7, edge8} and other sets. The pseudocode of this subsection is
detailed in Appendix D.
4.2 Word2vec Model
Log2vec employs a word2vec model, skip-gram [32, 33], to map
log entries into low-dimensional vectors through context (paths)
generated from the heterogeneous graph. It is an objective function
that maximizes the probability of its neighbors conditioned on a
node. More precisely, it aims to maximize the logarithmic function:
loдPr(wv−c ,· · · , wv +c|wv)
(2)
V
v =1
where c is the window of training context. We assume that probabil-
ity of observing its neighbor node is independent of observing any