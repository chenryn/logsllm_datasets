在原wp中有一个很厉害的操作，直接reset所有的变量。
然后只有当前get赋值，那么就只剩下get请求的变量了
![
](https://images.seebug.org/content/images/2018/12/5ad0cf0d-4726-4f70-b28a-e9ffb3872387.png-w331s)
后面就简单了拼接就好了
![
](https://images.seebug.org/content/images/2018/12/df129fcb-167e-4c87-8d67-fab8aa8dec0e.png-w331s)
然后...直接列目录好像也是个不错的办法2333
    code=readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));
# easy - nodechr
nodejs的一个小问题，关键代码如下
    function safeKeyword(keyword) {
        if(isString(keyword) && !keyword.match(/(union|select|;|\-\-)/is)) {
            return keyword
        }
        return undefined
    }
    async function login(ctx, next) {
        if(ctx.method == 'POST') {
            let username = safeKeyword(ctx.request.body['username'])
            let password = safeKeyword(ctx.request.body['password'])
            let jump = ctx.router.url('login')
            if (username && password) {
                let user = await ctx.db.get(`SELECT * FROM "users" WHERE "username" = '${username.toUpperCase()}' AND "password" = '${password.toUpperCase()}'`)
                if (user) {
                    ctx.session.user = user
                    jump = ctx.router.url('admin')
                }
            }
            ctx.status = 303
            ctx.redirect(jump)
        } else {
            await ctx.render('index')
        }
    }
这里的注入应该是比较清楚的，直接拼接进查询语句没什么可说的。
然后safekeyword过滤了`select union -- ;`这四个，下面的逻辑其实说简单的就一句
    c = `SELECT * FROM "users" WHERE "username" = '${a.toUpperCase()}' AND "password" = '${b.toUpperCase()}'`
如何构造这句来查询flag，开始看到题一味着去想盲注的办法了，后来想明白一点，在注入里，没有select是不可能去别的表里拿数据的，而题目一开始很明确的表明flag在flag表中。
所以问题就又回到了最初的地方，如何绕过safekeyword的限制。
ph师傅曾经写过一篇文章 
在js中部分字符会在toLowerCase和toUpperCase处理的时候发生难以想象的变化
    "?"、"?"这两个字符在变大写的时候会变成I和S
    "?"这个字符在变小写的时候会变成k
用在这里刚好合适不过了。
    username=ddog
    password=' un?on ?elect 1,flag,3 where '1'='1
# hard - thejs
javascript真难....
关键代码以及注释如下
    const fs = require('fs')
    const express = require('express')
    const bodyParser = require('body-parser')
    const lodash = require('lodash')
    const session = require('express-session')
    const randomize = require('randomatic')
    const app = express()
    app.use(bodyParser.urlencoded({extended: true})).use(bodyParser.json()) //对post请求的请求体进行解析
    app.use('/static', express.static('static'))
    app.use(session({
        name: 'thejs.session',
        secret: randomize('aA0', 16), // 随机数
        resave: false,
        saveUninitialized: false
    }))
    app.engine('ejs', function (filePath, options, callback) { // 模板引擎
        fs.readFile(filePath, (err, content) => {   //读文件 filepath
            if (err) return callback(new Error(err))
            let compiled = lodash.template(content)  //模板化
            let rendered = compiled({...options})   //动态引入变量
            return callback(null, rendered)
        })
    })
    app.set('views', './views')
    app.set('view engine', 'ejs')
    app.all('/', (req, res) => {
        let data = req.session.data || {language: [], category: []}
        if (req.method == 'POST') {
            data = lodash.merge(data, req.body) // merge 合并字典
            req.session.data = data
        }
        res.render('index', {
            language: data.language, 
            category: data.category
        })
    })
    app.listen(3000, () => console.log(`Example app listening on port 3000!`))
由于对node不熟，初看代码的时候简单研究了一下各个部分都是干嘛的。然后就发现整个站几乎没什么功能，就是获取输入然后取其中固定的输出，起码就自己写的代码来说不可能有问题。
再三思考下觉得可能问题在引入的包中...比较明显的就是`lodash.merge`这句，这句代码在这里非常刻意，于是就顺着这个思路去想，简单翻了一下代码发现没什么收获。后来@spine给了我一个链接
## js特性
首先我们可以先回顾一下js的一部分特性。
由于js非常面向对象的编程特性，js有很多神奇的操作。
![
](https://images.seebug.org/content/images/2018/12/83e5101b-4867-4351-b3b4-d26352b5f5ea.png-w331s)
在js中你可以用各种方式操作自己的对象。
在js中，所有的对象都是从各种基础对象继承下来的，所以每个对象都有他的父类，通过prototype可以直接操作修改父类的对象。
![
](https://images.seebug.org/content/images/2018/12/7671213b-ab7d-4c78-ac7d-0de21102b224.png-w331s)
而且 **子类会继承父类的所有方法** 。
在js中，每个对象都有两个魔术方法，一个是`constructor`另一个是`__proto__`。
对于实例来说，constructor代表其构造函数，像前面说的一样，函数可以通过prototype获取其父对象
    function myclass () {}
    myclass.prototype.myfunc = function () {return 233;}
    var inst = new myclass();
    inst.constructor // return function myclass
    inst.constructor.prototype // return the prototype of myclass
    inst.constructor.prototype.myfunc() // return 233
![
](https://images.seebug.org/content/images/2018/12/d6822d30-7138-42a8-a196-e2af503c7710.png-w331s)
而另一个魔术方法`__proto__`就等价于`.constructor.prototype`
![
](https://images.seebug.org/content/images/2018/12/3bf1ed96-8d5c-42b3-93f3-cd6c63dc1699.png-w331s)
由于 **子类会继承父类的所有方法** ，所以如果在当前对象中找不到该方法，就会到父类中去找，直到找不到才会爆错
![
](https://images.seebug.org/content/images/2018/12/8b279bb4-024d-40cb-8c68-24f532988d26.png-w331s)
在复习了上面的特性之后，我们回到这个漏洞
## 回到漏洞
在漏洞分析文中提到了这样一种方式
    https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf
假设对于语句
    obj[a][b][c] = value
如果我们控制a为constructor，b为prototype，c为某个key，我们是不是就可以为这个对象父类初始化某个值，这个值会被继承到当前对象。同理如果a为`__proto__`，b也为`__proto__`，那么我们就可以为基类`Object`定义某个值。
当然这种代码不会随时都出现，所以在实际场景下，这种攻击方式会影响什么样的操作呢。
首先我们需要理解的就是，我们想办法赋值的`__proto__`对象并不是真正的这个对象，如图
![
](https://images.seebug.org/content/images/2018/12/19aa5dd8-ac52-4202-9d96-8d868105d2ca.png-w331s)
所以想要写到真正的`__proto__`中，我们需要一层赋值，就如同原文范例代码中的那样
![
](https://images.seebug.org/content/images/2018/12/0484a94e-2d5b-4112-a83f-1b4f8d45ec64.png-w331s)
通过这样的操作，我们就可以给Object基类定义一个变量名。
由于 **子类会继承父类的所有方法** ，但首先需要保证子类没有定义这个变量，因为 **只有当前类没有定义这个变量，才会去父类寻找** 。
在js代码中，经常能遇到这样的代码
    if (!obj.aaa){
        ...
    }
这种情况下，js会去调用obj的aaa方法，如果aaa方法undefined，那么就会跟入到obj的父类中（js不会直接报该变量未定义并终止）。
这种情况下，我们通过定义obj的基类Object的aaa方法，就能操作这个变量，改变原来的代码走向。
最后让我们回到题目中来。
## 回到题目
回到题目中，这下代码的问题点很清楚了。整个代码有且只有1个输入点也就是`req.body`，这个变量刚好通过`lodash.merge`合并.
![
](https://images.seebug.org/content/images/2018/12/49559d1b-f16a-4d15-ad4e-1cf3b87323a5.png-w331s)
这里的`lodash.merge`刚好也就是用于将两个对象合并，成功定义了`__proto__`对象的变量。
![
](https://images.seebug.org/content/images/2018/12/3f518f01-fc67-4f21-a2f7-4d8745ad46c4.png-w331s)
我们也可以通过上面的技巧去覆盖某个值，但问题来了，我们怎么才能getshell呢？
顺着这个思路，我需要在整个代码中寻找一个，在影响Object之后，且可以执行命令的地方。
很幸运的是，虽然我没有特别研究明白nodejs，但我还是发现模板是动态生成的。
![
](https://images.seebug.org/content/images/2018/12/4d3e737e-0ba6-4576-8230-5d166df52e10.png-w331s)
这里的代码是在请求后完成的（动态渲染？）
跟入到template函数中，可以很清楚的看到
![
](https://images.seebug.org/content/images/2018/12/de00b448-980f-4daa-955a-e2ce1b027042.png-w331s)
接下来就是这一大串代码中寻找一个可以影响的变量，我们的目标是找一个未定义的变量，且后面有判断调用它
![
](https://images.seebug.org/content/images/2018/12/576e3cc0-b766-45fb-82e4-d198b44a81cc.png-w331s)
这里的sourceURL刚好符合这个条件，我们直接跟入前面的options定义处，进入函数一直跟下去，直到lodash.js的3515行。
![
](https://images.seebug.org/content/images/2018/12/a47edb83-0717-4858-a946-52f904463fc6.png-w331s)
![
](https://images.seebug.org/content/images/2018/12/00aa85d8-58b5-47b7-8601-7ebcb4cdb1d5.png-w331s)
可以看到object本身没有这个方法，但仍然遍历到了，成功注入了这个变量，紧接着渲染模板就成功执行代码了。
## 完成攻击
其实发现可以注入代码之后就简单了，我朋友说他不能用child_process来执行命令，我测试了一下发现是可以的，只是不能弹shell回来不知道怎么回事。思考了一下决定直接wget外带数据出来吧。
poc
![
](https://images.seebug.org/content/images/2018/12/8c134654-7992-408d-8a88-9fecfa9cede5.png-w331s)
需要注意一定要是json格式，否则`__proto__`会解成字符串，开始坑了很久。
直接偷懒用ceye接请求，其实用什么都行
![
](https://images.seebug.org/content/images/2018/12/ef762f53-6468-4603-b824-d1a1a40cd23c.png-w331s)
* * *