techniques.
To (completely) resolve these, we require the replicas to
periodically get rid of tentative requests, i.e., committed but
unopened client requests. In sequencer-based protocols, this
procedure can be initiated by the primary. This procedure
only makes sense for a fair BFT protocol, because otherwise
replicas might unfairly delay some correct clients’ reveal
messages such that the corresponding requests are cleaned by
the cleanup procedure.
An underlying assumption is that
the delay between a
correct client and at least f +1 correct replicas (which watch if
primary enforces fairness and trigger view change otherwise)
cannot be signiﬁcantly larger than the delay between another
correct client and the f + 1 correct replicas. We deﬁne the
channel delay to be the maximum number of steps (measured
by tentative requests) that a speciﬁc request can be later than
another correct request issued at the same time. We also deﬁne
the fairness delay to be the maximum number of steps (also
It
measured by tentative requests) that a speciﬁc request can be
delayed. Clearly, to ensure correctness, we just require that
the cleanup cycle be larger than the sum of the channel delay
and fairness delay. If the primary does not initiate the cleanup
protocol according to this rule, a view change will be triggered.
is easy to see that CP1 allows batching and if the
underlying BFT protocol tolerates faulty clients so does CP1.
THEOREM 1. Assuming a secure NM-CAD (satisfying hiding,
binding, and NM-OAD) and a fair BFT protocol, CP1 is a
secure causal BFT protocol.
Remark. There are a few seemingly feasible approaches that
actually do not work. One such approach is to ﬁrst deliver
the commitment using the BFT protocol and then use a
best-effort broadcast protocol to broadcast the opening. This
does not work because, for instance, the client may simply
crash. A second approach is to ﬁrst deliver the commitment
and then use a reliable broadcast protocol to broadcast the
opening. Liveness might be impeded because BFT and reliable
broadcast have different means to ensure liveness and tentative
requests from correct clients may be falsely cleaned.
One may also use NMC instead of NM-CAD. In order
for this to work, each client needs to append ID to the
committed message, and in the reveal process replicas will
verify if ID matches the identity of the sender. This needs
extra bookkeeping for the protocol and extra communication
for ampliﬁcation. More importantly, NM-CAD is a more
natural ﬁt for the scenario where associated data need not
be privacy-protected. Depending on constructions, the method
using NMC may also incur additional computational overhead.
D. CP2 and CP3
We consider the scenario where clients may be only sub-
ject to crash failures. This scenario models a large set of
realistic circumstances: 1) Clients are honest-but-curious, a
commonly used assumption in distributed systems and multi-
party computation. 2) Clients may be some upper-level appli-
cations already made intrusion-tolerant. In practical distributed
systems and cloud computing platforms, both clients and
servers may be replicated. 3) Clients may not be interested in
attacking the safety property of the BFT service, but just aim
at compromising causality. This is because attacking causality
can allow clients to gain immediate beneﬁts, while attacking
the consistency of the system may not.
Deﬁnition of security for CP2 and CP3. We deﬁne for CP2
and CP3 message secrecy, message integrity, and message
consistency in a way that resembles ARSS. As in ARSS, there
is no need to consider message non-malleability because in the
SS setting, the notion is implied by message secrecy.
A generic construction from ARSS. A secure causal BFT
protocol can be built from any BFT protocol and any (f +1, n)
ARSS scheme with (Share, Rec) algorithms as follows.
A client runs the ARSS Share algorithm on its request m
to generate a n-vector S = S[1..n]. The client then sends
each replica i a request (ID, schedule, S[i]). Each replica
needs to maintain a mapping between S[i] and ID. In the
68
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
schedule process, the replicas run the underlying BFT protocol
to order the message identiﬁer ID. When each replica i delivers
the identiﬁer,
it starts the reveal process by broadcasting
(ID, reveal, S[i]) to the rest of the replicas. When a replica
collects enough shares, it runs Rec to decide a secret or a
distinguished symbol.
The communication carrying secret shares (i.e., the com-
munication in the secret distribute and reconstruct stages)
needs authenticated and private channels. For rest of the
communication, we just need authenticated channels.
THEOREM 2. The above generic construction built from a BFT
protocol and an ARSS scheme is a secure causal BFT protocol.
Instantiating CP2 and CP3. CP2 and CP3 can be obtained
by instantiating the above generic construction using ARSS1
and ARSS2 respectively.
For CP2, we use the speciﬁc ARSS1 algorithm for the case
where reconstructors are also share holders. More speciﬁcally,
in the schedule process, the replicas will agree upon not only
ID but also the commitment c. In the reveal process, it can
reject any faulty shares with a commitment different from c.
This leads to a more efﬁcient construction.
For both CP2 and CP3, if clients are faulty (either Byzantine
or not), input causality is never violated, but both safety and
liveness can be compromised, just as those BFT protocols that
do not tolerate Byzantine faulty clients.
E. Summary
We summarize the three frameworks and the four instan-
tiations for secure causal BFT protocols in TABLE I. The
framework using threshold encryption can be realized using
only speciﬁc number-theoretic assumptions. It requires either a
trusted dealer or an expensive interactive protocol to distribute
the system keys. This is also the only framework using
expensive threshold cryptography. All the rest of the frame-
works have efﬁcient instantiations. The framework using fair
BFT and NMC can be based on rather generic cryptographic
primitives such as one-way functions. The framework using
ARSS deals with the case of benign clients and can be divided
into two categories—using ARSS1 and using ARSS2. The ﬁrst
one can be based on any commitment scheme (thus one-way
function) and any secret sharing scheme. The second one is
based Shamir’s SS and is information-theoretically secure.
VI. IMPLEMENTATION AND EVALUATION
A. Implementation
Our
test setting comprises a cluster of 15 machines
(2.13GHz Xeon processor, 4GB RAM), 5 of which serve as
client nodes. Experiments are carried out on DeterLab [17].
We utilize PBFT [26] as our baseline and as the under-
lying BFT protocol to instantiate CP0, CP1, CP2, and CP3.
Our PBFT implementation is based on that of [4] and we
implement our fairness mechanism according to [27]. While
our protocols also apply to asynchronous consensus-based
BFT protocols (e.g., the one in CKPS [21] implemented in
the performance difference is less visible
SINTRA [23]),
For CP0, we extend Baek and Zheng’s threshold cryp-
tosystem [5] to securely support labels. We then modify an
implementation of Miller et al. [52] to enable this change.
The implementation uses hybrid encryption to encrypt long
messages. When evaluating this threshold cryptosystem, we
choose a very conservative (insecure) security parameter (less
than 80 bits of security) [15]. Still, CP0 is several orders
of magnitude slower than our three protocols, if the network
latency is small.
B. Evaluation
Overview. We
and Liskov micro-
benchmarks [26] to assess throughput, latency, scalability, and
performance during failures of all the ﬁve protocols—PBFT,
CP0, CP1, CP2, and CP3. In the x/y micro-benchmarks,
clients send x kB requests and receive y kB replies. Clients
invoke requests in a closed-loop, where a client does not start
a new request before receiving a reply for a previous one.
All the protocols implement batching of concurrent requests
to reduce cryptographic and communication overheads.
the Castro
use
compared to efﬁcient BFT protocols such as PBFT. The reason
is that in addition to threshold encryption operations, there are
other expensive operations for those asynchronous protocols.
We use HMAC [6] as the MAC algorithm to build authen-
ticated channels. We use a composed authenticated encryption
with associated-data scheme [58] to build authenticated and
private channels. Speciﬁcally, we apply CTR mode encryption
(using AES-256) and then compute its HMAC. We use SHA-
256 to instantiate the NM-CAD (for CP1) and the conventional
commitment scheme (for CP2).
We benchmark the protocols in two settings: a LAN setting
with 100 MB bandwidth and 0.1 ms latency, and a WAN
setting with 1 MB bandwidth and 120 ms latency. We show
that for both settings, and for both the gracious and uncivil
executions, CP1, CP2, and CP3 add reasonably small overhead
to the underlying PBFT protocol, and they all signiﬁcantly
outperform CP0.
Latency. We ﬁrst report the latency evaluation in the LAN
setting. We examine and compare the average latency under
no contention in the 4/0 benchmark, as depicted in TABLE II.
The results for 0/0, 0/4, and 4/4 benchmarks are similar, as
the hybrid encryption for CP0 and symmetric cryptography
for the other four protocols scale well as the length of the
message increases.
We ﬁnd that CP1 is 79%∼84% slower than PBFT. This is
expected because CP1 essentially runs two rounds of PBFT
to deliver a message. Both CP2 and CP3 have lower latency
than CP1 and higher latency than PBFT. This is also expected,
because CP2 and CP3 only add one more broadcast among
replicas compared to PBFT. We also ﬁnd that the latency
difference between CP2 (and CP3) and PBFT becomes larger
as the maximum number of faulty replicas f increases.
In contrast, CP0 is several orders of magnitude slower than
the rest of the four protocols. This is because the penalty due
to the expensive threshold cryptography is particularly visible
in the LAN setting. We also report in Fig. 3 the latency for
69
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:22 UTC from IEEE Xplore.  Restrictions apply. 
A COMPARISON. THE COLUMN LABELED “TY” SPECIFIES IF THE SCHEME USES PUBLIC-KEY CRYPTOGRAPHY (PK), SYMMETRIC CRYPTOGRAPHY (SK),
OR IS INFORMATION-THEORETICALLY SECURE (ITS). THE COLUMNS LABELED “BYZANTINE CLIENTS,” “SETUP,” AND“BATCH” SPECIFY IF THE SCHEME
TOLERATES BYZANTINE FAULTY CLIENTS, RELIES ON TRUSTED OR EXPENSIVE, INTERACTIVE SETUP, AND ALLOWS BATCHING, RESPECTIVELY.
TABLE I
frameworks
instantiations
BFT+ThreshEnc
Fair BFT+NMC
BFT+ARSS1
BFT+ARSS2
CP0
CP1
CP2
CP3
ty Byzantine clients setup batch
√
√
pk
√
sk
√
sk
its
√
√
−
−
√
−
−
−
generality
no known constructions from generic primitives
any (adaptive) one-way function
any commitment scheme and any SS
only for Shamir’s SS
TABLE II
LATENCY IN MS (LAN).
Protocol
PBFT
CP0
CP1
CP2
CP3
f = 1
0.23
f = 2
0.24
f = 3
0.25
769.13 881.00 1090.59
0.42
0.25
0.24
0.43
0.28
0.29
0.46
0.39
0.43
TABLE III
LATENCY IN MS (WAN).
Protocol
PBFT
CP0
CP1
CP2
CP3
f = 2
382.94
f = 3
f = 1
311.35
433.41
1300.03 1429.30 1506.73
471.39
591.83
525.29
372.44
479.10
585.35
512.18
400.03
502.14
each operation in the threshold encryption implementation as
the number of the replicas varies, where “verify ciphertext”
stands for the public veriﬁcation operation of the ciphertext.
In the WAN setting, the latency difference (see TABLE III)
is comparatively smaller. Yet, CP0 is still roughly three times
as slow as the rest.
Encrypt Verify ciphertext Decrypt Combine shares
f = 1
f = 2
f = 3
0
200
400
600
800
time(ms)
Fig. 3. Latency for each threshold encryption operation for f = 1, 2, 3.
Throughput. We discuss the throughput of all the ﬁve proto-
cols with different workloads under contention, where multiple
clients issue requests concurrently. In Fig. 4, we report the
throughput for the case of f = 1 as the number of clients
increases in the LAN setting. We ﬁnd that all the rest of
the protocols signiﬁcantly outperform CP0. As the number
of clients increases, CP0’s throughput does not improve as
much. Its peak performance is nearly 15 times lower than that
of PBFT.
With fewer than 40 clients, CP2, CP3, and PBFT have
similar throughput. As the number of clients further increases,
PBFT achieves higher throughput. While CP2 and CP3 have
comparable performance, CP2 has slightly higher throughput.
The reason is that CP3 will need more shares than CP2
)
c
e
s
/
s
p
o
K
(
t
u
p
h
g
u
o
r
h
T
50
40
30
20
10
0
0
PBFT
CP0
CP1
CP2
CP3
20
40
60
Number of clients
Fig. 4. Throughput for f = 1 in the LAN setting.
40
)
c
e
s
/
s
p
o