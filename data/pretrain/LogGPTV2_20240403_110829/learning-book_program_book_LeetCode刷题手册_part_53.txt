Output:
18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the 1argest sum among the two subarrays is only 18.
题目大意
给定一个非负整数数组和一个整数m，你需要将这个数组分成m个非空的连续子数组。设计一个算法
使得这m个子数组各自和的最大值最小。
注意：
数组长度n满足以下条件：
● 1 ≤ n ≤ 1000
●1 ≤ m ≤ min(50, n)
解题思路
·给出一个数组和分割的个数M。要求把数组分成M个子数组，输出子数组和的最大值。
·这一题可以用动态规划DP解答，也可以用二分搜索来解答。这一题是二分搜索里面的max-min
最大最小值问题。题目可以转化为在M次划分中，求一个×，使得x满足：对任意的s（i），都
满足S（i）≤x。这个条件保证了x是所有S（i）中的最大值。要求的是满足该条件的最小的
x。x的搜索范围在[max，sum]中。逐步二分逼近low值，直到找到能满足条件的low的最
小值，即为最终答案。
代码
package leetcode
---
## Page 498
func splitArray(nums []int, m int) int {
maxNum, sum = 0, 0
for
-, num := range nums {
sum += num
if num > maxNum {
maxNum = num
if m == 1 {
return sum
low, high := maxNum, sum
for low >1
if calSum(mid,m,nums){
high = mid
}else{
1ow = mid +
return 1ow
func calSum(mid, m int, nums []int) bool {
sum, count := 0, 0
for
-,V := range nums {
sum += V
if sum > mid {
Sum = V
count++
//分成m块，只需要插桩m-1个
if count > m-1{
return false
return true
412.Fizz Buzz
题目
Write a program that outputs the string representation of numbers from 1 to n.
But for multiples of three it should output *Fizz" instead of the number and for the multiples of
five output *Buzz". For numbers which are multiples of both three and five output FizzBuzz".
---
## Page 499
Example:
n = 15,
Return:
"1"
"2",
"Fizz"
"4",
"Buzz",
"Fizz",
"7",
"8",
"Fizz",
"Buzz",
"11",
"Fizz",
"13",
"14",
“FizzBuzz”
题目大意
解题思路
按照题意做即可。
代码
package leetcode
import "strconv"
func fizzBuzz(n int)[]string{
if n  a {
C = b
b=a
a = V
}else if v  b {
c=b
b≤V
} else if v  c {
C = V
if c == math.MinInt64 {
return a
return c
416.PartitionEqualSubsetSum
题目
Given a non-empty array containing only positive integers, find if the array can be partitioned
into two subsets such that the sum of elements in both subsets is equal.
Note:
1. Each of the array element will not exceed 100.
2. The array size will not exceed 200.
---
## Page 502
Example 1:
Input: [1, 5, 11, 5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:
Input: [1, 2, 3, 5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
题目大意
给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相
等。
注意：
1.每个数组中的元素不会超过100
2.数组的大小不会超过200
解题思路
·给定一个非空的数组，其中所有的数字都是正整数。问是否可以将这个数组的元素分为两部分，使
得每部分的数字和相等。
·这一题是典型的完全背包的题型。在n个物品中选出一定物品，完全填满sum/2的背包。
·F（n，C)代表将n个物品填满容量为C的背包，状态转移方程为F（i，C）=F（i-1,C)11
F（i-1，C-w[i]）。当i-1个物品就可以填满C，这种情况满足题意。同时如果i-1个物品
不能填满背包，加上第1个物品以后恰好可以填满这个背包，也可以满足题意。时间复杂度0（n
sum/2) =O（n*sum)。
代码
package leetcode
funccanPartition(nums[]int)bool{
sum := 0
for _, v := range nums {
sum += V
---
## Page 503
if sum%2 != 0 {
return false
// C = half sum
n, C, dp := 1en(nums), sum/2,make([]boo1, sum/2+1)
for i := 0; i = nums[i]; j-- {
dp[j] = dp[j] 11  dp[jnums[i]]
}
return dp[c]
421.MaximumXoRofTwoNumbersinanArray
题目
Given a non-empty array of numbers, a0, a1, a2, ., an-1, where 0 ≤ ai = 0; i-- {
//The mask wi1l grow like 100..000 , 110..000, 111..000,
then 1lll...111
//for each iteration, we only care about the left parts
mask = mask 1 (1  res {
res = xor
return res
424.LongestRepeatingCharacterReplacement
题目
au ul jaa Aue anedau ues no sianal yslgug aseoiaddn (juo jo sisisuo jeqs gujs e uaaig
Ie uuieuoo usqns saguol e jo yual au puly saw x nsow je janal sauoue ym us
repeating letters you can get after performing the above operations.
Note:
Both the string's length and k will not exceed 10^4.
Example 1:
---
## Page 506
Input:
S = "ABAB", k = 2
Output:
4
Explanation:
Replace the two 'A's with two 'B's or vice versa.
Example 2:
Input:
S =
"AABABBA",k = 1
output:
4
Explanation:
The substring "sBBB" has the longest repeating letters, which is 4.
题目大意
给一个字符串和变换次数K，要求经过K次字符转换以后，输出相同字母能出现连续最长的长度。
解题思路
这道题笔者也提交了好几遍才通过。这一题是考察滑动窗口的题目，但是不能单纯的把左右窗口往右移
动。因为有可能存在ABBBBBA的情况，这种情况需要从两边方向同时判断。正确的滑动窗口的做法应
该是，边滑动的过程中边统计出现频次最多的字母，因为最后求得的最长长度的解，一定是在出现频次
最多的字母上，再改变其他字母得到的最长连续长度。窗口滑动的过程中，用窗口的长度减去窗口中出
现频次最大的长度，如果差值比K大，就代表需要缩小左窗口了直到差值等于K。res不断的取出窗口
的长度的最大值就可以了。
代码
package leetcode
func characterReplacement(s string, k int) int {
---
## Page 507
res, left, right, counter, freq =0,0,1, 0, make([]int, 26)
for right = 0; right k {
freq[s[left]-'A′]--
left++
res = max(res, right-1eft+1)
return res
上
433.MinimumGeneticMutation
题目
A gene string can be represented by an 8-character long string, with choices from *A", *"c",
"G", "T".
3nO asaum (_pua, on ,ueis, woj uogenw) uojenw e ynoqe ajegjsanul o paau am asoddns
 mutation is defined as ONE single character changed in the gene string-
Also, there is a given gene *bank", which records all the valid gene mutations. A gene must be in
the bank to make it a valid gene string.
Now, given 3 things - start, end, bank, your task is to determine what is the minimum number of
mutations needed to mutate from *start" to *end". If there is no such a mutation, return -1.
Note:
1. Starting point is assumed to be valid, so it might not be includled in the bank.
 2. If multiple mutations are needed, all mutations during in the sequence must be valid.
3. You may assume start and end string is not the same.
Example 1:
start: "AACCGGTT"
end:
"AACCGGTA"
bank: ["AACCGGTA"]
return: 1
Example 2:
---
## Page 508
Start:"AACCGGTT"
end:
"AAACGGTA"
bank:["AACCGGTA","AACCGCTA", "AAACGGTA"]
return: 2
Example 3: