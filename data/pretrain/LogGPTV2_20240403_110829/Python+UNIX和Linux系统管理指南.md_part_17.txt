DocumentRoot/var/www/
/Directory>
AllowOverride None
Options FollowSymLinks
local2
www.TopSage.com
文本丨105
---
## Page 120
VirtualHost部分，替换DocumentRoot。脚本如下所示：
因此，我们需要写一个脚本，解析Apache配置文件（类似于刚刚所演示的），找到
拟主机。
请注意以“Host:”开始的行。当Apache获得一个请求，它将其传递给匹配local2的虚
的工作。函数被命名为replace_docroot()，其参数包括配置文件名，匹配的VirtualHost
配VirtualHost的结尾，一个匹配DocumentRoot这一行。我们创建了一个函数来完成繁杂
这个脚本先建立三个编译后的正则表达式对象：一个匹配VirtualHost的开始，一个匹
106
vhost_start = re.compile(r'')
from cStringI0 import StringI0
#!/usr/bin/env python
Cache-Control: max-age=0
If-None-Match:"ac5ea-53-44aecaf804900"
vhost_end
import re
If-Modified-Since:Tue, 15 Apr 2008 17:25:24 GMT
conf_file = sys.argv[1]
curr_vhost = None
conf_file = StringIo(conf_string)
第3章
docroot：
11
_vhost = False
if in_vhost and (curr_vhost == vhost):
line in conf_file:
vhost _start_match = vhost _start.search(line)
the specified vhost are replaced with the new_docroot
print line,
_string = open(conf_file).read()
= re.compile(r'
20c20
NameVirtualHost 127.0.0.1:80
loca12:80/tmp
/etc/apache2/sites-available/psa
DocumentRoot/var/www2/
DocumentRoot /tmp
ServerSignature On
Customlog /var/log/apache2/access2.log combined
Errorlog /var/log/apache2/error2.1og
DocumentRoot /tmp
ServerSignature On
Customlog /var/log/apache2/access.log combined
DocumentRoot/var/www/
AllowOverride None
Options FollowSymLinks
AllowOverride None
Options FollowSymLinks
warn
www.TopSage.com
Y
文本丨107
PDG
---
## Page 122
infile引用新的可读文件对象。一-旦创建了infile，就可以自由调用read()方法，读取整
在前一个示例中，我们指定以读模式使用open()打开文件“filefoo.txr”，
补充模式“b”可以被加到其他模式中，该模式表示二进制模式。第三个参数是缓存大
值为“r”（读模式，该值为默认值），
件打开模式，以及缓冲区大小。只有第一个参数（文件名）是必须的。最普通的模式
要创建一个文件对象，可以使用内建函数open()。下面是一个打开文件进行读取操作的
相比，这似乎更合情合理。创建一个文件对象的目的是让你可以与磁盘上的这个文件进
一个新对象，并且需要在磁盘上创建一个新文件，因此与读人文件时创建一个文件对象
但是不要把创建一个文件对象和创建一个文件搞混淆了。对文件进行写入操作需要创建
这看起来似乎不太合理，但是为了读入一个现有文件，不得不创建一个新的文件对象。
创建文件 
型可以协助完成所有这些事情。
便日后进一步处理。幸运的是，Python包括一个容易使用的称为file的内建类型，该类
步深人处理时，通常要创建一个指定类型的报告文件，或是将数据放人一个文本文件以
志文件、配置文件或应用数据文件这样的文本文件中。当需要对正在分析的数据做进一
学习处理文件的关键是学会如何处理文本数据。经常地，需要处理的文件包含在诸如日
处理文件
常简单。
VirtualHost部分、修改LogLevel指令或是改变VirtualHost存放日志的位置，这些都非
的脚本将是非常值得的。但是，这是一个相当简单的脚本。对脚本进行修改以注释掉
个文件的内容。
由于open是内建函数，不需要使用import进行载人。open()具有三个参数：文件名，文
行交互。
常改变文档的根，或者有多个虚拟主机需要你切换使用，那么写一个与刚才写的类似
108
小，表示缓存文件的操作方式。
代码示例：
In [2]: print infile.read()
In [1]: infile = open("foo.txt", "r")
第3章
Text.
Lines
www.TopSage.com
“w”（写模式）和“a”（附加模式）。一个
，并且使用变量
---
## Page 123
关闭。
尽管我们没有调用文件对象f的close()方法，但上下文管理器在退出with块时将其
方法。对于_exit_()，File对象close()方法被调用。下面的示例中演示了with语
上下文管理器的_exit_()方法也会被调用。File对象定义了_enter_()和_exit_()
建时，上下文件管理器的_enter_()方法被调用。当with块结束后，即使发生异常，
在Python2.5中一个新的关键词是with语句，它允许使用上下文管理器。一个上下文管理
finally块都会被执行。
异常发生，close()方法也会被包括进去。在try块执行完毕之后，不管异常是否发生，
使用这种写文件的方法，在异常发生时会引起close()方法被调用。事实上，即使没有
write()调用时。下面的示例展示了一个在“try/findally”块中被封闭的可写文件：
由于这是创建文件的非常简单的方式，你或许想有一个容错性更好的创建文件的方式。
write()将文本写入到文件中，并使用close()关闭文件。
outputfile引用新创建的可写文件对象。一旦我们创建了outputfile，我们可以使用
在这个示例中，我们使用open()函数以写入方式打开foo_out.txt文件，并且使用变量
志，而不是"r"标志。
创建一个用于写入的文件与创建一个用于读取的文件方法类似。写人文件使用"w"标
Out[3]: 
In [1]: try:
In [3]: outputfile.close()
In [2]: outputfile.write("This is\nSome\nRandom\nOutput Text\n")
In [1]: outputfile = open("foo_out.txt", "w")
finally:
f.write('this is a writeable file\n')
f.close()
f.write('quick line here\n')
f= open('writeable.txt',
future_
import with_statement
www.TopSage.com
(.M，
Y
文本丨109
PDG
---
## Page 124
read()对文件进行处理，如下所示：
假定有下面这样的文件：
会尽可能读到文件的结尾。如果定义的字节数多于文件的实际字节数，read()会读到文
象。read()有一个可选参数，该参数定义读取的字节数。如果没有指定字节数，read()
打开的文件对象读取数据，返回读取的字节数，并返回一个由这些字节组成的字符串对
中包含的数据：read()、readline()和readlines()。毫无疑问read()方法可以从一个
一旦有了用r标志可以打开的可读文件对象，就会得到有三个常用的file方法来取得文件
读取文件
的相关内容（htp://docs.python.org/lib/bltin-file-objects.html）。
关于file对象可用方法的完整列表，参见《Python Library Reference》中文件对象一节
闭的非常有效的实用方法。出于简化和清晰的目的，我们不会在所有示例中都这么做。
正如我们所期望的，文件对象被关闭。这是一种处理可能的异常，并确保file对象被关
如果仅需要文件的前5个字节，可以这样进行处理：
件的结尾，并且返回已经读取的字符数。
取文件的一行文本。readline()有一个可选参数：size。size定义readline()在返回一
接下来介绍的从一个文件获取文本的方法readline()。readline()方法的目的是一次读
注意换行被表示成\n，这是创建一个新行的标准方法。
110|
ValueError: I/0 operation on closed file
/Users/jmjones/ in ()
In [4]: f.write("this won't work")
In [1]: f = open("foo.txt", "r")
jmjones@dink:~/some_random_directory$ cat foo.txt Some Random
ValueError
In [2]: f.read(5)
In [1]: f = open("foo.txt", "r")
Out[2]:
In [2]: f.read()
Of
Text.
Lines
第3章
'Some
www.TopSage.com
Traceback (most recent call last)
DG
---
## Page 125
文件并将数据写到里面。为了将数据写人文件，需要掌握两个常用的file方法。第一个
有时需要对文件进行进一步的处理，而不仅是从文件中读取数据。这就需要创建自己的
写文件
是sizehint并不是总是按着我们认为的方式工作，因此需要时刻注意。
8262，那么大约读取的字节数1024是怎么回事？原来内部缓存大约会占8KB。关键问题
ln [3]显示我们读取了102行，1n [4]显示这些行总共8262字节。如果实际读取的字节数是
读人文件中的其他行：
括80个字符。我们打开文件，希望读取文件的前N行（这总共大约1024个字节），之后
在接下来的示例中，我们创建了一个文件biglines.txt，该文件包含了10 000行，每一行包
的，这就是事实。readlines()有一个sizehint选项，用于指定读人字符的大约总数。
也不是之前示例中一个因剪切/粘贴留下的错误。readlines()读入文件中的所有行。是
最后一个要介绍的从文件读取文本的方法是readlines()。readlines()不是排版错误,
着的是第二行的其余文本：
例中，程序会从文件foo.txt读入文本的第一行，然后从第2行读入前7个字节，后面跟
个字符串对象之前读取的最大字节数，而不论是否达到了行的结尾。因此，在下面的示
In [6]: len(lines)
In [5]: lines = f.readlines()
In [4]: len(".join(lines)
In [2]:lines = f.readlines(1024)
In [1]: f = open("biglines.txt", "r")
Out[6]: 9898
Out[3]:102
In [3]: len(lines)
Int[3]: f.readline(7)
In [1]: f = open("foo.txt", "r")
Out[3]:
In [2]: f.readline()
www.TopSage.com
文本”111
---
## Page 126
据写人文件的示例中使用了write()方法：
方法之前已经演示过，是write()。write()有一个参数：写人文件的字符串。下面将数
以下是一个使用发生器函数向文件中写入数据的示例（这在功能上等同于前一示例，但
子，使用writelines将数据写入文件：
组，组合列表（也是列表）或者是发生器。下面是一个发生器表达式writelines()的例
writelines()要写入打开文件的序列。该序列可以是任何迭代对象类型，如列表，元
接下来介绍的常用数据写入方法是writelines()。writelines()必须有一个参数：
看到写人文件的内容与我们使用read()读取出来的内容是相同的。
两行数据。ln [4]为了避免与之前使用的f混淆，使用变量g作为文件对象。从ln [5]可以
在ln [1]，我们使用“w”标志（即可写入方式）打开了一个文件。ln[2]向文件内写入了
112|
是使用了更多的代码）：
In [1]: f = open("some_writable_file.txt", "w")
In [2]: f.writelines("%s\n" % i for i in range(10))
In [1]: f = open("writelines_outfile.txt", “w")
Out[s]:'Test\nFile\n'
In [5]: g.read()
In [4]: g = open("some_writable_file.txt", "r")
In [3]: f.close()
In [2]: f.write("Test\nFile\n")
In [2]: f = open("writelines_generator_function_outfile", "w")
In [1]: def myRange(r):
Out[5]:'0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n'
In [5]: g.read()
In [4]: g = open("writelines_outfile.txt", "r")
In [3]: f.close()
In [4]: f.close()
In [3]: f.writelines(myRange(10)).
第3章
....
：
=0
i+=1
**
www.TopSage.com
X
---
## Page 127
建一个文件对象，然后对比sys.stdin与这个打开的文件对象会发生什么。
一个可读的文件对象。让我们看一下如果先打开一个磁盘上的名为foo.txt的文件来创
标准输人需要通过加载sys模块和引用stdin属性（sys.stdin）进行访问。sys.stdin是
将其视为磁盘上的文件，并且使用合适的方法。
当作类文件对象对待。既然它们是类文件对象，就可以使用在文件中使用的方法。可以
库提供对标准输人和输出的访问时，尽管它们没有直接连接到磁盘上的文件，却将它们
Python标准库包括一个内建的称为sys的模块，该模块提供对标准输人输出的支持。标准
许命令与其他工具连接使用。
出是程序的输出，由程序在运行时执行写入操作。使用标准输入和标准输出的好处是允
熟悉的工作。标准输人只是简单地将数据送人程序，使程序在运行时可以读取。标准输
在进程的标准输入中读取文本，或是写入到进程的标准输出，这是绝大多数系统管理员
标准输入和输出
有关yield语句的相关内容，可以查阅《Python Reference Manual》的yield语句一节
“generator expression”部分（http:/ldocs.python.org/ref/lgenexpr.html）。为了获得更多
要了解更多的generator表达式的相关内容可以参考《Python Reference Manual》的
（可在线访问http://docs.python.org/ref/yield.html）。
lpython2-chp-7-sect-2）或者查阅《Python LibraryReference》的文件对象一-章（也可在
的《LearningPython》第7章（也可以在线访问http://safari.oreilly.com/0596002815/
如果需要了解file对象更多的信息，请查阅DavidAscher 和Mark Lutz(O'Reilly)编著