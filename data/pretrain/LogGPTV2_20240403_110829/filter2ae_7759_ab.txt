       0xffffffff8196a4ae :  mov    edx,DWORD PTR [rbp+0x398]
       0xffffffff8196a4b4 :  test   edx,edx
       0xffffffff8196a4b6 :  jne    0xffffffff8196a14d 
       0xffffffff8196a4bc :  mov    rax,QWORD PTR [r15+0x78] // rax == *(ep->asocs)
       0xffffffff8196a4c0 :  lea    r13,[rax-0x78]           // r13(&asoc) == rax-0x78
       0xffffffff8196a4c4 :  cmp    r15,r13                  //asoc ?= ep(head)
       0xffffffff8196a4c7 :  je     0xffffffff8196a65a 
       0xffffffff8196a4cd :  mov    esi,DWORD PTR [rsp]
       0xffffffff8196a4d0 :  mov    rcx,r12
       0xffffffff8196a4d3 :  mov    rdx,r14
       0xffffffff8196a4d6 :  mov    rdi,r13
       0xffffffff8196a4d9 :  call   0xffffffff81966fd0 
       0xffffffff8196a4de :  test   eax,eax
       0xffffffff8196a4e0 :  je     0xffffffff8196a528 
       0xffffffff8196a4e2 :  js     0xffffffff8196a1b9 
       0xffffffff8196a528 :  mov    r13,QWORD PTR [r13+0x78] // next = asoc.next
       0xffffffff8196a52c :  sub    r13,0x78                 //asoc = next-0x78
       0xffffffff8196a530 :  cmp    r15,r13                  //asoc ?= head
       0xffffffff8196a533 :  jne    0xffffffff8196a4cd 
       0xffffffff8196a535 :  jmp    0xffffffff8196a1b9 
上面三部分汇编的大体意思我也已经标注了，如果是因为asoc（r13）被置零，那么，地址`0xffffffff8196a528`处对应的r13应该为0，解引用`PTR
[r13+0x78]`的时候势必会因为空指针解引用而出现crash，但是崩溃的时候rip并没有指向这里，而是再次进入`sctp_sendmsg_check_sflags`此时rdi寄存器的值是有问题的，这个值是一个非法内存，为什么会出现这样的情况？
    list_for_each_entry(asoc, &ep->asocs, asocs) {
                err = sctp_sendmsg_check_sflags(asoc, sflags, msg,
                                msg_len);
上面这段代码用for循环简写一下的话就是
    for(asoc=head.asoc;asoc.asocs!=head;asoc=asoc.next){
        sctp_sendmsg_check_sflags(asoc, sflags, msg,msg_len);
    }
执行完一次循环以后，在执行下一次循环时，aosc被更新为`asoc.next`，执行`sctp_sendmsg_check_sflags`函数时，`rdi`寄存器的值是有问题的，也就是asoc有问题，因此可以考虑是不是第一次循环时asoc结构的`list_head`被修改了，在这个地方下一个内存断点调试。
因为问题出现在使用`list_for_each_entry`的时候，因此我在这个地方断下来，此时的上下文
    $r13   : 0xffff8880622db410
    $r14   : 0xffffc90000bbfec0 -> 0xffffc90000bbfdc0 -> 0x0100007fff930002 -> 0x0100007fff930002
    $r15   : 0xffff88806c21f9d0 -> 0x0000000000000000 -> 0x0000000000000000
    $eflags: [carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow resume virtualx86 identification]
    $cs: 0x0010 $ss: 0x0018 $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000 
    ------------------------------------------------------------------------------------ code:x86:64 ----       0xffffffff8196a522  movabs eax, ds:0x6d8b4d0424448bff
       0xffffffff8196a52b  js     0xffffffff8196a576 
       0xffffffff8196a52d  sub    ebp, 0x78
    ->0xffffffff8196a530  cmp    r15, r13
       0xffffffff8196a533  jne    0xffffffff8196a4cd 
       0xffffffff8196a535  jmp    0xffffffff8196a1b9 
       0xffffffff8196a53a  test   r13w, 0x204
       0xffffffff8196a540  jne    0xffffffff8196a41d 
       0xffffffff8196a546  test   r12, r12
    ------------------------------------------------------------------ source:net/sctp/socket.c+2056 ----       2051  
       2052     lock_sock(sk);
       2053  
       2054     /* SCTP_SENDALL process */
       2055     if ((sflags & SCTP_SENDALL) && sctp_style(sk, UDP)) {
    ->2056          list_for_each_entry(asoc, &ep->asocs, asocs) {
       2057             err = sctp_sendmsg_check_sflags(asoc, sflags, msg,
根据分析，此时的r13跟r15分别对应asoc跟head。
在asoc偏移0x78的地方下一个内存访问端点,执行就可以了
    gef> awatch *0xffff8880622db488
    Hardware access (read/write) watchpoint 3: *0xffff8880622db488
然后，程序运行到了这个地方，有了一个赋值操作
    -------------------------------------------------------------- source:./include/linux[...].h+127 ----        122  
        123  static inline void list_del(struct list_head *entry)
        124  {
        125     __list_del_entry(entry);
        126     entry->next = LIST_POISON1;
    -> 127      entry->prev = LIST_POISON2;
        128  }
        129  
        130  /**
        131   * list_replace - replace old entry by new one
        132   * @old : the element to be replaced
    ---------------------------------------------------------------------------------------- threads ----    [#0] Id 1, Name: "", stopped, reason: SIGTRAP
    [#1] Id 2, Name: "", stopped, reason: SIGTRAP
    ------------------------------------------------------------------------------------------ trace ----    [#0] 0xffffffff81f6800e->list_del(entry=)
    [#1] 0xffffffff81f6800e->sctp_association_free(asoc=0xffff8880622db410)
    [#2] 0xffffffff81f5fc93->sctp_cmd_delete_tcb(cmds=, asoc=)
    [#3] 0xffffffff81f5fc93->sctp_cmd_interpreter(state=, status=, gfp=, commands=, event_arg=, asoc=0xffff8880622db410, ep=, subtype=, event_type=)
    [#4] 0xffffffff81f5fc93->sctp_side_effects(gfp=, commands=, status=, event_arg=, asoc=, ep=, state=, subtype=, event_type=)
    [#5] 0xffffffff81f5fc93->sctp_do_sm(net=, event_type=, subtype={
      chunk = SCTP_CID_INIT_ACK, 
      timeout = SCTP_EVENT_TIMEOUT_T1_INIT, 
      other = (unknown: 2), 
      primitive = SCTP_PRIMITIVE_ABORT
    }, state=, ep=, asoc=0xffff8880622db410, event_arg=0xffff88806bf12980, gfp=0x6000c0)
结合汇编可以看出，此时的entry对应着asoc，而`LIST_POISON1`这个值可以通过翻源码找到,即`0xdead000000000000+0x100`
    /*
     * Architectures might want to move the poison pointer offset
     * into some well-recognized area such as 0xdead000000000000,
     * that is also not mappable by user-space exploits:
     */
    #ifdef CONFIG_ILLEGAL_POINTER_VALUE
    # define POISON_POINTER_DELTA _AC(CONFIG_ILLEGAL_POINTER_VALUE, UL)
    #else
    # define POISON_POINTER_DELTA 0
    #endif
    /*
     * These are non-NULL pointers that will result in page faults
     * under normal circumstances, used to verify that nobody uses
     * non-initialized list entries.
     */
    #define LIST_POISON1  ((void *) 0x100 + POISON_POINTER_DELTA)
    #define LIST_POISON2  ((void *) 0x200 + POISON_POINTER_DELTA)
而且此时asoc结构的list_head已经被修改
    gef> p (*(struct sctp_association*)0xffff8880622db410)->asocs
    $1 = {
      next = 0xdead000000000100, 
      prev = 0xffff88806c21fa48
    }
然后执行到这个地方
    0xffffffff8196a528 :  mov    r13,QWORD PTR [r13+0x78] // next = asoc.next
       0xffffffff8196a52c :  sub    r13,0x78                 //asoc = next-0x78
       0xffffffff8196a530 :  cmp    r15,r13                  //asoc ?= head
       0xffffffff8196a533 :  jne    0xffffffff8196a4cd 
       0xffffffff8196a535 :  jmp    0xffffffff8196a1b9 
重新为asoc赋值。导致再次进入check_flags函数的时候，第一个参数地址无效导致crash。这样解释就可以跟crash时的上下文信息对应起来了。
还有一个问题，为什么`*asoc = NULL`并没有将asoc置空呢？
因为这个代码出现在`sctp_side_effects`函数中
    static int sctp_side_effects(enum sctp_event event_type,
                     union sctp_subtype subtype,
                     enum sctp_state state,
                     struct sctp_endpoint *ep,
                     struct sctp_association **asoc,
                     void *event_arg,
                     enum sctp_disposition status,
                     struct sctp_cmd_seq *commands,
                     gfp_t gfp)
这个函数传入的是一个二级指针，并没有影响到原始值。