Advanced SQL
01 — The Core of SQL
Torsten Grust
Universität Tübingen, Germany
1 ┆ The Core of SQL
Let us recollect the core constructs of SQL, synchronize
notation, and introduce query conventions.
If you need to refresh your SQL memory, consider
the notes for Datenbanksysteme 1 (Chapters 6, 9, 13)
the PostgreSQL 9.6 web (Part II, The SQL Language)
We will significantly expand on this base SQL vocabulary
during the semester.
Sample Table
Table T serves as a common “playground” for the upcoming SQL
queries:
Table T
a b c d
1 'x' true 10
2 'y' true 40
3 'x' false 30
4 'y' false 20
5 'x' true NULL
CREATE TABLE T (a int PRIMARY KEY, -- implies NOT NULL
b text, -- here: char(1)
c boolean,
d int);
2 ┆ Row Variables
Iterate over all rows of table T (in some order: bag
semantics), bind row variable t to current row:
SELECT t -- ➋ t is bound to current row
FROM T AS t -- ➊ bind/introduce t
If you omit AS t in the FROM clause, a row variable T
(generally: AS ‹table name›) will be implicitly
introduced.
This course: always explicitly introduce/name row
variables for disambiguation, clarity, readability.
Row Values
SELECT t -- ➋ t is bound to current row
FROM T AS t -- ➊ bind/introduce t
Row variable t is iteratively bound to row values whose
field values and types are determined by the rows of
table T:
field names: a b c d
↓ ↓ ↓ ↓
t ≡ (5, 'x', true, NULL) ⎫
t ≡ (1, 'x', true, 10) ⎬ row values
⋮ ⋮
t ≡ (2, 'y', true, 40) ⎭
↑ ↑ ↑ ↑
field types: int text boolean int
Row Types ✎
t :: T with T = (a int, b text, c boolean, d int).1 Row
type T is defined when CREATE TABLE T (...) is performed.
A row type ‹τ› can also be explicitly defined via
CREATE TYPE ‹τ› AS (a int, b text, c boolean, d int)
A table T1 equivalent to T — well, almost""# — may then
be created via
CREATE TABLE T1 OF ‹τ›
1 Read :: as “has type.”
Row Field Access and *
Named field access uses dot notation. Assume t :: T and
binding t ≡ (5, 'x', true, NULL) then:
t.b evaluates to 'x' (of type text),
t.d evaluates to NULL (of type int).
Field names are not first-class in SQL and must be named
verbatim (i.e., may not be computed).
Notation t.* abbreviates t.a, t.b, t.c, t.d in contexts
where this makes sense.2
2 t.* is most often used in SELECT clauses.
Row Comparisons
Row comparisons between rows t₁, t₂ are performed field-
by-field and lexicographically (provided that the field
types match). Assume t₁ :: T, t₂ :: T:
t₁ = t₂ ⟺ t₁.a = t₂.a AND ⋯ AND t₁.d = t₂.d
t₁  1, the ‹eᵢ› must agree in arity and field types
(row value ‹e₁› is used to infer and determine types).
VALUES automatically assigns column names "column‹i›".
Use column aliasing to assign names (see FROM below).
Orthogonality: a VALUES clause (in parentheses) may be
used anywhere a SQL query expects a table.
5 ┆ Generating Row Variable Bindings (FROM) ✎
A FROM clause expects a set of tables ‹Tᵢ› and successively
binds the row variables ‹tᵢ› to the tables' rows:
SELECT ... -- ➊
FROM ‹T₁› AS ‹t₁›, ..., ‹Tₙ› AS ‹tₙ› -- ➋
The ‹Tᵢ› may be table names or SQL queries computing
tables (in (⋯)).
If you need to rename the columns of ‹Tᵢ› (recall the
VALUES clause), use column aliasing on all (or only the
first k ) columns:
!
‹Tᵢ› AS ‹tᵢ›(‹cᵢ₁›, ..., ‹cᵢₖ›)
FROM Computes Cartesian Products ✎
SELECT ...
FROM ‹T₁› AS ‹t₁›, ..., ‹Tₙ› AS ‹tₙ›
This FROM clause generates |‹T₁›| × ⋯ × |‹Tₙ›| bindings.
Semantics: compute the Cartesian product ‹T₁› × ⋯ ×
‹Tₙ›, draw the bindings for the ‹tᵢ› from this product.
✎
FROM operates over a set of tables (',' is associative
and commutative).
In particular, row variable ‹tᵢ› is not in scope in the
table subqueries ‹Tᵢ₊₁›, ""#, ‹Tₙ›.
6 ┆ WHERE Discards Row Bindings ✎
A WHERE clause introduces a predicate ‹p› that is evaluated
under all row variable bindings generated by FROM:
SELECT ... -- ➌
FROM ‹T₁› AS ‹t₁›, ..., ‹Tₙ› AS ‹tₙ› -- ➊
WHERE ‹p› -- ➋
All row variables ‹tᵢ› are in scope in ‹p›.
Only bindings that yield ‹p› = true are passed on.3
Absence of a WHERE clause is interpreted as WHERE true.
3 If ‹p› evaluates to NULL ≠ true, the binding is discarded.
7 ┆ Compositionality: Subqueries Instead of Values
“
The meaning of a complex expression is determined by the
”
meanings of constituent expressions.
—Principle of Compositionality
With the advent of the SQL-92 and SQL:1999 standards, SQL
has gained in compositionality and orthogonality:
Whenever a (tabular or scalar) value v is required, a SQL
expression in (⋯) — a subquery — may be used to compute
v.
Subqueries nest to arbitrary depth.
Scalar Subqueries: Atomic Values
A SQL query that computes a single-row, single-column table
(column name □ irrelevant) may be used in place of an atomic
value v:
□
v
In a scalar subquery""#
""# an empty table is interpreted as NULL,
""# a table with > 1 rows or > 1 columns will yield a
runtime error.
Scalar Subqueries: Atomic Values ✎
generate single column
↓
SELECT 2 + (SELECT t.d AS _
FROM T AS t
WHERE t.a = 2) AS "The Answer"
╰──┬──╯
equality predicate on key column,
will yield ≤ 1 rows
Runtime errors: WHERE t.a > 2, SELECT t.a, t.d
Yields NULL: WHERE t.a = 0
AS _ assigns “don't care” column name — this is a case
where column naming is obsolete and adds nothing.
Scalar Subqueries: Row Values
A SQL query that computes a single-row table with column
names ‹cᵢ› may be used in place of row value (v₁, ..., vₙ)
with field names ‹cᵢ›:
‹c₁› (cid:42247) ‹cₙₙ›
v₁ ⋯ vₙ
In a scalar subquery""#
""# an empty table is interpreted as (NULL, ..., NULL),
""# a table with > 1 rows will yield a runtime error.
Row Variable Scoping
Subqueries may refer to any row variable t bound in their
enclosing queries (up to the top-level query):4
enclosing query enclosing query
⋮
FROM T AS t ✔ ⋯ t ⋯ ✗
⋮
⋮
⋯ t ⋯ FROM T AS t
⋮
subquery subquery
Row variable scoping in SQL
4 Note: From inside the subquery — i.e., inside the (⋯) — row variable t is free.
Subqueries, Free Row Variables, Correlation
If t is free in subquery q, we may understand the
subquery as a function q(t): you supply a value for t, I
will compute the (tabular) value of q:
SELECT t1.* evaluated 5 times
FROM T AS t1 under t1 bindings:
WHERE t1.b <> (SELECT t2.b ⎫ t1 ≡ (1, ...)
FROM T AS t2 ⎬ t1 ≡ (2, ...)
WHERE t1.a = t2.a) ⎭ t1 ≡ (3, ...)
↑ t1 ≡ (4, ...)
free t1 ≡ (5, ...)
Subqueries featuring free variables are also known as
correlated.
8 ┆ Row Ordering (ORDER BY)
SQL tables are unordered bags of rows, but rows may be
locally ordered for result display or positional access:
SELECT ... -- ➌
FROM ... -- ➊
WHERE ... -- ➋
ORDER BY ‹e₁›, ..., ‹eₙ› -- ➍
The order of the ‹eᵢ› matters: sort order is determined
lexicographically with ‹e₁› being the major criterion.
The sort criteria ‹eᵢ› are expressions that may refer to
column names in the SELECT clause.
SELECT t.* FROM T AS t (cid:42247) ✎
⋯ ORDER BY t.d ASC NULLS FIRST
a b c d
5 'x' true NULL
1 'x' true 10
4 'y' false 20
3 'x' false 30
2 'y' true 40
⋯ ORDER BY t.b DESC, t.c
a b c d
4 'y' false 20
2 'y' true 40
3 'x' false 30
1 'x' ⃰ true ⃰ 10
5 'x' ⃰ true ⃰ NULL
Note: ASC (ascending) is default. NULL is larger than any
non-NULL value. Ties :⃰ order is implementation-dependent.
Row Order is Local Only
ORDER BY establishes a well-defined row order that is local
to the current (sub)query:
may yield rows in any order
↓
SELECT t1.*
FROM (SELECT t2.* ⎫ guaranteed row order
FROM T AS t2 ⎬ inside the subquery only
ORDER BY t2.a) AS t1; ⎭
Never rely on row orders that appear consistent across
⚠
runs — may vary between DBMSs, presence of indexes, etc.
Q: What, then, is such local row order good for?
Positional Access to Rows ✎
Once row order has been established it makes sense to “skip
to the nᵗʰ row” or “fetch the next m rows.”
⋯
┌─────┬─────┐
ORDER BY A₁
│ A₁ │ ⋯ │ pos
OFFSET ‹n›
├─────┼─────┤
│ │ │ ₀ ⎫
LIMIT ‹m›
│ │ │ ₁ ⎬ n rows skipped
│ │ │ ⋮ ⎭
│ │ ⋮ │ ₙ ⎫
OFFSET 0 reads from the
│ │ │ ⋮ ⎬ m rows fetched
│ │ │ ₙ₊ₘ₋₁ ⎭
start. LIMIT ALL fetches
│ │ │ ⋮
└─────┴─────┘
all rows.
Alternative syntax: FETCH [FIRST | NEXT] ‹m› ROWS ONLY.
9 ┆ Identify Particular Rows Among Peers (DISTINCT ON)
Extract the first row among a group of equivalent rows:
prefix of ORDER BY clause
╭─────┴─────╮
SELECT DISTINCT ON ➍ (‹e₁›,...,‹eₙ›) ‹c₁›,...,‹cₖ› -- ➋
FROM ... -- ➊
ORDER BY ‹e₁›,...,‹eₙ›,‹eₙ₊₁›,...,‹eₘ› -- ➌
1. Sort rows in ‹e₁›,..., ‹eₙ›,‹eₙ₊₁›,...,‹eₘ› order.
2. Rows with identical ‹e₁›,...,‹eₙ› values form one group.
3. From each of these groups, pick the first row in
‹eₙ₊₁›,...,‹eₘ› order.
Without ORDER BY, step 3 picks any row in each group.
⚠
DISTINCT ON: Group, Then Pick First in Each Group ✎
-- For each A₁, extract the row with the largest A₂
SELECT DISTINCT ON (A₁) ...
FROM ...
ORDER BY A₁, A₂ DESC
┌─────┬─────┬─────┐
│ A₁ │ A₂ │ ⋯ │
├─────┼─────┼─────┤
│ ⋮ │ ⋮ │ ⋮ │
│┈┈┈┈┈│┈┈┈┈┈│┈┈┈┈┈│
group ⎰ │ xᵢ │ yᵢ₁ │ ⋯ │ pick
⎱ │ xᵢ │ ⋮ │ ⋮ │ } discard
┈┈┈┈┈┈┈┈┈ │┈┈┈┈┈│┈┈┈┈┈│┈┈┈┈┈│ ┈┈┈┈┈┈┈┈┈┈┈┈┈
⎧ │ xⱼ │ yⱼ₁ │ ⋯ │ pick
group ⎨ │ xⱼ │ ⋮ │ ⋮ │ ⎱ discard
⎩ │ xⱼ │ ⋮ │ ⋮ │ ⎰
│┈┈┈┈┈│┈┈┈┈┈│┈┈┈┈┈│
│ ⋮ │ ⋮ │ ⋮ │
└─────┴─────┴─────┘
DISTINCT: Table-Wide Duplicate Removal
Keep only a single row from each group of duplicates:
SELECT DISTINCT ➌ ‹c₁›,...,‹cₖ› -- ➋
FROM ... -- ➊
True duplicate removal: rows are considered identical if
they agree on all k columns ‹cᵢ›.5
Row order is irrelevant. DISTINCT returns a set of rows.
May use SELECT ALL ... to explicitly document that a