operation will differ for different devices. Firmalice requires
the analyst to provide this information as part of a “Security
Policy”, which speciﬁes resources that a device may not access
or actions that a device cannot perform without authentication.
We describe these policies in detail in Section V.
In the next section, we will provide an overview of
Firmalice’s operation, from the input of a ﬁrmware sample
and security policy to the detection of authentication bypass
vulnerabilities.
III. APPROACH OVERVIEW
The identiﬁcation of authentication bypasses in ﬁrmware
proceeds in several steps. At a high level, Firmalice loads
a ﬁrmware image, parses a security policy, and uses static
analysis to drive a symbolic execution engine. The results
from this symbolic execution are then checked against the
security policy to identify violations.
We summarize each individual step in this section, and
describe them in detail in the rest of the paper.
Firmware Loading. Before the analysis can be carried out,
ﬁrmware must be loaded into our analysis engine. We
describe this process, and the special challenges that
ﬁrmware analysis introduces, in Section IV. The output
of this step is an internal representation of a loaded,
ready-to-analyze ﬁrmware sample.
is
into analyzable properties of
Security Policies. Firmalice has the capability to translate
security policies
the
program itself. Speciﬁcally, Firmalice takes the privileged
operation, described by a security policy, and identiﬁes
a set of privileged program points, which are points in
the program that, if executed, represent the privileged
operation being performed. Security policies, and how
Firmalice translates them into privileged program points,
are described in Section V.
Static Program Analysis. The
then
passed to the Static Program Analysis module. This
module generates a program dependency graph of the
ﬁrmware and uses this graph to create an authentication
slice from an entry point to the privileged program point.
This is detailed in Section VI.
loaded ﬁrmware
Symbolic Execution. The authentication slice created by the
Static Program Analysis module is passed to Firmalice’s
Symbolic Execution engine, presented in Section VII.
The symbolic execution engine attempts to ﬁnd paths
that successfully reach a privileged program point. When
such a path is found, the resulting symbolic state (termed
the privileged state),
is passed to the Authentication
Bypass Check module.
Authentication Bypass Check. Every privileged state found
by the Symbolic Execution engine is passed to the Bypass
Check module. This module uses the concept of input
determinism to determine whether the state in question
represents the use of an authentication bypass vulnerabil-
ity. The authentication bypass model, and the procedure
to check a privileged state against it, are described in
Section VIII. If the state is determined to represent an
authentication bypass, Firmalice’s analysis terminates,
and the input required to trigger the bypass is extracted
and provided as Firmalice’s output. If the input required
to bypass authentication depends on prior communication
with the device, Firmalice produces a function that, given
the output of such communication, produces a valid input.
State
Backdoor
Normal
Constraints
input_0 = “GO” && input_1 = “ON”
input_0 = get_username_0 &&
input_1 = get_password_0
Input
“GO\nON\n”
(undetermined)
TABLE I: The privileged states resulting from Firmalice’s
symbolic execution.
To better explain how Firmalice operates on a ﬁrmware
sample, we present an example in this section. For simplicity,
the example is a user-space ﬁrmware sample with a hardcoded
backdoor, shown in Listing 1 (the backdoor is the check in
lines 2 and 3). Note that while Listing 1 presents source code,
our approach operates on binary code.
In this example, the security policy provided to Firmalice
is: “The Firmware should not present a prompt
for a
command (speciﬁcally, output the string Command:) to an
unauthenticated user.”
Firmalice ﬁrst
loads the ﬁrmware program, using the
techniques described in Section IV, and carries out its Static
Program Analysis, as described in Section VI. This results in
a control ﬂow graph and a data dependency graph. The latter
is then used to identify the location in the program where the
string Command: is shown to the user. This serves as the
privileged program point for Firmalice’s analysis. The control
ﬂow graph, which is part of the end result of the Static
Program Analysis, is shown in Figure 1, with the privileged
program point marked with a dashed outline.
Firmalice utilizes its Static Program Analysis module to
create an authentication slice to the privileged program point.
In our example, this slice comprises the nodes in Figure 1
that are not greyed out.
The extracted authentication slice5 is then passed to Fir-
malice’s Symbolic Execution engine. This engine explores the
slice symbolically, and attempts to ﬁnd user inputs that would
reach the privileged program point. In this case, it ﬁnds two
such states: one that authenticates the user via the backdoor,
and one that authenticates the user properly. The symbolic
constraints associated with these states are shown in Table I.
As these privileged states are discovered, they are passed
to the Authentication Bypass Check module. In this case, the
component would detect that the ﬁrst state (with a username of
“GO” and a password of “ON”) contains a completely deter-
ministic input, and, thus, represents an authentication bypass.
Upon detecting this, Firmalice’s analysis terminates and out-
puts the input required to reach the privileged program point.
Listing 1: Example of authentication code containing a
hard-coded backdoor.
a u t h ( char *u , char *p ) {
( ( s t r c m p ( u ,
( s t r c m p ( p ,
return SUCCESS ;
"GO" ) == 0 ) &&
"ON" ) == 0 ) )
p u t s ( " H e l l o ! " ) ;
i f
( a u t h ( i n p u t ( " User : " ) ,
system ( i n p u t ( "Command : " ) ) ;
i n p u t ( " Password : " ) ) )
IV. FIRMWARE LOADING
The ﬁrst step of analyzing ﬁrmware is, of course, loading
it into the analysis system. Firmware takes one of two forms:
user-space ﬁrmware. Some embedded devices actually run
a general-purpose OS, with much of their functionality
implemented in user-space programs. A common example
of this is the wide array of Wi-Fi routers on the market,
5Starting at the user input in line 19, traversing the auth() function, and
ending at the privileged program point in line 20.
4
i = 0 ;
p o i n t l e s s ( ) ;
i < 10000000;
i ++)
char * s t o r e d _ u = g e t _ u s e r n a m e ( ) ;
char * s t o r e d _ p = g e t _ p a s s w o r d ( ) ;
i f
s t o r e d _ u ) == 0 ) &&
s t o r e d _ p ) == 0 ) )
( ( s t r c m p ( u ,
( s t r c m p ( p ,
return SUCCESS ;
e l s e return FAIL ;
f o r ( i n t
1 i n t
i f
2
3
4
5
6
7
8
9
10
11
12
13
14
15 }
16
17 i n t main ( ) {
18
19
20
21 }
Firmalice’s purposes, an over-estimation of entry points
is acceptable in practice. The reason for this is that
the
privileged program points are not reachable from most of the
entry points, and hence the static analysis discards superﬂuous
entry points from further consideration.
V. SECURITY POLICIES
Traditional vulnerability detection systems
such as
KLEE [8], AEG [29], and Mayhem [24], among others, are
designed to identify memory corruption vulnerabilities in
software. Since such vulnerabilities are easily described in a
general way (i.e., a control ﬂow hijack occurs whenever the
program being analyzed jumps to a user-speciﬁed location),
these systems can be created with a speciﬁc vulnerability
model and that is then leveraged in the analysis of many
different programs.
Firmalice’s task is more difﬁcult, as authentication bypass
vulnerabilities are a class of logic ﬂaws. Logic ﬂaws take
many forms based on, intuitively, the actual intended logic of
the developers of the software (or, in our case, ﬁrmware) that
is analyzed. Since a logic ﬂaw is a deviation of a program’s
execution from the logic intended by the developers of the
program, what actually constitutes one is highly dependent on
what the device in question is designed to do. This holds true
for authentication bypass vulnerabilities, the speciﬁc class of
logic ﬂaws that Firmalice is designed to detect. For example,
the ability to watch videos without authentication might be
acceptable when dealing with a streaming media set-top box,
but represents an authentication bypass when analyzing a
network-connected camera.
Automatically reasoning about
the intended logic of
a program requires reasoning about
the intentions of the
programmer, which we consider outside of the scope of
program analysis. Thus, Firmalice requires a human analyst to
provide a security policy. For our purposes, a security policy
must specify what operations should be considered privileged
(and, hence, must always require the user to be authenticated).
When provided a security policy, Firmalice analyzes
the ﬁrmware in question to convert
the policy into a set
of privileged program points: that is, a set of points in the
code of the ﬁrmware that, when executed, would cause the
privileged operation to be performed. This set of program
points is then utilized by Firmalice in its analysis to identify
if the execution can reach the speciﬁed program point without
proper authentication.
These policies vary in the amount of knowledge that they
require the analyst to have about the inner working of the
ﬁrmware: from information that any user moderately familiar
with the device would possess, to intricate details about code
reachability or memory accesses. The rest of this section
describes the policies that Firmalice supports and discusses
how Firmalice utilizes these policies to identify privileged
program points.
Static output. A security policy can be speciﬁed as a rule
about some static data (usually ASCII text, but in general
any sequence of bytes) the program must not output
to a user that has not been properly authenticated. An
example of such policy is “The program must not output
AUTHENTICATION SUCCEEDED to an unauthenticated
user.”
When provided such a policy, Firmalice searches
the ﬁrmware for the static data and utilizes its data
dependency graph (described in Section VI) to identify
locations in the program where this data can be passed
into an output routine. These locations become the priv-
ileged program points for the remainder of the analysis.
Behavioral rules. Another policy that Firmalice supports is
the regulation of what actions a device may take without
authentication. In the case of a smart lock, this policy
might be “The lock motor must never turn without
proper authentication.” For Firmalice to be able to reason
about such policies, the user must also specify how this
action would be accomplished. For example, for a device
with peripherals that should never read from an attached
camera without authentication, this might be “A ﬁle in
/dev must never be opened without authentication.”
Firmalice processes this policy by analyzing its control
ﬂow graph and data dependency graph for positions where
an action is taken that matches the parameters speciﬁed in
the security policy. In our example, this would be any lo-
cation where a string that is data-dependent on any string
starting with “/dev” is passed to the open system call.
Memory access. Embedded devices often communicate with
and act on memory-mapped sensors and actuators. To
support identifying authentication bypass vulnerabilities
in such devices, Firmalice accepts security policies that
reason about access to absolute memory addresses. When
supplied such a policy, Firmalice identiﬁes locations in
the data dependency graph where such memory locations
are accessed, and identiﬁes them as privileged program
points.
Direct privileged program point identiﬁcation. If
the
analyst has detailed knowledge about the ﬁrmware, the
privileged program points can be speciﬁed directly as
function addressed in the security policy. These are then
passed directly to the rest of the analysis.
These security policies are general enough to cover the
intended behavior of the ﬁrmware samples that we have seen
so far.
Of course, Firmalice’s Security Policy Parsing module
can be extended to support other types of security policies,
if required. However, we see the creation and parsing of
more intricate security policy as an orthogonal problem to
the identiﬁcation of authentication bypass vulnerabilities, and
thus, consider further work in this area outside of the scope
of our contribution.
The security policy, along with the ﬁrmware sample itself,
represent the inputs to Firmalice.
VI. STATIC PROGRAM ANALYSIS
Symbolically executing entire binary ﬁrmware images
is not feasible due to the size of the ﬁrmware of complex
embedded devices.
Instead of analyzing entire binaries,
Firmalice focuses on the portions of binaries that are relevant
to authentication bypass vulnerabilities. Speciﬁcally,
the
symbolic execution step only needs to be carried out on the
parts of the ﬁrmware leading to a privileged program point
in the ﬁrmware. Firmalice isolates this code by creating a
slice through the ﬁrmware. Speciﬁcally, Firmalice creates a
6
backward slice, starting from the privileged program point,
backwards to an entry point in the ﬁrmware.
The static analysis module requires as input the loaded
ﬁrmware sample (produced by the Firmware Loading module,
described in Section IV). The actual slicing step also requires
the address of one or more privileged program points.
These should be instructions in the ﬁrmware that should
only be reached by authenticated users. As we discuss in
Section V, privileged program points are derived from an
analyst-provided security policy.
The identiﬁcation of privileged program points speciﬁed
by a security policy, and the creation of backward slices
leading to them, requires the use of a program dependency
graph (PDG) to reason about
the control and data ﬂow
required to arrive at a speciﬁc point in the program. The
program dependency graph comprises a data dependency
graph (DDG) and a control dependency graph (CDG). Those,
in turn, require a control ﬂow graph to be created.
A. Control Flow Graph
The ﬁrst step in creating a PDG is the creation of a CFG,
a graph of program basic blocks and transitions between
them. Firmalice creates a context-sensitive CFG by statically
analyzing the ﬁrmware, starting from each of the entry points
and looking for jump edges in the graph. Firmalice can
support computed and indirect jumps (including jump tables)
by leveraging its Symbolic Execution module, described in
Section VII. Firmalice’s analyses are performed with a call-site
context sensitivity of 2, to improve the precision of the static
analysis. This threshold for the call-site context sensitivity
can be changed at the expense of an exponential runtime
increase, but, in practice, we have found that a threshold of
2 works well for the ﬁrmware samples that we analyzed.
Firmalice leverages several techniques to increase the pre-
cision of its control ﬂow graph. During CFG generation, Fir-
malice utilizes forced execution to systematically explore both
directions of every conditional branch [32]. When it encounters
a computed or indirect jump, Firmalice can leverage its sym-
bolic execute engine (which will be described in Section VII)
to reason about the possible targets of that jump. By doing
this, Firmalice is able to handle complex control ﬂow transfers,
such as jump tables. In turn, a precise CFG has a trickle-down
effect on the precision of the rest of Firmalice’s analysis.
Firmalice stores the context-sensitive CFG as a graph, in
which the contexts are nodes and edges represent control ﬂow
transfers between these contexts. This means that the graph
might contain several distinct instances of a basic block γ
with a control transfer edge to basic block α, as long as the
call-sites of α and γ differ.
B. Control Dependency Graph
A control dependency graph represents, for each statement
X (generally, a binary instruction, but in our case, an IR
statement), which other statements Y determine whether X
is executed. Together with the CFG, the CDG can be used
to identify statements that may be executed before a given
statement is executed.
Again, we use a context sensitivity of 2 when generating
the CDG, which allows Firmalice to reason about not only
basic blocks that may be executed so that a given statement
is reached, but also the call context from which those basic
block would be executed. The CDG is generated via a
straightforward transformation of the CFG [5].
The CDG is not used directly, but is combined with the
data dependency graph to create the PDG.