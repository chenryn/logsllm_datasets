is known to be nonexistent (but whose URL does not leak
private information). When the page tries to load the image,
the load failure will invoke a custom onerror handler that
Veil has attached to the window object. That handler will
read the value of the alt attribute, which will contain the
dynamic value of controller.x. Veil will then issue a
blinded fetch for the associated image. In parallel, Veil also sets
an Angular $watch() statement to detect future changes in
{{controller.x}}; when a change occurs, Veil reads the
new value, and then blindly fetches and updates the image as
before. This basic approach is compatible with the template
semantics of other popular JavaScript frameworks [6], [55],
[67].
If dynamic Angular URLs can be drawn from an arbitrarily
large set, Veil uses the “forward” message type from Sec-
tion IV-I to bind the raw URL to a blinded one. If the URL is
drawn from a ﬁnite set, the compiler can upload the associated
objects to the blinding service, and then inject the page with
a blinding map that translates resolved Angular URLs to the
associated hash names. The blinding service mutates that table
in the same way that it mutates the hash names passed to
veilFetch().
VI.
IMPLEMENTATION
Our Veil prototype consists of a compiler, a blinding server,
a GUI proxy, a bootstrap page, and a client-side JavaScript
library that implements veilFetch() and other parts of the
Veil runtime.
We implemented the compiler and the blinding server in
Python. The compiler uses BeautifulSoup [57] to parse and
mutate HTML; the compiler also uses the Esprima/Escodegen
tool chain [25], [64] to transform JavaScript code into ASTs,
and to transform the mutated ASTs back into JavaScript. To
implement cryptography, we use the PyCrypto library [33]
in the blinding server, and the native Chrome WebCrypto
API [70] in the Veil JavaScript library. We use OpenCV [48]
to perform image mutation on the blinding server.
To implement DOM hiding, we used Chrome running in
headless mode as the browser used by the content provider’s
GUI proxy. The GUI proxy was written in Python, and used
Selenium [61] to take screenshots and generate synthetic GUI
events within the headless browser.
VII. EVALUATION
In this section, we evaluate Veil’s raw performance, and
its ability to safeguard user privacy. Using forensic tools
and manual analysis, we ﬁnd that blinded references and
encrypted objects are sufﬁcient to prevent information leakage
through the browser cache and name-based interfaces like the
DNS cache. We show that Veil’s heap walking techniques are
effective at preventing secrets from paging out unless system-
wide memory pressure is very high. We also demonstrate that
the performance of our Veil’s prototype is acceptable, with
page load slowdowns of 1.2x–3.25x.
Operation
Generate an AES key and encrypt it with RSA public key (2048 bit)
Encrypt 64 character hash (blinded reference)
Throughput for decryption using AES-CTR
Throughput for verifying SHA256 hash of ﬁle
Speed
0.75 ms
0.16 ms
520 MB/s
220 MB/s
Fig. 5. Overhead for client-side JavaScript cryptography using the WebCrypto API [70].
Speed
Operation
3.1 ms
Decrypt AES key (2048 bit RSA)
Decrypt 64 char hash (blinded reference)
0.04 ms
Throughput for encryption using AES-CTR 62 MB/s
Fig. 6. Overhead for server-side operations using PyCrypto [33].
All performance tests ran on a machine with a 2 GHz
Intel Core i7 CPU with 8GB of RAM. Unless otherwise
speciﬁed, those tests ran in the Chrome browser, and we ran
each experiment 100 times and measured the average. We
conﬁgured Veil to use 2048-bit RSA and 128-bit AES in CTR
mode. The phrase “standard Veil mode” corresponds to non-
DOM hiding mode.
A. Performance Microbenchmarks
Veil uses cryptography to implement blind references and
protect the data that it places in client-side storage. Figure 5
depicts the costs for those operations. Before a user can load a
Veil page, she must generate an AES key and encrypt it with
the blinding service’s RSA key. This one time cost is 0.75 ms.
The remaining three rows in Figure 5 depict cryptographic
overheads that Veil incurs during a page load.
• For veilFetch() to generate a blinded reference, it
must encrypt a hash value with the user’s AES key. This
operation took 0.16 ms.
• When veilFetch() receives a response, it must de-
crypt that response with the AES key. That operation
proceeds at 520 MB/s. For example, decrypting a 300
KB image would require 0.6 ms.
• veilFetch() also validates the hash of the down-
loaded object. This proceeds at 220 MB/s, requiring 1.3
ms for a 300 KB image.
Figure 6 depicts the cryptography overheads on the server-side
of the protocol. End-to-end, fetching a 300 KB object incurs
roughly 10 ms of cryptographic overhead.
B. Performance Macrobenchmarks: Standard Veil Mode
To measure the increase in page load time that Veil im-
poses, we ported six sites to the Veil framework. Washington
Post is the biggest site that we ported, and contains large
amounts of text, images, and JavaScript ﬁles. Imgur is a
popular image-sharing site; compared to the other test sites,
it has many images but less text. Woot! is an e-commerce site
that has a large amount of text and images, but comparatively
few scripts. Piechopper is a highly dynamic site that uses
Angular (§V). Piechopper is script-and-text heavy, but has few
images. University represents a university’s website. This site
is the smallest one that we tested, although it uses CSS with
Page load times for each website: regular; with Veil (but no
Fig. 7.
cryptography); with Veil (and using cryptography).
raw URLs that Veil must blind (§V). Google represents the
results page for the search term “javascript.” Most of that
page’s JavaScript and CSS objects are inlined into the HTML,
meaning that they do not require network fetches.
To port a preexisting site to Veil, we had the compiler
download the top-level HTML ﬁle and extract
the URLs
which referenced external objects like images. The compiler
downloaded those objects from the relevant servers. After
calculating hashes for those objects (and converting raw URLs
into blinded ones), the compiler uploaded the objects to the
blinding server. Since preexisting sites were not designed with
Veil in mind, they occasionally fetched content dynamically,
e.g., via unblinded  tags generated by JavaScript at
runtime. For sites like this, we observed which objects were
dynamically fetched, and then manually handed them to the
compiler for processing; we also manually rewrote the object
fetch code to refer to the compiler-generated object names.
Native Veil pages would invoke the Veil runtime library to
dynamically fetch such content, avoiding the need for manual
rewriting.
Page load time: Figure 7 depicts the load times for three
versions of each site: the regular version of the site, a Veil
port
that does not perform cryptography, and a Veil port
with cryptography enabled. The regular versions of a page
were loaded from a localhost webserver, whereas the Veil
pages were loaded from a localhost blinding server. This setup
isolated the overhead of cryptography and content mutation.
As shown in Figure 7, page loads using Veil with no
cryptography were 1.25x–2x slower. This is mostly due to
extra computational overhead on the client. For example,
10
ImgurWootWaPoUniversityPiechopperGoogle0.00.51.01.52.02.53.03.54.04.55.0Page Load Time (s)RegularVeil-nocryptoVeil-cryptoFig. 8. Size increases for Veil’s mutated objects.
parsing overheads increased because, as we quantify below,
mutated objects were larger than the baseline objects; for
images, the browser also had to Base64-decode the bitmaps
before displaying them. Veil with cryptography added another
slowdown factor of 1.1x–1.63x, with higher penalties for pages
with many objects (regardless of their type). The end-to-end
slowdown for the full Veil system was 1.25x–3.25x. Note
that these slowdowns were for browsers with cold caches;
Veil’s overhead would decrease with caching, since server-side
cryptography could be avoided. Also note that the University
site was a challenging case for Veil, because the site was
small in absolute size, but has many small images. Thus, Veil’s
per-blinded-reference cryptographic overheads (see Figures 5
and 6) were paid more frequently. A Veil-optimized version
of the site would use image spriting [21] to combine multiple
small images into a single, larger one.
Object growth: Figure 8 shows how object sizes grew after
post-processing by Veil. Images experienced two sources of
size expansion: mutation and Base64 encoding. Base64 en-
coding resulted in a 1.33x size increase. Our Veil prototype
implements mutation via the addition of Gaussian noise, with
the resulting size increases dependent on the image format.
PNG is lossless, so the addition of noise generated a 10x size
increase. In contrast, JPG is a lossy format, so noise injection
resulted in less than a 2x size increase. The Piechopper and
Google pages contained many PNGs, and thus suffered from
worse image expansion than the other test pages.
As shown in Figure 8, mutated JavaScript ﬁles typically re-
mained the same size, or became somewhat smaller—mutation
adds source code, but Veil passes the mutated code through a
miniﬁer which removes extraneous whitespace and rewrites
variable names to be shorter. HTML suffered from larger size
increases, because mutation tricks like random HTML entity
encoding strictly increase the number of characters in the
HTML.
Server-side scalability: Figure 9 shows the HTTP-level re-
quest throughput of a Veil blinding server, compared to the
baseline performance of a blinding server that performed none
of Veil’s added functionality (and thus acted as a normal web
server). HTTP requests were generated using ab, the Apache
benchmarking tool [5].
11
Fig. 9. Scalability comparison between a blinding server and a regular web
server.
As shown in Figure 9, Veil reduces web server throughput
by roughly 70% due to the additional cryptographic operations
that Veil must perform. Remember that when Veil operates in
regular (i.e., non-DOM hiding mode), Veil blinding servers
mutate content in the background, out of the critical path for
an HTTP response; thus, the slowdowns in Figure 9 are solely
caused by synchronous cryptographic operations.
C. Preventing Information Leakage
Name-based Interfaces: To determine how well Veil protects
user privacy, we created a baseline VM image which ran
Lubuntu 13.10 and had two different browsers (Firefox and
Chrome). In the baseline image, the browsers were installed,
but they had not been used to visit any web pages. We then
ran a series of experiments in which we loaded the baseline
image, opened a browser, and then visited a single site. We
took a snapshot of the browser’s memory image using gcore,
and we also examined disk state such as the browser cache and
the log entries for DNS resolution requests. We did this for
the regular and Veil-enabled versions of each page described
in Section VII-B.
In all tests, the Veil pages were conﬁgured to store data in
the browser cache, and in all tests, the cache only contained
encrypted data at the end of the private session. Greps through
the memory snapshots and DNS records did not reveal cleartext
URLs or hostnames. Unsurprisingly, the regular versions of
the web pages left unencrypted data in the browser cache,
and various cleartext URLs in name-based data stores. To
cross-validate these results, we repeated these experiments on
Windows, and used the Mandiant Redline forensics tool [36] to
search for post-session artifacts in persistent storage. Redline
conﬁrmed that the only cleartext URL in the browser history
was the URL for the Veil bootstrap page, and that all other
URLs were blinded.
Protecting RAM Artifacts: To determine whether heap walk-
ing can prevent secrets from paging out, we wrote a C program
which gradually increases its memory pressure. The program
allocates memory without deallocating any, and periodically,
it reads the ﬁrst byte in every allocated page to ensure that the
OS considers the page to be hot. We ran the program inside of
a QEMU VM with 1 GB of swap space and 1 GB of RAM.
We also ran a browser inside of the VM. The browser had
20 open tabs. Each tab had a Uint8Array representing a tab-
speciﬁc AES key, and a tab-speciﬁc set of strings in its HTML.
ImgurWootWaPoUniversityPiechopperGoogle012345678910Ratio of Veil object size to original object sizeImagesIndex fileJavascript0163248648096112128Concurrent requests050100150200250300Requests per secondRegular web serverVeil blinding serverFig. 10. The effectiveness of heap walking to prevent secrets from paging
out.
The control experiments did not do heap walking. The test
experiments used Veil’s heap walking code to touch the AES
key and the renderer state.
The VM used the pwritev system call to write memory
pages to the swap ﬁle. To determine whether secrets paged
out as memory pressure increased, we used strace to log the
pwritev calls. Since each tab contained a set of unique
byte patterns, we could grep through our pwritev logs to
determine whether secret RAM artifacts hit the swap ﬁle. We
ran experiments for increasing levels of memory pressure until
the VM became unresponsive, at roughly 75% in-use swap
space.
Figure 10 shows the results. The x-axis varies the memory
pressure, and the y-axis depicts the number of tabs which
suffered data leakage, as determined by greps through the
pwritev log. Heap walking successfully kept all of the secret
keys from paging out, up to the maximum 75% of in-use swap
space. Without heap walking, keys begin to page out at 35%
swap utilization; by 50%, all keys had swapped out. Note that
the data points do not perfectly align on the x-axis due to
nondeterminism in when the VM decides to swap data out.
Heap walking was less effective for renderer memory
pages. Those pages swapped out earlier and immediately in
the control case, around 35% swap utilization. With Veil,
renderer state also began to leak at 35% utilization, but Veil
still managed to safeguard 12 out of 20 tabs up to 63% swap
utilization.
D. DOM Hiding
When Veil runs in DOM hiding mode,
the client-side
page contains no site-speciﬁc, greppable content. Thus, Veil
does not need to perform heap walking (although Veil does
use blinding servers to eliminate information leakage through
name-based system interfaces). We loaded our test pages
in DOM hiding mode, and conﬁrmed the absence of site-
speciﬁc content by grepping through VM images as we did
in Section VII-C.
Figure 11 evaluates the impact of DOM hiding on a page’s
initial load. The client, the blinding server, and the content
Fig. 11. DOM hiding’s impact on page load times.
Fig. 12.
click event.
The time that a DOM-hiding page needs to respond to a mouse
server ran on the same machine, to focus on computational
overheads. Figure 11 demonstrates that DOM hiding imposed
moderate overheads, with page load times increasing by 1.2x–
2.1x. When Veil runs in DOM hiding mode, image mutation
has to be performed synchronously, for each screenshot that
is returned to a client; screenshotting requires 150ms–180ms,
whereas image mutation requires 170ms–200ms.
Figure 12 shows the time that a DOM-hiding page needed
to respond to a mouse click. Responding to such a GUI
event required the browser to forward the event to the content
provider, and then receive and display the new screenshot.
Once again, the bulk of the end-to-end time was consumed by
the screenshot capture and the image mutation at the content
provider.
Privacy-sensitive users and web sites are often willing
to trade some performance for better security. For example,
fetching an HTTP object through Tor results in HTTP-level
RTTs of more than a second [68]. Thus, we believe that
the performance of Veil’s DOM hiding mode is adequate
for many sites. However, Veil’s performance may be too
12
01020304050607080Percentage of swap used02468101214161820Number of objects paged to diskRendered HTML w/o heap walkKeys w/o heap walkRendered HTML w/ heap walkKeys w/ heap walkImgurWootWapoUniversityPiechopperGoogle0.00.51.01.52.02.53.03.54.0Page Load Time (s)Regular page loadClient renderingHeadless ChromeBlinding serverImgurWootWapoUniversityPiechopperGoogle0.00.51.01.52.02.53.03.54.0Page Load Time (s)DOM hiding overheadClient renderingHeadless ChromeBlinding serverhttps://a.com, and CSS from https://b.com. A CSP
is expressed as a server-provided HTTP response header; the
CSP is enforced by the browser. CSPs are useful for preventing
cross-site scripting attacks, but require a page to be able to
explicitly shard content across domains. As discussed in the
last paragraph, Veil can enable sharding at the cost of reduced
security.
VIII. RELATED WORK
To minimize information leakage via RAM artifacts, appli-
cations can use best practices like pinning sensitive memory
pages, and avoiding excessive copying of secret data [23].
Operating systems and language runtimes can also scrub
deallocated memory as quickly as possible [11]. Web browsers
do not expose low-level OS interfaces to JavaScript code, so
privacy-preserving sites cannot directly access raw memory for
the purposes of secure deallocation or pinning. Determining
the best way to expose raw memory to JavaScript is an open
research problem, given the baroque nature of the same-origin
policy, and the fact that the browser itself may contend with
JavaScript code for exclusive access to a memory page (e.g.,
to implement garbage collection or tab discarding [50]).
An OS can protect RAM artifacts by encrypting the swap
space or the entire ﬁle system [8], [56], [76]. Veil’s content
mutation and DOM hiding allow Veil to protect RAM artifacts
even when a browser does not run atop an encrypted storage