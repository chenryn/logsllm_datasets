contained in some point set, and its free area in that point
set is f . We are interested in the conditional probability
P r(Ax ≤ s | F (x) = f ).
(2)
Since X and C follow the distribution of online parking,
we can treat R as the output of an online parking process.
Hence, if the arrival order of x is not more than s, then x is
a minutia. Although the attackers know the point set R, the
conditional probability (2) does not exploit full knowledge
of R. Instead, only the free area of x is used. Nevertheless,
such partial information is suﬃcient in distinguishing the
minutiae.

2.1 Summary of Notations
X, Y
: X is the set of the original minutiae. Y is
to the black box. The attacker stops when the black
box outputs YES.
s
C, R, m
n
PX
A(W )
(x),F(x)
FR
LookUp
Ax
a noisy version of X.
: Number of minutiae. s = |X|.
: C is the set of chaﬀ. R = X ∪ C and
m = |R|.
: Width of the domain. All points are in
[0, n] × [0, n].
: PX is the sketch generated from X.
: Available region of a point set W .
: Free area of x in the point set R.
: Look up table used by the attackers.
: The arrival order of x, given that x is
selected.
2.2 Differences from Clancy et al. method.
For clarity, we now describe two subtle diﬀerences of our
model from the model proposed by Clancy et al. [4]. Firstly,
we measure the eﬀectiveness of an attacker by the number
of calls to the black box.
In contrast, Clancy et al. con-
sidered the number of computational steps required by the
attacker, and the authentic user during decoding (with re-
spect to a speciﬁc decoding algorithm). The eﬀectiveness of
an attacker is the ratio of the steps taken by the attacker
over the authentic user. Secondly, Clancy et al. proposed to
generate a predetermined number of chaﬀ points so that the
authentic user can decode eﬃciently. We do not consider
the decoding complexity and hence generate as many chaﬀ
points as possible. Although there are diﬀerences in measur-
ing eﬀectiveness of attackers, our attacker can be adopted
and successful in the scenario studied by Clancy et al.
3. ATTACKER
Our main observation is that, for f0 > f1 and any s,
Pr( Ax ≤ s | F (x) = f0) > Pr( Ax ≤ s | F (x) = f1).
That is, for a R randomly generated by online parking, if a
point x ∈ R has larger free area compared to another point
y in R, then it is more likely that x arrived earlier than
y. Unfortunately, we are unable to analytically prove the
observation. Nevertheless, extensive simulations give strong
evidence to support the claim. Figure 4 shows an estima-
tion of the likelihood function. Note that each function is
increasing with respect to the free area.
(3)
3.1 Identifying one point, s = 1
To illustrate the attacker’s algorithm, we ﬁrst give an at-
tacker for s = 1, that is, when there is only one minutia in
X. In this scenario, the goal of the attacker is to identify
the very ﬁrst point that arrive in the online parking process.
If R has m points, then a brute force attacker, on average,
takes m/2 calls to the black box.
Given the white noise sketch, which is a description of R,
the consistent candidates are all the singleton subsets. Our
attacker carries out the following steps:
1. The attacker computes F (x) for all x ∈ R.
2. Next, it enumerates points in R in decreasing order
with respect to F(x). The enumerated points are sent
3.2 Likelihood of the ﬁrst s points
Online parking is not a memoryless process and thus there
is dependency between two points. Thus, Ax is dependent
on Ay. Nevertheless, if x and y are not close to each other,
the eﬀect of one point on the other should not be signiﬁcant.
Hence, we employ the following approximation:
Pr(Ax ≤ s, Ay ≤ s | F (x) = f1,F(y) = f2) ≈
Pr(Ax ≤ s | F (x) = f1) · Pr(Ay ≤ s | F (y) = f2). (4)
Using (4), we can obtain an approximation of the likelihood
for each candidate (which is a set of s points) consistent to
PX . This leads to the following attacker:
1. Computes the likelihood of each candidate consistent
to PX .
2. Enumerates the candidates in decreasing order with
respect to their likelihood. Next, send the enumerated
candidates to the blackbox until the blackbox outputs
YES.
Consider the situation where an attacker has sent a few can-
didates to the blackbox and they are all not the correct orig-
inal. Intuitively, the above attacker does not fully exploit
the fact that the previously sent candidates are not correct.
Hence, the attacker can be improved.
In our simulation,
we experiment with various ways to estimate the likelihood.
We replace step 1 above by the following.
1(a). For each candidate {x1, x2, . . . , xk}, assigns it the value
i=1 LookUp(F(xi)), where LookUp is a predetermined
lookup table.
s
In our experiments, it turns out that by using the identity
function as lookup, that is, LookUp(i) = i, we already can
achieve noticeable speedup over the brute-force attacker.
3.3 Min-entropy retained by publishing the
sketch
A way to analyze the security of a sketch is by investigating
the remaining entropy of the biometric data, given that the
sketch is made public. Dodis et al.
[5] proposed using the
average min-entropy of A given B, which is,
H∞(A|B) = − log(Eb←B[max
a
By treating X and PX as the random variables for the minu-
tiae and the sketch respectively, the min-entropy loss due to
the sketch is deﬁned as,
Pr(A = a|B = b)]).
(5)
H∞(X) − H∞(X|PX ),
where the min-entropy H∞(X) = − log (maxa Pr(X = a)).
As mentioned in the introduction, online parking is not easy
to analyze, and hence bound on the entropy loss may be

diﬃcult to obtain. However, from simulation and the ap-
proximation (4), we can obtain an estimation of
max
(6)
Pr(X = {x1, . . . , xs}|FR(x1), . . . , FR(xs)).
{x1,x2,...,xs}
Note that for random variables A and B, and a deterministic
function f ,
max
a
Pr(A = a|B = b) ≥ max
a
Pr(A = a|f (B) = f (b)).
Therefore, maxa Pr(X = a|PX = R) is greater or equal to
(6). This suggests an empirical method to estimate an upper
bound on the min-entropy, which in turn gives us an lower
bound on entropy loss. In the next section, we give more
details on the simulation results.
4. SIMULATION AND COMPARISON
4.1 Experiment Settings.
For convenience, to simulate the online parking process, we
discretized the domain [0, n] × [0, n]. Therefore, minutiae
and chaﬀ points are selected from a set of discrete points.
Each unit interval is discretized into 100 points. Hence,
there are 1002 points in [0, 1) × [0, 1). For each experiment,
we collected 10000 samples. Each sample is a point set R
obtained through online parking. For each point in R, its
arrival order is recorded and its free area is approximated
by counting the discrete points in the region.
The experiments are conducted in [0, n] × [0, n] for n = 50
and n = 22. The average |R| is 1668.4 and 312.6 for n =
50 and n = 22 respectively. By treating each point as a
disk of diameter 1, the average packing density (for both
n = 50 and n = 22) is about 0.525. This is slightly less
than the Palasti’s conjecture[11] of 0.559, probably due to
the diﬀerent treatment of the domain boundary.
We also conducted experiments in 1D. That is, the domain
is the interval [0, n], and for any two selected points x and
y, |x − y| ≥ 1. The free area of a 1D point x can be deﬁned
similarly as in (1). In 1D, the free area of x is simply (xr −
xl − 2) where xr and xl is the right and left neighbors of x
respectively. For n = 1340, the average |R| is 994.8, which
gives packing density of 0.743.
4.2 Likelihood
From the 10000 samples, we can estimate the conditional
probability Pr(Ax ≤ s | F (x) = f ) by ﬁrst estimating
Pr((Ax ≤ s) ∩ (F(x) = f )) and Pr(F (x) = f ). Figure 3
plots Pr((As ≤ s) ∩ (F (x) = f )) against the free area f for
diﬀerent s. A function in Figure 4 shows Pr(F (x) = f ) with
respect to f . Observe in Figure 4 that a large proportion of
points have small free space. In contrast, as illustrated in
Figure 3, for points that arrive early, relatively small pro-
portion of them have small free space. This implies that,
given that a point has large free area, it is more likely to
have arrived early, and hence more likely to be a minutia.
Figure 4 show the likelihood function for diﬀerent s. Note
that Pr(Ax ≤ s | F (x) = f ) is increasing as a function
of f . Since the average |R| is 1668.4, the probability that
a randomly chosen point from R to arrive not later than
165 is about 0.1. From the graph, the likelihood Pr(Ax ≤
165 | F (x) = 50) is more than 0.15. Hence a point with free
y
t
i
l
i
b
a
b
o
r
P
 0.016
 0.014
 0.012
 0.01
 0.008
 0.006
 0.004
 0.002
 0
 0
s = 165
s = 330
s = 495
 10
 20
 30
 40
 50
Free Area: f
Figure 3: Probability density function, P r(Ax ≤ s ∩
F (x) = f ), for s = 165, 300 and 495. The domain is
[0, n] × [0, n] where n = 50.
area more than 50 is 1.5 times as likely to arrive not later
than 165, compared to a randomly chosen point.
 0.4
 0.35
 0.3
 0.25
 0.2
 0.15
 0.1
 0.05
y
t
i
l
i
b
a
b
o
r
P
 0
 0
 10
Prob(F(x) = f)
s = 165
s = 330
s = 495
 20
 30
Free Area: f
 40
 50
Figure 4: Distribution of free area, Pr(F (x) = f ),
and conditional probability of arrival order given
free area, Pr(Ax < s|F (x) = f ), for diﬀerent s =
165, 330, 495. The domain is [0, n]× [0, n] where n = 50.
The average |R| = 1668.4.
Similar observations can be made for experiments in the 1D
domain, illustrated in Figure 5.
For diﬀerent n and s, it seems that the conditional proba-
bilities are almost the same as long as the ratio (s/nd) is
the same, where d is the dimension of the domain. This is
illustrated in Figure 6 where d = 2.
4.3 Brute-force attacker for s = 1
When |X| = 1, our attacker simply computes LookUp(x) for
all x ∈ R, and sends them to the blackbox according to the
looked-up values in descending order. For each sample R,
the number of blackbox calls required is the number of points

y
t
i
l
i
b
a
b
o
r
P
 0.4
 0.35
 0.3
 0.25
 0.2
 0.15
 0.1