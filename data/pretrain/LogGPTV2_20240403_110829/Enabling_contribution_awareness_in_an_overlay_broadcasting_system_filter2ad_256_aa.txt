title:Enabling contribution awareness in an overlay broadcasting system
author:Yu-Wei Eric Sung and
Michael A. Bishop and
Sanjay G. Rao
Enabling Contribution Awareness in an Overlay
Broadcasting System
Yu-Wei Sung, Michael Bishop, and Sanjay Rao
Department of Electrical and Computer Engineering
Purdue University
{sungy,bishopma,sanjay}@purdue.edu
ABSTRACT
We consider the design of bandwidth-demanding broadcast-
ing applications using overlays in environments character-
ized by hosts with limited and asymmetric bandwidth, and
signiﬁcant heterogeneity in outgoing bandwidth. Such envi-
ronments are critical to consider to extend the applicability
of overlay multicast to mainstream Internet environments
where insuﬃcient bandwidth exists to support all hosts, but
have not received adequate attention from the research com-
munity. We leverage the multi-tree framework and design
heuristics to enable it to consider host contribution and op-
erate in bandwidth-scarce environments. Our extensions
seek to simultaneously achieve good utilization of system re-
sources, performance to hosts commensurate to their contri-
butions, and consistent performance. We have implemented
the system and conducted an Internet evaluation on Planet-
Lab using real traces from previous operational deployments
of an overlay broadcasting system. Our results indicate for
these traces, our heuristics can improve the performance of
high contributors by 10-240% and facilitate equitable band-
width distribution among hosts with similar contributions.
Categories and Subject Descriptors: C.2.4 [Computer-
Communication Networks]: Distributed Systems
General Terms: Algorithms, Design, Experimentation
Keywords: Overlay multicast, Multi-tree, Incentive
1.
INTRODUCTION
In the last few years, application-level overlay multicast
has emerged as a key alternative to enable broadcasting ap-
plications on the Internet. In this scheme, participants in
the broadcast self-organize into eﬃcient overlays where video
content is disseminated by the broadcast source without sup-
port from the network. There has been signiﬁcant eﬀort in
recent years devoted to validating the architecture [7, 10,
13, 18, 21], designing protocols [1, 3, 4, 7, 10, 13, 14, 16, 17,
19, 24, 27], and deploying real systems [6, 23, 25].
Much success with overlay broadcast deployments has been
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’06, September 11–15, 2006, Pisa, Italy.
Copyright 2006 ACM 1-59593-308-5/06/0009 ...$5.00.
restricted to homogeneous university environments, and broad-
casts involving scientiﬁc conferences and lectures. For ex-
ample, a recent work on experience with an overlay broad-
casting system [6] indicates substantial success in achiev-
ing good performance in university-based environments, but
highlights several performance issues when mainstream en-
vironments are considered. In this paper, we seek to enable
overlay broadcast in environments characterized by two key
properties. First, we consider highly heterogeneous envi-
ronments where hosts make unequal contributions to the
overlay. Such heterogeneity may arise due to diﬀerent node
outgoing capabilities (Ethernet vs. DSL) or diﬀerent will-
ingness to contribute bandwidth resources. For example, [6]
reports the fraction of resource-poor hosts (i.e. with low
outgoing bandwidth) in several real broadcast deployments
range from 43% to 81%. Second, the bandwidth resources
contributed by all hosts may be insuﬃcient for everyone to
receive the full source rate.
We present the design of an overlay broadcast system tar-
geted at these environments. Our primary goal is to en-
able hosts to receive diﬀerent levels of performance based
on their contributions while eﬀectively utilizing the band-
width resources available in the system. To achieve this,
our system leverages the multi-tree framework [3] to enable
application-level adaptation. In our system, the source de-
livers data along multiple overlay trees. Each node sub-
scribes to all trees but is only entitled to a subset of them.
The number of trees a node is entitled to depends on the
amount of bandwidth it contributes. This in turn deter-
mines the bandwidth, and consequently quality, it receives.
While the multi-tree framework was originally proposed to
improve resiliency, our focus is on using multiple trees to en-
able application-level adaptation and diﬀerential treatment.
We enforce bandwidth distribution policies where a node
must contribute more than it is entitled to receive. Such
policies are shown to better utilize bandwidth of resource-
rich hosts and oﬀer better performance to resource-poor
hosts than naive bit-for-bit policies [12]. They facilitate the
”contribution-aware” policy: the more a node contributes,
the more it is entitled to receive. To support this policy
in a distributed manner, we design distributed heuristics for
monitoring of overall system resources, diﬀerential and equi-
table distribution of bandwidth resources, and application-
level adaptation to changes in host contribution. While our
system framework is motivated by [3, 12], we go substan-
tially beyond these works by presenting a comprehensive
contribution-aware design and implementation experience
on an operational overlay broadcasting system [6].
We have conducted an evaluation of our contribution-
aware broadcasting system on PlanetLab using traces from
real overlay broadcast deployments. Our results show that
our heuristics oﬀer diﬀerential and equitable resource distri-
bution when compared to a contribution-agnostic system. In
particular, the 10th-percentile performance of high contribu-
tors (nodes contributing more than 175% of the source rate)
is increased by 10-240% and variation of bandwidth received
among nodes with similar contributions is reduced across
our set of traces. Achieving these improvements does incur
a 20 − 38% decrease in the time between quality changes
seen by a host, but achieves a 10-fold reduction in average
time to recover from these changes for high contributors.
Section 2 discusses our assumptions and motivations in
detail. Section 3 presents the design of contribution-aware
heuristics. Section 4 describes the broadcasting system our
implementation is based on and the process of integrating
the multi-tree framework into this system. Section 5 dis-
cusses our evaluation methods and metrics. Evaluation re-
sults are presented in Section 6. Based on these results,
we draw conclusions on our contribution-aware heuristics in
heterogeneous, resource-scarce environments in Section 7.
2. ASSUMPTIONS AND MOTIVATIONS
In this section, we describe the assumptions made on user
behavior in Section 2.1. Section 2.2 introduces the multi-
tree overlay we leverage to achieve diﬀerential resource dis-
tribution to nodes of diverse contribution levels. Section 2.3
presents a bandwidth distribution policy which we leverage
to distribute bandwidth among peers. We discuss the goals
of our contribution-aware system design in Section 2.4.
2.1 Broadcast User Model
To simplify our design, we make certain assumptions about
the behavior of broadcast participants. Although we believe
our conclusions may be generalized past some of these as-
sumptions, we limit our discussion to this user model.
A peer i in the broadcast is capable of both receiving and
forwarding data. Without loss of generality, we assume that
every peer is capable of receiving the full source rate S in the
event the system is capable of providing it to them. This
is reasonable, given many ”broadband” users today have
asymmetric connections with a reasonably large download-
ing capacity. Most DSL hosts would easily be able to receive
S but not forward one full-rate video stream. In academic
or business environments, symmetric connections (eg: Eth-
ernet) are more common. Such hosts frequently would be
able to receive and forward several times more than S.
We do not assume a homogeneous forwarding bound, but
consider diﬀerent levels of actual contribution. A peer i’s
actual contribution fi is bounded by either ability or will-
ingness. We assume that this forwarding bound Fi is deter-
mined by user willingness and is never over-estimated by the
user (i.e. willingness ≤ ability). We assume that Fi is known
only to the user and is non-zero – every peer will contribute
some bandwidth upon request. We believe this is realistic
since all Internet hosts have some upstream bandwidth. fi
may vary over the course of i’s stay in the system due to
changes in the number of children i supports. Therefore, we
target our design to react to users’ actual contribution.
An important assumption is users are not strategic. While
we oﬀer incentives to encourage users to increase willingness
to contribute, we do not model users who attempt to con-
Figure 1: A multi-tree broadcast with two trees.
tribute minimum possible in order to achieve their desired
performance. Instead, a peer i only ensures fi does not ex-
ceed Fi when adopting a new child. Therefore, we assume
heterogeneity in Fi will be reﬂected by heterogeneity in fi.
Lastly, we assume hosts honestly report their fi, inferred
by the number of children they currently support, and the
bandwidth received from parents. However, we believe our
heuristics can be easily integrated with recent research in
distributed auditing and rating of nodes [8, 2, 15] to verify
the claimed contribution of nodes. With these assumptions
in mind, our goal is to encourage a host i to relax its Fi,
particularly under resource-scarce operating environments.
2.2 Multi-tree-based Data Dissemination
Our system is targeted at regimes where insuﬃcient re-
sources are present in the system for all hosts to receive
the full source rate. While we have assumed that all hosts
contribute some outgoing bandwidth, we do not assume that
everyone can forward the full source rate. In resource-scarce
environments, we must also utilize any outgoing bandwidth
which is less than the source rate. Therefore, we require
a means by which hosts may receive and contribute gradu-
ated levels of bandwidth and transition smoothly as avail-
able resources change. To realize these goals, we leverage
the multi-tree data delivery framework [3, 17]. Although
it was ﬁrst introduced in the context of protocols based on
Distributed Hash Table (DHT) [20, 4, 26, 22], the multi-tree
framework is not dependent on the use of DHT overlays.
In this framework, participants self-organize into a for-
est of T trees rooted at a source. The source encodes video
with source rate S evenly into T stripes of size S/T , each dis-
tributed along one tree. The quality that a host gets depends
on the number of stripes that it receives. Typically, a layered
codec based on Multiple Description Coding (MDC) [11, 5]
is used to realize this goal. The trees are interior-disjoint;
that is, a host i allocates Fi to only one tree but attempts to
connect to all of the T trees. When Fi is normalized by S, we
call the resulting value the degree of host i. For example, if
Fi = 300kbps and S = 400kbps, i’s degree is 300/400 = 0.75.
We also deﬁne the tree-degree to be degree∗ T , which is the
maximum number of children a host can support in the tree
it contributes. Figure 1 illustrates how broadcast content is
delivered with T = 2. Host A and B both have a degree of
1 and allocate their bandwidth in Tree2 and Tree1, respec-
tively, where each can support two children (i.e. tree-degree
of 2). C receives S/2 each from A and B to reconstruct
the original content. While this multi-tree framework was
originally proposed to improve resiliency [3, 17], we use it
as a convenient building block and focus on issues regarding
heterogeneity and resource allocation mechanisms.
This framework meets our needs, because it allows nodes
to connect to a subset of trees and contribute in smaller
bandwidth increments (i.e.
stripes). Any node having a
degree greater or equal to 1/T (i.e. tree-degree ≥ 1) is able
to contribute. By setting T properly, we allow resource-
poor nodes with limited outgoing bandwidth to contribute,
thereby spreading the forwarding load across all peers.
2.3 Bandwidth Distribution Policies
A key design consideration is the selection of policies for
distributing bandwidth in the broadcast among participat-
ing hosts based on their contributions. Assuming there are
N hosts, and host i forwards bandwidth fi, our heuristics
determine the bandwidth ri each host is entitled to receive.
The multi-tree framework enables us to consider settings
where hosts can obtain diﬀerent video qualities based on the
bandwidth they are entitled to, by connecting to a subset of
trees at a high priority. Note that the granularity is limited
by the number of trees, T , in the forest. Having a larger T
enables greater granularity, however one potential cost is an
increased overhead due to the MDC coding.
Our heuristics do not prescribe any particular bandwidth
distribution policy; however, it is designed with the goal of
providing a framework that can enable the implementation
of a range of policies. One simple bit-for-bit policy is to
require each node to forward as much as it receives, that
is, ri = fi. Under this policy, it is straightforward for each
node to determine the bandwidth it should receive, as the
decision is easy to compute locally. However, this policy is
restrictive in two ways. First, it does not account for the fact
that nodes may contribute less bandwidth than the source
rate. Further, it does not provide any incentive to a node
to donate more than the source rate even if it is capable of
doing so. This is an issue in Internet environments today.
Consider the fact that Internet broadcasts typically involve a
source rate of 300-400 kbps, with a majority of hosts behind
DSL and Ethernet. Hosts behind DSL can receive the source
rate, but are not capable of forwarding it. Hosts behind
Ethernet are capable of contributing much more than the
source rate, and a policy such as ri = fi neither utilizes
the bandwidth, nor incentivizes them to contribute more.
On the other hand, arbitrarily sophisticated policies may be
extremely diﬃcult to implement in a distributed fashion.
Instead, we will consider a generic cost function of the
form proposed in [12] to provide diﬀerential distribution:
ri =
∗ fi +
1
t
t − 1
t
∗ (cid:0)
i
fi
N
(1)
ri is the bandwidth peer i is entitled to receive, fi is the
bandwidth i contributes to the system. N is the number
of participating peers. t is the ”tax rate”, which speciﬁes
a peer must contribute t ∗ ri units of bandwidth to receive
t must be greater than 1.
ri unit of entitled bandwidth.
If t = 1, we have a simple bit-for-bit policy. If t ≤ 1, no
surplus exists and some peers will not receive their entitled
bandwidth. ri is the sum of two terms. The ﬁrst term rep-
resents the minimum bandwidth a peer is entitled to receive
by contributing fi, and the second term is the average left-
over bandwidth per node. By using a tax rate greater than
1, we are assured extra bandwidth in the system. For exam-
ple, if t is 2, a peer i which contributes 2S will consume S
from the system. The leftover resource S contributed by i is
excessive. We aim to distribute all such excessive resources
evenly among all peers, and this is represented by the sec-
ond term. Since every byte of bandwidth received by a peer
must be contributed by another peer(s). We can easily con-
ﬁrm that bandwidth is conserved by summing up both side
of Equation (1) over all nodes, leading to i ri = i fi.
For our later evaluation, we pick a tax rate of 2.
We will focus on (1), as it lends itself to implementation in
a distributed fashion. Section 3.1.1 describes a distributed
way to obtain system-wide estimates such as i fi and N .
2.4 Design Criteria
There are some criteria we wish to address in the design
of our system. These criteria are targeted to oﬀer good ap-
plication performance, but also to improve user experiences
while preferentially treating high-contributing nodes.
Good Utilization: Given suﬃcient resource, users should
receive bandwidth close to the source rate. While it is not
possible for all users to receive the full rate in resource-scarce
environments, the bandwidth provided to them should be
optimized by making good use of available resources, and
there should ideally be no untapped bandwidth. Each node
should contribute to the extent of its ability and willingness.
Equitable Distribution: When allocating bandwidth re-
sources among hosts with similar contribution levels, they
should receive similar performance.
Diﬀerential Distribution: The allocation of bandwidth
should favor those which make greater contributions. We
also wish to oﬀer some minimum performance to low con-
tributors and give them improved performance if possible.
Stability: Performance should be consistent over time. We
expect that a node which sees performance improvements
retains them and a node which sees a performance dip re-
covers quickly.
3. SYSTEM DESIGN
To diﬀerentially treat a node based on its contribution in
the multi-tree framework, we consider the following prob-
lem: given a peer i, we wish to obtain a direct mapping
between the actual amount of bandwidth, fi, i contributes
and the amount of bandwidth, ri, the system should oﬀer
in return. Recall that i allocates its entire bandwidth Fi to
only one tree, called i’s Contributor Tree, but attempts to
receive from all of the T trees. Extra bandwidth, if any,
should be distributed evenly among participants once all of
them get their deserved bandwidth. Equation (1) helps us
obtain such mapping in a distributed fashion. We refer to
ri as the Entitled Bandwidth of i. The natural solution is
to have i simply receive ri by subscribing to (cid:5) ri
(cid:6) trees as
an Entitled Node. These trees are the Entitled Trees of i.
However, there are two reasons why this may not suﬃce.
First, each node can only be entitled to an integral number
of trees. If ri is not an integral multiple of the stripe rate,
S/T , the fractional portion of the ri becomes superﬂuous.
Second, there may be nodes whose Entitled bandwidth ri is
larger than S, and they will not consume all of ri entitled
to them. Consequently, not all bandwidth is used by nodes
entitled to it, and there exists some additional bandwidth in
the system remained to be utilized. When a node’s Entitled
bandwidth is lower than the source rate S, it may utilize
some of these additional bandwidth available in trees they
are not entitled to. We refer to the additional bandwidth
S/T
that nodes are not entitled to but utilize to reach the source
rate as Excess Bandwidth, and nodes looking for or utilizing
this bandwidth as Excess Nodes.
In summary, a broadcast participant may assume two
”main” classes in the forest, that is, it may be an Entitled
node in some trees and an Excess node in some other trees.
To treat diﬀerent types of nodes with a better granularity,
our system further classiﬁes them and assigns them diﬀerent
priorities. When distributing system resources, our goal is
to favor Entitled nodes over Excess nodes and evenly dis-
tributes the Excess bandwidth among all participants until
they receive the source rate or no more resources remain.
Before presenting our design details, we want to make
an important distinction between two concepts used in our
join/subscribe and receive/connect. A
multi-tree design:
node joins/subscribes to a tree if it is aware of its partic-
ipation within the tree, whether connected or disconnected,
and a node connects to/receives in a tree if it has attached
to a parent in that tree and is receiving the data forwarded
by the tree. We also deﬁne a slot as an allocated bandwidth
of size S/T by a parent. A slot can be in one of three states:
(i) occupied by an Entitled node, (ii) occupied by an Excess