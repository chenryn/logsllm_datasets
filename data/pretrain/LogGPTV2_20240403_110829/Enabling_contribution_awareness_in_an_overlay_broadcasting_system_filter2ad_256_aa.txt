# Enabling Contribution Awareness in an Overlay Broadcasting System

**Authors:**
- Yu-Wei Eric Sung
- Michael A. Bishop
- Sanjay G. Rao

**Affiliation:**
Department of Electrical and Computer Engineering, Purdue University

**Contact:**
- {sungy, bishopma, sanjay}@purdue.edu

## Abstract

This paper addresses the design of bandwidth-demanding broadcasting applications using overlays in environments characterized by hosts with limited and asymmetric bandwidth, and significant heterogeneity in outgoing bandwidth. Such environments are critical for extending the applicability of overlay multicast to mainstream Internet settings where insufficient bandwidth exists to support all hosts. We leverage a multi-tree framework and design heuristics to enable host contribution awareness and operation in bandwidth-scarce environments. Our extensions aim to achieve efficient resource utilization, performance commensurate with host contributions, and consistent performance. We have implemented the system and conducted an Internet evaluation on PlanetLab using real traces from previous operational deployments of an overlay broadcasting system. Our results show that our heuristics can improve the performance of high contributors by 10-240% and facilitate equitable bandwidth distribution among hosts with similar contributions.

**Categories and Subject Descriptors:**
- C.2.4 [Computer-Communication Networks]: Distributed Systems

**General Terms:**
- Algorithms, Design, Experimentation

**Keywords:**
- Overlay multicast, Multi-tree, Incentive

## 1. Introduction

In recent years, application-level overlay multicast has emerged as a key alternative for enabling broadcasting applications on the Internet. In this scheme, participants self-organize into efficient overlays where video content is disseminated without network support. Significant effort has been devoted to validating the architecture, designing protocols, and deploying real systems. However, much success has been restricted to homogeneous university environments and broadcasts involving scientific conferences and lectures. For example, a recent study on an overlay broadcasting system [6] indicates substantial success in achieving good performance in university-based environments but highlights several performance issues in mainstream environments.

In this paper, we aim to enable overlay broadcast in environments characterized by two key properties:
1. Highly heterogeneous environments where hosts make unequal contributions to the overlay.
2. Bandwidth resources contributed by all hosts may be insufficient for everyone to receive the full source rate.

We present the design of an overlay broadcast system targeted at these environments. Our primary goal is to enable hosts to receive different levels of performance based on their contributions while effectively utilizing the available bandwidth resources. To achieve this, our system leverages the multi-tree framework [3] to enable application-level adaptation. The source delivers data along multiple overlay trees, and each node subscribes to all trees but is entitled to a subset of them based on its contribution. This determines the bandwidth and quality it receives.

While the multi-tree framework was originally proposed to improve resiliency, our focus is on using multiple trees to enable application-level adaptation and differential treatment. We enforce bandwidth distribution policies where a node must contribute more than it is entitled to receive. Such policies better utilize the bandwidth of resource-rich hosts and offer better performance to resource-poor hosts than naive bit-for-bit policies [12]. They facilitate a "contribution-aware" policy: the more a node contributes, the more it is entitled to receive. To support this policy in a distributed manner, we design heuristics for monitoring overall system resources, differential and equitable distribution of bandwidth resources, and application-level adaptation to changes in host contribution.

We have conducted an evaluation of our contribution-aware broadcasting system on PlanetLab using traces from real overlay broadcast deployments. Our results show that our heuristics offer differential and equitable resource distribution compared to a contribution-agnostic system. Specifically, the 10th-percentile performance of high contributors (nodes contributing more than 175% of the source rate) is increased by 10-240%, and variation in bandwidth received among nodes with similar contributions is reduced. Achieving these improvements incurs a 20-38% decrease in the time between quality changes seen by a host but achieves a 10-fold reduction in average time to recover from these changes for high contributors.

The rest of the paper is organized as follows: Section 2 discusses our assumptions and motivations in detail. Section 3 presents the design of contribution-aware heuristics. Section 4 describes the broadcasting system and the process of integrating the multi-tree framework. Section 5 discusses our evaluation methods and metrics. Evaluation results are presented in Section 6. Finally, Section 7 draws conclusions based on these results.

## 2. Assumptions and Motivations

### 2.1 Broadcast User Model

To simplify our design, we make certain assumptions about the behavior of broadcast participants. Although we believe our conclusions may be generalized past some of these assumptions, we limit our discussion to this user model.

A peer \( i \) in the broadcast is capable of both receiving and forwarding data. We assume that every peer can receive the full source rate \( S \) if the system can provide it. This is reasonable given that many "broadband" users today have asymmetric connections with a large downloading capacity. Most DSL hosts can easily receive \( S \) but not forward one full-rate video stream. In academic or business environments, symmetric connections (e.g., Ethernet) are more common, and such hosts can often receive and forward several times more than \( S \).

We do not assume a homogeneous forwarding bound but consider different levels of actual contribution. Peer \( i \)'s actual contribution \( f_i \) is bounded by either ability or willingness. We assume that this forwarding bound \( F_i \) is determined by user willingness and is never over-estimated by the user (i.e., willingness ≤ ability). We assume \( F_i \) is known only to the user and is non-zero—every peer will contribute some bandwidth upon request. \( f_i \) may vary over the course of \( i \)'s stay in the system due to changes in the number of children \( i \) supports. Therefore, we target our design to react to users' actual contribution.

An important assumption is that users are not strategic. While we offer incentives to encourage users to increase their willingness to contribute, we do not model users who attempt to contribute the minimum possible to achieve their desired performance. Instead, a peer \( i \) ensures \( f_i \) does not exceed \( F_i \) when adopting a new child. Therefore, we assume heterogeneity in \( F_i \) will be reflected by heterogeneity in \( f_i \).

Lastly, we assume hosts honestly report their \( f_i \), inferred by the number of children they currently support and the bandwidth received from parents. However, our heuristics can be integrated with recent research in distributed auditing and rating of nodes [8, 2, 15] to verify the claimed contribution of nodes. With these assumptions in mind, our goal is to encourage a host \( i \) to relax its \( F_i \), particularly under resource-scarce operating environments.

### 2.2 Multi-tree-based Data Dissemination

Our system is designed for regimes where insufficient resources are present in the system for all hosts to receive the full source rate. While we assume all hosts contribute some outgoing bandwidth, we do not assume everyone can forward the full source rate. In resource-scarce environments, we must also utilize any outgoing bandwidth less than the source rate. Therefore, we require a means by which hosts may receive and contribute graduated levels of bandwidth and transition smoothly as available resources change.

To realize these goals, we leverage the multi-tree data delivery framework [3, 17]. In this framework, participants self-organize into a forest of \( T \) trees rooted at a source. The source encodes video with source rate \( S \) evenly into \( T \) stripes of size \( S/T \), each distributed along one tree. The quality that a host gets depends on the number of stripes it receives. Typically, a layered codec based on Multiple Description Coding (MDC) [11, 5] is used to achieve this. The trees are interior-disjoint; that is, a host \( i \) allocates \( F_i \) to only one tree but attempts to connect to all \( T \) trees. When \( F_i \) is normalized by \( S \), we call the resulting value the degree of host \( i \). For example, if \( F_i = 300 \) kbps and \( S = 400 \) kbps, \( i \)'s degree is \( 300/400 = 0.75 \). We also define the tree-degree to be degree * \( T \), which is the maximum number of children a host can support in the tree it contributes. Figure 1 illustrates how broadcast content is delivered with \( T = 2 \). Hosts A and B both have a degree of 1 and allocate their bandwidth in Tree2 and Tree1, respectively, where each can support two children (i.e., tree-degree of 2). Host C receives \( S/2 \) each from A and B to reconstruct the original content.

This framework meets our needs because it allows nodes to connect to a subset of trees and contribute in smaller bandwidth increments (i.e., stripes). Any node having a degree greater or equal to \( 1/T \) (i.e., tree-degree ≥ 1) is able to contribute. By setting \( T \) properly, we allow resource-poor nodes with limited outgoing bandwidth to contribute, thereby spreading the forwarding load across all peers.

### 2.3 Bandwidth Distribution Policies

A key design consideration is the selection of policies for distributing bandwidth in the broadcast among participating hosts based on their contributions. Assuming there are \( N \) hosts, and host \( i \) forwards bandwidth \( f_i \), our heuristics determine the bandwidth \( r_i \) each host is entitled to receive. The multi-tree framework enables us to consider settings where hosts can obtain different video qualities based on the bandwidth they are entitled to, by connecting to a subset of trees at a high priority. The granularity is limited by the number of trees, \( T \), in the forest. Having a larger \( T \) enables greater granularity, but one potential cost is increased overhead due to MDC coding.

Our heuristics do not prescribe any particular bandwidth distribution policy but are designed to provide a framework that can implement a range of policies. One simple bit-for-bit policy is to require each node to forward as much as it receives, i.e., \( r_i = f_i \). Under this policy, each node can easily determine the bandwidth it should receive, as the decision is easy to compute locally. However, this policy is restrictive in two ways. First, it does not account for the fact that nodes may contribute less bandwidth than the source rate. Second, it does not provide any incentive for a node to donate more than the source rate even if it is capable of doing so. This is an issue in Internet environments today. Consider that Internet broadcasts typically involve a source rate of 300-400 kbps, with a majority of hosts behind DSL and Ethernet. Hosts behind DSL can receive the source rate but are not capable of forwarding it. Hosts behind Ethernet are capable of contributing much more than the source rate, and a policy such as \( r_i = f_i \) neither utilizes the bandwidth nor incentivizes them to contribute more.

Instead, we consider a generic cost function of the form proposed in [12] to provide differential distribution:

\[
r_i = \alpha \cdot f_i + \beta \cdot \left( \frac{\sum_{j=1}^{N} f_j}{N} \right)
\]

where \( r_i \) is the bandwidth peer \( i \) is entitled to receive, \( f_i \) is the bandwidth \( i \) contributes to the system, \( N \) is the number of participating peers, and \( \alpha \) and \( \beta \) are parameters. If \( \alpha = 1 \) and \( \beta = 0 \), we have a simple bit-for-bit policy. If \( \alpha > 1 \), a peer must contribute more than it is entitled to receive, ensuring extra bandwidth in the system. For our evaluation, we pick \( \alpha = 2 \) and \( \beta = 0.5 \).

### 2.4 Design Criteria

There are several criteria we wish to address in the design of our system:
1. **Good Utilization:** Given sufficient resources, users should receive bandwidth close to the source rate. While it is not possible for all users to receive the full rate in resource-scarce environments, the bandwidth provided should be optimized by making good use of available resources, and there should ideally be no untapped bandwidth. Each node should contribute to the extent of its ability and willingness.
2. **Equitable Distribution:** When allocating bandwidth resources among hosts with similar contribution levels, they should receive similar performance.
3. **Differential Distribution:** The allocation of bandwidth should favor those who make greater contributions. We also wish to offer some minimum performance to low contributors and give them improved performance if possible.
4. **Stability:** Performance should be consistent over time. A node that sees performance improvements should retain them, and a node that sees a performance dip should recover quickly.

## 3. System Design

To differentially treat a node based on its contribution in the multi-tree framework, we consider the following problem: given a peer \( i \), we wish to obtain a direct mapping between the actual amount of bandwidth \( f_i \) that \( i \) contributes and the amount of bandwidth \( r_i \) the system should offer in return. Recall that \( i \) allocates its entire bandwidth \( F_i \) to only one tree, called \( i \)'s Contributor Tree, but attempts to receive from all \( T \) trees. Extra bandwidth, if any, should be distributed evenly among participants once all of them get their deserved bandwidth. Equation (1) helps us obtain such a mapping in a distributed fashion. We refer to \( r_i \) as the Entitled Bandwidth of \( i \).

The natural solution is to have \( i \) simply receive \( r_i \) by subscribing to \( \lceil r_i / (S/T) \rceil \) trees as an Entitled Node. These trees are the Entitled Trees of \( i \). However, there are two reasons why this may not suffice:
1. Each node can only be entitled to an integral number of trees. If \( r_i \) is not an integral multiple of the stripe rate \( S/T \), the fractional portion of \( r_i \) becomes superfluous.
2. There may be nodes whose Entitled bandwidth \( r_i \) is larger than \( S \), and they will not consume all of \( r_i \) entitled to them. Consequently, not all bandwidth is used by nodes entitled to it, and there exists some additional bandwidth in the system that remains to be utilized. When a node's Entitled bandwidth is lower than the source rate \( S \), it may utilize some of this additional bandwidth available in trees they are not entitled to. We refer to the additional bandwidth \( S/T \) that nodes are not entitled to but utilize to reach the source rate as Excess Bandwidth, and nodes looking for or utilizing this bandwidth as Excess Nodes.

In summary, a broadcast participant may assume two "main" classes in the forest: it may be an Entitled node in some trees and an Excess node in some other trees. To treat different types of nodes with better granularity, our system further classifies them and assigns them different priorities. When distributing system resources, our goal is to favor Entitled nodes over Excess nodes and evenly distribute the Excess bandwidth among all participants until they receive the source rate or no more resources remain.

Before presenting our design details, we want to make an important distinction between two concepts used in our multi-tree design: join/subscribe and receive/connect. A node joins/subscribes to a tree if it is aware of its participation within the tree, whether connected or disconnected, and a node connects to/receives in a tree if it has attached to a parent in that tree and is receiving the data forwarded by the tree. We also define a slot as an allocated bandwidth of size \( S/T \) by a parent. A slot can be in one of three states: (i) occupied by an Entitled node, (ii) occupied by an Excess node, or (iii) unoccupied.

## 4. Implementation and Integration

We have implemented the system and integrated the multi-tree framework into an existing overlay broadcasting system [6]. The integration involved modifying the existing system to support the multi-tree structure and the contribution-aware heuristics. The system was evaluated on PlanetLab using real traces from previous operational deployments of the overlay broadcasting system.

## 5. Evaluation Methods and Metrics

Our evaluation methods include:
- **Performance Metrics:** We measure the performance of high contributors and the equity of bandwidth distribution among hosts with similar contributions.
- **Resource Utilization:** We assess the efficiency of resource utilization and the consistency of performance over time.
- **Recovery Time:** We evaluate the time taken for nodes to recover from performance dips.

## 6. Evaluation Results

Our results show that our heuristics offer differential and equitable resource distribution compared to a contribution-agnostic system. Specifically, the 10th-percentile performance of high contributors (nodes contributing more than 175% of the source rate) is increased by 10-240%, and variation in bandwidth received among nodes with similar contributions is reduced. Achieving these improvements incurs a 20-38% decrease in the time between quality changes seen by a host but achieves a 10-fold reduction in average time to recover from these changes for high contributors.

## 7. Conclusions

In this paper, we have presented the design and implementation of a contribution-aware overlay broadcasting system. Our system leverages a multi-tree framework and heuristics to enable differential and equitable distribution of bandwidth resources. Our evaluation on PlanetLab using real traces shows that our heuristics significantly improve the performance of high contributors and ensure equitable distribution among hosts with similar contributions. Future work will focus on further refining the heuristics and exploring their applicability in other resource-constrained environments.