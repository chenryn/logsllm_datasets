
?






Monitoring Audio, Data Race, Internal Critical
Data Manipulation, ...
Denial of Service
Sending a message with a source origin not
belonging to itself
Please note that  means the sub-vulnerability exists;  means the sub-vulnerability does not exist;
? indicates there are no strong evidences to verify whether the sub-vulnerability exists or not. The cell marked
with the grey color means the communication in that direction is not implemented.
Table II: The Evaluation Result
loaded in WebView is fully trusted, which may cause serious
consequences.
• The requirement of a feasible hybrid postMessage imple-
mentation may be urgent: Regular postMessage is still
very popular in hybrid mobile apps. However, compared
with regular postMessage, a feasible hybrid postMessage
implementation is more preferred. For instance, in many
apps, W→N is implemented by rewriting the JavaScript
method window.postMessage(), which breaks the regular
postMessage functionality.
• In all web frames, only the main web frame usually has the
capability to communicate with the native frame, but some
main web frames are treated as message proxies during
message delivery: Within our data set, we found 73/74
(98.6%) apps only allow the main web frame to exchange
data with the native frame, and 30/74 (40.5%) apps leverage
the main web frame as proxies.
• The blended vulnerabilities of CSV and OSV exist in real
world apps: 30 apps use the main web frame as message
proxies, where both CSV and OSV exist. As discussed in
Section I, the blended vulnerabilities may result in that
existing WebView defense solutions may be fooled.
• The ofﬁcial hybrid postMessage APIs are rarely used in
practice: Within our whole dataset, no apps use the ofﬁcial
WebView APIs. Compared with developers’ implementations,
the functionality provided by WebView.postWebMessage() is
too simple.
• The communication “W→N” is usually implemented relying
on JavaScript Bridge: JavaScript Bridge opens bridges
linking web code with native code. However, as JavaScript
Bridge usually does not carry any origin information, OSV is
likely caused. Although there are several solutions proposed
to protect JavaScript Bridge, all are limited in their ability
to prevent OSV (Section I).
D. Case Studies
1) Facebook React Native: Facebook React Native is a
third-party development framework that allows developers to
develop mobile apps purely in JavaScript. It supports several
popular mobile platforms (like Android and iOS). Thus, the
OSV vulnerability impacts all the supported platforms.
749
ĞǀĞůŽƉĞƌƐ͛
:ĂǀĂ^ĐƌŝƉƚŽĚĞ
ŶĚƌŽŝĚtĞďsŝĞǁ
tĞďsŝĞǁ KďũĞĐƚ
tĞď&ƌĂŵĞƐ
DĞƐƐĂŐĞ
Ϭ
DĞƐƐĂŐĞ
ZĞĐĞŝǀĞƌͬ^ĞŶĚĞƌ
^ĞŶĚĞƌͬZĞĐĞŝǀĞƌ
ϯ
ϭ
Ϯ
:ĂǀĂ^ĐƌŝƉƚŽƌĞ
EĂƚŝǀĞƵƐƚŽŵŝǌĂƚŝŽŶ
ZƵŶŶŝŶŐŶǀŝƌŽŶŵĞŶƚ
ƵƐƚŽŵŝǌĞĚtĞďsŝĞǁ
ƌĐŚŝƚĞĐƚƵƌĞKĨdŚĞZĞĂĐƚEĂƚŝǀĞ&ƌĂŵĞǁŽƌŬ
Figure 7: hybrid postMessage in Facebook React Native
The architecture of the React Native framework is shown in
Figure 7. In run-time, the running environment is ﬁrst created.
Developers’ JavaScript code “DJ” is parsed and executed
by the embedded generic and powerful JavaScript engine
“JavaScriptCore”. Through JavaScriptCore, DJ can interact
with Android, such as creating native UI components, and
handling UI events.
WebView (i.e., customized WebView in Figure 7) is also
available in the React Native framework. To enable it, it is
required for DJ to create a WebView object O as the reference.
Listing 3 illustrates how to create a WebView object in DJ
(Line 9), and let WebView to show a remote web page (Line
13).
.
: " + e.nativeEvent.data);
return (
);
DJ
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:50 UTC from IEEE Xplore.  Restrictions apply. 
In the React Native framework, hybrid postMessage is
implemented to allow the communication between O and the
JavaScript code loaded in the native WebView component
(for convenience, we denote the latter JavaScript code as
“W J”). For this purpose,
two APIs are added in O : 1)
WebView.postMessage() (Line 5 of Listing 3), which sends
a message from O to the main web frame of W J; and 2)
WebView.onMessage() (Line 15 and Lines 2-6 of Listing 3),
which receives messages from the main web frame of W J.
As discussed in Section IV-B, the hybrid postMessage
implementation of the React Native framework suffers from
OSV. More details are presented as follows.
Explanation. To support hybrid postMessage, the React Native
framework customizes Android WebView, where the origin
information is not carefully handled. More speciﬁcally, as
shown in “Customized WebView” of Figure 7, when a message
is sent from W J, it ﬁrst enters the native context (i.e., “Native
Customization”) through a pre-imported JavaScript Bridge,
where the origin information is lost. Then, the message is
delivered to the embedded JavaScript engine, and further
forwarded to O.
The key implementation is shown in Listing 1, and par-
tially discussed in Section I. In Customized WebView, the
JavaScript method window.postMessage() is rewritten. So that
when window.postMessage() is called in W J, the message is
redirected to a pre-deﬁned native function in the JavaScript
Bridge “__REACT_WEB_VIEW_BRIDGE”. However, during
the message delivery, the source origin information is lost.
To implement sending a message in the opposite direction,
the code shown in Listing 4 is used. The message content to
be sent is wrapped in a message event (Lines 3-6), and then is
dispatched to message handlers in the main web frame (Line
12). Since the message origin is not deﬁned in the event wrapper,
“undeﬁned” appears as the source origin. More importantly,
the implementation cannot ensure the code is executed in the
correct context (e.g., the target origin may not be right).
1 WebView.loadUrl("javascript:(function () {" +
2
3
4
5
6
7
8
9
10
11 "})();")
Listing 4: Sending Messages To The Main Frame Through
"var event;" +
// Carrying message content in the customized data
structure
"var data = {’data’: " + message_content + "};" +
"try {" +
"} catch (e) { ... }" +
// Sending the event to message handlers of the main
"document.dispatchEvent(event);" +
// Creating an event
"event = new MessageEvent(’message’, data);" +
web frame
WebView.loadUrl() In The Native Context
Examples. Because of the OSV problem, adversaries may
be able to send messages to message receivers to access the
internal functionalities, or play as message receivers to monitor
sensitive information contained in messages. com.altvr.xxx and
com.giantfood.xxx are two good examples to demonstrate the
problems.
• Case#1 com.altvr.xxx: It is designed for VR (Virtual Reality)
device management. Users can create events (such as party,
concert, and conference) and let others join in them. In
addition, even though there are no VR devices, the app can
still launch 2-D mode, which is available for most phones.
750
’{’ +
’"method":"enterSpaceForceVR",’ +
’"args":{’ +
1 window.postMessage(
2
3
4
5
6
7
Listing 5: Example Attack Code To Let Apps Forcely
’"Url":""’ +
’}, ...’ +
’}’)
Join Any Events
By leveraging OSV, malicious code injected into WebView
can freely access the functionality inside the message receiver
of O (i.e., WebView.onMessage()). As the example attack
code (Listing 5) shows, adversaries can call the method
“enterSpaceForceVR” (Line 3) to let the app silently and
forcibly join any events speciﬁed by adversaries (i.e., “Url”
in Line 5). If the microphone is enabled, adversaries may
be able to remotely monitor the microphone.
Hence, a feasible attack scenario for silently monitoring
the microphone is that an attacker ﬁrst logs in developers’
website to create an event, and gets a URL of the created
event. Then, the attacker joins the event to wait for victims in
advance. After that, the attacker injects crafted malicious code
into the victim’s WebView through an embedded third-party
JavaScript library. Next, the malicious code triggers hybrid
postMessage and calls the “enterSpaceForceVR” method
with the pre-obtained event URL as the parameter. After
that, the app silently joins in the event controlled by the
attacker. Finally, the attacker may start to monitor the victim’s
microphone.
Furthermore, the above attack code may also cause data
race. When the app is opened, the app usually takes a long
time for initialization, especially when the microphone is
enabled. At that period, if the attack code shown in Listing
5 is injected and executed, a data race occurs. In our test,
the data race can be stably triggered. When a third-party
JavaScript lib is fetched by the app’s WebView, adversaries
can immediately inject and run attack code. Then, the data
race can be triggered. In addition, the inﬂuence of the data
race is continuous, and can only be avoided by totally
cleaning user data, or re-installing the app.
The cause of data race is that once the microphone is enabled,
a ﬂag object will be initialized when the app is opened.
Before the ﬂag object’s initialization, if the attack code is
executed, an exception will be triggered and the app will be
crashed.
In the above two attacks, the functionalities inside the
message receiver of O can be fully leveraged. It is because
due to OSV, the React Native framework does not provide
any source origin information for validation.
The implementation of the app’s message receiver is shown in
Listing 6. When a message is received, the message content
is retrieved and parsed (Line 5). Then, the message receiver
executes an arbitrary method whose name and arguments
are determined by the ﬁelds “method” and “args” of the
received message (Lines 9). Finally, the execution result “r”
is returned through WebView.postMessage() (Line 13).
1 // e is a WebView object in O
2 // Registering a message handler
3 e.onMessage = function(t) {
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:39:50 UTC from IEEE Xplore.  Restrictions apply. 
4
5
6
7
8
9
10
11
12
13
14 }),
// Reading message content to a
var a = JSON.parse(t.nativeEvent.data);
...
// Executing an arbitrary method in the WebView
object e
r = e[a.method](a.args);
...
// Returning the execution result to WJ
e.refs.wv.postMessage(JSON.stringify({..., value: r
, ...}));
Listing 6: Code Snippet of onMessage()
• Case#2 com.giantfood.xxx: It is a food shopping management
app. The operation on users’ cart (i.e., the shopping list) relies