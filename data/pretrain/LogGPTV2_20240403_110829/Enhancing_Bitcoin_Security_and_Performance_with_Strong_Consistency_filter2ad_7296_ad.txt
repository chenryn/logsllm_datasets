view-change timer. Then he broadcasts the hash of the
block he proposed and waits. When the nodes receive
this message they check if they have seen the block and
either send an ACK or wait until they see the block and
then send the ACK. The leader collects and counts the
ACKs, to detect if his block is rejected simply because
it never reaches the witnesses. If the timer expires or a
block rejection arrives before he receives two-thirds of
the ACKs, the leader knows that the tree has failed and
reverts to a ﬂat ByzCoin structure before the witnesses
assume that he is faulty.
As we show in Section 4, the ﬂat ByzCoin structure
can still quickly sign keyblocks for the day-long window
(144 witnesses) while maintaining a throughput higher
than Bitcoin currently supports. Flat ByzCoin is more
robust to faults, but increases the communication latency
back to O(n). Furthermore, if all faults ( N
3  ) are con-
secutive leaders, this can lead back to a worst case O(n2)
communication latency.
3.7.2 Membership Churn and BFT
After a new leader is elected, the system needs to en-
sure that the ﬁrst microblock of the new leader points
to the last microblock of the previous leader. Having
2 f + 1 supporting votes is not enough. This occurs be-
cause there is the possibility than an honest node lost its
membership when the new era started. Now in the worst
case, the system has f Byzantine nodes, f honest nodes
that are up to date, f slow nodes that have a stale view of
the blockchain, and the new leader that might also have
a stale view. This can lead to the leader proposing a new
microblock, ignoring some signed microblocks and get-
ting 2 f + 1 support (stale+Byzantine+his own). For this
reason, the ﬁrst microblock of an era needs 2 f + 2 sup-
porting signatures. If the leader is unable to obtain them,
this means that he needs to synchronize with the system,
i.e., he needs to ﬁnd the latest signed microblock from
the previous roster. He asks all the nodes in his roster,
plus the node that lost its membership, to sign a latest-
checkpoint message containing the hash of the last mi-
croblock. At this point in time, the system has 3 f + 2
(3 f + 1 of the previous roster plus the leader) members
and needs 2 f + 1 honest nodes to verify the checkpoint,
plus an honest leader to accept it (a Byzantine leader will
be the f + 1 fault and compromise liveness). Thus, Byz-
Coin can tolerate f fails in a total of 3 f + 2 nodes.
4 Performance Evaluation
In this section we discuss the evaluation of the ByzCoin
prototype and our experimental setup. The main ques-
tion we want to evaluate is whether ByzCoin is usable in
practice without incurring large overheads. In particular
we focus on consensus latency and transaction through-
put for different parameter combinations.
4.1 Prototype Implementation
We implemented ByzCoin in Go1 and made it pub-
licly available on GitHub.2 ByzCoin’s consensus mecha-
1https://golang.org
2https://github.com/DeDiS/Cothority
USENIX Association  
25th USENIX Security Symposium  287
9
nism is based on the CoSi protocol with Ed25519 signa-
tures [6] and implements both ﬂat- and tree-based collec-
tive signing layouts as described in Section 3. For com-
parison, we also implemented a conventional PBFT con-
sensus algorithm with the same communication patterns
as above and a consensus algorithm that uses individual
signatures and tree-based communication.
To simulate consensus groups of up to 1008 nodes,
we oversubscribed the available 36 physical machines
(see below) and ran up to 28 separate ByzCoin pro-
cesses on each server. Realistic wide-area network con-
ditions are mimicked by imposing a round-trip latency
of 200 ms between any two machines and a link band-
width of 35 Mbps per simulated host. Note that this sim-
ulates only the connections between miners of the con-
sensus group and not the full Bitcoin network. Full nodes
and clients are not part of the consensus process and can
retrieve signed blocks only after consensus is reached.
Since Bitcoin currently is rather centralized and has only
a few dozen mining pools [3], we assume that if/when
decentralization happens, all miners will be able to sup-
port these rather constrained network requirements.
The experimental data to form microblocks was taken
by ByzCoin clients from the actual Bitcoin blockchain.
Both micro- and keyblocks are fully transmitted and col-
lectively signed through the tree and are returned to the
clients upon request together with the proof. Veriﬁ-
cation of block headers is implemented but transaction
veriﬁcation is only emulated to avoid further measure-
ment distortion through oversubscribed servers. A sim-
ilar practice is used in Shadow Bitcoin [45]. We base
our emulation both on measurements [31] of the aver-
age block-veriﬁcation delays (around 200 ms for 500 MB
blocks) and on the claims of Bitcoin developers [8] that
as far as hardware is concerned Bitcoin can easily ver-
ify 4000 TPS. We simulate a linear increase of this delay
proportional to the number of transactions included in the
block. Because of the communication pattern of Byz-
Coin, the transaction-veriﬁcation cost delays only the
leaf nodes. By the time the leaf nodes ﬁnish the block
veriﬁcation and send their vote back to their parents, all
other tree nodes should have already ﬁnished the veriﬁ-
cation and can immediately proceed. For this reason the
primary delay factor is the transmission of the blocks that
needs to be done logN sequential times.
We ran all our experiments on DeterLab [22] using
36 physical machines, each having four Intel E5-2420
v2 CPUs and 24 GB RAM and being arranged in a star-
shaped virtual topology.
4.2 Consensus Latency
The ﬁrst two experiments focus on how microblock com-
mitment latency scales with consensus group size and
Figure 6: Inﬂuence of the consensus group size on the
consensus latency
with number of transactions per block.
4.2.1 Consensus Group Size Comparison
This experiment focuses on the scalability of ByzCoin’s
BFT protocol in terms of the consensus group size. The
number of unique miners participating in a consensus
group is limited by the number of membership shares
in the window (Section 3.3), but can be smaller if some
miners hold multiple shares (i.e., successfully mined sev-
eral blocks) within the same window.
We ran experiments for Bitcoin’s maximum block size
(1 MB) with a variable number of participating hosts.
Every time we increased the number of hosts, we also in-
creased the servers’ bandwidth so that the available band-
width per simulated host remained constant (35 Mbps).
For the PBFT simulation, the 1 MB block was too big
to handle, thus the PBFT line corresponds to a 250 KB
block size.
As Fig. 6 shows,
the simple version of ByzCoin
achieves acceptable latency, as long as the consensus
group size is less than 200. After this point the cost
for the leader to broadcast the block to everyone incurs
large overheads. On the contrary, the tree-based Byz-
Coin scales well, since the same 1 MB block for 1008
nodes suffers signing latency less than the ﬂat approach
for 36 nodes. Adding 28 times more nodes (from 36 to
1008) causes a latency increase close to a factor 2 (from
6.5 to 14 seconds). The basic PBFT implementation is
quite fast for 2 nodes but scales poorly (40 seconds for
100 nodes), whereas the tree-based implementation with
individual signatures performs the same as ByzCoin for
up to 200 hosts. If we aim for the higher security level of
1008 nodes, however, then ByzCoin is 3 times faster.
Fig. 7 shows the performance cost of keyblock sign-
288  25th USENIX Security Symposium 
USENIX Association
10
Figure 7: Keyblock signing latency
Figure 8: Inﬂuence of the block size on the consensus
latency
ing. The ﬂat variant outperforms the tree-based version
when the number of hosts is small since the blocks have
as many transactions as there are hosts and thus are small
themselves. This leads to a fast transmission even in the
ﬂat case and the main overhead comes from the block
propagation latency, which scales with O(logN) in the
tree-based ByzCoin variant.
4.2.2 Block Size Comparison
The next experiment analyzes how different block sizes
affect the scalability of ByzCoin. We used a constant
number of 144 hosts for all implementations. Once
again, PBFT was unable to achieve acceptable latency
with 144 nodes, thus we ran it with 100 nodes only.
Fig. 8 shows the average latency of the consensus
mechanism, determined over 10 blocks when their re-
spective sizes increase. As in the previous section we
see that the ﬂat implementation is acceptable for a 1 MB
block, but when the block increases to 2 MB the latency
quadruples. This outcome is expected as the leader’s
link saturates when he tries to send 2 MB messages to
every participating node.
In contrast ByzCoin scales
well because the leader outsources the transmission of
the blocks to other nodes and contacts only his chil-
dren. The same behavior is observed for the algorithm
that uses individual signatures and tree-based communi-
cation, which shows that the block size has no negative
effect on scalability when a tree is used. Finally, we ﬁnd
that PBFT is fast for small blocks, but the latency rapidly
increases to 40 seconds for 250 KB blocks.
ByzCoin’s signing latency for a 1 MB block is close
to 10 seconds, which should be small enough to make
the need for 0-conﬁrmation transactions almost disap-
pear. Even for a 32 MB block (≈ 66000 transactions) the
delay is much lower (around 90 seconds) than the ≈ 10
Figure 9: Inﬂuence of the consensus group size on the
block signing latency
minutes required by Bitcoin.
Fig. 9 demonstrates the signing latency of various
blocks sizes on tree-based ByzCoin.
Signing one-
transaction blocks takes only 3 seconds even when 1008
miners co-sign it. For bigger blocks, we have included
Bitcoin’s current maximum block size of 1 MB along
with the proposed limits of 2 MB in Bitcoin Classic and
8 MB in Bitcoin Unlimited [2]. As the graph shows,
1 MB and 2 MB blocks scale linearly in number of nodes
at ﬁrst but after 200 nodes, the propagation latency is
higher than the transmission of the block, hence the la-
tency is close to constant. For 8 MB blocks, even with
1008 the signing latency increases only linearly.
USENIX Association  
25th USENIX Security Symposium  289
11
5 Security Analysis
In this section, we conduct a preliminary, informal se-
curity analysis of ByzCoin, and discuss how its consen-
sus mechanism can mitigate or eliminate some known
attacks against Bitcoin.
5.1 Transaction Safety
In the original Bitcoin paper [47], Nakamoto mod-
els Bitcoin’s security against transaction double spend-
ing attacks as in a Gambler’s Ruin Problem. Further-
more, he models the progress an attacker can make as a
Poisson distribution and combines these two models to
reach Eq. (1). This equation calculates the probability of
a successful double spend after z blocks when the adver-
sary controls q computing power.
Figure 10: Throughput of ByzCoin
4.3 Transaction Throughput
P = 1−
z
∑
k=0
λke−λ
k! (cid:31)1−(cid:30) q
p(cid:29)(z−k)(cid:28)
(1)
In this experiment, we investigate the maximum through-
put in terms of transactions per second (TPS) that Byz-
Coin can achieve, and show how Bitcoin could improve
its throughput by adopting a ByzCoin-like deployment
model. We tested ByzCoin versions with consensus
group sizes of 144 and 1008 nodes, respectively. Note
that performance-wise this resembles the worst case sce-
nario since the miner-share ratio is usually not 1:1 as
miners in the consensus group are allowed to hold multi-
ple shares, as described in Section 3.3.
Analyzing Fig. 10 shows that Bitcoin can increase its
overall throughput by more than one order of magnitude
through adoption of a ﬂat ByzCoin-like model, which
separates transaction veriﬁcation and block mining and
deals with forks via strong consistency. Furthermore, the
144 node conﬁguration can achieve close to 1000 TPS,
which is double the throughput of Paypal, and even the
1008-node roster achieves close to 700 TPS. Even when
the tree fails, the system can revert back to 1 MB mi-
croblocks on the ﬂat and more robust variant of ByzCoin
and still have a throughput ten times higher than the cur-
rent maximum throughput of Bitcoin.
In both Figs. 8 and 10, the usual trade-off between
throughput and latency appears. The system can work
with 1–2 MB microblocks when the load is normal and
then has a latency of 10–20 seconds. If an overload oc-
curs, the system adaptively changes the block size to en-
able higher throughput. We note that this is not the case
in the simple ByzCoin where 1 MB microblocks have op-
timal throughput and acceptable latency.
In Figs. 11 and 12 we compare the relative safety
of a transaction over time in Bitcoin3 versus ByzCoin.
Fig. 11 shows that ByzCoin can secure a transaction in
less than a minute, because the collective signature guar-
antees forward security. On the contrary, Bitcoin’s trans-
actions need hours to be considered fully secured from a
double-spending attempt. Fig. 12 illustrates the required
time from transaction creation to the point where a dou-
ble spending attack has less than 0.1% chance of success.
ByzCoin incurs a latency of below one minute to achieve
the above security, which boils down to the time the sys-
tems needs to produce a collectively signed microblock.
Bitcoin on the other hand needs several hours to reach
the same guarantees. Note that this graph does not con-
sider other advanced attacks, such as eclipse attacks [34],
where Bitcoin offers no security for the victim’s transac-
tions.
5.2 Proof-of-Membership Security
The security of ByzCoin’s proof-of-membership mecha-
nism can be modeled as a random sampling problem with
two possible independent outcomes (honest, Byzantine).
The probability of picking a Byzantine node (in the worst
case) is p = 0.25 and the number of tries corresponds to
the share window size w. In this setting, we are inter-
ested in the probability that the system picks less than
c =  w
3  Byzantine nodes as consensus group members
and hence guarantees safety. To calculate this probabil-
ity, we use the cumulative binomial distribution where
X is the random variable that represents the number of
times we pick a Byzantine node:
3Based on data from https://blockchain.info.
290  25th USENIX Security Symposium 
USENIX Association
12
available shares and not necessarily the number of ac-