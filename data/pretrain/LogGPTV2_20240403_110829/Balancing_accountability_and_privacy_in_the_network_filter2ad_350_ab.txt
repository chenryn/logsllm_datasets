punished. Speciﬁcally, we would like our design to have the
following three properties:
1) Anyone can verify that a packet is “vouched for” —
someone is willing to take responsibility if the packet
is malicious.
2) Malicious ﬂows can be stopped quickly.
3) Future misbehavior from malicious hosts can be
prevented (i.e., by administrative or legal action).
Privacy Our focus is on providing the ability for a sender to
hide its network address so it can hide its identity from third-
party observers in the source domain, from transit ISPs, and
(optionally—see §6) from the destination. We assume these
adversaries can observe all packets. Note that while our goal
is to make it possible to hide the sender’s address, APIP
does not specify any one particular address hiding mech-
anism. We do not consider anonymity from the operator
of the source domain itself (since it can identify the sender
based on the physical “port” through which the packet en-
tered the network).
Application-layer privacy concerns are outside the scope
of this paper, nor are we concerned about hiding a packet’s
destination; senders wishing to make their packets unlink-
able to the destination should use solutions such as Tor.
Finally, though we do not introduce new techniques for ﬂow
anonymity, i.e., the inability of observers to link packets be-
longing to the same ﬂow, we discuss how our solutions aﬀect
the linkability of packets in a ﬂow.
4. BASIC DESIGN
The Accountable and Private Internet Protocol (APIP)
separates accountability and return addresses. A ded-
Figure 1: Packet carry a destination address (used by routers
for forwarding), an accountability address (used to report
malicious packets), and an optional return address (used by
the receiving endpoint for responding).
icated accountability address allows us to address the limi-
tations of an accountability-above-all-else approach like AIP
by introducing delegated accountability . Rather than iden-
tifying the sender, a packet’s accountability address iden-
tiﬁes an accountability delegate, a party who is willing to
vouch for the packet. With accountability handled by dele-
gates, senders are free to mask return addresses (e.g., by
encrypting them end-to-end or using network address trans-
lation) without weakening accountability.
Addressing We think APIP is applicable to many diﬀer-
ent network architectures, so as much as possible we avoid
making protocol-speciﬁc assumptions. To discuss source ad-
dresses generally, we adopt three conventions.
First, each packet carries at least two addresses (Figure 1):
(1) a destination address (used to forward the packet) and
(2) an accountability address (identifying a party—not nec-
essarily the sender—agreeing to take responsibility for the
packet). It may also carry a return address (denoting where
response traﬃc should be sent) as a separate ﬁeld in the
packet. Return addresses may not be present in all pack-
ets, e.g., they may be stored with connection state on the
receiver. Also, as we discuss later, the return address may
not always be part of the network header.
Second, an address consists of three logical pieces: (1) a
network ID (NID), used to forward packets to the destina-
tion domain, (2) a host ID (HID), used within the destina-
tion domain to forward packets to the destination host, and
(3) a socket ID (SID), used at the destination host to de-
multiplex packets to sockets. We write a complete address
as NID:HID:SID. These logical IDs may be separate header
Accountability: NID:HID:SIDReturn: NID:HID:SID...Destination: NID:HID:SIDused by routers for forwardingused by anyonefor challengingused by destinationfor respondingused by routers as a !ow IDFigure 2: High-level overview of APIP.
Figure 3: Adding SIDs to accountability addresses for ﬂow
diﬀerentiation.
(a) Without SIDs.
(b) Per-host SIDs.
ﬁelds or could be combined (e.g., an IP address encodes both
an NID and an HID; the port number serves as an SID).
Finally, to simplify our description of APIP, we initially
assume that HIDs are self-certifying, as deﬁned by AIP, to
bootstrap trust in interactions with accountability delegates.
We relax this assumption in §7.3.
Life of a Packet Figure 2 traces the life of a packet through
APIP.
1 The sender sends a packet with an accountability ad-
dress identifying its accountability delegate.
If a
return address is needed, it can be encrypted or oth-
erwise masked.
2 The sender “briefs” its accountability delegate about
the packet it just sent.
3 A veriﬁer (any on-path router or the receiver) can
conﬁrm with the accountability delegate that the
packet is a valid packet from one of the delegate’s
clients. Packets that are not vouched for are dropped.
4 If the receiver determines that packets are part of a
malicious ﬂow, it uses the accountability address to re-
port the ﬂow to the accountability delegate, which
stops verifying (eﬀectively blocking) the ﬂow and can
pursue a longer term administrative or legal solution.
5 The receiver uses the return address in the request as
the destination address in the response.
It is useful to identify the key diﬀerences between APIP
and the AIP and Tor protocols discussed in Section 3. Dele-
gated accountability oﬀers two key beneﬁts over AIP. First,
it dramatically improves sender privacy: only the account-
ability delegate, not the whole world, knows who sent a
packet. Second, it oﬀers a more reliable way of dealing with
malicious ﬂows compared to a smart NIC. Third, it oﬀers a
clearer path to long-term resolution to bad behavior. For ex-
ample, the delegate can contact the well-intentioned owner
of a misbehaving host out-of-band (e.g., requiring them to
run anti-virus tools). While Tor provides stronger privacy
properties than APIP, by simply changing how source ad-
dresses are treated, APIP can provide sender privacy with
much lower overhead since the return address can be hid-
den from the network. Techniques for doing so (§6) are
lightweight enough to be viable options for “default on” use.
5. DELEGATING ACCOUNTABILITY
This section describes how accountability can be dele-
gated. We will assume delegates can be trusted, e.g., their
role is played by a reputable commercial company or source
domain. We discuss the problem of rogue delegates in §7.1.
APIP deﬁnes four aspects of delegate operation: the form
of the address used to reach a delegate plus the three opera-
tions all delegates must support — the delegate “interface,”
so to speak. Delegates expose one operation to their clients:
brief(packet, clientID): Whenever a host sends a
packet, it must “brief” its delegate—if the delegate
is to vouch for the packet on behalf of the sender, it
needs to know which packets its clients actually sent.
To the outside world, accountability delegates oﬀer two op-
erations, borrowed largely from AIP:
verify(packet): Anyone in the network can chal-
lenge a packet; its accountability delegate responds
aﬃrmatively if the packet was sent by a valid client
and the ﬂow has not been reported as malicious.
shutoﬀ(packet): Given an attack packet, the victim
can report the packet to the accountability delegate;
in response, the delegate stops verifying (blocks) the
ﬂow in question and pursues a long term solution with
the sender.
We now discuss options for constructing the accountability
address and for implementing the delegate interface.
5.1 Accountability Addresses
Accountability addresses serve two related functions. First,
the address is used to send veriﬁcation requests and shutoﬀs
to an accountability delegate. The NID:HID portion of the
address is used to direct messages to the delegate server.
Second, routers often need to identify ﬂows, e.g., for traﬃc
engineering (TE) or monitoring purposes, and today source
addresses are often part of the ﬂow ID. The granularity of
this ID is even more important in APIP since traﬃc is ver-
iﬁed (and blocked) per ﬂow. In this section, we discuss the
implications of replacing source addresses with accountabil-
ity addresses for ﬂow identiﬁcation.
Creating Flow IDs Routers construct ﬂow IDs using in-
formation available in the network and transport headers.
However, in APIP, if an accountability address merely points
to a delegate, packets from all clients of a particular dele-
gate will be indistinguishable, robbing routers of the abil-
ity to distinguish ﬂows at a ﬁner granularity than dele-
gateØdestination (Figure 3a). This may be too coarse-
grained, especially since the ﬂow ID is used for dropping
packets from malicious ﬂows.
In eﬀect, every ﬂow that
shares a delegate with a malicious ﬂow will share its fate.
(TE tends to work with coarser-grained ﬂows, so destination
addresses alone may be suﬃciently granular.)
The simplest way to support ﬁner-grain ﬂow IDs is to
include the delegate’s SID in the calculation, similar to the
1423SenderAccountabilityDelegateReceiver5Veri erSymantecClientsAcct: Symantec...Dest: YouTubeSymantecClientsAcct: Symantec:SID2...Dest: YouTube(e.g., for 30 seconds), and when it receives a verify(), it
searches for the ﬁngerprint and returns VERIFIED if it ﬁnds
it. For reasons explained in §5.3, a packet’s ﬁngerprint is
actually more than just a simple hash:
FpPq “ H pKSDS || Pheader || HpPbodyqq
Here H is a cryptographically secure hash function and KSDS
is a symmetric key established when sender S signed up for
service with delegate DS. It is included in the ﬁngerprint
to prevent observers from linking P to FpPq. Each brief
includes a client ID, a ﬁngerprint, and a message authenti-
cation code (MAC):
Sender transmits packet and brief:
S Ñ R :
S Ñ DS : briefpPq “ clientID || FpPq
P
|| MACKSDS
pclientID || FpPqq
To reduce delegate storage requirements and network over-
head, rather than sending full-sized ﬁngerprints, hosts can
instead periodically provide their delegate with a bloom ﬁl-
ter of the ﬁngerprints of all packets sent since the last brief.
Accountability delegates keep the ﬁlters received in the last
thirty seconds.
Note that in either case (ﬁngerprints or bloom ﬁlters), the
delegate can vouch for its clients’ packets without knowing
anything about their contents. Finally, if gateway routers
assign accountability addresses, they can also take responsi-
bility for brieﬁng the delegate.
Bootstrapping Who vouches for briefs? That is, how do
senders get briefs to their delegates if the packets carrying
them cannot be veriﬁed? Clients include a special “token”
in brief packet headers (e.g., as the SID in the destination
address) proving to the delegate that the brief is from a
valid client. Since veriﬁcation requests include a copy of
the unveriﬁed packet’s header (see §5.3), the delegate can
see that both the accountability and destination addresses
point at the delegate, indicating the packet is a brief, cueing
the delegate to check for the token. Delegates can use any
scheme to select tokens. One possibility is using a hash
chain based on a shared secret. Each brief uses the next
hash in the chain, preventing replays. (This ensures the brief
is from a valid client—we discuss “brief-ﬂood” DoS attacks
from malicious clients in §7.2.)
Recursive Veriﬁcation The alternative to ﬁngerprint col-
lection is to have hosts store the ﬁngerprints of recently sent
packets. When a delegate receives a verify(), the delegate
forwards the veriﬁcation packet to the host that sent it. The
host responds “yes” or “no” to the delegate, which passes the
response on to the original challenger (Figure 4b). In this
case, brief() is a NOP. Recursive veriﬁcation reduces net-
work and storage overhead, but the catch is that in order to
work, each veriﬁcation request must carry enough informa-
tion for the delegate to map the packet to a customer. This
impacts the ﬂow ID granularity (§5.1): when using recursive
veriﬁcation, delegate must ensure that no two clients share
a ﬂow ID (or it must be willing to forward a veriﬁcation to
multiple clients).
5.3 Verify()
(a) Fingerprint Collection
(b) Recursive Veriﬁcation
Figure 4: Brieﬁng Techniques
way port numbers are used today. For example, delegates
could assign a group of SIDs to each client source domain,
which it can use to deﬁne network-level ﬂows as it sees ﬁt (see
below). Accountability delegates with many clients would
require a large pool of SIDs to achieve ﬁne granularity (e.g.,
at the host or TCP ﬂow level). If the SID is not suﬃcient,
it is possible to add a separate ﬂow ID ﬁeld to the packet
header to improve granularity. In our discussion, we will use
the term ﬂow ID to refer to both the SID only and SID plus
dedicated ﬁeld approaches.
Controlling Flow Granularity How the ﬂow ID is assigned
aﬀects both privacy and the amount of collateral damage
caused when an aggregate ﬂow containing a malicious sender
is blocked. At one extreme, a delegate could use a single ﬂow
ID for all its customers, which provides the biggest possible
anonymity set, but may result in a lot of legitimate traf-
ﬁc being dropped if any client sends malicious traﬃc. At
the other extreme, assigning senders unique ﬂow IDs (Fig-
ure 3b), or a separate ﬂow ID per TCP ﬂow, allows ﬁne grain
ﬁltering, but allows sender/TCP ﬂow linkability. The solu-
tion we propose is for delegates to assign each client a pool
of ﬂow IDs which it can assign to packets based on inter-
nal policies. Delegates check that clients are using ﬂow IDs
assigned to them as part of the veriﬁcation process (§5.3).
Source Domain Accountability Address Management An
interesting alternative to senders picking a ﬂow ID for each
packet (within boundaries set by their delegate) is to have
ﬂow IDs assigned at the level of the source domain. For
example, individual hosts could send packets with a tradi-
tional source address. If a packet leaves the source domain,
the gateway routers replace it with an accountability address
and hide the return address (like a NAT; see § 6). This ap-
proach is especially attractive for source domains that act
as the accountability delegate for their hosts (§7.4). Cen-
tralized management simpliﬁes managing the pool of ﬂow
IDs, enforcing policies, and incremental deployment. The
drawback is that individual users lose control over sender
privacy.
5.2 Brief()
Accountability delegates need to know which packets their
clients have sent if they are to vouch for them when chal-
lenged with a verify(). We consider two approaches in this
section. Accountability delegates can choose any method,
possibly on a per-client basis.
Fingerprint Collection The simplest solution is for senders
to proactively send their delegates ﬁngerprints of the packets
they send (Figure 4a). The delegate stores the ﬁngerprints