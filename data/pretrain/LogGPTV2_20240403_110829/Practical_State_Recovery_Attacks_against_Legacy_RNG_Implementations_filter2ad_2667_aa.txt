title:Practical State Recovery Attacks against Legacy RNG Implementations
author:Shaanan N. Cohney and
Matthew D. Green and
Nadia Heninger
Practical state recovery attacks
against legacy RNG implementations
Shaanan N. Cohney
University of Pennsylvania
PI:EMAIL
Matthew D. Green
Johns Hopkins University
PI:EMAIL
Nadia Heninger
University of Pennsylvania
PI:EMAIL
ABSTRACT
1 INTRODUCTION
The ANSI X9.17/X9.31 pseudorandom number generator design was
first standardized in 1985, with variants incorporated into numerous
cryptographic standards over the next three decades. The design
uses timestamps together with a statically keyed block cipher to
produce pseudo-random output. It has been known since 1998 that
the key must remain secret in order for the output to be secure.
However, neither the FIPS 140-2 standardization process nor NIST’s
later descriptions of the algorithm specified any process for key
generation.
We performed a systematic study of publicly available FIPS 140-
2 certifications for hundreds of products that implemented the
ANSI X9.31 random number generator, and found twelve whose
certification documents use of static, hard-coded keys in source
code, leaving the implementation vulnerable to an attacker who
can learn this key from the source code or binary. In order to
demonstrate the practicality of such an attack, we develop a full
passive decryption attack against FortiGate VPN gateway products
using FortiOS v4 that recovers the private key in seconds. We
measure the prevalence of this vulnerability on the visible Internet
using active scans, and demonstrate state recovery and full private
key recovery in the wild. Our work highlights the extent to which
the validation and certification process has failed to provide even
modest security guarantees.
CCS CONCEPTS
• Security and privacy → Cryptanalysis and other attacks;
Embedded systems security; Security protocols;
ACM Reference Format:
Shaanan N. Cohney, Matthew D. Green, and Nadia Heninger. 2018. Prac-
tical state recovery attacks against legacy RNG implementations. In 2018
ACM SIGSAC Conference on Computer and Communications Security (CCS
’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA,
16 pages. https://doi.org/10.1145/3243734.3243756
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243756
Random number generation is a vital component of any crypto-
graphic system. While systems may survive subtle flaws in crypto-
graphic algorithm implementation, the ability to predict the output
of a (pseudo)random number generator typically leads to the cata-
strophic failure of any protocol built on top of it. In recent years
a number of cryptographic systems have been found to include
flawed random and pseudorandom number generation subsystems.
These flaws range from subtle weaknesses, e.g. biases that admit
sophisticated attacks against the protocol [48]; to catastrophic vul-
nerabilities that allow for adversarial recovery of all random coins
used in a protocol execution [16, 58]. In a particularly ominous
development, some of these flaws appear to have been deliberately
engineered. For example, leaks by Edward Snowden indicate that
the NIST Dual EC DRBG standard may have been designed with
a backdoor [52]. While there is no way to empirically verify this
allegation, we know for certain that the Dual EC algorithm has
been successfully exploited: in 2015 Juniper Networks revealed that
their ScreenOS line of VPN devices had been modified to include a
malicious set of Dual EC parameters, which likely enabled passive
decryption of VPN sessions [16].
The problem of constructing random and pseudorandom number
generators has been extensively explored by industry [8, 40, 47] and
in the academic literature [20, 21, 41, 54, 56]. Despite the abundant
results of this effort, the industry has consistently relied on a small
number of common pseudorandom number generation algorithms.
To a large extent this can be attributed to standards bodies. For ex-
ample, until 2007 there were only two algorithms for pseudorandom
number generation approved for U.S. FIPS 140 certification, and
prior to 1998 only one such algorithm was approved. Recent dis-
coveries surrounding the inclusion of flawed generators motivate a
more thorough examination of these generators — and particularly,
their use in products.
The ANSI X9.17/31 standards. The ANSI X9.17 “Financial In-
stitution Key Management (Wholesale)” standard, first published
in 1985, defined a voluntary interoperability standard for crypto-
graphic key generation and distribution for the financial industry.
This standard included a pseudorandom number generator (PRG)
in its Appendix C as a suggested method to generate key material.
This generator uses a block cipher (in the original description, DES)
to produce output from the current state, and to update the state
using the current time.
The same PRG design appeared in US government cryptographic
standards for the next three decades, occasionally updated with
new block ciphers. A subset of the ANSI X9.17-1985 standard was
adopted as a FIPS standard, FIPS-171, in 1992. FIPS-171 specified that
“only NIST-approved key generation algorithms (e.g., the technique
defined in Appendix C of ANSI X9.17) shall be used”. FIPS 140-1,
adopted in 1994, specified that modules should use a FIPS approved
key generation algorithm; FIPS 186-1, the original version of the
DSA standard adopted in 1998, lists the X9.17 PRG as an approved
method to generate private keys. The ANSI X9.31 standard from
1998 specified a variant of the X9.17 PRG using two-key 3DES as
the block cipher; this variant was included as an approved random
number generator in further standards such as FIPS 186-2, from 2004.
NIST published extensions of this design using three-key 3DES and
AES as the block cipher [39] that were officially included on the
FIPS 140-2 list of approved random number generation algorithms
in 2005.
A critical design element of the ANSI X9.17/X9.31 PRG is that the
cipher key used with the block cipher remains fixed through each
iteration. In order to remain secure, the key must never be revealed
to external attackers. If an attacker learns this key, they can recover
all future and past states of the PRG from its output by brute forcing
the timestamps [41]. Perhaps due to this known weakness, the ANSI
X9.17/X9.31 design was deprecated in 2011 and removed from the
FIPS list of approved PRG designs in January 2016. NIST SP 800-
131A, the document announcing the deprecation of this algorithm,
also deprecated a number of smaller cryptographic key sizes along
with a rationale for doing so; no rationale appears to have been
given for the transition away from X9.31.
Despite this significant flaw, which was identified by Kelsey et al.
in 1998 [41], the NIST documents specifying the ANSI X9.31 PRG
design fail to specify how the cipher key should be generated [39].
This raises the possibility that even FIPS-validated deployed systems
could contain vulnerabilities that admit practical PRG state recovery.
To evaluate this possibility, we performed a systematic study of
publicly available FIPS 140-2 certification for hundreds of products
that implemented the ANSI X9.31 random number generator.
Our results show that a number of vendors use static hard-coded
keys in source code, leaving them vulnerable to an attacker who
can learn this key from the source code or binary. In order to
demonstrate the practicality of this attack, we reverse-engineered
the binaries for a Fortigate VPN gateway using FortiOS version 4.
We discovered that the ANSI X9.31 PRG implementation used for
IPsec encryption uses a hard-coded key, which is a test value given
in the NIST RNGVS specification [43], published as a validation
suite alongside their standardization of the generator. We perform
full state recovery in under a second from random number generator
output. We observe that a passive adversary observing the IKEv2
handshake used to set up an IPsec connection can carry out a state
recovery attack using the plaintext nonce values in the handshake,
and then derive the secret key generated during the cryptographic
key exchange. We demonstrate a full attack that learns the session
keys for a Fortigate IPsec VPN using FortiOS version 4 in seconds.
Furthermore, we demonstrate that this vulnerability exists in the
wild by performing state recovery, key recovery, and decryption
on handshakes we collected using internet-wide scanning of VPN
hosts.
This is not a “NOBUS” backdoor: it is symmetric, and thus an at-
tacker with access to the source code or device can recover the
secrets needed to compromise the PRG. However, the failure mode
of static, discoverable keys we exploit was not ruled out by stan-
dards. The PRG appears to have been independently implemented
in this fashion by a variety of vendors. This is a failure of the stan-
dardization process that has led to real and ongoing vulnerabilities.
We note that this failure mode is more subtle than simply using a
hard-coded key for encrypted communications. There are many
cryptographically secure PRG constructions using only public pa-
rameters and entropy unknown to the attacker, for example con-
structions based on modular exponentiation [11] or hash func-
tions [8]. In addition, as we discuss in Section 7, the vulnerability
could have been rendered practically unexploitable by using suffi-
ciently high resolution timestamps.
1.1 Our Contributions
In this work we extend a growing line of research into weak-
ened/backdoored random number generation in deployed prod-
ucts [9, 15, 16, 18, 19, 55]. Specifically, we demonstrate the existence
of widespread and passively exploitable vulnerabilities in imple-
mentations of one of the most widely-deployed standard PRGs. Our
contributions are as follows:
• We perform a systematic study of FIPS 140 security policy docu-
mentation and discover several independently vulnerable PRG
implementations from different vendors, and discover critical
failures in the standardization process.
• Based on this work, we develop an efficient passive X9.31 state
recovery attack for the FortiOS v4 IPsec implementation and
demonstrate full IPsec VPN decryption. Our reverse engineer-
ing was aided by a privilege escalation vulnerability we discov-
ered and disclosed.
• We use Internet-wide measurements to measure the scope of
this vulnerability among publicly-visible hosts, and demon-
strate it against hosts in the wild, uncovering more than 25,000
vulnerable hosts. These numbers likely represent a small frac-
tion of the true number of vulnerable hosts.
• We discuss the impact of these findings on other standardized
PRG designs, and demonstrate that these vulnerabilities could
affect other symmetric PRG implementations as well.
A critical differentiator between this work and previous work is that
our work is the first to exploit flaws in a widely-used symmetric-key
PRG at large scale, rather than a specialized (and rare) public-key
design such as Dual_EC_DRBG [16]. Moreover, we note that our
findings are tied to our analysis approach: they would not have
been detectable through black-box external testing methods.1 To
our knowledge, this work is the first to identify exploitable flaws
in cryptographic devices by analyzing the output of cryptographic
1Unlike many previous PRG weaknesses, e.g., [34, 58] the PRG flaws in this work are
undetectable to an attacker who interacts with the device as a black box; they can only
be found through careful analysis of the PRG internals.
module validation procedures. This demonstrates that the existing
standards validation procedures may need to be revisited.
Purpose of this work. Over the past several years, a valuable
line of research has considered the impact of weakened number
generators on cryptographic devices. This research comprises three
categories of work: (1) discovery of novel cryptographic attacks [41,
55], (2) measurement and impact studies of known (theoretical)
algorithm flaws [15, 16] and (3) development of countermeasures
and new theoretical models [9, 18, 19].
We stress that these categories are mutually interdependent. With-
out knowledge of flaws, there can be no analysis of impact. Without
knowledge of practical impact (in deployed protocols and devices),
there is little impetus for theoretical analysis or countermeasure
development. Finally, without academic research in each of these
areas, it is difficult for industry and standards bodies to design or
motivate analysis of new algorithms.
This work is an example of category (2). Our goal is to evaluate the
impact of a specific flaw on real, deployed cryptographic systems.
Our results in this work demonstrate that these flaws are present
and exploitable at scale in widely used implementations of real
Internet protocols. Our findings do not flow inevitably from previ-
ous results on ANSI X9.31 [41], as we note above and in Section 7.
Moreover, this analysis is critical given that X9.31 is one of the most
widely-deployed standard PRG algorithms in existence.
Finally, this work has impact in motivating countermeasure re-
search and formal modeling. In particular, we note in Section 7 that
more recent designs (CTR_DRBG from SP800-90A) may also be
vulnerable to similar attacks if implementations include (minor)
flaws. Since CTR_DRBG is enormously popular – e.g., it is included
in every Intel processor – we believe our work motivates further
analysis of implementations, as well as consideration of symmetric
PRG design principles that improve robustness.
1.2 Disclosure
We disclosed the X9.31 and privilege escalation vulnerabilities to
Fortinet in October 2016. Fortinet responded by releasing a patch
for affected versions of FortiOS [24, 25]. FortiOS version 5 did not
implement the X9.31 PRG and is not vulnerable.
We disclosed the potential for a flaw in Cisco Aironet devices to
Cisco in June 2017. After an internal investigation, Cisco determined
that the affected software versions had all reached end-of-support
status. They were unable to find the source code to validate the
flaw.
We notified the remaining vendors listed in Table 2 in October 2017.
BeCrypt pointed us to version 3.0 of their library, which has been
FIPS certified and no longer includes the X9.31 random number
generator. They told us that the only fixed key inside the FIPS
module is for self-test purposes. ViaSat USA had no record of the
product indicated in the security documentation and ViaSat UK
failed to respond to our disclosure. We did not receive substantive
responses from any other vendors.
NIST has decertified the ANSI X9.31 PRG for FIPS compliant uses
independently of our work. Despite this, we detected many vul-
nerable devices active on the open Internet, and additional devices
may reside within enterprise networks. In personal communication
in response to our work, NIST noted several issues with crypto-
graphic validation that they are planning to improve; we discuss
these in detail in Section 7. NIST informed us that they introduced
a five-year sunsetting policy for FIPS 140-2 validations in 2016 in
order to weed out old validations and encourage upgrades. There
is an effort currently underway to transition to automated testing
for all modules, and to change the liability model so that vendors
carry full responsibility for the security of their products [49].
1.3 Ethics
While we demonstrate key recovery and decryption against live
hosts we do not own on the Internet, the traffic we decrypt in our
proof-of-concept is a handshake we initiated with this host. We did
not collect traffic or attempt decryption for connections in which
we were not a party. We followed community best practices for
network scans, including limiting scan rates, respecting hosts who
wished to be blacklisted, and working with vendors and end users
to minimize effects on their networks.