ization of policy (Def. 4.1) does not map declass iden-
tiﬁers to ﬂowspecs in Φ. Instead, the security property
(Def. 5.5) and the enforcement r´egime (Def. 6.2) both
require that such mappings exist. In practical use of
the schematic approach, the mapping would be created
when the type-checker marks the code with declass
commands.
However, it is straightforward to adapt our formu-
lations (Defs. 5.5 and 6.2) to consider the mapping to
be part of policy, in order to fully capture ﬁne-grained
“where” policies with associated “what” and “when”
policies.5
5. The end-to-end security property
In this section, let M be a ﬁxed program, with policy
Γ, Φ as in the previous section. To lighten various
notations we suppress their dependence on M , Γ, and
Φ; for example, σ and τ range over the set TRACES
of M . This section deﬁnes the semantics of the policy.
5. In fact
this can be encoded in the present formalulation.
Suppose we wish to associate the ﬂowspec ﬂow pre P &ϕ mod x
with a single declass, say declass ι hx := ei. Add to the program
a fresh variable v initialized to 0. Replace the declass by the
sequence v := 1; declass ι hx := ei; v := 0. Revise the ﬂowspec
precondition to be (P ∧ v = 1)&ϕ. The revised ﬂowspec licenses
no declassiﬁcations other than the one labelled ι.
7
Low observations. The gradual release paper [4] de-
ﬁnes knowledge directly in terms of low observations,
i.e., sequences of the low-visible parts of states. Our
deﬁnition is formulated in terms of traces of complete
states, since these are needed to interpret ﬂowspec
preconditions.
What a low observer knows about the initial state
after observing the visible part of some trace σ is
that it could be any state that yields a trace τ low-
indistinguishable from σ. The precise deﬁnitions of
indistinguishability and observed knowledge are some-
what involved and are carefully designed to facilitate
proof of the soundness theorem, in a way that can be
extended to richer languages.
As in other works [27], [35], our notion of indistin-
guishability is deﬁned in terms of a purging function to
eliminate timing channels from the model. Assignment
to a high variable is called a high action; the other
actions —termination and low assignments including
declassiﬁcations— are low actions. For any pre-run S ,
let p-trace(S ) be the same as trace(S ) except omitting
states that result from high actions, i.e., assignments
to variables x with Γ(x ) = H. Deﬁne purge(σ) to be
the p-trace determined by a generating pre-run for σ.
Note that all generating pre-runs for σ yield the same
p-trace.
Deﬁne lowvis(s) be the restriction of a (proper)
state s to its low variables (according to Γ), and
deﬁne lowvis(X) = X. Two traces are considered
indistinguishable if there is a one-to-one correspon-
dence between the states resulting from low actions
and moreover corresponding states are low-equivalent.
Deﬁnition 5.1 (indistinguishable (∼)): Deﬁne
if and only if
σ ∼ τ
lowvis(purge(τ )), where we map lowvis
each state in the sequence.
lowvis(purge(σ)) =
over
Indistinguishability for singleton traces is the same
iff lowvis(s) =
as low equivalence,
lowvis(t ), because there is no stuttering to remove.
Note that if σ ∼ τ then σlast (σ) = X iff τlast (τ ) = X.
Deﬁnition 5.2 (observed knowledge): Deﬁne K(σ)
i.e., s ∼ t
by K(σ) = {s | ∃τ ∈ Traces(s) · σ ∼ τ }.
An observer, seeing the low part of σ, knows that
the initial state is one of the elements of K(σ) but is
ignorant of which it is. The condition τ ∈ Traces(s)
reﬂects a feature of the attacker model, namely that
the low observer knows the complete text of program
M and its semantics.
Proposition 5.3: Knowledge
monotonic:
K(σ t ) ⊆ K(σ)
such that
σ t ∈ TRACES . Here t may be either X or a
proper state.
for any σ and t
is
Revelation. The connection between ﬂowspecs and
traces rests on the following notion of revealed knowl-
edge, which is used to express a bound on the knowl-
edge that can be gained by observing a declassiﬁcation
step. The bound is expressed in terms of a precondition
P &ϕ, using a special notion of knowledge, written
R(σ, P &ϕ, ι), which will be used only when σ is
a trace leading up to an execution of declass ι hB i.
Informally, R(σ, P &ϕ, ι) represents the set of initial
states s from which there is a trace τ ∈ Traces(s)
with σ ∼ τ and moreover (σlast , τlast ) |= P &ϕ. The
idea is that τ is also poised to do a declassiﬁcation,
from a state that matches σlast in terms of the ﬂowspec
precondition. But formalizing R in these exact terms
would be unwise, because it would admit the possibil-
ity that τ does not reﬂect the full run up to the point
of declassiﬁcation, and subsequent high steps could
falsify P or the relation ϕ before the declassiﬁcation.
Deﬁnition 5.4 (revealed knowledge, R): For
state
predicate P , agreement formula ϕ, declass identiﬁer
ι, and σ ∈ TRACES , deﬁne R(σ, P &ϕ, ι) to be the
set
{s | ∃S · S is a pre-run from s with σ ∼ trace(S )
and actc(Slast ) is declass ι hB i
and (σlast , state(Slast )) |= P &ϕ }
Because each declass has a unique identiﬁer, ι deter-
mines the body B of declass ι hB i. The condition
“S is a pre-run” reﬂects that the attacker knows the
program text.
A straightforward consequence of the deﬁnitions is
that R(σ, P &ϕ, ι) ⊆ K(σ) for any σ, P , ϕ, ι. Our
security property says that in a step that extends trace
σ to σ u, if there is a gain of knowledge, i.e., a strict
inclusion K(σ u) ⊂ K(σ), then K(σ u) is no smaller
than R(σ, P &ϕ, ι).
program M under
Deﬁnition 5.5 (CGR, conditioned gradual release):
satisﬁes
The
conditioned gradual release for policy (Γ, Φ), iff the
following holds for all commands C , D , traces σ, and
states s, t , u: For any pre-run that generates σ and
ends with h C , t i, if h C , t i → h D , u i then
consideration
1) if the active command in C is stop or an
assignment to some variable x with Γ(x ) = L
then K(σ u) ⊇ K(σ)
2) if the active command in C is declass ι hx := ei
then there is some (ﬂow pre P &ϕ mod x ) in
Φ such that
(a) t |= P and
(b) R(σ, P &ϕ, ι) ⊆ K(σ u)
Note that conditions are only imposed on termination
steps,
low assignments, and declassiﬁcations. In a
declassiﬁcation step (item 2), u and t are identical
8
on all low variables except possibly x (by semantics).
Item 2(a) expresses that release only happens under
designated conditions. Item 2(b) captures the delimited
release constraint. (A minor variant, for which we miss
practical motivation, would also allow a declass step
under item 1.)
Owing to monotonicity of knowledge, the condition
in item 1 is equivalent to K(σ u) = K(σ). On the
other hand,
the inclusion in item 2(b) bounds the
knowledge K(σ u) and is not an equality in general:
Whereas R(σ, P &ϕ, ι) is what would be known if all
information allowed by ϕ was revealed, K(σ u) is what
is known upon observing σ u.
For
brevity,
Examples.
write
“declass ϕ hC i A(x )” to abbreviate declass ι hC i
tied to an evident ﬂowspec, ﬂow pre true&ϕ mod x .
Let variables l , l 0, . . . be low and h, h0, . . . high.
let
us
The ﬁrst example (from [4]) shows how knowledge
increases over time. The program satisﬁes CGR. (We
have worked out the other programs in [4, Sect. 2]
and our results conform to theirs).
declass A(h 6= 0) hl := (h 6= 0)i A(l );
if l then declass A(h1) hl 1 := h1i A(l 1)
The next example also satisﬁes CGR.
(4)
declass A(h ≥ 0) hl 0 := (h ≥ 0)i A(l 0);
declass A(h ≤ 0) hl 1 := (h ≤ 0)i A(l 1)
Next, we consider a program without declassiﬁcation
but with looping. This program violates CGR but is
secure according to gradual release [4] which is said
to be termination-insensitive.
(5)
l := true;
if h then l := false else C
where C is while true do skip.
Upon observing termination, the attacker learns that
h is true, but this is already known initially according
to [4] in which divergent runs are discarded by ﬁat.
(See their Def. 2 and their k↓.)
Our enforcement r´egime disallows declass in high
contexts, e.g., this version of the wallet example.
(6)
if h ≥ k then h := h − k ; declass hl := l + k i
It satisﬁes CGR for the intended ﬂowspec
ﬂow pre A(h ≥ k ) mod l
but it also satisﬁes CGR for ﬂow pre true mod l —
recall the “ﬁne points” in Sect. 2. An improved version
uses t : H as follows:
(7)
if h ≥ k then t := k else t := 0 ﬁ;
declass hl := l + t i; h := h − t
This satisﬁes CGR for ﬂow pre A(h ≥ k ) mod l
but does not
trivial policy,
ﬂow pre true mod l , that we would like to read
as allowing nothing about h to be released.
satisfy it
for
the
The state predicate part of a ﬂowspec precon-
dition is
treated as an ordinary program asser-
tion but also affects the relational (agreement) part
:= l + hi
of
satisﬁes ﬂow pre h=0 & A(l ) mod l but not
ﬂow pre A(l ) mod l .
the speciﬁcation, e.g., declass hl
Noninterference. One of the prudent principles [29]
is that the security property should reduce to nonin-
terference in the absence of declassiﬁcations. The pro-
gram M under consideration is called noninterferent
iff K(σ) = K(σ0) for all σ ∈ TRACES . That is,
knowledge after σ is the same as knowledge after the
singleton trace σ0 consisting of the initial state.
Lemma 5.6 (characterization of noninterference):
M is noninterferent iff the following holds for all
s, t , σ, C 0: If s ∼ t and σ ∈ Traces(s) then there is
some τ ∈ Traces(t ) such that σ ∼ τ .
Proposition 5.7: If C has no declassiﬁcations, then
it is noninterferent iff it satisﬁes CGR.
6. Enforcement r´egime
This section formalizes the static security checks, for
a ﬁxed main command M together with policy Γ, Φ.
One part of enforcement is checking validity of
ﬂowtriples (using the semantics of formulas, see (3)).
Deﬁnition 6.1 (valid): Say {P &ϕ} C {ϕ0} is valid
iff for all states s, t , if (s, t ) |= P &ϕ and h C , s i →∗
h stop, s 0 i and h C , t i →∗ h stop, t 0 i where s 0, t 0
are non-X states, then (s 0, t 0) |= ϕ0.
Validity is deﬁned in the sense of partial correct-
ness, but for our purposes we are only concerned
with ﬂowtriples for assignments, which always ter-
minate. A provably sound logic for checking validity
of ﬂowtriples, for the simple language here, is that
of Benton [8]. In fact our only triples are simple
assignments, for which self-composition provides au-
tomatic veriﬁcation [34] (in fact it provides automatic
veriﬁcation in the case of assignments of fresh objects,
or ﬁeld updates, as well [26]).
Another part of enforcement is type checking. Fig-
ure 3 gives straightforward typing rules to enforce the
baseline policy Γ. These enforce the usual no-read-up
and no-write-down conditions [37] but also disallow
declassiﬁcation under high branching conditions and
disallow assignments to high variables mentioned in
policies. We write Pvars for the set of x such that
9
Γ ` stop : L
Γ ` skip : H
Γ ` e : λ
λ ≤ Γ(x )
x /∈ Pvars
Γ ` x := e : Γ(x )
Γ(x ) = L
Γ ` C0 : λ0
Γ ` C1 : λ1
Γ ` declass ι hx := ei : L
Γ ` C0; C1 : λ0 u λ1
Γ ` e : L
Γ ` C : L
Γ ` while e do C : L
Γ ` C0 : λ0 Γ ` C1 : λ1 Γ ` e : λ λ ≤ λ0 u λ1
Γ ` if e then C0 else C1 : λ0 u λ1
Figure 3. Security typing rules; λ ranges over H, L.
Γ(x ) = H and x occurs in the precondition of some
ﬂowspec in Φ. (We could as well adopt the effect sys-
tem of [28] to prevent prior updates of high variables
mentioned in ﬂowspecs, which would give the minor
satisfaction of allowing example (7). But we prefer the
more complete approach advocated under “ﬁne points”
in Sect. 2.) For expressions, the notation Γ ` e : λ just
means the highest level of a variable in e is λ. The
rules deﬁne a judgement Γ ` C : λ that says command
C is secure and writes no variable of level below
λ. We must also prevent unbounded computations
with no observable steps (recall example (5)). We
choose a simple but restrictive way [36] for simplicity:
high loops are not allowed. Boudol [9] investigates
more sophisticated type systems for termination and
current program veriﬁcation technology can automate
termination checking in many cases [14].
Deﬁnition 6.2 (statically secure): We say M is stat-
ically secure provided there exists some mapping,
fspecs, from declass identiﬁers to sets of ﬂowspecs,
such that fspecs(ι) ⊆ Φ for all ι and moreover the
following three conditions hold:
1) (typechecking) Γ ` M : λ for some level λ.
2) (valid pre-assertion) For each declass ι hx := ei
in M , suppose the elements of fspecs(ι) are
ﬂow pre Pi &ϕi mod yi
from 0 to
is valid to assert P0 ∨ . . . ∨ Pk
k . Then it
immediately before declass ι hx := ei in M .
for i
3) (relational correctness) For each declass ι hx :=
ei and each (ﬂow pre Pi &ϕi mod yi ) in
fspecs(ι), we have that yi
is x and moreover
{Pi &ϕi } x := e {A(x )} is valid.
Here is a more precise statement of item 2. Let
PP = P0 ∨ . . . ∨ Pk . Let C[−] be the context in
which declass ι hx := ei occurs. That is, the main
program M has the form C[declass ι hx := ei]. Then
C[assert PP ; declass ι hx := ei] is a valid program
annotation in the sense of partial correctness.
In many examples, item 2 holds trivially, but in
general it may involve arbitrary assertions, e.g., iso-
lation of a data structure, the state of an authentication
system, etc. But any veriﬁcation system or method that
applies to Floyd-Hoare partial-correctness assertions