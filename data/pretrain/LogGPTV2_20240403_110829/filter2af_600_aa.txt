原文链接：
## 使用Qiling框架分析Dlink DIR-645中的缓冲区溢出(part I)
### 介绍
在过去的几周中，我一直在玩一个非常有趣的项目：[Qiling](https://www.qiling.io/)框架。我认为最好的学习方法就是边实践边学，因此我想使用该框架进行一些实践。
### 目的
我的目标是了解，复现和利用`Roberto
Palear`在2013年报告的漏洞`(CVE-2013-7389)`。现在，使用`Qiling`和一些免费工具，对该存在7年且影响多个`Dlink`路由器的漏洞进行分析。您可以在此处找到[公告](http://roberto.greyhats.it/advisories/20130801-dlink-dir645.txt)。
我将重点关注`“hedwig.cgi”`上存在的缓冲区溢出。对于熟悉`MIPS`和漏洞分析的人来说，这是非常基础的，但是由于我对`MIPS`几乎一无所知，所以这很有趣，并且可以学到很多东西。希望你们也会喜欢它。
### 总体思路
第一步是在确定要完成的工作：
  1. 理解造成漏洞的原因
  2. 复现漏洞
  3. 使用`Ghidra`进行补丁分析，清楚固件中的补丁
  4. 在`Qiling`上运行二进制文件时为其编写`exp`（可与硬件或`Qemu`一起使用）
  5. 学习如何使用`Free RE`工具
所以，我们从第一步开始。
#### 理解造成漏洞的原因
利用提供的有关受影响固件版本的信息，我在Google上搜索下载存在漏洞的[固件](http://ftp.dlink.ru/pub/Router/DIR-645/Firmware/)。
下载后，使用`binwalk`解固件。
解固件后，将位于`sbin`目录中的二进制文件`httpd`加载到`Ghidra` 中，并没有任何`Bug`的相关信息。
> 注：我的艰难过程得出的结论是：该错误位于接受HTTP连接的二进制文件中，让我们来看一下。
我再次阅读了该公告，并寻找`\*hedwig\*cgi`的二进制程序
    $ find . -name *hedwig*cgi
    ./htdocs/web/hedwig.cgi
    $ ls -larth ./htdocs/web/hedwig.cgi
    lrwxrwxrwx ./htdocs/web/hedwig.cgi -> /htdocs/cgibin
如你所看到的，`hedwig.cgi` 符号链接到二进制程序`cgibin`，我们来分析它！
我将二进制文件加载到`Ghidra`中，并查找了`hedwig.cgi`字符串：
我搜索了使用过该字符串的位置，并且跟进去
看一下反编译后的代码：
如您所见，二进制文件采用一个字符串并将其与我们感兴趣的字符串进行比较，如果相同，则将调用`hedwigcgi_main`函数。我认为在调用`cgibin`二进制文件时将字符串作为参数使用，但是字符串是从二进制文件本身的名称中获取的-因此对`hedwig.cgi`进行符号链接。为了解决这个问题，在`htdocs`目录中创建了相同的符号链接：
    squashfs-root/htdocs$ ls -larth hedwig.cgi
    hedwig.cgi -> cgibin
一开始我只是使用`Qiling`的`hook`地址功能快速修复了此问题，将程序流从第一条指令重定向到我感兴趣的函数。
    MAIN_ADDR = 0x0402770
    HEDWIGCGI_MAIN = 0x0040bfc0
    def redirect_to_hedwigcgi_main(ql):
        ql.reg.arch_pc = HEDWIGCGI_MAIN
        return
    ...
    ql = Qiling(path, rootfs, output = "debug", env=required_env)
    ql.hook_address(redirect_to_hedwigcgi_main, MAIN_ADDR)
    ...
#### 在hedwingcgi_main函数中寻找漏洞
一旦确定了存在漏洞的函数，便会使用研究人员提供的`PoC`和`metasploit`中可用的`exp`。它们都以（或多或少）相同的方式去触发漏洞，即进行`HTTP`请求：
    ...
    POST /hedwig.cgi
    cookie: uid=(PAYLOAD)
    ...
我快速搜索了`“uid”`字符串，我猜测在解析该字符串时会出现问题：
我检查了它的引用位置：
第一个和第二个引用位与`sess_get_uid`函数的内部，最后两个位于一个没有符号的函数中。我决定跟进去`sess_get_uid`函数，并检查该函数是否被`hedwigcgi_main`所调用。
另一个有意思的是我们可以使用`Qiling`模拟二进制文件函数的功能：
    import sys
    sys.path.append("..")
    from qiling import *
    MAIN = 0x0402770
    HEDWIGCGI_MAIN_ADDR = 0x0040bfc0
    SESS_GET_UID = 0x004083f0
    def my_sandbox(path, rootfs):
        ql = Qiling(path, rootfs, output = "none")
        ql.add_fs_mapper('/tmp', '/var/tmp')        # Maps hosts /tmp to /var/tmp
        ql.hook_address(lambda ql: ql.nprint("** At [main] **"), MAIN)
        ql.hook_address(lambda ql: ql.nprint("** At [hedwigcgi_main] **"), HEDWIGCGI_MAIN_ADDR)
        ql.hook_address(lambda ql: ql.nprint("** At [sess_get_uid] **"), SESS_GET_UID)
        ql.run()
    if __name__ == "__main__":
        my_sandbox(["_DIR645A1_FW103RUB08.bin.extracted/squashfs-root/htdocs/hedwig.cgi"], "_DIR645A1_FW103RUB08.bin.extracted/squashfs-root")
输出为：
    ...
    mprotect(0x77569000, 0x1000, 0x1) = 0
    mprotect(0x47ce000, 0x1000, 0x1) = 0
    ioctl(0x0, 0x540d, 0x7ff3ca30) = -1
    ioctl(0x1, 0x540d, 0x7ff3ca30) = -1
    ** At [main] **
    ** At [hedwingcgi_main] **
    write(1,7756d038,112) = 0
    HTTP/1.1 200 OK
    Content-Type: text/xml
    ...
我们可以看到执行到`_main_`，`_hedwigcgi_main_`但尚未到`_session_get_uid_`。看一下代码，找到进入此函数的条件。
    ...
      http_request_method = getenv("REQUEST_METHOD");
      if (http_request_method == (char *)0x0) {
        http_request_method = "no REQUEST";
      } else {
        is_http_POST = strcasecmp(http_request_method, "POST");
        if (is_http_POST != 0) {
          http_request_method = "unsupported HTTP request";
          goto invalid_http_method;
        }
    ...
来看下`Ghidra`生成的反编译代码，我们可以看到`hedwigcgi_main`函数会检查并在环境变量中寻找`REQUEST_METHOD`。如果该变量不包含`POST`值，将不会进入到该函数。
> 注意：假设在实际的硬件中，由于某种原因，这些环境变量已经被填充，因此不必检查谁在执行此操作。
使用`Qiling`可以轻松设置环境变量：
    ...
    required_env = {
            "REQUEST_METHOD": "POST",
        }
    ql = Qiling(path, rootfs, output = "none", env=required_env)
    ...
我们只需要传递一个字典，其中的键名是变量的名称和键值即为其值。
让我们尝试再次运行二进制文件，这次是在我们的伪环境中进行：
    ...
    mprotect(0x77569000, 0x1000, 0x1) = 0
    mprotect(0x47ce000, 0x1000, 0x1) = 0
    ioctl(0x0, 0x540d, 0x7ff3ca08) = -1
    ioctl(0x1, 0x540d, 0x7ff3ca08) = -1
    ** At [main] **
    ** At [hedwingcgi_main] **
    brk(0x0)
    brk(0x438000)
    open(/etc/config/image_sign, 0x0, 0o0) = 3
    ioctl(0x3, 0x540d, 0x7ff3c818) = -1
    brk(0x439000)
    read(3, 0x437098, 0x1000) = 27
    close(3) = 0
    ** At [sess_get_uid] **
    socket(1, 1, 0) = 3
    fcntl(3, 2) = 0
    ...
现在我们执行到了我们所感兴趣的点。看了一下函数之后，该函数应该检查了`HTTP COOKIE header`。
    cookie_value = getenv("HTTP_COOKIE");
然后会搜索`“ uid”`字符串；一旦找到，就会处理它的值。我猜测这个函数会处理包含在`cookie header`中多个值，如下所示：
    Cookie: Avalue=123;OtherVal=AAA;uid=TEST
看一下`exp`，我们可以看到发送包含`uid=(enough_data)`的`Cookie header`的`HTTP`请求就可以触发漏洞.
我们设置HTTP_COOKIE环境变量来触发该漏洞：
    ...
    buffer = "uid=%s" % (b"A" * 1041 + b"1111")
    required_env = {
        "REQUEST_METHOD": "POST",
        "HTTP_COOKIE"   : buffer
    }
    ...
这是脚本运行后的输出。为了清楚起见，省略了部分内容：
    ...
    ** At [main] **
    ** At [hedwingcgi_main] **
    ** At [sess_get_uid] **