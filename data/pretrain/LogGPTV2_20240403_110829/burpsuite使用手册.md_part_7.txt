最后指定位置3，选择Passwords
89
第八章 如何使用Burp Intruder
当我们开始攻击时，生成的Payload值如图所示
字符串替换（Character substitution）——顾名思义，此种Payload的类型是对预定义的
字符串进行替换后生成新的Payload。比如说，预定义字符串为ABCD，按照下图的替换
规则设置后，将对AB的值进行枚举后生成新的Payload。
90
第八章 如何使用Burp Intruder
生
成的Payload如下图所示，分别替换了上图中的a和b的值为4与8
91
第八章 如何使用Burp Intruder
大小写替换（Case modification）——对预定义的字符串，按照大小写规则，进行替
换。比如说，预定义的字符串为Peter Wiener，则按照下图的设置后，会生成新的
Payload。
生成的Payload如下
92
第八章 如何使用Burp Intruder
生成规则由上而下依次是：No change（不改变，使用原始字符串）、To lower
case（转为小写字母）、To upper case（转为大写字母）、To Propername（首字母大
写，其他小写）、To ProperName（首字母大写，其他不改变），在实际使用中，可以
根据自己的使用规则进行勾选设置。
递归grep （Recursive grep）——此Payload类型主要使用于从服务器端提取有效数据的
场景，需要先从服务器的响应中提取数据作为Payload，然后替换Payload的位置，进行
攻击。它的数据来源了原始的响应消息，基于原始响应，在Payload的可选项设置
（Options）中配置Grep规则，然后根据grep去提取数据才能发生攻击。比如，我在
grep extract 中设置取服务器端的EagleId作为新的Payload值。
点击上图的【OK】按钮之后，完成了Payload的设置。
93
第八章 如何使用Burp Intruder
当我发起攻击时，Burp会对每一次响应的消息进行分析，如果提取到了EagleId的值，则
作为Payload再发生一次请求。操作图如下：
上图中请求序号为偶数的消息的Payload都是上一次服务器端响应的报文中的EagleId的
值。
94
第八章 如何使用Burp Intruder
不合法的Unicode编码（Illegal Unicode）—— 在payloads里用指定的不合法Unicode 编
码替换字符本身，从这些Payload列表里产生出一个或者多个有效负荷。在尝试回避基于
模式匹配的输入验证时，这个有效负荷会有用的，例如，在防御目录遍历攻击时../和..序
列的期望编码的匹配。其配置界面如下：
上图中的配置选项主要用来控制不合法编码的生成，各项的含义如下： maximum
overlong UTF-8 length Unicode 编码允许最多使用 6 字节表示一个字符。使用一种类型
就可以正确地表示出(0x00-0x7F) Basic ASCII 字符。然而，使用多字节的Unicode 方案
也能表示出它们(如， ”overlong”编码)。下拉菜单用来指定是否使用超长编码，以及应该
设定的最大使用长度。 Illegal UTF-8 continuation bytes 当选择的最大超长 UTF-8 长
度为 2 字节以上，这个选项是可用的。 Do illegal UTF-8 当使用多字节编码一个字符
时，第一个字节后面的字节应该用 10XXXXXX 这样的二进制格式，来指出后续的字节。
然而，第一个字节里最有意义的位会指出后面还有多少后续字节。因此，Unicode 编码
例程会安全地忽略掉后续字节的前 2 位。这就意味着每个后续字节可能有 3 个非法变
种，格式为 00XXXXXX， 01XXXXXX 和 11XXXXXX。如果选中这个选项，则非法
Unicode 有效负荷源会为每个后续字节生成 3 个附加编码。 Maximize permutations in
multi-byte encodings 如果选择的最大超长 UTF-8 长度为 3 字节以上，并且选中”
illegal UTF-8 ”这个选项可用。如果”Maximize permutations in multi-byte encodings”没被
选中，则在生产非法变种时，不合法 Unicode 有效负荷源会按顺序处理每个后续字节，
为每个后续字节产生 3 个非法变种，并且其他的后续字节不会改变。如果”Maximize
permutations in multi-byte encodings”被选中了，不合法 的Unicode 有效负荷源会为后续
字节生成所有的非法变种排序 。 如，多个后续字节会同时被修改。在目标系统上回避高
级模式匹配控制时，这个功能就会很有用。 Illegal hex 这个选择基本上一直可用。当使
用超长编码和后续字节的非法变种(如果选中)生成非法编码项列表时，通过修改由此产生
的十六进制编码可能会迷惑到某种模式匹配控制。十六进制编码使用字符 A—F 代表十进
制 10—15 的值。然而有些十六进制编码会把G解释为 16， H 为 17，等等。因此 0x1G
会被解释为 32。另外，如果非法的十六进制字符使用在一个 2 位数的十六进制编码的第
一个位置，则由此产生的编码就会溢出单个字节的大小，并且有些十六进制编码只使用
了结果数字的后 8 个有效位，因此 0x1G 会被解码为 257，而那时会被解释为 1。每个合
95
第八章 如何使用Burp Intruder
法的 2 位数的十六进制编码有 4—6 种相关的非法十六进制表示，如果使用的是上面的编
码，则这些表示会被解释为同一种十六进制编码。如果”illegal hex”被选中，则非法
Unicode 有效负荷源会在非法编码项列表里，生成每个字节的所有可能的非法十六进制
编码。 Maximize permutations in multi-byte encodings 如果选中的最大超长 UTF-8
长度为 2 字节以上并且“illegal hex”也被选中，则这个选项可用。如果Maximize
permutations in multi-byte encodings”没被选中，在生成非法十六进制编码时，非法
Unicode 有效负荷源会按顺序处理每个字节。对于每个字节，会生成 4—6 个非法十六进
制编码，其他的字节不变。如果Maximize permutations in multi-byte encodings”被选
中，则非法 Unicode 有效负荷源会为所有的字节，生成非法十六进制的所有排序。如，
多个字节会被同时修改。在目标系统上回避高级模式匹配控制时，这个功能会非常有
用。 add % prefix 如果选中这个选项，在产生的有效负荷里的每个 2 位数十六进制编码
前面，都会插入一个%符号。 Use lower case alpha characters 这个选项决定了是否在
十六进制编码里使用大小写字母。 Total encodings 这个选项为会产生的非法编码数量
放置了一个上界，如果大量使用超长编码或者选中了最大列表，这个选项会很有用，因
为那会生成大量的非法编码。 Match / replace in list items 这个选项用户控制Payload
列表中的字符串，它是由匹配字符（Match character）和替换字符编码（Replace with
encodings of ）来成对的控制Payload的生成。
当攻击执行时，这个有效负荷源会迭代所有预设项列表，在非法编码集合里，每个预设
项替换每个项里的指定字符的所有实例。
字符块（Character blocks）——这种类型的Payload是指使用一个给出的输入字符串，
根据指定的设置产生指定大小的字符块，表现形式为生成指定长度的字符串。它通常使
用了边界测试或缓冲区溢出。
96
第八章 如何使用Burp Intruder
Base string 是指设置原始字符串，Min length是指Payload的最小长度，Max length 是指
Payload的最大长度，Step是指生成Payload时的步长。如上图的配置后，生成的Payload
如下图所示：
数字类型（Number）——这种类型的Payload是指根据配置，生成一系列的数字作为
Payload。它的设置界面如下：
Type表示使用序列还是随机数，From表示从什么数字开始，To表示到什么数字截
止，Step表示步长是多少，如果是随机数，则How many被激活，表示一共生成多少个
97
第八章 如何使用Burp Intruder
随机数。Base表示数字使用十进制还是十六进制形式，Min integer digits 表示最小的整
数是多少，Max integer digits表示最大的整数是多少，如果是10进制，则Min fraction
digits 表示小数点后最少几位数，Max fraction digits表示小数点后最多几位数。
日期类型（Dates）——这种类型的Payload是指根据配置，生成一系列的日期。界面如
下 其
设置选项比较简单，没有什么特别复杂的，不再赘述。至于日期格式，可以选择Burp自
己提供的样例格式，也可以自定义，自定义的时候，格式的填写形式如下表所示 | 格式 |
样例| |--------|--------| | E | Sat | | EEEE | Saturday | | d | 7 | | dd | 07 | | M | 6 | | MM | 06 | |
MMM | Jun | | MMMM| June | | yy| 16 | | yyyy| 2016 |
暴力字典（Brute forcer）——此类Payload生成包含一个指定的字符集的所有排列特定长
度的有效载荷，通常用于枚举字典的生成，其设置界面如下：
Character set 表示生成字典的数据集，从此数据集中抽取字符进行生成。Min length表
示生成Payload的最小长度，Max length表示生成Payload的最大长度。
空类型（Null payloads）——这种负载类型产生的Payload，其值是一个空字符串。在攻
击时，需要同样的请求反复被执行，在没有任何修改原始请求的场景下此Payload是非常
有用的。它可用于各种攻击，例如cookie的序列分析、应用层Dos、或保活会话令牌是在
其它的间歇试验中使用。
98
第八章 如何使用Burp Intruder
在配置Payload生成方式时，它有两个选项，我们可以指定生成（Generate）多少
Payload，也可以设置为一直持续攻击（Continue indefinitely）
字符frobber（Character frobber）——这种类型的Payload的生成规律是：依次修改指定
字符串在每个字符位置的值，每次都是在原字符上递增一个该字符的ASCII码。它通常使
用于测试系统使用了复杂的会话令牌的部件来跟踪会话状态，当修改会话令牌中的单个
字符的值之后，您的会话还是进行了处理，那么很可能是这个令牌实际上没有被用来追
踪您的会话。其配置界面如图：
执行后生成的Payload如下图所示：
99
第八章 如何使用Burp Intruder
Bit翻转（Bit flipper）——这种类型的Payload的生成规律是：对预设的Payload原始值，
按照比特位，依次进行修改。它的设置界面如下图：
其设置选项主要有：Operate on 指定是对Payload位置的原始数据进行Bit翻转还是指定
值进行Bit翻转，Format of original data 是指是否对原始数据的文本意义进行操作，还
是应该把它当作ASCII十六进制，Select bits to flip是指选择翻转的Bit位置。 您可以配
置基于文本意义进行操作，或基于ASCII十六进制字符串进行翻转。例如，如果原始值
是“ab”，基于文本意义的翻转结果是：
`b
cb
eb
ib
qb
Ab
!b
¡b
ac
a`
af
aj
ar
aB
a"
a¢
如果是基于ASCII十六进制字符串进行翻转，则结果是：
100
第八章 如何使用Burp Intruder
aa
a9
af
a3
bb
8b
eb
2b
这种类型的Payload类似于字符frobber，但在你需要更细粒度的控制时是有用的。例如，
会话令牌或其他参数值使用CBC模式的块密码加密，有可能系统地由前一密码块内修改
Bit位以改变解密后的数据。在这种情况下，你可以使用的Bit 翻转的Payload来确定加密
值内部修改了个别bit位后是否对应用程序产生影响，并了解应用程序是否容易受到攻
击。关于加密模式可以点击阅读这篇文章做进一步的了解。
用户名生成器（Username generator）这种类型的Payload主要用于用户名和email帐号
的自动生成，其设置界面如下图：
101
第八章 如何使用Burp Intruder
如上图所示，我设置了原始值为PI:EMAIL,然后执行此Payload生成器，其生
成的Payload值如图所示
ECB 加密块洗牌（ECB block shuffler）——这种类型的Payload是基于ECB加密模式的