is
– e.G ⊆ Gγ is the set of groups that are deﬁned
in this NGS.
– e.T g ⊆ T g is the set of group tags that are used
in this NGS.
– The function e.gtag : Sγ −→ e.T g assigns a
unique tag to each subject in the current state.
– e.nt g is a group tag in e.T g; it determines when
a new subject is added to the state, which tag is
assigned to that subject. That is, if a subject s
is added, then e.gtag[s] would be set to e.nt g.
– e.admin points to one NGS in Eγ; it identiﬁes
an NGS in the current state as the administrative
group set of the NGS e; e.admin could be e, in
which case e is the administrative group set for
itself.
– e.patterns is a function mapping each group in
e.G to a (possibly empty) set of group patterns.
Each group pattern is a pair where the ﬁrst ele-
ment is either a subject in the current state or a
special symbol ∗u, and the second element is a
group tag in e.T g. In other words, the set of all
group patterns that can be used in e, denoted by
e.P g, is (Sγ ∪ {∗u}) × e.T g, and the signature
of e.patterns is e.G −→ 2e.P g, where 2e.P g
denote the powerset of e.P g.
For any group g ∈ e.G, e.patterns[g] gives a
set of patterns for determining memberships of
Intuitively, the label h∗u, tgi is in
the group.
e.patterns[g] means that any subject who is as-
signed (via the e.gtag function) the group tag tg
is a member of the group; and the label hs, tgi
is in e.patterns[g] means that the subject s is a
member of the group if it is assigned the group
tag tg.
– e.GRS is a set of group relabelling rules, each
has the form Relabel (tg
2) = g, where
1, tg
2 ∈ e.T g are two
Relabel is a keyword, tg
1, tg
group tags used in this NGS, and g is a group
deﬁned in the administrative group set e.admin
(i.e., g ∈ e.admin.G). The role of a mem-
ber of e.GRS is explained in the following dis-
cussion of state-change rules in the context of
group tag relabel.
An additional constraint on the state γ is that each
group is deﬁned in exactly one NGS and each group
tag can be used in at most one NGS, i.e.,
∀e1 ∈ Eγ∀e2 ∈ Eγ ( e1.G ∩ e2.g = ∅ ∧
e1.T g ∩ e2.T g = ∅ )
the
deﬁne
following
We
function
members γ[ ] : Gγ −→ Sγ such that members γ[g]
gives the set of all subjects that are members of the
group g. To determine whether a subject s is in
auxiliary
9
members γ[g], we ﬁrst determine the unique NGS e,
such that g ∈ e.G. Now, s ∈ membersγ[g] if and
only if the tag tg assigned to s (via e.gtag) satisﬁes
the condition that at least one of the two group labels
hs, tgi and h∗u, tgi are in the patterns for g, i.e.,
∃ tg ∈ e.T g ( e.gtag(s) = tg ∧
( hs, tgi ∈ e.patterns[g] ∨
h∗u, tgi ∈ e.patterns[g] ) )
As an example, consider an NGS e where
= { gemp, gmgr , gexe }
= { Boss, Worker }
= Boss
= Boss
= Worker
= Worker
= e
e.G
e.T g
e.gtag[s1]
e.gtag[s2]
e.gtag[s3]
e.ntg
e.admin
e.patterns[gexe] = { hs1, Bossi }
e.patterns[gmgr ] = { h∗u, Bossi }
e.patterns[gemp] =
e.GRS
=
{ h∗u, Bossi,h∗u, Workeri }
{ Relabel(W orker, Boss) = gmgr
Relabel (Boss, W orker) = gexe }
In this NGS, three groups are deﬁned: executives
(gexe), managers (gemp), and employees (gmgr).
There are two tags: Boss and Worker. There are
three subjects; s1 and s2 are assigned the tag Boss
and s3 is assigned the tag Worker. The new subject
tag is Worker, so each newly added subject will au-
tomatically be assigned the tag Worker. The admin-
istrative NGS is e itself. According to the patterns,
members of the three groups are as follows:
membersγ[gexe] = {s1}
membersγ[gmgr ] = {s1, s2}
membersγ[gmgr ] = {s1, s2, s3}
The group relabeling rules are such that managers
can change a subject’s tag from Worker to Boss and
executives can change a subject’s tag from Boss to
Worker.
State-Change Rules, Ψ There is a single state tran-
sition rule ψ in this scheme; ψ consists of six actions
that can result in state changes. These actions are men-
tioned in Section 3.4 of [27] without precise deﬁnitions.
(We break up the “Relabel an object” operation in [27]
into two relabelling actions.) We describe the actions
and their effects when applying them to a state γ =
hSγ, Oγ, Rγ, Gγ, Lγ, labelγ, authγ, ORSγ, Eγi. We use
γ0 to denote the state after the change.
1. create object(s, o, (cid:99) = hs1, to
1i): the subject s cre-
ates the object o and assigns the object label (cid:99) to the
object o.
10
This action succeeds when s ∈ Sγ, o 6∈ Oγ, (cid:99) ∈ Lγ
and the subject s has the distinguished right wr on the
object label (cid:99), i.e., s ∈ members γ[authγ((cid:99), wr)].
Effects of the action are Oγ0 = Oγ ∪ {o} and
the function label is extended so that labelγ0 (o) =
1i.
hs1, to
2. create label(s, (cid:99) = hs, t1i, g1, g2,··· , gk), where
k = |Rγ| is the number of rights in γ: the subject s
creates the new object label (cid:99), and assigns the groups
g1, g2,··· , gk to have the rights over (cid:99), .
This action succeeds when s ∈ Sγ, (cid:99) 6∈ Lγ, the sub-
ject in (cid:99) is s, and g1,··· , gk ∈ Gγ.
Let
The effects of
r1, r2,··· , rk be the k rights in Rγ. Then Lγ0 =
Lγ ∪ {(cid:99)} and the function auth is extended such that
authγ0 ((cid:99), ri) = gi for 1 ≤ i ≤ k.
this action are follows.
3. create subject(s, s0): the subject s creates a new sub-
ject s0.
This action succeeds when s ∈ Sγ and s0 6∈ Sγ.
The effects of this action are Sγ0 = Sγ ∪{s0} and for
every NGS e ∈ Eγ, e.gtag is extended so that in γ0,
e.gtag(s0) = e.nt g.
4. object relabel(s, (cid:99)1 = hs1, t1i, (cid:99)2 = hs2, t2i):
the
subject s relabels objects having label (cid:99)1 to have the
label (cid:99)2.
This action succeeds when the ﬁrst relabelling rule
in the object relabelling rule sequence ORSγ that
matches ((cid:99)1, (cid:99)2) is rl(p1, p2) = h and s ∈ value[h]
(the function value[ ] is deﬁned below). The rule
rl(p1, p2) = h matches ((cid:99)1, (cid:99)2) when p1 matches (cid:99)1
and p2 matches (cid:99)2 at the same time. When the pat-
tern h∗u,∗i matches the label hs1, t1i, we say that ∗u
is uniﬁed with the subject s1. Note that when ∗u oc-
curs more than one times in p1, p2, they should be
uniﬁed with the same subject.
Recall that h maybe a group g, a subject s0, or
one of the four sets: {},{∗},{∗u},{∗w}. The
function value is deﬁned as follows: value[g] =
members γ[g]; value[s0] = {s0}; value[{}] = ∅,
value[{∗}] = Sγ; value[{∗u}] is the subject that is
uniﬁed with ∗u.
Consider the following ORSγ.
rl(h∗u, t1i, hs1,∗i) = g1
rl(hs1,∗i, h∗u, t2i) = {∗}
rl(h∗u,∗i, h∗u,∗i) = {∗u}
rl(h∗u,∗i, h∗w,∗i) = {}
The action object relabel(s,hs2, t1i,hs1, t2i) would
match the ﬁrst relabelling rule, and it would suc-
the group g1.
ceed when s is a member of
The action object relabel(s,hs1, t1i,hs2, t2i) would
match the second relabelling rule and always suc-
ceeds. The action object relabel(s,hs2, t2i,hs2, t1i)
would match the third relabelling rule and fail,
because ∗u is uniﬁed with s2.
The action
object relabel(s,hs2, t2i,hs1, t1i) would match the
fourth relabelling rule and fail.
The effect of the relabel action is in the function
label. For every object o such that labelγ[o] = (cid:99)1,
in the new state, labelγ0 [o] = (cid:99)2.
5. group tag relabel(s, s0, tg
1, tg
2): the subject s relabels
1 to tg
2.
the group tag for the subject s0 from tg
This action succeeds when there is an NGS e ∈ Eγ
such that tg
2 are used in e, the subject s0 has the
1 and tg
1 in e, there is a corresponding group rela-
group tag tg
belling rule in e.GRS, and s is a member of the group
that can use the relabelling rule. More precisely, the
action succeeds when
∃e ∈ Eγ ( e.gtag[s0] = tg
1, tg
1 ∧
2) = g” ∈ e.GRS ∧
“Relabel(tg
s ∈ members γ[g] )
1 and tg
Note that the tags tg
2 can appear only in one
NGS and they must appear in the same NGS for the
action to succeed. The effect of this action is such
that the function e.gtag is changed such that in γ0,
2.
e.gtag[s0] = tg
i.e.,
labels, or groups is deﬁned.
6. create ngs(s, e): the subject s creates a new NGS e.
To perform this action, one must provide the com-
plete description of a new NGS e,
the 7-
tuple he.G, e.T g, e.gtag, e.nt g, e.admin, e.patterns,
e.GRSi. For this action to succeed, the groups de-
ﬁned in e and the group tags in e must be new, i.e.,
they do not appear in any existing NGS’s in γ.
The effects are that Gγ0 = Gγ ∪ e.G and Eγ0 =
Eγ ∪ e.
Given the above state transition rule, we make the
following observations. No removal of subjects, ob-
jects,
Given a state
hSγ, Oγ, Rγ, Gγ, Lγ, labelγ, authγ, ORSγ, Eγi, Sγ (the
set of subjects), Oγ (the set of objects), and Gγ (the
set of groups) may change as a result of create subject,
create object, and create label, respectively. Rγ, the set
of rights, is ﬁxed for the system and does not change. Gγ,
the set of groups, may change when a new NGS is added
by the create ngs action. The function labelγ: Oγ −→ Lγ
is extended when a new object is added and is changed
when an object relabelling action object relabel happens.
The function authγ is extended when a new object label
is created; existing assignments do not change. ORSγ, the
object relabelling rule sequence, always stay the same. Eγ
is extended when a new NGS is added.
11
5.2. Encoding a simple DAC scheme in the
Solworth-Sloan scheme
In this section, we encode a relatively simple DAC
scheme in the Solworth-Sloan scheme. The DAC scheme
we consider is a sub-scheme of the Graham-Denning
scheme. It is called Strict DAC with Change of Owner-
ship (SDCO) and is one of the DAC schemes discussed
by Osborn et al. [21]. Our construction is based on com-
ments by Solworth and Sloan [27] on how various DAC
schemes can be encoded in the Solworth-Sloan scheme.
As the presentation in that paper is not detailed, we of-
fer a more detailed construction. Our construction lets us
assess the utility of the Solworth-Sloan scheme in encod-
ing SDCO. After we present the encoding, we discuss its
deﬁciencies from the standpoints of correctness, and the
overhead it introduces.
Strict DAC with Change of Ownership (SDCO) As
we mention above, SDCO is a sub-scheme of the Graham-
Denning scheme (see Section 4.1). In SDCO, there is a
distinguished right, own, but no control right. Also, there
are no rights with the copy ﬂag. The state-change rules
in SDCO are the commands grant r (for each r ∈ Rψ),
delete r (for each r ∈ Rψ), grant own, create object and
create subject. We do not consider commands to destroy