the reason that CPU-bound solutions like Amnesia and Copker suggest
modifying NMI handlers to immediately clear all sensitive keys [30, 73].
Technically, TRESOR and PRIME are subject to similar attacks. However,
in Mimosa, the private key and intermediate states are automatically cleared
once NMIs happen, eliminating the need to modify NMI handlers.
1313
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:11 UTC from IEEE Xplore.  Restrictions apply. 
key, we used the bit string matching program bgrep to
search for (pieces of) the known keys. The image had no
matching of both the AES and RSA keys (including p, q,
d and other CRT elements). We have never found a binary
sequence that overlaps for more than 3 bytes with any key.
On the contrary, when the same experiment was conducted
on Mimosa No TSX, we got a great deal of copies of both
the AES master key and the private keys. They came from
three sources. First, Kdump dumped the register states of
all the cores when the system crashed. Second, interrupted
threads left the decrypted keys uncleared. Third, the process
control blocks of the threads contained the register states as
a result of context switching.
We did not launch a cold-boot attack or probe the bus
to validate that these is no data leakage to the RAM chips.
However, according to Intel Architectures Optimization Ref-
erence Manual [39] (Section 12.1.1), when cache eviction
in the write-set happens, transaction will abort immediately,
thus modiﬁed data are discarded inside L1D caches. Note
that the plaintext private keys and other sensitive interme-
diate states are in the write-set, because they are generated
only after the transaction starts. Therefore, sensitive data
would appear nowhere other than L1D caches. We would
also like to argue that this character is a necessary require-
ment to correctly implement Intel TSX. If a modiﬁed cache
line is evicted to some place outside the boundary of Intel
TSX, its value will be available to other components – an
obvious contradiction to the nature of transactional memory.
B. Remaining Attack Surface
Mimosa relies on Intel TSX to ensure the conﬁdentiality
of the protected RSA private key in the protected computing
phases. However, the CPU cache which is the base of TSX
is constrained in size and shared among all cores. This
might lead to denial of service (DoS) attacks. Most Intel
CPUs implement 8-way set associative L1D cache, so 9
memory addresses in the write-set mapping to the same
cache set will abort the transaction. Moreover, Intel does
not guarantee all cache lines of a cache set can be attributed
to the transactional execution. Besides, a process with very
intensive memory accesses may halt the Mimosa service too,
because there is a big chance that this process will evict
the cache lines that Mimosa is occupying due to shared L3
caches.
We evaluated how seriously a memory-intensive program
would impact Mimosa, by launching the memory test of
the Geekbench 3 benchmark concurrently with Mimosa.
In this experiment, 4 kinds of STREAM workloads were
performed on all CPU cores, resulting in 10.3 GBytes
memory transferred per second. The machine (clean envi-
ronment) supports a maximum transfer rate of 13.7GB/s.
The average performance of Mimosa fell to 137 decryptions
per second. That is a degradation of 77.0%, compared with
the original result of 596 per second in Table I. Meanwhile,
performance of Mimosa No TSX degraded 42.0% in the
same experiment; and the degradation of original PolarSSL
is 44.8%. Therefore, only about 30% of the performance
degradation was caused by the use of TSX in Mimosa and
aborts due to intensive memory access, and about 40%
was by the resource occupation of STREAM. We also
measured the abort cycle ratio in Mimosa – it raised to
52% under the “DoS attacks”, compared with less than 5%
in normal settings (see Section V-A). We have tried other
different memory-intensive programs, and all of them have
less performance impact. Note that, even in this under-attack
case, Mimosa has performance advantage over the existing
CPU-bound solutions (PRIME and Copker, see Table II).
Attackers might attempt to exploit side channels to com-
promise private keys. Cache-based side channels [8, 13] do
not exist in Mimosa, because AES-NI is free of timing at-
tacks [41] and the RSA computations are performed entirely
in caches. Other timing attacks [6, 15] against PolarSSL used
in the current Mimosa implementation, can be prevented by
RSA-blinding [15], which will be in our future work.
Implemented as a kernel module, Mimosa needs to as-
sume the integrity of OS kernel, so integrity protections are
required to work complementarily. While the kernel integrity
solutions protect the Mimosa service binaries from being
modiﬁed, Mimosa prevents the memory disclosure attacks
that do not violate the integrity of executable binaries. Most
existing OS integrity solutions are based on virtualization
such as SecVisor [70], SBCFI [64], OSck [38] and Lares
[63], while kGuard [47] augments the kernel with inline
guards. Integrating Mimosa with these solutions will be also
included in our future work.
TRESOR-HUNT [11] exhibits an advanced DMA attack
that injects malicious codes into OS kernel (i.e., breaks
the integrity of kernel) and then accesses the AES key in
debug registers. Fortunately, this attack can be countered by
conﬁguring IOMMU [76], monitoring bus activities [75],
or leveraging the system management mode (SMM) [85].
Laser scan, another physical memory disclosure attack, was
proposed to read information in power-on smart cards [68].
But this method needs to depackage the chip to remove metal
layers, and requires the chip be halted in the target state (i.e.,
no update operation during the scan). So it is not a threaten
of Mimosa.
C. Comparison
Currently, there are three implementations of asymmetric
cryptosystems that are resistant to cold-boot attacks, namely,
PRIME [29], Copker [30] and the proposed work. These
solutions adopt the same key-encryption-key structure, in
which an AES master key is stored in privileged CPU regis-
ters throughout the operation of the system. The private key
is decrypted on demand to perform RSA decryption or sign-
ing. Table II summaries the properties of three approaches in
terms of OS security assumption, efﬁciency and private-key
1414
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:11 UTC from IEEE Xplore.  Restrictions apply. 
Table II: Comparison of the RSA Implementations against Cold-boot Attacks
OS Security Assumption
Efﬁciency
Master Key Protection
Private Key Protection Compared with PolarSSL
Solution
Mimosa
PRIME
Copker
X+D
X+D
X+D
X
X+A
X+A+R
Comparable
†
Approximately 1/9
‡
Approximately 1/4
Private-Key Computation
Implementation Language
C
Assembly
C
X: The integrity of executable binary in kernel.
A: Atomicity guarantee of private-key computations.
†: It is drawn directly from [29].
‡: It is about the number of separate cache sets divided by that of cores [30]. Intel Core i7 has 4 cores with shared L3 caches.
D: No illegal access to debug registers.
R: No illegal memory read operation.
computation implementation. Hardware assumptions are not
shown in this Table, such as Intel TSX, cache-ﬁlling modes,
CPU privilege rings, etc.. Firstly, TRESOR [56] is used in
all three solutions to protect the AES master key, the security
of which depends on the integrity of the kernel executable
without interfaces to debug registers. However, the private
key protections are very different:
• PRIME uses AVX registers to store private keys, and
requires atomicity guarantee of private-key computa-
tions; otherwise, the unprivileged AVX registers may be
accessed by attackers who interrupts the computations.
• Copker depends on both process isolation from OS
as well as atomicity guarantee of private-key compu-
tations, because illegal memory read operations will
synchronize the private key to RAM chips when it is
decrypting or signing messages.
• Mimosa only assumes the kernel
integrity, and its
atomicity is guaranteed by hardware but not OS.
Secondly, with the hardware support from Intel TSX, Mi-
mosa signiﬁcantly outperforms PRIME and Copker. Finally,
because the private-key computation is implemented in C-
language, it is easier for Mimosa and Copker to support
other asymmetric algorithms such as DSA and ECDSA.
VII. RELATED WORK
A. Attack and Defense on Cryptographic Keys
As veriﬁed by the experiments [35], more copies of cryp-
tographic keys in memory result in a greater leakage risk.
Several works have been done to minimize the occurrence
of sensitive data. Secure deallocation [18] erases data either
on deallocation or within a short and predictable period,
reducing the copies of sensitive data in unallocated memory.
Harrison et al. provide ways to keep only one copy of
cryptographic keys in allocated memory [35]. In [61], a
1024-bit RSA private key is scrambled and dispersed in
memory, but re-assembled in x86 SSE XMM registers when
computations are needed, to achieve no copy of private keys
in memory. To avoid sensitive data being leaked to disks,
Scrash [14] removes sensitive data from crash reports in the
case of program failures. Mimosa follows the same spirit
that the sensitive cryptographic keys shall appear in minimal
locations and minimal periods, and we employ HTM to
1515
enforce this principle, ensuring that the private keys are
cleared after computations and appear only in CPU caches.
More importantly, Mimosa reactively clears the sensitive
data whenever an attack attempt is detected.
AESSE [55], TRESOR [56] and Amnesia [73] are pro-
posed to prevent
the cold-boot attack [32] on full-disk
encryption, by storing AES keys in registers only. This
CPU-bound approach is extended to the asymmetric crypto-
graphic algorithms that require much more storages. Using
the AES key protected by TRESOR as a key-encryption
key, PRIME [29] implemented the RSA computations in
AVX registers while Copker [30] did it in caches. Mimosa
implements the RSA algorithm against cold-boot attacks, but
provides much better performance than PRIME and Copker.
The register-based AES implementations such as TRE-
SOR can also prevent read-only DMA attacks [7, 12, 76] that
passively read from memory. Advanced DMA attacks [11]
can exploit malicious ﬁrmware to actively write injected
codes into the memory space of OS kernel, and then
access the keys in registers. This advanced DMA attack
can be detected or restricted by conﬁguring IOMMU [76],
monitoring bus activities [75], leveraging SMM [85], or the
timed challenge-response protocol [51].
PixelVault uses GPUs as the secure container for cryp-
tographic computing [81]. All sensitive data and executable
binaries are loaded into the caches and registers of GPUs
in the initialization phase, so (malicious) binaries on CPUs
cannot access these data and binaries on GPUs. Therefore,
it does not require the integrity of OS kernel except during
initialization. PixelVault requires GPUs dedicated for cryp-
tographic computing; however, Mimosa dynamically builds
secure containers within CPUs, and releases resources when
not in-use.
Intel Software Guard eXtensions (SGX) [44] plan to
provide a hardware-enabled secure container that is isolated
from other processes. Conﬁdentiality and integrity of the
protected process will be maintained even in the presence
of privileged malware. Although SGX is not commercially
ready, it shows the same tendency and potential as TSX that
secure systems can be built on top of hardware features.
There are cryptographic methods that mitigate the attacks
on cryptographic keys. Threshold cryptography [26] splits
the key into multiple parts to withstand partial disclosure.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:11 UTC from IEEE Xplore.  Restrictions apply. 
Leakage-resilient cryptography [4, 5] is secure against mem-
ory attacks where the adversary measures a large fraction of
the bits of keys. However, these solutions become useless
if the attackers compromise all bits of the key step by
step. In order to prevent cross-VM side-channel attacks
[86], Hermes [62] applied threshold cryptography to build
a cryptographic system on several virtual machines in the
cloud, each of which hold a partition of the private key. The
key is re-shared periodically in Hermes to invalidate the
compromised partitions. White-box cryptography [19, 20]
plants a ﬁxed key into the algorithm implementation. Even if
an attacker obtains the entire memory, he or she cannot ﬁnd
out the key. However, white-box cryptography has efﬁciency
limits and is not applicable to asymmetric cryptographic
algorithm so far.
B. Transactional Memory Implementation
Various transactional memory solutions have been pro-
posed, from hardware-based solutions [2, 27, 33, 40, 45, 54,
82] to software transactional memory (STM) [16, 34, 60, 71]
and hybrid schemes [25, 49]. HTM pushes transactional
memory primitives into hardware, hence minimizes perfor-
mance overheads greatly.
HTM usually temporarily stores updated memory in CPU-
bound caches or store buffers [2, 27, 33, 45, 82] before
commit, and discards the modiﬁed data on aborts. Another
hardware solution, LogTM [54] updates memory directly
and saves the unmodiﬁed value in a per-thread memory log;
on aborts, state is restored by inspecting through the logs.
C. Transactional Memory Application
Transactional memory boosts thread-level parallelism, and
is applied in different services such as game servers [53, 87]
and database systems [46] to improve performance.
By maintaining security-relevant shared resources in the
read/write-sets of Haskell STM [34], TMI enforces autho-
rization policies whenever such a resource is accessed [9,
10]. TMI and Mimosa depend on transactional memory to
inspect all accesses to sensitive resources. TMI enforces
authorization on every access, while Mimosa ensures con-
ﬁdentiality by clearing sensitive keys once any illegal read
operation occurs.
TxIntro [52] is another application of Intel TSX. It lever-
ages the strong atomicity of HTM to synchronize virtual
machine introspection (VMI) and guest OS execution, so
that VMI is performed more timely and consistently. TxIntro
and Mimosa use Intel TSX in very different ways. TxIntro
monitors the read-set to detect concurrent update operations
that cause inconsistence, while Mimosa monitors the write-
set to detect illegal concurrent read operations.
Transactional memory improves the multi-thread support
in dynamic binary translation to guarantee correct execution
of concurrent threads [21]. In addition, the abstraction of
transactional memory is extended to kernel extensions [69]
and code functions [72], and these transaction semantics are
used to recover a system from failures.
VIII. CONCLUSION
We present Mimosa, an implementation of the RSA cryp-
tosystem with substantially improved security guarantees on
the private keys. With the help of HTM, Mimosa ensures that
only Mimosa itself is able to access plaintext private keys
in a private-key computation transaction. Any unauthorized
access would automatically trigger a transaction abort, which
immediately clears all sensitive data and terminates the
cryptographic computations. This thwarts software memory
disclosure attacks that exploit vulnerabilities to stealthily
read sensitive data from memory without breaking the
integrity of executable binaries. Meanwhile, the whole pro-
tected computing environment is constrained in CPU caches,
so Mimosa is immune to cold-boot attacks on RAM chips.
We implemented the Mimosa prototype with Intel TSX.
We have simulated the most powerful software memory
disclosure “attacks” and validated that unauthorized access
to sensitive data could only obtain erased or encrypted copies
of private keys. Kernel dump when Mimosa is running fails
to capture any sensitive content, either. Moreover, perfor-
mance evaluation shows that Mimosa exhibits comparable
efﬁciency with conventional RSA implementations, which
do not provide the mentioned security guarantees. We also
demonstrate that Mimosa serves well
in the real-world
applications, e.g., HTTPS service.
ACKNOWLEDGEMENT
Le Guan, Jingqiang Lin, Jiwu Jing and Jing Wang were
partially supported by National 973 Program of China under
award No. 2013CB338001 and Strategy Pilot Project of Chi-
nese Academy of Sciences under award No. XDA06010702.
Bo Luo was partially supported by NSF OIA-1028098, NSF
CNS-1422206 and University of Kansas GRF-2301876. The
authors would like to thank Dr. Yuan Zhao at Institute of
Information Engineering, Chinese Academy of Sciences,
Prof. Peng Liu at Pennsylvania State University and the
anonymous reviewers for their valuable comments.
REFERENCES
[1] O. Aciicmez, W. Schindler, and C. Koc, “Cache based
remote timing attack on the AES,” in Topics in Cryp-
tology - CT-RSA, 2007, pp. 271–286.
[2] Advanced Micro Devices, “Advanced Synchroniza-
tion Facility, proposed architectural speciﬁcation (revi-
sion 2.1),” 2009, http://developer.amd.com/wordpress/
media/2013/02/45432-ASF Spec 2.1.pdf.
[4] A. Akavia, S. Goldwasser, and V. Vaikuntanathan,
“Simultaneous hardcore bits and cryptography against
[3] Ady
Tal,
“Intel
Development
http://software.intel.com/en-us/articles/
Software
Emulator,”