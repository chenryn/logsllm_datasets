CPUs with a microcode update.
5.4 Microcode-Assisted Instrumentation
Motivation. Traditional binary defenses often suffer from either
significant performance overhead or incompleteness. This is typ-
ically due to the reliance on dynamic instrumentation or static
binary rewriting. However, with the ability to change the behavior
of x86 instructions via a microcode update, it is possible to inter-
cept only specific instructions without impacting performance of
unrelated code. Hence, a microcode-assisted instrumentation lever-
ages synergies of minimal performance overheads of static binary
rewriting and completeness of dynamic instrumentation solutions.
Design and Implementation. We designed a microcode-as-
sisted instrumentation scheme that allows generation of microcode
updates that intercept a specific instruction and upon execution of
this instruction, the control is transferred to a specific address. This
address contains standard x86 code to perform the instrumentation
and finally resume execution. The microcode update can addition-
ally contain a custom-tailored filtering, so that the x86 handler is
only invoked on specific conditions. As the filtering is implemented
directly in microcode, the overhead of changing the x86 execution
path which can invalidate branch prediction and caches is only
occurred when needed.
Evaluation and Discussion. To test the viability of the instru-
mentation, we implemented a proof-of-concept microprogram that
instruments shrd to call an x86 handler if a certain constant is
detected in the argument register. The control flow is illustrated in
Figure 6. Upon execution of the instruction, 1⃝ control is transferred
to the microcode RAM. 2⃝ As a filter, we check if the argument reg-
ister is equal to a constant. In case the filter does not match, the
instruction is executed normally and x86 execution continues after
shrd. In case the filter matches, 3⃝ the current instruction pointer
is pushed onto the stack and the x86 instrumentation part gains
control, comparable to a call instruction in x86. Once our instru-
mentation gains control, it can perform any number of calculations
and is not constrained by the size limitations of the microcode RAM.
4⃝ Finally, the instrumentation continues the normal execution by
returning to the interrupted code.
We also conducted a performance benchmark to determine the
overhead introduced by our instrumentation for the case where
the microcoded condition does not hold — illustrated with 2⃝ in
Figure 6. In this case, the x86 execution should continue as fast
as possible in order to reduce the overhead for any code not to
be inspected. We use the shrd instrumentation for this test and
measure the performance according to the described test setup.
The original implementation of shrd executed in 2 cycles, our test
case took 8 cycles. This overhead is mainly due to the switch to
microcode RAM and the two triads inserted for the instrumentation
check. The microcode RTL of the shrd instrumentation is available
in our Github repository [57].
While the execution time of the single instruction is increased
substantively, this overhead is fixed for any semantic the instruction
originally implements. This implies that our instrumentation only
adds 6 cycles to perform its own check, regardless of the original
run time of the instruction. Additionally, we do not introduce a
conditional x86 branch, which further increases the overhead due
to potential branch mis-predictions. Moreover, our implementation
does not use scratch x86 registers and thus does not increase reg-
ister pressure or causes additional memory accesses. Finally, the
overhead is only introduced for instructions that are to be inspected,
the rest of the execution is not impacted. This is in contrast to ex-
isting dynamic instrumentation frameworks, such as Valgrind [58],
PIN [55] or DynamoRIO [28], which increase the execution time for
all instructions. For a lightweight instrumentation, the overheads in-
duced by these tools are about 8.3, 2.5 or 5.1 times, respectively [55].
On top of our framework, any binary instrumentation relying
on intercepting of a small number x86 instructions can be realized.
Note that a current limitation is that only microcoded instructions
can be intercepted, however, this is a limitation of the current re-
verse engineering progress. Previous work indicated the possibility
of intercepting all instructions, included non-microcoded ones.
5.5 Authenticated Microcode Updates
Motivation. While the insufficiently protected microcode update
mechanism of AMD K8 and K10 processors enabled the research in
the first place, it simultaneously poses a major security issue: an
attacker can apply any update of her choosing, which was demon-
strated by Koppe et al. [49] by developing stealthy microcoded
Trojans. However, as the microcode update mechanism itself is
implemented in microcode, it is possible to develop a protection
mechanism in the form of a microcode update that can provide
limited security guarantees. We implement a proof-of-concept that
demonstrates the feasibility of such a scheme on the affected CPUs.
Design and Implementation. In order to mitigate the risk as-
sociated with the current scheme, a microcode update mechanism
is required that only accepts authenticated updates. However, given
the ephemeral nature of microcode updates, this countermeasure
requires either a hardware re-design or a trusted application (e.g.,
a part of Unified Extensible Firmware Interface (UEFI) with secure
boot) that applies a suitable microcode update early during boot. In
particular, this update must then verify each further update attempt
using proper cryptographic primitives. At the same time, due to
the limited space in the microcode update, the verification has to
be small in terms of code size. Note that performance is of lesser
priority in this case since microcode updates are typically only
performed once per system start.
Our implementation extends the wrmsr instruction, which is used
to start the microcode update, to enforce the following properties
for the microcode update:
(1) The update includes 32 triads, the maximum possible number
on the K8 architecture. The vendor-supplied updates are
always padded to this length.
(2) A Hash-based message authentication code (HMAC) is ap-
pended to the update directly after the last triad.
(3) The HMAC is correct for the full update, including the header.
The inclusion of the header in the authenticated part protects
the match registers and thus the affected instructions. The
key of the HMAC is included in the initial microcode update.
For our implementation, we choose the block cipher Tiny En-
cryption Algorithm (TEA) [81] due to the simplicity of its round
function which results in a small code size in the microcode RAM.
This is especially important as our current understanding of mi-
crocode semantics only allows loading of 16-bit immediate values
per microcode operation. Hence, loading of a single 64-bit constant
requires a total of 8 operations or nearly three triads (note that the
whole microcode update is limited to 32 triads only). While it would
be preferable to implement a strong cryptographic algorithm such
as Advanced Encryption Standard (AES), these commonly require
S-Boxes, which we cannot support due to code size constraints.
Evaluation and Discussion. As we extend the standard update
mechanism with an additional verification of the entire microcode
update, we incur a significant performance hit. In our tests, ap-
plying a maximum length update takes 5,377 cycles without the
authenticated update mechanism. With our deployed authentica-
tion scheme, loading the same update requires 68,525 cycles. This
increase is expected due to the added verification. As the update is
only applied once during system boot, the performance hit is still
negligible. For comparison, the AMD 15h architecture (Bulldozer
etc.) requires 753,913 cycles on average for an update [14]. This
generation likely uses a public key scheme to verify the update.
Due to code size limitation we were limited to the simple and
small TEA algorithm and could not implement a public key verifi-
cation scheme. However, if the update authentication mechanism
were contained in the microcode ROM directly, the code size would
not be as restricted. While our ROM readout indicates a very high
usage of the available triads, there are still more padding triads
present than would fit into a microcode update. In our prototype
implementation, the user can decide which updates to trust, or
given the possibility to disassemble the updates, even which parts
of an update should be applied. This allows for a finer control over
the hardware than what would be possible using only a vendor-
accessible signature method. The RTL of our microcode authenti-
cation scheme is available in our Github repository [57].
5.6 µEnclave
Motivation. Intel Software Guard Extensions (SGX) [18] is an in-
struction set extension that introduces the creation of isolated,
trusted execution environments with private memory regions. These
so-called enclaves are protected from processes even at high priv-
ilege levels and enable secure remote computation. Inspired by
SGX we designed and implemented a proof-of-concept enclave func-
tionality, dubbed µEnclave. µEnclave can remotely attest that code
indeed runs inside the enclave and ensures confidentiality of data.
We can thus retrofit basic enclave functionality to older CPUs not
offering a comparable solution. Additionally, we use this case study
to illustrate the isolation property of microcode.
Design and Implementation. We leverage the separate mi-
crocode IDU to establish an isolated execution environment. The
other decode units are halted while the microcode IDU is active
by design of the microarchitecture. Due to these isolation proper-
ties we can safely assume that x86 code, even when running with
kernel-level privileges, cannot interfere with the enclave program
implemented in microcode at run time.
µEnclave is based on the authenticated microcode update mech-
anism, presented in Section 5.5, and the following strategy:
(1) The trust is built upon the symmetric key contained in the
first microcode update applied early during boot by UEFI.
The entity controlling that key may be a chip manufacturer,
software vendor, or the end-user. The entity has to ensure
that payload microcode updates contain only benign behav-
ior before signing it.
(2) The program that is supposed to run in the µEnclave is im-
plemented in microcode and embedded in a signed payload
microcode update.
(3) The enclave program may perform arbitrary computations
and access virtual memory. The enclave program may write
sensitive data into RAM, but it must ensure security prop-
erties like authenticity, integrity, and secrecy itself using
signing and encryption.
(4) The enclave program can remotely attest that it indeed runs
within the enclave by signing a message with the symmetric
enclave key.
Discussion. In combination with a challenge-response protocol,
µEnclave enables remote attestation and additional services of the
enclave can be exposed either via augmenting x86 instructions or
adding new MSRs. A major drawback of µEnclave is the restricted
code size due to the microcode RAM size. This limitation can be
lifted by either implementing a small virtual machine and interpret-
ing signed bytecode from main memory or iteratively streaming
signed microcode from main memory to microcode RAM as it exe-
cutes. For the latter, we are missing the micro-ops that can write
to microcode RAM. While our current implementation does not
support either approach, this is not a fundamental limitation of
µEnclave.
When compared to sophisticated trusted execution environ-
ments such as Intel SGX or ARM TrustZone, µEnclave is more
cumbersome to use. As the enclave code needs to be written as
microcode, the development requires experience with this envi-
ronment. Additionally, the limited code size limits the selection of
cryptographic primitives to those with very small implementations.
This results in the use of less secure cryptographic algorithms and
thus lower security guarantees. Finally, the CPU lacks hardware
support and acceleration for cryptographic operations. This means,
for example, that the attestation needs to be implemented by the
programmers of enclave code themselves. However, µEnclave can
be used on older CPUs that do not provide the mentioned vendor
supplied solutions. As such, it is possible to add similar primitives
to legacy CPUs without requiring a hardware change.
6 DISCUSSION AND FUTURE WORK
In this section, we discuss benefits and challenges of microcode-
assisted system defenses and review limitations of microcode in
general and of our reverse engineering approach in particular. Fur-
thermore, we present and discuss potential topics for future work
such as microcode-assisted shadow stacks, lightweight syscalls as
well as information isolation. We also shed light on how microcode
Trojans can be detected.
6.1 Microcode for System Defenses
Modern processor microcode and the ability to update microcode
can provide useful primitives such as enabling or disabling CPU
features at runtime, intercepting instruction decoding or other mi-
croarchitectural processes to modify existing behavior, providing a
small execution environment isolated from the operating system
kernel, and bypassing some boundaries of the x86 ISA to implement
new features. We have shown in Section 5 that these primitives
enable the implementation of some defensive schemes like cus-
tomizable accuracy of the built-in x86 timer and µEnclave in the
first place. Other defenses such as microcoded HWASAN and ISR
benefit from these primitives with regard to performance overhead
and complexity. With more knowledge about microcode, additional
defenses like opaque shadow stacks and information isolation can
be built, as we discuss in Sections 6.4 and Section 6.5. However, the
generality of microcoded primitives suffers due to the limited num-
ber of processor models that currently accept custom microcode
updates. We argue that the introduction of an open and documented
microcode API could benefit system security research and future
defensive systems. Such an API has to address several challenges
like abstracting the underlying changes through processor gen-
erations, conflict handling for concurrent updates, and ensuring
system stability. In order to avoid microcode malware, processor
vendors could introduce an opt-in development mode that allows
self-signed updates. Software vendors that want to use such an
update in the field, e.g., with processors not in development mode,
have to go through a signing process with the CPU vendor.
6.2 Limitations
At first, we review the limitations of microcode in general. The
execution speed of certain computations can be speed up by several
orders of magnitude by implementing the algorithm in hardware,
e.g., in an ASIC or FPGA. Such performance gains do not apply to
computations moved from an x86 implementation to microcode, be-
cause essentially it is still software. Merely the decoding is changed,
but the resulting operations performed by the functional units of the
processor are similar. Furthermore, the intervention of microcode
in microarchitectural processes directly implemented in hardware
is limited. Custom microcode updates are thus limited to chang-
ing the semantics of x86 instructions within the constraints of the
existing internal RISC instruction set. To the best of our knowl-
edge, no mechanisms exists to periodically trigger an action in
microcode to implement an asynchronous monitoring. All actions
of custom microcode programs needs to be triggered by an external
event. However, as it is possible to intercept arbitrary instructions
and microcode-internal processes, there are multiple options to
implement a basic form of such a monitoring.
Our microcode research is further limited due to our incomplete
knowledge of microcode and the underlying microarchitecture. The
information gained through reverse engineering may lack impor-
tant details or even contain mistakes. This can only be resolved with
access to the official documentation of the used features. Our mi-
croprograms only run on AMD K8 to K10 family based processors.
More modern CPUs include effective authentication schemes, such
as RSA-based public key cryptography, which would need to be
bypassed in order to apply a custom update. The microcode update
size of the affected CPUs is limited to 32 triads, which prohibits the
implementation of large microprograms. We partly bypassed this
restriction by introducing x86 callbacks. However, this bypass is
not feasible in scenarios with untrusted operating system kernels
such as µEnclave. More recent CPUs use larger microcode updates,
which is an indication that their patch RAM is larger and can po-
tentially accommodate more complex updates. Despite the limited
code size on the tested CPUs no upper bound on the execution time
of microcode was encountered and we were able to lock up the
CPUs by forcing it into an endless loop in microcode. Furthermore,
we currently can only hook microcoded x86 instructions. Detailed
lists of these microcoded instructions for the K8 architecture can
be found in [2] at pages 273ff. The instructions listed as VectorPath
are microcoded instructions and Direct/DoublePath instructions
are decoded in hardware. While there are indications that it is pos-
sible to intercept all instructions, our current reverse engineering
results do not allow for this. Lastly, the microcode ROM readout
contains non-correctable read errors induced by dust particles or
irregularities. We are currently working on improving the readout
and obtaining an error-free version.
6.3 Correctness of Reverse Engineering Results
As our results are based on reverse engineering, we can not guar-
antee their correctness. Additionally we are limited to observing
the output of the CPU, any additional details of the microarchitec-
ture such as scheduling or internal state updates are hidden from
us. The observations might constitute unintended behavior of the
CPU when used outside of its specifications. However, we verified
our conclusions using available resources where possible. A strong
indication that our results are indeed correct is the fact that we can