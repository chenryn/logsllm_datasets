site without the need to invoke the address resolution rou-
tines. By using this feature, testers could run programs to
display the state of the mail system without sending mail
or establishing a separate login connection. This debug op-
tion was often used because of the complexity of conﬁg-
uring sendmail for local conditions and it was often left
turned on by many vendors and site administrators.
The sendmail program was of immense importance
on most Berkeley-derived (and other) UNIX systems be-
cause it handled the complex tasks of mail routing and
delivery. Yet, despite its importance and widespread use,
most system administrators knew little about how it worked.
Stories were often related about how system administra-
tors would attempt to write new device drivers or otherwise
modify the kernel of the operating system, yet they would
not willingly attempt to modify sendmail or its conﬁgu-
ration ﬁles.
is little wonder,
then,
It
that bugs were present
in
sendmail that allowed unexpected behavior. Other
ﬂaws were found and reported after attention was fo-
cused on the program as a result of the Worm, but to this
day versions of sendmail are in use and have occa-
sional patches released for security issues.
3.3. Passwords
A key attack of the Worm program involved attempts
to discover user passwords. It was able to determine suc-
cess because the encrypted password of each user was in a
publicly-readable ﬁle.
Strictly speaking, the password was not encrypted. A
block of zero bits was repeatedly encrypted using the user
password, and the result of this encryption was what was
saved.[15, 3, 10] In original (and some current) UNIX sys-
tems, the user provided a password at sign-on to verify iden-
tity. The password was used to encrypt a block of zero bits
using a permuted version of the Data Encryption Standard
(DES) algorithm, and the result was compared against a
previously encrypted value present in a world-readable ac-
counting ﬁle. If a match occurred, access was allowed. No
plaintext passwords were contained in the ﬁle, and the algo-
rithm was supposedly non-invertible without knowledge of
the password.
The organization of the passwords in UNIX allowed non-
privileged commands to make use of information stored in
the accounts ﬁle, including authentiﬁcation schemes using
user passwords. However, it also allowed an attacker to en-
crypt lists of possible passwords and then compare them
against the actual passwords without calling any system
function. In effect, the security of the passwords was pro-
vided by the prohibitive effort of trying this approach with
all combinations of letters, or at least trying obvious words.
The Worm used such an attack to break passwords. It
used lists of words, including the standard online dictionary,
as potential passwords. It encrypted them using a fast ver-
sion of the password algorithm and then compared the re-
sult against the contents of the system ﬁle. The Worm ex-
ploited the accessibility of the ﬁle coupled with the ten-
dency of users to choose common words as their passwords.
Some sites reported that over 50% of their passwords were
quickly broken by this simple approach.
One way to reduce the risk of such attacks, and an ap-
proach that has been taken in every modern variant of UNIX,
is to have a shadow password ﬁle. The encrypted passwords
are saved in a ﬁle (shadow) that is readable only by the sys-
tem administrators, and a privileged call performs password
encryptions and comparisons with an appropriate timed de-
lay (.5 to 1 second, for instance). This prevents any attempts
to “ﬁsh” for passwords. Additionally, a threshold can be in-
cluded to check for repeated password attempts from the
same process, resulting in some form of alarm being raised.
A related ﬂaw exploited by the Worm involved the use
of trusted logins. One useful feature of BSD UNIX-based
networking code was its support for executing tasks on re-
mote machines. To avoid having repeatedly to type pass-
words to access remote accounts, it was possible for a user
to specify a list of host/login name pairs that were assumed
to be trusted, in the sense that a remote access from that
host/login pair was never asked for a password. This feature
had often been responsible for users gaining unauthorized
access to machines (cf. [17]) but it continued to be used be-
cause of its great convenience. In many systems in use to-
day this feature is still available and enabled by users who
do not understand the risk.
The Worm exploited this mechanism by trying to locate
machines that might trust the current machine/login being
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
used by the Worm. This was done by examining ﬁles that
listed remote machine/logins trusted by the current host. Of-
ten, machines and accounts were (and are) conﬁgured for
reciprocal trust. Once the Worm found such likely candi-
dates, it would attempt to instantiate itself on those ma-
chines by using the remote execution facility — copying it-
self to the remote machines as if it were an authorized user
performing a standard remote operation.
3.4. High Level Description
The Worm consisted of two parts: a main program, and
a bootstrap or vector program. The main program, once es-
tablished on a machine, would collect information on other
machines in the network to which the current machine could
connect. It would do this by reading public conﬁguration
ﬁles and by running system utility programs that presented
information about the current state of network connections.
It would then attempt to use the ﬂaws described above to
establish its bootstrap on each of those remote machines.
Many of these techniques seem common in malicious code
of 2003, but were relatively novel in 1988.
The bootstrap was 99 lines of C code that would be com-
piled and run on the remote machine. The source for this
program would be transferred to the victim machine using
one of the methods discussed in the next section. It would
then be compiled and invoked on the victim machine with
three command line arguments: the network address of the
infecting machine, the number of the network port to con-
nect to on that machine to get copies of the main Worm ﬁles,
and a magic number that effectively acted as a one-time-
challenge password. If the server Worm on the remote host
and port did not receive the same magic number back be-
fore starting the transfer, it would immediately disconnect
from the vector program. This may have been done to pre-
vent someone from attempting to capture the binary ﬁles by
spooﬁng a Worm server.
This code also went to some effort to hide itself, both by
zeroing out its argument vector (command line image), and
by immediately forking a copy of itself. If a failure occurred
in transferring a ﬁle, the code deleted all ﬁles it had already
transferred, then it exited.
Once established on the target machine, the bootstrap
would connect back to the instance of the Worm that origi-
nated it and transfer a set of binary ﬁles (precompiled code)
to the local machine. Each binary ﬁle represented a version
of the main Worm program, compiled for a particular com-
puter architecture and operating system version. The boot-
strap would also transfer a copy of itself for use in infecting
other systems.
One curious feature of the bootstrap has provoked many
questions that have never been answered in public: the pro-
gram had data structures allocated to enable transfer of up
to 20 ﬁles; it was used with only three. This led to specu-
lation whether a more extensive version of the Worm was
planned for a later date, and if that version might have car-
ried with it other command ﬁles, password data, or possi-
bly local virus or trojan horse programs. However, it is also
possible that 20 was chosen as a limit with no plans for fu-
ture expansion but as a “reasonable size.”
Once the binary ﬁles were transferred, the bootstrap pro-
gram would load and link these ﬁles with the local versions
of the standard libraries. One after another, these programs
were invoked. If one of them ran successfully, it read into
its memory copies of the bootstrap and binary ﬁles and then
deleted the copies on disk. It would then attempt to break
into other machines. If none of the linked versions ran, then
the mechanism running the bootstrap (a command ﬁle or
the parent worm) would delete all the disk ﬁles created dur-
ing the attempted infection.
3.5. Step-by-step description
This section contains a more detailed overview of how
the Worm program functioned. The description in this sec-
tion assumes that the reader is somewhat familiar with stan-
dard UNIX commands and with UNIX network facilities. A
more detailed analysis of operation and components can be
found in [22] with additional details in [7] and [19].
This description starts from the point at which a host is
about to be infected. A Worm running on another machine
has either succeeded in establishing a command shell in-
vocation on the new host and has connected back to the in-
fecting machine via a TCP connection or it has connected to
the SMTP port and is transmitting data to the sendmail pro-
gram.
The infection proceeded as follows:
1. A network socket was established on the infecting ma-
chine for the vector program to connect to (e.g., socket
number 32341). A challenge was constructed from
a random number (e.g., 8712440). A ﬁle name base
was also constructed using a random number (e.g.,
14481910).
2. The vector program was installed and executed using
one of two methods:
a) Across a TCP connection to a shell, the Worm
would send a command stream to compile and execute
the vector program, using the challenge and port val-
ues generated in the previous step. Then it would wait
for the string DONE to be echoed to signal that the vec-
tor program was running.
b) Using the SMTP connection, it would transmit
a similar command stream to that for a TCP connec-
tion, but rather than wait for a terminating ﬂag string,
the infecting Worm would then wait for up to 2 min-
utes on the designated port for the vector to contact it.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
3. The vector program then connected back to the server,
sent the challenge string, and received three ﬁles: a Sun
3 binary version of the Worm, a VAX version, and the
source code for the vector program. After the ﬁles were
copied, the running vector program became (via the
execl call) a shell with its input and output still con-
nected to the server Worm.
4. The server Worm then sent a series of commands to the
vector to cause it to attempt to link each transferred
binary ﬁle against the system libraries and then exe-
cute it. In practice, this meant it only attempted linking
two binaries, although the code allowed up to 20. If the
linked code succeeded, the server would close the con-
nection. Otherwise, it would try the other binary ﬁle.
After both binary ﬁles had been tried, it would send
over commands to delete the object ﬁles to clear away
all evidence of the attempt at infection.
5. The new Worm on the infected host proceeded to hide
itself by obscuring its argument vector, unlinking the
binary version of itself, and killing its parent (spawn-
ing) process. It then read into memory each of the
Worm binary ﬁles, encrypted each ﬁle after reading it,
and deleted the ﬁles from disk.
6. Next, the new Worm gathered information about net-
work interfaces and hosts to which the local machine
was connected. It built lists of these in memory, includ-
ing information about canonical and alternate names
and addresses. It gathered some of this information by
making direct system calls, by reading various system
ﬁles, and by executing system programs that returned
conﬁguration information.
7. It randomized the lists of hosts it constructed, then at-
tempted to infect some of them. For directly connected
networks, it created a list of possible host numbers and
attempted to infect those hosts if they existed. Depend-
ing on whether the host was remote or attached to a lo-
cal area network the Worm ﬁrst tried to establish a con-
nection on the telnet or rexec ports to determine
reachability before it attempted an infection.
The attack attempts proceeded by one of three routes:
rsh, fingerd, or sendmail.
The attack via rsh was done by attempting to spawn a
remote shell. If successful, the host was infected as above.
The attack via the finger daemon was somewhat more
subtle. This involved a buffer overﬂow attack. A connection
was established to the remote ﬁnger server daemon and then
a specially constructed string of 536 bytes was passed to the
daemon, overﬂowing its 512 byte input buffer and overwrit-
ing parts of the stack. For standard 4 BSD versions running
on VAX computers, the overﬂow resulted in the return stack
frame for the main routine being changed so that the return
address pointed into the buffer on the stack. The code at
that location initiated a command shell with its input con-
nected to the network link established for the finger in-
vocation. The Worm then proceeded to infect the host as de-
scribed above.
On Suns, this buffer overﬂow attack simply resulted in
a core dump because the code was not in place to cor-
rupt a Sun version of fingerd in a similar fashion. Curi-
ously, correct machine-speciﬁc code to corrupt Suns could
have been written in a matter of hours and included but was
not.[22]
Last of all, the Worm then tried to infect the remote host
by establishing a connection to the SMTP port and mailing
an infection, as was described above.
Not all the steps were attempted. As soon as one method
succeeded, the host entry in the internal list was marked as
infected and the other methods were not attempted.
Next, the Worm program entered a state machine con-
sisting of ﬁve states. Each state but the last was run for a
short while, then the program looped back to make attempts
to break into other hosts via sendmail, finger, or rsh.
The ﬁrst four of the ﬁve states were attempts to break into
user accounts on the local machine. The ﬁfth state was the
ﬁnal state, and occurred after all attempts had been made to
break all accounts. In the ﬁfth state, the Worm looped for-
ever trying to infect hosts in its internal tables and marked
as not yet infected. The ﬁrst four states were:
1. The Worm read through the /etc/hosts.equiv
ﬁles and /.rhosts ﬁles to ﬁnd the names of
administratively-equivalent hosts. These were marked
in the internal table of hosts. Next, the Worm read the
account and password ﬁle into an internal data struc-
ture. As it was doing this, it also examined the mail
forwarding ﬁle in each user home directory and in-
cluded any new host names into its internal table of
hosts to try.
2. The Worm attempted to break each user password us-
ing simple choices. The Worm ﬁrst checked the ob-
vious case of no password. Then, it used the account
name and the user information ﬁeld to try simple pass-
words. This was an approach that succeeded far too
often because users had chosen weak passwords based
on their own names or ofﬁce information.
3. The code then attempted to break the password of each
user by trying each word present in an internal list of
words. This list of 432 words was tried against each
account in a random order. This collection of pass-
words included some misspellings of real words, some
names, and some other non-obvious strings. Many
people have postulated that this list was generated by
capturing real passwords in one or more operational
environments.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
4. The ﬁnal stage was entered if all other attempts failed.
For each word in the online spelling dictionary, the
Worm would see if it was the password to any account.
In addition, if the word in the dictionary began with
an upper case letter, the letter was converted to lower
case and that word was also tried against all the pass-
words.