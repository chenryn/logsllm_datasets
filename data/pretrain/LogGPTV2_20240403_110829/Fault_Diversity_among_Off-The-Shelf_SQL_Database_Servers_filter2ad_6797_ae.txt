failures from bugs they have reported before, or for which 
they 
recovery 
mechanisms), and even better if they also have indications 
about  the  users’  usage profile (from rough measures like 
the  size  of  the  database  managed,  to detailed monitoring 
as proposed in [31]). However, vendors are often wary of 
sharing such detailed dependability information with their 
customers.  
successful  workarounds 
have 
or 
How  can  then  individual  user  organisations  decide 
whether diversity is a suitable option for them, with their 
specific  requirements  and  usage  profiles?  As  usual  for 
dependability-enhancing  measures,  the  cost is reasonably 
easy to assess: costs of the software products, the required 
middleware,  difficulties  with  client  applications  that 
require vendor-specific features, hardware costs, run-time 
cost  of  the  synchronisation  and  consistency  enforcing 
mechanisms,  and  possibly  more  complex  recovery  after 
some  failures.  The  gains  in  improved  reliability  and 
availability  (from  fewer  system  failures  and  easier 
recovery  from  some  failures,  set  against  possible  extra 
failures  due  to  the  added  middleware),  and  possibly  less 
frequent  upgrades,  are  difficult 
to  predict  except 
empirically.  This  uncertainty  will  be  compounded,  for 
many  user  organisations,  by  the  lack  of  trustworthy 
estimates of their baseline reliability with respect to subtle 
failures:  databases  are  used  with implicit confidence that 
failures will be self-evident.  
We  note  that  for  some  users  the  evidence  we  have 
presented would already indicate a diverse server to be a 
reasonable  and  relatively  cheap  precautionary  choice, 
even  without  good  predictions  of  its  effects.  These  are 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:53 UTC from IEEE Xplore.  Restrictions apply. 
users  who  have:  serious  concerns  about  dependability 
(e.g., high costs for interruptions of service or undetected 
incorrect  data  being  stored);  applications  which  use 
mostly the core features common to multiple off-the-shelf 
products  (recommended  by  practitioners  to  improve 
portability  of 
throughput 
requirements  for  updates,  which  make  it  easy  to  accept 
the synchronisation delays of a fault-tolerant server.  
the  applications);  modest 
7. Conclusions 
To  estimate  the  possible  advantages  of  modular-
redundant diversity in complex off-the-shelf software, we 
studied a sample of bug reports from four popular off-the-
shelf SQL database server products. We checked whether 
more  than  one  product  exhibited  bugs  that  would  cause 
common-mode  failures  if  the  products  were  used  in  a 
diverse  redundant  architecture.  It  appears  that  such 
common  bugs  are  rare.  We  found  very  few  bugs  that 
affected  two  of  the  four  servers,  and  none  that  affected 
more  than  two.  Moreover  only  four  of  these  bugs would 
cause  identical,  undetectable  failures  in  two  servers. 
Fault-tolerant, diverse servers seem to have a good chance 
of improving failure rates and availability. 
These  preliminary  results  must  be  taken  with  caution, 
as discussed in Section 6, but are certainly interesting and 
indicate  that  this  topic  deserves  further  study.  Their 
immediate implications vary between users, but there are 
classes  of  database  server  installations  for  which  even 
these preliminary results seem to recommend diversity as 
a prudent and cost-effective strategy. Decisions would of 
course involve many other considerations which we could 
not  discuss  here:  performance,  total  cost  of  ownership 
including  updates,  risks  of  dependence  on  one  vendor, 
etc.
The  practical  obstacle  would  be 
the  need  for 
“middleware”:  most  users  would  need  an  off-the-shelf 
middleware  package,  which  in  turn  is  not  likely  to  be 
developed until there are enough users. On the other hand, 
a  dedicated user could develop a middleware package in 
the  hope  of  seeing  his  investment  amplified  through  the 
creation of an open-source community of user/developers. 
But  once  the diverse server is running, the dependability 
changes  due  to  diversity  could  be  directly  assessed.  The 
user could decide on an ongoing basis which architecture 
is  giving  the  best  trade-off  between  performance  and 
dependability, from a single server to the most pessimistic 
fault-tolerant  configuration  (with  tight  synchronisation 
and comparison of results at each query). 
Some other interesting observations include: 
- 
it may be worthwhile for vendors to test their servers 
using  the  known  bug  reports  for  other  servers.  For 
example,  we  observed  4  MSSQL  bugs  that  had  not 
been reported in the MSSQL service packs (previous 
to our observation period). Oracle was the only server 
- 
- 
- 
repeated, 
indicating 
that 
they 
are 
load  we  found 
that  a  significant  gain 
repeating this study on later releases of the servers, to 
verify  whether  the  general  conclusions  drawn  here 
are 
the 
consequences  of  factors  that  do  not  disappear  with 
the evolution of the software products;  
statistical testing to assess the actual reliability gains. 
This is already under way. We have run a few million 
queries  with  various  loads  including  experiments 
based  on  the  TPC-C  benchmark.  We  have  not 
observed any failures so far (however, with the TPC-
C 
in 
performance  can  be  obtained  with  diverse  servers 
[9]).    We  plan  to  continue  these  experiments  with 
more  complete  test  loads.  These  are  important  for 
their own sake, as evidence for decision-making, but 
also for the side benefit of checking how far the data 
confirm  the  impressions  gained  from  this  study,  and 
thus  how  accurate  a  picture  fault  reports  paint  for 
these products; 
studying  alternative  options 
fault 
tolerance with OTS servers, e.g. wrappers rephrasing 
queries  into  alternative,  logically  equivalent  sets  of 
statements  to be sent to replicated, even non-diverse 
servers [9];  
developing the necessary components for users to be 
able  to  try  out  diversity  in  their  own  installations, 
since  the  main  obstacle  now  is  the  lack  of  popular 
off-the-shelf 
for  data 
replication with diverse SQL servers. 
“middleware”  packages 
for  software 
- 
that never failed when running on it the reported bugs 
of the other servers;  
the  majority  of  bugs  reported,  for  all  servers,  led  to 
“incorrect result” failures (64.5%) rather than crashes 
(17.1%)  (despite  crashes  being  more  obvious  to  the 
user). This is contrary to the common assumption that 
the  majority  of  bugs  lead  to  an  engine  crash,  and 
warrants  more  attention  by  users  to  fault-tolerant 
solutions, and by designers of fault-tolerant solutions 
to tolerating subtle and non fail-silent failures. 
Future work that is desirable includes: 
- 
Acknowledgment 
This  work  was  supported  in  part  by  the  “Diversity  with 
Off-The-Shelf  components”  (DOTS)  Project  funded  by 
the  U.K.  Engineering  and  Physical  Sciences  Research 
Council  (EPSRC).  We  would  also  like  to  thank  Bev 
Littlewood,  Peter  Bishop  and  the  anonymous  DSN 
reviewers  for  comments  on  an  earlier  version  of  this 
paper.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:53 UTC from IEEE Xplore.  Restrictions apply. 
References 
Oracle 
and 
Snapshots 
Isolation 
MSSQL." 
comparison", 
"Allaire  Run:  Edition 
[1]  E.  N.  Adams,  "Optimizing  preventive  service  of  software 
products",  IBM  Journal  of  Research  and  Development,  28, 
1984, pp. 2-14. 
[2]  C.  Allaire, 
www.allaire.com/products/jrun/MoreInformation/ChoosingThe
Edition.cfm. 
[3] H. Berenson, P. Bernstein, J. Gray, J. Melton, E. O'Neil and 
P. O'Neil, "A Critique of ANSI SQL Isolation Levels", in Proc. 
SIGMOD Int. Conf. on Management of Data, 1995. 
[4]  P.  A.  Bernstein,  V.  Hadzilacos  and  N.  Goodman, 
"Concurrency  Control  and  Recovery  in  Database  Systems", 
Reading, Mass., Addison-Wesley, 1987. 
[5]  S.  Chandra  and  P.M.  Chen,  "Whither  Generic  Recovery 
from  Application  Faults?  A  Fault  Study  using  Open-Source 
Software", in Proc. IEEE DSN 2000, NY, USA, 2000, pp. 97-
106.
[6] S. Chandra and P.M. Chen, "How fail-stop are programs", in 
Proc. IEEE  FTCS-28, Munich, Germany,1998, pp. 240-249. 
[7] A. Fekete, D. Liarokapis, E. O'Neil, P. O'Neil and D. Shasha, 
"Making 
Serializable", 
2000, 
http://www.cs.umb.edu/~isotest/snaptest/snaptest.pdf. 
[8] I. Gashi, "Tables containing known bug scripts of Interbase, 
PostgreSQL, 
2003, 
http://www.csr.city.ac.uk/people/ilir.gashi/DSN/. 
[9]  I.  Gashi,  P.  Popov,  V.  Stankovic  and  L.  Strigini,  "On 
designing  dependable  services  with  diverse  off-the-shelf  SQL 
servers",  in  A.  Romanovsky,  R.  de  Lemos  and  C.  Gacek  (Ed.) 
"Architecting Dependable Systems", Springer, 2004: in print. 
[10]  J.  Gray,  "Why  do  computers  stop  and  what  can  be  done 
about  it?"  in  Proc.  6th  International  Conference  on  Reliability 
and Distributed Databases, 1987. 
[11]  J.  Gray,  "FT101:  Talk  at  UC  Berkeley  on  Fault-
Tolerance",2000,http://research.microsoft.com/~Gray/talks/UC
Berkeley_Gray_FT_Avialiability_talk.ppt. 
[12] M. A. Hiltunen, R. D. Schlichting, C. A. Ugarte and G. T. 
Wong,  "Survivability  through  Customization  and  Adaptability: 
The  Cactus  Approach", 
Information 
Survivability Conference & Exposition, 2000. 
[13] R. Jimenez-Peris and M. Patino-Martinez, "D5: Transaction 
Support",  ADAPT  Middleware  Technologies  for  Adaptive  and 
Composable  Distributed  Components  Deliverable  IST-2001-
37126, 2003, 
 http://adapt.ls.fi.upm.es/deliverables/transactions.pdf.  
[14]  R.  Jimenez-Peris,  M.  Patino-Martinez,  G.  Alonso  and  B. 
Kemme, "Scalable Database Replication Middleware", in Proc. 
22nd  IEEE  Int.  Conf.  on  Distributed  Computing  Systems, 
Vienna, Austria, 2002, pp. 477-484. 
[15]  J.  C.  Laprie  (Ed.),  "Dependability:  Basic  Concepts  and 
Associated Terminology", Springer-Verlag, 1991. 
[16]  J.  C.  Laprie,  J.  Arlat,  C.  Beounes  and  K.  Kanoun, 
"Definition  and  Analysis  of  Hardware-and-Software  Fault-
Tolerant Architectures", IEEE Computer, 23, 1990, pp. 39-51. 
[17]  I.  Lee  and  R.  K.  Iyer,  "Faults,  Symptoms  and  Software 
Fault  Tolerance  in  the  Tandem  GUARDIAN90  Operating 
in  Proc.  DARPA 
System", in Proc. IEEE FTCS-23, Toulouse, France, 1993, pp. 
20-29. 
[18] Microsoft, "List of Bugs Fixed by SQL Server 7.0 Service 
Packs",http://support.microsoft.com/default.aspx?scid=kb;EN=
US;313980. 
[19] Oracle, "Oracle Metalink", 
http://metalink.oracle.com/metalink/plsql/ml2_gui.startup. 
[20]  F.  Pedone  and  S.  Frolund,  "Pronto:  A  Fast  Failover 
Protocol for Off-the-shelf Commercial Databases", in Proc. 19th 
IEEE  Symp.  on  Reliable  Distributed  Systems  (SRDS'00), 
Nurnberg, Germany, 2000, pp. 176-185. 
[21]  P.  Popov,  L.  Strigini,  A.  Kostov,  V.  Mollov  and  D. 
Selensky,  "Software  Fault-Tolerance  with  Off-the-Shelf  SQL 
Servers",  in  Proc.  3rd  Int.  Conf.  on  COTS-based  Software 
Systems, ICCBSS'04, Redondo Beach, CA USA, 2004: in print. 
[22]  P.  Popov,  L.  Strigini,  S.  Riddle  and  A.  Romanovsky, 
"Protective Wrapping of OTS Components", in Proc. 4th ICSE 
Workshop  on  Component-Based  Software  Engineering: 
Component Certification and System Prediction, Toronto, 2001. 
[23]  P.  Popov,  L.  Strigini  and  A.  Romanovsky,  "Diversity  for 
off-the-Shelf  Components",  in  Proc.  IEEE  DSN  2000,  -  Fast 
Abstracts supplement, New York, USA, 2000, pp. B60-B61. 
[24]  PostgreSQL,  "PostgreSQL  Bugs  mailing  list  archives", 
http://archives.postgresql.org/pgsql-bugs/. 
[25] J. Reynolds, J. Just, E. Lawson, L. Clough, R. Maglich and 
K.  Levitt,  "The  Design  and  Implementation  of  an  Intrusion 
Tolerant System", in Proc. IEEE DSN 2002, Washington, USA, 
2002, pp. 285-292. 
[26]  F.  B.  Schneider,  "Byzantine  generals 
in  action: 
Implementing  fail-stop  processors",  ACM  TOCS,  2(2),  1984, 
pp. 145-154. 
[27]  SourceForge, 
http://sourceforge.net/tracker/?atid=109028&group_id=9028&f
unc=browse. 
[28]  H.  Sutter,  "SQL/Replication  Scope  and  Requirements 
document",  ISO/IEC  JTC  1/SC  32  Data  Management  and 
Interchange WG3 Database Languages, H2-2000-568, 2000 
[29]  J.  Tian,  L.  Peng  and  J.  Palma,  "Test-execution-based 
reliability  measurement  and  modeling  for  large  commercial 
software", IEEE TSE, 21, 1995, pp. 405-414. 
[30]  A.  Valdes,  M.  Almgren,  S.  Cheung,  Y.  Deswarte,  B. 
Dutertre,  J. Levy, H. Saidi, V. Stavridou and T. E. Uribe, "An 
Adaptive Intrusion-Tolerant Server Architecture", 1999,  
http://www.sdl.sri.com/users/valdes/DIT_arch.pdf. 
[31] J. Voas, "Deriving Accurate Operational Profiles for Mass-
MarketedSoftware", 
http://www.cigital.com/papers/download/profile.pdf. 
[32] F. Wang, F. Gong, C. Sargor, K. Goseva-Popstojanova, K. 
Trivedi  and  F.  Jou,  "SITAR:  A  Scalable  Intrusion-Tolerant 
Architecture for Distributed Services", in Proc. IEEE Workshop 
on Information Assurance and Security, West Point, NY, U.S.A, 
2001.
[33]  M.  Weismann,  F.  Pedone  and  A.  Schiper,  "Database 
Replication  Techniques:  a  Three  Parameter  Classification",  in 
Proc.  19th  IEEE  Symp.  on  Reliable  Distributed  Systems 
(SRDS'00), Nurnberg, Germany, 2000, pp. 206-217. 
(Firebird)  Bug 
"Interbase 
tracker", 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:53 UTC from IEEE Xplore.  Restrictions apply.