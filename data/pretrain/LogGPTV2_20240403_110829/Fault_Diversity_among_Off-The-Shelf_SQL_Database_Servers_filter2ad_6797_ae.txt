### Failures and Recovery Mechanisms

Users often report bugs that lead to failures. It is beneficial if there are recovery mechanisms in place, and even more so if there are indications about the users' usage profiles. These profiles can range from rough measures, such as the size of the managed database, to detailed monitoring as proposed in [31]. However, vendors are often hesitant to share such detailed dependability information with their customers.

### Evaluating Diversity for Individual User Organizations

How can individual user organizations decide whether diversity is a suitable option for them, given their specific requirements and usage profiles? As with other dependability-enhancing measures, the cost is relatively easy to assess. This includes the costs of software products, required middleware, difficulties with client applications that require vendor-specific features, hardware costs, run-time costs of synchronization and consistency enforcement mechanisms, and possibly more complex recovery processes after some failures.

The gains in improved reliability and availability (from fewer system failures and easier recovery from some failures, set against possible extra failures due to the added middleware), and potentially less frequent upgrades, are difficult to predict except empirically. This uncertainty is compounded by the lack of trustworthy estimates of baseline reliability regarding subtle failures. Databases are often used with implicit confidence that failures will be self-evident.

We note that for some users, the evidence we have presented already indicates that a diverse server is a reasonable and relatively inexpensive precautionary choice, even without precise predictions of its effects. These users include those with serious concerns about dependability (e.g., high costs for service interruptions or undetected incorrect data storage), applications that use mostly core features common to multiple off-the-shelf products (recommended by practitioners to improve portability), and modest throughput requirements for updates, making it easy to accept the synchronization delays of a fault-tolerant server.

### Conclusions

To estimate the potential advantages of modular-redundant diversity in complex off-the-shelf software, we studied a sample of bug reports from four popular off-the-shelf SQL database server products. We checked whether more than one product exhibited bugs that would cause common-mode failures if used in a diverse redundant architecture. It appears that such common bugs are rare. We found very few bugs that affected two of the four servers, and none that affected more than two. Moreover, only four of these bugs would cause identical, undetectable failures in two servers. Fault-tolerant, diverse servers seem to have a good chance of improving failure rates and availability.

These preliminary results must be taken with caution, as discussed in Section 6, but they are certainly interesting and indicate that this topic deserves further study. The immediate implications vary between users, but there are classes of database server installations for which even these preliminary results seem to recommend diversity as a prudent and cost-effective strategy. Decisions would, of course, involve many other considerations, such as performance, total cost of ownership including updates, risks of dependence on a single vendor, etc.

### Practical Obstacles and Future Work

The practical obstacle is the need for "middleware." Most users would need an off-the-shelf middleware package, which is unlikely to be developed until there are enough users. On the other hand, a dedicated user could develop a middleware package in the hope of seeing their investment amplified through the creation of an open-source community of user/developers. Once the diverse server is running, the dependability changes due to diversity could be directly assessed. The user could decide on an ongoing basis which architecture is providing the best trade-off between performance and dependability, from a single server to the most pessimistic fault-tolerant configuration (with tight synchronization and comparison of results at each query).

Some other interesting observations include:
- It may be worthwhile for vendors to test their servers using known bug reports for other servers. For example, we observed four MSSQL bugs that had not been reported in the MSSQL service packs (previous to our observation period). Oracle was the only server that never failed when running the reported bugs of the other servers.
- The majority of bugs reported, for all servers, led to "incorrect result" failures (64.5%) rather than crashes (17.1%), despite crashes being more obvious to the user. This is contrary to the common assumption that the majority of bugs lead to an engine crash, and warrants more attention by users to fault-tolerant solutions, and by designers of fault-tolerant solutions to tolerating subtle and non-fail-silent failures.

Future work that is desirable includes:
- Repeating this study on later releases of the servers to verify whether the general conclusions drawn here are the consequences of factors that do not disappear with the evolution of the software products.
- Using statistical testing to assess the actual reliability gains. This is already under way. We have run a few million queries with various loads, including experiments based on the TPC-C benchmark. We have not observed any failures so far. We plan to continue these experiments with more complete test loads.
- Studying alternative options for fault tolerance with off-the-shelf (OTS) servers, e.g., wrappers rephrasing queries into alternative, logically equivalent sets of statements to be sent to replicated, even non-diverse servers [9].
- Developing the necessary components for users to try out diversity in their own installations, since the main obstacle now is the lack of popular off-the-shelf "middleware" packages for data replication with diverse SQL servers.

### Acknowledgment

This work was supported in part by the "Diversity with Off-The-Shelf components" (DOTS) Project funded by the U.K. Engineering and Physical Sciences Research Council (EPSRC). We would also like to thank Bev Littlewood, Peter Bishop, and the anonymous DSN reviewers for comments on an earlier version of this paper.

### References

[References listed as provided]

---

This revised text aims to be more coherent, clear, and professional, while maintaining the original content and intent.