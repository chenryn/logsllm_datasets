**作者：库特@蚂蚁安全实验室  
原文链接： **
文件系统是操作系统的基础设施之一，其中存在的任何缺陷都会导致严重后果。在研究苹果macOS文件系统的具体实现时，我们在xattr特性中发现了一系列严重漏洞。
文章将以CVE-2020-27904和CVE-2019-8852（由天穹实验室的库特同学独立发现并报告）为例，剖析漏洞成因，展示漏洞利用过程用到的独特技术，对此类漏洞的危害进行了演示，我们应当重视文件系统漏洞带来的潜在风险。
### 01 关于xattr
xattr是extended file
attributes的缩写，即文件扩展属性，是文件元数据的一种。xattr独立于文件内容存储，由文件系统分配专用的存储空间，可以使用xattr为文件添加额外的属性，实现各种各样的功能。例如Finder中的颜色标签，就是xattr的一种应用场景。
![
](https://images.seebug.org/content/images/2021/05/f9ada4a0-ee0a-4dca-9a0f-6e31d012d75d.png-w331s)
可以通过命令xattr、mdls等查看和操作文件xattr。在代码层面，我们可以通过getxattr、setxattr等系统调用读取和修改xattr。
### 02 在FAT文件系统中兼容xattr
macOS支持很多种文件系统格式，HFS+和APFS是苹果的私有文件系统，
它们支持xattr，这毫无疑问。此外macOS也支持FAT，这是一种比较“古老”的文件系统，仅仅提供相对简单的文件管理功能。但是经过我的测试，FAT文件系统中，竟然也可以正常使用xattr特性，是一件很神奇的事情。
macOS内核代码是开源的，我们可以尝试从代码层面分析，FAT文件系统是如何支持xattr特性的。答案在以下源文件中bsd/vfs/vfs_xattr.c，当我们调用setxattr系统调用时，FAT文件系统的相关回调函数会返回ENOTSUP，说明FAT并没有xattr特性的原生支持。但是接下来会执行以下函数default_setxattr，这个函数为FAT等文件系统提供了xattr的一整套兼容方案。
![
](https://images.seebug.org/content/images/2021/05/838ecded-69c9-4d38-9544-10ebfc455f36.png-w331s)
通过阅读代码，我们发现，在类似于FAT这种没有原生支持xattr的文件系统中，苹果引入了Apple
Double文件，来模拟xattr。在setxattr之后，在相同目录下，会多出一个前缀为"._"的隐藏文件，这就是FAT中存储xattr的位置了。但这同时也意味着，macOS需要在内核中对xattr文件进行解析，这是一个很危险的操作，如果解析不当很容易导致问题发生。
### 03 xattr漏洞之一（CVE-2020-27904）
首先简单介绍一下FAT中存储xattr的apple double文件结构，其实就是几种类型的数据依次排序。文件头部是apple double file
header和ext attr header两个数据结构，之后是attr entry，存储xattr名字和属性值在文件中的偏移，然后是xattr data。
漏洞代码位于bsd/vfs/vfs_xattr.c这个文件中。当进行代码审计时，注意到这个函数check_and_swap_attrhdr，它的作用是，对读入内存的apple
double文件进行校验，确认文件结构是否合法。图示的for循环，用来检查存储的xattr键值对是否位于有效的数据区。
![
](https://images.seebug.org/content/images/2021/05/85767944-bfa5-4a89-8ec3-ec757ae445f3.png-w331s)
但是让我们看一下红色标记的这一行代码，做了两件事情，offset和length相加，检查是否存在整数溢出，还检查了attr
data的结尾，是否超出header指定的数据区结尾。
但是，这里存在一个问题，这段代码没有对offset本身做检查，或者说没有对data的起始地址做检查，当offset < data_start时，attr
data将会跟之前的数据结构重合，例如attr entry，ext attr header，file
header！当调用setxattr设置xattr时，相当于一个写操作，是可以更改所有这些可以重叠的数据结构的。
#### 3.1 漏洞利用
我们必须利用setxattr覆写file
header的能力，做一些有用的事情，比如实现任意地址读写。让我们查看所有涉及到这两个header的代码，寻找有一些有用的副作用。
首先，找到了以下一段代码，当setxattr完成后，会通过write_xattrinfo把更改保存到文件。在写回文件之前，会通过data_start +
data_length重新计算文件大小。然而，这两个字段，都在非法offset的覆盖范围之内，我们可以更改其中的任何一个，来增大文件的大小，比如增加到64mb。这样，write_xattrinfo会遵照我们的指示，把同样多的内存写入到文件之中，但是apple
double文件一般只会分配64kb大小的内存，如果我们要求保存64mb内存，保存的长度大于实际内存大小，就发生了越界读操作。越界读取的内存会保存到apple
double文件之中，我们可以在用户态读取这个文件的内容，来探测内核的内存信息。
![
](https://images.seebug.org/content/images/2021/05/07411c43-976e-4e55-8cdb-f5ceb116c57b.png-w331s)
具体参考这张图，这是我通过以下的代码，实际dump到apple
double文件的内容，使用十六进制显示。绿色标记(offset+0x78)的是我伪造的一个非法offset，指向data_start字段，这可以通过篡改用户空间的"._"
apple double文件实现。文件偏移64kb开始处开始，就是我们越界读取到的内核内存。
![
](https://images.seebug.org/content/images/2021/05/18ddc741-72d9-444c-a77b-b3e3f778d302.png-w331s)
那么，有什么用处呢？大家都知道，现代内核中，都开启了ASLR保护，内核信息泄漏，最直观的用处就是可以用来探测内核内存布局。我在这个内存位置，提前布局了一个ipc_kmsg，参考kmsg的定义，当只有一个kmsg时，prev和next均指向自身，也就是这个kmsg的首地址，通过这一点，我们可以计算出自己在内存中的位置。所以，现在ASLR就不是一个问题了。
现在，我们有了一个oob-read，但是对于拿到内核权限来说，这还不够，通常我们需要通过一个内核任意地址写，来实现这个目标，这是这个漏洞最有挑战性的一个点了。