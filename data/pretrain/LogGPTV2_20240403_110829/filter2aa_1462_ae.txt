string text = info.GetValue("CliXml", typeof(string)) as 
string; 
if (text == null) 
{ 
throw PSTraceSource.NewArgumentNullException("info"); 
} 
PSObject pSObject = 
PSObject.AsPSObject(PSSerializer.Deserialize(text)); 
this.CommonInitialization(pSObject.ImmediateBaseObject); 
PSObject.CopyDeserializerFields(pSObject, this); 
} 
Which calls the following methods (the last 2 methods will be called if the deserialized PSObject wraps 
CimInstance): 
• 
PSDeserializer.DeserializeAsList() 
• 
System.management.automation.Deserializer.Deserialize()  
• 
System.Management.Automation.InternalDeserializer.ReadOneObject()  
• 
System.Management.Automation.InternalDeserializer.RehydrateCimInstance()System.
Management.Automation.InternalDeserializer.RehydrateCimInstanceProperty() 
// System.Management.Automation.InternalDeserializer 
private bool RehydrateCimInstanceProperty(CimInstance cimInstance, 
PSPropertyInfo deserializedProperty, HashSet 
namesOfModifiedProperties) 
{ 
… 
object obj = deserializedProperty.Value; 
if (obj != null) 
{ 
PSObject pSObject = PSObject.AsPSObject(obj); 
if (pSObject.BaseObject is ArrayList) 
{ 
23 https://msdn.microsoft.com/es-es/library/system.management.automation.psobject(v=vs.85).aspx  
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
if (pSObject.InternalTypeNames == null || 
pSObject.InternalTypeNames.Count == 0) 
{ 
return false; 
} 
string text2 = 
Deserializer.MaskDeserializationPrefix(pSObject.InternalTypeNames[0]
); 
if (text2 == null) 
{ 
return false; 
} 
Type type; 
if (!LanguagePrimitives.TryConvertTo(text2, 
CultureInfo.InvariantCulture, out type)) 
{ 
return false; 
} 
if (!type.IsArray) 
{ 
return false; 
} 
object obj2; 
if (!LanguagePrimitives.TryConvertTo(obj, type, 
CultureInfo.InvariantCulture, out obj2)) 
{ 
return false; 
} 
… 
In this method, it is possible to provide any arbitrary public Type as ElementType for Array and the next line will be 
executed with this Type: 
if (!LanguagePrimitives.TryConvertTo(obj, type, 
CultureInfo.InvariantCulture, out obj2)) 
This method will then call ConvertEnumerableToArray() 
// System.Management.Automation.LanguagePrimitives 
private static object ConvertEnumerableToArray(object 
valueToConvert, Type resultType, bool recursion, PSObject 
originalValueToConvert, IFormatProvider formatProvider, TypeTable 
backupTable) 
{ 
    object result; 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
    try 
    { 
        ArrayList arrayList = new ArrayList(); 
        Type type = resultType.Equals(typeof(Array)) ? 
typeof(object) : resultType.GetElementType(); 
        LanguagePrimitives.typeConversion.WriteLine("Converting 
elements in the value to convert to the result's element type.", new 
object[0]); 
        foreach (object current in 
LanguagePrimitives.GetEnumerable(valueToConvert)) 
        { 
            arrayList.Add(LanguagePrimitives.ConvertTo(current, 
type, false, formatProvider, backupTable)); 
        } 
        result = arrayList.ToArray(type); 
} 
It takes each element of the attacker controlled property value and tries to convert it to ElementType by calling 
LanguagePrimitives.ConvertTo() which calls LanguagePrimitives.FigureConversion(). This method 
tries to find the proper way for deserialization of various types. There are many attack vectors including: 
• 
Call the constructor of any public Type with 1 argument (attacker controlled) 
// System.Management.Automation.LanguagePrimitives 
internal static LanguagePrimitives.PSConverter 
FigureConstructorConversion(Type fromType, Type toType) 
{ 
… 
ConstructorInfo constructorInfo = null; 
try 
{ 
constructorInfo = toType.GetConstructor(new Type[] 
{ 
fromType 
}); 
} 
… 
• 
Call any setters of public properties for the attacker controlled type  
// System.Management.Automation.LanguagePrimitives 
internal static LanguagePrimitives.ConversionData 
FigureConversion(Type fromType, Type toType) 
{ 
… 
else if (typeof(IDictionary).IsAssignableFrom(fromType)) 
{ 
ConstructorInfo constructor = 
toType.GetConstructor(Type.EmptyTypes); 
if (constructor != null || (toType.IsValueType && 
!toType.IsPrimitive)) 
{ 
LanguagePrimitives.ConvertViaNoArgumentConstructor 
@object = new 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
LanguagePrimitives.ConvertViaNoArgumentConstructor(constructor, 
toType); 
pSConverter = new 
LanguagePrimitives.PSConverter(@object.Convert); 
conversionRank = ConversionRank.Constructor; 
} 
… 
//System.Management.Automation.LanguagePrimitives.ConvertViaNoArgumen
tConstructor 
internal object Convert(object valueToConvert, Type resultType, bool 
recursion, PSObject originalValueToConvert, IFormatProvider 
formatProvider, TypeTable backupTable) 
{ 
object result; 
try 
{ 
… 
else 
{ 
IDictionary properties = valueToConvert as IDictionary; 
LanguagePrimitives.SetObjectProperties(obj, properties, 
resultType, new 
LanguagePrimitives.MemberNotFoundError(LanguagePrimitives.CreateMembe
rNotFoundError), new 
LanguagePrimitives.MemberSetValueError(LanguagePrimitives.CreateMembe
rSetValueError), false); 
} 
• 
Call the static public Parse(string) method of the attacker controlled type. 
// System.Management.Automation.LanguagePrimitives 
private static LanguagePrimitives.PSConverter 
FigureParseConversion(Type fromType, Type toType) 
{ 
… 
else if (fromType.Equals(typeof(string))) 
{ 
BindingFlags bindingAttr = BindingFlags.Static | 
BindingFlags.Public | BindingFlags.FlattenHierarchy | 
BindingFlags.InvokeMethod; 
MethodInfo methodInfo = null; 
… 
try 
{ 
methodInfo = toType.GetMethod("Parse", 
bindingAttr, null, new Type[] 
{ 
typeof(string) 
}, null); 
} 
… 
For the last case we can use System.Windows.Markup.XamlReader.Parse() to parse an attacker controlled 
Xaml code which can be used to call any public static method such as Process.Start(“calc.exe”). 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
Example: NancyFX (CVE-2017-9785) 
NancyFX 24 is a lightweight web framework based on Ruby's Sinatra. It uses a cookie called "NCSRF" to protect 
against CSRF attacks. This cookie contains a unique token and it is implemented as a CsrfToken instance serialized 
with BinaryFormatter and then base64 encoded. When visiting a site built with NancyFX and using CSRF 
protection, the site will set a cookie such as: 
AAEAAAD/////AQAAAAAAAAAMAgAAAD1OYW5jeSwgVmVyc2lvbj0wLjEwLjAuMCwgQ3Vs
dHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1udWxsBQEAAAAYTmFuY3kuU2VjdXJp
dHkuQ3NyZlRva2VuAwAAABw8UmFuZG9tQnl0ZXM+a19fQmFja2luZ0ZpZWxkHDxDcmVh
dGVkRGF0ZT5rX19CYWNraW5nRmllbGQVPEhtYWM+a19fQmFja2luZ0ZpZWxkBwAHAg0C
AgAAAAkDAAAAspLEeOrO0IgJBAAAAA8DAAAACgAAAAJ9FN3bma5ztsdODwQAAAAgAAAA
At9dloO6qU2iUAuPUAtsq+Ud0w5Qu1py8YhoCn5hv+PJCwAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAA= 
By submitting our PSObject payload encoded in base64 encoding, an attacker will be able to gain arbitrary code 
execution on the application server upon deserialization of the cookie. 
Interestingly, the 2.x pre-released moved away from BinaryFormatter to make it compatible with .NET Core. 2.x 
version implemented a custom JSON parser which now emits cookies such as: 
{"RandomBytes":[60,142,24,76,245,9,202,183,56,252],"CreatedDate":"20
17-04-
03T10:42:16.7481461Z","Hmac":[3,17,70,188,166,30,66,0,63,186,44,213,
201,164,3,19,56,139,78,159,170,193,192,183,242,187,170,221,140,46,24
,197],"TypeObject":"Nancy.Security.CsrfToken, Nancy, 
Version=2.0.0.0, Culture=neutral, PublicKeyToken=null”}  
As readers can tell, the cookie includes a Type Discriminator that will be used to recreate the CsrfToken object. Since 
setters will be called on the reconstructed object and the framework won’t check that deserialized object type, it is 
possible to gain remote code execution by using the setter approach we covered in the JSON section. 
Report Timeline 
Issue was reported on April 24  
Fix was released on July 14 
24 https://www.nuget.org/packages/Nancy/ 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
Can we extend the attack to other formats?  
The presented the approach and gadgets that are not just JSON specific as we saw with the .NET formatters. These 
apply to any deserialization format since objects will need to be created and populated. This process, as we already 
saw, normally implies calling setters or deserialization constructors on reconstructed objects. Therefore, if format 
allows an attacker to control deserialized type, the same gadgets could be used to attack these formats. 
We can summarize the requirements to attack any deserialization format in the following: 
• 
An attacker can control type to be instantiated upon deserialization 
• 
Methods are called on the reconstructed objects 
• 
Gadget space is big enough to find types we can chain to get RCE 
We will now present several formats which satisfy the previous requirements and that should never be used with 
untrusted data: 
Examples 
FsPickler (xml/binary) 
Project Site: http://mbraceproject.github.io/FsPickler/ 
FsPickler is a serialization library that facilitates the distribution of objects across .NET processes. The implementation 
focuses on performance and supporting as many types as possible, where possible. It supports multiple, pluggable 
serialization formats such as XML, JSON and BSON; also included is a fast binary format of its own. 
All formats supported by FsPickler include Type discriminators in the serialized data. It does, however, perform a strict 
type inspection which applies a type whitelist based on the expected type object graph. As we already saw for other 
formatters, if object graph contains a member whose type can be assigned any of the presented setter or serialization 
constructor gadgets, attackers will be able to gain remote code execution. 
SharpSerializer 
Project Site: http://www.sharpserializer.com/en/index.html 
SharpSerializer is an open source XML and binary serializer for .NET Framework, Silverlight, Windows Phone, 
Windows RT (Metro) and Xbox360. It is meant to replace the native XmlSerializer by overcoming most of XmlSerializer 
limitations such as dealing with interface members, generic members, polymorphism, etc. To do that, it includes type 
discriminators in the serialize data and instantiate those types without a proper type control. 
Wire/Hyperion  
Project Site: https://github.com/akkadotnet/Hyperion 
Hyperion is a custom binary serializer format designed for Akka.NET. It was designed to transfer messages in 
distributed systems, for example service bus or actor model based systems where it is common to receive different 
types of messages and apply pattern matching over those messages. If the messages do not carry over all the relevant 
type information to the receiving side, the message might no longer match exactly what your system expect. To do so, 
Hyperion includes type discriminators and do not perform any type control which let attackers specify arbitrary types 
to be instantiated. On those objects, setters, serialization constructors and callbacks will be invoked, allowing attackers 
to gain remote code execution. 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
Beware when rolling your own unmarshaller or wrapper 
As with crypto or any security sensitive API, it is not recommended to roll you own format if you are not fully aware of 
the security risks of such APIs. 
We already presented the vulnerable custom JSON parser developed to handle the CSRF cookies in NancyFX 
framework. Another good example is the wrapper around XmlSerializer developed by DotNetNuke (DNN) CMS. 
Example: DotNetNuke Platform (CVE-2017-9822) 
DNN offers the ability to save session information on a cookie called DNNPersonalization when the user has not log 
in yet. To do so, the developers implemented a custom XML format which looks like: 
    false 
The framework extracts the type attribute from item tag and creates a new XmlSerialization deserializer using 
the extracted type as expected type. 
Since we can control the expected type by providing any arbitrary type in the cookie, we may initialize any type and 
get the setters called. In practice, XmlSerializer has many limitations including not being able to serialize types 
with nested interface members. This limitation does not stop us from using our ObjectDataProvider gadget since 
it is XmlSerializer friendly, but there is another limitation stopping us from using ObjectDataProvider, it contains 
a System.Object member (objectInstance). 
The way that XmlSerializer works is that at construction time, it inspects the object graph of the passed expected 
type and "learns" all the required types to serialize/deserialize objects. If the type contains a System.Object member, 
its type will not be known at runtime, and if not present in the whitelist of learnt types, the deserialization will fail. We 
need a way to force XmlSerializer to learn arbitrary types. 
Fortunately for us, we can use parametrized types for that purpose. If, for example, we pass the expected type of 
List, the object graphs of List, Process and ObjectDataProvider will be 
inspected to build the whitelist. 
Last problem to overcome is that Process is not serializable since it contains interface members, but that is not a big 
issue since we can use many other payloads other than Process.Start(). 
Putting together these tricks we can craft a payload like the following to deploy a webshell: 
        PullFile 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
          http://ctf.pwntester.com/shell.aspx 
          C:\inetpub\wwwroot\dotnetnuke\shell.aspx 
Report Timeline 
Issues was reported on June 1st 
Fix was released on July 6 25 
25 http://www.dnnsoftware.com/community/security/security-center 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
Conclusions 
Serializers are security sensitive APIs and should not be used with untrusted data. This is not a problem specific to 
Java serialization, a specifc .NET formatter or any specific formats such as JSON, XML or Binary. All serializers need 
to reconstruct objects and will normally invoke methods that attackers will try to abuse to initiate gadget chains leading 
to arbitrary code execution.  
In this whitepaper, we presented a comprehensive list of vulnerable libraries and formats which can be extended to 
other languages, formats and libraries. The results will probably be similar since the same premises will also apply. 
We also presented the requirements for serializers to be vulnerable to this kind of attacks with the main goal of raising 
awareness and equipping developers with better tools when chosing serialization libraries.