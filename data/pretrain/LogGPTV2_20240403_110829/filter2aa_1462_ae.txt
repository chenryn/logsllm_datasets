### Optimized Text

#### Code Snippet
```csharp
string text = info.GetValue("CliXml", typeof(string)) as string;
if (text == null)
{
    throw PSTraceSource.NewArgumentNullException("info");
}

PSObject pSObject = PSObject.AsPSObject(PSSerializer.Deserialize(text));
this.CommonInitialization(pSObject.ImmediateBaseObject);
PSObject.CopyDeserializerFields(pSObject, this);
```

#### Method Calls
The following methods are called during the deserialization process, particularly if the `PSObject` wraps a `CimInstance`:
- `PSDeserializer.DeserializeAsList()`
- `System.Management.Automation.Deserializer.Deserialize()`
- `System.Management.Automation.InternalDeserializer.ReadOneObject()`
- `System.Management.Automation.InternalDeserializer.RehydrateCimInstance()`
- `System.Management.Automation.InternalDeserializer.RehydrateCimInstanceProperty()`

#### Rehydration of CimInstance Property
```csharp
private bool RehydrateCimInstanceProperty(CimInstance cimInstance, PSPropertyInfo deserializedProperty, HashSet<string> namesOfModifiedProperties)
{
    object obj = deserializedProperty.Value;
    if (obj != null)
    {
        PSObject pSObject = PSObject.AsPSObject(obj);
        if (pSObject.BaseObject is ArrayList)
        {
            if (pSObject.InternalTypeNames == null || pSObject.InternalTypeNames.Count == 0)
            {
                return false;
            }

            string text2 = Deserializer.MaskDeserializationPrefix(pSObject.InternalTypeNames[0]);
            if (text2 == null)
            {
                return false;
            }

            Type type;
            if (!LanguagePrimitives.TryConvertTo(text2, CultureInfo.InvariantCulture, out type))
            {
                return false;
            }

            if (!type.IsArray)
            {
                return false;
            }

            object obj2;
            if (!LanguagePrimitives.TryConvertTo(obj, type, CultureInfo.InvariantCulture, out obj2))
            {
                return false;
            }
        }
    }
}
```

In this method, it is possible to provide any arbitrary public `Type` as the `ElementType` for an array. The next line will be executed with this `Type`:
```csharp
if (!LanguagePrimitives.TryConvertTo(obj, type, CultureInfo.InvariantCulture, out obj2))
```
This method will then call `ConvertEnumerableToArray()`.

#### Convert Enumerable to Array
```csharp
private static object ConvertEnumerableToArray(object valueToConvert, Type resultType, bool recursion, PSObject originalValueToConvert, IFormatProvider formatProvider, TypeTable backupTable)
{
    try
    {
        ArrayList arrayList = new ArrayList();
        Type elementType = resultType.Equals(typeof(Array)) ? typeof(object) : resultType.GetElementType();

        LanguagePrimitives.typeConversion.WriteLine("Converting elements in the value to convert to the result's element type.", new object[0]);

        foreach (object current in LanguagePrimitives.GetEnumerable(valueToConvert))
        {
            arrayList.Add(LanguagePrimitives.ConvertTo(current, elementType, false, formatProvider, backupTable));
        }

        return arrayList.ToArray(elementType);
    }
    catch (Exception ex)
    {
        // Handle exception
        throw;
    }
}
```

This method takes each element of the attacker-controlled property value and tries to convert it to the `ElementType` by calling `LanguagePrimitives.ConvertTo()`, which in turn calls `LanguagePrimitives.FigureConversion()`. This method tries to find the proper way to deserialize various types. There are several attack vectors, including:
- Calling the constructor of any public `Type` with one argument (controlled by the attacker).
- Calling any setters of public properties for the attacker-controlled type.
- Calling the static public `Parse(string)` method of the attacker-controlled type.

#### Example: NancyFX (CVE-2017-9785)
NancyFX is a lightweight web framework based on Ruby's Sinatra. It uses a cookie called "NCSRF" to protect against CSRF attacks. This cookie contains a unique token and is implemented as a `CsrfToken` instance serialized with `BinaryFormatter` and then base64 encoded. When visiting a site built with NancyFX and using CSRF protection, the site will set a cookie such as:
```
AAEAAAD/////AQAAAAAAAAAMAgAAAD1OYW5jeSwgVmVyc2lvbj0wLjEwLjAuMCwgQ3Vs... [base64 encoded data]
```

By submitting a `PSObject` payload encoded in base64, an attacker can gain arbitrary code execution on the application server upon deserialization of the cookie.

Interestingly, the 2.x pre-released version moved away from `BinaryFormatter` to make it compatible with .NET Core. The 2.x version implemented a custom JSON parser, which now emits cookies such as:
```json
{"RandomBytes":[60,142,24,76,245,9,202,183,56,252],"CreatedDate":"2017-04-03T10:42:16.7481461Z","Hmac":[3,17,70,188,166,30,66,0,63,186,44,213,201,164,3,19,56,139,78,159,170,193,192,183,242,187,170,221,140,46,24,197],"TypeObject":"Nancy.Security.CsrfToken, Nancy, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null"}
```

Since the cookie includes a type discriminator that will be used to recreate the `CsrfToken` object, and since setters will be called on the reconstructed object without checking the deserialized object type, it is possible to gain remote code execution by using the setter approach covered in the JSON section.

**Report Timeline:**
- Issue reported on April 24
- Fix released on July 14

#### Extending the Attack to Other Formats
The presented approach and gadgets are not specific to JSON. They apply to any deserialization format because objects need to be created and populated. This process typically involves calling setters or deserialization constructors on reconstructed objects. If the format allows an attacker to control the deserialized type, the same gadgets could be used to attack these formats.

**Requirements to Attack Any Deserialization Format:**
- An attacker can control the type to be instantiated upon deserialization.
- Methods are called on the reconstructed objects.
- The gadget space is large enough to find types that can be chained to achieve RCE.

#### Examples
- **FsPickler (XML/Binary):** A serialization library that supports multiple formats, including XML, JSON, and BSON. It includes type discriminators but performs strict type inspection.
- **SharpSerializer:** An open-source XML and binary serializer for .NET Framework, Silverlight, Windows Phone, Windows RT (Metro), and Xbox360. It includes type discriminators and instantiates types without proper type control.
- **Wire/Hyperion:** A custom binary serializer format designed for Akka.NET. It includes type discriminators and does not perform any type control, allowing attackers to specify arbitrary types to be instantiated.

#### Beware When Rolling Your Own Unmarshaller or Wrapper
It is not recommended to create your own unmarshaller or wrapper if you are not fully aware of the security risks. For example, the custom JSON parser developed for handling CSRF cookies in NancyFX and the wrapper around `XmlSerializer` in DotNetNuke (DNN) CMS are both vulnerable.

**Example: DotNetNuke Platform (CVE-2017-9822)**
DNN offers the ability to save session information in a cookie called `DNNPersonalization` when the user has not logged in yet. The developers implemented a custom XML format, which allows an attacker to control the expected type by providing any arbitrary type in the cookie. This can lead to the initialization of any type and the invocation of setters.

**Report Timeline:**
- Issue reported on June 1st
- Fix released on July 6

#### Conclusions
Serializers are security-sensitive APIs and should not be used with untrusted data. This is not a problem specific to Java serialization, a specific .NET formatter, or any specific format such as JSON, XML, or Binary. All serializers need to reconstruct objects and will normally invoke methods that attackers can abuse to initiate gadget chains leading to arbitrary code execution.

In this whitepaper, we presented a comprehensive list of vulnerable libraries and formats, which can be extended to other languages, formats, and libraries. The results will likely be similar since the same premises apply. We also presented the requirements for serializers to be vulnerable to such attacks, with the main goal of raising awareness and equipping developers with better tools when choosing serialization libraries.