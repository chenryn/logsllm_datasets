在这些偏移量处检查我们新加的未签名DLL文件，我们看到它们当前设置为0：
显而易见的问题是，我们应该如何设置int32_2和int32_3的值，以将Foo.txt中粘贴在DLL文件末尾的字节读入numArray2中？
再次检查ValidatePeSignature的代码，第20-22行有所相关：
    if (file.Position != (long) (int32_2 + 8))
    file.Seek((long) (int32_2 + 8), SeekOrigin.Begin);
    file.Read(numArray2, 0, int32_3 - 8);
因此，读入numArray2的字节将是DLL文件中位于int32_2+8和int32_3-8之间的DLL文件中的字节。
我们想强制该算法读取已插入到DLL文件末尾的“Foo.txt”的内容，这个文件从0x1200开始，长度为11360字节（如果你要验证这些数字，请参阅上面Foo.txt粘贴到DLL中的截图，调试器的截图显示了numArray2的长度）。考虑到这一点，算出int32_2和int32_3值很简单：
  * int32_2 = 0x1200-0x8 = 0x11F8
  * int32_3 = 11360 = 0x2C68
如下图所示：
现在，针对这个新的DLL文件HPwn.dll运行签名验证算法，我们得到以下结果：
#### 八、获得任意代码执行
构建了我们自己的惠普“解决方案”软件包的方法，以及另一种方法来绕过他们的数字签名验证机制，剩下唯一的障碍就是构建与惠普平台兼容的恶意软件。
##### 创建恶意软件
为了创建恶意软件，我们以HP ThinPrint客户端主类中的反编译代码为例：
幸运的是，这段代码非常简单。只要有从打印机中提取的HP.ExtLib.dll副本，完成一个山寨的应该是比较直接的。下图展示了大多数我们修改后的成果，这只是相同的方法和接口，但执行不同的操作：
这个项目的副本将在[GitHub](https://github.com/foxglovesec/HPwn)上发布。“DoBadStuff”功能只需执行以下操作：
  1. 从  上下载文件
  2. 执行打印机上文件中指定的命令
  3. 等待5秒
  4. 重复操作
必须克服的一个技术障碍是，项目需要编译的.NET Compact Framework版本仅包含在Visual Studio 2008
Professional中。具体来说，这个项目需要针对“Windows CE设备”：
最终我们取得了Visual Studio 2008 Pro的副本，并成功构建了该项目。
##### 测试恶意软件
在执行新加的DLL文件中的签名验证过程之后，使用[我们的GitHub中的python代码](https://github.com/foxglovesec/HPwn/blob/master/BDL_Patcher/hp_solution_patcher.py)将该DLL加载到BDL中，修改后的BDL文件成功上传到打印机：
回想一下，我们的恶意软件从中下载文件，在这个情况下，文件“blar”包含一个简单的命令，只是让打印机“ping”我们的另一台服务器。我们可以通过监视第二台服务器，来确认该命令成功执行：
托管HTTP服务器上的文件之后，我们立即看到打印机为文件发出请求：
在打印机上实际运行文件中的命令立即传送到了第二台服务器，在这种情况下，服务器被配置为打印出对其请求的任何域名。它开始打印“twoping.dns.evildomain.net”：
#### 九、未来的工作
过去对惠普打印机的研究似乎因为缺乏可用的固件文件和OXP SDK而受到阻碍。例如下面PrinterHacking Wiki所说的：
> 对于较新的设备，惠普使用基于“开放式扩展平台”（OXP）的Web服务，而不是使用没有公开可用的SDK。
这是OXP SDK的可用信息，并且没有关于BDL文件格式的信息，本报告为进一步工作奠定了基础，特别是在进一步深入代码审查后，对以下领域的工作可能更有成效。
##### 打印机开发模式
在审查源代码时，我们注意到惠普打印机可以进入“开发”模式。一旦启用这个模式，就可以自由安装未签名的固件更新。我们在HP.Mfp.Services.Installation.Fim.SignedConfigBundleRepository中找到了唯一可以启用开发模式的代码路径：
    protected override void InstallMfgConfigPackage(FileInfo[] files)
    {
    if (files != null &amp;amp;&amp;amp; files.Length &amp;gt; 0)
    {
    foreach (FileInfo file in files)
    {
    if (!(file.Name == "pak.hdr") &amp;amp;&amp;amp; new SecureNvramBundle().DecryptAndValidateManufacturingPackage(this.GetFileContents(file)) != null)
    {
    this.TransitionToDevMode();
    LogManager.InfoLog.Log("HP.Mfp.Services.Installation.Fim", 10030852U, new KeyValuePair&amp;lt;string, string&amp;gt;("MESSAGE", "Signed Mfg Config Bundle install succeeded. Development Mode Activated."));
    return;
    }
    }
    }
    LogManager.WarningLog.Log("HP.Mfp.Services.Installation.Fim", 10030853U, new KeyValuePair&amp;lt;string, string&amp;gt;("MESSAGE", "Signed Mfg Config Bundle digital signature validation failed"));
    }
如果有人能够获得有效的“制造配置包”并将其安装到打印机上，就将启用打印机上的“开发”模式，一直到下一次打印机重新启动。因为“制造配置包”不容易找到，所以这个假设没有经过测试，同时我们也不确定别人会如何安装它。
##### 选择固件更新机制
有许多方法可以更新惠普打印机的固件，大多数管理员都会意识到可以通过打印机的Web界面和“Web Jet
Admin”客户端安装固件更新。固件也可以在启动时通过BOOTP /
TFTP选项安装，但是经过测试后，我们没有找到正确的选项安装成功。另外，惠普打印机上的安全设置页面表明可以通过端口9100利用打印作业安装固件：
没有关于这个功能的文档，不过这个有可能是能成功的。
特别有趣的是，这些可选择的固件更新机制中，有些可能是忽略执行签名验证的替代代码路径。例如，HP.Mfp.Services.Installation.Fim.Fim.RemoteInstall中的方法似乎是一种要求某种固件更新或安装的功能，我们对这种方法进行快速代码审查，发现其中不包含任何表示数字签名正在验证的代码。还需要更多的研究来验证这一发现。
* * *