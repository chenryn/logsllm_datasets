这样的程序语言而言，数据访问都是逐行进行的，想要处理多行数据时，
就需要使用循环来实现。而SQL可以使用一条语句来操作多行数据，这
就是SQL和大部分编程语言的一大区别。
9-3 通过Java连接PostgreSQL 305 ●
图9-11 二元表形式的结果集
product_id product_name
0001 T恤衫
0002 打孔器
0003 运动T恤
0004 菜刀
0005 高压锅
0006 叉子
0007 擦菜板
0008 圆珠笔
游标自上而下移动
游标自上而下移动
“while（rs.next（））”的意思就是逐行循环访问记录，直到到达
记录末尾。就像计算尺的游标一样，从上到下逐条访问结果集中的记录。
法则9-4
在Java等程序语言的世界中，每次只能访问一条数据。因此，在访问多条数据时，
需要使用循环处理。
更新表中的数据
最后，让我们通过Java来执行用于更新的SQL语句，以更新表中的数
据。这里使用的示例程序，执行了一条删除商品表中全部数据的DELETE
语句。源代码如代码清单9-7所示，源文件名为“DBConnect3.java”。
代码清单9-7 执行用于更新的SQL语句来更新表中数据的Java 程序
import java.sql.*;
public class DBConnect3{
public static void main(String[] args) throws Exception {
/* 1) PostgreSQL的连接信息 */
Connection con;
Statement st;
①
String url = "jdbc:postgresql://localhost:5432/shop";
String user = "postgres";
String password = "test";
/* 2) 定义JDBC驱动 */
Class.forName("org.postgresql.Driver"); ②
● 306 第9章 通过应用程序连接数据库
/* 3) 连接PostgreSQL */
con = DriverManager.getConnection(url, user, password);
st = con.createStatement(); ③
/* 4) 执行SELECT语句 */
int delcnt = st.executeUpdate("DELETE FROM Product"); ④
/* 5) 在画面中显示结果 */
System.out.print(delcnt + "已删除行"); ⑤
/* 6) 切断与PostgreSQL的连接 */
st.close();
con.close(); ⑥
}
}
源代码中发生变动的地方就是把④处的SQL语句变成了DELETE语
句，以及把执行SQL语句的命令从executeQuery变成了executeUpdate。
不论INSERT语句还是UPDATE语句，Java在执行用于更新的SQL语
句时使用的都是executeUpdate。此外，这里并不是要取得表中的数
据，因此用不到的ResultSet类也一并从源代码中删除了。
编译和执行的命令如下。
编译
C:\PostgreSQL\java\jdk\bin\javac DBConnect3.java
执行
C:\PostgreSQL\java\jdk\bin\java –cp C:\PostgreSQL\jdbc\*;. DBConnect3
执行成功之后，命令提示符中会显示“8条数据已经被删除”。虽然
执行多行用于更新的SQL语句时还需要编写控制事务处理的代码，不过
基本上变动不大。此外，通过DBConnect3执行DELETE语句时会默
认进行提交操作。
法则9-5
通过使用驱动，程序可以执行包括SELECT、DELETE、UPDATE和INSERT在内
的所有SQL语句。
9-3 通过Java连接PostgreSQL 307 ●
小结
至此，之后无论执行多么复杂的SQL语句，都只需要改变④和⑤处
的代码就可以了。在实际的系统中，大家可能会遇到类似于在程序中动态
地组合SQL语句，或者把从数据库中选取的数据进行编辑后再更新数据
库的情况，即使在对这些复杂的业务逻辑进行编码时，也可以以本章讲解
的内容为基础。
练习题
9.1 通过执行DBConnect3，会清空Product表中的数据。下面我们再次
使用代码清单1-6中的INSERT语句向表中插入数据。不过这次需要请大
家编写可以执行上述操作的Java程序，然后编译运行。
代码清单1-6 向Product表中插入数据的SQL语句
INSERT INTO Product VALUES ('0001', 'T恤衫', '衣服', 1000, 500, '2009-09-20');
INSERT INTO Product VALUES ('0002', '打孔器', '办公用品', 500, 320, '2009-09-11');
INSERT INTO Product VALUES ('0003', '运动T恤', '衣服', 4000, 2800, NULL);
INSERT INTO Product VALUES ('0004', '菜刀', '厨房用具', 3000, 2800, '2009-09-20');
INSERT INTO Product VALUES ('0005', '高压锅', '厨房用具', 6800, 5000, '2009-01-15');
INSERT INTO Product VALUES ('0006', '叉子', '厨房用具', 500, NULL, '2009-09-20');
INSERT INTO Product VALUES ('0007', '擦菜板', '厨房用具', 880, 790, '2008-04-28');
INSERT INTO Product VALUES ('0008', '圆珠笔', '办公用品', 100, NULL, '2009-11-11');
9.2 请大家对练习题9.1中插入的数据进行修改。如下所示，将商品“T恤衫”
修改成“Y恤衫”。
修改前
product_id | product_name | product_type | sale_price | purchase_price | regist_date
----------+-------------+------------+----------+--------------+-----------
0001 | T恤衫 | 衣服 | 1000 | 500 | 2009-09-20
修改后
product_id | product_name | product_type | sale_price | purchase_price | regist_date
----------+-------------+------------+----------+--------------+-----------
0001 | Y恤衫 | 衣服 | 1000 | 500 | 2009-09-20
请大家编写可以执行上述修改的Java程序，然后编译运行。
附录
练习题答案
※本附录中程序（SQL语句）的答案并非唯一，还存在其他满足条件的解答方法。
※代码清单中的“”是为了配合页面显示所进行的换行操作。
1.1
CREATE TABLE Addressbook
(
regist_no INTEGER NOT NULL,
name VARCHAR(128) NOT NULL,
address VARCHAR(256) NOT NULL,
tel_no CHAR(10) ,
mail_address CHAR(20) ,
PRIMARY KEY (regist_no));
1.2
PostgreSQL MySQL
ALTER TABLE Addressbook ADD COLUMN postal_code CHAR(8) NOT NULL;
Oracle
ALTER TABLE Addressbook ADD (postal_code CHAR(8)) NOT NULL;
SQL Server
ALTER TABLE Addressbook ADD postal_code CHAR(8) NOT NULL;
DB2
无法添加。
在DB2中，如果要为添加的列设置NOT NULL约束，需要像下面这样指定默认值，或
者删除NOT NULL约束，否则就无法添加新列。
DB2修正版
ALTER TABLE Addressbook ADD COLUMN postal_code CHAR(8) NOT NULL DEFAULT 
'0000-000';
1.3
DROP TABLE Addressbook;
1.4 删 除后的表无法使用命令进行恢复。请使用习题1.1答案中的CREATE TABLE语句再
次创建所需的表。
附录 练习题答案 309 ●
2.1
SELECT product_name, regist_date
FROM Product
WHERE regist_date >= '2009-04-28';
执行结果
product_name | regist_date
---------------+------------
T恤衫 | 2009-09-20
打孔器 | 2009-09-11
菜刀 | 2009-09-20
叉子 | 2009-09-20
圆珠笔 | 2009-11-11
2.2 ①~③中的SQL语句都无法选取出任何一条记录。
2.3 SELECT语句①
SELECT product_name, sale_price, purchase_price
FROM Product
WHERE sale_price >= purchase_price + 500;
SELECT语句②
SELECT product_name, sale_price, purchase_price
FROM Product
WHERE sale_price - 500 >= purchase_price;
2.4
SELECT product_name, product_type,
sale_price * 0.9 - purchase_price AS profit
FROM Product
WHERE sale_price * 0.9 - purchase_price > 100
AND ( product_type = '办公用品'
OR product_type = '厨房用具');
执行结果
product_name | product_type | profit
--------------+--------------+-------
打孔器 | 办公用品 | 130.0
高压锅 | 厨房用具 | 1120.0
3.1 存在以下3个错误。
1．使用了字符类型的列（product_name）作为SUM函数的参数。
● 310 附录 练习题答案
» >>解答
SUM函数只能使用数值类型的列作为参数。
2．WHERE子句写在了GROUP BY子句之后。
» >>解答
WHERE子句必须写在GROUP BY子句之前。
3．SELECT子句中存在GROUP BY子句中未指定的列（product_id）。
» >> 解答
使用GROUP BY子句时，书写在SELECT子句中的列有很多限制。GROUP BY
子句中未指定的列不能书写在SELECT子句之中。
此外，虽然在SELECT子句和FROM子句之间添加注释在语法上没有问题，但
因为这样会使SQL语句难以阅读，所以请不要这样书写。
在WHERE子句中指定regist_date的大小关系作为条件并没有什么问题。
3.2
SELECT product_type, SUM(sale_price), SUM(purchase_price)
FROM Product
GROUP BY product_type
HAVING SUM(sale_price) > SUM(purchase_price) * 1.5;
» >> 解答
因为该SELECT语句是在按照商品种类进行分组之后，指定各组所对应的条件，
所以使用了HAVING子句。条件为“大于1.5倍”，而不是“大于等于1.5倍”，因此
条件表达式为“>”而不是“>=”。
3.3
SELECT *
FROM Product
ORDER BY regist_date DESC, sale_price;
» >> 解答
使用ORDER BY子句指定排列顺序之后，肯定有一列会按照升序或者降序进行
排列。本习题中是登记日期（NULL排在开头还是末尾会根据DBMS不同而不同，无
需考虑）。因此我们能够推断出首先是按照登记日期的降序进行排序的。
接下来，对于日期相同的记录，例如同为“2009-09-20”的3条记录，可以看出
是按照销售单价的升序进行排序的。
附录 练习题答案 311 ●
4.1 1行也选取不出来。
» >> 解答
A先生使用BEGIN TRANSACTION启动了事务处理，然后开始执行INSERT
语句。因此，在A先生使用COMMIT确定该更新之前，B先生等其他用户都无法看
到A先生进行更新的结果。这就是基于ACID特性中的I，也就是独立性（Isolation）
的现象。当然，由于A先生在COMMIT之前能看到自己进行过的更新，因此如果A
先生执行SELECT * FROM Product;的话，会得到3条记录。
顺便提一下，如果想要确认该现象，并不需要两个人。只需使用电脑打开两个窗
口连接同一个数据库，一个人就能完成两个人的工作了。
4.2 因为商品编号列违反了主键约束，所以会发生错误，1行也插入不了。
» >>解答
如果该INSERT能够正常执行的话，Product（商品）表的状态应该会像下面
这样变为6行数据。
Product（商品）表
商品编号 商品名称 商品种类 销售单价 进货单价 登记日期
0001 T恤衫 衣服 1000 500 2009-09-20
0002 打孔器 办公用品 500 320 2009-09-11
0003 运动T恤 衣服 4000 2800
0001 T恤衫 衣服 1000 500 2009-09-20
0002 打孔器 办公用品 500 320 2009-09-11
0003 运动T恤 衣服 4000 2800
但是，显然上述记录违反了商品编号列的主键约束（不能存在主键重复的记录）。
违反该约束带来的后果就是无法执行更新操作，这就是ACID特性中的C——一致
性（Consistency）。
4.3
INSERT INTO ProductMargin (product_id, product_name, sale_price, 
purchase_price, margin)
SELECT product_id, product_name, sale_price, purchase_price, 
sale_price - purchase_price
FROM Product;
● 312 附录 练习题答案
» >>解答
Product（商品）表和ProductMargin（商品利润）表中定义完全相同的
列 product_id（商品编号）、product_name（商品名称）、sale_price
（销售单价）、purchase_price（进货单价），可以通过SELECT语句直接
从Product（商品）表取出插入到ProductMargin（商品利润）表中。只有
Product（商品）表中没有的margin（利润）列的值需要根据purchase_
price进货单价和sale_price销售单价进行计算。
4.4 1．
-- 下调销售单价
UPDATE ProductMargin
SET sale_price = 3000
WHERE product_id = '0003';
2．
-- 重新计算利润
UPDATE ProductMargin
SET margin = sale_price - purchase_price
WHERE product_id = '0003';
5.1
-- 创建视图的语句
CREATE VIEW ViewPractice5_1 AS
SELECT product_name, sale_price, regist_date
FROM Product
WHERE sale_price >= 1000
AND regist_date = '2009-09-20';
5.2 会发生错误。
» >>解答
对视图的更新归根结底是对视图所对应的表进行更新。因此，该INSERT语句实
质上和下面的INSERT语句相同。