31k
63k
76k
27k
110
89
106
1k
70
X
G
S
8k
65k
114k
83k
e
d
o
c
o
r
c
i
M
0x9a
0x96
0x8e
0xc6
0x1e
0x25
0x20
0x2e
0x07
0x12
0x200004d
0x200004d
0x810100b
0x800820b
0x8001137
Instead, by repeatedly leaking the same information and
aligning the leaked bytes, we can retrieve the secret with-
out requiring a hard synchronization primitive. For this
purpose, we show a noise-resilient mask-sub-rotate attack
technique that leaks 8 bytes from a given index at a time.
1
movq (%1), %rax
Load
0f de bc 9a 78 56 34 12
1
movq (%1), %rax
Load
ff ff 80 7f 3a 74 01 3c
2
3
4
andq $0xffffff, %rax
Mask
00 00 00 00 00 56 34 12
subq $0x3412, %rax
Match
00 00 00 00 00 56 00 00
rorq $16, %rax
Rotate
00 00 00 00 00 00 00 56
2
3
4
andq $0xffffff, %rax
Mask
00 00 00 00 00 74 01 3c
subq $0x3412, %rax
Match
00 00 00 00 00 74 cd 2a
rorq $16, %rax
Rotate
cd 2a 00 00 00 00 00 74
5
Leak (in bound)
5
Leak (out of bounds)
Fig. 7: Using mask, subtract, and rotate we can selectively
ﬁlter data in speculative execution to match prior observations,
eliminating a large amount of noise.
As shows in Figure 7, 1 suppose we already know part
of the bytes we want to leak (either by leaking them ﬁrst
or knowing them through some other means). 2 In the
speculative path we can mask the bytes that we do not
know yet. 3 By subtracting the known value, 4 and
then rotating by 16 bytes, values that are not consistent
with previous observations will be out of bounds in our
Flush + Reload buﬀer, meaning we do not leak them.
This technique greatly improves the observed signal.
We use this technique to develop an exploit on Linux
that is able to leak the contents of the /etc/shadow ﬁle.
Our approach involves repeatedly invoking the privileged
passwd program from an unprivileged user. As a result
the privileged process opens and reads the /etc/shadow
ﬁle, that ordinary users cannot access otherwise. Since we
cannot modify the victim to introduce a synchronization
point, we repeatedly run the program and try to leak the
that
line of
the ﬁrst
One observation is
LFB while the program reads the /etc/shadow ﬁle. By
applying our previously discussed technique, with the ad-
ditional heuristic that the leaked byte must be a printable
ASCII character, we are able to leak the contents of the
ﬁle even with the induced noise from creating processes.
the
/etc/shadow ﬁle contains the entry for the root user.
Therefore we can apply our alignment technique by ﬁxing
the ﬁrst ﬁve characters to the known string root: to
ﬁlter data from /etc/shadow. This approach is especially
powerful as it does not require any additional information
about the memory layout of the system. The attacker
simply passively listens to all LFB activity, and matches
the data with previous observations. As seen in Figure 8,
we recover 26 characters (leaking 21 unknown bytes) from
the shadow ﬁle after 24 hours. The hash entry of the root
user consists of 34 characters, which leaves 8 characters
(or several hours) left to leak. As this was only our initial
attempt to utilize RIDL for real-world attacks, we already
know we can improve the speed signiﬁcantly.
Fig. 8: Characters leaked the /etc/shadow ﬁle using the passwd
and SSH attack over a period of 24 hours.
B. Cross-VM attacks
When two diﬀerent virtual machines are executing
simultaneously on the same physical core, a user process
(cid:26)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:51:31 UTC from IEEE Xplore.  Restrictions apply. 
running inside one VM can observe in-ﬂight data from
the other VM. We veriﬁed that RIDL works on KVM [49]
and even on Microsoft Hyper-V (on both Windows 10 and
Windows Server 2016) with all side-channel mitigations
enabled (HyperClear [50]). KVM has deployed defenses
against L1TF which ﬂush the L1D cache on vmenter. By
default—for performance reasons—the L1D is not ﬂushed
on speciﬁc (manually) audited code paths. This defense
does not hinder RIDL. In fact, ﬂushing the L1D might
actually force sensitive data to be in-ﬂight.
We also implemented a cross-VM attack where a co-
located attacker leaks the /etc/shadow ﬁle from the victim
VM by repeatedly trying to authenticate through SSH,
conﬁrming that virtual machine isolation does not mitigate
this class of vulnerabilities. The attacker repeatedly opens
a connection to the victim, trying to authenticate using in-
valid credentials. Similarly to the previous passwd attack,
this strategy causes the victim to read the /etc/shadow
ﬁle, allowing us to leak the contents. For our proof-of-
concept exploit, we assume we have two co-located VMs
running on co-located SMTs. We are able to retrieve 16
characters from the passwd ﬁle over a period of 24 hours,
This is slightly slower than the previous passwd attack,
since the execution path when SSH reads the shadow ﬁle
is signiﬁcantly longer than for the passwd program.
C. Kernel attacks
To verify that the privilege level does not aﬀect our
attack, we implement a user program that opens the
/proc/self/maps ﬁle (or any other /proc ﬁle) and reads 0
bytes from that ﬁle. The read system call causes the kernel
to generate the string containing the current mappings
of the process, but copies 0 bytes to the address space
of the calling program. Using the previously mentioned
attacker program running on a sibling hardware thread,
we are able to leak the ﬁrst 64 bytes of the victim process
memory mappings without these ever having been copied
to user space. Our proof-of-concept exploit is able to do
this reliably in a matter of milliseconds.
The kernel also provides us with a convenient target
for attacks which do not require SMT. We can easily leak
kernel pointers and other data stored on the stack close to
the end of a system call, by executing a syscall and then
performing our attack immediately after the kernel returns
control to userspace. Since the kernel writes also use the
LFBs, we also implemented proof-of-concept exploits that
leak kernel memory writes occurring in the middle of
normal execution (for example, in a /proc handler) in
a few milliseconds. We observe the values of these writes
after the kernel has already returned from the system call,
as the cache lines are written back to memory via the LFB.
D. Leaking arbitrary kernel memory
RIDL can leak secrets accessed by the victim via both
regular and speculative memory accesses. We demonstrate
this property by implementing a proof-of-concept exploit
that can leak arbitrary kernel memory. In absence of
software bugs, unsanitized user-supplied pointers are never
accessed by the kernel. However, speculative memory ac-
cesses are still possible. For example, we found that the
function copy_from_user() in the Linux kernel (version
4.18) allows speculative memory accesses to user-supplied
pointers. It is important to note that this attack is only
possible if Supervisor Mode Access Prevention (SMAP) is
not enabled, otherwise all accesses to user memory will
be surrounded with serializing instructions (clac/stac),
eﬀectively stopping speculation. Our exploit assumes that
SMAP is disabled, for example due to lack of hardware/-
software support.
In our exploit, we use the setrlimit() system call to
reach the copy_from_user() function. We start by calling
setrlimit() multiple times with a user-land pointer to
train the directional branch predictor. After the training,
we call setrlimit() with the pointer to the kernel data
we want to leak. The speculative memory access reads the
data from memory, notably via the LFB, allowing us to
leak it in our program after returning from the system
call. To measure the performance of our exploit, we tried
leaking the data from a kernel memory page (4,096 bytes)
containing ASCII text. On average, leaking the entire page
took us around 712 seconds, i.e., approximately 6 B/s.
E. Page table disclosure
We implemented proof-of-concept exploits to leak page
table entries, since the MMU uses the LFBs to read these
entries from memory at every page table walk. This dis-
closes the physical addresses of pages in our own process,
which is important information to mount other attacks
(such as Rowhammer attacks [51], [52], [53], [54], [55], [56],
[57], [58], [59]). This also allows us to observe page table
walks and the page table entries used by a process running
on a sibling hardware thread. Furthermore, by performing
sliding similar to the AnC attack [60], this primitive allows
us to break ASLR in a managed sandbox.
F. SGX attacks
We also veriﬁed that SGX enclaves are vulnerable to
our cross-process attacks when SMT is enabled, allowing
an attacker on the same physical core to leak SGX-initiated
reads and writes to memory. We built SGX enclaves in pre-
release mode (with debugging disabled), and successfully
reproduced the cross-process experiments. Our proof-of-
concept exploit trivially leaks reads and writes from a
victim enclave running on a sibling hardware thread.
Our exploit can also leak the values of registers used by
the enclave, since microcode reads and writes the contents
of enclave registers to memory when the enclave is inter-
rupted. By using mprotect to cause faults when accessing
enclave pages, we repeatedly interrupt the enclave (to
synchronize), allowing us to leak the contents of enclave
registers. Unlike the Foreshadow attack [3], we are able
to perform these attacks solely from user space, with no
need to manipulate privileged state such as page tables.
This means that SGX enclave secrets should be considered
compromised on any machine where SMT is enabled, even
if an attacker does not have control over the kernel or
hypervisor. When an attacker is able to modify the kernel,
this attack can be further improved with SGX-Step [61],
using timer interrupts to single-step through enclave code
and provide a ﬁne-grained synchronization primitive.
(cid:26)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:51:31 UTC from IEEE Xplore.  Restrictions apply. 
G. JavaScript attacks
To further demonstrate the implications of RIDL, we
show that RIDL can be exploited even within restricted
sandboxed environments such as JavaScript. In recent
years, browser vendors have been proactively working on
mitigations to protect against side-channel attacks [62],
[63],
in
particular. For instance, Chrome fast-forwarded the de-
ployment of process-per-origin [63] as a mitigation against
Spectre attacks. However, these mitigation eﬀorts assume
that data cannot leak across privilege boundaries, and fail
to prevent in-ﬂight data from being leaked with RIDL.
[65]—speculative execution side channels,
[64],
Building a RIDL attack from the browser requires a
high level of control over the instructions executed by the
JavaScript engine. Conveniently, WebAssembly allows us
to generate code which meets these requirements and is
available as a standard feature in modern browsers. We
found that we can use WebAssembly in both Firefox and
Chrome to generate machine code which we can use to
perform RIDL-based attacks. Furthermore, all the major
browsers try to reduce the memory footprint of the We-
bAssembly heap by relying on demand paging [60], which
we can use to perform an attack along the lines of the one
previously presented in Listing 1. That is, we can rely on
the valid page fault generated by our memory access to
trigger an exception and spill the in-ﬂight data.
Generating the correct machine code and triggering
the page fault are relatively straightforward. However,
constructing a reliable feedback channel for speculative
attacks within the browser presents some challenges. The
absence of the clflush instruction forced our implemen-
tation to rely on an Evict + Reload channel to leak
the in-ﬂight data. Since the process of evicting entries
from the L1D cache makes extensive use of the LFBs—
due to TLB misses as well as ﬁlling cache lines—this adds
a signiﬁcant source of noise. We also need to ensure that
the TLB entries for our reload buﬀer are still present after
the eviction process, adding another source of noise to our
attack. Finally, we need a reliable high-resolution timer to
measure cache evictions for our Evict + Reload channel.
While built-in high-resolution timers have been disabled
as part of browser mitigations against side-channel at-
tacks [64], [63], prior work has demonstrated a variety
of techniques to craft new high-resolution timers [66],
[56], [60], such as SharedArrayBuﬀer [60] and GPU-based
counters [56]. The SharedArrayBuﬀer feature was recently
re-enabled in Google Chrome, after the introduction of Site
Isolation [67], [68]. Mozilla Firefox is currently working on
a similar Process Isolation strategy [69].
Despite these challenges, we successfully implemented
a proof-of-concept exploit on top of Firefox’ SpiderMonkey
JavaScript engine to reliably leak data from a victim
process running on the same system. For simplicity, our
exploit uses an old-style built-in high-resolution timer in
SpiderMonkey to measure cache evictions. When targeting
a victim process repeatedly writing a string to memory, our
exploit running in the JavaScript sandbox on a diﬀerent
hardware thread is capable of leaking the victim string at
a rate of ~1 B/s. We also implemented a high-resolution
timer in Chrome using WebAssembly threads which pro-
(cid:26)(cid:24)
vided suﬃcient accuracy for our Evict + Reload chan-
nel. At the time of writing, any site can opt into this
functionality using the ‘origin trials’ system. Although we
do not currently have a reliable RIDL exploit running
inside unmodiﬁed Chrome, we believe that our results
already cast doubt on the eﬀectiveness of site isolation as
a mitigation against side-channel attacks.
VII. Speculative execution attacks
Since Horn [79] initially reported this new class of spec-
ulative execution side-channel attacks, researchers started
digging into modern processor microarchitectures to spot
the next generation of vulnerabilities. The result is a
plethora of new attacks and attack vectors [1], [2], [3], [75],
[5], [70], [4], [71].
The taxonomy of these attacks is confusing (at best)
since attacks and attack vectors oftentimes have been
reported as equivalent and frequently interchanged. In this
section, we try to shed some light on the topic describing
similarities and diﬀerences among the diﬀerent classes of
attacks and categorizing them based on their nature, capa-
bilities, and constraints. We summarize our categorization
in Table II. We divide the currently existing attacks based
on the nature of their speculation: control speculation vs.
data speculation. We further introduce a subcategorization
of data speculation attacks, which we deﬁne as exception
deferral attacks (e.g., RDCL and L1TF).
A. Control Speculation
Control speculation can be triggered in multiple ways.
In Section II, we already described Out-of-Order execution
and Transactional Synchronization eXtensions explaining
how these trigger speculative execution. Here we focus on
the three main forms of control instructions that can be
speculated upon: 1 direct branches, 2 indirect branches
and calls, and 3 return instruction.
Direct branches: Direct (or conditional) branches are
optimized in hardware by the Branch Prediction Unit
(BPU). This unit keeps track of the previous outcomes of
a conditional branch in order to predict which code path
will be taken, and the out-of-order execution engine then
continues execution along the predicted path. Mistraining
the BPU allows attacks known as Bounds Check Bypass
(BCB) [2], [5], such as the one in Listing 2.
1
2
if (x < arr_size)
y = probeTable[arr[x] * 4096];
Listing 2: An example of Bounds Check Bypass.
An attacker who controls the variable x can mistrain
the conditional branch to always take the if code path.
When an out-of-bounds x is later passed to his code, the
BPU will speculate on the code path to take, resulting in
a speculative OoB access which can be leaked through a
cache-based covert channel. A variant of this attack targets
bounds check bypass on stores (BCBS) [5], which shows
the issue is not limited to speculative loads.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:51:31 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II: List of currently disclosed attacks categorized by nature, capabilities and constraints. A checkmark ((cid:2)) under
capabilities reports an attack demonstrated in the literature. A checkmark under the constraints represents a requirement
to perform the attack. We report supervisor in both Intra/Cross- address space scenarios both pre- and post- KPTI [9].
Attacks
Leak cause
Exception
deferral
Capabilities
Constraints
Intra-address space
SB SP†