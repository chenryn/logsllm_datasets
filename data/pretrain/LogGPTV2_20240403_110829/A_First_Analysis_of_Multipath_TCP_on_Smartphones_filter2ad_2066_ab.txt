connection in terms of bytes transported around 450 MBytes and was spread over
ﬁve subﬂows.
5 Analysis
In the following, the analysis will focus on relevant subsets of the trace such
as connections with at least two subﬂows, connections using at least two sub-
ﬂows or connections experiencing handover. Table 2 gives the characteristics of
these subsets. They are used to analyze how Multipath TCP subﬂows are cre-
ated (Sect. 5.1), study the heterogeneity of the available networks in terms of
round-trip-times (Sect. 5.2), estimate the packet reordering of Multipath TCP
(Sect. 5.3), study how subﬂows are used (Sect. 5.4), quantify the reinjection over-
head (Sect. 5.5) and identify connections experiencing handovers (Sect. 5.6).
5.1 Establishment of the Subﬂows
With Multipath TCP, a smartphone can send data over various paths. The
number of subﬂows that a smartphone creates depends on the number of active
interfaces that it has and on the availability of the wireless networks.
62
Q. De Coninck et al.
Table 2. The diﬀerent (sub)traces analyzed in this section.
Full trace
Name Description
T0
T1
T2
T3
With handover
At least 2 established subﬂows 126,040
At least 2 used subﬂows
# connections Bytes to proxy Bytes from proxy
390,782
32,889
8,461
652 MB
238 MB
152 MB
36.7 MB
24,771 MB
13,496 MB
11,856 MB
4,626 MB
Table 3. Number of subﬂows per Multipath TCP connection.
Number of subﬂows
1
2
3
4
5
>5
Percentage of connections 67.75 % 29.96 % 1.07 % 0.48 % 0.26 % 0.48 %
Table 3 reports the number of (not necessarily concurrent) subﬂows that are
observed in T0. Most of the connections only have one subﬂow. On another side,
2.29 % of the connections have more than two subﬂows. Having more subﬂows
than the number of network interfaces is a sign of mobility over diﬀerent WiFi
and/or cellular access points since IPv6 was not used. A connection establishing
42 diﬀerent subﬂows was observed.
Another interesting point is the delay between the establishment of the con-
nection (i.e. the ﬁrst subﬂow) and the establishment of the other subﬂows. The
smartphone tries to create subﬂows shortly after the creation of the Multipath
TCP connection and as soon as a new interface gets an IP address. Late joins can
mainly be expected when a smartphone moves from one network access point
to another. To quantify this eﬀect, Fig. 1 plots the CDF of the delays between
the creation of each Multipath TCP connection and all the additional subﬂows
that are linked to it. 57.4 % of all the additional subﬂows are established within
200 ms. This percentage increases to 72.2 % if this limit is set to one second.
If the analysis is restricted to the ﬁrst additional subﬂow, these percentages
are respectively 61.7 % and 77.5 %. Joins can occur much after the connection
is established. Indeed, 13.5 % of the additional subﬂows were established one
minute after the establishment of the connection, and 1.5 % of them were added
one hour later. The maximal observed delay is 134,563 s (more than 37 h) and
this connection was related to the Google Services. Those late joins suggests
network handovers, and late second subﬂow establishments can be explained by
smartphones having one network interface unavailable.
5.2 Subﬂows Round-trip-times
From now, we focus on the subtrace T1 that includes all the connections with at
least two subﬂows. A subﬂow is established through a three-way handshake like a
TCP connection. Thanks to this exchange, the communicating hosts agree on the
sequence numbers, TCP options and also measure the initial value of the round-
trip-time for the subﬂow. For the used Linux implementation of Multipath TCP,
A First Analysis of Multipath TCP on Smartphones
63
1.0
0.8
0.6
0.4
0.2
F
D
C
1.0
0.8
0.6
0.4
0.2
F
D
C
0.0
10 -1
10 0
10 -2
10 6
Time between MP_JOIN and MP_CAP [s]
10 2
10 3
10 1
10 4
10 5
Additional subflows
Second subflows
0.0
10 -1
10 0
10 1
10 2
10 3
10 4
10 5
Worst - Best
RTT [ms]
Fig. 1. Delay between the creation of
the Multipath TCP connection and the
establishment of a subﬂow.
Fig. 2. Diﬀerence of average RTT seen by
the proxy between the worst and the best
subﬂows with at least 3 RTT samples.
the round-trip-time measurement is an important performance metric because the
default packet scheduler prefers the subﬂows having the lowest round-trip-times.
To evaluate the round-trip-time heterogeneity of the Multipath TCP con-
nections, the analysis uses tstat [13] to compute the average round-trip-time
over all the subﬂows that a connection contains. Then, it extracts for each con-
nection the minimum and the maximum of these average round-trip-times. To
have consistent values, it only takes into account the subﬂows having at least 3
RTT estimation samples. Figure 2 plots the CDF of the diﬀerence in the aver-
age RTT between the subﬂows having the largest and the smallest RTTs over
all connections in T1. Only 19.4 % of the connections are composed of subﬂows
whose round-trip-times are within 10 ms or less whereas 77.9 % have RTTs within
100 ms or less. 3.9 % of the connections experience subﬂows having 1 s or more
of diﬀerence in their average RTT. With such network heterogeneity, if a packet
is sent on a low-bandwidth and high-delay subﬂow s0 and following packets are
sent on another high-bandwidth low-delay one s1, the sender may encounter
head-of-line blocking.
5.3 Multipath TCP Acknowledgements
As explained in Sect. 2, Multipath TCP uses two ACK levels: the regular TCP
ACKs at the subﬂow level and the cumulative Multipath TCP ACKs at the
connection level. It is possible to have some data acknowledged at TCP level
but not at Multipath TCP one, typically if previous data was sent on another
subﬂow but not yet acknowledged. Figure 3 plots in red-dotted curve the CDF of
the number of bytes sent by the proxy that are acknowledged by non-duplicate
TCP ACKs. This plot is a weighted CDF where the contribution of each ACK
is weighted by the number of bytes that it acknowledges. In TCP, ACKs of
1428 bytes or less cover 50.7 % of all acknowledged bytes and considering ACKs
of 20 KB or less the percentage is 91.1 %.
64
Q. De Coninck et al.
The same analysis is now performed by looking at the DSS option that carries
the Multipath TCP Data ACKs with mptcptrace [10]. The green curve in Fig. 3
shows the weighted cumulative distribution of the number of bytes acked per
Data ACK. Compared with the regular TCP ACKs, the Multipath TCP ACKs
cover more bytes. Indeed, 51 % of all bytes acknowledged by Multipath TCP are
covered with Data ACKs of 2856 bytes or less, and this percentage increases to
70.6 % considering Data ACKs of 20 KB or less.
The diﬀerence between the regular TCP ACKs and the Data ACKs is caused
by the reordering that occurs when data is sent over diﬀerent subﬂows. Since the
Data ACKs are cumulative they can only be updated once all the previous data
have been received on all subﬂows. If subﬂows with very diﬀerent round-trip-
times are used, it will cause reordering and data will possibly ﬁlling the receiver’s
window during a long period. This can also change the way applications read
data which would be more by large bursts instead of small frequent reads. On
mobile devices, such memory footprints should be minimized.
1.0
0.8
0.6
0.4
0.2
e
g
a
t
n
e
c
r
e
p
s
e
t
y
B
0.0
10 0
10 1
0B-10KB
10KB-100KB
100KB-1MB
>=1MB
1.0
0.8
0.6
0.4
0.2
F
D
C
MPTCP acks
TCP acks
10 6
10 7
0.0
10 0
10 1
10 2
10 3
10 4
10 5
# subflow blocks
10 3
10 2
Acks size [Bytes]
10 4
10 5
Fig. 3. Size of the Multipath TCP
and TCP ACKs received by the proxy
(Color ﬁgure online).
Fig. 4. Size of the subﬂow blocks from
proxy to smartphones on T1.
5.4 Utilization of the Subﬂows
The next question is how data is spread among the subﬂows. Does Multipath
TCP alternates packets between the diﬀerent subﬂows or does it send bursts of
packets? Again, to be relevant, the subtrace T1 is considered.
To quantify the spread of data, this paper introduces the notion of subﬂow
block. Intuitively, a subﬂow block is a sequence of packets from a connection
sent over a given subﬂow without any packet transmitted over another subﬂow.
Consider a connection where a host sends N data packets. Number them as