title:Approximate fingerprinting to accelerate pattern matching
author:Ramaswamy Ramaswamy and
Lukas Kencl and
Gianluca Iannaccone
Approximate Fingerprinting to Accelerate Pattern Matching
Ramaswamy
Ramaswamy
Univ. of Massachusetts
Lukas Kencl
Intel Research
Cambridge, UK
Gianluca Iannaccone
Intel Research
Cambridge, UK
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
Pattern matching and analysis over network data streams
is increasingly becoming an essential primitive of network
monitoring systems.
It is a fundamental part of most in-
trusion detection systems, worm detecting algorithms and
many other anomaly detection mechanisms. It is a processing-
intensive task, usually requiring to search for a large number
of patterns simultaneously.
We propose the technique of “approximate ﬁngerprinting”
to reduce the memory demands and signiﬁcantly accelerate
the pattern matching process. The method computes ﬁnger-
prints of preﬁxes of the patterns and matches them against
the input stream. It acts as a generic preprocessor to a stan-
dard pattern matching engine by “clearing” a large fraction
of the input that would not match any of the patterns. The
main contribution is the “approximate” characteristic of the
ﬁngerprint, which allows to slide the ﬁngerprinting window
through the packet at a faster rate, while maintaining a
small memory footprint and low number of false positives.
An improvement over a Bloom ﬁlter solution, a ﬁngerprint
can indicate which patterns are the candidate matches. We
validate our technique by presenting the performance gain
for the popular Snort intrusion detection system with the
preprocessor in place.
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network monitoring; I.5.2
[Design Methodology]: Classiﬁer design and evaluation;
C.2.0 [General]: Security and protection
General Terms
Performance, Design, Measurement
Keywords
Pattern matching, intrusion detection, ﬁngerprint, deep packet
inspection
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.
1.
INTRODUCTION
Pattern matching is an extremely common function im-
plemented in many monitoring systems to support a wide
range of applications. Most intrusion, virus or worm de-
tection systems [13, 11] operate by comparing an incoming
packet stream against a database of patterns known to be
present in exploits or worms. These systems have become
extremely popular and are being deployed in various oper-
ating environments (from end-hosts, to small switches and
routers to passive monitoring devices inside the network).
The large-scale deployment is accompanied by rapid growth
of the database of content strings. However, pattern match-
ing is a very processing intensive task since patterns have to
be compared byte by byte to the input string. Any method
to accelerate pattern matching can operate on two variables:
the per-pattern processing cost and the per-input-string pro-
cessing cost. The former has been the subject of extensive
past research and several algorithms have been proposed
that can compare a large number of patterns at once. They
return precise matches at a processing cost independent of
the number of patterns searched [1, 4, 21]. Reducing the
per-input-string processing cost is instead inherently harder.
Exact matches have a cost linear with the length of the string
given that there is no alternative to comparing the string
against the patterns byte by byte. Research in this area has
focused on optimizing the existing multi-pattern matching
algorithms, mainly to reduce the memory footprint of those
methods [20].
In this paper we propose “approximate ﬁngerprinting” to
pre-process the input string and return approximate matches.
The method computes a ﬁngerprint over a sliding window of
bytes in the input string and compares it against a database
of ﬁngerprints derived from the patterns that are searched.
The approximation comes from the fact that at each step
the window slides by more than one byte, reducing this way
the number of memory accesses per-packet but introducing
additional errors in the matching. Our method returns a
subset of the original input strings that are good candidates
for a matching pattern and guarantees that this subset will
contain all the input strings that do match at least one of the
patterns. In addition, the candidate packets may carry the
information which patterns can actually match. The candi-
dates can then be processed by one of the precise pattern
matching algorithm proposed in the literature to eliminate
any false positives.
The performance gain with the approximate ﬁngerprint-
ing comes from the reduction in the number of strings the
complex matching algorithm has to process. Our design ex-
hibits the following properties: (i) fast to compute, (ii) small
memory footprint to be easily implemented in hardware, and
(iii) small false positive rate and zero false negatives (i.e., no
strings that would match a pattern are ever missed). These
are desirable properties for implementation on a network
system such as a switch or router. The processing environ-
ment on such systems is resource limited in terms of both
processing and memory with real-time constraints.
The gain can be signiﬁcant in all cases where the occur-
rence of strings matching any of the patterns is a relatively
rare event. Our method would “clear” a vast majority of
the strings, forwarding just a small subset to the more com-
plex precise matching algorithm. In those cases where most
strings do match a pattern (e.g., worm infection for net-
work intrusion detection systems) our method introduces a
very limited overhead, which can be eliminated by a hard-
ware implementation. Furthermore, the subsequent pattern
matching method may still well beneﬁt by exploiting the
hints about the location of the candidate matches and the
relevant rules as indicated by the preprocessor.
We have implemented a prototype of our approximate ﬁn-
gerprinting method as a pre-processor for the Snort network
intrusion detection platform. Snort presents a perfect ap-
plication to our method given the large database of con-
tent strings that it searches in the packet stream. The pre-
processor is placed inline with other existing pre-processing
that Snort performs and reduces the amount of packets that
need to be searched by exact pattern matching algorithms
in the detection engine of Snort.
We evaluate our implementation using the current database
of Snort rules and packet traces with full payloads collected
on a residential university access network [9]. We show that
our method has an extremely small footprint (in the order of
tens of Kbytes for thousands of patterns) and can reduce the
load (in terms of processed packets) for the precise matching
algorithm to less than 14%.
2. RELATED WORK
String pattern matching is a classical problem in com-
puter science and there exists a large body of work in the
literature. The Aho-Corasick [1] and Commentz-Walter [4]
algorithm belong to the most commonly used multi-pattern
matching algorithms. Both however present an extremely
large memory footprint and in their original form are suit-
able only for software implementation with obvious through-
put limitations.
For these reasons several modiﬁcations to the Aho-Corasick
algorithm have been recently proposed to allow a hardware
implementation using FPGAs [18, 19, 6] or network proces-
sors [3]. Other proposals attempt to reduce the memory
footprint of Aho-Corasick assuming the availability of ex-
tremely large memory bus to avoid the performance limita-
tions [20]. Our work complements these eﬀorts by providing
a method with an extremely small memory footprint that is
able to reduce the number of packets that need to go through
the full Aho-Corasick pattern matching.
The idea of ﬁltering packets that are not going to match
any of the intrusion detection rules has been explored in the
literature using Bloom ﬁlters [5, 2, 16]. The limitations of
these method lie mainly on the large memory footprint re-
quired by the Bloom ﬁlter (particularly for a large number
of keys and a low false positive rate). This severely limits
the applicability of the methods given that a precise pat-
tern matching algorithm still needs to run to eliminate the
false positives produced by the Bloom ﬁlter. Furthermore,
a Bloom ﬁlter provides a boolean answer to the suspicious
set-membership question but no information on which pat-
terns are likely to match. Our proposal is based instead
on string ﬁngerprints. Originally introduced by Rabin [12],
they have been used to ﬁnd sets of ﬁles that are similar [8], to
reduce network traﬃc by eliminating identical packets [17],
and more recently to detect network worm activity by ﬁnd-
ing commonly occurring patterns in the packet payloads [7,
14, 10].
Sommer and Paxson [15] augment signature based intru-
sion detection systems such as Snort with additional context.
Their goal is to reduce the false positive rate and improve
signature matching performance. A direct comparison with
their work is not possible due to considerable diﬀerences in
Snort versions/rulesets and testing platforms.
3. DESIGN CONCEPTS
In the design of any approximate pattern matching method
the objective is to ﬁnd the right balance between the compu-
tational complexity, that is mainly in terms of instructions
and memory access per packet, the memory footprint re-
quired by the data structure and consequently the lookup
times, and the false positive rate, i.e. the patterns that are
matched erroneously.
In the following we address each of
this aspect separately and illustrate the key design concepts
behind our proposal.
Approximate Fingerprinting. The basic idea is to quickly
examine packet payloads and probabilistically determine what
patterns, if any, the payload contains. To this end, we utilize
Rabin’s ﬁngerprints. A ﬁngerprint is a short tag for a longer
object (pattern or string). If two ﬁngerprints are diﬀerent,
then the objects that the ﬁngerprints represent are certainly
diﬀerent. The probability that two diﬀerent objects map to
the same ﬁngerprint are small. A Rabin ﬁngerprint is the
polynomial representation of the object modulo a predeter-
mined irreducible polynomial.
We build a ﬁngerprint table that contains the Rabin’s
ﬁngerprint of the ﬁrst w bytes of each pattern we are trying
to match. Fingerprints are then computed over a sliding
window of size w bytes on the packet payload and used to
index the ﬁngerprint table (see Figure 1a).
If a match is
found in the table, the packet is annotated to indicate the
possible matching patterns. Otherwise, given that no match
is found, the packet can entirely bypass the precise pattern
matching module1.
Reducing memory accesses. Sliding forward the window
by one byte at each step results in a number of accesses to
the ﬁngerprint table almost linear to the packet size. More
precisely, b − w + 1 table lookup operations will be required
for a packet of size b bytes, and ﬁngerprint window size w
bytes. This number of memory accesses increases the pro-
cessing complexity and slows down the approximate ﬁnger-
printing step to pre-process the packet stream.
One way to reduce the number of table lookups is to slide
the window forward by s bytes (s > 1) instead of 1 byte. By
1Note that bypassing a packet implies that rules are deﬁned
on a per packet basis (e.g., independent of the connection
status), and that patterns do not traverse packet boundaries.
We will address these aspects later in Section 5.
1
2
3
4
5
6
...
b
1
2
3
4
5
6
...
b
1
2
3
4
5
6
...
b
1
2
3
4
5
6
...
b
s bytes
w-1 bytes
s bytes
w bytes
packet payload
fingerprint
p1
p2
...
pn
F(p )1
F(p )2
...
F(p )n
w bytes
fingerprint
packet payload
w bytes
packet payload
abcd F(abcd)
*abc F(*abc)
256
entries
fingerprint F
abcd F(abcd)
fingerprint table
fingerprint F'
F'(abc)
abc
fingerprint table (3 bytes)
fingerprint table
fingerprint table
w-s+1 bytes
fingerprint F
packet payload
abc
bcd