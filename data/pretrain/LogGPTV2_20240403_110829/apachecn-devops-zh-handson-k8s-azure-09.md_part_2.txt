    ![Creating a new storage account](img/B17338_09_12.jpg)
    图 9.12:创建新的存储帐户
    选择您之前创建的 **aad-pod-id** 资源组，给该帐户一个唯一的名称，并选择与您的集群相同的区域。为了优化成本，建议您选择标准性能，存储 2 作为帐户类型，本地冗余存储(LRS)用于复制，如*图 9.13* 所示:
    ![Configuring your new storage account by providing Subscription details and Instance details](img/B17338_09_13.jpg)
    图 9.13:配置您的新存储帐户
2.  提供所有值后，单击查看+创建，然后在结果屏幕上单击创建按钮。这将需要大约一分钟来创建。创建存储帐户后，单击转到资源按钮继续下一步。
3.  First, you will give the managed identity access to the storage account. To do this, click Access Control (IAM) in the left-hand navigation bar, click + Add and Add role assignment. Then select the Storage Blob Data Contributor role, select User assigned managed identity in the Assign access to dropdown, and select the access-blob-id managed identity you created, as shown in *Figure 9.14*. Finally, hit the Save button at the bottom of the screen:
    ![In the IAM pane of the storage account, providing the managed identity with access to the storage account  ](img/B17338_09_14.jpg)
    图 9.14:为托管身份提供对存储帐户的访问
4.  Next, you will upload a random file to this storage account. Later, you will try to access this file from within a Kubernetes pod to verify you have access to the storage account. To do this, go back to the Overview pane of the storage account. There, click on Containers, as shown in *Figure 9.15*:
    ![Navigating to Containers from the Overview pane of the storage account](img/B17338_09_15.jpg)
    图 9.15:单击概览窗格中的容器
5.  Then hit the + Container button at the top of the screen. Give the container a name, such as **uploadedfiles**. Make sure to set Public access level to Private (no anonymous access), and then click the Create button at the bottom of the screen, as shown in *Figure 9.16*:
    ![Creating a new container called uploadedfiles](img/B17338_09_16.jpg)
    图 9.16:创建一个新的 blob 存储容器
6.  Finally, upload a random file into this storage container. To do this, click on the container name, and then click the Upload button at the top of the screen. Select a random file from your computer and click Upload as shown in *Figure 9.17*:
    ![Uploading a new file to Blob Storage](img/B17338_09_17.jpg)
    图 9.17:将新文件上传到 blob 存储
7.  Now that you have a file in blob storage, and your managed identity has access to this storage account, you can go ahead and try connecting to it from Kubernetes. To do this, you will create a new deployment using the Azure CLI container image. This deployment will contain a link to the managed identity that was created earlier. The deployment file is provided in the code files for this chapter as **deployment-with-identity.yaml**:
    1 API 版本:apps/v1
    2 种:部署
    3 元数据:
    4 名称:access-blob
    5 规格:
    6 选择器:
    7 个匹配标签:
    8 app: access-blob
    9 模板:
    10 种元数据:
    11 个标签:
    12 app: access-blob
    13 aadpodidbinding:access-blob-id
    14 规格:
    15 个容器:
    16 -名称:azure-cli
    17 映像:mcr.microsoft.com/azure-cli
    18 命令:[ "/bin/bash "、"-c "、" sleep inf" ]
    在此部署的定义中，有几件事需要注意:
    *   **第 13 行**:这是您将 pod(由部署创建)与被管理身份进行链接的地方。任何带有该标签的 pod 都将能够访问托管身份。
    *   **第 16-18 行**:在这里，您定义将在此容器中创建哪个容器。如您所见，映像(**mcr.microsoft.com/azure-cli**)指的是 Azure CLI，您正在此容器中运行一个**睡眠**命令，以确保容器不会持续重启。
8.  You can create this deployment using the following command:
    kube CTL create-f-deployment-with-identity . YAML
9.  Watch the pods until the **access-blob** pod is in the **Running** state. Then copy and paste the name of the **access-blob** pod and **exec** into it using the following command:
    忽必烈 exec-itsh
10.  Once you are connected to the pod, you can authenticate to the Azure API using the following command. Replace **** with the client ID you copied earlier:
    az 登录-身份-u \
    -允许-不订阅-o 表
    这将返回类似于图 9.18 的输出:
    ![Logging into the Azure CLI using the client ID of the managed identity](img/B17338_09_18.jpg)
    图 9.18:使用 Azure AD pod 管理的身份登录 Azure CLI
11.  Now, you can try accessing the blob storage account and download the file. You can do this by executing the following command:
    az 存储 blob 下载-帐户名 \
    -容器-名称 -验证模式登录\
    -文件 -名称 -o 表
    这将返回类似于图 9.19 的输出:
    ![Downloading a blob file using the managed identity](img/B17338_09_19.jpg)
    图 9.19:使用托管身份下载 blob 文件
12.  您现在可以使用**退出**命令退出容器。
13.  If you would like to verify that pods that don't have a managed identity configured and cannot download the file, you can use the file called **deployment-without-identity.yaml**:
    1 API 版本:apps/v1
    2 种:部署
    3 元数据:
    4 名称:禁止访问 blob
    5 规格:
    6 选择器:
    7 个匹配标签:
    8 应用:禁止访问 blob
    9 模板:
    10 种元数据:
    11 个标签:
    12 应用:禁止访问 blob
    13 规格:
    14 个容器:
    15 -名称:azure-cli
    16 映像:mcr.microsoft.com/azure-cli
    17 命令:[ "/bin/bash "、"-c "、" sleep inf" ]
    如您所见，该部署与您在本章前面创建的部署不同。这里的不同之处在于 pod 定义不包含带有 Azure AD pod 管理的标识的标签。这意味着此 pod 将无法使用任何托管身份登录 Azure。您可以使用以下内容创建此部署:
    kube CTL create-f-deployment-不带标识. yaml
14.  Watch the pods until the **no-access-blob** pod is in the **Running** state. Then copy and paste the name of the **access-blob** pod and **exec** into it using the following command:
    忽必烈 exec-itsh
15.  Once you are connected to the pod, you can try to authenticate to the Azure API using the following command, which should fail:
    az 登录-身份-u \
    -允许-不订阅-o 表
    这将返回类似于图 9.20 的输出:
    ![Authentication error for the deployment with a pod identity](img/B17338_09_20.jpg)
    图 9.20:新 pod 无法使用托管身份进行身份验证
16.  最后，您可以使用**退出**命令退出容器。
这已经成功地向您展示了如何使用 Azure AD pod 管理的身份从您的 Kubernetes 集群中连接到 blob 存储。带有身份标签的部署可以登录 Azure 命令行界面，然后访问 blob 存储。没有此身份标签的部署没有获得登录 Azure 命令行界面的权限，因此也无法访问 blob 存储。
这一章到此结束。让我们确保删除您为本章创建的资源:
az aks pod-标识删除-资源-组 rg-handsonaks \
- cluster-name handsonaks -命名空间默认值\
-名称访问-blob-id
az 组删除-n aad-pod-id - yes
kubectl delete -f
您可以保留在本章中创建的集群，因为在下一章中，您将使用 Azure AD pod 管理的身份来访问密钥库机密。
## 总结
在这一章中，您继续探索了 AKS 中的安全性。*第 8 章，AKS* 中基于角色的访问控制，侧重于用户的身份，而这一章侧重于 pods 和 pods 中运行的应用的身份。您了解了 Azure 中的托管身份，以及如何在 Azure 中使用 Azure AD pod 管理的身份将这些托管身份分配给 pod。
您创建了一个启用了 Azure AD pod 管理的身份插件的新集群。然后，您创建了一个新的托管身份，并将其链接到您的集群。在最后一节中，您通过 blob 存储帐户授予了此身份权限，并最终验证了具有托管身份的 pods 能够登录 Azure 并下载文件，但是没有托管身份的 pods 无法登录 Azure。
在下一章中，您将了解更多关于 Kubernetes 的机密。您将了解内置的机密，然后还将了解如何将 Kubernetes 安全地连接到 Azure Key Vault，甚至使用 Azure AD pod 管理的身份来实现这一点。