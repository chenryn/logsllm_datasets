一般来说，对于rop不好布置的情况，可以选择离当前函数栈较
远的位置进行写入，然后通过返回达到rop位置。如可以在main函数
的栈底布置rop，触发main函数返回的条件，就会执行到rop处
---
## Page 413
CTF特训营：技术详解、解题方法与
12.4找喷射
413/1144
12.4栈喷射
栈喷射（stackspray）主要用于实现rop时无法得到确定栈地址
的情况，通过预先在栈中布置大量重复性的rop数据块，只要返回时
栈顶位于其中的一个数据块处就能实现rop，如图12-27所示。
局部变量
函数栈
ebp/rbp
rip/eip
.....
atn
oavoad
data_use
data
offsetx
图12-27栈喷射示意图
通常，这种情况是指不能确定栈地址中的某几位，一般是低位
所以可以提前将低位所对应的地址空间中的数据全部或者部分布置
---
## Page 414
CTF特训营：技术详解、解题方法与
12.4找喷射
414/1144
好。
如要用到栈地址0xf5e*里面的值，则可以将
Oxfff5e00-0xfff5eff的地址空间中所需要的值都布置好，或者将其中
一部分设置好，这样当栈地址恰好为一个值时，会有很大可能性刚好
落在所布置的地址空间范围内，从而满足需求。
一般来说，产生栈喷射的条件多种多样，大多带有随机性，如栈
地址的随机性、覆盖长度有限等。如栈溢出覆盖bp只能覆盖最低字
节，导致程序栈转移出现随机性，这种情况就可以采用栈喷射。
另外，栈喷射的数据也有很多种情况，如控制变量、shellcode地
址、rop地址、rop数据等。
在这里仅就一种情况进行说明，其他的则可以根据这个示例举一
反三进行理解，具体解析请参见12.6.4节。
---
## Page 415
CTF特训营：技术详解、解题方法与
12.5线程栈
415/1144
12.5线程栈
线程栈是针对多线程程序来说的，同一进程不同线程的栈都会布
置在程序栈中，但是为了保证线程函数的正确执行，线程栈之间应相
互隔离，布局如图12-28所示。
低地址
Heap
ThreadStack
TreadStack
MemoryMapping
（lib）
高地址
MainTreadStack
---
## Page 416
CTF特训营：技术详解、解题方法与
12.5线程栈
416/1144
图12-28程序线程栈内存布局
示例代码如下：
#include
#include 
void*thread_func_1()
char buff[0x40];
printf(thread_func_1 stack_addr:%p\n", buff);
sleep(20);
printf("thread_func_1\n");
void*thread_func_2()
{
char buff[0x40];
printf("thread_func_2 stack_addr:%pln,buff);
sleep(20);
printf("thread_func_2in");
#defineTHREAD COUNT2
int main()
pthread_t thread[THREAD_COUNT];
int i;
pthread_create(&thread[O],NULL,（void *)thread_func_1,NULL)
pthread_create(&thread[1],NULL,(void*)thread_func_2,NULL);
sleep(2);
printf(ready to bkin");
for(i=O;i
#include
#include 
#define max_thread2
voidshow_info（void*addr,intsize)
int i;
unsigned char*pointer= addr；
for (i= O; i= times)
big_stack_func(level);
return;
//memset（buff,0xaa,0x1000);
if （level% 1000==999)
printf("at level:%d 0x%016xin", level+1,buff);
grow_stack(level+1);
void thread(void*params)
char buff[0x100];
int t id=*(int*)params;
int i;
sprintfbuff,%d%d%d%d --USB %d%d%d%d", t_id,t_id, t_id, t_id, t_id, t_id, t_id
tid);
memcpy（&i,xeflxbelxad\xde”,4);
if (t_id>0)
---
## Page 420
CTF特训营：技术详解、解题方法与
12.5线程栈
420/1144
show_info（buff+0x801000-0x20,0x30);
printf("n");
showinfo（buff+0x100,0x100）;
print("n");
show_info（buff+0x100+0x1000+0x100-0x10,0x10);
for（i=0;it_id: 0x%016xin", t_id,buff, &t_id);
sleep(3);
if (t_id == 1)
sleep(1);
while（t_id !=2)
printf("overin");
else
{
sleep(2);
grow_stack(0);
int main(void)
pthread_tid[maxthread];
inti,ret,params[max_thread];
for (i = 0; i0x0000000092856110
This is thepthread[0]:0x000000007821be00->t_id:0x000000007821bdf8
This isthemainprocessid=1->0x0000000092856114
0x000000007821bde0fffff0000000010618592ff7f0000
0x000000007821bdf020692278eb7f00000000000000000000
0x000000007821be0030303030202d2d205553422030303030
0x0000000077a1af00000000000000000000d4d9b36d0c255a
0x0000000077a1af100000000000000000a5905e78eb7f0000
0x0000000077a1af20 00000000 00000000 00b7a177 eb7f0000
---
## Page 424
CTF特训营：技术详解、解题方法与
12.5线程找
424/1144
0x0000000077a1af3000b7a177eb7f0000ddfeaff8019b4b8c
0x0000000077a1af4000000000000000000000000000000000
0x0000000077a1af50c0b9a177eb7f000000b7a177eb7f0000
0x0000000077a1af60ddfeefa642749d73ddfe75d8bc6b9d73
0x0000000077a1af7000000000000000000000000000000000
0x0000000077a1af80 0000000000000000 00000000 00000000
0x0000000077a1af90 00000000 00000000 00000000 00000000
0x0000000077a1afa000000000000000000000000000000000
0x0000000077a1afb000b7a177eb7f0000fd6c3178eb7f0000
0x0000000077a1afc0 0000000000000000 00000000 00000000
0x0000000077a1afd000000000000000000000000000000000
0x0000000077a1afe000000000000000000000000000000000
0x0000000077a1aff000000000 00000000 00000000 00000000
0x0000000077a1bff0 00000000 00000000 00000000 00000000
This is the pthread[1]: 0x0000000077a1ae00 -> t_id: 0x0000000077a1adf8
This is the mainprocess.
at level:1000 0x00000000781d1a70
atlevel:20000x00000000781876f0
at level:30000x000000007813d370
at level:4000 0x00000000780f2ff0
atlevel:50000x00000000780a8c70
atlevel:60000x000000007805e8f0
at level:7000 0x0000000078014570
at level:8000 0x0000000077fca1f0
at level:9000 0x0000000077f7fe70
at level:10000 0x0000000077f35af0
atlevel:110000x0000000077eeb770
atlevel:120000x0000000077ea13f0
at level:13000 0x0000000077e57070
at level:14000 0x0000000077e0ccf0
atlevel:150000x0000000077dc2970
at level:16000 0x0000000077d785f0
at level:17000 0x0000000077d2e270
at level:180000x0000000077ce3ef0
at level:19000 0x0000000077c99b70