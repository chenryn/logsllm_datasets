title:HeapExpo: Pinpointing Promoted Pointers to Prevent Use-After-Free
Vulnerabilities
author:Zekun Shen and
Brendan Dolan-Gavitt
HeapExpo: Pinpointing Promoted Pointers to
Prevent Use-After-Free Vulnerabilities
Zekun Shen
Brendan Dolan-Gavitt
New York University
New York, USA
PI:EMAIL
New York University
New York, USA
PI:EMAIL
ABSTRACT
Use-after-free (UAF) vulnerabilities, in which dangling pointers
remain after memory is released, remain a persistent problem for
applications written in C and C++. In order to protect legacy code,
prior work has attempted to track pointer propagation and inval-
idate dangling pointers at deallocation time, but this work has
gaps in coverage, as it lacks support for tracking program vari-
ables promoted to CPU registers. Moreover, we find that these gaps
can significantly hamper detection of UAF bugs: in a preliminary
study with OSS-Fuzz, we found that more than half of the UAFs in
real-world programs we examined (10/19) could not be detected by
prior systems due to register promotion. In this paper, we introduce
HeapExpo, a new system that fills this gap in coverage by parsimo-
niously identifying potential dangling pointer variables that may
be lifted into registers by the compiler and marking them as volatile.
In our experiments, we find that HeapExpo effectively detects UAFs
missed by other systems with an overhead of 35% on the majority
of SPEC CPU2006 and 66% when including two benchmarks that
have high amounts of pointer propagation.
CCS CONCEPTS
• Security and privacy → Software security engineering.
KEYWORDS
Dangling pointers, use-after-free, memory errors
ACM Reference Format:
Zekun Shen and Brendan Dolan-Gavitt. 2020. HeapExpo: Pinpointing Pro-
moted Pointers to Prevent Use-After-Free Vulnerabilities. In Annual Com-
puter Security Applications Conference (ACSAC 2020), December 7–11, 2020,
Austin, USA. ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/
3427228.3427645
1 INTRODUCTION
Use-after-free (UAF) vulnerabilities are widespread in C and C++
programs. Although some programming techniques can reduce the
prevalence of use-after-free bugs, vulnerabilities are still regularly
found: in 2017 and 2018, 289 and 303 vulnerabilities classified as
UAFs were reported to the CVE Project, and 375 were found in
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427645
the last year [8]. Use-after-free bugs are found in a wide variety of
projects, including web browsers, utility programs and libraries.
The root cause of use-after-free vulnerabilities is dangling point-
ers which point to freed memory without being correctly cleared.
If a dangling pointer is dereferenced, it may access memory of an-
other object, leading to either information leak vulnerabilities (if
the access is a read) or memory corruption (if the access is a write).
Use-after-free bugs are hard to detect and debug because they
may not cause a crash immediately. Manual review for use-after-
free vulnerabilities is time-consuming and does not scale to large
programs. Analysis of heap-related code requires reviewers to un-
derstand the pointer propagation behavior throughout the entire
code base. Although heap-related code is only a small portion of the
whole program, there are many possible allocation and deallocation
sequences, and use-after-free bugs may only manifest only under a
small fraction of those sequences. As a result, it can take significant
effort to manually uncover use-after-free vulnerabilities.
Prior work, such as FreeSentry [28], DangNull [16], DangSan [26],
and pSweeper [13] has sought to eliminate dangling pointers by
invalidating them automatically when releasing dynamic memory.
This approach incurs less overhead than other tools like Address
Sanitizer [25], which checks the validity of every memory read or
write. The downside the of invalidation approach is its unwanted
false-negatives: previous work cannot track local variables and func-
tion parameters which are promoted to registers. Because promot-
ing stack memory to registers is a common compiler optimization,
this renders many potential dangling pointers untrackable. In our
analysis of 19 bugs from the OSS-Fuzz [9, 23] project (described in
Section 4.1), we found that local variables and function parameters
appear often in use-after-free bugs: 10 of the 19 bugs we examined
are caused by variables that were promoted to registers by standard
compiler optimization and would have been missed by prior work.
To close this gap in coverage, in this paper we present HeapExpo,
a dangling pointer sanitizer that also tracks pointers in local vari-
ables and function arguments. As with previous works, we achieve
pointer tracking by using LLVM infrastructure [15] to instrument
pointer propagation instructions and provide a runtime library to
track and manage metadata about allocations. Our analysis identi-
fies pointer variables that may be optimized into registers by the
compiler and marks them as volatile, forcing the compiler to keep
them on the stack where they can be tracked by our runtime. How-
ever, because a naïve approach of marking every pointer variable
adds prohibitive overhead, we additionally provide a static analysis
that safely identifies pointer variables that can never be involved
in use-after-free bugs, and allows these to be optimized freely.
Despite providing more comprehensive coverage, our optimized
implementation has an overhead of 66% on the SPEC CPU2006
benchmark [14], only a modest increase compared to the 46%
overhead from the state-of-the-art dangling pointer sanitizer, Dan-
gSan [26].
promoted to registers by marking them as volatile.
We make the following contributions:
• We identified some major sources of dangling pointers that
are not tracked by previous works due to register promotion
by studying and categorizing UAF bugs discovered by the
OSS-Fuzz project.
• We present a novel approach to identify and track pointers
• We design an analysis that uses liveness and the program’s
function call graph to reduce the number of tracked stack
variables, greatly reducing the overhead for comprehensive
tracking.
• We provide a performance analysis that demonstrates our
system incurs about 20% run-time overhead in addition to
DangSan, with little extra memory overhead.
2 BACKGROUND
In this section, we walk through how previous work solves the
dangling pointer problem, their limitations and the LLVM tool
chain we studied and used. We also discuss the implementation of a
state of the art dangling pointer sanitizer, DangSan, which helps the
understanding of our design as a whole. Additionally, we discuss
two threading models that influence our optimization.
2.1 LLVM Compiler
LLVM is a modular compiler tool chain. The front-end client, clang,
translates the source code into an Intermediate Representation
(LLVM IR) with a limited number of instructions. Optimizing passes
process LLVM IR code and produce optimized LLVM IR. Common
optimization techniques like dead code removal, function inlining,
and alias analysis are applied in this phase. The LLVM IR is then
handed to a target-dependent backend compiler to generate ma-
chine code for the host. Finally, the linker is invoked to combine
all machine code files into a single executable.
LLVM Optimization. The LLVM front end first generates un-
optimized code as in Listing 3 from the C code in Listing 2. At this
point, all local variables and function arguments live on the stack.
a lives in the stack location indicated by the alloca instruction at
line 2. Then, the LLVM optimizer processes the unoptimized code
with the mem2reg pass [10], which promotes memory references
to registers. This is one of the very first optimization passes to
obtain Single Source Assignment form. The end result is shown in
Listing 4. LLVM provides options to instrument before or after the
mem2reg pass by choosing an appropriate optimization stage.
The algorithm to determine whether a stack variable can be pro-
moted is shown in Listing 1. The algorithm shows that a regular
non-volatile pointer, either as a local variable or a function argu-
ment, is indeed promotable. Later, our analysis of OSS-Fuzz bugs
(Section 4.1) follows the cases in this algorithm.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
bool isAllocaPromotable(AllocaInst *AI) {
if (hasVolatileStoreOrLoad(AI)):
return False;
else if (addressIsStoredSomewhere(AI))
return False;
else if (hasNonPtrCast(AI))
return False;
else if (isNontrivialStruct(AI))
return False;
else if (isArray(AI))
return False;
else if (isStruct(AI))
return False
return True;
}
Listing 1: llvm::isAllocaPromotable
Table 1. Our system focuses on the pointer invalidation approach
because it is fast, has low memory overhead, and is hard to by-
pass. HeapExpo closes a major gap in coverage of dangling pointer
detectors with only a modest increase in overhead.
Secure allocator [3, 6, 22]. This approach provides a custom al-
locator which restricts reuse of same memory region. This prevents
a dangling pointer from pointing to other allocated objects, making
it unexploitable. However, this approach can be bypassed if the
memory reuse pattern can be learned by an attacker as discussed
by Lee et al. [16].
Address-based checking [4, 19, 20, 25]. This type of temporal
safety approach tries to invalidate the memory addresses of a heap
object when it is released. Another often-used technique is to raise
an alert when dangling pointers are used. This approach usually
discourages memory reuse so that a dangling pointer does not point
to a new object right away.
Garbage collection [1, 2, 27]. This is a passive reference count-
ing technique that scans memory for potential pointers. Dynamic
memory is released only when there are no pointer references.
Therefore, this method can only mitigate use-after-free, not detect
it. The runtime overhead is tied to the number of memory scans
performed, so it often trades memory for speed.
Dangling pointer invalidation [13, 16, 26, 28]. This approach
tracks the propagation of pointers inside memory. The propagation
is tracked by taint analysis or monitoring certain instructions. When
a heap object is released, the pointers that reference the object also
get invalidated. The invalidation can be performed by setting the
dangling pointer to kernel space or null. Dereference of a kernel
space dangling pointer results in a crash immediately. Setting the
pointer to null can let the program execute normally if there is null
pointer check.
2.2 Temporal safety system design
Currently, there are four main approaches to ensure temporal safety:
secure allocators, address-based checking, garbage collection, and
dangling pointer invalidation. We compare the four approaches in
2.3 Limitations of Prior Work
Prior work [16, 26, 28] that keeps an active representation of mem-
ory is based on LLVM, with instrumentation done by LLVM passes.
DangNull [16] only tracks pointers in the data and heap sections
2
Approach
Run-time Memory Bypassable Detectable
False Negative
Worst Case
Secure allocator
Address-based checking
Garbage collection
Dangling pointer invalidation
Low
High
Low
Low
Low
High
Medium
Medium
Yes
Yes
No
No
Yes
Yes
No
Yes
Low
Low
Low
High
Allocation Intense
Memory Access Intense
Allocation Intense
Propagation Intense
Table 1: Comparison among Approaches Solving Use-after-free
Approach
DangNull
FreeSentry
DangSan
HeapExpo
Data Heap
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Stack
No
Yes
Yes
Yes
Promoted
No
No
No
Yes
Table 2: Trackable pointer sources among previous work.
Promoted means registers promoted from stack locations.
1
2
3
4
5
6
int main() {
char* a = malloc(8);
free(a);
printf("%s\n", a);
return 0;
}
Listing 2: Sample C code
and does not track pointers on the stack or in registers. FreeSen-
try [28] and DangSan [26] optionally support tracking of pointers
on the stack, but do not track those in registers. The authors of all
three systems mention this limitation, but they do not provide an
estimation of how many false negative it causes. We have summa-
rized coverage among previous works in Table 2.
We have covered LLVM’s mem2reg [10] optimization pass in
the previous subsection. LLVM uses this pass to promote local
variables from stack memory to registers. Since these works [16, 26,
28] instrument optimized code, they do not track promoted local
variables and function arguments, which leaves a large portion of
pointer code uninstrumented.
The C code in Listing 2 has a use-after-free vulnerability with its
local variable a. Compiling the code with -O0 or -O2 can result in
the following IR code in Listings 3 and 4. Past works instrument the
IR after mem2reg pass; thus, they process the IR code in Listing 4,
where a has been promoted from stack location to LLVM register.
FreeSentry and DangSan cannot track a in this context, because it
does not have stack location. To ensure temporal safety with low
time overhead, they sacrifice completeness. In our work, we target
tracking of local variables and function arguments.
2.4 DangSan Implementation
DangSan is a dangling pointer sanitizer implemented using the
LLVM compiler tool chain. It consists of compile-time LLVM passes
and run-time code linked to the final binaries. The LLVM pass in-
struments pointer write instructions with calls to tracking code. The
run-time code overloads all allocator functions including malloc,
define i32 @main() {
%1 = alloca i8*
%2 = call @malloc(i64 8)
store i8* %2, i8** %1
%3 = load i8*, i8** %1
call @free(i8* %3)
%4 = load i8*, i8** %1
%5 = call @printf(i8* "%s\n", i8* %4);
ret i64 0
1
2
3
4
5
6