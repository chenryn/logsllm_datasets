cannot learn
isSec beyond B unless T occurs. It takes an
anything about SgetSec
epistemic logic perspective: Given any actual trace of events
tr, an alternative trace tr(cid:6) must exist that offers an equally
valid explanation of the observations within the speciﬁed
uncertainty/declassiﬁcation bound.
IV. THE DISTRIBUTED SYSTEM
Next, we describe the speciﬁcation and implementation of
the CoSMeDis extension of CoSMed.
We extend the original system with mechanisms for com-
municating and sharing data with other nodes located at differ-
ent sites across the Internet. All nodes have identical behavior,
i.e., will be CoSMeDis clones (but their internal states will
of course be different due to their different interactions with
users and among themselves). The resulting system is similar
to existing, federated social networks, such as Diaspora* [8]. A
user signs up at one of the nodes in the network and uses it to
post and read content and maintain friendship links. Employing
the new inter-node communication features, a user can also
establish friendship links to users on other nodes and exchange
content across nodes. Public posts are available to all users of
connected nodes, whereas private posts are only accessible by
local and remote friends of the post owner.
A. Communication Infrastructure
We consider networks with an arbitrary number of
CoSMeDis nodes. A node is designated by a unique ID, its
URL. We implement an asymmetric communication model.
Any two nodes with IDs nid1 and nid2 can agree on a client-
server relationship: The client nid1 makes a request and the
server nid2 approves it (both actions being triggered by the
admin users of the corresponding nodes). After that, nid2 can
share its posts with nid1. In addition, users of nid2 are allowed
to mark as friends selected users of nid1. Hence, the admins are
responsible for setting up inter-node communication as well
as approving local user creation. From a user perspective, the
system is like CoSMed, except that users can see posts from
other nodes if the owner has granted them access, and can add
remote friends by selecting a node and entering a username.
To achieve the above, we extend the system’s state with
communication infrastructure (the IDs of the registered client
and server nodes) and shared data (inter-node friendship and
shared posts). We also add new types of actions to support the
desired communication: sendServerReq and receiveClientReq,
sendPost and receivePost, and sendUpdateRFriend and
receiveUpdateRFriend. They come in pairs: There is an action
on the receiving side to match that on the sending side. For
successful communication,
the parameters of these actions
(consisting of user, node and post IDs, post content, etc.) must
also match, in that what is being received must coincide with
what is being sent. Here is the intended workﬂow and the
matching patterns for these actions:
Request server connection. The admin uid1 of a node
nid1 can issue a server request to another node nid2, with the
intention of establishing a client-server relationship. The corre-
sponding action is (sendServerReq, uid1, nid2, request), where
request is the content of the request message. When the request
reaches nid2, the action (receiveClientReq, nid1, request) is
triggered on nid2, to the effect of recording in nid2’s state
that nid1 wishes to become a client.
731
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
Connect client with server. At a later time, the admin
uid2 of nid2 can inspect and approve the request. This is done
through the communication action (connectClient, uid2, nid1),
which registers, in nid2’s state, the node nid1 as a client. The
matching action on the nid1’s side is (connectServer, nid2),
which registers, in nid1’s state, the node nid2 as a server.
Share posts. After nid1 and nid2 have recognized each
other as a client-server pair, other communication actions
are possible. The admin uid2 of the server nid2 can send
a local post pid at any time to the client nid1, via
(sendPost, uid2, nid1, pid). This action produces the output
(cid:6)
2, v), consisting of the post ID pid, the content pst
(pid, pst, uid
(cid:6)
2 of the post’s owner, and information
of the post, the ID uid
on the post’s visibility, v. In this output, pid is copied from
the action’s parameter, whereas all the other components are
retrieved from nid2’s state. The matching action on the nid1
(cid:6)
side is (receivePost, nid2, pid, pst, uid
2, v). Sending an updated
version of a previously shared post is possible—it has the effect
of updating the remote version. A ﬂag is stored in the server
node’s state for each shared post with each client, indicating
whether the remote version is up to date.
Assign remote friends. Sharing a local post pid between
the server nid2 and the client nid1 is at the discretion of nid2’s
admin uid2, which would typically send several posts in batch
(cid:6)
2 retains control on the
mode. However, the post owner uid
remote access rights for his friend-only posts. Namely, the
(cid:6)
1 of
remote version of pid will only be accessible to users uid
(cid:6)
nid1 which uid
2 designates as remote friends. Remote friend
designation is done through the action (sendUpdateRFriend,
(cid:6)
1, st), which sends an update to the friendship-
uid
(cid:6)
1 of nid1; the
like permission from user uid
ﬂag st indicates if friendship is to be granted or revoked. The
matching action on the nid1 side is (receiveUpdateRFriend,
(cid:6)
1, st), which updates the indicated permission.
nid2, uid
(cid:6)
2 of nid2 to user uid
(cid:6)
2, nid1, uid
(cid:6)
2, uid
B. Modeling the Distributed System
We will eventually model a network of an arbitrary number
of nodes. But
to keep the discussion simple, we initially
assume only two nodes, represented by two I/O automata Aut1
and Aut2. In Section VI-B, we describe the n-ary case.
As
In our case study, Aut1 and Aut2 are identical—as
this assumption will not be
CoSMeDis clones. However,
needed in our discussion. We shall use the indexes 1 and 2
to indicate the components of these automata, e.g., State1,
Act1, State2, Act2, etc. An exception will be their transition
relations, where we write → for both rather than →1 or →2.
seen in Section IV-A, communication proceeds
by matching certain transitions of
the two components:
each sending transition with a corresponding receiving
transition. We model matching as a relation match be-
tween the transitions of Aut1 and those of Aut2,
taking
match((σ1, a1, o1, σ(cid:6)
)) to mean that either
(a1, o1) is a sending action-output pair and (a2, o2) is the
corresponding receiving action-output pair or vice versa. Thus,
two transitions are matched if their actions are dual to each
other and the parameters occurring in the sending action or in
its output correspond to the input parameters of the receiving
action. For example, the input parameters of a receivePost
action have to match the output of the sendPost action.
), (σ2, a2, o2, σ(cid:6)
1
2
2
1
), (σ2, a2, o2, σ(cid:6)
Formally, match((σ1, a1, o1, σ(cid:6)
)) requires
that the actions and outputs have one of the forms in Fig. 1’s
table, where NID1 and NID2 are the IDs of Aut1 and Aut2; or
the symmetric forms, with NID1 and NID2 swapped. (It might
be unclear why match should also depend on the transitions’
states. Indeed, for CoSMeDis’s communication, it does not:
we instantiate it independently of the states, only considering
the actions and outputs. However, state-dependent matching
would make sense if the components had a shared part of the
state, so we don’t forbid it in our emerging framework.)
).
, σ0
2
In our discussion, we distinguished separate (local) compo-
nent actions from communication actions. We write isComi(a)
(for i ∈ {1, 2}) to state that a is in the latter category for
component i. This predicate can be derived from the matching
predicate: isComi(a) holds whenever there exist trn1 and trn2
such that match(trn1, trn2) holds and a is the action of trni.
We deﬁne the distributed system as an I/O automaton,
Aut1 ×match Aut2, representing the communicating product of
the components:
• Its set of states is State1×State2, with the initial state being
the pair of initial states, (σ0
• Its set of actions is Act1 + Act2 + Act1× Act2, i.e., a disjoint
1
union of Act1 (representing separate actions of the ﬁrst
component), Act2 (for separate actions of the second com-
ponent), and Act1× Act2 (for joint communicating actions).
We shall write (1, a1), (2, a2), and (a1, a2) for actions of
the ﬁrst, second, and third kind, respectively.
• Similarly, its set of outputs is Out1 + Out2 + Out1 × Out2,
and we use similar notations: (1, o1), or (2, o2), or (o1, o2).
• Its transition system is deﬁned in Fig. 2. As can be seen,
the SEPi rules allow each component to proceed separately,
whereas the COM rule allows matching communication
transitions of any two components.
Note that a transition trn of Aut1 ×match Aut2 has one of
(1) ((σ1, σ2), (1, a1), (1, o1), (σ(cid:6)
, σ2))
(2) ((σ1, σ2), (2, a2), (2, o2), (σ1, σ(cid:6)
))
2
(3) ((σ1, σ2), (a1, a2), (o1, o2), (σ(cid:6)
, σ(cid:6)
2
the following three forms:
))
1
1
1
In the ﬁrst case, trn is completely determined by the Aut1-
transition trn1 = (σ1, a1, o1, σ(cid:6)
) and by the Aut2-state σ2—
we write trn = sep1(trn1, σ2), marking that trn is given by
the separate transition trn1. Similarly, in the second case we
write trn = sep2(σ1, trn2), where trn2 = (σ2, a2, o2, σ(cid:6)
). In the
third case, we write trn = com(trn1, trn2), marking that trn
proceeds as a communication transition. Thus, any transition
of Aut1 ×match Aut2 has either the form sep1(trn1, σ2), or
sep2(σ1, trn2), or com(trn1, trn2).
Given an Aut1-trace tr1 and an Aut2-trace tr2, we deﬁne
tr1 ||match tr2, the communicating shufﬂe of tr1 and tr2, to be
the set of all (Aut1×match Aut2)-traces obtained from shufﬂing
(interleaving) tr1 and tr2—the inductive deﬁnition is shown in
Fig. 3, where · is concatenation and [] the empty trace.
2
C. Implementation
CoSMeDis is implemented similarly to its predecessor,
CoSMed. It consists of three layers: the kernel (generated
732
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:13 UTC from IEEE Xplore.  Restrictions apply. 
a1
(sendServerReq, uid1, NID2, request)
(connectClient, uid1, NID2)
(sendPost, uid1, NID2, pid)
(sendUpdateRFriend, uid
(cid:6)
1, NID2, uid
(cid:6)
2, st)
o1
request
outOK
(cid:6)
1, v)
(pid, pst, uid
(cid:6)
(cid:6)
(uid
2, st)
1, uid
a2
(receiveClientReq, NID1, request)
(connectServer, NID1)
(cid:6)
1, v)
(receivePost, NID1, pid, pst, uid
(cid:6)
(cid:6)
(receiveUpdateRFriend, NID1, uid
2, st)
1, uid
o2
outOK
outOK
outOK
outOK
Figure 1: Deﬁnition of match for CoSMeDis
SEP1
σ1
a1−→
o1
σ(cid:6)
1
(σ1, σ2)
¬ isCom1(a1)
(1,a1)−→
(1,o1)
(σ(cid:6)
1
, σ2)
SEP2
σ2
a2−→
o2
σ(cid:6)
2
(σ1, σ2)
¬ isCom2(a2)
(2,a2)−→
(2,o2)
(σ1, σ(cid:6)
)
2
COM
a1−→
o1
σ(cid:6)
1
a2−→
o2
σ(cid:6)
2
σ1
σ2
), (σ2, a2, o2, σ(cid:6)
match((σ1, a1, o1, σ(cid:6)
1
(a1,a2)−→
(σ(cid:6)
1
(o1,o2)
(σ1, σ2)
, σ(cid:6)