### Adding Table Filters to a Publication (addfilter)

**Synopsis:**
```
-addfilter pubname
–repsvrfile pubsvrfile
-views schema_v1.view_1 [schema_v2.view_2 ...]
-tablesfilterclause "ordinal_t1:filtername_t1:filterclause_t1" ["ordinal_t2:filtername_t2:filterclause_t2" ...]
-viewsfilterclause "ordinal_v1:filtername_v1:filterclause_v1" ["ordinal_v2:filtername_v2:filterclause_v2" ...]
```

**Note:**
The schema names and table or view names provided as values for the tables or views parameters are case-sensitive. Unless quoted identifiers were used to create the database objects, Oracle names must be entered in uppercase (e.g., `EDB.DEPT`), and Advanced Server names must be entered in lowercase (e.g., `edb.dept`). For more information on quoted identifiers and case translation, see Section 10.4.5.

**Parameters:**

- **pubname:** The name of the publication to which the table filters will be added.
- **pubsvrfile:** The file containing the publication server login information.
- **schema_tn:** The name of the schema containing the nth table in the tables parameter list. This value is case-sensitive.
- **table_n:** The name of the nth table in the tables parameter list. This value is case-sensitive.
- **schema_vn:** (For SMR only) The name of the schema containing the nth view in the views parameter list. This value is case-sensitive.
- **view_n:** (For SMR only) The name of the nth view in the views parameter list. This value is case-sensitive.
- **ordinal_tn:** The ordinal number (position in the list, starting from 1) of a table in the tables parameter list to which an attribute will be applied.
- **filtername_tn:** The filter name to be assigned to the filter rule on the table.
- **filterclause_tn:** The filter clause to be applied to the table at the position indicated by `ordinal_tn`.
- **ordinal_vn:** (For SMR only) The ordinal number (position in the list, starting from 1) of a view in the views parameter list to which an attribute will be applied.
- **filtername_vn:** The filter name to be assigned to the filter rule on the view.
- **filterclause_vn:** (For SMR only) The filter clause to be applied to the view at the position indicated by `ordinal_vn`.

**Examples:**

In the following example, a table filter is added to the table `edb.emp` in the publication `analysts_managers`:

```sh
$ java -jar edb-repcli.jar -addfilter analysts_managers \
> -repsvrfile ~/pubsvrfile.prop \
> -tables edb.emp \
> -tablesfilterclause "1:jobgrade_9:job = 'SALESMAN'"
```

**Output:**
```
Creating Filter(s)
Tables:[[edb.emp, TABLE]]
Filter clause:[FilterName:jobgrade_9 FilterClause:job = 'SALESMAN' ]
Filter(s) created successfully.
```

---

### Updating Table Filters in a Publication (updatefilter)

**Synopsis:**
```
-updatefilter pubname
–repsvrfile pubsvrfile
-tablesfilterclause "filterid_1:filterclause_1" ["filterid_2:filterclause_2" ...]
```

**Note:**
Subsequent replications to any target subscriptions or non-MDN nodes where these filter rules were enabled will reflect the changes to the filter clauses. For more information on table filters, see Section 2.2.12.

**Parameters:**

- **pubname:** The name of the publication in which the filter clauses will be updated.
- **pubsvrfile:** The file containing the publication server login information.
- **filterid_n:** The filter ID identifying the filter rule whose filter clause will be changed. Use the `printpubfilterslist` command to obtain the filter IDs for the available filter rules in the publication (see Section 8.3.17).
- **filterclause_n:** The new filter clause to be used.

**Examples:**

The filter clause with filter ID 26 in the publication `analysts_managers` is modified:

```sh
$ java -jar edb-repcli.jar -updatefilter analysts_managers \
> -repsvrfile ~/pubsvrfile.prop \
> -tablesfilterclause "26:job = 'CLERK'"
```

**Output:**
```
Updating Filter(s)
Filter clause:[26:job = 'CLERK']
Filter(s) updated successfully.
```

---

### Removing a Table Filter from a Publication (removefilter)

**Synopsis:**
```
-removefilter pubname
–repsvrfile pubsvrfile
-filterid filterid
```

**Note:**
The removed filter rule will no longer apply to any target subscriptions or non-MDN nodes where the filter rule was enabled. For more information on table filters, see Section 2.2.12.

**Parameters:**

- **pubname:** The name of the publication containing the filter rule to be removed.
- **pubsvrfile:** The file containing the publication server login information.
- **filterid:** The filter ID identifying the filter rule to be deleted. Use the `printpubfilterslist` command to obtain the filter IDs for the filter rules in the publication (see Section 8.3.17).

**Examples:**

In the following example, the filter rule with filter ID 26 is removed from the publication `analysts_managers`:

```sh
$ java -jar edb-repcli.jar -removefilter analysts_managers \
> -repsvrfile ~/pubsvrfile.prop \
> -filterid 26
```

**Output:**
```
Removing Filter
Filter removed successfully
```

---

### Printing the Conflict Resolution Strategy (printconfresolutionstrategy)

**Synopsis:**
```
-printconfresolutionstrategy pubname
–repsvrfile pubsvrfile
-table schema_t.table_name
```

**Note:**
The schema name and table or view name provided as values for the table parameter are case-sensitive. Unless quoted identifiers were used to create the database objects, Oracle names must be entered in uppercase (e.g., `EDB.DEPT`), and Advanced Server names must be entered in lowercase (e.g., `edb.dept`). For more information on quoted identifiers and case translation, see Section 10.4.5.

**Parameters:**

- **pubname:** The name of the publication containing the table whose conflict resolution strategy is to be printed.
- **pubsvrfile:** The file containing the publication server login information.
- **schema_t:** The name of the schema containing `table_name`. This value is case-sensitive.
- **table_name:** The name of the table whose conflict resolution strategy is to be printed. This value is case-sensitive.

**Examples:**

In the following example, the conflict resolution strategy on the Advanced Server table `edb.emp` in the publication `emp_pub` is printed:

```sh
$ java -jar edb-repcli.jar -printconfresolutionstrategy emp_pub \
> -repsvrfile ~/pubsvrfile.prop \
> -table edb.emp
```

**Output:**
```
Primary/Standby Conflict Resolution Strategy...
Conflict Resolution Option:[ Earliest Timestamp ]
Standby Conflict Resolution Option:[ Manual ]
```

---

### Updating the Conflict Resolution Strategy (updateconfresolutionstrategy)

**Synopsis:**
```
-updateconfresolutionstrategy pubname
–repsvrfile pubsvrfile
-table schema_t.table_name
-conflictresolution { E | L | N | M | C }
-standbyconflictresolution { E | L | N | M | C }
[ -customhandlername customhandler ]
```

**Note:**
The schema name and table or view name provided as values for the table parameter are case-sensitive. Unless quoted identifiers were used to create the database objects, Oracle names must be entered in uppercase (e.g., `EDB.DEPT`), and Advanced Server names must be entered in lowercase (e.g., `edb.dept`). For more information on quoted identifiers and case translation, see Section 10.4.5.

**Parameters:**

- **pubname:** The name of the publication containing the table whose conflict resolution strategy is to be updated.
- **pubsvrfile:** The file containing the publication server login information.
- **schema_t:** The name of the schema containing `table_name`. This value is case-sensitive.
- **table_name:** The name of the table whose conflict resolution strategy is to be updated. This value is case-sensitive.
- **-conflictresolution:** For the conflict resolution option, specify `E` for earliest timestamp conflict resolution, `L` for latest timestamp conflict resolution, `N` for node priority conflict resolution, `M` for manual conflict resolution, or `C` for custom conflict handling.
- **-standbyconflictresolution:** For the standby conflict resolution option, specify `E` for earliest timestamp conflict resolution, `L` for latest timestamp conflict resolution, `N` for node priority conflict resolution, `M` for manual conflict resolution, or `C` for custom conflict handling.
- **customhandler:** For the custom handler name option, specify `customhandler` as the function name with an optional schema prefix (formatted as `schema.function_name`) as given in the `CREATE FUNCTION` command for the custom conflict handling function. The custom conflict handling function must be added to the master definition node. See Section 6.6.8.2 for an example of adding the custom conflict handling function using PSQL. The custom handler name option must be specified if and only if the conflict resolution option or the standby conflict resolution option is set for custom conflict handling with the `C` value.

**Examples:**

The conflict resolution strategy on the Advanced Server table `edb.emp` in the publication `emp_pub` is modified to use the latest timestamp conflict resolution with a standby strategy of node priority conflict resolution:

```sh
$ java -jar edb-repcli.jar -updateconfresolutionstrategy emp_pub \
> -repsvrfile ~/pubsvrfile.prop \
> -table edb.emp \
> -conflictresolution L \
> -standbyconflictresolution N
```

**Output:**
```
Updating Primary/Standby Conflict Resolution Strategy...
The Primary/Standby conflict resolution strategies were updated successfully.
```

Custom conflict handling is set for the `edb.dept` table along with the custom conflict handling function `edb.custom_conflict_dept`:

```sh
$ java -jar edb-repcli.jar -updateconfresolutionstrategy emp_pub \
> -repsvrfile ~/pubsvrfile.prop \
> -table edb.dept \
> -conflictresolution C \
> -standbyconflictresolution N \
> -customhandlername edb.custom_conflict_dept
```

**Output:**
```
Updating Primary/Standby Conflict Resolution Strategy...
The Primary/Standby conflict resolution strategies were updated successfully.
```

---

### Setting the Master Definition Node (setasmdn)

**Synopsis:**
```
-setasmdn pubdbid
–repsvrfile pubsvrfile
```

**Note:**
For more information on setting the master definition node, see Section 6.10.

**Parameters:**

- **pubdbid:** The publication database ID of the master node to be given the role of master definition node.
- **pubsvrfile:** The file containing the publication server login information.

**Examples:**

The following example sets the master node with publication database ID 9 as the master definition node:

```sh
$ java -jar edb-repcli.jar -setasmdn 9 -repsvrfile ~/pubsvrfile.prop
```

**Output:**
```
Updating the database node to be promoted as the new MDN node.
The database has been successfully promoted as the new MDN node.
```

---

### Setting the Controller (setascontroller)

**Synopsis:**
```
-setascontroller pubdbid
–repsvrfile pubsvrfile
```

**Note:**
For more information on setting the controller database, see Section 7.7.

**Parameters:**

- **pubdbid:** The publication database ID of the publication database to be designated as the controller database.
- **pubsvrfile:** The file containing the publication server login information.

**Examples:**

The following example sets the publication database with publication database ID 4 as the controller database:

```sh
$ java -jar edb-repcli.jar -setascontroller 4 -repsvrfile ~/pubsvrfile.prop
```

**Output:**
```
Updating the Publication database to be promoted as the new Controller database...
The Publication database has been successfully promoted as the new Controller database.
```

---

### Validating a Publication (validatepub)

**Synopsis:**
```
-validatepub pubname
–repsvrfile pubsvrfile
-repgrouptype { m | s }
```

**Note:**
For more information on validating publications, see Section 7.6.5.

**Parameters:**

- **pubname:** The name of the publication whose tables are to be validated.
- **pubsvrfile:** The file containing the publication server login information.
- **-repgrouptype:** Specify `s` if this command applies to a single-master replication system. Specify `m` if this command applies to a multi-master replication system.

**Examples:**

In the following example, the publication `dept_emp` is validated:

```sh
$ java -jar edb-repcli.jar -validatepub dept_emp \
> -repsvrfile ~/pubsvrfile.prop -repgrouptype s
```

**Output:**
```
Validating publication dept_emp ...
All schema of published tables in Publication {0} are up-to-date
```

---

### Validating All Publications (validatepubs)

**Synopsis:**
```
-validatepubs
–repsvrfile pubsvrfile
-pubdbid dbid
-repgrouptype { m | s }
```

**Note:**
For more information on validating publications, see Section 7.6.5.

**Parameters:**

- **pubsvrfile:** The file containing the publication server login information.
- **dbid:** The publication database ID of the publication database definition under which all tables are to be validated.
- **-repgrouptype:** Specify `s` if this command applies to a single-master replication system. Specify `m` if this command applies to a multi-master replication system.

**Examples:**

The following example validates all publications in the publication database with ID 123:

```sh
$ java -jar edb-repcli.jar -validatepubs -repsvrfile ~/pubsvrfile.prop -pubdbid 123 -repgrouptype s
```

**Output:**
```
Validating all publications in Publication Database 123 ...
All schema of published tables in Publication Database 123 are up-to-date
```

---

**Copyright Notice:**
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved.