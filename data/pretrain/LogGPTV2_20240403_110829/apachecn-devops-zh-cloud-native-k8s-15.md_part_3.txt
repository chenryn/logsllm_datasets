        name: my-tenant-creds-secret
      image: minio/minio:RELEASE.2020-09-26T03-44-56Z
      imagePullSecret: {}
    ```
    可以看到，这个文件指定了`Tenant` CRD 的一个实例。我们规范的第一部分指定了两个容器，一个用于 Minio 控制台，一个用于 Minio `server`本身。此外，`replicas`值反映了我们在`kubectl minio tenant create`命令中指定的内容。最后，它为 Minio `console`指定了一个机密的名字。
    接下来，让我们看看租户 CRD 的底部:
    ```
     liveness:
        initialDelaySeconds: 10
        periodSeconds: 1
        timeoutSeconds: 1
      mountPath: /export
      requestAutoCert: true
      zones:
      - resources: {}
        servers: 2
        volumeClaimTemplate:
          apiVersion: v1
          kind: persistentvolumeclaims
          metadata:
            creationTimestamp: null
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 256Mi
          status: {}
        volumesPerServer: 2
    status:
      availableReplicas: 0
      currentState: ""
    ```
    如您所见，`Tenant`资源指定了与副本数量相匹配的服务器数量(也由`creation`命令指定)。它还指定了内部 Minio 服务的名称，以及要使用的`volumeClaimTemplate`实例。
    然而，这个规范并不适合我们的目的，因为我们使用的是直接客户满意度调查。让我们用一个新的使用直接 CSI 的`volumeClaimTemplate`更新`zones`键，如下所示(将此文件保存为`my-updated-minio-tenant.yaml`)。这只是我们更新的文件的`zones`部分:
    my-updated-minio-tenant.yaml
    ```
    zones:
      - resources: {}
        servers: 2
        volumeClaimTemplate:
          metadata:
            name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 256Mi
            storageClassName: direct.csi.min.io
    ```
6.  现在让我们开始创建我们的 Minio 租户吧！我们可以使用以下命令做到这一点:
    ```
    kubectl apply -f my-updated-minio-tenant.yaml
    ```
这将产生以下输出:
```
tenant.minio.min.io/my-tenant created
secret/my-tenant-creds-secret created
secret/my-tenant-console-secret created
```
此时，Minio Operator 将开始为我们的新 Minio 租户创建必要的资源，在几分钟后，您应该会看到除了 Operator 之外的一些 Pods 启动，如下所示:
![Figure 15.1 – Minio Pods output ](img/B14790_15_001.jpg)
图 15.1–Minio Pods 输出
我们现在已经完全启动并运行了我们的 Minio 租户！接下来，让我们看看 Minio 控制台，看看我们的租户看起来如何。
## 访问 Minio 控制台
首先，为了获取控制台的登录信息，我们需要获取两个密钥的内容，这两个密钥保存在自动生成的`-console-secret`机密中。
要获取控制台的`access`键和`secret`键(在我们的例子中是自动生成的)，让我们使用以下两个命令。在我们的案例中，我们使用我们的`my-tenant`租户来获取`access`钥匙:
```
echo $(kubectl get secret my-tenant-console-secret -o=jsonpath='{.data.CONSOLE_ACCESS_KEY}' | base64 --decode)
```
为了得到`secret`键，我们使用这个:
```
echo $(kubectl get secret my-tenant-console-secret -o=jsonpath='{.data.CONSOLE_SECRET_KEY}' | base64 --decode)
```
现在，我们的 Minio 控制台将在服务`-console`上可用。
让我们使用`port-forward`命令访问这个控制台。在我们的情况下，这将如下所示:
```
kubectl port-forward service/my-tenant-console 8081:9443
```
我们的 Minio 控制台将于`https://localhost:8081`在您的浏览器上提供。您将需要接受浏览器安全警告，因为在本例中，我们没有为 localhost 的控制台设置 TLS 证书。输入上一步得到的`access`键和`secret`键登录！
现在我们已经登录到控制台，可以开始添加我们的 Minio 租户了。首先，让我们创建一个桶。为此，单击左侧边栏上的**时段**，然后单击**创建时段**按钮。
在弹出窗口中，输入桶的名称(在我们的例子中，我们将使用`my-bucket`)并提交表单。您应该会在列表中看到一个新的存储桶–参见下面的截图示例:
![Figure 15.2 – Bucket](img/B14790_15_002.jpg)
图 15.2–铲斗
我们现在已经准备好了我们的分布式 Minio 设置，以及一个要上传到的桶。让我们通过上传一个文件到我们全新的对象存储系统来总结这个例子！
我们将使用 Minio CLI 进行上传，这使得与 Minio 等 S3 兼容存储进行交互的过程变得更加容易。我们将从 Kubernetes 内部运行预加载了 Minio CLI 的容器映像，而不是从我们的本地机器使用 Minio CLI，因为 TLS 设置仅在从集群内部访问 Minio 时有效。
首先，我们需要获取 Minio `access`键和`secret`，它们不同于我们之前获取的控制台`access`键和`secret`。要获取这些密钥，运行以下控制台命令(在我们的例子中，我们的租户是`my-tenant`)。首先，拿到`access`键:
```
echo $(kubectl get secret my-tenant-creds-secret -o=jsonpath='{.data.accesskey}' | base64 --decode)
```
然后，按下`secret`键:
```
echo $(kubectl get secret my-tenant-creds-secret -o=jsonpath='{.data.secretkey}' | base64 --decode)
```
现在，让我们用 Minio 命令行界面启动这个容器。为此，让我们使用这个 Pod 规范:
迷你 mc-pod，yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: minio-mc
spec:
  containers:
  - name: mc
    image: minio/mc
    command: ["/bin/sh", "-c", "sleep 10000000s"]
  restartPolicy: OnFailure
```
使用以下命令创建此 Pod:
```
kubectl apply -f minio-mc-pod.yaml
```
然后，到`exec`进入这个`minio-mc`Pod ，我们运行通常的`exec`命令:
```
Kubectl exec -it minio-mc -- sh
```
现在，让我们在 Minio CLI 中为新创建的 Minio 分布式集群配置访问。我们可以用下面的命令来完成(在这个配置中需要`--insecure`标志):
```
mc config host add my-minio https://:9000 --insecure
```
该命令的 Pod IP 可以是我们的任何一个租户 Minio Pods 的 IP，在我们的例子中，它们是`my-tenant-zone-0-0`和`my-tenant-zone-0-1`。运行此命令后，将提示您输入访问密钥和密钥。输入它们，如果成功，您将看到一条确认消息，如下所示:
```
Added `my-minio` successfully.
```
现在，为了测试 CLI 配置是否有效，我们可以使用以下命令创建另一个测试桶:
```
mc mb my-minio/my-bucket-2 --insecure
```
这将产生以下输出:
```
Bucket created successfully `my-minio/my-bucket-2`.
```
作为我们设置的最后测试，让我们上传一个文件到我们的 Minio 桶！
首先，仍然在`minio-mc` Pod 上，创建一个名为`test.txt`的文本文件。用你想要的任何文本填充文件。
现在，让我们使用以下命令将其上传到最近创建的存储桶中:
```
mc mv test.txt my-minio/my-bucket-2 --insecure
```
您应该会看到一个带有上传的加载栏，它应该以上传时的整个文件大小结束。
最后一个检查，进入 Minio 控制台上的**仪表盘**页面，查看对象是否出现，如下图所示:
![Figure 15.3 – Dashboard](img/B14790_15_003.jpg)
图 15.3–仪表板
可以看到，我们的文件上传成功！
Minio 到此为止——在配置方面，您还可以做很多事情，但这超出了本书的范围。更多信息请查看[https://docs.min.io/](https://docs.min.io/)的文档。
接下来，让我们看看在 Kubernetes 上运行数据库。
# 在库柏上运行 DBs
现在我们已经了解了 Kubernetes 上的对象存储工作负载，我们可以继续讨论数据库。正如我们之前在本章和本书其他部分所讨论的，许多数据库支持在 Kubernetes 上运行，具有不同的成熟度。
首先，有几个遗留和现有的数据库引擎支持部署到 Kubernetes。通常，这些引擎会支持 Helm 图表或操作符。例如，像 PostgreSQL 和 MySQL 这样的 SQL 数据库都有不同组织支持的 Helm 图表和操作符。像 MongoDB 这样的 NoSQL 数据库也支持部署到 Kubernetes 的方法。
除了这些以前存在的数据库引擎之外，像 Kubernetes 这样的容器编排器还导致了一个新类别的创建——NewSQL 数据库。
除了符合 SQL 的 API 之外，这些数据库还提供了 NoSQL 数据库难以置信的可扩展性。它们可以被认为是在 Kubernetes(和其他管弦乐队)上轻松扩展 SQL 的一种方式。CockroachDB 在这里是一个受欢迎的选择，Vitess 也是如此，与其说它是一个替代 NewSQL 数据库，不如说它是一种轻松扩展 MySQL 引擎的方法。
在本章中，我们将重点介绍如何部署 CockroachDB，这是一个为分布式环境构建的现代 NewSQL 数据库，非常适合 Kubernetes。
## 在 Kubernetes 上运行 CockroachDB