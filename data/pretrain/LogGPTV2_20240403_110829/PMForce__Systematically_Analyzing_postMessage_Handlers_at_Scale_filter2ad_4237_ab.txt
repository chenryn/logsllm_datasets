privacy threats on the web at scale. In 2013, Son and Shmatikov
[24] presented the first systematic security and privacy analysis of
postMessage handlers showcasing real-world vulnerabilities in 84
of the top 10,000 sites by manually analyzing 136 handler functions.
With respect to XSS on the client, plenty of research has been
conducted on the feasibility of finding client-side XSS at scale [10,
14, 25] by using a browser engine with byte-level taint tracking and
context-sensitive exploit generation schemes. Finally, the privacy
implications of leaking browser state in the form of cookies was
analyzed by Sivakorn et al. [23]. They concluded that a plethora of
sites expose sensitive information via cookies.
Since the 2013 paper from Son and Shmatikov, the number of
handlers has significantly increased, leaving us to analyze over
27,000 hash-unique handlers rather than 136. This necessitates the
need for automated tools capable of analyzing the web at scale.
We further show that the 2013 insight that even if postMessage
handlers perform origin checks, most of them are faulty and cir-
cumventable by an attacker, are no longer valid. Instead, we show
that for modern handlers the majority implement the origin checks
correctly. Comparing ourselves to the work about client-side XSS
detection, these works observe the data flows present within the
pages and build exploit candidates purely on the observed values. In
contrast, our approach precisely captures all operations performed
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
// running at example.com
(function(){
function isAllowedOrigin(origin){
return /example\.com/.test(event.origin);
}
function handler(event){
if(!isAllowdOrigin(event.origin))
return;
if(event.data && event.data.mode == 'eval')
eval(event.data.fn.split(',')[1])
}
window.addEventListener('message', handler);
})();
// running at example.com.attacker.com with vuln pointing to example.com
vuln.postMessage({mode: 'eval', fn:',alert(1)'}, '*')
Figure 3: Vulnerable postMessage handler
Figure 4: Overview of our approach
on single data flows and can generate a payload accordingly. Finally,
while the work of Sivakorn et al. [23] on leaking cookies relied on
unencrypted network traffic, transport encryption has become ubiq-
uitous in recent years, making this vector less prevalent. We instead
show the dangers associated with postMessage handlers that can
leak client-side state, underlining that the threats to privacy can be
extended to other threat models.
3 METHODOLOGY
In this section, we discuss our approach leveraging the concepts of
forced execution and dynamic taint propagation to automatically
extract security and privacy-related traces given a postMessage han-
dler function as input. Furthermore, we explain how we leverage
an SMT solver to automatically generate valid postMessages from
these traces that trigger the observed functionality. Figure 3 depicts
a vulnerable PM handler that serves as a running example through-
out this section alongside an exploit that causes an alert to show. An
attacker controlling a domain such as example.com.attacker.com
can send a Javascript object which has the fn property set to their
payload via a postMessage to the frame that has this handler regis-
tered to execute the payload in the vulnerable origin (see line 16).
3.1 PMForce Overview
PMForce consists of three distinct modules, as depicted in Figure 4,
that are automatically injected into every frame that we visit us-
ing the Chrome Dev Tools protocol. We use the puppeteer Node.js
framework to steer our instances of Chromium. All the modules,
except for the constraint solving routine, are implemented in Java-
script, which allows us to perform most of the necessary operation
within the browser itself. As there exists no stable port of Z3 for
Javascript, we implemented our constraint solving mechanism in
python using Z3Py, which is exposed to the other modules via bind-
ings through the Dev Tools protocol, thus accessible through the
window object. Our implementation will be available to the general
public [1] once this work is published.
In the first step, we use forced execution and taint tracking to find
potential flows from the postMessage object into sensitive sinks
such as document.write, localStorage, and other postMessages.
Furthermore, we track flows that stem from all client-side storage
mechanisms to check for leakage of privacy-sensitive information.
In the second step, we use these traces to construct JS objects that,
when sent as a postMessage, will trigger the sensitive functionality
and thus lead to code execution, manipulation of client-side state, or
leak information about the client-side storages of the page. To that
end, we introduce the concept of Exploit Templates and utilize those
together with the path constraints found in the traces to generate
exploit candidates using Z3 as an SMT solver.
As the last step, we validate that these candidate exploits indeed
achieve our intended behavior by calling the unmodified handler
code with our candidate exploit as input and checking whether the
intended action (such as code execution) was successfully triggered.
3.2 Forced Execution
We leverage the concept of forced execution, in which the control
flow of a program is forcefully altered to explore as much code
of the program as possible. While other works are making use of
symbolic execution for Javascript [12, 20], we only want to make
use of the expensive step of constraint solving when we have found
an interesting trace through the program. There exist various paths
throughout one particular handler, which are not interesting from
our point-of-view, which means that we also do not need to generate
valid inputs that allow us to reach these points in the program.
To achieve this goal, we utilize the dynamic instrumentation
framework Iroh [13] and extend its capabilities where necessary.
Doing so allows us, among other things, to register callbacks that
are triggered whenever conditionals are evaluated. More specif-
ically, we can also change the results of any of the operations.
Figure 5 represents a minimal code snippet that showcases how
we can change the outcome of the conditional used within an If
statement and thus can choose to either execute the consequence
or the alternative. Similarly, we change the values of switch-case
constructs to execute particular cases selectively. As a final control-
flow altering step, we change the outcome of any expression that
is lazily evaluated, i.e., if an OR is lazily evaluated, we change the
value of the first expression to false and if an AND is lazily executed
we change the value to true. This allows us to forcefully capture the
full path constraints, which we need to solve later. In our concrete
example of Figure 3 this means that we collect both the constraint
that event.data must evaluate to true and that event.data.mode
must be equal to the string eval as checked in line 10.
example.comhttps://example.comForce Execution+Taint AnalysisExploit Generation+Constraint SolvingTracesExploit ValidationExploitCandidatescollected PM handler1
2
3
4
5
6
7
8
9
10
11
// functionCode is the string representation of the function to force execute
let stage = new Iroh.Stage(functionCode);
let IFListener = stage.addListener(Iroh.IF);
IFListener.on("test", (e) => {
// shouldForceExecute returns true if this Basic Block should be
↩→
forcefully executed in this program run
e.value = shouldForceExecute(e.hash);
});
// isNotStale returns true for as long as we can find new code while forcefully
↩→
while(isNotStale()){
executing the program
eval(stage.script)
}
Figure 5: Using Iroh to forcefully execute a basic block
Selective Forced Execution. While the initially registered postMes-
sage handlers serve as an entry point into the code portion handling
incoming messages, such handler code frequently calls into other
pieces of the code, e.g., functions accessible in the scope of the
handler to perform origin checks or further process the message.
Thus, whenever we forcefully execute a call to a function that is
not a native browser function, we instrument this code on the fly
and execute our instrumented version instead. Since our instru-
mentation step relies on Iroh’s changes to the source code of the
handler functions, the transformation loses all handles to variables
defined in the scope where the initial function was defined. In our
example, this means that once we have instrumented the initial
handler function, any reference to isAllowedOrigin is lost, as this
was only locally scoped inside the closure. To solve this issue, we
execute our complete pipeline in the strict mode of Javascript, such
that non-existing variables lead to exceptions. We can then handle
these exceptions by fetching the appropriate values, be it basic
types, objects, or functions, from the appropriate scope, using the
Debugger and Runtime domain of the Chrome DevTools Protocol
[6]. Importantly, the return value of any of our instrumented func-
tions might be dependent on further constraints on the event that
is passed to the handler function. Considering our example in Fig-
ure 3, we only return true if the origin matches a particular regex.
However, there is only an implicit data flow from event.origin
to the return value of the function. To solve this issue, we emit all
path constraints of the called function once we return and append
those to the path constraints of the calling function.
Side Effects. Naturally, forced execution of every possible path of
the handler function will incur side effects to the page, e.g., change
the DOM, add cookies, or change global variables. However, most
of these side effects do not affect our further analysis, e.g., even if
we change global values, they cannot prevent us from executing
specific paths of the program as we are forcing path constraints any-
way. Solely side effects that destroy the current execution context
or remove elements from the DOM hinder our analysis. The most
prominent example of such destructive behavior is a PM handler
that is used for authentication, i.e., on a successful authentication,
it sets a cookie and reloads the page. Reloading the page will ter-
minate all ongoing JavaScript executions and thus interrupt our
analysis. To prevent this, we implement a navigation lock on the
currently visited page and abort every navigational request using
the Chrome DevTools Protocol [6]. Since our crawlers do not click
on any elements, all navigational requests after the initial docu-
ment load are byproducts of our forced execution and can thus
be aborted without changing otherwise benign functionality of
the document. As for removing elements from the DOM, we could
find handlers that remove certain elements that could be abused if
they are still present, e.g., a document.write on the document of a
same-origin frame. If this element was removed during our force
execution, any subsequent validation attempt would fail. Therefore,
while forcefully executing the handler, we substitute such function
calls with no operations.
3.3 Taint Analysis
While the forced execution allows us to reach interesting parts of
the handler functionality, we still need to discuss how we can lever-
age it to find traces that are relevant to the security or privacy of the
site. To achieve this goal, while we are forcefully executing different
paths throughout the handler, we supply the handler function with
a Javascript Proxy object as input. Such proxy objects allow inter-
cepting accesses to properties on the object. We utilize these traps
to persistently capture all operations that the code performs on the
proxied object. Together with the dynamic execution engine Iroh
and these traps, this builds a lightweight taint-engine which does
not rely on modifications of the browser as, e.g., the taint engines
of Lekies et al. [10], Melicher et al. [14], Saxena et al. [21], and can
selectively be applied to parts of the code. In the following, we
discuss how different types of accesses on our Proxy objects need
to be handled to ensure that we do not lose taint information and
that we capture all necessary operations to allow for the automated
generation of attack payloads.
Base Types. The basic case deals with accessed values that are
basic types; these might be strings or further Javascript objects.
Every proxy object maintains two internal structures, the first one
being an identifier, which coming back to our example might be
event.data or event.data.mode, and the operations that were
executed on this specific element. This means that if we access
a property, say mode on a proxy that represents event.data. We
can simply create a new Proxy that represents event.data.mode
and remember all operations that were executed on the parent
element inside the new object. Naturally, since we start with no
knowledge about the expected format of received postMessages
for any handler, whenever we encounter properties that are not
defined on a proxied object, we initialize those with empty objects.
Additionally, we try to infer types of proxied properties based on
the further usage throughout the program, e.g., if a string function
is accessed on a proxied object, we correct our assignment from an
empty object to a string and remember this typing information for
later use when solving path constraints.
Functions. When accessing native functions on objects, we need
to ascertain that we remove our proxy layer on the arguments
before calling the function, as the native functions only work on
the underlying wrapped values. After the function call returns, we
re-proxy the returned value and note that this native function was
called on the proxied object in the internal data structure of the
proxied object. When a function is called on a specific object, we
not only need to remove the proxy layer for the arguments but also
{
}
"ops": [
{
"type": "ops_on_parent_element",
"old_ops": [],
"old_identifier": "event"
},
{
"args": [
0,
8
],
"type": "member_function",
"function_name": "substring"
},
{
"op": "===",
"val": "https://",
"side": "left",
"type": "Binary"
}
],
"identifier": "event.origin"
Figure 6: Example output of taint analysis
for the underlying object. In particular, it might be the case that
both the object on which the function is called and an argument
are proxied values. Any non-native function will be instrumented
on-the-fly and thus can handle our proxy objects as input.
Symbols. Symbols are a way to define, e.g., custom iterators on
objects [15]. When the program logic iterates over our proxies, they
are accessed with the Iterator Symbol as a property. We leverage
such accesses, to infer further type information and return an itera-
tor that consecutively outputs further proxied objects that represent
accesses to the different indices on the underlying object. While
we can leverage this pattern to accommodate any of the currently
specified symbols, we could only find that the iterator symbol was
of use for our investigated handlers.
Implicit Type Conversions. Similarly to Symbols, the native func-
tions toString and valueOf need further considerations. These
functions are commonly used to convert objects to the same type,
which frequently happens when one of our proxied objects is part
of a Binary Expression. Thus, we always return the underlying
object when these functions are called and within our callbacks of
Iroh discern whether the initial program issued this call; thus we
need to add it to the operations of the proxy, or whether we caused
it and it can, therefore, be omitted.
Provided with the means to handle all operations on such proxy
objects, we still need to capture all those expressions in which proxy
objects are used, e.g., an equality check to the string eval as is the
case in our running example in Figure 3. For this, we resort to Iroh’s
callbacks, allowing us to hook, e.g., Unary and Binary Expression.
We apply the corresponding operation to the underlying objects
and return the updated proxy as result of the operation. We can
then check whether we find any of our proxied objects as part
of the conditionals of a control flow statement. Figure 6 shows
a sample constraint extracted from a conditional, in which the
handler function asserts that the origin is an HTTPS origin.
3.4 Solving Constraints
Our taint analysis allows us to precisely capture all accesses to the
event object, thus, whenever we encounter a proxied object as part
of a control flow-altering statement, we can add this object to the
list of path constraints that would hypothetically need to be fulfilled
for this execution path to execute without being forced. Once we
encounter an access to a sink, e.g., document.write to find XSS,
we generate a report containing all the collected path constraints
(including negated constraints if we forced specific branches to be
false) and the respective object that ended up in the sink and pass
this information to our exploit generation engine.