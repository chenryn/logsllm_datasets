N
Y
N
N
N
˜680
˜270
˜650
-
-
˜5000
Time
Verif.
10s
1.4 days
0.5-24h
-
-
1.5h
Fig. 6.
computational. Model Size and Veriﬁcation Time are per pattern.
Noise Analysis Comparison. For Model: S = symbolic, C =
each protocol takes between 30 minutes and 24 hours. Vacarme
generates Tamarin models for each protocol, and analyzes it
against the strongest threat model supported by the protocol.
Analyzing 53 protocols takes a total of 74 CPU days.
The key difference in our approach is that we verify a generic
executable Noise speciﬁcation using a modular, semi-automated
proof technique based on dependent types. Hence, we are able
to verify the whole protocol speciﬁcation in about 9 minutes,
which amounts to 10s per pattern. Furthermore, our proofs are
for an executable speciﬁcation of the whole Noise protocol
stack, whereas Noise Explorer and Vacarme only focus on
the protocol messaging code. Conversely, the protocol-level
veriﬁcation results of Vacarme are stronger than ours, since
Tamarin can handle equivalence properties like anonymity and
has a more precise model of Difﬁe-Hellman.
The security proof overhead for Noise* can be estimated
by the ratio between our DY* proof and the functional
speciﬁcation, which is 2.4. Note however, that this is a proof
for all 59 patterns, and is still just a fraction of the effort of
developing the Low* implementation.
Figure 6 also notes other work on the computational analysis
of Noise protocols: [23] deﬁnes a new security model for
cryptographically analyzing multiple Noise protocols using pen-
and-paper proofs; [38] describes a manual proof of WireGuard,
including an analysis of IKpsk2; [9] presents a mechanized
cryptographic proof of WireGuard using CryptoVerif. These
works use a more precise cryptographic model
than the
symbolic models in our work or in Vacarme. However, the
work needed to prove each protocol is signiﬁcantly higher.
Linking our veriﬁed implementations to computational proofs
is an interesting direction for future work.
Other Related Work. Apart from work on Noise, prior
works have investigated the automatic generation of protocol
code from veriﬁed high-level protocol speciﬁcations, yielding
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
119
implementations in Java [39], OCaml [17], [40], and F# [41],
[42]. Each of these tools has been applied to a handful of
protocols; the generated protocol code is tuned for correctness
rather than performance and relies on unveriﬁed cryptographic
libraries. In contrast, by relying on the F* ecosystem, we
generate high-performance C code that is provably correct,
memory safe, and linked to a veriﬁed cryptographic library.
Furthermore, the ﬂexibility and succinctness of the Noise
speciﬁcation language enables us to automatically generate
veriﬁed implementations for 59 distinct protocols, yielding a
comprehensive protocol library. Other prior works have focused
on efﬁcient code generation for specialized cryptographic
constructions like multi-party computation and zero-knowledge
proofs; we refer the reader to [11], [43] for a survey of this line
of work. Finally, a long line of work has investigated techniques
for directly verifying cryptographic protocol implementations
written in F# [44], [45], [46], [8], F* [47], [16], Java [48],
[19], and C [49], [50], [51]. In these settings, each protocol
implementation must be veriﬁed independently, whereas our
compiler-based approach allows us to verify a large class of
protocol implementations once and for all.
VII. CONCLUSION
We have presented a Noise Protocol Compiler embedded
within F*. Our compiler is veriﬁed once; then, for any choice
of Noise Protocol and matching cryptographic implementations,
it produces an efﬁcient, low-level implementation in C. We
generate not only protocol transitions, but also the entire
protocol stack, including state machine, device and session
management, user-conﬁgurable key policies, long-term key
storage, and dynamic security levels. At all layers, we guard
against user error by providing robust APIs. We go beyond
the usual trifecta of memory safety, functional correctness and
side-channel resistance, by connecting our veriﬁed stack to a
symbolic security proofs based on the DY* framework. These
extensive veriﬁcation results come at no cost to performance;
indeed our C code beats most existing Noise implementations.
ACKNOWLEDGMENT
This work was partially supported by the European Research
Council (ERC) through Grant CIRCUS-683032, the Ofﬁce of
Naval Research (ONR) through Grant N000141812618 and
the DST-INSPIRE Faculty Grant.
REFERENCES
[1] K. Cohn-Gordon, C. Cremers, and L. Garratt, “On post-compromise
security,” in IEEE Computer Security Foundations Symposium, 2016, pp.
164–178.
[2] B. Blanchet, “Modeling and verifying security protocols with the applied
pi calculus and proverif,” in Foundations and Trends in Privacy and
Security, vol. 1, no. 1-2, 2016, pp. 1–135.
[3] S. Meier, B. Schmidt, C. Cremers, and D. A. Basin, “The TAMARIN
prover for the symbolic analysis of security protocols,” in Computer
Aided Veriﬁcation, ser. LNCS, vol. 8044, 2013, pp. 696–701.
[4] C. Cremers, M. Horvat, J. Hoyland, S. Scott, and T. van der Merwe,
“A comprehensive symbolic analysis of tls 1.3,” in ACM Conference on
Computer and Communications Security, 2017, p. 17731788.
[5] K. Bhargavan, B. Blanchet, and N. Kobeissi, “Veriﬁed models and
reference implementations for the TLS 1.3 standard candidate,” in IEEE
Symposium on Security and Privacy, 2017, pp. 483–502.
[6] N. Kobeissi, K. Bhargavan, and B. Blanchet, “Automated veriﬁcation for
secure messaging protocols and their implementations: A symbolic and
computational approach,” in IEEE European Symposium on Security and
Privacy, 2017, pp. 435–450.
[7] B. Blanchet, “A computationally sound mechanized prover for security
protocols,” IEEE Transactions on Dependable and Secure Computing,
vol. 5, no. 4, p. 193207, Oct. 2008.
[8] C. Fournet, M. Kohlweiss, and P.-Y. Strub, “Modular code-based
cryptographic veriﬁcation,” in ACM Conference on Computer and
Communications Security, 2011, p. 341350.
[9] B. Lipp, B. Blanchet, and K. Bhargavan, “A mechanised cryptographic
proof of the wireguard virtual private network protocol,” in IEEE
European Symposium on Security and Privacy, 2019, pp. 231–246.
[10] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P. Strub,
“Implementing TLS with veriﬁed cryptographic security,” in IEEE
Symposium on Security and Privacy, 2013, pp. 445–459.
[11] M. Barbosa, G. Barthe, K. Bhargavan, B. Blanchet, C. Cremers, K. Liao,
and B. Parno, “Sok: Computer-aided cryptography,” in IEEE Symposium
on Security and Privacy, 2021, pp. 777–795.
[12] National Vulnerability Database, “Heartbleed bug,” CVE-2014-0160 http:
//web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0160, Apr. 2014.
[13] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet,
M. Kohlweiss, A. Pironti, P.-Y. Strub, and J. K. Zinzindohoue, “A
Messy State of the Union: Taming the Composite State Machines of
TLS,” in IEEE Symposium on Security and Privacy, 2015, pp. 535–552.
[14] T. Ramananandro, A. Delignat-Lavaud, C. Fournet, N. Swamy, T. Chajed,
N. Kobeissi, and J. Protzenko, “Everparse: veriﬁed secure zero-copy
parsers for authenticated message formats,” in USENIX Security Sympo-
sium, 2019, pp. 1465–1482.
[15] J. Protzenko, B. Parno, A. Fromherz, C. Hawblitzel, M. Polubelova,
K. Bhargavan, B. Beurdouche, J. Choi, A. Delignat-Lavaud, C. Fournet
et al., “Evercrypt: A fast, veriﬁed, cross-platform cryptographic provider,”
in IEEE Symposium on Security and Privacy, 2019, pp. 634–653.
[16] A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, J. Protzenko, A. Rastogi,
N. Swamy, S. Zanella-Beguelin, K. Bhargavan, J. Pan, and J. K.
Zinzindohoue, “Implementing and proving the tls 1.3 record layer,” in
IEEE Symposium on Security and Privacy, 2017, pp. 463–482.
[17] D. Cad´e and B. Blanchet, “Proved generation of implementations from
computationally secure protocol speciﬁcations,” Journal of Computer
Security, vol. 23, no. 3, pp. 331–402, 2015.
[18] J. Protzenko, B. Beurdouche, D. Merigoux, and K. Bhargavan, “Formally
veriﬁed cryptographic web applications in webassembly,” in IEEE
Symposium on Security and Privacy, 2019, pp. 1256–1274.
[19] R. K¨usters, T. Truderung, and J. Graf, “A Framework for the Crypto-
graphic Veriﬁcation of Java-like Programs,” in IEEE Computer Security
Foundations Symposium, 2012, pp. 198–212.
[20] T. Perrin, “The Noise Protocol Framework,” http://noiseprotocol.org/
noise.html, 2018.
[21] G. Girol, L. Hirschi, R. Sasse, D. Jackson, C. Cremers, and D. Basin, “A
spectral analysis of Noise: A comprehensive, automated, formal analysis
of difﬁe-hellman protocols,” in USENIX Security Symposium, 2020.
[22] N. Kobeissi, G. Nicolas, and K. Bhargavan, “Noise Explorer: Fully
Automated Modeling and Veriﬁcation for Arbitrary Noise Protocols,” in
IEEE European Symposium on Security and Privacy, 2019, pp. 356–370.
[23] B. Dowling, P. R¨osler, and J. Schwenk, “Flexible Authenticated and
Conﬁdential Channel Establishment (fACCE): Analyzing the Noise
Protocol Framework,” in Public-Key Cryptography, vol. 12110, 2020,
pp. 341–373.
[24] N. Swamy, C. Hricu, C. Keller, A. Rastogi, A. Delignat-Lavaud, S. Forest,
K. Bhargavan, C. Fournet, P.-Y. Strub, M. Kohlweiss, J.-K. Zinzindohoue,
and S. Zanella-B´eguelin, “Dependent types and multi-monadic effects
in F*,” in ACM Symposium on Principles of Programming Languages,
2016, pp. 256–270.
[25] J. Protzenko, J. K. Zinzindohou´e, A. Rastogi, T. Ramananandro, P. Wang,
S. Z. B´eguelin, A. Delignat-Lavaud, C. Hritcu, K. Bhargavan, C. Fournet,
and N. Swamy, “Veriﬁed low-level programming embedded in F*,”
Proceedings of the ACM on Programming Languages, vol. 1, no. ICFP,
pp. 17:1–17:29, 2017.
[26] J. K. Zinzindohou´e, K. Bhargavan, J. Protzenko, and B. Beurdouche,
“HACL*: A veriﬁed modern cryptographic library,” in ACM Conference
on Computer and Communications Security, 2017, pp. 1789–1806.
[27] K. Bhargavan, A. Bichhawat, Q. H. Do, P. Hosseyni, R. K¨usters,
G. Schmitz, and T. W¨urtele, “DY* : A Modular Symbolic Veriﬁcation
Framework for Executable Cryptographic Protocol Code,” in IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
120
European Symposium on Security and Privacy, Virtual, Austria, Sep.
2021.
[28] D. J. Bernstein, T. Lange, and P. Schwabe, “The security impact of a
new cryptographic library,” in International Conference on Cryptology
and Information Security in Latin America (LATINCRYPT). Springer,
2012, pp. 159–176.
[29] R. Barnes, K. Bhargavan, B. Lipp, and C. Wood, “Hybrid public key
encryption,” IRTF Internet-Draft draft-irtf-cfrg-hpke-12, 2021.
[30] M. Polubelova, K. Bhargavan, J. Protzenko, B. Beurdouche, A. Fromherz,
N. Kulatova, and S. Zanella-B´eguelin, “HACLxN: Veriﬁed generic
SIMD crypto (for all your favourite platforms),” in ACM Conference on
Computer and Communications Security, 2020, p. 899918.
[31] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, J. Pan,
J. Protzenko, A. Rastogi, N. Swamy, S. Zanella-B´eguelin, and J. K.
Zinzindohou´e, “Implementing and proving the TLS 1.3 record layer,” in
IEEE Symposium on Security and Privacy, 2017.
[32] A. Delignat-Lavaud, C. Fournet, B. Parno, J. Protzenko, T. Ramananandro,
J. Bosamiya, J. Lallemand, I. Rakotonirina, and Y. Zhou, “A security
model and fully veriﬁed implementation for the ietf quic record layer,”
in IEEE Symposium on Security and Privacy, 2021, pp. 1162–1178.
[33] “Noise* Code Repository,” https://github.com/Inria-Prosecco/noise-star.
[34] D. Dolev and A. Yao, “On the security of public key protocols,” in IEEE
Transactions on Information Theory, vol. 29, no. 2, 2006, p. 198208.
[35] “DY* Code Repository,” https://github.com/REPROSEC/dolev-yao-star.
[36] S. Ho, J. Protzenko, A. Bichhawat, and K. Bhargavan, “Noise*: A Library
of Veriﬁed High-Performance Secure Channel Protocol Implementations,”
INRIA, Tech. Rep., December 2021, (Long Version) - https://hal.inria.fr/
hal-03474303.
[37] T. Y. C. Woo and S. S. Lam, “Authentication for distributed systems,”
in Computer, vol. 25, no. 1, 1992, p. 3952.
[38] B. Dowling and K. G. Paterson, “A cryptographic analysis of the
wireguard protocol,” in Applied Cryptography and Network Security,
2018, pp. 3–21.
[39] A. Pironti and R. Sisto, “Provably correct Java implementations of spi
calculus security protocols speciﬁcations,” Journal of Computer Security,
vol. 29, no. 3, p. 302314, 2010.
[40] J. A. McCarthy, S. Krishnamurthi, J. D. Guttman, and J. D. Ramsdell,
“Compiling cryptographic protocols for deployment on the web,” in
International Conference on World Wide Web, 2007, p. 687696.
[41] R. Corin, P.-M. Deni´elou, C. Fournet, K. Bhargavan, and J. Leifer, “A
secure compiler for session abstractions,” Journal of Computer Security,
vol. 16, no. 5, p. 573636, 2008.
[42] C. Fournet, G. L. Guernic, and T. Rezk, “A security-preserving compiler
for distributed programs: from information-ﬂow policies to cryptographic
mechanisms,” in ACM Conference on Computer and Communications
Security. ACM, 2009, pp. 432–441.
[43] M. Hastings, B. Hemenway, D. Noble, and S. Zdancewic, “Sok:
General purpose compilers for secure multi-party computation,” in IEEE
Symposium on Security and Privacy, 2019, pp. 1220–1237.
[44] J. Bengtson, K. Bhargavan, C. Fournet, A. D. Gordon, and S. Maffeis,
“Reﬁnement types for secure implementations,” ACM Transactions on
Programming Languages and Systems, vol. 33, no. 2, pp. 8:1–8:45, 2011.
[45] K. Bhargavan, C. Fournet, and A. D. Gordon, “Modular veriﬁcation of
security protocol code by typing,” in ACM Principles of Programming
Languages, 2010, pp. 445–456.
[46] M. Backes, C. Hritcu, and M. Maffei, “Union, intersection and reﬁnement
types and reasoning about type disjointness for secure protocol imple-
mentations,” Journal of Computer Security, vol. 22, no. 2, pp. 301–353,
2014.
[47] G. Barthe, C. Fournet, B. Gr´egoire, P. Strub, N. Swamy, and S. Z.
B´eguelin, “Probabilistic relational veriﬁcation for cryptographic imple-
mentations,” in ACM Principles of Programming Languages, 2014, pp.
193–206.
[48] M. Avalle, A. Pironti, D. Pozza, and R. Sisto, “Javaspi: A framework
for security protocol implementation,” International Journal of Secure
Software Engineering, vol. 2, no. 4, pp. 34–48, 2011.
[49] F. Dupressoir, A. D. Gordon, J. J¨urjens, and D. A. Naumann, “Guiding
a general-purpose C veriﬁer to prove cryptographic protocols,” Journal
of Computer Security, vol. 22, no. 5, pp. 823–866, 2014.
[50] M. Aizatulin, A. D. Gordon, and J. J¨urjens, “Extracting and verifying
cryptographic models from C protocol code by symbolic execution,” in
ACM Conference on Computer and Communications Security, 2011, pp.
331–340.
[51] S. Chaki and A. Datta, “ASPIER: an automated framework for veri-
fying security protocol implementations,” in IEEE Computer Security
Foundations Symposium, 2009, pp. 172–185.
APPENDIX A
SECURITY PROOF OUTLINE:
SECRECY LABELS AND STATE INVARIANTS
Labeling the Handshake State.
In our security spec, we
annotate every element of the handshake state with a secrecy
label. The cipher state and symmetric state types are now
parameterized by a timestamp i and a label l for the chaining
key ck and AEAD key k:
type cipher state (i:nat) (l:label) = {
k:option (aead key i l); n: nat;}
type symmetric state (cfg:conﬁg) (i:nat) (l:label) = {
h : hash cfg i Public;
ck : chaining key cfg i l;
c state : cipher state i l}
The full handshake state for a session sid at a protocol
participant p is annotated with a security index type that includes
the session security parameters, including p, sid, the name of the
peer principal (if known), and the label of the peer’s ephemeral
key (peer eph label):
type index = {p: principal; sid: nat;
peer: option principal;
peer eph label: option label}
type handshake state (cfg:conﬁg) (i:nat) (l:label) (idx:index) = {
sym state : symmetric state nc i l;
static : option (keypair cfg i (CanRead [P idx.p]));
ephemeral : option (keypair cfg i (CanRead [S idx.p idx.sid]));
remote static : option (public key cfg i (CanRead [P idx.peer]));
remote ephemeral : option (public key cfg i idx.peer eph label);
preshared : option (preshared key cfg i idx.p idx.peer);}
it
In the handshake state,
the local static and ephemeral
keypairs have secrecy labels related to the current principal
and session. Once we have validated the remote static key
(see the certiﬁcation function below),
is labeled with
CanRead [P idx.peer]. However, the relationship between the
remote ephemeral key label (idx.peer eph label) and the peer’s
identity is unknown. The pre-shared key, if it exists, has a label
indicating that it is shared between the principal and its peer.
Proving the Handshake Secrecy Invariant. Given a Noise
protocol (described as a handshake pattern), and an index
describing the current run, we can compute the target security
label l for the handshake state at the initiator and responder at
each stage of the protocol. [36] details how this computation
works with several examples. In particular, after the second
IKpsk2 message, the target handshake state label at an initiator
with index idxi is computed as follows:
(CanRead [S idxi.p idxi.sid; P idxi.peer]) (cid:117)
(CanRead [P idxi.p; P idxi.peer]) (cid:117)
(CanRead [S idxi.p idxi.sid] (cid:116) idxi.peer eph label]) (cid:117)
(CanRead [P idxi.p] (cid:116) idxi.peer eph label]) (cid:117)
(CanRead [P idxi.p; P idxi.peer])
Each line of the label corresponds to some key material
that has been mixed into the chaining key: ephemeral-static,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
121
static-static, ephemeral-ephemeral, and static-ephemeral Difﬁe-
Hellman secrets, followed by a pre-shared key.
Our main secrecy invariant for the handshake state is that at
each stage of the protocol its label must match the computed
target label. We prove that the messaging functions in our Noise
speciﬁcation preserve this invariant whenever they modify
the handshake state. For example, the type of our labeled
send message tokens function is as follows:
val send message tokens (cfg:conﬁg) (initiator is psk:bool)
(tokens:list token) (i:nat) (l:label) (idx:index)
(st:handshake state cfg i l idx) :
(result (ciphertext:msg i Public &
handshake state cfg i (updt label l idx tokens initiator) idx))
The result type says that the new handshake state label (after the
message is sent) can be computed from the old label, the index,
the list of sent tokens, and the message direction. Separately,
we show that this updated label corresponds exactly to the
target label computed for this stage of the handshake pattern.
The type for receive message tokens is a bit more compli-
cated since the index of the handshake state may change in
the course of the function, if the message contains the peer’s
static or ephemeral key. Other than this detail, we again prove
that it updates the handshake label in the same way from the
prior label and received tokens. Hence, we prove that all our
messaging functions preserve the handshake labeling invariant.
Establishing the Peer Ephemeral Invariant. The label of
peer ephemeral key (idx.peer eph label) in the handshake state
is (as yet) unrelated to the peer’s identity. It means that the
keys in the handshake state are linked to an untrusted remote
ephemeral key, and hence are not forward secret. To obtain
stronger forward secrecy guarantees, we need to establish an
authentication invariant on the handshake state.
As described in [36], in addition to the target secrecy
labels (li, lr) for each handshake state at the initiator and
responder, we also keep track of the label at which each
participant received its last message (l←
l→
r ). We then
prove that if this last receive label is uncompromised at i
(i.e. it does not ﬂow to Public) then the remote ephemeral
key label at
i (idx.peer eph label) must be of the form
CanRead [S idx.peer sid’] for some session sid’ at the peer. In
other words, the last received message conditionally attests
to the authenticity of the peer ephemeral key. If the payload
received with this message was protected with a strong label,
we get a strong authentication guarantee for the peer ephemeral.
To obtain an authentication guarantee for the peer ephemeral
key, we rely on the global AEAD predicate (ae pred, mentioned
in §V) to enforce that every encrypted handshake payload sent
in each direction contains a transcript hash in the associated
data, which uniquely captures all the ephemeral keys exchanged
so far. Using this AEAD predicate at each decryption, the
receive message functions can establish and maintain the peer
ephemeral invariant in the recipient’s handshake state.
Proving Payload Security Goals. Our next goal is to prove
that in all reachable traces of a Noise protocol implementation,
the security guarantees of each sent and received message
,
i
matches the corresponding conﬁdentiality and authentication
level. To prove this invariant, we ﬁrst map each level to a
predicate that must hold over the handshake state label, and we
then obtain as a corollary that the corresponding trace property
must hold.
Appendix B describes how these levels are mapped to
predicates. For example, the authentication level A2 translates
to the following predicate:
can ﬂow i (CanRead [S idx.p idx.sid; P idx.peer]) l
This predicate requires that the AEAD key in the cipher
state should be known only to the principal (idx.p) and its peer
(idx.peer), and should be bound to the current session sid at
idx.p. This forbids KCI attacks, since compromising the long-
term keys of the principal idx.p does not break authentication.
From this key label and the properties of AEAD decryption
we obtain the desired trace invariant that a message received at
level 2 must be authentic unless the sender’s static or recipient’s
ephemeral key were compromised.
The highest conﬁdentiality level (5) translates to:
can ﬂow i (CanRead [S idx.p idx.sid; P idx.peer]) l ∧
can ﬂow i (CanRead [S idx.p idx.sid] (cid:116) idx.peer eph label) l ∧
(compromised before i (S idx.p idx.sid) ∨
compromised before i (P idx.peer) ∨
(∃ sid’. peer eph label == CanRead [S idx.peer sid’]))
The ﬁrst line of this predicate says that the handshake secrets
should be readable only by the (authenticated) peer (idx.peer)
and the current session idx.sid at idx.p. The second line says
that the handshake secrets must also be bound to some peer
ephemeral key. The last two lines provide strong forward
secrecy: they say that unless the peer’s long-term keys and
the speciﬁc session idx.sid of idx.p was compromised (before
the session is complete), the peer ephemeral key must have
a label of the form CanRead [S idx.peer sid’]. Since the key
label is bound to speciﬁc sessions at both ends, compromising
long-term keys after the session has no effect on key secrecy.
Given the handshake secrecy invariant and peer ephemeral
invariant, we can systematically prove that at every stage
of each Noise protocol,
the handshake state satisﬁes the
predicates encoding the corresponding payload secrecy and
authentication levels (as documented in the Noise speciﬁcation.)
Then by applying a generic secrecy lemma provided by the
DY* framework, we obtain the desired conﬁdentiality and
authentication goals for each message as trace invariants. This
completes the security proof for the protocol code.
Security Guarantees for the High-Level API. The ﬁnal