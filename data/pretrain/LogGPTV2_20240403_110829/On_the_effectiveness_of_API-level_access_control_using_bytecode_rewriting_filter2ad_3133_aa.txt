**Title: On the Effectiveness of API-Level Access Control Using Bytecode Rewriting in Android**

**Authors: Hao Hao, Vicky Singh, and Wenliang Du**

**Department of Electrical Engineering & Computer Science, Syracuse University, Syracuse, New York, USA**

**Emails: {hahao, vsingh02, wedu}@syr.edu**

### Abstract

Bytecode rewriting has become a popular technique for implementing fine-grained access control in Android applications. This approach offers greater flexibility and convenience without requiring modifications to the Android platform. It leverages static analysis to identify security-sensitive API methods and then instruments the bytecode to control access to these API calls. Given the significance of this technique, it is crucial to evaluate its effectiveness in providing robust access control. We present a systematic evaluation of API-level access control using bytecode rewriting on the Android operating system. Our study identifies several potential attacks that can exploit incomplete implementations of bytecode rewriting, thereby bypassing the intended access controls. These attacks highlight vulnerabilities in the bytecode rewriting process, making such access control challenging to implement effectively. Based on our findings, we provide recommendations for engineering more secure bytecode rewriting tools. This work represents the first comprehensive study on the effectiveness of bytecode rewriting for API-level access control.

### Categories and Subject Descriptors

D.4.6 [Operating Systems]: Security and Protection

### Keywords

Android, Access Control, Bytecode Rewriting

### 1. Introduction

In the Android operating system, applications are the primary units that interact with users. These applications are typically written in Java and compiled into Dalvik bytecode, which is stored in DEX (Dalvik Executable) files. During execution, the Dalvik bytecode is interpreted by the register-based Dalvik Virtual Machine (DVM). Android provides a rich set of Java API methods for accessing privileged resources, as shown in Figure 1. In addition to the application isolation enforced by the underlying Linux operating system, Android also includes a permission system to restrict operations on these resources. Permissions required by an application are declared in the `AndroidManifest.xml` file, and users are notified of these permissions during the installation process. They can choose to grant or deny these permissions.

The current Android permission system is coarse-grained, often leading to over-privileged applications. For example, an application using the `loadUrl` method of the `android.webkit.WebView` class to load `www.facebook.com` requires the `INTERNET` permission. However, this permission is too broad, allowing the application to access any domain, not just the one it needs.

Several methods have been proposed to provide finer-grained access control in Android. One such method is bytecode rewriting, which modifies the application's bytecode to enforce security policies on sensitive API methods. This can be done on both Java and Dalvik bytecode. Another method is native library rewriting, which intercepts calls to the Bionic library. A third approach involves modifying the Android operating system itself. Each method has its own advantages and disadvantages. This paper focuses on bytecode rewriting, which offers more flexibility and has been widely adopted.

Existing work has identified some potential attacks on bytecode rewriting, but no systematic study has been conducted to explore all possible attack vectors. This paper aims to fill that gap by providing a comprehensive analysis of potential attacks and offering recommendations to enhance the security of bytecode rewriting tools.

### 2. API-Level Access Control Using Bytecode Rewriting

The key idea behind API-level access control using bytecode rewriting is to modify the behavior of security-sensitive API methods to enforce fine-grained access control. This is achieved by replacing these methods with secure wrappers that implement the desired access control policies. The process involves three main steps:

1. **Static Analysis**: Extract the bytecode from the APK, decompile it, and perform static analysis to identify occurrences of security-sensitive APIs.
2. **Bytecode Modification**: Modify the identified API calls to include custom access control logic.
3. **Repackaging**: Repackage the modified bytecode and other resources into a new APK with a new digital signature.

#### 2.1 Dalvik Bytecode Analysis

To identify the usage of Android APIs, method-invocation instructions in the DEX file need to be analyzed. These instructions include:

- `invoke-virtual`/`invoke-virtual/range`: Invokes a normal virtual method.
- `invoke-direct`/`invoke-direct/range`: Invokes a private instance method or constructor.
- `invoke-static`/`invoke-static/range`: Invokes a static method.
- `invoke-interface`/`invoke-interface/range`: Invokes an interface method.
- `invoke-super`/`invoke-super/range`: Invokes the closest superclass' virtual method.

Each instruction has a method index that resolves to the fully-qualified method signature, including package, class, method name, parameters, and return type. Simple pattern matching can then be used to identify the API methods that need to be restricted.

#### 2.2 Dalvik Bytecode Rewrite

There are two main approaches to bytecode rewriting for enforcing fine-grained access control:

1. **Encapsulating Sensitive APIs in a Separate Service**: Modify the `AndroidManifest.xml` to remove existing permissions and add new ones for accessing the secure service. The secure service provides more granular access control. This approach was not evaluated in our study due to its fail-safe default property.
2. **Reference Monitor Directly Added to the Application**: Replace calls to sensitive API methods with calls to a reference monitor that uses secure wrappers. This approach can be applied to both non-final and final classes.

- **Non-Final Class Example**: For a non-final class like `WebView`, create a subclass `SecureWebView` that adds access control to the `loadUrl` method.
- **Final Class Example**: For a final class, create a static method in a separate class (e.g., `SecureWebView`) that takes an instance of the final class and implements the access control.

#### 2.3 Bytecode Rewrite Assumptions

Current bytecode rewriters assume that applications either do not have native code or that their native code is blocked from execution. This assumption is reasonable, as only a small percentage of apps (4.52%) include native code. Our study evaluates bytecode rewriting without considering app-introduced native code.

### 3. Effectiveness of API-Level Access Control

To measure the effectiveness of API-level access control using bytecode rewriting, we need to understand the resources being protected and how they are accessed. As shown in Figure 3, resources outside the process boundaries require privileged operations for access. These resources can be hardware devices, kernel data, or data in another process space. Access to these resources is typically managed through system calls, inter-process communication, and native libraries.

#### 3.1 Potential Attacks

We identified four potential paths that applications could use to bypass API-level access control:

1. **Direct Kernel Access**: Applications cannot directly invoke system calls because the DVM does not provide opcodes for these instructions.
2. **Direct Native Library Invocation**: Applications can invoke native libraries, potentially bypassing the secure wrapper.
3. **Direct System Service Communication**: Applications can communicate directly with system services, bypassing the secure wrapper.
4. **Hiding API Usage**: Applications can hide the usage of APIs to deceive the bytecode rewriting process.

### 4. Conclusion

This paper presents a systematic evaluation of the effectiveness of API-level access control using bytecode rewriting in Android. We identified several potential attacks that can exploit incomplete implementations of bytecode rewriting, highlighting the need for more secure and robust bytecode rewriting tools. Our recommendations aim to help developers and researchers design more secure bytecode rewriting techniques, ensuring better protection of sensitive resources in Android applications.

### Acknowledgments

We would like to thank the reviewers for their valuable feedback and suggestions. This work was supported by [funding sources, if applicable].

### References

[1] Android SDK Documentation.  
[2] Decompilation Tools for Android.  
[3] Binder Driver in the Linux Kernel.  
[4] Dalvik Bytecode Instructions.  
[5] JNI (Java Native Interface) Documentation.  
[6] ARM Processor Instruction Set.  
[7] Intel Processor Instruction Set.  
[8] Android Permission System.  
[9] Existing Work on Bytecode Rewriting.  
[10] Inter-Process Communication in Android.  
[11] Native Library Rewriting Techniques.  
[12] Modifying the Android Operating System.  
[13] Bionic libc in Android.  
[14] Secure Wrapper Design.  
[15] Case Studies on Bytecode Rewriting.  
[16] Evaluation of Bytecode Rewriting Tools.  
[17] Android Security Model.  
[18] Fine-Grained Access Control in Android.  
[19] Encapsulation of Sensitive APIs.  
[20] Reference Monitor Implementation.  
[21] Fail-Safe Default Property.  
[22] Static Analysis Techniques.  
[23] Dynamic Data Checking.  
[24] Digital Signature Generation.  
[25] APK File Structure.  
[26] Bionic Library in Android.  
[27] Study on App-Introduced Native Code.  
[28] Comparison of Access Control Methods.