title:On the effectiveness of API-level access control using bytecode rewriting
in Android
author:Hao Hao and
Vicky Singh and
Wenliang Du
On the Effectiveness of API-Level Access Control Using
Bytecode Rewriting in Android
Hao Hao, Vicky Singh and Wenliang Du
Dept. of Electrical Engineering & Computer Science, Syracuse University
Syracuse, New York, USA
{hahao,vsingh02,wedu}@syr.edu
ABSTRACT
Bytecode rewriting on Android applications has been widely
adopted to implement ﬁne-grained access control. It endows
more ﬂexibility and convenience without modifying the An-
droid platform. Bytecode rewriting uses static analysis to
identify the usage of security-sensitive API methods, before
it instruments the bytecode to control the access to these
API calls. Due to the signiﬁcance of this technique, the
eﬀectiveness of its performance in providing ﬁne-grained ac-
cess control is crucial. We have provided a systematic eval-
uation to assess the eﬀectiveness of API-level access control
using bytecode rewriting on Android Operating System. In
our evaluation, we have identiﬁed a number of potential at-
tacks targeted at incomplete implementations of bytecode
rewriting on Android OS, which can be applied to bypass
access control imposed by bytecode rewriter. These attacks
can either bypass the API-level access control or make such
access control diﬃcult to implement, exposing weak links in
the bytecode rewriting process. Recommendations on engi-
neering secure bytecode rewriting tools are presented based
on the identiﬁed attacks. This work is the ﬁrst systematic
study on the eﬀectiveness of using bytecode rewriting for
API-level access control.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
Keywords
Android, Access Control, Bytecode Rewriting
1.
INTRODUCTION
In the Android Operating System, application is the main
unit that interacts with users. Android applications are
implemented in Java, which is then converted into Dalvik
bytecode that resides within DEX (Dalvik Executable) ﬁles
after compilation. During execution, Dalvik bytecode is in-
terpreted by register-based Dalvik Virtual Machine (DVM)
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
Figure 1: Android API Usage
before it is executed. Android provides rich Java API meth-
ods for applications to access privileged resources as shown
in Figure 1. In addition to application isolation enforced by
Linux Operating System, Android also supplies a permission
system [17] to restrict operations, which an application can
perform, on privileged resources. Permissions required by
applications are declared in the AndroidManifest.xml
ﬁles. During application installation, users are notiﬁed of
permissions that are required by the applications. The users
have the option to grant these permissions if they are satis-
ﬁed; otherwise, they could choose to cancel the installation.
The current Android permission system is coarse-grained,
which causes the applications to be over-privileged. For ex-
ample, when an application uses the loadUrl method of
class android.webkit.WebView to load www.facebook.
com, INTERNET permission is required. However, because
INTERNET permission is coarse-grained which does not re-
strict which domain the application can access, the applica-
tion is provided with more privilege than it truly needs.
Several methods have been proposed to provide ﬁne-grain-
ed access control for Android. The ﬁrst method is the byte-
code rewriting technique [11, 14, 19, 22]. By instrumenting
applications’ bytecode, security policies could be enforced
upon security-sensitive Android API methods. Bytecode
rewriting can be done on both Java bytecode and Dalvik
bytecode. Some tools actually convert Dalvik bytecode to
Java bytecode, and rewrite on Java bytecode, because of the
maturity of Java bytecode rewriting tools. Our evaluation
could be applied to both Java and Dalvik bytecode rewrit-
ing. The second method is native library rewriting, which
imposes ﬁne-grained access control by intercepting the na-
tive calls to Bionic library [26]. A third way to implement
ﬁne-grained access control can be achieved by modifying the
Android Operating System [15, 18, 20, 28]. Each of these
methods has its own advantages as well as disadvantages.
The purpose of this paper is not to compare these methods;
instead, we would like to focus on one of the methods, the
bytecode rewriting technique. Compared to the other meth-
ods, the bytecode rewriting endows more ﬂexibility and con-
venience, and has been used in a number of existing works.
The existing work point out several places where byte-
1
code rewriting can be attacked if it is not implemented cor-
rectly [14], but no work has systematically studied the po-
tential attacks on the implementation of bytecode rewriting.
It is unclear whether there are other attacks beyond what
are described in the existing work. Because of the ever-
increasing importance of such a technique, having a full un-
derstanding of its eﬀectiveness in providing access control is
crucial. This paper is the ﬁrst to conduct such a study.
The purpose of this paper is three-fold: (1) We would like
to study all possible attacks against bytecode rewriting, be-
yond what have been mentioned by the existing work. In
fact, we did ﬁnd some interesting attacks that were not doc-
umented in the literature. Without the awareness of these
new attacks, the rewritten applications can be compromised
by adversary. (2) For all the attacks, we would like to un-
derstand why such attacks work, and the fundamental cause
for these attacks. Some attacks may appear to be diﬀerent,
but we found them to be quite similar upon close exam-
ination. Such observations are described in the paper to
give readers a deeper insight into the attacks.
(3) Based
on our understanding of the attacks, we make recommen-
dations on how the bytecode rewriting can defend against
these attacks. These recommendations could help better the
design of bytecode rewriting tools.
2. API-LEVEL ACCESS CONTROL USING
BYTECODE REWRITING
The key idea with the API-level access control using byte-
code rewriting is to provide modiﬁed behaviors, which al-
low ﬁne-grained access control at the Java API level. The
modiﬁed behaviors are introduced by secure wrappers which
function as replacements of sensitive Android APIs. Thus,
before invocations of those APIs, speciﬁed security policies
are enforced. Figure 2 illustrates the approach.
Figure 2: API-Level Access Control
The process of API-level access control using bytecode
rewriting involves three steps. After the bytecode ﬁle is ex-
tracted from the APK 1 and decompiled [2, 8], static anal-
ysis is performed to identify the occurrences of the security-
sensitive APIs in the code. These occurrences are modiﬁed,
so customized access control logic is added before these APIs
are invoked during the runtime. Finally, the bytecode ﬁle
and all the other resources are repackaged into a single APK
ﬁle, with a new digital signature generated for the ﬁle.
2.1 Dalvik Bytecode Analysis
To identify usages of Android APIs, method-invocation
instructions need to be identiﬁed in the DEX ﬁle. The in-
structions are listed below [4]:
1Android Applications are distributed as a single archive ﬁle
called APK (Android Application Package) , which holds
a DEX bytecode ﬁle, AndroidManifest.xml, XML re-
sources, and any other resources the applications need.
2
• invoke-virtual (invoke-virtual/range): used
to invoke a normal virtual method.
• invoke-direct (invoke-direct/range): used to
invoke either a private instance method or a construc-
tor.
• invoke-static (invoke-static/range): used to
invoke a static method.
• invoke-interface (invoke-interface/range):
used to invoke an interface method on an object whose
concrete class is not known.
• invoke-super (invoke-super/range): used to in-
voke the closest superclass’ virtual method.
All of the aforementioned instructions have an argument
called method index, which represents the method to be in-
voked. From this index, the fully-qualiﬁed method signature
can be resolved, including parameters types, return type, as
well as package, class, and method name. From this method
signature, simple pattern matching can be used to identify
the usages of the API methods that need to be restricted.
2.2 Dalvik Bytecode Rewrite
The existing work includes several rewriting mechanisms
to enforce more ﬁne-grained access control policies, e.g.,
placing the reference monitor in another service or within
the application. Both of these techniques revise Dalvik byte-
code to inject dynamic data checking, based on the policies
speciﬁed by users. For the ﬁrst approach [19], i.e., encapsu-
lating sensitive APIs in a separate service, the application’s
AndroidManifest.xml ﬁle is modiﬁed so that permissions
are removed and replaced with new permissions to access the
secure service. Within the secure service, more ﬁne-grained
access control to the privileged resources are provided. Dur-
ing the process of bytecode rewriting, the calls to sensitive
API methods are substituted with a completely new set of
calls to the secure service. Because of its fail-safe default
property, we did not evaluate this type of code rewriting,
but our evaluation may be useful for this technique.
Instead, we focused on the second approach, i.e., the ref-
erence monitor on API methods is directly added to the
application. After recognizing the utilization of API calls,
the rewriting tool places the reference monitor, which uses
secure wrappers, on sensitive APIs within the application.
Access control policies can be placed on any public inter-
faces. Therefore, all the Java methods on the call chains
would be restricted by the policies. The API method on
which to interpose policy could be a method either in a class
that can be extended, or in a class that is ﬁnal and cannot
be extended. We are going to discuss these two scenarios
in more details below. Note that all the modiﬁcations are
performed on the bytecode, but for a clearer presentation,
we used Java code and not the bytecode in our examples.
Bytecode rewriting for a non-final class. Let us use
an example to illustrate bytecode rewriting in this scenario.
In Android, WebView is a non-final class. Assume that
we want to put some restrictions on its loadUrl method,
so we only allow the application to load certain URLs. To
achieve this goal, we can deﬁne a wrapper class for WebView,
and it is named SecureWebView. In this wrapper class, we
perform some access control on the URL string before pass-
ing it to WebView’s loadUrl. See the following code:
public class SecureWebview extends WebView {
public void loadUrl(String str) {
//access control implementation
...
super.loadUrl(str); }}
Once we have this wrapper, we replace all the occurrences
of WebView in the bytecode with SecureWebView. See the
following examples:
"WebView wv;"
"SecureWebView wv;"
is replaced by
"public class MyWebView extends WebView"


"public class MyWebView extends SecureWebview" 
is replaced by
Bytecode rewriting for a final class. Unlike in the
previous method, there are cases in which the API methods
belong to a final class. In these cases, we cannot deﬁne a
subclass or use it as the wrapper. Another way to write the
wrapper is thus needed. For the purpose of illustration, let
us assume that WebView is a final class, and the following
code shows how its loadUrl API is used.
class UserClass {
public void navigatePage(String url) {
WebView w = new Webview();
w.loadUrl(url); }}
We would like to put a restriction on the URL string
when WebView’s loadUrl API is called. To achieve this
goal, we can create another class SecureWebView with a
static method loadUrl.
In this static method, instances
of WebView are passed as a parameter. All the invocations
of WebView.loadUrl are replaced with SecureWebView.
loadUrl, which implements access control. See the follow-
ing code:

public class SecureWebView {
public static void loadUrl(WebView w, String s){
//access control implementation
...
w.loadUrl(s); }}
public class userClass {
public void navigatePage(String url) {
WebView w = new Webview();
/* w.loadUrl(url); is replaced by the
following */
SecureWebView.loadUrl(w, url); }}
2.3 Bytecode Rewrite Assumption
Android application can introduce its own native code
mainly for performance reasons. With the existence of na-
tive code, the applications can directly invoke any native
library functions of Android framework. Because app in-
troduced native code is running in the same process space
as DVM. The applications also have the ability to tamper
the integrity of DVM state making method signature infor-
mation unreliable. Hence, bytecode rewriting can be easily






1
2
3
4
5
1
2
3
4
5
6
1
2
3
4
1
2
3
4
5
6
7
8
9
10
11
circumvented. Current bytecode rewriter assumes that ap-
plications either do not have native code or their native code
is blocked from being executed [14]. This assumption is rea-
sonable. From previous work [27], only 4.52% apps have
native code. Hence, in our study we evaluated bytecode
rewriting technique without considering app introduced na-
tive code.
3. EFFECTIVENESS OF API LEVEL
ACCESS CONTROL
To measure the eﬀectiveness of the API-level access con-
trol using the methods described above, we need to under-
stand what it is trying to protect and how these protected
resources are accessed under the hood. As depicted in Fig-
ure 3, resources that are out of process boundaries require
privileged operations for access. These resources could be
hardware devices, kernel data, or data in another process
space. Hardware accesses are performed through instruc-
tions only executable in the kernel. Data from another
process space is retrieved through inter-process communica-
tion, which is implemented by the binder driver in the kernel
[3, 10, 13]. Access to kernel data and privileged instructions
within the kernel are achieved through system calls.
To initiate system calls into the kernel, Android provides
standard native C libraries called Bionic libc. These na-
tive libraries are bridged to Android Java APIs, so that
they can be invoked directly from Java via the Java Native
Interface (JNI). For example, loadUrl is a Java API in
android.webkit.WebView. It invokes the native method
nativeLoadUrl of the shared library libwebcore.so via
JNI, and the shared library communicates with the kernel
via socket system calls in order to access internet resources.
To acquire privileged resources protected by system ser-
vices, such as locations, the LocationManager API in-
teracts with the service called LocationManagerService
using inter-process communications. The service obtains the
location from the GPS device and then returns the result.
As discussed in the previous section, the Android install-
time permission system protects these privileged resources,
but at a level that is quite coarse-grained. The API-level ac-
cess control using bytecode rewriting can intercept the calls
from applications’ own Java code to APIs, and place ﬁne-
grained access control before the invocation of those APIs.
However, the way in which applications access privileged re-
sources are quite complicated; therefore, it is very natural to
question whether the bytecode rewriting is complete enough
to prevent applications from directly accessing privileged re-
sources, bypassing the secure wrapper. More speciﬁcally, we
have the following questions: (1) Can applications directly
talk to kernel? (2) Can applications directly invoke native
libraries? (3) Can applications directly talk to system ser-
vices? (4) Can applications hide the usage of APIs to deceive
the bytecode rewriting?
These four questions represent four potential paths, as
indicated by the numbers in Figure 3, to access privileged
resources. If an application takes advantage of any of these
paths, it would lead to an attack on API-level access control
using bytecode rewriting.
Access Kernel from Application Directly. The ﬁrst
attack depicted in Figure 3 is not possible, because for ap-
plications to interact with the kernel, they must be able to
invoke system calls. To be speciﬁc, they have to be able



3
4.0.3 [1] SDK. All case studies are tested on a Android 4.0.3
ARM emulator. To help readers understand our attacks,
we ﬁrst present some background materials on Java Native
Interface (JNI).
3.1
JNI Native Methods Resolution
To let Java code invoke native code and vice verse, there
needs to be an interface. This interface is called Java Native
Interface (JNI) [6].
In Android, JNI is the only interface
that enables the two-way communication. Native code writ-
ten in C/C++ and assembly is made available via shared
objects (.so ﬁles) or shared library. For Java code to make a
call into native code in a shared library, ﬁrst, DVM needs to
identify that the Java code tries to invoke native code. This
is done through the deﬁnition of native method in Java,
and native methods are the entries to native code. Second,
DVM needs to identify which functions in the loaded shared
library should be invoked, and then execute them. We call
these functions native library functions to distinguish with
the native Java methods. The following code snippet demon-
strates the usage of native code in Java.
package edu.com;
public class MyClass {
native public long myFunc();
static {
System.loadLibrary("myLib"); }}


Figure 3: Potential Vulnerabilities of API-Level Ac-
cess Control
to execute special instructions provided by the CPU, such
as the SWI instruction in ARM processors or the SYSEN-
TER, SYSEXIT instructions in Intel processors [9]. DVM
does not provide opcode to directly execute these instruc-
tions.
In other words, Java code must invoke the native