injustaboutanyothermodernprogramminglanguage.The
onlyreal“gotcha”happenswhenyoutrytocross-compile
applicationsthatusenativeCbindings.We’llstayoutofthe
weedsandletyoudigintothosechallengesindependently.
Dependingonthepackagesyouimportandtheprojectsyou
develop,youmaynothavetoworryaboutthatveryoften.
ThegodocCommand
ThegodocCommand
Thegodoccommandletsyouinterrogatedocumentationabout
apackage,function,method,orvariable.Thisdocumentation
isembeddedascommentsthroughyourcode.Let’stakealook
athowtoobtaindetailsaboutthefmt.Println()function:
$godocfmt.Println
funcPrintln(a...interface{})(nint,errerror)
Printlnformatsusingthedefaultformatsforitsoperandsandwritesto
standardoutput.Spacesarealwaysaddedbetweenoperandsandanewline
isappended.Itreturnsthenumberofbyteswrittenandanywriteerror
encountered.
Theoutputthatgodocproducesistakendirectlyoutofthe
sourcecodecomments.Aslongasyouadequatelycomment
yourpackages,functions,methods,andvariables,you’llbe
abletoautomaticallyinspectthedocumentationviathegodoc
command.
ThegogetCommand
ManyoftheGoprogramsthatyou’lldevelopinthisbookwill
requirethird-partypackages.Toobtainpackagesourcecode,
usethegogetcommand.Forinstance,let’sassumeyou’ve
writtenthefollowingcodethatimportsthestacktitan/ldapauth
package:
packagemain
import(
"fmt"
"net/http"
❶"github.com/stacktitan/ldapauth"
)
Eventhoughyou’veimportedthestacktitan/ldapauthpackage
❶,youcan’taccessthepackagequiteyet.Youfirsthaveto
runthegogetcommand.Usinggogetgithub.com/stacktitan/ldapauth
downloadstheactualpackageandplacesitwithinthe
$GOPATH/srcdirectory.
Thefollowingdirectorytreeillustratestheplacementofthe
ldapauthpackagewithinyourGOPATHworkspace:
$treesrc/github.com/stacktitan/
❶src/github.com/stacktitan/
└──ldapauth
├──LICENSE
├──README.md
└──ldap_auth.go
Noticethatthepath❶andtheimportedpackagenameare
constructedinawaythatavoidsassigningthesamenameto
multiplepackages.Usinggithub.com/stacktitanasaprefacetothe
actualpackagenameldapauthensuresthatthepackagename
remainsunique.
AlthoughGodeveloperstraditionallyinstalldependencies
withgoget,problemscanariseifthosedependentpackages
receiveupdatesthatbreakbackwardcompatibility.Gohas
introducedtwoseparatetools—depandmod—tolock
dependenciesinordertopreventbackwardcompatibility
issues.However,thisbookalmostexclusivelyusesgogetto
pulldowndependencies.Thiswillhelpavoidinconsistencies
withongoingdependencymanagementtoolingandhopefully
makeiteasierforyoutogettheexamplesupandrunning.
ThegofmtCommand
Thegofmtcommandautomaticallyformatsyoursourcecode.
Forexample,runninggofmt/path/to/your/packagewillstyleyour
codebyenforcingtheuseofproperlinebreaks,indentation,
andbracealignment.
Adheringtoarbitrarystylingpreferencesmightseem
strangeatfirst,particularlyiftheydifferfromyourhabits.
However,youshouldfindthisconsistencyrefreshingover
time,asyourcodewilllooksimilartootherthird-party
packagesandfeelmoreorganized.MostIDEscontainhooks
thatwillautomaticallyrungofmtwhenyousaveyourfile,so
youdon’tneedtoexplicitlyrunthecommand.
ThegolintandgovetCommands
Whereasgofmtchangesthesyntacticalstylingofyourcode,
golintreportsstylemistakessuchasmissingcomments,
variablenamingthatdoesn’tfollowconventions,uselesstype
specifications,andmore.Noticethatgolintisastandalonetool,
andnotasubcommandofthemaingobinary.You’llneedto
installitseparatelybyusinggoget-ugolang.org/x/lint/golint.
Similarly,govetinspectsyourcodeandusesheuristicsto
identifysuspiciousconstructs,suchascallingPrintf()withthe
incorrectformatstringtypes.Thegovetcommandattemptsto
identifyissues,someofwhichmightbelegitimatebugs,thata
compilermightmiss.
GoPlayground
TheGoPlaygroundisanexecutionenvironmenthostedat
https://play.golang.org/thatprovidesaweb-basedfrontendfor
developerstoquicklydevelop,test,execute,andshare
snippetsofGocode.Thesitemakesiteasytotryoutvarious
GofeatureswithouthavingtoinstallorrunGoonyourlocal
system.It’sagreatwaytotestsnippetsofcodebefore
integratingthemwithinyourprojects.
Italsoallowsyoutosimplyplaywithvariousnuancesof
thelanguageinapreconfiguredenvironment.It’sworthnoting
thattheGoPlaygroundrestrictsyoufromcallingcertain
dangerousfunctionstopreventyoufrom,forexample,
executingoperating-systemcommandsorinteractingwith
third-partywebsites.
OtherCommandsandTools
Althoughwewon’texplicitlydiscussothertoolsand
commands,weencourageyoutodoyourownresearch.As
youcreateincreasinglycomplexprojects,you’relikelytorun
intoadesireto,forexample,usethegotesttooltorununittests
andbenchmarks,covertocheckfortestcoverage,importstofix
importstatements,andmore.
UNDERSTANDINGGOSYNTAX
AnexhaustivereviewoftheentireGolanguagewouldtake
multiplechapters,ifnotanentirebook.Thissectiongivesa
briefoverviewofGo’ssyntax,particularlyrelativetodata
types,controlstructures,andcommonpatterns.Thisshould
actasarefresherforcasualGocodersandanintroductionfor
thosenewtothelanguage.
Foranin-depth,progressivereviewofthelanguage,we
recommendthatyouworkthroughtheexcellentATourofGo
(https://tour.golang.org/)tutorial.It’sacomprehensive,hands-
ondiscussionofthelanguagebrokenintobite-sizedlessons
thatuseanembeddedplaygroundtoenableyoutotryouteach
oftheconcepts.
ThelanguageitselfisamuchcleanerversionofCthat
removesalotofthelower-levelnuances,resultinginbetter
readabilityandeasieradoption.
DataTypes
Likemostmodernprogramminglanguages,Goprovidesa
varietyofprimitiveandcomplexdatatypes.Primitivetypes
consistofthebasicbuildingblocks(suchasstrings,numbers,
andbooleans)thatyou’reaccustomedtoinotherlanguages.
Primitivesmakeupthefoundationofallinformationused
withinaprogram.Complexdatatypesareuser-defined
structurescomposedofacombinationofoneormore
primitiveorothercomplextypes.
PrimitiveDataTypes
Theprimitivetypesincludebool,string,int,int8,int16,int32,int64,
uint,uint8,uint16,uint32,uint64,uintptr,byte,rune,float32,float64,
complex64,andcomplex128.
Youtypicallydeclareavariable’stypewhenyoudefineit.
Ifyoudon’t,thesystemwillautomaticallyinferthevariable’s
datatype.Considerthefollowingexamples:
varx="HelloWorld"
z:=int(42)
Inthefirstexample,youusethekeywordvartodefinea
variablenamedxandassigntoitthevalue"HelloWorld".Go
implicitlyinfersxtobeastring,soyoudon’thavetodeclare
thattype.Inthesecondexample,youusethe:=operatorto
defineanewvariablenamedzandassigntoitanintegervalue
of42.Therereallyisnodifferencebetweenthetwooperators.
We’lluseboththroughoutthisbook,butsomepeoplefeelthat
the:=operatorisanuglysymbolthatreducesreadability.
Choosewhateverworksbestforyou.
Intheprecedingexample,youexplicitlywrapthe42value
inanintcalltoforceatypeonit.Youcouldomittheintcall
butwouldhavetoacceptwhatevertypethesystem
automaticallyusesforthatvalue.Insomecases,thiswon’tbe
thetypeyouintendedtouse.Forinstance,perhapsyouwant
42toberepresentedasanunsignedinteger,ratherthananint
type,inwhichcaseyou’dhavetoexplicitlywrapthevalue.
SlicesandMaps
Goalsohasmore-complexdatatypes,suchasslicesandmaps.
Slicesarelikearraysthatyoucandynamicallyresizeandpass
tofunctionsmoreefficiently.Mapsareassociativearrays,
unorderedlistsofkey/valuepairsthatallowyoutoefficiently
andquicklylookupvaluesforauniquekey.
Thereareallsortsofwaystodefine,initialize,andwork
withslicesandmaps.Thefollowingexampledemonstratesa
commonwaytodefinebothaslicesandamapmandadd
elementstoboth:
vars=make([]string,0)
varm=make(map[string]string)
s=append(s,"somestring")
m["somekey"]="somevalue"
Thiscodeusesthetwobuilt-infunctions:make()toinitialize
eachvariableandappend()toaddanewitemtoaslice.Thelast
lineaddsthekey/valuepairofsomekeyandsomevaluetothemap
m.WerecommendthatyoureadtheofficialGodocumentation
toexploreallthemethodsfordefiningandusingthesedata
types.
Pointers,Structs,andInterfaces
Apointerpointstoaparticularareainmemoryandallowsyou
toretrievethevaluestoredthere.AsyoudoinC,youusethe
&operatortoretrievetheaddressinmemoryofsomevariable,
andthe*operatortodereferencetheaddress.Thefollowing
exampleillustratesthis:
❶varcount=int(42)
❷ptr:=&count
❸fmt.Println(*ptr)
❹*ptr=100
❺fmt.Println(count)
Thecodedefinesaninteger,count❶,andthencreatesa
pointer❷byusingthe&operator.Thisreturnstheaddressof
thecountvariable.Youdereferencethevariable❸while
makingacalltofmt.Println()tologthevalueofcounttostdout.
Youthenusethe*operator❹toassignanewvaluetothe
memorylocationpointedtobyptr.Becausethisistheaddress
ofthecountvariable,theassignmentchangesthevalueofthat
variable,whichyouconfirmbyprintingittothescreen❺.
Youusethestructtypetodefinenewdatatypesby
specifyingthetype’sassociatedfieldsandmethods.For
example,thefollowingcodedefinesaPersontype:
❶typePersonstruct{
❷Namestring
❸Ageint
}
❹func(p*Person)SayHello(){
fmt.Println("Hello,",p.Name❺)
}
funcmain(){
varguy=new❻(Person)
❼guy.Name="Dave"
❽guy.SayHello()
}
Thecodeusesthetypekeyword❶todefineanewstruct
containingtwofields:astringnamedName❷andanintnamed
Age❸.
Youdefineamethod,SayHello(),onthePersontypeassigned
tovariablep❹.Themethodprintsagreetingmessageto
stdoutbylookingatthestruct,p❺,thatreceivedthecall.
Thinkofpasareferencetoselforthisinotherlanguages.You
alsodefineafunction,main(),whichactsastheprogram’sentry
point.Thisfunctionusesthenewkeyword❻toinitializeanew
Person.ItassignsthenameDavetotheperson❼andthentells
thepersontoSayHello()❽.
Structslackscopingmodifiers—suchasprivate,public,or
protected—thatarecommonlyusedinotherlanguagesto
controlaccesstotheirmembers.Instead,Gouses
capitalizationtodeterminescope:typesandfieldsthatbegin
withacapitalletterareexportedandaccessibleoutsidethe
package,whereasthosestartingwithalowercaseletterare
private,accessibleonlywithinthepackage.
YoucanthinkofGo’sinterfacetypeasablueprintora
contract.Thisblueprintdefinesanexpectedsetofactionsthat
anyconcreteimplementationmustfulfillinordertobe
consideredatypeofthatinterface.Todefineaninterface,you
defineasetofmethods;anydatatypethatcontainsthose
methodswiththecorrectsignaturesfulfillsthecontractandis
consideredatypeofthatinterface.Let’stakealookatan
example:
❶typeFriendinterface{
❷SayHello()
}
Inthissample,you’vedefinedaninterfacecalledFriend❶
thatrequiresonemethodtobeimplemented:SayHello()❷.That
meansthatanytypethatimplementstheSayHello()methodisa
Friend.NoticethattheFriendinterfacedoesn’tactually
implementthatfunction—itjustsaysthatifyou’reaFriend,you
needtobeabletoSayHello().
Thefollowingfunction,Greet(),takesaFriendinterfaceas
inputandsayshelloinaFriend-specificway:
funcGreet❶(fFriend❷){
f.SayHello()
}
YoucanpassanyFriendtypetothefunction.Luckily,the
PersontypeusedinthepreviousexamplecanSayHello()—it’sa
Friend.Therefore,ifafunctionnamedGreet()❶,asshowninthe
precedingcode,expectsaFriendasaninputparameter❷,you
canpassitaPerson,likethis:
funcmain(){
varguy=new(Person)
guy.Name="Dave"
Greet(guy)
}
}
Usinginterfacesandstructs,youcandefinemultipletypes
thatyoucanpasstothesameGreet()function,solongasthese
typesimplementtheFriendinterface.Considerthismodified
example:
❶typeDogstruct{}
func(d*Dog)SayHello()❷{
fmt.Println("Woofwoof")
}
funcmain(){
varguy=new(Person)
guy.Name="Dave"
❸Greet(guy)
vardog=new(Dog)
❹Greet(dog)
}
Theexampleshowsanewtype,Dog❶,thatisableto
SayHello()❷and,therefore,isaFriend.YouareabletoGreet()
bothaPerson❸andaDog❹,sincebotharecapableof
SayHello().
We’llcoverinterfacesmultipletimesthroughoutthebook
tohelpyoubetterunderstandtheconcept.
ControlStructures
Gocontainsslightlyfewercontrolstructuresthanother
modernlanguages.Despitethat,youcanstillaccomplish
complexprocessing,includingconditionalsandloops,with
Go.
Go’sprimaryconditionalistheif/elsestructure:
ifx==1{
fmt.Println("Xisequalto1")
}else{
fmt.Println("Xisnotequalto1")
}
Go’ssyntaxdeviatesslightlyfromthesyntaxofother
languages.Forinstance,youdon’twraptheconditionalcheck
—inthiscase,x==1—inparentheses.Youmustwrapallcode
blocks,eventheprecedingsingle-lineblocks,inbraces.Many
othermodernlanguagesmakethebracesoptionalforsingle-
lineblocks,butthey’rerequiredinGo.
Forconditionalsinvolvingmorethantwochoices,Go
providesaswitchstatement.Thefollowingisanexample:
switchx❶{
case"foo"❷:
fmt.Println("Foundfoo")
case"bar"❸:
fmt.Println("Foundbar")
default❹:
fmt.Println("Defaultcase")
}
Inthisexample,theswitchstatementcomparesthecontents
ofavariablex❶againstvariousvalues—foo❷andbar❸—
andlogsamessagetostdoutifxmatchesoneofthe
conditions.Thisexampleincludesadefaultcase❹,which
executesintheeventthatnoneoftheotherconditionsmatch.
Notethat,unlikemanyothermodernlanguages,yourcases
don’thavetoincludebreakstatements.Inotherlanguages,
executionoftencontinuesthrougheachofthecasesuntilthe
codereachesabreakstatementortheendoftheswitch.Gowill
executenomorethanonematchingordefaultcase.
Goalsocontainsaspecialvariationontheswitchcalleda
typeswitchthatperformstypeassertionsbyusingaswitch
statement.Typeswitchesareusefulfortryingtounderstand
theunderlyingtypeofaninterface.Forexample,youmight
useatypeswitchtoretrievetheunderlyingtypeofaninterface
calledi:
funcfoo(i❶interface{}){
switchv:=i.(type)❷{
caseint:
fmt.Println("I'maninteger!")
casestring:
fmt.Println("I'mastring!")
default:
fmt.Println("Unknowntype!")
}
}
Thisexampleusesspecialsyntax,i.(type)❷,toretrievethe
typeoftheiinterfacevariable❶.Youusethisvalueinaswitch
statementinwhicheachcasematchesagainstaspecifictype.
Inthisexample,yourcasescheckforintorstringprimitive
types,butyoucouldverywellcheckforpointersoruser-
definedstructtypes,forinstance.
Go’slastflowcontrolstructureistheforloop.Theforloop
isGo’sexclusiveconstructforperformingiterationor
repeatingsectionsofcode.Itmightseemoddtonothave
conventionssuchasdoorwhileloopsatyourdisposal,butyou
canre-createthembyusingvariationsoftheforloopsyntax.
Here’sonevariationofaforloop:
fori:=0;i<10;i++{
fmt.Println(i)
}
Thecodeloopsthroughnumbers0to9,printingeach
numbertostdout.Noticethesemicolonsinthefirstline.
Unlikemanyotherlanguages,whichusesemicolonsasline
delimiters,Gousesthemforvariouscontrolstructuresto
performmultipledistinct,butrelated,subtasksinasingleline
ofcode.Thefirstlineusesthesemicolonstoseparatethe
initializationlogic(i:=0),theconditionalexpression(i<10),
andthepoststatement(i++).Thisstructureshouldbevery,
veryfamiliartoanyonewhohascodedinanymodern
language,asitcloselyfollowstheconventionsofthose
languages.
Thefollowingexampleshowsaslightvariationofthefor
loopthatloopsoveracollection,suchasasliceoramap:
❶nums:=[]int{2,4,6,8}
foridx❷,val❸:=range❹nums{
fmt.Println(idx,val)
}
Inthisexample,youinitializeasliceofintegersnamed
nums❶.Youthenusethekeywordrange❹withintheforloop
toiterateovertheslice.Therangekeywordreturnstwovalues:
thecurrentindex❷andacopyofthecurrentvalue❸atthat
index.Ifyoudon’tintendtousetheindex,youcouldreplace
idxintheforloopwithanunderscoretotellGoyouwon’tneed