# Uses and Abuses of Server-Side Requests

**Authors:**
- Giancarlo Pellegrino
- Onur Catakoglu
- Davide Balzarotti
- Christian Rossow

**Affiliations:**
- **Giancarlo Pellegrino, Christian Rossow:**
  - CISPA, Saarland University, Saarland Informatics Campus, Saarbrücken, Germany
  - Email: {gpellegrino, crossow}@cispa.saarland
- **Onur Catakoglu, Davide Balzarotti:**
  - Eurecom, Biot, France
  - Email: {onur.catakoglu, davide.balzarotti}@eurecom.fr

## Abstract

An increasing number of web applications rely on server-side requests (SSRs) to fetch resources from user-provided URLs. While SSRs are straightforward to implement, their security implications are often overlooked. This paper presents the first comprehensive study of the security risks associated with SSRs. We propose a classification of SSRs and introduce four new attack scenarios that illustrate how SSRs can be misused for malicious activities. We also present an automated scanner, called *günther*, which we used to test 68 popular web applications. Our findings reveal that the majority of these applications are vulnerable to various SSR abuses, including server-side code execution and amplification DoS attacks. Finally, we provide eight practical recommendations to help developers implement SSRs more securely.

## 1. Introduction

Web applications have evolved from simple client-to-server interactions to complex, interconnected networks of services. This evolution has led to an increased use of service-to-service communication, often driven by user inputs. For example, social networks fetch page previews, online calendars import iCal data, and web mail clients retrieve emails from user-provided inboxes. These interactions are integral to business applications and web-based protocols like OpenID and SAML.

To facilitate this communication, web applications use server-side requests (SSRs), where a server generates HTTP requests to another web service. While SSRs enhance user experience and enable advanced features, they also introduce significant security risks if not properly implemented. Developers often adopt SSRs without fully understanding the potential threats, leading to vulnerabilities that can be exploited for malicious purposes.

Existing research on SSRs primarily focuses on Server-Side Request Forgery (SSRF), which allows attackers to perform port scans and buffer overflows. However, SSRs pose a broader range of security risks that have not been thoroughly examined. This paper aims to address this gap by providing a detailed analysis of SSR security implications.

### Contributions

- **Classification:** We propose a new classification for SSRs.
- **Attack Scenarios:** We present four new attack scenarios that demonstrate how SSRs can be used to mount sophisticated Denial-of-Service (DoS) attacks, deliver malware, and bypass client-side countermeasures.
- **Empirical Analysis:** We discuss the results of our experiments on 68 web services, 54 of which were found to have at least one security flaw.
- **Mitigations:** We provide a set of clear recommendations to help developers implement SSRs more securely.

## 2. Background

### 2.1 Server-Side Request Communication Pattern

The SSR pattern involves three entities: a client (C), an SSR service (S), and an external server (ES). The process begins when C sends an HTTP request to S containing a user-specified URL (urlES). S then extracts the URL and initiates a connection to ES to fetch the corresponding resource (resES). Depending on the application, S may forward resES back to C or return a transformed version (resS = f(resES)).

**Use Cases:**
- **Social Networks:** Fetch and display previews of user-posted links.
- **Business Applications:** Include online resources in documents.
- **Development Tools:** Validate XML/JSON objects and test web applications.
- **News Aggregators:** Retrieve news from various sources.
- **Security Protocols:** Enable communication between identity and service providers in OpenID and SAML.

**Server- vs. Client-Side Requests:**
- **Practicality:** CSRs are subject to the same-origin policy and CORS, which can be restrictive.
- **Security:** CSRs may expose cryptographic keys, while SSRs do not.
- **Efficiency:** CSRs can double the number of messages, making SSRs more efficient for fetching multiple resources.

### 2.2 Security Risks and Threat Models

Improperly implemented SSRs can be abused for various malicious activities:

- **R1:** SSRs can be used as stepping stones to attack ES, such as performing DoS attacks.
- **R2:** Untrusted URLs can reference local resources, leading to exfiltration of sensitive data.
- **R3:** SSRs introduce indirection, making it difficult for browsers to determine the origin of content, exposing users to malware.
- **R4:** Vulnerabilities in S can be exploited by malicious responses from ES.

### 2.3 Awareness of the Security Risks

Academic and non-academic literature shows a lack of attention to SSRs, with existing works focusing only on a subset of the potential threats. There is a need for better documentation and best practices to guide developers in implementing secure SSR services.

## 3. SSR Classification

We introduce a comprehensive classification of SSRs based on four dimensions: flaws, attacker control, S’s behavior, and victims. This classification provides a common terminology for future research and helps in understanding the different roles and vulnerabilities in SSR communication.

- **Flaws:** Types of security issues, such as SSRF, data exfiltration, and resource exhaustion.
- **Attacker Control:** Level of control the attacker has over the SSR, ranging from limited to full control.
- **S’s Behavior:** How the SSR service processes and responds to requests.
- **Victims:** Potential targets of SSR abuse, including the SSR service itself, the client, and third-party services.

This classification is not mutually exclusive, as services can play multiple roles and suffer from multiple flaws. It serves as a foundation for a more nuanced understanding of SSR security.

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text.