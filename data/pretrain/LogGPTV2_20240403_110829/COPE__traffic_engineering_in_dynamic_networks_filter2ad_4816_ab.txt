formance may degrade signiﬁcantly. One way to handle this issue
is to expand the convex hull to include more trafﬁc demands. We
can expand the corresponding convex hull by letting the convex
combination coefﬁcients th take values less than 0 or larger than
1. Then we can optimize routing for all trafﬁc demands that fall
into the expanded convex hull. Such expansion could help us to
tolerate changes in trafﬁc demands to a certain extent. However,
there is a signiﬁcant trade-off between the degree of expansion and
the performance optimality. In an extreme, the convex hull can be
expanded to include all trafﬁc demands, which results in oblivious
routing. This is robust against arbitrary possible trafﬁc changes, but
does not provide the best performance for normal demands.
To address the problem, we separate the optimization for the
common (predicted) cases and the bound on the worst cases. In
particular, we propose a novel approach based on the notion of
penalty envelope. It guarantees worst-case performance under arbi-
trary possible trafﬁc demand while achieving close-to-optimal per-
formance under predictable demands.
DEFINITION 1. A routing f is said to have MLU (or performance-
ratio) penalty envelope r if the maximum MLU (or performance ra-
tio) of f on the whole set of possible trafﬁc demands is no more
than r.
A penalty envelope restricts the set of possible routing to those
with maximum MLU or performance ratio less than or equal to r.
With the penalty envelope as a safeguard, a prediction-based TE
algorithm can then search the optimal routing f for the predicted
trafﬁc demands, so long the routing satisﬁes the penalty envelope.
We call such a scheme common-case optimization with penalty en-
velope (COPE).
The general COPE scheme can be deﬁned as follows. Let X
be the set of all possible TMs, and D ⊂ X the set of predicted
TMs. Let o( f , x) be the objective function of applying routing
f to TM x. Let o( f ,D) be the aggregated objective function on
the set D. The aggregation can be done, for example, by taking
the maximum, or by taking some type of weighted average. Let
c( f , x) be the penalty function. Note that for both the objective and
penalty functions, lower values are better. It can also be the case
that o( f , x) = c( f , x). Then the general setting is to ﬁnd the rout-
ing f that minimizes o( f ,D), under the constraint that the penalty
over the whole set X of possible trafﬁc demands (and thus includes
those in X − D) is bounded by a penalty envelope r. Formally, the
formulation is:
min f
subject to
o( f ,D)
f is a routing, i.e., (1) ;
∀x ∈ X : c( f , x) ≤ r.
Figure 1: General COPE framework.
Figure 2 illustrates the basic idea of the COPE scheme. This
scheme gives us a novel, simple, yet effective tool to handle dy-
namic networks with mostly normal trafﬁc but sometime unex-
pected (yet possible) trafﬁc demands.
3.4 Implementing Penalty Envelope
There are two remaining issues in implementing penalty enve-
lope. The ﬁrst is how to choose the penalty envelope r. The algo-
bound
for set X
D
X
optimize
for set D
Figure 2: Illustration of COPE. The system objective is to
choose the routing f which is optimal for the predicted set D
under the constraint that its penalty in the set of all possible
trafﬁc demands X is bounded.
rithm we use is the following. First, we compute c
∗(X), where α is a scale-up factor. As we will
Then we set r = αc
show in Section 4, by choosing α slightly higher than 1, we can
achieve performance close to optimal for most common cases.
∗(X) = min f ,x∈X c( f , x).
The second key challenge to the COPE framework is whether we
can efﬁciently incorporate penalty envelope into prediction-based
TE optimization. Below, we consider three cases and illustrate how
they can be efﬁciently implemented.
In the ﬁrst case, we consider a penalty envelope on the absolute
value of MLU on the set of possible trafﬁc demands (i.e., the set
X ) which satisfy access capacity constraints. The problem can be
formulated as follows:
min
subject to
o( f ,D)
f is a routing;
∀ links l,∀dab ≥ 0 such that
dab ≤ ROUT
∑
, ∑
b∈V
b∈V
dab fab(l)/c(l) ≤ r,
∑
a
dba ≤ RIN
a ,
(7)
(8)
ab
a
and RIN
where ROUT
a are the aggregated capacities of inbound and
outbound access links of node a, respectively; they have equal val-
ues when access links have equal capacities in both directions. In
this formulation, r is an upper bound on MLU.
The constraints (8) are not standard LP formulation. However,
they can be tested by solving the following “slave LP” for each link
l, and testing whether or not the objective is ≤ r.
max ∑
subject to
a,b
fab(l)dab/c(l)
∀a, b ∈ V : dab ≥ 0,
, ∑
∑
b∈V
b∈V
dab ≤ ROUT
a
(9)
dba ≤ RIN
a .
Using linear programming duality, we can show that the objec-
tive of (9) is ≤ r if and only if the following set of constraints can
be satisﬁed:
∀a ∈ V : µl(a) ≥ 0,νl(a) ≥ 0;
∀a, b ∈ V : fab(l)/c(l) ≤ µl(a) + νl(b);
∑
a + νl(a)RIN
a∈V
(µl(a)ROUT
a ) ≤ r.
Figure 3: LP constraints to provide MLU penalty envelope over
the set of demands satisfying access capacity constraints.
The variables µl(a) and νl(a) are dual multipliers on the node
capacity constraints ROUT
a
and RIN
a , respectively.
We can then replace the constraints (8) with the set of constraints
in Figure 3. This gives an TE optimization problem with MLU
penalty envelope over the set of trafﬁc demands satisfying access
capacity constraints.
min
subject to
There can be scenarios where it is more convenient to use a
penalty envelope based on performance ratio than on the absolute
value of MLU (e.g., the feasible MLU envelope is too high). In
the second case, we consider how to handle a performance-ratio
penalty envelope on a convex set X formed as the convex hull of a
set of TMs {D1, . . . , DH}:
o( f ,D)
f is a routing;
∀ links l,∀ TM D =
min
subject to
thDh,th ≥ 0,
th = 1,
(10)
H∑
h=1
H∑
h=1
∑ab dab fab(l)
c(l)
≤ r· OU(D).
(11)
Note that in the preceding problem formulation, there is one con-
straint for each trafﬁc matrix D ∈ X . Since the number of such ma-
trices are inﬁnite, this is not a standard linear programming prob-
lem. To solve the problem, we observe that the performance ratio
P( f , D) is scale-free:
P( f , D) = P( f ,αD),
for all scalar α > 0.
(12)
Then we have the following result:
LEMMA 1. Computing the performance-ratio optimal routing
over the convex hull is equivalent to computing the performance-
ratio optimal routing over a convex cone with the additional con-
straint OU(D) = 1.
PROOF. For any D, by the scale-free property of performance
ratio P( f , D), we have that:
P( f ,D)
=
o( f ,D)
f is a routing;
∀ link l,∀ TM D =
∑
H∑
h=1
dab fab(l)/c(l) ≤ r.
ab
thDh,th ≥ 0, OU(D) = 1;
Figure 4: Optimal TE with a performance-ratio penalty enve-
lope over a convex set.
∀ link m,∑
gab(m) ≤ c(m);
a,b
∀a, b, dab =
,th ≥ 0.
thdh
ab
H∑
h=1
(14)
Using an approach similar to that in [7], we can show by linear
programming duality, that the objective of (13) is ≤ r if and only if
the following set of constraints can be satisﬁed:
∀ links l, m : π(l, m) ≥ 0;
∀ link l, nodes i, j : pl(i, j) ≥ 0, with pl(i, i) = 0;
∀ link l : ∑m π(l, m)c(m) ≤ r;
∀ link l, OD pair a → b : fab(l)/c(l) ≤ pl(a, b)− λl(a, b);
∀ link l, node i, link m = ( j, k) : pl(i, k) ≤ pl(i, j) + π(l, m);
∀ link l, h = 1, . . . , H : ∑a,b λl(a, b)dh
≥ 0.
ab
Figure 5: LP constraints to provide performance-ratio penalty
envelope over a convex set.
Compared with the LP models developed in [7], our model has
additional Lagrange multipliers λl(a, b), which correspond to the
conic combination constraint (14).
We can then replace the last two lines of constraints in Figure 4
with the set of constraints in Figure 5, and form an TE optimiza-
tion problem with performance-ratio penalty envelope over a set
of possible trafﬁc demands expressed as a convex-hull. When the
TE optimization objective in (10) is the performance-ratio function
over a convex set D, we can similarly derive LP constraints.
The third case is a special case of the preceding case when the
set of possible trafﬁc matrices includes all non-negative trafﬁc de-
mands. The restriction imposed by the penalty envelope require-
ment in this case can be incorporated as a set of linear constraints.
Speciﬁcally, a routing f has performance-ratio penalty envelope r
if and only if the constraints in Figure 6 are satisﬁed.
∀ links l, m : π(l, m) ≥ 0;
∀ link l, nodes i, j : pl(i, j) ≥ 0, with pl(i, i) = 0;
∀ link l : ∑m π(l, m)c(m) ≤ r;
∀ link l, OD pair a → b : fab(l)/c(l) ≤ pl(a, b);
∀ link l, node i, link m = ( j, k) : pl(i, k) ≤ pl(i, j) + π(l, m).
Figure 6: LP constraints to provide performance-ratio penalty
envelope over the set of all non-negative trafﬁc demands.
4. EVALUATIONS
In this section, we evaluate our algorithms.
U( f , D
OU(D)
)
(∵ OU( D
OU(D)
) = 1)
P( f , D)
P( f , D
)
OU(D)
max
D∈D
max
D∈D
max
D∈D
=
=
(cid:10)= D
D
OU(D)=
(cid:10))
U( f , D
OU(D)
max
(cid:10)),
D(cid:10):∃D∈D,D(cid:10)= D
P( f ,D
(cid:5)
: ∃D ∈ D, D
(cid:10)
D
=
(cid:10) =
(cid:10) = D
(cid:6)
.
where the set D
{D : D = ∑H
corresponding D
a convex cone. This proves the lemma.
Apply the preceding result when D is a convex hull, i.e., D =
h=1 th = 1}, it can be shown that the
(cid:10)) = 1} is
(cid:10) = ∑H
h=1 thDh,th ≥ 0, OU(D
h=1 thDh,th ≥ 0,∑H
(cid:10) = {D
(cid:10)
OU(D)
: D
Applying Lemma 1 to X (instead of D), we obtain the formula-
tion in Figure 4.
The formulation in Figure 4 still involves inﬁnite number of con-
straints because it has one constraint for each D in the convex cone.
However, the last two lines of constraints in Figure 4 can be tested
by solving, for each link l, the following “slave LP”, and testing if
the objective is ≤ r.
max ∑
fab(l)dab/c(l)
subject to
a,b
gab(e) is a ﬂow of demand dab;
(13)
4.1 Evaluation Methodology
Dataset description: We evaluate our algorithms using both real
and synthetic data. We use the real topologies and trafﬁc demand
Network Aggregation level
US-ISP
Abilene
Abovenet
PoP-level
router-level
PoP-level
#Nodes
#Links Oblivious ratio
Penalty envelope
-
11
15
-
28
60
2.045
1.853
2.014
2.50
2.00
2.05
Table 1: Summary of network topologies used.
Tier-1 ISP hourly trafﬁc traces
Network Description
US-ISP
Abilene Netﬂow data collected every 5 min-
utes from a number of universities
and enterprises on the Internet-2
Period studied
a month in 2005
03/01/04 - 09/10/04
Time interval
hourly trafﬁc count
5-minute trafﬁc count
Table 2: Summary of real trafﬁc traces used.
matrices from Abilene and a major tier-1 ISP in US (anonymized as
US-ISP). For Abilene, we collected the router-level topology and
6-month worth of trafﬁc demands from Abilene Observatory [2].
Our dataset is available at [1]. For US-ISP, we rely on a PoP-level
model, which differs from the real router-level topology and trafﬁc
demands, yet still illustrates the scope and power of the methods
proposed here. In addition, we use the PoP-level Abovenet topol-
ogy inferred by RocketFuel [35]. We use OC192 as the capacity for
links in the Abovenet topology, and use the gravity model [53] de-
scribed in [33] to generate synthetic trafﬁc demands. Table 1 sum-
marizes the topologies in use, their oblivious ratios, and the default
performance-ratio penalty envelopes used in evaluation. Table 2
summarizes the real traces in use. Note that for proprietary reasons,
we omit the numbers of nodes and links of US-ISP in Table 1.
Performance metrics: We use the following two performance met-
rics to compare different algorithms: (i) maximum link utilization
(MLU) as deﬁned in Equation (2); and (ii) performance ratio as
deﬁned in Equation (4). For both metrics, lower values indicate
more efﬁcient resource utilization, and hence are preferred. Note
that the MLU deﬁned in Equation (2) allows utilization to be above
100% when the trafﬁc demand is large, while in practice, link uti-
lization cannot exceed 100%. To be consistent with terminologies
used by other authors, we use MLU with the understanding that it
means trafﬁc intensity and can exceed 100%. Also note that in our
real-trace-based evaluations, we assume that trafﬁc demands do not
change as a function of the performance of a TE algorithm. When
a TE algorithm performs badly and leads to network overload, TCP
ﬂows might be able to react and reduce network demand, resulting
in lower demand than that happened in the real traces. However,
this leads to reduced network throughput.