### Leaked Secrets and Weak Encryption {#c22.xhtml#h2-501546c22-0002}
Look for leaked secrets and credentials. Sometimes developers make the
mistake of hardcoding secrets such as API keys, encryption keys, and
database passwords into source code. When that source code is leaked to
an attacker, the attacker can use these credentials to access the
company's assets. For example, I've found hardcoded API keys in the
JavaScript files of web applications.
寻找泄露的秘密和凭据。有时，开发人员会错误地将秘密（如API密钥、加密密钥和数据库密码）硬编码到源代码中。当该源代码泄露给攻击者时，攻击者可以使用这些凭据访问公司的资产。例如，我曾在
Web 应用程序的 JavaScript 文件中发现硬编码的 API 密钥。
You can look for these issues by grepping for keywords such as
`      key     ` , `      secret     ` , `      password     ` ,
`      encrypt     ` , `      API     ` , `      login     ` , or
`      token     ` . You can also regex search for hex or base64
strings, depending on the key format of the credentials you're looking
for. For instance, GitHub access tokens are lowercase, 40-character hex
strings. A search pattern like `      [a-f0-9]{40}     ` would find them
in the source code. This search pattern matches strings that are 40
characters long and contains only digits and the hex letters *a* to *f*
.
您可以通过使用关键字，如key、secret、password、encrypt、API、login或token进行grep来查找这些问题。您还可以使用正则表达式搜索十六进制或Base64字符串，具体取决于您要查找的凭证的键格式。例如，GitHub访问令牌是小写的40个字符的十六进制字符串。像\[a-f0-9\]
{40}这样的搜索模式可以在源代码中找到它们。此搜索模式匹配长度为40个字符且仅包含数字和十六进制字母a到f的字符串。
[ ]{#c22.xhtml#Page_339 .pagebreak title="339"} When searching, you
might pull up a section of code like this one, written in Python:
在搜索时，你可能会找到像这样的 Python 代码部分：
    import requests
    1 GITHUB_ACCESS_TOKEN = "0518fb3b4f52a1494576eee7ed7c75ae8948ce70"
    headers = {"Authorization": "token {}".format(GITHUB_ACCESS_TOKEN), \
    "Accept": "application/vnd.github.v3+json"}
    api_host = "https://api.github.com"
    2 usernames = ["vickie"] # List users to analyze
    def request_page(path):
      resp = requests.Response()
      try: resp = requests.get(url=path, headers=headers, timeout=15, verify=False)
      except: pass
      return resp.json()
    3 def find_repos():
      # Find repositories owned by the users.
      for username in usernames:
        path = "{}/users/{}/repos".format(api_host, username)
        resp = request_page(path)
        for repo in resp:
          print(repo["name"])
    if __name__ == "__main__":
      find_repos()
This Python program takes in the username of a user from GitHub [ 2
]{.CodeAnnotation aria-label="annotation2"} and prints out the names of
all the user's repositories [ 3 ]{.CodeAnnotation
aria-label="annotation3"} . This is probably an internal script used to
monitor the organization's assets. But this code contains a hardcoded
credential, as the developer hardcoded a GitHub access token into the
source code [ 1 ]{.CodeAnnotation aria-label="annotation1"} . Once the
source code is leaked, the API key becomes public information.
这个 Python 程序从 GitHub2
中接受用户的用户名，然后打印出该用户所有的存储库名称3。这可能是用于监控组织资产的内部脚本。但这段代码包含一个硬编码的凭据，因为开发人员在源代码中硬编码了一个
GitHub 访问令牌1。一旦源代码泄露，API 密钥就成为公共信息。
Entropy scanning can help you find secrets that don't adhere to a
specific format. In computing, *entropy* is a measurement of how random
and unpredictable something is. For instance, a string composed of only
one repeated character, like `      aaaaa     ` , has very low entropy.
A longer string with a larger set of characters, like
`      wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY     ` , has higher
entropy. Entropy is therefore a good tool to find highly randomized and
complex strings, which often indicate a secret. TruffleHog by Dylan
Ayrey (
[https://github.com/trufflesecurity/truffleHog/](https://github.com/trufflesecurity/truffleHog/){.LinkURL}
) is a tool that searches for secrets by using both regex and entropy
scanning.
熵扫描可以帮助您找到不符合特定格式的秘密。在计算机中，熵是衡量某物有多随机和不可预测的尺度。例如，由一个重复字符组成的字符串，如aaaaa，熵非常低。而一个由更多字符组成的较长字符串，如wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY，熵较高。因此，熵是寻找高度随机和复杂的字符串的好工具，这往往意味着一个秘密。Dylan
Ayrey
的TruffleHog（https://github.com/trufflesecurity/truffleHog/）是一种同时使用正则表达式和熵扫描来搜索秘密的工具。
Finally, look for the use of weak cryptography or hashing algorithms.
This issue is hard to find during black-box testing but easy to spot
when reviewing source code. Look for issues such as weak encryption
keys, breakable encryption algorithms, and weak hashing algorithms. Grep
the names of weak algorithms like ECB, MD4, and MD5. The application
might have functions named after these algorithms, such as
`      ecb()     ` , `      create_md4()     ` , or `     ` [
]{#c22.xhtml#Page_340 .pagebreak title="340"} md5_hash(). It might also
have variables with the name of the algorithm, like `      ecb_key     `
, and so on. The impact of weak hashing algorithms depends on where they
are used. If they are used to hash values that are not considered
security sensitive, their usage will have less of an impact than if they
are used to hash passwords.
最后，寻找弱密码学或哈希算法的使用。在黑盒测试期间，这个问题很难发现，但在代码审查时很容易发现。寻找弱加密密钥、易破解的加密算法和弱哈希算法等问题。Grep弱算法的名称，如ECB、MD4和MD5。应用程序可能有以这些算法命名的函数，例如ecb()、create_md4()或md5_hash()。它还可能有以算法名称命名的变量，例如ecb_key等。弱哈希算法的影响取决于它们的使用位置。如果它们用于哈希不被视为安全敏感的值，则它们的使用将比用于哈希密码时产生更少的影响。
### New Patches and Outdated Dependencies {#c22.xhtml#h2-501546c22-0003}
If you have access to the commit or change history of the source code,
you can also focus your attention on the most recent code fixes and
security patches. Recent changes haven't stood the test of time and are
more likely to contain bugs. Look at the protection mechanisms
implemented and see if you can bypass them.
如果您可以访问源代码的提交或更改历史，您也可以将注意力集中在最近的代码修复和安全补丁上。最近的更改还没有经受时间的考验，很可能包含错误。查看已实施的保护机制，看看能否绕过它们。
Also search for the program's dependencies and check whether any of them
are outdated. Grep for specific code import functions in the language
you are using with keywords like `      import     ` ,
`      require     ` , and `      dependencies     ` . Then research the
versions they're using to see if any vulnerabilities are associated with
them in the CVE database (
[https://cve.mitre.org/](https://cve.mitre.org/){.LinkURL} ). The
process of scanning an application for vulnerable dependencies is called
*software composition analysis (* *SCA)* . The OWASP Dependency-Check
tool (
[https://owasp.org/www-project-dependency-check/](https://owasp.org/www-project-dependency-check/){.LinkURL}
) can help you automate this process. Commercial tools with more
capabilities exist too.
同时搜索程序的依赖项并检查其中是否有过时的内容。使用关键词如
import、require和依赖项来在所使用的编程语言中查找特定的代码导入函数。然后研究它们所使用的版本，以确定它们是否在
CVE
数据库（https://cve.mitre.org/）中有与之相关的漏洞。扫描程序中的易受攻击依赖关系的过程称为软件组成分析（SCA）。OWASP
依赖项检查工具（https://owasp.org/www-project-dependency-check/）可以帮助您自动化此过程。也存在更具能力的商业工具。
### Developer Comments {#c22.xhtml#h2-501546c22-0004}
You should also look for developer comments and hidden debug
functionalities, and accidentally exposed configuration files. These are
resources that developers often forget about, and they leave the
application in a dangerous state.
你还应该寻找开发者的注释、隐藏的调试功能和意外暴露的配置文件。这些资源开发者经常会忘记，留下了应用处于危险状态。
Developer comments can point out obvious programming mistakes. For
example, some developers like to put comments in their code to remind
themselves of incomplete tasks. They might write comments like this,
which points out vulnerabilities in the code:
开发人员的评论可以指出明显的编程错误。例如，一些开发人员喜欢在代码中放置评论来提醒自己有未完成的任务。他们可能会写出像这样的注释，指出代码中的漏洞：
    # todo: Implement CSRF protection on the change_password endpoint.
You can find developer comments by searching for the comment characters
of each programming language. In Python, it's `      #     ` . In Java,
JavaScript, and C++, it's `      //     ` . You can also search for
terms like *todo* , *fix* , *completed* , *config* , *setup* , and
*removed* in source code.
你可以通过搜索每种编程语言的注释字符来找到开发者的评论。在 Python
中，它是 #。在 Java、JavaScript 和 C++
中，它是//。你也可以在源代码中搜索 todo、fix、completed、config、setup
和 removed 等词汇。
### Debug Functionalities, Configuration Files, and Endpoints {#c22.xhtml#h2-501546c22-0005}
Hidden debug functionalities often lead to privilege escalation, as
they're intended to let the developers themselves bypass protection
mechanisms. You can often find them at special endpoints, so search for
strings like `      HTTP     ` , `      HTTPS     ` , `      FTP     ` ,
and `      dev     ` . For example, you might find a URL like this
somewhere in the code that points you to an admin panel:
隐藏的调试功能通常会导致权限升级，因为它们旨在让开发人员自己绕过保护机制。您可以经常在特殊的端点上找到它们，因此搜索像HTTP、HTTPS、FTP和dev之类的字符串。例如，在代码中可能会找到这样一个URL，指向管理员面板。
    http://dev.example.com/admin?debug=1&password=password # Access debug panel
[ ]{#c22.xhtml#Page_341 .pagebreak title="341"} Configuration files
allow you to gain more information about the target application and
might contain credentials. You can look for filepaths to configuration
files in source code as well. Configuration files often have the file
extensions *.conf* , *.env* , *.cnf* , *.cfg* , *.cf* , *.ini* , *.sys*
, or *.plist* .
配置文件可帮助您获取有关目标应用程序的更多信息，并可能包含凭据。您还可以在源代码中查找配置文件的文件路径。配置文件通常具有文件扩展名.conf、.env、.cnf、.cfg、.cf、.ini、.sys或.plist。
配置文件能让你获取有关目标应用程序的更多信息，并可能包含凭据。在源代码中也可以查找文件路径以获取配置文件。配置文件通常使用以下文件扩展名.conf、.env、.cnf、.cfg、.cf、.ini、.sys或.plist。
Next, look for additional paths, deprecated endpoints, and endpoints in
development. These are endpoints that users might not encounter when
using the application normally. But if they work and are discovered by
an attacker, they can lead to vulnerabilities such as authentication
bypass and sensitive information leak, depending on the exposed
endpoint. You can search for strings and characters that indicate URLs
like *HTTP* , *HTTPS* , slashes (/), URL parameter markers (?), file
extensions ( *.php* , *.html* , *.js* , *.json* ), and so on.
接下来，寻找其他路径、已弃用的终端和正在开发中的终端。这些终端在用户正常使用应用程序时可能不会遇到。但如果它们可以工作并被攻击者发现，可能会导致漏洞，比如认证绕过和敏感信息泄露，这取决于暴露的终端。你可以搜索一些
URL 指示字符和字符串，比如 HTTP、HTTPS、斜杠 (/)、URL 参数标记 (?),
文件扩展名 (.php、.html、.js、.json) 等等。
## The Detailed Approach {#c22.xhtml#h1-501546c22-0003}
If you have more time, complement the fast techniques with a more
extensive source code review to find subtle vulnerabilities. Instead of
reading the entire codebase line by line, try these strategies to
maximize your efficiency.
如果你有更多的时间，可以通过更详细的源代码审查来发现微妙的漏洞来补充快速技术。不要逐行阅读整个代码库，尝试使用这些策略来最大化你的效率。
### Important Functions {#c22.xhtml#h2-501546c22-0006}
When reading source code, focus on important functions, such as
authentication, password reset, state-changing actions, and sensitive
info reads. For example, you'd want to take a close look at this login
function, written in Python:
阅读源代码时，专注于重要的函数，例如身份验证、密码重置、状态更改操作和敏感信息读取。例如，您想仔细查看Python中编写的此登录函数。
    def login():
      query = "SELECT * FROM users WHERE username = '" + \
      1 request.username + "' AND password = '" + \
        request.password + "';"
      authed_user = database_call(query)
    2 login_as(authed_user)
This function looks for a user in the database by using a SQL query
constructed from the username and password provided by the user [ 1
]{.CodeAnnotation aria-label="annotation1"} . If a user with the
specified username and password exists, the function logs in the user [
2 ]{.CodeAnnotation aria-label="annotation2"} .
该功能通过使用用户提供的用户名和密码构建SQL查询在数据库中查找用户。如果存在具有指定用户名和密码的用户，则该功能将登录该用户。
This code contains a classic example of a SQL injection vulnerability.
At [ 1 ]{.CodeAnnotation aria-label="annotation1"} , the application
uses user input to formulate a SQL query without sanitizing the input in
any way. Attackers could formulate an attack, for example, by entering
`      admin'--     ` as the username to log in as the admin user. This
works because the query would become the following:
这段代码包含经典的SQL注入漏洞示例。在1处，应用程序使用用户输入来构建SQL查询，而没有以任何方式对输入进行消毒。攻击者可以通过输入admin\'\--作为用户名来发起攻击，以作为管理员用户登录。这有效是因为查询变成了以下形式：
    SELECT password FROM users WHERE username = 'admin' --' AND password = '';
Which parts of the application are important depend on the priorities of
the organization. Also review how important components interact with
other parts of the application. This will show you how an attacker's
input can affect different parts of the application.
应用程序中哪些部分是重要的取决于组织的优先事项。还要检查重要组件如何与应用程序的其他部分进行交互。这将展示攻击者的输入如何影响应用程序的不同部分。
### [ ]{#c22.xhtml#Page_342 .pagebreak title="342"} User Input {#c22.xhtml#h2-501546c22-0007}
Another approach is to carefully read the code that processes user
input. User input, such as HTTP request parameters, HTTP headers, HTTP
request paths, database entries, file reads, and file uploads provide
the entry points for attackers to exploit the application's
vulnerabilities. This can help find common vulnerabilities such as
stored XSS, SQL injections, and XXEs.
另一种方法是仔细阅读处理用户输入的代码。用户输入，例如HTTP请求参数、HTTP头、HTTP请求路径、数据库条目、文件读取和文件上传，为攻击者利用应用程序漏洞提供了入口点。这有助于发现常见的漏洞，例如存储型XSS、SQL注入和XXE。
Focusing on parts of the code that deal with user input will provide a
good starting point for identifying potential dangers. Make sure to also
review how the user input gets stored or transferred. Finally, see
whether other parts of the application use the previously processed user
input. You might find that the same user input interacts differently
with various components of the application.