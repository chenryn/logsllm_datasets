            }
        }
其中`this.lexer`为`JSONScanner`类，如下:
`lexer.token()=12`, JSONToken中定义如下: 即`lexer.token='{'`
        public final static int ERROR                = 1;
        //
        public final static int LITERAL_INT          = 2;
        //
        public final static int LITERAL_FLOAT        = 3;
        //
        public final static int LITERAL_STRING       = 4;
        //
        public final static int LITERAL_ISO8601_DATE = 5;
        public final static int TRUE                 = 6;
        //
        public final static int FALSE                = 7;
        //
        public final static int NULL                 = 8;
        //
        public final static int NEW                  = 9;
        //
        public final static int LPAREN               = 10; // ("("),
        //
        public final static int RPAREN               = 11; // (")"),
        //
        public final static int LBRACE               = 12; // ("{"),
        //
        public final static int RBRACE               = 13; // ("}"),
        //
        public final static int LBRACKET             = 14; // ("["),
        //
        public final static int RBRACKET             = 15; // ("]"),
        //
        public final static int COMMA                = 16; // (","),
        //
        public final static int COLON                = 17; // (":"),
        //
        public final static int IDENTIFIER           = 18;
        //
        public final static int FIELD_NAME           = 19;
        public final static int EOF                  = 20;
        public final static int SET                  = 21;
        public final static int TREE_SET             = 22;
        public final static int UNDEFINED            = 23; // undefined
        public final static int SEMI                 = 24;
        public final static int DOT                  = 25;
        public final static int HEX                  = 26;
继续调用在`case LBRACE:`分支: `lexer.isEnabled(Feature.OrderedField)=false`
        //
        case LBRACE:
            JSONObject object = new JSONObject(lexer.isEnabled(Feature.OrderedField));
            return parseObject(object, fieldName);
继续调用`parseObject(object, fieldName);`在其中声明了一个循环，来扫描字符串
            Map map = object instanceof JSONObject ? ((JSONObject) object).getInnerMap() : object;
            boolean setContextFlag = false;
            for (;;) {
如果判断目前的`char='"'`,那么即将获取的为`key`
                    if (ch == '"') {
                        key = lexer.scanSymbol(symbolTable, '"');
                        lexer.skipWhitespace();
获取`key`后判断是否有默认的`DEFAULT_TYPE_KEY`即：`[@type](https://github.com/type "@type")`
                    if (key == JSON.DEFAULT_TYPE_KEY
                            && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {
                        String typeName = lexer.scanSymbol(symbolTable, '"');
                        if (lexer.isEnabled(Feature.IgnoreAutoType)) {
                            continue;
                        }
继续判断是否为`$ref`
                    if (key == "$ref"
                            && context != null
                            && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {
                        lexer.nextToken(JSONToken.LITERAL_STRING);
在判断完`key`后， 进入设置content的环节
                            ParseContext contextR = setContext(object, fieldName);
                            if (context == null) {
                                context = contextR;
                            }
                            setContextFlag = true;
继续调用，解析嵌套对象, 此时`key=rand1`
            if (!objParsed) {
                obj = this.parseObject(input, key);
            }
解析，嵌套对象时，此时获取的`key=[@type](https://github.com/type "@type")`, 满足`key ==
JSON.DEFAULT_TYPE_KEY`， 判断条件`lexer.isEnabled(Feature.IgnoreAutoType)=false`.
此时`object`对象为`JSONObject`而`typeName=java.lang.Class`,
所以进入了`config.checkAutoType`分支， `lexer.getFeatures()=989`
            if (object != null
                    && object.getClass().getName().equals(typeName)) {
                clazz = object.getClass();
            } else {
                clazz = config.checkAutoType(typeName, null, lexer.getFeatures());
            }
## checkAutoType
在`ParserConfig`文件中, 其`checkAutoType`函数有多个判断条件, 第一个条件为`typeName`的长度在3-128之间，  
第二个判断条件， 为是否支持的类型， 通过了一个计算：
        final long BASIC = 0xcbf29ce484222325L;
        final long PRIME = 0x100000001b3L;
        final long h1 = (BASIC ^ className.charAt(0)) * PRIME;
        if (h1 == 0xaf64164c86024f1aL) { // [
            throw new JSONException("autoType is not support. " + typeName);
        }
        if ((h1 ^ className.charAt(className.length() - 1)) * PRIME == 0x9198507b5af98f0L) {
            throw new JSONException("autoType is not support. " + typeName);
        }
        if (autoTypeSupport || expectClass != null) {
            ...
            //这里会使用二分法来查询白名单，和黑名单，但是这里被绕过了，
            if (Arrays.binarySearch(acceptHashCodes, hash) >= 0) {
                clazz = TypeUtils.loadClass(typeName, defaultClassLoader, false);
                if (clazz != null) {
                    return clazz;
                }
            }
            if (Arrays.binarySearch(denyHashCodes, hash) >= 0 && TypeUtils.getClassFromMapping(typeName) == null) {
                throw new JSONException("autoType is not support. " + typeName);
            }
        }
在判断完以后，接着去检测是否在map里，这里应该是参考文章提到的缓存
        if (clazz == null) {
            clazz = TypeUtils.getClassFromMapping(typeName);
        }
在`mapping`对象中，未找到的话，调用
        if (clazz == null) {
            clazz = deserializers.findClass(typeName);
        }
此时进入了`IdentityHashMap`类，即前边提到的`ParserConfig.getGlobalInstance()`中`deserializers`的类  
相当于配置白名单。 根据调试，第一个`[@type](https://github.com/type
"@type")`对象的`java.lang.Class`中`deserializers.findClass(typeName)`返回，  
继续扫描字符串
在第`377`行： `ObjectDeserializer deserializer = config.getDeserializer(clazz);`  
跟进后在 objVal这一行， 获取了值`com.sun.rowset.JdbcRowSetImpl`
            parser.accept(JSONToken.COLON);
            objVal = parser.parse();
            parser.accept(JSONToken.RBRACE);
继续下去是一些类型的判断如`URI.class`， `File.class`等 ，最后在`clazz==Class.class`这里
            if (clazz == Class.class) {
                return (T) TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());
            }
其中`strVal`为`com.sun.rowset.JdbcRowSetImpl`。
在`TypeUtil.loadClass`中, 判断不是`[`和`L`开头的字符串后，进行下面的分支，
此时如果`cache`为`true`的话，那么就将该类放到`mapping`对象中
        if(classLoader != null){
            clazz = classLoader.loadClass(className);
            if (cache) {
                mappings.put(className, clazz);
            }
            return clazz;
        }
而在`TypeUtils`中，调用该函数时, `cache`默认为`true`
        public static Class loadClass(String className, ClassLoader classLoader) {
            return loadClass(className, classLoader, true);
        }
继续上述的过程，在判断`rand2`时，同样到了`clazz = config.checkAutoType(typeName, null,
lexer.getFeatures());`  
此时由上一步的`mapping.put`， 在这里获取到了`class`类， 为`com.sun.rowset.JdbcRowSetImpl`
        if (clazz == null) {
            clazz = TypeUtils.getClassFromMapping(typeName);
        }
        if (clazz != null) {
            if (expectClass != null
                    && clazz != java.util.HashMap.class
                    && !expectClass.isAssignableFrom(clazz)) {
                throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
            }
            return clazz;
        }
并且`class!=null`且`expectClass==null`， 直接`return
clazz`,并未走到最后的`if(!autoTypeSupport)`分支，绕过了  
接着进入了第一步设置的断点处  
JavaBeanDeserializer.java
        protected Object parseRest(DefaultJSONParser parser
                , Type type
                , Object fieldName
                , Object instance
                , int features
                , int[] setFlags) {
            Object value = deserialze(parser, type, fieldName, instance, features, setFlags);
            return value;
        }
在下列的循环中，遍历`fieldInfo`的值，如果在字符串有的，配置了变量的值
        String typeKey = beanInfo.typeKey;
        for (int fieldIndex = 0;; fieldIndex++) {
            String key = null;
            FieldDeserializer fieldDeser = null;
            FieldInfo fieldInfo = null;
最后调用到`fieldDeserializer.parseField(parser, object, objectType, fieldValues);`  
进入`DefaultFieldDeserializer.java`类，其`parseField`函数中，在最后调用的是
            if (object == null) {
                fieldValues.put(fieldInfo.name, value);
            } else {
                setValue(object, value);
            }
此时`object`为：`jdbcRowSetImpl`类，而`value`为`ldap://localhost:8080/Exploit`  
继续下一轮，当这里为`fieldInfo.name=autoCommit`而`value=true`时，  
在`FieldDeserializer`类中，调用其`setValue`函数，最后会执行到
            method.invoke(object, value);
此时`method`=`setAutoCommit`, `value`=`true`  
进入`jdbcRowSetImpl`类，其`this.conn`为`null`,
且`dataSource`=`ldap://localhost:8088/Exploit`  
执行`this.connect()`会请求到恶意的`ldap`地址，造成命令执行
        public void setAutoCommit(boolean var1) throws SQLException {
            if (this.conn != null) {
                this.conn.setAutoCommit(var1);
            } else {
                this.conn = this.connect();
                this.conn.setAutoCommit(var1);
            }
        }
## 至此，分析完毕
总结: 因为用了两次`[@type](https://github.com/type
"@type")`类型，第一次的时候`java.lang.Class`未在黑名单中，且通过序列化，将`jdbcRowSetImpl`类添加至了`mappings`对象，其作用是缓存，
在第二次解析到`[@type](https://github.com/type "@type")`对象时，
直接在`mappings`对象中获取了类，从而绕过了黑名单的检测  
导致了这一漏洞的发生。
## 参考