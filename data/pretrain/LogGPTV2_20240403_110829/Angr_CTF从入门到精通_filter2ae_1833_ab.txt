用ida打开一下查看一下main函数
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      signed int i; // [esp+18h] [ebp-40h]
      signed int j; // [esp+1Ch] [ebp-3Ch]
      char s1[20]; // [esp+24h] [ebp-34h]
      char s2[4]; // [esp+38h] [ebp-20h]
      int v8; // [esp+3Ch] [ebp-1Ch]
      unsigned int v9; // [esp+4Ch] [ebp-Ch]
      v9 = __readgsdword(0x14u);
      for ( i = 0; i  90 )
      {
        puts("Try again.");
        exit(1);
      }
      return (31 * a2 + a1 - 65) % 26 + 65;
    }
几乎没变，用之前的脚本改一改也能跑出flag：
    str1 = "VXRRJEUR"
    flag = ""
    def complex_function(a1,a2):
        return (31 * a2 + a1 - 65) % 26 + 65
    if __name__ == "__main__":
        for i in range(len(str1)):
            for j in range(64,90):      
                if ord(str1[i]) == complex_function(j,i+8):
                    print(i+8)
                    flag += chr(j)
                    break            
        print(flag)
angr的exp：
    import angr
    import sys
    def Go():
        path_to_binary = "./02_angr_find_condition" 
        project = angr.Project(path_to_binary, auto_load_libs=False)
        initial_state = project.factory.entry_state()
        simulation = project.factory.simgr(initial_state)
        def is_successful(state):
            stdout_output = state.posix.dumps(sys.stdout.fileno())
            if b'Good Job.' in stdout_output:
                return True
            else: 
                return False
        def should_abort(state):
            stdout_output = state.posix.dumps(sys.stdout.fileno())
            if b'Try again.' in  stdout_output:
                return True
            else: 
                return False
        simulation.explore(find=is_successful, avoid=should_abort)
        if simulation.found:
            solution_state = simulation.found[0]
            solution = solution_state.posix.dumps(sys.stdin.fileno())
            print("[+] Success! Solution is: {}".format(solution.decode("utf-8")))
        else:
            raise Exception('Could not find the solution')
    if __name__ == "__main__":
        Go()
重点是分析一下引入的两个新函数，选择其中一个来说一说：
    def is_successful(state):
            stdout_output = state.posix.dumps(sys.stdout.fileno())
            if b'Good Job.' in stdout_output:
                return True
            else: 
                return False
我们将打印到标准输出的内容放入`stdout_output`变量中。请注意，这不是字符串，而是字节对象，这意味着我们必须使用`b'Good
Job.'`而不是仅`"Good Job."`来检查我们是否正确输出了“ Good Job”
引入一个函数来对状态进行检测是为了实现动态的选择想获取的state。回想一下之前我们的`simulation.explore`都是固定写死的具体地址，但我们引入一个函数就可以动态的进行分析获取state
运行一下获得答案：
## 03_angr_simbolic_registers
这题主要是因为angr在处理复杂格式的字符串scanf()输入的时候不是很好，我们可以直接将符号之注入寄存器，也就是主要学会符号化寄存器
首先检查一下文件：
    syc@ubuntu:~/Desktop/TEMP$ checksec 03_angr_symbolic_registers
    [*] '/home/syc/Desktop/TEMP/03_angr_symbolic_registers'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
拖入IDA查看一下程序逻辑：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int v3; // ebx
      int v4; // eax
      int v5; // edx
      int v6; // ST1C_4
      unsigned int v7; // ST14_4
      unsigned int v9; // [esp+8h] [ebp-10h]
      unsigned int v10; // [esp+Ch] [ebp-Ch]
      printf("Enter the password: ");
      v4 = get_user_input();
      v6 = v5;
      v7 = complex_function_1(v4);
      v9 = complex_function_2(v3);
      v10 = complex_function_3(v6);
      if ( v7 || v9 || v10 )
        puts("Try again.");
      else
        puts("Good Job.");
      return 0;
    }
关键的函数就是需要分析`get_user_input()`和`complex_function()`
    int get_user_input()
    {
      int v1; // [esp+0h] [ebp-18h]
      int v2; // [esp+4h] [ebp-14h]
      int v3; // [esp+8h] [ebp-10h]
      unsigned int v4; // [esp+Ch] [ebp-Ch]
      v4 = __readgsdword(0x14u);
      __isoc99_scanf("%x %x %x", &v1, &v2, &v3);
      return v1;
    }
    unsigned int __cdecl complex_function_1(int a1)
    {
      return (((((((((((((((((((((a1 + 17062705) ^ 0xB168C552) + 647103529) ^ 0x9F14CFD7) - 548738866) ^ 0xF78063EF)
                          - 1352480098) ^ 0x5D1F4C6)
                        - 57802472) ^ 0xB6F70BF8)
                      - 1347645151
                      + 648671421) ^ 0x3D5082FE)
                    - 9365053) ^ 0xD0150EAD)
                  + 1067946459) ^ 0xE6E03877)
                - 359192087
                + 961945065) ^ 0xE1EECD69)
              - 1817072919) ^ 0x6B86ECF5)
            - 449212884) ^ 0x2012CCDB;
    }
可以发现这次的输入是一个复杂的格式化字符串，`"%x %x %x"`意味着使用三个十六进制值作为输入，我们看一下汇编代码
可以得知我们输入的三个值最后是分别赋值给了EAX，EBX，EDX寄存器，所以我们要控制输入只需要控制这三个寄存器的值就行
看一下最后的EXP，然后再逐步分析：
    import angr
    import sys
    import claripy
    def Go():
        path_to_binary = "./03_angr_symbolic_registers" 
        project = angr.Project(path_to_binary, auto_load_libs=False)
        start_address = 0x08048980
        initial_state = project.factory.blank_state(addr=start_address)
        passwd_size_in_bits = 32
        passwd0 = claripy.BVS('passwd0', passwd_size_in_bits)
        passwd1 = claripy.BVS('passwd1', passwd_size_in_bits)
        passwd2 = claripy.BVS('passwd2', passwd_size_in_bits)
        initial_state.regs.eax = passwd0
        initial_state.regs.ebx = passwd1
        initial_state.regs.edx = passwd2
        simulation = project.factory.simgr(initial_state) 
        def is_successful(state):
            stdout_output = state.posix.dumps(sys.stdout.fileno())
            if b'Good Job.\n' in stdout_output:
                return True
            else: 
                return False
        def should_abort(state):
            stdout_output = state.posix.dumps(sys.stdout.fileno())
            if b'Try again.\n' in  stdout_output:
                return True
            else: 
                return False
        simulation.explore(find=is_successful, avoid=should_abort)
        if simulation.found:
            for i in simulation.found:
                solution_state = i
                solution0 = format(solution_state.solver.eval(passwd0), 'x')
                solution1 = format(solution_state.solver.eval(passwd1), 'x')
                solution2 = format(solution_state.solver.eval(passwd2), 'x')
                solution = solution0 + " " + solution1 + " " + solution2
                print("[+] Success! Solution is: {}".format(solution))
                # print(simgr.found[0].posix.dumps(0))
        else:
            raise Exception('Could not find the solution')
    if __name__ == "__main__":
        Go()
运行一下获得结果：
这次我们可以不用从main函数的开头开始，这里我们直接跳过`get_user_input()`函数，直接设置寄存器`eax, ebx, edx`
###  states
从这题开始，我们可以更多的窥见states的功能，states这只是factory提供的多个构造函数中的一个，即
`AngrObjectFactory`，提供重要分析对象的接口
####  状态预设
除了使用`.entry_state()` 创建 state 对象, 我们还可以根据需要使用其他构造函数创建 state:
名称 | 描述  
---|---  
`.entry_state()` | 构造一个已经准备好从函数入口点执行的状态  
`.blank_state` | 构造一个“空状态”，它的大多数数据都是未初始化的。当使用未初始化的的数据时，一个不受约束的符号值将会被返回  
`.call_state` | 构造一个已经准备好执行某个函数的状态  
`.full_init_state` |
构造一个已经执行过所有与需要执行的初始化函数，并准备从函数入口点执行的状态。比如，共享库构造函数（constructor）或预初始化器。当这些执行完之后，程序将会跳到入口点  
请注意，这次我们使用的是`blank_state()`方法，而不是`entry_state()`。通过传递`addr=start_address`，我们有效地告诉`blank_state()`在该特定地址创建一个新状态
    start_address = 0x08048980
    initial_state = project.factory.blank_state(addr=start_address)
####  位向量(bitvector)
更应该准确的说是符号位向量，符号位向量是angr用于将符号值注入程序的数据类型。这些将是angr将解决的方程式的“ x”，也就是约束求解时的自变量。可以通过
`BVV(value,size)` 和 `BVS( name, size)` 接口创建位向量，也可以用 FPV 和 FPS 来创建浮点值和符号
在这里我们使用claripy通过`BVS()`方法生成三个位向量。此方法有两个参数：第一个是angr用来引用位向量的名称，第二个是位向量本身的大小（以位为单位）。由于符号值存储在寄存器中，并且寄存器的长度为32位，因此位向量的大小将为32位
    passwd_size_in_bits = 32
    passwd0 = claripy.BVS('passwd0', passwd_size_in_bits)
    passwd1 = claripy.BVS('passwd1', passwd_size_in_bits)
    passwd2 = claripy.BVS('passwd2', passwd_size_in_bits)
####  访问寄存器
`get_user_input()`对输入进行了解析并将其放入三个寄存器中，我们可以通过 `state.regs` 对象的属性访问以及修改寄存器的数据
是时候把我们之前创建的符号位向量（bitvectors）放入属于他们的地方：寄存器`EAX`，`EBX`和`EDX`。我们将修改`initial_state`之前创建的内容并更新寄存器的内容
    initial_state.regs.eax = passwd0
    initial_state.regs.ebx = passwd1
    initial_state.regs.edx = passwd2
现在我们必须定义`find`and `avoid`状态，我们将像以前一样进行操作：
    def is_successful(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        if b'Good Job.\n' in stdout_output:
            return True
        else: 
            return False
    def should_abort(state):
        stdout_output = state.posix.dumps(sys.stdout.fileno())
        if b'Try again.\n' in  stdout_output:
            return True
        else: 
            return False
    simulation.explore(find=is_successful, avoid=should_abort)
####  约束求解
可以通过使用`state.solver.eval(symbol)`对各个断言进行评测来求出一个合法的符号值（若有多个合法值，返回其中的一个），我们根据`eval()`之前注入的三个符号值调用求解器引擎的方法
    solution0 = format(solution_state.solver.eval(passwd0), 'x')
    solution1 = format(solution_state.solver.eval(passwd1), 'x')
    solution2 = format(solution_state.solver.eval(passwd2), 'x')
    solution = solution0 + " " + solution1 + " " + solution2
    print("[+] Success! Solution is: {}".format(solution))
最后运行脚本即可获得答案
## 参考文献
【1】angr官方文档—— 
【2】angr 系列教程(一）核心概念及模块解读—— 
【3】Introduction to angr Part 0 —— 
【4】angr文档翻译 —— 