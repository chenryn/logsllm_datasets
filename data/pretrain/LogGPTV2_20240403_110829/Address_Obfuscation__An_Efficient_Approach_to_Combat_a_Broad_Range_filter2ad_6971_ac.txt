This requires transformation of the callee to modify
the instruction which creates the space for the local
variables on the stack. Local variables are accessed
using instructions containing ﬁxed constants corre-
sponding to their offset from the base pointer. Given
that the padding is determined statically, the trans-
formation simply needs to change the constants in
these instructions. The main beneﬁt of this approach
is that it introduces a random gap between local vari-
ables of a function and other security-critical data on
the stack, such as the frame pointer and return ad-
dress, and hence makes typical stack-smashing at-
tacks difﬁcult.
2. Before parameters to the function.
This is done by transforming the caller. First, the set
of argument-copying instructions is located (usually
PUSH instructions). Next, padding code is inserted
just before these instructions. The primary advan-
tage of this approach is that the amount of padding
can change dynamically. Disadvantages of the ap-
proach are (a) in the presence of optimization, the
argument-pushing instructions may not be contigu-
USENIX Association
12th USENIX Security Symposium 
111
High Address
Stack
growth
Low Address
parameters
return address
  previous base pointer
padding
padding
parameters
return address
  previous base pointer
local variables
local variables
(1) Padding between
      base pointer and
local variables
(2) Padding before
      function parameters
Figure 3: Potential locations of padding inserted between stack frames.
ous, which makes it difﬁcult to determine where the
padding is to be introduced, and (b) it does not make
stack-smashing attacks any harder since the distance
between the local variables and return address is left
unchanged.
We have implemented the ﬁrst option. As mentioned
earlier, extraction of accurate control-ﬂow graphs can be
challenging for some routines. To ensure that our trans-
formation does not lead to an erroneous program, the
following precautions are taken:
 Transformation is applied to only those routines for
which accurate control-ﬂow graphs can be extracted.
The amount of padding is randomly chosen, and
 , depending on the amount of
varies from 
storage consumed by local variables, and the type of
instructions used within the function to access local
variables (byte- or word-offset).
From our expe-
rience on instrumentation of different binaries, we
of the routines are
have found that around 
completely analyzable.
to 
 Only functions which have suitable behavior are in-
strumented. In particular, the function must have at
least one local variable and manipulate the stack in a
standard fashion in order to be instrumented. More-
over, the routines should be free of non-standard
operations that reference memory using relative ad-
dressing with respect to the frame pointer.
 Only in place modiﬁcation of the code is performed.
By in place, we mean that the memory layout of the
routines is not changed. This is done in order to
avoid having to relocate the targets of any indirect
calls or jumps.
These precautions have limited our approach to instru-
ment only 65% to 80% of the routines. We expect that
this ﬁgure can be improved to 90+% if we allow modiﬁ-
cations that are not in-place, and by using more sophis-
ticated analysis of the routines.
2.3.5 Heap randomization
The base address of the heap can be randomized using
a technique similar to the stack base address randomiza-
tion. Instead of changing the stack pointer, code is added
to allocate a randomly-sized large chunk of memory,
thereby making heap addresses unpredictable. In order
to randomize the relative distances between heap data, a
wrapper function is used to intercept calls to malloc,
and randomly increase the sizes of dynamic memory al-
. On some OSes, includ-
location requests by 
ing Linux, the heap follows the data segment of the exe-
cutable. In this case, randomly relocating the executable
causes the heap to also be randomly relocated.
to 
3 Effectiveness
Address obfuscation is not a bulletproof defense against
all memory error exploits, but is instead a probabilis-
tic technique which increases the amount of work re-
quired before an attack (or sequence of attacks) suc-
ceeds. Hence, it is critical to have an estimate of the
increase in attacker work load. In this section, we ﬁrst
analyze the effectiveness of address obfuscation against
previously reported attacks and attack variations (“clas-
sic” attacks). Then we discuss attacks that can be specif-
ically crafted to exploit weaknesses of address obfusca-
tion.
112
12th USENIX Security Symposium 
USENIX Association



Bottom
of
Stack
Random
Offset
 (Read Only
Pages)
...
— Growth of Stack 
...
Prev.
Frame
Prev.
Frame
Function
Args.
Return
Address
Buffer
...
Top
of
Stack
Injected
Code
NOP ... NOP
Guessed Address ... Guessed Address
Increasing Address —
Figure 4: Format of an attack which uses a large buffer overﬂow to increase the odds of success.
3.1 Classic Attacks
Address obfuscation provides good protection against
the majority of the “classic” attacks. Most of these at-
tacks involve overwriting of a single pointer or datum
without any ability to read the memory contents before
attacking. Against address obfuscation, an attacker is
forced to make guesses about the address of one or more
program values in order to succeed.
3.1.1 Stack Smashing Attacks
A classic stack-smashing attack is absolute address-
dependent, since the absolute address of the injected
code must be placed in the return address stored in the
stack frame. Let !
be the size of the virtual address
space available for the initial random stack offset, and
assume that the stack offset is chosen randomly from
(with a uniform distribution). Further-
more, we don’t wish to allow an offset of zero, and
Linux requires that the stack pointer be a 32-bit word-
aligned address, which reduces the set of possible off-
sets to "
) . (In this analysis, we assume that
is much larger than the effect of
the one-time offset !
stack-frame padding, and hence ignore the latter. The
purpose of stack-frame padding is to introduce signiﬁ-
cant additional randomization into the addresses so that
attacks become difﬁcult even if an attacker has somehow
learned the value of !
Assuming the attacker knows the value of !
, the at-
tacker can guess an address randomly and have a 1
chance of success. Moreover, if the guess happens to
be wrong, then the program will likely crash, and will
have to be restarted. At this time, a new random value
for stack offset will be generated, which means that each
failure does not provide any information to the attacker.
Thus, the probability of a successful attack after 3 at-
9 . From this, it can be
tempts is given by 
shown that the probability of success approaches 0.5 af-
ter about 2
attempts.
The attacker can improve the odds of success by increas-
ing the size of the attack data. This can be done by writ-
ing to the buffer a block containing copies of a guessed
(enough copies to be relatively sure that the
address :
return address is overwritten — in our implementation,
.)
of the order of 256 copies), followed by a block of ;
falls
NOPs, and then the attack code. As long as :
somewhere in the block of NOPs (or directly equals the
ﬁrst instruction of the inject code), the attack will suc-
ceed. This is illustrated in Figure 4, which shows the
overlap between the stack values (along the top), and the
attack data (along the bottom). When the current func-
tion returns, execution will jump to the guessed address
, which the attacker hopes will be within the range of
to ; will be 
to 1
. Fortunately, ;
the NOPs or the ﬁrst instruction of the injected code.
The insertion of ; NOPs increases the odds of success
, reducing the average number of
by a factor of ;
attempts for a reasonable chance of success to roughly
is limited in size because the at-
tacker must avoid writing to the read-only stack padding.
If the overﬂow runs into the read-only region, a seg-
mentation fault will occur, preventing the attack from
to be much
succeeding. This restricts the value of ;
smaller than !
. C programs tend not to use too much
stack space; in the example programs of Figure 5, the
amount of average stack storage allocated ranged from
1 to 4 kilobytes. For such programs, the maximum ratio
1 , and the odds of a single at-
of !
tack succeeding will be
, resulting in about 3000
attempts, or 12 megabytes of data transmitted, for a rea-
 ) probability of success. While this may
sonable (I
seem like a small number, note that:
every failure will cause a branch to a random ad-
dress, which is highly likely to cause the target pro-
gram to crash, so an attacker is not simply free to
keep trying different addresses until an attack at-
tempt succeeds. Instead, the repeated crashing of the
program is likely to raise suspicion of the intruder’s
presence.
the total amount of data that needs to be sent by the
attacker is obtained by multiplying the size of attack
data by the number of attack attempts. This number
will be of the order of 2
, and is largely independent
of the size of data used in each attack attempt.
3.1.2 Existing code attacks
Existing code attacks, also called return-into-libc at-
tacks, typically involve overwriting the return address
USENIX Association
12th USENIX Security Symposium 
113

"

#
#
#
!

)
*
+
-
+
#
#
#
!
2
5

1
2
7

:
<
=
2
2

<
=
#

@


1
B
C
D
<
E
F
G

#



D .
on the stack with the address of existing code, typically a
function in the standard C-library, such as execve. The
arguments to this function will be taken from the stack,
which has been overwritten by the same buffer overﬂow
to contain the data chosen by attacker. In order for such
an attack to succeed, the attacker needs to guess the lo-
cation of the vulnerable function. With a randomization
 MB, and given the constraint that the
of the order of 
base addresses of libraries and the executable must start
at a multiple of page size (* KB), the probability of suc-
cess is of the order of *
Attacks that corrupt other stack-resident function point-
ers are all similar to an existing code attack, and the
probability of a successful attack remains the same as
with existing code attacks.
3.1.3 Format-String Attacks
A format-string vulnerability [33] occurs whenever a
program contains a call to the printf family of func-
tions with a ﬁrst parameter (format string) that is pro-
vided by an attacker. Since the format string provides a
great deal of control over the behavior of printf func-
tion, the ability of an attacker to provide a format string
can be likened to the ability to execute attacker-chosen
code. For this reason, most techniques developed to deal
with buffer overﬂows are not effective against format
string attacks.
The common form of this attack uses the somewhat ob-
scure %n format parameter, which takes a pointer to an
integer as an argument, and writes the number of bytes
printed so far to the location given by the argument.
The number of bytes printed can be easily controlled
by printing an integer with a large amount of padding,
e.g., %432d. The printf function assumes that the
address to write into is provided as an argument, i.e., it
is to be taken from the stack. If the attacker-provided
format string is stored on the stack, and if printf can
be tricked into extracting arguments from this portion
of the stack, then it is possible for an attacker to over-
write an arbitrary, attacker-speciﬁed location in memory
with attacker-speciﬁed data. Such an attack can be used
to change return values without trampling over canary
values used by StackGuard and other approaches.
The format-string attack described above is an absolute-
address dependent attack.
It requires the attacker to
know the absolute location where the return address is
stored on the stack, and the absolute location where the
attack code is present. This means that the probability
of a successful attack using this approach cannot be any
larger than that for stack-smashing attacks.
Certain kinds of format-string vulnerabilities can be ex-
ploited to read stack contents. In particular, if the vulner-
able printf (or variant) call is one that sends its output
to the attacker, then the attacker can potentially learn the
randomizations used in the program, and use this knowl-
edge to craft a successful attack. (See Section 3.2.1 for
details.)
3.1.4 Data Modiﬁcation Attacks
Attacks which target non-pointer data values are one of
the most difﬁcult to defend against. For instance, a string
which contains a shell command may be stored adja-
cently to the end of a buffer with an overﬂow vulnera-
bility. In this case, an attacker can overﬂow the buffer
with ASCII text containing a different command to be
executed. The success of the attack depends only upon
the relative distance between the buffer and the com-
mand string. Furthermore, even if the relative distance
is randomized, the attacker can use blank characters as
padding to increase the odds of success. If the attacker
pads the injected string with more blanks than the max-
imum increase in distance between the buffer and the
shell string, then the odds of success are high, especially
when the data is located in the static area.
If it is lo-
cated on the stack, then the introduction of blanks (or
other padding characters) may corrupt critical data on
the stack, which may cause the program to crash. For
this reason, such padding may not be very successful for
stack-resident data.
Our current implementation provides limited protection
against this attack, in the case where the data resides on