，其实就涉及很多细节工作了，当然对于分布式
图14-34
基本管理
定制内容
数据报告
调度任务
故障自愈
主从切换
---
## Page 545
的起始和截止时间，就会生成相关的 SQL语句并发布到线上环境。
理工作能够更加清晰。
实现元数据管理的统一，而在这个基础上加入了应用监控，就会让整个分布式集群的管
理了，会导致新的磁盘空间报警，这个工作可以通过统一的配置来对接。
如果我们忘记了，业务方也忘记了，那么麻烦就来了，会导致数据无法写入的业务故障
我们不建议一次性创建1~2年的周期表，而是每隔几个月预创建一批，那么问题来了
其实和其他的表类型是相通的，在此不再赘述。
于周期表。这里就会涉及两类维护，一类是表的创建，一类是数据清理。对于变更来说
能是分区表，在MySQL中更多是日期表，其实无论哪种形式，它们的属性是相通的：属
对很低，如此一来，对于变更的管理和维护，就可以统筹管理了。
启动多个变更的线程，这个过程持续的时间很短，因为分片足够多，所以操作代价也相
操作来说，就是发布1条SQL语句，但是通过分片管理的方式，可以在各个分片上并发
一周期表的创建本身没有难度，难的是需要指定创建时间，为了保证资源的有效使用，
-在这个基础上，还有一些辅助工作要完成，这就是周期表的维护了，在Oracle 中可
下图14-36 是周期表管理的实现页面，我们可以通过配置化管理周期表，选定周期表
基于以上的一些分析，可以明确对于周期表的管理，需要借助一些配置化的工作来
同理数据清理也是类似，假设和业务约定数据保留周期为一个月，如果我们忘记清
在目前的设计方案中，主要是通过配置管理的方式生成动态的 SQL，这样对于前端
集群维度（中间件）
执行SQL
SQL模板
生成分布式配置
图14-35
物理分片维度
生成SQL
第14章MySQL运维管理模块设计|523
周期表配置管理
周期表清理
逻辑分片维度
---
## Page 546
524丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
生业务中断，我们可以很快地做出补救措施，也可以进一步落实数据的热冷分离。
则为热点表，经过一段时间的采集，我们就会得到一个数据库中的热点表情况，一旦发
游变化不可见，所以经常会有数据同步出错的时候才发现原来表结构已经发生了变化。
理周期数据之后，我们就可以很清楚的知道我们在权限管理方面还存在哪些大的风险，
少表是通过后端任务自动重建，有多少表是自动删除，这些是无法追踪的，有了生命管
14.8.2
14-37是MySQL表相关的字典梳理情况。
通过这些来反向推动安全建设。
，第二，对于数据流转和数据同步场景，上游通常是不关心下游的变化的，而下游对于上
一个大家经常忽视的方向，那么问题来了，它能做些什么呢，我们分为三个场景来说明：
而要实现这个功能设计，我们就需要深入分析 MySQL 数据字典层面的支持，下图
第三，我们可以引入数据的变更频率，把DML 的频率量化出来，如果变化频率高，
第一，从 DBA 的角度来说，我们迫切需要这个功能，比如我们现在不清楚每天有多
作为 DBA，需要从更高的一个角度来看待你所管理的数据，数据生命周期管理就是
数据生命周期管理
0机
Show10enties
cowing1to1of1entres
截止时间：2019-04-24
统计信息
4306
MySQL表相关字典梳理
生成SQL语句
图14-37
图14-36
MySOL
表信息
命令行
命令行
Search:
PreviusNext
onsche
在线
---
## Page 547
出两个时间点的表结构变化明细。
些字段等等。
照就可以轻松的得到我们需要的信息，如图14-38 所示。
建表语句来进行比对。
次都有这个表的变更，那么这个表显然是一个热点表。
时间就会变化，我们可以根据这个字段来分析表的冷热情况，假设一天采集了10次，每
变化，当然表的创建时间已经被刷新了，所以需要我们把这些记录都持久化下来。
tables 为例，有两个重要的时间属性。
假设我们得到了表的 DDL 变化，要进行 DDL 明细的比对，一种方式是通过抽取的
（2）字段UPDATE_TIME代表的是最近一次DML的时间，比如写入一条数据，这个
如果要把变更信息做到表格化的输出，可以参考下图14-39所示的表格，里面会显示
比如我们根据DDL变化做了两次抽取，可以理解是两个快照，那么通过对比两个快
（1）字段CREATE_TIME代表的是最近一次DDL的时间，可以让我们捕捉到DDL
通过这样的比对，我们可以得到一些变化的明细，比如新增了哪些字段，删除了哪
经过大量的测试和比对，我们选择了一部分的字典作为参考，以 information_schema.
F
变更类型
变更类型
修改
暴
新增
59
字段名称
索引类型
name3
name2
id2
索引
索引
主键
ent
原字段类型
idx_testid3
idx_test_id2
pk_test_id
索引名称
varchar
varchar
图14-39
原字段长度
图14-38
id3id4
原索引列
台
现字段类型
现索引列
varchar
bigint.
TABI
现字段长度
2019-05-09
2019-05-03
2019-05-02
变更时间
第14章MySQL运维管理模块设计|525
20
索引统计信息
2019-05-12
2019-05-11
2019-05-11
变更时间
2000
1000
---
## Page 548
526丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
变更表之间彼此没有关联。
据库test在2月10日包含10张表，2月12日新增了2张表，2月17日删除了1张表，
后建立相关的模型来对数据持久化管理。
么它可以订阅这个数据变化，或者是和工单的数据打通，让数据的变化和流程关联起来。
些粒度延伸出相关的变更历史信息。
在这个基础上可以扩展出一些功能，比如某个业务就对某个表的数据变化格外关注，那
对于业务来说，可以提供基础的IP、端口信息，显示的是完整的变更列表，比如数
②精确查看：这个部分的逻辑会相对复杂一些，我们可以展开说一下。
表变更，包含字段变更和索引变更
●删除表
·新增表
整个生命周期管理中，会覆盖以下的一些场景：
（3）覆盖范围
下图14-40是元数据的抽取逻辑，我们可以根据定时任务抽取不同粒度的元数据，然
对外使用 API的方式，提供变更列表的查询、对象变更的查询和相关的轨迹树。
（2）对外提供的数据服务形式
数据的抽取是周期性的，数据管理的粒度则是分为表、字段、和索引，然后根据这
①模糊查看：
对后端管理来说，可以提供一个完整的列表信息。
（4）应用场景
（1）元数据抽取逻辑
到目前为止我们已经有了相对概要的认识，我们看看怎么去实现。
：根据时间维度来查看最近哪些表结构发生了变更，该接口暂不对外。
玫圾轴取代理
数纪轴代理
图14-40
对象订阅信息
工单关联信息
索引变更历史
表变更历史
索引
对象订阅列表
变更历史查询
对象DDL查询
变更列表
区
字段变更历史查
时间维度查询
东引变更历史查
表变更历史查询
---
## Page 549
更类型。
据抽取流程的整理。深色的部分是这几种变更的类型，所以总体来看，会涉及到11种变
我们要实现数据生命周期管理，势必需要梳理数据管理的流程，下图14-41是一个数
（5）数据抽取流程图
·根据时间维度来查看一个时间范围内的“数据库-表“列表。
·根据对象维度来查看一个时间范围内的“数据库-表"列表;
如果查询范围默认为近3天，支持如下两种维度的查询：
·查询范围是2月17日以后，显示12张表信息，其中11个为有效，1个为失效。
查询范围是2月12日~2月17日，显示12张表信息，其中11个为有效，1个为失效；
查询范围是2月10日~2月12日，显示12张表信息，状态为有效；
查询范围是2月10日之前，则显示10张表，状态为有效；
无须处理
今更
删除字民
小于等于
表变更-变更字段
表的D[间酮和效探该中的表
得到表的索引信息
得到表的概要信息
得到表的字段信息
根据DDL变更时问得到列表
表变更
本
判断表是否存在
存在
循环列表
图
14-41
表变更-新增索引
不存在
对比素引变化
根据变更时间得到列表
友变更-删除索引
得到表的索引信息
得到表的字段信息
得到表的概要信息
删除索
新建表
第14章MySQL运维管理模块设计丨527
不存在
得到表的概要信息
热点表
---
## Page 550
528|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
来（基于 DML 的变化频率)，对热度打上标识，这样就可以明确的看到热度的一个整体
一个业务长期处于1%以下或者为0，我们可以基本断定是一个僵尸业务。
如果有20张在快照抓取过程中始终出现，那么我们可以标记数据库的热度为20%。如果
图是数据表的热度趋势图，比如数据库中有100张表，我们每隔 30分钟抓取一个快照，
中间的表格是数据表的热度榜单和数据库的热度榜单，我们把热度最高的表整理出
左上角的图是 DDL 的次数，可以标识出整个实例的 DDL 变化情况，而与之对应的
下图14-42是数据生命周期管理的实现页面。
在档案库中在在尘列表
和历史快照列表进行比对
得到变更列表
06/18
删除表
不存在
C
图14-41 (续)
得到全量列表
图14-42
得到表的索引信息
得到表的字段信息
得到表的概要信息
判断表是否存在
初始表
不存在
---
## Page 551
析工作，然后通过数据库运维系统的API讲数据开放出来作为查询和统计，如图14-44所示。
集到的慢日志转储到中继服务器上，通过 pt-query-digest 来作为核心服务来完成慢日志的分
服务能力。（
提供分析和有效建议，对于开发同学来说，其实他们需要的不是慢日志，而是你的数据
不专业，势必需要DBA来提供专业的建议，而如果我们能够通过一种透明自助的方式来
10分钟就能定位，也可能很久都分析不出来。
检索的方式，来快速定位问题，但是实际上得到日志之后的分析结果是不可控的，可能
说，他们得到慢日志，是希望通过分析日志来发现一些明显的性能问题，通过这种信息
的角色和分工来看，他们得到慢日志之后的分析和处理常常和问题的本质相左，换句话
14.9
不能掉以轻心。
息和轨迹变化等，详情页信息如下图14-43所示。
数据库的热度表不到10%，显然我们是需要进一步分析的。
分布了。右边的饼图对于变更次数（DDL，DML 变更）和对象个数的比例图，如果一个
对慢日志模块的分析管理流程相对简单，可以配置一个慢日志分析服务，将数据库端收
，而这个工作其实是应该作为运维的前置工作来完成的，既然开发对于慢日志的处理
其实行业里有一个常见的“伪需求“，就是开发同学经常需要关注慢日志，从工作
对于每一条数据变化，我们都可以下钻，得到更加详细有效的信息。比如表结构信
数据生命周期的管理不是一劳永逸，是一个持续改进的过程，在我们建设的过程中
MySQL慢日志模块设计
图14-43
索引疫更
第14章MySQL运维管理模块设计|529
restetine
COL
TO
C
---
## Page 552
530丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
归类到慢日志。
要内部明确下，比如 SQL 执行时间超过1秒我们指定为慢日志，如果没有使用索引，也
从规范标准的角度来说，希望慢日志是周期性的转储，需要我们对慢日志做周期性切分。
：在此我们需要明确一个共识，那就是什么样的 SQL 属于慢日志，这里有几个参数需
对收集的慢日志内容，
2.慢日志转储
同时慢日志的导出和管理都是在主库端。
对于目前的数据库环境来说，慢日志的管理是松散的，没有做到细粒度的管理模式
整体上分了六个大的步骤，
相对完整的慢日志周期管理，可参照下图14-45。
1．慢日志切分
根据慢日志日志量预警
数据库
居库
贯日志SQL性能指标
慢日志SQLD采集
慢日志执行计划查
据库的慢日志查
信息
慢日志性能预警
慢日志SQL管理
慢日志报告提取
我们需要统筹管理，比如有100套环境，那么我们可以指定
，我简单解释一下：