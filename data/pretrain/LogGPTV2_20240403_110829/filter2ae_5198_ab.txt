不能使用特定的颜色布局方案来分配页表来避免显示这个信号，因为它们都会出现在我们的驱逐集中。
这意味着，在足够大量的内存页的情况下，我们可以在给定页偏移量下从LLC（和L1D和L2）逐出任何页表项，而不依赖于需要很长时间构建的最佳驱逐集。
### D.MMU上的EVICT+TIME攻击
对加密密钥或窃听的传统侧信道攻击有利于观察整个LLC的状态。 这就是为什么诸如PRIME + PROBE 和FLUSH +
RELOAD是允许攻击者观察LLC的整个状态的侧信道攻击的原因。
与这些攻击相比，EVICT + TIME只能在每个测量周期获得关于一个缓存集的信息，与PRIME + PROBE等攻击相比，减少了带宽。 EVICT +
TIME进一步做出强有力的假设，即攻击者可以在执行后台运算时观察目标主机的性能。 虽然这些属性经常使EVICT +
TIME比其他的缓存攻击差，但是它容易地适用于AnC：AnC不需要高带宽（例如，破解加密密钥），并且它可以监视受害者（即，MMU），因为其执行后台（即，页表遍历）。EVICT
+ TIME在以下步骤中实现AnC：
###### 1.使用一个足够大的内存页集作为驱逐集。
###### 2.对于在可能的64个偏移中的偏移t处的目标缓存行，通过读取驱逐集中的所有内存页中的相同偏移量来驱逐缓存行。
访问此集合还会刷新dTLB和已指定的TLB。 如果我们是目标代码，通过在偏移量t执行函数来调用iTLB。
###### 3.通过在堆目标的情况下解引用，或者在代码目标的情况下在该位置执行函数时，访问我们想要在与t不同的缓存行去随机化的目标虚拟地址。
EVICT + TIME的第三步触发页表遍历，取决于偏移t的缓存行是否是托管页表项缓存行，操作将需要更长或更短的时间。 EVICT +
TIME解决了我们面对PRIME +
PROBE的问题：首先，我们不需要创建最佳的LLC驱逐集，因为我们不依赖驱逐集提供信息，其次，LLC驱逐集是用TLB驱逐集，减少由于较少的页表遍历产生的噪声。
更重要的是，这些页表遍历（由于TLB未命中）导致显着减少错误信息，还是因为我们不依赖于探测驱逐集来获得时间信息。
由于这些改进，当在解引用堆地址和执行JIT函数时，在JavaScript中的所有64个可能的缓存行偏移上尝试EVICT +
TIME时，可以观察到与目标虚拟地址的页表项对应的缓存行偏移。 我们在第七节提供进一步的评估，但在此之前，我们描述如何可以唯一地标识由EVICT +
TIME标识的缓存行内的页表项的偏移量。
### E.页表项切片
在这个阶段，我们已经识别了在不同页表级的页表项的（可能重叠的）缓存行偏移。
对于ASLR仍然保留两个熵源：由于不可能区分哪个缓存行偏移属于哪个页表级，并且缓存行内的页表项的偏移量尚未知道。
我们通过分配一个足够大的缓冲区（在我们的这种情况下是分配一个2G的空间）和访问这个缓冲区中的不同位置来解决这两个熵源，以便对已经分配了缓冲区的虚拟地址去随机化。
我们对PTL1和PTL2去随机化的方法不同于我们对PTL3和PTL4去随机化的额方法。 我们在下面描述这两种技术。
将PTL1和PTL2去随机化：让我们从PTL1的页表项托管目标虚拟地址v的缓存行开始。我们观察到当（可能的）4个高速缓存行之一改变时，因为我们访问v +
i×4KB， 1,2，...，8}。
如果其中一个缓存行在i处改变，它立即向我们提供两条信息：改变的缓存行正在托管PTL1的页表项，并且PTL1的v的页表项偏移是8-i。
我们可以执行相同的技术在PTL2对页表项去随机化，但是现在我们需要增加2MB观察PTL2，这样能达到和每次增加4KB的地址相同效果。
作为示例，图5示出了当我们改变PTL1处的页表项的缓存行时AnC观察到的示例MMU活动。
将PTL3和PTL4去随机化：如我们在第三章E节中讨论的，为了使PTL3去随机化，我们在我们的2GB分配内的虚拟地址空间中进行一个的8GB交叉，用来对PTL4去随机化，我们需要在我们分配的空间内进行一个4TB虚拟地址空间交叉。我们依赖于第六节讨论的内存分配器在浏览器中的行为，以确保我们的（许多）分配之一满足这个属性。但是假设我们在PTL3或PTL4改变了缓存行，则我们希望检测和去随机化相对的级别。
注意，在PTL4处交叉的缓存行将不可避免地导致高速缓存行在PTL3处交叉。
记住PTL3上的每个页表项都覆盖1GB的虚拟内存。
因此，如果在PTL3处的缓存行交叉在我们的2GB分配空间内发生，则当交叉正好在缓冲区的中间时，我们的分配可以覆盖两个或三个PTL3页表项。
因为完全在中间的交叉是不可能的，我们考虑具有三个页表项的情况。 三个页表项中的两个或一个在新的缓存行中。
通过在访问分配中的第一页，中间页和最后一页时观察PTL3缓存行，我们可以很容易地区分这两种情况，并完全去随机化PTL3。
只有在PTL3处的缓存行在其相应页表页中的最后时隙中时才发生在PTL4处缓存行交叉。
通过执行类似的技术（即，访问分配中的第一和最后一页），如果观察到页表项缓存行PTE2从最后一个时隙改变到第一时隙，并且另一个页表项缓存行PTE1向前移动一个时隙，
可以结束PTL4交叉并且独特地将PTE2鉴定为PTL3处的页表项并且将PTE1鉴定为PTL4处的页表项。
### F.解决ASLR
我们创建了一个简单的求解器，以便对可能的解决方案进行排名，因为我们在2GB分配空间中搜索不同的页面。
我们的求解器为我们的分配缓冲区的第一页的每个页表级假定512个可能的页表项，并且在每个页表级独立于其他级别对解决方案进行排名。
当我们使用我们在第五章E1节和第五章E2节中描述的方法在缓冲区中探索更多页面时，我们的求解程序在其中一个解决方案中获得显着的置信度，或者放弃并开始一个新的2GB分配。
如果在这些页表级存在缓存行交叉，则解决方案会始终对PTL1和PTL2以及PTL3和PTL4进行去随机化。
### G.驱逐页表缓存
如第三章B节所述，一些处理器可以将针对不同页表级的翻译结果缓存在其TLB中。 AnC需要驱逐这些缓存以便观察来自所有页表级的MMU信号。
这很简单：我们可以访问一个大于这些缓存大小的缓冲区作为TLB和LLC驱逐的一部分。
例如，Skylake i7-6700K内核可以缓存32个项用于PTL2查找。 假设我们探测在页表页的第i个高速缓存行中是否存在页表活动，访问0 +
i×64,2MB + 1×64,4MB + i×64的64MB（即，32×2MB） 64，...，62MB + i×64将驱逐PTL2页表缓存。
虽然我们需要实现这种机制并本地观察所有页表级的信号，我们注意到由于JavaScript运行活动，这些页表缓存在我们的探测期间会被自然驱逐。
### H.处理噪声
实现旁信道攻击的主要问题是噪声。 我们部署了许多对策，以减少噪声。 我们在这里来介绍一下：
随机探测：为了避免硬件预取器引起的错误，我们（仍然）需要探索的可能剩余偏移量中随机选择t（我们驱逐的页偏移量）。这种随机选择也有助于均匀由系统事件引起的局部噪声。
每个偏移量多次采样：为了增加探测的可靠性，我们对每个偏移量进行多次采样（“回合”），并考虑用于决定缓存与存储器访问的中值。
这个简单的策略大大降低了假阳性和假阴性。 对于大规模实验和可视化测量对其他求解参数的影响，请参见第七章C节
对于AnC攻击，假定是无影响的，因为攻击者总是可以使用新的分配重试，我们将在下一节中讨论。
我们使用Chrome和Firefox在第七节中评估AnC攻击的成功率，误报和假否定。
### I.讨论
我们实现了两个版本的AnC。 在C中的本机实现，以便研究不具有JavaScript干扰和JavaScriptonly实现的MMU页表遍历活动的行为。
我们将本机版本移植到不同的体系结构和Microsoft Windows 10，以显示第七章D节中介绍的AnC的通用性。
我们的移植努力围绕着实现本地版本的SMC（第四章B节）来准确区分ARM上的缓存和非缓存内存访问，ARM只提供粗粒度（0.5μs）定时机制和处理不同的页表结构。
我们的本地实现代码共1283行。
我们的JavaScript专门在Chrome和Firefox浏览器上工作，目的是展示在第七章中的各种实验中提出的AnC攻击对操作系统的影响。我们需要使用asm.js
调整JavaScript实现，来使测量更快，更可预测。这限制了我们的分配大小最大是2GB。 我们的JavaScript实现用了2370行代码。
* * *