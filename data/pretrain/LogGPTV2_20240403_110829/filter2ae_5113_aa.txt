## 基础知识
### Yaml简介
YAML是一种直观的能够被电脑识别的的数据序列化格式，容易被人类阅读，并且容易和脚本语言交互，YAML类似于XML，但是语法比XML简单得多，对于转化成数组或可以hash的数据时是很简单有效的。
### Yaml语法
#### 基本规则
  * 大小写敏感
  * 使用缩进表示层级关系
  * 缩进时不允许使用Tab，只允许使用空格
  * 缩进的空格数目不重要，只要相同层级的元素左对齐即可
  * '#'表示注释，从它开始到行尾都被忽略
#### yaml转字典
yaml中支持映射或字典的表示，如下：
    # 下面格式读到Python里会是个dict
    name: Al1ex
    age: 0
    job: Tester
输出结果：
    {'name': 'Al1ex', 'age': 0, 'job': 'Tester'}
#### yaml转列表
yaml中支持列表或数组的表示，如下：
    # 下面格式读到Python里会是个list
    - Al1ex
    - 0
    - Tester
输出结果：
    ['Al1ex', 0, 'Tester']
#### 复合结构类型
字典和列表可以复合起来使用，如下：
    # 下面格式读到Python里是个list里包含dict
    - name: Al1ex
      age: 0
      job: Tester
    - name: James
      age: 30
输出结果：
    [{'name': 'Al1ex', 'age': 0, 'job': 'Tester'}, {'name': 'James', 'age': 30}]
#### 基本类型使用
yaml中有以下基本类型：
  * 字符串
  * 整型
  * 浮点型
  * 布尔型
  * null
  * 时间
  * 日期
我们写个例子来看下：
    # 这个例子输出一个字典，其中value包括所有基本类型
    str: "Hello World!"
    int: 110
    float: 3.141
    boolean: true  # or false
    None: null  # 也可以用 ~ 号来表示 null
    time: 2020-06-20t11:43:30.20+08:00  # ISO8601，写法百度
    date: 2020-06-20  # 同样ISO8601
输出结果：
    {'str': 'Hello World!', 'int': 110, 'float': 3.141, 'boolean': True, 'None': None,'time':datetime.datetime(2020, 6, 20, 0, 28, 20, 44000), 'date': datetime.date(2020, 6, 20)}
#### 引用的使用
& 和 * 用于引用示例：
    name: &name Al1ex
    tester: *name
这个相当于以下脚本：
    name: Al1ex
    tester: Al1ex
输出结果：
    {'name': 'Al1ex', 'tester': 'Al1ex'}
#### 强制类型转换
yaml是可以进行强制转换的，用 !! 实现，如下
    str: !!str 3.14
    int: !!int "123"
输出结果：
    {'int': 123, 'str': '3.14'}
明显能够看出字符串类型的123被强转成了int类型，而float型的3.14则被强转成了str型
#### 分段规则使用
在同一个yaml文件中，可以用 — 来分段，这样可以将多个文档写在一个文件中
    ---    name: James
    age: 20
    ---    name: Lily
    age: 19
### 构造/表示/解析器
#### yaml.YAMLObject
yaml.YAMLObject用元类来注册一个构造器（也就是代码里的init()
方法），让你把yaml节点转为Python对象实例，用表示器（也就是代码里的 repr() 函数）来让你把Python对象转为yaml节点，看代码：
    import yaml
    class Person(yaml.YAMLObject):
        yaml_tag = '!person'
        def __init__(self, name, age):
            self.name = name
            self.age = age
        def __repr__(self):
            return '%s(name=%s, age=%d)' % (self.__class__.__name__, self.name, self.age)
    james = Person('James', 20)
    print (yaml.dump(james))  # Python对象实例转为yaml
    lily = yaml.load('!person {name: Lily, age: 19}')
    print (lily)  # yaml转为Python对象实例
输出结果：
    !person {age: 20, name: James}
    Person(name=Lily, age=19)
#### add_constructor/add_representer
你可能在使用过程中并不想通过上面这种元类的方式，而是想定义正常的类，那么，可以用这两种方法：
    import yaml
    class Person(object):
        def __init__(self, name, age):
            self.name = name
            self.age = age
        def __repr__(self):
            return 'Person(%s, %s)' % (self.name, self.age)
    james = Person('James', 20)
    print (yaml.dump(james))  # 没加表示器之前
    def person_repr(dumper, data):
        return dumper.represent_mapping(u'!person', {"name": data.name, "age": data.age})  # mapping表示器，用于dict
    yaml.add_representer(Person, person_repr)  # 用add_representer方法为对象添加表示器
    print (yaml.dump(james))  # 加了表示器之后
    def person_cons(loader, node):
        value = loader.construct_mapping(node)  # mapping构造器，用于dict
        name = value['name']
        age = value['age']
        return Person(name, age)
    yaml.add_constructor(u'!person', person_cons)  # 用add_constructor方法为指定yaml标签添加构造器
    lily = yaml.load('!person {name: Lily, age: 19}')
    print (lily)
输出结果：
    !!python/object:__main__.Person {age: 20, name: James}
    !person {age: 20, name: James}
    Person(Lily, 19)
第一行是没加表示器之前，中间那行是加了表示器之后，变成了规范的格式，下面添加了构造器，能够把 !person 标签转化为Person对象~  
yaml是一种很清晰、简洁的格式，跟Python非常合拍，非常容易操作，我们在搭建自动化测试框架的时候，可以采用yaml作为配置文件，或者用例文件，下面给出一个用例的示例：
    # Test using included Django test app
    # First install python-django
    # Then launch the app in another terminal by doing
    #   cd testapp
    #   python manage.py testserver test_data.json
    # Once launched, tests can be executed via:
    #   python resttest.py http://localhost:8000 miniapp-test.yaml
    ---    - config:
        - testset: "Tests using test app"
    - test: # create entity
        - name: "Basic get"
        - url: "/api/person/"
    - test: # create entity
        - name: "Get single person"
        - url: "/api/person/1/"
    - test: # create entity
        - name: "Get single person"
        - url: "/api/person/1/"
        - method: 'DELETE'
    - test: # create entity by PUT
        - name: "Create/update person"
        - url: "/api/person/1/"
        - method: "PUT"
        - body: '{"first_name": "Gaius","id": 1,"last_name": "Baltar","login": "gbaltar"}'
        - headers: {'Content-Type': 'application/json'}
    - test: # create entity by POST
        - name: "Create person"
        - url: "/api/person/"
        - method: "POST"
        - body: '{"first_name": "Willim","last_name": "Adama","login": "theadmiral"}'
        - headers: {Content-Type: application/json}
### PyYaml的基本使用
#### load():返回一个对象
我们先创建一个yml文件，config.yml:
    name: Tom Smith
    age: 37
    spouse:
        name: Jane Smith
        age: 25
    children:
     - name: Jimmy Smith