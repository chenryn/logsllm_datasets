AppleWebKit/603.1.30 (KHTML, like Gecko)\
Mobile/14E304 [FBAN/FBIOS;FBAV/91.0.0.41.73;\
FBBV/57050710;FBDV/iPhone8,1;FBMD/iPhone;\
FBSN/iOS;FBSV/10.3.1;FBSS/2;FBCR/Verizon;\
FBID/phone;FBLC/en_US;FBOP/5;FBRV/0]
This string has over 250 characters and is rich with information. Its
internal structure is likewise complex: to delimit internal fields, the
string relies on underscores, commas, dots, semicolons, whitespace,
slashes and pairs of brackets and parentheses. This complexity
implies that pattern-based categorization algorithms that attempt
to parse this string must also be complex. Finally, we note that
although this UA is very detailed, it is also very popular. Thus, long
and detailed user agents do not equate to enhanced user identifia-
bility.
Next, we turn to the partitioning problem. An accurate parti-
tioning of the UA space must distinguish UAs that are close in edit
distance to each other. The issue can be illustrated using Microsoft
Edge’s user agent:
Mozilla/5.0 (Windows NT 10.0)\
AppleWebKit/537.36 (KHTML, like Gecko) \
Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136
This string agrees with Google Chrome’s user agent up to the suffix,
Edge/12.10136. Despite Edge and Chrome having distinct code-
bases and histories, they are surprisingly close to each other in the
user agent space.
This observation shows that ad-hoc rules are a necessary com-
ponent of UA categorization, which generally confounds validation
of the categorization process. More generally, the requirement for
ad-hoc rules implies that accurate partitioning is an intrinsically
complex task. As further evidence of this, we note that the internal
ruleset used by comScore is several thousand lines long. Publicly
visible evidence of this complexity can be found in various online
resources, e.g., see [2, 3, 5, 6].
Some portions of the UA string tend to be more diverse than
others, and these regions of diversity are evidence of structure. To
expose this structure, and to isolate features that exist in time, we
introduce a representation of the UA space that we call a character
entropy matrix. Two examples of this representation appear in
Figure 1. Each row of the character entropy matrix summarizes
one day of data. Within each row, the jth column displays the
empirical entropy of the jth character of UAs observed on that day.
For an intuitive sense of what is being represented by the matrix,
the first several characters of many user agents are either Mozilla
or Dalvik. Thus, the first few columns of the character entropy
matrix have low entropy as indicated by the red stripe along the
extreme left sides of each image. More generally, this representation
can identify regions within any population of UAs that are either
unusually diverse or uniform. The utility of this matrix is that it
effectively quantifies diversity in both space (i.e. by character) and
in time with a simple and comprehensible algorithm.
The dynamic nature of the UA space means that generating
Internet traffic with a realistic profile of UA’s is challenging. As was
shown in [25], the Athena botnet administrative portal provides
functionality that allows the controller to customize the distribution
of user agents used by the botnet. A feature common to traffic that
is generated by malware is that it has a distribution of UAs that is
Figure 1: The character entropy matrices are displayed for
Android and iOS UAs. The data shown spans 16 months, Jan-
uary 1 2016 corresponds to row 0. The vertical strip of low
entropy on the left of each image is the result of many UAs
starting with either Mozilla or Dalvik. For a sense of scale,
this image summarizes several trillion web requests.
skewed towards either out-dated browsers or has subfields within
the user agent list populated with a limited set of strings. However,
in the next section we show that outdated browser versions and
inconsistent information within the UA string are, in fact, common
and benign features of traffic. Consequently, detection of malicious
activity cannot rely entirely on these attributes.
4 DETAILED RESULTS
In this section, we present details of our UA analysis, including char-
acteristics over time, prevalence of different strings, and analysis
of anomalous UAs.
4.1 Analysis of the UA distribution in time
The population of UAs changes over time in two distinct ways. First,
the continual introduction of new devices, browsers, and version
updates implies that the set of UAs increases over time. Meanwhile,
old devices and obsolete browsers fall into disuse and eventually
vanish from the active population. We quantify this churn over
time with the following analysis. We cast the top 10k UAs seen
each Wednesday as a set3. We then measure the Jaccard similarity
of sets belonging to consecutive Wednesdays to create a time series.
Figure 2 shows the resulting time series that spans 70 consecutive
weeks starting January 2016. We evaluate the total variation of the
time series to quantify the stability of the Jaccard similarity metric.
The total variation of the 10 most prevalent UAs is large while
the total variation of the top 1000 is a local minimum. This suggests
the following heuristic: from week-to-week, the top 1000 UAs have
Jaccard similarity of about 0.7. The set of top 10 and 100 UAs varies
more widely from week to week, which can be explained as follows.
Each week, several spots among the top 10 UAs are occupied by
variants of the Chrome UA. Chrome has a frequent update cycle
and its default configuration aggressively updates itself. Whenever
a new version of Chrome is released, the spots occupied by Chrome
3Traffic volume during a typical week is maximal on Wednesdays.
IMC ’17, November 1–3, 2017, London, United Kingdom
Jeff Kline, Aaron Cahn, Paul Barford, and Joel Sommers
at the top are replaced with newer versions, and the top browsers
fall out of favor.
Android devices generate a large fraction of Internet traffic and
the Android space is very diverse. Yet the Android space does
not contribute much to the overall churn of the top 100 UAs. Our
explanation is that since the Android space is so fragmented, few
individual Android UAs accumulate enough volume to be among
the top 100 yet they occupy many positions in higher aggregates.
Figure 2: We quantify the churn of the UA population by
casting the top UAs seen each Wednesday as a set and mea-
suring the Jaccard similarity of consecutive Wednesdays.
The resulting timeseries for the top 10, 100, 1k and 10k UAs
spanning 70 weeks starting January 2016 are shown above.
The total variation of these timeseries has a local minimum
at 1000 which supports the heuristic that week-over-week
Jaccard similarity of the top 1000 UAs is about 0.7.
The second way that the UA distribution changes over time is
due to the fact that user habits throughout the day and week are
not uniform. Figure 3 is based on publisher traffic and it splits the
traffic into several broad categories. The weekly view (top plot)
shows data acquired in Sept 2015 while the hourly view (bottom
plot) spans 48 hours starting on Wednesday May 10, 2017. The
proportion of iPhone traffic varies dramatically, rising from 7% on
Monday to 27% on Sunday. The hourly time series shows iPhone
traffic doubling from about 7% at 8:00UTC to 14% at 23:00UTC. This
supports the notion that evening and weekend browsing habits
differ from mid-week workday habits. It also suggests that one’s
susceptibility to being identified based solely on browser attributes
depends on the time-of-day and day-of-week.
We find that an accurate view of the distribution of UAs is not a
simple function of scale or reach but also a function of the role one
has on the Internet. As mentioned earlier, comScore measures traf-
fic that is associated with publishers, advertisers and ad networks.
Each data type provides a distinct perspective on the Internet. Col-
lectively, each group sees a broad swath of Internet traffic with
typical daily volume between 5B and 20B records.
Using this set of data, we try to answer the question, What
was the most common browser? To simplify the results, we limit
our focus to Microsoft Edge’s rank by volume within each class.
Microsoft Edge is consistently among the 10 most popular browser
versions and, in contrast to Chrome and Firefox, its version history
Figure 3: The browser distribution depends on day and time.
This is visible in the above time series that show data span-
ning one week in Sept 2015 (top) and the 48-hours starting on
May 10, 2017 (bottom). The fraction of iPhone traffic on the
weekend shown was nearly four times larger than it was on
weekdays. The hourly view shows that iPhone traffic varied
between 9% (May 10 08:00UTC) and 18% (May 11 02:00UTC).
does not fragment over version updates. The data for this report
was observed on May 10, 2017.
Microsoft Edge was the the top-ranked UA within ad campaign
data with over 300M records. Within Publisher data, Edge had
the 6th largest volume with 400M records while within Ad Net
data, Edge ranks 8th overall with 80M records. This shows that
the UA distribution is not stable across data type—even when the
measurements have both scale and reach.
To elaborate on this point, a web server that delivers billions
of advertisements may be serving mostly to mobile apps. Social
media companies such as Facebook and Twitter have dedicated apps
that influence users’ behavior. Ad block usage may correlate with
browser choice. Even comparisons across similar publishers can be
skewed by current events, content type and audience demographics.
To summarize, answering a straightforward question about browser
dominance does not have a straightforward answer. Additionally,
this question cannot be adequately addressed simply by aggregating
over more data having wider reach.
4.2 Analysis of UA prevalence
A current list of the most prevalent UAs are shown in Table 1.
Broadly speaking, this list is stable over time and includes Mi-
crosoft Edge, Microsoft Internet Explorer, Google Chrome, iPhone
Safari and Firefox. Notably absent from this list is Android, despite
Android devices having a larger market share than iPhone. In fact,
the top Android-based UA ranks 48th overall. The cause of this
discrepancy is fragmentation of the Android market: each manufac-
turer’s device generates a distinct user agent. There is also a great
amount of churn in this list: the top Chrome UA from early April
On the Structure and Characteristics of User Agent String
IMC ’17, November 1–3, 2017, London, United Kingdom
ranks 74th in mid May. This is due to aggressive version updates
for that browser.
Every UA categorization method faces the problem of describing
enough of the UA space so that it applies to an acceptably large
fraction of Internet traffic. We call this the coverage problem. The
challenge that this presents is visible in Figure 4. This figure is
based on web log data acquired on the second Wednesdays of
Feb, Mar, Apr and May 2017. For each of these Wednesdays, every
UA is plotted against its total daily volume and the set of UAs
is then ordered by volume. The resulting line closely follows a
power-law rule, which is a signature of fat-tailed (i.e. rare-is-typical)
populations.
Figure 4: The daily distribution of user agents is well approx-
imated as a power law distribution. This figure displays four
such examples, based on on data acquired during the second
Wednesday of Feb, Mar, Apr and May 2017. The top 10 user
agents comprise about 26% of total volume. The remainder
consists of O(1M) user agents and this portion contributes
about 74% of total daily volume. This illustrates the covering
problem that is faced by user agent categorization processes.
For each of these days, the top 10 user agents comprised ap-
proximately 26% of total daily volume while the remaining set of
user agents (a set of size O(1M)) generates the other 74% of traf-
fic. Effective coverage of the space means that one has accurate
descriptions for examples within the long tail. Since the number
of distinct examples within the tail is large, accurate and complete
categorization is a complex endeavor.
As already mentioned, one source of this diversity includes
browser version updates. Another source of UA diversity comes
from fragmentation within the mobile sphere. A third source is the
combination of mobile device names with in-app browsers. On May
10, over 1.5M Android UAs that had more than 100 records issued
requests to comScore’s servers. Of these, about 500K appear to be
related to the Facebook app.
To summarize, validation of UA categorization methods is too
large a task for manual review to be effective. Also, there does not
appear to be a natural threshold below which low-volume UA’s
may be disregarded.
4.3 Analysis of anomalous UA’s
We now report on two instances where the UA is configured to in-
accurately represent the web browser. Each instance was associated
with over O(100M) requests per day.
The first concerns a feature of Microsoft’s browsers called the
Compatibility View function [4]. This function is informed by an
XML-formatted file maintained by Microsoft that essentially con-
tains domain-UA pairs. The purpose of this file is to alter the behav-