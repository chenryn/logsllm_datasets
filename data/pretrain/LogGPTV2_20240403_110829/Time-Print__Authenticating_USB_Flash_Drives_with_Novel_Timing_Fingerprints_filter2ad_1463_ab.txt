to particular brands and models (e.g., SanDisk Cruzer Blade).
Thus, a USB ﬁngerprinting mechanism must be integrated
into the host to accept/classify approved USB devices and
reject other devices. For a speciﬁc air-gapped computer system,
system administrators can train ﬁngerprints for all approved
devices. Also, they can pre-collect multiple devices from
popular brands or models to augment the device authentication
system with examples of unapproved drives.
With these settings in mind, we envision three typical
scenarios as shown in Figure 1, in which Time-Print offers
enhanced security beneﬁts for device authentication. Note that
Time-Print is designed to augment current USB security, and
it can greatly assist existing USB security mechanisms such
as GoodUSB [58] and USBFilter [59].
Scenario ❶: Attackers have no knowledge of the approved
USB devices, and thus a random USB device could be
connected to the target host. Such a random USB device likely
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:15 UTC from IEEE Xplore.  Restrictions apply. 
1003
does not belong to one of the approved device models. Time-
Print should thus reject any device whose model is not approved.
In this minimal knowledge scenario, administrators can also
prevent system infection from irresponsible employees that
plug in non-approved devices (dropped devices) or computers
in an open environment (reception computers).
Scenario ❷: Attackers (e.g., former employees who are
aware of the security measure) know the brand and model of
the approved USB devices and purchase one with the same
brand and model. Time-Print should be able to reject unseen
devices of the same brand/model.
Scenario ❸: Auditing user authentication. A system admin-
istrator should have the ability to identify speciﬁc devices that
were issued to employees. For approved devices, different
authorization levels might be assigned. In this case,
the
system administrator needs to audit which speciﬁc devices are
connected to the target system to trace employee activities and
detect data exﬁltration attacks. Therefore, Time-Print should
be able to classify all approved devices with high conﬁdence.
Attacker Capabilities. We examine Time-Print against
attackers at multiple levels. A weak attacker may simply
attempt to plug a device into the victim system with little
knowledge (e.g., Scenario 1). A stronger attacker may know
the device model allowed at the victim side and attempt to
connect a device of the same model (e.g., Scenario 2/3). The
strongest attacker may be able to steal a legitimate device and
attempt to replicate the physical ﬁngerprint with an FPGA based
system. While the FPGA based system may attempt to emulate
legitimate ﬁrmware, the ﬁrmware for current USB ﬂash drives
is a closely guarded and proprietary secret. We do not consider
a case in which an attacker is able to signiﬁcantly modify the
ﬁrmware of a (stolen) legitimate device. In addition, we also
must exclude authorized users who attempt to maliciously
harm their own computing systems. This is a reasonable
assumption as authorized users who have privileges to access
any system resources likely have little need for mounting such
a complicated USB attack.
Defender Preparations. To use Time-Print, defenders (e.g.,
system administrators) should ﬁrst have a security policy for
limiting the employee usage of USB devices to speciﬁc models.
Then, they need to gather ﬁngerprint samples for their legitimate
devices to enroll them into Time-Print beforehand.
B. USB 2.0 Versus 3.0
The USB standard consists of software and driver speciﬁ-
cations that control the communication between two devices
and has undergone several revisions. One major revision of
the protocol, USB 2.0 [17], enables high data speeds (e.g., the
High-Speed speciﬁcation of 480 Mbit/s), and adds support for
diverse peripheral devices including cameras, network adapters,
Bluetooth, etc. The later introduced USB 3.0 [25] standard
offers an increased 5 Gbit/s data rate and additional support
for new types of devices. Also, USB 3.0 devices are backward
compatible with USB 2.0 ports, but at 2.0’s speed. USB 3.1 [26]
further increases the data transfer rate to 10 Gbit/s with a
modiﬁed power speciﬁcation that increases the maximum power
A I R - G A P P ED COM
P
U
T
E
R
Insider Devices
 (Brand X)
Diﬃculty
❸
❷
❶
Unauthorized Devices
 (Brand X)
Unauthorized Devices
 (Other Brands)
Fig. 1: Three security scenarios of USB ﬁngerprinting for
device authentication.
delivery to 100W [3]. In this paper, we focus on USB devices
with standards 2.0, 3.0, and 3.1.
C. USB Mass Storage Devices and Flash Storage Controllers
USB mass storage devices are a form of removable storage
media which allow a user to transfer ﬁles between a host and
the device. As a recognized device class [21], mass storage
devices follow a well-deﬁned process when connected to a host.
The host queries the device to discover its class code. Upon
determining that it is a mass storage device, the host launches
an instance (on Linux host systems) of the usb-storage
driver. The driver scans the device, determining its ﬁle system,
and launches the appropriate ﬁle system drivers.
To enable the communication between a device and the host,
each USB mass storage device contains a microprocessor(s)
that handles communications and manages the ﬂash storage of
the device. Flash storage is generally made up of many blocks.
As ﬂash has a limited write endurance and is usually designed
in such a way that individual bits cannot be selectively cleared,
the ﬂash controller typically conducts a series of operations to
modify the stored data in the ﬂash medium. It ﬁrst locates a new
unused block and copies the data from the old block to the new
block while incorporating any data changes. The ﬂash controller
then marks the old block as dirty, and eventually reclaims
these dirty blocks as part of the garbage collection process.
The controller (as the ‘ﬂash translation layer’) maintains the
mapping information between logical addresses (addresses used
by the host system to access ﬁles) and the physical addresses
of the actual pages, and the frequent remapping of blocks is an
invisible process to the host system. Thus, the time required
for the USB mass storage device to access large chunks of
data is potentially unique and suitable to ﬁngerprint the device.
D. USB Security
With its rapid adoption, USB has also become a popular
target for attackers. Previous studies have shown that users
are likely to plug in devices that they ﬁnd on the ground [29],
[53], [61], especially those modiﬁed to look ‘ofﬁcial’ (e.g.,
contain a government logo) [51]. Meanwhile, researchers have
also proposed numerous defenses, ranging from ﬁrewall and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:15 UTC from IEEE Xplore.  Restrictions apply. 
1004
permissions systems [4], [58], [59] to device ﬁngerprinting [27].
Many of these systems rely upon the reported device descriptors
(e.g. product/vendor ID, serial number) [1], [8] which can be
modiﬁed by a skilled attacker [23], [30]. Magneto [27] attempts
to identify USB devices via electromagnetic ﬁngerprinting
of the microcontroller within the USB mass storage device,
which is hard for attackers to manipulate. However,
the
system required expensive, bulky, and highly sensitive spectrum
analyzers and EM probes to identify devices. Instead, in this
work, we uncover a new timing channel within USB mass
storage devices and require no extra equipment to uniquely
identify devices.
III. TIMING SIDE-CHANNEL EXPLORATION
USB mass storage devices are sophisticated systems that
contain at least one microprocessor (i.e., ﬂash storage con-
troller), some form of embedded ﬁrmware, and one or more
ﬂash memory devices. The microprocessor(s) is utilized to
maintain the ﬂash translation layer and the ﬂash endurance
(via wear leveling) and to communicate with a host computer.
Whenever the USB mass storage device connects to the host,
a series of transactions provide the host with information
about its size, capabilities, name, partition table, etc. For
those transactions, individual physical devices may demonstrate
small variations (e.g., timing variations) within a tolerance
boundary that does not affect normal operations. One common
method for observing these variations is through unintentional
electromagnetic emissions [14], [15], [16], [18], [27].
While prior works have demonstrated that the USB device
enumeration process can be used to identify individual host
computers / OSes [5], [18], [37], we attempt to explore a timing
channel to accurately identify USB devices. In particular, this
work searches for observable timing differences between the
interactions of a mass storage device and its host. If the ﬂash
controller of one device can respond faster or slower than that
of a different device, it is possible that this variation can be
used to identify a device. Furthermore, if a large chunk of data
is requested from the device, the ﬂash translation layer may
access multiple locations to return all of the data at once. The
time taken for this action (e.g., consult translation table, access
one or multiple ﬂash blocks within the device, coalesce data,
respond to host) may also create observable timing differences.
A. Motivation of Time-Print
Previous works [5], [18], [37] have demonstrated that the
USB handshake and enumeration process can leak information
about the host, including the host’s operating system (different
command sequence) or the host itself (timing differences
between packets). We ﬁrst attempt to check whether such a
handshake and enumeration process can also generate a stable
ﬁngerprint for USB devices.
Within the Linux operating system, this handshake entails the
loading of a series of drivers, each providing more specialized
functionality to the USB device. Once the device is initially
connected to the host system, the USB core driver accesses the
device and requests its descriptors. The device responds with
its descriptors and identiﬁes its class (e.g., human interface
device, mass storage, etc.) A device object is created, and the
speciﬁc class driver is then instantiated. In the case of a USB
mass storage device, the USB storage driver is initiated, and the
USB storage driver probes the device via its communication
interface, the Small Computer System Interface (SCSI). The
host utilizes SCSI commands to probe the ﬁlesystem, the
appropriate ﬁlesystem driver is then loaded depending on
format (e.g. FAT, exFAT, NTFS, ext4, etc.), and the drive
is ﬁnally mounted and enumerated. With the drive handshake
completed, the drive remains idle until the user opens the drive
to access it.
We utilize the usbmon [67] driver within Linux and the
Wireshark [56] program to capture and analyze the raw
packet transmissions during the device enumeration and mount
process. We ﬁnd that the behaviors of packet transmissions
between similar devices do not vary signiﬁcantly enough to
create a unique proﬁle. In addition, the ﬁle contents of the same
device greatly inﬂuence the behaviors of the device enumeration
process, such as addresses, sizes, and the number of packets.
Therefore, the device enumeration process cannot be leveraged
to generate a reliable ﬁngerprint.
B. Creation of a Reliable Fingerprint
To remedy this issue, we seek a new approach for creating a
reliable ﬁngerprint. While the timing of USB setup packets does
not seem to provide ﬁngerprintable information, the interfacing
with the ﬂash controller can. Each time the host system requests
data from a USB device, the ﬂash controller must access the
ﬂash translation layer, determining and accessing the location of
the block (or blocks if the ﬁles are fragmented across multiple
physical locations). It then coalesces those areas into USB
packets and sends them to the host. Our intuition is that this
access time varies based upon the locations of the blocks on
a device as well as the size of a read. To examine whether
this assumption is valid, we issue a known series of read
requests of different sizes and locations via SCSI commands
on the device. By recording the timestamp for each read
action, we attempt to construct a statistical ﬁngerprint for the
timing characteristics of each device. We utilize the sg_read
utility [19] to achieve low-level control of the read commands.
Each read sets the Direct IO (DIO), Disable Page Out (DPO),
and Force Unit Access (FUA) ﬂags of the sg_read utility to
‘1’. This combination of ﬂags forces the system to access the
USB drive with each read and disallows the operating system
from utilizing cached read data. Especially, the DPO ﬂag forces
the USB device to fetch the read from the physical media and
keeps the ﬂash controller from responding with cached reads.
This ﬂag combination is necessary to ensure that each read
physically probes the speciﬁed ﬂash blocks (allowing for true
timing values to be gathered), instead of simply reading cached
data.
C. Preliminary Classiﬁcation
To investigate whether a timing ﬁngerprint might be possible,
we conduct preliminary experiments by gathering timing
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:15 UTC from IEEE Xplore.  Restrictions apply. 
1005
Fig. 2: Histograms of read timings for 16 different USB mass storage drives. Each plot contains 20 different samples.
Host
USB Device
shaped distributions. Thus, the preliminary results motivate us
to develop a timing-based device authentication mechanism.
Timing 
Acquisition
Preprocessing
Extra Read
SCSI 
Commands
      Fingerprints
Identiﬁcation
Time-Print
Physical Blocks
Fig. 3: The design of Time-Print.
IV. TIME-PRINT DESIGN
In this section, we detail the design and implementation
of Time-Print and describe how Time-Print generates device
ﬁngerprints. In general, Time-Print extends the USB driver to
generate a number of extra reads on randomly chosen blocks
on USB devices via the SCSI commands (as shown in Figure 3)
and then measures the timing information of these read opera-
tions. The process of Time-Print consists of four steps, namely,
(1) performing precise timing measurements, (2) exercising the
USB ﬂash drive to generate a timing proﬁle, (3) preprocessing
the timing proﬁle, and (4) conducting classiﬁcation based on
the timing proﬁle for device acceptance/rejection.
readings from 16 different devices: 4 devices for each of
4 different models (i.e., a generic device found on Amazon,
SanDisk Cruzer Blade, SanDisk Ultra, and Samsung Bar Plus).
A histogram of these readings is presented in Figure 2. Each
graph contains the histograms of 20 separate readings. The high
overlap between readings implies that the timing measurement
is stable from reading to reading, and thus may be a good
candidate for ﬁngerprinting. Visual inspection demonstrates
that different brand/model devices exhibit different timing
characteristics, indicating that read timings will enable us to
differentiate devices with different models. Further inspection
of the variations among devices of the same model shows that
some clear differences still exist. For example, SanDisk Blade
1 and SanDisk Blade 3 in the ﬁrst row demonstrate differently
A. Performing Precise Timing Measurements
As shown in Figure 3, Time-Print enables the ﬁngerprinting
technique within the driver using SCSI commands. Such a
design allows the ﬁngerprint data to be acquired before the
device is fully connected to the host system (thus allowing for
rejection if the device is deemed unrecognized). Also, the driver
has visibility into every packet exchanged between the device
and the host with minimal delay, which reduces the overhead
and latency for the authentication process while simultaneously
increasing the precision of the timing measurements.
The USB mass storage driver and the USB SCSI command
sequence maintain a complex series of objects within the Linux
operating system to control the command and data transactions
communicated between the host and peripherals. Every data
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:15 UTC from IEEE Xplore.  Restrictions apply. 
1006
204060801000.00.10.20.30.4FrequencySanDisk Blade #020406080100SanDisk Blade #120406080100SanDisk Blade #220406080100SanDisk Blade #3204060801000.000.050.100.150.20FrequencyGeneric #020406080100Generic #120406080100Generic #220406080100Generic #3204060801000.00.20.4FrequencySanDisk Ultra #020406080100SanDisk Ultra #120406080100SanDisk Ultra #220406080100SanDisk Ultra #320406080100Histogram Bin0.00.10.20.3FrequencySamsung Bar Plus #020406080100Histogram BinSamsung Bar Plus #120406080100Histogram BinSamsung Bar Plus #220406080100Histogram BinSamsung Bar Plus #3Host
Peripheral
B. Exercising the USB Flash Drive
Timing
Information
Command
D a t a
  S t a t u s
T r a n s f e r
Fig. 4: A USB SCSI command sequence.
Time
read consists of three parts, as visually presented in Figure 4:
(1) the host issues a read command to the device, which
speciﬁes the size and location of the data to be read; (2) the
peripheral responds with the requested data; (3) the peripheral
responds with a status packet to indicate that the transfer is
either successful or unsuccessful.
Within the USB driver,
two different methods control
these three transactions. The usb_store_msg_common