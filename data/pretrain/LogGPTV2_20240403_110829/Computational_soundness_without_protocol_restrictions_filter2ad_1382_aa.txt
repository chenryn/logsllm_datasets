# Title: Computational Soundness without Protocol Restrictions

# Authors: 
- Michael Backes, Saarland University, Germany and MPI-SWS
- Ankit Malik, Department of Mathematics, IIT Delhi
- Dominique Unruh, University of Tartu, Estonia

## Abstract
The abstraction of cryptographic operations using term algebras, known as Dolev-Yao models, is fundamental to most tool-supported methods for verifying security protocols. Recent advancements have established computational soundness results, demonstrating that Dolev-Yao style models can be sound with respect to actual cryptographic realizations and security definitions. However, these results often come with various constraints on the set of permitted security protocols, such as restrictions on dishonestly generated keys and key cycles.

In this paper, we explore a different approach: we consider a symbolic abstraction for public-key encryption and identify two cryptographic definitions—PROG-KDM (programmable key-dependent message) security and MKE (malicious-key extractable) security—that are jointly sufficient for achieving computational soundness without imposing any assumptions on the protocols using this abstraction. Specifically, dishonestly generated keys obtained from the adversary can be sent, received, and used. These definitions can be met by existing cryptographic schemes in the random oracle model. This work presents the first computational soundness result for trace properties that holds for arbitrary protocols using this abstraction, and it is accessible to all existing tools for reasoning about Dolev-Yao models without further adaptations.

## Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network Protocols—Protocol Verification

## General Terms
Security, Theory, Verification

## Keywords
Computational soundness, sending keys, key-dependent messages

## 1. Introduction
Security protocol proofs are known to be error-prone and challenging due to the distributed nature of multiple interleaved protocol runs. Consequently, efforts to automate these proofs began soon after the development of the first protocols. From the outset, the actual cryptographic operations in such proofs were idealized into Dolev-Yao models, which simplify proof construction by abstracting away cryptographic details such as computational restrictions, probabilistic behavior, and error probabilities. The success of Dolev-Yao models in tool-supported security analysis stems from their conceptual simplicity, allowing for a small set of explicitly permitted rules to be combined arbitrarily without additional constraints.

Recent progress has been made in establishing computational soundness results, proving that Dolev-Yao style models can be sound with respect to actual cryptographic realizations and security definitions. However, these results often impose various constraints on the set of permitted protocols, such as avoiding key cycles and ensuring that all keys used within the protocol are generated correctly. These constraints arise because the respective cryptographic security definitions did not adequately capture these cases, leading to the need for symbolic abstractions to reflect cryptographic features and idiosyncrasies, and requiring adaptations of existing verification tools.

### Our Contribution
In this paper, we take a different approach: we consider an unconstrained symbolic abstraction for public-key encryption and strive to avoid assumptions on the protocols using this abstraction. We permit the sending and receiving of potentially dishonestly generated secret keys. Based on the CoSP framework, our result is limited to trace properties but can be extended to equivalence properties.

To achieve this, we identify the standard and more sophisticated properties that a cryptographic scheme for public-key encryption must satisfy to serve as a computationally sound implementation of an unrestricted Dolev-Yao model. This leads to the novel definitions of PROG-KDM (programmable key-dependent message) secure and MKE (malicious-key extractable) secure encryption schemes. Our main result shows that public-key encryption schemes satisfying PROG-KDM and MKE security constitute computationally sound implementations of unrestricted Dolev-Yao models for public-key encryption. These definitions can be met by existing public-key encryption schemes, with some additional conditions (e.g., extracting a public key from a ciphertext) that can be easily enforced by suitable tagging.

Our computational soundness result encompasses protocols that allow honest users to send, receive, and use dishonestly generated keys without imposing further assumptions on the symbolic abstraction. This solves a previously open problem in the cryptographic soundness literature. In summary, we present the first computational soundness result that avoids imposing constraints on the protocols using this abstraction, making it accessible to all existing tools for reasoning about Dolev-Yao models without further adaptations.

### Related Work
Backes, Pfitzmann, and Scedrov [9] provide a computational soundness result allowing key-dependent messages and the sending of secret keys, but they impose the condition that no key revealed to the adversary is ever used for encryption. Adão, Bana, Herzog, and Scedrov [3] give a computational soundness result allowing key-dependent messages, but only for passive adversaries, and do not support adaptive revealing of secret keys. Comon-Lundh et al. [20] also achieved a computational soundness result for dishonest keys, but they proposed an extension of the symbolic model while keeping standard security assumptions (IND-CPA and IND-CTXT). Mazaré and Warinschi [29] provide a computational soundness result allowing for adaptive revealing of secret keys (for symmetric encryption), but they disallow key-dependent messages and other specific operations. Bana and Comon-Lundh [12] have a computational soundness result without protocol restrictions, but their symbolic modeling is weakened, providing no secrecy guarantees when key-dependent messages or adaptive revealing of secret keys occur.

### Outline of the Paper
- **Section 2**: We introduce our symbolic abstraction of unconstrained public-key encryption within the CoSP framework.
- **Section 3**: We define the notion of computational soundness.
- **Section 4**: We review how prior computational soundness proofs were conducted in CoSP.
- **Section 5**: We identify where the aforementioned restrictions arise in these proofs and explain how to overcome these limitations.
- **Section 6**: We establish the corresponding formal result. Full proofs are deferred to the full version [7].

## 2. The Symbolic Model
We describe our symbolic modeling, which is fairly standard and follows that of [4], with some additional operations on secret keys.

### Constructors and Nonces
Let \( C := \{ \text{enc}/3, \text{ek}/1, \text{dk}/1, \text{sig}/3, \text{vk}/1, \text{sk}/1, \text{pair}/2, \text{string0}/1, \text{string1}/1, \text{empty}/0, \text{garbageSig}/2, \text{garbage}/1, \text{garbageEnc}/2 \} \)
and \( N := N_P \cup N_E \). Here, \( N_P \) and \( N_E \) are countably infinite sets representing protocol and adversary nonces, respectively. (f/n means f has arity n.) Intuitively, encryption, decryption, verification, and signing keys are represented as \( \text{ek}(r) \), \( \text{dk}(r) \), \( \text{vk}(r) \), \( \text{sk}(r) \) with a nonce \( r \) (the randomness used when generating the keys). \( \text{enc}(\text{ek}(r'), m, r) \) encrypts \( m \) using the encryption key \( \text{ek}(r') \) and randomness \( r \). \( \text{sig}(\text{sk}(r'), m, r) \) is a signature of \( m \) using the signing key \( \text{sk}(r') \) and randomness \( r \). The constructors \( \text{string0} \), \( \text{string1} \), and \( \text{empty} \) are used to model arbitrary strings used as payload in a protocol (e.g., a bitstring 010 would be encoded as \( \text{string0}(\text{string1}(\text{string0}(\text{empty}))) \)). The constructors \( \text{garbage} \), \( \text{garbageEnc} \), and \( \text{garbageSig} \) are necessary to express certain invalid terms the adversary may send, but these constructors are not used by the protocol.

### Message Type
We define \( T \) as the set of all terms matching the following grammar:
\[ T ::= \text{enc}(\text{ek}(N), T, N) \mid \text{ek}(N) \mid \text{dk}(N) \mid \text{sig}(\text{sk}(N), T, N) \mid \text{vk}(N) \mid \text{sk}(N) \mid \text{pair}(T, T) \mid S \mid N \mid \text{garbage}(N) \mid \text{garbageEnc}(T, N) \mid \text{garbageSig}(T, N) \]
\[ S ::= \text{empty} \mid \text{string0}(S) \mid \text{string1}(S) \]
where the nonterminal \( N \) stands for nonces.

### Destructors
\[ D := \{ \text{dec}/2, \text{isenc}/1, \text{isek}/1, \text{isdk}/1, \text{ekof}/1, \text{ekofdk}/1, \text{verify}/2, \text{issig}/1, \text{isvk}/1, \text{issk}/1, \text{vkof}/2, \text{vkofsk}/1, \text{fst}/1, \text{snd}/1, \text{unstring0}/1, \text{unstring1}/1, \text{equals}/2 \} \]

- The destructors \( \text{isek} \), \( \text{isdk} \), \( \text{isvk} \), \( \text{issk} \), \( \text{isenc} \), and \( \text{issig} \) realize predicates to test whether a term is an encryption key, decryption key, verification key, signing key, ciphertext, or signature, respectively.
- \( \text{ekof} \) extracts the encryption key from a ciphertext, and \( \text{vkof} \) extracts the verification key from a signature.
- \( \text{dec}(\text{dk}(r), c) \) decrypts the ciphertext \( c \).
- \( \text{verify}(\text{vk}(r), s) \) verifies the signature \( s \) with respect to the verification key \( \text{vk}(r) \) and returns the signed message if successful.
- \( \text{ekofdk} \) and \( \text{vkofsk} \) compute the encryption/verification key corresponding to a decryption/signing key.
- The destructors \( \text{fst} \) and \( \text{snd} \) are used to deconstruct pairs, and the destructors \( \text{unstring0} \) and \( \text{unstring1} \) allow parsing payload-strings.

The destructors are defined by the rules in Figure 1; an application matching none of these rules evaluates to \( \bot \).

### Deduction Relation
\( \vdash \) is the smallest relation satisfying the rules in Figure 2. This deduction relation specifies which terms the adversary can deduce given already known messages \( S \). We use the shorthand \( \text{eval}_f \) for the application of a constructor or destructor. \( \text{eval}_f(t_1, \ldots, t_n) = f(t_1, \ldots, t_n) \) if \( f(t_1, \ldots, t_n) \neq \bot \) and \( f(t_1, \ldots, t_n) \in T \), and \( \text{eval}_f(t_1, \ldots, t_n) = \bot \) otherwise.

### Protocols
We use the protocol model from the CoSP framework [4]. A protocol is modeled as a (possibly infinite) tree of nodes, where each node corresponds to a particular protocol action such as receiving a term from the adversary, sending a previously computed term to the adversary, applying a constructor or destructor to previously computed terms, or picking a nonce. Despite its simplicity, this model is expressive enough to embed powerful calculi such as the applied π-calculus.