Exploiting deviations from genuine Skype behavior.
Skype identiﬁcation tests (see Appendix A-B) are used by
ISPs and enterprise networks and can be easily performed
even by a passive, resource-constrained censor. To suc-
cessfully mimic Skype, a parrot system must pass all or
at least the majority of these tests. Unfortunately, Table I
demonstrates that both SkypeMorph and StegoTorus fail.
This indicates serious design ﬂaws in both systems.
They claim to provide unobservability against sophisticated
statistical
trafﬁc analysis, yet can be distinguished from
Skype even by extremely basic tests which are less resource-
intensive and more effective than the hypothetical
tests
considered by the designers of these systems.
StegoTorus mimics Skype’s trafﬁc statistics, but fails to
mimic much more visible aspects of genuine Skype such
as HTTP update and login trafﬁc. Neither SkypeMorph,
nor StegoTorus mimics Skype’s TCP channel, which is
an essential component of every genuine Skype session.
Furthermore, neither system generates SoM packet headers
(see Appendix A-B), which are present in every genuine
Skype UDP packet. These tests are (1) passive and (2)
can be performed at line speeds, thus SkypeMorph and
StegoTorus fail even against the weakest censor.
A censor can combine the tests listed in Table I into a
hierarchical detection tool. In fact, similar tools have been
proposed for real-time detection of Skype trafﬁc [9, 23],
5StegoTorus-Embed also aims to mimic Ventrilo, but we do not consider
it in this paper because Ventrilo is not as popular as Skype, and in any case
the latest StegoTorus prototype does not fully implement Ventrilo.
70
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
PASSIVE ATTACKS TO DETECT SKYPE PARROTS.
Table I
Attack
Skype HTTP update trafﬁc (T1)
Skype login trafﬁc (T2)
SoM ﬁeld of Skype UDP packets (T3)
Trafﬁc statistics (T4, T5)
Periodic message exchanges (T6, T7)
Typical Skype client behavior (T8)
TCP control channel (T9)
Imitation requirement
SideProtocols
SideProtocols
Content
Pattern
SideProtocols
IntraDepend
SideProtocols
Adversary
LO/OB/OM
LO/OB/OM
LO/OB/OM
LO/OM
LO/OB/OM
LO/OM
LO/OB/OM
SkypeMorph
StegoTorus-Embed
Satisﬁed
Satisﬁed
Failed
Satisﬁed
Failed
Failed
Failed
Failed
Failed
Failed
Satisﬁed
Failed
Failed
Failed
including line-rate detectors by Patacek [47], who used these
tests in an NfSen6 plugin, and by Adami et al. [1]. These
tools can be adapted to detect Skype parrots that pass a non-
trivial fraction of the tests, but not all of them.
Exploiting re-use of pre-recorded Skype traces. Both
StegoTorus and SkypeMorph clients come with pre-recorded
trafﬁc traces, which are used to mimic Skype by sending
packets with the exact same timings and sizes. Because the
censor also has access to the client software, he can match
observed ﬂows against these patterns and exploit the fact
that genuine Skype trafﬁc is unlikely to match them exactly,
while imitated trafﬁc always will.
Such censor must be OM because he needs to allocate
resources to match every observed ﬂow against the known
trace. This passive attack succeeds because SkypeMorph and
StegoTorus fail the Patterns requirement.
Exploiting re-use of client-generated Skype traces. To
foil the above attack, both StegoTorus and SkypeMorph
suggest that a client may generate its own Skype traces and
mimic those. This re-use can be detected by a long-term OM
censor since multiple genuine ﬂows from the same client are
unlikely to ever repeat the exact pattern of timings and sizes.
This passive attack succeeds because SkypeMorph and
StegoTorus fail the Patterns and User requirements.
B. Hypothetical SkypeMorph+ and StegoTorus+
Imagine hypothetical systems called SkypeMorph+ and
StegoTorus+ that add the patterns and messages from Ta-
ble I which are missing from, respectively, SkypeMorph
and StegoTorus. StegoTorus+ adds an imitated Skype login
(similar to the current SkypeMorph prototype). Both Skype-
Morph+ and StegoTorus+ add the missing messages from
Appendix A-B and put appropriate SoM ﬁelds into imitated
Skype packets. To mimic Skype’s TCP channel—which is
a dead giveaway that the current prototypes of SkypeMorph
and StegoTorus are not actually running Skype—they add a
fake TCP connection to each Skype call using the TCP port
with the same number as the corresponding UDP connection,
and send regular “garbage” trafﬁc on this connection to
mimic Skype’s control trafﬁc.
To foil detection based on trace re-use, StegoTorus and
SkypeMorph use a Skype pattern generator instead of pre-
6http://nfsen.sourceforge.net/
recorded or pre-generated traces. This generator produces
Skype-like packet timings and sizes on the ﬂy, thus the
resulting patterns are unique to each imitated connection.
For the sake of the argument, even imagine that this gen-
erator cannot be recognized by tools that discover covert
communications based on fabricated patterns [24].
C. Active and proactive attacks
Unfortunately, even SkypeMorph+ and StegoTorus+
would not achieve unobservability because they would suffer
from the same fundamental ﬂaw as SkypeMorph and Stego-
Torus: they do not actually run Skype, they only try to mimic
it, futilely. Table II summarizes active and proactive attacks
that can distinguish a Skype parrot from genuine Skype.
Verifying supernode behavior.
Requirements: SideProtocols, IntraDepend
Adversary: Proactive, LO/OM
Skype supernodes (SN) relay media trafﬁc and signaling
information for ordinary Skype clients [6]. In particular,
ordinary clients use nearby supernodes to connect to the
Skype network. The following two-stage attack enables a
censor to distinguish SkypeMorph+ and StegoTorus+ servers
from genuine Skype supernodes.
Phase 1: Supernode identiﬁcation. We give two ways to
ﬁnd out if a given node is (or pretends to be) a Skype
supernode. If it receives Skype calls from nodes behind
NAT in the censor’s network, then it must be a supernode
because ordinary Skype nodes cannot receive calls directly
(this supernode is either the callee, or relaying the call for an
ordinary node). Second, the censor can use the existing tools
for checking whether an IP address is performing NAT [54].
A Skype node that is not behind NAT is a supernode.
This phase ﬁlters out all genuine, ordinary Skype nodes,
leaving genuine supernodes as well as SkypeMorph+ and
StegoTorus+ parrots.
Phase 2: Supernode veriﬁcation. Consider a target node
that looks like a Skype supernode after Phase-1 ﬁltering.
The censor can run an ordinary Skype client and ﬂush
its supernode cache, which is the list of the supernodes
discovered by that client, to force the client to use the
target node as its supernode [5, 25]. If the target
is a
genuine supernode, the client will be able to connect to the
Skype network and make calls. If the target is a parrot, the
71
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
ACTIVE AND PROACTIVE ATTACKS TO DETECT IMPROVED SKYPE PARROTS.
Table II
Attack
Verify supernode behavior
by ﬂushing supernode cache
Drop a few UDP packets
Close TCP channel
Delay TCP packets
Close TCP connection to a SN
Block the default TCP port
for TCP channel
Imitation
requirement
SideProtocols
IntraDepend
Network,
Err
IntraDepend,
SideProtocols
IntraDepend,
SideProtocols,
Network
IntraDepend,
SideProtocols
IntraDepend
SideProtocols
Adversary
Skype
Proactive,
LO/OM
Active,
The target node serves as the adversary’s
SN, e.g., relays his Skype calls
A burst of TCP packets on the
LO/OB/OM control channel (Fig. 1)
Active,
Ends the UDP stream immediately
LO/OB/OM
Active,
LO/OM
Reacts depending on the type
of TCP messages
Active,
Client initiates UDP probes
LO/OB/OM to ﬁnd other SNs
Active,
Connects to TCP ports 80
LO/OB/OM or 443 instead
SkypeMorph+ and
StegoTorus+
Rejects all
Skype messages
No reaction
No reaction
No reaction
No reaction
No reaction
Figure 1. Skype TCP activity with and without changes in bandwidth.
]
s
d
n
o
c
e
s
0
1
r
e
p
[
s
t
e
k
c
a
p
f
o
r
e
b
m
u
N
Change in available bandwidth
With change in bandwidth
without
10
8
6
4
2
0
250
300
350
400
500
Time in seconds
450
550
600
650
connection will fail because StegoTorus and SkypeMorph
only mimic the Skype protocol but cannot actually run it.
Manipulating Skype calls.
Requirements: Network, Err, IntraDepend
Adversary: Active, LO/OB/OM
This attack tampers with a Skype connection by dropping,
reordering, and delaying packets or modifying their con-
tents, then observes the endpoints’ reaction. These changes
are fairly mild and can occur naturally, thus they do not
drastically affect genuine Skype connections.
When UDP packets are dropped in a genuine Skype call,
there is an immediate, very noticeable increase in the activity
on the TCP control channel that accompanies the main UDP
connection (see Fig. 1). We conjecture that this is caused by
Skype endpoints re-negotiating connection parameters due
to perceived changes in network conditions.
Neither SkypeMorph, nor StegoTorus implements the
TCP control channel. Our hypothetical SkypeMorph+ and
StegoTorus+ add a fake TCP connection and may even send
dummy packets over it, but this is not enough. The imitated
behavior will not be correlated to the network conditions in
the same way as in genuine Skype, enabling the censor to
distinguish parrots from Skype. We argue that it is extremely
difﬁcult to convincingly imitate dynamic dependences be-
tween network conditions and Skype’s control trafﬁc.
IntraDepend,
SideProtocols,
Manipulating the TCP control channel.
Requirements:
Network
Adversary: Active, LO/OB/OM
In the previous test, we showed that perturbing Skype’s
main UDP connection causes observable changes on the
TCP control channel. We now show that perturbing the TCP
channel causes observable changes on the UDP connection.