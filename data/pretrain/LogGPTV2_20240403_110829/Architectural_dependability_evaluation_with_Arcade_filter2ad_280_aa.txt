title:Architectural dependability evaluation with Arcade
author:Hichem Boudali and
Pepijn Crouzen and
Boudewijn R. Haverkort and
Matthias Kuntz and
Mari&quot;elle Stoelinga
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
Architectural dependability evaluation with Arcade*
H. Boudalil
P. Crouzen2
B. R. Haverkortl
M. Kuntzl
M.I.A. Stoelingal
1 University of Twente, Department of Computer Science, Enschede, NL
2 Saarland University, Department of Computer Science, Saarbriicken, D
Abstract
This paper proposes a formally well-rooted and ex(cid:173)
tensible framework for dependability evaluation: Arcade
(architecturgJ d.ependability ~valuation).
It has been de(cid:173)
signed to combine the strengths ofprevious approaches to
the evaluation of dependability. A key feature is its for(cid:173)
mal semantics in terms ofInput/Output-Interactive Marlwv
Chains, which enables both compositional modeling and
compositional state space generation and reduction. The
latter enables great computational reductions for many
models. The Arcade approach is extensible, hence adapt(cid:173)
able to new circumstances or application areas. The paper
introduces the new modeling approach, discusses its formal
semantics and illustrates its use with two case studies.
1 Introduction
Now that computers and communication systems are
proliferating in all kinds of devices and home appliances,
high-dependability is no longer restricted to systems that are
being used in traditional safety- or mission-critical applica(cid:173)
tions, such as space and aircraft or (nuclear) power control
systems. An important difference with these traditional sys(cid:173)
tems, however, is that although high dependability is a key
concern, achieving it should be affordable in terms of costs.
Hence, high dependability must be achieved as a "by prod(cid:173)
uct" of a sound design and implementation trajectory, at al(cid:173)
most no additional costs. Therefore, dependability evalua(cid:173)
tion techniques are being integrated in design frameworks,
to enable a cost-efficient comparison of design alternatives
with respect to the dependability requirements.
Although the standard theory of reliability engineering
has been around for many years now [20], the actual use
*This research has been partially funded by the Netherlands Organiza(cid:173)
tion for Scientific Research (NWO) under FOCUSIBRICKS grant numbers
642.000.505 (MOQS) and 542.000.504 (VeriGem); by the EU under grant
numbers IST-004527 (ARTIST2); and by the DFGINWO bilateral cooper(cid:173)
ation programme under project number DN 62-600 (VOSS2).
of these methods during the design of computer and com(cid:173)
munication systems is far less common. Nevertheless,
a wide variety of modeling approaches has been devel(cid:173)
oped for evaluating system dependability. We categorize
them in three classes:
(1) General purpose models, such
as CTMCs, stochastic Petri nets (SPNs) [3] and their ex(cid:173)
tensions; stochastic process algebras (SPAs) [14, 15]; in(cid:173)
teractive Markov chains (IMCs) [13], Input/Output IMCs
(I/O-IMCs) [5], and stochastic activity networks (SAN) as
used in UltraSAN and Mobius [19]. These approaches are
general-purpose, serving the specification and validation of
a wide variety of quantitative properties of computer and
communication systems, and certainly not of dependabil(cid:173)
ity properties only.
(2) In contrast, several dependability(cid:173)
specific approaches have also been developed, such as relia(cid:173)
bility block diagrams (RBDs), the System Availability Esti(cid:173)
mator (SAVE) language [12], dynamic RBDs (DRBDs) [9];
dynamic fault trees (DFTs) [10] and extended fault trees
(eFTs) [7]; OpenSESAME [21], and TANGRAM [8]. (3)
Finally, for some architectural (design) languages specific
extensions have been developed to allow for dependability
analysis, most notably, the error annex of the architectural
description language AADL [2], and the UML dependabil(cid:173)
ity profile [1 7].
We have identified five criteria, a good dependability for(cid:173)
malism in our opinion should satisfy: (1) Modeling effort:
how easy is it to model a system and its dependability as(cid:173)
pects? (2) Expressiveness: what features (repair, spare man(cid:173)
agement, different failure modes, etc.) can be modeled and
can new ones easily be added? (3) Formal semantics:
is
the meaning of the models unambiguously clear? (4) Com(cid:173)
positionality: we distinguish between (4a) Compositional
modeling, meaning that a model can be created by compos(cid:173)
ing smaller submodels and (4b) Compositional state space
generation and reduction. Compositional state space gener(cid:173)
ation means that the state space of the entire model is con(cid:173)
structed out ofthe state spaces of its constituent subcompo(cid:173)
nents. Compositional state space reduction means that the
global state space of a multi-component system is obtained
by repeated composition and reduction (e.g., by bisimula-
1-4244-2398-9/08/$20.00 <92008 IEEE
512
DSN 2008: Boudali et al.
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
tion reduction).
automatic analysis?
(5) Tool support: are tools available for
The general-purpose formalisms,
specifying system
models in terms ofstates and transitions, have the advantage
of being very flexible (hence, expressive) and precise. But,
with these formalisms, it is often difficult to specify depend(cid:173)
ability models, since they do not provide any dependability(cid:173)
specific constructs, which in tum may lead to specifications
that are hard to understand and thus are potentially sub(cid:173)
ject to modelling errors. We also found that dependability
specific approaches score relatively low on expressiveness;
although each of them incorporates certain dependability
constructs, none of them includes them all. Although we
agree that it is impossible to include all possible features,
we do think that a modeling approach should be extensi(cid:173)
ble (cf. Section 3.6), so as to be able to accommodate any,
also future, needs. Architectural languages require limited
modeling effort, since they annotate architectural models
(which play an important role throughout the design). How(cid:173)
ever, these languages, as we know them, lack a formal and
compositional semantics and tool support for automatic de(cid:173)
pendability evaluation, although recently some work in this
direction has been done [18].
In this paper, we therefore propose a new, formally well(cid:173)
rooted and extensible framework for dependability evalua(cid:173)
tion that satisfies the five criteria we have discussed above:
Arcade (for architectur~l gependability ~valuation). In ad(cid:173)
dition, we define our framework in an architectural style,
i.e., we define a system model in terms of components or
entities that (directly) map to actual physical/logical sys(cid:173)
tem components. In fact, our framework is ultimately in(cid:173)
tended to be incorporated into an architectural design lan(cid:173)
guage. Arcade defines a system as a set of interacting com(cid:173)
ponents, where each component is provided with a set ofop(cid:173)
erational/failure modes, time-to-failure/repair distributions,
and failure/repair dependencies. Arcade models have a se(cid:173)
mantics in terms of 1/0-IMCs, thus pinning down their in(cid:173)
terpretation in an unambiguous way. Moreover, the compo(cid:173)
sitional state space generation and reduction technique for
I/O-IMCs also enables an efficient analysis of very large
Arcade models.
The paper is further structured as follows. In Section 2
we provide background on IMCs and 1/0-IMCs, the under(cid:173)
lying semantical models used in the remainder ofthis paper.
Section 3 introduces the Arcade modeling approach. Sec(cid:173)
tion 4 describes the currently employed tool-chain to evalu(cid:173)
ate Arcade models, whereas Section 5 reports on two cases
studies. Section 6 concludes the paper.
2 Input/Output Interactive Markov Chains
Input/Output interactive Markov chains (1/0-IMCs) [5]
(1/0-
combination of
Input/Output
automata
are
a
automata) [16] and interactive Markov chains (IMCs) [13].
1/0-IMCs distinguish two types of transitions: (1) Int
c
t v tn t nlabeled with actions (also called signals); (2)
M k v n tn t n labeled with rates A, indicating that
the transition can only be taken after a delay that is governed
by an exponential distribution with parameter A. Inspired by
I/O-automata, actions can be further partitioned into:
1. In ut ct n (denoted a?) are controlled by the envi(cid:173)
4meaning that a transi(cid:173)
ronment. They can be d
tion labeled with a? can only be taken if another 1/0(cid:173)
IMC performs an output action a!. A feature of 1/0(cid:173)
n b 4i.e., in each state
IMCs is that they are n ut
they are ready to respond to any of their inputs a?
Hence, each state has an outgoing transition labeled
with a?
2. Out ut ct
n (denoted a!) are controlled by the 1/0(cid:173)
IMC itself. In contrast to input actions, output actions
cannot be delayed, i.e., transitions labeled with output
actions must be taken immediately.
3. Int
n
ct n (denoted a;) are not visible to the en(cid:173)
vironment. Like output actions, internal actions cannot
be delayed.
States are depicted by circles, initial states by an incoming
arrow, Markovian transitions by dashed lines, and interac(cid:173)
tive transitions by solid lines. Fig. 1 shows an 1/0-IMC with
two Markovian transitions: one from 81 to 82 with rate A
and another from 83 to 84 with rate /1. The I/O-IMC has
one input action a? To ensure input-enabling, we specify
a?-self-Ioops in states 83, 84, and 85 1â€¢ Note that state 81
exhibits a race between the input and the Markovian transi(cid:173)
tion: in 81, the I/O-IMC delays for a time that is governed
by an exponential distribution with parameter A, and moves
to state 82. If however, before that delay ends, an input a?
arrives, then the 1/0-IMC moves to 83. The only output
action b! leads from 84 to 85. We say that two 1/0-IMCs
Figure 1. Example of an I/O-IMC
rc:
n z if either (1) they are both ready to accept the
same input action or (2) one is ready to output an action a!
and the other is ready to receive that same action (i.e., has
1In the sequel we often omit these self-loops for the sake of clarity and
simplicity of the UO-IMC representation.
1-4244-2398-9/08/$20.00 Â©2008 IEEE
513
DSN 2008: Boudali et al.
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
input action a?). 1/0-IMCs can be combined with a parallel
composition operator "II", to bui d ar erI/O-IMCs out 0
sma
composition 0 1/0-IMCs Q and R, is the joint behavior 0
its constituent 1/0-IMCs and can be described as 0 ws:
elOnes. The behavior 0 P == QIIR, i.e., the para
e
1. I an action does not require synchronization then Q
and R can evo ve independent )( i.e., i Q (R) can
rna e any transition (interactive or Mar ovian) and be(cid:173)
haves a ternards as Q' (R'), the same behavior is pos(cid:173)
e context, i.e., QIIR can evo ~ to
sib e in the para
Q'IIR (QIIR').
2. I an action 0 an interactive transition requires syn(cid:173)
chronization, then both I/O-IMCs Q and R must be
ab eto per orm that action at the same time, i.e., QIIR
evo ~ssimu taneOlE yintoQ'IIR'. Note that when an
output and an input action synchronize the resu tis an
output action.
Li e in process a
elras, the hidin operator hide A in P
rna es output actions in a set A intema ,such that no uther
synchronization is possib eover actions in A. More detai s
on the I/O-IMC orma ismcan be illnd in [5].
3 Arcade: Semantics and Syntax
This section describes the semantics and syntax 0
Arcade. We have identified three main building blocks with
which we can, in a modu a CBhion, construct a system
mode: (1) a Basic Component (BC), (2) a Repair Unit
(RU), and (3) a Spare Mana ement Unit (SMU). These
bui din b oc s interact with each other by sendin and
these
receivin
bui din b oc sand their interactions is based on the 1/0(cid:173)
IMC
0 win, we describe each 0
these bui din b oc s.
input/output actions. The semantics 0
tamewor.
In the
3.1 Basic component
The basic component bui din b (Â£ represents a physi(cid:173)
ca /0 ica system component that has a distinct operationa
and failure behavior. There are two steps involved in defin(cid:173)
ing aBC: (1) defining the BC's operational modes, (2)
defining the BC's failure model. In theory, there could be
a di erent a lIe mode (ai ue behavior) or each 0
the
BC's operationa modes; however, or simp irity we wi
restrict these di erences.
3.1.1 Operational modes
A basic component can be in various operationa modes
(OM). Examp eso operationa modes inc ude ct v versus
n ct v, which are two typica modes 0 operation when a
component is used as a primary or as a spare. We define
roups 0 operationa modes.
operationa modes in terms 0
A group of operational modes defines a set of utu
x
c u voperationa modes, e.
. active mode versus inactive
are, a mode corresponds to an
mode. At the I/O-IMC
operational state. Thus, each OM group defines a set of
operationa states. I a BC has mu tiJ eOM roups, then
the BC operationa states consist 0 the c
duct 0 the
operationa states 0
the di erent OM roups. For exam(cid:173)
p e, ets assume a BC has two OM roups: inactive/active
and on/o . In this case, the BC has our operationa states,
name y: (active,on), (active,o ) (inactive,on), and (inac(cid:173)
tive,o ). Switchin
10m one operationa mode to another
needs to be defined as an n ut ct n at the I/O-1MC are .
The mode switchin or transition is thus tri
ered by some
rr the examp e,the two OM
extema event. Fi .2 shows,
roups (a on with the mode switches) 0
the BC and the
resu tin operationa states2â€¢