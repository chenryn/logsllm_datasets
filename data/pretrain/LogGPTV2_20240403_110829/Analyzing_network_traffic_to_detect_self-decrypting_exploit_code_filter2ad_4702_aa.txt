title:Analyzing network traffic to detect self-decrypting exploit code
author:Qinghua Zhang and
Douglas S. Reeves and
Peng Ning and
S. Purushothaman Iyer
Analyzing Network Trafﬁc To Detect Self-Decrypting
Exploit Code ∗
Qinghua Zhang, Douglas S. Reeves, Peng Ning, S. Purushothaman Iyer
Cyber Defense Laboratory, Computer Science Department
North Carolina State University, Raleigh, NC 27695-8207
{qzhang2, reeves, pning, purush}@ncsu.edu
ABSTRACT
Remotely-launched software exploits are a common way for
attackers to intrude into vulnerable computer systems. As
detection techniques improve, remote exploitation techniques
are also evolving. Recent techniques for evasion of exploit
detection include polymorphism (code encryption) and meta-
morphism (code obfuscation). This paper addresses the
problem of detecting in network traﬃc polymorphic remote
exploits that are encrypted, and that self-decrypt before
launching the intrusion. Such exploits pose a great chal-
lenge to existing malware detection techniques, partly due
to the non-obvious starting location of the exploit code in
the network payload.
We describe a new method for detecting self-decrypting
exploit codes. This method scans network traﬃc for the
presence of a decryption routine, which is characteristic of
such exploits. The proposed method uses static analysis and
emulated instruction execution techniques. This improves
the accuracy of determining the starting location and in-
structions of the decryption routine, even if self-modifying
code is used. The method outperforms approaches that have
been previously proposed, both in terms of detection capa-
bilities, and in detection accuracy.
The proposed method has been implemented and tested
on current polymorphic exploits, including ones generated
by state-of-the-art polymorphic engines. All exploits have
been detected (i.e., a 100% detection rate), including those
for which the decryption routine is dynamically coded, or
self-modifying. The false positive rate is close to 0%. Run-
ning time is approximately linear in the size of the network
payload being analyzed.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Network]: General—
Security and protection; D.3.3 [Programming languages]:
∗This work is supported by the National Science Foundation
(NSF) under grant CNS-0627505.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’07, March 20-22, 2007, Singapore.
Copyright 2007 ACM 1-59593-574-6/07/0003 ...$5.00.
Language Constructs and Features—Polymorphism
General Terms
Security
Keywords
Polymorphic, Exploit Code, Decryption, Detection, Static
Analysis, Emulation
1.
INTRODUCTION
In recent years, malicious code has become an omnipresent
and dangerous threat to the Internet infrastructure. The
mono-culture property of the hardware and software makes
it possible to explore a single vulnerability to compromise
a large number of hosts. A typical example are the Inter-
net worms which are self-propagating and self-replicating.
Worms frequently use remote exploit code to intrude into a
vulnerable system attached to the Internet, and then com-
promise other vulnerable systems attached to the Internet.
The automatic nature of worms makes them virulent and
destructive. According to Computer Economics [2], the
estimated worldwide damages caused by three well-known
worms, which are Code Red, Nimda and Slammer worms in
year 2001, exceeded $4 billion. Detection of exploit code in
network traﬃc is a crucial task in stopping the spread of
worms.
Signature-based intrusion detection is the most popular
approach for detecting remote exploits that target vulner-
able hosts. Some well-known and very successful systems
include Snort [8] and Bro [7]. While signature-based intru-
sion detection has been very successful, these detection sys-
tems can be defeated by exploits that use advanced conceal-
ment techniques. Two important recent such techniques are
polymorphism, which makes use of exploit code encryption,
and metamorphism, which uses a variety of code obfuscation
techniques to confound static signature-checking.
Recently, there has been substantial research on defeat-
ing such concealment methods. Approaches that use static
analysis [23, 22, 10, 9] have shown promise in detecting a
speciﬁc and non-trivial class of polymorphic exploits. These
exploits target buﬀer overﬂow vulnerabilities, accounting for
more than 20% of the vulnerabilities reported by CVE [1].
This class of exploits contains program-like code that has
distinctive control ﬂow and data ﬂow characteristics that
can be detected. For instance, ﬁgure 1 shows a character-
istic structure of polymorphic exploits, produced by one of
the available exploit toolkits [5, 6, 4].
Figure 1: A typical structure of polymorphic exploit
codes on buﬀer overﬂow vulnerabilities
The eﬀectiveness of such static analysis approaches de-
pends on how well the program-like payload (e.g. the de-
cryption routines) can be distinguished from a) non-code
data and from b) non-exploit code. There are several signif-
icant challenges. First, exploit code is often hidden inside
network traﬃc at a non-obvious starting location , and in-
terspersed with data (whether valid or not) [10]. Code bytes
cannot be distinguished from data bytes solely by the use of
disassembly, due to the compactness of Intel instruction set.
Second, exploit code that is “visible” (i.e., unencrypted) is
usually manually crafted, and does not follow the same con-
ventions as executable programs generated by a compiler.
For instance, hand-crafted exploit code may use overlapping
instructions, or self-modifying instructions, expressly for the
purpose of defeating static disassembly.
Available static-analysis approaches [9, 10, 22, 23] have
only addressed the above challenges to a limited degree.
They are not robust against exploits which employ static
analysis-resistant techniques such as self-modifying and in-
direct control transfer instructions [19], partly due to the