SCode(%)
Flow CSwitch Cplx
11.03
49.12
15.68
78.42
4047.0
8.0
4052.0
2.0
1213.8
38.2
198.5
38.2
117.0
45.0
137.0
14.0
Table 3: Partitioning choices for wget.
Overhead(%) (FileSize: 1M/1K)
Remote
1493.0/6.2
13799.0/13.4
Local
1.6/1.9
412.0/7.2
1.5/2.3
6.4/2.1
1440.0/7.9
7.6/3.3
data contained potentially malicious data (i.e., low-integrity data).
The goal of partitioning is to produce a sensitive, low-integrity
domain that interacts with the server, and an insensitive domain
for the rest of the program. The goal is to protect the insensitive
domain from compromise due to untrusted file input retrieved from
servers, enabling sandboxing of the file download.
Partitioning process. During partitioning, we marked all func-
tions that interact with the internet as sensitive. We started with
the smallest sensitive domain by using budgets (_∗, _, _, _) and af-
ter a simple iteration we found an initial partition with quality
(11.03%, 4047, 1213.8, 117.0), which is shown as partition 1 in Ta-
ble 3. This initial partition has a small sensitive domain, but the
model reported high sensitive information flow and performance
overhead; so this partition should not be adopted in practice. But
to validate our performance model, we implemented the partition
and collected its runtime overhead, shown in Table 3. The overhead
was significant, consistent with the prediction of our performance
model.
To get better performance and information-flow security, we set
the budget on information flow dimension to be 999 and PM pro-
duced a more secure partition with quality (39.81%, 17.0, 1122.2, 74.0).
This result implied that any partition for wget that prevents large
sensitive information flow would contain a large sensitive domain.
Therefore, we decided to relax the requirement on the sensitive-
code percentage as a way of improving performance. By interac-
tively using PM via similar strategies discussed earlier for thttpd, we
got a partitioning choice that achieves a good balance between per-
formance and security, with quality (49.12%, 8.0, 38.2, 45.0), which
is shown as partition 2 in Table 3. The measured runtime perfor-
mance overhead is much less than the first partition, with less than
2% overhead for the remote-server setting. This justifies the benefit
of performing iterative refinement.
Assessing security and performance. We investigated the two
partitions to understand why their security and performance were
dramatically different. Fig. 4 presents the call graph of wget for the
its main functions involved in implementing the FTP protocol. In
particular, main eventually invokes fd_read_body, which retrieves
a file from an FTP server and writes the file content into a local file.
Figure 4: Call graph and partitions for wget.
Partition 1 cuts between fd_read_body and lower-level func-
tions; as a result, pointers to buffers holding the file content are
passed from the sensitive domain to the insensitive one. This re-
sults in no protection from low-integrity data. Our model correctly
predicts high information flow as it uses potential flow to mea-
sure the sizes of those buffers (which contain tainted data). Further,
since fd_read_body is invoked many times (because it is transi-
tively called by ftp_loop), this partition also results in bad per-
formance due to many context switches. Partition 2 , however,
keeps ftp_loop in the sensitive domain, meaning that downloaded
data does not cross the boundary, which achieves good integrity
protection and a negligible overhead.
Based on this investigation, lifting the boundary to higher execu-
tion levels seems beneficial for reducing overhead and sensitive in-
formation flow, while moving the boundary to lower levels reduces
the percentage of sensitive code. To validate this understanding, we
used PM to discover partitions 3 and 4 in Table 3: the first cuts
between getftp and fd_read_body, and the second cuts between
main and retrieve_url. Partition 3 set the boundary at a lower
level than 2 ; it reduced the percentage of sensitive code, at the cost
of larger sensitive flow and performance overhead. For partition
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom10334 , the information flow was decreased. However, the majority of
the program was in the sensitive partition.
In all, partition 2 has the best balance between security and per-
formance. We investigated its security in terms of how the sensitive
domain can influence the insensitive one (for integrity protection).
The reported 8 bits are all implicit information flows through return
values, instead of more dangerous explicit and potential flows. In
terms of influence through the file system, the sensitive domain (1)
writes the downloaded data to a local file and (2) writes data into a
log file. None of these influences the sensitive domain, which does
not read from those files.
Comparison with PtrSplit. We compared our best partition ( 2 )
with PtrSplit’s result on wget. Our partition achieves less runtime
overhead than PtrSplit’s reported result (PM: 1.9% v.s. PtrSplit: 6.5%).
However, our partition puts 304 functions into the sensitive domain,
while PtrSplit reported only 8. After investigation, we realized that
PtrSplit treated only the content of the downloaded file as sensitive,
while we considered all data from the internet as sensitive. For
example, communication messages between the server and wget
are not treated as sensitive by PtrSplit and it puts functions that deal
with such communication into the insensitive domain. Furthermore,
PtrSplit did not count duplicated functions when reporting the size
of the sensitive domain. When considering duplication, PtrSplit’s
partition actually had 31.53% of code in the sensitive domain.
8.3 Evaluation with telnet
telnet is a tool often used for controlling a remote machine. After
a successful login, telnet sets up a bidirectional terminal-based
communication interface. Data from the remote side is received
and displayed in the local terminal; command-line operations are
parsed from the local terminal and sent to the remote machine to
be executed. Since telnet communicates with a remote server there
is also a risk of receiving low-integrity data from the server. Our
primary goal is to isolate the component that processes untrusted
internet data.
Partitioning process. During partitioning, we first marked func-
tions process_rings, netflush, and tn as sensitive, since they
interact with the internet. Then, we used a budget (_∗, 999, _, _) to
discover an initial partition, which is shown as partition 1 in Ta-
ble 4. According to its quality, the smallest sensitive domain already
contains a majority of the code. Therefore, we switched to search
for a low-overhead partition. In three iterations, we discovered
partition 2 in Table 4.
Assessing security and performance. To understand why the
sensitive domain had to be large, we investigated telnet’s source
code and found that the main function in telnet directly invokes tn
after parsing the command-line options. Since main has to stay in
the insensitive domain and only single-directional RPC is supported,
partition 2 can cut only between main and tn, which is near the
top of execution. As a result, only main, the command-line parsing
component, and functions that perform clean-ups (e.g., Exit) were
put into the insensitive domain. Partitioning at other places would
require bidirectional RPC support, as shown in Fig. 5.
partition 2
partition
3
main
Terminal
tn
...
Scheduler
process_rings
netﬂush
Internet
Sensitive
Data Flow
ttyread
ttyiring
telsnd
netoring
Control
Flow
ttyﬂush
ttyoring
telrcv
netiring
Insensitive
Data Flow
Figure 5: PDG and partitions for telnet.
Therefore, the fundamental reason was the lack of bidirectional
RPC support when implementing partitions. To check whether al-
lowing bidirectional RPCs would produce interesting partitions
(although we would not be able to implement them), we config-
ured PM to discover partitions with bidirectional boundaries. After
several iterations, we discovered a partition with a small sensitive
domain (13.10% code), shown as partition 3 in Table 4.
Assessing security/performance and comparison with PtrSplit.
Without the bidirectional RPC support, we cannot avoid a large sen-
sitive domain for telnet. Through manual inspection we determined
that the sensitive domain in 2 does not influence the insensitive
domain through the file system (the sensitive domain writes only to
stdout). In terms of runtime performance, our implementation had
a lower runtime overhead compared with PtrSplit’s result (9.6%).
After understanding PtrSplit’s result, we realized that partition 3
was the same as PtrSplit’s result. However, PM predicted large per-
formance overhead for PtrSplit’s partition. After inspection, we
believe that PtrSplit’s partition was manually rewritten to accom-
modate single-directional RPC and, as a result, not all functionality
was preserved after partitioning.
8.4 Evaluation with nginx
nginx is a web server and supports the username/password au-
thentication. In our experiment, we partition nginx to protect the
server-side password file from being leaked.
Partitioning process and implementation. We marked func-
tion ngx_http_auth_basic_handler as sensitive, since it reads
the password file. We started with the smallest sensitive domain that
prevents potential flows resulting from pointers to the password
file with budgets (_∗, 999, _, _). As shown in Table 5, the metrics for
partition 1 indicate a large performance overhead. However, after
inspecting the source code, we found there was only one function
call across the boundary. Furthermore, all of the global variables
used by the sensitive domain are read only. Therefore, we repli-
cated those global variables and implemented data-synchronization
by RPC. With such global variables duplicated, we have another
boundary shown as 2 in the table, which we implemented and
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1034Budgets (bc , bf , bs , bx )
1
2
3
(_*,999,_,_)
(_*,999,16.0,15.0)
(_*,999,_,_)
IP-Solving
Time (s)
0.41
2.30
0.21
SCode(%)
Flow CSwitch Cplx
74.11
86.32
13.10
3.0
0.0
26.0
609.0
16.0
13305.0
146.0
15.0
227.0
Overhead(%)
Remote
N/A
7.9
N/A
Local
N/A
34.33
N/A
Table 4: Partitioning choices for telnet; “N/A” are for partitions that were not implemented.
Budgets (bc , bf , bs , bx )
1
2
(_*,999,_,_)
(_*,999,_,_)
IP-Solving
Time (s)
2.67
N/A
SCode(%)
Flow CSwitch Cplx
2.89
2.89
1.0
1.0
136.2
14.0
437.0
32.0
Overhead(%)
Remote
N/A
34.1
Local
N/A
21.4
Table 5: Partitioning choices for nginx; “N/A” are for partitions that were not implemented.
Program Version Vulnerability
Prog
SCode
Flow CSwitch Cplx Overhead
chsh
0.5
useradd
passwd
chage
Table 7: Partitioning choices for chsh and useradd
1781.4
846.2
77.0
2.0
29.0
13.0
2.0
(%)
1.00
11.33
7.50
80.63
(%)
51.52
50.94
82.33
6.57
0.0
0.0
0.0
0.0
the secret to the main functions in passwd and chage. However,
since main had to stay in the insensitive partition, there would
be no way of preventing the insensitive partition from holding
sensitive data, for function-level partitioning. Hence, we manually
changed the main functions of passwd and chage by extracting
operations that read and update the password and shadow files to
separate functions. The changed passwd and chage then became
partitionable at the function level. The other two programs (chsh