---
## Page 413
class Scorer {
function score(candidate, medicalExam, scoringGuide) {
动机
Command)
constructor(candidate, 
let healthLevel = 0;
11.9
execute(）{
let
// long body code
this
his
this
反向重构：以函数取代命令（344)
曾用名：以函数对象取代函数（Replace Method with Method Object）
以命令取代函数（ReplaceFunction with
result = 0;
candidate;
medicalExam， scoringGuide） {
f()
exec()
new()
T
---
## Page 414
·使用搬移函数（198）把函数移到空的类里。
·为想要包装的函数创建一个空的类，根据该函数的名字为其命名。
法提供这种能力时，我才会考虑使用命令对象。
时候我都会选函数。只有当我特别需要命令对象提供的某种能力而普通的函数无
代价的。所以，如果要在作为一等公民的函数和命令对象之间做个选择，95%的
能把函数重构成命令。不过我们不能忘记，
用这些方法。
令对象的方法和字段把复杂的函数拆解开，而且在测试和调试过程中可以直接调
一等公民的能力。同样，即便编程语言本身并不支持嵌套函数，我也可以借助命
对象但不支持函数作为一等公民，通过命令对象就可以给函数提供大部分相当
力
过命令对象提供的方法来设值命令的参数值，从而支持更丰富的生命周期管理能
除了函数训
行该函数，就是这种对象存在的意义。
的办法。这样的对象我称之为“命令对象”（command object），
做法
是程序设计的基本构造块。不过，将函数封装成自己的对象，有时也是一种有用
用该函数可以改变对象可观察的状态。我尽量避免使用这个意义上的“命令”
principle）中也用到了“命令"一词，此时“命令"是一个对象所拥有的函数，调
令”一词时，我会先用完整的“命令对象”一词设定上下文，然后视情况使用简
。我可以借助继承和钩子对函数行为加以定制。如果我所使用的编程语言支持
所有这些都是使用命令对象的好理由，
“命令"是指一个对象，其中封装了一个函数调用请求。这是遵循《设计模
与普通的函数相比，
函数，
保持原来的函数作为转发函数，至少保留到重构结束之前才删除。
跟软件开发中的很多词汇一样，“命令"这个词承载了太多含义。
调用本身，
，不管是独立函数，
命令对象还可以支持附加的操作，例如撤销操作。我可以通
，命令对象提供了更大的控制灵活性和更强的表达能力
，还是以方法（method）形式附着在对象上的函数
 命令对象的灵活性也是以复杂性作为
所以我要做好准备，
，或者简称“命
（mutator）。
一旦有需要，
在这
山
---
## Page 415
望读者权且包涵。
起来也麻烦。所以我在这里展示的函数其实很短，并不真的需要本重构手法，还
示这个重构手法的价值，我需要一个长而复杂的函数，但这写起来太费事，你读
要用到命令对象。
命令对象，JavaScript则省去了这些麻烦。不过，即便在JavaScript中，有时也需
决策之一。在不具备这种能力的编程语言中，我经常要费力为很常见的任务创建
·可以考虑给每个参数创建一个字段，并在构造函数中添加对应的参数。
者“call"。
给命令对象中负责实际执行命令的函数起一个通用的名字，例如“execute"或
function score(candidate,
function score(candidate, medicalExam,
范例
class Scorer {
// lots more code like this
let certificationGrade = "regular";
if (medicalExam.isSmoker）{
return result;
let result = o;
 execute (candidate, medicalExam, scoringGuide）{
esult
result -= 5;
 certificationGrade =
highMedicalRiskFlag = true; 
 healthLevel
我首先创建一个空的类，用搬移函数（198）把上述函数搬到这个类里去。
一个典型的应用场景就是拆解复杂的函数，
JavaScript语言有很多缺点，
let highMedicalRiskFlag = false;
let healthLevel = 0;
遵循编程语言的命名规范来给命令对象起名。
let
healthLevel
Math.max(healthLevel - 5, 0);
.statewithLowcertification(candidate.originState)）{
下面的函数用于给一份保险申请评分。
"low";
 medicalExam,
但把函数作为一等公民对待，
 ScoringGuide)
 scoringGuide）{
以便我理解和修改。
如果没有合适的命名规范,
是它最正确的设计
要想真正展
就
---
## Page 416
execute (candidate, medicalExam, scoringGuide） {
class Scorer...
function score(candidate, medicalExam, 
可以排成队列挨个执行，
多便利：多个命令类可以分别从各自的构造函数中获得各自不同的参数，然后又
我要处理的命令需要更复杂的参数设置周期或者大量定制，上述做法就会带来很
函数接收参数。在这样一个简单的拆解场景中，这一点带来的影响不大；但如果
constructor(candidate){
if (medicalExam.isSmoker） {
let highMedicalRiskFlag = false;
let result = θ;
 return new Scorer(candidate).execute(candidate, medicalExam, scoringGuide);
return result;
result
result
certificationGrade = "low";
highMedicalRiskFlag = true;
healthlevel
return 
result
let certificationGrade = "regular";
继续处理其他参数:
我可以每次搬移一个参数到构造函数。
大多数时候，我更愿意在命令对象的构造函数中传入参数，
result -= 5;
certificationGrade =
if (medicalExam.isSmoker）{
highMedicalRiskFlag = true;
-= Math.max(healthLevel - 5, 0);
-=5;
 result;
-=
:Math.max(healthLevel - 5, 0);
=0：
"low";
，因为它们的execute函数签名都一样。
 scoringGuide）{
---
## Page 417
class Scorer...
变成字段，我还是每次修改一处。
解复杂的函数，所以我还是大致展示一
class Scorer...
execute （）{
constructor(candidate,
execute （) { 
constructor(candidate,
function score(candidate,
if (this._medicalExam.isSmoker)
let highMedicalRiskFlag = false;
this._result = 0;
this. _medicalExam = medicalExam;
 this._candidate =
// lots more code like this
let certificationGrade = "regular";
 this._scoringGuide = scoringGuide;
let healthLevel 
return result;
this.
let highMedicalRiskFlag = false;
let
this._candidate = candidate;
result
highMedicalRiskFlag = true;
let
highMedicalRiskFlag = true; 
healthLevel 
以命令取代函数的重构到此就结束了，
result
(this
(this
healthLevel
result
medicalExam
-= Math.max(healthLevel - 5, 0);
-=5;
=0;
10;
=0;
=θ;
candidate;
10
: medicalExam;
medicalExam, scoringGuide){
medicalExam, scoringGuide){
!"MOT"
 medicalExam,
 ScoringGuide）{
下如何拆解。
 不过之所以要做这个重构，
下一步是把所有局部变量都
是为了拆
---
## Page 418
execute （)
class Scorer...
constructor(candidate, 
class Scorer...
execute（）{
感愧疚。
个重构手法是如此简单，以至于我都没有在重构名录中给它一席之地。对此我略
this.scoreSmoking();
（106）等重构手法，而不用纠结于局部变量的作用域之类问题。
this._highMedicalRiskFlag = false;
return this._result;
this._result -= Math.max(this._healthLevel - 5, 0);
// lots more code like this
if
this._certificationGrade = "regular";
 if (this._medicalExam.isSmoker)
// lots more code like this
this._highMedicalRiskFlag = false;
this._result = 0;
this._scoringGuide = scoringGuide;
this._medicalExam 
return this._result;
this._result -= Math.max(healthLevel - 5, 0);
// lots more code like this
现在函数的所有状态都已经移到了命令对象中，我可以放心使用提炼函数
(this._scoringGuide.statewithLowcertification(this._candidate.originState)) {
重复上述过程,
-= 5;
 = medicalExam;
 candidate;
medicalExam, scoringGuide){
 直到所有局部变量都变成字段。
"low"
Lowcertification(this._candidate.originstate)) {
（“把局部变量变成字段"这
---
## Page 419
何一个函数进行测试和调试。
命令对象，不仅因为我对命令对象更熟悉，而且还因为我可以针对命令对象中任
用此重构手法时，
scoreSmoking(）.:
return this._result;
这样我就可以像处理嵌套函数一样处理命令对象。实际上，
healthLever
10
在JavaScript中运
---
## Page 420
的函数。
函数不是太复杂，那么命令对象可能显得费而不惠，我就应该考虑将其变回普通
的。
以分别调用；开始调用之前的数据状态也可以逐步构建。但这种强大是有代价
原本复杂的函数拆解为多个方法，彼此之间通过字段共享状态；拆解后的方法可
动机
function charge(customer, usage) {
做法
class Chargecalculator {
Function)
 return customer.rate 
execute(){i
constructor (customer,
11.10
，大多数时候，我只是想调用一个函数，
return this._customer.rate * this._usage;
this._usage = usage;
命令对象为处理复杂计算提供了强大的机制。
反向重构：
以函数取代命令（ReplaceCommand with
以命令取代函数（337）
!abesn
usage){
exec()
new(
，让它完成自己的工作就好。如果这
 借助命令对象，
f(口
可以轻松地将
---
## Page 421
调用方..
class ChargeCalculator {
·用移除死代码（237）把命令类消去。
·使用改变函数声明（124）
·对命令对象在执行阶段用到的函数，逐一使用内联函数（115）。
·运用提炼函数（106），把“创建并执行命令对象"的代码单独提炼到一个函数
范例
再使用内联函数（115）。
get charge(）{
constructor
测试。
命令对象的那个函数）。
把“调用构造函数"和“调用执行函数"两步都内联到调用方（也就是最终要替换
修改后都要测试。
对于所有的字段，在执行函数中找到引用它们的地方，并改为使用参数。每次
中。
return this.basecharge + this._provider.connectioncharge;
this._provider = provider;
使用方的代码如下。
假设我有一个很小的命令对象。
如果被调用的函数有返回值，请先对调用处使用提炼变量（119），然后
这一步会新建一个函数，最终这个函数会取代现在的命令对象。
s._customer.baseRate * this._usage;
= customer;
usage,
provider){
 把构造函数的参数转移到执行函数。
---
## Page 422
数上。
到主函数。首先用改变函数声明（124）把构造函数的参数逐一添加到charge函
class ChargeCalculator..
class ChargeCalculator..
返回值的函数，我一般会先用提炼变量（119）把返回值提炼出来。