9.25%
95.00%
0.04%
0.07%
0.37%
7.65%
97.81%
0.00%
0.00005%
0.00007%
0.00007%
0.002%
0.041
0.044
0.045
0.046
62.57%
92.63%
95.70%
100.00%
3.07%
77.30%
95.09%
97.54%
100.00%
3.68%
10.42%
18.40%
96.93%
100.00%
6.31%
96.93%
96.93%
96.93%
101/163
150/163
155/163
163/163
4/163
125/163
154/163
158/163
163/163
5/163
16/163
29/163
157/163
163/163
10/163
157/163
157/163
157/163
Analysis of detected and undetected attacks. To understand why Anagram works
so well with Modbus traﬃc consider the following two Modbus messages. The
ﬁrst one is a valid read request (identiﬁed by the 8th byte with value 0x03 which
corresponds to the request “function code”):
35 ae 00 00 00 06 00 03 0c 7f 00 64
The following fragment is an attack instance attempting to corrupt the PLC
memory by invoking a vulnerable diagnostic function (byte value 0x08) with
invalid data (bytes 0x00 0x04 0x00 0x00 ):
00 00 00 00 00 06 0a 08 00 04 00 00
We ﬁrst observe that the anomalous value in this payload are the byte value of the
function code, and the subsequent four bytes (never observed in the training set
on that same positions). There are 6 3-grams over 10 (60%) which are not present
in the valid request. The number of distinct 3-grams observed during training is
not much bigger than the one observable in the aforementioned request, due to
the large number of duplicated payloads. Thus, with such a small packet size,
even a few bytes with unusual value can make a big diﬀerence.
On the other hand, from the results in Table 3 we see that for all the algorithms
there is always a signiﬁcant increase in the amount of false positives raised when
the threshold is adjusted to detect all attack instances. We observe that the
attack instances that do not get detected before the threshold is adjusted are
similar to the one in the following example:
00 00 00 00 00 02 0a 11
370
D. Hadˇziosmanovi´c et al.
This 8 bytes long message is the smallest possible Modbus message allowed by
the protocol speciﬁcation. We acknowledge that this request is not unusual only
because of its size, but also because the function code value 0x02 (corresponding
to the request “report slave ID”) was never observed during training. We have
veriﬁed that the only 3-gram in this payload not observed during the training
is the last one 0x02 0x0a 0x11. Thus, in spite of the small size of this payload,
the threshold has to be lowered in order to detect it. Detecting such anomalous
packet (with only one anomalous n-gram) in a bigger message would be much
more diﬃcult.
6 Related Work
To the best of our knowledge, Ingham and Inoue describe the most recent frame-
work for testing the performance of IDS algorithms [18]. The authors focus on
HTTP traﬃc. The framework is based on the general principle that testing dif-
ferent IDS algorithms on the same network environment and with the same net-
work and attack data allows a better comparison of the algorithms’ performance,
which would be impossible by re-using the results of the unrelated, individual
tests run by the algorithm developers. They collect background web traﬃc from
four diﬀerent websites and create a publicly available set of network traces.
The traces contain instances of web attacks generated by running exploitation
tools downloaded from popular vulnerability repositories (e.g., BugTraq, Secu-
rityFocus and the Open Source Vulnerability Database). There are other IDS
evaluation frameworks, as reported in [18], but are all quite dated.
In [31] Song et al. show that polymorphic behaviour in shellcodes is too greatly
spread to be modeled eﬀectively. The authors note that it is diﬃcult to model
data with high variability, especially in case the adversary is able to inject some
“normal” looking n-grams into the attack payload to make it look legitimate.
Our experiments with SMB traﬃc conﬁrm that, not only this observation is
true for polymorphic shellcode traﬃc, but even for regular attacks that do not
leverage any evasion techniques.
7 Conclusion
In this paper we present a thorough analysis of several n-gram-based algorithms
for network-based anomaly detection. We investigate the performance of state-
of-the-art detection algorithms when analyzing network traﬃc from two binary
protocols. We believe our analysis allows us to draw interesting observations and
conclusions.
First, despite the fact that the attack instances on the SMB/CIFS proto-
cols are correctly detected, all studied algorithms incur in a high penalty in
terms of false positives they raise. Concretely, it would be expensive to deploy
them independently in a real environment. On the other hand, if we restrict
the ﬁeld to the Modbus protocol alone, Anagram detects almost every attack
instance with a rate of false positives lower than the 10 alerts per day threshold.
On the Feasibility of the N-Gram Network Analysis for Binary Protocols
371
We believe that with such performance the algorithm could be deployed in a real
environment.
Second, all studied algorithms trigger on the exploitation payload. We can
observe this by selecting two diﬀerent attack instances that exploit the same
vulnerability, but using two diﬀerent attack payloads. In several cases, while one
instance is detected even with a low threshold, to detect both attacks one needs
to increase the threshold signiﬁcantly. The previously missed attack instance
usually contains a small-size attack payload, and thus “blends” more easily with
the normal payload data, thereby avoiding detection.
Third, there is no absolute best algorithm among the ones we studied. Ana-
gram performs slightly better than the rest when analyzing the ﬁltered SMB/CIFS
and the Modbus protocols, but it is also the one performing worst when the ﬁlter
is not applied. Technically, this is due to the fact that the unﬁltered SMB/CIFS
traﬃc contains several n-grams that are also present in the attack payloads. This
supports the intuition that variability of the network traﬃc has a great impact
on the performance of these systems. Indeed, every studied algorithm is aﬀected
by this, allowing us to conclude that, rather than the single implementation, it
is the underlying principle of capturing regularity in the unstructured packet
payload that does not hold true. Our results show that n-gram analysis quickly
becomes incapable of capturing relevant content features when analysing mod-
erately variable traﬃc. This problem could be partly alleviated by deploying
the detection system in combination with some other sensor that will verify the
correctness of alerts [35]. We believe that a more promising approach is the one
focusing on identifying chunks of payload (that represent some kind of semantic
units) and applying the n-gram analysis on those. For example, several authors
propose to exploit the syntactical knowledge of the HTTP protocol to improve
the overall performance of anomaly-based systems, e.g. in [30]. We foresee that
a similar approach could be applied to binary protocols as well. Another issue
that remains still open is how to “measure” traﬃc variability without having to
run several empirical experiments.
Acknowledgements. We thank Davide Ariu for providing the McPAD source
code and supporting during tests. The research leading to these results has been
supported by the Ministry of Security and Justice of the Kingdom of the Nether-
lands through projects Hermes, Castor and Midas and by the European Commis-
sion through project FP7-SEC-285477-CRISALIS funded by the 7th Framework
Program.
References
1. Ariu, D., Tronci, R., Giacinto, G.: HMMPayl: An intrusion detection system based
on Hidden Markov Models. Computers and Security 30(4), 221–241 (2011)
2. Athanasiades, N., Abler, R., Levine, J., Owen, H., Riley, G.: Intrusion Detection
Testing and Benchmarking Methodologies. In: IWIA 2003: Proc. 1st IEEE Inter-
national Workshop on Information Assurance, pp. 63–72. IEEE Computer Society
Press (2003)
372
D. Hadˇziosmanovi´c et al.
3. Auriemma, L.: Advisories (March 2011), http://aluigi.altervista.org/ (ac-
cessed March 2012)
4. Axelsson, S.: The base-rate fallacy and the diﬃculty of intrusion detection. ACM
Transactions on Information and System Security 3(3), 186–205 (2000)
5. Bloom, B.H.: Space/time trade-oﬀs in hash coding with allowable errors. Commu-
nications of the ACM 13(7), 422–426 (1970)
6. Bolzoni, D., Zambon, E., Etalle, S., Hartel, P.H.: POSEIDON: a 2-tier Anomaly-
based Network Intrusion Detection System. In: IWIA 2006: Proc. 4th IEEE In-
ternational Workshop on Information Assurance, pp. 144–156. IEEE Computer
Society Press (2006)
7. Microsoft Security Response Center. Microsoft Security Bulletin,
http://technet.microsoft.com/en-us/security/bulletin/
(accessed March 2012)
8. Microsoft Security Response Center. Conﬁcker Worm: Help Protect Windows from
Conﬁcker (April 2009),
http://technet.microsoft.com/en-us/security/dd452420.aspx
(accessed March 2012)
9. Cui, A., Stolfo, S.J.: Defending Embedded Systems with Software Symbiotes. In:
Sommer, R., Balzarotti, D., Maier, G. (eds.) RAID 2011. LNCS, vol. 6961, pp.
358–377. Springer, Heidelberg (2011)
10. Damashek, M.: Gauging similarity with n-grams: Language-independent catego-
rization of text. Science 267(5199), 843–848 (1995)
11. Digital Bond, Inc. QuickDraw SCADA IDS,
http://www.digitalbond.com/tools/quickdraw/ (accessed March 2012)
12. Dussel, P., Gehl, C., Laskov, P., Busser, J., St¨ormann, C., K¨astner, J.: Cyber-
Critical Infrastructure Protection Using Real-Time Payload-Based Anomaly De-
tection. In: Rome, E., Bloomﬁeld, R. (eds.) CRITIS 2009. LNCS, vol. 6027, pp.
85–97. Springer, Heidelberg (2010)
13. Mu Dynamics. pcapr, http://pcapr.net (accessed March 2012)
14. Falliere, N., Murchu, L.O., Chien, E.: W32.Stuxnet Dossier. Technical report,
Symantec (September 2010)
15. Fogla, P., Sharif, M., Perdisci, R., Kolesnikov, O., Lee, W.: Polymorphic blend-
ing attacks. In: Proc. 15th USENIX Security Symposium, pp. 241–256. USENIX
Association (2006)
16. Forrest, S., Hofmeyr, S.A.: A Sense of Self for Unix Processes. In: S&P 1996: Proc.
17th IEEE Symposium on Security and Privacy, pp. 120–128. IEEE Computer
Society Press (2002)
17. Gu, G., Porras, P., Yegneswaran, V., Fong, M., Lee, W.: BotHunter: Detecting
Malware Infection Through IDS-Driven Dialog Correlation. In: Proc. 16th USENIX
Security Symposium (Security 2007). USENIX Association (2007)
18. Ingham, K.L., Inoue, H.: Comparing Anomaly Detection Techniques for HTTP.
In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID 2007. LNCS, vol. 4637, pp.
42–62. Springer, Heidelberg (2007)
19. Kohonen, T.: Self-Organizing Maps, Second Extended Edition. Springer Series in
Information Sciences, vol. 30. Springer (1995)
20. MSDN Library. [MS-CIFS]: Common Internet File System (CIFS) Protocol Spec-
iﬁcation, http://msdn.microsoft.com/en-us/library/ee442092v=prot.13.aspx
(accessed March 2012)
21. Lippmann, R.P., Haines, J.W., Fried, D.J., Korba, J., Das, K.: The 1999 DARPA
oﬀ-line intrusion detection evaluation. Computer Networks: The International
Journal of Computer and Telecommunications Networking 34(4), 579–595 (2000)
On the Feasibility of the N-Gram Network Analysis for Binary Protocols
373
22. Loscocco, P.A., Smalley, S.D., Muckelbauer, P.A., Taylor, R.C., Turner, S.J., Far-
rell, J.F.: The Inevitability of Failure: The Flawed Assumption of Security in Mod-
ern Computing Environments. In: NISSC 1998: Proc. 21st National Information
Systems Security Conference, pp. 303–314 (1998)
23. Mahoney, M.V., Chan, P.K.: An Analysis of the 1999 DARPA/Lincoln Labora-
tory Evaluation Data for Network Anomaly Detection. In: Vigna, G., Kruegel, C.,
Jonsson, E. (eds.) RAID 2003. LNCS, vol. 2820, pp. 220–237. Springer, Heidelberg
(2003)
24. Metasploit Penetration Testing Software, http://metasploit.com/
(accessed March 2012)
25. Mirkovic, J., Reiher, P.: A taxonomy of DDoS attack and DDoS defense mecha-
nisms. SIGCOMM Comput. Commun. Rev. 34, 39–53 (2004)
26. Nakayama, T.: W32.Sasser.Worm. Technical report, Symantec (April 2004)
27. NIST: National Institute of Standards and Technologies. National Vulnerability
Database, http://nvd.nist.gov (accessed March 2012)
28. Perdisci, R., Ariu, D., Fogla, P., Giacinto, G., Lee, W.: McPAD: A multiple classiﬁer
system for accurate payload-based anomaly detection. Computer Networks 53(6),
864–881 (2009)
29. Sommer, R., Paxson, V.: Outside the Closed World: On Using Machine Learning
for Network Intrusion Detection. In: S&P 2010: Proc. 31st IEEE Symposium on
Security and Privacy, pp. 305–316. IEEE Computer Society (2010)
30. Song, Y., Stolfo, S.J., Keromytis, A.D.: Spectrogram: A Mixture-of-Markov-Chains
Model for Anomaly Detection in Web Traﬃc. In: NDSS 2009: Proc. 16th ISOC
Symposium on Network and Distributed Systems Security. The Internet Society
(2009)
31. Song, Y., Locasto, M.E., Stavrou, A., Keromytis, A.D., Stolfo, S.J.: On the in-
feasibility of modeling polymorphic shellcode. In: Proceedings of the 14th ACM
Conference on Computer and Communications Security, CCS 2007, pp. 541–551.
ACM, New York (2007)
32. Swales, A.: Open MODBUS/TCP Speciﬁcation (March 1999)
33. The OWASP Foundation. OWASP: The Open Source Web Application Security
Project, https://www.owasp.org (accessed March 2012)
34. Vapnik, V.N., Lerner, A.: Pattern recognition using generalized portrait method.
Automation and Remote Control 24 (1963)
35. Wang, K., Parekh, J.J., Stolfo, S.J.: Anagram: A Content Anomaly Detector Re-
sistant to Mimicry Attack. In: Zamboni, D., Kruegel, C. (eds.) RAID 2006. LNCS,
vol. 4219, pp. 226–248. Springer, Heidelberg (2006)
36. Wang, K., Stolfo, S.J.: Anomalous Payload-Based Network Intrusion Detection.
In: Jonsson, E., Valdes, A., Almgren, M. (eds.) RAID 2004. LNCS, vol. 3224,
pp. 203–222. Springer, Heidelberg (2004)