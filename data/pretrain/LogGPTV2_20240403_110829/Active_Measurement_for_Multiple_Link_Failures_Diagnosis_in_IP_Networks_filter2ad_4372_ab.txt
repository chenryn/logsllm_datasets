the probe selection problem.
We now give an algorithm, which we call the the Probe Selection (PS) algo-
rithm, that ﬁnds the basis of . The weight of a vector is deﬁned as
the number of 1 entries in that vector. Let us denote the elements of R(Dmax)
by {−→r 1,−→r 2, ...,−→r nPmax
}, where nPmax = |Pmax|. The PS algorithm constructs
the set R(D∗) as follows.
The PS algorithm
Step 1: Initialize R(D∗) to an empty set, and set an integer i to 1;
Step 2: Sort and re-index the vectors in R(Dmax) in increasing weight order.
Step 3: Until R(Dmax) (cid:3)= ∅ repeat the loop: remove −→r i from R(Dmax); increase
i by 1; if −→r i /∈ , then append −→r i to R(D∗).
Step 4: return R(D∗).
Theorem 2. The set of vectors R(D∗) returned by the PS algorithm is the basis
of .
Proof. First, we prove that the vectors in R(D∗) are independent. Let us re-
index the vectors −→r i in R(D∗) in the order of inclusion to R(D∗) by the PS
algorithm. Step 3 of the PS algorithm prevents any −→r i ∈ R(D∗) to be obtained
by OR-ing any combination of vectors in {−→r i−1,−→r i−2, ...,−→r 1}. Furthermore, −→r i
is not an OR-ing of any combination of vectors in {−→r i+1, ...,−→r |R(D∗)|}. Indeed,
if this was true, then the weight of −→r i would be larger than the weight of these
vectors, which is impossible because by construction the weight of −→r i is smaller
than or equal to the weight of −→r j for all j > i. From the above results, any
Active Measurement for Multiple Link Failures Diagnosis
191
vector −→r i ∈ R(D∗) is not an OR-ing of any combination of other vectors in
R(D∗), hence the set R(D∗) is independent.
Second, we prove that  = . Indeed, by construction,
any vector in the set {−→r 1, ...,−→r nPmax
} either belongs to R(D∗), or is an OR-ing
(cid:6)(cid:7)
of some combinations of vectors in R(D∗).
Note here that for any two nodes s and t, if Pt,s and Ps,t contain the same
links, then the two row vectors that represent the probe from s to t, and the
probe from t to s are equal. Furthermore, the vector that represents the path
Pt,s can only be generated by probes from at most two beacons (at s and t).
4 Beacon Placement Problem
We have shown in Section 3 that given a set of beacons VB, there is an optimal set
of row vectors R(D∗) of the dependency matrix that the beacons need to generate
for multiple failure diagnosis. Once the optimal set of row vectors R(D∗) is
determined, to generate these vectors we may not need all the available beacons.
We are now interested in ﬁnding the minimal number of beacons needed to
generate the probes corresponding to the vectors in R(D∗); this is the beacon
placement problem deﬁned as follows.
Deﬁnition 5. [BP problem] Given a network G = (V,E), with VB possible
positions where we can place the beacons, the beacon placement ( BP) problem
is the determination of the smallest subset V∗ of VB such that any two sets of
links E1 and E2 that are distinguished by probes of VB are also distinguished by
probes of V∗.
We solve the beacon placement problem as follows. We ﬁrst assume that all
nodes in VB are used as beacons and ﬁnd the optimal set of row vectors R(D∗)
for this setting using the PS algorithm described in Section 3. We then look for
the smallest subset V∗ of VB such that the set of vectors corresponding to probes
from nodes in V∗ contains R(D∗).
4.1 Hardness of the Beacon Placement Problem
Theorem 3. The beacon placement problem is NP-hard.
Proof. The proof for this theorem is straightforward when we realize that in a
network that uses shortest path routing with all links have equal weight, and with
VB = V, the BP problem reduces to the well-known vertex cover problem [12].(cid:6)(cid:7)
4.2 A Greedy Algorithm for the Beacon Placement Problem
We now present a greedy beacon placement (BP) algorithm, which constructs
V∗, given R(D∗). Let Vapprox be the set of beacons returned by the BP algorithm,
and let A and C be two subsets of R(D∗). For a beacon u, let us denote by R(u)
192
H.X. Nguyen and P. Thiran
The BP algorithm
The BP algorithm is said to have an approximation ratio ρ(n) if for every
the set of all vectors representing probes that can be generated from u. The steps
of the BP algorithm are as follows.
Step 1: Initialize Vapprox and A to empty sets, C to R(D∗) .
Step 2: Until C (cid:3)= ∅ repeat the loop: pick a vector −→r ∈ C and append −→r to A; if
for all nodes u in VB, −→r ∈ R(u), then include u in Vapprox and remove all the
vectors in R(u) from C.
Step 3: Return Vapprox.
graph G with n nodes, |Vapprox|/|V∗| ≤ ρ(n).
Theorem 4. The BP algorithm has a constant approximation factor of 2.
Proof. From Step 2 of the algorithm, for each vector in A, we add one or two
nodes (as explained at the end of Section 3.2, there is a maximum of two beacons
that can send probes taking the same path and hence are represented by the same
vector) to Vapprox, hence |Vapprox| ≤ 2 · |A| (*).
Any solution must include, for every vector in A, at least one beacon that can
generate it. Furthermore, by construction, no two vectors in A can be generated
by the same beacon. So the optimal beacon selection V∗ is of size |V∗| ≥ |A|
(**).
(cid:6)(cid:7)
Combining (*) and (**), we get |Vapprox| ≤ 2 · |V∗|.
5 Experimental Study
We apply our algorithms on ISP topologies that are inferred by the Rocketfuel
tool [2]. We investigate the number of beacons and the number of probes required
for multiple failures diagnosis by our algorithms to that needed for single failure
diagnosis by algorithms in [6] on three backbone ISP topologies with sizes ranging
from small (Exodus: 80 nodes and 147 links) to medium (Telstra: 115 nodes and
153 links), and large (Tiscali: 164 nodes and 328 links). For the sake of simplicity,
we assume that all the ISPs use shortest path routing to route traﬃc.
Recall that n is the number of nodes in the network. In our experiments, the
number of nodes that be can be used as beacons (beacon candidates) |VB| is
varied from n/100 to n. We select the beacon candidates randomly by picking
a random permutation of the set of nodes in the network. After building the
dependency matrix as in Section 3, we run the PS algorithm to ﬁnd the optimal
set of probes and then the BP algorithm to ﬁnd the set of beacons that are
required to generate these probes. We also run the algorithms described in [6] to
ﬁnd the set of beacons and the set of probes for single fault diagnosis. For space
constraints, we only present in this paper the results for the Tiscali topology.
Similar results are obtained for the two other topologies. In Fig. 1, we plot the
percentage of nodes that are actually used as beacons for multiple failures dia-
gnosis and single failure diagnosis. We also plot the percentage of useful probes
returned by the PS algorithm and the single fault algorithm [6] in Fig. 2.
The number of useful beacons |V∗| for multiple failures diagnosis is notably
smaller than the number of possible beacon nodes for all sizes of the set |VB| of
Active Measurement for Multiple Link Failures Diagnosis
193
n
/
|
*
V
|
s
n
o
c
a
e
b
l
u
f
e
s
u
f
o
e
g
a
t
n
e
c
r
e
P
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
Tiscali-single
Tiscali-multiple
 0
 10
 20
 30
 40
 50
 60
 70
 80
 90  100
Percentage of nodes that can be used as beacons |VB|/n
|
x
a
m
P
|
/
|
*
P
|
s
e
b
o
r
p
l
u
f
e
s
u
f
o
e
g
a
t
n
e
c
r
e
P
 50
 45
 40
 35
 30
 25
 20
 15
 10
 5
 0
 0
Tiscali-single
Tiscali-multiple
 20
 10
Percentage of nodes that can be used as beacons |VB|/n
 30
 40
 60
 70
 50
 80
 90  100
Fig. 1. The number of beacons for single
and multiple failure(s) diagnosis.
Fig. 2. The number of probes for single
and multiple failure(s) diagnosis.
beacon candidates. This is especially true when the number of beacon candidates
is large. We also observe a fast increase in the number of beacons useful for
multiple failure diagnosis when the number of beacon candidates increases. This
can be explained by the increase in number of multiple failures that can be
distinguished by the beacons. However, for single fault diagnosis, the number of
beacons increases very slowly, as probes from even a small set of beacons are
enough to detect and locate all single failures.
We observe that for all sizes of the set of beacon candidates, the number of
useful probes |P∗| is less than a half of the total number of probes |Pmax| that
can be sent in the network. The percentage of useful probes also decreases rapidly
as the number of beacons increases for both multiple and single failure(s) cases.
This observation can be explained for both the single and multiple failure cases as
follows. In the single failure case, the number of useful probes remains relatively
unchanged (approximately equal to the number of links) for various numbers of
beacon candidates. Hence, when the total number of probes that can be sent in
the network increases with the number of beacon candidates, the percentage of
useful probes decreases. In the multiple fault case, the number of useful probes
decreases as the number of beacon candidates increases, because these additional
beacon candidates make it possible to replace a number of diﬀerent probes by a
single probe that distinguishes the same failure sets. There remains however a
large diﬀerence in the number of probes for multiple and single failure diagnosis
in Fig. 2.
6 Conclusions
In this paper, we have investigated the use of active probing for link failure
diagnosis in ISP networks. We have shown that for multiple failures diagnosis
the optimal set of probes can be found in polynomial time. On the contrary, the
problem of optimizing the number of beacons for multiple failures diagnosis is
NP-hard. We have studied the performance of our algorithms on existing ISP
topologies. Our studies show that there is a great reduction in the number of
probes and beacons that are available and the number of probes and beacons
194
H.X. Nguyen and P. Thiran
that are actually useful for multiple failures diagnosis. However, there are also
remarkable diﬀerences in the number of probe and the number of beacons for
single and multiple fault diagnosis in all analyzed ISP topologies. These ﬁgures
can be used by ISP operators to trade oﬀ accuracy of diagnosis for probing costs.
We are working on various extensions of the present work. We obtained in
this paper the optimal set of useful probes. The next step is to determine the
failure detection capacity of the optimal set of probes, that is, to ﬁnd the number
of failures of a given multiplicity (double, triple, etc.) that can be detected and
located by this probing scheme. We are also investigating how an active probing
scheme can cope with missing and false probes. The challenge is to improve the
robustness of the probing scheme to probe errors without much increasing in the
probing costs.
References
1. A.Markopoulou, G.Iannaccone, S.Bhattacharyya, C.N.Chuah, C.Diot: Characte-
rization of Failures in an IP Backbone. Proc. IEEE INFOCOM’04 (2004)
2. N.Spring, R. Mahajan, D.Wetherall: Measuring ISP topologies with Rocketfuel.
Proc. of ACM SIGCOMM (2002)
3. G.Govindan, H.Tangmunarunkit: Heuristics for internet map discovery. Proc.
IEEE INFOCOM’00 (2000)
4. S.Jamin, C.Jin, Y.Jin, D.Raz, L.Zhang: On the placement of internet instrumen-
tation. Proc. IEEE INFOCOM’00 (2000)
5. M.Adler, T.Bu, R.K.Sitaraman, D.Towsley: Tree layout for internal network cha-
racterizations in multicast networks. Networked Group Comm. (2001) 189–204
6. Y.Bejerano, R.Rastogi: Robust monitoring of link delays and faults in IP networks.
Proc. IEEE INFOCOM’03 (2003)
7. J.Horton, A.Lopez-Ortiz: On the number of distributed measurement points for
network tomography. IMC’03 (2003)
8. S.W.Richard: TCP/IP illustrated. Addision-Wesley Publishing Company (1994)
9. CAIDA: Cooperative Association for Internet Data Analysis.
(http://www.caida.org/Tools/Skitter)
10. E.Wagneur: Moduloids and pseudomodules: 1 dimension theory. Discrete Mathe-
matics 98 (1991) 57–73
11. J.Kim : Boolean Matrix theory and applications. Marcel Dekker (1982)
12. M.R.Garey, D.S.Johnson: Computers and Intractibility: A guide to the theory of
NP-completeness. W. H. Freeman (1979)