---
tags: ['计算机网络']
books: [
  {name: '计算机网络:自顶向下方法'}
]
links: [
  'https://icyfenix.cn/architect-perspective/general-architecture/diversion-system/cdn.html'
]
---
# HTTP协议
- 基于TCP/IP的高级协议
- 默认端口号:80
- 基于请求/响应模型的:一次请求对应一次响应
- 无状态的：每次请求之间相互独立，不能交互数据
## 基础概念
- URI
![批注 2020-03-07 204209](/assets/批注%202020-03-07%20204209.png)
- 请求报文
![202037204550](/assets/202037204550.png)
- 响应报文
![202037204611](/assets/202037204611.png)
## HTTP方法
- GET
获取资源
- HEAD
与GET类似，但不返回报文的实体主体
- POST
主要用来传输数据
- PUT
上传文件
- PATCH
对资源进行部分修改
- DELETE
删除文件
- OPTIONS
查询指定的 URL 能够支持的方法
- CONNECT
要求在与代理服务器通信时建立隧道
- TRACE
服务器会将通信路径返回给客户端
## 状态码
分类  | 分类描述
--- | -----------------------
1** | 信息，服务器收到请求，需要请求者继续执行操作
2** | 成功，操作被成功接收并处理
3** | 重定向，需要进一步的操作以完成请求
4** | 客户端错误，请求包含语法错误或无法完成请求
5** | 服务器错误，服务器在处理请求的过程中发生了错误
### 1XX
100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应
### 2XX
- 200 OK
- 204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用
- 206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容
### 3XX
- 301 Moved Permanently ：永久性重定向
- 302 Found ：临时性重定向
- 303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源
- 304 Not Modified ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码
- 307 Temporary Redirect ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法
### 4XX
- 400 Bad Request:语法错误
- 401 Unauthorized:需要认证
- 403 Forbidden:请求被拒绝
- 404 Not Found
### 5XX
- 500 Internal Server Error ：服务器正在执行请求时发生错误
- 503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求
## Cookie
Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一客户端
用途：
- 会话状态管理
- 个性化设置
- 浏览器行为跟踪
### 创建过程
服务的响应头Set-Cookie头部：
```html
Set-Cookie: yummy_cookie=choco
Set-Cookie: tasty_cookie=strawberry
```
客户端之后对同一服务器发送请求时，都会在请求头Cookie头部带上这个Cookie
```html
Cookie: yummy_cookie=choco; tasty_cookie=strawberry
```
### 分类
- 会话期Cookie：浏览器关闭之后它会被自动删除，没有指定过期时间就是会话期Cookie
- 持久性 Cookie：指定过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie
```html
Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2020 07:28:00 GMT;
```
### 作用域
Domain 标识Cookie在哪些域名下有效，如果不指定，默认是当前文档的主机
如果指定了Domain，则一般包括子域名，如baidu.com，包含map.baidu.com
### JS访问
JavaScript可以通过document.cookie来创建cookie或者访问非HttpOnly的Cookie
### HttpOnly
标记为 HttpOnly 的 Cookie 不能被 JavaScript 脚本调用
```html
Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2020 07:28:00 GMT; Secure; HttpOnly
```
### Secure
标记为 Secure 的 Cookie 只能通过被 HTTPS 协议加密过的请求发送给服务端
### Session
Session是通过在服务端生成一个key，使用这个key为索引在服务器端存放用户信息，后将这个key作为cookie返回给客户端，让客户端使用这个key来操作
应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，还需要使用二重验证的方式
#### Cookie与Session
比较类别 | Session | Cookie
---- | ------- | ------
存储方式 | 服务端     | 客户端
大小限制 | 无       | 有
安全   | 较安全     | 较不安全
- cookie一般用于存出少量的不太敏感的数据，在不登录的情况下，完成服务器对客户端的身份识别
### cookie 压缩
gzip只能对body进行压缩 cookie位于头上 需要手动编程对http header 进行处理
### 浏览器禁用cookie
当浏览器无法使用Cookie，只能使用session，此外，session id也不能通过cookie来传递，而是需要通过URL传参的方式来传递，如wap时代的sid
### 注意事项
- Cookie的Name不能和属性值一样 比如Doamin MaxAge等待
- Name和Value不能设置成非ASCII字符
- 不同的浏览器都会对Cookie的大小以及数量进行限制 需要注意
## 连接管理
### 连接类型
#### 短连接
每进行一次 HTTP 通信就要新建一个 TCP 连接
#### 并行连接
通过连续发起多个不同连接 来解决串行HTTP请求的长时延
也并非并行连接就能更快 还需要考虑到带宽 服务器等因素
#### 长连接
- 减少了TCP连接建立的开销
从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 Connection : close，HTTP/2 里，连接关闭是通过另外的机制实现的，与 Connection 头部无关
加快VIP切换时的收敛速度：
```mermaid
sequenceDiagram
  客户端 ->> LB: 请求
  LB ->> 客户端: serverA
  客户端 ->> serverA: HTTP
  serverA ->> 客户端: Connection:Keep-Alive
  客户端 ->> serverA: 其他事务
  serverA ->> 客户端: Connection:Close
  客户端 ->> LB: 请求
  LB ->> 客户端: serverB
  客户端 ->> serverB: HTTP
```
在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 Connection : Keep-Alive
对于不认识Connection的代理服务器，会将Connection首部也一并转发，从而造成连接被挂住
![哑代理挂住了请求](/assets/屏幕截图%202022-01-05%20181622.png)
```http
Keep-Alive: max=5, timeout=120 // 最多为5个事务保持连接状态 或最多保持120秒的空闲时间
```
#### 流水线
流水线是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟
![流水线连接](/assets/屏幕截图%202022-01-06%20171127.png)
要求服务端必须按客户端发送的请求顺序响应数据
### 连接关闭
HTTP的连接可以在任意时刻关闭，针对HTTP编程要处理这种情况
使用Content-Length 来提供接下去所传输的数据大小，从而让对方知悉传输情况
基于TCP的HTTP继承了TCP的关关闭功能，也就是可以关闭输入或者输出通道，当对方的输入通道关闭后，己方若继续发送数据，就会得到一个连接被重置的错误
良好的关闭实现应该是首先关闭己方的输出，然后等待对方的输出通道关闭，这样就可以安全地关闭
## 内容协商
### 服务端驱动
客户端设置Accept、Accept-Charset、Accept-Encoding、Accept-Language等首部，服务端根据这些首部返回特定资源
### 代理驱动
服务器返回 300 Multiple Choices 或者 406 Not Acceptable，客户端从中选出最合适的那个资源
### vary
一个客户端发送了一个包含 Accept-Language 首部字段的请求之后，源服务器返回的响应包含 Vary: Accept-Language 内容，缓存服务器对这个响应进行缓存之后，在客户端下一次访问同一个 URL 资源，并且 Accept-Language 与缓存中的对应的值相同时才会返回该缓存
## 内容编码
内容编码有：gzip、compress、deflate、identity
浏览器发送 Accept-Encoding 首部，其中包含有它所支持的压缩算法，以及各自的优先级。服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 Content-Encoding 首部来告知浏览器它选择了哪一种算法
## 范围请求
- Range
请求报文中添加 Range 首部字段指定请求的范围
```html
Range: bytes=0-1023
```
成功的话服务器返回的响应包含 206 Partial Content
请求的范围越界的情况下，服务器会返回 416 Requested Range Not Satisfiable 状态码
不支持范围请求的情况下，服务器会返回 200 OK 状态码
- Accept-Range
用于告知客户端是否能处理范围请求，可以处理使用 bytes，否则使用 none
### 分块传输
Chunked Transfer Encoding，可以把数据分割成多块，让浏览器逐步显示页面
### 多部分对象集合
一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔
如
```html
Content-Type: multipart/form-data; boundary=AaB03x