# 基于IOCTLBF框架编写的驱动漏洞挖掘工具KDRIVER FUZZER
##### 译文声明
本文是翻译文章，文章原作者 k0shl，文章来源：whereisk0shl.top
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
> 作者：k0shl；
>
> 作者博客：https://whereisk0shl.topioctlbf；
>
> 项目地址：https://github.com/koutto/ioctlbfkDriver Fuzzer；
>
> 项目地址：https://github.com/k0keoyo/kDriver-Fuzzer
## kDriver Fuzzer使用说明
首先感谢ioctlbf框架作者，我在这半年的时间阅读调试了很多优秀的fuzzer，受益良多，自己也有了很多想法，正在逐步实现。同时当我调试ioctlbf的时候发现了一些问题，于是基于ioctlbf框架，加了一些自己的想法在里面，有了这个kDriver
Fuzzer，利用这个kDriver
Fuzzer，我也在2017年收获了不同厂商，不同驱动近100个CVE，其实关于驱动的Fuzz很早就有人做了，我将我这个kDriver
Fuzzer开源出来和大家分享共同学习（必要注释已经写在代码里了），同时春节将近，在这里给大家拜年，祝大家新年红包多多，0day多多！（由于并非是自己从头到尾写的项目，其中有部分编码习惯造成的差异（已尽量向框架作者靠拢）请大家见谅，同时代码写的还不够优雅带来的算法复杂度以及代码冗余也请大家海涵，以及一些待解决的问题未来都会逐步优化：））
### 一些环境说明：
编译环境：Windows 10 x64 build 1607
项目IDE：VS2013
测试环境：Windows 7 x86、Windows 10 x86 build 1607
### 参数介绍：
“-l” ：开启日志记录模式（不会影响主日志记录模块）
“-s” ：驱动枚举模块
“-d” ：打开设备驱动的名称
“-i” ：待Fuzz的ioctl code，默认从0xnnnn0000-0xnnnnffff
“-n” ：在探测阶段采用null pointer模式，该模式下极易fuzz 到空指针引用漏洞，不加则常规探测模式
“-r” ：指定明确的ioctl code范围
“-u” ：只fuzz -i参数给定的ioctl code
“-f” ：在探测阶段采用0x00填充缓冲区
“-q” ：在Fuzz阶段不显示填充input buffer的数据内容
“-e” ：在探测和fuzz阶段打印错误信息（如getlasterror()）
“-h” ：帮助信息
### 常用Fuzz命令实例：
#### kDriver Fuzz.exe -s
进行驱动枚举，将CreateFile成功的驱动设备名称，以及部分受限的驱动设备名称打印并写入Enum Driver.txt文件中
##### kDriver Fuzz.exe -d X -i 0xaabb0000 -f -l
对X驱动的ioctl code 0xaabb0000-0xaabbffff范围进行探测及对可用的ioctl
code进行fuzz，探测时除了正常探测外增加0x00填充缓冲区探测，开启数据日志记录（如增加-u参数，则只对ioctl code
0xaabb0000探测，若是有效ioctl code则进入fuzz阶段）
#### kDriver Fuzz.exe -d X -r 0xaabb1122-0xaabb3344 -n -l
对X驱动的ioctl code 0xaabb1122-0xaabb3344范围内进行探测，探测时采用null pointer模式，并数据日志记录
### 日志文件
log： 主日志记录文件
Enum_Driver.txt： 驱动枚举记录文件
log_detect： 探测模块日志记录文件
log_fuzz： fuzz模块日志记录文件
log_database： ioctl list数据库记录模块
### CVE案例
CVE-2017-16948、CVE-2017-17049、CVE-2017-17050、CVE-2017-17113、CVE-2017-17114、CVE-2017-17683、CVE-2017-17684、CVE-2017-17700等等等等..
CVE-2017-17861 Jungo WinDriver空指针引用
CVE-2017-17112 IKARUS AntiVirus池溢出漏洞
* * *
## kDriver Fuzzer整体架构及Fuzz思路
* * *
稍微讲一下这个思路，以及和原ioctlbf的一些区别，有些不细讲后面会提到。
#### Step 1
首先通过CreateFile打开设备驱动，之后进入ioctl code的探测部分，主要探测有效的ioctl
code，这里ioctlbf中采用的是在DeviceIOControl中直接用NULL来作为Input Buff和Input Buff
size，在我调试过程中发现，这样做会产生大量的空指针引用漏洞，这样就不好进入后面的Fuzz过程，我在对某厂驱动进行fuzz的过程中发现某个ioctl
code除了空指针引用漏洞，后面还会因为input buff中某个特殊的结构体产生内存破坏，这是我把null
pointer这个模块单独分离出来，并加入了一个正常填充后发现的。
这里如果ioctl code无效，则直接返回，开始对下一个ioctl code进行探测，最后的记录是在一个结构体，同时我用日志模块记入数据库后面会说。
#### Step 2
随后会根据-f参数选择是否0x00填充，因为常规模式是使用0x41填充缓冲区（这里也可以考虑改成随机数据填充，但这里随机数据在后面fuzz中有了），而我在对多家厂商驱动进行fuzz的时候发现，0x00填充也会产生一些问题，比如空指针引用等，ioctlbf中-f参数的功能我没太弄懂为什么要加，所以这里根据我的实战后的一些想法进行了修改。