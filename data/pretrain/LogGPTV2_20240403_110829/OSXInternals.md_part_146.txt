file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 25 of 90
structurefor example, the cnode and inode structures in the case of HFS Plus and UFS, respectively.
Because of the arrangement shown in Figure 1112, the code outside of the VFS layer usually need not
worry about file system differences. Incoming file and file system operations are routed through the vnode
and mount structures, respectively, to the appropriate file systems.
Technically, code outside the VFS layer should see the vnode and mount structures as opaque handles. The
kernel uses vnode_t and mount_t, respectively, as the corresponding opaque types.
Figure 1113 shows a more detailed view of key vnode/vfs data structures. The mountlist global variable
is the head of a list of mount structuresone per mounted file system. Each mount structure has a list of
associated vnodesmultiple lists, actually (the mnt_workerqueue and mnt_newvnodes lists are used when
iterating over all vnodes in the file system). Note that the details shown correspond to a mounted HFS Plus
file system.
Figure 1113. A mounted file system and its vnodes
[View full size image]
The kernel maintains an in-memory vfstable structure ([bsd/sys/mount_internal.h]) for each file
system type supported. The global variable vfsconf points to a list of these structures. When there is a
mount request, the kernel searches this list to identify the appropriate file system. Figure 1114 shows an
overview of the vfsconf list, which is declared in bsd/vfs/vfs_conf.c.
Figure 1114. Configuration information for file system types supported by the kernel
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 26 of 90
There also exists a user-visible vfsconf structure (not a list), which contains a subset of the information
contained in the corresponding vfstable structure. The CTL_VFS VFS_CONF sysctl operation can be
used to retrieve the vfsconf structure for a given file system type. The program in Figure 1115 retrieves
and displays information about all file system types supported by the running kernel.
Figure 1115. Displaying information about all available file system types
// lsvfsconf.c
#include 
#include 
#include 
#include 
#include 
void
print_flags(int f)
{
if (f & MNT_LOCAL) // file system is stored locally
printf("local ");
if (f & MNT_DOVOLFS) // supports volfs
printf("volfs ");
printf("\n");
}
int
main(void)
{
int i, ret, val;
size_t len;
int mib[4];
struct vfsconf vfsconf;
mib[0] = CTL_VFS;
mib[1] = VFS_NUMMNTOPS; // retrieve number of mount/unmount operations
len = sizeof(int);
if ((ret = sysctl(mib, 2, &val, &len, NULL, 0)) opv_desc_vector_p) = NULL;
// Initialize the offset value in each vnode operation descriptor
// struct vnodeop_desc *vfs_op_descs[]
for (vfs_opv_numops = 0, i = 0, vfs_op_descs[i]; i++) {
vfs_op_descs[i]->vdesc_offset = vfs_opv_numops;
vfs_opv_numops++;
}
}
Next, vfsinit() calls vfs_opv_init() [bsd/vfs/vfs_init.c] to populate the operations vectors.
vfs_opv_init() iterates over each element of vfs_opv_descs, checking whether the
opv_desc_vector_p field of each entry points to a NULLif so, it allocates the vector before populating it.
Figure 1117 shows the operation of vfs_opv_init().
Figure 1117. Initialization of vnode operations vectors during bootstrap
// bsd/vfs/vfs_init.c
void
vfs_opv_init()
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 30 of 90
{
int i, j, k;
int (***opv_desc_vector_p)(void *);
int (**opv_desc_vector)(void *);
struct vnodeopv_entry_desc *opve_descp;
for (i = 0; vfs_opv_descs[i]; i++) {
opv_desc_vector_p = vfs_opv_descs[i]->opv_desc_vector_p;
if (*opv_desc_vector_p == NULL) {
// allocate and zero out *opv_desc_vector_p
...
}
opv_desc_vector = *opv_desc_vector_p;
for (j = 0; vfs_opv_descs[i]->opv_desc_ops[j].opve_op; j++) {
opve_descp = &(vfs_opv_descs[i]->opv_desc_ops[j]);
// sanity-check operation offset (panic if it is 0 for an
// operation other than the default operation)
// populate the entry
opv_desc_vector[opve_descp->opve_op->vdesc_offset] =
opve_descp->opve_impl;
}
}
// replace unpopulated routines with defaults
...
}
Figure 1116 shows an interesting feature of the FreeBSD-derived VFS layer: There can be multiple vnode
operations vectors for a given vnodeopv_desc.
11.7. File System Types
Early Macintosh systems used the Macintosh File System (MFS)a flat file system in which all files were
stored in a single directory. The software presented an illusory hierarchical view that showed nested
folders. MFS was designed for floppy disks, not for high-capacity storage media such as hard disks and
CD-ROMs. The Hierarchical File System (HFS) was introduced with the Macintosh Plus as a file system
with "true" hierarchy, although it differed from a traditional Unix file system in that the hierarchical
structure was entirely maintained in a central catalog. HFS was the primary file system format used until
Mac OS 8.1, when HFS Plus replaced it.
Each MFS volume contained a folder called Empty Folder at its root level. Renaming this folder created a
new folder, with a replacement Empty Folder appearing as a side effect.
It is common for modern operating systems to support several file systemsLinux supports dozens! Mac OS
X also supports a number of file systems. Because of the number of sources Mac OS X draws from, it has
multiple file system APIs: Carbon File Manager, NSFileManager and family (Cocoa), and BSD system
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 31 of 90
calls. Figure 1118 shows how these APIs are layered in the system.
Figure 1118. Mac OS X file system APIs
[View full size image]
The file systems available on Mac OS X can be categorized as follows.
Local file systems are those that use locally attached storage. Mac OS X supports HFS Plus, HFS,
ISO 9660, MS-DOS, NTFS, UDF, and UFS.
Network file systems are those that allow files residing on one computer to appear locally on another
computer, provided the two computers are connected over a network. Mac OS X supports the Apple
Filing Protocol (AFP), FTP file system, NFS, SMB/CIFS, and the WebDAV file system.
Pseudo file systems are those typically used for providing file-like views of nonfile information.
Some others are used as special file system layers. In general, pseudo file systems do not have
persistent backing stores.[7] Mac OS X supports cddafs, deadfs, devfs, fdesc, specfs, fifofs, synthfs,
union, and volfs.
[7] cddafs provides a file system view of nonfile information that is persistent.
Another Apple-provided file system for Mac OS X is the Apple Cluster File System (ACFS)a shared SAN
file system that underlies the Xsan product (see Section 2.15.2).
Let us briefly look at each of these file systems.
11.7.1. HFS Plus and HFS
The Mac OS Extended file system (another name for HFS Plus, or simply HFS+) is the preferred, default,
and most feature-rich file system on Mac OS X. Although it is architecturally similar to its predecessor,
HFS, it has undergone numerous additions, improvements, and optimizations to be a respectable modern-
day file system. We will discuss HFS+ in detail in the next chapter.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 32 of 90
When HFS was introduced, it was quite innovative in how it lent support to the Macintosh graphical user
interface. It provided the abstraction of two forks, the data fork and the resource fork, with the latter
allowing structured storage of GUI-related (and other) resources alongside regular file data. Although the
two forks were parts of the same file, they could be individually accessed and manipulated. The following
are examples of resources:
'ICON'an icon
'CODE'executable code
'STR'program strings
Besides the data and resource forks, HFS provides for additional per-file information, such as a four-
character file type, a four-character creator code, and attributes such as those specifying whether the file is
locked, is invisible, or has a custom icon. This allowed the user interface to determine which application to
launch to handle a file when the user double-clicked on its icon.
HFS also differs from traditional file systems in that it uses a B-Tree-based catalog file to store the file
system's hierarchical structure, rather than explicitly storing directories on disk. In order to locate the
contents of a fork, HFS records up to the first three extentsthat is, { starting block, block count } pairsin the
corresponding file record in the catalog file. If a fork is fragmented enough to have more than three extents,
the remaining extents overflow to another B-Tree-based file: the extents overflow file. As we will see in
Chapter 12, HFS+ retains the basic design of HFS.
Both HFS and HFS+ use the colon character (:) as a path separatorit is not a valid filename character. They
also do not have the notion of a filename extension.
11.7.2. ISO 9660
ISO 9660 is a system-independent file system for read-only data CDs. Apple has its own set of ISO 9660
extensions. Moreover, Mac HFS+/ISO 9660 hybrid discs contain both a valid HFS+ and a valid ISO 9660
file system. Both file systems can be read on Mac OS X, whereas on non-Apple systems, you would
typically be able to read only the ISO 9660 data. This does not mean there is redundant data on the
discusually, the data that needs to be accessed from both Mac OS X and other operating systems is stored
on the ISO 9660 volume and is aliased on the HFS+ volume. Consider the following example, where we
create a hybrid ISO image containing two files, each visible from only a single file system.