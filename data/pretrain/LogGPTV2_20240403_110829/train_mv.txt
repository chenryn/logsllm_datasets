.i /etc/networks
is a plain ascii file that describes known darpa networks and symbolic
names for these networks.
each line represents a network and has the following structure:
.pp
.rs
.i name number aliases ...
.re
.pp
where the fields are delimited by spaces or tabs.
empty lines are ignored.
the hash character (\fb#\fp) indicates the start of a comment:
this character, and the remaining characters up to
the end of the current line,
are ignored by library functions that process the file.
.pp
the field descriptions are:
.tp
.i name
the symbolic name for the network.
network names can contain any printable characters except
white-space characters or the comment character.
.tp
.i number
the official number for this network in numbers-and-dots notation (see
.br inet (3)).
the trailing ".0" (for the host component of the network address) may be omitted.
.tp
.i aliases
optional aliases for the network.
.pp
.pp
this file is read by the
.br route (8)
and
.br netstat (8)
utilities.
only class a, b, or c networks are supported, partitioned networks
(i.e., network/26 or network/28) are not supported by this file.
.sh files
.tp
.i /etc/networks
the networks definition file.
.sh see also
.br getnetbyaddr (3),
.br getnetbyname (3),
.br getnetent (3),
.br netstat (8),
.br route (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1980, 1991 regents of the university of california.
.\" all rights reserved.
.\"
.\" %%%license_start(bsd_4_clause_ucb)
.\" redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. all advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	this product includes software developed by the university of
.\"	california, berkeley and its contributors.
.\" 4. neither the name of the university nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\"     @(#)killpg.2	6.5 (berkeley) 3/10/91
.\"
.\" modified fri jul 23 21:55:01 1993 by rik faith 
.\" modified tue oct 22 08:11:14 edt 1996 by eric s. raymond 
.\" modified 2004-06-16 by michael kerrisk 
.\"     added notes on cap_kill
.\" modified 2004-06-21 by aeb
.\"
.th killpg 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
killpg \- send signal to a process group
.sh synopsis
.nf
.b #include 
.pp
.bi "int killpg(int " pgrp ", int " sig );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br killpg ():
.nf
    _xopen_source >= 500
.\"    || _xopen_source && _xopen_source_extended
        || /* since glibc 2.19: */ _default_source
        || /* glibc 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th pidfd_open 2 2021-08-27 "linux" "linux programmer's manual"
.sh name
pidfd_open \- obtain a file descriptor that refers to a process
.sh synopsis
.nf
.br "#include " "      /* definition of " sys_* " constants */"
.b #include 
.pp
.bi "int syscall(sys_pidfd_open, pid_t " pid ", unsigned int " flags );
.fi
.pp
.ir note :
glibc provides no wrapper for
.br pidfd_open (),
necessitating the use of
.br syscall (2).
.sh description
the
.br pidfd_open ()
system call creates a file descriptor that refers to
the process whose pid is specified in
.ir pid .
the file descriptor is returned as the function result;
the close-on-exec flag is set on the file descriptor.
.pp
the
.i flags
argument either has the value 0, or contains the following flag:
.tp
.br pidfd_nonblock " (since linux 5.10)"
.\" commit 4da9af0014b51c8b015ed8c622440ef28912efe6
return a nonblocking file descriptor.
if the process referred to by the file descriptor has not yet terminated,
then an attempt to wait on the file descriptor using
.br waitid (2)
will immediately return the error
.br eagain
rather than blocking.
.sh return value
on success,
.br pidfd_open ()
returns a file descriptor (a nonnegative integer).
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b einval
.i flags
is not valid.
.tp
.b einval
.i pid
is not valid.
.tp
.b emfile
the per-process limit on the number of open file descriptors has been reached
(see the description of
.br rlimit_nofile
in
.br getrlimit (2)).
.tp
.b enfile
the system-wide limit on the total number of open files has been reached.
.tp
.b enodev
the anonymous inode filesystem is not available in this kernel.
.tp
.b enomem
insufficient kernel memory was available.
.tp
.b esrch
the process specified by
.i pid
does not exist.
.sh versions
.br pidfd_open ()
first appeared in linux 5.3.
.sh conforming to
.br pidfd_open ()
is linux specific.
.sh notes
the following code sequence can be used to obtain a file descriptor
for the child of
.br fork (2):
.pp
.in +4n
.ex
pid = fork();
if (pid > 0) {     /* if parent */
    pidfd = pidfd_open(pid, 0);
    ...
}
.ee
.in
.pp
even if the child has already terminated by the time of the
.br pidfd_open ()
call, its pid will not have been recycled and the returned
file descriptor will refer to the resulting zombie process.
note, however, that this is guaranteed only if the following
conditions hold true:
.ip \(bu 2
the disposition of
.br sigchld
has not been explicitly set to
.br sig_ign
(see
.br sigaction (2));
.ip \(bu
the
.br sa_nocldwait
flag was not specified while establishing a handler for
.br sigchld
or while setting the disposition of that signal to
.br sig_dfl
(see
.br sigaction (2));
and
.ip \(bu
the zombie process was not reaped elsewhere in the program
(e.g., either by an asynchronously executed signal handler or by
.br wait (2)
or similar in another thread).
.pp
if any of these conditions does not hold,
then the child process (along with a pid file descriptor that refers to it)
should instead be created using
.br clone (2)
with the
.br clone_pidfd
flag.
.\"
.ss use cases for pid file descriptors
a pid file descriptor returned by
.br pidfd_open ()
(or by
.br clone (2)
with the
.br clone_pid
flag) can be used for the following purposes:
.ip \(bu 2
the
.br pidfd_send_signal (2)
system call can be used to send a signal to the process referred to by
a pid file descriptor.
.ip \(bu
a pid file descriptor can be monitored using
.br poll (2),
.br select (2),
and
.br epoll (7).
when the process that it refers to terminates,
these interfaces indicate the file descriptor as readable.
note, however, that in the current implementation,
nothing can be read from the file descriptor
.rb ( read (2)
on the file descriptor fails with the error
.br einval ).
.ip \(bu
if the pid file descriptor refers to a child of the calling process,
then it can be waited on using
.br waitid (2).
.ip \(bu
the
.br pidfd_getfd (2)
system call can be used to obtain a duplicate of a file descriptor
of another process referred to by a pid file descriptor.
.ip \(bu
a pid file descriptor can be used as the argument of
.br setns (2)
in order to move into one or more of the same namespaces as the process
referred to by the file descriptor.
.ip \(bu
a pid file descriptor can be used as the argument of
.br process_madvise (2)
in order to provide advice on the memory usage patterns of the process
referred to by the file descriptor.
.pp
the
.br pidfd_open ()
system call is the preferred way of obtaining a pid file descriptor
for an already existing process.
the alternative is to obtain a file descriptor by opening a
.i /proc/[pid]
directory.
however, the latter technique is possible only if the
.br proc (5)
filesystem is mounted;
furthermore, the file descriptor obtained in this way is
.i not
pollable and can't be waited on with
.br waitid (2).
.sh examples
the program below opens a pid file descriptor for the
process whose pid is specified as its command-line argument.
it then uses
.br poll (2)
to monitor the file descriptor for process exit, as indicated by an
.br epollin
event.
.\"
.ss program source
\&
.ex
#define _gnu_source
#include 
#include 
#include 
#include 
#include 
#include 
#ifndef __nr_pidfd_open
#define __nr_pidfd_open 434   /* system call # on most architectures */
#endif
static int
pidfd_open(pid_t pid, unsigned int flags)
{
    return syscall(__nr_pidfd_open, pid, flags);
}
int
main(int argc, char *argv[])
{
    struct pollfd pollfd;
    int pidfd, ready;
    if (argc != 2) {
        fprintf(stderr, "usage: %s \en", argv[0]);
        exit(exit_success);
    }
    pidfd = pidfd_open(atoi(argv[1]), 0);
    if (pidfd == \-1) {
        perror("pidfd_open");
        exit(exit_failure);
    }
    pollfd.fd = pidfd;
    pollfd.events = pollin;
    ready = poll(&pollfd, 1, \-1);
    if (ready == \-1) {
        perror("poll");
        exit(exit_failure);
    }
    printf("events (%#x): pollin is %sset\en", pollfd.revents,
            (pollfd.revents & pollin) ? "" : "not ");
    close(pidfd);
    exit(exit_success);
}
.ee
.sh see also
.br clone (2),
.br kill (2),
.br pidfd_getfd (2),
.br pidfd_send_signal (2),
.br poll (2),
.br process_madvise (2),
.br select (2),
.br setns (2),
.br waitid (2),
.br epoll (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 2009   lefteris dimitroulakis (PI:EMAIL)
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" eli zaretskii  made valuable suggestions
.\"
.th iso_8859-8 7 2020-08-13 "linux" "linux programmer's manual"
.sh name
iso_8859-8 \- iso 8859-8 character set encoded in octal, decimal,
and hexadecimal
.sh description
the iso 8859 standard includes several 8-bit extensions to the ascii
character set (also known as iso 646-irv).
iso 8859-8 encodes the
characters used in modern hebrew.
.ss iso 8859 alphabets
the full set of iso 8859 alphabets includes:
.ts
l l.
iso 8859-1	west european languages (latin-1)
iso 8859-2	central and east european languages (latin-2)
iso 8859-3	southeast european and miscellaneous languages (latin-3)
iso 8859-4	scandinavian/baltic languages (latin-4)
iso 8859-5	latin/cyrillic
iso 8859-6	latin/arabic