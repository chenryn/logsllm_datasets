2) R
Indis(νr; Var) ∧ Indis(νR; Var) ∧ H(G, R)∧
H(H, R||ine||f (R||r)||ine ⊕ G(R))
3) a := f (R||r)
Indisf (νa; Var − r − R) ∧ WS(R; Var − r − R)∧
H(G, R) ∧ H(H, R||ine||a||ine ⊕ G(R))
4) g := G(R)
Indisf (νa; Var − r − R) ∧ Indis(νg; Var − r − R)∧
WS(R; Var − r − R) ∧ H(H, R||ine||a||ine ⊕ g)
5) b := ine ⊕ g
Indisf (νa; Var − r − R) ∧ Indis(νb; Var − g − r − R)∧
WS(R; Var − r − R) ∧ H(H, R||ine||a||b)
6) w := R||ine||a||b
Indisf (νa; Var − r − w − R)
∧Indis(νb; Var − g − r − w − R)
∧WS(w; Var − r − w − R) ∧ H(H, w)
7) c := H(w)
Indisf (νa; a, b, c, ine) ∧ Indis(νb; a, b, c, ine)
∧Indis(νc; a, b, c, ine)
8) oute := a||b||c;
Indisf (νa; a, b, c, ine) ∧ Indis(νb; a, b, c, ine)
∧Indis(νc; a, b, c, ine)
1) (R1)
2) (R3), (R1), (R2) and (R2)
3) (P O1), (G3) and (G3).
4) Extension of (H7) to Indisf , (H1), (H4), and (G3).
5) Extension of (X2) to Indisf , (X1), (X3), and (G3).
6) Extension of (G1) to Indisf , (G1), (C1), and (G3).
7) Extension of (H7) to Indisf , (H7), and (H1).
8) Extension of (G1) to Indisf , (G1) and (G1).
4. PLAINTEXT AWARENESS
Bellare and Rogaway introduced plaintext awareness (PA)
in [6]4. The motivation is to decompose IND-CCA secu-
rity of an encryption scheme into IND-CPA and PA secu-
rity. Indeed, a public-key encryption scheme that satisﬁes
IND-CPA (in the ROM) and the original deﬁnition of PA is
IND-CCA1 (in the ROM). PA has been reﬁned in [4] such
that if an encryption scheme is PA and IND-CPA then it is
IND-CCA. Intuitively, plaintext awareness means that the
decryption oracle can be simulated by a plaintext extractor
−1.
that does not have access to the inverse permutation f
Now we introduce a simple analysis that allows us to au-
tomatically verify that an encryption scheme is PA in the
strong sense [4]. Hence, combined with the results of the
previous sections we obtain an analysis that allows to verify
IND-CCA security.
We recall the deﬁnition of PA-security following the no-
tations and conventions of [4]. Let GE = ((cid:3),E (ine, oute) :
c,D(ind, outd) : c(cid:3)
) be a generic encryption scheme. An
adversary B for plaintext awareness is given the public per-
mutation f , oracle access to the encryption algorithm E and
to the ideal hash functions (cid:2)H = H1,··· , Hn. His goal is to
output a cipher-text that cannot be correctly decrypted by
the plaintext extractor. Hence, the success of plaintext ex-
tractor K against B in the distribution X ∈ Dist(Γ, (cid:2)H, (cid:3))
is deﬁned by:
Succpa
K,B,GE (η, X) =
r← X; (hH, C, y, S
−1))
Pr[(S, (cid:2)H, (f, f
(cid:3)(cid:3) r← [[D(y, outd)]](S
(cid:3)
−1)) :
S
y ∈ C ∨ (y (cid:11)∈ C ∧ K(hH, C, y, f ) = S
, (cid:2)H, (f, f
(cid:3)
r← B
E, (cid:3)H (f );
)
(cid:3)(cid:3)
(outd))]
(cid:3)
r← B
)
E, (cid:3)H (f ) we mean the following:
Here by (hH, C, y, S
run B on input f with oracle access to Hi, i = 1, ··· , n
and E (which calls f and Hi), recording B’s interaction
with the hash functions in hH and his interaction with E
in C. Thus, hH is a list (hH1,·· · , hHn) of lists. Each
list hHi = ((h1, v1),··· , (hqi , vqi )) records all of B’s Hi-
oracle queries h1,··· , hqi and the corresponding answers
v1,··· , vqi . The modiﬁed state S
is due to calls of the hash
functions either by B or the encryption oracle. The list C
records the cipher-texts received in reply to E -queries 5. Fi-
nally, y is B’s challenge to the plaintext extractor K. Please
notice that K wins whenever B outputs a value y ∈ C.
(cid:3)
Definition 4.1. An encryption scheme given by GE =
((cid:3),E (ine, oute) : c,D(ind, outd) : c(cid:3)
) is PA-secure, if there
4While in the original work by Bellare and Rogaway and
in subsequent ones, plaintext awareness includes semantic
security, we prefer to separate plaintext extraction and se-
mantic security.
5This list was not included in the original deﬁnition by
Bellare and Rogaway. Without it only IND-CCA1 can be
proved but not IND-CCA.
K,B,GE (η, X) is a negligible function in η.
is a polynomial-time probabilistic algorithm K such that for
every distribution X ∈ Dist(Γ, (cid:2)H, (cid:3)) and adversary B, we
have 1 − Succpa
The rest of the section is organized as follows. We ﬁrst intro-
duce a semantic condition on D that implies the existence of
a plaintext extractor. Then, we provide a syntactic criterion
that implies the semantic criterion.
In the remainder of this section, we consider an encryption
scheme GE that uses the hash functions (cid:2)H = H1,··· , Hn.
We assume that c(cid:3)
c1; h := H1(t);
if V((cid:2)x, h) = v then outd := m else outd := ”error” ﬁ,
where (cid:2)x is a vector of variables (possibly empty) and V is a
function (possibly the identity in which case we do not write
r← U : V((cid:2)x, r) = v]
it) such that for given (cid:2)x and v, P r[r
is negligible. Furthermore, we require that the hash func-
tion H1 is not called in c1 and that the encryption algo-
rithm c makes exactly one call to the oracle H1. Consider,
for instance, the scheme in [5], f (r)||ine ⊕ G(r)||H(ine||r).
Here, t gets assigned the value ine||r. We call the condition
V((cid:2)x, h) = v (or equivalently V((cid:2)x, H1(t)) = v) the ”sanity
check ”.
has the following form
It allows us to discriminate valid cipher-text from arbi-
trary bit-string. We also assume that decryption behaves
correctly with respect to encryption: if y is generated using
the algorithm of encryption, then the value of t as computed
by the decryption oracle coincides with the value used as ar-
gument in the call to H1 by the encryption algorithm.
Example 4.1. Bellare and Rogaway [5]:
D(ind = a
∗||b
∗ ⊕ g
∗
∗
−1(a
∗
r
h := H(t);
if h = v then outd := m
∗||v, outd) :
:= G(r
); g
∗ else outd := ”error” ﬁ
:= f
:= b
); m
∗
∗
∗
; t := m
∗||r
∗
;
A semantic criterion for PA Our semantic criterion
for PA-security is composed of three conditions. We begin
with an informal presentation of these conditions and how
they will enable us to construct a plaintext extractor.
∗
1. The ﬁrst condition says that there is an algorithm that
checks whether a given bit-string t
, that has been
submitted to H1 by B, corresponds to the challenge y.
That is, if the tester answers ”yes” (1), then t
matches
with the value of t as computed by the decryption or-
acle and additionally satisﬁes the sanity check; and if
it answers ”no” (0), then t
does not satisfy the sanity
check.
∗
∗
2. The second condition states that it is easy to compute
the plaintext from t
.
∗
3. The third condition states that for each value of t there
is at most one corresponding ciphertext y.
Assume now that these conditions are satisﬁed. Then,
we can construct a plaintext extractor K as follows. Using
the algorithm of the ﬁrst condition, that we call the tester,
scan the list hH1 to ﬁnd a suitable t
If none is found,
answer ”error”. Otherwise, apply the algorithm of the second
condition on the value found for t
to extract the plaintext.
The third condition ensures that each value of t
corresponds
to at most one ciphertext, which is necessary to ensure that
the extracted plaintext is the correct one.
Let us now
tackle the formal treatment of these ideas.
∗
∗
∗
.
Definition 4.2. We say that GE a generic encryption
scheme satisﬁes the PA-semantic criterion, if there exist ef-
ﬁcient algorithms T and Ext that satisfy the following con-
ditions:
1. The tester T takes as input (hH, C, y, t
, f ) and re-
turns a value in {0, 1}. We require that for any adver-
sary B and any distribution X ∈ Dist(Γ, (cid:2)H, (cid:3)),
∗
1−
Pr[(S, (cid:2)H, (f, f−1)) r← X; (hH, C, y, S(cid:3)) r← BE, (cid:3)H (f );
S(cid:3)(cid:3) r← [[D(y, outd)]](S(cid:3), (cid:2)H, (f, f−1)); t∗ r← hH1.dom;
b r← T (hH, C, y, t∗, f ) :
∧V(S(cid:3)(cid:3)(x), H1(t∗)) = S(cid:3)(cid:3)(v)
`
´
b = 0 ⇒ V(S(cid:3)(cid:3)(x), H1(t∗)) (cid:5)= S(cid:3)(cid:3)(v)
`
b = 1 ⇒ H1(t∗) = H1(S(cid:3)(cid:3)(t))
´∧
]
is negligible.
2. For Ext, we require that for any adversary B and any
distribution X ∈ Dist(Γ, (cid:2)H, (cid:3)),
1−
Pr[(S, (cid:2)H, (f, f
(cid:3)(cid:3) r← [[D(y, outd)]](S
S
Ext(hH, C, y, S
r← X; (hH, C, y, S
(cid:3)
−1)) :
(outd)]
−1))
(cid:3)(cid:3)
, (cid:2)H, (f, f
(t), f ) = S
(cid:3)(cid:3)
(cid:3)
)
r← B
E, (cid:3)H (f );
3. Finally, we require that for any adversary B and any
is negligible.
distribution X ∈ Dist(Γ, (cid:2)H, (cid:3)),
r← [[D(y, outd)]](S(cid:3), (cid:2)H, (f, f−1));
r← [[D(y(cid:3), outd)]](S(cid:3), (cid:2)H, (f, f−1)) :
Pr[(S, (cid:2)H, (f, f−1)) r← X; (hH, C, y, y(cid:3), S(cid:3)) r← BE, (cid:3)H (f );
S1
S2
y (cid:5)= y(cid:3) ∧ S1(t) = S2(t) ∧ S1(outd) (cid:5)= ”error”∧
S2(outd) (cid:5)= ”error”]
is negligible.
Of course there are generic encryption schemes for which the
conditions above are satisﬁed under the assumption that T
has access to an extra oracle such as a plaintext checking
oracle (PC), or a ciphertext validity-checking oracle (CV),
which on input c answers whether c is a valid ciphertext.
In this case, the semantic security of the scheme has to be
established under the assumption that f is OW-PCA, re-
spectively OW-CVA. Furthermore, our deﬁnition of the PA-
semantic criterion makes perfect sense for constructions that
apply to IND-CPA schemes such as Fujisaki and Okamoto’s
converter [14]. In this case, f has to be considered as the
IND-CPA encryption oracle.
Given a tester T and an algorithm Ext as in Deﬁnition 4.2,
we construct a plaintext extractor as follows:
T ,Ext(hH, C, y, f ) :
K
Let L = {t
if L =  then return ”error” else t
return Ext(hH, C, y, t
∗ | t
, f )
∗
∗ r← L;
∗ ∈ dom(hH1),T (hH, C, y, t
∗
, f ) = 1}
Theorem 4.1. Let GE be a generic encryption scheme
that satisﬁes the PA-semantic criterion. Then, GE is PA-
secure.
An easy syntactic check that implies the PA-semantic crite-
rion is as follows.
Definition 4.3. A generic encryption scheme GE satis-
ﬁes the PA-syntactic criterion, if the sanity check has the
form V(t, h) = v, where D is such that h is assigned H1(t),
t is assigned ine||r, ine is the plaintext and E (ine; r) is the
ciphertext (i.e., r is the random seed of E ).
It is not diﬃcult to see that if GE satisﬁes the PA-syntactic
criterion then it also satisﬁes the PA-semantic one with a
tester T as follows (Ext is obvious):
∗||r
∗
Look in hH1 for a bit-string s such that E (x