# 以太坊智能合约安全入门了解一下（上）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
**Author: RickGray(@0KEETeam)**
（注：本文分上/下两部分完成，上篇链接[《以太坊智能合约安全入门了解一下（下）》](https://www.anquanke.com/post/id/146322)）接下篇
最近区块链漏洞不要太火，什么交易所用户被钓鱼导致 APIKEY 泄漏，代币合约出现整数溢出漏洞致使代币归零， MyEtherWallet 遭 DNS
劫持致使用户 ETH 被盗等等。频频爆出的区块链安全事件，越来越多的安全从业者将目标转到了 Blockchain
上。经过一段时间的恶补，让我从以太坊智能合约 “青铜I段” 升到了
“青铜III段”，本文将从以太坊智能合约的一些特殊机制说起，详细地剖析已发现各种漏洞类型，对每一种漏洞类型都会提供一段简单的合约代码来对漏洞成因和攻击方法进行说明。
在阅读接下来的文章内容之前，我假定你已经对以太坊智能合约的相关概念已经有了一定的了解。如果从开发者的角度来看智能，大概是这个样子：
以太坊专门提供了一种叫 EVM 的虚拟机供合约代码运行，同时也提供了面向合约的语言来加快开发者开发合约，像官方推荐且用的最多的 Solidity
是一种语法类似 JavaScript
的合约开发语言。开发者按一定的业务逻辑编写合约代码，并将其部署到以太坊上，代码根据业务逻辑将数据记录在链上。以太坊其实就是一个应用生态平台，借助智能合约我们可以开发出各式各样的应用发布到以太坊上供业务直接使用。关于以太坊/智能合约的概念可参考[文档](http://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html)。
接下来也是以 Solidity 为例来说明以太坊智能合约的一些已存在安全问题。
## I. 智能合约开发 – Solidity
Solidity 的语法类似 JavaSript，整体还是比较好上手，一个简单的用 Solidity 编写的合约代码如下
语法相关的话我建议可以先看一下这个[教学系列](https://www.youtube.com/playlist?list=PLUMwusiHZZhpf8ItZBkR95ekkMGNKvuNR)（FQ），下面我说说我在学习和复习以太坊智能合约时一开始比较懵逼的地方：
### 1\. 以太坊账户和智能合约区别
以太坊账户分两种，外部账户和合约账户。外部账户由一对公私钥进行管理，账户包含着 Ether 的余额，而合约账户除了可以含有 Ether
余额外，还拥有一段特定的代码，预先设定代码逻辑在外部账户或其他合约对其合约地址发送消息或发生交易时被调用和处理：
**外部账户 EOA**
  * 由公私钥对控制
  * 拥有 ether 余额
  * 可以发送交易（transactions）
  * 不包含相关执行代码
**合约账户**
  * 拥有 ether 余额
  * 含有执行代码
  * 代码仅在该合约地址发生交易或者收到其他合约发送的信息时才会被执行
  * 拥有自己的独立存储状态，且可以调用其他合约
（这里留一个问题：“合约账户也有公私钥对吗？若有，那么允许直接用公私钥对控制账户以太坊余额吗？”）
简单来说就是合约账户由外部账户或合约代码逻辑进行创建，一旦部署成功，只能按照预先写好的合约逻辑进行业务交互，不存在其他方式直接操作合约账户或更改已部署的合约代码。
### 2\. 代码执行限制
在初识 Solidity 时需要注意的一些代码执行限制：
以太坊在设置时为了防止合约代码出现像 “死循环” 这样的情况，添加了代码执行消耗这一概念。合约代码部署到以太坊平台后，EVM
在执行这些代码时，每一步执行都会消耗一定 Gas，Gas 可以被看作是能量，一段代码逻辑可以假设为一套
“组合技”，而外部调用者在调用该合约的某一函数时会提供数量一定的 Gas，如果这些 Gas 大于这一套 “组合技” 所需的能量，则会成功执行，否则会由于
Gas 不足而发生 `out of gas` 的异常，合约状态回滚。
同时在 Solidity 中，函数中递归调用栈（深度）不能超过 1024 层：
    contract Some {
        function Loop() {
            Loop();
        }
    }
    // Loop() ->
    //  Loop() ->
    //    Loop() ->
    //      ...
    //      ... (must less than 1024)
    //      ...
    //        Loop()
### 3\. 回退函数 – fallback()
在跟进 Solidity 的安全漏洞时，有很大一部分都与合约实例的回退函数有关。那什么是回退函数呢？官方文档描述到：
> A contract can have exactly one unnamed function. This function cannot have
> arguments and cannot return anything. It is executed on a call to the
> contract if none of the other functions match the given function identifier
> (or if no data was supplied at all).
fallback 函数在合约实例中表现形式即为一个不带参数没有返回值的匿名函数：
那么什么时候会执行 fallback 函数呢？
  1. 当外部账户或其他合约向该合约地址发送 ether 时；
  2. 当外部账户或其他合约调用了该合约一个 **不存在** 的函数时；
**注：目前已知的关于 Solidity 的安全问题大多都会涉及到 fallback 函数**
### 4\. 几种转币方法对比
Solidity 中 `.transfer()`，`.send()` 和
`.gas().call.vale()()` 都可以用于向某一地址发送 ether，他们的区别在于：
**.transfer()**
  * 当发送失败时会 `throw;` 回滚状态
  * 只会传递 2300 Gas 供调用，防止重入（reentrancy）
**.send()**
  * 当发送失败时会返回 `false` 布尔值
  * 只会传递 2300 Gas 供调用，防止重入（reentrancy）
**.gas().call.value()()**
  * 当发送失败时会返回 `false` 布尔值
  * 传递所有可用 Gas 进行调用（可通过 `gas(gas_value)` 进行限制），不能有效防止重入（reentrancy）
**注：开发者需要根据不同场景合理的使用这些函数来实现转币的功能，如果考虑不周或处理不完整，则极有可能出现漏洞被攻击者利用**
例如，早期很多合约在使用 `.send()` 进行转帐时，都会忽略掉其返回值，从而致使当转账失败时，后续的代码流程依然会得到执行。
### 5\. require 和 assert，revert 与 throw
`require` 和 `assert` 都可用于检查条件，并在不满足条件的时候抛出异常，但在使用上 `require`
更偏向代码逻辑健壮性检查上；而在需要确认一些本不该出现的情况异常发生的时候，就需要使用 `assert` 去判断了。
`revert` 和 `throw` 都是标记错误并恢复当前调用，但 Solidity 在 `0.4.10` 开始引入 `revert()`,
`assert()`, `require()` 函数，用法上原先的 `throw;` 等于 `revert()`。
关于这几个函数详细讲解，可以参考[文章](https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e)。
## II. 漏洞现场还原
历史上已经出现过很多关于以太坊合约的安全事件，这些安全事件在当时的影响也是巨大的，轻则让已部署的合约无法继续运行，重则会导致数千万美元的损失。在金融领域，是不允许错误出现的，但从侧面来讲，正是这些安全事件的出现，才促使了以太坊或者说是区块链安全的发展，越来越多的人关注区块链安全、合约安全、协议安全等。
h 所以，通过一段时间的学习，在这我将已经明白的关于以太坊合约的几个漏洞原理记录下来，有兴趣的可以进一步交流。
下面列出了已知的常见的 Solidity 的漏洞类型：
  1. Reentrancy – 重入
  2. Access Control – 访问控制
  3. Arithmetic Issues – 算术问题（整数上下溢出）
  4. Unchecked Return Values For Low Level Calls – 未严格判断不安全函数调用返回值
  5. Denial of Service – 拒绝服务
  6. Bad Randomness – 可预测的随机处理
  7. Front Running
  8. Time manipulation
  9. Short Address Attack – 短地址攻击
  10. Unknown Unknowns – 其他未知
下面我会按照 `原理` -> `示例（代码）` -> `攻击` 来对每一类型的漏洞进行原理说明和攻击方法的讲解。
### 1\. Reentrancy
重入漏洞，在我刚开始看这个漏洞类型的时候，还是比较懵逼的，因为从字面上来看，“重入” 其实可以简单理解成 “递归” 的意思，那么在传统的开发语言里 “递归”
调用是一种很常见的逻辑处理方式，那在 Solidity 里为什么就成了漏洞了呢。在上面一部分也有讲到，在以太坊智能合约里有一些内在的执行限制，如 Gas
Limit，来看下面这段代码：
    pragma solidity ^0.4.10;
    contract IDMoney {
        address owner;
        mapping (address => uint256) balances;  // 记录每个打币者存入的资产情况
        event withdrawLog(address, uint256);
        function IDMoney() { owner = msg.sender; }
        function deposit() payable { balances[msg.sender] += msg.value; }
        function withdraw(address to, uint256 amount) {
            require(balances[msg.sender] > amount);
            require(this.balance > amount);