            {
                if ( ++block >= BINMAPSIZE ) /* out of bins */
                    goto use_top;
            }
            while ( (map = av->binmap[block]) == 0 );
            bin    = bin_at( av, (block binmap[block]    = map &= ~bit; /* Write through */
            bin            = next_bin( bin );
            bit            = (unsigned long) (nb) );
            remainder_size = size - nb;
            /* unlink */
            unlink( victim, bck, fwd );
            /* Exhaust */
            if ( remainder_size size |= NON_MAIN_ARENA;
            }
            /* Split */
            else{
                remainder = chunk_at_offset( victim, nb );
                /* We cannot assume the unsorted list is empty and therefore
                 * have to perform a complete insert here.  */
                bck    = unsorted_chunks( av );
                fwd    = bck->fd;
                if ( __glibc_unlikely( fwd->bk != bck ) )
                {
                    errstr = "malloc(): corrupted unsorted chunks 2";
                    goto errout;
                }
                remainder->bk    = bck;
                remainder->fd    = fwd;
                bck->fd        = remainder;
                fwd->bk        = remainder;
                /* advertise as last remainder */
                if ( in_smallbin_range( nb ) )
                    av->last_remainder = remainder;
                if ( !in_smallbin_range( remainder_size ) )
                {
                    remainder->fd_nextsize    = NULL;
                    remainder->bk_nextsize    = NULL;
                }
                set_head( victim, nb | PREV_INUSE |
                      (av != &main_arena ? NON_MAIN_ARENA : 0) );
                set_head( remainder, remainder_size | PREV_INUSE );
                set_foot( remainder, remainder_size );
            }
            check_malloced_chunk( av, victim, nb );
            void *p = chunk2mem( victim );
            alloc_perturb( p, bytes );
            return(p);
        }
    }
通过前面的部分，还没有找到满足要求的chunk的话，就改变idx，++idx就是代表着从下一个更大的链表里面进行寻找，之前说过binmap，现在详解说下，一个bit位表示对应位置是否有空闲chunk，1为真，0为假，然后
    /* Conservatively use 32 bits per map word, even if on 64bit system */
    #define BINMAPSHIFT      5
    #define BITSPERMAP       (1U > BINMAPSHIFT)
    #define idx2bit(i)       ((1U binmap[idx2block (i)] |= idx2bit (i))
    #define unmark_bin(m, i)  ((m)->binmap[idx2block (i)] &= ~(idx2bit (i)))
    #define get_binmap(m, i)  ((m)->binmap[idx2block (i)] & idx2bit (i))
相关的宏定义在这，一共有4个block，也就是4*4个字节，共128个bit管理bin数组，所以这里的计算就是获取所属block，然后获取map，进入循环，如果bit大于map，则说明没有满足的空闲的chunk，所以需要找下一个block。如果找到了，则获得对应的链表指针，并且满足对应链表不为空，就是和上面的largebin一样的操作。此处的话补充一下，bins的长度为127，前面6个为smallbin，后64个为largebin，下标为1的第一个bin为unsortedbin。如果遍历完没有的话，就轮到topchunk了
        use_top:
      victim = av->top;
      size = chunksize (victim);
      if ((unsigned long) (size) >= (unsigned long) (nb + MINSIZE))
        {
          remainder_size = size - nb;
          remainder = chunk_at_offset (victim, nb);
          av->top = remainder;
          set_head (victim, nb | PREV_INUSE |
                    (av != &main_arena ? NON_MAIN_ARENA : 0));
          set_head (remainder, remainder_size | PREV_INUSE);
          check_malloced_chunk (av, victim, nb);
          void *p = chunk2mem (victim);
          alloc_perturb (p, bytes);
          return p;
        }
      /* When we are using atomic ops to free fast chunks we can get
         here for all block sizes.  */
      else if (have_fastchunks (av))
        {
          malloc_consolidate (av);
          /* restore original bin index */
          if (in_smallbin_range (nb))
            idx = smallbin_index (nb);
          else
            idx = largebin_index (nb);
        }
      /*
         Otherwise, relay to handle system-dependent cases
       */
      else
        {
          void *p = sysmalloc (nb, av);
          if (p != NULL)
            alloc_perturb (p, bytes);
          return p;
        }
这里的话，首先比较下topchunk的size是否满足nb+MINSIZE，然后
满足的话，就是一样的切割，设置标志位，进行检查，然后返回切割下来的部分给用户。更新topchunk。还没找到合适的chunk，检查fastbin，如果有空闲chunk，进行合并整理，回到for循环。最后没找到，就用sysmalloc函数进行分配。代码里可以看到，在else
if的代码里。有malloc_co函数，那么这里就对补上malloc_consolidate的分析
    static void malloc_consolidate( mstate av )
    {
        mfastbinptr* fb;               /* current fastbin being consolidated /
                                        * mfastbinptr    maxfb;              /* last fastbin (for loop control) /
                                        * mchunkptr       p;                  / current chunk being consolidated /
                                        * mchunkptr       nextp;              / next chunk to consolidate /
                                        * mchunkptr       unsorted_bin;       / bin header /
                                        * mchunkptr       first_unsorted;     / chunk to link to */
        /* These have same use as in free() */
        mchunkptr    nextchunk;
        INTERNAL_SIZE_T size;
        INTERNAL_SIZE_T nextsize;
        INTERNAL_SIZE_T prevsize;
        int        nextinuse;
        mchunkptr    bck;
        mchunkptr    fwd;
        if ( get_max_fast() != 0 )
        {
            clear_fastchunks( av );
            unsorted_bin = unsorted_chunks( av );
            maxfb    = &fastbin( av, NFASTBINS - 1 );
            fb    = &fastbin( av, 0 );
            do
            {
                p = atomic_exchange_acq( fb, 0 );
                if ( p != 0 )
                {
                    do
                    {
                        check_inuse_chunk( av, p );
                        nextp = p->fd;
                        /* Slightly streamlined version of consolidation code in free() */
                        size        = p->size & ~(PREV_INUSE | NON_MAIN_ARENA);
                        nextchunk    = chunk_at_offset( p, size );
                        nextsize    = chunksize( nextchunk );
                        if ( !prev_inuse( p ) )
                        {
                            prevsize    = p->prev_size;
                            size        += prevsize;
                            p        = chunk_at_offset( p, -( (long) prevsize) );
                            unlink( p, bck, fwd );
                        }
                        if ( nextchunk != av->top )
                        {
                            nextinuse = inuse_bit_at_offset( nextchunk, nextsize );
                            if ( !nextinuse )
                            {
                                size += nextsize;
                                unlink( nextchunk, bck, fwd );
                            } else
                                clear_inuse_bit_at_offset( nextchunk, 0 );
                            first_unsorted        = unsorted_bin->fd;
                            unsorted_bin->fd    = p;
                            first_unsorted->bk    = p;
                            if ( !in_smallbin_range( size ) )
                            {
                                p->fd_nextsize    = NULL;
                                p->bk_nextsize    = NULL;
                            }
                            set_head( p, size | PREV_INUSE );
                            p->bk    = unsorted_bin;
                            p->fd    = first_unsorted;
                            set_foot( p, size );
                        }else  {
                            size += nextsize;
                            set_head( p, size | PREV_INUSE );
                            av->top = p;
                        }
                    }
                    while ( (p = nextp) != 0 );
                }
            }
            while ( fb++ != maxfb );
        }else   {
            malloc_init_state( av );
            check_malloc_state( av );
        }
    }
先判断是否进行了初始化，初始化了以后进入到if里面，然后使用clear_fastchunks进行标志位设置，
    #define clear_fastchunks(M)    catomic_or (&(M)->flags, FASTCHUNKS_BIT)
然后通过unsorted_chunks获得链表指针，获得fastbin中的最大和最小的chunk。进入到do
while循环遍历fastbin中的链表。然后将fb指针取出，并且将链表头设置为0，再次进入do
while循环，通过fd指针进行该链表的chunk的遍历，清除bit位。首先判断前面的chunk有没有在使用，如果没有，就把她进行合并，并把指针更新，unlink取出前一个chunk。再往下，如果下一个chunk不是topchunk，那就判断下一个chunk，如果下一个chunk也是空闲，一起合并，unlink取出下一个chunk。如果没有空闲，更新prev_inuse位，表示前一个chunk未使用。然后把合并后的chunk放入到unsortedbin里面，如果合并后的chunk的size属于smallbin的话，需要清除fd_nextsize和bk_nextsize；然后设置头部完善双链。设置脚部。如果下一个chunk是topchunk，那就直接并入topchunk中，然后更新topchunk的size和内存指针。
最后，整个流程为
  1. 先看请求的大小，先判断是否属于fastbin，从fastbin中进行查找。
  2. 进入到判断smallbin的流程，如果smallbin为空，也就是没有初始化，进行整合初始化；如果是一个largebin大小的请求，并且fastbin里面有chunk，进行整合。
  3. 遍历unsortedbin中的chunk，一边查找一边将里面的chunk按照大小进行插入。当我们的请求属于smallbin并且unsortedbin中有且只有一个last_remainder的时候，切割last_remainder；或者找到大小刚好适合的chunk返回。
  4. 整理完unsortedbin后，从largebin中进行查找，此时如果largebin为空或者最大的chunk的size小于请求的大小，切割remainder。
  5. 从largebin中大于指定的大小的链表进行查找，找到的话，和在largebin中的操作大致一致。
  6. 从topchunk中进行分配，topchunk不行，如果fastbin中有空闲的chunk的话，合并fastbin中的chunk加入到unsortedbin中，再从3开始进行；如果fastbin中没有，sysmalloc进行分配