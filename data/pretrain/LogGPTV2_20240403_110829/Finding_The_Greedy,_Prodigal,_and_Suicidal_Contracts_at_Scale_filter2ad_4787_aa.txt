title:Finding The Greedy, Prodigal, and Suicidal Contracts at Scale
author:Ivica Nikolic and
Aashish Kolluri and
Ilya Sergey and
Prateek Saxena and
Aquinas Hobor
Finding The Greedy, Prodigal, and Suicidal Contracts at Scale
Ivica Nikolić
School of Computing, NUS
Singapore
Aashish Kolluri
School of Computing, NUS
Singapore
Ilya Sergey
University College London
United Kingdom
Prateek Saxena
School of Computing, NUS
Singapore
Aquinas Hobor
Yale-NUS College
School of Computing, NUS
Singapore
ABSTRACT
Smart contracts—stateful executable objects hosted on blockchains
like Ethereum—carry billions of dollars worth of coins and can-
not be updated once deployed. We present a new systematic char-
acterization of a class of trace vulnerabilities, which result from
analyzing multiple invocations of a contract over its lifetime. We
focus attention on three example properties of such trace vulnera-
bilities: finding contracts that either lock funds indefinitely, leak
them carelessly to arbitrary users, or can be killed by anyone. We
implemented Maian, the first tool for specifying and reasoning
about trace properties, which employs inter-procedural symbolic
analysis and concrete validator for exhibiting real exploits. Our
analysis of nearly one million contracts flags 34, 200 (2, 365 distinct)
contracts vulnerable, in 10 seconds per contract. On a subset of
3, 759 contracts which we sampled for concrete validation and man-
ual analysis, we reproduce real exploits at a true positive rate of
89%, yielding exploits for 3, 686 contracts. Our tool finds exploits
for the infamous Parity bug that indirectly locked $200 million US
worth in Ether, which previous analyses failed to capture.
ACM Reference Format:
Ivica Nikolić, Aashish Kolluri, Ilya Sergey, Prateek Saxena, and Aquinas
Hobor. 2018. Finding The Greedy, Prodigal, and Suicidal Contracts at Scale
. In 2018 Annual Computer Security Applications Conference (ACSAC ’18),
December 3–7, 2018, San Juan, PR, USA. ACM, New York, NY, USA, 11 pages.
https://doi.org/10.1145/3274694.3274743
1 INTRODUCTION
Cryptocurrencies feature a distributed protocol for a set of comput-
ers to agree on the state of a public ledger called the blockchain.
The ledgers map accounts or addresses with quantities of virtual
coins. Miners, or the computing nodes, facilitate recording the state
of a payment network, encoding transactions that transfer coins
from one address to another. A significant number of blockchain
protocols exist, and as of writing the market value of the associated
coins exceeds $300 billion US, creating a lucrative attack target.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274743
653
Smart contracts extend the idea of a blockchain to a compute plat-
form for decentralized execution of general-purpose applications.
Contracts are programs that run on blockchains: their code and
state is stored on the ledger, and they can send and receive coins.
Smart contracts have been popularized by the Ethereum blockchain.
Recently, sophisticated applications of smart contracts have arisen,
especially in the area of token management due to the development
of the ERC20 token standard. This standard allows the uniform man-
agement of custom tokens, enabling, e.g., decentralized exchanges
and complex wallets. Today, over a million smart contracts operate
on the Ethereum network, and this count is growing.
Smart contracts offer a particularly unique combination of secu-
rity challenges. Once deployed they cannot be upgraded or patched,
unlike traditional consumer device software. Secondly, they are
written in a new ecosystem of languages and runtime environ-
ments (e.g., for Ethereum, the Ethereum Virtual Machine and its
programming language called Solidity). Contracts are relatively dif-
ficult to test, especially since their runtimes allow them to interact
with other smart contracts and external off-chain services; they
can be invoked repeatedly by transactions from a large number of
users. Third, since currency and coins on a blockchain often have
significant value, attackers are highly incentivized to find and ex-
ploit bugs in contracts that process or hold them directly for profit.
The attack on the DAO contract cost the Ethereum community
$60 million US; and several more recent ones have had impact of a
similar scale [1].
In this work, we present a systematic characterization of a class
of vulnerabilities that we call trace vulnerabilities. Unlike many
previous works that have applied static and dynamic analyses to
find bugs in contracts automatically [24, 26, 33, 39], our work fo-
cuses on detecting vulnerabilities across a sequence of invocations
of a contract. We label vulnerable contracts with three categories
— greedy, prodigal, and suicidal — which either lock funds indefi-
nitely, leak them to arbitrary users, or be susceptible to by killed
by any user. These properties capture many well-known examples
of known anecdotal bugs [1, 10, 17], but broadly cover a class of ex-
amples that were not known in prior work or public reports. More
importantly, our characterization allows us to concretely check for
bugs by running the contract, which aids determining confirmed
true positives.
We build an analysis tool called Maian for finding these vulner-
abilities directly from the bytecode of Ethereum smart contracts,
without requiring source code access. In total, across the three cat-
egories of vulnerabilities, Maian has been used to analyze 970, 898
contracts live of the public Ethereum blockchain. Our techniques
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Nikoli´c et al.
suffice to find the infamous Parity bug that indirectly caused 200
million dollars worth of Ether, which is not found by previous analy-
ses (in part because its detection requires two contract invocations).
A total of 34, 200 (2, 365 distinct) contracts are flagged as potentially
buggy by Maian. As in the case of the Parity bug, they may put a
larger amount to risk, since contracts interact with one another. For
3, 759 contracts we tried to concretely validate, Maian has found
over 3, 686 confirmed vulnerabilities with 89% true positive rate.
All vulnerabilities are uncovered on average within 10 seconds of
analysis per contract.
Contributions. We make the following contributions:
• We identify three classes of trace vulnerabilities, which can be
captured as properties of execution traces — potentially infinite
sequence of invocations of a contract. Previous techniques and
tools [33] are not designed to find these bugs because they only
model behavior for a single call to a contract.
• We provide high-order properties to check which admit a mech-
anized symbolic analysis procedure for detection. We fully im-
plement Maian, a tool for symbolic analysis of smart contract
bytecode (without access to source code).1
• We test close to one million contracts, finding thousands of con-
firmed true positives within a few seconds of analysis time per
contract. Testing trace properties with Maian is practical.
2 PROBLEM
We define a new class of trace vulnerabilities, showing three specific
examples of properties that can be checked in this broader class.
We present our approach and tool to reason about the class of trace
vulnerabilities.
2.1 Ethereum Smart Contracts
In the Ethereum blockchain, smart contracts are a type of accounts
that hold executable code called a bytecode. A contract performs
actions according to the instructions specified by its bytecode. Such
an action, called a contract invocation, occurs when an Ethereum ac-
count sends a transaction (that contains input data) to the contract.
Therefore, a single transaction to a contract triggers one execution
of its bytecode according to the provided input data. Smart contract
can also be invoked by other contract with a message call, which is
implemented as a bytecode instruction. Contracts can be executed
repeatedly over their lifetime. An execution trace is a sequence of
consecutive contract invocations.
Ethereum accounts (also known as addresses), both smart con-
tracts and normal accounts (called externally owned), hold some
amount of Ether, which is the currency of Ethereum. Smart con-
tract may receive Ether from other accounts when invoked, and can
send their Ether to other accounts with message calls. Contracts
can also be removed from the blockchain. This is called killing a
contract and results in completely erasing contract’s logic from the
blockchain and sending its Ether to a predetermined address.
All the actions a contract takes, including sending Ether and
getting killed, occur only when specific bytecode instructions are
executed during its invocation. The Ethereum Virtual Machine
(EVM) is the engine that interprets and executes the bytecode of
1 Available at https://github.com/MAIAN-tool/MAIAN.
1
2
3
4
5
6
7
function payout ( address [] recipients ,
uint256 [] amounts ) {
require ( recipients . length == amounts . length );
for ( uint i = 0; i  0) throw ;
m_numOwners = _owners . length + 1;
m_owners [1] = uint ( msg . sender );
m_ownerIndex [ uint ( msg . sender )] = 1;
m_required = _required ;
/* ... */
}
function kill ( address _to ) {
uint ownerIndex = m_ownerIndex [ uint ( msg . sender ) ];
if ( ownerIndex == 0) return ;
var pending = m_pending [ sha3 ( msg . data ) ];
if ( pending . yetNeeded == 0) {
pending . yetNeeded = m_required ;
pending . ownersDone = 0;
}
uint ownerIndexBit = 2** ownerIndex ;
if ( pending . ownersDone & ownerIndexBit == 0) {
if ( pending . yetNeeded <= 1)