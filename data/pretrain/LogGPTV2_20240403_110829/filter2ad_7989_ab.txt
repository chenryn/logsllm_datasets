}
以上代码对等号和左括号进行过滤，所以使用反引号代替括号，在通过编码解决。
闭合注释
function escape(input) {
// filter potential comment end delimiters
input = input.replace(/->/g, ‘_’);
// comment the input to avoid script execution
return ‘’;
}
以上代码将输出的内容放在注释中，且对->做了替换处理。所以html可以–>或–!>闭合注释
–!>
闭合大部分的标签
*/–>'”);>iframe>script>style>title>textarea>aa>#*/–>'”);>iframe>script>style>title>textarea>
宽字符闭合
*/–>%cf”%d5′>frame>script>style>title>textarea>
回车换行
很多时候，回车换行能绕过很多的限制
%0D%0A
**标签检测绕过**
fuzz各种标签，检查是否存在拦截或者过滤
  1. **针对黑名单**
  2. 大小写混写 **ALeRt(“XSS”);sCRipT>**
  3. 双写绕过 **alert(1)**
  4. 嵌套绕过 **ript >alert(/xss/);script>alert(/xss/);script>**
  5. 空字符绕过 **，09ipt >ALeRt(/XSS/);sCRipT>**
  6. 特殊字符黑名单，采用其他字符代替，如：
限制 ” 符号，输入
限制 ‘ 符号，输入、
限制 () 符号，输入
限制 () ‘ ” 符号，输入
或使用实体编码绕过。
  1. **绕过字符长度限制**
  2. **利用事件** 缩短长度，如，“onclick=alert(1)//”
  3. **使用base标签** ，base标签可以运用于页面的任何地方，且作用于之后的所有标签。通过在页面插入base标签，就可以在远程服务器伪造图片，链接或脚本，劫持页面的相对路径的标签。
  4. **对window.name赋值** ，没有特殊的字符限制。因为window对象是浏览器的窗体，而不是document对象。因此很多时候window对象不受同源策略的限制。可以用这个实现跨域，跨界面的传递。
**3\. 编码绕过**
Javascript的编码
十六进制
Unicode
URL编码
JS编码
HTML实体编码
在线编码/解码工具：[站长工具-编码解码在线](https://tool.chinaz.com/tools/urlencode.aspx)、[107000工具站](https://www.107000.com/)、[在线jsons字符实体转换](https://www.bejson.com/json2javapojo/new/)、[在线HTML字符实体转换](https://www.qqxiuzi.cn/bianma/zifushiti.php)
**4.使用其他标签** ，、、等；
**5.使用空字符，** 在关键词中添加空字符；
**6\. 使用转义字符；**
**常规Waf绕过思路**
[+] 标签语法替换
[+] 特殊符号干扰 比如 / #
[+] 提交方式更改 Request的前提下，Waf只检查URL内容而不检查POST内容
[+] 垃圾数据溢出
[+] 加密解密算法
[+] 结合其他漏洞绕过
**XSS自动化工具**
Xwaf，下载地址：github.com/3xp10it/xwaf
XSStrike，下载地址：github.com/s0md3v/XSStr
Fuzzing测试：
在线生成Fuzzing字典：https://xssfuzzer.com/fuzzer.html
Fuzzing字典：https://github.com/TheKingOfDuck/fuzzDicts
## 0x06 测试过程
**反射型XSS、DOM型XSS**
**验证测试情况**
在网站的搜索栏、用户登录入口、输入表单等处输入payload，查看页面是否有弹框，则存在反射型XSS漏洞；
**现实攻击情况**
攻击者寻找具有XSS漏洞的网站，植入payload构造恶意链接，将恶意链接发给用户，诱骗用户点击，用户点击此链接，XSS攻击执行。
**存储型XSS**
**验证测试情况**
在论坛、博客、留言板、网站的留言、评论、日志等交互处输入payload，查看页面是否有弹框。若有，先切换至网站其他页面，再返回输入payload的页面，若依旧出现弹窗，则存在存储型XSS漏洞。
**现实攻击情况**
攻击者在发帖或留言的过程中，将恶意脚本连同正常信息一起注入到发布内容中。随着发布内容被服务器存储下来，恶意脚本也将永久的存放到服务器的后端存储器中。当其他用户浏览这个被注入了
恶意脚本的帖子时，恶意脚本就会在用户的浏览器中得到执行。
**常用payload：**
 // 调用JavaScript语句
 // src是错误的 就会调用error函数
 // 点击a即可触发
 // 使用svg标签
### 测试案例1
在机构名称处输入测试代码，页面出现弹窗，证明XSS语句已被执行，此网站存在XSS漏洞。
### 测试案例2
在标题处处输入测试代码，页面出现弹窗，点击别的功能模块后再次返回此页面，依旧弹窗，所以此网站存在
**存储型XSS漏洞** 。
### 测试案例3
**xss挑战之旅**
访问网页，打开浏览器的开发者工具，查看到代码中对尖括号和双引号： **>** **、** **、’、”等，如果发现存在特殊字符，则将其过滤或者编码；
b. XSS Filter，会检查XSS特征的敏感字符，如、javascript等敏感字符；
c. 字符串是否超过最大长度限制；
d. 数字是否在指定的范围；
e. 是否符合特殊格式的要求
### 输出检查
一般而言，除了富文本的输出外，在变量输出到HTML页面时，可以使用编码或转译的方式防御XSS攻击。
使用安全的编码函数：
  1. HtmlEncode编码方式，针对HTML代码；
  2. JavascriptEncode编码方式，针对JavaScript；
  3. htmlentities()、htmlspecialchars()函数，针对PHP；
  4. XMLEncode、JSONEncode等。
### 处理富文本
  1. 在过滤富文本时，“事件”应被严格禁止，因为富文本的展示需求里不应该包括“事件”这种动态效果；
  2. 在标签的选择上，应该使用白名单，避免使用黑名单。白名单同样也应用于属性与事件的选择；
  3. 尽可能禁止用户自定义CSS与style；
### 防御DOM型XSS
DOM型XSS是一种比较特别的XSS漏洞，以上防御方法不太适用，需要特别对待。
从JavaScript输出到HTML页面，也相当于一次XSS输出的过程，所以需要分语境使用不同的编码函数。
### 其他加固方式
Anti_XSS
微软开发的，.NET平台下的，用于防止XSS攻击的类库，它提供了大量的编码函数来对用户输入的数据进行编码，可以实现基于白名单的输入的过滤和输出的编码。
HttpOnly Cookie
当Cookie在消息头中被设置为HttpOnly时，这样支持Cookie的浏览器将阻止客户端Javascript直接访问浏览器中的Cookies，从而达到保护敏感数据的作用。
Noscript
Noscript是一款免费的开源插件，该插件默认禁止所有的脚本，但可以自定义设置允许通过的脚本。
WAF
使用WAF，比如软件WAF、硬件WAF、云WAF。
在修补XSS漏洞时遇到最大挑战之一就是漏洞数量太多，因此开发者可能来不及也不情愿修补这些漏洞，从业务风险的角度来重新定位每个XSS漏洞，就具有了重要的意义。理论上讲，XSS漏洞虽然复杂，但是却是可以彻底解决的，在设计XSS解决方案时，应该深入理解XSS攻击的原理，针对不同的场景使用不同的方法。同时也可以参考很多的开源项目。
参考
[https://baijiahao.baidu.com/s?id=1711691365751381912&wfr=spider&for=pc](https://baijiahao.baidu.com/s?id=1711691365751381912&wfr=spider&for=pc)