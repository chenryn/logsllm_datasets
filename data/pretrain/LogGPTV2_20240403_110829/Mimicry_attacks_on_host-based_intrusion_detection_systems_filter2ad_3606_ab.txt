cious sequence has been executed, resuming execution of the
application may well lead to an abnormal system call trace.
In such a case, only two choices immediately present them-
selves: we could allow the application to continue executing
(thereby allowing the IDS to detect the attack, albeit after
the harm has already been done), or we could freeze the ap-
plication permanently (which is likely to be very noticeable
and thus might attract attention). A slightly better strategy
may be to cause the application to crash in some way that
makes the crash appear to have come from an innocuous
program bug rather than from a security violation. Since
in practice many programs are rather buggy, system admin-
istrators are used to seeing coredumps or the Blue Screen
of Death from time to time, and they may well ignore the
crash. However, this strategy is not without risk for the
attacker.
In short, a patient attacker is probably somewhat more
dangerous than a naive, impatient attacker, but the attacker
still has to get lucky to cause any harm, so in some scenarios
the risk might be acceptable to defenders.
Be patient, but make your own luck. One way the at-
tacker can improve upon passive patience is by loading the
dice. There are typically many possible paths of execution
through an application, each of which may lead to a slightly
di(cid:11)erent system call trace, and this suggests an attack strat-
egy: the attacker can look for the most favorable path of ex-
ecution and nudge the application into following that path.
As an optimization, rather than embedding a Trojan horse
and then allowing the application to execute normally, the
attacker can discard the application entirely and simulate
its presence. For example, the attacker can identify the
most favorable path of execution, then synthetically con-
struct the sequence of system calls that would be executed
by this path and issue them directly, inserting his malicious
sequence at the appropriate point. The analysis e(cid:11)ort can
all be pre-computed, and thus a stealthy attack might sim-
ply contain a sequence of hard-coded system calls that sim-
ulate the presence of the application for a while and then
eventually execute the malicious sequence.
In fact, we can see there is no reason for the attacker to
restrict himself to the feasible execution paths of the appli-
cation. The attacker can even consider system call traces
257that could not possibly be output by any execution of the
application, so long as those traces will be accepted as \nor-
mal" by the IDS. In other words, the attacker can examine
the set of system call traces that won’t trigger any alarms
and look for one such trace where the malicious sequence
can be safely inserted. Then, once such a path is identi(cid:12)ed,
the attacker can simulate its execution as above and proceed
to evade the IDS.
In essence, we are mimicking the behavior of the applica-
tion, but with a malicious twist. To continue the biological
analogy, a successful mimic will be recognized as \self" by
the immune system and will not cause any alarms. For this
reason, we dub this the mimicry attack [25]. This style of
attack is very powerful, but it requires a careful examination
of the IDS, and the attacker also has to somehow identify
favorable traces. We will study this topic in greater detail
in Section 4.
Replace system call parameters. Another observation is
that most schemes completely ignore the arguments to the
system call. For instance, an innocuous system call
open("/lib/libc.so", O_RDONLY)
looks indistinguishable (to the IDS) from the malicious call
open("/etc/shadow", O_RDWR).
The evasion technique, then, is obvious.
If we want to
write to the shadow password (cid:12)le, there is no need to wait
for the application to open the shadow password (cid:12)le during
normal execution. Instead, we may simply wait for the ap-
plication to open any (cid:12)le whatsoever and then substitute our
parameters ("/etc/shadow", O_RDWR) for the application’s.
This is apparently another form of mimicry attack.
As far as we can tell, almost all host-based intrusion detec-
tion systems completely ignore system call parameters and
return values. The only exception we are aware of is Wagner
and Dean’s static IDS [25], and they look only at a small
class of system call parameters, so parameter-replacement
attacks may be very problematic for their scheme as well.
Insert no-ops. Another observation is that if there is no
convenient way to insert the given malicious sequence into
the application’s system call stream, we can often vary the
malicious sequence slightly by inserting \no-ops" into it. In
this context, the term \no-op" indicates a system call with
no e(cid:11)ect, or whose e(cid:11)ect is irrelevant to the goals of the at-
tacker. Opening a non-existent (cid:12)le, opening a (cid:12)le and then
immediately closing it, reading 0 bytes from an open (cid:12)le de-
scriptor, and calling getpid() and discarding the result are
all examples of likely no-ops. Note that even if the original
malicious sequence will never be accepted by the IDS, some
modi(cid:12)ed sequence with appropriate no-ops embedded might
well be accepted without triggering alarms.
We show later in the paper (see Section 4.2 and Table 1)
that, with only one or two exceptions, nearly every system
call can be used as a \no-op." This gives the attacker great
power, since he can pad out his desired malicious sequence
out with other system calls chosen freely to maximize the
chances of avoiding detection. One might expect intuitively
that every system call that can be found in the normal
database may become reachable with a mimicry attack by
inserting appropriate no-ops; we develop partial evidence to
support this intuition in Section 6.
Generate equivalent attacks. More generally, any way
of generating variations on the malicious sequence with-
out changing its e(cid:11)ect gives the attacker an extra degree
of freedom in trying to evade detection. One can imagine
many ways to systematically create equivalent variations on
a given malicious sequence. For instance, any call to read()
on an open (cid:12)le descriptor can typically be replaced by a call
to mmap() followed by a memory access. As another exam-
ple, in many cases the system calls in the malicious sequence
can be re-ordered. An attacker can try many such possibili-
ties to see if any of them can be inserted into a compromised
application without detection, and this entire computation
can be done o(cid:15)ine in a single precomputation.
Also, a few system calls give the attacker special power,
if they can be executed without detection as part of the
exploit sequence. For instance, most IDS’s handle fork()
by cloning the IDS and monitoring both the child and par-
ent application process independently. Hence, if an attacker
can reach the fork() system call and can split the exploit
sequence into two concurrent chunks (e.g., overwriting the
password (cid:12)le and placing a backdoor in the ls program),
then the attacker can call fork() and then execute the (cid:12)rst
chunk in the parent and the second chunk in the child. As
another example, the ability to execute the execve() sys-
tem call gives the attacker the power to run any program
whatsoever on the system.
Of course, the above ideas for evasion can be combined
freely. This makes the situation appear rather grim for
the defenders: The attacker has many options, and though
checking all these options may require a lot of e(cid:11)ort on the
attacker’s part, it also seems unclear whether the defenders
can evaluate in advance whether any of these might work
against a given IDS. We shall address this issue next.
4. A THEORETICAL FRAMEWORK
In this section, we develop a systematic framework for me-
thodically identifying potential mimicry attacks. We start
with a given malicious sequence of system calls, and a model
of the intrusion detection system. The goal is to identify
whether there is any trace of system calls that is accepted
by the IDS (without triggering any alarms) and yet contains
the malicious sequence, or some equivalent variant on it.
This can be formalized as follows. Let (cid:6) denote the set of
system calls, and (cid:6)(cid:3) the set of sequences over the alphabet
(cid:6). We say that a system call trace T 2 (cid:6)(cid:3) is accepted (or al-
lowed ) by the IDS if executing the sequence T = hT1; T2; : : : i
does not trigger any alarms. Let A (cid:18) (cid:6)(cid:3) denote the set of
system call traces allowed by the IDS, i.e.,
A def
= fT 2 (cid:6)(cid:3) : T is accepted by the IDSg:
Also, let M (cid:18) (cid:6)(cid:3) denote the set of traces that achieve the
attacker’s goals, e.g.,
M def
= fT 2 (cid:6)(cid:3)
: T is an equivalent variant
on the given malicious sequenceg:
Now we can succinctly state the condition for the existence
of mimicry attacks. The set A \ M is exactly the set of
traces that permit the attacker to achieve his goals without
detection, and thus mimicry attacks are possible if and only
if A \ M 6= ;. If the intersection is non-empty, then any
of its elements gives a stealthy exploit sequence that can be
used to achieve the intruder’s goals while reliably evading
258detection.
The main idea of the proposed analytic method is to frame
this problem in terms of formal language theory. In this pa-
per, A is a regular language. This is fairly natural [20], as
(cid:12)nite-state IDS’s can always be described as (cid:12)nite-state au-
tomata and thus accept a regular language of syscall traces.
Moreover, we insist that M also be a regular language. This
requires a bit more justi(cid:12)cation (see Section 4.2 below), but
hopefully it does not sound too unreasonable at this point.
It is easy to generalize this framework still further2, but this
formulation has been more than adequate for all the host-
based IDS’s considered in our experiments.
With this formulation, testing for mimicry attacks can be
done automatically and in polynomial time. It is a standard
theorem of language theory that if L; L0 are two regular
languages, then so is L \ L0, and L \ L0 can be computed
e(cid:11)ectively [11, x3.2]. Also, given a regular language L00, we
can e(cid:14)ciently test whether L00 ?
= ;, and if L00 is non-empty,
we can quickly (cid:12)nd a member of L00 [11, x3.3]. From this,
it follows that if we can compute descriptions of A and M,
we can e(cid:14)ciently test for the existence of mimicry attacks.
In the remainder of this section, we will describe (cid:12)rst how
to compute A and then how to compute M.
4.1 Modelling the IDS
In Forrest’s IDS, to predict whether the next system call
will be allowed, we only need to know the previous (cid:12)ve sys-
tem calls. This is a consequence of the fact that Forrest’s
IDS works by looking at all subtraces of six consecutive sys-
tem calls, checking that each observed subtrace is in the
database of allowable subtraces.
Consequently, in this case we can model the IDS as a
(cid:12)nite-state automaton with statespace given by (cid:12)ve-tuples
of system calls and with a transition for each allowable sys-
tem call action. More formally, the statespace is Q = (cid:6)5
(recall that (cid:6) denotes the set of system calls), and we have
a transition
(s0; s1; s2; s3; s4)
s5(cid:0)! (s1; s2; s3; s4; s5)
for each subtrace (s0; : : : ; s5) found in the IDS’s database
of allowable subtraces. The automaton can be represented
e(cid:14)ciently in the same way that the normal database is rep-
resented.
s
Next we need a initial state and a set of (cid:12)nal (accepting)
states, and this will require patching things up a bit. We
introduce a new absorbing state Alarm with a self-transition
(cid:0)! Alarm on each system call s 2 (cid:6), and we ensure
Alarm
that every trace that sets o(cid:11) an intrusion alarm ends up in
s5(cid:0)!
the state Alarm by adding a transition (s0; s1; s2; s3; s4)
Alarm for each subtrace (s0; : : : ; s5) that is not found in the
IDS’s database of allowable subtraces. Then the (cid:12)nal (ac-
cepting) states are all the non-alarm states, excluding only
the special state Alarm.
The initial state of the automaton represents the state the
application is in when the application is (cid:12)rst penetrated.
This is heavily dependent on the application and the attack
vector used, and presumably each di(cid:11)erent vulnerability will
lead to a di(cid:11)erent initial state. For instance, if there is a
bu(cid:11)er overrun that allows the attacker to gain control just
2For instance, we could allow A or M (but not both) to
be context-free languages without doing any violence to the
polynomial-time nature of our analysis.
after the application has executed (cid:12)ve consecutive read()
system calls, then the initial state of the automaton should
be (read; read; read; read; read).
Extensions. In practice, one may want to re(cid:12)ne the model
further to account for additional features of the IDS. For
instance, the locality frame count, which is slightly more
forgiving of occasional mismatched subtraces and only trig-
gers alarms if su(cid:14)ciently many mismatches are seen, can
be handled within a (cid:12)nite-state model. For details, see Ap-
pendix A.
4.2 Modelling the malicious sequence
Next, we consider how to express the desired malicious
sequence within our framework, and in particular, how to
generate many equivalent variations on it. The ability to
generate equivalent variations is critical to the success of
our attack, and rests on knowledge of equivalences induced
by the operating system semantics.
let
M = hM1; : : : ; Mni 2 (cid:6)(cid:3) denote a malicious sequence we
want to sneak by the IDS.
In the following,
Adding no-ops. We noted before that one simple way to
generate equivalent variants is by freely inserting \no-ops"
into the malicious sequence M . A \no-op" is a system call
that has no e(cid:11)ect, or more generally, one that has no e(cid:11)ect
on the success of the malicious sequence M . For instance, we
can call getpid() and ignore the return value, or call brk()
and ignore the newly allocated returned memory, and so on.
A useful trick for (cid:12)nding no-ops is that we can invoke
a system call with an invalid argument. When the system
call fails, no action will have been taken, yet to the IDS it
will appear that this system call was executed. To give a
few examples, we can open() a non-existent pathname, or
we can call mkdir() with an invalid pointer (say, a NULL
pointer, or one that will cause an access violation), or we can
call dup() with an invalid (cid:12)le descriptor. Every IDS known
to the authors ignores the return value from system calls,
and this allows the intruder to nullify the e(cid:11)ect of a system
call while fooling the IDS into thinking that the system call
succeeded.
The conclusion from our analysis is that almost every sys-
tem call can be nulli(cid:12)ed in this way. Any side-e(cid:11)ect-free
system call is already a no-op. Any system call that takes a
pointer, memory address, (cid:12)le descriptor, signal number, pid,
uid, or gid can be nulli(cid:12)ed by passing invalid arguments.
One notable exception is exit(), which kills the process no
matter what its argument is. See Table 1 for a list of all sys-
tem calls we have found that might cause di(cid:14)culties for the
attacker; all the rest may be freely used to generate equiv-
alent variants on the malicious sequence3. The surprise is
not how hard it is to (cid:12)nd nulli(cid:12)able system calls, but rather
how easy it is to (cid:12)nd them|with only a few exceptions,
nearly every system call is readily nulli(cid:12)able. This gives the
attacker extraordinary freedom to vary the malicious exploit
sequence.
We can characterize the equivalent sequences obtained
this way with a simple regular expression. Let N (cid:18) (cid:6) de-
note the set of nulli(cid:12)able system calls. Consider the regular
3It is certainly possible that we might have overlooked
some other problematic system calls, particularly on sys-
tems other than Linux. However, we have not yet encoun-
tered any problematic system call not found in Table 1.
259System call Nulli(cid:12)-
exit()
pause()
able?
No
No
Useful to an
attacker?
No
Unlikely
vhangup()
fork()
No
No