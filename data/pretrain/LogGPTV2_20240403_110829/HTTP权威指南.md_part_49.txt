### 优化后的文本

#### 摘要认证与基本认证的对比

**摘要认证**由单向散列函数 \( H(d) \) 和摘要生成函数 \( KD(s, d) \) 组成，其中 \( s \) 表示密码，\( d \) 表示数据。对于初学者而言，RFC 2617兼容模式及规范中背景资料的缺乏可能使其显得较为复杂。我们将尽力提供相关帮助。

**图13-3 基本认证与摘要认证的语法对比**

##### 基本认证
1. **查询**
   ```
   GET /cgi-bin/checkout?cart=17854 HTTP/1.1
   客户端 -> 服务器
   ```

2. **质询**
   ```
   HTTP/1.1 401 Unauthorized
   客户端 <- WWW-Authenticate: Basic realm="Shopping Cart" 服务器
   Shopping Cart
   Username:
   Password:
   ```

3. **响应**
   ```
   GET /cgi-bin/checkout?cart=17854 HTTP/1.1
   客户端 -> Authorization: Basic YnJpYW4tdG90dHk6T3ch 服务器
   ```

4. **成功**
   ```
   HTTP/1.1 200 OK
   客户端 <- ... 服务器
   ```

##### 摘要认证
1. **查询**
   ```
   GET /cgi-bin/checkout?cart=17854 HTTP/1.1
   客户端 -> 服务器
   ```

2. **质询**
   ```
   HTTP/1.1 401 Unauthorized
   客户端 <- WWW-Authenticate: Digest realm="Shopping Cart"
   qop="auth,auth-int"
   Username: nonce="66C4EF58DA7CB956BD04233FBB64E0A4"
   Password:
   ```

3. **响应**
   ```
   GET /cgi-bin/checkout?cart=17854 HTTP/1.1
   客户端 -> Authorization: Digest
   username="bri"
   realm="Shopping Cart"
   nonce="66C4EF58DA7CB956BD04233FBB64E0A4"
   uri="/cgi-bin/checkout?cart=17854"
   qop="auth"
   nc=0000001,
   cnonce="CFA9207102EA210EA210FFC1120F6001110D073"
   response="E483C94FOB3CA29109A7BA83D10FE519"
   ```

4. **成功**
   ```
   HTTP/1.1 200 OK
   客户端 <- Authorization-Info: nextnonce="29FE72D109C7EF23841AB914F0C3B831"
   qop="auth"
   rspauth="89F5A4CE6FA932F6C4DA120CEB754290"
   cnonce="CFA9207102EA210EA210FFC1120F6001110D073"
   ...
   ```

### 摘要认证算法详解

**数据块定义：**
- **A1**：包含安全信息（如用户名、密码、保护域和随机数）的数据块。
- **A2**：包含请求报文中非保密属性（如URL、请求方法和报文实体）的数据块。

**13.2.2 算法 \( H(d) \) 和 \( KD(s, d) \)**

摘要认证支持多种摘要算法的选择。RFC 2617建议使用MD5和MD5-sess两种算法，默认为MD5。无论使用哪种算法，都会用函数 \( H \) 计算数据的MD5值，并用摘要函数 \( KD \) 计算以冒号连接的密码和非保密数据的MD5值。例如：
- \( H() = MD5() \)
- \( KD(,) = H(concatenate(:)) \)

**13.2.3 与安全性相关的数据（A1）**

A1是密码和受保护信息的产物，包含用户名、密码、保护域和随机数等内容。A1只涉及安全信息，与底层报文自身无关。A1会与 \( H \)、\( KD \) 和 A2 一同用于摘要计算。RFC 2617根据选择的算法定义了两种计算A1的方式：

- **MD5**：每条请求运行一次单向散列函数。A1是由冒号连接起来的用户名、域以及密码三元组。
- **MD5-sess**：仅在第一次WWW-Authenticate握手时运行一次散列函数。对用户名、域和密码进行一次CPU密集型散列，并将其放在当前随机数和客户端随机数（cnonce）的前面。

**表13-2 算法对A1的定义**

| 算法 | A1 |
|------|----|
| MD5  | \( A1 = \text{username}:\text{realm}:\text{password} \) |
| MD5-sess | \( A1 = MD5(\text{username}:\text{realm}:\text{password})\text{:nonce:cnonce} \) |

**13.2.4 与报文有关的数据（A2）**

A2表示与报文自身有关的信息，如URL、请求方法和报文实体的主体部分。A2有助于防止方法、资源或报文被篡改。A2会与 \( H \)、\( KD \) 和 A1 一起用于摘要的计算。RFC 2617根据所选择的保护质量（qop），为A2定义了两种策略：

- **未定义**：仅包含HTTP请求方法和URL。
- **auth**：包含HTTP请求方法和URL，这是默认的情况。
- **auth-int**：添加了报文实体的主体部分，以提供一定程度的报文完整性检测。

**表13-3 算法对A2的定义（请求摘要）**

| qop | A2 |
|-----|----|
| 未定义 | \( \text{request-method}:\text{uri-directive-value} \) |
| auth | \( \text{request-method}:\text{uri-directive-value} \) |
| auth-int | \( \text{request-method}:\text{uri-directive-value}:H(\text{entity-body}) \) |

**13.2.5 摘要算法总述**

RFC 2617定义了两种给定了 \( H \)、\( KD \)、A1和A2之后，计算摘要的方式：

- **未定义**：与老规范RFC 2069兼容，在没有qop选项的时候使用。它是用保密信息和随机报文数据的散列值来计算摘要的。
- **auth或auth-int**：现在推荐使用的方式——这种方式包含了对随机数计算和对称认证的支持。只要qop为auth或auth-int，就要使用这种方式。它向摘要中添加了随机计数、qop和cnonce数据。

**表13-4 新/老摘要算法**

| qop | 摘要算法 | 备注 |
|-----|----------|------|
| 未定义 | \( KD(H(A1), \text{:H(A2)}) \) | 不推荐 |
| auth或auth-int | \( KD(H(A1), \text{:::nc:cnonce:qop:H(A2)}) \) | 推荐 |

**表13-5 展开的摘要算法备忘单**

| qop | 算法 | 展开的算法 |
|-----|------|-------------|
| 未定义 | \( MD5(MD5(A1)::MD5(A2)) \) | - |
| auth | \( MD5(MD5(A1):::::MD5(A2)) \) | - |
| auth-int | \( MD5(MD5(A1):::::MD5(A2)) \) | - |

### 摘要认证会话

客户端响应对保护空间的WWW-Authenticate质询时，会启动一个此保护空间的认证会话。在客户端收到另一条来自保护空间的任意一台服务器的WWW-Authenticate质询之前，认证会话会一直持续。客户端应记住用户名、密码、随机数、随机数计数以及一些与认证会话有关的隐晦值，以便将来在此保护空间中构建请求的Authorization首部时使用。

随机数过期时，即使老的Authorization首部所包含的随机数不再新鲜，服务器也可以选择接受其中的信息。服务器也可以返回一个带有新随机数的401响应，让客户端重试这条请求；指定这个响应为stale=true，表示服务器在告知客户端用新的随机数来重试，而不再重新提示输入新的用户名和密码了。

### 预授权

在普通的认证方式中，事务结束之前，每条请求都要有一次请求/质询的循环。如果客户端事先知道下一个随机数是什么，就可以取消这个请求/质询循环，这样客户端就可以在服务器发出请求之前，生成正确的Authorization首部了。如果客户端能在服务器要求它计算Authorization首部之前将其计算出来，就可以预先将Authorization首部发送给服务器，而不用进行请求/质询了。

**图13-4 预授权减少了报文的数量**

（a）普通的请求/质询  
```
客户端 -> 请求
客户端 <- 质询
客户端 -> 请求 + 授权
客户端 <- 成功 + 随机数信息
```

（b）预授权  
```
客户端 -> 请求 + 授权
客户端 <- 成功 + 随机数信息
客户端 -> 请求 + 授权
客户端 <- 成功
```

预授权对基本认证来说并不重要（而且很常见）。浏览器通常会维护一些客户端数据库以存储用户名和密码。一旦用户与某站点进行了认证，浏览器通常会为后继对该URL的请求发送正确的Authorization首部。

由于摘要认证使用了随机数技术来破坏重放攻击，所以对摘要认证来说，预授权要稍微复杂一些。服务器会产生任意的随机数，所以在客户端收到质询之前，不一定总能判定应该发送什么样的Authorization首部。

摘要认证提供了几种预授权方式，使客户端无需等待新的WWW-Authenticate质询就能获得正确的随机数：

1. **预先生成下一个随机数**
   可以在Authentication-Info成功首部中将下一个随机数预先提供给客户端。这个首部是与前一次成功认证的200 OK响应一同发送的。
   ```
   Authentication-Info: nextnonce=""
   ```

2. **受限的随机数重用机制**
   另一种方法不是预先生成随机数序列，而是在有限的次数内重用随机数。比如，服务器可能允许将某个随机数重用5次，或者重用10秒。在这种情况下，客户端可以随意发布带有Authorization首部的请求，并且可以对请求进行管道化。随机数过期时，服务器要向客户端发送401 Unauthorized质询，并设置 `WWW-Authenticate: stale=true` 指令。

3. **同步生成随机数**
   还可以采用时间同步的随机数生成算法，客户端和服务器可根据共享的密钥，生成第三方无法轻易预测的、相同的随机数序列（比如安全ID卡）。这些算法都超出了摘要认证规范的范畴。