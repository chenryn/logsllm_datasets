• 由单向散列函数H(d)和摘要KD(s,d)组成的一对函数，其中s表示密码，d表示
数据。
注10： 但对初学者来说，可选的RFC 2617兼容模式以及规范中背景资料的缺乏，使其变得有些复杂。我
们会努力提供一些帮助。
308 ｜ 第13章
基本认证
(a)查询
GET /cgi-bin/checkout?cart=17854 HTTP/1.1
客户端 服务器
(b)质询
HTTP/1.1 401 Unauthorized
客户端 WWW-Authenticate: Basic realm="Shopping Cart" 服务器
Shopping Cart
Username:
Password:
(c)响应
GET /cgi-bin/checkout?cart=17854 HTTP/1.1
客户端 Authorization: Basic YnJpYW4tdG90dHk6T3ch 服务器
(d)成功
HTTP/1.1 200 OK
客户端 ... 服务器
摘要认证
(e)查询
GET /cgi-bin/checkout?cart=17854 HTTP/1.1
客户端 服务器
(f)质询
HTTP/1.1 401 Unauthorized
客户端 WWW-Authenticate: Digest 服务器
Shopping Cart realm="Shopping Cart"
qop="auth,auth-int"
Username: nonce="66C4EF58DA7CB956BD04233FBB64E0A4"
Password:
(g)响应
GET /cgi-bin/checkout?cart=17854 HTTP/1.1
客户端 Authorization: Digest 服务器
username="bri"
realm="Shopping Cart"
nonce="66C4EF58DA7CB956BD04233FBB64E0A4"
uri="/cgi-bin/checkout?cart=17854"
qop="auth"
nc=0000001,
cnonce="CFA9207102EA210EA210FFC1120F6001110D073"
response="E483C94FOB3CA29109A7BA83D10FE519"
(h)成功
HTTP/1.1 200 OK
Authorization-Info: nextnonce= 服务器
"29FE72D109C7EF23841AB914F0C3B831"
qop= ÒauthÓ
rspauth="89F5A4CE6FA932F6C4DA120CEB754290"
cnonce="CFA9207102EA210EA210FFC1120F6001110D073"
...
图13-3 基本认证与摘要认证的语法对比
摘要认证 ｜ 309
• 一个包含了安全信息的数据块，包括密码，称为A1。
• 一个包含了请求报文中非保密属性的数据块，称为A2。
H和KD处理两块数据A1和A2，产生摘要。
13.2.2 算法H(d)和KD(s,d)
291 摘要认证支持对各种摘要算法的选择。RFC 2617建议的两种算法为MD5和MD5-
~
292 sess（“sess”表示会话），如果没有指定其他算法，默认算法为MD5。
不管使用的是MD5还是MD5-sess，都会用函数H来计算数据的MD5，用摘要函
数KD来计算以冒号连接的密码和非保密数据的MD5。例如：
H() = MD5()
KD(,) = H(concatenate(:))
13.2.3 与安全性相关的数据（A1）
被称为A1的数据块是密码和受保护信息的产物，它包含有用户名、密码、保护域
和随机数等内容。A1只涉及安全信息，与底层报文自身无关。A1会与H、KD和
A2一同用于摘要计算。
RFC 2617根据选择的算法定义了两种计算A1的方式。
• MD5
为每条请求运行单向散列函数。A1是由冒号连接起来的用户名、域以及密码三元组。
• MD5-sess
只在第一次WWW-Authenticate握手时运行一次散列函数。对用户名、域和密码进
行一次CPU密集型散列，并将其放在当前随机数和客户端随机数（cnonce）的前面。
表13-2显示了A1的定义。
表13-2 算法对A1的定义
算法 A1
MD5 A1 = ::
MD5-sess A1 = MD5(::)::
13.2.4 与报文有关的数据（A2）
数据块A2表示的是与报文自身有关的信息，比如URL、请求方法和报文实体的主
310 ｜ 第13章
体部分。A2有助于防止方法、资源或报文被篡改。A2会与H、KD和A1一起用于
摘要的计算。
RFC 2617根据所选择的保护质量（qop），为A2定义了两种策略。
• 第一种策略只包含HTTP请求方法和URL。当qop="auth"时使用这种策略，
这是默认的情况。
• 第二种策略添加了报文实体的主体部分，以提供一定程度的报文完整性检测。
qop="auth-int"时使用。 293
表13-3显示了A2的定义。
表13-3 算法对A2的定义（请求摘要）
qop A2
未定义 :
auth :
auth-int ::H()
request-method是HTTP的请求方法。uri-directive-value是请求行中的请
求URI。可能是个"*"、 absoluteURL或者 abs_path，但它必须与请求URI一致。
尤其需要注意的是，如果请求URI是absoluteURL，它必须是个绝对URL。
13.2.5 摘要算法总述
RFC 2617定义了两种给定了H、KD、A1和A2之后，计算摘要的方式。
• 第一种方式要与老规范RFC 2069兼容，在没有qop选项的时候使用。它是用保
密信息和随机报文数据的散列值来计算摘要的。
• 第二种方式是现在推荐使用的方式——这种方式包含了对随机数计算和对称认证
的支持。只要qop为auth或auth-int，就要使用这种方式。它向摘要中添加
了随机计数、qop和cnonce数据。
表13-4给出了得到的摘要函数定义。注意得到的摘要使用了H、KD、A1和A2。
表13-4 新/老摘要算法
qop 摘要算法 备 注
未定义 KD(H(A1), :H(A2)) 不推荐
auth或auth-int KD(H(A1), ::::H(A2)) 推荐
摘要认证 ｜ 311
这些派生封装层很容易把人弄晕。这也是有些读者觉得RFC 2617难懂的原因之一。
为了简化，表13-5扩展了H和KD的定义，用A1和A2来表示摘要。
表13-5 展开的摘要算法备忘单
qop 算 法 展开的算法
未定义  MD5(MD5(A1)::MD5(A2))
294
MD5
MD5-sess
auth  MD5(MD5(A1):::::MD5(A2))
MD5
MD5-sess
auth-int  MD5(MD5(A1):::::MD5(A2))
MD5
MD5-sess
13.2.6 摘要认证会话
客户端响应对保护空间的WWW-Authenticate质询时，会启动一个此保护空间的认
证会话（与受访问服务器的标准根结合在一起的域就定义了一个“保护空间”）。
在客户端收到另一条来自保护空间的任意一台服务器的WWW-Authenticate质
询之前，认证会话会一直持续。客户端应该记住用户名、密码、随机数、随机数
计数以及一些与认证会话有关的隐晦值，以便将来在此保护空间中构建请求的
Authorization首部时使用。
随机数过期时，即便老的Authorization首部所包含的随机数不再新鲜了，服务
器也可以选择接受其中的信息。服务器也可以返回一个带有新随机数的401响应，
让客户端重试这条请求；指定这个响应为stale=true，表示服务器在告知客户端
用新的随机数来重试，而不再重新提示输入新的用户名和密码了。
13.2.7 预授权
在普通的认证方式中，事务结束之前，每条请求都要有一次请求/质询的循环，参
见图13-4a。
如果客户端事先知道下一个随机数是什么，就可以取消这个请求/质询循环，这样
客户端就可以在服务器发出请求之前，生成正确的Authorization首部了。如果
客户端能在服务器要求它计算Authorization首部之前将其计算出来，就可以预
先将Authorization首部发送给服务器，而不用进行请求/质询了。图13-4b显示
了这种方式对性能的影响。
312 ｜ 第13章
（a）普通的请求/质询 （b）预授权
客户端 服务器 客户端 服务器
请求 请求
质询 质询
请求+授权 请求+授权
成功+随机数信息
成功
请求 请求+授权
成功+随机数信息
质询
请求+授权 请求+授权
成功 成功
请求
质询
请求+授权
成功
图13-4 预授权减少了报文的数量
预授权对基本认证来说并不重要（而且很常见）。浏览器通常会维护一些客户端数据
库以存储用户名和密码。一旦用户与某站点进行了认证，浏览器通常会为后继对那
个URL的请求发送正确的Authorization首部（参见第12章）。 295
由于摘要认证使用了随机数技术来破坏重放攻击，所以对摘要认证来说，预授权要
稍微复杂一些。服务器会产生任意的随机数，所以在客户端收到质询之前，不一定
总能判定应该发送什么样的Authorization首部。
摘要认证在保留了很多安全特性的同时，还提供了几种预授权方式。这里列出了三
种可选的方式，通过这些方式，客户端无需等待新的WWW-Authenticate质询，就
可以获得正确的随机数：
• 服务器预先在Authentication-Info成功首部中发送下一个随机数；
摘要认证 ｜ 313
• 服务器允许在一小段时间内使用同一个随机数；
296 • 客户端和服务器使用同步的、可预测的随机数生成算法。
1. 预先生成下一个随机数
可以在Authentication-Info成功首部中将下一个随机数预先提供给客户端。这
个首部是与前一次成功认证的200 OK响应一同发送的。
Authentication-Info: nextnonce=""
有了下一个随机数，客户端就可以预先发布Authorization首部了。
尽管这种预授权机制避免了请求/质询循环（加快了事务处理的速度），但实际上它
也破坏了对同一台服务器的多条请求进行管道化的功能，因为在发布下一条请求之
前，一定要收到下一个随机值才行。而管道化是避免延迟的一项基本技术，所以这
样可能会造成很大的性能损失。
2. 受限的随机数重用机制
另一种方法不是预先生成随机数序列，而是在有限的次数内重用随机数。比如，服
务器可能允许将某个随机数重用5次，或者重用10秒。
在这种情况下，客户端可以随意发布带有Authorization首部的请求，而且由于随
机数是事先知道的，所以还可以对请求进行管道化。随机数过期时，服务器要向客户
端发送401 Unauthorized质询，并设置WWW-Authenticate:stale=true指令：
WWW-Authenticate: Digest
realm=""
nonce=""
stale=true
重用随机数使得攻击者更容易成功地实行重放攻击。虽然这确实降低了安全性，但
重用的随机数的生存期是可控的（从严格禁止重用到较长时间的重用），所以应该可
以在安全和性能间找到平衡。
此外，还可以通过其他一些特性使重放攻击变得更加困难，其中就包括增量计数器
和IP地址测试。但这些技术只能使攻击的实施更加麻烦，并不能消除由此带来的安
全隐患。
3. 同步生成随机数
还可以采用时间同步的随机数生成算法，客户端和服务器可根据共享的密钥，生成
第三方无法轻易预测的、相同的随机数序列（比如安全ID卡）。
297 这些算法都超出了摘要认证规范的范畴。