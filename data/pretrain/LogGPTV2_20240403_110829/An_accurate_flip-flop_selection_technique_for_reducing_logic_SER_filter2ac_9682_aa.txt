# An Accurate Flip-flop Selection Technique for Reducing Logic SER

## Authors
- Eric L. Hill
- Mikko H. Lipasti
- Kewal K. Saluja

## Affiliation
Department of Electrical and Computer Engineering, University of Wisconsin - Madison  
Email: {elhill, mikko, saluja}@ece.wisc.edu

## Conference
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27, 2008

## Abstract
The combination of continued technology scaling and increased on-chip transistor densities has made vulnerability to radiation-induced soft errors a significant design concern. Specifically, the effects of these errors on logic nodes are predicted to play an increasingly large role in determining the overall failure rate of future VLSI chips. While numerous techniques have been proposed to mitigate the effects of soft errors, system designers must ensure that the application of these solutions does not compromise other design goals. This work presents a heuristic to selectively apply temporal redundancy to flip-flops within a pipelined logic unit, achieving significant reductions in failures associated with soft errors while maintaining minimal overhead.

## 1. Introduction
As computing systems become increasingly ubiquitous, architects strive to create robust systems capable of operating in a wide variety of environments. In addition to meeting performance and power requirements, engineers now have to spend a significant amount of time ensuring their designs also meet reliability goals. The combination of continued technology scaling and increased on-chip transistor densities has made vulnerability to radiation-induced soft errors a significant design concern [8]. Most research on soft errors has focused on understanding and mitigating their effects on storage structures [3]. Protecting these structures is a sensible starting point since the majority of transistors on a conventional microprocessor die are dedicated to some form of storage. However, as a consequence of both the increased use of storage protection schemes and technology scaling, the fraction of the system failure rate due to soft errors on logic nodes has been increasing dramatically. A recent study predicts that for the 50 nm technology generation, the contribution of particle strikes on combinational logic nodes to the overall failure rate will be equivalent to that of storage structures [11].

Since architects are concerned with satisfying multiple design goals simultaneously, low-cost reliability solutions that provide error tolerance with minimal overhead are increasingly attractive. This is especially true for many commodity or embedded architectures, where solutions relying on full or near-full system redundancy are not practical. An area overhead of 10% has been suggested as a reasonable target for academic researchers developing new mitigation techniques [1]. To satisfy these constraints, the ability to accurately assess which subcomponents of a system contribute most significantly to the overall failure rate is essential.

In this work, we present and evaluate a heuristic for placing soft error detectors (time-skewed redundant flip-flops) within a logic unit. The presented algorithm enables both qualitative and quantitatively accurate conclusions about the effect of each decision made. This accuracy allows logic designers to allocate resources toward reliability solutions in the most cost-effective manner possible. We evaluate our technique in the context of hardening pipelined functional units, using the results of our heuristics to place the detectors. Our findings show that for the functional units studied, in the best case, a greater than 20X reduction in the soft error rate can be achieved at a cost of less than 10% additional area.

The rest of this paper is organized as follows. Section 2 provides background on soft errors in logic and the motivation for this study. Section 3 describes the soft error detectors used in this work. Sections 4 and 5 outline our heuristic for detector placement and the infrastructure built for evaluation, respectively. An experimental evaluation of our technique is presented in Section 6. Related work and conclusions from this study are discussed in Sections 7 and 8.

## 2. Background and Motivation

### 2.1. Background on Logic Soft Errors
Radiation-induced transient faults, or soft errors, typically originate from two sources: alpha particles present in packaging materials and high-energy neutron particles from cosmic rays. This study focuses on soft errors caused by neutron particles, as recent studies have shown that cosmic radiation is now the primary source [11]. Cosmic ray flux is dependent on altitude, meaning that systems operating at higher altitudes have significantly higher soft error rates (SER) than those at sea level [11].

Soft errors occur when radiation particles strike sensitive regions of semiconductor devices, injecting charge. Depending on the sizing of the affected transistor and the amount of charge injected, a single event effect may be induced. If the affected device is part of a memory cell (either in a storage array or a latch), the injected charge could potentially flip the current value stored, resulting in a single event upset (SEU). If the device is part of a combinational logic gate, the injected charge could trigger the generation of a single event transient (SET). An SET is a transient voltage pulse appearing at the output of the affected combinational gate. SETs only result in errors if they propagate to and alter the value captured by a downstream register (a latch or flip-flop, depending on the clocking strategy) [14]. The minimum amount of charge needed to induce a single event effect is referred to as the critical charge or Qcrit [11]. This work specifically targets the effects of SETs, with the primary goal of reducing the logic component of the soft error rate.

Soft error rates are generally expressed using the metric of Failures in Time (FIT), defined as the number of failures per 10^9 hours [8]. The FIT rate can be calculated by multiplying the Raw Strike Rate (which is a function of the component area and altitude-dependent neutron flux) by a derating factor. The derating factor is the probability that a particle strike on a component manifests itself as an error at an output. There exist three well-known masking phenomena (logical, electrical, and timing window) that prevent SETs from propagating to and being latched by circuit outputs [11]. Logical masking occurs when a transient waveform is prevented from propagating from an input to the output of a gate due to a controlling value at one of the other inputs. Timing window masking can occur when a SET propagates successfully from a gate to a downstream flip-flop but does not arrive during the interval of time when the flip-flop is sampling its data. Electrical masking occurs when the delay of a gate is larger than the duration of the voltage transient at its input, such that the resulting transient appearing at the output of the gate is attenuated in terms of duration and height. Technology scaling has diminished the significance of these masking agents, making soft errors in logic a much larger concern [11]. This work specifically targets reducing the derating component of Equation 1.

### 2.2. Motivation
As discussed previously, SETs only become errors when they propagate from a combinational logic gate to an output and alter the value that is captured by a downstream flip-flop. Since particle strikes occur with equal probability at any given point in time, individual output bits (flip-flops) in a circuit are uniformly masked by timing windows. In contrast, individual output bits can have differing fan-in cones, meaning that SETs can potentially propagate to individual output bits at varying rates. This means that, unlike timing window masking, logical masking is not necessarily uniform across output bits. A prior study on estimating SER reports that in multipliers, the center bits tend to have an error rate that is orders of magnitude larger than those of the bits closer to the most and least significant positions [12]. The authors refer to this phenomenon as SER peaking [12]. We have also observed this phenomenon by modeling a 16x16 integer multiplier and performing statistical fault injection. Figure 1 shows the amount of errors that occur on each output bit of the multiplier. We believe that this SER peaking phenomenon presents an opportunity for low-cost soft error protection. Ideally, a combinational multiplier with this behavior could be hardened from logic soft errors by simply protecting the subset of output flip-flops where SER peaking occurs.

For combinational circuits, the subset of output flip-flops that need to be protected can be identified by performing statistical fault injection and observing the number of times each output bit is corrupted. Identifying a similar subset of flip-flops in a pipelined circuit is a significantly harder problem. Figure 2 shows our assumed fault model for a SET occurring in a pipelined circuit. This is more complex than the model for a SET in a combinational circuit, which would only consist of outcomes A, B, and C. From this model, it is clear that even if a SET propagates to and is latched by a flip-flop, that error could still potentially be masked as it propagates through the ensuing pipeline stages, never manifesting itself at a circuit output. Additionally, it is possible for an SET to corrupt multiple intermediate flip-flops in a circuit, with only a subset of the corrupted elements responsible for propagating that error to the outputs. Examples of these scenarios are provided in Section 4. The methodology presented in this work accurately identifies the flip-flops that most significantly impact the failure rate and are thus the best locations to place SET detectors in the context of this more complex fault model.

## 3. Overview of SET Detection Techniques
This section provides an overview of SET detection techniques that can be selectively applied based on the results of our heuristic. We primarily consider solutions that detect SETs by taking multiple flip-flop data samples and comparing the values captured. This is accomplished by duplicating the capturing flip-flop and either time-shifting the data input to the duplicate copy or time-shifting the clock input. Both solutions are conceptually similar but have unique advantages and disadvantages. This section discusses the trade-offs associated with each option.

### 3.1. Time-Shifted Clock Inputs
This method of SET detection was inspired by the Razor flip-flop proposed by Ernst et al. [6], although the intention of the Razor flip-flop was to allow for more aggressive dynamic voltage scaling rather than improving reliability. The principal idea behind this technique is to duplicate the flip-flop of interest and supply a delayed clock to one of the flip-flops, as shown in Figure 3. As flip-flops take their input samples on the rising edge of the clock, time-shifting the clock inputs allows two different data samples to be taken. A timing diagram of how this technique detects the presence of errors is shown in Figure 4. Both flip-flops take their data samples during the intervals specified by the vertical dotted lines (this work assumes positive edge-triggered flip-flops). If there is a mismatch between the two data samples, the pipeline is flushed, and instructions can be re-executed. The main trade-off that must be considered when using a technique like this is related to the amount of delay placed between the main and duplicate clock signals. A large amount of skew between the main and shadow clocks detects a large fraction of SETs but can potentially create short path issues. If the skew between clocks is longer than the shortest path in the circuit, the data sample taken by the shadow flip-flop could be the next unit of data propagating through the pipeline, potentially resulting in false positives. The original Razor work dealt with this problem by manually padding short paths [6].

### 3.2. Time-Shifted Data Inputs
Another equivalent method of SET detection, illustrated in Figure 5, is to time-shift the data rather than the clock inputs to each flip-flop. This method was inspired by the work presented in [7]. The timing diagram in Figure 6 illustrates how this technique can be used to detect errors. Like the previously presented solution, there also exists a trade-off concerning the amount of skew between the main and shadow data inputs. A large amount of skew can detect a large fraction of SETs, but if the augmented flip-flop is on a critical path, the clock period must be increased to accommodate the skewing delay.

The best technique for a particular logic unit can vary depending on the specific design constraints and requirements.