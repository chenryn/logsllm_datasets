:::
`iscsi`{.literal} Kickstart
命令是可选的。它指定了在安装过程中要添加的附加 iSCSI 存储。
::: title
**语法**
:::
``` screen
iscsi --ipaddr=address [OPTIONS]
```
::: itemizedlist
**必填选项**
-   `--ipaddr=`{.literal} （必需）- 要连接的目标的 IP 地址。
:::
::: itemizedlist
**可选选项**
-   `--port=`{.literal} （必需）- 端口号。如果没有存在，默认自动使用
    `--port=3260`{.literal}。
-   `--target=`{.literal} - 目标 IQN（iSCSI 限定名称）。
-   `--iface=`{.literal} -
    绑定到特定网络接口的连接，而不是使用由网络层决定的默认接口。一旦使用，必须在整个
    Kickstart 文件的 `iscsi`{.literal} 命令的所有实例中指定它。
-   `--user=`{.literal} - 需要与目标进行验证的用户名
-   `--password=`{.literal} - 与为目标指定的用户名对应的密码
-   `--reverse-user=`{.literal} - 用于与来自使用反向 CHAP
    验证对象的初始程序一同进行验证的用户名
-   `--reverse-password=`{.literal} - 与为发起方指定的用户名对应的密码
:::
::: itemizedlist
**备注**
-   如果使用 `iscsi`{.literal} 命令，还必须使用 `iscsiname`{.literal}
    命令为 iSCSI 节点分配一个名称。`iscsiname`{.literal} 命令必须在
    Kickstart 文件中的 `iscsi`{.literal} 命令前出现。
-   在可能的情况下，在系统 BIOS 或者固件中配置 iSCSI 存储，而不是使用该
    `iscsi`{.literal} 命令。Anaconda 自动检测并使用在 BIOS
    或固件中配置的磁盘，且在 Kickstart 文件中不需要特殊配置。
-   如果您必须使用 `iscsi`{.literal}
    命令，确定在开始安装时激活了网络连接，且在您使用
    `clearpart`{.literal} 或 `ignoredisk`{.literal} 等类似命令指代 iSCSI
    磁盘[*前*]{.emphasis}，`iscsi`{.literal} 命令出现在 Kickstart 文件中
    。
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#iscsiname_kickstart-commands-for-handling-storage}iscsiname {.title}
:::
`iscsiname`{.literal} Kickstart 命令是可选的。它为 `iscsi`{.literal}
命令指定的 iSCSI 节点分配一个名称。
::: title
**语法**
:::
``` screen
iscsiname iqname
```
::: itemizedlist
**选项**
-   `iqname`{.literal} - 分配给 iSCSI 节点的名称。
:::
::: itemizedlist
**备注**
-   如果您在 Kickstart 文件中使用 `iscsi`{.literal} 命令，则必须之前在
    Kickstart 文件[*前面的部分*]{.emphasis}指定了`iscsiname`{.literal}。
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#logvol_kickstart-commands-for-handling-storage}logvol {.title}
:::
`logvol`{.literal} Kickstart
命令是可选的。它为逻辑卷管理（LVM）创建一个逻辑卷。
::: title
**语法**
:::
``` screen
logvol mntpoint --vgname=name --name=name [OPTIONS]
```
::: itemizedlist
**必填选项**
-   `mntpoint`{.literal} - 挂载分区的挂载点。必须是以下格式之一：
    ::: informalexample
    ::: itemizedlist
    -   `/path`{.literal}
        例如 `/`{.literal} 或 `/home`{.literal}
    -   `swap`{.literal}
        该分区被用作交换空间。
        要自动决定 swap 分区的大小，使用 `--recommended`{.literal}：
        ``` screen
        swap --recommended
        ```
        要自动决定交换分区的大小，并允许系统的额外空间可以休眠，使用
        `--hibernation`{.literal} 选项：
        ``` screen
        swap --hibernation
        ```
        分配的分区大小为由 `--recommended`{.literal}
        分配的交换分区再加上所在系统上的内存总量。
        有关这些命令分配的 swap 大小，请参阅 AMD64、Intel 64 和 64 位
        ARM 系统的
        ["推荐的分区方案"一节](#partitioning-reference_installing-rhel-as-an-experienced-user.html#recommended-partitioning-scheme_partitioning-reference "推荐的分区方案"){.xref}。
    :::
    :::
-   `--vgname=name`{.literal} - 卷组名称。
-   `--name=name`{.literal} - 逻辑卷的名称。
:::
::: itemizedlist
**可选选项**
-   `--noformat`{.literal} - 使用现有逻辑卷且不要对其进行格式化。
-   `--useexisting`{.literal} - 使用现有逻辑卷并重新格式化它。
-   `--fstype=`{.literal} - 为逻辑卷设置文件系统类型。有效值包括
    `xfs`{.literal}、`ext2`{.literal}、`ext3`{.literal}、`ext4`{.literal}、`swap`{.literal}
    和 `vfat`{.literal}。
-   `--fsoptions=`{.literal} -
    指定在挂载文件系统时所用选项的自由格式字符串。这个字符串将被复制到安装的系统的
    `/etc/fstab`{.literal} 文件中，并使用引号括起来。
-   `--mkfsoptions=`{.literal} -
    指定要传递给在这个分区上创建文件系统的程序的其他参数。没有对参数列表进行任何操作，因此必须以可直接传递给
    mkfs
    程序的格式提供。这意味着，根据具体文件系统，多个选项应该用逗号分开，或使用双引号分开。
-   `--fsprofile=`{.literal} -
    指定传递给在这个分区上创建文件系统的程序的使用类型。使用类型定义了创建文件系统时使用的各种微调参数。要使用这个选项，文件系统必须支持使用类型，且必须有一个配置文件来列出有效类型。对于
    `ext2`{.literal}、`ext3`{.literal} 和
    `ext4`{.literal}，这个配置文件是 `/etc/mke2fs.conf`{.literal}.
-   `--label=`{.literal} - 为逻辑卷设置标签。
-   `--grow`{.literal} -
    扩展逻辑卷以占据可用空间（若有）,或使用指定的最大值（若有）。只有在磁盘镜像中预分配了最小存储空间时，必须使用该选项，并希望该卷扩展并占据所有可用空间。在物理环境中，这是一次性的操作。但是在虚拟环境中，当虚拟机将任何数据写入虚拟磁盘时，卷大小会增加。
-   `--size=`{.literal} - MiB 中的逻辑卷的大小。这个选项不能与
    `--percent=`{.literal} 选项一同使用。
-   `--percent=`{.literal} -
    考虑任何静态大小逻辑卷时的逻辑卷大小，作为卷组中剩余空间的百分比。这个选项不能与
    `--size=`{.literal} 选项一同使用。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    当创建新逻辑卷时，必须使用 `--size=`{.literal}
    选项静态指定其大小，或使用 `--percent=`{.literal}
    选项指定剩余空间的比例。您不能在同一逻辑卷中同时使用这些选项。
    :::
-   `--maxsize=`{.literal} - 当将逻辑卷设置为可扩充时 MiB
    的最大值。在这里指定一个整数值，如 `500`{.literal}
    （不要在数字后面加单位）。
-   `--recommended`{.literal} -
    创建逻辑卷时使用这个选项，根据您的系统硬件自动决定这个卷的大小。有关推荐方案的详情，请参阅
    AMD64、Intel 64 和 64 位 ARM 系统的
    ["推荐的分区方案"一节](#partitioning-reference_installing-rhel-as-an-experienced-user.html#recommended-partitioning-scheme_partitioning-reference "推荐的分区方案"){.xref}。
-   `--resize`{.literal} -
    重新调整逻辑卷大小。如果使用这个选项，必须同时指定
    `--useexisting`{.literal} 和 `--size`{.literal}。
-   `--encrypted`{.literal} - 指定该逻辑卷应该用 LUKS 加密，使用
    `--passphrase=`{.literal}
    选项中提供的密码短语。如果您没有指定密码短语，安装程序将使用
    `autopart --passphrase`{.literal}
    命令设定的默认系统级密码，或者在未设定默认密码时暂停安装并提示您输入密码短语。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在加密一个或多个分区时， Anaconda 会尝试收集 256
    字节熵，以保证安全加密分区。收集熵可能需要一些时间 -
    无论是否有收集到足够的熵，该过程将在最多 10 分钟后停止。
    与安装系统互动（通过键盘输入或移动鼠标）可加速此进程。如果要在虚拟机中安装，也可以在
    `virtio-rng`{.literal} 客户端中添加设备（虚拟随机数生成器）。
    :::
-   `--passphrase=`{.literal} -
    指定在加密这个逻辑卷时要使用的密码短语。这个选项必须与
    `--encrypted`{.literal} 选项一同使用，单独使用无效。
-   `--cipher=`{.literal} - 如果无法满足 Anaconda 的默认
    `aes-xts-plain64`{.literal} 设置，则需要指定加密类型。这个选项必须与
    `--encrypted`{.literal}
    选项一同使用，单独使用无效。[安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/security_hardening/){.link}文档中列出了可用加密类型，但红帽强烈推荐您使用
    `aes-xts-plain64`{.literal} 或 `aes-cbc-essiv:sha256`{.literal}。
-   `--escrowcert=URL_of_X.509_certificate`{.literal} -
    将所有加密卷的数据加密密钥保存为文件 `/root`{.literal}，使用来自
    [*URL_of_X.509_certificate*]{.emphasis} 指定的 URL 的 X.509
    证书进行加密。每个加密卷的密钥都作为单独的文件保存。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
-   `--luks-version=LUKS_VERSION`{.literal} - 指定应该用来加密文件系统的
    LUKS 格式版本。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--backuppassphrase`{.literal} -
    为每个加密卷添加随机生成的密码短语。将这些密码短语以独立文件形式保存到
    `/root`{.literal}，使用由 `--escrowcert`{.literal} 指定的 X.509
    证书加密。只有在指定了 `--escrowcert`{.literal} 时这个选项才有意义。
-   `--pbkdf=PBKDF`{.literal} - 为 LUKS keylot 设置
    PBKDF（Password-Based Key Derivation Function）算法。另请参阅 man
    page [*cryptsetup(8)*]{.emphasis}。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
-   `--pbkdf-memory=PBKDF_MEMORY`{.literal} - 为 PBKDF
    设置内存成本。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis}。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--pbkdf-time=PBKDF_TIME`{.literal} - 设置 PBKDF
    密码处理所消耗的毫秒数。详情请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的 `--iter-time`{.literal}
    部分。这个选项只在指定了 `--encrypted`{.literal} 时才有意义，并且与
    `--pbkdf-iterations`{.literal} 相互排斥。
-   `--pbkdf-iterations=PBKDF_ITERATIONS`{.literal} -
    设定直接迭代的次数，并避免 PBKDF 基准数据。详情请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的
    `--pbkdf-force-iterations`{.literal} 部分。这个选项只在指定了
    `--encrypted`{.literal} 时才有意义，并且与 `--pbkdf-time`{.literal}
    相互排斥。
-   `--thinpool`{.literal} - 创建精简池逻辑卷。（使用挂载点
    `none`{.literal}）
-   `--metadatasize=size`{.literal} -
    为新的精简池设备指定元数据大小（单位 MiB）。
-   `--chunksize=size`{.literal} - 为新的精简池设备指定块大小（单位
    KiB）。
-   `--thin`{.literal} - 创建精简逻辑卷。（要求使用
    `--poolname`{.literal}）
-   `--poolname=name`{.literal} -
    指定在其中创建精简逻辑卷的精简池名称。需要 `--thin`{.literal} 选项。
-   `--profile=name`{.literal} -
    指定与精简逻辑卷搭配使用的配置配置集的名称。如果使用，该名称也会包含在给定逻辑卷的元数据中。默认情况下，可用的配置集是
    `default`{.literal} 和 `thin-performance`{.literal}，且在
    `/etc/lvm/profile/`{.literal} 目录中定义。详情请查看
    `lvm(8)`{.literal} man page。
-   `--cachepvs=`{.literal} -
    用逗号分开的物理卷列表，它应用作这个卷的缓存。
-   `--cachemode=`{.literal} - 指定应该使用哪种模式缓存这个逻辑卷 -
    `writeback`{.literal} 或 `writethrough`{.literal}。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    有关缓存的逻辑卷及其模式的详情，请参考 `lvmcache(7)`{.literal} man
    page。
    :::
-   `--cachesize=`{.literal} - 附加到逻辑卷的缓存大小，以 MiB
    为单位。这个选项需要 `--cachepvs=`{.literal} 选项。
:::
::: itemizedlist
**备注**
-   在使用 Kickstart 安装 Red Hat Enterprise Linux
    时，不要在逻辑卷和卷组名称中使用小横线(`-`{.literal})。如果使用这个字符，安装会完成，但
    `/dev/mapper/`{.literal}
    目录会列出这些卷和卷组的每个横线都会加倍。例如：名为
    `volgrp-01`{.literal} 的卷组包含一个逻辑卷
    `logvol-01`{.literal}，它将被列为
    `/dev/mapper/volgrp—​01-logvol—​01`{.literal}。
    这个限制只适用于新创建的逻辑卷和卷组名称。如果您使用
    `--noformat`{.literal} 重新使用现有名称，则它们的名称不会被更改。
-   如果您丢失了 LUKS
    密码短语，那么就完全无法访问所有加密的分区及其数据。丢失的密码短语是无法找回的。但是，您可以使用
    `--escrowcert`{.literal} 选项保存加密密码短语，并使用
    `--backuppassphrase`{.literal} 生成加密密码短语备份。
:::
::: itemizedlist
**示例**
-   首先创建分区，然后创建逻辑卷组，然后创建逻辑卷：
    ``` screen
    part pv.01 --size 3000
    volgroup myvg pv.01
    logvol / --vgname=myvg --size=2000 --name=rootvol
    ```
-   首先创建分区，然后创建逻辑卷组，再创建逻辑卷以占据卷组中剩余的 90%
    空间：
    ``` screen
    part pv.01 --size 1 --grow
    volgroup myvg pv.01
    logvol / --vgname=myvg --name=rootvol --percent=90
    ```
:::