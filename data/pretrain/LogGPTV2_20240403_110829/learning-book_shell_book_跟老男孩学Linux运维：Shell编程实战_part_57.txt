/directory/script.sh
<==对脚本赋予执行权限，直接执行脚本。
/bin/sh /directory/script.sh
<在不赋子执行权限时，利用执行解释器执行脚本。
21.3.2exec模式调用脚本
exec模式与fork模式调用脚本的方式不同，不需要新开一个Subshell来执行被调
---
## Page 405
第20章子Shell及Shel嵌套模式知识应用387
用的脚本。被调用的脚本与父脚本在同一个Shell内执行，但是使用exec调用一个新脚
本以后，父脚本中exec执行之后的脚本内容就不会再执行了，这就是exec和source的
区别。
执行方式说明：
exec /directory/script.sh
21.3.3source模式调用脚本
source模式与fork模式的区别是不会新开一个Subshell来执行被调用的脚本，而是
在同一个Shell中执行，所以在被调用的脚本中声明的变量和环境变量都可以在主（父）
脚本中获取和使用，此部分知识在本书的第2章中已有讲解。
source模式与exec模式相比，最大的不同之处是使用source调用一个薪脚本以后，
父脚本中source命令行之后的内容在子脚本执行完毕后依然会被执行。
执行方式说明：
source/directory/script.sh<=使用source不容易被误解，而“.”和”./”相近.
容易被误解。
/directory/script.sh
<“.”和source命令的功能是等价的。
20.4Shell调用脚本的3种不同实践方法
20.4.1开发测试不同模式区别的Shell脚本
本节将通过下面的几个脚本来说明3种调用方式的不同。编写不同脚本的作用是一
个脚本作为父Shell脚本，即ParentShell.sh，另一个脚本为在父Shell脚本中执行的嵌入
Shell脚本（子 Shell 脚本），即 Subshell.sh。
通过在执行过程中选择嵌入Shell脚本的不同执行方式，可以看出fork、exec、
source三种调用执行脚本模式的区别。
1）编写对内容加颜色的函数，放在/etc/init.d/functions里。
为了让不同模式的对比更清晰，先写一个对内容加颜色的函数，并放在/etc/init.d/
functions 里，代码如下：
oqptoq
plu8_color() (
GREEN_COLOR=*\E[1;32m
YELLOW_COLOR=*\E[1:33m
---
## Page 406
388跟老男孩学Linux运维：Shel 编程实战
if[s#-ne 2]:then
echo*Usage $0 content (redlyellowlbluelgreen)*
exit
f:
redIRED)
echo
=0
*$(RED_COLOR)$1$(RES) *
ye11oW1YELLOK)
echo -e
* S(YELLON_COLOR)$1S (RES) *
greenIGREEN)
echo-e
*S(GREEN_COLOR)$IS(RES)*
blue |BLUE)
echo
-e
*S(BLUE_COLOR)SIS{RES)*
pink(PINK)
echo -e
*${PINK_COLOR)$1S (RES) *
*)
echo*Usage S0 content [redlyellowibluelgreen）
exit
e8ac
提示：此部分内容在第9章已经详细讲解过，此处不再整述。
2）编写特殊的ParentShell.sh脚本，作为执行程序的父（主）脚本，为了让读者看
得更清楚，本脚本应用了上文的plus_color函数库，使得输出结果更清晰：
[rootfoldboy scripts]+ cat ParentShell.sh
+1/bin/bash
#B1og:http://o1dboy.b1og.51cto.com
Author:oldboy training
./ete/init.d/functions
function usage()(
<==定义助函数
echo *Usage:S0 (execlsourcelfork)*
exit 1
function ParentFun()(
<定义父脚本主要信息的输出
plus_color*ParentShell start..red
<打印父脚本开始提示。
export ParentVar=*Parent*
<==在父脚本中定义环境变量。
<打印父脚本PID。
echo *Parent Shell.sh:\SParentVar is
<==输出父脚本环境变量信惠。
plus_color
"sParentVar'
'green
---
## Page 407
case *$1*in
#<==利用S1接收不网的模式。
exec)
#<==如果匹配exec.
.x
exec ./SubShell.sh 11
<==则通过exec调用子She11脚本。
source)
<=如采匹配source，
echo *using sourc...
source ./SubShell.ah :
<=则通过source满用子She11本
fork)
#<==如果区配fork,
echo *using source..*
/bin/sh ./SubShel1.sh::
#<==则通过sbh（fork模式）调用子She11脚本
*)
#<==如果匹配其他，
usage
<==则给出正确使用方法。
esac
<=打印父脚本PID。
...
<==打印子脚本变量信息。
plus_color*ParentShellstop.*red
<==父脚本结末提示。
function main（)( <==主函数
if[s#-ne 1 ]:then
usage
fi
ParentFunS*<==S*接收函数外传参（调用脚本模式字特串），传给函数内的S1。
main S*
#<=mS·接受脚本传参，转到函数里的S*或S1，注意处的S·不要用引号。
说明：
口把ParentShell.sh脚本看作父Shell脚本，并在父Shell脚本中以不同的模式
调用SubShell.sh脚本。
口对比父脚本及子脚本执行后的PID输出，看三种方式的调用默认嵌套脚本后父
子脚本PID的区别。
口观察不同模式下ParentShell.sh脚本和SubShell.sh脚本之间的变量引l用情况。
3）编写脚本SubShell.sh，这代表子Shell脚本，具体如下：
[root@oldboy scripts]cat SubShell.sh
Author:oldboy training
+1/bin/bash
s1og:http://o1dboy.b1og.51eto.com
./etc/init.d/functions
#<==加载函数库，主要是下文使用的plus_color函数。
echo*PID for SubShell.sh：plus_color*ss**blue*<==打印子 shel1 的pID 信惠
<==打印父She11变量。
---
## Page 408
390跟老男孩学 Linux 运维；Shell 编程实战
<==定义子She11变量。
echo *SubShel1.sh:\ssUB_VAR=plus_color *SSUB_VAR* *blue***
<==输出子She11变量。
plus_color*SubShel1stop.*yellow<==打印子Shel1结束信惠。
说明：
口在嵌套脚本SubShell.sh中，输出脚本执行的PID信息，并通过输出变量确认
能否调用父脚本中的变量信息。
口确认嵌套脚本SubShell.sh中的环境变量信息是否会被父脚本引l用。
20.4.2对比fork模式与source模式的区别
执行20.4.1节中的测试脚本，并分别传人fork及source参数后，得出下面fork模
式与source模式的对比信息，如图20-3所示。
ellslart
top.
图20-3测试脚本传fork及source参数后输出信息的对比
根据图20-3左边的信息，对于fork模式执行的输出结果，可以得出以下结论：
口父脚本执行后的PID信息（本例中为19052）与嵌套脚本（子Shell脚本）执行后
的PID信息（本例中为19059）不同，说明fork模式调用脚本确实产生了子Shell。
口父脚本的变量信息会被嵌入的脚本（子Shell）引用，“SubShell.sh getSParentVar=
Parent”中等号右边的Parent即为调用父脚本变量后输出的结果。
Get:SSUB_VAR=”中等号右边内容为空，表示没有引用到父脚本的变量。
根据图20-3右边的信息，对于source模式执行的输出结果，可以得出以下结论：
口父脚本执行后的PID信息（本例中为19069）与嵌套脚本（子Shell脚本）执行
后的PID信息（本例中为19069）一致，说明source模式调用脚本不会产生子
Shell，而是在同一个Shell里执行，此项与fork模式不同。
口父脚本的变量信息会被嵌入的脚本（子Shell）引用。“SubShell.sh get SParentVar=
Parent”中等号右边的Parent即为调用父脚本变量后输出的结果，此项与fork模
式相同。
---
## Page 409
口在嵌入的脚本（子Shell）中定义的变量信息可以被父脚本引用，“ParentShell.sh：
Get:SSUB_VAR=Sub”中等号右边内容为Sub，表示引用到了子Shell脚本中的
变量，此项与fork模式不同。
20.4.3对比exec模式与source模式的区别
同样，执行20.4.1节中的测试脚本并分别传人exec及source参数后，得出下面
exec模式与source模式的对比信息，如图20-4所示。
ellstart
sing
utele!
ID farP
图20-4测试脚本传exec及source参数后的输出信息对比
根据图20-4左边的信息，对于exec模式执行的输出结果，可以得出以下结论：
口父脚本执行后的PID信息（本例中为19235）与嵌套脚本（子Shell脚本）执行后
的PID信息（本例中为19235）一致，说明exec模式调用脚本同样不会产生子
Shell，而是在同一个Shell里执行，此项与source模式相同。
口父脚本的变量信息会被嵌人的脚本（子Shell）引用，“SubShell.sh get SParentVar=
Parent”中等号右边的Parent即为调用父脚本变量后输出的结果，此项与fork及
source模式都相同。
口利用exec模式执行嵌入脚本（子Shell脚本）的问题是，在执行完嵌入脚本后，
紧接着嵌入脚本后的所有父脚本命令将不再执行，面是直接退出父脚本，此项与
fork及source模式都不同。
20.5Shell调用脚本3种不同模式的应用场景
1.fork模式调用脚本的应用场景
fork模式调用脚本主要应用于常规嵌套脚本执行的场合，嵌套的脚本只是执行相应
的命令操作，不会生成相应的进程信息，父脚本不需要引用嵌套的脚本内的变量及函数
等信息，其次在嵌套脚本中定义的变量及函数等不会影响到父脚本中相同的信息定义。
2.exec模式调用脚本的应用场景
exec模式调用脚本需要应用于嵌套脚本在主脚本的末尾执行的场合，因此，此种模
式的应用并不多见，并且可以被source模式完全取代。
---
## Page 410
382跟老男孩学Linux运维：Shell编程实战
3.source模式调用脚本的应用场景
source模式调用脚本是比较重要且最常用的一种嵌套方式，主要应用之一是执行嵌
套脚本启动某些服务程序。例如：在利用嵌套脚本启动tomcat程序并生成PID程序文件
时，如果选择fork模式，那么生成的PID文件信息就和执行“ps-ef”命令输出的PID
信息不一致，这将会导致执行kill~cat tomcat_pid命令时，不能正确关闭tomcat程序，
而选择source模式可以解决此问题。
source模式调用脚本的另外一个应用就是使得嵌套脚本中的变量及函数等信息被父
脚本使用，从而实现更多的业务处理。
---
## Page 411
Linux
附录
Linux重要命令汇总
线上查询及帮助命令（2个）
命
令
功能说明
man
查看命令帮助。命令的词典，更复杂的还有info，但不常用
help
查看Linux内置命令的部助，比如cd命令
文件和目录操作命令（18个）
令
功能说明
1s
全拼list，功能是列出日录的内容及其内容属性信息
cd
全拼changedirectry，功能是从当前工作目录切换到指定的工作目录
CP
全拼copy，其功能为复制文件或目录
find
查找的意思，用于查找目录及目录下的文件
mkdir
全拼make directories，其功能是创建目录
全拼move，其功能是移动或重命名文件
pwd
全拼print working directory，其功能是显示当前工作目录的绝对路径
rename
用于重命名文件
rm
全拼remove，其功能是删除一个或多个文件或目录
rmdir
touch
创建新的空文件，改变已有文件的时间截属性
tree
其功能是以树形结构显示目录下的内容
显示文件名或目录名
dim
显示文件或日录路径
---
## Page 412
394跟老男孩学 Linux运维：Shell 编程实战
（续）
功能说明
chattr
改变文件的扩展属性
Isattr
查看文件扩展属性
file
显示文件的类型
md5sum
计算和校验文件的MD5值
查看文件及内容处理命令（21个）
命
令
功能说明
cat
全拼concatemate，其功能是用于连接多个文件并且打印输出或重定向到指定文
件中
tac
tac是cat的反向拼写，因此该命令的功能为反向显示文件内容
more
分页显示文件内容
less
分页显示文件内容，more命令的相反用法
head
显示文件内容的头部
tail
显示文件内容的尾部
将文件的每一行按指定分隔符分割并输出
split
分制文件为不同的小片段
paste
按行合并文件内容
sort
对文件的文本内容进行排序
uniq
去除重复行
wc
统计文件的行数、单词数或字节数
iconv
转换文件的编码格式
dos2unix
将DOS格式文件转换成UNIX格式