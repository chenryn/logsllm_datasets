Z. Liu et al.
(a) Original sketch.
Figure 7: (a) Before using NitroSketch, each packet goes through multiple hash computations (e.g., O(log δ−1)), update multiple
counters, and query and update to a top-k flow key storage (e.g., heap). (b) After applying NitroSketch, only a small portion of
packets (say 5% by geometric sampling) need to go through one hash computation, update to one row of counters (instead of all rows)
and occasionally to a top-k structure. Therefore, the CPU cost is significantly reduced.
(b) Sketch with NitroSketch
In practice, the choice of mode depends on the use cases. The
AlwaysLineRate mode usually reduces the convergence time to  T then
y=1 C2
Switch to using AlwaysLineRate
▷ Geometric variable
▷ Skip packets if needed
▷ The row to update
With the two stages above, we design two adaptive modes in the
following for various user requirements. The AlwaysLineRate mode
offers quick convergence time and a fixed amount of bottleneck
operations per packet batch. Alternatively, the AlwaysCorrect mode
does not require convergence time but performs the same amount
of packet operations as vanilla sketches in the beginning of the
measurement.
AlwaysLineRate mode. In this mode, NitroSketch adapts to the
packet arrival rate. We increase the sampling probability p when the
arrival rate is low, and we lower p when the arrival rate is high to
avoid packet drops.
This mode considers choosing the sampling probability p ∈
(cid:8)1, 2−1, 2−2, . . . , 2−7(cid:9) and updating the counters by p−1 in the sketch.
In Algorithm 1, we monitor the number of processed packets within
fixed time epochs (e.g., 100ms) by measuring the received packet
timestamps (Line 8). In Line 8, we adjust the sampling probability
Packet batchStep 1: Hash each pktmultiple times.Step 2: Update multiple countersTopKeysStep 3: Query & update totop keys+1+1+1+1Pkt+1Geometric SamplesStep 1: Pick a pktto updatee.g., select array 2.Step 2: Hash with the flow keyStep 3: Update one counterStep 4: Query and update totop keys with probability 𝑝TopKeys+1PktNitroSketch: Robust and General Sketch-based Monitoring
SIGCOMM ’19, August 19–23, 2019, Beijing, China
p to keep the number of operations (roughly) fixed for each epoch.
We do so by setting p to be inversely proportional to the packet rate.
Finally, this mode is allocated with the space required for sampling
with probability pmin = 2−7. This choice assures the theoretical guar-
antees of Theorem 2 hold and provides better accuracy in practice
compared to sampling at a fixed rate of pmin.
SketchVisor and ElsaticSketch [43, 73] also have mechanisms that
adapt the running speed to the line rate. However, their approach uses
a binary fast/slow path approach. In addition, SketchVisor requires a
merge operation by the control plane (e.g., SDN controller) which
is computationally intensive, and ElasticSketch loses its accuracy
guarantee once the light part is used. In comparison, our approach
offers a spectrum of eight different processing speeds and performs
a roughly fixed amount of work in each packet batch. It retains the
accuracy guarantees without controller merging.
AlwaysCorrect mode. This mode provides accuracy guarantees
starting with the first packet, but only provides a speedup once
enough packets are processed (converged). Taking a Count Sketch
as an example, NitroSketch periodically estimates the L2 norm to de-
termine when it can justify sampling. That way, sampling starts once
the measurement is large enough to converge. The pseudocode of
this mode is given in Algorithm 1. Observe that we now update rows
with different probabilities (initially as 1 and then the varying p),
and we update the counters with the inverse sampling probabilities
(initially 1 and then p−1).
√
p)-
2 with probability 3/4,
multiplicative estimator for the stream’s L2
and the rows’ median with a probability of 1 − δ. We perform this
computation once per Q (e.g., Q = 1000) packets which reduces the
overheads and ensures that sampling starts at most Q packets late.
We use the union bound to get an overall error probability of 2δ –
with probability ≤ δ we start sampling too early and with probability
≤ δ the sketch’s error exceeds ϵL2.
Scope of NitroSketch. Similar as existing sketch solutions [43, 55,
73], NitroSketch relies on the control plane to query the measurement
results. The data plane component of NitroSketch is responsible
for updating the sketch data structure but not obtaining the traffic
statistics from the sketch. Thus, any applications (e.g., connectivity
checking [53] and fast rerouting [40]) that require computation
entirely in the data plane are not targeted use cases of NitroSketch.
For instance, fast data plane processing is needed to measure and
react to short-lived traffic surges (microbursts). In handling such
microbursts, a programmable hardware switch can be a vantage
point, as suggested in [18, 19].
Formally, the sum of squared counters in each row i is a (1 +ϵ
5 ANALYSIS
We now show the theoretical guarantees of NitroSketch. To analyze
the worst-case guarantee, we assume that all packets are sampled
with probability pmin and denote p ≡ pmin. We consider two vari-
ants; first, combining the Count-Min Sketch with Nitro for achieving
an ϵL1 guarantee, and second using NitroSketch for an ϵL2 approx-
x is the k-th norm of the
frequency vector f (i.e., fx is the size of flow x) and U is the set of
all possible flows (e.g., all 232 possible source IPs). Specifically, L1
is simply the number of packets in the measurement.
(cid:114) 
imation. Here, Lk ≜ k(cid:112)Fk = k
x ∈U f k
340
Supported sketches. Intuitively, NitroSketch improves the process-
ing performance of sketches that normally calculate multiple hash
values, and update multiple counter arrays. This criterion includes
but not limited to Count-Min Sketch [27], Count Sketch [17], Univ-
Mon [55], and K-ary [51]. Moreover, NitroSketch can further accel-
erate the slower light part (Count-Min Sketch) of ElasticSketch [73].
Formally, we show that NitroSketch provides ϵL1 and ϵL2 accuracy
guarantees which is compatible with most sketches.
ϵL1 and ϵL2 Guarantees. The ϵL1 guarantee follows from the anal-
ysis in [8]. We show the ϵL2 guarantee in the following theorems.
THEOREM 1. Let d ≜ log2 δ−1 and w ≜ 4ϵ−1. For streams in
for a sufficiently large constant c,
which L1 ≥ c ·(cid:16)
(cid:104)|(cid:98)fx − fx | ≥ ϵL1
and(cid:98)fx is the return value of Query(x) in Algorithm 1.
ϵ−2p−1(cid:112)log δ−1(cid:17)
(cid:105) ≤ δ where fx is the real frequency of flow x,
NitroSketch + Count-Min Sketch satisfies:
Pr
Next, we state Theorem 2 and Theorem 5 that establish the cor-
rectness of both modes of NitroSketch.
(cid:12)(cid:12)(cid:12) > ϵL2
(cid:104)(cid:12)(cid:12)(cid:12)fx −(cid:98)fx
THEOREM 2. Let w = 8ϵ−2p−1, d = O(log δ−1). AlwaysLineRate
NitroSketch requires O(ϵ−2p−1 log δ−1) space, operates in amortized
O(1 +dp) time (constant for p = O(1/d)), and provides the following
guarantee: Pr
8ϵ−2p−1.
(cid:105) ≤ δ for streams in which L2 ≥
fi,x ≜ |(cid:8)j | (xj ∈ Si) ∧ (xj = x)(cid:9) | the frequency of x within Si .
we updated row i. Let L2 ≜(cid:114) 
frequency vector of S and similarly L2,i ≜(cid:114) 
PROOF. We consider the sequence of packets that was sampled
for each of the rows. That is, let Si ⊆ S be the subset of pack-
ets that updated row i (for i ∈ {1, . . . d}). Further, we denote by
That is, fi,x the number of times a packet arrived from flow x and
x denote the second norm of the
i,x denote that
of Si . Clearly, we have L2,i ≤ L2 for any row i ∈ {1, . . . , d}. Recall
that we assume that the sampling probability is fixed at p = pmin; if
the actual probability for some packets is higher it only decreases
the counter variances and therefore the error.
x ∈U f 2
(cid:104)
We proceed with a simple lemma that bounds E
as a func-
2. Observe that fi,x ∼ Bin(fx , p) and thus Var[fi,x] =
x ∈U f 2
L2
2,i
(cid:105)
2,i
i,x
2.
L2
2,i
PROOF.
LEMMA 3. E
E(cid:2)L2
tion of L2
fxp(1 − p) and E[fi,x] = fxp.
(cid:3) = 
(cid:104)
E(cid:2)f 2
= 
(cid:105) ≤ 2pL2
(cid:3) = 
fx p(1 − p) + (fx p)2 ≤ 
(cid:16)
LEMMA 4. Var(cid:2)Ci,hi(x)дi(x) − p−1 fi,x
PROOF. We have Ci,hi(x) = p−1
Next, we bound the variance of
x∈U
x∈U
x∈U
noise that other flows add to x’s counter on the i’th row.
2/w.
Var[fi,x] + (E[fi,x])2
2 . □
(cid:17)
– the
2pf 2
x = 2pL2
Ci,hi(x)дi(x) − p−1 fi,x
x∈U
(cid:3) ≤ 2p−1L2
x′∈U|hi(x)=hi(x′) fi,x′дi(x′).
SIGCOMM ’19, August 19–23, 2019, Beijing, China