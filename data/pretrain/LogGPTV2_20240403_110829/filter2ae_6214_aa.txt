**原文来自安全客，作者：Ivan1ee@360云影实验室  
原文链接： **
相关阅读：
  * [《.NET 高级代码审计（第一课）XmlSerializer 反序列化漏洞》](https://paper.seebug.org/837/ "《.NET 高级代码审计（第一课）XmlSerializer 反序列化漏洞》")
  * [《.NET 高级代码审计（第二课） Json.Net 反序列化漏洞》](https://paper.seebug.org/843/ "《.NET 高级代码审计（第二课） Json.Net 反序列化漏洞》")
  * [《.NET高级代码审计（第三课）Fastjson反序列化漏洞》](https://paper.seebug.org/849/ "《.NET高级代码审计（第三课）Fastjson反序列化漏洞》")
  * [《.NET高级代码审计（第四课） JavaScriptSerializer 反序列化漏洞》](https://paper.seebug.org/865/ "《.NET高级代码审计（第四课） JavaScriptSerializer 反序列化漏洞》")
  * [《.NET高级代码审计（第五课） .NET Remoting反序列化漏洞》](https://paper.seebug.org/881/ "《.NET高级代码审计（第五课） .NET Remoting反序列化漏洞》")
## 0X00 前言
DataContractSerializer类用于序列化和反序列化 **Windows Communication Foundation (WCF)**
消息中发送的数据，用于把CLR数据类型序列化成XML流，它位于命名空间System.Runtime.Serialization，继承于System.Runtime.Serialization.XmlObjectSerializer，在某些场景下开发者使用DataContractSerializer.ReadObject读取了恶意的XML数据就会造成反序列化漏洞，从而实现远程RCE攻击，本文笔者从原理和代码审计的视角做了相关介绍和复现。
## 0X01 DataContractSerializer序列化
类名使用DataContractAttribute 标记，类成员使用DataMemberAttribute
标记，可指定要序列化的属性和字段，下面先来看这个系列课程中经典的一段代码
TestClass对象定义了三个成员，并实现了一个静态方法ClassMethod启动进程。 序列化通过创建对象实例分别给成员赋值
使用DataContractSerializer.WriteObject非常方便的实现.NET对象与XML数据之间的转化，笔者定义TestClass对象，常规下使用WriteObject得到序列化后的XML数据
    18360Ivan1ee
## 0x02 DataContractSerializer反序列化
### 2.1、反序列化原理和用法
反序列过程是将XML流或者数据转换为对象，在DataContractSerializer类中创建对象然后调用ReadObject方法实现的
首先看DataContractSerializer类的定义，创建实例的时候会带入类型解析器
然后在初始化方法 Initialize里将Type类型解析器赋值给成员rootType
反序列化过程中使用ReadObject方法调用了ReadObjectHandleExceptions方法，省略一些非核心代码，进入InternalReadObject方法体内
ReadDataContractValue方法体内返回用ReadXmlValue处理后的数据，
从下图可以看出这是一个C#里的虚方法，在用System.Runtime.Serialization.DiagnosticUtility类处理数据的时候通过DataContract.GetClrTypeFullName得到CLR数据类型的全限定名。
下图Demo展示了序列化和反序列化前后的效果
反序列化后得到对象的属性，打印输出成员Name的值。
### 2.2、攻击向量—ObjectDataProvider
漏洞的触发点是在于初始化DataContractSerializer类实例时，参数类型解析器type是否可控，也就是说攻击者需要控制重构对象的类型，若可控的情况下并且反序列化了恶意的Xml数据就可以触发反序列化漏洞。笔者继续选择ObjectDataProvider类方便调用任意被引用类中的方法，具体有关此类的用法可以看一下《
**.NET高级代码审计（第一课） XmlSerializer反序列化漏洞**
》，因为Process.Start之前需要配置ProcessStartInfo类相关的属性，例如指定文件名、指定启动参数，所以首先考虑序列化ProcessStartInfo再来序列化Process类调用StartInfo启动程序，然后需要对其做减法，去掉无关的System.RuntimeType、System.IntPtr窗口句柄数据，下面是国外研究者提供的反序列化Payload