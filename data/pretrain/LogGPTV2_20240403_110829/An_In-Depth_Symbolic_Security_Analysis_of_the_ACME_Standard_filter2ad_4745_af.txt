protocols between any number of clients and servers, and certificate
issuance for an arbitrary list of domains. In addition, it also covers
important low-level protocol details, such as unbounded data struc-
tures and precise state management. Hence, our comprehensive
model serves as a formal companion to the ACME RFC, and can be
a useful guide for ACME implementors.
Our approach builds upon the DY★ framework, which allows
us to modularly specify and verify symbolic security properties
for our ACME model using the F★ programming language and
type system. We extended DY★ to support authenticated channels
and key substitution attacks on signatures and use the resulting
model to establish security theorems for ACME. These generic
extensions are of independent interest and will also be of use in
future cryptographic protocol verification projects using DY★.
Furthermore, we propose a general approach to make models
written in DY★ interoperable with real-world implementation to
build further confidence that these models correctly reflect the
protocol specification. Using this approach, we turn our model of
ACME into an interoperable reference implementation and show
that our ACME client can run the protocol with several real-world
ACME servers, including the Let’s Encrypt production server. Our
interoperability approach relies on an unverified wrapper that con-
nects our verified model with system libraries for networking and
cryptography. As future work, we intend to generalize and verify
this wrapper and parts of the underlying libraries, so that we can
convert DY★ models into high-assurance protocol implementations.
ACKNOWLEDGMENTS
This work was partially supported by the Deutsche Forschungs-
gemeinschaft (DFG) through Grant KU 1434/10-2, the European
Research Council (ERC) through Grant CIRCUS-683032, and the
Office of Naval Research (ONR) through Grant N000141812618.
REFERENCES
[1] Josh Aas, Richard Barnes, Benton Case, Zakir Durumeric, Peter Eckersley, Alan
Flores-López, J. Alex Halderman, Jacob Hoffman-Andrews, James Kasten, Eric
Rescorla, Seth D. Schoen, and Brad Warren. 2019. Let’s Encrypt: An Automated
Certificate Authority to Encrypt the Entire Web. In Proceedings of the 2019 ACM
SIGSAC Conference on Computer and Communications Security, CCS 2019, London,
UK, November 11-15, 2019. ACM, New York, NY, USA, 2473–2487. https://doi.
org/10.1145/3319535.3363192
[2] Andrew Ayer. 2015. ACME signature misuse vulnerability in draft-barnes-acme-
04. https://mailarchive.ietf.org/arch/msg/acme/F71iz6qq1o_QPVhJCV4dqWf-
4Yc/
[3] Michael Backes, Catalin Hritcu, and Matteo Maffei. 2014. Union, intersection
and refinement types and reasoning about type disjointness for secure protocol
implementations. J. Comput. Secur. 22, 2 (2014), 301–353. https://doi.org/10.3233/
JCS-130493
[4] M. Barbosa, G. Barthe, K. Bhargavan, B. Blanchet, C. Cremers, K. Liao, and B.
Parno. 2021. SoK: Computer-Aided Cryptography. In 2021 2021 IEEE Symposium
on Security and Privacy (SP). IEEE Computer Society, NY, USA, 123–141. https:
//doi.org/10.1109/SP40001.2021.00008
[5] Richard Barnes, Jacob Hoffman-Andrews, Daniel McCarney, and James Kasten.
2019. Automatic Certificate Management Environment (ACME). RFC 8555.
https://doi.org/10.17487/RFC8555
[6] Gilles Barthe, Cédric Fournet, Benjamin Grégoire, Pierre-Yves Strub, Nikhil
Swamy, and Santiago Zanella Béguelin. 2014. Probabilistic relational verifica-
tion for cryptographic implementations. In The 41st Annual ACM SIGPLAN-
SIGACT Symposium on Principles of Programming Languages, POPL ’14, San
Diego, CA, USA, January 20-21, 2014. ACM, New York, NY, USA, 193–206.
https://doi.org/10.1145/2535838.2535847
[7] David A. Basin, Cas Cremers, Tiffany Hyun-Jin Kim, Adrian Perrig, Ralf Sasse,
and Pawel Szalachowski. 2018. Design, Analysis, and Implementation of ARPKI:
An Attack-Resilient Public-Key Infrastructure.
IEEE Trans. Dependable Secur.
Comput. 15, 3 (2018), 393–408. https://doi.org/10.1109/TDSC.2016.2601610
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2613TIT.1983.1056650
[8] Jesper Bengtson, Karthikeyan Bhargavan, Cédric Fournet, Andrew D. Gordon,
and Sergio Maffeis. 2011. Refinement types for secure implementations. ACM
Trans. Program. Lang. Syst. 33, 2 (2011), 8:1–8:45. https://doi.org/10.1145/1890028.
1890031
[9] Benjamin Beurdouche, Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric
Fournet, Markulf Kohlweiss, Alfredo Pironti, Pierre-Yves Strub, and Jean Karim
Zinzindohoue. 2015. A Messy State of the Union: Taming the Composite State
Machines of TLS. In 2015 IEEE Symposium on Security and Privacy, SP 2015,
San Jose, CA, USA, May 17-21, 2015. IEEE Computer Society, NY, USA, 535–552.
https://doi.org/10.1109/SP.2015.39
[10] Karthikeyan Bhargavan, Abhishek Bichhawat, Quoc Huy Do, Pedram Hosseyni,
Ralf Küsters, Guido Schmitz, and Tim Würtele. 2021. DY★ ACME Code Repository.
https://github.com/reprosec/acme-case-study
[11] Karthikeyan Bhargavan, Abhishek Bichhawat, Quoc Huy Do, Pedram Hosseyni,
Ralf Küsters, Guido Schmitz, and Tim Würtele. 2021. DY★: A Modular Symbolic
Verification Framework for Executable Cryptographic Protocol Code. In 2021
IEEE European Symposium on Security and Privacy (EuroS&P). IEEE Computer
Society, NY, USA, 523–542.
[12] Karthikeyan Bhargavan, Abhishek Bichhawat, Quoc Huy Do, Pedram Hosseyni,
Ralf Küsters, Guido Schmitz, and Tim Würtele. 2021. DY★ Code Repository.
https://github.com/reprosec/dolev-yao-star
[13] Karthikeyan Bhargavan, Abhishek Bichhawat, Quoc Huy Do, Pedram Hosseyni,
Ralf Küsters, Guido Schmitz, and Tim Würtele. 2021. A Tutorial-Style Introduction
to DY★. In Protocols, Logic, and Strands: Essays Dedicated to Joshua Guttman on
the Occasion of His 66.66 Birthday. Springer. To appear.
[14] Karthikeyan Bhargavan, Bruno Blanchet, and Nadim Kobeissi. 2017. Verified
Models and Reference Implementations for the TLS 1.3 Standard Candidate. In
2017 IEEE Symposium on Security and Privacy, SP 2017, San Jose, CA, USA, May
22-26, 2017. IEEE Computer Society, NY, USA, 483–502. https://doi.org/10.1109/
SP.2017.26
[15] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, and Nadim Kobeissi. 2017.
Formal Modeling and Verification for Domain Validation and ACME. In Financial
Cryptography and Data Security (Lecture Notes in Computer Science, Vol. 10322).
Springer, Berlin, 561–578. https://doi.org/10.1007/978-3-319-70972-7_32
[16] Karthikeyan Bhargavan, Cédric Fournet, and Andrew D. Gordon. 2010. Modular
verification of security protocol code by typing. In Proceedings of the 37th ACM
SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL
2010, Madrid, Spain, January 17-23, 2010. ACM, New York, NY, USA, 445–456.
https://doi.org/10.1145/1706299.1706350
[17] Karthikeyan Bhargavan, Cédric Fournet, Markulf Kohlweiss, Alfredo Pironti,
and Pierre-Yves Strub. 2013. Implementing TLS with Verified Cryptographic
Security. In 2013 IEEE Symposium on Security and Privacy, SP 2013, Berkeley,
CA, USA, May 19-22, 2013. IEEE Computer Society, NY, USA, 445–459. https:
//doi.org/10.1109/SP.2013.37
[18] Karthikeyan Bhargavan, Cédric Fournet, Markulf Kohlweiss, Alfredo Pironti,
Pierre-Yves Strub, and Santiago Zanella Béguelin. 2014. Proving the TLS Hand-
shake Secure (As It Is). In Advances in Cryptology - CRYPTO 2014 - 34th Annual
Cryptology Conference, Santa Barbara, CA, USA, August 17-21, 2014, Proceedings,
Part II (Lecture Notes in Computer Science, Vol. 8617). Springer, Berlin, 235–255.
https://doi.org/10.1007/978-3-662-44381-1_14
[19] Simon Blake-Wilson and Alfred Menezes. 1999. Unknown Key-Share Attacks
on the Station-to-Station (STS) Protocol. In Public Key Cryptography, Second
International Workshop on Practice and Theory in Public Key Cryptography, PKC ’99,
Kamakura, Japan, March 1-3, 1999, Proceedings (Lecture Notes in Computer Science,
Vol. 1560). Springer, Berlin, 154–170. https://doi.org/10.1007/3-540-49162-7_12
[20] Bruno Blanchet. 2016. Modeling and Verifying Security Protocols with the
Applied Pi Calculus and ProVerif. Found. Trends Priv. Secur. 1, 1-2 (2016), 1–135.
https://doi.org/10.1561/3300000004
[21] Buypass. 2020. Buypass Go SSL - Technical information. https://www.buypass.
com/ssl/resources/go-ssl-technical-specification
[22] Cas Cremers, Marko Horvat, Jonathan Hoyland, Sam Scott, and Thyla van der
Merwe. 2017. A Comprehensive Symbolic Analysis of TLS 1.3. In Proceedings
of the 2017 ACM SIGSAC Conference on Computer and Communications Security,
CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017. ACM, New York, NY,
USA, 1773–1788. https://doi.org/10.1145/3133956.3134063
[23] Daniel McCarney. 2017. Validating challenges from multiple network van-
tage points. https://community.letsencrypt.org/t/validating-challenges-from-
multiple-network-vantage-points/40955
[24] A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, J. Protzenko, A. Rastogi, N. Swamy,
S. Zanella-Beguelin, K. Bhargavan, J. Pan, and J. K. Zinzindohoue. 2017. Imple-
menting and Proving the TLS 1.3 Record Layer. In 2017 IEEE Symposium on
Security and Privacy, SP 2017, San Jose, CA, USA, May 22-26, 2017. IEEE Computer
Society, NY, USA, 463–482. https://doi.org/10.1109/SP.2017.58
[25] DigiCert. 2020. DigiCert - Certification Management. https://www.digicert.
com/certificate-management/
[26] Danny Dolev and Andrew Chi-Chih Yao. 1983. On the security of public key
protocols. IEEE Trans. Inf. Theory 29, 2 (1983), 198–207. https://doi.org/10.1109/
[27] Jean-Guillaume Dumas, Pascal Lafourcade, Francis Melemedjian, Jean-Baptiste
Orfila, and Pascal Thoniel. 2017. LocalPKI: An Interoperable and IoT Friendly PKI.
In E-Business and Telecommunications - 14th International Joint Conference, ICETE
2017, Madrid, Spain, July 24-26, 2017, Revised Selected Paper (Communications in
Computer and Information Science, Vol. 990). Springer, Berlin, 224–252. https:
//doi.org/10.1007/978-3-030-11039-0_11
[28] Daniel Fett, Pedram Hosseyni, and Ralf Küsters. 2019. An Extensive Formal
Security Analysis of the OpenID Financial-Grade API. In 2019 IEEE Symposium
on Security and Privacy, SP 2019, San Francisco, CA, USA, May 19-23, 2019. IEEE
Computer Society, NY, USA, 453–471. https://doi.org/10.1109/SP.2019.00067
[29] Daniel Fett, Ralf Küsters, and Guido Schmitz. 2014. An Expressive Model for the
Web Infrastructure: Definition and Application to the BrowserID SSO System. In
2014 IEEE Symposium on Security and Privacy, SP 2014, Berkeley, CA, USA, May
18-21, 2014. IEEE Computer Society, NY, USA, 673–688. https://doi.org/10.1109/
SP.2014.49
[30] Daniel Fett, Ralf Küsters, and Guido Schmitz. 2016. A Comprehensive Formal
Security Analysis of OAuth 2.0. In Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security, Vienna, Austria, October 24-28, 2016.
ACM, New York, NY, USA, 1204–1215. https://doi.org/10.1145/2976749.2978385
[31] Daniel Fett, Ralf Küsters, and Guido Schmitz. 2017. The Web SSO Standard
OpenID Connect: In-depth Formal Security Analysis and Security Guidelines. In
30th IEEE Computer Security Foundations Symposium, CSF 2017, Santa Barbara,
CA, USA, August 21-25, 2017. IEEE Computer Society, NY, USA, 189–202. https:
//doi.org/10.1109/CSF.2017.20
[32] Cédric Fournet, Markulf Kohlweiss, and Pierre-Yves Strub. 2011. Modular Code-
Based Cryptographic Verification. In Proceedings of the 18th ACM Conference on
Computer and Communications Security, CCS 2011, Chicago, Illinois, USA, October
17-21, 2011. ACM, New York, NY, USA, 341–350. https://doi.org/10.1145/2046707.
2046746
https://www.
[33] GlobalSign. 2021. GlobalSign - Auto Enrollment Gateway.
globalsign.com/en/auto-enrollment-gateway
[34] Sven Hammann, Ralf Sasse, and David A. Basin. 2020. Privacy-Preserving OpenID
Connect. In ASIA CCS ’20: The 15th ACM Asia Conference on Computer and
Communications Security, Taipei, Taiwan, October 5-9, 2020. ACM, 277–289. https:
//doi.org/10.1145/3320269.3384724
https://
[35] Jacob Hoffman-Andrews. 2020. 2020.02.29 CAA Rechecking Bug.
community.letsencrypt.org/t/2020-02-29-caa-rechecking-bug/114591
[36] Dennis Jackson, Cas Cremers, Katriel Cohn-Gordon, and Ralf Sasse. 2019. Seems
Legit: Automated Analysis of Subtle Attacks on Protocols that Use Signatures. In
Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications
Security, CCS 2019, London, UK, November 11-15, 2019. ACM, New York, NY, USA,
2165–2180. https://doi.org/10.1145/3319535.3339813
[37] Mike Jones, John Bradley, and Nat Sakimura. 2015. JSON Web Signature (JWS).
RFC 7515. https://doi.org/10.17487/RFC7515
[38] Hemi Leibowitz, Amir Herzberg, and Ewa Syta. 2019. Provable Secure PKI
Schemes. Cryptology ePrint Archive, Report 2019/807. https://eprint.iacr.org/
2019/807.
[39] Let’s Encrypt. 2018.
ACME v2 Production Environment & Wild-
cards. https://community.letsencrypt.org/t/acme-v2-production-environment-
wildcards/55578
[40] Let’s Encrypt. 2020. Let’s Encrypt Has Issued a Billion Certificates.
https:
//letsencrypt.org/2020/02/27/one-billion-certs.html
[41] Let’s Encrypt. 2021. ACME Client Implementations. https://letsencrypt.org/
docs/client-options
[42] Let’s Encrypt. 2021. Boulder: An ACME-based certificate authority, written in
Go. https://github.com/letsencrypt/boulder
[43] Let’s Encrypt. 2021. Let’s Encrypt certification authority. https://letsencrypt.org
[44] Let’s Encrypt. 2021. Pebble ACME Server. https://github.com/letsencrypt/pebble
[45] Simon Meier, Benedikt Schmidt, Cas Cremers, and David A. Basin. 2013. The
TAMARIN Prover for the Symbolic Analysis of Security Protocols. In Computer
Aided Verification - 25th International Conference, CAV 2013, Saint Petersburg,
Russia, July 13-19, 2013. Proceedings (Lecture Notes in Computer Science, Vol. 8044).
Springer, Berlin, 696–701. https://doi.org/10.1007/978-3-642-39799-8_48
[46] Alfred Menezes and Nigel P. Smart. 2004. Security of Signature Schemes in a Multi-
User Setting. Des. Codes Cryptogr. 33, 3 (2004), 261–274. https://doi.org/10.1023/B:
DESI.0000036250.18062.3f
[47] Roger M. Needham and Michael D. Schroeder. 1978. Using Encryption for Au-
thentication in Large Networks of Computers. Commun. ACM 21, 12 (1978),
993–999. https://doi.org/10.1145/359657.359659
[48] Thomas Pornin and Julien P. Stern. 2005. Digital Signatures Do Not Guarantee
Exclusive Ownership. In Applied Cryptography and Network Security, Third Inter-
national Conference, ACNS 2005, New York, NY, USA, June 7-10, 2005, Proceedings
(Lecture Notes in Computer Science, Vol. 3531). Springer, Berlin, 138–150.
[49] REPROSEC. 2021. REPROSEC Project. https://reprosec.org/
[50] Roland Bracewell Shoemaker. 2020. Automated Certificate Management Envi-
ronment (ACME) TLS Application-Layer Protocol Negotiation (ALPN) Challenge
Extension. RFC 8737. https://doi.org/10.17487/RFC8737
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2614[51] Juraj Somorovsky, Mario Heiderich, Meiko Jensen, Jörg Schwenk, Nils Gruschka,
and Luigi Lo Iacono. 2018. All your clouds are belong to us: security analysis of
cloud management interfaces. In Proceedings of the 3rd ACM Cloud Computing
Security Workshop, CCSW 2011, Chicago, IL, USA, October 21, 2011. ACM, New
York, NY, USA, 3–14. https://doi.org/10.1145/2046660.2046664
[52] Juraj Somorovsky, Andreas Mayer, Jörg Schwenk, Marco Kampmann, and Meiko
Jensen. 2012. On Breaking SAML: Be Whoever You Want to Be. In Proceedings
of the 21th USENIX Security Symposium, Bellevue, WA, USA, August 8-10, 2012.
USENIX Association, Berkeley, CA, USA, 397–412.
[53] Nikhil Swamy, Catalin Hritcu, Chantal Keller, Aseem Rastogi, Antoine Delignat-
Lavaud, Simon Forest, Karthikeyan Bhargavan, Cédric Fournet, Pierre-Yves Strub,
Markulf Kohlweiss, Jean Karim Zinzindohoue, and Santiago Zanella Béguelin.
2016. Dependent types and multi-monadic effects in F★. In Proceedings of the
43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming
Languages, POPL 2016, St. Petersburg, FL, USA, January 20 - 22, 2016. ACM, New
York, NY, USA, 256–270. https://doi.org/10.1145/2837614.2837655
[54] Mathy Vanhoef and Frank Piessens. 2017. Key Reinstallation Attacks: Forcing
Nonce Reuse in WPA2. In Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security, CCS 2017, Dallas, TX, USA, October 30
- November 03, 2017. ACM, New York, NY, USA, 1313–1328. https://doi.org/10.
1145/3133956.3134027
[55] Thomas YC Woo and Simon S Lam. 1992. Authentication for distributed systems.
Computer 25, 1 (1992), 39–52.
[56] Jiangshan Yu, Vincent Cheval, and Mark Ryan. 2016. DTKI: A New Formalized
PKI with Verifiable Trusted Parties. Comput. J. 59, 11 (2016), 1695–1713. https:
//doi.org/10.1093/comjnl/bxw039
[57] ZeroSSL. 2021. ACME Automation. https://zerossl.com/features/acme/
A APPLICATION-SPECIFIC DATA
STRUCTURES
As explained in Section 6.1, we did not just use “plain” symbolic
bytes (as defined by DY★) to model ACME. Instead, we defined
high-level data structures which closely resemble their respective
definition in the ACME specification [5]. While this incurs some
major benefits, as explained in Section 6.1, we have to convert these
data structures to DY★ bytes, since all interfaces to DY★ are, of
course, independent of ACME and thus require symbolic bytes.
Note that this conversion is more than just a technicality of the
model: If the conversion is wrong, we might lose all guarantees
provided by DY★. In fact, we would not be able to prove that our
modeled ACME client and server APIs do not violate our global
trace invariants (see Section 7). Therefore, we not only have to
implement suitable conversion functions, but we also have to prove
that they are inverses of each other. In the following, we give an
example of one of our data structures, the respective conversion
functions, and correctness proof.
The following F★ definition introduces a record type which mod-
els the inner JWS of an account key rollover message (see Sec-
tion 7.3.5 of the ACME specification [5]), i.e., a message sent by a
client who wants to update its account public key. As the name
“inner” JWS suggests, an instance of this type is used as the payload
of a regular ACME protocol message (i.e., a JWS signed with the
current account key).