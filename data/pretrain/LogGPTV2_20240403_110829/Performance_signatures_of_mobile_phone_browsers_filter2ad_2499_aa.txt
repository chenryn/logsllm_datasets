title:Performance signatures of mobile phone browsers
author:Bilal Shebaro and
Di Jin and
Elisa Bertino
POSTER: Performance Signatures
of Mobile Phone Browsers
Bilal Shebaro, Di Jin, Elisa Bertino
Cyber Center and CERIAS, Purdue University, West Lafayette, IN 47907, USA
{bshebaro, jind, bertino}@purdue.edu
ABSTRACT
Several ﬁngerprinting techniques for computer browsers have
been proposed to make it possible to link together different
browser sessions and possibly tie them to a user identity. As
most of these techniques depend on static browser characteristics
and user-installed plugins,
the resulting ﬁngerprints are not
suitable for mobile browsers because of the similarity of browser
characteristics on similar mobile device products in spite of the
differences in software and hardware. Moreover, mobile devices
are shipped with pre-installed plugins that cannot be modiﬁed,
which limits browser uniqueness. Therefore, we propose a dynamic
mobile browser ﬁngerprinting technique that records the browser’s
behavior and execution characteristics by running background
customized browser scripts. Our dynamic technique is based on
the use of Javascript, HTML5, Flash, and other scripts that are
used to generate performance signatures of mobile browsers to
detect the browser used, the operating system version, and device
type. Our browser detection technique compares the active browser
session signature with existing signatures through three detection
methods: (1) Euclidean Distance, (2) Cosine Similarity, and (3)
Voting System.
In this paper we compare the detection rates
of these methods and their accuracy in determining the mobile
browser in use.
Categories and Subject Descriptors
E.0 [Data]: General
Keywords
Browser ﬁngerprinting signatures;
Euclidean Distance; Cosine Similarity
1.
INTRODUCTION
browser
script engines;
The goal of this work is to propose a dynamic ﬁngerprinting
technique for mobile browsers based on relative browser
performance of code execution which is more accurate than
existing static ﬁngerprinting techniques.
Motivations. The traditional approach for identifying a user in
an online service is through the user’s credentials (username and
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the Owner/Author.
CCS’13, November 4–8, 2013, Berlin, Germany.
ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2512512.
password). However, many websites that offer secure online
services, such as online banking, typically require a stronger form
of identiﬁcation to avoid hijacking or impersonation. Lately, many
such websites have been using additional means of identiﬁcation,
such as hardware tokens or static browser characteristics (such as
the user-agent header), that are combined with users’ credentials
to identify users and recognize them between visits or during their
visits. Hardware tokens are not a good solution due to their cost
and low usability, and static browser characteristics can be easily
modiﬁed or hidden and thus are not robust enough.
Previously known ﬁngerprinting techniques, such as those
explored in EFF’s Panopticlick project [1], rely solely on static
browser characteristics and user-installed plugins that have been
successful in uniquely identifying computer browsers. However,
such techniques are not practical on mobile devices because of the
many similarities of mobile browsers and limited plugin support,
which represents a main factor in browser uniqueness.
For
example, the Panopticlick browser ﬁngerprint would identify >21
bits of entropy on the uniqueness of an iMac Safari computer
browser, compared to under 10 bits of entropy on the iPhone
smartphone Safari browser. Therefore, there is the need of new
techniques to go beyond static browser characteristics of mobile
phones in order to enhance the uniqueness of mobile browsers and
improve the robustness in determining the browser used.
Related Work. Many approaches have been investigated for
ﬁngerprinting user web browsers, either for legitimate reasons or
for malicious and tracking purposes. The ﬁrst large scale study
was conducted by Eckersley showing that various properties of
a user’s browser and plugins can be combined to form a unique
ﬁngerprint [1]. Yen et al. carried out a similar ﬁngerprinting study
by analyzing logs of Bing and Hotmail [6]. They also used the
IP address as part of the ﬁngerprinting process, unlike Eckersley
who considers IP address as unstable. Mowery et al. proposed
ﬁngerprinting computer browsers by recording the completion time
of pre-deﬁned Javascript benchmarks [3]. While their method can
successfully determine the running browser family, it requires over
3 minutes to fully execute each benchmark, which is impractical in
shorter webpage view-time [2]. Finally, Olejnik et al. investigated
how web history can be used also as a way of ﬁngerprinting without
the need of client-side state [5]. Even though most browsers
do not any longer have the CSS-visited history bug that made
ﬁngerprinting though web history possible, Olejnik et al. claim
that large script providers are still capable of ﬁngerprinting user
browsers through the web visited history [4].
Contributions. We propose a mobile browser ﬁngerprinting
technique that is based on the performance differences between
browsers on the same or different mobile devices, which allows
us to detect not only the browser type but also the device
type and operating system version. We investigated various
browser capabilities available on popular smartphones and created
1407a customized mobile browser ﬁngerprinting scripts composed of a
set of various Javascript, HTML5, Flash and other graphic scripts.
We hosted these scripts on our web server with only a subset of
these scripts to be chosen dynamically at run-time to execute on
the user’s browser upon visiting our web server. This is necessary
for the ﬁngerprinting process to ﬁnish in a timely manner within
the user webpage view-time so it can record the execution times
of the running scripts. The execution times act as the browser
signature and are uploaded to a database server to determine the
familiarity of the connected device. We experimentally tested
the determination of browser signatures through three different
detection methods; (1) Euclidean Distance, (2) Cosine Similarity,
and (3) Voting System. As our database contains ﬁngerprints
of various smartphone browsers, we compare the results of each
method and its accuracy in detecting the browser used.
Our ﬁngerprinting technique is useful for websites that have
customized scripts and services for each device type and browser
as part of their security measurements. Moreover, it can be also
used for websites that require to know and validate the familiarity
of a connected device of returning users to avoid hijacking or
impersonation. As these websites may use our ﬁngerprinting
scripts within their websites, they would need to create their own
signature database to capture their users’ browser signatures and
may combine them with user passwords to form stronger security
against account hijackers.
2. FINGERPRINTING SCHEME
Web browsers on smartphones have adopted several script
engines able of running common web scripts but still much slower
than computer browsers. This is due to the limited power of their
CPUs and GPUs that take part of browser performance in addition
to browser script engines. As these processors vary from one
mobile phone generation to another even within the same phone
model, browser script engines are browser dependent and vary
within different browser versions or operating system versions.
We take advantage of these variations and build our ﬁngerprinting
scripts to recognize performance differences upon running these
scripts to identify the type of browser, operating system, and the
type of the mobile device.
2.1 Implementation
test
Our ﬁngerprinting scripts consist of customized Javascript,
HTML5 and Flash scripts that
the browser performance
on pixel drawing, complex vector ﬁlls and gradients, visual
computations, and video decoder performance. We ﬁrst selected
a number of script benchmarks, namely the Sunspider, Kraken, and
V8 Javascript benchmarks, and the GUIMark graphical scripts, and
tested their performance on several Apple, Android and Windows
smartphone and tablet devices. We then classiﬁed these scripts
according to their execution time difference and chose the ones
with signiﬁcant performance differences among the tested devices.
We analyzed the cause of those performance differences and
modiﬁed the scripts in order to customize them to better reﬂect
their execution time difference when tested on these devices.
Finally, we created our ﬁngerprinting scripts that is composed of
24 test scripts, where only 10 tests will be chosen at run-time
to execute upon loading our website. These scripts are carefully
chosen to form a 10-dimensional vector ﬁngerprint signature that
is sufﬁcient to characterize the performance of the tested device.
The 10-dimensional vector is then uploaded to our web server for
detection purposes.
2.2 Data Collection and Optimization
Our data collection contains sample ﬁngerprints of the most
popular smartphones and web browsers, such as iPhones, iPads,
Android, and Windows devices running Chrome, Firefox, Internet
Explorer (for Windows phones) and Safari (for Apple devices).
We ran each test script 10 times on each browser for every device
and averaged their execution times to minimize the effects of other
scripts running at the same time. As each operating system on these
devices comes with a pre-installed web browser, we witnessed
performance differences of our ﬁngerprint scripts of the same
browser and device when running on a different operating system
version. For example, our test script execution times for the Safari
browser on the iPhone 4 running iOS 5.1 are signiﬁcantly slower
when it was running on iOS 6.1.3. This is due to the enhancements
applied to browsers and the overall system upon the installation