put possible from (cid:104)c(cid:48), m(cid:48), o(cid:105). For example, programs outputL(1)
and outputL(1); while 1 do skip both emit the same maximal trace
(1, L)•.
maximal traces τ•, and use metavariable t to range over traces.
We use the term trace to refer to both incomplete traces τ and
Given that an attacker has observed some trace t, the attacker’s
knowledge [3] is the set of initial memories that could have pro-
duced trace t and have the same initial values for all low-security
variables. Formally, we have
Deﬁnition 1 (Attacker knowledge). Given a program c, initial mem-
ory m, and a trace of public outputs t, deﬁne attacker knowledge
k(c, m, t) (cid:44) {m
(cid:48) | m ≈L m
(cid:48) ∧ (cid:104)c, m
(cid:48)
, (cid:105) ↓ t}
Attacker knowledge is monotonic in t: the more public outputs
are produced in the trace, the fewer memories are consistent with
the output. Note that in this deﬁnition, a smaller knowledge set
corresponds to more precise information.
Our baseline condition for security is progress-sensitive nonin-
terference [4].2
A program satisﬁes progress-sensitive noninterference if attacker
knowledge remains constant regardless of the observed outputs.
Deﬁnition 2 (Progress-sensitive noninterference). Program c satis-
ﬁes progress-sensitive noninterference (PSNI) if for all initial mem-
ories m and traces t such that (cid:104)c, m, (cid:105) ↓ t, attacker knowledge
does not change, i.e.,
k(c, m, t) = {m
(cid:48) | m ≈L m
(cid:48)}
Example. Program outputL(1) satisﬁes Deﬁnition 2. The only
output produced by this program reveals no secret information to
the attacker, and the attacker knowledge is the set of all low-equiva-
lent memories.
However, program while h > 0 do skip; outputL(1) does not
satisfy Deﬁnition 2. By Deﬁnition 1, we have
k(c, m[h (cid:55)→ 0], (1, L)•) = {m
(cid:48)
(cid:48)
| m
(h) ≤ 0 ∧ m ≈L m
(cid:48)}.
Here {m(cid:48) | m(cid:48)(h) ≤ 0 ∧ m ≈L m(cid:48)} is the attacker knowledge
after seeing output (1, L). Because the attacker knowledge is a
strict subset of the set of all memories that are low-equivalent to
the initial memory m, the program is insecure.
2Askarov et al. [4] call this condition termination-sensitive nonin-
terference.
The type system, together with the runtime mechanism, soundly
enforces progress-sensitive noninterference. The following theo-
rem is the main result of this section.
Theorem 1 (Soundness of enforcement). Given program c, if for
some security level l we have Γ, L (cid:96) c : l then c satisﬁes progress-
sensitive noninterference.
The proof of Theorem 1 follows as a special case of Theorem 2,
which is presented in the following section.
5. TERMINATION LEAKAGE BUDGET
The operational semantics of Section 2 ensures that if the ter-
mination behavior of command cast[c] cannot be shown to de-
pend purely on low-security information, then the execution will
get stuck, preventing any leakage of high-security information. If
the execution continued, then the next low-security output pro-
duced by the program would allow the attacker to learn that the
command terminated, which may reveal high-security information.
Similarly, if the command diverges, then the failure to produce
another low-security output may allow the attacker to learn high-
security information. Indeed, the termination behavior of the pro-
gram in Listing 1 reveals everything about the initial value of the
high-security variable secret.
However, continued execution does not necessarily reveal every-
thing about the high-security inputs to the program: the actual in-
formation leaked may be less than expected. In this section, we
extend the semantics of Section 2 to allow a limited amount of in-
formation to be released via the termination behavior of the pro-
gram.
h(cid:48) := h ;
cast [
Consider the following program, in which variables h, h(cid:48), and
hstep are secret (Γ(h) = Γ(h(cid:48)) = Γ(hstep) = H), and variable
low is public (Γ(low ) = L).
1 while low > 0 do {
2
3
4
5
6
7
8
9
]
outputL(low ) ;
low := low − 1 ;
h(cid:48) := h(cid:48) − hstep
while h(cid:48) > 0 do
}
Consider the ﬁrst iteration of the outer loop. The termination or
divergence of the inner loop on Lines 4–5 cannot be established
using only low-security information. Execution of the low output
on Line 7 reveals secret information to the attacker; speciﬁcally, it
reveals that either hstep is positive or h ≤ 0.
Now consider the second iteration of the outer loop. Again, the
termination or divergence of the inner loop reveals to the attacker
the same condition—either hstep is positive or h ≤ 0. Critically, it
does not reveal any more information than was revealed in the ﬁrst
iteration.
Indeed, a sufﬁciently powerful oracle could show that
if the program has produced any low output, then any subsequent
execution of the inner loop will terminate.
To track and control the amount of information leaked through
the termination channel, we introduce a termination leakage bud-
get B. The budget bounds the number of outputs that may reveal
information about the program’s termination behavior.
We extend program conﬁgurations to ﬁve-tuples (cid:104)c, m, o, r, s(cid:105),
where r is a release counter and s is a pending release bit that
is either 0 or 1. The extended operational semantics will ensure
that r counts the number of output events that may allow an attacker
885S-CAST-BUDGET
(cid:104)castp[c], m, o, r, s(cid:105) −→ (cid:104)c, m, o, r, 1(cid:105)
O(p, m, o) = UNKNOWN
m(e) = v
r + s ≤ B
S-OUTPUT-L
(cid:104)outputL(e), m, o, r, s(cid:105) −→ (cid:104)stop, m, o :: (v, L), r + s, 0(cid:105)
S-OUTPUT-H
(cid:104)outputH (e), m, o, r, s(cid:105) −→ (cid:104)stop, m, o :: (v, H), r, s(cid:105)
m(e) = v
Figure 4: Selected rules for budgeted semantics
to learn secret information. Moreover, s will equal 1 only when
the production of the next low-security output might reveal secret
information to the attacker; when s = 0, the next low-security
output leaks no information.
5.1 Budgeted semantics
We deﬁne a new transition relation for the extended program
conﬁgurations. We lift every rule in Figure 2 (except for rule S-
OUTPUT) to a rule for the new conﬁgurations so that r and s remain
unchanged. In addition, we add rules in Figure 4.
Rule S-CAST-BUDGET sets s to 1 when the oracle fails to de-
termine whether a cast command will terminate or diverge. Rule
S-OUTPUT-L applies when an output to the low-security channel
is performed. It increments the release counter by s and clears the
pending bit—subsequent public outputs are guaranteed to reveal
no information until another cast is reached. Additionally, the rule
enforces the termination leakage budget B, requiring that release
counter r does not exceed B. Rule S-OUTPUT-H is a lifted rule for
outputs on high-security channels. It allows arbitrary output to the
high-security channel, and preserves the values of r and s.
The type system for the language does not change.
5.2 Security
Well-typed programs executed using the budgeted semantics may
not satisfy progress-sensitive noninterference, but they do satisfy a
weaker semantic security condition. To state this condition, we ﬁrst
introduce the notions of release events and progress release events.
Release events
For clarity and easier reference, in the follow-
ing deﬁnitions, we use boxes to highlight relevant semantic transi-
tions. A release event is a transition that produces an output that al-
lows the attacker’s knowledge to improve: the event releases high-
security information to the attacker. As per Theorem 1, well-typed
programs executed with the semantics of Section 2 contain no re-
lease events.
Deﬁnition 3 (Release event). Given a program c, memory m, and
an output trace o(cid:48) such that
(cid:104)c, m, , 0, 0(cid:105) −→∗ (cid:104)c(cid:48), m(cid:48), o(cid:48), r(cid:48), s(cid:48)(cid:105) −→ (cid:104)c(cid:48)(cid:48), m(cid:48)(cid:48), o(cid:48)(cid:48), r(cid:48)(cid:48), s(cid:48)(cid:48)(cid:105)
then the boxed transition is a release event if
(cid:48) (cid:22)L) ⊃ k(c, m, o
k(c, m, o
(cid:48)(cid:48) (cid:22)L)
the fact that the output occurred that reveals information. We cap-
ture this intuition by deﬁning progress release events to be release
events that reveal only as much information as knowing that some
output was produced.
Deﬁnition 4 (Progress release event). Given a program c, mem-
ory m, and an output trace o(cid:48) such that
(cid:104)c, m, , 0, 0(cid:105) −→∗ (cid:104)c(cid:48), m(cid:48), o(cid:48), r(cid:48), s(cid:48)(cid:105) −→ (cid:104)c(cid:48)(cid:48), m(cid:48)(cid:48), o(cid:48)(cid:48), r(cid:48)(cid:48), s(cid:48)(cid:48)(cid:105)
then the boxed transition is a progress release event, if it is a release
event and it holds that
(cid:48)(cid:48) (cid:22)L) =
k(c, m, o
(cid:48) (cid:22)L :: (v, L)).
(cid:91)
v∈Z
v∈Z k(c, m, o(cid:48) (cid:22)L :: (v, L)) is called progress
k(c, m, o
Here, the term(cid:83)
knowledge [4].
Example. In program
while h > 0 do skip;
outputL(1)
the low output is a progress release event. We have
(cid:48) ≈L m ∧ m
k(c, m[h (cid:55)→ 0], (1, L)•) = {m
(cid:48)|m
(cid:48)
(h) ≤ 0}.
(cid:91)
For progress knowledge, we observe that the only possible low out-
put here is exactly (1, L); we have
k(c, m[h (cid:55)→ v], o
(cid:48) (cid:22)L :: (v, L)) = k(c, m[h (cid:55)→ 0], (1, L)).
v∈Z
Clearly, by Deﬁnition 4 any progress release event is also a re-
lease event, but not the other way around. For example, in program
low := h; outputL(low ), the low output is not a progress release
event.
With the deﬁnition of progress release events at hand, we can
formulate our theorem for budgeted semantics.
Theorem 2 (Budgeted progress release). Given a program c such
that Γ, L (cid:96) c : l for some security level l then execution of c
with budget B contains at most B release events, all of which are
progress release events.
A proof of this theorem is available in the companion technical
report [34].
Note that Theorem 1 is a special case of Theorem 2 for budget
B = 0. Moreover, when B is inﬁnite, Theorem 2 implies that well-
typed programs satisfy progress-insensitive noninterference [4], a
semantic security condition that allows an attacker to learn infor-
mation through progress release events.
Interpreting the termination leakage budget The budget en-
forced on a program has a number of interpretations. The sim-
plest interpretation is that B is a bound on the number of times
the progress channel may be exploited. An information-theoretic
interpretation of this is that the amount of information that may be
conveyed via the progress channel is at most log2(B +1) bits. This
is a pessimistic bound. Because there are at most B + 1 possible
observations, the expression log2(B + 1) bounds both Shannon
entropy and min-entropy [49] notions of leakage.
Example. In program low := h; outputL(low ), the low output is
the release event: attacker knowledge changes with the output.
A particular class of release events that are interesting to us are
progress release events, which are release events that leak informa-
tion via the progress channel. That is, it is not the value output, but
6. MULTI-LEVEL SECURITY
So far we have only considered a simple two-point lattice of se-
curity levels. However, many real systems for which information
security is a concern require richer lattices to express their security.
In this section we extend the language semantics and type system
8866.1 Budgets for multiple levels
We generalize the budgeted semantics by providing a budget for
each security level. For example, if each security level represents
the information of a security principal, then each principal may set
their budget independently. We write B(l) for the leakage bud-
get of security level l. Intuitively, budget B(l) bounds information
leakage via progress channels from level l to any other level l(cid:48) such
that l (cid:54)(cid:118) l(cid:48).
Extending the release counter and pending release bits We
track the number of progress release events for each security level,
essentially maintaining a release counter for each security level.
Let R be a function from security levels to release counters, such
that R(l) is the number of progress release events that have oc-
curred that may have leaked information at level l to some level l(cid:48)
such that l (cid:54)(cid:118) l(cid:48). When we encounter an output that can potentially
leak information at level l, we conservatively increment the release
counters for all levels below l, that is, all l(cid:48) such that l(cid:48) (cid:118) l.
We generalize the pending release bit in a similar way, by track-
ing a separate pending bit for each security level. Since a function
from security levels to a single bit is isomorphic to a set of secu-
rity levels, we generalize the pending release bit to a set of security
levels S. If l ∈ S then the pending bit for level l is set, meaning
that the next output on a channel l(cid:48), such that l(cid:48) (cid:54)(cid:118) l, may reveal
information from level l. Thus, if l ∈ S and an output occurs to
channel l(cid:48) such that l (cid:54)(cid:118) l(cid:48), then the output release counter for level l
is incremented, and l is removed from S. We refer to S as the set
of pending levels.
Budget update To formally specify how release counters and the
set of pending levels are updated when an output occurs to chan-
nel l, we deﬁne function update(R, S, l). This function takes three
arguments: R is a release counter, S is a set of pending levels,
and l is the security level of the channel on which the output oc-
curred. The function returns a pair (R(cid:48), S(cid:48)) of the updated release
counter R(cid:48) and the updated set of pending levels S(cid:48).
three sets S = S1 (cid:93) S2 (cid:93) S3 such that
For a ﬁxed security level l, let us rewrite S as a disjoint union of
S1 ={l