title:Real-Time Detection of Malware Downloads via Large-Scale URL-\textgreaterFile-\textgreaterMachine
Graph Mining
author:Babak Rahbarinia and
Marco Balduzzi and
Roberto Perdisci
Real-Time Detection of Malware Downloads via
Large-Scale URL→File→Machine Graph Mining
Babak Rahbarinia
Auburn University at
Montgomery
Montgomery, AL 36117, USA
PI:EMAIL
Marco Balduzzi
Trend Micro Research, Italy
PI:EMAIL
Roberto Perdisci
University of Georgia
Athens, GA 30602, USA
PI:EMAIL
ABSTRACT
In this paper we propose Mastino, a novel defense system
to detect malware download events. A download event is a
3-tuple that identiﬁes the action of downloading a ﬁle from
a URL that was triggered by a client (machine). Mastino
utilizes global situation awareness and continuously moni-
tors various network- and system-level events of the clients’
machines across the Internet and provides real time clas-
siﬁcation of both ﬁles and URLs to the clients upon sub-
mission of a new, unknown ﬁle or URL to the system. To
enable detection of the download events, Mastino builds a
large download graph that captures the subtle relationships
among the entities of download events, i.e. ﬁles, URLs, and
machines. We implemented a prototype version of Mastino
and evaluated it in a large-scale real-world deployment. Our
experimental evaluation shows that Mastino can accurately
classify malware download events with an average of 95.5%
true positive (TP), while incurring less than 0.5% false pos-
itives (FP). In addition, we show the Mastino can classify
a new download event as either benign or malware in just a
fraction of a second, and is therefore suitable as a real time
defense system.
Keywords
Graph Mining; Malware Detection; Machine Learning
1.
INTRODUCTION
Remote malware downloads, e.g., via drive-by exploits, so-
cial engineering attacks, second-stage malware drops, etc.,
currently represent one of the most eﬀective infection vec-
tors. Unfortunately, existing defenses that aim to prevent
malware downloads, such as anti-virus engines (AVs) and
URL blacklists, are only partially eﬀective because they tend
to lag behind the latest threats, thus leaving users exposed
to new malware infections [17]. For instance, AVs are no-
toriously ineﬀective against malware code obfuscation [11],
whereas URL blacklists can often be circumvented by dis-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 ACM. ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897918
tributing malware downloads from frequently changing do-
mains [9].
In this paper we present Mastino, a novel system for
accurate real-time detection of malware download events.
Our system aims to detect malware downloads by reason-
ing about who is downloading what, and from where, rather
than trying to classify the content of the single downloaded
ﬁles or the speciﬁc download URLs in isolation. To this end,
we target a real-world deployment scenario in which a large
number of machines (in the order of hundreds of thousands)
run a download identiﬁcation agent (DIA) capable of identi-
fying new executable ﬁle download events. Each DIA sends
information about new download events to our detection
system, and temporarily quarantines the ﬁle, thus prevent-
ing the operating system from opening or executing a ﬁle
until a decision is received regarding its nature, as shown in
Figure 1. If Mastino classiﬁes the ﬁle as benign, the DIA
will allow the downloaded ﬁle to run; otherwise, the ﬁle can
be permanently blocked or removed.
Based on the download events reported by hundreds of
thousands of machines, our system maintains a large tripar-
tite graph of historic download events (Figure 2), in which
nodes represent either a machine, a downloaded ﬁle, or the
download URL, and edges between nodes express who (i.e.,
what machine) downloaded what ﬁle and from what URL.
This tripartite graph is further augmented by annotating
nodes with intrinsic features that pertain to each separate
node (e.g., ﬁle nodes contain information about whether the
downloaded ﬁle is packed, carries a valid signature, etc.).
We then cast the problem of accurately detecting new mali-
cious ﬁle downloads as an inference problem over this anno-
tated tripartite graph. In essence, Mastino leverages large-
scale situation awareness about web-based software down-
load events to more accurately detect future malware down-
loads.
To achieve high detection accuracy, Mastino combines
knowledge derived from historic relationships between ma-
chines, ﬁles, and URLs, with both system- and network-
level properties of each download event. This is in con-
trast with previous works, which attempt to detect malware
downloads based primarily on features derived from network
traﬃc [12, 19, 22] or that only consider the “relationships”
between machines and ﬁles [8]. In addition, unlike [19], our
system is not limited to detecting browser-initiated malware
downloads (e.g., via drive-by and social engineering attacks),
and instead aims to detect any malware download, includ-
ing malware updates, second-stage malware drops, pay-per-
783install malware downloads, etc. (diﬀerences with previous
work are discussed in detail in Section 7).
For instance, given a machine m that downloads an exe-
cutable ﬁle f from a URL u, Mastino takes into account
features such as the name and hash of the process running on
m that initiated the download, the name of the downloaded
ﬁle as it was ﬁrst saved on disk, whether or not m had been
previously infected, etc. These system-level features are fur-
ther combined with ﬁle-based information, such as whether
f is believed to be packed/obfuscated (as determined by
the download identiﬁcation agent), whether the ﬁle carries
a valid digital signature, its lifetime (i.e., when was the ﬁle
ﬁrst observed by any of the agents), etc., along with network-
level features about the source URL (e.g., the “age” of the
download domain, its eﬀective second-level domain, etc.).
In Section 5.4, we show that combining both system-level
and network-level features signiﬁcantly improves detection
accuracy.
In summary, we make the following contributions:
• We present Mastino, a novel system for accurate real-
time detection of web-based malware download events.
Mastino leverages large-scale situation awareness about
web-based software download events, and casts the
problem of detecting new malware downloads as an
inference problem over large URL→ﬁle→machine re-
lationship graphs.
• Unlike previous work, Mastino combines both system-
and network-level information related to executable ﬁle
downloads, allowing us to more accurately detect fu-
ture malware downloads. In addition, the classiﬁcation
of new download events can be performed in only a
fraction of a seconds, thus enabling real-time malware
detection.
• We evaluate Mastino over data collected from a real-
world deployment across hundreds of thousands of end-
user machines globally distributed across the Internet.
We show that our system is able to classify new mal-
ware download events with a true positive (TP) rate
of 95.5% at less than 0.5% false positives (FP).
2. OVERVIEW
Problem Deﬁnition. Let m be a user’s machine that at
time t downloads an executable ﬁle f from a remote down-
load URL u. Our main goal is to concurrently classify f
and u to determine in real time whether they are likely ma-
licious. In other words, we aim to proactively detect malware
download events, so that malware ﬁles can be immediately
quarantined (or removed) to prevent their execution on the
download client system.
Approach. Our approach leverages large-scale situation
awareness to accurately detect new malware download events
in real time. We continuously monitor system and network
events on a large number (hundreds of thousands, in our
current deployment) of client machines scattered across the
Internet, as shown in Figure 1. Each client runs a download
identiﬁcation agent (DIA), whose main responsibility is to
recognize when an executable ﬁle download has occurred
and report detailed information about this event to a cen-
tralized malware download detection (MDD) system. MDD
collects information about executable ﬁle download events
from all participating clients, automatically updates its mal-
ware download detection models, and responds to download
classiﬁcation requests from the clients.
Figure 1: Mastino – approach overview.
Malware Download Detection System (MDD). In this
paper, we focus on designing and implementing the central-
ized malware download detection system (depicted in Fig-
ure 1) so that it can accurately classify malware download
events, and respond to download classiﬁcation requests from
clients with minimal response latency.
Every time a client downloads an executable ﬁle, the DIA
agent on the client reports information about the event to
the malware download detection system, including the full
URL from which the ﬁle was downloaded and detailed infor-
mation about the downloaded ﬁle, such as whether the ﬁle
is likely packed/obfuscated, carries a valid signature and size.
DIA also collects system-level information about the ma-
chine that downloaded the ﬁle, including information such
as the name and hash of the client process that initiated the
download, the destination name with which the downloaded
ﬁle is stored on disk, etc.
MDD uses the download events information reported by
the DIA agents to build an annotated download graph (see
simpliﬁed example in Figure 2). Essentially, this download
graph is a directed tripartite graph, G(U, F, M, EU,F , EF,M ,
EU,M ), where nodes in set U represent URLs, nodes in F
are ﬁles uniquely identiﬁed by their SHA1 hash, and set M
includes all participating machines, which are identiﬁed by
an anonymized global unique identiﬁer (GUID) generated
by the DIA agent. A URL u is connected to a ﬁle f with
a directed edge (u → f ) if f was downloaded from u. Sim-
ilarly, a ﬁle f is connected to a machine m with a directed
edge (f → m), if f was downloaded by m. Finally, a URL
u is connected to a machine m with an edge (u → m) if m
downloaded an executable ﬁle from u (notice that Figure 2
does not show (u → m) edges for simplicity). Each node
is annotated with intrinsic node information. For example,
each ﬁle node f ∈ F includes information about whether f
is likely packed/obfuscated, if it carries a valid digital signa-
ture, its ﬁle size, ﬁle name etc. Similarly, a URL node u ∈ U
includes information such as IP, the fully qualiﬁed domain
name (FQD) and eﬀective second level domain (e2LD) of the
domain portion of u, path and query string components of u,
and the “age” of URL, FQD, and e2LD. Machine nodes carry
information related to their malware infection history, the
processes that initiated the ﬁle downloads on the machines,
and etc.
MDD maintains historic snapshots of the download graph,
in which known benign and malicious ﬁles and URLs are
labeled accordingly (e.g., by leveraging existing blacklists,
whitelists, and multiple AV engines). This historic informa-
tion is used to build a statistical classiﬁer, which is respon-
sible to satisfy classiﬁcation requests from the DIAs. For
Malware Download Detector (MDD)- Global situation awareness- Build/update annotated graphs - Learn malware detection models - Classify ﬁle downloadsClassiﬁcationRequestDownload events informationExecutable ﬁle download serversClients that run Download Identiﬁcation Agent (DIA)MFU784Figure 2: Example representation of an annotated download graph. Note that edges between URLs and machines are not
shown, for simplicity.
instance, let d(cid:48) = (u(cid:48), f(cid:48), m(cid:48)) be a new download event tu-
ple (i.e., a new URL, ﬁle, and machine GUID) reported by
one of the participating DIAs to the MDD. The MDD sys-
tem ﬁrst updates the most recent available graph snapshot
by adding the new download event nodes and related edges.
MDD uses this updated graph to concurrently classify u(cid:48) and
f(cid:48) (the URL and ﬁle nodes) as either malicious or benign. If
either the URL u(cid:48) or the ﬁle f(cid:48) is classiﬁed as malicious, the
related entire download event is classiﬁed as malware and
the classiﬁcation result is forwarded to the requesting DIA,
as shown in Figure 3 (see Section 3 for details).
Non-Goals and Assumptions. The design of the down-
load identiﬁcation agent (DIA) is outside the scope of this
paper. We assume that the DIA is capable of accurately de-
tecting executable ﬁle download events, and can collect the
related network- and system-level information (including ﬁle
download path on disk, downloading process information,
downloading URL, etc.).
In addition, we assume that (i)
the DIA is capable of quarantining the downloaded ﬁles,
preventing their execution until a classiﬁcation response is
received from our MDD system; (ii) DIA and MDD can au-
thenticate each other; and that (iii) the integrity and conﬁ-
dentiality of the communication between each deployed DIA
and the MDD are protected (e.g., via TLS). We believe
these assumptions are reasonable, because most technical
challenges related to DIAs have already been successfully
addressed by a large body of work in both the anti-malware
industry and academia.
Privacy Considerations. To perform this study we collect
data from hundreds of thousands of real-world clients that
run a DIA developed by a leading anti-malware vendor. It
is important to notice that the data is collected only from
clients who voluntarily agree to share information about ﬁle
download events. In addition, the data is provided to us in
a fully anonymized form, whereby machine identiﬁers and
other potentially sensitive information (e.g., the download
path on ﬁle-system) are scrambled – via appropriate cryp-
tographic primitives. Data privacy is further protected via
mutual non-disclosure agreements.
3. SYSTEM DETAILS
In this section, we describe in details how Mastino’s Mal-
ware Download Detection (MDD) module works.
3.1 Graph Node Labeling and Reputations
Each node in the tripartite download graph is assigned a
reputation score. These reputation scores are utilized to per-
form inference-based detection of unknown ﬁles and URLs
based on the associations among the download event enti-
Figure 3: High-level overview of classiﬁcation process.
ties in the graph. Speciﬁcally, we deﬁne a badness reputa-
tion score, R ∈ [0, 1] where 1 means maximum badness, 0
means maximum goodness, and 0.5 means unknown node
(details in Section 4.1). If a node’s R is above a badness
threshold, the node will be labeled as known bad, while if
the reputation is below a certain threshold, the node will
be labeled as known good. In all other cases the node will