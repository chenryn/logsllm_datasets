# Real-Time Detection of Malware Downloads via Large-Scale URL→File→Machine Graph Mining

**Authors:**
- Babak Rahbarinia, Auburn University at Montgomery, Montgomery, AL 36117, USA
- Marco Balduzzi, Trend Micro Research, Italy
- Roberto Perdisci, University of Georgia, Athens, GA 30602, USA

## Abstract
In this paper, we introduce Mastino, a novel defense system designed to detect malware download events. A download event is defined as a 3-tuple that identifies the action of downloading a file from a URL triggered by a client (machine). Mastino leverages global situational awareness and continuously monitors various network- and system-level events across the Internet. It provides real-time classification of both files and URLs upon submission of a new, unknown file or URL to the system. To enable detection, Mastino constructs a large-scale download graph that captures the subtle relationships among files, URLs, and machines. We implemented a prototype version of Mastino and evaluated it in a large-scale, real-world deployment. Our experimental results show that Mastino can accurately classify malware download events with an average true positive rate (TP) of 95.5% and a false positive rate (FP) of less than 0.5%. Additionally, Mastino can classify a new download event as either benign or malicious in just a fraction of a second, making it suitable for real-time defense.

**Keywords:** Graph Mining, Malware Detection, Machine Learning

## 1. Introduction
Remote malware downloads, such as those via drive-by exploits, social engineering attacks, and second-stage malware drops, are currently one of the most effective infection vectors. Unfortunately, existing defenses like antivirus engines (AVs) and URL blacklists are only partially effective because they often lag behind the latest threats, leaving users exposed to new malware infections [17]. For example, AVs are known to be ineffective against malware code obfuscation [11], while URL blacklists can be circumvented by distributing malware from frequently changing domains [9].

In this paper, we present Mastino, a novel system for accurate real-time detection of malware download events. Mastino aims to detect malware downloads by analyzing who is downloading what, and from where, rather than classifying individual files or URLs in isolation. In our real-world deployment scenario, a large number of machines (hundreds of thousands) run a Download Identification Agent (DIA) that identifies new executable file download events. Each DIA sends information about new download events to our detection system and temporarily quarantines the file, preventing the operating system from opening or executing it until a decision is received regarding its nature (Figure 1). If Mastino classifies the file as benign, the DIA allows the downloaded file to run; otherwise, the file is permanently blocked or removed.

Based on the download events reported by hundreds of thousands of machines, Mastino maintains a large tripartite graph of historical download events (Figure 2). Nodes in this graph represent machines, downloaded files, or download URLs, and edges express the relationships between these entities. The graph is further augmented with intrinsic features for each node, such as whether a file is packed or carries a valid signature. Mastino then formulates the problem of detecting new malicious file downloads as an inference problem over this annotated tripartite graph, leveraging large-scale situational awareness to more accurately detect future malware downloads.

To achieve high detection accuracy, Mastino combines knowledge derived from historical relationships between machines, files, and URLs with both system- and network-level properties of each download event. This approach contrasts with previous works that focus primarily on features derived from network traffic [12, 19, 22] or consider only the relationships between machines and files [8]. Unlike [19], Mastino is not limited to detecting browser-initiated malware downloads and aims to detect any malware download, including updates, second-stage drops, and pay-per-install malware downloads (differences with previous work are discussed in Section 7).

For example, given a machine \( m \) that downloads an executable file \( f \) from a URL \( u \), Mastino considers features such as the name and hash of the process running on \( m \) that initiated the download, the name of the downloaded file as it was first saved on disk, and whether \( m \) had been previously infected. These system-level features are combined with file-based information, such as whether the file is believed to be packed/obfuscated, whether it carries a valid digital signature, and its lifetime. Network-level features about the source URL, such as the age of the download domain and its effective second-level domain, are also considered. In Section 5.4, we show that combining both system- and network-level features significantly improves detection accuracy.

In summary, our contributions include:
- **Mastino**: A novel system for accurate real-time detection of web-based malware download events. Mastino leverages large-scale situational awareness and formulates the problem of detecting new malware downloads as an inference problem over large URL→file→machine relationship graphs.
- **Improved Detection Accuracy**: Unlike previous work, Mastino combines both system- and network-level information related to executable file downloads, enabling more accurate detection. Classification of new download events can be performed in a fraction of a second, enabling real-time malware detection.
- **Real-World Evaluation**: We evaluate Mastino using data collected from a real-world deployment across hundreds of thousands of end-user machines globally distributed across the Internet. Our results show that Mastino can classify new malware download events with a true positive rate of 95.5% and a false positive rate of less than 0.5%.

## 2. Overview
### Problem Definition
Let \( m \) be a user's machine that at time \( t \) downloads an executable file \( f \) from a remote download URL \( u \). Our main goal is to concurrently classify \( f \) and \( u \) in real time to determine whether they are likely malicious. We aim to proactively detect malware download events so that malware files can be immediately quarantined or removed to prevent their execution on the client system.

### Approach
Our approach leverages large-scale situational awareness to accurately detect new malware download events in real time. We continuously monitor system and network events on a large number (hundreds of thousands) of client machines scattered across the Internet (Figure 1). Each client runs a DIA, which recognizes when an executable file download has occurred and reports detailed information about the event to a centralized Malware Download Detection (MDD) system. The MDD collects information about executable file download events from all participating clients, automatically updates its malware download detection models, and responds to download classification requests from the clients.

### Malware Download Detection System (MDD)
We focus on designing and implementing the centralized MDD system (Figure 1) to accurately classify malware download events and respond to download classification requests from clients with minimal latency. Every time a client downloads an executable file, the DIA agent on the client reports information about the event to the MDD, including the full URL, detailed file information, and system-level information about the machine.

The MDD uses the download event information reported by the DIA agents to build an annotated download graph (Figure 2). This graph is a directed tripartite graph, \( G(U, F, M, E_{U,F}, E_{F,M}, E_{U,M}) \), where nodes in set \( U \) represent URLs, nodes in \( F \) are files uniquely identified by their SHA1 hash, and set \( M \) includes all participating machines, identified by an anonymized global unique identifier (GUID) generated by the DIA agent. Each node is annotated with intrinsic information, such as whether a file is packed/obfuscated, if it carries a valid digital signature, and the age of the URL.

The MDD maintains historical snapshots of the download graph, where known benign and malicious files and URLs are labeled accordingly. This historical information is used to build a statistical classifier that handles classification requests from the DIAs. For example, let \( d' = (u', f', m') \) be a new download event tuple reported by a DIA to the MDD. The MDD updates the most recent graph snapshot by adding the new download event nodes and related edges. It then uses this updated graph to concurrently classify \( u' \) and \( f' \) as either malicious or benign. If either the URL \( u' \) or the file \( f' \) is classified as malicious, the entire download event is classified as malware, and the result is forwarded to the requesting DIA (Figure 3, see Section 3 for details).

### Non-Goals and Assumptions
The design of the DIA is outside the scope of this paper. We assume that the DIA can accurately detect executable file download events and collect related network- and system-level information. We also assume that the DIA can quarantine downloaded files, preventing their execution until a classification response is received from the MDD, and that DIA and MDD can authenticate each other. The integrity and confidentiality of the communication between each deployed DIA and the MDD are protected (e.g., via TLS).

### Privacy Considerations
We collect data from hundreds of thousands of real-world clients running a DIA developed by a leading anti-malware vendor. Data is collected only from clients who voluntarily agree to share information about file download events, and it is provided in a fully anonymized form, with machine identifiers and sensitive information scrambled using appropriate cryptographic primitives. Data privacy is further protected via mutual non-disclosure agreements.

## 3. System Details
In this section, we describe how Mastino's MDD module works.

### 3.1 Graph Node Labeling and Reputations
Each node in the tripartite download graph is assigned a reputation score. These scores are used to perform inference-based detection of unknown files and URLs based on the associations among the download event entities in the graph. Specifically, we define a badness reputation score \( R \in [0, 1] \), where 1 means maximum badness, 0 means maximum goodness, and 0.5 means an unknown node (details in Section 4.1). If a node’s \( R \) is above a badness threshold, the node will be labeled as known bad, while if the reputation is below a certain threshold, the node will be labeled as known good. In all other cases, the node will be labeled as unknown.