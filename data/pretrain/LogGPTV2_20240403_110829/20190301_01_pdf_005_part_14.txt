### 2.3.45 DROP INDEX

**Name:**
DROP INDEX -- remove an index

**Synopsis:**
```sql
DROP INDEX name
```

**Description:**
The `DROP INDEX` command removes an existing index from the database system. To execute this command, you must be a superuser or the owner of the index. If any objects depend on the index, an error will be raised, and the index will not be dropped.

**Parameters:**
- **name**: The name (optionally schema-qualified) of the index to be removed.

**Examples:**
```sql
DROP INDEX name_idx;
```

**See Also:**
- [ALTER INDEX](#)
- [CREATE INDEX](#)

---

### 2.3.46 DROP PACKAGE

**Name:**
DROP PACKAGE -- remove a package

**Synopsis:**
```sql
DROP PACKAGE [ BODY ] name
```

**Description:**
The `DROP PACKAGE` command removes an existing package. To execute this command, you must be a superuser or the owner of the package. If `BODY` is specified, only the package body is removed, and the package specification remains. If `BODY` is omitted, both the package specification and body are removed.

**Parameters:**
- **name**: The name (optionally schema-qualified) of the package to be removed.

**Examples:**
```sql
DROP PACKAGE emp_admin;
```

**See Also:**
- [CREATE PACKAGE](#)
- [CREATE PACKAGE BODY](#)

---

### 2.3.47 DROP PROCEDURE

**Name:**
DROP PROCEDURE -- remove a procedure

**Synopsis:**
```sql
DROP PROCEDURE [ IF EXISTS ] name
[ ([ [ argmode ] [ argname ] argtype ] [, ...]) ]
[ CASCADE | RESTRICT ]
```

**Description:**
The `DROP PROCEDURE` command removes the definition of an existing procedure. To execute this command, you must be a superuser or the owner of the procedure. For overloaded procedures, all input (IN, IN OUT) argument data types must be specified. This requirement is specific to Advanced Server and is not compatible with Oracle databases.

**Usage:**
- **IF EXISTS**: Do not raise an error if the procedure does not exist. A notice is issued in this case.
- **CASCADE**: Automatically drop objects that depend on the procedure, and in turn all objects that depend on those objects.
- **RESTRICT**: Refuse to drop the procedure if any objects depend on it. This is the default behavior.

**Parameters:**
- **name**: The name (optionally schema-qualified) of the existing procedure.
- **argmode**: The mode of an argument: IN, IN OUT, or OUT. If omitted, the default is IN. Note that `DROP PROCEDURE` does not pay attention to OUT arguments, as only the input arguments are needed to determine the procedure's identity.
- **argname**: The name of an argument. Note that `DROP PROCEDURE` does not pay attention to argument names, as only the argument data types are needed to determine the procedure's identity.
- **argtype**: The data type of an argument of the procedure.

**Examples:**
```sql
DROP PROCEDURE select_emp;
```

**See Also:**
- [CREATE PROCEDURE](#)

---

### 2.3.48 DROP PROFILE

**Name:**
DROP PROFILE -- drop a user-defined profile

**Synopsis:**
```sql
DROP PROFILE [IF EXISTS] profile_name [CASCADE | RESTRICT];
```

**Description:**
The `DROP PROFILE` command drops a user-defined profile. Include the `IF EXISTS` clause to instruct the server not to raise an error if the specified profile does not exist. The server will issue a notice if the profile does not exist.

- **CASCADE**: Reassign any users that are currently associated with the profile to the default profile, and then drop the profile.
- **RESTRICT**: Instruct the server not to drop any profile that is associated with a role. This is the default behavior.

**Parameters:**
- **profile_name**: The name of the profile being dropped.

**Examples:**
```sql
DROP PROFILE acctg_profile CASCADE;
```
This command re-associates any roles associated with the `acctg_profile` profile with the default profile, and then drops the `acctg_profile` profile.

```sql
DROP PROFILE acctg_profile RESTRICT;
```
This command instructs the server not to drop `acctg_profile` if there are any roles associated with the profile.

---

### 2.3.49 DROP QUEUE

**Name:**
DROP QUEUE -- drop an existing queue

**Synopsis:**
```sql
DROP QUEUE [IF EXISTS] name
```

**Description:**
The `DROP QUEUE` command allows a superuser or a user with the `aq_administrator_role` privilege to drop an existing queue. This syntax is specific to Advanced Server and is not offered by Oracle.

**Parameters:**
- **name**: The name (possibly schema-qualified) of the queue that is being dropped.
- **IF EXISTS**: Do not raise an error if the queue does not exist. The server will issue a notice.

**Examples:**
```sql
DROP QUEUE work_order;
```

**See Also:**
- [CREATE QUEUE](#)
- [ALTER QUEUE](#)

---

### 2.3.50 DROP QUEUE TABLE

**Name:**
DROP QUEUE TABLE -- drop a queue table

**Synopsis:**
```sql
DROP QUEUE TABLE [ IF EXISTS ] name [, ...]
[CASCADE | RESTRICT]
```

**Description:**
The `DROP QUEUE TABLE` command allows a superuser or a user with the `aq_administrator_role` privilege to delete a queue table. This syntax is specific to Advanced Server and is not offered by Oracle.

**Parameters:**
- **name**: The name (possibly schema-qualified) of the queue table that will be deleted.
- **IF EXISTS**: Do not raise an error if the queue table does not exist. The server will issue a notice.
- **CASCADE**: Automatically delete any objects that depend on the queue table.
- **RESTRICT**: Instruct the server to refuse to delete the queue table if any objects depend on it. This is the default behavior.

**Examples:**
```sql
DROP QUEUE TABLE work_order_table CASCADE;
```

**See Also:**
- [CREATE QUEUE TABLE](#)
- [ALTER QUEUE TABLE](#)

---

### 2.3.51 DROP SYNONYM

**Name:**
DROP SYNONYM -- remove a synonym

**Synopsis:**
```sql
DROP [PUBLIC] SYNONYM [schema.]syn_name
```

**Description:**
The `DROP SYNONYM` command deletes existing synonyms. To execute this command, you must be a superuser or the owner of the synonym, and have USAGE privileges on the schema in which the synonym resides.

**Parameters:**
- **syn_name**: The name of the synonym. A synonym name must be unique within a schema.
- **schema**: The name of the schema that the synonym resides in.

**Notes:**
- You can optionally include the `PUBLIC` clause to drop a synonym that resides in the public schema. The `DROP PUBLIC SYNONYM` command, compatible with Oracle databases, drops a synonym that resides in the public schema.

**Examples:**
```sql
DROP SYNONYM personnel;
```

**See Also:**
- [CREATE SYNONYM](#)

---

### 2.3.52 DROP ROLE

**Name:**
DROP ROLE -- remove a database role

**Synopsis:**
```sql
DROP ROLE name [ CASCADE ]
```

**Description:**
The `DROP ROLE` command removes the specified role. To drop a superuser role, you must be a superuser yourself; to drop non-superuser roles, you must have the `CREATEROLE` privilege. A role cannot be removed if it is still referenced in any database of the cluster; an error will be raised if so. Before dropping the role, you must drop all the objects it owns (or reassign their ownership) and revoke any privileges the role has been granted.

**Parameters:**
- **name**: The name of the role to remove.
- **CASCADE**: If specified, also drops the schema owned by, and with the same name as the role (and all objects owned by the role belonging to the schema) as long as no other dependencies on the role or the schema exist.

**Examples:**
```sql
DROP ROLE admins;
```

**See Also:**
- [CREATE ROLE](#)
- [SET ROLE](#)
- [GRANT](#)
- [REVOKE](#)

---

### 2.3.53 DROP SEQUENCE

**Name:**
DROP SEQUENCE -- remove a sequence

**Synopsis:**
```sql
DROP SEQUENCE name [, ...]
```

**Description:**
The `DROP SEQUENCE` command removes sequence number generators. To execute this command, you must be a superuser or the owner of the sequence.

**Parameters:**
- **name**: The name (optionally schema-qualified) of the sequence.

**Examples:**
```sql
DROP SEQUENCE serial;
```

**See Also:**
- [ALTER SEQUENCE](#)
- [CREATE SEQUENCE](#)

---

### 2.3.54 DROP TABLE

**Name:**
DROP TABLE -- remove a table

**Synopsis:**
```sql
DROP TABLE name [CASCADE | RESTRICT | CASCADE CONSTRAINTS]
```

**Description:**
The `DROP TABLE` command removes tables from the database. Only its owner may destroy a table. To empty a table of rows without destroying the table, use the `DELETE` command. `DROP TABLE` always removes any indexes, rules, triggers, and constraints that exist for the target table.

**Parameters:**
- **name**: The name (optionally schema-qualified) of the table to drop.
- **RESTRICT**: Refuse to drop the table if any objects depend on it. This is the default behavior.
- **CASCADE**: Drop any objects that depend on the table.
- **CASCADE CONSTRAINTS**: Drop any dependent constraints (excluding other object types) on the specified table.

**Examples:**
```sql
DROP TABLE emp;
```

**Outcome Examples:**
- If you create two tables, `orders` and `items`, where the `items` table is dependent on the `orders` table:
  ```sql
  CREATE TABLE orders (order_id int PRIMARY KEY, order_date date, ...);
  CREATE TABLE items (order_id REFERENCES orders, quantity int, ...);
  ```
  - **`DROP TABLE orders RESTRICT;`**: Advanced Server will report an error.
  - **`DROP TABLE orders CASCADE;`**: Advanced Server will drop the `orders` table and the `items` table.
  - **`DROP TABLE orders CASCADE CONSTRAINTS;`**: Advanced Server will drop the `orders` table and remove the foreign key specification from the `items` table, but not drop the `items` table.

**See Also:**
- [ALTER TABLE](#)
- [CREATE TABLE](#)

---

### 2.3.55 DROP TABLESPACE

**Name:**
DROP TABLESPACE -- remove a tablespace

**Synopsis:**
```sql
DROP TABLESPACE tablespacename
```

**Description:**
The `DROP TABLESPACE` command removes a tablespace from the system. A tablespace can only be dropped by its owner or a superuser. The tablespace must be empty of all database objects before it can be dropped. It is possible that objects in other databases may still reside in the tablespace even if no objects in the current database are using the tablespace.

**Parameters:**
- **tablespacename**: The name of the tablespace.

**Examples:**
```sql
DROP TABLESPACE employee_space;
```

**See Also:**
- [ALTER TABLESPACE](#)

---

### 2.3.56 DROP TRIGGER

**Name:**
DROP TRIGGER -- remove a trigger

**Synopsis:**
```sql
DROP TRIGGER name
```

**Description:**
The `DROP TRIGGER` command removes a trigger from its associated table. The command must be run by a superuser or the owner of the table on which the trigger is defined.

**Parameters:**
- **name**: The name of the trigger to be removed.

**Examples:**
```sql
DROP TRIGGER emp_sal_trig;
```

**See Also:**
- [CREATE TRIGGER](#)

---

**Copyright Notice:**
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.