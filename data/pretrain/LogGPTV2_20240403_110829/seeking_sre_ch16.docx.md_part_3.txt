### 数据模型
 了解组织的数据也至关重要。了解存储的内容以及在哪里可以找到它，可以消除开发过程中的大量冗余和调查时间。这也是提供数据存储不适合某些类型的数据的最佳做法的机会。
### 最佳做法和标准
 为工程师定期从事的活动而制定标准，这是谋求价值最大化的另一种有效方法。在帮助工程师和做出决策时，你可以逐步执行此操作。如果你的组织定期雇用没有领域专业知识的新工程师，还可以将这些增量决策合并到入职和培训计划中。下面是这方面的一些示例：
-   数据类型标准
-   索引
-   元数据属性
-   要使用的数据集
-   要公开的指标
-   设计模式
-   迁移和数据库更改模式
在与工程师合作时，发布这些知识可以建立[自助服务知识库](https://martinfowler.com/articles/evodb.html)，团队可以随时访问这些知识库，而不是被迫问你（而造成瓶颈）。
### 工具
 为软件工程师提供有效的开发流程工具是最终推动因素。你可能在帮助他们为新数据存储的基准工具和脚本、数据一致性评估器、模板甚至配置器提供帮助。你所做的是使开发过程中的速度加快，同时腾出时间进行更有价值的工作。   
# 协作
 如果能定期教育、创建工具并增强工程师的能力，你自然会建立良好的关系。任何工程师都应获得授权，可以联系到你，询问信息或有机会在工作时配对。这种互利互惠的模式提供了巨大的价值，因为
SWE 可以从 SRE 团队详细了解业务模式以及他们追求的价值，而 SRE
团队则学到了有关软件开发过程的更多内容。
你可以主动与工程师联系，从而进一步促进这一点。有些功能在很大程度上依赖于数据库开发和重构。这是
DBRE
应集中努力帮助确保成功和效率的地方，可以对这些项目进行密切关注，或成为团队的一员。同样，关注进入公司主线的迁移，这将有助于
DBRE 团队在需要执行审核的地方进行挑选。
接下来，我讨论如何有效地支持交付管道的各个组件。虽然持续交付绝不是一个新概念，但组织一直难以将数据库纳入流程。在以下各节中，我将讨论如何有效地将数据库层引入整个交付周期。
# 部署
  以这样一种方式分解数据迁移是有意义的，这样工程师可以以最小的风险轻松、增量地修改环境。目标应该是让工程师认识到其数据库更改何时需要专家进行分析和管理，以便有效地引入生产。此外，你还可以为这些工程师提供安全可靠地将大多数更改引入生产本身的工具。最理想的情况中，你可以让他们随时推送更改，而不必在限制性维护时段。
## 迁移和版本控制
 应用于数据库的每个更改集都应提供一个数字版本。通常，在应用更改集后，使用存储在数据库中的递增整数来执行此操作。这样，部署系统可以轻松地查看数据库并发现当前版本。这允许你在准备推送代码时轻松应用更改。如果代码部署已为数据库版本
456 认证，并且当前数据库版本为 455，则部署团队知道必须在推送代码之前为
456 应用更改集。
因此，软件工程师将更改集 456
提交到代码库中，并且集成已成功运行，没有重大更改。接下来会发生什么？
## 影响分析
  在提交后测试下，我们在上一节中讨论了影响分析。某些影响（如数据库中存储的代码失效或违反安全控制）是无法通过大门的。软件工程师必须返回并修改其更改，直到这些影响得到缓解。
一些影响可能包括：
-   锁定共享对象
-   资源饱和
-   数据完整性问题
-   复制中断或停止
## 迁移模式
  在进行影响分析后，软件工程师应该能够决定部署迁移的适当方法。对于许多迁移，没有理由需要经历大量的增量更改和广泛的审核工作来执行。新对象、数据插入和其他操作可以轻松推送到生产。
但是，在数据进入系统后，更改或删除现有数据以及修改或删除包含数据的对象可能会创建机会，从而影响服务级别，如前面所述。此时，工程师应将
DBRE
引入。幸运的是，有一组有限的更改可以计划。当你与工程师一起规划和执行迁移时，将构建一个用于更改的模式存储库。在某个时候，如果这些迁移频繁且无痛地发生，则可以自动执行它们。
为实现每个人的安全生产而制定的旗帜和保障措施越多，你对所有团队的信心就越大。这就产生了开发速度。现在，假设我们无畏的软件工程师已签入更改集
456，由于被视为具有影响的更改，已标记了他们的更改。此时，如果已应用并记录该操作，工程师可以使用该操作的迁移模式。否则，应与
DBRE 团队协作创建一个。
### 迁移测试
 尽管这看起来似乎不言自明，但必须认识到，如果更改集的实现详细信息被修改，则必须在部署在集成后环境中之前提交并完全集成修订后的迁移，包括生产。
### 回滚测试
  除了测试迁移及其影响外，DBRE
及其支持的团队还必须考虑迁移或部署的失败以及部分或完整更改集的回滚。数据库更改脚本应在迁移的同时签入。某些迁移（如表创建）可以自动生成默认值，但必须对输入的数据进行记帐。因此，我不建议简单地删除对象来恢复。重命名表允许在写入数据且必须恢复的情况下仍可访问表。
迁移模式还有助于在定义回滚的过程中轻松。缺少有效的回滚脚本可能是集成和部署过程中的一个门控因素。要验证脚本是否正常工作，可以使用以下部署和测试模式：
-   应用更改集
-   快速集成测试
-   应用回滚更改集
-   快速集成测试
-   应用更改集
-   快速集成测试
-   更长和周期性的测试
与测试恢复一样，测试回滚至关重要，你必须将其合并到每个生成和部署过程中。  
## 倡导 CD
 数据库更改不可避免地是真正持续交付的最后一个阻止程序。组织对数据库层进行快速、安全和可预测的更改的能力越多，在市场上的竞争力就越大。此外，这是建立团队之间信任和融洽关系的最大机会。它必须是一个优先事项！  
# 为 DBRE 制作案例
 在本章中，我试图展示数据库工程的格局是如何转变的。我要感谢你花时间读这篇文章。我非常热衷于帮助技术职业中最繁重、最古老的领域有所发展。我认为，DBRE
运动能够为数据驱动的服务和组织推动如此多的价值。
我希望你受到启发，探索您组织中的这些转变，并且渴望了解更多。但是，最重要的是，我希望我已经帮你看到，有机会将
DBA 的长期角色带入现代世界和未来。DBA
的角色不会消失，无论是新加入此职业还是是一位久经考验的老兵，我希望你拥有很长的职业生涯，因此为所参与的每个组织带来价值。如果你受到启发，深入研读这个话题，我建议阅读以下材料。  
# 延伸阅读
-   Campbell, Laine and Charity Majors. [*Database Reliability
    Engineering*](https://bit.ly/database-reliability-engineering)
    (O'Reilly, 2017).
-   Kleppman, Martin. [*Designing Data Intensive
    Applications*](http://shop.oreilly.com/product/0636920032175.do)
    (O'Reilly, 2017).
-   Morris, Kief. [*Infrastructure as
    Code*](http://shop.oreilly.com/product/0636920039297.do) (O'Reilly,
    2015).
-   Humble, Jez and David Farley. *Continuous Delivery*
    (Addison-Wesley).
# 编者介绍
Laine Campbell 在 Fastly 担任工程高级副总裁。她也是 PalominoDB/Blackbird
的创始人兼首席执行官，该公司为包括 Obama for America、Activision
使命召唤、AdobeEchosign、Technorati、Livejournal 和 Zendesk
在内的公司的数据库需求提供服务。