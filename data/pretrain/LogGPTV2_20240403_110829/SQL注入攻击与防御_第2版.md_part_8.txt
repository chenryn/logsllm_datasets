Sbool = validate(input_string , $_GET["param"});
if (Sbool = true)(
//继续处理
//处理表单2
//由于第一个表单已经验证过参数，因为这里无须再验证参数
//执行SQL语甸
(10ss)xenbbsAu =4nsexs
//检查从数据库返回了多少条记录
Srowcount = mysql_num_rows ($result);
Srow = 1
//选代返回的记录集
while (§db_field = mysql_fetch_assoc (Sresult))(
if (Srow *;
$row++:
F
由于第一个表单已经进行过输入验证，因此该应用程序的开发人员没有想到第二个表单也
需要验证输入。攻击者将直接调用第二个表单面不使用第一个表单，或是简单地向第一个表单
提交有效数据，然后操纵要向第二个表单提交的数据。下面的第一个URL会失败，因为需要
验证输入。第二个URL则会引发成功的SQL注入攻击，因为输入未作验证：
[1]  http://www.victim.com/form.php?form=forml6param=' SQL Failed --
[2] http://www,victim,com/form,php?form=form2&param=′ sQL Success =-
1.4.2不安全的数据库配置
可以使用很多方法来减少可修改的访间、可被窃取或操纵的数据量、互联系统的访问级别
以及SQL注入攻击导致的破坏。保证应用代码的安全是首要任务，但也不能忽视数据库本身
的安全。数据库带有很多默认的用户预安装内容。SQLServer使用声名狼籍的“sa”作为数据
16
---
## Page 31
第1章什么是SQL注入
库系统管理员账户，MySQL使用“root”和“anonymous”用户账户，Oracle则在创建数据库
时通常默认会创建SYS、SYSTEM、DBSNMP和OUTLN账户。这些并非全部的账户，只是
比较出名的账户中的一部分，还有很多其他账户。其他账户同样按默认方式进行预设置，口令
众所周知。
有些系统和数据库管理员在安装数据库服务器时允许以root、SYSTEM或Administrator
特权系统用户账户身份执行操作。应该始终以普通用户身份(尽可能位于更改根目录的环境中)
运行服务器（尤其是数据库服务器）上的服务，以使在数据库遭到成功攻击后可以减少对操作系
统和其他进程的潜在破坏。不过，这对于Windows下的Oracle却是不可行的，因为它必须以
SYSTEM权限运行
每一种类型的数据库服务器都施加了自己的访问控制模型，它们为用户账户分配多种权限
来禁正、拒绝、授权、支持数据访间和或）执行内置存储过程、功能或特性。不同类型的数据
库服务器默认还支持通常超出需求但能够被攻击者修改的功能（xp_cmdshell、OPENROWSET、
LOAD_FILE、ActiveX以及Java支持等）。第4章到第7章将详细介绍利用这些功能和特性的
攻击。
应用开发人员在编写程序代码时，通常使用某个内置的权限账户来连接数据库，而不是根
据程序需要来创建特定的用户账户。这些功能强大的内置账户可以在数据库上执行很多与程序
需求无关的操作。当攻击者利用应用中的SQL注入漏洞并使用授权账户连接数据库时，他可
以在数据库上使用该账户的权限执行代码。Web应用开发人员应与数据库管理员协同工作，以
保证程序的数据库访问在最低权限模型下运行，同时应针对程序的功能性需求适当地分离授权
角色。
理想情况下，应用还应使用不同的数据库用户来执行SELECT、UPDATE、INSERT及类
似的命令。这样一来，即使攻击者成功将代码注入易受攻击的语句，为其分配的权限也是最低
的。由于多数应用并未进行权限分离，因此攻击者通常能访问数据库中的所有数据，并且拥有
SELECT、INSERT、UPDATE、DELETE、EXECUTE 及类似的权限。这些过高的权限通常允
许攻击者在数据库间跳转，访间超出程序数据存储区的数据。
不过，要实现上述目标，攻击者需要了解可以获取哪些附加内容、目标机器安装了哪些其
他数据库、存在哪些其他的表以及哪些有吸引力的字段！攻击者在利用SQL注入漏洞时，通
常会尝试访问数据库的元数据。元数据是指数据库内部包含的数据，比如数据库或表的名称、
列的数据类型或访问权限。有时也使用数据字典和系统目录等其他项来表示这些信息。MySQL
服务器(5.0及之后的版本）的元数据位于INFORMATION_SCHEMA虚拟数据库中，可通过SHOW
DATABASES和SHOWTABLES命令访同。所有MySQL用户均有权访间该数据库中的表，但
只能查看表中那些与该用户访间权限相对应的对象的行。SQLServer的原理与MySQL类似，
可通过 INFORMATION_SCHEMA或系统表(sysobjccts、sysindexkeys、sysindexes、syscolumns
systypes等）及（或）系统存储过程来访问元数据。SQL Server2005引入了一些名为“sys.*”的目
录视图，并限制用户只能访问拥有相应访问权限的对象。所有的SQLServer用户均有权访问
数据库中的表并可以查看表中的所有行，而不管用户是否对表或所查阅的数据拥有相应的访间
权限。
Oracle 提供了很多全局内置视图来访间Oracle的元数据（ALL_TABLES、ALL_TAB_COLUMNS
等）。这些视图列出了当前用户可访问的属性和对象。此外，以USER_开头的视图只显示当前
用户拥有的对象（例如，更加受限的元数据视图）：以DBA_开头的视图显示数据库中的所有对
17
---
## Page 32
SQL注入攻击与防御（第2版）
象（例如，用于数据库示例且不受约束的全局元数据视图）。DBA_元数据函数需要有数据库管
理员(DBA）权限。下面是这些语句的示例：
--Oracle语句，列举当前用户可访间的所有表
SELECT OWNER, TABLE_NAME FROM ALL_TABLES ORDER BY TABLE_NAME;
-MySQL语句，列举当前用户可访问的所有表和数据库
SELECT table_schema, table_name FROM information_schema .tables ;
--MSSQL语句，使用系统表列举所有可访间的表
"-MSSQL语句，使用目录视图列举所有可访问的表
SELECT name FROM sysobjects WHERE xtype
=*0';
SELECT name FROM sys.tables;
要隐藏或取消对MySQL数据库中INFORMATION_SCHEMA虚拟数据库的访间是不可能
的，也不可能隐藏或取消对Oracle数据库中数据字典的访问（因为它是一个视图）。可以通过修
改视图来对访问加以约束，但Oracle不提倡这么做。在Microsof SQLServer数据库之中，可
以取消对INFORMATION_SCHEMA、system和sys.*表的访间，但这样会破坏某些功能并导致
部分与数据库交互的应用出现问题。更好的解决办法是为应用的数据库访问运行一个最低权限
模型，并针对程序的功能性需求适当地分离授权角色。
1.5本章小结
通过本章，您学到了一些引发SQL注入的因素，从应用的设计和架构到开发人员行为以
及在构建应用的过程中使用的编码风格。我们讨论了当前流行的多层（n层）Web应用架构中通
常包含的带数据库的存储层，是如何与其他层产生的数据库查询（通常包含某些用户提供的信
息）进行交互的。我们还讨论了动态字符串构造（也称动态SQL）以及将SQL查询组合成一个字
符串并与用户提供的输入相连的操作。该操作会引发SQL注入，因为攻击者可以修改SQL查
询的逻辑和结构，进面执行完全违背开发人员初衷的数据库命令。
我们将在后面的章节中进一步讨论SQL注入，不仅学习SQL注入的发现和区分（第2章和
8章和第9章）。最后在第10章，我们会给出很多方使的参考资源、建议和备忘单以帮助读者
快速找到需要的信息。
您应该反复阅读并实践本章的例子，这样才能巩固对SQL注入概念及其产生过程的理解。
掌握这些知识后，才算踏上了在现实中寻找、利用并修复SQL注入的漫漫征程。
1.6快速解决方案
1.理解Web应用的工作原理
·Web应用是一种使用Web浏览器并通过Intemet或内部网访问的程序。它同时还是
种使用浏览器所支持语言（如HTML、JavaScript、Java等）编写的计算机软件程序，借
助普通的Web浏览器来呈现应用程序的可执行文件。
18
---
## Page 33
第1章什么是SQL注入
·基本的数据库驱动的动态Web应用通常包含一个后台数据库和很多包含服务器端脚本
的Web页面，这些脚本则是由可从数据库（数据库的选择依不同的交互而定）中提取特
定信息的编程语言编写而成的。
·基本的数据库驱动的动态Web应用通常包含三层：表示层（Wcb浏览器或呈现引擎)、
逻辑层（如 C#、ASP、NET、PHP、JSP等编程语言）和存储层(如 SQL Server、MySQL
Oracle 等数据库)。Web 浏览器（表示层，Intemct Explorer、Safari、Firefox等）向中间层
(逻辑层）发送请求，中间层通过查询、更新数据库（存储层）来响应该请求。
2.理解SQL注入
·SQL注入是一种将SQL代码插入或添加到应用（用户）的输入参数中，之后再将这些参
数传递给后台的SQL服务器加以解析并执行的攻击。
·SQL注入的主要方式是直接将代码插入到参数中，这些参数会被置入SQL命令中加以
执行。
·攻击者能够修改SQL语句时，该进程将与执行命令的组件（如数据库服务器、应用服
务器或Web服务器）拥有相同的权限，该权限通常级别很高。
3.理解SQL注入的产生过程
·如果Web应用开发人员无法确保在将从Web表单、cookie、输入参数等收到的值传递
给SQL查询（该查询在数据库服务器上执行）之前已经对其进行过验证，通常就会出现
SQL注入漏洞。
·如果攻击者能够控制发送给SQL查询的输入，并且能操纵该输入将其解析为代码而非
数据，那么攻击者就可能有能力在后台数据库上执行该代码。
·如果应用开发人员无法彻底理解与他们交互的基础数据库或者无法完全理解并意识到
所开发代码潜在的安全问题，那么他们编写的应用通常是不安全的，并且容易受到SQL
注入攻击。
1.7常见问题解答
问题：什么是SQL注入？
解答：SQL注入是一种通过操纵输入来修改后台SQL语句以达到利用代码进行攻击目的
的技术。
问题：是否所有数据库都易受到SQL注入攻击？
解答：根据情况的不同，大多数数据库都易受到攻击。
问题：SQL注入漏洞有哪些影响？
解答：这取决于很多因素。例如，攻击者可潜在地操纵数据库中的数据，提取更多应用允
许范围之外的数据，并可能在数据库服务器上执行操作系统命令。
9
---
## Page 34
SQL注入攻击与防御（第2版）
问题：SQL注入是一种薪漏洞吗？
解答：不是。自SQL数据库首次连接至Web应用起，SQL注入就可能已经存在。但它首
次引起公众注意是在1998年的圣诞节。
问题：如果我向一个Web站点插入单引号（），真的会遭到起诉么？
解答：是的，除非您这样做有合法的理由（例如，您的名字中包含一个单引号，如O'Neil)。
问题：如果某人故意在输入中添加了一个单引号字符，代码会怎样执行？
解答：SQL数据库将单引号字符解析成代码与数据间的分界线：假定单引号外面的内容均
为需要运行的代码，而用单引号括起来的内容均为数据。
问题：如果Web站点禁止输入单引号字符，是否能避免SQL注入？
解答：不能。可使用很多方法对单引号字符进行编码，这样就能将它作为输入来接收。有
些SQL注入漏洞不需要使用该字符。此外，单引号字符并不是唯一可用于SQL注
入的字符，攻击者还可以使用很多其他字符，比如双竖线（D和双引号字符（）等。
问题：如果Web站点不使用GET方法，是否能避免SQL注入？
解答：不能。POST参数同样容易被操纵。
问题：我的应用是用PHP/ASP/Perl/.NET/Java等语言编写的。我选择的语言是否能避免
SQL注入？
解答：不能。任何编程语言，只要在将输入传递给动态创建的SQL语句之前未经过验证，
就容易潜在地受到攻击，除非使用参数化查询和绑定变量。
20
---
## Page 35
第2章
SQL注入测试
本章目标
·寻找SQL注入
·确认SQL注入
·自动发现SQL注入
2.1概述
一般通过远程测试判断是否存在SQL注入（例如，通过Intermet并作为应用渗透测试的一
部分），所以通常没有机会通过查看源代码来复查注入的查询的结构。因此常常需要通过推理
来进行大量测试，即“如果看到这样的测试结果，那么在后台可能执行了这样的操作”。
本章从使用浏览器与Web应用进行交互这一视角来讨论发现SQL注入问题时所涉及的技
术。我们将阐述如何证实发现的问题是SQL注入而非其他问题（如XML注入)。最后介绍如何
将SQL注入的发现过程自动化以提高检测简单SQL注入的效率。
2.2寻找SQL注入
SQL注入可以出现在任何从系统或用户接收数据输入的前端应用程序中，这些应用程序之
后被用于访问数据库服务器。本节将重点关注最常见的Web环境。最开始我们只使用一种Web
浏览器。
在Web环境中，Web浏览器是客户端，它扮演向用户请求数据并将数据发送到远程服务
器的前端角色。远程服务器使用提交的数据创建SQL查询。该阶段的主要目标是识别服务器
响应中的异常并确定是否是由SQL注入漏洞产生的。随后，将确定在服务器端运行的SQL查
询的类型（即SELECT、UPDATE、INSERT或DELETE)，以及将攻击代码注入查询中的位置（比
如FROM子句、WHERE子句或者ORDERBY子句等位置)。
虽然本章包含很多示例和场景，但我们仍然无法介绍所有会被发现的SQL注入。可以这
样来理解：有人教你怎样将两个数相加，但没有必要（或尝试着）将所有可能的数都相加，只要
知道怎样将两个数相加，就可以将该原理应用到所有涉及加法的场合。SQL注入也是一样的道
理。我们需要理解怎样做以及为什么这样做，剩下的就是实践问题。
我们很难访问到应用的源代码，因此需要借助推理进行测试。要理解并进行攻击，拥有一
种分析型思维模式非常重要。理解服务器响应时需要非常细心，这样才能了解服务器端正在发
生的情况。
---
## Page 36
SQL注入攻击与防御（第2版）
借助推理进行测试比想象中要容易。它只是向服务器发送请求，然后检测响应中的异常。
读者可能认为寻找SQL注入漏润是向服务器发送随机值，但在理解了攻击逻辑和基本原理之
后，您将会发现该过程简单面有趣。
2.2.1借助推理进行测试
识别SQL注入漏洞有一种简单的规则：通过发送意外数据来触发异常。该规则包括如下
含义：
·识别Web应用上所有的数据输入。
·了解哪种类型的请求会触发异常。
·检测服务器响应中的异常。
就是这么简单。首先要清楚Web浏览器如何向Web服务器发送请求。不同的应用会有不