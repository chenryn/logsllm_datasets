Time
22 years
27 years
8 years
99 years
107 years
34 years
1400 years
1700 years
540 years
Complexity
Cost
261.2
261.6
261.6
263.4
263.5
263.6
267.2
267.6
267.6
US$ 11k
US$ 45k
US$ 720k
Table 2: Complexity of the attacks against SHA-1 reported in this paper on several GPUs. The complexity is
given in SHA-1 equivalents (using hashcat benchmarks). For the cost evaluation we assume that one GTX 1060
GPU can be rented for a price of US$ 35/month (the two phases of the attack are easily parallelisable): https:
//web.archive.org/web/20191229164814/https://www.gpuserversrental.com/
To attack MD5k SHA-1, we use the multicollision attack of Joux [9] with three phases: (i) a CP collision on SHA-1, (ii)
64 collisions on SHA-1, and (iii) 264 evaluations of MD5.
Ki
fi(B, C, D)
step i
0 ≤ i < 20 (B ∧ C)⊕(B ∧ D)
0x5a827999
20 ≤ i < 40 B ⊕ C ⊕ D
0x6ed6eba1
40 ≤ i < 60 (B ∧ C)⊕(B ∧ D)⊕(C ∧ D) 0x8fabbcdc
60 ≤ i < 80 B ⊕ C ⊕ D
0xca62c1d6
Table 3: Boolean functions and constants of SHA-1
are computed as follows:
(
Wi =
Mi,
(Wi−3 ⊕ Wi−8 ⊕ Wi−14 ⊕ Wi−16) ≪ 1,
for 0 ≤ i ≤ 15
for 16 ≤ i ≤ 79
In the rest of this article, we will use the notation X[j]
to refer to bit j of word X.
2.2 Previous Works
We recall here the general state-of-the-art collision search
strategies that we will use for our CP collision attack.
Readers only interested by the applications of our CP
collision attack can skip up to Section 6. In the rest of
the article, unless stated otherwise, diﬀerence will refer
to the XOR diﬀerence between two bits or the bitwise
XOR diﬀerence between two words.
2.2.1 Diﬀerential Trails
The ﬁrst results on SHA-0 (predecessor of SHA-1) and
SHA-1 were diﬀerential attacks using trails built by lin-
earizing the compression function (we call these linear
paths, in opposition to non-linear paths which have been
built without linearization), assuming that modular addi-
tions and boolean functions fi in the SHA-1 compression
function are behaving as an XOR. More precisely, the
m1
hδMi
L
hδIi
hδOi
h0i
IV
N L1
h0i
m2
h−δMi
L
hδOi
N L2
hδOi h−δIi h−δOi
h0i
H
Figure 1: 2-block collision attack using a linear trail
δM(cid:32) δO and two non-linear trails 0 (cid:32) δI and δO (cid:32) −δI
δI
in the ﬁrst 10∼15 steps. Green values between bracket
represent diﬀerences in the state.
32-bit modular addition is replaced by a 32-bit bitwise
XOR and the fi functions are replaced by 3-input XOR
operations. The trails are generated with a succession
of so-called local collisions: small message disturbances
whose inﬂuence is immediately corrected with other mes-
sage diﬀerences inserted in the subsequent SHA-1 steps,
taking advantage of the linear message expansion.
In 2005, the seminal work of Wang et al. [29] showed
that non-linear diﬀerential trails (trails generated without
linearizing the SHA-1 step function) can be used for the
ﬁrst 10∼15 steps of the compression function, connecting
any incoming input diﬀerence to any ﬁxed diﬀerence δI
at step 10∼15. Due to the Davies-Meyer construction
used in SHA-1, this gives a collision attack with two
successive blocks, using the same diﬀerential trail from
step 10∼15 to 80 (just using opposite signs: 0 δM(cid:32) δO and
δO
−δM(cid:32) −δO), as seen in Figure 1.
2.2.2 Improving the Eﬃciency of Collision
Search
Once the diﬀerential trail is set the attacker must ﬁnd a
pair of messages that follows it. A simple strategy uses an
1842    29th USENIX Security Symposium
USENIX Association
early-abort tree exploration for the 16 ﬁrst steps, taking
advantage of the degrees of freedom in the message, while
the remaining steps are probabilistic. More advanced
amortization methods (neutral bits [3], boomerangs [10,
11] or message modiﬁcation [29]) are used to control more
than 16 steps. Because of this amortization, usually the
ﬁrst 20 or so steps (which hold with a low probability
because of the non-linear trail) do not contribute to the
ﬁnal complexity of the attack.
Neutral bits were ﬁrst introduced for the cryptanal-
ysis of SHA-0 [2,3]. The idea is to ﬁnd a small message
modiﬁcation (one or a few bits), that does not interact
with necessary conditions in the diﬀerential path before
a certain step x. Once a message pair following the dif-
ferential path until step x is found, one can get another
pair valid until step x by applying the modiﬁcation. The
probability that a modiﬁcation is neutral until a step x
can be pre-analysed before running the attack. A key ob-
servation is that any combination of two of more neutral
bits until step x is likely to also be neutral until step x.
Boomerangs [10] or tunnels [11] are very similar
amortization tools to neutral bits. Basically, they can
be seen as neutral bits that are planned in advance.
A perturbation built from one or a few local collisions
(or relaxed versions) is neutral to the diﬀerential path
after a few steps with a certain probability, but extra
conditions are forced in the internal state and message to
increase this probability. Boomerangs are generally more
powerful than neutral bits (they can reach later steps
than classical neutral bits), but consume more degrees
of freedom. For this reason, only a few of them can be
used, but their amortization gain is almost a factor 2.
Note that a lot of details have to be taken into ac-
count when using neutral bits or boomerangs, as many
equations between internal state bits and message bits
must be fulﬁlled in order for the diﬀerential path to be
valid. Thus, they can only be placed at very particular
bit positions and steps.
2.2.3 Chosen-preﬁx Collision Attacks
Chosen-preﬁx collision attacks are much harder than
identical-preﬁx attacks because they have to start from
a random diﬀerence in the internal state. To alleviate this
diﬃculty, the ﬁrst chosen-preﬁx collision attack (demon-
strated on MD5 [25]) introduced a birthday search phase,
processing random message blocks until the chaining
variable diﬀerence δ belongs to a large predetermined
set S. The set S contains diﬀerences that can be slowly
erased by a succession of near-collision blocks, eventu-
ally leading to a collision. Due to the birthday paradox,
complexitypπ ·2n/|S|.
it is possible to reach a diﬀerence in S with birthday
This two-phase strategy (see Figure 2) was ﬁrst ap-
plied to SHA-1 in [22], for a cost of 277.1 hash calls. The
improvement compared to the generic 280 attack is not
very large, due to the diﬃculty for an attacker to build a
large set of diﬀerences that can be erased eﬃciently with
a near-collision block. In [22] a set S of 192 allowable
diﬀerences was used, corresponding to diﬀerences that
can be reached with a single near-collision block, using a
ﬁxed diﬀerential trail, varying the signs of the diﬀerences,
and letting some uncontrolled diﬀerences spread during
the very last steps.
+ ··· + δ
δ = −(cid:0)δ
(cid:1), where each δ
This was improved in [12] by increasing the size of
the set S. First the set of possible diﬀerences that can
be reached eﬃciently with a near-collision block was
increased to 8768 elements. Another crucial improve-
ment from [12] is the use of a multi-block strategy for
SHA-1 that signiﬁcantly increases the size of the set
S: it contains diﬀerences δ that can be decomposed as
can be
reached as the output of a diﬀerential trail. Therefore,
the attacker just has to ﬁnd near-collision blocks with
, where each near-collision
output diﬀerences δ
block will cancel one of the diﬀerences δ
composing
δ. In particular, a clustering eﬀect appears with this
multi-block strategy, which can be leveraged by the at-
tacker to select dynamically the allowable diﬀerences at
the output of each successive block, to further reduce
the attack complexity. This resulted in an estimated CP
collision search complexity in the range of 266.9 to 269.4
hash evaluations, surprisingly not much greater than that
of ﬁnding a simple collision.
(1)
O , . . . , δ
(r)
O
(i)
O
(1)
O
+ δ
(2)
O
(r)
O
(i)
O
3 Improving SHA-1 Collision Attack
Our ﬁrst contribution is an improvement of the colli-
sion attack from Eurocrypt 2013 [22] and its GPU im-
plementation from Crypto 2017 [23]. Through better
use of degrees of freedom (message modiﬁcations and
boomerangs) and code improvements, we gained a factor
between 8 and 10 (depending on GPU architecture) on
the time needed to ﬁnd a conforming block.
Since this part of our work is very technical, we only
give an overview of our results in this section. Technical
details can be found in the full version of the paper [13]
and the corresponding code is available at https://
github.com/SHA-mbles/sha1-cp.
3.1 Analysis of Previous Works
First, we observed some diﬀerences between the theo-
retical analysis of [22] and the practical implementation
USENIX Association
29th USENIX Security Symposium    1843
P/P 0
h0i
IV
hδRi
cv
u
S
m1hδ
(1)
M i
hδi NL1
L
hδ
(1)
I ihδ
(1)
O i
δ ∈ S
···
mrhδ
(r)
M i
NLr
L
hδ
(r)
I ihδ
(r)
O i
hδ+P
(i)
O i
iδ
H
h=0i
δ = −(cid:16)
Figure 2: High-level view of a chosen-preﬁx collision attack. We assume that diﬀerences δ ∈ S can be decomposed as
can be reached as the output of a diﬀerential trail.
(1)
O
δ
+ δ
(2)
O
+···+ δ
(r)
O
(cid:17), where each δ
(i)
O
of [23]. One of the boomerangs (on bit 6 of M6) con-
tradicts one of the conditions used to maximize the
probability of the path. Using this boomerang still im-
proves the attack, because the gain in eﬃciency is larger
that the loss in probability, but this aﬀect the complex-
ity evaluation. Similarly, one of the neutral bits used in
the GPU code (on bit 11 of M13) contradicts another
condition in the diﬀerential path, leading to an increase
in complexity of a factor 20.2.
In our analysis, we assume that the neutral bit on bit
11 of M13 is not used, and that the boomerang on bit 6
of M6 is only used for the last near-collision block, where
the speed-up is most noticeable, and we have enough
degrees of freedom to include all the boomerangs without
diﬃculty. Therefore we can estimate more accurately
the complexity of the previous CP attack [12] as 267.1
SHA-1 computations, instead of the range of 266.9 to 269.4
reported previously.
3.2 Additional Boomerangs
We found some additional boomerangs that can be used
to speed-up the attack, on bits 4, 5, and 6 of M11. Those
boomerangs are not used in previous attacks because
they interact badly with conditions of the diﬀerential
trail, but this can be ﬁxed by changing the last correction
of the boomerangs to be a modular addition correction
instead of an XOR correction.
More precisely, boomerangs are based on local colli-
sions: an initial message diﬀerence introduces a diﬀerence
in the state and another message diﬀerence cancels the
state diﬀerence at a later step. In previous works, both
message diﬀerences aﬀect a single bit, so that they can be
considered either as an XOR diﬀerence or as a modular
diﬀerence. In this work, we only enforce a ﬁxed modular
diﬀerence for some boomerangs; depending on the value
of the initial message, this diﬀerence will aﬀect one or
several bits (due to carries). Therefore, we can relax some