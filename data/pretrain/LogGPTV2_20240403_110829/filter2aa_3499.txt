# The Evolution of Android App Packing and Unpacking Techniques
## This Is Not Going to End
### Yajin Zhou
#### HITCON2016

### About Me
- Earned a Ph.D. in Computer Science from North Carolina State University.
- Research primarily focuses on smartphone and system security.
- Currently involved with the C0RE Team.
- For more information, visit: [http://yajin.org](http://yajin.org)

---

### Agenda
1. Why app packing services are becoming popular.
2. Main app packing and unpacking techniques.
3. New trends.

---

### App Repackaging
- **Statistics**: Out of 10,305 popular apps, 954,986 repackaged apps were found.
  - *Data Source*: [Link]

### Consequences of App Repackaging
- **Developers**
- **Users**

### How Easy Is It to Repackage an App?
- **Video Demo**

---

### App Packing Service Providers
- **Free Services**

### Double-Edged Sword
- **Packing Services**:
  - **Bad Actors**: Malware authors.
    - Makes it harder to repackage popular apps.
  - **Good Actors**: App market maintainers, security researchers.
    - Raises the bar for dynamic analysis.

### In Reality
- **App packing services are often abused by bad actors.**
  - *Data Source*: [Link]

---

### Main Types of App Packing Techniques
1. **Static**:
   - **Purpose**: Cheat static analysis tools.
2. **Dynamic**:
   - **Memory Dex Loading**: Directly load encrypted dex files into memory and execute.
   - **Anti-Analysis**: Increase the difficulty for dynamic analysis.

### Main Types of App Unpacking Techniques
1. **Static**:
   - **Reverse Engineer the Encryption Algorithm**:
     - **Pros**: One method to handle all samples protected by one packer.
     - **Cons**: Challenging, as the encryption algorithm is often in native code and frequently changes.
2. **Dynamic**:
   - **Memory Dump**:
     - **Basic Idea**: Unencrypted bytecode will eventually be in memory.
     - **Limitation**: Lacks support for self-modifying and JIT-compiled bytecode.

### App Packing Techniques: Static
- **Manifest Cheating**:
  - **Manifest File**: Defines package name, permissions, components, etc.
  - **Parsing**: Attributes are translated into IDs.
  - **Inserting an ID for an undefined Java class**:
    - **aapt**: Ignores this.
    - **apktool**: Honors this, leading to crashes in repackaged apps due to unimplemented Java classes.
- **Fake Encryption**:
  - **APK File**: A normal zip file.
  - **Set Encryption Flag to True**: Old Android systems do not check this flag, but static analysis tools do.
- **Bytecode Obfuscation**:
  - **Depends on Disassembly Algorithm**:
    - Linear
    - Recursive
- **(Long) File-Name Tricks**:
  - **Limited Length of File Names**.

### Overview
- **Pros**:
  - Easy to implement.
  - Better compatibility.
  - Low performance overhead.
- **Cons**:
  - Easy to bypass.
  - Small tricks, not a systematic way to protect the app.

### App Packing Techniques: Dynamic
- **Background**:
  - **Dex Header**
  - **class_def**
  - **Original Dex File Embedded in OAT File**

- **Basic Idea of App Packing**:
  - **Original Dex Code** → **Packer SO** → **Encrypted Dex Code** → **Injected Application** → **Load** → **DVM** → **Decrypted Dex Code** → **Decrypt** → **Load Dex** → **Meta Data** → **from Memory**

- **Dalvik**:
  - **BasicClassLoader** → **PathList** → **DexElements** → **DexFile** → **Memory Loaded DexFile Structure**

- **ART**:
  - **OAT File Execution in Interpreter Mode**: Performance loss.
  - **Propose I: Run the App in Interpreter Mode**:
    - Create an empty dex file (with all classes but empty methods) and the corresponding oat file.
    - Decrypt real methods and make up the empty method structure in memory.
  - **Propose II: Encrypt the Generated OAT File**:
    - Hook the dex2oat tool to encrypt the oat file (LD_PRELOAD).
    - OAT memory loading: Android fragmentation (Android L/M, custom ROMs).

- **Protect the Packer Itself**:
  - **Packer Format**: SO library.
  - **Tools**: o-LLVM, UPX, init functions, custom SO loader, VMP engine.

### App Unpacking Techniques: Static
- **Understand the Encryption/Decryption Logic of the Packer**:
  - **Pros**: One effort to handle all apps with one packer.
  - **Cons**: Packer (VMP engine), encryption method/key continuously changing.
  - **Efficiency**: If you have an insider.

### App Unpacking Techniques: Dynamic
- **Key Vulnerable Point**:
  - **Dalvik VM**: Executes unencrypted dex code.
  - **Requires Integrity of Meta Data**.

- **Runtime Memory State**:
  - **DexFile View** vs. **Dalvik View**.

- **Basic Idea of App Unpacking**:
  - **Locate the Dex File in Memory and Dump**:
    - **How**: Locate "dex. 035".
    - **When**: Hook key functions (mmap, strcmp, etc.).
    - **Countermeasure**: Corrupt the header, inline key functions.

- **Dump Memory and Reconstruct Dex File**:
  - **Without Relying on Dex Header**: DexHunter, AppSpear.
  - **How**: Modify libdvm, dump memory, reconstruct dex.

### Countermeasures
- **Incremental Unpacking**:
  - **When and Where to Refill Instructions?**

- **Anti-Disassembly**:
  - **Change the Value of debug_info_off**.

- **Anti-Ptrace/Debug**:
  - **Check Files**: /proc/$pid/status, etc.
  - **Check Process Name**.
  - **SIGTRAP**.
  - **Multi-Process**.
  - **Inotify**.
  - **Hook Read/Write APIs**.

### New Trends
- **Dex2Native**:
  - **Dex Code Dumping**: Can be dumped from memory (as long as Dalvik is used).
  - **Recovery**: Dex code can be recovered.
  - **Native Code**: Much harder to understand.

- **Hide Control Flow**:
  - **Dispatcher (JNI)**.

- **Completely Convert Bytecode**:
  - **Maintain Semantics of Bytecode**:
    - **Original Dex** → **Translated Bytecode** → **Interpreter (JNI)** → **Mapping Table** → **Convert** → **Load** → **Interpret** → **Further Protected by VMP**.

- **Deep Coupling**:
  - **Put Some App Logic into the Packer**:
    - Dumped dex cannot be repackaged without the packer.
    - Packer checks the integrity of the dex code.

- **From Unpacking to Repackaging**:
  - **Load the Packed App Using Similar Packing Technique**:
    - Matrix, DroidPlugin.

- **Reliably Repackage the Packed App**:
  - **Packer SO** → **Injected Application** → **Encrypted Dex SO** → **Introspect**.

---

### Thanks
- **Yajin Zhou**
- **HITCON2016**