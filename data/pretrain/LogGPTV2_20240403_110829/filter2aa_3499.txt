THE EVOLUTION OF ANDROID APP PACKING 
AND UNPACKING TECHNIQUES
THIS IS NOT GOING TO END
YAJIN ZHOU
HITCON2016
ABOUT ME
▸ Earned P.h.D. in Computer Science from NC State 
University 
▸ Research mainly focuses on smartphone and system 
security 
▸ Now involving in C0RE Team 
▸ More information: http://yajin.org
2
HITCON2016
AGENDA
▸ Why app packing services are becoming popular 
▸ The main app packing/unpacking techniques 
▸  New trends
3
HITCON2016
APP REPACKAGING
4
0
27.5
55
82.5
110
SOFTWARE
GAME
▸ Given10,305 popular 
apps, 954,986 
repackaged apps are 
found*
*Datasource Link
HITCON2016
THE CONSEQUENCES OF APP REPACKAGING
▸ Developers 
▸ Users
5
How easily to repackage an app? 
Video Demo
HITCON2016
APP PACKING SERVICE PROVIDERS
7
FREE SERVICE
HITCON2016
DOUBLE-EDGED SWORD
▸ Packing services create problem for both good and bad 
guys 
▸ Bad guys: malware authors, () 
▸ hard to repackage popular apps 
▸ Good guys: app markets maintainers, security 
researchers(??)  …
8
HITCON2016
IN REALITY
▸ App packing services are abused by bad guys
9
*Datasource Link
HITCON2016
MAIN TYPES OF APP PACKING TECHNIQUES
▸ Static: cheat statical analysis tools 
▸ Dynamic 
▸ Memory dex loading: directly load encrypted dex ﬁle 
into memory and execute 
▸ Anti-analysis: raise the bar for dynamic analysis
10
HITCON2016
MAIN TYPES OF APP UNPACKING TECHNIQUES
▸ Static: reverse engineer the encryption algorithm 
▸ Pros: one method to kill all samples — protected by one 
packer  
▸ Cons: hard — usually the encryption algorithm is in the 
native code, and continuously changing
11
HITCON2016
MAIN TYPES OF APP UNPACKING TECHNIQUES
▸ Dynamic: memory dump 
▸ Basic idea: the unencrypted bytecode will be eventually 
in memory 
▸ Lack of self-modifying (and JITed bytecode) support
12
ENCRYPTED 
CODE
DVM
DECRYPTED 
CODE
PACKER
META 
DATA
App Packing Techniques: Static
HITCON2016
MANIFEST CHEATING
▸ Manifest ﬁle: deﬁne package name, permissions, 
components … 
▸ When parsed, attributes are translated into ids 
▸ If we insert an id to represent an undeﬁned Java class 
▸ aapt: ignore this 
▸ apktool: honor this-> app repackaged by apktool will 
crash due to unimplemented Java classes
14
HITCON2016
FAKE ENCRYPTION
▸ Apk ﬁle is  indeed a normal zip ﬁle 
▸ Set the encryption ﬂag to true 
▸ Old Android system does NOT check this ﬂag, but static 
analyst tool does
15
HITCON2016
BYTECODE-OBFUSCATION
▸ Depends on the 
disassembly 
algorithm 
▸ Linear  
▸ Recursive
16
Image source: DexLabs
HITCON2016
(LONG)FILE-NAME TRICKS
▸ Limited length of a ﬁle name
17
HITCON2016
OVERVIEW
▸ Pros: easy to implement, better compatibility, low 
performance overhead 
▸ Cons: easy to be bypassed,  
▸ Small tricks, not a systematic way to protect app   
18
App Packing Techniques: Dynamic
HITCON2016
BACKGROUND
▸ Dex Header
20
HITCON2016
BACKGROUND
▸ class_def
21
HITCON2016
BACKGROUND
▸ Original dex ﬁle is embedded 
in the OAT ﬁle
22
HITCON2016
THE BASIC IDEA OF APP PACKING
23
ORIGINAL 
DEX CODE
PACKER SO
ENCRYPTED  
DEX CODE
Injected Application
load
DVM
DECRYPTED 
DEX CODE
decrypt
load dex
META 
DATA
from memory
HITCON2016
APP PACKING: DALVIK 
24
BASICLASSLOADER
PATHLIST
DEXELEMENTS
DEXFILE
DEXFILE
…
MEMORY LOADED 
DEXFILE STRUCTURE
HITCON2016
APP PACKING: ART 
▸ OAT ﬁle can still be executed in the interpreter mode — 
cost: performance loss 
▸ The embedded dex ﬁle 
▸ Dex2oat is responsible for translating dex ﬁle into oat ﬁle 
when the app is being installed
25
HITCON2016
APP PACKING: ART (CONTINUED)
▸ Propose I: run the app in the interpreter mode 
▸ How 
‣ Create an empty dex ﬁle (with all classes but empty 
methods — real methods are encrypted)  and the 
corresponding oat ﬁle will be created 
‣ Decrypt the real methods and make up the empty 
method structure in memory 
26
HITCON2016
APP PACKING: ART (CONTINUED)
▸ Propose II: Encrypt the generated oat ﬁle 
▸ How 
‣ Hook the dex2oat tool: encrypt the oat ﬁle 
(LD_PRELOAD) 
‣ oat memory loading:  Android fragmentation - Android 
L/M, custom ROMs 
27
HITCON2016
APP PACKER: PROTECT THE PACKER ITSELF
▸ Packer is usually in the format of so library 
▸ o-LLVM 
▸ upx 
▸ init functions 
▸ Based on custom so loader 
▸ VMP engine to protect key functions
28
App UNPacking Techniques: Static
HITCON2016
APP UNPACKING: STATIC
▸ Understand the encryption/decryption logic of the packer 
▸ Pros: one effort to kill all (apps with one packer) 
▸ Cons: so packer (VMP engine), encryption method/key 
is continuously changing  …    
▸ But it is efﬁcient if we have an insider
30
App UNPacking Techniques: Dynamic
HITCON2016
THE KEY VULNERABLE POINT OF APP PACKING
▸ Dalvik VM 
▸ executes unencrypted dex code 
▸ requires the integrity of some meta data
32
HITCON2016
RUNTIME MEMORY STATE
33
Dexﬁle View
Image source: AppSpear paper
Dalvik View
HITCON2016
APP UNPACKING 101
▸ Basic idea: locate the dex ﬁle in memory and dump 
▸ How: locate “dex. 035” 
▸ When: hook key functions (mmap, strcmp and etc…) 
▸ Countermeasure: corrupt the header, inline key functions
34
HITCON2016
APP UNPACKING 102
▸ Basic idea: dump the memory and reconstruct the dex ﬁle 
without relying on the dex header — DexHunter, and 
AppSpear 
▸ How: modify libdvm, dump memory, reconstruct dex
35
HITCON2016
APP UNPACKING 102: DEXHUNTER
36
Image source: DexHunter HitCon2015 slides
HITCON2016
APP UNPACKING 102: APPSPEAR
37
Image source: AppSpear paper
Countermeasures
HITCON2016
INCREMENTAL UNPACKING
▸ When and where to reﬁll these instructions?
39
HITCON2016
ANTI-DISASSEMBLY
▸ Change the value of debug_info_off
40
HITCON2016
ANTI-PTRACE/DEBUG
▸ Check ﬁles: /proc/$pid/status, etc … 
▸ Check process name 
▸ SIGTRAP 
▸ Multi-process  
▸ Inotify 
▸ Hook read/write APIs
41
New Trends
HITCON2016
DEX2NATIVE
▸ The dex code could be dumped from memory (as long as 
Dalvik is still used) 
▸ Dex code could be recovered 
▸ Native code is much harder to understand
43
HITCON2016
DEX2NATIVE: 101
▸ Hide the control ﬂow
44
A
B
C
A
B
C
DISPATCHER(
JNI)
DISPATCHER
(JNI)
DEAD CODE?
HITCON2016
DEX2NATIVE 102
▸ Completely convert the bytecode to another format of 
bytecode: how to maintain the semantics of the bytecode?
45
ORIGINAL 
DEX
TRANSLATED 
BYTECODE
INTERPRETER  
(JNI)
MAPPING 
TABLE
Convert
Load
Interpret
Further protected by VMP
HITCON2016
DEX2NATIVE 102
46
.class public Lcom/example/ApiTest/MyActivity; 
.method protected native onCreate(Landroid/os/Bundle;)V 
.end method
HITCON2016
DEEP COUPLING
▸ Put some app logic into the packer— the dumped dex 
cannot be repackaged without the packer 
▸ The packer checks the integrity of the dex code
47
PACKER SO  
(JNI)
ENCRYPTED 
DEX
FROM UNPACKING TO REPACKAGING
HITCON2016
HOW TO RELIABLY REPACKAGE THE PACKED APP
▸ Load the packed app using the similar packing technique: 
Matrix? 
▸ DroidPlugin
49
PACKER SO
Injected Application
ENCRYPTED 
DEX 
SO
Introspect
HITCON2016
THANKS
50