### Security Goals and Protocol Parameters

- **Matching Session Parameters:** If a client session and a server session share the same identifier (CID), then all other parameters in these sessions must match. These parameters include:
  - CID
  - Offer C
  - Mode S
  - Public Key C (pkC)
  - Public Key S (pkS)
  - Pre-Shared Key (psk)
  - Key C (kc)
  - Key S (ks)

- **Unique Channel Identifier (CID):** This ensures that each session is uniquely identifiable, which is crucial for preventing replay attacks and ensuring secure session resumption or renegotiation.

- **Replay Prevention:** Any application data sent over a session with a specific CID can be accepted by the peer at most once. This prevents an attacker from reusing old messages to disrupt the session.

### Security Goals and TLS

These security goals encompass most of the standard security objectives for secure channel protocols such as TLS. For example:

- **Secrecy for Application Data:** This implicitly requires that the authenticated key exchange must generate secret keys.
- **Authentication:** This includes the requirement that the client and server must have matching sessions and agree on each other's identities and the inputs and outputs of the negotiation. This prevents impersonation and man-in-the-middle downgrade attacks.

### Unique Channel Identifier

The requirement for a unique channel identifier is somewhat unusual but essential. It allows multiple TLS sessions to be securely composed, such as via session resumption or renegotiation, without exposing them to credential forwarding attacks like the Triple Handshake [15]. The channel identifier can be a session key or a value derived from it, but it is more commonly a public value derived from session data contributed by both the client and server [17].

### Symbolic vs. Computational Models

Before modeling and verifying TLS 1.3 against the security goals, we need to specify our protocol execution model. There are two primary styles for modeling protocols:

- **Symbolic Models:** Developed by the security protocol verification community for ease of automated analysis. Tools like ProVerif [25, 27] use symbolic models where messages are abstract terms, and processes can generate new nonces and keys treated as atomic opaque terms. The attacker is modeled as a process that can read and write messages on public channels and manipulate them symbolically.
- **Computational Models:** Preferred by cryptographers, who often do their proofs by hand. Tools like CryptoVerif [24] use computational models where messages are concrete bitstrings, and freshly generated nonces and keys are randomly sampled bitstrings. The attacker is a probabilistic polynomial-time process running in parallel.

### Authentication and Secrecy

- **Authentication Goals:** In both ProVerif and CryptoVerif, authentication is written as correspondences between events. For example, if the client triggers a certain event, the server must have triggered a matching event in the past.
- **Secrecy Goals:**
  - **ProVerif:** Asks whether the attacker can compute a secret.
  - **CryptoVerif:** Asks whether the attacker can distinguish a secret from a random bitstring.

### Analysis Techniques

- **ProVerif:** Searches for a protocol trace that violates the security goal. It may return that the security goal is true, false with a counterexample, or that it is unable to conclude.
- **CryptoVerif:** Tries to construct a cryptographic proof that the protocol is equivalent (with high probability) to a trivially secure protocol. It is semi-automated and requires human guidance for non-trivial protocols.

### Realistic Threat Model for TLS

We analyze TLS 1.3 against a rich threat model that includes both classic protocol adversaries and new ones specific to multi-mode protocols like TLS. The attacker can use the following attack vectors:

- **Network Adversary:** Can intercept, modify, and send all messages on public network channels.
- **Compromised Principals:** Can compromise any client or server principal P by asking for its long-term secrets, such as private keys (skP) or pre-shared keys (psk). Compromise events are marked, and post-session compromises are also tracked.
- **Weak Long-term Keys:** Treats weak keys the same as compromised keys and issues a general event: WeakOrCompromised(pkP).
- **RSA Decryption Oracles:** Assumes RSA PKCS#1 v1.5 encryption is vulnerable to padding oracle attacks. Distinguishes between strong and weak RSA key exchanges.
- **Weak Difﬁe-Hellman Groups:** Allows servers to choose between strong and weak Difﬁe-Hellman groups, and marks the corresponding key exchange mode. Assumes weak groups have size 1, leading to a distinguished element BadElement.
- **Weak Hash Functions:** Models both strong and weak hash functions. Weak hash functions are treated as point functions that map all inputs to a constant value: Collision.
- **Weak Authenticated Encryption:** Allows both weak and strong authenticated encryption schemes. For weak schemes, provides the adversary with a decryption oracle.

### Verifying TLS 1.2 in ProVerif

We encode our threat model as a generic ProVerif crypto library and use it to symbolically analyze a model of TLS 1.2. Our model includes clients and servers that support both RSA and Difﬁe-Hellman key exchanges and use both weak and strong cryptography. We assume unauthenticated clients and write ProVerif processes for TLS 1.2 clients and servers that exchange messages according to the protocol standard.

### Security Properties of TLS 1.2

- **TLS 1.2 Secrecy:** A message m sent by an honest client in a session cid to a server S cannot be known to the adversary unless one of the following conditions holds:
  1. The server’s public key is weak or compromised.
  2. The session uses a weak Difﬁe-Hellman group.
  3. The session uses weak authenticated encryption.
  4. The server uses weak RSA decryption with the same public key.
  5. The server uses a weak hash function for signing with the same public key.

- **TLS 1.2 Authenticity & Replay Protection:** Every message m accepted by an honest client in a session cid with some server S corresponds to a unique message sent by S on a matching session, unless one of the conditions (1)-(5) above holds.

### Verification Effort

The work of verifying TLS 1.2 can be divided into three tasks:

1. **Modeling the Threat Model:** Created a 400-line ProVerif library that can be reused for other protocols, including TLS 1.3.
2. **Modeling the TLS 1.2 Protocol:** Wrote about 200 lines of ProVerif code to model the TLS 1.2 protocol.
3. **Writing Queries:** Wrote about 50 lines of queries to validate the model and prove the desired security goals.

### Example Protocol Flow

- **Client C:**
  - Long-term Keys: (skC, pkC)
  - ClientHello(nC, offer C[(G, gx), G])
  - Generates x and computes: es = kdf0
  - RetryRequest(G)
  - Generates x' and computes: es = kdf0
  - ClientHello(nC, offer C[G', gx'])

- **Server S:**
  - Long-term Keys: (skS, pkS)
  - Chooses parameters: mode S = (TLS1.3, DHE(G'), H(), enc())
  - log 1
  - ServerHello(nS, mode S[G', gy])
  - log 1

This structured and detailed approach ensures clarity, coherence, and professionalism in the text.