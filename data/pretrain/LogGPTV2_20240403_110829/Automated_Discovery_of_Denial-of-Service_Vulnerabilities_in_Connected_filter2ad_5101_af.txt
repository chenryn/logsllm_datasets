### Defense Against N1 and N2

**Solution 1** inherently prevents N1 and N2 by using local certificates. However, this solution can be circumvented if attackers are able to collect legitimately signed certificates with the desired hash values by sniffing CV network traffic. As shown in Table 7, if an attacker can gather over 12,000 different certificates, they can almost guarantee (>98% probability) that they will have a certificate ready to trigger a 3-byte hash collision, allowing them to launch N1 and N2 in real time. Collecting this many certificates is feasible, as the process can be done offline. Additionally, the collection process can be accelerated by actively broadcasting learning requests to surrounding vehicles, which will return certificates with the desired hash values. The attacker can also place multiple attack devices in different locations to parallelize the collection.

**Table 7: Number of Hash Values Needed for n-bit Hashes to Cause a Collision Probability p**

| Number of Bits (n) | Number of Hash Values (k) |
|--------------------|---------------------------|
| 24                 | 4823                      |
| 64                 | 5.069                     |
| 80                 | 1.2912                    |
| 256                | 4.0138                    |
| 512                | 1.3677                    |

**Solution 2** aims to increase the difficulty of causing a hash collision, which is the key enabler for N1 and N2. As indicated in Table 7, it becomes much more challenging for the attacker to compute or gather malicious learning responses. However, this approach increases the DSRC packet size, potentially degrading network performance, such as increasing latency. We have consulted with the protocol developers and confirmed that reducing the DSRC packet size was a design choice. Therefore, when implementing Solution 2, the new size of the truncated hash type must be carefully selected to balance security and protocol performance.

From the above discussion, neither Solution 1 nor Solution 2 can fully eliminate the attack possibilities for N1 and N2. To maximize the chance of preventing these attacks in practice, the best strategy would be to use both solutions in conjunction.

### Defense Against N3 and N4

**Solution 3** is proposed for N3 and N4, which thwarts both attacks by making it impossible to unicast malicious learning requests to block the P2PCD process. However, this solution may disrupt the designed usage of unicast-based learning requests. For example, as specified in IEEE 1609.0-2019 [36], CV applications decide whether to use unicast or broadcast when receiving advertised services. A systematic understanding of this trade-off requires surveying and quantifying the demands for unicast-based learning requests at the CV application level, which we leave for future work.

### Defense Against A3

**Solution 4** can prevent the attacker from triggering a split maneuver at arbitrary positions but cannot stop her from splitting succeeding platoon members. The certificate defined in IEEE 1609.2 [12, 32] provides a unique identity for each CV device. Safety-critical CV applications like PMP should always use unique and secure identities (e.g., certificates) rather than self-defined identities (e.g., depth number), which are easily spoofed. However, the attacker can still send a LEAVE_REQ to split at the succeeding vehicle and herself, which is a designed follower-leave behavior. The attacker can then rejoin the platoon and repeat the attack. To fully address A3, we may need to incorporate misbehavior detection [12]. For instance, a vehicle that frequently leaves and rejoins a platoon is highly suspicious. Designing effective misbehavior detection requires comprehensively characterizing malicious behaviors, which we leave for future work.

### Defense Against A4 and A15

**Solution 5** aims to eliminate wrong and inconsistent platoon information caused by A4 and A15. In centralized PMP, the platoon leader is responsible for passing platoon configuration data to the new leader when it leaves the platoon. The new leader can only accept information from the old leader because it does not store any platoon configuration data. The design goal of centralized PMP is to improve coordination efficiency and enhance privacy, as followers dynamically enter and exit the platoon [5]. However, this centralized design sacrifices security, as a malicious leader can provide incorrect platoon configuration data. To address A4 and A15, platoon members can maintain a local copy of platoon configurations. Additionally, RSUs can provide services to remotely assist platoon members in tracking platoon configurations and guarding PMP commands [1]. Since RSUs are often deployed and managed by trustworthy authorities, platoon members can rely on these infrastructures to correct wrong or inconsistent information.

### Defense Against A5-14

**Solution 6** is straightforward and proposed for all PMP block attacks. As previously mentioned, CV applications should design their own error recovery mechanisms. With such mechanisms, PMP should be able to recover from continuous packet loss. For example, PMP can define retransmission and timeout thresholds to avoid hanging at specific states. In addition to addressing communication failures, PMP should adjust the intra-platoon spacing between the "offline" member and trailing platoon members to avoid traffic collisions. If necessary, the platoon leader can dissolve the platoon and revert to ACC mode.

### Related Work

**CV Security Analysis:** Since the concept of VANET (i.e., the original idea of CV) has been around for over a decade, many studies have examined general threats to CV networks [4, 28, 29, 44, 55, 55, 73]. However, as discussed in ยง1, existing works generally suffer from three limitations: (1) reliance on manual inspection to identify potential threats [44, 55, 73] instead of automatic discovery, (2) focus on security properties such as integrity, confidentiality, and privacy rather than availability, and (3) focus on prior generations of protocols or conducted before the standardization of IEEE 1609 [4, 29, 44, 55, 73].

**Model Checking Security Protocols:** Model checking is a mature formal verification technique for finite state concurrent systems and has been applied to several complex network protocols [22, 26, 30, 48, 50]. These works aim to expose vulnerabilities in network protocols but do not consider quantitative assessments. CVAnalyzer can complete attack discovery and quantitative threat assessment without delving into implementation details. Thus, CVAnalyzer can help protocol designers evaluate the correctness of the protocol and understand the severity of identified attacks, guiding the design of mitigation solutions. This can significantly reduce the cost of fixing vulnerabilities, as all problems can be addressed at the early stage.

**Secure Membership Management:** For a wireless ad-hoc network, a secure membership management system is essential. Network nodes typically form a peer group to share data, and a group leader or trusted entity manages membership [49, 58, 76]. Wagner et al. [70] designed a decentralized blockchain-based system for platoon membership management, where each member maintains a local copy of the blockchain. However, this approach has scalability issues. Due to high mobility, the latest CV networks do not form different communication groups but use digital signatures (ECDSA) supported by a PKI system, SCMS [12], to secure communication. Any CV device with valid certificates can broadcast data to others. To manage membership, the recently deployed SCMS [12] introduces misbehavior detection to identify and revoke certificates of malicious or malfunctioning members. For our attacks, certificate revocation in existing SCMS cannot prevent P2PCD attacks but can mitigate PMP attacks. The learning response in N1 and N2 does not require signed certificates, so revocation cannot prevent these attacks. In N3 and N4, the attacker can generate new syntax-valid certificates for learning requests (SPDUs). Since vehicles cannot distinguish self-generated from unknown certificates, the learning request field will still be processed. Unless vehicles can always connect to the PKI (through RSU) to check the validity of unknown certificates, it is impossible to prevent the use of self-generated certificates in the current CV network stack. Communication with infrastructure may not always be possible due to deployment difficulties. If the PKI supports online certificate status checks, the impact of P2PCD attacks will diminish as infrastructure coverage increases.

### Conclusion

In this paper, we present CVAnalyzer, which leverages the attack discovery capability of a general model checker and the quantitative threat assessment of a probabilistic model checker to automate analysis. CVAnalyzer successfully detects 4 new DoS attacks in P2PCD and 15 attacks in PMP, and we construct practical exploits validated in a real-world testbed. We have reported 4 P2PCD attacks to the IEEE 1609 Working Group [35] and received confirmations. We discuss the fundamental reasons for these vulnerabilities and propose effective mitigation solutions.

### Future Work

In the future, we plan to extend CVAnalyzer to verify more security properties, such as unlinkability. Although we focus on availability in this paper, CVAnalyzer is general and can be extended to improve verification capabilities. Additionally, CVAnalyzer can support other CV protocols (e.g., SCMS [12]). We also aim to improve the usability of CVAnalyzer, such as introducing an intermediate representation for models that can be automatically converted into the modeling language used by different model checkers, eliminating the need to write the model twice for different checkers.

### Acknowledgments

We thank Yulong Cao, David Ke Hong, Yuru Shao, and the anonymous reviewers for their valuable feedback. This research was supported in part by an award from Mcity at the University of Michigan and by the National Science Foundation under grants CNS-1930041, CNS-1526455, CNS-1850533, and CNS-1929771.

### References

[1] A. Abdo, S. M. B. Malek, Z. Qian, Q. Zhu, M. Barth, and N. B. Abu-Ghazaleh. Application level attacks on connected vehicle protocols. In Proc. RAID, 2019.
[2] F. Ahmed-Zaid, F. Bai, S. Bai, C. Basnayake, B. Bellur, S. Brovold, G. Brown, L. Caminiti, et al. Vehicle safety communicationsโapplications (vsc-a) final report. Technical report, 2011.
[3] F. Ahmed-Zaid, F. Bai, S. Bai, C. Basnayake, B. Bellur, S. Brovold, G. Brown, L. Caminiti, et al. Vehicle Safety CommunicationsโApplications (VSC-A) Final Report: Appendix Volume 1 System Design and Objective Test. Technical report, 2011.
[4] F. Ahmed-Zaid, F. Bai, S. Bai, C. Basnayake, B. Bellur, S. Brovold, G. Brown, L. Caminiti, et al. Vehicle Safety CommunicationsโApplications (VSC-A) Final Report: Appendix Volume 3 Security. Technical report, 2011.
[5] M. Amoozadeh, H. Deng, C. Chuah, H. M. Zhang, and D. Ghosal. Platoon management with cooperative adaptive cruise control enabled by VANET. Vehicular Communications, 2015.
[6] K. R. Apt and D. Kozen. Limits for automatic verification of finite-state concurrent systems. Inf. Process. Lett., 1986.
[7] F. Bai and H. Krishnan. Reliability analysis of DSRC wireless communication for vehicle safety applications. In IEEE ITSC, 2006.
[8] D. A. Basin, C. Cremers, and C. A. Meadows. Model checking security protocols. In Handbook of Model Checking. 2018.
[9] D. A. Basin, J. Dreier, L. Hirschi, S. Radomirovic, R. Sasse, and V. Stettler. A formal analysis of 5G authentication. In Proc. ACM CCS, 2018.
[10] J. Bellardo and S. Savage. 802.11 denial-of-service attacks: Real vulnerabilities and practical solutions. In Proc USENIX Security, 2003.
[11] V. Bรฉnony. Hopper. https://www.hopperapp.com/, 2019.
[12] B. Brecht, D. Therriault, A. Weimerskirch, W. Whyte, V. Kumar, T. Hehn, and R. Goudy. A security credential management system for V2X communications. IEEE Trans. Intelligent Transportation Systems, 2018.
[13] S. Checkoway, D. McCoy, B. Kantor, D. Anderson, H. Shacham, S. Savage, K. Koscher, A. Czeskis, F. Roesner, and T. Kohno. Comprehensive experimental analyses of automotive attack surfaces. In Proc. USENIX Security, 2011.
[14] Q. A. Chen, Y. Yin, Y. Feng, Z. M. Mao, and H. X. Liu. Exposing congestion attack on emerging connected vehicle based traffic signal control. In Proc. NDSS, 2018.
[15] Q. A. Chen, Y. Yin, Y. Feng, Z. M. Mao, and H. X. Liu. Vulnerability of Traffic Control System Under Cyber-Attacks Using Falsified Data. In Transportation Research Board 2018 Annual Meeting (TRB), 2018.
[16] A. Cimatti, E. M. Clarke, E. Giunchiglia, F. Giunchiglia, M. Pistore, M. Roveri, R. Sebastiani, and A. Tacchella. NuSMV 2: An open-source tool for symbolic model checking. In Proc. CAV, 2002.
[17] E. M. Clarke, O. Grumberg, S. Jha, Y. Lu, and H. Veith. Progress on the state explosion problem in model checking. In Informatics, 2001.
[18] E. M. Clarke, W. Klieber, M. Novรกcek, and P. Zuliani. Model checking and the state explosion problem. In LASER Summer School on Software Engineering, 2011.
[19] Cohda Wireless. Mk5 obu. https://tinyurl.com/y6qepj6h, 2019.
[20] C.-C. T. Committee. Dedicated short range communications (dsrc) message set dictionaryTM set. SAE International, Mar. 2016.
[21] D. L. Dill. The murphi verification system. In Proc. CAV, 1996.
[22] M. Eian and S. F. Mjรธlsnes. A formal analysis of IEEE 802.11w deadlock vulnerabilities. In Proc. IEEE INFOCOM, 2012.
[23] J. Erickson, S. Chen, M. Savich, S. Hu, and Z. M. Mao. Commpact: Evaluating the feasibility of autonomous vehicle contracts. In Proc. IEEE VNC, 2018.
[24] ETSI. Telecommunications and Internet Protocol Harmonization Over Networks (TIPHON) Release 4; Protocol Framework Definition; Methods and Protocols for Security; Part 1: Threat Analysis. Technical Specification ETSI, 2003.
[25] J. Harding, G. Powell, R. Yoon, J. Fikentscher, C. Doyle, D. Sade, M. Lukuc, J. Simons, and J. Wang. Vehicle-to-Vehicle Communications: Readiness of V2V Technology for Application. Technical report, 2014.
[26] C. He and J. C. Mitchell. Analysis of the 802.11i 4-way handshake. In Proc. WiSec, 2004.
[27] G. J. Holzmann. The model checker SPIN. Trans. Software Eng., 1997.
[28] H. Hsiao, A. Studer, C. Chen, A. Perrig, F. Bai, B. Bellur, and A. Iyer.