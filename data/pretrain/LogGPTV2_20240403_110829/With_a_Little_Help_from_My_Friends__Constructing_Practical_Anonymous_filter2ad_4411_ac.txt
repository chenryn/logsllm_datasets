generic group model. In order to construct a provably secure aggre-
gatable attribute-based equivalence class (AAEQ) scheme, we use
parallel copies of this TBEQ scheme with independent keys, where
all instances compute the signing randomness deterministically
using a PRF evaluation on the message using a shared PRF key. We
again prove it secure in the generic group model.
Efficient CHAC implementation. We provide an efficient pro-
totype implementation that uses a Multos smart card as the core
device and a smartphone with a Snapdragon 710 processor and
6GB RAM running Android 10.0 to implement the helper device
and verification algorithm. For a comprehensive evaluation, we
execute the same code on a PC (laptop) with Intel i7-7660U CPU
@ 2.50 GHz with 16GB RAM. The execution time on the core de-
vice with the BN-256 curve (providing around 100-bit of security)
is  1 from one of the prime order 𝑝 source
groups G𝑖 (𝑖 ∈ {1, 2}) of a bilinear group BG. We can view Zℓ
𝑝 as a
vector space and one can define a projective equivalence relation
𝑖 into equivalence
on it, which propagates to Gℓ
classes. An SPS-EQ-scheme signs equivalence classes [𝑀] of vec-
tors 𝑀 ∈ (G∗
: 𝑀 ∼R
𝑁 ⇔ ∃ 𝑠 ∈ Z∗
𝑖 )ℓ with equivalence relation: 𝑀, 𝑁 ∈ Gℓ
𝑝 : 𝑀 = 𝑁 𝑠, i.e., scaling the message by 𝑠.
𝑖 and partitions Gℓ
𝑖
Definition 2.1 (SPS-EQ). An SPS-EQ scheme SPS-EQ on message
space (G∗
𝑖 ) for 𝑖 ∈ {1, 2} consists of the following PPT algorithms.
Setup(1𝜆): on input a security parameter 1𝜆, outputs group BG.
KeyGen(BG, ℓ): on input BG and message vector length ℓ > 1,
outputs a key pair (pk, sk).
Sign(sk, 𝑀): on input a secret key sk and representative 𝑀 ∈ (G∗
𝑖 )ℓ,
outputs a signature 𝜎 for equivalence class [𝑀].
ChgRep(𝑀, 𝜎, 𝜇, pk): on input representative 𝑀 ∈ (G∗
𝑖 )ℓ of equiv-
alence class [𝑀], a signature 𝜎 on 𝑀, a value 𝜇 and a public key
pk, returns an updated message-signature pair (𝑀′, 𝜎′), where
the new representative is 𝑀′ = 𝑀 𝜇 and 𝜎′ its corresponding
(or, updated) signature.
Verify(pk, 𝑀, 𝜎): is a deterministic algorithm and, on input a public
key pk, a representative 𝑀 ∈ (G∗
𝑖 )ℓ, and a signature 𝜎 outputs
a bit 𝑏 ∈ {0, 1}.
VKey(sk, pk): is a deterministic algorithm and, on input secret key
sk and a public key pk, checks if it represents a valid key pair
and outputs a bit 𝑏 ∈ {0, 1}.
We provide formal definitions of security in Appendix A.3.
2.2 Signatures with Flexible Public Key
Signatures with flexible public key (SFPK) [1] are signatures that
provide relations [pk]R on public keys. The main property is called
class-hiding and states that it is hard to decide if a random public
key is in a relation to a different public key. We use the class-
hiding definition with key corruption introduced in [2], where the
adversary gets the secret keys. This definition is weaker than in [1],
but allows to instantiate this primitive with a shorter (and optimal)
public key of 2 group elements, as shown in [2].
Definition 2.2 (SFPK). A SFPK scheme is a set of 𝑃𝑃𝑇 algorithms
such that:
SFPK.CRSGen(1𝜆): on input a security parameter 1𝜆, outputs a
trapdoor 𝛿𝜌 and a common reference string 𝜌, which is an
implicit input for all the algorithms.
SFPK.KeyGen(1𝜆): on input a security parameter 1𝜆 outputs a key
pair (sk, pk).
SFPK.TKGen(1𝜆): on input a security parameter 1𝜆 outputs a key
pair (sk, pk), and a trapdoor 𝛿.
SFPK.Sign(sk, 𝑚): on input a message 𝑚 ∈ {0, 1}∗ and a signing
key sk, outputs a signature Sig.
SFPK.ChkRep(𝛿, pk′): on input a trapdoor 𝛿 for some equivalence
class [pk]R and public key pk′, outputs 1 if pk′ ∈ [pk]R and 0
otherwise.
SFPK.ChgPK(pk, 𝑟): on input a representative pk of equivalence
class [pk]R and random coins 𝑟, outputs a different representa-
tive pk′, where pk′ ∈ [pk]R.
SFPK.ChgSK(sk, 𝑟): on input a secret key sk and random coins 𝑟,
outputs an updated secret key sk′.
SFPK.Verify(pk, 𝑚, Sig): on input a message 𝑚, signature Sig and
public verification key pk, outputs 1 if the signature is valid
and 0 otherwise.
Definition 2.3 (Canonical Representative). Let canon be a predi-
cate that holds for exactly one public key in a given class. We say
pkSFPK is a canonical representative if canon(pkSFPK) = 1.
We provide the formal security definitions in Appendix A.2.
3 NEW RESULTS AND BUILDING BLOCKS
In this section we provide new results on SFPK signatures and
introduce tag-based equivalence class (TBEQ) signatures as well as
aggregatable attribute-based equivalence class (AAEQ) signatures.
3.1 Efficient SFPK with Split Signing
We base our SFPK signature scheme on the one by Backes et al.
[2], but we replace the programmable Waters hash function [75]
with a hash function H modeled as a random oracle. This allows
us to increase the efficiency of the signing process, i.e., we replace
𝑂(𝜆) group operations in G1 with one hashing to G1. The change
requires us to prove security in the random oracle model. However,
it also allows us to securely divide the signing process so that in
our CHAC the core only performs operations in G1 and can seek
support by the helper device to finish the signing process without
knowing the secret key.
SFPK.CRSGen(1𝜆): generate BG ←$ BGGen(𝜆), choose 𝑦 ←$ Z∗
𝑝 and
compute 𝑌1 = 𝑔𝑦
1 and 𝑌2 = 𝑔𝑦
2 . Set 𝜌 = (BG, 𝑌1, 𝑌2).
1 ) and skSFPK =
1 ), skSFPK =
𝑝 and
SFPK.KeyGen(1𝜆): choose 𝑥 ←$ Z∗
𝑝. Set pkSFPK = (𝑔1, 𝑔𝑥
𝑝. Set pkSFPK = (𝑔1, 𝑔𝑥
1 , pkSFPK).
(𝑌 𝑥
SFPK.TKGen(1𝜆): choose 𝑥 ←$ Z∗
1 , pkSFPK), and 𝛿SFPK = (𝑔𝑥
(𝑌 𝑥
2 ).
SFPK.Sign(skSFPK, 𝑚): given a message 𝑚 ∈ {0, 1}𝜆, choose 𝑟 ←$ Z∗
return the signature SigSFPK = (𝑌 𝑥
SFPK.ChgPK(pkSFPK, 𝑟): Parse pkSFPK = (𝐴, 𝐵) and compute pk′
(𝐴𝑟 , 𝐵𝑟). Return pk′
SFPK
SFPK.ChgSK(skSFPK, 𝑟): Parse
(𝑌 𝑥
1 , pkSFPK)
skSFPK
SFPK.ChgPK(pkSFPK, 𝑟),
←
and
SFPK).
SFPK.ChkRep(𝛿SFPK, pkSFPK): pkSFPK = (𝐴, 𝐵). Return 1 iff
pk′
compute
sk′
1 )𝑟 , pk′
SFPK = ((𝑌 𝑥
1 · H(𝑚)𝑟 , 𝑔𝑟
and
return
2).
1, 𝑔𝑟
SFPK =
SFPK
=
.
Sig3
𝑒(𝐴, 𝛿SFPK) = 𝑒(𝐵, 𝑔2).
SFPK.Verify(pkSFPK, 𝑚, SigSFPK): parse SigSFPK
as (𝐴, 𝐵). Return 1 iff
, 𝑔2) = 𝑒(𝑔1, Sig
SFPK) and
3
, 𝑔2) = 𝑒(𝐵, 𝑌2) · 𝑒(H(𝑚), Sig
3
SFPK), parse pkSFPK
𝑒(Sig
2
SFPK
𝑒(Sig
1
SFPK
SFPK).
Scheme 1: Our SFPK Signature Scheme
as
(Sig1
SFPK
, Sig2
SFPK
,
Split signing. Scheme 1 requires the signer to perform operations
in G2 which are usually inefficient on constrained devices and
influence the execution time significantly. We will now describe a
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2009technique that allows splitting the signing procedure between two
parties. We will later identify them by the core and helper devices.
The party holding the secret key (core) performs only operations in
G1 and creates pre-signatures that are finalized by the second party
(helper). Unforgeability of the scheme will hold against the helper
device but we will require the core to perform a one-time-only
pre-computation that will involve operations in G2. More formally.
Definition 3.1. We say that a SFPK scheme supports split sign-
ing if the SFPK.Sign algorithm can be divided into three steps:
SFPK.Sign1, SFPK.Sign2, SFPK.Sign3, such that:
SFPK.Sign1: takes as input the security parameters 1𝜆 and outputs
SFPK.Sign2: takes the same inputs as SFPK.Sign and additionally
SFPK.Sign3: on input a pre-signature pSigSFPK and the public state
Additionally, we require that 1) the distribution of signatures out-
put by SFPK.Sign3 is identical to the output of SFPK.Sign, 2) un-
forgeability holds with respect to pre-signatures even if a pair
(stsecr, stpub) is reused, i.e., both signing oracles in the unforgeabil-
ity experiment are initialized with an output of SFPK.Sign1 and
output pre-signatures instead of full-signatures.
a secret state stsecr and a public state stpub.
stsecr and outputs a pre-signature pSigSFPK.
stpub this algorithm outputs the final signature SigSFPK.
SFPK
We will now sketch the idea how to split the signing procedure
in Scheme 1. We will use the core/helper naming convention to
describe the two parties.
2 for 𝑢 ←$ Z∗
SFPK
1 from Sig1
The only operation in G2 performed during signing is the com-
2. Since 𝑟 is a random value, it suggests that the core
(and
). Unfortunately, this idea fails completely because
,
putation of 𝑔𝑟
can just send it to the helper and let it compute Sig3
even Sig2
the helper would be able to extract the secret key 𝑌 𝑥
since it can compute H(𝑚)𝑟 . It is obvious that the randomness 𝑟
SFPK
must be kept secret and must not leak to the helper.
Our approach is now to hide 𝑟 by pre-computing a value in G2,
namely 𝑈 = 𝑔𝑢
𝑝. The core retains 𝑢, and shares 𝑈 with
the helper. To sign a message, the core does not compute Sig3
SFPK
but chooses 𝑘𝑢 ←$ Z∗
SFPK)
, Sig2
to the helper, who finalizes the signature by computing Sig3
SFPK =
𝑈 𝑘𝑢 . To minimize the number of operations in G1 the core can use
the same idea for Sig2
1 to the helper, which
SFPK
can use 𝑘𝑢 to compute Sig2
SFPK.Sign1(1𝜆): choose 𝑘 ←$ Z∗
SFPK.Sign2(skSFPK, 𝑚, stsecr): choose 𝑟 ←$ Z∗
1 · H(𝑚)𝑟 , 𝑟 · 𝑘−1).
SFPK.Sign3(pSigSFPK, stpub): parse pSigSFPK = (Sig1
2 ).
1 , 𝑈 𝑤
signature pSigSFPK = (𝑌 𝑥
stpub = (𝑈1, 𝑈2) and output (Sig1
2)).