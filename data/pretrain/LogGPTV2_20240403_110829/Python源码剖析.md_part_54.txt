EvalCodeEx，看到了已经深深印入我们脑海的PyFrameObject对象，看到了那个掌控
看到了黎明的曙光。在这里，我们看到了在分析函数机制时和我们朝夕相处的PyEval
pyEval_EvalCode着手唤醒字节码虚拟机。
们已经非常熟悉的PyCodeobject对象。至于完整的编译过程，这又是另一个重大的话题
通的顿悟。
[ceval.e]
中，
PyEval_EvalcodeEx(PyCodeObject *co,
Pyobject*
Pyobject.
*locals)
在这个函数中，Pyhon基于AsT，最终完成了字节码的编译工作，并且创建了一个我
第13章Python运行环境初始化
从操作系统为Pyhon创建进程开始，到这里，经过了如此多的跌跌撞撞，我们终于
而在接下来的代码清单13-11的[21处，Pyhon已经做好了一切准备工作，开始通过
在代码清单13-11的[1]处，run_mode接过传入的AsT，倒手就传入PyAST_compile
returnv
Py_DECREF(co);
return retval:
Pyobjeet
PyThreadState tstate=PyThreadStateGET();
register
register
PyErame_New(tstate,
return PyEval_EvalCodeEx(co,
深度探索动态语言核心技术
PyEval_EvalFrameEx（f,O):
PyFrameObject*f;
*x，
NULL)
(Pyobject
(Pyobject
Pyobject
NULi
K)NULL
retval
Int defeount,
int
co,globals,
argaount
NULL
**freevars:
Pyobject
Pyobject
Pyobjact
1ocals);
PyEval_EvalFrameEx我们曾经在
*globals,
*closure)
int kwcount,
Pyobject*locals,
---
## Page 369
13.3.4
代码清单13-12
单13-12）。
应该从云端落到地面，成为你手中的玩具了。
于Pyhon的骨架，我们已经看清了，到了此时，Python再也不是什么神秘的东西了，它
地执行字节码，这个过程已经清晰地展现出来了。虽然还有很多细节隐藏在幕后，但是对
PyFrameobject
[frameobject.c]
好了，现在我们来玩点有趣的东西，来看一看激活字节码虚拟机的过程中，在创建
名字空间
从Python进程被创建，
else
else i
f->f_back =back;
else(
PyFrameobiect
->f_builtins
obfect
locals=PyDict_New(：
huiltins=back->f_builtins;
buintins =PyDict_GetItem(globals,
Pyobject
f->f_locals=locals;
locals=NULL;
(COENEWLOCALS
((code->co_
设置local名字空间
设亚builtin名字空间
local5=globals;7/一般情况下，1ocals和globals指向形同的aict
（locals==NULL）
(code-
builtins
NULL
ncelis,
*locals)
*back =tstate->frame:
flags
PCo
builtins;
flags &CO_NEWLOCALS）:
//调用画数，不需创建1ocaI名宇空间
到Python字节码虚拟机被唤醒，
back
nfrees
（CONBWLOCALSICOOPTIMIZBD））=
Python源码剖析
builtin_object);
13.3激活Python虚拟机
再到之后执行引擎循环往复
深度探索动态语言核心技术
339
---
## Page 370
Python源码剖析
340
这里（激活Pyhon字节码虚拟机时），1ocal名字空间和global名字空间一样，也被设
字空间。
就能发现，
就是我们在前面已经照过很多次面的_bui1tin_module。
正是有—个“builtins
再看看图13-7中，通过执行air（）显示出来的_main_module中dict的内容，没错，
过它，现在我们来复习一下：
Object 对象，所以builtins=PyDict_GetItem(globals,builtinuobject）一定会
back（tstate->frame）是NULL，因为这是Pyhon为当前线程创建的第一个PyFrame
了_main_module中的aict，而[3]处对local名字空间的设置则复杂了很多，但是在
statie Pyobject
[frameobject.c]
PyObiect
[ceval.c]
nt
第13章Python运行环境初始化
显然，在PyFrame_New的代码清单13-12的[1]处设置bui1tin名字空间时，这里的
这里的tstate是从PyEval_Eva1CodeEx中传入的，实际上也就是在图13-3中所示的
同样，
当然，
显然，builtin_object是pyStringobject对象，而其维护的字符串是“_builtins
PyThreadstate *tstate=PyThreadstate_GET()
return f;
return builtin_objeet= NULt);
builtin_object
_PyFrame_Init()
Pyobject **defs.
PyFrame_New(tstate,co,globale,locals);
EvalcodeEx(PyCodeObjectoo,
，我们可以看到在PyFrame_New中的代码清单13-12的[2]处，globals被设置成
这种机制意味着这样一个事实：Python所有的线程都共享同样的builtin名
如果back并不为空，那么bui1tins将是back->builtins，稍一推理，我们
深度探索动态语言核心技术
*builein_object;
'spue
”所以在PyFrame_New中设置的builtin名字空间实际上
int defcount.
argcount
Pyobject*globals,
Pyobject *closure)
int kwcourt,
Pyobject *locals.
---
## Page 371
以看到输出结果正如我们所预期的那样，如图13-10所示。
交互式环境下的1ocal名字空间和global名字空间。
以参考前面关于PyRun_SimpleFileBxElags的代码。与图13-10对应，图13-11显示了
是，我们在前面看到，在Py_Initialize 完成时，
local名字空间实际就是_main_moduie中的那个dict，所以air的输出你是不是已经
显示的就是对应1ocal名字空间的aict的键的集合。同样是在图13-10中，可以看到，
的属性。我们知道，名字空间这个概念在Pyton中实际就是一个aict，所以air（）实际
实际上它对应着bltmodule.c中的builtin_dir函数，这个函数将显示1ocal名字空间中
就在于交互式方式曾经有一段时间和脚本文件执行方式分道扬。
图13-11所示的情况，1ocal名字空间中不会再有_fi1e_这个属性了，还记得吗，原因
猜到了呢？显然，在交互式环境下输入dir的话，这个执行的过程还是一样的，但是正如
“air”对应的对象。从图13-10可以看到，这个符号位于buiitin名字空间中。而且，
R
27++++++
在Pyhon源代码中添加输出信息，当执行任意一个Pyhon脚本文件demo.py时，可
现在我们可以从理论上推导一下，当执行air（）时，Python执行引擎首先要找到符号
由于
builtins
input..
builtin
(showDict,)
图13-11交互式环境下的local名字空间和global名字空间
doc
round dir range..AttributeError OverflowError WindowsError
doc
showDict(locals()
name
name
图13-10查看Python虚拟机启动时的名字空间
name
module中的属性太多，所以这里只显示了一部分。有一点奇怪的
None)
file
main
main
)
Python源码剖析
13.3激活Python虚拟机
main_module中似乎并没有
(built-in)>)
一深度探索动态语言核心技术
341
---
## Page 373
14.1
表（co_names）也是极其地简单，如图14-1所示。
识别的运行时模块后，编写Pyhon的扩展模块自然就是水到渠成的事了。
此，在后续的描述中，我们依然称dl文件而非pyd文件）文件中的内容来创建Python可
持被删除了，但是可以将dl后缀改为pyd后缀，以重新获得Python2.5的支持。尽管如
了Python是如何基于硬盘上的py文件或dl（注意：在Pyhon2.5中，对dl后缀名的支
制），对Pyton中动态加载机制的深入理解也是编写Python扩展模块的关键所在，当你明
Python中的一个module如何从硬盘中被加载到内存中开始。
的就是在Python 中，
而模块之间存在着引用和交互，这些引用和交互也是程序的一个重要组成部分。本章剖析
内。然而一个现实中的程序不可能只有一个模块，更多的情况下，一个程序会有多个模块，
import sys
[import.py]
STORENAME
这个import.py文件简单无比，所以其编译之后所产生的常量表（co_consts）和符号
我们从import.py开始研究Python中对module的动态加载机制（以后简称动态加载机
import前奏曲
LOAD_CONST
MPORT
在之前的章节中，我们考察的东西都是局限在一个模块（在Python中，就是module）
NAME
Python模块的动态加载机制
一个模块是如何加载、引用另一个模块中的功能的。我们的研究从
0（-1）
(sys)
(None)
Python源码剖析
深度探索动态语言核心技术
第
CHAPTER
14章
---
## Page 374
Python源码剖析
344
WV、u的身份都查明白了，那么那个x又是什么呢？
行时栈的那个-1，为什么莫名其妙钻出来个-1，在以后的剖析中我们会知道原因。现在，
1”指令被压入到运行时栈中的PyNone，而u则是“OLOADCONSTo”指令被压入到运
指令一定是与Python的import机制息息相关的。我们来看看Pyhon对于字节码TMPORT
sysmodule存储在当前PyFrameobject的1ocal名字空间中。当在import之后使用sys
代码清单14-1
NAME的实现（见代码清单14-1）。
Pyihon的import机制并没有什么太大的联系。其实从指令的名字就能看出，IMPORT_NAME
个符号了
module,
[IMPORT_NAME]
LOADLCONST指令和STORE_NAME指令都是我们非常熟悉的了，显然这些通用指令与
在上一章对Python初始化的分析中，我们看到，f->f_builtins实际上就是
在代码清单14-1的[1]之前，w是PyStringObject对象“sys”v是通过“3LOAD_CONST
第14章Python模块的动态加载机制
可以看到，import的结果最终将导致Python虚拟机通过指令“9 sTORE_NAMEo”将
一深度探索动态语言核心技术
]else{
SET_TOP(X）:
X
PyEval_Cal10bject(x,w）:
(PyInt.
PyDict_CetItemstring(E-sf_bulltins,
W=EyTuple_Pack（4
TOPO:
POPO;
GETITEM(names)
图14-1
AsLong(u)
cnar
f->f_locals==NULlPy_None:f->f_local
OM
cintvalue=-1/>
import.py编译结果中的常量表和符号表
->f_locals
oparg);
==NULL？Py_None f->_locals
import
---
## Page 375
个pyTupleobject对象，其中包含了Python在此后进行mport动作时所需的所有信息。
活动的PyFrameobject对象中的global名字空间、1ocal名字空间一起打包，做成了一
个ryCFunction-Object对象了。所以这里的x对应的就是这个PyCPunctionobject对
我们已经看到，在初始化_builtin_module时，这个函数已经摇身一变，被包装成了一
bltinmodule.c中的builtinimport_函数。不过在上一章分析Pyton的初始化动作时，
Keywords仅仅是简单地检查了参数的有效性，然后就调用了pyobject_Call。
手打入了PyEval_Callobject：
所以程序流程进入的是else下的分支，另一分支以后会详细介绍。Python将w、v和当前
参数对应的类型对象中所定义的tp_cal1操作。
调用的（callable）对象进行“调用”操作。具体地说，最终Pyobject_Cali将调用func
位老兄打了不少交道。我们知道，PyObjeet_Cal1是一个相当范型的函数，它将对一切可
象。
Pyobjeet:
#define
[cevcl.c]
在代码清单14-1的口1处，有一个依据u的值而进行的判断，在我们的例子中，u为-1，
这个Pyobjecc_Cal1我们可是非常熟悉了啊，以前在剖析Python函数机制时就和这
这里的arg就是前面刚刚打包好的pyTupleObject对象，PyEval_CallobjectWith-
return resule
elseif(IPyTupie_Check(ang))
if（arg ==NUL)
pyobject*tesult;