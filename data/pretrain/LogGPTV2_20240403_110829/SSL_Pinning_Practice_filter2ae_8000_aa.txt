# SSL Pinning Practice
**Author:瘦蛟舞**
**Create:20180326**
承接接上篇 
关键词:
  * SSL pinning/Public key pinning/Certificate pinning/Domain pinning
  * 证书锁定/证书固定
## 0x01 证书锁定的收益
安全性提升,更加有效覆盖对抗中间人攻击场景.
证书锁定本质是对抗中间人攻击.并非用于对抗破解抓包的.但如果程序逻辑未被注入运行在"可信环境"中倒是有些作用.
ssl对抗的攻击场景:
  * 中间人攻击部分场景
    * ARP欺骗
    * DNS劫持
    * 钓鱼WIFI
    * 伪基站
ssl pinning新增对抗场景:
  * 客户端安装恶意证书
    * 一些WiFi需要你添加根证书信任才能使用互联网
    * 一些网站需要你添加根证书信任才能不反复红叉提示
  * 其他CA恶意签发站点证书
    * WoSign和Symantec都有过一段时期签发的证书不受信任的历史 (还有StartCom和CNNIC)
**因为发现赛门铁克签发了大量有问题的证书,Google官方博客公布了 Chrome 浏览器不信任赛门铁克证书的时间表：**
> 2017 年 10 月发布的 Chrome 62 将在 DevTools 中加入对即将不受信任的赛门铁克证书的警告；
>
> 2017 年 12 月 1 日,DigiCert 将接手赛门铁克的证书签发业务；
>
> 2018 年 4 月 17 日发布的 Chrome 66 将不信任 2016 年 6 月 1 日之前签发的证书；
>
> 2018 年 10 月 23 日发布的 Chrome 70 将停止信任赛门铁克的旧证书.
受影响的赛门铁克 CA 品牌包括 Thawte、VeriSign、Equifax、GeoTrust 和
RapidSSL,几个独立运作密钥不受赛门铁克控制的次级 CA 得到了豁免,其中包括苹果和 Google.Google
建议使用赛门铁克证书的网站及时更新到受信任证书.
## 0x02 业务证书锁定方案选择
PM和开发让我给他讲下SSL Pinning,于是从中间人攻击和证书链开始balabla讲了一堆.
PM:哦,就是证书白名单吧
我:emmmm,是
开发:不想听你Balabala一堆,有没有简单的方法梭哈一把干?
我:emmmm,有
**抽象业务场景分类如下:**
  * 单发app,大多数是这种情况.可以直接选择开源库TrustKit.
    * 再细分金融,商场,游戏等.根据自身业务特性以及对安全等级的要求选择0x04中所述方案.
  * SDK.可以考虑使用文中提供的SSLPinKit工具类(只有安卓的).
    * 再细分账号,统计等.根据自身业务特性以及对安全等级的要求选择0x04中所述方案.
  * 系统组件android 7.0 N 以上,可以直接配置network-security-config.
**单发APP推荐TrustKit的理由:**
  * android 7.0 + 使用系统原生锁定方案,而7.0 Nougat之前则TrustKit自己逻辑实现锁定.但是对于使用者来说配置方法都是一致的比较优雅(只需要配置network-security-config).
  * 简单易用兼容性好,支持证书更新,证书备份等等.
  * 同时有成熟的iOS库
## 0x03 证书锁定的理论基础
理解文章可能需要如下知识.可以跳过此环节.
**可信CA** :CA(Certificate
Authority)是数字证书[认证中心](https://baike.baidu.com/item/%E8%AE%A4%E8%AF%81%E4%B8%AD%E5%BF%83)的简称,是指发放、管理、废除数字证书的机构.CA的作用是检查证书持有者身份的合法性,并签发证书,以防证书被伪造或篡改,以及对证书和密钥进行管理.
**双向锁定** :在客户端锁定服务端证书的基础上,服务端对客户端的证书也进行锁定,需要客户端再做一次证书预埋.多见于金融业务.
**证书链** :证书链就是Root CA签发二级Intermediate CA,二级Intermediate CA可以签发三级Intermediate
CA,也可以直接签发用户证书.从Root CA到用户证书之间构成了一个信任链:信任Root CA,就应该信任它所信任的二级Intermediate
CA,从而就应该信任三级Intermediate CA直至信任用户证书.
**逐级验证** :客户端对于收到的多级证书,需要从站点证书(leaf certificate)开始逐级验证, 直至出现操作系统或浏览器内置的受信任CA
根证书(root certificate).
**通常逐级检测点如下:**
  * 是否由上级证书签发
  * 是否吊销
  * 是否过期
  * 是否遵循上级证书的策略
## 0x04 证书锁定方案对比
先梳理下对证书处理的几种策略
### 站点证书锁定 leaf certificate pinning
首先考虑的锁定站点证书,这种策略安全性是肯定的,但是有个缺陷就是需要维护预埋证书.如果你没考虑过更新预埋证书会怎么样了?拿一个开源项目举例.  
(没错,又是它.之前SSL解锁的文章也是拿他举例.)  
例子中的网站  证书已经更新过一次,代码中的证书key是2015年的
而线上证书已于2017年更换,所以导致pinning失效,直接粗暴pinning可能导致业务无法访问.
现在的站点证书一般有效期在1到2年,所以做站点证书锁定还要保证服务可用性的话就得必须实现客户端锁定证书指纹的更新.
但是更新证书的网络请求该如何处理,有如下选择:
  * 指纹更新请求被劫持到的概率比较低,不锁定更新指纹请求直接使用https完成.缺点是安全性稍弱.
  * 自签名证书的有效期非常长,用自签名证书锁定指纹更新请求.缺点是兼容性稍弱.
客户端的工作基本梳理完成,服务端需要实现证书指纹下发接口.还有每到证书即将过期的时候需要有人将的证书指纹配置进入.这里虽然提取指纹配置可以由代码实现,但是签发证书是由第三方CA完成的,所以离不开人对接.
整个锁定逻辑每隔一段时间(站点证书过期节点),需要有认为介入才能维持服务可用性.因为"人"这个X因素的引入会给业务稳定性带来极大风险,在大多数场景下不合理的.
先挂起这个安全性很高但是实现较为复杂且的方案,进入下一锁定策略.
### 中间证书锁定 Intermediate certificate pinning
锁定中间证书或根证书的优势是安全性接近锁定站点证书,且这两证书的有效期一般很长,很多都是15年到30年,所以暂不考虑热更新证书指纹.没准十几年后区块链去中心化就把CA给去掉了.
除证书有效期时间长的优势,锁定间证书或根证书还可以更好的兼顾业复杂的业务线,因为企业子域名很多情况下都是自己业务的站点证书,但是一个企业通常站点证书都是由一个中间证书(根证书)签下来.所以锁定间证书或根证书不用特别对每个业务线做调整,一套策略或者方案基本可以适用企业整个业务线.
先尝试中间证书的锁定方案,这里Comodo的中间证书超期时间为2029,距到期还有十来年超过了大多数的产品的生命中求.这么久的时间窗口,完全可以让指纹随着应用更新完成迭代.
但是锁定中间证书的方案会遇到一个问题,那就是更换证书CA(数字证书颁发机构).这就需要通过备份一些可能会用的到CA指纹.中间证书的量级相对于根证书要高出很多,而且也不好预测将来可能会更换到哪些中间证书.
先挂起这个安全性不错但是,冗余相对难操作的方案,进入下一锁定策略.
### 根证书锁定 Root certificate pinning
参考操作系统更新预埋CA根证书的机制,通过自升级完成锁定CA的指纹更新.Android
N系统约内置了150多个系统根证书.而实际作为一个应用是不需要信任这么多CA的根证书的.可靠卖证书的CA就那么十来家,业务的安全需求决定了你需要哪类证书.这样备份证书的范围就收窄了,且根证书的数量级相对小.所以就没中间证书备份难的问题.
目前主流的SSL证书主要分为 DV  在 Android 7.0 中,通过使用说明性 _“网络安全性配置”_ (而不是使用传统的易出错的编程
> API,例如>X509TrustManager),应用可以安全地自定义其安全(HTTPS、TLS)连接的行为,无需任何代码修改.
>
> 支持的功能：
>
>   * **自定义信任锚** :让应用可以针对安全连接自定义哪些证书颁发机构 (CA) 值得信赖.例如,信任特定的自签>署证书或限制应用信任的公共 CA
> 集.
>   * **仅调试重写** :让应用开发者可以安全调试其应用的安全连接,而不会增加安装基础的风险.
>   * **明文流量选择退出** :让应用可以防止自身意外使用明文流量.
>   * **证书固定** :这是一项高级功能,让应用可以针对安全连接限制哪些服务器密钥受信任.