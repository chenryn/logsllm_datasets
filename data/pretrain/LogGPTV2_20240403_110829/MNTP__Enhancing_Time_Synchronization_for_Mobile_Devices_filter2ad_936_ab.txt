v4/v6
CI2
359
2
v4/v6
9,988,576
1,480,571
1,268,928
CI3
335
2
v4/v6
812,104
CI4
262
2
v4/v6
7,63,847
EN1
228
2
v4/v6
4,11,253
EN2
232
2
v4/v6
4,37,440
JW1
12,769
1
v4
JW2
35,548
1
v4
MW1
2,746
1
v4
MW2
9,482,918
MW3
1,141,163
MW4
2,525,072
MI1
1,078,308
2
v4
2
v4
2
v4
1
v4
3,54,530
8,69,721
1,97,900
46,232,069
10,948,402
11,126,121
63,907,095
16,404,882
18,426,282
14,194,081
9,254,843
2,369,277
SU1
21,101
1
v4/v6
UI1
36,559
2
v4
UI2
18,925
2
v4
UI3
1,77,957
2
v4
PP1
128,644
2
v4/v6
Figure 1: Comparison of minimum OWDs of clients of different service providers seen in the logs of NTP AG1 (top-left),
JW2 (middle-left) and SU1 (bottom-left). CDF of minimum OWDs of clients of different service providers seen in the
logs of NTP servers AG1 (top-right), JW2 (middle-right) and SU1 (bottom-right).
SNTP vs. NTP. Next, we classify the hosts into SNTP or
NTP based on the protocol used for clock synchronization, as
seen from the tcpdump traces of the servers. Figure 2-(left)
shows the percentage of SNTP vs. NTP hosts seen across
the 19 NTP servers, where a majority of hosts seen across
all servers (except CI1-4 and EN1-2, which are ISP-speciﬁc
NTP servers) use SNTP to synchronize time. For each server,
we also calculate the percentage of SNTP vs. NTP clients
for the top 25 service providers observed in the NTP logs
and ﬁnd that over 95% of the clients of mobile providers
use SNTP—a result consistent with other information (e.g.,
Android codebase [1]). Because of simpliﬁcations in SNTP
compared with NTP, we can expect these hosts not to be able
to synchronize with the same level of accuracy as full NTP
clients. We seek to quantify this limitation, next.
3.2 Wireless Experiments
In this section, we seek answers to the question: what is the
combined impact of wireless effects such as channel fading,
interference due to adjacent channels, signal attenuation, etc.
on time synchronization procedure used by mobile hosts? To
address this question, we use the laboratory-based wireless
testbed shown in Figure 3. The architecture of our testbed is
designed to provide control over network delay characteris-
tics, e.g., to repeatably introduce large and variable delays,
with the goal of evaluating the presence of wireless hop(s) on
SNTP-based time synchronization between hosts and their
corresponding references. Our testbed consists of three types
of nodes: (1) a wireless access point, (2) a target node, and
(3) a monitor node.
For the wireless access point (WAP) in our testbed, we
turn a laptop with a 802.11 b/g/n wireless adaptor into a WiFi
hotspot. The WAP is connected to the wired Internet and
shares its connection to the other nodes in the testbed. Both
the monitor node (MN) and the target node (TN) are associ-
ated with the WAP, making the last hop completely wireless.
The WAP has the ability to programmatically increase or
decrease the transmission power (within legal limits) of the
wireless adaptor upon receiving commands from the MN.
SNTP and NTP measurements are all launched from the tar-
get node (TN) in the testbed. When TN is booted, it is conﬁg-
ured to use its default OS-speciﬁc NTP server such that TN’s
system clock is in tight synchronization throughout the exper-
iments. In our experiments, the TN is a Macbook pro laptop
and the default NTP server used is time.apple.com. Once the
TN has achieved synchronization with its OS-speciﬁc NTP
server, we record TN’s system clock offset—which we call
the true time offset—obtained by using the ntpq utility as
the baseline in our evaluations. We launch SNTP requests to
0.pool.ntp.org (also known as a pool server) to get the
SNTP-based time estimates from a remote reference clock
over the wireless network6. Every SNTP request to the pool
server is randomly assigned to a new NTP time reference
enabling unbiased time server selection. All responses from
the pool servers include exact time at the remote NTP server
and TN’s clock offset with respect to remote server’s clock.
We compare these reported offsets with the true time offset to
quantify the effect of the wireless hop on clock synchroniza-
tion. The TN also sends statistics collected through active
measurement to the MN using tools like ping, which are tar-
geted to a user-conﬁgured probe destination. To characterize
6We note that the use of an NTP pool server is commonly employed in
mobile wireless devices, such as Android-based devices.
the impact of the wireless hop on the time estimates obtained
from reference servers, all experiments were repeated by
connecting the TN to the wired Internet.
The monitor node (MN) in the testbed manipulates the
delay and variability characteristics in the wireless last
hop which are required for our experiments.
In order
to achieve the required characteristics, the MN employs
two strategies: (i) the WAP’s outgoing Internet connection
is occupied intermittently by downloading a large ﬁle at
random intervals from a ﬁxed download destination (i.e.,
ubuntu.com/download), and (ii) control commands are
sent to the WAP to randomly increase or decrease the WAP’s
transmission power and ﬁle download frequency. The chan-
nel occupancy is determined by the ﬁle download pattern and
duration of the trafﬁc and are automatically tuned at the MN
based on channel statistics reported by the TN. Speciﬁcally,
if the latencies of ping probes reported by TN increases, as
observed from the number of packet losses in ping probes, the
ﬁle download frequency is decreased and the transmission
power value is increased thereby making the channel less
lossy and dynamic. Otherwise, the frequency of downloads
and transmission power are increased and decreased respec-
tively. Once the channel stabilizes, as denoted by no packet
losses in ping trafﬁc, our tool automatically responds by a
decrease in transmission power and increase in download
frequency, making the channel conditions variable and lossy
at random intervals.
We note that wireless experiments that include interference
using our scriptable tool are difﬁcult to repeat exactly since
we are experimenting in a live environment. However, we
argue that repeating the same set of experimental steps will
lead to results that have the similar statistical properties to
those we report. In addition, the RTS/CTS feature which
is used to help cope with hidden-terminal situations was
disabled for the experiments described below. Given the
introduction of additional variable delays due to RTS/CTS,
we would expect the performance of SNTP to be even worse
with this feature enabled.
Figure 4 shows the SNTP time offsets reported by the TN
with (left) and without (right) reference to a NTP time source
from 0.pool.ntp.org. Speciﬁcally, the ﬁgures depict the
clock offsets reported from SNTP when the TN is connected
to the (1) wired network with and without NTP time as base-
line and (2) wireless network with and without NTP time
reference. From these ﬁgures, the impact of a variable and
lossy wireless channel on the time synchronization is clearly
evident. In particular, the mean and standard deviation of the
offset for the wireless experiments with NTP clock correc-
tion7 are 31ms and 47ms, and for the experiments without
clock correction they are 118ms and 133ms. In contrast, on a
wired network, when TN’s system clock is corrected using
NTP, the offsets reported by SNTP requests with respect to
7We use the term ‘NTP clock correction’ to refer to the scenario where TN’s
system clock is corrected using NTP—speciﬁcally, using NTP’s sophisti-
cated sample ﬁltering and clock selection heuristics. Furthermore, SNTP
only reports the offset of TN’s system clock with respect to the NTP time
source (0.pool.ntp.org). This helps us measure the error in the clock
offsets reported by SNTP relative to an expected clock offset of 0ms.
Figure 2: Percentage of clients in the US seen in logs of 19 NTP servers (left) and top 25 service providers seen in logs of
SU1 NTP server (right) using NTP and SNTP protocol.
time synchronization mechanism is susceptible to wireless
effects, regardless of hardware platforms and/or time of the
day.
3.3 Cellular Network Experiments
We repeat the experiments described in §3.2 by replacing
the TN with a mobile phone—speciﬁcally, Samsung Galaxy
S4 with Android OS v4.4.4 (KitKat)—and ran the experi-
ments for 3 hours on a 4G network (of SP 22) without MN
and download trafﬁc. To establish a baseline time for com-
parisons, we use the SmartTimeSync app [13] to correct the
device’s system clock. To obtain SNTP offsets from the time
source (0.pool.ntp.org), we use SNTP Time app [10].
Since the SNTP Time app does not support logging capability,
we modiﬁed the codebase given here [11] to log the SNTP
offsets computed against the system clock that is corrected
using GPS ﬁxes. Figure 5 shows the clock offset reported by
SNTP Time app after GPS correction. We see in the ﬁgure
that the reported SNTP offset can vary signiﬁcantly, and was
as high as 840ms. Overall, the mean offset was 192ms with a
standard deviation of 55ms. Similar to §3.2, we repeated the
experiments multiple times at different times of the day and
found the poor synchronization behavior to hold across the
runs.
3.4 Discussion
A natural question is whether GPS or NTP might be used
to correct major clock offsets in mobile and wireless devices.
We argue that using GPS-based time synchronization is not
a widely applicable solution, as many mobile and wireless
devices have minimal or no support for GPS, especially in
the developing world. Even if the devices have a built-in
GPS receiver or support for a GPS module, vendor-speciﬁc
OS implementations (e.g., iOS) often prohibit GPS-based
time synchronization [3, 4]. Moreover, GPS availability can
depend on location (e.g., GPS valleys such as building and
tunnels) and has been observed to be power-hungry in mobile
devices [43, 51]. Should these limitations resolve at some
point in the future, the GPS would be an attractive option.
Figure 3: Laboratory-based experiment testbed.
the reference clocks are always close to 0ms. Even when
the clock correction is suspended on a wired network, the
drift is steady and is dependent on the temperature of the
vendor-speciﬁc oscillator present in the device.
In a network with varying load and delay characteristics,
which is not atypical in wireless deployments [18], the off-
sets obtained from SNTP requests often exhibit high variance
as shown in Figure 4-(left) (in green), despite NTP correct-
ing TN’s system clock. For example, the offset was as bad
as 600ms compared to the NTP reference clock during a
highly-varying and lossy channel condition (at x=245), which
was absent in the wired counterpart of the experiment. Fur-
thermore, the presence of a wireless hop and the impact of
channel effects on clock synchronization is more pronounced
in the absence of an NTP-based reference clock as shown
in Figure 4-(right), where the reported SNTP offsets were
as bad as 1.58s (at x=522). We also considered different
hardware platforms and repeated the experiments at different
times of the day to verify this behavior. We do not show
results of these additional conﬁgurations due to space con-
straints, but what we found in our experiments was that the
Figure 4: Comparison of SNTP clock offsets in wired vs. wireless environments with (left) and without (right) NTP clock
correction.
GPS- and NTP-based clock synchronization, SNTP has been
widely deployed on mobile devices, but as our experiments
show, it provides poor time synchronization. These ﬁndings
call for a new clock synchronization mechanism or the need
to modify an existing mechanism to support mobile/wireless
devices.
4. MNTP DESIGN
Figure 5: SNTP clock offsets reported by mobile host on
a 4G network.
Using NTP for time synchronization is also a less attractive
solution for mobile devices because of its heavier-weight
communication characteristics, including periodic polling
behavior and requirement to maintain state at the devices.
We posit that these characteristics are ill-suited for mobile
devices and would have a negative impact on battery life due
to the following two reasons. First, an outcome of NTP’s
polling algorithm is that a time source is polled intermittently
with ∼128B of data by the client. A measurement study by
Balasubramanian et al. has shown that a few 100B transfers
periodically on mobile phones with 3G/GSM technology
can consume more energy than bulk one-shot transfers [19].
Second, another effort by Haverinen et al. showed that UDP-
based protocols (such as NTP) require frequent keep-alive
messages to maintain state at the devices, which in turn can
lead to short battery lifetimes [26].
Main Findings and Implications. SNTP uses clock off-
set to update the local clock directly and none of the time-
tested ﬁltering algorithms as would be used in a full NTP
client. As a result, the signiﬁcant and highly variable offsets
we observe have a direct impact on the synchronization of
the client’s clock. Because of the disadvantages of using a
To enhance the accuracy of the time synchronization under
varying and lossy conditions described in §3, we contend
that mobile devices should dynamically adapt to the channel
conditions and pace their requests to reference servers based
on the collected channel information. In order to decide when
to emit SNTP requests to servers during ideal channel condi-
tions, we must answer the following three questions:
• What wireless channel information should devices use to
• Over what timescale should the wireless environment be
• At what interval (across ideal conditions) should requests
monitored to identify an ideal channel condition?
detect an ideal/stable portion of the channel?
be sent to synchronize devices with reference(s)?
In this section, we attempt to answer these questions and use
the answers to guide the design of Mobile NTP, a lightweight,
simple and easy-to-deploy modiﬁcation of SNTP, which im-
proves clock synchronization for mobile devices.
4.1 Measured Channel Information
Similar to §3.2, we monitor the following channel infor-
mation (or wireless hints)—speciﬁcally, Received Signal
Strength Indication (RSSI) (in decibels) and noise level (in
decibels)—to calculate the Signal-to-Noise Ratio (SNR) mar-
gin (deﬁned as RSSI - Noise) and guide the establishment of
ideal channel conditions (§4.2) at the host, which needs its
clock synchronized with a time reference. We obtain these
hints directly from the wireless adaptor of the wireless device.
We note that all these hints, among other information, can
easily be obtained for a variety of hardware platforms. For
example, the wireless hints for mobile devices can be mea-
sured using techniques and tools available as part of Zhang