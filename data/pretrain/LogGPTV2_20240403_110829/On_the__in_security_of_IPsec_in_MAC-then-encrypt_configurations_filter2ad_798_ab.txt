SSL’s MAC-than-encrypt construction was reported in [4].
This attack has a similar ﬂavour to our attacks, but dif-
fers markedly in its details and realisation.
In particular,
because of the way SSL behaves when errors arise, the at-
tack of [4] can only slowly recover a ﬁxed plaintext that is
repeated across many SSL connections. In contrast, our at-
tacks can recover arbitrary plaintext in an eﬃcient manner.
Other related work [6, 16] is already discussed above.
2. BACKGROUND ON IP AND IPSEC
We assume the reader is familiar with the main IPsec con-
cepts (tunnel and transport modes, Security Associations
(SAs)) and protocols (AH and ESP). We also assume the
reader is familiar with IP, in particular, the format of the IP
header and the function of each of its ﬁelds. Here, we only
consider IPv4. For useful introductions to these topics, we
refer the reader to [5, 18, 21]. Below, we relate some of the
ﬁner points concerning IPsec that are needed to understand
our attacks.
2.1 ESP
We recall that ESP usually makes use of a block cipher
algorithm operating in CBC mode: RFC 4385 [17] mandates
support for AES-CBC with 128-bit keys and TripleDES-
CBC, while no other encryption algorithm is mandated. No
combined mode (authenticated encryption) algorithms are
required to be supported. In future, we may expect com-
bined mode algorithms and AES-CTR to increase in pop-
ularity. A modiﬁcation of our attacks would work against
AES-CTR, if it were not for the fact that [8] specifying AES-
CTR requires that it must be used in combination with ESP-
provided integrity protection, implicitly in an encrypt-then-
MAC construction. We assume throughout the remainder
of this paper that CBC mode is in use.
Our attacks depend in a delicate way on how padding
and CBC mode encryption (and the reverse operations of
decryption and depadding) are performed by IPsec. The
variant of CBC mode that is used by ESP is described in full
in [15, 5]. The plaintext to be protected is either an inner
IP packet (in tunnel mode) or the IP packet payload (in
transport mode). This data is treated as a sequence of bytes.
It is padded with a particular pattern of bytes and then a
Pad Length (PL) byte and a Next Header (NH) byte are
appended; this collection of bytes is called the ESP trailer.
The default padding method speciﬁed in [15] is universally
used in practice. This method adds bytes so that:
1. The total number of bytes present (including the PL
and NH byte) is aligned with a block boundary; and
2. The added pattern of padding bytes is either a null
string or t bytes of the form 1, 2, . . . , t for some t with
1 ≤ t ≤ 255.
According to [15, Section 2.7] it is permissable to precede
this padding with an arbitrary amount of Traﬃc Flow Con-
ﬁdentiality (TFC) padding of unspeciﬁed format. This is in-
tended to aid in preventing traﬃc analysis by disguising the
true length of the inner packet. Some of our attacks exploit
support for this padding. The NH byte is present in order
that the decrypting IPsec entity can know to which protocol
it should pass the bytes that precede the padding bytes. In
tunnel mode, this value should be 04 indicating IP; in trans-
port mode, a variety of values will be found here, with local
IPsec policies determining which values are acceptable.
After adding the ESP trailer, the data is encrypted using
CBC mode. Let us assume that the byte sequence after
padding consists of q blocks, each of n bits (where n = 64 for
triple-DES and n = 128 for AES, for example). We denote
these blocks by P1, P2, . . . , Pq. We use K to denote the
key used for the block cipher algorithm and eK(·) (dK (·)) to
denote encryption (decryption) of blocks using key K. An n-
bit initialization vector, denoted IV , is selected at random.
Then ciphertext blocks are generated according to the usual
CBC mode equations:
C0 = IV, Ci = eK(Ci−1 ⊕ Pi),
(1 ≤ i ≤ q).
The encrypted portion of the packet is then deﬁned to be the
sequence of q + 1 blocks C0, C1, . . . , Cq. The basic format of
an ESP-protected packet is shown in Figure 1.
4950
8
16
24
32
Security Parameter Index (SPI)
Sequence Number
Initial Vector (IV)
Payload Data (variable)
TFC Padding (optional, variable)
Padding (0 - 255 bytes)
Pad Length
Next Header
E
n
c
r
y
p
t
i
o
n
S
c
o
p
e
Figure 1: Structure of ESP protected-packet (adapted from RFC 4303 [15] for CBC mode without integrity
protection and to show encryption scope).
0
8
16
24
32
Next Header
Payload Len
Reserved
Security Parameter Index (SPI)
Sequence Number Field
Integrity Check Value - ICV (variable)
Figure 2: AH format according to RFC 4302 [14].
At the entity performing IPsec decryption (which is also
in possession of the key K), the padded plaintext can be
recovered using the equations:
Pi = Ci−1 ⊕ dK (Ci),
(1 ≤ i ≤ q).
Any padding along with the PL and NH bytes can then
be stripped oﬀ, revealing the original inner packet/payload.
Section 2.4 of both the ESP RFCs [12, 15] states that “the
receiver SHOULD inspect the padding ﬁeld”, because certain
cut-and-paste attacks are prevented if “the receiver checks
the padding values upon decryption”. We assume that an
RFC-compliant implementation performs a strict check, en-
suring that the padding conforms exactly to what is ex-
pected given the value of the PL ﬁeld, and dropping the
inner datagram if the check fails2.
The receiver then reconstructs the original IP packet, with
the exact steps depending on the mode (transport or tun-
nel) and being described in [13, Section 5.2]. This process-
ing also discards any TFC padding. In tunnel mode, this
can be achieved by using the length ﬁeld in the header of
the inner IP packet to determine where to trim the packet.
In transport mode, this relies on the upper layer protocol
format including a length ﬁeld which can be used for the
same purpose. Some of our attacks depend on support for
TFC padding at the receiver side, and we will note where
this is the case. The original IP packet is then compared
with the used SA’s traﬃc selectors to check that the cor-
rect cryptographic processing was applied. This check will
(implicitly) ensure that in tunnel mode the NH byte does
contain 04, for example, with the packet being dropped if
it does not. Likewise, in transport mode, the NH byte will
need to be consistent with the upper layer protocols allowed
for that SA. Finally, the packet is forwarded, either to the
upper layer protocol speciﬁed in the NH byte, or for further
cryptographic processing (when nested SAs are in use).
Note that when ESP is employed without integrity pro-
tection, the sequence number in the ESP header must not
be checked by the recipient [15, Section 3.4.3].
2.2 AH
2Note that weaker forms of padding check such as BSD-style
checks [5] still allow us to recover partial blocks of plaintext
in our attacks.
AH, as speciﬁed in [14], provides an integrity protection
service and, in combination with sequence number checking,
a replay protection service for IP packets. The AH format is
496shown in Figure 2. AH processing involves inserting the AH
ﬁelds between the IP header and payload/inner IP packet,
and then applying a MAC algorithm to selected ﬁelds of the
(outer) IP header, the AH ﬁelds, and either the payload (in
transport mode) or the inner IP packet (in tunnel mode);
a typical MAC algorithm for AH is HMAC-SHA1-96. The
calculated MAC value (ICV value) is placed in the relevant
AH ﬁeld. Not all of the (outer) header ﬁelds are included
in the MAC computation because they may change in un-
predictable ways as the packet traverses an IP network; the
unprotected ﬁelds include the header checksum and TTL
ﬁelds.
At the receiver, the MAC is checked and the packet dis-
carded if the MAC is incorrect.
In addition, when replay
protection is enabled, the 32-bit sequence number carried
by AH is compared to a sliding window of recently received
sequence numbers. The packet is again rejected if the se-
quence number has already been received or if it is deemed
to be too old by falling to the left of the current window. A
packet having a valid MAC and a sequence number greater
than the largest previously accepted will always be accepted,
causing the window to be shifted to the right. RFC 4302 [14]
also supports the use of 64-bit extended sequence numbers.
We assume these are not selected for simplicity of presenta-
tion, but our attacks still work if they are.
2.3 IP
A useful overview of IP suﬃcient to understand our at-
tacks can be found in [5]. In this paper, we will be mostly
concerned with the TTL ﬁeld in the IP header and the IP
header ﬁelds related to packet fragmentation.
We recall that the TTL ﬁeld is set to some initial, OS-
dependent value when a packet is ﬁrst generated, and then
decreased by 1 at each router that the packet traverses.
When the TTL ﬁeld reaches 0, the packet is discarded, and
an ICMP error message (of type 11 and code 0) indicating
a “time to live exceeded” event is generated and sent to the
host indicated by the original packet’s source IP address.
Support for fragmentation is a necessary part of IP im-
plementations arising from the need to cater for a variety
of lower layer protocols. The second 32-bit word in the IP
header is used to handle fragmentation issues. In particular,
the 16-bit Identiﬁcation (ID) ﬁeld is used to identify all the
fragments coming from a single initial packet, the MF bit
indicates that more fragments are expected after this frag-
ment, the DF bit indicates that this packet should not be
fragmented, one bit is unused, and the remaining 13 bits are
used to carry the fragment oﬀset which is used to order frag-
ments during packet reassembly. A fragment is indicated by
a non-zero MF bit or a non-zero oﬀset ﬁeld. According to
[3], to avoid unacceptable delays in reassembling fragments,
the reassembly process must eventually time-out, with the
wait period being a ﬁxed period that is recommended to
lie between 60 and 120 seconds.
If this timeout expires,
the partially-reassembled packet must be discarded and an
ICMP Time Exceeded message (of type 11 and code 1) must
be sent to the source host.
The IPsec architecture [13] notes that AH and ESP can-
not be applied using transport mode to packets that are
fragments; only tunnel mode can be employed in such cases.
RFC 4302 [14] requires that “An IPv4 packet to which AH
has been applied may itself be fragmented by routers en route,
and such fragments must be reassembled prior to AH process-
ing at a receiver.” This feature is exploited in our attacks
based on fragmentation.
2.4 ICMP and IPsec
The IPsec architectural RFC [13] explains in detail how
IPsec should handle ICMP messages, distinguishing between
error and non-error messages. Our attacks use ICMP mes-
sages of both types, and the speciﬁc messages used in our at-
tacks are not blocked by IPsec. However, they are only visi-
ble to the attacker in encrypted form and so typically need to
be detected by their characteristic (though implementation-
dependent) lengths, or via timing correlation.
2.5 Bit Flipping in CBC Mode
We recall the following well-known property of CBC mode.
Suppose an attacker captures a ciphertext C0, C1, . . . , Cq,
then ﬂips (inverts) a speciﬁc bit j in Ci−1 and injects the
modiﬁed ciphertext into the network. Then the attacker
induces a bit ﬂip in position j in the plaintext block Pi as
seen by the decrypting party. This tends to randomize block
Pi−1, but if the modiﬁcation is made in C0 (equal to IV ),
then no damage to plaintext blocks will result. This obvi-
ously extends to ﬂips applied to multiple bits simultaneously.
In our attacks, we will ﬂip certain bits in the headers of
inner datagrams. Any such modiﬁcations will require further
compensation to be made elsewhere in the header so that the
Header Checksum (calculated as the 1’s complement of the
1’s complement sum of the 16-bit words in the IP header) is
still correct – otherwise the inner datagram will be silently
dropped. In [5, 18], a number of techniques were developed
for “correcting” checksums in an eﬃcient manner. We need
to further develop these techniques so that our attacks are
eﬃcient for the IPsec conﬁgurations considered here.
Considering each 16-bit ﬁeld in the IP header as an un-
signed integer, suppose we wish to subtract the value δ from
one of these 16-bit ﬁelds. Let S represent the 1’s comple-
ment sum of all the 16-bit ﬁelds over which the checksum is
computed, then the IP header checksum is given by S (the
complement of S). Thus the new value of the IP header
checksum should be set to (S ⊞ δ) where ⊞ denotes 1’s com-
plement addition. Then we need to select a 16-bit value
mask such that:
mask ⊕ S = (S ⊞ δ)
and XOR this value mask to the appropriate ﬁeld in the IV.