图 1.50  Android SDK 管理器 
（3）以上就是 Android SDK 管理器界面，在该界面可以更新、下载、安装及卸载 Android 
SDK 管理的工具。Android SDK manager 启动以后，将自动检测电脑上已经安装的 Android 
SDK，在该界面底部可以看到检测进度条。该检测过程耗时较长，希望用户耐心的等待。检
测完后，显示界面如图 1.51 所示。 
图 1.51  Android SDK Manager 
注意：如果以上检测过程较慢的话，很多用户将无法忍受，并且会影响用户的其它操作。
所以，这里介绍一种方法来加快它的检测速度。在 Android SDK Manager 的菜单栏中依次选
Android 渗透测试入门教程（内部资料）——daxueba.net 版权所有 
·32· 
择 Tools|Options...命令，如图 1.52 所示。单击 Options...命令后，将显示如图 1.53 所示的界
面。 
图 1.52  菜单栏                                     图 1.53  设置代理 
在该界面设置一个代理服务器，具体配置如下所示： 
 HTTP Proxy Server：输入代理服务器的地址 mirrors.neusoft.edu.cn； 
 HTTP Proxy Port：设置代理端口号为 80； 
 勾选 Force https://...sources to be fetched using http://...前面的复选框； 
（4）ADB 工具包括在 Tools 文件夹下的特定组件中，所以这里要选择安装这些特定组
件，如图 1.54 所示。 
图 1.54  Tools 文件夹中的组件 
Android 渗透测试入门教程（内部资料）——daxueba.net 版权所有 
·33· 
（5）从该界面的 Status 列，可以看到安装和未安装的组件。这里选择安装 Android SDK 
Platform-tools 和 Android SDK Build-tools 组件。用户也可以根据自己的需要安装其它组件。
如果用户想要使用模拟器的话，则可能需要安装一些支持模拟器硬件的其它特定组件，如图
1.55 所示。 
图 1.55  Android 4.2.2（API 17）特定组件 
提示：关于 Android 模拟器的安装在后面进行介绍。 
（6）选择要安装的组件后，单击 Install 12 packages 按钮，将开始安装选择的组件，如
图 1.56 所示。 
图 1.56  Choose Package to install 界面 
（7）在该界面显示了将要安装的包，确认没有问题后，选择右下角的 Accept License
Android 渗透测试入门教程（内部资料）——daxueba.net 版权所有 
·34· 
单选按钮。然后，单击 Install 按钮开始按钮，如图 1.57 所示。 
图 1.57  开始安装 Packages 
（8）从该界面底部的进度条中，可以看到正在下载并安装选择的 Packages。在进度条
中，可以看到下载的速度，及安装所需要的时间。在安装过程中可以单击进度条右侧的
按
钮，查看安装过程的日志信息，如图 1.58 所示。 
图 1.58  日志信息 
（9）以上组件安装完以后，将返回到 Android SDK Manager 界面。仅选择 Installed 属
性，即只查看已安装的组件，如图 1.59 所示。 
Android 渗透测试入门教程（内部资料）——daxueba.net 版权所有 
·35· 
图 1.59  显示了已安装的组件 
（10）从该界面可以看到已安装的组件，从显示的组件中可以确定 Android SDK 
Plagform-gools 组件已安装。此时，也说明 ADB 工具安装完成。关闭 Android SDK Manager
界面，切换到解压出的 android-sdk-linux 目录中，将看到生成了几个文件，如下所示： 
root@Kali:~/android-sdk-linux/tools# cd .. 
root@Kali:~/android-sdk-linux# ls 
add-ons  build-tools  extras  platforms  platform-tools  samples  SDK Readme.txt  sources  
temp  tools 
从以上输出信息中，可以看到比之前多了几个文件。其中，ADB 工具在 platform-tools
目录中。切换到该目录中，即可看到有一个名为 adb 的可执行文件，如下所示： 
root@Kali:~/android-sdk-linux/platform-tools# ls 
adb  api  dmtracedump  etc1tool  fastboot  hprof-conv  NOTICE.txt  source.properties  
sqlite3  systrace 
从以上输出的信息中，可以看到有一个可执行文件 adb，这说明 ADB 工具安装成功。
但是，如果要使用该工具的话，还需要修改用户的环境变量才可以。否则，无法找到该工具
所在的路径。 
1.5.2  修改用户的环境变量 
为了在 Linux 系统的命令行终端，方便用户使用 Android SDK 提供的各种工具，用户就
需要将 Android SDK 中工具的路径添加到的环境变量中。下面将介绍在 Kali Linux 操作系统
中，设置环境变量的方法。 
在 Linux 系统中，用户环境变量的设置习惯上在“/etc/profile”文件和用户宿主目录中
的“~/.profile”文件中进行。其中，“/etc/profile”是全局配置文件，即对所有用户起作用；
“~/.profile”为用户配置文件（允许覆盖全局配置）。所以，这里修改“~/.profile”文件。
用户也可以在“~/.bashrc”文件中设置，因为“~/.profile”每次运行时都会调用该文件。在
该文件中添加内容格式如下所示： 
Android 渗透测试入门教程（内部资料）——daxueba.net 版权所有 
·36· 
export PATH=${PATH}:/platform-tools 
export PATH=${PATH}:/tools 
以上语法格式中表示 Android SDK 文件夹的路径。因为 Android SDK 提供的工
具保存在/platform-tools 和/tools 中，所以这里添加两个环境变量。本例中的
Android SDK 文件夹保存在/root/android-sdk-linux 中，所以添加内容如下所示： 
root@Kali:~# vi ~/.bashrc 
export PATH=${PATH}:/root/android-sdk-linux/platform-tools 
export PATH=${PATH}:/root/android-sdk-linux/tools 
添加以上内容后，保存并退出文件编辑界面。接下来还需要使该文件的设置生效，执行
如下命令： 
root@Kali:~# source ~/.bashrc 
执行以上命令后，将不会输出任何信息，则表示环境变量设置正确。为了确定该环境变
量是否成功，下面可以通过启动 ADB 工具来验证环境变量设置。 
提示：如果用户没有设置环境变量的话，也可以运行 ADB 工具。但是，每次运行时必
须要输入 ADB 工具所在位置的绝对路径（# ./android-sdk-linux/platform-tools/adb），这样操
作起来比较麻烦。设置环境变量后，在命令行终端直接输入 adb 命令即可运行该工具。 
【实例 1-6】启动 ADB 工具，验证环境变量的设置。执行命令如下所示： 
root@kali:~ # adb 
Android Debug Bridge version 1.0.32 
 -a                            - directs adb to listen on all interfaces for a connection 
 -d                            - directs command to the only connected USB device 
                                 returns an error if more than one USB device is present. 
 -e                            - directs command to the only running emulator. 
                                 returns an error if more than one emulator is running. 
 -s           - directs command to the device or emulator with the given 
                                 serial number or qualifier. Overrides ANDROID_SERIAL 
                                 environment variable. 
 -p      - simple product name like 'sooner', or 
                                 a relative/absolute path to a product 
                                 out directory like 'out/target/product/sooner'. 
                                 If -p is not specified, the ANDROID_PRODUCT_OUT 
                                 environment variable is used, which must 
                                 be an absolute path. 
 -H                            - Name of adb server host (default: localhost) 
 -P                            - Port of adb server (default: 5037) 
 devices [-l]                  - list all connected devices 
                                 ('-l' will also list device qualifiers) 
 connect [:]       - connect to a device via TCP/IP 
                                 Port 5555 is used by default if no port number is specified. 
 disconnect [[:]]  - disconnect from a TCP/IP device. 
                                 Port 5555 is used by default if no port number is specified. 
                                 Using this command with no additional arguments 
                                 will disconnect from all connected TCP/IP devices. 
从输出的信息中，可以看到成功启动了 ADB 工具，并显示了该工具的使用方法及各参
数的详细描述。这说明环境变量设置成功。如果环境变量设置失败的话，将会显示找不到该
命令。 
注意：如果用户在 64 位操作系统中运行该工具的话，将会提示“adb: error while loading 
shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory”错误信
Android 渗透测试入门教程（内部资料）——daxueba.net 版权所有 
·37· 
息。因为该工具是一个 32 位程序，所以需要 32 位操作系统的库文件。此时，用户安装 32
位库文件即可解决该文件。执行命令如下所示： 
root@Kali:~ # apt-get install lib32stdc++6 lib32z1 lib32z1-dev 
1.6  ADB 工具的使用 
ADB（Android Debug Bridge）是 Android SDK 提供的一个通用的调试工具。使用该工
具可以管理 Android 设备或者 Android 模拟器的状态，还可以进行很多的操作，如安装软件、
系统升级、运行 Shell 命令等。本节将对 ADB 工具做一个整体介绍。对该工具很熟悉以后，
用户就可以更好的在电脑上管理 Android 设备或 Android 模拟器了。 
1.6.1  启动和停止 ADB 服务 
使用 ADB 工具时，并不需要手动启动和关闭 ADB 服务。但是，通常模拟器运行一段
时间后，ADB 服务可能会出现异常。导致所有命令都不能准确输出，这时候用户最好先关
闭 ADB 服务，然后再重新启动。 
1.关闭 ADB 服务 
关闭 ADB 服务，执行命令如下所示： 
root@Kali:~/android-sdk-linux/tools# adb kill-server 
执行以上命令后，没有任何输出信息，则表示 ADB 服务已成功关闭。 
2.启动 ADB 服务 
启动 ADB 服务，执行命令如下所示： 
root@Kali:~# adb start-server 
* daemon not running. starting it now on port 5037 * 
* daemon started successfully * 
从输出的信息，可以看到 ADB 服务已成功启动，并且默认监听端口 5037。 
1.6.2  查看 Android 设备 
Android 系统的平板或手机都是真实的 Android 设备，而 Android 模拟器模拟出来的
Android 设备，也被电脑识别为一台实际存在的设备。下面将介绍查看电脑中的真实 Android
设备和 Android 模拟器设备，是否与电脑处于正常的链接状态。执行命令如下所示： 
adb devices 
例如，当前主机运行了一个 Android 模拟器，然后还连接了一个真实的平板。执行以上
命令后，将显示如下所示的信息： 
root@kali:~# adb devices 
List of devices attached  
emulator-5554 device 
0123456789ABCDEF 
device 
从以上输出信息中，可以看到显示了两个设备。其中第一个设备是模拟器中的 Android
设备，另一个是平板设备。 
Android 渗透测试入门教程（内部资料）——daxueba.net 版权所有 
·38· 
1.6.3  安装应用程序 
在安卓系统上安装的应用程序包，后缀名都是.apk。下面将介绍在安卓设备中安装应用
程序的方法，其语法格式如下所示： 
adb install apk 包 