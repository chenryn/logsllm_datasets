### 1.5.1 Android SDK 管理器

**图 1.50: Android SDK 管理器界面**

（3）Android SDK 管理器提供了更新、下载、安装及卸载 Android 开发工具的功能。启动 Android SDK Manager 后，它会自动检测计算机上已安装的 Android SDK 组件，并在界面底部显示检测进度条。该过程可能耗时较长，请用户耐心等待。检测完成后，界面将如图 1.51 所示。

**图 1.51: 检测完成后的 Android SDK Manager 界面**

**注意：** 如果检测过程较慢，可能会对用户体验造成影响。为加快检测速度，可以设置代理服务器。方法如下：
- 在 Android SDK Manager 的菜单栏中选择 `Tools` -> `Options...`，如图 1.52 所示。
- 单击 `Options...` 命令后，将弹出如图 1.53 所示的设置界面。

**图 1.52: 菜单栏**  
**图 1.53: 设置代理**

在该界面中，配置代理服务器的具体步骤如下：
- **HTTP Proxy Server:** 输入代理服务器地址 `mirrors.neusoft.edu.cn`
- **HTTP Proxy Port:** 设置端口号为 `80`
- **勾选 Force https://...sources to be fetched using http://... 前的复选框**

（4）ADB 工具包含在 Tools 文件夹下的特定组件中，因此需要选择并安装这些组件，如图 1.54 所示。

**图 1.54: Tools 文件夹中的组件**

（5）从 Status 列中，可以看到已安装和未安装的组件。建议安装 `Android SDK Platform-tools` 和 `Android SDK Build-tools` 组件。根据需求，用户还可以选择其他组件。如果需要使用模拟器，则需安装支持模拟器硬件的特定组件，如图 1.55 所示。

**图 1.55: Android 4.2.2 (API 17) 特定组件**

**提示：** 关于 Android 模拟器的安装将在后续章节中详细介绍。

（6）选择要安装的组件后，单击 `Install 12 packages` 按钮开始安装，如图 1.56 所示。

**图 1.56: 选择要安装的包**

（7）确认无误后，选择右下角的 `Accept License` 单选按钮，然后单击 `Install` 按钮开始安装，如图 1.57 所示。

**图 1.57: 开始安装 Packages**

（8）安装过程中，可以从底部的进度条查看下载速度和剩余时间。点击进度条右侧的按钮可查看日志信息，如图 1.58 所示。

**图 1.58: 安装日志信息**

（9）安装完成后，返回到 Android SDK Manager 界面，仅选择 `Installed` 属性以查看已安装的组件，如图 1.59 所示。

**图 1.59: 显示已安装的组件**

（10）从该界面可以看到已安装的组件，确认 `Android SDK Platform-tools` 组件已安装，说明 ADB 工具也已成功安装。关闭 Android SDK Manager 界面，切换到解压后的 `android-sdk-linux` 目录，可以看到生成了多个文件，如下所示：

```bash
root@Kali:~/android-sdk-linux/tools# cd ..
root@Kali:~/android-sdk-linux# ls
add-ons  build-tools  extras  platforms  platform-tools  samples  SDK Readme.txt  sources  temp  tools
```

从以上输出信息中，可以看到比之前多了几个文件。其中，ADB 工具位于 `platform-tools` 目录中。切换到该目录中，可以看到一个名为 `adb` 的可执行文件，如下所示：

```bash
root@Kali:~/android-sdk-linux/platform-tools# ls
adb  api  dmtracedump  etc1tool  fastboot  hprof-conv  NOTICE.txt  source.properties  sqlite3  systrace
```

从以上输出的信息中，可以看到有一个可执行文件 `adb`，这说明 ADB 工具安装成功。但要使用该工具，还需要修改用户的环境变量。

### 1.5.2 修改用户的环境变量

为了在 Linux 系统的命令行终端方便地使用 Android SDK 提供的各种工具，用户需要将 Android SDK 中工具的路径添加到环境变量中。下面介绍在 Kali Linux 操作系统中设置环境变量的方法。

在 Linux 系统中，用户环境变量通常在 `/etc/profile` 文件和用户宿主目录中的 `~/.profile` 文件中进行设置。其中，`/etc/profile` 是全局配置文件，对所有用户起作用；`~/.profile` 是用户配置文件（允许覆盖全局配置）。这里我们修改 `~/.profile` 文件。用户也可以在 `~/.bashrc` 文件中设置，因为 `~/.profile` 每次运行时都会调用该文件。在该文件中添加内容格式如下：

```bash
export PATH=${PATH}:/path/to/android-sdk-linux/platform-tools
export PATH=${PATH}:/path/to/android-sdk-linux/tools
```

本例中的 Android SDK 文件夹保存在 `/root/android-sdk-linux` 中，所以添加内容如下：

```bash
root@Kali:~# vi ~/.bashrc
export PATH=${PATH}:/root/android-sdk-linux/platform-tools
export PATH=${PATH}:/root/android-sdk-linux/tools
```

添加以上内容后，保存并退出文件编辑界面。接下来使该文件的设置生效，执行以下命令：

```bash
root@Kali:~# source ~/.bashrc
```

执行以上命令后，如果没有输出任何信息，则表示环境变量设置正确。可以通过启动 ADB 工具来验证环境变量设置是否成功。

**提示：** 如果没有设置环境变量，每次运行 ADB 工具时必须输入其绝对路径（例如 `# ./android-sdk-linux/platform-tools/adb`），这样操作起来比较麻烦。设置环境变量后，在命令行终端直接输入 `adb` 命令即可运行该工具。

【实例 1-6】启动 ADB 工具，验证环境变量的设置。执行命令如下所示：

```bash
root@kali:~ # adb
```

从输出的信息中，可以看到成功启动了 ADB 工具，并显示了该工具的使用方法及各参数的详细描述。这说明环境变量设置成功。如果环境变量设置失败，将会显示找不到该命令的错误信息。

**注意：** 如果在 64 位操作系统中运行该工具，可能会提示以下错误信息：

```
adb: error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory
```

这是因为该工具是一个 32 位程序，需要 32 位操作系统的库文件。此时，用户可以安装 32 位库文件以解决问题。执行命令如下：

```bash
root@Kali:~ # apt-get install lib32stdc++6 lib32z1 lib32z1-dev
```

### 1.6 ADB 工具的使用

ADB（Android Debug Bridge）是 Android SDK 提供的一个通用调试工具。使用该工具可以管理 Android 设备或 Android 模拟器的状态，并进行多种操作，如安装软件、系统升级、运行 Shell 命令等。本节将对 ADB 工具做一个整体介绍，以便用户更好地在电脑上管理 Android 设备或 Android 模拟器。

#### 1.6.1 启动和停止 ADB 服务

使用 ADB 工具时，并不需要手动启动和关闭 ADB 服务。但在某些情况下，如模拟器运行一段时间后，ADB 服务可能会出现异常，导致所有命令都不能准确输出。这时，用户最好先关闭 ADB 服务，然后再重新启动。

1. **关闭 ADB 服务**
   ```bash
   root@Kali:~/android-sdk-linux/tools# adb kill-server
   ```
   执行以上命令后，没有任何输出信息，则表示 ADB 服务已成功关闭。

2. **启动 ADB 服务**
   ```bash
   root@Kali:~# adb start-server
   * daemon not running. starting it now on port 5037 *
   * daemon started successfully *
   ```
   从输出的信息中，可以看到 ADB 服务已成功启动，并且默认监听端口 5037。

#### 1.6.2 查看 Android 设备

Android 系统的平板或手机都是真实的 Android 设备，而 Android 模拟器模拟出来的设备也被计算机识别为一台实际存在的设备。下面将介绍如何查看计算机中的真实 Android 设备和 Android 模拟器设备是否与计算机处于正常连接状态。

执行命令如下：
```bash
adb devices
```

例如，当前主机运行了一个 Android 模拟器，并连接了一个真实的平板。执行以上命令后，将显示如下信息：
```bash
root@kali:~# adb devices
List of devices attached
emulator-5554 device
0123456789ABCDEF device
```

从以上输出信息中，可以看到显示了两个设备。第一个设备是模拟器中的 Android 设备，另一个是平板设备。

#### 1.6.3 安装应用程序

在 Android 系统上安装的应用程序包，后缀名都是 `.apk`。下面将介绍在 Android 设备中安装应用程序的方法，其语法格式如下：
```bash
adb install path/to/your/app.apk
```

希望这些优化后的文本能够帮助你更清晰、连贯地理解和使用 Android SDK 及 ADB 工具。