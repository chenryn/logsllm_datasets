      const {
        data: { photos }
      } = await axios({
        url: "https://api.pexels.com/v1/curated?per_page=11&page=1"
      });
      this.data = photos[0];
    }
  }
};
We moved the header to `main.js` inside the code for our interceptor.
The first argument that’s passed into `axios.interceptors.request.use` is
a function for modifying the request config for all requests.
And the 2nd argument is an error handler for handling error of all requests.
Likewise, we can configure interceptors for responses as well.
#### Adding body to a request
To make a POST request with a request body, we can use the `axios.post` method.
```html
      Create
    {{data}}
```
We make the POST request with the `axios.post` method with the request body in
the second argument. Axios also sets the Content-Type header to
application/json. This enables web frameworks to automatically parse the data.
Then we get back the response data by getting the data property from the resulting response.
#### [Shorthand methods for Axios HTTP requests](https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/#shorthand)
Axios also provides a set of shorthand methods for performing different types of
requests. The methods are as follows:
* `axios.request(config)`
* `axios.get(url[, config])`
* `axios.delete(url[, config])`
* `axios.head(url[, config])`
* `axios.options(url[, config])`
* `axios.post(url[, data[, config]])`
* `axios.put(url[, data[, config]])`
* `axios.patch(url[, data[, config]])`
For instance, the following code shows how the previous example could be written
using the `axios.post()` method:
```javascript
axios.post('/login', {
  firstName: 'Finn',
  lastName: 'Williams'
})
.then((response) => {
  console.log(response);
}, (error) => {
  console.log(error);
});
```
Once an HTTP POST request is made, Axios returns a promise that is either
fulfilled or rejected, depending on the response from the backend service.
To handle the result, you can use the `then()`. method. If the promise is
fulfilled, the first argument of `then()` will be called; if the promise is
rejected, the second argument will be called. According to the documentation,
the fulfillment value is an object containing the following information:
```javascript
{
  // `data` is the response that was provided by the server
  data: {},
  // `status` is the HTTP status code from the server response
  status: 200,
  // `statusText` is the HTTP status message from the server response
  statusText: 'OK',
  // `headers` the headers that the server responded with
  // All header names are lower cased
  headers: {},
  // `config` is the config that was provided to `axios` for the request
  config: {},
  // `request` is the request that generated this response
  // It is the last ClientRequest instance in node.js (in redirects)
  // and an XMLHttpRequest instance the browser
  request: {}
}
```
#### Using interceptors
One of the key features of Axios is its ability to intercept HTTP requests. HTTP
interceptors come in handy when you need to examine or change HTTP requests from
your application to the server or vice versa (e.g., logging, authentication, or
retrying a failed HTTP request).
With interceptors, you won’t have to write separate code for each HTTP request.
HTTP interceptors are helpful when you want to set a global strategy for how you
handle request and response.
```javascript
axios.interceptors.request.use(config => {
  // log a message before any HTTP request is sent
  console.log('Request was sent');
  return config;
});
// sent a GET request
axios.get('https://api.github.com/users/sideshowbarker')
  .then(response => {
    console.log(response.data);
  });
```
In this code, the `axios.interceptors.request.use()` method is used to define
code to be run before an HTTP request is sent. Also,
`axios.interceptors.response.use()` can be used to intercept the response from the
server. Let’s say there is a network error; using the response interceptors, you
can retry that same request using interceptors.
#### [Handling errors](https://stackabuse.com/handling-errors-with-axios/)
To catch errors when doing requests you could use:
```javascript
try {
    let res = await axios.get('/my-api-route');
    // Work with the response...
} catch (error) {
    if (error.response) {
        // The client was given an error response (5xx, 4xx)
        console.log(err.response.data);
        console.log(err.response.status);
        console.log(err.response.headers);
    } else if (error.request) {
        // The client never received a response, and the request was never left
        console.log(err.request);
    } else {
        // Anything else
        console.log('Error', err.message);
    }
}
```
The differences in the `error` object, indicate where the request encountered the issue.
* `error.response`: If your `error` object has a `response` property, it means
    that your server returned a 4xx/5xx error. This will assist you choose what
    sort of message to return to users.
* `error.request`: This error is caused by a network error, a hanging backend
    that does not respond instantly to each request, unauthorized or
    cross-domain requests, and lastly if the backend API returns an error.
    This occurs when the browser was able to initiate a request but did not
    receive a valid answer for any reason.
* Other errors: It's possible that the `error` object does not have either
    a `response` or `request` object attached to it. In this case it is implied that
    there was an issue in setting up the request, which eventually triggered an
    error.
    For example, this could be the case if you omit the URL parameter from the
    `.get()` call, and thus no request was ever made.
#### Sending multiple requests
One of Axios’ more interesting features is its ability to make multiple requests
in parallel by passing an array of arguments to the `axios.all()` method. This
method returns a single promise object that resolves only when all arguments
passed as an array have resolved.
Here’s a simple example of how to use `axios.all` to make simultaneous HTTP requests:
```javascript
// execute simultaneous requests
axios.all([
  axios.get('https://api.github.com/users/mapbox'),
  axios.get('https://api.github.com/users/phantomjs')
])
.then(responseArr => {
  //this will be executed only when all requests are complete
  console.log('Date created: ', responseArr[0].data.created_at);
  console.log('Date created: ', responseArr[1].data.created_at);
});
// logs:
// => Date created:  2011-02-04T19:02:13Z
// => Date created:  2017-04-03T17:25:46Z
```
This code makes two requests to the GitHub API and then logs the value of the
`created_at` property of each response to the console. Keep in mind that if any of
the arguments rejects then the promise will immediately reject with the reason
of the first promise that rejects.
For convenience, Axios also provides a method called `axios.spread()` to assign
the properties of the response array to separate variables. Here’s how you could
use this method:
```javascript
axios.all([
  axios.get('https://api.github.com/users/mapbox'),
  axios.get('https://api.github.com/users/phantomjs')
])
.then(axios.spread((user1, user2) => {
  console.log('Date created: ', user1.data.created_at);
  console.log('Date created: ', user2.data.created_at);
}));
// logs:
// => Date created:  2011-02-04T19:02:13Z
// => Date created:  2017-04-03T17:25:46Z
```
The output of this code is the same as the previous example. The only difference
is that the `axios.spread()` method is used to unpack values from the response
array.
### Veredict
If you’re working on multiple requests, you’ll find that Fetch requires you to
write more code than Axios, even when taking into consideration the setup needed
for it. Therefore, for simple requests, Fetch API and Axios are quite the same.
However, for more complex requests, Axios is better as it allows you to
configure multiple requests in one place.
If you're making a simple request use the Fetch API, for the other cases use axios because:
* It allows you to configure multiple requests in one place
* Code is shorter.
* It allows you to [place all the API calls under services so that these can be
    reused across components wherever they are
    needed](https://medium.com/bb-tutorials-and-thoughts/how-to-make-api-calls-in-vue-js-applications-43e017d4dc86).
* It's easy to set a timeout of the request.
* It supports HTTP interceptors by befault
* It does automatic JSON data transformation.
* It's supported by old browsers, although you can bypass the problem with fetch
    too.
* It has a progress indicator for large files.
* Supports simultaneous requests by default.
Axios provides an easy-to-use API in a compact package for most of your HTTP
communication needs. However, if you prefer to stick with native APIs, nothing
stops you from implementing Axios features.
For more information read:
* [How To Make API calls in Vue.JS Applications by Bhargav Bachina](https://medium.com/bb-tutorials-and-thoughts/how-to-make-api-calls-in-vue-js-applications-43e017d4dc86)
* [Axios vs. fetch(): Which is best for making HTTP requests? by Faraz
    Kelhini](https://blog.logrocket.com/axios-vs-fetch-best-http-requests/)
## [Vue Router](https://router.vuejs.org/guide/)
Creating a Single-page Application with Vue + Vue Router feels natural, all we
need to do is map our components to the routes and let Vue Router know where to
render them. Here's a basic example:
```html
  Hello App!
    ` will render an `` tag with the correct `href` attribute -->
    Go to Home
    Go to About
```
Note how instead of using regular `a` tags, we use a custom component
`router-link` to create links. This allows Vue Router to change the URL without reloading the
page, handle URL generation as well as its encoding.
`router-view` will display the component that corresponds to the url. You can
put it anywhere to adapt it to your layout.
```javascript
// 1. Define route components.
// These can be imported from other files
const Home = { template: 'Home' }
const About = { template: 'About' }
// 2. Define some routes
// Each route should map to a component.
// We'll talk about nested routes later.
const routes = [
  { path: '/', component: Home },
  { path: '/about', component: About },
]
// 3. Create the router instance and pass the `routes` option
// You can pass in additional options here, but let's
// keep it simple for now.
const router = VueRouter.createRouter({
  // 4. Provide the history implementation to use. We are using the hash history for simplicity here.
  history: VueRouter.createWebHashHistory(),
  routes, // short for `routes: routes`
})
// 5. Create and mount the root instance.
const app = Vue.createApp({})
// Make sure to _use_ the router instance to make the
// whole app router-aware.
app.use(router)
app.mount('#app')
// Now the app has started!
```
By calling `app.use(router)`, we get access to it as `this.$router` as well as
the current route as `this.$route` inside of any component:
```vue
// Home.vue
export default {
  computed: {
    username() {
      // We will see what `params` is shortly
      return this.$route.params.username
    },
  },
  methods: {
    goToDashboard() {
      if (isAuthenticated) {
        this.$router.push('/dashboard')
      } else {
        this.$router.push('/login')
      }
    },
  },
}
```
To access the router or the route inside the `setup` function, call the
`useRouter` or `useRoute` functions.
### [Dynamic route matching with params](https://router.vuejs.org/guide/essentials/dynamic-matching.html)
Very often we will need to map routes with the given pattern to the same
component. For example we may have a User component which should be rendered for
all users but with different user IDs. In Vue Router we can use a dynamic
segment in the path to achieve that, we call that a `param`:
```javascript
const User = {
  template: 'User',
}
// these are passed to `createRouter`
const routes = [
  // dynamic segments start with a colon
  { path: '/users/:id', component: User },
]
```
Now URLs like `/users/johnny` and `/users/jolyne` will both map to the same
route.
A `param` is denoted by a colon `:.` When a route is matched, the value of its
params will be exposed as `this.$route.params` in every component. Therefore, we
can render the current user ID by updating User's template to this:
```html
const User = {
  template: 'User {{ $route.params.id }}',
}
```
You can have multiple `params` in the same route, and they will map to
corresponding fields on `$route.params`. Examples:
| pattern                        | matched path             | $route.params                          |
| ---                            | ---                      | ---                                    |
| /users/:username               | /users/eduardo           | { username: 'eduardo' }                |
| /users/:username/posts/:postId | /users/eduardo/posts/123 | { username: 'eduardo', postId: '123' } |
In addition to `$route.params`, the `$route` object also exposes other useful
information such as `$route.query` (if there is a query in the URL),
`$route.hash`, etc.
#### Reacting to params changes
One thing to note when using routes with params is that when the user navigates
from `/users/johnny` to `/users/jolyne`, the same component instance will be reused.
Since both routes render the same component, this is more efficient than
destroying the old instance and then creating a new one. However, this also
means that the lifecycle hooks of the component will not be called.
To react to `params` changes in the same component, you can simply `watch`
anything on the `$route` object, in this scenario, the `$route.params`:
```javascript
const User = {
  template: '...',
  created() {
    this.$watch(
      () => this.$route.params,
      (toParams, previousParams) => {
        // react to route changes...
      }
    )
  },
}
```
Or, use the `beforeRouteUpdate` navigation guard, which also allows to cancel the navigation:
```javascript
const User = {
  template: '...',
  async beforeRouteUpdate(to, from) {
    // react to route changes...
    this.userData = await fetchUser(to.params.id)
  },
}
```
# [Components](https://vuejs.org/guide/essentials/component-basics.html)
Components allow us to split the UI into independent and reusable pieces, and
think about each piece in isolation. It's common for an app to be organized into
a tree of nested components
## Defining a component
When using a build step, we typically define each Vue component in a dedicated
file using the `.vue` extension.
```vue
  You clicked me {{ count }} times.
```
## Using a component
To use a child component, we need to import it in the parent component. Assuming
we placed our counter component inside a file called `ButtonCounter.vue`, the
component will be exposed as the file's default export:
```vue
  Here is a child component!
```
To expose the imported component to our template, we need to register it with
the `components` option. The component will then be available as a tag using the
key it is registered under.
Components can be reused as many times as you want:
```html
Here are many child components!
```
When clicking on the buttons, each one maintains its own, separate count. That's
because each time you use a component, a new instance of it is created.
## Passing props
Props are custom attributes you can register on a component. Vue components
require explicit `props` declaration so that Vue knows what external props passed
to the component should be treated as fallthrough attributes.
```vue
  {{ title }}