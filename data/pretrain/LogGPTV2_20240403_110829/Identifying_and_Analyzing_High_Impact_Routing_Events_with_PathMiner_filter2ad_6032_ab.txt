50
100
150
200
250
300
350
Day
50
100
150
200
250
300
350
Day
50
100
150
200
250
300
350
Day
(a) Preﬁx 1, all changes
(b) Preﬁx 2, all changes
(c) Preﬁx 1, signal
(d) Preﬁx 2, signal
Figure 3: Next-hop changes towards the two preﬁxes of Figure 2 during 2013. An observed next-hop change, by AS j, towards the
subject preﬁx at day k implies value 1 for the element (j, k).
i) X (Ih, Jh, Kh) is a (λ, ν)-event in X , for h = 1, . . . , r; and
is minimized, where: X (h) is a binary
tensor with same size as X , and x(h)
ijk = 1 iff (i, j, k) ∈
h=1 X (h) is deﬁned as the elementwise
r
X −
_h=1
ii) (cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
X (h)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Ih × Jh × Kh; andWr
logical or of X (1), . . . , X (r).
The intuition behind the deﬁnition of Problem 1 is to ﬁnd a
set of r binary tensors that best approximate X as blocks of 1’s.
Moreover, we are only interested in tensors related to (λ, ν)-events.
h=1 X (h) is the best approximation for X that can
be obtained with a rank-r binary tensor, when each X (Ih, Jh, Kh)
is a (λ, ν)-event.
More formally,Wr
Unfortunately, easy ways to solve Problem 1 exactly are not
known. Setting λ = 0 and ν = 0, the problem is equivalent to
the Boolean Tensor Factorization problem studied in [9], which is
known to be NP-hard [18]. Therefore, the more general problem of
(λ, ν)-BTF is also NP-hard.
In summary, this section sets out a deﬁnition that translates the
general notion of identifying high impact events in the global rout-
ing into a speciﬁc problem. Unfortunately this deﬁnition highlights
two difﬁculties: i) complete topologies of the global interdomain
routing system over time are not available; and ii) computing an
exact solution to Problem 1 is hard in general.
In the next sec-
tion we discuss the available data we used and how we address its
incompleteness, and then in Section 5 we describe our heuristic al-
gorithms for ﬁnding solutions to Problem 1.
4. DATASET DESCRIPTION
In this section we present the dataset we used, how we processed
it, and its limitations. Our source of data consisted of BGP RIBs
(Routing Information Bases) made available by RIPE [2] and the
Route Views project [4].
We obtained data from 9 years, from the beginning of 2005 until
the end of 2013, at a daily timescale. For each day and repository
we obtained the RIB made available at 8am (or, if not available,
the closest one). We made the arbitrary choice of 8am in order
to have approximately 24 hours between routing information col-
lected for each day. From the RIBs we extracted all records of
the form route dumping date, preﬁx and AS-path (only data related
to IPv4 preﬁxes). We stored this data on a 12-node cluster in a
Hadoop Distributed File System (HDFS) and, for the most data in-
tensive computations, we used Hadoop [1] and Spark [3]. Table 1
presents a summary of our dataset.
As described in Section 3, our ﬁrst step is to obtain the next-hop
tensor N . To this end, for each entry of the form [date, preﬁx p, AS-
path], where AS-path is given by [AS1, . . . , ASq], we computed
Table 1: Dataset summary
Year
2005
2006
2007
2008
2009
2010
2011
2012
2013
Preﬁxes
286723
331421
400784
438730
506978
543868
626312
879730
850997
ASes
23157
26188
29382
32929
36336
39339
43151
46262
49502
Size (GB)
340
470
640
806
845
939
1154
1397
1745
the q − 1 4-tuples [date, p, ASi, ASi+1], for i = 1, . . . , q − 1.
Each 4-tuple means that at time date, in order to reach preﬁx p, the
source ASi uses as next-hop ASi+1.
Referring to Table 1, it is important to remark that we do not have
routing information from every source to every destination at every
point in time. In this context, missing data can arise mainly for
two reasons: (a) data collection issues and (b) visibility problems
(the RIPE and Route Views RIBs do not capture the complete AS-
topology of the Internet). Note as well that the datasets considered
are large – for recent years, over 1TB each in size.
Fortunately, both of these problems (missing data, and dataset
size) can be signiﬁcantly lessened by carefully selecting a represen-
tative subset of the data. Accordingly, we selected our data subset
by greedily choosing ASes and preﬁxes with most of the next-hop
changes in the network. To that end, using big data tools, we com-
puted the tensor C (Cijk = 1 iff AS j changed next-hop towards
preﬁx i from day k to k + 1) for each of the nine datasets in full.
Next, we computed the total number of changes over the year for
each preﬁx i (as a destination), each AS j (as a source) and for each
pair (i, j). Figures 4(a) and 4(b) present the log-log complemen-
tary CDFs of the total number of changes for preﬁxes and ASes,
respectively. It can be seen that for ASes there is a distinct subset
of heavy-hitters that account for the majority of routing changes.
Going further, Figure 4(c) shows the cumulative number of
changes for a pair (i, j) for the year of 2011. That is, value at row
i and column j of the heat map represents the fraction of changes
corresponding to the i preﬁxes and j ASes with most changes in
the dataset. This ﬁgure provides information about how to greed-
ily, with respect to the number of routing changes, obtain a sample
of ASes and preﬁxes. With regard to ASes it is possible to see
that including more than the top 200 ASes in the sample does not
increase signiﬁcantly the fraction of changes captured.
On the other hand, there are hundreds of thousands of preﬁxes
that experience signiﬁcant levels of routing changes. At the same
time, it is also important to recognize that there exist many sets of
preﬁxes for which routing information is essentially redundant. In
4240
10
−1
10
−2
10
−3
10
−4
10
F
D
C
C
10
−5
0
10
0
10
2005
2006
2007
2008
2009
2010
2011
2012
2013
1
10
2
10
3
10
4
10
5
10
Changes per prefix
(a)
−1
10
F
D
C
C
−2
10
−3
10
10
−4
0
10
2005
2006
2007
2008
2009
2010
2011
2012
2013
2
10
4
10
6
10
8
10
Changes per AS
(b)
(c)
Figure 4: Distributions of the total number of next-hop changes: (a) per preﬁx; (b) per AS; and (c) per pair (AS, preﬁx), for 2011
only. In (c) value at (i, j) indicates the total number of next-hop changes from the ﬁrst j ASes towards ﬁrst i preﬁxes (ASes and
preﬁxes are sorted, in decreasing order, by their number of changes).
Table 2: Summary of the sampled routing changes tensors
Year Density (%) Missing (%)
2005
2006
2007
2008
2009
2010
2011
2012
2013
0.9
1.2
1.5
1.9
1.7
1.6
1.7
1.8
2.3
7.4
8.7
6.7
6.3
8.1
7.0
5.9
7.4
5.5
particular, in many cases preﬁxes originated by the same AS are
routed similarly [6]. For our problem, such sets of preﬁxes add no
additional information about coordinated routing changes.
Hence, in our data subset we chose the top 20000 preﬁxes in
terms of volume of changes, but only allowing at most one pre-
ﬁx hosted in each AS.1 Since the 20000 preﬁxes come from 20000
distinct ASes, and there are only about 50000 ASes active in total,
we expect that this subset captures a large fraction of the distinct
and observable routing changes in our data. That is, the intuition
behind our sampling strategy was to obtain a set of preﬁxes respon-
sible for many changes, and at the same time avoiding the discovery
of blocks with many preﬁxes belonging to the same AS and hence
having identical routing changes.
Table 2 presents statistics about tensor C projected only over the
samples; each sample tensor is of size 20000-by-200-by-364. Note
that because the set of active ASes and preﬁxes has changed over
the 9 year timespan, the sampling procedure was done indepen-
dently for each year. Therefore, the sets of preﬁxes and ASes con-
sidered vary from year to year, in order to capture the maximum
amount of routing changes, and hence results in the remaining of
this work were computed independently for each sample.
Table 2 also shows the percent of missing data, i.e., missing next-
hop entries in the tensor N (projected over the samples). Since
these percentages were reasonably small, we handled missing data
as follows. Suppose that at some point in time k we have Nijk 6= ∅
for some i, j and Ni,j,k+1 = ∅. Because data at time k + 1 is
missing, we cannot know for certain whether: i) AS j cannot reach
preﬁx i at time k + 1 (which would imply that Cijk = 1), or ii)
AS j can reach i at time k + 1 but our data set does not contain
that information (which implies that Cijk can be either 0 or 1). In
1We considered the host of a preﬁx to be the AS advertising the
preﬁx for the ﬁrst time in each year.
light of this limitation we took a conservative approach and deﬁned
Cijk to be 0. Therefore, a 1 in the tensor C means that we deﬁnitely
observe a next-hop change in the data, but a 0 can either imply
that a change did not happen, or that we simply do not know what
happened. Choosing to set these entries to 0 also reﬂects that fact
that zeros comprise the vast majority of known values in our data.
Note that the amount of uncertainty in the routing changes ten-
sors (C) is thus bounded by the 5 to 10% of missing data. This has
implications in the next section for our event extraction. In particu-
lar, we should expect that even when a set of ASes all change their
next-hops for a set of preﬁxes, our data may only show a portion
(e.g., 90%) of those changes – i.e., the observed density of a valid
event may be less than 100%.
Another aspect worth mentioning about the dataset is the pres-
ence of more than one next-hop from some ASes towards some
preﬁxes. In fact, that was the motivation for our deﬁnition of next-
hop change, given in Equation 1, where one can see that we com-
pare sets, instead of elements. Other possible approach would be
to use a ﬁner granularity of the network, where the issue of more
than one next-hop never arises. For instance, such granularity could
be obtained by considering quasi-routers. Unfortunately, the use of
quasi-routers would introduce problems hard to be addressed in our
analyses. For example, which quasi-router observed at a day k cor-
responds to the quasi-routers observed at day k + 1?
In order to provide means to understand how much the issue of
more than one next-hop may affect our results, we computed the
fraction of cases in which |Nijk| > 1 or |Ni,j,k+1| > 1, during
the computation of Cijk, in our nine datasets (before sampling). In
all cases this fraction was below 8%. Furthermore, from the cases
where Cijk = 1 we have that the same fraction is below 30% (in
all datasets).
5. EXTRACTING EVENTS
As previously discussed, at a high level PathMiner consists of
two main steps: (1) ﬁnding high-impact events, and (2) identifying
the most likely network element causing the event. In this section,
we describe our solution to step (1), which is an algorithm for ﬁnd-
ing good solutions to the (λ, ν)-BTF problem.
An attractive solution to the (λ, ν)-BTF problem would be to
start from an existing algorithm for standard Binary Tensor Factor-
ization. Unfortunately, the large size (combined with the density)
of our binary tensors was too much for existing algorithms (e.g., in
[9]) to handle. As a result, we developed a scalable heuristic to ﬁnd
(λ, ν)-events in the routing changes tensor C.
4254
10
e
m
u
o
V
l
3
10
5
10
4
10
e
m
u
o
V
l
3
10
4
10
e
m
u
o
V
l
3
10
2
10
0.7
0.75
0.8
0.85
0.9
0.95
1
2
10
0.7
0.75
0.8
0.85
0.9
0.95
1
2
10
0.7
0.75
0.8
0.85
0.9
0.95
Density
(a)
Density