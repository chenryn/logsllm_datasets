### 5. Extracting Events

As previously discussed, PathMiner consists of two main steps: (1) identifying high-impact events and (2) determining the most likely network element causing the event. In this section, we focus on our solution to step (1), which involves an algorithm for finding good solutions to the (λ, ν)-BTF problem.

#### 5.1. Problem Definition and Challenges

The (λ, ν)-BTF problem aims to find a set of r binary tensors that best approximate the original tensor X as blocks of 1’s, where each block is a (λ, ν)-event. Formally, we define \( X^{(h)} \) as a binary tensor of the same size as X, with \( x_{ijk}^{(h)} = 1 \) if and only if \((i, j, k) \in X^{(h)}\). The logical OR of these tensors, \( W_r = \bigvee_{h=1}^r X^{(h)} \), should minimize the difference from X, while ensuring that each \( X^{(h)} \) is a (λ, ν)-event.

Unfortunately, solving the (λ, ν)-BTF problem exactly is NP-hard, even when λ = 0 and ν = 0, as it reduces to the Boolean Tensor Factorization problem [9, 18]. This highlights two main challenges:
1. **Data Availability**: Complete topologies of the global interdomain routing system over time are not available.
2. **Computational Complexity**: Finding an exact solution to the (λ, ν)-BTF problem is computationally infeasible for large datasets.

#### 5.2. Dataset Description

Our dataset consists of BGP RIBs (Routing Information Bases) from RIPE [2] and the Route Views project [4], covering the period from 2005 to 2013 at a daily timescale. We collected the RIBs at 8am (or the closest available time) to ensure approximately 24-hour intervals between data points. The extracted data includes route dumping dates, prefixes, and AS-paths (IPv4 prefixes only).

Table 1 summarizes the dataset:

| Year | Prefixes  | ASes    | Size (GB) |
|------|-----------|---------|-----------|
| 2005 | 286,723   | 23,157  | 340       |
| 2006 | 331,421   | 26,188  | 470       |
| 2007 | 400,784   | 29,382  | 640       |
| 2008 | 438,730   | 32,929  | 806       |
| 2009 | 506,978   | 36,336  | 845       |
| 2010 | 543,868   | 39,339  | 939       |
| 2011 | 626,312   | 43,151  | 1,154     |
| 2012 | 879,730   | 46,262  | 1,397     |
| 2013 | 850,997   | 49,502  | 1,745     |

We processed the data using Hadoop [1] and Spark [3] on a 12-node cluster with HDFS. For each entry \([date, prefix p, AS-path]\), where AS-path is \([AS1, ..., ASq]\), we computed \( q-1 \) 4-tuples \([date, p, ASi, ASi+1]\) for \( i = 1, ..., q-1 \). Each 4-tuple indicates that at time \( date \), AS \( i \) uses AS \( i+1 \) as the next-hop to reach prefix \( p \).

#### 5.3. Handling Missing Data and Sampling

Missing data can arise due to collection issues and visibility problems. To mitigate this, we selected a representative subset of the data by choosing ASes and prefixes with the most next-hop changes. We computed the tensor \( C \) (where \( C_{ijk} = 1 \) if AS \( j \) changed next-hop towards prefix \( i \) from day \( k \) to \( k+1 \)) for each year.

Figures 4(a) and 4(b) show the log-log complementary CDFs of the total number of changes for prefixes and ASes, respectively. Figure 4(c) presents the cumulative number of changes for pairs \((i, j)\) in 2011. These figures indicate that a small subset of ASes accounts for the majority of routing changes, and including more than the top 200 ASes does not significantly increase the fraction of captured changes.

To avoid redundancy, we chose the top 20,000 prefixes in terms of change volume, but limited to one prefix per AS. Table 2 summarizes the sampled routing changes tensors:

| Year | Density (%) | Missing (%) |
|------|-------------|--------------|
| 2005 | 0.9         | 7.4          |
| 2006 | 1.2         | 8.7          |
| 2007 | 1.5         | 6.7          |
| 2008 | 1.9         | 6.3          |
| 2009 | 1.7         | 8.1          |
| 2010 | 1.6         | 7.0          |
| 2011 | 1.7         | 5.9          |
| 2012 | 1.8         | 7.4          |
| 2013 | 2.3         | 5.5          |

For missing data, we took a conservative approach and defined \( C_{ijk} \) to be 0 if data at time \( k+1 \) is missing. This ensures that a 1 in the tensor \( C \) indicates a definite next-hop change, while a 0 can mean either no change or unknown data.

#### 5.4. Algorithm for (λ, ν)-BTF

Given the computational complexity, we developed a scalable heuristic to find (λ, ν)-events in the routing changes tensor \( C \). Existing algorithms for standard Binary Tensor Factorization were unable to handle the size and density of our tensors. Our heuristic aims to find good approximations of (λ, ν)-events, balancing accuracy and computational feasibility.

In summary, this section outlines the problem definition, dataset, and the approach to handle missing data and sampling. The next section will describe our heuristic algorithms for finding solutions to the (λ, ν)-BTF problem.