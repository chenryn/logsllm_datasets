can associate the Datalog clause [10]
can do(u, t) ← Γ ∧ Ck[i]
variable x in Ck[i] with RG = (N, λ, E) and (cid:87)ni
for each node i ∈ N and edge (i, t(u), j) ∈ E, where Γ is
the conjunction of atoms of the form is user (x) for each
k=1 Ck[i] is
the disjunctive normal form of λ[i]. Let D(RG) be the set
of Datalog clauses built in this way from the reachability
graph RG. (It is straightforward to check that D(RG) is
non-recursive; see [10] for a precise deﬁnition). Formally,
the addition of Γ is needed to make D(RG) a safe Data-
log program (see again [10] for a precise deﬁnition) so that
answering queries always terminates.
After building the Datalog program D(RG), it is straight-
forward to build a run-time monitor. Let U be a ﬁnite set
of users, A ⊆ VAuth be the sub-set of state variables at’s
modeling the interface to the concrete authorization policy
establishing if a user has the right to execute a task, and P be
a Datalog program formalizing an authorization policy (i.e.
P contains a clause of the form is user (u) for each u ∈ U
and clauses whose heads contain only the predicates in A).
We call P a Datalog authorization policy program over the
interface variables in VAuth. (How to write authorization
policies in Datalog is outside the scope of this paper, the in-
terested reader is pointed to [18].) Any assignment over the
states variables in VCF ∪ (VAuth − A) can be represented by
a set Σ of Datalog facts of the forms p, ¬p, ht(u), or ¬ht(u)
for p ∈ VCF and ht ∈ (VAuth − A). We call Σ a partial
Datalog state over the state variables in VCF ∪ (VAuth − A).
Theorem 3.4. Let S = (VCF ∪ VAuth ∪ VUser, Ev S) be a
symbolic security-sensitive transition system, T = (VCF ∪
VAuth, Ev T ) be the associated security-sensitive transition
system for the ﬁnite set U ⊆ U of users, and RG = (N, λ, E)
be the symbolic reachability graph computed by Algorithm 1
when taking as input S and a ﬁnal state formula F . Ad-
ditionally, let P be a Datalog authorization policy over the
Figure 4: Architecture of the implementation
interface variables in VAuth and Σ be a partial Datalog state.
A user u ∈ U can execute task t guaranteeing the satisfac-
tion of all authorization constraints and the termination of
the workﬂow iﬀ the query can do(u, t) is answered positively
by the Datalog program D(RG) ∪ P ∪ Σ.
This is the main result of the paper and guarantees the cor-
rectness of our procedure to synthesize run-time monitors.
It is a consequence of the deﬁnition of Datalog authorization
policy program, partial Datalog state, and Theorem 3.3. No-
tice that when both D(RG) and P are non-recursive (strat-
iﬁed) Datalog programs, queries can be answered very eﬃ-
ciently in LogSpace and can be translated to SQL without
aggregate operators (such as AVG and COUNT).
4. EXPERIMENTS
We have implemented the technique for the automated
synthesis of monitors in a tool whose architecture is de-
picted in Figure 4. On the left (Oﬀ-line), we have a symbolic
model checker (mcmt [17]) that, given a symbolic transi-
tion system representing a workﬂow together with initial
and ﬁnal formulae, computes the reachability graph accord-
ing to Algorithm 1. The graph is then passed to the Datalog
translator—implemented in Python (v2.7.5)—which creates
a Datalog program as explained in Section 3.2. On the right
of Figure 4 (On-line), we use pyDatalog (v0.14.5) as our
Datalog engine to answer authorization queries of the form
“can user u execute task t and guarantee the successful ter-
mination of the workﬂow? ”.
For a ﬁrst evaluation of the scalability of our tech-
nique, we focus on an important class of workﬂows en-
countered in practice, namely those designed according to
a hierarchical decomposition principle. The idea is to
split a complex workﬂow into subﬂows which are again de-
composed into smaller subﬂows up to a desired level of
detail.
Several workﬂows management systems support
this style of workﬂow speciﬁcation following an established
line of works in both academy (see, e.g.,
[23]) and in-
dustry (see, e.g., the “SAP Modeling Handbook,” avail-
able on-line at http://wiki.scn.sap.com/wiki/display/
ModHandbook/Process+Hierarchy). Hierarchic workﬂows
are structured according to the notion of task reﬁnement,
i.e. a task can be reﬁned into a subﬂow. To illustrate, the
workﬂow on the left of Figure 5 contains the task Bookings,
which can be reﬁned by the workﬂow on the right of the
same picture. This means that by replacing task Bookings
with the workﬂow on the right of the ﬁgure, we derive the
workﬂow in Figure 1.
Besides fostering reuse and simplifying maintenance of
complex workﬂows, hierarchic speciﬁcations allow for the de-
velopment of a divide-and-conquer strategy when applying
4.1 Real-world workﬂows
We have experimented with some real-world workﬂows
taken from related works and present here two cases in
details. These examples show the expressiveness of our
approach and illustrate the use of all the basic control-
ﬂow patterns (such as sequence and exclusive choice) be-
sides advanced patterns for arbitrary loops [26]. Figure 6
shows the two examples in extended BPM notation, where—
following [3]—the circles marked by the depiction of a user
leaving a door represent release points and the gray lines
show the authorization constraints. A release point is a spe-
cial event whereby the history of executions of the workﬂow
is erased, so that authorization constraints can be handled
in loops.
Drug dispensation process [4] (left of Figure 6). The
execution of an instance of this workﬂow starts with a Pa-
tient requesting drugs to a Nurse (t1). The Nurse consults
the Patient’s record and sends it to a PrivacyAdvocate (t2),
who decides if this data should be anonymized (t3 and t4).
If the drug prescription has therapeutic notes, they must be
reviewed by a Therapist (t5) and in parallel, a Researcher
can add data related to experimental drugs (t6).
In the
end a Pharmacist either approves or denies the process (t7)
and a Nurse carries out the related tasks: collect and dis-
pense the drugs (t9 and t10) or notify the Patient (t8). A
SoD constraint for this workﬂow, not shown in the Figure, is
(t1, t7,(cid:54)=): the same user cannot act as Patient and Pharma-
cist, so that a Pharmacist cannot dispense drugs to himself.
A workﬂow of this size (10 tasks) would be intractable
for our tool. Thus, we come up with a hierarchic speciﬁ-
cation consisting of two subﬂows to be executed one after
the other; the former is reﬁned to the subﬂow containing
tasks t1, ..., t4 and the latter the subﬂow with tasks t5, ...,
t10. According to some control ﬂow operators, not all tasks
must be executed in the workﬂow for its successful termina-
tion. In fact, tasks t4, t5 and t6 may or may not be executed
depending on certain conditions (e.g., “anonymize? ”) while
tasks t8 and t9 are mutually exclusive. To represent the de-
cisions that have to be taken to complete the workﬂow, we
create transitions for the various branches whose enabling
conditions depend on additional variables—called environ-
ment variables—modeling non-deterministic choices of the
environment. For instance, the fact that task t7 is followed
by the decision point approved? can be represented by the
following two transitions:
ttrue
7
(u) = p6 ∧ p7 ∧ ¬dt7 ∧ app ∧ at7 ∧ ¬ht1(u) →
p6, p7, p10, dt7, ht7(u) := F, F, T, T, T
(u) = p6 ∧ p7 ∧ ¬dt7 ∧ ¬app ∧ at7 ∧ ¬ht1(u) →
tf alse
7
p6, p7, p8, dt7, ht7(u) := F, F, T, T, T .
7
When the environment variable app is true (cf. ttrue
), tasks
t9 and t10 must be executed; when it is false (tf alse
), only
task t8 is executed. Besides permitting the precise represen-
tation of the control ﬂow, environment variables allow for
writing ﬁnal formulae diﬀerentiating between the alternative
execution. For example, assuming a Petri net representation
of the drug dispensation process that has a place p4 after t4
and before t5, we run the model checker on the ﬁrst subﬂow
with the ﬁnal formula
7
(¬p0 ∧ ¬p1 ∧ ... ∧ p4 ∧ dt1 ∧ dt2 ∧ dt3 ∧ dt4) ∨
.
(¬p0 ∧ ¬p1 ∧ ... ∧ ¬p4 ∧ dt1 ∧ dt2 ∧ dt3 ∧ ¬dt4)
Figure 5: Hierarchic speciﬁcation of the trip request
example workﬂow (cf. Figure 1)
i, pl
Algorithm 1. I.e., given a hierarchic workﬂow, it is possi-
ble to compute its monitor for the WSP by ﬁrst computing
the monitors for each of the subﬂows separately and then
“gluing” them together. To understand what we mean by
“gluing,” let us consider the hierarchic workﬂow in Figure 5.
We run the Algorithm 1 ﬁrst on the workﬂow on the left,
on that on the right, and we run the Datalog translator on
the resulting reachability graphs to obtain the Datalog pro-
grams D(RG l) and D(RG r), respectively. Let pl
f and
pr
i , pr
f be the predicates corresponding to the initial and ﬁ-
nal places of the Petri nets representing the workﬂows on
the left and on the right of Figure 5. The Datalog program
for the hierarchic workﬂow (equivalent to the workﬂow in
i ← pl
Figure 1) can be obtained by adding the clauses pr
f
(to transfer the control ﬂow from the workﬂow on the left to
that on the right) and pl
f (to transfer back the control
ﬂow from the workﬂow on the right to that on the left) to
D(RG l)∪ D(RG r) and ﬁnally removing the clauses in which
the identiﬁer of the task Bookings occur. As can be seen in
the example, it is possible to have authorization constraints
that span diﬀerent subﬂows. For each constraint in this case,
a literal ¬ht(u) is added to the corresponding transition in
the symbolic transition system. For instance, the SoD con-
straint (t1, t2,(cid:54)=) adds the literal ¬ht1(u) to the enabling
condition of t2. These literals are unconstrained when each
subﬂow is taken separately, but after the “gluing” process,
they act as any other constraint.
i ← pr
This modular approach to synthesizing monitors has been
implemented in our tool and is key to scalability. In fact,
without using hierarchic speciﬁcations, for a workﬂow with
up to 5 tasks, running Algorithm 1 (the most expensive step
of our technique) takes few seconds on a standard laptop; for
6 tasks, around a minute; and for 7 tasks, already two hours
and a half! Since hierarchic speciﬁcations are so important
for scalability, we have designed and implemented heuristics
that, given monolithic workﬂows, are capable of deriving
equivalent hierarchic speciﬁcations. For lack of space, we
leave their description to future work and assume in the
following that our tool is presented with hierarchic work-
ﬂows. As observed above, hierarchic speciﬁcations of work-
ﬂows are frequently available so that results from exper-
iments on them already give signiﬁcant indications about
the eﬃciency of techniques for synthesizing run-time moni-
tors for the WSP.
Figure 6: Left: Drug dispensation process from [4]. Right: Collateral evaluation workﬂow, from [3]
A similar ﬁnal formula can be derived for the second subﬂow.
The reachability graph computed for the ﬁrst subﬂow con-
tains 200 nodes while that for second 231 nodes. Using a
MacBook laptop (see below for a detailed description of its
conﬁguration), the time spent to compute the reachability
graph and translate it to a Datalog program is around 15s
(roughly, 3s for the ﬁrst and 12s for the second). The time
taken by the synthesized monitor to answer access requests
is almost negligible.
Collateral evaluation workﬂow [3] (right of Figure 6).
It is executed to evaluate a collateral pledge for a loan. The
main diﬀerence with the previous workﬂow is the presence
of loops, exempliﬁed by the decision points Computation
correct? and Approved?. This workﬂow has only 5 tasks, so
we do not need to transform it to an equivalent hierarchic
speciﬁcation. Similarly to conditionals, we add environment
variables to model decision points and suitable transitions
for loops. For instance, task t2 is followed by the decision
point—encoded by the environment variable l1—of the ﬁrst
loop which can be represented by transitions ttrue
when l1
is true and the loop is taken and tf alse
when l1 is false
and the loop is not taken. The enabling condition of the
transitions are analogous to what was shown above while
the updates take into account the use of release points when
updating the history variables ht’s in order to support the
use of authorization constraints in loops as discussed in [3].
The reachability graph for the collateral evaluation pro-
cess has 135 nodes and the time spent for computing it is
around 4s. As before, answering authorization constraints
in the on-line phase is immediate.
4.2 Synthetic benchmarks
2
2
To test the scalability of our approach, we have extended
the generator of random workﬂows used in [12]1 to produce
hierarchic workﬂows. Our generator has the following pa-
rameters: nw, the number of subﬂows and ntw, the number
of tasks in each subﬂow (nt = nw · ntw is the total num-
ber of tasks; nu, the number of users; pa, the authorization