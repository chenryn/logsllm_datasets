title:SGX-Shield: Enabling Address Space Layout Randomization for SGX
Programs
author:Jaebaek Seo and
Byoungyoung Lee and
Seong Min Kim and
Ming-Wei Shih and
Insik Shin and
Dongsu Han and
Taesoo Kim
SGX-Shield: Enabling Address Space Layout
Randomization for SGX Programs
Jaebaek Seo∗§ , Byounyoung Lee†§, Seongmin Kim∗, Ming-Wei Shih‡,
Insik Shin∗, Dongsu Han∗, Taesoo Kim‡
∗KAIST
†Purdue University
‡Georgia Institute of Technology
{jaebaek, dallas1004, ishin, dongsu_han}@kaist.ac.kr, PI:EMAIL, {mingwei.shih, taesoo}@gatech.edu
Abstract—Traditional execution environments deploy Address
Space Layout Randomization (ASLR) to defend against memory
corruption attacks. However, Intel Software Guard Extension
(SGX), a new trusted execution environment designed to serve
security-critical applications on the cloud, lacks such an effective,
well-studied feature. In fact, we find that applying ASLR to SGX
programs raises non-trivial issues beyond simple engineering for
a number of reasons: 1) SGX is designed to defeat a stronger
adversary than the traditional model, which requires the address
space layout to be hidden from the kernel; 2) the limited memory
uses in SGX programs present a new challenge in providing a
sufficient degree of entropy; 3) remote attestation conflicts with
the dynamic relocation required for ASLR; and 4) the SGX
specification relies on known and fixed addresses for key data
structures that cannot be randomized.
This paper presents SGX-Shield, a new ASLR scheme de-
signed for SGX environments. SGX-Shield is built on a secure
in-enclave loader to secretly bootstrap the memory space layout
with a finer-grained randomization. To be compatible with SGX
hardware (e.g., remote attestation, fixed addresses), SGX-Shield
is designed with a software-based data execution protection
mechanism through an LLVM-based compiler. We implement
SGX-Shield and thoroughly evaluate it on real SGX hardware. It
shows a high degree of randomness in memory layouts and stops
memory corruption attacks with a high probability. SGX-Shield
shows 7.61% performance overhead in running common micro-
benchmarks and 2.25% overhead in running a more realistic
workload of an HTTPS server.
I.
INTRODUCTION
Hardware-based security solutions, such as trusted execution
environments, are gaining popularity in today’s market. Intel
SGX is one of such mechanisms readily available in commodity
Intel CPUs since the Skylake microarchitecture. It guarantees
confidentiality and integrity of applications, even if their
underlying components are compromised. More specifically,
SGX provides an isolated execution that protects an application
running inside a secure container, called an enclave, against
potentially malicious system software, including the operating
§This work is done while these authors were visiting and Ph.D. students in
Georgia Institute of Technology.
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes  is  granted  provided  that  copies  bear  this  notice  and  the  full  citation 
on  the  first p a ge. R e production f o r c o mmercial p u rposes i s s t rictly prohibited 
without the prior written consent of the Internet Society, the first-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA 
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23037
system and hypervisor. It also offers hardware-based measure-
ment, attestation, and enclave page access control to verify the
integrity of its application code.
Unfortunately, we observe that two properties, namely,
confidentiality and integrity, do not guarantee the actual
security of SGX programs, especially when traditional memory
corruption vulnerabilities, such as buffer overflow, exist inside
SGX programs. Worse yet, many existing SGX-based systems
tend to have a large code base: an entire operating system as
library in Haven [12] and a default runtime library in SDKs
for Intel SGX [28, 29]. Further, they are mostly written in
unsafe programming languages (e.g., C and C++) or often
in an assembly language to provide direct compatibility with
the Intel SGX hardware and to support its instruction sets.
Running such a large code base inside an enclave altogether
simply makes SGX programs vulnerable to traditional memory
corruption attacks, facing the same security challenges as typical
computer environments. This not only nullifies the security
guarantee that SGX claims to provide, but also, perhaps more
critically, allows attackers to exploit isolation and confidentiality
to lurk—there is no way to know what the compromised
enclave runs, and even worse, no way to analyze or monitor
its execution behavior. For example, by exploiting a stack
overflow vulnerability in a trusted web server or database
server running in an enclave, an adversarial client can launch
traditional return-oriented-programming (ROP) attacks [42, 49]
to disclose security-sensitive data in an enclave, which violates
the confidentiality guarantee of SGX, yet avoiding any runtime
analysis or monitoring thanks to its isolation guarantee.
To defeat such attacks in modern computing systems, many
modern defense mechanisms (e.g., stack canary [20], DEP
[40], CFI [7], etc) have been proposed, implemented, and
deployed recently to significantly raise the bar for exploitation
in practice. Address space layout randomization (ASLR) is
one of the most comprehensive, yet solid defense schemes
proven to be effective in the field. In particular, when properly
implemented, ASLR can provide a statistical guarantee of
preventing all attackers’ attempts. Since ASLR hides the
memory layouts from adversaries by randomly placing code and
data in runtime, it forces the attackers to guess where the victim
code or data is located in order to launch control-flow hijack
or data-flow manipulation attacks. This probabilistic defense
mechanism has demonstrated its effectiveness in thwarting
countless exploitation attempts, and now it is a de-facto security
solution in today’s modern operating systems, including mobile
and server environments.
For this reason, Intel also acknowledges the need for
ASLR in the SGX environment and includes a simple ASLR
scheme for SGX in Intel SGX SDKs for Linux and Windows.
However, we find that Intel’s ASLR design has several critical
limitations that invalidate the security guarantees of ASLR (e.g.,
a whole memory layout is completely known to an adversary,
the malicious operating system). We emphasize that these
limitations are not implementation issues that can be fixed
easily, but originate from fundamental design challenges that
result in conflicts between SGX and ASLR.
This paper uncovers four key challenges in securely deploy-
ing ASLR for SGX:
• The strong, unique attack model of SGX exposes the
enclave memory layout to untrusted system software,
leaving SGX programs completely unprotected by ASLR.
By design, SGX delegates page mapping managements to
untrusted system software, and thus leaks the information
of virtual memory mapping to the underlying software.
Note that this was never a security issue in non-SGX
computing environments where the system software always
serves as the trust computing base of user processes.
• SGX provides the limited memory to an enclave; typically
64 MB or 128 MB in total can be supported [29]. Thus,
ASLR for SGX cannot fully utilize virtual address space,
significantly limiting the degree of randomness and the
security of ASLR.
• ASLR requires a dynamic relocation scheme that updates
relative addresses in the code and data section, which
conflict with the attestation process of SGX; specifically,
SGX finalizes the integrity measurement before an enclave
execution starts, but the relocation for ASLR must be
performed afterwards. This inherent design disagreement
results in writable code pages, nullifying another funda-
mental hardening technique, executable space protection.
• The SGX specification forces the use of a fixed address
for some security-critical data in an enclave. For security
reasons, SGX makes several data structures within an
enclave immutable, exposing such data structures abused
for bypassing ASLR.
To address these issues, this paper proposes SGX-Shield,
a new ASLR scheme for SGX programs. It introduces the
concept of a multistage loader, which pushes back all ASLR-
related operations to its secure in-enclave loader, hiding all
security-sensitive operations from adversaries. To maximize the
degree of randomness of memory layouts, SGX-Shield employs
fine-grained randomization by splitting the code into a set of
randomization units. SGX-Shield also enforces a software data
execution protection (DEP) to guarantee W⊕X (i.e., Write XOR
Execute) in enclave’s code pages and isolates security-sensitive
data structures from adversaries.
We have implemented a prototype of SGX-Shield on Intel
SGX running on both Linux and Windows and evaluated its
security properties and performance overhead. We also verify
that the SGX programs protected with SGX-Shield have a
high degree of entropy to thwart memory corruption attacks
inside the SGX environment, yet with a reasonable performance
overheads: 7.61% on average in the micro-benchmark and
2.25% in the macro-benchmark.
To summarize, this paper makes the following contributions:
Privilege Type
Instruction Description
ring-0
ring-0
ring-0
ring-0
ring-3
ring-3
EXE
MEM
MEM
EXE
EXE
EXE
ECREATE
EADD
EEXTEND
EINIT
EENTER
EEXIT
Create an enclave
Allocate an EPC page to an enclave
Measure 512 bytes of an EPC page
Finalize the enclave initialization
Enter to an enclave
Exit from an enclave
TABLE I: Intel SGX instructions. MEM: Memory management
related; EXE: Enclave execution related.
• New challenges. We identify fundamental challenges in
enabling ASLR for the SGX environment. In particular,
we launch ROP attacks to test the effectiveness of the
current ASLR implementation in Linux and Windows
SDKs for Intel SGX and find that the ASLR is completely
ineffective against strong attackers (e.g., untrusted kernel).
• Defense scheme. We implement SGX-Shield, a new
ASLR implementation for SGX programs that overcomes
the fundamental challenges facing the SGX environment.
SGX-Shield supports both Linux and Windows environ-
ments, and it incorporates a secure in-enclave loader,
software DEP, and software fault isolation all together
to provide truly secure ASLR in the SGX environment.
• Evaluation. We provide a thorough analysis on
SGX-Shield; not only do we conduct performance bench-
marks on the real Intel SGX hardware, but also we provide
the security analysis on our approach.
The rest of this paper is organized as follows. §II pro-
vides background information on Intel SGX and ASLR. §III
elaborates fundamental challenges in deploying ASLR for
the SGX environment. §IV presents a design of SGX-Shield.
§V describes implementation details of SGX-Shield, and §VI
evaluates security effectiveness and performance overheads of
SGX-Shield. §VII discusses impacts of controlled side-channel
attacks against SGX-Shield. §VIII describes related work of
SGX-Shield, and §IX concludes the paper.
II. BACKGROUND
Intel SGX.
Intel SGX is an extension of the x86 instruction
set architecture [39] that allows a user process to instantiate
a protected memory region, called an enclave, inside its own
address space. SGX prevents system components, including the
privileged software (e.g., kernel), from accessing the enclave,
which guarantees integrity and confidentiality of the enclave.
In this subsection, we summarize the enclave setup and the
interaction between an enclave and its host program. The related
SGX instructions are described in Table I.
Enclave initialization: Since instructions for the enclave
initialization must be executed in the ring-0 mode, the kernel
(i.e., SGX device driver) helps a user process initialize the
enclave. The enclave initialization can be categorized into
the following four procedures: creation, memory allocation,
measurement, and finalizing the initialization: (1) ECREATE
creates an enclave within the address space of a user process.
ECREATE requires a public key and the signature of the enclave
program as a parameter; (2) EADD allocates an Enclave Page
Cache (EPC), a physical memory to be used for an enclave,
and then copies specified memory pages in the host process
2
to the EPC. The size of the total physical EPC memory is
predetermined by the BIOS, and the default size is less than
128MB. (3) EEXTEND measures the SHA-256 digest of 512 bytes
of an EPC. Multiple EEXTEND can be invoked to measure more
EPC memory pages as well. (4) EINIT finalizes the initialization,
which lets the CPU verify the integrity of the enclave program
using the measurement result and the pair of the public key
and signature provided in ECREATE. After EINIT, no EPC page
can be added to the enclave and the permissions of EPC pages
cannot be changed1.
While this enclave initialization process indeed guarantees
the integrity of an enclave program, the initial contents of an
enclave program are completely visible to system components
(i.e., the kernel). It is worth noting that the notion of confiden-
tiality in SGX is limited only to the runtime memory contents
after the enclave initialization.
Host-enclave interaction: By the design of SGX, an enclave
cannot directly invoke system calls in the OS. Instead, using
EENTER and EEXIT, each of which allows entrance or exit
between an enclave and host execution contexts, the enclave
can indirectly invoke system calls. Moreover, because EEXIT
allows the enclave to jump into any location of the host, these
two instructions are also used to call the host function from
the enclave.
EENTER needs a Thread Control Structure (TCS) to specify
the entry point of an enclave execution. A TCS is a special EPC,
added by EADD with a TCS flag that contains information for a
thread execution, such as the entry point, the base addresses
of FS/GS segments, the offset of a State Save Area (SSA), etc.
An SSA is a buffer used to save the context of a thread (e.g.,
values of registers) when an interrupt occurs. Since TCS is
critical for the security of enclave programs, SGX prohibits an
explicit access to the TCS after initialization. We explain the
security implication of SSA and TCS in §III.
ASLR. Address space layout randomization (ASLR) is a
powerful memory-protection technique, primarily used to guard
against memory corruption attacks. Without ASLR, memory
corruption vulnerabilities (e.g., buffer overflow) can easily be
exploited by attackers to hijack control-flows or manipulate
data-flows and execute malicious code. By randomizing the
memory layout (e.g., location of executables and data), ASLR
makes it hard for attackers to exploit
the vulnerabilities
because control-flow hijacking or manipulating in-memory data
requires understanding the process memory layout. Thus, ASLR
provides probabilistic defense. In particular, with ASLR, the
operating system randomly places code and data at load time,
making it difficult for attackers to infer the location of code
and data, which forces attackers to rely on bruteforce attacks
on memory layouts.
III. TECHNICAL CHALLENGES
In this section, we articulate the technical challenges in
designing ASLR on an SGX environment (Figure 1).
C1. Strong adversary. Typical ASLR mechanisms are built on
top of an assumption: memory layout is hidden from attackers,
1 In SGX version 2, there are instructions to add EPC pages and change
permissions of EPC pages at the runtime. At the time of writing this paper,
there are no available hardware supporting SGX version 2.
Fig. 1: A workflow of running programs (e.g., executable ELF and PE
files) within a SGX enclave. We identify four fundamental challenges
in securely performing ASLR in this procedural (i.e., marked from
C1 to C4).
which are not valid in an SGX environment. The strong and
unique attack model of SGX exposes the process memory layout
to untrusted system software, leaving SGX programs vulnerable
to traditional exploitation techniques. In initializing enclaves,
the untrusted kernel should coordinate the launching procedure