and semantic heterogeneity needs to be resolved. Structural heterogeneity exists because
Web services use different data structures and class hierarchies to define the parameters
of their interfaces. Furthermore, semantic heterogeneity considers the intended meaning
of the terms employed in labeling input and output parameters. The data that is
interchanged among Web services has to be understood. Semantic conflicts occur when a
Web service output connected to another service or task input does not use the same
interpretation of the information being transferred. The general approach to semantic
integration has been to map the local terms onto a shared ontology. Even though a shared
ontology ensures total integration, constructing such an ontology is costly, if not
impractical; autonomous systems are required to commit to a shared ontology, and
compromises are difficult to maintain when new concepts are added (Rodríguez and
Egenhofer 2002).
The main motivation for our work is the need to enhance workflow systems with
better mechanisms for e-service composition. More precisely, we target the development
of new mechanisms for Web services discovery and integration. Our method is novel and
provides a multidimensional approach to Web service discovery and integration using
syntactic, semantic, and operational metrics of Web services (Figure 4-1).
In this paper, we describe the composition process of e-workflows and present an
algorithm to be employed when designers need to add Web services to an e-workflow. E-
services can be orchestrated with hard-coded applications or by using workflows. We call
a workflow which manages e-services and possibly traditional workflow tasks an e-
workflow. Our approach relies on the use of ontologies to describe workflow tasks and
Web services interfaces. Ontologies-based approaches have been suggested as a solution
138
for information integration that achieves interoperability (Kashyap and Sheth 1994;
Uschold and Gruninger 1996).
Syntactic Description
Syntactic Description
Operational Metrics
Operational Metrics
Semantic Information
Semantic Information
Web Service Discovery Web Service Integration
Figure 4-1 – Multidimensional approach to Web Service Discovery and Integration
The discovery and integration of Web services into e-workflows has specific
requirements and challenges as compared to previous work on information retrieval
systems and information integration systems. In this paper, we describe a methodology
with the aim to give a solution to the following objectives and issues :
• Increase the precision of the discovery process. The search has to be based, not
only on syntactic information, but also on Web services operational metrics and
semantics.
• Tasks and Web services operational metrics need to be represented using a
suitable model describing the QoS metrics of( Cardoso, Sheth et al. 2002).
• Enable the automatic determination of the degree of integration of the discovered
Web services and a workflow host.
• The integration of Web services differs from previous work on schema integration
due to the polarity of the schema that must be integrated. The polarity of schema
forces an output schema to be connected to an input schema. Furthermore, an
input schema needs to have all its input parameters satisfied.W hen a task or Web
service is added to an e-workflow, it is necessary to integrate its input and output
139
schema with the other tasks already present in the process. The input schema (ns)
i
of a new task needs to be integrated with one or more output schema (s ) of the
o,r
tasks connected to it ({s , s , …, s } -> ns). The output schema (ns ) of the
o,1 o,2 o,n i o
new task needs to be integrated with one or more input schema (s ) of the tasks it
i,r
connects to (ns -> {s , s , …, s }). This process does not require a full
o i,1 i,2 i,n
integration of the schema {s , s , …, s } with the schema ns. Only the input
o,1 o,2 o,n i
schema ns needs to have its schema fully integrated, i.e., in order to work
i
properly all its (mandatory) inputs need to be mapped to an output belonging to
one of the schema s . For the integration of the output schema s , the schema
o,r o
{s , s , …, s } are the ones that need to be fully integrated.
i,1 i,2 i,n
• Previous work (Paolucci, Kawamura et al. 2002) on Web service discovery does
not address the interoperability problem. Furthermore, the algorithm developed
does not address the problem of matching outputs/inputs defined in distinct
ontologies. This is a strong limitation. Since Web services are heterogeneous,
autonomous, and developed independently, it is desirable to compare and discover
Web services that have their schema defined by different ontologies .
This paper is structured as follows. Section 4.3 presents a scenario illustrating the
composition of an e-workflow and highlights the difficulties involved. Section 4.4
focuses on the extension of traditional workflow tasks specifications to semantically
describe their interfaces, on the specification of Web services, and on the association of a
QoS model to specify operational metrics for both tasks and Web services. In section 4.5,
we describe the composition process of an e-workflow and the structures that are created
and manipulated; these will later be used in the Web service discovery phase. Section4 .6
represents the core of our work; we present an algorithm that takes into account syntactic,
operational, and semantic information in order to compute the degree of similarity of a
Web service template and a Web service object. The algorithm evaluates the similarity of
140
its arguments based on their degree of integration. Section 4.7 presents the architecture of
the prototype we have developed to demonstrate the concepts introduced in this paper.
Section 4.8 discusses related work, and section 4.9 presents our conclusions.
4.3 SCENARIO
A designer is composing an e-workflow to automatically manage the approval of travel
authorization requests to conferences. A partial view of the workflow design is illustrated
in Figure 4-2. Another interesting example, which could be cast to the e-workflow
composition process, is described in (Barbar, Mehrothra et al. 1996). The workflow
manages the arrangement, cancellation, and postponement of office meetings.
Conference Registry
Hotel Reservation
Service
Service
?
DDaatete
DDuuraratitoionn
CCitiyty
Conference
GGeett ItIitnineerararyry
CCoonnffeerreennccee B
Start A End
IInnffoorrmmaattiioonn
Travel HHootteell
Reservation RReesseerrvvaattiioonn
Employee ID UU As Ase de dr d r dN r N era esam ssm see
GGeett UUsseerr
IInnffoorrmmaattiioonn
Figure 4-2 – Travel Authorization Request e-Workflow
The e-workflow operates in the following way. When an employee desires to attend
a conference, he initializes an instance of the travel authorization request e-workflow.
The first part of the e-workflow is the approval process; it is represented by the letter ‘A’
in the figure. The approval process allows managers to decide if an employee’s request
will be approved (we have hidden this portion of the workflow for brevity to reduce its
complexity.)
141
If the managers approve the request, the next tasks to be executed are Get
Conference Information, Get User Information, Travel Reservation, and Hotel
Reservation. The Get Conference Information task is responsible for obtaining the date,
duration, and the city where the conference is being held, based on the conference name.
To obtain this information a Web service is chosen and linked to a workflow task. The
Get User Information task retrieves the employee’s name and address based on his ID.
The Travel Reservation task is responsible for making a travel reservation according to
the conference date, duration, city; it is also based on the employee’s personal
information. Finally, the Hotel Reservation task makes the necessary hotel reservation
based on the travel itinerary.
Once the tasks involved with the travel and hotel reservation are executed, the
portion of the e-workflow represented by the letter ‘B’ is executed. This part of the e-
workflow is responsible for notifying the user of the travel arrangements made for him.
Let us assume that the designer has already placed the tasks shown in Figure 4-2 on
the canvas. The e-workflow is almost complete; only the Travel Reservation task
realization is missing. The designer manually looks for an appropriate Web service by
browsing the Internet. This process is time consuming, cumbersome, and tedious.
Potentially tens or hundreds of thousands of on-line Web services may be available. Only
hundreds provide the desired functionality, and maybe only a handful provides the
required operational metrics and interface (i.e., input and output parameters).
Furthermore, once a suitable Web service has been found, it needs to be integrated with
the tasks already placed in the workflow. The designer needs to manually establish data
connections among the new Web service and the tasks already present in the e-workflow,
accounting for structural and semantic differences.
142
4.3.1 E-WORKFLOW COMPOSITION PROBLEMS
In the previous scenario, the workflow designer faces two problems: locating a Web
service with the desired functionality and operational metrics to accomplish a specific
task and resolving the structural and semantic differences between the service found and
the tasks and Web services to which it will be connected (using transitions) .
We cannot expect a designer to discover a Web service manually, since potentially
thousands of services are available on the Internet. Thus, efficient discovery mechanisms
must be available. What makes the e-service vision attractive is the ability to
automatically discover the e-services that fulfill users’ needs (Fabio Casati, Ming-Chien
Shan et al. 2001). The discovery of a Web service cannot only be based on its name or
description; it also has to account for its operational metrics and its interfaces.
The composition of e-workflows cannot be undertaken while ignoring the
importance of operational metrics. Trading agreements between suppliers and customers
modeled with e-workflow include the specification of QoS items such as products or
services to be delivered, deadlines, quality of products, and cost of service. The correct
management of such specifications directly impacts the success of organizations
participating in e-commerce and also directly impacts the success and evolution of e-
services itself.
Web services can be seen as black boxes, with an input interface and an output
interface. Since, when integrated into an e-workflow, a Web service has to interoperate at
the interface level with adjacent tasks, the discovery also has to be based on the structural
and semantic properties of its inputs and outputs. Once a Web service is found, it is not
realistic to expect that its interfaces will perfectly match and interoperate with the hosting
e-workflow without additional work. Web services are heterogeneous by nature; we
expect the designer will need to manually establish connections among the Web service
interfaces and the tasks present in an e-workflow. In our example, the designer is faced
143
with the problems of manually connecting the outputs of the tasks Get Conference
Information and Get User Information with inputs of the task Travel Reservation, and
then connecting the outputs of the task Travel Reservation with the inputs of the task
Hotel Reservation. To facilitate this work, a workflow designer should be assisted by
mechanisms that suggest the establishment of a connection between outputs and inputs
that maximizes the degree of integration.
4.4 WORKFLOW TASKS AND WEB SERVICE TASKS
We rely on the use of ontologies to semantically describe task and Web service
interfaces. Semantics have been a strong candidate for increasing the success of
information discovery and integration on the Internet; its use has been presented as the
next step in the evolution of the World Wide Web (Berners-Lee and Fischetti 1999;
Fensel and Musen 2001).
The importance of ontologies is being recognized in research fields as diverse as
knowledge engineering, knowledge representation, qualitative modeling, language
engineering, database design, information modeling, information integration, objec-t
oriented analysis, information retrieval and extraction, knowledge management and
organization, and agent-based systems design (Guarino 1998). Ontologies are introduced
as an “explicit specification of a conceptualization” (Gruber 1993). The use of ontologies
for the explication of knowledge is a possible approach to overcome the problem of
integrating heterogeneous workflow tasks and Web services. In nearly all ontology-based
integration approaches, ontologies are used for the explicit description of the information
source semantics. Therefore, they can be used to describe the semantics of task interfaces,
making their content and function explicit and thus enhancing the integration process .
144
4.4.1 ONTOLOGIES
An ontology W = {c , …,c } contains a set of classes. Each class c has an associated set
i 1 n j
of properties P = {p , …,p }. Each property has a range indicating a restriction on the
k 1 m
values the property can take. An ontology relates more specific concepts to more general
ones (from which generic information can be inherited). Such links have been variously
named “is a,” “subset of,” “member of,” “subconcept of,” “superconcept,” etc. Such links
are used to organize concepts into a hierarchy or some other partial ordering, called a
“taxonomy.” The taxonomy is used for storing information at appropriate levels of
generality and automatically making it available to more specific concepts by means of a
mechanism of inheritance. More general concepts in such a partial order are said to
subsume more specific concepts, and a more specific concept is said to inherit
information from its subsumers. The notion of ontological concepts is very similar to the
notion of classes in object-oriented programming.
In our implementation, tasks and Web services interfaces are semantically described
by concepts (classes) that are defined in ontologies constructed with DAML+OIL
(Horrocks, Harmelen et al. 2001). Our approach is not dependent on DAML+OIL; other
ontology representation languages could be employed. The DAML+OIL specification
enables the creation of ontologies for any domain, and it is a particularly suitable
framework that makes the description of services computer-interpretable and shared.
4.4.2 EXTENDING WORKFLOW TASKS SPECIFICATIONS
In most workflow systems, each task is described by several elements which typically
include a name, a type, a list of input parameters and output parameters, a short textual
description, and a task realization (implementation). A task invocation specifies the
number of input parameters that must be supplied for a proper task realization and the
number of outputs parameters to hold and transfer the results of the task realization to
other tasks. In their simplest form, the input and output parameters can be represented by
145
attributes, or they can follow an object-oriented model represented by data components.
Attributes are specified with an attribute name, a type, and an optional initial value.
Examples of built-in primitive types include Boolean, string, byte, integer, and real. Data
components are represented by classes composed of a collection of attributes. Classes
may form a hierarchy in which inheritance is allowed .
To enhance the integration of tasks and Web services, workflow components need to
have their inputs and outputs associated with ontological concepts (classes). This will
facilitate the resolution of structural and semantic heterogeneity. Since there is a strong
analogy between the attributes and data classes of an object-oriented model and the
concepts classes defined in an ontology, the establishment of mappingsb etween the two
is facilitated. Figure 4-3 illustrates the establishment of such a mapping .
= Time -Ontology
Data Objects Temporal-Entity
XML Schema
Date { Data type hierarchy
WfMS City {...} b byy tt ee mda oy nth T Ini tm ere val T Di om me ain Time-Point {absolute_time}
Duration {...} intyear }
{year, month, day} Date Time {hour, minute, second}
Interfaces
Inputs Outputs Calendar-Date Event
Date {dayOftheWeek, monthOftheYear}
Task Duration Scientific-Event {millisecond}
City
Get Conference = Local ontology
Information Coordinates{x, y}
QQooSS M Mooddeell
Area {name}
City Forrest
Figure 4-3 – Association of task inputs and outputs with concepts
Each input and output data class parameter of a task is associated with an ontological
concept class. We assume a one-to-one mapping between a data class and its associated
concept class; i.e., each attribute of a data class must have a corresponding property that
belongs to the associated concept class. This assumption can be further relaxed by
considering work in schematic heterogeneity (Kashyap and Sheth 1996) and schema
mapping (Madhavan, Bernstein et al. 2001).
146
Primitive data types of attributes (such as byte and double) are represented in the
ontology by properties which reference data types defined in the XML Schema
specification (XMLSchema 2001). It would have been possible to associate primitive
built-in data types with ontological concepts or properties. Nevertheless, we have chosen
XML Schema because it provides a comprehensive data type hierarchy, which includes
unsigned byte, short, decimal, non-negative integer, string, and base 64 binary.
4.4.3 WEB SERVICE SPECIFICATION
The emergence and challenges of e-services have directed the development and creation
of mechanisms to support Web services. One fundamental issue is their specification.
Two main approaches have been proposed. One of the approaches uses declarative and
structured data based purely on syntax, such as WSDL (Christensen, Curbera et al. 2001)
and XLANG (Thatte 2001). A second approach provides a semantic orientation to the
description of Web services. This is the case in the DAML-S specification (Ankolekar,
Burstein et al. 2001).