User: So I'm debugging my python program and have encountered a bug that makes the program hang, as if in an infinite loop. Now, I had a problem with an infinite loop before, but when it hung up I could kill the program and python spat out a helpful exception that told me where the program terminated when I sent it the kill command. Now, however, when the program hangs up and I ctrl-c it, it does not abort but continues running. Is there any tool I can use to locate the hang up? I'm new to profiling but from what I know a profiler can only provide you with information about a program that has successfully completed. Or can you use a profiler to debug such hang ups?
Assistant: It's easier to prevent these hang-ups than it is to debug them.
First: for loops are very, very hard to get stuck in a situation where the loop won't terminate.  Very hard.  
Second: while loops are relatively easy to get stuck in a loop.
The first pass is to check every while loop to see if it must be a while loop.  Often you can replace while constructs with for, and you'll correct your problem by rethinking your loop.
If you cannot replace a while loop with for, then you simply have to prove that the expression in the while statement must change every time through the loop.  This isn't that hard to prove.

Look at all the condition in the loop.   Call this T.
Look at all the logic branches in the body of the loop.  Is there any way to get through the loop without making a change to the condition, T?  

Yes?  That's your bug.  That logic path is wrong.
No?  Excellent, that loop must terminate.