> Author：@intrd  
>  Form： upload-alternative-way-to-easy_php-n1ctf2018/>
This weekend me and @[shrimpgo](https://www.linkedin.com/in/renatocarneirop/)
decided to try some CTF, noticed that [N1CTF2018](http://n1ctf.xctf.org.cn/)
are running. Quickly joined and there's a lot of challenges, but this unsolved
**easy php** called our attention.
I doubt it was easy, several hours of CTF had already passed and it remained
unsolved.
## Challenge details
    Not racing, just enjoying the slow pace of life :)  
    http://47.97.221.96, Mirror: http://47.97.221.96:23333/
**Dockerfile**
    FROM andreisamuilik/php5.5.9-apache2.4-mysql5.5
    ADD nu1lctf.tar.gz /app/  
    RUN apt-get update  
    RUN a2enmod rewrite  
    COPY sql.sql /tmp/sql.sql  
    COPY run.sh /run.sh  
    RUN mkdir /home/nu1lctf  
    COPY clean_danger.sh /home/nu1lctf/clean_danger.sh
    RUN chmod +x /run.sh  
    RUN chmod 777 /tmp/sql.sql  
    RUN chmod 555 /home/nu1lctf/clean_danger.sh
    EXPOSE 80  
    CMD ["/run.sh"]
## Enumeration
Starting the enumeration of provided web service.
There's a login page, If you try to log in with any credential you will
receive the `code error` message. And apparently the username/password check
is not even executed.
Ok, they are leaking this sentence `Code(substr(md5(?), 0, 5) === b5152)`,
looks like part of code checking function.. checking only the **first 5
bytes** of md5("code"). And this 5 bytes changes on every refresh.
> You need to solve a **Proof-Of-Work** , send the result with the login
> request. I believe they did this to minimize brute-force abuse. Very common
> in CTF challenges.
So, I leave this aside and continued my enumeration...
### Source code leaking
By brute-forcing **common filenames and directories** we was able to leak the
entire source code of the web application:
    # Web application files & scripts
    http://47.97.221.96:23333/index.php  
    http://47.97.221.96:23333/config.php  
    http://47.97.221.96:23333/user.php  
    http://47.97.221.96:23333/static
    # Backup files leaking the source code
    http://47.97.221.96:23333/index.php~  
    http://47.97.221.96:23333/config.php~  
    http://47.97.221.96:23333/user.php~
    # PHP scripts without .php extension leaking the views source code
    http://47.97.221.96:23333/views  
    http://47.97.221.96:23333/views/delete  
    http://47.97.221.96:23333/views/index  
    http://47.97.221.96:23333/views/login  
    http://47.97.221.96:23333/views/profile  
    http://47.97.221.96:23333/views/publish  
    http://47.97.221.96:23333/views/register
    # "Useless" phpinfo() running over command line: 
    http://47.97.221.96:23333/views/phpinfo
From the **config.php** source code we are able to extract the **mysql user
password**.
  * MySQL user password: `Nu1L / Nu1Lpassword233334`.
## Local File Inclusion (LFI)
Analyzing the leaked source code we found that
`http://47.97.221.96:23333/index.php?action=login` are vulnerable to LFI.
Now we can read any file on the system that our user have permission w/ this
payload: `http://47.97.221.96:23333/index.php?action=../../etc/passwd`
The provided **Dockerfile** are showing us some interesting info and **file
paths** that we can read using the LFI.
Starting by the `FROM andreisamuilik/php5.5.9-apache2.4-mysql5.5` docker
container confirming the version of **php** , **apache and mysql**.
### /run.sh script
    #!/bin/bash
    chown www-data:www-data /app -R
    if [ "$ALLOW_OVERRIDE" = "**False**" ]; then  
        unset ALLOW_OVERRIDE
    else  
        sed -i "s/AllowOverride None/AllowOverride All/g" /etc/apache2/apache2.conf
        a2enmod rewrite
    fi
    # initialize database
    mysqld_safe --skip-grant-tables&  
    sleep 5  
    ## change root password
    mysql -uroot -e "use mysql;UPDATE user SET password=PASSWORD('Nu1Lctf%#~:p') WHERE user='root';FLUSH PRIVILEGES;"  
    ## restart mysql
    service mysql restart  
    ## execute sql file
    mysql -uroot -pNu1Lctf\%\#~\:p  https, ftps, compress.zlib, compress.bzip2, php, file, glob, data, http, ftp, phar, zip  
    Registered Stream Socket Transports => tcp, udp, unix, udg, ssl, sslv3, tls  
    Registered Stream Filters => zlib.*, bzip2.*, convert.iconv.*, string.rot13, string.toupper, string.tolower, string.strip_tags, convert.*, consumed, dechunk, mcrypt.*, mdecrypt.*
But we cannot find a way to use it because the `require_once
'views/'.$_GET['action'];` this `views/` prefix we need to escape with `../`
in order to get a **LFI** and it not works with the `php://`. **(if u know a
way, plz tell me)**
## MD5 collision PoW
With all enumerated information about the system and even **without a RCE** we
decided to solve the md5 collision to start attacking the login system.
So, the `user.php~` are leaking all the login process details.
Breaking the code into pieces, this `if(substr(md5($_POST['code']),0,
5)!==$_SESSION['code'])` is mandatory to solve in order to poke the
register/login credentials checking functions.
This code is stored in `session cookie` we leak the content but cannot control
it (yet).
If the system return the `Invalid user name` means that we have sent the
correct `code`.
**MD5 first 5 bytes hash collision generator**
We quickly wrote this code to get a valid collision.
## Gaining System Access
Now using the pre-generated code `aklhic` we are able to **create a new user**
browsing to `http://47.97.221.96:23333/index.php?action=register`
Nice, logged in.
Browsing the web application features, we can publish some content.. and set
the `Allow different ip to login`flag to current user. Nothing more..
..nothing more unless you have the `is_admin=1` flag set on your cookie.
As you can see, this flag enables the file sending option, **a good way to get
our RCE**.
#### How to set the is_admin=1?
Code set this flag to 1 if the login/register POST are from the correct IP, I
bet it was `127.0.0.1`.
The `get_ip()` function is strictly reading the `REMOTE_ADDR`, I think i
cannot spoof this value.
#### Trying session cookie code injection
First idea is inject some `` on cookie session file that I can
launch from LFI.
Now we have more information stored on the cookie file, but only `username` I
can control. And this is properly filtered.
This check is blocking invalid usernames. We cannot create a new user with
some code on it.
#### Trying SQL injection
So, our next idea is checking for some SQL injection.
The queries are very simple and the Db() controller are not properly filtering
this. But the code are.
Sometimes it is converting the type to `(int)` before sending to query. It
breaks our SQLi attempts.
In other cases like `insert()` it is filtering using the `preg_match()`.
I think it is possible to bypass the `(int)` sending an `array[]` or something
like this, and I'm sure this is vulnerable to SQLi by other ways, but no
success on my tries. **(if you know how to do this plz tell me)**
#### Object Injection? POP Chain?
We know the unserialize + PHP are **ALWAYS VULNERABLE**.
This `unserialize()` of the `mood object` is very suspicious. Mood class does
not have any php magic function that we can abuse, but the Db{} has.
Ok, but how trigger this?
I created this serialized object locally to a deep inspection.
    mood = $mood;
            $this->ip  = $ip;
            $this->date = time();
        }
        public function getcountry()
        {