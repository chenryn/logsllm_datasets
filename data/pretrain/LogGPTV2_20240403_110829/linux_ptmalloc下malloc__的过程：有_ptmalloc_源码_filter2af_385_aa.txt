# linux_ptmalloc下malloc()的过程：有 ptmalloc 源码
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 文章描述
本文将尽量详细地给出 ptmalloc 下调用 malloc() 进行内存分配的实现过程
###  __libc_malloc() 和 _int_malloc()
实际上，在glibc中没有 malloc(), 只能找到 __libc_malloc() 和 _int_malloc(),而
_int_malloc()才是进行内存分配的函数
### __libc_malloc()
对 _int_malloc() 的简单封装
  1. 检查是否有内存分配钩子
  2. 寻找 arena 来分配内存： arena_get(ar_ptr, bytes);
  3. 调用 _int_malloc() （进行内存的分配）：victim = _int_malloc(ar_ptr, bytes);
## 特殊情况的处理
### 找不到可以用的 arena
_int_malloc()
> 进行内存分配的核心函数
  1. 根据请求内存块的大小以及对应大小的 chunk 所在的 bins/bin 实现了不同的分配算法
  2. 检查 空闲chunk 能否符合需要，符合则分配
  3. 如果所有的 空闲chunk 都不能符合需要，会进行一系列操作，如合并chunk，考虑 top chunk
  4. 当 top chunk 也无法满足时，向操作系统申请内存
_int_malloc() 的变量
    static void *_int_malloc(mstate av, size_t bytes) {
        INTERNAL_SIZE_T nb;  /* normalized request size */
        unsigned int    idx; /* associated bin index */
        mbinptr         bin; /* associated bin */
        mchunkptr       victim;       /* inspected/selected chunk */
        INTERNAL_SIZE_T size;         /* its size */
        int             victim_index; /* its bin index */
        mchunkptr     remainder;      /* remainder from a split */
        unsigned long remainder_size; /* its size */
        unsigned int block; /* bit map traverser */
        unsigned int bit;   /* bit map traverser */
        unsigned int map;   /* current word of binmap */
        mchunkptr fwd; /* misc temp for linking */
        mchunkptr bck; /* misc temp for linking */
        const char *errstr = NULL;
        /*
           Convert request size to internal form by adding SIZE_SZ bytes
           overhead plus possibly more to obtain necessary alignment and/or
           to obtain a size of at least MINSIZE, the smallest allocatable
           size. Also, checked_request2size traps (returning 0) request sizes
           that are so large that they wrap around zero when padded and
           aligned.
         */
        checked_request2size(bytes, nb);
fast bin 和 small bin 分配图
fast bin:LIFO
> 如果申请的内存在 fast bin 范围内
  1. 获得对应的 fast bin 的下标： idx
  2. 获得对应的 fast bin 的头指针：fb
  3. 遍历对应的 fast bin ，检查是否有空闲chunk： 
    * 如果有空闲chunk，检查该 空闲chunk 的大小与索引是否一致
    * 如果没有空闲chunk，去对应的 small bin 中寻找，如果 small bin 中也没有，则进入大循环
  4. 有空闲chunk，获得 头部chunk指针，检查其大小是否符合在对应 fast bin 的范围
  5. 大小符合将其取出，并将获得的 chunk 转换为 mem模式
  6. 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff
        /*
           If the size qualifies as a fastbin, first check corresponding bin.
           This code is safe to execute even if av is not yet initialized, so we
           can try it without checking, which saves some time on this fast path.
         */
        if ((unsigned long) (nb) fd,
                                                                victim)) != victim);
            // 存在可以利用的chunk
            if (victim != 0) {
                // 检查取到的 chunk 大小是否与相应的 fastbin 索引一致。
                // 根据取得的 victim ，利用 chunksize 计算其大小。
                // 利用fastbin_index 计算 chunk 的索引。
                if (__builtin_expect(fastbin_index(chunksize(victim)) != idx, 0)) {
                    errstr = "malloc(): memory corruption (fast)";
                errout:
                    malloc_printerr(check_action, errstr, chunk2mem(victim), av);
                    return NULL;
                }
                // 细致的检查。。只有在 DEBUG 的时候有用
                check_remalloced_chunk(av, victim, nb);
                // 将获取的到chunk转换为mem模式
                void *p = chunk2mem(victim);
                // 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff
                alloc_perturb(p, bytes);
                return p;
            }
        }
small bin:FIFO
> 如果申请的内存在 small bin 范围内
  1. 获取对应的 small bin 的索引
  2. 获取对应的 small bin 的头指针：bin
  3. 获取对应的 small bin 中的最后一个 chunk 的指针： victim
  4. 判断 bin 是否等于 victim 
    * 如果 bin == victim, 说明 small bin 为空 
      * 如果 bin!=victim, 则有两种情况:
      * small bin 还没有初始化：初始化，将 fast bins 中的 chunk 合并
      * small bin 有空闲chunk：
    1. 如果有空闲chunk： 
      * 获得倒数第二个chunk：bck=victim->bk
      * 检查bck->fd 是否为 victim, 防止伪造
      * 设置 victim 的 inuse位
      * unlink：将 victim 指向的 chunk 取下分配，并将获得的 chunk 转换为 mem模式
  5. 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff
        /*
           If a small request, check regular bin.  Since these "smallbins"
           hold one size each, no searching within bins is necessary.
           (For a large request, we need to wait until unsorted chunks are
           processed to find best fit. But for small ones, fits are exact
           anyway, so we can check now, which is faster.)
         */
        if (in_smallbin_range(nb)) {
            // 获取 small bin 的索引
            idx = smallbin_index(nb);
            // 获取对应 small bin 中的 chunk 指针
            bin = bin_at(av, idx);
            // 先执行 victim = last(bin)，获取 small bin 的最后一个 chunk
            // 如果 victim = bin ，那说明该 bin 为空。
            // 如果不相等，那么会有两种情况
            if ((victim = last(bin)) != bin) {
                // 第一种情况，small bin 还没有初始化。
                if (victim == 0) /* initialization check */
                    // 执行初始化，将 fast bins 中的 chunk 进行合并
                    malloc_consolidate(av);
                // 第二种情况，small bin 中存在空闲的 chunk
                else {
                    // 获取 small bin 中倒数第二个 chunk 。
                    bck = victim->bk;
                    // 检查 bck->fd 是不是 victim，防止伪造
                    if (__glibc_unlikely(bck->fd != victim)) {
                        errstr = "malloc(): smallbin double linked list corrupted";
                        goto errout;
                    }
                    // 设置 victim 对应的 inuse 位
                    set_inuse_bit_at_offset(victim, nb);
                    // 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来
                    bin->bk = bck;
                    bck->fd = bin;
                    // 如果不是 main_arena，设置对应的标志
                    if (av != &main_arena) set_non_main_arena(victim);
                    // 细致的检查，非调试状态没有作用
                    check_malloced_chunk(av, victim, nb);
                    // 将申请到的 chunk 转化为对应的 mem 状态
                    void *p = chunk2mem(victim);
                    // 如果设置了 perturb_type , 则将获取到的chunk初始化为 perturb_type ^ 0xff
                    alloc_perturb(p, bytes);
                    return p;
                }
            }
        }
large bin 的分配图
large bin
> 如果申请的内存在 large bin 范围内
  1. 调用 malloc_consolidate: 合并能合并的 fast bin 并放到 unsorted bin 中，对于不能合并的 fast bin 则直接放到 unsorted bin 中
  2. 进行大循环
## 问题
为什么不直接从相应的 bin 中取出 large chunk: 这是ptmalloc 的机制，它会在分配 large chunk 之前对堆中碎片 chunk
进行合并，以便减少堆中的碎片。
        /*
           If this is a large request, consolidate fastbins before continuing.
           While it might look excessive to kill all fastbins before
           even seeing if there is space available, this avoids
           fragmentation problems normally associated with fastbins.
           Also, in practice, programs tend to have runs of either small or
           large requests, but less often mixtures, so consolidation is not
           invoked all that often in most programs. And the programs that
           it is called frequently in otherwise tend to fragment.
         */
        else {
            // 获取large bin的下标。
            idx = largebin_index(nb);
            // 如果存在fastbin的话，会处理 fastbin 
            if (have_fastchunks(av)) malloc_consolidate(av);
        }
大循环分配图
大循环
> 执行到这里有两种情况
>
>   1. 申请 fast/small bin 范围内的内存并且在 fast bin 和 small bin 中找不到大小正好一致的空闲chunk
>   2. 申请 large bin 范围内的内存,在大循环中将会处理对 large chunk 的申请
>
  1. 尝试从 unsorted bin 中分配用户所需内存
  2. 尝试从 large bin 中分配用户所需内存
  3. 尝试从 top chunk 中分配用户所需内存
申请 fast chunk 并执行到了大循环
  1. 尝试合并 fast chunk