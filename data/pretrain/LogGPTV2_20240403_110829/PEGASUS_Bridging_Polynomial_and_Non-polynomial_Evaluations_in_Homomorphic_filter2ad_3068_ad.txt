use two types of gadget vectors in PEGASUS, i.e., the
digit decomposition gadget gdigit and RNS decomposition
gadget grns. Given the decomposition base B > 1 and
d = (cid:100)logB q(cid:101), the gdigit is given as gdigit[i] = Bi. The
takes advantage of the RNS representation
RNS gadget
and the special modulus technique [27]. The grns vector
is given as grns[i] = qq
is a
qi
special modulus. One advantage of grns against the digit
gadget is that grns can render faster multiplications (cid:5) and
(cid:12). However, grns requires a larger modulus, which demands
a larger lattice dimension to guarantee the security of the
encryption scheme. Particularly, we use gdigit in the LWE
switching key (i.e., SwK in Fig. 6) and use grns in the LUT
evaluation key (i.e,. EK in Fig. 6).
)−1 mod qi) where q(cid:48)
(( q
qi
(cid:48)
B. Full Algorithm of PEGASUS
Now we present the full description of PEGASUS in
Fig. 6. PEGASUS uses L > 0 moduli for the RNS
representation and one special modulus q(cid:48) for the gadget
vector. Notice that our gadget vectors gdigit and grns only
involve the ﬁrst modulus q0. Indeed, PEGASUS performs
1063
Figure 4: “Short” matrix example of PEGASUS.LT. (cid:96) = 2
and n = 4. Dotted cells would be omitted in the tiling step.
a ciphertext that encrypts a matrix of (cid:96) rows and (n/(cid:96))
columns where the sum of the column vectors equals to
Mz (see Fig. 4). The post-possessing from Step 6 to Step 7
aims to sum up the encrypted columns, resulting in ctγ that
encrypts a self-repeating vector Ecd (Mz(cid:107)···(cid:107)Mz, ∆r∆(cid:48)r).
It can just be viewed as Ecd (Mz, ∆r∆(cid:48)r) according to
the property of the encoding function. Finally, we use
Rescale(·, ∆r) to reach the speciﬁed scaling factor ∆(cid:48)r, and
then we add t at the end. The proof of Theorem 2 is deferred
to Appendix B.
We compare the computation complexity of Fig. 5 with
the existing approaches in Table III. It is worthy to note that
the computation costs of our method are independent of the
repacking size (cid:96) when (cid:96) ≥ n. In other words, we can repack
a large amount of LWE ciphertexts to an RLWE ciphertext
without introducing extra overheads, which is conﬁrmed
empirically in §VI.
Remark: Fig. 5 can also be used for other interests. For
example, the matrix M can also be given in the form of
encryption as long as it follows the tiling-style encoding.
Indeed, in our secure K-means clustering application (§V),
we reuse Fig. 5 to compute the product of an encrypted
matrix and encrypted vectors.
IV. OUR FRAMEWORK
The full algorithm of PEGASUS includes many speciﬁc
optimization techniques that are already investigated in
previous work. We brieﬂy introduce these techniques here.
machine-word-sized primes, i.e., q = (cid:81)
A. Optimizations
1) RNS and NTT: A well-known technique to optimize
the integer polynomial arithmetic on Rn,q is to use a full
RNS by taking the modulus q as the product of distinct and
qi. One can
achieve up to L× improvement in polynomial arithmetic
Rn,qi.
according to the ring isomorphism Rn,q →
(cid:81)
i∈(cid:104)L(cid:105)
i∈(cid:104)L(cid:105)
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:55 UTC from IEEE Xplore.  Restrictions apply. 
TilingDiagonalsBSGSSumColumns*=Public Parameters:
• Ciphertext moduli q0, q1,··· , qL−1 and a special modulus q(cid:48). Deﬁne Qi =(cid:81)
• Digit decomposition gadget vector gdigit = [1, Bks,··· , Bdks
• RNS decomposition gadget vector grns = [q(cid:48) mod q0].
• Rescaling factors 0  0 and Bdks
l∈(cid:104)i(cid:105)
ql for 1 ≤ i ≤ L.
ks ≥ q0.
Public Keys:
(cid:94)RLWE
s
(cid:16)(cid:80)
• Switching key SwKs→s is a vector of RLWE encryption of s under the key s where the j-th ciphertext
n,q0
is
s[jn + l]X l; gdigit
l∈(cid:104)n(cid:105)
for j ∈ (cid:104)n/n(cid:105). The switching key SwKs→s is deﬁned in a similar way.
• LWE evaluation key EK is a set of GSW encryption of the elements of s under the key s where
EKj,0 ∈ RGSWn,q
s
(I +(s[j]); grns), EKj,1 ∈ RGSWn,q
s
q0
(I−(s[j]); grns) for j ∈ (cid:104)n(cid:105).
(cid:48)
(cid:17)
(cid:48)
q0
(Ecd (v, ∆)).
Speciﬁcally, I +(x) = 1{x ≥ 0} and I−(x) = 1{x ≤ 0}.
s
(Ecd (s, ∆r)).
• Repacking key RK ∈ RLWEn,QL
• Rotation key of the CKKS scheme RotK.
Input:
• A level-l RLWE ciphertext (l > 1) of an encoded vector v ∈ R(cid:96), i.e., ctin ∈ RLWEn,Ql
• A look-up table function T (x) : R (cid:55)→ R.
Output: A RLWE ciphertext ctout ∈ RLWEn,QL(cid:48)
1: Slots to coefﬁcients and drop moduli. ct(cid:48) = S2C(ctin)
2: Extract Coefﬁcients. cti = Extracti(ct(cid:48)) for each i ∈ (cid:104)(cid:96)(cid:105).
3: for i ∈ (cid:104)(cid:96)(cid:105) do
Switch from n to the smaller dimension n.
4:
s
s
(Ecd (T (v), ∆)), i.e., the evaluation of T (x) on the elements of v.
s
s
(∆ˆv)
(∆v[i])
˙cti = PEGASUS.KS(cti, SwKs→s).
(cid:66) ct(cid:48) ∈ RLWEn,q0
(cid:66) cti ∈ LWEn,q0
(cid:66) parallel
(cid:66) ˙cti ∈ LWEn,q0
(cid:66) ¨cti ∈ LWEn,q0
...
cti = (bi, ai) = PEGASUS.KS( ¨cti, SwKs→s).
(cid:66) ...
cti ∈ LWEn,q0
(cid:66) As + b mod q0 = Ecd (T (v), ∆)
(cid:66) ˜ct ∈ RLWEn,QL−1
(cid:66) ctout ∈ RLWEn,QL(cid:48)
(∆v[i])
(∆T (v[i]))
(∆T (v[i]))
s
s
s
s
s
(Ecd (As + b, ∆(cid:48)r))
(Ecd (T (v), ∆))
5:
6:
Evaluate the look-up table. ¨cti = PEGASUS.LUT( ˙cti, EK, T (x)).
Switch from n to the smaller dimension n.
7: end for
8: Deﬁne b = [b0,··· , b(cid:96)−1] and A ∈ Z(cid:96)×n
q0 where the i-th row of A is ai.
9: Evaluate the linear transform ˜ct = PEGASUS.LT(RK, RotK, ∆(cid:48)r, A, b).
10: Evaluate the modulo q0 on ˜ct via Fmod and output the result as ctout.
Figure 6: PEGASUS, Full Protocol
the key-switching (Fig. 9) and the LUT evaluation (Fig. 2)
over the ring R∗,q0 for a various lattice dimension but a ﬁxed
modulus q0 (reasons see below).
The input RLWE ciphertexts of PEGASUS are given in
the RNS representation with l many moduli. PEGASUS ﬁrst
evaluates the slots-to-coefﬁcients function S2C, followed by
Extract to obtain the encoded elements as a set of LWE
ciphertexts (Step 1 and Step 2). As a result, it requires l > 1
since S2C itself might consume 1 or 2 ciphertext moduli.
The computational costs of the following LUT evaluation
and repacking depends on the modulus size of the LWE
ciphertexts. To lighten the computation, PEGASUS drops
all RLWE moduli but keeps the ﬁrst one q0 before Step 3.
As a result, the following key-switching (Step 4 and Step 6)
and LUT (Step 5) take as the input of LWE ciphertexts
from LWE∗,q0 (·) with a varying lattice dimension but a ﬁxed
modulus. Also by using the smallest number of moduli, it
1064
renders smaller switching keys and LUT evaluation keys
(cf. Table IV). The independent LUT evaluations on LWE
ciphertexts from Step 4 to Step 5 can be easily parallelized
by multicores. Finally, PEGASUS repacks a set of LWE
ciphertexts to an RLWE ciphertext by simply using the
implementations of the FLT and Fmod (Step 9-10).
The main computation errors in Fig. 6 come from the
key-switching in Step 4 and Step 6, and the LUT evaluation
in Step 5. We defer the error analysis of these two functions
to Appendix due to the space limit.
that encrypts a polynomial such that ˆm = (cid:80)
Remark: The very recent work from [11] provides a
different primitive for the repacking function. Brieﬂy, given
i=0, they ﬁrst
the LWE ciphertexts {cti ∈ LWEn,q
convert them to an RLWE ciphertext ct ∈ RLWEn,q
( ˆm)
i miX i.
Then they homomorphically evaluate the encoding function
and get ct(cid:48) ∈ RLWEn,q
(Ecd (m0, m1,··· , m(cid:96)−1)). Indeed,
(mi)}(cid:96)−1
s
s
s
(cid:48)
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:55 UTC from IEEE Xplore.  Restrictions apply. 
their conversion part needs O((cid:96) + log(n/(cid:96))) homomorphic
rotations (cf. Table I), and they might need O(√(cid:96)) more
rotations for the encoding step. On the other hand,
the
number of homomorphic rotations used in PEGASUS.LT
(Step 9) is about min(√n,√(cid:96)+log(n/(cid:96))) which is indepen-
dent of the largest lattice dimension n. Also, the complexity
of our instantiation of Fmod from [33] is independent of
the repacking size (cid:96). In conclusion, our method is more
computation-efﬁcient than [11] when (cid:96) is large, e.g., (cid:96) > n.
C. Advanced Features of PEGASUS
For the sake of simplicity, we describe PEGASUS with
one LUT as input in Fig. 6. PEGASUS can provide much
more ﬂexibility. We now introduce its advanced features.
1) Multiple LUTs: We can repeat Step 5 and Step 6 to
evaluate a sequence of LUTs. Also, we can perform addi-
tions and subtractions over the LWE ciphertexts before and
after Step 5. Indeed, one of our application that computes
the index of the minimum value of an encrypted vector
(described in the following section) needs some basic LWE
additions and subtractions between two LUT evaluations.
2) Customizable Encoding Layout: Moreover, we can rear-
range the layout of encoding in Step 9 by just reordering
the rows of A and b. This property is very useful for
many HE-based applications, in which different types of
encoding layout are usually mixed for better performance.
For instance, [38] used two encoding layouts for the secure
evaluation of convolution layers and fully-connected layers.
To switch between different layouts, [38] needs to decrypt
ciphertexts in the middle with a random masking. On the
other hand, such switching of encoding layouts is almost
free in PEGASUS without interactions with the decryptor.
3) Tunable Output Level: The number of moduli (denoted
as L(cid:48)) of the resulting ciphertext from Step 10 depends on
the number of moduli used for constructing the repacking
key RK. This parameter can be changed to a smaller one as
long as it provides enough depths for the Fmod, to tune a
best repacking performance for the speciﬁc application. For
instance, L(cid:48) = 3 might be enough for secure convolution
network inference since the polynomial operations (i.e.,
convolution) between two non-polynomial operations (e.g.,
activation and pooling) consume one multiplicative depth.
To wrap up, the size of the repacking key of PEGASUS
is signiﬁcantly smaller than CHIMERA’s repacking key.
Also, our repacking approach demands O(min(√n,√(cid:96) +
log(n/(cid:96)))) homomorphic rotations which is much lighter
than the repacking method of CHIMERA that needs O(n)
rotations. Moreover, Pegasus can leverage the optimized
NTT/RNS for the underlying arithmetic that is signiﬁcantly
faster than its Torus counterpart used by CHIMERA.
V. APPLICATIONS
In this section, we present some useful applications of PE-
GASUS. Speciﬁcally, we compute some statistical functions
such as reciprocal, min/max, max-pooling, and sorting. Also,
we propose a private decision tree evaluation and a secure
K-means clustering algorithm using PEGASUS.
A. Application I: Basic Non-polynomial Functions
We show some use cases for computing a wide range
of common functions using the look-up tables evaluation of
PEGASUS. Particularly, we compute the following functions
on LWE ciphertexts.
• sigmoid/ReLU/sqrt/reciprocal. Many useful functions
can be evaluated via one LUT, for instance sigmoid, ReLU,
square-root and reciprocal. These functions are commonly
used in machine learning algorithms.
• min/max The min/max of two values m0 and m1 can
be computed as follows
min(m0, m1) = 0.5(m0 + m1) − 0.5|m0 − m1|,
max(m0, m1) = 0.5(m0 + m1) + 0.5|m0 − m1|.
Thus, we can use two LUTs T0(x) = 0.5x and T1(x) =
0.5|x| to compute the min/max on LWE encrypted values.
Also, we can ﬁnd out the min/max of an array by a
min/max-tree. For example, the max of 4 values m0,··· , m3
can be computed as max(max(m0, m1), max(m2, m3)). To
ﬁnd out the min/max of t encrypted elements, in general, we
need to evaluate O(2t) LUTs.
• max-pooling. Max-pooling is a famous operation of
deep learning. Although the average-pooling is more HE-
friendly, it has been proved that the max-pooling can perform
better in many image classiﬁcation tasks [35]. Also, we
notice that the number input t is usually very small for
max-pooling, e.g., t = 4. As long as the scaled maximum
value still follows the range constraint of Algorithm 2, i.e.,
|t · max(m0, m1,··· , mt−1)| < q0/(4∆), we can use a
smaller number of LUTs to compute the max-pooling.
Indeed, we replace each max-operation in the max-tree with
the scaled-max max(cid:48)(m0, m1) = m0 + m1 − |m0 − m1|,
resulting a t-scaled value. The factor t can then be removed
by one extra LUT T2(x) = x/t. In total, we can compute
the max-pooling within O(t) LUTs for a relatively small t.
• sorting. We adapt the bitonic sorting [2] which is data
independent and can be parallelized easily. A bitonic sorting
network uses two types of swap, i.e., ascending swap and
descending swap
ASwap(m0, m1) = min(m0, m1), max(m0, m1)
DSwap(m0, m1) = max(m0, m1), min(m0, m1).
In other words, each swap needs two LUTs since the min and
max function computes the same LUTs. To sort an array of
t encrypted elements, our bitonic sorting network evaluates
O(2t log2
• min-index/max-index. The min-index (resp. max-index)
function takes as input of an array m0, m1,··· , mt−1 and
returns a binary sequence (b0, b1,··· , bt−1) such that bk = 1
2 t) LUTs.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:55 UTC from IEEE Xplore.  Restrictions apply. 
1065
iff. mk is the min (resp. max) value of the the array. We ﬁrst
compute the min (resp. max) value of the array by a min-tree