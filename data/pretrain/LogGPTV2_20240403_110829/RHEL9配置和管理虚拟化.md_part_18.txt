    ``` literallayout
    # virsh dumpxml DN1
    ...
      ...
      ...
    ...
    ```
2.  使用 `virt-xml`{.literal} 实用程序以及 `--edit`{.literal} 参数。
    例如，以下命令会删除附加到 `DN1`{.literal} 虚拟机的 CD 驱动器中的
    `DrDN`{.literal} ISO 镜像。
    ``` literallayout
    # virt-xml DN1 --edit target=sda --disk path=
    Domain 'DN1' defined successfully.
    ```
:::
::: itemizedlist
**验证**
-   运行虚拟机，检查镜像已不再可用。
:::
::: itemizedlist
**其他资源**
-   `man virt-xml`{.literal} 命令
:::
:::
::: section
::: titlepage
## []{#managing-virtual-devices_configuring-and-managing-virtualization.html#removing-optical-drives-from-virtual-machines_managing-virtual-optical-drives}从虚拟机中删除光驱 {.title}
:::
要删除附加到虚拟机的光驱，编辑虚拟机的 XML 配置文件。
::: orderedlist
**流程**
1.  定位 CD-ROM 附加到虚拟机的目标设备。您可以在虚拟机 XML
    配置文件中找到这些信息。
    例如，以下命令显示 `DN1`{.literal} 虚拟机的 XML 配置文件，其中
    CD-ROM 的目标设备为 `sda`{.literal}。
    ``` literallayout
    # virsh dumpxml DN1
    ...
      ...
    ...
    ```
2.  使用带有 `--remove-device`{.literal} 参数的 `virt-xml`{.literal}
    工具。
    例如，以下命令从 `DN1`{.literal} 虚拟机中删除作为目标
    `sda`{.literal} 的光驱。
    ``` literallayout
    # virt-xml DN1 --remove-device --disk target=sda
    Domain 'DN1' defined successfully.
    ```
:::
::: itemizedlist
**验证**
-   确认该设备不再列在虚拟机 XML 配置文件中。
:::
::: itemizedlist
**其他资源**
-   `man virt-xml`{.literal} 命令
:::
:::
::: section
::: titlepage
## []{#managing-virtual-devices_configuring-and-managing-virtualization.html#_additional_resources_2}其他资源 {.title}
:::
::: itemizedlist
-   [将设备附加到虚拟机](#managing-virtual-devices_configuring-and-managing-virtualization.html#attaching-devices-to-virtual-machines_managing-virtual-devices "将设备附加到虚拟机"){.link}
:::
:::
:::
::: section
::: titlepage
# []{#managing-virtual-devices_configuring-and-managing-virtualization.html#managing-sr-iov-devices_managing-virtual-devices}管理 SR-IOV 设备 {.title}
:::
模拟虚拟设备通常使用比硬件网络设备更多的 CPU
和内存。这可能会限制虚拟机的性能。但是，如果您的虚拟化主机上的任何设备都支持单根
I/O
虚拟化(SR-IOV)，您可以使用此功能提高设备性能，还可能使用虚拟机的整体性能。
::: section
::: titlepage
## []{#managing-virtual-devices_configuring-and-managing-virtualization.html#what-is-sr-iov_managing-sr-iov-devices}什么是 SR-IOV? {.title}
:::
单根 I/O 虚拟化(SR-IOV)是一种规范，它允许单个 PCI
Express(PCIe)设备向主机系统呈现多个单独的 PCI 设备，称为
[*虚拟功能*]{.emphasis} (VF)。这样的每个设备：
::: itemizedlist
-   提供与原始 PCI 设备相同的或类似的服务。
-   出现在主机 PCI 总线的不同地址上。
-   可使用 VFIO 分配功能分配到不同的虚拟机。
:::
例如，单个具有 SR-IOV 的网络设备可以向多个虚拟机显示 VF。虽然所有 VF
都使用相同的物理卡、相同的网络连接和同一网络电缆，每个虚拟机直接控制自己的硬件网络设备，并且不使用来自主机的额外资源。
::: title
**SR-IOV 的工作原理**
:::
SR-IOV 功能可能会因为引进了以下 PCI 功能：
::: itemizedlist
-   [**物理功能(PF)**]{.strong} - 一个 PCIe
    功能向主机提供设备的功能（如联网），但也能够创建和管理一组
    VF。每个具有 SR-IOV 功能的设备都有一个或多个 PF。
-   [**虚拟功能(VF)**]{.strong} - 充当独立设备的轻量级 PCIe 功能。每个
    VF 都是从 PF 中派生的。一个设备可依赖于设备硬件的最大 VF 数。每个 VF
    每次只能分配给一个虚拟机，但虚拟机可以分配多个 VF。
:::
VM 将 VF 识别为虚拟设备。例如，SR-IOV 网络设备创建的 VF
显示为分配的虚拟机的网卡，其方式与物理网卡出现在主机系统一样。
::: figure
[]{#managing-virtual-devices_configuring-and-managing-virtualization.html#idm139624709877872}
**图 13.1. SR-IOV 架构**
::: figure-contents
::: mediaobject
![Virt SR IOV](images/virt_SR-IOV.png)
:::
:::
:::
::: title
**优点**
:::
使用 SR-IOV VF 而不是模拟设备的主要优点是：
::: itemizedlist
-   提高的性能
-   减少主机 CPU 和内存资源使用量
:::
例如，附加到虚拟机作为 vNIC 的 VF 在与物理 NIC
几乎相同级别执行，比半虚拟化或模拟 NIC
更好。特别是，当在单一主机上同时使用多个 VF 时，性能会非常显著。
::: itemizedlist
**缺点**
-   要修改 PF 的配置，您必须首先将 PF 公开的 VF
    数更改为零。因此，您还需要从虚拟机中删除这些 VF 提供的设备。
-   附加了 VFIO 分配设备的虚拟机（包括 SR-IOV
    VF）无法迁移到另一台主机。在某些情况下，您可以使用模拟设备对分配的设备进行约束。例如，您可以将分配的网络
    VF [绑定](https://access.redhat.com/solutions/67546){.link}到模拟
    vNIC，并在迁移前删除 VF。
-   此外，VFS
    分配的设备需要固定虚拟机内存，这会增加虚拟机的内存消耗并防止在虚拟机上使用内存膨胀。
:::
::: itemizedlist
**其他资源**
-   [SR-IOV
    分配支持的设备](#managing-virtual-devices_configuring-and-managing-virtualization.html#supported-devices-for-sr-iov-assignment-in-rhel_managing-sr-iov-devices "SR-IOV 分配支持的设备"){.link}
:::
:::
::: section
::: titlepage
## []{#managing-virtual-devices_configuring-and-managing-virtualization.html#attaching-sr-iov-networking-devices-to-virtual-machines_managing-sr-iov-devices}将 SR-IOV 网络设备附加到虚拟机 {.title}
:::
要将 SR-IOV 网络设备附加到 Intel 或 AMD
主机上的虚拟机(VM)，您必须从主机上具有 SR-IOV
的网络接口创建一个虚拟功能(VF)，并将 VF
分配为指定虚拟机。详情请查看以下步骤。
::: itemizedlist
**先决条件**
-   您的主机的 CPU 和固件支持 I/O 内存管理单元(IOMMU)。
    ::: itemizedlist
    -   如果使用 Intel CPU，它需要支持 Intel Virtualization Technology
        for Directed I/O (VT-d)。
    -   如果使用 AMD CPU，则必须支持 AMD-Vi 功能。
    :::
-   主机系统使用访问控制服务(ACS)为 PCIe
    拓扑提供直接内存访问(DMA)隔离。使用系统厂商验证这一点。
    如需更多信息，请参阅[实施 SR-IOV
    的硬件注意事项](https://access.redhat.com/documentation/en-us/red_hat_virtualization/4.0/html/hardware_considerations_for_implementing_sr-iov/index){.link}。
-   物理网络设备支持 SR-IOV。要验证系统中的任何网络设备是否支持
    SR-IOV，请使用 `lspci -v`{.literal} 命令并在输出中查找
    `Single Root I/O Virtualization (SR-IOV)`{.literal}。
    ``` literallayout
    # lspci -v
    [...]
    02:00.0 Ethernet controller: Intel Corporation 82576 Gigabit Network Connection (rev 01)
    	Subsystem: Intel Corporation Gigabit ET Dual Port Server Adapter
    	Flags: bus master, fast devsel, latency 0, IRQ 16, NUMA node 0
    	Memory at fcba0000 (32-bit, non-prefetchable) [size=128K]
    [...]
    	Capabilities: [150] Alternative Routing-ID Interpretation (ARI)
    	Capabilities: [160] Single Root I/O Virtualization (SR-IOV)
    	Kernel driver in use: igb
    	Kernel modules: igb
    [...]
    ```
-   用于创建 VF 的主机网络接口正在运行。例如：要激活 [*eth1*]{.emphasis}
    接口并验证它正在运行：
    ``` literallayout
    # ip link set eth1 up
    # ip link show eth1
    8: eth1:  mtu 1500 qdisc mq state UP mode DEFAULT qlen 1000
       link/ether a0:36:9f:8f:3f:b8 brd ff:ff:ff:ff:ff:ff
       vf 0 MAC 00:00:00:00:00:00, spoof checking on, link-state auto
       vf 1 MAC 00:00:00:00:00:00, spoof checking on, link-state auto
       vf 2 MAC 00:00:00:00:00:00, spoof checking on, link-state auto
       vf 3 MAC 00:00:00:00:00:00, spoof checking on, link-state auto
    ```
-   要使 SR-IOV 设备分配正常工作，必须在主机 BIOS 和内核中启用 IOMMU
    功能。要做到这一点：
    ::: itemizedlist
    -   在 Intel 主机上启用 VT-d：
        ::: itemizedlist
        -   如果您的 Intel 主机使用多个引导条目：
            ::: orderedlist
            1.  编辑 `/etc/default/grub`{.literal} 文件，并在
                [*GRUB_CMDLINE_LINUX*]{.emphasis} 行末尾添加
                `intel_iommu=on`{.literal} 和 `iommu=pt`{.literal}
                参数：
                ``` programlisting
                GRUB_CMDLINE_LINUX="crashkernel=auto resume=/dev/mapper/rhel_dell-per730-27-swap rd.lvm.lv=rhel_dell-per730-27/root rd.lvm.lv=rhel_dell-per730-27/swap console=ttyS0,115200n81 intel_iommu=on iommu=pt"
                ```
            2.  重新生成 GRUB 配置：
                ``` literallayout
                # grub2-mkconfig -o /boot/grub2/grub.cfg
                ```
            3.  重启主机。
            :::
        -   如果您的 Intel 主机使用单个引导条目：
            ::: orderedlist
            1.  使用 `intel_iommu=on iommu=pt`{.literal} 参数重新生成
                GRUB 配置：
                ``` literallayout
                # grubby --args="intel_iommu=on iommu=pt" --update-kernel DEFAULT
                ```
            2.  重启主机。
            :::
        :::
    -   在 AMD 主机上启用 AMD-Vi：
        ::: itemizedlist
        -   如果您的 AMD 主机使用多个引导条目：
            ::: orderedlist
            1.  编辑 `/etc/default/grub`{.literal} 文件，并在
                [*GRUB_CMDLINE_LINUX*]{.emphasis} 行末尾添加
                `iommu=pt`{.literal} 参数：
                ``` programlisting
                GRUB_CMDLINE_LINUX="crashkernel=auto resume=/dev/mapper/rhel_dell-per730-27-swap rd.lvm.lv=rhel_dell-per730-27/root rd.lvm.lv=rhel_dell-per730-27/swap console=ttyS0,115200n81 iommu=pt"
                ```