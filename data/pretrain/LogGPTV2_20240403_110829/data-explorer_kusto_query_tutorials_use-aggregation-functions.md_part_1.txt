---
title:  'Tutorial: Use aggregation functions in Kusto Query Language'
description: This tutorial describes how to use aggregation functions in the Kusto Query Language.
ms.topic: tutorial
ms.date: 05/16/2023
---
# Tutorial: Use aggregation functions
[Aggregation functions](../aggregation-functions.md) allow you to group and combine data from multiple rows into a summary value. The summary value depends on the chosen function, for example a count, maximum, or average value.
In this tutorial, you'll learn how to:
> [!div class="checklist"]
>
> * [Use the summarize operator](#use-the-summarize-operator)
> * [Visualize query results](#visualize-query-results)
> * [Conditionally count rows](#conditionally-count-rows)
> * [Group data into bins](#group-data-into-bins)
> * [Calculate the min, max, avg, and sum](#calculate-the-min-max-avg-and-sum)
> * [Calculate percentages](#calculate-percentages)
> * [Extract unique values](#extract-unique-values)
> * [Bucket data by condition](#bucket-data-by-condition)
> * [Perform aggregation over a sliding window](#perform-aggregations-over-a-sliding-window)
The examples in this tutorial use the `StormEvents` table, which is publicly available in the [**help** cluster](https://help.kusto.windows.net/Samples). To explore with your own data, [create your own free cluster](../../../start-for-free-web-ui.md).
This tutorial builds on the foundation from the first tutorial, [Learn common operators](learn-common-operators.md).
## Prerequisites
* A Microsoft account or Microsoft Entra user identity to sign in to the [help cluster](https://dataexplorer.azure.com/clusters/help)
## Use the summarize operator
The [summarize](../summarize-operator.md) operator is essential to performing aggregations over your data. The `summarize` operator groups together rows based on the `by` clause and then uses the provided aggregation function to combine each group in a single row.
Find the number of events by state using `summarize` with the [count](../count-aggregation-function.md) aggregation function.
> [!div class="nextstepaction"]
> Run the query
```Kusto
StormEvents
| summarize TotalStorms = count() by State
```
**Output**
|State|TotalStorms|
|--|--|
|TEXAS|4701|
|KANSAS|3166|
|IOWA|2337|
|ILLINOIS|2022|
|MISSOURI|2016|
|...|...|
## Visualize query results
Visualizing query results in a chart or graph can help you identify patterns, trends, and outliers in your data. You can do this with the [render](../render-operator.md) operator.
Throughout the tutorial, you'll see examples of how to use `render` to display your results. For now, let's use `render` to see the results from the previous query in a bar chart.
> [!div class="nextstepaction"]
> Run the query
```Kusto
StormEvents
| summarize TotalStorms = count() by State
| render barchart
```
:::image type="content" source="../media/kql-tutorials/total-storms-by-state-bar-chart.png" alt-text="Screenshot of total storms by state bar chart created with the render operator.":::
## Conditionally count rows
When analyzing your data, use [countif()](../countif-aggregation-function.md) to count rows based on a specific condition to understand how many rows meet the given criteria.
The following query uses `countif()` to count of storms that caused damage. The query then uses the `top` operator to filter the results and display the states with the highest amount of crop damage caused by storms.
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| summarize StormsWithCropDamage = countif(DamageCrops > 0) by State
| top 5 by StormsWithCropDamage
```
**Output**
|State|StormsWithCropDamage|
|--|--|
|IOWA|359|
|NEBRASKA|201|
|MISSISSIPPI|105|
|NORTH CAROLINA|82|
|MISSOURI|78|
## Group data into bins
To aggregate by numeric or time values, you'll first want to group the data into bins using the [bin()](../bin-function.md) function. Using `bin()` can help you understand how values are distributed within a certain range and make comparisons between different periods.
The following query counts the number of storms that caused crop damage for each week in 2007. The `7d` argument represents a week, as the function requires a valid [timespan](../scalar-data-types/timespan.md) value.
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| where StartTime between (datetime(2007-01-01) .. datetime(2007-12-31)) 
    and DamageCrops > 0
| summarize EventCount = count() by bin(StartTime, 7d)
```
**Output**
|StartTime|EventCount|
|---|---|
|2007-01-01T00:00:00Z|16|
|2007-01-08T00:00:00Z|20|
|2007-01-29T00:00:00Z|8|
|2007-02-05T00:00:00Z|1|
|2007-02-12T00:00:00Z|3|
|...|...|
Add `| render timechart` to the end of the query to visualize the results.
> [!div class="nextstepaction"]
> Run the query
:::image type="content" source="../media/kql-tutorials/crop-damage-by-week-time-chart.png" alt-text="Screenshot of the crop damage by week time chart rendered by the previous query.":::
> [!NOTE]
> `bin()` is similar to the `floor()` function in other programming languages. It reduces every value to the nearest multiple of the modulus that you supply and allows `summarize` to assign the rows to groups.
## Calculate the min, max, avg, and sum
To learn more about types of storms that cause crop damage, calculate the [min()](../min-aggregation-function.md), [max()](../max-aggregation-function.md), and [avg()](../avg-aggfunction.md) crop damage for each event type, and then sort the result by the average damage.
Note that you can use multiple aggregation functions in a single `summarize` operator to produce several computed columns.
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| where DamageCrops > 0
| summarize
    MaxCropDamage=max(DamageCrops), 
    MinCropDamage=min(DamageCrops), 
    AvgCropDamage=avg(DamageCrops)
    by EventType
| sort by AvgCropDamage
```
**Output**
|EventType|MaxCropDamage|MinCropDamage|AvgCropDamage|
|--|--|--|--|
|Frost/Freeze|568600000|3000|9106087.5954198465|
|Wildfire|21000000|10000|7268333.333333333|
|Drought|700000000|2000|6763977.8761061952|
|Flood|500000000|1000|4844925.23364486|
|Thunderstorm Wind|22000000|100|920328.36538461538|
|...|...|...|...|
The results of the previous query indicate that Frost/Freeze events resulted in the most crop damage on average. However, the [bin() query](#group-data-into-bins) showed that events with crop damage mostly took place in the summer months.
Use [sum()](../sum-aggregation-function.md) to check the total number of damaged crops instead of the amount of events that caused some damage, as done with `count()` in the previous [bin() query](#group-data-into-bins).
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| where StartTime between (datetime(2007-01-01) .. datetime(2007-12-31)) 
    and DamageCrops > 0
| summarize CropDamage = sum(DamageCrops) by bin(StartTime, 7d)
| render timechart
```
:::image type="content" source="../media/kql-tutorials/sum-crop-damage-by-week.png" alt-text="Screenshot of time chart showing crop damage by week.":::
Now you can see a peak in crop damage in January, which probably was due to Frost/Freeze.
> [!TIP]
> Use [minif()](../minif-aggregation-function.md), [maxif()](../maxif-aggregation-function.md), [avgif()](../avgif-aggregation-function.md), and [sumif()](../sumif-aggregation-function.md) to perform conditional aggregations, like we did when in the [conditionally count rows](#conditionally-count-rows) section.
## Calculate percentages
Calculating percentages can help you understand the distribution and proportion of different values within your data. This section covers two common methods for calculating percentages with the Kusto Query Language (KQL).
### Calculate percentage based on two columns
Use [count()](../count-aggregation-function.md) and [countif](../countif-aggregation-function.md) to find the percentage of storm events that caused crop damage in each state. First, count the total number of storms in each state. Then, count the number of storms that caused crop damage in each state.
Then, use [extend](../extend-operator.md) to calculate the percentage between the two columns by dividing the number of storms with property damage by the total number of storms and multiplying by 100.