注意：有时候我们也用acquire（获取）来表示获取锁定：以 release（释放）来
Read-Write LockPattern的所有参与者如下：
表示解除锁定。
sharedResource
Read-WriteLock—-—大家想看就看吧，不过看的时候不能写喔
Aedr
图 6-3Read-Write Lock Pattern 的类图
writelokck
1
readwriteLock
ShacadResourca
Uses 
Wries
1
Wzitor
u
---
## Page 188
适合读取操作繁重时
参与者可以同时进行read，以提升程序的性能。
不会改变 SharedResource 参与者的状态，所以不需要进行共享互斥。多个 Reader
利用同时“读取”不会冲突的特性，提高程序的性能
扩展思考方向的提示
（当有一个 ReaderWriter 参与者在写入，Reader 参与者与其他的 Writer 参与者在等待时）
单纯使用 Single Threaded Execution Patterm（第1章）时，就连read的操作，
Hoade.
（当 Reader 参与者在读取，Writer 参与者在等待时）
图6-5Read-Write Lock Patterm 的时序图
图6-4 Read-Write Lock Pattrn 的时序图
H-!rit
rlt
T+Ld
#t1t
---
## Page 189
掉共享互斥，是因为 Immutable 参与者的内部状态绝不会改变。
Immutable Pattern（第2章）
补充说明：分离物理性的锁定
个物理性的锁定，就是ReadWriteLock实例的锁定。
的锁定。但是实例实做这两种逻辑上的锁定，其实只用到了一个物理性的锁定。这
可以更改锁定的行为机制。
自己实现的。这就是所谓的逻辑上的锁定。当程序员改写ReadWriteLock 类时，就
synchronized 获取的锁定意义上并不同。这不是Java 语言制订的机制，而是程序员
理性的锁定。Java 程序无法去改变这种锁定的行为。
里，实现在Java执行环境里的机制。因为是一开始就提供的功能，我们称为所谓物
定”，同·个实例的锁定无法山两个以上的线程所获取。这是制订在Java 语言规格
锁定的意义
这样无法展现 Read-Write Lock Pattern 的优点。
写入（write）的操作频率较高时，Writer 参与者会经常阻挡 Reader 参与者的进行，
适合读取比写入次数频繁时
的复杂，若read的操作很简单（不花时间）时，使用 Single Threaded Execution Pattern
可能性能反而较高。
--次也只有--条线程可以执行。如果read 的操作特别繁重（花时间），那使用
相关Pattern
在ReadWriteLock类中，提供了“读访问锁定”、“写入用锁定”等两种逻辑”
而 Read-Write Patterm 则是只去掉Reader 参与者之间的共享互斥，以求提高程
Immutable Patterm 不对线程进行共享互斥，就能提升程序的性能。之所以能去
关于分离物理上的锁定，可参考附录E的[Lea]与[Holub00]等著述。
Read-Write Lock Patterm 的优点在于Reader 参与者之间不会起冲突。不过，当
Read-Write Lock-
一大家想看就看吧，不过看的时候不能写喔
第6章
8
---
## Page 190
Writer 参与者的 write 操作等待才行。而 Writer 参与者进行 write 操作时，Reader 参
同的共享互斥操作是一种浪费。因为 Reader 参与者之间没有共享互斥的必要。
参与者，read 操作不会改变 SharedResource 参与者的状态，而 write 则会。
Strategized Locking Pattern（参考附录 E [POSA2])
执行得比 write 频繁很多。这时，若我们以对 Reader 参与者、Writer 参!与者进行相
享互斥。
配合使用。
Before/After Pattern（参考附录E[Lea])
Pattem
Guarded Suspension Pattern (第 3 章)
Single Threaded Execution Pattern (第 1 章)
SharedResource参与者，可说是“在不作写入操作时是 immutable 的”。
所以Reader 参与者之间可以不用进行共享互斥。Read-Write Lock Patterm 的
序性能。因为 SharedResource 参与者的内部状态，只有在进行写操作时才会变化，
互斥方式，提升程序的性能。
Writer参与者线程可以执行。
个线程可以执行。
然而，完全不作共享互斥又很危险。当 Reader 参与者进行read 时，必须要求
重点回顾
Reader 参与者会进行 read 操作，Writer 参与者会进行 write 操作，mi read 操作
而 Strategized Locking Patterm 将同步的机制参数化，能进行更有可伸缩性的共
Read-Write Lock Patterm 中，以活用 Reader 参与者与 Writer 参与者特征的共亨
Read-Write Lock Pattem 的 RcadWriteLock 参与者，使册到了 Guarded Suspension
而 Read-Write Lock Patterm 则限制程序中--段特定的部分，同时只能有一个
为了忘记 Read-Write Lock Pattern 忘记解除锁定，需与 Read-Write Lock Pattern
Single Threaded Execution Pattern 则限制程序中一段特定的部分，同时只能有一
这一章我们学习了 Read-Write Lock Pattern。
---
## Page 191
[List 6-6 修改了范例程序的 Data类(List 6-2），使程序完全没用到 ReadWriteLock
请就您对范例程序的认知，在下列语句中，正确的请回答○，不正确的请回答
以必须妥善思考警戒条件。
尤其足当read操作繁重时，可使程序性能大幅地上升。
的锁定。进行上述复杂的共享互斥操作。
与者与其他Writer 参与者也有等待的必要。
练习问题
实现时，会使用到Guarded Suspension Pattern（第3章）来进行共享互斥，所
这样一来，就能兼颐 SharedResource 参与者的安全性，也能使程序的性能提高
于是，我们引进了ReadWriteLock 参与者的概念，对 read、write 操作分别提供
Java 语言i!，使用 finally可以避免忘记解除锁定：
public class Data l
类，请问执行程序List6-6，会出现什么结果呢？
问题6-2（完全不使用到锁定的情况）
问题6-1（基础知识的确认）
解答请见附录A
那么，就进入练习问题吧，
这就是 Read-Write Lock Pattern。
（4）某个线程正在执行 doRead 方法时，writingWriters 字段的值定是0。
（3）某个线程正在执行 doWrite方法时，readingReaders字段的值定是0。
（1）doWrite方法不会同时被数个线程来执行
X：
（2）doRead方法不会同时被数个线程来执行。
List 6-6
 private final char[] buffer;
public char[] read() throws InterruptedException
public Data(int size) {
return doRead();
for （int i = O; i    =  u） 1og
return doRead();
Read-Write Lock-
Thread.sleep(50);
slowly();
buffer[i] = c;
newbuf[i] = buffer[i];
一大家想看就看吧，不过看的时候不能写喔
i++)
第6草
---
## Page 194
Java移线程造研模改
Before/After Pattern（参考附录E[Lea]）可以用来保证方法的执行顺序。使用
8
public class Data l
那么，若将Data类（List 6-2）改写成下面List 6-8的形式，会发生什么问题呢
Java实现Before/After Pattern时，通常会像下面这样写：
问题 6-5（Before/After Pattern)
一
（将readLock 方法或 writeLock 方法也写在try 块里）。
个 Before/After Pattern.
业
上例中，调用execute(之前一定会调用 before 方法，并能确保after 方法也一定
finally f
ry f 
before();
List 6-8
被调用到。例如 Data类（List 6-2）的read 方法、write 方法中，就用到了这
 public void write(char c) throws InterruptedException
public char[! reaa() throws InterruptedException 
public Data(int size) {
private final ReadwriteLcck lock = new ReadWriteLock();
private final char[l buffer;
execute{);
after();
try f 
tryl
this.buffer = new char[size];
for (int i = O; i  O) {
readingReaders++;
try { 
for (int i = O; i < buffer.length; i++)
catch (InterruptedException e) {
return newbuf;
slowiyll:
for (int i = O; i < buffer.length; i++) {
char[] newbuf = new char[buffer.length];
Read-Write Lock-
wait{);
 Thread.sleep(50);
简化的 ReadwriteLock 类（ReadWriteLock.java)
slowlyi);
buffer[i] = 
newbuf[i] = buffer[i}; 
一大家想看就看吧，不过看的时候不能写喔
/；（a）实际正在读取的线程数量加1
//（b)..实际正在写入的线程数量
/！(a)..实际正在读取的线程数量
钟6章
---
## Page 196
ava回答这个问题请先做完问题6-6，
（1）当WriterThread 的线程执 writeUnlock时，在 this（ReadWriteLock 类的
对于具有 perferWriter 字段的范例程序，请同答下列问题：
问题6-7（确认理解是否正确）
（2）当ReaderThread的线程执行readUnlock时，
public synchronized void writeUnlock() {
实例）上wait 的只有 ReaderThread 的线程。
(以下省略。CTRL+C结束程序）
实例）上 wait 的只有 WriterThread 的线程。
Thread-2 reads
Thread-5 reads
Thread-4 reads
Thread-3 reads
Thread-1 reads 
Thread- reads ********
Thread-5 reads
Thread-4 reads 
notifyAll();
writingwriters--;
writingwriters+t;
notifyAll();
readirgReaders--;
waiti);
*********
*********
*********
**********
*********
**********
图6-6执行范例
了解perferWriter字段的用途后再开始作答。
长时间读到的字符都没有改变
//（b）实际正在写入的线程数量减1
（（b）实际正在写入的线程数量加1
//（a)
实际正在读取的线程数量减1
在 this（ReadWriteLock 类的
---
## Page 197
Thread-Per-Message
你了
这个工作交给
第7章
---
## Page 198
所示。
项委托的T作。启动的线程，会使用Helper类实际进行显示操作。类的说明如表 7-1
范例程序中，Main 类会委托 Host类显示文字。Host类会启动·个线程，来处理这
你了”。
会是不同的线程。也就像是委托消息的线程，对执行消息的线程说“这个“作交给
分配-个线程，由这个线程执行丨作，这就是Thread-Per-Message Pattem。
线程”。message在这里可以看作是“命令”或“请求”的意思。对每个命令或请求，
个I作交给你了”以后，就回来继续做自已的事。
帮忙倒--下垃圾喔”。--个人将工作拜托别人去做，是很常见的事情。拜托别人“这
范例程序
接下来就来研读使用 Thread-Per-Message Pattern 的范例程序吧。在这里要写的
范例程序的类图如图7-1 所示.
Helper
Host
这·章中要学习的是 Thread-Per-MessagePattern。
上司把文件交给下属，指示“能帮我传真这份文件吗？”。妻了对先生说“老公，
名
 Main
--—---
称
图7-1范例程序的类图
表7-1类一览表
提供显示文本功能的被动类
用来对收到的要求建立线程的类
用来对Host送出显示文本要求的类
request
Helper
Host
说
U'ses
handle
明