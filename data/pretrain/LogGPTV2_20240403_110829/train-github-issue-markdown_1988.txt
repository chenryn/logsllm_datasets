I'm having an issue that foces me to rewrite the type of a function parameter
to 'any' instead of 'typeof SomeSuperClass' because a subclass that extends
that superclass, but has _another constructor signature_ cannot be passed into
that function anymore. Is this expected behavior? My intuition says no. I've
read that it has to do with some Javascript function type check conflict
because of the use of 'typeof', but currently I don't see another clean way to
pass a class type as an argument in a function. without resolving to strings.
And the use of 'typeof' seems to break when a subclass has another constructor
signature.
See code, where function foo(..) accepts the subclass with equal constructor
signature, but rejects the other subclass which has another constructor
signature:
**TypeScript Version:**
1.7.5
**Code**
    class Super {
        private a: number;
        constructor(a : number) {
            this.a = a;
        }
    }
    class SubSameConstructor extends Super {
        private b: number;
        constructor(a : number) {
            super(a);
            this.b = a;
        }
    }
    class SubDifferentConstructor extends Super {
        private b: number;
        constructor(a : number, b: number) {
            super(a);
            this.b = b;
        }
    }
    function foo(classParam: typeof Super) {
        console.log(classParam);
    }
    foo(SubSameConstructor); // works
    foo(SubDifferentConstructor); // TS2345: Argument of type 'typeof SubDifferentConstructor' is not assignable to parameter of type 'typeof Base'.
**Expected behavior:**  
Being able to pass a subclass with different constructor signature into a
function that accepts an argument of type 'typeof Super' to pass class types.
**Actual behavior:**  
The last function call does not compile.