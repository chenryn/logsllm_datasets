Apple Terminal window
在命令提示符下输入`docker --version`，点击*进入*。如果 Mac 的 Docker 安装正确，您应该会得到如下输出:
```
$ docker --version
Docker version 18.02.0-ce-rc2, build f968a2c
```
要查看是否可以运行容器，请在终端中输入以下命令，然后点击*进入*:
```
$ docker run hello-world
```
如果一切顺利，您的输出应该如下所示:
![](img/ff77456d-ab8b-44d5-a3c6-783482ff62ed.png)
Running the Hello World container on Docker for Mac
恭喜，您现在已经准备好使用 Docker 容器了。
# 为窗口安装 Docker
注意，您只能在 Windows 10 Professional 或 Windows Server 2016 上安装 Docker for Windows，因为它需要 Hyper-V，而 Hyper-V 在旧的 Windows 版本或 Windows 10 的家庭版上不可用。如果您使用的是 Windows 10 Home 或旧版本的 Windows，则需要坚持使用 Docker 工具箱。
导航至以下链接，在[https://docs.docker.com/docker-for-windows/install/](https://docs.docker.com/docker-for-windows/install/)下载 Windows Docker。
There is a stable version and a so-called edge version of the tool available. In this book, we are going to use some newer features and Kubernetes, which at the time of writing are only available in the edge version. Thus, please select this version.
要开始安装，请单击“获取 Windows Docker(边缘)”按钮，并按照说明进行操作。
使用 Docker for Windows，您可以开发、运行和测试 Linux 容器和 Windows 容器。然而，在这本书里，我们只讨论了 Linux 容器。
一旦成功安装了窗口 Docker，打开一个 PowerShell 窗口，在命令提示符下键入`docker --version`。您应该会看到如下内容:
```
PS> docker --version
Docker version 18.04.0-ce, build 3d479c0 
```
# 用 Hyper-V 在 Windows 上使用文件机
如果你的笔记本电脑上安装了视窗 Docker，那么你也可以启用 Hyper-V。在这种情况下，您不能使用 Docker 工具箱，因为它使用 VirtualBox，Hyper-V 和 VirtualBox 不能同时共存和运行。在这种情况下，您可以将`docker-machine`与 Hyper-V 驱动程序一起使用。
以管理员身份打开 PowerShell 控制台。使用巧克力安装`docker-machine`，如下所示:
```
PS> choco install -y docker-machine
```
使用以下命令在 Hyper-V 中创建一个名为`boot2docker`的虚拟机:
```
PS> docker-machine create --driver hyperv --hyperv-virtual-switch "My Internal Switch" boot2docker
```
注意，您必须在管理员模式下运行前面的命令，否则它将失败。
您应该会看到由前面的命令生成的以下输出:
```
Running pre-create checks...
(boot2docker) Image cache directory does not exist, creating it at C:\Users\Docker\.docker\machine\cache...
(boot2docker) No default Boot2Docker ISO found locally, downloading the latest release...
(boot2docker) Latest release for github.com/boot2docker/boot2docker is v18.01.0-ce
....
....
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: C:\Program Files\Doc
ker\Docker\Resources\bin\docker-machine.exe env boot2docker
```
要了解如何将 Docker 客户端连接到在此虚拟机上运行的 Docker 引擎，请运行以下命令:
```
C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe env boot2docker
```
列出由`docker-machine`生成的所有虚拟机，我们得到以下输出:
```
PS C:\WINDOWS\system32> docker-machine ls
NAME          ACTIVE   DRIVER   STATE     URL               SWARM   DOCKER        ERRORS
boot2docker   -        hyperv   Running   tcp://[...]:2376          v18.01.0-ce
```
现在，让我们将 SSH 引入我们的`boot2docker`虚拟机:
```
PS> docker-machine ssh boot2docker
```
迎接你的应该是欢迎屏幕。
我们可以通过执行`docker version`命令来测试虚拟机，如下所示:
![](img/6630106a-3e4e-49a0-8cd5-cb83372a1814.png)
Version of the Docker client (CLI) and server
这绝对是一个 Linux 虚拟机，正如我们在`OS/Arch`条目上看到的，并且安装了 Docker `18.03.0-ce-rc4`。
# 迷你库比
如果您不能将 Docker 用于 Mac 或 Windows，或者由于某种原因，您只能访问尚不支持 Kubernetes 的旧版本工具，那么安装 Minikube 是个好主意。Minikube 在您的工作站上配置了一个单节点 Kubernetes 集群，并且可以通过**Kubernetes**访问，这是一个用于与 Kubernetes 一起工作的命令行工具。
# 在 Mac 和 Windows 上安装 Minikube
要为 Mac 或 Windows 安装 Minikube，请导航至以下位于[https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)的链接。
请仔细遵循说明。如果您安装了 Docker 工具箱，那么您的系统上已经有了虚拟机管理程序，因为 Docker 工具箱安装程序也安装了 VirtualBox。否则，我建议您先安装 VirtualBox。
如果你安装了 Docker for Mac 或 Windows，那么你已经安装了`kubectl`，因此你也可以跳过这一步。否则，请按照网站上的说明操作。
最后，为苹果或视窗的 Minikube 选择最新的二进制文件并安装。对于 Mac 来说，最新的二进制文件叫做`minikube-darwin-amd64`，对于 Windows 来说就是`minikube-windows-amd64`。
# 测试 Minikube 和 kubectl
一旦 Minikube 成功安装在您的工作站上，请打开一个终端并测试安装。首先，我们需要启动 Minikube。在命令行输入`minikube start`。输出应该如下所示:
![](img/9f64bd7c-a2fd-428c-8821-5bd30b2c2df8.png)
Starting Minikube
现在进入`kubectl version`点击*进入*看到如下截图:
![](img/3ba21592-eb3f-4cd3-b928-d8f9a41ec99e.png)
Determining the version of the Kubernetes client and server
如果前面的命令失败，例如超时，那么可能是您的`kubectl`没有配置正确的上下文。`kubectl`可用于处理许多不同的 Kubernetes 集群。每个集群称为一个上下文。要找出`kubectl`当前配置的上下文，请使用以下命令:
```
$ kubectl config current-context
minikube
```
答案应该是`minikube`，如前面的输出所示。如果不是这样，使用`kubectl config get-contexts`列出系统中定义的所有上下文，然后将当前上下文设置为`minikube`，如下所示:
```
$ kubectl config use-context minikube
```
存储上下文的`kubectl`的配置通常在`~/.kube/config`中找到，但是这可以通过定义一个名为`KUBECONFIG`的环境变量来覆盖。如果在您的计算机上设置了此变量，您可能需要将其取消设置。
有关如何配置和使用 Kubernetes 上下文的更多详细信息，请参考[https://Kubernetes . io/docs/concepts/configuration/organize-cluster-access-kube nfig/](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/)上的链接。
假设 Minikube 和`kubectl`按预期工作，我们现在可以使用`kubectl`获得关于 Kubernetes 集群的信息。输入以下命令:
```
$ kubectl get nodes
NAME       STATUS    ROLES     AGE       VERSION
minikube   Ready         47d       v1.9.0
```
显然，我们有一个由一个节点组成的集群，在我的例子中，它安装了 Kubernetes `v1.9.0`。
# 摘要
在本章中，我们设置和配置了我们的个人或工作环境，以便我们可以高效地使用 Docker 容器。这同样适用于开发人员、开发人员和运营工程师。在这种情况下，我们确保使用一个好的编辑器，安装 Docker for Mac 或 Windows，并且还可以使用`docker-machine`在 VirtualBox 或 Hyper-V 中创建虚拟机，我们可以使用这些虚拟机来运行和测试容器。
在下一章中，我们将学习关于容器的所有重要事实。例如，我们将探索如何运行、停止、列出和删除容器，但除此之外，我们还将深入剖析容器。
# 问题
根据您对本章的阅读，请回答以下问题:
1.  `docker-machine`是干什么用的？说出三到四个场景。
2.  是真是假？使用窗口 Docker，可以开发和运行 Linux 容器。
3.  为什么好的脚本技能(如 Bash 或 PowerShell)对容器的高效使用至关重要？
4.  说出 Docker 被认证运行的三到四个 Linux 发行版。
5.  命名所有可以运行 Windows 容器的 Windows 版本。
# 进一步阅读
请考虑以下链接进行进一步阅读:
*   *在超 V 上运行 Docker，Docker 机器位于*[http://bit.ly/2HGMPiI](http://bit.ly/2HGMPiI)