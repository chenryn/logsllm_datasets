---
title: JavaScript
date: 2020-12-24 17:12:25
background: bg-[#ebd94e]
tags:
    - js
    - web
categories:
  - Programming
intro: |
    A JavaScript cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.
plugins:
    - copyCode
---
Getting Started
------------
### Introduction
JavaScript is a lightweight, interpreted programming language.
- [JSON cheatsheet](/json) _(quickref.me)_
- [Regex in JavaScript](/regex#regex-in-javascript) _(quickref.me)_
### Console
```javascript
// => Hello world!
console.log('Hello world!');
// => Hello QuickRef.ME
console.warn('hello %s', 'QuickRef.ME');
// Prints error message to stderr
console.error(new Error('Oops!'));
```
### Numbers
```javascript
let amount = 6;
let price = 4.99;
```
### Variables
```javascript
let x = null;
let name = "Tammy";
const found = false;
// => Tammy, false, null
console.log(name, found, x);
var a;
console.log(a); // => undefined
```
### Strings
```javascript
let single = 'Wheres my bandit hat?';
let double = "Wheres my bandit hat?";
// => 21
console.log(single.length);
```
### Arithmetic Operators
```javascript
5 + 5 = 10     // Addition
10 - 5 = 5     // Subtraction
5 * 10 = 50    // Multiplication
10 / 5 = 2     // Division
10 % 5 = 0     // Modulo
```
### Comments
```javascript
// This line will denote a comment
/*  
The below configuration must be 
changed before deployment. 
*/
```
### Assignment Operators
```javascript
let number = 100;
// Both statements will add 10
number = number + 10;
number += 10;
console.log(number); 
// => 120
```
### String Interpolation
```javascript
let age = 7;
// String concatenation
'Tommy is ' + age + ' years old.';
// String interpolation
`Tommy is ${age} years old.`;
```
### let Keyword
```javascript
let count; 
console.log(count); // => undefined
count = 10;
console.log(count); // => 10
```
### const Keyword
```javascript
const numberOfColumns = 4;
// TypeError: Assignment to constant...
numberOfColumns = 8;
```
JavaScript Conditionals
------------
### if Statement
```javascript
const isMailSent = true;
if (isMailSent) {
  console.log('Mail sent to recipient');
}
```
### Ternary Operator
```javascript
var x=1;
// => true
result = (x == 1) ? true : false;
```
### Operators {.row-span-2}
```javascript
true || false;       // true
10 > 5 || 10 > 20;   // true
false || false;      // false
10 > 100 || 10 > 20; // false
```
#### Logical Operator &&
```javascript
true && true;        // true
1 > 2 && 2 > 1;      // false
true && false;       // false
4 === 4 && 3 > 1;    // true
```
#### Comparison Operators
```javascript
1 > 3                // false
3 > 1                // true
250 >= 250           // true
1 === 1              // true
1 === 2              // false
1 === '1'            // false
```
#### Logical Operator !
```javascript
let lateToWork = true;
let oppositeValue = !lateToWork;
// => false
console.log(oppositeValue); 
```
#### Nullish coalescing operator ??
```javascript
null ?? 'I win';           //  'I win'
undefined ?? 'Me too';     //  'Me too'
false ?? 'I lose'          //  false
0 ?? 'I lose again'        //  0
'' ?? 'Damn it'            //  ''
```
### else if
```javascript
const size = 10;
if (size > 100) {
  console.log('Big');
} else if (size > 20) {
  console.log('Medium');
} else if (size > 4) {
  console.log('Small');
} else {
  console.log('Tiny');
}
// Print: Small
```
### switch Statement
```javascript
const food = 'salad';
switch (food) {
  case 'oyster':
    console.log('The taste of the sea');
    break;
  case 'pizza':
    console.log('A delicious pie');
    break;
  default:
    console.log('Enjoy your meal');
}
```
### == vs ===
```javascript
0 == false   // true
0 === false  // false, different type
1 == "1"     // true,  automatic type conversion 
1 === "1"    // false, different type
null == undefined  // true
null === undefined // false
'0' == false       // true
'0' === false      // false
```
The `==` just check the value, `===` check both the value and the type.
JavaScript Functions
------------
### Functions
```javascript
// Defining the function:
function sum(num1, num2) {
  return num1 + num2;
}
// Calling the function:
sum(3, 6); // 9
```
### Anonymous Functions
```javascript
// Named function
function rocketToMars() {
  return 'BOOM!';
}
// Anonymous function
const rocketToMars = function() {
  return 'BOOM!';
}
```
### Arrow Functions (ES6) {.row-span-2}
#### With two arguments 
```javascript
const sum = (param1, param2) => { 
  return param1 + param2; 
}; 
console.log(sum(2,5)); // => 7 
```
#### With no arguments 
```javascript
const printHello = () => { 
  console.log('hello'); 
}; 
printHello(); // => hello
```
#### With a single argument 
```javascript
const checkWeight = weight => { 
  console.log(`Weight : ${weight}`); 
}; 
checkWeight(25); // => Weight : 25 
```
#### Concise arrow functions
```javascript
const multiply = (a, b) => a * b; 
// => 60 
console.log(multiply(2, 30)); 
```
[Arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) available starting ES2015
### return Keyword
```javascript
// With return
function sum(num1, num2) {
  return num1 + num2;
}
// The function doesn't output the sum
function sum(num1, num2) {
  num1 + num2;
}
```
### Calling Functions
```javascript
// Defining the function
function sum(num1, num2) {
  return num1 + num2;
}
// Calling the function
sum(2, 4); // 6
```
### Function Expressions
```javascript
const dog = function() {
  return 'Woof!';
}
```
### Function Parameters
```javascript
// The parameter is name
function sayHello(name) {
  return `Hello, ${name}!`;
}
```
### Function Declaration
```javascript
function add(num1, num2) {
  return num1 + num2;
}
```
JavaScript Scope 
------------
### Scope
```javascript
function myFunction() {
  var pizzaName = "Margarita";
  // Code here can use pizzaName
}
// Code here can't use pizzaName
```
### Block Scoped Variables
```javascript
const isLoggedIn = true;
if (isLoggedIn == true) {
  const statusMessage = 'Logged in.';
}
// Uncaught ReferenceError...
console.log(statusMessage);
```
### Global Variables
```javascript
// Variable declared globally
const color = 'blue';
function printColor() {
  console.log(color);
}
printColor(); // => blue
```
### let vs var
```javascript
for (let i = 0; i  console.log(i), 10);
}
```
---
```javascript{.wrap}
// Prints 0, 1 and 2, as expected.
for (let j = 0; j  console.log(j), 10);
}
```
The variable has its own copy using `let`, and the variable has shared copy using `var`.
JavaScript Arrays 
------------
### Arrays
```javascript
const fruits = ["apple", "orange", "banana"];
// Different data types
const data = [1, 'chicken', false];
```
### Property .length
```javascript
const numbers = [1, 2, 3, 4];
numbers.length // 4
```
### Index
```javascript
// Accessing an array element
const myArray = [100, 200, 300];
console.log(myArray[0]); // 100
console.log(myArray[1]); // 200
```
### Mutable chart
|           | add | remove | start | end |
|:----------|:---:|:------:|:-----:|:---:|
| `push`    | ✔   |        |       | ✔   |
| `pop`     |     | ✔      |       | ✔   |
| `unshift` | ✔   |        | ✔     |     |
| `shift`   |     | ✔      | ✔     |     |
{.show-header}
### Method .push()
```javascript
// Adding a single element:
const cart = ['apple', 'orange'];
cart.push('pear'); 
// Adding multiple elements:
const numbers = [1, 2];
numbers.push(3, 4, 5);
```
Add items to the end and returns the new array length.
### Method .pop()
```javascript
const fruits = ["apple", "orange", "banana"];
const fruit = fruits.pop(); // 'banana'
console.log(fruits); // ["apple", "orange"]
```
Remove an item from the end and returns the removed item.
### Method .shift()
```javascript
let cats = ['Bob', 'Willy', 'Mini'];
cats.shift(); // ['Willy', 'Mini']
```
Remove an item from the beginning and returns the removed item.
### Method .unshift()
```javascript
let cats = ['Bob'];
// => ['Willy', 'Bob']
cats.unshift('Willy');
// => ['Puff', 'George', 'Willy', 'Bob']
cats.unshift('Puff', 'George');
```
Add items to the beginning and returns the new array length.
### Method .concat()
```javascript
const numbers = [3, 2, 1]
const newFirstNumber = 4
// => [ 4, 3, 2, 1 ]
[newFirstNumber].concat(numbers)
// => [ 3, 2, 1, 4 ]
numbers.concat(newFirstNumber)
```
if you want to avoid mutating your original array, you can use concat.
JavaScript Loops 
------------
### While Loop
```javascript
while (condition) {
  // code block to be executed
}
let i = 0;
while (i = 0; i--) {
  console.log(`${i}. ${fruits[i]}`);
}
// => 2. banana
// => 1. orange
// => 0. apple
```
### Do…While Statement
```javascript
x = 0
i = 0
do {
  x = x + i;
  console.log(x)
  i++;
} while (i  0 1 3 6 10
```
### For Loop
```javascript
for (let i = 0; i  0, 1, 2, 3
```
### Looping Through Arrays
```javascript
for (let i = 0; i  Every item in the array
```
### Break
```javascript
for (let i = 0; i  5) {
     break;
  }
  console.log(i)
}
// => 0 1 2 3 4 5
```
### Continue
```javascript
for (i = 0; i ";
}
```
### Nested
```javascript
for (let i = 0; i  0
// => 1
// => 2
```
### for...of loop
```javascript
const fruits = ["apple", "orange", "banana"];
for (let fruit of fruits) {
  console.log(fruit);
}
// => apple
// => orange
// => banana
```
JavaScript Iterators {.cols-2}
------------
### Functions Assigned to Variables
```javascript
let plusFive = (number) => {
  return number + 5;  
};
// f is assigned the value of plusFive
let f = plusFive;
plusFive(3); // 8
// Since f has a function value, it can be invoked. 
f(9); // 14
```
### Callback Functions
```javascript
const isEven = (n) => {
  return n % 2 == 0;
}
let printMsg = (evenFunc, num) => {
  const isNumEven = evenFunc(num);
  console.log(`${num} is an even number: ${isNumEven}.`)
}
// Pass in isEven as the callback function
printMsg(isEven, 4); 
// => The number 4 is an even number: True.
```
### Array Method .reduce()
```javascript
const numbers = [1, 2, 3, 4];
const sum = numbers.reduce((accumulator, curVal) => {  
  return accumulator + curVal;
});
console.log(sum); // 10
```
### Array Method .map()
```javascript
const members = ["Taylor", "Donald", "Don", "Natasha", "Bobby"];
const announcements = members.map((member) => {
  return member + " joined the contest.";
});
console.log(announcements);
```
### Array Method .forEach()
```javascript
const numbers = [28, 77, 45, 99, 27];
numbers.forEach(number => {  
  console.log(number);
}); 
```
### Array Method .filter()
```javascript
const randomNumbers = [4, 11, 42, 14, 39];
const filteredArray = randomNumbers.filter(n => {  
  return n > 5;
});
```
JavaScript Objects {.cols-2}
------------
### Accessing Properties
```javascript
const apple = { 
  color: 'Green',
  price: { bulk: '$3/kg', smallQty: '$4/kg' }
};
console.log(apple.color); // => Green
console.log(apple.price.bulk); // => $3/kg
```
### Naming Properties
```javascript
// Example of invalid key names
const trainSchedule = {
  // Invalid because of the space between words.
  platform num: 10, 
  // Expressions cannot be keys.
  40 - 10 + 2: 30,
  // A + sign is invalid unless it is enclosed in quotations.
  +compartment: 'C'
}
```
### Non-existent properties
```javascript
const classElection = {
  date: 'January 12'
};
console.log(classElection.place); // undefined
```