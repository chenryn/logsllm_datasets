400
600
Average Delay (ms)
800
1000
800
1000
0
0
(a) Under Web Server Trafﬁc
(b) Under Mail Server Trafﬁc
(a) Under Web Server Trafﬁc
(b) Under Mail Server Trafﬁc
Figure 5. True positive rate vs. average delay
curves for different “F ” values.
Figure 6. True positive rate vs. average delay
curves for different number of relayed packets.
relay ﬂows still may simultaneously be active. This event
contributes to the increase in calculated Ψ value and enables
the system to detect some of these relays.
It is also observed that in all experiments, detection
performance decreases as the length of the time slots in-
creases. This is little bit counterintuitive since one may ex-
pect to capture relay activity more accurately with longer
time slots. However, in reality longer time slots means more
ﬂows (relay or non-relay) are active within the same time
slot and therefore more random number terms added to the
overall sum as in the algorithm Calculate S. Therefore,
the system collects “A” terms more rapidly, and hence is
forced to make a decision earlier. This sometimes prevents
relay ﬂows from injecting sufﬁcient number of packets in
order to be detected before the system makes decision. Con-
sequently some of the relay activities are left undetected
with larger L values.
Table 1. False positive rates
UNDER WEB SERVER TRAFFIC
L = 100
L = 200
L = 400
L = 600
A = 500
A = 1000
A = 1500
A = 2000
0.0088
0.1257
0.1890
0.2842
0.0085
0.0904
0.2022
0.3077
0.0020
0.0441
0.1610
0.2353
0.0020
0.0553
0.2024
0.2554
UNDER MAIL SERVER TRAFFIC
L = 100
L = 200
L = 400
L = 600
A = 500
A = 1000
A = 1500
A = 2000
0.0352
0.1337
0.1886
0.2873
0.0067
0.0807
0.1839
0.2557
0.0066
0.0702
0.1990
0.2615
0.0043
0.0920
0.1827
0.2657
On the other hand, increasing the “A” value certainly de-
lays the time that the system has to make a decision. There-
fore, relay ﬂows will have enough time to inject sufﬁcient
number of packets to be detected. This behavior can be ob-
served as an increased detection performance as we go from
Figure 3(a) to Figure 3(d) and from Figure 4(a) to Figure
4(d). However, this increase in the detection performance
comes at the cost of increased false positive rates as can
be seen in Table 1. This is primarily due to the fact that
the number of time slots which any two arbitrary ﬂows are
simultaneously active within, increases as A is increased.
360360
Effect of Chaff Packets under Web Server Traffic
t
e
a
R
e
v
i
t
i
s
o
P
e
u
r
T
1
0.8
0.6
0.4
0.2
0
0
P(chaff)=0
P(chaff)=0.2
P(chaff)=0.4
P(chaff)=0.6
P(chaff)=0.8
200
400
600
800
1000
Average Delay (ms)
Effect of Chaff Packets under Mail Server Traffic
e
t
a
R
e
v
i
t
i
s
o
P
e
u
r
T
1
0.8
0.6
0.4
0.2
0
0
P(chaff)=0
P(chaff)=0.2
P(chaff)=0.4
P(chaff)=0.6
P(chaff)=0.8
200
400
600
800
1000
Average Delay (ms)
(a) Under Web Server Trafﬁc
(b) Under Mail Server Trafﬁc
Figure 7. True positive rate vs. average de-
lay curves for different chaff packet probabil-
ities.
This is a simple fact from probability theory that if the size
of the universal set increases, the number of event occur-
rences increases as well, as long as the frequency of that
event remains constant.
When we look at the results presented in Figure 3, Fig-
ure 4, Table 1, we observe that some settings of the param-
eters lead to quite unsatisfactory results. For instance, in
the case when A = 500 and L = 600, the true positive
rate is too low. Therefore, the parameters A and L should
not be set to these values although they are included in the
ﬁgures to demonstrate the effect of changing parameters.
Similarly when A = 2000, even though true positive rates
are signiﬁcantly higher, this setting shouldn’t be used due
to high false positive rates. However, if the proposed algo-
rithm were to be used as an initial step for relay ﬂow de-
tection as discussed earlier, setting A = 2000 may not be a
bad idea. Because, in that case the nodes that are ﬂagged by
the proposed algorithm would be further analyzed by a re-
lay ﬂow detection algorithm in order to identify relay ﬂows.
High false positive rates do increase the number of ﬂagged
nodes but this computational inefﬁciency may still be better
as compared to the case where the proposed scheme is not
used at all as the initial step. In the rest of the experiments,
we set our algorithm parameters as A = 1000 and L = 100
as they lead to reasonable true positive and false positive
rates. However, for real deployments, some care will need
to be taken before setting algorithm parameters. Finally, it
was observed for all parameter values that the performance
for the mail server trafﬁc was slightly worse than the per-
formance for web server trafﬁc. The reason is that the mail
server trafﬁc had higher average packet rates than the web
server trafﬁc. Similar to the previous observations, the more
the packet rate, the trafﬁc obtains the more active ﬂows fall
within a time slot and hence the earlier the “A” terms are
collected. Therefore, the system has to make a decision ear-
lier under heavier trafﬁc and consequently it may miss some
relay activities. In order to minimize this effect, the system
parameters should be carefully chosen according to the ex-
pected trafﬁc characteristics. In the experiments identical
parameter settings are used for both web server and mail
server trafﬁc for comparison purposes.
3.2.1 Effect of Multiple Flow Pairs
In the experiments described above, a single pair of ﬂows
perform the relaying activity. However, it is possible that
a relay node could host multiple relay activities simultane-
ously. The number of such relay activities is denoted by
“F ” in Section 2.2. In this section the performance of the
system was investigated for different values of F .
In or-
der to demonstrate the performance, for a speciﬁc set of
parameters such as A = 1000 and L = 100, the system
is required to detect the presence of a relay activity when
there are multiple relaying ﬂow pairs. As shown in Figure
5, the true positive rate increases drastically as the number
of relaying ﬂow pairs increases. In fact the relay activity is
detected almost with 100% accuracy when there are more
than four relaying ﬂow pairs. This result is not surprising
because higher values of F also increases the variance (σ2
S)
as observed in Equation (8).
3.2.2 Effect Relay Duration
In section 2.2, it was mentioned that theoretically relay ac-
tivity is detected if corresponding ﬂows are simultaneously
active within more than one time slot.
It was also men-
tioned that this was a purely theoretical conclusion and in
practice sufﬁciently many packets have to be relayed in or-
der to be detected. This section investigates the detection
performance for various relay durations and gives insight
about the minimum detectable relay duration. Here the du-
ration of a relay is measured as the number of relayed pack-
ets. In the experiment, where the parameters are chosen as
A = 1000 and L = 100, relay packets were generated by
the same model described in Section 3.1. The true posi-
tive rate vs. average delay curves for different number of
relayed packets are presented in Figure 6. As expected, it
is observed that the detection performance increases as the
number of relayed packets increases. This is because, as
the number of relayed packets increases the number of time
slots, within which the corresponding ﬂows are active, also
increases. This exactly corresponds to the increase in βf
values mentioned in Equation (7) and consequently increase
in σ2
S and Ψ.
On the other hand, it is also observed in Figure 6 that the
proposed scheme has low accuracy in detecting relays that
last for less than about 50-60 packets for the given underly-
ing trafﬁc characteristics. Here it should be noted that the
underlying web server trafﬁc and mail server trafﬁc used in
the experiments have average packet rates of 70 packets/sec
and 76 packets/sec respectively. Since the average packet
rate of the mail server trafﬁc is higher, when the curves
for mail server and web server trafﬁc are compared, it is
expected that, the minimum detectable relay duration gets
lower and lower as the non-relay trafﬁc of the node gets
lighter.
3.2.3 Effect of Chaff Packets
In order to disturb the correlation structure between relay-
ing incoming and outgoing ﬂows, adversaries often blend
chaff packets into the relay stream. This enables an adver-
sary to relay information without being detected by ﬂow-
correlation based relay detection algorithms. The chaff
packets usually carry no useful information. They can be
placed in the incoming ﬂow and not relayed through the out-
going ﬂow. They can also be generated by the relay node
and placed in the outgoing ﬂow. In both cases the purpose
is to generate a packet in a ﬂow which has no counterpart
in the corresponding ﬂow. However, regardless of the chaff
packets, some of the packets (actual relay packets) still have
to be relayed within a certain time period in order the relay
node to serve its purpose. Those packets will still make the
incoming and outgoing ﬂows simultaneously active within
a number of time slots. Hence, the proposed scheme will
be able to detect the relay activity. Therefore it can be said
that chaff packets have virtually no effect on the proposed
method. This property is clearly observed in the experi-
ments whose results are presented in Figure 7. In the ex-
periments, the system parameters are set to A = 1000 and
L = 100. After each relayed packet a chaff packet is gener-
ated with probability P (chaff) = 0, 0.2, 0.4, 0.6, and 0.8.
These chaff packets take place only in incoming ﬂow and
are not relayed through the outgoing ﬂow. The inter-arrival
times for these chaff packets are determined by the same
model which determines the inter-arrival times of regular
incoming relay packets as described in Section 3.1. It is ob-
served that none of these P (chaff) values have decreased
the detection performance at all. On the contrary, as the
number of chaff packets is increased, the detection perfor-
mance is slightly improved especially for larger average de-
lay values. This is because these extra chaff packets in the
incoming ﬂow sometimes coincides with other packets in
the outgoing ﬂow and therefore increase the number of time
slots that both ﬂows are simultaneously active.
361361
4 Conclusion
Due to their potential harmful effects, identifying relay
nodes in the network can improve security policy enforce-
ment. In this work, the delay constrained relay node detec-
tion problem is investigated. A statistical solution, which
has linear time and space complexity, is proposed. The
proposed algorithm is lightweight and simple, therefore it
is scalable and can be used in large scale implementations
which may require real time detection.
For some applications identifying relay nodes may be
sufﬁcient. If an application requires ﬂow level relay identi-
ﬁcation, one of the existing relay ﬂow detection techniques
can be subsequently applied to the relay nodes which have
been ﬂagged by the proposed method. The contribution of
this work is then in terms of computational complexity, as
quadratic time relay ﬂow detection algorithms now have to
be executed only for ﬂagged nodes rather than every node
in the network.
Experimental results show that the proposed scheme
is robust against various possible adversarial or non-
adversarial modiﬁcations on the underlying network traf-
ﬁc. In summary, the experiments reveal that the proposed
scheme withstands some extent of packet delays which
could be introduced due to packet processing time or for ad-
versarial purposes. Also the algorithm is shown to be able to
detect relay activity even if the ﬂows contain chaff packets
intended to defeat relay detection systems.
There are few limitations of the proposed scheme. First
of all relay nodes should be delay-constrained. That is to
say, if incoming packets were buffered long enough before
they are forwarded, the algorithm would not be able to de-
tect. Also it is assumed that the ﬂows are relatively sparse
such that they are active for some of the time slots and inac-
tive for others. Otherwise, if a ﬂow were continuously ac-
tive within all observed time slots, then it would appear as a
relaying ﬂow since would be simultaneously active with all
the other ﬂows. In the current setup of the proposed scheme,
if a node contains such ﬂow, then it will be detected as a re-
lay node.
There is a lot of work that still needs to be done. As
part of our future work effort, we plan to focus on meth-
ods which can increase the detection performance such that
higher true positives rates and lower false positive rates can
be achieved. One possible way to achieve this could be us-
ing a different alignment of time slots for each of the si-
multaneous S calculations (i.e.
time slot boundaries are
not aligned for each simultaneous Calculate S execution).
This could enable some of the calculated S values to catch
relay activity which the others might have missed. Also an
adaptive selection of algorithm parameters, which adjust the
parameters according to encountered trafﬁc characteristics,
might be very useful especially when the trafﬁc characteris-
tics tend to change over time. This could be done by sensing
362362
and analyzing the ongoing trafﬁc and reacting accordingly.
Finally, we also plan to deploy our algorithm in a large scale
implementation such that, in order to experimentally verify
its ability to monitor thousands of network nodes and detect
relay activity in real time.
References
[1] D. S. A. Blum and S. Venkataraman. Detection of interactive
stepping stones: Algorithms and conﬁdence bounds. In Con-
ference of Recent Advance in Intrusion Detection (RAID),
Sophia Antipolis, French Riviera, France, September 2004.
[2] D. Donoho, A. G. Flesia, U. Shankar, V. Paxson, J. Coit, and
S. Staniford. Multiscale stepping-stone detection: Detecting
pairs of jittered interactive streams by exploiting maximum
tolerable delay. In Fifth International Symposium on Recent
Advances in Intrusion Detection, Lecture Notes in Computer
Science 2516, New York, Springer, 2002.
[3] A. Gerber, J. Houle, H. Nguyen, M. Roughan, and S. Sen.
P2p the gorilla in the cable.
In National Cable and
Telecommunications Association (NCTA) 2003 National
Show, Chicago, IL, June 2003.
[4] T. He and L. Tong. A signal processing perspective of
stepping-stone detection. In Proc. of IEEE CISS’06, Prince-
ton, NJ, 2006.
[5] T. Karagiannis, A. Broido, M. Faloutsos, and K. Claffy.
Transport
In Proc.
4th ACM SIGCOMM Conf. on Internet Measurement,
Taormina, Sicily, Italy,, October 2004.
layer identiﬁcation of p2p trafﬁc.
[6] R. Meent and A. Pras. Assessing unknown network traf-
ﬁc. In CTIT Technical Report 04-11, University of Twente,
Netherlands, February 2004.
[7] S. Ohzahata, Y. Hagiwara, M. Terada, and K. Kawashima.
Aa trafﬁc identiﬁcation method and evaluations for a pure
p2p application. In Lecture Notes in Computer Science, vol-
ume 3431, 2005.
[8] S. Sen, O. Spatscheck, and D. Wang. Accurate, scalable in-
network identiﬁcation of p2p trafﬁc using application sig-
natures. In Proc. 13th Int. Conf. on World Wide Web, NY,
2004.
[9] S. Staniford-Chen and L. Heberlein. Holding intruders ac-
countable on the internet. In Proc. IEEE Symposium on Se-
curity and Privacy, Oakland, CA, page 3949, May 1995.
[10] K. Suh, D. Figueiredo, J. Kurose, and D. Towsley. Char-
In Proc. of
acterizing and detecting skype-relayed trafﬁc.
Infocom, 2006.
[11] X. Wang and D. S. Reeves. Robust correlation of encrypted
attack trafﬁc through stepping stones by manipulation of
interpacket delays.
In CCS ’03: Proceedings of the 10th
ACM conference on Computer and communications secu-
rity, pages 20–29, 2003.
[12] K. Yoda and H. Etoh. Finding a connection chain for trac-
ing intruders. In F. Guppens, Y. Deswarte, D. Gollamann,
and M. Waidner, editors, 6th European Symposisum on Re-
search in Computer Security - ESORICS 2000 LNCS -1985,
Toulouse, France, October 2000.
[13] Y. Zhang and V. Paxson. Detecting stepping stones.
In
Proceedings of the 9th USENIX Security Symposium, page
171184, August 2000.