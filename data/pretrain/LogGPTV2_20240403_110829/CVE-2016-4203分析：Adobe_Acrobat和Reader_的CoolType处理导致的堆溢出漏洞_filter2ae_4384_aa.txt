# CVE-2016-4203分析：Adobe Acrobat和Reader 的CoolType处理导致的堆溢出漏洞
|
##### 译文声明
本文是翻译文章，文章来源：360安全播报
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**综述**
**最近,Adobe公司修复了Adobe Acrobat和Reader中的一些安全漏洞。其中一个是我们近期发现的堆缓冲区溢出漏洞(CVE – 2016 –
4203)。本博客中,我们想分享一些我们对这个漏洞的分析。**
**概念验证**
可以通过用Adobe Reader
DC打开PoC文件“poc_minimized.pdf”的方式来重现这个漏洞。当打开该文件时,AcroRd32.exe就会崩溃,崩溃信息如下所示:
    (8de0.6bc4): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=097eeeed ebx=00000015 ecx=097ef6e0 edx=0000cc6c esi=2952d000 edi=00000024
    eip=0959a23c esp=2911e5f8 ebp=2911e608 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010202
    CoolType!CTInit+0x45ef1:
    0959a23c 0fb606          movzx   eax,byte ptr [esi]         ds:002b:2952d000=??
    0:022> kb
     # ChildEBP RetAddr  Args to Child             
    WARNING: Stack unwind information not available. Following frames may be wrong.
    00 2911e608 09598db1 097eee15 097ef564 097ef44c CoolType!CTInit+0x45ef1
    01 2911e674 095939a0 17e9cc38 17e9cd98 17e9cd58 CoolType!CTInit+0x44a66
    02 2911e6d0 095935c3 17e9cc38 17e9cd98 17e9cd58 CoolType!CTInit+0x3f655
    03 2911e720 0958d9a3 17e9cc38 17e9cd98 17e9cd58 CoolType!CTInit+0x3f278
    04 2911e784 0958d79c 00000001 2911e7d8 00000001 CoolType!CTInit+0x39658
    05 2911e79c 095a6cb0 2911e8a8 2911e7d8 1a99cf68 CoolType!CTInit+0x39451
    06 2911e8fc 095a6996 1a99cf68 097f61a8 2911ea88 CoolType!CTInit+0x52965
    07 2911eac4 095a614e 2911ecb8 00000000 097f6480 CoolType!CTInit+0x5264b
    08 2911eb90 095a506f 773dfa00 00000000 00000001 CoolType!CTInit+0x51e03
    09 2911ef58 095a468a 00000025 20f02fec 00001088 CoolType!CTInit+0x50d24
    0a 2911ef98 095a3691 20f02fe0 00000002 2911f028 CoolType!CTInit+0x5033f
    0b 2911f100 095a32c7 2911f518 2911f8ac 0000044a CoolType!CTInit+0x4f346
    0c 2911f150 0908a44c 145aae2c 2911f518 2911f8ac CoolType!CTInit+0x4ef7c
    0d 2911f258 0906bab0 2911f34c 00000000 21d6629c AGM!AGMInitialize+0x51bf0
    0e 2911f268 0906b98f 00000000 f7510c27 20d6cf70 AGM!AGMInitialize+0x33254
    0f 2911f280 0906ba9c 00000081 21cb6d00 21cb6d00 AGM!AGMInitialize+0x33133
    10 2911f9ac 0906182e 090004ca 00001fa0 2911fa01 AGM!AGMInitialize+0x33240
    11 2911f9bc 09080a4d 21d76fe8 00000053 00000000 AGM!AGMInitialize+0x28fd2
    12 2911fa01 00000000 c8000000 5021ca6f 0027c3d2 AGM!AGMInitialize+0x481f1
    0:022> !heap -p -a esi
        address 2952d000 found in
        _DPH_HEAP_ROOT @ 3d01000
        in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)
                                                           293c3924:         2952cf40               c0 -         2952c000             2000
        6a749abc verifier!AVrfDebugPageHeapAllocate+0x0000023c
        7749d836 ntdll!RtlDebugAllocateHeap+0x0000003c
        773ffb40 ntdll!RtlpAllocateHeap+0x000000f0
        773fdecb ntdll!RtlpAllocateHeapInternal+0x0000027b
        773fdc2e ntdll!RtlAllocateHeap+0x0000002e
        6854ed63 MSVCR120!malloc+0x00000049 [f:ddvctoolscrtcrtw32heapmalloc.c @ 92]
        095550fc CoolType!CTInit+0x00000db1
        095589db CoolType!CTInit+0x00004690
**分析**
这个漏洞是堆缓冲区溢出漏洞的一个实例。让我们先看看这个特别制作的PDF文件。我们将这个最小化的PoC文件和正常的PDF文件进行了对比，如下所示。
图1：PoC文件与原始PDF文件
图2.用010编辑器对PoC文件的解析
从图1和图2我们可以看到，PoC文件和原始PDF文件的唯一区别是位于obj 17上的偏移值为0x30e3上的一个字节。该对象的结构如下所示：
    17 0 obj
    > 
    stream
    …
    endstream
    endobj
问题是该对象到底存储了什么类型的数据？我们在PDF文件中发现了引用obj 17的对象，如下所示:
    8 0 obj
    > 
    endobj
从字段“/ FontFile2 17 0 R”中我们可以知道obj 17存储了一个字体文件。该字体文件的数据编码使用了obj
17中的FlateDecode。想要了解数据压缩的更多信息,请参阅https://tools.ietf.org/html/rfc1951。
Zlib是一个C语言库,实现了数据压缩算法。我们可以用它来解压obj 17中的数据。PoC文件中的obj
17解压数据存储在output.dat文件中，长度为0x4650。原始PDF文件中的obj
17解压数据存储在output_original.dat文件中，长度也是0x4650。下面是output.dat文件和output_original.dat文件之间的对比：
图3.PoC的字体文件(output.dat)与原始字体文件(output_original.dat)的对比
我们可以看到有大约一百个字节是不相同的。那么,下一个问题是找出到底是什么数据触发了这个漏洞。这需要一些调试技巧，让我们先回到Windbg。
    0:022> r
    eax=097eeeed ebx=00000015 ecx=097ef6e0 edx=0000cc6c esi=2952d000 edi=00000024
    eip=0959a23c esp=2911e5f8 ebp=2911e608 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010202
    CoolType!CTInit+0x45ef1:
    0959a23c 0fb606          movzx   eax,byte ptr [esi]         ds:002b:2952d000=??
    0:022> !heap -p -a esi
        address 2952d000 found in
        _DPH_HEAP_ROOT @ 3d01000
        in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)
                                                           293c3924:         2952cf40               c0 -         2952c000             2000
        6a749abc verifier!AVrfDebugPageHeapAllocate+0x0000023c
        7749d836 ntdll!RtlDebugAllocateHeap+0x0000003c
        773ffb40 ntdll!RtlpAllocateHeap+0x000000f0
        773fdecb ntdll!RtlpAllocateHeapInternal+0x0000027b
        773fdc2e ntdll!RtlAllocateHeap+0x0000002e
        6854ed63 MSVCR120!malloc+0x00000049 [f:ddvctoolscrtcrtw32heapmalloc.c @ 92]
        095550fc CoolType!CTInit+0x00000db1
        095589db CoolType!CTInit+0x00004690
        …
    0:022> db 2952cf40 Lc0
    2952cf40  00 02 00 b3 ff fb 01 bf-05 da 00 0b 00 23 00 55  .............#.U
    2952cf50  40 36 06 38 00 1e 12 1e-06 20 25 30 25 50 25 c0  @6.8..... %0%P%.
    2952cf60  25 04 80 25 90 25 a0 25-03 09 38 03 18 15 1b 18  %..%.%.%..8.....
    2952cf70  38 0f 21 1f 25 2f 25 3f-25 7f 25 04 1f 0c bf 0c  8.!.%/%?%.%.....
    2952cf80  02 50 0c 7f 0c 02 0c 25-10 d6 5d 71 5d 7d c4 c4  .P.....%..]q]}..