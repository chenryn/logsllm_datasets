# SQL注入漏洞详解

## 译文声明
本文为翻译文章，具体内容和含义以原文为准。以下所有代码示例的环境为：MySQL 5.5.20 + PHP。

## SQL注入简介
SQL注入是由于后端SQL语句直接拼接了用户的输入，并且Web应用程序对用户输入数据的合法性没有进行充分的判断和过滤。攻击者可以通过构造特定的SQL语句来实现对数据库的任意操作，如查询、删除、插入或修改数据等。如果数据库用户权限较高，攻击者甚至可以执行操作系统级别的命令。

SQL注入可以分为平台层注入和代码层注入：
- **平台层注入**：由不安全的数据库配置或数据库平台的漏洞引起。
- **代码层注入**：主要由于程序员对输入未进行细致地过滤导致。

### MySQL相关知识
在讨论具体的注入方法之前，了解一些MySQL的基础知识是必要的。

#### MySQL版本特性
- **MySQL 5.0及以下**：支持多用户单操作。
- **MySQL 5.0以上**：支持多用户多操作。

#### information_schema数据库
- 在**MySQL 5.0以下**，没有`information_schema`这个系统表，无法列出表名等信息，只能通过暴力破解来获取表名。
- 在**MySQL 5.0及以上**，默认添加了一个名为`information_schema`的数据库，其中包含只读的表，不能进行更新、删除或插入等操作，也不能加载触发器，因为它们实际上是视图而不是基本表，没有关联的文件。

尝试删除`information_schema`数据库时会报错。

#### 注释符
- 单行注释：`#`
- 多行注释：`/* */`

#### 重要的information_schema表
- `information_schema.schemata`：存储了MySQL中的所有数据库名称。
- `information_schema.tables`：存储了MySQL中的所有表名。
- `information_schema.columns`：存储了MySQL中的所有列名。

示例查询语句：
```sql
-- 获取第一个数据库名
SELECT schema_name FROM information_schema.schemata LIMIT 0,1;

-- 获取第一个表名
SELECT table_name FROM information_schema.tables LIMIT 0,1;

-- 获取指定数据库中的所有表名
SELECT table_name FROM information_schema.tables WHERE table_schema='security' LIMIT 0,1;

-- 获取第一个列名
SELECT column_name FROM information_schema.columns LIMIT 0,1;

-- 获取指定数据库中指定表的所有列名
SELECT column_name FROM information_schema.columns WHERE table_schema='security' AND table_name='users' LIMIT 0,1;

-- 获取指定表中指定列的第一条数据
SELECT password FROM users LIMIT 0,1;
```

#### 常用函数
- `version()`：查询数据库版本。
- `user()`：查询数据库使用者。
- `database()`：当前数据库。
- `system_user()`：系统用户名。
- `session_user()`：连接数据库的用户名。
- `current_user`：当前用户名。
- `load_file()`：读取本地文件。
- `@@datadir`：读取数据库路径。
- `@@basedir`：MySQL安装路径。
- `@@version_compile_os`：查看操作系统。

其他常用函数：
- `ascii(str)`：返回给定字符的ASCII值。
- `length(str)`：返回字符串长度。
- `substr(string, start, length)`：从指定位置开始截取指定长度的子字符串。
- `concat(str1, str2)`：将多个字符串连接在一起。
- `group_concat(column)`：将查询结果中的列值连接成一个字符串。

### SQL注入分类
根据不同的标准，SQL注入可以分为多种类型：

#### 按注入点类型分类
- 数字类型的注入
- 字符串类型的注入
- 搜索型注入

#### 按提交方式分类
- GET注入
- POST注入
- COOKIE注入
- HTTP头注入（XFF注入、UA注入、REFERER注入）

#### 按获取信息的方式分类
- 基于布尔的盲注
- 基于时间的盲注
- 基于报错的注入
- 联合查询注入
- 堆查询注入（可同时执行多条语句）

### 判断是否存在SQL注入
可以通过以下几种方法来判断网站是否存在SQL注入漏洞：

1. 使用网站漏洞扫描工具（如AWVS、AppScan、OWASP-ZAP、Nessus等）进行扫描。
2. 手动测试：
   - 在URL参数中添加单引号、双引号、括号等特殊字符，观察是否报错。
   - 在URL后面添加`and 1=1`和`and 1=2`，比较页面显示是否一致。
   - 使用时间盲注方法，如`BENCHMARK(100000000, md5(5))`，观察响应时间的变化。

### 易出现SQL注入的功能点
任何与数据库交互的地方都可能成为SQL注入的入口，常见的功能点包括登录页面、涉及HTTP头（如User-Agent、Client-IP等）的功能点以及订单处理等。

### Boolean盲注示例
当服务器没有错误回显时，可以通过Boolean盲注来验证注入语句是否执行成功。例如，在sqli的Less-5示例中，通过构造条件语句并观察页面显示情况来推断数据库类型和结构。

```sql
-- 示例查询
SELECT * FROM users WHERE id='$id' LIMIT 0,1;
```

通过构造类似`http://127.0.0.1/sqli/Less-5/?id=1'`的请求，观察页面反应来判断注入点的存在。

### 总结
SQL注入是一种严重的安全威胁，需要开发人员和安全专家共同努力来防范。通过合理的输入验证、使用预编译语句和最小化数据库权限等措施，可以有效减少SQL注入的风险。