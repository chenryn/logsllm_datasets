### 文档版本 06 (2017-09-12) 华为专有和保密信息 1506
版权所有 © 华为技术有限公司
CloudEngine 12800系列交换机
MIB参考 123 RMON-MIB

#### 123.4.2 historyControlTable 详细描述
RMON历史控制表主要用于设置采样间隔时间等控制信息。该表的索引为 `historyControlIndex`。

| OID | 节点名称 | 数据类型 | 最大访问权限 | 含义 | 实现规范 |
|-----|----------|----------|--------------|------|----------|
| 1.3.6.1.2.1.16.2.1.1.1 | historyControlIndex | Integer32 | read-only | 唯一标识本统计行在表中的索引值。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.1.1.2 | historyControlDataSource | OBJECT IDENTIFIER | read-create | 接口管理对象OID（按RFC2233定义）。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.1.1.3 | historyControlBucketsRequested | Integer32 | read-create | 统计历史表的最大记录行数。RFC默认值是50，目前支持的取值范围是1～10。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.1.1.4 | historyControlBucketsGranted | Integer32 | read-only | 实际存放统计历史表的最大记录行数。应尽量达到 `historyControlBucketsRequested` 的值。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.1.1.5 | historyControlInterval | Integer32 | read-create | 统计历史表的采样时间间隔。取值范围是1～3600秒，默认值是1800秒。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.1.1.6 | historyControlOwner | OwnerString | read-create | 本历史控制项的所有者字符串。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.1.1.7 | historyControlStatus | EntryStatus | read-create | 本行的状态。 | 实现与MIB文件定义一致。 |

**创建约束**
- 只能在以太网主接口（非子接口）上创建历史控制表行。
- 行创建必须通过设置 `historyControlStatus` 为 `valid` 或 `createRequest` 来实现。
  - 如果创建时设置 `historyControlStatus` 为 `valid`，则新增一行且状态为 `valid`。
  - 如果创建时设置 `historyControlStatus` 为 `createRequest`，则新增一行但状态为 `underCreation`。
- 创建时必须一次性配置所有必需的对象，如 `historyControlDataSource` 必须赋值。缺省值：`historyControlBucketsRequested` 为10，`historyControlInterval` 为1800。
- `historyControlOwner` 在创建时可以不指定，默认值为 `null`。
- 历史控制表的行数最多为100。

**修改约束**
- `historyControlDataSource`、`historyControlBucketsRequested` 和 `historyControlInterval` 只有当行状态不为 `valid` 时才能修改。
- `historyControlOwner` 只要行存在即可修改。

**删除约束**
- 将 `historyControlStatus` 设置为 `invalid`，即将该行从表中删除。同时相关的以太网历史表行（`etherHistoryTable`）也被删除。

**读取约束**
- 对读操作没有限制。

#### 123.4.3 etherHistoryTable 详细描述
RMON以太网历史表用于记录对应接口的周期性统计采样值，存储起来以备以后检索。该表的索引是 `etherHistoryIndex` 和 `etherHistorySampleIndex`。

| OID | 节点名称 | 数据类型 | 最大访问权限 | 含义 | 实现规范 |
|-----|----------|----------|--------------|------|----------|
| 1.3.6.1.2.1.16.2.2.1.1 | etherHistoryIndex | Integer32 | read-only | 本历史统计行对应的 `historyControlTable` 的索引。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.2 | etherHistorySampleIndex | Integer32 | read-only | 唯一标识本统计行的采样索引值，每次采样后加1。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.3 | etherHistoryIntervalStart | TimeTicks | read-only | 本次采样开始的系统时间（`sysUpTime`）。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.4 | etherHistoryDropEvents | Counter32 | read-only | 本次采样间隔里由于缺少资源丢弃包的事件数。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.5 | etherHistoryOctets | Counter32 | read-only | 该接口接收到的字节数（含FCS）。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.6 | etherHistoryPkts | Counter32 | read-only | 该接口接收到的帧数。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.7 | etherHistoryBroadcastPkts | Counter32 | read-only | 该接口接收的广播帧数。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.8 | etherHistoryMulticastPkts | Counter32 | read-only | 该接口接收的组播帧数。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.9 | etherHistoryCRCAlignErrors | Counter32 | read-only | 该接口接收到的长度在64～1518之间但CRC错的字节数（含FCS）。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.10 | etherHistoryUndersizePkts | Counter32 | read-only | 该接口接收到的长度过小的包数。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.11 | etherHistoryOversizePkts | Counter32 | read-only | 该接口接收到的长度过大的包数。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.12 | etherHistoryFragments | Counter32 | read-only | 该接口接收到的长度过小且校验错的包数。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.13 | etherHistoryJabbers | Counter32 | read-only | 该接口接收到的长度过大且校验错的包数。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.14 | etherHistoryCollisions | Counter32 | read-only | 该接口检测到的冲突数。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.2.2.1.15 | etherHistoryUtilization | Integer32 | read-only | 在采样阶段物理层接口使用率的最高值。 | 实现与MIB文件定义一致。 |

**创建约束**
- `historyControlEntry` 表行的采样周期到达时创建。
- 每个 `historyControlEntry` 对应的 `etherHistoryEntry` 最大行数为10。

**修改约束**
- `etherHistoryEntry` 每项的属性为只读属性，用户不能手工更改。

**删除约束**
- 当 `historyControlEntry` 表行的删除请求被收到时，相连的所有历史统计表被删除。由于 `etherHistoryEntry` 没有自己的行状态，管理员不能指定删除某一特定行。
- 当 `historyControlEntry` 表行对应的 `etherHistoryEntry` 行达到 `historyControlBucketsGranted` 后，如果又有新的采样到达，将覆盖当前第一条记录。

**读取约束**
- 对读操作没有限制。

#### 123.4.4 alarmTable 详细描述
RMON告警表支持网管站为网络性能（可以是监视器本地MIB的任意整数类型的对象）定义一组告警阈值。如果超过相应方向上的阈值，监视器就会产生告警日志或把告警发往网管站。告警组的实现需要事件组支持。该表的索引是 `alarmIndex`。

| OID | 节点名称 | 数据类型 | 最大访问权限 | 含义 | 实现规范 |
|-----|----------|----------|--------------|------|----------|
| 1.3.6.1.2.1.16.3.1.1.1 | alarmIndex | Integer32 | read-only | 标识本项在告警表中的索引。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.2 | alarmInterval | Integer32 | read-create | 数据被采样和比较的时间间隔，单位是秒。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.3 | alarmVariable | OBJECT IDENTIFIER | read-create | 被采样变量的OID。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.4 | alarmSampleType | INTEGER | read-create | 采样值和阈值比较的方法。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.5 | alarmValue | Integer32 | read-only | 和阈值进行比较的值。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.6 | alarmStartupAlarm | INTEGER | read-create | 当本行状态变为 `valid` 时，应该发送的告警类型。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.7 | alarmRisingThreshold | Integer32 | read-create | 采样统计的阈值。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.8 | alarmFallingThreshold | Integer32 | read-create | 采样统计的阈值。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.9 | alarmRisingEventIndex | Integer32 | read-create | 当上限告警产生时触发的事件索引。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.10 | alarmFallingEventIndex | Integer32 | read-create | 当下限告警产生时触发的事件索引。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.11 | alarmOwner | OwnerString | read-create | 本行的拥有者。 | 实现与MIB文件定义一致。 |
| 1.3.6.1.2.1.16.3.1.1.12 | alarmStatus | EntryStatus | read-create | 本行的状态。 | 实现与MIB文件定义一致。 |

**创建约束**
- 行创建必须通过设置 `alarmStatus` 为 `valid` 或 `createRequest` 来实现。
  - 如果创建时设置 `alarmStatus` 为 `valid`，则新增一行且状态为 `valid`。
  - 如果创建时设置 `alarmStatus` 为 `createRequest`，则新增一行但状态为 `underCreation`。
- `alarmInterval` 默认值为1800；`alarmSampleType` 默认值为 `absoluteValue`（1）；`alarmStartupAlarm` 默认值为 `risingOrFallingAlarm`（3），这三个参数使用默认值时可以不赋值。`alarmRisingThreshold`、`alarmRisingEventIndex`、`alarmFallingThreshold` 和 `alarmFallingEventIndex` 的默认值为0，但创建时必须都赋值。
- `alarmVariable` 必须赋值，否则创建失败，不会新增一行。对于对象 `alarmOwner` 在创建时用户可以不指定，如果不指定则默认值为 `null`。
- 当前只实现对 `INTEGER`、`Integer32`、`Counter32`、`Gauge32` 和 `TimeTicks` 这些类型变量的监控。如果类型错误，则新增一行，但行状态为 `invalid`，而且参数无法修改，必须删除后重新创建。
- 当 `alarmRisingEventIndex` 和 `alarmFallingEventIndex` 事件都不存在时，告警行不能进入 `valid` 状态。
  - 当对应事件创建并有效时，如果告警行各参数有效，自动更新告警行的状态为 `valid`。
  - 当事件无效时，更新状态为 `valid` 的告警行，使其状态为 `underCreation`。
- 告警表的行数最多为60。

**修改约束**
- `alarmInterval`、`alarmVariable`、`alarmSampleType`、`alarmStartupAlarm`、`alarmRisingThreshold`、`alarmRisingEventIndex`、`alarmFallingThreshold` 和 `alarmFallingEventIndex`，只有当行状态不为 `valid` 时才能修改。
- `alarmOwner` 只要行存在即可修改。

**删除约束**
- 将 `alarmStatus` 设置为 `invalid`，即将该行从表中删除。

**读取约束**
- 对读操作没有限制。

文档版本 06 (2017-09-12) 华为专有和保密信息 1512
版权所有 © 华为技术有限公司