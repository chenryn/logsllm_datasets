### Table 2: Live Malware Exploits/Samples Tested on a System with CodeShield

CodeShield successfully blocked all the samples we tested. For brevity, only the last parts of the file paths are specified.

| Sample ID | Date       | File Extension | Status | File Path                 |
|-----------|------------|----------------|--------|---------------------------|
| 2009-0658 | 2009/06/11 | ppt            | YES    | temp\svochost.exe         |
| 2009-0658 | 2009/06/11 | doc            | YES    | temp\lsass.exe            |
| 2009-0658 | 2009/06/11 | doc            | YES    | temp\svohost.exe          |
| 2009-0658 | 2009/06/11 | doc            |        | temp\taskmgr.exe          |
| 2009-0658 | 2009/06/11 | pdf            | YES    | system\32wumsvc.dll       |
| 2009-0658 | 2009/06/11 | xls            | YES    | temp\XLS.exe              |
| 2009-0658 | 2009/06/11 | pdf            | YES    | Temp\1.exe                |
| 2009-0658 | 2009/06/11 | pdf            | YES    | Temp\ews.exe              |
| 2009-0658 | 2009/06/11 | pdf            | YES    | temp\svchost.exe          |
| 2009-0658 | 2009/06/11 |                | YES    | system32\                 |
| 2009-0658 | 2009/06/11 |                | YES    | authomal.exe              |
| 2009-0658 | 2009/06/11 |                | YES    | funparams.exe             |
| 2009-0658 | 2009/06/11 |                | YES    | temp\svchosts.exe         |
| 2009-0658 | 2009/06/11 |                | YES    | system32\dxmfnt.exe       |
| 2009-0658 | 2009/06/11 |                |        | system32\dxmgnt.exe       |
| 2009-0658 | 2009/06/11 |                | YES    | system32\                 |
| 2009-0658 | 2009/06/11 |                | YES    | authomal.exe              |
| 2009-0658 | 2009/06/11 |                | YES    | temp\wuauclt.exe          |
| 2009-0658 | 2009/06/11 |                | YES    | temp\1.exe                |
| 2009-0658 | 2009/06/11 |                | YES    | c:\a.exe                  |
| 2009-0658 | 2009/06/11 | pdf            | YES    | Microsfot\                |
| 2009-0658 | 2009/06/11 | pdf            | YES    | AdobeARM.exe              |
| 2009-0658 | 2009/06/11 | pdf            | YES    | java.exe                  |
| 2009-0658 | 2009/06/11 | pdf            | YES    | Temp\AcroRd32.exe         |
| 2009-0658 | 2009/06/11 | pdf            | YES    | windows\update.exe        |

Table 2 shows an analysis of 22 different exploits and corresponding attacks. We limit our reporting to a single instance per exploit, but all instances of an exploit that we tested were blocked successfully. We tested 175 PDF samples that utilized various exploits, and we were able to trigger the attack in 141 (80%) of those samples. Of these 141 samples, 100% were blocked. The inability to trigger all attacks could be due to version differences between the exploit and our software, patches applied to our system, or lack of network connectivity on our test machine. Overall, this demonstrates the effectiveness of CodeShield in blocking real-world attacks on end-user systems.

### 5.3 Possibilities of Evading CodeShield

If the approach used by CodeShield becomes widely deployed, attackers may attempt to find ways to evade it. Here, we discuss such possibilities.

#### Compromising Existing Processes
Since CodeShield adds new code to the whitelist during the installation mode, an attacker might try to compromise an existing process, store payloads on disk, and wait until the system is in installation mode to execute. For example, malicious code may repeatedly attempt to load the stored program until it succeeds. CodeShield's reboot-to-enter-installation design can mitigate this attack. The reboot mechanism delays entering installation mode until the system is up, the client is connected, and the user responds. Therefore, anything that tries to load early in the boot process will be blocked if it is not on the whitelist. To succeed, the malware would need to change the start configuration files to load a malware program with a certain delay after system reboot. If such configuration changes are possible, CodeShield needs to be enhanced to prevent auto-loading of programs when in installation mode.

#### Compromising Trusted Vendors' Private Keys
An attacker may try to compromise the private key of some trusted vendors and sign the malware. Evidence has shown that some vendors with legitimate certificates can be malicious, and certificates owned by non-malicious vendors can be compromised [13]. While all security mechanisms using public keys are vulnerable to this threat, CodeShield's design makes it less susceptible than many other mechanisms. For example, Microsoft Windows and Android use a public key infrastructure where a software vendor can get a certificate from a Certificate Authority (CA) and then sign its own programs. Every machine trusts any software signed by any vendor with a valid certificate, leading to a large global whitelist of certificates. In contrast, CodeShield trusts only the certificates from which one has already installed software, limiting the impact of such attacks unless the attacker compromises the private key of a popular vendor like Microsoft or Adobe, which is a serious threat regardless of CodeShield's presence.

#### Non-Persistent Attacks
Any attack that does not require writing files to disk to achieve its objective is not prevented by CodeShield. CodeShield is designed to prevent persistent compromise by preventing unintended binary execution. If an attack first exploits a vulnerability and gains admin privileges without loading any binaries, it can try to disable CodeShield.

#### Intermediate Code and Scripting
Currently, CodeShield blocks the execution of binary programs. We focus on binary programs because todayâ€™s malware often comes in binary form. Attackers can deliver malware payloads using intermediate code or script code such as Jar files, .NET CIL files, Python scripts, etc. This is a limitation for the current implementation of CodeShield. However, the concept of preventing the loading of external code can be extended to other forms of code. One could extend the implementation to identify the runtime environment for these types of intermediate files and control their loading events.

### 6. Experiences Using CodeShield

As of June 2012, CodeShield has been used on 65 machines, with usage ranging from 6 weeks to several months. The longest usage is on the laptop of one of the paper's authors, which has been running different versions of CodeShield for about 11 months, with the most recent version being used continuously for 203 days. Other users include friends, family, other researchers, and 38 college students who participated in a 6-week user study completed in November 2011. Among the 38 participants, 7 have been continuously using CodeShield for 3 months after the study. Five of these participants used a version of CodeShield where rebooting is the only way to enter installation mode.

From these experiences, we learned that the key to the success of CodeShield is the ability to handle software updates smoothly. If programs from software updates can be automatically added to the whitelist without needing to use installation mode, the inconvenience caused by CodeShield is minimal. For the two longest users, one entered installation mode 8 times in 203 days, and another entered it 13 times in 168 days. Computers used by family and friends of the authors often went for weeks without needing to enter installation mode.

Many programs that frequently update themselves digitally sign all new binaries, resulting in a smooth experience for CodeShield users. These include software from vendors such as Google, Mozilla, and Adobe. Firefox's behavior changed between March 2011 and the summer of 2011. Initially, Firefox auto-updates resulted in unsigned DLLs that were blocked by CodeShield. However, since Firefox 4 in March 2011, all binary files created by the auto-updater are signed. CodeShield handled all subsequent updates seamlessly, indicating that frequently updated software is increasingly signing the updated files.

### Issues with Unsigned Binaries

#### Microsoft Updates
Microsoft's automatic updates may create unsigned files. From a security researcher at Microsoft Research, we learned that Microsoft has an internal mechanism to verify the integrity of such unsigned binary files, but this interface is not available to other developers. To avoid blocking these Microsoft programs, we currently add exception rules for `wuauclt.exe`, `trustedinstaller.exe`, and `drvinst.exe`.

#### Anti-Virus Software
Several anti-virus vendors do not sign all the code they distribute. It is likely that they use proprietary mechanisms to verify the integrity of these files, but CodeShield cannot tell and will block them. During the user study, we added additional trusted installers for these A/V products to allow smooth updates. Some users did not respond to our queries and had to enter installation mode frequently to deal with A/V updates.

#### Gaming Services
Game services like Steam and EA Origin frequently update with unsigned files, causing users who play certain games to enter installation mode more frequently. This skewed the data in both groups, as it forced them to enter installation mode before playing the game, which some users do almost every day. However, this overhead did not affect their gaming experience, just increased the frequency of entering installation mode.

We point out that if CodeShield or something similar is integrated into the OS or a major A/V product, it can motivate software vendors to digitally sign all their binary programs, similar to how UAC motivated developers to request elevated privileges less often. Signing all distributed code is feasible, as many vendors already do this, and it is a requirement for many mobile platforms. The next generation of Windows is also moving towards this direction.

### 7. Usability Evaluation

We conducted a user study to evaluate the usability of CodeShield. Participants were asked to run CodeShield on their primary laptop for 6 weeks. We recruited 38 participants by posting flyers on campus and offering cash payment for participation. The participants came from various backgrounds, including engineering, science, liberal arts, and hospitality management.

Participants were divided into two groups:
- **Reboot Only Group (Reboot Group)**: 20 participants were given the design requiring a reboot to enter installation mode.
- **Reboot or Switch Group (Switch Group)**: 18 participants were given a version of CodeShield that allowed switching directly into installation mode or rebooting.

There were 13 training sessions across four days, each lasting about 30 minutes. Participants were assigned to sessions based on when they entered the study. During the training session, CodeShield was explained and demonstrated, and participants installed CodeShield on their laptops, took a brief survey, and began using the system.

After 6 weeks, a final survey was automatically presented, and we collected logs and survey results via online submission through the client.

### Initial Survey Results

- **Age**: All but one user were between 18-25, with one user aged 25-35.
- **Technical Level**: 26 users stated they are "proficient with computers," 6 use their computer "just for email and internet, not much else," and 3 considered themselves "programmers or experts."
- **Machine Use**: Laptops were primarily used for personal and school purposes, with about half also used for work.
- **Machine Age**: 19 laptops were more than 1 year old, 7 were 6-12 months old, 3 were 2-6 months old, and 6 were less than 2 months old.
- **Single User**: All but 6 machines were used by a single user.
- **Update Behavior**: 4 users admitted to ignoring or disabling update prompts.

### Log Data

CodeShield logged all code that was blocked, the number of times a user entered installation mode, how they entered (reboot or direct switch), all major code executed (just exes, not dlls), all critical writes (writes to a dll/exe/sys file), system start and shutdown events, and what digital signatures were trusted by CodeShield.

Two participants' log files were deleted for unknown reasons, and one participant never submitted their results. All three belonged to the switch group. Therefore, we are reporting data from 35 users, with 20 in the reboot group and 15 in the switch group.

Among the 15 users in the switch group, two had log data for about four weeks instead of six. One participant terminated the study after about one month, reporting that his laptop did not boot and thought it was due to CodeShield. After reseating the memory chips, the problem went away, but he decided to withdraw from the study. Another user dropped his laptop about one month into the study but submitted periodic logs, providing about one month of data.

### User Study Results

While we were confident about the design philosophies of CodeShield and tested extensively before the user study, we were concerned about the actual user experiences during the 6-week study. Some software updates introduce unsigned files that are blocked. CodeShield is an intrusive security mechanism that can prevent any binary from loading and changes how the user interacts with the system. If unexpected events occur in the user's behavior or in the software they use, the system could become difficult to interact with. However, the user study ran smoothly.

#### Summary Results

- **Installation Mode Entries**:
  - **Switch Group**: Users entered installation mode more frequently due to the ease of switching. The maximum for the switch group was 41, caused by a game that frequently writes unsigned binaries. Several other participants in the switch group entered installation mode many times (e.g., 33, 28, 27).
  - **Reboot Group**: The maximum for the reboot group was 30; this participant failed to update their A/V software properly.

Overall, the study demonstrated that while CodeShield is effective in blocking malware, the usability and user experience can be improved by addressing issues with unsigned binaries and frequent updates.