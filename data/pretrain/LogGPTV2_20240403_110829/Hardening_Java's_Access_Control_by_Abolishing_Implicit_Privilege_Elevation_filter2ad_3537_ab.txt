or sanitization of the passed arguments. In this way, clients
outside the trusted base can misuse Util to bypass all
permission checks within openFile, as Util is trusted, i.e.,
associated with a null classloader. In the past, accidentally
introduced confused deputies like Util have actually led to
severe vulnerabilities in the JCL that allowed attackers to
completely break out of the JVM’s sandbox (e.g., CVE-2012-
5088).
In this work we propose a systematic tool-assisted hardening
of the JCL that virtually avoids this class of security-breaking
programming mistakes. On a high level of abstraction, the
hardening causes the JCL to make privilege elevation explicit
in (almost) all cases. Our approach works in two steps. An
initial, very lightweight static analysis step assists in locating
shortcuts in permission checks like the one illustrated in
Listing 1, line 5. A subsequent adaptation step then transforms
the JCL such as to avoid the possibility to accidentally
introduce confused deputies like Util, while retaining back-
ward compatibility. The adaptation eliminates the shortcuts
by introducing proper permission checks in every instance
(with two interesting exceptions described later) via Java’s
doPrivileged-wrappers. By calling a doPrivileged-
wrapper, a piece of code can elevate a caller’s privileges
temporarily and explicitly, vouching for the correctness and
security of the actions performed on the caller’s behalf. Our
adapted JCL uses doPrivileged-wrappers to elevate privi-
leges explicitly where they were previously elevated implicitly
by shortcuts. This retains backward compatibility, meaning
that all applications that were designed and compiled for the
original JCL also run on the modiﬁed JCL.
For illustration Listing 2 shows the result of applying our
adaptation to the code in Listing 1. The adapted version
of FileAccess.openFile does not take a shortcut any-
more, causing a stack walk in every instance initiated by the
call to checkPermission. An unprivileged attacker call-
ing Util.openFileFromRoot will cause the permission
check to fail, because the triggered stack walk recognizes the
unprivileged attacker and throws a SecurityException,
thus eliminating the previous vulnerability. To make adapta-
tion backward compatible, the adapted readProp explicitly
elevates its privileges through a doPrivileged call (lines
11–13).
After applying the proposed technique to a JCL release,
doPrivileged-wrappers become the only way in which the
JCL elevates privileges. As we show later, this greatly reduces
the runtime’s attack surface.
III. PROBLEM STATEMENT
This section elaborates on the problems with shortcuts in
Java’s permission checks. Shortcuts implicitly elevate privi-
1029
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:58 UTC from IEEE Xplore.  Restrictions apply. 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
class FileAccess {
File openFile(String path) {
SecurityManager s = System.getSecurityManager();
s.checkPermission(new FilePermission(path));
return newFileHandle(path);
}
}
class SystemProperties {
public String readProp(String name) {
// Java 8’s lambda syntax ...
File f = AccessController.doPrivileged(
(PrivilegedAction) () -> FileAccess.
openFile(JDK_PATH+"/system.properties"));
... //read property
}
}
// code below this point is added in a later release
class Util {
public File openFileFromRoot(String name) {
//will throw SecurityException
return FileAccess.openFile("/"+name);
}
}
Listing 2. Example of adapted code
leges to a certain subset of callers, with two severe effects.
On the one hand, shortcuts increase the number of po-
tential attack vectors. Attackers can abuse reﬂection to call
shortcut-containing methods on behalf of a trusted class.
Many of these methods will skip a permission check, be-
cause the immediate caller
is trusted, and thus provide
functionality that was intended to be restricted. Two ex-
amples of such methods that are known to be of great
value to attackers are Class.getDeclaredFields and
Class.getDeclaredMethods, which skip permission
checks, if the immediate caller is deﬁned by the same class-
loader as the class whose members shall be accessed by the
call. They can be used to access private members of a class
that were intended to be inaccessible by untrusted code. To
ﬁnd examples of such kinds of attacks, we manually reviewed
a sample set of exploits that was provided by Security Ex-
plorations [12] consisting of 48 original exploits. We found
that at least four of those exploits depend on shortcuts.2 As a
recent study by Holzinger et al. shows, however, the problem
is even more prevalent: that caller sensitivity in combination
with confused deputies alone is abused by 36% of all exploits
they found in the wild [5].
On the other hand, the potential is high that developers, who
are either not aware of or unable to properly reason about the
implicitly elevated privileges, introduce security ﬂaws when
extending the library by implementing new callers of methods
with shortcuts or evolve existing code. In the following, we
elaborate on the reasons.
First,
information about shortcuts is rarely part of the
method’s documentation. Hence, developers of any caller
methods will not be aware that calling certain meth-
ods imposes requirements on their implementation to not
expose critical
functionality to untrusted code. Consider
again Class.getDeclaredMethods and the scenario,
2Issues 32 (using CVE-2012-5088), 35, 36, 37
the JCL introduces a wrapper,
where a maintainer of
MethodFilters whose privateMethodsOf(Class)
calls Class.getDeclaredMethods and ﬁlters out the
non-private methods from the set returned by it. This seem-
ingly harmless new functionality allows attackers to access
all private methods of all classes within the JCL. The short-
cut within Class.getDeclaredMethods only considers
MethodFilters’s classloader, which does coincide with
that of Class, but let go unchecked the potentially attacker-
controlled caller of MethodFilters.
In the best case, the developer of a caller method knows
about the shortcut in the callee, e.g., through the Java Secure
Coding Guidelines (JSCG), which provides explanations and a
list of methods that implement shortcuts. He may consciously
make the decision to take the risk and the responsibility
to prevent harm. When he does so,
this decision is not
documented in the code. In future code revisions, maintainers
unaware of the special requirements imposed by the shortcut
may inadvertently invalidate the security precautions taken by
the original author.
Second, hardcoded shortcuts are hard to analyze. There is
no dedicated Java language construct or API support to express
and document assumptions about the call stack. As a result, the
effect and the scope of the implicit privilege elevation can only
be reasoned about by careful examination of the shortcut’s
implementation and in addition requires deep knowledge of
JCL classes and their properties. This reasoning is a very
tedious and error-prone task. Thus, even when the developers
know the list of methods that implement shortcuts by heart,
using them implies constant awareness and a lot of effort by
developers to prevent the introduction of new confused-deputy
vulnerabilities.
it
Third,
is hard to maintain the security of shortcut-
containing code in the face of code evolution. Security-
sensitive methods that implement shortcuts often assume a
speciﬁc order of callers on the call stack. Changes to the
code that affect the order of callers may cause the sensitive
method to misbehave, if assumptions are not properly adjusted.
It is hard to judge whether a local change in the code base
violates the assumptions of some hardcoded shortcut. Thus,
every change has to be properly analyzed to rule out potentially
negative side effects on policy enforcement. Since, as already
mentioned, such an analysis is manual and very involved, the
risk is high that code evolution will introduce vulnerabilities.
Fourth, hardcoded shortcuts are inﬂexible. Changes in the
deployment environment for Java applications may affect risk
considerations and security requirements. Adjusting policies
accordingly is a matter of conﬁguration, whereas changing
hardcoded shortcuts is impractical.
Shortcuts violate several well-accepted secure design prin-
ciples. Yee proposed [13] a set of ten fundamental principles
that should be followed when designing a secure system.
While those principles were originally developed to reason
about the usability of entire software systems from an end-
user’s perspective (e.g.,
the user interface of a password
prompt), T¨urpe showed in [14] that the same principles can
1030
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:58 UTC from IEEE Xplore.  Restrictions apply. 
void checkMemberAccess(Class clazz, int w) {
if (w != Member.PUBLIC) {
Class stack[] = getClassContext();
/* stack depth of 4 should be the caller
* of one of the methods in java.lang.Class
* that invoke checkMember access.
* The stack should look like:
* someCaller
[3]
* java.lang.Class.someReflectionAPI [2]
* java.lang.Class.checkMemberAccess [1]
* SecurityManager.checkMemberAccess [0] */
if ((stack.length<4) ||
(stack[3].getClassLoader() !=
clazz.getClassLoader())) {
checkPermission(CHECK_MEMBER_ACCESS);
}
}
}
Listing 3.
Shortcut permission check with inline comments document-
ing assumptions about callers in java.lang.SecurityManager (Java
1.7.0u25)
also be applied for purposes of API usability evaluation. The
deﬁciencies discussed above violate ﬁve of the ten principles:
(a) “Path of Least Resistance”, because developers need extra
effort to prevent the introduction of confused-deputies; (b)
“Explicit Authority”, due to the implicit nature of shortcuts;
(c) “Visibility”, since shortcut-containing methods appear as
“regular” methods; (d) “Revocability”, because developers
cannot refrain from privilege elevation through shortcuts; and
ﬁnally (e) “Clarity”, because the effects on policy enforcement
are unclear when using a method that contains a shortcut.
To illustrate an extraordinary case of shortcuts, Listing 3
shows actual code that was released as part of Java 1.7.0
update 25. The method in this example was used, for instance,
by java.lang.Class, to restrict reﬂective access from one
class to members of another class. A shortcut will bypass a call
to checkPermission, thus preventing stack inspection and
granting the privilege implicitly if certain constraints on the
call stack are unsatisﬁed. This is an interesting case because
checkMemberAccess makes extensive assumptions about
the call stack, involving the size of the stack and the order of
callers. It may easily happen that code will be introduced that
violates these assumptions, which is also why one ﬁnds the
following warning in java.lang.Class: “Don’t refactor;
otherwise break the stack depth [...] as speciﬁed.”. Already
in 2009, Li Gong underpinned that counting stack frames is
highly fragile and highlighted stack inspection as a key feature
of Java 1.2 that would ﬁnally allow for more reliable access-
control checks [15].
To recap the discussion, we conclude that shortcuts signif-
icantly complicate the task of writing secure code in the ﬁrst
place and even more so the task of maintaining security in the
face of evolution. This claim is supported by various confused-
deputy vulnerabilities in past versions of Java, which demon-
strated how attackers can proﬁt from inadvertently exposed
functionality. The most prominent of these vulnerabilities are
listed in the NVD [16] under CVE-2012-4681, CVE-2012-
5088, CVE-2013-0422, and CVE-2013-2460.
Privileged actions versus shortcuts
Since our approach to address the discussed problems with
shortcuts is to replace them by privileged actions, we conclude
this section by brieﬂy considering privileged actions and
shortcuts side-by-side.
Privileged actions are in many ways similar to shortcuts.
They terminate stack walks early, thus potentially allowing
untrusted code to perform security-sensitive actions on behalf
of trusted code. In this sense, all callers of methods that
implement shortcuts are in the same intermediary role as
code executing within doPrivileged. In both situations,
developers have to ensure that security-sensitive functionality
is not exposed in a way that is proﬁtable to attackers. However,
besides the above similarities, there are signiﬁcant differences
between privileged actions and shortcuts. Using a privileged
action involves a developer who actively declares to make
the conscious decision to take and control a risk, and who
can therefore be assumed to know that security precautions
are required. Calling doPrivileged makes this decision
explicit. The fact that privileged actions are explicitly marked
as such and restricted by a lexical scope makes them easy to
reason about. Unlike implicit shortcuts, the use of privileged
actions is supported by a dedicated, well-speciﬁed API, and
well-deﬁned algorithms, e.g., the access-control algorithm as
documented in [2]. Automatic program analysis, as well as
manual reviewers beneﬁt from this dedicated support.
IV. PROPOSED SOLUTION
Our proposed solution comprises three steps. First, one
has to locate all shortcuts. Note that there is no complete
documentation on shortcuts available. The JSCG is helpful
because it provides a list of ofﬁcially supported caller-sensitive
methods. However, it does not state which of these methods
implement an access-control shortcut, and the list
is not
guaranteed to be complete today nor in the future. The second
step is to remove the shortcuts found. Finally, for backward
compatibility, one has to wrap the calls in the JCL to those
methods that formerly implemented shortcuts into privileged
actions.
We implemented our proposed solution on the basis of
OpenJDK 8 b132-03 mar 2014, such that we can evaluate
its feasibility and performance impact. We applied a semi-
automated approach to locate and remove shortcuts in the JCL.
The following three sections provide details on each step of
the transformation process. We expose all artifacts required to
reproduce our results with this paper.3
A. Locating shortcuts
The identiﬁcation of JCL methods that contain shortcuts is
complicated by four related factors. First, there is no dedicated
language support to express constraints on the call stack, which
is why they cannot be trivially recognized. Second, security-
sensitive methods do not necessarily implement shortcuts and
calls to the security manager by themselves, but may use
3https://github.com/stg-tud/jdeopt
1031
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:58 UTC from IEEE Xplore.  Restrictions apply. 
helper methods instead. Third, security-sensitive methods are
scattered all over the code base, so the identiﬁcation process
has to take into account all parts of the JCL. Fourth, the JCL
comprises a rather large code base, which renders infeasible
all purely manual approaches.
of
this
is
that
typically