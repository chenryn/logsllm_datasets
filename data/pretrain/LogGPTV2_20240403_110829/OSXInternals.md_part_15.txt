The Classic virtualizer and the applications that run within it
PowerPC-specific screensavers
For an application to run successfully under Rosetta, all components of the application, including loadable
plug-ins, must be PowerPC-based.
Rosetta is launched by the kernel to handle a file that is one of the supported PowerPC executable types.
Rosetta code resides in the same Mach task as the "guest" executable. It dynamically translateswith
optimizationsblocks of PowerPC code to x86 code, while alternating between code translation and code
execution. To improve translation performance, Rosetta caches blocks of translated code.
2.12. User Interface
Aqua is the cornerstone of visual user experience in Mac OS X. It is not one or more specific applications,
libraries, or APIs but a set of guidelines that describe the look-and-feel, behavior, and integration of GUI
elements. Besides user-interface guidelines, the Mac OS X user experience also depends on applications
using recommended technologies in their implementations. Mac OS X application environments that support
GUI-based applicationsCarbon, Cocoa, and Javaall provide the Aqua look-and-feel.[60] The Interface
Builder assists programmers in laying out user-interface elements in accordance with interface guidelines.
[60] As we saw earlier, Mac OS 9 applications running under Classic retain their original look-
and-feel because Classic does not conform to Aqua.
The X Window System and Aqua
In the X Window System, the window manager is an X application that is a client of the X
Window server. We saw earlier in this chapter that the Mac OS X implementation of the X
Window System includes a window manager (quartz-wm) that provides the Aqua look-and-
feel.
However, only certain visual and behavioral aspects of an X Window applicationspecifically
those controlled by the window managerwill benefit from Aqua. The application's own look-
and-feel will depend on the specific widget set being used.
The Mac OS X user interface has several distinctive features, many of which depend on the features of the
available graphics hardware. Let us look at the important user-interface features.
2.12.1. Visual Effects
Aqua uses animation, color, depth, translucence, textures, and photorealistic icons rendered at various sizes
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 55 of 80
up to 256x256 pixels,[61] making possible a visually appealing interface. Icon images at various sizes are
contained in .icns files.
[61] Mac OS X 10.4 added support for 256x256 pixel icons.
You can use the Icon Browser application (icns Browser.app), which is installed as part of Apple
Developer Tools, to view the contents of .icns files. Use the Icon Composer application (Icon
Composer.app) to create .icns filesfor example, from arbitrarily sized images in various formatsby simply
dragging the images[62] to the Icon Composer window.
[62] An icon usually has an associated "mask" used to designate certain parts of the icon as
transparent, allowing arbitrarily shaped icons to be generated. You can specify the data and
mask components of the icon by dragging an image for each, or Icon Composer can
automatically calculate the mask based on the data image.
2.12.2. Resolution-Independent User Interface
Beginning with Mac OS X 10.4, Aqua is resolution-independent. The system supports multiple scaling
modes: framework scaling mode, application scaling mode, and magnified mode. Each mode provides
support in applying scaling factors to rendered graphics.
In framework scaling mode, the graphics subsystem in usesuch as the Application Kit (Cocoa) or HIView
(Carbon)automatically handles most of the scaling. For example, the relevant frameworks will automatically
scale user-interface elements, apply scaling transforms to rendered content, increase the size of window
buffers, and so on.
In application scaling mode, the application must handle scaling of rendered content. The frameworks will
still scale system-defined user-interface elements, such as menus and title bars.
In magnified mode, the window server will simply create a magnified view of the image by applying a
scaling factor to the window buffer. This is essentially a digital zoomthere is no gain in image detail while
zooming in since pixel data is simply being interpolated to a new size.
You can experiment with user-interface resolution scaling by using the Quartz Debug application (Quartz
Debug.app), which allows you to vary the scaling factor from its default value of 1. Quartz Debug is a part
of Apple Developer Tools.
2.12.3. Productivity Features
Mac OS X includes several user-interface features that enhance user experience, for example: in-place
document preview, in-icon status indication,[63] instant access to any open window with a single keystroke
(Expos√©), fast user switching, Dashboard, and the user interface to Spotlight.
[63] Applications can superimpose information on their icons to convey it to the user. For
example, Apple's Mail application uses a status indicator in its icon to display the number of
unread messages.
2.12.3.1. Fast User Switching
Newer versions of Mac OS X include support for switching between users rapidly through the fast user-
switching feature. With this feature, a user's session remains active "behind the scenes" while another user
accesses the computer in an independent GUI session using the mouse, keyboard, and display. Multiple
users can switch in this manneronly one user remains the "current" user, and everybody else's session
remains intact in the background. Note that if there is an application that does not run correctly when
multiple instances of that application are run, and multiple users attempt to run such an application, fast
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 56 of 80
user-switching may cause problems. Mac OS X 10.4 added support for making operations such as logging
out, shutting down, and restarting the system faster and less cumbersome.
2.12.3.2. Dashboard
Dashboardintroduced in Mac OS X 10.4is an environment for running lightweight desktop utilities called
widgets.[64] Dashboard widgets are confined to a special layer of the Mac OS X desktop that is hidden from
view until activated by the user. When activatedfor example, through a predefined key combination[65]the
Dashboard layer is overlaid on top of the normal Desktop, providing rapid access to the currently selected
widgets. Deactivating Dashboard hides the widget layer.
[64] Technically, Dashboard is an application environment, the "applications" being widgets.
[65] The default key assigned to Dashboard is F12.
2.12.3.3. Spotlight
Although it is a file system technology, Spotlight is an important addition to the Mac OS X user interface
since it fundamentally changes how users access files. The Spotlight metadata search technology roughly
encompasses three distinct pieces of functionality:
1. An in-kernel notification mechanism that can inform user-space subscribers of file system changes as
they occur
2. A database of various types of file-related informationin particular, of harvested metadata
3. The programmer and end-user interfaces to Spotlight
A user-space Spotlight server subscribes to receive file system changes from the kernel. It can gather
metadata from documents and other relevant user files, both dynamically (as files are created or modified)
and statically (by scanning for files). It incorporates the harvested metadata into a searchable lightweight
database. Spotlight's integration with the Finder provides a powerful search mechanism to the user.
Moreover, the Finder can use file metadata to display additional relevant information about files.[66] The
Spotlight search API allows searching for files programmatically by using database-style queries. Spotlight
is extensible by third-party developers: If an application uses a custom file format, it can provide a Spotlight
importer plug-in that will parse the application's documents and gather metadata.
[66] For example, in the case of a PDF document, the PDF file's metadata may contain attributes
such as the document's title, author, number of pages, page dimensions, creator application, and
summary. The Finder and Spotlight search results window can display these attributes.
2.12.4. Universal Access Support
Mac OS X supports several accessibility technologies and features, such as those listed here.
Enhanced Contrast can be varied through the ctrl-cmd-option-, and ctrl-cmd-option-. key
combinations.
Full Keyboard Access allows the keyboard to be used for navigating and interacting with on-screen
items.
Grayscale Mode can be toggled through a checkbox in the Seeing pane of the Universal Access
system preference.
Inverted Colors Mode can be toggled through the ctrl-cmd-option-8 key combination.
Mouse Keys allows controlling the mouse pointer using the numeric keypad.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 57 of 80
Screen Zooming allows increasing the size of on-screen elements. It can be turned on or off through
the cmd-option-8 key combination. Once the feature is enabled, you can zoom in and zoom out using
cmd-option-+ and cmd-option--, respectively.
Speech Recognition allows the user to speak commands rather than type them. When this feature is
enabled, the computer will listen for commands and, if recognized, act on them.
Sticky Keys allows the user to press a set of modifier keys as a sequence, rather than having to press
several keys at once.
Text-to-Speech enables the computer to speak the text in dialogs and alert messages.
VoiceOver provides spoken user-interface featuresthat is, it describes what is happening on the screen.
It can be turned on or off through the cmd-F5 key combination.
Accessibility features can be controlled through the Universal Access pane in the System Preferences
application.
Two of the most important Mac OS X frameworks, Carbon and Cocoa, automatically provide several
accessibility features to applications.
2.13. Programming
Mac OS X includes an integrated development environment (IDE) called Xcode, numerous general-purpose
and special-purpose libraries, compilers and interpreters for various programming languages, and a rich set
of debugging and optimization tools.
2.13.1. Xcode
The development environment provided by Xcode has the following noteworthy features:
Support for creating Universal Binaries
A file browser and organizer
Support for project window configurations called workspaces,[67] which let you choose a preferred
layout for Xcode's on-screen components
[67] Xcode comes with multiple preconfigured project workspaces, such as Default,
Condensed, and All-In-One.
A source code editor with code completion, syntax highlighting, symbol indexing, and embedded
editors in most windows, allowing source viewing and modification without switching windows
A class browser
Background indexing of project files to improve the performance of features such as class browsing
and code completion
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 58 of 80
A documentation viewer that can link symbols in the code to documentation and otherwise allows
viewing and searching Apple documentation
The Interface Builder application, which provides a graphical user interface for laying out interface
objects, customizing them (resizing, setting, and modifying attributes), connecting objects, and so on
A built-in visual design tool that lets you create persistence models (for use with the Core Data
framework) and class models (for C++, Java, and Objective-C classes)
 Distributed buildsfor example, across several machines on a networkvia integration with the distcc
open source distributed front-end to the GNU C compiler
GDB-based graphical and command-line debugging, including remote graphical debugging[68]
[68] Remote debugging uses SSH public-key authentication while connecting to the
remote computer. Xcode can use the ssh-agent helper application for this purpose.
Predictive compilation, which runs the compiler in the background as you edit a single source file,
with the expectation that once you are ready to build, most of the building may already have been
done
Precompiled headers, a feature that improves compilation speed (Figure 228 shows an example)
Figure 228. Using precompiled headers
$ cat foo.h
#define FOO 10
$ cat foo.c
#include "foo.h"
#include 
int
main(void)
{
printf("%d\n", FOO);
return 0;
}
$ gcc -x c-header -c foo.h
$ ls foo*
foo.c foo.h foo.h.gch
$ file foo.h.gch
foo.h.gch: GCC precompiled header (version 012) for C
$ rm foo.h
$ gcc -o foo foo.c
$ ./foo
10
ZeroLink, a feature that causes linking to occur at runtime instead of compile time, whereby only code
needed to run the application is linked and loaded
When ZeroLink is used, Xcode generates an application stub containing the full paths to the relevant
object files, which are linked, as needed, at runtime. Note that ZeroLink is intended for use only
during developmentit requires you to run the application from within Xcode. In other words,
applications compiled with ZeroLink enabled cannot be deployed.
Fix and Continue, a feature that allows you to make a minor change to your code, have the code
compiled, and have it inserted into a running program through in-memory patching[69]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 59 of 80
[69] There are several restrictions on the types of changes accommodated under Fix and
Continue.
Dead-Code Stripping, a feature that makes the static linker strip unused code and data from
executables, thereby potentially reducing their sizes and memory footprints
Support for browsing memory and global variables in the debugger
Support for launching software performance analysis tools
Support for automating the build process using AppleScript
Support for multiple version control systems such as CVS, Perforce, and Subversion
A new Xcode project can be instantiated from a large number of templates, depending on the type of
application, programming language, target environment, and so on. Supported languages include
AppleScript, C, C++, Java, Objective-C, and Objective-C++. Examples of supported templates include those
for Automator Actions, Image Unit Plug-ins, Metadata Importers, Preference Panes, Screen Savers, and
Sherlock Channels.
Although Xcode is normally used through its graphical user interface, you can also work with existing
Xcode projects from the command line. The xcodebuild command-line program can be used to build one
or more targets contained in an Xcode project, optionally with a specific build style such as Development or
Deployment. The pbprojectdump command-line program can be used to dump an Xcode project dictionary
in a human-readable format, thus allowing you to view the project structure. If you must avoid Xcode
altogether, you can manage your projects "manually"for example, by creating makefiles and tracking
dependencies. Mac OS X includes the BSD and GNU versions of the make program: bsdmake and gnumake,
respectively.
The back-end of the Xcode build system is based on the Jam product (/Developer/Private/jam) from
Perforce Software, Inc.
2.13.2. Compilers and Libraries
Apple provides a customized and optimized version of the GNU C compiler with back-ends for multiple
languages. As we saw earlier in this chapter, two Java compilers are included. Other compilers for a variety
of languages are available both commercially[70] and freely.[71] The situation is similar for libraries: Several
are included with Mac OS X and several can be compiled from source. In particular, Mac OS X includes
some optimized, special-purpose libraries, for example, BLAS, LAPACK, vBigNum, vDSP, vImage, and
vMathLib. All these libraries, which are meant for image processing or numerical and scientific computing,
are accessible through the Accelerate umbrella framework (Accelerate.framework).
[70] Commercially available compilers include those from Intel and Absoft Corporation.
[71] Numerous open source compilers, interpreters, and libraries can be readily compiled from
source on Mac OS X. In general, the difficulty of doing so is roughly on par with that on
systems such as Linux and FreeBSD.
2.13.3. Interpreters
Several scripting languages are included in Mac OS X: AppleScript, Perl, PHP, Python,[72] Ruby, and Tcl.
Multiple Unix shells are also included, such as bash, ksh, tcsh, and zsh. Mac OS X supports the Open
Scripting Architecture (OSA), with AppleScript as the default (and only) installed language. Other
languages for the OSA are available from third parties.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 60 of 80
[72] Python on Mac OS X includes bindings to Core Graphics.
2.13.3.1. AppleScript
AppleScript is the preferred scripting language on Mac OS X, providing direct control of many parts of the
system as well as applications. For example, using AppleScript, you can write scripts to automate
operations, exchange data with applications, or send commands to applications. AppleScript can be used
inand acrossall application environments. For application-specific actions to be performed using
AppleScript, the application must explicitly support AppleScript. Such support typically requires a data
model that lends itself well to being manipulated externally. However, generic operations (such as launching
an application) are supported automatically. Figure 229 shows a trivial AppleScript program that speaks the
operating system version. You can use either the osascript command-line tool or the AppleScript editor
(/Applications/AppleScript/Script Editor.app) to run this program.
Figure 229. A trivial AppleScript program
-- osversion.scpt
tell application "Finder"
set system_version to (get the version)
say "[[emph +]]Cool. This is Mac OS Ten" & system_version
end tell
osascript executes a script file, which may be either a textual version or a compiled version of an
AppleScript program. The osacompile command[73] can be used to compile source files, the standard input,
or other compiled scripts into a single script.
[73] The osascript and osacompile commands will work with any installed scripting language
that conforms to the OSA.
2.13.3.2. Automator
The Automator application is a visual tool for automating repetitive operations on Mac OS X. An Automator
action is a modular unitan indivisible task from Automator's standpoint. For example, a task can create a
directory, open a file, capture a screenshot, send an email message, or run a shell script. Multiple actions can
be connected in a particular sequence to construct a workflow, which in turn is executed to perform the
arbitrarily complex set of tasks that the workflow represents. An action may or may not require additional
informationor argumentswhen it executes as part of a workflow. If additional information is required, the
action displays a user interface consisting of text fields, checkboxes, buttons, pop-up menus, and so on.
Automator includes a large number of predefined actions, but users can create their own actions using either
AppleScript or Objective-C. A workflow is created visually by dragging or adding actions to a construction
area. Finally, workflows can be saved for running later.
2.13.3.3. Command-Line Support