- port: 443
- packet_train: ’399{1,2}, 51{1,2}, 1000-1260{1,2}, 38’
actions:
...
Fig. 3. Example of rule. The underlying data representation language used is YAML.
4.3 Performance Evaluation
We evaluated the performance of the entire system experimentally using our
proprietary DPI engine [7] in a live traﬃc test-bed. We used an HPE Proliant
DL380 Gen9 server with two Intel R(cid:2) Xeon R(cid:2) E5-2699 v4 CPUs at 2.20 GHz
with hyper-threading enabled, providing us with 88 logical cores (lcores), and
conﬁgured with 1 TB of RAM. The system has 4× 40 Gbps NICs, two on each
CPU socket. CentOS Linux release 7.4.1708 with kernel RPM version 3.10.0-
693.11.6.el7.x86 64 was used.
OTTer: A Scalable High-Resolution Encrypted Traﬃc Identiﬁcation Engine
325
whatsapp_video:
event: packet
conditions:
- packet_train:
- ’3{1,3}, 48-60{1,3}, 3{1,3}, 117’
- ’3{1,3}, 48-60{1,3}, 3{1,3}, 144’
- ’3{1,3}, 48-60{1,3}, 3{1,3}, 102’
Fig. 4. Example of rule with a disjunction of patterns handled internally by the
packet train extension.
The DPI engine is conﬁgured to use 8 lcores for processing the traﬃc from
the four ports (two lcores per port). These lcores perform just suﬃcient packet
decoding in order to load balance the traﬃc internally to 58 lcores conﬁgured
to perform traﬃc inspection. These are the lcores running our implementation.
The rest of the lcores in the system are dedicated to other tasks such as logging
and shell access.
The traﬃc load consisted of real mobile user traﬃc that varies throughout the
day between 52–153 Gbps with an average of 109 Gbps, 20–25 Gpps and between
67–230 K new connections per second with an average of 161 K/s. Throughout
the experiments we conﬁrmed that the system does not exhibit packet loss.
First we measured the baseline CPU utilization of the traﬃc inspection
lcores using mpstat over 1 min intervals. For a traﬃc of about 130 Gbps at 1
pm local time, we measured a CPU utilization of 34.2%. After enabling our
DPI engine extension, and making sure it is invoked for all packets, we mea-
sured 37.6%, an increase of about 10%. We also took a closer look using the
perf tool, to narrow down on the speciﬁc function performing our checks, called
extension packet train multiset match. We measured it at 3%, even without
any actual patterns loaded. This number is an upper bound. If the automaton
is fed only packets for pre-screened traﬃc that belongs only to the applica-
tion (using appropriate signatures), the performance impact of our extension is
expected to be less.
Subsequently, we loaded packet train signatures, increasing the number of
signatures in each experiment to measure the impact of the number of signatures
on the CPU utilization. We tried 1–5, 10, 15 and 20 signatures. The results were
within the 2.7–3% range, with signiﬁcant variance and without any observable
trend. This observation shows that the bulk of the cost comes from the mere
interposition of our extension into the DPI engine’s pipeline and does not depend
on the number of patterns, at least up to a number of 20 patterns.
5 Amenability to Data Mining
5.1 Rule Mining Methodology
In order to illustrate the robustness of our event signature approach as well
as to permit fast signature extraction for numerous application - event combi-
326
E. Papadogiannaki et al.
nations, we automated the process. The application event rules were extracted
from the packet traces by using frequent pattern mining (FPM) to detect fre-
quent packet sequences and then correlating these patterns to the ground-truth
events. This approach avoids the dependence on packet statistical measures com-
monly employed by other studies [4,24,31]. In order to extract the rules, the
following steps are taken on the training dataset:
1. Pre-processing: All packets with a diﬀerent process id than that of the applica-
tion under examination are ﬁltered out. Similarly, as mentioned in the above,
TCP retransmissions are ﬁltered out. Finally, all local and remote IPs are
considered as a single local and a single remote IP, respectively.
2. Packet statistics: Afterwards, the absolute frequency of all pre-processed
packet (source, destination, payload length) is calculated, and packet tuples
whose frequency is greater than a predetermined percentile are mapped to
unique identiﬁers (called items in the following). All other packet tuples are
grouped according to their source and destination, as previously, but with the
payload length segmented in 4 equally sized buckets, and similarly mapped
to identiﬁers. This step was taken so as to limit the eﬀect of variable payload
length on the pattern mining (e.g., a long chat message may have a greater
payload length than a shorter one).
3. Trace splitting: The packet traces were split to bursts (or sequences) of traﬃc
(i.e., traﬃc with interpacket temporal distance less than a threshold, in this
case set to 1 second) [4,31]. It should be noted that as one of the type of
events investigated is outgoing chat messages, a larger temporal threshold
could potentially result in multiple chat messages included in one burst (chat
messages sent in quick succession). Furthermore, bursts not containing any
of the events under investigation are ﬁltered out. This step is taken in order
to divide the traﬃc to temporally correlated sequences, which, in turn, will
be used as an input to the frequent pattern mining algorithm.
4. Frequent Pattern Mining: Frequent pattern mining techniques are used to dis-
cern the correct packet patterns corresponding to the events among potential
noise. The present methodology utilises closed sequential patterns (i.e., a pat-
tern not strictly included in another pattern of the same support) as potential
application event rules in order to avoid loss of information. The patterns are
mined using the ClaSP algorithm [18].
5. Rule Generation: Finally, the rules are generated by identifying which closed
sequential patterns match well with the ground truth events (i.e., the pattern
timestamp is within a margin of the ground truth event timestamp).
In order to reduce the number of possible generated rules, the supersets of the
above matching patterns are used, and evaluated using the F1 measure (i.e.,
placing equal emphasis to both precision and recall). Finally, the generated rule
is used to detect application events on the test dataset. The training dataset
consists of 25% of the samples (the same samples as those used for training in
the main implementation as mentioned in Sect. 3.2).
It should be noted that the rules generated by the above mining approach
diﬀer to those of the main implementation in that they take into account the
OTTer: A Scalable High-Resolution Encrypted Traﬃc Identiﬁcation Engine
327
direction of packet. This can be easily included in the DFA engine by encoding
outgoing packets with a preceding minus sign to the payload size.
5.2 Rule Mining Evaluation
Table 5 shows the true positive rates achieved by the automated FPM method-
ology as well as the diﬀerence to the main implementation results. It can be
seen that the FPM methodology outperforms the main implementation in all
cases except Facebook where it underperforms. Furthermore, from Table 6, it
can be seen that the performance of the two approaches on the false discovery
rate metric is similar.
Table 5. TP rates of the automated FPM methodology. The diﬀerence to the main
implementation is given inside the parentheses.
Messaging Voice
Video
Application
Facebook messenger 42% (−41)
Skype
100% (+12) 96% (−4)
100% (0)
54% (−42) 83% (−13)
100% (+25)
96% (+42) 100% (+12)
Viber
WhatsApp
100% (0)
100% (+8) 100% (+25)
Table 6. False discovery rates of the automated FPM methodology. The “Messaging
FDR” column shows the percentages of erroneous messaging reporting in voice or video
samples. Respectively, “Voice/video FDR” column shows the percentages of erroneous
voice/video reporting in messaging samples. The diﬀerence to the main implementation
is given inside the parentheses.
Application
Messaging FDR Voice/video FDR
Facebook messenger 0% (0)
Skype
Viber
WhatsApp
2% (−3.5)
3% (+1)
2% (−6)
3% (+2)
8.4% (+4.2)
2% (0)
3.3% (+2.7)
The FPM methodology is able to achieve accurate detection of distinct out-
going chat messages with a true positive rate and false discovery rate (FDR)
of 98.55% and 3.54%, respectively, across all applications under investigation.
Figures 5 and 6 show randomly chosen packet captures from WhatsApp and
Skype messaging activity. We choose not to include the equivalent graphs for
the remaining applications due to space constraints. The vertical lines depict the
logged timestamp of the outgoing chat messages, while Main and FPM points
show the detected events using the two proposed methodologies. The slight tem-
poral deviation of the detected events from the ground truth timestamp can be
328
E. Papadogiannaki et al.
explained from the fact that the outgoing message is not truly instantaneous,
but rather spans from the transmission to the delivery acknowledgement.
Fig. 5. Packet capture of WhatsApp messaging activity. The vertical lines depict the
actual outgoing chat messages, while Main and FPM points show the detected events.
Fig. 6. Packet capture of Skype messaging activity.
Figure 5 shows a case where both our rule generation methods were able
to perfectly detect the actual events, as opposed to the case shown in Fig. 6
where both false positives and false negatives are present. An interesting obser-
vation that can be derived is the increased Skype traﬃc during the time window
10:39:06–10:39:15. During this time, the user attempted to choose emoticons
which were not pre-loaded.
OTTer: A Scalable High-Resolution Encrypted Traﬃc Identiﬁcation Engine
329
6 Related Work
Traﬃc Analysis. Our work falls under the broad subject of traﬃc analysis.
We brieﬂy identify some general related work ﬁrst, and subsequently expand on
the most relevant areas.
Traﬃc analysis has been used to identify web pages transferred over
encrypted tunnels established by privacy enhancing technologies such as
OpenSSL, OpenVPN or TOR. For example, Herrmann et al. [19] present a clas-
siﬁer that correctly identiﬁes up to 97% of web requests from packet traces.
Others used traﬃc analysis to extract voice information from encrypted VoIP
conversations. For example, Wright et al. [39] showed that when the audio is
encoded using variable bit rate codecs, the lengths of encrypted VoIP packets
can be used to identify phrases spoken within a call with high accuracy.
Similarly, a cellphone’s position can be located by monitoring the traﬃc of
certain applications that provide location-based services, even over encrypted
network traﬃc. For example, Ateniese et al. [8] show that an adversary could be
able to extrapolate the position of a target user by just analysing the size and the
timing of the encrypted traﬃc exchanged between that user and a location-based
service provider.
Identiﬁcation of Application Events in Encrypted Traﬃc. Most relevant
to our work is the literature on ﬁne-grained application event identiﬁcation over
encrypted traﬃc, surveyed in this section. The works in these section clearly
motivate the feasibility of traﬃc analysis, often with the use of machine learning
techniques. Our work builds on these feasibility results, but focuses on scalable
implementation and eﬃcient execution.
Coull et al. [14] proposed a method for traﬃc analysis of encrypted messag-
ing services. Speciﬁcally, they show that an eavesdropper can learn information
about user actions inside an application, the language and the size of the mes-
sages exchanged. Their results demonstrate the feasibility of gaining information
about the usage of applications by observing packet lengths, but their analysis is
focused on Apple’s iMessage application and is an oﬄine study. NetScope [29] is
a work that performs robust inference of users’ activities, for both Android and
iOS devices, based on inspecting IP headers. Its main purpose is to demonstrate
that a passive eavesdropper is capable of identifying ﬁne-grained user activities
within the wireless network traﬃc (even encrypted) generated by applications.
NetScope is based on the intuition that the highly speciﬁc implementation of each
app leaves a ﬁngerprint on its traﬃc behaviour, such as transfer rates and packet
exchanges, by learning subtle traﬃc behavioural diﬀerences between activities.
Liu et al. [24] developed an iterative analyser for classifying encrypted mobile
traﬃc to in-app activity. They selected an optimal set of the most discrimina-
tive features from raw features extracted from traﬃc packet sequences by a novel
Maximising Inner activity similarity and Minimising Diﬀerent activity similarity
(MIMD) measurement. To develop the online analyser, they represent a traﬃc
ﬂow with a series of time windows, which are described by the optimal feature
330
E. Papadogiannaki et al.