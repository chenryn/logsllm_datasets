c
e
d
(
P
1.00
0.75
0.50
0.25
0.00
●
●
●
●
●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●● ●●●
●●
●
●●●●
●●
●●
●●●●●●●●●●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
Delay
●
●
●
28s
14s
7s
Bit Location (ordered by P(decay at 28s))
Figure 14: Probability of decay, per bit, for non-refresh times of 7s, 14s, and 28s. Ordered by Pr(decay) at 28s.
s
r
o
r
r
e
t
i
B
106
105
104
103
102
●
●
●
●
●
●●●●
●
●
●
●●●●●●●●●
●
●
●
●●
●●
●
●
●
●
●
● ●● ●●●●●●●●●●●● ●●●●●●● ●●●●●●
●
● ●
●
●
●
●●●● ●●● ●
● ●●● ●●●● ●●●● ●●●● ●●● ●●●● ●●●● ●●● ●●●● ●●●● ●●●● ●●●●● ●●●●● ●●●
●●●●
●
●● ●●●● ●● ●●
● ●
●
● ●●●
●● ●●
●●●●
●
●
●
●
●
●
●●
●
●●
●●●
●
●
●
●
●●●
●●●●●●● ●●●● ●●●●● ●●●●●●●●●●● ●●●●● ●●●●● ●●●●●●●●●●●●●●●●●●●● ●●●●●●●●●●●● ●●●● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ●●●●● ●●●●●●●●●●●● ●●●●●● ●●●●●● ●●●●● ●●●●●● ●●●●●● ●●●●●● ●●●●●●●●●●●●●●●●● ●●●●●● ●●●●●● ●●●●● ●●●●●●●●●●●●●●●●● ●●●●●●●●●●● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ●●●●●●●●●●●●●●●●●●●● ●●●●●●●●●●●●●●●●●●●●●●●● ●●●●●●●●● ●●●●● ●●●●● ●●●●●●●●● ●●●●●●●●● ●●●●● ●●●● ●●●●●●●● ●●●●●●●●●● ●●●●● ●●●●● ●●●●● ●●●●● ●●●●● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ●●●●●●●●●● ●●●●●●●●●●
●●● ●●● ●●●●●
●●●●●●●●●
●●● ●● ●●●● ●●●● ●●
● ●●●● ●●●● ●●●● ●
●
●
●
●●●●●● ●●●● ●●●●
●●●● ●
● ●●●● ●●●●
●●●
●
●
● ●●●●● ●●●●●●●●
●
●●●
●● ●●●●●
●●● ●
●
●
●
● ●
●●●●● ●●●●●●●●● ●
0
20
40
60
80
Temperature (°C)
Figure 15: Probability of decay after one minute.
Next, we modiﬁed both layers of U-Boot, as well as the
Linux kernel, to incorporate the generated entropy into the
kernel randomness pools. We use a custom extracting hash
to condense the memory decay into 1,024 bits, and pass
the result into the kernel as a base-64-encoded parameter.
Overall, hashing and processing takes less than second, on
top of the unavoidable multiple-second DRAM decay time.
D. Results
1) Decay Probability and Distribution: Although we
could reliably observe many bits decaying, the distribution
of decay was not uniform. Figure 15 shows the distribution
of decay probabilities at 58 seconds. The values range from
0 (white) to very low (green) to near certainty (red). The
ﬁgure also shows that some areas of the DRAM do not
appear to decay at all.
The horizontal bands in the ﬁgure are due to the test
pattern initially written to memory. We wrote 0xAA to the
top quarter of memory, 0x00 to the next quarter, 0xFF to the
next, and 0x55 to the last quarter. In the areas which show no
decay, the pattern (0x00 or 0xFF) matched the cell’s “ground
state” (i.e., the state into which the cell naturally decays).
Figure 16: Relationship between temperature and DRAM
decay over a constant period.
This can vary because chips use different voltages for “0”
and “1” in different portions of the chip.
Figure 13 shows decay over time. The yellow bits decayed
ﬁrst and the red bits decayed last. Unsurprisingly,
the
longer the interval, the more bit errors occur and the more
randomness we are able to extract. In Figure 14, each bit’s
probability of decay over 7, 14, and 28 seconds has been
graphed. Perhaps unsurprisingly, every bit that ever decays
within 7 seconds has a 100% chance of decaying in 14 or
28 seconds. Interestingly, a number of bits with a non-zero
probability of decaying in 14 seconds don’t always decay by
28 seconds, indicating that DRAM bits don’t simply decay
in a set order, and can provide true entropy.
2) Temperature Dependence: Previous work has shown
that decay varies with DRAM temperature. To compensate,
many systems increase the refresh frequency as temperature
increases [21, 35]. Primarily, this is due to the increase in
DRAM cell leakage as temperature rises [21]. To understand
the effect of this temperature dependence on the probability
of decay, we set up an experimental protocol that allowed
us to control the temperature of DRAM. By submerging
600
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:24 UTC from IEEE Xplore.  Restrictions apply. 
DRAM in non-conductive isopropyl alcohol inside a refrig-
erator and using an aquarium heater, we were able to control
the DRAM temperature to ±1 ◦ C. For temperatures above
35 ◦ C, we used a laboratory oven to measure decay at high
temperatures.
Our results are shown in ﬁgure 16. We ﬁnd that at low
temperatures, the few bits which decay are consistent (i.e.
the same bits always decay). Around 20 ◦ C, we begin to see
bits that sometimes decay. At room temperature (23 ◦ C), we
begin to see an exponential rise in bit decay.
3) DRAM Temperature Modiﬁcation: We can generate
more randomness by increasing the temperature of the
DRAM chip. To accomplish this we wrote a simple ‘power
virus’ that attempts to maximize DRAM power consumption
and heat dissipation. The virus initializes a region of DRAM
and then reads repeatedly from different addresses. The
initial data and the addresses are choosen to maximize the
transition frequency on the DRAM pins.
We ﬁnd that by implementing our power virus, we heat
up the DRAM from 26 ◦ C to 29 ◦ C within 1 minute. We
run the power virus while waiting for bits to decay.
4) Variability:
In addition to randomness in bit decay
between boots, we also observed two kinds of variability
between individual boards: Decay probability variability, the
variability in the probability that different bits will decay;
and cold state variability, the variability in the initial contents
of DRAM after a cold boot.
This variability is due to manufacturing variations that
cause DRAM cells to leak at different rates, leading to the
decay probability variability we observe. Process variations
in the sense ampliﬁers (which convert the analog values
from the DRAM bits into logical “0”s and “1”s) is also
well documented [15], and probably contributes as well.
The variation in the DRAM’s contents from a cold boot
(measured after the device was powered off for 3 days) can
provide a unique ﬁngerprint for each board. For instance, at
25−28 ◦ C with a delay of 7s, on one BeagleBoard, a certain
10 bits always decay, while the other BeagleBoard has only
6 such bits. The two sets are disjoint; that is, the bits that
decay on one board do not decay on the other.
Under the assumption that, due to process variation, the
placement of these “leaky” bits is independent between
different DRAM modules, the locations of leaky bits act
as a ﬁngerprint for a particular BeagleBoard. Verifying this
assumption about the distribution of leaky bits would require
access to more systems than we have, and we leave it to
future work.
E. Extracting per-boot randomness from DRAM
The location of leaky bits cannot, by itself, be the basis
for random number generation. An attacker who has physical
access, who can mount a remote code-injection exploit, or
can otherwise run software on the device will be able to
locate its leaky bits. Therefore, we must examine the bits
that sometimes decay and sometimes do not.
We now give a rough estimate for the amount of entropy
available in the decay of these bits. Our analysis makes
the assumption that bits decay independently of each other.
This is a strong assumption and there evidence that it is at
least partly false, e.g., Section 3.3 of [13]. Accordingly, the
entropy estimates below are overestimates. We hope future
work can provide a better measure of available entropy.
We estimate Pr[decay] for each bit based on our experi-
ments and use this probability to compute the information
theoretic entropy content for this bit:
E(p) = −(cid:0)p · lg(p) + (1 − p) · lg(1 − p)(cid:1)
(3)
Under the assumption that bits decay independently of each
other, we can simply sum this distribution entropy over every
bit we saw decay.
For a BeagleBoard xM at 25-27 ◦C and with a decay time
of 7 s, we obtain a total boot-time entropy estimate of 4.9
bits, largely due to the fact that only 19 memory decays ever
happen, and 16 of these happen with p > 0.9 or p < 0.1. For
a decay time of 14s, we see 511 bits ever decay, and sum-
ming their entropy contributions gives an entropy estimate
of 209.1 bits. For a delay of 28s, 9,943 bits decay, for an
estimated entropy of 8,415.16 bits. For 56 seconds, we see
427,062 decays, for an estimated entropy of 98,611.85 bits.
A delay of even 14s on ﬁrst boot is unacceptable in many
applications. Moreover, because DRAM decay depends on
temperature, this approach may not provide security in very
cold conditions — for example, phones used on a ski slope.
V. PLL LOCK LATENCY
The PLLs that produce the on-chip clocks in modern
processors are complex, analog devices. When they start up
(or the chip reconﬁgures them), they take a variable amount
of time to “lock” on to the new output frequency (see 3 in
Figure 11). This variation in lock time is due to a number of
factors, including stability of the power supply, accuracy and
jitter in the source oscillator, temperature, and manufacturing
process variation [17]. Repeatedly reconﬁguring an on-chip
PLL and measuring how long it takes to lock will result in
random variations.
SoCs typically contain several PLLs used to derive clocks
for the processor, memory and peripherals. On the Beagle-
Board xM, the DM3730 contains 5 DPLLs (Digital Phase
Locked Loops). Each DPLL can be reconﬁgured and toggled
via a software register, and a status ﬂag and interrupt will
signal when a DPLL is locked. To measure the time it
takes to acquire a lock, we instrumented code to disable
the DPLL for the USB peripheral clock on the BeagleBoard
xM. Using the hardware performance counter, we measured
the number of cycles it took for the DPLL to reacquire a
lock (Figure 17).
601
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:24 UTC from IEEE Xplore.  Restrictions apply. 
l
s
e
p
m
a
S
#
 400K
 200K
0
8200
8400
8600
8800
Cycles
Figure 17: DPLL lock latency histogram measured by the
performance counter on the BeagleBoard xM.
We obtain about 4.7 bits of entropy every time we re-lock
the DPLL, and it takes at most approximately 9000 cycles
(9µs) for the DPLL to re-lock. Using the DPLL lock latency,
we can obtain about 522 KiB of pure entropy per second.
DPLL lock latency could be easily polled for entropy
during early boot when the SoC ﬁrst sets up the clocks and
PLLs in the system. Since the DPLL is affected by analog
conditions such as temperature, a determined attacker may
be able to induce bias in the lock time.
VI. CONCLUSION
Randomness is a fundamental system service. A system
cannot be said to have successfully booted unless it is ready
to provide high-entropy randomness to applications.
We have presented three techniques for gathering entropy
early in the boot process. These techniques provide different
tradeoffs along three metrics: how high the bitrate, how
speciﬁc to a particular system, and how well explained by
unpredictable physical processes.
Our ﬁrst technique, which times the execution of kernel
code blocks, provides a moderate amount of entropy and is
easily applied to every system we examined, but we are able
to give only a partial account for the source of the entropy
it gathers.
Our second technique, DRAM decay, provides a large
amount of entropy, but presents a heavy performance penalty
and is tricky to deploy, relying on details of the memory
controller. Its advantage is a physical justiﬁcation for the
observed randomness.
Our third technique, timing PLL locking, promises the
highest bitrate and is well supported by physical processes,
but its implementation requires intimate knowledge of the
individual SoC.
We implemented and characterized these techniques on
a broad spectrum of embedded devices featuring a variety
of popular SoCs and hardware, from resource-rich mobile
phone hardware to devices that aren’t much more than
an ethernet port and a SoC. While these three techniques
certainly can be applied to traditional desktop systems as
well as more powerful embedded devices, in some sense,
602
our tiny embedded systems start at a disadvantage. Wireless
devices can read randomness from radios; desktops can rely
on saved entropy from previous boots. Our work focuses
on adequately protecting headless, resource-poor embedded
devices, which must acquire strong entropy on their very
ﬁrst boot, before they can even export network connectivity.
Our work leaves many questions open. We are able to
give only a partial explanation for the entropy we observed
in our ﬁrst technique, and only a partial characterization of
the DRAM decay effects in our second technique. We hope
that future work can shed more light on the situation. More
work is also necessary to understand how much the gathered
entropy depends on environmental factors that might be
under adversarial control.
The three techniques we present exploit just a few of the
many potential architectural sources of randomness available
in modern systems. Other possible sources of entropy, which
we hope will be explored in future work, include voltage
scaling latency, GPIO pin voltage, ﬂash memory corruption
patterns, and power supply stabilization latency.
Our three techniques are all, ultimately, workarounds for
the lack of dedicated hardware random number generators
in embedded architectures. What will spur the adoption of
such hardware, by both hardware and software developers?
What is the right way to specify such hardware for the
ARM architecture, where a high-level core description is
licensed to many processor manufacturers? Furthermore, is
it possible to verify that such a unit is functioning correctly
and free of backdoors?
ACKNOWLEDGMENTS
We thank Daniel J. Bernstein, J. Alex Halderman, Nadia
Heninger, and Eric Rescorla for their comments and sugges-
tions.
We would like to thank Xilinx for donating hardware.
This material is based upon work supported by the Na-
tional Science Foundation under Grants No. CNS-0831532,
CNS-0964702, DGE-1144086, and by the MURI program
under AFOSR Grant No. FA9550-08-1-0352.
REFERENCES
[1] E. Barker and J. Kelsey, “Recommendation for random num-
ber generation using deterministic random bit generators,”
NIST Special Publication 800-90A, Jan. 2012, online: http://
csrc.nist.gov/publications/nistpubs/800-90A/SP800-90A.pdf.
[2] M. Bellare, Z. Brakerski, M. Naor, T. Ristenpart, G. Segev,
H. Shacham, and S. Yilek, “Hedged public-key encryption:
How to protect against bad randomness,” in Asiacrypt 2009.
Springer, Dec. 2009.
[3] J. Bouda, J. Krhovjak, V. Matyas, and P. Svenda, “Towards
true random number generation in mobile environments,” in
NordSec 2009. Springer, Oct. 2009.
[4] E. Brickell, “Recent advances and existing research questions
in platform security,” Invited talk at Crypto 2012, Aug. 2012.
[5] J.-L. Danger, S. Guilley, and P. Hoogvorst, “High speed
true random number generator based on open loop structures
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:24 UTC from IEEE Xplore.  Restrictions apply. 
in FPGAs,” Microelectronics Journal, vol. 40, no. 11, Nov.
2009.
[6] D. Davis, R. Ihaka, and P. Fenstermacher, “Cryptographic
randomness from air turbulence in disk drives,” in Crypto
1994. Springer, Aug. 1994.
[7] L. Dorrendorf, Z. Gutterman, and B. Pinkas, “Cryptanalysis
of the random number generator of the Windows operating
system,” ACM Trans. Info. & System Security, vol. 13, no. 1,
Oct. 2009.
[8] D. Eastlake 3rd, S. Crocker, and J. Schiller, “Randomness
Recommendations for Security,” RFC 1750 (Informational),
Internet Engineering Task Force, Dec. 1994, obsoleted
by RFC 4086. [Online]. Available: http://www.ietf.org/rfc/
rfc1750.txt
[9] V. Fischer and M. Drutarovský, “True random number gener-
ator embedded in reconﬁgurable hardware,” in CHES 2002.
Springer, 2003.
[10] I. Goldberg and D. Wagner, “Randomness and the Netscape
browser,” Dr. Dobb’s Journal, Jan. 1996.
[11] P. Gutmann, “Software generation of practically strong ran-
dom numbers,” in USENIX Security 1998. USENIX, Jan.
1998.
[12] Z. Gutterman, B. Pinkas, and T. Reinman, “Analysis of
the Linux random number generator,” in IEEE Security and
Privacy (“Oakland”) 2006.
IEEE Computer Society, May
2006.
[13] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson,
W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum,
and E. W. Felten, “Lest we remember: Cold boot attacks on
encryption keys,” in USENIX Security 2008. USENIX, Jul.
2008.
[14] M. Hamburg, P. Kocher, and M. E. Marson, “Analysis
of Intel’s Ivy Bridge digital random number generator,”
Online: http://www.cryptography.com/public/pdf/Intel_TRN
G_Report_20120312.pdf, Mar. 2012.
[15] R. Heald and P. Wang, “Variability in sub-100 nm SRAM
IEEE Computer Society, Nov.
designs,” in ICCAD 2004.
2004.
[16] N. Heninger, Z. Durumeric, E. Wustrow, and J. A. Halderman,
“Mining your Ps and Qs: Detection of widespread weak keys
in network devices,” in USENIX Security 2012. USENIX,
Aug. 2012.
[17] P. Heydari, “Analysis of the PLL jitter due to power/ground
and substrate noise,” IEEE Trans. Circuits and Systems I,
vol. 51, no. 12, Dec. 2004.
[18] D. E. Holcomb, W. P. Burleson, and K. Fu, “Power-up SRAM
state as an identifying ﬁngerprint and source of true random
numbers,” IEEE Trans. Computers, vol. 58, no. 9, Sep. 2009.
[19] A. Hubert and R. van Mook, “Measures for Making
DNS More Resilient against Forged Answers,” RFC 5452
(Proposed Standard), Internet Engineering Task Force, Jan.
2009. [Online]. Available: http://www.ietf.org/rfc/rfc5452.txt
[20] M. Jakobsson, E. Shriver, B. K. Hillyer, and A. Juels, “A
practical secure physical random bit generator,” in CCS 1998.
ACM, Nov. 1998.
[21] DDR3 SDRAM Standard JESD79-3F, JEDEC Committee JC-
42.3, Jul. 2012, online: www.jedec.org/sites/default/ﬁles/do
cs/JESD79-3F.pdf.
[22] D. Kaminsky, “Black ops 2008: It’s the end of the cache
as we know it,” Black Hat 2008, Aug. 2008, presentation.
Slides:
https://www.blackhat.com/presentations/bh-jp-08/
bh-jp-08-Kaminsky/BlackHat-Japan-08-Kaminsky-DNS
08-BlackOps.pdf.
[23] J. Kelsey, B. Schneier, D. Wagner, and C. Hall, “Cryptanalytic
attacks on pseudorandom number generators,” in FSE 1998.
Springer, Mar. 1998.
[24] J. Kelsey, B. Schneier, and N. Ferguson, “Yarrow-160: Notes
on the design and analysis of the Yarrow cryptographic
pseudorandom number generator,” in SAC 1999.
Springer,
2000.
[25] P. Kohlbrenner and K. Gaj, “An embedded true random
number generator for FPGAs,” in FPGA 2004. ACM, Feb.
2004.
[26] P. Lacharme, A. Röck, V. Strubel, and M. Videau, “The Linux
pseudorandom number generator revisited,” Cryptology ePrint
Archive, Report 2012/251, 2012, http://eprint.iacr.org/.
[27] N. McGuire, P. O. Okech, and Q. Zhou, “Analysis of inherent
randomness of the Linux kernel,” in RTLW 2009. OSADL,
Sep. 2009, online: http://lwn.net/images/conf/rtlws11/random
-hardware.pdf.
[28] T. Mytkowicz, A. Diwan, and E. Bradley, “Computer systems
are dynamical systems,” Chaos, vol. 19, no. 3, Sep. 2009.
[29] N. Nisan and A. Ta-Shma, “Extracting randomness: A survey
and new constructions,” J. Computer and System Sciences,
vol. 58, no. 1, Feb. 1999.
[30] C. Pyo, S. Pae, and G. Lee, “DRAM as source of random-
ness,” Electronics Letters, vol. 45, no. 1, 2009.
[31] T. Ristenpart and S. Yilek, “When good randomness goes bad:
Virtual machine reset vulnerabilities and hedging deployed
Internet Society, Feb. 2003.
cryptography,” in NDSS 2003.
[32] A. Rukhin, J. Soto, J. Nechvatal, M. Smid, E. Barker,
S. Leigh, M. Levenson, M. Vangel, D. Banks, A. Heckert,
J. Dray, and S. Vo, “A statistical
test suite for random
and pseudorandom number generators for cryptographic ap-
plications,” NIST Special Publication 800-22, Revision 1a,
Apr. 2010, online: http://csrc.nist.gov/groups/ST/toolkit/rng/
documents/SP800-22rev1a.pdf.
[33] A. Seznec and N. Sendrier, “HAVEGE: A user-level software
heuristic for generating empirically strong random numbers,”
ACM Trans. Modeling & Computer Simulation, vol. 13, no. 4,
Oct. 2003.
[34] B. Sunar, W. J. Martin, and D. R. Stinson, “A provably secure
true random number generator with built-in tolerance to active
attacks,” IEEE Trans. Computers, vol. 56, no. 1, Jan. 2007.
[35] M. Technology, MT41J256M4 DDR3 SDRAM Datasheet, Rev.
I, Feb. 2010, online: http://download.micron.com/pdf/datash
eets/dram/ddr3/1Gb_DDR3_SDRAM.pdf.
[36] AM/DM37x Multimedia Device Silicon Revision 1.x Version
R Technical Reference Manual, Texas Instruments, Sep. 2012,
online: http://www.ti.com/lit/ug/sprugn4r/sprugn4r.pdf.
[37] The Debian Project, “openssl – predictable random number
generator,” DSA-1571-1, May 2008, http://www.debian.org/
security/2008/dsa-1571.
[38] J. Voris, N. Saxena, and T. Halevi, “Accelerometers and
randomness: Perfect together,” in WiSec 2011. ACM, Jun.
2011.
[39] Zynq-7000 All Programmable SoC Technical Reference
online:
Manual,
http://www.xilinx.com/support/documentation/user_guides/
ug585-Zynq-7000-TRM.pdf.
Version
1.3, Xilinx, Oct.
2012,
[40] S. Yilek, “Resettable public-key encryption: How to encrypt
on a virtual machine,” in CT-RSA 2010. Springer, Mar. 2010.
[41] S. Yilek, E. Rescorla, H. Shacham, B. Enright, and S. Savage,
“When private keys are public: Results from the 2008 Debian
OpenSSL vulnerability,” in IMC 2009. ACM, Nov. 2009.
603
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:24 UTC from IEEE Xplore.  Restrictions apply.