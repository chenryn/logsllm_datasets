        } else {
            if (i + j >= MAXPATHLEN-1) {
                free_alloca(tmp, use_heap);
                return -1; /* buffer overflow */
            }
            //开始构造路径，先把path[0...j]往后挪，放到path[i]的位置上
            //j+1是个数，从下标0到下标j当然是j+1个
            memmove(path+i, path, j+1);
            //把tmp[0...i-1]拷贝回path[0...i-2]
            //i-1是个数，下标0到下标i-2是i-1个
            memcpy(path, tmp, i-1);
            path[i-1] = DEFAULT_SLASH;
            //加个/上去，这时候的path：
            //"/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/24273"
            j = tsrm_realpath_r(path, start, i + j, ll, t, use_realpath, is_dir, &directory);
            //进行(n+1)的递归调用
            if (j  start) {
                path[j++] = DEFAULT_SLASH;
            }
        }
        #ifdef ZEND_WIN32
            ...
        #else
        if (j = MAXPATHLEN-1) {
            free_alloca(tmp, use_heap);
            return -1;
        }
        //前面拿到j=1，tmp[i...len-i]复制到path[1...1+len-i]
        //就是把tmp的最后几个字符复制到path的前面去
        memcpy(path+j, tmp+i, len-i+1);
        j += (len-i);
        //重新计算总长度，返回回去，新的path是"/proc"，j=5。
    }
(n+2)和(n+1)一样，也在1164行进行下一次递归调用，(n+2)传递给(n+3)的参数：
    /proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc
在(n+3)时，经过`tsrm_realpath_r`前面的处理，path的最后一个`/proc`没了，这时候剩下的`/proc/self.../root`就又是一个符号链接。
老样子，既然是符号链接，save又是1，那么就调用php_sys_readlink读取符号链接，读的结果是什么？是`/`。
    if (++(*ll) > LINK_MAX || (j = php_sys_readlink(tmp, path, MAXPATHLEN))  start) {
                path[j++] = DEFAULT_SLASH;
            }
        }
        if (j = MAXPATHLEN-1) {
            free_alloca(tmp, use_heap);
            return -1;
        }
        //前面拿到j=1，tmp[1...len-i]复制到path[1...1+len-i]
        //len是原来传进来的字符串的总长度，i和len是tsrm_real_path_r对'.. . //'特殊处理之前决定的
        //比如path是'/var/www/html/'，那这里的i就在html之后的/上面
        /*
            761 i = len;
            762 while (i > start && !IS_SLASH(path[i-1])) {
            763    i--;
            764 }
        */
        //
        memcpy(path+j, tmp+i, len-i+1);
        j += (len-i);
        //重新计算总长度，返回回去，新的path是"/proc/"，j=5，最后返回给(n+1)。
    }
(n+1)返回给(n)：
    } else {
        if (save) {
            ...
        }
        if (i - 1  start) {
                path[j++] = DEFAULT_SLASH;
                //末尾加个'/', j+=1, 现在j=6
            }
        }
        if (j = MAXPATHLEN-1) {
            free_alloca(tmp, use_heap);
            return -1;
        }
        //前面拿到j=6，tmp[i...len-i]复制到path[6...6+len-i]
        /*
        tmp="/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/74079"
        */
        memcpy(path+j, tmp+i, len-i+1);
        j += (len-i);
        //重新计算总长度，返回回去，新的path是"/proc/24273"，j=11，最后返回给(n)。
    }
最后从(n)返回到(0)就是逐个复制并拼合路径了，最后得到的就是`/proc/24273/root/proc/self/root/var/www/html/flag.php`
## 总结
调试源代码时，最好是采用自顶向下的方法。
想知道一个值从哪来到哪去，如果是以指针传递，可以获取其地址，观察函数调用堆栈里的参数的地址值。
调试的时候多利用IDE的计算表达式的功能，也可以利用条件断点的功能来辅助调试，甚至也可以直接往控制台输出信息。
若遇到递归调用的函数，先分析这个函数做了什么，找出其边界情况，在最后一次递归时，根据堆栈观察每次递归时的参数传递和数据的变化。
作者：ROIS – littlefisher