RSSR = {SM AFDM L ∪ DM L}
As explained, RSSR gets securely transmitted from OBS to
VS in order to be used during the veriﬁcation mechanism.
The described process for reporting and the transmission
is part of a Remote Attestation Protocol and uses similar
building blocks for its construction.
4.5 Veriﬁcation of Reported Measurement
Data
The DRIVE veriﬁcation concept is based on the idea of
unaltered reference measurements. As previously described,
the measurement process calculates a hash over predictable
measured memory areas. This means, in case the veriﬁca-
tion process can (1) calculate an expected hash digest (ehd)
based on a reliable source and (2) successfully compare ehd
against the measured hash digest mhd, DRIVE can deter-
mine whether mhd was illicitly altered or not. In the following
section, a brief description of the individual veriﬁcation steps
is provided.
DML Integrity Veriﬁcation. The ﬁrst step in every veriﬁ-
cation process of DRIVE is the integrity veriﬁcation of the
given DML only using the information from RSSR. Since
every intermediate measured hash digest was extended to
the SM, in which we ultimately establish trust in, we can use
this value to verify DML’s integrity.
Therefore, DRIVE calculates the expected ESM AF based
on the reported DML comprised Measurement Sets M S0...n
and veriﬁes whether the calculated value is equal to the re-
ported SM AF .
ESM AFn = digest(digest(M Sn−1)|M Sn)
If, and only if, the expected value is equal to the reported, i.e.
ESM AFn == SM AFn, the DML is considered as reliable
and was not tampered. This implies that the DML represents
the currently measured runtime system state at the time
the report was generated. After the integrity of the DML
is assured, the veriﬁcation process continues to verify every
individual measurement.
4.6 DML Content Veriﬁcation
The veriﬁcation of the DML encompasses all individual
measurements M S0...n depending on the content of the mea-
sured object code. In this section, veriﬁcation schemes for
predictable segments or sections are explained. The veriﬁ-
cation is based on the principle of RV calculation derived
from ELF ﬁles using the (1) extraction of designated meta-
5”|” denotes concatenation
733Table 2: Program header Excerpt from /bin/bash
Oﬀset
Type
LOAD 0x00000000
LOAD 0x000efdf0
Size (Dec) Flags
978908 Bytes
36536 Bytes
R-E
RW-
data, segments and sections from ELF ﬁles, (2) composition
and modiﬁcation of extracted content to represent measured
memory dependents, and (3) calculation and comparison of
RVs against reported information to make a decision about
the reliability of the OBS.
ELF Object Code Extraction. All information necessary
to extract the targeted section is present in the ELF-Header.
In Table 2, an excerpt from the Program Header of the ELF
executable /bin/bash on a X86 64 system is shown. The
type ”LOAD” instructs the loader to load the object code
into memory. The relevant information DRIVE uses are (1)
the ”Oﬀset”, determining the position of the ﬁrst to-be-loaded
object code byte and (2) ”FileSize” determining the number
of to-be-loaded bytes relative to the given position.
In order to calculate the reference value for the relevant
segment, the object code is extracted as described and saved
to a temporary object code ﬁle tocf . tocf is then used as a
basis for the following reference value calculation.
Reference Value Generation for PIC and link-time
RCC. The reference value generation for PIC (RVP IC ) and
link-time RCC consists of calculating the hash digest of tocf :
RVP IC = digest(tocf ). While RV for any PIC and link-time
RCC does not depend on dynamic information, it stays con-
stant for every process instantiation. Thus, calculated RV
are persistently stored on the VS, for instance in a database
and can be extracted and calculated independently from the
veriﬁcation process.
Reference Value Generation for Global Offset Tables.
The veriﬁcation of .got relies on diﬀerent information about
the measured process. Speciﬁcally, all processes’ shared li-
brary code sections’ memory addresses must be known dur-
ing veriﬁcation. The other necessary information is contained
in the ELF-ﬁles involved in the process execution and gets
extracted during veriﬁcation.
The veriﬁcation itself depends on the re-calculation of the
GOT based on the library memory start addresses (msalib),
the resolved symbol’s oﬀset (of f setsymbol) and the GOT’s
location address GOTaddress
6.
The required memory loading addresses msalibn are part
of the SSR’s DML, as depicted in Figure 4, and available dur-
ing veriﬁcation. The GOT’s location address GOTaddress and
the symbol name can be derived directly from the ELF-ﬁle’s
relocation section’s header (.rela.plt). Most importantly,
the symbol ﬁle oﬀset (sf o) can be derived from the symbol
tables, i.e. .symtab, of referenced library ELFs by their sym-
bol name. Once the required information is extracted, the
expected .got entry address can be calculated by:
GOTasa = msalib + sf o
The process is repeated for every single relocation entry in
the order given by GOTaddress. Once all got addresses are cal-
culated and sorted, CHF can be applied in order to calculate
the .got reference value RVGOT as follows:
RVGOT = digest(GOTasa0||GOTasa...||GOTasan )
6which is used to determine the order of the .got table.
Finally, it can be compared against the measured hash digest
of the .got (mhdGOT ).
Reference Value Generation for RCC. To calculate refer-
ence values for RCC, a correlation between the loaded ELF-
File and the reported information M S must be established.
The process itself is quite similar to the described .got ver-
iﬁcation. The ﬁrst step during the ad-hoc reference value
calculation is the extraction of the related memory start ad-
dress msa from M S. After msa is extracted and tocf loaded
by the veriﬁcation program, the loading process of the object
code is simulated using the following steps: (1) Load relo-
cation rel from ELF relocation sections, i.e. .rela.text or
.rela.dyn, (2) extraction of the symbol ﬁle oﬀset sf o from
rel, (3) location of the referenced symbol oﬀset rso in ELFs
symbol tables, i.e. .symtab, (4) calculation of the absolute
symbol address asa = msa + rso, and (5) patching tocf at
position sf o with asa.
Once every relocation is applied in tocf , the hash digest
can be calculated: RVRCC = digest(tocf ). RVRCC is only
valid for the given RCC with the concrete msa. Regarding
LKM, where this process is usually applied, this means that
unloading and reloading the LKM would render the RVRCC
outdated, because the start address would most likely change.
In this case, RVRCC must again be recalculated on basis of
the new msa.
Reference Value Generation for Meta-data. Meta-data
information such as expected ﬁle-sizes and access permis-
sions are also extracted from the ELF. As shown in Table 2,
”size” and ”ﬂag” information is also available in the program
header. Therefore, this information is extracted and persis-
tently stored as meta-data.
Veriﬁcation of individual DML entries. Usually, the ver-
iﬁcation of individual DML entries is the core veriﬁcation
process that either uses persistent reference values RVP IC or
triggers ad-hoc reference value calculation to derive RVRCC .
The veriﬁcation process iterates over the whole DML and
compares the measured object code to the RVs for every
individual entry. If, and only if, the complete DML can be
veriﬁed successfully, the OBS is considered as reliable (or
authentic).
5.
IMPLEMENTATION AND EVALUA-
TION
DRIVE’s current measurement implementation measures
the OBS’ runtime-state for both kernel- and user-space. In or-
der to demonstrate the applicability of our conceptual work,
this section describes all utilized components and gives de-
tails about their implementation. Furthermore, measurement
and veriﬁcation components are evaluated during a simulated
attack on a well known user-space application. Finally, per-
formance critical operations are identiﬁed and challenges,
discovered during the evaluation, presented.
5.1 Runtime Integrity Measurement Compo-
nent
DRIVE’s
runtime integrity measurement component
(RIMC) is implemented as a LKM and measures kernel and
user-space without any access restrictions. Please note, we
chose a LKM to demonstrate the feasibility of the concept
and to provide measurement results for user and kernel-
space on multiple architectures. As mentioned in Section
7343.2 and 2.2, a production grade implementation must con-
sider additional security measures to run at higher privilege
levels or isolated, by utilizing virtualization-, sandbox- or
hardware-based MA implementations, if available. During
the measurement process, RIMC utilizes the kernel internal
data-structures for process management and MM. RIMC cur-
rently supports (1) the measurement of the OS kernel and
all loaded LKMs, in kernel-space and (2) the measurement of
all active processes, including executable and shared object
code. RIMC is not architecture speciﬁc and was evaluated
on the X86 64, PPC32 and ARM64 platform.
The user-space process measurement in RIMC iterates over
all running processes utilizing the internal kernel structures
mm_struct and vm_area_struct to identify active processes
and determine their mapped segment memory addresses. As
mentioned, the identiﬁcation of the .got section is more com-
plex. Here, RIMC ﬁrst locates the .dynamic section from the
program headers and, afterwards, identiﬁes the location and
size of the .got section based on the information found at the
.dynamic section. After that, RIMC measures the individ-
ual process memory areas as described in Section 4. Finally,
RIMC appends the measurements to the DM L and anchors
the ﬁngerprint to a TPM by calling the TPM_extend() func-
tionality. The kernel-space DML is generated similar to the
algorithm for a single process. Still, the data-structures for
LKM are organized in a list utilizing the module struct and
the Kernel solely relies on mm_struct7.
----------------------------------------------------------
Userspace DML for /bin/bash process:
name
/bin/bash
/bin/bash.got
libc-2.13.so
libc-2.13.so.got 7fbd33309000
----------------------------------------------------------
Figure 4: Excerpt of DML for a /bin/bash user-space
process on the X86 64 platform
address (msa) size perm hash digest
956k r-x 1c5b27f74..
000000400000
0000006f0000
1722 rw- bc09bbbb8..
7fbd32f4b000 1772k r-x 79e937e84..
114 rw- 48d78c75a..
Figure 4 depicts an excerpt for the accumulated user-space
DML for the /bin/bash process. Once the measurements are
successfully appended to the designated DML and reported
to the TPM, they can be veriﬁed by a VS.
Runtime Integrity Veriﬁcation Component. As previ-
ously described in Section 4.5, the veriﬁcation basically con-
sists of two parts. The ﬁrst veriﬁes the integrity of the re-
ceived DML and the other veriﬁes the individual accumu-
lated measurements inside the DML. The DML integrity
veriﬁcation mechanisms is implemented similar to the well
researched Stored Measurement Log (SML) integrity veriﬁ-
cation schemes (cf. [29, 26]), therefore we will not further
discuss this mechanism. Instead, this work focuses on the
second part, i.e., integrity veriﬁcation of individual DML
measurements.
During the evaluation, we developed a tool gathering RV
and meta-data from ELF-ﬁles in ﬁrmware images or by given
paths. The tool implements ELF object code extraction
mechanisms and RV generation as previously described. Fur-
thermore, the tool collects additional meta-data from ELF
such as expected access permissions and sizes; moreover, the
tools determines whether an ELF-ﬁle is PIC or link-/load-
time-relocated RCC. After the information is successfully
gathered, the tool stores all veriﬁcation data persistently
7All
Source/include/linux/mm types.h
struct deﬁnitions
can
be
found in
Linux
Figure 5: Veriﬁcation excerpt of the GOT layout and
symbol resolution for /bin/bash 4.3 application.
in a SQLite 8 database. In addition to that, the tool also
maintains copies of load-time-relocated RCC ELF-ﬁles on
the ﬁle-system for RV calculation. Once the tool ﬁnishes the
data collection, the RVs are ready to be used during the
veriﬁcation process to either ﬁnd valid RVs for PIC and link-
time-relocated RCC or provide ELF-ﬁles for the ad-hoc RV
and .got calculation process.
Furthermore, we analyzed three diﬀerent distributions9 for
six diﬀerent architectures10 in order to determine the distri-
bution of PIC and relocated RCC code. As it turned out,
all shared libraries exclusively utilize PIC. Additionally, we
conﬁrmed most executable ELF-ﬁles still use link-time RCC
relocation; yet, we identiﬁed Position Independent Executa-
bles (PIE) in all analyzed systems [cf. Table AT3]. Regarding
kernel-space, load-time-relocated RCC still plays a major role
for LKM. All LKMs analyzed used load-time RCC and are
thus relocated during initial loading.The Kernel images are,
as expected, all statically linked.
PIC and link-time-relocated RCC Veriﬁcation. The ver-
iﬁcation process of PIC and link-time-relocated RCC follows
the concept described in Section 4.5. The technical realiza-
tion extracts mhd from S and searches for a mhd RV. As a
result, the measured object code is considered trustworthy if
and only if a RV is found that is equal to mhd; consequently
it was not illicitly modiﬁed by an adversary. This simple ap-
proach covers everything necessary to verify the object code
integrity of PIC and link-time-relocated RCC object code.
As expected, the integrity veriﬁcation can also be combined
with additional meta-data veriﬁcation, described below.
Global Offset Table Veriﬁcation. The veriﬁcation of the
.got is an important operation and always applied for PIC
and link-time-relocated RCC by DRIVE. As depicted in Fig-
ure 5, the symbol name and the GOT’s location address
GOTaddress can be extracted from the ELF-ﬁle of the GOT
target.
For instance, the endgrent function used by /bin/bash
is implemented in libc-2.19.so and its designated GOT
address GOTaddress is 0x006f0018. By analyzing the libc-
2.19.so ELF-ﬁle, the endgrent symbol resolves to the oﬀset
0x0be7e0, relative to the loading address 0x7fbd32f4b000
8https://www.sqlite.org/
9Ubuntu, Debian and Fedora
10X86, X86 64, ARM32, ARM64, PPC32 and PPC64
735[c.f. Figure 4, 5]. Thus, the resolved address for the endgrent
function is 0x7fbd330097e0.
Based on this, Table 3 shows the calculated GOT which is
in line with the measured GOT. It has to be noted that before
the CHF can be applied on the calculated GOT, the target ar-
chitecture’s endianess must be considered; this means, if the
target architecture uses little-endian, the resolved addresses
must be converted into that format.
Load-time-relocated RCC Veriﬁcation. We implemented
the RCC load-time relocation only for LKMs, because they
are the only components that utilize this functionality nowa-
days. During veriﬁcation, at ﬁrst, the LKM ELF-ﬁle is loaded
from the persistent ELF storage. Once loaded, the described
mechanisms are applied: extract the .text segment from
the ELF-ﬁle and save it in a temporary ﬁle; obtain the relo-
cation, analyze it, and calculate the symbol target address
based on DML information; ﬁnally, patch the calculated sym-
bol address into the temporary ﬁle. Afterwards, calculate the
expected hash digest ehd, and compare it to mhd. The mea-
sured object code is considered trustworthy if and only if
both values are equal.
It has to be noted that LKM utilize additional indirection
through trampoline-jump tables in certain cases 11. Those
mechanisms are very architecture speciﬁc and hence out
of scope for this work. Nevertheless, we successfully imple-
mented DRIVE’s concept as described in Section 4.5, corre-
sponding to the architecture speciﬁc behavior.
Meta-data Veriﬁcation. Meta-data veriﬁcation is applied
for every measurement and considered as very important for
non-reproducible dynamic segments and sections where con-
tent based measurements cannot be applied, i.e., in particular
data.data, data.bss, stack, and heap, but also conclusive
for all other memory mapped segments. As soon as an ad-
versary is able to modify memory access permissions, every
memory mapping can potentially be used for successful ex-
ploitation. For instance, executing shell-code requires access
permissions (rwx) for stack, heap or anonymous mappings,
which is generally forbidden and thus detected by DRIVE’s
meta-data veriﬁcation.