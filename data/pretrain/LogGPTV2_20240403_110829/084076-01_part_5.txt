ports:
- port: 80
name: web
clusterIP: None
selector:
app: nginx
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
name: web
spec:
serviceName: "nginx"
replicas: 2
template:
metadata:
labels:
app: nginx
spec:
containers:
- name: nginx
image: nginx
ports:
- containerPort: 80
name: web
volumeMounts:
- name: www
mountPath: /usr/share/nginx/html
volumeClaimTemplates:
- metadata:
name: www
spec:
accessModes: [ "ReadWriteOnce" ]
storageClassName: "nginx-storage-class"
resources:
requests:
storage: 1Gi
其中，
 kind: Service 定义了一个名字为 Nginx 的 Headless Service，创建的 Service 格式为
nginx-0.nginx.default.svc.cluster.local，其他的类似，因为没有指定 Namespace（命名空
间），所以默认部署在default。
 kind: StatefulSet定义了一个名字为web的StatefulSet，replicas表示部署Pod的副本数，本
实例为2。
 volumeClaimTemplates表示将提供稳定的存储PV（持久化卷）作持久化，PV可以是手动
创建或者自动创建。在上述示例中，每个Pod将配置一个PV，当Pod重新调度到某个节
80 | 再也不踩坑的Kubernetes实战指南
点上时，Pod 会重新挂载 volumeMounts 指定的目录（当前 StatefulSet 挂载到
/usr/share/nginx/html），当删除Pod或者StatefulSet时，不会删除PV。
在 StatefulSet 中 必 须 设 置 Pod 选 择 器 （ .spec.selector ） 用 来 匹 配 其 标 签
（.spec.template.metadata.labels）。在 1.8 版本之前，如果未配置该字段（.spec.selector），将被设
置为默认值，在1.8版本之后，如果未指定匹配Pod Selector，则会导致StatefulSet创建错误。
当 StatefulSet 控制器创建 Pod 时，它会添加一个标签 statefulset.kubernetes.io/pod-name，该标
签的值为Pod的名称，用于匹配Service。
5. 创建StatefulSet
创建StatefulSet之前，需要提前创建StatefulSet持久化所用的PersistentVolumes（持久化卷，
以下简称PV，也可以使用emptyDir不对数据进行保留），当然也可以使用动态方式自动创建PV，
关于PV将在2.2.12节进行详解，本节只作为演示使用，也可以先阅读2.2.12节进行了解。
本例使用NFS提供静态PV，假如已有一台NFS服务器，IP地址为192.168.2.2，配置的共享
目录如下：
[root@nfs web]# cat /etc/exports | tail -1
/nfs/web/ *(rw,sync,no_subtree_check,no_root_squash)
[root@nfs web]# exportfs -r
[root@nfs web]# systemctl reload nfs-server
[root@nfs web]# ls -l /nfs/web/
total 0
drwxr-xr-x 2 root root 6 Jan 31 17:22 nginx0
drwxr-xr-x 2 root root 6 Jan 31 17:22 nginx1
drwxr-xr-x 2 root root 6 Jan 31 17:22 nginx2
drwxr-xr-x 2 root root 6 Jan 31 17:22 nginx3
drwxr-xr-x 2 root root 6 Jan 31 17:22 nginx4
drwxr-xr-x 2 root root 6 Jan 31 17:22 nginx5
Nginx0-5作为StatefulSet Pod的PV的数据存储目录，使用PersistentVolume创建PV，文件如
下：
apiVersion: v1
kind: PersistentVolume
metadata:
name: pv-nginx-5
spec:
capacity:
storage: 1Gi
accessModes:
- ReadWriteOnce
volumeMode: Filesystem
persistentVolumeReclaimPolicy: Recycle
storageClassName: "nginx-storage-class"
nfs:
# real share directory
path: /nfs/web/nginx5
# nfs real ip
server: 192.168.2.2
具体参数的配置及其含义，可参考2.2.12节。
第2章 Docker及Kubernetes基础 | 81
创建PV：
[root@K8S-master01 2.2.7]# kubectl create -f web-pv.yaml
persistentvolume/pv-nginx-0 created
persistentvolume/pv-nginx-1 created
persistentvolume/pv-nginx-2 created
persistentvolume/pv-nginx-3 created
persistentvolume/pv-nginx-4 created
persistentvolume/pv-nginx-5 created
查看PV：
[root@K8S-master01 2.2.7]# kubectl get pv
NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM
STORAGECLASS REASON AGE
pv-nginx-0 1Gi RWO Recycle Available
nginx-storage-class 26s
pv-nginx-1 1Gi RWO Recycle Available
nginx-storage-class 26s
pv-nginx-2 1Gi RWO Recycle Available
nginx-storage-class 26s
pv-nginx-3 1Gi RWO Recycle Available
nginx-storage-class 26s
pv-nginx-4 1Gi RWO Recycle Available
nginx-storage-class 26s
pv-nginx-5 1Gi RWO Recycle Available
nginx-storage-class 26s
创建StatefulSet：
[root@K8S-master01 2.2.7]# kubectl create -f sts-web.yaml
service/nginx created
statefulset.apps/web created
[root@K8S-master01 2.2.7]# kubectl get sts
NAME DESIRED CURRENT AGE
web 2 2 12s
[root@K8S-master01 2.2.7]# kubectl get svc
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
kubernetes ClusterIP 10.96.0.1  443/TCP 7d2h
nginx ClusterIP None  80/TCP 16s
[root@K8S-master01 2.2.7]# kubectl get po -l app=nginx
NAME READY STATUS RESTARTS AGE
web-0 1/1 Running 0 2m5s
web-1 1/1 Running 0 115s
查看PVC和PV，可以看到StatefulSet创建的两个Pod的PVC已经和PV绑定成功：
[root@K8S-master01 2.2.7]# kubectl get pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS
AGE
www-web-0 Bound pv-nginx-5 1Gi RWO nginx-storage-class
2m31s
www-web-1 Bound pv-nginx-0 1Gi RWO nginx-storage-class
2m21s
[root@K8S-master01 2.2.7]# kubectl get pv
NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM
82 | 再也不踩坑的Kubernetes实战指南
STORAGECLASS REASON AGE
pv-nginx-0 1Gi RWO Recycle Bound
default/www-web-1 nginx-storage-class 4m8s
pv-nginx-1 1Gi RWO Recycle Available
nginx-storage-class 4m8s
pv-nginx-2 1Gi RWO Recycle Available
nginx-storage-class 4m8s
pv-nginx-3 1Gi RWO Recycle Available
nginx-storage-class 4m8s
pv-nginx-4 1Gi RWO Recycle Available
nginx-storage-class 4m8s
pv-nginx-5 1Gi RWO Recycle Bound
default/www-web-0 nginx-storage-class 4m8s
6. 部署和扩展保障
Pod的部署和扩展规则如下：
 对于具有N个副本的StatefulSet，将按顺序从0到N-1开始创建Pod。
 当删除Pod时，将按照N-1到0的反顺序终止。
 在缩放Pod之前，必须保证当前的Pod是Running（运行中）或者Ready（就绪）。
 在终止Pod之前，它所有的继任者必须是完全关闭状态。
StatefulSet的pod.Spec.TerminationGracePeriodSeconds不应该指定为0，设置为0对StatefulSet
的Pod是极其不安全的做法，优雅地删除StatefulSet的Pod是非常有必要的，而且是安全的，因为
它可以确保在Kubelet从APIServer删除之前，让Pod正常关闭。
当创建上面的Nginx实例时，Pod将按web-0、web-1、web-2的顺序部署3个Pod。在web-0
处于Running或者Ready之前，web-1不会被部署，相同的，web-2在web-1未处于Running和Ready
之前也不会被部署。如果在web-1处于Running和Ready状态时，web-0变成Failed（失败）状态，
那么web-2将不会被启动，直到web-0恢复为Running和Ready状态。
如果用户将StatefulSet的replicas设置为1，那么web-2将首先被终止，在完全关闭并删除web-2
之前，不会删除web-1。如果web-2终止并且完全关闭后，web-0突然失败，那么在web-0未恢复
成Running或者Ready时，web-1不会被删除。
7. StatefulSet扩容和缩容
和Deployment类似，可以通过更新replicas字段扩容/缩容StatefulSet，也可以使用kubectlscale
或者kubectlpatch来扩容/缩容一个StatefulSet。
（1）扩容
将上述创建的 sts 副本增加到 5 个（扩容之前必须保证有创建完成的静态 PV，动态 PV 和
emptyDir）：
[root@K8S-master01 2.2.7]# kubectl scale sts web --replicas=5
statefulset.apps/web scaled
查看Pod及PVC的状态：
[root@K8S-master01 2.2.7]# kubectl get pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS
第2章 Docker及Kubernetes基础 | 83
AGE
www-web-0 Bound pv-nginx-0 1Gi RWO nginx-storage-class
2m54s
www-web-1 Bound pv-nginx-2 1Gi RWO nginx-storage-class
2m44s
www-web-2 Bound pv-nginx-5 1Gi RWO nginx-storage-class
112s
www-web-3 Bound pv-nginx-1 1Gi RWO nginx-storage-class
75s
www-web-4 Bound pv-nginx-3 1Gi RWO nginx-storage-class
49s
[root@K8S-master01 2.2.7]# kubectl get po
NAME READY STATUS RESTARTS AGE
web-0 1/1 Running 0 2m58s
web-1 1/1 Running 0 2m48s
web-2 1/1 Running 0 116s
web-3 1/1 Running 0 79s
web-4 1/1 Running 0 53s
也可使用以下命令动态查看：
kubectl get pods -w -l app=nginx
（2）缩容
在一个终端动态查看：
[root@K8S-master01 2.2.7]# kubectl get pods -w -l app=nginx
NAME READY STATUS RESTARTS AGE
web-0 1/1 Running 0 4m37s
web-1 1/1 Running 0 4m27s
web-2 1/1 Running 0 3m35s
web-3 1/1 Running 0 2m58s
web-4 1/1 Running 0 2m32s
在另一个终端将副本数改为3：
[root@K8S-master01 ~]# kubectl patch sts web -p '{"spec":{"replicas":3}}'
statefulset.apps/web patched
此时可以看到第一个终端显示web-4和web-3的Pod正在被删除（或终止）：
[root@K8S-master01 2.2.7]# kubectl get pods -w -l app=nginx
NAME READY STATUS RESTARTS AGE
web-0 1/1 Running 0 4m37s
web-1 1/1 Running 0 4m27s
web-2 1/1 Running 0 3m35s
web-3 1/1 Running 0 2m58s
web-4 1/1 Running 0 2m32s
web-0 1/1 Running 0 5m8s
web-0 1/1 Running 0 5m11s
web-4 1/1 Terminating 0 3m36s
web-4 0/1 Terminating 0 3m38s
web-4 0/1 Terminating 0 3m47s
web-4 0/1 Terminating 0 3m47s
web-3 1/1 Terminating 0 4m13s
web-3 0/1 Terminating 0 4m14s
84 | 再也不踩坑的Kubernetes实战指南
web-3 0/1 Terminating 0 4m22s
web-3 0/1 Terminating 0 4m22s
查看状态，此时PV和PVC不会被删除：
[root@K8S-master01 2.2.7]# kubectl get po
NAME READY STATUS RESTARTS AGE
web-0 1/1 Running 0 7m11s
web-1 1/1 Running 0 7m1s
web-2 1/1 Running 0 6m9s
[root@K8S-master01 2.2.7]# kubectl get pvc
NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS
AGE
www-web-0 Bound pv-nginx-0 1Gi RWO nginx-storage-class
7m15s
www-web-1 Bound pv-nginx-2 1Gi RWO nginx-storage-class
7m5s
www-web-2 Bound pv-nginx-5 1Gi RWO nginx-storage-class
6m13s
www-web-3 Bound pv-nginx-1 1Gi RWO nginx-storage-class
5m36s
www-web-4 Bound pv-nginx-3 1Gi RWO nginx-storage-class
5m10s
[root@K8S-master01 2.2.7]# kubectl get pv
NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM
STORAGECLASS REASON AGE
pv-nginx-0 1Gi RWO Recycle Bound
default/www-web-0 nginx-storage-class 78m
pv-nginx-1 1Gi RWO Recycle Bound
default/www-web-3 nginx-storage-class 78m
pv-nginx-2 1Gi RWO Recycle Bound
default/www-web-1 nginx-storage-class 78m
pv-nginx-3 1Gi RWO Recycle Bound
default/www-web-4 nginx-storage-class 78m
pv-nginx-4 1Gi RWO Recycle Available
nginx-storage-class 78m
pv-nginx-5 1Gi RWO Recycle Bound
default/www-web-2 nginx-storage-class 78m
8. 更新策略
在Kubernetes 1.7以上的版本中，StatefulSet的.spec.updateStrategy字段允许配置和禁用容器的
自动滚动更新、标签、资源限制以及StatefulSet中Pod的注释等。
（1）On Delete策略
OnDelete更新策略实现了传统（1.7版本之前）的行为，它也是默认的更新策略。当我们选择
这个更新策略并修改StatefulSet的.spec.template字段时，StatefulSet控制器不会自动更新Pod，我
们必须手动删除Pod才能使控制器创建新的Pod。
（2）RollingUpdate策略
RollingUpdate（滚动更新）更新策略会更新一个StatefulSet中所有的Pod，采用与序号索引相
反的顺序进行滚动更新。
比如Patch一个名称为web的StatefulSet来执行RollingUpdate更新：
第2章 Docker及Kubernetes基础 | 85
[root@K8S-master01 2.2.7]# kubectl patch statefulset web -p
'{"spec":{"updateStrategy":{"type":"RollingUpdate"}}}'
statefulset.apps/web patched
查看更改后的StatefulSet：
[root@K8S-master01 2.2.7]# kubectl get sts web -o yaml | grep -A 1
"updateStrategy"
updateStrategy:
type: RollingUpdate
然后改变容器的镜像进行滚动更新：
[root@K8S-master01 2.2.7]# kubectl patch statefulset web --type='json'
-p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image",
"value":"dotbalo/canary:v1"}]'
statefulset.apps/web patched
如上所述，StatefulSet里的Pod采用和序号相反的顺序更新。在更新下一个Pod前，StatefulSet
控制器会终止每一个Pod并等待它们变成Running和Ready状态。在当前顺序变成Running和Ready
状态之前，StatefulSet控制器不会更新下一个Pod，但它仍然会重建任何在更新过程中发生故障的
Pod，使用它们当前的版本。已经接收到请求的Pod将会被恢复为更新的版本，没有收到请求的Pod
则会被恢复为之前的版本。
在更新过程中可以使用 kubectl rollout status sts/ 来查看滚动更新的状态：
[root@K8S-master01 2.2.7]# kubectl rollout status sts/web
Waiting for 1 pods to be ready...