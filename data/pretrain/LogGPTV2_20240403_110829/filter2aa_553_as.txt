printf("Now enter a width and a precision:\n");
scanf("%d %d", &width, &precision);
printf("Weight = %*.*f\n", width, precision, weight);
printf("Done!\n");
return 0;
}
变量width提供字段宽度，number是待打印的数字。因为转换说明中*在
d的前面，所以在printf()的参数列表中，width在number的前面。同样，width
和precision提供打印weight的格式化信息。下面是一个运行示例：
Enter a field width:
6
The number is : 256:
Now enter a width and a precision:
8 3
Weight = 242.500
Done!
225
这里，用户首先输入6，因此6是程序使用的字段宽度。类似地，接下来
用户输入8和3，说明字段宽度是8，小数点后面显示3位数字。一般而言，程
序应根据weight的值来决定这些变量的值。
scanf()中*的用法与此不同。把*放在%和转换字符之间时，会使得
scanf()跳过相应的输出项。程序清单4.17就是一个例子。
程序清单4.17 skip2.c程序
/* skiptwo.c -- 跳过输入中的前两个整数 */
#include 
int main(void)
{
int n;
printf("Please enter three integers:\n");
scanf("%*d %*d %d", &n);
printf("The last integer was %d\n", n);
return 0;
}
程序清单4.17中的scanf()指示：跳过两个整数，把第3个整数拷贝给n。
下面是一个运行示例：
Please enter three integers:
2013 2014 2015
226
The last integer was 2015
在程序需要读取文件中特定列的内容时，这项跳过功能很有用。
4.4.7 printf()的用法提示
想把数据打印成列，指定固定字段宽度很有用。因为默认的字段宽度是
待打印数字的宽度，如果同一列中打印的数字位数不同，那么下面的语句：
printf("%d %d %d\n", val1, val2, val3);
打印出来的数字可能参差不齐。例如，假设执行3次printf()语句，用户
输入不同的变量，其输出可能是这样：
12 234 1222
4 5 23
22334 2322 10001
使用足够大的固定字段宽度可以让输出整齐美观。例如，若使用下面的
语句：
printf("%9d %9d %9d\n", val1, val2, val3);
上面的输出将变成：
12   234   1222
4    5    23
22334   2322   10001
在两个转换说明中间插入一个空白字符，可以确保即使一个数字溢出了
自己的字段，下一个数字也不会紧跟该数字一起输出（这样两个数字看起来
像是一个数字）。这是因为格式字符串中的普通字符（包括空格）会被打印
227
出来。
另一方面，如果要在文字中嵌入一个数字，通常指定一个小于或等于该
数字宽度的字段会比较方便。这样，输出数字的宽度正合适，没有不必要的
空白。例如，下面的语句：
printf("Count Beppo ran %.2f miles in 3 hours.\n", distance);
其输出如下：
Count Beppo ran 10.22 miles in 3 hours.
如果把转换说明改为%10.2f，则输出如下：
Count Beppo ran   10.22 miles in 3 hours.
本地化设置
美国和世界上的许多地区都使用一个点来分隔十进制值的整数部分和小
数部分，如3.14159。然而，许多其他地区用逗号来分隔，如 3,14159。读者
可能注意到了，printf()和 scanf()都没有提供逗号的转换说明。C语言考虑了
这种情况。本书附录B的参考资料V中介绍了C支持的本地化概念，因此C程
序可以选择特定的本地化设置。例如，如果指定了荷兰语言环境，printf()和
scanf()在显示和读取浮点值时会使用本地惯例（在这种情况下，用逗号代替
点分隔浮点值的整数部分和小数部分）。另外，一旦指定了环境，便可在代
码的数字中使用逗号：
double pi = 3,14159; // 荷兰本地化设置
C标准有两个本地化设置："C"和""（空字符串）。默认情况下，程序使
用"C"本地化设置，基本上符合美国的用法习惯。而""本地化设置可以替换
当前系统中使用的本地语言环境。原则上，这与"C"本地化设置相同。事实
上，大部分操作系统（如UNIX、Linux和Windows）都提供本地化设置选项
列表，只不过它们提供的列表可能不同。
228
4.5 关键概念
C语言用char类型表示单个字符，用字符串表示字符序列。字符常量是
一种字符串形式，即用双引号把字符括起来："Good luck, my friend"。可以
把字符串储存在字符数组（由内存中相邻的字节组成）中。字符串，无论是
表示成字符常量还是储存在字符数组中，都以一个叫做空字符的隐藏字符结
尾。
在程序中，最好用#define 定义数值常量，用 const 关键字声明的变量为
只读变量。在程序中使用符号常量（明示常量），提高了程序的可读性和可
维护性。
C 语言的标准输入函数（scanf()）和标准输出函数（printf()）都使用一
种系统。在该系统中，第1个参数中的转换说明必须与后续参数中的值相匹
配。例如，int转换说明%d与一个浮点值匹配会产生奇怪的结果。必须格外
小心，确保转换说明的数量和类型与函数的其余参数相匹配。对于scanf()，
一定要记得在变量名前加上地址运算符（&）。
空白字符（制表符、空格和换行符）在 scanf()处理输入时起着至关重要
的作用。除了%c 模式（读取下一个字符），scanf()在读取输入时会跳过非
空白字符前的所有空白字符，然后一直读取字符，直至遇到空白字符或与正
在读取字符不匹配的字符。考虑一下，如果scanf()根据不同的转换说明读取
相同的输入行，会发生什么情况。假设有如下输入行：
-13.45e12# 0
如果其对应的转换说明是%d，scanf()会读取3个字符（-13）并停在小数
点处，小数点将被留在输入中作为下一次输入的首字符。如果其对应的转换
说明是%f，scanf()会读取-13.45e12，并停在#符号处，而#将被留在输入中作
为下一次输入的首字符；然后，scanf()把读取的字符序列-13.45e12转换成相
应的浮点值，并储存在float类型的目标变量中。如果其对应的转换说明
是%s，scanf()会读取-13.45e12#，并停在空格处，空格将被留在输入中作为
229
下一次输入的首字符；然后，scanf()把这 10个字符的字符码储存在目标字符
数组中，并在末尾加上一个空字符。如果其对应的转换说明是%c，scanf()
只会读取并储存第1个字符，该例中是一个空格 [4]。
230
4.6 本章小结
字符串是一系列被视为一个处理单元的字符。在C语言中，字符串是以
空字符（ASCII码是0）结尾的一系列字符。可以把字符串储存在字符数组
中。数组是一系列同类型的项或元素。下面声明了一个名为name、有30个
char类型元素的数组：
char name[30];
要确保有足够多的元素来储存整个字符串（包括空字符）。
字符串常量是用双引号括起来的字符序列，如："This is an example of a
string"。
scanf()函数（声明在string.h头文件中）可用于获得字符串的长度（末尾
的空字符不计算在内）。scanf()函数中的转换说明是%s时，可读取一个单
词。
C预处理器为预处理器指令（以#符号开始）查找源代码程序，并在开
始编译程序之前处理它们。处理器根据#include指令把另一个文件中的内容
添加到该指令所在的位置。#define指令可以创建明示常量（符号常量），即
代表常量的符号。limits.h和float.h头文件用#define定义了一组表示整型和浮
点型不同属性的符号常量。另外，还可以使用const限定符创建定义后就不
能修改的变量。
printf()和scanf()函数对输入和输出提供多种支持。两个函数都使用格式
字符串，其中包含的转换说明表明待读取或待打印数据项的数量和类型。另
外，可以使用转换说明控制输出的外观：字段宽度、小数位和字段内的布
局。
231
4.7 复习题
复习题的参考答案在附录A中。
1.再次运行程序清单 4.1，但是在要求输入名时，请输入名和姓（根据
英文书写习惯，名和姓中间有一个空格），看看会发生什么情况？为什么？
2.假设下列示例都是完整程序中的一部分，它们打印的结果分别是什
么？
a.printf("He sold the painting for $%2.2f.\n", 2.345e2);
b.printf("%c%c%c\n", 'H', 105, '\41');
c.#define Q "His Hamlet was funny without being vulgar."printf("%s\nhas %d
characters.\n", Q, strlen(Q));
d.printf("Is %2.2e the same as %2.2f?\n", 1201.0, 1201.0);
3.在第2题的c中，要输出包含双引号的字符串Q，应如何修改？
4.找出下面程序中的错误。
define B booboo
define X 10
main(int)
{
int age;
char name;
printf("Please enter your first name.");
232
scanf("%s", name);
printf("All right, %c, what's your age?\n", name);
scanf("%f", age);
xp = age + X;
printf("That's a %s! You must be at least %d.\n", B, xp);
rerun 0;
}
5.假设一个程序的开头是这样：
#define BOOK "War and Peace"
int main(void)
{
float cost =12.99;
float percent = 80.0;
请构造一个使用BOOK、cost和percent的printf()语句，打印以下内容：
This copy of "War and Peace" sells for $12.99.
That is 80% of list.
6.打印下列各项内容要分别使用什么转换说明？
a.一个字段宽度与位数相同的十进制整数
b.一个形如8A、字段宽度为4的十六进制整数
233
c.一个形如232.346、字段宽度为10的浮点数
d.一个形如2.33e+002、字段宽度为12的浮点数
e.一个字段宽度为30、左对齐的字符串
7.打印下面各项内容要分别使用什么转换说明？
a.字段宽度为15的unsigned long类型的整数
b.一个形如0x8a、字段宽度为4的十六进制整数
c.一个形如2.33E+02、字段宽度为12、左对齐的浮点数
d.一个形如+232.346、字段宽度为10的浮点数
e.一个字段宽度为8的字符串的前8个字符
8.打印下面各项内容要分别使用什么转换说明？
a.一个字段宽度为6、最少有4位数字的十进制整数
b.一个在参数列表中给定字段宽度的八进制整数
c.一个字段宽度为2的字符
d.一个形如+3.13、字段宽度等于数字中字符数的浮点数
e.一个字段宽度为7、左对齐字符串中的前5个字符
9.分别写出读取下列各输入行的scanf()语句，并声明语句中用到变量和
数组。
a.101
b.22.32 8.34E−09
234
c.linguini
d.catch 22
e.catch 22 （但是跳过catch）
10.什么是空白？
11.下面的语句有什么问题？如何修正？
printf("The double type is %z bytes..\n", sizeof(double));
12.假设要在程序中用圆括号代替花括号，以下方法是否可行？
#define ( {
#define ) }
235
4.8 编程练习
1.编写一个程序，提示用户输入名和姓，然后以“名,姓”的格式打印出
来。
2.编写一个程序，提示用户输入名和姓，并执行一下操作：
a.打印名和姓，包括双引号；
b.在宽度为20的字段右端打印名和姓，包括双引号；
c.在宽度为20的字段左端打印名和姓，包括双引号；
d.在比姓名宽度宽3的字段中打印名和姓。
3.编写一个程序，读取一个浮点数，首先以小数点记数法打印，然后以
指数记数法打印。用下面的格式进行输出（系统不同，指数记数法显示的位
数可能不同）：
a.输入21.3或2.1e+001；
b.输入+21.290或2.129E+001；
4.编写一个程序，提示用户输入身高（单位：英寸）和姓名，然后以下
面的格式显示用户刚输入的信息：
Dabney, you are 6.208 feet tall
使用float类型，并用/作为除号。如果你愿意，可以要求用户以厘米为
单位输入身高，并以米为单位显示出来。
5.编写一个程序，提示用户输入以兆位每秒（Mb/s）为单位的下载速度
和以兆字节（MB）为单位的文件大小。程序中应计算文件的下载时间。注
意，这里1字节等于8位。使用float类型，并用/作为除号。该程序要以下面
的格式打印 3 个变量的值（下载速度、文件大小和下载时间），显示小数点
236
后面两位数字：
At 18.12 megabits per second, a file of 2.20 megabytes
downloads in 0.97 seconds.
6.编写一个程序，先提示用户输入名，然后提示用户输入姓。在一行打
印用户输入的名和姓，下一行分别打印名和姓的字母数。字母数要与相应名
和姓的结尾对齐，如下所示：
Melissa Honeybee
7    8
接下来，再打印相同的信息，但是字母个数与相应名和姓的开头对齐，
如下所示：
Melissa Honeybee
7    8
7.编写一个程序，将一个double类型的变量设置为1.0/3.0，一个float类
型的变量设置为1.0/3.0。分别显示两次计算的结果各3次：一次显示小数点
后面6位数字；一次显示小数点后面12位数字；一次显示小数点后面16位数
字。程序中要包含float.h头文件，并显示FLT_DIG和DBL_DIG的值。1.0/3.0
的值与这些值一致吗？
8.编写一个程序，提示用户输入旅行的里程和消耗的汽油量。然后计算
并显示消耗每加仑汽油行驶的英里数，显示小数点后面一位数字。接下来，
使用1加仑大约3.785升，1英里大约为1.609千米，把单位是英里/加仑的值转
换为升/100公里（欧洲通用的燃料消耗表示法），并显示结果，显示小数点
后面 1 位数字。注意，美国采用的方案测量消耗单位燃料的行程（值越大越