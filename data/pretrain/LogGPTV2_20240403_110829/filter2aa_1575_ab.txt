获取pcap版本信息
 pcap.Version() 
获取网卡信息并写到yaml文件中
 r.ether = GetDeviceConfig() 
如果有yaml文件直接读了 没有在获取  device.AutoGetDevices() 
func GetDeviceConfig() *device.EtherTable { 
filename := "ksubdomain.yaml" 
var ether *device.EtherTable 
var err error 
if core.FileExists(filename) { 
ether, err = device.ReadConfig(filename) 
if err != nil { 
gologger.Fatalf("读取配置失败:%v", err) 
} 
gologger.Infof("读取配置%s成功!\n", filename) 
} else { 
ether = device.AutoGetDevices() 
err = ether.SaveConfig(filename) 
if err != nil { 
gologger.Fatalf("保存配置失败:%v", err) 
} 
} 
gologger.Infof("Use Device: %s\n", ether.Device) 
gologger.Infof("Use IP:%s\n", ether.SrcIp.String()) 
gologger.Infof("Local Mac: %s\n", ether.SrcMac.String()) 
gologger.Infof("GateWay Mac: %s\n", ether.DstMac.String()) 
return ether 
} 
网卡获取代码在  core\device\device.go  
实现方式如下:
1. 随机生成一个域名  domain := core.RandomStr(4) + ".i.hacking8.com" 
2. 然后通过pcap获取所有网卡 及网卡对应的信息
r.iterDomains(options.Level, msg) 
} 
} 
r.domains = nil 
r.fisrtloadChanel  0 { 
        var tmpDomains []string 
        gologger.Infof("检测泛解析\n") 
        for _, domain := range options.Domain { 
            if !core.IsWildCard(domain) { 
                tmpDomains = append(tmpDomains, domain) 
            } else { 
                gologger.Warningf("域名:%s 存在泛解析记录,已跳过\n", domain) 
            } 
        } 
        options.Domain = tmpDomains 
    } 
} 
for { 
line, _, err := reader.ReadLine() 
if err != nil { 
break 
} 
msg := string(line) 
if r.options.Method == "verify" { 
// send msg 
r.domains = append(r.domains, msg) 
} else { 
for _, tmpDomain := range r.options.Domain { 
newDomain := msg + "." + tmpDomain 
r.domains = append(r.domains, newDomain) 
} 
} 
} 
return len(r.domains) 
core.IsWildCard(domain) 泛解析检测
判断泛解析的方式是 随机6个字符串加上域名 生成2次 如果两次都是不能解析则认为没有泛解析 两次只
要有一次解析了就认为存在泛解析
func IsWildCard(domain string) bool { 
for i := 0; i < 2; i++ { 
subdomain := RandomStr(6) + "." + domain 
_, err := net.LookupIP(subdomain) 
if err != nil { 
continue 
} 
return true 
} 
return false 
} 
RunEnumeration
涉及到的函数多 下面以多个标题来分析 
判断字典是否读取完成 完成的才会有对状态表还是有需要测试的数据判断 防止一开始是空的就结束了
func (r *runner) RunEnumeration() { 
ctx, cancel := context.WithCancel(r.ctx) 
defer cancel() 
go r.recvChanel(ctx) // 启动接收线程 
for i := 0; i < 3; i++ { 
go r.sendCycle(ctx) // 发送线程 
} 
go r.handleResult(ctx) // 处理结果，打印输出
var isLoadOver bool = false // 是否加载文件完毕 
t := time.NewTicker(1 * time.Second) 
defer t.Stop() 
for { 
select { 
case <-t.C: 
r.PrintStatus() 
if isLoadOver { 
if r.hm.Length() == 0 { 
gologger.Printf("\n") 
gologger.Infof("扫描完毕") 
return 
} 
} 
case <-r.fisrtloadChanel: 
go r.retry(ctx) // 遍历hm，依次重试 
isLoadOver = true 
} 
} 
} 
接收协程 runner.recvChanel
1. 获取一个未激活的pcap句柄  inactive, err := pcap.NewInactiveHandle(r.ether.Device) 
2. 设置 每个要捕获的数据包的最大字节数为 65535   err = inactive.SetSnapLen(snapshotLen) 
3. 设置超时时间为 -1s 即不超时
4. 设置模式为即时模式 数据包被传送到应用程序就会更新timeout  inactive.SetImmediateMode(true) 
5. 激活pcap句柄  handle, err := inactive.Activate() 
6. 设置过滤条件  udp and src port 53 and dst port  udp的包 源端口是53 目的端口是发出去的空闲
端口
7. 创建一个解析器 并读取数据  data, _, err = handle.ReadPacketData() 
8. 解析数据包  err = parser.DecodeLayers(data, &decoded) 
9. 只要dns的包 并且dnsid为  0x2021 的包
10. 对于符合条件的包计数 使用原子操作增加 接收次数  recvIndex 
atomic.AddUint64(&r.recvIndex, 1) 
if len(dns.Questions) == 0 { 
    continue 
} 
11. 获取解析出来的域名 并在状态表中删除 成功计数+1 成功结果+1 推到 runner.rever 里
func (r *runner) recvChanel(ctx context.Context) error { 
var ( 
snapshotLen = 65536 
timeout     = -1 * time.Second 
err         error 
) 
inactive, err := pcap.NewInactiveHandle(r.ether.Device) 
if err != nil { 
return err 
} 
err = inactive.SetSnapLen(snapshotLen) 
if err != nil { 
return err 
} 
defer inactive.CleanUp() 
if err = inactive.SetTimeout(timeout); err != nil { 
return err 
} 
err = inactive.SetImmediateMode(true) 
if err != nil { 
return err 
} 
handle, err := inactive.Activate() 
if err != nil { 
return err 
} 
defer handle.Close() 
err = handle.SetBPFFilter(fmt.Sprintf("udp and src port 53 and dst port %d", r.freeport)) 
if err != nil { 
return errors.New(fmt.Sprintf("SetBPFFilter Faild:%s", err.Error())) 
} 
// Listening 
var udp layers.UDP 
var dns layers.DNS 
var eth layers.Ethernet 
var ipv4 layers.IPv4 
var ipv6 layers.IPv6 
parser := gopacket.NewDecodingLayerParser( 
layers.LayerTypeEthernet, &eth, &ipv4, &ipv6, &udp, &dns) 
var data []byte 
var decoded []gopacket.LayerType 
for { 