overhead to nested guests. However, this can be accelerated
by multiple techniques [3]. KVM provides an efﬁcient nested
virtualization implementation, which we also use for NYX.
USENIX Association
30th USENIX Security Symposium    2599
2.3.2 Fuzzing Stateful Applications
Many applications are to some extend stateful. That is, the
execution of one test case is not independent of all previously
executed test cases. In many instances, this statefulness is
rather obvious: a target that writes the content of the test case
to a ﬁle on the hard disc and fails if the ﬁle already exists
is obviously stateful. However, it also manifests in much
more subtle effects. For example, many standard hash table
implementations use the time to derive a key used to calculate
hashes. We observed that this would occasionally cause some
amount of non-determinism in the code coverage, depending
on whether the given keys collide or not.
In the context of hypervisors, a signiﬁcant amount of state
is stored in the emulated devices such as timers in the inter-
rupt controller. These are often very relevant for the behavior
of the emulated devices. Thus, for reproducible test cases,
it is paramount to control the full state of the hypervisor at
the beginning of the execution. This is a very hard task. Pre-
vious approaches typically tackled this problem in one of
two ways: most blind fuzzers such as HYPER-CUBE tried
to ignore this aspect by booting into a controlled state and
then only execute a single, very long, test case, and reduce
overall environment noise. However, this does not work for
coverage-guided fuzzing and also causes problems when a
crash is found after a long time of fuzzing. Lastly, sometimes
the fuzzer might get stuck by inevitably disabling some device,
rendering all future interactions pointless. The only previous
coverage-guided fuzzer (VDF) tested only a small fraction of
the hypervisor (such as a single device emulator) in a ring-3
QEMU process. This allowed them to restart the whole pro-
cess to reset the device state. The obvious downside is that
this approach does not work for large amounts of the attack
surface of a typical hypervisor.
In this paper, we propose to use another approach: we im-
plement our own fork-like mechanism for a whole VM. This
has multiple advantages. First, it works independently of the
target. We can use this to overcome statefulness in user-space
applications, kernel components, and of course hypervisors
running nested inside of our hypervisor. Additionally, as we
reset the whole VM, we can also reset the emulated devices,
including tricky components such as timer interrupts. This
also applies for all nested VMs.
2.3.3 Fuzzing Interactive Interfaces
Most current fuzzers provide the target application with one
unstructured array of bytes. While this approach is very well
suited to target binary ﬁle format parsers and similar programs,
it is far less useful for interactive applications that follow
a well-known pattern of inputs over time (even though the
format of each input might be unknown). A surprisingly large
number of relevant applications actually behave like this.
Most importantly for us, hypervisors support a multitude
of different interfaces that can be interacted with—each with
obj = malloc_obj();
//use only after it was created
use(&obj)
//obj must not be used after free
free(obj);
Listing 1: Example demonstrating lifetime constraints for interactive targets.
a different format. Similarly, most kernels provide a large
number of different interactions points via interfaces such as
syscalls and ioctls. Lastly, even ordinary ring-3 applications,
such as network services, applications with a user interface, or
libraries that provide an API, require complex input formats.
Consider a simple API where a resource is ﬁrst created,
then any number of operations are performed, and lastly the
resource is freed and must not be used afterwards. A similar
pattern emerges with most interactive interfaces. One hypo-
thetical test case that the fuzzer could generate is shown in
Listing 1. If the fuzzer generates inputs that free non-existing
objects, or accesses from objects that were not created yet,
most of the generated inputs are trivially invalid, and the time
spent to generate and run them is wasted. Even worse, while
this is unlikely in the context of hypervisor fuzzing, they might
lead to false positive crashes. For example, when fuzzing a li-
brary that provides these functions, handing an invalid pointer
to the library causes a crash that is not indicating a bug in the
library. To properly explore this kind of interfaces, the fuzzer
should be aware of the temporal relations between creating,
using, and destroying resources during input generation.
Grammar-based fuzzers (e.g., [1, 40, 43]) use context-free
grammars to approximately describe inputs with such rela-
tions. However, while context-free grammars can encode the
overall structure of individual interactions, they cannot readily
express the temporal properties (e.g., it would not be possi-
ble to express the create/use/delete/do-not-reuse constraints
explained above). On a high level, this is due to the fact that,
by the deﬁnition of context-free grammars, they fundamen-
tally only produce tree-shaped data structures. However, the
data ﬂow, resulting from chaining multiple interactions, fun-
damentally creates directed acyclic graphs (DAGs). This is
well-known in the world of JavaScript fuzzers. Hence, many
modern JavaScript fuzzers use more complex formats, which
ensure that only previously initialized variables with correct
types can be used [25, 63]. Additionally, current implementa-
tions of grammar-based fuzzers are typically not very effective
at expressing binary data.
Another interesting example is SYZKALLER [55]. It was
designed speciﬁcally to fuzz kernel interfaces via syscalls.
These format speciﬁcation typically can express initialization
/ use patterns. However, they are typically designed for one
speciﬁc use case, and cannot express the temporal properties
such as that closed resources are not to be reused later.
2600    30th USENIX Security Symposium
USENIX Association
Figure 1: Overview of NYX’s architecture. The architecture consists of three main components: (i) NYX’s novel fuzzing engine, (ii) a highly modiﬁed version of
KVM-PT which enables nested hypercall communication and hypervisor fuzzing, and (iii) a modiﬁed version of QEMU-PT to support fast snapshot reloads.
2.4 Afﬁne Types
In many cases, the inability to express that a closed resource
is not reused later on is not a big problem. In other cases,
this can cause false positive crashes. For example, ignoring
a library’s contract will lead to false positive crashes (e.g.,
by passing a previously freed pointer to the library). These
are not interesting to us, as they do not represent a security
issue in the library, but rather simply our inability to properly
use the library. One can address this issue by using afﬁne
types. Afﬁne types are a class of type systems that ensure
each value is used at most once. Consequently, they ensure
that a resource is not reused after it was closed.
In this paper, we design a new formalism based on afﬁne
types that allows to express these kinds of constraints with a
focus on versatility. The user speciﬁes a set of opcodes. Each
opcode represents a single function call, and can take any
number of arguments, and return any number of values. The
arguments can either be consumed or borrowed. Once a value
was consumed, the fuzzer ensures that it will not be used in
future opcodes. Thus, one can effectively specify sequences of
afﬁnely typed function calls. In a way, this approach is rather
similar to how the programming language Rust uses move and
borrow semantics. Using this mechanism, it becomes trivial
to express well-formed interactions such as the ones seen
in Listing 1. Note that this mechanism does not take away
our ability to express invalid sequences if we chose to do
so, it merely gives us the option to avoid them. For example,
we can still express the fuzzing algorithm of AFL by only
having a single handler with a vector of bytes. Consequently,
this approach allows us to ﬁnd all kinds of bugs that other
current fuzzer can ﬁnd. Yet, we can narrow down the search
drastically to achieve greater coverage and ﬁnd bugs faster.
3 Design
In the following, we describe the design and the reasoning
behind the design choices of NYX. We start by giving an
informal threat model for hypervisor security. Based on this
threat model, we describe our fuzzing approach.
3.1 Threat Model
As hypervisors are used to enable provisioning of new VMs
in the cloud, they are a cornerstone of the modern Internet
and computing landscape. Whenever a user requires a new
cloud instance, a VM is created on demand, and the user has
full privileges inside the VM. To ensure scalability, many
such VMs run on the same physical host and the hypervisor
is the security boundary that separates different VMs. To
compromise other users’ VM, it sufﬁces to escape one’s own
VM: once the attacker obtains hypervisor privileges, she also
typically has full control over all other machines running on
the same physical host. Consequently, we assume that the
attacker is able to run her own kernel and tries to exploit a
software vulnerability in the hypervisor.
3.2 Architecture Overview
To efﬁciently identify such security vulnerabilities by fuzzing
hypervisors, we have to tackle a number of challenges that
most current fuzzers do not address. More speciﬁcally, we
need a way to explore complex interfaces with multiple back
and forth interactions, while maintaining a deterministic and
controlled environment that allows us to observe the test cov-
erage. On a high level, our basic architecture is a virtual
machine introspection (VMI) based fuzzer similar to KAFL
and REDQUEEN, with a custom operating system similar to
HYPER-CUBE used as the agent component. We introduce
multiple novel techniques to make coverage-guided fuzzing
applicable to highly interactive targets. An overview of NYX’s
architecture is shown in Figure 1.
3.3 High Performance, Coverage-Guided
Fuzzing
Broadly speaking, there are two approaches to obtain the
coverage information necessary to perform feedback-guided
fuzzing: (i) compile-time instrumentation based approaches
and (ii) binary-only based approaches. We choose to use
binary-only coverage tracing, as we believe that requiring
USENIX Association
30th USENIX Security Symposium    2601
NYX-FuzzerKVM-PTSpec-CompilervCPU StateQEMU-PTHypercall HandlerMemoryStorageDevicesSpec(cid:38)(cid:82)(cid:89)(cid:72)(cid:85)(cid:68)(cid:74)(cid:72)(cid:3)(cid:37)(cid:76)(cid:87)(cid:80)(cid:68)(cid:83)(cid:41)(cid:88)(cid:93)(cid:93)(cid:72)(cid:85)(cid:3)(cid:18)(cid:3)(cid:55)(cid:68)(cid:85)(cid:74)(cid:72)(cid:87)(cid:3)(cid:54)(cid:92)(cid:81)(cid:70)(cid:75)(cid:85)(cid:82)(cid:81)(cid:76)(cid:93)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)Guest L1Fuzzer InterfaceSchedulerSnapshot4e 59 58 2d 46 55 5a 5a 45 52 00 00...vCPU PT TracerTracingAgent OS (L2)InterpreterTarget HypervisorNested HypercallsInput GeneratorPayloadBuﬀerHost-to-L2SHM MappingPT DecoderFast ReloadDirty Page TrackerOS Corea custom compiler toolchain severely increases the effort
to obtain a working setup for fuzzing. With our setup, for
example, the binaries as published by major distributors can
be used with no further complications. Besides avoiding to
deal with the various build systems and compilers in existence,
this also ensures that we test the real software as it is delivered,
with the original compiler ﬂags and patch sets. Since we fuzz
privileged code, the usual options such as dynamic binary
instrumentation (DBI) are excluded. Consequently, we use
Intel-PT based tracing to obtain code coverage information
with only a small performance overhead.
Stable and Deterministic Fuzzing To gracefully recover
from crashes in privileged code, we run the target software
inside a KVM VM. As our fuzzer is outside the VM, we
can restore the VM to a prior state after triggering a crash.
Even beyond handling crashes, we found that fuzzing real
hypervisors is very difﬁcult: Both the target OS and the target
hypervisor maintain a signiﬁcant amount of state that will
produce exceedingly noisy coverage traces results. To over-
come this issue, we extended QEMU-PT and KVM-PT with
the ability to perform very fast VM reload operations that
fully restore the state of the emulated hardware—including
all device state such as timing interrupts and clocks.
By using a hardware acceleration features called Page
Modiﬁcation Logging (PML), KVM can efﬁciently identify
only those page frames in memory that need to be reset. We
maintain a full copy of the original state and an additional
dirty page tracker that allows us to quickly reset only the
dirty pages. In a similar manner, we circumvent the usual
device loading code used by QEMU-PT to speed up resetting
the device state. This way, we overcome most of the non-
determinism issues, even when tracing a whole hypervisor.
Lastly, we used a modiﬁed version of HYPER-CUBE OS [48]
to serve as the agent running inside of the target hypervisor.
This agent communicates with our fuzzer via the host hy-
pervisor (KVM-PT) by using hypercalls to bypass the target
hypervisor.
Communication with Nested Virtualization To be able
to directly communicate with the fuzzer from our agent OS,
we need to provide hypercalls from the agent running in L2
directly to KVM-PT. Due to the way nested virtualization is
implemented, hypercalls are passed to the host (KVM-PT)
ﬁrst, and later forwarded to the target hypervisor running in
L1. Consequently, we implemented special hypercalls and
corresponding handlers that avoid being forwarded to the
target hypervisor. Additionally, the fuzzing logic and the agent
need to set up a section of shared memory to efﬁciently pass
the inputs from the logic to the agent.
3.4 Generic Fuzzing of Interactive Targets
Our fuzzing agent consumes a form of bytecode that describes
the actions it should take to interact with the target hypervi-
sor. In contrast to HYPER-CUBE OS, where the bytecode
is generated randomly in a blind fashion, in our case the
fuzzer generates and mutates the bytecode. To this end, the
user provides speciﬁcations that describe the bytecode for-
mat. This approach is somewhat similar to grammar-based
fuzzers [1, 40, 43]. However, we found that for specifying the
interfaces for interactive targets, context-free grammars are
not a very useful abstraction. Typed, bytecode-like speciﬁca-
tions are much more useful, as they allow to properly refer to
existing and initialized variables. Similar designs were already
pioneered by JavaScript fuzzers such as FUZZILI [25] and
SYZKALLER. However, instead of a highly-specialized format,
we choose to develop a more general description mechanism
akin to context-free grammars. In contrast to context-free
grammars, our speciﬁcation format allows to express types
and temporal usage patterns. As a consequence, NYX can be
directly applied to other targets such as kernels and ring-3 ap-
plications as well. This approach has also proven very helpful
in practice by allowing an efﬁcient test-evaluate-adapt cycle
when developing speciﬁcations for new interfaces.
Afﬁne Typed Speciﬁcation Engine To allow generic
fuzzing of interactive systems, we provide the user with a
simple mechanism to describe a “grammar” of possible inter-
actions. As our goal behind this fuzzing engine was to be as
generic as possible, we aimed to build a mechanism as gen-
eral as context-free grammars, incorporating the constraints
discussed in Section 2.3.3. Speciﬁcally, we aim to express
general interactions with temporal create/use/delete/do-not-
reuse constraints. We achieve this by building a formalism
that can be used to describe strongly typed bytecodes. We then
use a custom compiler that generates C code from those byte-
code speciﬁcations. Special care is taken to make sure this C
code is easily embeddable into any target (no use of malloc
etc.). Each input is represented by a directed acyclic graph
(DAG). Each node is a single function call and each edge is
a typed value returned by the source function and passed to
the target function. Functions can take arguments either as a
value or as a reference. If an argument is used as value, it can
not be used later on by any other nodes. Thus, the value is
effectively deleted. If the value is passed as a reference, it can
later be re-used by other calls. Any node or function can take
an arbitrary number of inputs both as reference and value, and
return any number of values. In addition to those inputs and
outputs, each function can have an additional data argument
that can contain arbitrary tree-shaped data structures. We now
present a small example for the previously discussed use case
of opening, writing and closing ﬁles to illustrate our approach.
2602    30th USENIX Security Symposium
USENIX Association
Figure 2: The graph encoding of the input shown in Listing 1. Borrowing
arguments are shown as circles containing the type. Arguments that consume
the value are shown as square. The tree shaped structural data attached to
each node, is shown in red.
Example 1. In this case we consider 3 opcodes: open,
write, and close. The ﬁrst opcode open(data:
Vec) -> File has no moved or ref arguments. It
only consumes a path (data string) and produces a ﬁle ob-