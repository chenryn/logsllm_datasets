PING web1tenant1.weave.local (172.16.16.129): 48 data bytes
--- web1tenant1.weave.local ping statistics ---
1 packets transmitted, 0 packets received, 100% packet loss
user@docker4:~$
```
您会注意到，当`web2tenant2`容器试图访问其自己的租户(子网)内的服务时，它会按预期工作。尝试访问`tenant1`中的服务没有收到响应。但是，由于域名系统在 Weave 网络中共享，容器仍然可以解析`tenant1`中容器的 IP 地址。
这个也说明了一个加密的例子，以及我们如何指定某些主机是可信的。无论容器位于哪个子网，Weave 仍然会在所有主机之间建立连接。由于我们在 Weave 初始化期间启用了加密，所有这些连接现在都应该加密了。但是，我们还指定了一个受信任的网络。可信网络定义的节点之间不需要加密。在我们的例子中，我们指定`192.168.50.0/24`为可信。由于有两个节点有这些 IP 地址，`docker3`和`docker4`，我们应该看到它们之间的连接是未加密的。我们可以在主机上使用 Weave 状态连接命令来验证这一点。我们应该得到以下回应:
*   `docker1`(截断输出):
    ```
     10.10.10.101:6783     established encrypted   sleeve 
    ```
*   `docker3`(截断输出):
    ```
    -> 10.10.10.101:6783     established encrypted   sleeve 
    -> 192.168.50.102:6783   established unencrypted fastdp 
    -> 10.10.10.102:6783     established encrypted   sleeve 
    ```
*   `docker4`(截断输出):
    ```
    -> 10.10.10.102:6783     established encrypted   sleeve 
     10.10.10.101:6783     established encrypted   sleeve 
    ```
您可以看到除了主机`docker3` ( `192.168.50.101`)和主机`docker4` ( `192.168.50.102`)之间的连接外，所有连接都显示为加密状态。由于两台主机都需要就什么是可信网络达成一致，主机`docker1`和`docker2`永远不会同意它们的连接不加密。
# 使用 Weave 网络插件
使 Weave 与众不同的一点是，它可以以几种不同的方式运行。正如我们在本章前面的菜谱中看到的，Weave 有自己的 CLI，我们可以使用它将容器直接调配到 Weave 网络上。虽然这肯定是一个运行良好的紧密集成，但它需要您利用 Weave 命令行界面或 Weave 应用编程接口代理来与 Docker 集成。除了这些选项，Weave 还编写了一个本机 Docker 网络插件。这个插件允许你直接从 Docker 使用 Weave。也就是说，一旦注册了插件，就不再需要使用 Weave 命令行界面将容器提供给 Weave。在这个食谱中，我们将回顾如何安装和使用 Weave 网络插件。
## 做好准备
假设您正在构建我们在本章第一个食谱中创建的实验室。还假设主机安装了 Docker 和 Weave。Docker 应该处于默认配置，应该安装 Weave，所有四个主机成功地对等在一起，就像我们在本章的第一个食谱中所做的那样。
## 怎么做…
像 Weave 的其他组件一样，利用 Docker 插件再容易不过了。你只需要告诉 Weave 启动它。例如，如果我决定在主机`docker1`上使用 Docker 插件，我可以这样启动该插件:
```
user@docker1:~$ weave launch-plugin
3ef9ee01cc26173f2208b667fddc216e655795fd0438ef4af63dfa11d27e2546
user@docker1:~$ 
```
很像其他服务，插件以容器的形式出现。运行完前面的命令后，您应该会看到插件作为名为`weaveplugin`的容器运行:
![How to do it…](img/B05453_07_07.jpg)
运行后，您还应该看到它注册为网络插件:
```
user@docker1:~$ docker info
…… 
Plugins:
 Volume: local
 Network: host weavemesh overlay bridge null 
…… 
user@docker1:~$ 
```
我们也可以使用`docker network`子命令将其视为已定义的网络类型:
```
user@docker1:~$ docker network ls
NETWORK ID        NAME              DRIVER            SCOPE
79105142fbf0      bridge            bridge            local
bb090c21339c      host              host              local
9ae306e2af0a      none              null              local
20864e3185f5      weave             weavemesh         local
user@docker1:~$ 
```
此时，将容器连接到 Weave 网络可以直接通过 Docker 完成。你只需要在启动容器时指定`weave`的网络名称即可。例如，我们可以运行:
```
user@docker1:~$ docker run -dP --name=web1 --net=weave \
jonlangemak/web_server_1
4d84cb472379757ae4dac5bf6659ec66c9ae6df200811d56f65ffc957b10f748
user@docker1:~$
```
如果我们看一下容器接口，我们应该会看到我们习惯于用 Weave 连接的容器看到的两个接口:
```
user@docker1:~$ docker exec web1 ip addr
……
83: ethwe0@if84:  mtu 1410 qdisc noqueue state UP
    link/ether 9e:b2:99:c4:ac:c4 brd ff:ff:ff:ff:ff:ff
    inet 10.32.0.1/12 scope global ethwe0
       valid_lft forever preferred_lft forever
    inet6 fe80::9cb2:99ff:fec4:acc4/64 scope link
       valid_lft forever preferred_lft forever
86: eth1@if87:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.18.0.2/16 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe12:2/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
然而，您可能会注意到`eth1`的 IP 地址不在`docker0`桥上，而是在`docker_gwbridge`上，我们在前面几章展示 Docker 覆盖驱动程序时看到使用了这个地址。使用网关网桥而不是`docker0`网桥的好处是默认情况下网关网桥禁用了 ICC。如果启用了 ICC 模式，这可以防止本应隔离的 Weave 连接容器意外地跨`docker0`桥进行串扰。
插件方法的一个缺点是 Weave 不在中间告诉 Docker 与 DNS 相关的配置，这意味着容器没有注册它们的名称。即使它们是，它们也没有收到解析 WeaveDNS 所需的正确的名称解析设置。有两种方法可以指定容器的正确设置。无论是哪种情况，我们都需要在容器运行时手动指定参数。第一种方法包括自己手动指定所有需要的参数。手动完成，如下所示:
```
user@docker1:~$ docker run -dP --name=web1 \
--hostname=web1.weave.local --net=weave --dns=172.17.0.1 \
--dns-search=weave.local jonlangemak/web_server_1
6a907ee64c129d36e112d0199eb2184663f5cf90522ff151aa10c2a1e6320e16
user@docker1:~$
```
为了注册域名系统，您需要前面代码中显示的四个粗体设置:
*   `--hostname=web1.weave.local`:如果不在`weave.local`内将容器的主机名设置为一个名称，DNS 服务器不会注册该名称。
*   `--net=weave`:任何一个都必须在 Weave 网络上才能工作。
*   `--dns=172.17.0.1`:我们需要告诉它使用 Weave DNS 服务器监听`docker0`桥 IP 地址。然而，你可能已经注意到这个容器在`docker0`桥上实际上没有一个 IP 地址。相反，由于我们连接到`docker-gwbridge`，我们在`172.18.0.0/16`网络中有一个 IP 地址。在任一情况下，由于两个桥都有 IP 接口，容器可以通过`docker_gwbridge`到达`docker0`桥上的 IP 接口。
*   `--dns-search=weave.local`:这允许容器在不指定**完全限定域名** ( **FQDN** )的情况下解析名称。
一旦容器使用这些设置启动，您应该会看到在 WeaveDNS 中注册的记录:
```
user@docker1:~$ weave status dns
web1         10.32.0.1       7b02c0262786 12:d2:fe:7a:c1:f2
user@docker1:~$
```
第二种解决方案仍然是手动的，但涉及从 Weave 本身提取域名系统信息。您可以直接从 Weave 注入域名，而不是指定域名系统服务器和搜索域。Weave 有一个名为`dns-args`的命令，会为你返回相关信息。因此，我们无需指定它，只需将该命令作为容器参数的一部分，如下所示:
```
user@docker2:~$ docker run --hostname=web2.weave.local \
--net=weave $(weave dns-args) --name=web2 -dP \
jonlangemak/web_server_2
597ffde17581b7203204594dca84c9461c83cb7a9076ed3d1ed3fcb598c2b77d
user@docker2:~$
```
当然，这并不妨碍指定容器的网络或 FQDN 的需要，但是它确实减少了一些输入。此时，您应该会看到在 WeaveDNS 中定义的所有记录，并且能够通过名称访问整个 Weave 网络中的服务:
```
user@docker1:~$ weave status dns
web1         10.32.0.1       7b02c0262786 12:d2:fe:7a:c1:f2
web2         10.32.0.2       b154e3671feb 12:d2:fe:7a:c1:f2
user@docker1:~$
user@docker2:~$ docker exec -it web2 ping web1 -c 2
PING web1 (10.32.0.1): 48 data bytes
56 bytes from 10.32.0.1: icmp_seq=0 ttl=64 time=0.139 ms
56 bytes from 10.32.0.1: icmp_seq=1 ttl=64 time=0.130 ms
--- web1 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.130/0.135/0.139/0.000 ms
user@docker1:~$
```
您可能会注意到，这些容器的 DNS 配置与您预期的不完全一样。例如，`resolv.conf`文件没有显示我们在容器运行时指定的 DNS 服务器:
```
user@docker1:~$ docker exec web1 more /etc/resolv.conf
::::::::::::::
/etc/resolv.conf
::::::::::::::
search weave.local
nameserver 127.0.0.11
options ndots:0
user@docker1:~$
```
但是，如果您检查容器的配置，您将看到正确的 DNS 服务器被正确定义:
```
user@docker1:~$ docker inspect web1
……
            "Dns": [
                "172.17.0.1"
            ],
……
user@docker1:~$
```
回想一下用户定义的网络需要使用 Docker 的嵌入式 DNS 系统。我们在容器`resolv.conf`文件中看到的 IP 地址引用了 Docker 的嵌入式 DNS 服务器。反过来，当我们为容器指定一个域名系统服务器时，嵌入式域名系统服务器会将该服务器添加为嵌入式域名系统中的转发器。这意味着，尽管请求仍然首先到达嵌入式域名系统服务器，但是请求正在被转发到 Weave 域名系统进行解析。
### 注
Weave 插件还允许您使用 Weave 驱动程序创建其他用户定义的网络。然而，由于 Docker 认为这些在范围上是全局的，它们需要使用外部密钥存储。如果您对以这种方式使用 Weave 感兴趣，请参考 https://www.weave.works/docs/net/latest/plugin/的 Weave 文档。