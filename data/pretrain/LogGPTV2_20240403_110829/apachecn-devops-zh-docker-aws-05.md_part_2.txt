 ---> f955808a07fd
...
...
...
Step 25/25 : USER app
 ---> Running in 4cf3fcab97c9
Removing intermediate container 4cf3fcab97c9
---> 2b2d8d17367c
Successfully built 2b2d8d17367c
Successfully tagged 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest
> docker images
REPOSITORY                                                             TAG    IMAGE ID     SIZE 
385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend latest 2b2d8d17367c 99.4MB
```
Tagging an Image for ECR
一旦你建立并标记了你的映像，你就可以把你的映像推送到 ECR。
Note that to publish an image to ECR, you require various ECR permissions. Because you are using the admin role in your account, you automatically have all the required permissions. We will discuss ECR permissions in more detail later on in this chapter.
因为您已经登录了 ECR，所以这就像使用`docker push`命令并引用 Docker 映像的名称一样简单:
```
> docker push 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
The push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend]
1cdf73b07ed7: Pushed
0dfffc4aa16e: Pushed
baaced0ec8f8: Pushed
e3b27097ac3f: Pushed
3a29354c4bcc: Pushed
a031167f960b: Pushed
cd7100a72410: Pushed
latest: digest: sha256:322c8b378dd90b3a1a6dc8553baf03b4eb13ebafcc926d9d87c010f08e0339fa size: 1787
```
Pushing an image to ECR
如果您现在导航到 ECS 控制台中的 todobackend 存储库，您应该会看到您新发布的映像出现了默认的`latest`标签，如下图所示。请注意，当您将映像的构建大小(在我的示例中为 99 MB)与存储在 ECR 中的映像大小(在我的示例中为 34 MB)进行比较时，您可以看到 ECR 以压缩格式存储映像，这降低了存储成本。
In terms of charges for using ECR, AWS charges for both data storage and data transfer out (that is, pulling a Docker image). See [https://aws.amazon.com/ecr/pricing/](https://aws.amazon.com/ecr/pricing/) for more details.
![](img/9cb36e30-9f49-412d-833c-93abf0e56183.png)
Viewing ECR images
# 使用复合 Docker 发布 Docker 映像
在前面的章节中，您学习了如何使用 Docker Compose 来帮助简化测试和构建 Docker 映像所需的 CLI 命令数量。目前，Docker Compose 只是在本地构建 Docker 映像，但是当然，您现在希望能够发布您的 Docker 映像并利用您的 Docker Compose 工作流。
Docker Compose 包含一个名为`image`的服务配置属性，它通常用于指定您想要运行的容器的映像:
```
version: '2.4'
services:
  web:
    image: nginx
```
Example Docker Compose file
虽然这是 Docker Compose 非常常见的使用模式，但是如果您同时组合了`build`和`image`属性，就存在另一种配置和一组行为，如下所示，对于 todobackend 存储库中的`docker-compose.yml`文件:
```
version: '2.4'
volumes:
  public:
    driver: local
services:
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
  release:
 image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DJANGO_SETTINGS_MODULE: todobackend.settings_release
      MYSQL_HOST: db
      MYSQL_USER: todo
      MYSQL_PASSWORD: password
  app:
    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:${APP_VERSION}
    extends:
  ...
  ...
```
Todobackend Docker Compose file
在前面的示例中，`image`和`build`属性都是为`release`和`app`服务指定的。当这两个属性一起使用时，Docker 仍然会从引用的 Dockerfile 构建映像，但是会用为`image`属性指定的值来标记映像。
You can apply multiple tags by creating new services that simply extend your release image and define a image property that includes the additional tag.
请注意，对于`app`服务，我们引用了环境变量`APP_VERSION`，该变量旨在用当前应用版本来标记映像，该版本是在 todobackend 存储库的根目录下的 Makefile 中定义的:
```
.PHONY: test release clean version
export APP_VERSION ?= $(shell git rev-parse --short HEAD)
version:
  @ echo '{"Version": "$(APP_VERSION)"}'
```
Replace the repository URI in the preceding examples with the appropriate URI generated for your own AWS account.
要演示组合`image`和`build`属性时的标记行为，首先删除您在本章前面创建的 Docker 映像，如下所示:
```
> docker rmi 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
Untagged: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest
Untagged: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend@sha256:322c8b378dd90b3a1a6dc8553baf03b4eb13ebafcc926d9d87c010f08e0339fa
Deleted: sha256:2b2d8d17367c32993b0aa68f407e89bf4a3496a1da9aeb7c00a8e49f89bf5134
Deleted: sha256:523126379df325e1bcdccdf633aa10bc45e43bdb5ce4412aec282e98dbe076fb
Deleted: sha256:54521ab8917e466fbf9e12a5e15ac5e8715da5332f3655e8cc51f5ad3987a034
Deleted: sha256:03d95618180182e7ae08c16b4687a7d191f3f56d909b868db9e889f0653add46
Deleted: sha256:eb56d3747a17d5b7d738c879412e39ac2739403bbf992267385f86fce2f5ed0d
Deleted: sha256:9908bfa1f773905e0540d70e65d6a0991fa1f89a5729fa83e92c2a8b45f7bd29
Deleted: sha256:d9268f192cb01d0e05a1f78ad6c41bc702b11559d547c0865b4293908d99a311
Deleted: sha256:c6e4f60120cdf713253b24bba97a0c2a80d41a0126eb18f4ea5269034dbdc7e1
Deleted: sha256:0b780adf8501c8a0dbf33f49425385506885f9e8d4295f9bc63c3f895faed6d1
```
Deleting a Docker image
如果您现在运行`docker-compose build release`命令，一旦该命令完成，Docker Compose 将构建一个新的映像，该映像标记有您的 ECR 存储库 URI:
```
> docker-compose build release WARNING: The APP_VERSION variable is not set. Defaulting to a blank string.
Building release
Step 1/25 : FROM alpine AS build
 ---> 3fd9065eaf02
Step 2/25 : LABEL application=todobackend
 ---> Using cache
 ---> f955808a07fd
...
...
Step 25/25 : USER app
 ---> Using cache
 ---> f507b981227f
Successfully built f507b981227f
Successfully tagged 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest
> docker images
REPOSITORY                                                               TAG                 IMAGE ID            CREATED             SIZE
385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend   latest              f507b981227f        4 days ago          99.4MB
```
Building a tagged image using Docker Compose
正确构建和标记映像后，您现在可以执行`docker-compose push`命令，该命令可用于推送 Docker Compose 文件中定义的服务，该文件包含`build`和`image`属性:
```
> docker-compose push release
Pushing release (385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest)...
The push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend]
9ae8d6169643: Layer already exists
cdbc5d8be7d1: Pushed
08a1fb32c580: Layer already exists
2e3946df4029: Pushed
3a29354c4bcc: Layer already exists
a031167f960b: Layer already exists
cd7100a72410: Layer already exists
latest: digest: sha256:a1b029d347a2fabd3f58d177dcbbcd88066dc54ccdc15adad46c12ceac450378 size: 1787
```
Publishing images using Docker Compose
在前面的示例中，与名为`release`的服务相关联的映像被推送，假设这是您使用 Docker 映像 URI 配置的服务。
# 自动化发布工作流
在前面的章节中，您学习了如何使用 Docker、Docker Compose 和 Make 的组合来自动测试和构建 todobackend 应用的 Docker 映像。
现在，您可以增强此工作流以执行以下附加操作:
*   登录和注销 ECR
*   发布到 ECR
为了实现这一点，您将在 todobackend 存储库的 Makefile 中创建新任务。
# 自动登录和注销
下面的示例演示了添加几个名为`login`和`logout`的新任务，它们将使用 Docker 客户端执行这些操作:
```
.PHONY: test release clean version login logout
export APP_VERSION ?= $(shell git rev-parse --short HEAD)
version:
  @ echo '{"Version": "$(APP_VERSION)"}'
login:
 $$(aws ecr get-login --no-include-email)
logout:
 docker logout https://385605022855.dkr.ecr.us-east-1.amazonaws.com test:
    docker-compose build --pull release
    docker-compose build
    docker-compose run test
release:
    docker-compose up --abort-on-container-exit migrate
    docker-compose run app python3 manage.py collectstatic --no-input
    docker-compose up --abort-on-container-exit acceptance
    @ echo App running at http://$$(docker-compose port app 8000 | sed s/0.0.0.0/localhost/g)
clean:
    docker-compose down -v
    docker images -q -f dangling=true -f label=application=todobackend | xargs -I ARGS docker rmi -f ARGS
```
Logging in and logging out of ECR
注意`login`任务使用双美元符号($$)，这是 Make 使用单美元符号定义 Make 变量所必需的。当您指定双美元符号时，Make 会将单美元符号传递给 shell，在这种情况下，这将确保 bash 命令替换得以执行。
当使用`logout`任务注销时，请注意您需要指定 Docker 注册表，否则 Docker 客户端将采用默认的公共 Docker Hub 注册表。
有了这些任务，您现在可以使用`make logout`和`make login`命令轻松注销和登录 ECR:
```
> make logout docker logout https://385605022855.dkr.ecr.us-east-1.amazonaws.com
Removing login credentials for 385605022855.dkr.ecr.us-east-1.amazonaws.com
 > make login
$(aws ecr get-login --no-include-email)
WARNING! Using --password via the CLI is insecure. Use --password-stdin.
Login Succeeded
```
Running make logout and make login