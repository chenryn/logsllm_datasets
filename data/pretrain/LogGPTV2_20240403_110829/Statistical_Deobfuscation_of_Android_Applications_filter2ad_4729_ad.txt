classes as every class (transitively) extends Object.
The function handleClass(class, aboveMethods) reports
all inequality constraints for class, where the parameter
aboveMethods contains all methods that the methods de-
clared in class can potentially override.
The function reportConstraints reports the inequality
constraints for the methods contained in methods. To do
this, it ﬁrst partitions the methods based on their parameter
types. All methods in a given partition must have distinct
names, because otherwise, they would have the same signa-
ture. On the other hand, no method is constrained by the
methods in the other partitions.
Result on the Example.
Here, we show the result of applying Algorithm 1 on the
program in Figure 3. For simplicity, we assume that A does
not extend java.lang.Object. More precisely, a call to
handleClass(A, ∅) results in the inequality constraints
{A.c(), B.g(), B.h()} and {A.c(), B.g(), C.x()}. Note
that we implicitly remove singleton inequality constraints
as these are always satisﬁed.
3505.2 Naming Constraints for Fields, Classes, and
Packages
The deobfuscation mechanism must satisfy the following
properties: (i) any two packages contained in the same pack-
age must have distinct names, (ii) any two classes contained
in the same package must have distinct names, and (iii)
any two ﬁelds declared in the same class must have distinct
names. We remark that the types of ﬁelds are irrelevant for
naming constraints. This is because a ﬁeld is referred to by
its name, and the type of a ﬁeld is not part of this name.
This is in contrast to methods, which are called by their
signature and where the types of a method’s parameters are
part of the method’s signature.
For a given Android app, the naming constraints for ﬁelds,
classes, and packages, are formalized using inequality con-
straints in the same way we formalize the constraints for
method names. We derive all inequality constraints for ﬁelds,
classes, and packages, by iterating over all classes and pack-
ages and reporting inequality constraints as deﬁned by the
above properties.
6.
IMPLEMENTATION AND EVALUATION
In this section we describe the implementation of De-
Guard and the experiments we conducted with it.
6.1 The DeGuard System
We now present our DeGuard system, which is pub-
licly available at http://apk-deguard.com. DeGuard is im-
plemened using Soot [38], a framework for static analysis
of Java and Android applications. Given an Android APK,
Soot transforms it into an intermediate format (called Jim-
ple) that simpliﬁes the analysis of the application. To con-
struct the application’s dependency graph, we use Soot’s
API to traverse all program elements.
To predict the names of all obfuscated elements for a given
application, DeGuard performs a MAP inference query
on the CRF model constructed from the application’s pro-
gram elements, the set of pairwise features (described in 4),
and the feature weights. Next, we describe how DeGuard
learns a probabilistic model (the pairwise features and their
weights) from non-obfuscated Android applications, and how
it uses this probabilistic model to predict likely names of ob-
fuscated program elements using MAP inference.
Feature Functions and Weights.
To learn all feature functions and weights, we downloaded
1784 non-obfuscated Android applications from F-Droid [3],
a popular repository for open-source Android applications.
Out of these 1784 applications, we randomly selected 100
which we intentionally left as our benchmark applications,
i.e., the ones we later use in our evaluation. We used the
remaining 1684 applications as our training set of applica-
tions.
The set of possible names assigned to obfuscated program
elements is drawn from the names observed in the training
set. The pairwise features ϕ1, . . . , ϕm are also derived from
the training set, as described in Section 4.3. The only com-
ponent missing in our probabilistic model are weights (cid:126)w =
[w1, . . . , wm] associated with the pairwise features. One way
to learn the weights is to use maximum likelihood estimation,
where the weights (cid:126)w are chosen such that the training data
has the highest probability. That is, we chose weights (cid:126)w
that maximize the probability P ( (cid:126)O = (cid:126)oj | (cid:126)K = (cid:126)kj), com-
puted as deﬁned in Section 3, for all programs (cid:104)(cid:126)oj, (cid:126)kj(cid:105) in
the training set. Unfortunately, computing the weights us-
ing precise maximum likelihood estimation is prohibitively
expensive in our context, due to the large number of nodes
and possible labels that can be assigned to them. DeGuard
therefore learns the weights using pseudo likelihood, which
approximates the conditional distribution P ( (cid:126)O | (cid:126)K) as the
product of the conditional distributions P (Oi | N (Oi), (cid:126)K)
of each unknown node Oi ∈ (cid:126)O conditioned on the node’s
neighbors N (Oi) and the known nodes (cid:126)K. For the complete
details on training using pseudo likelihoods see [35, §5.4].
Using the training described above, the training of this
model took about 2 hours on a 32-core machine with four
2.13GHz Xeon processors running Ubuntu 14.04 with 64-Bit
OpenJDK Java 1.7.0 51.
MAP Inference.
To predict likely names (cid:126)o to be assigned to all obfuscated
elements (cid:126)O, DeGuard computes the MAP inference query
(cid:126)o = argmax
(cid:126)o(cid:48)∈Ω
P ( (cid:126)O = (cid:126)o(cid:48) | (cid:126)K = (cid:126)k)
where (cid:126)k are the names assigned to the known elements (cid:126)K.
For this step, we use the publicly available Nice2Predict
framework [5]. Nice2Predict computes the MAP query us-
ing a scalable, greedy algorithm, where names assigned to
obfuscated program elements are iteratively changed one-
by-one or in pairs until the score stops improving. At every
iteration, all naming constraints are checked for violations.
More details on this algorithm are provided in [31]. After
predicting the names for all obfuscated elements, DeGuard
renames them using the Soot API, and then constructs and
outputs the deobfuscated APK.
6.2 Experimental Evaluation
We now present our experiments with DeGuard. First,
we evaluate DeGuard’s accuracy on deobfuscating benign,
open-source applications obfuscated using ProGuard. Sec-
ond, we discuss our experience in inspecting malware sam-
ples deobfuscated using DeGuard.
6.2.1 ProGuard Experiments
We perform two tasks to evaluate DeGuard’s perfor-
mance on ProGuard-obfuscated applications. First, we mea-
sure DeGuard’s accuracy on predicting the names of pro-
gram elements obfuscated by ProGuard. Second, based on
the results of the ﬁrst task, we report DeGuard’s accuracy
on the task of predicting the names of obfuscated third-party
libraries imported in the APK.
To conduct the above tasks, we obfuscated 100 benign ap-
plications from F-Droid. These are the 100 applications that
we intentionally did not use during the learning phase. For
all 100 applications, we enabled ProGuard obfuscation by
modifying their build ﬁles, without modifying ProGuard’s
obfuscation rules, which specify which elements are obfus-
cated. In our experiments, we use the non-obfuscated ver-
sions of the applications as an oracle to check whether De-
Guard correctly deobfuscates the program elements’ names
by renaming them to their original (i.e., non-obfuscated)
names.
35130
20
10
s
e
d
o
n
f
o
%
0
0
5
15
10
25
Number of neighbors
20
100
80
60
40
20
0
30
35
Figure 4: Distribution of total number of neighbors over the
100 ProGuard-obfuscated Android applications.
30
20
10
s
e
d
o
n
f
o
%
0
0
5
10
15
20
25
30
35
Number of known neighbors
Figure 5: Distribution of known number of neighbors over
the 100 ProGuard-obfuscated Android applications.
ProGuard-obfuscated APKs.
In Figures 4 and 5 we show two relevant metrics that re-
veal the dependency structure of the 100 applications that
we obfuscated using ProGuard. The bar chart depicted in
Figure 4 shows the distribution of total number of neighbors.
This ﬁgure shows one bar for each neighborhood size, where
the bar’s height indicates the percentage of nodes that have
exactly that number of neighbors. For example, the ﬁfth
bar indicates that the percentage of nodes with exactly 4
neighbors is around 22%. Similarly, the bar chart shown in
Figure 5 shows the distribution of known neighbors. The
data in these two ﬁgures reveals two key points about our
features: (i) the nodes are well-connected (99% of the nodes
have at least 3 neighbors), and (ii) most nodes have known
neighbors (99% have at least one known neighbor). That is,
our features lead to dependency graphs where informed pre-
diction seems possible (rather than graphs which are mostly
disconnected where there would be little or no ﬂow into a
node whose name is to be predicted).
Task 1: Predicting Program Element Names.
For this task, we deobfuscated the 100 benchmark ap-
plications, which we previously obfuscated with ProGuard.
We remark that ProGuard, in addition to renaming pro-
gram elements, also removes some elements. For example,
it removes ﬁelds, methods, and classes that are not used
by the application. Hence, we evaluate whether DeGuard
correctly deobfuscates elements not removed by ProGuard.
Figure 6 shows the percentage of known elements (which
DeGuard does not try to reverse), correctly predicted el-
ements, and mis-predicted elements, averaged over all 100
applications deobfuscated by DeGuard. Each bar has three
segments, which represent the three kinds of program ele-
Fields Methods Classes Packages
Total
Known
Correct
Mis-predicted
Figure 6: Average percentage of known, correctly predicted,
and mis-predicted program elements calculated over the 100
Android applications deobfuscated by DeGuard.
ments: (i) known, which are the elements not obfuscated
by ProGuard and which the system keeps as is, (ii) correct,
which are the elements that DeGuard correctly renames to
their original names, and (iii) mis-predicted, which are the el-
ements for which DeGuard predicts names that diﬀer from
the original ones. Here, the ﬁrst four bars show data about
ﬁelds, methods, classes, and packages, respectively, and the
ﬁfth bar shows the aggregate data for all program elements.
We use the predictions made for the package names in the
second task discussed in this section.
The data shows that ProGuard obfuscates a substantial
number of the program elements. On average, only 1.6% of
the ﬁelds, 33% of the methods, 9.4% of the classes, and 9.3%
of the packages are known. Thus, on average, ProGuard
obfuscates 86.7% of each application’s program elements.
The data further shows that DeGuard correctly deobfus-
cates a signiﬁcant part of the obfuscated program elements.
For example, while only 1.6% of the ﬁelds in the obfus-
cated applications are known, after DeGuard deobfuscates
them, 80.6% of all ﬁelds have names identical to the origi-
nal ones. We remark that 80.6% is a lower bound on how
well DeGuard deobfuscates ﬁelds. This is because some
of the names classiﬁed as mis-predicted are semantically
close to the original ones. For example, in the application
FacebookNotifications, DeGuard suggested appView and
mWindowManager as names for two ﬁelds, while the original
names are webview and windowManager, respectively.
Overall, the data shows that among all program elements,
DeGuard increases the percentage of names that are identi-
cal to the original ones from 13.3% (in the obfuscated APK)
to 79.1% (in the deobfuscated APK). We remark that the ap-
plications used in this experiment are benign. DeGuard’s
prediction accuracy on malicious applications may therefore
be lower.
Task 2: Predicting Third-party Libraries.
We next use the deobfuscation results for package names
obtained from Task 1 in order to evaluate DeGuard’s eﬀec-
tiveness for predicting third-party libraries.
We ﬁrst explain what we mean by the term library. We
identify libraries by their package names. We classiﬁed pack-
age names into library and application-speciﬁc using a sim-
ple heuristic: any package name that appears in multiple
applications is classiﬁed as corresponding to a library. This
heuristic works well because most application-speciﬁc pack-
352public static byte[] a (String str) {...};
}
System.getProperty("line.separator");
private String a =
1 public final class d {
2
3
4
5
6
7
8 }
private char[] b ;
private byte[] c ;
(a) Obfuscated code
private String NL =
1 public final class Base64 {
2
3
4
5
6
7
8 }
private char[] ENC ;
private byte[] DEC ;
(b) Deobfuscated code
private void g () {
m = getSystemService("location");
local = m .getBestProvider(...);
o = m .getLastKnownLocation(local);
...
1 public class SearchOfficesView extends BaseView {
2
3
4
5
6
7
8
9
10 }
private void j () {...}
(a) Obfuscated code
1 public class SearchOfficesView extends BaseView {
2
3
locationManager =getSystemService("location");
private void init () {
4
5
6