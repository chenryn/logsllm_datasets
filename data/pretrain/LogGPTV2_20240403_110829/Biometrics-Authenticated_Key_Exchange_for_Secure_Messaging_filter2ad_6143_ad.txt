each point 𝑃𝑜𝑖𝑛𝑡 𝑗,𝜌 (𝜌 ∈ [1, 4]), find the nearest 𝜇 points 𝑃𝑜𝑖𝑛𝑡 𝑗,𝜌,𝜎
(𝜎 ∈ [1, 4]). We define vec𝑗,𝜌,𝜎 (𝜎 ∈ [1, 4]) as the vector from
𝑃𝑜𝑖𝑛𝑡 𝑗,𝜌 to 𝑃𝑜𝑖𝑛𝑡 𝑗,𝜌,𝜎 . Let 𝑑 𝑗,𝜌,𝜎 denote the length of the vector
vec𝑗,𝜌,𝜎 and 𝜙 𝑗,𝜌,𝜔 (𝜔 ∈ [1, 6]) denote the angles. Similarly, we can
represent the vector v𝑗,𝜌 = (𝑑 𝑗,𝜌,1, 𝑑 𝑗,𝜌,2, 𝑑 𝑗,𝜌,3, 𝑑 𝑗,𝜌,4, 𝜙 𝑗,𝜌,1, 𝜙 𝑗,𝜌,2,
𝜙 𝑗,𝜌,3, 𝜙 𝑗,𝜌,4, 𝜙 𝑗,𝜌,5, 𝜙 𝑗,𝜌,6) (𝜌, 𝜎 ∈ [1, 4]). Finally, a fingerprint vec-
tor is represented as v𝑗 = (v𝑗,0, v𝑗,1, v𝑗,2, v𝑗,3, v𝑗,4) that is concate-
nated with 50 values.
Since the above fingerprint processing method is based on the
relative position of minutiae points, rotating images does not affect
the fingerprint representation.
4.3.2 Tolerating Fingerprint Noise with Lattice. Similar to the iris
vector, a fingerprint vector also should be processed to mitigate
noise. To this end, we also employ a well-chosen lattice. We omit
the repeatability description and refer to Section 4.2.2 for details.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2624Algorithm 2: Minutiae-based Fingerprint Vector Set Con-
structing Algorithm
1 for 𝑃𝑜𝑖𝑛𝑡 𝑗 ∈ {𝑃𝑜𝑖𝑛𝑡1, . . . , 𝑃𝑜𝑖𝑛𝑡𝑛 } do
Set 𝑃𝑜𝑖𝑛𝑡 𝑗 as the center and find the nearest 𝜇 points
Construct 𝜇 vectors {vec𝑗,𝜌 }𝜇
Compute vector lengths {𝑑 𝑗,𝜌 }𝜇 for {vec𝑗,𝜌 }𝜇
Compute inter-vector angles {𝜙 𝑗,𝜔} 𝜇·(𝜇−1)
in {vec𝑗,𝜌 }𝜇
Represent vector v𝑗,0 with {𝑑 𝑗,𝜌 }𝜇 and {𝜙 𝑗,𝜔 } 𝜇·(𝜇−1)
for 𝜌 ∈ [1, 𝜇] do
2
2
initializes the whole system and realizes all oracles, then gives all
public information to A, A then interacts with C via a series of
queries on 𝐸𝑥𝑒𝑐𝑢𝑡𝑒, 𝑆𝑒𝑛𝑑, 𝑅𝑒𝑣𝑒𝑎𝑙, and 𝐶𝑜𝑟𝑟𝑢𝑝𝑡. In the meanwhile,
A issues a 𝑇 𝑒𝑠𝑡 query, and keeps querying other oracles afterward
as before. Finally, A terminates this experiment and outputs a guess
bit 𝑏 (cid:4) for the choice bit 𝑏 in𝑇 𝑒𝑠𝑡. For BAKE, an instance of the sender
represents an online attack if both the following cases are true at the
time of the𝑇 𝑒𝑠𝑡 query, (1) at some point, A queried 𝑆𝑒𝑛𝑑1 (P𝑖
, ∗) (vs.
0
𝑗
𝑆𝑒𝑛𝑑2 (P
)).
1
The number of online attacks represents a bound on the number
of biometric secret keys that A could have tested in an online
fashion. A PPT A may succeed with probability 1 by trying all
biometric secret keys if the size of the biometric dictionary is small.
Therefore, A is only said to have succeeded if A asks a single 𝑇 𝑒𝑠𝑡
query, outputs a guess bit 𝑏 (cid:4) such that 𝑏 (cid:4) = 𝑏. The advantage of A
in attacking BAKE is formally defined by
, ∗)); (2) at some point, A queried𝑇 𝑒𝑠𝑡 (P𝑖
0
𝑗
) (vs.𝑇 𝑒𝑠𝑡 (P
1
2
3
4
5
6
7
8
9
10
11
12
13
Set 𝑃𝑜𝑖𝑛𝑡 𝑗,𝜌 as the core and find the nearest 𝜇 points
Construct 𝜇 vectors {vec𝑗,𝜌,𝜎 }𝜇
Compute vector lengths {𝑑 𝑗,𝜌,𝜎 }𝜇 for {vec𝑗,𝜌,𝜎 }𝜇
Compute inter-vector angles {𝜙 𝑗,𝜌,𝜔 } 𝜇·(𝜇−1)
{vec𝑗,𝜌,𝜎 }𝜇
Represent vector v𝑗,𝜌 with {𝑑 𝑗,𝜌,𝜎 }𝜇 and
{𝜙 𝑗,𝜌,𝜔 } 𝜇·(𝜇−1)
in
2
Represent {vec𝑗,𝜌}𝜇 as vector v𝑗 = (v𝑗,0,v𝑗,1,v𝑗,2,v𝑗,3,v𝑗,4)
2
AdvA (𝜆) = |2 · Pr[𝑏 = 𝑏 (cid:4)] − 1|.
(1)
5 SECURITY
We detail security analysis with Find-then-Guess (FtG) paradigm
in the Bellare-Pointcheval-Rogaway (BPR) model [7], where the
adversary A is given access to oracles through the following oracle
queries. Particularly, users who hold biometrics (from a specific
biometric dictionary) are modeled as PPT algorithms that respond
𝑗
to queries. P𝑖
1 ) denotes instance 𝑖 (vs. 𝑗) of user P0 (vs. P1)
who executes the protocol multiple times with different partners
(we use vs. to simply describe the similar case of the other user).
0 (vs. P
Execute. This oracle models a passive A (e.g., an eavesdropper)
who receives all the transcripts of an honest execution between an
instance of a sender P𝑖
𝑗
0 and an instance of a receiver P
1 .
Send. This oracle models an active adversary A who can inter-
cept a message, modify it, create a new one, or simply forward it
to the intended party. For example, A could launch impersonation
attacks via Send queries. Particularly, we separate three kinds of
𝑆𝑒𝑛𝑑 oracles in BAKE, 𝑆𝑒𝑛𝑑0 (P𝑖
) implies that P0 initiates an
0
𝑗
execution with P1, 𝑆𝑒𝑛𝑑1 (P𝑖
, 𝑚) implies a mes-
, 𝑚) and 𝑆𝑒𝑛𝑑2 (P
0
1
𝑗
sage 𝑚 is sent by A to the instance P𝑖
1 , and outputs the first
and second message that the instance of the user who generates
upon receipt of the messages.
0 and P
𝑗
, P
1
Reveal. This oracle models the misuse of session keys by a user,
and A gets the session key held by the user.
Test. This oracle models A is given either a session key or a
random value (depending on a choice bit 𝑏) and must distinguish
𝑗
them. If no session key for instance P𝑖
1 ) is defined , then
return the undefined symbol ⊥. Otherwise, return a guess bit 𝑏 (cid:4) ∈
{0, 1} for the choice bit 𝑏.
0 (vs. P
Corrupt. This oracle models the client outputs the biometric
secret key, which does not reveal the internal state, but reveals the
secret key and can be made at any point during the protocol.
Advantage of the adversary. Freshness oracle is defined to
restrict the queries to a target session. The security experiment is
performed as a game between a challenger C and an adversary A
based on BAKE with a security parameter 𝜆. Concretely, C first
Definition 5.1. BAKE is said to be secure if for every biometric
dictionary 𝐷 with size (cid:12)𝐷 (cid:12) and for all PPT A making at most 𝑄𝑠
online dictionary attacks (i.e., the number of 𝑆𝑒𝑛𝑑 queries), it holds
that AdvA (𝜆) ≤ 𝑄𝑠 /(cid:12)𝐷 (cid:12) + 𝑛𝑒𝑔𝑙 (𝜆).
Remark 1. Fuzzy aPAKE [21] is using an ideal cipher as a block
cipher that takes as input a plaintext or a ciphertext. In our solution,
we instantiate the block cipher using our proposed AFEM instead.
Theorem 5.2. BAKE is secure with the advantage AdvA (𝜆) ≤
𝑄𝑠 /(cid:12)𝐷 (cid:12) + 𝑛𝑒𝑔𝑙 (𝜆) if AFEM is semantic secure and assuming all
collision-resistant hash functions are random oracles H , where 𝑄𝑠
is the number of the online attacks (i.e., the number of 𝑆𝑒𝑛𝑑 queries)
and the bit-length of the output of H is ℓ.
Proof of Theorem 5.2. We use A to construct a simulator S that
controls all oracles to which A has the ability to access. S executes
the Init phase including selecting biometric characteristics for each
user, and answers A’s queries as defined in the 𝐸𝑥𝑒𝑐𝑢𝑡𝑒, 𝑇 𝑒𝑠𝑡, and
𝑆𝑒𝑛𝑑 oracles. Thus, A succeeds in breaking the semantic security
of AFEM if it can guess the bit 𝑏 that S uses during the 𝑇 𝑒𝑠𝑡-query.
The proof uses a sequence of hybrids, starting from the real case
and ending at the ideal (or simulation) case where the advantage
(𝜆) denote the advantage of A in the hybrid
of A is 0. Let Adv
Hy.𝑖. To prove the desired bound on AdvA (𝜆) = Adv
(𝜆), we
bound the effect of each change in the hybrid on the advantage of
A, and then illustrate that Adv
(𝜆) ≤ 𝑄𝑠 /(cid:12)𝐷 (cid:12).
Hy0
A
Hy𝑖
A
Hy7
A
0 (vs. P
Hy.0. A real hybrid follows BAKE specification. Hy.0 corre-
sponds to the real attack that the honest users have their key-pair
(𝑝𝑘0, 𝑠𝑘0) (vs. (𝑝𝑘1, 𝑠𝑘1)). 𝐸𝑥𝑒𝑐𝑢𝑡𝑒 and 𝑆𝑒𝑛𝑑 are answered exactly
as the honest users with their keys; 𝑅𝑒𝑣𝑒𝑎𝑙 to an instance of the
𝑗
participant P𝑖
1 ) is answered by issuing the session key (i.e.,
,𝑠1) vs. 𝑘1 = 𝐻 (𝑝𝑘0, 𝑝𝑘1, 𝑐0, 𝑐1, 𝑠0, 𝑠 (cid:4)
𝑘0 ←𝐻 (𝑝𝑘0, 𝑝𝑘1, 𝑐0, 𝑐1,𝑠 (cid:4)
)) that
1
0
𝑗
is generated by P𝑖
0 (vs. P
1 ) during the execution of the protocol
(or ⊥ if no session key is set); and 𝑇 𝑒𝑠𝑡 to a fresh instance P𝑖
0 (vs.
𝑗
1 ) is answered after flipping a coin 𝑏, by either the output of
P
)) or 𝑠𝑘 $← {0, 1}∗. By definition, we
𝑅𝑒𝑣𝑒𝑎𝑙 (P𝑖
0
have AdvA (𝜆) = Adv
𝑗
) (vs. 𝑅𝑒𝑣𝑒𝑎𝑙 (P
1
Hy0
(𝜆) = |2 · Pr[𝑏 = 𝑏 (cid:4)] − 1|.
A
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2625Hy.1. Hy.1 is identical to Hy.0 on simulating all the instances
for 𝑆𝑒𝑛𝑑, 𝐸𝑥𝑒𝑐𝑢𝑡𝑒, 𝑇 𝑒𝑠𝑡 and 𝐶𝑜𝑟𝑟𝑢𝑝𝑡 queries, except that we sim-
ulate the random oracle H on new queries (𝑝𝑘0, 𝑝𝑘1, 𝑐0, 𝑐1, 𝑠 (cid:4)
, 𝑠1)
0
and (𝑝𝑘0, 𝑝𝑘1, 𝑐0, 𝑐1, 𝑠0, 𝑠 (cid:4)
), and we obtain two associated random
1
outputs as session keys, either 𝑘0 ← 𝐻 (𝑝𝑘0, 𝑝𝑘1, 𝑐0, 𝑐1, 𝑠 (cid:4)
, 𝑠1) or
(cid:5)
0
𝑘1 ← 𝐻 (𝑝𝑘0, 𝑝𝑘1, 𝑐0, 𝑐1, 𝑠0, 𝑠 (cid:4)
) in all of the sessions. For keeping con-
1
, 𝑠1), 𝑘0
sistent, the corresponding valid records
are stored in the list Λ𝐻 that is used
and
to give the same answer if the same query is asked twice. This hy-
brid excludes the collision, the protocol halts and A fails if any
instance chooses any input of the random oracle that has been used.
This is a perfect simulation of the random oracle H , and we have
(𝑝𝑘0, 𝑝𝑘1, 𝑐0, 𝑐1, 𝑠0, 𝑠 (cid:4)
1
(𝑝𝑘0, 𝑝𝑘1, 𝑐0, 𝑐1, 𝑠 (cid:4)
0
), 𝑘1
(cid:4)
(cid:4)
(cid:5)
Claim 1.
|Adv
Hy0
A
(𝜆) − Adv
Hy1
A
(𝜆)| is negligible.
(cid:4)
Proof. This claim is guaranteed by the collision resistance and
one-wayness of the hash function. All executions will be halted if a
collision occurs in the transcript
since the in-
puts 𝑝𝑘0, 𝑐0, 𝑝𝑘1, 𝑐1 are simulated and chosen uniformly at random.
Thus, the collision in the transcript is still regarded as negligi-
(𝜆) ≤
ble for convenience, and the probability is at most Adv
(𝑝𝑘0, 𝑐0), (𝑝𝑘1, 𝑐1)
(cid:5)
Hy0
A
Hy1
A
(𝜆) + (𝑄𝑠 +𝑄𝑒 ) 2
via the birthday paradox, where 𝑄𝑠 and 𝑄𝑒
Adv
are the numbers of 𝑆𝑒𝑛𝑑 and 𝐸𝑥𝑒𝑐𝑢𝑡𝑒 queries, and ℓ is the bit-length
(cid:2)
of the output of H .
2ℓ
𝑗
, P
1
Hy.2. 𝐸𝑥𝑒𝑐𝑢𝑡𝑒 queries between compatible users, before corrup-
tion. In this hybrid, we first deal with the passive attacks between
two compatible users because 𝐸𝑥𝑒𝑐𝑢𝑡𝑒 models the behavior of the
passive adversary. Indeed, there is a simple query to the 𝐸𝑥𝑒𝑐𝑢𝑡𝑒
oracle (in either Hy.3 or Hy.2), and the transcript (𝑝𝑘0, 𝑐0, 𝑝𝑘1, 𝑐1)
is returned to A. In order to respond to 𝐸𝑥𝑒𝑐𝑢𝑡𝑒 (P𝑖
), the pub-
0
lic key 𝑝𝑘0 ← AFEM.PubGen(𝑠𝑘0) for the sender P0 (vs. 𝑝𝑘1 ←
AFEM.PubGen(sk1) for the receiver P1) with the associated cor-
rect secret key 𝑠𝑘0 derived from the biometric characteristics (i.e.,
SK) for the sender P0 (vs. 𝑠𝑘1 for the receiver P1) is replaced by
encrypting a random sampled 𝑠𝑘0 (vs. 𝑠𝑘1) from SK. Additionally,
the message 𝑠0 for P0 (vs. the message 𝑠1 for P1) is encrypted un-
der a dummy public key 𝑝𝑘𝑖 ← AFEM.PubGen(𝑠𝑘𝑖 ) (for 𝑖 = 0, 1)
instead of 𝑝𝑘𝑖 ← AFEM.PubGen(𝑠𝑘𝑖 ). Thus, we obtain 𝑐0 ←
, 𝑠1) for P1).
AFEM.Enc(𝑝𝑘
for P0 and 𝑘1 ← {0, 1}ℓ
Next, random session keys 𝑘0 ← {0, 1}ℓ
(cid:4)
for P1 are drawn uniformly, and the list ΛHy.2
stores the records
𝐻
, 𝑐0, 𝑐1, 𝑠1, 𝑠 (cid:4)
, 𝑝𝑘
(𝑝𝑘
. Thus,
0
0
we consider A wins this hybrid if ΛHy.2
𝐻 ∩ Λ𝐻 ≠ ∅. To summarize
what has been mentioned above, we utilize Hy.2 to exclude pas-
sive attacks between compatible users by 𝐸𝑥𝑒𝑐𝑢𝑡𝑒, where Hy.2 is
indistinguishable from Hy.1 unless the two aforementioned records
have been queried to H . Thus, we have
, 𝑠0) for P0 (vs. 𝑐1 ← AFEM.Enc(𝑝𝑘
, 𝑐0, 𝑐1, 𝑠0, 𝑠 (cid:4)
1
), 𝑘0
), 𝑘1
and
, 𝑝𝑘
(𝑝𝑘
(cid:5)
(cid:4)
(cid:5)
1
0