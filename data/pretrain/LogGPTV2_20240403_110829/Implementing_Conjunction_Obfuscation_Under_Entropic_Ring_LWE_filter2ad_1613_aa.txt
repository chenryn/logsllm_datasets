title:Implementing Conjunction Obfuscation Under Entropic Ring LWE
author:David Bruce Cousins and
Giovanni Di Crescenzo and
Kamil Doruk G&quot;ur and
Kevin King and
Yuriy Polyakov and
Kurt Rohloff and
Gerard W. Ryan and
Erkay Savas
2018 IEEE Symposium on Security and Privacy
Implementing Conjunction Obfuscation under
Entropic Ring LWE
David Bruce Cousins∗, Giovanni Di Crescenzo†, Kamil Doruk G¨ur‡, Kevin King§,
Yuriy Polyakov‡(cid:3), Kurt Rohloff‡(cid:3), Gerard W. Ryan‡ and Erkay Savas¸†¶
∗ Raytheon BBN Technologies, PI:EMAIL
† Applied Communication Sciences / Vencore Labs, PI:EMAIL
‡ NJIT Cybersecurity Research Center, New Jersey Institute of Technology,
§ Massachusetts Institute of Technology, PI:EMAIL
{kg365,polyakov,rohloff,gwryan}@njit.edu
¶ Sabancı University, PI:EMAIL
(cid:3) Corresponding Authors
(cid:2)
Abstract—We address the practicality challenges of secure
program obfuscation by implementing, optimizing, and experi-
mentally assessing an approach to securely obfuscate conjunction
programs proposed in [1]. Conjunction programs evaluate func-
i∈I yi, where yi is either xi or ¬xi and
tions f (x1, . . . , xL) =
I ⊆ [L], and can be used as classiﬁers. Our obfuscation approach
satisﬁes distributional Virtual Black Box (VBB) security based
on reasonable hardness assumptions, namely an entropic variant
of the Ring Learning with Errors (Ring-LWE) assumption. Prior
implementations of secure program obfuscation techniques sup-
port either trivial programs like point functions, or support the
obfuscation of more general but less efﬁcient branching programs
to satisfy Indistinguishability Obfuscation (IO), a weaker security
model. Further, the more general implemented techniques, rather
than relying on standard assumptions, base their security on
conjectures that have been shown to be theoretically vulnerable.
Our work is the ﬁrst implementation of non-trivial program
obfuscation based on polynomial rings. Our contributions in-
clude multiple design and implementation advances resulting
in reduced program size, obfuscation runtime, and evaluation
runtime by many orders of magnitude. We implement our
design in software and experimentally assess performance in
a commercially available multi-core computing environment.
Our implementation achieves runtimes of 6.7 hours to securely
obfuscate a 64-bit conjunction program and 2.5 seconds to
evaluate this program over an arbitrary input. We are also
able to obfuscate a 32-bit conjunction program with 53 bits of
security in 7 minutes and evaluate the obfuscated program in 43
milliseconds on a commodity desktop computer, which implies
that 32-bit conjunction obfuscation is already practical. Our
graph-induced (directed) encoding implementation runs up to 25
levels, which is higher than previously reported in the literature
for this encoding. Our design and implementation advances are
applicable to obfuscating more general compute-and-compare
programs and can also be used for many cryptographic schemes
based on lattice trapdoors.
I. INTRODUCTION
Program obfuscation has long been of interest in the cyber-
security community. Obfuscated programs should be difﬁcult
to reverse engineer, and should protect intellectual property
contained in software from theft. This prevents the identiﬁca-
tion of exploits usable by adversaries.
For many years practical program obfuscation techniques
have been heuristic and have not provided secure approaches to
obfuscation based on the computational hardness of mathemat-
ical problems, similar to how cryptography has provided data
security based on the computational hardness assumptions.
Prior techniques are discussed in [2], [3], [4], [5], [6], [7].
Although often usable in practice,
these prior approaches
do not provide strong security guarantees, and can often be
defeated without large computational effort. For example, [8],
[9], [10], [11], [12] all provide methods to defeat heuristic
software obfuscation.
There have been multiple recent attempts to develop cryp-
tographically secure approaches to program obfuscation based
on the computational hardness of mathematical problems. See
[13] for a survey of these recent approaches. There are multiple
deﬁnitions used for obfuscation in these recent approaches.
Two prominent deﬁnitions are Virtual Black Box (VBB) and
Indistinguishability Obfuscation (IO).
Virtual Black Box (VBB) obfuscation is an intuitive def-
inition of secure program obfuscation where the obfuscated
program reveals nothing more than black-box access to the
program via an oracle [14]. VBB is known to have strong
limitations [15], [16], [17]. The most signiﬁcant limitation is
that general-purpose VBB obfuscation is unachievable [15].
To address limitations of VBB, Barak et al. [15] deﬁne
a weaker security notion of Indistinguishability Obfuscation
(IO) for general-purpose program obfuscation. IO requires
that the obfuscations of any two circuits (programs) of the
same size and same functionality (namely, the same truth
table) are computationally indistinguishable. The IO concept
has been of recent interest, with recent advances to identify
candidate IO constructions based on multi-linear maps [18],
[19], [20], [21], [22], [23], [24]. There has also been recent
work to implement multi-linear map constructions [25], [26],
[27]. Recent results show that these constructions might not
be secure [28], [29], [30], [31], [32], [33], [34], [35], [36].
The only IO construction supporting general functions that
is not subject to any attack to date is the work by Garg et
© 2018, David Bruce Cousins. Under license to IEEE.
DOI 10.1109/SP.2018.00007
354
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:30 UTC from IEEE Xplore.  Restrictions apply. 
al. [37]. These cryptographically secure program obfuscation
capabilities have also been considered impractical due to their
computational inefﬁciency.
There have been attempts to securely obfuscate special-
purpose functions, such as point, conjunction, and evasive
functions, using potentially practical techniques. For example,
there have been several approaches to obfuscating point func-
tions [38], [39], [40], [41], [42]. Unfortunately, point functions
have limited applicability.
We address the practicality challenges of secure program
obfuscation by implementing, optimizing, and experimentally
evaluating an approach proposed in [1] to securely obfus-
cate programs that execute conjunction functions, which are
signiﬁcantly more complex than point functions. Conjunction
i∈I yi, where
programs evaluate functions f (x1, . . . , xL) =
yi is either xi or ¬xi and I ⊆ [L].
(cid:2)
The obfuscation of conjunction programs is explored in
[43] using the graded-encoding (multi-linear map) candidate
construction from [20]. This prior approach is modiﬁed for an
approach that is based on a graph-induced multi-linear map
construction in [21] and secure under an entropic variant of
the Ring-LWE assumption [1]. The obfuscation scheme satis-
ﬁes distributional VBB security, meaning that the obfuscated
program reveals nothing more than black-box access to the
conjunction function via an oracle, as long as the conjunction
is chosen from a distribution having sufﬁcient entropy. The
original work [1] focused on theoretical feasibility of con-
junction obfuscation under entropic Ring-LWE and did not
examine practicality issues of the construction.
To address the practicality of obfuscating conjunction pro-
grams, we introduce major design and system-level improve-
ments compared to [1] that enable obfuscation and evaluation
procedures both in server and desktop computing environ-
ments. These improvements include the use of optimized
Gaussian sampling for lattice trapdoors and arbitrary-base
gadget matrix, word-based encoding of programs (instead of
binary encoding), optimized correctness constraint and param-
eter selection, efﬁcient polynomial multiplication in double
Chinese Remainder Transform (CRT) representation, opti-
mized matrix arithmetic, and loop parallelization at multiple
levels of the implementation. We implement this scheme in a
C++ cryptographic library with multi-threading support.
Our implementation achieves runtimes of 6.7 hours to
securely obfuscate a 64-bit conjunction program, and 2.5
sec. to evaluate this program over an arbitrary input in a
server computing environment. The obfuscated program size
is about 750 GB. For a 32-bit conjunction program, we
report the obfuscation runtime of 7.0 min. and evaluation
runtime of 43ms in a desktop computing environment, with
the obfuscated program size under 6 GB.
A. Our Contributions
We implement the conjunction obfuscator on top of PAL-
ISADE1, an open-source lattice cryptography library. We add
new modules in PALISADE including the following:
1https://git.njit.edu/palisade/PALISADE
355
1) Gaussian lattice trapdoor sampler for power-of-two
cyclotomic rings. This implementation supports arbitrary
moduli, including primes and products of primes, and
performs all computations without explicit generation of
a Cholesky decomposition matrix, which was a bottleneck
of previous implementations based on [44]. Our imple-
mentation also supports a gadget matrix with an arbitrary
base, which is computationally and spatially much more
efﬁcient than the classical binary gadget matrix.
2) Generic integer Gaussian samplers, including recent
Karney’s rejection [45] and constant-time [46] samplers.
These samplers can be used for any integer Gaussian
sampling operation in lattice-based cryptography.
3) Implementation of directed encoding, a special case of
GGH15 multi-linear map construction.
4) Extended Double-CRT support
to perform trapdoor
sampling and obfuscation-related operations using native
integer data types.
5) Efﬁcient matrix arithmetic to support fast evaluation of
inputs using the obfuscated conjunction program.
6) Multi-threading and loop parallelization support for all
operations of conjunction obfuscator and certain lower-
level matrix operations.
Our implementation includes several major original design
improvements of the obfuscation scheme [1]:
1) Word encoding of conjunction program compared to the
binary alphabet used in [1], which results in the reduction
of obfuscated program size and obfuscation/evaluation
runtimes by many orders of magnitude.
2) Efﬁcient ring-based trapdoor construction and preim-
age sampling, which substantially reduces the obfusca-
tion runtime and storage requirements.
3) Dramatically reduced dimensions of encoding matri-
ces due to the use of a gadget matrix with a large base,
which allow us to reduce program size and obfusca-
tion/evaluation runtimes by multiple orders of magnitude.
4) Improved bounds on parameters coming from more
careful analysis of the matrix/polynomial products and
use of the Central Limit Theorem.
B. Related Work
Prior implementation work on secure program obfuscation
beyond point obfuscation includes [25], [26], [27].
The ﬁrst imlementation attempt [25] is based on the CLT13
encoding [47]. The authors build a branching program (BP)
that obfuscates point functions. The obfuscation time for a 14-
bit point function and 60-bit security is 9 hours, the program
size is 31 GB and the evaluation of a single input takes
3.3 hours. Better results are reported in [26] which shows a
framework for BP obfuscation using both CLT13 and GGH13
[48] multi-linear map encodings. The obfuscation time for an
80-bit point function using CLT13 with 80-bit security is 3.3
hours, obfuscated program size is 8.3 GB and evaluation time
is 180 seconds. Note that the above two studies implement
multi-linear map constructions to IO not believed to be secure
[28], [29], [30], [31], [32], [33].
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:30 UTC from IEEE Xplore.  Restrictions apply. 
Halevi et al. [27] present an implementation of a simpliﬁed
variant of GGH15 [21] to obfuscate oblivious read-once BPs,
i.e., nondeterministic ﬁnite automata, of at most 80 bits
with over 100 states. The GGH15 encoding is more efﬁcient
than CLT13 and GGH13 for larger numbers of states (over
approximately 50 states), and presently appears to be immune
to existing attacks in the obfuscation scenarios. Obfuscation
takes 23 days, obfuscated program size is 9 TB, and evaluation
takes 25 min. The maximum BP length is 20.
Our implementation is based on GGH15 [21] and entropic
Ring-LWE, which is different from [25], [26]. We use a
different security model for the obfuscation of a special-
purpose function satisfying distributional VBB security, rather
than BP obfuscation satisfying IO. Hence, results can be
compared only indirectly. The results of this comparison are:
1) Our evaluation time for a 64-bit conjunction program
(2.5 seconds), which is often the main runtime metric
when assessing the practicability of program obfuscation,
is signiﬁcantly smaller than the one reported in [27] for
the same bit length (949 seconds) and is smaller than the
runtime for an 80-bit point function with 80-bit security
in [26] (180 seconds).
2) Our evaluation time for 20 levels of directed encoding
for binary alphabet (188 seconds) is also smaller than the
corresponding evaluation time in [27] (1514 seconds).
3) Our obfuscation time for a 64-bit pattern is 6.7 hours vs.
87 hours in [27].
4) The number of states supported by the conjunction ob-
fuscator can be much higher than 100 (which is larger
than in [25], [26], [27]) and is an exponential function of
the number of “wildcards” in the conjunction pattern.
5) Our conjunction obfuscation does not include any ran-
domizing as in BP obfuscation and, hence, requires the
conjunction pattern to have high entropy to be VBB-
secure, which is a drawback of our approach.
Although we take a software-only-based approach to pro-
gram obfuscation, hardware-based approaches are also feasi-
ble. The work [49] achieves simulation-secure obfuscation for
RAM programs using secure hardware to circumvent previous
impossibility results.
There are related efforts to provide designs and implemen-
tations of obfuscation capabilities. Many building blocks of
our implementation can be used to obfuscate compute-and-
compare programs, a generalization of conjunctions, using the
recently proposed construction based on LWE [50]. Another
similar generalization is lockable obfuscation [51]. These more
general constructions have not been implemented yet.
C. Organization
The rest of the paper is organized as follows: Section
II provides the preliminaries of conjunction programs and
lattices. Section III describes the conjunction obfuscator un-
der entropic Ring-LWE and introduces our word encoding
optimization. Section IV presents our optimizations of lattice
trapdoor sampling focusing on the G-lattice generalization to
arbitrary bases. Section V discusses the selection of parameters
Start
0
1
0
1
0
1
1
0
0
1
0
1
0
1
Output: 1            
Output: 0
Fig. 1: Sample conjunction program that accepts [0(cid:2)1(cid:2)].
to optimize program size and runtimes. Section VI discusses
our algorithms for efﬁcient polynomial and matrix operations.
Sections VII and VIII provide implementation details and
performance evaluation of conjunction obfuscator. The paper
concludes in Section IX. Appendices provide pseudocode for
trapdoor sampling and conjunction obfuscation procedures,
experimental results for integer Gaussian sampling, and deriva-
tion details.
II. PRELIMINARIES
(cid:2)
A. Conjunction Programs and Their Applications
We deﬁne a conjunction as a function on L-bit inputs,
i∈I yi, where yi is either xi
speciﬁed as f (x1, . . . , xL) =
or ¬xi and I ⊆ [L]. The conjunction program checks that
: i ∈ I match some ﬁxed pattern while the
the values xi
values with indices outside I can be arbitrary. We represent
conjunctions further in the paper as vectors v ∈ {0, 1, (cid:2)}L,
where we deﬁne Fv (x1, . . . , xL) = 1 iff for all i ∈ [L] we
have xi = vi or vi = (cid:2). We refer to (cid:2) as a “wildcard”.
Conjunctions are used in machine learning to execute or
approximate classes of classiﬁers [52], [53]. We can repre-
sent linear classiﬁers as conjunction programs, and we have
used obfuscated conjunction programs to support Optical
Character Recognition (OCR) applications on the standard
MNIST dataset, for example, [54]. In this application, we use
principal component analysis (PCA) techniques to construct
a hypercube linear classiﬁer for speciﬁc characters that we
obfuscate using our conjunction obfuscation technique.
Figure 1 shows a sample conjunction program represented
as the accepting language of a ﬁnite state machine where
binary inputs drive state transitions. In this example the
program accepts the input string [0(cid:2)1(cid:2)], where (cid:2) represents a
“wildcard input”. This program accepts all 4-bit strings where
the ﬁrst bit is a 0 and the third bit is a 1. The second and
fourth bits in the program are wildcards, meaning either 0 or
1 inputs in these locations can lead to accepting states.
We discuss below how one can group bits into larger
alphabets of inputs using word encoding and we are not bound
to binary inputs for conjunction programs. With these larger
encodings, conjunction programs can be used to represent
∞-norm and hypercube description region classiﬁers, among