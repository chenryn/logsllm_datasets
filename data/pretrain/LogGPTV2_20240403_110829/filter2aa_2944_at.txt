    Login
4.5.1
Calling the login API from JavaScript
You can use the fetch API in the browser to make a call to the login endpoint, just as
you did previously. Create a new file named login.js next to the login.html you just
added and save the contents of listing 4.15 to the file. The listing adds a login(user-
name, password) function that manually Base64-encodes the username and password
and adds them as an Authorization header on a fetch request to the /sessions end-
point. If the request is successful, then you can extract the anti-CSRF token from the
JSON response and set it as a cookie by assigning to the document.cookie field.
Because the cookie needs to be accessed from JavaScript, you cannot mark it as Http-
Only, but you can apply other security attributes to prevent it accidentally leaking.
Finally, redirect the user back to the Create Space UI that you created earlier. The rest
of the listing intercepts the form submission, just as you did for the Create Space form
at the start of this chapter.
const apiUrl = 'https://localhost:4567';
function login(username, password) {
    let credentials = 'Basic ' + btoa(username + ':' + password);   
    fetch(apiUrl + '/sessions', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
  'Authorization': credentials                                      
        }
    })
    .then(res => {
       if (res.ok) {
         res.json().then(json => {
            document.cookie = 'csrfToken=' + json.token +  
                ';Secure;SameSite=strict';                 
            window.location.replace('/natter.html');       
Listing 4.15
Calling the login endpoint from JavaScript
As before, customize 
the CSS to style the 
form as you wish.
The username field is 
a simple text field.
Use a HTML 
password input 
field for passwords.
Encode the 
credentials 
for HTTP Basic 
authentication.
If successful, then 
set the csrfToken 
cookie and redirect 
to the Natter UI.
141
Building the Natter login UI
         });
       }
    })
    .catch(error => console.error('Error logging in: ', error));      
}
window.addEventListener('load', function(e) {                  
    document.getElementById('login')                           
        .addEventListener('submit', processLoginSubmit);       
});                                                            
function processLoginSubmit(e) {                               
    e.preventDefault();                                        
    let username = document.getElementById('username').value;  
    let password = document.getElementById('password').value;  
    login(username, password);                                 
    return false;                                              
}
Rebuild and restart the API using
mvn clean compile exec:java
and then open a browser and navigate to https://localhost:4567/login.html. If you
open your browser’s developer tools, you can examine the HTTP requests that get
made as you interact with the UI. Create a test user on the command line as before:
curl -H 'Content-Type: application/json' \
   -d '{"username":"test","password":"password"}' \
  https://localhost:4567/users
Then type in the same username and password into the login UI and click Login. You
will see a request to /sessions with an Authorization header with the value Basic
dGVzdDpwYXNzd29yZA==. In response, the API returns a Set-Cookie header for the ses-
sion cookie and the anti-CSRF token in the JSON body. You will then be redirected to
the Create Space page. If you examine the cookies in your browser you will see both
the JSESSIONID cookie set by the API response and the csrfToken cookie set by Java-
Script, as in figure 4.14.
Otherwise, log the
error to the console.
Set up an 
event listener 
to intercept 
form submit, 
just as you did 
for the Create 
Space UI.
Figure 4.14
The two cookies viewed in Chrome’s developer tools. The JSESSIONID cookie is set by the API and 
marked as HttpOnly. The csrfToken cookie is set by JavaScript and left accessible so that the Natter UI can send 
it as a custom header.
142
CHAPTER 4
Session cookie authentication
If you try to actually create a new social space, the request is blocked by the API
because you are not yet including the anti-CSRF token in the requests. To do that, you
need to update the Create Space UI to extract the csrfToken cookie value and
include it as the X-CSRF-Token header on each request. Getting the value of a cookie
in JavaScript is slightly more complex than it should be, as the only access is via the
document.cookie field that stores all cookies as a semicolon-separated string. Many
JavaScript frameworks include convenience functions for parsing this cookie string,
but you can do it manually with code like the following that splits the string on semi-
colons, then splits each individual cookie by equals sign to separate the cookie name
from its value. Finally, URL-decode each component and check if the cookie with the
given name exists:
function getCookie(cookieName) {
    var cookieValue = document.cookie.split(';')   
        .map(item => item.split('=')                    
            .map(x => decodeURIComponent(x.trim())))    
        .filter(item => item[0] === cookieName)[0]    
    if (cookieValue) {
        return cookieValue[1];
    }
}
You can use this helper function to update the Create Space page to submit the CSRF-
token with each request. Open the natter.js file in your editor and add the getCookie
function. Then update the createSpace function to extract the CSRF token from the
cookie and include it as an extra header on the request, as shown in listing 4.16. As a
convenience, you can also update the code to check for a 401 response from the API
request and redirect to the login page in that case. Save the file and rebuild the API
and you should now be able to login and create a space through the UI.
function createSpace(name, owner) {
    let data = {name: name, owner: owner};
    let csrfToken = getCookie('csrfToken');   
    fetch(apiUrl + '/spaces', {
        method: 'POST',
        credentials: 'include',
        body: JSON.stringify(data),
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfToken     
        }
    })
    .then(response => {
        if (response.ok) {
            return response.json();
Listing 4.16
Adding the CSRF token to requests
Split the cookie string 
into individual cookies.
Then split each 
cookie into name 
and value parts.
Decode each part.
Find the cookie with
the given name.
Extract the CSRF 
token from the 
cookie.
Include the CSRF token 
as the X-CSRF-Token 
header.
143
Implementing logout
        } else if (response.status === 401) {         
            window.location.replace('/login.html');   
        } else {
            throw Error(response.statusText);
        }
    })
    .then(json => console.log('Created space: ', json.name, json.uri))
    .catch(error => console.error('Error: ', error));
}
4.6
Implementing logout
Imagine you’ve logged into Natter from a shared computer, perhaps while visiting
your friend Amit’s house. After you’ve posted your news, you’d like to be able to log
out so that Amit can’t read your private messages. After all, the inability to log out was
one of the drawbacks of HTTP Basic authentication identified in section 4.2.3. To
implement logout, it’s not enough to just remove the cookie from the user’s browser
(although that’s a good start). The cookie should also be invalidated on the server in
case removing it from the browser fails for any reason3 or if the cookie may be
retained by a badly configured network cache or other faulty component. 
 To implement logout, you can add a new method to the TokenStore interface,
allowing a token to be revoked. Token revocation ensures that the token can no longer
be used to grant access to your API, and typically involves deleting it from the server-
side store. Open TokenStore.java in your editor and add a new method declaration
for token revocation next to the existing methods to create and read a token:
    String create(Request request, Token token);
    Optional read(Request request, String tokenId);
    void revoke(Request request, String tokenId);      
You can implement token revocation for session cookies by simply calling the session
.invalidate() method in Spark. This will remove the session token from the back-
end store and add a new Set-Cookie header on the response with an expiry time in the
past. This will cause the browser to immediately delete the existing cookie. Open
CookieTokenStore.java in your editor and add the new revoke method shown in list-
ing 4.17. Although it is less critical on a logout endpoint, you should enforce CSRF
defenses here too to prevent an attacker maliciously logging out your users to annoy
them. To do this, verify the SHA-256 anti-CSRF token just as you did in section 4.5.3.
@Override
public void revoke(Request request, String tokenId) {
    var session = request.session(false);
    if (session == null) return;
3 Removing a cookie can fail if the Path or Domain attributes do not exactly match, for example.
Listing 4.17
Revoking a session cookie
If you receive a 
401 response, 
then redirect to 
the login page.
New method to 
revoke a token
144
CHAPTER 4
Session cookie authentication
    var provided = Base64url.decode(tokenId);          
    var computed = sha256(session.id());               
    if (!MessageDigest.isEqual(computed, provided)) {  
        return;                                        
    }
    session.invalidate();    
}
You can now wire up a new logout endpoint. In keeping with our REST-like approach,
you can implement logout as a DELETE request to the /sessions endpoint. If clients
send a DELETE request to /sessions/xyz, where xyz is the token ID, then the token
may be leaked in either the browser history or in server logs. While this may not be a
problem for a logout endpoint because the token will be revoked anyway, you should
avoid exposing tokens directly in URLs like this. So, in this case, you’ll implement
logout as a DELETE request to the /sessions endpoint (with no token ID in the
URL) and the endpoint will retrieve the token ID from the X-CSRF-Token header
instead. While there are ways to make this more RESTful, we will keep it simple in this
chapter. Listing 4.18 shows the new logout endpoint that retrieves the token ID from
the X-CSRF-Token header and then calls the revoke endpoint on the TokenStore.
Open TokenController.java in your editor and add the new method.
public JSONObject logout(Request request, Response response) {
    var tokenId = request.headers("X-CSRF-Token");             
    if (tokenId == null)
        throw new IllegalArgumentException("missing token header");
    tokenStore.revoke(request, tokenId);       
    response.status(200);      
    return new JSONObject();   
}
Now open Main.java in your editor and add a mapping for the logout endpoint to be
called for DELETE requests to the session endpoint:
    post("/sessions", tokenController::login);
    delete("/sessions", tokenController::logout);    
Calling the logout endpoint with a genuine session cookie and CSRF token results in
the cookie being invalidated and subsequent requests with that cookie are rejected. In
this case, Spark doesn’t even bother to delete the cookie from the browser, relying
purely on server-side invalidation. Leaving the invalidated cookie on the browser is
harmless.
Listing 4.18
The logout endpoint
Verify the 
anti-CSRF token 
as before.
Invalidate the 
session cookie.
Get the token ID 
from the X-CSRF-
Token header.
Revoke the token.
Return a success 
response.
The new 
logout route
145
Summary
Answers to pop quiz questions
1
d. The protocol, hostname, and port must all exactly match. The path part of a
URI is ignored by the SOP. The default port for HTTP URIs is 80 and is 443 for
HTTPS.
2
e. To avoid session fixation attacks, you should invalidate any existing session
cookie after the user authenticates to ensure that a fresh session is created.
3
b. The HttpOnly attribute prevents cookies from being accessible to JavaScript.
4
a, c, e. Recall from section 4.5.1 that only the registerable domain is considered
for SameSite cookies—example.com in this case. The protocol, port, and path
are not significant.
5
c. An attacker may be able to overwrite the cookie with a predictable value
using XSS, or if they compromise a sub-domain of your site. Hash-based values
are not in themselves any less guessable than any other value, and timing attacks
can apply to any solution.
Summary
 HTTP Basic authentication is awkward for web browser clients and has a poor
user experience. You can use token-based authentication to provide a more nat-
ural login experience for these clients.
 For web-based clients served from the same site as your API, session cookies are
a simple and secure token-based authentication mechanism.
 Session fixation attacks occur if the session cookie doesn’t change when a user
authenticates. Make sure to always invalidate any existing session before logging
the user in.
 CSRF attacks can allow other sites to exploit session cookies to make requests to
your API without the user’s consent. Use SameSite cookies and the hash-based
double-submit cookie pattern to eliminate CSRF attacks.
146
Modern token-based
authentication
With the addition of session cookie support, the Natter UI has become a slicker
user experience, driving adoption of your platform. Marketing has bought a new
domain name, nat.tr, in a doomed bid to appeal to younger users. They are insist-
ing that logins should work across both the old and new domains, but your CSRF
protections prevent the session cookies being used on the new domain from talking
to the API on the old one. As the user base grows, you also want to expand to include
mobile and desktop apps. Though cookies work great for web browser clients, they
are less natural for native apps because the client typically must manage them itself.
You need to move beyond cookies and consider other ways to manage token-based
authentication.
 In this chapter, you’ll learn about alternatives to cookies using HTML 5 Web Stor-
age and the standard Bearer authentication scheme for token-based authentication.
This chapter covers
 Supporting cross-domain web clients with CORS 
 Storing tokens using the Web Storage API
 The standard Bearer HTTP authentication scheme 
for tokens
 Hardening database token storage
147
Allowing cross-domain requests with CORS
You’ll enable cross-origin resource sharing (CORS) to allow cross-domain requests from the
new site. 
DEFINITION
Cross-origin resource sharing (CORS) is a standard to allow some
cross-origin requests to be permitted by web browsers. It defines a set of headers
that an API can return to tell the browser which requests should be allowed.
Because you’ll no longer be using the built-in cookie storage in Spark, you’ll develop
secure token storage in the database and see how to apply modern cryptography to
protect tokens from a variety of threats. 
5.1
Allowing cross-domain requests with CORS
To help Marketing out with the new domain name, you agree to investigate how you
can let the new site communicate with the existing API. Because the new site has a dif-
ferent origin, the same-origin policy (SOP) you learned about in chapter 4 throws up
several problems for cookie-based authentication:
 Attempting to send a login request from the new site is blocked because the
JSON Content-Type header is disallowed by the SOP.
 Even if you could send the request, the browser will ignore any Set-Cookie
headers on a cross-origin response, so the session cookie will be discarded.
 You also cannot read the anti-CSRF token, so cannot make requests from the
new site even if the user is already logged in.
Moving to an alternative token storage mechanism solves only the second issue, but if
you want to allow cross-origin requests to your API from browser clients, you’ll need to
solve the others. The solution is the CORS standard, introduced in 2013 to allow the
SOP to be relaxed for some cross-origin requests.
 There are several ways to simulate cross-origin requests on your local development
environment, but the simplest is to just run a second copy of the Natter API and UI on
a different port. (Remember that an origin is the combination of protocol, host name, and
port, so a change to any of these will cause the browser to treat it as a separate origin.)
To allow this, open Main.java in your editor and add the following line to the top of
the method before you create any routes to allow Spark to use a different port:
   port(args.length > 0 ? Integer.parseInt(args[0]) 
                        : spark.Service.SPARK_DEFAULT_PORT);
You can now start a second copy of the Natter UI by running the following command:
mvn clean compile exec:java -Dexec.args=9999
If you now open your web browser and navigate to https:/ /localhost:9999/natter.html,
you’ll see the familiar Natter Create Space form. Because the port is different and
148
CHAPTER 5
Modern token-based authentication
Natter API requests violate the SOP, this will be treated as a separate origin by the
browser, so any attempt to create a space or login will be rejected, with a cryptic error
message in the JavaScript console about being blocked by CORS policy (figure 5.1).
You can fix this by adding CORS headers to the API responses to explicitly allow some
cross-origin requests.
5.1.1
Preflight requests
Before CORS, browsers blocked requests that violated the SOP. Now, the browser
makes a preflight request to ask the server of the target origin whether the request
should be allowed, as shown in figure 5.2. 
DEFINITION
A preflight request occurs when a browser would normally block
the request for violating the same-origin policy. The browser makes an HTTP
OPTIONS request to the server asking if the request should be allowed. The
server can either deny the request or else allow it with restrictions on the
allowed headers and methods.
The browser first makes an HTTP OPTIONS request to the target server. It includes
the origin of the script making the request as the value of the Origin header, along
with some headers indicating the HTTP method of the method that was requested
(Access-Control-Request-Method header) and any nonstandard headers that were in
the original request (Access-Control-Request-Headers).
 The server responds by sending back a response with headers to indicate which
cross-origin requests it considers acceptable. If the original request does not match
the server’s response, or the server does not send any CORS headers in the response,
then the browser blocks the request. If the original request is allowed, the API can also
set CORS headers in the response to that request to control how much of the
response is revealed to the client. An API might therefore agree to allow cross-origin
requests with nonstandard headers but prevent the client from reading the response.
Figure 5.1