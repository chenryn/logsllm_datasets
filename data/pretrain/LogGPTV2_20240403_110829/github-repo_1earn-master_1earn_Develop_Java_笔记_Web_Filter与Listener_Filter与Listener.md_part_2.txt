```
---
### 修改请求
Filter 可以对请求进行预处理，因此，我们可以把很多公共预处理逻辑放到 Filter 中完成。
考察这样一种需求：我们在 Web 应用中经常需要处理用户上传文件，例如，一个 UploadServlet 可以简单地编写如下：
```java
@WebServlet(urlPatterns = "/upload/file")
public class UploadServlet extends HttpServlet {
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 读取Request Body:
        InputStream input = req.getInputStream();
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        for (;;) {
            int len = input.read(buffer);
            if (len == -1) {
                break;
            }
            output.write(buffer, 0, len);
        }
        // TODO: 写入文件:
        // 显示上传结果:
        String uploadedText = output.toString(StandardCharsets.UTF_8);
        PrintWriter pw = resp.getWriter();
        pw.write("Uploaded:");
        pw.write("");
        pw.write(uploadedText);
        pw.write("");
        pw.flush();
    }
}
```
是要保证文件上传的完整性怎么办？如果在上传文件的同时，把文件的哈希也传过来，服务器端做一个验证，就可以确保用户上传的文件一定是完整的。
这个验证逻辑非常适合写在 ValidateUploadFilter 中，因为它可以复用。
我们先写一个简单的版本，快速实现ValidateUploadFilter的逻辑：
```java
@WebFilter("/upload/*")
public class ValidateUploadFilter implements Filter {
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse resp = (HttpServletResponse) response;
        // 获取客户端传入的签名方法和签名:
        String digest = req.getHeader("Signature-Method");
        String signature = req.getHeader("Signature");
        if (digest == null || digest.isEmpty() || signature == null || signature.isEmpty()) {
            sendErrorPage(resp, "Missing signature.");
            return;
        }
        // 读取Request的Body并验证签名:
        MessageDigest md = getMessageDigest(digest);
        InputStream input = new DigestInputStream(request.getInputStream(), md);
        byte[] buffer = new byte[1024];
        for (;;) {
            int len = input.read(buffer);
            if (len == -1) {
                break;
            }
        }
        String actual = toHexString(md.digest());
        if (!signature.equals(actual)) {
            sendErrorPage(resp, "Invalid signature.");
            return;
        }
        // 验证成功后继续处理:
        chain.doFilter(request, response);
    }
    // 将byte[]转换为hex string:
    private String toHexString(byte[] digest) {
        StringBuilder sb = new StringBuilder();
        for (byte b : digest) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
    // 根据名称创建MessageDigest:
    private MessageDigest getMessageDigest(String name) throws ServletException {
        try {
            return MessageDigest.getInstance(name);
        } catch (NoSuchAlgorithmException e) {
            throw new ServletException(e);
        }
    }
    // 发送一个错误响应:
    private void sendErrorPage(HttpServletResponse resp, String errorMessage) throws IOException {
        resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
        PrintWriter pw = resp.getWriter();
        pw.write("");
        pw.write(errorMessage);
        pw.write("");
        pw.flush();
    }
}
```
`ValidateUploadFilter` 对签名进行验证的逻辑是没有问题的，但是，`UploadServlet` 并未读取到任何数据！
这里的原因是对 `HttpServletRequest` 进行读取时，只能读取一次。如果 Filter 调用 `getInputStream()` 读取了一次数据，后续 Servlet 处理时，再次读取，将无法读到任何数据。怎么办？
这个时候，我们需要一个 “伪造” 的 `HttpServletRequest`，具体做法是使用代理模式，对 `getInputStream()` 和 `getReader()` 返回一个新的流：
```java
class ReReadableHttpServletRequest extends HttpServletRequestWrapper {
    private byte[] body;
    private boolean open = false;
    public ReReadableHttpServletRequest(HttpServletRequest request, byte[] body) {
        super(request);
        this.body = body;
    }
    // 返回InputStream:
    public ServletInputStream getInputStream() throws IOException {
        if (open) {
            throw new IllegalStateException("Cannot re-open input stream!");
        }
        open = true;
        return new ServletInputStream() {
            private int offset = 0;
            public boolean isFinished() {
                return offset >= body.length;
            }
            public boolean isReady() {
                return true;
            }
            public void setReadListener(ReadListener listener) {
            }
            public int read() throws IOException {
                if (offset >= body.length) {
                    return -1;
                }
                int n = body[offset] & 0xff;
                offset++;
                return n;
            }
        };
    }
    // 返回Reader:
    public BufferedReader getReader() throws IOException {
        if (open) {
            throw new IllegalStateException("Cannot re-open reader!");
        }
        open = true;
        return new BufferedReader(new InputStreamReader(new ByteArrayInputStream(body), "UTF-8"));
    }
}
```
注意观察 `ReReadableHttpServletRequest` 的构造方法，它保存了 `ValidateUploadFilter` 读取的 `byte[]` 内容，并在调用 `getInputStream()` 时通过 `byte[]` 构造了一个新的 ServletInputStream。
然后，我们在 `ValidateUploadFilter` 中，把 `doFilter()` 调用时传给下一个处理者的 `HttpServletRequest` 替换为我们自己 “伪造” 的 `ReReadableHttpServletRequest`：
```java
public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
        throws IOException, ServletException {
    ...
    chain.doFilter(new ReReadableHttpServletRequest(req, output.toByteArray()), response);
}
```
再注意到我们编写 ReReadableHttpServletRequest 时，是从 HttpServletRequestWrapper 继承，而不是直接实现 HttpServletRequest 接口。这是因为，Servlet 的每个新版本都会对接口增加一些新方法，从 HttpServletRequestWrapper 继承可以确保新方法被正确地覆写了，因为 HttpServletRequestWrapper 是由 Servlet 的 jar 包提供的，目的就是为了让我们方便地实现对 HttpServletRequest 接口的代理。
我们总结一下对 `HttpServletRequest` 接口进行代理的步骤：
1. 从 `HttpServletRequestWrapper` 继承一个 `XxxHttpServletRequest`，需要传入原始的 `HttpServletRequest` 实例；
2. 覆写某些方法，使得新的 `XxxHttpServletRequest` 实例看上去 “改变” 了原始的 `HttpServletRequest` 实例；
3. 在 `doFilter()` 中传入新的 `XxxHttpServletRequest` 实例。
虽然整个 Filter 的代码比较复杂，但它的好处在于：这个 Filter 在整个处理链中实现了灵活的 “可插拔” 特性，即是否启用对 Web 应用程序的其他组件（Filter、Servlet）完全没有影响。
### 修改响应
既然我们能通过 `Filter` 修改 `HttpServletRequest`，自然也能修改 HttpServletResponse，因为这两者都是接口。
我们来看一下在什么情况下我们需要修改 HttpServletResponse。
假设我们编写了一个 Servlet，但由于业务逻辑比较复杂，处理该请求需要耗费很长的时间：
```java
@WebServlet(urlPatterns = "/slow/hello")
public class HelloServlet extends HttpServlet {
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setContentType("text/html");
        // 模拟耗时1秒:
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }
        PrintWriter pw = resp.getWriter();
        pw.write("Hello, world!");
        pw.flush();
    }
}
```
好消息是每次返回的响应内容是固定的，因此，如果我们能使用缓存将结果缓存起来，就可以大大提高 Web 应用程序的运行效率。
缓存逻辑最好不要在 Servlet 内部实现，因为我们希望能复用缓存逻辑，所以，编写一个 CacheFilter 最合适：
```java
@WebFilter("/slow/*")
public class CacheFilter implements Filter {
    // Path到byte[]的缓存:
    private Map cache = new ConcurrentHashMap<>();
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse resp = (HttpServletResponse) response;
        // 获取Path:
        String url = req.getRequestURI();
        // 获取缓存内容:
        byte[] data = this.cache.get(url);
        resp.setHeader("X-Cache-Hit", data == null ? "No" : "Yes");
        if (data == null) {
            // 缓存未找到,构造一个伪造的Response:
            CachedHttpServletResponse wrapper = new CachedHttpServletResponse(resp);
            // 让下游组件写入数据到伪造的Response:
            chain.doFilter(request, wrapper);
            // 从伪造的Response中读取写入的内容并放入缓存:
            data = wrapper.getContent();
            cache.put(url, data);
        }
        // 写入到原始的Response:
        ServletOutputStream output = resp.getOutputStream();
        output.write(data);
        output.flush();
    }
}
```
实现缓存的关键在于，调用 `doFilter()` 时，我们不能传入原始的 `HttpServletResponse`，因为这样就会写入 Socket，我们也就无法获取下游组件写入的内容。如果我们传入的是 “伪造” 的 `HttpServletResponse`，让下游组件写入到我们预设的 `ByteArrayOutputStream`，我们就 “截获” 了下游组件写入的内容，于是，就可以把内容缓存起来，再通过原始的 `HttpServletResponse` 实例写入到网络。
这个 `CachedHttpServletResponse` 实现如下：
```java
class CachedHttpServletResponse extends HttpServletResponseWrapper {
    private boolean open = false;
    private ByteArrayOutputStream output = new ByteArrayOutputStream();
    public CachedHttpServletResponse(HttpServletResponse response) {
        super(response);
    }
    // 获取Writer:
    public PrintWriter getWriter() throws IOException {
        if (open) {
            throw new IllegalStateException("Cannot re-open writer!");
        }
        open = true;
        return new PrintWriter(output, false, StandardCharsets.UTF_8);
    }
    // 获取OutputStream:
    public ServletOutputStream getOutputStream() throws IOException {
        if (open) {
            throw new IllegalStateException("Cannot re-open output stream!");
        }
        open = true;
        return new ServletOutputStream() {
            public boolean isReady() {
                return true;
            }
            public void setWriteListener(WriteListener listener) {
            }
            // 实际写入ByteArrayOutputStream:
            public void write(int b) throws IOException {
                output.write(b);
            }
        };
    }
    // 返回写入的byte[]:
    public byte[] getContent() {
        return output.toByteArray();
    }
}
```
可见，如果我们想要修改响应，就可以通过 `HttpServletResponseWrapper` 构造一个 “伪造” 的 `HttpServletResponse`，这样就能拦截到写入的数据。
修改响应时，最后不要忘记把数据写入原始的 `HttpServletResponse` 实例。
这个 `CacheFilter` 同样是一个 “可插拔” 组件，它是否启用不影响 Web 应用程序的其他组件（Filter、Servlet）。
---
## Listener 监听器
除了 Servlet 和 Filter 外，JavaEE 的 Servlet 规范还提供了第三种组件：Listener。
事件监听机制：
* 事件	：一件事情
* 事件源 ：事件发生的地方
* 监听器 ：一个对象
* 注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码
Listener 顾名思义就是监听器，有好几种 Listener，其中最常用的是 `ServletContextListener`，我们编写一个实现了 `ServletContextListener` 接口的类如下：
```java
@WebListener
public class AppListener implements ServletContextListener {
    // 在此初始化WebApp,例如打开数据库连接池等:
    public void contextInitialized(ServletContextEvent sce) {
        System.out.println("WebApp initialized.");
    }
    // 在此清理WebApp,例如关闭数据库连接池等:
    public void contextDestroyed(ServletContextEvent sce) {
        System.out.println("WebApp destroyed.");
    }
}
```
任何标注为 `@WebListener`，且实现了特定接口的类会被 Web 服务器自动初始化。上述 `AppListener` 实现了 `ServletContextListener` 接口，它会在整个 Web 应用程序初始化完成后，以及 Web 应用程序关闭后获得回调通知。我们可以把初始化数据库连接池等工作放到 `contextInitialized()` 回调方法中，把清理资源的工作放到 `contextDestroyed()` 回调方法中，因为 Web 服务器保证在 `contextInitialized()` 执行后，才会接受用户的 HTTP 请求。
很多第三方 Web 框架都会通过一个 `ServletContextListener` 接口初始化自己。
除了 `ServletContextListener` 外，还有几种 Listener：
* HttpSessionListener：监听 HttpSession 的创建和销毁事件；
* ServletRequestListener：监听 ServletRequest 请求的创建和销毁事件；
* ServletRequestAttributeListener：监听 ServletRequest 请求的属性变化事件（即调用 `ServletRequest.setAttribute()` 方法）；
* ServletContextAttributeListener：监听 ServletContext 的属性变化事件（即调用 `ServletContext.setAttribute()` 方法）；
### ServletContext
一个 Web 服务器可以运行一个或多个 WebApp，对于每个 WebApp，Web 服务器都会为其创建一个全局唯一的 `ServletContext` 实例，我们在 `AppListener` 里面编写的两个回调方法实际上对应的就是 `ServletContext` 实例的创建和销毁：
```java
public void contextInitialized(ServletContextEvent sce) {
    System.out.println("WebApp initialized: ServletContext = " + sce.getServletContext());
}
```
`ServletRequest`、`HttpSession` 等很多对象也提供 `getServletContext()` 方法获取到同一个 `ServletContext` 实例。`ServletContext` 实例最大的作用就是设置和共享全局信息。
此外，`ServletContext` 还提供了动态添加 Servlet、Filter、Listener 等功能，它允许应用程序在运行期间动态添加一个组件，虽然这个功能不是很常用。
---
## Source & Reference
- https://www.cnblogs.com/nice0e3/p/13551701.html
- https://www.liaoxuefeng.com/wiki/1252599548343744/1266264823560128