        printf(" is greater than  (%d)\en", res);
    }
    exit(exit_success);
}
.ee
.sh see also
.br bcmp (3),
.br memcmp (3),
.br strcasecmp (3),
.br strcoll (3),
.br string (3),
.br strncasecmp (3),
.br strverscmp (3),
.br wcscmp (3),
.br wcsncmp (3),
.br ascii (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/strcmp.3
.so man3/xdr.3
.\" copyright (c) 2009, linux foundation, written by michael kerrisk
.\"     
.\" a few pieces remain from an earlier version
.\" copyright (c) 2008, nanno langstraat 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th endian 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
htobe16, htole16, be16toh, le16toh, htobe32, htole32, be32toh, le32toh,
htobe64, htole64, be64toh, le64toh \-
convert values between host and big-/little-endian byte order
.sh synopsis
.nf
.b #include 
.pp
.bi "uint16_t htobe16(uint16_t " host_16bits );
.bi "uint16_t htole16(uint16_t " host_16bits );
.bi "uint16_t be16toh(uint16_t " big_endian_16bits );
.bi "uint16_t le16toh(uint16_t " little_endian_16bits );
.pp
.bi "uint32_t htobe32(uint32_t " host_32bits );
.bi "uint32_t htole32(uint32_t " host_32bits );
.bi "uint32_t be32toh(uint32_t " big_endian_32bits );
.bi "uint32_t le32toh(uint32_t " little_endian_32bits );
.pp
.bi "uint64_t htobe64(uint64_t " host_64bits );
.bi "uint64_t htole64(uint64_t " host_64bits );
.bi "uint64_t be64toh(uint64_t " big_endian_64bits );
.bi "uint64_t le64toh(uint64_t " little_endian_64bits );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.ad l
.pp
.br htobe16 (),
.br htole16 (),
.br be16toh (),
.br le16toh (),
.br htobe32 (),
.br htole32 (),
.br be32toh (),
.br le32toh (),
.br htobe64 (),
.br htole64 (),
.br be64toh (),
.br le64toh ():
.nf
    since glibc 2.19:
        _default_source
    in glibc up to and including 2.19:
        _bsd_source
.fi
.ad
.sh description
these functions convert the byte encoding of integer values from
the byte order that the current cpu (the "host") uses,
to and from little-endian and big-endian byte order.
.pp
the number,
.ir nn ,
in the name of each function indicates the size of
integer handled by the function, either 16, 32, or 64 bits.
.pp
the functions with names of the form "htobe\finn\fp" convert
from host byte order to big-endian order.
.pp
the functions with names of the form "htole\finn\fp" convert
from host byte order to little-endian order.
.pp
the functions with names of the form "be\finn\fptoh" convert
from big-endian order to host byte order.
.pp
the functions with names of the form "le\finn\fptoh" convert
from little-endian order to host byte order.
.sh versions
these functions were added to glibc in version 2.9.
.sh conforming to
these functions are nonstandard.
similar functions are present on the bsds,
where the required header file is
.i 
instead of
.ir  .
unfortunately,
netbsd, freebsd, and glibc haven't followed the original
openbsd naming convention for these functions,
whereby the
.i nn
component always appears at the end of the function name
(thus, for example, in netbsd, freebsd, and glibc,
the equivalent of openbsds "betoh32" is "be32toh").
.sh notes
these functions are similar to the older
.br byteorder (3)
family of functions.
for example,
.br be32toh ()
is identical to
.br ntohl ().
.pp
the advantage of the
.br byteorder (3)
functions is that they are standard functions available
on all unix systems.
on the other hand, the fact that they were designed
for use in the context of tcp/ip means that
they lack the 64-bit and little-endian variants described in this page.
.sh examples
the program below display the results of converting an integer
from host byte order to both little-endian and big-endian byte order.
since host byte order is either little-endian or big-endian,
only one of these conversions will have an effect.
when we run this program on a little-endian system such as x86-32,
we see the following:
.pp
.in +4n
.ex
$ \fb./a.out\fp
x.u32 = 0x44332211
htole32(x.u32) = 0x44332211
htobe32(x.u32) = 0x11223344
.ee
.in
.ss program source
\&
.ex
#include 
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    union {
        uint32_t u32;
        uint8_t arr[4];
    } x;
    x.arr[0] = 0x11;	/* lowest\-address byte */
    x.arr[1] = 0x22;
    x.arr[2] = 0x33;
    x.arr[3] = 0x44;	/* highest\-address byte */
    printf("x.u32 = %#x\en", x.u32);
    printf("htole32(x.u32) = %#x\en", htole32(x.u32));
    printf("htobe32(x.u32) = %#x\en", htobe32(x.u32));
    exit(exit_success);
}
.ee
.sh see also
.br bswap (3),
.br byteorder (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 2004 andries brouwer .
.\" and copyright (c) 2020 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th lseek64 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
lseek64 \- reposition 64-bit read/write file offset
.sh synopsis
.nf
.br "#define _largefile64_source" "     /* see feature_test_macros(7) */"
.b #include 
.b #include 
.pp
.bi "off64_t lseek64(int " fd ", off64_t " offset ", int " whence );
.fi
.sh description
the
.br lseek ()
family of functions reposition the offset of the open file associated
with the file descriptor
.i fd
to
.i offset
bytes relative to the start, current position, or end of the file,
when
.i whence
has the value
.br seek_set ,
.br seek_cur ,
or
.br seek_end ,
respectively.
.pp
for more details, return value, and errors, see
.br lseek (2).
.pp
four interfaces are available:
.br lseek (),
.br lseek64 (),
.br llseek (),
and
.br _llseek ().
.\"
.\" for some background details, see:
.\" https://lore.kernel.org/linux-man/PI:EMAIL/
.\"
.ss lseek()
prototype:
.pp
.in +4n
.ex
.bi "off_t lseek(int " fd ", off_t " offset ", int " whence );
.ee
.in
.pp
the c library's
.br lseek ()
wrapper function uses the type
.ir off_t .
this is a 32-bit signed type on 32-bit architectures, unless one
compiles with
.pp
.in +4n
.ex
#define _file_offset_bits 64
.ee
.in
.pp
in which case it is a 64-bit signed type.
.ss lseek64()
prototype:
.pp
.in +4n
.ex
.bi "off64_t lseek64(int " fd ", off64_t " offset ", int " whence );
.ee
.in
.pp
the
.br lseek64 ()
library function uses a 64-bit type even when
.i off_t
is a 32-bit type.
its prototype (and the type
.ir off64_t )
is available only when one compiles with
.pp
.in +4n
.ex
#define _largefile64_source
.ee
.in
.pp
the function
.br lseek64 ()
.\" in glibc 2.0.94, not in 2.0.6
is available since glibc 2.1.
.\"
.ss llseek()
prototype:
.pp
.in +4n
.ex
.bi "loff_t llseek(int " fd ", loff_t " offset ", int " whence );
.ee
.in
.pp
the type
.i loff_t
is a 64-bit signed type.
the
.br llseek ()
library function is available in glibc and works without special defines.
however, the glibc headers do not provide a prototype.
users should add
the above prototype, or something equivalent, to their own source.
when users complained about data loss caused by a miscompilation of
.br e2fsck (8),
glibc 2.1.3 added the link-time warning
.pp
.in +4n
"the \`llseek\' function may be dangerous; use \`lseek64\' instead."
.in
.pp
this makes this function unusable if one desires a warning-free
compilation.
.pp
since glibc 2.28,
.\" glibc commit 5c5c0dd747070db624c8e2c43691cec854f114ef
this function symbol is no longer available to newly linked applications.
.\"
.ss _llseek()
on 32-bit architectures,
this is the system call that is used (by the c library wrapper functions)
to implement all of the above functions.
the prototype is:
.pp
.in +4n
.ex
.bi "int _llseek(int " fd ", off_t " offset_hi ", off_t " offset_lo ,
.bi "            loff_t *" result ", int " whence );
.ee
.in
.pp
for more details, see
.br llseek (2).
.pp
64-bit systems don't need an
.br _llseek ()
system call.
instead, they have an
.br lseek (2)
system call that supports 64-bit file offsets.
.\" in arch/x86/entry/syscalls/syscall_32.tbl,
.\" we see the following line:
.\"
.\"    140     i386    _llseek                 sys_llseek
.\"
.\" this is essentially telling us that 'sys_llseek' (the name generated
.\" by syscall_define5(llseek...)) is exposed to user-space as system call
.\" number 140, and that system call number will (iiuc) be exposed in
.\" autogenerated headers with the name "__nr__llseek" (i.e., "_llseek").
.\" the "i386" is telling us that this happens in i386 (32-bit intel).
.\" there is nothing equivalent on x86-64, because 64 bit systems don't
.\" need an _llseek system call.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br lseek64 ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh notes
.br lseek64 ()
is one of the functions that was specified in the large file summit (lfs)
specification that was completed in 1996.
the purpose of the specification was to provide transitional support
that allowed applications on 32-bit systems to access
files whose size exceeds that which can be represented with a 32-bit
.ir off_t
type.
as noted above, this symbol is exposed by header files if the
.b _largefile64_source
feature test macro is defined.
alternatively, on a 32-bit system, the symbol
.i lseek
is aliased to
.i lseek64
if the macro
.b _file_offset_bits
is defined with the value 64.
.sh see also
.br llseek (2),
.br lseek (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2012 yoshifuji hideaki 
.\" and copyright (c) 2012 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume
.\" no responsibility for errors or omissions, or for damages resulting
.\" from the use of the information contained herein.  the author(s) may
.\" not have taken the same level of care in the production of this
.\" manual, which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th if_nameindex 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
if_nameindex, if_freenameindex \- get network interface names and indexes
.sh synopsis
.nf
.b #include 
.pp
.bi "struct if_nameindex *if_nameindex(" void );
.bi "void if_freenameindex(struct if_nameindex *" "ptr" );
.fi
.sh description
the
.br if_nameindex ()
function returns an array of
.i if_nameindex
structures, each containing information
about one of the network interfaces on the local system.
the
.i if_nameindex
structure contains at least the following entries:
.pp
.in +4n
.ex
unsigned int if_index; /* index of interface (1, 2, ...) */
char        *if_name;  /* null\-terminated name ("eth0", etc.) */
.ee
.in
.pp
the
.i if_index
field contains the interface index.
the
.i if_name
field points to the null-terminated interface name.
the end of the array is indicated by entry with
.i if_index
set to zero and
.i if_name
set to null.
.pp
the data structure returned by
.br if_nameindex ()
is dynamically allocated and should be freed using
.br if_freenameindex ()
when no longer needed.
.sh return value
on success,
.br if_nameindex ()
returns pointer to the array;
on error, null is returned, and
.i errno
is set to indicate the error.
.sh errors
.br if_nameindex ()
may fail and set
.i errno
if:
.tp
.b enobufs
insufficient resources available.
.pp
.br if_nameindex ()
may also fail for any of the errors specified for
.br socket (2),
.br bind (2),
.br ioctl (2),
.br getsockname (2),
.br recvmsg (2),
.br sendto (2),
or
.br malloc (3).
.sh versions
the
.br if_nameindex ()
function first appeared in glibc 2.1, but before glibc 2.3.4,
the implementation supported only interfaces with ipv4 addresses.