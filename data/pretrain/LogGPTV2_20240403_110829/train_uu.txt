### 代码片段优化
```c
printf("%d is greater than the expected value\n", res);
exit(EXIT_SUCCESS);
```

### 文档结构与内容优化

#### SEE ALSO
- `bcmp(3)`
- `memcmp(3)`
- `strcasecmp(3)`
- `strcoll(3)`
- `string(3)`
- `strncasecmp(3)`
- `strverscmp(3)`
- `wcscmp(3)`
- `wcsncmp(3)`
- `ascii(7)`

#### COLOPHON
This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at:
```
https://www.kernel.org/doc/man-pages/
```

#### COPYRIGHT AND LICENSE
- Copyright (c) 2009, Linux Foundation, written by Michael Kerrisk.
- Some parts remain from an earlier version, copyright (c) 2008, Nanno Langstraat.

**License:**
Permission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies. Permission is also granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.

Since the Linux kernel and libraries are constantly changing, this manual page may be incorrect or out-of-date. The author(s) assume no responsibility for errors or omissions, or for damages resulting from the use of the information contained herein. The author(s) may not have taken the same level of care in the production of this manual, which is licensed free of charge, as they might when working professionally.

Formatted or processed versions of this manual, if unaccompanied by the source, must acknowledge the copyright and authors of this work.

#### NAME
`htobe16`, `htole16`, `be16toh`, `le16toh`, `htobe32`, `htole32`, `be32toh`, `le32toh`, `htobe64`, `htole64`, `be64toh`, `le64toh` - Convert values between host and big-/little-endian byte order

#### SYNOPSIS
```c
#include <endian.h>

uint16_t htobe16(uint16_t host_16bits);
uint16_t htole16(uint16_t host_16bits);
uint16_t be16toh(uint16_t big_endian_16bits);
uint16_t le16toh(uint16_t little_endian_16bits);

uint32_t htobe32(uint32_t host_32bits);
uint32_t htole32(uint32_t host_32bits);
uint32_t be32toh(uint32_t big_endian_32bits);
uint32_t le32toh(uint32_t little_endian_32bits);

uint64_t htobe64(uint64_t host_64bits);
uint64_t htole64(uint64_t host_64bits);
uint64_t be64toh(uint64_t big_endian_64bits);
uint64_t le64toh(uint64_t little_endian_64bits);
```

#### FEATURE TEST MACROS
For glibc (see `feature_test_macros(7)`):
- Since glibc 2.19: `_DEFAULT_SOURCE`
- Up to and including glibc 2.19: `_BSD_SOURCE`

#### DESCRIPTION
These functions convert the byte encoding of integer values from the byte order that the current CPU (the "host") uses, to and from little-endian and big-endian byte order.

- `htobe*` functions convert from host byte order to big-endian order.
- `htole*` functions convert from host byte order to little-endian order.
- `be*toh` functions convert from big-endian order to host byte order.
- `le*toh` functions convert from little-endian order to host byte order.

The number `nn` in the function name indicates the size of the integer handled by the function (16, 32, or 64 bits).

#### VERSIONS
These functions were added to glibc in version 2.9.

#### CONFORMING TO
These functions are nonstandard. Similar functions are present on the BSDs, where the required header file is `<sys/endian.h>` instead of `<endian.h>`. Unfortunately, NetBSD, FreeBSD, and glibc have not followed the original OpenBSD naming convention for these functions, whereby the `nn` component always appears at the end of the function name.

#### NOTES
These functions are similar to the older `byteorder(3)` family of functions. For example, `be32toh()` is identical to `ntohl()`. The advantage of the `byteorder(3)` functions is that they are standard functions available on all Unix systems. However, they lack the 64-bit and little-endian variants described here.

#### EXAMPLES
The program below demonstrates converting an integer from host byte order to both little-endian and big-endian byte order. Since host byte order is either little-endian or big-endian, only one of these conversions will have an effect.

```c
#include <stdio.h>
#include <stdint.h>
#include <endian.h>

int main(int argc, char *argv[]) {
    union {
        uint32_t u32;
        uint8_t arr[4];
    } x;

    x.arr[0] = 0x11; // Lowest-address byte
    x.arr[1] = 0x22;
    x.arr[2] = 0x33;
    x.arr[3] = 0x44; // Highest-address byte

    printf("x.u32 = %#x\n", x.u32);
    printf("htole32(x.u32) = %#x\n", htole32(x.u32));
    printf("htobe32(x.u32) = %#x\n", htobe32(x.u32));

    return EXIT_SUCCESS;
}
```

When run on a little-endian system such as x86-32, the output is:
```
x.u32 = 0x44332211
htole32(x.u32) = 0x44332211
htobe32(x.u32) = 0x11223344
```

#### SEE ALSO
- `bswap(3)`
- `byteorder(3)`

#### COLOPHON
This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at:
```
https://www.kernel.org/doc/man-pages/
```

- Copyright 2004 Andries Brouwer.
- Copyright (c) 2020 Michael Kerrisk.

#### LICENSE
Permission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies. Permission is also granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.

Since the Linux kernel and libraries are constantly changing, this manual page may be incorrect or out-of-date. The author(s) assume no responsibility for errors or omissions, or for damages resulting from the use of the information contained herein. The author(s) may not have taken the same level of care in the production of this manual, which is licensed free of charge, as they might when working professionally.

Formatted or processed versions of this manual, if unaccompanied by the source, must acknowledge the copyright and authors of this work.