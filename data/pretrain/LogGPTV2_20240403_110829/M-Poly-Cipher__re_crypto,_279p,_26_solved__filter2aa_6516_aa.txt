# M-Poly-Cipher (re/crypto, 279p, 26 solved)
In the challenge we get [a binary](cipher) to reverse.
We also get a [public key](public.key) and [encrypted flag](flag.enc).
After hours of blood, sweat and tears we finally reach a [working python implementation](code.py).
The key part is:
```python
def encrypt(pt_file: str, pk_file: str, result_file: str) -> None:
    with open(pt_file, 'rb') as ctf:
        pt = ctf.read()
        pt = (pt + b'\x00' * (0x40 - len(pt)))[:0x40]
        pt = deserialise_vectors8(pt)
    with open(pk_file, 'rb') as pkf:
        pk = pkf.read()
        pk0 = parse_vectors(pk[0:256])
        pk1 = parse_vectors(pk[256:512])
        pk2 = parse_vectors(pk[512:768])
    seed = get_random_vectors()
    stage0 = matrix_mult(seed, pk0)
    stage1 = matrix_mult(seed, pk1)
    stage2 = matrix_mult(seed, pk2)
    combined = add_rows(stage2, pt)
    result = b''
    result += serialise_vectors32(stage0)
    result += serialise_vectors32(stage1)
    result += serialise_vectors32(combined)
    with open(result_file, 'wb') as outf:
        outf.write(result)
```
This shows what is the relation between public key we have and the encrypted output.
We didn't even try to understand the private key generation, we decided it will be far easier to simply reverse the encryption process.
It's quite clear that we need to invert `add_rows` operation on third output chunk, and this would give us plaintext.
In order to do that we need the `seed` vector.
We don't know it, however we know the `stage0` and `stage1` vectors.
And those are created from some matrix multiplication based on `pk0` and `pk2`, which we know!
So the idea is to invert the `matrix_mult` operation to recover the `seed`, and then use seed to invert `add_rows`.
What we got as matrix_mult is:
```python
def matrix_mult(data: List[int], key: List[int]) -> List[int]:
    result = []
    for j in range(8):
        for i in range(8):
            val = 0
            for k in range(8):
                val = (val + (data[j * 8 + k] * key[k * 8 + i])) % 0xFFFFFFFB
            result.append(val)
    return result
```
Which is not very readable, so we asked sage to show us the actual matrix:
```python
def matrix_mult(data, key):
    result = []
    for j in range(8):
        for i in range(8):
            val = 0
            for k in range(8):
                val = (val + (data[j * 8 + k] * key[k * 8 + i]))
            result.append(val)
    return result
seed_sym = [var('s' + str(i)) for i in range(64)]
pk_sym = [var('pk' + str(i)) for i in range(64)]