i=2, π(argmax
i
ai))
where coins is the random tape for encryptions. To simulate A’s real view, the simulator SA does the following on input
((cid:74)a1(cid:75), . . . ,(cid:74)ak(cid:75), l, PKQR, PKP , argmaxi ai):
1. Picks a random permutation ˜π of {1, . . . , k}
2. Picks k − 1 random integers ˜r2, . . . , ˜rk in (0, 2)l+λ ∩ Z
3. Picks k − 1 random integers ˜s2, . . . , ˜sk in (0, 2)l+λ ∩ Z
4. Generates k − 1 random Paillier encryptions(cid:74)˜v2(cid:75), . . . ,(cid:74)˜vk(cid:75).
5. Generates k − 1 random bits ˜bi
6. Generate a random tape for 2(k − 1) Paillier encryptions (cid:93)coins
7. Outputs
({(cid:74)ai(cid:75)}k
˜π,{˜ri}k
{(cid:74)˜vi(cid:75)}k
i
We deﬁne the following hybrids:
i=1, l, PKQR, PKP ;
i=2, (cid:93)coins;
i=2,{˜si}k
i=2,{(cid:74) ˜bi(cid:75)}k
i=2, ˜π(argmax
• H0 = VA((cid:74)a1(cid:75), . . . ,(cid:74)ak(cid:75), l, SKQR, PKQR, SKP , PKP )
• H1 = ({(cid:74)ai(cid:75)}k
{(cid:74)˜vi(cid:75)}k
i=2,{(cid:74) ˜bi(cid:75)}k
i=2,{si}k
π,{ri}k
• H2 = ({(cid:74)ai(cid:75)}k
{(cid:74)˜vi(cid:75)}k
i=2,{(cid:74) ˜bi(cid:75)}k
i=2,{˜si}k
π,{˜ri}k
• H3 = SA((cid:74)a1(cid:75), . . . ,(cid:74)ak(cid:75), l, PKQR, PKP , argmaxi ai)
i=2, coins;
i=2, π(argmaxi ai))
i=1, l, PKQR, PKP ;
i=2, (cid:93)coins;
i=2, π(argmaxi ai))
i=1, l, PKQR, PKP ;
ai))
30
By semantic security of Paillier’s cryptosystem,
({(cid:74)ai(cid:75)}k
i=2,{si}k
i=2;
i=2, π(argmax
i=1, l,PKQR, PKP ; π,{ri}k
i=2,{(cid:74)bi(cid:75)}k
({(cid:74)ai(cid:75)}k
{(cid:74)˜vi(cid:75)}k
{(cid:74)vi(cid:75)}k
i=1, l,PKQR, PKP ; π,{ri}k
i=2,{(cid:74) ˜bi(cid:75)}k
ai))
i=2,{si}k
i=2π(argmax
i
i
i=2;
ai))
≡c
and H0 ≡c H1 as π(argmaxi ai) = i0
Given that the ˜ri, ˜si and (cid:93)coins are generated according to the same distribution as ri, si (uniform over (0, 2)l+λ ∩ Z)
and coins (random tape for 2(k − 1) Paillier encryptions), and that they are completely independent from the ˜vi or π,
the hybrids H1 and H2 are equal.
Similarly, the distribution of (π, π(argmaxi ai)) and
(˜π, ˜π(argmaxi ai)) are exactly the same. As π and ˜π are independent from the other parameters, we also have H2 = H3.
Hence, we showed that
VA({(cid:74)ai(cid:75)}k
≡c SA({(cid:74)ai(cid:75)}k
i=1, l, SKQR, PKQR, SKP , PKP )
i=1, l, PKQR, PKP , argmax
ai).
i
B’s view is
VB = (SKP , SKQR, l; coins;{bi}k
i=2,{(cid:74)m
(cid:48)
i=2,{(cid:74)a
i(cid:75)}k
i(cid:75)}k
(cid:48)
i=2)
where coins are the random coins for k − 1 Paillier cyphertext refresh. The simulator SB(SKP , SKQR, l) runs as
follows:
2. Set(cid:74)˜ai(cid:75) =(cid:74)i(cid:75)
1. Generates a random permutation ˜π of {1, . . . , k}
3. Run the protocol with the(cid:74)˜ai(cid:75) as input data, ˜π as the permutation, and same parameters otherwise. Let
i(cid:75)}k
i=2,{(cid:74) ˜m(cid:48)
i=2,{(cid:74)˜a(cid:48)
i(cid:75)}k
(SKP , SKQR, l; (cid:93)coins;{bi}k
(SKP , SKQR, l; (cid:93)coins;{bi}k
i=2,{(cid:74)˜a
i(cid:75)}k
i=2,{(cid:74) ˜m
i(cid:75)}k
i=2) be B’s view of this run.
4. Outputs
i=1, l, SKQR, PKQR, SKP , PKP )
i=1, l, SKQR, PKQR, SKP , PKP )
Let us ﬁx the permutation π for a while and deﬁne the following hybrids:
Let p : {ai}1≤i≤k (cid:55)→ {1, . . . , k} be the function that associates ai to its rank among the ai (in ascendent order).
0. H0 = VB({(cid:74)ai(cid:75)}k
1. H1 = VB({(cid:74)p(a1)(cid:75)}k
We will show that these hybrids are statistically equal for every permutation π.
As p(.) is a map that does not change the order of the ai, we have that for all i, j, ai ≤ aj ⇔ p(ai) ≤ p(aj). As
a consequence, for a given permutation π, the bits bi do not change if we replace the ai by p(ai). Similarly, the way
the a(cid:48)
i and m(cid:48)
i are generated for H0 and H1 is the same: blinding by adding random noise from (0, 2λ+l ∩ Z). Thus,
H0 ≡s H1.
Now, we want to show that H1 ≡s SB(SKP , SKQR, l) - we do not ﬁx π anymore. Let π0 be the permutation such
that p(ai) = π0(i). We can then rewrite H1 as
i=2)
(cid:48)
(cid:48)
H1 = VB((cid:74)π0(1)(cid:75), . . . ,(cid:74)π0(k)(cid:75), l, SKQR, PKQR, SKP , PKP )
As ˜π and π ◦ π0 are statistically indistinguishable, we have H1 ≡s SB(SKP , SKQR, l): recall that SB’s output is the
view of B when the protocol is run with the set {ai = i} as input set and ˜π as the permutation. Hence
VB((cid:74)a1(cid:75), . . . ,(cid:74)ak(cid:75), l, SKQR, PKQR, SKP , PKP )
≡s SB(SKP , SKQR, l)
31
We conclude the proof of security using modular sequential composition. We replace the ideal calls for computing
the encrypted bits bi by the provable secure Protocol 8 and invoke Theorem B.2 to prove security in the semi-honest
model.
C.2 Changing the encryption scheme
Proof of Proposition 4.2. In this protocol the computed function is probabilistic, and we have to show security according
to the full deﬁnition (cf. section B.1). The function is f:
f ((cid:74)c(cid:75)1, PK1, PK2, SK1, SK2) = ((cid:74)c(cid:75)2,∅)
For the sake of simplicity, we do not take into account the randomness used for the encryptions of r for A and c(cid:48) for B.
As before, the distribution of these coins for one party is completely independent of the other elements to be taken in
A’s view is VA = (PK1, PK2,(cid:74)c(cid:75)1; r;(cid:74)c(cid:48)(cid:75)2). A’s output is(cid:74)c(cid:75)2. The simulator SA(PK1, PK2,(cid:74)c(cid:75)1) runs as follows:
account in the simulations, so we just do not mention them in security proof.
1. Picks uniformly at random ˜r ← M and ˜c(cid:48)
2. Generates the encryption(cid:74)˜c(cid:48)(cid:75)2 of ˜c(cid:48) under E2.
← M.
3. Outputs (PK1, PK2,(cid:74)c(cid:75)1; ˜r;(cid:74)˜c(cid:48)(cid:75)2).
{(PK1, PK2,(cid:74)c(cid:75)1; ˜r;(cid:74)˜c
= {(PK1, PK2,(cid:74)c(cid:75)1; r;(cid:74)˜c
{(PK1, PK2,(cid:74)c(cid:75)1; r;(cid:74)˜c
≡c {(PK1, PK2,(cid:74)c(cid:75)1; r;(cid:74)c
(cid:48)(cid:75)2); f ((cid:74)c(cid:75)1, PK1, PK2, SK1, SK2)}
(cid:48)(cid:75)2); f ((cid:74)c(cid:75)1, PK1, PK2, SK1, SK2)}
(cid:48)(cid:75)2); f ((cid:74)c(cid:75)1, PK1, PK2, SK1, SK2)}
(cid:48)(cid:75)2);(cid:74)c(cid:75)2}
(c(cid:48) depends on r but does not appear in the previous distributions). By semantic security of scheme E2 we have that
r and ˜r are taken from the same distribution, independently from any other parameter, so
and so
{SA((cid:74)c(cid:75)1, PK1, PK2), f ((cid:74)c(cid:75)1, PK1, PK2, SK1, SK2)}
≡c {VA((cid:74)c(cid:75)1, PK1, PK2, SK1, SK2), Output((cid:74)c(cid:75)1, PK1, PK2, SK1, SK2)}
B’s view is VB = (SK1, SK2;(cid:74)c + r(cid:75)1). We build a simulator SB(SK1, SK2):
1. Picks a random ˜c ← M.
3. Outputs (SK1, SK2,(cid:74)˜c(cid:75)1).
2. Encrypt ˜c under E1.
Again, the distribution of ˜c and c + r are identical, so the real distribution {(SK1, SK2;(cid:74)c + r(cid:75)1);(cid:74)c(cid:75)2} and the
ideal distribution {(SK1, SK2;(cid:74)˜r(cid:75)1); f ((cid:74)c(cid:75)1, PK1, PK2, SK1, SK2)} are statistically indistinguishable.
C.3 Computing dot products
Proof of Proposition 4.3. As B does not receive any message, its view only consists in its input and its random tape
used for the encryptions. Hence the simulator SB simply generate random coins and
SB(y, SKP ) = (y, SKP ; coins) = VB(x, y, SKP , PKP ).
where rand are the random coins.
A’s view is VA = (x, PKP ; rA;(cid:74)y1(cid:75), . . . ,(cid:74)yn(cid:75)). On input (x, PKP ,(cid:74)v(cid:75)), the simulator SA does the following:
32
1. Generates n encryptions of 0 using Paillier: c1, . . . , cn.
2. Generates the random coins necessary for a Paillier re-randomization and put them in (cid:93)coins.
3. Outputs (x, PKP ; (cid:93)coins; c1, . . . , cn).
coins and (cid:93)coins come from the same distribution, independently from other parameters. Thus,
{(x, PKP ; (cid:93)coins; c1, . . . , cn);(cid:74)(cid:104)x, y(cid:105)(cid:75)}
= {(x, PKP ; coins; c1, . . . , cn);(cid:74)(cid:104)x, y(cid:105)(cid:75)}
{(x, PKP ; coins; c1, . . . , cn);(cid:74)(cid:104)x, y(cid:105)(cid:75)}
≡c {(x, PKP ; coins;(cid:74)y1(cid:75), . . . ,(cid:74)yn(cid:75));(cid:74)v(cid:75)}
and by semantic security of Paillier,
i.e., when f is f (x, y, SKP , PKP ) = ((cid:74)(cid:104)x, y(cid:105)(cid:75),∅)
{SA(x, PKP ,(cid:74)v(cid:75)); f (x, y, SKP , PKP )}
≡c {VA(x, y, SKP , PKP ); Output(x, y, SKP , PKP )}
C.4 Classiﬁers
Hyperplane decision
Proof of Proposition 5.1. The client’s view is
VC = (PKP , PKQR, x;{(cid:74)vi(cid:75)}k
i=1, i0).
The simulator SC, on input (PKP , SKQR, x, k∗) where k∗ = argmax
i∈[k] (cid:104)wi, x(cid:105) does the following:
1. Generate k random Paillier encryptions(cid:74)˜vi(cid:75)
2. Output (PKP , SKQR, x;{(cid:74)˜v(cid:75)}k
distributions SC = (PKP , SKQR, x;{(cid:74)˜v(cid:75)}k
i=1, k∗)
indistinguishable.
As the index i0 that the client receives is its output, and as Paillier’s cryptosystem is semantically secure, the
i=1, i0) are computationally
i=1, k∗) and VC = (PKP , SKQR, x;{(cid:74)vi(cid:75)}k
As the server views nothing but its inputs (the server does not receive any message in the hybrid model), we use for
the trivial simulator that just outputs its inputs for the proof of security.
As Protocols 1 and 3 are secure in the honest-but-curious model, we obtain the security of the hyperplane decision
protocol using modular sequential composition (Theorem B.2).
Bayes classiﬁer
Proof of Proposition 6.1. The client’s view is
VC = (PKP , SKQR, x;(cid:74)P(cid:75),{(cid:74)Ti,j(cid:75)}, i0).
P(C = cj|X = x),
The simulator SC, on input (PKP , SKQR, x, imax) where imax = argmaxj
• generates tables of random Paillier encryptions(cid:74) ˜P(cid:75) and {(cid:74)Ti,j(cid:75)};
• outputs (PKP , SKQR, x;(cid:74) ˜P(cid:75),{(cid:74) ˜Ti,j(cid:75)}, imax).
33
As the integer i0 that the client receives is its output, and as Paillier’s cryptosystem is semantically secure,
the distributions SC = (PKP , SKQR, x;(cid:74) ˜P(cid:75),{(cid:74) ˜Ti,j(cid:75)}, imax) and VC = (PKP , SKQR, x;(cid:74)P(cid:75),{(cid:74)Ti,j(cid:75)}, i0) are
computationally indistinguishable.
Again, as the server views nothing but its inputs (the server does not receive any message in the hybrid model), we
use the trivial simulator that outputs its inputs and the random coins for the encryption for the proof of security.
As Protocol 1 is secure in the honest-but-curious model, we obtain the security of the hyperplane decision protocol
using modular sequential composition (Theorem B.2).
Decision tree
Proof of Proposition 7.1. The proof of security for the server is very easily obtained using modular sequential
composition of the comparison protocol and Protocol 2: in the hybrid model, the client receives nothing but the
encrypted result.
For the client also the proof is trivial, using modular sequential composition and the semantical security of QR and
of the FHE scheme: the encryptions of bits bi are computational indistinguishable from random bits whether they are
encrypted under QR or the FHE scheme.
34