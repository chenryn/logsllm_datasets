Now we have many more results, and the first one looks very much like a Base64 dictionary!
Let's test this theory with a basic Base64 implementation (based on [this](https://en.wikibooks.org/wiki/Algorithm_Implementation/Miscellaneous/Base64)):
```python
import re
def base64_encode(s, dictionary):
    # the result/encoded string, the padding string, and the pad count
    r = ""
    p = ""
    c = len(s) % 3
    # add a right zero pad to make this string a multiple of 3 characters
    if (c > 0):
        for i in range(c, 3):
            p += '='
            s += "\0"
    # increment over the length of the string, three characters at a time
    for c in range(0, len(s), 3):
        # these three 8-bit (ASCII) characters become one 24-bit number
        n = (ord(s[c]) > 18) & 0x3F, (n >> 12) & 0x3F, (n >> 6) & 0x3F, n & 0x3F]
        # those four 6-bit numbers are used as indices into the base64 character list
        r += dictionary[n[0]] + dictionary[n[1]] + dictionary[n[2]] + dictionary[n[3]]
    # add the actual padding string, after removing the zero pad
    return r[0:len(r) - len(p)]  + p
def base64_decode(s, dictionary):
    base64inv = {}
    for i in range(len(dictionary)):
        base64inv[dictionary[i]] = i
    s = s.replace("\n", "")
    if not re.match(r"^([{alphabet}]{{4}})*([{alphabet}]{{3}}=|[{alphabet}]{{2}}==)?$".format(alphabet = dictionary), s):
        raise ValueError("Invalid input: {}".format(s))
    if len(s) == 0:
        return ""
    # replace any incoming padding with a zero pad (the 'A' character is zero)
    p = "" if (s[-1] != "=") else "AA" if (len(s) > 1 and s[-2] == "=") else "A"
    r = ""
    s = s[0:len(s) - len(p)] + p
    # increment over the length of this encoded string, four characters at a time
    for c in range(0, len(s), 4):
        # each of these four characters represents a 6-bit index in the base64 characters list
        #  which, when concatenated, will give the 24-bit number for the original 3 characters
        n = (base64inv[s[c]] > 16) & 255) + chr((n >> 8) & 255) + chr(n & 255)
    # remove any zero pad that was added to make this a multiple of 24 bits
    return r[0:len(r) - len(p)]
def test_base64():
    import base64
    import string
    import random
    dictionary = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    def random_string(length):
        return ''.join(random.choice(string.ascii_letters) for m in range(length))
    for i in range(100):
        s = random_string(i)
        encoded = base64_encode(s, dictionary)
        assert(encoded == base64.b64encode(s))
        assert(s == base64_decode(encoded, dictionary))
if __name__ == "__main__":
    #test_base64()
    dictionary =  "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbn/+m1234567890"
    print(base64_decode("ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=", dictionary), end='')
```
The output:
```console
root@kali:/media/sf_CTFs/mitre/rebase# python3 my_base64.py
MCA{Th15_wUz_EaZy_Pe@Zy_L3m0n_SqU33z
root@kali:/media/sf_CTFs/mitre/rebase# python3 my_base64.py | xxd -g 1
00000000: 4d 43 41 7b 54 68 31 35 5f 77 55 7a 5f 45 61 5a  MCA{Th15_wUz_EaZ
00000010: 79 5f 50 65 40 5a 79 5f 4c 33 6d 30 6e 5f 53 71  y_Pe@Zy_L3m0n_Sq
00000020: 55 33 33 7a 1e 9f                                U33z..
```
Looks like the algorithm is producing two non-ASCII characters at the end of the string: `0x1e` and `0x9f`.
What will the program tell us if we enter this result as input?
```
root@kali:/media/sf_CTFs/mitre/rebase# ./REBase-fix $(python3 my_base64.py)
39
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5IlAy
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Try Again :(
```
Almost there, but not quite...
We know that the flag should end with "}", let's try guessing some options:
```console
root@kali:/media/sf_CTFs/mitre/rebase# ./REBase-fix MCA{Th15_wUz_EaZy_Pe@Zy_L3m0n_SqU33za}
38
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Congratulations!
root@kali:/media/sf_CTFs/mitre/rebase# ./REBase-fix MCA{Th15_wUz_EaZy_Pe@Zy_L3m0n_SqU33zb}
38
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Congratulations!
root@kali:/media/sf_CTFs/mitre/rebase# ./REBase-fix MCA{Th15_wUz_EaZy_Pe@Zy_L3m0n_SqU33ze}
38
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Congratulations!
root@kali:/media/sf_CTFs/mitre/rebase# ./REBase-fix MCA{Th15_wUz_EaZy_Pe@Zy_L3m0n_SqU33zy}
38
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Congratulations!
root@kali:/media/sf_CTFs/mitre/rebase# ./REBase-fix MCA{Th15_wUz_EaZy_Pe@Zy_L3m0n_SqU33zy{
38
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih6=
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Try Again :(
```
Looks like anything we input as the last letter of the flag contents is accepted, as long as the last character is `}`. The output produced for these trials is identical, and matches the expected output of the program. This actually looks to me like a bug in the program, and is definitely not base64-compliant (no two strings should map to the same encoded value).
The server accepted only `{Th15_wUz_EaZy_Pe@Zy_L3m0n_SqU33zy}` as the flag, which was easy to guess from the prefix.