PlanetLab has somewhat homogeneous routing. We also required
that spliced paths intersect at a shared IP address. Two traceroutes
might intersect at a router or a PoP without sharing an IP address.
We would not consider this intersection when trying to splice paths.
We found that, for 49% of outages, alternate paths existed for the
duration of the failure. Considering only long outages that lasted
at least an hour, we found alternate routes in 83% of failures. For
98% of the outages in which an alternate path existed during the
ﬁrst round of the failure, the path persisted for the duration.
2.3 Current Approaches to Address Failures
Lacking better options, operators rely on insufﬁcient techniques
to try to locate and resolve long-lasting outages, especially if the
failure is in a network outside the operators’ control. Asymmetric
paths leave operators with a limited view even when paths work.
Tools like traceroute require bidirectional connectivity to function
properly, and so failures restrict their view further. Public tracer-
oute servers and route collectors [26,31] extend the view somewhat,
but only a small percentage of networks make them available. In
fact, these challenges mean that operators frequently resort to ask-
ing others to issue traceroutes on their behalf to help conﬁrm and
isolate a problem [28].
If operators successfully identify a failure outside their own net-
works, they have little ability to effect repair:
Forward path failures: The source network’s operators can se-
lect an alternative egress in an attempt to avoid the problem. When
choosing, they can see the full BGP paths provided by their neigh-
bors. Each of the source’s providers announces its preferred path,
and the source is free to choose among them.
If the network’s
providers offer sufﬁciently diverse paths, the failure may be avoided.
For example, we inspected BGP routes from ﬁve universities (Uni-
versity of Washington, University of Wisconsin, Georgia Tech,
Princeton, and Clemson) [5] to preﬁxes in 114 ASes. If these uni-
versities were our providers, the routes are sufﬁciently diverse that,
if the last AS link before the destination on one of the routes failed
silently, we could route around it to reach the destination in 90%
of cases by routing via a different provider. In §5.2, we present an
equivalent experiment demonstrating that our techniques would al-
low us to avoid 73% of these links on reverse paths back from the
114 ASes, without disturbing routes that did not use that link. 1
Reverse path failures: Using traditional techniques, however, hav-
ing multiple providers may not offer much reverse path diversity.
Under BGP, the operators can only change how they announce
a preﬁx to neighbors, perhaps announcing it differently to differ-
ent neighbors. They have no other direct inﬂuence over the paths
other networks select. A major limitation of existing techniques for
announcement-based route control is that they generally act on the
next hop AS, rather than allowing a network to target whichever
AS is causing a problem. We discuss the techniques below:
1The 114 ASes were all those that both announce preﬁxes visible
at the universities, needed for the forward path study, and peer with
a route collector [1, 26, 29, 31], needed for the reverse study.
Multi-Exit Discriminator (MEDs): An AS that connects to another
AS at multiple points can use MEDs to express to the neighbor on
which peering point it prefers to receive trafﬁc. However, MEDs
have meaning only within the context of that single neighbor, so
they generally are effective only if the problem is in the immediate
upstream neighbor.
Selective Advertising: An origin AS with multiple providers can
advertise a preﬁx through only some providers. In variations on this
approach, the origin can advertise more-speciﬁc preﬁxes through
some providers and only less-speciﬁcs through others. Or, since
many ASes use path length as a tiebreaker when making routing
decisions, networks sometimes prepend routes they announce with
multiple copies of their AS, to make that path longer and hence
less preferred than shorter ones. With all these approaches, the ori-
gin can shift trafﬁc away from providers it wants to avoid. If the
problem is not in the immediate provider, these techniques may be
deﬁcient because (1) all working routes that had previously gone
through that provider will change; and (2), even if all sources with
failing paths had routed through a particular provider before selec-
tive advertising, forcing them to route via a different provider may
not change the portion of the path containing the failure.
BGP communities: Communities are a promising direction for fu-
ture experiments in failure avoidance but do not currently provide
a complete solution. An AS can deﬁne communities that other net-
works can tag onto routes they announce to the AS. Communities
instruct the AS on how to handle the routes. For example, SAVVIS
offers communities to specify that a route should not be exported to
a peer. However, communities are not standardized, and some ASes
give limited control over how they disseminate routes. Further,
many ASes do not propagate community values they receive [30],
and so communities are not a feasible way to notify arbitrary ASes
of routing problems. We announced experimental preﬁxes with
communities attached and found that, for example, any AS that
used a Tier-1 to reach our preﬁxes did not have the communities on
our announcements.
Changes to BGP announcements and to local conﬁguration may
be unable to repair outages. In such cases, operators often must
resort to phone calls or e-mails asking operators at other networks
for support. These slow interactions contribute to the duration of
outages. We now show how our approach enables an operator to
avoid reverse path failures.
3. ENABLING FAILURE AVOIDANCE
Suppose an AS O wants to communicate with another AS Q but
cannot because of some problem on the path between them. If the
problem is within either O or Q, operators at that network have
complete visibility into and control over their local networks, and
so they can take appropriate steps to remedy the problem. Instead,
consider a case in which the problem occurs somewhere outside of
the edge ASes, either on the forward path to Q or on the reverse
path back to O. Further suppose that O is able to locate the failure
and to determine that an alternate route likely exists.2
O would like to restore connectivity regardless of where the prob-
lem is, but its ability to do so currently depends largely on where
the problem is located. If the problem is on the forward path and
O’s providers offer suitable path diversity, O can choose a path that
avoids the problem. By carefully selecting where to locate its PoPs
and which providers to contract with, O should be able to achieve
decent resiliency to forward path failures. However, having a di-
versity of providers may not help for reverse path failures, as O has
2We discuss how LIFEGUARD does this in §4.
little control over the routes other ASes select to reach it. As ex-
plained in §2.3, route control mechanisms like MEDs and selective
advertising only let O control the PoP or provider through which
trafﬁc enters O. However, these BGP mechanisms give O essen-
tially no control over how other ASes reach the provider it selects.
O needs a way to notify ASes using the path that the path is
not successfully forwarding trafﬁc, thereby encouraging them to
choose alternate routes that restore connectivity. As a hint as to
which paths they should avoid, O would like to inform them of the
failure location. AS-level failure locations are the proper granular-
ity for these hypothetical notiﬁcations, because BGP uses AS-level
topology abstractions. In particular, when one of the notiﬁed ASes
chooses an alternate path, it will be selecting from AS paths an-
nounced to it by its neighbors. Therefore, O needs to inform other
ASes of which AS or AS link to avoid, depending on whether the
failure is within a single AS or at an AS boundary.
Ideally, we would like a mechanism to let the origin AS O of
a preﬁx P specify this information explicitly with a signed an-
nouncement we will call AVOID_PROBLEM(X,P). Depending on
the nature of the problem, X could either be a single AS (AVOID_-
PROBLEM(A,P)) or an AS link A − B (AVOID_PROBLEM(A-
B,P)). Note that AS O is only able to directly observe the problem
with preﬁx P; it cannot determine if the issue is more widespread.
Announcing this hypothetical primitive would have three effects:
• Avoidance Property: Any AS that knew of a route to P that
avoided X would select such a route.
• Backup Property: Any AS that only knew of a route through
X would be free to attempt to use it. Similarly, A would be
able to attempt to route to O via its preferred path (through B
in the case when X is the link A-B).
• Notiﬁcation Property: A (and B, for link problems) would be
notiﬁed of the problem, alerting its operators to ﬁx it.
3.1 LIFEGUARD’s Failure Remediation
Deploying AVOID_PROBLEM(X,P) might seem to require
changes to every BGP router in the Internet. Instead, we use mech-
anisms already available in BGP to perform the notiﬁcations, in
order to arrive at a solution that is usable today, even if the solution
is not complete. A usable approach can improve availability today
while simultaneously helping the community understand how we
might improve availability further with future BGP changes. We
call our approach LIFEGUARD, for Locating Internet Failures Ef-
fectively and Generating Usable Alternate Routes Dynamically.
To approximate AVOID_PROBLEM(A,P) on today’s Internet,
LIFEGUARD uses BGP’s built-in loop prevention to “poison” a prob-
lem AS that is announcing routes but not forwarding packets. To
poison an AS A, the origin announces the preﬁx with A as part of
the path, causing A to reject the path (to avoid a loop) and with-
draw its path from its neighbors [8, 10]. This causes ASes that
previously routed via A to explore alternatives.
Importantly, the
poison affects only trafﬁc to O’s preﬁx experiencing the problem.
By allowing an AS to poison only preﬁxes it originates, our ap-
proach is consistent with the goals of work toward authenticating
the origin of BGP announcements [27]. Proposals to verify the en-
tire path [3] are consistent with the future goal for our approach, in
which AVOID_PROBLEM(X,P) would be a validated hint from the
origin AS to the rest of the network that a particular AS is not cor-
rectly routing its trafﬁc. By the time such proposals are deployed, it
may be feasible to develop new routing primitives or standardized
communities to accomplish what we currently do with poisoning.
Although BGP loop prevention was not intended to give O con-
trol over routes in other ASes, it lets us experiment with failure
Figure 2: Routes and routing tables (a) before and (b) after O poisons
A to avoid a problem. Each table shows only paths to the production
preﬁx, with the in-use, most-preferred route at the top. Poisoning A
for the production preﬁx causes it to withdraw its route from E and F,
forcing E to use its less-preferred route through D and leaving F with
only the sentinel. Routes to the sentinel preﬁx do not change, allowing
O to check when the problem has resolved.
avoidance. In effect, poisoning A implements the Avoidance Prop-
erty of AVOID_PROBLEM(A,P), giving O the means to control
routes to it. A’s border routers will receive the poisoned announce-
ment and detect the poison, a form of the Notiﬁcation Property.
On its own, poisoning is a blunt, disruptive instrument, a lim-
itation that LIFEGUARD must overcome. Poisoning inserts A into
all routes, so even ASes that were not routing through A may un-
dergo route exploration before reconverging to their original route,
leading to unnecessary packet loss [23]. Instead of providing the
Backup Property, poisoning cuts off ASes that lack a route around
A. Poisoning disables all paths through A, even if some work.
In the following sections, we show how LIFEGUARD overcomes
what initially seem like limitations of poisoning in order to better
approximate AVOID_PROBLEM(X,P).
3.1.1 Minimizing Disruption of Working Routes
Inserting an AS to poison an announcement increases AS path
length. Suppose that an origin AS O decides to poison A for O’s
preﬁx P. The poisoned path cannot be A-O, because O’s neighbors
need to route to O as their next hop, not to A. So, the path must
start with O. It cannot be O-A, because routing registries list O as
the origin for P, and so a path that shows A as the origin looks sus-
picious. Therefore, O announces O-A-O. Experiments found that
BGP normally takes multiple minutes to converge when switching
to longer paths, with accompanying packet loss to the preﬁx during
this period [23]. This loss would even affect networks with working
paths to the preﬁx.
To poison in a way that shortens and smooths this convergence
period, LIFEGUARD crafts steady-state unpoisoned announcements
in a way that “prepares” all ASes for the possibility that some AS
may later be poisoned. Fig. 2 provides an example of an origin AS
O with a production preﬁx P which carries real trafﬁc. Fig. 2(a)
depicts the state before the problem, and Fig. 2(b) depicts the state
following a failure, after O has reacted to repair routing.
LIFEGUARD speeds up convergence and reduces path exploration
by prepending to the production preﬁx P’s announcement, announc-
ing O-O-O as the baseline path. If O detects that some networks
(ASes E and F in Fig. 2) cannot reach P due to a problem in A,
O updates the announcement to O-A-O. These two announcements
are the same length and have the same next hop, and so, under de-
fault BGP, they are equally preferred.
If an AS is using a route
that starts with O-O-O and does not go through A, then receives
an update that changes that route to start with O-A-O instead, it
will likely switch to using the new route without exploring other
Network linkProd. preﬁx pathSentinel preﬁx pathOBAFECDOBAFECDO-A-OB-O-A-OD-C-B-O-A-O??O-O-OB-O-O-OC-B-O-O-OE-A-B-O-O-OA-B-O-O-OD-C-B-O-O-OB-O-O-OA-B-O-O-O(a)(b)Fig. 3 illustrates the idea. Assume O discovers a problem on the
link between A and B2. This failure affects C3, but C2 still has a
working route through A, and C4 still has a working route through
B2. O would like to shift trafﬁc away from the failing link, with-
out forcing any networks except A to change which neighbor they
select to route through. In other words, O would like to announce
AVOID_PROBLEM(A-B2,P). If O only uses selective advertising
without poisoning, announcing its preﬁx via D1 and not D2, C4’s
If O poisons A via both D1 and D2,
route will have to change.
C2 and C3 will have to ﬁnd routes that avoid A, and A will lack a
route entirely (except via a less-speciﬁc preﬁx). However, by selec-
tively poisoning A via D2 and not via D1, O can shift A and C3’s
routes away from the failing link, while allowing C3 to still route
along working paths in A and without disturbing any other routes.
Selective poisoning functions like targeted prepending – prepend-
ing requires that A use path length to make routing decisions and
potentially causes other ASes to shift from using routes through