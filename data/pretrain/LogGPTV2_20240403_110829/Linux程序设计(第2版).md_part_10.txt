出了许多这样的环境变量，下面是一些比较重要的（见表2-2）：
表2-2
环境变量
说明
3HUHS
当前用户的登录子目录
SPATH
以冒号分隔的用来接索命令的子目求清单
$PS1
命令行提示符.通常是“s”字符
$PS2
辅助提示符、用米提示后续输入，通常是“>”字符
$1FS
输人区的分隔符。所she读取输人数据的时候会把一组学符看做是单词之间的分隔字符、
它们通常是空格、制表符和换行符
$0
shell脚本程序的名字
S#
传递到脚本程序的步数个数
该shel鼻本程序的进程ID，脚本程序一般会使用它来创建独一无二的临时文件，比如
/tmp/tmpfile_Ss
如果你想通过执行“env”命令来查看程序在不同环境下是如何工作的，
请查阅env命令的使用手册页
我们也将在下面看到怎样使用export命令在子Shell中设置环境变量。
3.参数变量
如果你的脚本程序在调用时还带有参数，就会额外产生一些变量。即使根本没有传递任何
参数，上表中的环境变量“S#”也依然存在，只不过它的值是0罢了。
参数变量见表2-3：
表2-3
参数空
说明
$1, $2.
脚本程子的参数
S*
一个全体参数组成的清单，这是一个单独的变量，各个参数之间用环境变龄IFS中
的第一个字符分隔开
$ @
“S*”的一种变最，它不使用IFS环境变量
“"S*”和“S@”两个参数之间的区别在X/Open技术规范里有比较详细的解释。
当双括号里的字符串发生名-值替换的时候，“$"”整体扩展为一个数据域，各个参数的值之
间用IFS（“internal field separator”的字头缩写，意思是数据城内部分隔符）的第一个字符分隔
开；如果取消了对IFS的设置，就用一个空格符加以分隔。如果IFS被设置为一个空字符（这与
取消对它的设置可不~样），参数的值就会接合在一起。请看下面的例子：
IFS='
et foo bar bus
加入jaVva编程群：524621833
---
## Page 45
26
Linux程序设计
Secho *$*
foo bar bam
$echo*s*"
foobarban
Secho*s*"
S uneet IFS
weq 1vq cog
正如大家所看到的，双引号里面的“S@”把各个参数依然扩展为彼此分开的数据，不受IFS
变址值的影响。一般来说，如果你想访问脚本程序的参数，用“$@”是明智的选择。
用echo命令可以查看到变量的内容值，面通过read命令可以读人它们。
动手试试：参数和环境变量
下面的脚本程序演示了一些基本的变量处理操作。输人脚本程序的内容并把它保存为文件
try_variables，别忘了用“chmod+xtry_variables”命令把它设置为可执行的。
1/bin/sh
salutation=*Hello*
echo *The progran S0 is now running*
echo Ssalutation
echo“The first parameter was $1
echo
“The
second paraneter was $2*
echo *Please enter a new greeting*
echo $salutation
echo ^The script is now coeplete*
exit 0
如果运行这个脚本程序，我们将得到如下所示的输出结果：
S./try_variables foo bar baz
The program ./try_variables is now running
He110
The second parameter was bar
The first paraneter was foo
The parameter list was foo bar baz
The user's home directory is /home/rick
Please enter a new greeting
Sire
sire
The script is ncw complete
程序注释：
这个牌本程序创建了变量salutation并显示它的内容值，然后我们看到各种参数变量以及环
境变量SHOME已经存在并有了适当的初始化值。
我们稍后再对参数的名-值替换做进一步介绍。
2.4.2条件测试
程序设计语言的基础是它们具备对条件进行测试判断的能力，再根据测试结果采取不同的
加入jaVa编程群：524621833
---
## Page 46
第2章shell程序设计27
行动。在讨论这个问题之前，我们先来看看我们在shell脚本程序里可以使用的条件的结构和使
用这些条件的控制结构。
shell脚本程序能够对任何可以在命令行上被调用执行的命令的退出码进行测试，其中也包
括用户为自己编写的脚本程序。这也是为什么要在所有你自已编写的脚本程序的末尾加上一条
exit命令的重要原因。
“test”或“[]”命令
在实际工作中，大多数脚本程序都会大量使用“I”或“test”命令一—即shell的布尔判断
命令。在大多数系统上，这些命令的作用都差不多。把“[1”符号当作一条命令多少有点奇怪，
但在实际工作中，它在代码里确实会使命令的语法看起来更简单，更明确，就像其他种类的程
序设计语言一样。
在某些UNIX系统里，这些命令将调用shell中的一个外部程序，但比较现代的shell
已经把它内建在其中了。我们将在后面介绍各种命令的内容里再次讨论这个问题、
因为test命令在shell脚本程序以外用得并不是很频繁，所以许多很少编写shell脚本
程序的UNIX用户往往会自己编写一个简单的程序并把它叫嫩test。如果一个这样的程序
不能够工作，十有八九是因为它与shell中的test命令发生了冲突。要想查看你自己的系
统是否有一个与此同名的外部命令，可以试试“whichtest”这样的命令，检安结果一
般会是/bin/test或/usr/bin/test
我们以一个最简单的条件为例来介绍test命令的用法：检查一个文件是否存在。用于实现这
if test -f fred.c
then
ti
我们也可以写成下面这个样子：
if I -f fred.c ]
then
fi
lest命令的退出码（表明条件是否被满足）决定是否需要执行后面的条件语句。
注意要在方括号“[1”和被检查的条件之间留出空格。记佳“”字符和单词“test”
实际上是一样的，而单词“test”的后面当然应该有-一个空格；这样你就不会忘记了。
如果你习惯于把then和if写在同一行上，就一定要用一个分号把then和前面的语句分隔开。
如下所示：
if [ -f fred.c 1; then
fi
可以通过test命令进行测试的条件都可以归人下面这三大类别。
加入jaVa编程群：524621833
---
## Page 47
28
Linux程序设计
1.字符串比较（见表2-4）
表2-4
字符串比较
结果
stringl -string2
如果两个字符中相间则结果为真
stringl !-string2
如果两个字符中不同则结果为真
-n trng
如果字符串不是空则结果为真
-2 string
如某字符申是空（一个空白字符中）结果则为真
2.算术比较（见表2-5）
表2-5
算术比较
结果
expressionl -eq expression2
如果两个表达式相等期结果为真
expressionl -ne express1on2
如果两个表达式不等则结果为真
expressionl -gt expressios2
如果前-个表达式大于后一个表达式则结果为真
expressionl -ge expression2
如果前一个表达式大于或等于后一个表达式则结果为真
9xpression1 -1t expression2
如集前一个表达式小于后一个表达式则结果为真
expressionl -le expression2
如果前一个表达式小于或等干后一个表达式则结果为真
:expression
如果表达式为假则结果为真，表达式为真则结果为假
3.与文件有关的条件测试（觅表2-6）
表2-6
文件条件测试
结果
•d f11e
如果文件是一个子目录则结果为真
-e tile
如果文件存在则结果为真
-[ file
如果文件是一个售通文件则结果为真
-q f±1e
如果文件的sel-grocp-id属性位被设置则结果为真
-r ti1e
如果文件可读则结果为真
-s fi1e
如果文件的长度不为0则结果为真
 f i1
如果文件的sel-scr-id属性位被设置则结果为真
-v file
如果文件可写则结果为真
xfile
如果文件可执行则结果为真
请注意，因为历史遗留问题，“e”选项不具备可移植性，所以“-f”用得更多一些
读者可能对set-group-id和set-user-id（也叫做set-gid和set-uid）位有整固惑。set-uid
位把程序调有者的访问权限分配给它；而set-gid位把程序所在分组（group）的访问权
限分配给它。这两个属性位都是由chmod命令设置的，对应的命令选项分别是s和g
sel-gid和sct-uid标志对shell脚本程序不起作用。
各种与文件有关的条件测试其结果为真的大前提是文件必须存在。这张表格只列出“test命
令最常用的选项，完整的选项清单请查阅它的使用手册。如果读者使用的是bash，那么test命令
加入jaVa编程群：524621833
---
## Page 48
第2章shell程序设计
67
就已经内建在其中了，你只需敲入“helptest”就可以看到详细的资料：本章后面的内容将用到
这里给出的部分选项。
我们已经学习了条件，现在来看～下使用它们的控制结构
2.4.3控制结构
shell有-·系列控制结构，而且它们同样与其他程序设计语言很相似。就某些结构而言（比
如case语句），shell提供了更强大的功能
在下面的各小节里，“statements”表示测试条件满足时将要执行的一系列命令。
1.if语句
if语句很简单。它对某个命令的执行结果进行测试，然后根据判断结果执行一组语句。如下
所示：
If condition
then
else
statenents
fi
statenents
动手试试：使用if命令
普通的用法是问一个问题，然后根据回答作出决定，如下所示：
#!/bin/sh
echo *Is it morning? Please answer yes or no*
read tineofday
if ↑$timeofday*yes*1;then
echo *Gocd morning
else
echo “Gocd afternoon*
fi
ex1t 0
这将给出如下所示的输出：
Is it morning? Please answer yes or no
Good norning
yes
这个脚本程序用“I1命令对变量timeofday的内容进行测试，测试结果送人if命令进行判断，
由它来决定执行哪部分代码。
请注意，我们用额外的空白符来缩进迁结构内部的语句。这只是为了照顾人们的阅
读习惯，shell会忽略这些多余的空白符。
2.elif语句
刚才的这个简单的脚本程序存在几个问题。它会把所有不是“yes”的回答都看做是“no”。
加入jaVa编程群：524621833
---
## Page 49
30
Linux程序设计
用elif结构就能够避免出现这样的情况，它允许我们在if结构的else部分被执行的时候增加第二个
测试条件。
动手试试：用elif结构做进一步测试
我们对刚才的脚本程序做些修改，让它在用户输人“yes”和“no”以外的其他任何东西时
报告一条出错信息。