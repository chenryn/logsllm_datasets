title:CATI: Context-Assisted Type Inference from Stripped Binaries
author:Ligeng Chen and
Zhongling He and
Bing Mao
(cid:19)(cid:17)(cid:19)(cid:17)(cid:1)(cid:22)(cid:17)(cid:85)(cid:73)(cid:1)(cid:34)(cid:79)(cid:79)(cid:86)(cid:66)(cid:77)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:16)(cid:42)(cid:39)(cid:42)(cid:49)(cid:1)(cid:42)(cid:79)(cid:85)(cid:70)(cid:83)(cid:79)(cid:66)(cid:85)(cid:74)(cid:80)(cid:79)(cid:66)(cid:77)(cid:1)(cid:36)(cid:80)(cid:79)(cid:71)(cid:70)(cid:83)(cid:70)(cid:79)(cid:68)(cid:70)(cid:1)(cid:80)(cid:79)(cid:1)(cid:37)(cid:70)(cid:81)(cid:70)(cid:79)(cid:69)(cid:66)(cid:67)(cid:77)(cid:70)(cid:1)(cid:52)(cid:90)(cid:84)(cid:85)(cid:70)(cid:78)(cid:84)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:47)(cid:70)(cid:85)(cid:88)(cid:80)(cid:83)(cid:76)(cid:84)(cid:1)(cid:9)(cid:37)(cid:52)(cid:47)(cid:10)
CATI: Context-Assisted Type Inference from
Stripped Binaries
∗National Key Laboratory for Novel Software Technology, Nanjing University, Nanajing 210023, China
Ligeng Chen∗, Zhongling He∗ and Bing Mao∗
{chenlg, zhe}@smail.nju.edu.cn, PI:EMAIL
Abstract—Code analysis is a powerful way to eliminate vul-
nerabilities. Closed-source programs lack crucial
information
vital for code analysis because that information is stripped on
compilation to achieve smaller executable size. Restoration has
always been a challenge for experts. Variable type information
is fundamental
in this process because it helps to provide a
perspective on program semantic. In this paper, we present
an efﬁcient approach for inferring types, and we overcome the
challenge of scattered information provided by static analysis
on stripped binaries. We discover that neighboring instructions
are likely to operate the same type of variables, which are
leveraged to enrich the features that we rely on. Therefore, we
implement a system called CATI, which locates variables from
stripped binaries and infers 19 types from variables. Experiments
show that it infers variable type with 71.2% accuracy on unseen
binaries. Meanwhile, it takes approximately 6 seconds to process
a typical binary.
Index Terms—Stripped Binary; Variable Type; Static Analysis
I. INTRODUCTION
Binary analysis is always a hot topic in the security ﬁeld.
Experts need to rebuild the information from stripped binaries
to provide vital information for the following tasks: decompi-
lation [1], code hardening [2]–[4], bug-ﬁnding [5], [6], clone
detection [7]–[10], etc. However, when high-level language
is transformed into binary code (e.g., after compilation), it
cannot preserve all the source-level information. Recovering
the semantic information of stripped binaries helps understand
the whole program.
A typical program stores 2 kinds of information in memory:
code and data. When the program is running, it transfers value
between memory and registers and does the calculation on
values stored in registers. A storage location, either register or
memory, that stores a value, is called a variable. If debug infor-
mation is present, variables are paired with a symbolic name
and type information, which are deﬁned by the programmer in
high-level source code. That is, every available memory unit
and every register can be a variable. One important task for
reverse engineering is to ﬁgure out the functionality of each
variable, which even can help improve fuzzing [11].
Variable type suggests the functionality of the variable. For
example, an array of chars is likely to be an input buffer.
Therefore, inferring the variables’ type partially recovers their
functionality. The only way to tell the difference between
variables is to observe the instructions that operate them.
Hence, the chain of instructions could be used as a vital clue.
But since compilation optimizes the binary code, much high-
level information isn’t preserved. In our task, that is, similar
instructions might operate the variable of a different type. We
call these variables uncertain samples. Therefore, there is little
information left to distinguish them.
Currently, commercial tools widely used in industry, such
as IDA Pro [12], have an acceptable performance on type
inference but they depend on principled and heuristic-based
rules. Recently, several works [2], [13]–[15] do a thorough
static analysis to improve the accuracy of type inference.
Others [16], [17] use dynamic analysis to collect runtime
information. But dynamic analysis cannot cover all the binary
code and we need to set up environments for each binary to
run. Additionally, none of them avoids the reliance on a set
of manually crafted rules based on expert knowledge. With
the development of code optimization technology, previous
rules may fail to infer types from the binary build from recent
compilers. Thus summarizing and updating these clues are
time-consuming.
To free from excessively searching for endless rules or
appealing to expert knowledge, a considerable number of
new methods and tools [1], [18], [19] are adopting machine
learning models trained on massive data to do binary analysis,
including inferring types from stripped binaries. Nevertheless,
in these approaches, some expert knowledge is still essential.
For instance, in the aforementioned work, He [1] traces the
data ﬂow of the instructions using BAP [20], then builds a
dependency graph, ﬁnally uses a probabilistic graphical model
called conditional random ﬁeld [21] to infer the variable type
and its name. It relies heavily on data dependency analysis to
build the graph. TypeMiner [22] also builds data object trace
via data dependency. For base type, they extract deﬁnition-use
chains. For structured types, they analyze dereference instruc-
tions on its members. They also build a dependency graph
and infer using a graphical model. However, they state that a
smaller size of the dependency graph negatively affects their
results. For half of the variables they extract, they cannot ﬁnd
enough instruction dependency and they ignore these variables
because they are not able to predict them well. Control ﬂow
analysis might help to build data dependency between basic
blocks. However, Zeng [23] shows that control ﬂow cannot
be accurately recovered without debug information. All the
evidence above suggests that rebuilt information from stripped
binary is always scattered, thus makes accurate type inference
difﬁcult. In our work, we aim to solve this problem. We call
(cid:26)(cid:24)(cid:25)(cid:14)(cid:18)(cid:14)(cid:24)(cid:19)(cid:25)(cid:18)(cid:14)(cid:22)(cid:25)(cid:17)(cid:26)(cid:14)(cid:26)(cid:16)(cid:19)(cid:17)(cid:16)(cid:5)(cid:20)(cid:18)(cid:15)(cid:17)(cid:17)(cid:1)(cid:165)(cid:19)(cid:17)(cid:19)(cid:17)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:37)(cid:52)(cid:47)(cid:21)(cid:25)(cid:17)(cid:23)(cid:20)(cid:15)(cid:19)(cid:17)(cid:19)(cid:17)(cid:15)(cid:17)(cid:17)(cid:17)(cid:19)(cid:25)
(cid:25)(cid:25)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:44 UTC from IEEE Xplore.  Restrictions apply. 
these variables that we cannot build rich data dependency as
orphan variables. Since there’s not much information about
orphan variables, they are often uncertain samples.
Given all
these difﬁculties, we need to employ richer
features to infer the variable type. Fortunately, although the
dependency of our target instruction is sometimes not easy
to build, we can take the instruction context into account. In
our work, we focus on memory access instructions and deref-
erence instructions as these instructions operate one variable
at a time. These instructions are called target instructions.
Instruction context is some instructions before and after the
target instruction. According to our survey, the variables that
the instruction context operates are likely to be the same type
as the target operates. We call it same variable type clustering
phenomenon.
Thus, we leverage the instruction context of target
in-
struction to infer the variable type. We deﬁne a new feature
for a variable called Variable Usage Context (VUC) as the
aggregation of instruction context and target instruction. In-
ferring variable type is transformed into VUC classiﬁcation,
or in general, a text classiﬁcation task. Moreover, if we can
build data dependency, in other words, we can ﬁnd several
instructions that operate the same variable, we will utilize a
voting mechanism to make the ﬁnal decision. More concretely,
we implement a system, called CATI, which takes a stripped
binary as input and outputs located variables with the predicted
type information. To the best of our knowledge, CATI is
the ﬁrst to accomplish the most amount of types inference
in stripped binaries compiled from C code with few expert
knowledge, and the ﬁrst system leveraging context information
to infer the variable type. At the end of our paper, we provide
a detailed evaluation of CATI and compare with state-of-art
approaches in term of performance in Section VII.
The main contributions of our work are as follows:
1. We discover that the problem of orphan variables and
uncertain samples cannot be well solved by previous work,
thus we leverage context information to enrich the features to
infer the variable type.
2. We deﬁne a new feature called Variable Usage Context
(VUC), which consists of the target instruction and its instruc-
tion context. VUC captures rich behavior information from the
instruction context, and we successfully transfer the problem
into a text classiﬁcation task.
3. We accomplish a thorough evaluation of a wide range
oapplications, and the result shows a great performance from
different aspects.
The rest of our paper is organized as follows: motivation and
overview of CATI are given in Section II and III. Section IV
to V introduces the individual process of our system in detail.
To evaluate our method, we present our implementation part
and the empirical evaluation result in Section VI and VII. We
hold a discussion part in Section VIII and related works are
classiﬁed as discussed in Section IX. Section X takes the end
of our paper to conclude our work.
a1) nm-new: _bfd_coff_link_input_bfd
a2) wget: map_html_tags
b1) grep: raw_comparator
b2) sed: maybe_realloc
Fig. 1. Examples of uncertain samples and orphan variables.
II. FEASIBILITY AND CHALLENGE
A. Problem Deﬁnition
Debug information of commercial off-the-shelf (COTS)
binaries is often stripped for several purposes, such as size
reduction, information hiding, etc. It is a challenging task
to learn the mapping relationship between assembly variable
instruction and the corresponding variable type.
binary B,
goal
is
from B, where
V U C1, V U C2, ..., V U Ck ⊆ B. Each VUC contains the
target variable instruction with 10 instructions forward and
10 instructions backward, which can be presented as,
extract VUCs
automatically
piece
of
stripped
Given
a
to
our
V U Ci = {Insi−w, .., Insi−1, Insi, Insi+1, ..., Insi+w}
Insi denotes the central instruction which is correlated to
the target variable, w denotes the windows size of VUC, and
Insi+j denotes the instruction which is j instruction(s) away
from central instruction. Towards to empirical experiment, we
choose window size w to be 10. For traceable Variable Vt,
we aim to make the ﬁnal decision for it relying on the voting
mechanism by the prediction result of VUCs whose central
instruction is related to Vt.
B. Motivation
We illustrate some motivating cases in this part which are
hard for previous work to solve and inspire our main idea.
Orphan Variable. Previously, researchers strongly believe
that the trace of the variable may disclose some clues of
type information. So most of the former works [1], [16],
[22] coincidentally trace the variable whether based on control
ﬂow or data ﬂow. Unfortunately, we survey all the variables
in our data set extracted by IDA Pro — a totally 3 million
variables, and only about 65% of variables have more than
3 related instructions. That is, 35% of variables only have 1
or 2 instructions, which we call it orphan variable mentioned
before.
The difﬁculty of analyzing orphan variables lies in two
aspects. On the one hand, 1 or 2 instructions cannot provide
enough structural information to infer the information of type
for the previous works [1], [22]. On the other hand, two cases
(cid:25)(cid:26)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:44 UTC from IEEE Xplore.  Restrictions apply. 
phenomenon. The analysis result above inspires us to leverage
instruction context information as new features.
with the same instruction(s) but different types are uncertain
samples, which we deﬁned before. For instance, as shown in
Figure 1 a1) and a2), the two cases appear to have the same
instruction (offset will be generalized in the pre-processing
procedure) but indicate different variable types, and both of
the target variables have only one corresponding instruction.
As shown in Figure 1 b1) and b2), the two variables from
different binaries share the same instructions, which suffers
from a similar situation. Previous works are not able to use
the limited information to ﬁnd the mapping relationship with
variable and instruction(s) for the cases above.
Variables
VUCs
Variables with 1 VUC
Uncertain Samples-1
Variables with 2 VUCs
Uncertain Samples-2
Training Set
3,952,246
22,476,210
220,250
216,909
1,189,466
1,159,307
Testing Set
167,223
1,074,227
9,372
8,687
39,839
34,178
STATISTICAL RESULT OF orphan variables AND uncertain samples IN
TRAINING SET AND TESTING SET.
TABLE I
To consolidate our discovery, we survey on both training
set and testing set and show the result in Table I. Row 2
and row 3 show the number of variables and related VUCs.
Note that each variable corresponds to different amounts of
VUCs. Row 4 and row 6 show the number of orphan variables
— variables are related to 1 or 2 instructions, which we
have deﬁned before. Row 5 and row 7 show the number
of variables that have the same instruction(s) with others,
but
it uncertain
samples. We discover this kind of uncertain samples cannot
be distinguished well by previous works. It is obvious that
uncertain samples take up over 97% of orphan variables,
and orphan variables take up over 35% of all variable in the
data set. As shown in Figure 1, the two cases are the typical
uncertain samples. If we want to distinguish the uncertain
samples, we need to extend the features of them.
types, which we call
they have different
Same Type Variable Clustering Phenomenon. If two
entities do arithmetical operations, they need to belong to
the same variable type for the reason of aligning and register
storage length. Hence, we do a statistical analysis to verify our
hypothesis that the context of the target variable containing
a considerable amount of instructions related to the same
variable type. Once the hypothesis is veriﬁed, we can leverage
the likely pattern of the same type variables to infer the target
variable. Fortunately, the result is convincing. We carry out
statistics on over 107 thousand variables, and we take the 10
forward instructions and 10 backward instructions into con-
sideration. We ﬁnd about 540 thousand variable instructions
within 107 thousand VUCs, and in each VUC, over 53% of
instructions completely share the same variable type as the
target variable. As shown in Figure 2, it is a variable with type
struct in row 11 (lea 0x220(%rsp),%rax), and we found 10
variables around the instruction location, of which 60 percent
are the same variable type — struct. So here we conclude that
the distribution of variable type related to the instructions has
spatial locality. We deﬁne it as same type variable clustering
struct attr_pair attr_pair_initial_storage[8];
…
(cid:400)(cid:410)(cid:396)(cid:437)(cid:272)(cid:410)
int attr_pair_size = countof (attr_pair_initial_storage);
struct attr_pair *pairs = attr_pair_initial_storage;
…
Fig. 2. Same type variable clustering.
Usage of instruction Context. To overcome the challenge
of uncertain samples, we need to employ more related features
to distinguish the variable type. Intuitively, the neighboring
instructions can play a signiﬁcant role to infer the type of
target variable. Taking the control ﬂow and data ﬂow into
consideration, the neighboring instructions may directly or
indirectly inﬂuence the behavior of the target variable.
To describe the relationship between the target variable and
neighboring variables more precisely, we take the case in
Figure 2 as an example. The target variable stays in row 11.
Instructions in row 7 to 10 are referring to the same variable–
attr pair initial storage and the instruction in row 15 is a
pointer variable pointing to the target variable. To enrich the
features of variables, we bring in instruction context as new
features, which we deﬁne as variable usage context.
In the next section, we will introduce the process to infer
variable type with neighboring instructions in detail.
III. SYSTEM WORKFLOW
In this section, we provide an informal overview of our
method on an illustrative sample. Figure 3 shows how to locate
variables and infer their types from a snippet of assembly
code from a stripped binary. Assemblies represent the meta
operations of code at a lower level.
Given the piece of binary, CATI will output the prediction
result of each located variable instructions. In the following
paragraphs, we illustrate the main procedures of the system
on the problem of inferring the variable types.
Extract and Label Samples. CATI ﬁrstly locates the target
instructions corresponding to variables in stripped binaries.
At the same time, we extract their instruction contexts as
10 forward instructions and 10 backward instructions—21
instructions in total. Their aggregation is what we deﬁned as
VUC. By leveraging debug information, we can easily label
VUC with the target variable’s type as shown in ﬁgure 3a).
For example, IDA pro helps us to ﬁnd the corresponding stack
frame for VUC and its ground truth. For the limitation of static
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:44 UTC from IEEE Xplore.  Restrictions apply. 
(cid:26)(cid:17)
d
e
b
u
g
s
y
m
b
o
l