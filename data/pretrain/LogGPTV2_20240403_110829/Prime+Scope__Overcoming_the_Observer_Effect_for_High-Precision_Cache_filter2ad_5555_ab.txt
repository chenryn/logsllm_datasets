#2: Non-concurrent. We refer to a cache measurement as con-
current when it detects events that temporally overlap with it. De-
pending on the degree of overlap between event and measurement,
an event coinciding with measurement 𝑗 may be detected during
measurement 𝑗 or 𝑗 + 1, but will not be missed, roughly speaking.
For instance, the Reload in Flush+Reload is non-concurrent, as
events occurring right before or during the Reload are missed [67].
Non-preserving measurements cannot be concurrent, as the nec-
essary preparation phase erases all relevant state changes, rendering
them unobserved. Non-concurrent measurements, even if they are
preserving, are a source of blind spots, resulting in the need for a
waiting interval to obtain the desired detection accuracy. It should
also be noted that measurements can be concurrent on one proces-
sor and non-concurrent on another (e.g., Flush, cf. Section 6.1).
Going Windowless. Cache measurements that are preserving and
concurrent can be performed back-to-back while maintaining their
detection accuracy. As a result, they enable a windowless paradigm
that maximizes their time resolution. This paradigm first prepares
the relevant cache state, and then continuously measures it until an
event is observed. Only upon detection of an event, the preparation
phase is repeated to continue monitoring for events.
In Prime+Abort [18], the cache measurement occurs implicitly,
through the TSX abort. Hence, it is preserving and concurrent, and
has a natural windowless instantiation (cf. Figure 1ii-F). Although
it is advertised as a distinguishing feature for Prime+Abort, other
cache attack techniques can also avoid intermittent wait stages.
Van Bulck et al. [56] demonstrate a windowless Flush+Flush [25]
(cf. Figure 1ii-G). On some platforms, Flush measurements are non-
concurrent (cf. Section 6.1). If the detection accuracy is unsatisfac-
tory, one can resort to a windowed instantiation, as in Figure 1i-D.
We note that even Prime+Probe can be windowless [51] (cf.
Figure 1ii-H), provided that the Probe measurement does not access
more congruent addresses than the associativity 𝑊 of the target
structure. Indeed, it is preserving (if all 𝑊 lines are simultaneously
in the target structure, they will still be after a repeated access)
and concurrent (an event will cause a miss on at least one of the
attacker’s lines at some point, regardless of overlap.)
Time Resolution. The advantage of windowless techniques is
that their time precision is only fundamentally determined by the
throughput of the measurement phase. Therefore, the duration of
the preparation phase is of secondary importance for the resolution,
as it only needs to be performed right after detecting an event.
3.3 This Work: Prime+Scope
This work sets out to optimize the resolution of cache-timing at-
tacks, while maintaining only the basic requirements of cache con-
tention to ensure that the technique is future-proof and suitable
for restricted environments. In particular, we do not rely on shared
memory between attacker and victim, or special ISA or processor
features (e.g., clflush or Intel TSX). We achieve this by organizing
the cache state such that the contention measurement is repeatable,
i.e., it is preserving and concurrent, and optimally short, i.e., it con-
sists of a single cache access. We call this technique Prime+Scope,
and depict it in Figure 1ii-I. In the following section, we outline its
core principles and instantiate it for different cache hierarchies.
4 PRIME+SCOPE
4.1 Threat Model
The adversary assumed in this work is able to execute unprivileged
code on the same physical processor as a victim program. The
attacker code need not be executed on the same core as the victim
code, and the attacker is not assumed to be able to interrupt or
otherwise control the victim program. Furthermore, we do not
assume that attacker and victim have a shared memory region.
4.2 General Description
As described in Section 2.1, modern cache hierarchies comprise
different levels. In what follows, 𝐶𝑆 denotes the shared and inclusive
cache structure in which contention is to be measured, and 𝐶𝑃
denotes one of the attacker’s private caches (e.g., the L1 cache).
Compared to existing cache contention channels, Prime+Scope
has two additional core requirements:
1 The eviction candidate in the shared and inclusive target struc-
ture (𝐶𝑆) can be accurately predicted.
2 Reads served from a lower-level cache (𝐶𝑃) do not influence
the replacement state of the target structure (𝐶𝑆).
1 Eviction Candidate. When a new line is to be installed into a
cache set, among all available lines (ways) in the set, a chosen one is
replaced with the new line. In this paper, we call that chosen line the
Eviction Candidate (EVC). The candidate is determined by the cache
replacement policy, which is implemented at the cache-set level as
a state machine. For instance, the eviction candidate for the LRU
policy is the cache line that has least recently been used. Though
modern processors implement more sophisticated replacement poli-
cies, they are often deterministic [1, 2, 11]. Therefore, specific access
patterns can mold the replacement policy machinery into a state
where a chosen cache line is the eviction candidate [11, 61].
Awareness of the EVC in 𝐶𝑆 permits to observe contention by
only measuring EVC latency, as a new cache line fill evicts the
EVC by definition. However, the attacker suffers from the observer
effect, i.e., measuring the access latency of the EVC may change
it to another line. To make the measurement preserving, Prime+
Scope relies on another common property of multi-level caches.
2 Low-Level Reads. Prior work observed that the replacement
state of inclusive Intel LLCs only depends on memory requests
served by the LLC, not those served by the lower-level caches [2, 11,
59]. Instead of bypassing this filtering property (e.g., by enforcing
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2909Attacker
Victim
Attacker
Victim
Prime+Probe
Prime+Scope
𝐶𝑃
𝐶𝑆
S
S
➠
𝐶𝑃
𝐶𝑆
➠
(i) Prime fixes S as the EVC in
𝐶𝑆, which remains the case for
following Scope operations.
(ii) The victim access evicts S
(=EVC) from 𝐶𝑆 and 𝐶𝑃 , result-
ing in high access latency for S.
Figure 2: Working principle of Prime+Scope
L1/L2 misses), our work explicitly relies on it to make the cache
measurement preserving, and thus, overcome the observer effect.
Prime+Scope. Based on these two key ingredients, we propose
Prime+Scope as a windowless technique to monitor cache con-
tention. It allows an attacker to monitor victim accesses to a prede-
termined target address in two steps. The Prime step serves two
purposes, as in Figure 2i. First, it evicts the target from the 𝐶𝑆 using
an eviction set. Second, it performs the eviction with a specific ac-
cess pattern that fixes a chosen line from the eviction set, denoted
as scope line (S), as the EVC in 𝐶𝑆 (the shared and inclusive high-
level structure), while maintaining its presence in 𝐶𝑃 (the lower-level
caches). Afterwards, the preserving and concurrent Scope step con-
tinuously fetches S from 𝐶𝑃, and measures the access latency. As
it overcomes the observer effect, the relevant cache state remains
intact both in 𝐶𝑃 and 𝐶𝑆 after each Scope.
The described cache state is destroyed when the victim accesses
the target address. When this happens, as in Figure 2ii, the newly-
allocated target replaces S, as it is the EVC. Because 𝐶𝑆 is inclusive
of 𝐶𝑃, the copy of S is also evicted from 𝐶𝑃. The next Scope will
detect this event through a high access latency to S.
4.3 Instantiation
Cache Hierarchy. For processors with inclusive last-level caches
(LLC), such as the majority of Intel’s desktop CPUs or server CPUs
until 2018, the core-shared and inclusive LLC itself can instantiate
𝐶𝑆, and the core-private L1 caches can instantiate 𝐶𝑃. Most Intel
servers since 2018 have non-inclusive LLCs. For such processors,
the CD is shared and inclusive [65], and can hence instantiate 𝐶𝑆.
Measurement: Scope. On all tested platforms (cf. Section 5), we
found that requests served by 𝐶𝑃 indeed preserve the EVC of 𝐶𝑆.
The Scope continuously measures the access latency of the scope
line S (=EVC), and terminates as soon as the access time exceeds
a predetermined threshold, indicating the occurrence of the event.
As in Figure 3, Prime+Scope measurements need to detect whether
one cache line is served from L1, vs. from RAM (inclusive) or LLC
(non-inclusive). In comparison, Prime+Probe measurements must
distinguish "𝑊 lines in 𝐶𝑆" from "less than 𝑊 lines in 𝐶𝑆".
Preparation: Prime. Prime+Scope is predicated on the existence
and knowledge of a memory access pattern that prepares the cache
state for repeated, single-access measurements. Concretely, we are
looking for Prime patterns, consisting of accesses to 𝑊 different
addresses that satisfy the following requirements simultaneously:
R𝐴. have high eviction rate (> 99.5%)
R𝐵. install a specific line S as the eviction candidate in 𝐶𝑆
R𝐶. keep the line S in 𝐶𝑃
event
no event
Inclusive
Non-Inclusive
L1
L1
event
no event
L1/L2/LLC
L1/L2
S
S
RAM
LLC
Figure 3: Prime+Probe monitors a full set in LLC (incl.) / CD
(non-incl.) and detects eviction to RAM/LLC. Prime+Scope
monitors one line in L1, and detects eviction to RAM/LLC.
Requirement R𝐴 is a traditional requirement for cache contention
attacks; otherwise, the victim access might not evict any of the
attacker’s lines. Requirements R𝐵 and R𝐶 are unique to Prime+
Scope, so we cannot rely on patterns established in prior work. In
particular, we identify the following challenges.
Challenge-LLC: Keeping the EVC in L1. Taken at face value,
requirements R𝐵 and R𝐶 are contradictory. Assume we want to
install line S as the EVC in 𝐶𝑆. While requirement R𝐵 suggests
to access S less frequently than the other lines in the eviction set,
to ensure it becomes the EVC in 𝐶𝑆, requirement R𝐶 suggests to
access S more frequently than the others, to ensure it is kept in 𝐶𝑃.
Challenge-CD: Controlling the EVC. Prior work [65] observed
that traditional eviction strategies do not perform well on the CD
(R𝐴). This poses a challenge for Prime+Scope, as controlling the
EVC (R𝐵) is strictly harder than only evicting the target.
5 FINDING EFFICIENT PRIME PATTERNS
This section covers the preparation of the cache state such that
subsequent measurements can be performed with a single repeat-
able cache access. Although the Prime duration has limited impact
on the time precision (cf. Section 3.2), we opt to implement the
Prime step with fast and accurate access patterns. To find them, we
propose PrimeTime, an automated gray-box search methodology.
To understand the nomenclature of Prime patterns, and how
PrimeTime finds them, an example pattern is shown in Figure 4
together with its translation into a code snippet. It encodes the
access sequence of lines in the eviction set, along with the stride
(gap) between indices, and the amount of repetitions. This snippet
uses the first line of the eviction set (evset[0]) as the scope line S,
which becomes the EVC after a successful Prime with the snippet.
4
Repeat:
2
Stride:
Pattern
R4_S2_P01S2
for (r =0; r 2)
12
Figure 4: Translation of Prime access patterns into code
snippets. After a successful prime, the scope line S=evset[0]
is the EVC in the LLC, while remaining present in L1.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2910Table 1: Applicability of Prime+Scope to various CPU microarchitectures, along with a top-ranking access pattern as discov-
ered by PrimeTime. Each pattern achieves (median) EVCr of > 99.9% at the indicated (median) cycle cost.
CPU
Intel Core i7-9700K
Intel Core i7-7700K
Intel Core i5-7500
Intel Core i7-6700
Intel Core i5-6500
Intel Core i7-4790
Intel Core i5-4590
Intel Core i7-3770
Intel Core i5-3450
Intel Core i5-2400
Intel Xeon Platinum 8280
Intel Xeon Platinum 8180
Year Microarchitecture
2018 Coffee Lake
2017 Kaby Lake
2017 Kaby Lake
2015
Skylake
2015
Skylake
2013 Haswell
2013 Haswell
2012
2012
2011
2019 CascadeLake-SP
2017
Ivy Bridge
Ivy Bridge
Sandy Bridge
Skylake-SP
LLC type
inclusive
inclusive
inclusive
inclusive
inclusive
inclusive
inclusive
inclusive
inclusive
inclusive
non-incl.
non-incl.
𝐶𝑆 𝑊𝐶𝑆
12
LLC
16
LLC
12
LLC
16
LLC
LLC
12
16
LLC
12
LLC
16
LLC
LLC
12
12
LLC
12
CD
CD
12
Prime+Scope
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
Prime Access Pattern
R4_S4_P01SS2301233210
R2_S4_P01SS2SS301230123
R3_S4_P32SS1SS00123
R3_S4_P01SS2SS301230123
R4_S4_P3SS2SS100123