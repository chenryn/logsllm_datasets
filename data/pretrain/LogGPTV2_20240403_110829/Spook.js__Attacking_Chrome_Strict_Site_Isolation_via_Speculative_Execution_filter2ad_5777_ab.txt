passwords from a leading password manager (Section VI).
• We show that Chromium-based browsers, such as Microsoft
Edge and Brave, are also vulnerable (Section VII).
B. Responsible Disclosure and Ethics
Disclosure. We shared a copy of the submission with the
security teams of Intel, AMD, Chrome, Tumblr, LastPass, and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
2700
Atlassian. Experiments performed on university systems were
coordinated with the university’s IT department and with its
Chief Security Ofﬁcer.
Ethics.
Some of our experiments require placing attack
code on publicly-accessible webpages. To limit access to such
pages and prevent capability leaks and potential 0-days in the
wild, we ensured that no links to attack pages were placed in
any webpage, and that attack pages were only activated if the
browser presents a speciﬁc cookie that we manually placed
in it. Data collection and inspection were done on a local
machine, and never on external servers.
II. BACKGROUND
A. Caches
To bridge the gap between the fast execution core and the
slower memory, processors store recently accessed memory in
fast caches. Most modern caches are set associative, meaning
that the cache is divided into a number of sets, each of which
is further divided into a ﬁxed number of ways. Each way can
store a ﬁxed-size block of data, also called a cache line, which
is typically 64 bytes on modern machines.
The Cache Hierarchy. The memory subsystem of modern
CPUs often consists of a hierarchy of caches, which in a
typical Intel CPU consists of three levels. Each core has
two L1 caches, one for data and one for instructions, and
one uniﬁed L2 cache. Additionally, the CPU has a last level
cache (LLC), which is shared between all of the cores. When
accessing memory, the processor ﬁrst checks if the data is
in L1. If not, the search continues down the hierarchy. In
many Intel CPUs, the LLC is inclusive, i.e., its contents are a
superset of all of the L1 and L2 caches in the cores it serves.
Cache Attacks. Timing access to memory can reveal informa-
tion on the status of the cache, giving rise to side-channel at-
tacks, which extract information by monitoring the cache state.
Cache-based side-channel attacks have been demonstrated
against cryptographic schemes [2, 10, 17, 37, 43, 48, 59, 77]
and other secret or sensitive data [22, 62, 64, 65, 76].
B. Speculative Execution
To further improve performance, processors execute instruc-
tions out-of-order. That is, instructions are executed as soon as
their data dependencies are satisﬁed, even if preceding instruc-
tions have not yet completed execution. In case of branches
whose condition cannot be fully determined, the processor
tries to predict the branch outcome based on its prior behavior
and speculatively execute instructions in the predicted target.
Finally, in case of a misprediction, speculatively executed
instructions become transient [36]. In this case, the processor
drops all results computed by incorrect transient execution and
resumes execution from the correct target address.
The disclosure of the Spectre [31] and Meltdown [36]
attacks demonstrated that, contrary to contemporary beliefs,
transient execution can have severe security implications.
While the processor disposes of results computed by transient
instructions, the effects of transient execution on microar-
chitectural components, including caches, are not reversed.
Transient-execution attacks exploit this effect by triggering
incorrect
transient execution, accessing information which
is leaked via microarchitectural channels. Since the initial
discovery of transient-execution attacks, many variants [8]
have emerged, including variants of Spectre [29, 31, 34, 39]
and of Meltdown [9, 36, 38, 54, 61, 69, 70, 71, 72].
C. Microarchitectural Attacks in Browsers
Side-channel techniques have also been demonstrated us-
ing code running in sandboxed browser environments. Here,
browser-based cache attacks have been used to classify
user activity [47, 64, 65], and even extract cryptographic
keys [16]. Attacks exploiting abnormal timings on denormal
ﬂoating-point values have been used for pixel stealing at-
tacks [3, 32, 33] while Rowhammer-induced bit ﬂips were also
demonstrated using browser-based code [11, 15, 23]. Finally,
browser-based transient-execution memory read primitives us-
ing JavaScript code have also been demonstrated [31, 39, 41],
albeit without extracting sensitive information.
Eviction Set Construction. Cache attacks in JavaScript often
require the ability to evict a value out of the cache. However,
without native functionalities such as clflush, the attacker
has to exploit the cache architecture for evictions. For the L1
data cache, eviction sets can be constructed using page offsets,
as any two elements that have the same page offset belong to
the same eviction set. However, as there is no heuristic for
mapping elements to L3 eviction sets, a more sophisticated
approach is required. Vila et al. [73] describes a method for
generating L3 eviction sets in the Chrome browser.
Leaky.page. Google has recently released leaky.page,
a JavaScript-based Spectre Proof-of-Concept (PoC) which
demonstrates
information using
Spectre v1 techniques [20]. More speciﬁcally, leaky.page ﬁrst
locates an instance of a TypedArray JavaScript object,
whose length information and data pointer reside in different
cache lines. It then evicts the array’s length from the L1 cache,
forcing speculation past the array length check upon array
access. At the same time, the cache line containing the array’s
data pointer is not ﬂushed and remains cached. Hence the
attacker can perform a transient out-of-bounds array access,
leaking the obtained data via a cache channel.
recovering out-of-bounds
We note, however, that the use of 32-bit array indices in
JavaScript limits the effectiveness of leaky.page to the 4 GB
heap containing the TypedArray object. This limitation is
signiﬁcant, as sensitive information (e.g., cookies, passwords,
HTML DOM, etc.) is often located in different heaps and thus
remains out of leaky.page’s reach.
Rage Against The Machine Clear.
In a concurrent inde-
pendent work, Ragab et al. [53] demonstrated a new transient-
execution attack against Firefox. At a high level, Ragab et al.
[53] construct a read primitive for 64-bit addresses by injecting
arbitrary ﬂoating-point values in a transient-execution window
created by a ﬂoating-point machine clear. Using this technique,
they demonstrate a PoC of a transient type confusion attack on
Firefox, with all the mitigations enabled, allowing an attacker
to read arbitrary memory addresses.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
3701
However, we note that
the attack of Ragab et al. [53]
signiﬁcantly differs from Spook.js. In particular, their attack is
a variant of LVI [70], which exploits the ﬂoating-point unit and
is therefore classiﬁed as a Meltdown-type attack. In contrast,
Spook.js is a Spectre-type attack, exploiting incorrect branch
prediction in the JavaScript type check to trigger speculative
type confusion. Finally, Ragab et al. [53] constructs a 64-bit
read primitive but does not extract sensitive information.
D. Strict Site Isolation
The ever-increasing complexity of the Internet has forced
major design changes in modern browsers. Rather than using
a single monolithic process, browsers adopted a multi-process
architecture where multiple unprivileged rendering processes
render untrusted and potentially malicious webpages [1, 46,
55, 78]. In addition to the increased stability from crashes
offered by this design, using unprivileged rendering processes
compartmentalizes the browser, limiting the reach of attacks
that exploit vulnerabilities in the browser’s rendering engine.
Site Isolation.
Instead of grouping webpages arbitrarily into
rendering processes, strict site isolation [56] aims to group
them based on the location they are served from, such that
mutually distrusting domains are separated. The deployment
of strict site isolation was accelerated following the demon-
stration of transient-execution attacks in browsers [31, 39].
eTLD+1 Consolidation. Chrome’s strict site isolation uses
the effective top-level domain plus one sub-domain (eTLD+1)
as the deﬁnition of a security boundary, and ensures that
multiple webpages are rendered by the same process only
if they are all served from locations that share the same
eTLD+1. For example, Chrome will separate example.com
and example.net as their top-level-domains, .net and
.com, are different. example.com and attacker.com
are also separated into different processes due to a difference in
their ﬁrst sub-domains (example and attacker). Finally,
store.example.com and corporate.example.com
are allowed to share the same process since they both share
the same eTLD+1, example.com.
Origin Isolation. We note that Chrome could have opted
for a stricter isolation, using the website’s entire origin.
However, origin isolation might break a non-negligible amount
of websites, as 13.4% of page loads modify their origin via
document.domain [56]. Finally, Chrome’s process con-
solidation is not only limited to websites but also includes
mutually distrusting extensions. See Section VI.
E. Chrome’s Address Space Organization
Despite being a 64-bit application, Chrome still uses 32-
bit values to represent object pointers and array indices. More
speciﬁcally, array indices are viewed as a 32-bit offset from
the array’s starting address, while 32-bit pointers represent the
offset from a ﬁxed base address in memory, which is often
termed as the object’s heap. Although this design increases
complexity, the smaller pointer size achieves a 20% reduction
in Chrome’s memory footprint [63].
Partitions. Consequently, Chrome is limited to allocating ob-
jects within a span of 4 GB, referred by Chrome as partitions.
Chrome allocates objects into partitions based on the object
type. Additionally, Google claims that this partition design also
improves browser security, as linear overﬂows cannot corrupt
data outside their corresponding partition [19].
Chrome Object Layout. When allocating buffer-like objects,
Chrome follows a two-stage process. First, it allocates the
memory required for the buffer storing the object’s content.
Then, it allocates a metadata structure, which holds a pointer
to the object’s content buffer (called the back-pointer), as
well as additional information such as the object’s type-id
and the buffer length. Finally, certain JavaScript data struc-
tures, such as Uint8Arrays, often have their metadata
structure and content’s buffer located in two different heaps.
In this case, the object must use a 64-bit back-pointer
to be able to point outside the partition holding the object’s
metadata. See Figure 1.
Figure 1: Representation of a Uint8Array array(1,2,3,4) object
with data pointer in a different heap.
F. Chrome’s Optimizer
Being a weakly typed language, JavaScript functions might
be executed on arguments of different types. For example,
function f(x,y) {return x+y;} can be used to add
two integers, two ﬂoats, or even concatenate strings. Given the
numerous different ways that the same high-level code might
be used at runtime, the bytecode generated by Chrome must
support multiple use cases, rendering it inefﬁcient.
To improve performance, Chrome dynamically modiﬁes the
generated code once its run-time use cases are known. More
speciﬁcally, Chrome executes the JavaScript bytecode while
recording statistics regarding the inputs to certain operations.
Based on the collected statistics, Chrome uses the Turbo-
Fan [68] compiler to generate highly optimized machine code,
using a technique called speculative optimization [42]. Here,
Chrome essentially assumes that future runs will use input
types similar to past runs, and specializes the code to handle
these cases. Finally, in case a code optimized for a speciﬁc
input type is executed with a different type, it is deoptimized
back to the generic yet less efﬁcient version.
III. THREAT MODEL
Unless stated otherwise, in this paper we target Chrome
version 89 in its default conﬁguration, with strict site isolation
enabled. For the website-based attacks described in this paper,
we follow a threat model similar to the related-domain attacker
model of [5, 66], and assume that the attacker is able to upload
JavaScript code to a page with the same eTLD+1 domain as
the targeted page. In Section V we present several examples of
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:13 UTC from IEEE Xplore.  Restrictions apply. 
4702
0 1234 bytes type-id...lengthback-ptr(64-bits)..buffermetadata1234Buffer partition0 bytes43240 48 bytesHeapsuch scenarios, including personal pages on popular platforms.
We further assume that the attacker’s page is rendered in the
victim’s browser. Finally, for the malicious extension attacks
in Section VI, we assume that the victim has downloaded and
installed an attacker-controlled Chrome extension.
IV. SPOOK.JS: MOUNTING SPECULATIVE EXECUTION
ATTACKS IN CHROME
In our attacks,
We now present Spook.js, a JavaScript-based transient-
execution attack that can recover information across security
domains running concurrently in the Chrome browser. In ad-
dition to defeating all side-channel countermeasures deployed
in Chrome (e.g., low-resolution timer), Spook.js overcomes
several key challenges left open in previous works.
[C1] Strict Site Isolation. Strict site isolation prevents cross-
site attacks. Website consolidation suggests an avenue for
overcoming the challenge, but there is a need for a repeatable
procedure that lets the attacker consolidate sites.
[C2] Array Index Limitations.
The use of 32-bit array
indices in JavaScript restricts bounds check bypasses to re-
cover values only from the same JavaScript heap. To retrieve
all sensitive information, the attacker needs to be able to
transiently access the full address space.
[C3] Deoptimization.
inducing mis-
speculation also causes deoptimization that prevents multi-
round attacks. For a successful attack, the attacker needs to
cause mis-speculation without causing deoptimization.
[C4] Limited Speculation Window.
Overcoming [C2]
and [C3] requires a long speculation window. The attacker
needs a consistent method that ensures that the processor does
not detect mis-speculation before the transient code has the
opportunity to retrieve the sensitive data and transmit it.
A. Overcoming [C1]: Obtaining Address Space Consolidation
To mount Spectre-type attacks, the attacker and target web-
sites should reside in the same address space. Chrome’s strict
site isolation feature aims to prevent cross-domain attacks by
segregating security domains into different address spaces.
However, Chrome does consolidate websites with the same
eTLD+1 domain into the same process. We now discuss
how an attacker can exploit this consolidation to achieve co-
residency between the attacker and target pages.
Exploiting iframes.
is possible to
achieve consolidation by embedding iframes containing
sensitive
eTLD+1
the
domain
can
attacker’s
contain
from
accounts.example.com. If the targeted user is already
logged in to accounts.example.com,
the embedded
iframe may contain sensitive personal information.
content originating from the
For
as
the
page,
invisible
We ﬁrst observe it
attacker.example.com
content
rendering
iframe
same
example,
attacker’s
page.
an
While effective, this method cannot operate on pages that
refuse to be rendered inside embedded iframes, e.g., through
setting X-Frame-Options to deny. Because many attacks
exploit weaknesses in iframes, setting this option is a recom-
mended security measure and is employed by many websites.
Obtaining Cross Tab Consolidation. When experiencing
memory pressure, Chrome attempts to reduce its memory con-
sumption by consolidating websites running in different tabs,
provided that these have the same eTLD+1. Thus, a tab render-
ing attacker.example.com might be consolidated with
another tab rendering accounts.example.com. More-
over, we observe that once consolidation occurs, Chrome
tends to add newly-opened websites sharing the same eTLD+1
domain, rather than create a new process for them.
Abusing window.open.
Finally, we observe that
to consolidate pages opened using the
Chrome tends
JavaScript window.open() API, when these share the
eTLD+1 domain of
the opener. Thus, code running on
attacker.example.com can use window.open to open
accounts.example.com in a new tab. While not stealthy,
this method seems particularly reliable and does not require
memory pressure to obtain consolidation.
Experimental Results. We measure the effectiveness of
each of the consolidation approaches described above using
Chrome 89.0.4389 (latest at the time of writing) on a ma-
chine featuring an Intel i7-7600U CPU and 8 GB of RAM,
running Ubuntu 20.04. We ﬁnd that embedded iframes are
always consolidated if they have the same eTLD+1 domain as
the website embedding them. Likewise, we achieve perfectly
reliable consolidation with window.open.