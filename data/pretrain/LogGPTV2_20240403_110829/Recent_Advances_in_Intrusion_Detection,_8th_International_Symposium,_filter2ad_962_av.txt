26. M. Rinard, C. Cadar, D. Dumitran, D. Roy, T. Leu, and J. W Beebee. Enhancing
Server Availability and Security Through Failure-Oblivious Computing. In Pro-
ceedings 6th Symposium on Operating Systems Design and Implementation (OSDI),
December 2004.
27. S. Sidiroglou, J. Ioannidis, A. D. Keromytis, and S. J. Stolfo. An Email Worm
Vaccine Architecture. In Proceedings of the 1st Information Security Practice and
Experience Conference (ISPEC), April 2005.
28. S. Sidiroglou and A. D. Keromytis. A Network Worm Vaccine Architecture. In
Proceedings of the IEEE International Workshops on Enabling Technologies: In-
frastructure for Collaborative Enterprises (WETICE), Workshop on Enterprise Se-
curity, pages 220–225, June 2003.
29. S. Sidiroglou, M. E. Locasto, S. W. Boyd, and A. D. Keromytis. Building a Reactive
In Proceedings of the USENIX Annual
Immune System for Software Services.
Technical Conference, pages 149–161, April 2005.
30. S. Singh, C. Estan, G. Varghese, and S. Savage. Automated Worm Fingerprinting.
In Proceedings of Symposium on Operating Systems Design and Implementation
(OSDI), 2004.
31. A. Smirnov and T. Chiueh. DIRA: Automatic Detection, Identiﬁcation, and Repair
of Control-Hijacking Attacks. In The 12th Annual Network and Distributed System
Security Symposium, February 2005.
32. A. Somayaji and S. Forrest. Automated Response Using System-Call Delays. In
Proceedings of the 9th USENIX Security Symposium, August 2000.
33. R. Sommer and V. Paxson. Enhancing Byte-Level Network Intrusion Detection
Signatures with Context. In Proceedings of the ACM Conference on Computer and
Communications Security (CCS), pages 262–271, 2003.
FLIPS: Hybrid Adaptive Intrusion Prevention
101
34. A. Stig, A. Clark, and G. Mohay. Network-based Buﬀer Overﬂow Detection by
Exploit Code Analysis. In AusCERT Conference, May 2004.
35. S. Stolfo. Worm and Attack Early Warning: Piercing Stealthy Reconnaissance.
IEEE Privacy and Security, May/June 2004.
36. G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas. Secure Program Execution
Via Dynamic Information Flow Tracking. SIGOPS Operating Systems Review,
38(5):85–96, 2004.
37. T. Toth and C. Kruegel. Accurate Buﬀer Overﬂow Detection via Abstract Payload
In Proceedings of the Symposium on Recent Advances in Intrusion
Execution.
Detection (RAID), 2002.
38. K. Wang and S. J. Stolfo. Anomalous Payload-based Network Intrusion Detection.
In Proceedings of the 7th International Symposium on Recent Advances in Intrusion
Detection (RAID), pages 203–222, September 2004.
Towards Software-Based Signature Detection for
Intrusion Prevention on the Network Card
H. Bos1 and Kaiming Huang2
1 Vrije Universiteit, Amsterdam, The Netherlands
PI:EMAIL
2 Xiamen University, Xiamen, China
PI:EMAIL
Abstract. CardGuard is a signature detection system for intrusion de-
tection and prevention that scans the entire payload of packets for suspi-
cious patterns and is implemented in software on a network card equiped
with an Intel IXP1200 network processor. One card can be used to pro-
tect either a single host, or a small group of machines connected to a
switch. CardGuard is non-intrusive in the sense that no cycles of the
host CPUs are used for intrusion detection and the system operates at
Fast Ethernet link rate. TCP ﬂows are ﬁrst reconstructed before they
are scanned with the Aho-Corasick algorithm.
Keywords: distributed ﬁrewall, network processors.
1 Introduction
Intrusion detection and prevention systems (IDS/IPS) are increasingly relied
upon to protect network and computing resources from attempts to gain unau-
thorised access, e.g., by means of worms, viruses or Trojans. To protect comput-
ing resources on fast connections, it is often desirable to scan packet payloads
at line rate. However, scanning traﬃc for the occurrence of attack signatures is
a challenging task even with today’s networks. Moreover, as the growth of link
speed is sometimes said to exceed Moore’s law, the problem is likely to get worse
rather than better in the future. Worms especially are diﬃcult to stop manually
as they are self-replicating and may spread fast. For example, the Slammer worm
managed to infect 90% of all vulnerable hosts on the net in just 10 minutes [1].
In this paper, rather than performing signature scanning at a centralised
ﬁrewall or on the end-host’s CPU, we explore the feasibility of implementing a
complete signature detection system (SDS) in software on the network card. The
notion of a distributed ﬁrewall, proposed by Bellovin in 1999, has gained pop-
ularity in recent years [2, 3]. However, most of these systems do not implement
payload inspection at all. Recently, Clark et al. proposed to use FPGAs for sig-
nature detection [4]. The disadvantage of FPGAs and other hardware solutions
is that they are complex to modify (e.g., to change the detection algorithm). For
this reason, we explore what rates can be sustained in a software-only solution
running in its entirety on a network card equiped with a network processor that
A. Valdes and D. Zamboni (Eds.): RAID 2005, LNCS 3858, pp. 102–123, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006
Towards Software-Based Signature Detection for Intrusion Prevention
103
was introduced half a decade ago. This is one of the extremes in the design space
of where to perform signature detection and to our knowledge this option has
not been explored before.
The resulting SDS, known as CardGuard, is intended to protect either a
single end-user’s host, or a small set of hosts connected to a switch. Throughout
this project, our goal has been to make the SDS an inexpensive device with an
eye on making it competitive with large ﬁrewalls. At the same time, the SDS
should be fast enough to handle realistic loads. In this paper, we assume that the
bandwidth requirements of individual users do not exceed a few hundred Mbps.
We require the system to handle such loads under normal circumstances, i.e.,
when the number of intrusion attempts compared to regular traﬃc is reasonably
small. In exceptional circumstances, when the system is under heavy attack,
we consider gradual degradation in performance acceptable. In that case, the
integrity of the node is more important than the ability to handle high speeds.
Phrased diﬀerently, we aim to protect against unwanted content (e.g., intrusion
attempts, or spam) and not against denial of service attacks. Finally, we focus on
the computationally hard problem of network payload pattern matching, rather
than the less compute intensive problems of header inspection and anomaly
detection. The latter domain is a well-established ﬁeld of research whose results
can even be found in commercial network equipment [5, 6, 7, 8, 9].
The contributions in this paper fall into several categories. First, we demon-
strate that network processors can be used for inspecting every single byte of
the payload at realistic rates. Second, in a low-end conﬁguration we present a
software-based SDS complete with TCP stream reconstruction and an advanced
scanning algorithm (primarily Aho-Corasick [10], although regular expression
matching can also be catered to) that scales to thousands of signatures. Third,
we employ a novel way of using the memory hierarchy of the Intel IXP network
processor to exploit locality of reference in the scanning algorithm.
1.1 Distributing the Firewall
Most current approaches to IDS/IPS involve a high-performance ﬁrewall/IDS
at the edge of the network. All internal nodes are assumed to be safe and all
external nodes are considered suspect. The ﬁrewall closes all but a few ports and
in an advanced system may even scan individual packets for the occurrence of
attack patterns. Compared to a distributed ﬁrewall, this approach has a number
of drawbacks. First, it does not protect internal nodes from attacks originating
within the intranet. Once an internal node has been compromised, by whatever
means, all nodes in the intranet are at risk.
Second, as the ﬁrewall represents the intranet’s link to the outside world, the
volume of traﬃc is very large which may render payload scans diﬃcult or even
infeasible. Besides speed, managing per-ﬂow state is an issue. Some researchers
have suggested that it is diﬃcult to keep per-ﬂow state in the ﬁrewall [7]. Others
propose to keep per-ﬂow state, but admit that more work on state management
is needed (Bro [11] and TRW [12]). Some approaches to attack detection use
aggregate behaviour to get around the need to maintain per-ﬂow state [13], or in
104
H. Bos and K. Huang
case of signature detection, limit themselves to per-packet scans rather than full
TCP streams [14]. However, attacks may span a number of packets each of which
may be harmless in and oﬀ itself. Hence, ﬂow reconstruction is a requirement for
reliable signature detection in the payload. As packets arrive out of order, this
probably means that the per-ﬂow state now also contains part of the payload.
While this is rather expensive at a centralised ﬁrewall, it can be easily done at
the end-host (e.g., if the ﬁrewall is pushed back to the end host).
A third drawback of a centralised ﬁrewall, is that it often protects a het-
erogeneous collection of machines, including webservers, mailservers, databases,
workstations running hardly any services at all, etc. In principle, there is no
reason to subject traﬃc to security checks pertaining to a particular vulnerable
version of a service, when it is destined for hosts that do not run this service, or
that have a patched version of the service. Firewalls at the edge of the intranet
have no way of discriminating among the hosts and services that lie behind it.
For instance, they don’t know whether host X runs the patched or unpatched
webserver (or even whether it runs a webserver at all).
A fourth drawback is that centralised ﬁrewalls tend to close all ports except
a select few, such as those used for webtraﬃc. As a consequence, we observe
that all sorts of new protocols are implemented on top of port 80, defeating the
purpose. Another consequence is inconvenience to users that experience problems
when using software (e.g., video-conferencing tools) with external parties. While
per-host ﬁrewall conﬁguration is possible, it is more complex, especially as IP
addresses in the intra-net often are not constant.
1.2 The IXP1200 Network Processor
In the remainder of this paper, we describe CardGuard an SDS (and crude IPS)
implemented on an IXP1200 network processor unit (NPU). The choice for the
IXP1200 was motivated by the fact that it may now be considered yesterday’s
technology and, hence, potentially cheap. Still, CardGuard performs payload
scanning at realistic rates, irrespective of the size or number of the patterns.
Moreover, the presence of CardGuard is transparent to end-applications.
NPUs have emerged in the late 1990s to cope with increasing link speeds. The
idea is to push packet processing to the lowest possible level in the processing
hierarchy, e.g., before traﬃc even hits a host’s PCI bus. The Intel IXP1200 used
for this work contains on-chip one general-purpose StrongARM processor and six
independent RISC cores, known as microengines. NPUs have been successfully
employed in many network devices, such as routers and monitors. In addition,
while previous work has shown that they can be used for other tasks as well [15],
there have been few attempts to use them to implement the computationally
intensive task of intrusion detection. Often such attempts have been limited to
header processing (e.g. [16]). A notable exception is found in [4] which uses the
IXP for port ﬁltering and TCP stream reconstruction. The TCP streams are
then fed into a string matching engine implemented in hardware (FPGA) on a
separate card. In contrast, we use a single IXP1200 to handle all of the above
tasks and all processing is in software. Even so, the performance is comparable
Towards Software-Based Signature Detection for Intrusion Prevention
105
to the approach with two cards and hardware-based matching. In addition, the
system in [4] is not able to protect more than one host.
CardGuard employs the well-known Aho-Corasick algorithm for performing
high-performance pattern searches [10]. The same algorithm is used in the latest
versions of the Snort intrusion detection tool [14]. In our work, the algorithm
runs entirely on the microengines of the network processor. Moreover, as we veri-
ﬁed experimentally that Aho-Corasick exhibits locality of reference, CardGuard
uses a hierarchical memory model where frequently accessed data is in faster
memory.
On the surface, CardGuard shares some characteristics with what is known as
‘TCP oﬄoad’, i.e., the implementation of TCP protocol processing on the NIC.
TCP Oﬄoad Engines (TOEs) have recently come under ﬁre, mainly for being a
bad match to the application domain for which they are intended, and because
TCP processing need not be a very expensive task anyway [17]. While the jury
may be out on the merits and demerits of TOEs, we argue that the problem
domain for CardGuard is very diﬀerent (e.g., payload scanning is much more
expensive than processing TCP headers). If successful, the oﬄoading of full pay-
load pattern matching would be very beneﬁcial indeed. Similarly, whereas TOEs
try to alleviate the burden of host processors and in doing so may introduce scal-
ability problems, CardGuard is trying to address scalability issues caused by per-
forming all intrusion detection at a central point (the ﬁrewall). Also, CardGuard
provides functionality that is not equivalent to that of a centralised ﬁrewall, as
it also protects hosts from attacks originating in the intranet. Still, it resembles
a stand-alone ﬁrewall in the sense that traﬃc is scanned before it arrives at a
host. As such, it is potentially less dependent on the correct conﬁguration of the
end host than a solution where intrusion prevention takes place in the host OS
(assuming this were possible at high speeds).
Most importantly perhaps is that this paper explores for the ﬁrst time one of
the extremes in the design space for in-band signature detection: a software-only
solution on the NIC. Centralised solutions, implementations on the host pro-
cessor and even hardware solutions on the NIC have already been studied with
some success. CardGuard will help developers to evaluate better the diﬀerent
design options.
1.3 Constraints
Programming in a resource-constrained environment so close to the actual hard-
ware is considerably harder than writing equivalent code in userspace. Before
we discuss the SDS in detail, we want to point out that we envision our work
as a component (albeit an important one) in a full-ﬂedged intrusion prevention
system. Although we achieved a fully functional implementation of CardGuard,
we stress that this work is a research study that explores an extreme solution to
intrusion detection rather than a production-grade IPS. Although it is clear that
IDSs and IPSs may be more complex than what can be oﬀered by a single tool
like snort [14], we aim for functionality that is similar to snort’s signature de-
tection. In essence, CardGuard explores how much processing can be performed
106
H. Bos and K. Huang
on packet payloads using a cheap software-only solution running entirely on the
network card. To make the solution cheap1, the card is equiped with an Intel
IXP1200 which may be considered yesterday’s technology. As we deliberately
limited ourselves to an instruction store per microengine of just 1K instructions,
we are forced to code as eﬃciently as possible: every instruction is precious. As
a consequence, complex solutions like regular expression matching on the chip’s
microengines are out of the question. Instead, we try to establish (i) a bound on
the link rate that can be sustained when the payload of every single packet is
scanned for thousands of strings, while (ii) using hardware that is by no means
state of the art. All packets corresponding to rules with regular expressions are
therefore handled by the on-chip StrongARM processor (using almost the same
regular expression engine as used by snort). Fortunately, the vast majority of
the patterns in current snort rules does not contain regular expressions2.
Even though CardGuard is an SDS and not a complete IDS or IPS, we did
conﬁgure it as an IPS for testing purposes. In other words, the card automatically
generates alerts and drops connections for ﬂows that contain suspect patterns.
The resulting IDS/IPS is crude, but this is acceptable for our purposes, as we are
interested mainly in the rates that can be sustained with full payload inspection.
In the remainder of the paper we sometimes refer to CardGuard as an IDS/IPS.
In this paper, we consider only the SDS on the card. The control and man-
agement plane for installing and removing rules on the cards is beyond the scope
of this paper. We are working on a management plane that allows sysadmins to
schedule automatic updates for CardGuard (e.g., to load new signatures). These
updates require the system to be taken oﬄine temporarily and may therefore
best be scheduled during ‘quiet hours’. The system itself is modelled after the
control architecture for distributed ﬁrewalls proposed in [3]. Note that since
management traﬃc also passes through CardGuard, the management messages
are encoded, to prevent them from triggering alarms.
1.4 Outline
The remainder of this paper is organised as follows. In Section 2 the use of
Aho-Corasick in intrusion detection is discussed. Section 3 presents the hard-
ware conﬁguration, while Section 4 provides both an overview of the software
architecture as well as implementation details. In Section 5, experimental results
are discussed. Related work is discussed throughout the text and summarised in
Section 6. Conclusions are drawn in Section 7.
2 SDS and Aho-Corasick
While increasing network speed is one of the challenges in intrusion detection,
scalability is another, equally important one. As the number of worms, viruses
1 ‘Cheap’ refers to cost of manufacturing, not necessarily retail price.
2 At the time of writing, less than 300 of the snort rules contain regular expressions,
while thousands of rules contain exact strings.
Towards Software-Based Signature Detection for Intrusion Prevention
107
and Trojans increases, an SDS must check every packet for more and more sig-
natures. Moreover, the signature of an attack may range from a few bytes to
several kilobytes and may be located anywhere in the packet payload. Exist-
ing approaches that operate at high speed, but only scan packet headers (as
described in [16]) are not suﬃcient. Similarly, fast scans for a small number of
patterns will not be good enough in the face of a growing number of threats
with unique signatures. While it is crucial to process packets at high rates, it
is equally imperative to be able to do so for thousands of signatures, small and
large, that may be hidden anywhere in the payload.
For this purpose, CardGuard employs the Aho-Corasick algorithm which has
the desirable property that the processing time does not depend on the size or
number of patterns in a signiﬁcant way. Given a set of patterns to search for in
the network packets, the algorithm constructs a deterministic ﬁnite automaton
(DFA), which is employed to match all patterns at once, one byte at a time. It
is beyond the scope of the paper to repeat the explanation of how the DFA is
constructed (interested readers are referred to [10]). However, for better under-
standing of some of the design decisions in CardGuard, it is useful to consider
in more detail the code that performs the matching.
2.1 Aho-Corasick Example
As an example, consider the DFA in Figure 1. Initially, the algorithm is in
state 0. A state transition is made whenever a new byte is read. If the current
state is 0 and the next byte in the packet is a ‘Q’, the new state will be 36 and
the algorithm proceeds with the next byte. In case this byte is ‘Q’, ‘h’, or ‘t’,
we will move to state 36, 37, or 43, respectively. If it is none of the above, we
move back to state 0. We continue in this way until the entire input is processed.
For every byte in the packet, a single state transition is made (although the new
state may be the same as the old state). Some states are special and represent
output states. Whenever an output state has been reached, we know that one
of the signatures has matched. For example, should the algorithm ever reach
state 35, this means that the data in the traﬃc contains the string ‘hws2’.
The DFA in Figure 1 is able to match the ﬁve diﬀerent patterns at the same
time. The patterns, shown beneath the ﬁgure, are chosen for illustration pur-
poses, but the ﬁrst four also represent the patterns that make up the real signa-
ture of the Slammer worm [1]. This worm was able to spread and infect practi-
cally every susceptible host in thirty minutes by using a buﬀer overﬂow exploit in
Microsoft SQL Server allowing the worm to execute code on remote hosts. The
ﬁfth pattern was only added to show what happens if patterns partly overlap
and has no further meaning.
If the initial state is 0 and the input stream consists of these characters:
XYZQQhsockfA, we will incur transitions to the following states: 0, 0, 0, 36, 36,
37, 38, 39, 40, 41, 42, and 0. The underlined states represent output states, so
after processing the input sequence we know that we have matched the patterns
Qhsoc and Qhsockf. By making a single transition per byte, all present patterns
contained in the packet are found.