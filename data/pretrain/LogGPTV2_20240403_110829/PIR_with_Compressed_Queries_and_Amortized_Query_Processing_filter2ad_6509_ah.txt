### Optimized Text

Each element in the collection occupies 288 bytes. In k-way replication, the producer replicates the n elements into k bins, while the consumer selects a different bin for each of the k elements during the simulation. Sharding, on the other hand, maps each element to a single bin during the producer's allocation, and the consumer uses a hash function during the simulation (this variant has a high failure rate, which we mitigate by replicating buckets). Considering that encoding is a one-time operation, the relative costs remain consistent.

Figure 15 presents the CPU time required for various operations across all implemented variants. Our hypothesis holds to a certain extent: all variants based on replication (for the producer) and hashing (for the consumer) align with our predictions. The cost of schedule generation corresponds to the time taken to solve the k balls, b bins, and w choices problem. Different allocation strategies approximate the optimal solution, with Cuckoo hashing providing the best approximation by recursively relocating elements in case of collisions (as discussed in §4.5). Encoding performance is determined by the number and cost of memory copies, as encoding involves a simple repetition code.

Our hypothesis does not hold for the PBC variant, which is a port of Pung’s Hybrid multi-retrieval protocol. This variant partially relies on the subcube batch code of Ishai et al. [52], where the final position of each input element is statically determined and does not require computing a hash function (unlike our hashing variants). This allows the schedule to be computed using a lookup table.

Finally, the goal of this experiment was to confirm that all PBCs have reasonably efficient encoding, decoding, and schedule generation procedures. Therefore, our evaluation (§7) focuses on the Cuckoo variant, as it offers the most efficient parameters and the second-lowest failure probability (k-way replication never fails but has a very high value of m).

### References

1. Akamai State of the Internet Connectivity Report.
   - <https://www.akamai.com/fr/fr/multimedia/documents/state-of-the-internet/q1-2017-state-of-the-internet-connectivity-report.pdf>, May 2017.

2. Opensignal State of Mobile Networks: USA.
   - <https://opensignal.com/reports-data/national/data-2017-08-usa/report.pdf>, Aug. 2017.

3. Pung: Unobservable communication over fully untrusted infrastructure.
   - <https://github.com/pung-project/pung>, Sept. 2017.

4. Simple Encrypted Arithmetic Library — SEAL.
   - <https://sealcrypto.org>, 2017.

5. XPIR: NFLLWE Security Estimator.
   - <https://github.com/XPIR-team/XPIR/blob/master/crypto/NFLLWESecurityEstimator/NFLLWESecurityEstimator-README>, June 2017.

6. XPIR NFLParams.
   - <https://github.com/XPIR-team/XPIR/blob/master/crypto/NFLParams.cpp>, June 2017.

7. Internet Providers with Data Caps.
   - <https://broadbandnow.com/internet-providers-with-data-caps>, Jan. 2018.

[Additional references follow the same format.]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.