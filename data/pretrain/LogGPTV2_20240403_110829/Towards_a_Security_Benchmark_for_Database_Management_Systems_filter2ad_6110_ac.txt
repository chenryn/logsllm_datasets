### Data Model for Assessing DBMS Security

**Figure 1. Data Model to Assess DBMS Security**

| Table        | Columns                          |
|--------------|----------------------------------|
| CUSTOMER     | C_ID, C_FNAME, C_LNAME, C_PHONE, C_EMAIL, C_SINCE, C_LAST_VISIT, C_DISCOUNT, C_BALANCE, C_YTD_PMT, C_BIRTH_DATE, C_DATA, C_ADDR_ID |
| ADDRESS      | ADDR_ID, ADDR_STREET1, ADDR_STREET2, ADDR_CITY, ADDR_STATE, ADDR_ZIP, ADDR_CO_ID |

After defining the data model, we need to classify each table according to the data criticality levels proposed in Subsection 2.1. Table 3 shows the proposed classification for the data model shown in Figure 1.

### Testing User Authentication and Privileges

To test mechanisms like user authentication and privileges, we need to define the set of database users who will access each of the tables and assign appropriate privileges to those users.

Considering the business represented by the data model in Figure 1, we have identified the following five database accounts (each account represents several concrete users):

- **Admin**: Database administrator.
- **Client**: Represents all clients of the online store.
- **PubMan**: Manages the publications.
- **OrderMan**: Manages and dispatches orders from clients.
- **Owner**: Owns the database tables but is not used for accessing tables through client applications. This is a common approach in typical database applications.

### Data Criticality Levels

**Table 3. Data Criticality Levels for Each Table**

| Data Criticality Level | Tables                     | Comments                                                                                             |
|------------------------|----------------------------|------------------------------------------------------------------------------------------------------|
| Level 1                | COUNTRY                    | The data can be easily recovered and does not represent confidential information.                   |
| Level 2                | ITEM, AUTHOR               | These tables contain data that must be protected against unauthorized alteration. Reading the data is not critical. |
| Level 3                | CUSTOMER, ADDRESS, ORDER, ORDER_LINE | These tables contain data that must be protected against unauthorized read and alteration. Unauthorized access to client data is critical. |
| Level 4                | USER                       | Usernames and passwords must be protected even if someone breaks into the system. The USER table must be encrypted. |
| Level 5                | CREDIT_CARD                | Credit card information is highly critical and must be extremely protected. Accesses or alterations to this data must be audited. |

### Object Privileges

**Table 4. Object Privileges Assigned to Each Account**

| Tables                 | Accounts         | Object Privileges                      |
|------------------------|------------------|----------------------------------------|
| COUNTRY                | Client, PubMan, OrderMan | select, insert, update, delete          |
| ITEM, AUTHOR           | Client, PubMan, OrderMan | select                                 |
| CUSTOMER, ADDRESS, ORDER, ORDER_LINE | Client, PubMan, OrderMan | select, update                         |
| USER                   | Client, PubMan, OrderMan | select, insert, update, delete          |
| CREDIT_CARD            | Client, PubMan, OrderMan | select, update                         |

Note: The Admin and Owner accounts have full access to all tables.

### System Privileges

**Table 5. System Privileges Assigned to Accounts**

| Accounts | System Privileges              |
|----------|--------------------------------|
| Owner    | session, alter session, create/drop table |
| Client, PubMan, OrderMan | create session                  |

### Evaluating DBMS Security Mechanisms

**Table 6. Tests to Verify DBMS Security Mechanisms**

A set of tests must be performed to verify which of the requirements presented in Table 2 are achieved. Table 6 presents the proposed tests for each requirement (the second column is the reference of the requirement as specified in Table 2). Note that the requirements may be related to specific characteristics/functionalities and/or the correct configuration of the mechanism. Each requirement is fulfilled if it is possible to execute the corresponding tests.

**Performance Degradation Due to Encryption**

One important aspect related to the security tests in Table 6 is that the evaluation of performance degradation caused by encryption in data storage (requirements 5.2 and 5.3) only considers the selection and insertion of data in the database. Updating and deleting operations are not considered, as the impact of encryption on these operations is similar to insert and select. Therefore, to evaluate the performance degradation caused by encryption mechanisms, we only need to perform the basic operations to test the performance of the encryption and decryption methods.

### Assessing Database Installations Security

Security in a real database environment depends on both the DBMS and the client applications. However, the DBMS is the key component and represents the ultimate layer in preventing unauthorized access to the data. In this work, we are primarily concerned with the evaluation of the security mechanisms of the DBMS used in real installations. The security aspects of the client applications are outside the scope of our study.

The administration of large databases is a complex task. A Database Administrator (DBA) is responsible for managing all aspects of the DBMS environment, including database performance, recovery, and security. Given the importance of security issues, especially when dealing with sensitive data, proposing a practical way to assess security in real database installations is crucial.

To assess security in systems in the field, we need to define a set of generic tests applicable in different circumstances (i.e., portable across different database installations). In the approach to compare different DBMS proposed in Section 3, we defined a typical scenario used as a security benchmark for DBMS. However, as each system in the field represents a different situation, we cannot use that scenario to evaluate security in real database installations.

**Mech. Req.** | **Tests**
--- | ---
User Authentication | Verify successful and failed login attempts.
Data Encryption | Test the performance degradation due to encryption.
Access Control | Ensure that users can only access data based on their assigned privileges.
Audit Logging | Verify that all accesses and modifications to critical data are logged.
Configuration Management | Check that the DBMS is configured securely according to best practices.

By performing these tests, we can ensure that the DBMS security mechanisms are robust and effective in protecting the data.