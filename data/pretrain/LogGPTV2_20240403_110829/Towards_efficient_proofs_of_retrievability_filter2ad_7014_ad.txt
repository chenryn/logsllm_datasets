Erasure code rate. Recall that the challenge size (cid:96) represents
the number of data blocks accessed in a veriﬁcation.
with ρ = 0.98
0.132619556
0.002332506
0.000041024
0.000000722
number of communication bits required in a veriﬁcation is
920 for elliptic curve group or 3512 for modulo group, the
storage overhead is about 2% due to erasure encoding and
1/160 = 0.625% due to authentication tags. Our experiment
will conﬁrm that the query latency is within 1 second.
6.6 Comparison
We give a comparison on the performances of our scheme
with SW [26] and Ateniese et al. [1] in Table 3 with an
example. A more detailed and generic comparison is given
in Table 4 on page 9. Note that in our proposed scheme
EPOR, the practical choice of value s is bounded by the
computation on the server side, which is similar to the case
of Ateniese [1]. In contrast, in SW [26], the largest practical
value of s is limited by the communication requirement.
We also compare the proposed scheme EPOR with
Shacham and Waters’ scheme [26] in communication and
storage overhead. For a 1GB data ﬁle, we plot the number of
communication bits (i.e. the size of a challenge and a proof)
against the storage overhead for both schemes in Figure 1.
6.7 Experiment to measure computation time
The goal of this experiment is to measure the actual running
time of the four algorithms KeyGen, DEnc, Prove, Verify in
the proposed EPOR scheme, with disk IO time included
and networking communication time excluded. Note that the
reported query latency includes of running time of Prove and
Verify and disk IO time.
6.7.1 Experiment Environment and Setting
We have implemented a prototype of our EPOR scheme in C
programming language. The large integer arithmetic is com-
puted using GNU MP [17] library version 5.0.1. The pseu-
dorandom function PRF are simulated with AES symmet-
ric cipher provided in OpenSSL [24] library version 1.0.0d.
The disk IO is handled by C library function mmap. We ob-
serve a low memory consumption for all experiments con-
ducted. Our implementation is not optimized (e.g. it is a
single process/thread program) and further performance im-
provements of our scheme can be expected.
The test machine is a laptop computer, which is equipped
with a 2.5GHz Intel Core 2 Duo CPU (model T9300), a
3GB PC2700-800MHZ RAM and a 7200RPM hard disk.
Figure 1. Comparison on communication (in bits) and storage
overhead (in megabytes) w.r.t. a 1GB data ﬁle. SW denotes the
POR scheme with private veriﬁcation by Shacham and Wa-
ters [26]; EPOR (E.C.) denotes our proposed scheme instantiated
over elliptic curve group; EPOR (Z∗
q) denotes our proposed scheme
instantiated over group Z∗
q. Note: In this comparison, the size of
public key is counted as a part of storage overhead for EPOR.
Semantics
λ Bit-length of group size
s Block size, i.e. the number of group
elements in a data block
(cid:96) Challenge size, i.e. the number of
data blocks accessed in a veriﬁcation
Choices of Values
1024
40, 80, 160, 320,
640, or 960
100, 300, 500 or
700.
Table 5. The choices of values of various system parameters
in our experiment
The test machine runs 32 bits version of Gentoo Linux OS
with kernel 2.6.36. The ﬁle system is EXT4 with 4KB page
size.
Our test data ﬁles are of size 16MB, 32MB, 64MB,
128MB, 256MB and 512MB, respectively (These are the
ﬁle sizes after error erasure encoding). The choices of val-
ues of various system parameters, i.e. group size 2λ, block
size s and challenge size (cid:96), are listed in Table 5.
Our experiments are conducted in this way:
• Key generation: For each choice of block size s, we
generate a key pair with size s using the key generating
program KeyGen. The generated public key consists of s
group elements.
• Data preprocess: For each test ﬁle, for each choice of
value of block size s, we run the data encoding program
DEncode to generate a set of authentication tags.
• Veriﬁcation: For each test ﬁle, for each choice of value
of block size s, for each choice of value of challenge
 0 5000 10000 15000 20000 0 20 40 60 80 100 120Number of Communication bits per verificationStorage Overhead (in MegaBytes)EPOR (Zq)SWEPOR (E.C.)Scheme
[3][1]
[26]
EPOR (E.C.)
EPOR (Z∗
q)
Group
size (bits)
λ = 1024
λ = 80
λ = 160
λ = 1024
element
Communication bits
Computation (Data Preprocess)
Computation (Prove)
2λ + 520 = 2568
(s + 1)λ + 360 = 8440
3λ + 440 = 920
3λ + 440 = 3512
N
223 exp over Z∗
227 mul over Zp
226 mul over Zp
223 mul over Zp
(100 + (cid:96)) exp over Z∗
100(cid:96) mul over Zp
N
100 exp over Elliptic Curve
100 exp over Z∗
q
Table 3. Comparison with an example among the PDP scheme by Ateniese et al. [1], the POR scheme by Shacham and
Waters [26], and the POR scheme named EPOR proposed in this paper. After erasure encoding, the ﬁle size is 1GB, block
size is s = 100, and storage overhead due to authentication tags is about 10MB for all schemes. For all schemes listed below,
we assume that, during a veriﬁcation, the (part of) challenge {(i, νi) : i ∈ C} are represented compactly with 280 bits due to
results of [13, 19]. System parameter (cid:96) represents the size of set C. All computation times are represented by the corresponding
dominant factor. “exp” and “mul” denote the group exponentiation and group multiplication respectively in the corresponding
group. Note: (1) In Ateniese et al. PDP scheme, exponentiation with a large integer exponent of size sλ is required. We
represent such exponentiation as a number of s normal group exponentiation exp, where the exponent is λ bits long. (2) One
1024 bits modular exponentiation or one 160 bits elliptic curve exponentiation takes roughly 5 millisecond in a standard PC.
Scheme Group el-
ement size
(bits)
λ = 1024
λ = 160
[12]
[22]
Communica-
tion (bits)
2λ
3λ
[4]
[3][1]
λ = 160
λ = 1024
2λ + 440
2λ + 520
[26]
λ = 80
(s + 1)λ +
360
3λ + 440
Storage
Over-
head
Zero
Zero
|F|
|F|/s
|F|/s
|F|/s
|F|/s
Computation (Prover)
Computation (Veriﬁer)
Computation (Data Prepro-
cess)
|F|/λ exp
|F|/λ exp + 2|F|/λ (mul +
add)
|F|/λ (exp + mul + add)
((cid:96) + s) exp + 2(cid:96) mult. + (cid:96)
add + 1 hash + 1 samp
s(cid:96) (add + mult) + 1 samp
(s − 1) exp + (s(cid:96) + s + (cid:96))
(add + mul) + 1 samp
(s − 1) exp + (s(cid:96) + s + (cid:96))
(add + mul) + 1 samp
1 exp
2 pairing
2 exp
(cid:96) (exp + mult.) + 1
hash + 1 samp
((cid:96) + s) (add + mult) +
(cid:96) PRF + 1 samp
2 exp + (cid:96) (add + mult)
+ (cid:96) PRF + 1 samp
2 exp + (cid:96) (add + mult)
+ (cid:96) PRF + 1 samp
1 exp
|F|/λ (mul + add) + 1 exp
|F|/λ (exp + mul + add)
|F|/λ exp + n hash
|F|/λ (mul + add) +
|F|/(λs) PRF
|F|/λ (mul + add) +
|F|/(λs) PRF
|F|/λ (mul + add) +
|F|/(λs) PRF
λ = 160
3λ + 440
λ = 1024
EPOR
(E.C.)
EPOR
(Z∗
q)
Table 4. Performance Comparison. All schemes support private veriﬁcation only. In each scheme (except the ﬁrst two in the
table), a challenge set C ⊂ [0, n − 1] contains (cid:96) block indices and can be compactly represented with 280 bits due to results
of [13, 19]. In the table, “exp”, “mul” and “add” represent exponentiation, multiplication and addition in the corresponding
groups/ﬁelds; “samp” represents the sample method given by Goldreich [19]; notation |F| denotes the ﬁle size in bits. Recall
that the notations λ, s, (cid:96), n are as described in Table 1 in Section 3. Note: In Ateniese et al. PDP scheme, exponentiation with a
large integer exponent of size sλ is required. We represent such exponentiation as a number of s normal group exponentiation
exp, where the exponent is λ bits long. Similar for the RSA based scheme.
size (cid:96), we run the Prove and Verify programs to simulate
the interaction between the data owner and cloud storage
server.
Every single experiment case is repeated for 10 times and
the reported timing data are the averages. We remark that
experiment trials are run in sequence without parallelism.
6.7.2 Experiment Results
The experiment results are showed in Figure 2. All experi-
ment results are averaged over 10 trials. Since all experiment
results vary little across different trials, we do not report the
variances or conﬁdence intervals.
Our experiment result in Figure 2(a) indicates that the
key generating time is proportional to the key size, i.e. the
number of group elements in a key. The experiment result
in Figure 2(b) indicates that the data preprocess time (par-
ticularly, DEncode) is proportional to the data ﬁle size and
almost independent on the block size s. The experiment also
shows that the query latency is proportional to the block size
s, almost independent on the ﬁle size, and grows very slowly
with the challenge size (cid:96), suggesting that the computation of
exponentiations becomes the bottleneck when s is so large.
All of these results agree with our analysis.
(a) Time to generate a key VS the key size
(b) Data preprocess time VS the block size. Each line is labeled with the size
(in megabytes) of corresponding data ﬁle.
(c) Query latency VS the challenge size for a 128MB data ﬁle. Each line is
labeled with the corresponding block size.
(d) Query latency for a 512MB data ﬁle.
Figure 2. The subﬁgure (c) and (d) represent the results of the same experiment w.r.t. different data ﬁles, where (c) for a 128MB data ﬁle
and (d) for a 512MB data ﬁle. The key size is the number of group elements in a key; the block size is the number of group elements in one
data block; the challenge size is the number of data blocks accessed during one veriﬁcation. All time measurements include disk IO time, but
do not include network communication time.
7. Conclusion
We proposed an efﬁcient and secure POR scheme which
supports private veriﬁability. The proposed scheme requires
only linear communication bits w.r.t. the security parameter
(particularly 920 bits when elliptic curve group is used) per
veriﬁcation and 1/s storage overhead, where s can be as
large as hundreds. The small number of communication bits
in a veriﬁcation makes it possible to piggyback the challenge
and/or response of our scheme into other communication
packets between the data owner and the cloud storage server
if any.
How to apply the idea of Kate, Zaverucha and Gold-
berg [22] to reduce the response size of the other POR
scheme with public veriﬁability in Shacham and Waters [26],
remains an open problem.
References
[1] G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner,
Z. Peterson, and D. Song. Provable data possession at un-
In CCS ’07: ACM conference on Computer
trusted stores.
and communications security, pages 598–609, 2007.
[2] G. Ateniese, S. Kamara, and J. Katz. Proofs of Storage from
Homomorphic Identiﬁcation Protocols. In ASIACRYPT ’09:
International Conference on the Theory and Application of