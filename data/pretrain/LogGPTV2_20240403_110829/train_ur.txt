.i udiag_state
this is set to one of
.br tcp_listen
or
.br tcp_established .
.tp
.i pad
this field is set to 0.
.tp
.i udiag_ino
this is the socket inode number.
.tp
.i udiag_cookie
this is an array of opaque identifiers that could be used in subsequent
queries.
.\"
.ss ipv4 and ipv6 sockets
for ipv4 and ipv6 sockets,
the request is represented in the following structure:
.pp
.in +4n
.ex
struct inet_diag_req_v2 {
    __u8    sdiag_family;
    __u8    sdiag_protocol;
    __u8    idiag_ext;
    __u8    pad;
    __u32   idiag_states;
    struct inet_diag_sockid id;
};
.ee
.in
.pp
where
.i "struct inet_diag_sockid"
is defined as follows:
.pp
.in +4n
.ex
struct inet_diag_sockid {
    __be16  idiag_sport;
    __be16  idiag_dport;
    __be32  idiag_src[4];
    __be32  idiag_dst[4];
    __u32   idiag_if;
    __u32   idiag_cookie[2];
};
.ee
.in
.pp
the fields of
.i "struct inet_diag_req_v2"
are as follows:
.tp
.i sdiag_family
this should be set to either
.b af_inet
or
.b af_inet6
for ipv4 or ipv6 sockets respectively.
.tp
.i sdiag_protocol
this should be set to one of
.br ipproto_tcp ,
.br ipproto_udp ,
or
.br ipproto_udplite .
.tp
.i idiag_ext
this is a set of flags defining what kind of extended information to report.
each requested kind of information is reported back as a netlink attribute
as described below:
.rs
.tp
.b inet_diag_tos
the payload associated with this attribute is a __u8 value
which is the tos of the socket.
.tp
.b inet_diag_tclass
the payload associated with this attribute is a __u8 value
which is the tclass of the socket.
ipv6 sockets only.
for listen and close sockets, this is followed by
.b inet_diag_skv6only
attribute with associated __u8 payload value meaning whether the socket
is ipv6-only or not.
.tp
.b inet_diag_meminfo
the payload associated with this attribute is represented in the following
structure:
.ip
.in +4n
.ex
struct inet_diag_meminfo {
    __u32 idiag_rmem;
    __u32 idiag_wmem;
    __u32 idiag_fmem;
    __u32 idiag_tmem;
};
.ee
.in
.ip
the fields of this structure are as follows:
.rs
.tp 12
.i idiag_rmem
the amount of data in the receive queue.
.tp
.i idiag_wmem
the amount of data that is queued by tcp but not yet sent.
.tp
.i idiag_fmem
the amount of memory scheduled for future use (tcp only).
.tp
.i idiag_tmem
the amount of data in send queue.
.re
.tp
.b inet_diag_skmeminfo
the payload associated with this attribute is an array of __u32 values
described below in the subsection "socket memory information".
.tp
.b inet_diag_info
the payload associated with this attribute is specific to the address family.
for tcp sockets, it is an object of type
.ir "struct tcp_info" .
.tp
.b inet_diag_cong
the payload associated with this attribute is a string that describes the
congestion control algorithm used.
for tcp sockets only.
.re
.tp
.i pad
this should be set to 0.
.tp
.i idiag_states
this is a bit mask that defines a filter of socket states.
only those sockets whose states are in this mask will be reported.
ignored when querying for an individual socket.
.tp
.i id
this is a socket id object that is used in dump requests, in queries
about individual sockets, and is reported back in each response.
unlike unix domain sockets, ipv4 and ipv6 sockets are identified
using addresses and ports.
all values are in network byte order.
.pp
the fields of
.i "struct inet_diag_sockid"
are as follows:
.tp
.i idiag_sport
the source port.
.tp
.i idiag_dport
the destination port.
.tp
.i idiag_src
the source address.
.tp
.i idiag_dst
the destination address.
.tp
.i idiag_if
the interface number the socket is bound to.
.tp
.i idiag_cookie
this is an array of opaque identifiers that could be used along with
other fields of this structure to specify an individual socket.
it is ignored when querying for a list of sockets, as well as
when all its elements are set to \-1.
.pp
the response to a query for ipv4 or ipv6 sockets is represented as an array of
.pp
.in +4n
.ex
struct inet_diag_msg {
    __u8    idiag_family;
    __u8    idiag_state;
    __u8    idiag_timer;
    __u8    idiag_retrans;
    struct inet_diag_sockid id;
    __u32   idiag_expires;
    __u32   idiag_rqueue;
    __u32   idiag_wqueue;
    __u32   idiag_uid;
    __u32   idiag_inode;
};
.ee
.in
.pp
followed by netlink attributes.
.pp
the fields of this structure are as follows:
.tp
.i idiag_family
this is the same field as in
.ir "struct inet_diag_req_v2" .
.tp
.i idiag_state
this denotes socket state as in
.ir "struct inet_diag_req_v2" .
.tp
.i idiag_timer
for tcp sockets, this field describes the type of timer that is currently
active for the socket.
it is set to one of the following constants:
.ip
.pd 0
.rs 12
.tp
.b 0
no timer is active
.tp
.b 1
a retransmit timer
.tp
.b 2
a keep-alive timer
.tp
.b 3
a time_wait timer
.tp
.b 4
a zero window probe timer
.re
.pd
.ip
for non-tcp sockets, this field is set to 0.
.tp
.i idiag_retrans
for
.i idiag_timer
values 1, 2, and 4, this field contains the number of retransmits.
for other
.i idiag_timer
values, this field is set to 0.
.tp
.i idiag_expires
for tcp sockets that have an active timer, this field describes its expiration
time in milliseconds.
for other sockets, this field is set to 0.
.tp
.i idiag_rqueue
for listening sockets:
the number of pending connections.
.ip
for other sockets:
the amount of data in the incoming queue.
.tp
.i idiag_wqueue
for listening sockets:
the backlog length.
.ip
for other sockets:
the amount of memory available for sending.
.tp
.i idiag_uid
this is the socket owner uid.
.tp
.i idiag_inode
this is the socket inode number.
.\"
.ss socket memory information
the payload associated with
.b unix_diag_meminfo
and
.br inet_diag_skmeminfo
netlink attributes is an array of the following __u32 values:
.tp
.b sk_meminfo_rmem_alloc
the amount of data in receive queue.
.tp
.b sk_meminfo_rcvbuf
the receive socket buffer as set by
.br so_rcvbuf .
.tp
.b sk_meminfo_wmem_alloc
the amount of data in send queue.
.tp
.b sk_meminfo_sndbuf
the send socket buffer as set by
.br so_sndbuf .
.tp
.b sk_meminfo_fwd_alloc
the amount of memory scheduled for future use (tcp only).
.tp
.b sk_meminfo_wmem_queued
the amount of data queued by tcp, but not yet sent.
.tp
.b sk_meminfo_optmem
the amount of memory allocated for the socket's service needs (e.g., socket
filter).
.tp
.b sk_meminfo_backlog
the amount of packets in the backlog (not yet processed).
.sh versions
.b netlink_inet_diag
was introduced in linux 2.6.14 and supported
.b af_inet
and
.b af_inet6
sockets only.
in linux 3.3, it was renamed to
.b netlink_sock_diag
and extended to support
.b af_unix
sockets.
.pp
.b unix_diag_meminfo
and
.br inet_diag_skmeminfo
were introduced in linux 3.6.
.sh conforming to
the netlink_sock_diag api is linux-specific.
.sh examples
the following example program prints inode number, peer's inode number,
and name of all unix domain sockets in the current namespace.
.pp
.ex
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
static int
send_query(int fd)
{
    struct sockaddr_nl nladdr = {
        .nl_family = af_netlink
    };
    struct
    {
        struct nlmsghdr nlh;
        struct unix_diag_req udr;
    } req = {
        .nlh = {
            .nlmsg_len = sizeof(req),
            .nlmsg_type = sock_diag_by_family,
            .nlmsg_flags = nlm_f_request | nlm_f_dump
        },
        .udr = {
            .sdiag_family = af_unix,
            .udiag_states = \-1,
            .udiag_show = udiag_show_name | udiag_show_peer
        }
    };
    struct iovec iov = {
        .iov_base = &req,
        .iov_len = sizeof(req)
    };
    struct msghdr msg = {
        .msg_name = &nladdr,
        .msg_namelen = sizeof(nladdr),
        .msg_iov = &iov,
        .msg_iovlen = 1
    };
    for (;;) {
        if (sendmsg(fd, &msg, 0) udiag_family != af_unix) {
        fprintf(stderr, "unexpected family %u\en", diag\->udiag_family);
        return \-1;
    }
    unsigned int rta_len = len \- nlmsg_length(sizeof(*diag));
    unsigned int peer = 0;
    size_t path_len = 0;
    char path[sizeof(((struct sockaddr_un *) 0)\->sun_path) + 1];
    for (struct rtattr *attr = (struct rtattr *) (diag + 1);
             rta_ok(attr, rta_len); attr = rta_next(attr, rta_len)) {
        switch (attr\->rta_type) {
        case unix_diag_name:
            if (!path_len) {
                path_len = rta_payload(attr);
                if (path_len > sizeof(path) \- 1)
                    path_len = sizeof(path) \- 1;
                memcpy(path, rta_data(attr), path_len);
                path[path_len] = \(aq\e0\(aq;
            }
            break;
        case unix_diag_peer:
            if (rta_payload(attr) >= sizeof(peer))
                peer = *(unsigned int *) rta_data(attr);
            break;
        }
    }
    printf("inode=%u", diag\->udiag_ino);
    if (peer)
        printf(", peer=%u", peer);
    if (path_len)
        printf(", name=%s%s", *path ? "" : "@",
                *path ? path : path + 1);
    putchar(\(aq\en\(aq);
    return 0;
}
static int
receive_responses(int fd)
{
    long buf[8192 / sizeof(long)];
    struct sockaddr_nl nladdr;
    struct iovec iov = {
        .iov_base = buf,
        .iov_len = sizeof(buf)
    };
    int flags = 0;
    for (;;) {
        struct msghdr msg = {
            .msg_name = &nladdr,
            .msg_namelen = sizeof(nladdr),
            .msg_iov = &iov,
            .msg_iovlen = 1
        };
        ssize_t ret = recvmsg(fd, &msg, flags);
        if (ret nlmsg_type == nlmsg_done)
                return 0;
            if (h\->nlmsg_type == nlmsg_error) {
                const struct nlmsgerr *err = nlmsg_data(h);
                if (h\->nlmsg_len error;
                    perror("nlmsg_error");
                }
                return \-1;
            }
            if (h\->nlmsg_type != sock_diag_by_family) {
                fprintf(stderr, "unexpected nlmsg_type %u\en",
                        (unsigned) h\->nlmsg_type);
                return \-1;
            }
            if (print_diag(nlmsg_data(h), h\->nlmsg_len))
                return \-1;
        }
    }
}
int
main(void)
{
    int fd = socket(af_netlink, sock_raw, netlink_sock_diag);
    if (fd < 0) {
        perror("socket");
        return 1;
    }
    int ret = send_query(fd) || receive_responses(fd);
    close(fd);
    return ret;
}
.ee
.sh see also
.br netlink (3),
.br rtnetlink (3),
.br netlink (7),
.br tcp (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man7/sysvipc.7
.\" copyright 2003,2004 andi kleen, suse labs.
.\" and copyright 2007 lee schermerhorn, hewlett packard
.\"
.\" %%%license_start(verbatim_prof)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.