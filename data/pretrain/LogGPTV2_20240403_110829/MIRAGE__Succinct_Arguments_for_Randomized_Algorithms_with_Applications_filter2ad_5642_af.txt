### Optimized Text

#### Performance Metrics
- **Work**: 610 seconds, 1.8 GB, 473 KB
- **Auction/Crowdfund**: 22.78 seconds, 57.85 MB, 3.93 KB
- **N/A**: 7.9 seconds, 32 B
- **N/A (Repetition)**: 10.3 seconds, 322 seconds, 128 B, 160 B, 1.5 ms, 2.1 ms

#### Proof Generation Time Amplification
- The proof generation time has an amplification factor of approximately 30×. This factor is higher than the previously reported overhead in Table 4 because nearly half of the instructions in the universal circuit were not utilized, primarily due to unused opcode types in the commitments or evaluated applications.

#### Comparison with Existing Work
- **Sonic [31]**:
  - **Proof Size**: 1152 bytes (unhelped mode) compared to 160 bytes in our protocol.
  - **Verifier's Effort**: 3× worse than our protocol.
  - **Prover's Amplification Factor**: More than 50× for Sonic in the unhelped prover's case, compared to 30× in our protocol when the circuit is highly utilized.

#### Future Work
- We will evaluate other applications that require a trusted setup for user-defined computations.

### Conclusion and Discussion
In this paper, we introduced MIRAGE, a zk-SNARK protocol that efficiently verifies randomized algorithms. Compared to baseline zk-SNARKs, our protocol increases the verification overhead by one pairing and the proof size by one group element in the generic group model. We used MIRAGE to build an efficient universal circuit, demonstrating savings in various contexts, including privacy-preserving smart contracts. However, several open problems remain for future work, which we discuss below.

#### Scalability
- **Universal Circuit Cost**: Although we significantly reduced the cost of universal circuits, there is still a cost associated with universality. We discuss potential directions to address scalability challenges.
  - **Distributed Systems for ZK Proof Computation**: Large zk-SNARK circuits can lead to high memory consumption at the prover's side. Using a distributed system, such as DIZK [12], can compute zk-SNARK proofs for circuits with hundreds of millions of constraints, scaling the number of participants by two orders of magnitude.
  - **Recursive SNARKs**: Dividing the circuit into parts based on opcodes, proving each part separately, and using recursive SNARKs [6, 47] to compress the proofs can reduce memory requirements and allow the prover to pay only for heavily used opcodes.
  - **Cryptographic Opcodes**: Including opcodes for well-known cryptographic functions can reduce the cost of cryptographic operations. For example, in the HAWK privacy-preserving smart contract system [16], most of the manager's circuit does not depend on the computation being verified. Supporting additional commitment opcodes would significantly reduce the cost of cryptographic operations, allowing for more participants.

#### High-Level Tool for Specifying Computation
- Our current library for specifying computations is low-level, requiring programmers to have knowledge of opcodes for optimized performance and secure representation. We plan to develop a high-level tool that can compile high-level descriptions of computations into optimized specifications, given the opcodes. Techniques from existing high-level frameworks [5, 10, 11] could be adapted, but the cost model in our setting is different. Our modified zk-SNARK construction also enables the use of randomness in the circuit to check permutations and other types of computations more efficiently.

#### Workload Characterization
- In Section 5.2, we used a nearly uniform distribution for the number of each opcode in the circuit. While these opcodes can represent most basic operations, their distribution may not be optimal for all applications. Future work should focus on obtaining a realistic distribution based on workload characterization in different domains. For application-specific domains like smart contracts, analyzing existing smart contracts and their basic operation distributions could provide better insights.

### Acknowledgments
This work was supported in part by DARPA under grant N66001-15-C-4066 and the Center for Long-Term Cybersecurity (CLTC). Charalampos Papamanthou was supported by NSF awards #1514261 and #1652259, as well as by NIST. Dimitrios Papadopoulos was supported by Hong Kong RGC under grant ECS-26208318. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF, NIST, DARPA, CLTC, or Hong Kong RGC.

### References
[References listed here as provided in the original text]

### Appendix A: zk-SNARK for Cuniv
In this section, we describe the zk-SNARK protocol for the simple universal circuit \(C_{\text{univ}}\) presented in Section 4 in detail. Before describing the protocol, we introduce additional notations. Let \(\phi_l, \phi_{l'}, \phi_z, \phi_{z'},\) and \(\phi_r\) be mapping functions that map the variable types and indices in our universal circuit construction to the actual wire indices used in Protocol 2 in Section 3. For example, \(\phi_l(i)\) gets the index of the wire carrying the value of \(l_i\). Define the following sets:

- \(I_L = \{\phi_l(i)\}_{i \in \{1, \ldots, n_s + 3n^* + 3n^+\}}\)
- \(I_{L'} = \{\phi_{l'}(i)\}_{i \in \{1, \ldots, n_s + 3n^* + 3n^+\}}\)
- \(I_{\text{spec}} = I_L \cup I_{L'}\) (Note: in the general case of our multi-opcode universal circuit (Section 5), this will also include the functionality selectors of the instructions).
- \(I_{Z_{\text{io}}} = \{\phi_z(i)\}_{i \in \{1, \ldots, n_s\}}\)
- \(I_{Z_w} = \{\phi_z(i)\}_{i \in \{n_s + 1, \ldots, n_s + 3n^* + 3n^+\}}\)
- \(I_{Z'} = \{\phi_{z'}(i)\}_{i \in \{1, \ldots, n_s + 3n^* + 3n^+\}}\)
- \(I_R = \{\phi_r(i)\}_{i \in \{1, 2\}}\)
- \(I_{\text{aux}}\) represents all other intermediate wire indices in the universal circuit, i.e., \(I_{\text{aux}} = \{k : k \in \{1, \ldots, m\} \land k \notin I_L \cup I_{L'} \cup I_{Z_{\text{io}}} \cup I_{Z_w} \cup I_{Z'} \cup I_R\}\), where \(m\) is the total number of wires in the universal circuit.