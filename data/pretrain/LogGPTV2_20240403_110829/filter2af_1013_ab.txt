    指向PEB结构
        mov eax, [eax + 0xc]
    0xc处存放者LDR指针它指向一个_PEB_LDR_DATA结构
        mov eax, [eax + 0x14]
    指向LDR指针中的InMemoryOrderModuleList链表
这里面有三个链表，这三个列表中的模块是一样的，只是顺序不同。  
        mov eax, [eax]
    mov eax, [eax]
因为kernel32的位置是第三个，第一个是InMemoryOrderModuleList本身，向下两次，就找到了kernel32（这块还不是很理解）。  
最后就是获取kernel32的基址：
        mov eax, [eax + 0x10]
    InMemoryOrderModuleList 再偏移0x10，指向dllbase
### 获取GetProcAddress  
不做叙述，有兴趣的可以自行学习，代码如下：
        DWORD RGetProcAddress() {
     //获取kernel32的地址
     DWORD dwAddrBase = GetKernel32Address();
     //获取Dos头
     PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)dwAddrBase;
     //获取Nt头 Nt头=dll基址+Dos头
     PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(pDos->e_lfanew + dwAddrBase);
     //数据目录表                            扩展头 数据目录表 + 导出表    定位导出表
     PIMAGE_DATA_DIRECTORY pDataDir = pNt->OptionalHeader.DataDirectory +IMAGE_DIRECTORY_ENTRY_EXPORT;
     //导出表
     //导出表地址
     PIMAGE_EXPORT_DIRECTORY pExport = (PIMAGE_EXPORT_DIRECTORY)(dwAddrBase + pDataDir->VirtualAddress);
     //函数总数
     DWORD dwFunCount = pExport->NumberOfFunctions;
     //函数名称数量
     DWORD dwFunNameCount = pExport->NumberOfNames;
     //函数地址
     PDWORD pAddrOfFun = (PDWORD)(pExport->AddressOfFunctions + dwAddrBase);
     //函数名称地址
     PDWORD pAddrOfNames = (PDWORD)(pExport->AddressOfNames + dwAddrBase);
     //序号表
     PWORD pAddrOfOrdinals = (PWORD)(pExport->AddressOfNameOrdinals+ dwAddrBase);
      //遍历函数总数
      for (size_t i = 0; i 
    #include 
    #include 
    #include 
    DWORD GetKernel32Address() {
     DWORD dwKernel32Addr = 0;
     _asm {
         mov eax, fs: [0x30]
                 mov eax, [eax + 0x0c]
                 mov eax, [eax + 0x14]
                 mov eax, [eax]
                 mov eax, [eax]
                 mov eax, [eax + 0x10]
                 mov dwKernel32Addr, eax
     }
     return  dwKernel32Addr;
    }
    DWORD RGetProcAddress() {
     //获取kernel32的地址
     DWORD dwAddrBase = GetKernel32Address();
     //获取Dos头
     PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)dwAddrBase;
     //获取Nt头
     PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(pDos->e_lfanew + dwAddrBase);
     //数据目录表                         扩展头 数据目录表 + 导出表    定位导出表
     PIMAGE_DATA_DIRECTORY pDataDir = pNt->OptionalHeader.DataDirectory + IMAGE_DIRECTORY_ENTRY_EXPORT;
     //导出表
     //导出表地址
     PIMAGE_EXPORT_DIRECTORY pExport = (PIMAGE_EXPORT_DIRECTORY)(dwAddrBase + pDataDir->VirtualAddress);
     //函数总数
     DWORD dwFunCount = pExport->NumberOfFunctions;
     //函数名称数量
     DWORD dwFunNameCount = pExport->NumberOfNames;
     //函数地址
     PDWORD pAddrOfFun = (PDWORD)(pExport->AddressOfFunctions + dwAddrBase);
     //函数名称地址
     PDWORD pAddrOfNames = (PDWORD)(pExport->AddressOfNames + dwAddrBase);
     //序号表
     PWORD pAddrOfOrdinals = (PWORD)(pExport->AddressOfNameOrdinals + dwAddrBase);
     for (size_t i = 0; i   