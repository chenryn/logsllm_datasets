When Σ is irrelevant or clear from the context, we simply say
structure instead of Σ-structure. We denote elements of carrier sets
with small serif letters like a and b.
1 × . . .× WS
Let (S, I). The interpretation function I gives rise in the stan-
dard way to a function that maps any formula φ (x1, . . . , xn ), with
xi of sort Wi, to a relation φI ⊆ WS
n . For (a1, . . . an ) ∈
1 × . . . × WS
WS
n , φI (a1, . . . an ) holds if the formula φ evaluates to
true after replacing each xi with ai.
4.2 Motivating example
We present an example of a template formula φ
for the lan-
guage ΓN of all RBAC policies with at most N roles. We then show
that every RBAC policy in Γ can be identified with an interpretation
function. With this example, we provide some intuition on an ar-
gument we give later in Section 4.4: mining a policy in a policy
language Γ is equivalent to searching for an interpretation function
that interprets the symbols occurring in a template formula for Γ.
Definition 4. An RBAC policy is a tuple π = (U , Ro, P, Ua, Pa). U
and P are non-empty sets denoting, respectively, the sets of users
and permissions in an organization. Ro is a set denoting the organi-
zation’s roles. Ua ⊆ U ×Ro and Pa ⊆ Ro×P are binary relations. The
policy π assigns a permission p ∈ P to a user u ∈ U if (u, p) ∈ Ua◦Pa
(i.e., if there is a role r ∈ Ro such that (u, r) ∈ Ua and (r, p) ∈ Pa). □
Consider the language ΓN of RBAC policies with at most N
roles. We now present a template formula for ΓN . We only provide
some intuition here and give formal justifications in Section 4.5.
Let Σ be a signature with two relation symbols UA and PA of types
USERS × ROLES and ROLES × PERMS, respectively. Let
(cid:95)
i ≤N
RBAC
N
φ
(u, p) :=
(UA (u, ri ) ∧ PA (ri , p)) .
(1)
Here, u and p are variables of sorts USERS and PERMS, respec-
tively, and ri, for i ≤ N , is a constant of sort ROLES. We now make
two observations about φ
(u, p).
RBAC
N
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom98πK =
1) Each RBAC policy in ΓN corresponds to at least one interpretation
function. Note that for any Σ-structure K = (S, I) , the tuple
(cid:16)USERSS, ROLESS, PERMSS, UAI, PAI(cid:17)
(2)
is an RBAC policy. Conversely, one can show that every RBAC
policy in ΓN can be associated with a Σ-structure. Observe now
that, when an organization wants to mine an RBAC policy, S is
already known. Indeed, the organization knows the set of users and
permissions. It may not known the set of roles, but it can deduce
them from UAI and PAI, once it knows I. Analogously, for all
policy languages we studied, we observed that S was always known
by the organization. Therefore, we always assume S given and fixed
and we conclude that every RBAC policy in ΓN corresponds to at
least one interpretation function.
φ
φ
(cid:16)
(cid:16)
RBAC
N
RBAC
N
RBAC
N
2) The formula φ
(cid:17) I
(cid:17) I.
describes ΓN ’s semantics. More precisely, if
πK has at most N roles, then for any user u in K and any p in K: πK
assigns p to u iff
(u, p). This follows from two arguments.
First, by definition, πK assigns p to u if (u, p) ∈ UAI ◦ PAI. Second,
UAI ◦ PAI =
These two observations describe the essence of a template for-
mula. Template formulas define (i) how interpretation functions
can represent policies of a policy language and (ii) how a policy
(represented by an interpretation function) decides if a permission
is assigned to a user.
4.3 Language definition
Template formulas are built from the fragment L of quantifier-free
first-order formulas.
For any signature, we require the organization to specify, for
every relation and function symbol, whether it is rigid or flexible.
Rigid symbols are those for which the organization already knows
the interpretation function. Flexible symbols are those for which an
interpretation function must be found using mining. For example,
a function that maps each user to a unique identifier should be
modeled with a rigid function symbol, as the organization is not in-
terested in mining new identifiers. In contrast, when mining RBAC
policies, one should define a flexible relation symbol to denote the
assignment of roles to users, as the organization does not know
this assignment and wants to compute it using mining.
Let K = (S, I) be a structure. We can see I as the union of
two interpretation functions Ir and If , where Ir takes as input
rigid symbols and If takes as input flexible symbols. The goal of
policy mining is to search for an interpretation function If for
the flexible symbols that minimizes an objective function. It does
not need to search for S as these function defines the carrier sets
for sorts like USERS and PERMS, which the organization already
knows. It does not need to search for Ir either. Hence, we assume
that S and Ir are fixed and known to the organization. We also let
U = USERSS and P = PERMSS. We underline rigid symbols and
do not distinguish between W and W Ir .
4.4 Template formulas
We now formalize template formulas. Let Γ be a policy language
and let Pol(Γ) be the set of all policies that can be specified with Γ.
Suppose also that the set of access requests is modeled with a set
1 ×. . .×TS
ℓ , such that for (t1, . . . , tℓ ) ∈ TS
1 × . . . × TS
TS
ℓ , where T1, . . . , Tℓ are sorts. For example, for RBAC
and many other policy languages that we discuss here, the set of
requests is U × P = USERSS × PERMSS.
We assume that the semantics of Γ defines a relation assign
Γ ⊆
1 ×. . .×TS
Pol (Γ)×TS
ℓ and
π ∈ Pol(Γ), (π , t1, . . . , tℓ ) ∈ assign
Γ iff π authorizes (t1, . . . , tℓ ).
For example, in RBAC, (π , u, p) ∈ assignRBAC iff π assigns p to u.
Definition 5. Let Γ be a policy language and φ(t1, . . . , tℓ ) be a
formula in L, where t1, . . . , tℓ are variables of sorts T1, . . . , Tℓ,
respectively. The formula φ(t1, . . . , tℓ ) is a template formula for Γ
if there is a function M such that (i) M is a surjective function
from the set of interpretation functions to Pol (Γ) and (ii) for any
interpretation function I and any request (t1, . . . , tℓ ) ∈ TS
1 × . . . ×
TS
ℓ , we have that (t1, . . . , tℓ ) ∈ φI iff (M (I) , t1, . . . , tℓ ) ∈ assign
Γ.
□
The mapping M provides a correspondence between interpreta-
tions and policies. M guarantees that each policy is represented
by at least one interpretation. Therefore, we can search for an in-
terpretation instead of a policy. For this reason, for the rest of the
paper, we identify every formula in L with a policy language and
also refer to interpretation functions as policies.
4.5 Formalizing the example
RBAC
(u, p) ∈ L, introduced in
We now formally define the formula φ
N
Section 4.2, and show that it is a template formula for the language
ΓN of all RBAC policies with at most N roles. Allowing a maximum
number of roles is sufficient as one always can estimate a trivial
bound on the maximum number of roles in an organization.
Template formula definition: Consider a signature with a sort
ROLES denoting roles and with two (flexible) binary relation sym-
bols UA and PA of types USERS × ROLES and ROLES × PERMS,
respectively. Define the formula
(cid:16)UA(u, ri ) ∧ PA(ri , p)
(cid:17)
(cid:95)
i ≤N
RBAC
N
φ
(u, p) :=
.
(3)
Here, ri, for 1 ≤ i ≤ N , is a rigid constant symbol of sort ROLES
(recall that we underline rigid symbols and denote constant symbols
with serif letters). One could also use flexible constant symbols for
roles, but, as we see later, the difficulty of implementing the policy
miner increases with the number of flexible symbols.
φ
(cid:16)
RBAC
N
U , {r1, . . . , rN }, P, UAI, PAI(cid:17)
(cid:16)
Correctness proof: We now define a mapping M that proves that
is a template formula for ΓN . For any interpretation function
(cid:17) I
. Observe thatM (I)
I, letM (I) =
is an RBAC policy. Moreover, for (u, p) ∈ U × P, (u, p) ∈
iff (u, p) ∈ UAI ◦ PAI iff (πI, u, p) ∈ assignRBAC. It is also easy to
prove that M is surjective on the set of all RBAC policies with at
with the language of
most N roles. Hence, we can identify φ
□
all RBAC policies with at most N roles.
Example 1. To facilitate understanding M, we show an RBAC
policy π and an interpretation function I such that M (I) = π.
Let N = 2 and assume that U = {Alice, Bob, Charlie} and that
P = {c, m, d}. The permissions in P stand for “create”, “modify”, and
RBAC
N
RBAC
N
φ
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom99Alice
Bob
Charlie
r1
×
×
r2
×
Table 1: User-assignment
relation
c m d
× ×
2:
×
Table
assignment relation
r1
r2
Permission-
(cid:17)
(cid:17)
u, ri
RBAC
N
“delete”. Let r1 and r2 denote two roles. Consider the RBAC policy
defined by Tables 1 and 2.
We can define an interpretation function I such that M (I)
corresponds to the RBAC policy above. I interprets the relation
(u, p) as follows. For
symbols UA and PA in the formula φ
iff (u, ri ) is marked with an × in
iff (ri , p) is
□
u ∈ U and i ≤ 2, UAI(cid:16)
Table 1. Similarly, for p ∈ P and i ≤ 2, PAI(cid:16)
marked with an × in Table 2.
5 PROBABILITY DISTRIBUTION
Let φ ∈ L be a policy language. We assume for the rest of the paper
that φ has two free variables u and p of sorts USERS and PERMS,
respectively. Our presentation extends in a straightforward way to
more general cases.
ri , p
To design a policy miner using Unicorn one must specify an
objective function L. This is any function taking two inputs: a per-
mission assignment Auth ⊆ U × P, which is a relation on U and
P indicating what permissions each user has, and a policy I. An
objective function outputs a value in R+ measuring how well φI
fits Auth and other policy requirements. The policy miner designer
is in charge of specifying such a function. In Section 8, we give
other examples of objective functions.
For illustration, consider the objective function
(cid:88)
(cid:12)(cid:12)(cid:12)Auth(u, p) − φI (u, p)
(cid:12)(cid:12)(cid:12) .
(u,p)∈U ×P
(4)
Here, we identify the value 1 with the Boolean value true and the
value 0 with the Boolean value false. Observe that L (Auth, I; φ)
is the size of the symmetric difference of the relations Auth and φI.
Hence, lower values for L (Auth, I; φ) are better.
The policy miners built with Unicorn are probabilistic. They
receive as input a permission assignment Auth and compute a
probability distribution over the set of all policies in a fixed policy
language Γ. We use a Bayesian instead of a frequentist interpretation
of probability. The probability of a policy I does not measure how
often I is the outcome of an experiment, but rather how strong we
believe I to be the policy that decided the requests in Auth.
We now define, given a permission assignment Auth, a probabil-
ity distribution P (· | Auth) on policies. We first provide some intu-
ition on P (· | Auth)’s definition and afterwards define it. For a per-
mission assignment Auth and a policy I, we can see P (· | Auth) as a
quantity telling us how much we believe I to be the organization’s
policy, given that Auth is the organization’s permission assignment.
Policy miners receive as input a permission assignment Auth
and then search for a policy I∗ that maximizes P (· | Auth). Here,
P (· | Auth) is defined as the “most general” distribution that fulfills
the following requirement: for any policy I, the lower L (Auth, I; φ)
L (Auth, I; φ) =
is, the more likely I is. Following the principle of maximum en-
tropy [45], the most general distribution that achieves this is
(cid:80)
P (I | Auth) =
exp (−βL(Auth, I; φ))
I′ exp (−βL(Auth, I′; φ))
,
(5)
(cid:17)
where I′ ranges over all policies. Recall that we consider only finite
structures. Hence, all our carrier sets are finite, so there are only
finitely many policies.
The value β > 0 is a parameter that the policy miner varies
during the search for the most likely policy. The search uses deter-
ministic annealing, an optimization procedure inspired by simulated
annealing [46, 61, 62]. In our case, it initially sets β to a very low
value, so that all policies are almost equally likely. Then it gradually
increases β while, at the same time, searching for the most likely
policy. As β increases, those policies that minimize L(Auth,· ; φ)
become more likely. In this way, deterministic can escape from
low-quality local maxima of P (· | Auth). When β → ∞, only those
policies that minimize L(Auth,· ; φ) have a positive probability and
the search converges to a local maximum of P (· | Auth).
We now define the probability distribution given in Equation 5.
Definition 6. For a formula φ ∈ L, we define the probability space
Pφ =
(cid:16)
• Ω is the set of all interpretation functions (i.e., policies).
• 2Ω is the set of all subsets of Ω. Since all carrier sets of all
sorts are finite (Definition 3), Ω and 2Ω are finite.
• For I ∈ Ω,
Ω, 2Ω, P (· | Auth)
as follows.
P (I | Auth) =
Finally, for O ∈ 2Ω, let P (O | Auth) =(cid:80)
exp (−βL(Auth, I; φ))
I′ exp (−βL(Auth, I′; φ))
(6)
I∈O P (I | Auth).
□
The following theorem proves that P (· | Auth) is the “most gen-
eral” distribution that fulfills the requirement mentioned above.
More precisely, P (· | Auth) is the maximum-entropy probability
distribution where the probability of a policy I increases whenever
L(Auth, I; φ) decreases [39, 68].
Theorem 1. P (· | Auth) is the distribution P on policies that max-
imizes P’s entropy and is subject to the following constraints.
(cid:80)
I P (I) L(Auth, I; φ) ≤ ℓ, for some fixed bound ℓ.
•
• If β > 0, then P (I) > P (I′), for any two policies I and I′
with L(Auth, I; φ)  0, we get that P (I1 | Auth) = exp(−β )