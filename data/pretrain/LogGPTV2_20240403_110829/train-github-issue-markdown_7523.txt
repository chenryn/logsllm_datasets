For a distributed application, timeout configuration is important. But for
many cases, timeout is not easy to determine.
For example, a client calls a remote service service A , and A's method calls
Service B and C and D in sequence. When the client set a timeout of 3s, for a
good practice, B and C as well as D should not cost more than 3 seconds.
However, if I set timeout of B, C and D to 3000ms. what if B cost 2000ms to
return, and C cost 2000ms to return, these two service has been already cost 4
seconds, no matter how fast D is, it is a waste for many cases.
In a word, it is very hard to set a small enough and reasonable value for many
cases. What if Dubbo provide a smart timeout?
Again, we use the same case above. when B returns, it takes 2s, and dubbo
modify the timeout to a value less than 1s(consider other cost that in the
same context), then go calling C. In this case C takes 2 seconds, it must
timeout. then D will not be called.
I was trying to do this in dubbo filler, but in current implementation,
timeout is not about to modify since it is from the url instead of attachment.
    int timeout = getUrl().getMethodPositiveParameter(methodName, TIMEOUT_KEY, DEFAULT_TIMEOUT);
So user cannot even implement this feature in dubbo filter in their own.