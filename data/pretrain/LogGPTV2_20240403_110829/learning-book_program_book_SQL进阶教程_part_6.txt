■不能有“苹果，苹果】这样的组合
p
P2
商品名称ice格
苹果
50
浙
50
子
100
100
80
80
当然，无论是P1还是P2，实际上数据都来自同一张物理表Products（见
P.22）。但是，在SQL里，只要被赋予了不同的名称，即便是相同的表也
应该当作不同的表（集合）来对待。也就是说，PI和P2可以看成是碰巧
存储了相同数据的两个集合。这样的话，这个自连接的处理结果就成了下
面这样。
P1里的“苹果”行的连接对象为P2里的“橘子、香蕉”这两行
。P1里的“香蕉”行的连接对象为P2里的“苹果、橘子”这两行
由此我们可以认为，相同的表的自连接和不同表间的普通连接并没有
---
## Page 37
●24
—第1章神奇的SOL
什么区别，自连接里的“自”这个词也没有太大的意义。
这次的处理结果依然是有序对。接下来我们进一步对（苹果，橘子）
和（橘子，苹果）这样只是调换了元素顺序的对进行去重。请看下面的
SQL 语句。
--用于获取组合的SQL 语句
SELSCT F1.nane AS nane_1, P2.name AS nane_2
FROM Froducts P1, Products P2
NERE P1.nane > P2.oanei
■执行结果
name_1
name_2
苹果
橘子
香蕉
橘子
香蕉
苹果
同样地，请想象这里存在PI和P2两张表。在加上“不等于”这个条
件后，这条SQL语句所做的是，按字符顺序排列各商品，只与“字符顺
序比自己靠前”的商品进行配对，结果行数为组合C=3.到这里，我们
终于得到了无序对。恐怕平时我们说到组合的时候，首先想到的就是这种
类型的组合吧。
想要获取3个以上元素的组合时，像下面这样简单地扩展一下就可以
了。这次的样本数据只有3行，所以结果应该只有1行。
--用于获取组合的sQL语句：扩展成3列
SELSCT P1.nane AS nane_1, P2.name AS nane_2, F3.name AS nane_3
PROM Products P1, Products P2, Froducts P3
MHERE P1.nane > P2.oane
AXD F2.nane > P3.oane
■执行结果
name_1
nane_2
nane_3
香蕉
苹果
橘子
如这道例题所示，使用等号“=”以外的比较运算符，如“、”
进行的连接称为“非等值连接”，这里将非等值连接与自连接结合使用了，
---
## Page 38
1-2自连接的用法
25 
因此称为“非等值自连接”。在需要获取列的组合时，我们经常需要用到
这个技术，请牢记。
最后补充一点，“>”和“ A2 .addre88 
相信大家都能看明白。可以看到，像这样把自连接和非等值连接结合起来
确实非常好用。这条SQL语句不仅可以用于发现不规则的数据，而且修
改一下也可以用来查找商品，比如下面这道例题。
问题：从下面这张商品表里找出价格相等的商品的组合。
Products
name |商品名称）price (价格）
苹果
50
橘子
100
葡萄
50
西瓜
B0
柠檬
30
草莓
100
香蕉
100
回答：和前面的住址表那道题的结构完全一样。
家庭ID→价格
住址→商品名称
请像上面这样替换一下。然后，代码就会变成下面这样。
---
## Page 42
1-2白连接的用法—29
--用于查找价格相等但商品名称不同的记录的sQL语句
SELBCT DISTINCT P1-name, P1 price
FRoM Froducts P1, Products F2
MHERE P1-price = P2 -price
AND Pl.naTe 4a P2.nane/
■执行结果
name
price
苹果
50
葡萄
50
草莓
100
橘子
100
香蕉
100
请注意，这里与住址表那道例题不同，如果不加上DISTINCT，结果
里就会出现重复行。关键在于价格相同的记录的条数。而就住址表的例
题来说，如果前田家有孩子，那么不在代码中加上DISTINCT的话，结