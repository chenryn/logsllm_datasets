title:Verifiable Searchable Symmetric Encryption from Indistinguishability
Obfuscation
author:Rong Cheng and
Jingbo Yan and
Chaowen Guan and
Fangguo Zhang and
Kui Ren
Des. Codes Cryptogr. (2019) 87:123–147
https://doi.org/10.1007/s10623-018-0489-y
Publicly veriﬁable searchable symmetric encryption
based on efﬁcient cryptographic components
Azam Soleimanian1
· Shahram Khazaei2
Received: 26 June 2017 / Revised: 20 March 2018 / Accepted: 20 April 2018 /
Published online: 15 May 2018
© Springer Science+Business Media, LLC, part of Springer Nature 2018
Abstract Public veriﬁability is an interesting feature that cryptographic protocols, such
as those used in cloud computing applications, may support. By public veriﬁability, the
client can delegate the veriﬁcation process to a third party auditor without revealing the
private key or data. The main contribution of this paper is achieving public veriﬁability in the
symmetric setting of searchable encryption (SE), separately for single and Boolean keyword
search. While Public veriﬁability in SE has already been achieved using complex tools
such as indistinguishability obfuscation or pairing, this work employs basic cryptographic
components and assumptions, such as pseudo-random functions, one-way functions, digital
signatures and the DDH assumption.
Keywords Cloud computing · Data conﬁdentiality · Searchable encryption · Veriﬁability ·
Multi party computation · Boolean queries
Mathematics Subject Classiﬁcation 94A60 · 68P25
Communicated by C. Mitchell.
Shahram Khazaei has been supported by Iranian National Science Foundation (INSF) under Contract No.
92027548 and Sharif Industrial Relation Ofﬁce (SIRO) under Grant No. G931223.
B Azam Soleimanian
PI:EMAIL
Shahram Khazaei
PI:EMAIL
1 Department of Mathematics and Computer Science, Kharazmi University, Tehran, Iran
2 Department of Mathematical Sciences, Sharif University of Technology, Tehran, Iran
123
124
1 Introduction
A. Soleimanian, S. Khazaei
The rapid development of cloud services motivates companies to outsource their local data
and related processes to the cloud servers. Nevertheless, since cloud servers are not fully
trusted, data outsourcing can raise some security concerns such as data conﬁdentiality and
query privacy-preserving [2,30].
Data conﬁdentiality can be provided using traditional encryption techniques before data
outsourcing. However, it can be a hindrance to search services.
Searchable encryption (SE) is a primitive which enables searching over encrypted data
while providing data conﬁdentiality and preserving query privacy.
Searching over encrypted data can also be achieved by a not-so-practical primitive named
Oblivious RAM (ORAM) [15,27] without leaking any information including access pattern
(i.e., the identiﬁers of the documents which contain the keyword). Searchable encryption
techniques try to propose more efﬁcient way of searching over encrypted data by leaking more
information such as access pattern and search pattern (i.e., which search queries are about
the same keywords) as well as some information on the total size of the encrypted document
collection. Although these leakages can arise some security issues (e.g., see [7,23,36] and
[18]), SE is preferred to the currently impractical ORAM solutions.
Searchable encryption techniques are classiﬁed into two models: SE based on symmetric-
key cryptography and SE based on public-key cryptography. In searchable symmetric
encryption (SSE) techniques, the data is encrypted by the same key which will be used
during the search as well. In the setting of public key searchable encryption, the key of
encryption may be different from the required key in the search phase. Precisely, once a
client publishes a public key, anyone with access to the public key can encrypt some data.
A variety of queries issue a Boolean relation of keywords (e.g., searching for the documents
that contain “Golf” and “Sea” but not “Land”). Searchable encryption techniques that support
single keyword searches (SKS) can be applied in a trivial way to support this kinds of Boolean
queries by ﬁnding intersection, union or complement of the returned results for each keyword.
However, this naive solution leads to inefﬁcient searches and considerable leakage.
Threat models are divided into three categories: honest-but-curious (HBC), semi-honest-
but-curious (SHBC) and malicious. An HBC adversary (server) follows the protocol correctly
but plays the role of an eavesdropper to infer information from encrypted data, queries and
corresponding responses. A SHBC adversary might execute only a fraction of the search
honestly and forge some parts, or return only a fraction of the search results in order to
preserve its resources. A malicious adversary is assumed to be able to manipulate stored data
as well. Clearly, two latter adversarial behaviors arise some concerns about the correctness
and completeness of returned results.
In veriﬁable searchable encryption, the server is considered SHBC or malicious [1,5,
26]. In this work, assuming that the client knows the dictionary, the proposed schemes are
secure against malicious server. For each query the server has to prove the correctness and
completeness of the corresponding results, while on the other hand, by using pseudo-random
permutations (functions) and digital signatures on the stored data, the server is prevented
to manipulate them. In fact, if the server tries to manipulate the stored data or not follow
the whole search process honestly, it can not produce a valid proof. Almost all the previous
works on veriﬁable SSE require that only the client who issues the query is allowed to verify
corresponding results. But as computing resources of clients are limited, public veriﬁability
(PV) becomes an important feature in cloud computing which allows clients to delegate the
veriﬁcation process to a third party auditor (TPA) without revealing any sensitive information
123
Publicly veriﬁable SSE
125
to the TPA. PV cannot be obtained from private veriﬁability simply by sharing the secret key
with the TPA, since a curious TPA can abuse this private information.
1.1 Our Contributions
Our contributions can be summarized as follows,
– We develop a publicly veriﬁable SKS scheme (PV-SKS) in a symmetric key setting which
is the ﬁrst PV-SKS scheme based on simple tools and common primitives (the only known
construction [12] uses Indistinguishability Obfuscation (IO)).
– We develop the ﬁrst general framework that can transform any SKS scheme (in the setting
of symmetric key) to a PV-SKS that makes the auditing task more accessible in cloud
computing.
– Unlike the existing PV-SKS algorithms in the context of public key SE using pairing
operations, our schemes employ simple tools and primitives such as pseudo-random
functions, one-way functions and digital signature making our constrictions practical
and usable in the real-word applications.
– We develop the ﬁrst PV-SSE scheme with support for Boolean queries that has less
computational overhead in comparison with some existing algorithms (e.g., OXT [8]
which uses many exponentiations) but with one more interaction round.
– Our PV-SKS schemes can be used as sub-components in some existing SSE methods to
make them support public veriﬁability while preserving their search capabilities. Speciﬁ-
cally, our PV-SKS schemes are highly suitable to be used in OXT algorithm [8] to extend
it to a PV-SSE scheme that supports Boolean queries with less interactions.
– We prove the security of our schemes in a standard and well-known security model.
1.2 Related works
The ﬁrst searchable encryption scheme was proposed in 2000 by Song et al. [29] with linear
search complexity in the total length of documents collection. After some solutions with
linear search complexity in the number of documents and several efforts for introducing a
proper security deﬁnition [10,14], in 2006 Curtmola et al. proposed a precise security notion
for searchable symmetric encryption. They also presented an SSE scheme satisfying their
security deﬁnition with search complexity linear in the number of matching documents [13].
Most of research in SSE are concentrated on SKS schemes, that is, they only support
searching for documents which contain a speciﬁed keyword (e.g., see [10,11,13,14,22,29]).
Golle et al. proposed the ﬁrst SSE scheme with support for conjunctive queries [16], followed
by Ballard et al. [4], but the search time complexity of these schemes is linear in the total
number of documents. Disjunctive queries with more functionality (ranked results) was also
studied by Cao et al. [6] and Xia et al. [34]. Cash et al. [8] proposed an SSE scheme, called
OXT, that supports Boolean queries. More precisely, they considered queries of the form
w1 ∧ φ (w2, . . . , wm ) where φ is an arbitrary Boolean formula. Informally, at ﬁrst an SKS
scheme is used to retrieve documents that contain w1 and then, each retrieved document is
examined for satisfying φ (w2, . . . , wm ). The search time complexity is linear in the total
number of documents matching the keyword w1. The OXT algorithm was extended to the
ranked search by Jiang et al. [19].
The ﬁrst veriﬁable SSE scheme was proposed by Chai et al. [9]. Kurosawa and Ohtaki [21,
22] and Bost et al. [5] proposed veriﬁable SSE schemes for static and dynamic data. Ogata and
Kurosawa [26] and Bost et al. [5] proposed no-dictionary veriﬁable SSE schemes in which
the client does not need to keep the set of keywords used in the collection. Still a malicious
123
126
A. Soleimanian, S. Khazaei
server cannot cheat by telling the client that “your search keyword w does not exist in the
collection”. Veriﬁability is also studied in public key SE context by Liu et al. [24]. All the
mentioned works are used for private veriﬁability of SKS schemes and none of them provide
public veriﬁability. Wan and Deng [31] proposed a scheme for veriﬁability of multi-keyword
search, based on the work of Cao et al. [6]. Since the search scheme of Cao et al. [6] is exactly
the computation of some inner products, Wan and Deng used a veriﬁable computation scheme
that directly veriﬁes the computation of inner product. Since most of the search schemes are
not directly involved with computations, their scheme can not be used in these cases.
Parno et al. [28] proposed a publicly veriﬁable computation scheme based on the attribute-
based encryption [17,33] scheme. Afterwards, Alderman et al. [1] used their idea to construct
a public key PV-SE scheme, where the index is created in a complex way using an attribute-
based encryption scheme. Our ﬁrst PV-SKS scheme is built on the idea of [28]. It achieves
public veriﬁability merely using pseudo-random functions (PRF) making the search func-
tionality more efﬁcient.
Our second PV-SKS scheme is built on the idea of digital signature scheme which has also
been used by Zhang et al. [35] to construct a framework for public key PV-SE. To provide
a veriﬁcation key for each query and search pattern privacy, their scheme uses pairing and
l-dimensional vectors, resulting in undesirable efﬁciency. Instead, our scheme uses a data-
structure built on the PRFs for providing veriﬁcation keys that can improve the efﬁciency
and is tailored for an SSE scheme. The idea of digital signature has also been widely used in
the auditability of cloud storage in the context of Proof of Data Possession [32].
Our PV-SSE scheme with Boolean support is built on top of [8], which is integrated with
our PV-SKS schemes to achieve both public veriﬁability and Boolean support. A recent
work [3], which studies public veriﬁability for Boolean keyword search, follows a different
scenario from what we consider in this work. While PV-SSE is mainly concerned about
privacy of both data and query, the proposed scheme in [3] supports keyword search just on
public data and does not care about the privacy issues.
Cheng et al. [12] discuss the same scenario as our work. For PV-SKS, they present a
general construction based on IO and PRFs. At ﬁrst, they construct some simple and almost
clear algorithms for search and veriﬁcation processes then obfuscate them in order to prevent
leaking information. By delegating obfuscated search circuit to the server and obfuscated
veriﬁcation circuit to the auditor, respectively, SKS and PV are accessible. Unfortunately,
instantiation of practical IO is still a challenge and candidate IO constructions needs stronger
assumptions such as so-called multi-linear maps. Moreover, although they study Boolean
keyword search problem and also public veriﬁability for SKS problem, they do not discuss
public veriﬁability for Boolean keyword search. One of our main contributions in this work
is to achieve public veriﬁability, also for Boolean queries, using well-studied, simple and
practical assumptions and primitives such as DDH assumption and PRFs.
1.3 Organization
The article is organized as follows. In Sect. 2, required tools and notations are introduced.
In Sect. 3, the primitive PV-SSE is introduced and then its syntax and security model are
presented. In Sect. 4, two PV-SKS constructions are presented. In Sect. 5, it is shown that
our schemes can be used as sub-components in OXT algorithm to support Boolean queries,
providing it with public veriﬁability. In Sect. 6, we conclude the paper and suggest some
future works.
123
Publicly veriﬁable SSE
127
2 Notations and tools
We write a ← A to denote that an element a is uniformly selected from a ﬁnite set A.
An output y of an algorithm A on an input x is represented by y ← A(x ). The notation
·||· refers to the concatenation of two elements. The security parameter is denoted by λ
and a negligible function in λ is denoted by negl(λ), meaning that it is λ−O(1). We refer to
probabilistic polynomial-time algorithms as P.P.T algorithms.
2.1 Document collections
A database D B = (idi , Wi )d
i=1 is composed of d documents such that each document with
identiﬁer idi ∈ {0, 1}n contains a collection Wi ⊆ {0, 1}∗
of words (for rational databases
words are denoted by attribute/word pairs). The dictionary W = ∪d
i=1Wi contains all distinct
keywords in the database D B and parameters n, d are polynomials in λ. For simplicity, we
denote the set of identiﬁers as I D = {1, . . . , d}.
2.2 Queries
(cid:8) ⊆ W
The query q might be a single keyword w for SKS schemes, a pair (W
and id ∈ I D for searching some selected single keywords in a selected document, or ψ (w)
where ψ is a Boolean function on w ∈ W l, for some integer l, for schemes supporting
Boolean queries. The notation D B(q) is used for the list of identiﬁers which their associated
documents satisfy the query q, e.g., for q = w1 ∧ w2 ∧ . . . ∧ wm we have D B(q) = {id ∈
I D|∀ i = 1, . . . , m, wi ∈ Wid}.
2.3 Inverted index (expanded)
(cid:8), id) that W
In information retrieval, inverted index T [25] (also widely used in SSE) is an array of lists
indexed by the element of W such that t = T[w] is a list containing all the identiﬁers in
D B(w). In an expanded inverted index, instead of each identiﬁers idi ∈ D B(w), a tuple si
appears in the list T[w]. Each tuple si is of the form si = ( f1(w, idi ), . . . , fl (w, idi ))), for
some constant l. Each f j is a function which may depend on some key. In our application,
we will use expanded inverted index such that the total bit-length of each si is a constant
polynomial in λ. We refer to such structures as ﬁxed-length expanded inverted index (FLEII).
2.4 Digital signature primitive
We will use a standard digital signature scheme which can be found in standard textbooks
such as [20]. For completion, we provide a formal deﬁnition.
outputs a pair of secret/public keys (sk, pk).
Deﬁnition 1 (Signature scheme [20]) A signature scheme is a tuple of P.P.T. algorithms
(Gen, Sign, Vrfy) satisfying the following:
1. (sk, pk) ← Gen(1λ): is an algorithm that takes as input the security parameter 1λ and
2. σ ← Sign(sk, m): is an algorithm that takes as input a private key sk and a message m
from some underlying message space (that may depend on pk). It outputs a signature σ .
3. b ← Vrfy( pk, m, σ ): is a deterministic veriﬁcation algorithm that takes as input a public
key pk, a message m, and a signature σ . It outputs a bit b, with b = 1 meaning valid and
b = 0 meaning invalid.
123
128
A. Soleimanian, S. Khazaei
Signature scheme correctness and security: It is required that the signature scheme be
correct (i.e., valid signatures are veriﬁed) and unforgeably-secure. See Appendix A.2 for
precise deﬁnition.
2.5 TSet primitive
The primitive TSet, introduced by Cash et al. [8], intuitively allows the client to securely and
abstractly store a FLEII on the server, and later issues keyword-related tokens to retrieve the
associated lists.
Deﬁnition 2 (TSet [8]) A TSet scheme consists of three P.P.T. algorithms
Σ = (Setup, GetTag, Retrieve) with the following syntax:
• (T Set, K ) ← Setup(T ): is an algorithm run by the client which takes as input a FLEII
• tg ← GetTag(K , w): is a deterministic algorithm run by the client which takes as input
the key K and a keyword w and outputs a tag tg.
• t ← Retrieve(T Set, tg): is a deterministic algorithm run by the server that takes a
data-structure T Set and a tag tg as input, and returns a list t of tupls.
T and outputs a data-structure T Set and a key K .
TSet correctness and security: The correctness intuitively guarantees that the algorithm
Retrieve always returns the expected list t = T[w]. A computational relaxation of correct-
ness, expresses that no P.P.T. adversary can ﬁnd a FLEII T and some associated tags tg such
that the algorithm Retrieve does not return the expected result, except with negligible proba-
bility. The security of TSet expresses that no useful information leading to the direct exposure
of the searched keyword or elements of array T is leaked from data-structure T Set and tags
tg. We refer to Appendix A.3 for precise deﬁnition of these requirements. An instantiation
of TSet can be found in [8] in which T Set does not reveal anything about T except its total
size Σw∈W|T[w]|; moreover, each tag tg only reveals |T[w]| = |D B(w)| and the search
pattern.
2.6 SSE primitive
An SSE is a two party computation (2PC) protocol between a client and a server. It includes
two phases, a setup and a search phase, such that the setup overhead is on the client side and
the search overhead is on the server side. In other words, the client constructs an encrypted
index from its database and sends this encrypted index to the server. Then, the client can
choose search queries q repeatedly. For each query the client and server interact to ﬁnd
documents satisfying the query such that the server is more involved during the search than
the client.
Deﬁnition 3 (SSE) A searchable symmetric encryption (SSE) scheme Π = (Setup, Search)
consists of a P.P.T. algorithm Setup and a 2PC protocol Search such that,
• (K , E D B) ← Setup(D B): is an algorithm run by the client. It takes a document
collection D B as input and then outputs an index E D B and a key K .
• V ← Search(K , q; E D B): is a protocol between a client and a server, where the client
takes as input the key K and a query q and the server takes as input E D B. At the end of
the protocol the client outputs a list of identiﬁers and the server outputs nothing.
123
Publicly veriﬁable SSE
129
SSE correctness and security: The correctness and security of an SSE scheme are the same
as the ones of a PV-SSE scheme, to be described in the next section. The only difference is
that the audit key ak and the role of the auditor should be ignored in Deﬁnitions 6 and 7.
Therefore the deﬁnitions are not mentioned here.
3 Publicly veriﬁable SSE
In this section, the syntax of publicly veriﬁable SSE (PV-SSE) is introduced and the security
deﬁnitions of the associated primitive are presented afterwards.
A PV-SSE protocol is an extended SSE protocol ensuring that if the server behaves mali-
ciously to produce an incorrect or incomplete result during the Search protocol, then it will
be detected by an auditor. More precisely, a PV-SSE protocol is a three party computation
(3PC) protocol among a client, an auditor and a server. SSE protocol is extended in a way
that at the end of the Setup phase the client also provides the auditor with an audit key.
Using this audit key (and some extra information, known as veriﬁcation keys, generated
during the Search protocol), after the execution of the Search protocol, the auditor decides
to accept or reject the returned result. Presumably, the server can see the communications
between the client and the auditor and whatever is sent from the server to the client should be
available to the auditor as well. The auditor lets the client know the result of the veriﬁcation.
Since, the audit key and interactions during the Search phase are visible to the auditor, they
should not help a curious auditor learn any useful information. More formally, we consider
an adversarial setting in which the client, the auditor and the server are respectively honest,
HBC and malicious, while the auditor and the server may collude with each other to extract
more information. Security is formally deﬁned for such adversaries.
3.1 Syntax and correctness
Deﬁnition 4 (PV-SSE) A publicly veriﬁable SSE scheme Σ consists of a P.P.T. algorithm
Setup and a 3PC protocol Search such that,
• (K , ak, E D B) ← Setup(D B): is an algorithm run by the client. It takes a document
collection D B as input and then outputs an index E D B, a secret key K and an audit key
ak which might be empty.
• (V , val) ← Search(K , q; E D B; ak): is a protocol among a client, a server and an
auditor, where the client takes as input a secret key K and a query q, the server takes
as input an index E D B and the auditor takes as input an audit key ak. At the end of
the protocol the client outputs a set V of identiﬁers and the auditor outputs val which is