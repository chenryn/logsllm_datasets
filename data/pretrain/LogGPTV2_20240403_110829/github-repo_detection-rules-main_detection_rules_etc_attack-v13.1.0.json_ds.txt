### Optimized Text

---

#### **Server Compromise for Adversary Operations**

Adversaries may compromise third-party servers to support various stages of their operations, including targeting, staging, launching, and executing attacks. These compromised servers can also be used for Command and Control (C2) activities. Instead of purchasing or setting up their own servers, adversaries may opt to compromise existing third-party servers to reduce costs and avoid detection.

- **Watering Hole Attacks**: Adversaries may compromise web servers to conduct watering hole attacks, where they inject malicious content into a legitimate website to target specific visitors.
- **Phishing Operations**: Email servers may be compromised to facilitate phishing campaigns, allowing adversaries to send malicious emails from trusted domains.

**Detection and Mitigation**:
- Monitor for identifiable patterns in server responses, such as unusual services, certificates, or SSL/TLS negotiation features.
- Conduct regular internet scans to identify and investigate potentially compromised servers.
- Implement robust security measures, including intrusion detection systems (IDS) and network monitoring, to detect and respond to suspicious activities.

---

#### **Cloud Service Discovery**

After gaining access to a system, adversaries may attempt to enumerate the cloud services running on that system. This can include Platform-as-a-Service (PaaS), Infrastructure-as-a-Service (IaaS), and Software-as-a-Service (SaaS) offerings. Common cloud services include Continuous Integration and Continuous Delivery (CI/CD) tools, Lambda Functions, Azure AD, AWS GuardDuty, and Google Cloud Audit Logs.

- **Azure Tools and APIs**: Adversaries may use Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, to enumerate resources and services.
- **Open Source Tools**: Tools like Stormspotter and Pacu can be used to discover and map cloud services.

**Detection and Mitigation**:
- Monitor cloud service usage for anomalous behavior that may indicate adversarial presence.
- Implement logging and monitoring for cloud service enumeration activities.
- Regularly review and audit cloud service configurations and permissions to detect and mitigate unauthorized changes.

---

#### **Space after Filename for Defense Evasion**

Adversaries can hide a program's true file type by appending a space to the end of a filename. This technique can trick users into double-clicking benign-looking files, which are then executed as executables.

- **Example**: A Mach-O executable named `evil.bin` can be renamed to `evil.txt ` (note the space at the end). When double-clicked, the operating system will recognize the true file type and execute it, rather than opening it with a text editor.

**Detection and Mitigation**:
- Monitor for filenames with spaces at the end, as this is uncommon and may indicate malicious activity.
- Use file monitoring and integrity checks to detect and alert on suspicious file modifications.
- Educate users to be cautious when opening files, especially those with unusual names or extensions.

---

#### **Remote System Discovery**

Adversaries may attempt to discover other systems within a network by IP address, hostname, or other logical identifiers. This information can be used for lateral movement and further exploitation.

- **Tools and Techniques**: Utilities like `Ping` and `Net View` can be used to discover remote systems. Additionally, local host files and ARP cache entries can provide information about networked devices.
- **Network Devices**: Adversaries may also use Network Device CLI commands to gather detailed information about systems within a network.

**Detection and Mitigation**:
- Monitor for processes and command-line arguments that could be used to gather system and network information.
- Implement network segmentation and access controls to limit the ability of adversaries to discover and move laterally within the network.
- Use network intrusion detection systems (NIDS) to detect and alert on suspicious scanning activities.

---

#### **Network Service Discovery**

Adversaries may attempt to discover services running on remote hosts and local network infrastructure devices. This can include port and vulnerability scans using tools brought onto the system.

- **Cloud Environments**: In cloud environments, adversaries may attempt to discover services running on other cloud hosts, including those connected to on-premises environments.
- **macOS Environments**: On macOS, adversaries may use the Bonjour application to discover services running on other macOS hosts.

**Detection and Mitigation**:
- Monitor for process use of the network and inspect intra-network flows to detect port scans and other discovery activities.
- Implement network segmentation and access controls to limit the visibility of services to unauthorized users.
- Use network intrusion detection systems (NIDS) to detect and alert on suspicious scanning activities.

---

#### **Domain Properties Gathering**

Adversaries may gather information about the victim's network domain(s) to shape their targeting and operational planning. This information can include administrative data, contacts, business addresses, and name servers.

- **Collection Methods**: Information can be gathered through active scanning, phishing, and accessing publicly available data sets, such as WHOIS records and passive DNS databases.
- **Third-Party Cloud Providers**: In environments using third-party cloud providers, this information may also be exposed through publicly available API endpoints.

**Detection and Mitigation**:
- Monitor for signs of reconnaissance activities, such as unusual network traffic or API requests.
- Implement robust logging and monitoring for domain-related activities and API usage.
- Regularly review and audit domain and API configurations to detect and mitigate unauthorized access.

---

#### **Software Discovery**

Adversaries may attempt to list the software and software versions installed on a system or in a cloud environment. This information can be used to identify potential vulnerabilities and shape follow-on behaviors.

- **Reasons for Enumeration**: Adversaries may enumerate software to determine the presence of security measures or to identify vulnerable versions that can be exploited for privilege escalation.

**Detection and Mitigation**:
- Monitor for actions that could be taken to gather system and network information, such as process creation and command-line execution.
- Use system management tools like Windows Management Instrumentation (WMI) and PowerShell to detect and alert on suspicious activities.
- Regularly update and patch software to minimize the risk of exploitation.

---

#### **Cloud Service Dashboard Usage**

Adversaries may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment. This includes details about specific services, resources, and features.

- **GCP Command Center**: For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries.
- **Graphical Dashboards**: Graphical dashboards may provide more information than APIs, allowing adversaries to gain insights without making API requests.

**Detection and Mitigation**:
- Monitor account activity logs for actions performed and activity associated with the cloud service management console.
- Implement multi-factor authentication (MFA) and strict access controls to prevent unauthorized access to cloud service dashboards.
- Regularly review and audit cloud service configurations and permissions to detect and mitigate unauthorized changes.

---

#### **Thread Local Storage (TLS) Callback Injection**

Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks to evade process-based defenses and potentially elevate privileges.

- **Injection Technique**: TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the legitimate entry point.
- **Execution Context**: Running code in the context of another process may allow access to the process's memory, system/network resources, and elevated privileges.

**Detection and Mitigation**:
- Monitor for Windows API calls indicative of code injection, such as `CreateRemoteThread`, `SuspendThread`, and `WriteProcessMemory`.
- Analyze process behavior to detect actions that are unusual for the process, such as opening network connections or reading files.
- Implement robust endpoint protection and application whitelisting to prevent and detect code injection attempts.

---

#### **Debugger Evasion**

Adversaries may employ various techniques to detect and avoid debuggers, which are typically used by defenders to trace and analyze the execution of potential malware payloads.

- **Checks and Evasion**: Debugger evasion may involve checking for the presence of artifacts indicative of a debugged environment, such as using `IsDebuggerPresent()` and `NtQueryInformationProcess()`.
- **Evasion Techniques**: Adversaries may alter their malware to disengage from the victim or conceal core functions if a debugger is detected. They may also flood debug logs with meaningless data to evade detection.

**Detection and Mitigation**:
- Monitor for suspicious native API function calls and processes that gather system information.
- Implement robust logging and monitoring for debugger-related activities.
- Use advanced detection and response tools to identify and mitigate debugger evasion techniques.

---

#### **Pass the Hash (PtH)**

Adversaries may use "pass the hash" (PtH) to authenticate as a user without having access to the user's cleartext password. This method bypasses standard authentication steps and uses the password hash directly.

- **Credential Access**: Valid password hashes are captured using credential access techniques and then used to authenticate as the user.
- **Overpass the Hash**: Stolen password hashes can also be used to create valid Kerberos tickets, enabling pass-the-ticket (PtT) attacks.

**Detection and Mitigation**:
- Audit all logon and credential use events and review for discrepancies.
- Monitor for NTLM LogonType 3 authentications that are not associated with a domain login and are not anonymous logins.
- Implement strong password policies and use multi-factor authentication (MFA) to reduce the risk of PtH attacks.

---

#### **Exfiltration Over Physical Medium**

Adversaries may exfiltrate data via a physical medium, such as a removable drive. This technique is particularly relevant in air-gapped network compromises, where exfiltration occurs through a physical medium introduced by a user.

- **Physical Media**: Examples include external hard drives, USB drives, cellular phones, MP3 players, and other removable storage devices.
- **Intermediate Hops**: Physical media can be used as the final exfiltration point or to hop between otherwise disconnected systems.

**Detection and Mitigation**:
- Monitor file access on removable media and detect processes that execute when removable media are mounted.
- Implement strict access controls and logging for removable media usage.
- Educate users about the risks of using untrusted removable media and implement policies to prevent unauthorized data transfer.

---

#### **DLL Side-Loading**

Adversaries may execute their own malicious payloads by side-loading DLLs. This technique involves hijacking which DLL a program loads, similar to DLL search order hijacking, but with direct invocation of a legitimate application.

- **Side-Loading Process**: Adversaries position both the victim application and malicious payload alongside each other, taking advantage of the DLL search order used by the loader.
- **Obfuscation**: Malicious payloads may be encrypted or obfuscated until loaded into the memory of the trusted process.

**Detection and Mitigation**:
- Monitor processes for unusual activity, such as a process that does not typically use the network beginning to do so.
- Track DLL metadata and compare loaded DLLs against previous executions to detect differences.
- Implement robust application control and endpoint protection to prevent and detect side-loading attempts.

---

#### **Ingress Tool Transfer**

Adversaries may transfer tools or other files from an external system into a compromised environment. This can be done through the command and control channel or alternate protocols like FTP.

- **File Transfer**: Files can also be transferred using various web services and native tools on the victim system.
- **Common Utilities**: On Windows, utilities like `copy`, `finger`, `certutil`, and PowerShell commands can be used. On Linux and macOS, utilities like `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget` are commonly used.

**Detection and Mitigation**:
- Monitor for file creation and files transferred into the network.
- Analyze network data for uncommon data flows and processes that do not normally have network communication.
- Implement robust network monitoring and intrusion detection systems (IDS) to detect and alert on suspicious file transfer activities.

---

#### **Additional Email Delegate Permissions**

Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. This can be achieved using PowerShell cmdlets, such as `Add-MailboxPermission`, or through the Google Admin console and Gmail settings.

- **Persistence and BEC**: This technique is often used in persistent threat incidents and Business Email Compromise (BEC) scenarios to enable further access and control.
- **Folder Permissions**: Adversaries may assign mailbox folder permissions through individual folder permissions or roles, allowing them to maintain persistence to the target user's mail folders.

**Detection and Mitigation**:
- Monitor for unusual Exchange and Office 365 email account permissions changes.
- Enable mailbox audit logs to forward folder permission modification events to the Unified Audit Log.
- Create rules to alert on ModifyFolderPermissions operations that assign excessive permissions to the Anonymous or Default user.

---

#### **Code Signing Certificates**

Adversaries may buy and/or steal code signing certificates to use during targeting. Code signing provides a level of authenticity for a program and guarantees that the code has not been altered or corrupted.

- **Procurement Methods**: Adversaries may purchase or steal code signing certificates using front organizations or stolen information from previously compromised entities.
- **Trust and Authenticity**: Users and security tools may trust signed code more than unsigned code, even if they don't know who issued the certificate or who the author is.

**Detection and Mitigation**:
- Analyze code signing certificates for features that may be associated with the adversary, such as the thumbprint, algorithm, validity period, common name, and certificate authority.
- Use malware repositories to identify additional samples associated with the adversary and identify patterns in procured code signing certificates.
- Implement robust certificate management and monitoring to detect and mitigate the use of stolen or fraudulent code signing certificates.

---

#### **Serverless Execution**

Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer serverless resources, including compute engines, application integration services, and web servers.

- **Abuse of Resources**: Adversaries may use serverless functions to execute malicious code, such as crypto-mining malware, or to add additional cloud roles to a serverless function.
- **Event-Triggered Execution**: Serverless functions can be invoked in response to cloud events, enabling persistent execution over time.

**Detection and Mitigation**:
- Monitor for the creation and modification of serverless functions and related resources.
- Implement robust logging and monitoring for cloud service modification activities.
- Use advanced detection and response tools to identify and mitigate serverless execution attempts.

---

This optimized text aims to provide a clear, coherent, and professional overview of the various techniques and tactics used by adversaries, along with detection and mitigation strategies.