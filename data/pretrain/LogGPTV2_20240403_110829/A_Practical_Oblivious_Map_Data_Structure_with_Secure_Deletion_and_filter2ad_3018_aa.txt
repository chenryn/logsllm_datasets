title:A Practical Oblivious Map Data Structure with Secure Deletion and
History Independence
author:Daniel S. Roche and
Adam J. Aviv and
Seung Geol Choi
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
A Practical Oblivious Map Data Structure
with Secure Deletion and History Independence
Daniel S. Roche, Adam Aviv, Seung Geol Choi
Computer Science Department
United States Naval Academy
{roche,aviv,choi}@usna.edu
Abstract—We present a new oblivious RAM that supports
variable-sized storage blocks (vORAM), which is the ﬁrst ORAM
to allow varying block sizes without trivial padding. We also
present a new history-independent data structure (a HIRB tree)
that can be stored within a vORAM. Together, this construction
provides an efﬁcient and practical oblivious data structure (ODS)
for a key/value map, and goes further to provide an additional
privacy guarantee as compared to prior ODS maps: even upon
client compromise, deleted data and the history of old operations
remain hidden to the attacker. We implement and measure the
performance of our system using Amazon Web Services, and the
single-operation time for a realistic database (up to 256K entries)
is less than 1 second. This represents a 100x speed-up compared
to the current best oblivious map data structure (which provides
neither secure deletion nor history independence) by Wang et
al. (CCS 14).
I. INTRODUCTION
A. Motivation
Increasingly, organizations and individuals are storing large
amounts of data in remote, shared cloud servers. For sensitive
data, it is important to protect the privacy not only of the
data itself but also of the access to the metadata that may
contain which records have been accessed and when, thereby
revealing properties of the underlying data, even if that data is
encrypted. There are multiple points of potential information
leakage in this setting: an adversary could observe network
communication between the client and server; an adversary
could compromise the cloud itself, observing the data stored
at the server, possibly including mirrored copies or backups;
an adversary could observe the computations performed by
the remote server; the adversary may compromise the locally-
stored client data; or, ﬁnally, the adversary may compromise
the data in multiple ways, e.g., a complete compromise of
both the remotely stored cloud storage and locally-stored client
storage1.
While a complete compromise will inevitably reveal private
data, we seek data storage mechanisms which maximize
privacy while maintaining reasonable, practical efﬁciency,
at any level of compromise. For generality, we assume a
computationally-limited server which may only store and
retrieve blocks of raw data, and we focus on the most basic
(and perhaps most important) data structure: a key/value map.
1We assume an honest-but-curious server throughout, and leave achieving
an ODS with malicious servers as an open problem.
Oblivious RAM (ORAM). With a computationally-limited
server,
the access pattern of client-server communication
reveals the entire history of the remote data store. This access
pattern, even if the actual data is encrypted, may leak sensitive
information about the underlying stored data, such as keyword
search queries or encryption keys [1]–[3].
A generic solution to protect against access pattern leakage
is oblivious RAM (ORAM) [4], which obscures the operation
being performed (read/write), the address on which it operates,
and the contents of the underlying data. Any program (with
the possible necessity of some padding) can be executed using
an ORAM to hide the access patterns to the underlying data.
A great number of ORAM schemes have been recently
proposed, most aiming to improve the efﬁciency as it relates
to the recursive index structure, which is typically required
to store the hidden locations of items within the ORAM
(for example [5]–[10] and references therein). However, an
important aspect overlooked by previous work is the size of
data items themselves. The vORAM construction we propose
provides an afﬁrmative answer to the following question:
Can an oblivious RAM hide the size of varying-sized
items, with greater efﬁciency than that achieved by
trivial padding?
it
Oblivious data structure (ODS). Recently, Wang et al. [11]
showed that
is possible to provide obliviousness more
efﬁciently if the speciﬁcs of the target program are considered.
In particular, among other results, Wang et al. achieved an
oblivious data structure (ODS) scheme for a key-value map,
by constructing an AVL tree on a non-recursive ORAM with-
out using the position map. Their scheme requires ˜O(log n)
ORAM blocks of client storage, where n is the maximum
number of allowable data items. More importantly, due to
lack of position map lookups,
the scheme requires only
n) blocks of communication bandwidth, which con-
O(log
stituted roughly an O(log n)-multiplicative improvement in
communication bandwidth over the generic ORAM solution.
We will brieﬂy explain “the pointer-based technique" they
introduced to eliminate the position map in Section I-C.
2
The practicality of oblivious data structures are challenging,
however, owing to the combination of inefﬁciencies in the data
structures compounded with that of the underlying ORAM. In
our experimental results presented in Section VI, and Table I
speciﬁcally, we found that the AVL ODS suffers greatly from
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Daniel S. Roche. Under license to IEEE.
DOI 10.1109/SP.2016.19
DOI 10.1109/SP.2016.19
178
178
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
the per-operation
a high round complexity, and also that
bandwidth exceeds the total database size (and hence a trivial
alternative implementation) until the number of entries exceeds
1 million.
Similar observations for ORAMs more generally were made
recently by Bindschaedler et al. [12], who examined existing
ORAM alternatives in a realistic cloud setting, and found
many theoretical results lacking in practice. We ask a related
question for ODS, and answer it in the afﬁrmative with our
HIRB data structure stored in vORAM:
Can an oblivious map data structure be made prac-
tically useful in the cloud setting?
Catastrophic attack.
In the cloud storage scenario, obliv-
iousness will protect the client’s privacy from any observer
of network trafﬁc or from the cloud server itself. However,
if the attacker compromises the client and obtains critical
information such as the encryption keys used in the ODS,
all the sensitive information stored in the cloud will simply be
revealed to the attacker.
We call this scenario a catastrophic attack, and it is im-
portant to stress that this attack is quite realistic. The client
machine may be stolen or hacked, or it may even be legally
seized due to a subpoena.
Considering the increasing incidence of high-proﬁle catas-
trophic attacks in practice (e.g., [13], [14]), and that even
government agencies such the CIA are turning to third-party
cloud storage providers [15], it is important to provide some
level of privacy in this attack scenario. Given this reality, we
ask and answer the following additional question:
Can we provide any privacy guarantee even under
a catastrophic attack?
Speciﬁcally, our vORAM+HIRB construction will provide
strong security for deleted data, as well as a weaker (yet
optimal) security for the history of past operations, after
complete client compromise.
B. Security Requirements
Motivated by the goals outlined previously, we aim to
construct a cloud database system that provides the following
two security properties:
• Obliviousness: The system should hide both the data and
the access patterns from an observer of all client-server
communication (i.e., be an ODS).
• Secure Deletion and History Independence: The system,
in the face of a catastrophic attack, should ensure that
no previously deleted data, the fact that previous data
existed, or the order in which extant data has been
accessed, is revealed to an attacker.
Additionally, we require that the system be practically useful,
meaning it should be more efﬁcient (w.r.t. communication
cost, access time, and round complexity) than previous ODS
schemes, even those that do not necessarily provide secure
deletion nor history independence.
Each required security notion has individually been the
focus of numerous recent research efforts (see Section II). To
179179
the best of our knowledge, however, there is no previous work
that considers all the properties simultaneously. We aim at
combining the security properties from obliviousness, secure
deletion, and history independence into a new, uniﬁed system
for secure remote cloud storage. The previous ODS schemes
do not provide history-independence nor secure deletion and
are inefﬁcient for even small data stores. Previous mechanisms
providing secure deletion or history independence are more
efﬁcient, but do not hide the access pattern in remote cloud
storage (i.e., do not provide obliviousness). And unfortunately,
the speciﬁc requirements of these constructions means they
cannot trivially be combined in a straightforward way.
To better understand the necessity of each of the security
requirements, consider each in kind.
Obliviousness: The network trafﬁc to a remote server reveals
to an attacker, or to the server itself, which raw blocks
are being read and written. Even if the block contents
are encrypted, an attacker may be able to infer sensitive
information from this access pattern itself. Like previous
ODS schemes, our system will ensure this is not the case;
the server-level access pattern reveals nothing about the
underlying data operations that the user is performing.
History independence: By inspecting the internal structure of
the currently existing data in the cloud after a catastrophic
attack, the attacker may still be able to infer information
about which items were recently accessed or the likely
prior existence of a record even if that record was
previously deleted [16]. However, if an ODS scheme
provides perfect history independence, the catastrophic
attacker cannot infer which sequence of operations was
applied, among all the sequences that could have resulted
in the current set of the data items. Interestingly, we
show that it is impossible to achieve perfect history in-
dependence in our setting with a computationally-limited
server; nonetheless, providing (cid:2)-history independence is
still desirable, where only the most recent (cid:2) operations
are revealed but nothing else.
Secure deletion: Given that only bounded history indepen-
dence is possible, the privacy of deleted data must be
considered. It is desirable that the catastrophic attacker
should not be able to guess information about deleted
data. In practice, data deleted from persistent media, such
as hard disk drives, is easily recoverable through stan-
dard forensic tools. In the cloud setting, the problem is
compounded because there is normally no direct control
of how and where data is stored on physical disks, or
backed up and duplicated in servers around the globe.
We follow a similar approach as [17], where secure
deletion is accomplished by re-encrypting and deleting
the old encryption key from local, erasable memory such
as RAM.
C. Our Work
Pointer-based technique. Wang et al. [11] designed an ODS
scheme for map by storing an AVL tree on top of the non-
recursive Path ORAM [9] using the pointer-based technique, in
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
which the ORAM position tags act as pointers, and the pointer
to each node in the AVL tree is stored in its parent node. With
this technique, when the parent node is fetched, the position
tags of its children are immediately obtained. Therefore, the
position map lookups are no more necessary.
Similarly,
in our ODS scheme, we will overlay a data
structure on a non-recursive ORAM using a pointer-based
technique for building the data structure.
We stress that the non-recursive Path ORAM still remains
the best choice when we would like to embed our data
structure in an ORAM with the pointer-based technique, in
spite of all the recent improvements on ORAM techniques.
This is mainly because all ORAM improvement techniques
consider the setting where an ORAM runs in a stand-alone
fashion, unlike our setting where the ORAM actions,
in
particular with position map lookups, depend on the upper-
layer data structure. In particular, with the non-recursive Path
ORAM, each ORAM operation takes only a single round of
communication between the client and server, since there is
no position map lookup; moreover, each operation transfers
O(log n) blocks where the size of each block can be arbi-
trarily small up to Ω(log n). To compare the non-recursive
Path ORAM with the most recent stand-alone ORAMs, each
operation of the constant communication ORAM [18] transfers
O(1) blocks each of which should be of size Ω(log
n), and it
additionally uses computation-intensive homomorphic encryp-
tions. For Ring ORAM [19], it still refers to the position map,
and although its online stage may be comparable to the non-
recursive Path ORAM, it still has the additional ofﬂine stage.
The non-recursive version of these ORAMs has essentially the
same efﬁciency as the non-recursive Path ORAM.
4
Impracticality of existing data structures. Unfortunately,
no current data structure exists that can meet our security and
efﬁciency requirements:
• It should be a rooted tree. This is necessary, since we
would like to use the pointer-based technique. Because
the positions are randomly re-selected on any access to
that node, the tree structure is important in order to avoid
dangling references to old pointers.
• The height of the tree should be O(log n) in the worst
case. To achieve obliviousness, all operations must ex-
ecute with the same running time, which implies all
operations will be padded to some upper bound that is
dependent on the height of the tree.
• The data structure itself should be (strongly) history-
independent, meaning the organization of nodes depends
only on the current contents, and not the order of op-
erations which led to the current state. As a negative
example, consider an AVL tree, which is not history
independent. Inserting the records A, B, C, D in that
order; or B, C, D, A in that order; or A, B, C, D, E
and then deleting E; will each result in a different state of
the data structure, thereby revealing (under a catastrophic
attack) information on the insertion order and previous
deletions.
To the best of our knowledge,
there is no data struc-
ture satisfying all of the above conditions. Most tree-based
solutions, including AVL trees and B-trees, are not history
independent. Treaps and B-treaps are rooted trees with history
independence, but they have linear height in the worst case.
Skip-lists and B-Skip-lists are history independent and tree-
like, but technically they are not rooted trees and thereby not
amenable to the pointer-based technique. That is, Skip-lists
and B-Skip-lists have multiple incoming links, requiring linear
updates in the ORAM to maintain the pointers and position
tags in the worst case.
HIRB. We developed a new data structure, called a HIRB tree
(history independent, randomized B-tree), that satisﬁes all the
aforementioned requirements. Conceptually, it is a ﬁxed height
B-tree such that when each item is inserted, the level in HIRB
tree is determined by logβ n trials of (pseudorandom) biased
coin ﬂipping where β is the block factor. The tree may split
or merge depending on the situation, but it never rotates. The
ﬁxed height of the tree, i.e. H = 1 + logβ n, is very beneﬁcial
for efﬁciency. In particular, every operation visits at most 2H
nodes, which greatly saves on padding costs, compared to the
ODS scheme of [11] where each AVL tree operation must be
padded up to visiting 3 · 1.44 · lg n nodes.
The HIRB is described more carefully in Section V, with
full details in the appendix.
vORAM. One challenge with HIRB trees is that number of
items that each tree node contains are variable, and in the
unlucky case, it may become too large for an ORAM bucket
to store.
This challenge is overcome by introducing vORAM
(ORAM with variable-size blocks). The design of vORAM
is based on the non-recursive version of Path ORAM where
the bucket size remains ﬁxed, but each bucket may contain as
many variable-size blocks (or parts of blocks) as the bucket
space allows. Blocks may also be stored across multiple
buckets (in the same path).
We observe that the irregularity of the HIRB node sizes can
be smoothed over O(log n) buckets from the vORAM root to
an vORAM leaf, and we prove that the stash size on the client
can still be small ˜O(log n) with high probability. We note that
vORAM is the ﬁrst ORAM that deals with variable size blocks,
and may be of independent interest.
The vORAM is described carefully in Section IV, and the
Finally,
full details are provided in the appendix.
Secure deletion.
for secure deletion, a parent
vORAM bucket contains the encryption keys of both children.
When a bucket is modiﬁed, it is encrypted with a fresh key;
then the encryption keys in the parent are accordingly modi-
ﬁed, which recursively affects all its ancestors. However, we
stress that in each vORAM operation, leaf-to-root refreshing
takes place anyway, and adding this mechanism is bandwidth-
free. Additionally, instead of using the label of each item
directly in HIRB, we use the hash of the label. This way,
we can remove the dependency between the item location in
180180
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:59 UTC from IEEE Xplore.  Restrictions apply. 
HIRB and its label (with security proven in the random oracle
model).
Imperfect history independence. Our approach does not
provide perfect history independence. Although the data struc-
ture in the vORAM is history independent, the vORAM is
not. Indeed, in any tree-based or hierarchical ORAM, the