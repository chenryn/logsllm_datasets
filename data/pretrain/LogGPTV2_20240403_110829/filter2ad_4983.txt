title:Eliminating Human Specification in Static Analysis
author:Ying Kong and
Yuqing Zhang and
Qixu Liu
Eliminating Human Specification in Static Analysis* 
Ying Kong, Yuqing Zhang**, and Qixu Liu 
National Computer Network Intrusion Protection Center, GUCAS, Beijing 100049, China 
Tel.: +86-10-88256218; Fax: +86-10-88256218 
PI:EMAIL 
State Key Laboratory of Information Security, GUCAS, Beijing 100049, China 
Abstract. We present a totally automatic static analysis approach for detecting 
code injection vulnerabilities in web applications on top of JSP/servlet frame-
work.  Our  approach  incorporates  origin  and  destination  information  of  data 
passing in information flows, and developer’s beliefs on vulnerable information 
flows extracted via statistical analysis and pattern recognition technique, to in-
fer specifications for flaws without any human participation. According to ex-
periment, our algorithm is proved to be able to cover the most comprehensive 
range of attack vectors and lessen the manual labor greatly. 
Published  static  approaches  for  detecting  code  injection  vulnerabilities  depend  on 
human work heavily to specify flaws and to build auditing model. This leads to much 
omission in tagging attack vectors due to the erratic nature of human judgment, fur-
thermore,  the  omission  in  flaw  report.  In  this  paper,  we  present  a  novel  approach 
named injection vulnerability checking tool (IVCT) to solve this problem. 
We consider the attack against code injection vulnerability as an improper commu-
nication procedure among three components including the  front-end  web server, the 
back-end database and the underlying operating system. Return from method invoked 
on web server forms the message, and is finally accepted by another method invoked 
on one of the three components. We treat the former method as taint source, and the 
latter as vulnerable receiver. Data flow of the message, which starts with taint source 
and ends at vulnerable receiver, is regarded as possible candidate of vulnerable flow 
in this paper. Such model covers the most comprehensive range of attack vectors. 
IVCT framework consists of four phases,  which are illustrated in Fig 1. We take 
advantage  of  the  slicing  technique  [1]  described  in  [2]  to  track  propagation  of  un-
trusted  input,  and  enhance  the  dataflow  analysis  with  indirect  propagation  which 
models the relationship between the data passing into and out of a library method and 
abstracts away the concrete operations on data therein. Such abstraction is based on 
the  insight  that  most  library  code  won’t  modify  data  structure  from  customer  code. 
Before tracking, just those sensitive components’ jar paths are required be specified in 
advance  to  locate  the  candidate  information  flows.  During  tracking,  we  can  collect 
tainted information propagated via library invocation directly instead of tracking into 
the  implementation.  For  example,  in  the  statement  “str2=a.fun(str1)”,  data  “str1”  
* This work is supported by the National Natural Science Foundation of China under Grant No. 
60970140, No.60773135 and No.90718007. 
** Corresponding author. 
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 494–495, 2010. 
© Springer-Verlag Berlin Heidelberg 2010 
Eliminating Human Specification in Static Analysis 
495 
Table 1. Experimental Results Comparing with 
TAJ and bddbddb 
Fig. 1. IVCT Workflow 
passes into library invocation “a.fun”, then reference variable “a” and “str2” will be 
treated as tainted data passing out of the invocation. Such enhancement are expected 
to simplify the tracking process, and hence to improve the scalability. 
We  manually  inspected  two  web  applications  “Webgoat5.3RC”  and  “blojsom-
3.3b”, both of which are used by tools TAJ in Tripp [2] and bddbddb in [3] for ex-
periment data. In the analysis, IDE “Eclipse” is utilized to locate grammar element of 
java  code,  the  rest  operations  are  rigorously  adhered  to  IVCT’s  instructions.  There-
fore, no human judgments have been involved into the inspection. According to the 
experimental results illustrated in Table 1, our approach is proved to be better in two 
factors.  First,  no  human  participation  is  required  by  IVCT.  In  contrast,  TAJ  and 
bddbddb require checkers to read the libraries used by targeted web applications thor-
oughly  to  flag  taint  sources  and  sinks.  Second,  IVCT  captures  more  vulnerabilities 
with fewer false positives. We own the bigger number to the fact that IVCT’s candi-
date flows cover all the attack vectors. In fact, every method returning variable possi-
ble to carry string value in web server library is potential taint source, but TAJ limits 
taint  source  only  in  form  input  and  upload  file  data.  Additionally,  variables  propa-
gated by sinks’ reference variables are potential vulnerable receivers. However, such 
propagation is ignored by both [2] and [3]. In the future, we plan to implement our 
approach in a tool to be used in real code. In addition, try to extract other beliefs bur-
ied in program code which can be used as flaw specification. 
References 
1.  Sridharan, M., Fink, S.J., Bodik, R.: Thin slicing. In: ACM SIGPLAN Conference on Pro-
gramming Language Design and Implementation, vol. 42(6), pp. 112–122 (2007) 
2.  Tripp, O., Pistoia, M., Fink, S., Sridharan, M., Weisman, O.: TAJ: Effective Taint Analysis 
of Web Applications. In: ACM SIGPLAN Conference on Programming Language Design 
and Implementation, pp. 87–97 (2009) 
3.  Livshits, V.B., Lam, M.S.: Finding security vulnerabilities in Java applications with static 
analysis. In: The 14th USENIX Security Symposium, pp. 271–286 (2005)