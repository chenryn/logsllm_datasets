# Title: Eliminating Human Specification in Static Analysis

## Authors:
- Ying Kong
- Yuqing Zhang (Corresponding author)
- Qixu Liu

## Affiliations:
- National Computer Network Intrusion Protection Center, GUCAS, Beijing 100049, China
- State Key Laboratory of Information Security, GUCAS, Beijing 100049, China

## Contact Information:
- Tel.: +86-10-88256218
- Fax: +86-10-88256218
- Email: [PI:EMAIL]

## Abstract:
We present a fully automated static analysis approach for detecting code injection vulnerabilities in web applications built on the JSP/servlet framework. Our method integrates origin and destination information of data flows, along with developer beliefs about vulnerable information flows, extracted through statistical analysis and pattern recognition techniques. This allows us to infer specifications for flaws without any human intervention. Experimental results demonstrate that our algorithm can cover a wide range of attack vectors and significantly reduce manual labor.

## Introduction:
Existing static analysis methods for detecting code injection vulnerabilities heavily rely on human effort to specify flaws and build auditing models. This often leads to omissions in identifying attack vectors due to the inherent variability in human judgment, resulting in incomplete flaw reports. In this paper, we introduce a novel approach called Injection Vulnerability Checking Tool (IVCT) to address these issues.

## Methodology:
We model code injection attacks as improper communication procedures involving three components: the front-end web server, the back-end database, and the underlying operating system. The message, formed by the return value from a method invoked on the web server, is eventually accepted by another method invoked on one of the three components. We classify the former method as a taint source and the latter as a vulnerable receiver. The data flow from the taint source to the vulnerable receiver is considered a potential candidate for a vulnerable flow. This model covers a comprehensive range of attack vectors.

The IVCT framework consists of four phases, as illustrated in Figure 1. We employ slicing techniques to track the propagation of untrusted input and enhance dataflow analysis with indirect propagation, which models the relationship between data entering and exiting a library method, abstracting away specific operations within the library. This abstraction is based on the observation that most library code does not modify the data structure from the customer code.

Before tracking, we require the specification of sensitive components' jar paths to locate the candidate information flows. During tracking, we collect tainted information propagated via library invocations directly, rather than delving into the implementation details. For example, in the statement "str2 = a.fun(str1)", the data "str1" passes into the library invocation "a.fun", and the reference variables "a" and "str2" are treated as tainted data passing out of the invocation. This enhancement simplifies the tracking process and improves scalability.

## Experimental Results:
We manually inspected two web applications, "Webgoat5.3RC" and "blojsom-3.3b", both of which have been used in previous studies with tools TAJ in Tripp [2] and bddbddb in [3]. In our analysis, we used the Eclipse IDE to locate Java grammar elements, and all other operations strictly followed IVCT's instructions, ensuring no human judgments were involved.

According to the experimental results presented in Table 1, our approach outperforms existing methods in two key aspects. First, IVCT requires no human participation, whereas TAJ and bddbddb necessitate checkers to thoroughly read the libraries used by the targeted web applications to flag taint sources and sinks. Second, IVCT captures more vulnerabilities with fewer false positives. This is attributed to the fact that IVCT's candidate flows cover all attack vectors. Specifically, every method returning a variable that can carry a string value in the web server library is a potential taint source, whereas TAJ limits taint sources to form input and uploaded file data. Additionally, variables propagated by sink reference variables are potential vulnerable receivers, a factor ignored by both [2] and [3].

## Future Work:
In the future, we plan to implement our approach in a tool for use in real-world code. We also aim to extract other hidden beliefs in program code that can be used as flaw specifications.

## References:
1. Sridharan, M., Fink, S.J., Bodik, R.: Thin slicing. In: ACM SIGPLAN Conference on Programming Language Design and Implementation, vol. 42(6), pp. 112–122 (2007)
2. Tripp, O., Pistoia, M., Fink, S., Sridharan, M., Weisman, O.: TAJ: Effective Taint Analysis of Web Applications. In: ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 87–97 (2009)
3. Livshits, V.B., Lam, M.S.: Finding security vulnerabilities in Java applications with static analysis. In: The 14th USENIX Security Symposium, pp. 271–286 (2005)

* This work is supported by the National Natural Science Foundation of China under Grant No. 60970140, No.60773135, and No.90718007.

** Corresponding author.

S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 494–495, 2010.
© Springer-Verlag Berlin Heidelberg 2010

**Figure 1. IVCT Workflow**

**Table 1. Experimental Results Comparing with TAJ and bddbddb**