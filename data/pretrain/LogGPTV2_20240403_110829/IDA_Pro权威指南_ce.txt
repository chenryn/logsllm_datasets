   magic = struct.unpack("I", li.read(4))[0]  
   if magic != 0x1DAB00C:  
     return 0  
   return "Python Simpleton Loader"  
#Load the file  
#   li - loader_input_t object  
#   neflags - refer to loader.hpp for valid flags  
#   format  - The file format selected nby the user  
#Returns:  
#   1 – success  
#   0 – failure  
def load_file(li, neflags, format):  
   li.seek(0)  
   (magic, size, base) = struct.unpack("/module目录中保存有几个示例处理器。你需要浏览（如果需要）的一个较为简单的处理器为 z8 处理器。其他处理器的复杂程度根据它们的指令集以及它们是否承担加载任务而各有不同。如果你正考虑编写自己的处理器模块，其中一种方法（Ilfak 在README文件中推荐过）是复制一个现有的处理器模块，并根据需要修改。这时，你可能需要找到逻辑结构（不一定是处理器体系结构）与你的模块最为相似的处理器模块。
19.3.1 processor_t结构体
与插件和加载器一样，处理器模块只导出一个项目。对处理器而言，这个项目必定是一个名为LPH
 的processor_t
 结构体。如果你包含/module/idaidp.hpp 文件（这个文件又包含处理器模块所需的其他许多 SDK 头文件），IDA 将自动导出这个结构体。编写处理器模块之所以非常困难，其中一个原因是 processor_t
 结构体包含56个必须初始化的字段，其中 26 个字段是函数指针，并且有 1 个字段是一个指向数组的指针，这个数组由一个或多个结构体指针构成，每个指针指向一种包含 59 个需要初始化的字段的结构体（asm_t
 ）。很简单，是吗？构建处理器模块面临的一大难题与初始化全部必需的静态数据有关，由于每个数据结构中都包含大量字段，这个过程很容易出错。这也是Ilfak 建议你在创建新处理器时使用一个现有的处理器作为基础的原因之一。
由于这些数据结构非常复杂，我们并不打算枚举每一个可能的字段及其用法。我们将重点讨论主要的字段。有关每个结构体中的这些字段及其他字段的详细信息，请参阅 idp.hpp 文件。我们讨论各种 processor_t
 字段的顺序，并不是 processor_t
 声明它们的顺序。
19.3.2 LPH结构体的基本初始化
在深入分析处理器模块的行为之前，需要注意一些静态数据要求。在构建反汇编模块时，你需要创建一个汇编语言助记符列表，日后你需要为目标处理器识别这些助记符。这个列表采用instruc_t
 （在idp.hpp中定义）结构体数组的形式创建，通常保存在一个名为 ins.cpp 的文件中。如下所示，instruc_t
 是一个简单的结构体，它有两方面的用途：为指令助记符提供一个表查找，描述每条指令的一些基本特点。
struct instruc_t {  
  const char *name;  //instruction mnemonic  
  ulong feature;     //bitwise OR of CF_xxx flags defined in idp.hpp  
};
feature
 字段用于说明各种行为，如指令是否读取或写入它的操作数，指令执行时程序该如何继续（默认、跳转、调用）。CF_xxx
 中的CF
 代表典型特征
 （canonical feature ）。基本上，feature字段用于实现控制流和交叉引用概念。下面是一些有趣的典型特征标志。
CF_STOP
 。这条指令并不将控制权转交给下一条指令。绝对跳转和函数返回指令即属于这类指令。
CF_CHGn
 。这条指令修改操作数 n
 ，这里的 n
 在1 与6 之间。
CF_USEn
 。这条指令使用操作数 n
 ，这里的 n
 在1 与6 之间。USE
 指“读取”或“引用”（但不是修改，参见 CF_CHGn
 ）一个内存位置。
CF_CALL
 。这条指令调用一个函数。
指令不需要按任何特殊的顺序列出。具体来说，你没有必要根据与指令有关的二进制操作码对指令排序，这个数组中的指令与有效的二进制操作码之间也不需要建立一一对应的关系。示例指令数组的前几行和后几行如下所示：
    instruc_t Instructions[] = {  
       {"STOP_CODE", CF_STOP},   /* 0 */  
       {"POP_TOP", 0},           /* 1 */  
       {"ROT_TWO", 0},           /* 2 */  
       {"ROT_THREE", 0},         /* 3 */  
       {"DUP_TOP", 0},           /* 4 */  
       {"ROT_FOUR", 0},          /* 5 */  
➊     {NULL, 0},                /* 6 */  
       ...  
       {"CALL_FUNCTION_VAR_KW", CF_CALL}, /* 142 */  
       {"SETUP_WITH", 0},                 /* 143 */  
       {"EXTENDED_ARG", 0},               /* 145 */  
       {"SET_ADD", 0},                    /* 146 */  
       {"MAP_ADD", 0}                     /* 147 */  
   };
在我们的例子中，由于 Python 字节码非常简单，我们将在指令与字节码之间保持一一对应的关系。需要注意的是，为了保持这种关系，如果操作码没有定义，如这里的操作码6（➊），有些指令记录必须充当填充符。
通常，ins.hpp 文件定义了一组相关的枚举常量，说明了整数和指令之间的对应关系，如下所示：
enum python_opcodes {  
   STOP_CODE = 0,  
   POP_TOP = 1,    //remove top item on stack  
   ROT_TWO = 2,    //exchange top two items on stack  
   ROT_THREE = 3,  //move top item below the 2nd and 3rd items  
   DUP_TOP = 4,    //duplicate the top item on the stack  
   ROT_FOUR = 5,   //move top item below the 2nd, 3rd, and 4th items  
   NOP = 9,        //no operation  
   ...  
   CALL_FUNCTION_VAR_KW = 142,  
   SETUP_WITH = 143,  
   EXTENDED_ARG = 145,  
   SET_ADD = 146,  
   MAP_ADD = 147,  
   PYTHON_LAST = 148  
};
这里选择为每一条指令显式赋值，这既是为了表述清楚，也因为指令序列中留有空白（由于使用了真正的 Python 操作码作为指令索引）。这里还添加了另一个常量（PYTHON_LAST
 ），以便于你找到列表的结尾。了解指令及相关整数之间的对应关系后，我们就拥有了足够的信息，可以初始化LPH
 （我们的全局 processor_t
 ）的3 个字段。这3 个字段为：
int instruc_start;   // integer code of the first instruction  
  int instruc_end;     // integer code of the last instruction + 1  
  instruc_t *instruc;  // array of instructions
我们必须分别使用 STOP_CODE
 、PYTHON_LAST
 和Instructions
 初始化这些字段。这些字段共同使处理器模块能够迅速查询反汇编代码清单中任何指令的助记符。
对大多数处理器模块而言，我们还需要定义一组寄存器名称以及一组枚举常量，以引用它们。如果要编写x86 处理器模块，可以首先编写以下代码。在这里，为了简化，我们仅限于基本的x86 寄存器集合：
static char *RegNames[] = {  
   "eax", "ebx", "ecx", "edx", "edi", "esi", "ebp", "esp  
   "ax", "bx", "cx", "dx", "di", "si", "bp", "sp",  
   "al", "ah", "bl", "bh",  "cl", "ch", "dl", "dh",  