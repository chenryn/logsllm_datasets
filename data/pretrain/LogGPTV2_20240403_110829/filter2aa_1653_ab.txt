• Pass faked ArrayBuffer’s address to ToNumber 
• Modify BackingStore and ByteLength of the ArrayBuffer in callback 
• Get arbitrary memory read/write 
• Overwrite JIT code with shellcode 
A lot of people have talked about the exploition methods. 
Not explain in detail here. 
Patch 
Exploitation of System_server 
•Analyze the bug, Chain of Bugs #2 
- CVE-2017-14904 
•Escape sandbox and achieve remotely triggering the bug 
•Exploit the bug 
Analyze Chain of Bugs #2 
Use-After-Unmap bug in Android's libgralloc module 
- hardware/qcom/display/msm8996/libgralloc 
map and unmap mismatch in function gralloc_map and 
gralloc_unmap 
Analyze Chain of Bugs #2 
static int gralloc_map(gralloc_module_t const* module, 
buffer_handle_t handle){ 
 …… 
private_handle_t* hnd = (private_handle_t*)handle; 
…… 
if (!(hnd->flags & private_handle_t::PRIV_FLAGS_FRAMEBUFFER) && 
!(hnd->flags & private_handle_t::PRIV_FLAGS_SECURE_BUFFER)) { 
    size = hnd->size; 
    err = memalloc->map_buffer(&mappedAddress, size,  
                       hnd->offset, hnd->fd);  
       if(err || mappedAddress == MAP_FAILED) { 
        ALOGE("Could not mmap handle %p, fd=%d (%s)", 
        handle, hnd->fd, strerror(errno)); 
        return -errno; 
    } 
hnd->base = uint64_t(mappedAddress) + hnd->offset; 
}  
    else { 
    err = -EACCES; 
    } 
…… 
return err; 
}   
chrome renderer 
process 
controlled by  
save mappedAddress+offset 
to hnd->base 
Analyze Chain of Bugs #2 
static int gralloc_unmap(gralloc_module_t const* module, 
buffer_handle_t handle) 
{ 
…… 
if(hnd->base) { 
    err = memalloc->unmap_buffer((void*)hnd->base, hnd->size, hnd->offset);  
    if (err) { 
        ALOGE("Could not unmap memory at address %p, %s", (void*) hnd->base, 
        strerror(errno)); 
        return -errno; 
    } 
    hnd->base = 0; 
} 
…… 
return 0; 
} 
int IonAlloc::unmap_buffer(void *base, unsigned int size, 
unsigned int /*offset*/)  
{ 
int err = 0; 
if(munmap(base, size)) {  
    err = -errno; 
    ALOGE("ion: Failed to unmap memory at %p : %s", 
    base, strerror(errno)); 
} 
return err; 
}   
hnd->offset is not used,  
hnd->base is used as the base 
address,  
map and unmap are mismatched 
Escape Sandbox 
•
Restriction of seLinux imposed on chrome 
allow isolated_app activity_service:service_manager find; 
allow isolated_app display_service:service_manager find; 
allow isolated_app webviewupdate_service:service_manager find; 
neverallow isolated_app { 
    service_manager_type 
    -activity_service 
    -display_service 
    -webviewupdate_service 
}:service_manager find; 
system/sepolicy /isolated_app.te 
chrome process 
Escape Sandbox 
•
Restriction of seLinux imposed on chrome 
public final int startActivity(IApplicationThread caller, String callingPackage, 
Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, 
int startFlags, ProfilerInfo profilerInfo, Bundle bOptions) { 
    return startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo, 
        resultWho, requestCode, startFlags, profilerInfo, bOptions, 
        UserHandle.getCallingUserId()); 
} 
public final int startActivityAsUser(IApplicationThread caller, String  
callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho,  
int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId){ 
    enforceNotIsolatedCaller("startActivity"); 
    userId = mUserController.handleIncomingUser(Binder.getCallingPid(),  
Binder.getCallingUid(), userId, false, ALLOW_FULL_ONLY, "startActivity", null); 
// TODO: Switch to user app stacks here. 
return mActivityStarter.startActivityMayWait(caller, -1, callingPackage, intent, 
    resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, 
     profilerInfo, null, null, bOptions, false, userId, null, null); 
} 
void enforceNotIsolatedCaller(String caller) { 
   if (UserHandle.isIsolated(Binder.getCallingUid())) { 
      throw new SecurityException("Isolated process not allowed to call " + caller); 
   } 
} 
Escape Sandbox 
•
An ingenious way 
public interface Parcelable { 
… 
public void writeToParcel(Parcel dest, int flags); 
public interface Creator { 
public T createFromParcel(Parcel source); 
public T[] newArray(int size); 
… 
} 
 Chrome Renderer  
      (Sandboxed) 
be called from 
binder call 
A lot of classes implement the interface Parcelable 
public class GraphicBuffer implements Parcelable { 
… 
public GraphicBuffer createFromParcel(Parcel in) {…} 
} 
Escape Sandbox 
•
An ingenious way 
case CONVERT_TO_TRANSLUCENT_TRANSACTION: { 
data.enforceInterface(IActivityManager.descriptor); 
IBinder token = data.readStrongBinder(); 
final Bundle bundle; 
if (data.readInt() == 0) { 
    bundle = null; 
} else { 
    bundle = data.readBundle(); 
} 
final ActivityOptions options = 
ActivityOptions.fromBundle(bundle); 
boolean converted = convertToTranslucent(token, options); 
…… 
} 
public static ActivityOptions fromBundle(Bundle bOptions) { 
        return bOptions != null ? new ActivityOptions(bOptions) : null; 
} 
public ActivityOptions(Bundle opts) { 
opts.setDefusable(true); 
mPackageName = opts.getString(KEY_PACKAGE_NAME); 
try { 
    mUsageTimeReport = opts.getParcelable(KEY_USAGE_TIME_REPORT); 
} catch (RuntimeException e) { 
    Slog.w(TAG, e); 
} 
…… 
Escape Sandbox 
Bundle 
GraphicBuffer 
system_server 
chrome process  
createFromParcel 
Exploit the bug 
• Address space shaping, create some continuous ashmem mapping 
• Unmap part of the heap and part of an ashmem memory by 
triggering the bug 
• Fill the unmapped space with an ashmem memory 
• Spray the heap, heap data will be written to the ashmem memory 
• Leak some module’s base address, overwrite virtual function 
pointer of GraphicBuffer 
• Trigger a GC to execute ROP 
Exploit the bug 
Step 1: address space shaping 
[anon:libc_malloc] 
Heap chunk 
/dev/ashmem/29 
/dev/ashmem/28 
…… 
/dev/ashmem/25 
/dev/ashmem/24 
continuous ashmem mapping 
0x7f54600000 
0x7f54800000 
Exploit the bug 
Step 2: trigger the bug, unmap part of heap and an ashmem  
/dev/ashmem/1000 
[anon:libc_malloc] 
4KB 
2M-4KB   
/dev/ashmem/29 
…… 
/dev/ashmem/25 
/dev/ashmem/24 
Unmap 4KB  heap 
unmap (2M-4KB) ashmem 
0x7f547ff000 
0x7f549ff000 
2M gap 
Exploit the bug 
Step 3: fill the unmapped space with an ashmem memory 
/dev/ashmem/1000 
[anon:libc_malloc] 
/dev/ashmem/1001 
/dev/ashmem/29 
…… 
/dev/ashmem/25 
/dev/ashmem/24 
fill with an ashmem 
0x7f547ff000 
0x7f549ff000 
Exploit the bug 
Step 4: spray the heap 
/dev/ashmem/1000 
[anon:libc_malloc] 
sprayed data 
/dev/ashmem/1001 
/dev/ashmem/29 
…… 
/dev/ashmem/25 
/dev/ashmem/24 
heap manager allocate memory  
from range 0x7f547ff000 - 0x7f54800000  
in ashmem1001 
0x7f547ff000 
0x7f549ff000 
0x7f54800000  
Exploit the bug 
Step 5: allocate GraphicBuffer objects in ashmem 
              overwrite virtual function pointer 
/dev/ashmem/1000 
[anon:libc_malloc] 
GraphicBuffer 
/dev/ashmem/1001 
/dev/ashmem/29 
…… 
/dev/ashmem/25 
/dev/ashmem/24 
0x7f547ff000 
0x7f54800000  
system_server 
chrome process  
Exploit the bug 
Step 6: trigger a GC to execute ROP 
class RefBase 
{ 
public: 
... 
virtual void onLastStrongRef(const void* id);  
virtual void onLastWeakRef(const void* id);  
... 
}; 
inherit 
class GraphicBuffer 
overwrite 
ROPs 
When a GraphicBuffer object is deconstructed, onLastStrongRef is called. 
Finding an ROP chain in limited module(libui). 
Conclusion 
• Compromising the chrome renderer with v8 bug CVE-2017-5116 
• Using an ingenious way, combining with the bug CVE-2017-14904, 
to archive getting the privilege of system_server 
• The two bugs are already fixed on Security Update of December 
2017 
Acknowledgements 
All colleagues at Alpha Team 
                              360 C0RE Team 
Thanks