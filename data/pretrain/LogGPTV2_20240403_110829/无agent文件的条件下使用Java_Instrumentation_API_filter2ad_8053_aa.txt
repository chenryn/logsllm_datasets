# 无agent文件的条件下使用Java Instrumentation API
## 序：Java Instrumentation API
从Java SE
5开始，可以使用Java的Instrumentation接口来编写Agent。如果需要在目标JVM启动的同时加载Agent，可以选择实现下面的方法：
    [1] public static void premain(String agentArgs, Instrumentation inst);
    [2] public static void premain(String agentArgs);
JVM将首先寻找[1]，如果没有发现[1]，再寻找[2]。如果希望在目标JVM运行时加载Agent，则需要实现下面的方法：
    [1] public static void agentmain(String agentArgs, Instrumentation inst);
    [2] public static void agentmain(String agentArgs);
我们这里只讨论运行时加载的情况。Agent需要打包成一个jar包，在ManiFest属性中指定“Premain-Class”或者“Agent-Class”：
    Premain-Class: class
    Agent-Class: class
生成agent.jar之后，可以通过com.sun.tools.attach.VirtualMachine的loadAgent方法加载：
    private void attachAgentToTargetJVM() throws Exception {
        List virtualMachineDescriptors = VirtualMachine.list();
        VirtualMachineDescriptor targetVM = null;
        for (VirtualMachineDescriptor descriptor : virtualMachineDescriptors) {
            if (descriptor.id().equals(configure.getPid())) {
                targetVM = descriptor;
                break;
            }
        }
        if (targetVM == null) {
            throw new IllegalArgumentException("could not find the target jvm by process id:" + configure.getPid());
        }
        VirtualMachine virtualMachine = null;
        try {
            virtualMachine = VirtualMachine.attach(targetVM);
            virtualMachine.loadAgent("{agent}", "{params}");
        } catch (Exception e) {
            if (virtualMachine != null) {
                virtualMachine.detach();
            }
        }
    }
以上代码可以用反射实现，使用Java
agent这种方式可以修改已有方法，java.lang.instrument.Instrumentation提供了如下方法：
    public interface Instrumentation {
        /**
         * 加入一个转换器Transformer，之后的所有的类加载都会被Transformer拦截。
         * ClassFileTransformer类是一个接口，使用时需要实现它，该类只有一个方法，该方法传递类的信息，返回值是转换后的类的字节码文件。
         */
        void addTransformer(ClassFileTransformer transformer, boolean canRetransform);    
        /**
         * 对JVM已经加载的类重新触发类加载。使用的就是上面注册的Transformer。
         * 该方法可以修改方法体、常量池和属性值，但不能新增、删除、重命名属性或方法，也不能修改方法的签名
         */
        void retransformClasses(Class... classes) throws UnmodifiableClassException;
       /**
       *此方法用于替换类的定义，而不引用现有的类文件字节，就像从源代码重新编译以进行修复和继续调试时所做的那样。
       *在要转换现有类文件字节的地方(例如在字节码插装中)，应该使用retransformClasses。
       *该方法可以修改方法体、常量池和属性值，但不能新增、删除、重命名属性或方法，也不能修改方法的签名
       */
        void redefineClasses(ClassDefinition... definitions)throws  ClassNotFoundException, UnmodifiableClassException;
        /**
         * 获取一个对象的大小
         */
        long getObjectSize(Object objectToSize);
        /**
         * 将一个jar加入到bootstrap classloader的 classpath里
         */
        void appendToBootstrapClassLoaderSearch(JarFile jarfile);
        /**
         * 获取当前被JVM加载的所有类对象
         */
        Class[] getAllLoadedClasses();
    }
可以使用redefineClasses方法完成对类方法的修改，结合javassist可以说是非常方便：
    public static void agentmain(String args, Instrumentation inst) throws Exception {
        Class[] loadedClasses = inst.getAllLoadedClasses();
        for (int i = 0; i GetArrayLength(jnienv, classDefinitions);
        errorOccurred = checkForThrowable(jnienv);
        jplis_assert(!errorOccurred);
        if (!errorOccurred) {
            jplis_assert(numDefs > 0);
            /* get method IDs for methods to call on class definitions */
            classDefClass = (*jnienv)->FindClass(jnienv, "java/lang/instrument/ClassDefinition");
            errorOccurred = checkForThrowable(jnienv);
            jplis_assert(!errorOccurred);
        }
        ...
    }
可以看到这个agent指针的结构类型为JPLISAgent，它的定义如下：
    struct _JPLISAgent {
        JavaVM *                mJVM;                   /* handle to the JVM */
        JPLISEnvironment        mNormalEnvironment;     /* for every thing but retransform stuff */
        JPLISEnvironment        mRetransformEnvironment;/* for retransform stuff only */
        jobject                 mInstrumentationImpl;   /* handle to the Instrumentation instance */
        jmethodID               mPremainCaller;         /* method on the InstrumentationImpl that does the premain stuff (cached to save lots of lookups) */
        jmethodID               mAgentmainCaller;       /* method on the InstrumentationImpl for agents loaded via attach mechanism */
        jmethodID               mTransform;             /* method on the InstrumentationImpl that does the class file transform */
        jboolean                mRedefineAvailable;     /* cached answer to "does this agent support redefine" */
        jboolean                mRedefineAdded;         /* indicates if can_redefine_classes capability has been added */
        jboolean                mNativeMethodPrefixAvailable; /* cached answer to "does this agent support prefixing" */
        jboolean                mNativeMethodPrefixAdded;     /* indicates if can_set_native_method_prefix capability has been added */
        char const *            mAgentClassName;        /* agent class name */
        char const *            mOptionsString;         /* -javaagent options string */
    };
    struct _JPLISEnvironment {
        jvmtiEnv *              mJVMTIEnv;              /* the JVM TI environment */
        JPLISAgent *            mAgent;                 /* corresponding agent */
        jboolean                mIsRetransformer;       /* indicates if special environment */
    };
redefineClasses的第一行代码是jvmtiEnv* jvmtienv = jvmti(agent)， 这个jvmti是个宏：
    #define jvmti(a) a->mNormalEnvironment.mJVMTIEnv
在Java SE 5以前，就支持通过C/C++语言实现JVMTI agent，Java Instrumentation
API的底层就是通过这种方式实现的。开发agent时，需要包含位于JDK
include目录下的jvmti.h，这里面定义了使用JVMTI所用到的函数、事件、数据类型和常量，最后agent会被编译成一个动态库。JVMTI的函数调用与JNI相似，可以通过一个接口指针来访问JVMTI的函数。JVMTI的接口指针称为环境指针(environment
pointer)，环境指针是指向执行环境的指针，其类型为jvmtiEnv*。
    jvmtiEnv *jvmti;