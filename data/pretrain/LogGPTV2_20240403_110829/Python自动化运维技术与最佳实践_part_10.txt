定义format格式对象
format.set_border (1)
定义format对象单元格边框加租（1像素）的格式
format_title=vorkbook.add_format ()
定义format_title格式对象
format_title.set_border(1)
定义format_title对象单元格过框加租（1像素）的格式
format_title.set_bg_color (*#ccccce′)
定义format_title对象单元格背量颜色为
'cccccc'的格式
format_title.set_align('center*)
定义format_title对象单元格居中对齐的格式
format_title.set_bold()
+定义format_title对象单元移内容加租的格式
fornat_ave=workbook. add_format ()
定义format_ave格式对象
format_ave.set_border(1)
定义format_ave对象单元格边框加租（1像素）的格式
format_ave，set_num_Eormat（*o.oo*）定义format_ave对象单元格数字类别里示格式
下面分别以行或列写入方式将标题、业务名称、流量数据写入起初单元格，用时引用不同移式对象
worksheet,wzite_row(*Al',title, fozmat_title)
worksheet,write_row (*B2', data[0], format)
worksheet.write_column ('A2*, buname, format)
worksheet,write_row(*s3', data[1], format)
worksheet.write_rov(*s4′, data[2], format)
worksheet,write_row (*B5',
data [3], format)
worksheet,write_row (*s6', data[4], format)
定义图表数据系列函数
def chart_series (cur_row) :
vorksheet,vrite_formula(*I*+cur_row, \
^=AVERAGE (B*+cur_row+*:8*+cur_row+*) *, format_ave)
计算（AVERAGE函数）频
chart ,add_series (↑
道周平均流量
将“星期一至星期日”作为图表数据标签（X轴)
'values':
=Sheet11sss'+cur_row+*:sHs*+cux_row,
频通一周所有数据作
1ine*:
为数据区城
'name':*=Sheetl!sas*+cur_row,
('color′: *black'1,
线条颜色定义为black（黑色）
引用业务名称为图例项
for rov in zange (2, 7):
数据城以第2～6行进行图表数据系列函数调用
chart_series(str (row))
#chart.set_table ()
设置x轴表格格式，本示例不启用
设置图表样式，本示例不启用
chart,set_8ize ((*width′ : 577, *beight'; 287))
设置图表大小
chart,set_title（(*name′：u*业务流量周孤图表*1)
设置图表（上方）大称题
((,/q, 1 ,aueu,))exeAs*zeqo
设置y轴（左侧）小标题
worksheet,insert_chart (*A8', chart)
在A8单元格括入图表
workbook,close ()
关闭Exce1 文档
---
## Page 71
50第一部分基础篇
上述示例将创建一个如图3-11所示的工作表。
业务流量周报图表
图3-11业务流量周报图表工作表
票3.4.1节XlsxWrite模块的常用类与方法说明参考官网htpc/xlsxwriter.readthedocs.org
3.2Python与rrdtool的结合模块
rrdtool（roundrobin database）工具为环状数据库的存储格式，roundrobin是一种处理
定量数据以及当前元素指针的技术。rrdtool主要用来跟踪对象的变化情况，生成这些变化的
走势图，比如业务的访问流量、系统性能、磁盘利用率等趋势图，很多流行监控平台都使用
到rdtool，比较有名的为Cacti、Ganglia、Monitorix等。更多rrdtool介绍见官网htp://oss
oetiker.ch/rrdtool/。rrdtool是一个复杂的工具，涉及较多参数概念，本节主要通过Python的
rdtool模块对rrdtool的儿个常用方法进行封装，包括 create、fetch、graph、info、update等方法，
本节对rrdtool的基本知识不展开说明，重点放在Pythonrdtool模块的常用方法使用介绍上。
rrdtool模块的安装方法如下：
easy_install python-rrdtoo1
pip安装方法
pip install python=rrdtoo1
easy_instal1 安装方涨
---
## Page 72
第3章定制业务质量报表详解51
要要rrdtool工具及其他类包支持，CentOS环境推垂使用yum安装方法
 yum insta11 rrdtool-python
3.2.1rrdtool模块常用方法说明
下面介绍rrdtool模块常用的儿个方法，包括create（创建rrd）、update（更新rrd）、graph
（绘图）、fetch（查询rrd）等。
1.Create方法
create filename [--startl-b start time] [--stepl-s step] [DS:ds-name:DST:heartbeat:min:max]
[RRA:CF:xf:steps:rows]方法，创建一个后级为rrd的rrdtool数据库，参数说明如下：
口filename 创建的rdtool 数据库文件名，默认后级为.rrd；
--start指定rrdtool 第一条记录的起始时间，必须是timestamp的格式；
口一step指定rrdtool每隔多长时间就收到一个值，默认为5分钟；
口DS用于定义数据源，用于存放脚本的结果的变量；
口DST用于定义数据源类型，rrdtool支持COUNTER（递增类型）、DERIVE（可递增可
递减类型）、ABSOLUTE（假定前一个时间间隔的值为0，再计算平均值）GUAGE（收
到值后直接存人RRA）COMPUTE（定义一个表达式，引用DS并自动计算出某个值）
5种，比如网卡流量属于计数器型，应该选择COUNTER；
口RRA用于指定数据如何存放，我们可以把一个RRA看成一个表，保存不同间隔的统
计结果数据，为CF做数据合并提供依据，定义格式为：[RRA:CF:xff:steps:rows]；
口CF统计合并数据，支持AVERAGE（平均值）、MAX（最大值）、MIN（最小值）
LAST（最新值）4种方式。
2.update 方法
update filename [--template|-t ds-name[:ds-name]...] N|timestamp:value[:value..]
[timcstamp:value[:value.].]方法，存储一个新值到rrdtool数据库，updatev和 update类似，
区别是每次插人后会返回一个状态码，以便了解是否成功（updatev用0表示成功，-1表示
失败）。参数说明如下：
filename指定存储数据到的目标rd文件名：
-t ds-name[：ds-name]指定需要更新的 DS 名称；
NITimestamp表示数据采集的时间截，N表示当前时间藏；
value[：value...]更新的数据值，多个 DS则多个值。
---
## Page 73
52第一部分基础
3.graph 方法
graph filename [-s|--start seconds] [-el|--end seconds] [-x|--x-grid x-axis grid and label]
[-y|--y-grid y-axis grid and label] [--alt-y-grid] [--alt-y-mrtg] [--alt-autoscale] [--alt-autoscale-
max] [--units-exponent] value [-v|--vertical-label text] [-w--width pixels] [-h]--height pixels]
[-il--interlaced] [-f|--imginfo formatstring] [-a--imgformat GIF|PNG|GD] [-B|--background
value] [-O|--overlay value] [-U|--unit value] [-z]--lazy] [-o|--logarithmic] [-u]--upper-limit
value] [-I--lower-limit value] [-g/--no-legend] [-r]--rigid] [--step value] [-b]--base value] [-e]--
color COLORTAG#rrggbb] [-t(--title title] [DEF:vname=rrd:ds-name:CF] [CDEF:vname=rpn-
expression] [PRINT:vname:CF:format] [GPRINT:vname:CF:format] [COMMENT:text]
[HRULE:valuef#rrggbb[:legend]] [VRULE:time#rrggbb[:legend]] [LINE (1|2[3}:vname[#rrggbb
[:legend]] [AREA:vname[#rrggbb[:legend]]] [STACK:vname[#rggbb[:legend]]] 方法,根据指定
的rrdtool 数据库进行绘图，关键参数说明如下：
filename指定输出图像的文件名，默认是PNG格式；
-start 指定起始时间；
-end指定结束时间；
-x-grid控制X轴网格线刻度、标签的位置；
--y-grid控制Y轴网格线刻度、标签的位置；
-vertical-label 指定Y轴的说明文字；
--width pixels 指定图表宽度（像素）；
--height pixels 指定图表高度（像素）；
-imgformat 指定图像格式（GIF|PNG|GD）;
-background 指定图像背景颜色，支持#rrggbb表示法；
-upper-limit 指定Y轴数据值上限；
--lower-limit 指定Y轴数据值下限；
-no-legend取消图表下方的图例；
-rigid严格按照upper-limit 与 lower-limit 来绘制；
-tile图表顶部的标题：
DEF:vname=rrd:ds-name:CF指定绘图用到的数据源；
 CDEF:vname=rpn-expression合并多个值；
口GPRINT:vname:CF:format图表的下方输出最大值、最小值、平均值等：
COMMENT:text指定图表中输出的一些字符串；
HRULE:value#rrggbb用于在图表上面绘制水平线；
VRULE:timefrrggbb用于在图表上面绘制垂直线；
LINE{1|2|3}:vname使用线条来绘制数据图表，（1|2|3}表示线条的粗细；
---
## Page 74
第3章定制业务质量报表详解53
AREA:vname使用面积图来绘制数据图表。
4.fetch方法
fetch filename CF [--resolutionj-r resolution] [--startj-s start] [--end]-c end] 方法,根据指定
的rrdtool数据库进行查询，关键参数说明如下：
口filename指定要查询的rrd文件名；
口CF包括AVERAGE、MAX、MIN、LAST，要求必须是建库时RRA中定义的类型，
否则会报错：
--start--end指定查询记录的开始与结束时间，默认可省略。
3.2.2实践：实现网卡流量图表绘制
在日常运营工作当中，观察数据的变化趋势有利于了解我们的服务质量，比如在系统监
控方面，网络流量趋势图直接展现了当前网络的吞吐。CPU、内存、磁盘空间利用率趋势则
反映了服务器运行健康状态。通过这些数据图表管理员可以提前做好应急预案，对可能存在
的风险点做好防范。本次实践通过rrdtool模块实现
crete md →update m→query md
服务器网卡流量趋势图的绘制，即先通过create方法
创建一个rrd数据库，再通过update方法实现数据的
写人，最后可以通过graph方法实现图表的绘制，以
(gnaph png)
及提供last、first、info、fetch 方法的查询。图3-12图3-12创建、更新md及输出图表流程
为rrd创建到输出图表的过程。
第一步采用create方法创建rrd数据库，参数指定了一个rd文件、更新频率step、起
始时间--start、数据源DS、数据源类型DST、数据周期定义RRA等，详细源码如下：
[ /home/test/rdtool/create.py ]
↓ -*- coding1 utf=8 -*-
1/usr/bin/python
import rrdtool
import time
cur_time=str (int (time. time () ) )
获取当前Linux 时闽数作为rrd起始时间
数据写颊率--step为 300 秒（期 5 分钟一个数据点)
rrd=rrdtoo1.create (*Flov.rrd', *--step′,*300′, *--start',cur_time,
其含文是600秒没有收到值，则会用UNKNOWN代替：0为最小值：最大做用U代替，兼示不确定
定义数据源eth0_in（入流量）、eth0_out（出流量）：类型都为coUNTER（递增）：600秒为心疏值，
DS:etho_in: CoUNTER: 600:0:U',
' DS:eth0_out :COUNTER: 600:0 :U*,
---
## Page 75
54第一部分基础
#RRA定文格式为[RRA：CF：xff:step8：roWs].CF定义了AVERAGE、MAX、MIN三种数据合并方式
xEf定文为0.5，表示一个CDP 中的PDP值如超过一半性为UNNOW，则该CDP的值就被标为UKNOW
下列前4个RRA的定义说明如下，其他定义与AVBRAGE方式相似，区别是存最大值与最小值
每隔5分钟（1*300秒）春一次数据的平均值，存600笔，即2.08天
每展30分钟（6*300秒）存一次数据的平均佳，存700笔，即14.58天（2周）
每隔2小时（24*300秒）存一次数据的平均值，存775笔，即64.58天（2个月）
每属24小时（288*300秒）存一次数据的平均值，存797笔，即797天（2年）
'RRA: AVERAGE: 0 . 5:1 : 600* ,
*RRA:AVERAGE:0. 5:24 :775′,
RRA:AVERAGE:0. 5: 6: 700*,
RRA:AVERAGE:0 , 5:288 : 797 *,
*RRA:MAX:0 .5:6: 700′,
'RRA:MAX:0.5:1: 600′,
*RRA : MAX:0 .5:444:797+,
'RRA: MAX: 0 .5:24: 775 ′,
*RRA:MIN:0.5:1:600′,
*RRA:MIN:0.5:24:775′,
'RRA:MIN: 0 .5:6: 700',
*RRA:MIN:0 .5:444:797*)
if rrd:
print rrdtool.error()
第二步采用updatev方法更新rd数据库，参数指定了当前的Linux时间截，以及指
定etho_in、eth0_out值（当前网卡的出人流量），网卡流量我们通过psutil模块来获取，如
psutil.net_io_countersO[1]为入流量，关于psutil模块的介绍见第1.1。详细源码如下：
[ /home/test/rrdtool/update.py 】
 -*- coding: utf-8 -*-
+1/usr/bin/python
import time,psuti1
import rrdtool
total_1nput_trafic = psutil,net_io_counters() [1]
#获取网卡入流量
total_output_traffic = psutil.net_io_counters() [0]
获取当前Linux时间歌
获取网卡出流量
将获取到的三个数据作为updatev 的参数，返器（*return_value*：0L)则说明更新成功，反之失败
starttime=int (time,tine () )
update=rrdtool .updatev (*/home/test/rrdtoo1/Flov.rrd*,'4s:hs:$s*
(str(starttime) , str (total_input_traffic), str(total_output_traffie)))
print update
将代码加入crontab，并配置5分钟作为采集频率，crontab配置如下：
*/5 * * + * /usr/bin/python /home/test/rrdtoo1/update-py > /dev/nu11 2>41
第三步采用graph方法绘制图表，此示例中关键参数使用了-x-grid定义X轴网格刻
度；DEF指定数据源；使用CDEF合并数据：HRULE绘制水平线（告警线）；GPRINT输出
最大值、最小值、平均值等。详细源码如下：
---
## Page 76
第3章定制业务质量报表详解55
[ /home/test/rrdtool/graph.py ]
 -*- coding: utf-8 -*-
#1/usr/bin/python
inport rrdtool
定义图表上方大标题
inport time
title=*Server network traffic fow (*+time.strftine (*4y-lm-sd’, \
重点繁称"--x-grid”,*MINUTE:12：HOUR：1：HOUR：1 :0：%H*参数的作用（左往右进行分解）
tine. localtine (time. time ())) +") *
“MINUTE：12”表示控制每展12分钟放置一根次要格线
“HOUR：1”表示控制每隔1小时放量一根主要格线
“0：%H”0表示数字对齐格线，H表示标基以小时显示
“HOUR：1表示控制1个小时输出个1abe1标签
1*_e/eeAg=oqet-teotxoa--*upt-。 _xes--__budnota。 1qdexb.roop1
"X-gzid*, *MINUTE:12:HOUR:1:HOUR:1:0:%H*, 
"--vidth",-650=,*--height*,*230","--title",tit1e,
"DEF:inoctets=Flow,rrd:etho_in:AVERAGE*,
指定网卡入流量数据源DS及CF
*DEF:outoctets=Flow.rrd:eth0_out :AvERAGE*,
通址CDEP合并网卡出入流量，得出总流量tota1
指定网卡出流量数据源DS及CF
*CDEr:total=lnoctets,outoctets, +",
"LINEl:total#rre833:Total traffic*,
以面积方式绘制入流量
以线条方式绘制总流量
“AREA:inoctets#00FF00:In traffic",
*LINE1:outoctets#0000FF:Out traffic*,
以线条方式给制出流量
*HRUL8: 6144#FF0000:Alarm value\\r"。
经制水平线。作为告警线，周值为6.1k
*CDBF:inbits=inoctets, 8, **,
将入流量换算成bit，即*8，计算结果给inbits
"cDEF:outbits=outoctets,8,**,
将出流量换算成bit，即*8，计算结果给outbits
‘COMMENT:\\r",
在网格下方输出一个换行将
*COMMENT:\\x*,
"GPRINT:inbits:AVERAGE:Avg In trafic\: $6.21f $Sbps*,
绘制入流量平均值
*GPRINT:inbits:MAX:Max In trafflc\: $6.21f tSbps*,
"COMENT:
给制入流量最大慎
*COMMENT:*,
*GPRINT:inbits:MIN:MIN In traffic\: t6.21f 4Sbps\\r*,
绘制入流量最小值
*GPRINT:outbits:AVERAGE:Avg Out traffic\: 6.21f eSbps*,
*COMMENT: *,
绘制出流量平均值
"COMMENT: *,
*GPRINT:outbits:MAX:Max Out trafic\: 6.21f tSbps*,
绘制出流量最大慎
*COMMENT: *,
*GPRINT:outbits:MIN:MIN Out traffic\: $6.21f 4Sbps\\r*)
绘制出流量最小值
以上代码将生成一个Flow.png文件，如图3-13所示。
查看rrd文件内容有利于观察数据的结构、更新等情况，rrdtool提供几个需用命令：
info查看rrd文件的结构信息，如 rrdtool info Flow.rrd；
 first 查看md 文件第一个数据的更新时间，如rrdtool first Flow.rrd；
 last 查看md文件最近一次更新的时间，如 rdtool last Flow.rrd；
fetch根据指定时网、CF查询rrd文件，如rrdtool fetch Flow.rrd AVERAGE。