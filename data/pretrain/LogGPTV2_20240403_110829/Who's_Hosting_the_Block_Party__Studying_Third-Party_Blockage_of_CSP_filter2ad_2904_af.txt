are what you include: large-scale evaluation of remote
javascript inclusions. In CCS, 2012.
[23] Erlend Oftedal. Retire.js. Online https://retirejs.github.io/
retire.js/, 2019.
[24] Xiang Pan, Yinzhi Cao, Shuangping Liu, Yu Zhou,
Yan Chen, and Tingzhe Zhou. Cspautogen: Black-box
enforcement of content security policy upon real-world
onlines. In CCS, 2016.
[25] Charles Reis, Alexander Moshchuk, and Nasko Oskov.
Site isolation: Process separation for web sites within
the browser. In USENIX Security, 2019.
[26] Gregor Richards, Christian Hammer, Brian Burg, and Jan
Vitek. The eval that men do. In ECOOP, 2011.
[27] Sebastian Roth, Timothy Barron, Stefano Calzavara, Nick
Nikiforakis, and Ben Stock. Complex security policy? a
longitudinal analysis of deployed content security poli-
cies. In NDSS, 2020.
[28] Pratik Soni, Enrico Budianto, and Prateek Saxena. The
sicilian defense: Signature-based whitelisting of web
javascript. In CCS, 2015.
[29] Sid Stamm, Brandon Sterne, and Gervase Markham.
In
Reining in the web with content security policy.
WWW, 2010.
[30] Marius Steffens, Marius Musch, Martin Johns, and Ben
Stock. Open-sourced version of SMURF. Online https:
//smurf-ndss.github.io/.
[31] Marius Steffens, Christian Rossow, Martin Johns, and
the locals: Investigating the
Ben Stock. Don’t
prevalence of persistent client-side cross-site scripting in
the wild. In NDSS, 2019.
trust
[32] Ben Stock, Stephan Pﬁstner, Bernd Kaiser, Sebastian
From facepalm to brain
Lekies, and Martin Johns.
bender: Exploring client-side cross-site scripting. In CCS,
2015.
[33] Ben Stock, Martin Johns, Marius Steffens, and Michael
Backes. How the web tangled itself: Uncovering the
In USENIX
history of client-side web (in) security.
Security, 2017.
[34] Tobias Urban, Martin Degeling, Thorsten Holz, and
Norbert Pohlmann. Beyond the front page: Measuring
third party dynamics in the ﬁeld. In TheWebConf, 2020.
[35] Antoine Vastel, Peter Snyder, and Benjamin Livshits.
Who ﬁlters the ﬁlters: Understanding the growth, useful-
ness and efﬁciency of crowdsourced ad blocking. arXiv
preprint arXiv:1810.09160, 2018.
[36] W3C. Content Security Policy Level 2. Online https://
www.w3.org/TR/CSP2/#changes-from-level-1, Decem-
ber 2016.
Usage of
[37] W3C.
Online https://
w3c.github.io/webappsec-csp/#unsafe-hashes-usage, De-
cember 2018.
[38] Webshrinker.
’unsafe-hashes’.
Webshrinker.
Online
https:
//www.webshrinker.com/, May 2020.
[39] Lukas Weichselbaum, Michele Spagnuolo, Sebastian
Lekies, and Artur Janc. Csp is dead, long live csp! on the
insecurity of whitelists and the future of content security
policy. In CCS, 2016.
[40] Michael Weissbacher, Tobias Lauinger, and William
Robertson. Why is csp failing? trends and challenges
in csp adoption. In RAID, 2014.
[41] Chuan Yue and Haining Wang. A measurement study of
insecure javascript practices on the web. ACM TWEB,
2013.
16
RESULTS OVER OUR COMPLETE ANALYSIS PERIOD FOR OUR NOTION OF AN ESP. WHILE WE CAN SEE THAT THE OVERALL TRENDS REMAIN STABLE
THERE APPEARS TO BE A GENERAL DOWNWARD TREND OF THE SPECIFIC NUMBERS. THIS CAN BE MOSTLY ATTRIBUTED TO A NUMBER OF APPLICATION
TO WHICH WE CAN NO LONGER CONNECT DURING OUR ANALYSIS PERIOD.
TABLE VI
longest chains
shortest path
7
8
1
1
1
Date
20200113
20200120
20200127
20200203
20200210
20200217
20200224
20200302
20200309
20200316
20200323
20200330
20200113
20200120
20200127
20200203
20200210
20200217
20200224
20200302
20200309
20200316
20200323
20200330
0
8041
7943
7897
7872
7513
7867
7761
7728
7910
7742
7899
7855
7634
7538
7495
7466
7097
7450
7348
7304
7496
7322
7493
7463
1
7628
7530
7487
7457
7086
7438
7339
7295
7496
7322
7493
7463
3899
3818
3806
3642
3497
3788
3664
3430
3740
3691
3774
3731
2
5124
5039
5028
4988
4632
4990
4873
4835
5047
4896
5025
4991
762
738
743
713
678
739
702
612
727
719
724
725
3
1451
1421
1411
1400
1219
1370
1314
1291
1429
1408
1447
1415
50
66
69
66
63
65
53
41
67
67
62
70
4
199
195
190
207
152
195
165
159
200
206
216
214
6
6
7
6
7
5
4
6
9
7
6
8
5
19
18
15
22
17
19
13
16
19
22
23
21
2
2
2
2
2
2
1
2
3
2
2
1
6
5
4
5
6
6
5
5
6
6
6
5
4
1
1
1
MOST COMMONLY INCLUDED THIRD-PARTY SCRIPTS THAT CHANGED THEIR CONTENT DURING OUR STUDY. TABLE SHOWS THE NUMBER OF AFFECTED
APPLICATIONS AND THE AMOUNT OF DIFFERENT SCRIPT HASHES THAT WE COULD OBSERVE TO BE SERVED UNDER THE RESPECTIVE URL.
TABLE VII
script location
https://connect.facebook.net/en US/sdk.js
https://www.googletagservices.com/tag/js/gpt.js
https://securepubads.g.doubleclick.net/tag/js/gpt.js
https://sb.scorecardresearch.com/beacon.js
https://connect.facebook.net/en US/all.js
https://www.googleadservices.com/pagead/conversion async.js
https://pagead2.googlesyndication.com/pagead/show companion ad.js
https://www.google.com/recaptcha/api.js
https://connect.facebook.net/en US/fbevents.js
https://www.googletagservices.com/activeview/js/current/osd.js?cb=%2Fr20100101
https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js
https://www.youtube.com/iframe api
https://connect.facebook.net/en US/sdk.js?hash=42272dd37ca5caf2a2797a1147783a65&ua=modern es6
https://www.googletagservices.com/activeview/js/current/osd listener.js?cache=r20110914
https://cse.google.com/adsense/search/async-ads.js
https://c.amazon-adsystem.com/aax2/apstag.js
https://connect.facebook.net/en GB/sdk.js
https://connect.facebook.net/en US/fbds.js
https://apis.google.com/js/platform.js
https://connect.facebook.net/ja JP/sdk.js
affected sites
789
641
336
276
186
142
109
104
98
95
57
50
50
48
48
47
45
43
40
36
versions found
245
91
69
3
177
71
37
2
3
2
6
2
8
2
2
2
114
89
2
84
17