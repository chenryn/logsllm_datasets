# 一、Linux 网络结构
在本章中，我们将介绍以下食谱:
*   使用接口和地址
*   配置 Linux 主机路由
*   探索桥梁
*   建立联系
*   探索网络名称空间
# 简介
Linux 是一个强大的操作系统，具有许多强大的网络结构。就像任何网络技术一样，它们各自都很强大，但当以创造性的方式结合起来时，会变得更加强大。Docker 是一个很好的例子，它将 Linux 网络栈的许多独立组件组合成一个完整的解决方案。虽然 Docker 为您管理了大部分内容，但是了解 Docker 使用的 Linux 网络组件仍然很有帮助。
在本章中，我们将花一些时间在 Docker 之外单独研究这些构造。我们将学习如何在 Linux 主机上更改网络配置，并验证网络配置的当前状态。虽然这一章不是专门针对 Docker 本身的，但是理解后面章节的原语是很重要的，在后面的章节中，我们将讨论 Docker 如何使用这些构造来网络容器。
# 使用接口和地址
理解【Linux 如何处理网络是理解 Docker 如何处理网络不可或缺的一部分。在本食谱中，我们将通过学习如何定义和操作 Linux 主机上的接口和 IP 地址来关注 Linux 网络基础知识。为了演示配置，我们将在本食谱中开始构建实验室拓扑，并在本章的其他食谱中继续进行。
## 做好准备
为了查看和操作网络设置，您需要确保安装了`iproute2`工具集。如果系统上没有，可以使用以下命令进行安装:
```
sudo apt-get install iproute2
```
为了对主机进行网络更改，您还需要根级访问。
为了本章演示的目的，我们将使用一个简单的实验室拓扑。主机的初始网络布局如下所示:
![Getting ready](img/B05453_01_01.jpg)
在这种情况下，我们有三个主机，每个主机都有一个已经定义的`eth0`接口:
*   `net1` : `10.10.10.110/24`默认网关为`10.10.10.1`
*   `net2` : `172.16.10.2/26`
*   `net3` : `172.16.10.66/26`
## 怎么做…
大多数终端主机上的网络配置通常仅限于单个接口的 IP 地址、子网掩码和默认网关。这是因为大多数主机都是网络端点，在单个 IP 接口上提供一组离散的服务。但是，如果我们想要定义更多的接口或者操作现有的接口，会发生什么呢？为了回答这个问题，我们首先来看看简单的单宿服务器，如前面例子中的`net2`或`net3`。
在 Ubuntu 主机上，所有的接口配置都在`/etc/network/interfaces`文件中完成。让我们检查一下主机`net2`上的文件:
```
# The loopback network interface
auto lo
iface lo inet loopback
# The primary network interface
auto eth0
iface eth0 inet static
        address 172.16.10.2
        netmask 255.255.255.192
```
我们可以看到这个文件定义了两个接口——本地`loopback`接口和接口`eth0`。`eth0`界面定义了以下信息:
*   `address`:主机接口的 IP 地址
*   `netmask`:与 IP 接口关联的子网掩码
每当接口试图进入启动或运行状态时，该文件中的信息将被处理。我们可以通过使用`ip addr show `命令检查接口`eth0`的当前 IP 地址来验证该配置文件是在系统启动时处理的:
```
user@net2:~$ ip addr show eth0
2: eth0:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:59:ca:ca brd ff:ff:ff:ff:ff:ff
    inet 172.16.10.2/26 brd 172.16.10.63 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::20c:29ff:fe59:caca/64 scope link
       valid_lft forever preferred_lft forever
user@net2:~$
```
现在我们已经回顾了单主机配置，让我们来看看在一台主机上配置多个接口需要什么。从目前的情况来看，`net1`主机是唯一一台在本地子网之外有任何可达性的主机。这是因为它有一个定义的默认网关指向网络的其余部分。为了使`net2`和`net3`可以到达，我们需要找到一种方法将它们连接回网络的其余部分。为此，我们假设主机`net1`有两个额外的网络接口，可以直接连接到主机`net2`和`net3`:
![How to do it…](img/B05453_01_02.jpg)
让我们通过了解如何在`net1`上配置额外的接口和 IP 地址来完成拓扑。
我们要做的第一件事是验证我们在`net1`上有额外的接口可用。为此，我们将使用`ip link show`命令:
```
user@net1:~$ ip link show
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0:  mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 00:0c:29:2d:dd:79 brd ff:ff:ff:ff:ff:ff
3: eth1:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 00:0c:29:2d:dd:83 brd ff:ff:ff:ff:ff:ff
4: eth2:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 00:0c:29:2d:dd:8d brd ff:ff:ff:ff:ff:ff
user@net1:~$
```
从输出中我们可以看到，除了`eth0`接口，我们还有`eth1`和`eth2`接口可供我们使用。要查看哪些接口有关联的 IP 地址，我们可以使用`ip address show`命令:
```
user@net1:~$ ip address show
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:2d:dd:79 brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.110/24 brd 10.10.10.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::20c:29ff:fe2d:dd79/64 scope link
       valid_lft forever preferred_lft forever
3: eth1:  mtu 1500 qdisc noop state DOWN group default qlen 1000
    link/ether 00:0c:29:2d:dd:83 brd ff:ff:ff:ff:ff:ff
4: eth2:  mtu 1500 qdisc noop state DOWN group default qlen 1000
    link/ether 00:0c:29:2d:dd:8d brd ff:ff:ff:ff:ff:ff
user@net1:~$
```
前面的输出证明了我们目前在接口`eth0`上只分配了一个 IP 地址。这意味着我们可以使用接口`eth1`连接到服务器`net2`和`eth2`连接到服务器`net3`。
我们可以通过两种方式配置这些新接口。首先是用相关的 IP 地址信息更新`net1`上的网络配置文件。让我们对面向主机的链路`net2`进行此操作。要配置该连接，只需编辑文件`/etc/network/interfaces`并为两个接口添加相关配置。完成的配置应该如下所示:
```
# The primary network interface
auto eth0
iface eth0 inet static
        address 10.10.10.110
        netmask 255.255.255.0
        gateway 10.10.10.1
auto eth1
iface eth1 inet static
 address 172.16.10.1
 netmask 255.255.255.192
```
文件保存后，您需要找到一种方法来告诉系统重新加载配置文件。一种方法是重新加载系统。一个更简单的方法是重新加载接口。例如，我们可以执行以下命令来重新加载界面`eth1`:
```
user@net1:~$ sudo ifdown eth1 && sudo ifup eth1
ifdown: interface eth1 not configured
user@net1:~$
```
### 注
虽然在这种情况下不需要，但同时上下移动界面是一个很好的习惯。这可以确保在您关闭管理主机的接口时不会切断电源。
在某些情况下，您可能会发现这种更新接口配置的方法并不像预期的那样有效。根据您的 Linux 版本，您可能会遇到一种情况，即先前的 IP 地址没有从接口中删除，导致接口有多个 IP 地址。要解决此问题，您可以手动删除旧的 IP 地址，或者重新启动主机，这将防止旧配置持续存在。
命令执行后，我们应该可以看到界面`eth1`现在被正确寻址:
```
user@net1:~$ ip addr show dev eth1
3: eth1:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:2d:dd:83 brd ff:ff:ff:ff:ff:ff
    inet 172.16.10.1/26 brd 172.16.10.63 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::20c:29ff:fe2d:dd83/64 scope link
       valid_lft forever preferred_lft forever
user@net1:~$
```
要在主机`net1`上配置接口`eth2`，我们将使用不同的方法。我们将使用`iproute2`命令行更新界面的配置，而不是依赖配置文件。为此，我们只需执行以下命令:
```
user@net1:~$ sudo ip address add 172.16.10.65/26 dev eth2
user@net1:~$ sudo ip link set eth2 up
```
这里需要注意的是，这种配置不是持久的。也就是说，因为它不是系统初始化时加载的配置文件的一部分，所以该配置将在重新启动时丢失。对于使用`iproute2`或其他命令行工具集手动完成的任何网络相关配置，情况都是如此。
### 注
最佳做法是在网络配置文件中配置接口信息和寻址。更改配置文件之外的接口配置是在这些方法中完成的，只是为了举例。
到目前为止，我们只通过向现有接口添加 IP 信息来修改它们。我们实际上并没有给任何系统增加新的接口。添加接口是一个相当常见的任务，正如后面的菜谱所显示的，有多种接口类型可以添加。现在，让我们专注于添加 Linux 所称的虚拟接口。虚拟接口就像网络中的环回接口一样，描述一种始终在线的接口类型。使用`ip link add`语法定义或创建接口。然后指定一个名称，并定义您正在定义的接口类型。例如，让我们在主机`net2`和`net3`上定义一个虚拟接口:
```
user@net2:~$ sudo ip link add dummy0 type dummy
user@net2:~$ sudo ip address add 172.16.10.129/26 dev dummy0