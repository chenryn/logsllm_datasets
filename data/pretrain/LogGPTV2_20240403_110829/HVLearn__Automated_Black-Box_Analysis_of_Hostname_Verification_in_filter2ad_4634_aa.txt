title:HVLearn: Automated Black-Box Analysis of Hostname Verification in
SSL/TLS Implementations
author:Suphannee Sivakorn and
George Argyros and
Kexin Pei and
Angelos D. Keromytis and
Suman Jana
2017 IEEE Symposium on Security and Privacy
HVLearn: Automated Black-box Analysis of
Hostname Veriﬁcation in SSL/TLS Implementations
Suphannee Sivakorn, George Argyros, Kexin Pei, Angelos D. Keromytis, and Suman Jana
Department of Computer Science
Columbia University, New York, USA
{suphannee, argyros, kpei, angelos, suman}@cs.columbia.edu
Abstract—SSL/TLS is the most commonly deployed family of
protocols for securing network communications. The security
guarantees of SSL/TLS are critically dependent on the correct
validation of the X.509 server certiﬁcates presented during the
handshake stage of the SSL/TLS protocol. Hostname veriﬁcation
is a critical component of the certiﬁcate validation process that
veriﬁes the remote server’s identity by checking if the hostname
of the server matches any of the names present in the X.509
certiﬁcate. Hostname veriﬁcation is a highly complex process
due to the presence of numerous features and corner cases such
as wildcards, IP addresses, international domain names, and so
forth. Therefore, testing hostname veriﬁcation implementations
present a challenging task.
In this paper, we present HVLearn, a novel black-box testing
framework for analyzing SSL/TLS hostname veriﬁcation imple-
mentations, which is based on automata learning algorithms.
HVLearn utilizes a number of certiﬁcate templates, i.e., certiﬁ-
cates with a common name (CN) set to a speciﬁc pattern, in
order to test different rules from the corresponding speciﬁcation.
For each certiﬁcate template, HVLearn uses automata learning
algorithms to infer a Deterministic Finite Automaton (DFA) that
describes the set of all hostnames that match the CN of a given
certiﬁcate. Once a model is inferred for a certiﬁcate template,
HVLearn checks the model for bugs by ﬁnding discrepancies
with the inferred models from other implementations or by
checking against regular-expression-based rules derived from the
speciﬁcation. The key insight behind our approach is that the
acceptable hostnames for a given certiﬁcate template form a
regular language. Therefore, we can leverage automata learning
techniques to efﬁciently infer DFA models that accept
the
corresponding regular language.
We use HVLearn to analyze the hostname veriﬁcation im-
plementations in a number of popular SSL/TLS libraries and
applications written in a diverse set of languages like C, Python,
and Java. We demonstrate that HVLearn can achieve on aver-
age 11.21% higher code coverage than existing black/gray-box
fuzzing techniques. By comparing the DFA models inferred by
HVLearn, we found 8 unique violations of the RFC speciﬁcations
in the tested hostname veriﬁcation implementations. Several
of these violations are critical and can render the affected
implementations vulnerable to active man-in-the-middle attacks.
I. INTRODUCTION
The SSL/TLS family of protocols are the most commonly
used mechanisms for protecting the security and privacy
of network communications from man-in-the-middle attacks.
The security guarantees of SSL/TLS protocols are critically
dependent on correct validation of X.509 digital certiﬁcates
presented by the servers during the SSL/TLS handshake phase.
The certiﬁcate validation, in turn, depends on hostname ver-
iﬁcation for verifying that the hostname (i.e., fully qualiﬁed
© 2017, Suphannee Sivakorn. Under license to IEEE.
DOI 10.1109/SP.2017.46
521
domain name, IP address, and so forth) of the server matches
one of the identiﬁers in the “SubjectAltName” extension or
the “Common Name” (CN) attribute of the presented leaf
certiﬁcate. Therefore, any mistake in the implementation of
hostname veriﬁcation could completely undermine the security
and privacy guarantees of SSL/TLS.
Hostname veriﬁcation is a complex process due to the pres-
ence of numerous special cases (e.g., wildcards, IP addresses,
international domain names, etc.). For example, a wildcard
character (‘*’) is only allowed in the left-most part (separated
by ‘.’) of a hostname. To get a sense of the complexities
involved in the hostname veriﬁcation process, consider the
fact
that different parts of its speciﬁcations are described
in ﬁve different RFCs [18], [20], [21], [24], [25]. Given
the complexity and security-critical nature of the hostname
veriﬁcation process, it is crucial to perform automated analysis
of the implementations for ﬁnding any deviation from the
speciﬁcation.
However, despite the critical nature of the hostname ver-
iﬁcation process, none of the prior research projects dealing
with adversarial testing of SSL/TLS certiﬁcate validation [36],
[38], [45], [50], support detailed automated testing of host-
name veriﬁcation implementations. The prior projects either
completely ignore testing of the hostname veriﬁcation process
or simply check whether the hostname veriﬁcation process
is enabled or not. Therefore, they cannot detect any subtle
bugs where the hostname veriﬁcation implementations are
enabled but deviate subtly from the speciﬁcations. The key
problem behind automated adversarial testing of hostname
veriﬁcation implementations is that the inputs (i.e., hostnames
and certiﬁcate identiﬁers like common names) are highly
structured, sparse strings and therefore makes it very hard
for existing black/gray-box fuzz testing techniques to achieve
high test coverage or generate inputs triggering the corner
cases. Heavily language/platform-dependent white-box testing
techniques are also hard to apply for testing hostname veriﬁ-
cation implementations due to the language/platform diversity
of SSL/TLS implementations.
In this paper, we design, implement, and evaluate HVLearn,
a black-box differential testing framework based on automata
learning, which can automatically infer Deterministic Finite
Automata (DFA) models of the hostname veriﬁcation imple-
mentations. The key insight behind HVLearn is that hostname
veriﬁcation, even though very complex, conceptually closely
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:25 UTC from IEEE Xplore.  Restrictions apply. 
resemble the regular expression matching process in many
ways (e.g., wildcards). This insight on the structure of the
certiﬁcate identiﬁer format suggests that the acceptable host-
names for a given certiﬁcate identiﬁer, as suggested by the
speciﬁcations, form a regular language. Therefore, we can
use black-box automata learning techniques to efﬁciently infer
Deterministic Finite Automata (DFA) models that accept the
regular language corresponding to a given hostname veriﬁca-
tion implementation. Prior results by Angluin et al. have shown
that DFAs can be learned efﬁciently through black-box queries
in polynomial time over the number of states [31]. The DFA
models inferred by HVLearn can be used to efﬁciently perform
two main tasks that existing testing techniques cannot do well:
(i) ﬁnding and enumerating unique differences between mul-
tiple different implementations; and (ii) extracting a formal,
backward-compatible reference speciﬁcation for the hostname
veriﬁcation process by computing the intersection DFA of the
inferred DFA models from different implementations.
We apply HVLearn to analyze a number of popular
SSL/TLS libraries such as OpenSSL, GnuTLS, MbedTLS,
MatrixSSL, CPython SSL and applications such as Java
HttpClient and cURL written in diverse languages like C,
Python, and Java. We found 8 distinct speciﬁcation violations
like the incorrect handling of wildcards in internationalized
domain names, confusing domain names with IP addresses,
incorrect handling of NULL characters, and so forth. Several
of these violations allow network attackers to completely break
the security guarantees of SSL/TLS protocol by allowing
the attackers to read/modify any data transmitted over the
SSL/TLS connections set up using the affected implementa-
tions. HVLearn also found 121 unique differences, on average,
between any two pairs of tested application/library.
The major contributions of this paper are as follows.
• To the best of our knowledge, HVLearn is the ﬁrst testing
tool
that can learn DFA models for implementations
of hostname veriﬁcation, a critical part of SSL/TLS
implementations. The inferred DFA models can be used
for efﬁcient differential testing or extracting a formal
reference speciﬁcation compatible with multiple existing
implementations.
• We design and implement several domain-speciﬁc opti-
mizations like equivalence query design, alphabet selec-
tion, etc. in HVLearn for efﬁciently learning DFA models
from hostname veriﬁcation implementations.
• We evaluate HVLearn on 6 popular libraries and 2 appli-
cations. HVLearn achieved signiﬁcantly higher (11.21%
more on average) code coverage than existing black/gray-
box fuzzing techniques and found 8 unique previously
unknown RFC violations as shown in Table II, several
of which render the affected SSL/TLS implementations
completely insecure to man-in-the-middle attacks.
The remainder of this paper is organized as follows: Sec-
tion II presents the descriptions of the SSL/TLS hostname
veriﬁcation process. We discuss the challenges in testing host-
name veriﬁcation and our testing methodology in Section III.
522
Section IV describes the design and implementation details
of HVLearn. We present
the evaluation results for using
HVLearn to test SSL/TLS implementations in Section V.
Section VI presents a detailed case study of several security-
critical bugs that HVLearn found. Section VII discusses the
related work and Section VIII concludes the paper. For the
detailed developer responses on the bugs found by HVLearn,
we refer interested readers to Appendix X-B.
II. OVERVIEW OF HOSTNAME VERIFICATION
As part of the hostname veriﬁcation process, the SSL/TLS
client must check that the host name of the server matches
either the “common name” attribute in the certiﬁcate or one
of the names in the “subjectAltName” extension in the certiﬁ-
cate [21]. Note that even though the process is called hostname
veriﬁcation, it also supports veriﬁcation of IP addresses or
email addresses.
In this section, we ﬁrst provide a brief summary of the
hostname format and speciﬁcations that describe the format
of the common name attribute and subjectAltName extension
formats in X.509 certiﬁcate. Figure 1 provides a high-level
summary of the relevant parts of an X.509 certiﬁcate. Next,
we describe different parts of the hostname veriﬁcation process
(e.g., domain name restrictions, wildcard characters, and so
forth) in detail.
X.509 Certiﬁcate
type
format
CN=  X520CommonName arbitrary
Subject:
X509v3 extensions
X509v3 Subject Alternative Name:
type
format
DNS:
IA5String
dNSName
IP Address:
email:
IA5String
IA5String
iPAddress
rfc822Name
Fig. 1. Fields in an X.509 certiﬁcate that are used for hostname veriﬁcation.
A. Hostname veriﬁcation inputs
Hostname format. Hostnames are usually either a fully
qualiﬁed domain name or a single string without any ‘.’
characters. Several SSL/TLS implementations (i.e., OpenSSL)
also support IP addresses and email addresses to be passed
as the hostname to the corresponding hostname veriﬁcation
implementation.
A domain name consists of multiple “labels”, each separated
by a ‘.’ character. The domain name labels can only contain
letters a-z or A-Z (in a case-insensitive manner), digits 0-9
and the hyphen character ‘-’ [16]. Each label can be up to
63 characters long. The total length of a domain name can
be up to 255 characters. Earlier speciﬁcations required that
the labels must begin with letters [21]. However, subsequent
revisions have allowed labels that begin with digits [17].
Common names in X.509 certiﬁcates. The Common Name
(CN) is an attribute of the “subject distinguished name”
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:25 UTC from IEEE Xplore.  Restrictions apply. 
ﬁeld in an X.509 certiﬁcate. The common name in a server
certiﬁcate is used for validating the hostname of the server as
part of the certiﬁcate veriﬁcation process. A common name
usually contains a fully qualiﬁed domain name, but it can also
contain a string with arbitrary ASCII and UTF-8 characters
describing a service (e.g., CN=‘Sample Service’). The only
restriction on the common name string is that it should follow
the X520CommonName standard (e.g., should not repeat the
substring ‘CN=’) [21]. Note that this is different from the
hostname speciﬁcations that are very strictly deﬁned and only
allow certain characters and digits as described above.
SubjectAltName in X.509 certiﬁcates. Subject alternative
name (subjectAltName) is an X.509 extension that can be
used to store different types of identity information like fully
qualiﬁed domain names, IP addresses, URI strings, email
addresses, and so forth. Each of these types has different
restrictions on allowed formats. For example, dNSName(DNS)
and uniformResourceIdentiﬁer(URI) must be valid IA5String
strings, a subset of ASCII strings [21]. We refer interested
readers to Section 4.1.2.6 of RFC 5280 for further reading.
B. Hostname veriﬁcation rules
Matching order. RFC 6125 recommends SSL/TLS imple-
mentations to use subjectAltName extensions, if present in
a certiﬁcate, over common names as the common name is
not strongly tied to an identity and can be an arbitrary string
as mentioned earlier [24]. If multiple identiﬁers are present
in a subjectAltName, the SSL/TLS implementations should
try to match DNS, SRV, URI, or any other identiﬁer type
supported by the implementation and must not match the
hostname against the common name of the certiﬁcate [24].
The Certiﬁcate Authorities (CAs) are also supposed to use the
dNSName instead of common name for storing the identity
information while issuing certiﬁcates [18].
Wildcard in common name/subjectAltName. if a server
certiﬁcate contains a wildcard character ‘*’, an SSL/TLS
implementation should match hostname against them using
the rules described in RFC 6125 [24]. We provide a summary
of the rules below.
A wildcard character is only allowed in the left-most label.
If the presented identiﬁer contains a wildcard character in any
label other then the left-most label (e.g., www.*.example.com
and www.foo*.example.com), the SSL/TLS implementations
should reject the certiﬁcate. A wildcard character is allowed to
be present anywhere in the left-most label, i.e., a wildcard does
not have to be the only character in the left-most label. For ex-
ample, identiﬁers like bar*.example.com, *bar.example.com,
or f*bar.example.com valid.
While matching hostnames against the identiﬁers present
in a certiﬁcate, a wildcard character in an identiﬁer should
only apply to one sub-domain and an SSL/TLS implemen-
tation should not compare against anything but
the left-
label of the hostname (e.g., *.example.com should
most
match foo.example.com but not bar.foo.example.com or ex-
ample.com).
that
Several special cases involving the wildcards are allowed in
the RFC 6125 only for backward compatibility of existing
SSL/TLS implementations as they tend to differ from the
speciﬁcations in these cases. RFC 6125 clearly notes that
these cases often lead to overly complex hostname veriﬁcation
code and might lead to potentially exploitable vulnerabilities.
Therefore, new SSL/TLS implementations are discouraged
from supporting such cases. We summarize some of them:
(i) a wildcard is all or part of a label
identiﬁes a
public sufﬁx (e.g., *.com and *.info), (ii) multiple wildcards
are present
in a label (e.g., f*b*r.example.com), and (iii)
wildcards are included as all or part of multiple labels (e.g.,
*.*.example.com).
International domain name (IDN). IDNs can contain charac-
ters from a language-speciﬁc alphabet like Arabic or Chinese.
An IDN is encoded as a string of unicode characters. A domain
name label is categorized as a U-label if it contains at least one
non-ASCII character (e.g., UTF-8). RFC 6125 speciﬁes that
any U-labels in IDNs must be converted to A-labels domain
before performing hostname veriﬁcation [24]. U-label strings
are converted to A-labels, an ASCII-compatible encoding,
by adding the preﬁx ‘xn--’ and appending the output of
a Punycode transformation applied to the corresponding U-
label string as described in RFC 3492 [19]. Both U-labels and
A-labels still must satisfy the standard length bound on the
domain names (i.e. up to 255 bytes).
IDN in subjectAltName. As indicated in RFC 5280, any
IDN in X.509 subjectAltName extension must be deﬁned as
type IA5String which is limited only to a subset of ASCII
characters [21]. Any U-label in an IDN must be converted
to A-label before adding it
to the subjectAltName. Email
addresses involving IDNs must also be converted to A-labels
before.
IDNs in common name. Unlike IDNs in subjectAltName,
IDNs in common names are allowed to contain a Printa-
bleString (A-Z, a-z, 0-9, special characters ’ = ( ) + ,
- . / : ?, and space) as well as UTF-8 characters [21].
Wildcard and IDN. There is no speciﬁcation deﬁning how
a wildcard character may be embedded within A-labels or
U-labels of an IDN [23]. As a result RFC 6125 [24] rec-
ommends that SSL/TLS implementations should not match
a presented identiﬁer in a certiﬁcate where the wildcard
is embedded within an A-label or U-label of an IDN
(e.g., xn--kcry6tjko*.example.com). However, SSL/TLS im-
plementations should match a wildcard character in an IDN
as long as the wildcard character occupies the entire left-most
label of the IDN (e.g. *.xn--kcry6tjko.example.com).
IP address. IP addresses can be part of either the common
name attribute or the subjectAltName extension (with an ‘IP:’
preﬁx) in a certiﬁcate. Section 3.1.3.2 of RFC 6125 speciﬁes
that an IP address must be converted to network byte order
octet string before performing certiﬁcate veriﬁcation [24].
SSL/TLS implementations should compare this octet string
with the common name or subjectAltName identiﬁers. The
length of the octet string must be 4 bytes and 18 bytes for
IPv4 and IPv6 respectively. The hostname veriﬁcation should
523
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:25 UTC from IEEE Xplore.  Restrictions apply. 
succeed only if both octet strings are identical. Therefore,
wildcard characters are not allowed in IP address identiﬁers,
and the SSL/TLS implementations should not attempt to match
wildcards.
Email. Email can be embedded in common name as the
emailAddress attribute in legacy SSL/TLS implementations.
The attribute is not case sensitive. However, new implemen-
tations must add email addresses in rfc822Name format to
subject alternative name extension instead of the common
name attribute [21].
Internationalized email. As similar
to IDNs in subjec-
tAltName extensions, an internationalized email must be
converted into the ASCII
representation before veriﬁca-
tion. RFC 5321 also speciﬁes that network administrators
must not deﬁne mailboxes (local-part@domain/address-literal)
with non-ASCII characters and ASCII control characters.
Email addresses are considered to match if the local-part
and host-part are exact matches using a case-sensitive and
case-insensitive ASCII comparison respectively (e.g., MYE-
PI:EMAIL does not match PI:EMAIL
but matches PI:EMAIL) [21]. Note that
this speciﬁcation contradicts that of the email addresses em-
bedded in the common name that is supposed to be completely
case-insensitive.
Email with IP address in the host part. RFCs 5280 and 6125
do not specify any special treatment for IP address in the host
part of email and only allow email in rfc822Name format. The
rfc822Name format supports both IPv4 and IPv6 addresses in
the host part. Therefore, an email with an IP address in the
host part is allowed to be present in a certiﬁcate [22].
Wildcard in email. There is no speciﬁcation that wildcard
should be interpreted and attempted to match when they are
part of an email address in a certiﬁcate.
Other identiﬁers in subjectAltName. There are other iden-
tiﬁers that can be used to perform identity checks e.g.,
UniformResourceIdentiﬁer(URI), SRVName, and otherName.
However, most popular SSL/TLS libraries do not support
checking these identiﬁers and leave it up to the applications.
III. METHODOLOGY
In this section, we describe the challenges behind automated
testing of hostname veriﬁcation implementations. Albeit small
in size, the diversity of these implementations and the sub-
tleties in the hostname veriﬁcation process make these im-
plementations difﬁcult to test. We then proceed to describe an
overview of our methodology for testing hostname veriﬁcation
implementations using automata learning algorithms. We also
provide a brief summary of the basic setting under which
automata learning algorithms operate.
A. Challenges in hostname veriﬁcation analysis
We believe that any methodology for automatically ana-
lyzing hostname veriﬁcation functionality should address the
following challenges:
1. Ill-deﬁned informal speciﬁcations. As discussed in Sec-
tion II, although the relevant RFCs provide some exam-
ples/rules deﬁning the hostname veriﬁcation process, many
corner cases are left unspeciﬁed. Therefore, it is necessary
for any hostname veriﬁcation implementation analysis to take
into account the behaviors of other popular implementations to
discover discrepancies that could lead to security/compatibility
ﬂaws.
2. Complexity of name checking functionality. Hostname
veriﬁcation is signiﬁcantly more complex than a simple string
comparison due to the presence of numerous corner cases and
special characters. Therefore, any automated analysis must
be able to explore these corner cases. We observe that the
format of the certiﬁcate identiﬁer as well as the matching
rules closely resemble a regular expression matching problem.
In fact, we ﬁnd that the set of accepted hostnames for each
given certiﬁcate identiﬁer form a regular language.
3. Diversity of implementations. The importance and pop-
ularity of the SSL/TLS protocol resulted in a large number
of different SSL/TLS implementations. Therefore, hostname
veriﬁcation logic is often implemented in a number of different
programming languages such as C/C++, Java, Python, and so
forth. Furthermore, some of these implementations might be
only accessible remotely without any access to their source
code. Therefore, we argue that a black-box analysis algorithm