address and routing it through the mix network. The
processing of the reply message is identical to the
processing of forward messages, leading to simplicity
of implementation and larger anonymity sets.
3. Formal protocol description
3.1. Notation
Let κ be a security parameter. An adversary will
have to do about 2κ work to break the security of
Sphinx with nonnegligible probability. We suggest
using κ = 128.
Let r be the maximum number of nodes that a
Sphinx mix message will traverse before being deliv-
ered to its destination. We suggest r = 5.
Deﬁne the following:
G: A prime-order cyclic group satisfying the De-
cisional Difﬁe-Hellman Assumption. G∗
is the set
of non-identity elements of G. The element g is a
generator of G, and q is the (prime) order of G, with
q ≈ 22κ.
random oracles:
A number of hash functions, which we model by
• hμ : G∗ → {0, 1}κ, used to key μ, below
• hρ : G∗ → {0, 1}κ, used to key ρ, below
• hπ : G∗ → {0, 1}κ, used to key π, below
• hτ : G∗ → {0, 1}2κ, used to identify previously
seen elements of G∗
• hb : G∗ × G∗ → Z
∗
q, used to compute blinding
factors
We implement these functions with appropriately trun-
cated SHA-256 hash functions.
μ : {0, 1}κ × {0, 1}∗ → {0, 1}κ: a Message
Authentication Code (MAC). We normally model μ
as a pseudo-random function (PRF). However, in one
part of the proof (section 4.2), the adversary gets to
know the key to the MAC. In this case, simply being
a PRF guarantees nothing, whereas we still want μ
with a known key to behave like a hash function. For
this reason, we model μ as a random oracle in that
section (which of course is stronger than a PRF). In a
realistic implementation, we would use a MAC based
on a hash function, such as SHA256-HMAC-128.
ρ : {0, 1}κ → {0, 1}(2r+3)κ: a pseudo-random
generator (PRG). A PRG is the basis for any stream
cipher: the key is fed as an input to the PRG, which
outputs a long pseudorandom string. This string is
XORed with the plaintext to yield the ciphertext, or
with the ciphertext to recover the plaintext. As above,
in section 4.2 the adversary will be able to know the
input to the PRG, which removes all of the PRG’s
security properties. So again, for that section, we
model ρ as a random oracle. We can implement ρ with
any secure stream cipher, or any secure block cipher
in counter mode, which operates in the same way.
π : {0, 1}κ × {0, 1}(cid:6)π → {0, 1}(cid:6)π: a family of
pseudo-random permutations (PRPs). (cid:5)π will be the
size of the message bodies that can be transmitted
over Sphinx (plus κ bits of overhead). Given any
(k, x) ∈ {0, 1}κ×{0, 1}(cid:6)π, both π(k, x) and π
−1(k, x)
should be easy to compute. (The latter is the unique
value y ∈ {0, 1}(cid:6)π such that π(k, y) = x.) π
−1 should
also be a family of pseudo-random permutations. We
use the LIONESS [1] PRP to implement π.
N ⊂ {0, 1}κ: a set of mix node identiﬁers. Each
node n ∈ N has a private key xn ∈R Z
∗
q and a public
key yn = gxn ∈ G∗
. We assume the presence of a PKI
that publishes an authenticated list of all (n, yn) pairs.
272
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:19:04 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. Construction of the ﬁller strings φi for
ν = r = 4. Here, ρi is the ﬁnal 2(i + 1)κ bits of
ρ(hρ(si)).
D ⊂ {0, 1}≤2rκ: a set of destination addresses,
usually normal email addresses. It must be the case
that N ∩ D = ∅ and that N ∪ D is preﬁx-free. Note
that N ∩ D = ∅ does not imply that end users of
Sphinx cannot themselves run Sphinx nodes; it is just
that the identiﬁer for their node (in N ) will be different
from their email address. One of the elements ∗ ∈ D
is distinguished.
The notation 0a means the string of 0 bits of length
a, x[a..b] means the substring of x consisting of bits
a through b, inclusive (the leftmost bit of x is bit 0),
(cid:10) denotes concatenation, |s| is the length of string s,
and  is the empty string.
3.2. Creating a mix header
This section describes the procedure to create a
Sphinx mix message header. It is used as a subrou-
tine for the procedures to create forward messages
and single-use reply blocks in sections 3.3 and 3.4,
respectively.
Input: a destination address Δ ∈ D, an iden-
tiﬁer I ∈ {0, 1}κ and a sequence of mix nodes
{n0, n1, . . . , nν−1} with ν ≤ r. It must also be the
case that |Δ| ≤ (2(r − ν) + 2)κ.
Pick a random x ∈R Z
∗
q.
Compute
a
sequence
of
ν
(α0, s0, b0), . . . , (αν−1, sν−1, bν−1) as follows:
• α0 = gx, s0 = yx
• α1 = gxb0, s1 = yxb0
• . . .
n0, b0 = hb(α0, s0)
n1 , b1 = hb(α1, s1)
Figure 2. Construction of (β0, γ0) for a Sphinx mix
header, with ν = r = 4. The construction of φ3 from
Figure 1 ensures that the truncated part of βi+1
equals the truncated part of ρ(hρ(si)), indicated by
the dotted lines and shading, for each 0 ≤ i < ν.
• αν−1 = gxb0b1···bν−2, sν−1 = y
bν−1 = hb(αν−1, sν−1)
xb0b1···bν−2
nν−1
,
The αi are the group elements, the si are the Difﬁe-
Hellman shared secrets, and the bi are the blinding
factors.
Compute the ﬁller strings φ0, . . . , φν−1:
• φ0 = 
• For 0 < i < ν, φi = {φi−1(cid:10)02κ} ⊕
(cid:3)
(cid:2)
ρ(hρ(si−1))[(2(r−i)+3)κ..(2r+3)κ−1]
|φi| = 2iκ. This step is illustrated in
Note that
Figure 1.
Compute
a
sequence
of
mix
headers
tuples
273
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:19:04 UTC from IEEE Xplore.  Restrictions apply. 
=
(cid:4)(cid:4)
(cid:3)(cid:3)
• βν−1
(cid:2)
ρ(hρ(sν−1))[0..(2(r−ν)+3)κ−1]
Mν−1, Mν−2, . . . , M0 as follows: Mi = (αi, βi, γi) ∈
G∗ × {0, 1}(2r+1)κ × {0, 1}κ where:
(cid:5) ⊕
(cid:3)
Δ(cid:10)I(cid:10)0(2(r−ν)+2)κ−|Δ|
(cid:10)φν−1
ni+1(cid:10)γi+1(cid:10)βi+1[0..(2r−1)κ−1]
• βi
ρ(hρ(si))[0..(2r+1)κ−1] for 0 ≤ i < ν − 1
• γi = μ(hμ(si), βi) for 0 ≤ i ≤ ν − 1
The above step is illustrated in Figure 2.
Output: the mix header M0 and the sequence of
⊕
(cid:2)
=
shared secrets s0, . . . , sν−1.
3.3. Creating a forward message
This section gives the procedure used to create
through the Sphinx
a forward message to be sent
network.
Input: a message m, a destination address Δ and a
sequence of mix nodes {n0, n1, . . . , nν−1} with ν ≤ r.
Compute the mix header M0 and the sequence
of shared secrets s0, . . . , sν−1 as above, passing the
distinguished element ∗ ∈ D as the destination address
and 0κ as I. Compute:
• δν−1 = π(hπ(sν−1), 0κ(cid:10)Δ(cid:10)m)
• δi = π(hπ(si), δi+1) for i = ν − 2, . . . , 0
Output: the pair (M0, δ0)
The forward message is this pair (M0, δ0), and
should be sent to n0.
3.4. Creating a single-use reply block
This procedure is used to create a single-use reply
block.
Input: a destination address Δ and a sequence of
mix nodes {n0, n1, . . . , nν−1} with ν ≤ r. Δ should
be the user’s own address.
Pick a random identiﬁer I ∈R {0, 1}κ and compute
the mix header M0 and the sequence of shared secrets
s0, . . . , sν−1 as above.
Pick a random key ˜k ∈R {0, 1}κ.
Output: I, the tuple (˜k, hπ(s0), . . . , hπ(sν−1)), and
the tuple (n0, M0, ˜k).
Store the tuple (˜k, hπ(s0), . . . , hπ(sν−1)) in a local
table indexed by I. Send (n0, M0, ˜k) to the nymserver
over a secure channel, to be indexed under the user’s
pseudonym. This can be done, for example, by encrypt-
ing it with the nymserver’s public key, signing it with
the pseudonym’s private key, and sending the message
to the nymserver using the Sphinx forward channel.
3.5. Using a single-use reply block
When the nymserver receives a message m destined
for a pseudonym, it will look up a previously unused
(n0, M0, ˜k) tuple indexed by that pseudonym. It will
then send (M0, π(˜k, 0κ(cid:10)m)) to n0 and remove the
tuple from its index.
3.6. Message processing by mix nodes
Messages received by mix nodes are of the form
(M, δ) = ((α, β, γ), δ) ∈ G∗ × {0, 1}(2r+1)κ ×
{0, 1}κ × {0, 1}(cid:6)π. (The node should ensure that the
message is in this form; in particular, that α ∈ G∗
.)
When mix node n, with private key xn, receives such
a message, it proceeds as follows:
Compute the shared secret s = αxn. If hτ (s) is
already in this node’s table of seen message tags,
discard the message. (Note that
this table can be
ﬂushed whenever the node rotates its private key.)
Otherwise, continue by comparing γ to μ(hμ(s), β).
If they do not match, discard the message. Otherwise,
store hτ (s) in the table of seen message tag, and
continue by decrypting the suitably padded β (as a
stream cipher, XORing the output of the PRG ρ) to
get B = {β(cid:10)02κ} ⊕ ρ(hρ(s)).
Use the preﬁx-freeness of N ∪ D to uniquely parse
a preﬁx of B as n ∈ N ∪ D. (If this is not possible,
the message is discarded.)
If n ∈ N is found: This message is destined
for another Sphinx node. Compute the blinding factor
(cid:4) = B[κ..2κ−1],
b = hb(α, s), and let α
(cid:4) = B[2κ..(2r+3)κ−1], and δ
−1(hπ(s), δ). Send
β
(cid:4)) to n. Figure 3 illustrates the processing
(cid:4)
((α
steps involved in this case, as an example of how the
decoding process works.
If n = ∗ is found: The current node is the exit
−1(hπ(s), δ).
node for a forward message. Let δ
[κ..(cid:6)π−1] as Δ(cid:10)m for Δ ∈ D
(cid:4)
[0..κ−1] = 0κ, parse δ
If δ
using the preﬁx-freeness of D. If this is successful,
m should be a plaintext message, and is sent to Δ.
Otherwise, the message has been tampered with and is
discarded.
Otherwise, if n ∈ D\{∗} is found: The current
node is the exit node for a reply message, and n is the
owner of a pseudonym. Let I = B[|n|..|n|+κ−1] and
(cid:4) = π
δ
−1(hπ(s), δ). Send (I, δ
(cid:4) = αb. Let γ
(cid:4)) to n.
(cid:4) = π
(cid:4) = π
(cid:4)), δ
, β
(cid:4)
(cid:4)
, γ
3.7. Reply message processing by pseudonym
owners
Upon receiving (I, δ), a pseudonym owner looks
(˜k, k0, . . . , kν−1)
up (and subsequently removes)
274
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:19:04 UTC from IEEE Xplore.  Restrictions apply. 
(cid:4)
Figure 3. The processing of a Sphinx message ((α, β, γ), δ) into ((α
(cid:4)
(cid:4)), δ
(cid:4)) at Mix n.
, γ
, β
(cid:6)
(cid:7)
˜k, π (k0, π (k1,··· π (kν−1, δ)···))
(cid:4)
in its table indexed by I, and computes δ
−1
π
(cid:4)
δ
received message.
(cid:4) =
and m =
[0..κ−1] = 0κ then accept m as the
[κ..(cid:6)π−1]. If δ
4. Proof of security
From a cryptographic point of view, mix protocols
like Sphinx share many properties with onion routing
protocols. At a minimum, we desire our mix protocol
to have all of the security properties of onion routing.
In [5], Camenisch and Lysyanskaya give four prop-
erties of an onion routing protocol: correctness, in-
tegrity, wrap-resistence, and security, all detailed be-
low. They show that any onion routing protocol having
all of these properties realizes ideal onion routing func-
tionality in the Universal Composability model [6].
This means that an adversary against a protocol with
these four properties has no better chance of success
than an adversary against an ideal protocol; that is, at
a high level, one in which adversaries (even ones that
control some of the mix nodes) have no access to the
underlying cryptographic implementation, but rather
can observe only opaque identiﬁers for messages.
For our mix network, we would like, in addition to
the above properties, that adversaries in the middle of a
path should be unable to distinguish forward messages
from replies (unlike the situation in [5]). It is clear
that adversary nodes at the edges of the network—
that is, nodes that deliver messages to users who are
not themselves nodes—are necessarily able to distin-
guish forward from reply messages: outgoing forward
messages are in plaintext, since messages should be
275
deliverable to arbitrary parties on the Internet who
have no special software installed; on the other hand,
outgoing reply messages to the pseudonym owner are
encrypted. Entry nodes also receive forward messages
from arbitrary end users, but receive reply messages
from the nymserver (the forward and reply messages
are cryptographically indistinguishable, however). But
between the entry and the exit, nodes should be unable
to distinguish the two cases.
Formally, under the assumptions on the components
given in section 3.1, Sphinx realizes ideal onion routing
functionality in the Universal Composability model (as
deﬁned in [5]), and also makes forward and reply
messages indistinguishable to middle mix nodes. We
prove this result in the following four sections.
4.1. Correctness
It is straightforward by inspection that the protocol
works correctly in the absence of an adversary; that
is, it processes the mix messages correctly, sends the
right intermediate mix messages to the right mixes, and