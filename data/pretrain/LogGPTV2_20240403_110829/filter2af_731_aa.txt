# 前言
从一道CTF来审计学习PHP对象注入，由功能的分析到漏洞的探测、分析和利用。
# 考点
PHP对象注入、代码审计、序列化
# 分析
## 信息收集
题目上来给了一个文件上传的服务，没有直接去测试，对网站进行敏感信息收集，发现存在`robots.txt`泄露
    User-agent: *
    Disallow: /index.txt
访问`index.txt`获取网站源码
    fakename = $fakename;
            $this->realname = sha1($content).$ext;
        }
        function open($fakename, $realname) {
            global $sandbox_dir;
            $analysis = "$fakename is in folder $sandbox_dir/$realname.";
            return $analysis;
        }
    }
    if(!is_dir($sandbox_dir)) {
        mkdir($sandbox_dir,0777,true);
    }
    if(!is_file($sandbox_dir.'/.htaccess')) {
        file_put_contents($sandbox_dir.'/.htaccess', "php_flag engine off");
    }
    if(!isset($_GET['action'])) {
        $_GET['action'] = 'home';
    }
    if(!isset($_COOKIE['files'])) {
        setcookie('files', myserialize([], $secret));
        $_COOKIE['files'] = myserialize([], $secret);
    }
    switch($_GET['action']){
        case 'home':
        default:
            $content = "";
            $files = myunserialize($_COOKIE['files'], $secret);
            if($files) {
                $content .= "";
                $i = 0;
                foreach($files as $file) {
                    $content .= "fakename)."'>Click to show locations";
                    $i++;
                }
                $content .= "";
            }
            echo $content;
            break;
        case 'upload':
            if($_SERVER['REQUEST_METHOD'] === "POST") {
                if(isset($_FILES['file'])) {
                    $uploadfile = new UploadFile;
                    $uploadfile->upload($_FILES['file']['name'], file_get_contents($_FILES['file']['tmp_name']));
                    $files = myunserialize($_COOKIE['files'], $secret);
                    $files[] = $uploadfile;
                    setcookie('files', myserialize($files, $secret));
                    header("Location: index.php?action=home");
                    exit;
                }
            }
            break;
        case 'changename':
            if($_SERVER['REQUEST_METHOD'] === "POST") {
                $files = myunserialize($_COOKIE['files'], $secret);
                if(isset($files[$_GET['i']]) && isset($_POST['newname'])){
                    $files[$_GET['i']]->fakename = $_POST['newname'];
                }
                setcookie('files', myserialize($files, $secret));
            }
            header("Location: index.php?action=home");
            exit;
        case 'open':
            $files = myunserialize($_COOKIE['files'], $secret);
            if(isset($files[$_GET['i']])){
                echo $files[$_GET['i']]->open($files[$_GET['i']]->fakename, $files[$_GET['i']]->realname);
            }
            exit;
        case 'reset':
            setcookie('files', myserialize([], $secret));
            $_COOKIE['files'] = myserialize([], $secret);
            array_map('unlink', glob("$sandbox_dir/*"));
            header("Location: index.php?action=home");
            exit;
    }
查看源码，发现该题目基本类似于[Insomnihack Teaser
2018](https://link.jianshu.com/?t=https%3A%2F%2Fcorb3nik.github.io%2Fblog%2Finsomnihack-teaser-2018%2Ffile-vault)
## 代码审计
### 功能分析
该题是一个沙盒文件管理器，允许用户上传文件，同时还允许查看文件的元数据。
文件上传通过cookie来保存上传的文件信息。$_COOKIE['files']的值是个反序列化的数组，数组的每个元素是一个UploadFile对象，保存了一个fakename（上传文件的原始名字，可以修改）和一个realname（内容hash值）。
用户可以进行下面五类操作：
  * 主页/home: （查看主页）通过反序列化cookie的值获得上传文件列表，然后显示在前端页面
    case 'home':
        default:
            $content = "";
            $files = myunserialize($_COOKIE['files'], $secret);
            if($files) {
                $content .= "";
                $i = 0;
                foreach($files as $file) {
                    $content .= "fakename)."'>Click to show locations";
                    $i++;
                }
                $content .= "";
            }
            echo $content;
            break;
默认显示上传界面，随后反序列化Cookie存储`files`数组的`UploadFile`对象，遍历显示上传的文件。
  * 上传/upload: （上传新文件）创建对象`UploadFile`保存上传文件，无过滤
    case 'upload':
            if($_SERVER['REQUEST_METHOD'] === "POST") {
                if(isset($_FILES['file'])) {
                    $uploadfile = new UploadFile;
                    $uploadfile->upload($_FILES['file']['name'], file_get_contents($_FILES['file']['tmp_name']));
                    $files = myunserialize($_COOKIE['files'], $secret);
                    $files[] = $uploadfile;
                    setcookie('files', myserialize($files, $secret));
                    header("Location: index.php?action=home");
                    exit;
                }
            }
            break;
创建`UploadFile`对象，调用`upload`方法，传入文件名、文件内容在服务器上进行存储，然后反序列化cookie的files对新创建的文件`uploadfile`对象进行追加存储，之后重新设置cookie重新序列化files。
    class UploadFile {
        function upload($fakename, $content) {
            global $sandbox_dir;
            $info = pathinfo($fakename);
            $ext = isset($info['extension']) ? ".".$info['extension'] : '.txt';
            file_put_contents($sandbox_dir.'/'.sha1($content).$ext, $content);
            $this->fakename = $fakename;
            $this->realname = sha1($content).$ext;
        }
        function open($fakename, $realname) {
            global $sandbox_dir;
            $analysis = "$fakename is in folder $sandbox_dir/$realname.";
            return $analysis;
        }
    }
  * 更改名称/changename:（重命名已上传的文件）修改某个已上传文件的fakename，然后重新序列化
    case 'changename':
            if($_SERVER['REQUEST_METHOD'] === "POST") {
                $files = myunserialize($_COOKIE['files'], $secret);
                if(isset($files[$_GET['i']]) && isset($_POST['newname'])){
                    $files[$_GET['i']]->fakename = $_POST['newname'];
                }
                setcookie('files', myserialize($files, $secret));
            }
            header("Location: index.php?action=home");
            exit;
根据`i`值索引文件对象`UploadFile`，然后更改`fakename`的值，之后重新设置cookie重新序列化files。
  * 打开/open: （查看已上传文件的元数据）输出指定文件的fakename和realname信息
    case 'open':
            $files = myunserialize($_COOKIE['files'], $secret);
            if(isset($files[$_GET['i']])){
                echo $files[$_GET['i']]->open($files[$_GET['i']]->fakename, $files[$_GET['i']]->realname);
            }
            exit;
通过`i`值索引文件对象`UploadFile`，然后调用对象的`open`方法输出指定文件的元数据：`fakename和realname`信息。
  * 重置/reset: （删除特定沙盒中的所文件）清空特定的sandbox
    case 'reset':
            setcookie('files', myserialize([], $secret));
            $_COOKIE['files'] = myserialize([], $secret);
            array_map('unlink', glob("$sandbox_dir/*"));
            header("Location: index.php?action=home");
            exit;
通过空数组设置新的cookie，然后删除`$sandbox_dir/`下的文件。
对于用户的操作，其中的每一个操作，都是在沙盒环境中执行的。这里的沙盒，是程序生成的用户专属文件夹，其生成代码如下：
    $sandbox_dir = 'sandbox/'.sha1($_SERVER['REMOTE_ADDR']);
该沙盒还可以防止PHP执行，以生成的.htaccess文件为例，我们可以看到其中的php_flag engine off指令：
    if(!is_dir($sandbox_dir)) {
        mkdir($sandbox_dir,0777,true);
    }
    if(!is_file($sandbox_dir.'/.htaccess')) {
        file_put_contents($sandbox_dir.'/.htaccess', "php_flag engine off");
    }
针对`UploadFile`类，在上传新文件时，将使用以下属性来创建UploadFile：
fakename：用户上传文件的原始文件名；
realname：自动生成的文件名，用于在磁盘上存储文件。
通过Open操作查看文件时，fakename用于文件名的显示，而在文件系统中所保存的文件，实际上其文件名为realname中的名称。
然后，会将UploadFile对象添加到数组，通过自定义的myserialize()函数对其进行序列化，并通过文件Cookie返回给用户。当用户想要查看文件时，Web应用程序会获取用户的Cookie，通过myunserialized()函数对UploadFile对象的数组反序列化，随后对其进行相应的处理。