### Incorporation of CKKS Extensions for Multiple Parties

CKKS (Cheon-Kim-Kim-Song) homomorphic encryption can be extended to support multiple parties, enhancing its utility in collaborative scenarios. For example, the multi-key scheme proposed by Chen et al. [31] allows computations on ciphertexts generated by multiple users, each using their own private key. Alternatively, Mouchet et al. [80] introduce a multiparty scheme where users collaboratively generate a common public key, with the corresponding private key being secret-shared among them. In both approaches, the service provider performs computations on the users' ciphertexts and interacts with all participants to decrypt the final result.

### Usability

Despite introducing non-negligible communication and computation overhead, CRISP remains practical for modern systems. The independent iterations of the Zero-Knowledge Commitment and Encryption (ZKCE) make the proof generation highly parallelizable and require significantly less memory than the full proof size (as little as 2 GB of RAM in experimental settings). Additionally, CRISP operates offline, requiring interaction only during the release protocol. For instance, the transfer phase can be executed when the user is idle, such as when a wearable device is recharging. Modern communication technologies like fiber optic internet and 5G provide high-throughput links, enabling the transfer of proofs for three weeks of smart metering data in about a minute over an 80 Mb/s link.

### Related Work

#### Homomorphic Encryption
Homomorphic encryption (HE) has gained significant attention for protecting privacy in various fields, including machine learning [57, 65, 88] and medical research [67, 95]. However, HE primarily addresses the tension between privacy and utility, without accounting for the authenticity of the encrypted data or the integrity of the computations performed on it.

#### Verifiable Encryption (VE)
Verifiable Encryption (VE) allows efficient proofs on encrypted data. While VE solutions have been extensively explored in general, they are still under investigation for lattice-based cryptographic systems that provide post-quantum security. Lyubashevsky and Neven [78] propose a one-shot verifiable encryption for short solutions to linear relations. Recent advancements, such as [15] and [46], extend lattice-based VE to non-linear polynomial relations. Although VE can be used for proving correct encryption, it does not address data authenticity, which is typically ensured by more complex cryptographic techniques like hash functions.

#### Homomorphic Signatures and Authenticators
Homomorphic signatures [19, 24, 26, 56] and homomorphic authenticators [5, 48, 54, 87] enable privacy-preserving computations on authenticated data. These schemes produce a signature of the plaintext result of homomorphic computations without decryption. For example, a data owner provides a signature to protected data and sends it to a server for processing. The server generates a new valid signature for the result of the homomorphic computation. Some works, such as [5], offer homomorphic signatures that handle low-degree polynomial operations. However, these solutions often require non-widely-supported homomorphic signature schemes, violating the minimal infrastructure modification requirement. They also do not support data offloading at the service provider to reduce communication and storage costs.

#### Verifiable Computation (VC)
Verifiable Computation (VC) [47, 51, 69] is typically used when a computationally weak user transfers encrypted data to a cloud provider for computation. VC ensures the correctness and trustworthiness of the results, protecting the integrity of cloud computations but not the authenticity of the user's provided data. Techniques like zero-knowledge arguments, such as Pinocchio [84] and SNARKs [38], provide efficient proofs with small verification complexity. Backes et al. [13] extend SNARKs to certified data (ADSNARK) and apply them to the three-party model. However, these solutions require user-side computations for each new query, not supporting data offloading. Moreover, SNARKs suffer from trusted setup requirements and vulnerability to quantum attacks [66].

#### Multi-Party Computation (MPC)
Multi-Party Computation (MPC) solutions like ZKBoo [55], ZKB++ [29], Ligero [6], and KKW [66] provide post-quantum secure mechanisms to prove knowledge of an input to a public circuit. These solutions are built on the MPC-in-the-head paradigm introduced by Ishai et al. [64] and use a cut-and-choose approach over several runs. Our construction follows this approach to ensure the integrity of the userâ€™s data and its encryption. Concurrent work by Baum and Nof [16] also uses MPC-in-the-head for lattice-based assumptions, but their construction is based on a different problem (SIS, Short Integer Solution) and does not address the integrity check of the encrypted payload.

#### Trusted Hardware
Trusted hardware, such as Intel SGX [7, 62, 79], can process data securely. The secure enclave can be positioned at the user side (returning a result certified by the enclave) or at the service provider side (decrypting ciphertexts and returning the computation result). However, these solutions impose different trust assumptions and are considered orthogonal to our work.

#### Privacy and Integrity in Smart Metering and Genomic Data
Several works focus on protecting privacy in smart metering, with some, such as [4, 74], also addressing data integrity and authenticity through custom homomorphic signature schemes. However, the applicability of these solutions is limited due to technical specifications [91]. Similarly, works like [12, 41, 95] use homomorphic encryption to protect genomic privacy and perform disease-susceptibility computations. These models do not address data integrity or authenticity. Finally, several works are dedicated to both privacy and integrity in location-based activity tracking [60, 77, 85, 86, 97, 98], either peer-based, infrastructure-based, or hybrid. SecureRun [85] offers activity proofs for estimating distances covered in a privacy and integrity-preserving manner, but its accuracy depends on the density of access points, achieving a median accuracy of 78% (compared to 99.9% with CRISP on a similar dataset).

### Conclusion
Data sharing in the digital era involves a trade-off between privacy, integrity, and utility. We propose a generic solution that protects the interests of both users and service providers. Building on state-of-the-art lattice-based homomorphic encryption, commitments, and zero-knowledge proofs, our construction enables users to offload their data to service providers in a post-quantum secure, privacy, and integrity-preserving manner, while still allowing flexible computations. We evaluated our solution on three use cases, demonstrating its wide potential for adoption. Future work will explore extending CRISP to handle malicious service providers by combining secure computation techniques with differential privacy.

### Acknowledgements
We thank our shepherd Ian Goldberg and the anonymous reviewers for their valuable feedback. We are also grateful to Henry Corrigan-Gibbs, Wouter Lueks, and the members of the EPFL Laboratory for Data Security for their helpful comments and suggestions. This work was supported in part by the grant #2017-201 (DPPH) of the Swiss strategic focus area Personalized Health and Related Technologies (PHRT), and the grant C17-16 (SecureKG) of the Swiss Data Science Center.

### References
[References listed here]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.