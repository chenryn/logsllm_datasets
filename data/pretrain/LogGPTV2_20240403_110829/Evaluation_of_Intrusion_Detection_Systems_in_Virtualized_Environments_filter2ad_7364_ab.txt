### Detection-Relevant Properties and Attack Injection Time

Detection-relevant properties are observed during the regular operation of the IDS monitoring landscape, specifically during the IDS training phase. These properties are quantified by the statistic "number of occurrences of each variation of the detection-relevant property."

**Attack Injection Time:**
- **Definition:** The attack injection time is the point in time when a hypercall attack, consisting of one or more hypercalls, is injected.
- **Temporal Distributions:** This allows for the specification of arbitrary temporal distributions of attack injection actions.
- **Relevant Temporal Properties:**
  - **Base Rate:** 
    - **Definition:** The base rate is the prior probability of an intrusion (attack).
    - **Base Rate Fallacy:** Ignoring the base rate when assessing the attack detection accuracy of an IDS can lead to the base rate fallacy [13].
    - **Estimation:** The specification of attack injection times provides a close estimation of the actual base rate in the testing phase. This can be estimated by considering the number of injected attacks and the average rate of occurrence of the detection-relevant property.
  - **IDS Evasive Properties:**
    - **Smoke Screen Technique:** Specifying the attack injection time enables the injection of "smoke screen" evasive attacks, where the invocation of hypercalls comprising an attack is delayed to allow benign hypercall activity between each invocation.
    - **Importance:** Some IDSes, such as Xenini [14], have been shown to be vulnerable to such attacks.

### Testing Phase

#### IDS Training
- **Initialization:** The first activity in the testing phase is IDS training, which requires reinitialization of the IDS monitoring landscape between the planning and testing phases (see Fig. 1a).
- **Rationale:** Many parameters of existing IDSes, such as the length of the IDS training period and the attack detection threshold, need to be configured a priori based on observations from the planning phase.
- **Non-determinism Concerns:** The non-determinism of hypercall activities raises concerns about repeatability, which we discuss in the section on "repeatability concerns."

#### Attack Injection
- **Tool Development:** For this critical step, we developed a new tool called hInjector, which is introduced in Section 4.

#### Calculation of Metric Values
- **Post-Injection Metrics:** After performing attack injection, relevant metrics such as true and false positive rates can be calculated.
- **Non-determinism Concerns:** This also raises concerns related to the non-determinism of hypercall activities, which we address next.

### Repeatability Concerns
- **Observations and Decisions:** Observations and decisions made in the planning phase may become irrelevant if hypercall activities are highly non-deterministic and not repeatable.
- **Statistical Accuracy:** For credible evaluation, metric values must be statistically accurate, requiring repeated execution of the testing phase (see Fig. 1a).
- **Mitigation:** Specifying an IDS monitoring landscape as defined in Section 3.1 helps reduce non-determinism by removing major sources, such as non-repeatable workloads.
- **Empirical Evidence:** In Section 5, we show that specifying an IDS monitoring landscape can achieve sufficient repeatability to make planning phase decisions relevant and reduce the number of measurement repetitions needed for statistical accuracy.

### hInjector

#### Overview
- **Purpose:** hInjector is a tool for injecting hypercall attacks, supporting the attack injection scenarios specified in the planning phase.
- **Implementation:** Currently implemented for the Xen hypervisor, but the techniques are not Xen-specific and can be ported to other hypervisors.
- **Attack Models:** Supports injection of attacks crafted with respect to the attack models developed, including different hypercall call sites.
- **Design Criteria:**
  - **Realistic Attacks:** Injection of realistic attacks is crucial for representative, rigorous, and practically feasible IDS evaluation.
  - **Regular System Operation:** hInjector injects hypercall attacks during regular system operation to ensure a mix of benign and malicious activities.
  - **Non-disruptive Injection:** The Filter component prevents crashes by blocking the execution of handlers for injected hypercalls, ensuring the IDS under test is not impacted.

#### Architecture
- **Components:**
  - **Injector:** Modifies hypercall parameter values on-the-fly.
  - **LKM (Loadable Kernel Module):** Invokes hypercalls with regular or crafted parameter values.
  - **Filter:** Identifies and blocks injected hypercalls, returning valid error codes.
  - **Configuration:** XML files for managing Injector and LKM operations.
  - **Logs:** Records invoked hypercalls for reference data and metric calculations.

#### Example Procedure
- **Steps:**
  1. LKM crafts a hypercall parameter value.
  2. LKM stores hypercall ID, parameter number, and value in `hid`.
  3. LKM passes the hypercall to MVMâ€™s vCPU, which then passes control to the hypervisor.
  4. Filter identifies the injected hypercall using `hid` and blocks the handler.
  5. Filter updates `hid` and returns a valid error code.
  6. LKM logs the injected hypercall details.

### Case Study: Evaluating Xenini

#### Planning
- **IDS Monitoring Landscape:** We use the SPECvirt sc2013 benchmark to specify the IDS monitoring landscape, which consists of 6 co-located server VMs and 4 workload drivers.
- **Deployment:** Workload drivers generate workloads that map to hypercalls, and we use Xen 4.4.1 as the hypervisor with full paravirtualization.
- **Server VMs:** Each server VM is allocated 8 virtual CPUs, 3 GB of main memory, and 100 GB of hard disk memory.

This optimized text aims to provide a clear, coherent, and professional description of the concepts and processes involved in the evaluation of Intrusion Detection Systems in virtualized environments.