Compactly,
LC[0] ← ChainCreation(VC , ⟨config⟩)
(1)
indicates the creation of chain C, with validator set VC and con-
figuration specified in ⟨config⟩. Upon completion of this phase, all
validators in VC are provided with the genesis block LC[0]—which
summarizes pertinent information about the chain. They can hence
start running the blockchain and extending the ledger.
Joining a chain. This procedure is necessary when a user u
wishes to become a member of a given chain C. For clients, it
is sufficient to submit a registration transaction directly to the val-
idators VC. However, if u wants to become a validator of C, the
request is first examined by the existing validators against some
pre-established access-control policies and, if the request fulfils the
policies, a configuration update is triggered for including u to VC,
leading an actual reconfiguration step to update VC ← VC ∪ {u}.
The update is recorded in the registry.
Chain division. This is the core procedure of our system, and
the most crucial for security (as we analyse in Section 4). It enables
the division of a blockchain C, dubbed parent chain, for “giving
birth” to two new chains C1 and C2, the child chains. Concretely,
it triggers the partitioning of the validator set VC = VC1 ∪ VC2, so
that the validators in VCi become members of child chain Ci. In
this way, it maintains manageable validator sets with optimal size
and, therefore, optimal throughput. Chain division is inspired by
the biological process of cell division, i.e., mitosis, that creates two
child cells from a parent cell.
The chain-division process may be triggered by various events,
depending on the application scenario and consensus implementa-
tion. For instance, the system could be set to support a maximum
chain size nmax : in this case, chain division is requested as soon
as one of the system’s chains C reaches the pre-established max-
imum size |VC| ≥ nmax . Alternatively, the system could monitor
the transaction throughput of each chain and trigger chain divi-
sion in case the measurements show a significant and long-lasting
throughput drop. Our system does not make any restriction in this
regard. Since our solution is application-agnostic, we abstract away
the specific mechanism used and assume an implicit triggering
event.
New nodes joinChain divisionNodes leaveChain fusionExistingshardingsolutions777ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Giorgia Azzurra Marson, Sebastien Andreina, Lorenzo Alluminio, Konstantin Munichev, and Ghassan Karame
▷ Code for vi ∈ V
upon trigger event do:
upon deliver ⟨Divide, C, initiator⟩ do:
Algorithm 1 Chain Division process.
1: procedure Chain Division(C, V )
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17: end procedure
send ⟨Divide, C, vi⟩ to all vj ∈ V
Verify trigger event
if initiator (cid:44) vi do:
Verify initiator ∈ V
si ← Sign(pki , Divide, C, initiator)
send (⟨Divide, C, initiator⟩, si) to all vj ∈ V
acks ← ∅
Verify sj for message ⟨Divide, C, initiator⟩
acks ← acks ∪ {sj}
trigger (V1, V2) ← ChainDivision.Assign(V)
trigger (C1, C2) ← ChainDivision.Reconfig(C)
upon deliver (⟨Divide, C, initiator⟩, sj) from vj do:
upon |acks| ≥ quorum do:
the chain division process in Algorithm 1.
We specify the instructions for each validator vi ∈ V to execute
Let C be the parent chain and let V be its validator set. The
division process is initiated by any validator vi that, upon observ-
ing the pre-established condition for division (i.e., trigger event in
line 2), issues a division request to all validator in VC. As soon
as a validator vj receives the division request, it verifies that the
triggering event happened and, if this is the case, broadcast an
acknowledgment to proceed with chain division (cf. line 9). The
acknowledgment is a signature, under vj’s registered signing key,
of the division request. After sufficiently many acknowledgements
have been collected (cf. line 14), specifically, at least quorum many
depending on the consensus protocol (a typical choice could be
quorum ≥ (1 − α)|V | where α is the tolerated failure threshold),
chain division proceeds with the actual split of the chain C and its
validator set VC.
This second phase comprises: a validator assignment scheme
denoted by ChainDivision.Assign), to split V into two subsets V1
and V2, the validator sets for the child chains to be created; and
a reconfiguration protocol denoted by ChainDivision.Reconfig, for
replacing the original blockchain C with two new chains C1 and C2
and making sure the child chains are initialized consistently with
the parent chain. Compactly:
(V1, V2) ← ChainDivision.Assign(V)
(C1, C2) ← ChainDivision.Reconfig(C)
(2)
(3)
Algorithm ChainDivision.Assign defines a method to partition V
into V1 and V2. For robustness purposes, the assignment method
should be robust in the sense of ensuring that for each child chain,
the faulty participants in Vi are below αi|Vi|, where αi is the toler-
ated failure threshold for the consensus protocol of chain Ci, i.e.,
the maximum tolerated fraction of non-correct participants. The
assignment of validators is crucial for robustness in the presence of
faulty processes, as we discuss in greater detail in Section 3.4 (and
analyse formally in Section 4).
Once the assignment of validators to sets V1 and V2 has been
established, the validators in Vi set up a new blockchain Ci; this
step is similar to the creation of a new chain “from scratch”, with
the exception that both blockchains C1 and C2 must be consistent
with the state of their parent blockchain C. Namely, the state of each
child chain Ci is fully described by its ledger LCi , and the latter
reproduces all information about validators and assets registered
in LC, for all validators v ∈ VCi . Notice that, to ensure consistency
of the child ledgers with the parent ledger, it is necessary that all
(honest) validators agree on the state of ledger LC prior to initiating
the reconfiguration protocol.
Upon initialization of both child chains C1 and C2, the corre-
sponding validators issue a configuration-update request to the
membership service, so that the division of chain C, with corre-
sponding creation of chains C1 and C2, is registered. Upon comple-
tion of this step, the newly created chains can start operating. From
this moment on, they proceed autonomously and independently of
each other.
Chain fusion. Complementing the chain-division procedure, Mi-
tosis also supports a fusion operation that creates a single set of
validators V ′ by merging two existing validator sets V1 and V2. Sim-
ilarly to chain division, this operation triggers a reconfiguration
step aimed at replacing the two blockchains C1 and C2 with a new
blockchain C′. Unlike chain division, chain fusion does not present
any particular challenge in terms of robustness. However, when
combining heterogeneous chains that use different consensus pro-
tocols, in particular, that guarantee correctness for different failure
thresholds α1 (cid:44) α2, the resulting merged chain will be resilient to
the smallest failure ratio, i.e., α′ ≤ min{α1, α2}.
3.4 Validator Assignment Scheme
The validator assignment scheme is a crucial subroutine of the chain
division process (cf. Section 3.3), as it determines which validators
in the parent chain C are assigned to which of the child chains.
Its design depends on the ratio β of (crash- or Byzantine) failures
in the parent chain (i.e., f = β|V | < α|V |), as well as on the
tolerated thresholds α1 and α2 for the two child chains. Namely,
the assignment scheme must ensure the ratio of failing participants
is below αi in both child chains. We discuss two alternatives, a
deterministic assignment and a randomized assignment.
Deterministic assignment. The robustness condition is automati-
cally fulfilled by assuming a more conservative bound on the frac-
tion of tolerated faults in V . Namely, if the consensus protocol run
by chain Ci can tolerate a number of faulty nodes below αi|Vi|,
then requiring a bound f < αi2 |V | in the parent chain, where f is
the number of faulty nodes in V , suffices to guarantee robustness
in both child chains. That is, the conditions for consistency and
liveness are met regardless of how the validators are assigned to
the child chains. One such deterministic assignment scheme could
simply rank validators in V (e.g., following the lexicographic order
of the validator’s identifiers), hence assign the first n/2 validators
in the ranking to V1, and the other validators to V2.
Randomized assignment. An alternative method to assign valida-
tors to the child chaims could leverage randomization to distribute
the failing nodes between V1 and V2 according to the ratio α1 : α2, so
778Mitosis: Practically Scaling Permissioned Blockchains
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
that the failure ratios are preserved with high probability. Compared
to a deterministic assignment scheme, using randomization allows
to tolerate a higher number faults in C, at the price of providing
probabilistic security guarantees. We analyse sufficient conditions
for the security of chain division under a randomized assignment
scheme in Section 4. Crucially, in the case of malicious nodes con-
trolled by an attacker, the scheme must also prevent Byzantine
nodes from biasing the randomness used—to prevent the attacker
from influencing the selection of validators and gather all of its
nodes in one chain (we call this a “Byzantine gathering”). One
such robust assignment scheme could rank validators based on
publicly available randomness extracted from the blockchain, e.g.,
by cryptographically hashing each validators’ identifier with recent
blockchain content.
3.5 Cross-chain Communication
So far, we discussed the relevant routines to manage the various
chains in the system, at the blockchain level, which only involve the
validators maintaining the platform. In the sequel, we discuss the
services provided by Mitosis to clients. Besides standard transaction
processing within one chain, our system support the communica-
tion between different chains, thereby letting clients issue cross-
chain transactions. Concretely, we provide two smart-contract func-
tionalities that clients can use to communicate with (the clients of)
other chains: transfer of knowledge and transfer of asset.
Transfer of Knowledge (ToK). This functionality allows proving a
statement, defined through a predicate P, about a given blockchain.
The predicate can be evaluated on a source chain Cs using local
information, and is then shown to be correct on a target chain Ct .
The ToK protocol is run between two participants, a client P that
acts as a prover, and a third party (another client or a blockchain) in
the role of a verifier V. It is defined by the following two algorithms:
(1) ToK.GenerateProof(P, τ), which receives as input a predi-
cate P and a tag τ, and returns a valid proof π if the predicate
is true, otherwise it returns an error ⊥;
(2) ToK.VerifyProof(π , τ), which receives as input a proof π, a
tag τ, and returns a verdict v ∈ {0, 1} about the validity of
the proof.
The protocol is as follows: P retrieves a freshness tag τ from V
and invokes ToK.GenerateProof(P, τ) for a pre-established predi-
cate P. If this invocation returns an error, the transfer of knowledge
fails—either the predicate is incorrect, or it requires information
which is unavailable to P. Otherwise, a proof π for the validity
of P is generated, hence P can forward π to V. The verifier fi-
nally invokes ToK.VerifyProof(π , τ) to validate the provided proof.
A negative outcome means that either the predicate is not valid
(specifically: no valid quorum in chain Cs has signed the predicate)
or it is not fresh (i.e., the tag is no longer valid).
Transfer of Asset (ToA). This functionality enables the transfer
of a given asset from one chain to another. We build ToA based
on Transfer of Knowledge, using an additional locking mechanism.
We define ToA through the following algorithms:
(1) ToA.Lock(a, At , Ct), which locks an asset a (on source chain
Cs) so that it can be later retrieved on target chain Ct by
address At . Invoking this function makes the asset temporar-
ily unavailable in chain Cs, until the transfer is resolved. A
successful call to ToA.Lock triggers a transfer of knowledge
about the inclusion of a lock transaction in chain Cs, and it
generates a proof πlock that the asset has been locked.
(2) ToA.Claim(πlock), which verifies the proof πlock and, if the
proof is valid, it creates the associated asset in chain Ct
and links it to address At . Regardless of whether the proof
is valid or not (i.e., the verdict is either v = 1 or v = 0),
the corresponding transaction along with v is recorded into
chain Ct . A ToK returns a proof πclaim in case of success, or
a proof πabort if the claim has failed.
(3) ToA.Resolve(π), which completes the ToA process by either
rolling back the locking in case of abort (π = πabort), or
deleting the locked asset in Cs (if π = πclaim). Invalid proofs
are discarded, and do not change the state of the locked asset.
We will describe how to integrate the two functionalities just
described within existing permissioned blockchains in Section 5.
4 SECURITY ANALYSIS
In this section, we analyse the security of Mitosis for the case
of a randomized assignment of validators, identifying sufficient
conditions for preventing gatherings of faulty nodes (cf. Section 3.4).
Specifically, we determine how many faulty participants can be
tolerated in the parent chain to ensure that violations of the security
bounds in the child chains are unlikely.
Let V be the validator set of the parent chain, let |V | = n, and
let V1 and V2 denote the validator sets of the derived child chains,
with ni = |Vi|.
Let f denote the number of faulty nodes in V . We assume that
the number of faulty participants in the parent chain is bounded