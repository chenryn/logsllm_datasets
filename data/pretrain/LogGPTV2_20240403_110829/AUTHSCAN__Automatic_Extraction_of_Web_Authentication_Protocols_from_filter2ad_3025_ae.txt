most widely used incarnations of the OAuth 2.0 published
by Facebook. We test two SP web sites using this protocol.
The experiments are conducted on the basis of client-side
JavaScript code and HTTP messages. AUTHSCAN infers
the general protocol speciﬁcation successfully.
Windows Live ID. Windows Live Messenger Connect [6]
is another SSO protocol derived from the general OAuth
2.0 speciﬁcation. We test its implementation using the Sina
Weibo service—a China-based web site similar to Twitter
and has over 300 million users. AUTHSCAN successfully
extracts the protocol from this implementation; we skip the
protocol diagram (which is similar to Facebook Connect)
for the sake of space.
Standalone Web Sites. We also test two standalone sites,
where users share deeply personal information, both of
which have from hundreds of thousands to millions of users
and utilize custom authorization mechanisms. AUTHSCAN
uncovers the custom authentication protocol for both sites.
6.2 Protocol Analysis and Vulnerabilities
We test AUTHSCAN on 8 implementations (as shown in
Table 2). We successfully ﬁnd 7 security vulnerabilities, all
of which we have responsibly disclosed to the developers
of the web sites. For the sake of space, we leave the details
on how AUTHSCAN extracts protocol speciﬁcation to Ap-
pendix B.1; and in this section, we brieﬂy present the found
vulnerabilities in the protocol implementations.
Setup.
AUTHSCAN include:
In our experiment, the input and conﬁguration to
• Test harness. The security analyst is required to input
two pre-registered user accounts (for example, email
and password in BrowserID), except for the Iyer-
Matrimony case in which ﬁve are needed.
Table 2: Statistics in our experiments
Column 2: ratio of messages ﬁltered out by AUTHSCAN w.r.t. the total number of messages occurred in the protocol; Column 3: ratio of parameters ﬁltered
out by AUTHSCAN w.r.t. the total number of parameters used in the messages; Column 4: total execution time of AUTHSCAN; Column 5: veriﬁcation time
of running ProVerif without and with ﬁltering of the messages or HTTP data, under the network attacker, where “-” means nontermination in veriﬁcation;
Column 6: number of rounds; Column 7: number of bugs found in each web site (with repeats); there are 7 distinct (without over-counting) vulnerabilities.
Web Sites
% Redundant
Msgs (Total Msgs)
88% (80)
myfavoritebeer.com
82% (93)
openphoto.me
87% (127)
developer.mozilla.org
72% (58)
ebayclassiﬁeds.com
97% (290)
familybuilder.com
97% (176)
weibo.com
iyermatrimony.com
98% (120)
meetingmillionaires.com 96% (54)
% Redundant
Elems (Total Elems)
50% (12)
75% (24)
74% (23)
57% (152)
51% (144)
98% (52)
67% (9)
0% (5)
Time(s)
113
72
96
127a
110a
30
5.33
4.72
Veriﬁcation Time (s)
WO (W Filter) Filter
204/3.0
726/3.0
-/3.0
-/58.7
-/58.7
0.36/0.03
1.14/0.04
1.05/0.04
Fuzzing
Rounds
20
22
28
107
77
78
510
30
#Bugs
2
2
0
2
1
1
1
1
a The period that AUTHSCAN halts until Facebook allows to resume fuzzing is not taken into account.
respectively).
• Protocol principals & public keys. For the SSO im-
plementation (including BrowserID, Facebook Con-
nect and Windows Live ID),
the analyst needs
IDP and SP (for exam-
to indicate domains of
persona.org and
ple,
in BrowserID case,
myfavoritebeer.org,
For the
standalone web sites, the analyst needs to indicate the
domains of the tested sites. In both cases, the public
keys of the participants need to be provided if HTTPS
is used in the implementation.
• Oracle. The analyst needs to provide an indication to
represent the successful authentication. In our experi-
ments, we provide unique strings on the response web-
page from the server such as “welcome user” to iden-
tify if the authentication succeeds.
• Cryptographic functions. We manually annotate
the cryptographic functions in the Crypto library of
Node.js [4], for AUTHSCAN to identify the crypto-
graphic functions. We also annotate the functions in
Mozilla jwcrypto [9], which is used in the implemen-
tation of BrowserID. AUTHSCAN automatically infers
cryptographic operations using its default method in
all other case studies.
For all cases, AUTHSCAN checks the authentication of
the protocol and secrecy of the terms used for authentica-
tion (such as the assertion in BrowserID, which is discussed
later in this section). These properties are checked against
the network attacker as well as the web attacker.
Replay Attack in BrowserID. In two tested implemen-
tations of BrowserID, which use persona.org as IDP,
AUTHSCAN identiﬁes and generates a conﬁrmed replay at-
tack in the network attacker model. AUTHSCAN generates
an attack HTTP trace in which a malicious user logs into the
SP by replaying the token named assertion (message (7) in
Figure 6), without providing login credentials to the IDP.
The ﬂaw leading to this attack is that the assertion is sent
through an insecure channel (HTTP) and it does not contain
any session-speciﬁc nonce. We recorded a video to demon-
strate that the attack works and proposed to add a nonce in
the signature to solve this problem [1]. We have notiﬁed
Mozilla about our ﬁnding and Mozilla acknowledged the
security ﬂaw.
CSRF Attack in BrowserID. AUTHSCAN identiﬁes
and conﬁrms a replay attack in the web attacker
model. AUTHSCAN reports this attack on two of the
BrowserID implementations, other than the one from
developer.mozilla.org. We have responsibly no-
tiﬁed the vendors of these vulnerable implementations.
After manual analysis of the inferred protocols, we ﬁnd
one crucial difference between the vulnerable implementa-
tions from the developer.mozilla.org implementa-
tion.
In the latter, SP client sends two anti-CSRF tokens
(csrfmiddlewaretoken and next which are inferred
as nonces) in step 7 (Figure 6), but these are absent from
the protocol schema of the vulnerable SPs implementation,
permitting a CSRF attack. AUTHSCAN reports that a ma-
licious web site can send an HTTP POST request to the
vulnerable SPs, which do not check the Referrer ﬁelds. Us-
ing this knowledge, we craft a script which can be used by
the attacker to modify the content on the web pages without
Alice’s approval. The attack script is listed in Appendix D.
Secret Token Leak in Facebook Connect. By following a
similar procedure as illustrated in the case of BrowserID,
AUTHSCAN ﬁnds one conﬁrmed ﬂaw in the implemen-
tation of Facebook Connect, and another one in the us-
age of Facebook Connect by one out of the two SPs we
tested. Both attacks leak secret tokens in the network at-
tacker model. In this case, we report that automatic fuzzing
was initially difﬁcult because Facebook blocks login failure
for a test username/password after 10 attempts. For this,
we manually skipped fuzzing the initial login request to the
IDP, but tested the remaining protocol with the SPs.
In the implementation of Facebook Connect, most of the
communications are through HTTPS to prevent network at-
tackers from stealing the authorization tokens. However,
AUTHSCAN reports that the message at step 4 of Figure 6-
(b) is readable to the network attackers because they are
transmitted through a non-HTTPS channel, so two creden-
tials c_user and xs can be obtained by the attacker. Thus,
the protocol is subject to a replay attack similar to the one in
BrowserID. After our experiments, we discover that a simi-
lar attack against the previous version of Facebook Connect
has been reported by Miculan et al. recently [33]. We con-
ducted our tests in the end of April 2012; Facebook ﬁxed
this ﬂaw in early May 2012 before we were able to notify
them. In Facebook’s latest implementation6, the commu-
nication in this step is protected with HTTPS. We provide
the HTTP/HTTPS messages captured during the execution
of the old version to facilitate further analysis, which can
be downloaded from [1]. AUTHSCAN ﬁnds the other ﬂaw
leading to replay attack when an SP called EbayClassiﬁeds
uses the Facebook Connect. After completing the Facebook
Connect, the SP sends the user credentials which can be
used to fetch session cookies. However, the credential is
also sent through a non-HTTPS channel.
Non-secret Token in Using Windows Live ID. We tested
AUTHSCAN on the authentication mechanism of Sina
Weibo, a web site with 300 million users.
It uses Win-
dows Live ID to authenticate users. AUTHSCAN initially
reported a security warning claiming that a long-lived to-
ken (non-nonce value) is used to authenticate the user.
We subsequently manually investigated this warning, and
found that the long-lived token (named msn cid) reported
by AUTHSCAN is known publicly. For example, it can
be obtained from various sources such as straight from
the MSN user proﬁle page (https://profile.live.
com/cid-xxxx). When we added this token to the at-
tacker’s knowledge set and re-ran the experiment, AUTH-
SCAN was able to automatically generate an attack trace.
This ﬂow occurs after a user completes the authenti-
cation with Windows Live ID, which demonstrates that
AUTHSCAN is useful for ﬁnding simple, but severe logic
ﬂaws beyond the initial SSO authentication token exchange.
Note that manually ﬁnding these attacks is not easy; AUTH-
SCAN eliminated 18 redundant cookies with differential
fuzzing. The ﬁnal HTTP packet which is sent from user to
Weibo web site for authentication, as constructed by AUTH-
SCAN, sets the msn cid value to the publicly known value
as shown below.
GET /msn/bind.php HTTP/1.1
Host: www.weibo.com
Connection: keep-alive
Cookie: msn_cid=xxxx
This vulnerability impacts all Weibo users who have ever
logged in Weibo through Windows Live Messenger. We
have reported this security ﬂaw to Sina Weibo. The secu-
rity department of Sina R&D has conﬁrmed the exploit and
posted us a gift for our contribution [1].
6https://s-static.ak.facebook.com/connect/xd arbiter.php?version=9
Guessable Token in Standalone Sites. AUTHSCAN de-
tects one severe vulnerability in each of the two stan-
dalone web sites: IyerMatrimony and MeetingMillionar-
ies. Both of them have a signiﬁcant number of registered
users, 220,000 and 1,275,000, respectively. The vulnerabil-
ity shows that both of these two web sites authenticate users
by some guessable token. Exploiting these vulnerabilities,
the attacker can log into others’ accounts and get full privi-
lege of the victim users.
In the case of IyerMatrimony, after eliminating 7 redun-
dant HTTP parameters with differential fuzzing, AUTH-
SCAN gets the following packet which can be used for a
successful authentication.
http://www.iyermatrimony.com/login/
intermediatelogin.php?sde=U1ZsU01UZ3dOVE01
&sds=QdR.j/ZJEX./A&sdss=Tf/GpQpvtzuEs
Through differential fuzzing, AUTHSCAN ﬁnds that sds
and sdss keep constant among different accounts’ multi-
ple login sessions; for an individual account, the sde re-
mains the same in its multiple sessions. Among the test
accounts, AUTHSCAN ﬁnds that the 14-character preﬁx of
sde remains constant and only the 2-character postﬁx is in-
cremented by one across accounts whose IDs are consecu-
tive numbers. AUTHSCAN conﬁrms this ﬂaw by predicting
the value of sde for our testing accounts and successfully
logging into the account.
In the MeetingMillionaries case study, AUTHSCAN gen-
erates a security warning about a short-length token used
for authentication. We manually conﬁrmed that this warn-
ing is a security ﬂaw and notiﬁed the developers. In this site,
a user can access his account information (including pass-
word stored in plain text) by visiting the following URL.
http://app.icontact.com/icp/mmail-mprofile.pl?
r=36958596&l=2601&s=21DS&m=318326&c=752641
AUTHSCAN ﬁnds l, m and c are constant among different
users’ sessions and r is associated with the user account.
s is the only credential but due to its short length (4 char-
acters), AUTHSCAN raises a warning of guessable token.
Upon our manual investigation, we ﬁnd that s is an alpha-
numeric string. We believe that automating attack genera-
tion for such tokens may be possible in the future; we tested
that AUTHSCAN can send about 500 requests to the server
within one minute. With such capability, it would take an
enhanced implementation of AUTHSCAN at most 56 hours
to guess the right s.
6.3 Efﬁciency & Running Time
Running Time. The total analysis time for most cases is
less than 2 minutes, and can be as low as 5 seconds. The