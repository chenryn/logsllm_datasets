pact of variations.
Figure 11. Performance obtained by operating the Issue Queue in
the two modes in a MeD microarchitecture. The average values
show that this might not be an effective solution given the perfor(cid:173)
mance loss incurred.
Despite all the proposed optimizations for avoiding stalls
due to slow entries, there can be scenarios where the pipeline
has to be stalled to accommodate the operation of slow entries.
Figure 12 demonstrates how stalling is accomplished due to
different issue queue activities. What makes the problem un(cid:173)
der investigation non-trivial is the fact that an instruction could
stall the pipeline when (1) its opcode write during dispatch is
slow, or (2) its operand read during an issue read is slow. Thus,
the stall logic should keep track of these factors.
(A) Dispatch Stall
Enable
SOT
Slow Entry
(C) Forwarding Stall
Figure 12. Implementation of the stall logic in the different issue
queue operations.
For the dispatch stage, we identify whether stalling is
needed once renaming is done. Operand availability is passed
from the renaming stage to the alloc stage. Since the al(cid:173)
loc stage knows the port availability and speed of operation
for different entries, it decides whether the next set of instruc(cid:173)
tions need to be stalled. The logic required for stalling the de(cid:173)
code stage is already present in a conventional pipeline when
entries in ROB, issue queue or load/store queue are not avail(cid:173)
able. In the issue stage, the conventional select logic already
keeps track of port availability which it uses for selecting in(cid:173)
structions to issue. For slow issue reads, the specific ports
would not be available for an additional cycle.
Forwarding stalls are handled using SOT. For handling the
stall signals in the execution units, we use the implementation
proposed by Hans Jacobson [17], called Elastic Synchronous
Pipeline, which uses the ability of master/slave latches to store
two distinct values under stall conditions, while storing only
one data element under normal operation.
Figure 13 shows a time-line incorporating all our mecha(cid:173)
nisms. The figure clearly indicates that our solutions are mostly
not on the critical path and in places they are, appropriate
pipeline modifications have been made.
1-4244-2398-9/08/$20.00 ©2008 IEEE
18
DSN 2008: Soundararajan et al.
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
SOT Fill
Time
Cony. select
Logic
SOT value
Required
~~~:~~
Figure 13. Time-line of our mechanisms and ,;ri:fiCYhandling at
cycle-level granularity. Here 't' refers to a cycle. The cycles are not
drawn to scale.
7.2. Variation testing methodology
Built in self tests (BIST) aware of variations are gaining im(cid:173)
portance. Variation-aware testing strategies evolved for identi(cid:173)
fying slow SRAM entries hold good for identifying slow is(cid:173)
sue queue entries as well [29, 2]. Also works like [5] look at
identifying the target gates that are variation-affected and pro(cid:173)
pose techniques to generate test patterns. These methodologies
can be applied for the variation-affected issue queue to obtain
maximum performance. Since the different activities associated
with the issue queue have varying operation speeds with respect
to an entry, this information is maintained at different stages
of pipeline for effective operation. Issue queue BIST identi(cid:173)
fies the 400/0 of entries that are affected by variations and hence
are slow. Using this information in the Alloc stage would en(cid:173)
able the steering schemes to operate. Further, by identifying
the port-speed information with respect to the different activi(cid:173)
ties we allow instructions to port-switch. Since port-switching
is done both at dispatch and issue, the port-speeds are main(cid:173)
tained in a ROM in both the Alloc logic and the select logic.
8. Related Work
Process variation has been identified as a major hurdle in
the coming technology generations. The International Technol(cid:173)
ogy Roadmap for Semiconductors (ITRS) has shown a lack of
predictability in several aspects of physical design. The inten(cid:173)
sity of this problem is going to be further aggravated as fea(cid:173)
ture sizes diminish. It has been observed that the loss in per(cid:173)
formance due to PV can be equal to the gain by one full tech(cid:173)
nology generation [10]. Bernstein [7] presents a survey of pro(cid:173)
cess variation issues. Unsal et al. [31] classify process varia(cid:173)
tion based on source, granularity, manifestation, design param(cid:173)
eter and aging. The unpredictability in design due to PV man(cid:173)
ifests as both random and systematic variations [3]. Lack of
predictability in timing characteristics leads to a loss in yield.
Strong economic considerations for yield have motivated re(cid:173)
search at both the circuit and architecture levels to address this
problem. PV can also lead to variation in the power consump(cid:173)
tion of circuits. Borkar et al. [9] show that variation in power
consumption can be as high as 20X.
Recent works on process variation have focused on differ(cid:173)
ent components such as the register file [20], cache [2] and
in redesigning latch elements [15]. Our work is concurrent to
[25] which looked at a subset of the issues addressed in this
work. An alternate approach is cycle stealing, which allows a
PV-affected stage to borrow slack from other stages [30, 20].
While cycle-stealing holds lot of promise in designing varia(cid:173)
tion tolerant circuit, it increases the design complexity and ab(cid:173)
sorbing clock jitter and skew becomes difficult [21]. By remov(cid:173)
ing the variations in issue queue, our work enables the slack to
be available for other pipeline stages.
Previous research have looked at breaking the issue queue
into multiple structures to make it more scalable [11]. These
solutions provide multiple queues operating at different speeds
into which instructions are moved based on various conditions.
Note that these solutions are built on the fact that the architect
has design-time knowledge of the relative operating speeds of
entries. The very fact that variations are non-deterministic at
design-time makes our problem unique and challenging. Now
the fast and slow entries have to co-exist and all the activities
must proceed correctly.
Port-switching [20] has been previously studied in the con(cid:173)
text of register file reads. Here we apply it for the multiple is(cid:173)
sue queue activities. Prior works [18, 14] have looked at the
fact that even though the issue queue is designed to support
the worst-case two-operand instructions in all its entries, that
might not always be needed. These solutions use their obser(cid:173)
vations to optimize the energy dissipation due to the wakeup
logic and hence took a performance hit. Our goal, though, is to
reduce the performance impact of the slow entries. Further our
techniques take to account the non-determinism due to varia(cid:173)
tions as well.
9. Conclusion and Future work
The unrelenting march towards diminutive feature sizes in
the deep sub-micron regime has accentuated reliability con(cid:173)
cerns in modem digital designs. Process Variation is an emerg(cid:173)
ing threat that can adversely affect both performance and power
consumption.
The work presented in this paper investigates the effects
of process variation on the issue queue which, to a large ex(cid:173)
tent, determines overall pipeline throughput. Through a de(cid:173)
tailed analysis of all major sub-components, we identify and
quantify the impact ofvariability on the issue queue to be about
20.5% compared to PV-unaffected issue queue. We demon(cid:173)
strate that solutions targeting individual issue queue operations
in isolation are not effective. Hence, we adopt a holistic ap(cid:173)
proach and provide comprehensive solutions that reduce the
impact of variations in all pipeline activities associated with
the issue queue. The proposed solutions cohesively operate the
slower and faster entries of the issue queue in unison, and dy(cid:173)
namically optimizes pipeline stalls bringing down the perfor(cid:173)
mance degradation to a mere 1.3°A>.
As part of our future work, we are investigating the impact
of variations on alternate issue queue designs and the select
logic.
Acknowledgements
We would like to thank the anonymous reviewers whose de(cid:173)
tailed comments helped improve the quality of the paper. This
1-4244-2398-9/08/$20.00 ©2008 IEEE
19
DSN 2008: Soundararajan et al.
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
research was funded partly by SRC's GSRC Focus Center and
NSF grants 0615097, 0621429, 0454123, 0702617.
References
[1] J. Abella, R. Canal, and A. Gonzalez. Power- and complexity(cid:173)
aware issue queue designs. volume 23, pages 50-58. IEEE Com(cid:173)
puter Society, 2003.
[2] A. Agarwal, B. C. Paul, H. Mahmoodi, A. Datta, and K. Roy.
A process-tolerant cache architecture for improved yield in
nanoscale technologies. IEEE Transactions on Very Large Scale
Integration (VLSI) Systems, 13(1):27-38, January 2005.
[3] A. Agarwal, B. C. Paul, S. Mukhopadhyay, and K. Roy. Pro(cid:173)
cess variation in embedded memories: failure analysis and vari(cid:173)
ation aware architecture. Solid-State Circuits, IEEE Journal of,
40:1804-1814,2005.
[4] H. Ananthan, C. H. Kim, and K. Roy. Larger-than-vdd forward
body bias in sub-0.5v nanoscale cmos. In ISLPED '04: Proceed(cid:173)
ings of the 2004 international symposium on Low power elec(cid:173)
tronics and design, pages 8-13. ACM Press, 2004.
[5] D. Arumi-Delgado, R. Rodriguez-Montanes, J. P. de Gyvez, and
G. Gronthoud. Process-variability aware delay fault testing of
"vt and weak-open defects. In ETW '03: Proceedings ofthe 8th
IEEE European Test Workshop, page 85, Washington, DC, USA,
2003. IEEE Computer Society.
[6] M. Bennaser and C. A. Moritz. Power and failure analysis of
In ICECS '06: 13th IEEE
cam cells due to process variations.
International Conference on Electronics, Circuits and Systems,
pages 608 - 611, 2006.
[7] K. Bernstein, D. 1. Frank, A. E. Gattiker, W. Haensch, B. L. Ji,
S. R. Nassif, E. 1. Nowak, D. 1. Pearson, and N. 1. Rohrer. High(cid:173)
performance cmos variability in the 65-nm regime and beyond.
IBM J Res. Dev., 50(4/5):433-449, 2006.
[8] S. Borkar. Microarchitecture and design challenges for gigas(cid:173)
In MICRO 37: Proceedings of the 37th an(cid:173)
cale integration.
nual IEEE/ACM International Symposium on Microarchitecture,
pages 3-3. IEEE Computer Society, 2004.
[9] S. Borkar, T. Karnik, S. Narendra, 1. Tschanz, A. Keshavarzi,
and V. De. Parameter variations and impact on circuits and mi(cid:173)
croarchitecture. In DAC '03: Proceedings ofthe 40th conference
on Design automation, pages 338-342. ACM Press, 2003.
[10] K. Bowman, S. Duvall, and J. Meindl. Impact of die-to-die and
within-die parameter fluctuations on the maximum clock fre(cid:173)
quency distribution for gigascale integration. Solid-State Cir(cid:173)
cuits, IEEE Journal of, 37(2): 183-190, February 2002.
[11] E. Brekelbaum, 1. Rupley, C. Wilkerson, and B. Black. Hierar(cid:173)
In MICRO 35: Proceedings of the
chical scheduling windows.
35th annual ACM/IEEE international symposium on Microar(cid:173)
chitecture, pages 27-36. IEEE Computer Society Press, 2002.
[12] D. Burger and T. Austin. The SimpleScalar Toolset, Version 3.0.
http://www.simplescalar.com.
[13] A. Buyuktosunoglu, A. A. EI-Moursy, and D. H. Albonesi. An
oldest-first selection logic implementation for non-compacting
In 15th Annual IEEE International ASIC/SOC
issue queues.
Conference, pages 31 - 35, 2002.
[14] D. Ernst and T. Austin. Efficient dynamic scheduling through
tag elimination. In ISCA '02: Proceedings ofthe 29th annual in(cid:173)
ternational symposium on Computer architecture, pages 37-46.
IEEE Computer Society, 2002.
[15] D. Ernst, N. S. Kim, S. Das, S. Pant, T. Pham, R. Rao, C. Ziesler,
D. Blaauw, T. Austin, and T. Mudge. Razor: A low-power
pipeline based on circuit-level timing speculation. In Micro Con(cid:173)
ference, December 2003.
[16] K. Ghose. Reducing energy requirements for instruction issue
and dispatch in superscalar microprocessors (poster session). In
ISLPED '00: Proceedings ofthe 2000 international symposium
on Low power electronics and design, pages 231-233. ACM,
2000.
[17] H. M. Jacobson.
Improved clock-gating through transparent
In ISLPED '04: Proceedings of the 2004 interna(cid:173)
pipelining.
tional symposium on Low power electronics and design, pages
26-31. ACM Press, 2004.
I. Kim and M. H. Lipasti. Half-price architecture.
In ISCA
'03: Proceedings ofthe 30th annual international symposium on
Computer architecture, pages 28-38. ACM Press, 2003.
[18]
[19] G. Kucuk, D. Ponomarev, and K. Ghose. Low-complexity re(cid:173)
order buffer architecture. In ICS '02: Proceedings ofthe 16th In(cid:173)
ternational Conference on Supercomputing, pages 57-66. ACM
Press, 2002.
[20] X. Liang and D. Brooks. Mitigating the impact of process vari(cid:173)
In MI(cid:173)
ations on processor register files and execution units.
CRO 39: Proceedings of the 39th Annual IEEE/ACM Interna(cid:173)
tional Symposium on Microarchitecture, pages 504-514. IEEE
Computer Society, 2006.
[21] S.-Z. E. Lin, C. Changfan, Y.-C. Hsu, and F.-S. Tsai. Optimal
time borrowing analysis and timing budgeting optimization for
latch-based designs. ACM Trans. Des. Autom. Electron. Syst.,
7( 1):217-230, 2002.
[22] D. Marculescu and E. Talpes. Variability and energy awareness:
a microarchitecture-level perspective. In DAC '05: Proceedings
ofthe 42nd annual conference on Design automation, pages 11(cid:173)
16. ACM Press, 2005.
[23] A. Mupid, M. Mutyam, N. Vijaykrishnan, Y. Xie, and M. 1. Ir(cid:173)
In ISQED '07: 8th Inter(cid:173)
win. Variation analysis of cam cells.
national Symposium on Quality ofElectronic Design, pages 333
- 338. IEEE Computer Society, 2007.
[24] S. Palacharla, N. P. Jouppi, and 1. E. Smith. Complexity-effective
superscalar processors. In SIGARCH Comput. Archit. News, vol(cid:173)
ume 25, pages 206-218. ACM Press, 1997.
[25] K. Raghavendra and M. Mutyam. Process variation aware issue
In DATE '08: Proceedings of the conference on
queue design.
Design, automation and test in Europe, 2008.
[26] G. Semeraro, D. H. Albonesi, S. G. Dropsho, G. Magklis,
S. Dwarkadas, and M. L. Scott. Dynamic frequency and volt(cid:173)
age control for a multiple clock domain microarchitecture.
In
MICRO 35: Proceedings ofthe 35th annual ACM/IEEE interna(cid:173)
tional symposium on Microarchitecture, pages 356-367. IEEE
Computer Society Press, 2002.
[27] J. Shen and M. Lipasti. Modern Processor Design: Fundamen(cid:173)
tals of Superscalar Processors (Beta Edition). McGraw Hill,
2003.
[28] T. Sherwood, E. Perelman, G. Hamerly, and B. Calder. Auto(cid:173)
matically characterizing large scale program behavior. SIGOPS
Oper. Syst. Rev., 36(5):45-57, 2002.
[29] M. Tehranipour, Z. Navabi, and S. Falkhrai. An efficient bist
method for testing of embedded srams. In Proceedings ofIEEE
International Symposium on Circuits and Systems, 2001.
[30] A. Tiwari, S. R. Sarangi, and 1. Torrellas. Recycle: Pipeline
In ISCA '07: Proceed(cid:173)
adaptation to tolerate process variation.
ings of the 30th annual international symposium on Computer
architecture, 2007.
1-4244-2398-9/08/$20.00 ©2008 IEEE
20
DSN 2008: Soundararajan et al.
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
[31] O. S. Unsal, 1. W. Tschanz, K. Bowman, V. De, X. Vera, A. Gon(cid:173)
zalez, and O. Ergin. Impact of parameter variations on circuits
and microarchitecture. IEEE Micro, 26(6):30-39, 2006.
[32] W. Zhao and Y. Cao. New generation of predictive technology
model for sub-45nm design exploration.
In ISQED '06: Pro(cid:173)
ceedings of the 7th International Symposium on Quality Elec(cid:173)
tronic Design, pages 585-590. IEEE Computer Society, 2006.
1-4244-2398-9/08/$20.00 ©2008 IEEE
21
DSN 2008: Soundararajan et al.