### Impact of Variations

**Figure 11.** Performance comparison of the Issue Queue operating in two modes within a MeD microarchitecture. The average values indicate that this approach may not be effective due to the performance loss incurred.

Despite the proposed optimizations to avoid stalls caused by slow entries, there are still scenarios where the pipeline must be stalled to accommodate these slow entries. **Figure 12** illustrates how stalling is managed based on different issue queue activities. The problem under investigation is non-trivial because an instruction can stall the pipeline if:
1. Its opcode write during dispatch is slow.
2. Its operand read during an issue read is slow.

Thus, the stall logic must account for these factors.

### Stall Logic Implementation

**Figure 12.** Implementation of the stall logic for various issue queue operations.

#### Dispatch Stage
- **Stall Enablement:** After renaming, we determine whether stalling is necessary. Operand availability is passed from the renaming stage to the allocation (alloc) stage.
- **Allocation Stage:** The alloc stage, which has knowledge of port availability and the speed of operation for different entries, decides whether the next set of instructions should be stalled.
- **Conventional Pipeline Logic:** The logic required for stalling the decode stage is already present in a conventional pipeline when entries in the Reorder Buffer (ROB), issue queue, or load/store queue are unavailable. In the issue stage, the conventional select logic keeps track of port availability to select instructions for issuance. For slow issue reads, specific ports would be unavailable for an additional cycle.

#### Forwarding Stalls
- **SOT (Set of Three) Mechanism:** Forwarding stalls are handled using SOT. For managing stall signals in execution units, we use the Elastic Synchronous Pipeline implementation proposed by Hans Jacobson [17], which leverages master/slave latches to store two distinct values under stall conditions, while storing only one data element under normal operation.

**Figure 13.** A timeline incorporating all our mechanisms, clearly indicating that our solutions are mostly not on the critical path. Where they are, appropriate pipeline modifications have been made.

### Variation Testing Methodology

Built-in self-tests (BIST) that are aware of variations are becoming increasingly important. Variation-aware testing strategies developed for identifying slow SRAM entries are also effective for identifying slow issue queue entries [29, 2]. Works like [5] focus on identifying variation-affected target gates and propose techniques to generate test patterns. These methodologies can be applied to the variation-affected issue queue to maximize performance. Since different issue queue activities have varying operation speeds with respect to an entry, this information is maintained at different pipeline stages for effective operation.

- **Issue Queue BIST:** Identifies 40% of entries affected by variations and thus are slow. Using this information in the Alloc stage enables steering schemes to operate.
- **Port-Speed Information:** By identifying port-speed information for different activities, we allow instructions to switch ports. Port switching is done both at dispatch and issue, and the port-speeds are maintained in a ROM in both the Alloc logic and the select logic.

### Related Work

Process variation is a major challenge in upcoming technology generations. The International Technology Roadmap for Semiconductors (ITRS) highlights a lack of predictability in several aspects of physical design. As feature sizes diminish, the intensity of this problem will increase. It has been observed that the performance loss due to process variation (PV) can be equivalent to the gain from one full technology generation [10]. Bernstein [7] provides a survey of process variation issues, and Unsal et al. [31] classify process variation based on source, granularity, manifestation, design parameter, and aging. The unpredictability in design due to PV manifests as both random and systematic variations [3], leading to a loss in yield. Economic considerations for yield have motivated research at both the circuit and architecture levels to address this problem. PV can also lead to significant variations in power consumption, with variations as high as 20X [9].

Recent works on process variation have focused on different components such as the register file [20], cache [2], and redesigning latch elements [15]. Our work is concurrent with [25], which addresses a subset of the issues. An alternative approach is cycle stealing, which allows a PV-affected stage to borrow slack from other stages [30, 20]. While cycle-stealing holds promise, it increases design complexity and makes absorbing clock jitter and skew difficult [21]. By mitigating variations in the issue queue, our work frees up slack for other pipeline stages.

Previous research has explored breaking the issue queue into multiple structures to improve scalability [11]. These solutions provide multiple queues operating at different speeds, with instructions moved based on various conditions. However, these solutions assume design-time knowledge of the relative operating speeds of entries, which is not feasible given the non-deterministic nature of variations. Our goal is to reduce the performance impact of slow entries while accounting for the non-determinism due to variations.

Port-switching [20] has been previously studied in the context of register file reads. We apply it to multiple issue queue activities. Prior works [18, 14] have noted that the issue queue is designed to support worst-case two-operand instructions, which might not always be necessary. These solutions optimize energy dissipation but take a performance hit. Our goal is to minimize the performance impact of slow entries.

### Conclusion and Future Work

The relentless drive towards smaller feature sizes in the deep sub-micron regime has heightened reliability concerns in modern digital designs. Process variation is an emerging threat that can adversely affect both performance and power consumption.

This paper investigates the effects of process variation on the issue queue, which significantly influences overall pipeline throughput. Through a detailed analysis of all major sub-components, we identify and quantify the impact of variability on the issue queue to be about 20.5% compared to a PV-unaffected issue queue. We demonstrate that solutions targeting individual issue queue operations in isolation are not effective. Therefore, we adopt a holistic approach and provide comprehensive solutions that reduce the impact of variations in all pipeline activities associated with the issue queue. The proposed solutions cohesively manage slower and faster entries, dynamically optimizing pipeline stalls and reducing performance degradation to just 1.3%.

As part of our future work, we are investigating the impact of variations on alternate issue queue designs and the select logic.

### Acknowledgements

We would like to thank the anonymous reviewers whose detailed comments helped improve the quality of the paper. This research was funded partly by SRC's GSRC Focus Center and NSF grants 0615097, 0621429, 0454123, 0702617.

### References

[1] J. Abella, R. Canal, and A. Gonzalez. Power- and complexity-aware issue queue designs. IEEE Computer Society, 2003.

[2] A. Agarwal, B. C. Paul, H. Mahmoodi, A. Datta, and K. Roy. A process-tolerant cache architecture for improved yield in nanoscale technologies. IEEE Transactions on Very Large Scale Integration (VLSI) Systems, 13(1):27-38, January 2005.

[3] A. Agarwal, B. C. Paul, S. Mukhopadhyay, and K. Roy. Process variation in embedded memories: failure analysis and variation-aware architecture. IEEE Journal of Solid-State Circuits, 40:1804-1814, 2005.

[4] H. Ananthan, C. H. Kim, and K. Roy. Larger-than-Vdd forward body bias in sub-0.5V nanoscale CMOS. ISLPED '04, ACM Press, 2004.

[5] D. Arumi-Delgado, R. Rodriguez-Montanes, J. P. de Gyvez, and G. Gronthoud. Process-variability aware delay fault testing of "vt" and weak-open defects. ETW '03, IEEE Computer Society, 2003.

[6] M. Bennaser and C. A. Moritz. Power and failure analysis of CAM cells due to process variations. ICECS '06, 2006.

[7] K. Bernstein, D. J. Frank, A. E. Gattiker, W. Haensch, B. L. Ji, S. R. Nassif, E. J. Nowak, D. J. Pearson, and N. J. Rohrer. High-performance CMOS variability in the 65-nm regime and beyond. IBM J Res. Dev., 50(4/5):433-449, 2006.

[8] S. Borkar. Microarchitecture and design challenges for gigascale integration. MICRO 37, IEEE Computer Society, 2004.

[9] S. Borkar, T. Karnik, S. Narendra, J. Tschanz, A. Keshavarzi, and V. De. Parameter variations and impact on circuits and microarchitecture. DAC '03, ACM Press, 2003.

[10] K. Bowman, S. Duvall, and J. Meindl. Impact of die-to-die and within-die parameter fluctuations on the maximum clock frequency distribution for gigascale integration. IEEE Journal of Solid-State Circuits, 37(2):183-190, February 2002.

[11] E. Brekelbaum, J. Rupley, C. Wilkerson, and B. Black. Hierarchical scheduling windows. MICRO 35, IEEE Computer Society Press, 2002.

[12] D. Burger and T. Austin. The SimpleScalar Toolset, Version 3.0. http://www.simplescalar.com.

[13] A. Buyuktosunoglu, A. A. El-Moursy, and D. H. Albonesi. An oldest-first selection logic implementation for non-compacting issue queues. 15th Annual IEEE International ASIC/SOC Conference, 2002.

[14] D. Ernst and T. Austin. Efficient dynamic scheduling through tag elimination. ISCA '02, IEEE Computer Society, 2002.

[15] D. Ernst, N. S. Kim, S. Das, S. Pant, T. Pham, R. Rao, C. Ziesler, D. Blaauw, T. Austin, and T. Mudge. Razor: A low-power pipeline based on circuit-level timing speculation. Micro Conference, December 2003.

[16] K. Ghose. Reducing energy requirements for instruction issue and dispatch in superscalar microprocessors (poster session). ISLPED '00, ACM, 2000.

[17] H. M. Jacobson. Improved clock-gating through transparent pipelining. ISLPED '04, ACM Press, 2004.

[18] I. Kim and M. H. Lipasti. Half-price architecture. ISCA '03, ACM Press, 2003.

[19] G. Kucuk, D. Ponomarev, and K. Ghose. Low-complexity re-order buffer architecture. ICS '02, ACM Press, 2002.

[20] X. Liang and D. Brooks. Mitigating the impact of process variations on processor register files and execution units. MICRO 39, IEEE Computer Society, 2006.

[21] S.-Z. E. Lin, C. Changfan, Y.-C. Hsu, and F.-S. Tsai. Optimal time borrowing analysis and timing budgeting optimization for latch-based designs. ACM Trans. Des. Autom. Electron. Syst., 7(1):217-230, 2002.

[22] D. Marculescu and E. Talpes. Variability and energy awareness: a microarchitecture-level perspective. DAC '05, ACM Press, 2005.

[23] A. Mupid, M. Mutyam, N. Vijaykrishnan, Y. Xie, and M. J. Irwin. Variation analysis of CAM cells. ISQED '07, IEEE Computer Society, 2007.

[24] S. Palacharla, N. P. Jouppi, and J. E. Smith. Complexity-effective superscalar processors. SIGARCH Comput. Archit. News, 25, ACM Press, 1997.

[25] K. Raghavendra and M. Mutyam. Process variation aware issue queue design. DATE '08, 2008.

[26] G. Semeraro, D. H. Albonesi, S. G. Dropsho, G. Magklis, S. Dwarkadas, and M. L. Scott. Dynamic frequency and voltage control for a multiple clock domain microarchitecture. MICRO 35, IEEE Computer Society Press, 2002.

[27] J. Shen and M. Lipasti. Modern Processor Design: Fundamentals of Superscalar Processors (Beta Edition). McGraw Hill, 2003.

[28] T. Sherwood, E. Perelman, G. Hamerly, and B. Calder. Automatically characterizing large scale program behavior. SIGOPS Oper. Syst. Rev., 36(5):45-57, 2002.

[29] M. Tehranipour, Z. Navabi, and S. Falkhrai. An efficient BIST method for testing of embedded SRAMs. Proceedings of IEEE International Symposium on Circuits and Systems, 2001.

[30] A. Tiwari, S. R. Sarangi, and J. Torrellas. Recycle: Pipeline adaptation to tolerate process variation. ISCA '07, 2007.

[31] O. S. Unsal, J. W. Tschanz, K. Bowman, V. De, X. Vera, A. Gonzalez, and O. Ergin. Impact of parameter variations on circuits and microarchitecture. IEEE Micro, 26(6):30-39, 2006.

[32] W. Zhao and Y. Cao. New generation of predictive technology model for sub-45nm design exploration. ISQED '06, IEEE Computer Society, 2006.