# Content-based Isolation: Rethinking Isolation Policy Design on Client Systems

**Authors:**
- Alexander Moshchuk, Microsoft Research, Redmond, WA, USA
- Helen J. Wang, Microsoft Research, Redmond, WA, USA
- Yunxin Liu, Microsoft Research Asia, Beijing, China

## Abstract
Modern client platforms, such as iOS, Android, Windows Phone, and Windows 8, have evolved from a per-user isolation policy, where all of a userâ€™s applications run in the same isolation container, to an application isolation policy, where different applications are isolated from one another. However, this is insufficient because mutually distrusting content within a single application can still interfere with each other. For example, a malicious image could compromise a photo editor and steal other images processed by the editor.

In this paper, we propose a content-based principal model, where the operating system (OS) treats content owners as principals and isolates content from different owners. Our key contribution is generalizing the content-based principal model, which is already used in web browsers (e.g., the same-origin policy), into an isolation policy suitable for all applications. The main challenge is to support flexible isolation granularities while maintaining compatibility with the web. We present the design, implementation, and evaluation of our prototype system, ServiceOS, which addresses this challenge.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection

## Keywords
Web browsers, same-origin policy, isolation

## 1. Introduction
Much research has focused on developing robust isolation mechanisms [38, 33, 29, 3, 53, 12, 17] for operating systems. However, little attention has been given to the dual problem: isolation policies, which determine what should be placed in isolation containers. This paper addresses this gap. Even with perfect isolation containers, an improper isolation policy can render the system insecure.

For instance, traditional desktop operating systems like Windows or Unix treat users as principals and protect user accounts from each other. However, mutually distrusting applications of a single user can interfere with one another, leading to significant malware issues. Modern client platforms, such as iOS and Android, have refined this approach by treating each application code package as a separate principal, running different applications in separate isolation containers. This is still too coarse, as mutually distrusting content within the same application can interfere with each other. For example, if Alice opens a PowerPoint presentation from `http://alice.com/talk.ppt` that embeds a malicious video from `http://attacker.com/advideo.swf`, the attacker can compromise Alice's presentation and other documents rendered by PowerPoint.

Figure 1 illustrates the evolution of isolation policies on client platforms. In this paper, we further refine the isolate-by-code-package policy and advocate for a content-based isolation policy, which places execution instances of mutually distrusting content into separate isolation containers. This offers a fundamentally more secure system, as the impact of any content, including malicious content, is minimized to just the content owner's isolation container. Consequently, there is no need to ask users to determine whether to take the risk of opening any content. Existing applications often prompt users (e.g., "Are you sure you want to open this document?") because fine-grained containment is not available, and risk handling is unreasonably outsourced to the user.

To some extent, the concept of a content-based principal model exists in today's web. All web browsers implement the same-origin policy [41], which prevents web content from different origins (represented by the triple `<scheme, host, port>`) from interfering with each other. Unfortunately, these principals may share the same isolation container in commercial browsers [49]. Recent research browsers, such as Gazelle [49], have proposed separating web site principals into separate isolation containers, fully achieving a content-based principal model for the browser setting.

As modern client platforms (e.g., iOS, Android, Windows Phone, Windows 8) and applications embrace cloud-centric computing, where documents and computing logic reside in the cloud and are cached on client devices, the applicability of a content-based principal model extends beyond the browser. Applications now often process and embed remote content. For example, Microsoft Office 2010 can open remote web documents, PowerPoint 2010 allows embedding YouTube videos, and the Google Cloud Connect [16] plugin enables Office to sync documents with the cloud. These applications effectively become browsers for their own media types, facing similar security challenges as web browsers, namely, isolating mutually distrusting content.

Currently, content isolation is left to individual native applications. For example, Microsoft Office 2010's new Protected View [30] feature provides a sandboxed read-only mode for documents from the Internet, requiring users to explicitly "enable editing" to remove the sandbox and its restrictions. Adobe Reader recently introduced a similar sandboxing feature [1]. This approach has serious drawbacks. First, the security of a user's cloud data is duplicated and entrusted to all of the user's applications. Attackers need only find one poorly written application to exploit all content it renders. Second, security logic in applications is often mixed with error-prone content processing logic, leading to vulnerabilities not only in browsers and plugins [18, 49, 2] but also in desktop applications. For example, the recent RSA SecurID token compromise [36] affected 20,000 RSA enterprise customers due to a maliciously crafted Excel email attachment, and from 2008-2011, 88% (224) of Microsoft Office vulnerabilities were content parsing flaws exploitable by maliciously crafted documents [34]. Many desktop applications do not offer any isolation for certain remote content, such as PowerPoint 2010, which renders embedded remote videos in the same process without attempting to isolate them, allowing potential Flash vulnerabilities to endanger the PowerPoint application and its documents. Overall, users must endure weak and inconsistent security from applications that process their cloud-backed data.

In this work, we shift the burden of content isolation from applications to the OS. By consolidating content isolation logic in the OS, we reduce the trusted computing base from trusting many applications' isolation logic to trusting just that of the OS. The main contribution of this paper is a general content-based principal model suitable for all applications beyond just browsers. Our design goals are:
1. Flexible isolation, from the granularity of a single addressable document to documents hosted at multiple domains.
2. Compatibility with browsers' isolation policy to prevent attackers from violating browser security from non-browser applications and vice versa.
3. Easy adaptation of native applications.

We present a design that achieves these goals and describe our prototype system, ServiceOS, implemented as a reference monitor between the kernel and applications in Windows. We demonstrate that ServiceOS is practical by successfully adapting several large applications, such as Microsoft Word, Outlook, and Internet Explorer, with a relatively small amount of effort. Our evaluation shows that ServiceOS eliminates a large percentage of existing security vulnerabilities by design and has acceptable overhead. We also demonstrate how ServiceOS contains two working exploits.

The rest of this paper is organized as follows: Section 2 describes our threat model, Section 3 presents our system model, Section 4 defines our system's principals, Section 5 explains how to enforce principal definitions, Section 6 details the implementation of ServiceOS, and Section 7 evaluates ServiceOS and the effort to adapt several native applications. Section 8 discusses related work, and Section 9 concludes the paper.

## 2. Threat Model
Our primary defense is against the content owner attacker, who controls content servers serving malicious data that exploits vulnerabilities. Users may be enticed to access such malicious content through email spam, malvertising, or phishing. The goal of ServiceOS is to minimize the impact of any malicious content by designing the right isolation policy and enforcement mechanisms. Our trusted computing base is the ServiceOS kernel.

We leave it up to content owners to consider network attackers, who may compromise content integrity and confidentiality. A content owner concerned about network attackers should employ end-to-end secure channels (such as TLS) for content transport.

We are not concerned with attackers targeting specific content owners, such as cross-site scripting or cross-site request forgery attacks. These are fundamentally content-specific vulnerabilities that only content owners can fix.

## 3. System Model
A principal is the unit of isolation. Program execution instances with different principal labels are isolated in separate isolation containers. We refer to an execution instance with a principal label as a principal instance (PI).

In ServiceOS, each principal has its own local store. A user may use an online storage service, such as Dropbox or Google Drive. We assume that all user-downloaded content is stored on such services, which is becoming the norm with modern operating systems, with integrations like ChromeOS and Google Drive, Windows 8 and SkyDrive, and OS X and iCloud.

There is no sharing across principals or isolation containers (i.e., no global file systems, unlike today's desktop systems) except through explicit cross-principal communication system APIs, analogous to inter-process communication (IPC).

We have adopted user-driven access control [40] to allow users to share data across isolation boundaries. This is done through authentic user actions on trusted user interfaces (e.g., mouse clicks on a copy button, "save-as" button, or a file picker UI) or gestures like drag-and-drop or Ctrl-V. User-driven access control enables capability-based, least-privilege access, driven by users' natural interactions with applications and the system. We will not discuss it further in this paper and refer interested readers to [40].

For example, Microsoft Word would have its own local store on ServiceOS. A user may launch Word and start editing a new document. The document is auto-saved into Word's own local store. When the user wants to save the document to her Dropbox store (across the isolation boundary), the user clicks on a trusted "save as" button embedded in Word. The click brings up a trusted file picker window. The user then selects Dropbox, specifies the file name, and clicks on the "save" button (also part of the trusted file picker). The system only allows Word to write to a user-specified Dropbox path, but not other parts of Dropbox or other online stores, achieving least-privilege access.

ServiceOS allows a user to have a local store, such as photo or music libraries. We label all content in the userâ€™s local store as the principal "local," separate from all other principals. User-driven access control is the means for the user to get content in or out of the local store.

## 4. Defining Principals
An isolation policy design needs to answer two questions:
1. How execution instances should be labeled, or what defines a principal.
2. How remote content is fetched and dispatched into each principal to comply with the principal definition.

This section presents our design for the former, and the next section addresses the latter.

### 4.1 Execution Instance as a Content Processing Stack
Before presenting our design on labeling execution instances, we first illustrate what constitutes an execution instance.

An execution instance may involve content from different owners. Figure 2 illustrates such an example: a document is rendered by a Java editor application, which runs on a Java Virtual Machine (JVM) that, in turn, is a Win32 program running on Windows. The document, editor, and JVM may belong to different owners: e.g., the document may belong to `alice.com`, the editor to `editor.com`, and the JVM to `oracle.com`. Therefore, we characterize an execution instance as a content-processing stack. Each layer of the stack consists of content owned by some entity and that needs to be addressable (for example, a web document is addressable with a URL, but user input data is not addressable). The content at a layer is consumed and processed by the next lower layer. We refer to layers below the top layer as content processors. For example, plugins in todayâ€™s browsers are treated as content processors in our system.

We do not treat static data content as safer than active code content or content processors, because we want to allow both type-safe and native applications on our system (as is the case for most real-world client systems). Since maliciously-crafted static data can be turned into code by exploiting memory errors in native applications, we treat code and data as equally capable content.

The content-to-processor mapping (e.g., mapping `alice.com`'s document content to the editor) can be configured by the content owner (`alice.com`) or by the user. Todayâ€™s web servers indicate contentâ€™s MIME type using the `Content-Type` header in HTTP responses. Desktop applications can use the same mechanism to convey content types. Additionally, we propose a new `Content-Processor` HTTP header to allow content servers to specify desired content processors by a URL or unique ID. For example, a web server serving `photo.jpg` could send: