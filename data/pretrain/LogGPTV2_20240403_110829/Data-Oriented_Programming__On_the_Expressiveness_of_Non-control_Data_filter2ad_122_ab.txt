971971
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:56 UTC from IEEE Xplore.  Restrictions apply. 
MINDOP language. To simulate (conditional) jump, data-oriented gadget
changes the virtual input pointer (vpc) accordingly.
TABLE II
Semantics
arithmetic / logical
assignment
load
store
jump
conditional jump
Instructions
in C
a op b
a = b
a = *b
*a = b
goto L
if a goto L
Data-Oriented
Gadgets in DOP
*p op *q
*p = *q
*p = **q
**p = *q
vpc = &input
vpc = &input if *p
p – &a; q – &b; op – arithmetic / logical operation
instructions do the attacker’s bidding. In order to give a
concrete and systematic construction, we deﬁne a simple mini-
language called MINDOP with a virtual instruction set and
virtual register operands, in which the attacker’s payload can
be speciﬁed. We show how MINDOP can be simulated by
small snippets of x86 instructions that are abundant in common
real-world programs on Linux, as our empirical evaluation in
Section V conﬁrms. MINDOP is Turing-complete, which we
establish in Section III-D.
The MINDOP language (shown in Table II) has 6 kinds
of virtual
instructions, each operating on virtual register
operands. The ﬁrst four virtual instructions include arithmetic /
logical calculation, assignment, load and store operations. The
last two virtual operations, namely conditional and uncondi-
tional jumps, allow the implementation of control structures
in a MINDOP virtual program. Each virtual operation is
simulated by real x86 instruction sequences available in the
vulnerable program, which we call data-oriented gadgets. The
control structure allows chaining of gadgets, and the x86
code sequences that simulate the virtual control operations
are referred to as gadget dispatchers. None of the gadgets
or dispatchers modify any code-pointers or violate CFI in the
real program execution. We next explain each virtual operation
and show concrete real-world gadgets that simulate them.
B. Data-Oriented Gadgets
Virtual operations in MINDOP are simulated using concrete
x86 instruction sequences in the vulnerable program execution.
Such instruction sequences or gadgets read inputs from and
write outputs to memory locations which simulate virtual
register operands in MINDOP. Hardware registers are not a
judicious choice for simulating virtual registers because the
original program frequently uses hardware registers for its
own computation. Gadgets are scattered in the program logic,
within the legitimate CFG of the program. As a result, between
two gadgets there may be several uninteresting instructions
which may clobber hardware registers and the memory state
in MINDOP
outside of the attacker’s control. Therefore,
we implement virtual registers with carefully-chosen memory
locations (not hardware registers) used only under the control
of gadget operations.
Conceptually, a data-oriented gadget simulates three logical
micro-operations: the load micro-operation, the intended vir-
tual operation’s semantics, and the ﬁnal store micro-operation.
The load micro-operation simulates the read of the virtual
Example data-oriented gadget of addition operation. The ﬁrst row is the C
code of the gadget, and the second row is the corresponding assembly code.
TABLE III
C Code
ASM Code
srv->total += *size;
1 mov (%esi), %ebx
//load micro-op
2 mov 0x4(%edi), %eax //load micro-op
3 add %ebx, %eax
4 mov %eax, 0x4(%edi) //store micro-op
//addition
register operand(s) from memory. The store micro-operation
writes the computation result back to a virtual register. The
operation’s semantics are different for each gadget. A number
of different x86 instruction sequences can sufﬁce to simulate
a virtual operation. The x86 instruction set supports several
memory addressing modes, and as long as the order of the
micro-operations is correct, different sequences can work. As
a concise example, the x86 instruction add %eax, (%ecx)
performs all three micro-operations (load, arithmetic and store)
in a single x86 instruction. We later provide other gadget
implementations as well.
Data-oriented gadgets are similar to code gadgets employed
in return-oriented programming (ROP) [1], or in jump-oriented
programming (JOP) [2]. They are short instruction sequences
and are connected sequentially to achieve the desired function-
ality. However, there are two differences between data-oriented
gadgets and code gadgets. First, data-oriented gadgets require
to deliver operation result with memory. In contrast, code
gadgets can use either memory or register to persist outputs
of a gadget. Second, data-oriented gadgets must execute in
at least one legitimate control ﬂow, and need not execute
immediately one after another. In fact, they can be spread
across several basic blocks or even functions. In contrast, code
gadgets need not execute in any benign control-ﬂow path of the
program, and may even start at invalid instruction boundaries.
Data-oriented gadgets have more stringent requirements than
code gadgets in general. However, we show that such gadgets
exist with examples from real-world applications.
Simulating Arithmetic Operations. Addition and subtraction
can be simulated using a variety of x86 instructions sequences
that we ﬁnd empirically. Table III shows one example of
addition gadget with C and the assembly representation. This
gadget is modeled from the real-world program ProFTPD [28].
In the assembly representation, the code in line 1 and line 2
constitute the load micro-operation. The code in line 3 imple-
ments the addition, and line 4 is the store micro-operation.
With addition over arbitrary values, it is possible to simulate
multiplication efﬁciently if the language supports conditional
jumps. MINDOP supports conditional jumps which allow to
check if a value is smaller / greater than a constant. To see
why this combination is powerful, note that we can compute
the bit-decomposition of a ﬁnite-size integer. To compute the
most signiﬁcant bit of a, we can add a to itself (equivalently
left-shifting it) and conditionally jump based on the carry bit.
Proceeding by repetition, we can obtain the bit-decomposition
of a. With bit-decomposition, simulating a multiplication a·b
reduces to the efﬁcient shift-and-add procedure, adding a to
itself in each step conditioned on the bits in b. Converting a
972972
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:56 UTC from IEEE Xplore.  Restrictions apply. 
Example data-oriented gadget of assignment operation.
TABLE IV
C Code
ASM Code
srv->typ = *type;
1 mov (%esi), %ebx
2 mov %ebx, %eax
3 mov %eax, 0x8(%edi) // store micro-op
// load micro-op
// move
TABLE V
Example data-oriented gadget of dereference operation. The ﬁrst row gives
three examples. The second row shows the assembly code of the ﬁrst one.
C Code
ASM Code
LOAD1: *size = *(srv->cur_max);
LOAD2: memcpy(dst, *src_p, size);
STORE: memcpy(*dst_p, src, size);
(of LOAD1)
1 mov (%esi), %ebx
2 mov (%ebx), %eax
3 mov %eax, (%edi)
// load micro-op
// load
// store micro-op
bit-decomposed value to its integer representation is similarly
a multiply-and-add operation over powers of two. Bit-wise op-
erations are simply arithmetic on the bit-decomposed versions.
Simulating Assignment Operations. In MINDOP, assign-
ment gadgets read data from one memory location and directly
write to another memory location. In this case, we can skip
the load section of the destination operand. The C code and
ASM code of an assignment gadget is shown in Table IV.
Simulating Dereference (Load / Store) Operations. The
load and store instructions in C require memory dereferences,
which take one register as address and visits the memory
location for reading or writing. In data-oriented programming,
registers are simulated by memory,
therefore the memory
dereference is simulated by two memory dereferences: the
ﬁrst memory dereference to simulate the register access, and
a second memory dereference with the ﬁrst dereference result
(the register value) as the address. As shown in Table II,
the memory dereference *b in the load instruction in C is
represented by **q, where q is the address of b, *q is
the value of b, and **q is the ﬁnal memory value *b. A
similar representation is used in the store gadget. We show two
examples of load gadgets and one example of a store gadget in
Table V in C representation, and the assembly representation
of the ﬁrst load gadget. As we can see from the assembly
code, there are still three sections in load / store gadgets, with
the semantics on memory dereference with loaded operands.
C. Gadget Dispatcher
Various gadgets can be chained sequentially by gadget dis-
patchers to enable recursive computation. Gadget dispatchers
are sequences of x86 instructions that equip attackers with the
ability to repeat gadget invocations and, for each invocation,
to selectively activate speciﬁc gadgets. One common sequence
of x86 instructions that can simulate gadget dispatchers is a
loop, which iterates over computation that simulates gadgets
and should have a selector in it. Each iteration executes a
subset of gadgets using outputs from gadgets in the previous
iteration. To direct the outputs of one gadget in iteration i into
the inputs to a gadget in iteration i+1, the selector changes the
load address of iteration i+1 to the store addresses of iteration
i. The selector’s behavior is controlled by attackers through the
memory error. In our running example in Code 2, line 6 and
corruptible by mem-err 
Gadget Dispatcher 
loop 
selector 
gadget1 
gadget2 
gadget3 
gadget4 
gadget1 
gadget5 
gadget2 
gadget3 
…… 
…… 
…… 
round1 
round2 
round3 
…… 
roundN 
Fig. 2. The design model of DOP in MINDOP. The gadget dispatcher
includes a loop and a selector. The loop keeps the program passing by the
selector and various data-oriented gadgets. For each round, the selector is
controlled by the memory error to activate particular data-oriented gadgets.
7 in the loop constitute a dispatcher. The selector on line 7 is
the memory error itself, which repeatedly corrupts the local
variables to setup the execution of gadgets in that iteration. The
corruption is done in a way that it enables only the gadgets of
the attacker’s choice. These gadgets take as input the outputs of
the previous round’s gadget by selectively corrupting operand
pointers. The remaining gadgets may still get executed, but
their inputs and outputs are set up such that they behave
like NOPs (operating on unused memory locations). Figure 2
shows the design model of data-oriented programming in
MINDOP. The left part is the gadget dispatcher inside the
vulnerable program, which is corruptible by the memory error;
the solid gadgets are activated in iteration i and the gray
gadgets are executed like NOPs.
It remains to explain in iteration i, how to selectively
activate a particular gadget in that iteration and whether the
simulation should continue to iteration i + 1. Our running
example in Code 2 shows a scenario where the attacker can
“interact” with the program by repeatedly corrupting program
variables at line 7 using a buffer overﬂow. This attack is an
interactive attack, where the attacker can prepare the memory
state at the start of loop iteration i in a way that the desired
gadget works as required and other gadgets operate on unused
memory. Let Mj be the state of memory for executing gadget
j selectively. In an interactive attack, the attacker can corrupt
local variables to conﬁgure Mj to execute j in that round, and
provide multiple rounds of such malicious inputs to perform an
expressive computation. When the attacker wishes to terminate
the loop, it can corrupt the loop condition variable to stop.
Another class of DOP attacks are non-interactive, whereby
the attacker provides the entire malicious input as a single
data transmission. In such a scenario, all the memory setup
and conditions for deciding loop termination and selective
gadget activation need to be encoded in a single malicious
payload. To support such attacks, MINDOP has two virtual
operations that enable conditional chaining of operations, or
virtual
the attacker
provides the memory conﬁguration Mj necessary for each
gadget j to be selectively executed in a particular iteration
in the input payload. In addition, it keeps a pointer called
the virtual PC which points to the desired conﬁguration Mj
at the start of each iteration. It sufﬁces to corrupt only the
virtual PC, so that the program execution in that iteration
operates on the conﬁguration Mj. To decide how to switch to
jumps. The basic idea is as follows:
973973
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:56 UTC from IEEE Xplore.  Restrictions apply. 
Mk in the next iteration, MINDOP provides virtual operations
that set the virtual PC, conditionally or unconditionally. The
dispatcher loop can be conditionally terminated by using a
speciﬁc memory conﬁguration Mexit which sets the loop
condition variable appropriately. We provide example gadgets
that simulate such virtual operations below.
Simulating Jump Operations. The key here is to identify
a suitable variable to implement a virtual PC which can be
corrupted in each loop iteration. One example of such a gadget
is the Code 4 taken from the real ProFTPD program [28]3.
There is a memory pointer pbuf->current that points to
the buffer of malicious network input. In each loop iteration,
the code reads one line from the buffer and processes it in
the loop body — thus the pointer is a useful candidate to
simulate a virtual PC. To simulate an unconditional jump,
attackers just prepare the memory conﬁguration to trigger
another operation gadget (e.g., addition, assignment) to change
the value of the virtual PC. For example, if attackers want
the MINDOP program to jump from operation i to j, they
just need to prepare the memory conﬁguration Mk after Mi,
so that the operation k will change the virtual PC to point to
Mj. Furthermore, there are two ways to simulate a conditional
jump. One case is that reading the memory conﬁguration with
virtual PC is conditional. Attackers just use operation k to set
the proper variable as the reading condition. Another case is
that the operation k’s execution conditionally depends on a
data variable.
1 void cmd_loop(server_rec *server, conn_t *c) {
2
3
4
5
6
7 }
8 char *pr_netio_telnet_gets(char * buf, ...) {
9
10
11 }
pr_netio_telnet_gets(buf, ..);
cmd = make_ftp_cmd(buf, ...);
pr_cmd_dispatch(cmd); // dispatcher
while (TRUE) {
}
while(*pbuf->current!=’\n’ && toread>0)
*buf++ = *pbuf->current++;
Code 4. Example data-oriented gadget of jump operation.
The virtual PC in non-interactive mode requires a dedicated
space for malicious input and a controllable input pointer. In
Section V we show the details of the identiﬁed virtual PCs in
real-world programs. Note that interactive attack model does
not require a virtual PC as attackers can dynamically decide
the next gadget based on the network message received from
the victim program in each iteration.
D. MINDOP is Turing-Complete
To show that MINDOP is Turing-complete, we show how
the classical construction of a Turing machine can be simulated
in MINDOP. A Turing machine M is a tuple (Q, q0, Σ, σ0, δ)
where,
– Q is a ﬁnite set of states,
– q0 is a distinguished start state such that q0 ∈ Q
– Σ is a ﬁnite set of symbols
3Although ProFTPD provides an interactive attack mode, it also allows
non-interactive attack with this jump gadget.
974974
– σ0 is a distinguished blank symbol such that σ0 ∈ Σ
– δ is a transition table mapping a partial function Q×Σ (cid:4)→
Σ × {L, R} × Q
Representation. In the context of DOP, we set-up the fol-
lowing data structures in the victim program’s memory to
represent our Turing Machine: A qcur to hold the current
state, where qcur is a member of set of all possible states (Q).
A pointer tapehead to track the cell on the tape containing
the current symbol Scur, where Scur is a member of set of
all possible symbols (Σ). Note that since the tape is linear,
tapehead − 1 points to left part of the tape w.r.t. current
position, and tapehead + 1 points to the right part to the tape.
A pointer T Tbase to access a two-dimensional array that stores
the transition table. The transition table uses the current state
qcur and the current symbol Scur as indexes. Pointers qnext,
Snext, D hold the next state, next symbol and the movement
direction (left or right) respectively.
Simulating Steps of A Turing Machine. In the ﬁrst step
of the attack, we invoke the memory gadgets to load the
input and transition table into the program memory. We also
initialize qcur to q0 and tapehead to Scur. For achieving this,
the attacker crafts a payload which will execute the sequence
of operations shown in Listing 5. This requires three basic
types of gadgets: assignment (MOV), dereference (LOAD and
STORE) and addition (ADD).
1 MOV tape_head, temp
2 STORE input_0, temp
3 ADD temp, 1
4 STORE input_1, temp
5 ....
6 STORE input_n, temp
7 LOAD tape_head,S_0
8 MOV q_0, q_cur
9 MOV TT_base, address
10 MOV temp, TT_base
11 STORE value_0, temp
12 ADD temp, 1
13 STORE value_1, temp
14 ADD temp, 1
15 ....
16 STORE value_n, temp
;start writing input
;end writing input
;init S_0
;init q_cur
;start writing trans tab
;end loading trans tab
Code 5. Data-oriented gadget sequence to initialize the Turing Machine.
Once the attacker sets up the Turing machine, the next aim