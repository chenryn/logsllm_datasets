### Encryption/Decryption and Communication Costs

Our scheme ensures that the encryption/decryption cost, as well as the communication cost, scales with the input and model sizes but not with the complexity of the network itself. This is made possible by our support for multi-key operations. It is important to note that the server is assumed to be semi-honest; we do not require non-collusion assumptions because even if the server colludes with one party, they cannot learn the other party's private inputs due to the IND-CPA security of MKHE. Therefore, our work presents an interesting point in the design space of oblivious machine learning inference.

### Framework Methodology

| Framework | Methodology | Runtime (s) | Latency (s) | Amortized (s) |
|-----------|-------------|-------------|-------------|---------------|
| CryptoNets | HE          | 570         | -           | -             |
| MiniONN   | HE, MPC     | 1.28        | -           | -             |
| Gazelle   | HE, MPC     | 0.03        | -           | 0.45          |
| E2DM      | HE          | 28.59       | -           | -             |
| Ours      | MKHE        | 1.80        | -           | 0.07          |

**Table 5. MNIST benchmarks of privacy-preserving neural network frameworks.**

### Conclusion

In this paper, we presented practical multi-key variants of the BFV and CKKS schemes, along with their bootstrapping methods. We provided the first experimental results of MKHE with packed ciphertexts by implementing our schemes. The main technical contribution is the proposal of new relinearization algorithms that achieve better performance compared to prior works [13, 50]. Finally, we demonstrated that our scheme can be applied to secure online prediction services by evaluating an encrypted classifier on encrypted data under two different keys. We implemented our protocol on convolutional neural networks trained on the MNIST dataset and showed that it can achieve low end-to-end latency by leveraging optimized homomorphic convolutions and homomorphic matrix-vector multiplications.

### References

1. M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen, C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin, et al. TensorFlow: Large-scale machine learning on heterogeneous distributed systems, 2015. https://www.tensorflow.org.
2. M. Albrecht, M. Chase, H. Chen, J. Ding, S. Goldwasser, S. Gorbunov, S. Halevi, J. Hoffstein, K. Laine, K. Lauter, S. Lokam, D. Micciancio, D. Moody, T. Morrison, A. Sahai, and V. Vaikuntanathan. Homomorphic encryption security standard. Technical report, HomomorphicEncryption.org, Toronto, Canada, November 2018.
3. M. R. Albrecht, R. Player, and S. Scott. On the concrete hardness of learning with errors. Journal of Mathematical Cryptology, 9(3):169–203, 2015.
4. J.-C. Bajard, J. Eynard, M. A. Hasan, and V. Zucca. A full RNS variant of FV like somewhat homomorphic encryption schemes. In International Conference on Selected Areas in Cryptography, pages 423–442. Springer, 2016.
5. M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness theorems for non-cryptographic fault-tolerant distributed computation. In Proceedings of the twentieth annual ACM symposium on Theory of computing, pages 1–10. ACM, 1988.
6. Z. Brakerski. Fully homomorphic encryption without modulus switching from classical GapSVP. In R. Safavi-Naini and R. Canetti, editors, CRYPTO 2012, volume 7417 of Lecture Notes in Computer Science, pages 868–886. Springer, 2012.
7. Z. Brakerski, C. Gentry, and V. Vaikuntanathan. (Leveled) fully homomorphic encryption without bootstrapping. In Proc. of ITCS, pages 309–325. ACM, 2012.
8. Z. Brakerski and R. Perlman. Lattice-based fully dynamic multi-key FHE with short ciphertexts. In Annual Cryptology Conference, pages 190–213. Springer, 2016.
9. H. Chen, I. Chillotti, and Y. Song. Improved bootstrapping for approximate homomorphic encryption. Cryptology ePrint Archive, Report 2018/1043, 2018. https://eprint.iacr.org/2018/1043, to appear in EUROCRYPT 2019.
10. H. Chen, I. Chillotti, and Y. Song. Multi-key homomophic encryption from TFHE. Cryptology ePrint Archive, Report 2019/116, 2019. https://eprint.iacr.org/2019/116.
11. H. Chen, R. Gilad-Bachrach, K. Han, Z. Huang, A. Jalali, K. Laine, and K. Lauter. Logistic regression over encrypted data from fully homomorphic encryption. BMC medical genomics, 11(4):81, 2018.
12. H. Chen and K. Han. Homomorphic lower digits removal and improved FHE bootstrapping. In Annual International Conference on the Theory and Applications of Cryptographic Techniques, pages 315–337. Springer, 2018.
13. L. Chen, Z. Zhang, and X. Wang. Batched multi-hop multi-key FHE from Ring-LWE with compact ciphertext extension. In Theory of Cryptography Conference, pages 597–627. Springer, 2017.
14. J. H. Cheon, K. Han, A. Kim, M. Kim, and Y. Song. Bootstrapping for approximate homomorphic encryption. In Annual International Conference on the Theory and Applications of Cryptographic Techniques, pages 360–384. Springer, 2018.
15. J. H. Cheon, K. Han, A. Kim, M. Kim, and Y. Song. A full RNS variant of approximate homomorphic encryption. In International Conference on Selected Areas in Cryptography. Springer, 2018.
16. J. H. Cheon, A. Kim, M. Kim, and Y. Song. Homomorphic encryption for arithmetic of approximate numbers. In International Conference on the Theory and Application of Cryptology and Information Security, pages 409–437. Springer, 2017.
17. I. Chillotti, N. Gama, M. Georgieva, and M. Izabachene. Faster fully homomorphic encryption: Bootstrapping in less than 0.1 seconds. In Advances in Cryptology – ASIACRYPT 2016, pages 3–33. Springer, 2016.
18. F. Chollet et al. Keras, 2015. https://github.com/keras-team/keras.
19. M. Clear and C. McGoldrick. Multi-identity and multi-key leveled FHE from learning with errors. In Annual Cryptology Conference, pages 630–656. Springer, 2015.
20. I. Damgård, M. Keller, E. Larraia, V. Pastro, P. Scholl, and N. P. Smart. Practical covertly secure MPC for dishonest majority–or: breaking the SPDZ limits. In European Symposium on Research in Computer Security, pages 1–18. Springer, 2013.
21. L. Ducas and D. Micciancio. FHEW: Bootstrapping homomorphic encryption in less than a second. In Advances in Cryptology–EUROCRYPT 2015, pages 617–640. Springer, 2015.
22. J. Fan and F. Vercauteren. Somewhat practical fully homomorphic encryption. IACR Cryptology ePrint Archive, 2012:144, 2012.
23. A. Gascón, P. Schoppmann, B. Balle, M. Raykova, J. Doerner, S. Zahur, and D. Evans. Privacy-preserving distributed linear regression on high-dimensional data. Proceedings on Privacy Enhancing Technologies, 2017(4):345–364, 2017.
24. C. Gentry. Fully homomorphic encryption using ideal lattices. In Proceedings of the Forty-first Annual ACM Symposium on Theory of Computing, STOC '09, pages 169–178. ACM, 2009.
25. C. Gentry, S. Halevi, and N. P. Smart. Better bootstrapping in fully homomorphic encryption. In Public Key Cryptography–PKC 2012, pages 1–16. Springer, 2012.
26. C. Gentry, S. Halevi, and N. P. Smart. Fully homomorphic encryption with polylog overhead. In D. Pointcheval and T. Johansson, editors, EUROCRYPT 2012, volume 7237 of Lecture Notes in Computer Science, pages 465–482. Springer, 2012.
27. C. Gentry, S. Halevi, and N. P. Smart. Homomorphic evaluation of the AES circuit. In R. Safavi-Naini and R. Canetti, editors, Advances in Cryptology - CRYPTO 2012, volume 7417 of Lecture Notes in Computer Science, pages 850–867. Springer, 2012.
28. C. Gentry, A. Sahai, and B. Waters. Homomorphic encryption from learning with errors: Conceptually-simpler, asymptotically-faster, attribute-based. In Advances in Cryptology–CRYPTO 2013, pages 75–92. Springer, 2013.
29. R. Gilad-Bachrach, N. Dowlin, K. Laine, K. Lauter, M. Naehrig, and J. Wernsing. CryptoNets: Applying neural networks to encrypted data with high throughput and accuracy. In International Conference on Machine Learning, pages 201–210, 2016.
30. S. Halevi, Y. Polyakov, and V. Shoup. An improved RNS variant of the BFV homomorphic encryption scheme. Cryptology ePrint Archive, Report 2018/117, 2018. https://eprint.iacr.org/2018/117.
31. S. Halevi and V. Shoup. Algorithms in HElib. In Advances in Cryptology–CRYPTO 2014, pages 554–571. Springer, 2014.
32. S. Halevi and V. Shoup. Bootstrapping for HElib. In Advances in Cryptology–EUROCRYPT 2015, pages 641–670. Springer, 2015.
33. S. Halevi and V. Shoup. Faster homomorphic linear transformations in HElib. In Annual International Cryptology Conference, pages 93–120. Springer, 2018.
34. X. Jiang, M. Kim, K. Lauter, and Y. Song. Secure outsourced matrix computation and application to neural networks. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, pages 1209–1222. ACM, 2018.
35. C. Juvekar, V. Vaikuntanathan, and A. Chandrakasan. GAZELLE: A low latency framework for secure neural network inference. In 27th USENIX Security Symposium (USENIX Security 18), Baltimore, MD, 2018. USENIX Association.
36. M. Keller, V. Pastro, and D. Rotaru. Overdrive: making SPDZ great again. In Annual International Conference on the Theory and Applications of Cryptographic Techniques, pages 158–189. Springer, 2018.
37. A. Kim, Y. Song, M. Kim, K. Lee, and J. H. Cheon. Logistic regression model training based on the approximate homomorphic encryption. BMC medical genomics, 11(4):83, 2018.
38. M. Kim, Y. Song, B. Li, and D. Micciancio. Semi-parallel logistic regression for GWAS on encrypted data. Cryptology ePrint Archive, Report 2019/294, 2019. https://eprint.iacr.org/2019/294.
39. M. Kim, Y. Song, S. Wang, Y. Xia, and X. Jiang. Secure logistic regression based on homomorphic encryption: Design and evaluation. JMIR medical informatics, 6(2), 2018.
40. Y. LeCun. The MNIST database of handwritten digits. http://yann.lecun.com/exdb/mnist/, 1998.
41. J. Liu, M. Juuti, Y. Lu, and N. Asokan. Oblivious neural network predictions via MiniONN transformations. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pages 619–631. ACM, 2017.
42. A. López-Alt, E. Tromer, and V. Vaikuntanathan. On-the-fly multiparty computation on the cloud via multikey fully homomorphic encryption. In Proceedings of the forty-fourth annual ACM symposium on Theory of computing, pages 1219–1234. ACM, 2012.
43. P. Mohassel and Y. Zhang. SecureML: A system for scalable privacy-preserving machine learning. In 2017 38th IEEE Symposium on Security and Privacy (SP), pages 19–38. IEEE, 2017.
44. P. Mukherjee and D. Wichs. Two round multiparty computation via multi-key FHE. In Annual International Conference on the Theory and Applications of Cryptographic Techniques, pages 735–763. Springer, 2016.
45. C. Peikert and S. Shiehian. Multi-key FHE from LWE, revisited. In Theory of Cryptography Conference, pages 217–238. Springer, 2016.
46. Microsoft SEAL (release 3.2). https://github.com/Microsoft/SEAL, Feb. 2019. Microsoft Research, Redmond, WA.
47. N. P. Smart and F. Vercauteren. Fully homomorphic SIMD operations. Designs, codes and cryptography, 71(1):57–81, 2014. Early version at http://eprint.iacr.org/2011/133.
48. X. Wang, S. Ranellucci, and J. Katz. Global-scale secure multiparty computation. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pages 39–56. ACM, 2017.
49. A. C.-C. Yao. How to generate and exchange secrets. In Foundations of Computer Science, 1986., 27th Annual Symposium on, pages 162–167. IEEE, 1986.
50. T. Zhou, N. Li, X. Yang, Y. Han, and W. Liu. Efficient multi-key FHE with short extended ciphertexts and less public parameters. Cryptology ePrint Archive, Report 2018/1054, 2018. https://eprint.iacr.org/2018/1054.

### Special Modulus Variant of Multi-Key CKKS

- **MKHE.Setup(1λ)**: Given a security parameter λ, set the RLWE dimension n, ciphertext modulus q, special modulus p, key distribution χ, and error distribution ψ over R. Generate a random vector \( a \leftarrow U(R_d^{pq}) \). Return the public parameter \( pp = (n, p, q, \chi, \psi, a) \).

- **UniEnc(µ; s)**: For an input plaintext \( \mu \in R \), generate a ciphertext \( D = [d_0 | d_1 | d_2] \in R_d^{3 \times pq} \) as follows:
  1. Sample \( r \leftarrow \chi \).
  2. Sample \( d_1 \leftarrow U(R_d^{pq}) \) and \( e_1 \leftarrow \psi^d \), and set \( d_0 = -s \cdot d_1 + e_1 + pr \cdot g \pmod{pq} \).
  3. Sample \( e_2 \leftarrow \psi^d \) and set \( d_2 = r \cdot a + e_2 + p\mu \cdot g \pmod{pq} \).

- **MKHE.KeyGen(pp)**: Each party i samples the secret key \( s_i \leftarrow \chi \), an error vector \( e_i \leftarrow \psi^d \), and sets the public key as \( b_i = -s_i \cdot a + e_i \pmod{pq} \). Set the evaluation key \( D_i \leftarrow \text{UniEnc}(s_i; s_i) \).

- **Relin(ct; {(D_i, b_i)}_{1 \leq i \leq k})**: Given an extended ciphertext \( ct = (c_{i,j})_{0 \leq i, j \leq k} \in R^{(k+1)^2} \) and k pairs of evaluation and public keys \( \{(D_i, b_i)\}_{1 \leq i \leq k} \in (R_d^{3 \times pq})^k \), generate a ciphertext \( ct' \in R_q^{k+1} \) as described in Algorithm 3.

- **MK-CKKS.Enc(m; b_i, a)**: Let \( m \in R \) be an input plaintext and let \( a = a[0] \) and \( b_i = b_i[0] \) be the first entries of the common reference string and public key of the i-th party. Sample \( v \leftarrow \chi \) and \( e_0, e_1 \leftarrow \psi \). Return the ciphertext \( ct = (m, 0) + p^{-1} \cdot (c_0, c_1) \in R_q^2 \) where \( (c_0, c_1) = v \cdot (b, a) + (e_0, e_1) \pmod{pq} \).

- **MK-CKKS.Dec, Add, Mult, Rescale**: These algorithms are the same as the ones described in Section 4.2.

- **MKHE.GkGen(j; s)**: Generate a random vector \( h_1 \leftarrow U(R_d^{pq}) \) and an error vector \( e' \leftarrow \psi^d \). Compute \( h_0 = -s \cdot h_1 + e' + \tau_j(s) \cdot g \pmod{pq} \). Return the Galois evaluation key as \( gk = [h_0 | h_1] \in R_d^{2 \times pq} \).

- **MKHE.EvalGal(ct; {gk_i}_{1 \leq i \leq k})**: Let \( gk_i = [h_{i,0} | h_{i,1}] \) be the Galois evaluation key of the i-th party for \( 1 \leq i \leq k \). Given a ciphertext \( ct = (c_0, \ldots, c_k) \in R_q^{k+1} \), compute:

  \[
  \sum_{i=1}^k c_i
  \]

  (The exact computation details are omitted for brevity.)

### Algorithm 3: Relinearization Method with Modulus Raising

**Input**: \( ct = (c_{i,j})_{0 \leq i, j \leq k} \), \( \{(D_i = [d_{i,0} | d_{i,1} | d_{i,2}], b_i)\}_{1 \leq i \leq k} \).

**Output**: \( ct' \)

1. Initialize \( (c''_{i,j})_{0 \leq i, j \leq k} \leftarrow 0 \).
2. For \( 1 \leq i, j \leq k \):
   - \( c''_{i,j} \leftarrow \langle g^{-1}(c_{i,j}), b_j \rangle \pmod{pq} \)
   - \( c''_{i,j} \leftarrow c''_{i,j} + \langle g^{-1}(c_{i,j}), d_{i,2} \rangle \pmod{pq} \)
   - \( c''_{i,j} \leftarrow (c''_{i,j}) \cdot [d_{i,0} | d_{i,1}] \pmod{pq} \)
3. For \( 1 \leq i \leq k \):
   - \( c'_0 \leftarrow c_{0,0} + p^{-1} \cdot c''_{0,0} \pmod{q} \)
   - \( c'_i \leftarrow c_{0,i} + c_{i,0} + p^{-1} \cdot c''_{i,0} \pmod{q} \)

This algorithm creates a temporary vector modulo \( pq \) and then converts it to a polynomial modulo \( q \).