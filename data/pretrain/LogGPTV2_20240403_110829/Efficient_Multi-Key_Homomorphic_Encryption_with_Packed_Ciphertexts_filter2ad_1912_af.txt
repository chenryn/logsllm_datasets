tion/decryption cost, and the communication cost only scales with the input/model sizes, but not the
complexity of the network itself. This feature is made possible since our scheme supports multi-key opera-
tions. Note that the server is only assumed to be semi-honest: we do not require non-collusion assumptions
since even if the server colludes with one party, they cannot learn the other party’s private inputs due
to the IND-CPA security of MKHE. Therefore, we believe that our work presents an interesting point in
the design space of oblivious machine learning inference.
Framework Methodology
Runtime
Latency Amortized
CryptoNets
MiniONN
Gazelle
E2DM
Ours
HE
HE, MPC
HE, MPC
HE
MKHE
570 s
1.28 s
0.03 s
28.59 s
1.80 s
0.07 s
-
-
0.45 s
-
Table 5. MNIST benchmarks of privacy-preserving neural network frameworks.
7 Conclusion
In this paper, we presented practical multi-key variants of the BFV and CKKS schemes and their boot-
strapping methods. We provided the ﬁrst experimental results of MKHE with packed ciphertexts by
implementing our schemes. The main technical contribution is to propose new relinearization algorithms
achieving better performance compared to prior works [13, 50]. Finally, we showed that our scheme can
be applied to secure on-line prediction services by evaluating an encrypted classiﬁer on an encrypted data
under two diﬀerent keys. We implemented our protocol on convolutional neural networks trained on the
MNIST dataset and showed that it can achieve a low end-to-end latency by leveraging the optimized
homomorphic convolutions and homomorphic matrix-vector multiplications.
References
1. M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen, C. Citro, G. S. Corrado, A. Davis, J. Dean, M. Devin,
et al. Tensorﬂow: Large-scale machine learning on heterogeneous distributed systems, 2015. https://www.
tensorflow.org.
2. M. Albrecht, M. Chase, H. Chen, J. Ding, S. Goldwasser, S. Gorbunov, S. Halevi, J. Hoﬀstein, K. Laine,
K. Lauter, S. Lokam, D. Micciancio, D. Moody, T. Morrison, A. Sahai, and V. Vaikuntanathan. Homomorphic
encryption security standard. Technical report, HomomorphicEncryption.org, Toronto, Canada, November
2018.
3. M. R. Albrecht, R. Player, and S. Scott. On the concrete hardness of learning with errors. Journal of
Mathematical Cryptology, 9(3):169–203, 2015.
4. J.-C. Bajard, J. Eynard, M. A. Hasan, and V. Zucca. A full RNS variant of FV like somewhat homomorphic
encryption schemes. In International Conference on Selected Areas in Cryptography, pages 423–442. Springer,
2016.
5. M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness theorems for non-cryptographic fault-tolerant
distributed computation. In Proceedings of the twentieth annual ACM symposium on Theory of computing,
pages 1–10. ACM, 1988.
6. Z. Brakerski. Fully homomorphic encryption without modulus switching from classical GapSVP. In R. Safavi-
Naini and R. Canetti, editors, CRYPTO 2012, volume 7417 of Lecture Notes in Computer Science, pages
868–886. Springer, 2012.
7. Z. Brakerski, C. Gentry, and V. Vaikuntanathan. (Leveled) fully homomorphic encryption without bootstrap-
ping. In Proc. of ITCS, pages 309–325. ACM, 2012.
8. Z. Brakerski and R. Perlman. Lattice-based fully dynamic multi-key FHE with short ciphertexts. In Annual
Cryptology Conference, pages 190–213. Springer, 2016.
9. H. Chen, I. Chillotti, and Y. Song. Improved bootstrapping for approximate homomorphic encryption. Cryp-
tology ePrint Archive, Report 2018/1043, 2018. https://eprint.iacr.org/2018/1043, to appear in EURO-
CRYPT 2019.
10. H. Chen, I. Chillotti, and Y. Song. Multi-key homomophic encryption from TFHE. Cryptology ePrint Archive,
Report 2019/116, 2019. https://eprint.iacr.org/2019/116.
11. H. Chen, R. Gilad-Bachrach, K. Han, Z. Huang, A. Jalali, K. Laine, and K. Lauter. Logistic regression over
encrypted data from fully homomorphic encryption. BMC medical genomics, 11(4):81, 2018.
12. H. Chen and K. Han. Homomorphic lower digits removal and improved FHE bootstrapping. In Annual Inter-
national Conference on the Theory and Applications of Cryptographic Techniques, pages 315–337. Springer,
2018.
13. L. Chen, Z. Zhang, and X. Wang. Batched multi-hop multi-key FHE from Ring-LWE with compact ciphertext
extension. In Theory of Cryptography Conference, pages 597–627. Springer, 2017.
14. J. H. Cheon, K. Han, A. Kim, M. Kim, and Y. Song. Bootstrapping for approximate homomorphic encryption.
In Annual International Conference on the Theory and Applications of Cryptographic Techniques, pages 360–
384. Springer, 2018.
15. J. H. Cheon, K. Han, A. Kim, M. Kim, and Y. Song. A full RNS variant of approximate homomorphic
encryption. In International Conference on Selected Areas in Cryptography. Springer, 2018.
16. J. H. Cheon, A. Kim, M. Kim, and Y. Song. Homomorphic encryption for arithmetic of approximate numbers.
In International Conference on the Theory and Application of Cryptology and Information Security, pages
409–437. Springer, 2017.
17. I. Chillotti, N. Gama, M. Georgieva, and M. Izabachene. Faster fully homomorphic encryption: Bootstrapping
in less than 0.1 seconds. In Advances in Cryptology – ASIACRYPT 2016, pages 3–33. Springer, 2016.
18. F. Chollet et al. Keras, 2015. https://github.com/keras-team/keras.
19. M. Clear and C. McGoldrick. Multi-identity and multi-key leveled FHE from learning with errors. In Annual
Cryptology Conference, pages 630–656. Springer, 2015.
20. I. Damg˚ard, M. Keller, E. Larraia, V. Pastro, P. Scholl, and N. P. Smart. Practical covertly secure MPC for
dishonest majority–or: breaking the SPDZ limits. In European Symposium on Research in Computer Security,
pages 1–18. Springer, 2013.
21. L. Ducas and D. Micciancio. FHEW: Bootstrapping homomorphic encryption in less than a second.
In
Advances in Cryptology–EUROCRYPT 2015, pages 617–640. Springer, 2015.
22. J. Fan and F. Vercauteren. Somewhat practical fully homomorphic encryption. IACR Cryptology ePrint
Archive, 2012:144, 2012.
23. A. Gasc´on, P. Schoppmann, B. Balle, M. Raykova, J. Doerner, S. Zahur, and D. Evans. Privacy-preserving
distributed linear regression on high-dimensional data. Proceedings on Privacy Enhancing Technologies,
2017(4):345–364, 2017.
24. C. Gentry. Fully homomorphic encryption using ideal lattices. In Proceedings of the Forty-ﬁrst Annual ACM
Symposium on Theory of Computing, STOC ’09, pages 169–178. ACM, 2009.
25. C. Gentry, S. Halevi, and N. P. Smart. Better bootstrapping in fully homomorphic encryption. In Public Key
Cryptography–PKC 2012, pages 1–16. Springer, 2012.
26. C. Gentry, S. Halevi, and N. P. Smart. Fully homomorphic encryption with polylog overhead. In D. Pointcheval
and T. Johansson, editors, EUROCRYPT 2012, volume 7237 of Lecture Notes in Computer Science, pages
465–482. Springer, 2012.
27. C. Gentry, S. Halevi, and N. P. Smart. Homomorphic evaluation of the AES circuit. In R. Safavi-Naini and
R. Canetti, editors, Advances in Cryptology - CRYPTO 2012, volume 7417 of Lecture Notes in Computer
Science, pages 850–867. Springer, 2012.
28. C. Gentry, A. Sahai, and B. Waters. Homomorphic encryption from learning with errors: Conceptually-
In Advances in Cryptology–CRYPTO 2013, pages 75–92.
simpler, asymptotically-faster, attribute-based.
Springer, 2013.
29. R. Gilad-Bachrach, N. Dowlin, K. Laine, K. Lauter, M. Naehrig, and J. Wernsing. CryptoNets: Applying
In International Conference on
neural networks to encrypted data with high throughput and accuracy.
Machine Learning, pages 201–210, 2016.
30. S. Halevi, Y. Polyakov, and V. Shoup. An improved RNS variant of the BFV homomorphic encryption
scheme. Cryptology ePrint Archive, Report 2018/117, 2018. https://eprint.iacr.org/2018/117.
31. S. Halevi and V. Shoup. Algorithms in HElib. In Advances in Cryptology–CRYPTO 2014, pages 554–571.
Springer, 2014.
32. S. Halevi and V. Shoup. Bootstrapping for HElib. In Advances in Cryptology–EUROCRYPT 2015, pages
641–670. Springer, 2015.
33. S. Halevi and V. Shoup. Faster homomorphic linear transformations in HElib.
In Annual International
Cryptology Conference, pages 93–120. Springer, 2018.
34. X. Jiang, M. Kim, K. Lauter, and Y. Song. Secure outsourced matrix computation and application to neural
networks. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security,
pages 1209–1222. ACM, 2018.
35. C. Juvekar, V. Vaikuntanathan, and A. Chandrakasan. GAZELLE: A low latency framework for secure
In 27th USENIX Security Symposium (USENIX Security 18), Baltimore, MD,
neural network inference.
2018. USENIX Association.
36. M. Keller, V. Pastro, and D. Rotaru. Overdrive: making SPDZ great again. In Annual International Confer-
ence on the Theory and Applications of Cryptographic Techniques, pages 158–189. Springer, 2018.
37. A. Kim, Y. Song, M. Kim, K. Lee, and J. H. Cheon. Logistic regression model training based on the
approximate homomorphic encryption. BMC medical genomics, 11(4):83, 2018.
38. M. Kim, Y. Song, B. Li, and D. Micciancio. Semi-parallel logistic regression for GWAS on encrypted data.
Cryptology ePrint Archive, Report 2019/294, 2019. https://eprint.iacr.org/2019/294.
39. M. Kim, Y. Song, S. Wang, Y. Xia, and X. Jiang. Secure logistic regression based on homomorphic encryption:
Design and evaluation. JMIR medical informatics, 6(2), 2018.
40. Y. LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/, 1998.
41. J. Liu, M. Juuti, Y. Lu, and N. Asokan. Oblivious neural network predictions via minionn transformations.
In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pages
619–631. ACM, 2017.
42. A. L´opez-Alt, E. Tromer, and V. Vaikuntanathan. On-the-ﬂy multiparty computation on the cloud via
multikey fully homomorphic encryption. In Proceedings of the forty-fourth annual ACM symposium on Theory
of computing, pages 1219–1234. ACM, 2012.
43. P. Mohassel and Y. Zhang. SecureML: A system for scalable privacy-preserving machine learning. In 2017
38th IEEE Symposium on Security and Privacy (SP), pages 19–38. IEEE, 2017.
44. P. Mukherjee and D. Wichs. Two round multiparty computation via multi-key FHE. In Annual International
Conference on the Theory and Applications of Cryptographic Techniques, pages 735–763. Springer, 2016.
45. C. Peikert and S. Shiehian. Multi-key FHE from LWE, revisited. In Theory of Cryptography Conference,
pages 217–238. Springer, 2016.
46. Microsoft SEAL (release 3.2). https://github.com/Microsoft/SEAL, Feb. 2019. Microsoft Research, Red-
mond, WA.
47. N. P. Smart and F. Vercauteren. Fully homomorphic SIMD operations. Designs, codes and cryptography,
71(1):57–81, 2014. Early verion at http://eprint.iacr.org/2011/133.
48. X. Wang, S. Ranellucci, and J. Katz. Global-scale secure multiparty computation. In Proceedings of the 2017
ACM SIGSAC Conference on Computer and Communications Security, pages 39–56. ACM, 2017.
49. A. C.-C. Yao. How to generate and exchange secrets.
In Foundations of Computer Science, 1986., 27th
Annual Symposium on, pages 162–167. IEEE, 1986.
50. T. Zhou, N. Li, X. Yang, Y. Han, and W. Liu. Eﬃcient multi-key FHE with short extended ciphertexts and
less public parameters. Cryptology ePrint Archive, Report 2018/1054, 2018. https://eprint.iacr.org/
2018/1054.
A Special Modulus Variant of Multi-Key CKKS
• MKHE.Setup(1λ): Given a security parameter λ, set the RLWE dimension n, ciphertext modulus q, special
modulus p, key distribution χ and error distribution ψ over R. Generate a random vector a ← U (Rd
pq).
Return the public parameter pp = (n, p, q, χ, ψ, a).
• UniEnc(µ; s): For an input plaintext µ ∈ R, generate a ciphertext D = [d0|d1|d2] ∈ Rd×3
1. Sample r ← χ.
2. Sample d1 ← U (Rd
3. Sample e2 ← ψd and set d2 = r · a + e2 + pµ · g (mod pq) in Rd
pq.
pq) and e1 ← ψd, and set d0 = −s · d1 + e1 + pr · g (mod pq).
as follows:
pq
• MKHE.KeyGen(pp): Each party i samples the secret key si ← χ, an error vector ei ← ψd and sets the
public key as bi = −si · a + ei (mod pq). Set the evaluation key Di ← UniEnc(si; si).
• Relin(ct;{(Di, bi)}1≤i≤k): Given an extended ciphertext ct = (ci,j)0≤i,j≤k ∈ R(k+1)2
evaluation and public keys {(Di, bi)}1≤i≤k ∈ (Rd×3
in Alg. 3.
• MK-CKKS.Enc(m; bi, a): Let m ∈ R be an input plaintext and let a = a[0] and bi = bi[0] be the ﬁrst
entries of the common reference string and public key of the i-th party. Sample v ← χ and e0, e1 ← ψ.
Return the ciphertext ct = (m, 0) +(cid:4)p−1 · (c0, c1)(cid:7) ∈ R2
q where (c0, c1) = v · (b, a) + (e0, e1) (mod pq).
pq)k, generate a ciphertext ct
and k pairs of
as described
pq ×Rd
q
(cid:48) ∈ Rk+1
q
q
.
(cid:48)
Algorithm 3 Relinearization method with modulus raising
i)0≤i≤k ∈ Rk+1
= (c(cid:48)
i )0≤i≤k ← 0
i,j ← (cid:104)g−1(ci,j), bj(cid:105) (mod pq)
c(cid:48)(cid:48)
c(cid:48)
(c(cid:48)(cid:48)
0 , c(cid:48)(cid:48)
j ← c(cid:48)(cid:48)
c(cid:48)(cid:48)
Input: ct = (ci,j)0≤i,j≤k, {(Di = [di,0|di,1|di,2], bi)}1≤i≤k.
Output: ct
1: (c(cid:48)(cid:48)
2: for 1 ≤ i, j ≤ k do
3:
4:
5:
6:
7: end for
8: c(cid:48)
9: for 1 ≤ i ≤ k do
10:
11: end for
(cid:7)
i,j ←(cid:4)p−1 · c(cid:48)(cid:48)
(cid:7) (mod q)
0 ← c0,0 +(cid:4)p−1 · c(cid:48)(cid:48)
i ← c0,i + ci,0 +(cid:4)p−1 · c(cid:48)(cid:48)
i ) ← (c(cid:48)(cid:48)
j + (cid:104)g−1(ci,j), di,2(cid:105) (mod pq)
i,j) · [di,0|di,1] (mod pq)
(cid:7) (mod q)
i ) + g−1(c(cid:48)
0 , c(cid:48)(cid:48)
c(cid:48)
i,j
0
i
(cid:46) Create a temporary vector modulo pq
(cid:46) It is a polynomial modulo q
• MK-CKKS.Dec, Add, Mult, Rescale: These algorithms are the same as the ones described in Section 4.2.
• MKHE.GkGen(j; s): Generate a random vector h1 ← U (Rd
pq) and an error vector e(cid:48) ← ψd. Compute
h0 = −s · h1 + e(cid:48) + τj(s) · g (mod pq). Return the Galois evaluation key as gk = [h0|h1] ∈ Rd×2
pq .
• MKHE.EvalGal(ct;{gki}1≤i≤k): Let gki = [hi,0|hi,1] be the Galois evaluation key of the i-th party for
1 ≤ i ≤ k. Given a ciphertext ct = (c0, . . . , ck) ∈ Rk+1
, compute
q
k(cid:88)