Summary.
When REQUESTS_CA_BUNDLE has been set as an environment variable, the verify
property in a requests.Session() will always be ignored.
## Expected Result
requests.Session always uses REQUESTS_CA_BUNDLE unless a certificate bundle
has been assigned
## Actual Result
requests.Session always uses REQUESTS_CA_BUNDLE and overides any certificate
bundle set on the Session object.
## Reproduction Steps
`REQUESTS_CA_BUNDLE="/lib/python3.6/site-
packages/pip/_vendor/certifi/cacert.pem"`
    import requests
    s = requests.Session()
    s.verify = "/non_existing_bundle"
    s.get("https://google.com")
Expected result:  
`OSError: Could not find a suitable TLS CA certificate bundle, invalid path:
/non_existing_bundle`
Actual result:  
``
## System Information
    $ python -m requests.help
    {
      "chardet": {
        "version": "3.0.4"
      },
      "cryptography": {
        "version": ""
      },
      "idna": {
        "version": ""
      },
      "implementation": {
        "name": "CPython",
        "version": "3.6.4"
      },
      "platform": {
        "release": "3.10.0-693.11.6.el7.x86_64",
        "system": "Linux"
      },
      "pyOpenSSL": {
        "openssl_version": "",
        "version": null
      },
      "requests": {
        "version": "2.18.4"
      },
      "system_ssl": {
        "version": "100020bf"
      },
      "urllib3": {
        "version": "1.22"
      },
      "using_pyopenssl": false
    }
Not sure if this is a bug, but I now need to unset the environment variable
first before I can use a different certificate bundle in a session object or
use the following workaround.
sessions.py:
                #if verify is True or verify is None:
                if verify is True or verify is None and not isinstance(self.verify, str):
                    verify = (os.environ.get('REQUESTS_CA_BUNDLE') or
                              os.environ.get('CURL_CA_BUNDLE'))