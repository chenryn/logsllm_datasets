adn1x141root , adm, Gaemon
rich1x:5001
katie1x:5021
mana1x:501 1
jessica1x1503:
mysg] 1x:27 1
test1x:5041
和UID一样，GID在分配时也采用了特定的格式。系统账户用的组通常会分配低于500的GID
值，而用户组的GID则会从500开始分配。/etc/group文件有4个字段：
口组名
口组密码
 GID
口属于该组的用户列表
组密码允许非组内成员通过它临时成为该组成员。这个功能并不很普遍，但确实存在。
千万不能通过直接修改/etc/group文件来添加用户到一个组，要用usermoc命令（在7.1节中
介绍过）。在添加用户到不同的组之前，首先得创建组。
说明用户账户列表某种意义上有些误导人。你会发现，在列表中，有些组并没有列出用户。
这并不是说这些组没有成员。当一个用户在/etc/passwd文件中指定某个组作为默认组时，
用户账户不会作为该组成员再出现在/etc/group文件中。多年以来，被这个问题难倒的系
统管理员可不是一两个呢。
7.2.2创建新组
groupada命令可在系统上创建新组。
/uax/abin/gzoupadd shared
 tai1 /etc/gzoup
ha1Gaenon:x:68 :
---
## Page 149
134
第7章理解Linux文件权限
xfa:x: 43 :
gdn:x:42 :
r1ch:x:500 :
nama:x: 501:
Jessica:x:503 :
katie:x:502 :
nyaq1:x:27:
shared:x:505 :
test:x:504:
在创建新组时，默认没有用户被分配到该组。groupada命令没有提供将用户添加到组中的
选项，但可以用usermod命令来弥补这一点。
 /usr/abin/usernod -G shared r1ch
 tai1 /etc/group
 /usx/abin/usernod -G shared test
ha1daenon:x:68 :
xfs:x: 43 :
gdn:x:42:
r1ch:x:500 :
nasa:x:501:
katie:x:502 :
:0s+x+e8s
nyaq1:x:27:
teat :x:504:
shared:x:505:rich, test
shared组现在有两个成员：test和rich。usermod命令的-G选项会把这个新组添加到该用
户账户的组列表里。
说明如果更改了已登录系统账户所属的用户组，该用户必须登出系统后再登录，组关系的更
改才能生效。
警告为用户账户分配组时妥格外小心。如果加了-g选项，指定的组名会替换择该账户的默认
组。-G选项则将该组添加到用户的属组的列表里，不会影响双认组。
7.2.3修改组
在/etc/group文件中可以看到，需要修改的组信息并不多。groupmoc命令可以修改已有组的
GID（加-g选项）或组名（加-n选项）。
 /uar/abin/groupmod -n. sharing ahared
 tai1 /ete/group
ha1daenon:x:68:
---
## Page 150
7.3理解文件权限
135
xfs:x:43 :
gdn:x: 42 :
: 00s+x+.
 0s=x+euew
katle:x:502:
jessica:x: 503 :
myaq] :x:27 :
shaxing:x:505:teat.,rich
test:x:504 :
修改组名时，GID和组成员不会变，只有组名改变。由于所有的安全权限都是基于GID的，
你可以随意改变组名而不会影响文件的安全性。
7.3理解文件权限
现在你已经了解了用户和组，是时候解读1=命令输出时所出现的谜一般的文件权限了。本节
将会介绍如何对权限进行分析以及它们的来历。
7.3.1使用文件权限符
如果你还记得第3章，那应该知道1s命令可以用来查看Linux系统上的文件、目录和设备的权限。
S 1α  1
total 68
-zv-rw-x-- 1 1ch rich
50 2010-09-13 07:49 f11e1.gz
rW=-
1rich rich
23 2010-0913 07:50 11e2
-rv-rw-r-- 1 zrich rich
 342010-0913 08 :59f11e4
48 20100913 07:56 f11e3
rv-rw-r-- 1 rich rich
rV==
- 1r1ch r1ch237 2010-09-18 13:58 mypxog.c
drwxrwxr=x 2 xich x1ch 40962010-0903 15:12 test1
drwxrwxx=x 2 xich zich 4096 20100903 15:12 test2
输出结果的第一个字段就是描述文件和目录权限的编码。这个字段的第一个字符代表了对象
的类型：
-代表文件
口代表目录
口1代表链接
口e代表字符型设备
口b代表块设备
口n代表网络设备
之后有3组三字符的编码。每一组定义了3种访问权限：
口r代表对象是可读的
w代表对象是可写的
---
## Page 151
136
第7章理解Linux文件权限
口x代表对象是可执行的
若没有某种权限，在该权限位会出现单破折线。这3组权限分别对应对象的3个安全级别：
口对象的属主
口对象的属组
口系统其他用户
这个概念在图7-1中进行了分解。
-rwxrwxr-x 1rich rich 4882 2010-09-18 13:58 myprog
其他用户的权限
属组成员的权限
文件属主的权限
图7-1Linux文件权限
讨论这个问题的最简单的办法就是找个例子，然后逐个分析文件权限。
-rwxrwxr-x 1 rieh rieh 4882 2010-09-18 13:58 myprog
文件myprog有下面3组权限。
rwx：文件的属主（设为登录名rich）。
口rwx：文件的属组（设为组名rich）。
r-x：系统上其他人。
类似地，rich组的成员也可以读取、写入和执行这个文件。然而不属于rich组的其他用户只能读取
和执行这个文件：w被单破折线取代了，说明这个安全级别没有写人权限。
7.3.2默认文件权限
你可能会问这些文件权限从何而来，答案是umask。umask命令用来设置所创建文件和目录
的默认权限。
$ touch nevfile
$ 1s -al nevfile
-rw-r----
1 rich
rich
0 Sep 20 19:16 newfile
touch命令用分配给我的用户账户的默认权限创建了这个文件。umask命令可以显示和设置
这个默认权限。
$umask
0022
---
## Page 152
7.3理解文件权限
137
遗憾的是，umask命令设置没那么简单明了，想弄明白其工作原理就更混乱了。第一位代表
了一项特别的安全特性，叫作粘希位（stickybit）。这部分内容会在7.5节详述。
后面的3位表示文件或目录对应的umask八进制值。要理解umask是怎么工作的，得先理解
八进制模式的安全性设置。
八进制模式的安全性设置先获取这3个rwx权限的值，然后将其转换成3位二进制值，用一个
八进制值来表示。在这个二进制表示中，每个位置代表一个二进制位。因此，如果读权限是唯一
置位的权限，权限值就是r--，转换成二进制值就是100，代表的八进制值是4。表7-5列出了可
能会遇到的组合。
表7-5Linux文件权限码
权
二进制值
八进制值
000
0
没有任何权限
-X
001
1
只有执行权限
-V-
010
2
只有写人权限
-MX
011
F
有写入和执行权限
r--
1.00
4
只有读取权限
r-x
101
5
有读取和执行权限
rv-
110
6
有读取和写入权限
rvx
111
T
有全部权限
八进制模式先取得权限的八进制值，然后再把这三组安全级别（属主、属组和其他用户）的
八进制值顾序列出。因此，八进制模式的值664代表属主和属组成员都有读取和写人的权限，而
其他用户都只有读取权限。
了解八进制模式权限是怎么工作的之后，umask值反而更叫人困惑了。我的Linux系统上默
认的八进制的umask值是0022，面我所创建的文件的八进制权限却是644，这是如何得来的呢？
umask值只是个掩码。它会屏掉不想授予该安全级别的权限。接下来我们还得再多进行一
些八进制运算才能搞明白来龙去脉。
要把umask值从对象的全权限值中减掉。对文件来说，全权限的值是666（所有用户都有读
和写的权限）：而对目录来说，则是777（所有用户都有读、写、执行权限）。
所以在上例中，文件一开始的权限是666，减去umask值022之后，剩下的文件权限就成了644。
在大多数Linux发行版中，umask值通常会设置在/etc/profile启动文件中（参见第6章），不过
有一些是设置在/etc/login.defs文件中的（如Ubuntu）。可以用umask命令为默认umask设置指定一
个新值。
$touch newt11e2
$uma.sk 026
$ 1α -1l newEl1e2
1r1ch
rich
0 Sep 20 19:46 newfi1e2
---
## Page 153
138第7章理解Linux文件权限
在把umask值设成026后，默认的文件权限变成了640，因此新文件现在对组成员来说是只
读的，而系统里的其他成员则没有任何权限。
umasx值同样会作用在创建目录上。
$ mkdir nevdir
$ 1s -1
drwxr-x-x  2  rich  rich
4096 Sep 20 20:11 newdir/
由于目录的默认权限是777，umask作用后生成的目录权限不同于生成的文件权限。umask
值026会从777中减去，留下来751作为目录权限设置。
7.4改变安全性设置
如果你已经创建了一个目录或文件，需要改变它的安全性设置，在Linux系统上有一些工具
能够完成这项任务。本节将告诉你如何更改文件和目录的已有权限、默认文件属主以及默认属组。
7.4.1改变权限
chmoc命令用来改变文件和目录的安全性设置。该命令的格式如下：
chmod opcions mode file
mode参数可以使用八进制模式或符号模式进行安全性设置。八进制模式设置非常直观，直
接用期望赋予文件的标准3位八进制权限妈即可。
$ chmod 760 nerfile
$ 1s -1 newfile
- TWXTM-=
1 rich  rich
0 Sep 20 19:16 newfile
八进制文件权限会自动应用到指定的文件上。符号模式的权限就没这么简单了。
与通常用到的3组三字符权限字符不同，chmod命令采用了另一种方法。下面是在符号模式
下指定权限的格式。
[ugoa.] [ [+=] [rvxXetugo..]
非常有意义，不是吗？第一组字符定义了权限作用的对象：
口u代表用户
口g代表组
口o代表其他
口a代表上述所有
下一步，后面跟着的符号表示你是想在现有权限基础上增加权限（+），还是在现有权限基础
上移除权限（-），或是将权限设置成后面的值（=）。
最后，第三个符号代表作用到设置上的权限。你会发现，这个值要比通常的rwx多。额外的
设置有以下几项。
---
## Page 154
7.4改变安全性设置
139
口X：如果对象是目录或者它已有执行权限，赋予执行权限。
口s：运行时重新设置UID或GID。
口t：保留文件或目录。
口u：将权限设置为跟属主一样。
口g：将权限设置为跟属组一样。
口o：将权限设置为跟其他用户一样。
像这样使用这些权限。
$ chmod o+r newfile
$ 1s -1F nevfile
-IWXV-[--
1 rich
rich
0 Sep 20 19:16 newfile*
不管其他用户在这一安全级别之前都有什么权限，o+r都给这一级别添加读取权限。
$ chmod u-x newfile
$ 1s -1F newfile
-M-V---
1 rich
rich
0 Sep 20 19:16 newfile
u-x移除了属主已有的执行权限。注意1s命令的-F选项，它能够在具有执行权限的文件名后
加一个星号。
options为chmod命令提供了另外一些功能。-R选项可以让权限的改变递归地作用到文件和
子目录。你可以使用通配符指定多个文件，然后利用一条命令将权限更改应用到这些文件上。
7.4.2改变所属关系
有时你需要改变文件的属主，比如有人离职或开发人员创建了一个在产品环境中需要归属在
系统账户下的应用。Linux提供了两个命令来实现这个功能：chosm命令用来改变文件的属主，
chgrp命令用来改变文件的默认属组。
chowm命令的格式如下。
chom options ovmer  group] file