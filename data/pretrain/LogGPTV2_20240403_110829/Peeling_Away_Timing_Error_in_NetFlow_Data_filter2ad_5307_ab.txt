7.9 +208 -56 -976 -1876 157.4 39.2
355.4 +280 -124 -1068 -1465 0.005 0.0008
41.8 +28 -48 -988 -1020 314.7 64.5
35.4 +244 -52 -992 -1592 201.2 41.7
49.9 +256 +52 -848 -972 0.09 0.008
29.7
70 +428 -48 -992 -1824 74.2
37.9 +112 +12 -924 -984 0.12
0.02
21.5 +316 -52 -946 -1824 302.9 100.7
38.3 +60 -28 -928 -1012 0.11
0.02
8.9 +500 -48 -952 -1600 204.6 60.8
21.7 +280 -52 -968 -2000 333.5 101.9
14.9 +176 -40 -936 -1044 0.07 0.005
20.5 +88 -48 -948 -1328 15.6
12.0 +16 -43 -940 -1001 0.61
7.0
0.02
10800
400
400
10800
400
400
10800
400
10800
400
10800
400
400
10800
10800
10800
4 Correcting Cyclic Timing Error
Having observed and quantiﬁed this error, we set out to devise a method for cor-
recting it. Since the basetime is related to the time at which the router started,
and router restarts in production networks are relatively rare events, correct
basetime information could be determined out-of-band via the router’s manage-
ment interface (e.g., SNMP or the command line). However, this method would
have two disadvantages. First, it requires the management interface of the router
to be accessible to the measurement infrastructure, which is not always desir-
able. Second, static out-of-band basetime determination ignores the drift of the
realtime clock, which is included in each of the ﬂow timestamps; this error would
then need to be corrected in any event.
Therefore, we focused on generating a corrected basetime estimating the true
basetime from the derived basetime information. Our ﬁrst attempt at this con-
sisted of a simple robust maximum detector. The primary problem with this
method is it requires a rather high packet density; otherwise it has a tendency
to “follow” downward-cycling derived basetimes into the cyclic error band. The
problem also initially appeared to be suited to simple linear regression, but the
widely variable density of derived basetimes within the cyclic error band ruled
this method out.
We therefore settled on a correction mechanism based on sliding density win-
dows. Recalling the density diagram in Figure 2, we ﬁrst take the set of derived
basetimes for a speciﬁed “horizontal” (export time) interval, called the correction
interval. We then slide a one-second “vertical” (derived basetime) interval over
the correction interval, and select the position for this interval which maximizes
the derived basetime density within the rectangular correction window. The top
(maximum derived basetime) of this window is then taken to be the corrected
basetime. For source 513 on router A, the corrected basetime is shown as the
top line in Figure 2.
200
B. Trammell et al.
data points
400s
800s
10800s
−800
−1000
−1200
−1400
−1600
−1800
−2000
−2200
−2400
]
s
m
[
t
e
s
f
f
o
e
m
i
t
e
s
a
B
60
61
62
63
Time [hours]
64
65
66
16000
14000
12000
10000
8000
6000
4000
2000
]
0
0
5
+
x
,
0
0
5
−
x
[
n
i
s
t
e
k
c
a
P
0
−1000
09:46am
09:59am
10:10am
e
e
m
m
i
i
t
t
e
e
s
s
a
a
b
b
s
s
1
1
+
+
e
e
m
m
i
i
t
t
e
e
s
s
a
a
b
b
−500
0
Offset from maximum density [ms]
500
1000
(a) Stability of corrected basetime varies
with correction interval size
(b) Density distributions within the cor-
rection window vary over time
Fig. 3. Illustrating density-window basetime correction
The correction interval is selected based upon the density of derived basetimes
for a given source, which is itself dependent on the traﬃc volume. In principle,
it should be chosen to observe at least several wraparounds of the cyclic error.
Figure 3(a) shows the eﬀect that diﬀerent correction intervals have on the cor-
rected basetime series, observing the eﬀects of three diﬀerent windows on correct-
ing the relatively low-density source 0 of router C. In general, longer correction
intervals provide more stable and therefore more accurate corrections, but re-
quire more processing as they must consider more data points, and would lead
to longer delays in reporting corrected times during stream processing. For this
study, we selected a 400 second window for higher density sources, and a 10800
second (three hour) window for lower density sources.
Figure 3(b) illustrates how this correction method works in the presence of
variable density of derived basetimes. Here we show the derived basetime density
as a function of the position of the vertical interval for three diﬀerent correction
windows. Even though the density distributions diﬀer greatly, the method leads
to the same basetime correction.
4.1 Evaluation
To measure the eﬀective accuracy of the cyclic error correction method, we
compared exported ﬂow timestamps to known ﬂow timing. We placed a traﬃc-
generating host on the measured network to send single-packet UDP ﬂows to
known hosts outside the network, chosen such that these ﬂows would be routed
across a known source on a known router in our collection infrastructure. We
saved the injection time for each ﬂow key, and compared this to the timestamps
on the ﬂows exported via NetFlow, both with uncorrected derived basetimes as
well as basetimes corrected using the method described above.
The CDF of the deviation from known timing of per-ﬂow timestamps over 30
hours of data over 3-4 September 2010 for source 513 on router A are shown in
Figure 4(a).
Peeling Away Timing Error in NetFlow Data
201
s
t
r
a
t
s
w
o
l
f
f
o
F
D
C
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
s
t
r
a
t
s
w
o
l
f
f
o
F
D
C
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
naive
corrected
0
100 200 300 400 500 600 700 800 900 1000
Offset to injection time [ms]
(b) softﬂowd
naive
corrected
0
100 200 300 400 500 600 700 800 900 1000
Offset to injection time [ms]
(a) Cisco
Fig. 4. Corrected and uncorrected ﬂow start times
Here, we see that the ﬂow timestamps calculated from uncorrected basetimes
exhibit a uniform deviation to about 1s, caused mainly by the cyclic error in
the basetime. If the cyclic error were the only remaining error in the data, we
would expect the ﬂow timestamps calculated using the corrected basetimes to
exhibit no more than a few milliseconds of error to account for the one-way delay
between the source and the router at which the ﬂows were measured.
We see this in the softflowd data, as shown in 4(b). This demonstrates that
our cyclic error correction method can completely eliminate the timing error in-
troduced by the design of the NetFlow v9 protocol. However, even after applying
corrected basetimes, there is an additional source of about 70ms of uniformly
distributed error on Cisco routers. Further investigation shows this to be con-
stant across sources and routers, and independent of time, load, or other factors
measured in this work. Therefore, we conclude that this error is implementation-
speciﬁc and an unavoidable property of the packet or ﬂow handling of this speciﬁc
implementation, either within the metering process or between the metering and
exporting processes.
5 Related Work
The question of the ﬁdelity of data used in Internet measurement studies is
well-addressed in the literature. The eﬀects of sampling of packets (e.g., as in
[4]) as well as ﬂows (e.g., as in [5]) have been widely studied. However, these
works tend to be theoretical, focusing more on the mathematical properties of
the techniques used and the essential tradeoﬀ between overhead and utility than
on the eﬀects of speciﬁc implementations or protocols used in the collection of
the data used.
Sommer and Feldmann [6] examined the information loss associated with ﬂow
measurement as opposed to directly operating on packet data, and ﬁnd that
for one particular application, TCP connection summary generation, ﬂow data
suﬃces “[using] large enough time intervals”: an acknowledgement of the impact
that ﬂow timeouts and timing in general have on later analysis.
202
B. Trammell et al.
Paxson [7], in establishing a set of best practices for Internet measurement
studies, classiﬁes sources of error into precision, accuracy, and misconception.
It discusses timing precision and accuracy and discusses the need to consider
and calibrate for measurement infrastructure induced error in source data sets.
It advocates the export of metadata along with source data for measurement
studies, a call we reiterate in our conclusions.
A closer antecedent for the present work is Cunha et. al. [8], which provides a
similar study of largely implementation-related artifacts in ﬂow data produced
by the Juniper routers which generated commonly-used datasets from Abilene
and GEANT. These artifacts were related to timeout and ﬂow cache expiry, and
as such have a destructive impact on the distribution of ﬂow duration.
The IETF addressed various design issues with NetFlow v9 in the speciﬁca-
tion of the IPFIX protocol [9]. Crucially, IPFIX supports ﬂexible timestamps
from second to nanosecond resolution, and allows the association of an absolute
timestamp with every ﬂow. As it does not mandate the export of potentially
inconsistent timestamps in each message, it does not suﬀer from the cyclic error
we present in this work. However, it does not necessarily address other sources
of inaccuracy within the implementation of the metering or exporting process.
6 Conclusions
In seeking to maximize the timing precision available from data exported via
Cisco NetFlow v9, we discovered and quantiﬁed a cyclic source of up to one sec-
ond of error in ﬂow timestamps, inherent in the design of the protocol. Correcting
this cyclic error can improve the accuracy of NetFlow v9 data to millisecond-
level. However, inaccuracy remains within the examined Cisco implementation
which we do not have suﬃcient information to correct, limiting our eﬀective cor-
rection for our production dataset to one order of magnitude, for about 70ms
accuracy.
The set of routers from which we receive NetFlow v9 data represents an
admittedly small sample of deployed implementations. However, the cyclic error
is a protocol issue. It is therefore implementation-independent, and should aﬀect
NetFlow v9 export from any vendor. We note that an implementation built with
an awareness of the cyclic error could avoid it, by faking the system uptime
and/or export timestamps in order to export real basetimes, but we did not
observe this behavior in any examined NetFlow implementation.
In addition, we presume that similarities in NetFlow v9 metering and export
process implementations could lead to implementation-speciﬁc sources of error
similar to those we observed on Cisco devices on implementations from other
vendors. These measurements are an area for future work. The guidance to take
from our work in any case is this: researchers using NetFlow v9 data sets should
not assume better than second-level accuracy unless employing a method for
correcting cyclic basetime error such as the one we present here, and should
measure the residual error speciﬁc to their metering and exporting processes.
In this work, we were able to observe and correct timing error from the Net-
ﬂow v9 export packet headers which is not apparent from an examination of
Peeling Away Timing Error in NetFlow Data
203
ﬂow data alone. This leads us to reiterate the call in [7] to export and maintain
implementation-speciﬁc metadata alongside ﬂow data used for research. Our ex-
perience in this work additionally indicates the wisdom of keeping measurement
data in as “raw” a form as possible. While all ﬂow data is theoretically the same,
and should be freely convertible among formats, this is not the case in practice:
as we have shown, implementation matters.
Acknowledgments
The authors would like to acknowledge SWITCH for providing the data used in
this study. Thanks as well to the European Commission for its material support
of this work through the DEMONS project (FP7-257315).
References
1. Claise, B., Sadasivan, G., Valluri, V., Djernaes, M.: Cisco Systems NetFlow Services
Export Version 9. RFC 3954 (Informational) (October 2004)
2. Trammell, B., Boschi, E.: Bidirectional Flow Export Using IP Flow Information
Export (IPFIX). RFC 5103 (Proposed Standard) (January 2008)
3. Sadasivan, G., Brownlee, N., Claise, B., Quittek, J.: Architecture for IP Flow Infor-
mation Export. RFC 5470 (Informational) (March 2009)
4. Brauckhoﬀ, D., Salamatian, K., May, M.: A signal processing view on packet
sampling and anomaly detection. In: Proceedings of INFOCOM 2010, San Diego,
California, USA, pp. 713–721. IEEE, Los Alamitos (2010)
5. Choi, B.Y., Bhattacharyya, S.: Observations on Cisco sampled NetFlow.
SIGMETRICS Perform. Eval. Rev. 33, 18–23 (2005)
6. Sommer, R., Feldmann, A.: Netﬂow: information loss or win? In: Proceedings of
IMW 2002, Marseille, France, pp. 173–174. ACM, New York (2002)
7. Paxson, V.: Strategies for sound internet measurement. In: Proceedings of IMC
2004, Taormina, Sicily, Italy, pp. 263–271. ACM, New York (2004)
8. Cunha, ´I., Silveira, F., Oliveira, R., Teixeira, R., Diot, C.: Uncovering artifacts of
ﬂow measurement tools. In: Moon, S.B., Teixeira, R., Uhlig, S. (eds.) PAM 2009.
LNCS, vol. 5448, pp. 187–196. Springer, Heidelberg (2009)
9. Claise, B.: Speciﬁcation of the IP Flow Information Export (IPFIX) Protocol for
the Exchange of IP Traﬃc Flow Information. RFC 5101 (Proposed Standard)
(January 2008)