所有这些事件都可以随时 **抢占（preempt）** 正在执行的执行绪，并在稍后的时间恢复执行，而执行绪甚至不会注意到这一点。这个问题类似于在单个机器上使多执行绪程式码执行绪安全：你不能对时序做任何假设，因为随时可能发生上下文切换，或者出现并行执行。
当在一台机器上编写多执行绪程式码时，我们有相当好的工具来实现执行绪安全：互斥量、讯号量、原子计数器、无锁资料结构、阻塞伫列等等。不幸的是，这些工具并不能直接转化为分散式系统操作，因为分散式系统没有共享记忆体，只有透过不可靠网路传送的讯息。
分散式系统中的节点，必须假定其执行可能在任意时刻暂停相当长的时间，即使是在一个函式的中间。在暂停期间，世界的其它部分在继续运转，甚至可能因为该节点没有响应，而宣告暂停节点的死亡。最终暂停的节点可能会继续执行，在再次检查自己的时钟之前，甚至可能不会意识到自己进入了睡眠。
#### 响应时间保证
在许多程式语言和作业系统中，执行绪和程序可能暂停一段无限制的时间，正如讨论的那样。如果你足够努力，导致暂停的原因是 **可以** 消除的。
某些软体的执行环境要求很高，不能在特定时间内响应可能会导致严重的损失：控制飞机、火箭、机器人、汽车和其他物体的计算机必须对其感测器输入做出快速而可预测的响应。在这些系统中，软体必须有一个特定的 **截止时间（deadline）**，如果截止时间不满足，可能会导致整个系统的故障。这就是所谓的 **硬实时（hard real-time）** 系统。
> #### 实时是真的吗？
>
> 在嵌入式系统中，实时是指系统经过精心设计和测试，以满足所有情况下的特定时间保证。这个含义与 Web 上对实时术语的模糊使用相反，后者描述了伺服器将资料推送到客户端以及没有严格的响应时间限制的流处理（见 [第十一章](ch11.md)）。
例如，如果车载感测器检测到当前正在经历碰撞，你肯定不希望安全气囊释放系统因为 GC 暂停而延迟弹出。
在系统中提供 **实时保证** 需要各级软体栈的支援：一个实时作业系统（RTOS），允许在指定的时间间隔内保证 CPU 时间的分配。库函式必须申明最坏情况下的执行时间；动态记忆体分配可能受到限制或完全不允许（实时垃圾收集器存在，但是应用程式仍然必须确保它不会给 GC 太多的负担）；必须进行大量的测试和测量，以确保达到保证。
所有这些都需要大量额外的工作，严重限制了可以使用的程式语言、库和工具的范围（因为大多数语言和工具不提供实时保证）。由于这些原因，开发实时系统非常昂贵，并且它们通常用于安全关键的嵌入式装置。而且，“**实时**” 与 “**高效能**” 不一样 —— 事实上，实时系统可能具有较低的吞吐量，因为他们必须让及时响应的优先顺序高于一切（另请参阅 “[延迟和资源利用](#延迟和资源利用)”）。
对于大多数伺服器端资料处理系统来说，实时保证是不经济或不合适的。因此，这些系统必须承受在非实时环境中执行的暂停和时钟不稳定性。
#### 限制垃圾收集的影响
程序暂停的负面影响可以在不诉诸昂贵的实时排程保证的情况下得到缓解。语言执行时在计划垃圾回收时具有一定的灵活性，因为它们可以跟踪物件分配的速度和随著时间的推移剩余的空闲记忆体。
一个新兴的想法是将 GC 暂停视为一个节点的短暂计划中断，并在这个节点收集其垃圾的同时，让其他节点处理来自客户端的请求。如果执行时可以警告应用程式一个节点很快需要 GC 暂停，那么应用程式可以停止向该节点发送新的请求，等待它完成处理未完成的请求，然后在没有请求正在进行时执行 GC。这个技巧向客户端隐藏了 GC 暂停，并降低了响应时间的高百分比【70,71】。一些对延迟敏感的金融交易系统【72】使用这种方法。
这个想法的一个变种是只用垃圾收集器来处理短命物件（这些物件可以快速收集），并定期在积累大量长寿物件（因此需要完整 GC）之前重新启动程序【65,73】。一次可以重新启动一个节点，在计划重新启动之前，流量可以从该节点移开，就像 [第四章](ch4.md) 里描述的滚动升级一样。
这些措施不能完全阻止垃圾回收暂停，但可以有效地减少它们对应用的影响。
## 知识、真相与谎言
本章到目前为止，我们已经探索了分散式系统与执行在单台计算机上的程式的不同之处：没有共享记忆体，只有透过可变延迟的不可靠网路传递的讯息，系统可能遭受部分失效，不可靠的时钟和处理暂停。
如果你不习惯于分散式系统，那么这些问题的后果就会让人迷惑不解。网路中的一个节点无法确切地知道任何事情 —— 它只能根据它透过网路接收到（或没有接收到）的讯息进行猜测。节点只能透过交换讯息来找出另一个节点所处的状态（储存了哪些资料，是否正确执行等等）。如果远端节点没有响应，则无法知道它处于什么状态，因为网路中的问题不能可靠地与节点上的问题区分开来。
这些系统的讨论与哲学有关：在系统中什么是真什么是假？如果感知和测量的机制都是不可靠的，那么关于这些知识我们又能多么确定呢？软体系统应该遵循我们对物理世界所期望的法则，如因果关系吗？
幸运的是，我们不需要去搞清楚生命的意义。在分散式系统中，我们可以陈述关于行为（系统模型）的假设，并以满足这些假设的方式设计实际系统。演算法可以被证明在某个系统模型中正确执行。这意味著即使底层系统模型提供了很少的保证，也可以实现可靠的行为。
但是，尽管可以使软体在不可靠的系统模型中表现良好，但这并不是可以直截了当实现的。在本章的其余部分中，我们将进一步探讨分散式系统中的知识和真相的概念，这将有助于我们思考我们可以做出的各种假设以及我们可能希望提供的保证。在 [第九章](ch9.md) 中，我们将著眼于分散式系统的一些例子，这些演算法在特定的假设条件下提供了特定的保证。
### 真相由多数所定义
设想一个具有不对称故障的网路：一个节点能够接收发送给它的所有讯息，但是来自该节点的任何传出讯息被丢弃或延迟【19】。即使该节点执行良好，并且正在接收来自其他节点的请求，其他节点也无法听到其响应。经过一段时间后，其他节点宣布它已经死亡，因为他们没有听到节点的讯息。这种情况就像梦魇一样：**半断开（semi-disconnected）** 的节点被拖向墓地，敲打尖叫道 “我没死！” —— 但是由于没有人能听到它的尖叫，葬礼队伍继续以坚忍的决心继续行进。
在一个稍微不那么梦魇的场景中，半断开的节点可能会注意到它传送的讯息没有被其他节点确认，因此意识到网路中必定存在故障。尽管如此，节点被其他节点错误地宣告为死亡，而半连线的节点对此无能为力。
第三种情况，想象一个正在经历长时间 **垃圾收集暂停（stop-the-world GC Pause）** 的节点，节点的所有执行绪被 GC 抢占并暂停一分钟，因此没有请求被处理，也没有响应被传送。其他节点等待，重试，不耐烦，并最终宣布节点死亡，并将其丢到灵车上。最后，GC 完成，节点的执行绪继续，好像什么也没有发生。其他节点感到惊讶，因为所谓的死亡节点突然从棺材中抬起头来，身体健康，开始和旁观者高兴地聊天。GC 后的节点最初甚至没有意识到已经经过了整整一分钟，而且自己已被宣告死亡。从它自己的角度来看，从最后一次与其他节点交谈以来，几乎没有经过任何时间。
这些故事的寓意是，节点不一定能相信自己对于情况的判断。分散式系统不能完全依赖单个节点，因为节点可能随时失效，可能会使系统卡死，无法恢复。相反，许多分散式演算法都依赖于法定人数，即在节点之间进行投票（请参阅 “[读写的法定人数](ch5.md#读写的法定人数)”）：决策需要来自多个节点的最小投票数，以减少对于某个特定节点的依赖。