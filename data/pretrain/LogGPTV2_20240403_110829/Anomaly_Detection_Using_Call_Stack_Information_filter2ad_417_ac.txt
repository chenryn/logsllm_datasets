threads. As far as we can distinguish which thread gen-
erates a system call, there is no problem for applying our
method on multi-threaded applications. For Linux, differ-
ent threads actually have different process IDs, so we can
distinguish threads by distinguishing their IDs. For other
ﬂavors of UNIX, we can try to ﬁnd other ways to distin-
guish threads.
5 Experimental Evaluation
In this section, we present results from our experiments.
We ﬁrst describe the experiments on comparing VtPath with
FSA in terms of convergence time, false positives, over-
head, and detection of common root exploits. We then de-
scribe the experiments on evaluating the effectiveness of
VtPath against some attacks, including impossible path ex-
ploits, that can evade several other detection models, and
discuss the lessons learned.
5.1 Experiments on Comparing VtPath with FSA
Sekar et al. conducted experiments on normal data for
some security-critical daemon programs [16]. They showed
FSA uniformly worked better than N-gram in the sense
of convergence speed, false positive rates and overhead.
We conducted similar experiments to compare our VtPath
method with FSA.
If all functions are statically linked, for the same pro-
gram run, whenever there is a new transition for FSA, there
is also a new virtual path for VtPath. This is because the vir-
tual path contains all the information of the corresponding
transition. So generally speaking, virtual paths are more
speciﬁc than transitions. For VtPath, we should expect a
slower convergence speed, a higher false positive rate and a
higher detection rate. When DLLs are involved, the situa-
tion is somewhat complicated. As FSA simpliﬁes DLL be-
havior model, it should have even faster convergence speed,
fewer false positives, and lower detection rate. But there
are situations where the simpliﬁcation may also increase the
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
convergence time and false positives. This is because one
intra DLL function transition may map to different transi-
tions at different DLL function call points, due to stack tra-
verse to the statically linked portion. The situation becomes
severe if some frequently called DLL functions have many
intra-function transitions. For programs using a lot of sig-
nal handling, the convergence time and false positive rates
of VtPath will beneﬁt from its signal handling mechanism.
We conducted experiments on security critical daemon
programs ftpd and httpd. We used the original FSA im-
plementation from the authors, and compared VtPath with
it. For fairness, all the comparison was based on data col-
lected from the same program runs. The experiments were
conducted on a RedHat 7.2 workstation with dual Pentium
III 500MHz processors. We used WebStone 2.5 benchmark
suite to generate HTTP trafﬁc [13]. The ﬁles and visiting
distribution were copied from our laboratory web server.
For FTP experiments, we wrote some scripts using the “ex-
pect” tool. These scripts can execute commands that mimic
some common user activities, such as downloading or up-
loading ﬁles and directories. The scripts were randomly ex-
ecuted to exercise the FTP server. The ﬁles were copied
from one lab user’s home directory.
We found out some bugs in the original FSA implemen-
tation, which contributed to higher false positive rates and
slower convergence. We modiﬁed the programs and created
our own FSA implementation. We will present our results
for the VtPath implementation and both FSA implementa-
tions.
5.1.1 Convergence
The training process is considered as converged if the nor-
mal proﬁle stops increasing (i.e., with no new behavior
added). The convergence speed is important because the
faster the training converges the less time and effort are
needed. For FSA, the normal proﬁle consists of states and
transitions. There is always a new transition whenever there
is a new state because the state is a part of the corresponding
transition. The above statements are also true for VtPath if
we use “return address” instead of “state” and “virtual path”
instead of “transition”. Therefore, we believe that the num-
ber of virtual paths or transitions is a good metric to mea-
sure convergence speed because the proﬁle stops increasing
if this number stops increasing. These numbers are plotted
against the numbers of system calls used for training, which
are presented in logarithmic scale.
We made a program to start the daemon program, and
simultaneously record the traces for both methods. When
the number of system calls made exceeds a preset limit, the
program stops the daemon program. By this way, we gen-
erate traces with different lengths. We apply these traces
incrementally starting from the shortest traces for training
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
on both methods. Every time a trace is applied, the proﬁle
is copied and the convergence metric is calculated.
Figure 2 shows the results for ftpd. The solid line
with star marks is for VtPath; the dashed line with square
marks is for our FSA implementation; the dotted line with
circle marks is for the original FSA implementation. The
interesting thing is that the number of virtual paths actu-
ally increases more slowly than the number of transitions.
This may be due to the DLL or signal handling related is-
sues discussed at the beginning of this section. The original
FSA implementation generates even more number of transi-
tions. For VtPath and our FSA implementation, the proﬁle
increase stops after about 5M system calls are processed.
The httpd experiments show similar results in terms of
the comparisons between the methods.
1000 
s
n
o
i
t
i
s
n
a
r
t
r
o
s
h
t
a
p
l
a
u
t
r
i
v
f
o
#
800 
600 
400 
200 
0 
103
VtPath  Method
FSA Method (our impl.)
FSA Method (orig. impl.)
104
Training period (# of system calls)
105
106
107
Figure 2. Convergence on ftpd
In our httpd experiments, less than 1% of the system
calls are actually made in the statically linked portion. For
more than 30% of the system calls, FSA has to go back
at least 3 call stack frames to ﬁnd a return address in stat-
ically linked portion. This means at least 3 levels of DLL
functions are called for 30% of the system calls. These facts
may suggest that DLLs are very important, and the simpliﬁ-
cation of DLL behavior by FSA may have severely impaired
its detection capability.
5.1.2 False Positives
For ftpd experiments, we collect several normal testing
traces ranging from 1M to several million system calls for
each method, with a script execution distribution slightly
different from what was used for the convergence experi-
ments. As Sekar et al. argued in [16], this is to account for
the fact that things may change between the training and de-
tecting times. We use the proﬁles saved in the convergence
experiments to analyze these testing traces. Like what Sekar
et al. did in [16], each mismatched return address (state) or
virtual path (transition) is counted as a false positive. The
false positive rates are calculated as the number of false pos-
itives over the number of system calls in each trace, and
averaged over the several testing traces for each method.
Figure 3 shows the relationship between the average
false positive rate and the number of system calls used for
training for ftpd experiments. Note both axes are in log-
arithmic scale. VtPath has almost the same false positive
rates as our FSA implementation. Actually, using the pro-
ﬁles corresponding to more than 1M system calls, there is
no false positives on all testing traces. The original FSA
implementation generates much higher false positive rates
at most points. Our httpd experiments show similar re-
sults in terms of comparisons between the methods.
l
l
a
c
m
e
t
s
y
s
r
e
p
s
e
v
i
t
i
s
o
p
e
s
a
F
l
10−1
10−2
10−3
10−4
10−5
10−6
103
VtPath  Method
FSA Method (our impl.)
FSA Method (orig. impl.)
104
Training period (# of System calls)
105
106
107
Figure 3. False positive rates on ftpd
5.1.3 Runtime and Space Overhead
We use the same user-level mechanism to intercept system
calls as FSA. As pointed out by Sekar et al. [16], this mech-
anism incurs relatively high runtime overhead. They esti-
mated that system call interception incurs 100% to 250%
runtime overhead, while the overhead of their algorithm ex-
ecution is only about 3%. For real applications, we want to
use kernel-level mechanisms that incur much lower system
call interception overhead. In this section, we only compare
the algorithm execution overhead for both methods.
We use the average process time per system call stop
to evaluate the algorithm runtime overhead. In our exper-
iments, for FSA, the value is about 350 milliseconds for
training and 250 milliseconds for detection. For VtPath, the
value is about 150 milliseconds for both training and de-
tection. It is interesting that the VtPath algorithm actually
executes faster because, theoretically, it should be a little
bit slower since it needs to do more work. The reason may
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
be that we paid much attention on efﬁciency for our VtPath
implementation.
The space overhead for VtPath, however, is higher than
FSA. This is because it needs to save more information of
call stack. For our ftpd experiments, the proﬁles that the
FSA code creates are about 10K bytes, while the proﬁles
that the VtPath code creates are about 30K bytes. These
proﬁles should require less spaces when loaded into mem-
ory because the proﬁles saved on disk are human readable.
5.1.4 Detection of Common Exploits
We have also tested VtPath and FSA against several recent
local and remote root exploits, namely efstool (local root),
dhcpd v3.0.1rc8, and gdm v2.0beta1-4. Both VtPath and
FSA successfully detected all of these exploits in our exper-
iments.
5.2
Impossible Path Exploits and Beyond
We implemented two example attacks, including an im-
possible path exploit ﬁrst introduced in [17], to demonstrate
the effectiveness of the VtPath approach. The attacks were
realized and tested on a RedHat 7.3 machine.
We evaluate the implementation of our approach as well
as related approaches such as abstract stack, N-gram, call-
graph, and FSA, under the same conditions to determine
how effective the approaches are against the test attacks we
develop. In our experiments, we use working implementa-
tions of N-gram and FSA we received from the authors (the
bugs we found do not impair the detection ability of FSA
for our test attacks). For abstract stack and callgraph, we do
not have access to the implementations and thus we do all
the tests manually using the algorithms described in [17].
Our approach is able to detect both attacks 1 and 2 de-
scribed below. None of the other approaches we analyze
detect either of them. We have also tested our approach
against the mimicry attacks described in [18]. We ﬁnd that
our approach as well as FSA is able to detect the mimicry
attacks. However, we ﬁnd a way to improve the mimicry at-
tacks to make them invisible to FSA. We achieve this by ma-
nipulating the stack contents that are analyzed by FSA im-
plementation in such a way that FSA will mistakenly trace