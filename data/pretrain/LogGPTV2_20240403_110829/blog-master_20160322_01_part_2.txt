#endif    
            result = strcoll(a1p, a2p);    
        /*    
         * In some locales strcoll() can claim that nonidentical strings are    
         * equal.  Believing that would be bad news for a number of reasons,    
         * so we follow Perl's lead and sort "equal" strings according to    
         * strcmp().    
         */    
        if (result == 0)    
            result = strcmp(a1p, a2p);    
        if (a1p != a1buf)    
            pfree(a1p);    
        if (a2p != a2buf)    
            pfree(a2p);    
    }    
    return result;    
}    
```  
在创建索引时也需要注意这一点，collate一定要和实际SQL中的collate匹配。  
```  
postgres=# create table test(id int , info text collate "zh_CN");    
CREATE TABLE    
postgres=# insert into test select generate_series(1,10000),md5(random()::text);    
INSERT 0 10000    
postgres=# \l+    
                                                               List of databases    
   Name    |  Owner   | Encoding | Collate | Ctype |   Access privileges   |  Size   | Tablespace |                Description                     
-----------+----------+----------+---------+-------+-----------------------+---------+------------+--------------------------------------------    
 postgres  | postgres | UTF8     | C       | C     |                       | 7960 kB | pg_default | default administrative connection database    
 template0 | postgres | UTF8     | C       | C     | =c/postgres          +| 7129 kB | pg_default | unmodifiable empty database    
           |          |          |         |       | postgres=CTc/postgres |         |            |     
 template1 | postgres | UTF8     | C       | C     | =c/postgres          +| 7129 kB | pg_default | default template for new databases    
           |          |          |         |       | postgres=CTc/postgres |         |            |     
(3 rows)    
postgres=# create index idx_test on test(info);  -- 建索引不指定collate则使用的是表结构中的collate    
CREATE INDEX    
postgres=# explain select * from test where info='abc';  -- 查询是不使用collate则使用的是表结构中的collate    
                              QUERY PLAN                                  
----------------------------------------------------------------------    
 Index Scan using idx_test on test  (cost=0.29..8.30 rows=1 width=37)    
   Index Cond: (info = 'abc'::text)    
(2 rows)    
postgres=# explain select * from test where info='abc' collate "C";  -- 与索引不一样的collate, 不能走索引    
                      QUERY PLAN                           
-------------------------------------------------------    
 Seq Scan on test  (cost=0.00..209.00 rows=1 width=37)    
   Filter: (info = 'abc'::text COLLATE "C")    
(2 rows)    
postgres=# explain select * from test where info='abc' collate "zh_CN";  -- 与索引一样的collate, 能走索引    
                              QUERY PLAN                                  
----------------------------------------------------------------------    
 Index Scan using idx_test on test  (cost=0.29..8.30 rows=1 width=37)    
   Index Cond: (info = 'abc'::text COLLATE "zh_CN")    
(2 rows)    
postgres=# drop index idx_test;    
DROP INDEX    
postgres=# create index idx_test on test(info collate "C");    
CREATE INDEX    
postgres=# explain select * from test where info='abc' collate "zh_CN"; -- 与索引不一样的collate, 不能走索引    
                      QUERY PLAN                           
-------------------------------------------------------    
 Seq Scan on test  (cost=0.00..209.00 rows=1 width=37)    
   Filter: (info = 'abc'::text COLLATE "zh_CN")    
(2 rows)    
postgres=# explain select * from test where info='abc' collate "C"; -- 与索引一样的collate, 能走索引    
                              QUERY PLAN                                  
----------------------------------------------------------------------    
 Index Scan using idx_test on test  (cost=0.29..8.30 rows=1 width=37)    
   Index Cond: (info = 'abc'::text COLLATE "C")    
(2 rows)    
```  
性能也有一定的差异：  
用collate C显然要好一点。  
```  
-> pgbench -M prepared -n -r -P 1 -f ./test.sql -c 24 -j 24 -T 10    
progress: 1.0 s, 341151.9 tps, lat 0.068 ms stddev 0.028    
progress: 2.0 s, 343049.3 tps, lat 0.068 ms stddev 0.032    
progress: 3.0 s, 343784.8 tps, lat 0.068 ms stddev 0.025    
progress: 4.0 s, 342717.9 tps, lat 0.068 ms stddev 0.040    
progress: 5.0 s, 343661.1 tps, lat 0.068 ms stddev 0.027    
progress: 6.0 s, 343550.0 tps, lat 0.068 ms stddev 0.026    
progress: 7.0 s, 343515.6 tps, lat 0.068 ms stddev 0.024    
progress: 8.0 s, 343560.9 tps, lat 0.068 ms stddev 0.029    
progress: 9.0 s, 342749.7 tps, lat 0.068 ms stddev 0.044    
progress: 10.0 s, 343844.8 tps, lat 0.068 ms stddev 0.024    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 24    
number of threads: 24    
duration: 10 s    
number of transactions actually processed: 3431607    
latency average: 0.068 ms    
latency stddev: 0.031 ms    
tps = 343145.601594 (including connections establishing)    
tps = 343323.296483 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.067984        select 'A'>'a' collate "C";    
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 24 -j 24 -T 10    
progress: 1.0 s, 330980.7 tps, lat 0.070 ms stddev 0.027    
progress: 2.0 s, 331546.4 tps, lat 0.071 ms stddev 0.024    
progress: 3.0 s, 333500.7 tps, lat 0.070 ms stddev 0.021    
progress: 4.0 s, 333055.7 tps, lat 0.070 ms stddev 0.027    
progress: 5.0 s, 332833.6 tps, lat 0.070 ms stddev 0.041    
progress: 6.0 s, 329527.4 tps, lat 0.071 ms stddev 0.068    
progress: 7.0 s, 330480.3 tps, lat 0.071 ms stddev 0.078    
progress: 8.0 s, 333344.7 tps, lat 0.070 ms stddev 0.023    
progress: 9.0 s, 333602.3 tps, lat 0.070 ms stddev 0.022    
progress: 10.0 s, 332386.7 tps, lat 0.071 ms stddev 0.039    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 24    
number of threads: 24    
duration: 10 s    
number of transactions actually processed: 3321288    
latency average: 0.071 ms    
latency stddev: 0.042 ms    
tps = 332067.898747 (including connections establishing)    
tps = 332233.047809 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.070443        select 'A'>'a' collate "zh_CN";    
```  
## 参考  
http://www.postgresql.org/docs/9.5/static/sql-createtable.html  
http://www.postgresql.org/docs/9.5/static/sql-altertable.html  
http://www.postgresql.org/docs/9.5/static/sql-expressions.html#SQL-SYNTAX-COLLATE-EXPRS  
http://www.postgresql.org/docs/9.5/static/sql-createindex.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")