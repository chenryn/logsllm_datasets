# Kubernetes集群渗透
## 作者
- **Zhaoyan Xu**：资深研究工程师，Palo Alto Networks
- **Tongbo Luo**：首席AI安全科学家，JD.com

## 日期
2019年5月29日

## 日程
1. 背景
2. Kubernetes的安全特性
3. 攻击方式
4. 横向运动实践
5. 答疑

## 背景
- **Kubernetes的普及度**
  - Kubernetes在全球范围内广受欢迎。
  - 所有主流云提供商都提供Kubernetes集群服务，如AKS、EKS和GKE等。
  - 根据iDatalabs[1]的报告，大约有3,804家公司使用Kubernetes进行Web应用程序部署。
  - 年度用户增长率超过150%。

- **安全性问题**
  - Kubernetes的安全性如何？
  - Kubernetes是否容易受到传统攻击？
  - Kubernetes集群的新攻击方式有哪些？
  - 如何在Kubernetes集群上进行渗透测试？

### 容器化微服务要点
- **Service Mesh层**
  - Istio
  - Linkerd
- **Orchestrator层**
  - Kubernetes
  - OpenShift
- **容器应用层**
  - Docker
  - Kata Container
  - Rkt

### Kubernetes要点
- **服务端组件**
  - `api-server`：中央服务器
  - `Controller-manager`
  - `Scheduler`
  - `Authentication/Authorization/Admission Control`
  - `etcd`：键值存储
- **客户端组件**
  - `kubelet`：安装在每个主机/虚拟主机上
  - `kubeproxy`：流量管理/重定向

### Kubernetes术语
- **Pod**：服务计划的最小单位，包含一个或多个容器。
- **Deployment**：捆绑一个Web应用程序，例如将数据库、前端和后端服务器组合在一起。
- **Service**：用于公开Web应用程序的接口。
- **Service Account**：Kubernetes中的用户账户。
- **Role/Rolebinding**：Kubernetes中基于角色的访问控制。

## Kubernetes安全功能概述（v1.12.7）
- **隔离**
  - Pod级隔离
  - 命名空间隔离的网络安全策略
- **认证**
  - 所有流量的HTTP
  - 令牌、客户端证书、第三方身份验证
- **授权**
  - 基于角色的访问控制
  - 准入控制（用于Pod、部署等）
- **预置的管理控制**
  - Pod安全策略

### 隔离躲避
- **网络扫描**
  - **问题**：网络隔离通常是通过容器网络接口（CNI）强制执行的第三方插件。但大多数第三方插件都存在漏洞，有些插件无法实施网络安全策略。
  - **CNI插件对比**
    | 插件 | 网络模型 | 支持网络策略 | 通讯加密 |
    | --- | --- | --- | --- |
    | Calico | Layer 3 | 是 | 加密 |
    | Canal | Layer 2, vxlan | 是 | 非加密 |
    | Flannel | Layer 2, vxlan | 否 | 非加密 |
    | Kopeio | Layer 2, vxlan | 否 | 非加密 |
    | Kube-router | Layer 2, vxlan | 是 | 非加密 |

- **问题**：Kubernetes在命名空间`kube-system`中有默认服务Pod，默认情况下，集群中的任何Pod都可以访问这些服务。
  - **示例**：`kube-dns` Pod，CVE-2017-14491
  - **问题**：`api-server`可以通过端口6443上的任何Pod访问。如果`api-server`允许匿名访问，它会泄露您的集群信息。
  - **示例**：CVE-2018-1002105

### RBAC躲避
- **认证绕过**
  - **问题**：某些CNI插件不会加密流量，因此如果`api-server`不使用HTTPS，则令牌可能被盗。
  - **问题**：如果撤销角色，则不会自动终止关联的Pod。因此它仍然具有被撤销角色的特权。
- **认证滥用**
  - **问题**：隐式访问流程
  - **示例**
    ```bash
    kubectl create clusterrole secretadmin --verb=get --verb=list --verb=create --verb=update --resource=secret
    ```
  - 如果没有密码管理权限，就无法运行`kubectl get secret`来获取秘密。但是，如果您有权创建Pod：
    - 通过一个新的Pod嵌入秘密
    - **可能的修复措施**：定义`PodSecurityPolicy`，并定义不允许嵌入秘密。

- **隐性权限提升**
  - **问题**：Pod可以通过关联其他服务帐户来升级其权限。
  - **示例**：用户与服务帐户`sa1`相关联，但他可以使用另一个服务帐户`sa2`创建一个Pod。
- **特权提升**
  - **问题**：Kubernetes允许Pod映射主机路径，例如`/tmp/`、`/var/log`。
  - **特别是**，如果使用子路径装入卷，它会将原始主机文件映射到Pod的命名空间。
  - **漏洞**：CVE-2017-1002101

## Kubernetes的渗透攻击
- **问**：从攻击者的角度来看，如何针对Kubernetes集群发起横向移动？
- **挑战**：如何实现持久性？
  - **难度**：很难，为什么？
    - Pod的瞬态生命周期
    - Pod的有限特权
  - **方法**：
    - 注入内核，如：特权容器
    - 注入主机，如：特权提升
    - 注入持久存储
    - ...

### 攻击者的军火库
- **潜在方法**
  - **入侵一个Pod (完全控制)**
    - **难度**：中等
    - **持续性**：取决于实际情况
    - **前置条件**：
      - Pod将其服务暴露给外部
      - Pod的镜像存在漏洞
    - **问题**：
      - Pod的瞬态生命周期
      - Pod的有限特权
  - **从受损的Pod中入侵api-server**
    - **难度**：困难
    - **持续性**：是
    - **前置条件**：
      - Pod可以访问api-server
      - api-server存在漏洞
    - **问题**：
      - Pod对api-server的有限权限
      - 很难在api-server中找到漏洞
  - **扫描网络**
    - **难度**：简单
    - **持续性**：否
    - **前置条件**：
      - Flat网络
    - **问题**：
      - 易被检测
  - **集群侦察**
    - **难度**：简单
    - **持续性**：否
    - **前置条件**：
      - Flat网络
      - 可以访问api-server
  - **来自被入侵的Pod的DDoS攻击**
    - **难度**：简单
    - **持续性**：否
    - **前置条件**：
      - Pod可以访问网络
      - Pod已创建Pod权限
    - **问题**：
      - 易被检测

- **绕过RBAC**
  - **难度**：简单
  - **持续性**：取决于实际情况
  - **前置条件**：
    - 被控制的Pod具有创建Pod权限
    - 需要了解高特权服务帐户
- **进入内核**
  - **难度**：简单
  - **持续性**：是
  - **前置条件**：
    - 被控制的Pod是一个特权Pod
- **利用容器运行时漏洞**
  - **难度**：困难
  - **持续性**：是
  - **前置条件**：
    - Hostpath Mount 权限
- **映射 docker.sock**
  - **难度**：中等
  - **持续性**：是
  - **前置条件**：
    - Hostpath Mount 权限
- **将恶意软件下载到持久性存储**
  - **难度**：简单
  - **持续性**：是
  - **前置条件**：
    - Pod可以访问持久性存储
    - 需要创建Pod权限
  - **问题**：
    - 难以执行恶意软件

### 一个横向运动的例子
1. **第一步**：利用具有远程执行漏洞的Web Portal Pod
2. **第二步**：下载kubectl并查询api-server
   - **嗅探结果**：
     - 被利用的Pod已经与服务帐户SA1创建了Pod权限
     - 还有一个db Pod已经安装了“/tmp/”主机路径
     - db Pod服务帐号为SA2
3. **第三步**：创建一个新的Pod
   - **该Pod**：
     - 具有易受攻击的Web门户镜像
     - 使用服务帐户SA2并挂载/tmp/文件夹
4. **第四步**：利用新的Pod
   - **操作**：
     - 创建/tmp/sym
     - 将/tmp/sym指向/var/run/docker.sock
5. **第五步**：创建另一个新Pod
   - **该Pod**：
     - 使用服务帐户SA2
     - 挂载子路径/tmp/sym，/tmp/sym指向主机/var/run/docker.sock
6. **第六步**：将创建特权容器的命令发送到/tmp/sym
   - **操作**：
     - 新容器具有特权并且可以访问内核

### 备注
1. **谷歌部分修复了子路径漏洞**，目前的解决方案是使子路径文件只读。但如果攻击者将文件指向密码文件，我们仍然认为它会导致信息泄漏等问题。
2. **攻击成功有两个根本原因**：
   - Pod容易受到攻击
   - 关联的服务帐户具有创建Pod权限

## 总结
### Kubernetes安全防护总结
- **网络隔离**
  - 使用支持隔离的CNI插件
- **认证**
  - 禁用匿名访问并使用第三方身份验证服务进行外部访问
- **授权和访问控制**
  - 基于角色的访问控制
  - 启用RBAC
  - 小心地将创建Pod/执行权限授予服务帐户
- **权限控制 - Pod安全策略**
  - 对每个Pod应用最小特权原则
  - 了解特权Pod的潜在影响

### 横向移动总结
- **防止集群中的外部可访问和高权限Pod**
- **授予服务帐户和Pod的最小权限**
- **阻止/检测集群中的扫描流量，并为每个Pod设置适当的资源限制**
- **使用网络安全策略和Pod安全策略来管理Kubernetes集群**
- **升级/修补Kubernetes的漏洞**

### 推荐的防护工具
- **镜像漏洞扫描工具**
  - [Clair](https://github.com/coreos/clair)
  - [Kube-Hunter](https://github.com/aquasecurity/kube-hunter)
- **Kubernetes安全性/合规性检查工具**
  - [CIS Kubernetes Benchmark](https://www.cisecurity.org/benchmark/kubernetes/)
  - [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)
- **Pod安全审计工具**
  - [Kube-PSP-Advisor](https://github.com/sysdiglabs/kube-psp-advisor)
- **运行时Kubernetes监控**
  - [Falco](https://github.com/falcosecurity/falco)

## 答疑
请随时提问！