Yi=0
,
(15)
i (cid:17)!
(cid:16)PJ
j=1 k(j)
j=1(cid:16)k(j)
!(cid:17)
QJ
i
which follows from the number of possible reorderings of the
local transitions between two immediate synchronized transi-
tions.
Using (10), (13), (14), and (15), we can now compute the
expected instantaneous reward for a model. Let (cid:9) be the set
of all sequences of synchronized transitions. Then, the ex-
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
pected instantaneous reward is computed by
1
(cid:12)((cid:3)s; m)
PJ
j=1 Pj j
i +j j = m
i=0 k(j)
X
P rob(j)0
@
j j
Xi=0
(
i 1
A (cid:1)
k(j)
j j
E[Rs] = X 2(cid:9)
Xm=j j
i (cid:17)!
(cid:16)PJ
j=1 k(j)
Yi=0
j=1(cid:16)k(j)
!(cid:17)
QJ
(cid:23)(j)(cid:18)lk(j)
Yj=1
J
i
(cid:1) P robS( ) (cid:1)
J
Yj=1
j (cid:19))
k(j)
j j
0
j
;  1; : : : ;  j j; l
(16)
when the reward is computed from the product of component
rewards. For an additive reward, we must use the summation
of (10) instead of the last product in (16). The equations for
the expected accumulated reward can be derived in a similar
manner.
In summary, the algorithm works by generating the set of
sequences of synchronized transitions. For each sequence, a
class of composable subpaths is explored, and their values are
precomputed using (10) and (13). Afterward, the subpaths are
composed, and their values are used to compute the expected
reward of a model. The subpaths in a class of composable
subpaths may be explored using a depth-(cid:2)rst strategy similar
to that discussed in Section 2.2 to minimize the amount of
memory used to store intermediate results. The algorithm is
storage-ef(cid:2)cient because during each stage of the computa-
tion, only two real values for each subpath are stored. More-
over, it is computationally ef(cid:2)cient because each subpath, as a
redundant computation across many paths, is computed only
once and reused many times.
3.3. An Approach for Selecting Important
Subpaths
Although there are many paths to consider, a large number
of them often contribute little or no reward toward the com-
putation of the bounds on the solution of a model. We can
thus speed up the computation further by identifying impor-
tant paths and discarding those that contribute little or noth-
ing toward tightening of the bounds. While path selection has
been considered by other researchers, our approach is new in
that it bases the selection on additional information available
from the computed subpaths.
There are several subpath factors that directly affect the re-
ward contribution of a path. With respect to (16), one of the
main factors is the subpath reward (cid:23) (i)((cid:25)(i)). If a subpath
has zero reward, all paths composed from it also have zero
reward. Using this insight, we can improve the performance
of the computation if we can identify ef(cid:2)ciently those sub-
paths that contribute no reward and discard them from further
computation.
Starting from (9) and (10), we note that (cid:23) (i)((cid:25)(i)) can be
computed ef(cid:2)ciently by (cid:2)rst computing the projection of a
component reward vector r(i) onto component i. That yields
a projected reward vector that can be cached and reused re-
peatedly. Next, when subpaths are being explored, we can
compute their reward values ef(cid:2)ciently by means of a scalar
product of the subpath state distribution vector and the pro-
jected reward vector. In complexity terms, that incurs a cost
of O(ni) rather than O(n2
i ), where ni is the size of the state
space of component i.
We implement the approach by computing all projected re-
ward vectors and caching them before any subpath is com-
puted. As the subpaths are explored, the projected reward
vectors are used to compute the subpath reward values. Those
subpaths that contribute non-zero reward values are retained
for composition with other subpaths; the rest are discarded
immediately. When a zero-reward subpath is discarded, we
keep the implementation simple by also discarding the suc-
cessive subpaths that can be generated from the zero-reward
subpath. Though the discarded successive subpaths may have
non-zero reward values, their contributions toward tightening
the bounds appear to be negligible in our experiments. In the
next section, we show example results that are obtained using
this approach.
4. Numerical Results
We evaluate our algorithm by studying its performance in
analyzing two models with very different characteristics: a
model of a distributed information service system adapted
from the model in [8] and a model of a media multicast system
inspired by the work of Chu et al. [2]. In the former model, we
evaluate the reliability and availability of the system; in the
latter model, we evaluate the performability properties of the
corresponding system. Moreover, the latter model has more
components, a larger state space, and tighter coupling among
the components. After describing the systems in detail be-
low, we present the performance results and compare them
with the results obtained using our earlier approach described
in [6].
4.1. Model Description of the Distributed
Information Service System
We augment the original model of the distributed informa-
tion service system with synchronized transitions among the
components to describe how faults are propagated through
the system.
In addition, we increase the number of front-
end modules in order to model the occurrence of a fault only
when a majority of the modules are corrupted. We also model
double redundancy in the processing units by adding an ad-
ditional module for every module in the original processing
units. These additions quickly increase the size of our model,
resulting in a model with approximately 2:7 (cid:2) 1018 states, so
large that it could not have been analyzed using traditional
techniques, but can be using our approach.
The model consists of six front-end modules that inter-
act with four processing units. Each processing unit con-
sists of redundant components, including two processors, two
switches, two memory units, and two databases. Each of
the components has its own repair facility. All of them go
through the cycle of Working, Corrupted, Failed, and Re-
paired. The stochastic activity network (SAN) model of the
system is shown in Fig. 1.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. SAN model of a distributed information service system.
Fault propagation in the system is modeled as follows:
(cid:15) When a majority of the six front-end modules are cor-
rupted, the front-end is considered faulty, and it may
propagate the error to any of the four processing units
in which there are two working processors. Propaga-
tion occurs via the synchronized activities between the
front-end and the processors in the processing units. The
front-end or any of the processors may disable the syn-
chronized activities. After propagating the error to a
processing unit, the front-end may remain in the faulty
state and continue to propagate errors to other process-
ing units until the majority fails or are repaired or there
are no more processing units to which the error can be
propagated.
(cid:15) When both processors in a processing unit are corrupted,
they both may propagate the error to their working
switches via a synchronized activity. Any of the involved
components may disable the synchronized activity. Af-
ter the error propagation, the processors may remain in
the corrupted state until they fail.
(cid:15) When both switches of a processing unit are corrupted,
they may propagate their errors to the working memory
units via a synchronized activity. Any of these compo-
nents may disable the activity. After propagating the er-
ror, the switches may remain in the corrupted state until
they fail.
(cid:15) When both memory units of a processing unit are cor-
rupted, they may propagate their errors to the working
databases via a synchronized activity. Any of these com-
ponents may disable the activity. After propagating the
error, the memory units may remain in the corrupted
state until they fail.
We vary activity rates in the submodels and among the
synchronized activities, so the resulting model does not have
symmetries that would allow it to be lumped. Because of
space constraints, we do not list the rates used for the model
here. In total, the model has 5 submodels (modeling 38 com-
ponents) and 4 synchronized activities. Because each compo-
nent has three states, the state space of the whole model has
2 (cid:2) 338 (cid:25) 2:7 (cid:2) 1018 states. We computed the reliability
of the system over the interval [0; 1:0], the point availabil-
ity at time 0:1, and the interval availability over the interval
[0:0; 0:1] when all components in the model were in the work-
ing state.
4.2. Model Description of the Media
Multicast System
The SAN model of the media multicast system is shown
in Fig. 2. The model is parameterized by many variables,
such that by varying the parameters for the activity rates
and buffer sizes, we can measure the sensitivity of the sys-
tem and the likelihood that it will experience buffer over-
(cid:3)ow.
In addition, we can also compute the probability of
having to (cid:3)ush the frame buffers when the system is cor-
rupted. The model consists of a source (CMU) that multicasts
frames to the clients Berkeley, UIUC1, and UWisc. Berkeley
and UIUC1, in turn, multicast the frames further to UCSB,
UIUC2, and UKY. Note that UWisc synchronizes only with
CMU; Berkeley is more tightly connected with CMU and
UCSB; and UIUC1 must synchronize with CMU, UIUC2,
and UKY. The complete model has seven submodels and ap-
proximately 1:9 (cid:2) 1020 states.
Frames are initially generated by the source, CMU. The
tasks of the clients are to decode the frames, process them
(perhaps adding more information to them), and encode them
for further multicast. All of these components may be in any
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2. SAN model of a media multicast system.
one of the operational, corrupted, or failed modes at any in-
stant of time, and they all have their own repair facilities.
They may transmit frames only when they are operational.
When they are corrupted, their frame buffers are (cid:3)ushed, be-
cause the stored frames are presumably corrupted also. The
transmitted frames are dropped when the clients’ buffers are
full.
Thus, the sensitivity of the system depends on the buffer
sizes, the transmission rates, and the processing rates of the
components. By varying these parameters, we can compute
the probability of having a buffer over(cid:3)ow or buffer (cid:3)ushing
at some time after the system has been in operation. In the
next section, we present numerical results from our experi-
mental evaluation. The results are not meant to be represen-
tative of any real system, since the parameters we used were
not taken from a real system. They do show, however, that the
parameters are interdependent and that our algorithm works
correctly in computing the results for the varied parameters.
4.3. Experimental Evaluation
We conducted all of our experiments on a workstation that
had the AMD Athlon XP 2700+ processor running at 2:17
GHz with 1:0 GB of RAM. The operating system was Red
Hat Linux 9.0 with mounted (cid:2)le systems. We compiled our
implementation using the compiler g++ 3.3 with optimization
(cid:3)ag -O3 only.
For the model of the distributed information service
system,
the M¤obius simulation results are 0:99883 (cid:6)
2:11883414 (cid:2) 10(cid:0)4 for the point availability, 0:099934 (cid:6)
1:340263 (cid:2) 10(cid:0)5 for the interval availability, and 0:98616 (cid:6)
7:241023 (cid:2) 10(cid:0)4 for reliability. These results were obtained
at a 95% con(cid:2)dence level.
For the model of the media multicast system, the M¤obius
simulation results are 0:925 (cid:6) 1:63 (cid:2) 10(cid:0)2 for the probability
that the system will experience a buffer over(cid:3)ow and 0:365 (cid:6)
2:99 (cid:2) 10(cid:0)2 for the probability that the system will have to
(cid:3)ush its frame buffers due to a system failure. These results
were also obtained at a 95% con(cid:2)dence level.
Tables 1 and 2 show the results for the availability and reli-
ability measures, respectively, of the model of the distributed
information service system calculated using our path-based
approach. Note that the lower and upper bounds for each
measure converge as the path length increases, because more
paths are computed. Although the path-selection approach
discards zero-reward subpaths and their successive subpaths,
the bound values for this particular model are not affected up
to the seventh signi(cid:2)cant digits in any of the experiments we
performed. Column Basic Algorithm Time (sec) lists the time
taken to evaluate the model through the use of the path-based
approach described in [6]. Column Path Decomposition En-
hanced Algorithm Time (sec) lists the time taken using of our
new algorithm, which makes use of the path-decomposition
and path-selection schemes described in this paper. As shown
in the time columns for both the availability and reliability
results, our new algorithm achieves approximately 80% per-
formance improvement relative to the previous algorithm. As
the path length gets longer, the algorithm performs better. For
example, at the path length of 6 for the availability results, it
achieves almost 85% improvement; at the same path length
for the reliability results, it achieves 87% improvement. We
do not have the timing result for the basic approach at the path
length of 7, because it takes too long to compute.
Tables 3 and 4 show the results for the probabilities of
buffer over(cid:3)ow and buffer (cid:3)ushing, respectively, for the
model of the media multicast system. For this model, the
values of the bounds computed by the basic approach and by
the new algorithm differ somewhat. We list the values of both
bounds in the tables for comparison. In order to understand
better the rates of convergence of the bounds, we provide a
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
Lower Bound
Point
Availability
2.519650e-01
4.978311e-01
7.174581e-01
8.645992e-01
9.434621e-01
9.786854e-01
9.921700e-01
Upper Bound
Table 1. Numerical results for availability
Point
Lower Bound
Upper Bound
Interval
Availability
9.998975e-01
9.996229e-01
9.992548e-01
9.989260e-01
9.987056e-01
9.985875e-01
9.985347e-01
Availability
6.261971e-02
8.131310e-02
9.180509e-02
9.680362e-02
9.885818e-02
9.959795e-02
9.983439e-02
Interval
Availability
9.998443e-02
9.996355e-02
9.994597e-02