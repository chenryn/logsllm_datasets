## Page 136
Android安全攻防实战
Cuses-permission android:name=*android.permissIon, CALL_PHONE* />
Cuses-permission android:name="android. permission.
ACCESS_FINE_LOCATION" />
我已经把一些重点区域加租了，你应该注意到了这个名为
“.services.LocationService”的 service，它可能会通过GPS服务或者地理位置API 来
确定用户所在的地理位置信息，而这一操作却不需要任何权限就能开始！考虑到这
个 app 本身会被赋予 android.permission.ACCESS_COARSE_LOCATION 和 android.
permission.ACCESS_FINE_LOCATION 权限，这也就意味着，如果攻击者能够足够接
近这个service（或许是能够物理访间到这条设备，或许是通过已经安装在用户设备
中的一个恶意app），他就会有很大的机会能够非法使用这一service。
上面这个样例来自于OWASPS 的 GoatDroid项目，其GitHub 代码仓库的链接详
见本实验的“拓展阅读”一节。
嗯，这就是从源码或者开发者/逆向工程师的角度，漏洞看上去的样子。现在让
我们着手使用drozer去攻击一些有漏润的service，并让你从攻击者的角度观察这些
漏洞。
怎么做
下面是你该怎样发现一些有漏洞的service。
1.针对给定的样例app，寻找哪些 service 是导出的。你可以执行下面这条命令，
在drozer的帮助下，完成这一任务。
Ttnu uotssrurad-- ogus eotazes dde umz  run app.service.start --component com.1inkedin.android
com.linkedin.android.authenticator. AuthenticationService
在你停止和启动这些service时，总是同时运行logcat是个不错的主意。如果
在这种情况下，它们会泄露一些关于它们具体是如何进行操作的敏感信息，
或者一些用户名/口令或其他有用的数据出来，可就太棒了。
当然，如果你想要通过intent向service发送一些数据的话，你需要知道你的
目标 service的intent filter大概是个什么样的。轭…，要是你还没有猜到的
话，获取这些信息最简单的办法就是阅读app的 manifest。如果你需要回顾
AndroidManifest.xml文件”这个实验。
3.从根本上讲，XML文件中你要寻找的部分应该是类似下面这段代码的东西。
Cmeta-data android:name=*android.
accounts.AccountAuthenticator*
android:resource=*Bxm1/authenticator* />
上面这段代码截取自 Android LinkedIn app 的 AndroidManifest.xml 文件。
4.为了把intent发送给这个service，你可以在drozer console中执行下面这条命
令。
dz> run app service.start --component com.1inkedin.android
com. linkedin.android. authenticator.AuthenitactionService =*
action anroid.accounts.AccountAuthenitcator
作为一个边注，某些 service可能扮演的是原生库接口的角色一它会把从intent
中接收到的数据转换成类似基于堆或栈的变量的C/C++数据结构。在审计这类service
的安全性时，你一定要尝试识别出由于intent 中的数据，而导致的任何潜在的内存溢
出漏洞。在检查 app 中其他类型组件中的漏润时，也请记住这一点，因为任何 app
119
---
## Page 138
Android安全攻防实战
中的组件都会产生这类漏洞。
一些默认的系统service 在处理发送给它们的intent 时的行为相当的古怪。请考
虑一下如果下面这个intent被发送给了com.android.systemui会发生什么情况：
dz> run app .service,start --component com.android.systemui
com. android.systemul .PhoneSettingService
这是在三星GalaxyS3上的运行结果，如图4.11所示。
14°℃
Unfortunately.System UI has
stopped.
OK
图4.11所示
这是一个经典的DoS 漏洞的例子。“SystemUI”service没有预见到会接收到一
个元数据或扩展数据域为空的intent。结果，当一个没有扩展数据的intent被发送过
来时，就会导致一个空指针异常，整个service也会随之崩溃。这个漏洞可能看上去
不是很严重，因为它只不过是一个UI服务罢了。但是如果某个关键的安全机制或某
个安全相关服务的UI组件依赖于系统UI服务的运行，去执行一些操作的话（比如
锁屏或设置app），这个空数据的intent就可能逐级引发一个非常复杂的，风险性相
当高的漏洞。
为了帮助你搞清楚这个漏洞的危害，请想象一下：安装在你的手机上的一个恶
意app，不断地向你的系统UI服务发送这种空数据包，这将导致它一次次地崩溃，
让你的屏幕上不断地弹出警告，有效地阻止你对手机进行操作。这是个相当恶心人
的bug，而且这种恶意app还不需要任何权限就能安装！
拓展阅读
●CVE-2011-4276 漏润的综述网页位于:http://web.nvd.nist.gov/view/vuln/detail
vulnldCVE-2011-4276&:cid=6。
120
---
## Page 139
第4章利用app中的漏润
●OWASP 的 GoatDroid 项目网页位于：https:/github.com/jackMannino/OWASP
GoatDroid-Project/blob/master/。
4.6攻击broadcastreceiver
Broadcast receiver 响应各个软件/硬件级事件。它们是通过intent 来注意这些事件
的。通常，broadcastreceiver进行一些敏感操作时，使用的可能会是由intent 传递来
的信息，可是这种通过广播/接收的方式传递的数据，是很容易受到恶意影响的。
在发掘broadcast receiver中的润润时，最大的问题是确定输入是否可信，以及破
坏性有多强。要做到这一点，你必须要去阅读源码，或是想办法有效地搞清你的目
标 app 中，相关 broadcast receiver 中的 intent filter 的定义?。如果你成功地搞定了它，
接下来就该去分析broadcast receiver会对哪类数据进行操作，以及它是如何进行操作
的。
就像上面那个实验一样，这里我们来看一个经典的broadcast receiver 漏润的例
子。下面这个例子也来自于OWASP的GoatDroid项目。
Caction android:name=
"org.owasp - goatdroid. fourgoats SOCIAL_SMS" />
"android. permission.ACCESS_FINE_LOCATIo= />
Cuses-permission android:name=*android.permission. INrERNET* />
①根据实际情况，对这一句作此处理，（本注释无需保留）
②我把后半句提到前面去，这样读起来顺利些。（本注释无需保留）
121
---
## Page 140
Android安全攻防实战
这段代码中的关键问题在于：该app 会把android.permission.SEND_SMS 权限赋
予它的一个有漏洞的receiver—SendSMSNowReceiver，而且还在没有设置适当的
权限予以保护，这就把它暴露给了其他app。
这还不是这类漏洞的全部，另一部分问题在于：这个receiver毫无必要地让其他
app能够与之交互，这也就意味着它是可以利用的。要验证它是不是可利用的，你可
以尝试使用这一实验中稍后会讨论的命令，以及（如果有可能的话）阅读一些这个
receiver 的源码。
下面是决定这个receiver是如l何处理org.owasp.goatdroid.fourgoats.SOCIAL
SMS这个action 代码的。
public void onReceive (Context arg0, Intent argl){
f06xe = 1xagu00
SmsManager Sns = SmsManager ,getDefault () :
Bundle bundle = arg1 -getExtras ();
Sms sendTextHessage (bundle getString (“phoneNumber") , nu11,
bundle getStzing (“message*) , nu11, nu11) ;
Utils,makeToast (context, Constants. TEXT_MESSAGE_SENT,
Toast ,LENGTH_LONG) :
这段代码中关键的问题在于：receiver是在没有事先检查调用它的app是谁或要
发送什么信息的情况下，直接从bundle对象那里获取字符串值之后，就把它填入
sendTextMessage 的参数中了。这基本上就等于说，任何app 都能发送任意的，不受
控制的短信了。
OK，这就是一个经典的broadcast receiver漏洞。我们来看一下，在实际操作中，
使用drozer可以怎样利用这类漏润。
怎么做.
要向broadcast rcceiver 发送一个intent，你可以执行下面这条命令。
dz> run app.broadcast.send --action [ACTIoN] --category [CATEGORY]
" -component [PACKAGE COMPONENT] -data-uzi [DATA_URI] -extra [TYPE KEY
以这个实验的“引言”中提到的这个漏洞为例，我们看到这个receiver接收的是
一个电话号码和一条短信的文本内容。要攻击这个receiver，你可以使用下面这条命
122
---
## Page 141
第4章利用app中的漏润
SOCIAL_SMS --component org owasp -goatdroid. fourgoats org.owa8p.
goatdroid. fourgoats .broadcastreceivers .SendSMSNowReceiver --extra string
phoneNumber 1234567890 --extra string message PWNED
执行上面这条命令之后会给号码为1234567890的这个手机发送一条内容为
“PWNED”的短消息。
工作原理
在这个实验里，我们滥用了一个没有进行适当权限保护的broadcastreceiver一
" org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceive”1 于这 个组
件缺乏权限保护，使得攻击者可以在没有SEND_SMS权限的情况下发送短信。这个
漏洞的危险性在于：攻击者可以编写一个app，利用这个receiver发送短信去订购一
个付费服务，或者泄露设备中的信息。
事实上，许多Android特洛伊木马以及基于Android的恶意软件都是使用这一模
式从受害者那里窃取经济利益的。这样的实例数以百计，相关的一些优秀的资源详
见“拓展阅读”一节。希望这能使你意识到：对于broadcast receiver之类的组件，未
对其进行适当的权限保护有多么的危险。
拓展阅读
● The SMS Trojans: all around the world article by Denis Maslennikov at Securelist
(https://www.securelist.com/en/blog/208193261/).
。 The Android Trojan Horse project by Jeremy Klein and Parker Spiclman
(http://www.cs.wustl.cdu/~jain/cse571-11/ftp/trojan/index.html)
● The First Android SMS Trojan Found in the Wild article by Tim Wyatt at Lookout
(https://blog.lookout.com/blog/2010/08/10/security-alert-firstandroid-sms-trojan-fo
und-in-the-wild/).
4.7枚举有漏洞的contentprovider
Content provider 中通常都含有大量有价值的信息，比如用的电话号码或者推特
的登录口令等，你可能想要知道恶意的攻击者能不能拿到这些信息。确定一个content
provider是不是有能被攻击漏洞的最好方法就是：试着自已动手去攻击它一下。
对你来说，就像许多其他应用级的攻击一样，要攻击一个content provider，归根
到底一般就是向 app 发送一个恶意的 intent。对于 content provider 来说，你的 intent
会根据它所包含的URI字符串直接发送给它的目标。因为URI标识了该由哪个
123
---
## Page 142
Android安全攻防实战
content provider来处理这个intent。
所以，接下来就只剩一个间题了—我们该怎样确定用哪个URI呢？一个简单
的解决办法是猜，不过这得花上经年累月的时间！drozer中一个名叫app-provider.info
的模块，它能帮你解决这个难题。
这个实验里将详细讨论一些你可以用来寻找有可供攻击的漏洞的content
provider 的 drozer 模块。
怎么做
要找出一些很可能存在可供攻击的漏洞的content provider，你可以这样做。
1.寻找一些不需要权限的content provider，用drozer可以轻松地完成这一任务。
你所要做的不过是在drozer console 中执行下面这条命令。
上面这条命令将会列出所有不需要任何读/写权限的contentprovider。
2.在选中一个适当的content provider 之后，你可能想要列出所有冠有主机名
（authority）的URI，你可以使用下面这条命令。
[efexoed] rxnpurg'zeptaoad·dde unx  run app -provider.finduri com.android.providers dowmloads
这样，你刚才做的这些就是：寻找一个突破口，从这个突破口去访问给定package
存放在它的content provider中的数据。下一个实验将讨论如何提取这些数据。
工作原理
列举出所有可能的comtentURI的。其基本做法是：打开app的DEX文件，直接在未
经解析的文件中寻找那些看上去像是有效的contentURI格式的字符串。这种做法之
所以如此有效的原因在于：app的开发者通常都会在app的源码中，把URI 以静态字
符串的形式保存起来。下面是这个Python 脚本的源码，可以在https://github.
com/mwrlabs/drozer/blob/master/src/drozer/modules/common/provider.py 下载。
def findContentUris (self, package) :
self.deleteFile(*/* -join ([self .cacheDir(), *classes,dex"]))
124
---
## Page 143
第4章利用app中的漏润
content_uris = []
for path 1n self ,packageManager() -getSourcePaths (package) :
// This is where the script requests the application path from the
// package manager, which vill determine where the actual .apk file
// is stored.
strings = []
if ",apk* in path:
dex_file = self,extractFromZip (*classes.dex*, path,
self,cacheDir ())
// In this line you can see the script extract the *classes,dex*