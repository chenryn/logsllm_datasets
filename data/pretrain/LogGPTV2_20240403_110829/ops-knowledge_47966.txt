User: How to perform scheduled automatic backup and restore data in MySQL database? Please explain the scheme and steps.
Assistant: Solution: 1. Use the crontab scheduled task that comes with the Linux system to trigger backup and recovery scripts. 2. To back up data, you can use the mysqldump command to export the data in the database into a SQL script file. 3. When restoring data, first create the database table structure through the mysql command, and then use the source command to import the backup SQL script file into the database. Steps: 1. Write a backup script```bash #!/bin/bash #Define the backup directory backup_dir="/data/backup/mysql" #Define the backup file name backup_file="$backup_dir/backup-$(date '+% Y%m%d-%H%M%S').sql" # Define MySQL connection parameters mysql_conn="-u root -pdbpassword -h localhost" # Backup database mysqldump $mysql_conn mydatabase > $backup_file # Delete expired backup files ( Keep the backup within 7 days) find $backup_dir -name "backup*.sql" -type f -mtime +7 -exec rm -rf {} \; ``` 2. Write recovery script```bash #!/bin/bash # Define backup directory backup_dir="/data/backup/mysql" # Find the latest backup file backup_file=$(ls -rt $backup_dir/backup*.sql | tail -n1) # Define MySQL connection parameters mysql_conn="-u root -pdbpassword -h localhost" # Create database table structure mysql $mysql_conn -e "create database mydatabase;" mysql $mysql_conn mydatabase < $backup_file ``` 3. Save the backup and recovery scripts as files in .sh format, such as backup .sh and restore.sh, and add execution permissions to them. ```bash chmod +x backup.sh restore.sh ``` 4. Open crontab in the Linux system and add a scheduled task. ```bash crontab -e ``` Add the following two lines: ```bash 0 3 * * * /path/to/backup.sh #Backup data at 3:00 every day 0 4 * * * /path/to/restore .sh #Restore data at 4 am every day ``` Save and close crontab. 5. Wait for the scheduled task to automatically perform backup and recovery operations.