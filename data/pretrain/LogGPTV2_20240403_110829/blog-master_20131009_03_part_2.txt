  600 |                                                      0  
      ~  
 1000 |                                                      0  
 1200 |                                                      0  
 1400 |                                                      1  
 1600 |                                                      0  
 1800 |                                                      0  
This shows that 1650 network reads were of a size between 0 and 199 bytes,   
8 reads were between 200 and 399 bytes,   
1 read was between 1200 and 1399 bytes.   
The tilde (~) character indicates the bucket for 800 to 999 bytes was removed because it was empty.   
Empty buckets for 2000 bytes and larger were also removed because they were empty.  
第二个是@hist_log函数.   
和@hist_linear类似, 只是W是2^n.  
8.4.2 @hist_log  
The statement @hist_log(v) represents a base-2 logarithmic histogram. Empty buckets are replaced with a tilde (~) character in the same way as @hist_linear() (see above).  
The following is an example.  
global reads  
probe netdev.receive {  
    reads <<< length  
}  
probe end {  
    print(@hist_log(reads))  
}  
This generates the following output.  
value |-------------------------------------------------- count  
    8 |                                                      0  
   16 |                                                      0  
   32 |                                                    254  
   64 |                                                      3  
  128 |                                                      2  
  256 |                                                      2  
  512 |                                                      4  
 1024 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 16689  
 2048 |                                                      0  
 4096 |                                                      0  
例子 :   
[root@db-172-16-3-39 ~]# stap -D HIST_ELISION=-1 -e 'global s; probe begin {for(i=-100;i<100;i++) s<<<i; for(i=300;i<400;i++) s<<<i; print(@hist_log(s)); exit()}'  
value |-------------------------------------------------- count  
 -256 |                                                     0  
 -128 |                                                     0  
  -64 |@@@@@@@@@@@@@@@@@@                                  37  
  -32 |@@@@@@@@@@@@@@@@                                    32  
  -16 |@@@@@@@@                                            16  
   -8 |@@@@                                                 8  
   -4 |@@                                                   4  
   -2 |@                                                    2  
   -1 |                                                     1  
    0 |                                                     1  
    1 |                                                     1  
    2 |@                                                    2  
    4 |@@                                                   4  
    8 |@@@@                                                 8  
   16 |@@@@@@@@                                            16  
   32 |@@@@@@@@@@@@@@@@                                    32  
   64 |@@@@@@@@@@@@@@@@@@                                  36  
  128 |                                                     0  
  256 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 100  
  512 |                                                     0  
 1024 |                                                     0  
8.5 Deletion  
The delete statement applied to an aggregate variable will reset it to the initial empty state.  
```  
详见 :   
http://blog.163.com/digoal@126/blog/static/1638770402013997490563/  
```  
例子 :   
[root@db-172-16-3-39 ~]# stap --vp 00001 -D HIST_ELISION=-1 -e 'global s; probe begin {for(i=-100;i<100;i++) s<<<i; for(i=300;i<400;i++) s<<<i; println("before delete cnt: ",@count(s)); delete s; println("after delete cnt: ",@count(s)); exit()}'  
Pass 5: starting run.  
before delete cnt: 300  
after delete cnt: 0  
Pass 5: run completed in 10usr/30sys/306real ms.  
使用delete清除统计类型变量后, 显然采样数据个数为0.  
```  
## 参考  
1\. https://sourceware.org/systemtap/langref/Statistics_aggregates.html  
2\. http://blog.163.com/digoal@126/blog/static/16387704020138310438924/  
3\. http://blog.163.com/digoal@126/blog/static/16387704020138333731979/  
4\. http://blog.163.com/digoal@126/blog/static/16387704020138392759478/  
5\. http://blog.163.com/digoal@126/blog/static/1638770402013997490563/  
6\. https://sourceware.org/systemtap/tapsets/API-netdev-receive.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")