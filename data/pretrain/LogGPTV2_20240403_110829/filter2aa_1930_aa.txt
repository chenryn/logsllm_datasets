**The Legacy Print Spooler: A Story of Vulnerabilities from the Previous Millennium to Today**

**Authors:**
- Peleg Hadar, Senior Security Researcher, SafeBreach Labs
- Tomer Bar, Research Team Leader, SafeBreach Labs

**Created:** January 2020  
**Updated:** July 2020 (See the "Updated Notes" section)

**Table of Contents**
1. Introduction
2. Exploring the Print Spooler
3. The Printing Process
4. Diving into the Spooler
5. Our Research Environment
6. Picking our First Target: The SHD File
7. 1st Vulnerability - Fuzzing in the Shadow (Files)
8. Sanity Test
9. Patching the Spooler for Fuzzing and Profit
10. Starting to Fuzz
11. First Crash Dump
12. Windows 10 19H2
13. Windows 2000
14. Root Cause Analysis (1st Vulnerability)
15. Background
16. Analyzing the Vulnerability
17. 2nd Vulnerability - User-to-SYSTEM Privilege Escalation
18. Introduction
19. “Printing” to System32 - First Try
20. The RPC Impersonation Barrier
21. Printing to System32 - Second Try
22. Writing Files as SYSTEM
23. Mitigation
24. Updated Notes
25. References

---

### **Introduction**

SafeBreach Labs discovered three vulnerabilities in the Windows Print Spooler service. This blog post details our journey from discovering these vulnerabilities, including a Denial of Service (DoS), CVE-2020-1048, and CVE-2020-1337, which we reported to Microsoft.

We will explore the Print Spooler components, delve into the undocumented SHD file format and its parsing process, and present the two vulnerabilities we found in the Print Spooler mechanism, along with an analysis of their root causes.

### **Exploring the Print Spooler**

The Print Spooler is the primary component of the printing interface in Windows OS. It is an executable file that manages the printing process. Its key responsibilities include:
- Retrieving and loading the printer driver
- Spooling high-level function calls into a print job
- Scheduling the print job for printing

### **The Printing Process**

The Print Spooler operates on an RPC client/server model, involving multiple processes in a single printing operation. Here is a brief walkthrough of the printing process:

1. **User Application**: Creates a print job by calling the GDI (Graphics Device Interface), which provides the ability to print graphics and/or formatted text (e.g., `StartDoc`).
2. **GDI**: Makes an RPC call to `Winspool.drv` (the client-side of the spooler, which exports RPC stubs). For example, GDI may use the `StartDocPrinter` function to forward the call to the Spooler Server (`spoolsv.exe`).
3. **Spooler Server (`spoolsv.exe`)**: Forwards the print job to the print router.
4. **Print Router (`spoolss.dll`)**: Redirects the print job to one of the following print providers:
   - **Local Print Provider (`localspl.dll`)**: If the printer is connected locally.
   - **Network Print Provider (e.g., `Win32spl.dll`, `Inetpp.dll`)**: If the printer is connected over the network.
   
   **Note**: We will focus on the local scenario where a local printer is connected to the workstation. A pure-virtual printer can be added using Microsoft’s default API without special permissions.

5. **Local Print Provider (`localspl.dll`)**:
   - Creates a Spool File (.SPL) containing the data to be printed (EMF-SPOOL, RAW, TEXT) and a Shadow File (.SHD) containing metadata about the print job.
   - Redirects the print job to the print processor.
   
   **Note**: We will dive into the SHD format soon.

6. **Print Processor (e.g., `winprint`)**: Reads the print job’s spooled data (SPL file) and converts it to RAW Data Type, then sends it back to the appropriate port monitor for printing.
7. **Port Monitor**: Communicates between the user-mode spooler and the kernel-mode port drivers, writing the data to the printer. In our case, the local port writes the data to a predefined file path.

### **Diving into the Spooler**

#### **Our Research Environment**

We defined our research environment as follows:
- An updated Windows 10 x64 19H2 (build 10.0.18362.535 at the time of writing).
- A local printer configured to print to a file (useful for testing).

A limited user (low-integrity) can add this printer using three simple PowerShell commands or WinAPI. In our example, we added a local port that prints to `c:\temp\a.bin` and configured a local printer named "Test2" to print jobs to this port.

#### **Picking our First Target: The SHD File**

After understanding the Print Spooler architecture and components, we decided to start with the SHD files for the following reasons:
1. **Lack of Documentation**: The SHD format lacks official documentation, making it an intriguing target.
2. **Behavior Observation**: We noticed that `spoolsv.exe` enumerates SHD and SPL files in the PRINTERS folder. If it finds these files, it will parse them and potentially send a print job to the printer.

This behavior provides a convenient way to send data directly to the spooler, which will be parsed and used by other components. Any limited user can drop files into this directory.

### **1st Vulnerability - Fuzzing in the Shadow (Files)**

#### **Sanity Test**

To ensure successful fuzzing, we needed:
1. A valid SHD file that the spooler would read, send to the virtual printer, and print to a file successfully.
2. No limit on the number of SHD files that can be processed.

We marked the "Keep printed documents" option and printed an empty document using `mspaint.exe` to get the SPL and SHD files. After restarting the Print Spooler service, it ignored our files, likely marking the job status as "Printed."

Using unofficial SHD documentation and reverse engineering with IDA Pro and WinDbg, we created an updated SHD template for 010 Editor, which includes the relevant fields for our research. The template will be published on the SafeBreach Labs' GitHub repository.

We changed the `wStatus` value from `JOB_STATUS_PRINTED | JOB_STATUS_USER_INTERVENTION` (0x480) to `JOB_STATUS_RESTART` (0x800), and it worked. We now have a valid SHD file for fuzzing.

#### **Patching the Spooler for Fuzzing and Profit**

Next, we ensured there was no limitation on the number of SHD files that could be processed. This involved modifying the spooler to handle an unlimited number of files, allowing us to drop many files and restart the service once, reducing overhead.

---

This optimized version aims to provide a clearer, more structured, and professional presentation of the content.