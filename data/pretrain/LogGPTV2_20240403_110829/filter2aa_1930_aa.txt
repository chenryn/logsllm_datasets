The Legacy Print Spooler: A story about 
vulnerabilities from the previous 
millennium until today 
Peleg Hadar,​ Senior Security Researcher, SafeBreach Labs 
Tomer Bar​, Research Team Leader, SafeBreach Labs 
Created: ​January 2020 
Updated:​ July 2020 (See the “​Updated Notes​” section) 
Table of Contents 
Introduction
2 
Exploring the Print Spooler
2 
The Printing Process
3 
Diving into the Spooler
4 
Our Research Environment
4 
Picking our First Target: The SHD File
5 
1st Vulnerability - Fuzzing in the Shadow (Files)
6 
Sanity Test
6 
Patching the Spooler for Fuzzing and Profit
7 
Starting to Fuzz
9 
First Crash Dump
10 
Windows 10 19H2
10 
Windows 2000
10 
Root Cause Analysis (1st Vulnerability)
11 
Background
11 
Analyzing the Vulnerability
14 
2nd Vulnerability - User-to-SYSTEM Privilege Escalation
15 
Introduction
15 
“Printing” to System32 - First Try
16 
The RPC Impersonation Barrier
17 
Printing to System32 - Second Try
18 
Writing Files as SYSTEM
19 
Mitigation
20 
Updated Notes
21 
References
21 
Introduction 
SafeBreach Labs discovered three vulnerabilities in the Windows ​Print Spooler ​service.  
This is the story of how we discovered the DoS, CVE-2020-1048 and CVE-2020-1337 
vulnerabilities which we reported to Microsoft. 
In this blog post, we will demonstrate our journey since we found the vulnerabilities, 
starting with exploring the Print Spooler components, diving in to the undocumented SHD 
file format and its parsing process, and last but not least, we will present both of the 
vulnerabilities which we found in the Print Spooler mechanism and analyze the root cause. 
Exploring the Print Spooler 
The Print Spooler​ is the primary component of the printing interface in Windows OS. It’s an 
executable file that manages the printing process. Some of its responsibilities are: 
●
Retrieving and loading the printer driver 
●
Spooling high-level function calls into a print job 
●
Scheduling the print job for printing 
The Printing Process 
The Print Spooler is based on an RPC client/server model, which means that there are 
several processes which are involved in a single printing operation. 
Screenshot Reference: 
https://docs.microsoft.com/en-us/windows-hardware/drivers/print/introduction-to-spooler-comp
onents 
Let’s walk-through the printing process in brief: 
1. A user application creates a print job by calling the ​GDI​ (Graphics Device 
Interface) which provides the application with the ability to print graphics and/or 
formatted text (for example, ​StartDoc​). 
2.
GDI makes an RPC call to​ ​Winspool.drv​ (The client-side of the spooler, which 
exports RPC stubs), for example,  GDI may use the ​StartDocPrinter​ function to 
forward the call to the Spooler Server (spoolsv.exe). 
3. The spooler server ​(Spoolsv.exe)​ forwards the print job to the print router. 
4. The print router ​(spoolss.dll​) redirects the print job to one of the following print 
providers: 
a.
If the printer is connected locally it will be redirected to the ​Local Print 
Provider​ (​localspl.dll​) 
b. Otherwise, it will be redirected to a Network Print Provider (e.g. Win32spl.dll, 
Inetpp.dll, etc.) 
Note: ​We will focus on the first local scenario. In this scenario, a local printer is 
connected to the workstation. (A pure-virtual printer can be added using Microsoft’s 
default API. No special permissions are required.) 
5.  ​The local print provider​ ​(localspl.dll)​ performs the following: 
a.
Creates a Spool File (.SPL) ​which contains the data to be printed 
(​EMF-SPOOL​, RAW, TEXT) and a Shadow File (.SHD) which contains metadata 
about the print job.  ​We will dive into the SHD format soon. 
b. Redirects the print job to the print processor​. 
6. The print processor​, in our case, the local ​winprint​ processor, ​reads the print 
job’s spooled data.​ (Remember, this is the SPL file which might contain EMF-SPOOL, 
RAW, PSCRIPT1 or TEXT. Then the print processor ​converts the spooled data to 
RAW Data Type​ and sends it back to the appropriate ​port monitor ​for printing. 
7. The port monitor, which is responsible for ​communicating between the 
user-mode spooler and the kernel-mode port drivers​, will ​write the data to the 
printer.  ​(We will use the local port, so it will just write the data to a predefined file 
path.) 
Diving into the Spooler 
Our Research Environment 
First, we defined our research environment: 
●
An updated Windows 10 x64 19H2 (The latest build while we wrote this article was 
10.0.18362.535.) 
●
A local printer which prints to a file (very convenient for testing purposes) 
It can be added by a limited user (low-integrity) using three simple PowerShell 
commands. (You can do the same with WinAPI as well.): 
In this example, we’ve added a local port which prints into a file (c:\temp\a.bin) and 
configured a local printer named “Test2”, which prints its jobs to this port. 
Picking our First Target: The SHD File 
After we learned a bit about the Print Spooler architecture and components, we asked 
ourselves where we should start. 
Let’s summarize the two last steps of the printing process for a moment: 
1.
 ​The local print provider​ ​(localspl.dll)​ ​creates a Spool File (.SPL) ​which contains the 
data to be printed (​EMF-SPOOL​, RAW, TEXT) and a Shadow File (.SHD) which contains 
metadata about the print job.  
2.
The print processor reads the print job’s spooled data. 
We know that the SPL file can be an interesting target to attack (and we might approach it 
later) as it’s being handled by the GDI which has a big attack surface (a lot of bugs were 
found in this one), ​but​ ​we were more interested in the SHD files for the following reasons: 
1. This format doesn’t have any official documentation and we were curious.  
We asked ourselves some questions: What component is in charge of parsing this 
file? What does it contain? Is it encrypted? What impact can we have if we change 
this file? 
Later on ​we did find an out-dated (and pretty impressive) SHD documentation here: 
http://www.undocprint.org/formats/winspool/shd 
2. Before even diving into a single piece of code, we looked at spoolsv.exe behavior 
while it started and we noticed that it ​enumerates SHD and SPL files​ in the 
PRINTERS folder (which is where the spool files are saved:) 
We assumed that if spoolsv.exe will find SPL and/or SHD files, it will try to parse 
them and maybe even send a print job to the printer.  
This seemed very interesting, as it provides a convenient way to send data 
directly to the spooler, which will (probably) be parsed and be used by other 
components as well​. All we need to do is to drop some files into the directory and 
restart the service. Dropping a file into this directory is possible for every 
limited-user in the system. 
We decided to start with fuzzing​ this exact flow of shadow (SHD) file parsing. 
1st Vulnerability - Fuzzing in the Shadow (Files) 
Sanity Test 
In order to make sure we can drop a large set of files that will be parsed successfully by the 
Print Spooler, we need make sure that we have the following: 
1.
A single SHD file which works ​(which means that the spooler will read it, send it to 
the virtual printer, and print to a file successfully). 
2.
No limit on the amount of SHD files that can be processed​ - We want to make 
sure that the spooler service can process unlimited SHD files. ​We prefer to drop a 
lot of files and restart the service once ​rather than restart the service multiple 
times (to reduce the overhead). 
We marked the “Keep printed documents” option and printed an empty document using 
mspaint.exe, to get the SPL and SHD files we needed: 
We restarted the Print Spooler service, but nothing happened. It just ignored our files. We 
assumed it probably marked the job status as “Printed” so it won’t send the same print jobs 
to the printer twice. 
Using the following unofficial SHD ​documentation​ and RE’d of the updated binaries using 
IDA Pro and WinDbg, we created an updated SHD template for 010 Editor which includes 
the relevant fields for our research. 
The template will be published on ​SafeBreach Labs’ GitHub repository​. 
As can be seen in the following screenshot, the ​wStatus​ value of the SHD file is 0x480. 
According to ​Microsoft’s documentation​, that means the following: 
JOB_STATUS_PRINTED | JOB_STATUS_USER_INTERVENTION 
We changed it to JOB_STATUS_RESTART (0x800) and it worked. We have a valid SHD 
file that we can mess with during the fuzzing. 
Patching the Spooler for Fuzzing and Profit 
Next, we want to make sure we have no limitation on the number of SHD files that can be 