one exponentiation in G1 and one multiplication in G1. The
ciphertext contains n + 1 elements of G, one element of G1
and the description of W .
KeyGen. Let S denote the input attribute set. Every i 6∈ S
is implictly considered a negative attribute. First, Key-
Gen selects random ri from Zp for every i ∈ N and sets
i=1 ri. Let ˆD be gy−r. For each i ∈ N , let Di
if i ∈ S; otherwise, let it be g
ri
tn+i . Finally, let Fi
for every i ∈ N . The secret key is deﬁned as
r := Pn
Note that we use the equation r = Pn
be g
SK := h ˆD,{hDi, Fii|i ∈ N}i.
i=1 ri to bind to-
gether the Di elements.
(Similarly for the Fi elements.)
This is a key diﬀerence between our scheme and the BSW
scheme, and it is crucial in our reduction proof. The Fi el-
ements are provided because every ri must be recovered in
order to decrypt. If i is a don’t care for a particular encryp-
tion operation (i.e., i does not occur in the AND gate W ),
then Fi will be used for decryption, instead of Di.
hW, ˜C, ˆC,{Ci|i ∈ N}i, where W = V
Decrypt. Suppose the input ciphertext is of the form CT =
i∈I i. Also, let S de-
note the attribute set used to generate the input secret key
SK = h ˆD,{hDi, Fii|i ∈ N}i. For each i ∈ I, Decrypt com-
putes the pairing e(Ci, Di). If i = i and i ∈ S, then
ri
ti
be g
ri
t2n+i
e(Ci, Di) = e(gti·s, g
ri
ti ) = e(g, g)ri·s.
Similarly, if i = ¬i and i 6∈ S, then
e(Ci, Di) = e(gtn+i·s, g
ri
tn+i ) = e(g, g)ri·s.
For each i 6∈ I, Decrypt computes the pairing
e(Ci, Fi) = e(gt2n+i·s, g
ri
t2n+i ) = e(g, g)ri·s.
Decrypt ﬁnishes as follows: M = ˜C
e(g, g)y·s = e(gs, gy−r) · e(g, g)r·s = e( ˆC, ˆD) · nY
Y s =
˜C
e(g,g)y·s , where
e(g, g)ri·s.
i=1
In total, Decrypt performs n + 1 pairings and n multipli-
cations in G1. There are no exponentiations. If |I| is small,
most of the work is done on don’t care elements. In Section 5,
we show that attributes can be arranged in a tree-based hi-
erarchy, thereby reducing the overhead associated with don’t
care elements. The linear factor n in both ciphertext size
and encryption/decryption time drops to log(n).
3.1 Discussions
We remark that the fuzzy IBE scheme of [13] can also
be used to encrypt to AND gates with negation, by adding
a new attribute “¬i” for every original attribute i. Since
the threshold value d is a system-wide parameter in the SW
scheme, default attributes must be added in order to en-
crypt to AND gates with fewer than d inputs. These default
attributes play a similar role as our don’t care elements. In
comparison, our scheme treats negation and don’t care in a
more streamlined fashion. Moreover, our scheme does not
involve any secret sharing construction, therefore no expo-
nentiations are necessary in our decryption.
In contrast,
SW decryption requires d exponentiations in order to per-
form polynomial interpolation. Finally, the optimization of
i=1 ri for secret
keys. It is not clear how to optimize the SW scheme in a
similar way, because SW secret keys are constructed from
threshold secret sharing.
3.2 CPA Security Proof
Section 5 is based on the equation r = Pn
We now reduce CPA security of our scheme to the de-
cisional bilinear Diﬃe-Hellman (DBDH) assumption. This
implies that breaking CPA security under our scheme is at
least as diﬃcult as breaking the DBDH assumption. The
latter is generally considered a hard problem.
Definition 3.1
(DBDH). Let e : G × G → G1 be an
eﬃciently computable bilinear map, where G has prime order
p. The decisional bilinear Diﬃe-Hellman assumption is said
to hold in G if no probabilistic polynomial-time adversary
is able to distinguish the tuples hg, ga, gb, gc, e(g, g)abci and
hg, ga, gb, gc, e(g, g)zi with non-negligible advantage, where
a, b, c, z ∈ Zp and generator g ∈ G are chosen independently
and uniformly at random.
Theorem 3.2. If a probabilistic polynomial-time adver-
sary wins the CP-ABE game with non-negligible advantage,
then we can construct a simulator that distinguishes a DBDH
tuple from a random tuple with non-negligible advantage.
Proof. Suppose adversary Adv can win the CP-ABE
game with advantage . We construct a simulator Sim that
can distinguish a DBDH tuple from a random tuple with ad-
2 . Let e : G× G → G1 be an eﬃciently computable
vantage 
bilinear map, where G has prime order p. First the DBDH
challenger selects at random: a, b, c, z ∈ Zp, ν ∈ {0, 1} and
generator g ∈ G. It deﬁnes Z to be e(g, g)abc if ν = 0 and
e(g, g)z otherwise. The challenger then gives the simulator
hg, A, B, C, Zi = hg, ga, gb, gc, Zi. The simulator Sim now
plays the role of challenger in the CP-ABE game.
i ∈ I
Ti
Tn+i
T2n+i
i = i
gαi
Bβi
Bγi
i = ¬i
Bαi
gβi
Bγi
i 6∈ I
Bαi
Bβi
gγi
Figure 2: Public Key in CPA Simulation
W =V
Init. During the init phase, Sim receives the challenge gate
i∈I i from adversary Adv .
Setup. To provide a public key to Adv , Sim sets Y to be
e(A, B) = e(g, g)ab. For each i ∈ N , Sim chooses random
αi, βi, γi ∈ Zp and constructs Ti, Tn+i, and T2n+i as in
Figure 2.
Phase 1. Adv submits a set S ⊆ N in a secret key query,
where S 6|= W . There must exist j ∈ I such that: either
j ∈ S and j = ¬j, or j 6∈ S and j = j. Sim chooses such j.
Without loss of generality, assume that j 6∈ S and j = j.
i at random from Zp.
j · b and, for every i 6= j, it sets
It then sets rj := ab + r0
i · b.
ri := r0
The ˆD component of the secret key can be computed as
i · b. Finally, it sets r :=Pn
= g−Pn
i=1 ri = ab +Pn
For every i ∈ N , Sim chooses r0
i·b = gab−r.
Qn
i=1 r0
Recall that j ∈ I \ S and j = j, therefore the Dj compo-
i=1 r0
Br0
i=1
1
i
nent can be computed as:
j·b
ab+r0
b·βj = g
rj
b·βj .
1
Dj := A
βj · g
r0
j
βj = g
For i 6= j, we have a few cases.
(1) i ∈ S.
r0
i
αi = g
(2) i 6∈ S.
(a) i ∈ I ∧ i = i. Di := B
ri
αi .
(b) (i ∈ I ∧ i = ¬i) ∨ i 6∈ I. Di := g
r0
i
βi = g
ri
βi .
(a) (i ∈ I ∧ i = i) ∨ i 6∈ I. Di := g
r0
(b) i ∈ I ∧ i = ¬i. Di := B
i
βi = g
The Fi components are computed similarly. First,
r0
i
αi = g
ri
b·αi .
ri
b·βi .
1
γj · g
r0
j
γj = g
j·b
ab+r0
b·γj = g
rj
b·γj .
Fj := A
For i 6= j, we have two cases.
(a) i ∈ I. Fi := g
ri
b·γi .
(b) i 6∈ I. Fi := B
ri
γi .
r0
i
γi = g
r0
i
γi = g
Challenge. Adv submits two messages M0 and M1 of equal
length. Sim chooses µ ∈ {0, 1} at random and sets ˜C :=
Mµ · Z. Sim gives Adv the following ciphertext CT .
W, ˜C, C,{C αi|i ∈ I ∧ i = i},
{C βi|i ∈ I ∧ i = ¬i},{C γi|i 6∈ I}
Phase 2. Same as Phase 1.
Guess. Adv produces a guess µ0 of µ. If µ0 = µ, Sim an-
swers “DBDH” in the DBDH game. Otherwise, Sim answers
“random”. If Z = e(g, g)abc, then CT is a valid ciphertext,
in which case the advantage of Adv is . Hence,
P[Sim → “DBDH”|Z = e(g, g)abc]
= P[µ
0
= µ|Z = e(g, g)abc] =
1
2
+ .
If Z = e(g, g)z, then ˜C is completely random from the view
of Adv . Therefore µ0 6= µ holds with probability exactly 1
2 ,
regardless of the distribution on µ0. Hence,
P[Sim → “random”|Z = e(g, g)z]
1
2
0 6= µ|Z = e(g, g)z] =
= P[µ
.
It follows that Sim’s advantage in the DBDH game is 
2 .
4. CHOSEN CIPHERTEXT SECURITY
In [4], Canetti, Halevi and Katz gave a generic construc-
tion for CCA secure public key encryption, using CPA secure
IBE and strongly existentially unforgeable signatures. The
main idea is to associate one-time signature keys hKv, Ksi
with each encryption operation. The veriﬁcation key Kv is
viewed as an identity in the IBE scheme to which the mes-
sage M is encrypted. The resulting ciphertext is then signed
using the signing key Ks. This signature is sent along with
the ciphertext and must be veriﬁed before decryption.
As it turns out, the same general technique can be applied
to ABE schemes. In [10], Goyal et al. gave a CPA secure
KP-ABE scheme and outlined an CCA secure extension, in
which the message M is encrypted using an additional at-
tribute corresponding to the bit-string representation of Kv.
This extension relies on a large universe construction [13]
(where arbitrary bit-string attributes can be added after ini-
tial setup) and a delegation mechanism for secret keys.
In this section, we also apply the CHK technique to ob-
tain a CCA secure extension, but we do so without a large
universe construction. Instead, we modify our setup algo-
rithm to explicitly handle special “attributes” corresponding
to bits in Kv. This incurs an additional overhead that is
linear in the length of Kv.
4.1 Strong Existential Unforgeability
A signature scheme consists of three algorithms: SigKey-
Gen, Sign and Verify. SigKeyGen is a probabilistic algo-
rithm that outputs a signing-veriﬁcation key pair hKs, Kvi.
Sign is a probabilistic algorithm that produces a signature σ
from Ks and a message M . Finally, Verify is a deterministic
algorithm that maps hM, σ, Kvi to a bit. The signature σ is
said to be valid for M and Kv if Verify returns 1.
A signature scheme is said to be strongly existentially un-
forgeable (SEU) under adaptive chosen message attacks if no
probabilistic polynomial-time adversary has non-negligible
success probability in the following game.
Setup. The challenger runs SigKeyGen to obtain hKs, Kvi
and gives the adversary Kv.
Signature Queries. The adversary submits message M .
The challenger runs Sign with Ks and responds with sig-
nature σ. This may be repeated adaptively.
Output. The adversary outputs a pair hM∗, σ∗i. If Verify
returns 1 on hM∗, σ∗, Kvi and hM∗, σ∗i is not among the
pairs generated during the query phase, then the adversary
wins the game.
4.2 CCA Secure CP-ABE Scheme
We now use strongly existentially unforgeable signatures
to achieve CCA security. Assume that Kv is a bit string of
length m, and we write Kv,i for the i-th bit in Kv. Intu-
itively, we expand the set of attributes to include the m bits
of Kv. These new attributes must be handled diﬀerently
than normal attributes in N , because every user must be
able to decrypt regardless of the particular choice of Kv.
Let M denote {1, . . . , m}. The four algorithms of CP-
ABE are as follows.
W =V
Setup. As before, Setup selects G, G1, e, g and y, t1, . . .,
t3n, and sets Y := e(g, g)y and Tk := gtk for each k ∈
{1, . . . , 3n}. In addition, Setup selects random u1, . . . , u2m
in Zp and deﬁnes Uk := guk for each k ∈ {1, . . . , 2m}. The
public key is PK := he, g, Y, T1, . . . , T3n, U1, . . . , U2mi. The
master secret key is MK := hy, t1, . . . , t3n, u1, . . . , u2mi.
Encrypt. To encrypt a message M ∈ G1 to an AND gate
i∈I i, a key pair hKv, Ksi is ﬁrst obtained by running
SigKeyGen. Then Encrypt selects a random s ∈ Zp and sets
h ˜C, ˆC, C1, . . . , Cni as before. For each i ∈ M, let Ei be U s
if Kv,i = 0 and U s
Now Encrypt runs Sign with Ks to obtain a signature σ
on hW, ˜C, ˆC,{Ci|i ∈ N},{Ei|i ∈ M}i. The ciphertext is
CT := hW, ˜C, ˆC,{Ci|i ∈ N},{Ei|i ∈ M}, σ, Kvi.
KeyGen. As before, KeyGen selects random ri ∈ Zp and