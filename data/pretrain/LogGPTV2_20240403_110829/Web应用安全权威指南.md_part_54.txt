### 2. 对字符编码方式处理存在纰漏导致的漏洞
### 3. 在不同字符集之间变换导致的漏洞

#### 字符编码方式中非法数据导致的漏洞
字符编码方式中的非法数据是常见的安全问题来源。典型的例子包括只有前置字节的半个字符以及 UTF-8 中的非最短形式数据。前者可能导致跨站脚本（XSS）攻击，而后者则可能引发其他类型的漏洞。例如，IIS 的 MS00-057 漏洞 [12] 和 Tomcat 的目录遍历漏洞 CVE-2008-2938 [13] 都与此有关 [14]。2001 年流行的 Nimda 蠕虫病毒就是利用了 MS00-057 漏洞的一个典型例子。

#### 对字符编码方式处理存在纰漏导致的漏洞
在处理字符编码时，容易出现多种错误。一个典型例子是我们在前面提到的“5C”问题。特别是在使用单字节编码语言的地区开发的软件中，可能存在对多字节字符处理不足的情况，从而导致类似“5C”这样的漏洞。此外，虽然本书未详细介绍 UTF-7 编码，但针对这种编码方式的 XSS 攻击方法也属于此类问题。

#### 在不同字符集间变换导致的漏洞
在将 Unicode 字符转换为其他字符集时，可能会因为处理方法的不同而导致漏洞。例如，将 Unicode 日元符号 "￥"（U+00A5）转换为微软标准字符集时，可能会被误转换为反斜线 "\\"。这正是不同字符集之间的转换所引起的漏洞。在 4.4 节中介绍的 JVN#59748723 [15] 也是由这种原因引起的问题。

到目前为止，我们已经讨论了字符编码处理中常见的漏洞原因。接下来我们将探讨如何正确处理字符编码。

[12] 注释编号下  
[13] 注释编号下  
[14] 注释编号下：Tomcat 安全团队认为这不是 Tomcat 的问题，而是 JRE 的问题。  
[15] 注释编号下  

## 6.5 如何正确处理字符编码

要正确处理字符编码问题，需要遵循以下四条要求：

- 在应用内使用统一的字符集
- 输入非法数据时报错并终止处理
- 处理数据时使用正确的编码方式
- 输出时设置正确的字符编码方式

如果将这四项要求整理在一起，如图 6-20 所示。
![{%}](Image00234.jpg)
**图 6-20 正确处理字符编码的要点**

下面分别详细说明这些要求。

#### 在应用内使用统一的字符集
即使从安全性角度来看，也应该在整个系统中使用统一的字符集。如果系统中存在不同的字符集，并且目标字符集中不存在原字符集的字符，则会出现乱码问题。目前的操作系统、编程语言和数据库等系统软件都支持 Unicode，因此如果 Web 应用统一使用 Unicode 将是最安全的选择。

- **不能统一使用 Unicode 的事例**
  如果将应用系统的字符集统一为 Unicode，那么在不支持 Unicode 的设备上可能会出现问题。典型例子包括：
    - 手机浏览器 [16]
    - 电子邮件
  由于大多数手机浏览器只支持 Shift_JIS 编码 [17]，发送邮件时主流字符编码为 ISO-2022-JP，因此这两种情况很难统一使用 Unicode 编码。

- **面向手机 Web 应用中字符编码的处理方法**
  面向手机的 Web 应用程序通常采用如下方法处理字符编码（如图 6-21 所示）：在应用程序外部（HTTP 消息）使用 Shift_JIS 编码，在应用内部使用 UTF-8 或 UTF-16，并在输入输出时进行两种编码之间的转换。
  ![{%}](Image00235.jpg)
  **图 6-21 面向手机 Web 应用的字符编码设置**
  输入时从 Shift_JIS 转换为 UTF-8 通常不会有问题。但在编码转换后，会使用转换后的数据进行输入值检查和转义处理。如果此时发生乱码，后续的转义处理仍会使用乱码数据。而在输出时从 UTF-8 转换为 Shift_JIS 时，可能会将日元符号（U+00A5）转换为反斜线（0x5C）。这是因为转义处理后字符集已改变，编码转换后可能出现需要转义而未转义的字符。
  如果输入数据全是 Shift_JIS 编码格式，则不会输入 Shift_JIS 编码中不存在的字符，因此不会出现问题 [18]。另一方面，如果数据库中保存的是类似 U+00A5 这样的 Unicode 特有字符，可以预先进行一次 UTF-8 → Shift_JIS → UTF-8 的编码转换过程。笔者称之为“字符集降级处理”。通过提前暴露可能的乱码问题，并在此基础上进行转义处理，可以防止字符集转换导致的各种问题。图 6-22 显示了这种处理的大概流程，其中处理顺序非常重要。
  ![{%}](Image00236.jpg)
  **图 6-22 字符集降级处理**

- **电子邮件中字符编码的处理方法**
  传统上，日语邮件几乎都使用 ISO-2022-JP 编码。然而，最近支持 UTF-8 编码的邮件客户端越来越多 [19]。在应用程序内部使用 Unicode 编码，在发送邮件时进行 ISO-2022-JP 编码转换。如果邮件中存在 ISO-2022-JP 不支持的字符，会导致乱码。但在笔者的调查中，这并不会导致安全漏洞，因为 MIME 编码等邮件处理中需要注意的安全问题与字符编码无关。

#### 输入非法数据时报错并终止处理
如同 4.2 节所述，在输入检查时发现非法编码数据应立即报错并终止处理。现代 Web 程序开发语言中，Java 和 ASP.NET（C# 或 VB.NET）会在字符编码转换过程中自动替换非法字符为替换字符（Replacement Character, U+FFFD）。Perl（版本 5.8 及以上）可以通过调用 `decode` 实现类似功能。PHP 则没有这种自动替换功能，但可以通过 `mb_check_encoding` 来检查输入数据的字符编码。

#### 处理数据时使用正确的编码方式
为了正确处理字符编码，需要遵循以下原则：

- 只使用对应多字节字符的函数和实现
- 在函数参数中明确设置编码方式

- **只使用对应多字节字符的函数和实现**
  Java、.NET 和 Perl（版本 5.8 及以上）无需特别注意，但 PHP 需要遵循以下要求：
  - 源代码应以 UTF-8（推荐）或 EUC-JP 编码保存
  - 设置 php.ini 文件中的 mbstring.internal_encoding 与源代码文件的编码一致
  - 原则上所有字符串操作都应使用 mbstring 系列函数

- **在函数的参数中明确设置编码方式**
  使用 PHP 时需注意，在调用 mbstring 系列函数时不显式指定编码方式的话，将使用 php.ini 中设置的 mbstring.internal_encoding 值。对于 `htmlspecialchars` 等函数，必须手动设置字符编码方式。

> **专栏：调用 htmlspecialchars 函数时必须指定字符编码方式**
>
> 许多 PHP 入门书籍宣称在使用 `htmlspecialchars` 时可以不指定字符编码方式，这是错误的。老版本的 `htmlspecialchars` 函数在字符编码检查方面不够充分，新版本已加强了这一方面的检查。通过指定字符编码，可以提高系统的安全性。

#### 输出时设置正确的字符编码方式
在以下几种情况下，需要手工设置编码方式：

- 正确设置 HTTP 返回头的 Content-Type 中的编码方式（请参考 4.3 节）
- 正确设置数据库的字符编码方式（请参考 4.4 节）
- 在所有需要设置字符编码的地方设置编码方式

- **正确设置 HTTP 返回头的 Content-Type 中的编码方式**
  如果 Content-Type 中设置不正确的编码方式，可能会导致浏览器将文件内容误认为 UTF-7 编码，从而引发 XSS 漏洞。对于日语处理 [20]，推荐使用以下三种编码之一：
  - UTF-8（推荐）
  - Shift_JIS（仅限面向手机的 Web 网站）
  - EUC-JP

- **正确设置数据库的字符编码方式**
  数据库的字符编码设置会影响系统安全性。以下是几个设置点（根据数据库类型有所不同）：
  - 保存时的编码方式（可按列、表或数据库设置）
  - 数据库内处理时使用的编码方式
  - 连接到数据库引擎时使用的编码方式
  推荐统一使用 Unicode 编码，即 UTF-8 或 UTF-16。

- **通过“尾骶骨测试”确认数据库编码方式是否正常工作**
  一种简单的方法是将“尾骶骨”三个字录入数据库，然后在页面上确认其显示是否正常。如果能正常显示，则说明数据库的 Unicode 设置正常。否则，需要检查处理环节中是否出现了 Shift_JIS 或 EUC-JP。此方法称为“尾骶骨测试”。“尾骶骨”中的“骶”字（U+9AB6）是 JIS X 0208 中不存在的汉字，适合作为测试用例 [21]。

- **在所有需要设置字符编码方式的地方设置编码方式**
  根据应用程序所使用的编程语言或第三方库，可能在文件读写、邮件发送等操作中需要手工设置编码方式。务必确认所有可以设置字符编码的地方，并设置正确的编码方式。

#### 其他对策：尽量避免编码自动检测
某些编程语言（如 PHP、Java、Perl）支持自动判断 HTTP 请求的编码方式，但基于以下原因，不建议使用自动检测功能：
- 在只考虑 Shift_JIS 的应用程序中，如果输入数据中混有 Unicode 的 U+00A5，经过转义处理后再转换为 Shift_JIS 编码时，可能会被错误转换为 0x5C（反斜线），从而导致漏洞。
- 自动检测存在缺陷时可能导致判断结果不正确，进而引发乱码等问题。

因此，应尽量避免使用自动编码检测功能，而是通过手工显式设置编码方式。

[16] 注释编号下：此处手机指的是功能机。现在的智能手机浏览器几乎都支持 Unicode。------译者注  
[17] 注释编号下：尽管一些手机浏览器开始支持 UTF-8 编码，但在 2010 年 12 月之前，au/KDDI 主页明确要求使用 Shift_JIS 编码，不允许使用 UTF-8。  
[18] 注释编号下：输入字符编码自动选择时存在混入 U+00A5 等 Shift_JIS 中不存在的字符的风险。  
[19] 注释编号下：手机上的邮件客户端也能处理 UTF-8 编码的邮件，据说是为了支持 iPhone 邮件客户端在特定条件下发送的 UTF-8 编码邮件。  
[20] 注释编号下：中文一般使用的编码方式为：UTF-8、GB2312 和 GBK。