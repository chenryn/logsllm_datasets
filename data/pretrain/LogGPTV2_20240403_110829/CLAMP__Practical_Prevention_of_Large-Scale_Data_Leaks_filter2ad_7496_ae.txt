### Performance Evaluation

#### Login Throughput
The system can handle up to 85 logins per second. While this throughput is relatively low, it still outperforms the process of launching a new WebStack, which takes an average of 36 seconds. We believe that CLAMP’s performance can be further enhanced by leveraging multi-core platforms and optimized forking techniques [5, 30]. Additionally, the Dispatcher can buffer incoming client logins, allowing CLAMP to manage larger bursts of users, albeit with increased HTTP response latency.

#### Simultaneous Connections
To measure the number of simultaneous connections our prototype can support, we initiated 500 clients at a fixed rate (X clients per second). Each client requested an SSL-protected PHP page that performed 10 unique database queries. We measured the time taken for each client's request and considered a request successful if it completed within two seconds. The system's overall throughput was defined as the highest value of X for which all 500 clients' requests were successfully serviced. This approach represents a worst-case scenario for CLAMP, as each request must be directed to a different WebStack. As detailed in Section 6.5, we used 50 static WebStacks to simulate the effects of delta virtualization.

On the native server (running directly on the hardware), we measured a throughput of 83 connections per second. In contrast, our prototype achieved a throughput of 35 connections per second, which is approximately 42% of the native performance. The primary sources of overhead are the virtualized networking and the context switching between multiple WebStacks. Despite the unoptimized state of our prototype, and considering the security benefits provided by CLAMP, this performance is reasonable, as it allows the server to process over three million requests per day.

### Related Work

CLAMP focuses on mitigating the impact of a compromised web server by restricting the flow of sensitive data among code modules using virtualization. We will not delve into the extensive prior work on detecting and preventing exploits in network servers but will instead focus on more closely related work in information flow control.

#### Mandatory Access Control (MAC)
Mandatory Access Control (MAC) systems partition software to protect data confidentiality and integrity by limiting how components access one another. Examples include MULTICS [23], SELinux [25, 26], and AppArmor [20]. Recent research has introduced more flexible MAC, known as Distributed Information Flow Control (DIFC) [17]. DIFC is data-centric and enables security policy enforcement even in systems lacking strong isolation. While DIFC systems offer significant expressive power, creating or retrofitting applications to use them requires specialized knowledge of DIFC-specific application platforms. For instance, Asbestos [4] and HiStar [33] propose new operating systems and require applications to be ported to use DIFC-specific abstractions. Other systems, like Flume [11], implement DIFC using system call inter-positioning specific to particular operating systems. Similarly, specialized programming language constructs, such as JIF [17] and SIF [2], provide fine-grained DIFC but only for applications tailored to those constructs.

We observe that the high cost of adoption has hindered the deployment of DIFC techniques in production systems. CLAMP is designed to be readily applicable to real-world web applications. Although CLAMP does not provide all the features of a full DIFC system (e.g., it does not explicitly label data), its focus on the specific domain of web applications allows it to protect user data while providing developers the flexibility to choose the best-fitting web application components (OS, web server, programming language).

#### Commercial Solutions
Commercial products that provide row-level database access control [18] are similar in spirit to our Query Restrictor. However, these solutions may allow a compromised web server to access sensitive data for all active users. Therefore, a CLAMP-like approach, which isolates user authentication and code running on behalf of different users, remains desirable.

### Conclusion

In this work, we have explored techniques to secure LAMP applications against a wide range of threats with minimal changes to existing applications. We developed the CLAMP architecture to isolate the large and complex web server and scripting environments from a small, trusted computing base that provides user authentication and data access control. CLAMP stands out for its simplicity for web developers. Our proof-of-concept implementation indicates that porting existing LAMP applications to CLAMP requires minimal changes, and the prototype can handle millions of SSL sessions per day.

### Acknowledgments

The authors would like to thank Diana Parno, Amar Phanishayee, Arvind Seshadri, and Matthew Wachs for their insightful comments and suggestions. The anonymous reviewers also provided valuable feedback.

This research was supported in part by CyLab at Carnegie Mellon under grant DAAD19-02-1-0389 from the Army Research Office, grants CNS-0509004, CNS-0716287, CCF-0424422, and CNS-0831440 from the National Science Foundation, and support from the iCAST project, National Science Council, Taiwan under the Grant NSC96-3114-P-001-002-Y. Bryan Parno is supported in part by an NSF Fellowship. The views and conclusions contained here are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements of ARO, CMU, iCast, NSF, or the U.S. Government or any of its agencies.

### References

[1] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebar, I. Pratt, and A. Warfield. Xen and the art of virtualization. In SOSP, Oct. 2003.
[2] S. Chong, K. Vikram, and A. C. Myers. SIF: Enforcing confidentiality and integrity in web applications. In Proceedings of the USENIX Security Symposium, Aug. 2007.
[3] Courou. MyPhpMoney v2.0. http://sourceforge.net/projects/myphpmoney/, Apr. 2008.
[4] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey, D. Ziegler, E. Kohler, D. Mazières, F. Kaashoek, and R. Morris. Labels and event processes in the Asbestos operating system. In SOSP, Oct. 2005.
[5] D. Gupta, S. Lee, M. Vrable, S. Savage, A. C. Snoeren, A. Vahdat, G. Varghese, and G. M. Voelker. Difference engine: Harnessing memory redundancy in virtual machines. In OSDI, Dec. 2008.
[6] H. Härder, M. Hohmuth, J. Liedtke, J. Wolter, and S. Schönberg. The performance of μ-kernel-based systems. In SOSP, 1997.
[7] H. Havenstein. Google unveils plans for online personal health records. Computerworld, Oct. 2007.
[8] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason, and C. E. Kahn. A retrospective on the VAX VMM security kernel. IEEE Transactions on Software Engineering, 17(11):1147–1165, Nov. 1991.
[9] R. Kerber. Court filing in TJX breach doubles toll. The Boston Globe, Oct. 2007.
[10] E. Kohler. Hot crap! In Proceedings of WOWCS, Apr. 2008.
[11] M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek, E. Kohler, and R. Morris. Information flow control for standard OS abstractions. In SOSP, Oct. 2007.
[12] S. Kumar and K. Schwan. NetChannel: a VMM-level mechanism for continuous, transparent device access during VM migration. In Proceedings of VEE, Mar. 2008.
[13] H. A. Lagar-Cavilla, J. A. Whitney, A. Scannell, P. Patchin, S. M. Rumble, E. de Lara, M. Brudno, and M. Satyanarayanan. SnowFlock: Rapid Virtual Machine Cloning for Cloud Computing. In Proceedings of Eurosys, Apr. 2009.
[14] D. Magenheimer. Xen/IA64 code size stats. Xen developer’s mailing list: http://lists.xensource.com/, Sept. 2005.
[15] A. Menon, A. L. Cox, and W. Zwaenepoel. Optimizing network virtualization in Xen. In Proceedings of the USENIX Annual Technical Conference (ATC), June 2006.
[16] Microsoft Corp. Microsoft announces HealthVault. http://www.microsoft.com/industry/government/solutions/healthvault.mspx%, Oct. 2007.
[17] A. C. Myers and B. Liskov. Protecting privacy using the decentralized label model. ACM Transactions on Software Engineering and Methodology, 9(4):410–442, Oct. 2000.
[18] A. Nanda. Keeping information private with VPD. In Oracle Magazine, Mar. 2004.
[19] Open Source E-Commerce Solutions. osCommerce. http://www.oscommerce.com/, Apr. 2008.
[20] openSUSE. AppArmor. http://en.opensuse.org/AppArmor.
[21] PGP Corporation. 2006 annual study: Cost of a data breach. http://www.computerworld.com/pdfs/PGP Annual Study PDF.pdf.
[22] M. Rhor. Alum charged with hacking into Texas A&M. http://www.guardian.co.uk/worldlatest/story/0,,-6902530, 00.html, Sept. 2007.
[23] J. H. Saltzer and M. D. Schroeder. Protection of information in computer systems. Proceedings of IEEE, 63(9), 1975.
[24] J. R. Santos, G. J. Janakiraman, Y. Turner, and I. Pratt. NetChannel 2: Optimizing network performance. In Proceedings of the XenSource/Citrix Xen Summit, Nov. 2007.
[25] S. Smalley and P. Loscocco. Integrating flexible support for security policies into the Linux operating system. In Proc. of the USENIX Annual Technical Conference, 2001.
[26] R. Spencer, S. Smalley, P. Loscocco, M. Hibler, D. Andersen, and J. Lepreau. The Flask security architecture: System support for diverse security policies. In Proceedings of the USENIX Security Symposium, 1999.
[27] TD AMERITRADE releases results of client SPAM investigation. http://www.amtd.com/newsroom/releasedetail.cfm?ReleaseID=264044, Sept. 2007.
[28] Verizon Business. 2008 data breach investigations report. http://www.verizonbusiness.com/resources/security/databreachreport.pdf.
[29] VMware Corporation. VMware ESX, bare-metal hypervisor for virtual machines. http://www.vmware.com/products/vi/esx/, Nov. 2008.
[30] M. Vrable, J. Ma, J. Chen, D. Moore, E. Vandekieft, A. C. Snoeren, G. M. Voelker, and S. Savage. Scalability, fidelity, and containment in the Potemkin virtual honeyfarm. In SOSP, 2005.
[31] H. Wang, X. Fan, and J. H. C. Jackson. Protection and communication abstractions for web browsers in MashupOS. In SOSP, Oct. 2007.
[32] D. A. Wheeler. Linux kernel 2.6: It’s worth more! Available at: http://www.dwheeler.com/essays/linux-kernel-cost.html, Oct. 2004.
[33] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazières. Making information flow explicit in HiStar. In OSDI, 2006.

### Appendix A: Applying CLAMP to MyPhpMoney

This appendix describes the process of porting MyPhpMoney [3], a personal finance manager, to CLAMP.

#### User Authenticator (UA)
Porting MyPhpMoney was straightforward. We identified the password checking code (less than 150 lines of code) in the original source and copied it to the UA. We added calls to the UA in one file (login.php), which handles user creation, login, and logoff, adding less than 10 lines of code. Finally, we replaced two deprecated PHP database-access functions with their modern equivalents. In total, identifying the relevant code and making the necessary modifications required about two hours.

#### Query Restrictor (QR)
We use the same QR implementation for all CLAMP applications. The QR operations unique to MyPhpMoney are specified by the appropriate data access policies.

#### Data Access Policies
Developing access policies for MyPhpMoney was simple. We identified 7 tables containing sensitive data, so each policy file contains 7 lines, one for each table. Since MyPhpMoney does not include an administrative interface, we crafted policies for two access classes: user and nobody. This effort required less than an hour.

### Appendix B: Applying CLAMP to HotCRP

We also ported the HotCRP conference management software [10] to CLAMP. HotCRP allows authors to submit papers and PC members to review, comment on, and rank the papers. Porting HotCRP to CLAMP required significantly more effort than our other examples.

#### User Authenticator (UA)
Extracting the user authentication functions for HotCRP was straightforward, supporting our hypothesis that the authentication functionality for most websites is largely self-contained. We copied the login functionality (approximately 40 lines of code) to the UA and added calls to the UA in one file (index.php), which handles user creation, login, and logoff, adding less than 6 lines of code. In total, creating the UA for HotCRP required less than an hour of effort.

#### Query Restrictor (QR)
As with our previous ports, HotCRP required no changes to the QR. All HotCRP-specific knowledge was captured in the data-access policies.

#### Data Access Policies
HotCRP defines many potential user roles and is specifically designed for flexibility, allowing PC Chairs to choose from a variety of security policies. This flexibility adds to the complexity of the software, raising the possibility of information leaks. Indeed, the author of HotCRP expresses a desire for a "flexible information flow control layer" to prevent inadvertent information exposure [10].

With HotCRP, a user can be an author, an external reviewer, a PC member, a PC Chair, a Chair’s Assistant, or any combination of these. For example, a PC member can also be an author. To create access policies for all these potential roles, we first developed policies for users who fall into only one category, giving us five access classes. We then developed policies for "hybrid" users who act in multiple roles. Not all permutations were needed. For instance, the PC Chair has full access rights to all the data in the database. If the PC Chair is also an author, she retains all her access rights. On the other hand, PC members typically should not see reviews for papers they have conflicts with, but authors can (after decisions have been made) see the reviews for their own papers. Fortunately, even for these cases, the hybrid policy proved relatively straightforward to create, with most tables using the same restrictions as the more permissive role. In the end, we only added two hybrid access classes.

The real challenge for porting HotCRP to CLAMP came from the extreme flexibility that HotCRP gives to the PC Chair. For example, the PC chair can decide that submissions are anonymous, not anonymous, or optionally anonymous. Similar options are available for reviews. Thus, the definition of the sensitive data CLAMP should protect can change radically based on the PC Chair’s choices. As developers unfamiliar with HotCRP, we found it challenging to extract all this logic from the code and encode it in SQL view restrictions for CLAMP’s data access policies.

Nonetheless, with only a few days of effort, we created a full set of reasonable policies for HotCRP. Figure 8 illustrates one of the policy statements we developed.

To validate our policies, we asked HotCRP’s creator, Eddie Kohler, to review their accuracy. He agreed that the policies seemed reasonable and noted a few mistakes in our initial version. This review highlights several key points:

1. **Feasibility of Data Access Policies**: It is possible to develop reasonable data access policies even for complex applications with dynamic data access controls. HotCRP represents an extreme case, but many other applications that handle sensitive data require far less flexibility. For example, a bank will always want users’ financial data protected and is unlikely to purposefully include application options that allow customers to see each other’s data.

2. **Tolerance for Policy Errors**: The errors we made in our initial policies illustrate that CLAMP can provide significant benefits even if its policies are not completely accurate. A policy may incorrectly limit access to data, in which case security is not harmed, and the missing data will likely be easy to notice and debug. Even when a policy permits access to data that should be kept private, the policy still protects other data. For example, when writing the author policy, we incorrectly believed that the field `leadContactId` in the `Paper` table referred to the lead author rather than the lead PC member. While our policy would not have protected the user ID of this PC member from a determined attacker, the policy still prevented authors from seeing each other’s papers and hid reviews appropriately.

3. **Centralized Access Control**: CLAMP’s design consolidates all access control decisions in one place (the QR) in the form of policy files. These files can be independently reviewed for accuracy, which is much simpler than asking someone to learn an entire codebase and decide whether the access control decisions sprinkled throughout the code will effectively preserve the secrecy of user data. This makes independent auditing of a site’s security policy more feasible.

```sql
SELECT
  Paper.paperId, title, ...,
  /* Blank out the outcome field, if authors aren’t allowed to see it */
  (IF((SELECT COUNT(*) FROM Settings WHERE name = 'au_seedec') > 0, outcome, 0)) AS outcome,
  NULL AS leadContactId, ... /* Authors can never see the lead PC contact ID */
FROM Paper
JOIN PaperConflict AS Conf ON
  (Conf.paperId = Paper.paperId AND Conf.conflictType >= @author AND Conf.contactId = UID);
```

**Figure 8: Example HotCRP Access Control.** This abbreviated statement restricts an author’s view of the `Paper` table. Individual fields are hidden based on the conference’s settings. The rows returned are restricted to papers authored by the authenticated author (where `Conf.conflictType >= @author` indicates an author and `Conf.contactId = UID`).
```