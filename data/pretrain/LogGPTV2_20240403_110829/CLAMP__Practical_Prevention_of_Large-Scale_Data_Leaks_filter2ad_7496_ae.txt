to 85 logins/second. While low, this approach is still faster
than launching a new WebStack, which takes an average
of 36 seconds. We also believe CLAMP’s results can be
improved using multi-core platforms and optimized forking
techniques [5, 30]. In addition, the Dispatcher can buffer
incoming client logins, allowing CLAMP to tolerate larger
bursts of users at the cost increasing the latency of the
HTTP response.
Connections. To measure the number of simultaneous
connections our prototype can support, we spawn 500
clients at a ﬁxed rate, i.e., X clients per second. Each client
requests an SSL-protected PHP page that makes 10 unique
database queries. We measure the amount of time taken for
each client’s request, and we judge a request successful if
it completes in under two seconds. We deﬁne the system’s
overall throughput as the highest value of X for which
all 500 clients’ requests are successfully serviced. This
approach represents a worst-case scenario for CLAMP,
since each request must be directed to a different WebStack.
As explained in Section 6.5, we use 50 static WebStacks
to simulate the effects of delta virtualization.
On the native server (running directly on the hard-
ware), we measured a throughput of 83 connections/second,
while with our prototype, we measured a throughput of
35 connections/second (i.e., 42% of native). The main
sources of overhead are the virtualized networking, and the
expense of context switching between so many WebStacks.
Nonetheless, given the unoptimized state of our prototype,
and the security beneﬁts CLAMP provides, we feel that
this performance is reasonable, given that it would allow
the server to process over three million requests per day.
8. Related Work
CLAMP focuses on tolerating the compromise of a web
server. It operates by restricting the ﬂow of sensitive
data among code modules using virtualization. We omit
an extensive discussion of the signiﬁcant prior work that
focuses on detecting and preventing exploits in network
servers; instead we focus on more closely related work in
information ﬂow control.
Mandatory Access Control (MAC) partitions software
systems to protect data conﬁdentiality and integrity by
limiting how components access one another (e.g., MUL-
TICS [23], SELinux [25, 26] and AppArmor [20]). Recent
research has yielded more ﬂexible MAC called distributed
information ﬂow control (DIFC) [17]. DIFC is data-centric,
enabling security policy enforcement even if systems do
not provide strong protection via isolation. While DIFC
systems provide considerable expressive power, creating
applications within this model (or retroﬁtting legacy code
to use it) requires specialized knowledge of DIFC-speciﬁc
application platforms. For example, Asbestos [4] and HiS-
tar [33] propose a new OS and require applications to
be ported to use new DIFC-speciﬁc abstractions. Other
systems (e.g., Flume [11]) implement DIFC using system
call inter-positioning speciﬁc to a particular OS. Similarly,
specialized programming language constructs (e.g., JIF [17]
and SIF [2]) provide ﬁne-grained DIFC, but only for
applications tailored to those constructs.
We observe that the high cost of adoption has hampered
the deployment of DIFC techniques in production systems,
and design CLAMP to be readily applicable to real-world
web applications. Although CLAMP does not provide all
of the properties of a full DIFC system (e.g., it does not
explicitly label data), our focus on the speciﬁc domain
of web applications allows CLAMP to protect user data,
while providing developers with the ﬂexibility to select the
web application components (OS, web server, programming
language) that best ﬁt their needs.
Commercial products are available that provide row-level
database access control [18], similar in spirit to our Query
Restrictor. Since these solutions may allow a compromised
web server to access sensitive data for all active users,
a CLAMP-like approach of extracting user authentication
into an isolated module and isolating code running on
behalf of different users is still desirable.
9. Conclusion
In this work, we have investigated techniques to secure
LAMP applications against a large number of threats while
requiring minimal changes to existing applications. We
developed the CLAMP architecture to isolate the large and
complex web server and scripting environments from a
small trusted computing base that provides user authen-
tication and data access control. CLAMP occupies a point
166
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
in the web security design space notable for its simplicity
for the web developer. Our proof-of-concept implementa-
tion indicates that porting existing LAMP applications to
CLAMP requires a minimal number of changes, and the
prototype can handle millions of SSL sessions per day.
Acknowledgments
The authors would like to thank Diana Parno, Amar
Phanishayee, Arvind Seshadri, and Matthew Wachs for
their insightful comments and suggestions. The anonymous
reviewers also provided valuable feedback.
This research was supported in part by CyLab at
Carnegie Mellon under grant DAAD19-02-1-0389 from
the Army Research Ofﬁce, grants CNS-0509004, CNS-
0716287, CCF-0424422, and CNS-0831440 from the Na-
tional Science Foundation, and support from the iCAST
project, National Science Council, Taiwan under the Grant
NSC96-3114-P-001-002-Y. Bryan Parno is supported in
part by an NSF Fellowship. The views and conclusions
contained here are those of the authors and should not be
interpreted as necessarily representing the ofﬁcial policies
or endorsements, either express or implied, of ARO, CMU,
iCast, NSF, or the U.S. Government or any of its agencies.
References
[1] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris,
A. Ho, R. Neugebar, I. Pratt, and A. Warﬁeld. Xen and
the art of virtualization. In SOSP, Oct. 2003.
[2] S. Chong, K. Vikram, and A. C. Myers. SIF: Enforcing con-
ﬁdentiality and integrity in web applications. In Proceedings
of the USENIX Security Symposium, Aug. 2007.
[3] Courou. MyPhpMoney v2.0. http://sourceforge.net/projects/
myphpmoney/, Apr. 2008.
[4] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey,
D. Ziegler, E. Kohler, D. Mazi`eres, F. Kaashoek, and R. Mor-
ris. Labels and event processes in the Asbestos operating
system. In SOSP, Oct. 2005.
[5] D. Gupta, S. Lee, M. Vrable, S. Savage, A. C. Snoeren,
A. Vahdat, G. Varghese, and G. M. Voelker. Difference
engine: Harnessing memory redundancy in virtual machines.
In OSDI, Dec. 2008.
[6] H. H¨artig, M. Hohmuth,
J. Wolter, and
S. Sch¨onberg. The performance of µ-kernel-based systems.
In SOSP, 1997.
J. Liedtke,
[7] H. Havenstein. Google unveils plans for online personal
health records. Computerworld, Oct. 2007.
[8] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason,
and C. E. Kahn. A retrospective on the VAX VMM
security kernel. IEEE Transactions on Software Engineering,
17(11):1147–1165, Nov. 1991.
[9] R. Kerber. Court ﬁling in TJX breach doubles toll. The
Boston Globe, Oct. 2007.
[10] E. Kohler. Hot crap! In Proceedings of WOWCS, Apr. 2008.
[11] M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek,
Information ﬂow control for
E. Kohler, and R. Morris.
standard OS abstractions. In SOSP, Oct. 2007.
167
[12] S. Kumar and K. Schwan. Netchannel: a VMM-level
mechanism for continuous, transparent device access during
VM migration. In Proceedings of VEE, Mar. 2008.
[13] H. A. Lagar-Cavilla, J. A. Whitney, A. Scannell, P. Patchin,
S. M. Rumble, E. de Lara, M. Brudno, and M. Satya-
narayanan. SnowFlock: Rapid Virtual Machine Cloning for
Cloud Computing. In Proceedings of Eurosys, Apr. 2009.
[14] D. Magenheimer. Xen/IA64 code size stats. Xen developer’s
mailing list: http://lists.xensource.com/, Sept. 2005.
[15] A. Menon, A. L. Cox, and W. Zwaenepoel. Optimizing net-
work virtualization in Xen. In Proceedings of the USENIX
Annual Technical Conference (ATC), June 2006.
[16] Microsoft Corp.
Microsoft
announces HealthVault.
http://www.microsoft.com/industry/government/solutions/
healthvault.mspx%, Oct. 2007.
[17] A. C. Myers and B. Liskov. Protecting privacy using the
decentralized label model. ACM Transactions on Software
Engineering and Methodology, 9(4):410–442, Oct. 2000.
[18] A. Nanda. Keeping information private with VPD. In Oracle
Magazine, Mar. 2004.
[19] Open Source E-Commerce Solutions. osCommerce. http:
//www.oscommerce.com/, Apr. 2008.
[20] openSUSE. AppArmor. http://en.opensuse.org/AppArmor.
[21] PGP Corporation.
2006 annual study: Cost of a data
breach. http://www.computerworld.com/pdfs/PGP Annual
Study PDF.pdf.
[22] M. Rhor. Alum charged with hacking into Texas A&M.
http://www.guardian.co.uk/worldlatest/story/0,,-6902530,
00.html, Sept. 2007.
[23] J. H. Saltzer and M. D. Schroeder. Protection of information
in computer systems. Proceedings of IEEE, 63(9), 1975.
[24] J. R. Santos, G. J. Janakiraman, Y. Turner, and I. Pratt.
In Pro-
Netchannel 2: Optimizing network performance.
ceedings of the XenSource/Citrix Xen Summit, Nov. 2007.
[25] S. Smalley and P. Loscocco. Integrating ﬂexible support for
security policies into the Linux operating system. In Proc.
of the USENIX Annual Technical Conference, 2001.
[26] R. Spencer, S. Smalley, P. Loscocco, M. Hibler, D. Ander-
sen, and J. Lepreau. The Flask security architecture: System
support for diverse security policies. In Proceedings of the
USENIX Security Symposium, 1999.
[27] TD AMERITRADE releases results of client SPAM inves-
tigation. http://www.amtd.com/newsroom/releasedetail.cfm?
ReleaseID=264044, Sept. 2007.
[28] Verizon Business.
2008 data breach investigations re-
http://www.verizonbusiness.com/resources/security/
port.
databreachreport.pdf.
[29] VMware Corporation. VMware ESX, bare-metal hypervisor
for virtual machines. http://www.vmware.com/products/vi/
esx/, Nov. 2008.
[30] M. Vrable, J. Ma, J. Chen, D. Moore, E. Vandekieft, A. C.
Snoeren, G. M. Voelker, and S. Savage. Scalability, ﬁdelity
and containment in the Potemkin virtual honeyfarm.
In
SOSP, 2005.
[31] H. Wang, X. Fan, and J. H. C. Jackson. Protection and
communication abstractions for web browsers in MashupOS.
In SOSP, Oct. 2007.
[32] D. A. Wheeler. Linux kernel 2.6: It’s worth more! Available
at: http://www.dwheeler.com/essays/linux-kernel-cost.html,
Oct. 2004.
[33] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazi`eres.
Making information ﬂow explicit in HiStar. In OSDI, 2006.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
Appendix A.
Applying CLAMP to MyPhpMoney
This appendix describes the process by which we ported
MyPhpMoney [3], a personal ﬁnance manager, to CLAMP.
Porting MyPhpMoney was
User Authenticator (UA).
straightforward. We identiﬁed password checking code
(less than 150 lines of code) in the original source and
copied it to the UA. We added calls to the UA to one
ﬁle (login.php) which handles user creation, login, and
logoff, adding less than 10 lines altogether. Finally, we
replaced two deprecated PHP database-access functions
with their modern equivalents. In total, identifying the rele-
vant code and making the necessary modiﬁcations required
about two hours.
Query Restrictor (QR). We use the same QR implemen-
tation for all CLAMP applications. The QR operations that
are unique to MyPhpMoney are speciﬁed by the appropriate
data access policies.
Data Access Policies. Developing access policies for
MyPhpMoney was also simple. We identiﬁed 7 tables that
contain sensitive data. Thus, each policy ﬁle contains 7
lines, one for each table. Since MyPhpMoney does not
include an administrative interface, we crafted policies for
two access classes: user and nobody. Altogether, this
effort required less than an hour.
Appendix B.
Applying CLAMP to HotCRP
We also ported the HotCRP conference management soft-
ware [10] to CLAMP. HotCRP allows authors to submit
papers and PC members to review, comment on, and
rank the papers. Porting HotCRP to CLAMP required
considerably more effort than our other examples.
User Authenticator (UA). Extracting the user authentica-
tion functions for HotCRP was straightforward, supporting
our hypothesis that the authentication functionality for most
websites is largely self-contained. We copied the login
functionality (approximately 40 lines of code) to the UA,
and added calls to the UA to one ﬁle (index.php) that
handles user creation, login, and logoff, adding less than 6
total lines of code. In total, creating the UA for HotCRP
required less than an hour of effort.
Query Restrictor (QR). As with our previous ports,
HotCRP required no changes to the QR. All of the HotCRP-
speciﬁc knowledge was captured in the data-access policies.
Data Access Policies. HotCRP deﬁnes many potential
user roles, and it is speciﬁcally designed for ﬂexibility,
allowing PC Chairs to choose from a variety of secu-
rity policies. This ﬂexibility adds to the complexity of
the software, raising the possibility of information leaks.
Indeed, the author of HotCRP expresses a desire for a
“ﬂexible information ﬂow control layer” in order to prevent
inadvertent information exposure [10].
With HotCRP, a user can be an author, an external
reviewer, a PC member, a PC Chair, a Chair’s Assistant,
or any combination of these. For example, a PC member
can be an author as well. To create access policies for
all of these potential roles, we ﬁrst developed policies for
users that only fall into one category, for example, users
who are only authors. This gave us ﬁve access classes.
We then developed policies for “hybrid” users who act
in multiple roles. Not all permutations were needed. For
instance, the PC Chair has full access rights to all of the
data in the database. If the PC Chair is also an author,
she still retains all of her access rights. On the other hand,
PC members typically should not see reviews for papers
they have conﬂicts with, but authors can (after decisions
have been made) see the reviews for their own papers.
Fortunately, even for these cases, the hybrid policy proved
to be relatively straightforward to create, with most of
the tables simply using the same restrictions as the more
permissive role. In the end, we only added two hybrid
access classes.
The real challenge for porting HotCRP to CLAMP came
from the extreme ﬂexibility that HotCRP gives to the
PC Chair. For example,
the PC chair can decide that
submissions are anonymous, not anonymous, or optionally
anonymous. Similar options are available for reviews. Thus,
the deﬁnition of the sensitive data CLAMP should protect
can change radically based on the PC Chair’s choices. As
developers unfamiliar with HotCRP, we found it challeng-
ing to extract all of this logic from the code and encode it in
SQL view restrictions for CLAMP’s data access policies.
Nonetheless, with only a few days of effort, we created
a full set of reasonable policies for HotCRP. Figure 8
illustrates one of the policy statements we developed.
To validate our policies, we asked HotCRP’s creator,
Eddie Kohler, to review their accuracy. He agreed that the
policies seemed reasonable and noted a few mistakes in our
initial version. This review highlights several key points.
it
First,
is quite possible to develop reasonable data
access policies even for complex applications with dynamic
data access controls. Indeed, in many ways, HotCRP repre-
sents an extreme in this regard. Many other applications that
handle sensitive data require far less ﬂexibility. For exam-
ple, a bank will always want users’ ﬁnancial data protected,
and is unlikely to purposefully include application options
that allow customers to see each other’s data.
Second, the errors we did make in our initial policies
illustrate that CLAMP can provide signiﬁcant beneﬁts even
if its policies are not completely accurate. A policy may
incorrectly limit access to data, in which case security is
not harmed, and the missing data will likely be easy to
notice and debug. Even when a policy permits access to
168
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply. 
select
Paper.paperId, title, ...,
/* Blank out the outcome field, if authors aren’t allowed to see it */
(if( (select count(*) from Settings where name =’au_seedec’) > 0, outcome, 0)) as outcome,
null as leadContactId, ... /* Authors can never see the lead PC contact ID */
from Paper
join PaperConflict as Conf on
(Conf.paperId=Paper.paperId and Conf.conflictType>=@author and Conf.contactId=UID);
Figure 8. Example HotCRP Access Control. This abbreviated statement restricts an author’s view of the Paper table.
Individual ﬁelds are hidden based on the conference’s settings. The rows returned are restricted to papers that were authored
( Conf.conflictType>=@author indicates an author) by the authenticated author ( Conf.contactId=UID).
data that should be kept private, the policy still protects
other data. For example, when writing the author policy,
we incorrectly believed that the ﬁeld leadContactId
in the Paper table referred to the lead author, rather than
the lead PC member. While our policy would not have
protected the user ID of this PC member from a determined
attacker, the policy still prevents authors from seeing each
other’s papers, hides reviews appropriately, etc.
Finally, CLAMP’s design consolidates all access control
decisions in one place (the QR) in the form of policy ﬁles.
These ﬁles can be independently reviewed for accuracy.
This is much simpler than asking someone to learn an entire
code base and decide whether the access control decisions
sprinkled throughout the code will effectively preserve the
secrecy of user data. As a result, independent auditing of
a site’s security policy becomes more feasible.
169
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:17:42 UTC from IEEE Xplore.  Restrictions apply.