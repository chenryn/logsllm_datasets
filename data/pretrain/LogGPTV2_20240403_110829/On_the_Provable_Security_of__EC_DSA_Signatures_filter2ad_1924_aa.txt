title:On the Provable Security of (EC)DSA Signatures
author:Manuel Fersch and
Eike Kiltz and
Bertram Poettering
On the Provable Security of (EC)DSA Signatures
Manuel Fersch
PI:EMAIL
Eike Kiltz
PI:EMAIL
Bertram Poettering
PI:EMAIL
Horst Görtz Institute for IT Security
Ruhr University Bochum, Germany
ABSTRACT
Among the signature schemes most widely deployed in prac-
tice are the DSA (Digital Signature Algorithm) and its ellip-
tic curves variant ECDSA. They are represented in many in-
ternational standards, including IEEE P1363, ANSI X9.62,
and FIPS 186-4. Their popularity stands in stark contrast
to the absence of rigorous security analyses: Previous works
either study modiﬁed versions of (EC)DSA or provide a se-
curity analysis of unmodiﬁed ECDSA in the generic group
model. Unfortunately, works following the latter approach
assume abstractions of non-algebraic functions over generic
groups for which it remains unclear how they translate to
the security of ECDSA in practice. For instance, it has been
pointed out that prior results in the generic group model ac-
tually establish strong unforgeability of ECDSA, a property
that the scheme de facto does not possess. As, further, no
formal results are known for DSA, understanding the secu-
rity of both schemes remains an open problem.
In this work we propose GenDSA, a signature framework
that subsumes both DSA and ECDSA in unmodiﬁed form.
It carefully models the “modulo q” conversion function of
(EC)DSA as a composition of three independent functions.
The two outer functions mimic algebraic properties in the
function’s domain and range, the inner one is modeled as a
bijective random oracle. We rigorously prove results on the
security of GenDSA that indicate that forging signatures in
(EC)DSA is as hard as solving discrete logarithms. Impor-
tantly, our proofs do not assume generic group behavior.
Keywords
Provable security; DSA; ECDSA; GOST; SM2
1.
INTRODUCTION
Digital signatures.
With the main application of message and entity authenti-
cation, digital signature schemes are an omnipresent crypto-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978413
graphic primitive in today’s security landscape. The speciﬁc
schemes deployed most often are the RSA-FDH variant from
PKCS#1v1.5, and the DLP-based DSA and ECDSA. For in-
stance, current versions of TLS authenticate servers exclu-
sively on basis of these schemes. Unfortunately, up to now,
for none of the schemes a rigorous security analysis is known
that would formally establish that the goal of unforgeabil-
ity is reached (partial results are known, the ones concern-
ing DSA and ECDSA are discussed below). Put diﬀerently,
currently it is only the (believed) absence of cryptanalytic
attacks that indicates the security of the three schemes in
practice. By providing new results on DSA and ECDSA this
paper aims at relaxing this clearly unsatisfactory situation.
The Fiat-Shamir transform and the forking lemma.
A classic strategy to construct digital signatures is through
the Fiat-Shamir heuristic. A standard example is the scheme
by Schnorr which is deﬁned in the discrete logarithm (DLP)
in a group G of prime order q, signing keys x co-
setting:
incide with exponents, veriﬁcation keys X = gx are group
elements, and a signature on a message m consists of the
components c = H(gr, m) and s = r + cx (mod q). Here,
exponent r is freshly picked per signing operation and H is
a hash function that maps into the exponent space. Veriﬁ-
cation works by recovering gr = gs/X c and checking that
c = H(gr, m).
Schnorr signatures are unforgeable if the DLP is hard [20].
The proof crucially relies on modeling H as a programmable
random oracle and involves a rewinding technique for ex-
tracting the signing key from any successful forger by solv-
ing a system of linear equations. The standard vehicle to
assess the extraction probability is the forking lemma [20].
DSA and ECDSA.
The signature scheme DSA and its close relative ECDSA
build on ideas of ElGamal and are deﬁned, like the Schnorr
scheme, in the DLP setting. However, they do not result
from the Fiat-Shamir heuristic.
Indeed, both DSA and
ECDSA require two independent hash functions, H and f ,
that map messages, respectively, group elements into the ex-
ponent space Zq. Function f is also known as the conversion
function. In a nutshell, if x is a signing key and X = gx the
corresponding veriﬁcation key, a signature on a message m
is a pair σ = (s, t) satisfying t = f (gr) for
r = (H(m) + xt)/s .
(1)
Signatures are veriﬁed by recovering gr = (gH(m)X t)1/s and
checking that f (gr) = t. While standards recommend us-
1651ing (truncated versions of) the hash functions of the SHA
family to instantiate H, ad-hoc constructions speciﬁc to the
discrete logarithm group are used for the conversion func-
tion f . Concretely, for DSA, which is deﬁned in a prime-
order subgroup of the multiplicative group of some prime
ﬁeld GF(p) and uses the canonic representation of group el-
ements as integers in [1 . . . p − 1], function f is deﬁned per
A (cid:55)→ (A mod p) mod q. In contrast, ECDSA is deﬁned on
elliptic curves over some ﬁnite ﬁeld F = GF(pn) and thus
group elements coincide with points (x, y) ∈ F × F; here,
mapping A (cid:55)→ A.x mod q is used to instantiate f , where A.x
denotes an encoding of the x-part of A as an integer. As the
quantities p and q in the DSA case, and the integer represen-
tation of a GF(pn) element and q in the ECDSA case, are
rather loosely related, the operations A mod p mod q and
A.x mod q do not make much sense from an algebraic point
of view. Indeed, as our studies suggest, likely the design-
ers of DSA and ECDSA aimed at exploiting speciﬁcally the
disruptive nature of these functions to achieve security for
their schemes.
Note that, although DSA and ECDSA evidently share
similarities with the construction of Schnorr, it is not clear at
all how to establish their security using the rewinding tech-
nique of the forking lemma.
Indeed, modeling hash func-
tion H as a random oracle and rewinding the adversary to
its m-queries does not seem to allow for the extraction of
the signing key: If the forger chooses a fresh ephemeral ex-
ponent for each forgery, in the corresponding equation sys-
tem to solve, the number of unknowns always dominates
the number of collected equations. Further, modeling f as
a random oracle seems prohibitive: For instance, in the case
of ECDSA, the result of applying f to a random element
in G is not uniformly distributed in Zq;1 even more prob-
lematic, ﬁnding preimages of the conversion function turns
out to be an easy task.2 As these are properties that a
random oracle does not possess, modeling the conversion
function as an ideal random function leads to questionable
overall results. Put diﬀerently, a formal result on the secu-
rity of DSA/ECDSA that is achieved by replacing f with
a random oracle says little about security in practice.3 De-
spite the described obstacles, partial results on the security
of DSA and ECDSA were established in prior work, as we
discuss next.
Prior analyses of DSA and ECDSA.
Brickell et al. [2] developed an extended version of the
forking lemma [20] and used it to study variants of DSA
signatures. In more detail, they deﬁned a general class of
signature schemes called Trusted El Gamal Type Signature
Scheme, and proved all signatures of this type unforgeable
in the random oracle model. Special cases of this framework
include the scheme DSA-I (reportedly due to Brickell, 1996)
in which the conversion function f is replaced by a random
oracle, and the scheme DSA-II which is like DSA but with
1On elliptic curves, for only about every second x-value a
corresponding curve point exists; this is responsible for a
huge bias of the ‘x mod q’ function.
2For DSA this is likely not the case: Inverting its conversion
function is conjectured hard in [4].
3Technically speaking, any proof in the random oracle model
has at most heuristic quality. However, modeling the conver-
sion functions of DSA and particularly ECDSA as a random
oracle goes far beyond the standard complications.
constraint (1) changed to r = (H(m, t) + xt)/s, i.e., hash
function H is applied to both the message and the ephemeral
value f (gr) (this idea ﬁrst appeared in [21]). Importantly,
their results do not apply to unmodiﬁed DSA signatures (nor
to ECDSA which the authors do not explicitly mention).
In a similar line of work, Malone-Lee and Smart [14] pro-
posed the variants ECDSA-II and ECDSA-III of the ECDSA
scheme. Here, with the motivation of strengthening ECDSA
against certain anomalies like duplicate signatures (one sig-
nature is valid for two messages [24]) and improving the
tightness of security reductions, the authors deliberately de-
viated from the original ECDSA speciﬁcation. Concluding,
all positive results from [21, 2, 14] apply only to modiﬁed
versions of DSA/ECDSA and thus say little about the sig-
natures as deployed in reality.
Basically all known positive results on unmodiﬁed ECDSA
In [5, 3] he models the discrete loga-
are due to Brown.
rithm setting of ECDSA with a generic group [22]. While
it appears at ﬁrst that only standard model properties are
required of functions H and f , as we explain below it seems
that Brown’s generic modeling approach for the group im-
plicitly also idealizes the conversion function f . Unfortu-
nately, crucial formal aspects of his idealization remain un-
clear, and thus also the impact of the results on the practical
security of ECDSA (and DSA).
The fact that Brown builds on idealized properties of
both G (explicitly) and f (implicitly) indeed causes alarming
side-eﬀects of practical relevance to emerge. The following
issue was noticed by Stern et al. [24]. Studying Brown’s
proof step-by-step reveals that he actually establishes that
ECDSA signatures are strongly unforgeable (i.e., the adver-
sary cannot forge a fresh signature on a message for which
it already knows a signature), in contrast to the fact that
it is actually trivial to attack ECDSA in this way.4 Brown
comments on this contradiction in [5, p. 9], saying “that
the [generic group] paradigm cannot be stretched to ridicu-
lous lengths” and that any eﬀort to adapt his version of the
generic group model to reﬂect the malleability of signatures
would likely “not exclude other properties [ . . . ] being con-
trived that ECDSA does not actually possess but would if
modeled by a generic group”. Besides the fact that aspects
of strong unforgeability actually do play a crucial role in
real-life applications like Bitcoin5 and one should thus be
careful with considering them contrived, Brown does not in-
dicate why his results on (plain) unforgeability do not follow
from “over-stretching” the generic group model. Thus, the
overall question remains open: From a security proof that
assumes generic groups behavior, how much can actually
be concluded about the real-world security of the scheme?
Arguably, a satisfactory argument for the unforgeability of
ECDSA was not given in [3]. Further, interestingly, Brown’s
results apply to ECDSA only and apparently cannot be
lifted to DSA as the conversion function of the latter seems
not to be ‘almost-invertible’ (as conjectured in [6]). Inde-
pendently of the ﬁndings discussed above, in [6, 4, 3] Brown
identiﬁes joint conditions on H, f ; some of them are suﬃ-
cient for the security of ECDSA (but considerably stronger
than DLP), others necessary.
4If (s, t) is a signature on m, then so is (−s, t). This property
ultimately has to do with the conversion function ignoring
the y-component of its input.
5See https://en.bitcoin.it/wiki/Transaction Malleability
1652Further results on the security of DSA and ECDSA are
by Vaudenay [25, 26], Howgrave-Graham and Smart [9],
Nguyen and Shparlinski [18], and Leadbitter et al. [13]. Some
of these papers either identify or survey conditions that are
necessary for the schemes’ security, others focus on the ro-
bustness of DSA/ECDSA against ﬂaws in implementations
and parameter selection.
Proofs in the Generic Group Model.
One can generally question the value of proofs in the
generic group model for assessing the security of systems
in reality. Reasons include that the model is non-falsiﬁable,
and that certain problems exist that are provably hard in
the generic group model yet easy to solve in real-life groups
[7]. An independent issue stems from the fact that, while
Shoup’s generic group model was originally proposed [22] as
a tool to study the hardness of purely algebraic problems
such as the discrete logarithm problem, the conversion func-
tion of ECDSA is a non-algebraic component in the sense
that it maps group elements to bit-strings without following
the operations induced by the group laws. For any corre-
sponding proof framework that replaces group operations
by generic versions, it needs to be deﬁned what it means to
apply a standard model function to a (generic) group ele-
ment. While in generic group models that represent group
elements with handles (e.g., the one by Maurer [16]) such
an operation has to be speciﬁed explicitly via oracles, for
models that use encodings (e.g., [23, 5, 17, 12]), even if
applying functions to corresponding random values might
be syntactically well-deﬁned, a closer inspection shows that
a corresponding proof implicitly would treat non-algebraic
components as ideal objects. Concretely, our understanding
is that Brown’s analyses of ECDSA implicitly model the con-
version function f as some idealized random object, and that
it thus remains unclear which conclusions on the practical
security of ECDSA can be drawn from his results. While a
reassessment of ECDSA’s security in a generic group model
with handles might potentially conﬁrm positive results, we
are not aware of any such work.6 The general issues with
generic group proofs involving non-algebraic functions are
further discussed in Appendix A.
1.1 Our Results
Modeling the conversion function.
We propose GenDSA, an abstract signature framework
that subsumes both DSA and ECDSA in unmodiﬁed form.
The scheme is deﬁned relative to a group G of prime or-
der q, a hash function H, and a conversion function f , and
uses a signing procedure compatible with (1). As our main
technical contribution, by suitably modeling function f we
prove that forging corresponding signatures is as hard as