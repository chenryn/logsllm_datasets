the homomorphic sum of the shares. The dealer then again
generates the challenge and sends it to each party. In the
ﬁnal round the parties send their witness to the dealer
who completes Protocol 2. A similar protocol can be used
for arithmetic circuits if the circuit is decomposable into
separate independent circuits. Constructing an efﬁcient MPC
protocol for more complicated circuits remains an open
problem.
pkq
, R
5. Zero-Knowledge Proof for Arithmetic Cir-
cuits
Bootle et al. [7] present an efﬁcient zero-knowledge ar-
pnq` 13
gument for arbitrary arithmetic circuits using 6 log2
elements, where n is the multiplicative complexity of the
circuit. We can use our improved inner product argument
pnq ` 13 elements, while si-
to get a proof of size 2 log2
multaneously generalizing to include committed values as
inputs to the arithmetic circuit. Including committed input
wires is important for many applications (notably range
proofs) as otherwise the circuit would need to implement a
commitment algorithm. Concretely a statement about Ped-
ersen commitments would need to implement the group
exponentiation for the group that the commitment is an
element of.
324
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
Following [7], we present a proof for a Hadamard-
product relation. A multiplication gate of fan-in 2 has three
wires; ‘left’ and ‘right’ for the input wires, and ‘output’
for the output wire. In the relation, aL is the vector of
left inputs for each multiplication gate. Similarly, aR is the
vector of right inputs, and aO “ aL ˝ aR is the vector of
outputs. [7] shows how to convert an arbitrary arithmetic
circuit with n multiplication gates into a relation containing
a Hadamard-product as above, with an additional Q ď 2¨ n
linear constraints of the form
xwL,q, aLy ` xwR,q, aRy ` xwO,q, aOy “ cq
for 1 ď q ď Q, with wL,q, wR,q, wO,q P Zn
p and cq P Zp.
We include additional commitments Vi as part of our
statement, and give a protocol for a more general rela-
tion, where the linear consistency constraints include the
openings vj of the commitments Vj. For simplicity and
efﬁciency we present the scheme with Vi being Pedersen
commitments. The scheme can be trivially adapted to work
with other additively homomorphic schemes by changing
the commitments to tpXq and adapting the veriﬁcation in
line (83).
5.1. Inner-Product Proof for Arithmetic Circuits
As with the range proof we ﬁrst present a linear proof
system where the prover sends two vectors that have to
satisfy some inner product relation. In Section 5.2 we show
that the inner product relation can be replaced with an
efﬁcient inner product argument which yields short proofs
for arbitrary circuits where input wires can come from
Pedersen commitments. Formally we present a proof system
for the following relation.
,
n
n
p
Q
m
m
Qˆn
p
p , v, γ P Z
, V P G
p ; aL, aR, aO P Z
Qˆm
γj @j P r1, ms ^ aL ˝ aR “ aO
p
tpg, h P G, g, h P G
, WL, WR, WO P Z
WV P Z
, c P Z
p q :
Vj “ g
vj h
^WL ¨ aL ` WR ¨ aR ` WO ¨ aO “ WV ¨ v ` cu
Let WV P ZQˆm
(66)
be the weights for a commitment Vj.
The presented proof system only works for relations where
WV is of rank m, i.e. the columns of the matrix are all
linearly independent. This restriction is minor as we can
construct commitments that fulﬁll these linearly dependent
constraints as a homomorphic combination of other commit-
ments. Consider a vector w
p for a vector
1 “
of scalars a P ZQ
va¨WV . Note that if the relation holds then we can conclude
that xwL,j, aLy`xwR,j, aRy`xwO,j, aOy “ xw
V , vy` c.
1
The protocol is presented in Protocol 3. It is split into two
parts. In the ﬁrst part P commits to lpXq, rpXq, tpXq in
the second part P convinces V that the polynomials are
well formed and that xlpXq, rpXqy “ tpXq.
Theorem 3. The proof system presented in Protocol 3 has
perfect completeness, perfect honest veriﬁer zero-knowledge
and computational special soundness.
p then we can construct commitment V
V “ a ¨ WV P Zm
1
aR P G
α, β, ρ
AI “ h
AO “ h
sL, sR
α
g
β
$ÐÝ Zp
aL h
aO P G
g
$ÐÝ Z
sL h
g
n
p
n
Q
Qˆm
p
WV P Z
, WL, WR, WO P Z
p ; aL, aR, aO P Z
Input: pg, h P G, g, h P G
, c P Z
P’s input: pg, h, g, h, WL, WR, WO, WV , c; aL, aR, aO, γq
V’s input: pg, h, g, h, WL, WR, WO, WV , cq
Output: {V accepts,V rejects }
P computes:
Qˆn
p
p q
p , γ P Z
,
m
n
2
2
ρ
z
n
p
Q
p
, . . . , z
, . . . , y
sR P G
´n ˝ pz
S “ h
P Ñ V : AI , AO, S
$ÐÝ Z
‹
V : y, z
p
V Ñ P : y, z
P and V compute:
n “ p1, y, y
n´1q P Z
y
r1:s “ pz, z
Qq P Z
Q`1
kpy, zq “ xy
Q`1
r1:s
P computes:
lpXq “ aL ¨ X ` aO ¨ X
` sL ¨ X
3 P Z
n ˝ aR ¨ X ´ y
n ` z
rpXq “ y
n ˝ sR ¨ X
prXs
` y
tpXq “ xlpXq, rpXqy “ 6ÿ
i“1
w “ WL ¨ aL ` WR ¨ aR ` WO ¨ aO
r1:s , wy ` kpy, zq P Zp
ny ´ xaO, y
t2 “ xaL, aR ˝ y
ny ` xz
Q`1
$ÐÝ Zp @i P r1, 3, 4, 5, 6s
¨ WRq, z
2 ` y
¨ pWL ¨ X ` WOq
Q`1
r1:s
´n ˝ pz
¨ WRq ¨ X
i P ZprXs
¨ WLy
ti ¨ X
prXs
3 P Z
Q`1
r1:s
Q`1
r1:s
τi
n
n
Ti “ g
P Ñ V : T1, T3, T4, T5, T6
τi @i P r1, 3, 4, 5, 6s
ti h
Protocol 3: Part 1: Computing commitments to lpXq, rpXq
and tpXq
5.2. Logarithmic-Sized Protocol
1
, g, P¨h
As for the range proof, we can reduce the communica-
tion cost of the protocol by using the inner product argu-
ment. Concretely transfer (75) is altered to simply τx, μ, t
and additionally P and V engage in an inner product argu-
ment on public input pg, h
´μ, tq. Note that the state-
ment proven is equivalent to the veriﬁcation equations (85)
and (81). The inner product argument has only logarithmic
communication complexity and is thus highly efﬁcient. Note
that instead of transmitting l, r the inner product argument
p2 ¨ nqs elements
only requires communication of 2 ¨ rlog2
instead of 2 ¨ n. In total the prover sends 2 ¨ rlog2
pnqs ` 9
group elements and 6 elements in Zp. Using the Fiat-Shamir
325
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
n
p
n
p
$ÐÝ Z
‹
V : x
p
V Ñ P : x
P computes:
l “ lpxq P Z
r “ rpxq P Z
t “ xl, ry P Zp
τx “ 6ÿ
τi ¨ x
μ “ α ¨ x ` β ¨ x
P Ñ V : τx, μ, t, l, r
V computes and checks:
i“1,i‰2
i
t
h
r1:s ¨WRq
@i P r1, ns
y´i`1
1zQ`1
r1:s ¨WL
y´n˝pzQ`1
1zQ`1
r1:s ¨WO
i “ h
1
WL “ h
WR “ g
WO “ h
?“ xl, ry
τx ?“ g
1 ¨ 6ź
¨ T
pxiq
i
i“3
I ¨ A
P “ A
O ¨ h
px2q
x
?“ h
μ ¨ g
l ¨ h
1r
if all checks succeed: V accepts
else: V rejects
x2¨pkpy,zq`xzQ`1
1´yn ¨ W
P
T
h
g
x
t
r1:s , WV ¨ γy P Zp
Q`1
i ` x
2 ` ρ ¨ x
2 ¨ xz
3 P Zp
r1:s ,cyq ¨ V
x2¨pzQ`1
r1:s ¨WV q
L ¨ W
x
R ¨ WO ¨ S
x
px3q
(67)
(68)
(69)
(70)
(71)
(72)
(73)
(74)
(75)
(76)
(77)
(78)
(79)
(80)
(81)
(82)
(83)
(84)
(85)
(86)
(87)
TABLE 1: Range proof size for m proofs. m “ 1 is the
special case of a single range proof
m range proofs for range r0, 2n ´ 1s
# G elements
log2pnq ` log2pmq˘ ` 4
`
mn
0.63 ¨ mn
2
# Zp elements
3mn ` 1
1.26 ¨ mn ` 1
5
Σ Protocol [64]
Poelstra et al. [3]
Bulletproofs
by an additive logarithmic factor when conducting m range
proofs, while all other solutions grow multiplicatively in m.
6.2. Veriﬁcation Optimizations
Exponentiation and Batch Veriﬁcation
using Multi-
In many of the applications discussed in Section 1.2 the
veriﬁer’s runtime is of particular interest. For example, with
conﬁdential transactions every full node needs to check all
conﬁdential transactions and all associated range proofs. We
therefore now present a number of optimizations for the non-
interactive veriﬁer. We present the optimizations for a single
range proof but they all carry over to aggregate range proofs
and the arithmetic circuit protocol.
Single multi-exponentiation. We can reduce the veriﬁer’s
cryptographic operations to a single multi-exponentiation
of size 2n ` 2 log2
pnq ` 7. Notice that the Bulletproofs