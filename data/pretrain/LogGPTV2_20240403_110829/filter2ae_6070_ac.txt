      }
      response, err := Recv(conn, timeout)
      if err != nil {
        return nil, err
      }
      fmt.Println("NTLMSSP 返回包")
      fmt.Println(hex.Dump(response))
      type NTLMChallenge struct {
        Signature              [8]byte
        MessageType            uint32
        TargetNameLen          uint16
        TargetNameMaxLen       uint16
        TargetNameBufferOffset uint32
        NegotiateFlags         uint32
        ServerChallenge        uint64
        Reserved               uint64
        TargetInfoLen          uint16
        TargetInfoMaxLen       uint16
        TargetInfoBufferOffset uint32
        Version                [8]byte
        // Payload (variable)
      }
      var challengeLen = 56
      challengeStartOffset := bytes.Index(response, []byte{'N', 'T', 'L', 'M', 'S', 'S', 'P', 0})
      if challengeStartOffset == -1 {
        return info, nil
      }
      if len(response)  0 {
        startIdx := int(responseData.TargetNameBufferOffset)
        endIdx := startIdx + targetNameLen
        targetName := strings.ReplaceAll(string(response[startIdx:endIdx]), "\x00", "")
        info["TargetName"] = targetName
      }
      // Parse: TargetInfo
      AvIDMap := map[uint16]string{
        1: "NetBIOSComputerName",
        2: "NetBIOSDomainName",
        3: "FQDN", // DNS Computer Name
        4: "DNSDomainName",
        5: "DNSTreeName",
        7: "Timestamp",
        9: "MsvAvTargetName",
      }
      type AVPair struct {
        AvID  uint16
        AvLen uint16
        // Value (variable)
      }
      var avPairLen = 4
      targetInfoLen := int(responseData.TargetInfoLen)
      if targetInfoLen > 0 {
        startIdx := int(responseData.TargetInfoBufferOffset)
        if startIdx+targetInfoLen > len(response) {
          return info, fmt.Errorf("Invalid TargetInfoLen value")
        }
        var avPair AVPair
        avPairBuf := bytes.NewBuffer(response[startIdx : startIdx+avPairLen])
        err = binary.Read(avPairBuf, binary.LittleEndian, &avPair)
        if err != nil {
          return info, err
        }
        currIdx := startIdx
        for avPair.AvID != 0 {
          if field, exists := AvIDMap[avPair.AvID]; exists {
            var value string
            r := response[currIdx+avPairLen : currIdx+avPairLen+int(avPair.AvLen)]
            if avPair.AvID == 7 {
              unixStamp := binary.LittleEndian.Uint64(r)/10000000 - 11644473600
              tm := time.Unix(int64(unixStamp), 0)
              value = tm.Format("2006-01-02 15:04:05")
            } else {
              value = strings.ReplaceAll(string(r), "\x00", "")
            }
            info[field] = value
          }
          currIdx += avPairLen + int(avPair.AvLen)
          if currIdx+avPairLen > startIdx+targetInfoLen {
            return info, fmt.Errorf("Invalid AV_PAIR list")
          }
          avPairBuf = bytes.NewBuffer(response[currIdx : currIdx+avPairLen])
          err = binary.Read(avPairBuf, binary.LittleEndian, &avPair)
          if err != nil {
            return info, err
          }
        }
      }
      return info, nil
    }
## RDP登录截图
不是所有协议都支持RDP截图
要实现RDP登录交互，这个涉及更后面的交互了，所以找了个go rdp的库 
（这个库有点小bug，而且只能编译windows版本，不过我已经一通魔改，修了一些bug，并且支持全平台编译）
它里面提供了一个接口，可以获得位图数据
    g.pdu.On("update", func(rectangles []pdu.BitmapData) {}
bitmap的数据结构可以看文档：[https://learn.microsoft.com/en-us/openspecs/windows\\_protocols/ms-rdpbcgr/f4ed1422-2eed-4474-bafb-42ab35ad3707](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/f4ed1422-2eed-4474-bafb-42ab35ad3707
"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/f4ed1422-2eed-4474-bafb-42ab35ad3707")
**获得截图要做的事情也很多很杂**
  * 获得的位图只是一小块图片，后需要将这些图片拼接起来
  * 位图有的是压缩的，需要解压
  * 涉及到将位图数据转换为图片等等
伪代码如下
    ScreenImage := image.NewRGBA(image.Rect(0, 0, 1024, 768))
    host := g.Host
    g.pdu.On("update", func(rectangles []pdu.BitmapData) {
      glog.Info("on update bitmap:", len(rectangles))
      bs := make([]Bitmap, 0)
      for _, v := range rectangles {
        IsCompress := v.IsCompress()
        data := v.BitmapDataStream
        if IsCompress {
          data = BitmapDecompress(&v)
          IsCompress = false
        }
        b := Bitmap{int(v.DestLeft), int(v.DestTop), int(v.DestRight), int(v.DestBottom),
          int(v.Width), int(v.Height), Bpp(v.BitsPerPixel), IsCompress, data}
        bs = append(bs, b)
      }
      var (
        pixel      int
        i          int
        r, g, b, a uint8
      )
      for _, bm := range bs {
        i = 0
        pixel = bm.BitsPerPixel
        m := image.NewRGBA(image.Rect(0, 0, bm.Width, bm.Height))
        for y := 0; y 
  * 
  * 
  * [https://mp.weixin.qq.com/s?\\_\\_biz=MjM5NDQ5NjM5NQ==\&mid=2651626127\&idx=1\&sn=0bdcd4969306c5f79707fa946da76b83](https://mp.weixin.qq.com/s?__biz=MjM5NDQ5NjM5NQ==\\&mid=2651626127\\&idx=1\\&sn=0bdcd4969306c5f79707fa946da76b83 "https://mp.weixin.qq.com/s?__biz=MjM5NDQ5NjM5NQ==\\&mid=2651626127\\&idx=1\\&sn=0bdcd4969306c5f79707fa946da76b83")
    * 网络空间测绘技术之：协议识别（RDP篇）