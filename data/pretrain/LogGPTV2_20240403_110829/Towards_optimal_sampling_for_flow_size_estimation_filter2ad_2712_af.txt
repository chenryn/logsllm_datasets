We then have a relationship between the ﬂow table size and link
−1
capacity to the diagonal elements of J
DS. Since it is apparent from
(18) that the diagonals are dominated by 1/pf , by substituting the
optimal solution, the diagonals are inversely proportional to Tmax.
For large link capacities, ˆqp ≈ 1 and thus diagonal would be dom-
P . From this, we are able to conclude
inated by the term 1
ˆpp
that the CRLB of DS is inversely proportional to memory usage
and the link capacity.
= τ C
As an example, consider an OC-192 link with DλF = 1 × 106
ﬂows/sec, Tmax = 100, 000 and an access time of 100 ns for
DRAM. Let us assume a further 100 ns is required for further
processes (e.g. sequence number information). Thus, pf = 0.1
and pp = 0.08. With our numerical evaluation on the Leipzig-II
trace (discussed in the following section), this would give at most
9.5× 108 original ﬂows in the trace to achieve a standard deviation
of at most 10−8. If we compare this to PS with a sampling rate of
pp = 0.1, we require a staggering 5.6 × 1044 ﬂows to achieve the
same performance!
To observe the dependence on memory and link capacity, now
consider an OC-768 link instead with Tmax = 10, 000. This time,
we have pf = 0.01 and pp = 0.02. The number of ﬂows required
to achieve the same standard deviation now increases to 8.8 × 109
ﬂows. Still, this is orders of magnitude better than PS. Potentially,
DS could be modiﬁed to perform rate adaptations to trafﬁc condi-
tions, but we do not pursue this issue further here.
The issue of checking for the SYN bit can be done in a simple
way by checking the payload type in the IP header and then verify-
ing the presence of the SYN bit. This takes much less effort than
deep packet inspection systems. Furthermore, sampling decisions
can be implemented using precalculated values, much faster than a
straight random number generator implementation.
We address the problem of ﬂow table overload by using the method
proposed by Estan et al. [16] by deﬁning discrete measurement time
bins, where sampled ﬂows are exported at the end of each time bin.
Consequently, overload of the ﬂow table can be avoided at the cost
of increased export rate.
5. CASE STUDY ON INTERNET DATA
In this section, we will evaluate DS on a single trafﬁc trace. Since
we have shown that DS performs better than other methods with the
exception of FS, we only need to focus on DS.
The optimal performance is expected to be that of FS, thus any
increase in pp would lead to lower estimation variance. In practice,
pp would be constrained by computational costs. Therefore, pp is
set to be the highest rate achievable under those constraints.
In
this study, we are mainly focussing on the information theoretic
performance of DS. Hence, we vary pf and pp according to the
ESR normalization to corroborate our previous discussions.
The trace we used comes from the Leipzig-II trace [17]. A sum-
mary of the statistics of this trace is in Table 1. This trace is unidi-
rectional, which presents problems when constructing a sequence
number function, as elaborated later. In this trace, the average ﬂow
size D = 2 packets. Due to the relatively small number of ﬂows in
the trace, we resort to higher sampling rates.
There are many ﬂows that do not begin with a SYN packet due to
edge effects, which we eliminate by processing the trace. A similar
situation was encountered in [1]. Furthermore, when sampling the
trace, we assume an inﬁnite timeout, that is, ﬂows are expired at
the end of the measurement interval. This is in accordance to our
assumptions as we do not consider ﬂow splitting here. In practice,
timeouts would cause a ﬂow to be split and in the case of DS, cause
an underestimation of the actual size of a ﬂow. We plan to look into
this issue in the future.
Note that some ﬂows may have more than one SYN packet within
the ﬂow; these packets do not start the ﬂow. Potentially, DS may
sample one of these packets and treat it as a new ﬂow, instead of
part of a longer ﬂow. However, the occurrence of these ﬂows are
relatively rare. In the trace we use, there are only 468 of such ﬂows,
constituting to ≈ 0.02% of the ﬂow population.
The ﬂow size distribution was estimated using an EM algorithm,
as outlined in [6], except here we know the number of ﬂows, Nf .
Hence, rather than treating Nf as a nuisance variable that has to
be estimated, this information is provided to the estimator.
It is
important as it can be used to infer the number of ﬂows that have
evaporated. Knowledge of Nf would yield lower variance, since
there is no need to estimate Nf in the ﬁrst place.
Trace
Leipzig-II
Average
Rate
50 Mbps
Active TCP
Flows
2,277,052
Duration
(hh:mm:ss)
02:46:01
Table 1: Summary of the trace used
Figure 6: Comparison of DS on real data, using W = 1000 and
varying parameters under ESR normalization with p = 0.01.
Testing with a Perfect Sequence Number Function
We begin our case study by testing DS with a perfect sequence
In Figure 6, p = 0.01 and the values chosen
number function.
for DS are such that pp slides along the curve towards FS. It is
clear from the ﬁgure that as pp → 1 the performance vastly im-
proves. Note that DS with pf = pp = 0.019 is equivalent to
PS+SYN+SEQ. It is also clear that for values of pp < 0.019, esti-
mation quality suffers, leading to highly inaccurate estimates. Sim-
ilar results were observed in Figure 7, where p = 0.001. While DS
with a high pp is able to recover the front end of the distribution
fairly well, estimation of the tails suffer in this case, as a lower pf
entails a lower detection of longer but less frequently observable
ﬂows. The same effect can be observed with FS, where the front
end of the distribution is recovered at the cost of the tail end of the
distribution. However, in this respect, DS enjoys a better ﬂexibil-
ity than other methods as it allows pf to be varied. Increasing pf
would increase the number of ﬂows detected and thus allow better
estimation of the tails at the cost of the front end of the distribution
and overall reduction in estimation accuracy.
Testing with an Imperfect Sequence Number Function
We now test DS with an imperfect sequence number function.
Our sequence number function uses most of the techniques outlined
in [4]. However, as we do not have available statistics of popular
TCP payload sizes, we infer the most likely payload size as follows.
If the sequence number difference is divisible by a popular payload
Figure 7: Comparison of DS on real data, using W = 1000 and
varying parameters under ESR normalization with p = 0.001.
Figure 8: Comparison of DS on real data, using W = 1000 and
varying parameters under ESR normalization with p = 0.01.
An imperfect sequence number function is used here.
size (for example, 1460 bytes), we assume this as the most likely
payload size. Otherwise, we use the average payload size. As a
result, the function is subject to errors, especially when a ﬂow has
variable payloads; however, for our purposes, this imperfect func-
tion will sufﬁce. In addition to TCP sequence numbers, we exploit
IPID numbers. As mentioned in [4], the IPID ﬁeld of Linux ma-
chines are incremented sequentially for each TCP ﬂow every time
a packet in the ﬂow is transmitted. Given that the majority of web-
servers on the Internet are Linux-based, we exploit IPID numbers
to check the accuracy of our estimate when a ﬂow has packets with
variable payloads.
Furthermore, the unidirectional nature of the trace presents a sig-
niﬁcant challenge. As one side in a TCP connection usually trans-
mits more data than the other, some sampled ﬂows may be TCP
ACK ﬂows, where most packets in the ﬂow consist of packets with
zero-byte TCP payloads. Thus, looking at the sequence numbers
do not provide information about the number of bytes transmit-
ted as the numbers may not be incremented. A solution is to use
the TCP acknowledgement numbers instead to infer the number of
bytes transmitted from the opposite direction, which would yield
an estimate of the number of packets in the TCP ACK ﬂow.
With an imperfect sequence number function, one can still see
that estimation of the front end of the distribution gets better as
pp → 1. Figure 8 illustrates this, with p = 0.01 here. With more
number of ﬂows collected, as seen in Figure 9, normalized on p =
0.05, the performance of DS improves.
Figure 10: Beneﬁts of using sequence numbers. Three cases
are show: PERFECT uses a perfect sequence number function,
MAPPING uses an imperfect function and SEQ OFF uses no
sequence number information.
numbers to packet counts introduces a new source of error, and
was not highly optimized.
In future work, we intend to improve the sequence number map-
ping function, and also to explore using our approach for the direct
estimation of the byte size of ﬂows, for which sequence numbers
are more naturally suited, rather than the packet size. Finally, we
will test our approach extensively on much larger data sets, and de-
velop a more detailed case for its implementability in high speed
routers.
7. APPENDIX
REMARK 7.1. Somewhat surprisingly, when evaluated under
the conditional framework, it was pointed out in [4] that PS+SYN+SEQ
outperforms PS+SEQ on actual traces. Some of our numerical ex-
periments on the CRLB of these methods (under the conditional
framework) also show similar results, leading us to conjecture the
same counterintuitive results may hold for the conditional frame-
work.
7.1 Our Matrix Lemmas
LEMMA 7.2. The matrix ˜J((cid:126)θ) and its inverse ˜J((cid:126)θ)−1 are sym-
metric and positive deﬁnite.
PROOF. For simplicity we omit the (cid:126)θ dependencies. Recall that
˜J = ˜BT ˜D ˜B where ˜D is a real diagonal positive deﬁnite matrix
and rank( ˜D) = W . Matrix ˜B is a W × W
with ( ˜D)jj = d
matrix and rank( ˜B) = W . It follows that an inverse exists for
both ˜D and ˜B. Hence, an inverse also exists for ˜J since ˜J−1 =
˜B−1 ˜D−1( ˜BT)−1.
−1
j
An equivalent expression for ˜J is
˜J = ˜BT ˜D1/2 ˜D1/2 ˜B = ( ˜D1/2 ˜B)T( ˜D1/2 ˜B)
(24)
since ˜D1/2 is symmetric.
We can now show that ˜J is symmetric. We have
˜JT = [( ˜D1/2 ˜B)T( ˜D1/2 ˜B)]T
= ( ˜D1/2 ˜B)T( ˜D1/2 ˜B)˜J.
Figure 9: Comparison of DS on real data, using W = 1000 and
varying parameters under ESR normalization with p = 0.05.
An imperfect sequence number function is used here.
Finally, Figure 10 illustrates the impact of using sequence num-
bers in recovering the ﬂow size distribution. The three cases shown
are for DS with parameters pf = 0.081 and pp = 0.2, when ESR
normalized for p = 0.05. The case PERFECT is when DS is given
a perfect sequence number function, MAPPING when using our se-
quence number function and SEQ OFF when no sequence numbers
were used. From the ﬁgure, it is apparent that using sequence num-
bers, even with an imperfect function provides signiﬁcantly more
information to an estimator.
6. CONCLUSIONS AND FUTURE WORK
We have re-examined the question of sampling for ﬂow size esti-
mation in the context of TCP ﬂows from a theoretical point of view.
We used the Fisher information to examine the inherent potential of
a number of sampling methods. Most of these had been examined
previously, but we showed how the usual conditional framework
can be made unconditional and thereby simpliﬁed, which actually
changes the sampling methods themselves and their performance.
The new framework led to a number of new rigorous results re-
garding the performance of sampling methods which we studied
under two different normalizations. It also enabled ﬂow sampling
to be compared to methods using TCP sequence numbers for the
ﬁrst time, and we showed that it far superior to them. We then in-
troduced a new two parameter family of methods, Dual Sampling,
which allows the statistical beneﬁts of ﬂow sampling to be traded
off against the computational advantages of packet sampling. We
argue that the scheme is implementable and offers an efﬁcient way
of approaching ﬂow sampling in practice to the extent possible. We
performed a case study of Dual Sampling using an Internet data
trace and found results entirely consistent with the theoretical pre-
dictions, despite the fact that the function which maps sequence
8. REFERENCES
[1] N. Dufﬁeld, C. Lund, and M. Thorup, “Estimating Flow Distributions
from Sampled Flow Statistics,” IEEE/ACM Trans. Networking,
vol. 13, no. 5, pp. 933–946, Oct 2005.
[2] N. Hohn and D. Veitch, “Inverting Sampled Trafﬁc,” in Proc. 2003
ACM SIGCOMM Internet Measurement Conference, Miami, October
2003, pp. 222–233, winner best student paper award. [Online].
Available: http://www.cubinlab.ee.unimelb.edu.au/~darryl/
Publications/thinning_camera.pdf
[3] ——, “Inverting Sampled Trafﬁc,” IEEE/ACM Transactions on
Networking, vol. 14, no. 1, pp. 68–80, 2006. [Online]. Available:
http://www.cubinlab.ee.unimelb.edu.au/~darryl/Publications/ToN_
sampling_revised.pdf
[4] B. Ribeiro, D. Towsley, T. Ye, and J. Bolot, “Fisher information on
sampled packets: an application to ﬂow size estimation,” in
Proc. ACM/SIGCOMM Internet Measurement Conf., Rio de Janeiro,
Oct 2006, pp. 15–26.
[5] G. Varghese, Network Algorithmics. San Francicso:
Elsevier/Morgan Kaufmann, 2005.
[6] L. Yang and G. Michailidis, “Estimation of ﬂow lengths from
sampled trafﬁc,” in Proc. GLOBECOM, San Francisco, CA, Nov
2006.
[7] T. M. Cover and J. A. Thomas, Elements of Information Theory,
2nd ed.
John Wiley and Sons, Inc., 2006.
[8] A. Hero, J. Fessler, and M. Usman, “Exploring estimator
bias-variance tradeoffs using the Uniform CR bound,” IEEE Trans.
Sig. Proc., vol. 44, no. 8, pp. 2026–2041, Aug 1996.
[9] P. Tune and D. Veitch, “Fisher information in ﬂow size distribution
estimation: Technical report,” Dept. E&EE, The University of
Melbourne, Tech. Rep., 2008, available:
http://www.ee.unimelb.edu.au/people/lsptune/index.html/.
[10] J. D. Gorman and A. O. Hero, “Lower bounds for parametric
estimation with constraints,” IEEE Trans. Info. Th., vol. 26, no. 6, pp.
1285–1301, Nov 1990.
[11] D. Harville, Matrix Algebra from a Statistician’s Perspective.
Springer-Verlag, 1997.
[12] J. E. Strum, “Binomial matrices,” The Two Year College Mathematics
Journal, vol. 8, no. 5, pp. 260–266, November 1977.
[13] R. Zamir, “A proof of the Fisher information inequality via a data
processing argument,” IEEE Trans. Info. Th., vol. 44, no. 3, pp.
1246–1250, May 1998.
[14] E. L. Lehmann and G. Casella, Theory of Point Estimation, 2nd ed.,
ser. Springer Texts in Statistics. Springer, 1998.
[15] R. T. Rockafellar, Convex Analysis, ser. Princeton Landmarks in
Mathematics and Physics. Princeton University Press, 1970.
[16] C. Estan, K. Keyes, D. Moore, and G. Varghese, “Building a better
netﬂow,” in Proc. ACM Sigcomm 2004, Portland, OR, Aug 2004.
[17] NLANR, Leipzig-II Trace Data,
http://pma.nlanr.net/Special/leip2.html.
[18] F. Zhang, Matrix Theory: Basic Results and Techniques.
Springer-Verlag, 1999.
[19] K. S. Miller, “On the inverse of the sum of matrices,” Mathematics
Magazine, vol. 54, no. 2, March 1981.
The form ( ˜D1/2 ˜B)T( ˜D1/2 ˜B) at least positive semideﬁnite (The-
orem 7.5). However, since ˜J−1 = ˜B−1 ˜D−1( ˜BT)−1, ˜J is invert-
ible, therefore it is positive deﬁnite. By deﬁnition of symmetric,
positive deﬁnite matrices, its inverse is also symmetric, positive
deﬁnite.
LEMMA 7.3. The unconstrained Fisher information matrix J((cid:126)θ)
and its inverse J((cid:126)θ)−1 are symmetric and positive deﬁnite.
PROOF. Recall that J = BTDB where D is a real diagonal
−1
j−1 and rank(D) = W +
positive deﬁnite matrix with (D)jj = d
1. Matrix B is a (W + 1) × W matrix and rank(B) = W . An
equivalent expression for J is
J = BTD1/2D1/2B(D1/2B)T(D1/2B)
since D1/2 is symmetric. Now
JT = [(D1/2B)T(D1/2B)]T
= (D1/2B)T(D1/2B)J.
(cid:80)W
The form (D1/2B)T(D1/2B) is at least positive semideﬁnite (The-
orem 7.5). However, J is invertible by Proposition 2.2, implying it
is positive deﬁnite. By deﬁnition of symmetric, positive deﬁnite
matrices, its inverse is also symmetric and positive deﬁnite.
Proof of Theorem 2.3.
k=1 b2
PROOF. Let E = (1/d0)b0bT
0 from (8). It has rank 1 and is
therefore positive semideﬁnite since its eigenvalues are tr(E) =
0k/d0 with multiplicity 1 and 0 with multiplicity W − 1.
It follows from Theorem 7.6 that J((cid:126)θ) ≥ ˜J((cid:126)θ) since J((cid:126)θ) = E +
˜J((cid:126)θ), and from Theorem 7.4, this implies that ˜J−1((cid:126)θ)− J−1((cid:126)θ) ≥
0W×W and therefore J−1((cid:126)θ) ≤ ˜J−1((cid:126)θ).
7.2 Other Matrix Lemmas
The next result comes from [11].
LEMMA 7.4. Let A be a n × n symmetric positive deﬁnite ma-
trix and B an n × n positive deﬁnite matrix. Then
• If B − A is positive deﬁnite, then so is A−1 − B−1,
• If B− A is symmetric and positive semideﬁnite (implying B
is symmetric), then A−1 − B−1 is positive semideﬁnite.
The following theorem appears in [18, Theorem 6.3, p. 161].
LEMMA 7.5. The following statements are equivalent:
• A is positive semideﬁnite;
• A = B∗B for some matrix B.
For real matrices this becomes BTB.
The following result gives more properties of positive semideﬁnite
matrices [18, Theorem 6.5, p. 166].
LEMMA 7.6. Let A ≥ 0 and B ≥ 0 be of the same size. Then
• A + B ≥ B,
• A1/2BA1/2 ≥ 0,
• tr(AB) ≤ tr(A)tr(B),
• the eigenvalues of AB are all nonnegative.
This key result can be found in [19].
THEOREM 7.7. Let G and G + E be nonsingular matrices
where E is a matrix of rank one. Let g = tr(EG−1). Then
g (cid:54)= −1 and
G
−1 − 1
1 + g
−1EG
G
−1
is the inverse of G + E.