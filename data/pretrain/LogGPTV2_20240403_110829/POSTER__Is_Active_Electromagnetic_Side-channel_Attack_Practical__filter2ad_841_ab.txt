particular interest. The CPU performs a cycle of fetch-
ing instructions, decodes and executes them, while RAM
maintains the data and corresponding instructions when
a computing device is powered on. EM emission signals
from these components contain a signiﬁcant amount of
side-channel information regarding the events related to
software execution and data handling. On most IoT de-
vices, the CPU and RAM are included in microcontroller
(MCU) chips making it the most important EM source
on-board.
3.2. Sampling Electromagnetic Emissions
The EM emission frequencies of a target device is un-
predictable due to its dependability on various hardware
characteristics. Therefore, it is diﬃcult to have a universal
purpose device that can be used to observe EM emissions
from a target device and interpret side-channel informa-
tion. It has been shown that small magnetic loop anten-
nas can be used for the purpose of detecting EM emis-
sions from computing devices [30]. When EM signals are
captured by a loop antenna, it requires digital sampling
before the data can be used for analysis. Theoretically,
the sample rate of the equipment should be twice that of
the maximum EM frequency required to be captured – re-
ferred to as Nyquist frequency [31]. For this reason, EM
signal sampling equipment must have a very high sample
rate. The most commonly used equipment to capture EM
signals are oscilloscopes and spectrum analysers with high
When two diﬀerent LED blinking patterns are per-
formed by two diﬀerent programs separately, the Arduino
emitted two completely diﬀerent EM signal patterns. The
spectrogram shown in Figure 1 (a) illustrates the EM sig-
nal observed from a simple LED blinking program, while
the spectrogram in Figure 1 (c) illustrates the EM signal of
a more complex LED blinking program. The spectrogram
depicted in Figure 1 (b) shows the EM signal observed dur-
ing the re-programming stage of the Arduino device from
the ﬁrst program to the second.
3.3. Connection Between CPU Instructions and Electro-
magnetic Emissions
As a result of executing instructions in diﬀerent com-
binations by the CPU, EM signal patterns are emitted
at various frequencies and amplitudes. Depending on the
sequence of instructions, i.e., the exact program being ex-
ecuted, the output of EM noise from the CPU varies sig-
niﬁcantly. Due to this, systematically modelling and pre-
dicting possible EM signal characteristics of a computer
processor is a diﬃcult task. In order to identify uninten-
tional EM emissions of a computer processor, the most
practical method is scanning a large frequency spectrum
for suspected EM signals and subsequently trying to in-
terpret these identiﬁed signals for potential side-channel
information. This arduous approach is a time consuming
task that requires manual inspection by a human user.
In 2014, Callan et al.
introduced a metric called SA-
VAT (Signal AVailability for an ATtacker) that measures
the EM signal power emitted when a CPU is executing
a speciﬁc pair of instructions (A and B). The authors
show that diﬀerent selections of A/B instruction pairs
emit diﬀerent SAVAT values, i.e., signal power [38, 39].
An improvement to the SAVAT technique is a method
called Finding Amplitude-modulated Side-channel Emana-
tions (FASE). The key idea behind the FASE technique
relies on the phenomena that when a program activity is
alternating at a frequency (falt) that aﬀects any periodic
EM signal originating from any source at a frequency fc,
it is possible to observe two side-band signals at fc − falt
and fc + falt between the fc signal. Further improvements
to SAVAT technique enabled the possibility of identify-
ing both amplitude and frequency modulated EM emis-
sions from CPUs [40, 41, 42]. While it is evident from
existing studies that EM side-channel leakage is available
across various type of CPUs, further studies are necessary
to identify the eﬀect of diﬀerent CPU architectures to the
produced EM emissions.
4. Electromagnetic Emissions as a Signature
When a computing device running a program gener-
ates EM emissions, the patterns observable depend on the
precise settings of the device. In the EM emission spec-
trum of the Arduino device in Figure 1, it is clearly evident
that both the hardware and software settings have inﬂu-
enced the EM emission patterns. The signal captured at
Figure 1: Spectrograms of AM demodulated EM emissions acquired
from an Arduino device where (a) running a simple LED blink pro-
gram, (b) reprogramming the device, and (c) running a complex LED
blink program are depicted.
sample rates. The digitised data these devices capture
can be subsequently analysed in signal analysis software.
However, access to such devices for information security
professionals is not very common [32].
Software deﬁned radios (SDRs) are getting increasingly
popular among wireless hackers, hobbyists, and security
enthusiasts who are interested in access to the radio fre-
quency (RF) spectrum. An SDR consists of a minimal
hardware component, which can be tuned to a range of
RF frequencies and then digitise it with a fast analogue-
to-digital converter (ADC). The processing of digitised RF
data is handled entirely on software [33]. A wide vari-
ety of SDR hardware and software platforms are avail-
able [34, 35, 36, 37]. Due to the enhanced ﬂexibility pro-
vided by software, SDR platforms have become a perfect
candidate for EM side-channel attack analysis research. A
SDR can be used to scan through a wide range of frequen-
cies to locate potential EM emissions from a computer
system.
A simple set-up with an SDR platform can be used to
demonstrate the unintentional EM signals. An Arduino
Leonardo prototyping board is loaded with a simple pro-
gram to blink an LED connected to it via the general pur-
pose I/O pins. An antenna connected to an RTL-SDR
dongle is placed close to the Arduino board in order to
receive unintentional EM signals emitted from the board.
The Arduino board consists of a microcontroller chip that
operates at 16 MHz. However, the RTL-SDR dongle can-
not be tuned to frequencies below 22 MHz. Therefore, a
GNURadio script was programmed to tune the RTL-SDR
dongle to the ﬁrst harmonic of the Arduino clock, i.e.,
32 MHz. Figure 1 illustrates the spectrograms of three
diﬀerent EM signal samples gathered.
4
051015200500010000150002000025000Frequency(Hz)(a)−140−120−100−80−60−40−200Intensity[dB]051015200500010000150002000025000Frequency(Hz)(b)−140−120−100−80−60−40−200Intensity[dB]05101520Time(s)0500010000150002000025000Frequency(Hz)(c)−140−120−100−80−60−40−200Intensity[dB]the ﬁrst harmonic frequency of the Arduino device’s sys-
tem clock, i.e., 32 MHz, is showing a varying patterns in
the spectrogram view according to the changes made to
the device. Therefore, it is clear that the target device’s
system clock is the main source of EM radiation. The
design of the printed circuit board (PCB), and character-
istics of the electronic components provide variations to
this strong signal. Meanwhile, subﬁgures (a), (b), and (c)
of Figure 1 clearly show that the instruction sequence, i.e.,
the program being executed on the CPU, has a signiﬁcant
inﬂuence to the EM emission pattern.
4.1. Electromagnetic Emissions as a Hardware Signature
Despite the software components available on a com-
puting device, it is important to investigate whether the
hardware alone can provide a recognisable EM emission
pattern. Such a capability can lead to proﬁling of hard-
ware devices and components uniquely. It has been shown
that a simple EM signal acquisition device called RTL-
SDR, which demonstrated the capability to capture EM
emissions from an Arduino device, can be used to proﬁle
computing devices uniquely. Laput et al. used a similar
device to acquire EM signals that were successfully applied
to a support vector machine (SVM) classiﬁer to uniquely
distinguish the EM source device [43]. This possibility
has led to the idea that EM emissions from an electronic
device owned by a person can be used as an authentica-
tion token of the person instead of relying on conventional
methods, such as Radio Frequency Identiﬁcation (RFID)
tags [44, 45].
This uniquely distinguishable EM emission patterns of
a known electronic device can help to identify any poten-
tial alteration that may have applied to it. For example,
a known electronic device can be altered at the hardware
fabrication level for malicious purposes, such as accessing
stored data or eavesdropping on users’ activities. Such
hardware modiﬁcations result in a changed EM emission
pattern that can be used to identify it [46]. Similarly, a
genuine electronic device can be replaced by a counterfeit
electronic device for a malicious objective.
It has been
shown that even when counterfeit hardware attempts to
follow the design of the genuine device, it still creates dis-
tinguishably diﬀerent EM emission patterns compared to
their original product [47].
4.2. Electromagnetic Emissions as a Software Signature
When software runs on diﬀerent computing devices, it
is clear that the hardware EM emissions are inﬂuenced by
the software instructions being executed. It is important
to consider this inﬂuence from two diﬀerent aspects. The
ﬁrst aspect is how uniquely the EM emissions of diﬀerent
software running on the same hardware platform can be
recognised. This can be used to pin point to the exact
software running on a device. The second aspect is how
unique the same software program is when it is running
across various hardware platforms. It facilitates the unique
detection of a speciﬁc piece of software.
When software systems are being developed, require-
ments arise to debug their behaviour or ﬁnd ways to in-
crease their performance. Instrumenting software by ap-
plying logging events and break points are the most com-
mon ways to identify where complex software is not per-
forming as expected. These developmental options aﬀect
the performance of the software being inspected in addi-
tion to the overhead of their placement each time a copy
of the software needs to be inspected. It has been shown
that unintended EM emissions of the CPU can be used
to inspect software execution sequences without having to
instrument the software [48, 49, 50, 51]. Even when the
same program is running on diﬀerent devices, the ability
to identify the instruction execution sequence can help to
uniquely identify the software itself.
The capability to detect software code execution se-
quence has opened up the opportunity to identify when a
computing device is running software code not intended by
the manufacturer or the owner. One possible scenario can
be software bugs or hardware faults that cause an IoT de-
vice to execute unexpected instruction sequences. Another
possible scenario can occur when an IoT device is under
an attack causing it to run malware or an unintended part
of the device’s genuine software. Stone et al. [52, 53] and
Nazari et al. [54] showed that such abnormal deviations of
software code executions on computing devices can be de-
tected using the corresponding EM emission patterns from
its execution.
Even though it has been identiﬁed that EM emission
patterns are associated with both the hardware and soft-
ware characteristics of the source device, the format of a
captured EM signal used for this identiﬁcation can vary.
Instead of directly using time-domain EM signal traces,
one such alternative format is RF-DNA ﬁngerprinting. This
is a technique to ﬁngerprint the physical layer of RF trans-
mitting devices, which includes WiFi, Bluetooth, Zigbee,
GSM devices, and even RADAR antennas. This tech-
nique has been used to identify rogue devices in a deploy-
ment using their RF signals without physically inspecting
them [55, 56, 57, 58]. Deppensmith et al. showed that
RF-DNA technique can be applied to unintentional EM
emission ﬁngerprinting on computing devices reliably [59].
However, the evaluations performed by Stone et al. on
microcontroller based IoT devices indicates that further
studies are necessary to conclude the most reliable format
to represent unintentional EM signals [60].
Figure 2 illustrates the structure of an RF-DNA ﬁnger-
print. When calculating it, the EM signals emitted from
a device on a selected frequency is captured, ﬁltered, and
ampliﬁed appropriately to achieve a clean trace. From this
acquired time-domain EM trace, the three signal charac-
teristics; Amplitude, Phase and Frequency, are separately
considered for further processing. Each signal character-
istic is broken into N equally sized regions and then for
each region, four statistical metrics; standard deviation,
variance, skewness, and kurtosis is calculated. The stan-
dard deviation and variance metrics measure the spread
5
data from computers, including cryptographic keys. The
El Gamal and RSA algorithms implemented using GnuPG
library were attacked by observing critical CPU opera-
tions [62]. Furthermore, elliptic curve based cryptographic
algorithms (ECC), such as Elliptic Curve based Diﬃe Hell-
man (ECDH) and Elliptic Curve based Digital Signature
Algorithm (ECDSA), are identiﬁed to be vulnerable to
EM side-channel attacks with the SEMA approach [63,
64, 65]. Due to the low computational overhead in ECC
algorithms, many mobile devices and IoT platforms tend
to employ ECC algorithms to secure data. This indi-
cates that such devices can be inspected through EM side-
channels to access cryptographically protected data.
5.2. Diﬀerential Electromagnetic Analysis (DEMA)
If a large number of EM traces from a computing sys-
tem can be observed executing speciﬁc software, it is possi-
ble to identify the data bits involved in the operations that
appear across the large number of EM traces. While being
impractical to perform under real-world attack scenarios
due to the challenge of collecting such a large number of
EM traces from a target computer, this may be the only
resort for EM side-channel analysis when it is not possible
to extract information from visual observation of a single
EM trace.
DEMA, a variant of Diﬀerential Power Analysis (DPA),
uses the variation of EM emissions of a CPU to discover
variables used in an executing program, such as encryption
algorithms [24, 66]. When a bit in a CPU register is ﬂipped
from 0 to 1 or vice versa, it consumes an amount of en-
ergy, which is reﬂected in the corresponding EM emission.
Some CPUs may emit a higher EM signal when switch-
ing a register bit from 0 to 1 than vice versa since that
operation can lead to a higher energy consumption [30].
Due to this, when the contents of a complete CPU reg-
ister are modiﬁed, it is possible to identify the hamming
distance between the previous and new state using the re-
sulting EM emission. Since every instruction running on
a CPU aﬀects the values on diﬀerent registers, this means
that attackers can identify instructions being executed and
intermediate variables used based on the EM observation.
Figure 3 illustrates how diﬀerential EM analysis is used
to identify the key of a simple XOR-cipher.
Initially, a
large set of input data bytes and all possible key bytes are
used to perform XOR-operations and the hamming dis-
tances of the resulting values are stored in a matrix called
Hypothetical Matrix, as shown in Figure 3. The objective
is to ﬁnd the hypothetical key of the matrix that gener-
ates matching hamming distances for the same input val-
ues. For this, the input values are fed to software running
on the CPU, where the XOR operation is performed with
the unknown key. EM emissions are sampled for each in-
put value to generate the Real Matrix, where each column
contains an EM signal sample for its corresponding input.
Calculating cross-correlations between rows of the two ma-
trices can ﬁnd the corresponding row in the Hypothetical
Figure 2: The RF-DNA ﬁngerprinting process.
of data samples, while the skewness and kurtosis metrics
measure the symmetry and the sharpness of a data sam-
ple. Furthermore, the signal itself is again considered as
a one entire region, i.e., the (N + 1)th region, to calcu-
late the same statistical metrics. As Figure 2 illustrates,
each of these calculated statistical metrics are arranged in
a single vector, which becomes the RF-DNA ﬁngerprint of
the originally acquired EM trace from the device.
5. Information Leaking Electromagnetic Emissions
This section dives into the question of what informa-
tion is contained in an EM emission trace of a particular
computing system. From a digital forensic perspective,
both the kind of software running on IoT devices and the