# 【技术分享】针对Node.js的node-serialize模块反序列化漏洞的后续分析
|
##### 译文声明
本文是翻译文章，文章来源：websecurify
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
作者：[knight](http://bobao.360.cn/member/contribute?uid=162900179)
预估稿费：200RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**  
**
**传送门**
[**【漏洞分析】利用Node.js反序列化的漏洞执行远程代码（含演示视频）**](http://bobao.360.cn/learning/detail/3488.html)
**前言**
对Node.js序列化远程命令执行漏洞的一些后续发现和怎样开发攻击载荷。
几天前我在[opsecx博客上](https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/)发现了一篇怎样利用一个名为node-serialize的nodejs模块中的RCE（远程执行代码）错误的博客。文章很清楚地解释了模块上存在的问题，我却想到另外一件事，就是Burp的利用过程很复杂，却没有用Burp进行攻击
-Burp 是一个很强大的工具 – 我认为我们可以做得更好。
在这篇文章中，我想展示我对这个特定的RCE的看法，分享一些额外的见解，也许这些看法会对你以后的研究有帮助。
**攻击方面**
在我们开始之前，先检查攻击面是否可以使用。不要滥用节点序列化模块。
下面是所有依赖模块的列表：cdlib，cdlibjs，intelligence，malice，mizukiri，modelproxy-engine-mockjs，node-help，sa-sdk-node，scriby，sdk-sa-node，shelldoc，shoots。
因为没有分析代码，所以没有办法识别这些实现是否也是脆弱的，但是我假设它是脆弱性的。
更重要的是，我们还没有回答这个模块使用有多么广泛的这个问题。 每月2000次下载可能意味着许多事情，很难估计这个数字后面的应用程序数量。
快速浏览一下github和google是获得一些答案的有效方法，但是我却发现一些有趣的地方。
GitHub搜索回显了97个潜在的易受攻击的公共模块/应用程序，这些模块/应用程序最有可能被私人使用，因为没有登录npmjs.com。
通过代码浏览可以理解这个问题是多么广泛（或没有）。 我很惊讶地发现，它与神奇宝贝有关。我要去搞清楚！
我将在这里支持 ，因为它是唯一的方法，在这种情况下，还对NodeJS模块系统保持关注。
它对开源项目是免费的。
**  
**
**测试环境**
到目前为止，我们认为我们正在处理一个具有有限的滥用潜力的漏洞，这从公共安全角度来看是有好处的。 让我们进入更学术的一面，来重新利用它。
为了测试成功，我们需要一个易受攻击的应用程序。 opsecx有一个这样的程序，所以我们将在本练习中使用它。 代码相当简单。
    var express = require('express');
    var cookieParser = require('cookie-parser');
    var escape = require('escape-html');
    var serialize = require('node-serialize');
    var app = express();
    app.use(cookieParser())
    app.get('/', function(req, res) {
        if (req.cookies.profile) {
            var str = new Buffer(req.cookies.profile, 'base64').toString();
            var obj = serialize.unserialize(str);
            if (obj.username) {
                res.send("Hello " + escape(obj.username));
            }
        } else {
            res.cookie('profile', "eyJ1c2VybmFtZSI6ImFqaW4iLCJjb3VudHJ5IjoiaW5kaWEiLCJjaXR5IjoiYmFuZ2Fsb3JlIn0=", {
                maxAge: 900000,
                httpOnly: true
            });
            res.send("Hello stranger");
        }
    });
    app.listen(3000);
您将需要以下package.json文件来完成（做NPM的安装）
    {
      "dependencies": {
        "cookie-parser": "^1.4.3",
        "escape-html": "^1.0.3",
        "express": "^4.14.1",
        "node-serialize": "0.0.4"
      }
    }
所以让我们跳过实际的事情。 从代码中可以看到，此示例Web应用程序正在使用用户配置文件设置cookie，该配置文件是使用易受攻击的节点模块的序列化对象。
这都是在进行base64编码。
要想知道base64字符串在打包时看起来是什么，我们可以使用[ENcoder](https://encoder.secapps.com/)。
这看起来像标准JSON。 首先，让我们设置Rest，以便我们可以测试它。
请注意，我们使用Cookie构建器来获取正确的编码，并且我们正在使用Encode小部件将JSON字符串转换为Base64格式。
**配置攻击载荷**
现在我们有一个工作请求，我们需要配置一个攻击载荷。要做的第一件事是了解节点序列化漏洞究竟是如何工作的。纵观源代码这是很明显的，该模块将连续函数显示[在这里](https://github.com/luin/serialize/blob/c82e7c3c7e802002ae794162508ee930f4506842/lib/serialize.js#L41)。
    } else if(typeof obj[key] === 'function') {
      var funcStr = obj[key].toString();
      if(ISNATIVEFUNC.test(funcStr)) {
        if(ignoreNativeFunc) {
          funcStr = 'function() {throw new Error("Call a native function unserialized")}';
        } else {
          throw new Error('Can't serialize a object with a native function property. Use serialize(obj, true) to ignore the error.');
        }
      }
      outputObj[key] = FUNCFLAG + funcStr;
    } else {
一旦我们调用unserialize，这个问题就会显现出来。
确切的方法[在这里](https://github.com/luin/serialize/blob/c82e7c3c7e802002ae794162508ee930f4506842/lib/serialize.js#L75)。
    if(obj[key].indexOf(FUNCFLAG) === 0) {
      obj[key] = eval('(' + obj[key].substring(FUNCFLAG.length) + ')');
    } else if(obj[key].indexOf(CIRCULARFLAG) === 0) {
这意味着如果我们创建一个包含以_ $$ ND_FUNC $$ _开头的值的任意参数的JSON对象，我们将执行远程代码，因为它将执行eval。
要测试这个，我们可以使用以下设置。
如果成功，并且它应该是成功的，您将得到一个错误，因为服务器将在请求完成之前退出。现在我们有远程代码执行，但是我们应该可以做得更好。