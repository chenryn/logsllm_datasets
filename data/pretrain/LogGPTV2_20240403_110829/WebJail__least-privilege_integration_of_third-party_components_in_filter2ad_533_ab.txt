in the browser, this architecture must necessarily be imple-
mented in the browser. It should satisfy the following re-
quirements:
R1 Full mediation. The security-sensitive operations need
to be fully mediated. The attacker can not circumvent
the security mechanisms in place.
R2 Remote component delivery. The security mecha-
nism must allow the use of legacy third-party com-
ponents and the direct delivery of components from
the service provider to the browser environment.
R3 Secure composition policy. The secure composition
policy must be conﬁgurable (and manageable) by the
mashup integrator. The policy must allow ﬁne-grained
control over a single third-party component, with re-
spect to the security-sensitive operations in the HTML5
APIs.
R4 Performance The security mechanism should only in-
troduce a minimal performance penalty, unnoticeable
to the end-user.
Existing technologies like e.g. Caja [23] and FBJS [31]
require pre-processing of mashup components, while Con-
Script [21] does not work in a mashup context because it
depends on the mashup component to load and enforce its
own policy. A more thorough discussion of related work can
be found in Section 8.
4. WEBJAIL ARCHITECTURE
To enable least-privilege integration of third-party mashup
components, we propose WebJail, a novel client-side secu-
rity architecture. WebJail allows a mashup integrator to
apply the least-privilege principle on the individual com-
ponents of the mashup, by letting the integrator express a
secure composition policy and enforce the policy within the
browser by building on top of the deep advice approach of
ConScript [21].
The secure composition policy deﬁnes the set of security-
sensitive operations that the component is allowed to invoke.
Each particular operation can be allowed, disallowed, or re-
stricted to a self-deﬁned whitelist. Once loaded, the deep
aspect layer will ensure that the policy is enforced on every
accesspath to the security-sensitive operations, and that the
policy can not be tampered with.
The WebJail architecture consists of three abstraction lay-
ers as shown in Figure 1. The upper layer, the policy layer,
associates the secure composition policy with a mashup com-
ponent, and triggers the underlying layers to enforce the
the document’s structure on the ﬂy. Additionally, a sand-
box can impose coarse-grained restrictions on an iframe, as
mentioned in Section 2.2.
Inter-frame communication allows sending messages be-
tween windows (e.g. between mashup components). This in-
cludes window navigation, as well as Web Messaging (postMes-
sage).
Client-side storage enables applications to temporarily or
persistently store data. This can be achieved via Web Stor-
age, IndexedDB or the File API.
External communication features such as CORS, UMP,
XMLHttpRequest level 1 and 2, and websockets allow an
application to communicate with remote websites, even in
cross-origin settings.
Device access allows the web application to retrieve con-
textual data (e.g. geolocation) as well as system information
such as battery level, CPU information and ambient sensors.
Media features enable a web application to play audio and
video fragments, as well as capture audio and video via a
microphone or webcam.
The UI and rendering features allow subscription to clip-
board and drag-and-drop events, issuing desktop notiﬁca-
tions and populating the history via the History API.
For a more thorough analysis of the HTML5 APIs, we
would like to refer to an extensive security analysis we have
carried out, commissioned by the European Network and
Information Security Agency (ENISA) [7].
4.1.2
The policy layer associates the secure composition policy
with a mashup component, and deploys the necessary se-
curity controls via the underlying layers. As composition
granularity, we have chosen the iframe level; i.e. mashup
components are each loaded in their separate iframe.
Secure composition policy
In particular, within WebJail the secure composition pol-
icy is expressed by the mashup integrator, and attached to
a particular component via a newly-introduced policy at-
tribute of the iframe element of the component to be loaded.
1 
We have grouped the identiﬁed security-sensitive opera-
tions in the HTML5 APIs in nine disjoint categories, based
on their functionality: DOM access, Cookies, External com-
munication, Inter-frame communication, Client-side storage,
UI & Rendering, Media, Geolocation and Device access.
For a third-party component, each category can be fully
disabled, fully enabled, or enabled only for a self-deﬁned
whitelist. The whitelists contain category-speciﬁc entries.
For example, a whitelist for the category “DOM Access”
contains the ids of the elements that might be read from or
updated in the DOM. The nine security-sensitive categories
are listed in Table 1, together with their underlying APIs,
the amount of security-sensitive functions in each API, and
their WebJail whitelist types.
The secure composition policy expresses the restrictions
for each of the security-sensitive categories, and an example
policy is shown below. Unspeciﬁed categories are disallowed
by default, making the last line in the example policy obso-
lete.
{ ”framecomm ” : ” y e s ” ,
”extcomm ” :
” d e v i c e ” : ”no ” }
[ ” g o o g l e . com ” , ”youtube . com ” ] ,
Figure 1: The WebJail architecture consists of three layers:
The policy layer, the advice construction layer and the deep
aspect weaving layer.
policy for the given component. The lower layer, the deep
aspect weaving layer, enables the deep aspect support with
the browser’s JavaScript engine. The advice construction
layer in between takes care of mapping the higher-level pol-
icy blocks onto the low-level security-sensitive operations via
a 2-step policy reﬁnement process.
In this section, the three layers of the WebJail will be de-
scribed in more detail. Next, Section 5 will discuss a proto-
type implementation of this architecture in Mozilla Firefox.
4.1 Policy layer
Security-sensitive JavaScript operations
The policy layer associates the secure composition policy
with the respective mashup component. In this section, an
analysis of security-sensitive operations in the HTML5 APIs
is reported and discussed, as well as the secure composition
policy itself.
4.1.1
As part of this research, we have analyzed the emerging
speciﬁcations and browser implementations, and have iden-
tiﬁed 86 security-sensitive operations, accessible via Java-
Script APIs. We have synthesized the newly-added features
of these speciﬁcations in Figure 2, and we will brieﬂy sum-
marize each of the components in the next paragraphs. Most
of these features rely on (some form of) user-consent and/or
have origin-restrictions in place.
Figure 2: Synthesized model of the emerging HTML5 APIs
Central in the model is the window concept, containing
the document. The window manifest itself as a browser
window, a tab, a popup or a frame, and provides access
to the location and history, event handlers, the document
and its associated DOM tree. Event handlers allow to regis-
ter for a speciﬁc event (e.g. being notiﬁed of mouse clicks),
and access to the DOM enables a script to read or modify
1
2
3
Policy fileCategoryAPIAPI FunctionAdvice functionAdvised function++=JavaScriptC++Policy layerAdvice construction layerDeep aspect weaving layerClient‐side storage(Web Storage,IndexedDB, File API)External Communication(CORS, UMP, XHR 1+2, WebSockets)Device Access(System Information, Geolocation, Crypto)Media(Audio, Video, Media Capture)UI & Rendering(Drag/Drop events, Clipboard events, Notifications, History API)Window(Cookies, Location)Event HandlersDOMSandboxInter‐Window Communication(Web messaging)Categories and APIs (# op.)
DOM Access
Whitelist
ElemReadSet, ElemWriteSet
DOM Core (17)
Cookies
cookies (2)
KeyReadSet, KeyWriteSet
External Communication
DestinationDomainSet
XHR, CORS, UMP (4)
WebSockets (5)
Server-sent events (2)
Inter-frame Communication
DestinationDomainSet
Web Messaging (3)
Client-side Storage
Web Storage (5)
IndexedDB (16)
File API (4)
File API: Dir. and Syst. (11)
File API: Writer (3)
UI and Rendering
History API (4)
Drag/Drop events (3)
Media
Media Capture API (3)
Geolocation
Geolocation API (2)
Device Access
KeyReadSet, KeyWriteSet
SensorReadSet
System Information API (2)
Total number of security-sensitive operations: 86
Table 1: Overview of the sensitive JavaScript operations
from the HTML 5 APIs, divided in categories.
It is important to note that WebJails or regular frames can
be used inside WebJails. In such a case, the functionality
in the inner frame is determined by the policies imposed
on enclosing frames, in addition to its own policy (if it has
one, as is the case with a WebJail frame). Allowing sensible
cascading of policies implies that “deeper” policies can only
make the total policy more strict. If this were not the case,
a WebJail with a less strict policy could be used to “break
out” of the WebJail restrictions.
The semantics of a policy entry for a speciﬁc category can
be thought of as a set. Let V be the set of all possible values
that can be listed in a whitelist. The “allow all” policy would
then be represented by the set V itself, a whitelist would be
represented by a subset w ⊆ V and the “allow none” policy
by the empty set φ. The relationship “x is at least as strict
as y” can be represented as x ⊆ y. Using this notation, the
combined policy p of 2 policies a and b is the intersection
p = a ∩ b, since p ⊆ a and p ⊆ b.
After loading, parsing and combining all the policies appli-
cable to the WebJail protected iframe, the policy is enforced
via the underlying layers.
4.2 Advice construction layer
The task of the advice construction layer is to build advice
functions based on the high-level policy received from the
policy layer, and apply these advice functions on the low-
level security-sensitive operations via deep aspect technology
in the deep advice weaving layer.
To do so, the advice construction layer applies a 2-step
reﬁnement process. For each category of the secure compo-
sition policy, the set of relevant APIs is selected. Next for
each API, the individual security-sensitive operations are
processed. Consider for instance that a whitelist of type
“KeyReadSet”1 is speciﬁed for the client-side storage in the
composition policy. This is ﬁrst mapped to the various stor-
age APIs in place (such as Web Storage and File API), and
1Such a whitelist contains a set of keys that may be read
then advice is constructed for the security-sensitive opera-
tions in the API (e.g. for accessing the localStorage object).
The advice function decides, based on the policy, whether
or not the associated API function will be called:
if the
policy for the API function is “allow all”, or “allow some”
and the whitelist matches, then the advice function allows
the call. Otherwise, the call is blocked.
On successful completion of its job, the advice construc-
tion layer has advice functions for all the security-sensitive
operations across the nine categories relevant for the spe-
ciﬁc policy. Next, the advices are applied on the original
operations via the deep advice weaving layer.
4.3 Deep aspect weaving layer
The (advice, operation) pairs received from the advice con-
struction layer are registered into the JavaScript engine as
deep advice. The result of this weaving is that the origi-
nal API function is replaced with the advice function, and
that all accesspaths to the API function now go through
the advice function. The advice function itself is the only
place where a reference to the original API function exists,
allowing it to make use of the original functionality when
desired.
5. PROTOTYPE IMPLEMENTATION
To show the feasibility and test the eﬀectiveness of Web-
Jail, we implemented a prototype by modifying Mozilla Fire-
fox 4.0b10pre.The modiﬁcations to the Mozilla code are lo-
calized and consist of ±800 lines of new code (±300 Java-
Script, ±500 C++), spread over 3 main ﬁles. The prototype
currently supports the security-sensitive categories external
and inter-frame communication, client-side storage, UI and
rendering (except for drag/drop events) and geolocation.
Each of the three layers of the implementation will be
discussed now in more detail.
5.1 Policy layer
The processing of the secure composition policy via the
policy attribute happens in the frame loader, which handles
construction of and loading content into frames. The speci-
ﬁed policy URL is registered as the policy URL for the frame
to be loaded, and any content loaded into this frame will be
subject to that WebJail policy, even if that content issues a
refresh, submits a form or navigates to another URL.
When an iframe is enclosed in another iframe, and both
specify a policy, the combinatory rules deﬁned in Section 4
are applied on a per-category basis. To ease up parsing of
a policy ﬁle, we have chosen to use the JavaScript Object
Notation (JSON).
Once the combined policy for each category has been cal-
culated, the list of APIs in that category is passed to the
advice construction layer, along with the combined policy.
5.2 Advice construction layer
The advice construction layer builds advice functions for
individual API functions. For each API, the advice construc-
tion layer knows what functions are essential to enforce the
policy and builds a speciﬁc advice function that enforces it.
The advice function is a function that will be called in-
stead of the real function. It will determine whether or not
the real function will be called based on the policy and the
arguments passed in the function call. Advice functions in
WebJail are written in JavaScript and should expect 3 ar-
guments: a function object that can be used to access the
original function, the object on which the function was in-
voked (i.e. the this object) and a list with the arguments
passed to the function.
Func and its advice function Adv. Before deep aspect weav-
ing, the JSFunction object of Func contains a reference to
a native C++ function OrigCode.
f u n c t i o n makeAdvice ( w h i t e l i s t ) {
v a r m yW h i t e l i s t = w h i t e l i s t ;
return f u n c t i o n ( o r i g f , obj , vp ) {
return o r i g f . ROapply ( obj , vp ) ;
i f ( m yW h i t e l i s t . ROindexOf ( vp [ 0 ] ) >=0) {
} e l s e {
}
1
2
3
4
5
6