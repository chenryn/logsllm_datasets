### 4. WebJail Architecture

To enable least-privilege integration of third-party mashup components, we propose WebJail, a novel client-side security architecture. WebJail allows a mashup integrator to apply the least-privilege principle on individual components by defining and enforcing a secure composition policy within the browser. This is achieved by building on the deep advice approach of ConScript [21].

#### 4.1. Requirements

The architecture must satisfy the following requirements:

- **R1: Full Mediation**  
  Security-sensitive operations must be fully mediated, ensuring that attackers cannot bypass the security mechanisms in place.

- **R2: Remote Component Delivery**  
  The security mechanism must support the use of legacy third-party components and allow for the direct delivery of components from the service provider to the browser environment.

- **R3: Secure Composition Policy**  
  The secure composition policy must be configurable and manageable by the mashup integrator. It should provide fine-grained control over each third-party component with respect to security-sensitive operations in the HTML5 APIs.

- **R4: Performance**  
  The security mechanism should introduce only a minimal performance penalty, which is unnoticeable to the end-user.

Existing technologies like Caja [23] and FBJS [31] require pre-processing of mashup components, while ConScript [21] does not work in a mashup context because it depends on the mashup component to load and enforce its own policy. A more detailed discussion of related work can be found in Section 8.

#### 4.2. WebJail Architecture Overview

WebJail consists of three abstraction layers as shown in Figure 1:

1. **Policy Layer**  
   - Associates the secure composition policy with a mashup component.
   - Triggers the underlying layers to enforce the policy.

2. **Advice Construction Layer**  
   - Maps high-level policy blocks onto low-level security-sensitive operations via a two-step policy refinement process.

3. **Deep Aspect Weaving Layer**  
   - Enables deep aspect support with the browserâ€™s JavaScript engine.
   - Ensures that the policy is enforced on every access path to the security-sensitive operations and that the policy cannot be tampered with.

#### 4.3. Detailed Layers

##### 4.3.1. Policy Layer

The policy layer associates the secure composition policy with the respective mashup component. The secure composition policy defines the set of security-sensitive operations that the component is allowed to invoke. Each operation can be allowed, disallowed, or restricted to a self-defined whitelist.

- **Security-Sensitive Operations in HTML5 APIs**  
  As part of this research, we have analyzed emerging specifications and browser implementations, identifying 86 security-sensitive operations accessible via JavaScript APIs. These features are summarized in Figure 2 and Table 1, and most rely on user consent and/or have origin restrictions in place.

- **Secure Composition Policy**  
  The policy is expressed by the mashup integrator and attached to a particular component via a newly-introduced `policy` attribute of the `iframe` element. The policy can be configured for nine categories of security-sensitive operations: DOM Access, Cookies, External Communication, Inter-frame Communication, Client-side Storage, UI & Rendering, Media, Geolocation, and Device Access.

- **Policy Semantics**  
  The semantics of a policy entry for a specific category can be thought of as a set. Let \( V \) be the set of all possible values that can be listed in a whitelist. The "allow all" policy would then be represented by the set \( V \), a whitelist by a subset \( w \subseteq V \), and the "allow none" policy by the empty set \( \emptyset \). The combined policy \( p \) of two policies \( a \) and \( b \) is the intersection \( p = a \cap b \), since \( p \subseteq a \) and \( p \subseteq b \).

##### 4.3.2. Advice Construction Layer

The advice construction layer builds advice functions based on the high-level policy received from the policy layer and applies these advice functions on the low-level security-sensitive operations via deep aspect technology in the deep advice weaving layer.

- **Two-Step Refinement Process**  
  For each category of the secure composition policy, the set of relevant APIs is selected. For each API, the individual security-sensitive operations are processed. For example, if a "KeyReadSet" whitelist is specified for client-side storage, it is first mapped to the various storage APIs (e.g., Web Storage and File API), and advice is constructed for the security-sensitive operations in the API (e.g., accessing the `localStorage` object).

- **Advice Function**  
  The advice function decides, based on the policy, whether the associated API function will be called. If the policy for the API function is "allow all" or "allow some" and the whitelist matches, the advice function allows the call. Otherwise, the call is blocked.

##### 4.3.3. Deep Aspect Weaving Layer

The (advice, operation) pairs received from the advice construction layer are registered into the JavaScript engine as deep advice. The original API function is replaced with the advice function, and all access paths to the API function now go through the advice function. The advice function itself is the only place where a reference to the original API function exists, allowing it to make use of the original functionality when desired.

#### 5. Prototype Implementation

To demonstrate the feasibility and effectiveness of WebJail, we implemented a prototype by modifying Mozilla Firefox 4.0b10pre. The modifications to the Mozilla code consist of approximately 800 lines of new code (300 JavaScript, 500 C++), spread over three main files. The prototype currently supports the security-sensitive categories of external and inter-frame communication, client-side storage, UI and rendering (except for drag/drop events), and geolocation.

- **Policy Layer**  
  The processing of the secure composition policy via the `policy` attribute happens in the frame loader, which handles the construction and loading of content into frames. The specified policy URL is registered as the policy URL for the frame to be loaded, and any content loaded into this frame will be subject to that WebJail policy.

- **Advice Construction Layer**  
  The advice construction layer builds advice functions for individual API functions. For each API, the advice construction layer knows what functions are essential to enforce the policy and builds a specific advice function that enforces it. The advice function is a function that will be called instead of the real function. It determines whether the real function will be called based on the policy and the arguments passed in the function call.

- **Deep Aspect Weaving Layer**  
  The (advice, operation) pairs received from the advice construction layer are registered into the JavaScript engine as deep advice. The result is that the original API function is replaced with the advice function, and all access paths to the API function now go through the advice function.

```javascript
function makeAdvice(whitelist) {
    var myWhitelist = whitelist;
    return function(origf, obj, vp) {
        if (myWhitelist.indexOf(vp[0]) >= 0) {
            return origf.apply(obj, vp);
        } else {
            return; // Block the call
        }
    };
}
```

This implementation ensures that the secure composition policy is enforced at the lowest level, providing robust security for third-party mashup components.