Homomorphic MAC, proposed by Agrawal et al. [31], al-
lows checking the integrity of network coded data. Homo-
morphic MAC has a property that, given two (vector, tag)
pairs (v1, t1) and (v2, t2), a valid tag t can be computed as
t = α1t1 + α2t2 for the vector y = α1v1 + α2v2 for any two
coeﬃcients α1,α 2 ∈ Fq. To construct a homomorphic MAC,
we use a Pseudo Random Function PRF: KF × [1, m] → Fq.
Definition 2. A homomorphic MAC is deﬁned by four
probabilistic polynomial-time algorithms as follows.
• HomMac.Keygen(q, z, m,KF ) → sk = {k1, k2}: Input:
key space KF along with (q, z, m). Output: secret key
sk = (k1, k2) such that k1 ∈ Fz+m
and k2 ∈K F .
q
Chen et al. [24]
Le et al. [25]
Omote et al. [26]
This paper
Roadmap.
The preliminaries are introduced in Section 2. The sys-
tem and threat models are presented in Section 3. The ELAR
scheme is proposed in Section 4. The security and eﬃciency
analyses are discussed in Section 5 and 6, respectively. Fi-
nally, the conclusion and future work are drawn in Section 7.
2. PRELIMINARY
2.1 Proof Of Retrievability (POR)
POR [11–13] is a challenge-response protocol between a
client C (veriﬁer) and a server S (prover). POR allows C to
check whether the data stored in S is available, intact and
retrievable.
Definition 1
(POR). POR consists of the following al-
gorithms:
• POR.Keygen(1λ) → (sk, pk): run by C. Input: a se-
curity parameter (λ). Output: a secret key (sk) and a
public key (pk). sk is stored by C. For a symmetric key
system, pk is set to be null.
• POR.Encode(sk, F ) → F ∗: run by C. Input: the secret
key sk and an original ﬁle F . Output: an encoded ﬁle
F ∗. F ∗ is then stored in S.
• POR.Check(sk) → (true/false): run by both C and S.
Firstly, C generates a challenge chall and sends chall
to S. S then computes a response resp and sends resp
back to C. C ﬁnally veriﬁes S based on chall and resp
using the secret key sk.
• POR.Repair(): run by C. When a corrupted data from
S is detected by check algorithm, C runs this algorithm
to repair the corrupted data. This algorithm is depen-
dent on the used technique, e.g., replication, erasure
coding, or network coding.
2.2 Network Coding
Network coding, traditionally proposed in network sce-
nario [4–6], can replace the traditional ‘store and forward’
paradigm in networks by more intelligent routing that al-
lows intermediate nodes to transform the data in transit.
Network coding has become popular due to its robustness
and the improved throughput it oﬀers. Instead of simply re-
laying the packets of information they receive, the nodes of
a network take several packets and combine them together
for transmission. Thus, it can attain the maximum pos-
sible information ﬂow in a network. When cloud storage
has gained in popularity, network coding has been applied
for cost-eﬃciency, not only in data transmission, but also
in data repair [7]. In cloud storage scenario, suppose that
a client C owns a ﬁle F and wants to store the redundant
42
server
basis of m vectors). To respond to a query for wk, G
does:
client
(cid:448)(cid:1005)
(cid:448)(cid:1006)
(cid:448)(cid:1007)
(cid:449)(cid:1005)
(cid:449)(cid:1006)
(cid:449)(cid:1007)
(cid:94)(cid:1005)
(cid:94)(cid:1006)
(cid:94)(cid:1007)
(cid:1006)(cid:449)(cid:1005)(cid:1085)(cid:1006)(cid:449)(cid:1007)
(cid:449)(cid:1006)(cid:1085)(cid:1006)(cid:449)(cid:1007)
(cid:449)(cid:1005)
(cid:1006)(cid:449)(cid:1006)(cid:1085)(cid:1009)(cid:449)(cid:1007)
(cid:1007)(cid:449)(cid:1005)(cid:1085)(cid:1011)(cid:449)(cid:1007)
(cid:1007)(cid:449)(cid:1006)(cid:1085)(cid:1008)(cid:449)(cid:1007)
(cid:1006)(cid:449)(cid:1005)(cid:1085)(cid:1006)(cid:449)(cid:1006)(cid:1085)(cid:1009)(cid:449)(cid:1007)
(cid:1007)(cid:449)(cid:1005)(cid:1085)(cid:1007)(cid:449)(cid:1006)(cid:1085)(cid:1005)(cid:1005)(cid:449)(cid:1007)
(cid:1009)(cid:449)(cid:1005)(cid:1085)(cid:1009)(cid:449)(cid:1006)(cid:1085)(cid:1005)(cid:1010)(cid:449)(cid:1007)
(cid:1012)(cid:449)(cid:1005)(cid:1085)(cid:1012)(cid:449)(cid:1006)(cid:1085)(cid:1006)(cid:1011)(cid:449)(cid:1007)
new coded 
blocks
– Let b1,··· , bm ∈ Fz+m
– For j = 1,··· , m, let tj ← HomMac.Tag(sk, wk, k)
be the basis for wi.
// compute MAC for all basis vectors.
q
– Send (t1,··· , tm) toA.
• Output.
y∗ ∈ Fz+m
q
A outputs a tag t∗ ∈ Fq and a vector
A wins the security game if HomMac.Verify(sk, y∗, t∗) = 1.
Moreover, let y∗ = (y∗1 ,··· , y∗z+m). Then the augmenta-
tion (y∗z+1,··· , y∗z+m) iny ∗ is not the all-zero vector (which
corresponds to a trivial forgery).
Security.
The homomorphic MAC is said to be secure if the PRF
is secure and the prime q is chosen large enough. For all
polynomial time homomorphic MAC adversaries A there is
PRF adversary A′ (whose running times are about the same
as that of A) such that:
PrA(Hom.Mac) ≤
qz+m + PrA′ (PRF) +
(6)
1
q
1
Due to the space limitation, for the proof of this equa-
tion, we recommend to read the proof of Theorem 2 in [31].
Note that, we do not use a pseudo-random generator for k1
like [31] because we use orthogonal vector generation for k1
(which will be explained later) in order to achieve our data
audit and direct repair in a symmetric-key setting.
2.4 Orthogonal Vector Generation
This technique was proposed [32] to generate a vector such
that it is orthogonal to any of a given set of vectors. For-
mally, given a set of vectors {w1,··· , wm} where wk ∈ Fz+m
for any k ∈ [1, m], the algorithm outputs a vector kφ such
that wk · kφ = 0 for any k ∈ [1, m]. Let OthVecGen denote
the algorithm. OthVecGen is described as follows:
q
1. OthVecGen(w1,··· , wm) → kφ:
• Find the span πM of (w1,··· , wm).
• Construct matrix M = [w1,··· , wm]T .
• Find the null-space of M , denoted by π⊥M , which is
such that M ·uT =
• Find z basis vectors of π⊥M , denoted by B1,··· , Bz ∈
(Theorem 1 will explain why the number of
the set of all vectors u ∈ Fz+m
0.
q
Fz+m
q
basis vectors is z).
• Compute kφ ← Kg(B1,··· , Bz).
2. Kg(B1,··· , Bz) → kφ: This is the subroutine used in
OthVecGen(·)
• Generate z randomnesses ri in Fq for each i ∈
[1, z].
• Compute kφ ←
ri · Bi ∈ Fz+m
q
.
z!i=1
Theorem 1. Given a set of vectors {w1,··· , wm} where
for any k ∈ [1, m], the number of basis vectors
q
wk ∈ Fz+m
of π⊥M is always z.
Figure 1: C stores coded blocks in S1,S2,S3. Suppose S1 is
corrupted, C repairs it by linear combinations of coded blocks
from S2 and S3.
• HomMac.Tag(sk, w, k) → t: Input: secret key sk =
and the block’s index k.
(k1, k2), a vector w ∈ Fz+m
q
Output: a tag t such that:
t = k1 · w + PRF(k2, k) ∈ Fq
(3)
• HomMac.Combine((w1, t1,α 1),··· , (wm, tm,α m)): In-
put: m vectors (w1,··· , wm) and their tags (t1,··· , tm)
along with m coeﬃcients (α1,··· ,α m). Output: a tag
k=1 αk · wk ∈ Fz+m
t of the aggregated vector y = !m
such that: t =!m
k=1 αk · tk ∈ Fq.
• HomMac.Verify(sk, y, t) → (true/false): Input: secret
key sk = (k1, k2), a vector y = (y1,··· , yz+m) ∈ Fz+m
,
and a tag t. The algorithm checks the following equa-
tion:
q
q
t ?= k1 · y +
yz+k · PRF(k2, k)
(4)
m)k=1
If it holds, the algorithm outputs true (y is valid); oth-
erwise, the algorithm outputs false (y is invalid).
Correctness.
To verify correctness of the scheme, suppose y =!m
k=1 αkwk ∈
where w1,··· , wm are the original vectors and α1,··· ,α m
Fz+m
q
are the coeﬃcients. The coordinates (yz+1,··· , yz+m) ofy
are equal to the coeﬃcients (α1,··· ,α m). Therefore, the
algorithm HomMac.Verify(·) satisﬁes:
yz+k · PRF(k2, k) =
k1 · y +
αk · (k1 · wk + PRF(k2, k)) =
αk · tk
(5)
m)k=1
m)k=1
m)k=1
which is the output of HomMac.Combine(·) as required.
Attack Game.
The attack game between a challenger G (we use the nota-
tion G but not C as in previous papers in order to distinguish
with the notation of the client C deﬁned in our scheme) and
an adversary A is deﬁned as follows:
• Setup. G generates a random key sk.
• Queries. A adaptively submits MAC queries where
each query is a linear subspace wk (represented by a
43
Proof. rank(M ) =m. Let πM be the space spanned
by the rows of M . For any m × (z + m) matrix, the rank-
nullity theorem gives: rank(M ) +nullity (M ) = z + m where
nullity(M ) is the dimension of π⊥M .
It yields: dim(π⊥M ) =
(z + m) − m = z. Therefore, the number of basis vectors of
π⊥M is z. In the OthVecGen algorithm, we denote the z basis
vectors by B1,··· , Bz.
3. SYSTEM AND THREAT MODELS
3.1 System Model
The architecture of our system is depicted in Figure 2.
There are three types of entities:
• A client (denoted by C): is an entity that has data to
be stored in the cloud and relies on the cloud for data
storage, computation, and maintenance. This client
can be either enterprise or individual customers.
• Cloud servers (denoted by S1,··· ,Sn where n is the
number of servers): are entities that accommodate
a service of data storage and have signiﬁcant storage
space and computation resources. The client can store
his/her data into a set of servers in a simultaneous and
distributed manner.
• Third party auditor (denoted by T PA):
that is delegated the responsibility of checking the servers
on behalf of the client. T PA is assumed to be trusted
in performing the task of periodically checking the
servers.
is an entity
• POR.Check(skT PA,S1,··· ,Sn) → (∀i ∈ [1, n],Si : true
/false): run by both T PA and Si which is being checked.
For each Si (i ∈ [1, n]), T PA ﬁrstly generates a chal-
lenge challSi and sends challSi to Si. Si then computes
a response respSi and sends respSi back to T PA. T PA
ﬁnally checks Si by verifying whether respSi is a valid
response of challSi using the key skT PA.
• POR.Repair(Sr,Si1 ,··· ,Sih ) → (F ∗
S′r
= {(crj)}j∈[1,d],
TS′r = {(trj)}j∈[1,d]): When a corrupted server Sr is
detected during the check phase, this algorithm is run
by a new server S′r to repair the coded blocks in Sr
using h healthy servers Si1 ,··· ,Sih (h  time1, the client sends another challenge
chall′ to SA. SA does not compute a corresponding response
resp′. Instead, SA re-uses resp to save its computation cost.
Formally, the scheme is said to be secure from SA if the
probability of SA is negligible:
+ <ϵ
* true ← POR.Check(skT PA,S (chall,resp)
true ← POR.Check(skT PA,S (chall′,resp)
(replay
attack
SA
A
A
)
)
Pr
Figure 2: Architecture of our system
Based on POR protocol, our functional deﬁnition between
C, T PA and S1,··· ,Sn is described via the following algo-
rithms:
• POR.Keygen(1λ) → (skC, skT PA): run by C. Input: a
security parameter λ. Output: a secret key skC for C,
and a secret key skT PA for T PA.