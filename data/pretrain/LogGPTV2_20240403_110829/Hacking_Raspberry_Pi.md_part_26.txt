Turns on an LED on for one second, then off for one second, repeatedly.
This example code is in the public domain.
*/
// Pin 13 has an LED connected on most Arduino boards.
// give it a name:
int led = 13;
// the setup routine runs once when you press reset:
void setup() {
// initialize the digital pin as an output.
pinMode(led, OUTPUT);
}
// the loop routine runs over and over again forever:
void loop() {
digitalWrite(led, HIGH); // turn the LED on (HIGH is the voltage level)
delay(1000); // wait for a second
digitalWrite(led, LOW); // turn the LED off by making the voltage LOW
delay(1000); // wait for a second
}
First of all, notice that the sketch includes two functions, setup() and loop(). The setup() procedure
initializes a particular digital pin as a signal output.
How do we know we want pin 13? It’s right here:
int led = 13;
This statement creates a variable named led that can accept only integer (whole number) values.
Furthermore, this line initializes the value of the led variable to 13. The 13 denotes pin #13 on the
Arduino. You can find pin 13 by examining the digital pins on top of the Arduino Uno PCB. (Hint: pin
13 is located immediately to the right of the GND interface.)
pinMode(led, OUTPUT);
The pinMode() function accepts two arguments; first you pass in the variable, which is pin 13, and
OUTPUT marks the pin for outgoing signal/current.
The loop() procedure does exactly what you think it does: it performs whatever actions you specify in
the code block an infinite number of times. As previously stated, an Arduino runs its currently loaded
sketch forever, unless and until you send it a new sketch to run. Singleness of purpose, remember?
digitalWrite(led, HIGH);
The digitalWrite() function puts the target LED in an on state (HIGH) or an off state (LOW). This is
binary data we’re talking about.
delay(1000);
The delay function accepts an integer value in milliseconds. A value of 1000 means that the LED will
stay on for 1 second.
Thus, the blink sketch does nothing more than cycles LED 13 on and off every second...forever. As an
experiment, change the delay value from 1000 to 100 and reupload the sketch to your Uno. You
should see the LED blink much faster.
Note: How to Clear Out Your Arduino
If you want to stop the Blink sketch, or if you want to clear any of the Arduino’s current
actions, start a new, blank sketch file that contains the following lines:
void setup(){};
void loop(){};
Verify the sketch and then upload it to your Uno. I actually saved the sketch on my Pi
and named it Clear for easy reuse.
Fading an LED
In this example with the Arduino Uno you test the use of analog output and PWM to gradually fade an
LED.
Following is an inventory of what you need to have on hand to complete this experiment:
Arduino Uno
Breadboard
220 ohm resistor
LED
You can study Figure 19.7 to learn the wiring schematic for this test.
FIGURE 19.7 Wiring diagram for our Arduino PWM LED test
With respect to that wiring diagram, please take into account the following notes:
The (+) power rail is for incoming power.
The (-) power rail is for outgoing power (ground).
The Uno board in my schematic is from an earlier PCB release. As long as you choose a digital
output pin labeled “PWM” or “~” you are good to go.
Task: Running the Fade Sketch
You now know the basics of uploading and running Arduino sketches, so this second
example procedure should feel more natural for you to undertake.
1. When your wiring is complete, fire up Arduino IDE and click File, Examples, 1. Basics,
Fade.
2. Go ahead and upload the sketch. While you do so, keep an eye on the TX and RX
surface-mounted LEDs on the Uno PCB. You’ll notice them flash a bit as the Ardunio
sends and receives data, respectively.
3. The end result of this test is you see your LED move gradually from full intensity to off
and then back again, giving the illusion of a fading effect.
4. To learn what’s going on under the hood, you can again examine the Fade sketch source
code.
int led = 9;
int brightness = 0;
int fadeAmount = 5;
This code defines three variables. The led variable denotes PWM pin number 9. The
initial bulb brightness (PWM value) is set to 0, which equals off. The fadeAmount variable
controls how granular or choppy the fade effect is, as you see in a moment.
The setup() procedure simply specifies pin #9 as output, as you saw in the previous
exercise. The loop() procedure is much more interesting here, though.
analogWrite(led, brightness);
The analogWrite() function sets the brightness of pin 9 to its current value, which we
already know is 0.
Click here to view code image
brightness = brightness + fadeAmount;
Here you increment the brightness value by the fadeAmount value. You can tweak the
script by adjusting either of these variables.
Click here to view code image
if (brightness == 0 || brightness == 255)
{fadeAmount = -fadeAmount ; }
The previous expression, when stated in human terms, says, “If the LED brightness
reaches either the maximum brightness of 255 or minimum brightness of 0, then reverse the
direction of fadeAmount.”
In other words, while the LED increases its brightness from 1 to 254, the fadeAmount
value is positive.
When the brightness value hits 255, however, the fadeAmount maintains its value, but
reverses its direction, thus becoming negative. This is what allows the LED to “fade” from
full brightness down to off. Get it?
Using the AlaMode
Now that you have gotten to know an official Arduino board to a good degree of depth, let’s close out
this chapter by looking briefly at one of the most popular Arduino clones, at least from the
perspective of a Raspberry Pi enthusiast.
The AlaMode (http://is.gd/mm0Kfd) is an Arduino clone/shield that fits directly on top of the
Raspberry Pi’s GPIO header pins. I show you an annotated close-up of the AlaMode in Figure 19.8.
FIGURE 19.8 The AlaMode perfectly fits the Pi’s GPIO header pins.
1: GPIO
2: Reset button
3. “Blink” LED
4: Digital I/O pins
5: Micro SD card slot
6: Power source jumper
7: Micro USB power input
8: ATmega microcontroller
9: Power pins
10: Analog input pins (unpopulated)
The AlaMode includes an impressive array of features besides its ease of connectivity to the
Raspberry Pi:
DS3234 Real Time Clock: Neither the Raspberry Pi nor the Arduino Uno has a battery-backed
RTC. This is an excellent feature because you may want to run tasks that require precise timing
and the Pi does not include a real-time clock “out of the box.”
Micro-SD Card Slot: You can perform data logging without having to access a network.
Again, this is a tremendous convenience for certain projects.
Power Flexibility: You can power the AlaMode directly from the Raspberry Pi through the
GPIO, or you can plug in a wall wart or connect a traditionally DC battery.
The AlaMode’s microprocessor is the same ATmega328P that you have on the Uno. AlaMode
connects to the Pi as an I2C slave device and performs 5V-3.3V buffering. The AlaMode also
includes a general-purpose blink LED on pin 13, just like the Arduino.
You can purchase the AlaMode through several channels; here are a couple:
Maker Shed: http://is.gd/6eMMnC
Seeed Studio: http://is.gd/fFFDnQ
Be sure to snag a copy of the user manual, too: http://is.gd/2bniUh.
Task: Getting the AlaMode Up and Running
You would have been surprised, had you not read this book, that the AlaMode ships
without I/O headers installed. This means you need to solder them into the AlaMode
yourself to gain the PCB’s full functionality.
Unfortunately, soldering deserves a chapter unto itself. As a consolation, here are some
top-notch resources that I picked for you that will teach you everything you need to know
(actually, soldering the headers to the AlaMode is a 15-minute procedure; it truly is no big
deal):
Make Video Podcast, Soldering Tutorial: http://is.gd/MALror
Curious Inventor, How to Solder Correctly, and Why (video): http://is.gd/XIcaVx
Electronix Express, Better Soldering: http://is.gd/9FYfXL
Soldering is Easy Comic Book: http://is.gd/aNcuNQWith regard to the software
configuration, as long as you’ve performed the steps given in the earlier procedure “Task:
Install and Configure Arduino IDE on the Raspberry Pi,” you’ve completed most of the
work.
Let’s sweep up the shavings together now:
1. Power off your Raspberry Pi.
2. If you want to power the RTC, insert a CR1632 battery into the associated clip on the
AlaMode.
3. Gently push the AlaMode onto the Raspberry Pi’s GPIO pins. Make sure to line up the Pi
GPIO with the AlaMode in the correct orientation; you can see the Pi-AlaMode sandwich
(as well as some unsoldered headers) in Figure 19.9.
FIGURE 19.9 The Raspberry Pi, the AlaMode, and an unsoldered I/O header
4. Now about power. You can configure the AlaMode to receive its power directly from
the Pi’s GPIO header (assuming the Pi receives at least 1A of current on its own) or from
a wall wart power supply.
In this tutorial, let’s power the AlaMode directly from the Pi. To do this, you must first
set the 5V_Link jumper to ON as shown in Figure 19.10.
FIGURE 19.10 The AlaMode’s 5V_Link jumper is set by default to receive power through
the Raspberry Pi GPIO.
The good news is that the AlaMode ships with the jumper set this way by default, so
this is a verification step rather than a configuration step. By contrast, if you want to use an
external power supply, you must move the jumper so that it covers the other pin, setting the
switch to OFF.
Other than that, you can load up Arduino IDE on the Raspberry Pi and send sketches to
the AlaMode in the very same way you did with the Arduino Uno.
5. In Arduino IDE, click Tools, Board and select AlaMode. Finally, click Tools, Serial
Port and ensure that port /dev/ttyS0 is selected. Happy experimenting!
Chapter 20. Raspberry Pi and the Gertboard
Fans of the Gertboard claim that the device is the ultimate expansion board for the Raspberry Pi.
Having spent quite a bit of time with the Gertboard, I can tell you that there is indeed substance to that
claim.
Gert van Loo (pronounced van LOW) is a Broadcom engineer who also happens to be one of the
principal designers of the Raspberry Pi. As I’m sure you can correctly guess, Gert also invented the
Gertboard.
Formally defined, the Gertboard is an expansion board, also called a daughterboard, that connects to
the Raspberry Pi GPIO headers and gives you instant access to a tremendous variety of input/output
options.
You can look at the Gertboard as an activity center or toybox with which you can experiment with
motors, switches, buttons, and even an onboard Arduino microcontroller.
Basically, the Gertboard extends the Raspberry Pi to the real world, allowing you to sense
temperatures, detect sounds, drive motors, and so forth.
Take a look at Figure 20.1 and the following descriptions for a tour of the PCB’s major components.
FIGURE 20.1 The Gertboard is a multipurpose expansion board for the Raspberry Pi.
1: 12 LEDs
2: 3 momentary button switches
3: Motor controller
4: 6 open collector driver inputs
5: GPIO
6: Atmel ATmega chip
7: 10-bit Analog-to-Digital and 8-bit Digital-to-Analog converters
The L6203 motor controller drives brushed DC physical motors, including servos and steppers.
The ULN2803a open collector drivers enable you to turn devices on and off, especially those that use
a different voltage than the Gertboard itself or those that use more current than the Gertboard can
supply.
The Atmel ATmega 328P AVR microcontroller gives you built-in Arduino prototyping capability.
One important note about this on-board Arduino chip is that it runs at 3.3V instead of the standard 5V
Arduino voltage.
The MCP4801 Analog-to-Digital (A2D) and MCP3002 Digital-to-Analog (D2A) converters, as
you’d expect, enable you to process both analog as well as digital audio signals. This hardware is
especially useful if you want to, for instance, detect an input volume for an alarm system.
You learn more about the LEDs, button switches, and GPIO pins momentarily. In the meantime, you
are probably wondering where you can purchase a Gertboard.
Originally, the Gertboard was sold in an unassembled state that required soldering. Fortunately,
Farnell/Element 14 now sells an assembled model that is ready to rumble for $49 USD, as of this
writing. Go purchase a Gertboard at http://is.gd/mnQiHJ.
The assembled Gertboard is called “revision 2” and is physically much different (and improved)
from revision 1. For instance, the revision 1 didn’t have an Arduino-compatible Atmel controller, and
the board was much more cluttered than the revision 2 model.
Gert himself posted an excellent walkthrough of the Gertboard revision 2 changes in a video on his
YouTube channel at http://is.gd/ArQfMK.
Anatomy of the GPIO
The Raspberry Pi General Purpose Input/Output (GPIO) is a 26-pin expansion header that is marked
on the PCB as P1 and employs a 2x13 copper pin strip. I provide the GPIO pinout in Figure 20.2.
FIGURE 20.2 The Raspberry Pi GPIO pinout
The pins that you see here are arranged into four basic functionality groups:
2 +3.3V voltage pins
2 +5V voltage pins
2 +5V voltage pins
5 Ground pins
17 GPIO pins (access to I2C, SPI, and UART)
Raspberry Pi PCBs fabricated after September 2012 are called “revision 2” boards. As it happens,
the Foundation changed the function of three GPIO pins between revision 1 and revision 2; for more
information, read the article at the Embedded Linux Wiki (http://is.gd/CNl2JC).
The bottom line, friends, is that unless you’re using Ethernet, the GPIO represents the only way to
interface your Raspberry Pi with other device hardware. The GPIO header pins are amazingly
flexible; they can be reprogrammed to support input or output, and they can be selectively enabled or
disabled.
One important note that I’ve mentioned before that bears repeating: although the GPIO has two 5V
pins, the GPIO voltage levels are tolerant only of 3.3V signals, and there is not built-in overvoltage
protection on the Raspberry Pi. Consequently, if you are not careful you can fry your Pi.
The 5V pins at P1-02 and P1-04 on the Model B board support a maximum current draw of 300mA.
The official name for the Raspberry Pi GPIO is “The GPIO Connector (P1).” Individual pins on the
GPIO header are referred to with the P1 prefix; for instance, P1-01, and so forth.
Okay—enough background information. Let’s connect the Gertboard to your Raspberry Pi and begin
some serious experimentation!
Connecting Your Gertboard and Raspberry Pi
The Gertboard connects to the Raspberry Pi pin-for-pin by using the GPIO headers. You can either
(carefully) mount the Gertboard directly on top of the Pi board, or you can use a 26-pin ribbon cable.
You can see a Gertboard/Raspberry Pi sandwich in Figure 20.3.
FIGURE 20.3 The Gertboard connects to the Raspberry Pi board by using the GPIO header.
It’s important to be careful when you connect the Gertboard and the Raspberry Pi. You need to line up
every male GPIO pin on the Pi with the corresponding female socket on the underside of the
Gertboard. To make this process simpler, you can use the plastic standoffs that ship with the
Gertboard to create a more stable surface for the board.
If you want to use a GPIO ribbon cable to make the connection, then you need not only the cable
(https://www.modmypi.com/gpio-accessories/ribbon-cables-and-connectors/raspberry-pi-GPIO-
assembled-rainbow-ribbon-cable-and-connectors), but also a female-to-male converter
(https://www.modmypi.com/gpio-accessories/gpio-header-extenders/26-Pin-GPIO-Shrouded-Box-
Header).
Note: On Jumpers and Gender
With jumper wires, or any connection cable for that matter, the male end of one wire or
cable inserts into the female (recessed) end of another wire or cable. As you might surmise,
this gender-related nomenclature is intimately associated with human reproduction.
Now about power. As long as your Raspberry Pi power supply can give at least 1A, you can power
the Gertboard directly from the Pi. The incoming power from the Pi operates at 5V, and the Gertboard
uses either 5V or 3.3V depending on which components you use.
In practice, we make connections within the Gertboard and between the Gertboard and the Raspbery
Pi by using the straps and jumpers included in the assembled Gertboard kit.
The female-to-female straps enable you to connect pins located in different locations on a board or
between boards. By contrast, shunt-type jumpers connect immediately adjacent pins. I show you what
these connectors look like in Figure 20.4.
FIGURE 20.4 Traditional shunt-type jumpers along with several types of jumper wire straps
(male-to-female, female-to-female, and male-to-male)
Now I’m about to save you a lot of troubleshooting time: Make sure to place a jumper on the two J7
header pins, as shown in Figure 20.5.
FIGURE 20.5 You can add 3.3V of power to the Gertboard components by adding a jumper to
the two pins of header J7. The J7 header has three pins, and the jumper covers the top two when the
Gertboard is viewed “right-side up.”
By adding this jumper to the Gertboard, you allow 3.3V of power to flow to all of the Gertboard’s
components.
Installing the Testing Software
Gert wrote a suite of small C programs that test various Gertboard components. However, we’ve
focused on Python in this book, and I’ll continue that here by using the Python Gertboard code
modules.
Note: For You C Programmers
To be honest, Gert’s C test suite accesses the Gertboard hardware more directly than
does the Python test suite. If you want to download the C code, feel free to do so at
http://is.gd/PuS9FU.
The Python test suite was created by Alex Eames of Raspi.TV. Alex wrote the software in Python 2.7,
but you’ll recall that Raspbian includes both Python 2 as well as Python 3.
To access Alex’s code in its entirety, you need to have the RPi.GPIO and WiringPi libraries
installed. Raspbian, as of September 2012, includes the RPi.GPIO library by default, but you need to
install WiringPi (http://wiringpi.com/) yourself. Take a moment and run the following commands
from a shell prompt on your Raspberry Pi:
Click here to view code image