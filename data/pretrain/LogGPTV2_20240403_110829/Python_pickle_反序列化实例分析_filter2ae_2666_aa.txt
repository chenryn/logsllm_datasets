# Python pickle 反序列化实例分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
之前 SUCTF 出了一题 pickle 反序列化的杂项题，就感觉相当有意思。后来 Balsn
一次性搞了三个，太强了，学到了很多，感谢这些师傅。下文记录了我的学习笔记以及踩过的坑，希望对大家理解 pickle 有点帮助。
这个 PPT 一定要好好看看，非常的通俗易懂。 
## 序列化与反序列化
> Python 提供了两个库，pickle 和 cPickle（其中 cpickle 底层使用 c 语言书写）
>
> 用 pycharm 调试的话需要更改一下代码，pyckle.py 的第 1607 行
    # Use the faster _pickle if possible
    try:
        from _pickle import ( ...  # 这里 _pickle => pickle
### 序列化过程
  * 从对象中提取所有属性（__dict__），并将属性转为键值对
  * 写入对象的类名
  * 写入键值对
### 反序列化过程
  * 获取 pickle 输入流
  * 重建属性列表
  * 根据保存的类名创建一个新的对象
  * 将属性复制到新的对象中
## pickle 是什么？
### 简介
pickle 是一种栈语言，有不同的编写方式，基于一个轻量的 PVM（Pickle Virtual Machine）。
PVM 由三部分组成：
  * 指令处理器 
从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 . 这个结束符后停止。
最终留在栈顶的值将被作为反序列化对象返回。
  * stack 
由 Python 的 list 实现，被用来临时存储数据、参数以及对象。
  * memo 
由 Python 的 dict 实现，为 PVM 的整个生命周期提供存储。
PS：注意下 stack、memo 的实现方式，方便理解下面的指令。
> 当前用于 pickling 的协议共有 5 种。使用的协议版本越高，读取生成的 pickle 所需的 Python 版本就要越新。
>
>   * v0 版协议是原始的 “人类可读” 协议，并且向后兼容早期版本的 Python。
>   * v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。
>   * v2 版协议是在 Python 2.3 中引入的。它为存储 [new-style
> class](https://docs.python.org/zh-cn/3/glossary.html#term-new-style-class)
> 提供了更高效的机制。欲了解有关第 2 版协议带来的改进，请参阅 [PEP
> 307](https://www.python.org/dev/peps/pep-0307)。
>   * v3 版协议添加于 Python 3.0。它具有对 [bytes](https://docs.python.org/zh-> cn/3/library/stdtypes.html#bytes) 对象的显式支持，且无法被 Python 2.x
> 打开。这是目前默认使用的协议，也是在要求与其他 Python 3 版本兼容时的推荐协议。
>   * v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。有关第 4
> 版协议带来改进的信息，请参阅 [PEP 3154](https://www.python.org/dev/peps/pep-3154)。
>
### 指令集
> 本文重点说明 0 号协议，不明白的指令建议直接看对应实现！
    MARK           = b'('   # push special markobject on stack
    STOP           = b'.'   # every pickle ends with STOP
    POP            = b'0'   # discard topmost stack item
    POP_MARK       = b'1'   # discard stack top through topmost markobject
    DUP            = b'2'   # duplicate top stack item
    FLOAT          = b'F'   # push float object; decimal string argument
    INT            = b'I'   # push integer or bool; decimal string argument
    BININT         = b'J'   # push four-byte signed int
    BININT1        = b'K'   # push 1-byte unsigned int
    LONG           = b'L'   # push long; decimal string argument
    BININT2        = b'M'   # push 2-byte unsigned int
    NONE           = b'N'   # push None
    PERSID         = b'P'   # push persistent object; id is taken from string arg
    BINPERSID      = b'Q'   #  "       "         "  ;  "  "   "     "  stack
    REDUCE         = b'R'   # apply callable to argtuple, both on stack
    STRING         = b'S'   # push string; NL-terminated string argument
    BINSTRING      = b'T'   # push string; counted binary string argument
    SHORT_BINSTRING= b'U'   #  "     "   ;    "      "       "      " 
    (
    tR
看个小例子：
    cos
    system
    (S'ls'
    tR.
    ​
     __import__('os').system(*('ls',))
    ​
    # 分解一下：
    cos
    system  =>  引入 system，并将函数添加到 stack
    ​
    (S'ls'  =>  把当前 stack 存到 metastack，清空 stack，再将 'ls' 压入 stack
    t       =>  stack 中的值弹出并转为 tuple，把 metastack 还原到 stack，再将 tuple 压入 stack
    # 简单来说，(,t 之间的内容形成了一个 tuple，stack 目前是 [, ('ls',)]
    R       =>  system(*('ls',))
    .       =>  结束，返回当前栈顶元素
### __reduce__
    import os, pickle
    ​
    class Test(object):
        def __reduce__(self):
            return (os.system,('ls',))
    print(pickle.dumps(Test(), protocol=0))
    ​
    '''
    b'cnt\nsystem\np0\n(Vls\np1\ntp2\nRp3\n.'
    '''
缺点：只能执行单一的函数，很难构造复杂的操作，下文的讲解都是直接写。
## 实例分析
### SUCTF 2019 Guess_game
> 完整源码：
猜数游戏，10 以内的数字，猜对十次就返回 flag。
    # file: Ticket.py
    class Ticket:
        def __init__(self, number):
            self.number = number
    ​
        def __eq__(self, other):
            if type(self) == type(other) and self.number == other.number:
                return True
            else:
                return False
    ​
        def is_valid(self):
            assert type(self.number) == int
    ​
            if number_range >= self.number >= 0:
                return True
            else:
                return False
    # file: game_client.py
    number = input('Input the number you guess\n> ')
    ticket = Ticket(number)
    ticket = pickle.dumps(ticket)
    writer.write(pack_length(len(ticket)))
    writer.write(ticket)
client 端接收数字输入，生成的 Ticket 对象序列化后发送给 server 端。
    # file: game_server.py 有删减
    from guess_game.Ticket import Ticket
    from guess_game.RestrictedUnpickler import restricted_loads
    from struct import unpack
    from guess_game import game
    import sys
    ​
    while not game.finished():
        ticket = stdin_read(length)
        ticket = restricted_loads(ticket)
    ​
        assert type(ticket) == Ticket
    ​
        if not ticket.is_valid():
            print('The number is invalid.')
            game.next_game(Ticket(-1))
            continue
    ​
        win = game.next_game(ticket)
        if win:
            text = "Congratulations, you get the right number!"
        else:
            text = "Wrong number, better luck next time."
        print(text)
    ​
        if game.is_win():
            text = "Game over! You win all the rounds, here is your flag %s" % flag
        else:
            text = "Game over! You got %d/%d." % (game.win_count, game.round_count)
        print(text)
    ​
    # file: RestrictedUnpickler.py  对引入的模块进行检测
    class RestrictedUnpickler(pickle.Unpickler):
        def find_class(self, module, name):
            # Only allow safe classes
            if "guess_game" == module[0:10] and "__" not in name:
                return getattr(sys.modules[module], name)
            # Forbid everything else.
            raise pickle.UnpicklingError("global '%s.%s' is forbidden" % (module, name))
    ​
    ​
    def restricted_loads(s):
        """Helper function analogous to pickle.loads()."""
        return RestrictedUnpickler(io.BytesIO(s)).load()
server 端将接收到的数据进行反序列，这里与常规的 pickle.loads 不同，采用的是 Python
提供的[安全措施](https://docs.python.org/zh-cn/3/library/pickle.html?highlight=__reduce#restricting-globals)。也就是说，导入的模块只能以
guess_name 开头，并且名称里不能含有 __。
最初的想法还是想执行命令，只是做题的话完全不需要这么折腾，先来看一下判赢规则。
    # file: Game.py
    from random import randint
    from guess_game.Ticket import Ticket
    from guess_game import max_round, number_range
    ​
    class Game:
        def __init__(self):
            number = randint(0, number_range)
            self.curr_ticket = Ticket(number)
            self.round_count = 0
            self.win_count = 0
    ​
        def next_game(self, ticket):
            win = False
            if self.curr_ticket == ticket:
                self.win_count += 1
                win = True
    ​
            number = randint(0, number_range)
            self.curr_ticket = Ticket(number)
            self.round_count += 1
    ​
            return win
    ​
        def finished(self):