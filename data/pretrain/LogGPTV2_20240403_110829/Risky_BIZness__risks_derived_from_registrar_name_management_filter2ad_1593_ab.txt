domains, and work with registrars to remediate the problem.
2.4 EPP and the Host Object Renaming Trick
As we have discussed, a multiplicity of registrars contract to register
and manage domain names under the authority of each registry.
To manage the attendant complexity, the provisioning and man-
agement of domain names and nameserver delegation records are
standardized via the Extensible Provisioning Protocol (EPP). Each
registry operator provides an EPP interface to its object reposi-
tory, which allows its contracted registrars to make provisioning
requests (e.g., creating domains, deleting domains, updating their
nameserver records, etc.). Chief among the properties that EPP
guarantees is isolation: a domain registered by one registrar cannot
be modified by another without permission.
EPP is standardized in RFC 5730 [11] and the domain and host
mapping (critical for this paper) is documented in RFCs 5731 [12]
and 5732 [13]. An EPP object repository contains two kinds of
objects: domain objects, which represent the information about
registered domain names; and host objects, which hold information
about nameservers including their host name. However, the two
are inexorably linked through their use of domain names. In EPP
terminology, a domain object (foo.com) is superordinate to indi-
vidual subordinate host objects that make use of that domain (e.g.,
ns1.foo.com or ns2.foo.com). The EPP object mapping standards
include rules to ensure that references between objects are sound,
i.e., you cannot delete an object that is referred to by another. Two
EPP rules are critically important to this paper:
A domain object SHOULD NOT be deleted if subordinate
host objects are associated with the domain object. For exam-
ple, if domain "example.com" exists and host object "ns1.example.com"
also exists, then domain "example.com" SHOULD NOT be
deleted until host "ns1.example.com" has either been deleted
or renamed to exist in a different superordinate domain.
[RFC 5731]
A host name object SHOULD NOT be deleted if the host
object is associated with any other object. For example, if
the host object is associated with a domain object, the host
object SHOULD NOT be deleted until the existing association
has been broken. [RFC 5732]
4Note that in these situations it is key that additional “glue” Address (A) records also
be provisioned to allow example.com’s nameserver names to be resolved. However,
these details are not critical for this paper.
5In principle, while TLS is designed to protect against such attacks, it has been repeat-
edly demonstrated that attackers can use control over a domain’s name resolution to
acquire new valid certificates from certificate authorities.
These consistency rules, combined with the isolation property
protecting registrars from one another, leads to the problem demon-
strated in Figure 1. Registrar A is responsible for the domain foo.com
and wishes to delete it (in this case because its registration has ex-
pired). However, before the domain object can be deleted, registrar
675
IMC ’21, November 2–4, 2021, Virtual Event, USA
Akiwate, Savage, Voelker, and Claffy
This approach prevents hijacking, but has the disadvantage that
the registrar must manage this domain carefully to ensure it is not
itself hijacked.6
Another approach is to rename each unwanted host object to an
entirely new domain that does not exist. This approach minimizes
load and responsibility to the registrar, but does create a potential
risk of future hijacking. However, it also introduces a new com-
plication: it is not possible to create a dangling domain reference
inside an EPP repository. In particular, EPP will not allow a host
object to be renamed subordinate to a non-existent domain object
within the namespace of its repository (i.e., you cannot create an
ns2.foobar.com host object in Verisign’s EPP repository unless the
foobar.com domain object already exists). However, some regis-
trars discovered a loophole. EPP relaxes its rules if the namespace is
external to the EPP repository. Specifically, if the new superordinate
domain is in .biz ( or any other TLD not managed by Verisign),
then the Verisign EPP repository declares no authority over it and
lets the rename take place.
Returning to our example in Figure 1 we see just such a trans-
formation take place. The ns2.foo.com host object is renamed
to ns2.fooxxxx.biz, which EPP allows. Thus, all references to
ns2.foo.com in the EPP repository now point to this host object.
Since the .com TLD nameservers are populated from this repos-
itory it means that a DNS request for any domain (e.g., such as
bar.com) that had previously pointed at ns2.foo.com will now re-
turn NS records for the sacrificial nameserver ns2.fooxxxx.biz
(which refers to an unregistered domain in a different TLD). This
outcome is unintuitive to the operator of bar.com since neither
they, nor their registrar, took any action and yet their NS records
have changed. It is similarly unintuitive to the operator of the .biz
registry who does not participate in this transaction. In particular,
the resultant sacrificial nameserver is not directly visible to the .biz
registry since no objects are created in its registry database, except
insofar as the .biz TLD servers will be forced to handle additional
name service requests for the non-existent domain. Finally, having
completed this transformation, the registrar who initiated the ac-
tion now lacks the authority to “undo” it, both because host objects
referring to an external TLD cannot be modified, and changing
nameserver records for domains (e.g., such as bar.com) managed
by another registrar is outside their direct control.
Finally, it is important to note that the scope of a host object
renaming operation is not a TLD, but is the scope of the collective
namespaces managed by the particular EPP repository (i.e., all TLDs
whose registries are operated by that provider). Thus, in the context
of Figure 2, because Verisign also operates .gov (and .net and .edu),
the domain qux.gov that pointed to ns2.foo.com would also be
silently updated to use the new sacrificial nameserver, while the
domain baz.org (operated by Afilias) would be unchanged since it
belongs to a separate EPP repository. As a result, even though both
qux.gov and baz.org initially delegated to the same nameserver
ns2.foo.com, the final nameserver delegation after foo.com expires
is dependent on the EPP repository. Note, it is this scoping property
that allows domains under restricted TLDs (e.g., .gov and .edu
6Ironically, it appears that dummyns.com was abandoned for this purpose and is
now being operated to hijack nameserver traffic for all domains that pointed to it.
676
Figure 1: Nameserver renaming in EPP as a mechanism to
bypass domain deletion constraints
A must first delete any subordinate host objects (ns1.foo.com and
ns2.foo.com). This step is straightforward for ns1.foo.com, but
ns2.foo.com is referred to by the domain object bar.com which
has delegated nameservice to that host object. Unfortunately, since
bar.com is under the control of registrar B, EPP’s protections pre-
vent registrar A from changing that delegation.
However, there is a workaround. As per RFC 5731, registrar A
can rename the host object (ns2.foo.com), which it controls, to
something in another domain that it also controls. As a result, the
host object is no longer subordinate to foo.com.
For example, for a time one registrar renamed their unwanted
nameservers to {randomstring}.dummyns.com, where dummyns.com
was a “sink” domain that they operated expressly for this purpose.
foo.comns2.foo.comns1.foo.comns1.bar.combar.comRegistrar ARegistrar BDomain ObjectHost ObjectSubordinate Relationship Domain ObjectHost ObjectDelegated Nameserver(a) Initial EPP Statefoo.comns2.foo.comns1.foo.comns1.bar.combar.comfoo.com expires.(b) foo.com Deletion Blockedfoo.comns2.fooxxxx.bizns1.foo.comns1.bar.combar.comHost Object Renamed(c) Host Object Renamedns2.fooxxxx.bizns1.bar.combar.comsacrificial nameserver(d) Final EPP StateRisky BIZness
IMC ’21, November 2–4, 2021, Virtual Event, USA
Figure 2: Handling of domain expiration in different EPP repositories. The renaming operation affects all TLDs supported by
a registry’s EPP repository, but other EPP repositories are unaffected by it.
operated by Verisign) to also be affected by this issue in spite of the
fact that they do not use registrars.
In the remainder of this paper we provide a comprehensive
assessment of the prevalence of this practice, the scope of the ex-
posure, exploitation of the exposure, and efforts to remediate this
practice.
since renaming only affects domains in the same EPP repository.
For example, a sacrificial nameserver cannot affect domains
in .com and .info since it would span two different registry
repositories, namely Verisign and Afilias.
We use these properties as the basis for discovering sacrificial
nameservers.
3 IDENTIFYING SACRIFICIAL
NAMESERVERS
In this section we describe our methodology for identifying sac-
rificial nameservers. Using nine years of TLD zone files, we first
generate a candidate set of nameservers that match the proper-
ties expected of newly created sacrificial nameservers. From this
candidate set, we then identify renaming idioms used by various
registrars over time and the nameservers in the zone files that
match these idioms.
3.1 Properties of Sacrificial Nameservers
Based on the EPP constraints that lead to the creation of sacrificial
nameservers, we expect them to have the following three properties
when originally created:
(1) Visibility: Sacrificial nameservers are a result of renaming host
objects by registrars via EPP at the registry level (typically with
domain owners unaware of these changes). As such, we only ex-
pect to see sacrificial nameservers as authoritative nameservers
for domains at the level of the registry TLD servers (parent
zone) and not in the authoritative nameservers configured by
the domain owner (child zone).
(2) Unresolvability: When created, sacrificial nameservers are
simply names in a registry database, and as such are not in-
tended to refer to operational nameservers that actively resolve
delegated domains. As a result, we expect sacrificial name-
servers to be “unresolvable” when created (i.e., we expect the
domains delegated to sacrificial nameservers to be lame dele-
gated). Even if a sacrificial nameserver uses a sink domain, we
expect it to be lame delegated assuming the registrar does not
want their nameservers to handle queries for domains that they
are not authoritative for and hence cannot resolve.
(3) Single Repository: Since different registries operate different
EPP repositories, the renaming of a host object should only
affect domains hosted in the same EPP repository. As a result,
the domains that delegate to sacrificial nameservers cannot span
multiple EPP repositories (maintained by different registries)
3.2 Finding Sacrificial Nameservers
The visibility property of sacrificial nameservers means that the
TLD zone files should capture their creation via renaming. As a
result, the primary data set we use is the zone file data in CAIDA-
DZDB [5].7 The data set covers nine years of daily snapshots of zone
files from April 2011 through September 2020. As of September 2020,
CAIDA-DZDB contained zone files for over 1250 zones. These 1250
zones include 530.4M domains and 20.8M nameservers spanning
the legacy gTLDs, the new generic TLDs (ngTLDs), and the .us,
.nu, and .se country-code TLDs (ccTLDs). While the zone data
was obtained through a combination of signed access agreements
for early years of data, the ICANN Centralized Zone Data Service
(CZDS) [14], and publicly available zone data, CAIDA now provides
uniform research access to the DZDB data set used in this paper
both interactively and via a programmatic API.
To find sacrificial nameservers, we first narrow the full set of
roughly 20M initial nameservers in CAIDA-DZDB to a set of around
300K unresolvable nameservers. We then look for patterns in the
names of the unresolvable nameservers that reflect renaming idioms
registrars have used to create sacrificial nameservers, resulting in
a refined candidate set. As such, our ability to identify sacrificial
nameservers with confidence is contingent on their use of either a
unique identifier in the renaming scheme (e.g., dropthishost) or
the use of the original nameserver in the sacrificial nameserver (e.g.,
ns2.foo.com renamed to ns2.fooxxxx.biz).8 As a consequence, we
are conservative in our estimate of sacrificial nameservers.
We then manually confirmed the registrar renaming idioms we
discover, and then went back and systematically matched them to
the entire longitudinal zone file data set to create our final set of
sacrificial nameservers. Of the roughly 300K unresolvable name-
servers, we find more than 200K nameservers are sacrificial. The
following subsections describe each of these steps in more detail.
7CAIDA-DZDB data set is a clone of the DNS Coffee data set used in Akiwate et al. [2].
8A sacrificial nameserver with a completely random string is hard to disambiguate
from typos with absolute certainty.
677
Verisign EPP Repositoryfoo.comns2.foo.comns1.foo.comns1.qux.govqux.govfoo.com expires.Verisign EPP Repositoryns2.fooxxxx.bizns1.qux.govqux.govsacrificial nameserverAfilias EPP Repositoryns2.foo.comns1.baz.orgbaz.orgAfilias EPP Repositoryns2.foo.comns1.baz.orgbaz.org(a) Handling of foo.com expiration in different EPP repositories(b) Final EPP Statelame delegationIMC ’21, November 2–4, 2021, Virtual Event, USA
Akiwate, Savage, Voelker, and Claffy
3.2.1 Unresolvable Nameservers. Our first step collects nameservers
that are unresolvable when they are first referenced by domains
into an initial candidate set. Recall that registrars create sacrificial
nameservers to remove dependencies on host objects in a registry
database. For this purpose, the sacrificial nameserver is just a name
in the database, and is not intended to refer to a domain that resolves
to a host with an operational nameserver. Sacrificial nameservers
typically either refer to a sink domain controlled by the registrar,
or to a randomly generated name in another registry. In either case,
we expect the sacrificial nameserver to be unresolvable at the time
it is created,9 and thus the domains that delegate to it become at
least partly lame delegated at that moment.
Based on that observation, our approach is to identify all name-
servers that are referenced by some domain in the zone files before
the nameserver itself first became resolvable (if ever). To determine
the resolvability of a nameserver we use a simplified version of the
static resolution methodology from Akiwate et al. [2] for identi-
fying lame delegations. In essence, we use the daily snapshots of
the zone files to derive the date ranges for when each nameserver
has a valid static resolution path (e.g., via glue records in the zone
files). When a nameserver is referenced by any domain for the first
time, and the nameserver is unresolvable at that time, then we add
the nameserver to the candidate set. Using this method reduces
the initial 20 M nameservers in the zone files to a candidate set of
312,328 nameservers.
Identifying Patterns. Our next step identifies unique patterns
3.2.2
among the candidate nameservers that reveal renaming idioms
used by registrars. These idioms reflect patterns in the use of sink
domains for sacrificial nameservers, such as LAMEDELEGATION.ORG,
or patterns in the generation of random names, such as using the
prefix DROPTHISHOST.
To discover patterns in nameserver names we built a tool that,
given a list of domain names as input, looks for common substrings
across them. We applied it to the set of roughly 300K candidate
nameservers, revealing the most common substrings among name-
servers in the candidate set. We then manually examined the output
from the tool and identified nine such patterns. For each, we manu-
ally confirmed that the nine patterns consistently reflect sacrificial
nameserver renaming idioms.
During this analysis we discovered two naming patterns used for
testing purposes. Nameservers such as EMT-NS1.EMT-T-407979799-
1575645880157-2-U.COM and other nameservers with the EMT- pre-
fix are one such pattern. Similar to our reaching out to registrars to
confirm their renaming practices, reaching out to a registry con-
firmed the nature of these nameservers. We removed 28, 614 such
test nameservers from the candidate set.
3.2.3 Original Nameserver Matching. Next we use a host name
matching tool on the remaining candidate nameservers. The intu-
ition is that some renaming idioms generate names for sacrificial
nameservers partly off the nameserver being renamed. To take ad-
vantage of this pattern, we first need to identify the nameservers
whose renaming led to the creation of the sacrificial nameservers.
To that end, we look at the nameserver history for domains
delegated to each of the candidate nameservers. Specifically, we
look at the day just before the candidate nameserver was created:
the nameserver that was renamed would last show up in the zone
file the day before we first see it as a sacrificial nameserver. If the
two nameservers (original and renamed) match our criteria, we
then classify the renamed server as a sacrificial nameserver.
For example consider ns2.internetemc1aj2kdy.biz, a candi-
date nameserver and the domain whitecounty.net that delegates
to it. The history for the domain10 shows that the candidate name-
server first appears on July 1st, 2019. We then look at the name-
server history for the domain (whitecounty.net) to find name-
servers last seen on June 30th, 2019. There is one nameserver
ns2.internetemc.com that matches our criteria. Next, we check
if the registered domain of the original nameserver is a substring
of the sacrificial nameserver registered domain. In this example,
internetemc is a substring of internetemc1aj2kdy, and we con-
clude that the original nameserver ns2.internetemc.com was re-
named to ns2.internetemc1aj2kdy.biz.
For all the candidate nameservers that pass this match test, we
identify the registrar for the nameserver domain at the time of
renaming (Enom for internetemc.com in the example above) using