Lemma 3.4 (Collision resistance for Construction 3.3 [11]). Assuming the hardness of the
discrete logarithm problem, with respect to a group G, Construction 3.3 is collision resistant,
with respect to G.
The above construction is also extractable with respect to Deﬁnition 2.6 and 0-more ex-
tractable, where both properties follow from the t-KEA assumption. In the following lemma we
prove that Construction 3.3 is not 1-more extractable.
Lemma 3.5 (Construction 3.3 is not 1-more extractable). Let H∗ be the hash function family of
Construction 3.3, with respect to a group generation algorithm G. Then, assuming the diﬃculty
of the discrete logarithm problem for G (Deﬁnition A.2), H∗ is not 1-more extractable.
In the introduction, we argued that the hash function family of Construction 3.3 is highly
malleable, and thus not 1-more extractable, under the discrete logarithm assumption. We for-
malize the proof in Section B of the Appendix.
4 A non-malleable code against split-state tampering
In this section, we present our construction of non-malleable codes against split-state tampering
functions. Our construction requires (i) a one-time, authenticated, symmetric-key encryption
scheme that is also leakage resilient, and (ii) a 1-more ECRH.
Construction 4.1. Let Hk = (Gen, h) be a hash function family, and let (KGen, E, D) be a
symmetric encryption scheme. We deﬁne a coding scheme (Init, Enc, Dec), as follows:
11
• Init(1k): sample z ← Gen(1k) and set Σ = z.
• Enc(Σ,·): let s be the input to the encoder. The encoder samples sk ← KGen(1k), r $←
. In particular, the left part of the
{0, 1}poly(k), e ← Esk(s), and outputs
r, sk, e, hz(r, sk)
codeword is (r, sk), while the right part is (e, hz(r, sk)).
(cid:16)
(cid:17)
• Dec(Σ,·): let (r, sk, e, v) be the input to Dec. If hz(r, sk) = v, the decoder outputs Dsk(e),
otherwise, it outputs ⊥.
Since the input message to hz, sk, possesses adequate entropy, it is possible to omit r in the
above construction, still for the sake of clarity we stick to the formulation provided in Deﬁnition
3.1 and we use independent randomness for hashing sk.
In what follows we prove that Construction 4.1 is strongly non-malleable against Fss (Deﬁ-
nition 2.7), assuming that for any f = (f1, f2) ∈ Fss, f1, f2, aﬀect (r, sk) and (e, v), respectively,
i.e., we assume the strings r||sk, e||v, are of length ν/2, where ν is the length the codeword.7
Intuition for the construction. Before formally analyzing the construction, we ﬁrst discuss
the ideas on why our construction is secure. Consider a split-state tampering function (f1, f2),
where f1 is applied to (r, sk), and f2 is applied to (e, v). To prove non-malleability, roughly
speaking, we need to simulate the tampering experiment without knowing the underlying mes-
sage distribution. A ﬁrst idea is to simulate the left side with (r(cid:48), sk(cid:48)), and the right side with
(e(cid:48) = Esk(cid:48)(0), v(cid:48) = h(r(cid:48), sk(cid:48))), where r(cid:48), sk(cid:48) is fresh randomness and key, respectively, hoping to
infer the ﬁnal outcome of the tampering experiment correctly due to the semantic security of
the encryption.
There are several subtleties in doing so. First and foremost, the simulator needs to be able
to produce the decoding of the codeword in case v(cid:48) is modiﬁed by f2. This is where 1-more
extractability will be used to obtain a valid pre-image, (ˆr, ˆsk). It might be very tempting to
conclude the simulation by outputting the decrypted message D ˆsk(ˆe) (where ˆe is the modiﬁed
codeword). However, this may not be consistent with the real-world experiment, as the values
produced by the extractor (ˆr, ˆsk) might not be consistent with the output of f1. To check
consistency, the simulator would want to check the output of f1, yet such a simulation would
be impossible to prove since it depends on sk, where the indistinguishability between e(cid:48) and e
does not hold in the presence of it. To go around this, we use a similar technique to Liu and
Lysyanskaya [51], who observed that, the equality test between f1(ˆr, ˆsk) and f1(r, sk) can be
performed via the leakage of a universal hash (cf. Deﬁnition A.8) with log2 k bits of output.
Putting this to our setting, by requiring the encryption (KGen, E, D) to be a one-time semantically
secure, symmetric-key authenticated encryption, that is secure under 2k + log2 k bits of leakage,
is suﬃcient to facilitate the simulation. We also note that the case when v(cid:48) is not modiﬁed by
f2 can be easily taken care of by the security of the authenticated encryption: as long as the
key is not modiﬁed, any attempt to modify the ciphertext will result in an invalid ciphertext.
Theorem 4.2. Let k be the security parameter, Hk be a 1-more extractable hash function family
that outputs β(k) bits, β(k) = poly(k), and let (KGen, E, D) be an authenticated, semantically
secure, symmetric encryption scheme, that is leakage resilient against Lλ, λ(k) = ω(log k)+β(k).
Then, Construction 4.1 is strongly non-malleable against Fss.
Proof. Following the deﬁnition of strong non-malleability (Deﬁnition 2.3), we need to prove that
s0 ) ≈c (Σ, Tamperf,Σ
for any f = (f1, f2) ∈ Fss and any pair of messages s0, s1, (Σ, Tamperf,Σ
s1 ),
where Σ ← Init(1k). We introduce a series of hybrids (see Figure 1), and the proof can be
derived directly from the indistinguishability between adjacent hybrids. We ﬁrst explain the
hybrids and deﬁne the notation used in those experiments.
• Given a tampering function f = (f1, f2) and message s, the ﬁrst experiment, Expf,Σ,s
, is
0
exactly the original tampering game, Tamperf,Σ
, of Deﬁnition 2.3.
s
7This can always be achieved using padding.
12
• In Expf,Σ,s
1
, we slightly modify the previous hybrid by checking whether the function f2
has modiﬁed the hash value v. Intuitively, by the collision resistance property of the hash
function family Hk, if f2 does not modify v, then the attack produces a valid codeword, ˜c,
only if the parts of ˜c that constitute the pre-image of ˜v, are kept intact, i.e., (r, sk) = (˜r, ˜sk),
otherwise there is a collision. In addition, assuming sk = ˜sk, we have that, if ˜e (cid:54)= e, then
the output of the decoder should be ⊥, otherwise we break the authenticity under leakage
(v is considered as leakage over sk) property of the encryption scheme. On the other hand,
if v (cid:54)= ˜v, the output of the current experiment is produced as in Expf,Σ,s
.
0
• In Expf,Σ,s
2
, we modify the previous experiment for the case in which v is modiﬁed: instead
of using the real decoding procedure, we use the extractor of the hash function family, to
extract a pre-image (ˆr, ˆsk), for ˜v, and then compute the output, ˜s, with respect to that pre-
image. However, we cannot output ˜s directly as we still need to check consistency with the
output of f , i.e., we need to check whether (ˆr, ˆsk) is equal to (˜r, ˜sk). The indistinguishability
between the current hybrid and the previous one, follows by the 1-more extractability
property of the hash function, which, informally, guarantees that if ˜c is a valid codeword,
then EH
Av
produces a valid pre-image for ˜v, with overwhelming probability. If the extracted
pre-image is consistent with the one output by f , the current hybrid outputs a non-bottom
value, equal to the one output by the decoding procedure of Expf,Σ,s
. On the other hand,
if (ˆr, ˆsk) (cid:54)= (˜r, ˜sk), Lemma 3.2 guarantees that (˜r, ˜sk) is not a valid pre-image for ˜v, with
overwhelming probability, and the current experiment properly outputs ⊥. Finally, it is
straightforward to see, that if ˜v is invalid, both experiments output ⊥.
In order to deﬁne the extractor EH
Av
auxAv , with respect to hz, v, e, and f = (f1, f2). Formally, we deﬁne the following:
1. (Deﬁne Av): Av(hz, v, auxAv ) := ([f2(auxAv , v)]2, st), where
, we ﬁrst need to deﬁne Av,
, introduced in Expf,Σ,s
1
2
st = (f2(auxAv , v), auxAv , v).
2. (Choose auxiliary info for Av): set auxAv = e.
3. (Existence of the extractor, EH
Av
auxAv , by the 1-more extractability property of Hk, there exists an extractor EH
Av
hardwired auxiliary info, auxE , that computes (ˆr, ˆsk) ← EH
Av
is used in Expf,Σ,s
, and auxiliary input, auxE ): Given Av and
, with
(hz, v). The extractor EH
Av
and all subsequent experiments (for brevity we denote it as E).
2
We remind, that, for any vector v, [v]i, denotes the i-th coordinate of v.
• In Expf,Σ,s
3
, we modify the consistency check procedure, so that we access the right part
of the codeword, only through leakage. Instead of checking consistency using directly the
output of f1, we do the check using a random hash function, ¯h, from a universal family
(cf. Deﬁnition A.8), applied to the output of f1, plus one more bit, that indicates whether
f1 has modiﬁed its input. Here, the hash v is computed through leakage over sk. The
experiment diﬀers from the previous one only when there is a collision against ¯h, which
happens with negligible probability, as ¯h is a universal hash function.
Below, we formalize the above procedure: let ¯h ← ¯Hλ−1 be a random hash function from
a universal hash function family, that outputs λ − 1 bits. We deﬁne the function g¯h,hz (·)
as follows:
(cid:40)
g¯h,hz (x, y) =
(0, ¯h(f1(x, y)), hz(x, y)),
(1, ¯h(f1(x, y)), hz(x, y)),
if f1(x, y) = (x, y),
if f1(x, y) (cid:54)= (x, y).
We view g¯h,hz as a leakage function that outputs λ = ω(log k) + β(k) bits in total. The
experiment will then use the leaked value to check consistency, instead of using the whole
string output by f1. Concretely, we introduce the random variable b, which depends on the
output of the leakage function, and we modify Expf,Σ,s
, so that the condition “If (b = 1)”,
2
13
:
0
Expf,Σ,s
(r, sk, e, v) ← Enc(s), c = (r, sk, e, v)
(˜r, ˜sk) ← f1(r, sk), (˜e, ˜v) ← f2(e, v)
˜c = (˜r, ˜sk, ˜e, ˜v)
˜s = Dec(˜c)
:
1
Expf,Σ,s
(r, sk, e, v) ← Enc(s)
(˜r, ˜sk) ← f1(r, sk), (˜e, ˜v) ← f2(e, v)
˜c = (˜r, ˜sk, ˜e, ˜v)
If v = ˜v :
If (r, sk, e) = (˜r, ˜sk, ˜e) : set ˜s = same∗
Else : set ˜s = ⊥
If v (cid:54)= ˜v :
Output same∗ if ˜c = c, and ˜s otherwise.
Set ˜s = Dec(˜c)
Output ˜s.
:
2
Expf,Σ,s
(r, sk, e, v) ← Enc(s)
(˜r, ˜sk) ← f1(r, sk), (˜e, ˜v) ← f2(e, v)
If (r, sk, e) = (˜r, ˜sk, ˜e) : set ˜s = same∗
Else : set ˜s = ⊥
If v = ˜v :
If v (cid:54)= ˜v :
(ˆr, ˆsk) ← E(hz, v)
set ˜s = ⊥
If (ˆr, ˆsk) = (˜r, ˜sk) :
If hz(ˆr, ˆsk) = ˜v, set ˜s = D ˆsk(˜e)
Output ˜s.
:
3
Expf,Σ,s
sk ← KGen(1k), e ← Esk(s)
r $← {0, 1}poly(k), ¯h ← ¯Hλ−1
(lmod, lhash, v) ← g¯h,hz (r, sk) , (˜e, ˜v) ← f2(e, v)
b ← (lmod = 0 ∧ e = ˜e)
If v = ˜v :
If v (cid:54)= ˜v :
If (b = 1) : set ˜s = same∗
Else : set ˜s = ⊥
(ˆr, ˆsk) ← E(hz, v)
set ˜s = ⊥
If ¯h(ˆr, ˆsk) = lhash :
If hz(ˆr, ˆsk) = ˜v, set ˜s = D ˆsk(˜e)
Output ˜s.