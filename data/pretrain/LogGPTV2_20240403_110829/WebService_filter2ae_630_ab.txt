# 标准操作程序 (SOP) 1.2：Web服务调用及测试

## 1.2 SOAP 1.2 协议示例
### 请求
```http
POST /WebService.asmx HTTP/1.1
Host: localhost
Content-Type: application/soap+xml; charset=utf-8
Content-Length: length
```

### 响应
```http
HTTP/1.1 200 OK
Content-Type: application/soap+xml; charset=utf-8
Content-Length: length
```
这个仅支持本地测试，对外部不开放。

### 请求
```http
POST /WebService.asmx/Power HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded
Content-Length: length
num=string
```

### 响应
```http
HTTP/1.1 200 OK
Content-Type: text/xml; charset=utf-8
Content-Length: length
int
```
这里演示了`SOAP 1.2`协议的发送过程。可以通过复制`SOAP 1.2`包来发送数据请求，并查看返回的web服务接口结果。

**注释**:
CXF框架与Spring集成时，默认会有一个`services`路径，其中存放了接口文档说明。基于C#的ASP.NET编写的接口信息页就是当前接口的位置，因此只需查找asm文件进行测试。

## 0x3 服务接口手工测试思路
WSDL提供了标准的解析结构，通过学习其描述结构并尝试自己解析和编写合法的数据包，可以进行手工构造。以下是WSDL的主要标签及其功能：
- `definitions`: 根元素，定义命名空间。
- `types`: 描述传入参数类型和输出结果类型。
- `imports`: 在当前WSDL文档中引用其他WSDL文档中的命名空间。
- `message`: 定义需要传递的数据。
- `portType`: 定义web服务的抽象接口。
- `operation`: 描述服务支持的操作。
- `binding`: 将一个`portType`映射到一组具体的协议。
- `service`: 相关端点的集合。

WSDL文档可划分为两部分：抽象定义和具体定义。以下是一个例子的解析步骤：
1. `service`标签描述了服务名称、支持的协议以及访问地址。
2. 绑定类型引用了`Type`值，并使用`operation`标签将`portType`中定义的操作与SOAP请求绑定。
3. `input`和`output`引用了消息标签。
4. `PART`标签引用了消息下的参数类型。

SOAP 1.2协议格式包括：
- `Envelope`: XML文档标识，包含命名空间和编码详情。
- `Header`: 包含标题信息。
- `Body`: 包含请求和响应信息。
- `Fault`: 错误和状态信息。

通常构造的SOAP请求数据包不包含`Fault`部分，重点在于`Body`部分。例如：
```http
POST /calculator HTTP/1.1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:74.0) Gecko/20100101 Firefox/74.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Connection: close
Cookie: csrftoken=P2JwVlLK3L8PaHlSMJ927Sj7JgrIwBi4S82j9I25ZIJx3Vytf3c72Qi9Ehc75VXs; Hm_lvt_b393d153aeb26b46e9431fabaf0f6190=1576593337,1576724740,1577006110,1578371563
Upgrade-Insecure-Requests: 1
SOAPAction: 
Content-Type: text/xml;charset=UTF-8
Host: 127.0.0.1:8081
Content-Length: 352
```
构造时只需关注输入参数部分，确定方法的命名空间后即可写出SOAP数据包。

## 0x4 工具实现半自动化测试
手工测试容易出错，建议理解原理后使用工具生成并调整数据包。常用的工具有Burp Suite及其插件`wsdler`。测试流程如下：
1. 访问接口URL + `?wsdl`获取SOAP结果。
2. 解析结果并发送重放，注释参数部分进行接口测试（如SQL注入、未授权等）。

**小技巧**:
- 若无法访问WSDL文件，可根据接口名推测方法名并根据报错信息确定命名空间。
- 全自动化测试可采用AWVS或结合crawgo+awvs。

## 0x5 总结
基于SOAP协议的接口攻击技术历史悠久且广泛应用于各种语言开发的程序中。掌握接口后，攻击面测试将变得宽广。未来将继续总结更多实例和技巧。

## 0x6 参考链接
- [Web Service 渗透测试从入门到精通](https://www.anquanke.com/post/id/85910)
- [WebService到底是什么？](https://www.jianshu.com/p/49d7997ad3b7)
- [WebService学习总结](https://www.cnblogs.com/pony1223/p/7847323.html)
- [搭建调用 WebService 的 ASP.NET 网站 （VS2010, C#)](https://www.cnblogs.com/xunzhiyou/p/4934500.html)
- [使用apache CXF和maven开发Web Service](https://www.cnblogs.com/holbrook/archive/2012/12/12/2814821.html)
- [CXF发布webService（一）](https://lanjingling.github.io/2015/10/16/cxf-webservice-1/)
- [WSDL结构简单分析](https://wenku.baidu.com/view/1579bfedb8f67c1cfad6b89d.html)
- [从几道CTF题看SOAP安全问题](https://blog.csdn.net/qq_27446553/article/details/81362341?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4)
- [快速入门](https://juejin.im/post/5aadae4bf265da238a303917)