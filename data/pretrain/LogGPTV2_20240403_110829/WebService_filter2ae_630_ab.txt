**SOP1.2**
    POST /WebService.asmx HTTP/1.1
    Host: localhost
    Content-Type: application/soap+xml; charset=utf-8
    Content-Length: length
          int
    HTTP/1.1 200 OK
    Content-Type: application/soap+xml; charset=utf-8
    Content-Length: length
          int
**1.3 HTTP**
这个仅是支持本机来测试,对外部是不开放的。
    POST /WebService.asmx/Power HTTP/1.1
    Host: localhost
    Content-Type: application/x-www-form-urlencoded
    Content-Length: length
    num=string
    HTTP/1.1 200 OK
    Content-Type: text/xml; charset=utf-8
    Content-Length: length
    int
这里我们演示下`soap1.2`协议的发送过程。
我们可以直接复制`SOAP12`的包发送数据来进行请求。
可以看到这里返回了webservice
    9
这个接口的结果。
**PS:**
CXF框架整合Spring发布的时候默认会有个`services`路径,里面存放了接口的文档说明,这个时候我们就可以获取所有的EndPoint了,笔者当时遇到的就是这个情况。
基于C#的ASP.NET编写的接口信息页就是当前接口的位置,所以我们只要找asm文件来测试就好。
## 0x3 服务接口手工测试思路
下面我们就来讲一下WSDL到底提供了什么样的解析标准，如何去进行手工构造。
我们首先需要学习下WSDL的描述结构，并尝试自己去解析，编写合法的数据包。
首先WSDL的组成标签:
> definitions 根元素,其主要作用是提供了targetNamespace的命名空间
>
> types 主要是用来描述传入的参数类型，和输出的结果类型，被信息定义使用
>
> imports 用于在当前的WSDL文档中使用其他WSDL文档中指定的命名空间的定义元素,一般用在模块化多文件WSDL文档中使用。
>
> message 抽象定义了两个信息(需要传递的数据),可以理解为相当于types的接口。
>
> portType 定于了web服务的抽象接口，没有定义实现
>
> operation 服务支持操作的抽象描述，同时包含input和output则表明该操作是一个请求、响应模式。
>
> binding 将一个portType映射到一组具体的协议，描述特定端口类型的具体协议和数据规范。
>
> service 相关端点的集合，包括其关联的接口、操作、信息等。
由此我们可以将WSDL文档划分为两部分:
> 1.抽象定义
>
> 2.具体定义
下面我们就以这个例子来解读下怎么解析:
1.
首先这里`service`标签描述了服务名称`WebService`,`port
name`描述了可以支持soap协议,然后提供了访问地址(EndPoint)。这里可以看到每种协议都有自己的绑定。
2.
定位相关的绑定，我们可以看到这里绑定的类型引用了Type值得类型，然后使用`operatation`标签将`porrtType`中定义的operation同SOAP请求绑定，定义了操作名称`soapAction`
3.
这里`input`、`output`引用了``标签
4.
这里`PART`标签,引用messafg下的参数类型
然后我们再来看一个SOAP1.2协议的格式:
1.1的话直接去掉12即可。
> Envelope: 标识XML文档，具有名称空间和编码详细信息。  
>  Header：包含标题信息，如内容类型和字符集等。  
>  Body：包含请求和响应信息。  
>  Fault：错误和状态信息。
而平时我们构造的SOAP请求数据包,不包含Fault部分(返回的SOAP出错就会有),解析的重点是在Body部分
    POST /calculator HTTP/1.1
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:74.0) Gecko/20100101 Firefox/74.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Connection: close
    Cookie: csrftoken=P2JwVlLK3L8PaHlSMJ927Sj7JgrIwBi4S82j9I25ZIJx3Vytf3c72Qi9Ehc75VXs; Hm_lvt_b393d153aeb26b46e9431fabaf0f6190=1576593337,1576724740,1577006110,1578371563
    Upgrade-Insecure-Requests: 1
    SOAPAction: 
    Content-Type: text/xml;charset=UTF-8
    Host: 127.0.0.1:8081
    Content-Length: 352
             gero et
             sonoras imperio
所以我们构造的时候只需要关注输入参数部分`complexType`即可,将一些值写入到SOAP的body即可。
我们确定下方法的命名空间然后根据参数类型就可以写出上面的SOAP数据包了。
## 0x4 工具实现半自动化测试
手工测试的时候其实很容易出错，因为SOAP1.1与SOAP1.2协议形成的HTTP协议并不相同，所以我更推荐大概理解其原理，然后让工具生成，然后我们在手工调整，来测试和发现，比如未授权漏洞，当我们没有传入值时，或者省略参数时，只调用方法时，默认会返回所有结果之类的
我平时使用的话应该是Burp比较多,然后导入`wsdler`这个插件。
这里简要说说自己的测试流程:
1.首先我们访问接口URL+`?wsdl`  
2.获取解析的SOAP结果，存在两个方法  
3.发到重放，注释部分说明参数部门，然后进行正常的接口测试，SQL注入、未授权等。
**PS:**
简单说一下一些小技巧,有些服务器可能访问不到WSDL文件，这个时候我们可以根据接口名字`GetEnterpriseTransactionResult`然后推测出方法名:`getEnterpriseTransaction`
然后根据返回的报错信息确定命名空间。
还有全自动化测试可以采用AWVS,这个我没测试过效果，我个人感觉应该很棒,或者crawgo+awvs,到时候笔者将挖洞框架建立后，会进行尝试添加这类型漏洞的检测，欢迎师傅们找我一起探讨挖洞技巧，主要是SRC吧。
## 0x5 总结
基于SOAP协议的接口攻击技术，其实历史比较悠久的了，并且该技术运用到各种语言开发的程序中，在2017年的OWASP TOP
10也出现了它的身影,[Penetration Testing with SOAP Service and
Mitigation](https://blog.securelayer7.net/owasp-top-10-penetration-testing-soap-application-mitigation/),可以看到一旦掌握了接口，那么攻击面的测试就可以变得很宽广，后面我遇到更多实例的话，我再进行一些骚操作的总结。
## 0x6 参考链接
[Web Service 渗透测试从入门到精通](https://www.anquanke.com/post/id/85910)
[WebService到底是什么？](https://www.jianshu.com/p/49d7997ad3b7)
[WebService学习总结](https://www.cnblogs.com/pony1223/p/7847323.html)
[搭建调用 WebService 的 ASP.NET 网站 （VS2010,
C#)](https://www.cnblogs.com/xunzhiyou/p/4934500.html)
[使用apache CXF和maven开发Web
Service](https://www.cnblogs.com/holbrook/archive/2012/12/12/2814821.html)
[CXF发布webService（一）](https://lanjingling.github.io/2015/10/16/cxf-webservice-1/)
[WSDL结构简单分析](https://wenku.baidu.com/view/1579bfedb8f67c1cfad6b89d.html)
[从几道CTF题看SOAP安全问题](https://blog.csdn.net/qq_27446553/article/details/81362341?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4)
[快速入门](https://juejin.im/post/5aadae4bf265da238a303917)