(cid:2)
Xj∈Xc
For example, by applying Equation 12 to the Beta UG in
Figure 1, we have
1 − (1 − X1)(1 − X4) ≥st Y ≥st X1X3X5
with Ep = {(s, a), (a, b), (b, t))}, Ec = {(s, a), (s, b)}, and
Y is the reliability polynomial given in Equation 7.
4) Let E denote the expected value of a random variable.
Using the fact that Pi and Qi are independent of Xi, we
have
EY = (1 − EXi)EPi + EXiEQi
(13)
In words, for all Xi ∈ X , EY is a linear function of
EXi with the linear coefﬁcient (EQi − EPi). If Y is
the reliability polynomial of a monotone Beta UG, then
EQi − EPi ≥ 0; more generally
i ≥ EY
k
EQ
k ≥ EP
k
i
for k = 1, 2, . . .. Similar to Equation 12, we also have
⎛⎝1 −
E
(cid:2)
Xj∈Xc
⎞⎠k
(1 − Xj)
≥ EY
k ≥ E
(14)
⎞⎠k
Xj
.
⎛⎝ (cid:2)
Xj∈Xp
(15)
92
To develop some intuition for Hypothesis 1, we start with
the basic result that if X1 and X2 are Betas, then accord-
ing to [6] the product X1X2 is approximately Beta. Hence
(1−X1)(1−X2) is also approximately Beta (since 1−X1 and
1− X2 are Betas) but that means X1 + X2− X1X2 is approxi-
mately Beta. Notice also that X1X2 and X1 + X2− X1X2 are
reliability polynomials of the simplest series and the simplest
parallel network, respectively. Therefore, one can imagine
the reliability polynomial of any series-parallel network is
approximately Beta, since it relies on the recursive series-
parallel construction of smaller components whose reliability
polynomials are approximately Beta. Readers who are in-
terested in rigorous treatment of approximation are directed
to Appendix B and C where we discuss several statistical
approaches to measure closeness between pdfs and distance
between cdfs as well as how they can be used to evaluate
Hypothesis 1. We conclude this section with several remarks.
Remark 1 From the statistics literature, the goodness of ap-
proximation does not come as a big surprise. Previous works
[6] [12] [9] have discovered functions of Betas that can be
well-approximated by a single Beta distribution after proper
rescaling (if needed). In particular, the product distribution
Y = X1X2 . . . Xr studied in [6] is the reliability of a special
Beta UG where all vertices are connected in series. If the
parameters of Xi’s satisfy a linear condition, then Y was
proven to be exactly Beta-distributed [10]. Our observation
in Hypothesis 1 is made under a much broader setting.
Remark 2 Hypothesis 1 does not hold for reliability polyno-
mials of nonmonotone Beta UGs. A simple counterexample is
Y = (1−X1)(1−X2)+X1X2, the reliability polynomial of the
Beta UG in Figure 1 where X3, X4 and X5 are replaced with
0, ¬X1 and ¬X2, respectively. Likewise, Hypothesis 1 does
not seem to hold for scaled Betas, i.e. Xi = αi + (βi − αi)X
(cid:2)
i ∼ Beta(ai, bi), 0 ≤ αi ≤ βi ≤ 1. Counterexamples
(cid:2)
i
where X
can be obtained directly from the Beta UG in Figure 1.
VI. EMPIRICAL ANALYSIS
Hypothesis 1 is arguably one of the most important obser-
vations about reliability distributions of monotone Beta UGs.
However, proving it is rather difﬁcult. In this section, we
provide supporting evidence using Monte Carlo simulation.
A. Approximating reliability polynomials
If Hypothesis 1 is indeed valid, then by writing Y in the
recursive form (Equation 8), the distribution of Pi and Qi
can also be approximated by Beta distributions (since both
of them are reliability polynomials of monotone Beta UGs).
Speciﬁcally, let us assume the distributions of Pi and Qi can
be approximated by those of P i ∼ Beta(ap, bp) and Qi ∼
Beta(aq, bq) respectively, for some ap, bp, aq, bq ≥ 0. Our goal
is to translate the joint cdf (Xi, Pi, Qi) to (Xi, P i, Qi) so that
we can approximate Y using Y i as a function P i and Qi
Y ≈ Y = (1 − Xi)P i + XiQi.
(18)
Since Y only consists of three Beta random variables with
known joint cdf, we can empirically examine Hypothesis 1
by sampling Y under different parameter combinations. If for
every parameter combination, the empirical distribution of Y
93
Fig. 2: 3D plot of the empirical copula of the joint cdf (P3, Q3)
given in Equations 9 and 10. All Beta random variables
are identically distributed according to Xi ∼ Beta(2, 2) for
i = 1, 2, . . . , 5. The bold segments deﬁne a triangular pyramid
within which all binary copulas reside.
is approximately Beta, then Hypothesis 1 is more likely to be
valid; otherwise, it will be rejected.
Since (Pi, Qi) is independent of Xi (Property 2, Section
V), we can safely assume that (P i, Qi) is independent of Xi
as well. Hence, we only need to translate the joint cdf (P i, Qi)
to (Pi, Qi). To describe joint cdfs, we use the copula functions
[18]. A bivariate copula computes the joint cdf of two random
variables as a function of the cdf of each individual variable.
Speciﬁcally, the copula C of the joint cdf (Pi, Qi) is deﬁned
as
C(FPi (u), FQi (v)) = P r(Pi ≤ u, Qi ≤ v)
−1
Pi and F
∗
Pi (u) ≥ F
−1
Pi (u) ≥ F
−1
−1
Qi (v) where F
Qi (v) if and only if u ≥ v
−1
where FPi and FQi are the cdfs of Pi and Qi. An exam-
ple of the copula function is illustrated in Figure 2. Since
P r(Qi ≥ Pi) = 1 almost surely (Property 3, Section V), we
have P r(Pi ≤ u, Qi ≤ v) =P r (Qi ≤ v) for u ≥ v. Using
the copula function, that can be expressed as C(u, v) = v
−1
Qi are the quantile
if F
−1
Qi (v)), we
functions of Pi and Qi. By deﬁning v
= FPi (F
∗, therefore the
have F
∗,
two conditions can be used interchangeably. When u < v
C(u, v) is not well-understood, although it can be shown to
be smooth and non-decreasing in either u or v. We opt to ﬁt
C(u, v) using a function of u, v
−1
Qi .
Details of the choice of ﬁtting function and its parameters are
deferred to Appendix D. In summary, for every u, v ∈ [0, 1],
(cid:5)
C can be approximated as
C(u, v) ≈
∗, FPi, F
−1
Pi , FQi, and F
v,
Ω2(t),
∗
if u ≥ v
otherwise
(19)
where Ω1 and Ω2 are deﬁned in Equation 23 and t satisﬁes
Ω1(t) = u. The choice of the ﬁtting function guarantees the
existence and uniqueness of t ∈ [0, 1]. Moreover, we can
approximate both the cdfs and the quantile functions of Pi and
Qi by those of P i and Qi in C. The only unknown remained
are the tuning parameters θ1 and θ2 in Equations 26 and 27
– we incorporate both of them into the parameter space and
examine different combinations of θ1 and θ2 in the simulation.
Fig. 3: Empirical cdfs of the KS distance between Yk and
ˆXk and of the conﬁdence band Jk(0.95) in Equation 22
constructed from 30000 random combinations of the 8-tuple.
B. Simulation setup
We parameterize Y in Equation 18 using an 8-tuple
(ax, bx, ap, bp, aq, bq, θ1, θ2) where Xi ∼ Beta(ax, bx), P i ∼
Beta(ap, bp), Qi ∼ Beta(aq, bq), and θ1, θ2 are the tuning
parameters of the copula C of the joint cdf (P i, Qi). Each
parameter of the 8-tuple is chosen independently and uniformly
at random from a predeﬁned set of values. Given each pa-
rameter combination, we ﬁrst make sure that Qi ≥st P i, for
which the necessity and sufﬁciency condition is ap ≤ aq and
bp ≥ bq. Then, we collect k samples y1:k = (y1, y2, . . . , yk)
of Y using Algorithm 2. To sample a bivariate copula, we use
the technique described in [18], which requires computing the
quasi-inverse function of the conditional cdf (Equation 2.9.1 in
[18]). Given y1:k, we construct the distribution of the bootstrap
∗
k in Equation 22 using a sufﬁciently large number
statistic D
of bootstrap replications. Part of the computation invokes the
MLE method described in Appendix B in order to compute the
parameters of the approximating Betas. Moreover, we slightly
modify MLE to exploit the fact that EY i can be directly
obtained via EY i = (1 − EXi)EP i + EXiEQi (similar
∗
k at a
to Equation 13). Finally, we summarize the cdf of D
selected percentile and report the result. For completeness, we
also include the KS distance between the empirical cdf of y1:k
and the cdf of its approximating Beta, given as
DKS(Yk, ˆXk) = sup
u
|FYk (u) − F ˆXk (u)|,
(20)
where Yk and ˆXk are deﬁned in Appendix B. Further imple-
mentation details are provided in Appendix E.
C. Simulation result
The choices of parameters are ax, bx, ap, bp, aq, bq ∈
{1, 2, . . . , 50}, θ1, θ2 ∈ [0, 1], and k = 25000. The distribution
∗
k is constructed using 1000 bootstrap replications and is
of D
evaluated at the 95th percentile. The simulation result comes
from about 30000 random combinations of the 8-tuple and is
plotted in Figure 3. The result shows that 98.9% of the time,
the KS distance DKS(Yk, ˆXk) is smaller than 0.02 and 96.4%
of the time, the conﬁdence band Jk(0.95) is less than 0.02.
Furthermore, if the “corner cases” are not considered, then
the result changes in favor of even better approximation. For
example, if we limit ax, bx, ap, bp, aq, bq ∈ {3, 4, . . . , 50} then
99.9% of the time DKS(Yk, ˆXk) < 0.02 and 98.4% of the
time, Jk(0.95) < 0.02. Note that the bound on the conﬁdence
band also depends on k and while increasing k helps reducing
the bound further, it also incurs a longer simulation time.
94
(cid:59)(cid:20)
(cid:86)
(cid:68)
(cid:68)
(cid:59)(cid:21)
(cid:59)(cid:28)
(cid:69)
(cid:69)
(cid:59)(cid:23)
(cid:70)
(cid:59)(cid:22)
(cid:59)(cid:25)
(cid:71)
(cid:71)
(cid:59)(cid:27)
(cid:73)
(cid:59)(cid:24)
(cid:72)
(cid:72)
(cid:74)
(cid:74)
(cid:59)(cid:26)
(cid:75)
(cid:59)(cid:27)
(cid:59)(cid:28)
(cid:87)
(cid:87)
Fig. 4: (top) Distributed storage system with redundant de-
ployment. (bottom) Directed monotone Beta UG constructed
to model the reliability of the distributed system.
VII. CASE STUDIES
A. Correlated failures in distributed systems
1) Model description: In the ﬁrst example, we use Beta UG
to study the reliability of a simple distributed storage system.
This example is adopted from [25] and reprinted in Figure 4.
In this example, S2 acts as a back up server to S1. Although
they are built from separate hardware components (CPU1,
Disk1 belong to S1 and CPU2, Disk2 belong to S2), both
servers use the same software library for querying databases
(Lib, not shown in the ﬁgure). Besides, S1 and S2 rely on
the same network infrastructure for Internet communication
(switch ToR1, core router Core1 and Core2). Furthermore, S1
and Core1 draw power from the same branch circuit (BC1,
not shown in the ﬁgure). Under this setup, correlated failures
can happen at different levels. At the network level, if ToR1
fails then no Internet-originated request can reach either S1 or
S2. At the hardware level, any electrical fault that trips BC1’s
circuit breaker can render both S1 and Core1 unavailable.
At
in
both S1 and S2’s failure to retrieve data from the databases.
For simplicity, we make two assumptions, (i) the failures of
the 9 components Core1, Core2, ToR1, Disk1, Disk2, CPU1,
CPU2, Lib, and BC1 are stochastically independent, and (ii)
components not being listed here (e.g. S2’s branch circuit)
are considered reliable. The failure mode we consider in
this example is fail-stop. The deployment is available if any
Internet-originated request can be served by either S1 or S2.
the software level, a critical bug in Lib can result
To study the reliability of the distributed storage system, we
use 9 mutually independent Beta random variables X1 to X9
to model the reliability of Core1, Core2, ToR1, Disk1, Disk2,
CPU1, CPU2, Lib, and BC1, respectively. For each component,
the expected failure probability within a given mission time
and the uncertainty associated with that probability can be
adjusted via the two parameters of its Beta random variable.
Fig. 5: Histograms of the reliability of the distributed storage
system under different settings and pdfs of the approximating
Betas computed using MLE method.
We construct a directed monotone Beta UG to model the
reliability of the distributed storage system, such that
the
system is reliable if and only if the Beta UG is reliable, in other
words there is a path from s to t in the UG (Figure 4, bottom).
The constructed Beta UG captures correlation as it assigns
the same random variable to distinct edges (X8 is assigned to
(f, h) and (g, t) and X9 to (a, b) and (h, t)). Using Algorithm
1, the reliability polynomial of the Beta UG is computed as
(after simpliﬁcation)
Y = X3X8(X1X2X4X5X6X7X9 + X2X4X6X9 + X2X5X7
− X1X2X5X7X9 − X1X4X5X6X7X9 + X1X4X6X9
+ X1X5X7X9 − X2X4X5X6X7X9 − X1X2X4X6X9).
From the reliability polynomial, we can easily infer two single
points of failure; they are X3 and X8, which correspond to the
switch ToR1 and the software library Lib, respectively.
For
illustration
2) Numerical
results:
the Betas,
purposes,
the parameters of
i.e.
we randomly select
Xi ∼ Beta(ai, bi),
i = 1, 2, . . . , 9 where a1:9 =
(8, 6, 10, 7, 7, 9, 8, 5, 10) and b1:9 = (6, 7, 5, 10, 5, 9, 9, 10, 7).
We collect k = 105 random samples of Y and construct
the normalized histogram in Figure 5. Using the model,
to answer two questions, (i) which component’s