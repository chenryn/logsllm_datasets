sizeof(char),
sizeof(Pystringobject),
PyObjectHEAD_INIT(&PyType_Type)
下面列出了PyStringobject对应的类型对象
return x;
a->oh_shash=xi
Pyobject_Del,
"str"
理（x1）
hashfune)string_hash,
(reprfune)string_repr,
PyString_Type=[
mapping,
tp_new/
Python源码剖析
tp_as_sequence *
tp_hash */
tp_as_mumber
tp_repr*/
3.2
创建PyStringObject对象
-PyString_Type:
一深度探索动态语言核心技术
---
## Page 80
Python源码剖析
那么就直接返回nullstring的引用。
检查到需要为一个空字符串创建Pystringobject对象，这时nullstring已经存在了，
过interm机制进行共享，然后将nu1istring指向这个被共享的对象。如果在以后Python
Python会为这个空字符建立一个PyStringobject对象，将这个PyStringobject对象通
空字符串基础上创建 PyStringObject，由于nullstring指针被初始化为NULL，所以
PyStringobject对象指针nullstring专门负责处理空的字符数组。如果第一次在一
Python 并不是每一次都会创建相应的PyStringobject。Python运行时有一个
如果不是变态，几乎没有人会去试图超越这个禁区的。
系统下，该值为2147483647。换算一下，就是2GB。嗯，这个界限值确实非常庞大了，
创建对应的PyStringObJecE对象。PY_SSIZE_T_MAx是一个与平台相关的值，在WIN32
查该字符数组的长度，如果字符数组的长度大于了PY_SSIZE_T_MAX，那么Python将不会
串的指针。在从一个原生字符串创建PyStringobject时，首先在代码清单3-1的[1]处检
如果不是创建空字符串对象，那么接下来需要进行的动作就是申请内存，创建
接下来，在代码清单3-1的[21处，检查传入的字符串是不是一个空串。对于空串
显然，传给ByString_Fromstring的参数必须是一个指向以NUL(o）结尾的字符
第3章
//[11：判断字符串长度
Inline Pyobject
return（Pyobject *)opi
returm (Pyobiect）op:
(s1ze
return NULl;
[slze
一深度探索动态语言核心技术
处理字符
Python中的字符串对象
NTTM
PyStringobject *op:
PY
VAR(op" &Pystring_Type,
_SSIZE_T_MAX)
SSTATE_NOT_INTERNED:
NewVar
characters[atr &UCHAR MAX]）=NULL)
hulistring)g= NULL)
size+l):
size)F
一个
---
## Page 81
Pystring_FromStringAndsize:
PyStringobject所维护的空间中，在拷贝的过程中，将字符数组最后的o字符也拷贝
标志设为SSTATE_NOT_INTERNED。最后将参数St指向的字符数组内的字符拷贝到
的内存，还有为字符数组内的元素申请的额外内存。然后，将hash缓存值设为一1，将intem
PyStringobject对象。可以看到，代码清单3-1的[4]处申请的内存除了pyStringobject
可以确定需要拷贝的字符的个数。
针，而PyString_FromstringAnasize不会有这样的要求，因为通过传入的size参数就
是有一点，PyString_FromString传入的参数必须是以NUL（o）结尾的字符数组的指
在内存中的状态如图3-1所示：
[stringobject.c]
Pyobject*
。加入我们对于字符数组“python”建立ryStringobject对象，那么对象建立完成后
在PyString_Fromstring之外，还有一条创建Pystringobject 对象的途径
if(size
f（s1ze=#
register Pystringobject *op:
吊
Pyobjeet_
1/处理字符
OP
创建新的ByStringObjeot对象，并初始化
/处理nul1
NULL
return
return,
memcpytoo
(EyStringobiect
Pystring_FromStringAndsize(const char *str,int size)
== &&str=NULL &&（op =CharaCters[*str&UCHAR MAX])=
INIT_VAR(op.&PyString_Type,
ref
(Byobjeet
(Pyobject*）op)
string
0&&
图3-1
ob_sval,
SSTATE NOT_INTERNED;
PyString Objec的内存
type
新创建的PyStringObject 对象的内存布局
*）Pyonject_MALLoe(sizeof(PyStringobject)+size):
obsize
str,size);
ob hash ob_sstate ob_sval
Python源码剖析
=NULL
额外的内存
3.2
size)
P
创建PyStringObject 对象
一深度探索动态语言核心技术
汇
---
## Page 82
Python源码剖析
3.3
52
对象呢？显而易见，这样会大量地浪费珍贵的内存。因此Pyhon为PyStringobject对
会为我们重新申请内存，创建一个新的pyStringobject对象b，a与b是完全不同的两
后，我们再一次为字符串“python”创建一个pyStringobject对象。通常情况下，Python
省了空间，又简化了对PyStringobject对象的比较，嗯，可谓是一箭双雕哇。通过下面
被intermn了，那么只需要简单地检查它们对应的ryobject*是否相同即可。这个机制既节
雪
个对象，尽管其内部维护的字符数组是完全相同的。
展示的一段Pyhon代码，我们来考察一下intern机制的必要性：
PyStringobject对象。这样当判断两个PyStringobject对象是否相同时，如果它们都
print a,b
这就是前面所提到的intern机制。
当字符数组的长度为0或1时，需要进行一个特别的动作：PyString_InternInPlace
[atringobject.c]
这就带来了一个问题，假如我们在程序中创建了100个“python”的pyStringObject
首先，我们创建了一个PyStringObject 对象a，其表示的字符串是“Python”，随
PyStringobject 对象的intern 机制之目的是：对于被intem之后的字符串，比如
字符串对象的intern机制
return （Pyobiect）op:
register PyStringobjeot *op;
第3章
//创建PyStringobject 对象
register
characters[*str & UCHAR MAX] = op;
nitern（共享）长度较稚的PyStringobject对象
PyString_InternInPlace（&t):
oP（PyStringobject
Pystring_.
Pyobject
一深度探索动态语言核心技术
Python中的字符串对象
PyString_FromString(const char *str)
size_t size;
InternInPlace(&t);
op:
Fyobject
）七;
imjop:
---
## Page 83
正是负责完成对一个对象进行interm操作的函数（见代码清单3-2）。
象的引用返回，而不再重新创建一个PyStringObject对象。PyString_IntermInPlace
象中查找，如果发现该字符数组对应的eyStringobject对象已经存在了，那么就将该对
b的时候，Python会首先在系统中记录的已经被intem机制处理了的PyStringobject对
代码清单3-2
象引入了intern机制。在上面的例子中，如果对于a应用了intern机制，那么之后要创建
东西是个什么东西呢？interned在stringobjectc中被定义为：staticPyobject*interned。
void PyString_InternInPlace(Pyobject **p)
[stringobjec,c]
检查传入的对象是否是一个pyStringobject对象，intern机制只能应用在pystring-
PyString_InternInPlace首先会进行一系列的检查，其中包括两项检查内容：
从代码中我们可以清楚地看到，interm机制的核心在于intermed这个东西，那么这个
检查传入的pyStringobject对象是否已经被intern机制处理过了，Pyhon不会对同
Object对象上，甚至对于它的派生类对象系统都不会应用interm机制。
PyStYing CHECK_INTERNED(S)=SSTATE_INTERNED_MORTAL:
if
//创建记录经intern机制处理后的pystringobiect的dilet
//对PyStringObject进行类型和状态检查
PyObject
register
73]
/[2]
/[4]
(PyString_CHECK_INTERNED(s))
（!PyString.CheekExact(s))
return,
PY_INCREE（U);
7/注意这里对引用计数的调整
PyDict_GetItem(interned,（Pyobject*ys）;
interned
(interned
Y_DECREE(+p);
：调整o中的Intern状态标志
注意这里对引用计数的调整
PyStringobiects三（Pystringobject *）（*p）;
PyDict_New(）
NULL)
aed
(Pyobject
Python源码剖析
3.3字符串对象的intern机制
）s,（PyObject）s）；
深度探索动态语言核心技术
---
## Page 84
Python源码剖析
54
在下面列出的string_dealloc代码中得到了验证：
那么我们可以预期，在销毁a的同时，会在intered中删除指向a的指针，显然，这一点
statie void string_dealloc(Pyobject *op)
将引用计数减2的原因。在A的引用计数在某个时刻减为0之后，系统将会销毁对象a，
[stringobject.c]
少有两个指针引用了a，那么删除a就永远不可能了，这显然是没有道理的。
效引用的话，那么a的引用计数在Pyhon结束之前永远都不可能为0，因为intermed中至
Pyhon的设计者规定在intermed中a的指针不能被视为对象a的有效引用，因为如果是有
中时，PyDictobject对象会通过这两个指针对a的引用计数进行两次加1的操作。但是
制。在将一个PyStringObject对象a的ryObject指针作为key和value添加到interned
a的Pyobject*指针的变化：
代码清单3-2的[2]处将a记录到intermed中。
这样，其实a只是一个被临时创建的对象。如果intermned中还不存在这样的b，那么就在
同。如果确实存在对象b，那么指向a的ryobject指针将会指向b，而a的引用计数减1，
在interned这个dict中检查是否有满足以下条件的对象b：b中维护的原生字符串与a相
的Pystringobject对象。当对一个PyStringObject对象a应用interm机制时，首先会
映射关系的集合，集合的名称叫做intermed。在这个集合中，记录着被interm机制处理过
C++中的map，即map
后面的章节中被详细地剖析。现在，对于一个PyDictObject对象，我们完全可以看作是
一个PyDictobject对象，也就是我们在Python中经常用到的“dict”啦。这个对象将在
到，interned实际上指向的是PyDictNew创建的一个对象。而PyDict_New实际上创建了
因此，interned中的指针不能作为a的有效引用。这也就是在代码清单3-2的[3]处会
对于被intern机制处理了的PyStringObject对象，Python采用了特殊的引用计数机
图3-2展示了如果intermed中存在这样的对象b，在对a进行intern操作时，原本指向
现在一切都清楚了，所谓的intern机制的关键，就是在系统中有一个（key，value）
从stringobject.c中的定义我们完全不知道intermed是个什么东西，然而在这里我们看
一深度探索动态语言核心技术
ca机制处理前
图3-2intern机制示意图
Python
intcrn机鹏处理后
Python
Interned
Python
---
## Page 85
intern机制相关函数，但是你会相当失望，嗯，因为它基本上是换汤不换药的：
不需要再创建这样一个临时对象呢？事实上，Python确实提供了一个以char*为参数的
于引用计数减为0而被销毁，它只是作为一个临时对象县花一现地在内存中闪现，然后
InternInPlace对temp进行处理，intern机制会减少temp的引用计数，temp对象会由
在运行时创建了一个PyStringobject对象temp后，基本上都会调用PyString
之对应的pyStringobject对象了。而intern机制是在s被创建后才起作用的，通常Python
s创建pystringobjeet对象，尽管s中维护的原生字符数组在interned中已经有一个与
InternInPlace也只对PyStringObject起作用。事实正是如此，Python始终会为字符串
个合法的 PyStringobject对象是会被创建的，同样，我们可以注意到，PyString
实现了节省空间的目的。事实上，从pyString_FromString中可以看到，无论如何，
事到如今，我必须承认，我说谎了。
串对应的pyStringobject对象了，如果有，则不用创建新的，这样可以节省内存空间。
Pyobject*
[stringobject.c]
retum sr
现在读者可能有一个疑问了，是否可以直接在C的原生字符串上做intern的动作，而
节省内存空间是没错的，可是Python并不是在创建ryStringobject时就通过interned
前面提到，Pyhon在创建一个字符串时，会首先在intermed中检查是否已经有该字符
Pyobjeet
sWitch(EySUTing CHECK_INTERNED(op))
op->oh_cype->tp_free（op):
default:
CaSe SSTATE NOT_INTERNED:
CaSe SSTATE_INTERNED_IMMORTAL:
CABe SSTATE INTERNEDMORTAL:
PyString_InternFromString（const char *op)
Py_FatalErron(*Inconsistent intermed atring state.");
Py_FatalBrror("Immortal intermed string died,#):
break;:
break;.
*s== Pystring_Fromstring（cp）
"deletion of interned string failed);
retcnt
Delrtem(interned,
3:
Python源码剖析
OP）
3.3
字符串对象的intern机制
0）
深度探索动态语言核心技术
---
## Page 86
Python源码剖析
3.4
还是通过调用pyString_FromStringAndSize，如果字符串实际上是一个字符，则会进行
后，缓冲池中的所有rystringObject指针都为空。
符串对象体系中的字符缓冲池则是以静态变量的形式存在着的。在Py山on初始化完成之