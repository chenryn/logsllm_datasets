## 重新发现PostgreSQL之美 - 15 沙盘推演, 权力的游戏  
### 作者  
digoal  
### 日期  
2021-06-06  
### 标签  
PostgreSQL , 沙盘 , 推演 , 真相 , 数据 , 案例 , 逻辑 , 理想    
----  
## 背景  
视频回放: https://www.bilibili.com/video/BV1Zq4y1j7xs/  
有数据说数据, 没数据说案例, 没案例说逻辑, 没逻辑谈理想. 已经成为数字时代的职场生存法则.    
- 要陈述一个观点或结论, 没有数据支撑说话没分量, 说明你没经过仔细分析, 没过脑子.    
- 实在拿不到数据, 你总得拿点案例出来, 否则就是在空谈, 没有支点.    
- 没案例, 总得有底层逻辑吧, 逻辑能自洽, 也是说得通的.    
- 如果连逻辑都没有想过, 那你只能用故事、理想或者理念来感染人, 如果你能忽悠(感染)成功, 并且最后确实也成功了, 也许能表达为因为相信所以看见.    
场景:  
- 项目上线前, 申请资源, 如何评估需要多少资源?  
- 做IT部门的全年预算?  
- 如何做到精准, 有理有据有节?   
挑战:  
- 项目往往只有业务指标(应该叫目标, 和IT预算精算还差了十万八千里), 靠经验或拍脑袋来确定IT预算, 上线后发现资源不足或严重超过预期, 造成铺张浪费.  
- 难以模拟和快速产生真实的业务数据.  
- 难以模拟真实的业务交互行为.  
- 难以捕捉和分析性能问题的原因.  
PG解决方案:  
- pgbench, 支持沙盘推演, 避免纸上谈兵、假大空.  
    - 一个可以近乎真实的模拟业务上线后的压力的内置benchmark program.  
    - 内置多种数据生成算法, 多种模拟业务和数据库交互的command,  
    - 同时支持根据业务定制化压测程序, 模拟真实的业务交互行为.  
- awr, pg_stat_statements, 捕获和分析业务瓶颈  
    - ##### 202104/20210415_01.md   [《PostgreSQL pg_stat_statements AWR 插件 pg_stat_monitor , 过去任何时间段性能分析 [推荐、收藏]》](../202104/20210415_01.md)  
    - ##### 202003/20200324_25.md   [《PostgreSQL 活跃会话历史记录插件 - pgsentinel 类似performance insight \ Oracle ASH Active Session History》](../202003/20200324_25.md)  
    - ##### 201901/20190125_02.md   [《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)  
    - https://www.postgresql.org/docs/devel/pgstatstatements.html  
- 快速构建海量测试数据  
    - ##### 202001/20200103_01.md   [《PostgreSQL+MySQL 联合解决方案 - 第3课视频 - 如何压测PG数据库、如何瞬间构造海量测试数据》](../202001/20200103_01.md)  
    - ##### 201711/20171121_01.md   [《PostgreSQL 如何快速构建 海量 逼真 测试数据》](../201711/20171121_01.md)  
## 例子  
重点讲一下pgbench里面的一个小点:   
- 产生各种分布形态的模拟数据(高斯分布、随机分布、指数分布、长尾分布)  
为了让大家更容易理解概率分布情况, 建议先了解一下以下3种绘图方式.    
1、柱状图  
##### 202104/20210429_01.md   [《PostgreSQL - 时序、IoT类场景 - 自定义histogram函数, 绘制数据分布柱状图 - cte window range width_bucket format plpgsql》](../202104/20210429_01.md)  
```  
CREATE OR REPLACE FUNCTION histogram(table_name_or_subquery text, column_name text, buckets int, leng int)    
RETURNS TABLE(bucket int, "range" numrange, freq bigint, ratio text, bar text)    
AS $func$    
DECLARE     
  sql text;    
BEGIN    
  sql := format('    
  WITH    
  source AS (    
    SELECT * FROM (%s) t    
  ),    
  min_max AS (    
    SELECT min(%s) AS min, max(%s) AS max FROM source    
  ),    
  histogram AS (    
    SELECT    
      width_bucket(%s, min_max.min, min_max.max+min_max.max*0.00000001, %s) AS bucket,    
      numrange(min(%s)::numeric, max(%s)::numeric, ''[]'') AS "range",    
      count(%s) AS freq    
    FROM source, min_max    
    WHERE %s IS NOT NULL    
    GROUP BY bucket    
    ORDER BY bucket    
  )    
  SELECT    
    bucket,    
    "range",    
    freq::bigint,    
    round(100 * freq::numeric/(sum(freq::numeric) over() + 1), 2)||'' %%'' as ratio,     
    repeat(''*'', (freq::float / (max(freq) over() + 1) * %s)::int) AS bar    
  FROM histogram group by bucket,"range",freq::bigint    
  order by bucket',    
  table_name_or_subquery,    
  column_name,    
  column_name,    
  column_name,    
  buckets,    
  column_name,    
  column_name,    
  column_name,    
  column_name,    
  leng    
  );    
  RETURN QUERY EXECUTE sql;    
  raise notice '%', sql;    
END    
$func$ LANGUAGE plpgsql;   
```  
```  
select * from histogram(    
'select id as x from tbl',  -- 求这条SQL的结果集的柱状图    
'x',  -- 按这个字段的数值分布绘制柱状图, x是以上SQL的某个字段名    
25,   -- 均匀分布成25个bucket, 最好结果中的唯一值个数能刚好整除这个bucket     
20);  -- 展示进度条形式表示占比. 20是进度条的最长字符数   
```  
2、高频词  
pg_catalog.pg_stats.    
这个是analyze之后产生的, 存储了字段的高频词, 也有bucket的概率分布等信息.   
3、饼图  
##### 201808/20180804_01.md   [《PostgreSQL psql 绘制饼图》](../201808/20180804_01.md)   
少量唯一值的group统计可以用来绘制饼图, 值很多的情况不适合   
```  
create or replace function gen_charts(    
  sql text,  -- SQL，返回两列，第一列为描述，第二列为这个描述的数值    
  width int default 80,     
  height int default 25,     
  radius numeric default 1.0,   -- 换成float8类型，打印实心饼图  
  colours text default '#;o:X"@+-=123456789abcdef'      
) returns setof text as $$    
declare    
begin    
return query execute format(    
$_$    
WITH slices AS (    
 SELECT  CAST(ROW_NUMBER() OVER () AS INTEGER) AS slice,    
         name,     
	 VALUE,    
	 100.0 * VALUE / SUM(VALUE) OVER () AS percentage,    
	 2*PI() * SUM(VALUE) OVER (ROWS unbounded preceding)     
                / SUM(VALUE) OVER () AS radians    
   FROM (%s    
        ) AS DATA(name,VALUE))    
(    
  SELECT array_to_string(array_agg(c),'') AS pie_chart    
    FROM (    
    SELECT x, y,    
           CASE WHEN NOT (SQRT(pow(x, 2) + pow(y, 2))     
                            BETWEEN %s*1/10 AND %s)    
                THEN ' '    
                ELSE SUBSTRING(%L,    
                               (SELECT MIN(slice)     
                                  FROM slices     
                                 WHERE radians >= PI() + atan2(y,-x)),    
                               1)    