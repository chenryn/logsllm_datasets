### Awareness of Web Security Threats and Static Code Analysis

Awareness of web security threats, such as SQL injections and Cross-Site Scripting (XSS), has grown over the years. This heightened awareness has led to better coding practices and increased attention to web security. Similarly, static code analysis has become an integral part of the software development lifecycle. Static code analysis for security aims to identify weaknesses in a program that could lead to security vulnerabilities. The process typically involves evaluating a system and its components based on form, structure, content, or documentation to detect non-conformities in access control, information flow, or application programming interfaces.

Given the high cost of manual code reviews, the software industry increasingly relies on automated code analyzers. For instance, IBM successfully demonstrated JavaScript analysis by examining 678 websites, including 178 of the most popular ones. Surprisingly, 40% of these websites were found to be vulnerable, with 90% of the vulnerable applications containing third-party code. NIST surveys [75, 74] further highlight the effectiveness of static analysis, showing that a significant number of previously reported vulnerabilities were detected in popular open-source programs using a combination of different tools. Additionally, 50% of companies resubmitted 91-100% of their commercial applications for code analysis after initial submissions revealed security holes. This growing trust in static analysis may be one reason for the recent decline in reported vulnerabilities.

### Social Factors and Bug Reporting

To understand the second hypothesis—fewer bugs being reported—it is essential to consider social factors. Several reasons may explain why people have stopped reporting bugs to the community. One key factor is the shift towards "no full disclosure due to bounties." A decade ago, the discovery of a zero-day vulnerability would likely result in a patch and public communication about the fix. Today, large companies like Google and Mozilla offer rewards to bug hunters, provided they do not disclose the vulnerability [69]. Bug hunters may also choose to sell zero-day vulnerabilities to private buyers rather than disclosing them publicly [43]. This business model suggests that financial profit may be driving the downward trend in reported vulnerabilities.

Moreover, the practice of full disclosure, as it was traditionally understood, is being avoided [50, 44]. Researchers who find vulnerabilities may face threats or opt to sell them to third parties on private markets. This shift in behavior is supported by recent studies, such as those by Lemos and a 2010 survey that examined the trustworthiness and responsiveness of organizations that buy vulnerabilities [60, 42].

In conclusion, the decline in reported vulnerabilities can be attributed to both improved software development practices and changes in the way vulnerabilities are handled. The software industry has become more mature, leading to better coding practices and fewer easy-to-exploit vulnerabilities. Additionally, the financial incentives for keeping vulnerabilities private have reduced the number of public disclosures.

### Categorizing Vulnerabilities and Exploits

We further categorized memory error vulnerabilities and exploits into six classes based on their CVE descriptions: stack-based, heap-based, integer issues, NULL pointer dereference, and format string. Figures 3a and 3b illustrate the classification for vulnerabilities and exploits, respectively.

From these figures, we observe the following:
1. Format string vulnerabilities, which were prevalent shortly after their discovery, have nearly disappeared.
2. Integer vulnerabilities peaked in late 2002 and, despite a small drop in 2006, remain a concern.
3. Stack and heap memory errors continue to be the most exploited, accounting for about 90% of all reported vulnerabilities and 50% of all reported exploits. There is no indication that this will change in the near future.

### Discussion

To determine whether memory errors have become a thing of the past, several additional observations are necessary.

#### Impact of Memory Error Vulnerabilities

First, we examine the impact of memory error vulnerabilities. If their impact is negligible, further research on the topic may be less relevant. We analyzed various exploit packs, and Table 1 shows the number and percentage of exploits related to memory errors. At least 63% of the exploits in these packs are memory error-related, indicating a significant impact on the security industry.

#### Support of Buffer Overflows by Design

Second, the number of memory vulnerabilities in a specific program often depends on the programming language. For example, the C programming language inherently supports buffer overflows, as shown in Figure 4. Such overflows are sometimes desired, but they make the language more vulnerable to malicious overflows. Given the popularity of unsafe languages like C and C++, developers must be vigilant in avoiding memory error vulnerabilities.

#### Deployment of Mitigation Techniques

Third, mitigation techniques are not always deployed by modern operating systems. Reasons include the need for hardware support, potential overheads, and the requirement to recompile essential parts of a system, which may not be feasible due to uptime requirements or lack of source code.

#### Patching Behavior

Another issue is the patching behavior of end users and system administrators. Many still use outdated software, and even recently updated exploit packs contain exploits for vulnerabilities dating back to 2006. This is supported by other studies [59, 100].

#### Motivation of Attackers

Finally, even with all mitigation techniques in place, skilled and motivated attackers can still find ways to exploit systems. While there is some awareness among developers, memory errors still account for a significant portion of reported vulnerabilities and exploits.

### Research Directions

Memory errors remain a significant threat to system security. Here are some promising research directions:

1. **Information Leakage, Function Pointer Overwrites, and Heap Inconsistencies**: These vulnerabilities are often used to bypass ASLR and enable return-into-libc or ROP attacks. Recent studies aim to introduce more randomness at the OS level to address these issues [77, 48, 52].

2. **Low-Overhead Bounds Checkers**: Bounds checking is crucial for preventing overflows, but current techniques still impose significant runtime and memory overhead. Further research is needed to reduce these costs [111, 3].

3. **Non-Control Data Attacks**: These attacks, such as those described by Chen et al. [23] and Kononenko [57], are difficult to detect and can evade common protections. More research is needed to develop effective countermeasures.

4. **Legacy Systems and Patching Behavior**: Lazy patching and unprotected legacy systems contribute to the popularity of exploit kits. Research should focus on sophisticated patching schemes and disincentivizing automatic patch-based exploit generation [18].

5. **Static and Dynamic Analysis to Detect Vulnerabilities**: Novel analysis techniques can help detect and harden programs against vulnerabilities before deployment. Ongoing research in this area [94, 95] may provide better protection against buffer overflow vulnerabilities.

By addressing these areas, we can further enhance the security of our systems and reduce the impact of memory errors.