# PostgreSQL 性能优化：并行计算与即时编译 (JIT)

## 目录
- 并行计算
  - 相关参数
  - 自动并行度计算
  - 强制并行度设置
  - 示例
- 即时编译 (JIT)
  - JIT 参数
  - 示例
- 参考资料
- 课程计划
- 技术社群

## 并行计算

### 相关参数
以下参数用于控制并行计算的行为：

- **`max_worker_processes`**：整个实例中可配置的最大后台进程数。
- **`max_parallel_workers`**：在同一时间窗口内，最多可以分配多少后台进程进行并行处理。
- **`max_parallel_workers_per_gather`**：一个并行计算子任务最多可以分配多少后台进程。
- **`parallel_leader_participation`**：是否允许领导者（查询发起者）参与并行处理。
- **`parallel_setup_cost`**：启动并行处理的初始成本。
- **`parallel_tuple_cost`**：每处理一条记录的成本。
- **`min_parallel_index_scan_size`**：触发并行索引扫描的最小索引大小。
- **`min_parallel_table_scan_size`**：触发并行表扫描的最小表大小。
- **`ALTER TABLE ... SET (parallel_workers = N)`**：为特定表设置最大并行工作进程数。

### 自动并行度计算
并行度的自动计算取决于以下几个因素：
- 查询优化器 (CBO) 的评估结果。
- 系统参数设置，例如关闭了并行处理或设置了 `max_parallel_workers_per_gather` 为0。
- 当前可用的并行工作进程数 (`max_parallel_workers - 已分配的工作进程数`)。

计算公式如下：
```sql
MIN(
  COALESCE(table_parallel_workers, 计算出的并行度),
  max_parallel_workers_per_gather,
  max_parallel_workers - 当前窗口已分配工人数
)
```

### 强制并行度设置
可以通过以下设置强制指定并行度：
```sql
SET max_worker_processes = 128;
SET max_parallel_workers = 128;
SET max_parallel_workers_per_gather = 24;
SET parallel_leader_participation = off;
SET parallel_setup_cost = 0;
SET parallel_tuple_cost = 0;
SET min_parallel_index_scan_size = 0;
SET min_parallel_table_scan_size = 0;
ALTER TABLE xx SET (parallel_workers = 24);
```

### 示例
#### 测试表创建
```sql
CREATE TABLE t1 (id INT, c1 INT2, c2 INT2, c3 INT2, c4 INT2, c5 INT, c6 TEXT, c7 TIMESTAMP);
INSERT INTO t1 SELECT generate_series(1, 1000000000), random() * 10, random() * 100, random() * 1000, random() * 10000,
                      random() * 100000, md5(random()::TEXT), clock_timestamp();
ALTER TABLE t1 SET (parallel_workers = 32);

CREATE TABLE t2 (id INT, c1 INT2, c2 INT2, c3 INT2, c4 INT2, c5 INT, c6 TEXT, c7 TIMESTAMP);
INSERT INTO t2 SELECT generate_series(1, 1000000000), random() * 10, random() * 100, random() * 1000, random() * 10000,
                      random() * 100000, md5(random()::TEXT), clock_timestamp();
ALTER TABLE t2 SET (parallel_workers = 32);
```

#### 并行无索引条件过滤、分组聚合、哈希聚合
```sql
SELECT c1, COUNT(*) FROM t1 WHERE c2 <= 50 GROUP BY c1;

-- 关闭哈希聚合
SET enable_hashagg = off;
SELECT c1, COUNT(*) FROM t1 WHERE c2 <= 50 GROUP BY c1;
```

#### 并行自定义函数计算
```sql
CREATE OR REPLACE FUNCTION udf(TEXT) RETURNS BOOLEAN AS $$
SELECT hashtext($1) < 10000;
$$ LANGUAGE SQL STRICT IMMUTABLE PARALLEL SAFE;

SELECT COUNT(*) FROM t1 WHERE udf(c6);
```

#### 并行生成分析中间表
```sql
CREATE UNLOGGED TABLE t_1 AS SELECT c1, COUNT(*) FROM t1 GROUP BY c1;
```

#### 并行无索引排序
```sql
SELECT * FROM t1 ORDER BY id DESC LIMIT 10;
SELECT * FROM t1 ORDER BY id LIMIT 10;
SELECT * FROM t1 ORDER BY c1 DESC LIMIT 10;
SELECT * FROM t1 ORDER BY hashtext(c6) LIMIT 10;
SELECT * FROM t1 ORDER BY hashtext(c6) DESC LIMIT 10;
```

#### 并行哈希JOIN
```sql
SELECT t1.c1, COUNT(*) FROM t1 JOIN t2 USING (id) WHERE t2.c2 < 5 GROUP BY t1.c1;
SELECT t1.c1, COUNT(*) FROM t1 JOIN t2 USING (id) GROUP BY t1.c1;
```

#### 并行创建索引
```sql
SET max_parallel_maintenance_workers = 8;
SET maintenance_work_mem = '2GB';
CREATE INDEX idx_t1_1 ON t1 USING BTREE (c1);
```

#### 并行索引扫描
```sql
SELECT COUNT(*) FROM t1 WHERE c1 = 1;
```

更多示例请参考：
- [并行Nestloop Join](https://github.com/digoal/blog/blob/master/201903/20190317_09.md)
- [并行Merge Join](https://github.com/digoal/blog/blob/master/201903/20190317_10.md)
- [并行子查询](https://github.com/digoal/blog/blob/master/201903/20190318_02.md)
- [并行CTE](https://github.com/digoal/blog/blob/master/201903/20190318_04.md)
- [分区表智能并行Join](https://github.com/digoal/blog/blob/master/201903/20190317_12.md)
- [分区表智能并行聚合](https://github.com/digoal/blog/blob/master/201903/20190317_13.md)

## 即时编译 (JIT)

### JIT 参数
以下参数用于控制JIT的行为：

- **`jit`**：是否启用JIT编译。
- **`jit_provider`**：使用的LLVM编译器提供者。
- **`jit_above_cost`**：超过此代价的SQL语句启用JIT编译。
- **`jit_inline_above_cost`**：超过此代价的SQL语句启用JIT内联动态编译。
- **`jit_optimize_above_cost`**：超过此代价的SQL语句启用JIT优化代码动态编译。
- **`jit_expressions`**：是否启用JIT表达式动态编译。
- **`jit_tuple_deforming`**：是否启用JIT元组变形动态编译。
- **`jit_profiling_support`**：是否支持JIT性能分析，用于诊断JIT优化效果。
- **`jit_dump_bitcode`**：开发者参数，用于打印JIT动态编译代码。
- **`jit_debugging_support`**：开发者参数，用于输出JIT调试信息。

### 示例
```sql
CREATE TABLE test(id INT, c1 INT, c2 INT, c3 INT, c4 INT, c5 INT, c6 INT, c7 INT, c8 INT, c9 INT);
INSERT INTO test SELECT generate_series(1, 10000000), 1, 2, 3, 4, 5, 6, 7, 8, 9;

EXPLAIN VERBOSE
SELECT AVG(c1), MIN(c1), MAX(c1), COUNT(*), AVG(c2), MIN(c2), MAX(c2), AVG(c3), MIN(c3), MAX(c3),
       AVG(c4), MIN(c4), MAX(c4), AVG(c5), MIN(c5), MAX(c5), AVG(c6), MIN(c6), MAX(c6), AVG(c7), MIN(c7), MAX(c7),
       AVG(c8), MIN(c8), MAX(c8), AVG(c9), MIN(c9), MAX(c9)
FROM test
WHERE c1 < 1 OR c2 < 1 OR c3 < 1 OR c4 < 1 OR c5 < 1 OR c6 < 1 OR c7 < 1 OR c8 < 1 OR c9 < 10
GROUP BY c1
ORDER BY c1;
```

## 参考资料
- [并行计算文档](https://github.com/digoal/blog/blob/master/201903/20190318_05.md)
- [MySQL手册](https://www.mysqltutorial.org/)
- [MySQL官方文档](https://dev.mysql.com/doc/refman/8.0/en/)
- [PostgreSQL管理与开发规范](https://github.com/digoal/blog/blob/master/201609/20160926_01.md)
- [PostgreSQL官方文档](https://www.postgresql.org/docs/current/index.html)
- [PostgreSQL教程](https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-vs-mysql/)
- [PostGIS手册](http://postgis.net/docs/manual-3.0/)

## 课程计划
- **2019.12.30 19:30**：RDS PG产品概览，如何与MySQL结合使用
- **2019.12.31 19:30**：如何连接PG，GUI和CLI的使用
- **2020.1.3 19:30**：如何压测PG数据库、如何瞬间构造海量测试数据
- **2020.1.6 19:30**：MySQL与PG对比学习 (面向开发者)
- **2020.1.7 19:30**：如何将MySQL数据同步到PG (DTS)
- **2020.1.8 19:30**：PG外部表妙用 - mysql_fdw, oss_fdw（直接读写MySQL数据、冷热分离）
- **2020.1.9 19:30**：PG应用场景介绍 - 并行计算，实时分析
- **2020.1.10 19:30**：PG应用场景介绍 - GIS
- **2020.1.13 19:30**：PG应用场景介绍 - 用户画像、实时营销系统
- **2020.1.14 19:30**：PG应用场景介绍 - 多维搜索
- **2020.1.15 19:30**：PG应用场景介绍 - 向量计算、图像搜索
- **2020.1.16 19:30**：PG应用场景介绍 - 全文检索、模糊查询
- **2020.1.17 19:30**：PG数据分析语法介绍
- **2020.1.18 19:30**：PG更多功能了解：扩展语法、索引、类型、存储过程与函数。如何加入PG技术社群

## 本课程习题
- 并行计算适合什么应用场景？
- 并行度是优化器自动计算的，取决于哪些因素？
- 如何设定强制并行度？
- 为什么分析型场景使用JIT可以提升性能？推拉模型的区别是什么？

## 技术社群
- **PG技术交流钉钉群 (3500+人)**