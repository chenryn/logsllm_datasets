# hgame2021 逆向题目
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
一个月hgame结束了，做完了逆向题，收获很大，misc的签到题做来玩了一下。
## Re
###  apacha
考了一个xxtea加密算法：key是{1, 2, 3, 4}
跟着算法逻辑逆一下就行了：
    #include 
    unsigned int LEN = 35;
    unsigned int delat = 0x9E3779B9 * (52 / LEN) - 0x4AB325AA;
    unsigned int KEY[] = {1, 2, 3, 4};
    unsigned char ENC[] =
    {
       35, 179,  78, 231,  54,  40, 167, 183, 226, 111, 
      202,  89, 193, 197, 124, 150, 116,  38, 128, 231, 
      230,  84,  45,  61,  86,   3, 157, 138, 156, 195, 
      220, 153, 237, 216,  38, 112, 173, 253,  51, 106, 
       10,  85, 150, 244, 158, 111, 156,  92,  76, 208, 
      229,  27,  23, 174,  35, 103, 194, 165, 112,  82, 
       10,  19,  66, 172, 178, 103, 190, 132, 121, 199, 
       92, 112, 152,  61,  81,  92,  45, 218,  54, 251, 
       69, 150,  23,  34, 157,  82, 227,  92, 251, 225, 
      137, 209, 137, 212,  91, 232,  31, 209, 200, 115, 
      150, 193, 181,  84, 144, 180, 124, 182, 202, 228, 
       23,  33, 148, 249, 227, 157, 170, 161,  90,  47, 
      253,   1, 232, 167, 171, 110,  13, 195, 156, 220, 
      173,  27,  74, 176,  83,  52, 249,   6, 164, 146
    };
    void de_xxtea()
    {
        unsigned int *enc = (unsigned int *)ENC;
        unsigned int *key = (unsigned int *)KEY;
        do
        {
            unsigned char delat1 = (unsigned char)(delat >> 2);
            enc[LEN-1] -= ((key[((LEN-1)^delat1)&3]^enc[LEN-2])+(enc[0]^delat)) ^ (((4*enc[0])^(enc[LEN-2]>>5))+((16*enc[LEN-2])^(enc[0]>>3)));
            int i = LEN-2;
            do
            {
                enc[i] -= ((key[(i^delat1)&3]^enc[i-1])+(enc[i+1]^delat)) ^ (((4*enc[i+1])^(enc[i-1]>>5))+((16*enc[i-1])^(enc[i+1]>>3)));
                i--; 
            }while(i != 0);
            enc[0] -= ((key[(0^delat1)&3]^enc[LEN-1])+(enc[1]^delat)) ^ (((4*enc[1])^(enc[LEN-1]>>5))+((16*enc[LEN-1])^(enc[1]>>3)));
            delat += 0x61C88647;
        }while(delat != 0);
    }
    int main(void)
    {
        int i = 0;
        de_xxtea();
        for(i = 0; i >   44 FOR_ITER                54 (to 100)
                 46 STORE_FAST               3 (i)        #for i in range(length/2):
      9          48 LOAD_FAST                1 (cipher)
                 50 LOAD_CONST               4 (2)
                 52 LOAD_FAST                3 (i)
                 54 BINARY_MULTIPLY
                 56 LOAD_CONST               5 (1)
                 58 BINARY_ADD
                 60 BINARY_SUBSCR            #cipher[2*i+1]
                 62 LOAD_FAST                1 (cipher)
                 64 LOAD_CONST               4 (2)
                 66 LOAD_FAST                3 (i)
                 68 BINARY_MULTIPLY
                 70 BINARY_SUBSCR            #cipher[2*i]
                 72 ROT_TWO            #swap 改变指针的指向来实现
                 74 LOAD_FAST                1 (cipher)
                 76 LOAD_CONST               4 (2)
                 78 LOAD_FAST                3 (i)
                 80 BINARY_MULTIPLY
                 82 STORE_SUBSCR
                 84 LOAD_FAST                1 (cipher)
                 86 LOAD_CONST               4 (2)
                 88 LOAD_FAST                3 (i)
                 90 BINARY_MULTIPLY
                 92 LOAD_CONST               5 (1)
                 94 BINARY_ADD
                 96 STORE_SUBSCR            #cipher[2*i], cipher[2*i+1] = cipher[2*i+1], cipher[2*i]
                 98 JUMP_ABSOLUTE           44    
                        #for i in range(length/2):
                            #cipher[2*i], cipher[2*i+1] = cipher[2*i+1], cipher[2*i]    
     12     >>  100 BUILD_LIST               0
                102 STORE_FAST               4 (res)    #res = []
     13         104 LOAD_GLOBAL              3 (range)
                106 LOAD_FAST                2 (length)
                108 CALL_FUNCTION            1
                110 GET_ITER
            >>  112 FOR_ITER                26 (to 140)
                114 STORE_FAST               3 (i)        for i in range(length)
     14         116 LOAD_FAST                4 (res)
                118 LOAD_METHOD              4 (append)
                120 LOAD_GLOBAL              5 (ord)
                122 LOAD_FAST                1 (cipher)
                124 LOAD_FAST                3 (i)
                126 BINARY_SUBSCR
                128 CALL_FUNCTION            1        
                130 LOAD_FAST                3 (i)
                132 BINARY_XOR
                134 CALL_METHOD              1        #res.append(ord(cipher[i])^i)
                136 POP_TOP
                138 JUMP_ABSOLUTE          112
     15     >>  140 LOAD_GLOBAL              6 (bytes)
                142 LOAD_FAST                4 (res)
                144 CALL_FUNCTION            1
                146 LOAD_METHOD              7 (hex)
                148 CALL_METHOD              0
                150 STORE_FAST               4 (res)    #res = bytes(res).hex()