title:A cross-protocol attack on the TLS protocol
author:Nikos Mavrogiannopoulos and
Frederik Vercauteren and
Vesselin Velichkov and
Bart Preneel
A Cross-Protocol Attack on the TLS Protocol
Nikos Mavrogiannopoulos
Frederik Vercauteren
KU Leuven
KU Leuven
Vesselin Velichkov
University of Luxembourg
ESAT/SCD/COSIC – IBBT
ESAT/SCD/COSIC – IBBT
Luxembourg
Leuven, Belgium
Leuven, Belgium
PI:EMAIL
PI:EMAIL
PI:EMAIL
Bart Preneel
KU Leuven
ESAT/SCD/COSIC – IBBT
Leuven, Belgium
PI:EMAIL
ABSTRACT
This paper describes a cross-protocol attack on all versions
of TLS; it can be seen as an extension of the Wagner and
Schneier attack on SSL 3.0. The attack presents valid ex-
plicit elliptic curve Diﬃe-Hellman parameters signed by a
server to a client that incorrectly interprets these parame-
ters as valid plain Diﬃe-Hellman parameters. Our attack
enables an adversary to successfully impersonate a server to
a random client after obtaining 240 signed elliptic curve keys
from the original server. While attacking a speciﬁc client is
improbable due to the high number of signed keys required
during the lifetime of one TLS handshake, it is not com-
pletely unrealistic for a setting where the server has high
computational power and the attacker contents itself with
recovering one out of many session keys. We remark that
popular open-source server implementations are not suscep-
tible to this attack, since they typically do not support the
explicit curve option. Finally we propose a ﬁx that renders
the protocol immune to this family of cross-protocol attacks.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
Protocols; K.4.4 [Computers and Society]: Electronic
Commerce—Security
Keywords
SSL, TLS, man-in-the-middle, cross-protocol attack, server
impersonation attack
1.
INTRODUCTION
The TLS protocol.
TLS is one of the major secure communications protocols on
the Internet, used by a variety of applications such as web
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
browsers, electronic mail, voice over-IP and more. The pro-
tocol derives from Netscape’s SSL 3.0 [14], and is the joint
attempt, under the umbrella of IETF, to create a secure pro-
tocol for e-commerce. The ﬁrst version of the protocol, TLS
1.0, ﬁxed the known issues [4] in SSL 3.0 and introduced
HMAC [17]. TLS 1.1 followed to address known attacks in
CBC encryption mode [2, 26] and RSA [16]. Today the latest
version is TLS 1.2 [11] but since none of the known weak-
nesses are classiﬁed as major, older versions of the protocol
including SSL 3.0 are still in use.
The TLS protocol is an agile protocol that allows peers to
negotiate their highest supported protocol version, as well
as the combination of ciphers used in a session. That com-
bination is called a ciphersuite; it typically determines the
symmetric encryption cipher with its operational mode, the
key exchange method and the message authentication al-
gorithm. The various versions of the protocol added new
ciphersuites, deprecated old ones, or kept the same set of
the previous version.
Not all available ciphersuites in TLS are equally strong: the
most prominent example were the ones marked as export ci-
phersuites. When strong cryptography was not allowed to be
exported from USA, major TLS-enabled web browsers that
originated in USA included ciphersuites known to be weak.
These supported the RSA-EXPORT key exchange method,
which used 512-bit RSA keys, and was combined with 40-
bit or 56-bit symmetric encryption. Fortunately they were
deprecated since TLS 1.1 in 2006 [10].
As a result of the various ciphersuites available in the pro-
tocol, a typical implementation includes several algorithms
oﬀering similar functionality. For example an implemen-
tation may support the Diﬃe-Hellman (DH) key exchange
algorithm, as well as elliptic curve Diﬃe-Hellman (ECDH).
This fact is exploited in our attack by taking advantage of
interactions between the diﬀerent ciphersuites. In particu-
lar we exploit the possibility that a client interprets signed
ECDH key exchange parameters as plain DH parameters.
The Wagner and Schneier attack.
Wagner and Schneier describe in [27] a server impersonation
attack on the SSL 3.0 [14] protocol. Although this attack
turned out to be impossible in practice due to an incorrect
interpretation of the protocol, the underlying idea is still
worth recalling. The attack transforms a server into an or-
62acle that signs messages submitted by the adversary.
In
particular the server is used by the adversary to sign DH
parameters, which are presented to the client as RSA pa-
rameters. This allows the recovery of the client’s secret by
the adversary and eventually to the establishment of a secure
session between the adversary and the client. In that session
the client is convinced that the adversary is the server he in-
tended to connect to. We will use the term cross-protocol
attack to describe this attack, as well as the family of at-
tacks that rely on interactions between distinct key exchange
methods. The term multi-protocol attack is also used in the
literature to describe this family of attacks [7].
Even if the Wagner and Schneier attack turned out to be
impossible to implement, it demonstrates that the TLS pro-
tocol violates the following principle set forth by Anderson
and Needham in [1].
Principle 3: Be careful when signing or decrypt-
ing data that you never let yourself be used as an
oracle by your opponent.
This weakness was ignored, possibly, because the only pub-
lished attack could not be implemented, and required the
client to request the deliberately weakened RSA-EXPORT
key exchange method.
Our attack.
As the protocol evolved and various other key exchange
methods such as SRP, PSK or ECDH [3, 13, 25] were added,
the fact that the server can be used as an oracle becomes
relevant again. In this paper we re-examine the Wagner and
Schneier attack in the context of the latest TLS protocol
version [11] and describe a new cross-protocol attack. The
attack uses the interactions between DH and ECDH key
exchanges.
It is based both on the ability to transform a
TLS server into an oracle that provides signed parameters,
and on TLS implementations blindly trusting those signed
parameters.
Our contributions in this paper are as follows.
• To our knowledge, our attack is the ﬁrst server imper-
sonation attack on the TLS protocol with complexity
much lower than a cryptanalytic attack on the crypto-
graphic primitives used;
• Our attack highlights a much larger family of cross-
protocol attacks that the TLS protocol is vulnerable
to, which was previously ignored;
• We show that although basic checks on DH protocol
parameters help to mitigate simple attacks, they are
not suﬃcient to completely protect the protocol.
The adversary.
The adversary in both attacks is a Dolev-Yao adversary [12],
that has full control over the network communications.
Paper organization.
In Section 2 we present the Wagner and Schneier attack
on SSL 3.0 and the incorrect assumption that renders the
attack impossible. Then in Section 3 we present our attack
on the protocol, and in Section 4 we discuss the impact of
the attack on several implementations. Section 5 provides
a simulation of the attack in a real world scenario, and in
Section 6 we propose a ﬁx that makes TLS immune to this
family of attacks. Finally Section 7 concludes the paper.
Terminology.
This document assumes familiarity with the TLS proto-
col [11] and adopts its terminology. Furthermore, when we
refer to Diﬃe-Hellman key exchange we denote with g the
generator of the multiplicative group modulo p, and with
Ys and Yc the public values of the server and the client.
The explicit elliptic curves supported by TLS are given by
a Weierstrass equation of the form
y2 = x3 + ax + b mod q .
Note that we use q to denote the ECDH prime to distinguish
it from the plain DH prime p. The coeﬃcients a and b
are the curve parameters represented as integers modulo q.
The protocol works in a group generated by a base point
P (simply called base in the remainder of the paper). The
cofactor is deﬁned as the order of the curve (i.e. the number
of points on the curve) divided by the order of the base point.
A public ECDH share is of the form Q = [k]P = (X, Y ),
with k the private key, Q the elliptic curve point obtained
by scalar multiplication of P by k and X (resp. Y ) the x
(resp. y) coordinate of Q.
2. THE WAGNER AND SCHNEIER ATTACK
Wagner and Schneier in [27] describe a cross-protocol attack
(the authors refer to it as “key exchange algorithm rollback
attack”) based on the observation that the digital signature
in a DH key exchange does not cover any identiﬁer of the ne-
gotiated ciphersuite. According to the SSL 3.0 protocol [14]
when a DH key exchange has been negotiated, the group
parameters and key exchange data are sent by the server
in the ‘ServerKeyExchange’ message as shown in Fig. 1a.
The signature on that message is calculated on the algo-
rithm parameters, and the nonces exchanged by both peers.
The crucial observation is that the negotiated key exchange
method is not part of this signature.
This omission allows an adversary to re-use a signed ‘Server-
KeyExchange’ packet in another session, with another key
exchange method, by initiating a parallel connection to the
server. The attack deceives a client who advertises a ‘TLS -
RSA EXPORT’ ciphersuite and expects temporary RSA pa-
rameters in the ‘ServerKeyExchange’ message, into receiving
DH parameters from a ‘TLS DHE RSA’ ciphersuite. Note
that, the RSA-EXPORT key exchange requires the server to
generate a temporary 512-bit long RSA key pair and include
it in the ‘ServerKeyExchange’ message.
In both DH and
RSA-EXPORT the parameters are signed using the RSA
algorithm.
The attack assumes that the client reads and veriﬁes the
signature, and then reads the RSA parameters (see Fig. 1b)
one by one, yielding the following scenario. The client ver-
iﬁes the signature, reads the RSA modulus m, which corre-
sponds to the prime of the DH group p, and then reads the
RSA exponent e ﬁeld which corresponds to the group gener-
ator g. Therefore, the client encrypts the pre-master secret
k as kg mod p and includes it in its ‘ClientKeyExchange’
message. Since p is a prime number and g is known, it
is very easy to compute the g-th root of kg to recover k,
which allows the adversary to impersonate the server. Note
that the ‘Finished’ messages that provide handshake mes-
sage modiﬁcation detection using message hashes encrypted
and authenticated with the session keys, cannot detect this
attack since the adversary recovers the pre-master secret.
630
7
15
0
7
15
length of p (Lp)
length of m (Lm)
p
m
length of g (Lg)
length of e (Le)
g
e
length of Ys (LYs )
Ys
Lm
Le
9>=
>;
9>=
>;
Lp
Lg
LYs
8>:
8>:
8>:
(a) Diﬃe-Hellman
(b) RSA-EXPORT
Figure 1: The contents of the ServerKeyExchange message in Diﬃe-Hellman and RSA-EXPORT key exchange meth-
ods. Each row represents a 2-byte (16-bit) ﬁeld, unless the length is explicitly given. All indicated lengths are in
bytes.
The Wagner and Schneier attack
Client
Adversary
Server
ClientHello
TLS RSA EXPORT. . . , CRAND
ClientHello
TLS DHE RSA. . . , CRAND
ServerHello
TLS DHE RSA. . . , SRAND
ServerHello
TLS RSA EXPORT. . . , SRAND
Certif icate
Certif icate
ServerKeyExchange
{p, g, Ys},
sig(CRAND, SRAND, p, g, Ys )
ServerKeyExchange
Verify signature;
read p as RSA m and g as
exponent
ServerHelloDone
ClientKeyExchange kg mod p
Recover k
ChangeCipherSpec, Finished
ChangeCipherSpec, Finished
Application Data
Figure 2: A message sequence chart describing the Wagner and Schneier attack on SSL 3.0. The dashed lines indicate
a forwarded message.
64The authors noticed that the SSLRef 3.0b1 implementa-
tion was immune to the attack and attributed the failure
to a paranoid sanity check of this particular implementa-
tion. However, tests we performed on other implementations
which did not include such sanity checks also failed. Careful
examination of the TLS packet parsing reveals that the fail-
ure of the attack is due to the serialized way TLS packets
need to be parsed. The variable length vectors [14] used in
the structure deﬁnition in Fig. 1 require an implementation
to read the vector length before reading data, hence an im-
plementation can only start parsing the packet serially, i.e.,
from start to end without being able to read a ﬁeld before
reading the previous one. In the RSA case, a client would
need to read the modulus length, then the modulus, and
the same for the exponent and signature ﬁelds. If the DH
‘ServerKeyExchange’ packet, which contains one additional
ﬁeld, is substituted, that ﬁeld will be read instead of the
signature and veriﬁcation fails.
Even though the Wagner and Schneier attack fails, it demon-
strates the idea of a cross-protocol attack utilizing two of the
SSL 3.0 key exchange methods, the DH key exchange and
the RSA-EXPORT key exchange.
3. A NEW CROSS-PROTOCOL ATTACK
Since version 1.0 [9] the TLS protocol has been augmented
with various other key exchange methods such as SRP, PSK
or ECDH [3, 13, 25].
In this section we present a server
impersonation attack on clients that support the DH key
exchange and wish to connect to a server that supports,
among others, the ECDH method.
In order to support the ECDH key exchange method, the
‘ServerKeyExchange’ message was augmented in [3] to al-
low for several elliptic curve ciphersuites supporting multi-
ple sub-options. The sub-option relevant to this paper is
the representation of the elliptic curve used. It allows for
explicit prime curves, explicit curves of characteristic 2, or
named curves. Depending on the negotiated ciphersuite the
structure containing the selected curve parameters is signed
by the server using an RSA or ECDSA key. The attack
we present requires the server to support the explicit prime
curve option, and the client to support the plain DH method.
Because the only common signature algorithm in the ECDH
and DH key exchanges is RSA, the server is also required to
possess an RSA signing key.
3.1 Summary of the attack
In the explicit prime curve option, the server includes in its
signed ‘ServerKeyExchange’ message the parameters of its
elliptic curve and an ephemeral public key to be used for
this session (see Fig. 3a). The randomness of the public key
contributes to the feasibility of achieving a cross-protocol
attack.
In the attack the adversary, after receiving the client’s Hello
message, initiates multiple connections to the server, until an
ECDH ‘ServerKeyExchange’ is presented that satisﬁes two
properties. The ﬁrst is that the message can be interpreted
as a valid DH ‘ServerKeyExchange’ message, and secondly,
the adversary can recover the exchanged DH key. After a
suitable message is received, the adversary forwards it to the
client, who veriﬁes the (valid) signature and proceeds with
the handshake. Assuming the adversary can recover the
exchanged DH key, the handshake with the client completes
and thus the server impersonation is successful. The attack
is sketched in Fig. 4.
We ﬁrst estimate the probability with which a valid ECDH
key exchange message can be interpreted as a valid DH key
exchange message. Then we investigate how the adversary
can recover the session key, either by explicitly computing a
discrete logarithm or forcing the session key to take a value
in a limited set. Finally, we compute the number of server
connections required by the simplest version of our attack.
3.2 Probability of valid key exchange message
Length requirements on key exchange parameters.
The attack success depends on whether the signed ECDH
parameters can be interpreted as DH parameters. In Fig. 3
we contrast the contents of the ‘ServerKeyExchange’ pack-
ets in both cases. The ECDH parameters consist of the
constant curve parameters followed by the randomly gen-
erated ECDH public key. For our attack to succeed, we
require that the p ﬁeld in the DH parameters extends past
the constant curve parameters1, which results in p having its
least signiﬁcant bytes and g and Ys fully positioned in the
space of the ephemeral elliptic curve public key and there-
fore have random contents. This means that multiple queries
to such server would provide ‘ServerKeyExchange’ messages
with ECDH parameters that if interpreted as DH parame-
ters will have variable lengths for g and Ys and there is a
non-zero probability for these lengths to have valid values
(i.e. add up to the remaining message length).
Before calculating this probability, we need to clarify when
these length ﬁelds are positioned in the ephemeral pub-
lic key space. As already mentioned, this depends on the
length of p, which is interpreted based on the contents of
the curve type and elliptic curve prime length (Lq) as shown
in Fig. 3a. Since in the explicit curves TLS option the
curve type byte contains the identiﬁer 1, the length in bytes
of p (Lp) would be interpreted as:
Lp = 1 || Lq = 256 + Lq ,
(1)
where || denotes concatenation. For the message to be parsed
correctly and the g and Ys lengths to be placed accordingly,
Lp must be larger than the length of all the ﬁxed parameters
and less than the total length of the ECDH parameters (mi-
nus the minimum length of the Lg, g, LYs , Ys ﬁelds being 6
bytes). The ﬁxed parameters are the prime q and the ﬁelds
marked as C in the ECDH message as shown in Fig. 3a.
Then:
C = La + Lb + Lbase + Lorder + Lcofactor + 7