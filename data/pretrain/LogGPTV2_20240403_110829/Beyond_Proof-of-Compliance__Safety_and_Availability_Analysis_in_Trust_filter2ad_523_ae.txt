has is that we consider restricted state changes. We now list
some similarities. The semantic approach we use is very
similar to the semantics in [8]. Both [1] and [8] consider
role inclusion queries in additional to membership queries.
In some sense, they try to answer queries that hold when
arbitrary new statements could be added, i.e., every role is
g-unrestricted and s-restricted; the case that some roles are
g-restricted is not considered.
In [10], evaluating queries
given a set of SDSI statements is reduced to model check-
ing pushdown systems; there, only a ﬁxed set of SDSI state-
ments is considered, which are encoded as transition rules
in the automata. Other works [4, 12, 16] do not handle role
inclusion queries or consider restricted state changes.
6 Conclusion
Trust management systems such as RT allow indepen-
dent principals to delegate partial authority over resources.
While this is useful in many situations, delegation also
raises the possibility of unanticipated and undesirable ac-
cess. If Alice delegates access to her friend Bob, how can
she be sure that Bob does not give permissions to her enemy
Carol? We address this question by studying several forms
of safety and availability properties, including general con-
tainment queries that capture both safety and availability.
Although the trust management primitives we consider
are more expressive than some aspects of the HRU model
[9], our main results show that persistence of nontrivial
safety and availability properties may be algorithmically
tractable. Speciﬁcally, form-1 queries and form-2 queries,
both involving containment between a role and a ﬁxed set
of principals, can be answered using datalog programs that
run in polynomial time. For general role inclusion queries,
we look at several cases involving different policy sub-
languages. For BRT , which only allows membership and
delegation policy statements, containment for all reachable
states is computable by a stratiﬁed datalog program with
negation in polynomial time. For NRT , which is BRT plus
intersection, the problem becomes coNP-complete.
Intu-
itively, the reason is that multiple statements about a role
represent disjunction, while intersection of roles provides
a corresponding form of conjunction. For SRT , which in-
cludes role linking, role containment for all reachable pol-
icy states remains decidable, but our current upper bound is
coNEXP (or double-exponential time).
We believe that security analysis is a critical problem
for trust management. While combining policy statements
from independent principals has practical appeal, the ﬂexi-
bility of distributed policy comes at a price. An individual
or organization that owns a resource no longer has a direct
way to determine who may be able to access the resource
in the future. The key to providing assurance to trust man-
agement users is to develop security analysis methods. The
present paper identiﬁes and solves certain security analysis
problems, but much remains to be done. In more technical
terms, the full impact of linked roles on containment anal-
ysis is not yet clear. Our complexity bounds on contain-
ment analysis for LRT and SRT are not tight.1 Although
containment analysis has no efﬁcient algorithm in the worst
case, there may be tractable subcases or useful heuristics.
We also leave open for future work the consequences of
more intricate restriction on policy changes. For example,
it may be useful to impose restrictions that depend on the
current policy, possibly formulated as policy invariants in
some speciﬁcation language.
Acknowledgement
This work is supported by DARPA through SPAWAR
contracts N66001-00-C-8015 and N66001-01-C-8005. It is
also supported by DOD MURI “Semantics Consistency in
Information Exchange” as ONR Grant N00014-97-1-0505
and by DOD University Research Initiative (URI) program
administered by the Ofﬁce of Naval Research under Grant
N00014-01-1-0795.
We thank Fred Schneider and Somesh Jha for discussions
that lead to our study of safety and availability properties in
Trust Management. We also thank the anonymous review-
ers for their encouragement.
1After this paper has been submitted, we proved that containment anal-
ysis in LRT is PSPACE-complete. We plan to include this result in a
journal submission based on the current paper, so that the result can be
peer-reviewed ﬁrst. Exact complexity bound for containment analysis in
SRT is still open; our conjecture is that it is also PSPACE-complete.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
11
A Proofs
Case (m1): A.r ←− E ∈ P(cid:2)
Case (m2): A.r ←− B.r1 ∈ P(cid:2)
A.1 Proofs of Fact 3.5 and Proposition 3.6
Fact 3.5: Given P, R, a role A.r, and a principal E that
does not occur in P, A.r is g-unbounded if and only if there
such that SP(P(cid:2)) |= m(A, r, E).
exists a reachable state P(cid:2)
Proof. The “only if” part follows from the deﬁnition of g-
unbounded roles.
In the “if” part, because SRT is monotonic, we can as-
is derived from P
sume without loss of generality that P(cid:2)
by adding some statements; let P(cid:2) = P ∪ P1. Given any
principal Z, one can replace with Z all occurrence of E in
the bodies of statements in P1, obtaining a new set of state-
ments, P2. Let P(cid:2)(cid:2) = P(cid:2) ∪ P2. P(cid:2)(cid:2)
is reachable from P
because it modiﬁes the deﬁnitions of the same roles as does
. We show that SP(P(cid:2)(cid:2)) |= m(A, r, Z) by using induc-
P(cid:2)
tion on i to show that for all A.r, if m(A, r, E) ∈ TSP(P(cid:1))↑i,
then SP(P(cid:2)(cid:2)) |= m(A, r, Z). The basis is trivially satis-
ﬁed because TSP(P(cid:1)) ↑0= ∅.
In the step, m(A, r, E) ∈
TSP(P(cid:1)) ↑i+1. This must be due to one of the four rules
in SP(P(cid:2)), (m1), (m2), (m3), or (m4), which gives us the
four following cases:
. By construction of P(cid:2)(cid:2)
,
. SP(P(cid:2)(cid:2)) |= m(A, r, Z) follows from
A.r ←− Z ∈ P(cid:2)(cid:2)
(m1).
and m(B, r1, E) ∈
TSP(P(cid:1)) ↑i.
The induction hypothesis now gives us
|= m(B, r1, Z),
|=
from which SP(P(cid:2)(cid:2))
SP(P(cid:2)(cid:2))
m(A, r, Z) follows by (m2).
P(cid:2)
and
m(A, r1, B), m(B, r2, E) ∈ TSP(P(cid:1)) ↑i for some B.
|=
The induction hypothesis now gives us SP(P(cid:2)(cid:2))
m(B, r2, Z). From m(A, r1, B) ∈ TSP(P(cid:1)) ↑i, we have
|=
|= m(A, r1, B), which gives us SP(P(cid:2)(cid:2))
SP(P(cid:2))
m(A, r1, B) by monotonicity of SRT . We now have
SP(P(cid:2)(cid:2)) |= m(A, r, Z) by (m3).
and
m(B1, r1, E), m(B2, r2, E) ∈ TSP(P(cid:1))↑i. This case pro-
ceeds similarly to case (m2) above.
Proposition 3.6: Given any P, R = (G,S), A.r ∈
Roles(P), and Z ∈ Principals(P) ∪ {(cid:26)}, UB(P,R) |=
such that P ∗(cid:5)→R P(cid:2)
ub(A, r, Z) if and only if there exists P(cid:2)
and SP(P(cid:2)) |= m(A, r, Z).
Proof. The “only if” part (Soundness): If UB(P,R) |=
ub(A, r, Z), consider P(cid:2) = P ∪ {X.u ←− Z | X.u ∈
Roles(P) − G}. We show by induction on i that
if
ub(A, r, Z) ∈ TUB(P,R) ↑i, then SP(P(cid:2)) |= m(A, r, Z).
In the step, ub(A, r, Z) ∈
The basis is trivial.
TUB(P,R) ↑i+1, one of the rules in UB(P,R) is used to
derive this. Case (u) is impossible, as A (cid:25)= (cid:26). Case (u0):
Case (m4): A.r ←− B1.r1 ∩ B2.r2 ∈ P(cid:2)
A.r ←− A.r1.r2
Case (m3):
∈
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
12
|= m(A, r1, B), m(B, r2, Z),
Case (u2): A.r ←− B.r1 ∈ P ⊆ P(cid:2)
, A.r ←− Z ∈
A.r ∈ Roles(P) − G, by construction of P(cid:2)
. So SP(P(cid:2)) |= m(A, r, Z) follows immediately by
P(cid:2)
(m1). Case (u1): A.r ←− Z ∈ P ⊆ P(cid:2)
. In this case,
SP(P(cid:2)) |= m(A, r, Z) also follows immediately by (m1).
and
ub(B, r1, Z) ∈ TUB(P,R) ↑i. The induction assump-
tion now gives us SP(P(cid:2)) |= m(B, r1, Z), from which
SP(P(cid:2)) |= m(A, r, Z) follows by (m2).
Case (u3): A.r ←− A.r1.r2 ∈ P ⊆ P(cid:2)
and ub(A, r1, B), ub(B, r2, Z) ∈ TUB(P,R) ↑i
for
some B.
The induction assumption now gives us
SP(P(cid:2))
from which
SP(P(cid:2)) |= m(A, r, Z) follows by (m3).
Case (u4): A.r ←− B1.r1 ∩ B2.r2 ∈ P ⊆
and ub(B1, r1, Z), ub(B2, r2, Z) ∈ TUB(P,R) ↑i.
P(cid:2)
|=
The induction assumption now gives us SP(P(cid:2))
|=
from which SP(P(cid:2))
m(B1, r1, Z), m(B2, r2, Z),
m(A, r, Z) follows by (m4).
The “if” part (Completeness): Suppose that there exists
such that SP(P(cid:2)) |= m(A, r, Z). If
a reachable state P(cid:2)
A.r (cid:25)∈ G, then UB(P,R) |= ub(A, r, Z) from (u0). For the
case in which A.r ∈ G, we use induction on i to show that
if m(A, r, Z) ∈ TSP(P(cid:1))↑i, then UB(P,R) |= ub(A, r, Z).
The basis is trivial. In the step, there are four cases. Case
. From A.r ∈ G, we have A.r ←−
(m1): A.r ←− Z ∈ P(cid:2)
Z ∈ P. So UB(P,R) |= ub(A, r, Z) follows by using
(u1).
and m(B, r1, Z) ∈
TSP(P(cid:1))
The induction hypothesis gives us
UB(P,R) |= ub(B, r1, Z), from which we obtain the
desiredUB(P,R) |= ub(A, r, Z) by (u2).
A.r ←− A.r1.r2
m(A, r1, B), m(B, r2, Z) ∈ TSP(P(cid:1))
B.
ub(A, r1, B), ub(B, r2, Z),
desiredUB(P,R) |= ub(A, r, Z) by (u3).
and
m(B1, r1, Z), m(B2, r2, Z) ∈ TSP(P(cid:1))↑i. This case is sim-
ilar to the ones above.
P(cid:2)
for
The induction hypothesis gives us UB(P,R)
and
some
|=
from which we obtain the
Case (m4): A.r ←− B1.r1 ∩ B2.r2 ∈ P(cid:2)
Case (m2): A.r ←− B.r1 ∈ P(cid:2)
Case (m3):
↑i.
∈
↑i
A.2 Proof of Lemma 4.1 and Proposition 4.2
We introduce the following terminology for the proof.
The program BCP(P,R) has a stratiﬁcation of two strata.
Deﬁne BCP 1 to be the ground instantiation of clauses
deﬁning lb and fc in BCP(P,R), and BCP 2 to the ground
instantiation of clauses deﬁning nc. (We use BCP instead
of BCP(P,R) for succinctness.) We write BCP |= a if
a ∈ Γ2
BCP . When a is a ground instance of fc or lb, we write
BCP |=i a if a ∈ ΦBCP 1,∅↑i. When a is a ground instance
of nc, we write BCP |=i a is a ∈ ΦBCP 1∪BCP 2,Γ1
Lemma 4.1: Given a BRT state P, R, two roles X.u and
↑i.
BCP
A.r, if BCP(P,R) |= fc(X, u, A, r), then X.u contains
A.r. If X.u contains A.r and A.r is g-unrestricted, then
BCP(P,R) |= fc(X, u, A, r).
Proof. Soundness: If BCP |= fc(X, u, A, r), then there
exists an integer i such that BCP |=i fc(X, u, A, r). In-
duction on i. The basis is trivial, as ΦBCP 1,∅ ↑0= ∅.
Consider the step; either c or (c2) is used to deduce that
BCP |=i+1 fc(X, u, A, r). Case (c):
it must be that
X.u = A.r, so it is trivial that X.u contains A.r. Case
(c2): X.u ←− B.r1 ∈ P|R and BCP |=i fc(B, r1, A, r).
By induction hypothesis, B.r1 contains A.r. Furthermore,
X.u←− B.r1 exists in every reachable state; therefore, X.u
contains A.r.
Completeness: Suppose X.u contains A.r and A.r is
g-unrestricted. Consider P(cid:2) = P|R ∪ (A.r ←− E),
in which E does not occur in P. Observe that X.u in-
is reachable. Since SP(P(cid:2)) |=
cludes A.r is true, since P(cid:2)
m(A, r, E), it must be that m(X, u, E) ∈ TSP(P(cid:1)) ↑i for
some i. To complete the proof, we use induction on i to
show that for each Y.u, if m(Y, u, E) ∈ TSP(P) ↑i, then
BCP |= fc(Y, u, A, r). Basis is trivial.
In the step, one
of (m1) and (m2) is used to deduce that m(Y, u, E) ∈
TSP(P(cid:1)) ↑i+1. Case (m1): Y.u ←− E ∈ P(cid:2)
, it must
be that Y.u = A.r, since E does not occur in P. From
(c), BCP |= fc(Y, u, A, r). Case (m2): Y.u ←−