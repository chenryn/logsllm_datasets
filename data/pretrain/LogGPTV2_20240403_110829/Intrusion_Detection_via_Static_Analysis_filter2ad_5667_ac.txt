by  construction, also accepts all prefixes of sentences gen- 
erated by  the grammar above.  The actual  grammar would 
be more complicated if it took this into account. 
The NDPDA  described earlier  may  be obtained by  ap- 
plying  the  trivial  top-down  construction  to  the  context- 
free  grammar obtained  above  (similar  to  LL(0) parsing, 
except  that  we  keep  the  conflicts  and  thus  obtain  a  non- 
deterministic  automaton).  This top-down  construction  is 
convenient because its operation corresponds closely to ex- 
ecution in procedural languages such as C. See Figure 2 for 
an example. 
Monitoring algorithm  To detect attacks, we must moni- 
tor the system calls issued  by  the application  and simulate 
the  operation of  the NDPDA on those  inputs.  It turns out 
that efficient simulation of the NDPDA is a significant the- 
oretical  and  engineering challenge, especially  as we  scale 
up to intrusion detection on very large applications. 
The  most  naive  approach  is  to  exhaustively  search 
through  all possible  non-deterministic choices of  the  ND- 
PDA. In  other words, at each time step, we maintain  a list 
of  all  possible  stack  configurations  of  the  NDPDA; when 
a  new  system  call  is  observed,  for each  previously  possi- 
ble configuration we compute the set of new configurations 
the NDPDA might transition to, and update the list of possi- 
ble stack configurations. However, in practice this approach 
is  untenable  for  any  but  the  simplest application, because 
these lists grow exponentially large in the length of the sys- 
tem call trace (in fact, even infinitely  large, in the presence 
of left-recursion). 
Less  naively,  we  might  hope  that  standard  parsing  al- 
gorithms might  be  applicable here.  Of  course, we cannot 
use standard parsers (such as yacc) because our NDPDA is 
non-deterministic.  It  is easy  to see that, for every context- 
free grammar I?,  there is some program which generates r, 
and  in  practice,  real  applications produce grammars with 
considerable non-determinism and complexity. So, we need 
an efficient algorithm for online parsing of general context- 
free languages. 
It  is also important to have  a top-down parsing routine. 
As described in Section 5, dealing with some of the special 
features of the Unix runtime environment requires us to oc- 
casionally  step outside  of  the context-free framework and 
perform operations directly on the set of possible stack con- 
figurations.  Real programs execute in  a roughly top-down 
start executing main()  before executing any 
fashion-we 
this  seems to  rule  out  bottom-up pars- 
of its  callees-so 
ing.  Unfortunately,  much of the  work  in the  literature  on 
recognizing general context-free languages (e.g., the CYK, 
Earley, Tomita, and GLR techniques  [37, IO,  16, 331) uses 
bottom-up methods. 
Consequently, we were forced to develop new techniques 
for efficient top-down  parsing. A full description of our al- 
gorithm  is  outside  of  the  scope  of  this  paper,  but  we  list 
a few useful  properties of  the  algorithm that  make it well 
suited for our purposes: 
0  It supports online parsing:  as each system call is  ob- 
served,  we  can  decide  whether  the  resulting  partial 
trace forms the prefix of a sentence in the context-free 
language, as required for real-time intrusion detection. 
It is relatively efficient: like other general context-free 
recognizers, its worst-case running time is cubic in the 
length  of  the  system  call  trace.  This is  likely  to  be 
too slow for large applications, but is much better than 
exponential-time solutions.  In practice, we encounter 
cubic-time behavior only occasionally. 
0  Most importantly, it supports real-time access to the set 
of possible top-down parse trees.  The key data struc- 
ture is a representation of the set of possible call stacks 
as a regular  language over the alphabet of stack sym- 
bols.  This  lets  us modify  this  data structure directly 
whenever  we  need  to step outside of the  context-free 
framework. 
More details on this algorithm are available elsewhere [34]. 
4.4.  The digraph model 
We  next  introduce a  very  simple approach which  com- 
bines  some of  the  advantages of the callgraph model  in  a 
simpler formulation.  The basic  approach,  first  introduced 
in previous work on runtime intrusion detection [14], is to 
consider windows of consecutive system calls. 
Our model will thus be a list of the possible k-sequences 
of  consecutive  system  calls,  starting  at  an  arbitrary  point 
during  program execution.  In  our prototype  implementa- 
tion, we consider only the special case k  = 2 for simplicity. 
Note that k-sequences of system calls with k  = 2 are often 
referred to  as digraphs, so we call this the digraph model. 
We consider here both the special case of digraphs and the 
general case. 
Building the model  We could derive the set of possible 
k-sequences  from  the  control-flow  graph  in  a  straightfor- 
ward  fashion, but  we  observe that  there  is  a  more precise 
approach  available  if  we  use  the  context-free language of 
possible  system  call  traces,  L(l?), as  introduced  in  Sec- 
tion 4.3.  To  determine whether the  sequence s  E  C k  can 
occur in a system call trace during normal application exe- 
cution, we simply test whether (E" SE") n L(r) # 0, which 
is effectively  computable [ 18, 271.  Repeating this test  for 
161 
each  s E  C'  gives  a  general  algorithm  to  build  the  de- 
sired model.  Unfortunately,  this  precomputation has  run- 
ning time 0 ( k 3  x IEl  x IC\'),  which is exponential in k. In 
practice, it is slow enough that we have only experimented 
with the k  = 2 case. 
Monitoring  algorithm  Detecting  attacks  then  becomes 
easy once we have performed the above precomputation to 
build a list of the allowed k-sequences.' We keep a history of 
the last k  - 1 system calls, and when we see a new system 
call, we check whether the resulting k-sequence is allowed. 
Thus, the runtime monitoring algorithm  is extremely effi- 
cient for this model; the trade-off is that the digraph model 
is  less  precise  than  the  callgraph or abstract  stack model, 
and thus can be expected to miss more attacks. 
5. Implementation issues 
We sketched above three theoretical frameworks for im- 
plementing  intrusion  detection  using  static  analysis. 
In 
practice, though, there are a number of complications that 
arise when implementing these ideas. We discuss here some 
of the important implementation challenges and how to han- 
dle them. 
5.1. Non-standard control flow 
Implementations  of  control-flow  analysis,  when  in- 
tended  for  optimization,  often  give  up in  the  presence  of 
non-local control flow  (such as signals, setjmpo, and so 
on). However, we have found that, in practice, real applica- 
tions of interest for intrusion detection often use these fea- 
tures. Therefore, we describe how to augment the modelling 
frameworks described above to incorporate these forms of 
non-standard control flow. 
Function pointers  To build the program call-graph in the 
presence  of  function  pointers,  it  is  crucial  to  be  able  to 
predict the possible targets of every indirect call through a 
function pointer. Many sophisticated algorithms for pointer 
analysis are available in the literature [ 1 1,3 1,301, but in our 
implementation we simply assume that every pointer could 
refer to any function whose address has been taken. Empir- 
ically, even this very  crude technique  seems to suffice for 
our purposes. 
Signals  Many  operating  systems  allow  applications  to 
register a signal handler to be executed upon reception of 
a  signal.  It  is  straightforward to  statically  recognize  sig- 
nal handlers:  we simply look for system calls of  the form 
signal (i , f p) , which binds the handler f p to the signal i 
so that when this signal is received, the function referred to 
by the function pointer fp will be called. Consequently, the 
real  challenge  is to  augment the model  to represent these 
additional possibilities for control flow. 
Naively, one might consider adding to the control-flow 
graph an extra edge from each node to each possible signal 
handler to represent this additional control flow. This naive 
solution would work, but it adds an enormous amount of ex- 
tra non-determinism to the control-flow graph, so our anal- 
ysis would become less precise: the intrusion detection sys- 
tem would become significantly slower (because we need to 
follow more possible  paths  in  the control-flow  graph) and 
poorer at recognizing intrusions (because real attacks might 
mimic unlikely  paths  through signal handlers and thereby 
avoid detection). We would prefer to model signals without 
incurring these costs. 
Fortunately, there is a clean solution available.  We ex- 
ploit the presence of a runtime component in our system: 
Principle 1.  If  you  can arrange  to  receive an extra  event 
whenever  some  exceptional path  (such as invocation of a 
signal  handler) might be taken, you can often  improve  the 
precision of the model. 
In  this case, we arrange to monitor not only the system 
calls the application makes but also the signals the applica- 
tion receivess, and we ensure that all the extra paths in  the 
control-flow  graph are pre-guarded  by  an  initial signal re- 
ception event.  In many  Unix operating systems, all signal 
handlers invoke the sigreturn0 system call after they re- 
turn, so we also add a post-guard to the end of each extra 
path, too. 
It  is  straightforward to  augment the control-flow  graph 
to  ensure  that  every execution  of  a  signal handler  will  be 
bracketed by both a pre- and post-guard. These extra paths 
in  the  control-flow graph will  not  be  triggered  unless  the 
appropriate signal is received, and to save space they may be 
implicitly represented and only re-generated on demand, so 
they are effectively invisible except in the cases where they 
are necessary. These techniques provide a precise, efficient, 
and simple way to extend any of the models in Section 4 to 
reflect  the semantics of signals. 
The  setjmpo primitive  ANSI  C provides  a  form  of 
non-local  control  flow  that  is  sometimes  used  to  provide 
a crude form  of exception handling or error recovery:  the 
set jmp () primitive saves the stack pointer and other regis- 
ters, and then longjmp () may be called by a subroutine to 
roll the registers, and hence the stack, back to its saved state. 
In the callgraph model, we may  simply add an extra tran- 
sition from each longjnp0 to every possible  setjmpo, 
'The  ability to monitor  signals  is conveniently already available with 
most  existing  mechanisms  for  process  tracing,  since it  is  used  by  some 
debuggers. 
162 
but this will not work for the abstract stack model because 
long jmp () modifies the call stack. 
We do not know of a good static approach to call stack 
analysis in the presence of set jmp(>, but fortunately, there 
is no need to solve this problem statically.  Instead, we ex- 
tend the runtime monitoring agent. Our monitor maintains a 
running list of all call stacks that were possible when some 
setjmp() call  was  visited  earlier  in  this  execution  trace. 
Each longjmpo call can be emulated by adding this accu- 
mulated  list  to the automaton’s current set of states.  Since 
sets of states are represented as regular languages in the ab- 
stract stack model  (see Section 4.3), the  union  operations 
may be implemented efficiently. 
As  a future extension, we might  also enforce the  con- 
straint that returning  from a function activation invalidates 
any  setjmp(> it may  have called.  This would allow  us to 
garbage-collect old set jmp (1 states (thereby reducing stor- 
age costs by some unknown amount) and to exclude impos- 
sible longjmp (> targets (thereby improving precision  and 
attack detection power).  So far, though, we have not found 
the need.  Our experience has been that  setjmp0 is typ- 
ically used just often enough that  it  cannot be  completely 
ignored but rarely enough that the burden of the above sim- 
ulation techniques is minimal. 
In any case, our experience with setjmp0 suggests the 
following lesson for hybrid static-dynamic systems6: 
Principle 2.  Some progrunt properties  that are diflcult to 
infer statically  may  become  easier to model  satisfactorily 
when  the  burden  is  ofloaded  to a  runtime  agent,  where 
available. 
5.2. Other modelling challenges 
Libraries  Our approach requires a model for each library 
function  that might be called.  Therefore, we  use  a modu- 
lar analysis to build  these models.  In  particular,  we mod- 
ified the gee compiler to output intermediate analysis out- 
put  files alongside each object file as it  compiled,  and we 
modified the linker to combine the intermediate files into a 
whole-program analysis.  A  side benefit was that we could 
analyze existing software packages by simply using the pro- 
vided Makefiles to compile them. 
61n the digraph model, neither Principle  I  nor 2 is much help, since no 
help is available from the runtime agent nor is there any convenient way to 
monitor setjmp0 and longjmp0 calls at runtime. Thus, we are forced 
to use more conservative  techniques.  Consider  temporarily  extending the 
alphabet with the symbols 5 and E  to represent setjmp0 and longjmp0 
invocations.  We infer that digraph  slsz is possible  in some program ex- 
ecution only if  ( I )  slsz is a possible digraph in the original  (unextended) 
language, or (2) both  SI E  is a possible  digraph when the language is ex- 