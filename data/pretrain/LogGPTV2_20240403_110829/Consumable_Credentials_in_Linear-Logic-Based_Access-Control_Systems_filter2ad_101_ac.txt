proof, or alternatively implementing the third party using a
multiparty implementation among the ratiﬁers themselves.
This latter alternative requires an assumption that a majority
of the ratiﬁers behave honestly, but in this case the contract-
signing protocol can be particularly efﬁcient [11].
Summary To summarize, a proof of access is con-
structed as follows. First, a client Alice requests from
Bob that he grant her access to a resource. Bob re-
sponds with the statement of the theorem Alice must
prove; typically, the statement is of the form Bob says
action(action ). Alice proceeds to construct a proof of
Bob says action(action ) using consumable credentials
Charlie signedRC F1 and Danielle signedRD F2. Once
Alice has completed this proof, she contacts the ratiﬁers of
Charlie’s and Danielle’s credentials, sending them the proof
of Bob says action(action) and requesting that each rat-
ify the credential for which it is responsible. Upon verify-
4This example invisible protocol has been shown to not be abuse
free [20]: someone involved in the protocol can prove to an outsider that
he has the power to force the the protocol to complete or abort. While
undesirable in the case of general contract signing, abuse freedom is not
necessary in the current application; we simply require atomicity here.
ing that the credential submitted for ratiﬁcation has not been
consumed, each ratiﬁer records the use of the consumable
credential and produces the appropriate ratiﬁcation creden-
tial, which they send to Alice. Alice then sends the proof to
Bob, along with all the relevant consumable credentials and
their ratiﬁcation credentials, which she just received. Bob
then checks all of the cryptographic signatures and popu-
lates his reusable environment with the reusable credentials.
For every consumable credential, Bob checks that a match-
ing ratiﬁcation credential is supplied and that the ratiﬁcation
credentials correspond to the current proof before adding
the credential to his linear environment. Bob then veriﬁes
the proof and if successful, grants Alice access to the de-
sired resource.
5. Discussion
Unsatisﬁed Requests The Atomicity property prevents
capricious consumption of credentials during the proof pro-
cess. However, once completed, even a valid and com-
plete proof may not be accepted, in which case extra-logical
means can be used to restore any consumed credentials. (As
in the case where a ticket holder is refused entry to a base-
ball game due to a rainout, she should expect reimburse-
ment.) To minimize the frequency of such occurrences and
to aid their resolution when they do occur, the policy proved
by a party requesting access could include a statement is-
sued by the resource monitor indicating both the availability
of the resource and that a valid proof will be rewarded with
access. If this statement (itself a credential) is consumable
when the resource is, proof construction would fail during
ratiﬁcation step if the resource monitor isn’t able to promise
delivery of the resource. Moreover, a ratiﬁed proof is evi-
dence that can be presented to an arbiter in the event of a
dispute.
Alternatives to Linear Logic Ratiﬁcation is an extra-
logical mechanism that we use to enforce the consumption
of credentials, over and above the linear logic in which those
credentials are expressed and used. This begs the question
as to whether ratiﬁcation or a similar mechanism should
be modeled directly in the security logic, perhaps entirely
avoiding the need to specify policies in linear logic, and in-
stead permitting the use of a more standard or simpler logic.
We believe not, for two reasons. First, linear logic gives
us a clean and intuitive abstraction for reasoning about con-
sumable credentials. The speciﬁc details of how consump-
tion is enforced are separate from the idea that a particular
credential will be consumed after a ﬁxed number of uses;
hence, it is most straightforward for security policies to talk
about the idea while remaining unencumbered by the details
of the enforcement mechanism. This approach also makes it
possible to have multiple enforcement mechanisms that all
implement the same abstraction of consumable credentials.
Second, any enforcement mechanism that we pick must
be able to enforce consumption not only in the distributed
sense, but also within individual proofs (e.g., to prevent a
consumable credential representing $10 from being used
twice within the same proof). Although linear logic is not
the only formalism that permits this sort of reasoning, any
enforcement mechanism that we use will require similar
logical machinery. Since linear logic has been widely stud-
ied and is well understood, there seems to be little beneﬁt in
using a different formalism. A similarly established type of
logic that could instead be used to enforce credential con-
sumption is afﬁne logic. Both afﬁne and linear logic expend
hypotheses in ∆ as they are used, but linear logic also re-
quires that all the restricted hypotheses be used, whereas
afﬁne logic allows unused hypotheses in ∆ to be discarded.
Either type of logic would prevent over-consumption, but
we chose linear logic to prevent the silent disappearance of
consumable certiﬁcates in logical reasoning.
Alternatives to Consumable Credentials Our imple-
mentation of consumable credentials uses on-line servers
(the ratiﬁers) to validate credentials, which raises the ques-
tion of whether the consumable credentials themselves
could simply be issued immediately prior to the time they
are needed.
Such an approach, however, would pro-
hibitively curtail the ability to reason a priori about consum-
able credentials during the construction of proofs. Our tech-
niques are also related to countersigning; the advantage of
our approach lies in that we carefully address what it means
to consume multiple different credentials in the course of
creating a single proof. This is done in such a way to prevent
both the reuse of these credentials in other proofs and their
needless consumption in the course of constructing proofs
that will ultimately fail.
Ratiﬁer Costs To help it determine whether or not to rat-
ify a particular credential, a ratiﬁer will typically keep state
on a per-credential basis (e.g., the use count). Though this
is an additional burden on the ratiﬁer, it is no more than
the burden that is typically placed on normal credential is-
suers. Additionally, in many cases the per-credential state
will have to be kept only as long as the credential remains
unconsumed and has not yet expired. Because of this, in
the scenarios we envision, we expect the burden of keeping
state to be light.
6. Example
Using the concepts described in this paper it is easy to
implement a number of applications that use consumable re-
sources. Money is one of the easiest consumable resources
to think about, and indeed these techniques can be used
to develop a payment system within a logic-based access-
control framework. While we are not proposing this sys-
tem as an alternative to iKP [13], SET [46], NetBill [48]
and other electronic commerce protocols, it does serve to
illustrate the expression and manipulation of consumable
resources in a logic-based access-control framework.
As an example, imagine Alice walks into a store, ﬁlls her
shopping cart with items and proceeds to check out. Instead
of giving the clerk cash or a credit card, she instead presents
him with a proof that the store will be given its money.
In this scenario, Bob, the store owner, is the reference
monitor. He controls the items in his store, and will only re-
lease them once he has been given a proof of payment. Just
as with credit card payments, Bob doesn’t need the money
immediately, but he needs to be convinced that when he
later submits the proof Alice gave him to his bank, he will
be paid.
When Alice approaches the counter and begins to check
out, Bob issues her a challenge describing the proof of pay-
ment that she must produce.
G = ACH says action(pay , hBob, $100i, nonce) true
The challenge contains a nonce that is used to ensure fresh-
ness, enforce that the consumable credentials were ratiﬁed
with respect to this proof, and also to serve as a transac-
tion identiﬁer. Since Bob cares chieﬂy that he is paid and
not who will pay him, the challenge requires the payment
to be authorized by the Automated Clearing House (ACH),
a trusted authority that facilitates transfers between banks.
Alice’s task is now to construct a proof of payment. She
starts the proving process by stating her willingness to pay
Bob.
C0 = Alice signed action(pay, hBob, $100i, nonce)
Alice must now demonstrate that there exists a chain of
delegate and speaksfor relations from herself to the
ACH. She has reason to believe such a chain exists because
she has an account in good standing with a bank that has
been certiﬁed by the ACH.
During proof generation Alice obtains the following four
credentials.
C1 = BankA signed (Alice speaksfor BankA.Alice)
C2 = ACH.BC signed (BankA speaksfor ACH.BC.BankA)
C3 = ACH signed (delegate (ACH, ACH.BC, pay))
C4 = ACH.BC signed (delegate (ACH.BC, ACH.BC.BankA, pay))
The ﬁrst two credentials describe the speaksfor relation-
ships between Alice and her bank and between her bank and
the Bank Certiﬁer (BC) of the ACH. Credentials C3 and C4
form a delegation chain from the ACH to its Bank Certi-
ﬁer, and from there to Alice’s bank (BankA). Using these
delegations, any pay statement made by BankA has the au-
thority of being made by the ACH, i.e., BankA is accredited
by the ACH.
Alice must now ﬁnd a delegation statement allowing her
to spend money from her account.
C5 = BankA signedRBankA (delegate (BankA, BankA.Alice, pay))
This credential differs from the others in that
is
consumable—Alice is allowed to withdraw money only
while her account has a positive balance. With this creden-
tial, Alice can construct a proof of
it
M : ACH says action(pay, hBob, $100i, nonce) true
All that remains is to ratify credential C5. To obtain the
ratiﬁcation credential for C5, Alice submits the proof to
BankA’s ratiﬁer, RBankA, which is named in that creden-
tial. The ratiﬁer deducts $100 from Alice’s account and
transfers that money to the ACH. He also creates the fol-
lowing ratiﬁcation credential.
C6 = RBankA signed hdelegate (BankA, BankA.Alice, pay), M,
ACH says action(pay, hBob, $100i, nonce)i
With this credential in hand, Alice now has a ratiﬁed proof
which she submits to Bob for veriﬁcation. Bob, convinced
he will be paid for the items in Alice’s cart, releases them to
Alice. Bob will later show the proof to his bank, which in
turn will hand it over to the ACH, which will actually trans-
fer the funds to Bob’s account. The Bank records the nonce
in the statement of Bob’s proof to prevent Bob from cashing
the proof again. The full proof can be seen in Appendix B.2.
7. Implementation
At the time of this writing, we are in the process
of deploying a distributed authorization framework called
Grey [8] to control access to ofﬁces and other physical space
on two ﬂoors (more than 30,000 square feet) of a new build-
ing at our institution. To support this, during building con-
struction each door was equipped with an electric strike
controlled by an embedded computer. A user exercises her
authority to open a door via her smartphone, which connects
to the embedded computer using Bluetooth, and receives a
goal to prove (including a nonce). The smartphone utilizes
a distributed proving system (similar to the one described
in [9]) to generate the proof, possibly with help from other
smartphones that hold necessary credentials, and ships this
proof to the embedded computer in order to open the door.
Our plans include deploying Grey-capable smartphones to
roughly 100 building residents.
We have developed the enforcement mechanism for lin-
ear logic presented here as a means to implement access-
control policies that the current system presently cannot.
)
s
m
(
e
m
T
i
2000
1800
1600
1400
1200
1000
800
600
400
200
0
Ratification Time vs. Number of Ratifiers
Breakdown of Time Spent in Ratification Among 5 Ratifiers
2000
1800
1600
1400
1200
1000
800
600
400
200
)
s
m
(
e
m
T
i
ZKP Creation
ZKP Verification
Network/Waiting
Logic Verification
2
3
4
5
Number of Ratifiers
0
1
2
3
Ratifier
4
5
Figure 1. The latency of the ratiﬁcation pro-
tocol as a function of
the number of rati-
ﬁers, includes the cost of credential veriﬁca-
tion, proof checking, and the creation, veriﬁ-
cation and communication of non-interactive
zero-knowledge proofs.
Figure 2. Breakdown of costs involved in the
ratiﬁcation protocol for each of the ﬁve rati-
ﬁers involved in a ﬁve-ratiﬁer contract signing
protocol.
This includes, for example, the ability to delegate author-
ity to open an ofﬁce once (see Appendix B.1). As we ex-
pand this testbed to include vending machines, the need for
a distributed authorization system supporting consumable
credentials (e.g., denoting money) will only grow.
We have completed a prototype implementation of a
contract-signing protocol via which consumable credentials
are ratiﬁed (see Section 4). In our prototype implementa-
tion, proofs of access are represented in the LolliMon lan-
guage [42], which supports the linear connectives crucial
for deﬁning our consumable credentials. To verify the va-