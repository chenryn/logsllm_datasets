2.应用加固
目前有一些在线的应用安全加固服务。用户可上传需要加固的应用，服务器接收应用
后会从安全，逆向和调试难度等方面对应用进行评估，并按照用户需要提供在这些方面完
成更改后的版本供下载。
10.9关于移动认证
为了方便用户登录认证，通常移动应用通过保存登录信息或者加上简单的本地认证方
式（如手势密码或者数字PIN码）来使用户免于输人完整的流程。
以支付宝为例，限定数额以下的付款甚至不需要认证。这背后有很多需要背景数据收
集，从第一次正常登录时设备本身的信息，包括用户日常操作行为收集的大数据等。在发
现异常时，就会触发完整的认证过程了。当然在攻击者完全控制手机的情况，如果所有认
证信息的要素都可以通过手机获取到，例如保存的认证信息，动态认证短信等，更多能够
做到的也只有提高攻击的成本，面不能完全避免认证信息的盗用。
https://www.owasp.org/images/c/ca/ASDC12-An_InDepth_Introduction_to_the
Android_Permissions_Modeland_How_to_Secure_MultiComponent_Applications.pdf
http://individual.utoronto.ca/jameshuang/PScout-CCS2012.pdf
https://www.cert.org/secure-coding/research/mobile-standards-analysis.cfm?https://www
apple.com/business/docs/iOS_Security_Guide.pdf
---
## Page 219
第11章Clcyc
代码审计
源代码审计是一种提高软件安全性的方法。在之前的章节中已对SDL有所介绍，在本
章中，更偏向于具体操作。我们将了解一些代码审计的方法和工具，从人工到借助工具，
最后会通过一些实例来看到如何通过现有的工具进行审计，以及这些工具如何帮助我们发
现并消除漏洞。需要注意的是，在源代码审计阶段，一些产品安全设计上的问题可能已经
较难被发现和修改，代码审计更多是发现代码实现上的错误和遗漏。
在代码量可控的情况下，并且没有很好的工具支持时，我们可以考虑通过总结经验，
自己实现相关的检查工具。以找到未正确过滤数据类型的漏洞为例，定位问题可以简单分
为以下几个步骤：1）标注出高危行为入口函数2）标注数据获取来源3）标注数据过滤函数。
之后回朔调用过程，添加简单的逻辑。
11.1自动化审计产品
对于代码量大的产品，人工审计明显不能满足需求，这时需要寻求工具的帮助。代码
分析技术由来已久，1976年科罗拉多大学的Lloyd D.Fosdick和LeonJ.Osterweil在ACM
Computing Surveys 上发表了著名的 Data Flow Analysis in Software Reliability论文，其中就
提到了数据流分析、状态机系统、边界检测、数据类型验证、控制流分析等技术。随着计
算机语言的不断演进，代码分析技术也在日趋完善。目前有数量众多的开源和商业源码审
---
## Page 220
208技术篇
计工具建立在这些分析技术之上，其中包括Foritify，Coverity，FindBugs等。这些自动化
的代码审计产品能够满足对审计量和强度的要求，并且大多提供和开发环境相整合的组件。
可以融入到日常的开发和编译过程当中。工具不可避免会产生漏报和误报，在处理工具生
成的报告时，需要人工对生成的结果进行验证。
11.2 Coverity
Coverity是斯坦福大学DawsonEngler教授和他的三个学生发起完成的代码审计工具，
目前为包括NASA等500多个公司或政府部门提供服务。选择其为例的原因有：1）在具体
的使用中感觉误报率相对较少2）目前有免费针对开源代码审计的服务3）可以找到相关的
原型论文。Coverity支持的语言有C，C++和Java，支持发现的问题类型包括：
 resources leaks
 dereferences of NULL pointers
 incorrect usage of APIs
 use of uninitialized data
 memory corruptions
 buffer overruns
 control flow issues
 error handling issues
 incorrect expressions
 concurrency issues
 insecure data handling
 unsafe use of signed values
 use of resources that have been freed
以C/C++为例，Coverity的分析引擎Prevent包含以下的组件和功能参见表11-1。
表11-1Coverity的分析引擎Prevent 包含的组件和功能
引擎
功能
路径流程引擎
通过构建一个表示经过每一个函数的所有的路径的图表分析代码中的每个函数的
控制流
数据追踪引擎
用于分析从程序中每个路径中的声明收集的所有的整型和布尔型等数据
统计引擎
用于分析代码作为一个整体的行为特征
---
## Page 221
第11章代码审计209
（续）
功能
过程间调用总结引擎
个主要的创新。使得Prevent 可以执行整个程序的分析，分析文件间和模块间
的任何层次的复杂的调用链
类型流程引擎
用于提高C++分析中依赖于类层次关系的报告的结果的精度
虚假路径引擎
用于分析每个分支条件，以确定在当前路径它将是真、假或不确定
加速引擎
保存横越每个路径时的每个缺陷分析所收集的信息：消除元余路径，不需要横越
任何不必要的路径来找到最多的缺陷
数据传播引擎
把过程间调用总结引擎产生的所有总结和数据追踪引擎记录的所有数据汇总起来。
是 Coverity 特有的、上下文敏感的过程间分析能力的关键
增量分析引擎
通过缓存分析数据来提高性能，以便后续的分析仅需要包含变化的数据
如果想看到实际Coverity运行的结果，可以在scan.coverity.com上浏览一些针对开源
软件进行的审计结果，目前已经有为数众多的开源软件通过Coverity提高代码安全质量。
图11-1是某个开源项目的输出结果。
图11-1输出结果
https://scan.coverity.com/o/oss_success_stories中包含甄选出通过Coverity发现的漏润
列表，如图11-2所示。
点击ViewDefect可以看到详细问题描述，现在以一个curl（一个利用URL语法在命令
行方式下工作的开源文件传输工具）中的漏洞作为例子进行查看针对某问题的具体展示结果：
https:/scan.coverity.com/o/oss_success_stories/46,如n[图 11-3 所示。
---
## Page 222
210技术篇
COVERITY
Success Stories: Sample of Defects found and fixed
Dvdr3dmtedl hrnget
CeveigecDeonpion
电：
图11-2漏洞列表
Sample of Defect
Project Name CID
Checker
curl
1299430 TANTED_SCALAR
Irsecure
Ths umed out to be a security flw, now known.as CVE-2015-3237. Fl
handirg
 sener fol lient to send ff dat from memory it ddt intend to.
8. lkger,bouta
7 vx_img
vmb c 78)
gme.c785
10. loser,
boundt
mb.c 785
aetet,dita
imb.c781
imb.c786
814
troe.
 cg +of 
图11-3详细问题播述
这是一个存在于curl中的信息泄露漏洞。由于没有对SMB服务端返回的长度数据进行
合法性检查，通过构造特定网络包数据，将导致curl客户端发送出非预期的数据，导致信
息泄露。该漏洞也已被修复，分配的CVE编号为CVE-2015-3237，公告见http://curl.haxx
---
## Page 223
第11章代码审计211
se/docs/adv_20150617B.html。下面是Coverity给出的函数中漏洞触发流程。
696
*done = true;
697
break;
698
69 9
default:
700
smb_pop_message (conn) 
701
return CURLE_OK; /* ignore */
702
703
704
smb_pop_message (conn) 
705
706
return CURLE_OK;
707
708
709
static CURLcode
smb_request_state (struct
bool *done
710
711
struct
doqoad·be1state
SMB_REQUESTING", taking false branch
720
721
if (req=>state == SMB_REQUESTING)(
722
result = smb_send_tree_connect (conn) 
72.3
if (result){
72 4
connclose (conn,
"sMB: failed to send tree connect message*);
725
return result;
72.6
LZL
728
request_state (conn, SMB_TREE_CONNECT) :
729
730
731