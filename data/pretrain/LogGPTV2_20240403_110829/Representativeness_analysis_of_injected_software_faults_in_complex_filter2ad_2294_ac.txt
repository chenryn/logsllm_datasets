### Fault Detection and Analysis in Complex Systems

In the context of fault detection, each vertical fault is analyzed, and corrections are applied for a given fault. From the perspective of faults, the percentage of failed executions and the amount of elusive faults are ordered by their respective percentages. A significant portion (63.60%) of these faults is detected in the remaining test cases, indicating that these faults often elude testing in code sections that are difficult to cover and exercise. This highlights the challenge of generating test cases to achieve high coverage in complex systems [1].

#### Fault Elusiveness and Test Case Coverage

A first subset of faults (63.60%) is detected by a small number of test cases because the corresponding source code is not executed frequently. These faults are considered elusive. The second subset (21.83%) seldom manifests itself, even if its source code location is executed many times. This subset is also representative of elusive faults.

**Figure 5.** Percentages of failures and correct executions for each test case.

- **Fault Detection and Coverage:** The percentage of faults detected and covered by each test case is low for non-elusive faults. There are only small differences in the number of detected failures among test cases (with few exceptions). This suggests that the activation of elusive faults requires specific inputs, making it an open issue for future research.

- **Experiment Setup:** We selected a random sample of 668 faults, keeping about the same proportion of faults causing 0 or 1 failure. Each faulty version was executed 34 times, one for each test case, ensuring no conflicts with TPC-C (e.g., some test cases forced a reboot of the DBMS).

**Figure 7.** Experiment setup for the validation using TPC-C.

- **Fault Distribution:** Figure 8 shows the distribution of faults with respect to the number of failures after the addition of TPC-C. During the experiments, 98.65% of faults in the sample were always revealed, which represents a demanding workload. Only 1.35% caused 2 or more failures, and 0.45% were triggered by TPC-C alone.

**Figure 8.** Distribution of faults with respect to the number of failures (under test cases and TPC-C running at the same time).

#### Validation of Results

To gain more confidence in our conclusions, we conducted a second experimental campaign to confirm whether the low number of non-elusive faults is due to the simplicity of the test cases or the nature of the faults. We augmented the test cases with an implementation of the TPC-C benchmark to analyze the results.

**Figure 6.** Distribution of faults with respect to the number of failures.

- **Non-Elusive Faults:** The majority of injected faults cause a small number of failures, with 29.56% causing 0 or 1 failure. However, 12.73% of faults (at least 75% of failures) and 14.57% (more than 35) caused at least 50% of the failures. This supports the thesis that faults identified by G-SWFIT are elusive and cause a large number of failures.

#### Improving Fault Representativeness

Our goal is to distinguish between elusive and non-elusive faults before any actual fault injection. This ability will allow us to filter out non-elusive faults, thus increasing the representativeness of the fault load.

**Figure 9.** Elusive faults distribution across types.

- **Analysis of Fault Types and Components:** We deeply analyze the key features of faults, including their type and the component in which they are located. To understand if differences in fault elusiveness are related to specific fault types or components, we compared the distributions of elusive and non-elusive faults.

- **Statistical Analysis:** Using the Kolmogorov-Smirnov (KS) test, we evaluated whether the distributions of elusive and non-elusive faults are statistically different. The KS test (p-value = 0.4333) indicates that the fault type alone cannot discriminate between elusive and non-elusive faults. However, the elusiveness is influenced by the target component, suggesting that the interplay between faults and the surrounding code affects their detectability.

**Figure 10.** Non-elusive faults distribution across types.

- **Filtering Non-Elusive Faults:** We observe that the percentage of non-elusive faults tends to be higher in certain components. If these components can be identified, they can be discarded from the fault load, reducing the skew of non-elusive faults in the results and saving time in experiments.

- **Complexity Metrics:** To characterize the components, we collected a set of complexity metrics, including cyclomatic complexity, dependencies, and code size. These metrics can reveal where faults may hide from tests. We used decision trees to extract the hidden relationships between complexity metrics and non-elusive faults.

**Table 2.** Software complexity metrics.

| Name | Description |
|------|-------------|
| AvgCyc | Average cyclomatic complexity of functions in the component |
| MaxCyc | Maximum cyclomatic complexity of functions in the component |
| LoC | Number of lines of code |
| OutDepC | Dependencies of the component ("fan-out"), number of components |
| OutDepR | Dependencies of the component ("fan-out"), number of references |
| InDepC | Dependencies on the component ("fan-in"), number of components |
| InDepR | Dependencies on the component ("fan-in"), number of references |

- **Decision Trees:** Before training the decision tree, we split the components based on their complexity metrics. For example, a question might be "Is LoC greater than 340?" This technique provides a hierarchical set of questions to classify the elements based on their complexity metrics.

**Figure 11.** Elusive faults distribution across components.

- **Conclusion:** By filtering out non-elusive faults and focusing on the components that are more likely to contain elusive faults, we can improve the representativeness of the fault load and enhance the effectiveness of fault detection in complex systems.

978-1-4244-7501-8/10/$26.00 Â©2010 IEEE

DSN 2010: Natella et al.