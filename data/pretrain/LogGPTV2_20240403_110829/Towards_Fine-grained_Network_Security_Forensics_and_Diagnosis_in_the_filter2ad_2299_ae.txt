ForenGuard is as follows: It will first search for forwarding graphs
for the flows of the user and find the flow rules that drop the
packets from this user. Then it keeps searching for the control
plane execution traces that generate those messages. ForenGuard
can quickly locate the Firewall application and observe the flow
rule which drops the packets triggered by a new flow event and
one entry of the variable rules which is configured from the REST
API before.
5.3 Overhead and Scalability
ForenGuard instruments logging code into the controller and will
add unavoidable overhead to the SDN control plane. To quantify
the added overhead, we measure two performance metrics of the
SDN controller with and without ForenGuard. One is the through-
put overhead and the other is latency overhead, i.e., how much
our system will affect the message processing throughput and la-
tency of SDN controllers. To evaluate the throughput overhead,
we use the Cbench tool to generate a large amount of new flow
events and evaluate the maximum processing rate in the control
plane. To evaluate the delay overhead, we make use of two frequent
OpenFlow messages, PacketIn message and StatsReq/Res mes-
sage. The PacketIn message is triggered by a new flow or a flow
entry matching and sent from the data plane. The StatsReq/Res
message is used for the control plane to query for flow stats from
the data plane.
To measure the delay of processing PacketIn messages, we use a
machine with two network cards to keep sending network packets
through one network card to the network. The other network card
FlowMod msg4 Install Sw3 : R2R2:srcip = 10.0.0.2, action: forward = 210.0.0.2Sw2Sw3Sw112312123sw3Packet_In Event from Sw3 : 3RoutingDecisionWriteReadPacket_In Event from Sw1 : 3sw1SingletonTask.run()linkUpdatesEventstorageServiceReadWritehandleLldp()Figure 9: Overhead of ForenGuard
work, ForenGuard focuses on a unique context of SDN which
decouples control and data planes and also requires both network
and host level tracking.
SDN Troubleshooting: Peyman et al. [24] used packet header
space analysis to statically check network specifications and con-
figurations. Veriflow [25] and NetPlumber [23] verify network in-
variants dynamically when flow rules update. These verification
approaches highly rely on the predefined invariant policies, but
the lack of expressiveness can only help with known violations.
OFRewind [43] can record and replay the communication messages
between SDN control plane and data plane. STS [35] improves the
delta-debugging algorithm that can generate a minimal sequence
of inputs that can trigger a controller bug. However, the delta-
debugging algorithm does not scale well with the network size and
STS can only provide coarser-grained culprits. The most relevant
work to our paper is NetSight [17] and path query [31]. NetSight
[17] monitors packet history to analyze the data plane behaviors
and troubleshoot the network. Path query [31] provides a query
language for path-based traffic monitoring. Compared with Net-
Sight, we directly record the activities of the control and data planes
for troubleshooting. Also, unlike path query which provides the
monitoring of network performance issues, our tool provides the
monitoring and diagnosis of network forwarding/security issues.
SDN Security: SDN security gradually becomes a trending re-
search topic in both academia and industry. Most existing work falls
into two themes. The first theme makes use of the logically central-
ized control plane to implement security logic (e.g., monitoring and
measurement [47, 48], access control [18, 32], firewall and IDS [20],
DDoS detection [2, 16], security services composition [36]). The sec-
ond theme focuses on the security challenges that are introduced
by SDN itself. AVANT-GUARD [38] and FloodGuard [41] target
on the denial-of-service threat to the control plane. FortNOX [34]
proposes a security enforcement kernel to controllers. TopoGuard
[19] detects and mitigates the topology poisoning attack caused
by spoofed network packets from the attackers. Rosemary [37] en-
hances the resilience of the control plane by using a sandbox-based
approach to prevent faulty applications from crashing the entire
control plane. DELTA [28] introduces a fuzzing-based penetration
testing framework for different controllers. ConGuard [44] detects
harmful race conditions that could be exploited to launch attacks
Figure 10: Diagnosing a Disconnection Problem Using Foren-
Guard
Figure 11: Log Data Generating Rate
without using taint or causing blurriness. BackTracker [26] records
the files and processes in the operating system and builds them in a
dependency graph for intrusion detection. Different from all above
(a)(b)(c)addRule()R5: srcip = 10.0.0.2, action: dropreceive()Firewall AppmatchWithRule()Write...Packet_In EventList<> rulesOF_FlowMod Flow ruleREST API EventReadin the SDN controllers. Compared with SecureBinder [21] which
targets a new attack which fools the network infrastructure devices
(e.g., DHCP server), our tool targets the attacks that fool the SDN
controller applications.
7 DISCUSSION AND FUTURE WORK
ForenGuard takes the first and significant step towards a network
security forensics and diagnosis system in the SDN context. How-
ever, ForenGuard is still preliminary and has several limitations
for future research work to improve, which we will discuss below.
Limitation on Threat Model. In this work, we do not assume
malicious SDN apps in the first place because currently apps are
well vetted before deployment due to their extreme importance to
the operation of the entire networks. We also note that existing
Java-based SDN apps leave less or no room for buffer overflow and
code injection attacks. In the worst cases, even if an exploited mali-
cious SDN app may directly attack ForenGuard, this could easily
expose their existence; or they could intentionally generate fake
executing logs to mislead the forensics function of ForenGuard,
for which we think there are still anomalies that could be detected
from code or behavior level. Nevertheless, we note that vetting/de-
tecting malicious apps is a separate/orthogonal topic different from
the forensic/diagnosis research targeted by this paper. Our future
work will look into those issues.
Extension to Other Controllers and Distributed Controllers.
ForenGuard leverages some generic principles used by all these
controllers (e.g., how they dispatch and receive events), as well as
some heuristics of the Java language (e.g., reasoning about refer-
ence data types like Set, List, Array and their methods according to
Java 7). Therefore, we believe our technique is relatively generic
and extensible to other mainstream Java-based controllers (e.g.,
OpenDaylight, ONOS) as well. However, we admit that it requires
more efforts to implement our proposed approach to other non-Java
controllers.
ForenGuard could also be extended to support different types
of distributed controller models. For example, in the ONOS [7]
model of distributed controllers, ForenGuard can work on each
individual core/controller in the forensics stage, and then perform
the diagnosis through the merged forensic data. This is one of our
future work.
Accuracy of the Static Analysis. Our current implementation
of ForenGuard relies on existing static analysis techniques in Soot.
The techniques are known to be not 100% accurate. For example,
the static data flow tracking is not flow-sensitive. However, we
think the issue of the static analysis itself is beyond the scope of
this study. ForenGuard is focusing more on what to forensic and
how to diagnose security problems. However, our tool could also
benefit from any future research in the area of improving static
analysis.
Room for Optimization. Though ForenGuard provides the
customizability to tune the recorded activity types, there is still
room for the optimization of the storage. For example, ForenGuard
could benefit from previous work (e.g., VAST [40]) which proposed
several compression schemes for forensic data. In our future work,
we will investigate more optimization schemes and study the proper
design for our case.
8 CONCLUSION
In this paper, we propose ForenGuard, a first-in-its-kind SDN
forensics and diagnosis tool that integrates both control and data
planes, as well as both network and host level forensics and di-
agnosis. ForenGuard dynamically records fine-grained activities,
builds them as event-oriented execution traces of the control plane
and state transition graphs of the data plane, and provides diagnosis
functions for users to locate the suspicious activities and pinpoint
the root causes of the forwarding problems. The evaluation results
show that ForenGuard is useful in SDN networks and only adds
acceptable runtime overhead to the SDN control plane.
ACKNOWLEDGMENTS
This material is based upon work supported in part by the Na-
tional Science Foundation (NSF) under Grant no. 1617985, 1642129,
1700544, and 1740791. Any opinions, findings, and conclusions or
recommendations expressed in this material are those of the authors
and do not necessarily reflect the views of NSF.
REFERENCES
[1] Cbench Controller Benchmarker. https://github.com/andi-bigswitch/oflops/
tree/master/cbench.
[2] DefenseFlow: SDN Applications and DDoS Attack Defense. http://www. rad-
ware.com/Products/DefenseFlow/.
[3] Floodlight Controller. http://www.projectfloodlight.org/floodlight/.
[4] LearningSwitch Application.
https://github.com/floodlight/floodlight/blob/
master/src/main/java/net/floodlightcontroller/learn-
ingswitch/LearningSwitch.java.
[5] Mininet: Rapid Prototyping for Software Defined Networks. http://yuba. stan-
ford.edu/foswiki/bin/view/OpenFlow/.
[6] MongoDB. https://www.mongodb.com/.
[7] ONOS Controller Platform. https://onosproject.org/.
[8] OpenDayLight controller. https://www.opendaylight.org/.
[9] OpenFlow: Innovate Your Network. http://www.openflow.org.
[10] POX Controller. http://openflow.stanford.edu/ display/ONL/POX+Wiki.
[11] S. Crosby A. and D. S. Wallach. 2009. Efficient Data Structures for Tamper-evident
Logging. In Proceedings of the 18th Conference on USENIX Security Symposium
(Usenix Security).
[12] M. Canini, D. Venzano, P. Peresini, D. Kostic, and J. Rexford. 2012. A NICE Way
to Test OpenFlow Applications. In Proceedings of the 9th USENIX Symposium on
Networked Systems Design and Implementation (NSDI).
[13] E. Chan, S. Venkataraman, F. David, A. Chaugule, and R. Campbell. 2010. Foren-
scope: a framework for live forensics. In Proceedings of the 2010 Annual Computer
Security Applications Conference (ACSAC).
[14] A. Chen, A. Haeberlen, W. Zhou, and B. T. Loo. 2017. One Primitive to Diagnose
Them All: Architectural Support for Internet Diagnostics. In Proceedings of the
Twelfth EuroSys Conference 2017 (EuroSys).
[15] M. Dhawan, R. Poddar, K. Mahajan, and V. Mann. 2015. SPHINX: Detecting
Security Attacks in Software-Defined Networks. In Proceedings of the 22th Annual
Network and Distributed System Security Symposium (NDSS).
[16] S. K. Fayaz, Y. Tobioka, V. Sekar, and M. Bailey. 2015. Bohatei: Flexible and Elastic
DDoS Defense. In Proceedings of The 26th USENIX Security Symposium (Usenix
Security).
[17] N. Handigol, B. Heller, V. Jeyakumar, D. MaziÃĺres, and N. McKeow. 2014.
I
Know What Your Packet Did Last Hop: Using Packet Histories to Troubleshoot
Networks. In Proceedings of the 11th USENIX Symposium on Networked Systems
Design and Implementation (NSDI).
[18] S. Hong, R. Baykov, L. Xu, S. Nadimpalli, and G. Gu. 2016. Towards SDN-Defined
Programmable BYOD (Bring Your Own Device) Security. In Proceedings of the
22th Annual Network and Distributed System Security Symposium (NDSS).
[19] S. Hong, L. Xu, H. Wang, and G. Gu. 2015. Poisoning Network Visibility in
Software-Defined Networks: New Attacks and Countermeasures. In Proceedings
of the 22th Annual Network and Distributed System Security Symposium (NDSS).
[20] H. Hu, W. Han, G. Ahn, and Z. Zhao. 2014. FlowGuard: Building Robust Firewalls
for Software-defined Networks. In Proceedings of the Third Workshop on Hot
Topics in Software Defined Networking (HotSDN).
[21] S. Jero, W. Koch, R. Skowyra, H. Okhravi, C. Nita-Rotaru, and D. Bigelow. 2017.
Identifier Binding Attacks and Defenses in Software-Defined Networks. In Pro-
ceeding of the 24th USENIX Security Symposium (USENIX Security).
[22] Y. Ji, S. Lee, E. Downing, W. Wang, M. Fazzini, T. Kim, A. Orso, and W. Lee.
2017. Rain: Refinable Attack Investigation with On-demand Inter-Process Infor-
mation Flow Tracking. In Proceedings of the ACM Conference on Computer and
Communications Security (CCS).
[23] P. Kazemian, M. Chang, H. Zeng, G. Varghese, N. McKeown, and S. Whyte. 2013.
Real Time Network Policy Checking using Header Space Analysis. In Proceedings
of the 10th USENIX Symposium on Networked Systems Design and Implementation
(NSDI).
[24] P. Kazemian, G. Varghese, and N. McKeown. 2012. Header Space Analysis:
Static Checking for Networks. In Proceedings of the 9th USENIX Symposium on
Networked Systems Design and Implementation (NSDI).
[25] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey. 2013. Veriflow:
Verifying Network-Wide Invariants in Real Time. In Proceedings of the 10th
USENIX Symposium on Networked Systems Design and Implementation (NSDI).
[26] S. T. King and P. M. chen. 2003. Backtracking intrusions. In Proceedings of the
19th ACM Symposium on Operating Systems Principles (SOSP).
[27] P. Lam, E. Bodden, O. Lhotak, and L. Hendren. The soot framework for java
program analysis: a retrospective. In CETUS 2011.
[28] S. Lee, C. Yoon, C. Lee, S. Shin, V. Yegneswaran, and P. Porras. 2017. DELTA: A
Security Assessment Framework for Software-Defined Networks. In Proceedings
of The 2017 Network and Distributed System Security Symposium (NDSS).
[29] H. Mai, A. Khurshid, R. Agarwal, M. Caesar, P. B. Godfrey, and S. T. King. 2011.
Debugging the Data Plane with Anteater. In Proceedings of the ACM SIGCOMM
2011 Conference (SIGCOMM).
[30] G. Maier, R. Sommer, H. Dreger, A. Feldmann, V. Paxson, and F. Schneider. 2008.
Enriching Network Security Analysis with Time Travel. In Proceedings of the
ACM SIGCOMM 2011 Conference (SIGCOMM).
[31] S. Narayana, M. T. Arashloo, J. Rexford, and D. Walker. 2016. Compiling Path
Queries. In Proceedings of the 13th USENIX Symposium on Networked Systems
Design and Implementation (NSDI).
[32] A. Nayak, A. Reimers, N. Feamster, and R. Clark. 2009. Resonance: Dynamic
Access Control for Enterprise Networks. In Proceedings of the 1st ACM Workshop
on Research on Enterprise Networking.
[33] R. Pang, M. Allman, M. Bennett, J. Lee, V. Paxson, and B. Tierney. 2005. A First
Look at Modern Enterprise Traffic. In Proceedings of the 2005 Internet Measurement
Conference (IMC).
[34] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu. 2012. A Security
Enforcement Kernel for OpenFlow Networks. In Proceedings of ACM SIGCOMM
Workshop on Hot Topics in Software Defined Networking (HotSDN).
[35] C. Scott, A. Wundsam, B. Raghavan, A. Panda, A. Or, J. Lai, E. Huang, Z. Liu, A.
El-Hassany, S. Whitlock, H.B. Acharya, K. Zarifis, and S. Shenker. 2011. Trou-
bleshooting Blackbox SDN Control Software with Minimal Causal Sequences. In
Proceedings of ACM SIGCOMM Computer Communication Review.
[36] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson. 2013. FRESCO:
Modular Composable Security Services for Software-Defined Networks. In Pro-
ceedings of the 20th Annual Network and Distributed System Security Symposium
(NDSS).
[37] S. Shin, Y. Song, T. Lee, S. Lee, J. Chung, P. Porras, V. Yegneswaran, J. Noh, and
B. B. Kang. 2014. Rosemary: A Robust, Secure, and High-Performance Network
Operating System. In Proceedings of the 21th ACM Conference on Computer and
Communications Security (CCS).
[38] S. Shin, V. Yegneswaran, P. Porras, and G. Gu. 2013. AVANT-GUARD: Scalable and
Vigilant Switch Flow Management in Software-Defined Networks. In Proceedings
of the 20th ACM Conference on Computer and Communications Security (CCS).
[39] T. Taylor, S. E. Coull, F. Monrose, and J. McHugh. 2012. Toward Efficient Querying
of Compressed Network Payloads. In Proceedings of the 2012 USENIX Annual
Technical Conference (USENIX ATC).
[40] M. Vallentin, V. Paxson, and R. Sommer. 2016. VAST: A Unified Platform for
Interactive Network Forensics. In Proceedings of the 13th USENIX Symposium on
Networked Systems Design and Implementation (NSDI).
[41] Haopei Wang, Lei Xu, and Guofei Gu. 2015. FloodGuard: A DoS Attack Prevention
Extension in Software-Defined Networks. In Proceedings of the 45th Annual
IEEE/IFIP International Conference on Dependable Systems and Networks (DSN).
[42] Y. Wu, A. Chen, A. Haeberlen, W. Zhou, and B. T. Loo. 2017. Automated Bug
Removal for Software-Defined Networks. In Proceedings of the 14th USENIX
Symposium on Networked Systems Design and Implementation (NSDI).
[43] A. Wundsam, D. Levin, S. Seetharaman, and A. Feldman. 2011. OFRewind:
Enabling Record and Replay Troubleshooting for Networks. In Proceedings of the
2011 USENIX Annual Technical Conference (USENIX ATC).
[44] L. Xu, J. Huang, S. Hong, J. Zhang, and G. Gu. 2017. Attacking the Brain: Races
in the SDN Control Plane. In Proceedings of The 26th USENIX Security Symposium
(Usenix Security).
[45] A. Yavuz, P. Ning, and M. Reiter. 2012. Efficient, compromise resilient and append-
only cryptographic schemes for secure audit logging. Financial Cryptography
and Data Security (2012).
[46] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. 2007. Panorama: Capturing
System-wide Information Flow for Malware Detection and Analysis. In Proceed-
ings of the ACM Conference on Computer and Communications Security (CCS).
[47] C. Yu, C. Lumezanu, V. Singh, Y. Zhang, G. Jiang, and H. V. Madhyastha. 2013.
FlowSense: Monitoring Network Utilization with Zero Measurement Cost. In
Proceedings of the 14th International Conference on Passive and Active Measurement
(PAM).
[48] M. Yu, L. Jose, and R. Miao. 2013. Software Defined Traffic Measurement with
OpenSketch. In Proceedings of the 10th USENIX Symposium on Networked Systems
Design and Implementation (NSDI).
[49] W. Zhou, Q. Fei, A. Narayan, A. Haeberlen, B. T. Loo, and M. Sherr. 2011. Secure
Network Provenance. In Proceedings of the 23rd ACM Symposium on Operating
Systems Principles (SOSP).