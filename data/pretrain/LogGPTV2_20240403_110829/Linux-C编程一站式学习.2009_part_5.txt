程序可以这样写：
4.第一个程序 请点评
第3行的/*
虽然这只是一个很小的程序，
通常一本教编程的书中第一个例子都是打印"Hello,World."，这个传统源自[K&R]，用C语言写这个
个特殊的名字
上一页
例 1.1. Hello World
S
S
Hello,
S
S
 gcc main.c -o main
 gcc main.c
. /main 
··
*/结构是一个注释（
C程序总是从main里面的第
int main(void)
/* main: generate some simple output */
#include 
world.
 printf("Hello, world.\n");
return 0;
，但我们目前暂时还不具备相关的知识来完全理解这个程序，
编译后在当前目录下生成可执行文件a.
 编译器会忽略从/*到*/的所有字符，
(Comment)
第1章程序的基本概念
全国嵌入式人才培训基地
4.第一个程序
一条语句开始执行的
其中可以写一些描述性的话，
，可以用gcc的-o参数自己指定文件名：
out
，所以写注释没有语法规
直接在命令行输入这个可
，解释这段程序在
比如程序
下一页
---
## Page 31
报警告了：
编译既不报错也不报警告，一切正常，但是运行程序什么也不打印。如果打开-wal1选项编译就会
不容忽视的。出警告信息说明你的程序写得不够规范，
这个警告信息是说类型不匹配，但勉强还能配得上。警告信息不是致命错误，
world.\n");改成printf(1);然后编译运行：
有些时候编译器的提示信息不是error而是warning，例如把上例中的printf（"Hello，
的printf（"Hello，world.\n");改成printf(0);然后编译运行:
明程序写得不够规范，
各种警告信息的严重程度不同，
但程序的运行结果往往是不正确的，例如上面的程序运行时出了
如果整个编译过程只有警告信息而没有错误信息，
到的错误提示并不能直接指出谁是犯人，
拼写？对于初学者来说，
拼写不敏感（尤其是英文较差的初学者）
第1行有错误，很多初学者对照着书看好几遍也看不出自己这一行哪里有错误，
这个错误提示非常紧凑，
成了stdoi.h，在编译时会得到错误提示：
这样使我们更容易看出这两行是属于main的定义之中的，要写出漂亮的程序必须有整齐的缩
在main的0括号中，
C语言用0括号（Brace或Curly Brace）把语法结构分成组
句return ;也是如此。
有的警告信息，
图包含一
正如前面所说，
进
(Indent)
，我猜这个才是您想要的，对吗？"可惜没有任何编译器会友善到这个程度，
，第1节“缩进和空白"将介绍推荐的缩进写法。
$ gcc -Wall main.c
siS
Segmentation fault 
main.c: In function 'main':
一个叫做stdoi.h的文件,
S
./a.out
gcc main.c
，不管是严重的还是不严重的，然后把这些问题从
编译器对于语法错误是毫不留情的，
在代码中可以用若干个空格（Blank）和Tab字符来缩进，
一般还是能正确运行的，
，初学者往往不容易看明白出了什么错误，
，像上面这种警告几乎一定表明程序中有Bug，
，可惜我没有找到这个文件，
而只是一个线索，你需要根据这个线索做一些侦探和推
 他们还不知道这些符号是什么意思又如何能记住正确的
，仍然可以生成可执行文件。
如果你的程序有-
“可能有Bug，
但我却找到了-
.在上面的程序中print±和return语句套
代码中全部消灭。比如把上例中
一个段错误，这属于运行时错误
 即使知道这个错误提示说的是
虽然能编译生成可执行文件，
一点拼写错误，例如第一行写
，编译仍然可以继续
而另外一些警告只表
但是，
，缩进不是必须的，但
，也就是让gcc提示月
大多数时候你所得
，因为他们对符号和
警告信息也是
但这
3
您试
是
---
## Page 32
的错误提示就会从容得多了。
误提示时就会很容易想到错误原因是什么了。这样反复练习，有了一定的经验积累之后面对编译器
能很容易地把错误原因和错误提示信息对应起来记住，
译器给出的错误提示并把改动还原。因为错误是你改出来的，
习题 请点评
3.程序的调试
个编译命令时都加上-Wa11选项。
能帮助你发现错误。虽然本书的命令行为了突出重点通常省略-wal1选项，
如果printf中的0是你不小心写上去的（例如错误地使用了编辑器的查找替换功能）
样
从一个正确的程序开始每次改动一小点，
尽管编译器的错误提示不够友好，
页
quaunbre) parinbar Tinu-uou araum zuawnbie Iinu :buturem :L:o·uteu
但仍然是学习过程中一个很有用的工具。你可以像上面那
全国嵌入式人才培训基地
 然后编译看是什么结果,
起始页
上一级
 你已经知道错误原因是什么了，
第 2 章 常量、变量和表达式
如果出错了
但是强烈建议你写每-
，就尽量记住编
 这个警告就
下三
所以
---
## Page 33
6.字符类型与字符编码
4.第一个程序
5.表达式
4.赋值
3. 变量
1. 继续Hello World
Ⅲ
第 2 章 常量、变量和表达式 请点评
第2章常量、变量和表达式
全国嵌入式人才培训基地
全国嵌入式人才培训基地
部分I.C语言入门
起始页
上一级
1. 继续Hello World
下一页
---
## Page 34
使用注释需要注意两点：
第一个注释跨了四行,
一下。首先，注释可以跨行，也可以穿插在程序之中，看下面的例子。
有些改动会导致编译出错，
在第4节“第一个程序"中，
（Coding Style）之一，
（Asterisk）并没有特殊含义,
1.继续Hello World 请点评
上一页
1．注释不能嵌套（Nest）使用，
法，在C99中被标准化。
字符都属于注释,
text3*/无法解析
/*text2 */ text3*/是错误的，编译器只把/*text1
例 2.1.带更多注释的HelloWorld
有很多语法和现在最常用的写法并不一样，但为了向后兼容性
C、C89和C99。Ken Thompson和Dennis Ritchie最初发明C语言时
C语言的发展历史大致上分为三个阶段：Old Style 
C语言标准 请点评
comment3
#include 
int main(void)
*/
comment1
，代码风格将在第9章编码风格详细介绍。
头尾两行是注释的界定符
这种注释不能跨行，
 printf(/* comment2 */"Hello, world.\n"); /* 
 return 0;
因而会报错。
有些改动会影响程序的输出，
 读者应该已经尝试对Hello world程序做各种改动看编译运行结果，
只是为了看起来整齐，
就是说一个注释的文字中不能再出现/*和*/了，
第 2章 常量、变量和表达式
1. 继续Hello World 
全国嵌入式人才培训基地
也不能穿插在
两个/斜线（Slash）表示从这里直到该行末尾的所有
(Delimiter) /*和*/,
，这不是语法规则而是大家都遵守的C代码风格
有些改动则没有任何影响，下面我们总结
一行代码中间。
/*text2*/看成注释，后面的
中间两行开头的*号
这是从C++借鉴的语
下一页
其中
---
## Page 35
后的例子通常省略#include和int main(void）
运行的结果是第一条语句单独打到第一行，后两条语句都打到第二行。
我们写三条打印语句：
意思，
式语言"中提到过，
它的内容。注意,
Literal）
像"Hello，world.\n"这种由双引号（Double Quote）引起来的一串字符称为字符串字面值（String
，也就是说并不表示\和n这两个字符本身，
In|换行（Line Feed）
f分页符（Form Feed）
b退格（Backspace）
la响铃（Alert或Bell）
？问号？（Question Mark)
单引号’（Single Quote或Apostrophe)
表 2.1.C标准规定的转义字符
反斜线\（Backslash）
printf("Hello, world.\n");
回车（Carriage Return）
或者简称字符串。注意,
程懂释
C标准的目的是为了精确定义C语言，而不是为了教别人怎么编
以C99为准，但示例代码通常只使用C89语法，
完全实现C99的所有特性。C99标准详见[C99]。本书讲C的语法
性
9899:1999）是在1999年推出的，
用的C语言标准,
接纳为ISO国际标准（ISO/IEC9899:1990）
标准委员会，
，打印出来的结果也没有\n这两个字符，这是为什么呢？在第2节“自然语言和开
到广泛支持，
(Backward Compatibility）
，C语言规定了
C标准在表达上追求准确和无歧义，却十分不容易看
 本书不详细讲Old Style C,
参考[C99 Rationale]也有助于加深对C标准的理解。
可惜作者没有随C99更新这两本书）
[Standard Cl和[StandardCLibrary]是对C89及其修订版本的阐
 American National Standards Institute） 推出,
 在C99推出之后相当长的一段时间里
大多数编译器都完全支持C89。C99标准（ISO/IEC
 程序的运行结果并没有双引号，
这些语法仍然在C89和C99中保留下来
而是合起来表示一个换行符（Line Feed）。例如
但在必要的地方会加以说明。C89是
}这些Boilerplate,
，比C标准更容易看懂，另
很少使用C99的新特
因而有时也称为C90，
C89是目前最广泛采
，夹在双引号中间的一串字符才是
由
，printf打印出来的只是里面的
连gcc也没有
但目前仍没有
为了节省篇幅突出重点，以
，这里的\n并不表示它的字
但读者在练习时需要加上
后来被
8
---
## Page 36
第 2章 常量、变量和表达式
齐
这样也行，但肯定不是好的代码风格，去掉缩进已经很影响可读性了，
不仅空格和Tab是无关紧要的，
格分隔开：
不缩进不会影响程序的结果，main后面多几个空格也没影响，但是int和main之间至少要有一
程序中别处的空格和Tab多一个少一个往往是无关紧要的，
Return,
源代码时提前分页，
字面值。
例如把字母n转义成换行符；
串的界定符而不表示它的字面含义。可见转义序列有两个作用：
K
完
所以是feed）
符
符'和？，
用printf语句试试这几个控制字符的作用。
语言规定了几个控制字符，
定位表格的下一
层网络协议（如HTTP）也用\r\n做行分隔符，
一行之后需要这
一行就一
果
每个语句一行，适当留空行。
在字符终端下显示这个字符的效果是PC喇叭发出嘀的一声，
在
字
int main(void){printf("Hello, world.\n");return 0;}
，这两个词来自老式的英文打字机，
v垂直制表符（Vertical Tab）
#include
return 0;
int main
4
而要
水平制表符（Horizontal Tab）
一下子移回最右边)
"末尾的空格，字符串字面值中的空格也算一个字符，也会出现在输出结果中，而
这
一行。\v比较少用，\t比较常用
么两个动作
 这样可以避免
(void)
必须使用转义序列
 不能用键盘直接输入
单引号和问号
换行也是如此，
如果你看过欧美的老电影应该能想起来这是什么。用老式打字机
是把特殊字符转义成普通字符，
，也很难判断是哪个语句有错误。所以，
\r\n,
回到本行开头（Carriage是卷着纸的轴，
一个函数跨两页打印。
全国嵌入式人才培训基地
所以现在Windows上的文本文件用\r\n做行分隔符，
Line Feed是跳到下-
因为字符
起始页
我甚至可以把整个程序写成一行，但是include必须
既可以使
上一级
而Linux和各种UNIX上的文本文件只用>n做行分
以后将"水平制表符"简称为"制表符"或Tab。请诗
用于在终端下定位表格的下一列，
 因此采用\加字母的转义序列表示。\a是响铃
用转
，不会对编译的结果产生任何影响，例如
K
（序列
例如\和"是特殊字符，转义后取它的
，在图形界面终端下的效果取决于
是把普通字符转义成特殊字符
和
、主要用于控制打印机在打印
 好的代码风格要求缩进整
写成现在这个样子可读性更
随着打字慢慢左移，
喂纸，
N
面含义
，\v用于在终端
有个喂的动作
人直接用字
2.常量
，许多)
一个空
字
E
1
符
---
## Page 37
printt中的第一个字符串称为格式化字符串（Format String），
point：f\n"并不是按原样打印输出的，
字符常量要用单引号括起来，
2.常量请点评
习题请点评
严格区分它们之间的差别了。
第一
有时候不同类型的数据很容易弄混，
明。
是character:
d\nfloating point：f\n"，\n占两个字符，而编译之后保存在可执行文件中的字符串
思与真实意思不同的情况，
插入到这个字符串中,
这个语句的输出结果和Hello world不太一样，
在C语言中是两种不同的类型（Type）
计算机中整数和小数的内部表示方式不同（将在第14章计算机中数的表示详细介绍）
序列。[2] 
号"和问号?，既可以使用转义序列\"和\？，也可以直接用字符"和？，而要表示'和\则必须使用转义
只表示-
子：
点数（Floating Point）常量和枚举常量。枚举常量将在第3节“数据类型标志"介绍。下面看一个例
常量（Constant）是程序中最基本的元素，
一串字符，
二
一个是字符串字面值,
并不出现在最终的打印结果中，
：整型和浮点型的转换说明（Conversion Specification）
floating point: 3.14
integer:
character:
3.14);
printf("character: %c\ninteger: %d\nfloating point: %f\n",
字符常量也可以
34
，在格式化字符串中%号（Percent Sign）
---..-..----..--
，第二个是字符，第三个是整数，
，但是转换说明和转义序列又有区别：
例如上面的‘}
个转义序列
例如"5"、'5'、5，
，这种用法通常叫做占位符（Placeholder）。这也是一种字面意
第 2章 常量、变量和表达式
全国嵌入式人才培训基地
而是输出成这样：
例如上例的34和3.14，小数在计算机术语中称为浮点数。
有字符（Character）常量、整数（Integer）常量、浮
2.常量
例如n＇
注意单引号只能括一个字符而不能像双引号那样括
如果你注意了它们的界定符就会很清楚，
看了本章后面几节你就知道为什么一定要
这时虽然单引号括了两个字符，
转换说明只在格式化字符串中占个位
后面加上字母c、d、f分别表示字符
它规定了后面几个常量以何种格式
如果在字符常量中要表示双引
转义序列是编译时处理的，而转换