knowledge, these vulnerabilities are not currently documented
in the literature.
TORPEDO also identiﬁes several new attacking vectors
belonging to known vulnerability categories, such as several
new ways to trigger coredump, which can be exploited to
amplify more than 200x workloads [29]. Also, it identiﬁes
bugs that can cause container crashes on gVisor, and another
type of problems causing unwanted seccomp logs on crun.
Both were conﬁrmed and ﬁxed by the developers [5], [8].
Based on the breadth of these ﬁndings, we conclude that
TORPEDO is capable of identifying both known and new
vulnerabilities. Note that the SYZKALLER authors have already
spent some time fuzzing gVisor (not through a container
interface). TORPEDO can still uncover new bugs. A detailed
discussion of these ﬁndings is presented in Section VII.
E. Comparison of Code Coverage and Program Throughput
While TORPEDO and SYZKALLER are designed for different
purposes with a different feedback collecting mechanism, the
code coverage mechanism is similar. In general, SYZKALLER is
capable of collecting much more coverage than TORPEDO over
a given time delta, as all components execute asynchronously.
Furthermore, SYZKALLER can more quickly screen out candi-
date programs that do not produce new coverage. TORPEDO
is fundamentally slowed by the nature of its observation
mechanisms, which requires both expensive synchronization
and repetition. We run TORPEDO using different round times
(e.g., 3 and 5 seconds) for 16 hours. We collect two metrics
from each experiment: the number of executed programs and
the amount of coverage generated. For ease of comparison, we
choose to fuzz gVisor, which does not allow granular coverage
collection. The “Coverage” refers to the number of unique
combinations of syscall number and error code.
We observe that TORPEDO is magnitudes slower at collecting
coverage than stock SYZKALLER. For example, TORPEDO with
3s rounds takes about 10 hours to reach a similar coverage
as SYZKALLER for fuzzing one hour on our testbed. This is
directly related to the difference in the number of programs
executed per time delta. SYZKALLER executes 20,000 programs
in less than an hour, whereas TORPEDO takes nearly six hours.
To some extent, this gap is also exacerbated by differences in
the coverage collection algorithm. SYZKALLER requires at least
one program execution per syscall in a given candidate program
to conﬁrm coverage, whereas TORPEDO examines coverage
for each syscall in a given program at once. In this respect,
TORPEDO is marginally more efﬁcient than SYZKALLER.
However, after running TORPEDO for enough time, it can
achieve similar coverage. While it is a magnitude slower
than SYZKALLER at accumulating coverage, this downtime is
necessary to collect additional feedback that allows TORPEDO
to identify more bugs than kernel crashes.
VII. DISCUSSION
A. Conﬁrmation of Existing Resource Vulnerabilities
Over the course of testing, TORPEDO independently recon-
ﬁrms all vulnerabilities already known to the community [29].
For example, the tool can identify calls ﬂushing data from
containerized programs to a TTY on the host, which causes
additional utilization on dockerd and containerd. Also, the
kernel core-dump mechanism creates out-of-band workload in
userspace for each core dump produced by a containerized
process. Basically, the core-dump code in the kernel invokes
a user-space application via the usermode helper API. The
resource consumed by the user-space application will be
charged to the kernel, instead of the initiating container. This
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:21 UTC from IEEE Xplore.  Restrictions apply. 
410
TABLE II: Summary of Uncovered Vulnerabilities
Concerned syscall
socket
unshare
mkdir
rseq
open
mount and others
rt sigreturn
fallocate, ftruncate
Attack vector
Runtimes
runc, crun modprobe via usermodehelper
runc, crun
runc, crun
kworker queue
docker daemon
crun
runc, crun
runc, crun
runc, crun
gVisor
seccomp unwanted logs
coredump via SIGSEGV
coredump via SIGSEGV
coredump via SIGXFSZ
invalid argument
Ampliﬁcation factor
120x
2x
N/A
2.3x
200x
200x
200x
N/A
Notes
ERRNO 93, 94, 97
CLONE NETNS, requires NET ADMIN
reclaiming container stresses dockerd
any usage
any usage
invalid arguments
argument exceeds max ﬁle size
container crash
can amplify the workload more than 200x. Although the
attacking vector is known, TORPEDO is still able to disclose
several system calls with particular usages (shown in Table II)
tripping the core-dump mechanisms.
B. Case Study: sockets
TORPEDO observes consistent workload placed on non-
executor cores when programs contained certain socket related
calls, which means that both cpu and cpuset cgroups are
escaped. Through tool-assisted minimization, we discover
that the socket syscall produces adversarial behavior. An
investigation into the implementation of socket(2) by the kernel
revealed a new attack vector exploiting the kernel module hot-
loading mechanism. In particular, when a process creates a
socket, it can specify a wealth of options including socket type,
protocol, and address family. Some of these options, however,
are invalid in certain combinations, or when the kernel has
not been compiled to support them. Frequently, speciﬁc socket
implementations are compiled as modules. When the kernel
receives a request for a socket option it understands but has no
implementation for, it will attempt to load a module from disk
by means of the modprobe(8) tool. On success, this module is
loaded into kernel memory for the remainder of execution. On
failure, an error is returned to the caller. The modprobe(8) tool
is invoked in userspace via the problematic usermode helper
API, which changes the invoked program to the kernel’s cgroup
as part of execution [29].
Repeated requests from userspace for a socket that triggers
an unsuccessful module hot-load create a signiﬁcant out-of-
band workload in userspace. With a reasonably optimized
single threaded implementation, we ﬁnd that an adversarial
container allocated just 0.2% of the CPU on our testbed can
cause an overall system utilization of 10%. This corresponds
to an ampliﬁcation factor of close to 120x. Also, TORPEDO
discovered several variations of arguments to socket(2) that
would trigger the vulnerability, corresponding to errno 93, 94
and 97 respectively.
C. Case Study: unshare
TORPEDO observes a signiﬁcant spike in kthread utiliza-
tion when repeated invoking unshare(CLONE NETNS) in
privileged containers (i.e., executing unshare(2) on the NET
namespace), which directly correlates to the creation of a
work item on a kernel work queue. The adversarial effects of
unshare(2) have already been noted with respect to increasing
container startup time [55], as the creation of a new net names-
pace requires holding a global lock [4]. We also demonstrate
that it can be exploited to generate adversarial out-of-band
TABLE III: dockerd utilization per number of directories
Number of dirs
20k
40k
100k
dockerd utilization (percent of entire CPU)
15%
24%
25%
workloads to consume extra CPU utilization. A naive program
on our testbed can cause an ampliﬁcation factor of more than
2x. Also, a large amount of system memory is consumed by
the unsharing processes during the test.
D. Case Study: ﬁle systems
TORPEDO consistently observes increased utilization from
the docker daemon when test programs contained calls to
mkdir(2). Particularly, this behavior is correlated to the period
where the container is torn down. Subsequent experiments with
destroying containers that contain many directories yielded the
observations in Table III. On our testbed, dockerd committed
three threads to tear down a container with many directories,
leading to an out-of-band workload of 25% with 100k dirs. This
workload persisted linearly with an increase in the number of
directories in the container: 40k directories took approximately
two seconds, but 100k directories took far longer. We note that
the notion of an “ampliﬁcation factor” does not make sense for
this vulnerability, as the process that “caused” the utilization
is no longer running when the workload manifests.
Troublingly, this workload is still out of band, as restricting
the CPU, I/O or PID limitations on the container does not
limit this workload. We conceive of a potential attack whereby
a malicious user creates many such containers that contain
millions of directories across a series of hosts. These “landmine”
containers are relatively harmless until the user allows the
container engine to reclaim them, at which time the docker
daemon will degrade the performance of all workloads running
on the host until reclamation is complete. To the best of our
knowledge, this is the ﬁrst potential attack that exploits the
container teardown process to escape cgroup limitations.
E. Bugs
Through the course of testing, TORPEDO discovers several
bugs in the crun and gVisor runtimes respectively. While
fuzzing crun, TORPEDO identiﬁed periodic utilization spikes on
the Linux audit subsystem (kauditd and journald) from seem-
ingly unrelated program traces. The examination determines
these spikes occurred from overzealous logging stemming from
crun’s interpretation of the Docker default seccomp proﬁle [8].
It can cause an ampliﬁcation factor about 2.3x. This bug was
promptly addressed by the crun team.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:21 UTC from IEEE Xplore.  Restrictions apply. 
411
While fuzzing gVisor, TORPEDO repeatedly detects a con-
tainer crash across many different seeds. During minimization,
a commonality is unearthed concerning the open(2) syscall and
a speciﬁc argument bitﬁeld combination. This would cause
gVisor to translate a syscall not allowed by its own seccomp
proﬁle, and the container would be terminated [5]. This bug
was recognized by the gVisor team and promptly ﬁxed.
F. Future Work
While this work mainly concentrates on ﬁnding vulnerabili-
ties related to the CPU resource, TORPEDO can be extended to
uncover potential issues in other cgroups subsystems (e.g.,
memory). We will explore this direction in our future work.
VIII. RELATED WORK
In this section, we review existing research efforts that inspire
our work. We mainly focus on the following areas:
Container Security. Containers typically have better perfor-
mance than traditional VMs [27], [54] and thus can support
real-time applications [62]. Meanwhile, container security
has also received much attention. Several previous research
efforts, including Gupta [34], Bui [18], and Grattaﬁori et
al. [33], have presented a brief analysis of Docker security
in terms of the isolation and corresponding kernel security
mechanisms. Particularly, it has been demonstrated that some
of the existing exploits can successfully launch attacks from
inside the container [50]. Gao et al. [28], [30] also investigated
the information leakage problem and its security implications in
Linux containers caused by problems in namespaces. Multiple
works have also been proposed to secure containers. Lei
et al. proposed to reduce the number of available system
calls to applications [48]. Sun et al. [65] proposed new
security namespaces enabling autonomous security control for
containers, and Arnautov et al. [16] secured Linux containers
using Intel SGX.
In terms of the security problems in resource control, Gao
et al. [29], combined with other previous research [45], have
disclosed that particular workloads can generate extra out-
of-band workloads than the limit of cgroups, which can
further slow down the container [46], [88]. Yang et al. further
demonstrated that the shared kernel variables and data structure
can cause DoS attacks against other containers [78]. Liu et al.
also discovered signiﬁcant performance variations in container-
based multi-tenant environments for CPU utilization. Our work
further attempts to systematically explore the security problems
related to container resource control.
Security Testing of System Software. Typical system software
are highly complicated software with millions of lines of
code, complex program structures, deep call hierarchies, and
also stateful execution models. To date, fuzz testing has been
commonly used to pinpoint vulnerabilities residing within the
system software [74] due to its automated nature. In recent
years, there has been growing research interest on fuzzing in
both industry and academia [2], [6], [69]. Particularly, Grey-
Box fuzzers [19], [22], [58] use lightweight instrumentation
to track program coverage for each input without requiring
extensive knowledge of the target application. Kernel fuzzing
[23], [35], [41], [47], [60] has been an important topic as
vulnerabilities in kernel code cause serious security breaches,
from information leakage to privilege escalation. One key
strategy in kernel fuzzing is to utilize types and dependencies
of system calls (syscalls). Google has developed SYZKALLER
[32] as an unsupervised coverage-guided kernel fuzzer speciﬁed
for fuzzing operating system kernels through the system call
interface. Recent research works [35], [56], [68] perform
advanced analysis (e.g., reinforcement learning) to synthesize
system call traces of high coverage. In addition, recent research
works also conduct security fuzz testing of OS drivers and
ﬁle systems [43], [61], [74]. Under most circumstances, the
majority of the work surrounding fuzzing is related to isolating
crashes. This perspective, however, fails to take into account
the wide range of behaviors that do not result in errors or
crashes exhibited by a program, which also motivates our work.
TORPEDO instead focuses on ﬁnding out-of-band vulnerabilities
in containers, and takes resource utilization as fuzzing feedback
for the ﬁrst time.
Cloud Security and Side/Covert Channel Attacks. Resource
sharing facilitates cloud platforms by improving hardware
utilization and reduce cost. Nevertheless, various real-world
attacks have been launched to abuse the shared computing
resource and affect the performance of cloud service users
co-located with a malicious user [21], [36]. In typical clouds,
attackers can place malicious VMs co-resident with targets