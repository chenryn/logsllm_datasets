Physical Key Extraction Attacks on ARM Development Boards.
In recent works, DPA-
style attacks were demonstrated on ARM-type devices. Balasch et al. [BGRV15] demonstrated a
clock-rate attack on AES running on a BeagleBone Black ARM development board. A similar
attack on the same device at much lower frequencies was demonstrated by Galea et al. [GMPT15].
However, while these results demonstrate the possibility of attacking symmetric key encryption
running on complex devices, both attacks were highly invasive with the probe physically glued to
the leaky component. The task of demonstrating a non-invasive attack on symmetric key encryption
running on a real smartphone remains open.
Key-Extraction Side-Channel Attacks on PCs. Physical key-extraction side-channels were
exploited for extracting keys from RSA, ElGamal and ECDH implementations, using the acoustic,
chassis-potential and electromagnetic channels [GST14, GPT14, GPPT15, GPPT16]. Software key
extraction attacks were demonstrated using timing diﬀerences [BB05, BT11], and cache contention
[Ber05, Per05, OST06] and applied to ECDSA [BH09, BvdPSY14, Van de PolSY15, ABF+15].
5
2 Cryptanalysis
2.1 Preliminaries
ECDSA. We start by describing the Elliptic-Curve Digital Signature Algorithm scheme (ECDSA).
Given a generator G of an elliptic curve group of order n, key generation consists of selecting a
random integer 1 ≤ d ≤ n − 1 and computing Q = [d]G. (Here and onward, we use additive group
notation, and [d]G denotes scalar-by-point multiplication.) The (secret) signing key is d and the
(public) veriﬁcation key is Q.
Signing of a message m is done as follows: hash m under a designated hash function and convert
the ﬁrst (cid:100)log2 n(cid:101) bits of the digest into an integer z; generate a random nonce 1 ≤ k ≤ n−1; compute
the curve point (x, y) = [k]G using a scalar-by-point multiplication; compute r = x mod n and
s = k−1(z + r · d) mod n; output the signature (r, s). (In case r = 0 or s = 0, repeat the signature
operation using a fresh random k.) Verifying a signature (r, s) on m is done by computing z as
above, computing w = s−1 mod n, u1 = zw mod n, u2 = rw mod n, (x, y) = [u1]G + [u2]Q and
then checking that x ≡ r (mod n).
Low s-value ECDSA. ECDSA signatures are malleable in the sense that given a message m and
a signature pair (r, s), it is possible to generate an additional valid signature for m (r(cid:48), s(cid:48)) (cid:54)= (r, s)
by setting r(cid:48) = r and s(cid:48) = −s mod n. This property is problematic for Bitcoin clients which use the
hashing of (r, s) in order to identify matching signatures [Wui14, ADMM15]. A common solution
to the above problem used by many Bitcoin clients is to require that s ≤ n/2. That is, in the case
that the signing process (described above) generates a pair (r, s) where s > n/2 for some message
m, the signature routine outputs (r,−s mod n) as the signature of m [Wui14].
Attack Overview. Our attack deduces partial information about the nonce k used during the
scalar-by-point multiplication [k]G in the signing operation. The signing key d is recovered by
combining the information obtained during multiple signature operations.
In the sequel, for an integer a, we denote by |a| is absolute value, by (cid:98)a(cid:99)n the result
Notation.
of reducing a modulo n into the range [0,··· , n − 1] and by |a|n the result of reducing a modulo n
into the range [−n/2,··· , n/2).
2.2 Scalar-by-Point Multiplication
The main operation performed during a ECDSA signing is the elliptic curve scalar-by-point mul-
tiplication. The w-ary non-adjacent form (wNAF) method (Algorithm 1) is one of the commonly-
used algorithms for implementing scalar-by-point multiplication. wNAF is used for multiplica-
tion in curves over prime size ﬁelds, including many of the NIST P-curves and the Bitcoin curve
secp256k1, in several cryptographic libraries, such as OpenSSL, CoreBitcoin, Apple’s Common-
Crypto and BouncyCastle. The algorithm is so named for representing the scalar k using the
wNAF representation which we now discuss.
The non adjacent form [Rei60] is a generalization of the binary representation of integers, allow-
ing for three possible digits, -1, 0, and 1, referred to as NAF digits, and requiring that every pair of
non-zero digits is separated by at least one zero digit. For example, the 4-digit NAF representation
of 7 is (1,0,0,−1) compared to its binary representation (0,1,1,1). The main advantage of using a
NAF representation is that it reduces the expected number of non-zero digits from about 1/2 for
the binary representation to about 1/3. Since every non zero digit in the representation of k leads
to a point addition operation, representing k in NAF form reduces the number of point addition op-
erations performed during the scalar-by-point multiplication operation. The wNAF representation
generalizes this by allowing odd digits from {−2w + 1,··· ,2w − 1} as well as zero digits.
6
sentation of k, that is k = (cid:80)g−1
Algorithm 1 wNAF scalar-by-point multiplication operation (simpliﬁed).
Input: A positive scalar k and an elliptic-curve point P, where kg−1 ··· k0 is the wNAF repre-
i=0 2i · ki, ki ∈ {−2w + 1,··· ,2w − 1}, ki is odd or zero, and
4:
3:
kg−1 (cid:54)= 0.
Output: [k]P.
1: procedure point mul(k, P)
Q1 ← P
2:
Q−1 ← [−1]P
for i ← 1 to 2w−1 − 1 do
Q2i+1 ← Q2i−1 + [2]P
Q−2i−1 ← [−1]Q2i+1
A ← Qkh−1
for i ← g − 2 to 0 do
A ← [2]A
if ki (cid:54)= 0 then
A ← A + Qki
10:
11:
5:
6:
7:
8:
9:
return A
12:
13: end procedure
2.3 Attack Algorithm
Let DA-sequence denote the sequence of double and add operations performed in lines 9 and 11
of Algorithm 1. Notice that by observing the DA-sequence performed by Algorithm 1 it is possible
to deduce all the locations of the non-zero valued wNAF digits of the nonce k. However, since the
DA-sequence only discloses the positions of the non-zero digits but not their values, recovering the
DA-sequence alone is not enough for achieving key extraction.
Cryptanalytic Approach. Nguyen and Shparlinski [NS03] describe a theoretical attack for
combining partial information on the bits of multiple nonces in order to recover the secret key d.
Benger et al. [BvdPSY14] later apply the attack to the DA-sequences of OpenSSL’s implementation
of ECDSA, as leaked through a cache channel on a PC. In this section we extend these techniques
for handling low s-value ECDSA commonly used by Bitcoin clients.
In our approach, following [BV96, NS03, BvdPSY14, Van de PolSY15], the partial information
collected from each (suitable) signing operation is summarized in a matrix. The secret value is
then extracted by solving the Closest Vector Problem (CVP) on the corresponding lattice, i.e., by
ﬁnding an integer linear combination of the matrix rows that is close a to a target vector. Details
follow.
Closest Vector Problem. An input of a CVP consists of a matrix (lattice basis) B and a target
vector u. The output is an integer vector x such that the (cid:96)2-norm of the vector xB − u is minimal,
i.e., the lattice vector xB is the closest to u. While the CVP problem is believed hard in general and
the best algorithms are exponential in the dimension of B (in the worst case), many heuristic CVP
solvers exists [Ngu11]. In this work, we utilize the fplll solver [ABC+] running on a PC (3.4 GHz,
6 cores, 64 GB of RAM).
Attacking Low s-value ECDSA. Let d be an ECDSA signing key and G be a generator of
an elliptic curve of order n. Assume we have a dataset of m ECDSA signatures where for each
signature i we are given the hashed message zi and the signature (ri, si), where si is the low s-value,
7
i.e. s ≤ n/2. First, we notice that for all i it holds that
zi + d · ri ≡ siki
(mod n)
or
zi + d · ri ≡ −siki
(mod n).
(1)
Notice that, without knowing ki, we do not know which of the above cases holds. (This depends
on whether k−1(z + r · d) mod n is larger than n/2 or not.)
Assume that, for each signature i in this dataset, we have learned (through side-channel leakage)
that the li least signiﬁcant wNAF digits of ki are zero. We ﬁrst note that this also implies that
the li least signiﬁcant bits of ki are zeros or, equivalently, that ki = 2li · bi for some bi ≤ n/2li.
Expanding and rearranging Equation 1 we obtain that for all i it holds that
zi · s−1
· 2−li + d · ri · s−1
or
(mod n).
(2)
Next, deﬁne ti = (cid:98)ri · s−1
· 2−li(cid:99)n and νi = |dti − ui|n. From Equation 2 we
have that either νi ≡ bi (mod n) or that νi ≡ −bi (mod n). Finally, since bi ≤ n/2li ≤ n/2 and
|νi| ≤ n/2, we obtain:
· 2−li ≡ bi
(mod n)
· 2−li(cid:99)n, ui = (cid:98)zi · s−1
· 2−li + d · ri · s−1
· 2−li ≡ −bi
zi · s−1
i
i
i
i
i
(3)
Notice that |νi| is smaller by a factor of 2li−1 than a random element in Zn. Utilizing this fact,
following the approach of [NS03, BvdPSY14], we now convert our dataset into a closest vector
lattice problem.
CVP Attack. Consider the lattice L(B) over Rm+1 generated by the rows of the following matrix:
i
|νi| = bi ≤ n/2li.
 2l1 · n
2l1 · t1
B =
 .
. . .
···
2lm · n
2l1 · tm 1
Deﬁne the vector u = (2l1 · u1,··· , 2lm · um,0). Notice that both the matrix B and the vector u
can be computed from the public information zi, si and the leakage li for 1 ≤ i ≤ m. We now claim
that the solution to the closest vector problem deﬁned by L(B) and u reveals the secret key d.
Indeed, Equation 3 implies the existence of integers (λ1,··· , λm) such that for the vectors
d + 1 whereas the determinant of L(B) is 2m+(cid:80) li · nm. Thus, we obtain
x = (λ1,··· , λm, d) and y = (2l1 · ν1,··· ,2lm · νm, d) we have xB − u = y. Next, notice that the
(cid:96)2-norm of y is about n·√
that the lattice vector xB is heuristically closest to the vector u. Therefore, by solving the CVP
problem on inputs (B, u) we obtain the vector x the last entry of which reveals the secret key d.
3 Signal Analysis
3.1 Experimental Setup
To measure the EM leakage from the smartphone, we used a Langer LF-R 400 near ﬁeld probe
(a 25mm loop probe, 100 kHz–50 MHz). We ampliﬁed the signal measured by the probe using
a (customized) Mini-Circuits ZPUL-30P ampliﬁer, providing 40 dB of gain. The output of the
ampliﬁer was then low-pass ﬁltered at 5 MHz.
For digitizing the analog signal, we used one of two instruments. For the best robustness during
initial characterization, as described below in this subsection, we used a National Instruments PCI-
6115 data acquisition device, sampling at 10 Msample/sec with 12 bits of ADC resolution. For key
8
Figure 2: EM measurement (0.5 sec, 0–225 kHz) of four scalar-by-point multiplication operations
using the NIST P-521 curve executed on an iPhone 3GS smartphone. The scalar was set to be either
a random 521-digit number or the 521-digit number obtained by repeating the pattern written to
the right. In all cases, the same curve point was used to perform the multiplication.
extraction, described in Section 3.2, we used an Ettus N200 software deﬁned radio device, with its
LFRX daughterboard, sampling at 1 Msample/sec.
Note that in terms of bandwidth, the above is an overkill for our attacks, which exploit signals
up to 200 kHz. Thus, similarly to [GPPT15], we can replace the probe and data acquisition device
with much cheaper equipment, such as a sound card; this is discussed in Section 4.
Conﬁrming the existence of scalar-dependent leakage from
Scalar-Dependent Leakage.
OpenSSL’s scalar-by-point multiplication function, Figure 2 shows a spectrogram of the EM leakage
obtained during four distinct signature operations, using the same point P and four diﬀerent values
of the scalar k. Notice that all of the four scalars can be easily distinguished by changes in vertical
line pattern in their spectral signature. Such nonce-dependent leakage was observed on many target
phones, of various models and manufactures (see Figure 3). This hints at the relationship between
the time behavior of the observed leakage signal and the secret bits of the scalar k.
In all the key-extraction attacks presented below, we simulated a completely passive
Triggering.
attacker which does not interact with the target device. In particular (as mentioned in Section 1.2)
we did not use any software-based or hardware-based triggering of the measurement setup (un-
like [BFMRT16b]). Instead, we sampled continuously and relied on our signal processing to locate
the leakage from the signing operation within the measurement trace (see details below). In order
to conveniently attack multiple cryptographic libraries (with diﬀerent API interfaces and running
on diﬀerent mobile operating systems), for each attacked library we wrote a small program that
calls the ECDSA operation, and invoked it over the network.
3.2 Attacking OpenSSL ECDSA
Signal Acquisition. We recorded the leakage of 5000 OpenSSL ECDSA signatures executed on
an iPhone 3GS. For all of the recorded signatures, we used the secp256k1 curve with the same
randomly-generated secret key. We measured the iPhone’s electromagnetic emanations during the
signing operations using the setup described in Section 3.1 (with the Ettus N200 sampling at
1 Msample/sec). We then stored the recorded traces, as well as the signed message produced by
the ECDSA signing, for oﬄine signal processing and cryptanalysis.
Examining Raw Traces. After digitizing, we applied a Finite Impulse Response (FIR) low-
pass ﬁlter to suppress noise outside the 0–125 kHz band. The resulting signal can be seen in
Figure 5 (top). Evidently, even after suppressing high frequency noise, one still cannot easily
determine the locations of point addition and point doubling operations. In addition, the signal