        echo "-----> VHOST support disabled, deleting nginx.conf"
        rm "$DOKKU_ROOT/$APP/nginx.conf"
        echo "-----> VHOST support disabled, reloading nginx after nginx.conf deletion"
        restart_nginx
      fi
    fi
    ;;
```
如果我们查看这段代码，我们可以看到它在`$DOKKU_ROOT/$APP/VHOST`文件中寻找一个域名，如果找到了，设置一些配置变量，并将它们插入到`templates/nginx.conf`文件的副本中。
该文件包含以下内容:
```
server {
  listen      [::]:80;
  listen      80;
  server_name $NOSSL_SERVER_NAME;
  location    / {
    proxy_pass  http://$APP;
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$remote_addr;
    proxy_set_header X-Forwarded-Port \$server_port;
    proxy_set_header X-Request-Start \$msec;
  }
  include $DOKKU_ROOT/$APP/nginx.conf.d/*.conf;
}
```
这看起来很像我们在上一章中创建的 nginx 配置，对吗？多库的部署后部分基本上是杰森·怀尔德的`nginx-proxy`。他们实现了同样的结果，但是他们以非常不同的方式到达那里。
## doku 插件
Heroku 中的插件在 Dokku 中被称为插件。由于不能直接从 Dokku 指定`docker` `run`命令参数，需要插件连接容器，添加数据量容器。
下面是一些我们很快会用到的可用 Dokku 插件的列表。
### doku 域插件
Dokku 域插件可以让你在一个应用中指定多个域。默认情况下，一个应用只能对应一个网址:
```
dokku domains:set myawesomeapp.com www.myawesomeapp.com
```
URL:https://github . com/wmluke/doku 域插件
### doku Docker 选项
有了这个插件，当`docker run`命令被执行时，你可以将任何选项传递给 Docker 守护进程。它可以用来挂载卷、链接容器等等:
```
dokku docker-options:add myapp "-v /host/path:/container/path"
dokku docker-options:add myapp "-link container_name:alias"
```
URL:[https://github . com/Dyson/doku Docker 选项](https://github.com/dyson/dokku-docker-options)
### 多库的音量插件
这里有一个插件，可以让你在服务容器上装载卷。它还具有转储(导出)和恢复数据的命令:
```
dokku volume:add foo /path/in/container
dokku volume:dump foo /path/in/container > foo.tar.gz
```
URL:https://github . com/ohardy/doku 卷
### doku 链接
你可以用这个插件链接容器:
```
dokku link:create  NAME [ALIAS]
dokku link:delete  NAME [ALIAS]
```
URL:https://github . com/WLAN/doku 链接
### MariaDB 插件 for dokku
这个插件允许你创建和使用 MariaDB 容器。MariaDB 可以作为 MySQL 的替代品，通常速度更快:
```
dokku mariadb:create 
dokku mariadb:link  
dokku mariadb:dumpraw 
```
URL:https://github . com/klo adut/doku-MD 插件
MySQL 外挂程式:[https://github . com/hughfletcher/doku MySQL 外挂程式](https://github.com/hughfletcher/dokku-mysql-plugin)
# 用 Dokku 设置一个 WordPress 应用
现在我们已经和 Dokku 玩了一段时间，探索它是如何工作的，以及有什么插件可用，是时候建立一个 WordPress 网站了。毕竟，这就是我们最初探索它的原因。
这就是我们要做的:
1.  创建一个新的本地 Git 存储库，并在上面下载 WordPress。
2.  安装 MariaDB 插件，创建一个数据库，并将其链接到我们的应用。
3.  配置 WordPress 连接到我们的链接数据库。
在您的本地计算机上，下载并解压缩最新版本的 WordPress，并创建一个新的 Git 存储库。创建一个`composer.json`文件，告诉 Dokku 这是我们正在创建的一个 PHP 应用。
### 注
你可以阅读更多关于如何在你在[https://devcenter.heroku.com/articles/buildpacks](https://devcenter.heroku.com/articles/buildpacks)创建的什么类型的应用上提示 Dokku(是的，Dokku 使用 Heroku buildpacks)并寻找检测功能。Dokku 使用名为 Buildstep 的库，使用 Docker 和 Buildpacks 构建应用。
让我们开始吧。
我在我的域名[ohdokku.com](http://ohdokku.com)上使用了一个服务器，用于这个应用:
```
#Download Wordpress
curl -O https://wordpress.org/latest.zip
unzip latest.zip
mv wordpress wp1
cd wp1
#Create a new Git repo
git init
git add .
git commit –m "Initial commit."
#Create a composer.json file to tell Dokku we are using php
echo '{}' > composer.json
git add .
git commit -am "Add composer.json for PHP app detection."
#Add a remote so we can push to Dokku
git remote add dokku PI:EMAIL:wp1
```
在服务器上，我们必须安装 MariaDB 或 MySQL 插件:
```
cd /var/lib/dokku/plugins
sudo git clone --recursive https://github.com/Kloadut/dokku-md-plugin mariadb
cd mariadb/dockerfiles/
git checkout master
cd ../../
sudo dokku plugins-install
```
回到客户端(您也可以在服务器上做到这一点，但是这种类型的 PaaS 的关键是能够在客户端上做所有这些重复的事情)。
结果如下:
![Setting up a WordPress app with Dokku](img/00066.jpeg)
如您所见，create 命令的输出将显示我们的数据库凭据。
现在数据库已经建立，我们可以第一次推送我们的应用:
```
git push dokku master
```
您应该注意到，Dokku 检测到您正在推送一个 PHP 应用。由于我们在`composer.json`文件中没有指定任何内容，一个缺省的 PHP 和 Apache2 包将会启动。
创建一个名为 wp1_db 的 MariaDB 数据库:
```
ssh PI:EMAIL mariadb:create wp1_db
ssh PI:EMAIL mariadb:link wp1 wp1_db
```
如果我们在浏览器中进入`ip:port`，一个已知的页面欢迎我们 WordPress 安装页面。当我们点击**继续**按钮时，我们看到在我们创建`wp-config.php`文件之前我们不能继续。
我们刚刚创建了 MariaDB 容器和 WP 容器之间的链接，但是我们还没有在代码中创建链接。WordPress 不知道如何连接到数据库。
我们首先将`wp-config-sample.php`文件重命名为`wp-config.php`，并在编辑器中打开该文件:
```
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for Wordpress */
define('DB_NAME', getenv('DB_NAME'));
/** MySQL database username */
define('DB_USER', 'root');
/** MySQL database password */
define('DB_PASSWORD', getenv('DB_PASSWORD'));
/** MySQL hostname */
define('DB_HOST', getenv('DB_HOST').":".getenv('DB_PORT'));
```
编辑您刚才看到的凭据，让 WordPress 查找我们链接的 MariaDB 给我们的环境变量:
```
git add –A .
git commit –m "Add wp-config.php and add credentials."
git push dokku master
```
等到你得到一个新的`ip:port`，我们的应用被部署到这里，然后在你的网络浏览器中输入信息。
现在你应该可以安装 WordPress 了。
输出如下:
![Setting up a WordPress app with Dokku](img/00067.jpeg)
## 启动多个应用
要用 Dokku 启动多个应用，只需重复简单过程，如下所示:
1.  创建一个带有 WordPress 的本地 Git 存储库，并创建一个远程 Git 存储库。
2.  Create and link a database with the MariaDB plugin.
    编辑您的`wp-config.php`文件。
3.  推进部署。
从 Git 命令添加`remote`时，您在应用上设置的名称:
```
git remote add dokku PI:EMAIL:wp1
```
该命令将创建 WordPress 网站的网址([wp1.ohdokku.com](http://wp1.ohdokku.com))。你可以设置一个完整的自定义域名，比如:`git remote add dokku PI:EMAIL:wp1.oskarhane.com`如果我把[wp1.oskarhane.com](http://wp1.oskarhane.com)指向我的服务器，它就会工作。
## 给 Dokku 添加一个域
我一直在等待设置 Dokku 的域名，因为这涉及到登录域名系统提供商并设置域名系统记录以将域名指向我们的服务器。我们设置域名系统记录将我们的域名指向我们服务器的 IP 地址，这样通过在网络浏览器的地址栏中输入我们的域名就可以访问我们的服务器。
我通常使用亚马逊路由 53 来处理域名的域名系统，因为它们非常稳定且易于使用。流量低的网站一个月要花一美元左右。任何域名系统提供商的设置都是相同的。你必须添加两条记录，一条用于`yourdomain.com`，一条用于`*.yourdomain.com`。
我们要输入的记录是 A 记录，也就是说我们把域名指向一个特定的 IPv4 地址。**生存时间** ( **TTL** )值现在并不重要，但它意味着 TTL，并告诉所有其他获得该域请求的域名系统服务器他们可以缓存当前值多长时间。
输出如下:
![Adding a domain to Dokku](img/00068.jpeg)
你当然应该把 IP 改成你服务器拥有的公共 IP 。为通配符子域设置 A 记录时，只需在顶部的输入栏中输入 *** 。
要查看您的 DNS 提供商是否可以解析您的域名，请在终端中执行`ping yourdomain.com`。你会看到解析的知识产权就在那里。如果您刚刚购买了该域，您应该可以立即看到结果，但是如果您已经使用该域一段时间，旧的 TTL 值可能会稍微延迟效果。
如果要等待 DNS 记录的设置(这在开发过程中很常见)，可以通过编辑`/etc/hosts`文件在电脑上设置本地记录，如下命令片段所示:
```
sudo nano /etc/hosts
#Add this line to the file
54.191.69.5 ohdokku.com
#Save and exit
```
这里需要记住的一点是不能为通配符子域输入记录。如果你计划在子域上开发多个应用，你必须为每个子域输入一条记录。此外，完成后不要忘记删除这些记录；当你忘记你有你使用的域名的记录时，它会变得非常混乱(和有趣)。
在 Dokku 服务器上，创建一个名为`/home/dokku/VHOST`的文件，并在其中输入`yourdomain.com`。
从现在开始创建的所有应用都将是该域的子域，除非您给应用提供完整的域名。
## 关于多库的更多说明
就像 Heroku 一样，Dokku 让开发者很容易部署和推送代码。如果你直接从你的 Dokku 应用下载一个 WordPress 插件，当你重启 Dokku 应用时，它就会消失。建议保留一个易于启动的本地副本，或者一个开发、测试和暂存服务器，您可以从中下载新插件并将其推送到您的 Dokku 应用，以确保它们是持久的。
### 类型
当使用这种基础设施时，映像和视频应该通过插件上传到像亚马逊这样的地方。
您还必须让您的 WordPress 站点从外部电子邮件提供商(如 Mandrill)发送电子邮件。像 WP Mail SMTP 这样的插件可以为你解决这个问题。
在 Dokku 上部署 WordPress 应用时，我们还有一些手动步骤(例如下载 WordPress 和编辑`wp-config.php`)要做，但是创建自定义 Buildstep 来移除手动部分的任务超出了本书的范围。
另一个选择是让 Composer 用`composer.json`文件来处理 WordPress 的安装，但是 WordPress 并不正式支持这个，它需要一些黑客攻击，所以就交给你了。
### 注
如果你想了解更多关于作曲家的知识，你可以去提供的链接[http://wpackagist.org](http://wpackagist.org)。
# 总结
在本章中，我们通过向流程中添加部署来创建自己的 PaaS。到本章为止，我们所研究的都是关于组织容器和引导进入的交通，以便游客可以到达正确的容器。
有了多库，我们就不用担心这个了；我们只需要关心我们的代码。一旦我们推送代码，Dokku 就会接管并做正确的事情。Dokku 使它看起来非常简单，这就是为什么，我从手动创建和链接容器以及配置反向代理开始，这样您就可以理解 Dokku 的工作了。
下一章把我们带到了流血的边缘:现在正在开发什么可以让 Docker 的私有 PaaS 更进一步？