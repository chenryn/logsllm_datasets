needs to predict the forwarding path each AS with Bitcoin
clients will use to reach each canditate-relay considering any
possible attacker.
We develop a heuristic to address the ﬁrst two challenges
(Section IV-B) and an algorithm for ﬁnding the possible attack
scenarios for every attacker (Section IV-C).
B. Positioning SABRE Relays
As described above, positioning relays optimally maps to
solving a maximum coverage problem. Given the complexity,
we rely on a greedy approach which is shown to be effectively
optimal for the maximum coverage problem [26].
Our algorithm starts with an empty set R(cid:48) and the set
of candidate ASes R which satisfy the constraints listed in
Section III-B and are also contained in at least one k-connected
subgraph of at least N nodes, as only those can host one
of the relay nodes of a k-connected network of N relays. It
then iteratively adds relays to the set R(cid:48) aiming at maximize
the number of covered attack scenarios while preserving k-
connectivity for R(cid:48). This simple procedure runs in O(N ) and
works well in practice (Section VI).
In particular, in each round, we consider as candidates
the set Rk ⊆ R \ R(cid:48) which are connected with at
least min{k,|R(cid:48)|} of the already-selected ASes in R(cid:48). Then
we add the candidate r ∈ Rk that adds the maximum
weighted coverage to R(cid:48), i.e., the one with the maximum
accordingly, i.e, R(cid:48) := R(cid:48) ∪ {r}. When we have selected all
candidates, so that |R(cid:48)| = N, we return R(cid:48).
ri∈R(cid:48) S(ri)(cid:1) and we update R(cid:48)
ri∈(R(cid:48)∪r) S(ri)(cid:1) − C(cid:0)(cid:83)
C(cid:0)(cid:83)
We show in Section VI that the resulting relay networks
can readily protect between 80% to 98% of the existing Bitcoin
clients (depending on the internal connectivity and number of
deployed nodes) from 99% of the potential attackers. The exact
algorithm for positioning the relay nodes can be found in the
Appendix A1.
6
Fig. 4: Shades illustrate ASV routing preference ranging from
white (most preferred) to black (least preferred). Trafﬁc from
ASV to preferred AS is less likely to be hijacked.
C. Calculating covered attack scenarios
Having explained how we can position SABRE relays
based on the attack scenarios they cover, we now describe
how we compute these scenarios for each relay, i.e., how
we implement the function S. More speciﬁcally, we describe
how we predict, for each AS hosting Bitcoin clients and each
AS-level adversary, whether the hosting AS will prefer the
advertisements coming from the attacker AS over legitimate
announcements coming from relay ASes.
Our algorithm is based on the observation that, to check
whether a attacker AS (say ASM) can divert trafﬁc from a
victim AS (say ASV ) to to a relay AS (say ASR), we only
need to compare the path from ASV to ASR and from ASV
to ASM. If the path to ASM is more preferred then ASM
can successfully hijack trafﬁc from an ASV to ASR. Path
preference is dictated by the business relationships established
between ASes together with the path length: customers are
preferred over peers, peers over providers, and shorter paths
over longer ones.
As an illustration, Figure 4 illustrates an AS topology in
which arrows indicate business relationships: providers are
drawn above their customer (ASV is the provider of ASA),
while peers are drawn alongside each other (ASH and ASV
are peers). The different shades indicate which advertisements
ASV prefers, ranging from white (most preferred) to black
(least preferred). ASV prefers advertisements learned from
ASA (its customer) over advertisements learned from ASH
(its peer) or from ASI (its provider). Likewise, ASV prefers
advertisements from ASE over the ones originated by ASD.
While both are learned via ASA (its customer), ASD is closer
to ASV (2 hops) than ASE (3 hops). Intuitively, Figure 4
depicts for any two ASes ASX and ASY whether ASV
would prefer ASX’s advertisements over ASY ’s, should both
advertise the same preﬁx. For instance, if a relay is hosted
in ASH (ASV peer), all the ASes that ASV can reach via
customer links (ASA–ASG) are possible attackers. Similarly,
if the relay is hosted in ASM then any other ASes (ASA–
ASL) can divert the corresponding trafﬁc from ASV .
We describe the algorithm we use to compare the BGP
preference of two paths with a common start in Appendix A2.
Fig. 5: The switch intercepts all incoming trafﬁc, answers to all
UDP requests and redirects TCP trafﬁc of whitelisted clients
to the controller. The switch contains the latest mined Block in
BlockMem and multiple components to track the connected and
banned clients (e.g.White/Black List, Connected) and detect
attacks (e.g. CheckSecret, SentLimit)
V. SABRE RESILIENT RELAY NODE DESIGN
We now explain the software/hardware co-design of a
SABRE node (Section V-A) and its operations (Section V-B)
which ensure that the node’s resources are not maliciously
exhausted and that benign clients are not denied service.
A. Hardware/Software Co-Design
Figure 5 illustrates SABRE’s software/hardware co-design.
It is composed of a programmable switch connected to a
modiﬁed Bitcoin client which acts as a controller.
The switch is responsible for: (i) serving client connections;
(ii) protecting the controller only from malicious clients; (iii)
propagating blocks; and (iv) distinguishing new blocks from
old ones. In contrast, the controller is responsible for validating
new blocks, advertising them to the connected clients and
updating the switch memory accordingly.
Bitcoin clients establish UDP connections with the switch
and (rarely) regular Bitcoin connections (over TCP) with the
controller. Switches only allow approved Bitcoin clients to
establish connections with the controller. As most clients
“consume” blocks rather than producing them, we expect most
clients to only interact with SABRE’s hardware component.
SABRE deﬁnes a UDP-based protocol to facilitate com-
munication between the Bitcoin clients and the switch as
well as between the switch and the controller. The protocol
is composed of 8 messages. Five of them are exchanged
between the switch and the clients: SYN, SYN/ACK, ACK,
GET SEQ, and ADV. The three remaining are sent between
the switch and the controller: NCONN, UPD, and BLK.
Similarly to TCP, SYN, SYN/ACK, ACK are used to
prevent spooﬁng attacks. GET SEQ, BLK and ADV relate to
block management. Speciﬁcally, GET SEQ enables a client
to request a particular segment of a block which is sent as a
BLK, while ADV enables a client to advertise a newly mined
block to the relay. The switch sends a NCONN to notify the
controller of new connections. The controller sends an UPD
followed by a BLK message to update the switch with the
latest block.
(a) Establishing connection
(b) Transmitting Block
Fig. 6: (a) BTC client establishes a connection with the
switch using a 3-way handshake. (b) Relay advertises a new
block INV via the switch and transmits it using multiple BLK
messages after client requests using GET SEG messages.
The switch maintains three data structures to manage client
connections and track down anomalies: PeerList, Whitelist,
and Blacklist. PeerList contains information about connected
clients, i.e., those who successfully completed the three-way
handshake. Similarly, Whitelist stores clients that are allowed
to communicate with the controller directly. Blacklist contains
clients that have misused the relay and are banned. The switch
also maintains one data structure to store the latest block(s):
BlockMem. BlockMem is composed of indexed equal-sized
segments of a block together with precomputed checksums
for each segment. This data structure allows the switch to
timely reply with the requested segment avoiding additional
computations. Moreover, the switch contains two components
devoted to anomaly detection: SentLimit and CheckSecret.
SentLimit detects clients that requested a block too many times.
CheckSecret veriﬁes during the handshake that a client is using
its true IP. Finally, the switch also maintains one data structure
for checking whether an advertised hash is new or known:
Memhash.
In the following, we describe the different operations
performed by the relay and how each of them modiﬁes each
of the data structures. In Section VII, we show that our
design can sustain 1M malicious and 100k benign client
connections with less than 5 MB of memory in the switch. This
memory footprint is only a fraction of the memory offered by
programmable switches today [35], allowing the switch to be
used for other applications.
B. Relay operations
We now describe SABRE relay operations. The client and
controller are extended versions of the default Bitcoin client
and the switch is implemented in P4 [19]. Our protocol deﬁnes
four operations: (i) how regular Bitcoin clients connect to a
relay node; (ii) how a relay node propagates blocks back to
them; (iii) how a relay node receives and validates blocks
7
WhiteListControllerPeerListBlackListHashMemForward TCP  | Whitelist[Hit] | Controller
UDP[ADV]| Connected[Hit]| HashMem[Miss] | FWD[CTR]  | Write[Whitelist]
UDP[GetSeg]|Connected[Hit]| SentLimit | BlockMem  | FWD[BLK]
UDP[SYN]|BlackList[Miss]|  | FWD[SYNACK]
UDP[ACK]|BlackList[Miss]|  | CheckSecret | Write[Connected]CheckSecretBlockMemSentLimitADVGET_SEGSYNACKINV/TCPCTRBLKSYNACKUPDBLKBTCBTC/INVBTCSwitchSYN Secret #0ACK Secret #45SYNACK Secret #45NCONN IP, PortSecret Correct!CtrlINV Hash:5 #:23INV Hash:5 #:23GET_SEG Hash:5 Seg:1BLK Seg:1GET_SEG Hash:5 Seg:2BLK Seg:2UPDATE Hash:8BLK Seg:1 Chk:3 BLK Seg:2 Chk:6 BLK Seg:700 Chk:4 ADV Hash:5CTR IP, PortHash not known Add IP to whiteListvanilla BTC connectionSwitchCtrlSwitchCtrlSwitchCtrlSwitchSYN Secret #0ACK Secret #45SYNACK Secret #45NCONN IP, PortSecret Correct!CtrlINV Hash:5 #:23INV Hash:5 #:23GET_SEG Hash:5 Seg:1BLK Seg:1GET_SEG Hash:5 Seg:2BLK Seg:2UPDATE Hash:8BLK Seg:1 Chk:3 BLK Seg:2 Chk:6 BLK Seg:700 Chk:4 ADV Hash:5CTR IP, PortHash not known Add IP to whiteListvanilla BTC connectionSwitchCtrlSwitchCtrlSwitchCtrlclient’s IP will stay in the whitelist for four days. The client
connects to the controller as if it was a regular Bitcoin client,
while the switch forwards the TCP trafﬁc to the controller.
The switch only allows packets from white-listed clients to
reach the controller. Observe that a malicious miner cannot
monopolize or overload the controller with its connections as
even a pool with 30% of the hash power cannot keep more
than 172 whitelisted clients at any given moment.3
Even so, a malicious miner might still try to engineer block
races by ﬂooding the relay node with multiple blocks simul-
taneously which will need to be validated by the controller.
To shield against this attack, the switch keeps the number of
active nodes that are white-listed. When this number exceeds
a predeﬁned threshold (set based on the controller’s hardware
capabilities), the switch will stop whitelisting new clients. In
this case, the controller receives blocks from the nodes that are
already whitelisted. Indeed, these nodes are diverse enough,
with respect to mining power origin, to keep the relay up-
to-date, thanks to the expiry mechanism in the Whitelist. For
instance, any pool with at least 0.17% of mining power can
keep at least one node in the Whitelist forever. In essence,
the switch implements a simple-yet-efﬁcient reputation-based
access-list to protect the controller from Sybil attacks.
Updating the switch with a new block If a newly-transmitted
block is valid, the controller updates the switch’s memory
with a new mapping of segment IDs to data segment that
corresponds to a particular block hash. The switch can then
transmit the segments to the clients upon requests. Observe
though that the switch sends data to a UDP socket. Thus, the
IP and UDP checksums need to be correct for the packet to be
accepted. The UDP checksum is calculated using a pseudo-
header and the one’s complement sum of the payload split
into 16 bits segments. Since computing this in the switch
would result in repetitive and unnecessary computations, we
precompute the one’s complement sum of the block segment
and cache it together with the segment itself. Using this value
the switch needs only to add the header parts that are different
per client to calculate the checksum.
Figure 7b illustrates the sequence of packets the controller
sends to update the switch. Initially, it sends an UPD message
containing the new hash. This ﬁrst message tells the switch to
prepare its state for the new block. The next messages are sent
to transmit each of the segments of the block as well as the
precomputed one’s complement sum.
Propagating a newly-learned block The relay node advertises
new blocks to all its connected clients who can then request a
block segment-by-segment. Blocks are transmitted in multiple
individual segments for three reasons: (i) to allow clients to
request lost segments independently; (ii) to avoid loops in
the data plane which would otherwise be necessary as the
block does not ﬁt in one packet; and (iii) to protect against
ampliﬁcation attacks.
As illustrated in Figure 6b, the controller sends an INV
message which is forwarded by the switch. This INV message
contains the hash of the new block as well as the number of
3Every day, 144 Blocks are mined (on average). For each block at most
one node is whitelisted (the one that is not already whitelisted and advertised
the Block ﬁrst)
(a) Receiving block
(b) Updating switch
Fig. 7: (a) BTC client advertises a new block identiﬁed as
unknown by the switch. The client gets white-listed, allowing
it to connect directly to the controller. (b) If the received
block is valid,
the controller updates the switch using an
UPDATE message carrying the block’s hash followed by a
BLK messages carrying the data.
transmitted by the clients; and (iv) how the controller updates
the switch memory upon receiving a new valid block.
Managing client connections In order to avoid spooﬁng
attacks, Bitcoin clients initialize connections to relay nodes
using a three-way handshake as shown in Figure 6a. As for a
normal TCP connection, the client ﬁrst sends a SYN packet.
Upon receiving the SYN, the switch echoes back a secret value
calculated using the client’s IP address and UDP port in a
SYN/ACK packet. The client then includes this secret value
in the ﬁnal (ACK) packet as a proof that it owns the source
IP address that it is using.
Upon successfully completing the handshake, the switch
adds an entry for the client’s IP and port number in the
PeerList and notiﬁes the controller via a NCONN message.
The PeerList
is implemented as a Bloom ﬁlter (BF) for
memory efﬁciency. Doing so,
the switch veriﬁes that an
incoming packet belongs to an established connection and
drops it otherwise. As BFs do not support listing all inserted
items, the controller stores the connections for future use (e.g.,
advertising new blocks and updating the PeerList).
Learning new blocks Relay nodes need to learn new blocks
that are mined. New blocks are transmitted to the relays
from regular clients. Being a network device with limited
computational capabilities, the switch is unable to validate
blocks. Thus, advertised blocks need to be transmitted to the
controller after they have been ﬁltered by the switch.
As illustrated in Fig. 7a, the node advertises a block by
its hash to the switch using an ADV message. The switch
checks whether the hash is already known using the HashMem.
If the hash is not known, then the switch asks the client to
connect to the controller with a CTR message and stores its
IP in the Whitelist. If the transmitted block is legitimate the
8
SwitchSYN Secret #0ACK Secret #45SYNACK Secret #45NCONN IP, PortSecret Correct!CtrlINV Hash:5 #:23INV Hash:5 #:23GET_SEG Hash:5 Seg:1BLK Seg:1GET_SEG Hash:5 Seg:2BLK Seg:2UPDATE Hash:8BLK Seg:1 Chk:3 BLK Seg:2 Chk:6 BLK Seg:700 Chk:4 ADV Hash:5CTR IP, PortHash not known Add IP to whiteListvanilla BTC connectionSwitchCtrlSwitchCtrlSwitchCtrlSwitchSYN Secret #0ACK Secret #45SYNACK Secret #45NCONN IP, PortSecret Correct!CtrlINV Hash:5 #:23INV Hash:5 #:23GET_SEG Hash:5 Seg:1BLK Seg:1GET_SEG Hash:5 Seg:2BLK Seg:2UPDATE Hash:8BLK Seg:1 Chk:3 BLK Seg:2 Chk:6 BLK Seg:700 Chk:4 ADV Hash:5CTR IP, PortHash not known Add IP to whiteListvanilla BTC connectionSwitchCtrlSwitchCtrlSwitchCtrlsegments it is composed of. In the example, the relay advertises
hash #5 which is composed of 23 segments. If the Bitcoin
client is unaware of the advertised block, it requests it using
a GET SEG message containing the hash of the block and