ATT&CK](https://attack.mitre.org/techniques/T1088/) organization has an
entire webpage dedicated to how Windows UAC bypasses have been used in
various malware samples by
[cybercriminals](https://www.peerlyst.com/tags/cybercriminals) and
nation-state [Advanced Persistent
Threats](https://www.peerlyst.com/tags/advanced-persistent-threats)
(APT) groups. Here are a few examples:
-   [APT 29](https://www.peerlyst.com/tags/apt-29) (a.k.a., Cozy Bear,
    CozyDuke, The Dukes)
-   [BlackEnergy](https://www.peerlyst.com/tags/blackenergy)
-   FinFisher
-   [H1N1](https://www.peerlyst.com/tags/h1n1)
-   InvisiMole
-   Pupy
-   [Shamoon](https://www.peerlyst.com/tags/shamoon)
-   [APT](https://www.peerlyst.com/tags/apt) 27 (a.k.a., Iron Tiger,
    LuckyMouse, Emissary Panda, TG-3390)
## Summary
Microsoft has repeatedly downplayed UAC bypasses as not qualifying as a
security boundary. However, the fact remains that many
[systems](https://www.peerlyst.com/tags/systems) always run everything
at the local admin permission level which makes UAC bypasses very
effective for Red Teamers. Wise security administrators should NEVER
trust UAC, should not run as split-token admin, and ALWAYS use a
non-admin user account for your non-admin tasks.
## References and Further Reading
Additional [resources](https://www.peerlyst.com/tags/resources) for
further exploration:
> *[Peerlyst Wiki](https://www.peerlyst.com/tags/peerlyst-wiki): [UAC
> Bypasses and UAC bypass
> research](https://www.peerlyst.com/posts/wiki-uac-bypasses-and-uac-bypass-research-nic-cancellari?trk=search_query)*
>
> *[\@enigma0x3's research](https://enigma0x3.net/) (and his
> [DerbyCon](https://www.peerlyst.com/tags/derbycon-2018) talk:
> [slides](https://www.slideshare.net/enigma0x3/not-a-security-boundary-bypassing-user-account-control),
> [video](https://www.youtube.com/watch?v=c8LgqtATAnE))*
>
> *[\@tiraniddo](https://twitter.com/tiraniddo)'s bypass
> [techniques](https://www.peerlyst.com/tags/techniques) on UAC via [the
> SilentCleanup
> task](https://tyranidslair.blogspot.fr/2017/05/exploiting-environment-variables-in.html)
> and process [token](https://www.peerlyst.com/tags/token) reading:
> [part
> 1](https://tyranidslair.blogspot.fr/2017/05/reading-your-way-around-uac-part-1.html),
> [part
> 2](https://tyranidslair.blogspot.fr/2017/05/reading-your-way-around-uac-part-2.html)
> & [part
> 3](https://tyranidslair.blogspot.fr/2017/05/reading-your-way-around-uac-part-3.html)*
>
> *[\@hFireF0X](https://twitter.com/hfiref0x)'s [UACME
> project](https://github.com/hfiref0x/UACME) that implements most known
> UAC bypasses, and [his
> posts](http://www.kernelmode.info/forum/viewtopic.php?f=11&amp;t=3643)
> [on
> kernelmode](http://www.kernelmode.info/forum/viewtopic.php?f=11&amp;t=3643)*
>
> *[\@FuzzySec](https://twitter.com/fuzzysec)'s [UAC
> workshop](https://github.com/FuzzySecurity/DefCon25), and his
> [Bypass-UAC
> project](https://github.com/FuzzySecurity/PowerShell-Suite/tree/master/Bypass-UAC)
> that implements several bypasses in
> [PowerShell](https://www.peerlyst.com/tags/powershell)*
>
> Chapter 8
>
> **Powershell for Red teams**
>
> Contributor: Chiheb Chebbi
PowerShell is a task-based command-line shell and scripting language; it
is designed specifically for system administrators and power-users, to
rapidly automate the administration of multiple operating systems
(Linux, macOS, Unix, and Windows) and the processes related to the
applications that run on those operating systems. It is open source. You
can visit its official repository:
[[https://github.com/PowerShell/PowerShell]{.underline}](https://github.com/PowerShell/PowerShell)
> ![](media/image51.jpeg)
Image Courtesy:
[[https://www.fullstackpython.com/img/logos/powershell.png]{.underline}](https://www.fullstackpython.com/img/logos/powershell.png)
This chapter will be an overview of how to use PowerShell in red teaming
missions .we are going to explore:
-   Metasploit and Powershell
-   Powersploit
-   Powerview
-   Nishang
-   Empire
-   Mimikatz
## Metasploit and Powershell:
As a start let's explore Powershell modules in Metasploit while it comes
with many Powershell attack modules:
> *msf\> search powershell*
To convert a Powershell script into a malicious executable file you can
use msfvenom utility:
> *\>msfvenom -p windows/exec CMD = "powershell -ep bypass Hidden*
>
> *-enc \[ Powershell script Here \]" -f exe -o*
>
> */root/home/ghost/Desktop/power.exe*
## PowerSploit
PowerSploit is a collection of Microsoft PowerShell modules that can be
used to aid penetration testers during all phases of an assessment.
PowerSploit is comprised of the following modules and scripts:
-   CodeExecution
-   ScriptModification
-   Persistence
-   AntivirusBypass
-   Exfiltration
-   Mayhem
-   Privesc
-   Recon
![](media/image52.png)For more details, you can visit the project Github
Repository from this link:
[[https://github.com/PowerShellMafia/PowerSploit]{.underline}](https://github.com/PowerShellMafia/PowerSploit)
## ![](media/image53.png)Powerview
PowerView is a Powershell script that gives you the ability to perform
many reconnaissance tasks, as follows:
-   **Users:** Get-NetUser
-   **Groups:** Get-NetGroup
-   **Sessions:** Get-NetSession
-   **GPO locations**: Find-GPOLocation
-   **Active Directory objects:** Set-ADObject
-   **Forests:** Get-NetForest
It is a part of the Powersploit project.
## Nishang -- PowerShell for penetration testing
Nishang is a framework and collection of scripts and payloads which
enables usage of PowerShell for offensive security, penetration testing
and red teaming. Nishang is useful during all phases of penetration
testing.
Github Link:
[[https://github.com/samratashok/nishang]{.underline}](https://github.com/samratashok/nishang)
![](media/image54.png)To import Nishang Modules you can use the
PowerShell Cmdlet *"**Import-Module**"* if you receive an error message
make sure that you have the right privileges
> *Set-ExecutionPolicy -ExecutionPolicy RemoteSigned*
To know more about a module type:
> *Get-Information \*
You can now use the power of Nishang using many amazing scripts like:
-   Get-WLAN-Keys
-   Get-PassHashes
-   Get-Information
-   Invoke-Mimikatz
-   Invoke-CredentialsPhish
## Empire
In this section, we are going to explore "The Empire" which is a
PowerShell and Python post-exploitation agent maintained by
[[http://www.powershellempire.com/]{.underline}](http://www.powershellempire.com/)
First before learning how to use this framework we need to make sure
that we acquired a fair understanding of some important terminologies.
### What is Post Exploitation?
According to [[The Penetration Testing Execution
Standard]{.underline}](http://www.pentest-standard.org/index.php/Post_Exploitation)
> "The purpose of the Post-Exploitation phase is to determine the value
> of the machine compromised and to maintain control of the machine for
> later use. The value of the machine is determined by the sensitivity
> of the data stored on it and the machines usefulness in further
> compromising the network."
![](media/image55.png)To use the project clone it from the following
github repository:
[[https://github.com/EmpireProject/Empire]{.underline}](https://github.com/EmpireProject/Empire)
Clone it and run:
> *sudo ./setup/install.sh*
![](media/image56.png)![](media/image57.jpeg)This is the main screen of
Empire:
Image Courtesy:
[[https://www.powershellempire.com/wp-content/uploads/2015/07/empire_main_menu-1024x622.]{.underline}](https://www.powershellempire.com/wp-content/uploads/2015/07/empire_main_menu-1024x622.png)
[[png]{.underline}](https://www.powershellempire.com/wp-content/uploads/2015/07/empire_main_menu-1024x622.png)
As you can see, this great project contains 3 major components as the
following:
-   Modules
-   Listeners
-   Agents
[[Ka]{.underline}](https://www.peerlyst.com/tags/kali)l[i](https://www.peerlyst.com/tags/kali)
Ninja
([[https://creator.wonderhowto.com/kalininja/]{.underline}](https://creator.wonderhowto.com/kalininja/))
defines them as the following:
-   A **listener** is a process which listens for a connection from the
    machine we are attacking. This helps Empire send the loot back to
    the attacker\'s computer.
-   A **stager** is a snippet of code that allows our malicious code to
    be run via the agent on the compromised host.
-   An **agent** is a program that maintains a connection between your
    computer and the compromised host.
To check listeners type:
> *listeners*
To use a specific listener type:
> *uselistener*
To take a look at the options type info.
As a demonstration, you can follow this great demo/scenario
[[Post-Exploitation with
PowerShell]{.underline}](https://ethicalhackingblog.com/hacking-powershell-empire-2-0/)
[[Empire
2.0]{.underline}](https://ethicalhackingblog.com/hacking-powershell-empire-2-0/)
performed by \"Gus Khawaja\" who used this workflow to show the power of
The Empire Framework 2.0
![](media/image58.jpeg)Image Courtesy:
[[https://ethicalhackingblog.com/wp-content/uploads/2017/07/01_Workflow.bmp]{.underline}](https://ethicalhackingblog.com/wp-content/uploads/2017/07/01_Workflow.bmp)
## Mimikatz
Mimikatz is an amazing C project developed by [[Benjamin
Delpy]{.underline}](https://twitter.com/gentilkiwi?lang=en). It is used
generally to extract passwords from memory (plaintexts passwords, hash,
PIN code and kerberos tickets). You can download the project from this
link:
[[https://github.com/gentilkiwi/mimikatz/releases]{.underline}](https://github.com/gentilkiwi/mimikatz/releases)
![](media/image59.jpeg)Image Courtesy:
[[Mimikatz-secret-double-octopus.jpg]{.underline}](https://doubleoctopus.com/wp-content/uploads/2018/08/Mimikatz-secret-double-octopus.jpg)
To get the debugging privileges type: privilege::debug
to extract the hostname type:
> *hostname*
to dump logon passwords you can use:
> *sekurlsa::logonPasswords full*
## Summary
In this chapter we took a look at some of the well known powershell
projects that help red teamers in their missions.
> Chapter 9
>
> **Lateral Movement**
>
> Contributors: Mohamed Marrouchi and Elyes Chemengui
>
> ![](media/image60.png)
>
> **Introduction**
Network Lateral Movement, or what is more commonly referred to simply
as, \"Lateral Movement,\" refers to the techniques cyber attackers, or
\"[[threat
actors]{.underline}](https://en.wikipedia.org/wiki/Threat_actor)\", use
to progressively move through a network as they search for the key data
and assets that are ultimately the target of their attack campaigns. In
this chapter we are going to discover the following topics:
Man-in-the-middle attacks
1.  ARP spoofing using arpspoof
2.  ARP spoofing using MITMf
3.  Bypassing HTTPS
4.  Session hijacking
5.  Code injection
Scapy
1.  MyFirstPacket
2.  Sending and receiving
3.  Layering
4.  Viewing the packet
5.  Classical attacks
## Man-in-the-middle attacks
In the following couple of areas, we will discuss what are known as
man-in-the-middle (MITM) attacks. This is a standout among the most
risky and powerful assaults that we can convey out in a network. We can
just do it once we have associated with the network. It tends to be
utilized to divert the stream of flow from any customer to our device.
This implies any packet that is sent to or from the customer will have
to go through our device, and since we know the secret word we know the
way to the system, so we will have the capacity to read those packet.
They won\'t be encrypted, and we will have the capacity to change them,
drop them, or simply read them to check whether they contain passwords
or critical data. This attack is so successful in light of the fact that
it\'s difficult to secure against. however, it\'s difficult to
completely secure against this assault. This is because of the way the
ARP convention works. It was customized in a way that is extremely
straightforward and exceptionally viable, but it\'s not secure enough.
ARP has two primary security issues. The first is that every ARP ask for
or response is trusted, so whatever our device says to different device
that are in our network will be trusted. We can simply tell any device
that is on our network that we are the router and the device will
confide in us. It won\'t endeavor to ensure that we are really the
router. It won\'t run any tests to guarantee our character. In the event
that we tell any device that we are the router, the device will trust
us. Similarly, on the off chance that we tell the router that we are
another person on the network, the router will confide in us and will
begin regarding us as that device; in this way, that is the principal
security issue. The second security issue is that client can acknowledge
response regardless of whether they didn\'t send a demand. Anyway, for
instance, when a device interfaces with the system, the main thing it
will ask is, who is the router? And afterward the router will send a
response saying \"I am the router.\" Now, we can simply send a response
without the device asking who the router is. We can simply tell the
device we are the router, and on the
grounds that the device trust anybody, they will believe us begin
sending us packet as opposed to sending the packet to the router.
![](media/image61.jpeg)Along these lines, how about we have a more
profound take a gander at how this MITM attack functions. It will work
utilizing a technique called ARP spoofing, or ARP poisoning, This is