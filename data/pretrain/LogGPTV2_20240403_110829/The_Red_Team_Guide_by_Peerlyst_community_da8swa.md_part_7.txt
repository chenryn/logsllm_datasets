### User Account Control (UAC) Bypass Techniques

The MITRE ATT&CK framework has an entire webpage dedicated to the use of Windows UAC bypasses in various malware samples by cybercriminals and nation-state Advanced Persistent Threat (APT) groups. Here are a few examples:
- APT 29 (a.k.a., Cozy Bear, CozyDuke, The Dukes)
- BlackEnergy
- FinFisher
- H1N1
- InvisiMole
- Pupy
- Shamoon
- APT 27 (a.k.a., Iron Tiger, LuckyMouse, Emissary Panda, TG-3390)

#### Summary
Microsoft has often downplayed UAC bypasses as not qualifying as a security boundary. However, many systems run everything at the local admin permission level, making UAC bypasses highly effective for Red Team operations. Security administrators should never rely solely on UAC, avoid running as a split-token admin, and always use a non-admin user account for non-admin tasks.

#### References and Further Reading
For additional resources on UAC bypasses:
- **Peerlyst Wiki**: [UAC Bypasses and UAC Bypass Research](https://www.peerlyst.com/posts/wiki-uac-bypasses-and-uac-bypass-research-nic-cancellari?trk=search_query)
- **@enigma0x3's Research**: [Not a Security Boundary: Bypassing User Account Control](https://www.slideshare.net/enigma0x3/not-a-security-boundary-bypassing-user-account-control), [Video](https://www.youtube.com/watch?v=c8LgqtATAnE)
- **@tiraniddo's Techniques**: [Exploiting Environment Variables in SilentCleanup Task](https://tyranidslair.blogspot.fr/2017/05/exploiting-environment-variables-in.html), [Reading Your Way Around UAC: Part 1](https://tyranidslair.blogspot.fr/2017/05/reading-your-way-around-uac-part-1.html), [Part 2](https://tyranidslair.blogspot.fr/2017/05/reading-your-way-around-uac-part-2.html), [Part 3](https://tyranidslair.blogspot.fr/2017/05/reading-your-way-around-uac-part-3.html)
- **@hFireF0X's UACME Project**: [UACME GitHub Repository](https://github.com/hfiref0x/UACME), [Kernelmode Posts](http://www.kernelmode.info/forum/viewtopic.php?f=11&t=3643)
- **@FuzzySec's UAC Workshop**: [DefCon25 UAC Workshop](https://github.com/FuzzySecurity/DefCon25), [Bypass-UAC PowerShell Scripts](https://github.com/FuzzySecurity/PowerShell-Suite/tree/master/Bypass-UAC)

### PowerShell for Red Teams

PowerShell is a task-based command-line shell and scripting language designed for system administrators and power users to automate the administration of multiple operating systems (Linux, macOS, Unix, and Windows). It is open-source and can be found at [GitHub](https://github.com/PowerShell/PowerShell).

This chapter will provide an overview of using PowerShell in red teaming missions, including:
- Metasploit and PowerShell
- PowerSploit
- PowerView
- Nishang
- Empire
- Mimikatz

#### Metasploit and PowerShell
Metasploit includes many PowerShell attack modules. To search for these modules, use:
```sh
msf> search powershell
```
To convert a PowerShell script into a malicious executable file, use `msfvenom`:
```sh
msfvenom -p windows/exec CMD="powershell -ep bypass -enc [Base64 Encoded Script]" -f exe -o /root/home/ghost/Desktop/power.exe
```

#### PowerSploit
PowerSploit is a collection of PowerShell modules for penetration testing, including:
- CodeExecution
- ScriptModification
- Persistence
- AntivirusBypass
- Exfiltration
- Mayhem
- Privesc
- Recon

For more details, visit the [PowerSploit GitHub Repository](https://github.com/PowerShellMafia/PowerSploit).

#### PowerView
PowerView is a PowerShell script for performing reconnaissance tasks such as:
- **Users:** Get-NetUser
- **Groups:** Get-NetGroup
- **Sessions:** Get-NetSession
- **GPO Locations:** Find-GPOLocation
- **Active Directory Objects:** Set-ADObject
- **Forests:** Get-NetForest

It is part of the PowerSploit project.

#### Nishang
Nishang is a framework and collection of scripts and payloads for offensive security, penetration testing, and red teaming. To import Nishang modules, use:
```sh
Import-Module [Module Path]
```
If you encounter errors, ensure you have the necessary privileges:
```sh
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
```
Explore Nishang with scripts like:
- Get-WLAN-Keys
- Get-PassHashes
- Get-Information
- Invoke-Mimikatz
- Invoke-CredentialsPhish

#### Empire
Empire is a PowerShell and Python post-exploitation agent. To set it up, clone the repository and run the setup script:
```sh
git clone https://github.com/EmpireProject/Empire
cd Empire
sudo ./setup/install.sh
```
Key components include:
- **Modules**
- **Listeners**
- **Agents**

For more information, refer to the [Empire GitHub Repository](https://github.com/EmpireProject/Empire).

#### Mimikatz
Mimikatz is a C project developed by Benjamin Delpy for extracting passwords from memory. Download it from the [Mimikatz GitHub Releases](https://github.com/gentilkiwi/mimikatz/releases).

To use Mimikatz, type:
```sh
privilege::debug
hostname
sekurlsa::logonPasswords full
```

### Summary
This chapter covered several well-known PowerShell projects that assist red teamers in their missions.

### Chapter 9: Lateral Movement

#### Introduction
Lateral Movement refers to the techniques used by cyber attackers to move through a network, searching for key data and assets. This chapter will cover:
- Man-in-the-middle (MITM) attacks
- ARP spoofing using arpspoof and MITMf
- Bypassing HTTPS
- Session hijacking
- Code injection
- Scapy for packet manipulation

#### Man-in-the-middle Attacks
MITM attacks are among the most dangerous and powerful network attacks. They involve diverting traffic from any client to the attacker's device, allowing the attacker to read, modify, or drop packets. ARP spoofing is a common technique, exploiting the trust in ARP requests and responses.

For a deeper look at how MITM attacks work, see the following sections on ARP spoofing and related techniques.