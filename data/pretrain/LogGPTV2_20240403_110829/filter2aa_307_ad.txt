[21] http://tldp.org/HOWTO/Kernel-HOWTO /kernel_files   
_info.html#systemmap 
Appendix 
A. How the SuckIT Rootkit Functions on the 
Target System 
An individual wishing to install the SuckIT rootkit on a 
target system must already have gained root level access 
on this system.  There are a variety of methods available 
for a hacker to accomplish this and this is outside of the 
scope of this paper.  We assume that a hacker has already 
gained root level access for our the purposes of our 
research. 
One of the key features of the SuckIT rootkit is its 
ability to identify the correct location to overwrite within 
the kernel memory.   The SuckIT rootkit uses the 
following segment of code within the install.c program file  
to do this: 
asm ("sidt %0" : "=m" (idtr)); 
printf("RK_Init: idt=0x%08x, ", 
(uint) idtr.base); 
if (ERR(rkm(fd, &idt80, 
sizeof(idt80), 
idtr.base + 0x80 * 
sizeof(idt80)))) { 
printf("IDT table read 
failed (offset   
0x%08x)\n", 
(uint) idtr.base); 
close(fd); 
return 1; 
} 
old80 = idt80.off1 | (idt80.off2 
: push   %eax 
0xc01070fd : 
cld     
0xc01070fe : 
push   %es 
0xc01070ff : 
push   %ds 
0xc0107100 : 
push   %eax 
0xc0107101 : 
push   %ebp 
0xc0107102 : 
push   %edi 
0xc0107103 : 
push   %esi 
0xc0107104 : 
push   %edx 
0xc0107105 : 
push   %ecx 
0xc0107106 : 
push   %ebx 
0xc0107107 : 
mov    $0x18,%edx 
0xc010710c : 
mov    %edx,%ds 
0xc010710e : 
mov    %edx,%es 
0xc0107110 : 
mov    $0xffffe000,%ebx 
0xc0107115 : 
and    %esp,%ebx 
0xc0107117 : 
testb  $0x2,0x18(%ebx) 
0xc010711b : 
jne    0xc010717c  
0xc010711d : 
cmp    $0x100,%eax 
0xc0107122 : 
jae    0xc01071a9  
0xc0107128 : 
call   *0xc02d1890(,%eax,4) 
0xc010712f : 
mov    %eax,0x18(%esp,1) 
0xc0107133 : 
nop     
End of assembler dump. 
(gdb) print &sys_call_table 
$1 = ( *) 0xc02d1890 
(gdb) x/xw (system_call+44) 
0xc0107128 : 
0x908514ff 
This functions returns a pointer to the Interrupt 
Descriptor of the System Call Function (int $0x80).  The 
program is now able to compute the entry point of the 
System Call function within kernel memory.  This is 
accomplished by the following code:   old80 = idt80.off1 | 
(idt80.off2 : 
call 
*0xc02d1890(,%eax,4)) 
corresponds to this command since we have also 
demonstrated that the value stored at the system call table 
= 0xc02d1890.    We now wish to examine the memory at 
location .  We utilize the x/Format  
Address command  within gdb to do this.  The exact 
format used is: (gdb) x/xw (system_call+44) where xw – 
hex format word size.   The output of this command is 
0x908514ff which is opcode in little endian format.  The 
opcode 0xff 0x14 0x85  0x  matches to the pattern ‘call  *some address)( 
,%eax, 4)’ .  This opcode pattern gives the SuckIt rootkit a 
specific pattern to search for within /dev/kmem.  The 
address that follows this series of opcode is then changed 
by SuckIT to the address of the new System Call Table 
that the rootkit creates.   Current LKM detectors do not 
check the consistency  of the int $0x80 function [14].  We 
find this to be significant because we propose that like 
SuckIT, one can query the int $0x80 function to retrieve 
the current pointer to the System Call Table that is in use 
within the kernel and then check the integrity of this 
System Call Table in order to determine if this system has 
been infected with a kernel level rootkit of either type.   
We have analyzed of the opcode series /xff /x14/x85/  
to be sure that this will consistently be the opcode that 
SuckIT will need to search for in order to find the correct 
spot to modify the pointer to the System Call Table within 
/dev/kmem.   According to the description of the 
Instruction Set of the INTEL Embedded Pentium ® 
Processor Family, the Opcode for the Call Instruction that 
we have seen from the disassembly of the system_call 
function is as follows: 
Opcode 
Instruction 
Description 
FF/2 
CALL r/m32 
Call near, absolute indirect,   
address given in r/m32 
The first opcode: xff, symbolizes the CALL instruction.  
The second opcode: x14, is in the ModR/M byte of the 
instruction and symbolizes that a SIB byte will be 
following this byte.  The third opcode; x85, is in the SIB 
byte and symbolizes the 32 addressing format that is to be 
used, in this case [EAX*4].      This series of opcode 
should not change between kernel versions  as long as the 
INTEL Embedded Pentium ® Processor  is used in the 
hardware platform[17].  
A problem with using gdb to view this data is that the 
vmlinux kernel image that is used as input may not be an 
actual representation of what is currently loaded in the 
kernel.    A kernel level rootkit may modify the kernel 
without changing any of the system files that are resident 
on the computer’s file system.  You will still be able to 
determine that the system call table has been tampered 
with by comparing the address of the system call table that 
is returned from querying the Interrupt Descriptor Table 
using the sidt assembly language command and comparing 
this value against the value that is retrieved from the 
vmlinux file and/or the address of the System Call Table 
(sys_call_table) that is stored in /boot/System.map if these 
files are available.  It is possible to view the actual data 
that is loaded into the kernel by using a program such as 
kdb, which is a kernel level debugger.  The kdb program 
may not be  installed by default on a particular installation 
of Linux.  If this program is available it is very easy to 
examine the kernel memory to view modifications.   The 
following is an example of using kdb to display the 
instructions stored at a location in kernel memory: 
kdb> id 0xc0107128 
0xc0107128  system_call+0x2c:  
             call *0xc02d1890( ,%eax,4) 
The following is an example of using kdb to display the 
contents of kernel memory stored at a particular location: 
kdb> md 0xc0107128 
0xc0107128  908514ff 89c02d18 90182444  
            147b83f0 
The other significant feature of the SuckIT kernel level 
rootkit is its ability to install itself as resident into the 
kernel memory of the operating system.    SuckIT makes 
use of the kmalloc() function to accomplish this 
manipulation of the kernel.   The kmalloc() function is 
resident within the /linux/mm/slab.c file [18].   This file 
describes kmalloc() in the following manner: “The 
kmalloc function is the normal method of allocating 
memory from within the kernel.”   According to the 
comments provided with the install.c  program of version 
1.3b of SuckIT, an unused system call is overwritten with 
the address of the kmalloc() function.  The SuckIT rootkit 
must be able to determine the address of the kmalloc() 
function.  The method that SuckIT uses to retrieve this 
address does not work in all cases.   Once this address is 
retrieved it is then possible to access the kmalloc() 
function from within userspace.    
The 
developers 
of 
SuckIT 
have 
chosen 
the 
sys_olduname system call to use as the pointer to the 
kmalloc() function call.  This system call is the 59th entry 
in the System Call table of both the Linux 2.2 and 2.4 
kernel according to the /src/linux/arch/i386/kernel/entry.S 
file for each respective kernel.  However, any unused 
system call that is available could have been chosen.    
The rootkit writes the address of the kmalloc() function 
into the sys_olduname position and renames this as the 
OURSYS system call wrapper.    The OURSYS system 
call is then redefined as KMALLOC.     The KMALLOC 
system call wrapper is then called within the install.c 
program file to allocate the necessary kernel memory in 
order to have the necessary space to write the new 
instance of the system call table as well as the necessary 
space for the new system calls that are to be created.  
SuckIT calculates the amount of necessary space to be the 
size of the new kernel code that is created (kernel.s) 
(calculated from the values kernel_end – kernel_start 
which are labels that exist at the start and end of the 
kernel.s file) + space for the new system call table and 
process ID table.  If there is insufficient space available 
within the kernel, the program will terminate execution.    
If sufficient memory is available, then a pointer will be 
returned to this newly created block of memory within the 
kernel. 
A write kernel memory function (wkm) is then called to 
copy over the code that was created in the kernel.s file 
residing in userspace to this newly allocated kernel 
memory space at the following address:  START 
ADDRESS OF NEWLY ALLOCATED KERNEL 
MEMORY+SPACE 
ALLOCATED 
FOR 
NEW 
SYSTEM CALL TABLE.  
This will allow for enough space at the start of this 
newly allocated kernel memory for the new system call 
table that is to be created by SuckIT to appear before any 
of the new system call code. 
Figure 9 - SuckIT Redirection of Unused System Call 
A second write kernel memory function  (wkml) is 
called to copy over the KINIT system call macro from the 
code that was just copied into the newly allocated kernel 
space into the System Call Table at position number 59, 
which is the OURSYS system call that SuckIT created.  
This is the same system call location that SuckIT used for 
the KMALLOC system call.  The SuckIT rootkit 
overloads the OURSYS system call with the system call 
names for both KMALLOC and KINIT. 
The KINIT system call wrapper is then executed by the 
install.c program.  This system call does the following: 
1. 
Creates the new system call table, creates modified 
system calls, and inserts pointers to the modified 
system calls 
2. Restores the original system call table 
3. Redirects all subsequent system calls to the new 
system call table 
At this point trust has been broken with the kernel.  We 
can use this to create a ∇  to characterize the SuckIT 
rootkit. Figure 9 below demonstrates how SuckIT 
manipulates the System Call Table (sct) to  replace the 
address of sys_olduname() system call with the address of 
the kmalloc() function call in the first case and then with 
the kernel_init() function in the second case.  Macro 
functions are used to call both of these functions from 
within the install.c program.  The wrapper KMALLOC is 
used to call kmalloc() and the wrapper KINIT is used to 
call kernel_init.  Each wrapper has a corresponding list of 
parameters that are to be passed to the respective function. 