=== 搜索命令函数参数说明补充
==== printf函数的format参数类型
由若干个转译字符（例如，整数d，字符串s，科学技术法g）组成，每个转义字符前可以包含可选项;（例如，flag字符，指明宽度精度）；"(%[flags][width][.precision])..."
转译字符：
|=====
|字符|参数类型|示例
|'b','B'
|boolean变量
|根据boolean参数输出true或false, "printf("%b",1==0.5+0.5), 输出 "true"
|'s','S'
|字符串,输出string类型
|内容与参数相同,printf("%s","spl"),输出"spl"
|'d'
|整数
|将参数格式化为十进制整数输出,printf("%d",10),输出10
|'o
|整数
|将参数格式化为八进制整数输出,printf("%d",8),输出10
|'x','X'
|整数
|将参数格式化为十六进制整数输出,printf("%d",16),输出10
|'e','E'
|整数或浮点数
|将参数格式化为科学记数法输出,printf("%d",1248),输出1.248e3
|'f'
|浮点数
|输出参数的浮点数值 ,printf("%d", round(pi(),2)),输出3.14
|'a','A'
|浮点数
|参数格式化为十六进制浮点数输出,printf("%a",3.1415),输出 0x1.921cac083126fp1
|'%'
|-
|百分号转译符,printf("%%"),输出%
|=====
指定结果格式字符：
|=====
|字符|描述
|'-'
|结果左对齐（默认右对齐）
|'#'
|输出结果展示格式，例如printf("%#x",123) → 0x7b
|'+'
|结构总是包含符号
|' '
|正数结果前有一个空格
|'0'
|结果用0补齐精度和宽度
|=====
==== tonumber的参数类型
`tonumber(numStr)`语法：
|===
|numStr类型|描述|结果|示例
|Number类型 - 数字
|输入是数值类型的数字，则原样返回该数字。
|Number类型的数字
|tonumber(123) = 123
|String类型 - 基本类型（int, long, float, double)
|输入是基本类型数字字符串，则返回对应数字。（输入不支持L大小写表示的long值和f大小写表示的float值）
|基本类型对应数字
|tonumber("123") = 123;  tonumber("12345678910123456") = 12345678910123456L;  tonumber("1.23") = 1.23f;  tonumber("1.23456789") = 1.23456789
|String类型 - 超长
|输入是超长整数或小数位数大于15位的数字，返回约等值。
|约等值，可能会以科学计数法表示。
|tonumber("12345678901234567890") = 12345678901234567000;  tonumber("1.12345678901234567890") = 1.1234567890123457
|String类型 - 负数
|输入是负数字符串，返回负数。
|负数
|tonumber("-123") = -123;tonumber("-1.23") = -1.23f
|String类型 - 科学计数法
|输入是科学计数法表示的数字字符串，返回是对应的数值。
|对应数值
|tonumber("1.234567890123e+12") = 1234567890123L
|表达式
|输入是表达式，返回是表达式结果对应的数值。
|对应结果数值
|tonumber(23 + 2) = 25;tonumber("23" + 2) = 232
|===
`tonumber(numStr, base)`语法：
|===
|numStr类型|base范围|描述|结果|示例
|整数 – Number类型 \| String类型（int, long）（包括负数)
|2-36
|输入是2-36进制的数值类型的整数数字或数字字符串，返回转换为10进制后的整数数字。（输入不支持L大小写表示的long值，16进制支持0x开头字符串且字母大小写都支持）
|Number类型的整数数字
|tonumber(123, 10) = 123;tonumber(123, 16) = 291;tonumber("123", 10) = 123;
tonumber("1010", 2) = 10;
tonumber("0xb5", 16) = 181;
tonumber("-123", 10) = -123;
tonumber("-123", 16) = -291
|小数 - Number类型 \| String类型（float, double）（包括负数)
|10
|输入是10进制的数值类型的小数或小数字符串，才可返回该小数。（输入不支持f大小写表示的float值）
|Number类型的小数数字
|tonumber(1.23, 10) = 1.23f;
tonumber("1.23", 10) = 1.23f;
tonumber("1.23456789", 10) = 1.23456789;
tonumber("-1.23", 10) = -1.23f
|超长
|2-36
|输入是超长整数或小数位数大于15位的数字字符串，能解析成功就返回正常值，解析不成功不返回，结果超长返回约等值。（如果是小数字符串，只支持10进制）
|正常值 \| 约等值 \| 无值，可能会以科学计数法表示。
|tonumber("11111111111111111111", 10)= 11111111111111110000;
tonumber("11111111111111111111", 2) = 1048575;
tonumber("1.11111111111111", 10) = 1.11111111111111;
tonumber("1.11111111111111111", 10) = 1.11111111111111112
|科学计数法
|10
|输入是科学计数法表示的数字字符串，返回是对应的数值。
|对应数值
|tonumber("1.12345e+5", 10) = 112345;
tonumber("1.234567890123e-3", 10) = 0.001234567890123
|表达式
|2-36
|输入是表达式，返回是表达式结果对应的数值。（如果结果是小数，只支持10进制）
|对应结果数值
|tonumber(2.3 + 2, 10) = 4.3
|===
==== in函数
in函数支持多种写法:
. WHERE命令：
 （1）... | where in(field, V1, V2, ...)
 （2）... | where field in(V1, V2, ...)
. EVAL命令：
 （1）... | eval is_in = in(field, V1, V2, ...)
 （2）... | eval is_in = if(in(field, V1, V2, ...), true, false)
详情:
|===
|field|V系列|描述|示例
|单值
|若干指定值
|如果field的值和V系列若干值中的任意一个相等，则返回true；否则，返回false。
|field = 1 -> in(field, 1, 2) = true;
field = 5 -> in(field, 1, 2) = false;
|多值
|若干指定值
|如果field列表中的任一值和V系列人若干值中的任一值相等，则返回true；否则，返回false。
|field = [1,10,100] -> in(field, 1, 2) = true;
field = [1,10,100] -> in(field, 11, 22) = false;
|单值或多值
|无
|如果V系列没有设置值，则都返回false;
|field = 1 -> in(field) = false;
|单值或多值
|包含字段名
|如果V系列中包含字段名，则使用字段值。其余规则同第一条。
如果V系列中包含的字段名对应的也是多值，则不会平铺，按照列表比较。
|field = "1", value = "1" -> in(field, value, "2") = true;
field = ["1", "10", "100"], value = ["1", "11", "111"] -> in(field, value) = false;
field = ["1", "10", "100"], value = ["1", "10", "100"] -> in(field, value) = true;
|单值或多值（数字）
|若干指定值（数字）
|field和V系列是数字类型时，按值比较，相等即返回true，否则，返回false。（in和long，float和double）
|field = 1L -> in(field, 1, 2) = true;
field = 1.5f -> in(field, 1.5, 2.5) = true;
|===