to free up available sockets, because other users must finish their requests before
the sockets become available for Slowloris to consume. Nevertheless, Slowloris
eventually will flood all the available sockets, killing service to the victim website.
Slowloris takes advantage of servers that use threaded processing, meaning
vulnerable to limiting the amount of threading permitted. Examples include
Apache 1.x, 2.x, dhttpd, GoAhead, and so on.
Slowloris does not come installed on Kali Linux. You can download Slowloris from
http://ckers.org/slowloris
To run Slowloris, download the .pl script and open a command terminal. Go
to the folder with the script and type:
perl slowloris.pl
This will bring up the main screen. To run Slowloris on a target, type the
same command followed by -dns and your target. For example, to attack
www.thesecurityblogger.com, type:
perl slowloris.pl -dns thesecurityblogger.com
[ 241 ]
www.it-ebooks.info
Web Attacks
You will see Slowloris consume available sockets, which will eventually take down
your target:
If Slowloris is able to do its magic, your target will become unavailable:
DoS example attack www.thesecurityblogger.com (please don't
test against this website)
Low Orbit Ion Cannon
Low Orbit Ion Cannon (LOIC) is network stress testing tool, meaning it is designed
to test how much traffic a target can handle for planning future resource expectations.
The software has inspired other similar software such as JavaScript, LOIC, which
allows a user to do stress testing directly from a web browser.
The software was famously used by Anonymous to help them facilitate DDoS attacks
against several websites, including some very well-known public entities. Some
legal arguments have been made that LOIC is similar to going to a website several
thousand times; however, some American law enforcement groups treat the use of
LOIC as a violation of the computer security and fraud act.
[ 242 ]
www.it-ebooks.info
Chapter 6
To install LOIC, Open a terminal window and type:
apt-get update
aptitude install git-core monodevelop
apt-get install mono-gmcs
Once that is complete, go to the desktop directory using cd/Desktop and create a
folder named loic using the following command:
mkdir loic
Navigate to that folder using cd/loic and type the following command:
wget https://raw.github.com/nicolargo/loicinstaller/ master/loic.sh
Next, give permissions to the script file using the command:
chmod 777 loic.sh
The final step is running the script by using the following command:
./loic.sh install
[ 243 ]
www.it-ebooks.info
Web Attacks
If you don't get any error messages from running the script, then you are ready to
update loic. To update, use the following command:
./loic/sh update
Finally, it is time to launch LOIC. You do so by using the following command:
./loic.sh run
Using LOIC is straightforward. You can select if you would like to use manual mode
or IRC Mode. We will choose manual mode for the following example.
Next, you can choose the URL or IP address you want to flood. We will use the IP
address 127.0.0.1 for the following example. LOIC offers attack options if you like
to modify TCP or UDP settings.
[ 244 ]
www.it-ebooks.info
Chapter 6
When you are ready to launch your attack, press the button IMMA CHARGIN
MAH LAZER. LOIC will show the attack is in process. Click on the Stop Flooding
button to stop the attack:
Other tools
Kali Linux offers many tools that could be useful for web-based attacks. Here are
some additional tools available in Kali Linux that have not been covered and could
be used for remote Penetration Testing.
DNSCHEF
DNSChef is a DNS proxy for Penetration Testers and Malware Analysts. A DNS
proxy also known as "Fake DNS" is a tool used for application network traffic
analysis and other use cases. Domain Name System (DNS) is a distributed naming
system for computers, services, or any resource connected to the Internet or private
network. Providing fake DNS addresses can redirect traffic to other desired locations.
[ 245 ]
www.it-ebooks.info
Web Attacks
For example, a DNS proxy can be used to fake requests for badguy.com to point to
a local machine for termination or interception instead of a real host somewhere on
the Internet. For this to work, you need to gain access and modify DNS entries on a
single server or poison the real DNS so that traffic gets to the Kali Linux server. The
DNSChef tool is easy to use; however, the challenge is the DNS attack method to
direct traffic to Kali Linux.
SniffJoke
SniffJoke handles your TCP connection transparently, providing delay, modifying,
and injecting fake packets inside your transmission. This process makes it extremely
difficult for a passive wiretapping technology such as an IDS/IPS or sniffer to
interpret the traffic correctly. This is done by exploiting what is presumed recorded
by a sniffer and what is transmitted by the client, making this inconsistent for the
algorithm of packet reassembly. The next two diagrams showcase wiretapping traffic
between two users without and with SniffJoke.
[ 246 ]
www.it-ebooks.info
Chapter 6
Siege
Siege is a HTTP/HTTPS stress testing utility designed for web developers to
measure the performance of their code under duress. Siege offers multi-threaded
HTTP load testing and benchmarking by hitting a web server with a configurable
number of concurrent, simulated users. Siege offers a regression, Internet simulation
and brute force modes.
You can find Siege under Stress Testing | Network Stress Testing | Siege:
To run Siege, type the following command:
siege [options] 
The following screenshot shows running Siege against www.thesecurityblogger.
com. The default user count is 15, as shown in the screenshot. When you stop the
Siege testing, the tool provides a report post stress test as follows:
[ 247 ]
www.it-ebooks.info
Web Attacks
Inundator
Inundator is a tool that evades Intrusion Detection Systems (IDS) and Intrusion
Prevention Systems (IPS) by flooding their log files. The concept is that you may
want to flood a target with false positives so you can hide a real attack from a
reaction and forensic viewpoint. Inundator can also be used to test the effectiveness
of the alerting system of your security reporting tools, such as SIEM and IDS/IPS.
TCPReplay
TCPReplay uses previously captured traffic in libpcap format to test a variety of
network devices. TCPReplay can classify traffic as client or server, rewrite Layer
2, 3, and 4 headers and replay the traffic back onto the network as well as through
other devices, such as switches, routers, firewalls, and IDS/IPS. TCPReplay supports
single and dual NIC modes for testing both sniffing and inline devices.
Basically, TCPReplay can capture traffic between a client and server, and replay it
anywhere in the network.
[ 248 ]
www.it-ebooks.info
Chapter 6
Summary
This chapter concludes reviewing various methods available in Kali Linux 1.0 that
could be used to perform Penetration Testing against web application servers. At
this point, readers should know how to research a target, identify vulnerabilities
in that target, as well as all associated interactions with host and clients, exploit
vulnerabilities, and interrupt services if desired. This text is a brief overview of tools
available in Kali Linux; however, there are many other tools beyond Kali Linux
that should be included in your Penetration Testing arsenal. Kali Linux offers a lot
of value with native toolsets; however, the best Penetration Testers leverage tools
beyond Kali, such as Day Zero type attacks based on custom scripts and utilities. We
recommend researching and testing multiple tools for attack methods covered in this
text to grow your experience as a professional Penetration Tester.
This chapter focused on identifying and exploiting vulnerabilities remotely as
related to Internet-based attacks. We covered browser exploitation attacks, proxy
attacks, and password harvesting. We concluded with methods to interrupt services
as a means of stress testing web applications as well as identifying how vulnerable
targets are to DoS attacks.
The next chapter will change gears by looking at how to defend web applications
using tools available in Kali Linux 1.0.
[ 249 ]
www.it-ebooks.info
www.it-ebooks.info
Defensive Countermeasures
Up until this chapter, we have covered how to use Kali Linux to compromise targets.
Now it is time to switch gears and become the defender with the goal of avoiding
being compromised by methods we have demonstrated in this book, as well as
other forms of attack. Defending an Internet-facing resource is extremely difficult,
based on being exposed to the entire world through public access, mixed with the
operations requirement of not being able to impact service to trusted users at a cost
of security. It is absolutely critical to include security in the entire lifecycle from
conception to termination of anything public facing, rather than considering security
as an afterthought. This will not only reduce the risk of threats against the service,
but also likely be less expensive to remediate in the event of a cyber incident.
It is common knowledge that there are bad people attacking systems on the
Internet, regardless of the nature of the business. As a defensive counter measure,
organizations put their trust in solutions for defense from these cyber threats. The
problem with this strategy is the vendor is not the victim of an attack and doesn't
absorb damages from a cyber incident. Vendors will offer protection; however,
they can't be responsible for anything outside of their product's control. All it takes
is a missing update, configuration error, or millions of situations that can cause a
breach for which the vendor will not be liable. Plus, many organizations leverage
multi-vendor solutions that don't share security intelligence, making it possible for
liability to be passed back and forth between vendors. For these reasons and more,
we recommend the customer take ownership of the responsibility to protect assets by
hardening systems from threats.
www.it-ebooks.info
Defensive Countermeasures
Kali Linux is a leading Penetration Testing tool that can be used to identify where
systems are vulnerable to attack. Rather than attacking a target, we recommend
Penetration Testing your own network assets to identify vulnerabilities before a
malicious individual beats you to it. To quote Sun Tzu from The Art of War:
"If you know the enemy and know yourself, you need not fear the result of a
hundred battles. If you know yourself but not the enemy, for every victory gained
you will also suffer a defeat. If you know neither the enemy nor yourself, you will
succumb in every battle"
We believe the same foundational concepts are true; use Kali Linux to know yourself,
and know your weakness.
The advantage you have is you know it's happening, you and can use extreme
measures without the worry of triggering alarms. Typically, hackers will not risk
exposing themselves, reducing their options for attack. Stealth requires patience,
minimal touch to the target, and lots of planning. It is up to you to capitalize on your
ability to invest proper time and resources into security before somebody else invests
more into bypassing it. A common saying from the authors of this book is "99 percent
secure is a 100 percent insecure".
This chapter will provide different methods of using Kali Linux to audit your web
applications for common vulnerabilities, as well as other best practices for hardening
your network. We will cover security baselines, patch management, password
policies, and defending against attack methods, covered in previous chapters.
This chapter will also include a focused section on using Kali Linux in a forensic
investigation. Forensics is important after identifying that your web application or
other assets have been compromised, to avoid future negative impact.
Testing your defenses
As explained in the introduction, the best approach for hardening your defense is
attacking your existing security controls with the goal of identifying weakness.
Some key concepts to consider when developing a strategy for testing your cyber
security defenses are as follows:
• Black, white, or gray hat approach?
• Test a copy or the real system?
• Possible risks from Penetration Test?
• Who should be informed?
[ 252 ]
www.it-ebooks.info
Chapter 7
• Are you testing detection and response to threats or focusing on
identifying vulnerabilities?
• Are any compliance standards being considered?
Let's look at establishing a plan for validating our security. We first need to
know our baseline for security, so we know what to validate against.
Baseline security
One common question asked by industry experts is what should be the minimal
acceptable level for security. Many organizations must be in compliance with
mandates specified by their industry and government. Any system accepting
payments must adhere to the Payment Card Industry Data Security Standard
(PCI DSS). Healthcare environments must meet Health Insurance Portability and
Accountability (HIPAA) standards. Common mandates, such as these are covered
in Chapter 8, Penetration test Executive Report, are popular business drivers for
showing value for Penetration Testing services.
Outside of mandates, a good starting place for establishing a baseline for security
is reviewing how other agencies secure their systems. As security consultants for
American customers, we identify how the United States government secures sensitive
information as an example for baseline security. Most US-based organizations would
be interested in having similar security standards as the White House. This same
concept can be applied to other country IT standards, specific organization security
best practices, or recommended military security controls. There are also best practices
for security standards published from organizations made up of vendors and industry
leaders, such as the International Organization for Standardization (ISO).
Let's take a look at the United States baseline security of anything accessing a
government-controlled network.
Your baseline for security should be the absolute minimal level of security
used in your environment. Best practice is securing systems beyond the
baseline, because as most documented security baselines are limited, due
to date published, influence from funding parties, and other elements.
[ 253 ]
www.it-ebooks.info
Defensive Countermeasures
STIG
A Security Technical Implementation Guide (STIG) is a methodology for
standardized secure installation and maintenance of computer software and
hardware. This term was coined by the Defense Information Systems Agency
(DISA), which creates configuration documents in support of the United
States Department of Defense (DOD). The implementation guidelines include
recommended administrative processes and security controls used during the
lifecycle of the asset.
An example where STIGs would be of benefit is in the configuration of a desktop
computer. Most operating systems are not inherently secure, leaving them vulnerable
to criminals. A STIG describes how to minimize network-based attacks and prevent
system access when the attacker is present at the device. STIGs also describe
maintenance processes, such as software updates and vulnerability patching.
STIGs are great guidelines to secure operating systems, network devices, and
applications. You can download STIG guidelines from http://www.stigviewer.
com/stigs. You will find STIG documents contain step-by-step guides for hardening
a variety of systems, including web servers. In addition, STIG guidelines are a starting
point for configuring systems to meet several regulatory compliance standards.
For United States federal employees, STIGs are required for systems in networks
controlled by the Department of Defense and other government organizations.
There are many other resources available for finding security
standardization templates. Examples are the Center for Internet
Security (CIS) and Cisco Network Foundation Protection (NFP).
Patch management
With targeted attacks and zero-day vulnerabilities reducing the window of time
between when a vulnerability is disclosed and attackers develop an exploit, it's
becoming more incumbent on security managers to understand the assets in their
IT environment, and the patch levels of those systems. Patch management is an
ongoing process and can only be successful if there is a method to identifying when
a patch is available, prioritize when to implement the patch, validate it regarding
business compliance, and how to react when a patch is not available for a known
vulnerability. This also applies to applications within systems and software such
as plugins.
[ 254 ]
www.it-ebooks.info
Chapter 7
Generate
Status
Reports Update
Vulnerability
Details
from
Vendors
Download
and
Deploy
Patches
Scan the
Network
Identify
Vulnerable
Systems
Patch management is just one aspect of the larger vulnerability lifecycle. The first
step is identifying vulnerabilities, which can be done through vendor updates or
services that range from periodic scanning to hardcore Penetration Testing. There
should be a policy that explains how often different levels of scans are performed
as well as who is responsible to review threats that are found. A good starting point
for establishing a baseline for how often to scan for vulnerabilities is reviewing what
regulatory compliance standards you must follow, as many include language around
internal and external vulnerability scanning.
The second step for patch management is reacting to systems identified as
vulnerable. As explained in Chapter 1, Penetration Testing and Setup, being
vulnerable doesn't necessarily mean there is a risk unless the vulnerability is
validated through exploiting during a Penetration Test or other method.
Securing a vulnerability could simply require a patch or upgrade; however,
some vulnerabilities may require more investment in time and labor to remediate.
Calculating the risk associated with investment to remediate comes into play
for these situations.
The final step in patch management is scheduling the patch as it pertains to
how critical the vulnerability is to business operations. This is a key, as many
compromised systems could have been safe if they were patched prior to being
identified by a malicious party. We find many of our customers have maintenance
windows scheduled on a monthly or longer basis for patch management, that
leaves a large window of time for being exposed in the event a system becomes
vulnerable to attack. Best practice is assigning an Information Assurance Specialist
the responsibility of calculating the risk associated with systems identified as
vulnerable, as well as having the authority to trump maintenance windows when a
threat reaches a certain level of risk to business operations.
[ 255 ]
www.it-ebooks.info
Defensive Countermeasures