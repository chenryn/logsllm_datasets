### 6. IMPLEMENTATION AND RESULTS

We implemented our protocol in C++ using Shoup’s NTL library for finite field operations and BOOST::MPI for network emulation. For the selection of evaluation points, we chose a prime with a sufficiently large power of two roots of unity, setting \(\eta_i\) and \(\zeta_j\) values to be these roots of unity. This choice enabled us to perform interpolation and evaluation using inverse FFT and FFT operations. Our experiments were conducted on an Intel Core i7-4720HQ CPU (2.60 GHz, 4 cores) with 8 GiB RAM. We used SHA-256 as our collision-resistant hash function.

#### Comparison with ZKB++/ZKBoo
Our work is primarily compared with ZKB++/ZKBoo [13, 22], which qualitatively match our results in most aspects. The key advantage of our approach over ZKB++/ZKBoo is that our communication complexity is sublinear in the circuit size, whereas ZKB++/ZKBoo incurs communication proportional to the circuit size. In the amortized setting, our approach provides significantly better communication cost and runtimes compared to ZKB++/ZKBoo.

#### Boolean Predicate Verification
To demonstrate our implementation, we focused on verifying a SHA-256 certificate, a common benchmark in prior works. Specifically, given a 256-bit string \(y\) as a common input and a private input \(x\) from the prover, the prover convinces the verifier that \(SHA256(x) = y\).

#### Optimizations
A standard computation of the SHA certificate involves AND, XOR gates, and addition modulo \(2^{32}\) gates. Instead of realizing the addition modulo \(2^{32}\) gates using Boolean AND and XOR gates, we express the addition modulo \(2^{32}\) gate consistency as a linear constraint over the bits of the inputs and output of the gate. Following Section 4.5, this can be efficiently realized if we rely on a prime field larger than \(2^{33}\). However, to achieve optimal communication for a given witness size, a specific field size must be chosen. To handle this, we incorporate these addition gates by considering a word size of \(\lceil \log |F| \rceil\) and performing 32-bit additions using arithmetic over the smaller word size. These optimizations result in a witness size of 33,928 bits for the SHA-256 certificate (for \(|F| \geq 2^{14}\)).

We ran our protocol for different circuit sizes and, for each size, we used ad-hoc optimizers to obtain optimal parameters for soundness \(2^{-40}\). A tighter soundness error, as described in Section 4, can be obtained by discarding the last inequality in Lemmas 4.2, 4.6, and 4.8. We relied on these better bounds in our optimizer. For a soundness error of \(2^{-80}\), the communication and computation costs double, as in [13, 22]. For boolean circuits, the quadratic constraints only involve checking if each element of the witness is binary, and we can simplify the test in Section 4.3 by eliminating \(x\), \(y\), and \(z\), having the prover compute:
\[ p_0(\cdot) = \prod_{i} (p_w^i(\cdot) - p_w^i(\cdot) \cdot r_i) \]

#### Experimental Results
In Figure 1, we compare the prover and verifier running times for verifying circuits of sizes ranging from 2,048 gates to 400,000 gates. The computational complexity of both the prover and the verifier in the single-instance setting is proportional to \(O(s \log s)\) field operations, where \(s\) is the circuit size. The optimal field size can be asymptotically shown to be \(O(\log s)\), resulting in an overall computational complexity of \(O(s \log^2 s)\). If uniformity assumptions are made on the circuit, the verifier's computational complexity becomes sublinear in the circuit size. In the multi-instance setting, the verifier's complexity is indeed smaller than the computational complexity.

In Figure 2, we provide the communication complexity in kilobytes (KB) of our zero-knowledge argument. We plot two instantiations of our protocol: the provable variant labeled Ligero and the variant assuming Conjecture 4.1 labeled Ligero-Strong. We observe that Ligero-Strong yields a 20% reduction in communication on average. The communication for a SHA certificate is 44 KB with Ligero and 34 KB with Ligero-Strong. Beyond 3 million gates, our communication cost is smaller than the circuit size.

In Figures 3 and 4, we provide the prover and verifier running times and communication for the multi-instance version of our protocol, using a 2,048-gate circuit and the SHA-256 circuit to illustrate performance. The heaviest part of the verification involves performing FFTs over domains of sizes \(N\) and \(s\), where \(s\) is the circuit size. For 1 to 4,096 instances, even for moderately sized circuits, the FFT over domain size \(s\) dominates the cost. The prover complexity varies as \(Ns \log s\), and we see a reduction in the amortized prover's cost per instance with periodic jumps due to performing FFT over a larger domain, usually set to a power of 2.

The communication complexity varies additively in \(N\) and \(s\). The amortized communication cost per instance decreases linearly because, similar to the verifier complexity, \(s\) dominates the complexity until \(N\) becomes significant compared to \(s\).

### 7. CONCLUSIONS AND FUTURE WORK

We designed and implemented a zero-knowledge argument for NP that simultaneously offers good concrete efficiency and sublinear communication in the circuit size. The computational complexity of our protocol is dominated by polynomial evaluations and interpolations, allowing us to rely on efficient FFT implementations to minimize its computational cost. 

#### Additional Optimizations
The current implementation relies on prime fields, which allows us to optimize arithmetic over integers by considering a sufficiently large prime. The witness includes two bits per gate for both XOR and AND gates. Using characteristic 2 fields would require three bits per AND gate and zero bits for XOR gates, presenting a trade-off between the two options. It is also unclear how FFT algorithms compare for characteristic 2 and prime fields, though fast implementations for the characteristic 2 case are known [10, 20].

Verification of our zero-knowledge argument requires evaluating a polynomial on a subset of the points in the domain. Currently, we implement this by having the verifier evaluate the polynomial on the entire domain via FFT and extract the points in this subset. Improving this will enhance the verifier's efficiency. Utilizing GPUs for FFT computations can also bring significant savings.

Exploiting repetitive circuit structure ("uniformity") can reduce verification time. We currently take advantage of this for reducing the amortized cost of verifying multiple evaluations of the same circuit. On the prover side, more than 50% of the total prover time for small circuits and 66% for large circuits is spent on computing the hashes of the leaves of the Merkle tree. This leaves room for improvement by relying on space- and cache-efficient hashing algorithms.

Finally, it would be interesting to explore the concrete efficiency of other approaches to lightweight sublinear zero-knowledge arguments. Specifically, one could consider constructions of PCPs based on bivariate polynomials, such as the one by Polishchuk and Spielman [40] (see [8] for related work), or the zero-knowledge PCP obtained by applying our general transformation to the MPC protocol from [17]. These constructions can be further simplified by applying an interactive procedure for testing linear constraints, as we do in Section 4.2.

### Acknowledgments
We thank Eli Ben-Sasson, Swastik Kopparty, abhi shelat, Salil Vadhan, and Mike Walsh for useful discussions and pointers, the anonymous CCS reviewers for helpful comments, and Victor Shoup for his assistance with the NTL library.

The first and last authors were supported by Google Faculty Research Grant and NSF Awards CNS-1526377 and CNS-1618884. The second author was supported by the European Research Council under the ERC consolidators grant agreement n. 615172 (HIPS), and by the BIU Center for Research in Applied Cryptography and Cyber Security in conjunction with the Israel National Cyber Bureau in the Prime Minister’s Office. The third author was supported by a DARPA/ARL SAFEWARE award, DARPA Brandeis program under Contract N66001-15-C-4065, NSF Frontier Award 1413955, NSF grants 1619348, 1228984, 1136174, and 1065276, ERC grant 742754, NSF-BSF grant 2015782, ISF grant 1709/14, BSF grant 2012378, a Xerox Faculty Research Award, a Google Faculty Research Award, an equipment grant from Intel, and an Okawa Foundation Research Grant. This material is based upon work supported by the Defense Advanced Research Projects Agency through the ARL under Contract W911NF-15-C-0205. The views expressed are those of the authors and do not reflect the official policy or position of Google, the Department of Defense, the National Science Foundation, or the U.S. Government.

### REFERENCES
[1] Sanjeev Arora, Carsten Lund, Rajeev Motwani, Madhu Sudan, and Mario Szegedy. 1998. Proof Verification and the Hardness of Approximation Problems. J. ACM 45, 3 (1998), 501–555.
[2] Sanjeev Arora and Shmuel Safra. 1998. Probabilistic Checking of Proofs: A New Characterization of NP. J. ACM 45, 1 (1998), 70–122.
[3] László Babai, Lance Fortnow, Leonid A. Levin, and Mario Szegedy. 1991. Checking Computations in Polylogarithmic Time. In STOC. 21–31.
[4] Eli Ben-Sasson, Iddo Bentov, Alessandro Chiesa, Ariel Gabizon, Daniel Genkin, Matan Hamilis, Evgenya Pergament, Michael Riabzev, Mark Silberstein, Eran Tromer, and Madars Virza. 2017. Computational Integrity with a Public Random String from Quasi-Linear PCPs. In EUROCRYPT. 551–579.
[5] Eli Ben-Sasson, Iddo Bentov, Ynon Horesh, and Michael Riabzev. 2017. Scalable, transparent, and post-quantum secure computational integrity. Manuscript. (2017). Slides at https://people.eecs.berkeley.edu/~alexch/docs/pcpip_bensasson.pdf.
[6] Eli Ben-Sasson, Alessandro Chiesa, Ariel Gabizon, Michael Riabzev, and Nicholas Spooner. 2016. Short Interactive Oracle Proofs with Constant Query Complexity, via Composition and Sumcheck. IACR Cryptology ePrint Archive 2016 (2016), 324.
[7] Eli Ben-Sasson, Alessandro Chiesa, Christina Garman, Matthew Green, Ian Miers, Eran Tromer, and Madars Virza. 2014. Zerocash: Decentralized Anonymous Payments from Bitcoin. In 2014 IEEE Symposium on Security and Privacy, SP 2014, Berkeley, CA, USA, May 18-21, 2014. 459–474.
[8] Eli Ben-Sasson, Alessandro Chiesa, Daniel Genkin, and Eran Tromer. 2013. On the concrete efficiency of probabilistically-checkable proofs. In Symposium on Theory of Computing Conference, STOC’13, Palo Alto, CA, USA, June 1-4, 2013. 585–594.
[9] Eli Ben-Sasson, Alessandro Chiesa, and Nicholas Spooner. 2016. Interactive Oracle Proofs. In TCC. 31–60.
[10] Eli Ben-Sasson, Matan Hamilis, Mark Silberstein, and Eran Tromer. 2016. Fast Multiplication in Binary Fields on GPUs via Register Cache. In Proceedings of the 2016 International Conference on Supercomputing, ICS 2016, Istanbul, Turkey, June 1-3, 2016. 35:1–35:12.
[11] Nir Bitansky, Ran Canetti, Alessandro Chiesa, and Eran Tromer. 2013. Recursive composition and bootstrapping for SNARKS and proof-carrying data. In STOC. 111–120.
[12] Nir Bitansky, Alessandro Chiesa, Yuval Ishai, Rafail Ostrovsky, and Omer Paneth. 2013. Succinct Non-interactive Arguments via Linear Interactive Proofs. In TCC. 315–333.
[13] Melissa Chase, David Derler, Steven Goldfeder, Claudio Orlandi, Sebastian Ramacher, Christian Rechberger, Daniel Slamanig, and Greg Zaverucha. 2017. Post-Quantum Zero-Knowledge and Signatures from Symmetric-Key Primitives. IACR Cryptology ePrint Archive 2017 (2017), 279.
[14] Hao Chen and Ronald Cramer. 2006. Algebraic Geometric Secret Sharing Schemes and Secure Multi-Party Computations over Small Fields. In CRYPTO. 521–536.
[15] Graham Cormode, Michael Mitzenmacher, and Justin Thaler. 2012. Practical verified computation with streaming interactive proofs. In ITCS. 90–112.
[16] Ivan Damgård and Yuval Ishai. 2006. Scalable Secure Multiparty Computation. In CRYPTO. 501–520.
[17] Ivan Damgård, Yuval Ishai, and Mikkel Krøigaard. 2010. Perfectly Secure Multiparty Computation and the Computational Overhead of Cryptography. In EUROCRYPT. 445–465.
[18] George Danezis, Cédric Fournet, Markulf Kohlweiss, and Bryan Parno. 2013. Pinocchio coin: building zerocoin from a succinct pairing-based proof system. In PETShop’13, Proceedings of the 2013 ACM Workshop on Language Support for Privacy-Enhancing Technologies, Co-located with CCS 2013, November 4, 2013, Berlin, Germany. 27–30.
[19] Amos Fiat and Adi Shamir. 1986. How to Prove Yourself: Practical Solutions to Identification and Signature Problems. In CRYPTO. 186–194.
[20] Finite Fields. IEEE Trans. Inf. Theor. 56, 12 (Dec. 2010), 6265–6272.
[21] Rosario Gennaro, Craig Gentry, Bryan Parno, and Mariana Raykova. 2013. Quadratic Span Programs and Succinct NIZKs without PCPs. In EUROCRYPT. 626–645.
[22] Irene Giacomelli, Jesper Madsen, and Claudio Orlandi. 2016. ZKBoo: Faster Zero-Knowledge for Boolean Circuits. In USENIX. 1069–1083.
[23] Shaafi Goldwasser, Yael Tauman Kalai, and Guy N. Rothblum. 2015. Delegating Computation: Interactive Proofs for Muggles. J. ACM 62, 4 (2015), 27:1–27:64.
[24] Shaafi Goldwasser, Silvio Micali, and Charles Rackoff. 1985. The Knowledge Complexity of Interactive Proof-Systems (Extended Abstract). In STOC. 291–304.
[25] Vipul Goyal, Yuval Ishai, Mohammad Mahmoody, and Amit Sahai. 2010. Interactive Locking, Zero-Knowledge PCPs, and Unconditional Cryptography. In CRYPTO. 173–190.