# 处理一下产品信息      end    end    service = ReportService.new    
# 增加了 ProductEnhancer    service.extend(ProductEnhancer)    
# 可以调用 enhance 方法    service.enhance这样的处理只会影响这里的一个对象，而同样是这个 ReportService的其他实例，则完全不受影响。这样做的好处是，我们不必写那么多类，而是根据需要在程序运行时组合出不同的对象。在这里，相信你再一次意识到了要学习多种程序设计语言的重要性。Java只有类这种组织方式，所以，很多有差异的概念只能用类这一个概念表示出来，思维就会受到限制，而不同的语言则提供了不同的表现形式，让概念更加清晰。前面只是讲了面向组合编程在思考方式的转变，下面我们再来看设计上的差异。举个例子，我们有个字体类（Font），现在的需求是，字体能够加粗（Bold）、能够有下划线（Underline）、还要支持斜体（Italic），而且这些能力之间是任意组合的。如果采用继承的方式，那就要有 8个类： ![](Images/248a021696250a1800ff69e80fc3e59d.png)savepage-src="https://static001.geekbang.org/resource/image/a3/0a/a3cf4c150e4fcbb98d4d7b6212e2700a.jpg"}而采用组合的方式，我们的字体类（Font）只要有三个独立的维度，也就是是否加粗（Bold）、是否有下划线（Underline）、是否是斜体（Italic）。这还不是终局，如果再来一种其他的要求，由3 种要求变成 4 种，采用继承的方式，类的数量就会膨胀到 16个类，而组合的方式只需要再增加一个维度就好。我们把一个 M\*N的问题，通过设计转变成了 M+N的问题，复杂度的差别一望便知。虽然我们一直在说，Java 在面向组合编程方面能力比较弱，但 Java社区也在尝试不同的方式。早期的尝试有Qi4j，后来 Java 8 加入了 defaultmethod，在一定程度上也可以支持面向组合的编程。这里我们只是讲了面向对象社区在组合方面的探索，后面讲函数式编程时，还会讲到函数式编程在这方面的探索。总结时刻今天，我们学习了面向对象的第二个特点：继承。继承分为两种，实现继承和接口继承。实现继承是站在子类的视角看问题，接口继承则是站在父类的视角。很多程序员把实现继承当作了一种代码复用的方式，但实际上，实现继承并不是一个好的代码复用的方式，之所以这种方式很常见，很大程度上是受了语言的局限。Ruby 的 mixin 机制，Scala 提供的 trait 以及 C++提供的私有继承都是代码复用的方式。即便只使用Java，也可以通过组合而非继承的方式进行代码复用。今天我们还讲到这些复用方式背后的编程思想：面向组合编程。它给我们提供了一个不同的视角，但支撑面向组合编程的是分离关注点。将不同的关注点分离出来，每一个关注点成为一个模块，在需要的时候组装起来。面向组合编程，在设计本身上有很多优秀的地方，可以降低程序的复杂度，更是思维上的转变。现在你已经知道了，在继承树上从下往上看，并不是一个好的思考方式，那从上往下看呢？下一讲，我们就来讲讲继承的另外一个方向，接口继承，也就是面向对象的第三个特点：多态。如果今天的内容你只能记住一件事，那请记住：**组合优于继承**。![](Images/2fe91789b694a3986850f370dad7c029.png)savepage-src="https://static001.geekbang.org/resource/image/67/a0/67e0cbd436dd50a8933b251e4c97a4a0.jpg"}思考题最后，我想请你去了解一下一种叫DCI （Data，Context 和Interaction）的编程思想，结合今天的课程，分享一下你对 DCI的理解。欢迎在留言区分享你的想法。感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。