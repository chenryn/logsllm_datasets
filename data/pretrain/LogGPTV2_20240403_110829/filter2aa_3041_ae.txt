量的状态，而这个变量可以在其他函数甚至是其他 goroutine 的作用域里声明。 
在第 41 行，matcher 和 feed 两个变量的值被传入匿名函数。在 Go 语言中，所有的变量
都以值的方式传递。因为指针变量的值是所指向的内存地址，在函数间传递指针变量，是在传递
这个地址值，所以依旧被看作以值的方式在传递。 
在第 39 行到第 40 行，可以看到每个 goroutine 是如何工作的，如代码清单 2-23 所示。 
代码清单 2-23 search/search.go：第 39 行到第 40 行 
39 
 Match(matcher, feed, searchTerm, results) 
40 
 waitGroup.Done() 
goroutine 做的第一件事是调用一个叫 Match 的函数，这个函数可以在 match.go 文件里找
到。Match 函数的参数是一个 Matcher 类型的值、一个指向 Feed 类型值的指针、搜索项以及
输出结果的通道。我们一会儿再看这个函数的内部细节，现在只要知道，Match 函数会搜索数
据源的数据，并将匹配结果输出到 results 通道。
一旦 Match 函数调用完毕，就会执行第 40 行的代码，递减 WaitGroup 的计数。一旦每个
goroutine 都执行调用 Match 函数和 Done 方法，程序就知道每个数据源都处理完成。调用 Done
方法这一行还有一个值得注意的细节：WaitGroup 的值没有作为参数传入匿名函数，但是匿名
函数依旧访问到了这个值。 
Go 语言支持闭包，这里就应用了闭包。实际上，在匿名函数内访问 searchTerm 和 results
变量，也是通过闭包的形式访问的。因为有了闭包，函数可以直接访问到那些没有作为参数传入
的变量。匿名函数并没有拿到这些变量的副本，而是直接访问外层函数作用域中声明的这些变量
本身。因为 matcher 和 feed 变量每次调用时值不相同，所以并没有使用闭包的方式访问这两
个变量，如代码清单 2-24 所示。 
代码清单 2-24 search/search.go：第 29 行到第 32 行 
29 
 // 为每个数据源启动一个 goroutine 来查找结果 
30 
 for _, feed := range feeds { 
31 
 // 获取一个匹配器用于查找 
32 
 matcher, exists := matchers[feed.Type] 
可以看到，在第 30 行到第 32 行，变量 feed 和 matcher 的值会随着循环的迭代而改变。
如果我们使用闭包访问这些变量，随着外层函数里变量值的改变，内层的匿名函数也会感知到这
些改变。所有的 goroutine 都会因为闭包共享同样的变量。除非我们以函数参数的形式传值给函
数，否则绝大部分 goroutine 最终都会使用同一个 matcher 来处理同一个 feed——这个值很有
可能是 feeds 切片的最后一个值。
随着每个 goroutine 搜索工作的运行，将结果发送到 results 通道，并递减 waitGroup 的
计数，我们需要一种方法来显示所有的结果，并让 main 函数持续工作，直到完成所有的操作，
如代码清单 2-25 所示。 
代码清单 2-25 search/search.go：第 44 行到第 57 行 
44 
 // 启动一个 goroutine 来监控是否所有的工作都做完了 
45 
 go func() { 
46 
 // 等候所有任务完成 
47 
 waitGroup.Wait() 
48 
49 
 // 用关闭通道的方式，通知 Display 函数 
50 
 // 可以退出程序了 
51 
 close(results) 
52 
 }() 
53 
54 
 // 启动函数，显示返回的结果，  
55 
 // 并且在最后一个结果显示完后返回 
56 
 Display(results) 
57 } 
第 45 行到第 56 行的代码解释起来比较麻烦，等我们看完 search 包里的其他代码后再来解
释。我们现在只解释表面的语法，随后再来解释底层的机制。在第 45 行到第 52 行，我们以 goroutine
的方式启动了另一个匿名函数。这个匿名函数没有输入参数，使用闭包访问了 WaitGroup 和
results 变量。这个 goroutine 里面调用了 WaitGroup 的 Wait 方法。这个方法会导致 goroutine
阻塞，直到 WaitGroup 内部的计数到达 0。之后，goroutine 调用了内置的 close 函数，关闭
了通道，最终导致程序终止。 
Run 函数的最后一段代码是第 56 行。这行调用了 match.go 文件里的 Display 函数。一旦
这个函数返回，程序就会终止。而之前的代码保证了所有 results 通道里的数据被处理之前，
Display 函数不会返回。
2.3.2  feed.go 
现在已经看过了 Run 函数，让我们继续看看 search.go 文件的第 14 行中的 RetrieveFeeds
函数调用背后的代码。这个函数读取 data.json 文件并返回数据源的切片。这些数据源会输出内容，
随后使用各自的匹配器进行搜索。代码清单 2-26 给出的是 feed.go 文件的前 8 行代码。 
代码清单 2-26 feed.go：第 01 行到第 08 行 
01 package search 
02 
03 import ( 
04 
 "encoding/json" 
05 
 "os" 
06 ) 
07 
08 const dataFile = "data/data.json" 
这个代码文件在 search 文件夹里，所以第 01 行声明了包的名字为 search。第 03 行到第
06 行导入了标准库中的两个包。json 包提供编解码 JSON 的功能，os 包提供访问操作系统的
功能，如读文件。 
读者可能注意到了，导入 json 包的时候需要指定 encoding 路径。不考虑这个路径的话，
我们导入包的名字叫作 json。不管标准库的路径是什么样的，并不会改变包名。我们在访问 json
包内的函数时，依旧是指定 json 这个名字。
在第 08 行，我们声明了一个叫作 dataFile 的常量，使用内容是磁盘上根据相对路径指定
的数据文件名的字符串做初始化。因为 Go 编译器可以根据赋值运算符右边的值来推导类型，声
明常量的时候不需要指定类型。此外，这个常量的名称使用小写字母开头，表示它只能在 search
包内的代码里直接访问，而不暴露到包外面。 
接着我们来看看 data.json 数据文件的部分内容，如代码清单 2-27 所示。
代码清单 2-27 data.json 
[ 
 { 
 "site" : "npr", 
 "link" : "http://www.npr.org/rss/rss.php?id=1001", 
 "type" : "rss" 
 }, 
 { 
 "site" : "cnn", 
 "link" : "http://rss.cnn.com/rss/cnn_world.rss", 
 "type" : "rss" 
 }, 
 { 
 "site" : "foxnews", 
 "link" : "http://feeds.foxnews.com/foxnews/world?format=xml", 
 "type" : "rss" 
 }, 
 { 
 "site" : "nbcnews", 
 "link" : "http://feeds.nbcnews.com/feeds/topstories", 
 "type" : "rss" 
 } 
] 
为了保证数据的有效性，代码清单 2-27 只选用了 4 个数据源，实际数据文件包含的数据要
比这 4 个多。数据文件包括一个 JSON 文档数组。数组的每一项都是一个 JSON 文档，包含获取
数据的网站名、数据的链接以及我们期望获得的数据类型。 
这些数据文档需要解码到一个结构组成的切片里，以便我们能在程序里使用这些数据。来看
看用于解码数据文档的结构类型，如代码清单 2-28 所示。 
代码清单 2-28 feed.go：第 10 行到第 15 行 
10 // Feed 包含我们需要处理的数据源的信息 
11 type Feed struct { 
12 
 Name string `json:"site"` 
13 
 URI  string `json:"link"` 
14 
 Type string `json:"type"` 
15 } 
在第 11 行到第 15 行，我们声明了一个名叫 Feed 的结构类型。这个类型会对外暴露。这个
类型里面声明了 3 个字段，每个字段的类型都是字符串，对应于数据文件中各个文档的不同字段。
每个字段的声明最后 ` 引号里的部分被称作标记（tag）。这个标记里描述了 JSON 解码的元数据，
用于创建 Feed 类型值的切片。每个标记将结构类型里字段对应到 JSON 文档里指定名字的字段。 
现在可以看看 search.go 代码文件的第 14 行中调用的 RetrieveFeeds 函数了。这个函数读
取数据文件，并将每个 JSON 文档解码，存入一个 Feed 类型值的切片里，如代码清单 2-29 所示。 
代码清单 2-29 feed.go：第 17 行到第 36 行 
17 // RetrieveFeeds 读取并反序列化源数据文件 
18 func RetrieveFeeds() ([]*Feed, error) { 
19 
 // 打开文件 
20 
 file, err := os.Open(dataFile) 
21 
 if err != nil { 
22 
 return nil, err 
23 
 } 
24 
25 
 // 当函数返回时 
26 
 // 关闭文件 
27 
 defer file.Close() 
28 
29 
 // 将文件解码到一个切片里 
30 
 // 这个切片的每一项是一个指向一个 Feed 类型值的指针 
31 
 var feeds []*Feed 
32 
 err = json.NewDecoder(file).Decode(&feeds) 
33 
34 
 // 这个函数不需要检查错误，调用者会做这件事 
35 
 return feeds, err 
36 } 
让我们从第 18 行的函数声明开始。这个函数没有参数，会返回两个值。第一个返回值是一
个切片，其中每一项指向一个 Feed 类型的值。第二个返回值是一个 error 类型的值，用来表
示函数是否调用成功。在这个代码示例里，会经常看到返回 error 类型值来表示函数是否调用
成功。这种用法在标准库里也很常见。 
现在让我们看看第 20 行到第 23 行。在这几行里，我们使用 os 包打开了数据文件。我们使
用相对路径调用 Open 方法，并得到两个返回值。第一个返回值是一个指针，指向 File 类型的
值，第二个返回值是 error 类型的值，检查 Open 调用是否成功。紧接着第 21 行就检查了返回
的 error 类型错误值，如果打开文件真的有问题，就把这个错误值返回给调用者。
如果成功打开了文件，会进入到第 27 行。这里使用了关键字 defer，如代码清单 2-30 所示。
代码清单 2-30 feed.go：第 25 行到第 27 行 
25 
 // 当函数返回时 
26 
 // 关闭文件 
27 
 defer file.Close() 
关键字 defer 会安排随后的函数调用在函数返回时才执行。在使用完文件后，需要主动关
闭文件。使用关键字 defer 来安排调用 Close 方法，可以保证这个函数一定会被调用。哪怕函
数意外崩溃终止，也能保证关键字 defer 安排调用的函数会被执行。关键字 defer 可以缩短打
开文件和关闭文件之间间隔的代码行数，有助提高代码可读性，减少错误。 
现在可以看看这个函数的最后几行，如代码清单 2-31 所示。先来看一下第 31 行到第 35 行
的代码。 
代码清单 2-31 feed.go：第 29 行到第 36 行 
29 
 // 将文件解码到一个切片里 
30 
 // 这个切片的每一项是一个指向一个 Feed 类型值的指针 
31 
 var feeds []*Feed 
32 
 err = json.NewDecoder(file).Decode(&feeds) 
33 
34 
 // 这个函数不需要检查错误，调用者会做这件事 
35 
 return feeds, err 
36 } 
在第 31 行我们声明了一个名字叫 feeds，值为 nil 的切片，这个切片包含一组指向 Feed
类型值的指针。之后在第 32 行我们调用 json 包的 NewDecoder 函数，然后在其返回值上调用
Decode 方法。我们使用之前调用 Open 返回的文件句柄调用 NewDecoder 函数，并得到一个
指向 Decoder 类型的值的指针。之后再调用这个指针的 Decode 方法，传入切片的地址。之后
Decode 方法会解码数据文件，并将解码后的值以 Feed 类型值的形式存入切片里。
根据 Decode 方法的声明，该方法可以接受任何类型的值，如代码清单 2-32 所示。
代码清单 2-32 使用空 interface 
func (dec *Decoder) Decode(v interface{}) error 
Decode 方法接受一个类型为 interface{}的值作为参数。这个类型在 Go 语言里很特殊，
一般会配合 reflect 包里提供的反射功能一起使用。
最后，第 35 行给函数的调用者返回了切片和错误值。在这个例子里，不需要对 Decode 调
用之后的错误做检查。函数执行结束，这个函数的调用者可以检查这个错误值，并决定后续如何
处理。 
现在让我们看看搜索的代码是如何支持不同类型的数据源的。让我们去看看匹配器的代码。 
2.3.3  match.go/default.go 
match.go 代码文件包含创建不同类型匹配器的代码，这些匹配器用于在 Run 函数里对数据
进行搜索。让我们回头看看 Run 函数里使用不同匹配器执行搜索的代码，如代码清单 2-33 所示。 
代码清单 2-33 search/search.go：第 29 行到第 42 行 
29 
 // 为每个数据源启动一个 goroutine 来查找结果 
30 
 for _, feed := range feeds { 
31 
 // 获取一个匹配器用于查找 
32 
 matcher, exists := matchers[feed.Type] 
33 
 if !exists { 
34 
 matcher = matchers["default"] 
35 
 } 
36 
37 
 // 启动一个 goroutine 执行查找 
38 
 go func(matcher Matcher, feed *Feed) { 
39 
 Match(matcher, feed, searchTerm, results) 
40 
    waitGroup.Done() 
41 
 }(matcher, feed) 
42 
 } 
代码的第 32 行，根据数据源类型查找一个匹配器值。这个匹配器值随后会用于在特定的数
据源里处理搜索。之后在第 38 行到第 41 行启动了一个 goroutine，让匹配器对数据源的数据进行
搜索。让这段代码起作用的关键是这个架构使用一个接口类型来匹配并执行具有特定实现的匹配
器。这样，就能使用这段代码，以一致且通用的方法，来处理不同类型的匹配器值。让我们看一
下 match.go 里的代码，看看如何才能实现这一功能。 
代码清单 2-34 给出的是 match.go 的前 17 行代码。 
代码清单 2-34 search/match.go：第 01 行到第 17 行 
01 package search 
02 
03 import ( 
04 
 "log" 
05 ) 
06 
07 // Result 保存搜索的结果 
08 type Result struct { 
09 
 Field   string 
10 
 Content string 
11 } 
12 