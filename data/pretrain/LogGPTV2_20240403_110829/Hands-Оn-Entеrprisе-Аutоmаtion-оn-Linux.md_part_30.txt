Database Management Chapter 11
Further reading
For an in-depth understanding of Ansible, please refer to Mastering Ansible, Third
Edition—James Freeman and Jesse Keating (https:/​/​www.​packtpub.​com/​gb/
virtualization-​and-​cloud/​mastering-​ansible-​third-​edition).
To learn more about the specifics relating to PostgreSQL database management,
readers may refer to Learning PostgreSQL 11, Third Edition—Andrey Volkov,
Salahadin Juba (https:/​/​www.​packtpub.​com/​gb/​big-​data-​and-​business-
intelligence/​learning-​postgresql-​11-​third-​edition).
Similarly, to learn more about MariaDB database management, readers can refer
to MariaDB Essentials—Federico Razzoli, Emilien Kenler (https:/​/​www.​packtpub.
com/​gb/​application-​development/​mariadb-​essentials).
For a full list of available Ansible modules, readers should refer to https:/​/
docs.​ansible.​com/​ansible/​latest/​modules/​list_​of_​database_​modules.​html.​
[ 323 ]
12
Performing Routine
Maintenance with Ansible
As you have worked through this book, you will have completed many steps to define and
build a Linux environment for your enterprise that supports automation. However,
Ansible's assistance with your environment does not end here. Even an environment that
has been built and is in active use requires maintenance and intervention from time to time.
Historically, these interventions would have been performed manually by system
administrators, using shell commands or scripts.
As we have discussed many times throughout this book, tasks that are run by hand present
a number of challenges for the enterprise—not least that they may not be well documented,
and hence there is a steep learning curve for new members of staff. In addition, our old
friends auditability and repeatability come into play—how can you be sure of who did
what, and when, if everyone is logging on to the shell of your Linux machines and
performing tasks by hand?
In this chapter, we explore the ways in which Ansible can assist the enterprise with the day-
to-day management of the Linux estate and, especially, in performing routine maintenance
tasks. Ansible is extremely powerful, and your possibilities for routine maintenance are not
limited to the examples in this chapter—rather, they are intended to get you started, and
show by example the kinds of tasks you may be able to automate.
Specifically, we will cover the following topics in this chapter:
Tidying up disk space
Monitoring for configuration drift
Managing processes with Ansible
Rolling updates with Ansible
Performing Routine Maintenance with Ansible Chapter 12
Technical requirements
This chapter includes examples, based on the following technologies:
Ubuntu Server 18.04 LTS
CentOS 7.6
Ansible 2.8
To run through these examples, you will need access to two servers or virtual machines
running one each of the operating systems just listed, and also Ansible. Note that the
examples given in this chapter may be destructive in nature (for example, they delete files,
and make changes to server configuration), and if run as is, are only intended to be run in
an isolated test environment.
Once you are satisfied that you have a safe environment in which to operate, let's get
started with routine system maintenance, with Ansible.
All example code discussed in this chapter is available from GitHub, at the following
URL: https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Enterprise-​Automation-​on-
Linux/​tree/​master/​chapter12.
Tidying up disk space
One of the most routine and mundane (and yet, vitally important) tasks that a system
administrator has to complete on a routine basis is clearing out disk space. Although
ideally, systems should be well behaved—for example, log files should be rotated, and
temporary files cleaned up—those with experience in the industry will know that this is not
always the case. The author of this book has worked in environments where clearing out a
given directory was considered a routine task—hence, a prime candidate for automation.
Of course, you would not just randomly delete files from a filesystem. Any task like this
should be performed in a precise manner. Let's proceed with a practical example—as this is
hypothetical, let's create some test files to work with. Suppose our fictional application
creates a data file every day, and never prunes its data directory. To synthesize this, we
might create some data files, as follows:
$ sudo mkdir -p /var/lib/appdata
$ for i in $(seq 1 20); do DATE=$(date -d "-$i days" +%y%m%d%H%M); sudo
touch -t $DATE /var/lib/appdata/$DATE; done
[ 325 ]
Performing Routine Maintenance with Ansible Chapter 12
The preceding commands create a directory called /var/lib/appdata, and then create
one (empty) file for each day, for the last 20 days. We could, of course, create files with data
in, but it makes no difference to this example—we don't actually want to fill the disk up!
Now, let's suppose that our disk is getting full and that we want to prune this directory,
keeping only the last 5 days' worth. If we were to do this by hand, we might use the
venerable find command, to list the files meeting our criteria, and remove anything older.
This might look something like this:
$ sudo find /var/lib/appdata -mtime +5 -exec rm -f '{}' \;
That is an easy enough command to run, and you might be surprised to learn how common
it is to see commands like that in enterprise run-books for Linux servers. Let's improve on
this, with Ansible. We know that if we implement this in Ansible, the following will be the
case:
The Ansible engine will return an appropriate status—ok, changed, or failed,
depending on the actions taken. The find command shown in the preceding
code block will return the same output and exit code, whether it deletes any files
or not.
The Ansible code we write will be self-documenting—for example, it will begin
with an appropriate name—perhaps Prune /var/lib/appdata.
The Ansible code can be run from AWX or Ansible Tower, ensuring that this
routine task can be delegated to the appropriate team, using the built-in role-
based access controls.
In addition, the task can be given a user-friendly name in AWX, meaning
operators don't need any specialist knowledge to jump in and start being
effective in assisting with Linux environment management.
AWX and Ansible Tower will faithfully log the output from the task run, to
ensure it is possible to audit these cleanup jobs in the future.
[ 326 ]
Performing Routine Maintenance with Ansible Chapter 12
Of course, none of these Ansible benefits is new to us by now—we have frequently referred
to them throughout the book. Nonetheless, it is my wish to impress upon you the benefits
of effective automation in the enterprise. Let's start by defining a role to perform exactly
this function—prune a directory of files over 5 days old with Ansible:
1. We start by making use of the Ansible find module, which enables us to build
up a list of filesystem objects (such as files or directories), just as the find shell
command does. We will register the output in an Ansible variable to make use
of it later on, as follows:
- name: Find all files older than {{ max_age }} in {{ target_dir }}
find:
paths: "{{ target_dir }}"
age: "{{ max_age }}"
recurse: yes
register: prune_list
The code fragment shown here should be fairly self-explanatory—note, however,
that we have made use of variables for the path and age parameters; this is with
good reason. Roles are all about reuse of code, and if we define these parameters
using variables, we can reuse this role to prune other directories (for example, for
different applications), without needing to change the role code itself. You will
also observe that we can use the variables in the name of the task—very useful
and powerful when returning to audit Ansible runs in the future.
2. The find module will build up a list of files we need to delete—however, given
our goal of auditing, it might be useful for us to print these filenames in the
Ansible output, to ensure we can come back later and find out exactly what was
deleted. Note that we could print more data than just the path—perhaps also
capturing size and timestamp information could be useful? All of this is available
in the prune_list variable we captured earlier, and it is left as an exercise for
you to explore this. (Hint: Replace msg: "{{ item.path }}" with msg: "{{
item }}", to see all the information captured by the find task.) Run the
following code:
- name: Print file list for auditing purposes
debug:
msg: "{{ item.path }}"
loop:
"{{ prune_list.files }}"
loop_control:
label: "{{ item.path }}"
[ 327 ]
Performing Routine Maintenance with Ansible Chapter 12
Here, we are simply using an Ansible loop to iterate over the data generated by
the find module—specifically, extracting the path dictionary item from the
files dictionary within our variable. The loop_control option prevents
Ansible from printing the entire dictionary structure above each debug message,
instead, just using the path to each file as the label.
3. Finally, we use the file module to remove the files, again looping over
prune_list, just as we did previously, as follows:
- name: Prune {{ target_dir }}
file:
path: "{{ item.path }}"
state: absent
loop:
"{{ prune_list.files }}"
loop_control:
label: "{{ item.path }}"
4. With the role complete, we must define the variables for our play—in this
example, I am defining them in the site.yml playbook that references our new
role, as follows:
---
- name: Prune Directory
hosts: all
become: yes
vars:
max_age: "5d"
target_dir: "/var/lib/appdata"
roles:
- pruneappdata
[ 328 ]
Performing Routine Maintenance with Ansible Chapter 12
Running this code with the test files generated earlier in this section will result in an output
that looks something like this:
The test file set has been reduced for the preceding screenshot, to ensure it fits on the
screen—however, you can clearly see the output, and which files were deleted.
While good housekeeping is an essential part of server maintenance, sometimes it is only
desirable to take action (such as pruning a directory) if it is absolutely necessary. What if
we decided that this role should only run when there is 10% or less disk space remaining
on the filesystem containing /var/lib/appdata?
[ 329 ]
Performing Routine Maintenance with Ansible Chapter 12
The following process demonstrates how Ansible can be used to perform conditional
housekeeping, operating only when the disk is more than 90% full:
1. We start by modifying our existing role—first of all, we add a new task to the
role, to get the disk usage as a percentage from our target directory, as follows:
---
- name: Obtain free disk space for {{ target_dir }}
shell: df -h "{{ target_dir }}" | tail -n 1 | awk {'print $5 '} |
sed 's/%//g'
register: dfresult
changed_when: false
Although there are Ansible facts that contain disk usage information, we use the
df command here because it can query our directory directly—we must somehow
trace this back to the mount point on which it lives if we are to successfully use
Ansible facts. We also make use of changed_when: false, as this shell task will
always show a changed result otherwise, which can be confusing in the
output—this is a read-only query, so nothing should have changed!
2. With this data gathered and registered in the dfresult variable, we then wrap
our existing code in a block. A block in Ansible is simply a way of wrapping a set
of tasks together—thus, rather than having to put a when condition on each of
our three tasks from our earlier example, we simply put the conditional on the
block instead. The block would begin something like this:
- name: Run file pruning only if disk usage is greater than 90
percent
block:
- name: Find all files older than {{ max_age }} in {{ target_dir
}}
find:
Note how the previous set of tasks is now indented by two spaces. This ensures
that Ansible understands it is part of the block. Indent all the existing tasks, and
conclude the block with the following code:
loop_control:
label: "{{ item.path }}"
when: dfresult.stdout|int > 90
[ 330 ]
Performing Routine Maintenance with Ansible Chapter 12
Here, we are using the standard output captured in the dfresult variable,
casting it to an integer, and then, checking to see if it is 90% or more. Thus, we
only run the pruning tasks if the filesystem is more than 90% full. This is, of
course, just one conditional—you could gather any data that you require to make
any of your tasks run, in a variety of other cases. Running this new role on my
test server, which has much less than 90% disk utilization, shows the pruning
tasks being skipped altogether now, as can be seen in the following screenshot:
In this way, it is easy for us to perform routine disk housekeeping tasks across a large
enterprise estate, and—as is ever the case with Ansible—the sky is the limit for what you
can do. Hopefully, the examples from this section will give you some ideas on how to get
started. In the next section, we will look at how Ansible can be used to effectively monitor
for configuration drift, across your Linux estate.
Monitoring for configuration drift
In Chapter 7, Configuration Management with Ansible, we have explored the ways that
Ansible can be used both to deploy configuration at an enterprise scale and to enforce it.
Let us now build on this, with something else—monitoring for configuration drift.
[ 331 ]
Performing Routine Maintenance with Ansible Chapter 12
As we discussed in Chapter 1, Building a Standard Operating Environment on Linux, manual
changes are the enemy of automation. Beyond this, they are also a security risk. Let us work
with a specific example here, to demonstrate. As was suggested previously in this book, it
would be advisable to manage the Secure Shell (SSH) server configuration with Ansible.
SSH is the standard protocol for managing Linux servers and can be used not only for
management but also for file transfer. In short, it is one of the key mechanisms through
which people will access your servers, and hence it is vital that it is secure.
It is also common, however, for a variety of people to have root access to Linux servers.
Whether developers are deploying code, or system administrators are performing routine
(or break-fix) work, it is considered perfectly normal for many people to have root access to
a server. This is fine if everyone is well behaved, and actively supports the principles of
automation in your enterprise. However, what happens if someone makes unauthorized
changes?
Through the SSH configuration, they might enable remote root logins. They might turn on
password-based authentication when you have disabled this in favor of key-based
authentication. Many times, these kinds of changes are made to support laziness—it is
easier to copy files around as a root user, for example.
Whatever the intention and root cause, someone manually making these changes to a Linux
server you deployed previously is a problem. How do you go about detecting them,
though? Certainly, you don't have time to log in to every server and check the files by hand.
Ansible, however, can help.
In Chapter 7, Configuration Management with Ansible, we proposed a simple Ansible
example that deployed the SSH server configuration from a template and restarted the SSH
service if the configuration was changed using a handler.
We can actually repurpose this code for our configuration drift checks. Without even
making any code changes, we can run the playbook with Ansible in check mode. Check
mode makes no changes to the systems on which it is working—rather, it tries its best to
predict any changes that might occur. The reliability of these predictions depends very
much on the modules used in the role. For example, the template module can reliably
predict changes because it knows whether the file that would be written is different from
the file that is in place. Conversely, the shell module can never know the difference
between a change and an ok result because it is such a general-purpose module (though it
can detect failures with a reasonable degree of accuracy). Thus, I advocate strongly the use
of changed_when when this module is used.
[ 332 ]
Performing Routine Maintenance with Ansible Chapter 12
Let's see what happens if we rerun the securesshd role from before, this time in check
mode. The result can be seen in the following screenshot:
Here, we can see that someone has indeed changed the SSH server configuration—if it
matched the template we were providing, the output would look like this instead:
So far, so good—you could run this against a hundred, or even a thousand, servers, and
you would know that any changed results came from servers where the SSH server
configuration no longer matches the template. You could even run the playbook again to
rectify the situation, only this time not in check mode (that is, without the -C flag on the
command line).
[ 333 ]
Performing Routine Maintenance with Ansible Chapter 12
In an environment such as AWX or Ansible Tower, jobs (that is to say, running playbooks)
are categorized into two different states—success and failure. Success is categorized as any
playbook that runs to completion, producing only changed or ok results. Failure, however,
comes about from one or more failed or unreachable states being returned from the
playbook run.
Thus, we could enhance our playbook by getting it to issue a failed state if the
configuration file is different from the templated version. The bulk of the role remains
exactly the same, but, on our template task, we add the following clauses:
register: template_result
failed_when: (template_result.changed and ansible_check_mode == True) or
template_result.failed
These have the following effect on the operation of this task:
The result of the task is registered in the template_result variable.
We change the failure condition of this task to the following:
The template task result was changed, and we are running it in
check mode.
Or, the template task failed for some other reason—this is a catch-
all case, to ensure we still report other failure cases correctly (for
example, access denied to a file).
You will observe the use of both logical and and or operators in the failed_when
clause—a powerful way to expand on the operation of Ansible. Now, when we run the
playbook in check mode and the file has changed, we see the following result:
[ 334 ]