## 循证与决策路径为什么我们会去挑选和阅读技术干货文章？我想，循证大概是一个原始诉求，通过分析别人走过的路径，来拨开自己技术道路探索上的迷雾。循证方法，也是我早年刚接触 J2EE 开发时遇到的技术决策指导思想，记得**J2EEDevelopment without EJB**一书的译序中有一段话，很好地阐释了 "循证"方法：> 任何一个从事 J2EE> 应用开发的程序员或多或少都曾有过这样的感觉：这个世界充斥着形形色色的概念和> "大词"，如同一个幽深广袤的魔法森林般令人晕头转向，不知道该追随这位导师还是该信奉那个门派。>> 这时，Rod Johnson> 发出振聋发聩的一呼：尔等不必向泥胎偶像顶礼膜拜，圣灵正在尔等自身> ------ 这就是他在书中一直倡导的> "循证架构"。选择一种架构和种技术的依据是什么？Rod Johnson> 认为，应该是基于实践的证据、来自历史项目或亲自试验的经验......``{=html}所以，我们去阅读技术干货文章，**想从别人的分享中获得对自己技术方案的一个印证。这就是一种行业的实践证据，毕竟想通过听取分享去印证的，通常都是走过了一条与自己类似的道路**。技术道路的旅途中充满着迷雾与不确定性，我们不过是想在别人已走过的类似道路中获得指引和启发，并得到迈出坚实下一步的信心。这就是**循证方式的技术决策路径**。多年前，我们刚开始做咚咚这个 IM 系统时，就是沿着这条路径一路过来的。刚启动是 2012年，一开始其实是完全不知道怎么迈步，专门花了三个月时间来研究业界的 IM软件系统都是怎么做的。当时行业 IM 第一的当属QQ，但那时腾讯公司的技术保持神秘而低调，在互联网上几乎找不到任何公开的技术分享资料。退而求其次，我们只好研究起开源的 IM 软件，也就是基于 XMPP开放协议实现的一类开源 IM 服务端和客户端，并以此为基础去设计我们自己的IM 架构，然后实现了一个最初的原型。再后来，腾讯终于有一位即时通讯的 T4 专家出来分享了一篇关于 QQ的后台技术架构演进之路，记得是叫《1.4 亿在线背后的故事 ------ QQ IM后台架构的演化与启示》。我仔细听了一遍，又把分享材料翻过好多遍，思考并体会其中的架构演化道路。数年后，微信在移动互联网时代崛起，并且在 IM 领域甚至还超越了QQ，微信团队也分享了其后端架构演进之路。此时，我们自身的架构也基本成型并运行一些年了。而我也注意到，关于IM类消息应用最核心的一个技术决策是：**消息模型**。微信的方式和我们并不一样。微信的方式是基于消息版本的同步加存储转发机制，而我们则是基于用户终端状态的推送加缓存机制。微信的机制从交互结构上更简洁和优雅一些，在端层面的实现复杂度要求更低，符合其重后端、轻前端的设计思路和原则。然而，循证的方式就是：即便你看到了一个更好的技术与架构方式，但也要结合自身的实际情况去思考实践的路径。消息模型，作为一个核心的底层架构模型，也许刚起步未上线时，变更优化它只需要一两个程序员一两周的时间；但经过了数年的演进，再去完全改变时，就需要各端好几个团队配合，并忙上一两个季度了。循证，不一定能立刻给你的当下带来改变，但可以给你的演进路径方向带来调整，未来将发生改变。
## 切磋与思考方式技术干货多了以后，在类同的领域都能找到不同公司或行业的实践分享，这时不仅可以循证，还能够达到切磋和多元化思考的目的。处在 IM 这个领域，我就会经常去看关于 IM相关技术领域的干货文章，所以我知道了微信的消息模型采用了推拉结合，还有基于版本的同步机制。但我不会再纠结于为什么我们不同，而是去看到它的好处与代价。一个更具体的切磋案例：大家都熟悉且特别常用的功能 ------群消息。关于群消息模型，微信采用的是写扩散模型，也就是说发到群里的一条消息会给群里的每个人都存一份消息索引。这个模型的最大缺点就是要把消息索引重复很多份，通过牺牲空间来换取了每个人拉取群消息的效率。好多年前我们刚开始做群时，也是采用了的写扩散模型，但后来因为存储压力太大，一度又改成了读扩散模型。在读扩散模型下，群消息只存一份，只需记录每个群成员读取群消息的偏移量，偏移量的记录相比消息索引量要小几个量级，所以减轻了存储压力。而之所以存储压力大在于当时公司还没有一个统一的存储服务组件，我们直接采用Redis 的内存存储，当时原生的 Redis在横向和纵向上的扩展性都比较受限。这在当时属于两害相权取其轻，选择了一个对我们研发团队来说成本更低的方案。再后来公司有了扩展性和性能都比较好的统一存储组件，实际再换回写扩散模型则更好。毕竟读扩散模型逻辑比较复杂，考虑自己不知道加了多少个群了，每次打开应用都要检查每个群是否有消息，性能开销是呈线性递增的。同一个技术方案在不同的时期，面临不同的环境，就会带来不同的成本，并做出不同的选择与取舍。虽然看起来是在走类似的路，但不同的人，不同的时代，不同的技术背景，这些都导致了终究是在走不同的路。路虽不同，但可能会殊途同归吧。切磋带来的思考是：**你不能看见别人的功夫套路好，破解难题手到擒来，就轻易决定改练别人的功夫**。表面的招式相同，内功可能完全不同，就像金庸小说里的鸠摩智非要用小无相功催动少林七十二绝技，最后弄得自废武功的结局。切磋，主要是带给你不同的思维方式，用自己的功夫寻求破解之道。
## 连结与知识体系干货多了，时间有限，自然就存在一个优先级的选择阅读问题。就我个人来说，我的出发点很简单，有两点：基于功利性和兴趣。说起功利性也别觉得不好，毕竟整个商业社会都是基于功利性为基础的，所以基于此的选择其实是相当稳定的。考虑下所在组织和团队的功利性需求来做出技术的选择，有时甚至是必须的，而不能完全由着兴趣来驱动。我在前文[《领域：知识与体系》](https://time.geekbang.org/column/article/40160)中已经有过说明，我会把过去自己所掌握的所有技术总结编织成一张"网"，若一个技术干货分享的东西离我的"网"还太远，我就会放弃去了解。因为如果不能连结到这张"网"中，形成一个节点，我可以肯定它就很难发挥任何作用，很可能是我看过之后没多久就遗忘了。如今技术发展百花齐放、遍地开花，但人生有限，所以你必须得有一种方式去做出选择，最差的可能就是所谓的随性选择。我觉得很多情况下是需要一个选择指导框架的，而对于如何选择阅读技术干货的问题，前面比喻的那张"网"就是一个我自己的指导框架。即便是针对同一个问题或场景，我们也可以将已知的部分连结上新的知识和实践，形成更密、更牢固的技术体系之网。刚做 IM 时，曾经有个疑惑，就是 IM的长连接接入系统，到底单机接入多少长连接算合适的？很早时运维对于长连接有个报警指标是单机1 万，但当时我用 Java NIO 开 2G 最大堆内存，在可接受的 GC 停顿下，一台 4核物理机上测试极限支撑 10万长连接是可用的。那么平时保守点，使用测试容量的一半 5 万应该是可以的。之后一次机会去拜访了当时阿里旺旺的后端负责人，我们也讨论到了这个长连接的数量问题。当时淘宝有600 万卖家同时在线，另外大概还有 600 万买家实时在线，所以同时大概有 1200万用户在线，而当时他们后端的接入服务器有 400 台，也就是每台保持 3万连接。他说，这不是一个技术限制，而是业务限制。因为单机故障率高，一旦机器挂了，上面的所有用户会短暂掉线并重连。若一次性掉线用户数太多，恢复时间会加长，这会对淘宝的订单交易成交产生明显的影响。他还说了一次事故，整个机房故障，导致单机房 600万用户同时掉线。整个故障和自动切换恢复时间持续了数十分钟，在此期间淘宝交易额也同比下降了约40%左右。因为这种旺旺在线和交易的高度相关性，所以才限制了单机长连接的数量，而当时已经有百万级的单机长连接实验证明是可行的。在一篇关于微信红包的的技术干货文章《100亿次的挑战：如何实现一个"有把握"的春晚摇一摇系统》里提到：> 在上海跟深圳两地建立了十八个接入集群，每个城市有三网的接入，总共部署了> 638 台接入服务器，可以支持同时 14.6 亿的在线。简单算一下，大概就是 228.8 万单机长连接的接入能力，14.6亿怕是以当时全国人口作为预估上限了。实际当然没有那么多，但估计单机百万长连接左右应该是有的。这是一个相当不错的数量了，而采用Java 技术栈要实现这个单机数量，恐怕也需要多进程，不然大内存堆的 GC停顿就是一个不可接受和需要单独调优的工作了。以上就是从干货中提取知识和经验总结的案例，形成对已有知识的连结。这就是不断加固并扩大自己的技术知识体系之网。**总结来说：面对众多的技术干货，从循证出发，找到参考，做出技术决策，决定后续演进路线；在演进路上，不断切磋，升级思考方式，调整路径，走出合适的道路；在路上，把遇到的独立的知识点，不断吸收连结进入自己的技术知识体系之网**。回答了标题的问题，这篇文章也该结束了。面对技术这片大海，我们都是一个渔民，三天打鱼，两天结网。愿你的"网"越结越大，捞的"鱼"也越来越多，也欢迎留言分享下你的"打鱼"和"结网"经历。------------------------------------------------------------------------![](Images/a1e61bd5d0a80da9fdfd53ba1e12f2e4.png){savepage-src="https://static001.geekbang.org/resource/image/45/b8/456def9c2e16edaec6543cfa03376cb8.jpg"}
# 50 \| 技术分歧，如何决策？作为一名程序员或技术人，总会碰到这样的场景：在一些技术评审会上，和其他程序员就技术方案产生分歧与争论。如果你是一名架构师或技术Leader，站在技术决策者的立场和角度，该如何去解决分歧，做出决策呢？这背后，有什么通用的方法和原则吗？
## 绝对曾几何时，我以为技术是客观的，有绝对正确与否的标准判断。在学校我刚开始学习编程技术时，捧着一本数据库教材，它在述说着经典的关系数据库表设计原则：第一、第二、第三范式。后来，我参加工作，那时的企业应用软件系统几乎都是以数据库为核心构建的，严格遵守范式定义的表结构。所以，当时觉得所有不符合范式设计的应用肯定都是错的，直到后来进入大规模的分布式领域，碰到了反范式设计。也还是在学校做课程设计时，一起学习的同学总跟我讨论设计模式。一边写代码，一边研究这个代码到底符不符合某种模式，似乎没有套进某种模式中的代码就像没有拿到准生证的婴儿，带有某种天生的错误。直到后来，我碰到了反模式设计。刚工作不久，同事和我讨论当用户删除自己的数据时，我们到底应不应该删掉它？我那时觉得理所应当写个Delete 的 SQL语句把它删掉。因为当时是这么想的：既然用户都不要他的数据了，我们还把它保留下来做什么呢？不是浪费资源嘛，而且服务器存储资源还算挺贵的。``{=html}但今天的互联网大数据时代，用户主动或非主动提交的任何数据，你都别想再将它真正地删除了。这个时代，受益于**摩尔定律**，存储设备容量不断增加，而价格不断降低，所有关于用户的数据总是可能有用的，都先存下来再说。做技术这么些年下来，关于技术方案的判断，曾经以为的绝对标准，今天再看都是相对的。
## 相对的确是的，适合的技术决策总是在相对的条件下做出的。曾经，读到一篇英文文章，其标题翻译过来就是《简化：把代码移到数据库函数中》。我一看到这个标题就觉得这是一个错误的技术决策思路，为什么呢？因为曾经我花了好长时间做了一个项目，就是把埋在数据库存储过程中的代码迁移到Java 应用里；而且，现在不依赖数据库的代码逻辑不正大行其道吗？作者是在正话反说，还是在哗众取宠？我很是好奇。所以，我就把这篇文章仔细读了一遍，读完以后我发现作者说得似乎有些道理，他的说法我大概概括为如下。作者说，如今绝大部分的 Web 应用包括两部分：-   一个核心数据库，负责存储数据；-   以及围绕数据库的负责所有业务智能与逻辑的代码，体现为具体编程语言的类或函数。现在几乎所有的 Web系统都是如此设计的，所以这像是真理，业界最佳实践，事实工业标准，对吧？但作者描述了他自己的经历，是下面这样的。他从 1997 年开始做了一个电子商务网站，用了 PostgreSQL作为数据库，第一版网站用 Perl 写的。1998 年换成了 PHP，2004 年又用 Rails重写了一遍。但到 2009 年又换回了 PHP，2012 年把客户端逻辑拆出去用JavaScript 重写，实现了前后端分离。这么些年下来，代码重构过很多次，但数据库一直是PostgreSQL。可是大量和数据存取有关的逻辑也随着代码语言的变迁而反复重写了很多遍。因而，作者感叹如果把这些与数据存取有关的逻辑放在数据库里，那么相关的代码将不复存在，他也不需要反复重写了。这里有个疑问，作者没事老换语言，到底是在折腾啥？他虽然没有在文中明说，但作为程序员的我还是能设身处地感受到其中的缘由。作者本身是学音乐出身，目标是建网站卖音乐唱片，自学编程只是手段。作为一个过来人，我相信他早期的代码写得肯定不咋地，又在各种流行Web技术趋势的引诱下，充满好奇心地尝试各种当时时髦的技术，不断重构改进自己的代码。在这个过程中发现，有一些和业务关系不太大的数据存取逻辑，被反复重写了很多遍，所以才产生出了这样的思路：假如把这部分代码移到数据库中。其实对这个思路的挑战，也是显而易见的：-   如何进行调试、回滚？-   如何做单元测试？-   如何进行水平扩展？上述"挑战"在一般情况下都成立，但对于作者来说却不是很重要。因为作者思路成立的前提是：第一，他维护的是一个小网站，数据库没有成为瓶颈；第二，这个网站的开发维护人员只有作者一个人，而不是一个团队。是的，围绕这个网站，作者创办了一家公司，雇佣了 85 名员工，并成为了公司的CEO也是唯一的程序员。因此，这就是一个在作者所处特定环境下的技术决策，虽看上去明显不太对，但在作者的相对限定条件下，这个决策实际省了他个人的负担（虽然扩展有明显的极限，网站也不会发展太大）。仔细看作者这个案例，可以发现其技术决策方案也是符合 "康威定律"的。"康威定律"是这么说的：> 任何组织在设计一套系统时，所交付的设计方案在结构上都与该组织的沟通结构保持一致。换句话说，就是系统设计的通信结构和设计系统的团队组织的沟通结构是一致的。案例中，作者的系统只有他一个人负责设计与实现，只需要和不同阶段的自己产生沟通，在他的系统和场景下，变化最小、稳定度最高的是数据存储和结构，所以他选择把尽可能多的代码逻辑绑定在系统中更稳定的部分，从而降低变化带来的代价。而**康威定律告诉我们系统架构的设计符合组织沟通结构时取得的收益最大**。这是一个经过时间检验和验证过的规律与方法，体现的就是一个相对的选择标准，那在这背后，有没有隐藏着关于技术决策更通用的判断原则呢？