title:Pump up the Volume: Practical Database Reconstruction from Volume
Leakage on Range Queries
author:Paul Grubbs and
Marie-Sarah Lacharit&apos;e and
Brice Minaud and
Kenneth G. Paterson
Pump up the Volume: Practical Database Reconstruction from
Volume Leakage on Range Queries
Paul Grubbs1
Marie-Sarah Lacharit´e2
Brice Minaud2
Kenneth G. Paterson2
1 Cornell University, USA
2 Royal Holloway, University of London, UK
PI:EMAIL, PI:EMAIL,
PI:EMAIL, PI:EMAIL
Abstract
We present attacks that use only the volume of responses to range queries to reconstruct databases.
Our focus is on practical attacks that work for large-scale databases with many values and records,
without requiring assumptions on the data or query distributions. Our work improves on the previous
state-of-the-art due to Kellaris et al. (CCS 2016) in all of these dimensions.
Our main attack targets reconstruction of database counts and involves a novel graph-theoretic
It generally succeeds when R, the number of records, exceeds N 2/2, where N is the
approach.
number of possible values in the database. For a uniform query distribution, we show that it requires
volume leakage from only O(N 2 log N ) queries (cf. O(N 4 log N ) in prior work).
We present two ancillary attacks. The ﬁrst identiﬁes the value of a new item added to a database
using the volume leakage from fresh queries, in the setting where the adversary knows or has previ-
ously recovered the database counts. The second shows how to eﬃciently recover the ranges involved
in queries in an online fashion, given an auxiliary distribution describing the database.
Our attacks are all backed with mathematical analyses and extensive simulations using real data.
1 Introduction
In a recent ground-breaking paper, Kellaris et al. [KKNO16] initiated the systematic study
Setting.
of volume attacks against databases. Here, the setting is an adversary who is able to learn how many
records are returned in response to queries made to a database. From just this information, the adversary
tries to reconstruct the database counts, that is the exact number of records in the database having each
particular value. As a secondary target, the adversary may try to learn the content of individual queries.
We stress that, in the envisaged setting, the adversary does not know the individual queries (these
may be encrypted) and does not learn which records are returned in response to each query (so it does
not have what is known as access pattern leakage). In some settings, the attacker may know something
about the distribution on queries (for example, that they are uniformly distributed range queries), and
it may also have access to some kind of reference distribution which represents (possibly inaccurate) side
information about the distribution from which the database is drawn. However, we are also interested
in attacks in the “bare” setting where the attacker has no ancillary information.
Such volume attacks may be quite easy to mount in practice. For example, the attacker might be
located on the network between a client making queries and a server hosting the database, with all
interactions between client and server being encrypted. Yet the communication pattern and volume of
1
data on the wire from server to client may indicate how many records are returned from each query,
since typical secure communications protocols like TLS do not attempt to hide the directionality or
amount of data being transmitted (indeed, modern TLS cipher suites like those based on AES-GCM
directly leak plaintext lengths in ciphertexts). This makes volume attacks possible. This setting is
of course related to problems in the ﬁeld of traﬃc analysis, such as mounting and preventing website
ﬁngerprinting attacks [DCRS12, SST17]. Relatedly, the time taken to process database queries may act
as a side channel to reveal the volume of responses.
As a second example of the relevance of volume attacks, the database server itself might be ad-
versarial, with the client using advanced encryption techniques (possibly in combination with trusted
hardware like SGX) to hide queries and access patterns from the server. Existing techniques for this
purpose [CJJ+13, CGKO06] do hide the queries but tend to leak the access pattern, rendering them
vulnerable to quite devastating attacks, see [KKNO16, LMP18]. The next natural evolutionary step in
this area, then, will be to combine the existing techniques with oblivious memory access techniques such
as ORAM [SvDS+13, Gol87] to hide the access patterns. However, not only would this degrade perfor-
mance, but also such an approach might be of dubious security value, since volume attacks mounted
by the server would still be possible and might have signiﬁcant security impact. Moreover, as recent
work has shown [GRS17], SQL databases store the cardinalities of responses to past queries, so volumes
may leak even to the so-called snapshot adversary who is only able to compromise the server for a short
period of time and grab a copy of its memory. This is a weaker adversarial setting than the persistent
attacker setting implicit to assuming an adversarial server.
The impact of volume attacks, if possible, can be serious. Although they cannot reconstruct the exact
connection between individual records and their values, they do enable the exact database counts to be
reconstructed, and this may represent signiﬁcant leakage. As illustrative examples, consider a company’s
salary database leaking to a competitor, or a hospital’s mortality data becoming exposed. This is even
so when the adversary already has an approximation to the database distribution, since knowing exact
counts can represent a much more serious privacy violation than merely having approximations to those
counts. For example, by mounting the attack and recovering exact counts at diﬀerent points in time,
the adversary may be able to deduce the value of speciﬁc records of interest that were added or removed
from the database. Furthermore, the exact database counts can leak important information about the
values of speciﬁc outliers, which can then be de-anonymising.
Indeed, the privacy risks of releasing
precise database counts were among the core motivations of modern diﬀerential privacy research.
Range queries.
In this work, we focus on database reconstruction using the volume leakage of range
queries. Range queries are perhaps the simplest type of query beyond point queries, and constitute
a central primitive in modern databases:
for example, four queries in the TPC-H query benchmark
(designed to reﬂect real workloads) contain explicit range queries. In the setting of range queries, data
takes on numerical values in some range [1, N ] (the value of the left endpoint is ﬁxed at 1 only for ease
of exposition, and without loss of generality [LMP18]). All range queries are of the form [x, y] for some
1 ≤ x ≤ y ≤ N . When a range query [x, y] is issued, all records with values z ∈ [x, y] are returned in
response to the query. Because we target volume attacks, recall that the adversary only sees the number
of records returned by the query, and not the record identiﬁers, or the values x, y.
Existing work. Kellaris et al. [KKNO16] (KKNO) made an excellent ﬁrst step in understanding
volume attacks arising from range queries, formalising this style of attack and introducing a pair of
algorithms that are each capable of performing database reconstruction. KKNO’s attacks were the ﬁrst
to demonstrate that reconstructing database counts solely from the volume leakage of range queries
is possible. However their attacks are severely limited in practice, for two reasons. First, KKNO’s
algorithm strongly relies on the assumption that range queries are drawn independently and uniformly
at random. Real-world queries are not expected to be uniform, or independent. If these conditions
2
are not met, KKNO’s algorithm fails. In fact the uniformity assumption seems inherent to the KKNO
algorithm, which exploits speciﬁc properties of that distribution; it is unclear how the algorithm could
be adapted to more general distributions. A second limitation of KKNO’s attack in practice is that it
requires observing the volume leakage from O(N 4 log N ) queries. For N = 100 for instance, this number
represents about half a billion queries. For further discussion, see Appendix A.
It may seem at ﬁrst that this query complexity is unavoidable.
Indeed as shown in [KKNO16],
any generic algorithm succesfully achieving database reconstruction from volume leakage must require
as many as Ω(N 4) range queries. However, the example databases demonstrating this are certainly
pathological, and one might wonder whether this is the true barrier to performance for typical databases
in which the values in records are drawn from some reasonable distribution. Our work shows that it is
not.
Our results. Because of the ease with which they can be mounted, their real-world impact on privacy,
and their likely future importance, it is vital to understand volume attacks better. This is what we
set out to do in this work. Our focus is on making database reconstruction (DR) attacks using volume
leakage from range queries more practical.
In this direction, our main result is a volume-based DR attack for range queries that does not rely
on any uniformity or independence assumptions on the query distribution. Instead, it only needs to
observe each distinct volume at least once, regardless of how queries are drawn. The former property
makes our attack much more practical than those of KKNO, which as discussed above crucially rely on
a uniformity assumption. The latter property leads to a substantial reduction in the number of queries
needed for a DR attack, since now only the “coupon collector number” of queries needs to be seen for
the query distribution. For example, if for the purpose of comparison to KKNO’s algorithm, we assume
that queries are uniform, then our algorithm only requires O(N 2 log N ) queries, instead of O(N 4 log N )
for KKNO’s.
In more detail, our approach reduces the problem of DR to ﬁnding a clique in a certain graph
that is constructed from the volume leakage. By applying suitable preprocessing, in practice, we ﬁnd
that we actually often end up in the situation where clique ﬁnding in the graph is trivial, avoiding the
need for expensive clique-ﬁnding algorithms. We evaluate the performance of our algorithm using real
medical datasets obtained from the US government Healthcare Cost and Utilization Project (HCUP)
Nationwide Inpatient Sample (NIS).
Our attack has two main limitations. First, as noted above, we assume that every range query must
be issued at least once. This is certainly a strong assumption. Nevertheless, it is considerably weaker
than the assumption required by KKNO’s attack, which needs that every query should be observed
multiple times (roughly N 2 times on average) so that the exact frequency of every volume can be
determined. Furthermore, we believe it is reasonable to expect that a secure encrypted database should
remain secure even when every range query has been issued.
The second main limitation of our attack is that it does not succeed for all databases. Indeed that
would be impossible, since it would then have to require Ω(N 4) queries due to the lower bound from
[KKNO16], as discussed earlier. Instead we aim to cover typical parameter regimes that include many
real-world databases. Assumptions on the database required by our algorithm are twofold. First, if we
wish to recover the exact count of every value in the database, then we must assume that the database
is dense, in the sense that every value must be taken by at least one record (equivalently, there is no
value with a zero count). However, our attack does extend to the non-dense (or sparse) case, with
the limitation that it only recovers non-zero database counts. This point is discussed in more detail in
Section 3.3.
Second, our attack does not succeed for all parameter regimes, although our experiments show a
In addition to experiments, to help provide insight about
high success rate on real-world datasets.
3
parameter regimes where our attack succeeds, we build a statistical model of how the number of records
R and the number of values N inﬂuence the adversary’s view of volumes, and how this aﬀects the
success of our attack. For example, if for the purpose of the model we assume a uniform distribution of
values across records, and a uniform distribution on ranges, then our model predicts that the number
of records R required for our attack to succeed should be Ω(N 2) when the leakage from O(N 2 log N )
queries is available. This estimate matches with what we observe in practice in our experiments, despite
several idealisations made in building the model: we ﬁnd that when R exceeds about N 2/2, our clique-
ﬁnding algorithm works extremely well in practice (given volume leakage from enough queries), but its
performance declines markedly when R becomes signiﬁcantly lower than N 2/2.
In addition to our main attack, we propose two ancillary attacks. The ﬁrst of these ancillary attacks
considers a setting where the adversary has already recovered exact database counts, for example as a
result of running our main attack. Then we assume the database is updated with a new record. We
propose an algorithm to deduce the value of that new record, purely from observing the volume of range
queries, as in the previous attack. This enables the adversary to update its knowledge of the database
on the ﬂy as new records are added.
Like our main attack, the algorithm we propose does not require an assumption on the query
distribution. However if for the sake of analysing the performance of the algorithm, we do make the
assumption that queries are uniformly distributed, then we are able to show that only O(N ) queries are
needed for our algorithm to recover the value of the newly added recorded, provided again that R is
Ω(N 2). We stress that the uniformity assumption is needed only for analysis; the algorithm still works
well without it. We go on to show that even better performance can be achieved if only approximate
recovery of the new value is desired. This analysis again supports our experimental results using HCUP
datasets. For example, our experiments show that on a real-world hospital database of about 20000
records, the median number of queries needed to ascertain the age of a patient in a newly added record
to within 10 years is only 17 queries; after 57 queries it is known within just 2 years.
Our second ancillary attack shows how to eﬃciently recover the ranges involved in queries in an
online fashion, given a reference distribution for the database. This reference distribution could be
obtained by a successful DR attack, but it could also be an inaccurate estimate obtained from a related
dataset or a previous breach. The attack relies on the following idea: given the volume leakage for
a query, we can compare that leakage to volumes obtained synthetically from all the ranges in the
reference distribution. In our attack, we just output the set of all ranges whose volumes are close (in
a well-deﬁned sense) to the leaked volume. Although simple, this idea turns out to be powerful. It
is also amenable to analysis. For example, assuming the database is drawn exactly from the reference
distribution, we are able to prove that the output set always contains the correct range, except with
some small (and tunable) error. This follows from an application of the Dvoretzky-Kiefer-Wolfowitz
inequality, a Chernoﬀ-type bound on the maximum distance between the empirical and true CDFs of
a distribution. Surprisingly, our simple “CDF matching” algorithm continues to work well even when
the reference distribution is not particularly accurate. To demonstrate this, we again use the HCUP
datasets; we compile a reference distribution by aggregating data from one year, and use it in attacks
against individual hospitals from other years. For more than 80% of hospitals our attack is able to
correctly eliminate all but ﬁfteen possibilities for some queries on the AGE attribute (which has 4186
possible queries).
In its entirety, our work shows that volume attacks, perhaps not yet considered a serious security
threat because of unrealistic assumptions or poor performance, should be considered a real concern in
practice, not only in advanced settings (like an honest-but-curious database server) but even in basic
settings such as a network-based or snapshot adversary. Our work should also serve as a warning for
researchers developing new database encryption schemes: simply hiding access patterns is not enough;
volumes must be hidden too.
4
2 Background and Setting
The setting we consider has two parties: a client and a server. The client stores no information locally
and the server stores a database that the client queries. In this paper we will treat the database as a
sequence of values between 1 and N (hereafter, “records”), but will not assume anything about how
records are stored or accessed. We assume client-server communication is unbreakable and that the
queries and responses sent between the client and server reveal no information except for the number
of records in the response. This is an extremely conservative setting: the attacker neither knows nor
can issue any queries.
Reconstruction attacks. Call the number of records with a given value the count of the value. As
discussed in the introduction, our main attack targets database reconstruction (DR), which is to say it
attempts to recover the counts of all values. KKNO observed that counts can only be recovered up to
reﬂection, meaning that for any value k, the recovered count could be for k or N + 1 − k. When no
assumptions can be made about the number of records or the counts of individual elements (we will call
this sparse), Kellaris et al. proved that Ω(N 4) queries are required to perform DR generically. We will
also study two other attack types. The ﬁrst, update recovery, learns the value of a single record added
after the database is reconstructed. The second is query reconstruction, which tries to reconstruct the
queries rather than the database.
Notation and terminology. Recall that N is the number of possible values. We assume (without
loss of generality) that set of possible values is [1, N ]. The number of records is denoted by R. We let
[x, y] for 1 ≤ x ≤ y ≤ N represent a query for all records whose value is in the closed interval from x to
y. There are N (N + 1)/2 possible range queries. The volume of a range query [x, y] is the number of
records whose value lies in [x, y]. We also say that these records match the range query. We call volumes
the set of integers that are the volume of some range. We denote the volume of a range q = [x, y] by
vol(q). We say that a database is dense iﬀ every value is taken by at least one record. We will use
standard asymptotic notation (O, Ω, etc.) as well as “tilde” asymptotic notation like ˜O, which simply
hides polylog factors. log() denotes the natural logarithm.
Assumptions. We assume that the total number of records, R, is known by the adversary. We believe
this is a reasonable and conservative assumption. Releasing the aggregate size of a database (even one
containing sensitive information) has little or no privacy implications in most settings, and the value R
may in fact be publicly available. Even if the information is not public, an adversary can infer R using
the on-disk size of a database or by observing network traﬃc while a database is restored from backup.
We also assume the adversary knows the total number of possible data values N in the ﬁeld targeted
by the range queries. Note that this number does not depend on the database under attack, but only
on the type of data being targeted. Other assumptions required by our main attack are discussed in
Section 1.
Unless otherwise speciﬁed, we will never assume an attacker knows either the query distribution or
the database distribution. An assumption on the query distribution becomes necessary when it comes
to analysing the query complexity of the attacks though: indeed the client could otherwise repeat the
same query forever, and the adversary would never learn anything new. To give meaningful and clear
analyses we will thus sometimes assume a uniform distribution; however, in every case the algorithm
itself does not require that assumption to succeed. We make these assumptions to provide analytical
insight into a “typical” behavior of the algorithm. Further, our attacks are evaluated on real-world
non-uniform datasets.
5
3 Practical Volume-Only Reconstruction Attacks
In this section, we describe and analyze our main result, namely a practical database reconstruction
attack using only the volume leakage of range queries. Our attack uses only a set of range volumes as
input, and does not use any distribution-dependent frequency information. In particular, the success of
the attack is not dependent on knowing the query distribution.
We begin this section by discussing the requirement of data density, presenting the key idea behind
our algorithm – identifying elementary ranges – and then providing an overview of the algorithm’s
steps. We explain it in detail in Section 3.1. We then analyze it in Section 3.2 and present the results
of practical experiments in Section 3.3.
Data density. The main setting of our algorithm is the case where the database is dense; that is,
where every value in [1, N ] matches at least one record. Our algorithm succeeds on dense databases,
and can also succeed if the database is not dense. In that case, it is not possible to recover the counts of
all values, because it is impossible to learn which values are matched by zero records from just a set of
volumes of range queries. Therefore, we deﬁne success as recovery of the non-zero counts of all values in
the correct order; that is, the only missing information is precisely the set of values with zero matching
records. This still reveals a considerable amount of information to the adversary. Some knowledge of the
database distribution may enable reconstruction of all counts. This is discussed further in Section 3.3.
Nevertheless, the main focus of our attack is dense databases, where recovering the counts of all values
is possible with just a set of range query volumes.
Elementary ranges. Consider the ranges [1, 1], [1, 2], . . ., [1, N ] – let us call them elementary ranges.
Knowing the volumes of these N ranges is necessary and suﬃcient for reconstruction: if we know the
volumes of [1, 1], [1, 2], . . ., [1, N ], then the number of records that have value k is the diﬀerence between
the (k − 1)-st and k-th element in the list (treating the 0-th element as zero). The goal of our algorithm