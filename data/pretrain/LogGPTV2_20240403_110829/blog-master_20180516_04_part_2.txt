                lastSourceFailed = false;  
                switch (currentSource)  
                {  
                        case XLOG_FROM_ARCHIVE:  
                        case XLOG_FROM_PG_WAL:  
                                /* Close any old file we might have open. */  
                                if (readFile >= 0)  
                                {  
                                        close(readFile);  
                                        readFile = -1;  
                                }  
                                /* Reset curFileTLI if random fetch. */  
                                if (randAccess)  
                                        curFileTLI = 0;  
                                /*  
                                 * Try to restore the file from archive, or read an existing  
                                 * file from pg_wal.  
                                 */  
                                readFile = XLogFileReadAnyTLI(readSegNo, DEBUG2,  
                                                                                          currentSource == XLOG_FROM_ARCHIVE ? XLOG_FROM_ANY :  
                                                                                          currentSource);  
                                if (readFile >= 0)  
                                        return true;    /* success! */  
                                /*  
                                 * Nope, not found in archive or pg_wal.  
                                 */  
                                lastSourceFailed = true;  
                                break;  
                        case XLOG_FROM_STREAM:  
                                {  
                                        bool            havedata;  
                                        /*  
                                         * Check if WAL receiver is still active.  
                                         */  
                                        if (!WalRcvStreaming())  
                                        {  
                                                lastSourceFailed = true;  
                                                break;  
                                        }  
                                        /*  
                                         * Walreceiver is active, so see if new data has arrived.  
                                         *  
                                         * We only advance XLogReceiptTime when we obtain fresh  
                                         * WAL from walreceiver and observe that we had already  
                                         * processed everything before the most recent "chunk"  
                                         * that it flushed to disk.  In steady state where we are  
                                         * keeping up with the incoming data, XLogReceiptTime will  
                                         * be updated on each cycle. When we are behind,  
                                         * XLogReceiptTime will not advance, so the grace time  
                                         * allotted to conflicting queries will decrease.  
                                         */  
                                        if (RecPtr = 0);  
                                                }  
                                                else  
                                                {  
                                                        /* just make sure source info is correct... */  
                                                        readSource = XLOG_FROM_STREAM;  
                                                        XLogReceiptSource = XLOG_FROM_STREAM;  
                                                        return true;  
                                                }  
                                                break;  
                                        }  
                                        /*  
                                         * Data not here yet. Check for trigger, then wait for  
                                         * walreceiver to wake us up when new WAL arrives.  
                                         */  
                                        if (CheckForStandbyTrigger())  
                                        {  
                                                /*  
                                                 * Note that we don't "return false" immediately here.  
                                                 * After being triggered, we still want to replay all  
                                                 * the WAL that was already streamed. It's in pg_wal  
                                                 * now, so we just treat this as a failure, and the  
                                                 * state machine will move on to replay the streamed  
                                                 * WAL from pg_wal, and then recheck the trigger and  
                                                 * exit replay.  
                                                 */  
                                                lastSourceFailed = true;  
                                                break;  
                                        }  
                                        /*  
                                         * Since we have replayed everything we have received so  
                                         * far and are about to start waiting for more WAL, let's  
                                         * tell the upstream server our replay location now so  
                                         * that pg_stat_replication doesn't show stale  
                                         * information.  
                                         */  
                                        if (!streaming_reply_sent)  
                                        {  
                                                WalRcvForceReply();  
                                                streaming_reply_sent = true;  
                                        }  
                                        /*  
                                         * Wait for more WAL to arrive. Time out after 5 seconds  
                                         * to react to a trigger file promptly.  
                                         */  
                                        WaitLatch(&XLogCtl->recoveryWakeupLatch,  
                                                          WL_LATCH_SET | WL_TIMEOUT | WL_POSTMASTER_DEATH,  
                                                          5000L, WAIT_EVENT_RECOVERY_WAL_ALL);  
                                        ResetLatch(&XLogCtl->recoveryWakeupLatch);  
                                        break;  
                                }  
                        default:  
                                elog(ERROR, "unexpected WAL source %d", currentSource);  
                }  
                /*  
                 * This possibly-long loop needs to handle interrupts of startup  
                 * process.  
                 */  
                HandleStartupProcInterrupts();  
        }  
        return false;                           /* not reached */  
```  
这里决定XLOG从哪里获取，会在pg_wal目录, resotre_command, stream三个SOURCE之间轮询，失败跳到下一个SOURCE获取WAL。  
## 参考  
src/backend/access/transam/xlog.c  
recovery.conf  
```  
#restore_command = ''           # e.g. 'cp /mnt/server/archivedir/%f %p'  
#primary_conninfo = ''          # e.g. 'host=localhost port=5432'  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")