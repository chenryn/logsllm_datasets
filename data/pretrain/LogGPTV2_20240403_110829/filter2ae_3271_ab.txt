      - type: word
        part: body
        words:
          - 'uid='
          - 'gid='
          - 'groups='
        condition: and
      # Match http response status code
      - type: status
        status:
          - 200
Above we have introduced the meaning of each part. In general, the running
process of the engine is as follows:
  1. Iterate over all payloads combinations; 
  2. For each payloads combination, send the defined requests sequentially and obtain the response results (need to replace the dynamic values in the request); 
  3. Traverse all decompression rules, extract information from the response, merge into the local variable namespace, or use it for result return (controlled by internal variables);
  4. If the value of `req-conditio` is true, jump to 2 to continue sending the next request; Extract each part of the response result and save it to the local variable namespace, such as `status_ code_ 1`、`body_ 2`。 
  5. Traverse the matching rule to get the matching result. If it matches, return it, otherwise continue; 
## Pocsuite3 is compatible with some implementation details of nuclei
### How the YAML format PoC is compatible with the original framework
We don't want to change the way Pocsuite3 registers PoC to the framework, so
we have implemented Nuclei as a relatively independent module and provided an
additional method. When the PoC is loaded by the framework, it is found in
YAML format, and will be automatically converted to PoC format of Pocsuite3.
Therefore, there is no difference in the use of YAML PoC and Python PoC
scripts.
    class nuclei:
    ...
       def __str__(self):
            """
            Convert nuclei template to Pocsuite3
            """
            info = []
            key_convert = {
                'description': 'desc',
                'reference': 'references'
            }
            for k, v in self.json_template['info'].items():
                if k in key_convert:
                    k = key_convert.get(k)
                if type(v) in [str]:
                    v = json.dumps(v.strip())
                info.append(f'    {k} = {v}')
            poc_code = [
                'from pocsuite3.api import POCBase, Nuclei, register_poc\n',
                '\n',
                '\n',
                'class TestPOC(POCBase):\n',
                '\n'.join(info),
                '\n',
                '    def _verify(self):\n',
                '        result = {}\n',
                '        if not self._check(is_http=%s):\n' % (len(self.template.requests) > 0),
                '            return self.parse_output(result)\n',
                "        template = '%s'\n" % binascii.hexlify(self.yaml_template.encode()).decode(),
                '        res = Nuclei(template, self.url).run()\n',
                '        if res:\n',
                '            result["VerifyInfo"] = {}\n',
                '            result["VerifyInfo"]["URL"] = self.url\n',
                '            result["VerifyInfo"]["Info"] = {}\n',
                '            result["VerifyInfo"]["Info"]["Severity"] = "%s"\n' % self.template.info.severity.value,
                '            if not isinstance(res, bool):\n'
                '               result["VerifyInfo"]["Info"]["Result"] = res\n',
                '        return self.parse_output(result)\n',
                '\n',
                '\n',
                'register_poc(TestPOC)\n'
            ]
            return ''.join(poc_code)
### How to load a YAML template
Golang can directly deserialize JSON data into structure. It can also do this
in Python 3 using dataclass and date libraries, as well as type checking. In
addition, variables in Python cannot contain horizontal lines, so data needs
to be preprocessed.
    @dataclass
    class Template:
        """Template is a YAML input file which defines all the requests and other metadata for a template.
        """
        id: str = ''
        info: Info = field(default_factory=Info)
        requests: List[HttpRequest] = field(default_factory=list)
        network: List[NetworkRequest] = field(default_factory=list)
        stop_at_first_match: bool = True
        variables: dict = field(default_factory=dict)
    class Nuclei:
        def __init__(self, template, target=''):
            self.yaml_template = template
            try:
                self.yaml_template = binascii.unhexlify(self.yaml_template).decode()
            except ValueError:
                pass
            self.json_template = yaml.safe_load(expand_preprocessors(self.yaml_template))
            self.template = dacite.from_dict(
                Template, hyphen_to_underscore(self.json_template),
                config=dacite.Config(cast=[Severify, ExtractorType, MatcherType, HTTPMethod, AttackType, NetworkInputType]))
### DSL expression execution
Most functions of DSL are implemented in Python, which limits the functions
and attributes that can be accessed by expressions, and is finally executed
through eval.
    def safe_eval(expression, variables):
        if not _check_expression(expression, allowed_variables=list(variables.keys())):
            expression = expression.replace(' && ', ' and ').replace(' || ', ' or ')
            if not _check_expression(expression, allowed_variables=list(variables.keys())):
                raise Exception(f"Invalid expression [{expression}], only a very simple subset of Python is allowed.")
        return eval(expression, globals(), variables)
### Using effects
Load the YAML template directly with `-r`, and set the log level through `-v`
to output the details of the template operation, including request and
response, expression execution, decompression rules, and matching rule
operation results.
    ?  ~ pocsuite -r ~/nuclei-templates/cves/2020/CVE-2020-14883.yaml -u  http://172.29.157.74:7001  -v 2                                   
    ,------.                        ,--. ,--.       ,----.   {2.0.1-cb758d9}
    |  .--. ',---. ,---.,---.,--.,--`--,-'  '-.,---.'.-.  |
    |  '--' | .-. | .--(  .-'|  ||  ,--'-.  .-| .-. : .'  HTTP/1.1 200 OK
    > Date: Wed, 09 Nov 2022 02:34:52 GMT
    > Transfer-Encoding: chunked
    > Content-Type: text/html; charset=UTF-8
    > Set-Cookie: ADMINCONSOLESESSION=hpNaPYWzVQlWjXS0qq3B6CBq43oDb1kLXFpPZS6iOBlsVxfbRC-2!-1601473325; path=/console/; HttpOnly
    > 
    uid=1000(oracle) gid=1000(oracle) groups=1000(oracle)
    [18:34:52] [DEBUG] [+] Extractor(name='', type=, regex=['(u|g)id=.*'], group=0, kval=[], json=[], xpath=[], attribute='', dsl=[], part='', internal=False, case_insensitive=False) -> {'internal': {}, 'external': {}, 'extra_info': ['uid=1000(oracle) gid=1000(oracle) groups=1000(oracle)']}
    [18:34:52] [DEBUG] [+] Matcher(type=, condition='or', part='header', negative=False, name='', status=[], size=[], words=['ADMINCONSOLESESSION'], regex=[], binary=[], dsl=[], encoding='', case_insensitive=False, match_all=False) -> True
    [18:34:52] [DEBUG] [+] Matcher(type=, condition='and', part='body', negative=False, name='', status=[], size=[], words=['uid=', 'gid=', 'groups='], regex=[], binary=[], dsl=[], encoding='', case_insensitive=False, match_all=False) -> True
    [18:34:52] [DEBUG] [+] Matcher(type=, condition='or', part='body', negative=False, name='', status=[200], size=[], words=[], regex=[], binary=[], dsl=[], encoding='', case_insensitive=False, match_all=False) -> True
    [18:34:52] [+] URL : http://172.29.157.74:7001
    [18:34:52] [+] Info : {'Severity': 'high', 'Result': [{'cmd': 'id', 'extra_info': ['uid=1000(oracle) gid=1000(oracle) groups=1000(oracle)']}]}
    [18:34:52] [INFO] Scan completed,ready to print
    +---------------------------+-----------------------------------------------------------------------------------------+--------+-----------+---------+---------+
    | target-url                |                                         poc-name                                        | poc-id | component | version |  status |
    +---------------------------+-----------------------------------------------------------------------------------------+--------+-----------+---------+---------+
    | http://172.29.157.74:7001 | Oracle Fusion Middleware WebLogic Server Administration Console - Remote Code Execution |   0    |           |         | success |
    +---------------------------+-----------------------------------------------------------------------------------------+--------+-----------+---------+---------+
    success : 1 / 1
    [*] shutting down at 18:34:52
Attached: Demo video.
## Conclusion
The current implementation can cover most HTTP and Network templates, and some
special features of Nuclei such as Workflows, conditional race requests, and
request comments, are not supported temporarily. The latest version has been
pushed to PyPI, Homebrew repository, Dockerhub, Archlinux, etc. After this
large version is stable, it will continue to be pushed to Debian, Kali, and
Ubuntu. If you find any problems in use, please submit an Issue or contribute
code.
## Reference
【1】: Pocsuite3 framework
【2】: Nuclei framework
【3】: nuclei-templates project
【4】: YAML language tutorial
* * *