# WISH 1
## NAME
wish - 简单的窗口式 shell

## 概述
**wish [filename] [arg] [arg ...]**

## 选项
- **-colormap new**
  指定窗口使用一个新的私有调色板，而不是默认的屏幕调色板。

- **-display display**
  指定显示窗口的显示器和屏幕。

- **-geometry geometry**
  初始化窗口的几何（位置和大小）。如果指定了这个选项，其值将存储在应用的 Tcl 解释器的全局变量 `geometry` 中。

- **-name name**
  使用 `name` 作为窗口标题，并作为 `send` 命令使用的解释器名称。

- **-sync**
  同步执行所有 X 服务器命令，以便立即报告错误。这会导致执行速度变慢，但对调试很有用。

- **-use id**
  指定应用程序的主窗口应嵌入标识符为 `id` 的窗口中，而不是作为一个独立的顶层窗口创建。`id` 必须与 `toplevel` 组件的 `-use` 选项值相同（例如，它必须与 `winfo id` 返回的形式一致）。

- **-visual visual**
  指定窗口使用的视觉效果。`visual` 必须采用 `Tk_GetVisual` 过程支持的格式。

- **- -**
  将所有剩余参数传递给脚本的 `argv` 变量而不进行解释。这提供了一种机制，可以将类似 `-name` 的参数传递给脚本而不让 `wish` 解释它们。

## 描述
Wish 是一个由 Tcl 命令语言、Tk 工具箱和一个从标准输入或文件读取命令的主程序组成的简单程序。它创建一个主窗口并处理 Tcl 命令。如果不带参数调用 `wish`，或者第一个参数以“-”开头，则从标准输入交互地读取 Tcl 命令。它将持续处理命令直到所有窗口被删除或在标准输入上到达文件结束。如果用户的主目录中存在 `.wishrc` 文件，在从标准输入读取第一条命令之前，`wish` 会将其作为 Tcl 脚本求值。

如果调用 `wish` 时提供了一个初始文件名参数，则该文件名被视为脚本文件名。`wish` 将对该文件中的脚本进行求值（可能是创建用户界面），然后响应事件直到所有窗口被删除。在这种情况下，不会自动求值 `.wishrc`，但如果需要，脚本文件可以包含它。

## 关于选项
`wish` 会自动处理上述选项总结中描述的所有命令行选项。任何其他命令行参数将通过后面描述的 `argc` 和 `argv` 变量直接传递给应用程序。

应用程序的名称用于如 `send` 等命令，如果指定了 `-name` 选项，则从中获取；否则，如果指定了文件名则使用该文件名，或者使用调用 `wish` 所使用的名字。在这两种情况下，如果名称包含斜杠字符，则只有最后一个斜杠后面的字符被视为应用程序的名称。

应用程序的类用于通过 `RESOURCE_MANAGER` 属性或 `.Xdefaults` 文件来指定选项。除了第一个字母大写外，类的名称与应用程序的名称相同。

## 变量
`wish` 设置了以下 Tcl 变量：
- **argc**
  包含 `arg` 参数的数量（如果没有则为 0），不包括上述描述的选项。
- **argv**
  包含一个 Tcl 列表，其成员依次是在 `--` 选项之后或不匹配上述选项段落描述的任何选项的 `arg` 参数，如果没有这些参数则为空字符串。
- **argv0**
  如果指定了文件名，则在此包含文件名。否则，包含调用 `wish` 使用的名字。
- **geometry**
  如果指定了 `-geometry` 选项，`wish` 会将其值复制到此变量中。如果在文件名被求值后该变量仍然存在，`wish` 将使用该值通过 `wm geometry` 命令设置主窗口的几何。
- **tcl_interactive**
  如果以交互方式运行 `wish`，则包含 1（不指定文件名且标准输入是终端类设备），否则为 0。

## 脚本文件
如果你创建的 Tcl 脚本文件的第一行是
```
#!/usr/local/bin/wish
```
则如果你将其标记为可执行文件，可以直接在你的 shell 中调用该脚本文件。这里假设 `wish` 安装在默认位置 `/usr/local/bin`；如果安装在其他地方，则需要修改上述行以匹配实际路径。许多 UNIX 系统不允许 `#!` 行超过 30 个字符的长度，因此请确保 `wish` 可执行文件可以通过短文件名访问。

更好的方法是用以下三行开始你的脚本文件：
```sh
#!/bin/sh
# the next line restarts using wish \\
exec wish "$0" "$@"
```
这种方法有三个优点。首先，`wish` 二进制文件的位置不需要硬编码到脚本中：它可以在你的 shell 查找路径中的任何地方。其次，它绕过了前一种方法的 30 字符文件名限制。第三，即使 `wish` 本身是一个 shell 脚本，这种方法也能正常工作（某些系统需要处理多体系结构或多操作系统：`wish` 脚本选择某个二进制文件来运行）。第三行导致 `sh` 和 `wish` 都处理脚本，但 `exec` 语句仅由 `sh` 执行。`sh` 首先处理脚本文件；它将第二行视为注释并执行第三行。`exec` 语句导致 shell 停止处理并启动 `wish` 重新处理整个脚本。当 `wish` 启动时，由于第二行的反斜线使第三行成为第二行注释的一部分，它将所有三行都视为注释。

### 提示符
当交互式调用 `wish` 时，它通常每条命令提示 `%`。你可以通过设置变量 `tcl_prompt1` 和 `tcl_prompt2` 来更改提示符。如果存在变量 `tcl_prompt1`，则它必须包含一个输出提示符的 Tcl 脚本；`tclsh` 会对 `tcl_prompt1` 中的脚本求值而不是输出提示符。变量 `tcl_prompt2` 以类似的方式用于键入换行而当前命令不完整的情况；如果没有设置 `tcl_prompt2`，则不对不完整的命令提供提示符。

## 关键字
shell, 工具箱

## 作者
```
Copyright (C) 1991-1994 The Regents of the University of California.
Copyright (C) 1994-1996 Sun Microsystems, Inc.
Copyright (C) 1995-1997 Roger E. Critchlow Jr.
```

## 中文版维护人
寒蝉退士

## 中文版最新更新
2001/06/20

## 《中国Linux论坛man手册页翻译计划》
http://cmpp.linuxforum.net