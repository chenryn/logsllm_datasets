代码中，类型ResourceManagerStringLocalizerFactory注册为singleton, StringLocalizer注册短
暂的生存期。类ResourceManagerStringLocalizerFactory是ResourceManagerStringLocalizer
的一个工厂。这个类利用前面的ResourceManager类，从资源文件中检索字符串。
28.5.2 注入本地化服务
将本地化添加到服务集合后，就可以在Startup类的Configure方法中请求本地化。
UseRequestLocalization方法定义了一个重载版本，在其中可以传递
RequestLocalizationOptions。RequestLocalizationOptions允许定制应该支持的区域性并设置
默认的区域性。这里，DefaultRequestCulture被设置为en-us。类RequestCulture只是一个小
包装，其中包含了用于格式化的区域性（它可以通过Culture属性来访问）和使用资源的区
域性（UICulture属性）。示例代码给SupportedCultures和SupportedUICultures接受en-us、
de-AT和de区域性：
    public void Configure(IApplicationBuilder app, IStringLocalizer sr
)
    {
      app.UseIISPlatformHandler();
      var options = new RequestLocalizationOptions
      {
        DefaultRequestCulture = new RequestCulture(new CultureInfo("en-US")),
        SupportedCultures = new CultureInfo[]
        {
        new CultureInfo("en-US"),
        new CultureInfo("de-AT"),
        new CultureInfo("de"),
        },
        SupportedUICultures = new CultureInfo[]
        {
        new CultureInfo("en-US"),
        new CultureInfo("de-AT"),
        new CultureInfo("de"),
        }
      };
      app.UseRequestLocalization(options);
      // etc.
    }
有了RequestLocalizationOptions设置，也设置属性RequestCultureProviders。默认情况
下配置3个提供程序：QueryStringRequestCultureProvider、CookieRequestCultureProvider和
AcceptLanguage-HeaderRequestCultureProvider。
28.5.3 区域性提供程序
下面详细讨论这些区域性提供程序。QueryStringRequestCultureProvider使用查询字符
串检索区域性。默认情况下，查询参数culture和ui-culture用于这个区域性提供程序，如下
面的URL所示：
    http://localhost:5000/? culture=de&ui-culture=en-US
还可以通过设置QueryStringRequestCultureProvider的QueryStringKey和
UIQueryStringKey属性来更改查询参数。
CookieRequestCultureProvider定义了名为ASPNET_CULTURE的cookie 
（可以使用
CookieName属性设置）。检索这个cookie的值，来设置区域性。为了创建一个cookie，并
将其发送到客户端，可以使用静态方法MakeCookieValue，从RequestCulture中创建一个
cookie，并将其发送到客户端。CookieRequestCultureProvider使用静态方法
ParseCookieValue获得RequestCulture。
设置区域性的第三个选项是，可以使用浏览器发送的HTTP标题信息。发送的HTTP标
题如下所示：
    Accept-Language: en-us, de-at; q=0.8, it; q=0.7
AcceptLanguageHeaderRequestCultureProvider使用这些信息来设置区域性。使用至多
三个语言值，其顺序由quality值定义，找到与支持的区域性匹配的第一个值。
下面的代码片段现在使用请求的区域性生成HTML输出。首先，使用
IRequestCultureFeature协定访问请求的区域性。实现接口IRequestCultureFeature的
RequestCultureFeature使用匹配区域性设置的第一个区域性提供程序。如果URL定义了一
个匹配区域性参数的查询字符串，就使用QueryStringRequestCultureProvider返回所请求的
区域性。如果URL不匹配，但收到名为ASPNET_CULTURE的cookie，就使用
CookieRequestCultureProvider，否则使用AcceptLanguage-RequestCultureProvider。使用返
回的RequestCulture的属性，把由此产生的、用户使用的区域性写入响应流。接着，使用
当前的区域性把当前的日期写入流。这里使用的IStringLocalizer类型的变量需要一些更多
的检查，如下：
    public void Configure(IApplicationBuilder app, IStringLocalizer sr
)
    {
      // etc.
      app.Run(async context =>
      {
        IRequestCultureFeature requestCultureFeature =
        context.GetFeature();
        RequestCulture requestCulture = requestCultureFeature.RequestCulture;
        var today = DateTime.Today;
        context.Response.StatusCode = 200;
        await context.Response.WriteAsync("Sample Localization");
        await context.Response.WriteAsync(
        $"{requestCulture.Culture} {requestCulture.UICulture}");
        await context.Response.WriteAsync($"{today:D}");
        // etc.
        await context.Response.WriteAsync($"{sr["message1"]
}");
        await context.Response.WriteAsync($"{sr.GetString("message1")}
");
        await context.Response.WriteAsync($"{sr.GetString("message2",
        requestCulture.Culture, requestCulture.UICulture)}");
      });
    }
28.5.4 在ASP.NET Core中使用资源
如“资源”一节所述，资源文件可以用于ASP.NET 
Core 
1.0。样例项目添加了文件
Startup.resx以及CustomResources文件夹。资源的本地化版本用Startup.de.resx和Startup.de-
AT.resx提供。
在注入本地化服务时，存储资源的文件夹名称用选项定义（代码文件
WebApplicationSample /Startup.cs）：
    public void ConfigureServices(IServiceCollection services)
    {
      services.AddLocalization(
        options => options.ResourcesPath = "CustomResources");
    }
在依赖注入中，IStringLocalizer 注入为Configure方法的一个参数。使用泛型
类型的Startup参数，在resources目录中找到一个具有相同名称的资源文件，它匹配
Startup.resx。
    public void Configure(IApplicationBuilder app, IStringLocalizer sr
)
    {
      // etc.
    }
下面的代码片段利用IStringLocalizer 
类型的变量sr，通过一个索引器和
GetString方法访问资源message1。资源message2使用字符串格式占位符，它用GetString方
法的一个重载版本注入，其中可以传递任何数量的参数：
    public void Configure(IApplicationBuilder app, IStringLocalizer sr
)
    {
      // etc.
      app.Run(async context =>
      {
        // etc.
        await context.Response.WriteAsync($"{sr["message1"]
}");
        await context.Response.WriteAsync($"{sr.GetString("message1")
}");
        await context.Response.WriteAsync($"{sr.GetString("message2",
        requestCulture.Culture, requestCulture.UICulture)
}");
      });
    }
    string localized1 = sr["message1"];
message2的资源用字符串格式占位符定义：
    Using culture {0} and UI culture {1}
运行Web应用程序，得到的视图如图28-8所示。
图28-8
28.6 本地化通用Windows平台
用Universal Windows Platform （UWP）进行本地化基于前面学习的概念，但带来了
一些新理念，如下所述。为了获得最佳的体验，需要通过Visual Studio Extensions and
Updates安装Multilingual App Toolkit。
区域性、区域和资源的概念是相同的，但因为Windows应用程序可以用C#和XAML、
C++和XAML、JavaScript和HTML来编写，所以这些概念必须可用于所有的语言。只有
Windows Runtime能用于所有这些编程语言和Windows应用程序。因此，用于全球化和资
源的新名称空间可通过Windows 
Runtime来使用：Windows.Globalization和
Windows.AppalicationModel.Resources。在全球化名称空间中包含Calendar、
GeographicRegion（对应于.NET的RegionInfo）和Language类。在其子名称空间中，还有
一些数字和日期格式化类随着语言的不同而改变。在C#和Windows应用程序中，仍可以使
用.NET类表示区域性和区域。
下面举一个例子，说明如何用Universal 
Windows应用程序进行本地化。使用Blank
App （Universal APP）Visual Studio项目模板创建一个小应用程序。在页面上添加两个
TextBlock和一个TextBox控件。
在代码文件的OnNavigatedTo（）方法中，可以把具有当前格式的日期赋予text1控件
的Text属性。DateTime结构可以用非常类似于本章前面控制台应用程序的方式使用（代码
文件UWPLocalization/MainPage.xaml.cs）：
    protected override void OnNavigatedTo(NavigationEventArgs e)
    {
      base.OnNavigatedTo(e);
      text1.Text = DateTime.Today.ToString("D");
      //...
    }
28.6.1 给UWP使用资源
图28-9
在UWP中，可以用文件扩展名resw替代resx，以创建
资源文件。在后台，resw文件使用相同的XML格式，可以
使用相同的Visual 
Studio资源编辑器创建和修改这些文
件。下例使用如图28-9所示的结构。子文件夹Message包
含一个子目录en-us，在其中创建了两个资源文件
Errors.resw和Messages.resw。在Strings\en-us文件夹中，创
建了资源文件Resources.resw。
Messages.resw文件包含一些英语文本资源，Hello的值
是Hello 
World，资源的名称是GoodDay、GoodEvening和
GoodMorning。文件Resources.resw包含资源Text3.Text和
Text3.Width，其值分别是“This is a sample message for Text4”和300。
在代码中，使用Windows.AppalicationModel.Resources名称空间中的ResourcesLoader
类可以访问资源。这里使用字符串“Messages”作为GetForCurrentView方法的参数。因此，
要使用资源文件Messages.resw。调用GetString方法，会检索键为“Hello”的资源（代码文
件UWPLocalization/ MainPage.xaml.cs）。
    protected override void OnNavigatedTo(NavigationEventArgs e)
    {
      // etc.
      var resourceLoader = ResourceLoader.GetForCurrentView("Messages");
      text2.Text = resourceLoader.GetString("Hello");
    }
在UWP 
Windows应用程序中，也可以直接在XAML代码中使用资源。对于下面的
TextBox，给x:Uid特性赋予值Text3。这样，就会在资源文件Resources.resw中搜索名为
Text3的资源。这个资源文件包含键Text3.Text和Text3.Width的值。检索这些值，并设置
Text和Width属性（代码文件UWPLocalization/MainPage.xaml）：
28.6.2 使用多语言应用程序工具集进行本地化
为了本地化UWP应用程序，可以下载前面提及的Multilingual App Toolkit。这个工具
包集成在Visual Studio 2015中。安装了该工具包后，就可以通过Tools | Enable Multilingual
Toolkit，为UWP应用程序启用它。这会在项目文件中添加一个生成命令，在Solution
Explorer的上下文菜单中添加一个菜单项。打开该上下文菜单，选择Multilingual 
App
Toolkit | Add Translation Languages，打开如图28-10所示的对话框，在其中可以选择要翻
译为哪种语言。该示例选择Pseudo 
Language、French、German和Spanish。对于这些语
言，可以使用Microsoft Translator。这个工具现在创建一个MultilingualResources子目录，
其中包含所选语言的.xlf文件。.xlf文件用XLIFF（XML 
LocalisationInterchange 
File
Format）标准定义，这是Open Architecture for XML Authoring and Localization（OAXAL）
参考架构的一个标准。
图28-10
  注意： Multilingual App Toolkit也可以在http://aka.ms/ matinstallv4上安装，无
须使用Visual Studio。下载Multilingual App Toolkit。
下次启动项目的生成过程时，XLIFF文件就会从所有资源中填充相应的内容。在
Solution 
Explorer中选择XLIFF文件，就可以把它们直接发送给翻译过程。为此，在
Solution Explorer中打开上下文菜单，选择.xlf文件，选择Multilingual App Toolkit | Export
translations. . .，打开如图28-11所示的对话框，在其中可以配置应发送的信息，也可以发
送电子邮件，添加XLIFF文件作为附件。
图28-11
对于翻译，还可以使用微软的翻译服务。在Visual Studio Solution Explorer中选择.xlf
文件，打开上下文菜单后，选择Multilingual App Toolkit | Generate Machine Translations。
打开.xlf文件时，会打开Multilingual Editor （参见图28-12）。有了这个工具，就可以
验证自动翻译，并进行必要的修改。
图28-12
没有人工检查，就不要使用机器翻译。该工具会为每个已翻译的资源显示状态。自动
翻译完成后，状态设置为Needs Review。自动翻译的结果可能不正确，有时还很可笑。
28.7 创建自定义区域性
随着时间的推移，.NET 
Framework支持的语言越来越多。但并不是所有语言都可用
于.NET。对于不可用于.NET的语言，可以创建自定义区域性。例如，为了给一个区域的
少数民族创建自定义区域性，或者给不同的方言创建子区域性，创建自定义区域性就很有
用。
自定义区域性和区域可以用System.Globalization名称空间中的
CultureAndRegionInfoBuilder类创建，这个类位于sysglobl程序集中。
在CultureAndRegionInfoBuilder类的构造函数中，可以传递区域性名。该构造函数的
第二个参数需要CultureAndRegionModifiers类型的一个枚举。这个枚举有3个值：Neutral
表示中立区域性；如果应替换已有的Framework区域性，就使用值Replacement；第3个值
是None。
在实例化CultureAndRegionInfoBuilder对象后，就可以设置属性来配置区域性。使用
这个类的一些属性，可以定义所有的区域性和区域信息，如名称、日历、数字格式、米制
信息等。如果区域性应基于已有的区域性和区域，就可以使用
LoadDataFromCultureInfo（）和LoadDataFromRegionInfo（）方法设置实例的属性，之后
通过设置属性来修改不同的值。
调用Register（）方法，给操作系统注册新区域性。描述区域性的文件位于
\Globalization目录中，其扩展名是.nlp（代码文件
CustomCultures/Program.cs）。
      using System;
      using System.Globalization;
      using static System.Console;
      namespace CustomCultures
      {
      class Program
      {
        static void Main()
        {
          try
          {
            // Create a Styria culture
            var styria = new CultureAndRegionInfoBuilder("de-AT-ST",
            CultureAndRegionModifiers.None);
            var cultureParent = new CultureInfo("de-AT");
            styria.LoadDataFromCultureInfo(cultureParent);
            styria.LoadDataFromRegionInfo(new RegionInfo("AT"));
            styria.Parent = cultureParent;
            styria.RegionNativeName = "Steiermark";
            styria.RegionEnglishName = "Styria";
            styria.CultureEnglishName = "Styria (Austria)";
            styria.CultureNativeName = "Steirisch";
            styria.Register();
          }
          catch (UnauthorizedAccessException ex)
          {
            WriteLine(ex.Message);
          }
        }
      }
      }
因为在系统上注册自定义语言需要管理员权限，所以使用控制台应用程序项目模板创
建示例应用程序，再添加应用程序清单文件。这个清单文件指定了请求的执行权限。在项
目属性中，清单文件必须在Application设置中设置：