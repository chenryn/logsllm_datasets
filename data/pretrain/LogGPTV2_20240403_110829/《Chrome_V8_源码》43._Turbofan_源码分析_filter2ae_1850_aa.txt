# 《Chrome V8 源码》43. Turbofan 源码分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1 介绍
接上一篇文章继续说，本文讲解 Turbofan 的工作流程、梳理 PrepareJob、ExecuteJob 和 FinalizeJob
的主要功能以及重要数据结构。
## 2 Turbofan 工作流程
前文提到，Turbofan 分为 NotConcurrent 和 Concurrent 两种工作方式，它们的区别是 NotConcurrent
立即启动优化工作，而 Concurrent 把工作放进同步分发队列。  
Concurrent 方式由 GetOptimizedCodeLater() 函数负责，其源码如下：
    1.  bool GetOptimizedCodeLater(OptimizedCompilationJob* job, Isolate* isolate) {
    2.    OptimizedCompilationInfo* compilation_info = job->compilation_info();
    3.    if (!isolate->optimizing_compile_dispatcher()->IsQueueAvailable()) {
    4.      if (FLAG_trace_concurrent_recompilation) {
    5.  //省略................
    6.      }
    7.      return false;
    8.    }
    9.    if (isolate->heap()->HighMemoryPressure()) {
    10.      if (FLAG_trace_concurrent_recompilation) {
    11.  //省略................
    12.      }
    13.      return false;
    14.    }
    15.    TimerEventScope timer(isolate);
    16.    RuntimeCallTimerScope runtimeTimer(
    17.        isolate, RuntimeCallCounterId::kOptimizeConcurrentPrepare);
    18.    TRACE_EVENT0(TRACE_DISABLED_BY_DEFAULT("v8.compile"),
    19.                 "V8.OptimizeConcurrentPrepare");
    20.    if (job->PrepareJob(isolate) != CompilationJob::SUCCEEDED) return false;
    21.    isolate->optimizing_compile_dispatcher()->QueueForOptimization(job);
    22.    if (FLAG_trace_concurrent_recompilation) {
    23.      PrintF("  ** Queued ");
    24.      compilation_info->closure()->ShortPrint();
    25.      PrintF(" for concurrent optimization.\n");
    26.    }
    27.    return true;
    28.  }
上述代码中，第 4-14 行检测工作队列和内存是否满足要求，不满足则停止优化编译。停止优化编译不影响当前 JavaScript 程序的运行，因为
JavaScript 程序正在被解释执行。  
第 15-20 行统计 V8 运行信息，与优化编译的功能无关；  
第 21 行把优化编译工作 job 添加到工作队列中，并返回结果 true。  
NotConcurrent 方式由 GetOptimizedCodeNow() 函数负责，其源码如下：
    1.  bool GetOptimizedCodeNow(OptimizedCompilationJob* job, Isolate* isolate) {
    2.    TimerEventScope timer(isolate);
    3.    RuntimeCallTimerScope runtimeTimer(
    4.        isolate, RuntimeCallCounterId::kOptimizeNonConcurrent);
    5.    OptimizedCompilationInfo* compilation_info = job->compilation_info();
    6.    TRACE_EVENT0(TRACE_DISABLED_BY_DEFAULT("v8.compile"),
    7.                 "V8.OptimizeNonConcurrent");
    8.    if (job->PrepareJob(isolate) != CompilationJob::SUCCEEDED ||
    9.        job->ExecuteJob(isolate->counters()->runtime_call_stats()) !=
    10.            CompilationJob::SUCCEEDED ||
    11.        job->FinalizeJob(isolate) != CompilationJob::SUCCEEDED) {
    12.      if (FLAG_trace_opt) {
    13.        CodeTracer::Scope scope(isolate->GetCodeTracer());
    14.        PrintF(scope.file(), "[aborted optimizing ");
    15.        compilation_info->closure()->ShortPrint(scope.file());
    16.        PrintF(scope.file(), " because: %s]\n",
    17.               GetBailoutReason(compilation_info->bailout_reason()));
    18.      }
    19.      return false;
    20.    }
    21.    // Success!
    22.    job->RecordCompilationStats(OptimizedCompilationJob::kSynchronous, isolate);
    23.    DCHECK(!isolate->has_pending_exception());
    24.    InsertCodeIntoOptimizedCodeCache(compilation_info);
    25.    job->RecordFunctionCompilation(CodeEventListener::LAZY_COMPILE_TAG, isolate);
    26.    return true;
    27.  }
上述代码中， 第 2-7 行统计 V8 运行信息，与优化编译的功能无关；  
第 8-9 行完成优化编译的所有工作，这些工作由 PrepareJob、ExecuteJob 以及 FinalizeJob 三个函数负责；  
第 10-25 行更新编译状态等信息并返回 true。 优化编译同步进行，也就意味着暂停解释执行并等待优化编译的结果。
## 3 准备 PrepareJob
源码如下：
    1.  CompilationJob::Status OptimizedCompilationJob::PrepareJob(Isolate* isolate) {
    2.    DCHECK_EQ(ThreadId::Current(), isolate->thread_id());
    3.    DisallowJavascriptExecution no_js(isolate);
    4.    if (FLAG_trace_opt && compilation_info()->IsOptimizing()) {
    5.  //省略..............
    6.    }
    7.    // Delegate to the underlying implementation.
    8.    DCHECK_EQ(state(), State::kReadyToPrepare);
    9.    ScopedTimer t(&time_taken_to_prepare_);
    10.    return UpdateState(PrepareJobImpl(isolate), State::kReadyToExecute);
    11.  }
上述代码中，第 2-3 行做状态检测、第 4-6 行设置打印出输信息；第 10 行 UpdateState 更新状态信息，PrepareJobImpl
完成初始化工作，其源码如下：
    1.  PipelineCompilationJob::Status PipelineCompilationJob::PrepareJobImpl(
    2.      Isolate* isolate) {
    3.    PipelineJobScope scope(&data_, isolate->counters()->runtime_call_stats());
    4.    if (compilation_info()->bytecode_array()->length() >
    5.        FLAG_max_optimized_bytecode_size) {
    6.      return AbortOptimization(BailoutReason::kFunctionTooBig);
    7.    }
    8.    if (!FLAG_always_opt) {
    9.      compilation_info()->MarkAsBailoutOnUninitialized();
    10.    }
    11.    if (FLAG_turbo_loop_peeling) {
    12.      compilation_info()->MarkAsLoopPeelingEnabled();
    13.    }
    14.    if (FLAG_turbo_inlining) {
    15.      compilation_info()->MarkAsInliningEnabled();
    16.    }
    17.    PoisoningMitigationLevel load_poisoning =
    18.        PoisoningMitigationLevel::kDontPoison;
    19.    if (FLAG_untrusted_code_mitigations) {
    20.      load_poisoning = PoisoningMitigationLevel::kPoisonCriticalOnly;
    21.    }
    22.    compilation_info()->SetPoisoningMitigationLevel(load_poisoning);
    23.    if (FLAG_turbo_allocation_folding) {
    24.      compilation_info()->MarkAsAllocationFoldingEnabled();
    25.    }
    26.    if (compilation_info()->closure()->raw_feedback_cell().map() ==
    27.            ReadOnlyRoots(isolate).one_closure_cell_map() &&
    28.        !compilation_info()->is_osr()) {
    29.      compilation_info()->MarkAsFunctionContextSpecializing();
    30.      data_.ChooseSpecializationContext();
    31.    }
    32.    if (compilation_info()->is_source_positions_enabled()) {
    33.      SharedFunctionInfo::EnsureSourcePositionsAvailable(
    34.          isolate, compilation_info()->shared_info());
    35.    }
    36.    data_.set_start_source_position(
    37.        compilation_info()->shared_info()->StartPosition());
    38.    linkage_ = new (compilation_info()->zone()) Linkage(
    39.        Linkage::ComputeIncoming(compilation_info()->zone(), compilation_info()));
    40.    if (compilation_info()->is_osr()) data_.InitializeOsrHelper();
    41.    Deoptimizer::EnsureCodeForDeoptimizationEntries(isolate);