gorithm chooses bilinear groups (G, GT ) of order p >
2λ, generators g, h R← G and a random (n + 1)-vector
, u1, . . . , un) R← Gn+1. The latter deﬁnes a
(cid:2)
u = (u
function F : {0, 1}n → G mapping n-bit strings m =
m1 . . . mn (where mi ∈ {0, 1} for all i ∈ {0, 1}) onto
(cid:2) · (cid:6)
F (m) = u
. The public parameters are
n
i
i=1 umi
cp := {G, GT , g, h, u}.
Keygen(λ): user i sets his public key as Xi = gxi for a
random xi
R← Z
∗
p.
ReKeygen(xj , Xi): given user j’s private key xj and user i’s
public key Xi, generate the unidirectional re-signature
1/xj
= gxi/xj that will be used to trans-
key Rij = X
i
late signature from i into signatures from j.
Sign(1, m, xi): to sign a message m = m1 . . . mn ∈ {0, 1}n
at level 1, pick r R← Z
∗
p at random and compute
(1)
σ
= (σ0, σ1) = (hxi · F (m)r, gr)
Sign(2, m, xi): to generate a second level signature on m =
m1 . . . mn ∈ {0, 1}n, choose r, t R← Z
∗
p and compute
σ
(2)
i , gt)
= (σ0, σ1, σ2, σ3) = (htxi · F (m)r, gr, X t
(3)
Re-Sign(1, m, σ(1), Rij , Xi, Xj ): on input of a message m ∈
{0, 1}n, the re-signature key Rij = gxi/xj , a signature
σ(1) = (σ0, σ1) and public keys Xi, Xj , check the va-
lidity of σ(1) w.r.t signer i by testing if
e(σ0, g) = e(Xi, h) · e(F (m), σ1)
(4)
If σ(1) is a valid, it can be turned into a signature on
behalf of j by choosing r
∗
p and computing
, t R← Z
(cid:2)
1 · gr
(cid:2)
, X t
i , Rt
ij )
(2)
σ
(cid:2)
1, σ
(cid:2)
0, σ
(cid:2)
(cid:2)
3) = (σt
= (σ
2, σ
= (htxi · F (m)r
(cid:2)(cid:2)
(cid:2)(cid:2)
, gr
(cid:2)(cid:2)
(cid:2)
(cid:2)
0 · F (m)r
, σt
, X t
i , gtxi/xj )
where r
(2)
σ
= (σ
= tr + r
(cid:2)
(cid:2)
0, σ
2, σ
(cid:2)
1, σ
. If we set ˜t = txi/xj , we have
(cid:2)
3) = (h
˜txj · F (m)r
, gr
, X
˜t
j , g
(cid:2)(cid:2)
(cid:2)(cid:2)
˜t). (5)
Verify(1, m, σ(1), Xi): the validity of a 1st level signature
σ(1) = (σ1, σ2) is checked by testing if (4) holds.
5.3 Security
Verify(2, m, σ(2), Xi): a signature σ(2) = (σ0, σ1, σ2, σ3) at
level 2 is accepted for the public key Xi if the following
conditions are true.
e(σ0, g) = e(σ2, h) · e(F (m), σ
e(σ2, g) = e(Xi, σ3).
(cid:2)
1)
(6)
(7)
To the best of our knowledge, the above scheme is the ﬁrst
unidirectional PRS in the standard model and solves another
problem left open in [5] where all constructions require the
random oracle model. Like the scheme of section 4, it can
be scaled into a multi-hop system.
5.2 The Multi-Hop Extension
At levels (cid:2) ≥ 2, algorithms Sign, Re-Sign and Verify are
generalized as follows.
Sign((cid:2) + 1, m, xi): to sign m ∈ {0, 1}n at level (cid:2) + 1, user i
∗
p)(cid:3) and outputs σ((cid:3)+1) =
p, (t1, . . . , t(cid:3)) R← (Z
∗
2(cid:3)+2 where
picks r R← Z
(σ0, . . . , σ2(cid:3)+1) ∈ G
⎧⎪⎪⎨
⎪⎪⎩
σ0 = hxit1···t(cid:3) · F (m)r
σ1 = gr
σk = gxit1···t(cid:3)+2−k
σk = gtk−(cid:3)−1
for k ∈ {2, . . . , (cid:2) + 1}
for k ∈ {(cid:2) + 2, . . . , 2(cid:2) + 1}.
Re-Sign((cid:2) + 1, m, σ((cid:3)+1), Rij , Xi, Xj ): on input of a message
, the re-signature key Rij = gxi/xj , a pur-
m ∈ {0, 1}∗
ported ((cid:2) + 1)th-level signature
((cid:3)+1)
σ
= (σ0, . . . , σ2(cid:3)+1)
= (hxit1···t(cid:3) · F (m)r, gr, gxit1···t(cid:3) , gxit1···t(cid:3)−1 ,
. . . , gxit1 , gt1 ,··· , gt(cid:3) ) ∈ G
2(cid:3)+2
and public keys Xi, Xj , check the correctness of σ((cid:3)+1)
under Xi. If valid, σ((cid:3)+1) is translated for Xj by sam-
∗
p)(cid:3)+1 and setting
pling r
σ((cid:3)+2) = (σ
p, (r0, r1, . . . , r(cid:3)) R← (Z
∗
(cid:2) R← Z
(cid:2)
0, . . . , σ
2(cid:3)+4 where
2(cid:3)+3) ∈ G
(cid:2)
⎧⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎩
· F (m)r
· gr
(cid:2)
r0···r(cid:3)+2−k
0
0 = σr0···r(cid:3)
(cid:2)
1 = σr0···r(cid:3)
(cid:2)
1
(cid:2)
k = σ
(cid:2)
(cid:3)+2 = X r0
(cid:2)
(cid:3)+3 = Rr0
(cid:2)
ij
k = σrk−(cid:3)−3
k−2
k
i
σ
σ
σ
σ
σ
σ
(cid:2)
for k ∈ {2, . . . , (cid:2) + 1}
for k ∈ {(cid:2) + 4, . . . , 2(cid:2) + 3}.
(cid:2)(cid:2)
and ˜tk =
= r0 ··· r(cid:3) + r
(cid:2)
If we deﬁne ˜t0 = r0xi/xj, r
rktk for k = 1, . . . , (cid:2), we observe that
(cid:2)(cid:2)
(cid:2)(cid:2)
((cid:3)+2)
σ
= (hxj
˜t0 ˜t1···˜t(cid:3) · F (m)r
gxj
, gr
˜t0 ˜t1···˜t(cid:3)−1 , . . . , gxj
˜t0 ˜t1···˜t(cid:3) ,
˜t0 , . . . , g
, gxj
˜t0 , g
˜t(cid:3) ).
Verify((cid:2) + 1, m, σ((cid:3)+1), Xi): a candidate signature σ((cid:3)+1) =
(σ0, . . . , σ2(cid:3)+1) is veriﬁed by testing if the following
equalities hold:
e(σ0, g) = e(h, σ3) · e(F (m), σ1)
e(σk, g) = e(σk+1, σ2(cid:3)+3−k) for k ∈ {2, . . . , (cid:2)}
e(σ(cid:3)+1, g) = e(Xi, σ(cid:3)+2).
Theorem 5.1. The scheme with L levels (and thus at
most L − 1 hops) is a secure unidirectional PRS under the
(L − 1)-FlexDH and mCDH assumptions.
Proof. The proof is very similar to the one of theorem
4.1 and is detailed in the full version of the paper [24].
6. SINGLE-HOP SCHEMES IN THE CHO-
SEN KEY MODEL
This section shows a simple way to modify the single-hop
versions of our schemes so as to prove their security in the
plain public key model and dispense with the knowledge of
secret key assumption. We outline the required modiﬁca-
tions in our ﬁrst scheme but they can be applied to our
standard model system as well.
The idea is to randomize the generation of re-signature
keys, the shape of which becomes reminiscent of Waters sig-
natures. Using techniques that were initially proposed for
identity-based encryption [12], we can then prove security
results without positioning ourselves in the KOSK model.
Global-setup(λ): is as in section 4.
Keygen(λ): user i’s public key is pki = (Xi = gxi, Yi = gyi )
for random xi, yi
R← Z
∗
p.
ReKeygen(xj , yj, pki): given xj, yj and pki = (Xi, Yi), this
algorithm outputs the re-signature key
· Y r
1/xj
Rij = (Rij1, Rij2) = (X
i
j , X r
j )
for a random r R← Z
∗
p and where (Xj , Yj) = (gxj , gyj ).
Sign(1, xi, m): outputs σ(1) = H(m)xi ∈ G as in section 4.
Sign(2, xi, m): to sign m ∈ {0, 1}∗
at level 2, user i chooses
s, t R← Z
∗
p and computes
(2)
σ
= (σ0, σ1, σ2, σ3)
= (H(m)xit, X t
i , gt · Y s
i , X s
i ).
(8)
(9)
Re-Sign(1, m, σ(1), Rij , pki, pkj): given the re-signature key
Rij = (Rij1, Rij2), a signature σ(1) ∈ G and pub-
lic keys pki = (Xi, Yi), pkj = (Xj , Yj), check the
validity of σ(1) w.r.t signer i by testing e(σ(1), g) =
e(H(m), Xi). If valid, σ(1) is turned into a signature
∗
on behalf of j by choosing s
p and computing
, t R← Z
(cid:2)
(2)
σ
= (σ
(cid:2)
0, σ
(1)t
(cid:2)
1, σ
, X t
(cid:2)
(cid:2)
2, σ
3)
i , Rt
= (σ
= (H(m)xit, X t
(cid:2)
j , Rt
ij1 · Y s
ij2 · X s
(cid:2)
j )
i , gtxi/xj · Y rt+s
(cid:2)
, X rt+s
(cid:2)
j
j
)
(cid:2)
If we set ˜t = txi/xj and ˜s = rt + s
˜t · Y
= (H(m)xj
˜t, X
˜t
j , g
(2)
σ
, we have
˜s