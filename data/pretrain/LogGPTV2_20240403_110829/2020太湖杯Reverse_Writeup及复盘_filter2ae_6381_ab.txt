          puts("Boom!!!");
          return 0;
        }
      }
      return 1;
    }
可以看到是通过wasd来操作的，起始位置在E处，但并不是输入wasd，而且输入通过xor得到wasd来操作，问题不大，我们得到操作xor回去就可以。
    >>> key = 'aaassssddd'
    >>> cip2 = [0x53,0x3e,0x20,0x41,0x1e,0x2c,0x24,0xb,0x36,0x28,0x37,0x52,0xe]
    >>> for j in range(len(key)):
    ...     flag += chr(ord(key[j])^cip2[j])
    ...
    >>> flag
    'flag{welcome_2_A2m_WoRL'
但这里很明显长度不够也不知道还要往哪继续走了，没有继续的动态确定，懒。通过flag意思也可以猜到后两位是`D}`。  
这题有想吐槽的点，总结时候说。
## 0x02 climb
> 知识点：调试dmp，Hook，DLL隐藏调用，动态规划算法
这题我感觉是三个re题目中最好的一个题目，也学习到了很多东西吧。
首先题目没有给出二进制可执行文件，只给了一个崩溃dmp文件和pdb符号文件。这时候就可以想到windbg是可以调试dmp的，而且pdb也可以进行辅助调试。直接上windbg，自动分析一下，会跳到最后的状态。查看一下调用堆栈。
可以看到main函数，直接跳到main函数审汇编代码。大概流程就是会加载资源，获取资源的大小之类的。之后值得注意的一部分代码是这个部分。
`Detours`是微软的一个库，用来做hook使用，那么这里就是hook了某个API。接着看就可以看到是用`NewLockResource`去代替了`LockResource`函数，之后调用了`LockResource`函数。切换到`NewLockResource`函数。
进入NewLockResource函数的第一时间就调用了原生的LockResource函数，继续向下看。
在这个地方可以看到一个循环异或0x76的操作，函数也结束了。
之后回到main函数，逻辑就是卸载hook，调用LoadRemoteLibraryR函数。
当时没有去注意LoadRemoteLibraryR函数，其实到这个部分已经不知道要干什么了，因为到现在，虽然大致逻辑都理清楚了，都没有发现一点儿和flag有关的痕迹。只有一个异或0x76的信息，怀疑会不会flag就在文件中，直接异或0x76之后就显示出来。将flag的ASCII码与`0x76`异或，得到`101a1711`。在文件中查找这串十六进制。
可以在0x17698B偏移处找到，将后边这一些复制出来解码，发现是flag{%s}。
而周围都是0x76，猜想会不会这是一个PE文件。如果是PE文件的话，得有Magic，也就是0x4d5a。但为了防止数据太短，造成其他数据带来的混淆，决定使用`This
program cannot be run in DOS mode`，编码之后为
`221e1f05560604191104171b5615171818190256141356040318561f1856323925561b191213`。这样就可以找到PE文件的头偏移为`0x1739F6`，一直向下，碰到xml的部分就是尾。
提取出来进行解码得到PE文件，加载到IDA中，看到DLLMain发现是一个DLL。就知道了源程序的流程是解密了资源段成为dll，并调用了这个DLL。和当年的`WannaCry`一个手法。
    BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
    {
      __int64 v3; // r15
      int *v4; // rsi
      __int64 v5; // rdi
      int *v6; // rbx
      __int64 v7; // rbp
      if ( fdwReason == 1 )
      {
        v4 = &dword_1800059AC;
        v5 = 1i64;
        do
        {
          if ( v5 >= 1 )
          {
            v6 = v4;
            v7 = v5;
            do
            {
              ++v6;
              *(v6 - 1) = rand() % 0xFFF;
              --v7;
            }
            while ( v7 );
          }
          ++v5;
          v4 += 0xC2;
        }
        while ( v4 
    #include
    int data[193][193];
    int dp[193][193];
    char f[193];
    int main() {
        int i, j, k;
        for (i = 0; i = 0; i--) {
            for (int j = 0; j  (dp[i + 1][j + 1] + data[i][j]) ? (dp[i + 1][j] + data[i][j]) : (dp[i + 1][j + 1] + data[i][j]);
            }
        }
        printf("%d\n", dp[0][0]);
        int tmp_j = 0;
        for (int i = 1; i  dp[i][tmp_j]) {
                f[i - 1] = '1';
                tmp_j = tmp_j + 1;
            }
            else {
                f[i - 1] = '0';
            }
        }
        for (int i = 0; i < 192; i++) {
            printf("%c", f[i]);
        }
        printf("\n");
        system("pause");
        return 0;
    }
最终得到的路径是000100001000010100100100001000000000000100011001110111111110100010000100000001111110100111000000101110100111110010011101011111111110100010000100100111111101000010000111111111001100000011011101。输入就可以拿到flag。
## 总结
re整体质量还挺不错的，感觉花时间去复盘也值了。唯一吐槽的一点就是arm，那部分脏数据不知道是什么，如果是花指令，那么感觉毫无意义。花指令本身是为了不影响程序运行的本身去对抗静态分析，现在加了这条指令都不能运行了，感觉有一种强行加知识点的感觉。当然，这只是我个人的想法，也可能我是自己本地环境不能去解析这一条指令，也可能题目作者的本意就不是加花指令。climb学到的东西还是挺多的，尤其是算法，还是得补充算法相关的知识啊。而easyapp就是一个比较基础的题目，动态调试一下就行。最后感谢Venom的师傅们的帮助。