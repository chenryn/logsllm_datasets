# 命令执行底层原理探究-PHP（三）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
针对不同平台/语言下的命令执行是不相同的，存在很大的差异性。因此，这里对不同平台/语言下的命令执行函数进行深入的探究分析。
文章开头会对不同平台(Linux、Windows)下：终端的指令执行、语言(PHP、Java、Python)的命令执行进行介绍分析。后面，主要以PHP语言为对象，针对不同平台，对命令执行函数进行底层深入分析，这个过程包括：环境准备、PHP内核源码的编译、运行、调试、审计等，其它语言分析原理思路类似。
该系列分析文章主要分为四部分，如下：
  * 第一部分：命令执行底层原理探究-PHP (一)
针对不同平台(Linux、Windows)下：终端的指令执行、语言(PHP、Java、Python)的命令执行进行介绍分析。
  * 第二部分：命令执行底层原理探究-PHP (二)
主要以PHP语言为对象，针对不同平台，进行环境准备、PHP内核源码的编译、运行、调试等。
  * 第三部分：命令执行底层原理探究-PHP (三)
针对Windows平台下，PHP命令执行函数的底层原理分析。
  * 第四部分：命令执行底层原理探究-PHP (四)
针对Linux平台下，PHP命令执行函数的底层原理分析。
本文 **《 命令执行底层原理探究-PHP (三) 》** 主要讲述的是第三部分：针对Windows平台下，PHP命令执行函数的底层原理分析。
## PHP for Windows
针对Windows平台下：PHP命令执行函数的底层分析。
###  命令执行底层分析
针对命令执行函数的底层分析，这里主要采用两种手段去分析：静态审计(静态审计内核源码)、动态审计(动态调试内核源码)。
####  静态审计
PHP命令执行函数有很多
    system
    exec
    passthru
    shell_exec
    proc_open
    popen
    pcntl_exec
    escapeshellarg
    escapeshellcmd                                              
    、、、、
大部分命令执行函数于`ext/standard/exec.c`源码中实现
    /* {{{ proto string exec(string command [, array &output [, int &return_value]])
       Execute an external program */
    PHP_FUNCTION(exec)
    {
        php_exec_ex(INTERNAL_FUNCTION_PARAM_PASSTHRU, 0);
    }
    /* }}} */
    /* {{{ proto int system(string command [, int &return_value])
       Execute an external program and display output */
    PHP_FUNCTION(system)
    {
        php_exec_ex(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);
    }
    /* }}} */
    /* {{{ proto void passthru(string command [, int &return_value])
       Execute an external program and display raw output */
    PHP_FUNCTION(passthru)
    {
        php_exec_ex(INTERNAL_FUNCTION_PARAM_PASSTHRU, 3);
    }
    /* }}} */
    /* {{{ proto string shell_exec(string cmd)
       Execute command via shell and return complete output as string */
    PHP_FUNCTION(shell_exec)
    {
        FILE *in;
        char *command;
        size_t command_len;
        zend_string *ret;
        php_stream *stream;
        ZEND_PARSE_PARAMETERS_START(1, 1)
            Z_PARAM_STRING(command, command_len)
        ZEND_PARSE_PARAMETERS_END();
    #ifdef PHP_WIN32
        if ((in=VCWD_POPEN(command, "rt"))==NULL) {
    #else
        if ((in=VCWD_POPEN(command, "r"))==NULL) {
    #endif
            php_error_docref(NULL, E_WARNING, "Unable to execute '%s'", command);
            RETURN_FALSE;
        }
        stream = php_stream_fopen_from_pipe(in, "rb");
        ret = php_stream_copy_to_mem(stream, PHP_STREAM_COPY_ALL, 0);
        php_stream_close(stream);
        if (ret && ZSTR_LEN(ret) > 0) {
            RETVAL_STR(ret);
        }
    }
    /* }}} */
观察上面代码部分，可以发现`system、exec、passthru`这三个命令执行函数调用函数一样，皆为`php_exec_ex()`函数，不同点只在于调用函数的第二个参数`mode`不同`0、1、3`作为标识。而`shell_exec`函数则是调用`VCWD_POPEN()`函数去实现。
下面以`system()`命令执行函数执行`whoami`指令为例：
    system('whoami');
借助源码审查工具`Source Insight`【导入`php7.2.9`源码项目】进行底层函数跟踪分析
首先找到php中system()函数声明处：`ext\standard\exec.c:263`
    PHP_FUNCTION(system)
    {
        php_exec_ex(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);
    }
很明显system函数由`php_exec_ex()`函数实现，跟进同文件下找到`php_exec_ex()`函数实现【 **在`Source
Insight`下面可以使用Ctrl+鼠标左键点击定位函数位置**】：`ext\standard\exec.c:209`
    static void php_exec_ex(INTERNAL_FUNCTION_PARAMETERS, int mode) /* {{{ */
    {
        char *cmd;
        size_t cmd_len;
        zval *ret_code=NULL, *ret_array=NULL;
        int ret;
        ZEND_PARSE_PARAMETERS_START(1, (mode ? 2 : 3))
            Z_PARAM_STRING(cmd, cmd_len)
            Z_PARAM_OPTIONAL
            if (!mode) {
                Z_PARAM_ZVAL_DEREF(ret_array)
            }
            Z_PARAM_ZVAL_DEREF(ret_code)
        ZEND_PARSE_PARAMETERS_END_EX(RETURN_FALSE);
        if (!cmd_len) {
            php_error_docref(NULL, E_WARNING, "Cannot execute a blank command");
            RETURN_FALSE;
        }
        if (strlen(cmd) != cmd_len) {
            php_error_docref(NULL, E_WARNING, "NULL byte detected. Possible attack");
            RETURN_FALSE;
        }
        if (!ret_array) {
            ret = php_exec(mode, cmd, NULL, return_value);
        } else {
            if (Z_TYPE_P(ret_array) != IS_ARRAY) {
                zval_ptr_dtor(ret_array);
                array_init(ret_array);
            } else if (Z_REFCOUNT_P(ret_array) > 1) {
                zval_ptr_dtor(ret_array);
                ZVAL_ARR(ret_array, zend_array_dup(Z_ARR_P(ret_array)));
            }
            ret = php_exec(2, cmd, ret_array, return_value);
        }
        if (ret_code) {
            zval_ptr_dtor(ret_code);
            ZVAL_LONG(ret_code, ret);
        }
    }
    /* }}} */
阅读`php_exec_ex()`函数实现，会对cmd参数进行初始化处理，然后调用`php_exec(mode, cmd, NULL,
return_value)`函数，mode为不同执行函数标识、cmd为指令参数。
跟踪`php_exec()`函数调用：`ext\standard\exec.c:97`
    /* {{{ php_exec
     * If type==0, only last line of output is returned (exec)
     * If type==1, all lines will be printed and last lined returned (system)
     * If type==2, all lines will be saved to given array (exec with &$array)
     * If type==3, output will be printed binary, no lines will be saved or returned (passthru)
     *
     */
    PHPAPI int php_exec(int type, char *cmd, zval *array, zval *return_value)
    {
        FILE *fp;
        char *buf;
        size_t l = 0;
        int pclose_return;
        char *b, *d=NULL;
        php_stream *stream;
        size_t buflen, bufl = 0;
    #if PHP_SIGCHILD
        void (*sig_handler)() = NULL;
    #endif
    #if PHP_SIGCHILD
        sig_handler = signal (SIGCHLD, SIG_DFL);
    #endif
    #ifdef PHP_WIN32
        fp = VCWD_POPEN(cmd, "rb");
    #else
        fp = VCWD_POPEN(cmd, "r");
    #endif
        if (!fp) {
            php_error_docref(NULL, E_WARNING, "Unable to fork [%s]", cmd);
            goto err;
        }
        stream = php_stream_fopen_from_pipe(fp, "rb");
        buf = (char *) emalloc(EXEC_INPUT_BUF);
        buflen = EXEC_INPUT_BUF;
        if (type != 3) {
            b = buf;
            while (php_stream_get_line(stream, b, EXEC_INPUT_BUF, &bufl)) {
                /* no new line found, let's read some more */
                if (b[bufl - 1] != '\n' && !php_stream_eof(stream)) {
                    if (buflen  0 && isspace(((unsigned char *)buf)[l]));
                    if (l != (bufl - 1)) {
                        bufl = l + 1;
                        buf[bufl] = '\0';
                    }
                    add_next_index_stringl(array, buf, bufl);
                }
                b = buf;
            }
            if (bufl) {
                /* strip trailing whitespaces if we have not done so already */
                if ((type == 2 && buf != b) || type != 2) {
                    l = bufl;
                    while (l-- > 0 && isspace(((unsigned char *)buf)[l]));
                    if (l != (bufl - 1)) {
                        bufl = l + 1;
                        buf[bufl] = '\0';
                    }
                    if (type == 2) {
                        add_next_index_stringl(array, buf, bufl);
                    }
                }
                /* Return last line from the shell command */
                RETVAL_STRINGL(buf, bufl);
            } else { /* should return NULL, but for BC we return "" */
                RETVAL_EMPTY_STRING();
            }
        } else {
            while((bufl = php_stream_read(stream, buf, EXEC_INPUT_BUF)) > 0) {
                PHPWRITE(buf, bufl);
            }
        }
        pclose_return = php_stream_close(stream);
        efree(buf);
    done:
    #if PHP_SIGCHILD
        if (sig_handler) {
            signal(SIGCHLD, sig_handler);
        }
    #endif
        if (d) {
            efree(d);
        }
        return pclose_return;
    err:
        pclose_return = -1;
        goto done;
    }
    /* }}} */
审计`int php_exec(int type, char *cmd, zval *array, zval
*return_value)`函数代码，发现函数内部会首先调用`VCWD_POPEN()`函数去处理`cmd`指令【
**在这里不难发现该部分函数`VCWD_POPEN()`调用同`shell_exec()`可执行函数实现原理相同，也就说明`system、exec、passthru、shell_exec`这类命令执行函数原理相同，底层都调用了相同函数`VCWD_POPEN()`去执行系统指令**】。
这里的`VCWD_POPEN()`函数调用会通过相应的平台去执行：PHP_WIN32为Windows平台、另一个为`Unix`平台
    #ifdef PHP_WIN32
        fp = VCWD_POPEN(cmd, "rb");
    #else
        fp = VCWD_POPEN(cmd, "r");
    #endif
进入`VCWD_POPEN(cmd, "rb")`函数： `Zend\zend_virtual_cwd.h:269`
    #define VCWD_POPEN(command, type) virtual_popen(command, type)
由于`VCWD_POPEN`函数为`virtual_popen`实现，直接进入`virtual_popen()`函数实现：`Zend\zend_virtual_cwd.c:1831`
    #ifdef ZEND_WIN32
    CWD_API FILE *virtual_popen(const char *command, const char *type) /* {{{ */
    {
        return popen_ex(command, type, CWDG(cwd).cwd, NULL);
    }