### Performance and Comparison

For most cryptographic primitives, our HACL∗ implementations are as fast as, and sometimes faster than, the fastest unvectorized C implementations in OpenSSL, Libsodium, and SUPERCOP. Notably, all of our code significantly outperforms the naive reference implementations included in TweetNaCl and SUPERCOP. However, some assembly and vectorized C implementations still outperform HACL∗. For instance, our vectorized ChaCha20 implementation, inspired by Krovetz’s 128-bit vectorized implementation, matches its performance but is slower than implementations using 256-bit vectors.

Our Poly1305 and Curve25519 implementations, which rely on 64x64 bit multiplication, are faster than all other C implementations but are outpaced by vectorized assembly code. Our Ed25519 implementation is not optimized (it does not precompute fixed-base scalar multiplication) and is therefore significantly slower than the fast C implementation in Libsodium, though it remains much faster than the reference implementation in TweetNaCl.

### Performance on ARM Devices

Table 5 measures performance on a low-cost ARM device (Raspberry Pi 3) running a 64-bit operating system. Cycle counts were estimated based on running time, as the processor lacks a convenient cycle counter. On this platform, the performance of all implementations is generally worse, but HACL∗ implementations remain comparable in speed to Libsodium and significantly faster than TweetNaCl. Notably, OpenSSL Poly1305 and SHA-512 perform better than HACL∗ on this device.

### Performance on 32-bit Platforms

Our HACL∗ code is optimized for 64-bit platforms that support 128-bit integer arithmetic. However, it can still run on 32-bit platforms using our custom library for 128-bit integers. We expect our code to be slower on such platforms compared to code optimized for 32-bit instructions. Table 6 shows the performance of our code on an ARM device (Raspberry Pi 3) running a 32-bit OS. In the Appendix, Table 7 ranks the top SUPERCOP implementations on this device.

For symmetric primitives, HACL∗ continues to match or exceed the performance of the fastest C implementations. In fact, our vectorized ChaCha20 implementation is the second-fastest in SUPERCOP. However, algorithms relying on Bignum operations, such as Poly1305, Curve25519, and Ed25519, suffer significant performance losses on 32-bit platforms. This is because we represent 128-bit integers as pairs of 64-bit integers and encode 128-bit operations in terms of 32-bit instructions, resulting in a 3x performance penalty. For optimal performance on 32-bit machines, we recommend writing custom 32-bit implementations for these algorithms. As an experiment, we wrote and verified a 32-bit implementation of Poly1305, which performed comparably to Libsodium. Even with the performance penalty, our code remains faster than TweetNaCl.

### CompCert Performance

Finally, we evaluate the performance of our code when compiled with the new 64-bit CompCert compiler (version 3.0) for Intel platforms. Although CompCert supports 64-bit instructions, it does not provide 128-bit integers. Consequently, our code needs to encode 128-bit integers as pairs of 64-bit integers. Additionally, CompCert only includes verified optimizations, leading to less efficient code compared to GCC. Table 3 depicts the performance of HACL∗, Libsodium, and TweetNaCl, all compiled with CompCert. Similar to 32-bit platforms, HACL∗ performs well for symmetric algorithms but incurs a penalty for algorithms that rely on 128-bit integers. If CompCert supports 128-bit integers in the future, we expect this penalty to disappear.

### Conclusion

We have presented the design, implementation, and evaluation of HACL∗, an open-source, verified cryptographic library that implements the full NaCl API and many core primitives used in TLS 1.3. All our code is verified to be memory-safe, secret-independent, and functionally correct with respect to high-level, concise RFC-based specifications. Our verified C code can be readily integrated into existing software and is already being used in larger verification projects like miTLS. In collaboration with Mozilla, parts of HACL∗ are being incorporated into the NSS cryptographic library and will soon be used by default in the Firefox web browser.

HACL∗ continues to evolve as we add more primitives and faster implementations. The performance of our library is already comparable to state-of-the-art C implementations and within a small factor of hand-optimized assembly code. Our results indicate that security researchers should expect far more than auditability from modern cryptographic libraries; with some effort, their full formal verification is now well within reach.

### Online Materials

The HACL∗ library is being actively developed as an open-source project at:
https://github.com/mitls/hacl-star/
All the code, specifications, and benchmarks mentioned in this paper are available at the above URL, along with instructions for installing our verification and compilation tools.

### References

[1] 2015. ChaCha20 and Poly1305 for IETF Protocols. IETF RFC 7539. (2015).
[2] 2016. Elliptic Curves for Security. IETF RFC 7748. (2016).
[3] 2017. Edwards-Curve Digital Signature Algorithm (EdDSA). IETF RFC 8032.
[4] 2017. The Transport Layer Security (TLS) Protocol Version 1.3. IETF Internet Draft 20. (2017).

... (additional references follow)

### Performance Benchmarks

| Algorithm | Implementation | Language | Architecture |
|-----------|----------------|----------|--------------|
| ChaCha20  | moon/avx2/64   | assembly | AVX2         |
| Poly1305  | krovetz/vec128  | assembly | SSE          |
| Curve25519| hacl-star/vec128| C        | x86_64       |
| SHA-512   | moon/avx2/64    | assembly | AVX2         |
| Ed25519   | hacl-star/ref   | C        | x86_64       |

... (additional benchmark data follows)