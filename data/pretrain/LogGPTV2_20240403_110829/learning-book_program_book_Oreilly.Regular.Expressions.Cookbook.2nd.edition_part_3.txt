of books, training videos, and prepublication manuscripts in one fully searchable da-
tabase from publisherslike O'Reilly Media, Prentice Hall Professional, Addison-Wesley
Preflace | xi
---
## Page 16
Professional, Microsoft Press, Sams, Que, Peachpit Press, Focal Press, Cisco Press, John
Wiley & Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT
Press, Apress, Manning, New Riders, McGraw-Hill, Jones & Bartlett, Course Tech-
nology, and dozens more. For more information about Safari Books Online, please visit
us online.
How to Contact Us
Please address comments and questions concerming this book to the publisher:
O'Reilly Media, Inc.
1005 Gravenstein Highway North
Sebastopol, CA 95472
800-998-9938 (in the United States or Canada)
707-829-0515 (intermational or local)
707-829-0104 (fax)
We have a web page for this book, where we list errata and any additional information.
You can access this page at:
Fettp://oreilly.com/catalog/9781449319434
To comment or ask technical questions about this book, send email to:
PI:EMAIL
For more information about our books, courses, conferences, and news, see our website
at hzrp://www.oreilly.com.
Find us on Facebook: Fattp:/facebook.comm/oreifly
Follow us on Twiter: http://twitter.coa/oreiflyrredia
Watch us on YouTube: hzrp://www.younebe.comm/oreiflymedia
Acknowledgments
We thank Andy Oram, our editor at O'Reilly Media, Inc., for helping us see this project
from start to finish. We also thank Jefrey Friedl, Zak Greant, Nikolaj Lindberg, and
Ian Morse for their careful technical reviews on the first edition, and Nikolaj Lindberg.
Judith Myerson, and Zak Greant for reviewing the second, which made this a more
comprehensive and accurate book.
xiv | Preface
---
## Page 17
CHAPTER1
IntroductiontoRegularExpressions
Having opened this cookbook, you are probably eager to inject some of the ungainly
strings of parentheses and question marks you find in its chapters right into your code.
If you are ready to plug and play, be our guest: the practical regular expressions are
listed and described in Chapters 4 through 9.
But the initial chapters of this book may save you a lot of time in the long run. For
instance, this chapter introduces you to a number of utilitiessome of them created
by the authors, Jan and Steventhat let you test and debug a regular expression before
you bury it in code where errors are harder to find. And these initial chapters also show
you how to use various features and options of regular expressions to make your life
easier, help you understand regular expressions in order to improve their performance,
and learm the subtle differences between how regular expressions are handled by dif-
ferent programming languages—and even different versions of your favorite program-
ming language.
So we’ve put a lot of effort into these background matters, confident that you'll read it
to bolster your understanding.
before you start or when you get frustrated by your use of regular expressions and want
RegularExpressionsDefined
In the context of this book, a regalar expression is a specific kind of text patterm that
you can use with many moderm applications and programming languages. You can use
them to verify whether input fits into the text pattern, to find text that matches the
pattern within a larger body of text, to replace text matching the patterm with other
text or rearranged bits of the matched text, to split a block of text into a list of subtexts,
and to shoot yourself in the foot. This book helps you understand exactly what you're
doing and avoid disaster.
---
## Page 18
History of the Term “Regular Expression"
The term reguzlar expression comes from mathematics and computer science theory,
where it reflects a trait of mathematical expressions called regularity. Such an expres-
DFA is a finite state machine that doesn’t use backtracking.
sion can be implemented in software using a deterministic finite automaton (DFA). A
The text patterns used by the earliest grep tools were regular expressions in the math-
ematical sense. Though the name has stuck, moderm-day Perl-style regular expressions
are not regular expressions at all in the mathematical sense. They're implemented with
a nondeterministic finite automaton (NFA). You will leam all about backtracking
shortly. Alla practical programmer needs to remember from this note is that some ivory
tower computer scientists get upset about their well-defined terminology being over-
loaded with technology that's far more useful in the real world.
If you use regular expressions with skill, they simplify many programming and text
processing tasks, and allow many that wouldn’t be at all feasible without the regular
expressions. You would need dozens if not hundreds of lines of procedural code to
extract all email addresses from a document—code that is tedious to write and hard to
maintain. But with the proper regular expression, as shown in Recipe 4.1, it takes just
a few lines of code, or maybe even one line.
But if you try to do too much with just one regular expression, or use regexes where
they're not really appropriate, you’ll find out why some people say:1
Some people, when confronted with a problem, think °I know, I'll use regular expres
sions.* Now they have two problems.
The second problem those people have is that they didn’t read the owner’s manual,
which you are holding now. Read on. Regular expressions are a powerful tool. If your
 job involves manipulating or extracting text on a computer, a firm grasp of regular
expressions wil save you plenty of overtime.
Many Flavors of Regular Expressions
All right, the title of the previous section was a lie. We didn’t define what regular
expressions are. W'e can’. There is no official standard that defines exactly which text
patterns are regular expressions and which aren’t. As you can imagine, every designer
different idea of exactly what a regular expression should be. So now we're stuck with
of programming languages and every developer of text processing applications has a
a whole palette of regular expression flavors.
Fortunately,most designers and developers are lazy. Why create something totally new
when you can copy what has already been done? As a result, all modem regular ex-
pression flavors, including those discussed in this book, can trace their history back to
1. Jeffrey Friedl races the histoey of this quote in his blog at rpv/regex.afo/2006-0915/247.
2 | Chapter 1: Introduction to Regular Expressions
---
## Page 19
the Perl programming language. We call these flavors Perl-szyle reguzlar expressions.
Their regular expression syntax is very similar, and mostly compatible, but not com-
pletely so.
e[n8au aBus e anouap o1 dxaa ao xa&ax ad6 Xiensn I,a oo &ze aae sau
expression, and regexes to denote the plural.
Regex flavors do not correspond one-to-one with programming languages. Scripting
languages tend to have their own, buil-in regular expression flavor. Other program-
ming languagesrely onlibraries forregex support. Somelibrariesare available for mul-
tiple languages, while certain languages can draw on a choice of different libraries.
This introductory chapter deals with regular expression flavors only and completely
nos os stuns! apoo aq suaq  aaideu suogeuapisuos Buuueatoad Kue saaou8!
can peek ahead to *Programming Languages and Regex Flavors" in Chapter 3 to find
out which flavors you'll be working with. But ignore allthe programming stuff for now.
The tools listed in the next section are an easier way to explore the regex syntax through
“learming by doing.
Regex Flavors Covered byThis Book
For this book, we selected the most popular regex flavors in use today. These are all
Perl-style regex flavors. Some flavors have more features than others. But if two flavors
have the same feature, they tend to use the same syntax. We'′l point out the few an-
noying inconsistencies as we encounter them.
All these regex flavors are part of programming languages and libraries that arein active
development. The list of flavors tells you which versions this book covers. Further along
in the book, we mention the flavor without any versions if the presented regex works
the same way with all flavors. This is almost always the case. Aside from bug fixes that
affect corner cases, regex flavors tend not to change, except to add features by giving
new meaning to syntax that was previously treated as an error:
.NET
The Microsoft .NET Framework provides a full-featured Perl-style regex flavor
through the Systen. Text,RegularExpressions package. This book covers NET
versions 1.0 through 4.0. Strictly speaking, there are only two versions of the .NET
regex flavor: 1.0 and 2.0. No changes were made to the Regex classes at all
in .NET 1.1, 3.0, and 3.5. The Regex class got a few new methods in .NET 4.0, but
the regex syntax is unchanged.
Any .NET programming language, including C#, VB.NET, Delphi for _NET, and
even COBOL.NET, has full access to the .NET regex flavor. If an application de-
veloped with .NET offers you regex support, you can be quite certain it uses
the NET flavor, even if it claims to use *Perl regular expressions." For a long time,
a glaring exception was Visual Studio (VS) iself. Up until Visual Studio 2010, the
VS integrated development environment (IDE) had continued to use the same old
Regular Expressions Defined | 3
---
## Page 20
regex flavor it has had from the beginning, which was not Perl-style at all. Visual
Studio 11, which is in beta when we write this, finally uses the .NET regex flavor
in the IDE too.
Java
Java 4 is the first Java release to provide built-in regular expression support through
the java.uti1.regex package. It has quickly eclipsed the various third-party regex
libraries for Java. Besides being standard and built in, it offers a full-featured Perl-
-ndlde qm pareduoo uaqm taaa ^aoueuopad suaaoxa pue sontg xafau aais
tions written in C. This book covers the java.util .regex package in Java 4, 5, 6,
and 7.
engaa ue °seaf map sed aq Suunp eat[ qptm padojaaap aueaos Busn au,no j1
expression support it offers likely uses the Java flavor.
JavaScript
In this book, we use the term JavaScripr to indicate the regular expression flavor
defined in versions 3 and 5 of the ECMA-262 standard. This standard defines the
ECMAScript programming language, which is better known through its JavaScript
and JScript implementations in various web browsers. Internet Explorer (as of ver-
sion 5.5), Firefox, Chrome, Opera, and Safari all implement Edition 3 or 5 of
ECMA-262. As far as regular expressions go, the differences berween JavaScript 3
and JavaScript 5 are minimal. However, all browsers have various corner case bugs
causing them to deviate from the standard. We point out such issues in situations
where they matter.
If a website allows you to search or filter using a regular expression without waiting
for a response from the web server, it uses the JavaScript regex flavor, which is the
only cross-browser client-side regex flavor. Even Microsoft’s VBScript and Adobe's
ActionScript 3 use it, although ActionScript 3 adds some extra features.
XRegExp
XRegExp is an open source JavaScript library developed by Steven Levithan. You
can download it at Fattp://xregexp.com. XRegExp extends JavaScript's regular ex-
pression syntax and removes some cross-browser inconsistencies. Recipes in this
book that use regular expression features that are not available in standard Java-
Script show additional solutions using XRegExp. If a solution shows XRegExp as
the regular expression flavor, that means it works with JavaScript when using the
XRegExp library, but not with standard JavaScript without the XRegExp library.
If a solution shows JavaScript as the regular expression flavor, then it works with
JavaScript whether you are using the XRegExp library or not.
This book covers XRegExp version 2.0. The recipes assume you're using xregexp-
all.js so that all of XRegExp’s Unicode features are available.
PCRE
Hazel. You can download this open source library at http://www.pre.org. This
PCRE is the *Perl-Compatible Regular Expressions? C library developed by Philip
book covers versions 4 through 8 of PCRE.
4 | Chapter 1: Introduction to Regular Expressions
---
## Page 21
Though PCRE claims to be Perl-compatible, and is so more than any other flavor
in this book, it really is just Perl-style. Some features, such as Unicode support, are
slightly different, and you can’t mix Perl code into your regex, as Perl itself allows.
Because of its open source license and solid programming, PCRE has found its way
into many programming languages and applications. It is built into PHP and wrap-
d oddns osuudde ue suuodu  snounu ou pd
compatible* regular expressions without specifically listing the actual regex flavor
being used, it’s likely PCRE.
Per!
Perl’'s built-in support for regular expressions is the main reason why regexes are
popular today. This book covers Perl 5.6, 5.8, 5.10, 5.12, and 5.14. Each of these
versions adds new features to Perl’s regular expression syntax. When this book
indicates that a certain regex works with a certain version of Perl, then it works
with that version and all later versions covered by this book.
Many applications and regex libraries that claim to use Perl or Perl-compatible
regular expressions in reality merely use Perl-style regular expressions. They use a
regex syntax similar to Perl's, but don't support the same set of regex features.
Quite likely, they're using one of the regex flavors further down this list. Those
flavors are all Perl-style.
Python
Python supports regular expressions through its re module. This book covers
Python 2.4 until 3.2. The differences between the re modules in Python 2.4, 2.5,
2.6, and 2.7 are negligible. Python 3.0 improved Python’s handling of Unicode in
regular expressons. Python 3.1 and 3.2 brought no regex-related changes.
Ruby
Ruby's regular expression support is part of the Ruby language itself, similar to
Perl. This book covers Ruby 1.8 and 1.9. A default compilation of Ruby 1.8 uses
the regular expression flavor provided directly by the Ruby source code. A default
compilation of Ruby 1.9 uses the Oniguruma regular expression library. Ruby 1.8
can be compiled to use Oniguruma, and Ruby 1.9 can be compiled to use the older
Ruby regex flavor. In this book, we denote the native Ruby flavor as Ruby 1.8, and
the Oniguruma flavor as Ruby 1.9.
To test which Ruby regex flavor your site uses, try to use the regular expression
a++. Ruby 1.8 will say the regular expression is invalid, because it does notsupport
possesive quantifiers, whereas Ruby 1.9 will match a string of one or more a
characters.
The Oniguruma library is designed to be backward-compatible with Ruby 1.8,
simply adding new features that will not break existing regexes. The implementors
even left in features that arguably should have been changed, such as using  to mean *the dot matches line breaks,* where other regex flavors use <(?s).
Regular Expressions Defined | 5
---
## Page 22
SearchandReplacewithRegularExpressions
Search-and-replace is a common job for regular expressions. A search-and-replace
indu se Buns usuaoeda e pue “uossadx ena e uus 1xafqns  saxe uoounj
The output is the subject string with all matches of the regular expression replaced with
the replacement text.
Although the replacement text is not a regular expression at all, you can use cetain
special syntax to build dynamic replacement texts. All flavors let you reinsert the text
matched by the regular expression or a capruring group into the replacement. Recipes
2.20 and 2.21 explain this. Some flavors also support inserting matched context into
the replacement text, as Recipe 2.22 shows. In Chapter 3, Recipe 3.16 teaches you how
to generate a different replacement text for each match in code.
Many Flavors of Replacement Text
Different ideas by different regular expression sofrware developers have led to a wide
range of regular expression flavors, each with different syntax and feature sets. The
story for the replacement text is no different. In fact, there are even more replacement
text flavors than regular expression flavors. Building a regular expression engine
is difficult. Most programmers prefer to reuse an existing one, and bolting a
search-and-replace function onto an existing regular expression engine is quite easy.
The result is that there are many replacement text flavors for regular expression libraries
that do not have built-in search-and-replace features.
Fortunately, all the regular expression flavors in this book have corresponding replace-
ment text flavors, except PCRE. This gap in PCRE complicates life for programmers
who use flavors based on it. The open source PCRE library does not include any func-
tions to make replacements. Thus, all applications and programming languages that
are based on PCRE need to provide their own search-and-replace function. Most pro
grammers try to copy existing syntax, but never do so in exactly the same way.
This book covers the following replacement text flavors. Refer to *Regex Flavors Cov-
ered by This Book* on page 3 for more details on the regular expression flavors that
correspond with the replacement text flavors:
.NET
The System.Text,RegularExpressions package provides various search-and-
replace functions. The .NET replacement text flavor corresponds with the NET
regular expression flavor. All versions of .NET use the same replacement text fla-
vor. The new regular expression features in .NET 2.0 do not affect the replacement
text syntax.
Java
The java.util.regex package has built-in search-and-replace functions. This book
covers Java 4, 5, 6, and 7.
6 ∣ Chapter 1: Introduction to Regular Expressions
---
## Page 23
JavaScript
In this book, we use the term JavaScript to indicate both the replacement text flavor
and the regular expression flavor defined in editions 3 and 5 of the ECMA-262
standard.
XRegExp
Steven Levithan’s XRegExp has its own replace() function that eliminates cross-
browser inconsistencies and adds support for backreferences to XRegExp’s named
capruring groups. Recipes in this book that use named caprure show aditional
solutions using XRegExp. If a solution shows XRegExp as the replacement text
flavor, that means it works with JavaScript when using the XRegExp library, but
not with standard JavaScript without the XRegExp library. If a solution shows
JavaScript as the replacement text flavor, then it works with JavaScript whether
you are using the XRegExp library or not.
This book covers XRegExp version 2.0, which you can download at Ihzzp:/xregexp
CoM.
PHP
In this book, the PHP replacement text flavor refers to the preg_replace function
in PHP. This function uses the PCRE regular expression flavor and the PHP re-
placement text flavor. It was first introduced in PHP 4.0.0.
Other programming languages that use PCRE do not use the same replacement
text flavor as PHP. Depending on where the designers of your programming lan-
guage got their inspiration, the replacement tex syntax may be similar to PHP or
any of the other replacement text flavors in this book.
PHP also has an ereg_replace function. This function uses a different regular ex-
pression flavor (POSIX ERE), and a different replacement text flavor, too. PHP's
ereg functions are deprecated. They are not discussed in this book.
Per!
Perl has built-in support for regular expression substitution via the s/regex/