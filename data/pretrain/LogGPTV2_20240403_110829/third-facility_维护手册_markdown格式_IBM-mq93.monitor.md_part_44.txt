different topic strings have been created in the queue manager network. This enables the queue manager
378 Monitoring and Performance for IBM MQ
on which a message is published to identify which other queue managers require a copy of the published
message, to match their subscriptions.
Balancing producers and consumers in publish/subscribe networks
An important concept in asynchronous messaging performance is balance. Unless message consumers
are balanced with message producers, there is the danger that a backlog of unconsumed messages might
build up and seriously affect the performance of multiple applications.
In a point-to-point messaging topology, the relationship between message consumers and message
producers is readily understood. You can get estimates of message production and consumption, queue
by queue, channel by channel. If there is a lack of balance, the bottlenecks are readily identified and then
remedied.
It is harder to work out whether publishers and subscribers are balanced in a publish/subscribe topology.
Start from each subscription, and work back to the queue managers having publishers on the topic.
Calculate the number of publications flowing to each subscriber from each queue manager.
Each publication that matches a subscription on a remote queue manager (based on proxy subscriptions)
is put to a transmission queue. If multiple remote queue managers have proxy subscriptions for that
publication, multiple copies of the message are put to a transmission queue, each targeted for a different
sender channel.
In a publish/subscribe cluster, those publications are targeted at the SYSTEM.INTER.QMGR.PUBS
queue on the remote queue managers that host the subscriptions. In a hierarchy, each publication is
targeted at the SYSTEM.BROKER.DEFAULT.STREAM queue, or any other stream queues listed in the
SYSTEM.QPUBSUB.QUEUE.NAMELIST on the remote queue managers. Each queue manager processes
messages arriving on that queue and delivers them to the correct subscriptions on that queue manager.
For this reason, monitor the load at the following points where bottlenecks might arise:
• Monitor the load at the individual subscription queues.
– This bottleneck implies that the subscribing application is not consuming the publications as quick as
they are being published.
• Monitor the load at the SYSTEM.INTER.QMGR.PUBS queue or the stream queues.
– This bottleneck implies that the queue manager is receiving publications from one or more remote
queue managers faster than it can distribute them to the local subscriptions.
– When seen on a topic host queue manager when using topic host routing in a cluster, consider making
additional queue managers topic hosts, allowing the publication workload to be balanced across
them. However, this will affect the message ordering across publications. See Topic host routing using
multiple topic hosts for a single topic.
• Monitor the load at the channels between the publishing queue manager and the subscribing queue
managers, which are fed by the transmission queues on the publishing queue manager.
– This bottleneck implies that either one or more channels is not running, or messages are being
published to the local queue manager faster than the channels can deliver them to the remote queue
manager.
– When you use a publish/subscribe cluster, consider defining additional cluster receiver channels
on the target queue manager. This allows the publication workload to be balanced across
them. However, this affects the message ordering across publications. Also consider moving to a
multiple cluster transmission queue configuration, because this can improve performance in certain
circumstances.
• If the publishing application is using a queued publish/subscribe interface, monitor the load at
(a) the SYSTEM.BROKER.DEFAULT.STREAM queue, and any other stream queues listed in the
SYSTEM.QPUBSUB.QUEUE.NAMELIST ; and (b) the SYSTEM.BROKER.DEFAULT.SUBPOINT queue, and
any other subpoint queues listed in the SYSTEM.QPUBSUB.SUBPOINT.NAMELIST .
– This bottleneck implies that messages are being put by local publishing applications faster than the
local queue manager can process the messages.
IBM MQ Monitoring and performance 379
Related concepts
Direct routed publish/subscribe cluster performance
In direct routed publish/subscribe clusters, information such as clustered topics and proxy subscriptions
is pushed to all members of the cluster, irrespective of whether all cluster queue managers are actively
participating in publish/subscribe messaging. This process can create a significant additional load on the
system. To reduce the effect of cluster management on performance you can perform updates at off-peak
times, define a much smaller subset of queue managers involved in publish/subscribe and make that an
"overlapping" cluster, or switch to using topic host routing.
Topic host routed publish/subscribe cluster performance
A topic host routed publish/subscribe cluster gives you precise control over which queue managers host
each topic. These topic hosts become the routing queue managers for that branch of the topic tree.
Moreover, queue managers without subscriptions or publishers have no need to connect with the topic
hosts. This configuration can significantly reduce the number of connections between queue managers in
the cluster, and the amount of information that is passed between queue managers.
Subscription performance in publish/subscribe networks
Distributed publish/subscribe in IBM MQ works by propagating knowledge of where subscriptions to
different topic strings have been created in the queue manager network. This enables the queue manager
on which a message is published to identify which other queue managers require a copy of the published
message, to match their subscriptions.
“Monitoring clusters” on page 311
Within a cluster you can monitor application messages, control messages, and logs. There are special
monitoring considerations when the cluster load balances between two or more instances of a queue.
Subscription performance in publish/subscribe networks
Distributed publish/subscribe in IBM MQ works by propagating knowledge of where subscriptions to
different topic strings have been created in the queue manager network. This enables the queue manager
on which a message is published to identify which other queue managers require a copy of the published
message, to match their subscriptions.
This approach minimizes the sending of published messages to queue managers on which no matching
subscriptions exist. However, the propagation of the subscription knowledge can become a significant
overhead, when the number of topic strings being subscribed to is high and constantly changing through
frequent subscription creation and deletion.
You can affect performance by adjusting how publications and subscriptions are flowed around your
publish/subscribe network. If your network traffic has few publications, and rapid subscription creation,
deletion, or change, you can stop subscription information being flowed to all queue managers, and
instead forward all publications to all queue managers in the network. You can also restrict the flow of
proxy subscriptions and publications for a given topic between connected queue managers, restrict the
flow of proxy subscriptions containing wildcards, and reduce the number and transient nature of topic
strings.
Individual subscription propagation and publish everywhere
Publish everywhere is an alternative to individual subscription propagation. With individual propagation,
only publications that have a matching subscription on a queue manager are forwarded to that queue
manager. With publish everywhere, all publications are forwarded to all queue managers in the network.
The receiving queue managers then deliver those publications that match local subscriptions.
Individual subscription propagation
This mechanism results in the least amount of inter-queue manager publication traffic, because only
those publications that match subscriptions on a queue manager are sent.
However:
• For each individual topic string that is subscribed to, a proxy subscription is sent to other queue
managers in the publish/subscribe topology. The set of queue managers depends on the routing
model being used, as described in Planning your distributed publish/subscribe network.
380 Monitoring and Performance for IBM MQ
– This messaging overhead can be significant if there are many thousands of subscriptions to
create or delete (for example, recreating all non-durable subscriptions after a restart of a queue
manager), or if the set of subscriptions is changing rapidly, and each is to a different topic string.
– The number of queue managers to which the proxy subscription is propagated also affects the
scale of the overhead.
• Proxy subscriptions are flowed to other queue managers using asynchronous messaging. This has
the following effect:
– There is a delay between the creation of a subscription, and the creation, delivery, and processing
of the proxy subscription by the other queue managers.
– Messages that are published at those queue managers in that interval are not delivered to the
remote subscription.
Publish everywhere
With this mechanism there is no per topic string proxy subscription overhead on the system. This
means that rapid subscription creation, deletion, or change does not result in increased network load
and processing.
There is also no delay between creating a subscription and publications being flowed to a queue
manager, because all publications are flowed to all queue managers. Therefore there is no window in
which publications are not delivered to newly-created remote subscriptions.
However:
• Sending all publications to all queue managers in the publish/subscribe topology, can result in
excessive network traffic where publications do not have matching subscriptions on each queue
manager.
– The greater the number of queue managers in the topology, the greater the overhead.
You should consider using the publish everywhere mechanism when you expect a publication to be
subscribed to from a significant proportion of your queue managers, or where the proxy subscription
overheads are too great because of the frequency of subscription changes. You should use individual
proxy subscription forwarding in cases where you experience increased messaging traffic when
publications are sent to all queue managers, rather than to the queue managers with matching
subscriptions.
You can set publish everywhere behavior at any level within the topic tree. To enable publish everywhere,
you set the PROXYSUB parameter to FORCE for a high-level topic object. This results in a single wildcard
proxy subscription that matches all topics below this topic object in the topic tree. When set it on a
clustered topic object, the PROXYSUB(FORCE) attribute is propagated to every queue manager in the
network, not just the queue manager that the topic was defined on.
Note: When used in a hierarchy, you set PROXYSUB(FORCE) individually on each queue manager, so the
topology mechanism naturally limits the number of channels. However, when used in a cluster, many
additional channels might be started:
• In a topic host routed cluster, channels are started from each queue manager to each topic host queue
manager.
• In a direct routed cluster, channels are started from every queue manager to every other queue
manager.
The overhead of starting many channels is most pronounced in a direct routed cluster, and can cause
performance issues. See “Direct routed publish/subscribe cluster performance” on page 373.
Other ways of restricting the flow of proxy subscriptions and publications between
connected queue managers
Consolidate topic strings
The use of many distinct, transient, topic strings introduces some level of management overhead
on each queue manager in the system where publishers or subscriptions are attached. You should
periodically assess the use of topic strings to see whether they can be consolidated. Reducing the
IBM MQ Monitoring and performance 381
number and transient nature of topic strings, and therefore the publishers and subscriptions to them,
reduces the impact on the system.
Restrict publication and subscription scope
For a given topic, you can use the Publication scope and Subscription scope settings to keep
publications and subscriptions local to the queue manager on which they are defined.
Block subscriptions made to wildcarded topics
You can restrict the flow of proxy subscriptions containing wildcards by setting the Topic attribute
WILDCARD to BLOCK. See Wildcards in proxy subscriptions.
See also “Balancing producers and consumers in publish/subscribe networks” on page 379
Monitoring proxy subscription traffic in clusters
When considering the load on the system from the proxy subscription traffic, in addition to monitoring
the queues listed in“Balancing producers and consumers in publish/subscribe networks” on page 379,
monitor the following cluster queues:
• The SYSTEM.INTER.QMGR.FANREQ queue on the subscriber queue manager.
• The SYSTEM.INTER.QMGR.CONTROL queue on all other queue managers in the cluster.
Any significant message backlog on these queues implies that either the rate of subscription change is
too great for the system, or a queue manager is not correctly functioning in the cluster. If you suspect the
problem lies with a specific queue manager, check that publish/subscribe support is not disabled for that
queue manager. See PSMODE in ALTER QMGR.
Related concepts
Direct routed publish/subscribe cluster performance
In direct routed publish/subscribe clusters, information such as clustered topics and proxy subscriptions
is pushed to all members of the cluster, irrespective of whether all cluster queue managers are actively
participating in publish/subscribe messaging. This process can create a significant additional load on the
system. To reduce the effect of cluster management on performance you can perform updates at off-peak
times, define a much smaller subset of queue managers involved in publish/subscribe and make that an
"overlapping" cluster, or switch to using topic host routing.
Topic host routed publish/subscribe cluster performance
A topic host routed publish/subscribe cluster gives you precise control over which queue managers host
each topic. These topic hosts become the routing queue managers for that branch of the topic tree.
Moreover, queue managers without subscriptions or publishers have no need to connect with the topic
hosts. This configuration can significantly reduce the number of connections between queue managers in
the cluster, and the amount of information that is passed between queue managers.
Balancing producers and consumers in publish/subscribe networks
An important concept in asynchronous messaging performance is balance. Unless message consumers
are balanced with message producers, there is the danger that a backlog of unconsumed messages might
build up and seriously affect the performance of multiple applications.
Proxy subscriptions in a publish/subscribe network
Reducing the number of unwanted topics in the topic tree
The performance of a publish/subscribe system is improved by reducing the number of unwanted topics
in the topic tree. What is an unwanted topic and how do you remove them?
You can create large numbers of topics without affecting performance adversely. However, some ways
of using publish/subscribe result in continually expanding topic trees. An exceptionally large number
of topics are created once and never used again. The growing number of topics might become a
performance problem.
How can you avoid designs that lead to a large and growing number of unwanted topics? What can you do
to help the queue manager remove unwanted topics from the topic tree?
382 Monitoring and Performance for IBM MQ
The queue manager recognizes an unwanted topic because it has been unused for 30 minutes. The queue
manager removes unused topics from the topic tree for you. The 30 minute duration can be changed by
altering the queue manager attribute, TREELIFE. You can help the queue manager to remove unwanted
topics by making sure that the topic appears to the queue manager to be unused. The section, “What is an
unused topic?” on page 383 explains what an unused topic is.
A programmer, designing any application, and especially designing a long running application, considers
its resource usage: how much resource the program requires, are there any unbounded demands, and any
resource leaks? Topics are a resource that publish/subscribe programs use. Scrutinize the use of topics
just like any other resource a program uses.
What is an unused topic?
Before defining what an unused topic is, what exactly counts as a topic?
When a topic string, such as USA/Alabama/Auburn, is converted into a topic, the topic is added to the
topic tree. Additional topic nodes, and their corresponding topics, are created in the tree, if necessary. The
topic string USA/Alabama/Auburn is converted into a tree with three topics.
• USA
• USA/Alabama
• USA/Alabama/Auburn
To display all the topics in the topic tree, use the runmqsc command DISPLAY TPSTATUS('#')
TYPE(TOPIC).
An unused topic in the topic tree has the following properties.
It is not associated with a topic object
An administrative topic object has a topic string that associates it with a topic. When you define the
topic object Alabama, if the topic, USA/Alabama, it is to be associated with does not exist, the topic
is created from the topic string. If the topic does exist, the topic object and the topic are associated
together using the topic string.
It does not have a retained publication
A topic with a retained publication results from a publisher putting a message to a topic with the
option MQPMO_RETAIN.
Use the runmqsc command DISPLAY TPSTATUS('USA/Alabama') RETAINED to check if USA/
Alabama has a retained publication. The response is YES or NO.
Use the runmqsc command CLEAR TOPICSTR('USA/Alabama') CLTRTYPE(RETAINED) to
remove a retained publication from USA/Alabama.
It has no child topics
USA/Alabama/Auburn is a topic with no child topics. USA/Alabama/Auburn is the direct child topic
of USA/Alabama.
Display the direct children of USA/Alabama with the runmqsc command DISPLAY
TPSTATUS('USA/Alabama/+').
There are no active publishers to the node
An active publisher to a node is an application that has the topic open for output.
For example, an application opens the topic object named Alabama with open options MQOO_OUTPUT.
To display active publishers to USA/Alabama and all its children, use the runmqsc command
DISPLAY TPSTATUS('USA/Alabama/#') TYPE(PUB) ACTCONN.
There are no active subscribers to the node
An active subscriber can either be a durable subscription, or an application that has registered a
subscription to a topic with MQSUB, and not closed it.
IBM MQ Monitoring and performance 383
To display active subscriptions to USA/Alabama, use the runmqsc command DISPLAY
TPSTATUS('USA/Alabama') TYPE(SUB) ACTCONN.
To display active subscriptions to USA/Alabama and all its children, use the runmqsc command
DISPLAY TPSTATUS('USA/Alabama/#') TYPE(SUB) ACTCONN.
Managing the number of topics in a topic tree
In summary, there are a number of ways to manage the number of topics in a topic tree.
Display TPCOUNT
Use the runmqsc command DISPLAY PUBSUB ALL periodically to display the TPCOUNT property.
This is the number of topic nodes in the topic tree. If the number is growing it might indicate that a
shorter TREELIFE is required, or that a redesign of the topics themselves is required.
Modify TREELIFE
An unused topic has a lifetime of 30 minutes by default. You can make the lifetime of an unused topic
smaller.
For example, The runmqsc command, ALTER QMGR TREELIFE(900), reduces lifetime of an unused
topic from 30 minutes to 15 minutes.
Exceptionally, restart the queue manager
When the queue manager is restarted, the topic tree is reinitialized from topic objects, nodes with
retained publications, and durable subscriptions. Topics that had been created by the operation of
publisher and subscriber programs are eliminated.
As a last resort, if the growth in unwanted topics has been the cause of performance problems in the
past, restart the queue manager.
Related concepts
Topic trees
Aspera gateway can improve
performance over high latency networks
The IBM Aspera® faspio Gateway provides a fast TCP/IP tunnel that can significantly increase network
throughput for IBM MQ.
The Aspera gateway can be used to improve the performance of queue manager channels. It is especially
effective if the network has high latency or tends to lose packets, and it is typically used to speed up the
connection between queue managers in different data centers.
However, for a fast network that does not lose packets there is a decrease in performance when using
the Aspera gateway, so it is important to check network performance before and after defining an Aspera
gateway connection.
A queue manager running on any entitled platform can connect through an Aspera gateway. The gateway
itself is deployed on Red Hat® or Ubuntu Linux, or Windows.
For more information, see Defining an Aspera gateway connection on Linux or Windows.
384 Monitoring and Performance for IBM MQ
Notices
This information was developed for products and services offered in the U.S.A.
IBM may not offer the products, services, or features discussed in this document in other countries.
Consult your local IBM representative for information on the products and services currently available in
your area. Any reference to an IBM product, program, or service is not intended to state or imply that
only that IBM product, program, or service may be used. Any functionally equivalent product, program, or
service that does not infringe any IBM intellectual property right may be used instead. However, it is the
user's responsibility to evaluate and verify the operation of any non-IBM product, program, or service.
IBM may have patents or pending patent applications covering subject matter described in this
document. The furnishing of this document does not grant you any license to these patents. You can
send license inquiries, in writing, to:
IBM Director of Licensing
IBM Corporation
North Castle Drive
Armonk, NY 10504-1785
U.S.A.
For license inquiries regarding double-byte (DBCS) information, contact the IBM Intellectual Property
Department in your country or send inquiries, in writing, to:
Intellectual Property Licensing
Legal and Intellectual Property Law
IBM Japan, Ltd.
19-21, Nihonbashi-Hakozakicho, Chuo-ku
Tokyo 103-8510, Japan
The following paragraph does not apply to the United Kingdom or any other country where such
provisions are inconsistent with local law: INTERNATIONAL BUSINESS MACHINES CORPORATION
PROVIDES THIS PUBLICATION "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Some states do not allow disclaimer of
express or implied warranties in certain transactions, therefore, this statement may not apply to you.
This information could include technical inaccuracies or typographical errors. Changes are periodically
made to the information herein; these changes will be incorporated in new editions of the publication.
IBM may make improvements and/or changes in the product(s) and/or the program(s) described in this
publication at any time without notice.
Any references in this information to non-IBM Web sites are provided for convenience only and do not in
any manner serve as an endorsement of those Web sites. The materials at those Web sites are not part of
the materials for this IBM product and use of those Web sites is at your own risk.
IBM may use or distribute any of the information you supply in any way it believes appropriate without
incurring any obligation to you.
Licensees of this program who wish to have information about it for the purpose of enabling: (i) the
exchange of information between independently created programs and other programs (including this
one) and (ii) the mutual use of the information which has been exchanged, should contact:
IBM Corporation
Software Interoperability Coordinator, Department 49XA
3605 Highway 52 N
Rochester, MN 55901
U.S.A.
© Copyright IBM Corp. 2007, 2023 385
Such information may be available, subject to appropriate terms and conditions, including in some cases,
payment of a fee.
The licensed program described in this information and all licensed material available for it are provided
by IBM under terms of the IBM Customer Agreement, IBM International Program License Agreement, or
any equivalent agreement between us.
Any performance data contained herein was determined in a controlled environment. Therefore, the
results obtained in other operating environments may vary significantly. Some measurements may have
been made on development-level systems and there is no guarantee that these measurements will be
the same on generally available systems. Furthermore, some measurements may have been estimated
through extrapolation. Actual results may vary. Users of this document should verify the applicable data
for their specific environment.
Information concerning non-IBM products was obtained from the suppliers of those products, their
published announcements or other publicly available sources. IBM has not tested those products and
cannot confirm the accuracy of performance, compatibility or any other claims related to non-IBM
products. Questions on the capabilities of non-IBM products should be addressed to the suppliers of
those products.
All statements regarding IBM's future direction or intent are subject to change or withdrawal without
notice, and represent goals and objectives only.
This information contains examples of data and reports used in daily business operations. To illustrate
them as completely as possible, the examples include the names of individuals, companies, brands, and
products. All of these names are fictitious and any similarity to the names and addresses used by an
actual business enterprise is entirely coincidental.
COPYRIGHT LICENSE:
This information contains sample application programs in source language, which illustrate programming
techniques on various operating platforms. You may copy, modify, and distribute these sample programs
in any form without payment to IBM, for the purposes of developing, using, marketing or distributing
application programs conforming to the application programming interface for the operating platform
for which the sample programs are written. These examples have not been thoroughly tested under
all conditions. IBM, therefore, cannot guarantee or imply reliability, serviceability, or function of these
programs.
If you are viewing this information softcopy, the photographs and color illustrations may not appear.
Programming interface information
Programming interface information, if provided, is intended to help you create application software for
use with this program.
This book contains information on intended programming interfaces that allow the customer to write
programs to obtain the services of WebSphere MQ.
However, this information may also contain diagnosis, modification, and tuning information. Diagnosis,
modification and tuning information is provided to help you debug your application software.
Important: Do not use this diagnosis, modification, and tuning information as a programming interface
because it is subject to change.
Trademarks
IBM, the IBM logo, ibm.com®, are trademarks of IBM Corporation, registered in many jurisdictions
worldwide. A current list of IBM trademarks is available on the Web at "Copyright and trademark
information"www.ibm.com/legal/copytrade.shtml. Other product and service names might be trademarks
of IBM or other companies.
Microsoft and Windows are trademarks of Microsoft Corporation in the United States, other countries, or
both.
386 Notices
UNIX is a registered trademark of The Open Group in the United States and other countries.
Linux is a registered trademark of Linus Torvalds in the United States, other countries, or both.
This product includes software developed by the Eclipse Project (https://www.eclipse.org/).
Java and all Java-based trademarks and logos are trademarks or registered trademarks of Oracle and/or
its affiliates.
Notices 387
388 Monitoring and Performance for IBM MQ
IBM®
Part Number:
:N/P
)P1(