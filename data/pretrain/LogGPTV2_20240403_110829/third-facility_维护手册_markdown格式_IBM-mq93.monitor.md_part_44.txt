### Different Topic Strings in Queue Manager Networks

In IBM MQ, different topic strings are created within the queue manager network. This enables the queue manager on which a message is published to identify which other queue managers require a copy of the published message, matching their subscriptions.

### Balancing Producers and Consumers in Publish/Subscribe Networks

Balancing producers and consumers is crucial for optimal performance in asynchronous messaging. An imbalance can lead to a backlog of unconsumed messages, negatively impacting multiple applications. In a point-to-point topology, the relationship between consumers and producers is straightforward, allowing for easy identification and resolution of bottlenecks. However, in a publish/subscribe topology, this balance is more challenging to achieve.

#### Identifying Bottlenecks in Publish/Subscribe Topologies

To determine if publishers and subscribers are balanced, start with each subscription and trace back to the queue managers with publishers on the topic. Calculate the number of publications flowing to each subscriber from each queue manager. Publications that match a subscription on a remote queue manager (based on proxy subscriptions) are placed in a transmission queue. If multiple remote queue managers have proxy subscriptions for that publication, multiple copies of the message are sent to the transmission queue, each targeted for a different sender channel.

In a publish/subscribe cluster, these publications are directed to the `SYSTEM.INTER.QMGR.PUBS` queue on the remote queue managers hosting the subscriptions. In a hierarchy, each publication is targeted at the `SYSTEM.BROKER.DEFAULT.STREAM` queue or any other stream queues listed in the `SYSTEM.QPUBSUB.QUEUE.NAMELIST` on the remote queue managers. Each queue manager processes incoming messages and delivers them to the correct local subscriptions.

### Monitoring Points for Potential Bottlenecks

- **Subscription Queues:**
  - **Bottleneck:** The subscribing application is not consuming publications as quickly as they are being published.
  
- **`SYSTEM.INTER.QMGR.PUBS` Queue or Stream Queues:**
  - **Bottleneck:** The queue manager is receiving publications from one or more remote queue managers faster than it can distribute them to local subscriptions.
  - **Solution:** Consider making additional queue managers topic hosts to balance the publication workload. Note that this may affect message ordering across publications. Refer to "Topic host routing using multiple topic hosts for a single topic."

- **Channels Between Publishing and Subscribing Queue Managers:**
  - **Bottleneck:** One or more channels are not running, or messages are being published to the local queue manager faster than the channels can deliver them to the remote queue manager.
  - **Solution:** Define additional cluster receiver channels on the target queue manager to balance the publication workload. This can also affect message ordering. Consider moving to a multiple cluster transmission queue configuration for improved performance.

- **Queued Publish/Subscribe Interface:**
  - **Bottleneck:** Messages are being put by local publishing applications faster than the local queue manager can process them.
  - **Monitor:** 
    - `SYSTEM.BROKER.DEFAULT.STREAM` queue and any other stream queues listed in `SYSTEM.QPUBSUB.QUEUE.NAMELIST`.
    - `SYSTEM.BROKER.DEFAULT.SUBPOINT` queue and any other subpoint queues listed in `SYSTEM.QPUBSUB.SUBPOINT.NAMELIST`.

### Direct Routed vs. Topic Host Routed Clusters

- **Direct Routed Clusters:**
  - Information such as clustered topics and proxy subscriptions is pushed to all cluster members, regardless of active participation. This can create significant additional load. To mitigate, perform updates during off-peak times, define a smaller subset of queue managers, or switch to topic host routing.

- **Topic Host Routed Clusters:**
  - Provides precise control over which queue managers host each topic, reducing the number of connections and information passed between queue managers. Queue managers without subscriptions or publishers do not need to connect with topic hosts.

### Subscription Performance in Publish/Subscribe Networks

Distributed publish/subscribe in IBM MQ works by propagating knowledge of where subscriptions to different topic strings have been created in the queue manager network. This allows the queue manager on which a message is published to identify which other queue managers require a copy of the message to match their subscriptions.

#### Managing Publication and Subscription Flow

- **Individual Subscription Propagation:**
  - Only publications with matching subscriptions on a queue manager are forwarded.
  - **Pros:** Minimizes inter-queue manager traffic.
  - **Cons:** Significant overhead if there are many thousands of subscriptions or frequent changes.

- **Publish Everywhere:**
  - All publications are forwarded to all queue managers in the network.
  - **Pros:** No per-topic string proxy subscription overhead; no delay between subscription creation and message delivery.
  - **Cons:** Excessive network traffic if publications do not have matching subscriptions on each queue manager.

- **Setting Publish Everywhere:**
  - Use the `PROXYSUB(FORCE)` parameter on a high-level topic object to enable publish everywhere. This results in a single wildcard proxy subscription for all topics below the specified topic object.

### Restricting Proxy Subscription and Publication Flow

- **Consolidate Topic Strings:**
  - Reduce the number and transient nature of topic strings to minimize management overhead.

- **Restrict Publication and Subscription Scope:**
  - Keep publications and subscriptions local to the queue manager on which they are defined.

- **Block Subscriptions to Wildcarded Topics:**
  - Set the `WILDCARD` attribute to `BLOCK` to restrict the flow of proxy subscriptions containing wildcards.

### Monitoring Proxy Subscription Traffic in Clusters

- **Monitor:**
  - `SYSTEM.INTER.QMGR.FANREQ` queue on the subscriber queue manager.
  - `SYSTEM.INTER.QMGR.CONTROL` queue on all other queue managers in the cluster.
- **Implications:**
  - A significant message backlog implies either a high rate of subscription change or a malfunctioning queue manager.

### Managing the Number of Topics in a Topic Tree

- **Display TPCOUNT:**
  - Use the `DISPLAY PUBSUB ALL` command to monitor the number of topic nodes in the topic tree.
- **Modify TREELIFE:**
  - Adjust the `TREELIFE` attribute to reduce the lifetime of unused topics.
- **Restart the Queue Manager:**
  - As a last resort, restart the queue manager to reinitialize the topic tree and eliminate unused topics.

### Using Aspera Gateway for Improved Performance

The IBM AsperaÂ® faspio Gateway provides a fast TCP/IP tunnel that can significantly increase network throughput for IBM MQ, especially in high latency or packet-loss prone networks. However, for fast, reliable networks, using the Aspera gateway may decrease performance. Ensure to test network performance before and after implementing an Aspera gateway connection.

### Notices

This information was developed for products and services offered in the U.S.A. IBM may not offer the same products, services, or features in other countries. Consult your local IBM representative for details. Any reference to an IBM product, program, or service does not imply exclusivity. Users are responsible for evaluating and verifying the operation of non-IBM products, programs, or services.

IBM may have patents or pending patent applications covering subject matter described in this document. The furnishing of this document does not grant you any license to these patents. For license inquiries, contact the IBM Director of Licensing.

For more detailed information, refer to the IBM Customer Agreement, IBM International Program License Agreement, or equivalent agreements. Performance data was determined in a controlled environment, and actual results may vary. Information concerning non-IBM products was obtained from suppliers and public sources. IBM has not tested these products and cannot confirm the accuracy of performance, compatibility, or other claims. Future direction statements are subject to change or withdrawal without notice.

All examples and names used in this document are fictitious. Sample programs provided are for illustration and may be modified and distributed without payment to IBM. Photographs and color illustrations may not appear in softcopy versions. Programming interface information is intended to help you write application software but may include diagnosis, modification, and tuning information, which should not be used as a programming interface due to potential changes.

### Trademarks

IBM, the IBM logo, and ibm.com are trademarks of IBM Corporation, registered in many jurisdictions worldwide. Other product and service names may be trademarks of IBM or other companies. Microsoft and Windows are trademarks of Microsoft Corporation. UNIX is a registered trademark of The Open Group. Linux is a registered trademark of Linus Torvalds. Java and all Java-based trademarks and logos are trademarks or registered trademarks of Oracle and/or its affiliates.