    :::
[`--cache-sim`{.option}]{.term}
:   ::: para
    启用或者禁用缓存访问和缺失计数集合。默认值为
    `yes`{.literal}（启用）。
    :::
    ::: para
    注：禁用这个选项和 `--branch-sim`{.option} 选项让 Cachegrind
    误信息可以收集。
    :::
[`--branch-sim`{.option}]{.term}
:   ::: para
    启用或者禁用分支指令和无法预测计数集合。默认将其设定为
    `no`{.literal}（禁用），因为它可让 Cachegrind 延缓 25%。
    :::
    ::: para
    注：禁用这个选项和 `--cache-sim`{.option} 选项让 Cachegrind
    误信息可以收集。
    :::
:::
::: para
选项完整列表请参考
`/usr/share/doc/valgrind-version/valgrind_manual.pdf`{.filename}
中的文档。
:::
:::
::: section
::: titlepage
## [⁠]{#main-memory.html#idm140329724142752}5.3.3. 使用 Massif 查看堆和栈空间配置 {.title}
:::
::: para
Massif 使用指定的程序测量堆
空间，包括有用空间以及用于记录和对齐而分配的额外空间。它可以帮助您减少程序使用的内存量，增加程序速度，并减少程序耗尽机器
swap 空间的可能性。Massif 还可以提供有关您程序用来分配堆
内存的部分的详情。使用 Massif 运行的程序的运行速度比其一般执行速度慢 20
倍。
:::
::: para
要给出程序堆 用量信息，请将 `massif`{.literal} 指定为您要使用的 Valgrind
工具：
:::
``` screen
# valgrind --tool=massif program
```
::: para
Massif 收集的配置数据会写入一个文件，默认为
`massif.out.pid`{.filename}，其中 *pid* 是指定的 *program* 的进程 ID。
:::
::: para
还可以使用 `ms_print`{.command} 命令绘制配置数据图，比如：
:::
``` screen
# ms_print massif.out.pid
```
::: para
这样可以生成显示程序执行期间内存消耗的图表，以及有关在程序中不同点进行分配的地点详情，其中包括峰值内存分配点。
:::
::: para
Massif 提供大量命令行选项可用于该工具的直接输出结果。这些可用选项包括：
:::
::: variablelist
[`--heap`{.option}]{.term}
:   ::: para
    指定是否执行堆 分析。默认值为 `yes`{.literal}。将此选项设定为
    `no`{.literal} 即可禁用堆 分析。
    :::
[`--heap-admin`{.option}]{.term}
:   ::: para
    指定启用堆 分析时每个块用于管理的字节数。默认每个块有 `8`{.literal}
    字节。
    :::
[`--stacks`{.option}]{.term}
:   ::: para
    指定是否执行栈分析。默认值为
    `no`{.literal}（禁用）。要启用栈分析，请将这个选项设定为
    `yes`{.literal}，但请注意这样做会极大降低 Massif 速度。另外还要注意
    Massif 假设开始时主栈大小为 0
    以便更好的显示要分析的程序的栈所控制的比例。
    :::
[`--time-unit`{.option}]{.term}
:   ::: para
    指定用来分析的时间单位。这个选项三个有效值：执行的指令（`i`{.literal}），即默认值，用于大多数情况；即时（`ms`{.literal}，单位毫秒），可用于某些特定事务；以及在堆（/或者）栈中分配/取消分配的字节（`B`{.literal}），用于很少运行的程序，且用于测试目的，因为它最容易在不同机器中重现。这个选项在使用
    `ms_print`{.command} 输出结果画图是游泳。
    :::
:::
::: para
选项完整列表请参考
`/usr/share/doc/valgrind-version/valgrind_manual.pdf`{.filename}
中的文档。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#main-memory.html#s-memory-captun}5.4. 容量调节 {.title}
:::
::: para
本小节总结了内存、内核以及文件系统容量，与每一部分相关的参数以及调节这些参数所涉及的交换条件。
:::
::: para
要在调节时临时设定这些值，请将所需值 echo 到 proc
文件系统中的适当文件中。例如：要将 *`overcommit_memory`* 临时设定为
`1`{.literal}，请运行：
:::
``` screen
# echo 1 > /proc/sys/vm/overcommit_memory
```
::: para
注：到 proc 文件系统中该参数的路径要具体看此变更所影响的系统。
:::
::: para
要永久设定这些值，则需要使用 `sysctl`{.command}
命令。有关详情请参考*《部署指南》*，网址为
。
:::
::: variablelist
**与容量相关的内存可调参数**
::: para
:::
::: para
以下参数位于 proc 文件系统的 `/proc/sys/vm/`{.filename} 目录中。
:::
[*`overcommit_memory`*]{.term}
:   ::: para
    规定决定是否接受超大内存请求的条件。这个参数有三个可能的值：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `0`{.literal} ---
        默认设置。内核执行启发式内存过量使用处理，方法是估算可用内存量，并拒绝明显无效的请求。遗憾的是因为内存是使用启发式而非准确算法计算进行部署，这个设置有时可能会造成系统中的可用内存超载。
        :::
    -   ::: para
        `1`{.literal} ---
        内核执行无内存过量使用处理。使用这个设置会增大内存超载的可能性，但也可以增强大量使用内存任务的性能。
        :::
    -   ::: para
        `2`{.literal} --- 内存拒绝等于或者大于总可用 swap 大小以及
        *`overcommit_ratio`* 指定的物理 RAM
        比例的内存请求。如果您希望减小内存过度使用的风险，这个设置就是最好的。
        :::
        ::: note
        ::: admonition_header
        **注意**
        :::
        ::: admonition
        ::: para
        只为 swap 区域大于其物理内存的系统推荐这个设置。
        :::
        :::
        :::
    :::
[*`overcommit_ratio`*]{.term}
:   ::: para
    将 *`overcommit_memory`* 设定为 `2`{.literal} 时，指定所考虑的物理
    RAM 比例。默认为 `50`{.literal}。
    :::
[*`max_map_count`*]{.term}
:   ::: para
    规定某个进程可能使用的最大内存映射区域。在大多数情况下，默认值
    `65530`{.literal}
    就很合适。如果您的程序需要映射比这个文件数更多的文件可增大这个值。
    :::
[*`nr_hugepages`*]{.term}
:   ::: para
    规定在内核中配置的超大页数。默认值为
    0。只有系统中有足够的连续可用页时方可分配（或者取消分配）超大页。为这个参数保留的页无法用于其他目的。安装的文件
    `/usr/share/doc/kernel-doc-kernel_version/Documentation/vm/hugetlbpage.txt`{.filename}
    中有详细的内容。
    :::
:::
::: variablelist
**与容量相关的内核可调参数**
::: para
:::
::: para
以下参数位于 proc 文件系统的 `/proc/sys/kernel/`{.filename} 目录中。
:::
[*`msgmax`*]{.term}
:   ::: para
    以字节为单位规定信息队列中任意信息的最大允许大小。这个值一定不能超过该队列的大小（*`msgmnb`*）。默认值为
    `65536`{.literal}。
    :::
[*`msgmnb`*]{.term}
:   ::: para
    以字节为单位规定单一信息队列的最大值。默认为 `65536`{.literal}
    字节。
    :::
[*`msgmni`*]{.term}
:   ::: para
    规定信息队列识别符的最大数量（以及队列的最大数量）。64
    位架构机器的默认值为 `1985`{.literal}；32 位架构机器的默认值为
    `1736`{.literal}。
    :::
[*`shmall`*]{.term}
:   ::: para
    以字节为单位规定一次在该系统中可以使用的共享内存总量。64
    位架构机器的默认值为 `4294967296`{.literal}；32 位架构机器的默认值为
    `268435456`{.literal}。
    :::
[*`shmmax`*]{.term}
:   ::: para
    以字节为单位规定内核可允许的最大共享内存片段。64
    位架构机器的默认值为 `68719476736`{.literal}；32
    位架构机器的默认值为
    `4294967295`{.literal}。注：但内核支持的值比这个值要多得多。
    :::
[*`shmmni`*]{.term}
:   ::: para
    规定系统范围内最大共享内存片段。在 64 位和 32
    位架构机器中的默认值都是 `4096`{.literal}。
    :::
[*`threads-max`*]{.term}
:   ::: para
    规定一次内核使用的最大线程（任务）数。默认值与 *`max_threads`*
    相同。使用的方程式是：
    :::
    ``` screen
    max_threads = mempages / (8 * THREAD_SIZE / PAGE_SIZE )
    ```
    ::: para
    *`threads-max`* 的最小值为 `20`{.literal}。
    :::
:::
::: variablelist
**与容量相关的文件系统可调参数**
::: para
:::
::: para
以下参数位于 proc 文件系统的 `/proc/sys/fs/`{.filename} 目录中。
:::
[*`aio-max-nr`*]{.term}
:   ::: para
    规定在所有活动异步 I/O 上下文中可允许的最多事件数。默认值为
    `65536`{.literal}。注：更改这个值不会预先分配或者重新定义内核数据结构大小。
    :::
[*`file-max`*]{.term}
:   ::: para
    列出内核分配的文件句柄最大值。默认值与内核中的
    *`files_stat.max_files`* 映射，该参数可将最大值设定为
    `(mempages * (PAGE_SIZE / 1024)) / 10`{.literal} 或者
    `NR_FILE`{.literal}（在红帽企业版 Linux 中是
    8192）。增大这个值可解决由于缺少文件句柄而造成的错误。
    :::
:::
::: variablelist
**Out-of-Memory Kill 可调参数**
::: para
内存不足（OOM）指的是所有可用内存，包括 swap
空间都已被分配的计算状态。默认情况下，这个状态可造成系统
panic，并停止如预期般工作。但将 *`/proc/sys/vm/panic_on_oom`* 参数设定为
`0`{.literal} 会让内核在出现 OOM 时调用 `oom_killer`{.methodname}
功能。通常 `oom_killer`{.methodname} 可杀死偷盗进程，并让系统正常工作。
:::
::: para
可在每个进程中设定以下参数，提高您对被 `oom_killer`{.methodname}
功能杀死的进程的控制。它位于 proc 文件系统中 `/proc/pid/`{.filename}
目录下，其中 *pid* 是进程 ID。
:::
[*`oom_adj`*]{.term}
:   ::: para
    定义 `-16`{.literal} 到 `15`{.literal}
    之间的一个数值以便帮助决定某个进程的 *`oom_score`*。*`oom_score`*
    值越高，被 `oom_killer`{.methodname} 杀死的进程数就越多。将
    *`oom_adj`* 值设定为 -17 则为该进程禁用 `oom_killer`{.methodname}。
    :::
    ::: {.important xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **重要**
    :::