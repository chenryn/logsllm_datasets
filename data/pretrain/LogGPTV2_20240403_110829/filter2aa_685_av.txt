value
Sets the value of the global counter 
variable to the value of “value”
Spawns two new threads that will call the increment 
procedure with 10_000 as the argument
Waits until all the threads are finished
Displays the value of the counter
Licensed to   
174
CHAPTER 6
Parallelism
In this example, the increment procedure is GC safe because the global variable
counter it accesses is of type int, which is a value type. The increment procedure
increments the global counter variable x times. The procedure is spawned twice,
which means that there will be two increment procedures executing at the same time.
The fact that they’re both reading, incrementing, and then writing the incremented
value to the global counter variable in discrete steps means that some increments may
be missed.
SHARING MEMORY THAT MUST BE ALLOCATED ON THE HEAP
Value types, such as
integers, can exist on the stack (or in the executable’s data section if the value
is stored in a global variable), but reference types such as string, seq[T] and
ref T can’t. Nim supports the sharing of reference types, but it won’t manage
the memory for you. This may change in a future version of Nim, but cur-
rently you must use a procedure called allocShared defined in the system
module to allocate shared memory manually.
Save listing 6.21 as race_condition.nim, and then compile it without the -d:release
flag and run it. Run it a couple of times and note the results. The results should appear
random, and should almost never display the expected value of 20,000. Figure 6.5
shows what the execution of listing 6.21 looks like.
 Preventing race conditions is very important because whenever a bug occurs due
to a race condition, it’s almost always nondeterministic. The bug will be very difficult
to reproduce, and once it is reproduced, debugging it will be even harder because the
mere act of doing so may cause the bug to disappear.
 Now that you know what race conditions are, let’s look at ways to prevent them.
6.5.1
Using guards and locks to prevent race conditions
Just like most languages, Nim provides synchronization mechanisms to ensure that
resources are only used by a single thread at a time.
 One of these mechanisms is a lock. It enforces limits on access to a resource, and
it’s usually paired with a single resource. Before that resource is accessed, the lock is
acquired, and after the resource is accessed, it’s released. Other threads that try to
access the same resource must attempt to acquire the same lock, and if the lock has
already been acquired by another thread, the acquire operation will block the thread
until the lock is released. This ensures that only one thread has access to the resource.
 Locks work very well, but they aren’t assigned to any variables by default. They can
be assigned using a guard. When a variable is guarded with a specific lock, the com-
piler will ensure that the lock is locked before allowing access. Any other access will
result in a compile-time error.
Licensed to   
175
Dealing with race conditions
The following listing shows how a new Lock, together with a guard, can be defined.
import threadpool, locks
var counterLock: Lock
initLock(counterLock)
var counter {.guard: counterLock.} = 0
proc increment(x: int) =
for i in 0 .. 
176
CHAPTER 6
Parallelism
spawn increment(10_000)
spawn increment(10_000)
sync()
echo(counter)
Save listing 6.22 as unguarded_access.nim, and then compile it. The compilation
should fail with “unguarded_access.nim(9, 17) Error: unguarded access: counter.”
This is because the counter variable is protected by the guard, which ensures that any
access to counter must occur after the counterLock lock is locked. Let’s fix this error
by locking the counterLock lock.
import threadpool, locks
var counterLock: Lock
initLock(counterLock)
var counter {.guard: counterLock.} = 0
proc increment(x: int) =
for i in 0 .. 
177
Dealing with race conditions
Nim implements channels in the channels module of the standard library. This mod-
ule is part of system, so it doesn’t need to be explicitly imported.
 A channel is created as a global variable, allowing every thread to send and receive
messages through it. Once a channel is defined, it must be initialized using the open
procedure. Listing 6.24 defines and initializes a new chan variable of type Channel
[string]. You can specify any type inside the square brackets, including your own cus-
tom types.
var chan: Channel[string]
open(chan)
Values can be sent using the send procedure and received using the recv procedure.
The following listing shows how to use both procedures.
import os, threadpool
var chan: Channel[string]
open(chan)
proc sayHello() =
sleep(1000)
chan.send("Hello!")
spawn sayHello()
doAssert chan.recv() == "Hello!"
The recv procedure will block until a message is received. You can use the tryRecv
procedure to get nonblocking behavior; it returns a tuple consisting of a Boolean,
which indicates whether or not data was received, and the actual data.
 To give you a better idea of how channels work, let’s implement listing 6.23 with
channels instead of locks. The following listing shows parallel_incrementer.nim
implemented using channels.
Listing 6.24
Initializing a channel using open
Listing 6.25
Sending and receiving data through a channel
send
recv
Figure 6.6
Representation 
of a FIFO channel
The os module defines the sleep procedure. 
The threadpool module is needed for spawn.
The sayHello procedure will sleep its thread for 1 
second before sending a message through chan.
Executes the sayHello procedure in another thread
Blocks the main thread until a "Hello!" is received
Licensed to   
178
CHAPTER 6
Parallelism
import threadpool
var resultChan: Channel[int]
open(resultChan)
proc increment(x: int) =
var counter = 0
for i in 0 .. 
179
Summary
6.6
Summary
 The apparent execution of processes at the same time is called concurrency,
whereas true simultaneous execution of processes is called parallelism.
 Each thread in Nim has a separate heap that’s managed by a separate garbage
collector.
 Threads can be created using the createThread procedure defined in the
threads module.
 A procedure can be added to a thread pool using the spawn procedure defined
in the threadpool module.
GC safety, which is enforced by the compiler, ensures that garbage-collected
data isn’t shared between threads.
 Data parsing can be performed using regular expressions, the split proce-
dure, or the parseutils module.
 Threads can be used to parallelize a parser.
 Locks or channels can be used to synchronize the execution of threads to pre-
vent race conditions.
Licensed to   
180
Building a Twitter clone
Web applications have become extremely popular in recent years because of their
convenience and the widespread use of web browsers. Many people have taken
advantage of this to become millionaires, developing the likes of Twitter, Facebook,
and Google.
 Large web applications consisting of many components are typically written in
several different programming languages, chosen to match the requirements of the
components. In most cases, the core infrastructure is written in a single language,
with a few small specialized components being written in one or two different pro-
gramming languages. YouTube, for example, uses C, C++, Java, and Python for its
many different components, but the core infrastructure is written in Python.
This chapter covers
 Developing a Twitter clone in Nim
 Storing and querying for data in a SQL database
 Generating HTML and sending it to the user’s 
browser
 Deploying your web application
Licensed to   
181
Architecture of a web application
 Thanks to the great speed of development that Python provides, YouTube was able
to evolve by quickly responding to changes and implementing new ideas rapidly. In
specialized cases, C extensions were used to achieve greater performance.
 Smaller web applications are typically written in a single programming language.
The choice of language differs, but it’s typically a scripting language like Python,
Ruby, or PHP. These languages are favored for their expressive and interpreted char-
acteristics, which allow web applications to be iterated on quickly.
 Unfortunately, applications written in those languages are typically slow, which has
resulted in problems for some major websites. For example, Twitter, which was initially
written in Ruby, has recently moved to Scala because Ruby was too slow to handle the
high volume of tweets posted by users every day.
 Websites can also be written in languages such as C++, Java, and C#, which are com-
piled. These languages produce very fast applications, but developing in them is not
as fast as in Python or other scripting languages. This is likely due to the slow compile
times in those languages, which means that you must spend more time waiting to test
your application after you’ve made changes to it. Those languages are also not as
expressive as Python or other scripting languages.
 Nim is a hybrid. It’s a compiled language that takes inspiration from scripting lan-
guages. In many ways, it’s as expressive as any scripting language and as fast as any
compiled language. Compilation times in Nim are also very fast, which makes Nim a
good language for developing efficient web applications.
 This chapter will lead you through the development of a web application. Specifi-
cally, it will show you how to develop a web app that’s very similar to Twitter. Of course,
developing a full Twitter clone would take far too much time and effort. The version
developed in this chapter will be significantly simplified.
 You’ll need some knowledge of SQL for this chapter. Specifically, you’ll need to
understand the structure and semantics of common SQL statements, including CREATE
TABLE and SELECT.
7.1
Architecture of a web application
Developers make use of many different architectural patterns when designing a web
application. Many web frameworks are based on the very popular model-view-control-
ler (MVC) pattern and its variants. One example of an MVC framework is Ruby on Rails.
 MVC is an architectural pattern that has been traditionally used for graphical user
interfaces (GUIs) on the desktop. But this pattern also turned out to be very good for
web applications that incorporate a user-facing interface. The MVC pattern is com-
posed of three distinct components that are independent of each other: the model,
which acts as a data store; the view, which presents data to the user; and the controller,
which gives the user the ability to control the application. Figure 7.1 shows how the
three different components communicate.
 Consider a simple calculator application consisting of a number of buttons and a
display. In this case, the model would be a simple database that stores the numbers that
Licensed to   
182
CHAPTER 7
Building a Twitter clone
have been typed into the calculator, the view would be the display that shows the result
of the current calculation, and the controller would detect any button presses and con-
trol the view and model accordingly. Figure 7.2 shows a simple graphical calculator
with the different components labeled.
 It’s a good idea to design web applications using the MVC pattern, especially when
writing very large applications. This pattern ensures that your code doesn’t mix data-
base code, HTML generation code, and logic code together, leading to easier mainte-
nance for large web applications. Depending on the use case, variations on this
pattern can also be used, separating code more or less strictly. Stricter separation
would mean separating the web application into more components than just the
model, view, and controller, or separating it into further subgroups derived from the
model, view, or controller.
 When you design the architecture of a web application, you may already naturally
separate your code into logical independent units. Doing so can achieve the same
benefits as using the MVC pattern, with the additional benefit of making your code-
base more specific to the problem you’re solving. It isn’t always necessary to abide by
Model
View
Controller
Updates
Manipulates