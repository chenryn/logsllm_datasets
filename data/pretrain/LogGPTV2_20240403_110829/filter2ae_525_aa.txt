**Author：Longofo@Knownsec 404 Team**  
**Time: September 4, 2019**  
**Chinese version:**
### Origin
I first learned about this tool through @Badcode, which was putted forward in
an topic in Black Hat 2018.This is a static-based analysis of bytecodes that
uses known tricks to automatically find the deserialization chain tool from
source to sink. I watched the author's [speech
video](https://www.youtube.com/watch?v=wPbW6zQ52w8) and
[PPT](https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf) on Black Hat several times, I
want to get more information about the principle of this tool from the
author's speech and PPT, but some places are really confusing. However, the
author has open sourced this
[tool](https://github.com/JackOfMostTrades/gadgetinspector), but did not give
detailed documentation, and there are very few analytical articles on this
tool. I saw an analysis of the tool by Ping An Group. From the description of
the article, they should have this tool a certain understanding and some
improvements, but did not explain too much detail in the article. Later, I
tried to debug this tool and roughly clarified the working principle of this
tool. The following is the analysis process of this tool, as well as the idea
of my future work and improvement.
### About This Tool
  * This tool does not use to find vulnerabilities. Instead, it uses the known source->...->sink tricks or its similar features to discover branch utilization chains or new utilization chains.
  * This tool is looking for a chain in the classpath of the entire application.
  * This tool performs some reasonable risk estimation (stain judgment, taint transfer, etc.).
  * This tool will generate false positives and not false negatives (in fact, it will still be missed, which is determined by the strategy used by the author and can be seen in the analysis below).
  * This tool is based on bytecode analysis. For Java applications, many times we don't have source code, only War package, Jar package or class file.
  * This tool does not generate Payload that can be directly utilized. The specific utilization structure also requires manual participation.
### Serialization and Deserialization
Serialization is a process of converting the state information of an object
into a form that can be stored or transmitted. The converted information can
be stored on a disk. In the process of network transmission, it can be in the
form of byte, XML, JSON, etc. The reverse process of restoring information in
bytes, XML, JSON, etc into objects is called deserialization.
In Java, object serialization and deserialization are widely used in RMI
(remote method invocation) and network transmission.
### Serialization and Deserialization Libraries in Java
  * JDK(ObjectInputStream)
  * XStream(XML,JSON)
  * Jackson(XML,JSON)
  * Genson(JSON)
  * JSON-IO(JSON)
  * FlexSON(JSON)
  * Fastjson(JSON)
  * ...
Different deserialization libraries have different behaviors when
deserializing different classes. Different "magic methods" will be **called
automatically** , and these automatically called methods can be used as
deserialization entry point(source). If these automatically called methods
call other sub-methods, then a sub-method in the call chain can also be used
as the source, which is equivalent to knowing the front part of the call
chain, starting from a sub-method to find different branches. Some dangerous
methods (sink) may be reached through layer calls of methods.
  * ObjectInputStream
For example, a class implements the Serializable interface, then
ObjectInputStream.readobject will automatically finds the
readObject、readResolve and etc methods of the class when deserialization.
For example, a class implements the Externalizable interface, then
ObjectInputStream.readobject will automatically finds the readExternal and etc
methods of this class when deserialization.
  * Jackson
When ObjectMapper.readValue deserialization one class, it will automatically
finds the no-argument constructor of the deserialization class、the constructor
that contains a base type parameter、the setter of the property、the getter of
the property, and so on.
  * ...
In the next analysis, I used the JDK's own ObjectInputStream as an example.
### Control Data Type => Control Code
The author said that in the deserialization vulnerability, if we control the
data type, we control the code. What does it mean? According to my
understanding, I wrote the following example:
    public class TestDeserialization {
        interface Animal {
            public void eat();
        }
        public static class Cat implements Animal,Serializable {
            @Override
            public void eat() {
                System.out.println("cat eat fish");
            }
        }
        public static class Dog implements Animal,Serializable {
            @Override
            public void eat() {
                try {
                    Runtime.getRuntime().exec("calc");
                } catch (IOException e) {
                    e.printStackTrace();
                }
                System.out.println("dog eat bone");
            }
        }
        public static class Person implements Serializable {
            private Animal pet;
            public Person(Animal pet){
                this.pet = pet;
            }
            private void readObject(java.io.ObjectInputStream stream)
                    throws IOException, ClassNotFoundException {
                pet = (Animal) stream.readObject();
                pet.eat();
            }
        }
        public static void GeneratePayload(Object instance, String file)
                throws Exception {
            //Serialize the constructed payload and write it to the file
            File f = new File(file);
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
            out.writeObject(instance);
            out.flush();
            out.close();
        }
        public static void payloadTest(String file) throws Exception {
            //Read the written payload and deserialize it
            ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));
            Object obj = in.readObject();
            System.out.println(obj);
            in.close();
        }
        public static void main(String[] args) throws Exception {
            Animal animal = new Dog();
            Person person = new Person(animal);
            GeneratePayload(person,"test.ser");
            payloadTest("test.ser");
    //        Animal animal = new Cat();
    //        Person person = new Person(animal);
    //        GeneratePayload(person,"test.ser");
    //        payloadTest("test.ser");
        }
    }
For convenience I write all classes in a class for testing. In the Person
class, there is an attribute pet of the Animal class, which is the interface
between Cat and Dog. In serialization, we can control whether Per's pet is a
Cat object or a Dog object, so in the deserialization, the specific direction
of `pet.eat()` in readObject is different. If pet is a Cat class object, it
will not go to the execution of the harmful code
`Runtime.getRuntime().exec("calc");`, but if pet is a Dog class object, it
will go to the harmful code.
Even though sometimes a class property has been assigned a specific object
when declaration, it can still be modified by reflection in Java. as follows:
    public class TestDeserialization {
        interface Animal {
            public void eat();
        }
        public static class Cat implements Animal, Serializable {
            @Override
            public void eat() {
                System.out.println("cat eat fish");
            }                           
        }
        public static class Dog implements Animal, Serializable {
            @Override
            public void eat() {
                try {
                    Runtime.getRuntime().exec("calc");
                } catch (IOException e) {
                    e.printStackTrace();
                }
                System.out.println("dog eat bone");
            }
        }
        public static class Person implements Serializable {
            private Animal pet = new Cat();
            private void readObject(java.io.ObjectInputStream stream)
                    throws IOException, ClassNotFoundException {
                pet = (Animal) stream.readObject();
                pet.eat();
            }
        }
        public static void GeneratePayload(Object instance, String file)
                throws Exception {
            //Serialize the constructed payload and write it to the file
            File f = new File(file);
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
            out.writeObject(instance);
            out.flush();
            out.close();
        }
        public static void payloadTest(String file) throws Exception {
            //Read the written payload and deserialize it
            ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));
            Object obj = in.readObject();
            System.out.println(obj);
            in.close();
        }
        public static void main(String[] args) throws Exception {
            Animal animal = new Dog();
            Person person = new Person();
            //Modify private properties by reflection
            Field field = person.getClass().getDeclaredField("pet");
            field.setAccessible(true);
            field.set(person, animal);
            GeneratePayload(person, "test.ser");
            payloadTest("test.ser");
        }
    }
In the Person class, you can't assign a value to pet through a constructor or
setter method or other methods. The attribute is already defined as an object
of the Cat class when it is declared, but use reflection can modify pet to the
object of the Dog class, so when deserialization, it still go to the harmful
code.
This is just my own view for author: "Control the data type, you control the
code". In Java deserialization vulnerability, in many cases is to use Java's
polymorphic feature to control the direction of the code and finally achieve
the purpose of malicious.
### Magic Method
In the above example, we can see that the readobject method of Person is not
called by manually when deserializing. It is called automatically when the
ObjectInputStream deserializes the object. The author call the methods that
will be automatically to "Magic method".
Several common magic methods when deserializing with ObjectInputStream:
  * Object.readObject()
  * Object.readResolve()
  * Object.finalize()
  * ...
Some serializable JDK classes implement the above methods and also
automatically call other methods (which can be used as known entry points):
  * HashMap
  * Object.hashCode()
  * Object.equals()
  * PriorityQueue
  * Comparator.compare()
  * Comparable.CompareTo()
  * ...
Some sinks:
  * Runtime.exec(), the simplest and straightforward way to execute commands directly in the target environment
  * Method.invoke(), which requires proper selection of methods and parameters, and execution of Java methods via reflection
  * RMI/JNDI/JRMP, etc., indirectly realize the effect of arbitrary code execution by referencing remote objects
  * ...
The author gives an example from Magic Methods(source)->Gadget
Chains->Runtime.exec(sink):
The above HashMap implements the "magic method" of readObject and calls the
hashCode method. Some classes implement the equals method to compare equality
between objects (generally the equals and hashCode methods are implemented
simultaneously). It can be seen from the figure that
`AbstractTableModel$ff19274a` implements the hashCode method, which calls the
`f.invoke` method, f is the IFn object, and f can be obtained by the attribute
`__clojureFnMap`. IFn is an interface. As mentioned above, if the data type is
controlled, the code direction is controlled. So if we put an object of the
implementation class FnCompose of the IFn interface in `__clojureFnMap` during
serialization, we can control the `f.invoke` method to walk the
`FnCompose.invoke` method, and then control the f1 and f2 in FnCompose.invoke.
FnConstant can reach FnEval.invoke (for the `f.invoke` in
AbstractTableModel$ff19274a.hashcode, which implementation class of IFn is
selected, according to the test of this tool and the analysis of the decision
principle, the breadth priority will be selected. The short path, which is
FnEval.invoke, this is why human participation can be seen in the later sample
analysis).
With this chain, we only need to find the vulnerability point that triggered
the chain. Payload uses the JSON format as follows:
    {
        "@class":"java.util.HashMap",
        "members":[
            2,
            {
                "@class":"AbstractTableModel$ff19274a",
                "__clojureFnMap":{
                    "hashcode":{
                        "@class":"FnCompose",
                        "f1":{"@class","FnConstant",value:"calc"},
                        "f2":{"@class":"FnEval"}
                    }
                }
            }
        ]
    }
### Gadgetinspector Workflow
As the author said, it took exactly five steps:
            // Enumerate all classes and all methods of the class
            if (!Files.exists(Paths.get("classes.dat")) || !Files.exists(Paths.get("methods.dat"))
                    || !Files.exists(Paths.get("inheritanceMap.dat"))) {
                LOGGER.info("Running method discovery...");
                MethodDiscovery methodDiscovery = new MethodDiscovery();
                methodDiscovery.discover(classResourceEnumerator);
                methodDiscovery.save();
            }
            //Generate passthrough data flow
            if (!Files.exists(Paths.get("passthrough.dat"))) {
                LOGGER.info("Analyzing methods for passthrough dataflow...");
                PassthroughDiscovery passthroughDiscovery = new PassthroughDiscovery();
                passthroughDiscovery.discover(classResourceEnumerator, config);
                passthroughDiscovery.save();
            }
            //Generate passthrough call graph
            if (!Files.exists(Paths.get("callgraph.dat"))) {
                LOGGER.info("Analyzing methods in order to build a call graph...");
                CallGraphDiscovery callGraphDiscovery = new CallGraphDiscovery();
                callGraphDiscovery.discover(classResourceEnumerator, config);
                callGraphDiscovery.save();
            }
            //Search for available sources
            if (!Files.exists(Paths.get("sources.dat"))) {
                LOGGER.info("Discovering gadget chain source methods...");
                SourceDiscovery sourceDiscovery = config.getSourceDiscovery();
                sourceDiscovery.discover();
                sourceDiscovery.save();
            }
            //Search generation call chain
            {
                LOGGER.info("Searching call graph for gadget chains...");
                GadgetChainDiscovery gadgetChainDiscovery = new GadgetChainDiscovery(config);
                gadgetChainDiscovery.discover();
            }
#### Step1 Enumerates All Classes and All Methods of Each Class
To perform a search of the call chain, you must first have information about
all classes and all class methods:
    public class MethodDiscovery {
        private static final Logger LOGGER = LoggerFactory.getLogger(MethodDiscovery.class);
        private final List discoveredClasses = new ArrayList<>();//Save all class information
        private final List discoveredMethods = new ArrayList<>();//Save all methods information
        ...
        ...
        public void discover(final ClassResourceEnumerator classResourceEnumerator) throws Exception {
            //classResourceEnumerator.getAllClasses() gets all the classes at runtime (JDK rt.jar) and all classes in the application to be searched
            for (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) {
                try (InputStream in = classResource.getInputStream()) {
                    ClassReader cr = new ClassReader(in);
                    try {
                        cr.accept(new MethodDiscoveryClassVisitor(), ClassReader.EXPAND_FRAMES);//Save the method information to discoveredMethods by manipulating the bytecode through the ASM framework and saving the class information to this.discoveredClasses
                    } catch (Exception e) {
                        LOGGER.error("Exception analyzing: " + classResource.getName(), e);
                    }
                }
            }
        }
        ...
        ...
        public void save() throws IOException {
            DataLoader.saveData(Paths.get("classes.dat"), new ClassReference.Factory(), discoveredClasses);//Save class information to classes.dat
            DataLoader.saveData(Paths.get("methods.dat"), new MethodReference.Factory(), discoveredMethods);//Save method information to methods.dat
            Map classMap = new HashMap<>();
            for (ClassReference clazz : discoveredClasses) {
                classMap.put(clazz.getHandle(), clazz);
            }
            InheritanceDeriver.derive(classMap).save();//Find all inheritance relationships and save
        }
    }
Let's see what classes.dat and methods.dat look like:
**classes.dat**
two more characteristic ones: