wave. A stabilization wave can propagate the “correction”
action that makes a system converge to a legitimate state, but
a mistakenly initiated stabilization wave can propagate faults
far away from where they initially occurred, as shown in Fig-
ure 2. To prevent a mistakenly initiated stabilization wave
from propagating faults unbounded, the containment wave is
introduced.
Containing the stabilization wave A containment wave is
initiated from a node that is a “potential source of fault propa-
gation” (simply called source of fault propagation hereafter).
A node is a source of fault propagation if its distance value is
the smallest among nodes within its 1-hop neighborhood (in-
cluding itself) that are not involved in any containment wave,
but either the node is not the destination node, or is its distance
value is not 0 even if it is the destination node. For example,
node v8 in Figure 2(a) is a source of fault propagation. The
containment wave propagates along the same paths as those
by the stabilization wave which propagates faults from the
source of fault propagation. And the containment wave prop-
agates faster than the stabilization wave such that it is able to
catch up with and stop the stabilization wave.
However, a containment wave can be mistakenly initiated
due to state corruption. For example, in Figure 2(a), if the
state of v8 is corrupted such that d.v8 = 4, node v5 will be-
come a source of fault propagation and a containment wave
will be initiated at v5. To prevent a mistakenly initiated
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:56:18 UTC from IEEE Xplore.  Restrictions apply. 
containment wave from propagating unbounded, the super-
containment wave is introduced.
Fault tolerance of the containment wave A node that has
mistakenly initiated a containment wave will detect that it
should not have initiated the containment wave after time at
most proportional to the perturbation size. Then it will initi-
ate a super-containment wave that propagates along the same
paths as those by the mistakenly initiated containment wave.
Since the super-containment wave propagates faster than the
containment wave, the super-containment wave will catch up
with and stop the containment wave.
For the above wave-layering approach to work, the super-
containment wave must self-stabilize itself locally upon per-
turbations, otherwise, there is no end to the layering proce-
dure. This is achieved by ensuring that the super-containment
wave only uses variables deﬁned for the stabilization wave
and containment wave, and no extra variable is introduced for
the super-containment wave.
Loop freedom In the basic distributed Bellman-Ford algo-
rithm, loops can form during stabilization, which leads to the
bouncing effect and count-to-inﬁnity problem [6] that delay
the stabilization of a system and violate the time constraint
of local stabilization. Therefore, in order to circumvent these
two problems, our protocol avoids forming loops during stabi-
lization, which, together with local fault containment, guaran-
tees that the stabilization time is a function of the perturbation
size in the worst case. Interestingly, loops can be avoided dur-
ing stabilization just via the containment wave. The intuition
is that a node which can select one of its descendant as its new
parent (i.e. its next-hop) in the basic distributed Bellman-Ford
algorithm becomes a source of fault propagation according to
our deﬁnition. Therefore, a containment wave will be initi-
ated at such a node, which guarantees loop freedom because
no loop is formed in any containment wave.
4.4 Protocol design
The protocol LSRP (Local Stabilizing shortest path Rout-
ing Protocol) is shown in Figure 4, where the constants, vari-
ables, and protocol actions for each node i in a system are
presented.
Constants There are six constants used in the protocol, that
is, r, ds, dc, dsc, L, and U. r is the ID of the destination node
in a system to which all the other nodes in the system need
to ﬁnd the shortest path. ds, dc, and dsc are used to control
the propagation speed of the stabilization wave, containment
wave, and super-containment wave respectively. L and U can
be any constant numbers as long as 0 ≤ L ≤ U.
(When
implementing LSRP in a real network, L and U can be chosen
to reﬂect network properties, as discussed in [16].)
To guarantee local stabilization, ds, dc, and dsc should be
such that ds > max{α · dc, dc + U − L}, dc > max{α ·
dsc, dsc + U − L}, and dsc ≥ 0, where α is the upper bound
on the ratio of clock rates between any two neighboring nodes.
(For simplicity, we relegate the detailed reasoning to [16].)
Var
Protocol
Constant
LSRP.i
r : node id
ds, dc, dsc, L, U : real
d.i : integer
p.i : node id
ghost.i : boolean
k : node id
Parameter j : node id
Actions
(cid:1)S1(cid:2) :: M P.i ∧ p.i (cid:4)= i −→ p.i := i
[]
(cid:1)S2(cid:2) :: SW.i.j ∧ ¬ghost.j
−−−−−−−−−→ d.i, p.i := d.j + 1, j;
[ds+L,ds+U]
ghost.i := f alse
[]∗ ∗ ∗
(cid:1)C1(cid:2) :: ¬ghost.i ∧ (SP.i ∨ CW.i)
−−−−−−−−−→
[dc+L,dc+U]
if SP.i → p.i := i ﬁ ;
ghost.i := true
[](cid:1)C2(cid:2) :: ghost.i ∧ ¬(∃k : k ∈ N.i ∧ p.k = i ∧ d.k = d.i + 1) −→
ghost.i := f alse;
if i = r → d.i, p.i := 0, i
[]
i (cid:4)= r ∧ P S.i.j → d.i, p.i := d.j + 1, j
[]
i (cid:4)= r ∧ ¬(∃k : P S.i.k) → d.i, p.i := ∞, i
ﬁ
[]∗ ∗ ∗
(cid:1)SC(cid:2) :: ghost.i ∧ SCW.i
−−−−−−−−−→ ghost.i := f alse
[dsc+L,dsc+U]
Figure 4. LSRP: local stabilization in shortest path
routing
Variables As in existing distance-vector routing protocols,
each node i maintains the two variables d.i and p.i, where
d.i records the shortest distance from i to r, and p.i records
the next-hop on the shortest path from i to r (i.e., the parent
of i in the shortest path tree rooted at r). However, in order
to achieve local stabilization, each node i maintains another
boolean variable ghost.i. ghost.i is true if node i is being
involved in a containment wave.
For convenience of presentation, we let N.i denote the set
of neighboring nodes of i. A dummy variable k is also used.
Protocol actions As mentioned in Section 4.3, the diffus-
ing computation in LSRP consists of three diffusing waves:
the stabilization wave, the containment wave, and the super-
containment wave. Among the ﬁve actions in LSRP, S1 and
S2 are for the stabilization wave, C1 and C2 for the contain-
ment wave, and SC for the super-containment wave.
Stabilization wave The stabilization wave guarantees that a
system eventually stabilizes to a legitimate state, and it im-
plements the distributed Bellman-Ford algorithm with some
changes to cooperate with containment wave.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:56:18 UTC from IEEE Xplore.  Restrictions apply. 
Action S1: if node i is a minimal point (i.e., M P.i = true)
but p.i (cid:9)= i, it sets p.i to i.
M P.i is deﬁned as
(i = r ∧ d.i = 0) ∨ (ghost.i ∧ SP.i), where SP.i =
true if i is a source of fault propagation.
That is, a node i is a minimal point if it is the destination
node and d.i = 0, or if it has initiated a containment wave that
has not ﬁnished.
Action S2: if node i should propagate a stabilization wave
from node j (i.e., SW.i.j = true) that is not being involved in
any containment wave, and this condition continuously held
in the past e amount of time where e ∈ [ds + L, ds + U], then
i sets j as its parent, and sets d.i, ghost.i to d.j + 1, f alse
respectively.
SW.i.j is deﬁned as
j ∈ N.i ∧ d.j  α · dc, v8 will execute
C1 before v6 and v5 get chance to execute S2. After C1 is
executed at v8, ghost.v8 is set to true, which disables action
S2 at v6 and v5. Then, action C2 will be executed at v8, which
corrects d.v8 to 3, and leads the system to a legitimate state.
In the above process, only action C1 and C2 are executed at
v8, and no action is executed elsewhere. Therefore, no other
nodes in the system is affected by the state corruption at v8,
which is the ideal case achievable.
5 Protocol analysis
In this section, we present the ﬁxpoint3 of LSRP and the
property of local stabilization in a system where LSRP is
used. We also present the properties of loop freedom during
stabilization and quick loop removal in LSRP. (The proofs of
all the theorems and lemmas are relegated to [16].)
5.1 Property of local stabilization
Given a system topology G
(cid:1) ⇒ ¬ghost.i ∧ LH.i), where LH.i is deﬁned as
, E
V
(cid:1)
(cid:1)(V
(cid:1)), let L ≡ (∀i : i ∈
(i = r ⇒ d.i = 0 ∧ p.i = i)∧
(i (cid:9)= r ⇒ d.i = d.(p.i) + 1 ∧ p.i ∈ N.i∧
(∀k : k ∈ N.i ⇒ d.(p.i) ≤ d.k))
Then, any state in L is a legitimate system state where the
shortest path tree rooted at the destination node r is formed
(by variable p.i at every node i in the system), and every node
i has learned the distance of and the next-hop on its shortest
path to r.
Moreover, L is a ﬁxpoint (or stable state) of LSRP, and ev-
ery system where LSRP is used self-stabilizes to a state in L,
upon starting at an arbitrary state. Therefore, LSRP guaran-
tees the formation of the shortest path tree in a system.
Furthermore, local stabilization is guaranteed in LSRP.
The analysis is as follows.
When there is only one perturbed region at the initial state,
we have
Lemma 1 Starting at an arbitrary state q0 where there is only
one perturbed region, every system computation reaches a
state in L within O(P (q0)) time, and the range of contami-
nation is O(P (q0)).
When the set of perturbed nodes are not contiguous, there
are multiple perturbed regions (denoted as S0, S1, . . . , Sm,
m ≥ 1) in the system. For each perturbed region Si, we
deﬁne its containment region CRi as the union of Si and
the set of nodes that are contaminated during stabilization be-
cause of the existence of Si. Two containment regions CRi