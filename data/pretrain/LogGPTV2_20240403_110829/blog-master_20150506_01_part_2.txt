                //  checkpoint_segments=100, 那么每产生 0.1×100=10个XLOG文件后, checkpointer要休息一下，以免对性能造成太大影响  
                //   checkpointer休息多久由CheckpointWriteDelay函数来控制。  
                if (progress Insert;  
        XLogRecData rdata;  
        uint32          freespace;  
        XLogSegNo       _logSegNo;  
        XLogRecPtr      curInsert;  
        VirtualTransactionId *vxids;  
        int                     nvxids;  
......  
获取检查点排他锁，确保同一时刻只有一个检查点在干活  
        /*  
         * Acquire CheckpointLock to ensure only one checkpoint happens at a time.  
         * (This is just pro forma, since in the present system structure there is  
         * only one process that is allowed to issue checkpoints at any given  
         * time.)  
         */  
        LWLockAcquire(CheckpointLock, LW_EXCLUSIVE);  
......  
判断是否为关机检查点，如果是，先写控制文件。  
        if (shutdown)  
        {  
                LWLockAcquire(ControlFileLock, LW_EXCLUSIVE);  
                ControlFile->state = DB_SHUTDOWNING;  
                ControlFile->time = (pg_time_t) time(NULL);  
                UpdateControlFile();  
                LWLockRelease(ControlFileLock);  
        }  
......  
获取XLOG插入排他锁，计算checkpoint的逻辑XLOG位置，即开始位置。  
        /*  
         * We must block concurrent insertions while examining insert state to  
         * determine the checkpoint REDO pointer.  
         */  
        WALInsertLockAcquireExclusive();  
        curInsert = XLogBytePosToRecPtr(Insert->CurrBytePos);  
.....  
计算checkpoint的逻辑XLOG位置，即开始位置，检查点执行fsync时依赖这个位置信息。  
fsync的内容需要确保在这个XLOG位置前的已提交事务，它们的脏数据必须写入数据文件，CLOG完整。  
        /*  
         * Compute new REDO record ptr = location of next XLOG record.  
         *  
         * NB: this is NOT necessarily where the checkpoint record itself will be,  
         * since other backends may insert more XLOG records while we're off doing  
         * the buffer flush work.  Those XLOG records are logically after the  
         * checkpoint, even though physically before it.  Got that?  
         */  
        freespace = INSERT_FREESPACE(curInsert);  
        if (freespace == 0)  
        {  
                if (curInsert % XLogSegSize == 0)  
                        curInsert += SizeOfXLogLongPHD;  
                else  
                        curInsert += SizeOfXLogShortPHD;  
        }  
        checkPoint.redo = curInsert;  
        /*  
         * Here we update the shared RedoRecPtr for future XLogInsert calls; this  
         * must be done while holding all the insertion locks.  
         *  
         * Note: if we fail to complete the checkpoint, RedoRecPtr will be left  
         * pointing past where it really needs to point.  This is okay; the only  
         * consequence is that XLogInsert might back up whole buffers that it  
         * didn't really need to.  We can't postpone advancing RedoRecPtr because  
         * XLogInserts that happen while we are dumping buffers must assume that  
         * their buffer changes are not included in the checkpoint.  
         */  
        RedoRecPtr = xlogctl->Insert.RedoRecPtr = checkPoint.redo;  
        /*  
         * Now we can release the WAL insertion locks, allowing other xacts to  
         * proceed while we are flushing disk buffers.  
         */  
释放XLOG插入排他锁。  
        WALInsertLockRelease();  
获得检查点的其他数据，例如XID,OID,MXID等，后面需要刷到控制文件中。  
        /*  
         * Get the other info we need for the checkpoint record.  
         */  
        LWLockAcquire(XidGenLock, LW_SHARED);  
        checkPoint.nextXid = ShmemVariableCache->nextXid;  
        checkPoint.oldestXid = ShmemVariableCache->oldestXid;  
        checkPoint.oldestXidDB = ShmemVariableCache->oldestXidDB;  
        LWLockRelease(XidGenLock);  
        /* Increase XID epoch if we've wrapped around since last checkpoint */  
        checkPoint.nextXidEpoch = ControlFile->checkPointCopy.nextXidEpoch;  
        if (checkPoint.nextXid checkPointCopy.nextXid)  
                checkPoint.nextXidEpoch++;  
        LWLockAcquire(OidGenLock, LW_SHARED);  
        checkPoint.nextOid = ShmemVariableCache->nextOid;  
        if (!shutdown)  
                checkPoint.nextOid += ShmemVariableCache->oidCount;  
        LWLockRelease(OidGenLock);  
        MultiXactGetCheckptMulti(shutdown,  
                                                         &checkPoint.nextMulti,  
                                                         &checkPoint.nextMultiOffset,  
                                                         &checkPoint.oldestMulti,  
                                                         &checkPoint.oldestMultiDB);  
在checkpoint开始Fsync数据据前，务必等待已提交事务的clog 以及clog的XLOG都已经写完整。  
        /*  
         * In some cases there are groups of actions that must all occur on one  
         * side or the other of a checkpoint record. Before flushing the  
         * checkpoint record we must explicitly wait for any backend currently  
         * performing those groups of actions.  
         *  
         * One example is end of transaction, so we must wait for any transactions  
         * that are currently in commit critical sections.  If an xact inserted  
         * its commit record into XLOG just before the REDO point, then a crash  
         * restart from the REDO point would not replay that record, which means  
         * that our flushing had better include the xact's update of pg_clog.  So  
         * we wait till he's out of his commit critical section before proceeding.  
         * See notes in RecordTransactionCommit().  
         *  
         * Because we've already released the insertion locks, this test is a bit  
         * fuzzy: it is possible that we will wait for xacts we didn't really need  
         * to wait for.  But the delay should be short and it seems better to make  
         * checkpoint take a bit longer than to hold off insertions longer than  
         * necessary. (In fact, the whole reason we have this issue is that xact.c    //  根源在这里，因为提交写clog的XLOG和写CLOG分两部分完成，分别由2个锁来保护，但实际上这两部分信息应该在检查点的同一边，要么检查点前，要么检查点后。  
//  所以这里才需要等待，就是等它们到同一面，即那些在检查点前写XLOG的但是没有更新CLOG的，必须等它们的CLOG完成。  
// 为什么呢？因为RECOVERY时检查点之前的XLOG是不会去replay的，如果clog的xlog在这之前，但是CLOG未写成功，那么在恢复时又不会去replay这些xlog，将导致这些CLOG缺失。  
         * does commit record XLOG insertion and clog update as two separate steps  
         * protected by different locks, but again that seems best on grounds of  
         * minimizing lock contention.)  
         *  
         * A transaction that has not yet set delayChkpt when we look cannot be at  