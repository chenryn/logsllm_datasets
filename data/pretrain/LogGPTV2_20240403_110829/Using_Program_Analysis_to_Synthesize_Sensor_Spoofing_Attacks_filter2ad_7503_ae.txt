approach. Because we deal with line reachability problem,
we developed a method for propagating constraints between
execution paths of diﬀerent functions and for stitching these
paths into interprocedural paths from the program’s entry
point to the target line.
Similar to our paper, [23] uses symbolic execution to tackle
line reachability problems. In [23], the execution starts at
the target function, with function parameters and global
variables replaced by symbolic values.
The modular approach in [23] is rather coarse-grained.
When the execution encounters a call to a function that
does not belong to the shortest call chain, it does not try
to summarize it but instead steps into this function and
continues normally. This results in (1) a long chain of inner
calls which causes path explosion and makes it hard and/or
unlikely to reach the target, spending most of the time on
paths that do not reach the target; (2) the same function
must be re-executed multiple times even when the calling
context is the same. Our approach is more ﬂexible. It re-uses
previously analyzed inner calls and thus avoids re-executing
the same execution paths. Another diﬀerence is that [23]
checks whether two paths can be concatenated by executing
them. We use a constraint propagation/rewrite subsystem
instead to eﬃciently check if a chain of execution paths is
feasible. In the common case when there are many paths to
be checked, we round-robin between k shortest call chains.
Finally, all symbolic execution tools surveyed in this sec-
tion [3, 12, 16, 23, 26] (except FiE [10]) lack appropriate in-
terrupt and memory models to be applied to embedded
ﬁrmware.
8. SENSOR SPOOFING LIMITATIONS
In this paper, we focused on systems where (a) control
logic is implemented in software, and (b) it is possible to
deﬁne unwanted (and thus wanted by the attacker) states.
There are also other kinds of sensor spooﬁng attacks. If
control logic is implemented in hardware or a sensor-speciﬁc
property is used for the attack, symbolic execution of the
ﬁrmware may not be very useful. For example, in [24] sen-
sor saturation was used to generate fake drops in an infu-
sion pump and cause change in the amount of injected ﬂu-
ids. Furthermore, many sensors simply produce binary or
numeric values, in which case symbolic execution is not as
important as physical spooﬁng itself. For other systems it
may be challenging for the adversary to deﬁne the unwanted
behavior of the target ﬁrmware.
In this paper we used AllSee as a running example and
dealt with the relatively simple case of wireless signals. Sen-
sor spooﬁng can be harder for other types of sensors, e.g.,
in [30] the authors used sound to cause resonation in drones’
internal gyroscopes forcing the drones to crash.
9. CONCLUSION
In this paper we initiated the exploration of program anal-
ysis tools for synthesizing sensor spooﬁng attacks. Speciﬁ-
cally, we show how an adversary can use program analysis
of a device’s source code to ﬁnd sensor inputs that cause the
program to “believe” that it received a certain signal. We
translated the problem of signal pattern extraction into a
line reachability problem—which is well-suited for symbolic
execution. We then presented a new symbolic execution
tool, DrE, that aims to solve this problem for the MSP430
family of microcontrollers.
DrE uses a combination of traditional static analysis tech-
niques and a bottom-up variant of directed compositional
symbolic execution. By combining control ﬂow and call
graph information with interprocedural data dependencies
collected during symbolic execution, DrE is able to ﬁlter
out a signiﬁcant number of infeasible paths and generate
conditions on the environmental inputs that cause desired
behavior in the MSP430 ﬁrmware.
As a case study we applied DrE to the AllSee gesture
recognition system and were able to extract signal patterns
for all of its gestures. We then manually converted digi-
tal signal patterns into physical ones using the ADC sen-
sor speciﬁcation. This resulted in a complete, end-to-end
proof-of-concept signal spooﬁng attack against the AllSee
ﬁrmware when run with emulated sensor hardware. The at-
tack enables the attacker to control AllSee-equipped devices
without their owner’s knowledge or consent.
In the ideal
“noise-free” environment, we were able to successfully spoof
all eight gestures.
We believe that our techniques will generalize to other
types of sensor-based systems and physical modalities, par-
ticularly when converting from digital sensor readings back
to physical signals is straightforward (as was the case with
AllSee). Examples may include light, sound, and other sen-
sors. Converting the digital patterns provided by program
analysis into a physical signal is still sensor-speciﬁc, and, in
many cases, going to be much more challenging than the
relatively simple case of wireless signals used by AllSee. We
leave full exploration of such sensors to future work.
Acknowledgments. This work was partially supported
by NSF grant CNS-1223396 and United States Army Re-
search Oﬃce (ARO) grant W911NF-16-1-0145.
10. REFERENCES
[1] H. Abdelnasser, M. Youssef, and K. A. Harras. WiGest: A
ubiquitous WiFi-based gesture recognition system. In
INFOCOM, 2015.
[2] A. Alanis, T. Thai, G. Dejean, R. Gilad-Bachrach, and
D. Lymberopoulos. 3D gesture recognition through RF sensing.
Technical Report MSR-TR-2014-81, June 2014.
[3] S. Anand, P. Godefroid, and N. Tillmann. Demand-driven
compositional symbolic execution. In TACAS, 2008.
11
767[4] Arduino Due.
https://www.arduino.cc/en/Main/ArduinoBoardDue, 2016.
[Online; accessed 16-May-2016].
[5] S. Asankhaya. Exploiting undeﬁned behaviors for eﬃcient
symbolic execution. In ICSE Companion, 2014.
[6] P. Boonstoppel, C. Cadar, and D. Engler. RWset: Attacking
path explosion in constraint-based test generation. In TACAS,
2008.
[7] A. Butler, S. Izadi, and S. Hodges. SideSight: Multi-”touch”
[20] D. F. Kune, J. Backes, S. S. Clark, D. Kramer, M. Reynolds,
K. Fu, Y. Kim, and W. Xu. Ghost talk: Mitigating EMI signal
injection attacks against analog sensors. In S&P, 2013.
[21] V. Kuznetsov, V. Chipounov, and G. Candea. Testing
closed-source binary device drivers with DDT. In USENIX
ATC, 2010.
[22] S. G. Lee, Y. Diaz-Mercado, and M. Egerstedt. Multirobot
control using time-varying density functions. IEEE
Transactions on Robotics, 31(2):489–493, April 2015.
interaction around small devices. In UIST, 2008.
[23] K.-K. Ma, K. Yit Phang, J. S. Foster, and M. Hicks. Directed
[8] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted and
automatic generation of high-coverage tests for complex
systems programs. In OSDI, 2008.
[9] N. Carlini, P. Mishra, T. Vaidya, Y. Zhang, M. Sherr,
C. Shields, D. Wagner, and W. Zhou. Hidden voice commands.
In USENIX Security, 2016.
[10] D. Davidson, B. Moench, S. Jha, and T. Ristenpart. FIE on
ﬁrmware: Finding vulnerabilities in embedded systems using
symbolic execution. In USENIX Security, 2013.
[11] D. Davidson, H. Wu, R. Jellinek, T. Ristenpart, and V. Singh.
Controlling UAVs with sensor input spooﬁng attacks. In
WOOT, 2016.
symbolic execution. In SAS, 2011.
[24] Y. Park, Y. Son, H. Shin, D. Kim, and Y. Kim. This ain’t your
dose: Sensor spooﬁng attack on medical infusion pump. In
WOOT, 2016.
[25] J. Petit, B. Stottelaar, M. Feiri, and F. Kargl. Remote attacks
on automated vehicles sensors: Experiments on camera and
LiDAR. In Blackhat Europe, 2015.
[26] D. A. Ramos and D. Engler. Under-constrained symbolic
execution: Correctness checking for real code. In USENIX
Security, 2015.
[27] F. Saudel and J. Salwan. Triton: A dynamic symbolic
execution framework. In SSTIC, 2015.
[12] D. R. Engler and D. Dunbar. Under-constrained execution:
[28] P. Saxena, P. Poosankam, S. McCamant, and D. Song.
making automatic code destruction easy and scalable. In
ISSTA, 2007.
Loop-extended symbolic execution on binary programs. In
ISSTA, 2009.
[13] Ettus Research. USRP B210.
https://www.ettus.com/product/details/UB210-KIT, 2016.
[Online; accessed 16-May-2016].
[14] S. Evanczuk. Slideshow: The most-popular MCUs ever.
www.edn.com/electrical-engineer-community/industry-blog/
4419922/9/Slideshow--The-most-popular-MCUs-everKJ, 2013.
[Online; accessed 16-May-2016].
[15] Gnuradio. The Free and Open Software Radio Ecosystem.
http://gnuradio.org/, 2016. [Online; accessed 16-May-2016].
[16] P. Godefroid. Compositional dynamic test generation. In
POPL, 2007.
[17] B. Kellogg. The code used in AllSee.
http://allsee.cs.washington.edu/#code. [Online; accessed
16-May-2016].
[18] B. Kellogg, V. Talla, and S. Gollakota. Bringing gesture
recognition to all devices. In NSDI, 2014.
[19] J. C. King. Symbolic execution and program testing. Commun.
ACM, 19(7):385–394, July 1976.
[29] Y. Shoukry, P. Martin, P. Tabuada, and M. Srivastava.
Non-invasive spooﬁng attacks for anti-lock braking systems. In
CHES, 2013.
[30] Y. Son, H. Shin, D. Kim, Y. Park, J. Noh, K. Choi, J. Choi,
and Y. Kim. Rocking drones with intentional sound noise on
gyroscopic sensors. In USENIX Security, 2015.
[31] Texas Instruments. MSP430x2xx Family. User’s Guide.
http://www.ti.com/lit/ug/slau144j/slau144j.pdf, 2013. [Online;
accessed 16-May-2016].
[32] Texas Instruments. Applications for Low-power MCUs .
http://www.ti.com/lsds/ti/microcontrollers 16-bit 32-bit/msp/
applications.page, 2016. [Online; accessed 16-May-2016].
[33] T. Vaidya, Y. Zhang, M. Sherr, and C. Shields. Cocaine
noodles: Exploiting the gap between human and machine
speech recognition. In WOOT, 2015.
[34] C. Yan, X. Wenyuan, and J. Liu. Can you trust autonomous
vehicles: Contactless attacks against sensors of self-driving
vehicle. In DEF CON, 2016.
12
768APPENDIX
1 # define T H R E S H O L D 15
2 int adc = 0;
3 int p r o c e s s _ a d c () {
4
int val = 0 , v a l _ p r e v = 0 , i = 0 , diff = 0 , j =
0;
_ _ b i s _ S R _ r e g i s t e r ( CPUOFF + GIE ) ;
val = adc ;
while ( diff = 1000) { // Wait for s e t t l i n g down
a c c e l e r a t i o n = p r o c e s s _ a d c () ;
if ( a c c e l e r a t i o n == 20) assert (0) ;
}
tick ++;
}
32
33 }
34
35 int n u m _ o f _ a d c _ r e a d s = 0;
36 void _ _ a t t r i b u t e _ _ (( i n t e r r u p t ( A D C 1 0 _ V E C T O R ) ) )
A D C 1 0 _ I S R ( void ) {
adc = A D C 1 0 M E M ;
n u m _ o f _ a d c _ r e a d s ++;
_ _ b i c _ S R _ r e g i s t e r _ o n _ e x i t ( CPUOFF ) ;
37
38
39
40 }
Figure 8: Synthetic example 1
6
7
8
9
10
11
12
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
1
2 # define T H R E S H O L D 15
3 int adc = 0;
4 g e t _ a c c e l e r a t i o n ( int mode ) {
5
int i = 0;
_ _ b i s _ S R _ r e g i s t e r ( CPUOFF + GIE ) ;
while ( adc >= 15) {
i ++;
_ _ b i s _ S R _ r e g i s t e r ( CPUOFF + GIE ) ;
}
if ( i > 15 && ( mode == ’a ’) ) return 1;
else if ( mode == ’a ’) return 2;
else return 3;
13
14 }
15
16 int main () {
17
int val = 0 , v a l _ r e p v = 0;
int tick = 0;
int a c c e l e r a t i o n [] = {0 , 0 , 0};
int j = 0;
int mode ;
k l e e _ m a k e _ s y m b o l i c (& mode , sizeof ( mode ) , " mode " ) ;
while (1) {
a c c e l e r a t i o n [ j ] = g e t _ a c c e l e r a t i o n ( mode ) ;
j ++;
if ( j ==3) j =0;
if ( ( a c c e l e r a t i o n [0] == 1) &&
( a c c e l e r a t i o n [1] == 1) &&
( a c c e l e r a t i o n [2] == 1) )
break ;
}
assert (0) ;
return 0;
33
34 }
35
36 int n u m _ o f _ a d c _ r e a d s = 0;
37 void _ _ a t t r i b u t e _ _ (( i n t e r r u p t ( A D C 1 0 _ V E C T O R ) ) )
A D C 1 0 _ I S R ( void )
adc = A D C 1 0 M E M ;
n u m _ o f _ a d c _ r e a d s ++;
_ _ b i c _ S R _ r e g i s t e r _ o n _ e x i t ( CPUOFF ) ;
38 {
39
40
41
42 }
Figure 9: Synthetic example 2
13
769(a) Flick original
(b) Flick generated
(c) Push original
(d) Push generated
(e) Pull original
(f) Pull generated
(g) Double Flick original
(h) Double Flick generated
Figure 10: AllSee original (left) and generated by DrE (right) gesture patterns. Original gesture patterns were extracted
from [18] unmodiﬁed.
(a) Punch original
(b) Punch generated
(c) Lever original
(d) Lever generated
(e) Zoom In original
(f) Zoom In generated
(g) Zoom Out original
(h) Zoom Out generated
Figure 11: AllSee original (left) and generated by DrE (right) gesture patterns (continuation). Original gesture patterns were
extracted from [18] unmodiﬁed.
(a) Original (ﬂick)
(b) Emulation (ﬂick)
(c) Original (punch)
(d) Emulation (punch)
Figure 12: Our emulation (right) vs AllSee original (left). Original gesture patterns were extracted from [18] unmodiﬁed.
14
770