User: I have been playing around with the twisted framework for about a week now(more because of  curiosity rather than having to use it) and its been a lot of fun doing event driven asynchronous network programming.
However, there is something that I fail to understand. The twisted documentation starts off with
 Twisted is a framework designed to be very flexible and let you write powerful servers.
My doubt is :- Why do we need such an event-driven library to write powerful servers when there are already very efficient implementations of various servers out there? 
Surely, there must have been more than a couple of concrete implementations which the twisted developers had in mind while writing this event-driven I\O library. What are those? Why exactly was twisted made?
Assistant: In a comment on another answer, you say "Every library is supposed to have ...".  "Supposed" by whom?  Having use-cases is certainly a nice way to nail down your requirements, but it's not the only way.  It also doesn't make sense to talk about the use-cases for all of Twisted at once.  There is no use case that justifies every single API in Twisted.  There are hundreds or thousands of different use cases, each which justifies a lesser or greater subdivision of Twisted.  These came and went over the years of Twisted's development, and no attempt has been made to keep a list of them.  I can say that I worked on part of Twisted Names so that I would have a topic for a paper I was presenting at the time.  I implemented the vt102 parser in Twisted Conch because I am obsessed with terminals and wanted a fun project involving them.  And I implemented the IMAP4 support in Twisted Mail because I worked at a company developing a mail server which required tighter control over the mail store than any other IMAP4 server at the time offered.
So, as you can see, different parts of Twisted were written for widely differing reasons (and I've only given examples of my own reasons, not the reasons of any other developers).  
The initial reason for a program being written often doesn't matter much in the long run though.  Now the code is written: Twisted Names now runs the DNS for many domain names on the internet, the vt102 parser helped me get a job, and the company that drove the IMAP4 development is out of business.  What really matters is what useful things you can do with the code now.  As MattH points out, the resulting plethora of functionality has resulted in a library that (perhaps uniquely) addresses a wide array of interesting problems.