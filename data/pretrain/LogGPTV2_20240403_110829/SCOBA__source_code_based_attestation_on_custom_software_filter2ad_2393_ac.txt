### Property Certificate for P

The property certificate for P, denoted as `cert(TV, p, He)`, establishes a trust chain from the source code to the properties of the generated binary code through a trusted building process.

### 3.4.3 Attestation Phase

In the attestation phase, we assume the target program is P. The challenger initiates the process by sending a challenge request to the attester, including a nonce (step c in Figure 1). The attester platform then employs an attestation agent to collect the state and certificate of P. These records are sent back to the challenger as the challenge response (step d in Figure 1). The challenger can then verify the certificate with the help of a trusted verifier, leading to an attestation result for P (step e in Figure 1). During the verification stage, the challenger only needs to submit the collected certificates to the trusted verifier for validation. With a successful verification, the challenger can confirm the runtime measurements based on these certificates.

### 3.5 Property Certification via Semantic Verification on Building Configuration

During the certification phase, the trusted verifier examines the source code and building configuration to determine the properties of the generated binary code. The binary code's properties are closely tied to the building configuration. For example, Gentoo Linux uses Use Variable Descriptions (Global/Local Use Flags) to specify included software features, generating packages with different properties. The trusted verifier maintains a database that records properties based on source code versions and building configurations. This database is used to check the received source code and building configurations to ascertain the properties of the generated binary code.

Manually examining building configurations according to standard configurations and limitations is straightforward but labor-intensive and prone to human error, especially with a large number of configurations. Cryptographic hash functions can automate the examination of hash values for building configuration files when the configurations are limited and predictable. However, the number of possible configurations can be vast or even infinite, particularly when options can take floating values.

Fortunately, building configurations are typically well-organized in formats like Makefiles, command options, and .config files. Therefore, it is practical to examine them semantically. A building configuration file can be seen as a collection of option pairs. The trusted verifier has a set of criteria items for a specific program property `p`. The operations (e.g., equal, unequal, smaller than) are determined by the type of option value. To check if the building configurations satisfy a certain property, an automated process compares the option values with the specified criteria. If the criteria for a specific program property are met, the trusted verifier concludes that the building configurations have the desired property.

For semantic attestation on software configurations, a similar approach to that proposed in [24] can be applied.

### 3.6 Property Certificate Revocation

A program P, built based on a specific version of source code and building configuration, may later be found to be vulnerable or erroneous. Therefore, the trusted verifier must maintain a certificate revocation list to revoke the corresponding property certificate. Once a program is identified as vulnerable, its certificate is added to the revocation list. During the attestation phase, the challenger must first check if the property certificate is in the revocation list during the certificate verification step (step e in Figure 1).

### 4. SCOBA Implementation for Open-Source Software

The proposed SCOBA framework can be applied to general custom software, but it is most suitable for custom open-source software, where automatic attestation can be provided based on open-source distributions. In this section, we apply SCOBA specifically to custom open-source software, where users can tailor and configure downloaded software but cannot modify specific source code files. We will discuss modifying source code in Section 7.

We implemented a prototype of the SCOBA framework to demonstrate its practical usage, focusing on customized open-source software on the Linux platform.

#### 4.1 Attester Platform

We use XEN, supported by the TXT facility, as the Secure Virtual Machine. Ubuntu Linux is chosen as the operating system to host our prototype. In our implementation, Linux runs in two different domains of XEN: one for ordinary applications and another for the Trusted Building System (TBS) in a protected domain. For the ordinary domain, we introduce an attestation agent module as a Linux Security Module to monitor and record application execution. For the TBS, we configure the Linux kernel via Linux From Scratch to get a minimal kernel supporting compilation tools, which carry out a trusted building process. We use TXT to dynamically set up the secure domain for TBS [5].

#### 4.2 Trusted Verifier

The trusted verifier maintains the following repositories:
- A repository of known-good source code files and building configurations.
- A certificate repository.
- A revocation list.

The known-good repository helps certify customized software and records the properties of software with specific source code files and building configurations for certain versions. The trusted verifier can automatically obtain the property of the target customized software. The certificate repository holds all issued certificates and the revocation list, which the trusted verifier uses for certificate verification.

#### 4.3 Trusted Building System

The Trusted Building System (TBS) is the core of our scheme, and we study its implementation based on GCC (GNU project C and C++ compiler) on Linux. The GCC compilation process involves preprocessing, compiling, assembling, and linking. Preprocessing does not involve intermediate outputs, so TBS only monitors the intermediate outputs of compiling, assembling, and linking. We insert hooks into gcc, as, and ld to monitor the inputs and outputs of these transformation processes. These hooks use TPM to record the states of these inputs and outputs and extend these records with the PCR extend operation. At the end of the compilation process, TPM generates quotes on these recorded proofs. To counter the "Time-of-measurement and Time-of-use" issue, we employ a mechanism similar to IMA [21].

#### 4.4 Evaluation

We evaluated our TBS prototype on a Lenovo ThinkPad X60 laptop with an Intel Core 2 CPU T5500 @ 1.66GHz and 1GB memory. We built several open-source applications with and without the proposed prototype, and the performance comparison is shown in Table 1.

| Applications         | # of Source Code Files | Compilation Time (ms) - Without TBS | Compilation Time (ms) - With TBS |
|----------------------|------------------------|-------------------------------------|----------------------------------|
| TPM-tools-1.3.4       | 59                     | 14402                               | 209814                          |
| Openssl-0.9.8k        | 1267                   | 158106                              | 1318902                         |
| Gmp-4.3.0            | 898                    | 160279                              | 646499                          |
| Trousers-0.3.1        | 326                    | 118463                              | 345175                          |
| Tboot-20090330        | 429                    | 133646                              | 405173                          |
| Linux-2.6.30          | 23214                  | 7007143                             | 29034100                        |

The results show that TBS incurs roughly a 2-4X slowdown on the evaluated benchmarks. The exception is TPM tools, which has an overhead of almost 15X due to a small number of source files, making the compilation time relatively short. The significant overhead is due to the large number of TPM extend operations and the low computational capability of TPM. However, the cost is still acceptable in practice, as TBS is executed only once per build before certification.

### 5. Case Study: Applying SCOBA to Gentoo

Gentoo [9] is a free operating system based on either Linux or FreeBSD, optimized and customized for various applications. Most applications in Gentoo are distributed as source code, and the package management tool Portage is responsible for building and installing these applications. We can apply SCOBA directly to Portage to support attestation on custom software in Gentoo systems. Besides our modified GCC compilation tools with TBS hooks, we can leverage Portage for more flexible monitoring and recording mechanisms for attesting customized software in Gentoo.

Portage is the heart of Gentoo, performing key functions such as maintaining a local Portage tree, managing a complete collection of scripts for creating and installing Gentoo packages, and serving as a package building and installation system. It builds custom versions of packages to user specifications, optimizing them for hardware and enabling only the desired optional features.

Portage is characterized by its main function: compiling from the source code of installed packages, allowing customization to user preferences and system specifications. Key functionalities include parallel package version installation, cross-package functionality management, an installed-packages database, a local ebuild repository, and syncing with remote repositories. Individual package installation functionalities include specifying compilation settings and influencing package components.

Ebuild scripts form the basis of the Portage system, containing all the information required to download, unpack, compile, and install sources, as well as perform any optional pre/post install/removal or configuration steps. Each version of an application or package in the Portage repository has a specific ebuild script. The emerge tool, also created by Gentoo, calculates dependencies, downloads and patches files, configures the package, compiles, and performs a sandboxed installation. Upon successful completion, the installed files are merged into the live system.

Based on Gentoo's characteristics, we can easily extend TBS into Gentoo Portage, supporting trusted building. We can define specific TBS hooks in the call-sites of functions in Portage to perform monitoring on the trusted building and installation process. These functions include:

- **Pkg setup**: Performs miscellaneous prerequisite tasks, such as checking for existing configuration files. We can add functions to initialize a trusted and isolated environment for the building procedure.
- **Src unpack**: Unpacks sources, applies patches, and runs auxiliary programs like autotools. We can initialize the trusted measurement repository for all source codes, generating genuine measurement values for each file in the package (e.g., source codes, configuration files).