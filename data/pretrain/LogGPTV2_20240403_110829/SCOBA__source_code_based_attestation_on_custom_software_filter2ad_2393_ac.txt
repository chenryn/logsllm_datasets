the property certiﬁcate for P . With the certiﬁcate cert(T V,
p, He), the trust chain is linked from the source code to the
properties of generated binary code via a trusted building
process.
3.4.3 Attestation Phase
In the attestation phase, we assume the attestation target
program is P . The challenger ﬁrst sends a challenge request
to the attester with a nonce (step c in Figure 1). Then the
attester platform employs the attestation agent to collect
the state and certiﬁcate of P . These records are sent back
to the challenger as the challenge response (step d in Figure
1). Then the challenger may verify the certiﬁcate with the
help of the trusted veriﬁer and concludes with an attesta-
tion result on P (step e in Figure 1). During the veriﬁcation
stage in the attestation phases, challenger only has to sub-
mit the collected certiﬁcates to the trusted veriﬁer to verify
its validation, and with a successful veriﬁcation result, the
challenger can verify the runtime measurements according
to these certiﬁcates.
3.5 Property Certifying via Semantic Veriﬁ-
cation on Building Conﬁguration
During the certiﬁcation phase, the trusted veriﬁer needs to
certify the program by examining the source code and build-
ing conﬁguration to judge the property of the generated bi-
nary code. The property of the binary code is strictly linked
with the building conﬁguration. Let’s take Gentoo Linux [9]
as an example: Gentoo Linux employs Use Variable Descrip-
tions (Global/Local Use Flags ) to indicate which software
features are included, and ﬁnally generates packages with
diﬀerent properties. Meanwhile, the source code of diﬀer-
ent versions hold diﬀerent properties. The trusted veriﬁer
maintains a database for recording the properties according
to their source code versions and building conﬁgurations.
The trusted veriﬁer will use this database to check the re-
ceived source code and building conﬁgurations to determine
the property of generated binary code.
It is straightforward to manually examine the building
conﬁguration according to standard conﬁgurations and lim-
itations. However, it involves a lot of unnecessary eﬀort, and
it may involve human faults when it comes to a large number
of conﬁgurations. With the cryptographic hash functions, it
is also possible to automatically examine the hash values of
the building conﬁguration ﬁles, when only limited and pre-
dictable conﬁgurations exist according to involved program
properties. However, the building conﬁgurations may have
PreprocessorSource CodeParserSource w/SubstitutionsTranslationParse TreeObject FileTranslationAssemblerAssemblyLinkerObject FileObject File…Executable FileOutputs…Inputs…TransformationInitializationTerminationSource CodeConfigurationExecutable File……SSAABBFFFinFoutDependent fileshuge amount of possible candidates and sometimes even in-
ﬁnite. When an option can be set as a ﬂoating value, the
number of hash values for possible conﬁguration ﬁles are
almost inﬁnite.
Fortunately, the building conﬁgurations are usually orga-
nized in a well-deﬁned form, such as the Makeﬁle, command
options and .conﬁg ﬁles. Thus it is practical to examine the
building conﬁgurations in a semantic way. We may con-
sider a building conﬁguration ﬁle as a collection of option
pairs . The trusted veriﬁer has a set of
criteria items  according
to a speciﬁc program property p. The operation is deter-
mined by the type of option value. For example, the pos-
sible operations for integer values or ﬂoating values can be
equal,unequal,smallerthan, etc. The operation set for all
criteria can be determined according to the syntax of con-
ﬁguration ﬁle. In order to check whether the building con-
ﬁgurations satisfy a certain property, an automatic process
can be carried out to compare the option value with corre-
sponding criteria according to speciﬁed operation. When
the criteria of a speciﬁc program property is satisﬁed, the
trusted veriﬁer can conclude that the building conﬁgurations
are with the property.
To perform semantic attestation on software conﬁgura-
tions, we can apply a similar approach recently proposed in
[24].
3.6 Property Certiﬁcate Revocation
It is possible that a program P , which is built based on
a speciﬁc version of source code and building conﬁguration,
may be later found to be vulnerable or erroneous. So the
trusted veriﬁer needs to maintain a certiﬁcate revocation list
to be able to revoke the corresponding property certiﬁcate.
Once a program is identiﬁed as vulnerable, the correspond-
ing certiﬁcate is added into the revocation list. During the
attestation phase, the challenger is required to ﬁrst check
whether the property certiﬁcate is in the revocation list at
certiﬁcate veriﬁcation step (step e in Figure 1).
4. SCOBA IMPLEMENTATION FOR OPEN-
SOURCE SOFTWARE
The proposed SCOBA framework could be applied to gen-
eral custom software, however, it is most suitable for custom
open-source software, where automatic attestation could be
provided based on the open-source distributions.
In this
section, we apply SCOBA speciﬁcally to deal with custom
open-source software, where users are allowed to tailor and
conﬁgure the downloaded software, but are not allowed to
modify the speciﬁc source code ﬁles. For cases of modifying
source code, we will discuss it in Section 7.
We implement a prototype of this SCOBA framework to
demonstrate its practical usage. Particularly, we focus on
the customized open-source software on the Linux platform.
4.1 Attester Platform
We employ XEN [3] supported by the TXT facility as
the Secure Virtual Machine. Ubuntu Linux is chosen as
the operating system to host our prototype. In our imple-
mentation, we use Linux to run in two diﬀerent domains
of XEN: one is for ordinary applications in the ordinary do-
main of XEN and another is for the Trusted Building System
in a protected domain. For the ordinary one, we introduce
the attestation agent module as a Linux Security Module to
monitor and record the execution of applications. For the
TBS, we conﬁgure the Linux kernel via Linux From Scratch
to get a minimal kernel to support the compilation tools,
which carries out a trusted building process. We employ
TXT to dynamically set up the secure domain for TBS [5].
4.2 Trusted Veriﬁer
Trusted veriﬁer maintains following repositories: a repos-
itory of known-good source code ﬁles and building conﬁgu-
rations, a certiﬁcate repository, and a revocation list.
The known-good repository helps the trusted veriﬁer to
certify customized software. The known-good repository
also records the properties of a software with speciﬁc source
code ﬁles and building conﬁgurations for certain versions.
The trusted veriﬁer can automatically obtain the property
of the target customized software. The certiﬁcate repository
holds the records of all issued certiﬁcates and revocation list.
The trusted veriﬁer employs it to ﬁnish the certiﬁcate veri-
ﬁcation.
4.3 Trusted Building System
The Trusted Building System is the core of our scheme,
and we will study its implementation based on GCC (GNU
project C and C++ compiler) on Linux.
The GCC compilation process normally involves four steps:
preprocessing, compiling, assembling and linking. The pre-
processing step usually does not involve intermediate out-
puts, so TBS only has to monitor the intermediate outputs
of following steps: compiling, assembling and linking. At
the beginning of the above steps, we insert hooks into gcc,
as and ld to monitor the inputs and outputs of these trans-
formation processes. These hooks employ TPM to record
the states of these inputs and outputs, and extend these
records with the P CR extend operation. At the end of the
compilation process, TPM is invoked to generate quotes on
these recorded proofs.
In order to counter the “Time-of-
measurement and Time-of-use” issue, we employ a similar
mechanism as IMA [21] to deal with this problem.
4.4 Evaluation
We evaluate our prototype of TBS on a Lenovo ThinkPad
X60 laptop with Intel Core 2 CPU T5500 @ 1.66GHz, and
1GB memory. We build a number of open-source appli-
cations with and without the proposed prototype, and the
performance comparison is shown in Table 1.
In the table, we show the number for source code ﬁles,
compilation time before and after applying the proposed
scheme for each application. The cost for recording these
proofs are roughly proportional to the number of source
ﬁles in each application. The results show that TBS incurs
roughly 2-4X slowdown on the evaluated benchmarks. The
exception is TPM tools, which has an overhead of almost
15X because it involves only a handful of source ﬁles, thus
the compilation time is relatively very short.
The overhead is pretty signiﬁcant because of the large
amount of TPM extend operations and low computation ca-
pability of TPM. However, the cost is still acceptable in
practice, as TBS is only executed once for each build imme-
diately before the certiﬁcation.
Table 1: Comparison of compilation time before and after applying the proposed scheme.
applications
TPM-tools-1.3.4
Openssl-0.9.8k
Gmp-4.3.0
Trousers-0.3.1
Tboot-20090330
Linux-2.6.30
GCC-4.4.2 with TBS hooks
209814 ms
1318902 ms
646499 ms
345175 ms
405173 ms
29034100 ms
# of source code ﬁles
59
1267
898
326
429
23214
GCC-4.4.2
14402 ms
158106 ms
160279 ms
118463 ms
133646 ms
7007143 ms
5. CASE STUDY: APPLYING SCOBA TO GEN-
TOO
Gentoo [9] is a free operating system based on either Linux
or FreeBSD that can be automatically optimized and cus-
tomized for just about any application. Most applications
are distributed in the form of source code in Gentoo and its
package management tool Portage is responsible for build-
ing and installing these applications. We can apply SCOBA
straightforwardly to Portage to support attestation on cus-
tom software in Gentoo systems. Besides our modiﬁed GCC
compilation tools with TBS hooks, we may also leverage
Portage to provide a more ﬂexible monitoring and recording
mechanism for attesting customized software in Gentoo.
Portage is the heart of Gentoo, and performs many key
functions. It serves as the software distribution system for
Gentoo. It can maintain a local Portage tree which contains
a complete collection of scripts that can be used by Portage
to create and install the latest Gentoo packages. Portage
is also a package building and installation system. It will
build a custom version of the package to the user’s exact
speciﬁcations, optimizing it for the hardware and ensuring
that only the optional features in the package that the users
want are enabled.
Portage is characterized by its main function: compiling
from the source code of these packages that the user in-
stalls. In doing so it allows customizing package functional-
ities to the user’s own wishes, and customizing all packages
to the systems speciﬁcations. In order to accomplish this,
several functionalities are provided. Functionalities concern-
ing managing the system are: allowing parallel package ver-
sion installation, inﬂuencing cross-package functionalities,
managing an installed-packages database, providing a local
ebuild (explained later) repository, and syncing of the lo-
cal Portage tree with remote repositories. Functionalities
concerning installing the individual package are: specifying
compilation settings for the target machine, and inﬂuencing
speciﬁed package components.
The basis for the entire Portage system is the ebuild scripts.
They contain all the information required to download, un-
pack, compile and install a set of sources, as well as how to
perform any optional pre/post install/removal or conﬁgura-
tion steps. An ebuild is a specialized bash script format cre-
ated by the Gentoo Linux project for use in its Portage soft-
ware management system, which automates compilation and
installation procedures for software packages. Each version
of an application or package in the Portage repository has
a speciﬁc ebuild script written for it. The script is used by
the emerge tool, also created by the Gentoo Linux project,
to calculate any dependencies of the desired software in-
stallation, download the required ﬁles (and patch them, if
necessary), conﬁgure the package, compile, and perform a
sandboxed installation. Upon successful completion of these
steps, the installed ﬁles are merged into the live system, out-
side the sandbox.
Base on the characteristics of Gentoo, we can easily extend
TBS into the Gentoo Portage, and hence support trusted
building in Gentoo. There are a number of diﬀerent func-
tions that we can deﬁne in ebuild ﬁles that control the build-
ing and installation process of the package. Hence, we can
add speciﬁc TBS hooks in the call-sites of these functions in
Portage to perform monitoring on the trusted building and
installing procedure. These functions include:
• P kg setup: This function can perform any miscella-
neous prerequisite tasks. This might include checking
for an existing conﬁguration ﬁle. We can add functions
to initialize a trusted and isolated environment for the
building procedure.
• Src unpack: This function unpacks the sources, ap-
plies patches, and runs auxiliary programs such as
the autotools. We can initialize the trusted measure-
ment repository for all the source codes. Normally,
the source codes are distributed in a single compressed
package (e.g. tar ﬁle). Hence we should ﬁrst gener-
ate the genuine measurement value for each ﬁle in the
package (e.g.
source codes, conﬁguration ﬁles, etc.)