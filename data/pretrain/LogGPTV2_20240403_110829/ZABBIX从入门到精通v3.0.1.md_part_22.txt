接下来需要把php-fpm模板link到你的主机上，进入后台->configuration->点击你的主机->templates->输入php-fpm
模板名称，点击add，最后点击update即可
还有另外一种更快的方法，点击php-fpm模板，然后将主机添加进去即可，都是一些简单的操作，不在截图演示！
效果展示
 latest数据
 慢日志数量
 php-fm processes
php-fpm进程退出会触发告警，我不多做演示，有相关问题在此留言。继续关注zabbix，继续关注ttlsa。最近比较
忙，都没来得及给投稿的小伙伴发红包，实在是抱歉了！
zabbix php-fpm 文件下载
zabbix监控php-fpm模板-zabbix 3.x
zabbix监控php-fpm模板-zabbix 2.x
以上模板，请到官方网站下载
zabbix 监控 Tomcat/JVM 实例性能
最近陆续写了几个zabbix监控实例，也提供了监控模板。今天群里有兄弟问什么时候出一个zabbix通过JMX监控
tomcat 的文章。鉴于 tomcat 用户群体大而且之前也有很多兄弟有过相似需求，今天在此分享 zabbix 监控 tomcat
一文。
安装Tomcat
既然你需要监控tomcat，基本说明你已经安装好tomcat。如有正好你不会安装tomcat，那么请参考TTLSA之前的
文章《Tomcat7安装》
配置 Tomcat JMX
 配置jmx
编辑catalina.sh，加入如下配置
# vim /usr/local/tomcat-7.0.65/bin/catalina.sh
CATALINA_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false
-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=12345"
启动Tomcat
# /usr/local/tomcat-7.0.65/bin/startup.sh
zabbix server配置
首先我们需要了解一下他们的对应关系，zabbix_server开启java poller, zabbx_java开启JavaGateway，端口为10052，
Tomcat JMX开启12345提供性能数据。
数据获取：java pollerJavaGateway:10052Tomcat:12345.
Java支持
编译安装zabbix server需要加上--enable-java以支持jmx监控，如果之前的zabbix server没加，那么请重新编译安
装, 分享下我的安装参数：
# ./configure --prefix=/usr/local/zabbix-3.0.0/ --enable-server --enable-agent --with-mysql --with-net-snmp --with-libcurl
--with-libxml2 --enable-java
启动zabbix_java
# /usr/local/zabbix-3.0.0/sbin/zabbix_java/startup.sh
zabbix_server.conf配置
默认未启用JavaPollers，需要修改如下配置
# cat /usr/local/zabbix-3.0.0/etc/zabbix_server.conf | grep Java | grep =
JavaGateway=127.0.0.1
JavaGatewayPort=10052
StartJavaPollers=5
Zabbix 图形界面配置
主机增加JMX接口
进入后台，configuration->hosts->选择你的主机->jmx interface 点击add，输入对应的tomcat ip地址和jmx端口，
如下图：
Link TOMCAT 模板
切换到templates选项卡，选择zabbix自带的tomcat/JMX模板，如下
最后Update即可。接下去等数据。
效果展示
自带的jmx两个模板监控项目非常多，自己去摸索。
zabbix 监控日志文件 MySQL 日志为例
一般情况下，日志最先反映出应用当前的问题，在海量日志里面找到我们异常记录，然后记录下来，并且根据情况
报警，大家可以监控系统日志、nginx、Apache、业务日志。这边我拿常见的MySQL日志做监控，大家看演示。
监控日志 key
首先要了解key，
log[ file ,,,,,]
file：文件名，写绝对路径
regexp：要匹配内容的正则表达式，或者直接写你要检索的内容也可以，例如我想检索带ERROR关键词的记录
encoding：编码相关，留空即可
maxlines：一次性最多提交多少行，这个参数覆盖配置文件zabbxi_agentd.conf中的’MaxLinesPerSecond’，我们也
可以留空
mode：默认是all，也可以是skip，skip会跳过老数据
output：输出给zabbix server的数据。可以是\1、\2一直\9，\1表示第一个正则表达式匹配出得内容，\2表示第二个
正则表达式匹配错的内容。
备注：我极力推荐大家使用第二个参数，看到网上一些zabbix监控日志的教程，几乎只有第一个参数，这样将会导
致日志文件里的内容统统丢给zabbix_server记录，我想，这一定不是大家想看到的。
日志文件权限配置
给日志文件加上读取权限，为了演示方便，我直接给777
# chmod 777 /data/mydata/mydata_3306/li220-237.err
如果权限给的不到位，zabbix agent日志有类似如下报错：
4780:20150311:135742.401 cannot open '/data/mydata/mydata_3306/li220-237.err': [13] Permission denied
4780:20150311:135742.401 active check "log[/data/mydata/mydata_3306/li220-237.err,ERROR,,,,]" is not supported
4779:20150311:135742.402 cannot open '/data/mydata/mydata_3306/li220-237.err': [13] Permission denied
4779:20150311:135742.402 active check "log[/data/mydata/mydata_3306/li220-237.err,ERROR,,,,]" is not supported
zabbix 配置
Host>>目标主机>>item>>create item，如下：
说明：
 type必须选择zabbix agent（active），因为数据是zabbix被监控的主动提交给server
 key：log[/data/mydata/mydata_3306/li220-237.err,ERROR,,,,]，我不多说了，细心的人会说，还有一个叫logrt得
key，有什么区别，等会儿讲.
 log time format：yyMMddphh:mm:ss，对应日志的行头150311 11:47:09，y表示年、M表示月、d表示日、p和:
一个占位符，h表示小时，m表示分钟，s表示秒。
zabbix 监控 MySQL 日志查看
切换到最新日志里面，找到相应数据，如下是我的监控截图
接下来便是触发器，大家可以根据自己的情况来创建触发器，例如日志中包含某个字符串等等，如上图，我们可以
触发执行mysql表修复。
logrt 介绍
key：
log[ file,,,,,]
logrt[file_regexp,,,,,]
如果仔细看可以发现，第一个参数不一样，logrt的第一个参数可以使用正则表达式。针对日志回滚用得，例如我们
每天都切割 nginx 日志，日志名位www.ttlsa.com_2017-01-01.log、www.ttlsa.com_2017-01-02.log等等，使用log肯
定不合适，如果文件名使用正则，那么新增的日志文件会立即加入监控。
备注：不管新日志、老日志，只要他们有变更，zabbix都会监控。
zabbix 监控惠普打印机
假设公司有多个楼层或者分布在不同楼，打印机自然分布很广泛，打印机缺少油墨或者卡纸了，都需要员工找 IT
部门。我们使用zabbix对打印机进行监控，一旦缺少油墨，zabbix发出报警，it人员能够及时更换，让打印机一直
处在不间断的工作状态。如果卡纸也能第一时间赶赴现场，迅速解决问题。
我们今天监控的主要项目是油墨，卡纸这块请根据对应的snmp来做
开启打印机SNMP
登陆打印机web地址：http://192.168.1.20/（我当前的），网络>>SNMP>>勾选"启用 SNMP v1/v2 只读访问(将 'public'
用于获取社区名称)"
油墨剩余量OID
# snmpwalk -v 1 -c public 192.168.1.20 .1.3.6.1.2.1.43.11.1.1.9.1.1
SNMPv2-SMI::mib-2.43.11.1.1.9.1.1 = INTEGER: 30
可以看出，我们当前油墨剩余量是30%，与web管理后台的剩余量一致
创建主机
configuration>>HOST>>create host，type选择SNMPv2 agent，key其实意义不大，OID：.1.3.6.1.2.1.43.11.1.1.9.1.1，
更新时间大家自己发挥，其他都用默认，想了解更多关于zabbix使用snmp监控，请回头看ttlsa相关文章。
创建触发器
当油墨小于10%，trigger触发warnning。出现warnning之后，接下来的便是邮件报警了。
当油墨不足时，trigger报警如下
打印机OID：http://www.oidview.com/mibs/0/Printer-MIB.html
zabbix 如何监控多个 JMX/Redis 等实例
本文主要主要是谈思路，不谈具体的配置过程。推荐有 zabbix 基础的人看，特别是有 zabbix 自动发现、lld
（low-level-discovery）经验的同学。
zabbix 自动发现
如果没有了解过zabbix自动发现，请看以下内容
 《zabbix发现介绍》整个功能的介绍
 《zabbix发现配置》server通过配置好的规则，自动添加host、group、template
 《zabbix Active agent自动注册》与discovery相反，功能基本相同，active联系server，server自动添加host、
group、template
 zabbix low-level discover zabbix批量部署必备（85）
特别是最后一篇LLD
为什么不能监控多个实例
生产环境上一台服务器安装多个redis、mongodb、mysql、tomcat等等实例。同一个zabbix主机上，不能同时存在
一个相同的key。如果监控jxm，即使添加两个jmx接口也不行！
如何监控多个实例？
答案：把key改成不相同。例如：监控redis key的数量，一般情况下，key如下：
redis[keys]
添加第一个item，很快就报错了，多实例可以改为如下:
redis[keys_10001]
redis[keys_10002]
keys加上端口号，即可解决key重复的问题，至于怎么取数据，我不多说了。mongodb、jmx等等都配合使用。
配合自动发现
我总是不厌其烦的推荐SA们一定要看zabbix自动发现，这是zabbix精髓所在。生产中，一台服务器上可能会存在
多个监控实例，比如：A服务器2个，B服务器4个, C服务器1个。单单靠套模板来完成监控，做法那太糟糕了。
解决LLD，所有相关监控实例童童自动被加入监控项。
zabbix 监控 mysql 性能
今天来看看zabbix如何监控mysql性能，这边使用mysql自带的模板，可以监控如下内容：OPS（增删改查）、mysql
请求流量带宽，mysql响应流量带宽，最后会附上相应的监控图！
编写check_mysql.sh脚本
用于获取mysql性能指标数据，你需要修改相应的数据库信息
# vim /usr/local/zabbix-2.4.4/scripts/chk_mysql.sh
脚本如下：
#!/bin/bash
# -------------------------------------------------------------------------------
# FileName: check_mysql.sh
# Revision: 1.0
# Date: 2015/06/09
# Author: DengYun
# Email: PI:EMAIL
# Website: www.ttlsa.com
# Description:
# Notes: ~
# -------------------------------------------------------------------------------
# Copyright: 2015 (c) DengYun
# License: GPL
# 用户名
MYSQL_USER='zabbix'
# 密码
MYSQL_PWD='123456'
# 主机地址/IP
MYSQL_HOST='127.0.0.1'
# 端口
MYSQL_PORT='3306'
# 数据连接
MYSQL_CONN="/usr/bin/mysqladmin -u${MYSQL_USER} -p${MYSQL_PWD} -h${MYSQL_HOST} -P${MYSQL_PORT}"
# 参数是否正确
if [ $# -ne "1" ];then
echo "arg error!"
fi
# 获取数据
case $1 in
Uptime)
result=`${MYSQL_CONN} status|cut -f2 -d":"|cut -f1 -d"T"`
echo $result
;;
Com_update)
result=`${MYSQL_CONN} extended-status |grep -w "Com_update"|cut -d"|" -f3`
echo $result
;;
Slow_queries)
result=`${MYSQL_CONN} status |cut -f5 -d":"|cut -f1 -d"O"`
echo $result
;;
Com_select)
result=`${MYSQL_CONN} extended-status |grep -w "Com_select"|cut -d"|" -f3`
echo $result
;;
Com_rollback)
result=`${MYSQL_CONN} extended-status |grep -w "Com_rollback"|cut -d"|" -f3`
echo $result
;;
Questions)
result=`${MYSQL_CONN} status|cut -f4 -d":"|cut -f1 -d"S"`
echo $result
;;
Com_insert)
result=`${MYSQL_CONN} extended-status |grep -w "Com_insert"|cut -d"|" -f3`
echo $result
;;
Com_delete)
result=`${MYSQL_CONN} extended-status |grep -w "Com_delete"|cut -d"|" -f3`
echo $result
;;
Com_commit)
result=`${MYSQL_CONN} extended-status |grep -w "Com_commit"|cut -d"|" -f3`
echo $result
;;
Bytes_sent)
result=`${MYSQL_CONN} extended-status |grep -w "Bytes_sent" |cut -d"|" -f3`
echo $result
;;
Bytes_received)
result=`${MYSQL_CONN} extended-status |grep -w "Bytes_received" |cut -d"|" -f3`
echo $result
;;
Com_begin)
result=`${MYSQL_CONN} extended-status |grep -w "Com_begin"|cut -d"|" -f3`
echo $result
;;
*)
echo
"Usage:$0(Uptime|Com_update|Slow_queries|Com_select|Com_rollback|Questions|Com_insert|Com_delete|Com_com
mit|Bytes_sent|Bytes_received|Com_begin)"