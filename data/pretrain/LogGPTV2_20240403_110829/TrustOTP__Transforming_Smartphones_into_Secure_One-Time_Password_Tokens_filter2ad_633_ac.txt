from the MicroSD card to memory, it shortens the displaying
latency when TrustOTP is running. Though the required
memory space is small compared to the 1 GB memory space
of i.MX53 QSB, we can further reduce it by using small-sized
number pictures.
5.3 TrustOTP Booting
Figure 3 shows the detailed booting process of TrustOTP.
When the system powers on, the code in the ROM runs ﬁrst,
and it loads the secure bootloader from the MicroSD card
into the secure memory. Then, the secure bootloader is re-
sponsible for loading TrustOTP from the MicroSD card into
the secure memory. Next, the secure bootloader also loads
the images of the non-secure bootloader and the Rich OS
kernel from the MicroSD card into the non-secure mem-
ory. At last, the secure bootloader switches the system
into the normal domain to run the non-secure bootloader,
which sets the execution environment in the normal domain
and then runs the already loaded Rich OS kernel to mount
the USB ﬂash drive as ﬁlesystem. High Assurance Boot
(HAB) of i.MX53 QSB [30] is used to ensure a secure boot-
ing through checking the integrity of the secure bootloader
and the TrustOTP image before loading them. Therefore,
our system can detect any malicious attempts on tampering
with the static image on the MicroSD card.
Figure 3: TrustOTP Booting Process.
5.4 Reliable Switch
Our reliable switch is based on the non-maskable interrupt
(NMI) mechanism; however, since i.MX53 QSB does not ex-
plicitly provide any NMI, we propose a method to construct
an NMI on i.MX53 QSB. First, we set the interrupt type of
the targeted NMI source as secure in the Interrupt Security
Register (TZIC INTSEC), which prevents the Rich OS from
conﬁguring the NMI in the TZIC [30]. Second, we enable
FIQ exception by setting the F bit of Current Program Sta-
tus Register (CPSR) to 0. To ensure the F bit of CPSR
cannot be tampered with by the Rich OS, we then set the
F W bit of Secure Conﬁguration Register (SCR) to 0. After
these two bits are set, the Rich OS cannot disable or block
the FIQ requests to the ARM processor. Third, we enforce
the ARM processor to switch to the monitor mode on an
FIQ exception by setting the F IQ bit in SCR to 1. This
enforcement ensures that the FIQ request to the secure do-
main does not need to go through the normal domain, and
thus cannot be intercepted or blocked by the Rich OS. Fi-
nally, we conﬁgure the NMI source as a secure peripheral in
the CSU that cannot be accessed by the Rich OS.
In our prototype, we choose the user-deﬁned button 1 on
i.MX53 QSB to trigger the reliable switch. Since the button
is connected to the ﬁfteenth pin of GPIO-2, we use GPIO-
2 as our NMI source. After the above steps, the system
USB Flash DriveMicroSD cardNon-secure MemorySecure MemorySecure BootloaderTrustOTPKernelNon-secure BootloaderTrustOTPSecure BootloaderKernelNon-secure BootloaderFilesystemNormal DomainSecure Domain2143981will switch into the secure domain as soon as the button is
pressed.
5.5 OTP Generator
In our prototype, we implement two types of OTP
generation algorithms:
the event-based HOTP based
on RFC4226 [12] and the time-based TOTP based on
RFC6238 [13]. We adopt the source code from OATH
Toolkit [46] that provides components for building one-time
password authentication systems. It supports OTP genera-
tion, validation, and control through a command line. We
only port the OATH Toolkit parts that implement OTP gen-
eration to the secure domain.
To reduce the system’s trusted computing base (TCB),
there is no operating system in the secure domain, so the
OTP code must be self-contained and run directly on the
bare-metal environment. Since the source code from OATH
Toolkit relies on the C standard library to call the output
functions such as printf and the memory operation func-
tions such as memcpy, we port these functions in the secure
domain to eliminate the dependency on the C library.
Listing 1: OTP Generation Functions
int o a t h _ h o t p _ g e n e r a t e ( const char * secret ,
size_t secret_length ,
u i n t 6 4 _ t moving_factor ,
u n s i g n e d digits ,
char * o u t p u t _ o t p )
int o a t h _ t o t p _ g e n e r a t e ( const char * secret ,
size_t secret_length ,
time_t now ,
u n s i g n e d time_step_size ,
u n s i g n e d digits ,
char * o u t p u t _ o t p )
The two major functions are oath_hotp_generation()
and oath_totp_generation(), whose declarations are shown
in Listing 1. The explanation of the function parameters
is listed in Table 1.
Secret is the shared key and se-
cret_length is the key’s length. The algorithms are able
to support 6-digit, 7-digit and 8-digit OTP, and the digits
deﬁnes the length of the OTP. The generated OTP output
is stored in output_otp in the form of characters.
In the
event-based HOTP generation, the moving_factor is the
counter used for calculating the one-time password. In the
TOTP, now is the current Unix time value and a new TOTP
is generated every time_step_size seconds.
Table 1: Parameters of HOTP and TOTP.
Parameter
secret
secret_length
moving_factor
now
time_step_size
Explanation
the secret key
the length of secret Key
the secure counter in HOTP
the secure clock in TOTP
time period
between two TOTPs
digits
output_otp
the length of the generated OTP
the generated OTP
Secure Key Management
5.5.1
The secret key (seed) must be protected both in the per-
manent storage and in the RAM memory. We store the
key for one OTP on the secure MicroSD card, so that the
Rich OS cannot read, write, or delete it. Furthermore, we
can add another level of protection by storing the keys in
ciphertext, which is encrypted by hardware SCC-AES sup-
port on i.MX53 QSB, where the encryption key is protected
in the e-FUSE based secure storage. Since the key will only
be loaded into the secure memory by the secure bootloader,
the Rich OS cannot access it. Moreover, to prevent infor-
mation leakage, all the CPU registers are ﬂushed to remove
the residual keying materials before switching back from the
secure domain to the normal domain.
5.5.2 Clock and Counter Protection
For the time-based TOTP, a synchronized clock time is
required to generate the OTP, so the clock on the smart-
phone should continue to run even if the system is powered
oﬀ. Moreover, the clock cannot be manipulated by the Rich
OS. On i.MX53 QSB, a secure real-time clock (SRTC) is in-
cluded. The SRTC clock is served by a 32.768KHz crystal,
and it consists of two domains: low power domain and high
power domain. The low power domain of SRTC (SRTC LP)
is powered by a coin cell battery. Therefore, the SRTC LP is
always powered up as long as the battery works. Moreover,
the SRTC LP can only be accessed by the secure domain.
Therefore, we use the SRTC LP as the secure clock for our
time-based OTP solutions.
For the event-based HOTP, the counter changes each
time an OTP is generated. Since the value of the counter
should be maintained even after the system is reset, we
use the Low Power Secure Monotonic Counter Register
(SRTC LPSMCR) on our board to store the counter. The
counter cannot be accessed by the normal domain and is
able to retain its value after the system reboots.
5.5.3 Multiple OTPs
TrustOTP is ﬂexible to accommodate diﬀerent OTP algo-
rithms. Due to the OTP standardization work, most OTP
instances use the same algorithms but diﬀerent seeds and
other parameters such as counters. Thus, we can support a
large number of OTP instances in our system. When a user
wants to add a new OTP instance, the user usually ﬁrst re-
quests a new key from the corresponding authentication sys-
tem or through other secure communication channels. Then,
the user can use a trusted user input interface using touch-
screen to upload the new key into the secure storage and
update TrustOTP with the new instance. Since the secret
key is usually 20 bytes, it may be tedious and error-prone
to input 40 hexadecimals manually. Instead, the user can
use a MicroSD card reader to upload the new key. More-
over, an alias is given when a new OTP instance is created.
Thus, the user can choose the needed instance according to
its alias shown on the screen.
For the TOTP instances, they can share the same SRTC
clock time; while the HOTP instances may require to pro-
tect diﬀerent counters besides the diﬀerent secret keys. In
our prototype, since i.MX53 QSB only provides one secure
counter register, to support multiple HOTP instances, we
choose to save those counters on the secure MicroSD card.
To minimize the counter synchronization error, we update
982the counter on the MicroSD card each time an OTP is gen-
erated.
5.6 Secure Touchscreen Driver
Since the user needs to input the key in the secure do-
main to register an OTP and choose which OTP to update
both on the touchscreen, a secure touchscreen drivers must
be included to ensure the input will not be intercepted or
blocked by the Rich OS. In our prototype, a 4-wire resistive
touchscreen is connected to the Power Management Inte-
grated Circuit (PMIC) [27]. The PMIC collects the voltage
of the touchscreen and converts the analog value to digital
one that represents the X-Y coordinate of the touch on the
screen. The value of each coordinate is stored in an Analog-
to-Digital Converter (ADC) register in PMIC and is zero
when there is no touch event.
When the touchscreen is touched, a PMIC interrupt arises.
The interrupt handler calls the touchscreen driver to read
the ADC registers to get the location of the touch. Next the
driver parses the user’s intention based on the input and
the display. Since the touchscreen is used by both the Rich
OS and TrustOTP, it has two interrupt handlers: one for
the normal domain and the other for the secure domain.
After TrustOTP is triggered by NMI, the interrupt of the
touchscreen is set to secure. Then if there is a touch on the
screen, an interrupt will arise in the secure domain. After
all the activities end in the secure domain, the interrupt of
the touchscreen is conﬁgured back to non-secure.
5.7 Secure Display Controller
Since the LCD is shared between the secure domain and
the normal domain, TrustOTP shares the same display de-
vice with the Rich OS. Therefore, we must prevent the
Rich OS from stealing the keying materials from TrustOTP
through inspecting the shared display device. Moreover,
since the Rich OS may be compromised or simply crashes,
we cannot rely on the Rich OS’s framebuﬀer driver to dis-
play the OTP to the users.
In our prototype, we include a self-contained secure dis-
play controller in the secure domain to reset the IPU in the
secure domain and program the IPU to display the secure
framebuﬀer. We adopt a stand-alone IPU driver from an
on-board diagnostics suite of i.MX53 QSB [32]. Our display
system consists of two major components: the Image Pro-
cessing Unit (IPU) and the LCD. The IPU is responsible for
sending the data ﬂow from the display framebuﬀer to the
external display device. It can also conduct certain image
processing and manipulation on the data ﬂow. The size of
the framebuﬀer, the pixel format, and the location of the
framebuﬀer are all set in the Channel Parameter Memory
(CPMEM). The LCD is the display device and it requires
initialization before being used.
When the Rich OS is running, the IPU is set as a non-
secure device and can transfer data from the non-secure
framebuﬀer to the LCD. When the system switches to the
secure domain, the secure display controller saves the state
of the IPU and uses the self-contained touchscreen driver
to reset the IPU. In i.MX53 QSB, the normal domain can
choose to use either one framebuﬀer or three framebuﬀers in
a round-robin fashion to improve the display performance.
By default, the Rich OS uses all three framebuﬀers. There
is a control interface between the GPU and the IPU to syn-
chronize the usage of the framebuﬀers. After switching into
the secure domain, the secure display controller only uses the
secure framebuﬀer to transfer pixel data to the LCD. Since
the IPU is set as a non-secure peripheral when working in
the normal domain, the controller needs to set the IPU as
secure to transfer the data from the secure framebuﬀer to
LCD. Before returning to the Rich OS, the controller erases
the footprint in the device to prevent the information leak-
age, and then restores the device states for the Rich OS. An
alternative method to achieve a secure display is to reuse the
Rich OS’s IPU driver after verifying its integrity. However,
it cannot guarantee to provide a reliable display for OTP
when the Rich OS crashes. Therefore, we choose to provide
a self-contained display controller to show the OTPs in our
prototype.
We reserve the highest 1 M B RAM as the secure memory.
In the 1 M B secure memory, 750 KB is reserved as the se-
cure framebuﬀer. Since the secure framebuﬀer contains the
information of the displayed OTP, we protect it in the se-
cure domain. The framebuﬀer contains 800*480 pixels, and
each pixel is expressed by a 2-byte RGB565 value. To dis-
play the OTP, we save pictures of numbers from 0 to 9 that
occupy 156.25 KB memory, which may be further reduced
by using smaller pictures. These pictures are preloaded into
the memory when the system boots.
5.8 User Friendly Display
When TrustOTP is running, the Rich OS will be sus-
pended until TrustOTP exits. Therefore, if the OTPs are
being displayed for a long time, the user cannot perform any
operations in the Rich OS. It is ﬁne for some usage scenar-
ios. For instance, if the user wants to input an OTP on a
laptop, he can keep showing the OTP on the smartphone’s
screen. However, if the user needs to input the OTPs into
apps running on the smartphones, she has to remember the
OTP before TrustOTP exits and then input it in the Rich
OS. To make it convenient for the user to use the OTP lo-
cally on the smartphone, we develop a user-friendly display
method. The basic idea is to display the OTP only for a
very short time and repeat this display operation with a
time interval until the user stops the display by pressing the
user-deﬁned button 1 again. The OTP needs only to be cal-
culated once at the ﬁrst entry of the secure domain. In next
entries, TrustOTP just needs to display the generated OTP
if no new OTPs are generated.
i.MX53 QSB provides two identical Watchdog Timer
(Wdog) modules with diﬀerent privilege: one for normal use
and the other for TrustZone use. The Wdog 2 on our board
is used for periodically displaying OTP. After being acti-
vated, a Wdog starts the time-out counter with a conﬁg-
urable period from 0.5 second to 128 seconds in a resolution
of 0.5 second. The Wdog will generate an interrupt after
the time period expires unless the counter is reset before
the time out. The interrupt of Wdog 2 is conﬁgured as an
NMI and Wdog 2 starts to count since the system boots up;
however, the interrupt is disabled by TrustOTP. Hence, the