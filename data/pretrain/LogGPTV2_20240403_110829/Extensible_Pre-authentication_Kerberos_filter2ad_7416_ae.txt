In Network and Distributed System Security, 1995.
[9] Gary Ian Gaskell.
Integrating Smart Cards into Kerberos. Master’s thesis,
Queensland University of Technology, Feb 2000.
51
REFERENCES
[10] Alan Harbitter and Daniel A. Menasc´e. Performance of Public Key-Enabled
Kerberos Authentication in Large Networks. In IEEE Conference on Security
and Privacy, Oakland, CA, May 2001.
[11] Alan Harbitter and Daniel A. Menasc´e. The Performance of Public Key-
Enabled Kerberos Authentication in Mobile Computing Applications. In Pro-
ceedings of the 8th ACM Conference on Computer and Communications Secu-
rity, Philadelphia, PA, Nov 2001. ACM Press.
[12] Heimdal Kerberos 5 Implementation. http://www.pdc.kth.se/heimdal/.
[13] Amir Herzberg, Yosi Mass, Joris Mihaeli, Dalit Naor, and Yiftach Ravid. Access
Control Meets Public Key Infrastructure, Or: Assigning Roles to Strangers. In
IEEE Symposium on Security and Privacy, Berkeley, CA, May 2000.
[14] Adam Hess, Jared Jacobson, Hyrum Mills, Ryan Wamsley, Kent E. Seamons,
and Bryan Smith. Advanced Client/Server Authentication in TLS. In Network
and Distributed System Security Symposium, San Diego, CA, Feb 2002.
[15] Matthew Hur, Brian Tung, Tatyana Ryutov, Cliﬀord Neuman, Ari Medvinski,
Gene Tsudik, and Bill Sommerfeld. Public Key Cryptography for Cross-Realm
Authentication in Kerberos, Nov 2001.
[16] Dave Kearns. Kerberos and Windows 2000. Network World Fusion, Mar 2000.
[17] N. Li, J.C. Mitchell, and W.H. Winsborough. Design of a role-based trust
management framework. In IEEE Symposium on Security and Privacy, May
2002.
[18] J. Linn. RFC: 2743: Generic Security Service Application Program Interface
Version 2, Jan 2000.
52
REFERENCES
[19] Microsoft. Windows 2000 Kerberos Authentication. Microsoft Technical White
Paper, Jul 1999.
[20] Microsoft. Microsoft .Net Passport. Microsoft Technical White Paper, Jan
2004.
[21] Patrick C. Moore, Wilbur R. Johnson, and Richard J. Detry. Adapting Globus
and Kerberos for a Secure ASCI Grid. In Proceedings of the 2001 ACM/IEEE
Conference on Supercomputing, Denver, CO, Nov 2001. ACM Press.
[22] Cliﬀord Neuman, Tom Yu, Sam Hartman, and Ken Raeburn. RFC 4120: The
Kerberos Network Authentication Service (V5), Jul 2005.
[23] S. Sakane and K. Kamada. Applying Kerberos to the communication environ-
ment for information appliances. In Applications and the Internet Workshops,
2003.
[24] Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein, and Charles E. Youman.
Role-Based Access Control Models. IEEE Computer, 29(2):38–47, Feb 1996.
[25] Marvin A. Sirbu and John Chung-I Chuang. Distributed Authentication in
Kerberos Using Public Key Cryptography. In Network and Distributed System
Security, Feb 1997.
[26] William Stallings. Network Security Essentials. Prentice Hall, 2000.
[27] Jennifer G. Steiner, B. Cliﬀord Neuman, and Jeﬀrey I. Schiller. Kerberos:
An authentication service for open network systems.
In USENIX Technical
Conference, 1988.
53
REFERENCES
[28] Timothy W. van der Horst and Kent E. Seamons. Simple Authentication for
the Web. In To Appear: Security and Privacy in Communications Networks,
2007.
[29] William H. Winsborough, Kent E. Seamons, and Vicki E. Jones. Automated
Trust Negotiation. In Information Survivability Conference and Exposition, Jan
2000.
[30] M. Winslett, T. Yu, K.E. Seamons, A. Hess, R. Jarvis, B. Smith, and L. Yu.
Negotiating Trust on the Web. IEEE Internet Computing Special Issue on Trust
Management, 6(6), November/December 2002.
[31] Ting Yu, Xiaosong Ma, and Marianne Winslett. PRUNES: An Eﬃcient and
Complete Strategy for Automated Trust Negotiation over the Internet. In 7th
ACM Conference on Computer and Communications Security, Athens, Greece,
Nov 2000.
[32] Ting Yu, Marianne Winslett, and Kent E. Seamons. Interoperable Strategies in
Automated Trust Negotiation. In Proceedings of the 8th ACM Conference on
Computer and Communications Security, Philadelphia, PA, Nov 2001. ACM
Press.
[33] Larry Zhu and Brian Tung. RFC: 4556: Public Key Cryptography for Initial
Authentication in Kerberos (PKINIT), Jun 2006.
54
Appendix A — Source Code
Heimdal 0.8.1 source can be obtained from:
I http://www.pdc.kth.se/heimdal/
EPAK, SAWK, and TNK source can be obtained from:
I http://isrl.cs.byu.edu/epak/
55
APPENDIX A. SOURCE CODE
56
Appendix B — EPAK ASN.1 Deﬁnitions
EPAK DEFINITIONS ::=
BEGIN
IMPORTS Realm, Principal, KerberosTime, EncryptionKey, EncryptedData,
Checksum, krb5int32 FROM krb5;
epakvno INTEGER ::= 1 -- Current EPAK protocol version number.
-- EPAK Data: Main data including principal names, etc.
EPAKData ::= SEQUENCE {
-- Client principal (name and realm).
cprinc[0]
Principal,
-- Client requests desired start and end time.
-- Server responds with granted start/end time.
-- (EPAKTicket is not renewable).
starttime[1]
endtime[2]
KerberosTime OPTIONAL,
KerberosTime
}
-- The EPAK Ticket is always encrypted by the EPAK key, aka K(epak).
EPAKTicket ::= SEQUENCE {
-- Session key K(c,as). (A random session key between client
-- and AS, generated by pre-authentication server).
key[0]
EncryptionKey,
-- Main data including principal names, etc.
epakdata[1]
EPAKData
}
-- The EPAK Authenticator helps prove that this client was recently
-- granted the EPAK Ticket. Serves same purpose as authenticators
-- in RFC 4120.
EPAKAuth ::= SEQUENCE {
cprinc[0]
cksum[2]
cusec[3]
ctime[4]
Principal,
Checksum OPTIONAL,
krb5int32,
KerberosTime
57
APPENDIX B. EPAK ASN.1 DEFINITIONS
}
-- EPAK Request: Used to obtain pre-authentication for a client
--
EPAK-REQ ::= SEQUENCE {
from a custom pre-authentication server.
-- EPAK Version number.
epakvno[0]
INTEGER (-2147483648..2147483647),
-- Main data including principal names, etc.
epakdata[1]
EPAKData
}
-- EPAK Reply: Response from pre-authentication server.
--
EPAK-REP ::= SEQUENCE {
Contains pre-authentication data to be used in AS-REQ.
-- EPAK Version number.
epakvno[0]
INTEGER (-2147483648..2147483647),
-- Main data including principal names, etc.
epakdata[1]
EPAKData,
-- Realm of pre-authentication server (PAS)
pasrealm
Realm,
-- Session Key K(c,as) that will be needed to decode the AS-REP.
-- (Random session key between client and AS).
key[3]
EncryptionKey,
-- Encrypted EPAK Ticket, used as the pre-auth data in AS-REQ.
-- The ticket also contains the session key K(c,as).
epakticket[4]
EncryptedData
}
-- EPAK pre-authentication data for AS-REQ.
PA-EPAK-AS-REQ ::= SEQUENCE {
-- EPAK Version number.
epakvno[0]
INTEGER (-2147483648..2147483647),
-- Realm of pre-authentication server (PAS)
pasrealm
Realm,
-- Encrypted EPAK Ticket, which is the pre-auth data.
58
-- The ticket also contains the session key K(c,as).
epakticket[1]
EncryptedData,
-- Encrypted EPAK Authenticator, to help prevent replay.
epakauth[2]
EncryptedData
}
-- EPAK pre-authentication data for AS-REP.
PA-EPAK-AS-REP ::= SEQUENCE {
-- EPAK Version number.
epakvno[0]
INTEGER (-2147483648..2147483647),
-- Server responds with 0 if pre-auth succeeded.
result[1]
INTEGER (-2147483648..2147483647)
}
59
APPENDIX B. EPAK ASN.1 DEFINITIONS
60
Appendix C — EPAK Installation Guide
Build Heimdal Kerberos w/EPAK support
1. Download Heimdal Kerberos 0.8.1 (heimdal-0.8.1.tar.gz)
• MD5 = 7ff8c4850bce9702d9d3cf9eff05abaa
• See Appendix A
2. Download EPAK patch (epak.patch)
• See Appendix A
3. Install 3rd party tools and libraries
• yacc/bison
• ﬂex
• xt library (libxt-dev)
• Berkeley DB (libdb3-dev)
• ncurses (libncurses5-dev)
4. Extract Heimdal Kerberos
• tar -zxvf heimdal-0.8.1.tar.gz
5. Apply EPAK Patch
• cd heimdal-0.8.1/
• patch -p1 < /path/to/epak.patch
6. Build Heimdal Kerberos with EPAK enabled
• ./configure --enable-epak --enable-epakdebug
– (--enable-epakdebug is optional)
• make
7. Install Heimdal Kerberos (optional)
• make install
61
APPENDIX C. EPAK INSTALLATION GUIDE
Set up /etc/krb5.conf on server and client
A sample krb5.conf is presented below. The epak ticket lifetime should be
set to a value similar to the other ticket lifetimes, such as eight or ten hours (36000
seconds).
[libdefaults]
ticket_lifetime = 36000
epak_ticket_lifetime = 36000
default_realm = SSHOCK.HOME
no-addresses = true
[realms]
SSHOCK.HOME = {
kdc = sshock.homeipx.net
admin_server = sshock.homeipx.net
default_domain = sshock.homeipx.net
}
[domain_realm]
sshock.homeipx.net = SSHOCK.HOME
[logging]
kdc = FILE:/var/log/krb5kdc.log
admin_server = FILE:/var/log/kadmin.log
default = FILE:/var/log/krb5lib.log
Set up Kerberos server
Note: These commands must be run as root (or using sudo).
1. Create heimdal directory
• mkdir /var/heimdal
• chmod 700 /var/heimdal
2. Create master key ﬁle
• cd heimdal-0.8.1/
• kdc/kstash --random-key
3. Initialize database
62
• kadmin/kadmin -l
• init REALM
– where REALM is the name of your realm
– init will ask some questions about max ticket life
4. Add a principal for your username (optional)
• add username
5. Add one or more principal that will be used with pre-authentication
• add --random-key princname
6. Add epakt/REALM (EPAK Ticket) service principal
• Run these commands on the PAS machine
• kadmin/kadmin -l
• add --random-key epakt/REALM
• ext epakt/REALM
– This puts the key into the keytab ﬁle /etc/krb5.keytab.
– If KDC resides on a diﬀerent machine, you must export the principal
to the keytab of the KDC as well.
7. To test ftp or telnet, add service principals and setup daemons
• add --random-key host/hostname
– where hostname is the domain name of the ftp or telnet server
– host/localhost may work ﬁne for testing.
• ext host/myhostname
– This puts the key into the keytab ﬁle /etc/krb5.keytab.
– If ftp or telnet server is on a diﬀerent machine than the KDC, you
must export the principal to the keytab on that machine as well.
• Setup telnetd and ftpd in your inetd.conf.
– Make sure your clients use kerberized telnet and ftp programs.
• If you didn’t install kerberos with make install, you must add a link
from /usr/heimdal/bin/login to heimdal-0.6.3/appl/login/login.
Download and setup SAWK and/or TNK for testing EPAK
See Appendix A for source code.
63