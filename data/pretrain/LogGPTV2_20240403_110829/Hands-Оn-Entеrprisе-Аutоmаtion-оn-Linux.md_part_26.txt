- oddjob-mkhomedir
- sssd
- samba-common
- samba-common-tools
- adcli
[ 278 ]
Managing Users on Linux Chapter 10
- krb5-workstation
- openldap-clients
- policycoreutils-python
Some of these packages offer supporting functions—for example, openldap-
clients is not directly required, but can be very useful in debugging directory
issues.
3. Once our prerequisite packages are installed, our next task is to join the Active
Directory itself. Here, we are assuming the presence of
roles/realmd/vars/main.yml with the
realm_join_password, realm_join_user, and realm_domain variables set.
As this file might well contain a password with sufficient privileges to join the
AD domain, it is recommended that this variables file be encrypted with
ansible-vault. Run the following code:
- name: Join the domain
shell: echo '{{ realm_join_password }}' | realm join --user={{
realm_join_user }} {{ realm_domain }}
register: command_result
ignore_errors: True
notify:
- Restart sssd
The use of the shell module to perform the realm join requires special
consideration, as running this task twice will not yield the normal clean behavior
of Ansible. Indeed, performing a second realm join when the server is already
a domain member results in an error. As a result, we set ignore_errors: True,
and register the result of the command so that we can later evaluate if it ran
successfully. We also notify a handler that we will define later, to restart the sssd
service. The aforementioned vars file should look something like this:
---
realm_join_password: securepassword
realm_join_user: PI:EMAIL
realm_domain: example.com
Be sure to substitute the variable values with ones appropriate to your own
environment.
[ 279 ]
Managing Users on Linux Chapter 10
4. We immediately follow this task with a check, to see if the realm join was
successful. If it was successful, we should either get a return code of 0 or an
error, informing us that the server is Already joined to this domain. If we
don't get these expected results, then we will fail the entire play to ensure that the
issue can be rectified, as follows:
- name: Fail the play when the realm join fails
fail:
msg="Realm join failed with this error: {{
command_result.stderr }}"
when: "'Already joined to this domain' not in
command_result.stderr and command_result.rc != 0"
5. Finally, we create the handler, to restart sssd in
roles/realmd/handlers/main.yml, as follows:
---
- name: Restart sssd
service:
name: sssd
state: restarted
enabled: yes
These steps are all sufficient to perform the basic addition of a Linux server to an AD
domain. Although the example is given for CentOS 7, the process should be broadly similar
for operating systems like Ubuntu, as long as you take account of the different package
manager and package names.
There are, of course, a vast number of enhancements that can be made to the preceding
procedure, most of which will be performed with the realm command. Sadly, at the time of
writing, there is no realm module for Ansible, so, all realm commands must be issued
with the shell module—though this still enables automated rollouts of AD membership to
Linux servers using Ansible.
Possible enhancements for you to consider to the preceding process (all of which can easily
be automated by extending the example playbook we have previously suggested) are as
follows:
Specify the organizational unit (OU) that the Linux server is to go into when the
join is complete. Without specifying this, it will go into the default Computers
OU. You can change this, by specifying something like --computer-
ou=OU=Linux,OU=Servers,OU=example,DC=example,DC=com within your
realm join command. Be sure the OU has been created first, and adjust the
preceding parameter to match your environment.
[ 280 ]
Managing Users on Linux Chapter 10
By default, all valid domain user accounts will be able to log in to the Linux
server. This may not be desirable and, if not, you will need to first of all deny all
access, using the command realm deny --all. Then, to say you wish to allow
all users in the LinuxAdmins AD group, you would then issue the following
command: realm permit -g LinuxAdmins.
It is unlikely you will have a group in your AD called wheel or sudo, and as a
result, AD users may find themselves unable to execute privileged commands.
This can be rectified by adding the appropriate users or groups into
/etc/sudoers or, better still, a unique file under /etc/sudoers.d that Ansible
can manage. For example, creating /etc/sudoers.d/LinuxAdmins with the
following content would enable all members of the LinuxAdmins AD group to
perform sudo commands without re-entering their passwords:
%LinuxAdmins ALL=(ALL) NOPASSWD: ALL
All of these tasks are left as an exercise for you, though it is expected that the information
given in this chapter is sufficient for you to build up your own playbook suited to your AD
infrastructure.
In the next section, we will look at the use of the FreeIPA directory service that is native to
Linux, and how to integrate this into your environment with Ansible.
FreeIPA
FreeIPA is a freely available open source directory service that is simple to install and
manage. It runs on Linux and runs primarily on CentOS or Red Hat Enterprise Linux
(RHEL), though client support is readily available on Ubuntu and other Linux platforms.
Integration with Windows AD is even possible, though is in no way required.
If you are building a purely Linux environment, it makes sense to look at FreeIPA, as
opposed to putting in a proprietary solution such as Microsoft AD.
FreeIPA and Microsoft AD are by no means the only two options on the
market for directory services, and a number of cloud-based alternatives
are now available, including JumpCloud, AWS Directory Service, and
many others. Always make your own independent decisions regarding
the best option for you as the field is fast evolving, especially when it
comes to cloud-based directory services.
[ 281 ]
Managing Users on Linux Chapter 10
As with the previous section on Microsoft AD, the design and deployment of a FreeIPA
infrastructure are beyond the scope of this book. Directory services are core services on
your network—imagine if you only built a single directory server, and then had to shut it
down for maintenance. Even a simple reboot would leave users unable to log in to all
machines joined to it for the duration the services were down. For these reasons, it is vitally
important that you design your directory service infrastructure to take account of
redundancy and disaster recovery. It is also important that you have well-secured local
accounts in case your directory infrastructure does fail, as discussed earlier in this chapter,
in the section entitled Performing user account management tasks.
Once you have designed a suitably redundant infrastructure for your FreeIPA installation,
there are a series of playbooks and roles available on GitHub, created by the FreeIPA team,
to install your server and clients, and you can explore these further here: https:/​/​github.
com/​freeipa/​ansible-​freeipa
This book leaves the task of installing your FreeIPA infrastructure to you—however, let's
take a look at the use of the freely available FreeIPA roles, to install clients on your
infrastructure. After all, this is one of the key benefits of open source software—the sharing
of knowledge, information, and code.
1. First of all, we clone the ansible-freeipa repository to our local machine, and
change into the directory to make use of it, as follows:
$ cd ~
$ git clone https://github.com/freeipa/ansible-freeipa
$ cd ansible-freeipa
2. Next, create symbolic links to roles and modules we just cloned into our local
Ansible environment, as follows:
$ ln -s ~/ansible-freeipa/roles/ ~/.ansible/
$ mkdir ~/.ansible/plugins
$ ln -s ~/ansible-freeipa/plugins/modules ~/.ansible/plugins/
$ ln -s ~/ansible-freeipa/plugins/module_utils/ ~/.ansible/plugins/
3. Once that is done, we must create a simple inventory file that includes
appropriate variables, to define the FreeIPA realm and domain, and also, the
password of the admin user (which is required to join a new server to the IPA
realm). The following example is shown, but be sure to customize it to your
requirements:
[ipaclients]
centos-testhost
[ipaclients:vars]
[ 282 ]
Managing Users on Linux Chapter 10
ipaadmin_password=password
ipaserver_domain=example.com
ipaserver_realm=EXAMPLE.COM
4. With the appropriate variables set and the inventory compiled, we can then run
the playbooks provided, with the code downloaded from GitHub. An example of
this FreeIPA client installation playbook running is shown, as follows:
The preceding output shown is truncated but shows the FreeIPA client installation in
process. As usual for examples in this book, we have kept it simple, but this could just as
easily be run against 100, or even 1,000, servers.
As these playbooks and roles are provided by the official FreeIPA project, they are a
trustworthy source for installing both servers and clients, and although it is highly
recommended to test and review any code you download, these should serve well for
building up your FreeIPA-based infrastructure.
[ 283 ]
Managing Users on Linux Chapter 10
In the next section, we will take a look at the ways in which Ansible can help with enforcing
and auditing user accounts and configuration.
Enforcing and auditing configuration
When it comes to user account management, security is important. As we discussed in the
section entitled Centralizing user account management with LDAP, Ansible is not designed
specifically for enforcement or auditing— however, it can help us greatly. Let's consider a
few of the security risks around user management that Ansible can help to mitigate,
starting with the sudoers file.
Managing sudoers with Ansible
The /etc/sudoers file is one of the most sensitive on most Linux systems, as it defines
which user accounts can run commands as the superuser. Needless to say, this file being
compromised or modified in an unauthorized way could pose a huge security risk to not
just the Linux server in question, but to the network at large.
Thankfully, Ansible templates can help us to manage this file effectively. Like other modern
Linux configurations, the sudoers configuration is broken up into several files, to make it
more manageable. The files are, typically, as follows:
/etc/sudoers: This is the master file, and references all other files that might be
considered.
/etc/sudoers.d/*: These files are normally included by a reference in the
/etc/sudoers file.
As we discussed in the chapter entitled Configuration Management with Ansible, someone
could potentially edit /etc/sudoers and tell it to include a completely different path in
addition to, or instead of, /etc/sudoers.d/*, meaning that it is vital we deploy this file
through a template. This ensures we maintain control of which files provide sudo
configuration.
[ 284 ]
Managing Users on Linux Chapter 10
We will not repeat our discussion on templates and their deployment with Ansible, as the
techniques discussed in Chapter 7, Configuration Management with Ansible apply equally
well here. However, we will add an important caveat. If you break the sudo configuration
by deploying a file with (for example) a syntax error in it, you risk locking all users out of
privileged access. This would mean the only way to fix the problem would be to log in to
the server using the root account, and if this is disabled (as it is by default on Ubuntu, and
is recommended in many environments), then your path to recovery becomes quite tricky.
As with so many scenarios, prevention is better than cure, and the template module we
used earlier has a trick up its sleeve, to help us out here. When you edit the sudoers file
using visudo on a Linux system, the file you have created is checked automatically before
it is written to disk. If there is an error, you are warned and given the option to rectify it.
Ansible can make use of this utility through the addition of the validate parameter to the
template module. Thus, a very simple role, to deploy a new version of the sudoers file
with Ansible, might look like this:
---
- name: Copy a new sudoers file on if visudo validation is passed
template:
src: templates/sudoers.j2
dest: /etc/sudoers
validate: /usr/sbin/visudo -cf %s
In the preceding example, the template module passes the name of the file specified by
dest to the command in the validate parameter—this is the significance of the %s. If the
validation is passed, the new file is written into place. If the validation fails, then the new
file is not written and the old one remains. In addition, when validation fails, the task
results in a failed status, thus ending the play and alerting the user to rectify the
condition.
This isn't the only task that the validate parameter can be used to
complete—it can be used to check the results of any template operation,
provided you can define a shell command that will perform a suitable
check on the template operation. This might be as simple as using grep to
check for a line in a file, or a check to see that a service restarts.
In the next section, we will take a look at how Ansible can assist with enforcing and
auditing user accounts across a large number of servers.
[ 285 ]
Managing Users on Linux Chapter 10
Auditing user accounts with Ansible
Say your enterprise has 1,000 Linux servers, all using directory services for authentication,
as we have discussed so far. Now, suppose an errant user, wishing to bypass this privilege
management, manages to create a local account called john on a single server. This might
happen when privileges are temporarily granted for a change request but then
revoked—unscrupulous individuals can easily create their own access methods, to bypass
the security provided by your directory service.
How would you find this had happened? Although Ansible is not technically a tool for
auditing, it has the benefit of being able to run a command (or set of commands) on 1,000
servers at once and returning the results to you for processing.
As all your server builds should be to a given standard (see Chapter 1, Building a Standard
Operating Environment on Linux), then you should know which accounts are supposed to be
on each Linux server. It is possible that there will be some variance—for example, if you
install the PostgreSQL database server, this normally creates a local user account called
postgres. However, these cases are well understood, and can quickly and easily be
filtered out.
We don't even need to write a complete playbook for Ansible to help us out here—once you
have an inventory file with your Linux server (or servers) in, you can run what is called an
ad hoc command. This is simply a single-line command that can run any single Ansible
module with a set of arguments—much like a playbook with just one task in it.
Thus, to obtain a list of all user accounts on all my servers, I could run the following
command:
$ ansible -i hosts -m shell -a 'cat /etc/passwd' all
That's all there is to it—Ansible will faithfully connect to all servers in the inventory file
specified by the -i parameter, and dump the /etc/passwd file contents to the screen. You
could pipe this output to a file for further processing and analysis, rather than having to log
on to each box. Although Ansible is not actually doing any analysis, it makes for a very
powerful and easy tool to perform the data gathering for the purposes of auditing, and, as
is the beauty of Ansible, no agent is required on the remote machines.
[ 286 ]
Managing Users on Linux Chapter 10
The following screenshot shows an example of Ansible obtaining the local user accounts
from one of our test systems, using a simple grep command to filter out two commonly
present accounts. Naturally, you can expand this example as you wish, to improve the data
processing and hence make your task easier:
In this manner, you can make good use of Ansible, to gather useful information from a
large number of systems for further processing—as the results are returned directly to the
Terminal, it is easy to pipe them to a file and then process them with your favorite tools (for
example, AWK) to establish whether there are any systems queried that violate enterprise
policies. While this example has been performed with the local user account list, it could
just as effectively be performed on any given text file on the remote systems.
This, as you can see, is a very simple example, but it is a fundamental building block, on
top of which you can build other playbooks. Here are some ideas for you to explore further
by yourself:
Change the ad hoc command we ran previously, and run it as a playbook
instead.
[ 287 ]
Managing Users on Linux Chapter 10
Schedule the preceding playbook to run on a regular basis in AWX.
Modify the playbook to check for certain key user accounts.
Your ability to audit users doesn't stop there, though—although centralized logging should
(and probably will) be part of your infrastructure, you can also interrogate log files with
Ansible. Using the ad hoc command structure previously shown, you could run the
following command against a group of Ubuntu servers:
$ ansible -i hosts -m shell -a 'grep "authentication failure | cat"
/var/log/auth.log' all
On CentOS, these log messages would appear in /var/log/secure instead, so you would
alter the path accordingly for these systems.
The grep command returns code 1 if the string you specify is not found,
and Ansible, in turn, interprets this as a failure, reporting the task as
failed. As a result, we pipe the output of grep into the cat command,
which always returns zero, and hence, the task does not fail, even if the
string we are searching for is not found.
As I'm sure you have realized by now, these commands would be far better run as a
playbook, with some detection for the operating system and the appropriate paths used in
each case—however, the goal of this section is not to provide you with an exhaustive set of
solutions, but rather, to inspire you to go and build your own code based on these
examples, to help you audit your infrastructure with Ansible.
The fact that Ansible can perform such a wide variety of commands, and that it has
agentless access across your infrastructure, means that it can be an effective solution in your
toolbox, both for configuring your Linux servers and for maintaining the integrity of the
configuration, and, even, auditing them.
Summary
User account and access management is an integral part of any Enterprise Linux
environment, and Ansible can be a key component in both configuring this and rolling it