  1,
  2,
  45,
  50,
  4,
  45,
  48,
  49,
  47,
  51,
  5,
  5
};
int l[64] = {
  2,
  2,
  1,
  18,
  7,
  2,
  26,
  13,
  4,
  10,
  4,
  21,
  14,
  1,
  0,
  14,
  5,
  7,
  28,
  12,
  28,
  15,
  15,
  2,
  16,
  23,
  30,
  23,
  19,
  9,
  22,
  31,
  0
};
int r[64] = {
  1,
  8,
  7,
  23,
  9,
  19,
  31,
  23,
  9,
  13,
  12,
  29,
  10,
  24,
  9,
  24,
  25,
  9,
  26,
  3,
  22,
  6,
  17,
  13,
  7,
  15,
  20,
  1,
  16,
  4,
  11,
  31
};
int vis[32];
typedef struct node {
  string flag;
  int step;
  int pos;
} Node;
queue q;
int main() {
  Node a({"0", 0, 0});
  q.push(a);
  //vis[0] = 1;
  while (!q.empty()) {
    Node curr = q.front();
    q.pop();
    if (curr.step == 16 && curr.pos == 31) {
      cout = 32 && s[0] = 32 && s[0]  bytes:
    if isinstance(v, str):
        v = v.encode('ascii')
    return v
def b58encode_int(
    i: int, default_one: bool = True, alphabet: bytes = BITCOIN_ALPHABET
) -> bytes:
    """
    Encode an integer using Base58
    """
    if not i and default_one:
        return alphabet[0:1]
    string = b""
    while i:
        i, idx = divmod(i, 58)
        string = alphabet[idx:idx+1] + string
    return string
def b58encode(
    v: Union[str, bytes], alphabet: bytes = BITCOIN_ALPHABET
) -> bytes:
    """
    Encode a string using Base58
    """
    v = scrub_input(v)
    nPad = len(v)
    v = v.lstrip(b'\0')
    nPad -= len(v)
    p, acc = 1, 0
    for c in reversed(v):
        acc += p * c
        p = p  int:
    """
    Decode a Base58 encoded string as an integer
    """
    v = v.rstrip()
    v = scrub_input(v)
    decimal = 0
    for char in v:
        decimal = decimal * 58 + alphabet.index(char)
    return decimal
def b58decode(
    v: Union[str, bytes], alphabet: bytes = BITCOIN_ALPHABET
) -> bytes:
    """
    Decode a Base58 encoded string
    """