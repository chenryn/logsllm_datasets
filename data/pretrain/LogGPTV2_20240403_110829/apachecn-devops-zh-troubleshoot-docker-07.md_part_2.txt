            root@7bc2b6cb1025:/#
            root@e58a9bf7120b:/# ping 172.17.0.5
            PING 172.17.0.5 (172.17.0.5) 56(84) bytes of data.
            64 bytes from 172.17.0.5: icmp_seq=1 ttl=64 time=0.270 ms
            64 bytes from 172.17.0.5: icmp_seq=2 ttl=64 time=0.107 ms
            ^C
            --- 172.17.0.5 ping statistics ---
            2 packets transmitted, 2 received, 0% packet loss, time 1002ms
            rtt min/avg/max/mdev = 0.107/0.188/0.270/0.082 ms
            root@e58a9bf7120b:/#
    ```
4.  将`openssh-server`安装在两个容器上:
    ```
    #apt-get install openssh-server
    ```
5.  在主机上启用 iptables。最初，您将能够从一个容器到另一个容器进行 SSH。
6.  停止 Docker 服务，在主机的`default docker`文件中添加`DOCKER_OPTS="--icc=false --iptables=true"`。此选项将启用 iptables 防火墙并丢弃容器之间的所有端口。默认情况下，主机上不启用 iptables:
    ```
     root@ubuntu:~# iptables -L -n
            Chain INPUT (policy ACCEPT)
            target prot opt source destination
            Chain FORWARD (policy ACCEPT)
            target prot opt source destination
            DOCKER all -- 0.0.0.0/0 0.0.0.0/0
            ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 ctstate RELATED,ESTABLISHED
            ACCEPT all -- 0.0.0.0/0 0.0.0.0/0
            DOCKER all -- 0.0.0.0/0 0.0.0.0/0
            ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 ctstate RELATED,ESTABLISHED
            ACCEPT all -- 0.0.0.0/0 0.0.0.0/0
            ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 
     ACCEPT all -- 0.0.0.0/0 0.0.0.0/0
    #service docker stop 
    #vi /etc/default/docker 
    ```
7.  Docker Upstart 和 SysVinit 配置文件，自定义 Docker 二进制文件的位置(特别是用于开发测试):
    ```
    #DOCKER="/usr/local/bin/docker"
    ```
8.  使用`DOCKER_OPTS`修改守护进程启动选项:
    ```
    #DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4" 
    #DOCKER_OPTS="--icc=false --iptables=true"
    ```
9.  重新启动 Docker 服务:
    ```
     # service docker start
    ```
10.  检查仪表:
    ```
     root@ubuntu:~# iptables -L -n
     Chain INPUT (policy ACCEPT)
     target prot opt source destination
     Chain FORWARD (policy ACCEPT)
     target prot opt source destination
     DOCKER all -- 0.0.0.0/0 0.0.0.0/0
     ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 ctstate RELATED, ESTABLISHED
     ACCEPT all -- 0.0.0.0/0 0.0.0.0/0
     DOCKER all -- 0.0.0.0/0 0.0.0.0/0
     ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 ctstate RELATED, ESTABLISHED
     ACCEPT all -- 0.0.0.0/0 0.0.0.0/0
     ACCEPT all -- 0.0.0.0/0 0.0.0.0/0
     DROP all -- 0.0.0.0/0 0.0.0.0/0
    ```
`DROP`规则已添加到主机的 iptables 中，这将断开容器之间的连接。现在，您将无法在容器之间进行 SSH。
## 连接容器
我们可以使用`--link`参数来通信或连接遗留容器。
1.  创建第一个充当服务器的容器- `sshserver` :
    ```
    root@ubuntu:~# docker run -i -t -p 2222:22 --name sshserver ubuntu bash
    root@9770be5acbab:/#
    Execute the iptables command and you can find a Docker chain rule added.
    #root@ubuntu:~# iptables -L -n
    Chain INPUT (policy ACCEPT)
    target     prot opt source               destination
    Chain FORWARD (policy ACCEPT)
    target     prot opt source               destination
    Chain OUTPUT (policy ACCEPT)
    target     prot opt source               destination
    Chain DOCKER (0 references)
    target     prot opt source               destination
    ACCEPT     tcp  --  0.0.0.0/0            172.17.0.3           tcp dpt:22
    ```
2.  创建第二个类似 SSH 客户端的容器:
    ```
    root@ubuntu:~# docker run -i -t --name sshclient --link 
            sshserver:sshserver 
            ubuntu bash
    root@979d46c5c6a5:/#
    ```
3.  We can see that there are more rules added to the Docker chain rule:
    ```
    root@ubuntu:~# iptables -L -n
    Chain INPUT (policy ACCEPT)
    target     prot opt source               destination
    Chain FORWARD (policy ACCEPT)
    target     prot opt source               destination
    Chain OUTPUT (policy ACCEPT)
    target     prot opt source               destination
    Chain DOCKER (0 references)
    target     prot opt source               destination
    ACCEPT     tcp  --  0.0.0.0/0            172.17.0.3           tcp dpt:22
    ACCEPT     tcp  --  172.17.0.4           172.17.0.3           tcp dpt:22
    ACCEPT     tcp  --  172.17.0.3           172.17.0.4           tcp spt:22
    root@ubuntu:~#
    ```
    下图解释了使用`--link`标志的容器之间的通信:
    ![Linking containers](img/image_07_007.jpg)
    Docker - link 在容器之间创建私有通道
4.  您可以使用`docker inspect` :
    ```
    root@ubuntu:~# docker inspect -f "{{ .HostConfig.Links }}" sshclient
    [/sshserver:/sshclient/sshserver]
    ```
    检查您的链接容器
5.  Now you can successfully SSH into the SSH server with its IP:
    ```
     **#ssh root@172.17.0.3 -p 22** 
    ```
    使用`--link`参数，Docker 在容器之间创建了一个安全通道，不需要在容器外部暴露任何端口。
# 图书馆网络和容器网络模型
libnetwork 在 Go 中实现，用于连接 Docker 容器。目的是提供一个**容器网络模型** ( **CNM** )帮助程序员提供网络库的抽象。libnetwork 的长期目标是遵循 Docker 和 Linux 的理念来交付独立工作的模块。libnetwork 的目标是为容器中的网络提供可组合的需求。它还旨在通过执行以下操作，将 Docker Engine 和 libcontainer 中的网络逻辑模块化为一个可重用的库:
*   用 libnetwork 替换 Docker 引擎的网络模块
*   允许本地和远程驱动程序向容器提供网络连接
*   为管理和测试 libnetwork 提供一个`dnet`工具——然而，这仍然是一项正在进行的工作
### 注
**参考:**T2】https://github.com/docker/libnetwork/issues/45
图书馆网络实现了 CNM。它形式化了为容器提供网络所需的步骤，同时提供了可用于支持多个网络驱动程序的抽象。它的端点 API 主要用于管理相应的对象并记录它们，以便提供 CNM 所要求的抽象级别。
## CNM 物件
CNM 建立在三个主要组件上，如下图所示:
![CNM objects](img/image_07_008.jpg)
图书馆网络的网络沙盒模型
### 注
**参考:**T2】https://www.docker.com
### 沙盒
沙箱包含容器网络栈的配置，包括路由表管理、容器接口和 DNS 设置。沙盒的实现可以是一个 Linux 网络命名空间、一个 FreeBSD 监狱或另一个类似的概念。
沙箱可能包含来自多个网络的许多端点。它还表示容器的网络配置，如 IP 地址、MAC 地址和 DNS 条目。
libnetwork 利用特定于操作系统的参数来填充沙箱表示的网络配置。它提供了一个在多个操作系统中实现沙箱的框架。
**Netlink** 用于管理命名空间中的路由表，目前沙盒有两种实现方式- `namespace_linux.go`和`configure_linux.go`-用于唯一标识主机文件系统上的路径。沙箱与单个 Docker 容器相关联。
以下数据结构显示了沙箱的运行时元素:
```
    type sandbox struct {
          id            string
           containerID   string
          config        containerConfig
          osSbox        osl.Sandbox
          controller    *controller
          refCnt        int
          endpoints     epHeap
          epPriority    map[string]int
          joinLeaveDone chan struct{}
          dbIndex       uint64
          dbExists      bool
          isStub        bool
          inDelete      bool
          sync.Mutex
    }
```
从网络控制器实例化一个新的沙箱(稍后将详细解释):
```
    func (c *controller) NewSandbox(containerID string, options ...SandboxOption) 
     (Sandbox, error) {
        .....
    }
```
### 终点
端点将沙箱加入网络，并为容器向部署在同一网络中的其他容器公开的服务提供连接。它可以是开放式虚拟交换机的内部端口或类似的虚拟交换机对。
一个端点只能属于一个网络，并且只能属于一个沙盒。它代表一种服务，并提供各种 API 来创建和管理端点。它具有全局范围，但只连接到一个网络。
端点由以下结构指定:
```
    type endpoint struct { 
       name          string 
       id            string 
       network       *network 
       iface         *endpointInterface 
       joinInfo      *endpointJoinInfo 
       sandboxID     string 
       exposedPorts  []types.TransportPort 
       anonymous     bool 
       generic      map[string]interface{} 
       joinLeaveDone chan struct{} 
       prefAddress   net.IP 
       prefAddressV6 net.IP 
       ipamOptions   map[string]string 
       dbIndex       uint64 
       dbExists      bool 
       sync.Mutex 
    }
```
端点与唯一的标识和名称相关联。它连接到网络和沙盒标识。它还与 IPv4 和 IPv6 地址空间相关联。每个端点都与一个端点接口相关联。
### 网络
一组能够直接相互通信的端点称为**网络**。它在同一台主机或多台主机内提供所需的连接，并且每当创建或更新网络时，都会通知相应的驱动程序。一个例子是在集群中具有全局范围的 VLAN 或 Linux 桥。
网络由网络控制器控制，我们将在下一节讨论。每个网络都有名称、地址空间、标识和网络类型:
```
    type network struct { 
       ctrlr        *controller 
       name         string 
       networkType  string 
       id           string 
       ipamType     string 
       addrSpace    string 
       ipamV4Config []*IpamConf 
       ipamV6Config []*IpamConf 
       ipamV4Info   []*IpamInfo 
       ipamV6Info   []*IpamInfo 
       enableIPv6   bool 
       postIPv6     bool 
       epCnt        *endpointCnt 
       generic      options.Generic 
       dbIndex      uint64 
       svcRecords   svcMap 
       dbExists     bool 
       persist      bool 
       stopWatchCh  chan struct{} 
       drvOnce      *sync.Once 
       internal     bool 
       sync.Mutex   
    }
```
### 网络控制器
网络控制器对象提供了创建和管理网络对象的应用编程接口。通过将特定驱动程序绑定到给定网络，它是 libnetwork 的入口点，并且它支持多个内置和远程的活动驱动程序。网络控制器允许用户将特定的驱动程序绑定到给定的网络:
```
    type controller struct { 
       id             string 
       drivers        driverTable 
       ipamDrivers    ipamTable 
       sandboxes      sandboxTable 
       cfg            *config.Config 
       stores         []datastore.DataStore 
       discovery     hostdiscovery.HostDiscovery 
       extKeyListener net.Listener 
       watchCh        chan *endpoint 