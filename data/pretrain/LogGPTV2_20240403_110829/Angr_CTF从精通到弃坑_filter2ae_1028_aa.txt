# Angr_CTF从精通到弃坑
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
PS：因为最近开始考试，耽误了很多时间，重新开始恢复
在之前的学习中我们学会了利用angr符号化寄存器、栈上的值、内存、malloc开辟的动态内存和文件系统，感受到了angr强大的仿真系统，在CTF中题目的简单利用，接下来我们要学习angr的更多的高级用法
> 由于angr的api一直有一些变化，网上的很多脚本需要修改才能运行
## 08_angr_constraints
该题主要学习通过添加约束条件来解决路径爆炸问题
首先检查一下该程序：
    syc@ubuntu:~/Desktop/TEMP$ checksec 08_angr_constraints
    [*] '/home/syc/Desktop/TEMP/08_angr_constraints'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
然后进入IDA查看该：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      signed int i; // [esp+Ch] [ebp-Ch]
      password = 1146115393;
      dword_804A044 = 1380994638;
      dword_804A048 = 1381647695;
      dword_804A04C = 1112233802;
      memset(&buffer, 0, 0x11u);
      printf("Enter the password: ");
      __isoc99_scanf("%16s", &buffer);
      for ( i = 0; i  90 )
      {
        puts("Try again.");
        exit(1);
      }
      return (a1 - 65 + 53 * a2) % 26 + 65;
    }
    _BOOL4 __cdecl check_equals_AUPDNNPROEZRJWKB(int a1, unsigned int a2)
    {
      int v3; // [esp+8h] [ebp-8h]
      unsigned int i; // [esp+Ch] [ebp-4h]
      v3 = 0;
      for ( i = 0; i >> state = proj.factory.entry_state()
    >>> state.solver.add(x - y >= 4)
    >>> state.solver.add(y > 0)
    >>> state.solver.eval(x)
    5
    >>> state.solver.eval(y)
    1
    >>> state.solver.eval(x + y)
    6
总而言之先放EXP，再逐步分析：
    import angr
    import sys
    import claripy
    def Go():
        path_to_binary = "./08_angr_constraints" 
        project = angr.Project(path_to_binary, auto_load_libs=False)
        start_address = 0x8048625
        buff_addr = 0x0804A050
        address_to_check_constraint = 0x08048565
        initial_state = project.factory.blank_state(addr=start_address)
        char_size_in_bits = 8
        passwd_len = 16
        passwd0 = claripy.BVS('passwd0', char_size_in_bits*passwd_len)
        initial_state.memory.store(buff_addr, passwd0)
        simulation = project.factory.simgr(initial_state)
        simulation.explore(find=address_to_check_constraint)
        if simulation.found:
            solution_state = simulation.found[0]
            constrained_parameter_address = buff_addr
            constrained_parameter_size_bytes = 16
            constrained_parameter_bitvector = solution_state.memory.load(
            constrained_parameter_address,
            constrained_parameter_size_bytes
        )
            constrained_parameter_desired_value = 'AUPDNNPROEZRJWKB'
            solution_state.solver.add(constrained_parameter_bitvector == constrained_parameter_desired_value)
            solution0 = solution_state.solver.eval(passwd0,cast_to=bytes)       
            print("[+] Success! Solution is: {0}".format(solution0))
        else:
            raise Exception('Could not find the solution')
    if __name__ == "__main__":
        Go()
运行一下测试：
    .text:080485C4                 mov     ds:password, 'DPUA'
    .text:080485CE                 mov     ds:dword_804A044, 'RPNN'
    .text:080485D8                 mov     ds:dword_804A048, 'RZEO'
    .text:080485E2                 mov     ds:dword_804A04C, 'BKWJ'
通过这里不难的得出需要比较的字符串是 **AUPDNNPROEZRJWKB** （虽然从函数名也能看出来，但是还是从汇编解释一下为好）
首先总结一下我们的思路：
  * 用户输入的字符串存储在buffer，buffer的地址为：0x804A050
  * 比较函数`check_equals_AUPDNNPROEZRJWKB`的地址为：0x08048565
  * 其实只要当程序运行到地址0x08048565时，处于buffer地址内的字符串等于AUPDNNPROEZRJWKB即可
  * 添加上述约束条件即可一步得出结果，而不用进入比较函数逐一字符比较而产生路径爆炸问题
故一开始先填入需要利用到的地址：
    path_to_binary = "./08_angr_constraints" 
    project = angr.Project(path_to_binary, auto_load_libs=False)
    start_address = 0x8048625
    buff_addr = 0x0804A050
    address_to_check_constraint = 0x08048565
    initial_state = project.factory.blank_state(addr=start_address)
因为输入是`scanf("%16s", &buffer);`，如之前一样，不难得出我们需要构建的符号位向量的参数
    char_size_in_bits = 8
    passwd_len = 16
    passwd0 = claripy.BVS('passwd0', char_size_in_bits*passwd_len)
    initial_state.memory.store(buff_addr, passwd0)
然后初始化并执行模拟管理器，运行到调用check函数的状态
    simulation = project.factory.simgr(initial_state)
    simulation.explore(find=address_to_check_constraint)
然后利用使用 `state.memory` 的 `.load(addr, size)`接口读出`buffer`处的内存数据
    if simulation.found:
        solution_state = simulation.found[0]
        constrained_parameter_address = buff_addr
        constrained_parameter_size_bytes = 16
        constrained_parameter_bitvector = solution_state.memory.load(
        constrained_parameter_address,
        constrained_parameter_size_bytes
    )
利用slover求解引擎提供的add方法加入约束条件
    constrained_parameter_desired_value = 'AUPDNNPROEZRJWKB'
    solution_state.solver.add(constrained_parameter_bitvector == constrained_parameter_desired_value)
接下来和之前的题目类似，不再赘述
## 09_angr_hooks
这题如题目所言，主要就是学习使用angr的hook技术解决路径爆炸问题，与我们之前利用的约束条件不同，hook技术则更为强大
> 以下内容来自维基百科：
>
> **钩子编程**
> （hooking），也称作“挂钩”，是计算机程序设计术语，指通过拦截软件模块间的函数调用、消息传递、事件传递来修改或扩展操作系统、应用程序或其他软件组件的行为的各种技术。处理被拦截的函数调用、事件、消息的代码，被称为
> **钩子** （hook）。
>
> 简单来说就是用我们自己设计的函数去取代被hook的函数
首先检查一下该程序：
    syc@ubuntu:~/Desktop/TEMP$ checksec 09_angr_hooks
    [*] '/home/syc/Desktop/TEMP/09_angr_hooks'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
用IDA查看一下：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      _BOOL4 v3; // eax
      signed int i; // [esp+8h] [ebp-10h]
      signed int j; // [esp+Ch] [ebp-Ch]
      qmemcpy(password, "XYMKBKUHNIQYNQXE", 16);
      memset(buffer, 0, 0x11u);
      printf("Enter the password: ");
      __isoc99_scanf("%16s", buffer);
      for ( i = 0; i <= 15; ++i )
        *(_BYTE *)(i + 0x804A054) = complex_function(*(char *)(i + 0x804A054), 18 - i);
      equals = check_equals_XYMKBKUHNIQYNQXE(buffer, 16);
      for ( j = 0; j <= 15; ++j )