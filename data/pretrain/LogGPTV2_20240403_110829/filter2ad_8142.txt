# 【技术分享】谷歌电子表单 CSRF + JSON 劫持漏洞

## 译文声明
本文为翻译文章，原文作者：Rodney Beede  
原文地址：[链接](#)  
译文仅供参考，具体内容及含义请以原文为准。

**翻译者**：[sinensis](http://bobao.360.cn/member/contribute?uid=2642794559)  
**稿费**：150 RMB  
**投稿方式**：发送邮件至 linwei#360.cn 或访问 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

### 漏洞概述
2015年10月，我在谷歌电子表单相关的API接口中发现了一个JSON + CSRF（跨站请求伪造）点击劫持漏洞。攻击者可以利用该漏洞在未经授权的情况下获取用户的电子表单信息。

### 漏洞影响
攻击者需要绕过Google Drive电子表单共享设置的ACL策略来利用此漏洞。即使在未授权访问Google Drive文件的情况下（如下图所示），攻击者也能绕过Google的安全设置。

### 根本原因
这不是第一个因Google存在JSON数据劫持而导致用户数据泄露的漏洞。其根本原因是Google Drive API接口的数据流设计存在缺陷，导致了OWASP TOP (2013)-A8-Cross-site Request Forgery (CSRF)漏洞，从而引发JSON数据劫持。  
类似的漏洞曾出现在Gmail中：
- 2016年1月27日 — [对Gmail攻击的高级技巧](http://jeremiahgrossman.blogspot.com/2006/01/advanced-web-attack-techniques-using.html)
- 2008年11月20日 — [JSON攻击的风骚姿势](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/)
- 2010年10月14日 — [Gmail的JSON劫持攻击技术](http://seclists.org/fulldisclosure/2010/Oct/199)

Google通过在JSON中添加一个`while()`循环来修复这些漏洞，一旦发生攻击，受害者的浏览器将崩溃，从而阻止攻击。然而，对于Google Drive的JSON劫持漏洞，仅靠添加循环是不够的。为了不影响产品功能，修复措施需要进行复杂的变更。最终，Google选择让旧API接口下线，并使用新的接口来解决安全问题，这要求开发者更新代码。

### 攻击场景示例
假设公司的一个电子表格包含机密信息，只与授权员工共享。当一名员工离职后，其权限被取消，且密码/PIN也进行了更改（如图所示）。但离职员工仍希望获取电子表单的数据，他注意到PI:EMAIL经常访问一个允许任何人使用HTML格式留言的网站。于是，离职员工实施了一次水坑攻击，等待受害者访问该网站。

下图展示了受害者访问的网站截屏：

![受害者访问的网站截屏](#)

在这种情况下，攻击者可以在完全不知道受害者身份的情况下获取电子表格的数据。下图展示了攻击者偷取到的数据（受害者完全看不到）：

![攻击者看到的数据](#)

### 攻击原理
Google Drive的API接口在不需要OAuth token的情况下，允许其他网站跨域发起请求。因此，只要用户登录了Google Drive，任何网站都可以通过调用API接口获取用户的电子表格数据。由于返回数据是JSON格式，攻击者可以利用JavaScript解析并将其发送到自己的服务器。

以下是一个简单的漏洞证明代码示例：
- [simpleCapture.php](https://www.rodneybeede.com/google_vuln_2015-10/simpleCapture.p-h-p.txt) - 从受害者浏览器获取数据的脚本
- [google_drive_smuggle.html](https://www.rodneybeede.com/google_vuln_2015-10/google_drive_smuggle.html.txt) - 用于偷取目标数据的HTML代码

```javascript
var google = new Object();
google.visualization = new Object();
google.visualization.Query = new Object();
google.visualization.Query.setResponse = function(goods) {
    google.response = JSON.stringify(goods, undefined, 2);
}
```

### 时间线
| 日期 | 事件 |
| --- | --- |
| 2015年10月29日 | 报告给Google |
| 2015年10月30日 | Google确认漏洞，询问修复时间 |
| 2015年11月6日 | Google回复称产品组正在处理，但无法确定具体时间 |
| 2016年1月5日 | 询问Google修复时间 |
| 2016年1月6日 | Google回复修复时间无法确定 |
| 2016年1月14日 | 询问Google大致修复时间 |
| 2016年1月27日 | Google回复90天内不会修复 |
| 2016年2月5日 | Google回复更新（距离漏洞报告已99天） |
| 2016年2月15日 | Google无法确定修复时间 |
| 2016年2月25日 | 询问Google的Bug编号 |
| 2016年2月25日 | Google回应相应的Bug编号 |
| 2016年3月17日 | 询问Google修复时间 |
| 2016年4月1日 | Google回复暂时没有修复的时间线 |
| 2016年4月26日 | 180天未修复 |
| 2016年5月31日 | 215天未修复，再次询问修复时间 |
| 2016年6月3日 | Google回复正在修复问题 |
| 2016年8月17日 | 询问修复时间 |
| 2016年8月17日 | Google回复已向用户发出警告信息 |
| 2016年9月13日 | 确认警告信息上线 |
| 2016年9月15日 | 漏洞最终修复完成 |

### 最终修复
经过深入研究，Google确认之前的修复方式并不理想。他们决定下线旧API并使用新API来解决问题。这是最有效的解决方案，避免了旧API可能存在的安全风险。现在，如果使用旧API，Google会弹出警告信息提示用户API即将失效。

### 结论
经过几个月的努力，我见证了该问题的修复过程。虽然最初从Google获得回复很困难，但我认为相比公开施压，修复才是更好的选择。最终，Google将我列入了他们的赏金榜单。你可以在[这里](https://bughunter.withgoogle.com/profile/28694c6b-c616-4213-84a1-a129e59e0e1e)找到我的资料。