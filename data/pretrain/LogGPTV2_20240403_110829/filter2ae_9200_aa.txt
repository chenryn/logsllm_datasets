作者：LoRexxar'@知道创宇404实验室
11月12日结束的HCTF2017，我总共出了其中4道题目，这4道题目涵盖了我这半年来接触的很多有趣的东西。下面就简单讲讲出题思路以及完整的Writeup。
    babycrack
    Description 
    just babycrack
    1.flag.substr(-5,3)=="333"
    2.flag.substr(-8,1)=="3"
    3.Every word makes sence.
    4.sha256(flag)=="d3f154b641251e319855a73b010309a168a12927f3873c97d2e5163ea5cbb443" 
    Now Score 302.93
    Team solved 45
    A World Restored
    Description:
    nothing here or all the here ps:flag in admin cookie 
    flag is login as admin
    Now Score 674.44
    Team solved 7
    A World Restored Again
    Description: 
    New Challenge !! 
    hint: flag only from admin bot
    Now Score 702.6
    Team solved 6
    Deserted place
    Description 
    maybe nothing here 
    flag in admin cookie
    Now Score 820.35
    Team solved 3
  * babycrack是一道前端js的题目，包含了反调试、代码混淆、逻辑混淆3步。
  * A world Restored比较有趣，是一个站库分离的站点。有两个漏洞，一个比较像中间人的信息泄露，另一个是dom xss。
  * Deserted place是一个比较古老的技术，叫做SOME，但是了解细节的人非常少。
#### babycrack
还是很抱歉题目的验证逻辑还是出现了不可逆推的问题，被迫在比赛中途加入4个hint来修复问题，下面我们来慢慢看看代码。
题目源码如下 
整个题目由反调试+代码混淆+逻辑混淆3部分组成，你可以说题目毫无意义完全为了出题而出题，但是这种代码确实最最真实的前端代码，现在许多站点都会选择使用反调试+混淆+一定程度的代码混淆来混淆部分前端代码。
出题思路主要有两篇文章：
  * 
  * 
整个题目主要是在我分析chrome拓展后门时候构思的，代码同样经过了很多重的混淆，让我们来一步步解释。
##### 反调试
第一部分是反调试，当在页面内使用F12来调试代码时，会卡死在debugger代码处。
这里举个例子就是蘑菇街的登陆验证代码。
具体代码是这样的
    eval(function(p,a,c,k,e,r){e=function(c){return c.toString(a)};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('(3(){(3 a(){7{(3 b(2){9((\'\'+(2/2)).5!==1||2%g===0){(3(){}).8(\'4\')()}c{4}b(++2)})(0)}d(e){f(a,6)}})()})();',17,17,'||i|function|debugger|length|5000|try|constructor|if|||else|catch||setTimeout|20'.split('|'),0,{}));
美化一下
    (function () {
        (function a() {
            try {
                (function b(i) {
                    if (('' + (i / i)).length !== 1 || i % 20 === 0) {
                        (function () {}).constructor('debugger')()
                    } else {
                        debugger
                    }
                    b(++i)
                })(0)
            } catch (e) {
                setTimeout(a, 5000)
            }
        })()
    })();
这就是比较常见的反调试。我这里提供3种办法来解决这步。
1、使用node做代码调试。
由于这里的debugger检测的是浏览器的调试，如果直接对代码调试就不会触发这样的问题。
2、静态分析
因为题目中代码较少，我没办法把代码混入深层逻辑，导致代码可以纯静态分析。
3、patch debugger函数
由于debugger本身只会触发一次，不会无限制的卡死调试器，这里会出现这种情况，主要是每5s轮询检查一次。那么我们就可以通过patch
settimeout函数来绕过。
    window._setTimeout = window.setTimeout;
    window.setTimeout = function () {};
这里可以用浏览器插件TamperMonkey解决问题。
除了卡死debug以外，我还加入了轮询刷新console的代码。
    setInterval("window.console.log('Welcome to HCTF :>')", 50);
同样的办法可以解决，就不多说了。
##### 代码混淆
在去除掉这部分无用代码之后，我们接着想办法去除代码混淆。
这里最外层的代码混淆，我是通过做了混淆。
ps:因为我在代码里加入了es6语法，市面上的很多工具都不支持es6语法，会导致去混淆的代码语法错误！
更有趣的是，这种混淆是不可逆的，所以我们只能通过逐渐去混淆的方式来美化代码。
我们可以先简单美化一下代码格式
    (function (_0xd4b7d6, _0xad25ab) {
        var _0x5e3956 = function (_0x1661d3) {
            while (--_0x1661d3) {
                _0xd4b7d6['push'](_0xd4b7d6['shift']());
            }
        };
        _0x5e3956(++_0xad25ab);
    }(_0x180a, 0x1a2));
    var _0xa180 = function (_0x5c351c, _0x2046d8) {
        _0x5c351c = _0x5c351c - 0x0;
        var _0x26f3b3 = _0x180a[_0x5c351c];
        return _0x26f3b3;
    };
    function check(_0x5b7c0c) {
        try {
            var _0x2e2f8d = ['code', _0xa180('0x0'), _0xa180('0x1'), _0xa180('0x2'), 'invalidMonetizationCode', _0xa180('0x3'), _0xa180('0x4'), _0xa180('0x5'), _0xa180('0x6'), _0xa180('0x7'), _0xa180('0x8'), _0xa180('0x9'), _0xa180('0xa'), _0xa180('0xb'), _0xa180('0xc'), _0xa180('0xd'), _0xa180('0xe'), _0xa180('0xf'), _0xa180('0x10'), _0xa180('0x11'), 'url', _0xa180('0x12'), _0xa180('0x13'), _0xa180('0x14'), _0xa180('0x15'), _0xa180('0x16'), _0xa180('0x17'), _0xa180('0x18'), 'tabs', _0xa180('0x19'), _0xa180('0x1a'), _0xa180('0x1b'), _0xa180('0x1c'), _0xa180('0x1d'), 'replace', _0xa180('0x1e'), _0xa180('0x1f'), 'includes', _0xa180('0x20'), 'length', _0xa180('0x21'), _0xa180('0x22'), _0xa180('0x23'), _0xa180('0x24'), _0xa180('0x25'), _0xa180('0x26'), _0xa180('0x27'), _0xa180('0x28'), _0xa180('0x29'), 'toString', _0xa180('0x2a'), 'split'];
            var _0x50559f = _0x5b7c0c[_0x2e2f8d[0x5]](0x0, 0x4);
            var _0x5cea12 = parseInt(btoa(_0x50559f), 0x20);
            eval(function (_0x200db2, _0x177f13, _0x46da6f, _0x802d91, _0x2d59cf, _0x2829f2) {
                _0x2d59cf = function (_0x4be75f) {
                    return _0x4be75f['toString'](_0x177f13);
                };
                if (!'' ['replace'](/^/, String)) {
                    while (_0x46da6f--) _0x2829f2[_0x2d59cf(_0x46da6f)] = _0x802d91[_0x46da6f] || _0x2d59cf(_0x46da6f);
                    _0x802d91 = [function (_0x5e8f1a) {
                        return _0x2829f2[_0x5e8f1a];
                    }];
                    _0x2d59cf = function () {
                        return _0xa180('0x2b');
                    };
                    _0x46da6f = 0x1;
                };
                while (_0x46da6f--)
                    if (_0x802d91[_0x46da6f]) _0x200db2 = _0x200db2[_0xa180('0x2c')](new RegExp('\x5cb' + _0x2d59cf(_0x46da6f) + '\x5cb', 'g'), _0x802d91[_0x46da6f]);
                return _0x200db2;
            }(_0xa180('0x2d'), 0x11, 0x11, _0xa180('0x2e')['split']('|'), 0x0, {}));
            (function (_0x3291b7, _0xced890) {
                var _0xaed809 = function (_0x3aba26) {
                    while (--_0x3aba26) {
                        _0x3291b7[_0xa180('0x4')](_0x3291b7['shift']());
                    }
                };
                _0xaed809(++_0xced890);
            }(_0x2e2f8d, _0x5cea12 % 0x7b));
            var _0x43c8d1 = function (_0x3120e0) {
                var _0x3120e0 = parseInt(_0x3120e0, 0x10);
                var _0x3a882f = _0x2e2f8d[_0x3120e0];
                return _0x3a882f;
            };
            var _0x1c3854 = function (_0x52ba71) {
                var _0x52b956 = '0x';
                for (var _0x59c050 = 0x0; _0x59c050 < _0x52ba71[_0x43c8d1(0x8)]; _0x59c050++) {
                    _0x52b956 += _0x52ba71[_0x43c8d1('f')](_0x59c050)[_0x43c8d1(0xc)](0x10);
                }
                return _0x52b956;
            };
            var _0x76e1e8 = _0x5b7c0c[_0x43c8d1(0xe)]('_');
            var _0x34f55b = (_0x1c3854(_0x76e1e8[0x0][_0x43c8d1(0xd)](-0x2, 0x2)) ^ _0x1c3854(_0x76e1e8[0x0][_0x43c8d1(0xd)](0x4, 0x1))) % _0x76e1e8[0x0][_0x43c8d1(0x8)] == 0x5;
            if (!_0x34f55b) {
                return ![];
            }
            b2c = function (_0x3f9bc5) {
                var _0x3c3bd8 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';