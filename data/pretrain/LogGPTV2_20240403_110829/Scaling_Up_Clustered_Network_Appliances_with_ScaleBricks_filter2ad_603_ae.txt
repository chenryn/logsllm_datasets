### 8. 相关工作

#### 全局分区表的传统解决方案
在构建高效字典以映射键值对方面，已有大量相关研究。标准哈希表无法满足我们对空间和性能的要求。通常情况下，哈希表存储键或键的指纹以解决冲突问题（即多个键落在同一个哈希桶中）。对于我们的应用而言，存储键会占用过多空间。为了减少冲突的影响，哈希表通常分配比实际存储元素更多的条目。简单的哈希方案如线性探测在负载较高时（70%–90%，具体取决于实现方式）会出现性能问题。多选择哈希方案如Cuckoo哈希 [30] 或d-left哈希 [28] 可以达到超过90%的占用率，但必须管理冲突并处理由于使用多选择带来的性能问题。

#### 完美哈希
完美哈希方案试图找到一个从n个不同项到m个条目的表（n ≤ m）的单射映射。早期的重要工作包括 [12, 17, 16]，Fredman 和 Komlós [16] 提到了集合分离哈希函数族。最近的工作如尝试为片上内存设计完美哈希函数 [26] 与我们的方法最为相似。我们的方法不仅占用更少的空间，而且减少了内存访问次数。

完美哈希数据结构可以被压缩；例如，ECT [25]（用于SILT [24]）和CHD [3] 使用少于2.5位/键来存储索引。然而，这些方案还必须存储每个键对应的值。此外，这些压缩的完美哈希实现未能提供足够的查找吞吐量。ECT 优化了外部存储（如SSD）的数据索引，其查找延迟为每次查找1到7微秒；CHD 更快，但仍比我们的解决方案慢几倍。

#### 布隆过滤器
布隆过滤器 [4] 是一种紧凑的概率数据结构，用于表示一组元素进行成员测试，并有许多应用 [7]。它们通过允许假阳性来实现高空间效率。

布隆过滤器及其变体已被提出用于集合分离。例如，BUFFALO [33] 试图扩展网络交换机的转发表，通过在一系列布隆过滤器中查找目标地址（每个输出端口一个）。然而，这种集合分离方法效率低下。查询可能从多个布隆过滤器中得到正结果，系统必须解决这些假阳性。SetSep 更具空间效率。最后，更新布隆过滤器以更改地址从端口x到端口y的映射代价高昂，因为它必须重建过滤器以删除单个项目，或者使用额外的结构（如计数布隆过滤器）。布隆过滤器的另一种变体是Bloomier过滤器 [9]，它通过将多个哈希表位置的值进行异或操作来关联键值。近似并发状态机 [5] 也提供了基于多选择哈希的有效表示部分函数的替代结构。我们的方法比这些方法更具可扩展性。

#### 快速软件路由器和交换机
RouteBricks [13] 展示了一台商用服务器可以通过批量I/O和现代多核CPU及多队列NIC上的并行化包处理，在IPv4下以每秒19百万包的速度转发64字节的包。PacketShader [20] 利用GPU的并行性和内存带宽提供快速的IPv4和IPv6转发。ScaleBricks 同样利用现代CPU通过批处理表查找来更有效地使用内存带宽并减少CPU周期。

#### 扩展转发表
布隆过滤器 [4] 已被用于提高包转发引擎的内存效率。Dharmapurikar等人 [11] 部署了布隆过滤器来确定应使用哪个哈希表作为包的下一跳。他们的方案在布隆过滤器返回假阳性时经常需要额外的哈希表探查。BUFFALO也有类似的目标，如上所述。

CuckooSwitch [34] 扩展了单节点的转发表。ScaleBricks采用了CuckooSwitch的每节点FIB设计，但它可以使用任何高效的FIB。ScaleBricks的主要贡献在于使用SetSep构建一个跨交换集群节点划分的全局分区表，帮助在一个跳转内将入站包转发到处理节点。

#### 平坦地址路由
平坦地址简化了企业网络和数据中心网络的拓扑结构和管理（如SEATTLE [22]），并支持广域移动性（如ROFL [8]、AIP [2]、XIA [19]）。ScaleBricks为这类平坦设计提供了一个新的、可扩展的实现选项。

### 9. 结论
ScaleBricks是一种新的机制，有助于“扩大”集群网络应用程序的规模。其核心贡献是设计和实现了一种新的数据结构SetSep，用于紧凑地存储从键（如流ID或平坦地址）到值（如应处理该流的节点ID）的映射。为了使这种结构实用，ScaleBricks提供了有效的机制来分割整个集群的转发状态，并构建和更新基于SetSep的全局分区表。SetSep仅需3.5位/键即可存储从任意键到2位值的映射，并提供极快的查找速度。ScaleBricks是一种适用于实际应用的有效技术，将其应用于4节点LTE-to-packet网络网关，提高了23%的包转发吞吐量，并降低了最多10%的延迟。

### 致谢
本研究部分得到了NSF资助CNS-1345305、CNS-1314721、IIS-0964473、CNS-1228598和CCF-1320231的支持，以及Intel科学和技术中心云计算的支持。

### 10. 参考文献
[此处省略参考文献列表]

通过这种方式，文本变得更加清晰、连贯和专业。希望这对你有帮助！