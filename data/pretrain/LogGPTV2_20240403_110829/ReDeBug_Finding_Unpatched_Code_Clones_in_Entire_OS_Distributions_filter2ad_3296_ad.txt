0
2,130
391
293
3,374
Table IV: Unpatched code clones in each distribution from
different years’ patches
Table V: Unpatched code clones with various n for δ1 and
δ2
E. The Identiﬁed Unpatched Code Clones
Figure 7 depicts the distribution of how often we found
clones for patches. The maximum was 386 unpatched code
clones of the patch shown in Listing 1, with most patches
having less than 50 respective unpatched code clones. This
result demonstrates that there are potentially many vulner-
able code clones for each new patch, motivating the need
to implement unpatched code clone detection as part of the
developer lifecycle.
Table V shows the number of identiﬁed unpatched code
clones with various sizes of n. When n increases from 4
to 7, ReDeBug hashes every 7 consecutive tokens and each
match represents an exact matching of 7 sequential tokens.
Overall, this represents a larger number of tokens exactly
matched, which yields a more conservative metric for “real”
bugs (see § IV for a discussion).
As we increased n, the total number of unpatched code
clones ReDeBug found decreased. Note that as n increases,
the total number of diffs we queried decreased. The reason
is that some diffs had fewer than n tokens in total. Overall,
in the most conservative experiment, ReDeBug identiﬁed
3,374 unique unpatched code copies that likely constitute
real bugs.
F. Code Clone Detection Errors
A key question is, what is the false detection rate of Re-
DeBug? There are several ways to answer this. One popular
metric is the accuracy of the matching process. In ReDeBug,
this is the Bloom ﬁlter tests. The Bloom ﬁlter tests have no
false negatives, but may have false positives. We performed
an exact match test on the 15,599 unpatched code clones
initially reported, of which 15,546 were conﬁrmed. Thus,
overall we had a 0.3% false positive rate in the Bloom ﬁlters.
Our post-processing system removes this source of errors
from the ﬁnal output.
In several cases, such as the one shown in Listing 2,
the vulnerability was found in dead code, which is not
included at build time. This vulnerability can lead to an
integer overﬂow that allows denial of service [15].
56
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:03 UTC from IEEE Xplore.  Restrictions apply. 
+
es = -1;
N = 1;
do {
BZ_DATA_ERROR);
if (N >= 2*1024*1024) RETURN(←(cid:2)
if (nextSym == BZ_RUNA) es = es + (0+1) *←(cid:2)
if (nextSym == BZ_RUNB) es = es + (1+1) *←(cid:2)
N = N * 2;
N; else
N;
Listing 2: CVE-2010-0405
We matched the above code to libcompress-bzip2-perl. How-
ever, the package maintainers stated that the matched code
was not an actual vulnerability since it was dead code.
At
the post-processing step, we eliminated such dead
code which was not included at build time. We measured
the number of code clones in non-dead code for the 1,354
reported unpatched code clones from 149 Debian Squeeze
packages. 831 out of 1,354 (61%) unpatched code clones
are conﬁrmed as non-dead code, which likely represent
real vulnerabilities. Dead code may still be a problem that
should be ﬁxed: the accompanied library code may be used
depending on users’ necessity by ﬂipping compilation ﬂags,
and the vulnerability would still likely exist. Nonetheless, we
now do post-processing to remove dead code for compiled
code from our results.
Note that in the overall system, these errors are ultimately
removed, and would never be shown or affect the end user.
G. Examples of Security-Related Bugs
In order to evaluate the practical impact of ReDeBug, we
reported 1,532 unpatched code clones identiﬁed in Debian
Squeeze packages to the Debian security team and develop-
ers. So far 145 real bugs have been conﬁrmed by developers
either in email or by issuing a patch. In this section, we show
several examples of the real bugs we found.
Qemu is a processor emulator that can be used as a hosted
virtual machine monitor. Various bugs, such as the one in
Listing 3, which allows root access on the host machine [13],
have been ﬁxed over the past few years. These include CVE-
2008-0928 and CVE-2010-2784.
-
+
int len, i, shift, ret;
QCowHeader header;
ret = bdrv_file_open(&s->hd, filename, flags)←(cid:2)
;
ret = bdrv_file_open(&s->hd, filename, flags ←(cid:2)
| BDRV_O_AUTOGROW);
if (ret hd, 0, &header, sizeof(←(cid:2)
return ret;
header)) != sizeof(header))
Listing 3: CVE-2008-0928
These patches were not applied to the derivative package
xen-qemu,
the Xen version of Qemu. When contacted,
57
Debian and upstream developers conﬁrmed the presence of
real bugs and indicated that ﬁxing these bugs was necessary.
The patch in Listing 4 was issued to ﬁx a vulnerability in
rsyslog, a Linux and Unix system logger. This vulnerability
involved sending a specially crafted log message that leads
to denial of service [18].
i = 0;
- while(lenMsg > 0 && *p2parse != ’:’ && *←(cid:2)
+ while(lenMsg > 0 && *p2parse != ’:’ && *←(cid:2)
p2parse != ’ ’ && i = max_code)
if (code == max_code)
{
}
*sp++ = firstcode;
if (sp = clear_code)
while (code >= clear_code && sp  shmop->size || count  (INT_MAX - count) || ←(cid:2)
start + count > shmop->size) {
php_error_docref(NULL TSRMLS_CC, E_WARNING, ←(cid:2)
"count is out of range");
RETURN_FALSE;
Listing 6: CVE-2011-1092
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:03 UTC from IEEE Xplore.  Restrictions apply. 
Listing 7 shows a recent patch for CVE-2011-3145, which
was successfully patched in an Ubuntu Oneiric package,
but not in a Debian Squeeze package. This patch ﬁxed
an incorrect /etc/mtab ownership error in the ecryptfs-
utils package, which might cause to unmount arbitrary
location [27].
+
+
+
if (setreuid(uid, uid) method_number != M_CONNECT
+ && !r->parsed_uri.scheme
+ && uri[0] != ’/’
+ && !(uri[0] == ’*’ && uri[1] == ’\0’)) {
+ ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r,
+
+ r->args = NULL;
+ r->hostname = NULL;
+ r->status = HTTP_BAD_REQUEST;
+ r->uri = apr_pstrdup(r->pool, uri);
+}
+
"invalid request-URI %s", uri);
if (ll[0]) {
certiﬁcates [20]. After we reported this bug, the package
maintainer ﬁxed the vulnerability by issuing a security patch.
# Sign a given certificate request.
-def sign(hostname, cert_type = :server, ←(cid:2)
+def sign(hostname, allow_dns_alt_names = false,←(cid:2)
self_signing_csr = nil)
self_signing_csr = nil)
+
+
+
+
+
+
+
+
+
+
+
+
+
# This is a self-signed certificate
if self_signing_csr
# # This is a self-signed certificate, ←(cid:2)
which is for the CA. Since this
# # forces the certificate to be self-←(cid:2)
signed, anyone who manages to trick
# # the system into going through this path←(cid:2)
gets a certificate they could
# # generate anyway. There should be no ←(cid:2)
security risk from that.
csr = self_signing_csr
cert_type = :ca
issuer = csr.content
allow_dns_alt_names = true if hostname == ←(cid:2)
Puppet[:certname].downcase
unless csr = Puppet::SSL::←(cid:2)
else
CertificateRequest.find(hostname)
raise ArgumentError, "Could not find ←(cid:2)
certificate request for #{hostname}"
end
cert_type = :server
issuer = host.certificate.content
# Make sure that the CSR conforms to our ←(cid:2)
internal signing policies.
# This will raise if the CSR doesn’t ←(cid:2)
conform, but just in case...
check_internal_signing_policies(hostname, ←(cid:2)
csr, allow_dns_alt_names) or
hostname), "CSR had an unknown failure ←(cid:2)
checking internal signing policies, will not←(cid:2)
sign!"
raise CertificateSigningError.new(←(cid:2)
end
- cert.content = Puppet::SSL::←(cid:2)
cert = Puppet::SSL::Certificate.new(hostname)
CertificateFactory.new(cert_type, csr.←(cid:2)
content, issuer, next_serial).result
+ cert.content = Puppet::SSL::←(cid:2)
+
CertificateFactory.
build(cert_type, csr, issuer, next_serial)
cert.content.sign(host.key.content, OpenSSL::←(cid:2)
Digest::SHA1.new)
Listing 9: CVE-2011-3872
r->assbackwards = 0;
pro = ll;
Listing 8: CVE-2011-3368
In § I, we motivated the need to handle many languages.
Here, we show a non-C example in Ruby. Listing 9 shows a
security patch for the puppet package to ﬁx the vulnerability
where an attacker can impersonate a master by exploiting
a non-default certdnsnames option when generating
H. Copied Similarity Metrics
In order to understand the overall amount of code dupli-
cation, we also ran a large scale experiment to measure the
similarity within the entire Debian Lenny source base. These
experiments required the pairwise computations discussed
in § II-C. We ran these experiments on an SGI UV 1000
cc-NUMA shared-memory system consisting of 256 blades.
Each blade has 2 Intel Xeon X7560 (Nehalem) eight-core
processors and 128 Gbytes of local memory [2].
58
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:03 UTC from IEEE Xplore.  Restrictions apply. 
s
r
i
a
p
n
o
i
t
c
n
u
f
f
o
r
e
b
m
u
n
e
h
T
 1e+13
 1e+12
 1e+11
 1e+10
 1e+09
 1e+08
 1e+07
 1e+06
 100000
0.0-0.1
0.1-0.2
0.2-0.3
0.3-0.4
0.4-0.5
0.5-0.6
0.6-0.7
0.7-0.8
0.8-0.9
0.9-1.0
Similarity among functions
e
g
r
o
F
e
c
r
u
o
S
n
i
s
e
l
i
f
f
o
e
g
a
t
n
e
c
r
e
P
 60
 50
 40
 30
 20
 10
 0
0-10 %
10-20 %
20-30 %
30-40 %
40-50 %
50-60 %
60-70 %
70-80 %
80-90 %