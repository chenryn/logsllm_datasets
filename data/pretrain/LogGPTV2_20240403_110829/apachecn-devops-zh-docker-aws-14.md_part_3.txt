  ...
```
在上例中，注意`RequiresCompatibilities`参数指定`FARGATE`为支持的发射类型，`NetworkMode`参数配置为所需的`awsvpc`模式。`Cpu`和`Memory`设置分别配置为 256 个中央处理器单元(0.25 个虚存)和 512 兆字节，这是可用的最小法盖特中央处理器/内存配置。对于`ExecutionRoleArn`参数，您引用了一个名为`ApplicationTaskExecutionRole`的 IAM 角色，我们将很快对其进行配置，与为`TaskRoleArn`参数配置的角色分开。
接下来，您定义了一个名为`xray`的容器定义，它引用了您在本章前面创建的 ECR 存储库；请注意，您为`Command`参数指定了`-o`标志。这将把`-o`追加到您在上一个示例中在 x 光守护程序映像中配置的`ENTRYPOINT`指令中指定的命令中，这将阻止 x 光守护程序尝试查询 EC2 实例元数据，因为当您使用 Fargate 时不支持这一点。
容器定义的日志配置被配置为使用`awslogs`驱动程序，这是 Fargate 所需要的，它引用了任务定义下配置的`ApplicationLogGroup` CloudWatch 日志组资源。最后，您将 X 射线守护程序端口(`UDP port 2000`)指定为容器端口映射，并配置一个名为`AWS_REGION`的环境变量，该变量引用您部署栈的区域，X 射线守护程序需要该区域来确定守护程序应该向其发布跟踪数据的区域 X 射线服务端点。
# 为 Fargate 配置 IAM 角色
在前面的示例中，您的 ECS 任务定义引用了任务执行角色(由`ExecutionRoleArn`参数定义)和任务角色(由`TaskRoleArn`参数定义)。
如前所述，任务执行角色定义了将分配给 ECS 代理和 Fargate 运行时的 IAM 权限，通常包括拉取运行任务定义中定义的容器所需的 ECR 映像的权限，以及写入容器日志配置中引用的 CloudWatch 日志组的权限:
```
...
...
Resources:
  ApplicationTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: EcsTaskExecutionRole
          PolicyDocument:
            Statement:
              - Sid: EcrPermissions
                Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Sid: CloudwatchLogsPermissions
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub ${ApplicationLogGroup.Arn}
  ApplicationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
  ...
  ...
```
任务角色定义了从您的 ECS 任务定义运行的应用可能需要的任何 IAM 权限。对于我们的用例，X 射线守护程序需要权限才能向 X 射线服务发布跟踪，如下例所示:
```
Resources:
 ApplicationTaskRole:
 Type: AWS::IAM::Role
 Properties:
 AssumeRolePolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Effect: Allow
 Principal:
 Service:
 - ecs-tasks.amazonaws.com
 Action:
 - sts:AssumeRole
 Policies:
 - PolicyName: EcsTaskRole
 PolicyDocument:
 Statement:
 - Effect: Allow
 Action:
 - xray:PutTraceSegments
 - xray:PutTelemetryRecords
 Resource: "*"    ApplicationTaskExecutionRole:
    Type: AWS::IAM::Role
  ...
  ...
```
在前面的示例*、*中，您向 X 射线守护程序授予`xray:PutTraceSegments`和`xray:PutTelemetryRecords`权限，这允许守护程序将从您的应用捕获的应用跟踪发布到 X 射线服务。请注意，对于`ApplicationTaskExecutionRole`和`ApplicationTaskRole`资源，`AssumeRolePolicyDocument`部分中的受信任实体必须配置为`ecs-tasks.amazonaws.com`服务。
# 为 Fargate 配置 ecs 服务
现在，您已经为 Fargate 定义了一个 ECS 任务定义，您可以创建一个 ECS 服务，该服务将引用您的 ECS 任务定义，并为您的服务部署一个或多个实例(ECS 任务)。
正如您所料，在配置 ECS 服务以支持 Fargate 时，您需要注意一些关键的注意事项:
*   **启动类型**:您必须指定 Fargate 作为您想要使用 Fargate 运行的任何 ECS 服务的启动类型。
*   **平台版本** : AWS 维护不同版本的 Fargate 运行时或平台，这些版本会随着时间的推移而演变，并可能在某个时候为您的 ECS 服务引入突破性的变化。您可以选择为您的 ECS 服务指定一个特定的平台版本，或者简单地忽略配置此属性，以使用可用的最新平台版本。
*   **网络配置**:由于 Fargate 需要使用 **awsvpc** 网络模式，您的 ECS 服务必须定义一个网络配置，该网络配置定义您的 ECS 服务将在其中运行的子网、分配给您的 ECS 服务的安全组，以及您的服务是否分配了公共 IP 地址。在撰写本书时，在使用 Fargate 时，您必须分配一个公共 IP 地址或使用 NAT 网关，如*隔离网络访问*一章中所述，以确保管理您的 ECS 服务的 ECS 代理可以与 ECS 通信，从 ECR 中提取映像，并将日志发布到 CloudWatch 日志服务。
Although you can't interact with the ECS agent, it is important to understand that all ECS agent communications use the same network interface as your container applications running in Fargate. This means that you must consider the communication requirements of the ECS agent and Fargate runtime when attaching security groups and determining the network placement of your ECS service.
以下示例演示了为 Fargate 和 ECS 服务发现配置 ECS 服务:
```
...
...
Resources:
 ApplicationCluster:
 Type: AWS::ECS::Cluster
 Properties:
 ClusterName: !Sub ${AWS::StackName}-cluster
 ApplicationService:
 Type: AWS::ECS::Service
 DependsOn:
 - ApplicationLogGroup
 Properties:
 ServiceName: !Sub ${AWS::StackName}-application-service
 Cluster: !Ref ApplicationCluster
 TaskDefinition: !Ref ApplicationTaskDefinition
 DesiredCount: 2
 LaunchType: FARGATE
 NetworkConfiguration:
 AwsvpcConfiguration:
 AssignPublicIp: ENABLED
 SecurityGroups:
 - !Ref ApplicationSecurityGroup
 Subnets:
 - subnet-a5d3ecee
 - subnet-324e246f
 DeploymentConfiguration:
 MinimumHealthyPercent: 100
 MaximumPercent: 200
 ServiceRegistries:
 - RegistryArn: !Sub ${ApplicationServiceDiscoveryService.Arn}
  ApplicationTaskRole:
    Type: AWS::IAM::Role
  ...
  ...
```
在前面的示例*、*中，需要注意的第一点是，虽然在使用 Fargate 时没有运行任何 ECS 容器实例或其他基础设施，但是在为 Fargate 配置 ECS 服务时，仍然需要定义一个 ECS 集群，然后您将在 ECS 服务中引用该集群。
ECS 服务配置类似于您在*隔离网络访问*一章中使用 ECS 任务联网运行 todobackend 应用时定义的配置，尽管有几个关键配置属性需要讨论:
*   `LaunchType`:必须指定为`FARGATE`。务必确保将您的 ECS 服务放在公共子网中，并将网络配置中的`AssignPublicIp`属性配置为`ENABLED`，或者将您的服务放在带有 NAT 网关的专用子网中。在前面的例子中，请注意我已经将`Subnets`属性硬编码到我的 VPC 内的公共子网；您需要将这些值更改为适合您的环境的值，并且通常会通过栈参数注入这些值。
*   `ServiceRegistries`:此属性配置您的 ECS 服务，以使用我们在本章前面配置的 ECS 服务发现功能，在这里，您可以参考您在前面的示例中配置的服务发现服务的 ARN。配置完成后，ECS 将在为链接服务发现服务创建的 DNS 记录集中自动注册/取消注册每个 ECS 服务实例(ECS 任务)的 IP 地址。
此时，还有最后一个资源需要配置——您需要定义您的 ECS 服务引用的`ApplicationSecurityGroup`资源:
```
...
...
Resources:
  ApplicationSecurityGroup:
 Type: AWS::EC2::SecurityGroup
 Properties:
 VpcId: vpc-f8233a80
 GroupDescription: !Sub ${AWS::StackName} Application Security Group
 SecurityGroupIngress:
 - IpProtocol: udp
 FromPort: 2000
 ToPort: 2000
 CidrIp: 172.31.0.0/16
 SecurityGroupEgress:
 - IpProtocol: tcp
 FromPort: 80
 ToPort: 80
 CidrIp: 0.0.0.0/0
 - IpProtocol: tcp
 FromPort: 443
 ToPort: 443
 CidrIp: 0.0.0.0/0
 - IpProtocol: udp
 FromPort: 53
 ToPort: 53
 CidrIp: 0.0.0.0/0
 Tags:
 - Key: Name
 Value: !Sub ${AWS::StackName}-ApplicationSecurityGroup
  ApplicationCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster
  ApplicationService:
    Type: AWS::ECS::Service
  ...
  ...
```
在前面的例子中，请再次注意，我使用的是硬编码值，通常我会使用栈参数，以使事情简单明了。安全组允许从 VPC 内的任何主机对 UDP 端口 2000 进行入口访问，而出口安全规则允许对 DNS、HTTP 和 HTTPS 进行访问，这是确保 ECS 代理可以与 ECS、ECR 和 CloudWatch 日志进行通信，以及确保 X 射线守护程序可以与 X 射线服务进行通信所必需的。
# 部署和测试 x 光守护程序