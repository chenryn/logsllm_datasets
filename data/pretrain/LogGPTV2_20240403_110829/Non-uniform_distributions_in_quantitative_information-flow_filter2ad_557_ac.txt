that, for γ-close distributions p and q, the distributions of X p and
Xq are also γ-close.
Lemma 2. Let X be a random variable and let p and q be distri-
butions on the domain of X. Then p
γ
≈ q implies pX p
γ
≈ pXq .
Proof. For all x we have
1
γ
· pXq (x) = Xa∈X−1 (x)
1
γ
· q(a) ≤ Xa∈X−1(x)
p(a) = pX p (x) .
Proof. Observe that H(Dp|Pp) = H(Dp) − H(Pp) because Pp
γ
≈ pDq .
γ
≈ q, Lemma 2 yields pDp
is determined by Dp. Since p
Applying Lemma 3 yields the assertion.
In Section 5.2 we show an application of Theorem 3, where we
analyze a program with respect to a uniformly distributed q in order
to derive bounds for the real, almost uniform, distribution p.
5. CASE STUDY
In this section we illustrate the techniques described in the previ-
ous sections. Namely, we will give an example of how an analysis
with respect to non-uniform distributions can be reduced to the uni-
form case, which we handle using existing tool support [20]. Fur-
thermore, we give an example of how our robustness result can be
used to estimate the error introduced by replacing in the analysis an
almost uniform distribution by a uniform one.
We consider a program for checking the integrity of Personal
Identiﬁcation Numbers (PINs) as used in electronic banking. Pre-
vious formal analyses of this program [19, 37] assume uniformly
distributed PINs; they are not fully accurate because PIN genera-
tion methods typically produce a skewed distribution. Using the
techniques presented in this paper, we perform the ﬁrst formal anal-
ysis that takes this skew into account.
We analyze the integrity check with respect to PINs that stem
from two diﬀerent PIN generation algorithms. The ﬁrst genera-
tion algorithm is easily expressed as a program, and we will use
the techniques developed in Section 3 to perform a precise non-
uniform QIF. The second generation algorithm produces PINs that
are almost uniformly distributed, and we will use the techniques de-
veloped in Section 4 to perform an approximate QIF of the integrity
check program. We begin by describing the integrity check and its
use in practice.
The proof for the upper bound follows along the same lines.
5.1 PIN Integrity Check
We next show that the entropy of a random variable is robust
with respect to small changes in its input distribution. Formally, we
show that for two random variables X and Y with γ-close distribu-
γ
≈ pY , the Shannon entropy H(X) can be bounded in
tions, i.e., pX
terms of the entropy H(Y).
Lemma 3. Let X and Y be random variables with pX
γ
≈ pY . Then
we have
H(X)
≤ γ · H(Y) + γ log2 γ
≥ 1
γ
· H(Y) − log2 γ
γ
.
(∗)
Proof. H(X) = −Px pX(x) log2 pX(x)
≤ −Px γ·pY (x) log2
pY (x)
γ
=
γ
≈ pY . The proof of the lower bound is
γ · H(Y) + γ log2 γ,
where (∗) follows from pX
analogous.
We can use Lemma 3 together with Lemma 2 to obtain bounds
on the remaining uncertainty of a program for distribution p from
an analysis with respect to a distribution q with p
γ
≈ q.
Theorem 3. Let p and q be distributions with p
γ
≈ q. Then we
have
H(Dp|Pp)
≤ γ · H(Dq) − 1
γ
≥ 1
γ
· H(Pq) + log2 γ(cid:16)γ + 1
γ(cid:17)
· H(Dq) − γ · H(Pq) − log2 γ(cid:16)γ + 1
γ(cid:17)
.
When a customer authenticates himself at an Automated Teller
Machine (ATM), he enters his PIN. This PIN is then sent to his bank
for veriﬁcation [1, 4]. Before sending, the PIN is XORed with the
customer’s Personal Account Number (PAN) and encrypted using
a symmetric cryptosystem. In case the ATM cannot communicate
directly with the customer’s bank, the encrypted PIN⊕PAN will
pass through a series of switches. Each of these switches decrypts
and extracts the PIN, checks it for integrity, and re-encrypts the
PIN using a key that is shared with the next switch. All operations
on the PIN are performed in dedicated tamper-resistant Hardware
Security Modules (HSMs), which protect the communication keys
and the PINs even if the switch is compromised.
Unfortunately, HSMs fail to fulﬁll this purpose because the out-
come of the PIN integrity check leaks information about the value
of the PIN [13]: Upon receiving an encrypted pin, the HSM de-
crypts and XORs the result with a given account number to extract
the PIN. The HSM then performs a simple integrity check on the
PIN, namely it checks whether all PIN digits are 
1
γ
· 10−4
Similarly, we can obtain an upper bound on Pr(Y = a) as follows:
Pr(Y = a) ≤ Pr(X ≥ 4) · 10−4 + Pr(X ≤ 3) · 6−4 = γ · 10−4.
1We thank Graham Steel for pointing us to this example.
2Additionally, a PIN of 0000 is replaced by 0100. We will ignore
this detail in our analysis.
P◦ ˆD
#Steps Π
0
1
2
3
[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]]
[[0,1,8,9,10,11],[2,3,4,5,6,7,12,13,14,15]]
[[0,1,10,11],[8,9],[2,3,12,13],[4,5,6,7,14,15]]
[[0,1,10,11],[8,9],[2,3,12,13],[4,5,14,15],[6,7]]
H(U|P ◦ ˆD) H( ˆD|P)
4
3.05
2.09
1.75
3.25
2.30
1.34
1.0