* 在长度方面，所有的案例代码长度非常相似，在 React 的一些方法中稍微冗长一些。
#### To-Do 列表项目对比意见
Vue 需要花费一些时间来熟悉，因为它的模板和其它两个框架有一些不同。React 非常的灵活，支持多种不同的方法来创建组件，而 HyperApp 保持一切简单，并提供与 React 的兼容性，以免你希望在某些时刻进行切换。
### 生命周期方法比较
另一个关键对比是组件的生命周期事件，每一个框架允许你根据你的需要来订阅和处理事件。下面是我根据各框架的 API 参考手册创建的表格：
![](/data/attachment/album/201808/23/230956ym6nzz7isbslwnlb.png)
*生命周期方式比较*
* Vue 提供了最多的生命周期钩子，提供了处理生命周期事件之前或之后发生的任何事件的机会。这能有效帮助管理复杂的组件。
* React 和 Hyperapp 的生命周期钩子非常类似，React 将 `unmount` 和 `destory` 绑定在了一起，而 Hyperapp 则将 `create` 和 `mount` 绑定在了一起。两者在处理生命周期事件方面都提供了相当多的控制。
* Vue 根本没有处理 `unmount` （据我所理解），而是依赖于 `destroy` 事件在组件稍后的生命周期进行处理。 React 不处理 `destory` 事件，而是选择只处理 `unmount` 事件。最终，HyperApp 不处理 `create` 事件，取而代之的是只依赖 `mount` 事件。
#### 生命周期对比意见
总的来说，每个框架都提供了生命周期组件，它们帮助你处理组件生命周期中的许多事情。这三个框架都为它们的生命周期提供了钩子，其之间的细微差别，可能源自于实现和方案上的根本差异。通过提供更细粒度的时间处理，Vue 可以更进一步的允许你在开始或结束之后处理生命周期事件。
### 性能比较
除了易用性和编码技术以外，性能也是大多数开发人员考虑的关键因素，尤其是在进行更复杂的应用程序时。[js-framework-benchmark](https://github.com/krausest/js-framework-benchmark) 是一个很好的用于比较框架的工具，所以让我们看看每一组测评数据数组都说了些什么：
![](/data/attachment/album/201808/23/230959ayvx3mspmg43qxgq.png)
*测评操作表*
* 与三个框架的有主键操作相比，无主键操作更快。
* 无主键的 React 在所有六种对比中拥有最强的性能，它在所有测试上都有令人深刻的表现。
* 有主键的 Vue 只比有主键的 React 性能稍强，而无主键的 Vue 要比无主键的 React 性能明显差。
* Vue 和 Hyperapp 在进行局部更新的性能测试时遇见了一些问题，与此同时，React 似乎对该问题进行很好的优化。
![](/data/attachment/album/201808/23/231001mqnmbvqqwum9zzpb.png)
*启动测试*
* Hyperapp 是三个框架中最轻量的，而 React 和 Vue 有非常小的大小差异。
* Hyperapp 具有最快的启动时间，这得益于它极小的大小和极简的 API
* Vue 在启动上比 React 好一些，但是差异非常小。
![](/data/attachment/album/201808/23/231002puzbi9i8kubmq73q.png)
*内存分配测试*
* Hyperapp 是三者中对资源依赖最小的一个，与其它两者相比，任何一个操作都需要更少的内存。
* 资源消耗不是非常高，三者都应该在现代硬件上进行类似的操作。
#### 性能对比意见
如果性能是一个问题，你应该考虑你正在使用什么样的应用程序以及你的需求是什么。看起来 Vue 和 React 用于更复杂的应用程序更好，而 Hyperapp 更适合于更小的应用程序、更少的数据处理和需要快速启动的应用程序，以及需要在低端硬件上工作的应用程序。
但是，要记住，这些测试远不能代表一般场景，所以在现实场景中可能会看到不同的结果。
### 额外备注
比较 React、Vue 和 Hyperapp 可能像在许多方面比较苹果、橘子。关于这些框架还有一些其它的考虑，它们可以帮助你决定使用另一个框架。
* React 通过引入[片段](https://reactjs.org/docs/fragments.html)，避免了相邻的 JSX 元素必须封装在父元素中的问题，这些元素允许你将子元素列表分组，而无需向 DOM 添加额外的节点。
* React 还为你提供[更高级别的组件](https://reactjs.org/docs/higher-order-components.html)，而 VUE 为你提供重用组件功能的 [MIXIN](https://vuejs.org/v2/guide/mixins.html)。
* Vue 允许使用[模板](https://vuejs.org/v2/guide/syntax.html)来分离结构和功能，从而更好的分离关注点。
* 与其它两个相比，Hyperapp 感觉像是一个较低级别的 API，它的代码短得多，如果你愿意调整它并学习它的工作原理，那么它可以提供更多的通用性。
### 结论
我认为如果你已经阅读了这么多，你已经知道哪种工具更适合你的需求。毕竟，这不是讨论哪一个更好，而是讨论哪一个更适合每种情况。总而言之:
* React 是一个非常强大的工具，围绕它有大规模的开发者社区，可能会帮助你找到一个工作。入门并不难，但是掌握它肯定需要很多时间。然而，这是非常值得去花费你的时间全面掌握的。
* 如果你过去曾使用过另外的 JavaScript 框架，Vue 可能看起来有点奇怪，但它也是一个非常有趣的工具。如果 React 不是你所喜欢的，那么它可能是一个可行的、值得学习的选择。它有一些非常酷的内置功能，其社区也在增长中，甚至可能要比 React 增长还要快。
* 最后，Hyperapp 是一个为小型项目而生的很酷的小框架，也是初学者入门的好地方。它提供比 React 或 Vue 更少的工具，但是它能帮助你快速构建原型并理解许多基本原理。你为它编写的许多代码和其它两个框架兼容，要么立即能用，或者是稍做更改就行，你可以在对它们中另外一个有信心时切换框架。
---
作者简介：
喜欢编码的 Web 开发者，“30 秒编码” （  ）和 mini.css 框架（  ） 的创建者。
---
via: 
作者：[Angelos Chalaris](https://hackernoon.com/@chalarangelo?source=post_header_lockup)   
 译者：[Bestony](https://github.com/bestony)  
 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出