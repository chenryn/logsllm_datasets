itself over time, based on knowledge acquired about past experiences that will help to solve new problems.
As the CBR system collects more cases, the WfMS becomes more resistant, thus preventing unwanted states.
This is because it has a larger set of knowledge to handle future exceptions.
Human involvement is needed when acceptable exception handlers cannot be automatically obtained.
Solutions provided by a person will then be incorporated into the case repository. The effects of the
exception-handler candidates on the workflow system and the applications are then evaluated. Thus, when an
exception is handled, modifications to the workflow system or applications may be needed. The exception-
resolution process is actually the population process of the CBR templates. The exception-resolution
procedure performs the following tasks (Luo, 2000):
• The coordination mode of exception handling is determined according to the type of process
interactions among business processes.
• The contacting party as well as an interaction point is determined. A contacting party is the entity
that is responsible for handling exceptions in the processes of its organization. An interaction point is
where the interactions can take place.
• The compensation scheme is found, if necessary. The nature of the processes will affect the
compensation schemes. When a compensation schema does not exist, human involvement is allowed
to determine the compensation schema.
• The rework scheme is found, if necessary. A rework scheme is a plan for the processes to make
progress from the failure point.
The retrieval procedure of similar previous cases is based on a similarity measure that takes into account
semantic and structural similarities and differences among the cases. A similarity measure is achieved by
obtaining the following:
• Exception similarity. Exception similarity is based on the is-a relationship in the exception hierarchy
in METEOR model 3 (Kochut, 1999).
• Workflow similarity. This is a workflow structural similarity, such as AND, OR building-block
similarity.
• Context similarity. This is obtained by computing the nearest neighborhood function of the quantified
degrees of semantic similarities over workflow application data. To accomplish this, a concept tree is
built, and the distances between concepts are stored in the case repository.
We use a pattern-guided case adaptation scheme. There are four steps in the adaptation process in this
pattern-guided adaptation scheme.
• Classifying the exception pattern. At this step, the exception pattern is identified. If it is a new
pattern, it is added to the exception pattern repository.
• Searching the handling pattern. Once the exception pattern is determined, a search is conducted for
the handling pattern. At this step, the exception handling coordination mode is determined. The
contacting party, as well as the interaction point, is also determined by analyzing the interactions
among business processes.
• Selecting a handler pattern. A handler pattern is selected, based on the search resulting from step 2.
The compensation scheme as well as the rework scheme is determined.
• Initializing the handler. The CBR handling template is populated. A new case is created which
results from the adaptation of an existing one.
4.2.2 Adaptation and Workflow Quality of Service
Workflow QoS represents the quantitative and qualitative characteristics of a workflow application necessary
to achieve a set of initial requirements (Cardoso, Miller, Sheth, Arnold, & Kochut, 2004). It addresses the
non-functional issues of workflows. Quantitative characteristics can be evaluated in terms of concrete
measures, such as workflow execution time and cost, while qualitative characteristics specify the expected
services offered by the system, such as security and fault-tolerance mechanisms.
In METEOR, workflows follow a QoS model (Cardoso et al., 2004) composed of three dimensions: time,
cost, and reliability. The tasks and transitions of a workflow are initialized with QoS estimates. To determine
useful estimates, a combination of a priori estimates from designers and estimates computed from prior
executions are used, with the historical data playing a larger role as more data is collected. Once QoS
estimates are determined, it is then possible to compute a workflow QoS. The computation can be achieved
using a mathematical (Cardoso et al., 2004) or a simulation approach (Cardoso & Sheth, 2003). The selection
of one of the methods is based on a tradeoff between time and accuracy of results.
At runtime, the quality of service of workflow instance is monitored. The monitoring tools seek to
identify the QoS status of instances and the possible occurrence of deviations from the desired metrics. When
QoS deviations are identified, adaptation mechanisms are used to derive and apply reparative actions to the
faulty instances.
Let us consider the following example. Several workflow instances are running correctly and the quality
of service specifications are being followed when a task starts to exhibit poor time QoS metrics. As a
consequence, the workflow QoS specifications of time are no longer satisfied. The adaptation module
identifies this problem and uses a problem-solving technique to derive a solution. In this case, the adaptive
system infers that the faulty task needs to be replaced by an equivalent task. This replacement can be
accomplished by applying dynamic changes to the workflow instances, either manually or automatically
(Cardoso et al., 2001).
Automatically finding a task to replace a faulty one is challenging. Therefore, this step may in some cases
require human intervention. Nevertheless, to minimize human involvement, sophisticated discovery
mechanisms to search for tasks can be implemented. In some cases, a discovery mechanism can search for
and find a task without human intervention. One approach to increase the degree of automatism is to describe
tasks and their operational metrics semantically (Cardoso & Sheth, 2003). This description allows the
discovery process to find tasks not only based on their functionality, but also based on their operational
metrics, i.e. based on their QoS. Once a task with the required functionality and QoS is found it can replace
the faulty task in a workflow.
4.3 Adaptation and Dynamic Changes
The two adaptation methods described in the previous sections cannot successfully accomplish their
objectives without having the support of a dynamic change layer. Adaptive methods rely on a dynamic
change layer to adapt running instances.
Traditional workflow systems are adequate to support business processes which are static (Reichert &
Dadam, 1998), with no need for the support dynamic changes at runtime. But, recently there has been an
increasing demand for developing systems with dynamic capabilities (Horn & Jablonski, 1998; Weske,
Vossen, & Medeiros, 1996), with a special emphasis on dynamic changes at the workflow instance level.
As workflow processes are instantiated, changes in the environment or generated by previous activities
may invalidate the current workflow instances, requiring reparative actions (Berry & Myers, 1998). Long-
running applications which are heterogeneous, autonomous, distributed may require support for dynamic
reconfiguration when machines fail, services are moved or withdrawn, and user requirements change. In such
environments, it is essential that the structure of applications be modified to reflect these changes
(Shrivastava & Wheater, 1998).
We classify the different types of change into two main categories: primitive change and composite
change. Primitive change can be further divided into immediate change and incremental change. Immediate
changes can be introduced in one step. Incremental changes, on the other hand, deal with situations where we
cannot apply the changes to a particular instance in a one-step procedure. For example, if a set of instances is
waiting for the completion of a task t, and if we dynamically change t specifications, the waiting instances
may enter an inconsistent state, since the information that they have relative to the previous task t no longer
reflects the current state of the system.
In our work, most of the primitive changes implemented are incremental changes (Tabel 1). Composite
changes are composed of a sequence of primitive changes that describe an elaborate process of definition
change (e.g., adding a task between two existing tasks is the result of applying a sequence of primitive
changes).
Table 1. Dynamic change classifications
Dynamic Change Change Type Implemented
AND to OR Join Change Incremental Yes
OR to AND Join Change Incremental Yes
Split Change Incremental Yes
Addition of an AND Transition Incremental Yes
Addition of an OR Transition Incremental Yes
Deletion of a Transition Incremental Yes
Data Object Transfer Addition Incremental Yes
Data Object Transfer Deletion Incremental Yes
Parameter Mapping Change Incremental Yes
Parameter Type Change Incremental No
Task Type Change Incremental No
Task Invocation Change Composite change No
Insertion of a Task Composite change Yes
Deletion of a Task Composite change No
In the ORBWork system, we have implemented a layer that permits the consistent realization of the
dynamic change of instances (Chen, 2000). The implemented module guarantees that all consistency
constraints which have been ensured prior to a dynamic change are also ensured after the workflow instances
have been modified (Reichert & Dadam, 1998). The dynamic change interface was built on top of the
CORBA ORB infrastructure, using IIOP as the underlying communication protocol. Additional functions
have been added to the IDL interface of the CORBA object responsible for managing tasks.
5. RELATED WORK
To support dynamic workflow adaptations, Greiner et al. (Greiner et al., 2004) have developed a rule-based
approach for the detection of logical failure events. Their approach has been implemented within the WfMS
ADEPTflex and workflow adaptation system AdaptFlow. Their systems use a rule-based approach for the
detection of logical failure events (exceptions). In our system we use a CBR approach. We believe that a
CBR system is more adaptive since as the CBR system collects more cases, the WfMS becomes more
resistant since it has a larger set of knowledge to handle future exceptions. Moreover, their approach only
deals with logical failure events, while we also address the problem of adapting instances to maintain a
specified level of Quality of Service.
Adams et al. (Adams, Edmond, & Hofstede, 2003) extend the applicability of Activity Theory to the
implementation of more flexible WfMSs. Activity theory offers a number of interesting solutions for
workflow adaptability, flexibility, evolution and exception handling. Their research describes the activity
theory principles that should be implemented when developing WfMSs. Unfortunately, no implementation
has been done, and their work does not address QoS issues.
Siebert (Siebert, 1999) proposes an integrated approach for adaptive workflow support. His work
describes extensions to the SWATS architecture in order to enable the executeon of unstructured process and
illustrates how an adaptive support layer can be integrated to extend existing workflow management systems.
The adaptive layers presented do not address directly the problem of handling exceptions nor QoS
monitoring and adaptation.
6. CONCLUSIONS
The new requirements of modern systems in our highly technological society demand that critical systems be
adaptable. Our work focuses on the adaptation of workflow management systems (WfMSs).
In this paper we have presented a set of comprehensive techniques to be used in the development of
WfMSs to increase their level of adaptation. To develop a successful solution, the first step is to develop a
conceptual architecture for workflow systems which will provide a fundamental framework for developing
an adaptable WfMS architecture. We have defined an adaptable architecture that functionally divides WfMSs
into four levels: instance level, schema level, workflow level, and infrastructure level. Thereafter, we start by
discussing how the need for adaptation can be triggered. We not only target adaptation from a functional
perspective, but also from an operational perspective. It is important to understand that adaptation does not
restrict its span to functional errors, i.e. is the workflow system or are the tasks working or not? Adaptation
also addresses operational issues, such as the QoS management of workflow instances. To illustrate how
functional and operational deviations can be handled, two adaptive modules are described. The first one deals
with exceptions and the second one targets the QoS of workflows. Finally, we explain the importance and
discuss the development of a dynamic change layer to carry out adaptation strategies.
Although the majority of the ideas presented were implemented in METEOR system, the concepts and
ideas are independent of the WfMS chosen. Therefore, it is, in principle, possible to add the notions
presented in this paper to most of the workflow management systems available today.
ACKNOWLEDGEMENT
We would like to acknowledge Krys Kochut’s work on the specifications of METEOR Model 3 and the
implementation of the METEOR competency hierarchy to handle exceptions. This research was funded, in
part, by the Naval Research Laboratory sponsored “Workflow Management for Advanced DoD
Applications” and “Extending METEOR with Workflow Reuse, Adaptation, and Collaboration” projects.
REFERENCES
Adams, M., Edmond, D., & Hofstede, A. t. (2003). The application of Activity Theory to dynamic workflow adaptation
issues. Paper presented at the 7th Pacific Asia Conference on Information Systems (PACIS 2003), Adelaide,
South Australia.
Bass, L., Clements, P., & Kazman, R. (1998). Software Architecture in Practice: Addison Wesley.
Berry, P. M., & Myers, K. L. (1998). Adaptive Process Management: An AI Perspective. Paper presented at the ACM
Conference on Computer Supported Cooperative Work, Seattle, Washington.
Cardoso, J., Luo, Z., Miller, J., Sheth, A., & Kochut, K. (2001, March 16-17). Survivability Architecture for Workflow
Management Systems. Paper presented at the Proceedings of the 39th Annual ACM Southeast Conference,
Athens, GA.
Cardoso, J., Miller, J., Sheth, A., Arnold, J., & Kochut, K. (2004). Modeling Quality of Service for workflows and web
service processes. Web Semantics: Science, Services and Agents on the World Wide Web Journal, 1(3), 281-
308.
Cardoso, J., & Sheth, A. (2003). Semantic e-Workflow Composition. Journal of Intelligent Information Systems (JIIS).
21(3), 191-225.
Casati, F. (1998). A Discussion on the Approaches to Handling Exceptions in Workflows. Paper presented at the
Proceedings of 1998 Computer-Supported Cooperative Work (CSCW 1998), Towards Adaptive Workflow
Systems Workshop, Seattle, WA.
Chen, Y. (2000). Design and Implementation of Dynamic Process Definition Modifications in OrbWork Enactment
System. Unpublished M.Sc. Thesis, University of Georgia, Athens, GA.
Greiner, U., Ramsch, J., Heller, B., Löffler, M., Müller, R., & Rahm, E. (2004). Adaptive Guideline-based Treatment
Workflows with AdaptFlow. Paper presented at the Proc. of Symposium on Computerized Guidelines and
Protocols (CGP 2004), Prague.
Han, Y., Sheth, A. P., & Bussler, C. (1998, November 1998). A Taxonomy of Adaptive Workflow Management. Paper
presented at the Workshop of the ACM 1998 Conference on Computer Supported Cooperative Work, Seattle,
WA.
Horn, S., & Jablonski, S. (1998, November 1998). An Approach to Dynamic Instance Adaption in Workflow Management
Applications. Workshop on Adaptive Workflow Systems. Paper presented at the Conference on Computer
Supported Cooperative Work (CSCW), Seattle, WA, USA.
Kochut, K. J. (1999). METEOR Model version 3. Athens, GA: Large Scale Distributed Information Systems Lab,
Department of Computer Science, University of Georgia.
Kochut, K. J., Sheth, A. P., & Miller, J. A. (1999). ORBWork: A CORBA-Based Fully Distributed, Scalable and Dynamic
Workflow Enactment Service for METEOR. Athens, GA: Large Scale Distributed Information Systems Lab,
Department of Computer Science, University of Georgia.
Luo, Z. (2000). Knowledge Sharing, Coordinated Exception Handling, and Intelligent Problem Solving to Support Cross-
Organizational Business Processes. Unpublished Ph.D. Dissertation, University of Georgia, Athens, GA.
Luo, Z., Sheth, A. P., Miller, J. A., & Kochut, K. J. (1998). Defeasible Workflow, its Computation, and Exception
Handling. Paper presented at the Proceedings of 1998 Computer-Supported Cooperative Work (CSCW 1998),
Towards Adaptive Workflow Systems Workshop, Seattle, WA.
Reichert, M., & Dadam, P. (1998). ADEPTflex - Supporting Dynamic Changes of Workflows Without Losing Control.
Journal of Intelligent Information Systems - Special Issue on Workflow Managament, 10(2), 93-129.
Shrivastava, S. K., & Wheater, S. M. (1998). Architectural Support for Dynamic Reconfiguration of Distributed
Workflow Applications. Paper presented at the IEEE Proceedings Software Engineering.
Siebert, R. (1999). An Open Architecture for Adaptive Workflow Management Systems. Transactions of the SDPS:
Journal of Integrated Design and Process Science, 3(3), 29-24.
Weske, M., Vossen, G., & Medeiros, C. B. (1996). Scientific Workflow Management: WASA Architecture and
Applications. Paper presented at the Fachbericht Angewandte Mathematik und Informatik 03/96-I, Universitat
Munster.
Worah, D., & Sheth, A. P. (1997). Transactions in Transactional Workflows. In S. Jajodia & L. Kerschberg (Eds.),
Advanced Transaction Models and Architectures (pp. 3-34): Kluwer Kluwer Academic Publishers.