date
这个查询还包含了一个LIMIT 200子句，用以防止脚本向浏览器发送大量的数据。（sapmdb
#
orint
生成页面的初始部分
category
成绩考评项目：分数浏览器
 href="/cgi-bin/db_browse.pl?tbl_name=grade_event&sort_col=category">
start_html
(-title => $title,-bgcolor =>"white"）;
，以解决此问题。
，我们在数据库里提前准备了几组前面学期的分
。例如，有一个显示 grate_event 表的内容的
，单击它们，可以重新显示这个表格。这些链
8.4使用DBI来开发Web应用程序
347
---
## Page 368
指向score_browse.pl的路径，外加一个用于指定考试事件编号的参数：
击它之后可以触发一个查询，检索出该次考试分数。与各次考试事件相对应的URL仅仅是一个
用查询里的列名作为该表格的列标题。在每一行里，event_id值都会显示为一个超链接，在点
348
/cgi-bin/score_browse.pl?event_id=n
其中，display_events（）函数负责从 grade_event表里提取信息，将其显示为一个表格，
sub display_events
下面是display_events（)的全部代码
printend_html();
if (!defined ($event_id))
print table ({-border =>"1"),@rows);
my Ssth= $dbh->prepare (qq(
display_scores ($dbh, $event_id);
#显示带边框的表格
push （@rows,Tr（@cells））;
#把列名用作表格的列标题
ssth->execute
#获得考试事件列表
display_events ($dbh)
把每一个考试事件的信息显示为表格的一行
se
@cells
@rows;
$dbh = shift;
push (@cells,
第8章用PerI DBI编写MySQL程序
ou
push(@cells,td(escapeHTML
#显示考试事件的日期和类别
push
my $url = sprintf （"%s?event_id=%d",ur1 (),
显示该次考试的分数
把考试事件ID显示为一个超链接，用它来重新调用脚本，
sh
slink
(@cells,
ORDER BY event_id
FROM grade_event
SELECT event_id,
Tr （@cells））;
th (escapeHTML($sth->(NAME}->[$i])));
td
td （$link））;
$date, $category)= $sth->fetchrow_array
=> $url),escapeHTML（$event_id））;
date, category
($category)));
($date)));
event_id;
(））
---
## Page 369
表页面，选择另一次考试。
（显示考试事件列表）显示为一个可以返回初始页面的超链接，以便用户能迅速返回考试事件列
display_scores（）函数把指定考试的所有分数列出来。这个函数还会把文本“ShowEvents List”
尾会带有一个事件 ID。score_browse.pl脚本会发现设置了event_id 参数，并调用
sub display_scores
while（my@ary=
push (@rows,
for （my $i=O;$i{NUM_OF_FIELDS); $i++)
#把列名用作表格的列标题
print p (strong ("Scores for grade event $event_id"));
ssth->execute（Sevent_id）；#把考试事件编号与查询里的点位符进行绑定
#查询给定考试事件的分数
print p(a ({-href => url ()),"Show Event List"));
@cells;
($dbh,$event_id）=@_;
@cells=(）;
push
则此脚本会显示考试事件列表
生成一个指向该脚本的链接，不包含
foreach my $val(@ary)
else
#如果为非空，则显示值；否则，显示不间断空格
if
$val = escapeHTML ($val);
(defined（$val）&&$valne“")
(@cells,
WHERE
SELECT
Tr
ORDERBY
NC
FROM
grade_event.event_id=?
AND score.event_id=grade_event.event_id
student.student_id =
Student INNER JOIN score INNER JOIN grade_event
score.Score DESC
grade_event.category ASC,
grade_event.date AsC,
grade_event.category
score.score,
grade_event.date,
student.name,
：$sth->fetchrow_array ())
(@cells));
th （escapeHTML ($sth->(NAME)->[$i])));
如果用户点击了这个链接，
：score.student_id
8.4使用DBI来开发Web应用程序
349
---
## Page 370
行搜索：
配，找出那些在interests列值里包含这个关键字的行。
果。此脚本的搜索机制是：在输入的关键字的两端，加上“%”通配符，然后执行LIKE模式匹
户提交表单时，会再次调用此脚本，接着会在 member 表里搜索符合条件的成员，然后显示结
8.4.6.1利用模式匹配进行搜索
功能。
将介绍两种表搜索方法：第一种是基于模式匹配的；第二种则使用了MySQL的 FULLTEXT搜索
们可以自己进行查找，则再好不过了。
然
史联盟成员。但是，联盟成员无法直接访问这个脚本。联盟秘书必须在命令行执行这个脚本，
值时，这种办法更为合适。下一个脚本将展示这种提醒用户进行输入的方法。
用户提供信息的方法是，显示一个让用户可以进行填写的表单。当选择范围是一些不易确定的
择，其中的选项都是以超链接形式展现的，它可以带上特定的参数再次调用此脚本。另一种让
8.4.6
考试日期即可。此脚本会将它与正确的ID关联起来。
型的界面，你就不用详细了解具体的细节了。
示
件 ID。之所以这样做，并不是因为我们是按事件 ID 来进行思考的，而是因为这个脚本已经显
第一个搜索脚本是ushl_browse.pl，它会显示一个表单，让用户输入一个关键字。
后再把结果邮寄给请求这个列表的那位成员。如果能把这种查找功能提供给这些成员，让他
了一个系列的ID供我们选择，同时还带有与其对应的日期和考试类型。很明显，有了这种类
S
此脚本的主要部分是显示关键字表单。它还会检查是否提交了关键字。如果提交了，则执
my $keyword = param ("keyword"）;
print h1 (Stitle);
my $title = "U.s. Historical League Interest Search";
print
db_browse.pl和score_browse.pl脚本让用户可以根据初始页面里的选项列表进行选
其中，display_scores（）函数执行的语句与1.4.9.10节所编写的语句很相似。1.4.9.10节主
则搜索并显示拥有该种兴趣的成员列表。
显示关键字输入表单。此外，如果定义了$keyword，
要查找的参数
print table ({-border =>"1"},@rows）;
美史联盟：搜索志趣相投的成员
#显示带边框的表格
push (@rows, Tr (@cells））;
第8章用Perl DBI编写MySQL程序
start_html
push (@cells, td ($val));
$val="&nbsp;";
(-title => $title,-bgcolor =>"white");
，实现这一点的一种方法便是编写基于Web的脚本。本
。你不必知道具体的考试事件ID，只需要能识别出
当用
索
护
---
## Page 371
了CGI.pm函数来生成各个标记：
函数与之前为 gen_dir.pl脚本编写的同名函数大同小异（参考 8.3.1节)。不过，之前那一版
个override参数：
果你不喜欢这种行为，想让这个字段每次都显示为空白，则需要在textfield（）调用里包含一
在脚本的执行环境里存在某个字段的值，那么CGI.pm 模块会将其自动填充到那个字段里。如
值设定为一个空串，每次提交的关键字也还会出现在下一个页面中的表单里。这是因为：如果
柄，
一例证。
息如何被发送，
请求的一部分进行发送。不过，CGI.pm模块与该信息的具体发送方式毫无关系，因为不管该信
参数添加到URL的末尾。事实上，浏览器会负责对表单里的信息进行编码，然后将其作为post
sub html_format_entry
print textfield (-name => "keyword",
当运行ushl_browse.pl脚本时，你将会发现，即使脚本在生成表单时把keyword字段的
search_members（）函数完成了关键字的搜索。首先，它会接收两个参数：一个是数据库句
my（sdbh,$interest）=@_;
sub search_members
另一个是输人的关键字。然后，它会运行搜索查询，把匹配到的成员行显示出来：
#如果指定了关键字，则连接到服务器，运行搜索
print end_form ();
print p ("Enter a keyword to search for:");
printp（"Number of matching entries:$count"）;
while (my $ref =$sth->fetchrow_hashref ())
#在interest字段的任何位置查找字符串
print p ("Search results for keyword:
++$count;
html_format_entry($ref);
..建立数据库连接（未显示）.··
param（）函数都会返回该参数值一
0；
ORDER BY last_name,
SELECT
-size=>40);
FROM member WHERE interests LIKE ?
first_name
-value
escapeHTML ($interest）);
一这是CGI.pm让Web编程变得更容易的又
"Search");
8.4使用DBI来开发Web应用程序
=>，
-size=>40）;
351
---
## Page 372
search_members（）函数上有区别。经过修改的 search_members（）函数如下所示：
脚本便是在ushl_browse.pl 的基础上编写而成的，这两个脚本只在负责构造搜索查询的
其他的存储引擎来创建member 表，则需要使用 ALTER TABLE，将其转换为MyISAM表：
FULLTEXT功能有关的信息请参考2.14节。
FULLTEXT 索引l。本节的ushl_ft_browse.pl 脚本用的就是这种方法。更多与 MySQL 的
查询来查找与每个关键字匹配的行。一种完成此项兴趣搜索任务的更加灵活的方法是，使用
可以。你可以在搜索表单里输入多个关键字，但要想找到匹配的行，必须构建一个更为复杂的
要用逗号把这些兴趣隔开：
8.4.6.2利用FULLTEXT索引进行搜索
数使用了format_name（）函数。它与前面 gen_dir.pl脚本里的同名函数完全一样。
352
这样便可以对 interests 列执行 FULLTEXT搜索。sampdb 发行版里的ushl_ft_browse.pl
在对 member 表执行 FULLTEXT 搜索之前，
ALTER TABLE member ADD FULLTEXT （interests);
接下来，需要对member表进行正确的索引。为做到这一点，可以使用下面这条语句：
ALTER TABLE member ENGINE = MyISAM;
可以用ushl_browse.pl脚本来搜索，与任意多个关键字相匹配的行吗？答案是，差不多
Revolutionary War,Spanish-American War,Colonial period,Gold rush,Lincoln
美史联盟的成员可能会有多种兴趣。如果真是这样，那么在 member 表的 interests 列里，
为了把 first_name、last_name 和 suffix 列的值拼在一起，html_format_entry（）函
sub search_members
my $entry_ref = shift;
print br（);
print "Interests: $entry_ref->(interests)", br ()
print "Address:Saddress",
saddress
Saddress
saddress
saddress.= $entry_ref->{street)