## 0x01 Empire简介及部署
Empire是一个开源，跨平台的远程管理和后渗透开发框架。本文是个大杂烩，介绍了Empire的基本功能，还总结Empire常见模块用途，以及渗透中的一些案例研究。
项目地址：
### Empire的部署
官方支持部署系统Kali、Debian、Ubuntu。
本文环境在系统Kali 2019.4下部署完成。
    git clone https://github.com/EmpireProject/Empire
部署坑点：
install.sh脚本安装的requests模块版本和urllib3模块不兼容，卸载requests重新安装解决问题。
    pip uninstall requests
    pip install requests
## 0x02 Empire基础知识
在使用工具前，对工具有一个基础概念会让使用更轻松一点，分析工具目录用途是最快了解工具架构的方法。
### Empire目录结构
    ├── data
    │   ├── agent
    │   ├── misc
    │   ├── module_source
    │   ├── obfuscated_module_source
    │   └── profiles
    ├── downloads
    │   ├── 37SNWM1U
    │   ├── 4RY12ZPW
    │   ├── DF4UK2SX
    │   ├── FP46V2R1
    │   ├── KU5E687M
    │   ├── STH5VG46
    │   └── Z1UCRB3X
    ├── lib
    │   ├── common
    │   ├── listeners
    │   ├── modules
    │   ├── powershell
    │   └── stagers
    ├── plugins
    └── setup
  * setup目录
setup最重要的两个文件是install.sh 、reset.sh，一个是安装脚本，一个是重置脚本。
reset.sh主要干以下事情：
    1. 重置数据库
    2. 删除调试文件
    3. 删除downloads文件夹
    4. 如果不在docker中，则启动Empire
  * 主路径empire文件程序启动入口。
  * data目录主要存放模块源码、程序数据、agent。
  * lib目录主要存放listeners、modules、powershell、stagers等功能模块。
  * plugins目录主要存放扩展插件。
### listeners
Empire listeners功能主要用于监听返回的shell。
相关命令：
命令 | 功能  
---|---  
listeners | 进入listeners交互菜单  
uselistener | 使用一个Empire listener模块  
info | 显示listener模块设置信息  
set | 设置listener模块信息  
execute | 执行  
进入listeners交互菜单
使用一个Empire listener模块
显示listener模块设置信息
### Stagers
Empire Stagers功能主要用于生成反弹shell的payload。
相关命令：
命令 | 功能  
---|---  
usestager | 使用Empire stager  
info | 显示usestager模块设置信息  
set | 设置usestager模块信息  
execute | 执行  
使用Empire stager
显示usestager模块设置信息
设置usestager模块信息并执行
Payload生成成功
### Agents
Empire Agents功能主要用于管理反弹shell的会话。
Agent命令 | 功能  
---|---  
agents | 进入agents菜单  
back | 返回上一个菜单  
bypassuac | 运行BypassUAC，生成一个新的Agent  
clear | 清理agent任务  
creds | 显示数据库中的凭据  
download | 下载文件  
exit | 退出  
help | 帮助  
info | 显示Agent信息  
injectshellcode | shellcode注入，例如：injectshellcode 
jobs | 返回工作列表或者停止正在运行的工作  
kill | 停止特定的进程名称或ID  
killdate | 获取或设置agent的停止日期  
list | 显示存活的agents或listeners  
listeners | 进入存活listeners交互菜单  
lostlimit | 检查更改丢失的agent  
main | 返回主菜单  
mimikatz | 运行Invoke-Mimikatz  
psinject | 将启动器注入远程进程，例如：psinject    
pth | 通过Mimikatz执行Pass The Hash  
rename | 重命名agent  
resource | 从文件中读取并执行Empire命令列表。  
revtoself | 使用凭证/令牌还原令牌特权  
sc | 截屏，默认为PNG。 给出压缩率意味着使用JPEG。 例如 sc [1-100]  
scriptcmd | 在当前导入的PowerShell脚本中执行一个功能。  
scriptimport | 导入PowerShell脚本并将其保存在代理的内存中。  
searchmodule | 搜索Empire模块  
shell | 执行shell命令  
shinject | 将非meterpreter侦听器shellcode注入远程进程。例如：shinject 
sleep | agent睡眠间隔  
spawn | 为给定的侦听器名称生成一个新的Empire agent  
steal_token | 使用凭证/令牌模拟给定进程ID的令牌。  
sysinfo | 获取系统信息  
updatecomms | 动态地将代理通信更新到另一个侦听器  
updateprofile | 更新代理连接配置文件  
upload | 上传文件  
usemodule | 使用Empire模块  
workinghours | 获取或设置agent的工作时间(9:00-17:00)  
使用interact命令进入Agents交互菜单
## 0x03 权限提升
在Agents交互菜单，Username一栏没有*就需要权限提升。
### UAC Bypasses
用户admin在管理员组，但是我们的Agents没有提升到管理员权限，这是因为UAC在发挥重要，没有以管理员身份进行运行。
    shell net localgroup Administrators 查看在管理员组的用户
利用UAC Bypasses提升权限
## 0x04 横向移动
Empire已经实现以下几种常见的横向移动模块。
  * Pass-the-hash
  * Invoke-WMI
  * Invoke-PsExec
  * PSRemoting
### Pass-the-hash
Empire的credentials/mimikatz/pth模块通过Invoke-Mimikaz的sekurlsa::pth函数实现了哈希传递。
首先我们使用mimikaz提取用户凭据，creds查看用户凭据
利用situational_awareness/network/powerview/get_user收集用户，看他能干什么。
可以发现这个用户是域管理员，我们可以利用凭据来访问域中的其他机器。
pth 2获取凭据库中CredID为2用户运行程序的PID
然后利用steal_token窃取身份令牌
访问成功
### Invoke-WMI
WMI可以描述为一组管理Windows系统的方法和功能。我们可以把它当作API来与Windows系统进行相互交流。WMI在渗透测试中的价值在于它不需要下载和安装，
因为WMI是Windows系统自带功能。而且整个运行过程都在计算机内存中发生，不会留下任何痕迹。
首先获取计算机名：
加载lateral_movement/invoke_wmi模块
需要设置ComputerName和Listener
    (Empire: powershell/lateral_movement/invoke_wmi) > set Listener testhttp