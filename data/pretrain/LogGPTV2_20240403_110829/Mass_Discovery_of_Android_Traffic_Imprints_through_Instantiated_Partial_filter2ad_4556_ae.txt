40,316
4,590
25,126
8,996
13,496
4,878
14,665
202,393
392,645
3.62
6.92
8.04
7.34
8.08
3.60
6.34
7.31
2.07
2.81
above 93%, with more than 98% of Google Play apps being identi(cid:128)ed
by their imprints. In the meantime, PHAs from VirusTotal have
lower identi(cid:128)cation ratio (70.62%). To (cid:128)nd the reason, we checked
the PHAs and found that a portion of PHAs from VirusTotal cannot
be uniquely (cid:128)ngerprinted, due to their network sinks all present
in shared code, including shared libraries, code templates or other
apps they repackaged [9]. (cid:140)e invariants extracted from these apps
also appear on the tra(cid:129)c produced by other apps using the same
shared code. Although, we discovered that from all 40,665 such
apps, only 920 unique certi(cid:128)cates were recovered; also the app
pairs we randomly sampled are almost identical in their code, ex-
cept some di(cid:130)erences in their resource (cid:128)les unrelated to network
activities. As a result, all the invariants discovered from these apps
are actually shared by their individual families. In our research, we
discovered that these PHAs within some families can be unambigu-
ously identi(cid:128)ed. Altogether, 77.08% of these 181,582 were found
to be identi(cid:128)able. On average each app has 2.81 imprints. Table 5
summarizes the identi(cid:128)ability of the apps from di(cid:130)erent sources.
In each category, we can see the average number of imprints per
app. (cid:140)e apps from VirusTotal have the least.
Invariable token. As mentioned earlier (Section 4.2), the imprints
discovered by Tiger cover more packets than the tra(cid:129)c signatures
produced by prior approaches [14, 39]. Fundamentally, the advan-
tage comes from new types of invariable tra(cid:129)c tokens recovered
from apps (Section 5.2). Table 6 presents the types of tokens we
found, including not only domain, IP and keys that are also used
in the prior research [24] which generate signatures from a given
tra(cid:129)c training set, but also time values, device information values
and credentials that have never been reported before. Even for the
categories with known invariable tokens, such as ID-Value, not
only does it include package name, but it also contains other sur-
prising identi(cid:128)able information like hardcoded session ID values
(Section 5.2). Further, even for the same keys like appkey, they
could appear at di(cid:130)erent locations in an HTTP packet, like on a
URL, or within the HTTP header or content. (cid:140)e la(cid:138)er has never
been used to (cid:128)ngerprint an app, up to our knowledge.
Each imprint contains one or more tokens (a keyword or a value),
whose length ranges from 9 to 338 bytes. For example, the im-
print of an real app involves (cid:128)ve tokens “webservice”, “command”,
“getimage”, “session” and “itemid”. Even with a high coverage,
individual tokens tend to be too generic for app identi(cid:128)cation. As an
example, in our dataset, “command” is in the tra(cid:129)c of 133 apps and
“session” relates to 214 di(cid:130)erent apps. Combinations of multiple
ones are much more speci(cid:128)c. In our research, we found that except
Table 6: Invariable token
Key
Value
Category
ID/Key
Time
Version
Device
H(cid:138)p
Unknown
Domain-IP
ID/Key
Time
Device
Credential
Unknown
Example
appKey, appID, channelID, uid, sid, …
time, date, timestamp,updateTime, …
appVersion, apiVersion, osVersion, …
imei, imsi, screen-width, screen-height, …
Content-Type, Accept-Encoding, …
hufplg, czkpln, lg, usd, …
h(cid:138)p://www.fotgtechnologies.com/, …
555f89c2-94e6-8e8f-(cid:130)cb4d55a0c4, …
1936-07-09 06:34:05, …
3223423(imei), 23423(imsi), …
280391LORE(password), …
13868388931, updateOpening, …
%
49.66%
6.92%
11.91%
23.73%
27.55%
30.24%
91.78%
9.92%
0.39%
1.43%
0.15%
47.59%
the long tokens like package IDs, most imprints (53.47%) contain
more than one invariable tokens.
5.2 New Invariable Tokens
Among all the new tokens in Table 6, some are extremely intriguing.
Here we take a close look at those most interesting ones, including
fake device information, hardcoded time, login credentials and even
the values of session IDs. (cid:140)e presence of these tokens also o(cid:130)ers
us a unique opportunity to be(cid:138)er understand the backgrounds and
operation environments of related apps only by imprints.
Fake device information. Since device information’s values are
supposed to change across devices and cannot be tied to a speci(cid:128)c
program, it has never been reported that an app can be identi(cid:128)ed
by the values of these keys, such as “imei”, “imsi’. Interestingly,
we found in our dataset that such unique values do appear on the
imprints of 2,826 apps. For example, an app sends out an URL:
“http://admin.ad-maker.info/...&device id=94c24a0bc4fb
8d342f0db892a5d39b4a”, regardless of the devices that it is run-
ning on. From its code, we found that the value “94c24a0bc4fb8d34
2f0db892a5d39b4a” is actually the md5 hash value of “android id”
and the related code statement is only executed when the app is
running in background. Another example is that an app sends a
(cid:128)x value “a63123717ccbd3561a58808a6310e057” for device value ID
when its host app does not have the READ PHONE STATE permission
. Such fake device information can serve to (cid:128)ngerprint the target
apps, and reveal some operation environments of the apps (e.g.,
being executed in background or having no READ PHONE STATE
permission).
Hardcoded time. Time and date information o(cid:137)en appears in
network tra(cid:129)c. What is unexpected is that 768 apps in our dataset
always send out the same time values in their tra(cid:129)c, which are
actually embedded in their code. As an example, a bus app for users
to choose suitable buses and communicate with each other adds
“date=2012-1-1 00:00:00” to its HTTP message. A(cid:137)er analyzing
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA824Figure 6: Example of Credential.
Figure 7: Example of Session ID.
the app’s code, we found that the HTTP request serves to retrieve
from the app’s server the chat logs always starting from this speci(cid:128)c
date. Also we found that 27 apps utilize their release time as a
replacement for their version information. Such dates, again, are
hardcoded and therefore can be used in imprints.
Credential and personal data. Prior research reports that many
apps include hardcoded login credentials [21], which actually were
found in the imprints generated by Tiger. For example, we found an
app developer le(cid:137) an authentication key inside the app dogantv.tv2,
when requests any resource stored in the developer’s server. Since
the data is hardcoded, the authentication key, therefore, becomes
an invariable token for the app. Most interestingly, we saw some
apps even include plaintext user names and passcodes within their
code (see Figure 6), which were also observed in their tra(cid:129)c. (cid:140)ese
information was automatically extracted by our implementation to
serve as a tra(cid:129)c token in the corresponding apps’ imprints.
Session ID. Also surprising is our (cid:128)nding that even session IDs
(or cookies) were hardcoded and picked up from their tra(cid:129)c by
Tiger as their invariable tokens. As we know, a session ID is a
piece of data that helps stateless network protocols identify a ses-
sion. It is typically used to recognize a user a(cid:137)er she logs into
a website. Usually, session IDs should be generated dynamically.
However, there are indeed apps using (cid:128)xed session IDs, as pre-
sented Figure 7, which shows that an app sends the session key
“48029f79-de1a-415d-be10-ae773f32e206” out to a server. A
possible explanation here could be the need for convenient access
to the server-side resource of an app without explicit login. Inter-
estingly, some developers seem aware of the risk of disclosing this
security-sensitive information to the public, and try to conceal the
IDs in HTTP packet headers, instead of directly exposing them on
URLs. For Tiger, however, this does not make any di(cid:130)erence.
5.3 Triggers
By design, Tiger is well equipped to recover hidden identi(cid:128)able
tokens that tend to be missed by automatic exploration tools. (cid:140)is,
however, does not necessarily mean that these tokens rarely show
up in the app’s tra(cid:129)c: on the contrary, such tokens could be good
indicators for the apps when they are interacting with human
users or performing operations of interest. Following we present
the examples for the cases where network sinks become extremely
hard to trigger automatically without looking into their code (which
makes all existing learning-based approaches less e(cid:130)ective).
Human involvement. For the automatic tool, a common example
for a complicated trigger is an app’s login page. We found that
about 24% of apps hide their identi(cid:128)able network behaviors behind
login protection. Examples include Airbnb and iKuLing. Note that
to enable an automatic tool to generate login tra(cid:129)c, one needs to
manually enter a list of login credentials for di(cid:130)erent sites. For Tiger,
however, this becomes unnecessary, as long as the code responsible
for such behaviors is on the app side.
Intent trigger. Another case is an app whose identi(cid:128)able tra(cid:129)c can
only be invoked by an Intent issued by itself or other apps running
on the same device. For example, the app “com.pekingsjht.iyank
erapp” has a special “SearchActivity”, which cannot be reached
from its main view, and instead, can only be launched by an Intent.
Clearly, Monkey and its variations will be almost impossible to
trigger this activity. Actually, discovering the trigger condition
is highly nontrivial, which may require a symbolic execution to
recover the construction of the Intent. For Tiger, however, all we
need is to (cid:128)nd the related network sink and partially runs the slice
to generate tokens, without constructing that Intent.
Triggered from the remote. Also discovered in our study is
the network operations that are triggered by the content on a
server. For example, there is an app includes a speci(cid:128)c activity for
video playing that can only be activated when a URL scheme like
“aipai-vw://video/” displayed in the webview. (cid:140)e trouble is that the
scheme may or may not show up behind certain widgets (such as a
bu(cid:138)on) on the webpage within the webview and therefore becomes
almost impossible for an automatic tool to trigger. As a result, the
network operation in the video-playing activity simply cannot be
invoked automatically. Again, such hidden activities are tricky for
the automatic tool but can still be common when the app is being
operated by a human user.
Triggers of PHAs. Triggers inside PHAs protect suspicious behav-
iors from dynamic analysis, which makes the concealed imprints
di(cid:129)cult by UI exploration approach to catch. We found such trig-
gers existing in our measurement. For example, we found a spyware
“com.nicky.lyyws.asl”, which is from the NickyBot family. Only
when an SMS message with speci(cid:128)c contents is received by the
infected smartphone, the spyware is triggered to send the content
of the received message to a remote server. Another case we found
is “com.wuzla.game.ScootrHero Lite”, a malicious app from the
GoldDream malware family. Its imprints can only be captured by
activating the trigger through an UploadMessages command from
the remote controller. Tiger captured these imprints successfully.
6 DISCUSSION
With its high performance and e(cid:130)ectiveness demonstrated in our
evaluation and measurement study, the current design and imple-
mentation of Tiger are still preliminary. Here we discuss a few
limitations of the technique and potential ways to move it forward.
Limitations of IPE. Tiger could lead to the imprints that do not
exist in any real apps’ tra(cid:129)c, due to the limitations of the IPE tech-
nique and also the existence of dead code. (cid:140)e former is mainly
com.paomian.crazystarimprinttoken in entity:accountTypetoken in entity:HOSTED_OR_GOOGLEtoken in entity:Emailtoken in entity:reallibc@gmail.comtoken in entity:Passwdtoken in entity:bici0109com.infinity.lcwlearnimprinttoken in url:http://hizliegitim.infinityyazilim.com/api/AddSupportFiletoken in url:sessionKey=48029f79-de1a-415d-be10-ae773f32e206token in header:Connectiontoken in header:Keep-Alive token in header:Content-Typetoken in header:multipart/form-datatoken in header: boundarySession D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA825caused by the challenges in processing loops (Section 4). One possi-
ble way to move forward is to explore the technique such as fuzzy
matching: looking for the token combination close to, instead of
exactly matching an imprint, given the observation that the errors
within an imprint, when exist, tend to be minor, involving typi-
cally only one token. (cid:140)is may need to set up a threshold to judge
whether two imprints are the same. Such threshold could be mea-
sured from future evaluations on the false detection and coverage
rate. Another cause of the false negative is pruning of a variable
related to an invariant output. Particularly, partial execution of a
method can miss some of its internal paths, which could only be
triggered by assigning some input variables with speci(cid:128)c values,
rather than the random concrete values given by our IPE engine. In
other words, some input variables could be dropped as irrelevant
ones but may actually a(cid:130)ect the output invariants when they take
certain speci(cid:128)c values. Although theoretically feasible, we have
not found any instance of this type from the randomly selected 100
apps a(cid:137)er manual checking. What we observed actually are rela-
tively straightforward, serving the purpose such as encoding(e.g.,
base64, MD5) and building packet content (e.g., storing payloads
into a Hashmap). Also, Tiger achieves over 98% coverage using this
approach. Another issue is dead code, which leads to the analysis
on the sinks that will not be executed during an app’s real-world
operations. Our preliminary study shows that the impact of the
dead code can be limited (Section 4). More e(cid:130)ort is needed to un-
derstand the performance implications of dead code, which make a
(cid:128)rewall screen tra(cid:129)c with more signatures than needed. In order
to further reduce the impact of dead code, an e(cid:129)cient reachability
test is planed to be built into our system.
Imprint construction. Further, the main objective of Tiger is to
e(cid:129)ciently generate high-quality tra(cid:129)c. (cid:140)e technique for imprint
construction is not the focus here and therefore may not be perfect.