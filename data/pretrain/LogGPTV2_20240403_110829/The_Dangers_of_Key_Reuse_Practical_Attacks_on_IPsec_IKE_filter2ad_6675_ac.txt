ception of a repeated message m2).
5. After receiving enough Case 1 answers from Re-
sponder B, the attackers can compute the decryption
m ← cd (mod N). Since m = cd = (H · re)d = Hd ·
red = Hd ·r (mod N), they can compute a valid sig-
nature σ of H by multiplying m with r−1 (mod N).
Figure 7: Bleichenbacher attack against IKEv2 signature
based authentication.
6. The attackers complete the handshake by sending
message m3 including the valid signature σ to Re-
sponder A, thus impersonating Responder B.
4.5 Ofﬂine Dictionary Attack on Main
Mode IKEv1 with Pre-Shared Keys
It is common knowledge that the aggressive mode of
IKEv1 using PSKs is susceptible to ofﬂine dictionary at-
tacks, against passive attackers who only eavesdrop on
the IP connection. This has actually been exploited in
the past [5].
We show that an ofﬂine dictionary attack is also possi-
ble against the main mode of IKEv1 and against IKEv2
with PSKs, if the attackers are active and interfere with
DHKE. Additionally, the attackers have to act as a re-
sponder, thus waiting for a connection request by the
victim initiator. Once the attackers have actively in-
tercepted such an IKE session, they learn an encrypted
MACI value. This value is computed from public data
from the intercepted session, the shared DHKE value,
and the PSK. Since the attackers know all of these values
except the PSK, they can now perform an ofﬂine dictio-
nary attack against it. Details on this attack can be found
in section 9.
5 Bleichenbacher Oracle in Cisco IOS
Cisco includes the PKE authentication mode in IOS,
which is the operating system on the majority of Cisco
routers and current Cisco switches. The mode can also
be found in IOS XE, which combines a Linux kernel with
IOS as an application. IOS XE is used on Cisco’s carrier
routers and enterprise switches [13]. For our tests, we
used a Cisco ASR 1001-X router running IOS XE in ver-
sion 03.16.02.S with IOS version 15.5(3)S2.
USENIX Association
27th USENIX Security Symposium    573
Initiator(IDI,skI,pkI)Responder(IDR,skR,pkR)IKESAINITm1:=(proposalI,gx,nI)−cI,0,m1−−−−−−−−−−−→m2:=(proposalR,gy,nR)←−cI,cR,m2−−−−−−−−−−−s←PRFh(nI,nR)(gxy)(kd,kaI,kaR,keI,keR,kpI,kpR)←PRFs(nI,nR,cI,cR)IKEAUTHMessagesEncrypted-then-MACedwith(keI,kaI),(keR,kaR)MACI←PRFkpI(IDI)σI←SignskI(cI,0,m1,nR,MACi)m3:=(IDI,σI,proposalR)−cI,cR,m3−−−−−−−−−−−→MACR←PRFkpR(IDR)σR←SignskR(cI,cR,m2,nI,MACR)m4:=(IDR,σR,proposalR)←−cI,cR,m4−−−−−−−−−−−(k0eI,k0aI,k0eR,k0aR)←PRFkd(nI,nR)m2keep Awaitingm3=Enc(...,σB)m4Attacker impersonates B !Responder AResponder BAttackerm1forge signature σBcompute kd, kaI, kaR, keI, keR, kpI, kpR,  compute MACI= PRF(kpI, IDB)encode h = hash(cI, 0, m1, nR, MACI)Based on the default conﬁguration, we ﬁrst generated
an RSA key pair on the device using the default options
(i. e., we created general-keys; cf. Appendix C). Second,
we created a peer entry with the RSA public key and IP
address of our test initiator. Third and last, we conﬁgured
a policy that only IKEv1 and only PKE authentication is
allowed. Our test initiator is based on Scapy [8], a Python
library for network packet manipulation. With it, we can
create any IKE message and fully control all ﬁelds like
cookies, proposals, nonces, ciphertexts, etc.
Ciphertext cnI in Figure 4 is the target of our attack.
This ciphertext is sent with message m3 of an IKEv1
handshake. After sending an invalid ciphertext to our
Cisco router, no error message is sent back to the ini-
tiator. Instead, the router retransmits message m2 to the
initiator after one second has elapsed. If the router suc-
ceeds decrypting the message, m4 is sent immediately to
the initiator. This is clearly a Bleichenbacher oracle.
5.1 Testing the Oracle’s Strength
For testing PKCS #1 v1.5 compliance, after decrypting
cnI , the responder should check if the ﬁrst two bytes
of the plaintext are indeed 0x00 0x02, if the following
eight bytes are non-zero, and then search for the ﬁrst zero
byte. All data following this zero byte are considered the
decrypted message.
Our test device performs all these checks after de-
crypting cnI . As an edge case, Cisco’s implementation
also accepts a plaintext that entirely consists of padding,
i. e. where the zero byte separating padding and message
is the last byte of the plaintext. Furthermore, IOS ignores
cIDI and determines the public key to use for its response
based on the IP address of the initiator. One can even
omit cIDI when constructing m3; it does not have any ef-
fect on the Bleichenbacher oracle.
This makes the Cisco oracle a FFT oracle based on the
observations made by Bardou et al. [7]. The probability
to get a valid padded message for such an FFT oracle is
Pr(P|A) = 0.358 with Pr[A] ≈ 2−16 being the probability
that the ﬁrst two bytes are 0x0002 [7, 9]. For a 128-byte
RSA modulus, the probability Pr(P|A) can be computed
as follows:
Pr(P|A) = ( 255
256 )8 ∗ (1− ( 255
256 )118) ≈ 0.358
Based on the assumption made by Bleichenbacher we
would need 371,843 requests for a 1024-bit modulus
(128 bytes):
(2∗216+16∗128)
Pr(P|A)
= 371,843
However, Bleichenbacher made his heuristic approx-
imation based on the upper bound, not the mean value.
Furthermore, we implemented the optimized Bleichen-
bacher attack as proposed by Bardou et al. [7], thus, we
need fewer requests (247,283 on average) to mount the
decryption attack.
5.2 Performance Restrictions
Oracle Performance Restrictions.
In order to investi-
gate the performance restriction we used the debug logs
of Cisco IOS. There one can see that IKE handshakes
are processed by a state machine. This state machine
enforces some non-cryptographic boundary conditions,
which have impact to the performance of a Bleichen-
bacher attack against Responder B. For example, IOS
has a limit for concurrent SAs under negotiation of 900.
Unfortunately, Cisco’s implementation is not opti-
mized for throughput. From our observations, we assume
that all cryptographic calculations for IKE are done by
the device’s CPU despite it having a hardware acceler-
ator for cryptography. One can easily overload the de-
vice’s CPU for several seconds with a standard PC burst-
ing handshake messages, even with the default limit for
concurrent handshakes. Moreover, even if the CPU load
is kept below 100 %, we nevertheless observed packet
loss. With 1024-bit RSA keys, our test device is capable
of handling only 850 Bleichenbacher requests per sec-
ond on average. We also saw signiﬁcant CPU load after
around 64,000 Bleichenbacher oracle requests, possibly
caused by a memory limitation of our test device. For
other devices or more powerful ones, this is probably not
a limitation. Another possible reason is that hash colli-
sions occur when the device needs to store many cookie-
value pairs in its SA database due to the high amount of
IKE handshakes during the attack.
Attack Performance Restrictions. For an attack, Re-
sponder A has to be held waiting. Here, a limitation in
IKEv1 is the quick mode timer.
It is started after re-
ceiving the ﬁrst handshake message. If the quick mode
handshake (i. e. phase 2 of the IKE handshake) is not
completed after 75 seconds, this timer cancels the hand-
shake deleting all ephemeral values like the cookie cR,
the nonce nR, and the DH secret y.
Furthermore,
the state machine maintains an error
counter with a ﬁxed limit of ﬁve. Every time an er-
roneous message is received or the device retransmits
a message during Phase 1, the counter is incremented.
Retransmissions happen every ten seconds if no mes-
sage was received during that time, which we refer to as
SA timeouts. After a ﬁfth retransmission of any Phase 1
packet, IOS waits one last time for ten seconds before
canceling the handshake. This translates to a maximum
of 60 seconds between two messages sent from the peer.
574    27th USENIX Security Symposium
USENIX Association
For an attack, the attackers require the victim’s DHKE
share that is sent with message m3 or m4, depending on
the role the attackers play. If the attackers play the role of
an initiator, a Bleichenbacher attack has to be successful
within the maximum of 60 seconds between messages
m4 and m5. If the attackers play the role of a responder,
a few seconds can be gained by delaying message m4
slightly below ten seconds so that no retransmission is
triggered.
In Cisco’s IKEv2 implementation, timers are more re-
laxed. Here, an attack can take up to 240 seconds until a
timeout occurs.
6 Bleichenbacher Oracles in implementa-
tions by Clavister & ZyXEL
Clavister cOS and the ﬁrmware of ZyXEL ZyWALL
USGs do not ofﬁcially support the PKE authentication
mode. It is not documented in their manuals and the web
and command line interfaces do not offer any conﬁgu-
ration option for it. Nevertheless, both implementations
responded to handshake proposals with PKE authentica-
tion in our tests. For these, we used a virtual Clavister
cOS Core in version 12.00.06 and a ZyXEL ZyWALL
USG 100 running ﬁrmware version 3.30 (AQQ.7).
For PKE authentication, both implementations use the
key pair that is conﬁgured for IKEv1 authentication with
signatures. Both implementations show the same behav-
ior regarding the handling of IKEv1 (e. g. both respond
with identical error messages).
PKE authentication with Clavister and ZyXEL is non-
functional since one cannot conﬁgure public keys for
peers. Therefore, we always expect an error notiﬁca-
tion after sending message m3. When sending an in-
valid ciphertext cnI with message m3, we receive an error
message containing only 16 seemingly random bytes. A
valid cnI instead triggers an error message containing the
string “Data length too large for private key to decrypt”.
While the error message itself is misleading (the cipher-
text can in fact be decrypted by the private key), the dif-
ference in the error messages is clearly a Bleichenbacher
oracle.
Clavister and ZyXEL perform the same checks as
Cisco. Therefore, the strength of the oracle and the esti-
mated amount of messages is identical to the Cisco case.
We did not evaluate the performance of an attack against
these oracles.
7 Bleichenbacher Oracle in Huawei Seco-
space USG2000 series
We identiﬁed Huawei as another large network equip-
ment supplier who offers the RPKE mode with cer-
Figure 8: IKEv1 in Phase 1 using main mode with RPKE
based authentication. Differences to Figure 4 are high-
lighted.
tain devices such as their Secospace USG2000 se-
ries [18].
For our tests, we used a Huawei Sec-
ospace USG2205 BSR ﬁrewall running ﬁrmware version
V300R001C10SPC700.
The steps for setting up an IPsec conﬁguration are very
similar to Cisco. We started with the default conﬁgura-
tion and generated an RSA key pair. Importing the RSA
public key of our Scapy based test initiator turned out
to be a little more complicated since the required data
format is non-standard. Similar to Cisco, we conﬁgured
a proposal, a policy, and a policy-template so that only
IKEv1 with RPKE authentication is allowed.
Again, ciphertext cnI (cf. Figure 8) is the target of our
attack. After sending an invalid ciphertext with m3 to the
device, the ﬁrewall does not send an error message back
to the initiator.
In contrast to Cisco’s implementation,
there are no retransmissions. If the ﬁrewall succeeds in
processing the message, m4 is sent to the initiator. This
is also clearly a Bleichenbacher oracle.
7.1 Testing the Oracle’s Strength
Huawei’s ﬁrewall also performs all PKCS #1 v1.5 checks
mentioned in subsection 5.1 after decrypting cnI . There-
fore, Huawei’s oracle is similar to the FFT oracle.
However, the constraints of the RPKE mode reduce
the strength of the oracle. If all PKCS #1 v1.5 checks
were successful, the ephemeral key keI is derived and
used to decrypt the identity payload cIDI in order to de-
termine the public key to use for its response. Unfortu-
nately, during a Bleichenbacher attack the attackers do
USENIX Association
27th USENIX Security Symposium    575
Initiator(IDI,skI,pkI)Responder(IDR,skR,pkR)m1:=(proposals)−cI,0,m1−−−−−−−−−−−→m2:=(proposal)←−cI,cR,m2−−−−−−−−−−−cnI:=EncpkR(nI)keI:=PRFnI(cI)cidI:=EnckeI(IDI)m3:=(gx,cidI,cnI)−cI,cR,m3−−−−−−−−−−−→cnR:=EncpkI(nR)keR:=PRFnR(cR)cidR:=EnckeR(IDR)m4:=(gy,cidR,cnR)←−cI,cR,m4−−−−−−−−−−−k:=PRFh(nI,nR)(cI,cR)Derivekd,ka,kefromkk:=PRFh(nI,nR)(cI,cR)Derivekd,ka,kefromkComputeMACIusingkm5:=Encke(MACI)−cI,cR,m5−−−−−−−−−−−→ComputeMACRusingkm6:=Encke(MACR)←−cI,cR,m6−−−−−−−−−−−ComputeMACRandcomparetom6ComputeMACIandcomparetom5not know which keI is derived. There is no way for at-
tackers to distinguish a failed PKCS #1 v1.5 check from
a failed decryption of cIDI . This reduces the probability
to get a Case 1 answer from Huawei by the factor 112
256.
Thus, Huawei’s Bleichenbacher oracle has an additional
false negative rate of 56.64 %, which is explained in more
detail in the next section. Consequently, we estimate
that a successful attack requires 371,843/(1−0.5664) =
857,571 requests.
7.2 Oracle Performance Restrictions
RFC 2409 deﬁnes an unusual padding for messages en-
crypted using symmetric algorithms: The message is
padded with zero bytes. The last padding byte contains
the number of zero bytes inserted. Padding is mandatory
even if this requires an additional block containing only
padding. Figure 9 gives examples of this padding.
Figure 9: The padding scheme for symmetric encryp-
tions deﬁned by RFC 2409.
Huawei’s implementation of this padding is odd:
There are no checks whether the padding bytes are in fact
zero-bytes. The implementation only reads the last byte
and removes the given number of bytes together with the
padding length byte. It does not verify whether the value
of the padding length byte is larger than the block length
of the negotiated algorithm. It only cancels processing
if the value of the padding length byte is larger than the
decrypted ciphertext or if the padding length byte is zero.
In contrast to Cisco, we observed that the Huawei de-
vice as responder thoroughly checks the identity payload
cIDI sent by the initiator. It has to be present, its length
has to be a multiple of the symmetric algorithm’s block
length, and the plaintext needs to be correctly padded
in terms of the checks described above. If the plaintext
identity IDI after removing the padding is 121 or less
bytes in length, the device however ignores the identity
value and continues the handshake using the initiator’s
conﬁgured public key based on its IP address. If IDI is
122 bytes long, the device crashes and reboots, which
takes several minutes. If IDI is 123 to 255 bytes long,
IDI is used to determine the public key of the initiator. If
IDI is more than 256 bytes long, the Huawei device also
crashes and reboots.
This complicates a Bleichenbacher attack scenario:
Even if the attackers hit a PKCS #1 v1.5 compliant mes-
sage, the decrypted value (i. e. what the device treats as
the nonce nI) is unknown to them. This value is then used
to derive the key keI, which in turn is used to decrypt
cIDI supplied by the attackers. Since the attackers do not
have keI, they cannot construct any cIDI that decrypts to a
meaningful IDI. During our tests, we sent random bytes
for cIDI to our test device. However, even without inﬂu-
ence on IDI, the attackers can adjust the length of cIDI .
Here, the attackers have to deal with two contradicting
restrictions: On the one hand, it is necessary to keep the
length of IDI below 122 bytes to prevent both a crash and
the evaluation of the value of IDI. On the other hand,
no assumptions on the padding length byte can be made.
The longer the length of cIDI , the higher the possibility
that the value of the padding length byte is below the
plaintext length so that no padding error occurs.
Regardless of the length of cIDI , the padding length
byte can only decrypt to one of 256 possible values. Tak-
ing into account that the length of cIDI has to be a mul-
tiple of 16 (the block length of AES), the attackers have
to choose between a cIDI with a length of 128 bytes and
one with 112 bytes. For 128 bytes, all padding length
byte values above 121 and zero will make the device not
respond, either due to a padding error, an evaluation of
IDI, or a crash. This way, the Bleichenbacher oracle has
an additional false negative rate of 47.66 %.