We cover how to write native code securely in Chapter 13.
Heap Buffer Overflows
Standard heap overflow bugs are essentially analogous to stack-based overflows in their nature, except that they
relate to heap memory corruption, as the name suggests. Exploitation of heap overflows varies quite
significantly for different memory allocators, but many exploitation techniques in the past and present involve
overwriting pointers and other important data past the end of the destination buffer.
As with stack overflows, many of the same APIs play a role in causing heap overflow bugs:
strcpy()
gets()
sprint()
strcat()
vsprintf()
scanf()
sscanf()
memcpy()
bcopy()
Hand-rolled parsing and copying loops may also lead to heap corruption if the code does insufficient bounds
checking (or none at all), as demonstrated here:
char destBuffer[32];
unsigned char *ptr = &attackerControlledBuf[0];
for(int i = 0; *ptr; ptr++, i++) {
destBuffer[i] = *ptr++;
}
You can recognize heap memory use by an app calling into the following APIs:
HeapAlloc()
HeapReAlloc()
malloc()
realloc()
NOTE
The preceding is not an exhaustive list of the APIs regular Windows offers for obtaining heap memory, but
other APIs such as LocalAlloc() are not available to Windows Store apps, including those targeted for
Windows Phone.
Two causes for heap overflows are common: unbounded copy operations, and integer overflows in size
calculations.
In the context of unbounded copies, here is a simple example of a heap overflow vulnerability:
unsigned char *ptr = (unsigned char *)malloc(32);
if(!ptr) {
OutputError("memory allocation failed\n");
return -1;
}
strcpy(ptr, attackerSuppliedData);
If attackerSuppliedData is data under the attacker’s control, and it may be larger than 32 bytes, then a heap
corruption bug exists.
Or, consider code that blindly trusts a parsed-out length field without validating it, due to bad parser design:
unsigned char *buf = (unsigned char *)malloc(32);
[ ... ]
unsigned int len = ReadLengthFromBlob(attackerControlledData);
unsigned char *ptr = ReadPayloadPosition(attackerControlledData);
memcpy(destBuffer, ptr, len);
The second common case is when size calculations for a heap buffer are vulnerable to integer overflows. For
example, consider the following code, which takes a data length from the user, and then adds 10 to it (for
additional payload copying later), which may cause the resulting value to wrap back to 0, meaning only a very
small heap buffer is actually allocated:
unsigned int len = ParseLenFromBlob(dataBlob);
unsigned char *payload = GetPayloadPosition(dataBlob);
unsigned char *ptr = malloc(len + 10); // calculation can wrap to 0!
memcpy(ptr, payload, len);
If len was within 10 of UINT_MAX (0xffffffff), the size used in the malloc() call would have wrapped back to
zero and be a very small number. Obviously, the memcpy() call will then use the original value, in this case
overwriting well beyond the bounds of the allocated memory chunk at ptr.
We cover some basics on how to write native code securely in Chapter 13.
Other Integer-Handling Bugs
We already covered one common type of integer handling bug: integer overflows that can lead to heap or
corruption of other memory regions. Succinctly, memory corruption bugs resulting from integer overflows
usually occur when careless arithmetic is carried out and an integer variable’s value is incremented past its
maximum value, thereby becoming either negative (for signed integers) or wrapping back past zero (for
unsigned integers).
For example, consider the following code fragment:
unsigned int len = ReadLengthFromBlob(blob);
unsigned char *ptr = GetPayloadOffset(blob);
unsigned char *buf = malloc(len + 10);
memcpy(buf, ptr, len);
Such bugs are quite common in native code, so you should never trust lengths from attacker-controllable data
before first validating them for being safe and sane values. Writing arithmetic operations (and sometimes loops
when variables of different sizes are used) that results in integer overflows is all too easy; always write such
code cautiously to ensure integers do not overflow or wrap.
Other types of integer-handling bugs exist in addition to integer overflow of signed and unsigned integers (and
the short types). Among these are integer underflows and signedness errors.
Integer Underflows
Integer underflows work in reverse to integer overflow bugs; integer underflows occur when an integer is
decremented below zero.
Consider the following code, which takes a user-supplied integer and subtracts a value from it, and then uses the
resulting integer for a boundary check. The subtraction, in this hypothetical case, is for subtracting a header
length from a parsed-out size value.
#define HEADER_LEN 16
[ ... ]
unsigned char buf[512];
int len = GetLengthValueFromBlob(blob);
unsigned char *ptr = GetDataPtrFromBlob(blob);
if(len > sizeof(buf)) {
OutputError("len too large for buf!\n");
return -1;
}
len -= HEADER_LEN;
ptr += HEADER_LEN;
memcpy(buf, ptr, len);
The code retrieves a length (as a signed integer) from an attacker-supplied data blob, validates that the length is
no longer than 512, subtracts 16 from it, and then uses the length in a memcpy() call.
However, in the len -= HEADER_LEN arithmetic operation, len may be decremented below 0, giving a very large
negative integer, in signed representations. However, in unsigned representations, as used in the memcpy() call,
the value will be represented as a very large unsigned value, resulting in a stack buffer overflow beyond buf’s
bounds as memcpy() copies over a very large amount of data to buf. Again, as with overflows, you can avoid
situations like these by validating integers for safe values.
Integer overflows also affect unsigned integers as well, but when decremented below 0, instead of becoming
large negative values, the value becomes very large. When an unsigned integer is decremented below its
minimum value (0), the value wraps backwards. For example, assuming that an integer had 31 as its value, and
an application subtracted 32, from it, the value would become the integer’s largest value. In the context of an
unsigned 32-bit integer, 0 - 1 = 0xffffffff, or 4294967295, sometimes referred as UINT_MAX, as per its ANSI
macro name.
Signedness Errors
Signedness bugs tend to occur when an integer is used in both signed and unsigned contexts, and confusion
therefore results. For example, consider the following code:
char buffer[512];
int len = GetLenFromBlob(attackerControlledData);
char *ptr = GetPayloadPositionFromBlob(attackerControlledData);
if(len > sizeof(buffer)) {
OutputError("len is larger than buffer\n");
return -1;
}
memcpy(buffer, ptr, len);
The developer’s intentions are on point; len is checked for being larger than the size of buffer. However, if len is
negative, say -1, then the check will pass fine. However, when -1 is passed to memcpy(), it is interpreted as
0xffffffff (UINT_MAX), because memcpy()’s third parameter is an unsigned integer, inevitably resulting in
memory corruption beyond buf’s boundary. In this situation, a memory corruption bug exists because len is
being checked in a signed context, and then being used as an unsigned length.
Representing length values as unsigned integers generally makes more sense, and would fix the bug in this
hypothetical case. We discuss secure programming when dealing with integers in Chapter 13.
Format String Bugs
Format string functions accept a format string as a parameter, which describes to the API how the format
parameters should be interpreted. For example, the following code simply prints the string in buf to the
standard output:
char buf[] = "hello world";
printf("%s\n", buf);
The %s format specifier informs the printf() API that the proceeding parameter is a pointer to a string.
Besides printf(), other standard (and misusable) format string functions are:
wsprintf()
vsprintf()
sprint()
snprintf()
fprintf()
asprintf()
Attacker-controlled data should not be passed into a format string function as the format string itself, because
this may allow the attacker to manipulate and corrupt memory in the target app. So, for example, the following
represents a bug,
printf(attackerControlledData);
as does:
snprintf(buffer, sizeof(buffer)-1, attackerControlledData);
For exploitation, attackers may use the %n format specifier, which instructs (many) format string APIs to write
the currently written number of bytes to a specified address. With careful use of other format specifiers to
control the number of written bytes, %n can be used to write arbitrary bytes to arbitrary memory locations,
therefore allowing for controlled memory corruption exploits. As a consequence, any passing of attacker-
controlled data to a format string function as the format string itself should be considered a serious security
vulnerability.
Avoiding format string bugs is easily done. Always use code like this,
printf("%s", buf);
. . .and never like this:
printf(buf);
We reiterate later that developers unfamiliar with classic native code bugs should review secure coding
guidelines, and we provide links to resources to this end in the Chapter 13 section, “Avoiding Native Code Bugs”.
Array Indexing Errors
Array indexing errors occur when an attacker-supplied value is used as the index to an array, either on read or
write operations. Such bugs are also sometimes called read access violations (AVs) and write AVs, because they
have the potential to cause access violations if unmapped memory addresses are written to or read from.
For example, the following is an example of a read indexing error,
int someValue = buf[attackerControlledValue];
. . .and a write index error:
someBuffer[attackerControlledValue] = 0;
In general, write index errors tend to be more serious, because they often allow controlled memory corruption
by writing to favorable locations beyond the bounds of the intended buffer. They could be considered a type of
buffer overflow.
Read access violations have the potential to be used for memory disclosure in many cases. Both read and write
bugs such as these can also be used to cause denial-of-service conditions via deliberate page faults by writing to
or reading from unmapped memory addresses.
Before attacker-controlled values are used as indexes to arrays they should be strictly validated to ensure that
the value lies within the length of the allocated memory chunk.
Also take negative values into account, because writes to an array using a negative index may be considered a
type of buffer underflow. We reiterate this in Chapter 13.
Denial-of-Service Bugs
Denial-of-Service (DoS) bugs are less of a concern in mobile applications than in server apps, for example, but
prevention of DoS bugs is good practice nonetheless.
Two general classes of DoS bugs are memory consumption bugs, and access violation bugs. We mentioned
access violation bugs in the previous section, wherein crashes due to unmapped memory reads could crash the
offending process.
Other access violation bugs are caused by NULL pointer dereferences. These bugs can happen in a number of
failure cases, but a common one is when a memory allocation fails and the resulting NULL pointer is not
checked and is dereferenced anyway. For example, consider a malloc() call that fails:
unsigned char *ptr =
(unsigned char *) malloc(largeAttackerControlledValue); // can return NULL
If ptr is not checked before it is dereferenced, a NULL pointer AV will happen, and the process will (most likely)
crash. In general, check returned pointers from APIs to ensure that NULL pointer dereferences don’t cause the
app to crash.
When you’re allocating memory based on attacker-controlled values, we recommend carrying out sanity checks.
Failure to do this may result in large chunks of memory being allocated, and application performance being
degraded severely. For example, we would recommend against:
unsigned char *ptr = (unsigned char *) malloc(largeAttackerControlledValue);
Instead, code should check whether largeAttackerControlledValue is a sensible value before allowing the
memory allocation to take place.
Unsafe C# Code
Though not strictly native code, C# allows code to be designated as unsafe using the unsafe and fixed keywords.
In such code, pointers may be used, and security issues can arise in a fashion similar to many native software
vulnerabilities. However, at the time of writing, Windows Phone 8 and 8.1 do not support the use of unsafe C#
code, and use of it will result in your app being rejected during the store vetting process.
Summary
When working to identify implementation issues in Windows Phone applications, the following bullet points
may be useful as a general checklist. The checklist is composed as a series of questions; answering “yes” to a
question represents a potential security issue that should be further investigated to discover the real-world
impact:
Are HTTP cache and cookies left undeleted when they’re no longer needed, thus representing a potential
sensitive information leak (i.e., in the app’s INetCache and INetCookies directories)?
Does the app store sensitive data in files in cleartext (i.e., unencrypted)?
Does the app store sensitive data in any unencrypted databases?
Are any insecure sources of randomness being used to generate security-sensitive data such as cryptographic
keys?
Does the app encrypt any sensitive data using bad cryptographic practices?
Is there any native code misuse that could lead to classic native code vulnerabilities, such as memory
corruption?
CHAPTER 13
Writing Secure Windows Phone Applications
Having covered the security assessment of Windows Phone applications in some detail, this chapter discusses
important coding practices for writing secure apps in the first place. Where appropriate, we’ve given code
examples for use in apps that generally need to be “secure.”
General Security Design Considerations
You should consider several points when designing and analyzing the security of an app. These can be
summarized as follows:
Entry point analysis—What are the various ways, such as Interprocess Communications (IPC) endpoints
(file handlers, protocol handlers), web communications, and downloading and parsing files, an attacker
could push data into your app?
Data validation—Does your app validate data before using it in potentially dangerous ways, or does it
simply trust it? Try to make as few assumptions about data integrity and safety as possible.
Data storage and handling—Does your app handle sensitive data? Does it store it? Sensitive data should
not be stored in the clear, but should instead be encrypted using a sensible crypto algorithm choice, secure
key generation, and cryptographic APIs.
Considering these general questions should make analyzing your app’s security and identifying areas that may
require attention or further analysis easier to do.
Storing and Encrypting Data Securely
When applications deal with sensitive data and need to store it for later use (or transmit it across a network),
storing this data securely, using tried-and-tested crypto algorithms that are widely accepted as being secure, is
important. The following subsections cover secure file storage and secure database storage, and we give
examples of how we recommend applying encryption to data being stored in databases and flat files.
Safe Encryption Ciphers and Modes
For storing data (or transmitting it), we recommend the use of AES-128 (Advanced Encryption Standard) at
minimum (though preferably AES-256), not in ECB mode. CBC mode is a sensible choice.
We also advise against using ciphers such as Data Encryption Standard (DES); sticking to the (at the time of
writing) industry-standard AES algorithm is sensible and recommended, and being required to use anything else
is rare.
Hard-coded IVs should not be used with CBC; IVs are not supposed to be secret, but they should be a unique,
per-app instance.
Key Generation and Management
Cryptographic keys must be generated securely. This means that non- cryptographically secure APIs such as
System.Random should not be used. For generating securely random keys, see the later section in this chapter,
“Secure Random Number Generation.”
To generate keys based on a user-supplied secret, that is, a password, a recommendable choice is Password-
Based Key Derivation Function 2 (PBKDF2). Basically, PBKDF2 generates a key from a password, which may be
considered secure as long as the password is of sufficient length and the iteration count used is sufficiently high
(10,000, for example).
.NET provides an API for PBKDF2; namely Rfc2898DeriveBytes, for which you can find the full documentation
at the following URL: http://msdn.microsoft.com/en-
us/library/system.security.cryptography.rfc2898derivebytes%28v=vs.110%29.aspx.
After keys have been generated, they should not be stored to the app’s local storage, because the compromise of
a device (with or without full disk encryption) could result in disclosure of the crypto key. If the crypto keys are
generated randomly and stored to the device, they should be “wrapped” (that is, encrypted) with a PBKDF2-
generated key derived from a user-known secret. If keys are generated directly from PBKDF2, no need exists to
store them.
Encrypting Files
As we said in “Safe Encryption Ciphers and Modes”, above, when applications need to store sensitive data to the
device as files, such data should be stored in encrypted form; we recommend using AES-256 in CBC mode.
The following code shows sample code for AES-256 CBC encrypt() and decrypt() functions, using the
AesManaged API:
public byte[] encrypt(byte[] dataIn, byte[] cryptoKey, byte[] iv)