each server can simply run the code provided by the client on its
local data, sending the output directly to the client.
Correlated randomness generation. HSS provides a method for non-
interactively generating sources of correlated randomness that can
be used to speed up classical protocols for secure two-party com-
putation. Concretely, following a setup phase, in which the parties
exchange HSS shares of random inputs, the parties can locally ex-
pand these shares (without any communication) into useful forms
of correlated randomness. As discussed above, the non-interactive
nature of the correlated randomness generation is useful for hiding
the identities of the parties who intend to perform secure compu-
tation, as well as the time and the size of the computation being
performed. The useful correlations we consider include bilinear
correlations (which capture “Beaver triples” as a special case) and
truth-table correlations. We also study the question of compressing
the communication in the setup phase by using local PRGs and
present different approaches for improving its asymptotic com-
putational complexity. However, despite our improvements, this
PRG-based compression is still too slow to be realized with good
concrete running time using our current implementation of group-
based HSS.
For all applications, we discuss the applicability of our general
optimization techniques, and additionally discuss specialized opti-
mization methods that target specific applications.
1.2 Related work
The first study of secret sharing homomorphisms is due to Be-
naloh [8], who presented constructions and applications of addi-
tively homomorphic secret sharing schemes.
Most closely relevant to the notion of HSS considered here is the
notion of function secret sharing (FSS) [10], which can be viewed
as a dual version of HSS. Instead of evaluating a given function
on a secret-shared input, FSS considers the goal of evaluating a
secret-shared function on a given input. For simple function classes,
such as point functions, very efficient FSS constructions that rely
only on one-way functions are known [10, 12]. However, these
constructions cannot be applied to more complex functions as the
ones we consider here except via a brute-force approach that scales
exponentially with the input length. Moreover, current efficient
FSS techniques do not apply at all to computations that involve
inputs from two or more clients, which is the case for some of the
applications considered in this work.
2 PRELIMINARIES
2.1 Homomorphic Secret Sharing
We consider homomorphic secret sharing (HSS) as introduced
in [11]. By default, in this work, the term HSS refers to a public-key
variant of HSS (known as DEHE in [11]), with a Las Vegas correct-
ness guarantee. To enable some of the optimizations we consider,
we use here a slight variation of the definition from [13] that allows
for an output to be computed even when one of the two parties
suspects an error might occur.
Definition 2.1 (Homomorphic Secret Sharing). A (2-party, public-
key, Las Vegas δ-failure) Homomorphic Secret Sharing (HSS) scheme
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2107for a class of programs P consists of algorithms (Gen, Enc, Eval)
with the following syntax:
• Gen(1λ ): On input a security parameter 1λ, the key genera-
tion algorithm outputs a public key pk and a pair of evalua-
tion keys (ek0, ek1).
• Enc(pk, x ): Given public key pk and secret input value x ∈
{0, 1}, the encryption algorithm outputs a ciphertext ct. We
assume the input length n is included in ct.
• Eval(b, ekb , (ct1, . . . , ctn ), P, δ, β ): On input party index b ∈
{0, 1}, evaluation key ekb, vector of n ciphertexts, a program
P ∈ P with n input bits and m output bits, failure probability
bound δ > 0, and an integer β ≥ 2, the homomorphic eval-
uation algorithm outputs yb ∈ Zm
, constituting party b’s
share of an output y ∈ {0, 1}m, as well as a confidence flag
γb ∈ {⊥,⊤} to indicate full confidence (⊤) or a possibility of
failure (⊥). When β is omitted it is understood to be β = 2.
The algorithms Gen, Enc are PPT algorithms, whereas Eval can
run in time polynomial in its input length and in 1/δ. The algo-
rithms (Gen, Enc, Eval) should satisfy the following correctness
and security requirements:
• Correctness: For every polynomial p there is a negligible
ν such that for every positive integer λ, input x ∈ {0, 1}n,
program P ∈ P with input length n, failure bound δ > 0 and
integer β ≥ 2, where |P|, 1/δ ≤ p(λ), we have:
Pr[(γ0 = ⊥) ∧ (γ1 = ⊥)] ≤ δ + ν (λ),
β
and
Pr[((γ0 = ⊤) ∨ (γ1 = ⊤)) ∧ y0 + y1 (cid:44) P (x1, . . . , xn )] ≤ ν (λ),
where probability is taken over
(pk, (ek0, ek1)) ← Gen(1λ ); cti ← Enc(pk, xi ), i ∈ [n];
(yb , γb ) ← Eval(b, ekb , (ct1, . . . , ctn ), P, δ, β ), b ∈ {0, 1},
and where addition of y0 and y1 is carried out modulo β.
• Security: For b = 0, 1, the distribution ensembles Cb (λ, 0)
and Cb (λ, 1) are computationally indistinguishable, where
Cb (λ, x ) is obtained by sampling (pk, (ek0, ek1)) ← Gen(1λ ),
sampling ctx ← Enc(pk, x ), and outputting (pk, ekb , ctx ).
We implicitly assume each execution of Eval to take an additional
nonce input, which enables different invocations to have (pseudo)-
independent failure probabilities. (See [11] for discussion.)
Remark 2.2 (Variant HSS Notions). Within applications, we
additionally consider the following HSS variants:
(1) Secret-Key HSS: a weaker notion where the role of the public key
pk is replaced by a secret key sk, and where security requires
indistinguishability of (ekb , Enc(sk, x1) . . . Enc(sk, xn )) from
(ekb , Enc(sk, x′
n )) for any pair of inputs x =
(x1, . . . , xn ) and x′ = (x′
n ). Here we also allow Enc to
produce a pair of shares of x, where each share is sent to one
of the parties. This variant provides better efficiency when all
inputs originate from a single client.
1) . . . Enc(sk, x′
1, . . . , x′
(2) Non-binary values: in some applications it is useful to evalu-
ate programs with non-binary inputs and outputs, typically
integers from a bounded range [0..M] or [−M..M]. The above
definition can be easily modified to capture this case.
2.2 Computational Models
The main HSS scheme we optimize and implement naturally ap-
plies to programs P in a computational model known as Restricted
Multiplication Straight-line (RMS) program [11, 20].
Definition 2.3 (RMS programs). An RMS program consists of a
magnitude bound 1M and an arbitrary sequence of the four follow-
ing instructions, sorted according to a unique identifier id:
• Load an input into memory: (id, ˆyj ← ˆxi ).
• Add values in memory: (id, ˆyk ← ˆyi + ˆyj ).
• Multiply memory value by input: (id, ˆyk ← ˆxi · ˆyj ).
• Output from memory, as Zβ element: (id, β, ˆOj ← ˆyi ).
If at any step of execution the size of a memory value exceeds the
bound M, the output of the program on the corresponding input is
defined to be ⊥. Otherwise the output is the sequence of ˆOj values
modulo β, sorted by id. We define the size (resp., multiplicative
size) of an RMS program P as the number of instructions (resp.,
multiplication and load input instructions).
RMS programs with M = 2 are powerful enough to efficiently
simulate boolean formulas, logarithmic-depth boolean circuits, and
deterministic branching programs (capturing logarithmic-space
computations) [11]. For concrete efficiency purposes, their ability to
perform arithmetic computations on larger inputs can also be useful.
We present an optimized simulation of formulas and branching
programs by RMS programs in Section 4.5.
3 OVERVIEW OF GROUP-BASED HSS
In this section we give a simplified overview of the HSS construction
from [11]. For efficiency reasons, we assume circular security of
ElGamal encryption with a 160-bit secret key. This assumption can
be replaced by standard DDH, but at a significant concrete cost.
3.1 Encoding Zq Elements
Let H be a prime order group, with a subgroup G of prime order
q. Let д denote a generator of G. For any x ∈ Zq, we consider the
following 3 types of two-party encodings:
Level 1: “Encryption.” For x ∈ Zq, we let [x] denote дx , and(cid:74)x(cid:75)c
denote ([r] , [r · c + x]) for a uniformly random r ∈ Zq, which
corresponds to an ElGamal encryption of x with a secret key c ∈ Zq.
(With short-exponent ElGamal, c is a 160-bit integer.) We assume
that c is represented in base B (B = 2 by default) as a sequence
of digits (ci )1≤i ≤s (where s = ⌈160/ log2 B⌉). We let [[[x]]]c denote
((cid:74)x(cid:75)c , ((cid:74)x · ci(cid:75)c )1≤i ≤s ). All level-1 encodings are known to both
parties.
Level 2: “Additive shares.” Let ⟨x⟩ denote a pair of shares x0, x1 ∈
party. We let⎷x⌄c denote (⟨x⟩ ,⟨x · c⟩) ∈ (Z2
Zq such that x0 = x1 + x, where each share is held by a different
2, namely each party
holds one share of ⟨x⟩ and one share of ⟨x · c⟩. Note that both
types of encodings are additively homomorphic over Zq, namely
given encodings of x and x′ the parties can locally compute a valid
encoding of x + x′.
Level 3: “Multiplicative shares.” Let {x} denote a pair of shares
x0, x1 ∈ G such that the difference between their discrete loga-
rithms is x. That is, x0 = x1 · дx .
q )
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA21083.2 Operations on Encodings
We manipulate the above encodings via the following two types of
operations, performed locally by the two parties:
(1) Pair((cid:74)x(cid:75)c ,⎷y⌄c ) (cid:55)→ (cid:8)xy(cid:9). This pairing operation exploits
the fact that [a] and ⟨b⟩ can be locally converted to {ab} via
exponentiation.
(2) Convert({z} , δ ) (cid:55)→ ⟨z⟩, with failure bound δ. The implemen-
tation of Convert is also given an upper bound M on the
“payload” z (M = 1 by default), and its expected running time
grows linearly with M/δ. We omit M from the following
notation.
The Convert algorithm works as follows. Each party, on input
h ∈ G, outputs the minimal integer i ≥ 0 such that h · дi is “dis-
tinguished,” where roughly a δ-fraction of the group elements are
distinguished. Distinguished elements were picked in [11] by ap-
plying a pseudo-random function to the description of the group
element. An optimized conversion procedure from [13] (using spe-
cial “conversion-friendly” choices of G ⊂ Z∗
p and д = 2) applies
the heuristic of defining a group element to be distinguished if its
bit-representation starts with d ≈ log2 (M/δ ) leading 0’s. Note that
this heuristic only affects the running time and not security, and
thus it can be validated empirically. Correctness of Convert holds if
no group element between the two shares {z} ∈ G2 is distinguished.
Finally, Convert signals that there is a potential failure if there is
a distinguished point in the “danger zone.” Namely, Party b = 0
(resp., b = 1) raises a potential error flag if h · д−i (resp., h · дi−1) is
distinguished for some i = 1, . . . , M. Note that we used the notation
M both for the payload upper bound in Convert and for the bound
on the memory values in the definition of RMS programs (Defi-
nition 2.3). In the default case of RMS program evaluation using
base 2 for the secret key c in level 1 encodings, both values are
indeed the same; however, when using larger basis, they will differ.
To avoid confusion, in the following we will denote by MRMS the
bound on the memory values, and by M the bound on the payload.
Let PairConv be an algorithm that sequentially executes Pair
and Convert: PairConv((cid:74)x(cid:75)c ,⎷y⌄c , δ ) (cid:55)→(cid:10)xy(cid:11), with error δ. We
• Functionality: Mult([[[x]]]c ,⎷y⌄c , δ ) (cid:55)→⎷xy⌄c
– Let(cid:10)xy(cid:11) ← PairConv((cid:74)x(cid:75) ,⎷y⌄c , δ′) for δ′ = δ /(s + 1).
– Parse [[[x]]]c as ((cid:74)x(cid:75)c , ((cid:74)x · ci(cid:75)c )1≤i ≤s ).
(cid:11) ← PairConv((cid:74)xci(cid:75)c ,⎷y⌄c , δ′).
– For i = 1 to s, let(cid:10)xy · ci
– Let(cid:10)xy · c(cid:11) ←(cid:80)s
– Return ((cid:10)xy(cid:11) ,(cid:10)xy · c(cid:11)).
i =1 Bi−1(cid:10)xy · ci
denote by Mult the following algorithm:
(cid:11).
3.3 HSS for RMS programs
Given the above operations, an HSS for RMS programs is obtained
as follows.
• Key generation: Gen(1λ ) picks a group G of order q with
λ bits of security, generator д, and secret ElGamal key c ∈
Zq. It output pk = (G, д, h,(cid:74)ci(cid:75)c )1≤i ≤s, where h = дc, and
(ek0, ek1) ← ⟨c⟩, a random additive sharing of c.
• Encryption: Enc(pk, x ) uses the homomorphism of ElGamal
to compute and output [[[x]]]c.
• RMS program evaluation: For an RMS program P of multi-
plicative size S, the algorithm Eval(b, ekb , (ct1, . . . , ctn ), P,
δ, β ) processes the instructions of P, sorted according to
id, as follows. We describe the algorithm for both parties
b jointly, maintaining the invariant that whenever a mem-
ory variable ˆy is assigned a value y, the parties hold level-2
shares Y =⎷y⌄c.
– ˆyj ← ˆxi: Let Yj ← Mult([[[xi]]]c ,⎷1⌄c , δ /S ), where⎷1⌄c
– (β, ˆOj ← ˆyi ): Parse Yi as ((cid:10)yi
(cid:11) ,(cid:10)yi · c(cid:11)) and output Oj =
(cid:11) + (r , r ) mod β for a fresh (pseudo-)random r ∈ Zq.
(cid:10)yi
is locally computed from (ek0, ek1) using ⟨1⟩ = (1, 0).
– ˆyk ← ˆyi + ˆyj: Let Yk ← Yi + Yj.
– ˆyk ← ˆxi · ˆyj: Let Yk ← Mult([[[xi]]]c , Yj , δ /S ).
The confidence flag is ⊥ if any of the invocations of Convert
raises a potential error flag, otherwise it is ⊤.
The pseudorandomness required for generating the outputs and for
Convert is obtained by using a common pseudorandom function
key that is (implicitly) given as part of each ekb, and using a unique
nonce as an input to ensure that different invocations of Eval are
indistinguishable from being independent.
without invoking Mult, by letting Enc compute Yj ←⎷xi⌄c and
The secret-key HSS variant is simpler in two ways. First, Enc can
directly generate [[[x]]]c from the secret key c. More significantly,
an input loading instruction ˆyj ← ˆxi can be processed directly,
distribute Yj as shares to the two parties. Note that in this variant,
unlike our main public key variant, the size of the secret information
distributed to each party grows with the input size.
Performance. The cost of each RMS multiplication or input load-
ing is dominated by s + 1 invocations of PairConv, where each
invocation consists of Pair and Convert. The cost of Pair is domi-
nated by one group exponentiation with roughly 200-bit exponent.
(The basis of the exponent depends only on the key and the in-
put, which allows for optimized fixed-basis exponentiations when
the same input is involved in many RMS multiplications.) When
the RMS multiplications apply to 0/1 values (this is the case when
evaluating branching programs), the cost of Convert is linear in
BS/δ, where the B factor comes from the fact that the payload z of
Convert is bounded by the size of the basis. When δ is sufficiently
small, the overall cost is dominated by the O (BS
s/δ ) conversion
steps, where each step consists of multiplying by д and testing
whether the result is a distinguished group element.
2
4 OPTIMIZATIONS
4.1 Optimizing Share Conversion
In [13], the share conversion algorithm Convert (see Section 3.2)
was heuristically improved by changing the way in which dis-
tinguished group elements are defined. Instead of independently
deciding whether a group element is distinguished by applying a
PRF to its description, as originally proposed in [11], the method
proposed in [13] considers the sequence stream of most significant
bits of the group elements h, hд, hд
, . . ., where h is the given
starting point, and looks for the first occurrence of the pattern 0d
in stream.
The advantage of this approach is that stream can be computed
very efficiently for a suitable choice of “conversion-friendly” group.
Concretely, the groups proposed in [13] are of the form G ⊆ Z∗
p,
where p is close to a power of 2 and д = 2 is a generator. Combined
, hд
2
3
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2109with an efficient implementation of searching for the pattern 0d in
stream, a single conversion step can be implemented at an amor-
tized cost of less than one machine word operation per step. This