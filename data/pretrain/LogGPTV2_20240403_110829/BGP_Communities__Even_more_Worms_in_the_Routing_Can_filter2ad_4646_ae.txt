look undesirable at first, this can be highly beneficial for AS2, e.g.,
if R2 is in Hong Kong and the origin of p is in the US. AS2 in effect
forces AS1 to pay for expensive intercontinental transport. In this
case, the local pref community can be used to declare the undesired
path (from the view of AS2) a backup path. We leave the decision
on whether this is an attack or a smart way of reducing cost to the
informed reader.
5.3 Route Manipulation
Using communities it is not only possible to cause blackholing or
change traffic paths; but it is also possible to manipulate routes. In
particular, Figure 9 shows how this can be done at an IXP. IXPs
often offer community services via their route servers as value
added service to customers. One popular service is the ability to
tag routes with communities to signal to which peer a route should
be advertised, e.g., the community IXP:AS4 is used to selectively
advertise a route to IXP member AS4. Thus, if AS1 sends the route
with this prefix it can expect to receive traffic for p via the IXP for
AS4. Now, if an attacker, AS2, uses another community service of
the IXP, namely a community to signal that a prefix should not be
advertised to a peer, e.g., using the community 0:AS4, there is a
conflict. This conflict is resolved at the route server by applying the
8 Even though AS2 announces a route for p it may not receive much if any traffic if
the best route on most routers remains the one to the origin AS for p. If AS2 receives
any traffic for p it can loop it back to AS1.
rules for community-based services in a specific order. For some
IXPs this order as well as their route server configuration is publicly
available. We checked that at least for one IXP communities that are
used to łnot advertise a prefix to a peer ASž are handled before those
that are used to ładvertise to peer ASž. This causes the attacker of
Figure 9 to succeed in not advertising a route for prefix p to AS4.
5.4 Summary
Thus, we conclude that communities add even more worms to the
routing can. To check their realizability we review the above scenar-
ios and identify the following necessary and sufficient conditions:
Necessary condition: The above weaknesses of remotely trig-
gered community actions can, in principle, be used if communities
are propagated beyond a single AS and if the community service
is known.
Sufficient condition: For the above weaknesses to be triggered
a sufficient condition is that the attacker is able to advertise BGP
prefixes with the appropriate communities, respectively hijack
community tagged prefixes. Note, the propagation has to hold
for all ASes on the path from the attacker to the community
target.
We find, see Section 4, that the necessary conditions exist in the
wild since communities are commonly propagated beyond their
direct neighbors. Thus, we next identify sufficient conditions for
each scenario by first setting up a controlled experiment in the lab and
then showcasing at least one instance of each scenario in a controlled
experiment in the real Internet. Hereby, we explicitly address ethical
consideration, see Section 7.1.
6 TESTING THE FEASIBILITY
To better understand the feasibility of BGP community manipu-
lation, and to expose nuances in their practical application and
implementation, we performed a series of experiments within a
controlled testbed. We experimented using Cisco 7200 routers run-
ning IOS 15.2(4)S7 (released in 2015) and Juniper routers running
JunOS 12.1R1.9 (released in 2012). While this router hardware and
software may not reflect the hardware currently deployed in the In-
ternet, routers from these two vendors are heavily deployed. Thus,
experiments with these two vendors can help shed light on what
we might expect in the wild.
In the lab, we configured each of the scenarios from Section 5,
relying on available vendor documentation, e.g., [27] and pub-
lic documentation on community best practices, e.g., [56]. For
reproducible, we make our configurations publicly available at
https://www.cmand.org/caas/.
In addition to verifying necessary conditions for multi-hop com-
munity propagation, the laboratory experiments allow us to identify
sufficient conditions for each scenario. We summarize our findings
along three lines of insights, namely, i) propagation; ii) exploitation;
and iii) misconfiguration.
6.1 Community Propagation
A cornerstone of our investigation is the necessary condition that a
network path propagates BGP communities. As shown in Section 4,
287
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
F. Streibelt et al.
this condition frequently holds in practice; our controlled experi-
ments help explain why some paths propagate communities while
others do not.
Default behavior: While both Cisco and Juniper accept BGP
updates with communities attributes by default, only Juniper
propagates them by default. Cisco requires explicit per-peer or
group configuration; a behavior that persists in both legacy and
modern Cisco IOS implementations, including IOS XE. However,
since communities are often used to implement basic services one
can expect that, even on Cisco routers, community propagation
is typically enabled.
Adding communities: Both Cisco and JunOS provide config-
uration to add, subtract, or set communities to in-bound and
out-bound prefixes. More complex behaviors are possible with
regular expressions. In lieu of complex logic or error-prone ex-
pressions, we conjecture that some of the instances of community
propagation we observe are due to simple and expedient config-
urations that use additive behavior for unknown communities.
Number of communities: Adding communities may come with
the danger of exceeding the maximum number of communities
per prefix. However, this is unlikely for the following reason: the
BGP communities attribute is 4 bytes while the attribute length
field is 2 bytes. Thus, a BGP update can carry up to 216/24 = 16K
communities. Yet, Cisco only permits adding 32 distinct com-
munities to a prefix, in addition to the communities the prefix
arrived with. So, there is little risk in using the additive com-
munity propagation strategy, and no specific need to limit the
number of communities carried in an announcement because
most advertisements cross fewer than ten ASes [51].
6.2 Requirements for Exploitation
To exploit BGP communities we require the ability to trigger the
community-based services. This is limited by which communities
propagate along which route, as well as how routers resolve con-
flicting paths.
Community propagation: If a BGP router receives multiple
routes to the same prefix with different communities, the ones
of the best path are the only ones propagated. Thus, any at-
tack needing to propagate a specific community from A to B
must not only meet the necessary condition of A not stripping
communities, but must also be chosen by A as the best BGP path.
Best route selection: A target that implements policies based
on communities may receive announcements for the same prefix
from two different peers. If only one of the announcements
carries a community, BGP follows its standard route preference
algorithm (e.g., shortest AS_PATH). However, implementations
of RTBH may alter this preference (by setting a higher local
preference).
6.3 Potential to Exploit
Third, it is well-known that production router configurations are
complex and hard to validate [31]. We experienced, and thus ex-
pect, communities to further increase configuration complexity and,
therefore, contribute to the potential success of BGP community
misuse.
For example: Both Cisco and Juniper normalize communities
within their configurations, when displaying BGP prefixes, and
when sending BGP messagesÐby numerically sorting them. How-
ever, the order in which communities are evaluated depends on
the configuration. Rules are evaluated in a specified order that is
independent of the community value (and, indeed, non-community
based rules may be preceded or followed by community rules). The
difficulty of ensuring the correctness of such configurations, espe-
cially as a network grows and becomes more complex, is non-trivial.
For example, we note that even simple configurations can exhibit
unintended behaviors such as the snippet of Cisco router configu-
ration that appeared in a NANOG tutorial on RTBH [56]. Here, the
intent is to prevent hijacking by validating BGP announcements
against a list of accepted customer prefixes. However, the route-
map checks whether the prefix carries the blackhole community
before performing the validation, thereby enabling hijacking-based
attacks.
7 EXPERIMENTS IN THE WILD
To assess the real-world feasibility of the aforementioned scenarios
(Section 5), we perform a number of experiments on the live Inter-
net. Overall, we realize most of the scenarios in practice and gained
a deep understanding of the requirements for, and difficulty of, suc-
cessful attacks. For validation, we used a combination of (i) public
BGP looking glasses [33]; and (ii) RIPE Atlas active probes [16].
Table 3 summarizes our major findings.
7.1 Ethical Considerations
Due to the inherently disruptive nature of the scenarios, we ensured
prior coordination with, and permission of, the ASes and networks
involved. To avoid the potential for collateral damage, the addresses
and prefixes we use belong to networks that explicitly gave us
permission to use as part of our experiments, even for hijacking-
based attacks9.
Our goal is to demonstrate that the weaknesses we identify are
not merely theoretical, but present in the wild. For this, individual
examples derived from our network partners suffice ś we explic-
itly do not perform active Internet-wide experiments to assess the
overall vulnerability, as doing so would pose undue operational
and ethical risk.
We coordinate with the operators of three networks to target
them as attackees and, respectively, target prefixes that were given
to us as targets. We use two networks as attackers, i.e., prefix injec-
tion points, that were under our control: (i) the PEERING experi-
mental platform [15, 54], and (ii) an experimental research network.
Each of these points has its own ASN and can set arbitrary com-
munities on announcements. We strictly follow the Acceptable Use
Policy (AUP) [14] of PEERING and the research network; in partic-
ular, we only announce prefixes we control and with the correct
respective origin ASN (i.e., no hijacking from PEERING).
9Therefore, in some sense, these are not true hijacks as we had permission to send the
announcements from this origin.
288
BGP Communities
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
7.2 Propagation Checking
To direct our in vivo experiments ś again in consideration of both
risk minimization and feasibility ś we first infer community propa-
gation behavior along the path from the attacker to the target using
a benign community. We advertise a prefix tagged with the benign
community from both of our injection platforms: PEERING and the
research network. This benign community sets the high-order bits
to the ASN of our injection point, and uses low-order bits that we
have not observed in the wild. Our intent is to observe whether
ASes propagate unknown communities, rather than to trigger any
particular action.
We announce this prefix via a single physical location of the re-
search network with two upstream providers. We find that only one
of the upstream providers propagates communities. As observed
at the route collectors, we see that seven transit providers further
propagate the prefix with the community intact.
In contrast, the PEERING platform peers with hundreds of net-
works (via route servers at ten different points of presence), many
of which propagate communities. Thus, it provides better visibility
into the community propagation across a large number of paths,
as observed at the route collectors. Across all of our available BGP
views, we see more than 50 transit providers forwarding the prefix
with the community within ∼30 minutes of the initial announce-
ment. Within a day, more than 112 transit providers (out of the 434
transit and origin ASes in the paths, as observed by the collectors
in this study) were seen to propagate the prefix’s community.
7.3 Remotely Triggered Blackholing
Informed by the benign community propagation inference, we find a provider
that is two AS hops away from our injection point. While the benign com-
munity propagates to many ASes, we select a provider that both supports
RTBH and offers a public looking glass. Because the target AS is not a direct
peer of the attacker, this attack exploits the necessary conditions discussed
previously.
Experiment: Using the target’s blackhole community, we announce a
/24 sub-prefix of our allocation (non-hijack). Next, we announce a /24
from a block of address space we had permission to hijack. Because of
protections in place by the research network and its provider, the hijack
based attack required updating the IRR [8]. While IRR validation adds a
layer of defense for the hijack version of this attack, we note that many
other injection points do not validate and, even when they do, it is often
easy to circumvent [20, 58].
Validation: We examine the two prefixes (hijacked and non-hijacked)
using the target’s looking glass, before and after these announcements,
as well as by sending active data plane probes using Atlas before and
after (we ensure that the prefix contains an address that is responsive to
ICMP echo requests). Further, the immediate upstream of our injection
point provides a public looking glass enabling us to check community
propagation. For all RTBH experiments, we saw that the prefix and
community was accepted (target’s looking glass). Further, we observed
that the next-hop address for the prefix changed to a null interface
address as result to the blackhole community. At this point, the target
prefix was no longer reachable via the data plane tested using Atlas
probes.
Additional constraints: To manage routing table growth and fragmen-
tation, many providers enforce a limit on the maximum prefix mask
length of announcements they will accept. In contrast, blackhole an-
nouncements typically must be for a /24 or more specific prefix. Some
networks only accept blackhole announcements for a single host (a /32
prefix). Thus, an intermediate AS along the blackhole attack path must
accept and propagate small prefixes if it is not aware of the target’s
blackhole community.
Summary: RTBH is the easiest scenario to realize in the wild, indepen-
dent of hijacking. Unlike other attacks, we find that prefixes with black-
hole communities are accepted independent of AS relationships, and are
generally preferred even when the attacking AS path is longer.
At first blush, blackholing in conjunction with hijacking may seem
redundant as they both impact reachability to the attackee’s address space.
However, an important distinction is that hijacking only poisons those ASes
near the attacker, whereas a hijack-based blackholing attack drops traffic at
the destination AS, thereby denying service universally.
7.4 Traffic Steering
Again, we leverage community propagation paths to identify potential
targets for traffic steering attacks. An initially unexpected impediment is
the role AS relationships play in traffic steering, as discussed below. We,
therefore, relied on PEERING. We found a community propagating path from
PEERING, through an intermediate provider, to a target AS that implements
community-based steering. Since the intermediate provider is a customer
of the target AS, the target AS accepts and acts upon the communities.
Experiment: Using the PEERING testbed, we advertise a prefix allocated
to our experiment tagged first with the target’s community to prepend
the target’s AS twice, and then with the target’s community to lower
the local preference to a value defined to be łcustomer fallback.ž
Validation: We primarily relied on looking glasses along the attack path,
as well as public route collectors, to verify the steering attacks. Using
the looking glass, we verified that the path prepending community was
present at the target. We examined the prefix within public route collector
views both before and during the attack, and verified that not only did
the AS path change for many of the best paths received from peers, but
also that the best path for many peers contained AS prepending for the
target. Because of difficulties in finding an active Atlas monitor that uses
the target AS as the best path toward our prefix, we relied on the looking
glass within the target to verify the effect of the local pref community.
Prior to the attack, we observed the prefix in the looking glass with the
provider’s default local preference, whereas during the attack we see it
with the requested lower preference.
Additional constraints: Because of the AUP limitations on PEERING,
we only implement the non-hijacking based multi-hop steering attack.
Mounting the hijacking-based steering attack from the research network
only successfully influenced the direct upstream. This limitation is largely
due to our experimental environment, but does illustrate complications
with steering attacks. While we verified the ability to prepend the AS
path and local preference of our prefix within the immediate upstream
provider of the research network injection point, we did not trigger
similar behavior within an AS that was two hops away. The reason is that
business relationships, either customer, provider, or peer, impact whether
these communities are accepted and acted upon in practice (even when
they propagate). Providers typically have different policies depending on
the relationship type, and often only act on traffic steering communities
that arrive from a BGP customer (operators maintain customer groups in
their configuration files). Because the research network is a customer
of a top-tier network that is not a customer of any other AS, we did
not perform the multi-AS hop traffic steering attack from this injection
point.
Summary: Access to multiple injection points is highly beneficial to
orchestrate traffic steering attacks, and stub networks are preferred. On
the other hand, given the flattening of the Internet hierarchy, in many
cases, multiple levels of upstreams is no longer common. Thus, these
types of attacks may be hard to launch.
289
IMC ’18, October 31–November 2, 2018, Boston, MA, USA
F. Streibelt et al.
Table 3: Summary of our insights from our attacks in the wild.
Scenario
Hijack
Insights gained from running experiments in the wild
Difficulty
Blackholing
Traffic Steering
with local pref
no
yes
no
yes
Traffic Steering
no
with path prepending
yes
no
yes
Route Manipulation
Allowed prefix length is checked; activation of RTBH service is typically required.
Allowed prefix length is checked; origin validation was not always checked, thus the attack was
easier.
The business relationship of the attacker with the attackee or transit networks is checked ś the
flattening of the Internet makes this attacks hard to launch (providers only act on communities
set by their customers).
The business relationship of the attacker with the attackee or transit networks is checked ś the
flattening of the Internet makes this attacks hard to launch (providers only act on communities
set by their customers); IRR records for origin validation are typically checked, but the check can
be circumvented.