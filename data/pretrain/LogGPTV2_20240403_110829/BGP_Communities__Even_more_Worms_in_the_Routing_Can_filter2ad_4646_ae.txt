### 5.3 Route Manipulation

While initially appearing undesirable, this can be highly beneficial for AS2, particularly if R2 is in Hong Kong and the origin of p is in the US. In this scenario, AS2 effectively forces AS1 to pay for expensive intercontinental transport. The local preference community can be used to declare the undesired path (from AS2's perspective) as a backup path. Whether this is considered an attack or a strategic cost-saving measure is left to the informed reader.

Using BGP communities, it is not only possible to cause blackholing or change traffic paths but also to manipulate routes. Figure 9 illustrates how this can be done at an Internet Exchange Point (IXP). IXPs often offer community-based services via their route servers as a value-added service to customers. One such service allows tagging routes with communities to signal to which peer a route should be advertised. For example, the community IXP:AS4 can be used to selectively advertise a route to IXP member AS4. Thus, if AS1 sends the route with this prefix, it can expect to receive traffic for p via the IXP for AS4.

If an attacker, AS2, uses another community service of the IXP, such as a community to signal that a prefix should not be advertised to a peer (e.g., using the community 0:AS4), a conflict arises. This conflict is resolved at the route server by applying the rules for community-based services in a specific order. For some IXPs, this order and their route server configuration are publicly available. We verified that at least one IXP handles communities that signal "not to advertise a prefix to a peer AS" before those that signal "advertise to peer AS." This causes the attacker in Figure 9 to succeed in preventing the advertisement of a route for prefix p to AS4.

Even though AS2 announces a route for p, it may not receive much, if any, traffic if the best route on most routers remains the one to the origin AS for p. If AS2 receives any traffic for p, it can loop it back to AS1.

### 5.4 Summary

In conclusion, BGP communities add additional vulnerabilities to the routing system. To check their realizability, we review the above scenarios and identify the following necessary and sufficient conditions:

**Necessary Condition:** The weaknesses of remotely triggered community actions can, in principle, be exploited if communities are propagated beyond a single AS and if the community service is known.

**Sufficient Condition:** For these weaknesses to be triggered, a sufficient condition is that the attacker is able to advertise BGP prefixes with the appropriate communities or hijack community-tagged prefixes. Note that the propagation must hold for all ASes on the path from the attacker to the community target.

We find, as detailed in Section 4, that the necessary conditions exist in practice since communities are commonly propagated beyond their direct neighbors. Next, we identify sufficient conditions for each scenario by setting up controlled experiments in the lab and then showcasing at least one instance of each scenario in a controlled experiment in the real Internet. Ethical considerations are explicitly addressed, as detailed in Section 7.1.

### 6 Testing the Feasibility

To better understand the feasibility of BGP community manipulation and to expose nuances in their practical application and implementation, we performed a series of experiments within a controlled testbed. We used Cisco 7200 routers running IOS 15.2(4)S7 (released in 2015) and Juniper routers running JunOS 12.1R1.9 (released in 2012). While this router hardware and software may not reflect the current deployment, routers from these two vendors are widely deployed, making these experiments relevant.

In the lab, we configured each of the scenarios from Section 5, relying on available vendor documentation and public documentation on community best practices. For reproducibility, our configurations are publicly available at https://www.cmand.org/caas/.

The laboratory experiments allowed us to verify the necessary conditions for multi-hop community propagation and identify sufficient conditions for each scenario. Our findings are summarized along three lines of insights: i) propagation; ii) exploitation; and iii) misconfiguration.

### 6.1 Community Propagation

A key aspect of our investigation is the necessary condition that a network path propagates BGP communities. As shown in Section 4, this condition frequently holds in practice. Our controlled experiments help explain why some paths propagate communities while others do not.

**Default Behavior:** Both Cisco and Juniper accept BGP updates with community attributes by default, but only Juniper propagates them by default. Cisco requires explicit per-peer or group configuration, a behavior that persists in both legacy and modern Cisco IOS implementations, including IOS XE. However, since communities are often used to implement basic services, community propagation is typically enabled even on Cisco routers.

**Adding Communities:** Both Cisco and Juniper provide configuration options to add, subtract, or set communities to inbound and outbound prefixes. More complex behaviors are possible with regular expressions. We conjecture that some instances of community propagation are due to simple and expedient configurations that use additive behavior for unknown communities.

**Number of Communities:** Adding communities may come with the risk of exceeding the maximum number of communities per prefix. However, this is unlikely because the BGP communities attribute is 4 bytes, and the attribute length field is 2 bytes, allowing up to 16K communities per BGP update. Cisco only permits adding 32 distinct communities to a prefix, in addition to the communities the prefix arrived with. Thus, there is little risk in using the additive community propagation strategy, and no specific need to limit the number of communities carried in an announcement, as most advertisements cross fewer than ten ASes [51].

### 6.2 Requirements for Exploitation

To exploit BGP communities, the ability to trigger community-based services is required. This is limited by which communities propagate along which route and how routers resolve conflicting paths.

**Community Propagation:** If a BGP router receives multiple routes to the same prefix with different communities, only the communities of the best path are propagated. Therefore, any attack needing to propagate a specific community from A to B must not only meet the necessary condition of A not stripping communities but must also be chosen by A as the best BGP path.

**Best Route Selection:** A target implementing policies based on communities may receive announcements for the same prefix from two different peers. If only one of the announcements carries a community, BGP follows its standard route preference algorithm (e.g., shortest AS_PATH). However, implementations of RTBH may alter this preference by setting a higher local preference.

### 6.3 Potential to Exploit

It is well-known that production router configurations are complex and hard to validate [31]. We experienced, and thus expect, communities to further increase configuration complexity, contributing to the potential success of BGP community misuse.

For example, both Cisco and Juniper normalize communities within their configurations, when displaying BGP prefixes, and when sending BGP messages by numerically sorting them. However, the order in which communities are evaluated depends on the configuration. Rules are evaluated in a specified order independent of the community value (and, indeed, non-community-based rules may precede or follow community rules). Ensuring the correctness of such configurations, especially as a network grows and becomes more complex, is non-trivial. Even simple configurations can exhibit unintended behaviors, as seen in a snippet of Cisco router configuration in a NANOG tutorial on RTBH [56]. Here, the intent is to prevent hijacking by validating BGP announcements against a list of accepted customer prefixes. However, the route-map checks whether the prefix carries the blackhole community before performing the validation, thereby enabling hijacking-based attacks.

### 7 Experiments in the Wild

To assess the real-world feasibility of the aforementioned scenarios (Section 5), we performed several experiments on the live Internet. Overall, we realized most of the scenarios in practice and gained a deep understanding of the requirements and difficulties of successful attacks. For validation, we used a combination of (i) public BGP looking glasses [33] and (ii) RIPE Atlas active probes [16]. Table 3 summarizes our major findings.

### 7.1 Ethical Considerations

Due to the inherently disruptive nature of the scenarios, we ensured prior coordination and permission from the ASes and networks involved. To avoid potential collateral damage, the addresses and prefixes we used belong to networks that explicitly gave us permission to use as part of our experiments, even for hijacking-based attacks.

Our goal is to demonstrate that the identified weaknesses are not merely theoretical but present in the wild. For this, individual examples derived from our network partners suffice. We do not perform active Internet-wide experiments to assess overall vulnerability, as doing so would pose undue operational and ethical risks.

We coordinated with the operators of three networks to target them as attackees and, respectively, target prefixes that were given to us. We used two networks as attackers (prefix injection points) under our control: (i) the PEERING experimental platform [15, 54], and (ii) an experimental research network. Each of these points has its own ASN and can set arbitrary communities on announcements. We strictly followed the Acceptable Use Policy (AUP) [14] of PEERING and the research network, announcing only prefixes we control and with the correct respective origin ASN (i.e., no hijacking from PEERING).

### 7.2 Propagation Checking

To direct our in vivo experiments, we first inferred community propagation behavior along the path from the attacker to the target using a benign community. We advertised a prefix tagged with the benign community from both of our injection platforms: PEERING and the research network. This benign community sets the high-order bits to the ASN of our injection point and uses low-order bits not observed in the wild. Our intent was to observe whether ASes propagate unknown communities, rather than to trigger any particular action.

We announced this prefix via a single physical location of the research network with two upstream providers. Only one of the upstream providers propagated communities. As observed at the route collectors, seven transit providers further propagated the prefix with the community intact.

In contrast, the PEERING platform peers with hundreds of networks (via route servers at ten different points of presence), many of which propagate communities. This provided better visibility into community propagation across a large number of paths. Across all available BGP views, more than 50 transit providers forwarded the prefix with the community within ~30 minutes of the initial announcement. Within a day, more than 112 transit providers (out of the 434 transit and origin ASes in the paths, as observed by the collectors in this study) were seen to propagate the prefix’s community.

### 7.3 Remotely Triggered Blackholing

Informed by the benign community propagation inference, we found a provider two AS hops away from our injection point. While the benign community propagates to many ASes, we selected a provider that supports RTBH and offers a public looking glass. Because the target AS is not a direct peer of the attacker, this attack exploits the necessary conditions discussed previously.

**Experiment:** Using the target’s blackhole community, we announced a /24 sub-prefix of our allocation (non-hijack). Next, we announced a /24 from a block of address space we had permission to hijack. Due to protections in place by the research network and its provider, the hijack-based attack required updating the IRR [8]. While IRR validation adds a layer of defense for the hijack version of this attack, many other injection points do not validate, and even when they do, it is often easy to circumvent [20, 58].

**Validation:** We examined the two prefixes (hijacked and non-hijacked) using the target’s looking glass, before and after these announcements, and by sending active data plane probes using Atlas before and after (ensuring the prefix contains an address responsive to ICMP echo requests). Further, the immediate upstream of our injection point provides a public looking glass, enabling us to check community propagation. For all RTBH experiments, we saw that the prefix and community were accepted (target’s looking glass). Additionally, we observed that the next-hop address for the prefix changed to a null interface address as a result of the blackhole community. At this point, the target prefix was no longer reachable via the data plane tested using Atlas probes.

**Additional Constraints:** Many providers enforce a limit on the maximum prefix mask length of announcements they will accept to manage routing table growth and fragmentation. In contrast, blackhole announcements typically must be for a /24 or more specific prefix. Some networks only accept blackhole announcements for a single host (a /32 prefix). Thus, an intermediate AS along the blackhole attack path must accept and propagate small prefixes if it is not aware of the target’s blackhole community.

**Summary:** RTBH is the easiest scenario to realize in the wild, independent of hijacking. Unlike other attacks, we find that prefixes with blackhole communities are accepted independent of AS relationships and are generally preferred even when the attacking AS path is longer. Hijacking in conjunction with blackholing may seem redundant, but hijacking only poisons ASes near the attacker, whereas a hijack-based blackholing attack drops traffic at the destination AS, denying service universally.

### 7.4 Traffic Steering

We leveraged community propagation paths to identify potential targets for traffic steering attacks. An initially unexpected impediment is the role AS relationships play in traffic steering. We relied on PEERING and found a community-propagating path from PEERING, through an intermediate provider, to a target AS that implements community-based steering. Since the intermediate provider is a customer of the target AS, the target AS accepts and acts upon the communities.

**Experiment:** Using the PEERING testbed, we advertised a prefix allocated to our experiment, first with the target’s community to prepend the target’s AS twice, and then with the target’s community to lower the local preference to a value defined as "customer fallback."

**Validation:** We primarily relied on looking glasses along the attack path and public route collectors to verify the steering attacks. Using the looking glass, we verified that the path prepending community was present at the target. We examined the prefix within public route collector views both before and during the attack, verifying that the AS path changed for many of the best paths received from peers, and that the best path for many peers contained AS prepending for the target. Due to difficulties in finding an active Atlas monitor that uses the target AS as the best path toward our prefix, we relied on the looking glass within the target to verify the effect of the local pref community. Prior to the attack, we observed the prefix in the looking glass with the provider’s default local preference, whereas during the attack, we saw it with the requested lower preference.

**Additional Constraints:** Due to AUP limitations on PEERING, we only implemented the non-hijacking-based multi-hop steering attack. Mounting the hijacking-based steering attack from the research network only successfully influenced the direct upstream. This limitation is largely due to our experimental environment but illustrates complications with steering attacks. While we verified the ability to prepend the AS path and local preference of our prefix within the immediate upstream provider of the research network injection point, we did not trigger similar behavior within an AS that was two hops away. Business relationships, either customer, provider, or peer, impact whether these communities are accepted and acted upon in practice, even when they propagate. Providers typically have different policies depending on the relationship type and often only act on traffic steering communities that arrive from a BGP customer (operators maintain customer groups in their configuration files). Because the research network is a customer of a top-tier network that is not a customer of any other AS, we did not perform the multi-AS hop traffic steering attack from this injection point.

**Summary:** Access to multiple injection points is highly beneficial for orchestrating traffic steering attacks, and stub networks are preferred. Given the flattening of the Internet hierarchy, multiple levels of upstreams are no longer common, making these types of attacks harder to launch.

### Table 3: Summary of Insights from Attacks in the Wild

| Scenario             | Hijack | Insights Gained from Running Experiments in the Wild                                                                 |
|----------------------|--------|---------------------------------------------------------------------------------------------------------------------|
| Blackholing          | No     | Allowed prefix length is checked; activation of RTBH service is typically required.                                 |
| Traffic Steering     | Yes    | Allowed prefix length is checked; origin validation was not always checked, thus the attack was easier.              |
| Traffic Steering     | No     | The business relationship of the attacker with the attackee or transit networks is checked.                          |
|                      |        | The flattening of the Internet makes these attacks hard to launch (providers only act on communities set by their customers). |
| Route Manipulation   | Yes    | The business relationship of the attacker with the attackee or transit networks is checked.                          |
|                      |        | The flattening of the Internet makes these attacks hard to launch (providers only act on communities set by their customers); IRR records for origin validation are typically checked, but the check can be circumvented. |

This revised text aims to be more coherent, clear, and professional, ensuring that the information is presented in a structured and accessible manner.