ﬁcation does not impose sufﬁciently strict requirements for
EPUB reading systems. Of course, the responsibility to actually
conform their reading system to the speciﬁcation’s security
requirements remains that of the developers, however, hardened
requirements could eventually be consolidated into a quantiﬁed
compliance checker application.
Probably even more effective would be attenuating the
capabilities that are to be granted according to the EPUB
speciﬁcation. For instance, an EPUB is allowed to only refer
to audio, video and fonts through static XHTML and CSS, but
any resource is allowed to be retrieved by embedded scripts [2].
This can be useful for keeping the size of an EPUB small, since
the more sizable audio and video ﬁles can be fetched from an
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:25 UTC from IEEE Xplore.  Restrictions apply. 
1741
online service. However, access to resources from the local
ﬁlesystem, which in the current version of the speciﬁcation
is allowed, introduces a signiﬁcant threat, which does not
outweigh its limited beneﬁts. Furthermore, the ability to render
local resources implies the ability to determine their existence,
information that can be gained for various purposes among
which ﬁle system ﬁngerprinting. For this reason, we argue to
completely prohibit EPUBs from referring to resources that
reside on the user’s operating system. Moreover, as reference
to remote resources is very rare in EPUBs, we strongly believe
that this should require consent from the user, in order to
prevent any form of tracking.
Interestingly, our semi-automated evaluation revealed that
more than half of the JavaScript supporting reading systems
also support GeoLocation and UserMedia APIs, or opening
applications through URI handles, functionalities that are not
mentioned in the EPUB speciﬁcation. These functionalities
originate from the underlying browser engine, and are likely not
considered by the developer. Assuming the EPUB speciﬁcation
does not aspire to incorporate such browser functionalities, we
argue that the speciﬁcation should include a whitelist of APIs
that can be enabled.
Based on our real-world analysis of 9,000 EPUBs, we argue
that the discussed restrictions for the EPUB speciﬁcation would
have a minimal impact; none of the analyzed EPUBs required
local or remote resources to render correctly, and even the few
that embedded JavaScript remained functional when execution
was prevented. In that regard, we also propose to reconsider
the capability of unrestricted JavaScript execution in EPUB
reading systems, perhaps requiring user consent when a script
is about to be executed.
C. Responsible disclosure
All vulnerabilities, either identiﬁed through our semi-
automated testbed or our case-studies, were responsibly dis-
closed to the involved parties. In addition, we sent out an
early warning to all vendors whose reading system did not
satisfy the speciﬁcation’s security recommendations. In total,
we reached out to 33 vendors, responsible for 37 reading
systems, each time using the most appropriate private channel
that was available. Although we received a generic or no
response from the majority, vendors of very popular reading
systems such as Apple and Adobe were eager to solve the
reported issues, for which three CVEs were issued.
IX. RELATED WORK
We did not encounter any prior studies evaluating the
implications of web technology use in non-browser applications.
However, our work shares several similarities with the following
research.
A. Portable Document Format
Today, the Portable Document Format (PDF) is one of the
most popular ﬁle formats used for operating system independent
document exchange. Its capabilities bear close resemblance
to those of the EPUB format, including support for scripting
and network connectivity. Unfortunately, previous research has
demonstrated that these traits may to lead to security, privacy
and content integrity vulnerabilities [21], [22], [41]. In that
regard, we hope that by expressing our concerns about EPUB
capabilities at an early stage, the speciﬁcation can be adapted
to avoid similar consequences.
Various research efforts focus on the use of machine
learning to distinguish between benign and malicious PDF
ﬁles. Research by Smutz et al. and Srndic et al. argue that PDF
ﬁle metadata and structure are valuable features that can be
used by a static, machine learning based detection system [56],
[58]. Maiorca et al. demonstrated a new evasion technique for
PDF ﬁle analysis based on logical structure; they also present a
framework to solve this problem [40]. Nissim et al. performed
an extensive study reviewing and comparing state-of-the-art
techniques for detecting malicious PDF ﬁles [49].
B. Comprehensive policy evaluations
Various studies have exposed vulnerabilities and inconsisten-
cies in browser policy implementations through comprehensive
evaluations. By combining manual and automated analysis
in four popular browsers, Aggarwal et al. uncovered several
implementational weaknesses for private browsing modes [4].
Furthermore, they show that some of these weaknesses can be
exploited by an attacker to bypass the imposed privacy policy.
Schwenk at al., on the other hand, performed a comprehensive
evaluation of the same-origin policy in 10 browsers, leveraging
an extensive set of 544 different
test cases [54]. Their
results exposed various vulnerabilities and inconsistencies
among browsers, pleading for a formal deﬁnition of the same-
origin policy. In another study, Franken et al. performed an
evaluation of third-party cookie policy implementations in 7
browsers and 46 browser extensions, leveraging their automated
framework [32]. According to their results, all imposed third-
party cookie policies of all major browsers as well as evaluated
extensions can be bypassed. Finally, a longitudinal study by
Luo et al., comprising of 20 different mobile browser families,
analyzed support for eight different security mechanisms over
the course of seven years [39]. Their ﬁndings expose various
issues such as lacking support and multi-year vulnerability
issues, even for several popular mobile browsers.
X. CONCLUSION
In this paper we report on a semi-automated evaluation to
measure the security and privacy practices of 92 free EPUB
reading systems and ﬁve physical reading devices. Our results
show that almost none of the systems that support JavaScript
execution adequately adhere to the security considerations of
the EPUB speciﬁcation. For eight reading systems, a malicious
EPUB can even extract arbitrary ﬁles from the local system.
We are the ﬁrst to comprehensively evaluate the security
and privacy practices of EPUB reading systems, and hope
to increase awareness of the associated threat surface among
users and developers. Furthermore, we propose that the current
security recommendations of the EPUB standard should be
reﬁned into binding requirements. To further assist developers,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:25 UTC from IEEE Xplore.  Restrictions apply. 
1742
additional documentation could be provided in more speciﬁc
terms how existing browser engine frameworks can be correctly
incorporated, pointing out critical conﬁguration elements.
In addition to this large-scale evaluation, we also performed
a more elaborate manual analysis of a select number of EPUB
reading systems. This manual analysis exposed two severe
security issues: ﬁrst, as soon as a malicious e-book would be
opened in Kindle, it could leak documents from the user’s
library; second, the entire browsing session of users with the
EPUBReader browser extension can be compromised upon
visiting a malicious website. The results also highlight that the
outcome of our semi-automated evaluation should be considered
a lower bound, and that several security and privacy issues
rely on application-speciﬁc behavior.
As part of our assessment of the EPUB ecosystem, we
performed an analysis of more than 9,000 EPUBs, obtained
“in the wild” from ﬁve online e-book stores and two popular
ﬁle sharing platforms, and evaluated the vetting process of six
popular self-publishing services. We did not ﬁnd evidence of
any ongoing abuse, indicating that the issues identiﬁed through
our evaluations are indeed novel. However, this and the fact that
four of the evaluated self-publishing services allowed JavaScript
inclusion which could lead to publication of malicious EPUBs,
make this study timely: we urge developers to further mitigate
the identiﬁed issues and adopt additional security measures
before their users are exploited.
Finally, we demonstrated that the consolidation of estab-
lished web technologies in non-browser applications does not
necessarily imply a proper translation of the web security and
privacy primitives. With this study, we hope to have motivated
the need for more comprehensive and in-depth evaluations in
this largely unexplored research domain.
ACKNOWLEDGMENT
We would like to thank our shepherd Adam Doup´e and the
anonymous reviewers for their insightful comments. We would
also like to extend our gratitude to Lieven Desmet, Victor
Le Pochat and Yana Dimova for their helpful feedback. This
research is partially funded by the Research Fund KU Leuven.
REFERENCES
[1] EPUB 3.2. Standard, W3C, May 2019. https://www.w3.org/publishing/
epub3/epub-spec.html.
[2] EPUB content documents 3.2. Standard, W3C, May 2019. https://www.
w3.org/publishing/epub3/epub-contentdocs.html.
[3] Adobe. Security Updates Available for Adobe Digital Editions —
APSB20-23. https://helpx.adobe.com/security/products/Digital-Editions/
apsb20-23.html, April 2020.
[4] Gaurav Aggarwal, Elie Bursztein, Collin Jackson, and Dan Boneh. An
analysis of private browsing modes in modern browsers. In Proceedings
of the 19th USENIX Conference on Security, USENIX Security’10, pages
6–6, Berkeley, CA, USA, 2010. USENIX Association.
reading
[5] Alexandra Alter.
e-book
Your
The
is
https://www.wsj.com/articles/
you.
Wall
SB10001424052702304870304577490950051438304.
Journal.
Street
[6] Amazon. Amazon Kindle Publishing Guidelines, 2019. http://kindlegen.
s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf.
[7] Android. Background execution limits. https://developer.android.com/
about/versions/oreo/background.
[8] Android. Open ﬁles using storage access framework. https://developer.
android.com/guide/topics/providers/document-provider.
[9] Android. WebSettings. https://developer.android.com/reference/android/
[10] Apple. Uiapplication background task notes. https://forums.developer.
webkit/WebSettings.html.
apple.com/thread/85066.
[11] Apple. About the security content of iOS 13.1 and iPadOS 13.1. https:
//support.apple.com/en-us/HT210603, February 2020.
[12] Apple. About the security content of iOS 13.2 and iPadOS 13.2. https:
//support.apple.com/en-gb/HT210721, April 2020.
[13] Apple. About the security content of macOS Catalina 10.15. https:
//support.apple.com/en-us/HT210634, February 2020.
[14] Apple. About the security content of macOS Catalina 10.15.1, Security
Update 2019-001, and Security Update 2019-006. https://support.apple.
com/en-us/HT210722, April 2020.
[15] AuthorEarnings. February 2017 Big, Bad, Wide & International Report:
covering Amazon, Apple, B&N, and Kobo ebook sales in the US,
UK, Canada, Australia, and New Zealand. https://web.archive.org/web/
20190218084936/http:/authorearnings.com/report/february-2017/, 2017.
[16] Internet Assigned Numbers Authority. Uniform resource identiﬁer (uri)
https://www.iana.org/assignments/uri-schemes/uri-schemes.
schemes.
xhtml.
[17] Internet Assigned Numbers Authority. Media type assignment:
epub+zip. https://www.iana.org/assignments/media-types/application/
epub+zip, 2014.
[18] Baldur Bjarnason. EPUB javascript security. https://www.baldurbjarnason.
com/notes/epub-javascript-security/, July 2012.
[19] Baldur Bjarnason. Javascript in ebooks. https://www.baldurbjarnason.
com/notes/javascript-in-ebooks/, February 2012.
[20] Henrik Bostr¨om, Cullen Jennings, Anant Narayanan, Jan-Ivar Bru-
aroey, Daniel Burnett, Adam Bergkvist, and Bernard Aboba. Media
capture and streams. Candidate recommendation, W3C, July 2019.
https://www.w3.org/TR/2019/CR-mediacapture-streams-20190702/.
[21] Ron Brandis and Luke Steller.
Threat Modelling Adobe PDF.
report, Defence Science and Technology Organisation,
https://www.dst.defence.gov.au/sites/default/ﬁles/publications/
Technical
2012.
documents/DSTO-TR-2730.pdf.
[22] Aniello Castiglione, Alfredo De Santis, and Claudio Soriente. Security
and privacy issues in the portable document format. Journal of Systems
and Software, 83(10):1813 – 1822, 2010.
[23] Chrome. Declare Permissions and Warn Users. https://developer.chrome.
com/extensions/permission warnings.
[24] Ang Cui.
The overlooked problem of
‘n-day’ vulnerabilities.
https://www.darkreading.com/vulnerabilities---threats/the-overlooked-
problem-of-n-day-vulnerabilities/a/d-id/1331348, March 2018.
[25] Cure53. HTTPLeaks. https://github.com/cure53/HTTPLeaks, 2019.
[26] CVE Details.
QT 5.2.1 Security Vulnerabilities.
https:
//www.cvedetails.com/vulnerability-list/vendor id-12593/product id-
24410/version id-164958/Digia-QT-5.2.1.html.
[27] Matt Day and Jackie Gu. The enormous numbers behind Amazon’s
market reach. https://www.bloomberg.com/graphics/2019-amazon-reach-
across-markets/, March 2019.
[28] Digimarc.
Inside the mind of a book pirate. https://www.digimarc.
com/docs/default-source/default-document-library/inside-the-mind-of-
a-book-pirate, 2017.
[29] M. Duerst, L. Masinter, and J. Zawinski. The ’mailto’ uri scheme. RFC
6068, RFC Editor, October 2010.
[30] Eric Hellman. Publishing Hackathon Pretty Much Ignores eBooks.
https://go-to-hellman.blogspot.com/2013/05/publishing-hackathon-
pretty-much.html, 2013.
[31] Alison Flood. Ebooks can tell which novels you didn’t ﬁnish. The
Guardian. https://www.theguardian.com/books/2014/dec/10/kobo-survey-
books-readers-ﬁnish-donna-tartt.
[32] Gertjan Franken, Tom Van Goethem, and Wouter Joosen. Who left
open the cookie jar? a comprehensive evaluation of third-party cookie
policies. In 27th USENIX Security Symposium (USENIX Security 18),
pages 151–168, Baltimore, MD, August 2018. USENIX Association.
[33] Ian Hickson. Web storage (second edition). W3C recommendation, W3C,
April 2016. http://www.w3.org/TR/2016/REC-webstorage-20160419/.
[34] Intellectual Property Ofﬁce. Online copyright infringement tracker:
Latest wave of
https://assets.publishing.service.gov.uk/
government/uploads/system/uploads/attachment data/ﬁle/628704/OCI -
tracker-7th-wave.pdf, 2017.
research.
[35] Jun Kokatsu. Is your ePub reader secure enough? https://shhnjk.blogspot.
com/2017/05/is-your-epub-reader-secure-enough.html, May 2017.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:25 UTC from IEEE Xplore.  Restrictions apply. 
1743
[36] Martin Kaste. Is your e-book reading up on you? https://www.npr.org/
2010/12/15/132058735/is-your-e-book-reading-up-on-you.
[37] Kobo Labs. Kobo EPUB guidelines. https://github.com/kobolabs/epub-
spec/blob/master/README.md.
[38] Jung Hoon Lee.
Issue 1134: WebKit: UXSS via ContainerN-
ode::parserRemoveChild (2). https://bugs.chromium.org/p/project-zero/
issues/detail?id=1134, 2017.
[39] Meng Luo, Pierre Laperdrix, Nima Honarmand, and Nick Nikiforakis.
Time does not heal all wounds: A longitudinal analysis of security-
In Proceedings of the 26th
mechanism support in mobile browsers.
Network and Distributed System Security Symposium (NDSS), Jan 2019.
[40] Davide Maiorca, Igino Corona, and Giorgio Giacinto. Looking at the
bag is not enough to ﬁnd the bomb: An evasion of structural methods for
malicious pdf ﬁles detection. In Proceedings of the 8th ACM SIGSAC
Symposium on Information, Computer and Communications Security,
ASIA CCS ’13, pages 119–130, New York, NY, USA, 2013. ACM.
[41] Vladislav Mladenov, Christian Mainka, Karsten Meyer zu Selhausen,
Martin Grothe, and J¨org Schwenk. Vulnerability Report: Attacks
bypassing the signature validation in PDF. Technical report, Ruhr-
Universit¨at Bochum, 2018. https://www.nds.ruhr-uni-bochum.de/media/
ei/veroeffentlichungen/2019/02/12/report.pdf.
[42] Mozilla Developer Network.
Content
Security
Policy.
https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/
WebExtensions/Content Security Policy.
[43] Mozilla Developer Network. Fetch API. https://developer.mozilla.org/en-
[62] R¨udiger Wischenbart. The global eBook market: current conditions &
future projections. O’Reilly Media, Inc., 2013.
APPENDIX A
ADDITIONAL READING SYSTEM INFORMATION
For measures of completeness and transparency, we provide
an overview of all EPUB reading systems that were considered
during our evaluation. We also included the number of reported
users. Unfortunately, this metric is not available for iOS, so
instead the number of ratings can be used as an estimator of
the relative reach of an application. Additionally, we reported
on the deduced embedded browser engine for all reading
systems supporting JavaScript. Here, “OS” indicates that the
reading system relies on the engine framework provided by the
operating system, and thus is considered up-to-date. Finally, we
also include the readers that were excluded from our analysis
along with the reason. In total, we considered 92 reading
applications on seven platforms (Windows, Ubuntu, macOS,
iOS, Android, Firefox & Chrome extensions) and ﬁve stand-
alone physical e-readers.
[44] Mozilla Developer Network. mdn-browser-compat-data. https://github.
US/docs/Web/API/Fetch API.
com/mdn/browser-compat-data.
[45] Mozilla Developer Network. MediaDevices. https://developer.mozilla.
org/en-US/docs/Web/API/MediaDevices.
[46] Mozilla Developer Network. Same-origin policy. https://developer.
mozilla.org/en-US/docs/Web/Security/Same-origin policy.
[47] Mozilla Developer Network. XMLHttpRequest. https://developer.mozilla.
org/en-US/docs/Web/API/XMLHttpRequest.
[48] Nate Hoffelder. An epub3 ebook could be used to hack your tablet,
steal your identity, and cause the downfall of western civilization. 2013.
https://the-digital-reader.com/2013/06/09/eric-hellmans-publishing-
hackathon-entry-could-be-used-to-hack-your-tablet-steal-your-identity-
and-cause-the-downfall-of-western-civilization/.
[49] Nir Nissim, Aviad Cohen, Chanan Glezer, and Yuval Elovici. Detection
of malicious pdf ﬁles and directions for enhancements: A state-of-the
art survey. Computers & Security, 48:246 – 266, 2015.
[50] nrclark. Pyfuse: A tool for simple FUSE Filesystems. https://github.com/
nrclark/pyfuse, 2019.
[51] Andrei Popescu. Geolocation API speciﬁcation 2nd edition. W3C recom-
mendation, W3C, November 2016. https://www.w3.org/TR/2016/REC-
geolocation-API-20161108/.
[52] PricewaterhouseCoopers. Turning the page: The future of ebooks. 2010.
https://www.pwc.co.uk/assets/pdf/ebooks-trends-and-developments.pdf.
[53] Project Gutenberg. Project Gutenberg Submission Guidelines. https:
//web.archive.org/web/20181108181052/https://upload.pglaf.org/.
[54] J¨org Schwenk, Marcus Niemietz, and Christian Mainka. Same-origin
In 26th USENIX Security
policy: Evaluation in modern browsers.
Symposium (USENIX Security 17), pages 713–727, Vancouver, BC,
August 2017. USENIX Association.
[55] SmashWords.
Smashwords Distribution Network.
https://www.
smashwords.com/distribution, 2019.
[56] Charles Smutz and Angelos Stavrou. Malicious pdf detection using
metadata and structural features. In Proceedings of the 28th Annual
Computer Security Applications Conference, ACSAC ’12, pages 239–248,
New York, NY, USA, 2012. ACM.
[57] Peter Snyder, Cynthia Taylor, and Chris Kanich. Most websites don’t
need to vibrate: A cost-beneﬁt approach to improving browser security.
In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security, pages 179–194. ACM, 2017.
[58] Nedim Srndic and Pavel Laskov. Detection of malicious pdf ﬁles based
on hierarchical document structure. In NDSS, 2013.
[59] W3C. EPUBCheck. https://github.com/w3c/epubcheck, 2019.
[60] Xinda Wang, Kun Sun, Archer Batcheller, and Sushil Jajodia. Detecting
“0-day” vulnerability: An empirical study of secret security patch in oss.
In 2019 49th Annual IEEE/IFIP International Conference on Dependable
Systems and Networks (DSN), pages 485–492. IEEE, 2019.
[61] WebKit Bugzilla. Limit user agent versioning to an upper bound. https:
//bugs.webkit.org/show bug.cgi?id=180365.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:25 UTC from IEEE Xplore.  Restrictions apply. 
1744
EVALUATED EPUB READING SYSTEMS FOR WINDOWS
TABLE VII
Reading system
Adobe Digital Editions
Bibliovore
BookReader
Bookviser Reader
Calibre
Calibre
CoolReader
EPUB File Reader
FBReader
Freda
Icecream Ebook Reader
Liberty
MS Edge
Nook
Overdrive
SumatraPDF
Version
4.5.10
2.0.2.0
1.6.0.0
6.8.1.0
3.40.1
4.3.0
N/A
1.5
0.12.10
4.21
5.19
1.0.0.13
44.17763.1.0
1.10.1.15
3.8.0
3.1.2
Rendering engine
OS Trident
-
-
-
WebKit 538.1
Blink 77
-
OS Trident
-
-
WebKit 538.1
-
EdgeHTML 18.17763
-
-
-
Release date
N/A
-
-
-
Oct 2014
Sep 2019
-
N/A
-
-
Oct 2014
-
Oct 2018
-
-
-
OMITTED EPUB READING SYSTEMS FOR WINDOWS
TABLE VIII
Reading system
Cover
Epub3 Reader
FlyReader
Perfect PDF Reader
Reason
Unable to open fully compliant EPUB ﬁle.
Unable to correctly render fully compliant EPUB ﬁle.
Unable to open fully compliant EPUB ﬁle.
Unable to correctly render fully compliant EPUB ﬁle.
EVALUATED EPUB READING SYSTEMS FOR MACOS
TABLE IX
Reading system
Adobe Digital Editions
Apple Books
Azardi
BookReader
Calibre
Calibre
FBReader
Kindle
Kitabu
Murasaki
Version
4.5.10
1.17
43.1
5.14
3.40.1
4.3.0
0.9.0
1.25.2
1.2