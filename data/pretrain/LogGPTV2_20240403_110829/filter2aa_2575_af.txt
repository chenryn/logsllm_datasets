a remote target.  
Remote-exec Module 
   Description 
psexec 
Remote execute via Service Control Manager 
winrm 
Remote execute via WinRM (PowerShell) 
wmi 
Remote execute via WMI (PowerShell) 
Lateral movement is an area, similar to privilege escalation, where some attacks present a natural 
set of primitives to spawn a session on a remote target. Some attacks give an execute-primitive 
only. The split between jump and remote-exec gives you flexibility to decide how to weaponize 
an execute-only primitive. 
Aggressor Script has an API to add new modules to jump and remote-exec. See the Aggressor 
Script documentation (the Beacon chapter, specifically) for more information. 
www.cobaltstrike.com/
/
57/
7.24 Lateral Movement GUI 
Cobalt Strike also provides a GUI to make lateral movement easier. Switch to the Targets 
Visualization or go to View -> Targets. Navigate to [target] -> Jump and choose your desired 
lateral movement option. 
The following dialog will open: 
Figure 39. Lateral Movement Dialog 
To use this dialog: 
First, decide which trust you want to use for lateral movement. If you want to use the token in 
one of your Beacons, check the Use session’s current access token box. If you want to use 
credentials or hashes for lateral movement—that’s OK too. Select credentials from the credential 
store or populate the User, Password, and Domain fields. Beacon will use this information to 
generate an access token for you. Keep in mind, you need to operate from a high integrity 
context [administrator] for this to work. 
Next, choose the listener to use for lateral movement. The SMB Beacon is usually a good 
candidate here.  
Last, select which session you want to perform the lateral movement attack from. Cobalt Strike’s 
asynchronous model of offense requires each attack to execute from a compromised system. 
There is no option to perform this attack without a Beacon session to attack from. If you’re on an 
internal engagement, consider hooking a Windows system that you control and use that as your 
starting point to attack other systems with credentials or hashes.  
Press Launch. Cobalt Strike will activate the tab for the selected Beacon and issue commands to 
it. Feedback from the attack will show up in the Beacon console. 
www.cobaltstrike.com/
/
58/
8. Browser Pivoting 
8.1 Overview 
Malware like Zeus and its variants inject themselves into a user’s browser to steal banking 
information. This is a man-in-the-browser attack. So-called, because the attacker is injecting 
malware into the target’s browser. 
Man-in-the-browser malware uses two approaches to steal banking information. They either 
capture form data as it’s sent to a server. For example, malware might hook PR_Write in Firefox 
to intercept HTTP POST data sent by Firefox. Or, they inject JavaScript onto certain 
webpages to make the user think the site is requesting information that the attacker needs. 
Cobalt Strike offers a third approach for man-in-the-browser attacks. It lets the attacker hijack 
authenticated web sessions—all of them. Once a user logs onto a site, an attacker may ask the 
user’s browser to make requests on their behalf. Since the user’s browser is making the request, 
it will automatically re-authenticate to any site the user is already logged onto. I call this a 
browser pivot—because the attacker is pivoting their browser through the compromised user’s 
browser. 
Figure 40. Browser Pivoting in Action 
Cobalt Strike’s implementation of browser pivoting for Internet Explorer injects an HTTP proxy 
server into the compromised user’s browser. Do not confuse this with changing the user’s proxy 
settings. This proxy server does not affect how the user gets to a site. Rather, this proxy server is 
available to the attacker. All requests that come through it are fulfilled by the user’s browser. 
www.cobaltstrike.com/
/
59/
8.2 Setup 
To setup Browser pivoting, go to [beacon] -> Explore -> Browser Pivot. Choose the Internet 
Explorer instance that you want to inject into. You may also decide which port to bind the 
browser pivoting proxy server to as well. 
Figure 41. Start a Browser Pivot 
Beware that the process you inject into matters a great deal. Inject into Internet Explorer to 
inherit a user’s authenticated web sessions. Modern versions of Internet Explorer spawn each tab 
in its own process. If your target uses a modern version of Internet Explorer, you must inject a 
process associated with an open tab to inherit session state. Which tab process doesn’t matter 
(child tabs share session state). Identify Internet Explorer tab processes by looking at the PPID 
value in the Browser Pivoting setup dialog. If the PPID references explorer.exe, the process is 
not associated with a tab. If the PPID references iexplore.exe, the process is associated with a 
tab. Cobalt Strike will show a checkmark next to the processes it thinks you should inject into. 
Once Browser Pivoting is setup, set up your web browser to use the Browser Pivot Proxy server. 
Remember, Cobalt Strike’s Browser Pivot server is an HTTP proxy server.  
Figure 42. Configure Browser Settings 
www.cobaltstrike.com/
/
60/
8.3 Use 
You may browse the web as your target user once browser pivoting is started. Beware that the 
browser pivoting proxy server will present its SSL certificate for SSL-enabled websites you visit. 
This is necessary for the technology to work. 
The browser pivoting proxy server will ask you to add a host to your browser’s trust store when 
it detects an SSL error. Add these hosts to the trust store and press refresh to make SSL protected 
sites load properly. 
If your browser pins the certificate of a target site, you may find its impossible to get your 
browser to accept the browser pivoting proxy server’s SSL certificate. This is a pain. One option 
is to use a different browser. The open source Chromium browser has a command-line option to 
ignore all certificate errors. This is ideal for browser pivoting use: 
chromium --ignore-certificate-errors --proxy-server=[host]:[port] 
To stop the Browser Pivot proxy server, type browserpivot stop in its Beacon console. 
You will need to reinject the browser pivot proxy server if the user closes the tab you’re working 
from. The Browser Pivot tab will warn you when it can’t connect to the browser pivot proxy 
server in the browser. 
8.4 How it Works 
Internet Explorer delegates all of its communication to a library called WinINet. This library, 
which any program may use, manages cookies, SSL sessions, and server authentication for its 
consumers. Cobalt Strike’s Browser Pivoting takes advantage of the fact that WinINet 
transparently manages authentication and reauthentication on a per process basis. By injecting 
Cobalt Strike’s Browser Pivoting technology into a user’s Internet Explorer instance, you get this 
transparent reauthentication for free. 
www.cobaltstrike.com/
/
61/
9. Pivoting 
9.1 What is Pivoting  
Pivoting, for the sake of this manual, is turning a compromised system into a hop point for other 
attacks and tools. Cobalt Strike’s Beacon provides several pivoting options. For each of these 
options, you will want to make sure your Beacon is in interactive mode. Interactive mode is 
when a Beacon checks in multiple times each second. Use the sleep 0 command to put your 
Beacon into interactive mode. 
9.2 SOCKS Proxy 
Go to [beacon] -> Pivoting -> SOCKS Server to setup a SOCKS4a proxy server on your team 
server. Or, use socks 8080 to setup a SOCKS4a proxy server on port 8080 (or any other port you 
choose).  
All connections that go through these SOCKS servers turn into connect, read, write, and close 
tasks for the associated Beacon to execute. You may tunnel via SOCKS through any type of 
Beacon (even an SMB Beacon). 
Beacon’s HTTP data channel is the most responsive for pivoting purposes. If you’d like to pivot 
traffic over DNS, use the DNS TXT record communication mode. 
To see the SOCKS servers that are currently setup, go to View -> Proxy Pivots. 
Use socks stop to disable the SOCKS proxy server. 
Proxychains 
The proxychains tool will force an external program to use a SOCKS proxy server that you 
designate. You may use proxychains to force third-party tools through Cobalt Strike’s SOCKS 
server. To learn more about proxychains, visit: 
• http://proxychains.sourceforge.net//
Metasploit 
You may also tunnel Metasploit Framework exploits and modules through Beacon. Create a 
Beacon SOCKS proxy server [as described above] and paste the following into your Metasploit 
Framework console: 
setg Proxies socks4:team server IP:proxy port 
setg ReverseAllowProxy true 
These commands will instruct the Metasploit Framework to apply your Proxies option to all 
modules executed from this point forward. Once you’re done pivoting through Beacon in this 
way, use unsetg Proxies to stop this behavior.  
www.cobaltstrike.com/
/
62/
If you find the above tough to remember, go to View -> Proxy Pivots. Highlight the proxy pivot 
you setup and press Tunnel. This button will provide the setg Proxies syntax needed to tunnel 
the Metasploit Framework through your Beacon. 
9.3 Reverse Port Forward 
Use the rportfwd command to setup a reverse pivot through Beacon. The rportfwd command 
will bind a port on the compromised target. Any connections to this port will cause your Cobalt 
Strike server to initiate a connection to another host and port and relay traffic between these two 
connections. Cobalt Strike tunnels this traffic through Beacon. The syntax for rportfwd is: 
rportfwd [bind port] [forward host] [forward port]. 
Use rportfwd stop [bind port] to disable the reverse port forward.  
9.4 Pivot Listeners 
It’s good tradecraft to limit the number of direct connections from your target’s network to your 
command and control infrastructure. A pivot listener allows you to create a listener that is bound 
to a Beacon or SSH session. In this way, you can create new reverse sessions without more direct 
connections to your command and control infrastructure. 
To setup a pivot listener, go to [beacon] -> Pivoting -> Listener…. This will open a dialog 
where you may define a new pivot listener.  
Figure 43. Configure a Pivot Listener 
A pivot listener will bind to Listen Port on the specified Session. The Listen Host value 
configures the address your reverse TCP payload will use to connect to this listener. 
Right now, the only payload option is windows/beacon_reverse_tcp.  
Pivot Listeners do not change the pivot host’s firewall configuration. If a pivot host has a host-
based firewall, this may interfere with your listener. You, the operator, are responsible for 
anticipating this situation and taking the right steps for it. 
To remove a pivot listener, go to Cobalt Strike -> Listeners and remove the listener there. 
Cobalt Strike will send a task to tear down the listening socket, if the session is still reachable. 
www.cobaltstrike.com/
/
63/
9.5 Covert VPN 
VPN pivoting is a flexible way to tunnel traffic without the limitations of a proxy pivot. Cobalt 
Strike offers VPN pivoting through its Covert VPN feature. Covert VPN creates a network 
interface on the Cobalt Strike system and bridges this interface into the target’s network. 
Figure 44. Deploy Covert VPN 
To activate Covert VPN, right-click a compromised host, go to [beacon] -> Pivoting -> Deploy 
VPN. Select the remote interface you would like Covert VPN to bind to. If no local interface is 
present, press Add to create one. 
Check Clone host MAC address to make your local interface have the same MAC address as the 
remote interface. It’s safest to leave this option checked.  
Press Deploy to start the Covert VPN client on the target. Covert VPN requires Administrator 
access to deploy. 
Once a Covert VPN interface is active, you may use it like any physical interface on your 
system. Use ifconfig to configure its IP address. If your target network has a DHCP server, you 
may request an IP address from it using your operating systems built-in tools.  
To manage your Covert VPN interfaces, go to Cobalt Strike -> Interfaces. Here, Cobalt Strike 
will show the Covert VPN interfaces, how they’re configured, and how many bytes were 
transmitted and received through each interface. 
Highlight an interface and press Remove to destroy the interface and close the remote Covert 
VPN client. Covert VPN will remove its temporary files on reboot and it automatically undoes 
any system changes right away.  
Press Add to configure a new Covert VPN interface. 
www.cobaltstrike.com/
/
64/
Figure 45. Setup a Covert VPN Interface 
Covert VPN interfaces consist of a network tap and a channel to communicate 64thernet frames 
through. To configure the interface, choose an Interface name (this is what you will manipulate 
through ifconfig later) and a MAC address.  
You must also configure the Covert VPN communication channel for your interface. Covert 
VPN may communicate Ethernet frames over a UDP connection, TCP connection, ICMP, or 
using the HTTP protocol. The TCP (Reverse) channel has the target connect to your Cobalt 
Strike instance. The TCP (Bind) channel has Cobalt Strike tunnel the VPN through Beacon. 
Cobalt Strike will setup and manage communication with the Covert VPN client based on the 
Local Port and Channel you select. 
The Covert VPN HTTP channel makes use of the Cobalt Strike web server. You may host other 
Cobalt Strike web applications and multiple Covert VPN HTTP channels on the same port. 
For best performance, use the UDP channel. The UDP channel has the least amount of overhead 
compared to the TCP and HTTP channels. Use the ICMP, HTTP, or TCP (Bind) channels if you 
need to get past a restrictive firewall. 
While Covert VPN has a flexibility advantage, your use of a VPN pivot over a proxy pivot will 
depend on the situation. Covert VPN requires Administrator access. A proxy pivot does not. 
Covert VPN creates a new communication channel. A proxy pivot does not. You should use a 
proxy pivot initially and move to a VPN pivot when it’s needed.  
www.cobaltstrike.com/
/
65/
10. SSH Sessions 
10.1 The SSH Client 
Cobalt Strike controls UNIX targets with a built-in SSH client. This SSH client receives tasks 
from and routes its output through a parent Beacon.  
Use ssh [target] [user] [password] to launch an SSH session from a Beacon. You may also use 
ssh-key [target] [user] [/path/to/key.pem] to authenticate with a key. 
These commands run Cobalt Strike’s SSH client. The client will report any connection or 
authentication issues to the parent Beacon. If the connection succeeds, you will see a new session 
in Cobalt Strike’s display. This is an SSH session. Right-click on this session and press Interact 
to open the SSH console.  
Type help to see a list of commands the SSH session supports. Type help followed by a 
command name for details on that command. 
10.2 Running Commands 
The shell command will run the command and arguments you provide. Running commands 
block the SSH session for up to 20s before Cobalt Strike puts the command in the background. 
Cobalt Strike will report output from these long running commands as it becomes available. 
Use sudo [password] [command + arguments] to attempt to run a command via sudo. This 
alias requires the target’s sudo to accept the –S flag. 
The cd command will change the current working directory for the SSH session. The pwd 
command reports the current working directory. 
10.3 Upload and Download Files 
The upload command will upload a file to the current working directory. The download 
command will download a file. Files downloaded with the download command are available 
under View -> Downloads. You may also type downloads to see file downloads in progress. 
The cancel command will cancel a download that’s in progress. 
10.4 Peer-to-peer C2 
SSH sessions can control TCP Beacons. Use the connect command to assume control of a TCP 
Beacon waiting for a connection. Use unlink to disconnect a TCP Beacon session. 
Go to [session] -> Listeners -> Pivot Listener… to setup a pivot listener tied to this SSH 
session. This will allow this compromised UNIX target to receive reverse TCP Beacon sessions. 
This option does require that the SSH daemon’s GatewayPorts option is set to yes or 
ClientSpecified. 
www.cobaltstrike.com/
/
66/
10.5 SOCKS Pivoting and Reverse Port Forwards 
Use the socks command to create a SOCKS server on your team server that forwards traffic 
through the SSH session. The rportfwd command will also create a reverse port forward that 
routes traffic through the SSH session and your Beacon chain.  
There is one caveat to rportfwd: the rportfwd command asks the SSH daemon to bind to all 
interfaces. It’s quite likely the SSH daemon will override this and force the port to bind to 
localhost. You need to change the GatewayPorts option for the SSH daemon to yes or 
clientspecified. 
www.cobaltstrike.com/
/
67/
11. Malleable Command and Control 
11.1 Overview 
Many Beacon indicators are controlled by a Malleable C2 profile. A Malleable C2 profile 
consists of settings and data transforms. A data transform is a simple program that specifies how 
to transform data and store it in a transaction. The same program that transforms and stores data, 
interpreted backwards, also extracts and recovers data from a transaction. 
To use a custom profile, you must start a Cobalt Strike team server and specify your profile at 
that time.  
./teamserver [external IP] [password] [/path/to/my.profile] 
You may only load one profile per Cobalt Strike instance. 
11.2 Checking for Errors 
Cobalt Strike’s Linux package includes a c2lint program. This program will check the syntax of 
a communication profile, apply a few extra checks, and even unit test your profile with random 
data. It’s highly recommended that you check your profiles with this tool before you load them 
into Cobalt Strike. 
./c2lint [/path/to/my.profile] 
11.3 Profile Language 
The best way to create a profile is to modify an existing one. Several example profiles are 
available on Github:  
• https://github.com/rsmudge/Malleable-C2-Profiles/
When you open a profile, here is what you will see: 
# this is a comment 
set global_option "value"; 
protocol-transaction { 
set local_option "value"; 
client { 
# customize client indicators 
} 
server { 
# customize server indicators 
} 
} 
www.cobaltstrike.com/
/
68/
Comments begin with a # and go until the end of the line. The set statement is a way to assign a 
value to an option. Profiles use { curly braces } to group statements and information together. 
Statements always end with a semi-colon. 
To help all of this make sense, here’s a partial profile: 
http-get { 
        set uri "/foobar"; 
        client { 
                metadata { 
                        base64; 
                        prepend "user="; 
                        header "Cookie"; 
                } 
        } 
This partial profile defines indicators for an HTTP GET transaction. The first statement, set uri, 
assigns the URI that the client and server will reference during this transaction. This set 
statement occurs outside of the client and server code blocks because it applies to both of them. 