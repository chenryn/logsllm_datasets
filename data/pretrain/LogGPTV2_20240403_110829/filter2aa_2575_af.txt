# Remote Target Execution

## Remote-Execution Module

### Description
The Remote-Execution Module facilitates the execution of commands on a remote target. It supports various methods for achieving this, including:

- **psexec**: Executes commands via the Service Control Manager.
- **winrm**: Executes PowerShell commands via WinRM.
- **wmi**: Executes PowerShell commands via WMI.

Lateral movement, similar to privilege escalation, involves using certain attack primitives to spawn a session on a remote target. Some attacks provide only an execute primitive. The separation between "jump" and "remote-exec" allows you to choose how to weaponize an execute-only primitive.

Aggressor Script includes an API for adding new modules to both "jump" and "remote-exec". For more information, refer to the Aggressor Script documentation, specifically the Beacon chapter.

**Source**: [Cobalt Strike](www.cobaltstrike.com/)

## 7.24 Lateral Movement GUI

Cobalt Strike provides a graphical user interface (GUI) to simplify lateral movement. To access it, switch to the Targets Visualization or go to View -> Targets. Navigate to [target] -> Jump and select your desired lateral movement option.

### Using the Lateral Movement Dialog

1. **Select Trust for Lateral Movement**:
   - If you want to use the token from one of your Beacons, check the "Use session’s current access token" box.
   - Alternatively, you can use credentials or hashes. Select credentials from the credential store or populate the User, Password, and Domain fields. Note that you need to operate from a high-integrity context (administrator) for this to work.

2. **Choose the Listener**:
   - Select the listener to use for lateral movement. The SMB Beacon is often a good choice.

3. **Select the Session**:
   - Choose the session from which you want to perform the lateral movement attack. Cobalt Strike's asynchronous model requires each attack to be executed from a compromised system. There is no option to perform this attack without a Beacon session.
   - For internal engagements, consider hooking a Windows system that you control and use it as your starting point to attack other systems with credentials or hashes.

4. **Launch the Attack**:
   - Press "Launch". Cobalt Strike will activate the tab for the selected Beacon and issue commands. Feedback from the attack will appear in the Beacon console.

**Source**: [Cobalt Strike](www.cobaltstrike.com/)

## 8. Browser Pivoting

### 8.1 Overview

Malware like Zeus and its variants inject themselves into a user’s browser to steal banking information, known as a man-in-the-browser attack. This malware uses two main approaches:

1. **Capture Form Data**: Malware hooks functions like `PR_Write` in Firefox to intercept HTTP POST data.
2. **Inject JavaScript**: Malware injects JavaScript onto web pages to trick users into providing sensitive information.

Cobalt Strike offers a third approach: hijacking authenticated web sessions. Once a user logs into a site, an attacker can ask the user’s browser to make requests on their behalf. Since the user’s browser is making the request, it will automatically re-authenticate to any site the user is already logged into. This is called a "browser pivot".

**Source**: [Cobalt Strike](www.cobaltstrike.com/)

### 8.2 Setup

To set up Browser Pivoting, go to [beacon] -> Explore -> Browser Pivot. Choose the Internet Explorer instance you want to inject into and specify the port for the browser pivoting proxy server.

#### Important Notes:
- The process you inject into is crucial. Inject into Internet Explorer to inherit the user’s authenticated web sessions.
- Modern versions of Internet Explorer spawn each tab in its own process. If your target uses a modern version, inject into a process associated with an open tab to inherit session state.
- Identify Internet Explorer tab processes by checking the PPID value in the Browser Pivoting setup dialog. If the PPID references `explorer.exe`, the process is not associated with a tab. If the PPID references `iexplore.exe`, the process is associated with a tab. Cobalt Strike will show a checkmark next to the processes it recommends for injection.

Once set up, configure your web browser to use the Browser Pivot Proxy server. Remember, Cobalt Strike’s Browser Pivot server is an HTTP proxy server.

**Source**: [Cobalt Strike](www.cobaltstrike.com/)

### 8.3 Use

After setting up Browser Pivoting, you can browse the web as your target user. Note that the browser pivoting proxy server will present its SSL certificate for SSL-enabled websites. This is necessary for the technology to work.

- **SSL Certificate Management**: The proxy server will prompt you to add hosts to your browser’s trust store when it detects an SSL error. Add these hosts and refresh to load SSL-protected sites properly.
- **Certificate Pinning**: If your browser pins the certificate of a target site, it may be impossible to get your browser to accept the proxy server’s SSL certificate. One solution is to use a different browser. Chromium, for example, has a command-line option to ignore certificate errors:
  ```sh
  chromium --ignore-certificate-errors --proxy-server=[host]:[port]
  ```

- **Stopping the Proxy Server**: Type `browserpivot stop` in the Beacon console to stop the Browser Pivot proxy server. You will need to reinject the proxy server if the user closes the tab you are working from.

**Source**: [Cobalt Strike](www.cobaltstrike.com/)

### 8.4 How It Works

Internet Explorer delegates all communication to a library called WinINet, which manages cookies, SSL sessions, and server authentication. Cobalt Strike’s Browser Pivoting takes advantage of the fact that WinINet transparently manages authentication and reauthentication on a per-process basis. By injecting Cobalt Strike’s Browser Pivoting technology into a user’s Internet Explorer instance, you get this transparent reauthentication for free.

**Source**: [Cobalt Strike](www.cobaltstrike.com/)

## 9. Pivoting

### 9.1 What is Pivoting

Pivoting turns a compromised system into a hop point for other attacks and tools. Cobalt Strike’s Beacon provides several pivoting options. Ensure your Beacon is in interactive mode (checking in multiple times per second) by using the `sleep 0` command.

### 9.2 SOCKS Proxy

Set up a SOCKS4a proxy server on your team server by going to [beacon] -> Pivoting -> SOCKS Server. Alternatively, use the `socks 8080` command to set up a SOCKS4a proxy server on port 8080 (or any other port).

- **Connections**: All connections through these SOCKS servers turn into connect, read, write, and close tasks for the associated Beacon to execute.
- **Tunneling**: You can tunnel via SOCKS through any type of Beacon, including an SMB Beacon.
- **HTTP Data Channel**: Beacon’s HTTP data channel is the most responsive for pivoting purposes. For DNS-based pivoting, use the DNS TXT record communication mode.
- **Viewing SOCKS Servers**: Go to View -> Proxy Pivots to see the currently set up SOCKS servers.
- **Disabling the Proxy Server**: Use `socks stop` to disable the SOCKS proxy server.

#### Using Proxychains
Proxychains forces an external program to use a specified SOCKS proxy server. You can use proxychains to route third-party tools through Cobalt Strike’s SOCKS server. For more information, visit:
- [Proxychains SourceForge](http://proxychains.sourceforge.net/)

#### Metasploit Integration
You can tunnel Metasploit Framework exploits and modules through Beacon. Set up a Beacon SOCKS proxy server and enter the following in your Metasploit Framework console:
```sh
setg Proxies socks4:team server IP:proxy port
setg ReverseAllowProxy true
```
These commands instruct the Metasploit Framework to apply your Proxies option to all modules executed. To stop this behavior, use `unsetg Proxies`.

Alternatively, go to View -> Proxy Pivots, highlight the proxy pivot you set up, and press "Tunnel" to get the `setg Proxies` syntax needed to tunnel the Metasploit Framework through your Beacon.

### 9.3 Reverse Port Forward

Use the `rportfwd` command to set up a reverse pivot through Beacon. This command binds a port on the compromised target, and any connections to this port will cause your Cobalt Strike server to initiate a connection to another host and port, relaying traffic between these two connections.

- **Syntax**: `rportfwd [bind port] [forward host] [forward port]`
- **Disabling**: Use `rportfwd stop [bind port]` to disable the reverse port forward.

### 9.4 Pivot Listeners

A pivot listener allows you to create a listener bound to a Beacon or SSH session, limiting direct connections to your command and control infrastructure.

- **Setup**: Go to [beacon] -> Pivoting -> Listener… to define a new pivot listener.
- **Configuration**: The pivot listener will bind to the Listen Port on the specified Session. The Listen Host value configures the address your reverse TCP payload will use to connect to this listener.
- **Payload**: Currently, the only payload option is `windows/beacon_reverse_tcp`.
- **Firewall Considerations**: Pivot Listeners do not change the pivot host’s firewall configuration. If a pivot host has a host-based firewall, this may interfere with your listener. You are responsible for anticipating and addressing this situation.
- **Removing a Listener**: Go to Cobalt Strike -> Listeners and remove the listener there. Cobalt Strike will send a task to tear down the listening socket if the session is still reachable.

### 9.5 Covert VPN

Covert VPN is a flexible way to tunnel traffic without the limitations of a proxy pivot. Cobalt Strike’s Covert VPN feature creates a network interface on the Cobalt Strike system and bridges it into the target’s network.

- **Activation**: Right-click a compromised host, go to [beacon] -> Pivoting -> Deploy VPN, and select the remote interface to bind to. If no local interface is present, press "Add" to create one.
- **Cloning MAC Address**: Check "Clone host MAC address" to make your local interface have the same MAC address as the remote interface.
- **Deployment**: Press "Deploy" to start the Covert VPN client on the target. Administrator access is required.
- **Management**: Go to Cobalt Strike -> Interfaces to manage your Covert VPN interfaces. Here, you can view the interfaces, their configurations, and traffic statistics.
- **Removing an Interface**: Highlight an interface and press "Remove" to destroy the interface and close the remote Covert VPN client. Covert VPN will remove temporary files on reboot and undo any system changes immediately.
- **Adding an Interface**: Press "Add" to configure a new Covert VPN interface.

#### Configuring the Interface
- **Interface Name**: This is the name you will manipulate through `ifconfig` later.
- **MAC Address**: Configure the MAC address for the interface.
- **Communication Channel**: Covert VPN can communicate Ethernet frames over UDP, TCP, ICMP, or HTTP. The TCP (Reverse) channel has the target connect to your Cobalt Strike instance, while the TCP (Bind) channel tunnels the VPN through Beacon.
- **Performance**: For best performance, use the UDP channel. Use the ICMP, HTTP, or TCP (Bind) channels if you need to bypass a restrictive firewall.
- **Flexibility vs. Proxy Pivots**: Covert VPN requires Administrator access, while a proxy pivot does not. Covert VPN creates a new communication channel, whereas a proxy pivot does not. Use a proxy pivot initially and move to a Covert VPN when needed.

**Source**: [Cobalt Strike](www.cobaltstrike.com/)

## 10. SSH Sessions

### 10.1 The SSH Client

Cobalt Strike controls UNIX targets with a built-in SSH client. This client receives tasks from and routes its output through a parent Beacon.

- **Launching an SSH Session**: Use `ssh [target] [user] [password]` to launch an SSH session from a Beacon. Alternatively, use `ssh-key [target] [user] [/path/to/key.pem]` to authenticate with a key.
- **Interacting with the Session**: Right-click on the session and press "Interact" to open the SSH console. Type `help` to see a list of supported commands, and `help [command]` for details on a specific command.

### 10.2 Running Commands

- **Shell Command**: The `shell` command runs the provided command and arguments. Long-running commands block the SSH session for up to 20 seconds before being put in the background.
- **Sudo Command**: Use `sudo [password] [command + arguments]` to run a command via sudo. This alias requires the target’s sudo to accept the `-S` flag.
- **Directory Navigation**: Use `cd` to change the current working directory and `pwd` to report the current working directory.

### 10.3 Upload and Download Files

- **Upload Command**: Uploads a file to the current working directory.
- **Download Command**: Downloads a file. Files downloaded with the `download` command are available under View -> Downloads. Use `downloads` to see file downloads in progress.
- **Cancel Command**: Cancels a download that is in progress.

### 10.4 Peer-to-peer C2

SSH sessions can control TCP Beacons. Use the `connect` command to assume control of a TCP Beacon waiting for a connection. Use `unlink` to disconnect a TCP Beacon session.

- **Setting Up a Pivot Listener**: Go to [session] -> Listeners -> Pivot Listener… to set up a pivot listener tied to this SSH session. This allows the compromised UNIX target to receive reverse TCP Beacon sessions. Ensure the SSH daemon’s `GatewayPorts` option is set to `yes` or `ClientSpecified`.

### 10.5 SOCKS Pivoting and Reverse Port Forwards

- **SOCKS Command**: Creates a SOCKS server on your team server that forwards traffic through the SSH session.
- **rportfwd Command**: Creates a reverse port forward that routes traffic through the SSH session and your Beacon chain.
- **Caveat**: The `rportfwd` command asks the SSH daemon to bind to all interfaces. The SSH daemon may override this and force the port to bind to localhost. Change the `GatewayPorts` option for the SSH daemon to `yes` or `clientspecified`.

**Source**: [Cobalt Strike](www.cobaltstrike.com/)

## 11. Malleable Command and Control

### 11.1 Overview

Many Beacon indicators are controlled by a Malleable C2 profile. A Malleable C2 profile consists of settings and data transforms. A data transform specifies how to transform and store data, and the same program, interpreted backwards, extracts and recovers data from a transaction.

- **Using a Custom Profile**: Start a Cobalt Strike team server and specify your profile:
  ```sh
  ./teamserver [external IP] [password] [/path/to/my.profile]
  ```
- **Profile Limitation**: Only one profile can be loaded per Cobalt Strike instance.

### 11.2 Checking for Errors

Cobalt Strike’s Linux package includes a `c2lint` program to check the syntax of a communication profile, apply extra checks, and unit test your profile with random data. It is highly recommended to check your profiles with this tool before loading them into Cobalt Strike.

- **Usage**: 
  ```sh
  ./c2lint [/path/to/my.profile]
  ```

### 11.3 Profile Language

The best way to create a profile is to modify an existing one. Several example profiles are available on GitHub:
- [Malleable C2 Profiles on GitHub](https://github.com/rsmudge/Malleable-C2-Profiles/)

#### Profile Structure
- **Comments**: Begin with `#` and go until the end of the line.
- **Set Statement**: Assigns a value to an option.
- **Grouping Statements**: Use `{ curly braces }` to group statements and information together.
- **Statements**: Always end with a semi-colon.

#### Example Profile
```sh
http-get {
    set uri "/foobar";
    client {
        metadata {
            base64;
            prepend "user=";
            header "Cookie";
        }
    }
}
```
This partial profile defines indicators for an HTTP GET transaction. The `set uri` statement assigns the URI that the client and server will reference during this transaction. This statement occurs outside the client and server code blocks because it applies to both.

**Source**: [Cobalt Strike](www.cobaltstrike.com/)