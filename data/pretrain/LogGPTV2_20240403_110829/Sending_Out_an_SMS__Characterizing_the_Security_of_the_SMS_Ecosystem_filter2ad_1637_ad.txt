### Table V: Statistical Analysis of Authentication Codes

| Service        | Effect Size (w) | p-value  | Uniform? | Mean Code | Effect?  |
|----------------|-----------------|----------|----------|-----------|----------|
| Google         | 0.721           | 0.000    | No       | 547948    | Large    |
| Google         | 0.793           | 0.000    | No       | 558380    | Large    |
| Instagram      | 0.622           | 0.000    | No       | 503172    | Large    |
| Instagram      | 0.574           | 00.000   | No       | 498365    | Large    |
| Instagram      | 0.600           | 0.000    | No       | 497936    | Large    |
| Jamba          | 6.009           | 0.000    | No       | 4719      | Large    |
| LINE           | 0.595           | 0.000    | No       | 5476      | Large    |
| LINE           | 0.519           | 0.000    | No       | 5530      | Large    |
| LINE           | 0.530           | 0.000    | No       | 5442      | Large    |
| Microsoft      | 2.929           | 0.000    | No       | 357494    | Large    |
| Odnoklassniki  | 0.675           | 0.000    | No       | 433997    | Large    |
| Origin         | 0.512           | 0.000    | No       | 502627    | Large    |
| QQ             | 0.522           | 0.000    | No       | 505555    | Large    |
| SMSGlobal      | 0.500           | 0.000    | No       | 5540      | Large    |
| Talk2          | 1.327           | 0.000    | No       | 5732      | Large    |
| Telegram       | 0.478           | 0.000    | No       | 54961     | Medium   |
| Viber          | 8.138           | 0.000    | No       | 112075    | Large    |
| WeChat         | 0.664           | 0.000    | No       | 4989      | Large    |
| Alibaba        | 0.988           | 0.988    | Yes      | 548652    | Large    |
| Backslash      | 0.325           | 0.325    | Yes      | 556223    | Large    |
| Baidu          | 0.015           | 0.015    | Yes      | 505165    | Large    |
| BeeTalk        | 0.595           | 0.595    | Yes      | 544719    | Large    |
| Circle         | 0.080           | 0.080    | Yes      | 506514    | Large    |
| Gett           | 0.461           | 0.461    | Yes      | 5512      | Large    |
| Google         | 0.917           | 0.917    | Yes      | 501623    | Large    |
| Hushmail       | 0.527           | 0.527    | Yes      | 503161    | Large    |
| LINE           | 0.698           | 0.698    | Yes      | 5511      | Large    |
| Origin         | 0.086           | 0.086    | Yes      | 500739    | Large    |
| RunAbove       | 0.427           | 0.427    | Yes      | 494697    | Large    |
| Skout          | 0.004           | 0.004    | Yes      | 5492      | Large    |
| Tuenti         | 0.981           | 0.981    | Yes      | 5010      | Large    |
| Weibo          | 0.395           | 0.395    | Yes      | 512458    | Large    |
| WhatsApp       | 0.022           | 0.022    | Yes      | 543563    | Large    |

**Table V:** The results of our statistical analysis of authentication codes from each service. Some services appear more than once in the data because their messages were split into multiple clusters (e.g., one for password resets and one for logins).

### Chi-Square Test and Code Patterns

Based on the chi-square test, each service's codes generate a specific pattern. We mapped the first two digits of each code with the last two digits and show these patterns for two services in Figure 3.

#### WeChat
Until April 2015, WeChat's authentication codes followed a pattern of `rand() * 16 mod 10000`, which caused the stair-step offset-by-16 heatmap in Figure 3a. This pattern could be explained by a random number generator with low entropy in the four least significant bits, effectively reducing the possible space of 4-digit codes to 625. In April 2015, WeChat changed its code generation algorithm. After removing the 625 known-pattern codes from the WeChat set and recomputing the chi-square entropy test, the p-value increased to 0.761, with a statistical power and effect size of 0.989 and 0.423, respectively. This indicates that the new algorithm is likely producing uniformly-random codes.

#### Talk2
This service exhibits an extreme lack of entropy in its code-generation algorithm, as seen in Figure 3b. Specifically, it appears to avoid digits 0, 1, 2, 5, and 8 in positions 1 and 3 of a 4-digit code. Despite several attempts, we were unable to reproduce this entropy pattern and provide a reasonable explanation for this dramatic reduction in entropy.

#### Google
While the Google codes we harvested did not appear to be uniformly-random in our experiments, this seems to be caused by duplicate codes. When requesting a code resending, Google sends the same code again. This practice is potentially problematic because it indicates that Google's codes have a long lifetime. Since messages on gateways may be accessible for weeks or months, an adversary who can identify the associated account might use an unclaimed code. Without access to the associated accounts, however, we were unable to determine the exact lifetime of Google's codes.

#### LINE
Although our experiments show that LINE's codes are likely uniformly generated, the service does not generate codes with a leading zero, reducing the overall space of codes by 10%. This practice is common among our clusters, with 13 total clusters exhibiting this behavior. For comparison, we display LINE's codes in Figure 3c.

### Takeaways
In this section, we explored the data exposed in the SMS channel for benign purposes. This is problematic if an adversary has access to SMS messages, as is the case with gateways. We observed services that expose sensitive user data via SMS, including financial data, account information, password reset URLs, and personal information such as physical and email addresses. We found that 65% of services that use SMS to deliver codes generate low-entropy codes, which may be predictable and grant unauthorized access to accounts. The design of such services is guided by the assumption that the SMS channel is secure from external observation, and our observations show that this results in poor security design in those applications.

### Abuses of SMS
Having explored how services attempt to use SMS as a secure channel, we now discuss the security implications and evidence of abuse related to gateway activity. This includes phone-verified account evasion, failed attempts at location anonymity, whether similar gateway numbers can be detected, and spam and fraud in the messages themselves.

#### Gateways and PVA
In this subsection, we discuss the relevance of our data to phone-verified accounts. Specifically, we present evidence that the primary activity of the gateways we observe is evading phone-verified account restrictions, and that existing countermeasures are ineffective.

**Message Activity Statistics:**
In Section IV, we noted that more than half of the messages received by gateways are related to account verification, vastly outweighing any other purpose of sending SMS. The median number lifetime (the time from the first message to the last) in our dataset is 20 days, and the CDF of number lifetime is shown in Figure 4a. This lifetime is fairly short, with 73.9% of numbers not even lasting a full billing cycle (31 days). There are two likely explanations for the short lifetime: one is that services facilitating PVA need to replace their numbers often as they exhaust their usefulness to create new accounts. The second is that many of these numbers are on carriers (especially mobile carriers) that shut off numbers for anomalous message volume. These explanations are not necessarily mutually exclusive.

To gain insight into this, we computed the daily volume of messages for each phone number used by a gateway, and we call this series the "daily activity" of the number. If these numbers were primarily used for personal messages or informational activities (like signing up for advertising alerts), we would expect the daily activity of the number to be fairly constant across the lifetime of the number, or for there to be a "ramp-up" period as new users discover the new line. Instead, we see almost the exact opposite behavior. To concisely express this, we computed skewness and kurtosis statistics of the daily activity of every number. Kurtosis indicates if a series is "flat" or "peaky," while skewness indicates whether a peak falls closer to the middle, beginning, or end of a series. A skew of between (-1, 1) indicates the peak falls in the middle of the series, while a positive skew indicates a peak that arrives "earlier" in the series. We plot the skewness and kurtosis for every number in Figure 4b. Note that we reverse the x-axis, so that the further left in the plot a number falls, the "earlier" its peak.

Figure 4c shows the CDF of the daily activity skew, and we observe that approximately 60% of numbers have a skew towards early activity. This implies that most numbers have a high message volume early in the lifetime, and consequently, most of the activity of the number has been completed by the time it is shut down. If carriers are disabling numbers (for exceeding a message rate cap, for example), they are doing so well after most numbers have seen their peak use. Likewise, if online services are considering a number invalid for phone verification, they are still permitting a high-volume of registration requests for a number (in aggregate) before blacklisting the number.

**User Location Leakage:**
Some gateways advertise their services towards users seeking privacy or anonymity. Although SMS does not provide either of these properties, the use of a gateway may provide a sense of anonymity for a user registering for a service. Shortened URLs (often provided in space-constrained SMS messages) leak information about the user clicking the link to the URL-shortening service. With the statistics we collected from these services, we identified both the source and destination countries for each message. We also found that the users of these services are located in significantly different locations. We do not attempt to deanonymize, track, or identify any users; our data consists solely of publicly-available aggregate click statistics.

The number of clicks recorded ranged from 0 to 1,582,634, with a median of 10. This data represents any click to these URLs, not just those from the gateway pages. To prevent skewing our data with popular and spam messages, we focused on URLs with ≤ 10 clicks, as many incoming links expected by users of SMS gateways are likely clicked a small number of times. We collected the countries associated with each of the remaining 2,897 clicks and aggregated the results. Figure 5c shows the total clicks for each country across all shortened URLs. 194 clicks could not be mapped because specific country information was not available or the service identified that the request was from an anonymizing proxy service.

Also in our data were "test" messages sent by users testing the services. These messages provide another window into the user base. Figure 5b and Table XI in the appendix show that the geographical extent of these users goes well beyond the home countries of gateway numbers. Users of gateways may not be aware that these URLs and messages are leaking metadata, and gateways do not adequately warn users of this danger. We consider the use of a gateway as an anonymizing service to be a subset of PVA evasion, as users are attempting to evade phone verification, albeit for a different intent.

### Detecting Gateways
As discussed above, these gateways facilitate PVA evasion, and the demographic data we can obtain about the users of these services clearly shows usage patterns consistent with PVA fraud. It is clear that, in most cases, even reputable, well-funded online services are not successfully defending against these (and similarly, for-pay gateways). Although number lifetimes are short, the sheer volume of verification messages in our data indicates that evasion is still an effective driver of profit for gateways.

PVA evasion is not new to online services. Google, in particular, is acutely aware of this problem, having published a paper on the topic [72]. In that paper, Thomas et al. propose several strategies to detect PVA evasion, including blocking irreputable carriers, restricting how quickly numbers can verify accounts, and phone re-verification. In this section, we explore the recommendations in [72] and discuss how our data shows that these recommendations are unlikely to be effective:

**Carrier Reputation:**
While we only see one of the carriers identified as abuse-prone in [72] (bandwidth.com), blacklisting blocks of numbers by carrier would not stop all PVA evasion. Carrier-based blocking is prohibitively expensive for all but the largest organizations. We obtained Twilio data for each number in our dataset, and although the cost was relatively small ($0.005/lookup), scaling this (and additional number metadata such as CNAM and HLR data) to cover all of a business’s customers represents a substantial cost. Furthermore, ...