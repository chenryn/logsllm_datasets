针对最后一个斜杠后面的部分的规则。
.PP
一旦找到了一个规则，它将用作产生匹配的词。如果没有找到，将进行上面
\fBCompleting\fP 中描述的 \fBbash\fP 默认的补全。
.PP
首先，将执行规则指定的动作。只有以被补全的词开始的匹配词才会被返回。
当在文件或目录名补全中使用
.B \-f
或
.B \-d
选项时，shell 变量
.SM
.B FIGNORE
将用于对匹配进行过滤。
.PP
接下来，将产生所有由\fB\-G\fP 选项给出的文件名扩展模式指定的补全。
模式产生的词不必匹配要补全的词。shell 变量
.SM
.B GLOBIGNORE
不会用于过滤匹配结果，但是变量
.SM
.B FIGNORE
会被使用。
.PP
接下来，将考虑 \fB\-W\fP 选项的参数指定的字符串。这个字符串首先被
划分，用特殊变量
.SM
.B IFS
中的字符作为分隔符。shell 引用被当作一个词。
接下来，每个词被扩展，使用上面
.SM
.BR EXPANSION 
中描述的
brace expansion, tilde expansion, parameter 和 variable expansion,
command substitution, arithmetic expansion, 以及 pathname expansion
规则处理。对于结果，再使用上面 \fBWord Splitting\fP 中描述的规则划分成词。
扩展的结果与要补全的词进行前部一致的比较，匹配的词成为可能的补全。
.PP
在这些匹配被产生后，任何由 \fB\-F\fP 和 \fB\-C\fP 选项指定的
shell 函数和命令将被执行。当命令或函数被执行时，变量
.SM
.B COMP_LINE
和
.SM
.B COMP_POINT
被赋值，使用上面 \fBShell Variables\fP 中的规则。
如果要执行 shell 函数，还将设置变量
.SM
.B COMP_WORDS
和
.SM
.B COMP_CWORD
当函数或命令被执行时，第一个参数是等待参数被补全的命令的名称，
第二个参数是要补全的词，第三个参数是当前命令行中，要补全的词前面的词。
对要补全的词产生的补全不会进行任何过滤；函数或命令在产生匹配时有完全的自由。
.PP
任何 \fB\-F\fP 指定的函数将被首先执行。函数可以使用任何 shell 功能，
包含内建命令 \fIcompgen\fP，来产生匹配。它必须将可能的补全放到数组变量
.SM
.B COMPREPLY
中。
.PP
接下来，任何 \fB\-C\fP 选项指定的命令将被执行，其执行环境与命令替换
的环境相同。它应当向标准输出打印一个补全的列表，每行一个。
反斜杠可以用来转义一个新行符，如果需要的话。
.PP
所有可能的补全都产生之后，将对列表进行 \fB\-X\fP 选项指定的任何过滤。
过滤器是一个模式，和路径名扩展中的一样；模式中的 \fB&\fP 替换为
要补全的词。字面上的 \fB&\fP 可以用反斜杠转义；反斜杠在进行匹配时被删除。
任何匹配这个模式的补全将从列表中删除。前导的 \fB!\fP 将使模式含义相反；
这种情况下，任何不匹配这个模式的补全将被删除。
.PP
最后，\fPB\-P\fP 和 \fB\-S\fP 指定的任何前缀和后缀被添加到补全列表的每个
成员后面，结果返回给 readline 补全代码，作为可能的补全列表。
.PP
如果先前执行的动作没有产生任何匹配，并且在定义 compspec 规则时，为
\fBcomplete\fP 命令提供了 \fB\-o dirname\fP 选项，将尝试目录名补全。
.PP
默认情况下，如果找到了一个规则，它产生的任何东西都被返回给补全代码，
作为可能的补全的全集。不再尝试默认的 \fBbash\fP 补全，readline 默认的
文件名补全也会禁止。如果定义规则时，为 \fBcomplete\fP 命令提供了
\fB\-o default\fP 选项，在规则没有产生匹配时将进行 readline 默认的补全处理。
.PP
当一个规则指出期望目录名补全时，可编程补全函数强制 readline 在补全的名称
后面添加一个斜杠，如果它是一个到目录的符号连接。然后还要经过 readline 变量
\fBmark\-directories\fP 的值处理，不管 readline 变量 
\fBmark\-symlinked\-directories\fP 的值是什么。
.SH 历史(HISTORY)
当启用内建命令
.B set
的
.B \-o history
选项时，shell 允许访问 \fIcommand history\fP，以前输入的命令的列表。
\fBHISTSIZE\fP 的值用作命令列表中保存的命令数量。
过去
.SM
.B HISTSIZE
个 (默认为500) 命令将被保存。shell 将每条命令在进行参数和变量扩展之前
保存到历史列表中 (参见上面的
.SM
.B EXPANSION
段落)，但是是在历史扩展进行之后，并且要经过 shell 变量
.SM
.B HISTIGNORE
和
.SM
.BR HISTCONTROL
处理。
.PP
在启动时，历史根据以变量
.SM
.B HISTFILE
的值为名的文件 (默认是 \fI~/.bash_history\fP) 进行初始化。
如果需要的话，以
.SM
.B HISTFILE
为名的文件将被截断，来包含不超过变量
.SM
.BR HISTFILESIZE
的值指定的行数。当交互 shell 退出时，最后
.SM
.B $HISTSIZE
行被从历史列表中复制到
.SM
.BR $HISTFILE
文件中。如果启用了 shell 选项
.B histappend
(参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节中对内建命令
.B shopt
的描述)，这些行被追加到历史文件中，否则历史文件被覆盖。如果
.SM
.B HISTFILE
被取消定义，或者如果历史文件不可写，历史将不会保存。保存历史之后，
历史文件被截断，以包含不超过
.SM
.B HISTFILESIZE
行。如果
.SM
.B HISTFILESIZE
被取消定义，不会进行截断操作。
.PP
内建命令
.B fc
(参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节) 可以用来列出或修改并重新执行历史列表中的一部分。内建命令
.B history
可以用来显示或修改历史列表，操作历史文件。当使用命令行编辑时，每种
编辑模式都有搜索命令，提供对历史列表的访问。
.PP
shell 允许控制哪些命令被保存到历史列表中。可以设置
.SM
.B HISTCONTROL
和
.SM
.B HISTIGNORE
变量，来使得 shell 只保存输入命令的一个子集。shell 选项
.B cmdhist
如果被启用，将使得 shell 将多行的命令的每一行保存到同一个历史条目中，
在需要的地方添加分号来保证语义的正确性。shell 选项
.B lithist
使得 shell 保存命令时，保留嵌入的新行而不是用分号代替。参见下面
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
中，内建命令
.B shopt
的描述，有关设置和取消 shell 选项的信息。
.SH 历史扩展("HISTORY EXPANSION")
.PP
shell 支持历史扩展机制，类似于
.BR csh
中历史扩展。这一节描述了可用的语法特征。在交互的 shell 中这一机制被默认启用，
可以使用内建命令
.B set
的
.B \-H
选项来禁用它 (参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节)。非交互的 shell 默认不进行历史扩展。
.PP
历史扩展将历史列表中的词引入输入流中，使得可以方便地重复已执行命令，
在当前输入行中为前一个命令插入新的参数，
或者快速修正前一个命令中的错误。
.PP
历史扩展在读入一整行后，在 shell 将它拆分成词之前立即进行。它
由两部分组成。首先是判断替换中使用历史列表中哪一行。其次是选择那一行中要包含到当前行中的部分。
从历史中选择的行称为 \fIevent\fP，从那一行中选择的部分是 \fIwords\fP。
可以用多种多样的 \fImodifiers\fP 来操纵所选的词。在读入输入时，行被按照同样方式分解成词，
因此多个以 \fImetacharacter\fP 分隔的词，如果被引号包含，就被当成一个词。
历史扩展由历史扩展字符引入，默认是 \^\fB!\fP\^。只有反斜杠 (\^\fP\e\fP\^) 和单引号可以引用历史扩展字符。
.PP
内建命令
.B shopt
可以设定多个选项值，来调整历史扩展的行为。如果 shell 选项
.B histverify
被启用 (参见内建命令
.B shopt
的描述)，并且正在使用
.B readline，
历史替换不会被立即传给 shell 解释器。与此相对，扩展后的行被重新载入
.B readline
编辑缓冲区，进行进一步的修改。如果正在使用
.B readline，
并且启用了 shell 选项
.B histreedit，
失败的历史替换将被重新载入到
.B readline
编辑缓冲区，进行改正。内建命令
.B history
的
.B \-p
选项可以用来在执行之前查看历史扩展将如何进行。内建命令
.B history
的
.B \-s
选项可以用来在历史列表末尾添加命令，而不真正执行它们，从而
在接下来的调用中可以使用它们。
.PP
shell 允许控制历史扩展机制使用的多种字符 (参见上面的
.BR "Shell Variables"
中
.B histchars
的描述)。
.SS Event Designators
.PP
事件指示器 (event designator) 是一个对历史列表中某个命令行条目的引用。
.PP
.PD 0
.TP
.B !
开始一个命令替换，除非后面跟随的是
.BR blank ,
newline, = 或是 (.
.TP
.B !\fIn\fR
引用命令行
.IR n .
.TP
.B !\-\fIn\fR
引用当前命令行减去
.IR n .
.TP
.B !!
引用上一条命令。这是 `!\-1' 的同义词。
.TP
.B !\fIstring\fR
引用最近的以
.IR string 
开始的命令。
.TP
.B !?\fIstring\fR\fB[?]\fR
引用最近的包含
.IR string
的命令。尾部的 \fB?\fP 可以被忽略，如果
.I string
之后紧接着一个新行符。
.TP
.B \d\s+2^\s-2\u\fIstring1\fP\d\s+2^\s-2\u\fIstring2\fP\d\s+2^\s-2\u
快速替换。重复上一条命令，将
.I string1
替换为
.IR string2 .
与
``!!:s/\fIstring1\fP/\fIstring2\fP/'' 等价
(参见下面的 \fB修饰符 (Modifiers)\fP)。
.TP
.B !#
到此为止输入的整个命令行。
.PD
.SS Word Designators
.PP
词指示器 (word designator) 用于从 event 中选择期望的词。
.B :
分隔 event 规则与 word 指示器。它可以忽略，如果词指示器以
.BR ^ ,
.BR $ ,
.BR * ,
.BR \- ,
或
.BR %
开始。词被从行首开始编号，第一个词被表示为 0。插入当前行中的词以单个空格分隔。
.PP
.PD 0
.TP
.B 0 (zero)
第 0 个词。对 shell 来将，这是命令名。
.TP
.I n
第 \fIn\fR 个词。
.TP
.B ^
第一个参数。也就是，第 1 个词。
.TP
.B $
最后的参数。
.TP
.B %
最近一次搜索 `?\fIstring\fR?' 匹配的词。
.TP
.I x\fB\-\fPy
一组词；`\-\fIy\fR' 是 `0\-\fIy\fR' 的简写。
.TP
.B *
所有词，除了第 0 个。这是 `\fI1\-$\fP' 的同义词。如果 event 中只有一个词，使用
.B *
也不是错误；这种情况下将返回空字符串。
.TP
.B x*
\fIx\-$\fP 的简写。
.TP
.B x\-
\fI\-$\fP 的简写，就像 \fBx*\fP 一样，但是忽略最后一个词。
.PD
.PP
如果给出了一个 word 指示器，没有给出 event 规则，前一个命令将用作 event。
.SS 修饰符 (Modifiers)
.PP
可选的 word 指示器之后，可以出现一个或多个下述 modifiers 的序列，每一个都前缀有 `:'。
.PP
.PD 0
.PP
.TP
.B h
删除文件名组成的尾部，只保留头部。
.TP
.B t
删除文件名组成中前面的成分，保留尾部。
.TP
.B r
删除 \fI.xxx\fP 形式中尾部的后缀成分，保留基本名称部分。
.TP
.B e
删除所有内容，保留尾部的后缀。
.TP
.B p
打印新的命令，但是不执行它。
.TP
.B q
引用替换所得的词，使它不再进行替换。
.TP
.B x
引用替换所得的词，类似与
.BR q ,