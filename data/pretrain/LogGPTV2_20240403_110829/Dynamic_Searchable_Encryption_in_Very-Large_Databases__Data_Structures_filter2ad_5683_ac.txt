The next hybrid shows that the labels and data ciphertexts for
unqueried keywords are pseudorandom. The only subtlety is
to verify that, because the list is maintained in lexicographic
order, the relationship between the unopened result sets is not
needed.
2
It is easy to prove secure (via a reduction to the above
theorem) a version of Πbas that does not maintain a sorted list
L, as long as the dictionary is history-independent.
In the random oracle model we can achieve adaptive
security for the same L if F is replaced with the random oracle
H so F (K, x) := H(K’x), and the encryption algorithm Enc,
on inputs K, m ∈{ 0, 1}λ, chooses a random r ∈{ 0, 1}λ and
outputs (r, H(K’r) ⊕ m). We denote this variant Πro
bas.
Theorem 3: Πro
bas is L-secure against adaptive attacks in
the random oracle model.
Proof sketch: This theorem is proved in a similar way to the
previous one, except that the simulator programs the random
oracle in response to adaptive queries to open the labeled
ciphertexts to match the query results as they are revealed.
For our version of the PRF and encryption scheme above,
the simulator can arrange for the random oracle responses to
point at random labels, and for the ciphertexts to decrypt to
the revealed results. The only defects in the simulation occur
when an adversary manages to query the random oracle with a
key before it is revealed, which can be shown to happen with
negligible in λ probability.
2
ALTERNATIVE APPROACH TO ADAPTIVE SECURITY. We
sketch how to modify our protocol to achieve adaptive security
without a random oracle at the cost of extra communication.
We choose the encryption scheme for the scheme to be of the
one-time pad form e.g. CTR mode with a random IV. Now
instead of sending the keys K1 and K2, the client computes
the labels and encryption pads herself and sends them to the
server, who can retrieve the labels and perform the decryption.
In general the client will not know when to stop, but we can
either have the client retrieve a server-stored encrypted counter
ﬁrst, or have the server send a “stop” message when all of
the results have been found. Note that the required additional
communication is proportional to the size of the result-set and
can overlap the disk access as well as the return of results.
Hence, the resulting scheme should perform in practice as good
as the prior schemes.
ASYMPTOTIC EFFICIENCY. The EDB consists of a dictionary
holding N = !w∈W |DB(w)|
identiﬁer/ciphertexts pairs.
Searching is fully parallelizeable if the dictionary allows
parallel access, as each processor can independently compute
F (K1, c) and retrieve/decrypt the corresponding ciphertext.
RELATION TO [5] A prior SSE scheme by Chase and Kamara
used a dictionary, but in a crucially different way. There, a
single label was associated with the entire set DB(w), and thus
security requires padding all of the result sets to the maximum
size. We instead associate one label with each result for a
keyword (so if there are T documents with a keyword, then
5
there are T independent labels in our scheme but only 1 label
in the Chase-Kamara scheme). This allows us to avoid padding
and enable parallel searching, resulting in signiﬁcant storage
savings and performance gains on large datasets.
A. Efﬁcient extensions
a
We
give
(denoted
Πpack, Πptr, Π2lev, with names explained below) that exhibit
the techniques in our most practical Π2lev construction.
sequence
of
three
schemes
REDUCING DICTIONARY RETRIEVALS: Πpack. During a
search for w, our basic construction performs |DB(w)| re-
trievals from the dictionary, each with an independent and
random-looking tag. Even an external-memory efﬁcient dic-
tionary will perform relatively poorly when the dictionary is
stored on disk.
Most prior schemes suffer from this drawback. To improve
locality we modify the basic construction to encrypt several
identiﬁers in each ciphertext. Speciﬁcally, we ﬁx a block size
B, and when building the results list, we process B identiﬁers
at a time and pack them into one ciphertext d, with the
same tag. We pad the last block of identiﬁers up to the same
length. Searching proceeds exactly as before, except the server
decrypts and parses the results in blocks instead of individually.
We denote this variant Πpack.
This reduces the number of disk accesses from |DB(w)|
dictionary retrievals to )|DB(w)|/B*. We can prove security
against non-adaptive or adaptive attacks under the same as-
sumptions, but with the leakage function LB that starts by
outputting !w∈W)|DB(w)|/B* instead of !w∈W |DB(w)|.
We note that
this leakage is incomparable to the original
leakage (see the discussion at the end of this section).
Theorem 4: Πpack is correct and LB-secure against non-
adaptive attacks if F is a secure PRF and (Enc, Dec) is RCPA-
secure.
The proof is a simple extension of the proof for the basic
construction. The essential observation is that the server only
needs to know how many of the packed blocks to create
in the encrypted index. Similar to before, we can achieve
adaptive security in the random oracle model or by increasing
communication. We defer the details to the full version.
FURTHER REDUCTION VIA POINTERS: Πptr. Πpack would be
inefﬁcient when returning very large sets DB(w), as the server
still performs )|DB(w)|/B* dictionary retrievals. Making B
large results in too much padding when the dataset contains
many keywords only appearing in a few + B documents.
We address this tension by modifying the scheme again,
calling the new variant Πptr. Πptr packages the identiﬁers into
encrypted blocks of B as before, but it stores these blocks in
random order in external memory and not in the dictionary
(technically, we say they are stored in an array). The scheme
will now use the dictionary to store encrypted blocks of b
pointers to these encrypted blocks. To search, the server will
retrieve the encrypted pointers from the dictionary and then
follow them to the encrypted identiﬁers.
Πptr is described in Figure 3. In this scheme, the EDB con-
sists of a dictionary γ holding encrypted blocks of b pointers
Setup(DB)
1. K $←{ 0, 1}λ; allocate array A, list L
2. For each w ∈ W :
Set Ki ← F (K, i’w) for i = 1, 2
T ← )DB(w)/B*
Partition DB(w) into B-blocks I1, . . . , IT
Pad IT up to B entries if needed
Choose random empty indices i1, . . . , iT in A
For j = 0, . . . , T (store id blocks in array)
d ← Enc(K2, Ij); Store A[ij] ← d
T $ ← )T /b*
Partition {i1, . . . , iT } into b-blocks J1, . . . , JT !
Pad JT ! up to b entries if needed
For c = 0, . . . , T $(store ptr blocks in dict.)
" ← F (K1, c) ; d$ ← Enc(K2, Jc)
Add (", d$) to L
Set γ ← Create(L)
3. Output the client key K and EDB = (γ, A).
Search
Client: On input (K, w),
K1 ← F (K, 1’w), K2 ← F (K, 2’w)
Send (K1, K2) to the server.
Server: For c = 0 until Get returns ⊥,
d ← Get(γ, F (K1, c))
(i1, . . . , ib) ← Dec(K2, d)
For j = 0, . . . , b (ignore padding indices)
m ← Dec(K2, A[ij])
Parse and output ids in m
Fig. 3. Scheme Πptr.
and an array A holding blocks of B encrypted identiﬁers for a
given keyword, where b and B are block size parameters to be
chosen. The setup algorithm stores blocks of encrypted results
in random locations in A, and then stores encrypted pointers
to those locations in γ, with labels that allow retrieval similar
to the prior variants.
In the full version we show that this variant achieves the
security for the leakage function Lb,B which initially outputs
!w∈W)|DB(w)|/B* and !w∈W)|DB(w)|/(bB)*, which are
the number of blocks in γ and A respectively, and later
leakages are just the identiﬁers as before.
MOST PRACTICAL VARIANT: Π2lev. In real data sets the
number of records matched by different keywords will vary
by several orders of magnitude. This presents a challenge in
optimizing our variants, and we could not ﬁnd a setting of B
and b that gave an acceptable trade-off between index size (due
to padding) and search time. Small sets DB(w) still resulted in
a large block of size B in the dictionary and a large block of
size b in the array, while huge sets still required many retrievals
from the dictionary.
Thus we again modify the scheme to extend the ideas
before, calling the new variant Π2lev. The crucial difference is
that sets DB(w) can be processed and stored differently based
on their sizes, with an extra level of indirection for very large
sets that explains the name. Care must be taken to do this with
an acceptable form of leakage.
Below we describe the Πpack variant formally. At a high
6
Setup(DB)
1. K $←{ 0, 1}λ allocate list L, array A
2. For each w ∈ W
Set Ki ← F (K, i#w) for i = 1, 2
T ← $| DB(w)|/B%
If |DB(w)|≤ b (small case: ids in dict.)
Pad DB(w) to b elements
! ← F (K1, 0); d ← Enc(K2, DB(w))
Add (!, d) to L
If |DB(w)| > b (medium/large cases)
Partition DB(w) into B-blocks I1, . . . , IT
Pad IT up to B elements
Choose random empty indices i1, . . . , iT in A
For j = 1, . . . , T (store ids in array)
d ← Enc(K2, Ij); A[ij] ← d
If T ≤ b (medium case: ptrs in dict.)
Pad {i1, . . . , iT } to b elements
! ← F (K1, 0); d! ← Enc(K2, i1#· · ·# ib)
Add (!, d) to L
If b b
w:|DB(w)|>bB
The value m is the number of data items in γ, and the value S
is the number of blocks in A. This is leaking S itself, which is
deﬁned by the above sum, and not the individual summands,
resulting leakage that is incomparable to our other variants and
to prior schemes. On search queries L has the same leakage
as before.
Theorem 5: Π2lev is correct and Lm,b,B-secure against
non-adaptive attacks if F is a secure PRF and (Enc, Dec) is
RCPA-secure.
We can prove adaptive security either in the random oracle
model or by increasing communication. We defer this simple
extension to the full version.
POINTERS VS. IDENTIFIERS. Although pointers are smaller
than identiﬁers in our implementations, Π2lev packs the same
number of pointers or identiﬁers together (b in the dictionary,
or B in the array) to simplify the presentation. The actual im-
plementation packs more pointers into a block than identiﬁers.
Formally, we introduce parameters b$, B$, and modify Π2lev as
follows.
• When storing identiﬁers in the dictionary (in the small
case), it packs up to b of them together, but when storing
pointers there it packs b$ in the same amount of space.
• When storing identiﬁers in the array (in the medium and
large cases), it packs up to B of them together, but when
storing pointers there it packs B$ together in the same
amount of space.
This causes an analogous change to the value S leaked, which
can be calculated similarly. We defer the formal analysis
(which is almost identical to that of Π2lev) to the full version.
The
leakage
DISCUSSION.
LEAKAGE
functions
LB, Lb,B, Lm,b,B are non-standard. First consider LB, and
how it compares to L which outputs N = !w∈W |DB(w)|.
Any input DB with m unique keywords, each with
|DB(w)|≤
b, will be indistinguishable under LB, but
many of them will not be under L. A similar incomparability