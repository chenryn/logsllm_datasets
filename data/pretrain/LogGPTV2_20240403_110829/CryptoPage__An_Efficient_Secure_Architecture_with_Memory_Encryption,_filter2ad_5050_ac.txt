operation is not very frequent. In addition, the values of
the intermediate nodes in the tree are cached to reduce the
length of the path to check.
4By using an SHA-1 hash implementation running in about 80 cycles.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006C
P
I
d
e
z
i
l
a
m
r
o
N
C
P
I
d
e
z
i
l
a
m
r
o
N
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
 0.8
 0.6
 0.4
 0.2
 0
2.22
0.99
2.37
0.37
0.97
0.67
1.76
1.00
1.95
0.88
i
p
z
g
r
p
v
c
c
g
f
c
m
r
e
s
r
a
p
k
m
b
l
r
e
p
p
a
g
x
e
t
r
o
v
2
p
z
b
i
f
l
o
w
t
HIDE
CP/HIDE
CP/HIDE Lazy 512
(a) Comparison for three architectures.
)
%
(
n
o
i
t
a
d
a
r
g
e
d
C
P
I
 60
 50
 40
 30
 20
 10
 0
i
p
z
g
r
p
v
c
c
g
f
c
m
r
e
s
r
a
p
k
m
b
l
r
e
p
p
a
g
x
e
t
r
o
v
2
p
z
b
i
f
l
o
w
t
CP/HIDE 0
CP/HIDE 1024
(b) Slowdown comparison for four Merkle cache sizes.
CP/HIDE 256
CP/HIDE 512
2.22
0.99
2.37
0.37
0.97
0.67
1.76
1.00
1.95
0.88
2.22
0.99
2.37
0.37
0.97
0.67
1.76
1.00
1.95
0.88
C
P
I
d
e
z
i
l
a
m
r
o
N
 1
 0.8
 0.6
 0.4
 0.2
 0
i
p
z
g
r
p
v
c
c
g
f
c
m
r
e
s
r
a
p
k
m
b
l
r
e
p
p
a
g
x
e
t
r
o
v
2
p
z
b
i
f
l
o
w
t
i
p
z
g
r
p
v
c
c
g
f
c
m
r
e
s
r
a
p
k
m
b
l
r
e
p
p
a
g
x
e
t
r
o
v
2
p
z
b
i
f
l
o
w
t
1 MAC / 1 line
1 MAC / 2 lines
1 MAC / 4 lines
1 MAC / 1 line
1 MAC / 2 lines
1 MAC / 4 lines
(c) Slowdown comparison for different MAC per cache line
ratio.
(d) Slowdown comparison for different MAC per cache line
ratio (speculative execution).
Figure 7. Simulation results.
3.2. Evaluation
To
ran
our
evaluate
propositions, we
several
SPEC2000int [9] benchmarks with the SimpleScalar [1]
out-of-order simulator modiﬁed to implement our ar-
chitecture. To reduce the time needed to perform the
simulations, we skipped the ﬁrst 1.5 billion instructions
and we performed a detailed simulation for 200 million
instructions.
In Figure 7a, we compare the instructions per cycle (IPC)
ratio of each benchmark for three different implementa-
tions:
• our implementation of the HIDE [30] infrastructure
(8K chunks, all chunks protected, no layout optimiza-
tions)
• a basic implementation of our architecture (without a
Merkle tree cache, the instructions have to be checked
before being executed)
• an advanced implementation of our architecture (with
a fully-associative Merkle tree cache of 512 entries,
speculative execution of instructions during integrity
checking).
All the IPC are normalized to the original value obtained
when we run the benchmarks on a normal, unmodiﬁed, ar-
chitecture without any security features.
Our basic architecture gives bad results (up to 50 % slow-
down on some benchmarks). This is partly due to the high
cost of the veriﬁcation of the Merkle tree at each TLB miss,
especially with the benchmark mcf which has a high TLB
miss ratio.
The advanced version of our architecture gives good re-
sults. The average slowdown is only 3 % and the worst is
7.4 % (with the benchmark parser).