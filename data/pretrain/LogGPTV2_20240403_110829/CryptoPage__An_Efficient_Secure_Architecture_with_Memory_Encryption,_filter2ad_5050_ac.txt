### Operation Frequency and Caching

The operation is not very frequent. Additionally, the values of the intermediate nodes in the tree are cached to reduce the length of the path that needs to be checked.

### SHA-1 Hash Implementation

By using an SHA-1 hash implementation that runs in approximately 80 cycles, we can achieve efficient performance.

### Conference Information

Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)  
0-7695-2716-7/06 $20.00 Â© 2006

### Simulation Results

#### Figure 7: Simulation Results

**Figure 7a: Comparison for Three Architectures**

- **HIDE**: 
  - IPC: 1.00
- **CP/HIDE (Basic)**:
  - IPC: 0.88
- **CP/HIDE Lazy 512 (Advanced)**:
  - IPC: 0.99

**Figure 7b: Slowdown Comparison for Four Merkle Cache Sizes**

- **CP/HIDE 0**:
  - IPC: 0.88
- **CP/HIDE 256**:
  - IPC: 0.97
- **CP/HIDE 512**:
  - IPC: 0.99
- **CP/HIDE 1024**:
  - IPC: 1.00

**Figure 7c: Slowdown Comparison for Different MAC per Cache Line Ratio**

- **1 MAC / 1 line**:
  - IPC: 1.00
- **1 MAC / 2 lines**:
  - IPC: 0.99
- **1 MAC / 4 lines**:
  - IPC: 0.97

**Figure 7d: Slowdown Comparison for Different MAC per Cache Line Ratio (Speculative Execution)**

- **1 MAC / 1 line**:
  - IPC: 1.00
- **1 MAC / 2 lines**:
  - IPC: 0.99
- **1 MAC / 4 lines**:
  - IPC: 0.97

### Evaluation

To evaluate our propositions, we used several SPEC2000int [9] benchmarks with the SimpleScalar [1] out-of-order simulator, which was modified to implement our architecture. To reduce the time needed for the simulations, we skipped the first 1.5 billion instructions and performed a detailed simulation for 200 million instructions.

In Figure 7a, we compare the instructions per cycle (IPC) ratio of each benchmark for three different implementations:

- **Our implementation of the HIDE [30] infrastructure**:
  - 8K chunks, all chunks protected, no layout optimizations.
- **A basic implementation of our architecture**:
  - Without a Merkle tree cache, instructions have to be checked before being executed.
- **An advanced implementation of our architecture**:
  - With a fully-associative Merkle tree cache of 512 entries, speculative execution of instructions during integrity checking.

All IPC values are normalized to the original value obtained when running the benchmarks on a normal, unmodified architecture without any security features.

#### Performance Analysis

- **Basic Architecture**:
  - The basic architecture yields poor results, with up to a 50% slowdown on some benchmarks. This is partly due to the high cost of verifying the Merkle tree at each TLB miss, especially with the benchmark `mcf`, which has a high TLB miss ratio.

- **Advanced Architecture**:
  - The advanced version of our architecture performs well. The average slowdown is only 3%, and the worst case is 7.4% (with the benchmark `parser`).

This evaluation demonstrates the effectiveness of our advanced architecture in maintaining performance while providing enhanced security.