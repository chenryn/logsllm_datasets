JPanel north = new JPanel(l;
// North
getContentPane () .setLayout (new
super("Activeobject Sample"):
final
1 JTextField textfield = new JTextField("word", 10);
 BorderLayout.NORTH) ;
BorderLayout.CENTER);
BorderLayout());
练习问题的解答
---
## Page 468
kva各线程设谢模式
class Proxy
package activeobject;
List A12-8
public interface Activeobject f
package activeobject;
List A12-7
URL = "+ url);
 public abstract Result search(String word);
public Proxy (SchedulerThread scheduler,
private final Servant servant;
private
private
this.servant = servant;
this.scheduler = scheduler;
}.start(};
new Thread() {
/1等待查找结果的线程
println("Searching
final Result result = activeobject.searchiword):
/”查找的调用
 final SchedulerThread scheduler:
修改后的 Proxy 类(Proxy.java)
锋改后的 ActiveObject 界面(ActiveObject.java)
public void run()
void
 implements Activeobject {
SwingUtilities.invokeLater(
//获得结果了，请EventDispatching Thread子以显示
！等待结果
final String url = (String)result.getResultvalue ():
searchWord(final String word)
new Runnable() {
public void run() {
MyFrame.this.println("word = " + word + ",
Servant servant) {
---
## Page 469
URL
public class Servant implements Activeobject 
package activeobject;
List A12-10
String word) {
class SearchRequest extends MethodRequest
package activeobject;
wordl};
List A12-9
public Result searchiString word) [
 public SearchRequest(Servant servant,
 private final String word;
public void execute() {
public Result searchistring word)
 String url = "http://somewhere/" + word + ".html"; // dummy
System.out.println("found.");
(m(. + paom + )uoaeas)autid·no uass
for （int i = 0; i < 50; i++) {
Result result = servart.search(word);
future.setResult(result);
this.word  word;
super(servant, future);
return future;
scheduler.invoke(new
FutureResult future = new FutureResult();
try f
修改后的 Servant 类(Servantjava)
修改后的 SearchRequest 类(SearchRequest.java)
catch (InterruptedException e) [
Thread.sleep(100) ;
SearchRequest (servant,
FutureResult future:
练习问题的解答
future,
455
---
## Page 470
FutureResult、RealRcsult的各类与范例程序的是一样的。
解答 2 ： 将查找到的 [URI 适固作为对 MyFrame 类的调用(ml调用 MyFrame)
ActiveObjectFactory, SchedulerThread, ActivationQueue, MethodRequest、 Result.
10);
ActionListener
public 
inport activeobject.Display:
import activeobject.Result;
import activeobject.Activeobject:
import
import
import
import
import
import
import
import
import java.io.l0Exception:
List A12-12
public class Main f
List A12-11
mport
mport
import
import
private final 
private final
(sbre [jhutiisluieu pioa steeis oitqnd
activeobject.ActiveobjectFactoryi
javax.swing.JPanel;
 javax.swing.JScrollPane;
javax.swing.JTextField;
javax.swing.Swingutilities;
javax.swing.JTextArea;
javax.swing.JButton;
javax.swing.JFrame;
java.awt.event.ActionEvent;
java.awt,event.ActionListener;
java.awt.BorderLayout;
javax.swing.JLabel;
new MyFrame (l;
class
returr new RealResult(url);
修改后的 MyFrame 类(MyFrame.java)
修改后的 Main 界面(Main.java)
MyFrame
 JButton button = new JButton ("Search");
JTextFieid textfield = new JTextField("word"
extends
JFrame
 implements 
Display;
---
## Page 471
("line,separator");
createActiveObject();
//查找
private void printlr.(String line)
public void actionPerformed(ActionEvent e) l
private final static String NEWLINE
//显：
//[Search范例程序的执行步骤范例程序的执行步骤]按钮被按着时
public MyFrame() [
private final Activeobject activeobject = ActiveobjectFactory.
private final JTextArea textarea = new JTextArea(20, 30);
//查找的调用
searchWord(textfield.getText());
setvisible(true);
pack(); 
setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
getcontentPane() .add(center,
getContentPane() .add (north,
// Center
button.addActionListener(this);
north.add(button);
north.add(textfield);
north,add (new JLabel("Search:"));
//Layout
getContertPane ().setLayout(new BorderLayout ());
buper("ActiveObject Sample");
卡
// North
 BorderLayout.NORTH) ;
BorderLayout.CENTER) ;
= System.getProperty
练习问题的解答
5
---
## Page 472
class Proxy implements Activeobject ↑
package activeobject;
List A12-15
public interface Activeobject {
package activeobject:
List A12-14
public interface Display
package activeobject:
List A12-13
 public abstract void search(String word, Display display);
public Proxy (SchedulerThread scheduler.
private final Servant servant;
private final SchedulerThread scheduler;
public abstract void display(string linel;
public void display(final String line) {
//显示
this,servant = servant;
this.scheduler = scheduler:
SwingUtilities.invokeLater(
//请 Event Dispatching Thread予以显示
println("searching " + word + "...");
activeobject.search(word, this);
修改后的 Proxy 类(Proxy.java)
修改后的 ActiveObject 界面(ActiveObjeci java)
修改后的 Display 界面(Display java)
new Runnable(） {
MyFrame.this.println(line);
Servant servant) {
---
## Page 473
public class Servant implements Activeobject ↑
package activeobject;
List A12-17
class SearchRequest extends MethodRequest f
package activeobject;
List A12-16
 publie void search(string wora.
public void execute() {
public SearchRequest (Servant servant, String word, Display display)
private final Display display:
private final String word;
(Aeidsip Aeidsta 'pion bugans)uoreas ptoa ortand
servant.search(word, display);
//将结果display 出来
String url = "http://somewhere/" + word + ".html"; // durmy URL
System,out.println("found."):
for iint i
super(servant, null);
scheduler.invoke(new SearchRequest.(servant., word, display)):
this.display =
this.word = word;
System,out.print(".");
l catch (InterruptedException e) {
try I
修改后的 Servant 类(Servantjava)
修改后的 SearchRequest 类(SearchRequestjava)
Thread.sleep(l0o);
=0;<50;i++)t
display;
Display display)
练习问题的解答
---
## Page 475
线：
-
Java 的内存模型
附录B
---
## Page 476
补充说明：与硬件的主存储器无关
copy)。
在工作存储器内，存在有主存储器中必要部分的拷贝，称之为工作拷贝（working
实例所拥有的字段即位于上存储器内的区域。主存储器为所有的线程所共有。
补充一点：阅读前的建议
但这个规格在解读上十分困难。
言规格书第2版”（参照附录E[JLS]）的第17章“线程（thread）与锁定（lock）”，
462
（working memory）两种，各自担负以下的功能。
概念：
谈的主存储器与工作存储器，都只是为了解说 Java 内存模型所假设出来的
Java的内存模型
主存储器与工作存储器
Java 内存模型的主存储器，与计算机硬件上所讲的主存储器无关。我们所
Java 内存模型的概念图请参见阁 B-I.
主存储器就是实例位置所在的区域，所有的实例都存在于主存储器内。尤其，
Java 的内存模型，亦即Java 执行处理系统所设置的内存模型，规定于“Java 语
附录B仅说明此项规定的理由。
·volatile不负责线程的共享互斥
·synchronized负责线程的共享互斥
·数个线程所共有的字段，由 synchronized或volatile来保护
在您开始阅读附录B之前，应该先熟记下列多线程的基本规则。
● Double Checked Locking Pattern 的危险性
（ ）（）
因此，本书将在下面针对以下重点进行详细解说。
在附录 B，我们要来解说Java 的内存模型。
volatile的两项功能
synchronized的两项功能
---
## Page 477
指定字段
(assign）。指定完成后，工作拷贝的内容便会映像到主存储器（store→write）。至
来决定。
才引用工作拷贝（read一load-use)。会出现哪一种状况，是由 Java 执行处理系统
所制作的工作拷贝（限use）、也可能会先重新从主存储器拷贝到工作存储器，然后
→load)。
（working copy）。拷贝完成后，线程就会引用工作拷贝（在图B-1，相当于read
当于图 B-1中的 read→load)。通过此项拷贝所得到的值，会成为工作拷贝
字段（field）的引用
当同一线程再度引用同一字段的值时，会发生什么事呢？线程或许会引用刚才
当线程欲将值指定给字段时，会一次将值指定给位于工作存储器上的工作拷贝
线程无法直接对主存储器进行操作，因此它也无法将值直接指定给字段。
当线程欲引用字段的值时，会一次将值从主存储器拷贝到工作存储器上（相
线程无法对主存储器直接进行操作，因此它也无法直接引用字段的值。
主存储器
assign
use
线程A
read
load 
内存区
线程A的工作
图B-1Java内存模型的概念图
.
store
工作拷贝
实例
线程B
123工作拷贝
Java 的内存模型
附录B
403
---
## Page 478
464
[JLS]里称为“操作（action）”。这6个action 都为不可分割（indivisible）的最小单
六个操作（action）
补充一点：自变量与局部变量（local variable）位于何处？
就没有可以再把方法中的计算顺序、指定顺序、不需要的指定等予以最佳化的空间
行处理系统的升级空间。如果规定线程所计算出来的结果都必须映像至主存储器，
成最新状态，因为自已的笔记本上所记载的内容，可能还是之前黑板上的内容。
写在自己的笔记本上，而必须写在黑板上才行。
法窥到其他同学的笔记本。如果想要把自己的计算结果拿给其他同学看，就不能只
在适当的时机，再写在黑板（主存储器）上。
段的值）抄写在白己所拥有的笔记本（工作存储器）上。学生（线程）利用抄写下
而工作存储器则好比是学生（线程）们各自拥有的“笔记本”。
是每个人的笔记本
主存储器好比是大家都看得到的黑板；而工作存储器则像
作（assign→store→write）。会出现哪--种状况，还是由Java 执行处理系统来决定。
贝到主存储器。另外，线程也有可能在每次进行指定时，进行拷贝到主存储器的操
线程有可能只会对I作拷贝进行指定（限assign)。此时，只有指定的最后结果会拷
E[JLS]的第 17 章)。
存储器上，
主存储器或是工作存储器上，都不会发生问题。不过我们把它想成是位于工作
何处？由于方法的自变量与局部变量只由一个线程进行访问，因此无论是位于
图 B-1 所出现的 read、write、use、assign、lock、unlock 等方法，在附录E的
实例的字段在主存储器上，那么方法（method）的自变量与局部变量又位于
学生（线程）无法直接在黑板（主存储器）上计算，只能将黑板上的内容（字
为何要把这么麻烦的东西规定在Java 语言规格书昵？这是因为要预留Java 执
另外，当自己想要利用其他同学的计算结果时，必须将白记笔记本的内容更新
学生所能够看到的部分，只有抄写了黑板上内容的自己的笔记本而己，没有办
为了帮助大家的理解，我们米打个比方。主存储器就相当于教室里面的“黑板”
当同一线程反复指定至同一字段时，会发生什么事？在反复进行指定的期间，
可能比较容易了解。
---
## Page 479
(A)“强制写入主存储器”
亦即将会进行下一个处理。
欲进入 synchronized 时
synchronized block”的意思。
synchronized。例如“进入 synchronized"，指的就是“进入 synchronized 方法或