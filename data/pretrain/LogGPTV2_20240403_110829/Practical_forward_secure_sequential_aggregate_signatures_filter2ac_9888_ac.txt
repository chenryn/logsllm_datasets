straightforward. For an aggregate signature (cid:104)t, σ1,t(cid:105) over
messages m1,··· , mt, we have σ1,t =
j=1 zj where zj =
i,j mod n. In the ﬁrst iteration of the for loop in
rj ·(cid:81)l
(cid:81)t
i=1 sci,j
the veriﬁcation algorithm, we have:
l(cid:89)
i=1
uci,t
i
l(cid:89)
i=1
uci,t
i
zj)2T +1−t · z2T +1−t
t
· y ·
l(cid:89)
l(cid:89)
i=1
zj)2T +1−t · (rt ·
zj)2T +1−t · y
−1 ·
i,t )2T +1−t · y ·
sci,t
l(cid:89)
−ci,t
i
u
· y ·
uci,t
i
i=1
i=1
l(cid:89)
i=1
uci,t
i
(cid:48)
σ
zj)2T +1−t
1,t
j=1
j=1
j=1
j=1
= (
= (
= (
= (
· y ·
= σ2T +1−t
t−1(cid:89)
t−1(cid:89)
t−1(cid:89)
t−1(cid:89)
(cid:81)t−1
j=1 zj)2T +1−t
l(cid:89)
t−1(cid:89)
t−2(cid:89)
t−2(cid:89)
(cid:48)2 · y ·
= (
= (
j=1
j=1
i=1
σ
= (
zj)2T +2−t
Therefore after the ﬁrst iteration, zt is peeled oﬀ from σ1,t
and all other zjs are raised to the power of 2T +1−t. We set
σ(cid:48) = (
. In the second iteration, we have:
uci,t−1
i
zj)2T +2−t · y ·
l(cid:89)
i=1
uci,t−1
i
zj)2T +2−t · z2T +1−(t−1)
t−1
· y ·
l(cid:89)
i=1
uci,t−1
i
j=1
1
i = 1.
i=1 uci,1
So zt−1 is peeled oﬀ and now all other zjs are raised to a
power of 2T +2−t. Therefore in the j-th iteration (for j from
t to 1 ), zt+1−j is peeled oﬀ from the aggregate. In the last
iteration, σ(cid:48)2 · y ·(cid:81)l
· y ·(cid:81)l
i=1 uci,1
i = z2T
Our BM-F ssAgg1 signature scheme looks like a standard
aggregate signature scheme from the view of the signer: it
can aggregate signatures without any order simultaneously.
However it acts as a sequential aggregate signature in the
view of a veriﬁer: the veriﬁer must peel oﬀ component sig-
natures from the aggregate from the outmost layer to the
inner most layer in the veriﬁcation process. It is inherently
message order-preserving. Therefore, we do not need to add
an index number to each message to preserve its order as
the way in the BLS-F ssAgg signature scheme.
5.3 Security
Our BM-F ssAgg signature scheme is proven secure as-
suming the intractability of factoring of a large Blum-Willi-
ams integer. We state its security in the following theorem.
Theorem 1. Let A be an adversary that produces an ex-
istential forgery, in the forward secure aggregate security at-
tack model deﬁned in Deﬁnition 3, against the BM-F ssAgg1
signature scheme instantiated for T intervals. Assume that
A makes no more than qs signature queries, and succeeds
with probability  in time τ . Then there exists an algo-
rithm B which factors a Blum-Williams integer into its two
prime factors in time τ = τ + O(qs) with success probability
 ≥ /T .
Please see Appendix A for proof.
6. AR-F SSAGG1 SIGNATURE SCHEME
AND OTHERS
We can apply the same idea described in Section 5.1 onto
the AR F SS [3] to get the AR-F ssAgg1 signature scheme.
We present the AR-F ssAgg1 signature scheme in Table 3
and omit further discussion for the sake of page limitation.
Its correctness can be proved in the similar way as we prove
the correctness of the BM-F ssAgg1 signature scheme.
Like the BM-F ssAgg1 signature scheme, the AR-F ssAgg1
signature scheme is also proven secure assuming the intracta-
bility of factoring of a large Blum-Williams integer. We state
its security in the following theorem.
Theorem 2. Let A be an adversary that produces an ex-
istential forgery, in the forward secure aggregate security at-
tack model deﬁned in Deﬁnition 3, against the AR-F ssAgg1
signature scheme instantiated for T intervals. Assume that
A makes no more than qs signature queries, and succeeds
with probability  in time τ . Then there exists an algo-
rithm B which factors a Blum-Williams integer into its two
prime factors in time τ = τ + O(qs) with success probability
 ≥ /T .
Please see Appendix B for proof.
The idea described in Section 5.1 can also be applied onto
the GQ forward-secure signature scheme [15]. However, due
to its expensive key update (O(T )), the resulted F ssAgg1
scheme has a very expensive signer computation per message
cost 1 in the order of O(T ) which makes it non-practical. On
the other hand, the BM- and AR-F ssAgg1 schemes have
O(1) signer computation per message cost.
7. AUDIT LOG SECURITY
System logs are an important part of any secure IT sys-
tem. They record noteworthy events, such as user activity,
program execution steps, system resource usage as well as
system state and important data modiﬁcations. They also
provide a valuable view of the past and current states of
complex systems. Because of their forensic value, system
logs are an obvious target for attackers. An attacker who
gains access to a system naturally wishes to remove traces of
its presence in order to hide attack details or frame innocent
users. Therefore, providing forward-secure stream integrity
- resistance against post-compromise insertion, alteration,
1Signer computation per message cost includes the cost of
one aggregate and sign operation plus the cost of one key
update operation.
346
KeyGen(k, l, T )
Table 2: The BM-F ssAgg1 signature scheme
Generate random distinct k/2-bit primes p, q, each
congruent to 3 mod 4
n ← pq
for i = 1,··· , l pick si,0
ui ← 1/s2T +1
i,0 mod n
R← Z∗
pick r0
2,0,··· , s2
SK1 ← (n, T, 1, s2
and P K ← (n, T, u1,··· , ul, y)
return (SK1, P K)
n and compute y ← 1/r2T +1
n and compute
R← Z∗
0
l,0, r2
0)
1,0, s2
mod n
zt ← rt ·(cid:81)l
AggSign(SKt, M, σ1,t−1) (t = 1,··· , T and σ1,0 = 1)
Let SKt = (n, T, t, s1,t, s2,t,··· , sl,t, rt)
c1 ··· cl ← H(t, y, M )
i,t mod n
σ1,t ← σ1,t−1 · zt mod n
return (cid:104)t, σ1,t(cid:105)
i=1 sci
Upd(SKt−1) (t = 2,··· , T )
Let SKt−1 = (n, T, t − 1, s1,t−1, s2,t−1,··· , sl,t−1, rt−1)
return SKt = (n, T, t, s2
2,t−1,··· , s2
1,t−1, s2
l,t−1, r2
t−1)
AggVerify(P K, M1,··· , Mt,(cid:104)t, σ1,t)(cid:105))
Let P K = (n, T, u1,··· , ul, y)
for j = t··· 1,
· y ·(cid:81)l
i=1 uci,j
i
• compute c1,j ··· cl,j ← H(j, y, Mj)
• if j = t, compute σ(cid:48) ← σ2T +1−t
• else σ(cid:48) ← σ(cid:48)2 · y ·(cid:81)l
i=1 uci,j
1,t
i
deletion and re-ordering of log entries – is critical for any
application usin secure logging.
A number of cryptographic approaches have been pro-
posed to address audit log integrity for logs generated and
stored on local logging servers [6, 7, 13, 23]. Bellare and Yee
were the ﬁrst to deﬁne the forward-secure stream integrity, a
property required for any secure audit log system [6,7]. They
proposed using forward-secure MACs to mitigate potential
log server compromise and indexing to preserve log entry or-
der. Schneier and Kelsey constructed a similar system, also
using forward-secure MACs [23]. Instead of indexing log en-
tries, they employed a one-way hash chain to link log entries
and preserver ordering. Holt extended [23] to the public key
setting [13]. Unfortunately, none of these schemes defend
against truncation attack - a special kind of deletion attack,
whereby the attacker deletes a contiguous subset of tail-end
log entries. The truncation attack seems to be quite funda-
mental and it is surprising that it has not been addressed
thus far. Also all prior schemes are ineﬃcient in terms of
both storage and communication costs. Also, symmetric-
key-based schemes (Schneier-Kelsey and Bellare-Yee) suﬀer
from delayed detection attacks, since they rely on a trusted
server to aid users in verifying the audit log integrity. Modi-
ﬁcations can not be detected until the entire log is uploaded
to the trusted server.
We claim that F ssAgg authentication implies forward-
secure stream integrity due to its forward secure aggregate
unforgeability, i.e.:
Forward Security:
In a F ssAgg scheme, the secret
signing key is updated via a one-way function. An
attacker is thus unable to recover previous keys from
the compromised key and unable to forge signatures
from prior intervals.
Stream Security. The sequential aggregation process
in a F ssAgg scheme preserves message order thus pro-
viding stream security and making message re-ordering
if σ(cid:48) = 1 then return 1 else return 0
impossible.
Integrity. Any insertion of new messages as well as
modiﬁcation or deletion of existing messages renders
the ﬁnal aggregate signature unveriﬁable.
Armed with the above, we can build a secure logging sys-
tem from any F ssAgg signature scheme. Furthermore, the
resulting secure logging system would inherit the provable
security of the underlying F ssAgg signature scheme.
We can initialize the system with the log server generating
a public/secret key-pair and registering its public key with a
well-known Certiﬁcation Authority (CA). An authenticated
log ﬁle in our scheme would consist of two parts: log entries
[L0,··· , Lt] and a single F ssAgg signature, σ0,t. When a
client program requests an audit log entry Li to be made,
the log server ﬁrst updates the F ssAgg signature with the
aggregate-and-sign algorithm Asig under its current secret
key SKi. It then evolves the private key through the U pd
algorithm and securely erases previous secret key.
(Note
that key update is invoked immediately after the aggregate
signature is generated.) The log server closes the log ﬁle
by creating a special closing message as the ﬁnal entry Lf ,
updating the F ssAgg signature accordingly, and securely
erasing its last secret key. Anyone who obtains a copy of
the log ﬁle can get the public key from the CA and validate
the ﬁle.
8. PERFORMANCE EVALUATION
We now analyze the performance of proposed F ssAgg1
schemes. We begin by accessing the cost in term of basic
cryptographic operations and then discuss experimental re-
sults obtained from a prototype implementation.
8.1 Performance Evaluation
A F ssAgg signature scheme can be evaluated by the fol-
lowing parameters:
347
Kg(k, l, T )
Table 3: The AR-F ssAgg1 signature scheme
Generate random distinct k/2-bit primes p, q, such
that:
p ≡ q ≡ 3 (mod 4)
2k−1 ≤ (p − 1)(q − 1)
pq < 2k
n ← pq
pick s0
pick r0
SK1 ← (n, T, 1, s2l
P K ← (n, T, u, y)
return (SK1, P K)
n and compute u ← 1/s2l(T +1)
n and compute y ← 1/r2l(T +1)