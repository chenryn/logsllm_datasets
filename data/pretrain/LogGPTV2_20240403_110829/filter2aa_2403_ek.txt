      call      string_compare_far 
      mov      ax, offset aHello1234World ; "hello 1234 world" 
      push      ax 
      call      remove_digits 
      xor      ax, ax 
      push      ax 
      push      ds 
      mov      ax, offset aHello1234World ; "hello 1234 world" 
      push      ax 
      push      ds 
      mov      ax, offset aCaption ; "caption" 
      push      ax 
      mov      ax, 3 ; MB_YESNOCANCEL 
      push      ax 
      call      MESSAGEBOX 
      xor      ax, ax 
      pop      bp 
      retn      0Ah 
WinMain endp 
这个程序使用了“near”和“far”两种不同类型的指针。每种指针都对应着 16 位 8086CPU 的一种特
定的指针寻址模式。这方面详细内容，请参见本书第 94 章的详细介绍。 
“near”指针的寻址空间是当前数据段（DS）内的所有地址。字符串比较函数 string_compare() 读取 2
个指针，把 DS 寄存器的值当作寻址所需的基（段）地址、对这两个指针进行寻址。所以此处的“mov al,[bx]”
指令等效于“mov al, ds:[bx]”指令，只不过原指令没有明确标出它使用的 DS 寄存器而已。 
“far”指针的寻址空间不限于当前数据段，它可以是其他 DS 段的内存地址。由于需要指定基（段）地
址，所以 2 个 16 位数据才能表示 1 个 far 型指针。本例的 string_compare_far()函数从 2 对 16 位数据里提
取 2 个内存地址。函数把指针的基地址存入段寄存器 ES，然后在使用 Far 指针寻址时通过基地址寻址（mov 
al, es:[bx]）。本章的例 2 表明，16 位程序的 MessageBox()函数（属于系统函数）使用的也是 far 指针。确实，
当 Windows 内核访问文本字符串指针时，它不了解字符串指针的基地址是什么，所以在调用内核函数的时
候需要指明指针的段地址。 
near 指针的寻址范围是 64k，这恰好是 1 个数据段的长度。对于小型程序来说，这种指针可能就够用
了、不必在每次寻址的时候都要传递指针的段地址。大型的程序通常会占用多个 64k 的数据段，所以就要
在每次寻址的时候指明指针的数据段（段地址）。 
代码段也有寻址意义上的差别。一个 64k 内存段就可以盛下所有指令的小型程序，可以只用 CALL 
NEAR 指令调用其他函数；其被调用方函数可以只用 RETN 指令返回调用方函数。但是，大型程序会占用
数个代码段，它就需要使用 CALL FAR 指令、用 1 对 16 位数据作跳转的目的地址；而去其被调用方函数
就必须通过 RETF 指令返回调用方函数。 
这就是编译器“内存模型（memory model）”选项的实际意义。 
面向 MS-DOS 和 Win16 的编译器，为各种内存模型准备了相应的不同库。这些库文件在代码指针和数
据指针的寻址模式存在相应的区别。 
53.6  例子#6 
#include  
#include  
#include  
char strbuf[256]; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 53 章  16 位的 Windows 程序 
575 
int PASCAL WinMain( HINSTANCE hInstance, 
                    HINSTANCE hPrevInstance, 
                    LPSTR lpCmdLine, 
                    int nCmdShow ) 
{ 
        struct tm *t; 
        time_t unix_time; 
        unix_time=time(NULL); 
        t=localtime (&unix_time); 
        sprintf (strbuf, "%04d-%02d-%02d %02d:%02d:%02d", t->tm_year+1900,  t->tm_mon, t-> tm_mday, 
                t->tm_hour, t->tm_min, t->tm_sec); 
        MessageBox (NULL, strbuf, "caption", MB_OK); 
        return 0; 
}; 
WinMain  
     proc near 
var_4   
     = word ptr -4 
var_2   
     = word ptr –2 
     push    bp 
     mov    bp, sp 
     push    ax 
     push    ax 
     xor    ax, ax 
     call    time_ 
     mov    [bp+var_4], ax  
; low part of UNIX time 
     mov    [bp+var_2], dx  
; high part of UNIX time 
     lea    ax, [bp+var_4]  
; take a pointer of high part 
     call    localtime_ 
     mov    bx, ax ; t 
     push    word ptr [bx]   
; second 
     push    word ptr [bx+2]  
; minute 
     push    word ptr [bx+4]  
; hour 
     push    word ptr [bx+6]  
; day 
     push    word ptr [bx+8]  
; month 
     mov    ax, [bx+0Ah]   
; year 
     add    ax, 1900 
     push    ax 
     mov    ax, offset a04d02d02d02d02 ; "%04d-%02d-%02d %02d:%02d:%02d" 
     push    ax 
     mov    ax, offset strbuf 
     push    ax 
     call    sprintf_ 
     add    sp, 10h 
     xor    ax, ax   
; NULL 
     push    ax 
     push    ds 
     mov    ax, offset strbuf 
     push    ax 
     push    ds 
     mov    ax, offset aCaption ; "caption" 
     push    ax 
     xor    ax, ax   
; MB_OK 
     push    ax 
     call    MESSAGEBOX 
     xor    ax, ax 
     mov    sp, bp 
     pop    bp 
     retn    0Ah 
WinMain  
     endp 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
576 
逆向工程权威指南（下册） 
“unix_time”是个 32 位数据。它首先被 Time()函数存储在寄存器对 DX:AX 里，而后被主函数复制到
了 2 个本地的 16 位变量。接着这个指针（地址对）又被传递给 localtime()函数。Localtime()函数把这个指
针指向的数据解析为标准库定义的 tm 结构体，返回值是这种结构体的指针。另外，这也意味着如果不使
用完其返回的数值，就不应重复调用这个函数。 
在调用 time()函数和 localtime()函数的时候，编译器使用的是 Watcom 调用约定：前 4 个参数分别通过
AX、DX、BX 和 CX 寄存器传递，其余参数通过数据栈传递。遵循这种调用约定的库函数，其函数名称（汇
编层面）的尾部也有下划线标识。 
不过，sprintf()函数遵循的调用约定既不是 PASCAL 也不是 Watcom，所以编译器使用常规的 cdecl 规
范传递参数（请参考 64.1 节）。 
53.6.1  全局变量 
我们对刚才的例子略作改动，使用全局变量再次实现它的功能： 
#include  
#include  
#include  
char strbuf[256]; 
struct tm *t; 
time_t unix_time; 
int PASCAL WinMain( HINSTANCE hInstance, 
                    HINSTANCE hPrevInstance, 
                    LPSTR lpCmdLine, 
                    int nCmdShow ) 
{ 
        unix_time=time(NULL); 
        t=localtime (&unix_time); 
        sprintf (strbuf, "%04d-%02d-%02d %02d:%02d:%02d", t->tm_year+1900,  t->tm_mon, t-> tm_mday, 
                t->tm_hour, t->tm_min, t->tm_sec); 
        MessageBox (NULL, strbuf, "caption", MB_OK); 
        return 0; 
}; 
unix_time_low  
dw 0 
unix_time_high  dw 0 
t  
dw 0 
WinMain  
proc near 
push     bp 
mov     bp, sp 
xor     ax, ax 
call     time_ 
mov     unix_time_low, ax 
mov     unix_time_high, dx 
mov     ax, offset unix_time_low 
call     localtime_ 
mov     bx, ax 
mov     t, ax   
; will not be used in future... 
push     word ptr [bx]  
; seconds 
push     word ptr [bx+2]  ; minutes 
push     word ptr [bx+4]  ; hour 
push     word ptr [bx+6]  ; day 
push     word ptr [bx+8]  ; month 
mov     ax, [bx+0Ah]   
; year 
add     ax, 1900 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 53 章  16 位的 Windows 程序 
577 
push     ax 
mov     ax, offset a04d02d02d02d02 ; "%04d-%02d-%02d %02d:%02d:%02d" 
push     ax 
mov     ax, offset strbuf 
push     ax 
call     sprintf_ 
add     sp, 10h 
xor     ax, ax   
; NULL 
push     ax 
push     ds 
mov     ax, offset strbuf 
push     ax 
push     ds 
mov     ax, offset aCaption ; "caption" 
push     ax 
xor     ax, ax   
; MB_OK 
push     ax 
call     MESSAGEBOX 
xor     ax, ax   
; return 0 
pop     bp 
retn     0Ah 
WinMain  
endp 
虽然编译器保留了汇编宏 t 的赋值指令，但是这个值实际上没有被后续代码调用。因为编译器无法判
断其他模块（文件）是否会访问这个值，所有保留了有关的赋值语句。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第四
四部
部分
分  
JJaavvaa  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
580 
逆向工程权威指南 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 5544 章
章    JJaavvaa  
54.1  简介 
Java 程序的反编译工具已经十分成熟了。一般来讲，它们都是 JVM（基于栈机制的 Java 虚拟机）
的字节码（bytecode，指令流里的指令只有一个字节，故而得名。不过 java 指令中的操作数属于
变长信息）分析工具。著名的 JAD（http://varaneckas.com/jad/）就是一款颇具代表性的 JAVA 反编译
工具。 
相对于 x86 平台更底层指令的反编译技术来说，面向 JVM 的 bytecode 更容易反编译。这主要是因为： 
① 字节码含有更为丰富的数据类型信息。 
② JVM 内存模型更严格，因此字节码分析起来更为有章可循。 
③ Java 编译器不做任何优化工作（而 JVM JIT 在运行时会做优化工作），因此在反编译字节码之后，
我们基本可以直接理解 Java 类文件里的原始指令。 
什么时候 JVM bytecode 反编译有用呢？ 
① 无需重新编译反汇编的结果，而能给类文件做应急补丁。 
② 分析混淆代码。 
③ 需要编写自己的代码混淆器。 
④ 创建面向 JVM 的、类似编译程序的代码生成工具（类似 Scala,Clohure 等等）。 
让我们从简单的代码开始演示。除非特别指明，否则我们这里用到的都是 JDK 1.7 的自带工具。 
反编译类文件的命令是：javap –c –verbose。 
笔者采用的例子摘自于参考书目 Jav13。 
54.2  返回一个值 
或许 Java 的最简函数是直接返回数值、不做其他操作的函数。当然，功能再少一点的、什么操作都没
有的“闲置”函数，肯定不存在。函数必须具有某种行为，因此统称为“方法”。在 Java 的概念中，“类/class”
是一切对象的模版，所有方法必定不能脱离“类”而单独存在。但是为了简化起见，本文还是把“方法”
称为“函数”。 
public class ret 
{ 
        public static int main(String[] args) 
        { 
                return 0; 
        } 
}  
我们采用命令 javac 来编译它，命令行是： 
javac ret.java 
编译完后，我们可以用 JDK 自带的反汇编器－Javap 来分析字节码，此时采用的命令应当是： 
javap -c -verbose ret.class 
反编译完成后，我们得到的代码如下所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
582 
逆向工程权威指南（下册） 
指令清单 54.1  JDK 1.7（摘要） 
public static int main(java.lang.String[]); 
  flags: ACC_PUBLIC, ACC_STATIC 
  Code: 
    stack=1, locals=1, args_size=1 
        0: iconst_0 
        1: ireturn 
Java 平台的开发人员认为，0 是用得最多的常量。因此他们为 PUSH 0 的指令单独设计了单字节的指令码，
即 iconst_0。此外还有 iconst_1（将 1 入栈），iconst_2（将 2 入栈）……，一直到 iconst_5 这样的单字节字
节码。而且确实有 iconst_m1（将−1 入栈）这类的将负数推送入栈的单字节指令。 
JVM 常常采用栈的方式来传递参数并从函数中返回值。因此语句 iconst_0 将数字 0 压入栈，而指令
ireturn 则是从栈顶返回整型数（ireturn 中的字母 i 的意思就是“返回值为 integer/整数”）。这里 注意我们用
TOS 来代表栈顶，它是英文“Top Of Stack”的首字母缩写。 
我们来重新编写一下这个例子，将返回值修改为整数 1234： 
public class ret 
{ 
        public static int main(String[] args) 
        { 
                return 1234; 
        } 
}  
这样的话，我们得到的结果是如下所示的代码。 
指令清单 54.2  JDK1.7（摘要） 
public static int main(java.lang.String[]); 
  flags: ACC_PUBLIC, ACC_STATIC 
  Code: 
    stack=1, locals=1, args_size=1 
       0: sipush  
   1234 
       3: ireturn 
指令 sipush 的功能是将操作数（这里是整数 1234）入栈（si 是 short integer 短型整数的缩写）。Short
（短型）的意思就是针对 16 位的数值进行操作，而这里的整数 1234 正好就是一个 16 位的数值。 
如果操作数比整型数据更大，那么字节码会是什么情况呢？让我们来看看实例： 
public class ret 
{ 
        public static int main(String[] args) 
        { 
                return 12345678; 
        } 
}  
指令清单 54.3  常量池 
... 
   #2 = Integer   
12345678 
... 
  public static int main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: ldc             #2  
// int 12345678 
         2: ireturn 
JVM 的 opcode 无法直接封装 32 位数据，这是开发环境的局限决定的。像本例这样的 32 位常数将会
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
583 