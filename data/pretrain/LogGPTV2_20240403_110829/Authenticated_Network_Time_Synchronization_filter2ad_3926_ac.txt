equivalent to ANTP’s no-cryptographic-latency feature.
We note NTS is a work-in-progress and future revisions
may be updated to address these issues. We discovered in
draft-06 a ﬂaw in the Association Phase that would allow
MITM adversaries to perform downgrade attacks and
communicated our ﬁndings to the authors. This has since
been ﬁxed and the following is an overview of draft-12.
NTS evolved as an attempt to ﬁx the weaknesses in
Autokey and has inherited many design choices from
the Autokey protocol, in particular protocol ﬂow and
key derivation strategy using secret server seeds. Sim-
ilarly to the Autokey protocol, NTS servers reuse the
randomness server seed used to generate a shared secret
key (referred to as a cookie) for each client by cookie =
HMAC(server seed, Hash(client public key certiﬁcate)),
encrypting this value and a client-chosen nonce with the
client public key, authenticating the server by digitally
signing the cookie with the server private key. Note that
the client public key certiﬁcate in NTS serves to ensure
the conﬁdentiality and uniqueness of the cookie for each
client using a different public key certiﬁcate. It does not
serve to authenticate the client to the server. In ANTP
clients do not need a certiﬁcate, only the server.
In the Association Phase NTS requires the server digi-
tally sign the server assoc message, which (in draft-12)
includes the client’s selection of hash and public key en-
cryption algorithms in addition to a client nonce. The
server must compute costly public key operations over
these values for each association phase. As a result, a
NTS server requires three public key operations per client
to establish a shared secret cookie.
NTS draft-06 attack. Here we brieﬂy describe our
downgrade attack on NTS draft-06 and below. Figure 2
shows the NTS draft-06 Association Phase, which differs
to the previously described draft-12. (This is analogous
to the Negotiation Phase in ANTP.) In assocc, the client
sends the highest version of NTS that it supports, in addi-
tion to lists of hash and public key encryption algorithms.
The server responds with a signature over the server host-
name, the negotiated version, and the negotiated hash
and public key encryption algorithms. This does not
contain the server’s received values of the client’s sup-
ported version and algorithms, so it is straightforward
for a MITM attacker to strip assocc of strong hash and
public key encryption algorithms. If the client supports
weak algorithms, this can translate into a full break of
time-synchronization security by recovery of the cookie,
similarly to attacks on weak Difﬁe-Hellman groups in
TLS [2].
tlsdate. Another solution for synchronizing time is
Appelbaum’s tlsdate [3], which uses timestamps in the
nonces of TLS handshakes to fetch the time. However,
this requires stateful servers, is not as accurate as cur-
rent solutions and will no longer function when servers
transition to TLS 1.3 (as the proposed protocol no longer
includes timestamps in the nonces).
3 Authenticated NTP
In this section we present the Authenticated Network Time
Protocol (ANTP): a new variant of NTP designed to allow
an SNTP client to authenticate a single NTP server and
output a time counter within some accuracy margin of
the server time counter. Our new protocol ANTP allows
an ANTP server to authenticate itself to an ANTP client,
as well as provide cryptographic assurances that no mod-
iﬁcation of the packets has occurred in transit. ANTP
messages, much like Autokey and NTS, are included in
the extension ﬁelds of NTP messages. We summarize the
novel features of ANTP below:
• The client is capable of authenticating the server,
and all messages from the server. Replay attacks are
explicitly prevented for the client.
client in order to generate a shared secret key.
• The server does not need to keep state for each client.
• The server does only one public key operation per
• The shared secret key can be used for multiple time
• The client has a “no-cryptographic-latency” option
to avoid additional error in the approximation of ˜θ3
due to cryptographic operations.
synchronization attempts by the same client.
3.1 Protocol Description
ANTP is divided into four separate phases. A detailed
protocol ﬂow can be found in Figure 3, and exact message
formatting can be found in the full version [6].
• Setup: The server chooses a long term key s for
the authenticated encryption algorithm. This is used
to encrypt and authenticate ofﬂoaded server state
between phases.
• Negotiation Phase: The client and server communi-
cate supported algorithms; the server sends its certiﬁ-
cate and state C1, an authenticated encryption (using
s) of the hash of the message ﬂow. The value C1 will
be later used to authenticate negotiation.
• Key Exchange Phase: The client uses a key encap-
sulation mechanism (KEM) based on the server’s
public key from its certiﬁcate to establish a shared
key with the server. The client sends the KEM ci-
phertext and encrypted state C1 to the server. The
server derives the shared key k, then encrypts it (us-
ing s) to compute C2. The server replies with a MAC
(for key conﬁrmation) and ofﬂoaded state C2 (for use
in the next phase).
828  25th USENIX Security Symposium 
USENIX Association
Client
assocc ← versc(cid:30)namec(cid:30) (cid:31)Hashc(cid:30) (cid:31)Encc
Server
Association phase
assocc−→ (versn, Hash, Enc) ← negotiate(assocc,verss, (cid:31)Hashs, (cid:31)Encs)
σ ← Sign(sks,versn(cid:30)names(cid:30)Hash(cid:30)Enc)
assocs←−
assocs ← versn(cid:30)names(cid:30)Hash(cid:30)Enc(cid:30)σ(cid:30)certs
Figure 2: A description of the Network Time Security draft-06 Association Phase. vers is the NTS version indicator;
namec and names are the hostnames of the client and server respectively.
• Time Synchronization Phase: The client sends a
time synchronization request and includes ofﬂoaded
server state C2. The server recovers shared key k
from C2 and uses it to authenticate the response,
which the client veriﬁes. The client can also re-
quest “no-cryptographic-latency” time synchroniza-
tion, where the server will immediately reply without
authentication, and then send a second message with
authentication.
3.2 Design Rationale and Discussion
Of the security properties discussed in RFC 7384 [20],
ANTP achieves the following: protection against manipu-
lation, spooﬁng, replay and delay attacks; authentication
of the server (if ANTP is applied in a chain, implicit
authentication of primary server); key freshness; avoids
degradation of time synchronization; minimizes compu-
tational load; minimizes per-client storage requirements
of the server. The following properties from [20] are
only partly addressed by ANTP, which we explain in fur-
ther detail below: resistance against the rogue master,
cryptographic DoS, and time-protocol DoS attacks.
Stateless server.
While storage costs are gener-
ally not an issue, synchronizing state between multiple
servers implementing a high-volume network endpoint
like time.windows.com is still expensive and compli-
cated to deploy. For reliability and performance these
servers are often in multiple data centres, spread across
multiple geographic regions. In ANTP the server regen-
erates per-client state as needed. Our construction uses
authenticated encryption (AE) in a similar manner to TLS
Session Tickets [24] for session resumption, where the
server authenticates and encrypts its per-client state using
a long-term symmetric key, then sends the ciphertext to
the client for storage. The client responds with the cipher-
text in order for the server to decrypt and recover state.
The server periodically refreshes the long-term secret key
for the AE scheme (the intervals are dependent on the
security requirements of the AE scheme).
No-cryptographic-latency mode.
In SNTP, the accu-
racy is bounded by the total roundtrip time of the time
synchronization phase. If we build a secure authentication
protocol over SNTP, then the total accuracy of the new au-
thenticated protocol is also bound by the total round-trip
time of the time synchronization phase.
Since cryptographic computations over the synchro-
nization messages adds asymmetrically to propagation
time, it introduces error in the approximation of propa-
gation time ˜θ3, so authentication operations degrade the
accuracy of the transmit timestamp in the resp. As
noted above, ANTP includes a “no-cryptographic-latency”
mode to reduce error due to authentication: during the
Time Synchronization Phase, at the client’s option, the
server will immediately process a resp as in Figure 1
and sends it to the client, without authentication. The
server subsequently creates an ANTP ServerResp mes-
sage, and sends the resp with ServerResp in the NTP
extension ﬁelds of the saved resp. A client can then use
the time when receiving the initial resp to set its clock,
but only after verifying authentication with the ANTP
ServerResp, aborting if authentication fails, if either
message wasn’t received, or if messages were received in
incorrect order. Here, cryptographic processing time does
not introduce asymmetric propagation time. (The TESLA
broadcast authentication protocol of Perrig et al. [22] de-
lays authentication as well, to improve efﬁciency rather
than accuracy as in ANTP.)
Efﬁcient cryptography. Public key operations are com-
putationally expensive, especially in the case of a server
servicing a large pool of NTP clients. ANTP only re-
quires a single public key operation per-client to ensure
authentication and conﬁdentiality of the premaster secret
key material. The client can reuse the shared secret key
on multiple subsequent time synchronization requests
with that server. ANTP uses a key encapsulation mech-
anism for establishing the shared secret key. We allow
either static-ephemeral elliptic curve Difﬁe-Hellman key
exchange or key transport using RSA public key encryp-
tion. While one might ordinarily avoid use of RSA or
static-ephemeral DH for key exchange since they do not
provide forward secrecy, this is not a concern for ANTP
since we do not need conﬁdentiality as the contents of the
messages (time synchronization data) are public.
USENIX Association  
25th USENIX Security Symposium  829
Client
supported algorithms (cid:31)algC
α ← in-progress
nc ←${0,1}256
m1 ← (cid:31)algC(cid:28)nc
Verify certS
pkS ← parse(cert)
Server
supported algorithms (cid:31)algS
long-term secret s
certiﬁcate certS for the KEM keypair (pkS,skS)
Negotiation phase
m1−→ (KDF, Hash, KEM, MAC) ← negotiate( (cid:31)algC, (cid:31)algS)
h ← Hash(m1(cid:28) (cid:31)algS(cid:28)certS)
C1 ← AuthEncs(01(cid:28)h(cid:28)KDF(cid:28)Hash(cid:28)KEM(cid:28)MAC)
m2 ← (cid:31)algS(cid:28)certS(cid:28)C1
m2←−
Key exchange phase
(KDF, Hash, KEM, MAC) ← negotiate( (cid:31)algC, (cid:31)algS)
h ← Hash(m1(cid:28) (cid:31)algS(cid:28)certS)
(e, pms) ← KEM.Encap(pks)
m3 ← C1(cid:28)e
k ← KDF(pms,⊥,“ANTP”,len)
Verify τ1 = MAC(k,h(cid:28)m3(cid:28)C2)
If verify fails, then α ← reject and abort
m3−→ b(cid:28)h(cid:28)KDF(cid:28)Hash(cid:28)KEM(cid:28)MAC ← AuthDecs(C1)
If b (cid:25)= 01, then α ← reject and abort
pms ← KEM.Decap(skS,e)
k ← KDF(pms,⊥,“ANTP”,len)
C2 ← AuthEncs(02(cid:28)k(cid:28)KDF(cid:28)Hash(cid:28)KEM(cid:28)MAC)
τ1 ← MAC(k,h(cid:28)m3(cid:28)C2)
m4 ← C2(cid:28)τ1
m4←−
Time synchronization phase p = 1, . . . ,n
α ← in-progress
nc2 ←${0,1}256
t1 ← Now()
m5 ← t1(cid:28)nc2(cid:28)C2
t4 ← Now()
RTT ← (t4 −t1)− (t3 −t2)
If RTT > E, then α ← reject and abort
Verify τ2 = MAC(k,m5(cid:28)t1(cid:28)t2(cid:28)t3)
If verify fails, then α ← reject and abort
offset = 1
timep ← Now() + offset
α ← acceptp
If p = n, then terminate
2 (t3 +t2 −t1 −t4)
m5−→ t2 ← Now()
b(cid:28)k(cid:28)KDF(cid:28)Hash(cid:28)KEM(cid:28)MAC ← AuthDecs(s,C2)
If b (cid:25)= 02, then α ← reject or abort
t3 ← Now()
(cid:31) m∗6←−(cid:30) m∗6 ← t1(cid:28)t2(cid:28)t3
τ2 ← MAC(k,m5(cid:28)t1(cid:28)t2(cid:28)t3)
m6←−
m6 ← t1(cid:28)t2(cid:28)t3(cid:28)τ2
Figure 3: Authenticated NTP (ANTPE), where E is a ﬁxed upper bound on the desired accuracy. The pre-determined
negotiation function negotiate takes as input two ordered lists of algorithms and returns a single algorithm. n denotes
the maximum number of synchronization phases, and p denotes the current synchronization phase. [m∗6] indicates an
optional message sent based on a “no-cryptographic-latency” ﬂag present in m5, omitted in this ﬁgure. Note that if
KEM.Decap or AuthDec fails for any ANTP server, the server simply stops processing the message, aborts, and allows
the client to time-out. If certiﬁcate validation fails, the client aborts the protocol run. Each of the messages contains an
identiﬁer ﬂag to prevent confusion between MACs. The protocol in the ﬁgure is an abstraction: messages m1 . . .m 4 and
the cryptographic components of m5 and m6 are sent as extensions of NTP messages, and detailed message structure
can be found in the full version [6]. Authenticated Encryption schemes are not negotiated as they are entirely opaque to
the client.
830  25th USENIX Security Symposium 
USENIX Association
Ampliﬁcation attacks can be of concern. Unauthenti-
cated SNTP has a roughly 1:1 ratio of attacker work to
server work, in that one attack packet causes one packet
in response, and a small computational effort is required
by the server. In ANTP, the cryptographic operations
do allow some ampliﬁcation of work. Based on the ex-
perimental results in Table 1, the negotiation and time
synchronization phases have less than a 1:2 ratio of at-
tacker work to server work. As for the key exchange
phase, the server performs a public key operation while a
malicious client may not. However, a server under attack
can temporarily stop responding to key exchange requests
while still responding to time synchronization requests,
and since most honest clients will perform key exchange
infrequently, their service will not be denied.
Another ampliﬁcation can be caused by the no-
cryptographic-latency feature, since two response packets
are sent for each request. This mode can be turned off
during attack, the server indicating with a ﬂag that it does
not (currently) support this feature.
Key freshness and reuse. ANTP allows multiple time
synchronization phases for each session using the same
shared secret key k but with a new nonce in each Time
Synchronization Phase to prevent replay attacks and en-
sure uniqueness of the protocol ﬂow. This reuse can
continue until either the client restarts the negotiation
phase or the server rotates public keys or authenticated
encryption keys.
Denial of service attacks. Against a man-in-the-middle,
some types of denial-of-service (DoS) attacks are unavoid-
able, as the adversary may always drop messages.
Finally, in the negotiation phase the server’s response
is also considerably larger than the client request (be-
cause it includes a certiﬁcate), but, like the key exchange
phase, the negotiation phase may be temporarily disabled
without denying service to clients who already have estab-
lished a premaster secret. Another option is to replace the
server certiﬁcate chain with a URL where the client can
download it. Depending on the size of the certiﬁcate(s)
this could reduce the bandwidth ampliﬁcation consider-
ably. This last mitigation requires detailed analysis, which
we leave to future work.