# eBPF: Warping Data Reality

## Overview
Extended Berkeley Packet Filter (eBPF) is a powerful technology that allows for the execution of sandboxed programs in the Linux kernel. This document explores various eBPF features, limitations, and their implications for security.

## Key Features

### `bpf_probe_write_user`
- **Functionality**: Overwrites any user-space buffer, pointer, or string.
- **Examples**: Modifying data in `execve`, `connect`, and `netlink` calls.

### `fmod_ret` Programs
- **Purpose**: Special type of eBPF programs to override function calls.
- **Scope**: Applies to specific kernel functions and all syscalls.
- **Behavior**: Instead of calling the function, it returns an error or a fake result.
- **Impact**: Most software will silently fail (e.g., `sshd`, `rsyslogd`).

### `bpf_send_signal`
- **Functionality**: Raises a signal on the current thread.
- **Example**: Sending `SIGKILL` to terminate a process.

#### Example Code
```c
SEC("fmod_ret/__x64_sys_write")
int BPF_PROG(fake_write, struct pt_regs *regs)
{
    // Get expected write amount
    u32 count = PT_REGS_PARM3(regs);
    // Overwrite return value
    return count;
}

SEC("fentry/__x64_sys_openat")
int BPF_PROG(bpf_dos, struct pt_regs *regs)
{
    // Kill any program that attempts to open a file
    bpf_send_signal(SIGKILL);
    return 0;
}
```

### `fexit` Programs
- **Functionality**: Can programmatically determine when to affect calls based on various criteria.
- **Filtering Criteria**:
  - Process ID
  - Process name
  - User ID
  - Function arguments
  - Function return value
  - Time since boot
  - Previous activity

#### Example Code
```c
SEC("fexit/__x64_sys_read")
int BPF_PROG(read_exit, struct pt_regs *regs, long ret) {
    // Check Process ID
    int pid = bpf_get_current_pid_tgid() >> 32;
    // Check Program name
    char comm[TASK_COMM_LEN];
    bpf_get_current_comm(&comm, sizeof(comm));
    // Check user ID
    int uid = (int)bpf_get_current_uid_gid();
    // Check function argument
    char data[100];
    bpf_probe_read_user(&data, sizeof(data), PT_REGS_PARM2(regs));
    // Check return Value
    if (ret != 0) { /* ... */ };
    return 0;
}
```

## Security Implications

### Bypassing MFA
- **Method**: Faking `pam.d` files to enable access with fake credentials.
- **Observation**: Tools like `cat` and `vim` will only see real data without the fake user.

### Other Features
- **Running on Network Hardware**: eBPF can run outside the OS on the network card, altering packets after auditing from the OS.
- **Persistence**: Some programs can be pinned to `/sys/fs/bpf/`, reducing the detectable footprint.
- **Chaining Programs**: Using `bpf_tail_call` to chain eBPF programs together, increasing complexity and using eBPF maps to store state between calls.

## Limitations

### Race Conditions
- **Issue**: If user-mode processes run too quickly, tampering may fail.
- **Mitigation**: Processes could race on another thread to discover or defeat tampering.

### No Persistence Across Reboots
- **Issue**: Programs need to be reloaded after every reboot.

### Kernel Memory Access
- **Restriction**: Cannot write to kernel memory.
- **Impact**: Kernel security products (e.g., `AuditD`) are unaffected. The kernel raises a warning when `bpf_probe_write_user` is used.

## Detections and Preventions

### File Detections
- **Method**: Look for files containing eBPF programs.
- **Tools**: Easier if programs are compiled using LLVM + LibBPF. Use `bpftool` and `libbpf` to check ELF baked into loader `.rodata`.

### Process Detections
- **Method**: Monitor all `bpf` syscalls, ensuring only trusted programs use eBPF.
- **Example**: Using eBPF to extract program bytecode during loading.

#### Example Code
```c
SEC("tp/syscalls/sys_enter_bpf")
int bpf_dos(struct trace_event_raw_sys_enter *ctx)
{
    // Get current program filename
    char comm[TASK_COMM_LEN];
    bpf_get_current_comm(&comm, sizeof(comm));
    // Check program name
    char comm_check[TASK_COMM_LEN] = "bpftool";
    for (int i = 0; i < TASK_COMM_LEN; i++) {
        if (comm[i] != comm_check[i]) {
            // Program name doesn't match
            bpf_send_signal(SIGKILL);
            return 0;
        }
    }
    // bpftool is ok to run
    return 0;
}
```

### Memory Detections
- **Tool**: Volatility is planning to release new memory scanning plugins.
- **Usage**: Works on live and offline memory dumps.

### Preventions
- **Disabling eBPF**: Requires re-building the kernel, which is not always feasible.
- **Signing eBPF Programs**: The eBPF community is discussing signing to prevent unauthorized usage, though this is challenging due to JIT compilation.

## Future Directions

### eBPF on Windows
- **Current Status**: Available for network routing.
- **Future Plans**: Function hooks and other advanced features.

### Anti-Anti-Sandboxing
- **Use Case**: Defeating anti-sandbox and anti-reverse engineering techniques.
- **Capabilities**: Faking uptime, file contents, MAC addresses, DNS responses, etc.

### Bad-BPF
- **Resource**: Collection of eBPF programs and loaders with detailed comments.
- **Examples**:
  - `Sudo-Add`: Adds a user to the sudoers list.
  - `TCP-Reroute`: Routes TCP traffic from a magic source port across NICs.
  - `Text-Replace`: Replaces arbitrary text in arbitrary files.
  - `Bpf-Dos`: Kills any program trying to use eBPF.
  - `Exec-Hijack`: Hijacks calls to `execve` to launch a different program.
  - `Pid-Hide`: Hides processes from tools like `ps`.

## Conclusion

- **Risk Reduction**: eBPF removes the risk associated with traditional kernel rootkits, making it possible to run safe, portable rootkits.
- **Detection Difficulty**: Without kernel-mode security, detection and prevention can be challenging.

## Links
- **Code Samples**: [GitHub](https://github.com/pathtoﬁle/bad-bpf)
- **Docs and Blogs**: [Blog](https://blog.toﬁle.dev/categories/#ebpf)
- **eBPF Community Website**: [ebpf.io](https://ebpf.io)
- **eBPF Community Slack**: [Slack](https://ebpf.io/slack)
- **Technical Guides**:
  - [Cilium Docs](https://docs.cilium.io/en/v1.9/bpf/#bpf-guide)
  - [iovisor BPF Docs](https://github.com/iovisor/bpf-docs/blob/master/eBPF.md)
- **Other eBPF Talks**:
  - DEF CON 27: Jeff Dileo - Evil eBPF
  - DEF CON 29: Guillaume Fournier - eBPF, I thought we were friends!
  - InfoQ 2020: Thomas Graf - Rethinking the Linux Kernel

## Contact Information
- **Website**: [path.toﬁle.dev](https://path.toﬁle.dev)
- **GitHub, Slack, Twitter**: @PathToFile
- **Email**: path[at]toﬁle[dot]dev

**Questions?**