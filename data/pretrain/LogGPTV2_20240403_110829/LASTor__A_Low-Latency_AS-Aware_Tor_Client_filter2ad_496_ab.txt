To address the shortcomings of these heuristics, Tor clients
need to determine the ASes through which the Internet routes
trafﬁc between them and entry nodes and between exit nodes
478
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
Technique
Weighted Shortest Path (WSP) algorithm for probabilistic selection of paths
with preference for low-latency paths
Clustering of relays in nearby locations
Reduce latency of communication on Tor
Goal
Defend against strategic establishment of relays to increase
probability of compromised relays on chosen path
Enable user to choose trade-off between latency and anonymity Augment WSP with parameter α that can be varied between 0 (lowest
Account for distributed destinations
Preempt trafﬁc correlation attacks by ASes
latency) and 1 (highest anonymity)
DNS lookup service on PlanetLab nodes
Lightweight algorithm to determine set of ASes through which Internet
may route trafﬁc between a pair of IP addresses
OVERVIEW OF TECHNIQUES DEVELOPED TO BUILD LASTor.
TABLE I
Section
IV-A
IV-B
IV-D
IV-C
V
and destinations. Since we seek only client-side solutions,
modifying relays to measure routes is not an option. Querying
a route prediction service (e.g., iPlane [12]) for this informa-
tion is not an option either since the client and destination will
be revealed to the service. On the other hand, having clients
download pre-computed AS paths between themselves and all
entry guards and between all exit relays and all end-hosts will
require clients to download a prohibitively large dataset. For
example, even if we aggregate Tor relays and all end-hosts on
the Internet into BGP atoms [25] 2, based on the average AS
path length of 4 on the Internet, we estimate that clients will
have to download on the order of 500 MB of data. Further,
this data will have to be continually updated to account for
ﬂux in the Internet’s routing.
Instead, it is imperative that clients download a snapshot
of Internet topology and routing information and make route
predictions locally. However, enabling such local route predic-
tions with current techniques poses two problems. First, it is
impractical to expect clients to download several gigabytes of
data, e.g., iPlane’s Internet atlas, to make such predictions.
Second, AS path inference techniques that operate on a
compact Internet atlas [11], [13], have high computational
overhead and take on the order of a second to estimate the AS
path between a pair of IP addresses. Since a Tor client has to
choose from around 1000 exit relays in setting up a circuit, the
use of such computationally-heavy techniques to estimate AS
paths can impose high overhead on path selection, rendering
the latency beneﬁts of avoiding circuitous routes moot.
III. OVERVIEW
Next, we deﬁne the precise problem statement that we target
and provide a brief overview of our work. We also discuss
the datasets that we use throughout our work to evaluate the
techniques that we develop.
A. Problem statement
Our goal in this paper is to address the shortcomings in
Tor discussed above with respect to latency and anonymity
without requiring a revamp of Tor’s design. Leveraging the fact
that intelligence in Tor resides at the client, we seek to only
modify the client-side path selection algorithm so that clients
can beneﬁt today without waiting on updates to relays to be
developed and deployed. In doing so, we respect conventional
2All IP addresses in the same atom have identical AS paths from/to them
to/from the rest of the Internet.
Dataset
Clients Relays Destinations
PL-Tor-Web
PL-BGP-Rand
PL-PL-Web
50
50
50
2423
378
50
200
500
500
TABLE II
SUMMARY OF DATASETS.
s
y
a
e
r
f
l
o
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
Tor relays
BGP routers
 0
 0.2
 0.4
 0.6
CDF of ASes
 0.8
 1
Fig. 3. Distribution of relays across ASes in PL-BGP-Rand and PL-
Tor-Web datasets.
wisdom on how to preserve client anonymity in Tor, e.g.,
the use of three entry guards to protect against statistical
proﬁling attacks and the need for sufﬁcient randomness in
relay selection to protect against colluding relays.
Table I summarizes the techniques that we present in the rest
of the paper to address this problem by developing LASTor.
B. Measurement datasets
To evaluate LASTor’s components, we make use of three
datasets (summarized in Table II), with PlanetLab nodes serv-
ing as clients in all three cases; we pick 50 PlanetLab nodes to
use as clients, in keeping with the distribution across countries
of Tor clients [26]. In our ﬁrst dataset, PL-Tor-Web, we use 200
websites [17] as destinations and the relays in the actual Tor
network serve as relays. In this dataset, while we can measure
both latencies and AS-level routes from PlanetLab nodes to
Tor relays, we do not have access to either information on
paths from relays to destinations. Second, we use the PL-
BGP-Rand dataset, in which BGP routers seen in various
BGP feeds [27], [28] serve as relays and the .1 IP address
in 500 randomly chosen /24 preﬁxes serve as destinations.
Here again, we can directly measure latencies and AS paths
from PlanetLab nodes to BGP routers. In addition, we obtain
the AS paths from the BGP routers to the destinations from
various BGP feeds, but we do not have latencies along these
paths. This dataset enables to evaluate our techniques for AS-
awareness in path selection using measured AS-level Internet
routes, unlike prior work in this area [9], [10] that has relied on
479
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 0.2
WSP (Latency)
WSP (Distance)
 0.4
 0.6
Latency (sec)
 0.8
 1
Fig. 4. Comparison of end-to-end latency when using geographical
distance versus the use of path latency in the Weighted Shortest Path
algorithm.
inferred AS-level routes. Though we have to use BGP routers
as proxy for Tor relays for this purpose, Fig. 3 shows that the
distribution of relays across ASes in the PL-BGP-Rand dataset
is similar to that in the case of real Tor relays.
Finally, in the PL-PL-Web dataset, we use PlanetLab nodes
as both clients and relays and the top 200 websites as
destinations. In this case, we can measure latencies and AS
paths both from all clients to all relays and from all relays
to all destinations. To emulate typical Tor clients, we ensure
throughout our evaluation that we do not provide as input
to iPlane [12] any Internet topology measurements from the
50 PlanetLab nodes used as clients; as we describe later in
Section V, we use AS path length estimates from iPlane for
our AS set prediction.
IV. PATH SELECTION
Path latency on the Internet is a sum of three factors—
propagation delay (time spent by packets on the wire), queue-
ing delay (time spent by packets enqueued at end-hosts or
intermediate routers, waiting to be put onto the wire), and
transmission delay (time to put a packet onto the wire). Since
access link bandwidths of the client and Tor relays is beyond
our control, we cannot reduce transmission delay. On the
other hand, as we show later in Section VII, a modiﬁcation
of Tor relays would be necessary to reduce queueing delays.
Therefore, we focus here on reducing propagation delay.
A. Preferential selection of low-latency paths
To reduce propagation delays, we need to reduce the prob-
ability of selection of circuitous paths. We cannot however
simply pick the shortest possible path through three relays
between a client and a destination. This would make path
selection deterministic and hence, susceptible to strategically
placed adversarial Tor relays. Therefore, we implement a
Weighted Shortest Path (WSP) algorithm. WSP orders all
possible paths between a client and a destination based on
the expected latency on each path. The latency along a path is
the sum of latencies on each of the four segments of the path—
(client, entry relay), (entry relay, middle relay), (middle relay,
exit relay), and (exit relay, destination). The probability of a
particular path being selected is then inversely proportional to
the expected latency on it.
However, in order to estimate the latency along every possi-
ble path of three relays between the client and the destination,
we would need latencies between the client and all candidate
entry relays, between all candidate exit relays and the destina-
tion, and between all pairs of relays. As proposed in previous
approaches to improve latency in Tor [6], [7], gathering this
latency information would require a modiﬁcation of Tor relays.
Instrumenting measurements of the Internet at such a scale is
a non-trivial undertaking. As a result, these prior proposals are
yet to translate into practice.
Our focus here instead is on a practical implementation
of WSP, with changes only at the Tor client. Therefore, we
use the end-to-end geographical distance along a path as a
proxy for the latency along it. This ensures that we do not
need to modify relays to track latencies between them, but
we can rely instead on the estimated geographic locations
of clients, relays, and destinations. We compute the end-to-
end geographical distance along a path by summing up the
distance along each segment, which we in turn compute based
on the (latitude, longitude) coordinates of the hosts at either
end of a segment. We can estimate the geographic locations
of end-hosts and relays using an IP geolocation database,
such as MaxMind [19]. Out of all candidate paths, WSP then
selects one path with the probability of a path’s selection
being proportional to the weight associated with it; the weight
associated with a path is the difference between the maximum
end-to-end distance across all paths and the distance along this
particular path.
Though the use of geographical distance ignores the effect
of routing on latency (the Internet may forward packets along
a circuitous route [29]), we conﬁrm empirically that our use of
geographical distance as the weight for every edge in the graph
when running WSP is a reasonable substitute for the latency
of every edge. Since we can compute end-to-end latencies of
paths only on the PL-PL-Web dataset, we perform this analysis
on that data. We perform this analysis ﬁrst using latency as
the edge weight metric for running WSP and then repeat
the same using geographic distance for edge weights. Fig. 4
shows that the end-to-end latencies of chosen paths are similar
irrespective of whether WSP uses latencies or geographic
distances as edge weights. Therefore, we believe that our
use of geographic distances delivers most of the beneﬁts of
reducing propagation delays without warranting the need for
a distributed infrastructure that measures latencies between all
pairs of relays, an unarguably arduous undertaking.
B. Clustering of relays
A straightforward implementation of WSP however causes
two problems. First, WSP’s preference for paths with lower
end-to-end geographical distance results in a greater prefer-
ence for paths through relays that are close to the direct
line between the client and the destination. For example, in
Fig. 5, WSP will select the path through relay R1 with a
higher probability than the path through R2. As a result, if
an adversary wishes to ensure that a relay under his control
is on the chosen path between S and D, then the adversary
can choose a location that is close to the direct line between S
and D and setup a large number of relays at that location. It is
480
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
 1
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 0.8
 0.6
 0.4
 0.2
 0
Edge=4
Edge=2
Edge=1
Edge=0.5
Edge=0.25
 0  10  20  30  40  50  60  70  80
 1
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 0.8
 0.6
 0.4
 0.2
 0
No clusters,default
With clusters,25x
No clusters,25x
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 0  10  20  30  40  50  60  70  80
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Percentage of compromised paths
Percentage of compromised paths
WSP
Default Tor
 1
s
r
i
a
p
)
t
s
d
,
c
r
s