tool creation by providing facilities for memory manipulation,
thread local storage, creation of analysis threads, synchronization,
and interaction with the OS (e.g., for file creation) that minimize
the possibility of interfering with the execution of the application.
The DBI abstraction can cope with sequences of code interleaved
with data, overlapping instructions, statically unknown targets for
indirect branches, and JIT code generation on the application side.
Another appealing feature is the possibility for some engines to
attach to a process and then release it just like a debugger; this
might come in handy, e.g., for large, long-running applications [34].
2.2 Popular DBI Frameworks
Pin [34], DynamoRIO [4] and Valgrind [39] are possibly the most
popularly known DBI frameworks, supporting different architec-
tures and operating systems. They have been extensively used in
countless academic and industrial projects, providing reliable foun-
dations for building performant and accurate analysis tools.
Pin provides robust support for instrumenting binary code run-
ning on Intel architectures. Its instrumentation APIs allow analysis
tools to register for specific statements (e.g., branch instructions) or
events (e.g., thread creation) callbacks to analysis routines that can
observe the architectural state of the program. A recurrent criticism
is related to its closed source nature as it limits possible extensions.
DynamoRIO is an open source project and unlike Pin it exposes
the entire instruction stream to an analysis tool, allowing users to
perform many low-level code transformations directly. The superior
performance level it can offer compared to Pin is still a popular
subject of discussion within the DBI community.
Sometimes the analysis code might be coupled too tightly with
details of the low-level binary representation. Valgrind and DynInst
approach this problem in different ways. Valgrind lifts binary code
to an architecture-independent intermediate representation: its de-
velopers could port it to many platforms to the benefit of analysis
tools based on it. However, this comes with performance penal-
ties that could make it inadequate in several application scenarios.
DynInst tries to provide high-level representations of the analyzed
program to the analysis tool: by exposing familiar abstractions such
as the control-flow graph, functions, and loops, DynInst makes it
easier to implement even complex analyses. However, the intrinsic
difficulties in the static analysis work required to back them may
lead DynInst to generate incomplete representations in presence
of, e.g., indirect jumps or obfuscated code sequences.
Frida [27] tries to ease DBI tool writing by letting users write anal-
ysis code in JavaScript, executing it within the native application
by injecting an engine. The framework targets quick development
of analysis code, aiming in particular at supporting reverse engi-
neering tasks. Due to its flexible design, Frida can support several
platforms and architectures, including for instance mobile ones, but
its intrusive footprint could be a source of concern.
While for most DBI frameworks guest and host architectures
coincide, Strata [51] uses software dynamic translation to support
different host and guest ISAs, requiring users to implement only
few guest and host-specific components. Valgrind could technically
support different ISAs, but its current implementation does not.
libdetox [40] featured the first DBI framework design concerned
with transparency for security uses. Originally used as a founda-
tion for a user-space sandbox for software-based fault isolation,
libdetox randomizes the location of the code cache and other in-
ternal structures, posing particular attention on, e.g., preventing
internal pointers overwriting and disabling write accesses to the
code cache when the program executes. At least for its publicly
released codebase, the framework is however vulnerable to some
of the attacks that we will describe throughout Section 4.
Although more DBI frameworks [37, 48, 49] appeared recently,
their designs did not introduce architectural changes relevant for
security uses: for this reason we opted for not covering them.
2.3 Alternative Technologies
Source code instrumentation. When the source code of a program
is available and the analysis is meaningful regardless of its com-
piled form1, instrumentation can take place at compilation time.
Analyses can thus be encoded using source-to-source transforma-
tion languages like CIL [38] or by resorting to compiler assistance.
The most common instance of the latter approach are performance
profilers, but in recent years a good deal of sanitizers have been
built for instance on top of the LLVM compiler.
Operating at source level offers a few notable benefits. Analysis
code can be written in an architecture-independent manner, also
1There are cases where the source may not be informative enough (e.g., for side channel
detection) or Heisenberg effects appear if the source is altered (e.g., for memory errors).
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
D’Elia et al.
allowing it to access high-level properties of an application (e.g.,
types) that could be lost during compilation. Also, instrumentation
code undergoes compiler optimization, often leading to smaller
performance overheads. However, when the scope of the analysis
involves interactions with the OS or other software components
the applicability of source code instrumentation may be affected.
Static binary instrumentation. A different avenue to instrument
a program could be rewriting its compiled form statically. This
approach is commonly known as Static Binary Instrumentation
(SBI), and sometimes referred to as binary rewriting. While tech-
niques for specific tasks such as collecting instruction traces had
already been described three decades ago [16], it is only with the
ATOM [55] framework that a general SBI-based approach to tool
building was proposed. ATOM provided selective instrumentation
capabilities, with information being passed from the application
program to analysis routines via procedure calls. SBI generally pro-
vides better performance than DBI, but struggles in the presence
of indirect branches, anti-disassembly sequences, dynamically gen-
erated code (JIT compiled or self-modifying), and shared libraries.
ATOM was shortly followed by other systems (e.g., [29, 50, 67])
that gained popularity in the programming languages community
especially for performance profiling tasks before the advent of DBI.
Recent research [66] has shown how to achieve with SBI some of
the practical benefits of DBI, such as instrumentation completeness
along the software stack and non-bypassable instrumentation. Some
obfuscation techniques and self-modifying code remain however
problematic, causing execution to terminate when detected.
Cooperation on the runtime side. Another possibility is to move
the analysis phase on the runtime side, like the virtual machine for
managed languages or the operating system for executables. While
the former possibility has been explored especially in programming
languages research (e.g., using instrumentation facilities of Java
VMs), the latter has seen several uses in security, for example in
malware analysis to monitor API calls using a hooking component
in kernel space. Although finer-grained analyses like instruction
recording or information flow analysis are still possible with this
approach [15], the flexibility of an analysis component executing
in kernel mode is more limited compared to DBI and SBI.
Virtual machine introspection. In recent years a great deal of
research has adopted Virtual Machine Introspection (VMI) tech-
niques to perform dynamic analysis from outside the virtualized
full software stack in which the code under analysis runs. The
VMI approach has been proposed by Garfinkel and Rosenblum [20]
to build intrusion detection systems that retain the visibility of
host-based solutions while approaching the degree of isolation of
network-based ones, and became very popular ever since. Inspect-
ing a virtual machine from the outside enables scenarios such as
code analysis in kernel space that are currently out of reach of
DBI systems (an attempt is made in [65]). VMI is possible for both
emulation-based and hardware-assisted virtualization solutions,
allowing for different trade-offs in terms of execution speed and
flexibility of the analysis. Unlike DBI, VMI incurs a semantic gap
when trying to inspect high-level concepts of the guest system such
as API calls or threads. Recent research has thus explored ways
to minimize the effort required to build VMI tools, e.g., with auto-
matic techniques [14] or by borrowing components from memory
forensic frameworks [45]. While the ease of use of VMI techniques
has lately improved with the availability of scriptable execution
frameworks [57], performing analyses that require deep inspection
features or altering properties of the execution other than the out-
come of CPU instructions (say replacing a function call) remains
hard for a user, or at least arguably harder than in a DBI system. We
will return to this matter in Section 6 discussing also transparency.
3 DBI IN SECURITY RESEARCH
To provide the reader with a tangible perspective on the ubiquity
of DBI techniques in security research over the years, we have
reviewed the proceedings of flagship conferences and other popular
venues looking for works that made use of them. Although this list
may not be exhaustive, and a meticulous survey of the literature
could be addressed in a separate work, we identified 95 papers and
articles from the following venues: 18 for CCS, 7 for NDSS, 6 for
S&P, 14 for USENIX Security, 10 for ACSAC, 4 for RAID, 4 for ASIA
CCS, 2 for CODASPY, 9 for DIMVA, 7 for DSN, 3 for (S)PPREW, and
11 among ESSoS, EuroSys, ICISS, ISSTA, MICRO, STC, and WOOT.
Prominent applications. For the sake of presentation, we classify
these works in the following broad categories, reporting the most
common types of analysis for each of them:
• cryptoanalysis: identification of crypto functions and keys
in obfuscated code [30], obsolete functions replacement [2];
• malicious software analysis: e.g., malware detection and clas-
sification [36, 64], analysis of adversarial behavior [43], au-
tomatic unpacking [46];
• vulnerability analysis: e.g., memory errors and bugs [9, 59],
side channels [63], fuzzing [8], prioritization of code regions
for manual inspection [22], debugging [61];
• software plagiarism: detection of unique behaviors [60];
• reverse engineering: e.g., code deobfuscation [53], protocol
analysis and inference [6, 32], configuration retrieval [58];
• information flow tracking: design of taint analysis engines
and their optimization [25, 26];
• software protection: e.g., control flow integrity [47], detection
of ROP sequences [12], software-based fault isolation [41],
code randomization [23], application auditing [68].
This choice left out 3 works that dealt with protocol replay, code
reuse paradigms, and hardware errors simulation, respectively.
Categories can have different prevalence in general conferences:
for instance, 6 out of 14 USENIX Security papers deal with vul-
nerability detection, but only 2 of the 18 CCS papers fall into it.
For a specific category, works are quite evenly distributed among
venues: for instance, works in malicious software analysis (14) have
appeared in CCS (5), DIMVA (4), and five other conferences.
The heterogeneity of analyses built on top of DBI engines is
somehow indicative of the flexibility provided by the DBI abstrac-
tion to researchers for prototyping their analyses and systems. The
first works we surveyed date back to 2007, with 7 papers in that
year. The numbers for the past two years (9 works in 2017, 8 in 2018)
are lined up with those from four years before that (9 in 2013, 8 for
2014), hinting that DBI is still very popular in security research.
Usage of DBI primitives. For each work we then identify which
DBI system is used and what primitives are necessary to support the
SoK: Using Dynamic Binary Instrumentation for Security
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
application domain
Cryptoanalysis
Malicious Software Analysis
Vulnerability Detection
Software Plagiarism
Reverse Engineering
Information Flow Tracking
Software Protection
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
memory r/w calls/rets
branches
instructions
dbi primitives
✓
✓
✓
✓
✓
✓
other
✓
✓
✓
✓
✓
✓
system
calls
library
calls
threads &
processes
code
loading
exceptions
& signals
works
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓