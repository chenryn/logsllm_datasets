InspectorInstrumentation APIs listed above.
2see /src/third party/WebKit/Source/core/editing/serializers/Serialization.h
5
• didInsertDOMNode monitors the insertion of DOM
nodes. To allow us to later reconstruct the exact position
of the inserted node in the page DOM, its parent node
pointer, its next sibling and the HTML markup of the
node (using createMarkup). This will also record all
node attributes, including the src parameter, if content
needs to be loaded from an external source. Because the
DOM tree can be built by assembling document fragments
(e.g., by inserting an entire DOM subtree via JS code),
the inserted node could actually represent the root of a
subtree with many children nodes. Therefore, we log the
markup representation for the entire subtree. Notice that
knowing the subtree root’s parent and next sibling is still
sufﬁcient to correctly reconstruct the state of the DOM
tree during analysis.
• characterDataModified logs any modiﬁcations to
text nodes. For instance, during DOM construction, if a
text node is too large to load at once, the parser will
create a node with partial data and perform a character
data modiﬁcation once the content of the node ﬁnishes
loading. JSgraph simply records the node pointer and the
ﬁnal state of the node content. Because text nodes do not
have attributes, and for efﬁciency reasons, we record the
value of the text node without having to store the full
node markup.
• willRemoveDOMNode monitors the deletion of a DOM
node. We record the pointer of the node that is going to be
removed, so that the event can be reconstructed by parsing
the audit logs and matching the deleted node pointer to
the related entry in the reconstructed DOM tree.
• didModifyDOMAttr
didRemoveDOMAttr,
record all changes to a DOM node’s attributes, whereas
didInvalidateStyleAttr is called when a node’s
style change is requested.
and
E. Logging Script Executions and Callbacks
Before explaining how we record scripts and callbacks
execution, we ﬁrst need to provide some high-level background
on how JS scripts and callbacks are executed in Blink/V8. Let
us ﬁrst consider scripts. Essentially, a scripts can be deﬁned
“inline,” as part of the page’s HTML, or can be loaded from
an external source, e.g., by expressing a URL within the src
parameter of a script HTML tag. When a script node is
inserted into the DOM, Blink will retrieve the related source
code and pass it to V8 to be compiled. The JS compiler
will give the script’s code a unique script identiﬁer within
that V8 instance, and will then execute the script right after
compilation. On the other hand, callbacks are JS functions
that are deﬁned either within a JS script or as a DOM
level 0 event handler, and will be executed when a certain
circumstance to which they “listen” arises (e.g., an event such
as mousedown, keypress, etc.). There exist multiple types
of callbacks, including event callbacks, scheduled callbacks,
animation callbacks, mutation observers, errors, and idle task
callbacks. It is also worth noting that a callback function could
be deﬁned in a JS script script A, but registered as a callback
for an event (e.g., using addEventListener) by a separate
script script B.
To record complex relationships between DOM elements,
scripts, and callback functions, which can greatly help in
understanding the inner-workings of JS-driven web attacks,
we extend Chromium’s DevTools by adding a number of
6
instrumentation hooks within the code bindings that link Blink
to V8 and allow JS code to access and modify the DOM.
we
instrument
Speciﬁcally,
Chromium’s
V8ScriptRunner and ScriptController, adding ﬁve
instrumentation hooks: to handle events such as CompileScript,
RunCompiledScriptStart,
RunCompiledScriptEnd,
CallFunctionStart, and CallFunctionEnd.
At the moment in which V8 is called to compile a script,
we record detailed information that will be difﬁcult to retrieve
once the code is compiled, such as the source code,
the
source URL from which the code was retrieved, and the start
position of the code in the HTML document (in terms of text
coordinates) for “inline” scripts. We also record the script ID
assigned by V8 to the compiled code, to link future executions
of the script to its source code. When RunCompiledScriptStart
is called, we also log the script ID and its execution context,
by recording the address of the frame (or page) within which
the script was loaded.
Because JavaScript execution within a tab can be seen as
single-threaded (notice that WebWorkers do not have direct
access to the DOM), all the DOM changes that are made by
JS code in between the start and end of a RunCompiledScript
can be uniquely attributed to a speciﬁc script ID recorded in
the audit logs. Similarly, observing when a CallFunction starts
and ends allows us to record the name of the callback function,
the script ID related to the source code where it was deﬁned,
and the line and column number where the function is located
in the source code. However, these instrumentation hooks do
not allow us to determine how the callback functions were reg-
istered and triggered. To this end, we additionally instrument
calls to addEventListener and willHandleEvent, to
log the execution of the callbacks. This allows us to determine
what JS script registered a certain callback function, and for
what particular event. In addition, when a callback is triggered,
we can record the details of the event that triggered it. For
instance, if the event is a mousedown, we can record the
event type and mouse coordinates; if the event is a keypress,
we record the key code; etc. (our instrumentation also takes
event bubbling into account, to record the correct target DOM
element). In a similar way, we also record callbacks associated
to XMLHTTPRequests, for which we record the request
URL, request header, ready state, response content, etc. We
follow a similar logging process to record details related to
scheduled callbacks, animation callbacks, idle task callbacks,
etc. JSgraph also records messages passed between frames,
thus enabling the reconstruction of possible multi-frame at-
tacks. In addition, JSgraph can naturally handles asynchronous
scripts. From JSgraph’s point of view, script tags with an
”async” attribute do not differ from synchronous scripts. The
reason is that for all scripts, whether they run asynchronously
or not, JSgraph will record the exact time when a script is
parsed and compiled by the browser, as well as whenever a
script performs an action on the page.
Notice that, because we automatically log DOM and JS
events belonging to different tabs into different log ﬁles, the
recorded events described above can be correctly attributed to
a speciﬁc web page and related frames. This per-tab logging
approach also serves the purpose of enabling opportunistic
ofﬂoading and improving log security and privacy, because
each tab can be independently encrypted (with different keys
from a key escrow) and archived.
Nested Scripts and Callbacks – One factor that complicates the
logging and reconstruction of the relationship between scripts
and callbacks, is the possibility of nested execution. The nested
execution of JS code may occur due to dynamic JS code gen-
eration, such as when a JS script, script A, adds an additional
script tag into the DOM (e.g., via document.write()),
thus triggering the execution of a new script, script B. In this
case, the execution of script A will pause until script B is
compiled and executed, after which the execution of script A
will resume (a similar scenario may occur in other corner
cases; for instance, if an iframe with no source and a DOM
level 0 onload event callback is dynamically added to the
DOM via JS code). JSgraph is able to correctly reconstruct
such nested executions as well.
F. Logging Critical Events
Of course, logging only DOM changes does not allow us to
have a complete picture of how JS code may impact the user’s
browsing experience. To this end, we instrument a number
of critical JS methods and attributes related to changing
the page’s location (e.g., with location.replace() or
location.href, opening a new tab or window (e.g., with
window.open()), making asynchronous network requests
(e.g., sending an XMLHttpRequest), etc.
Identifying what JS methods and attributes to instrument
is challenging, because there exist literally thousand of APIs
available to JS code. Fortunately, we are only interested in
JS APIs that have an effect on the page, by either modifying
the current DOM tree, changing the page URL, opening new
pages, loading new web content, passing messages between
page components, etc. Conversely, we do not need to log
calls to APIs that allow for reading the value a variable (e.g.,
Node.nodeType(), location.toString(), etc.), as
they have no effect on the page/DOM, and are therefore
less important to understand how a piece of malicious JS
constructed page elements to launch an attack (e.g., a social
engineering attack). To identify what APIs are of interest, we
proceed as explained below.
In practice, Blink and V8 communicate via an interface
referred to as “bindings.” Essentially, all calls to JS meth-
ods or attributes that request or pass data to the rendering
engine (e.g., to insert or remove a DOM node or change
its attributes, read/change the URL, open a new window,
etc.) must pass through these bindings. The bindings are
dynamically generated when Chromium is compiled, via a
fairly complex process (explaining this process is out of the
scope of this paper; we refer the reader to [7] for details).
However, once the bindings are compiled, they can be ac-
cessed at a speciﬁc disk location3, which for brevity we
refer to as blink/bindings. Under blink/bindings,
a large number of C++ classes are created, within mul-
tiple subdirectories and .cpp ﬁles,
that enable access to
Blink from JS code. Especially, V8DOMConfiguration::
MethodConfiguration mappings are of particular inter-
est. For instance, these include methods such as Document::
write, Window:: setTimeout, XMLHttpRequest::
send, and so on, just to name a few. A small excerpt from
the bindings code for the Window’s MethodCallbacks is
shown in Figure 5.
To select what methods should be instrumented, we
3/src/out/Debug/gen/blink/bindings/
7
Fig. 5: Excerpt from Blink/V8 bindings code we instrumented.
proceeded as follows. First, we automatically instrumented
the bindings of an unmodiﬁed version of Chromium,
so to output a log message every time a Blink/V8
MethodConfiguration callback is called. Then, we used
this instrumented version of Chromium to browse highly-
dynamic websites, using the top ten global sites list from
Alexa.com. Finally, we compiled a list of all Blink/V8 binding
callbacks that were activated during these browsing sessions.
This gave us a little less than one hundred APIs that we had to
manually inspect. As the vast majority of API names clearly
communicate the API’s functionality, it was quite straight-
forward to select the API calls to be included in the audit
logs, because they either directly impacted the page’s content
(e.g., changing page location, passing messages between page
components, etc.) or represented critical events (e.g., opening
a new window, showing an alert popup, etc.), and the ones
that should be excluded. For a few APIs, we had to refer
to the related documentation (i.e., JavaScript documentation
or HTML standard) to understand their effect on the page.
However this process was also straightforward. Once we
identiﬁed the APIs to be logged, the more time consuming
part of this process was to actually instrument the APIs at
Blink’s side, which required us to interpret and serialize all
objects passed as arguments to each API of interest.
Notice that
the API selection process discussed above
is simply meant
to reduce engineering effort. With more
engineering time, our instrumentations could be extended
to all APIs, and could potentially also be automated using
Chromium’s own dynamic code generation process for the
bindings [7]. At the same time, the APIs currently instru-
mented by JSgraph are the most commonly used, and are
therefore suitable for demonstrating JSgraph’s capabilities and
estimating performance overhead. Finally, as we will show in
Section IV, the current instrumentation is sufﬁcient to capture
complex malicious code behavior.
G. Some Optimizations
When didModifyDOMAttr, didRemoveDOMAttr, or
didInvalidateStyleAttr hooks are called, we need to
be careful about what we log. As mentioned earlier, we use
Blink’s createMarkup function to log the HTML markup
related to DOM nodes. However, createMarkup logs both
the DOM node that is being modiﬁed as well as all its children,
thus potentially generating a large (and costly) log at every
node attribute modiﬁcation. To avoid logging the entire subtree
under a node, we therefore implemented a customized version
of createMarkup to log only the actual node markup (along
with the node pointer, parent, and next sibling pointer), without
static const V8DOMConﬁguration::MethodConﬁguration V8WindowMethods[] = {    {"stop", V8Window::stopMethodCallback, ...},    {"open", V8Window::openMethodCallback, ...},    {"alert", V8Window::alertMethodCallback, ...},    {"conﬁrm", V8Window::conﬁrmMethodCallback, ...},    {"prompt", V8Window::promptMethodCallback, ...},    {"requestAnimationFrame", V8Window::requestAnimationFrameMethodCallback, ...},    {"cancelAnimationFrame", V8Window::cancelAnimationFrameMethodCallback, ...},    {"requestIdleCallback", V8Window::requestIdleCallbackMethodCallback, ...},    {"cancelIdleCallback", V8Window::cancelIdleCallbackMethodCallback, ...},    {"setTimeout", V8Window::setTimeoutMethodCallback, ...},    {"clearTimeout", V8Window::clearTimeoutMethodCallback, ...},    {"setInterval", V8Window::setIntervalMethodCallback, ...},    {"clearInterval", V8Window::clearIntervalMethodCallback, ...},    ...};is shown in Figure 6. The visualization process works in two
steps. First, the analyst selects an event or object of interest.
For instance, in the malware download attack we analyzed in
Section I-B, the forensic analyst selects the suspected malware-
serving URL as starting point. Then, given the starting point,
JSgraph can produce two different graphs: a backward tracking
graph and a forward tracking graph.
The backward tracking graph follows “causal” relation-
ships, and visualizes the chain of events that directly affected
the node of interest. As an example, let us refer again to
the example in Section I-B, and consider the window.open
event in Figure 2. From that event, the next iteration of the
backward tracking process ﬂags Script 622 as having caused
the window.open event. Notice that other JS scripts that may
be present on the same page are deliberately not shown (unless
they directly affected the currently considered node). Going
one step further (or one causal relationship “up”), Script 622
was directly affected (created and inserted into an iframe) by
an event callback triggered by a mousedown event; and so on.
The backward tracking ends when no new causal relationships
can be found.