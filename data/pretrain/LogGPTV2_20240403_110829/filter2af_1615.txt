# 【技术分享】利用ImageMagick命令执行漏洞获得Facebook四万美元奖金

## 译文声明
本文为翻译文章，原文来源：4lemon.ru
原文地址：[请在此处插入原始链接]
译文仅供参考，具体内容及含义以原文为准。

**翻译者：pwn_361**
**预估稿费：100 RMB**

**投稿方式**：
- 发送邮件至 [linwei#360.cn](mailto:PI:EMAIL)
- 或访问 [网页版](http://bobao.360.cn/contribute/index) 在线提交稿件

---

## 前言
相信大多数人都听说过[ImageMagick](https://www.imagemagick.org/)及其存在的漏洞。这一漏洞在2016年4月底被发现。由于许多插件依赖于ImageMagick库，该漏洞的影响范围非常广泛。证据显示，发现此漏洞的研究人员以及ImageMagick开发团队都已知晓此问题；不幸的是，一些恶意分子也掌握了相关信息。到了2016年5月3日，有关此漏洞的POC（Proof of Concept）已在互联网上公开。尽管许多研究人员已经注意到这个问题，但相关应用程序未能及时更新。出于某些未知原因，在这期间我并未参与其中。

## 漏洞分析
直到十月的一个周六，我在测试一些大型服务（非Facebook）时意外发现了与Facebook相关的重定向问题。具体来说，在“分享到Facebook”对话框中出现了一个值得注意的现象：
```plaintext
https://www.facebook.com/dialog/feed?app_id=APP_ID&link=link.example.tld&picture=http%3A%2F%2Fattacker.tld%2Fexploit.png&name=news_name&caption=news_caption&description=news_description&redirect_uri=http%3A%2F%2Fwww.facebook.com&ext=1476569763&hash=Aebid3vZFdh4UF1H
```
仔细观察URL后可以发现其中包含一个名为“picture”的参数。然而，实际展示的内容却并非直接来自该图片URL，而是经过了如下转换：
```plaintext
https://external.fhen1-1.fna.fbcdn.net/safe_image.php?d=AQDaeWq2Fn1Ujs4P&w=158&h=158&url=https%3A%2F%2Fwww.google.com%2Fimages%2Ferrors%2Frobot.png&cfs=1&upscale=1&_nc_hash=AQD2uvqIgAdXgWyb
```

起初我认为这里可能存在SSRF（Server-Side Request Forgery）的风险。但是进一步测试表明，所有请求均来自IP地址31.13.97.*并通过"facebookexternalhit/1.1"代理发出，看起来就像是普通的服务器请求。

于是，我转向尝试使用[ImageTragick](https://imagetragick.com/)作为最后手段。对于不太熟悉或希望快速了解的人，这里提供了一份[POC](https://github.com/ImageTragick/PoCs)示例。以下是一个简单的exploit.png负载：
```plaintext
...
```
遗憾的是，当监听端口时，并未收到任何响应。考虑到可能存在的防火墙限制，我决定调整策略——既然普通流量可能会被过滤掉，那么DNS查询或许能绕过这种防护机制。最终证明这种方法确实有效！

总结一下，整个过程涉及以下几个步骤：
1. 应用程序接收“picture”参数并发起相应请求。
2. 收到图片后，系统会调用带有漏洞版本的ImageMagick进行处理。
3. 尽管尝试通过HTTP请求来触发漏洞未果，但我发现可以通过DNS隧道技术成功传递数据。

为了证实上述发现，我向Facebook安全团队提供了“cat /proc/version”的输出结果作为证据。遵循负责任的安全披露原则，我没有继续深入探索其他潜在攻击路径。

随后，我和Neal（Facebook安全部门成员）就初步报告进行了讨论。“cat /proc/version | base64”可能是更好的选择之一。此外，他还提到在包括DNS隧道在内的多种场景下，“base32”编码更为常用。

能够成为发现并报告Facebook平台此类安全问题的一员，我感到十分荣幸。

## 时间线
- 2016年10月16日凌晨3:31 - 提交初始报告
- 2016年10月18日下午5:35 - Neal要求查看所使用的POC
- 2016年10月18日晚上8:40 - 我发送了POC并附上了额外信息
- 2016年10月18日晚上10:31 - Neal确认了漏洞的存在
- 2016年10月19日凌晨12:26 - Neal表示正在修复漏洞
- 2016年10月19日凌晨2:28 - Neal告知漏洞已被修复
- 2016年10月19日上午7:49 - 我回复确认修复情况，并询问信息披露时间表
- 2016年10月22日凌晨3:34 - Neal回复关于信息披露的具体安排
- 2016年10月28日下午3:04 - 获得4万美元奖励
- 2016年12月16日 - 披露获得批准