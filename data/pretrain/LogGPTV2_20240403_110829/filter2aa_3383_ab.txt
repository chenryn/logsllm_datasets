### Token Reference Counting
- **Context**: Typically, token reference counting issues arise when an exploit is executed multiple times on the same system without a reboot in between.

### Windows Local GDI Kernel Memory Overwrite
- **Payload**:
  - **Solution**: Restore the original access token after executing a new privileged process or completing the intended action with elevated privileges.
  - **Additional Step**: Also restore the overwritten system call pointer.
  - **Outcome**: This method ensures reliable exploitation of the GDI bug across all vulnerable Windows 2000 and Windows XP systems.

### NetBSD mbuf Overflow
- **Introduction to the Bug**:
  - **Mbuf Pointer Overflow**: Similar to NetBSD-SA2007-004, this vulnerability was demonstrated at BlackHat Europe.
  - **Finding the Vulnerability**:
    - **Fuzzing**: Immediate crash observed.
    - **Tracking Down**: Using DDB/GDB and source code analysis.
  - **Exploit Development**:
    - **MFREE()**: Allows writing an arbitrary 32-bit value to any address.
    - **External Storage**: Mbufs can have their own free routine, which is used in the exploit.
    - **sbdrop Function**:
      ```c
      sbdrop(struct sockbuf *sb, int len) {
          struct mbuf *m, *mn, *next;
          next = (m = sb->sb_mb) ? m->m_nextpkt : 0;
          while (len > 0) {
              if (m == 0) {
                  if (next == 0)
                      panic("sbdrop");
                  m = next;
                  next = m->m_nextpkt;
                  continue;
              }
              if (m->m_len > len) {
                  m->m_len -= len;
                  m->m_data += len;
                  sb->sb_cc -= len;
                  break;
              }
              len -= m->m_len;
              sbfree(sb, m);
              MFREE(m, mn);
          }
      }
      ```

- **Unlink Technique**:
  - **Description**: Removes an mbuf from the chain and links the remaining neighboring mbufs together.
  - **Example**:
    - **Values**:
      - `m_ext.ext_nextref == 0xdeadbeef`
      - `m_ext.ext_prevref == 0xbadc0ded`
    - **Operations**:
      - `*(unsigned *)(0xbadc0ded + NN) = 0xdeadbeef;`
      - `*(unsigned *)(0xdeadbeef + PP) = 0xbadc0ded;`
    - **Offsets**: `NN` and `PP` are the offsets to `ext_nextref` and `ext_prevref` in the mbuf structure, respectively.

- **Targets for Overwrite**:
  - **Return Address**
  - **Random Function Pointer**
  - **Sysent Table**: Function pointers to system calls

- **Cleanup**:
  - **Memory Pools**: Manage memory pools, which can be messy and vary between releases.
  - **mbinit()**: Initialize mbufs.

- **External Free Technique**:
  - **Description**: Some mbufs hold a reference to their own free routine.
  - **No Unlinking**: If `ext_nextref` references its own mbuf, no unlinking is done.
  - **Payload**: Point `ext_free` to the payload and return from the payload with an extra `leave`.

- **Payload Execution**:
  - **Process Identification**: Use `allproc` and `%fs` to find the process.
  - **Credential Change**: Modify the UID to 0.
  - **Return to Userland**: Execute the payload and return to userland.

### OpenBSD IPv6 Remote mbuf Overflow
- **Bug Discovery and Research**:
  - **Researcher**: Alfredo Ortega
  - **PoC Code**: Released to execute a breakpoint.
  - **Tested Systems**: OpenBSD 4.0, 3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1 (older releases with IPv6 support may also be vulnerable).

- **Payload Stages**:
  - **Stage 1**:
    - **Backdoor Installation**: Wrap `icmp6_input`.
    - **Address Calculation**: Resolve `inet6sw` and fetch `inet6sw[4].pr_input`.
    - **Backdoor Check**: Ensure the backdoor is not already installed.
    - **Kernel Memory Allocation**: Allocate kernel memory for stage 2 and copy the code.
    - **Function Replacement**: Replace `inet6sw[4].pr_input` with a pointer to stage 2.
    - **Stack Cleanup and Return**:
      ```asm
      addl $0x20, %esp
      popl %ebx
      popl %esi
      popl %edi
      leave
      ret
      ```

  - **Stage 2**:
    - **ELF Symbol Resolver**:
      - **Header Search**: Scan for `\x7FELF` from the Interrupt Descriptor Table.
      - **Symbol Hash**: Search for the hash of the symbol string in the `.dynsym` section.
    - **ICMPv6 Packet Handling**:
      - **Magic Bytes**: Listen for ICMPv6 packets with magic bytes.
      - **Stage 3 Copy**: Copy stage 3 code to allocated memory.
      - **System Call Wrapper**: Wrap a system call and wait for it to be called.
    - **System Call Wrapper**:
      - **Portability**: Use system calls for better portability.
      - **Process Context**: Need process context to use system calls.
      - **fork1()**: Does not work inside an interrupt anymore.
      - **gettimeofday()**: Wrap `gettimeofday()` with stage 3, as it is frequently called.
      - **Macro for System Call Table**:
        ```asm
        .macro set_syscall sysent, idx, addr
        movl \sysent, %ecx
        movl \idx, %eax # Index
        movl \addr, 4(%ecx, %eax, 8)
        .endm
        ```

  - **Stage 3**:
    - **Commands**:
      - **Connect-back Shell**
      - **Set Secure Level**
      - **Shell Commands** (`/bin/sh -c`)
      - **Backdoor Uninstallation**
    - **File Transfer**:
      - **uuencode(1)**: Use `uuencode` and `cat` to send binary files.
      - **script(1)**: Use `script` and `uuencode` to fetch files.
    - **Initialization**:
      - **Symbol Resolution**: Use stage 2 resolver to resolve symbols.
      - **System Call Reset**: Reset the wrapped system call to the original function pointer.
      - **Real System Call**: Call the real system call and save the return value.
      - **fork1()**: From the calling process.
    - **Command Process**:
      - **Root Privileges**: Ensure the process runs as root.
      - **Macro for Setuid**:
        ```asm
        .macro setuid_root proc
        movl 16(\proc), %eax  # struct pcred pointer
        movl $0, 4(%eax)      # Real User ID
        .endm
        ```
      - **Process Termination**: Terminate the process on failure.

### FreeBSD 802.11 Remote Integer Overflow
- **Vulnerability**:
  - **Researcher**: Karl Janmar
  - **Type**: Integer overflow leading to a stack-based buffer overflow.
  - **Affected Component**: IEEE 802.11 subsystem.
  - **Exploitation**: Via `wpa_supplicant` and WPA-PSK.
  - **IOCTL**: The vulnerability is triggered through an IOCTL call.

- **Demonstration**:
  - **Details**: A demonstration of the vulnerability and its exploitation will be provided.