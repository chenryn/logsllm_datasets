tainment type activities such as network gaming and peer-to-peer ﬁle sharing.
These activities are prone to resembling worm scanning activity, making it more
diﬃcult for the detectors to diﬀerentiate between legitimate hosts and worm
infected ones. For example, a peer-to-peer network client may receive a list of
peers who were recently active and attempt to contact every host on the list. If
the peer-to-peer network has a high churn rate and hosts on the peer list have
left the network, this activity will result in many connection failures, just as if a
worm were scanning for potential targets. Even in the face of this type of activity,
however, the detectors were still typically able to detect true worm activity. As in
the other environments, the TRW detector was able to detect slower worms than
any other detectors. The PGD detector showed the next best performance and
had the advantage of also detecting the topo worm in the wireless environment.
Our results indicate that worms scanning at one connection per second or
better are relatively easily detected in most environments, but a worm that
utilizes some sort of topo scanning with a low connection failure rate could
evade worm detectors in all our tested environments—if it scanned at a rate no
greater than 1 scan per 10 seconds.
Behavior-Based Worm Detectors Compared
55
7 Related Work
The most directly related work to ours—aside from the original publication of
the detectors evaluated here—is a study by M. Patrick Collins and Michael K.
Reiter that evaluates behavior-based (or payload-oblivious as they term it) de-
tectors [30]. This work is closely tied to ours, but is complementary in nature.
Their work, like ours, evaluates the eﬀectiveness of several behavior-based detec-
tors. The key distinction is that instead of monitoring an internal network for
infections, they considered the performance of these systems in detecting incom-
ing scanning from external networks. This is actually a substantially diﬀerent
problem than detecting internally infected hosts. There is a considerable volume
of incoming scan traﬃc to most networks [31], and separating worm scanning
from other scanning traﬃc is a diﬀerent problem than detecting outgoing scans
among legitimate outgoing traﬃc. They developed new metrics for their evalu-
ation, measuring an attacker’s payoﬀ over an observable attack space. This new
metric does not apply well to the job of detecting internal scanners, however,
as the target address space of an internal scanner is potentially the entire IPv4
address space.
A work by Li, Salour, and Su surveys behavior and content-based worm detec-
tors [32] and covers many of the works referenced here. They do not measure the
performance of detectors, however, limiting their study to describing and classi-
fying them instead. Our work brieﬂy addresses broad classiﬁcations of detectors,
but then focuses on their relative performance in real world situations.
8 Conclusions
The relative lack of worm attacks in recent years has caused network operators to
focus their attention on other threats. However, Conﬁcker and IKEE.B illustrate
the continued threat that worms pose. Lapses in worm activity are not new—13
years separated the Morris worm from the series of large worm outbreaks in the
early 2000’s—and continued vigilance is required to protect our networks.
Despite the large number of worm detectors published, it is still unclear
whether state-of-the-art systems are capable of coping with modern worms suc-
cessfully. It is even unclear how these systems compare to each other. We have
not seen a systematic comparison study that evaluates worm detectors against
the same performance metrics across the same parameter values.
This paper addresses that issue. We focus on behavior-based worm detectors
under diﬀerent real-world environments, studying their false positive, false neg-
ative, and latency in detecting worms at various scanning rates using random,
local-preference, or topological-aware scanning methods. We found that worms
that scan at a low rate are the hardest to detect; for example, a topologically
aware worm scanning one destination per minute can evade all tested detectors
in all environments. Also, among all the environments we studied, the wireless
environment poses the biggest challenge, where almost every detector incurs a
lower—sometimes unacceptable—accuracy and higher latency than in other en-
vironments. No detector is a clear winner; TRW performs the best against the
56
S. Staﬀord and J. Li
random and local-preference worms, for example, but it fails badly at detecting
a topologically aware worm.
References
1. Eisenberg, T., Gries, D., Hartmanis, J., Holcomb, D., Lynn, M.S., Santoro, T.: The
Cornell commission: on Morris and the worm. Communications of the ACM 32(6),
706–709 (1989)
2. Moore, D., Shannon, C., Claﬀy, K.C.: Code-red: A case study on the spread and
victims of an Internet worm. In: Proceedings of the ACM Internet Measurement
Workshop, pp. 273–284 (2002)
3. Moore, D., Paxson, V., Savage, S., Shannon, C., Staniford, S., Weaver, N.: Inside
the slammer worm. IEEE Security and Privacy 1(4), 33–39 (2003)
4. Symantec, I.: The downadup codex. Technical report, Symantec (March 2009)
5. Porras, P.A., Saidi, H., Yegneswaran, V.: An analysis of the ikee.b (duh) iPhone
botnet. Technical report, SRI International (December 2009)
6. Sekar, V., Xie, Y., Reiter, M.K., Zhang, H.: A multi-resolution approach for worm
detection and containment. In: Proceedings of the International Conference on
Dependable Systems and Networks (2006)
7. Schechter, S.E., Jung, J., Berger, A.W.: Fast detection of scanning worm infections.
In: Proceedings of the Symposium on Recent Advances in Intrusion Detection
(2004)
8. Gu, G., Sharif, M., Qin, X., Dagon, D., Lee, W., Riley, G.: Worm detection, early
warning and response based on local victim information. In: Proceedings of the
Annual Computer Security Applications Conference (2004)
9. Liang, Z., Sekar, R.: Fast and automated generation of attack signatures: A basis
for building self-protecting servers. In: Proceedings of the Conference on Computer
and Communications Security (2005)
10. Crandall, J.R., Su, Z., Wu, S.F., Chong, F.T.: On deriving unknown vulnerabilities
from zero-day polymorphic and metamorphic worm exploits. In: Proceedings of the
Conference on Computer and Communications Security (2005)
11. Newsome, J., Song, D.: Dynamic taint analysis for automatic detection, analysis,
and signature generation of exploits on commodity software. In: Proceedings of the
Network and Distributed System Security Symposium (February 2005)
12. Tucek, J., Newsome, J., Lu, S., Huang, C., Xanthos, S., Brumley, D., Zhou, Y.,
Song, D.: Sweeper: A lightweight end-to-end system for defending against fast
worms. In: Proceedings of the EuroSys Conference (2007)
13. Kim, H.A., Karp, B.: Autograph: Toward automated, distributed worm signature
detection. In: Proceedings of the USENIX Security Symposium, pp. 271–286 (Au-
gust 2004)
14. Singh, S., Estan, C., Varghese, G., Savage, S.: Automated worm ﬁngerprinting. In:
Proceedings of the Symposium on Operating System Design and Implementation,
pp. 45–60 (2004)
15. Wang, K., Cretu, G., Stolfo, S.J.: Anomalous payload-based worm detection and
signature generation. In: Proceedings of the Symposium on Recent Advances in
Intrusion Detection (2005)
16. Wang, K., Parekh, J.J., Stolfo, S.J.: Anagram: A content anomaly detector resis-
tant to mimicry attack. In: Proceedings of the Symposium on Recent Advances in
Intrusion Detection (2006)
Behavior-Based Worm Detectors Compared
57
17. Li, Z., Wang, L., Chen, Y., Fu, Z.: Network-based and attack-resilient length sig-
nature generation for zero-day polymorphic worms. In: Proceedings of the IEEE
International Conference on Network Protocols, pp. 164–173 (October 2007)
18. Newsome, J., Karp, B., Song, D.: Polygraph: Automatically generating signatures
for polymorphic worms. In: Proceedings of the IEEE Symposium on Security and
Privacy (2005)
19. Mason, J., Small, S., Monrose, F., MacManus, G.: English shellcode. In: Proceed-
ings of the Conference on Computer and Communications Security, pp. 524–533
(2009)
20. Jung, J., Milito, R., Paxson, V.: On the adaptive real-time detection of fast-
propagating network worms. In: Proceedings of the Conference on Detection of
Intrusions and Malware and Vulnerability Assessment, pp. 175–192 (July 2007)
21. Collins, M.P., Reiter, M.K.: Hit-list worm detection and bot identiﬁcation in large
networks using protocol graphs. In: Proceedings of the Symposium on Recent Ad-
vances in Intrusion Detection, pp. 276–295 (September 2007)
22. Wu, J., Vangala, S., Gao, L., Kwiat, K.: An eﬀective architecture and algorithm
for detecting worms with various scan techniques. In: Proceedings of the Network
and Distributed System Security Symposium (2004)
23. Zou, C.C., Gong, W., Towsley, D., Gao, L.: The monitoring and early detection of
Internet worms. ACM Transactions on Networking (2005)
24. Weaver, N., Staniford, S., Paxson, V.: Very fast containment of scanning worms.
In: Proceedings of the USENIX Security Symposium, pp. 29–44 (2004)
25. DETER: Cyber defense technology experiment research (DETER) network,
http://www.isi.edu/deter/
26. Staﬀord, S., Li, J., Ehrenkranz, T., Knickerbocker, P.: GLOWS: A high-ﬁdelity
worm simulator. Technical Report CIS-TR-2006-11, University of Oregon (2006)
27. LBNL/ICSI enterprise tracing project (2005),
http://www.icir.org/enterprise-tracing/
28. Group, W.N.R.: WAND WITS: Auckland-IV trace data (April 2001),
http://wand.cs.waikato.ac.nz/wand/wits/auck/4/
29. Umass trace repository, http://traces.cs.umass.edu/
30. Collins, M.P., Reiter, M.K.: On the limits of payload-oblivious network attack
detection. In: Proceedings of the Symposium on Recent Advances in Intrusion
Detection, pp. 251–270 (September 2008)
31. Allman, M., Paxson, V., Terrell, J.: A brief history of scanning. In: Proceedings of
the ACM Internet Measurement Conference, pp. 77–82 (October 2007)
32. Li, P., Salour, M., Su, X.: A survey of internet worm detection and containment.
IEEE Communications Society Surveys and Tutorials 10(1), 20–35 (2008)
Improving NFA-Based Signature Matching
Using Ordered Binary Decision Diagrams(cid:2)
Liu Yang1, Rezwana Karim1, Vinod Ganapathy1, and Randy Smith2
1 Rutgers University
2 Sandia National Laboratories
Abstract. Network intrusion detection systems (NIDS) make extensive use of
regular expressions as attack signatures. Internally, NIDS represent and operate
these signatures using ﬁnite automata. Existing representations of ﬁnite automata
present a well-known time-space tradeoff: Deterministic automata (DFAs) pro-
vide fast matching but are memory intensive, while non-deterministic automata
(NFAs) are space-efﬁcient but are several orders of magnitude slower than DFAs.
This time/space tradeoff has motivated much recent research, primarily with a
focus on improving the space-efﬁciency of DFAs, often at the cost of reducing
their performance.
This paper presents NFA-OBDDs, a symbolic representation of NFAs that re-
tains their space-efﬁciency while improving their time-efﬁciency. Experiments
using Snort HTTP and FTP signature sets show that an NFA-OBDD-based repre-
sentation of regular expressions can outperform traditional NFAs by up to three
orders of magnitude and is competitive with a variant of DFAs, while still remain-
ing as compact as NFAs.
Keywords: NIDS, signature matching, ordered binary decision diagrams.
1 Introduction
Deep packet inspection allows network intrusion detection systems (NIDS) to accu-
rately identify malicious trafﬁc by matching the contents of network packets against
attack signatures. In the past, attack signatures were keywords that could efﬁciently
be matched using string matching algorithms. However, the increasing complexity of
network attacks has lead the research community to investigate richer signature rep-
resentations, which require the full power of regular expressions. Because NIDS are
often deployed over high-speed network links, algorithms to match such rich signatures
must also be efﬁcient enough to provide high-throughput intrusion detection on large
volumes of network trafﬁc. This problem has spurred much recent research, and in par-
ticular has lead to the investigation of new representations of regular expressions that
allow for efﬁcient inspection of network trafﬁc (e.g., [1,2,3,4]).
To be useful for deep packet inspection in a NIDS, any representation of regular
expressions must satisfy two key requirements: time-efﬁciency and space-efﬁciency.
Time-efﬁciency requires the amount of time spent by the NIDS to process each byte
(cid:2) Supported in part by NSF grants 0831268, 0915394, 0931992 and 0952128. L. Yang and
R. Karim contributed equally, while R. Smith contributed while at the University of Wisconsin.
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 58–78, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams
59
of network trafﬁc to be small, thereby allowing large volumes of trafﬁc to be matched
quickly. Space-efﬁciency requires the size of the representation to be small, thereby en-
suring that it will ﬁt within the main memory of the NIDS. Space-efﬁciency also man-
dates that the size of the representation should grow proportionally (e.g., linearly) with
the number of attack signatures. This requirement is important because the increasing
diversity of network attacks has lead to a quick growth in the number of signatures used
by NIDS. For example, the number of signatures in Snort [5] has grown from 3,166 in
2003 to 15,047 in 2009.
Finite automata are a natural representation for regular expressions, but offer a trade-
off between time- and space-efﬁciency. Using deterministic ﬁnite automata (DFAs) to
represent regular expressions allows efﬁcient matching (O(1) lookups to its transition
table to process each input symbol), while non-deterministic ﬁnite automata (NFAs) can
take up to O(n) transition table lookups to process each input symbol, where n is the
number of states in the NFA. However, NFAs are space-efﬁcient, while DFAs for cer-
tain regular expressions can be exponentially larger than the corresponding NFAs [6].
More signiﬁcantly, combining NFAs only leads to an additive increase in the number
of states, while combining DFAs can result in a multiplicative increase, i.e., an NFA
that combines two NFAs with m and n states has up to O(m + n) states, while a DFA
that combines two DFAs with m and n states can have up to O(m × n) states. DFA
representations for large sets of regular expressions often consume several gigabytes of
memory, and do not ﬁt within the main memory of most NIDS.
This time/space tradeoff has motivated much recent research, primarily with a focus
on improving the space-efﬁciency of DFAs. These include heuristics to compress DFA
transition tables (e.g., [2,7]), techniques to combine regular expressions into multiple
DFAs [4], and variable extended ﬁnite automata (XFAs) [3,8], which offer compact
DFA representations and guarantee an additive increase in states when signatures are
combined, provided that the regular expressions satisfy certain conditions. These tech-
niques trade time for space, and though the resulting representations ﬁt in main memory,
their matching algorithms are slower than those for traditional DFAs.
In this paper, we take an alternative approach and instead focus on improving the
time-efﬁciency of NFAs. NFAs are not currently in common use for deep packet inspec-
tion, and understandably so—their performance can be several orders of magnitude
slower than DFAs. Nevertheless, NFAs offer a number of advantages over DFAs, and
we believe that further research on improving their time-efﬁciency can make them a
viable alternative to DFAs. Our position is supported in part by these observations:
• NFAs are more compact than DFAs. Determinizing an NFA involves a subset con-
struction algorithm, which can result in a DFA with exponentially more states than
an equivalent NFA [6].
• NFA combination is space-efﬁcient. Combining two NFAs simply involves linking
their start states together by adding new  transitions; the combined NFA is therefore
only as large as the two NFAs put together. This feature of NFAs is particularly
important, given that the diversity of network attacks has pushed NIDS vendors to
deploy an ever increasing number of signatures. In contrast, combining two DFAs
can result in a multiplicative increase in the number of states, and the combined
DFA may be much larger than its constituent DFAs.
L. Yang et al.
60
• NFAs can readily be parallelized. An NFA can be in a set of states (called the
frontier) at any instant during its operation, each of which may contain multiple
outgoing transitions for an input symbol. States in the frontier can be processed in
parallel as new input symbols are encountered [9,10].
Motivated by these advantages, we develop a new approach to improve the time-efﬁciency
of NFAs. The frontier of an NFA can contain O(n) states, each of which must be pro-
cessed using the NFA’s transition relation for each input symbol to compute a new
frontier, thereby resulting in slow operation. Although this frontier can be processed
in parallel to improve performance, NFAs for large signature sets may contain several
thousand states in their frontier at any instant. Commodity hardware is not yet well-
equipped to process such large frontiers in parallel.
Our core insight is that a technique to efﬁciently apply an NFA’s transition relation
to a set of states can greatly improve the time-efﬁciency of NFAs. Such a technique
would apply the transition relation to all states in the frontier in a single operation to
produce a new frontier. We develop an approach that uses Ordered Binary Decision
Diagrams [11] (OBDDs) to implement such a technique. Our use of OBDDs to process
NFA frontiers is inspired by symbolic model checking, where the use of OBDDs allows
the veriﬁcation of systems that contain an astronomical number of states [12]. NFAs
that use OBDDs (NFA-OBDDs) can be constructed from regular expressions in a fully
automated way, and are robust in the face of structural complexities in these regular
expressions (e.g., counters [8, Section 6.2]).
Our main contributions are as follows:
To evaluate the feasibility of our approach, we constructed NFAs in software using
HTTP and FTP signatures from Snort. We operated these NFAs using OBDDs and eval-
uated their time-efﬁciency and space-efﬁciency using HTTP and FTP trafﬁc obtained
from our department’s network. Our experiments showed that NFA-OBDDs outperform
traditional NFAs by approximately three orders of magnitude—about 1645× in the best
case. Our experiments also showed that NFA-OBDDs retain the space-efﬁciency of
NFAs. In contrast, our machine ran out of memory when trying to construct DFAs (or
their variants) from our signature sets.
• Design of NFA-OBDDs. We develop a novel technique that uses OBDDs to improve
the time-efﬁciency of NFAs (Section 3). We also describe how NFA-OBDDs can be
used to improve the time and space-efﬁciency of NFA-based multi-byte matching
(Section 5).
• Comprehensive evaluation using Snort signatures. We evaluated NFA-OBDDs
using Snort’s HTTP and FTP signature sets and observed a speedup of about three
orders of magnitude over traditional NFAs. We also compared the performance of
NFA-OBDDs against a variety of automata implementations, including the PCRE
package and a variant of DFAs (Section 4).
2 Ordered Binary Decision Diagrams
An OBDD is a data structure that can represent arbitrary Boolean formulae. OBDDs
transform Boolean function manipulation into efﬁcient graph transformations, and have
found wide use in a number of application domains. For example, OBDDs are used
Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams
61
x
0
0
0
0
1
1
1
1
(a) A Boolean function
y f(x, i, y)
0
1
0
1
0
1
0
1
1
0
1
1
1
0
0
1
i
0
0
1
1
0
0
1
1
f (x, i, y).
x
x
i
i
i
i
x
y
y
1
y
0
y
0