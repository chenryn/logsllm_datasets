### Entertainment-Type Activities and Their Impact on Worm Detection

Entertainment activities, such as network gaming and peer-to-peer (P2P) file sharing, can mimic the behavior of worm scanning. This resemblance complicates the task of distinguishing between legitimate hosts and those infected with worms. For instance, a P2P client might receive a list of recently active peers and attempt to contact each host on the list. If the P2P network has a high churn rate and some listed peers have left, this activity will result in numerous connection failures, similar to what would occur if a worm were scanning for potential targets.

Despite these challenges, detectors are generally still able to identify true worm activity. In various environments, the TRW detector excels at detecting slower worms compared to other detectors. The PGD detector also performs well and has the added advantage of detecting topological-aware worms in wireless environments.

Our results indicate that worms scanning at a rate of one connection per second or faster are relatively easy to detect in most environments. However, a worm employing topological scanning with a low connection failure rate could evade detection in all tested environments if it scans at a rate no greater than one scan every 10 seconds.

### Related Work

The most closely related work to our study, aside from the original publication of the evaluated detectors, is a study by M. Patrick Collins and Michael K. Reiter, which evaluates behavior-based (or payload-oblivious) detectors [30]. This work complements ours but focuses on a different aspect: instead of monitoring an internal network for infections, they evaluate the performance of these systems in detecting incoming scans from external networks. This is a substantially different problem, as separating worm scanning from other types of scanning traffic is more challenging. They developed new metrics for their evaluation, measuring an attacker’s payoff over an observable attack space. However, this metric is not directly applicable to detecting internal scanners, as the target address space for an internal scanner can be the entire IPv4 address space.

A survey by Li, Salour, and Su [32] covers many behavior and content-based worm detectors, but it does not measure the performance of these detectors. Instead, it focuses on describing and classifying them. Our work briefly addresses broad classifications of detectors but primarily focuses on their relative performance in real-world scenarios.

### Conclusions

The relative decrease in worm attacks in recent years has led network operators to focus on other threats. However, incidents like Conficker and IKEE.B highlight the ongoing threat posed by worms. Lapses in worm activity are not new—there was a 13-year gap between the Morris worm and the series of large outbreaks in the early 2000s—and continued vigilance is essential for protecting our networks.

Despite the large number of published worm detectors, it remains unclear whether state-of-the-art systems can effectively handle modern worms. There is also a lack of systematic comparison studies evaluating these detectors using the same performance metrics and parameter values.

This paper addresses this issue by focusing on the performance of behavior-based worm detectors in different real-world environments. We studied false positives, false negatives, and latency in detecting worms at various scanning rates using random, local-preference, or topological-aware scanning methods. Our findings indicate that worms scanning at a low rate are the hardest to detect. For example, a topologically aware worm scanning one destination per minute can evade all tested detectors in all environments. Additionally, the wireless environment poses the greatest challenge, with almost every detector showing lower accuracy and higher latency compared to other environments. No single detector outperformed all others; for instance, while TRW performed best against random and local-preference worms, it failed to detect a topologically aware worm.

### References

1. Eisenberg, T., Gries, D., Hartmanis, J., Holcomb, D., Lynn, M.S., Santoro, T.: The Cornell commission: on Morris and the worm. Communications of the ACM 32(6), 706–709 (1989)
2. Moore, D., Shannon, C., Claffy, K.C.: Code-red: A case study on the spread and victims of an Internet worm. In: Proceedings of the ACM Internet Measurement Workshop, pp. 273–284 (2002)
3. Moore, D., Paxson, V., Savage, S., Shannon, C., Staniford, S., Weaver, N.: Inside the slammer worm. IEEE Security and Privacy 1(4), 33–39 (2003)
4. Symantec, I.: The downadup codex. Technical report, Symantec (March 2009)
5. Porras, P.A., Saidi, H., Yegneswaran, V.: An analysis of the ikee.b (duh) iPhone botnet. Technical report, SRI International (December 2009)
6. Sekar, V., Xie, Y., Reiter, M.K., Zhang, H.: A multi-resolution approach for worm detection and containment. In: Proceedings of the International Conference on Dependable Systems and Networks (2006)
7. Schechter, S.E., Jung, J., Berger, A.W.: Fast detection of scanning worm infections. In: Proceedings of the Symposium on Recent Advances in Intrusion Detection (2004)
8. Gu, G., Sharif, M., Qin, X., Dagon, D., Lee, W., Riley, G.: Worm detection, early warning and response based on local victim information. In: Proceedings of the Annual Computer Security Applications Conference (2004)
9. Liang, Z., Sekar, R.: Fast and automated generation of attack signatures: A basis for building self-protecting servers. In: Proceedings of the Conference on Computer and Communications Security (2005)
10. Crandall, J.R., Su, Z., Wu, S.F., Chong, F.T.: On deriving unknown vulnerabilities from zero-day polymorphic and metamorphic worm exploits. In: Proceedings of the Conference on Computer and Communications Security (2005)
11. Newsome, J., Song, D.: Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In: Proceedings of the Network and Distributed System Security Symposium (February 2005)
12. Tucek, J., Newsome, J., Lu, S., Huang, C., Xanthos, S., Brumley, D., Zhou, Y., Song, D.: Sweeper: A lightweight end-to-end system for defending against fast worms. In: Proceedings of the EuroSys Conference (2007)
13. Kim, H.A., Karp, B.: Autograph: Toward automated, distributed worm signature detection. In: Proceedings of the USENIX Security Symposium, pp. 271–286 (August 2004)
14. Singh, S., Estan, C., Varghese, G., Savage, S.: Automated worm fingerprinting. In: Proceedings of the Symposium on Operating System Design and Implementation, pp. 45–60 (2004)
15. Wang, K., Cretu, G., Stolfo, S.J.: Anomalous payload-based worm detection and signature generation. In: Proceedings of the Symposium on Recent Advances in Intrusion Detection (2005)
16. Wang, K., Parekh, J.J., Stolfo, S.J.: Anagram: A content anomaly detector resistant to mimicry attack. In: Proceedings of the Symposium on Recent Advances in Intrusion Detection (2006)
17. Li, Z., Wang, L., Chen, Y., Fu, Z.: Network-based and attack-resilient length signature generation for zero-day polymorphic worms. In: Proceedings of the IEEE International Conference on Network Protocols, pp. 164–173 (October 2007)
18. Newsome, J., Karp, B., Song, D.: Polygraph: Automatically generating signatures for polymorphic worms. In: Proceedings of the IEEE Symposium on Security and Privacy (2005)
19. Mason, J., Small, S., Monrose, F., MacManus, G.: English shellcode. In: Proceedings of the Conference on Computer and Communications Security, pp. 524–533 (2009)
20. Jung, J., Milito, R., Paxson, V.: On the adaptive real-time detection of fast-propagating network worms. In: Proceedings of the Conference on Detection of Intrusions and Malware and Vulnerability Assessment, pp. 175–192 (July 2007)
21. Collins, M.P., Reiter, M.K.: Hit-list worm detection and bot identification in large networks using protocol graphs. In: Proceedings of the Symposium on Recent Advances in Intrusion Detection, pp. 276–295 (September 2007)
22. Wu, J., Vangala, S., Gao, L., Kwiat, K.: An effective architecture and algorithm for detecting worms with various scan techniques. In: Proceedings of the Network and Distributed System Security Symposium (2004)
23. Zou, C.C., Gong, W., Towsley, D., Gao, L.: The monitoring and early detection of Internet worms. ACM Transactions on Networking (2005)
24. Weaver, N., Staniford, S., Paxson, V.: Very fast containment of scanning worms. In: Proceedings of the USENIX Security Symposium, pp. 29–44 (2004)
25. DETER: Cyber defense technology experiment research (DETER) network, http://www.isi.edu/deter/
26. Stafford, S., Li, J., Ehrenkranz, T., Knickerbocker, P.: GLOWS: A high-fidelity worm simulator. Technical Report CIS-TR-2006-11, University of Oregon (2006)
27. LBNL/ICSI enterprise tracing project (2005), http://www.icir.org/enterprise-tracing/
28. Group, W.N.R.: WAND WITS: Auckland-IV trace data (April 2001), http://wand.cs.waikato.ac.nz/wand/wits/auck/4/
29. UMass trace repository, http://traces.cs.umass.edu/
30. Collins, M.P., Reiter, M.K.: On the limits of payload-oblivious network attack detection. In: Proceedings of the Symposium on Recent Advances in Intrusion Detection, pp. 251–270 (September 2008)
31. Allman, M., Paxson, V., Terrell, J.: A brief history of scanning. In: Proceedings of the ACM Internet Measurement Conference, pp. 77–82 (October 2007)
32. Li, P., Salour, M., Su, X.: A survey of internet worm detection and containment. IEEE Communications Society Surveys and Tutorials 10(1), 20–35 (2008)

### Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams

**Abstract:**
Network intrusion detection systems (NIDS) extensively use regular expressions as attack signatures. Internally, NIDS represent and operate these signatures using finite automata. Traditional representations of finite automata present a well-known time-space tradeoff: deterministic finite automata (DFAs) provide fast matching but are memory-intensive, while non-deterministic finite automata (NFAs) are space-efficient but significantly slower than DFAs. This tradeoff has motivated much recent research, primarily focused on improving the space-efficiency of DFAs, often at the cost of reduced performance.

This paper introduces NFA-OBDDs, a symbolic representation of NFAs that retains their space-efficiency while improving their time-efficiency. Experiments using Snort HTTP and FTP signature sets show that an NFA-OBDD-based representation of regular expressions can outperform traditional NFAs by up to three orders of magnitude and is competitive with a variant of DFAs, while remaining as compact as NFAs.

**Keywords:** NIDS, signature matching, ordered binary decision diagrams.

### 1. Introduction

Deep packet inspection allows NIDS to accurately identify malicious traffic by matching the contents of network packets against attack signatures. While attack signatures were once simple keywords, the increasing complexity of network attacks has led to the use of richer signature representations, requiring the full power of regular expressions. To be useful for deep packet inspection, any representation of regular expressions must be both time- and space-efficient. Time-efficiency requires that the NIDS process each byte of network traffic quickly, while space-efficiency ensures that the representation fits within the main memory of the NIDS.

Finite automata naturally represent regular expressions but offer a tradeoff between time- and space-efficiency. DFAs allow efficient matching (O(1) lookups to its transition table to process each input symbol), while NFAs can take up to O(n) transition table lookups to process each input symbol, where n is the number of states in the NFA. NFAs are space-efficient, but DFAs for certain regular expressions can be exponentially larger than the corresponding NFAs. Combining NFAs leads to an additive increase in the number of states, while combining DFAs can result in a multiplicative increase. DFA representations for large sets of regular expressions often consume several gigabytes of memory and do not fit within the main memory of most NIDS.

Recent research has focused on improving the space-efficiency of DFAs, including heuristics to compress DFA transition tables, techniques to combine regular expressions into multiple DFAs, and variable extended finite automata (XFAs). These techniques trade time for space, and though the resulting representations fit in main memory, their matching algorithms are slower than those for traditional DFAs.

In this paper, we focus on improving the time-efficiency of NFAs. NFAs offer several advantages over DFAs:
- **Compactness:** Determinizing an NFA can result in a DFA with exponentially more states.
- **Space-Efficient Combination:** Combining two NFAs involves linking their start states, resulting in a combined NFA only as large as the sum of the two NFAs.
- **Parallelization:** NFAs can be parallelized, as the frontier (set of states) can be processed in parallel.

Motivated by these advantages, we develop a new approach to improve the time-efficiency of NFAs. The frontier of an NFA can contain O(n) states, each of which must be processed using the NFA's transition relation for each input symbol. Although this frontier can be processed in parallel, NFAs for large signature sets may contain several thousand states, making parallel processing on commodity hardware challenging.

Our core insight is that a technique to efficiently apply an NFA's transition relation to a set of states can greatly improve the time-efficiency of NFAs. Such a technique would apply the transition relation to all states in the frontier in a single operation to produce a new frontier. We use Ordered Binary Decision Diagrams (OBDDs) to implement this technique. OBDDs are inspired by symbolic model checking, where they allow the verification of systems with a large number of states.

**Main Contributions:**
- **Design of NFA-OBDDs:** We develop a novel technique that uses OBDDs to improve the time-efficiency of NFAs (Section 3). We also describe how NFA-OBDDs can enhance the time and space-efficiency of NFA-based multi-byte matching (Section 5).
- **Comprehensive Evaluation:** We evaluated NFA-OBDDs using Snort's HTTP and FTP signature sets and observed a speedup of about three orders of magnitude over traditional NFAs. We also compared the performance of NFA-OBDDs against a variety of automata implementations, including the PCRE package and a variant of DFAs (Section 4).

### 2. Ordered Binary Decision Diagrams

An OBDD is a data structure that can represent arbitrary Boolean functions. OBDDs transform Boolean function manipulation into efficient graph transformations and have found wide use in various application domains. For example, OBDDs are used in symbolic model checking to verify systems with a large number of states.

**Example:**
Consider the Boolean function \( f(x, i, y) \):

\[
\begin{array}{c|c|c|c}
x & i & y & f(x, i, y) \\
\hline
0 & 0 & 0 & 1 \\
0 & 0 & 1 & 0 \\
0 & 1 & 0 & 1 \\
0 & 1 & 1 & 1 \\
1 & 0 & 0 & 1 \\
1 & 0 & 1 & 0 \\
1 & 1 & 0 & 0 \\
1 & 1 & 1 & 1 \\
\end{array}
\]

The OBDD representation of this function is:

```
       x
      / \
     0   1
    /     \
   i       i
  / \     / \
 0   1   0   1
 /   /   /   /
y   y   y   y
/   /   /   /
0   1   0   1
```

In this OBDD, each node represents a variable, and the edges represent the possible values (0 or 1) of that variable. The terminal nodes (leaves) represent the output of the function (0 or 1).

By using OBDDs, we can efficiently apply the transition relation to the frontier of an NFA, thereby improving its time-efficiency.