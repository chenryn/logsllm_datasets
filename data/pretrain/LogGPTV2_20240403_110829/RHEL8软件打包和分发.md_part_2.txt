些语言提供了选择：它们可以原始解读或编译。
:::
:::
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#building-software-from-source_preparing-software-for-rpm-packaging}从源构建软件 {.title}
:::
对于使用编译语言编写的软件，源代码将经过构建过程，生成计算机代码。此过程通常称为编译或转换，但因不同的语言而异。生成的软件可以运行，这会使计算机执行程序员指定的任务。
对于使用原始解释语言编写的软件，源代码不会构建，而是直接执行。
对于采用字节编译语言编写的软件，源代码将编译成字节代码，然后由语言虚拟机执行。
以下子章节描述了如何从源代码构建软件：
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#building-software-from-natively-compiled-code_preparing-software-for-rpm-packaging}使用原生编译代码构建软件 {.title}
:::
本节演示了如何将 C 语言编写的 `cello.c`{.literal} 程序构建成可执行文件。
`cello.c`{.literal}
``` literallayout
#include 
int main(void) {
    printf("Hello World\n");
    return 0;
}
```
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#manual-building_preparing-software-for-rpm-packaging}手动构建 {.title}
:::
如果要手动构建 `cello.c`{.literal} 程序，请使用以下步骤：
::: orderedlist
**流程**
1.  从 [GNU Compiler Collection](https://gcc.gnu.org/){.link} 调用 C
    编译器，以将源代码编译为二进制：
    ``` literallayout
    gcc -g -o cello cello.c
    ```
2.  执行生成的输出二进制 `cello`{.literal} ：
    ``` literallayout
    $ ./cello
    Hello World
    ```
:::
:::
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#automated_building}自动构建 {.title}
:::
大型软件通常使用自动构建，这可以通过创建 `Makefile`{.literal} 文件并运行
[GNU `make`{.literal}](http://www.gnu.org/software/make/){.link}
工具来完成。
如果要使用自动构建来构建 `cello.c`{.literal} 程序，请使用以下步骤：
::: orderedlist
**流程**
1.  要设置自动构建，请在与 `cello.c`{.literal}
    相同的目录中使用以下内容创建 `Makefile`{.literal} 文件。
    `Makefile`{.literal}
    ``` literallayout
    cello:
    	gcc -g -o cello cello.c
    clean:
    	rm cello
    ```
    请注意，`cello:`{.literal} 和 `clean:`{.literal} 下的行必须以 tab
    空间开头。
2.  要构建软件，请运行 `make`{.literal} 命令：
    ``` literallayout
    $ make
    make: 'cello' is up to date.
    ```
3.  由于已经有可用的构建，请运行 `make clean`{.literal}
    命令，并在再次运行 `make`{.literal} 命令后运行：
    ``` literallayout
    $ make clean
    rm cello
    $ make
    gcc -g -o cello cello.c
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在另一个构建后尝试构建程序无效。
    ``` literallayout
    $ make
    make: 'cello' is up to date.
    ```
    :::
4.  执行程序：
    ``` literallayout
    $ ./cello
    Hello World
    ```
:::
您现在已手动编译了一个程序，以及使用构建工具。
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#interpreting-code_preparing-software-for-rpm-packaging}解释代码 {.title}
:::
本节介绍如何对使用 [Python](https://www.python.org/){.link}
编写的程序进行字节编译，并解读在
[bash](https://www.gnu.org/software/bash/){.link} 中编写的程序。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在以下两个示例中，文件顶部的 `#!`{.literal} 行称为
[**shebang**]{.strong}，不是编程语言源代码的一部分。
[**shebang**]{.strong}
启用将文本文件用作可执行文件：系统程序加载程序解析包含
[**shebang**]{.strong}
的行以获取二进制可执行文件的路径，然后用作编程语言解释器。该功能要求文本文件标记为可执行文件。
:::
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#byte-compiling-code}字节编译代码 {.title}
:::
本节介绍如何将以 Python 语言编写的 `pello.py`{.literal}
程序编译成字节代码，然后由 Python 语言虚拟机执行。
Python 源代码也可以被原始解译，但字节编译的版本更快。因此，RPM
软件包员更喜欢打包字节编译的版本，以分发到最终用户。
`pello.py`{.literal}
``` literallayout
#!/usr/bin/python3
print("Hello World")
```
字节编译程序的流程因以下因素而异：
::: itemizedlist
-   编程语言
-   语言的虚拟机
-   与该语言一起使用的工具和进程
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
[Python](https://www.python.org/){.link}
通常由字节编译，但不会采用此处描述的方式。下列程序的目的不是符合社区标准，而是简单易举。有关真实的
Python
[准则，请参阅软件打包和发布](https://docs.python.org/2/library/distribution.html){.link}。
:::
使用这个步骤将 `pello.py`{.literal} 编译成字节代码：
::: orderedlist
**流程**
1.  字节 - 编译 `pello.py`{.literal} 文件：
    ``` literallayout
    $ python -m compileall pello.py
    $ file pello.pyc
    pello.pyc: python 2.7 byte-compiled
    ```
2.  在 `pello.pyc`{.literal} 中执行字节代码：
    ``` literallayout
    $ python pello.pyc
    Hello World
    ```
:::
:::
::: section
::: titlepage
## []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#raw-interpreting}原始解译代码 {.title}
:::
本节介绍如何原始解译使用
[bash](https://www.gnu.org/software/bash/){.link} shell 内置语言编写的
`bello`{.literal} 程序。
`bello`{.literal}
``` literallayout
#!/bin/bash
printf "Hello World\n"
```
使用 shell 脚本语言编写的程序（如 [*bash*]{.emphasis} ）是原始解析的。
::: itemizedlist
**流程**
-   使包含源代码的文件可执行并运行它：
    ``` literallayout
    $ chmod +x bello
    $ ./bello
    Hello World
    ```
:::
:::
:::
::: section
::: titlepage
# []{#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#patching-software_preparing-software-for-rpm-packaging}修补软件 {.title}
:::
在 RPM 打包中，我们不修改原始源代码，而是保留它并在其上使用补丁。
修补程序是更新其他源代码的源代码。它被格式化为
[*diff*]{.emphasis}，因为它表示两个文本版本之间的不同。[*diff*]{.emphasis}
使用 `diff`{.literal} 实用程序创建，然后使用
[patch](http://savannah.gnu.org/projects/patch/){.link}
实用程序将其应用于源代码。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
软件开发人员通常使用 [git](https://git-scm.com/){.link}
等版本控制系统来管理其代码库。这些工具提供自己的创建差异或修补软件的方法。
:::
本节介绍如何修补软件。
以下示例演示了如何使用 `diff`{.literal}
从原始源代码创建补丁，以及如何使用 `patch`{.literal} 应用补丁。创建 RPM
时，后续章节中会使用补丁; [请参阅使用 SPEC
文件](#packaging-software_packaging-and-distributing-software.html#working-with-spec-files "使用 SPEC 文件"){.link}。
这个步骤演示了如何从原始源代码为 `cello.c`{.literal} 创建补丁。
::: orderedlist
**流程**
1.  保留原始源代码：
    ``` literallayout
    $ cp -p cello.c cello.c.orig
    ```
    `-p`{.literal} 选项用于保留模式、所有权和时间戳。
2.  根据需要修改 `cello.c`{.literal} ：
    ``` literallayout
    #include 
    int main(void) {
        printf("Hello World from my very first patch!\n");
        return 0;
    }
    ```
3.  使用 `diff`{.literal} 实用程序生成补丁：
    ``` literallayout
    $ diff -Naur cello.c.orig cello.c
    --- cello.c.orig        2016-05-26 17:21:30.478523360 -0500
    + cello.c     2016-05-27 14:53:20.668588245 -0500
    @@ -1,6 +1,6 @@
     #include
     int main(void){
    -    printf("Hello World!\n");
    +    printf("Hello World from my very first patch!\n");
         return 0;
     }
    \ No newline at end of file
    ```
    以 `-`{.literal} 开头的行从原始源代码中删除，并替换为以
    `+`{.literal} 开头的行。
    建议在 `diff`{.literal} 命令中使用 `Naur`{.literal}
    选项，因为它适合大多数常见的用例。然而，在这个特定情况下，只需要
    `-u`{.literal} 选项。特定选项可确保以下内容：
    ::: itemizedlist
    -   `-N`{.literal} （或 `--new-file`{.literal}）-
        处理缺少的文件，就像这些文件为空文件一样。
    -   `-a`{.literal} （或 `--text`{.literal}） -
        将所有文件视为文本。因此，`diff`{.literal}
        归类为二进制文件的文件不会被忽略。
    -   `-u`{.literal} （或 `-U NUM`{.literal} 或
        `--unified[=NUM]`{.literal}）- 以统一上下文的输出 NUM（默认
        3）行形式返回输出。这是一种易读的格式，允许在将补丁应用到已更改的源树时进行模糊匹配。
    -   `-r`{.literal} （或 `--recursive`{.literal}）-
        递归比较找到的任何子目录。
        有关 `diff`{.literal} 工具的常用参数的详情，请查看
        `diff`{.literal} 手册页。
    :::
4.  将补丁保存到文件中：
    ``` literallayout
    $ diff -Naur cello.c.orig cello.c > cello-output-first-patch.patch
    ```
5.  恢复原始 `cello.c`{.literal} ：
    ``` literallayout
    $ cp cello.c.orig cello.c
    ```
    必须保留原始 `cello.c`{.literal}，因为当构建 RPM