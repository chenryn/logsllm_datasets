delete an unacknowledged message from its buffer and a
faulty server can easily force clients to consume inﬁnite
memory by never acknowledging messages.
Table 1 summarizes the key results discussed in this sec-
tion. Our analysis results in a series of Byzantine quo-
rum systems and protocols over a range of system mod-
els, with increasing numbers of servers required to toler-
ate progressively weaker system models. For generic data,
2f  1 servers are needed for synchronous reliable network
systems where timeouts are short, 2f  1 to 3f  1 for
synchronous reliable network systems where timeouts are
long, 3f  1 for asynchronous reliable network systems,
and 4f  1 for asynchronous unreliable network systems.
Self-verifying-data allows systems to be built for each of
these scenarios using f fewer servers.
In Subsection 4.1 we explain the circumstances under
which the reliable asynchronous network abstraction can be
implemented on top of an unreliable network. If this con-
struction is not possible then other network models must be
considered, for example a synchronous model or one that
makes no assumption of reliability. These models are dis-
cussed in Subsections 4.2 and 4.3 respectively.
4.1. Engineering an asynchronous reliable network
If the network layer is subject to arbitrary Byzantine fail-
ures then a faulty receiver can prevent a sender from ever
deleting buffered messages. Nonetheless, one can engineer
a reasonable approximation of an asynchronous reliable net-
work abstraction when one can (1) restrict the failures to
which the system or the network layer is vulnerable or (2)
restrict the workload so that inﬁnite buffering is not a con-
cern. To illustrate when a reliable network layer can be
built, we provide a few examples of both types of restric-
tion below.
Restricting failures. For a fail-stop system model, this
problem may not be a large concern because there exist rea-
sonable engineering approaches to avoid the need for inﬁ-
nite memory while providing a reasonable approximation
of reliable asynchronous messaging. For example, several
reliable messaging systems [1, 15] store unacknowledged
messages on in an on-disk log. It may be safe in practice to
assume that it is extremely unlikely that the log will over-
ﬂow by assuming (1) a large log, (2) a reasonable bound
on crash or partition durations, and (3) that a machine will
acknowledge received messages after the repair of a crash
or partition. Although such an approach may be theoreti-
cally unsatisfying (it implicitly assumes a bound on the du-
ration of failures and therefore is no longer, strictly speak-
ing, an asynchronous system), this approach seems com-
mon in practice.
In some systems,
Restricting network failures.
the
Byzantine quorum protocol layer is vulnerable to arbitrary
Byzantine failures, but the network layer is less vulnera-
ble. Examples include “System/Storage Area Networks”
(SANs) (such as Fibre Channel [27]), networks for Mas-
sively Parallel Processors (MPPs) (such as the Thinking
Machines CM5 and Cray T3D), networks with built-in re-
dundancy and automatic fail-over such as Autonet [28], and
networks with automatic link-level retransmission [25]. A
second, related, approach to bounding memory consump-
tion by assuming a restricted model of network failures is to
construct a network protocol without relying on acknowl-
edgments to free network retransmission buffers. For ex-
ample, consider the case where the primary cause of mes-
sage loss is bit errors from transient electronic interference,
where each packet has a probability  of arriving at its des-
tination. A sender that retransmits a message a constant
number of times or with sufﬁcient forward error control re-
dundancy [6] may in this case regard the packet as success-
fully sent, even if no acknowledgments are received; such a
system may still use acknowledgments to reduce the num-
ber of retransmissions in the common case of a responsive
sender. A third approach that insulates the network layer
from some failures is to rely on protection across software
modules. For example, in some systems the network layer
may be a protected kernel subsystem and may be consid-
ered less vulnerable to Byzantine failures than higher-level
protocols.
Restricting the workload. Rather than restricting the net-
work failure model, some systems may approximate reli-
able asynchronous messaging with ﬁnite buffers by assum-
ing a restricted workload. If the request rate is low and the
retransmission buffer large (e.g., on disk as in MQS [1] for
example), then a system may reasonably buffer all sent mes-
sages regardless of whether they have been acknowledged.
An example of a system where such an assumption is natu-
ral is a system that already maintains a persistent log of all
transactions for another purpose such as auditing.
4.2. Synchronous network
Given the challenges to engineering a reliable asyn-
chronous network, it may not be much more difﬁcult to en-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:26:38 UTC from IEEE Xplore.  Restrictions apply. 
Network Model
reliable synchronous
(fast timeouts)
reliable synchronous
(slow timeouts)
reliable asynchronous
unreliable asynchronous U-masking/U-dissemination
Protocol
Bazzi [4]
servers for generic data
servers for self-verifying data
2f+1
f+1
S-SBQ
SBQ
SBQ
2f+1 to 3f+1
f+1 to 2f+1
3f+1
3f+1
4f+1
2f+1
2f+1
3f+1
Table 1. Summary of protocols tolerating f Byzantine failures for different network models.
gineer a reliable synchronous network that allows network
buffers to be bounded by placing an upper bound on de-
livery time. In effect, such a system declares that a server
has failed if it fails to acknowledge a message within a pre-
scribed time.
An obvious strategy to constructing Byzantine storage
in a synchronous system is to use time-outs not only to
garbage collect network buffers but also to detect server fail-
ures at the BQS-protocol level. This additional information
can improve the efﬁciency of the BQS protocol. In partic-
ular, Bazzi [4] describes a synchronous BQS protocol for
generic (or self-verifying) data that requires just 2f  1 (or
f  1) servers to provide storage with safe (or regular) se-
mantics. Bazzi’s read protocol for self-verifying data, for
example, sends read requests to all f  1 servers, waits for
f  1 replies or time-outs, and then returns the correct value
with the highest timestamp from the set of replies.
The disadvantage of such an approach is that a single
faulty server can force each read request to wait for a time-
out. Unfortunately, for many systems the natural network
timeout may be long or it may be difﬁcult to estimate pre-
cisely. For example, empirical measurements of network
failures show a heavy-tailed distribution for the duration of
Internet connectivity failures, with signiﬁcant numbers of
failures lasting several minutes and some network failures
lasting hours [10]. As another example, TCP’s protocol for
establishing an initial connection attempts retransmissions
at increasing intervals that can exceed one minute if several
packet losses occur in a row [3]. Therefore, it may often be
desirable to conservatively set such timeouts to be as long as
possible in order to avoid introducing spurious server fail-
ures. When messages can be buffered on disks, timeouts of
minutes, hours, or longer may be desirable.
Unfortunately, if a synchronous BQS protocol is used,
such timeouts could result in unacceptable read perfor-
mance for many applications.
In some cases, the impact
of long timeouts can be mitigated by having clients track
which servers have timed out in the past so that clients can
avoid sending messages to or waiting for servers known to
have failed. Unfortunately, this solution is not always ap-
propriate. For example, for some applications or environ-
ments such an approach can (1) increase the complexity of
a client, (2) increase the complexity of server recovery [8],
(3) inﬂict a timeout that is too long (e.g., minutes or hours)
to be accepted for even a single operation per client, or (4)
remain vulnerable to a server that consistently responds a
few moments before a series of timeouts.
An alternative approach is to use an asynchronous
Byzantine quorum protocol over a synchronous network. In
this approach, a server that fails to acknowledge a message
within a timeout is deﬁned to have failed, and the network
layer uses timeouts to bound buffer consumption by delet-
ing messages to failed servers. The Byzantine quorum pro-
tocol, however, is asynchronous and does not make use of
timeouts. In effect, we are deploying an asychronous proto-
col on top of a synchronous network. Although the concept
may be surprising, this approach has a number of advan-
tages. First, this approach allows for a clean separation of
concerns. Second, it is “self-timing”: reads and writes pro-
ceed at the rate of the correct servers rather than the rate
imposed by failed servers and timeouts. The price for this
speed is that the SBQ protocol requires f more servers than
Bazzi’s synchronous protocol.
This naturally raises the question of how much perfor-
mance can be achieved using fewer additional servers. In
fact, a continuum exists between (a) the option of syn-
chronous protocols such as Bazzi’s that use 2f  1 servers
for generic data but that can suffer slow reads if even one
server is faulty and (b) the option of asynchronous protocols
that use 3f  1 servers for generic data servers but that can
keep all failed servers off the critical path of read and write
operations. We cover this complete continuum by adapt-
ing the SBQ protocol to the reliable synchronous network
model. The resulting protocol, S-SBQ, provides two differ-
ent guarantees: it can still tolerate f failures, and in addition
it is guaranteed to complete operations without waiting for
time-outs as long as the number of actual failures stays be-
low some threshold  ( (cid:20) f). We say that S-SBQ is f-safe,
t-fast. By comparison, the Bazzi protocol is f-safe, 0-fast
and the asynchronous BQS protocols are f-safe, f-fast. The
quorum construction used by S-SBQ allows it to be f-safe,
t-fast using f 1 servers (2f 1 for non-self-verifying
data). Because the choice of the value of  is left to the im-
plementor, S-SBQ can either use as few servers as Bazzi’s
protocol or always be self-timing like SBQ. More interest-
ingly, its performance can be adjusted to any intermediate
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:26:38 UTC from IEEE Xplore.  Restrictions apply. 
scenario.
Due to space constraints, we refer the reader to [22] for
the complete description of the S-SBQ protocol. Note that
even though the discussion of the previous paragraph was
limited to the threshold case, S-SBQ uses a more general
failure model that includes not only a fail-prone system but
also a new delay-prone system to describe the conditions
under which the protocol must be fast.
The following theorems describe the key behaviors of
the S-SBQ protocol.
Theorem 1 The S-SBQ protocol for self-verifying data fol-
lows regular semantics and the S-SBQ protocol for non-self-
verifying data follows safe semantics. (Safety)
This theorem expresses the safety of the protocol.
Its
proof derives from the intersection property of our quorum
construction.
Theorem 2 The S-SBQ protocols are live (i.e. all requests
eventually terminate). (Liveness)
It is easy to show by inspection that all protocol oper-
ations terminate at most after a time-out delay. The next
theorem expresses the conditions under which the protocol
does not need to wait for this delay.
Theorem 3 The S-SBQ protocols are self-timed as long as
the failure set is covered by some delay scenario. (Perfor-
mance)
This derives from the availability property of the quo-
rums.
It is also straightforward to adapt Bazzi’s protocol to
construct an f-safe, t-fast version by adding more servers.
However, because Bazzi’s protocol includes synchronous
acknowledgments of writes, the natural deﬁnition of such an
“S-Bazzi” protocol retains symmetric read and write quo-
rums and therefore requires 2f  2  1 servers for generic
data (f  2  1 servers for self-verifying data).
4.3. Unreliable asynchronous network
In this section we describe a U-masking and U-
dissemination Byzantine quorum protocol for authenticated
unreliable networks as deﬁned in Section 2 in which the
protocol deals with network-layer failures, retransmission,
and buffering. We also show how variations of this proto-
col can bound network retransmission buffer consumption.
This protocol is a straightforward extension of Malkhi and
Reiter’s protocol for asynchronous reliable networks [19].
Due to space constraints, we summarize the protocol and
its properties in this section. We refer the reader to [22]
for a full statement of the protocol as well as proofs for the
theorems and lemmas stated in this section.
Although the model used by Malkhi and Reiter’s original
protocol ensures that all correct servers receive all transmit-
ted messages, the protocol itself only relies on a quorum
of servers receiving each message. Thus, once a sender re-
ceives responses to a request from a quorum of machines,
it may safely stop retransmitting that request. Because the
protocol requires explicit responses to all requests, includ-
ing writes, it is simple to adapt it to manage retransmission
buffers.
In particular, we modify the protocol to replace
each step that waits for a quorum of replies to instead re-
peatedly resend the message sent in the previous step to all
servers that have not responded until a quorum of servers
has responded. Note that a sender can space the repeated
resends arbitrarily far apart in time as long as it follows
an algorithm that ensures an inﬁnite number of retries to
a receiver if no response from that receiver is ever received
and if the send to that receiver is not cancelled. Also note
that these application-level retransmissions provide weaker
guarantees than the reliable asynchronous networking ab-