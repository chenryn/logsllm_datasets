### Deleting Unacknowledged Messages and Memory Consumption

A faulty server can force clients to consume infinite memory by never acknowledging messages, thereby preventing the deletion of unacknowledged messages from the buffer. Table 1 summarizes the key results discussed in this section. Our analysis yields a series of Byzantine quorum systems and protocols across various system models, with an increasing number of servers required to tolerate progressively weaker system models. For generic data, the following numbers of servers are needed:

- **Synchronous reliable network (short timeouts):** \(2f + 1\) servers
- **Synchronous reliable network (long timeouts):** \(2f + 1\) to \(3f + 1\) servers
- **Asynchronous reliable network:** \(3f + 1\) servers
- **Asynchronous unreliable network:** \(4f + 1\) servers

Self-verifying data allows for the construction of these systems using \(f\) fewer servers.

### Engineering an Asynchronous Reliable Network

#### Circumstances for Implementation

In Subsection 4.1, we discuss the conditions under which a reliable asynchronous network abstraction can be implemented over an unreliable network. If such implementation is not feasible, alternative network models, such as synchronous or non-reliable models, must be considered. These models are detailed in Subsections 4.2 and 4.3, respectively.

#### Handling Network Failures

If the network layer is subject to arbitrary Byzantine failures, a faulty receiver can prevent a sender from deleting buffered messages. However, one can engineer a reasonable approximation of an asynchronous reliable network by either:

1. **Restricting Failures:**
   - **Fail-Stop Systems:** In a fail-stop model, the problem of infinite buffering can be mitigated by storing unacknowledged messages on disk. This approach assumes a large log, reasonable bounds on crash or partition durations, and that machines will acknowledge messages after recovery.
   - **Network Layer Vulnerability:** In some systems, the Byzantine quorum protocol layer is vulnerable to arbitrary Byzantine failures, but the network layer is less so. Examples include System/Storage Area Networks (SANs), networks for Massively Parallel Processors (MPPs), and networks with built-in redundancy and automatic fail-over. Another approach is to construct a network protocol without relying on acknowledgments to free retransmission buffers, such as retransmitting messages a constant number of times or using forward error control redundancy.

2. **Restricting Workload:**
   - **Low Request Rate:** By assuming a low request rate and a large retransmission buffer (e.g., on disk), a system can reasonably buffer all sent messages regardless of acknowledgment. An example is a system that maintains a persistent log of all transactions for auditing purposes.

### Synchronous Network

Given the challenges in engineering a reliable asynchronous network, it may be more practical to implement a reliable synchronous network that bounds network buffers by placing an upper limit on delivery time. A server is declared failed if it does not acknowledge a message within a specified time.

#### Strategies for Byzantine Storage

- **Using Timeouts:** Bazzi [4] describes a synchronous Byzantine Quorum System (BQS) protocol that requires \(2f + 1\) (or \(f + 1\)) servers for generic (or self-verifying) data. The read protocol for self-verifying data sends requests to \(f + 1\) servers, waits for \(f + 1\) replies or timeouts, and returns the correct value with the highest timestamp.
- **Disadvantages:** A single faulty server can cause each read request to wait for a timeout, which can be long or difficult to estimate precisely. Long timeouts can result in unacceptable read performance for many applications.

#### Alternative Approach

An alternative is to use an asynchronous Byzantine quorum protocol over a synchronous network. In this approach, a server that fails to acknowledge a message within a timeout is defined as failed, and the network layer uses timeouts to bound buffer consumption. The Byzantine quorum protocol remains asynchronous and does not use timeouts, allowing reads and writes to proceed at the rate of the correct servers rather than being dictated by failed servers and timeouts. This approach, while requiring \(f\) more servers than Bazzi’s protocol, offers a clean separation of concerns and is self-timing.

### S-SBQ Protocol

The S-SBQ protocol provides two guarantees: it can tolerate \(f\) failures and complete operations without waiting for timeouts as long as the number of actual failures stays below a threshold \(\theta\) (\(\theta \leq f\)). S-SBQ is \(f\)-safe and \(\theta\)-fast, using \(f + \theta + 1\) servers (or \(2f + \theta + 1\) for non-self-verifying data). This protocol can be adjusted to any intermediate scenario between Bazzi’s protocol and fully asynchronous protocols.

### Unreliable Asynchronous Network

In this section, we describe a U-masking and U-dissemination Byzantine quorum protocol for authenticated unreliable networks. This protocol deals with network-layer failures, retransmission, and buffering, and can bound network retransmission buffer consumption. It is an extension of Malkhi and Reiter’s protocol for asynchronous reliable networks [19].

#### Key Properties

- **Quorum-Based Retransmissions:** Once a sender receives responses from a quorum of servers, it can stop retransmitting the request.
- **Adaptations:** The protocol is modified to repeatedly resend messages to servers that have not responded until a quorum has responded. This ensures that an infinite number of retries are made if no response is received and the send is not cancelled.

For a full description of the S-SBQ protocol and its properties, please refer to [22].