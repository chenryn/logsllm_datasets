## Issue Summary
I have thoroughly searched the repository's issues and believe that this is not a duplicate.

## Expected Behavior
- **Server-side:**
  - The generation of class names should occur only once.
- **Client-side:**
  - The generation of class names should also occur only once.
- **Consistency:**
  - Both server-side and client-side class name generations should match.

Additionally, I should be able to:
- Avoid using `MuiThemeProvider` at the root of my application while still being able to disable class name generation.
- Use Material-UI (MUI) on one route but not on another.
- Ensure that disabling class name generation applies to the entire component tree, even if there are multiple nested `MuiThemeProviders`.

## Current Behavior
- **Server-side:**
  - Class name generation occurs twice:
    - The first time when using `apollo`'s `getDataFromTree`.
    - The second time when using `reactDOMServer`'s `renderToString`.
- **Client-side:**
  - Class name generation occurs once, but it does not match the server-side generation.
  - The client-side class name generation matches the first server-side generation, but the class names rendered in the React components correspond to the second server-side generation.
  - To disable class name generation for one of the renders, I am forced to use `MuiThemeProvider` at the root of the tree, which allows me to dynamically pass the `disableStylesGeneration` prop.

## Concerns
- **Avoiding `MuiThemeProvider` at the Root:**
  - In many cases, visitors will only access the home page, so rendering an unnecessary `MuiThemeProvider` at the root would be wasteful.
  - Additionally, what if I have a pattern with multiple `MuiThemeProvider` instances?

## Steps to Reproduce
I have created a repository to illustrate the problem:
- [GitHub Repository](https://github.com/Aetherall/MUI-issue)

## Context
- **Application Structure:**
  - **Home Page:** No MUI
  - **Dashboard Page:** Uses MUI
  - **Multiple Page:** Uses MUI with multiple nested providers
- **Requirement:**
  - I do not want to use `MuiThemeProvider` at the root of the app because it would result in unnecessary execution for the majority of visitors who only visit the Home page.

## Proposed Solution
- **Context-based Disabling:**
  - Modify `MuiThemeProvider` to retrieve the `disableStylesGeneration` value from the context if no props are provided.
  - Create a new component that takes a `disable` boolean prop. This component would inject the `disableStylesGeneration` value into the context based on the value of its `disable` prop.

## Technology Stack
- **Material-UI:** ^1.0.0-beta.31
- **React:** ^16.2.0
- **react-jss:** ^8.2.1

This approach would allow for more flexible and efficient management of class name generation in both server-side and client-side rendering scenarios.