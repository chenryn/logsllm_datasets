翻译自：  
翻译：聂心明
在这篇文章中，我将介绍Spring Data REST远程命令执行漏洞并且我将展示如何使用ql帮助保证漏洞得到正确的修复。
# 漏洞详情
这个漏洞（ CVE-2017-8046 
）它通过发送PATCH请求，并且数据包里面带有特意构造的恶意json数据，这样就可以在服务器上运行任意代码，而且不幸的是，这个漏洞非常好利用。它影响了Spring
Data REST组件，这个组件分布在各种Spring项目中，包括，Spring Boot
framework。想要看更详细的受影响Spring组件，可以访问
我在2017年9月发现这个漏洞，然后我快速的把这个漏洞报给了官方，通过我们的帮助，官方在2017年十月发布给受影响的组件发布了补丁，在Pivotal的要求下，并且由于这个漏洞的严重性，我们在2018年3月公开了这个漏洞的。在文章底部有漏洞披露的完整时间线。
# Spring表达式语言（SpEL）漏洞
Spring表达式（SpEL ）是非常强大的spring框架表达式语言。典型地，使用SpelExpressionParser
（ ）
把字符串解析成表达式 （ 
），当其中一个方法获取到值之后，表达式就会被执行，getValueType 或者 setValue会被调用：
    Expression expr = expressionParser.parseExpression(stringScript);
    expr.getValue(); //Execute the code in stringScript
通常，SpEL仅限于内部使用并且stringScript会被程序完全控制。无论怎么样，SpEL是非常强大的语言，如果输入的表达式来自于不受信任的源，那么攻击者就可以在有漏洞的服务器上执行。例如，如果stringScript是下面这样的形式的话：
    String stringScript = "T(java.lang.Runtime).getRuntime().exec(" + cmd + ").x";
之后cmd就被执行。  
这就是这个Spring Data REST漏洞的基本原理，Spring Data
REST把远程输入的数据解析成SpEL表达式，并且将其解析。为了使用QL发现漏洞，我首先使用表达式解析器建模类和函数的访问：
    /** The class `ExpressionParser` in spring. */
    class ExpressionParser extends RefType {
      ExpressionParser() {
        this.hasQualifiedName("org.springframework.expression", "ExpressionParser")
      }
    }
    /** Methods to parse an expression. */
    class ParseExpression extends MethodAccess {
      ParseExpression() {
        exists (Method m |
          (m.getName().matches("parse%") or m.hasName("doParseExpression"))
          and
          this.getMethod() = m
        )
      }
    }
在解析之前，它能辨别出多种函数。一些函数被定义在ExpressionParser中，然而一些其他函数只在SpelExpressionParser定义，我不会在这里指定方法的具体的声明类型，反而在查询结果中限制查询结果。  
为了获取更多有价值的结果，我想寻找一段可以被输入控制且能被解析的表达式。以前的一种方法是使用数据流库追踪远程的输入。可是，我对Spring Data
REST的内部工作原理不是很了解，所以没有对远程输入建模，我决定探索一下，并且在javadoc中寻找一些线索。通常在web应用程序中进行远程输入的类中，一个路径或者URL会在Javadoc或者注释中具体说明。在QL中，我能通过Javadoc类访问Javadoc，所以让我们在Javadoc中寻找包含路径和URL的内容吧。下面的类是javadoc中的一个类，这个类做一些基本的字符串分析，目的是检查表达式的内容中是否包含文件路径或者URL。
    /** Look for hints in the javadoc that indicates this method is use for processing path. */
    class DocHasPath extends Javadoc {
      DocHasPath() {
        exists(string s |
          //Look for something that indicates the functionality is to do with a path.
          s = this.toString().regexpMatch("(.* )?/[^ ]*/.*|.*path.*")
        )
      }
    }
我使用下面的方法去发现在Javadoc类中包含路径的函数
    /** Look for methods that may be used for processing paths, indicated by javadoc. */
    class CallHasPath extends Callable {
      CallHasPath() {
        //exclude test classes
        not this.getDeclaringType() instanceof TestClass and
        (
          this.getDoc().getJavadoc() instanceof DocHasPath or
          this.getDeclaringType().getDoc().getJavadoc() instanceof DocHasPath
        )
      }
    }
特别是，我对这个把字符串解析成SpEL表达式的函数非常感兴趣，所以把他们放在一起，我发现两个成果 （
）。这个成果在同一个类之中，并且javadoc建议这个类用于将补丁路径转换为SpEL表达式。更进一步的调查显示，在类中解析路径会调用PatchOperation
（ 
） 。PatchOperation的基类会被用于处理PATCH请求。这个类接收PATCH请求，它们作为字段成员被存储并被解析成SpEl Expression
（ 
）。  
经过测试，这个是可以被利用的，我把这个问题报告给了Pivotal，Pivotal团队很快的在PatchOperation中添加了verifyPath （
 ）
函数去过滤输入。这个想法是在解析表达式之前调用verifyPath，目的是为了过滤远程输入：
    verifyPath(entityType); //verify the `path` field that was parsed into a SpEL expression (`spelExpression`)
    return evaluate(spelExpression.getValueType(targetObject)); //OK to call `getValueType` for evaluation.
# 用QL发现不完全的修复
由于原来的问题没有被修复完全，因此看到相关的安全问题并不罕见。比如在Spring-Webflow中，就有 CVE-2017-4971 和
CVE-2017-8039两个类似的漏洞，这两个漏洞是相同的问题，但是用了两个不同的代码路径。如果安全漏洞没有被完全修复，就会导致很多严重的安全问题，有经验的黑客会根据安全通告找到漏洞的位置。所以在发安全通告之前，要确定补丁能够全面覆盖。为了查看漏洞是否被完全修复，就要检查是否所有调用了getValue，getValueType或者setValue代码之前都调用了verifyPath。首先，让我们定义一个包含verifyPath函数的模块：
    /** The sanitization method `verifyPath` */
    class VerifyPath extends Method {
      VerifyPath() {
        this.hasName("verifyPath") and
        this.getDeclaringType().hasQualifiedName("org.springframework.data.rest.webmvc.json.patch", "PatchOperation")
      }
    }
为了确定在调用verifyPath之后，SpEL表达式会被有效的验证，我利用了QL中的ControlFlow库。首先我定义一个ActionConfiguration，这个模块调用了verifyPath。我用isAction查看通过调用verifyPath的执行路径。
    /** A control flow node that represents a call to `verifyPath`. */
    class VerifyPathActionConf extends ActionConfiguration {
      VerifyPathActionConf() { this = "VerifyPathActionConf" }
      override predicate isAction(ControlFlowNode node) {
        node.(MethodAccess).getMethod() instanceof VerifyPath
      }
    }
ActionConfiguration包含一个名字叫callAlwaysPerformsAction的断言，它会检查是否是因为输入导致（调用）指定的操作（在这个场景中，调用一个函数导致调用verifyPath），这个操作在每个代码路径上都会被执行。
    from MethodAccess ma, VerifyPathActionConf conf
    where conf.callAlwaysPerformsAction(ma)
    select ma
这标识了一个总是调用verifyPath的函数，比如：
    public void callsVerify() {
      verifyPath();