Step 1. 
Create New 
Launch 
Configurati
on LC’ 
Step 2. 
Update 
Auto 
Scaling 
Group 
Step 3. Sort 
Instances 
Step 4. 
Deregister 
Old 
Instance 
from ELB 
ASG not 
attached 
with LC’ 
but 
attached 
with LC’’ 
RP1, RP3, 
RP5, RP6 
Update ASG 
again with LC’; 
2.99 s 
Update ASG 
again with LC’; 
2.89 s 
(Reparation) 
(Reparation) 
Deregister 
VM from 
ELB fails 
RP1, RP3, 
RP5, RP6, 
RP8 
Deregister old 
instance from 
ELB again; 
3.24 s 
Deregister old 
instance from 
ELB again; 
3.77 s 
(Direct Redo) 
(Direct Redo) 
Recovery 
Point 1 
Recovery 
Point 2 
Recovery 
Point 3 
Step 5. 
Terminate 
Old 
Instance 
VM 
Terminate 
VM fails 
(too long 
terminatio
n time) 
RP1, RP2, 
RP3, RP4, 
RP5, RP6, 
RP7, RP8 
Detach VM 
from ASG; 
(Direct 
Alternative) 
Recovery 
Point 4 
Step 6. Wait 
for ASG to 
Start New 
Instance 
VM’ 
Launch 
VM’ fails 
RP1, RP2, 
RP3, RP4, 
RP5, RP6, 
RP7, RP8 
Add hedged 
instance into 
ASG; 
(Direct 
Alternative) 
2.89 s 
3.08 s 
Detach VM 
from ASG; 
(Direct 
Alternative) 
Add hedged 
instance into 
ASG; 
(Direct 
Alternative) 
3.19 s 
3.51 s 
Recovery 
Point 5 
Step 7. 
Register 
New 
Instance 
with ELB 
Register 
VM’ to 
ELB fails 
RP1, RP3, 
RP5, RP6, 
RP8 
Register new 
instance with 
ELB again; 
3.22 s 
Register new 
instance with 
ELB again; 
3.98 s 
(Direct Redo) 
(Direct Redo) 
95 
Table 10 shows the recovery time  of the recovery for the rolling upgrade operation. Recovery 
time  here  refers to exclusively  the  time  for executing  the recovery  plan. The recovery  time  in 
the  table  represents  the  average  value  of  the  recovery  time  for  30  runs.  The  highest  relative 
standard deviation is 2.2%. For each recovery point, the execution time of the recovery action 
selected  by  the  Pareto  set  search  based  optimization  method  is  no  greater  than  the  other 
applicable  recovery  actions;  the  execution  time  of  the  selected  recovery  action  by  the  user 
constraints  based  optimization  method  is  not  necessarily  less  than  all  the  other  ones,  but  it  is 
within the time constraint set by business stakeholders. 
3)  Satisfying Recovery Requirement R2 
RTO (Recovery Time Objective) can be achieved by adopting appropriate recovery actions (D. 
Cannon  and  D.  Wheeldon,  2009).  In  the  domain  of  operations  on  cloud,  we  selected  the 
acceptable  recovery  action.  From  the  results  we  can  see  that  the  recovery  for  all  the  recovery 
points in the rolling upgrade operation takes no more than 4 seconds for execution. In addition, 
for these experiments state capturing time was typically around 14s but at most 15s, applicable 
recovery patterns filtering time was at most 40 milliseconds (ms), recovery plan generation time 
for  each  applicable  recovery  pattern  was  at  most  80  milliseconds  (ms),  applicable  recovery 
actions  evaluation  time  is  at  most  190  milliseconds  (ms),  and  acceptable  recovery  action 
selection time is at most 300 milliseconds (ms). While not part of our scope here directly, error 
detection time has to be considered when discussing RTO as well. Detection times reported in 
the literature ranged from 10ms to 11 seconds (X. Xu, et al., 2014). The sum of the worst cases 
of all the above times, i.e. the total error detection and recovery time, is around 31s. So, for each 
recovery  point,  the  total  recovery  time  is  below  31  seconds,  no  matter  which  recovery  action 
selection  method  is  used.  For  comparison,  we  inspected  the  Asgard  source  code  to  find  the 
original timeout values implemented for each of the five recovery points. These are 10 minutes 
(min), 10min, 70min, 50min, and 10min, respectively. If such times are acceptable,  31s in the 
worst  case  is  a  steep  improvement  –  unless  errors  repeatedly  occur  during  the  recovery. 
Normally,  if  the  errors  occur  again,  POD-Diagnosis  service  will  capture  the  errors  again  and 
trigger POD-Recovery again. Hence, POD-Recovery achieves a reasonable RTO. 
C.  Recovery Reducing Bad Consequence 
1)  Experimental Procedure 
This recovery requirement concerns the negative impact the recovery incurs on the cloud system. 
We therefore measure recovery impact by performing the rolling upgrade operation on a cloud 
application. There are 8 instances in the cloud application. The instances are attached to an auto 
scaling group and are registered in an elastic load balancer. The cloud application running in the 
instances  is  TPC-W  which  is  a  3-tier  web  benchmark  application  running  in  Tomcat  service. 
96 
The average workload on each instance is 50 query requests per second. For the rolling upgrade 
operation, the rolling granularity is 1, meaning that each time 1 instance will be terminated and 
replaced.  We used our  own  proprietary  fault  injection  tool  to inject  faults  for  each  of the five 
determined  recovery  points  in  the  rolling  upgrade  operation,  automatically  determined  the 
applicable  recovery  patterns  based  on  the  applicable  recovery  patterns  filtering  method 
described in section 7.3, and performed recovery using the selected acceptable recovery action 
based on each of the two recovery action selection methods. The faults injected are described in 
Table  11. The  selection  of  injected  faults  is  based  on  our  interviews  with  industry  and  failure 
reports,  and  hence  representative.  The  recovery  impact  is  calculated  by  computing  the  cross-
product of two vectors: 1) the average response time to user requests in each of the steps of the 
recovery  action;  2)  the  execution  time  of  each  step  of  the  recovery  action.  We  ran  the 
experiment 30 times, measuring the average recovery impact.  
Table 11.  Faults injected for Rolling Upgrade Operation 
Recovery Point 
Fault injected 
Recovery Point 1 (After Step 3) 
ASG uses unknown LC 
Recovery Point 2 (After Step 4) 
Instance still registered with ELB  
Recovery Point 3 (After Step 5) 
Instance not terminated 
Recovery Point 4 (After Step 6) 
Instance launching fails 
Recovery Point 5 (After Step 7) 
Instance not registered with ELB 
2)  Experimental Results 
Table  12  shows  the  recovery  impact  of  the  recovery  for  the  rolling  upgrade  operation.  The 
recovery  impact  in  the  table  represents  the  average  value  of  the  recovery  impact  for  30  runs. 
The  highest  relative  standard  deviation  is  2.7%.  For  each  recovery  point,  the  impact  of  the 
recovery action selected by the Pareto set search based optimization method is no greater than 
the  other  applicable  recovery  actions;  the  impact  of  the  selected  recovery  action  by  the  user 
constraints  based  optimization  method  is  not  necessarily  less  than  all  the  other  ones,  but  it  is 
within the impact constraint set by business stakeholders. 
97 
Reco
very 
Point 
Reco
very 
Point 
1 
Step 1. Create 
New Launch 
Configuration 
LC’ 
Step 2. Update 
Auto Scaling 
Group 
Step 3. Sort 
Instances 
Reco
very 
Point 
2 
Step 4. 
Deregister Old 
Instance from 
ELB 
Reco
very 
Point 
3 
Step 5. 
Terminate Old 
Instance VM 
ASG not 
attached 
with LC’ 
but 
attached 
with 
LC’’ 
Deregiste
r VM 
from 
ELB fails 
Terminat
e VM 
fails (too 
long 
terminati
on time) 
RP1, RP3, 
RP5, RP6 
Update ASG 
again with LC’; 
22.47 s2 
Update ASG 
again with LC’; 
23.47 s2 
(Reparation) 
(Reparation) 
Deregister old 
instance from 
ELB again; 
24.78 s2 
Deregister old 
instance from 
ELB again; 
24.99 s2 
RP1, RP3, 
RP5, RP6, 
RP8 
(Direct Redo) 
(Direct Redo) 
RP1, RP2, 
RP3, RP4, 
RP5, RP6, 
RP7, RP8 
Detach VM 
from ASG; 
(Direct 
Alternative) 
27.9 s2 
Detach VM 