### Step-by-Step Process for Rolling Upgrade Operation

#### Step 1: Create New Launch Configuration (LC')
- **Action:** Create a new launch configuration, LC'.
- **Note:** This step is essential to ensure the updated settings are in place before proceeding.

#### Step 2: Update Auto Scaling Group
- **Action:** Update the auto scaling group (ASG) with the new launch configuration, LC'.
- **Note:** Ensure that the ASG is correctly associated with the new LC' and not with an older one, LC''.

#### Step 3: Sort Instances
- **Action:** Sort the instances within the ASG.
- **Note:** This step helps in organizing the instances for the subsequent steps.

#### Step 4: Deregister Old Instance from Elastic Load Balancer (ELB)
- **Action:** Deregister the old instance from the ELB.
- **Possible Issues:**
  - **Failure to Deregister:** If the deregistration fails, retry the process.
  - **Recovery Actions:**
    - **Reparation:** Update the ASG again with LC'.
      - **Time:** 2.99 s, 2.89 s
    - **Direct Redo:** Deregister the old instance from the ELB again.
      - **Time:** 3.24 s, 3.77 s
- **Recovery Points Affected:** RP1, RP3, RP5, RP6, RP8

#### Step 5: Terminate Old Instance VM
- **Action:** Terminate the old instance VM.
- **Possible Issues:**
  - **Termination Failure:** If the termination takes too long, detach the VM from the ASG.
  - **Recovery Actions:**
    - **Direct Alternative:** Detach the VM from the ASG.
      - **Time:** 27.9 s
- **Recovery Points Affected:** RP1, RP2, RP3, RP4, RP5, RP6, RP7, RP8

#### Step 6: Wait for ASG to Start New Instance VM'
- **Action:** Wait for the ASG to start a new instance, VM'.
- **Possible Issues:**
  - **Launch Failure:** If the launch of VM' fails, add a hedged instance into the ASG.
  - **Recovery Actions:**
    - **Direct Alternative:** Add a hedged instance into the ASG.
      - **Time:** 2.89 s, 3.08 s, 3.19 s, 3.51 s
- **Recovery Points Affected:** RP1, RP2, RP3, RP4, RP5, RP6, RP7, RP8

#### Step 7: Register New Instance with ELB
- **Action:** Register the new instance, VM', with the ELB.
- **Possible Issues:**
  - **Registration Failure:** If the registration fails, retry the process.
  - **Recovery Actions:**
    - **Direct Redo:** Register the new instance with the ELB again.
      - **Time:** 3.22 s, 3.98 s
- **Recovery Points Affected:** RP1, RP3, RP5, RP6, RP8

### Recovery Time Analysis

**Table 10: Recovery Time for Rolling Upgrade Operation**

- **Recovery Time:** The time taken exclusively for executing the recovery plan.
- **Average Value:** The average value of the recovery time for 30 runs.
- **Highest Relative Standard Deviation:** 2.2%.
- **Pareto Set Search Based Optimization Method:** The selected recovery action's execution time is no greater than other applicable actions.
- **User Constraints Based Optimization Method:** The selected recovery action's execution time is within the time constraint set by business stakeholders.

### Satisfying Recovery Requirement R2 (RTO)

- **RTO (Recovery Time Objective):** Can be achieved by adopting appropriate recovery actions.
- **Execution Time:** The recovery for all recovery points in the rolling upgrade operation takes no more than 4 seconds.
- **State Capturing Time:** Typically around 14s, but at most 15s.
- **Applicable Recovery Patterns Filtering Time:** At most 40 milliseconds (ms).
- **Recovery Plan Generation Time:** At most 80 milliseconds (ms).
- **Applicable Recovery Actions Evaluation Time:** At most 190 milliseconds (ms).
- **Acceptable Recovery Action Selection Time:** At most 300 milliseconds (ms).
- **Total Error Detection and Recovery Time:** Around 31s.
- **Comparison with Asgard:** Original timeout values were 10 minutes, 10 minutes, 70 minutes, 50 minutes, and 10 minutes, respectively. A 31-second worst-case recovery time is a significant improvement.

### Recovery Impact on Cloud System

**Experimental Procedure:**
- **Cloud Application:** TPC-W, a 3-tier web benchmark application running in Tomcat service.
- **Instances:** 8 instances attached to an auto scaling group and registered in an elastic load balancer.
- **Workload:** Average of 50 query requests per second.
- **Rolling Granularity:** 1 instance at a time.
- **Fault Injection Tool:** Proprietary tool used to inject faults at each recovery point.
- **Recovery Impact Calculation:** Cross-product of the average response time to user requests and the execution time of each step.

**Table 11: Faults Injected for Rolling Upgrade Operation**

| Recovery Point | Fault Injected |
|----------------|----------------|
| Recovery Point 1 (After Step 3) | ASG uses unknown LC |
| Recovery Point 2 (After Step 4) | Instance still registered with ELB |
| Recovery Point 3 (After Step 5) | Instance not terminated |
| Recovery Point 4 (After Step 6) | Instance launching fails |
| Recovery Point 5 (After Step 7) | Instance not registered with ELB |

**Table 12: Recovery Impact for Rolling Upgrade Operation**

- **Recovery Impact:** The average value of the recovery impact for 30 runs.
- **Highest Relative Standard Deviation:** 2.7%.
- **Pareto Set Search Based Optimization Method:** The selected recovery action's impact is no greater than other applicable actions.
- **User Constraints Based Optimization Method:** The selected recovery action's impact is within the impact constraint set by business stakeholders.

This structured approach ensures clarity, coherence, and professionalism in the documentation of the rolling upgrade process and its recovery mechanisms.