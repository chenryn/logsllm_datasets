Yes
Yes
Yes
Yes
Yes
N/A
BackupAgent
MobileStorageMounter
afcd
installd
afcd
neagent
vpnagent
N/A
314
314
314
411
411
411
411
259
564
2
60
39
3
25
4
1
1
1
third party applications was sufficiently privileged for the Pangu 7
iOS application to exploit the kernel without elevating its privileges
in userland. Yalu was also able to deploy its attacks from within
the container sandbox profile. Yalu does so by exploiting mach
services that are accessible to third party apps in order to perform
a mach-port name resolution attack. This attack allows the Yalu
application to intercept a credential called a task port being sent as
a mach-message. The task port belongs to an unsandboxed, root
authorized process called powerd, and provides Yalu with debugger
control over powerd.
5.2 Evaluating iOracle
We evaluate iOracle’s effectiveness at detecting policy flaws by
using it to triage executables exploited in jailbreaks as confused
deputies or attack vectors. The set of executables returned by each
iOracle query includes the executable exploited by the jailbreak,
which we refer to in the following text as the target. The number of
executables detected for each query is provided in Table 2. Note that
the queries used are intentionally more generic than the jailbreak
gadgets targeted.
We define a high integrity executable (likely to be used as a
confused deputy) as an executable that is unsandboxed, runs as
root, or is sandboxed with a default allow policy. We use the term
low integrity executable (likely to be used as an attack vector) to
refer to other executables.
evasi0n 7 (iOS 7): The evasi0n 7 jailbreak used a name resolution
attack in the tmp/ directory and a name resolution attack against
a hard coded chown operation. To triage the attack in tmp/, we
search for either the attacking process (low integrity) or the con-
fused deputy (high integrity). We query to find all low integrity
executables with write access to files inside of tmp/ and identify 60
executables including the target afcd for iOS 7.0. We query to find
all high integrity executables that reference tmp/ in their strings or
were dynamically observed to access files in tmp/. This query iden-
tified 39 high integrity executables likely to work in tmp/ including
the target installd for iOS 7.0. For the chown attack, we query for
executables with hard coded chown operations targeting file paths
in directories that are writable by user mobile. This query returned
two executables including the target CrashHousekeeping for iOS 7.0.
In addition to the filepath exploited in the jailbreak, iOracle revealed
two more exploitable filepaths chown’ed by CrashHousekeeping.
TaiG (iOS 8): The TaiG jailbreak used name resolution attacks in
the Media/ directory as well as exploiting a confused deputy that
could mount disk images. To triage the attack in Media/, we search
for either the attack vector or the confused deputy. We query to
find all low integrity executables with write access to files inside of
Media/ and identify three executables including the target afcd for
iOS 8.0. We query to find all high integrity executables that refer-
ence Media/ in their strings or were dynamically observed to access
files in Media/. This query identified 25 high integrity executables
likely to work in Media/ including the target BackupAgent for iOS
8.0. To triage executables that could mount disk images we query
for system executables that contain the _mount symbol. This query
detects four executables including the target MobileStorageMounter.
Pangu 8 (iOS 8): The Pangu 8 jailbreak required an executable with
three attributes: 1) can be executed by debugserver’s sandbox; 2) has
the skip-library-validation entitlement; and 3) is not constrained
by the container sandbox profile. iOracle has facts for executable
entitlements, assigned profiles, and our abstraction models sandbox
policy semantics. We used iOracle to search for executables with
the attributes required and found that for iOS 8.0, neagent is the
only executable that satisfies these requirements.
Pangu 9 (iOS 9): The debugserver profile now requires a process
to possess the get-task-allow entitlement to be executed by debug-
server. The jailbreak also still requires an executable that is not
assigned the container sandbox profile. Our query for these two
attributes showed that neagent on the iOS 9.0 DDI meets these re-
quirements. We speculate that if Pangu had used neagent from the
iOS 9.0 DDI, fewer exploits would have been required. However,
Pangu chose to use exploits that allowed them to install system
executables from older versions of iOS (i.e., iOS 6.1). iOracle con-
firms that vpnagent from iOS 6.1 has the required capabilities, and
finds that vpnagent from iOS 7.0 and 7.1 could have also worked. In
total we found two unique executables with the required attributes
across all versions analyzed including the target vpnagent.
6 PREVIOUSLY UNKNOWN POLICY FLAWS
In addition to testing iOracle on known policy flaws, we search the
iOS protection system for previously unknown policy flaws. This
section lists a total of five new policy flaws detected by iOracle.
Other flaws are presented in the Appendix.
Responsible Disclosure: In August 2017, Apple confirmed receipt
of an early draft of this paper disclosing the following findings.
However, at the time of writing, Apple has neither confirmed nor
denied the vulnerabilities detected by iOracle.
6.1 Self-Granted Capabilities
The sandbox profile of a process determines which sandbox exten-
sions it can grant and which extensions in can effectively consume.
Potential privileges gained via sandbox extensions are usually lim-
ited by additional filters in the sandbox profile. Therefore, we refer
to an extension filter that is not paired with other significant filters
as an unrestricted extension filter.
We queried for sandbox profiles that allow a subject to grant
extensions to itself such that the subject gains access to arbitrary
files. More specifically, the profile allows the subject to grant exten-
sions that match unrestricted extension filters in file access rules.
Consider the following pair of profile rule facts from the quicklookd
profile, which allows quicklookd to give itself extensions that pro-
vide read access to any file on the system.
%allowed to grant quicklook extension
profileRule(profile("quicklookd"), decision("allow"),
operation("file-issue-extension"),
filters([extension-class("com.apple.quicklook.readonly")])).
%read access with quicklook extension
profileRule(profile("quicklookd"),decision("allow"),
operation("file-readSTAR"),
filters([extension("com.apple.quicklook.readonly")])).
If an attacker gains control of quicklookd, it can elevate its privi-
lege through self-granted extensions and significantly compromise
the user’s privacy. Our query identified 2 profiles (i.e., quicklookd
and AdSheet) on iOS 10.3 that allow a sandboxed process to grant
unrestricted extensions to itself. AdSheet allows a process to grant
itself read access to all but one filepath on the system (due to a
require-not filter restriction). During this analysis we found that
even third party applications could grant sandbox extensions, but
these seem too restricted to be exploited. Apple should augment
these sandbox rules allowing arbitrary file access based on exten-
sions with additional filters to limit the malicious potential of this
protection state operation.
Impact: Gaining read access to arbitrary files may not contribute
directly to a jailbreak, but it is still a privilege escalation that could
impact user privacy or assist in reverse engineering.
6.2 Capability Redirection
We find that it is possible to perform a name resolution attack
such that a confused deputy will be redirected and effectively grant
sandbox extensions with attacker defined values. When a process
grants an extension, it must specify a class and a value for the
extension. The class is a string that can match filters in a sandbox
profile. For a file type extension, the value is a file path that will
specify a subpath that objects may fall into. Similar to a chown
operation, any symlinks in the file path of the extension value will
be resolved before granting the extension. An attacker can replace
the filepath normally targeted by the extension granting process
with a symbolic link pointing to a filepath of the attacker’s choice.
For example, afcd’s sandbox allows write access to mobile/-
Media,14 and it is granted an unrestricted extension with the value
mobile/Media when it is launched. If afcd were to replace Media
with a symbolic link, it would be granted an unrestricted exten-
sion with a value determined by the link destination upon its next
launch, providing afcd with read/write access to the destination of
14/private/var/mobile/Media
the link. To create the symbolic link, the Unix permissions must
also allow afcd write access to the mobile directory. iOracle shows
that write access is allowed because afcd runs as UID mobile, and
user mobile owns the mobile directory.
We query for sandboxed processes on iOS 10.3 with write access
to filepaths corresponding to the values of unrestricted sandbox
extensions they possess. Our query identified seven processes that
can perform this sandbox manipulation to modify their sandbox
restrictions and gain read/write access to any file on the device.
Two additional processes can gain access to all but one file on the
device due to a require-not filter. Among these nine processes are
afcd and the default email client MobileMail. afcd has a history of
being exploited, and MobileMail is likely to be exposed to attacks.
If an attacker gains control over one of these nine processes,
they can exploit the policy flaws to bypass sandbox restrictions on
file writing operations. The attacker would be restrained as user
mobile, but this policy flaw could play a significant role in jailbreaks
as its effect is similar to sandbox escape. To mitigate this attack
Apple can pair the flawed sandbox rules with additional filters that
restrict the file paths accessible via sandbox extensions.
Impact: With respect to Figure 3, these policy flaws are similar to
sandbox escapes allowing a jailbreak to progress from the “System
Sandbox, mobile” stage toward the “No Sandbox, mobile” stage.
6.3 Write Implies Read
Sandbox rules can match a file path, but unlike Unix permissions,
they do not follow a file when it moves. Therefore, an attacker
can move a file to a filepath where less sandbox restrictions ap-
ply to the file. Creating hard links in less restricted file paths has
the same effect. For example, a sandbox profile may allow write
access to files in /write/, and allow write and read access to files
in /write_read/. An attacker can read files in /write/ by moving
them to /write_read/ which is a readable path.
We query sandbox profiles for files that can be written but not
read according to the sandbox policy. Our queries detected 3 sand-
box profiles on iOS 10.3 where read access to unreadable files can
be acquired by abusing write access and changing file paths. The
default allow profile assigned to BackupAgent is among the detected
profiles because it denies read access to a specific file path, but does
not deny write access to that file path.
Impact: Gaining read access may not contribute to a jailbreak, but
it is still a privilege escalation that could impact user privacy.
6.4 Keystroke Exfiltration
Apple allows third party developers to design custom keyboards for
iOS. These third party keyboards have a restrictive sandbox profile
that should prevent keyloggers from exfiltrating key stroke data.
The keyboard profile does not allow access to the Internet and file
write access is very restricted. Attackers could use covert channels
to exfiltrate this data (e.g., manipulating global inode numbers), but
these are slow and inconvenient. Therefore, we queried for filepaths
where a third party keyboard has write access and a third party
application has read access. Our query revealed that third party
keyboards and third party applications can both read and write to
a set of psuedoterminals in the /dev/ directory.
We created proof of concept applications that share information
by reading and writing to psuedoterminals on a non-jailbroken iOS
10.2 device. One application exports data by writing to /dev/ttyp1,
the slave of the pseudoterminal pair. The other application accesses
the data by reading from /dev/ptyp1, the master of the pseudoter-
minal pair. Once a third party keyboard has exfiltrated key logs to
a third party app, the app can exfiltrate the data over the Internet.
Impact: With respect to Figure 3, this policy flaw allows a mali-
cious third party keyboard to move sensitive data from a subject at
the “Keyboard Sandbox, mobile” privilege level to a subject at the
“Container Sandbox, mobile” privilege level.
differences between the HOME and FRONT_USER_HOME prefix variables;
6) incorporating default allow sandbox profiles into high level
queries; and 7) implementing Prolog rules to identify when two
regular expressions share a common matching string.
Finally, when using iOracle, analysts must have some domain-
knowledge to design relevant queries. However, the Prolog rules
discussed in Section 4.2 allow analysts to make high level queries
without understanding low level details of Unix permissions or
Apple Sandbox filters. These Prolog rules can be extended to model
other access control mechanisms or to classify subjects and objects
(e.g., list private files).
6.5 Chown Redirection
High integrity system executables regularly modify Unix permis-
sions and file ownership. However, some of these operations are
susceptible to name resolution attacks similar to the one exploited
by evasi0n 7 to gain write access to the root partition. We use
iOracle to search permission changing file access operations (i.e.,
chmod/chown) performed by high integrity processes (confused
deputies) on iOS 10. Of the file paths targeted by these operations,
we search for those that are writable by sandboxed, mobile user
processes (attack vectors). The query results revealed that Backu-
pAgent2 chowns files in Media/ such that the file owner becomes
mobile. Since the untrusted, but sandboxed afcd process has write
access to files in Media/, it can be used as an attack vector to deploy
a name resolution attack against BackupAgent2’s chown operations.
This attack is reachable with full control of the sandboxed afcd
process, but the sandbox could deny access to files regardless of
their Unix permissions. Therefore, this policy flaw is most useful
to an attacker that has escaped the sandbox, but is running as
user mobile, The attacker can use this policy flaw to redirect chown
operations such that arbitrary files become owned by mobile, which
compromises Unix policies by making the untrusted mobile user
the owner of files that had previously been inaccessible.
Impact: With respect to Figure 3, this policy flaw allows a jailbreak
to progress from the “No Sandbox, mobile” privilege level to the
“No Sandbox, root” privilege level.
7 LIMITATIONS
It is possible that some tools such as SandBlaster and our back-
tracer could produce incorrect facts. Since iOS is closed source and
poorly documented, it is impractical to obtain ground truth, which
limits our ability to verify the correctness of some of our extracted
policies and contextual data. This limitation is inherent to working
with a closed source commodity operating system. Where feasible,
we mitigate these limitations through sanity checks, reproducing
experiments on jailbroken and stock devices, and cross referenc-
ing literature. Our evaluation of iOracle’s accuracy is based on its
ability to detect known and unknown policy flaws, and we find it
accurate enough for practical use.
Other limitations can be overcome with additional engineering
effort and expanding our scope. The following steps would improve
the accuracy of our model: 1) distinguishing between TTY and
character device files; 2) modeling POSIX ACLs (added in iOS 9);
3) modeling the Unix permission directory sticky bit; 4) modeling
the filemode sandbox filter (added in iOS 9); 5) reverse engineering
8 RELATED WORK
iOracle evaluates access control for iOS system executables, whereas
most prior academic iOS security research focuses on third party
applications. Han et al. [14] and Egele et al. [11] investigate poten-
tial privacy leaks in third party iOS applications. iRiS [9] improves
privacy leak analysis by integrating static and dynamic analysis
techniques to detect dangerous API calls. XARA [30] exploits flaws
in iOS inter-process communication to provide a third party app
with unauthorized access to sensitive data. Wang et al. [26] propose
a method for a compromised PC to inject malicious third party apps
onto an iOS device by exploiting the iTunes syncing mechanism.
Kurtz et al. [15] investigate methods for third party apps to finger-
print iOS devices. SandScout [10] models all iOS sandbox policies,
but its evaluation is limited to the policy for third party applica-
tions. Wang et al. [27], and Bucicoiu et al. [2] investigate Return
Oriented Programming (ROP) attacks in third party applications.
In response to these ROP attacks, Davi et al. [7], Werthmann et
al. [29], and Bucicoiu et al. [2] propose new security mechanisms
to provide control flow integrity and fine grained access control for
third party apps. Han et al. [13] investigate the potential for third
party applications to abuse access to Private APIs. Chen et al. [5]
detect potentially harmful Android libraries and then detect their
iOS counterparts based on features shared across both platforms.
Both non-academic and academic security research has provided
domain knowledge embedded into iOracle. Books by Levin [16] and
Miller et al. [17] provide detailed descriptions of jailbreaks and secu-