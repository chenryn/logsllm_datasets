| : |: 0x0047bb74 e877fdf8ff call fcn.0040b8f0
| : |: 0x0047bb79 488b442410 mov rax, qword [local
_10h] ; [0x10:8]=-1 ; 16
| : |: 0x0047bb7e 488b4c2418 mov rcx, qword [local
_18h] ; [0x18:8]=-1 ; 24
| : |: 0x0047bb83 48898424b800. mov qword [local_b8h]
, rax
| : |: 0x0047bb8b 48898c24c000. mov qword [local_c0h]
, rcx
| : |: 0x0047bb93 488b052eea07. mov rax, qword [0x004
fa5c8] ; [0x4fa5c8:8]=0
| : |: 0x0047bb9a 488b0d1fea07. mov rcx, qword [0x004
fa5c0] ; [0x4fa5c0:8]=0
| : |: 0x0047bba1 4885c0 test rax, rax
| :,=== 0x0047bc42 e8798cfaff call fcn.004248c0
| |: 0x0047bc47 0f0b ud2
| |: ; JMP XREF from 0x0047b8b2 (fcn.0047b8a0)
| `--> 0x0047bc49 e872f3fcff call fcn.0044afc0
\ `=
#include 
#include "pin.H"
ofstream OutFile;
// The running count of instructions is kept here
// make it static to help the compiler optimize docount
static UINT64 icount = 0;
// This function is called before every instruction is executed
VOID docount(void *ip) {
if ((long int)ip == 0x0047b96e) icount++; // 0x0047b960: c
ompare mapanic(provided_flag[i]) with constant_binary_blob[i]
}
// Pin calls this function every time a new instruction is encou
ntered
VOID Instruction(INS ins, VOID *v)
{
1432
6.2.1 re XHPCTF2017 dont_panic
// Insert a call to docount before every instruction, no arg
uments are passed
INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_IN
ST_PTR, IARG_END); // IARG_INST_PTR: Type: ADDRINT. The address
of the instrumented instruction.
}
KNOB KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool",
"o", "inscount.out", "specify output file name");
// This function is called when the application exits
VOID Fini(INT32 code, VOID *v)
{
// Write to a file since cout and cerr maybe closed by the a
pplication
OutFile.setf(ios::showbase);
OutFile  -
- ... */
/* =============================================================
======== */
int main(int argc, char * argv[])
{
// Initialize pin
if (PIN_Init(argc, argv)) return Usage();
OutFile.open(KnobOutputFile.Value().c_str());
// Register Instruction to be called to instrument instructi
ons
INS_AddInstrumentFunction(Instruction, 0);
// Register Fini to be called when the application exits
PIN_AddFiniFunction(Fini, 0);
// Start the program, never returns
PIN_StartProgram();
return 0;
}
主要是修改了两个地方：
// This function is called before every instruction is executed
VOID docount(void *ip) {
if ((long int)ip == 0x0047b96e) icount++; // 0x0047b960: c
ompare mapanic(provided_flag[i]) with constant_binary_blob[i]
}
该函数会在每条指令执行之前被调用，判断是否是我们需要的 0x0047b96e 地址
处的指令。
然后由于函数 docount 需要一个参数，所以 Instruction 函数也要修改，加入指令的
地址 IARG_INST_PTR ：
1434
6.2.1 re XHPCTF2017 dont_panic
// Pin calls this function every time a new instruction is encou
ntered
VOID Instruction(INS ins, VOID *v)
{
// Insert a call to docount before every instruction, no arg
uments are passed
INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_IN
ST_PTR, IARG_END); // IARG_INST_PTR: Type: ADDRINT. The address
of the instrumented instruction.
}
好，接下来 make 并执行。其实我们是知道 flag 结构的，”hxp{...}“ ，总共 42 个字
节。
$ cp dont_panic.cpp source/tools/MyPintool
[MyPinTool]$ make obj-intel64/dont_panic.so TARGET=intel64
[MyPinTool]$ ../../../pin -t obj-intel64/dont_panic.so -o inscou
nt.out -- ~/dont_panic "hxp{aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
a}" ; cat inscount.out
Nope.
Count 5
注意，这里的 5 是执行次数，匹配正确的个数是 5-1=4，即 "hxp{"。但是最后一次
是例外，因为完全匹配成功后直接跳转返回，不会再进行匹配。
和预期结果一样，下面写个脚本来自动化这一过程：
1435
6.2.1 re XHPCTF2017 dont_panic
import os
def get_count(flag):
os.system("../../../pin -t obj-intel64/dont_panic.so -o insc
ount.out -- ~/dont_panic " + "\"" + flag + "\"")
with open("inscount.out") as f:
count = int(f.read().split(" ")[1])
return count
charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0
123456789_-+*'"
flag = list("hxp{aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}")
count = 0
while count != 42:
for i in range(4, 41): # only compare "a" in "hex{}"
for c in charset:
flag[i] = c
# print("".join(flag))
count = get_count("".join(flag))
if count == i+2:
break
print("".join(flag))
可惜就是速度有点慢，大概跑了一个小时吧。。。
hxp{k3eP_C4lM_AnD_D0n't_P4n1c__G0_i5_S4F3}
$ ./dont_panic "hxp{k3eP_C4lM_AnD_D0n't_P4n1c__G0_i5_S4F3}"
Seems like you got a flag...
参考资料里的 gdb 脚本就快得多：
1436
6.2.1 re XHPCTF2017 dont_panic
import gdb
CHAR_SUCCESS = 0x47B976
NOPE = 0x47BA23
gdb.execute("set pagination off")
gdb.execute("b*0x47B976") #Success for a given character
gdb.execute("b*0x47BA23") #Block displaying "Nope"
charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0
123456789_-+*{}'"
flag = list('A'*42) #junk
for i in range(0,len(flag)) :
for c in charset:
flag[i] = c
# the number of times we need to hit the
# success bp for the previous correct characters
success_hits = i
gdb.execute("r " + '"' + "".join(flag) + '"')
while success_hits > 0 :
gdb.execute('c')
success_hits -= 1
#we break either on success or on fail
rip = int(gdb.parse_and_eval("$rip"))
if rip == CHAR_SUCCESS:
break #right one. To the next character
if rip == NOPE: #added for clarity
continue
print("".join(flag))
在最后一篇参考资料里，介绍了怎样还原 Go 二进制文件的函数名，这将大大简化
我们的分析。
参考资料
Pin Tutorial
Reversing GO binaries like a pro
HXP CTF 2017 - "dont_panic" Reversing 100 Writeup
write-up for dont_panic
1437
6.2.1 re XHPCTF2017 dont_panic
1438
6.2.2 re ECTF2016 tayy
6.2.2 re ECTF2016 tayy
题目解析
参考资料
章节 5.8.1 中讲解了 Z3 约束求解器的基本使用方法，通过这一题，我们可以更进
一步地熟悉它。
下载文件
题目解析
Tayy is the future of AI. She is a next level chatbot developed
by pro h4ckers at NIA Labs. But Tayy hides a flag. Can you convi
nce her to give it you?
$ file tayy
tayy: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynam
ically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/
Linux 2.6.24, BuildID[sha1]=1fcd1c49eae4807f77d51227a3b457d88741
70b4, not stripped
1439
6.2.2 re ECTF2016 tayy
$ ./tayy
=============================================================
Welcome to the future of AI, developed by NIA Research, Tayy!
=============================================================
1. Talk to Tayy.
2. Flag?
0. Exit.
> 2
Flag: EEXL  ▒#@N5&[g,q2H7?09:G>4!O]iJ('
V
=============================================================
1. Talk to Tayy.
2. Flag?
0. Exit.
> 1
=============================================================
1. Ayy lmao, Tayy lmao.
2. You are very cruel.
3. Memes are lyf.
4. Go away!.
5. zzzz