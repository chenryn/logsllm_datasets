are eﬀectively corrupted. We prefer the current formulation
since it makes the security degradation more explicit, and
in particular minimizes the restrictions on the environment.
4As we’ve written our bilinear map above, we’ve restricted
ourselves to certain implementations, e.g., supersingular
curves. This is done for clarity of exposition. We could
implement our construction using a more general bilinear
mapping of the form e : G1 × G2 → GT , where eﬃcient iso-
morphisms between G1 and G2 may not exist. A beneﬁt of
using more general curves is that we could reduce the bits
per ciphertext transmitted (see [15] for more details).
It will simplify the reading of our proofs to use the follow-
ing equivalent formulation of DBDH, known as Modiﬁed
DBDH [25]. The modiﬁed DBDH assumption is identical
to the DBDH assumption, except that x0 ← e(g, g)ab/c (in-
stead of x0 ← e(g, g)abc).
Lemma 3.1. If mDBDH is solvable in (G, GT ) with prob-
ability ε, then DBDH is solvable in (G, GT ) with probability
ε; and vice versa.
Proof. (DBDH =⇒ mDBDH.) On DBDH input (g, ga,
gb, gc, Q), query the mDBDH solver on input (gc, ga, gb, g, Q)
= (y, yA, yB, yC , Q) and output its response. Observe that
when Q = e(y, y)AB/C for the mDBDH solver, by substi-
tution, we have e(gc, gc)(a/c)(b/c)/(1/c) = e(g, g)abc for the
DBDH solver.
(mDBDH =⇒ DBDH.) Omitted.
3.2 PRE ΠRO in the Random Oracle Model
Notation and Conﬁguration. Let 1k be the security pa-
rameter and (q, g, h, G, GT , e) be the bilinear map parame-
ters output by BSetup(1k). Let Sig = (G,S,V) be a strongly
unforgeable one-time signature scheme, where (cid:96) = (cid:96)sig(k)
denotes the length of the veriﬁcation keys output by G(1k).
Moreover, we assume that the veriﬁcation key space pro-
duced by G has super-logarithmic minimum entropy; that
is, any given key has a negligible chance of being sampled.
Let H : {0, 1}≤(cid:96) → G and F : {0, 1}≤(cid:96) → G be two in-
dependent hash functions, which we will treat as random
oracles.
Deﬁne the algorithm Check on input a ciphertext tuple
(A, B, C, D, E, S) and a key pk as follows:
1. Run V(A, (C, D, E), S) to verify signature S on mes-
sage (C, D, E) with respect to key A.
2. Check that e(B, F (A)) = e(pk , D) and that e(B, h) =
e(pk , E).
3. If any of these checks fail, output 0; else output 1.
Scheme ΠRO = (KeyGen, ReKeyGen, Enc, ReEnc, Dec) is de-
scribed as follows:
Key Generation (KeyGen): On input 1k, select random
x ∈ Zq. Set pk = gx and sk = x.
Re-Encryption Key Generation (ReKeyGen): On input
sk X = x and sk Y = y, output the bidirectional re-
encryption key rk X↔Y = x/y mod q.
Encryption (Enc): On input pk and a message m ∈ GT :
1. Select a one-time signature keypair as G(1k) →
2. Select a random r ∈ Zq and compute
(svk , ssk ). Set A = svk .
B = pk r
D = F (svk )r
, C = e(g, H(svk ))r · m,
, E = hr.
3. Run the signing algorithm S(ssk , (C, D, E)), where
the message to sign is the tuple (C, D, E), and de-
note the signature S.
4. Output the ciphertext (A, B, C, D, E, S).
Re-Encryption (ReEnc): On input a re-encryption key
rk X↔Y = x/y and a ciphertext K = (A, B, C, D, E, S)
under key pk Y , re-encrypt the ciphertext to be under
key pk X as:
1. Compute B(cid:48) = Brk X↔Y = g(yr)(x/y) = gxr.
2. If Check (K, pk Y ) = 1, output the new ciphertext
(A, B(cid:48), C, D, E, S); otherwise, output ⊥.
Decryption (Dec): On input a secret key sk and any ci-
phertext K = (A, B, C, D, E, S), if Check (K, gsk ) = 1,
then output the message C/e(B, H(A))1/sk ; otherwise,
output ⊥.
Remark 3.2. Our KeyGen and ReKeyGen algorithms are
the same as those originally proposed by BBS [5]. Parties
X and Y can compute rk X↔Y eﬃciently as: X selects a
random r ∈ Zq and sends rx to Y and r to the proxy. Y
sends rx/y to the proxy, who computes x/y. (Operations are
modulo q.) Recall that in a bidirectional scheme, no security
is guaranteed if the proxy colludes with either party.
Theorem 3.3. If the DBDH assumption holds in (G, GT ),
then scheme ΠRO is Bidirectional PRE-CCA secure for do-
main GT of messages in the random oracle model.
Proof sketch. Recall that DBDH and mDBDH are equiv-
alent.
(It will be less tedious to use mDBDH here.) We
begin by observing that if the mDBDH assumption holds
in (G, GT ), then there exist strongly unforgeable one-time
signature schemes. Let Sig = (G,S,V) be such a scheme,
where G has super-logarithmic minimum entropy. Let A
be any p.p.t. adversary. Then, we show how to construct a
p.p.t. adversary B, with black-box access to A, that succeeds
in breaking the mDBDH assumption with probability:
Pr[B breaks mDBDH] ≥
1/2 + Pr[A breaks Π]/2 − Pr[A breaks Sig] − qO · δ,
where A makes qO oracle queries and δ is the maximum
probability that any given veriﬁcation key is output by G
(which by assumption is negligible). Also by assumption,
Pr[A breaks Sig] is negligible for any p.p.t. adversary A. Let
us now describe how B operates.
On mDBDH input (g, ga, gb, gc, Q), where B’s goal is to
decide if Q = e(g, g)ab/c or not, B sets up the global pa-
rameters for A as follows:
the description of the groups
(cid:104)g(cid:105) = G, GT , their prime order q, and the mapping e, which
are implicit in the mDBDH input, will also be used in the re-
encryption game. Set h = gcw, where w ∈ Zq is chosen ran-
domly. The system parameters are (q, g, h, G, GT , e, H, F ),
where H and F are random oracles. The security parameter
is k ≥ |q|.
B runs G(1k) → (svk∗, ssk∗), and records these values.
Oracle queries from A are handled as:
• Key Generation: B chooses a random xi ∈ Zq.
If
user i is uncorrupted, then B outputs pk i = (gc)xi =
gcxi . If user i is corrupted, then B outputs (pk i, sk i) =
(gxi , xi).
• Hash H: On input m to hash function H, check to see
if pair (m, Y ) is recorded in database DH . If not select
random Y ∈ G, record (m, Y ) in DH and do:
(
H(m) =
ga
Y
if m = svk∗
otherwise, where (m, Y ) ∈ DH .
(1)
• Hash F : On input m to hash function F , check to
see if pair (m, Z, s) is recorded in database DF . If not
(
select random s ∈ Zq, record (m, gs, s) in DF and do:
F (m) =
if m = svk∗
gc
Z otherwise, where (m, Z, s) ∈ DF .
(2)
• Decryption: On input (i, K) to Odec, if Check (K, pk i) =
0, then the ciphertext is not well-formed, so B halts
and returns ⊥. Otherwise, B proceeds as follows.
If user i is corrupted, then sk i = xi and B returns
If user i is uncorrupted, then B parses
Dec(sk i, K).
K as (A, B, C, D, E, S). Since the ciphertext is well-
formed, we know that B = pk r
i and D = F (A)r for the
same value of r ∈ Zq. Finally, B checks that A (cid:54)= svk∗
and aborts if this is false. If all checks pass, then B
ﬁnds (A, F (A), s) ∈ DF and decrypts the ciphertext by
computing C/e(D1/s, H(A)) = C/e(F (A)r/s, H(A)) =
C/e(gr, H(A)).
• Re-Encryption Key: On input (i, j) to Orkey, if one
of i and j is uncorrupted and the other is corrupted,
then this call is illegal. Otherwise, B outputs the re-
encryption key xj/xi.
• Re-Encryption: On input (i, j, K) to Orenc, if the value
Check (K, pk i) = 0, then the ciphertext is not well-
formed, so B halts and returns ⊥. Otherwise, B parses
K = (A, B, C, D, E, S).
– If users i and j are both corrupted or if they are
both uncorrupted, B computes the re-encryption
key xj/xi and executes ReEnc(xj/xi, K).
– If user i is corrupted and user j is uncorrupted,
then B computes Exj /w = hrxj /w = gcwrxj /w =
gcrxj = pk r
i ) and outputs
(A, B(cid:48), C, D, E, S).
– If user i is uncorrupted and user j is corrupted,
if A = svk∗, then B outputs ⊥. Otherwise, B
ﬁnds (A, F (A), s) ∈ DF and computes Dxj /s =
j = B(cid:48) (where B = pk r
F (A)rxj /s = grxj = pk r
i )
and outputs (A, B(cid:48), C, D, E, S).
j = B(cid:48) (where B = pk r
• Challenge: At some point, A will output a challenge
tuple (i, m0, m1), where i is the index of an uncor-
rupted user. B responds choosing a random d ∈ {0, 1}
and setting:
∗
A = svk
C = Q · md
E = (gb)w = hb/c
, B = (gb)xi = pk b/c
, D = gb = F (A)b/c,
, S = Sssk∗ (C, D, E).
i
,
• Decision: Finally, A will output a guess d(cid:48) ∈ {0, 1}.
If d = d(cid:48), then B outputs 1 (i.e., mDBDH instance),
otherwise B outputs 0 (i.e., not an mDBDH instance).
The setup, keys and hash responses of B are perfectly dis-
tributed according to a real instance of re-encryption scheme
ΠRO. The decryption and re-encryption queries are also
perfect, except that B cannot always answer them when
A = svk∗. First, consider that before the challenge is given,
A has a qO · δ chance of querying either oracle on a cipher-
text with A = svk∗. After the challenge is given, A’s chance
of querying these oracles on a well-formed ciphertext where
A = svk∗ and yet the ciphertext is not a derivative of the
challenge is Pr[A breaks Sig]. Consider that a well-formed
ciphertext (A, B, C, D, E, S) decrypts uniquely regardless of
the corresponding public key. That is, C = e(g, H(A))r · m
and D = F (A)r uniquely ﬁxes m. If we recall the deﬁnition
of a derivative from Deﬁnition 2.4, then we see by inspection
that if A = svk∗ then for the ciphertext not to be a deriva-
tive of the challenge (C, D, E) must not be identical to the
challenge ciphertext. If the ciphertext is well-formed, then
S is a valid forgery against Sig.
When B receives an mDBDH instance as input, its chal-
lenge ciphertext is also a perfectly distributed, proper en-
in this case, A guesses
cryption of message md. Thus,
d(cid:48) = d with the same advantage as it would in a real ex-
ecution of ΠRO. To see this, recall that H(svk∗) = ga, and
in this case, Q = e(g, g)ab/c. Thus, C/e(B, H(A))1/ski =
e(g, g)ab/c · md/e(gbxi , ga)1/cxi = md.
When B does not receive an mDBDH instance, then the
challenge ciphertext contains no information about md, since
ciphertext component C is uniformly distributed in GT in-
dependent of d, and A succeeds in predicting d(cid:48) = d with
exactly 1/2 probability.
Finally, from Lemma 3.1, if there exists a p.p.t. adversary
that breaks mDBDH with probability ε, then there exists a
p.p.t. adversary that breaks DBDH with probability ε.
The following is immediate from Theorems 2.9 and 3.3.
Corollary 3.4. If the DBDH assumption holds in (G,
GT ), then bidirectional re-encryption scheme ΠRO is non-
adaptively, weakly UC-secure with respect to Deﬁnition 2.7
in the random oracle model.
3.3 PRE Π without Random Oracles
Now, we will remove the random oracles from the con-
struction in Section 3.2. To do so, we will change the way
hash functions H and F operate. Our setup is similar to
that of ΠRO, except that:
Function H: We replace random oracle H with a univer-
sal one-way hash function family (following Canetti,
Halevi, and Katz [10] and Boneh and Boyen [7].) Let
H be a pairwise independent family of hash functions
H : {0, 1}≤(cid:96) → G, where given an element x ∈ {0, 1}≤(cid:96)
and y ∈ G, there is an eﬃcient algorithm for sampling
H ∈ H such that H(x) = y.
Function F : While H can be replaced by any universal
one-way hash satisfying the above constraints, F will