as are the data belonging to the write request, which are stored 
in  the  write  buffer.  According  to  principle  3,  the  data  flagged 
TRUE  are  evicted  from  the  read  buffer  according  to  the  LRU 
policy  or  simultaneously  by  the  eviction  of  the  respective  data 
from  the  write  buffer.  With  principle  4,  when  a  read  request 
attempts  to  access  data  flagged  TRUE  in  the  write  buffer,  the 
flags  of  the  matched  data 
in  the  write  buffer  and  the 
corresponding  data  (if  present)  in  the  read  buffer  are  changed 
from  TRUE  to  FALSE.  Figure  3  illustrates  how  the  proposed 
policy changes read and write buffers when a write request leads 
to the overwriting-following-reading pattern. 
This  ransomware-aware  buffer  management  policy  provides 
necessary information for identifying the ransomware behaviors 
to the access-pattern-based detector.  
2.2.2  Ransomware  Detector.  Our  access-pattern–based  detector 
detects 
the  proposed 
management policy for read and write buffers (Figure 2). 
The  access-pattern–based  detector  exploits 
the  repetitive 
overwriting-following-reading  access  patterns  of  ransomware 
type  I  by  monitoring  the  status  of  the  write  buffer.  The  write 
buffer  tends  to  consist  of  elements  with  the  TRUE  flag  during 
ransomware  attack.  This  is  because  new  encrypted  data  are 
written at the same addresses as the original data. 
This detector judges, based on the following condition, whether 
an SSD is being attacked by ransomware. 
Condition of ransomware detection 
in  conjunction  with 
ransomware 
This  condition  recognizes  the  write-buffer  access  patterns 
typical  of  ransomware.  It  checks  the  frequency  in  the  write 
buffer of data with addresses identical to those of data stored in 
the  read  buffer.  A  proportion  of  elements  flagged  as  TRUE 
higher  than  a  threshold  value  indicates  that  most  of  the  read 
data have been overwritten by new data in a short time; i.e., the 
behavior of ransomware type I. 
3  Evaluation 
3.1  Experimental Results 
We  evaluate  our  detection  mechanism  using  a  realistic 
CryptoHasYou type I ransomware sample [6]. As target files, we 
Poster PresentationCCS’18, October 15-19, 2018, Toronto, ON, Canada2259use 9,509 documents (.doc, .docx, .pdf, .txt, .xls, .xlsx), 4,666 
image files (.gif, .jpg), and 3,140 compressed files (.rar, .zip), 
collected using Google. Such file types are commonly targeted by 
ransomware. The files are stored in a flash-based openSSD board 
[5].  Next,  the  trace  of  read  and  write  requests  to  the  openSSD 
board  was  extracted  while  the  sample  ransomware  was 
encrypting the victim files. 
To  evaluate  whether  our  detection  mechanism  can  detect  file-
encryption attacks, we develop a prototype simulator comprising 
read and write buffers and an access-pattern-based detector. The 
extracted  trace  was  inputted  to  the  simulator.  In  the  access-
pattern–based detector, the detection threshold was 0.9. Next, we 
increased the size of each read and write buffer from 16 to 256 
MB.  The  basic  unit  size  in  buffers  is  4  KB  because  we  assume 
that the page size in flash memory is 4 KB. 
Our  experimental  results  reported  that  the  CryptoHasYou 
sample is completely detected by our detector using all sizes of 
read  and  write  buffers.  This 
implies  that  our  proposed 
management  policy  for  read  and  write  buffers  can  capture  the 
overwriting-following-reading  pattern.  Also, 
the  proposed 
detection  mechanism  detects  the  file  encryption  attacks  of 
ransomware  despite  the  lack  of  semantic  information  from  the 
host system.  
In addition, our mechanism detects ransomware rapidly (Figure 
4).  A  16 MB  buffer  is  detected  about  420-fold  more  rapidly 
compared  to  encryption  of  all  files  by  undetected  ransomware. 
As  the  buffer  size  increases,  more  requests  are  required  for 
detection because our detection mechanism judges whether the 
storage  device  is  being  attacked  by  ransomware  only  when  the 
proportion  of  the  write  buffer  occupied  by  overwritten  data  is 
above  a  threshold  level.  Moreover,  the  early  detection  can 
minimize the damage of ransomware by reducing data loss and 
prevents propagation of ransomware via networks. 
Figure 5 shows the effect of our buffer-management policy on hit 
ratios of 32MB read and write buffers using realistic and normal 
traces  [7].  The  hit  ratios  of  read  and  write  buffers  using  our 
policy  are  similar  to  those  by  the  LRU  policy  without  false 
alarms. It is because our proposal is based on the LRU policy, and 
the overwriting-following-reading pattern is seldom observed in 
normal traces. 
Figure 4: Normalized detection time. X-axis is the size of 
each  buffer,  and  Y-axis  is  the  normalized  detection  time 
against the time it took for encrypting all the victim files 
in terms of the number of read and write requests. 
Figure  5:  Impact  of  a  ransomware-aware  buffer  management 
policy on hit ratio of 32MB read and write buffers. 
3.2  Discussion 
In our experiments, we show that our detector perfectly detects 
the ransomware attacks. Nevertheless, we sometimes notice that 
the ratio of the number of ‘TRUE’ elements to the total elements 
in  write  buffer  fluctuates  when  the  read  and  write  buffers  are 
relatively small (i.e., 16 MB). It is because the small read buffer 
tends  to  evict  the  original  data  before  the  write  buffer  receives 
the respective encrypted data. 
4  Conclusion 
In  this  paper,  we  propose  a  ransomware  (particularly  type  I) 
detection  mechanism  in  storage  devices:  a  ransomware-aware 
buffer management policy and an access-pattern–based detector. 
Our  storage-level  approach  allows  to  detect  encryption  attacks 
by  ransomware,  even  those  that  exploit  kernel  vulnerabilities, 
independently  of  the  host  system.  We  plan  to  make  our 
mechanism  robust  to  small  buffers  and  to  design  new 
mechanisms to detect other types of ransomware. 
ACKNOWLEDGMENTS 
This  research  was  supported  by  the  MSIT(Ministry  of  Science 
and  ICT),  Korea,  under  the  ITRC(Information  Technology 
support  program(IITP-2018-2016-0-00304) 
Research  Center) 
supervised 
Information  & 
communications  Technology  Promotion)  and  by  the  National 
Natural  Science  Foundation  of  China  (NSFC)  under  Grant 
61806142.  
IITP(Institute 
the 
for 
by 
REFERENCES 
[1]  Vadim,  K.,  and  Mantej,  S.  R.  2014.  Understanding  Crypto-Ransomware. 
[Online].  Available:  https://www.bromium.com/sites/default/files/bromium-
report-ransomware.pdf. 
[2]  Scaife, N., Carter, H., Traynor, P., and Butler, K. 2016. CryptoLock (and Drop 
In  Proceedings  of 
It):  Stopping  Ransomware  Attacks  on  User  Data. 
International Conference on Distributed Computing Systems (ICDCS). 
[3]  Kharaz, A., Arshad, S., Mulliner, C., Robertson, W., Kirda, E. 2016. UNVEIL: A 
Large-Scale, Automated Approach to Detecting Ransomware. In Proceedings of 
USENIX Security Symposium. 
[4]  Continella,  A.,  Guagnelli,  A.,  Zingaro,  G.,  De  Pasquale,  G.,  Barenghi,  A., 
Zanero,  S.,  and  Maggi,  F.  2016.  ShieldFS:  A  Self-healing,  Ransomware-aware 
In  Proceedings  of  Annual  Conference  on  Computer  Security 
Filesystem. 
Applications (ACSAC), 2016. 
[5]  The OpenSSD project, [Online]. Available: www.openssd-project.org. 
[6]  ViusTotal, [Online]. https://www.virustotal.com. 
[7]  SNIA IOTTA Repository, [Online]. Available: http://iotta.snia.org. 
Poster PresentationCCS’18, October 15-19, 2018, Toronto, ON, Canada2260