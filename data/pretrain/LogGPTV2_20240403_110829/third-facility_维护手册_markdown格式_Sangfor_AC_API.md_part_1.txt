深信服AC开放接口
一. 文档介绍
二. 使用方法
三. 接口描述
1. Status接口:
1.1 获取版本信息
1.2 获取在线用户数
1.3 获取会话数
1.4 获取内置库信息
1.5 获取行为日志数量
1.6 获取CPU使用率
1.9 获取系统时间
1.10 获取吞吐量
1.11 获取用户流量排行
1.12 获取应用流量排行
1.13 获取带宽使用率
2. 用户/组相关接口
2.1 添加用户
2.2 删除用户
2.3 搜索用户
2.4 修改用户信息
2.5 获取用户详细信息
2.6 用户关联上网策略
2.7 获取用户上网策略
2.8 用户关联流控策略
2.9 获取用户流控策略
2.10 验证用户密码
2.11 添加组
2.12 删除组
2.13 修改组信息
2.14 组关联上网策略
2.15 获取组关联上网策略
3. 策略相关接口
3.1 获取所有上网策略信息
3.2 获取所有流控策略信息
4. BindInfo接口
4.1 查询用户和IP/MAC的绑定关系
4.2 查询IPMAC绑定关系
4.3 删除用户和IP/MAC的绑定关系
4.4 删除IPMAC绑定信息
4.5 增加用户和IP/MAC的绑定关系
4.6 增加IPMAC绑定信息
5. OnlineUsers接口
5.1 获取某用户的在线信息
5.2 强制注销在线用户
5.3 上线在线用户（单点登录）
四. 错误信息
五. 注意事项
一. 文档介绍
本文档主要介绍对外提供Restful接口的使用方法,包括以下几个方面:
目前支持的接口:状态(status)、用户/组管理接口、策略管理接口、绑定关系（bindInfo）接口和在线用户
（onlineUsers)接口。
接口输入输出标准
开放接口适用场景：
环境中有统一的管理平台，管理员期望对AC/SG等设备进行统一的管理维护，推荐使用开放接口功能进行
对接
支持restful接口的系统都支持通过"开放接口"功能，对AC/SG等设备进行数据读取或管理
二. 使用方法
假设请求双方分别为client(192.168.1.1),AC(192.168.1.2),其中client为客户端,AC为提供Restful服务的AC设备
在AC设备的"高级设置--开放接口"中启用开放接口选项
配置共享密钥,并将client的IP(192.168.1.1)或所在IP段加入白名单
1532511723890
random为client请求时随机生成的字串,且同一random,1小时内只能使用1次,否则权限校验不通过
md5是"共享密钥+random"拼接后的字符串计算出的md5值,注意顺序上必须是"共享密钥+random",不能
颠倒
比如前端配置的密钥是1,random是2,,那拼接后的字符串就是"12",算出的md5是
c20ad4d76fe97759aa27a0c99bff6710,则请求的参数就是:
random=2&md5=c20ad4d76fe97759aa27a0c99bff6710
接口类型为GET时,random和md5的值附于url后,格式为:http://acip:9999/接口名称?
random=xxxx&md5=xxxx,
例如在线用户接口参数:http://acip:9999/v1/status/online-user?random=xxxx&md5=xxxx
接口类型为POST时,HTTP头必须指定Content-Type:application/json格式,random和md5要在请求时以
JSON格式携带,例如添加用户接口http://acip:9999/v1/user携带的参数如下:
{
"random": "xxxx",
"md5": "xxxx",
"name": "hello"
}
注意:
1. 全局流速单位,默认为bytes
2. 接口信息支持中英文切换,默认为英文,请求时指定请求头中的"Accept-Language"字段值为"zh-CN"可切换
到中文
3. 用户/组相关接口不支持中英文切换,具体语言是和restful服务所在AC设备语言保持一致的
4. 部分接口如获取吞吐量,获取用户流量和应用流量排行等的性能开销较大,建议不要频繁请求
5. 获取全局流速单位或流速单位进制,可登录相应的设备,查看"系统管理-高级设置-WEBUI"选项或者请求以下
接口:
http://acip:9999/v1/status/flux-units获取(flow_unit:流速单位 flux_prefix:流量单位)
{
"code": 0,
"message": "Successfully",
"data": {
"flow_unit": "B/s",
"flux_prefix": 1024
}
}
client AC
http://192.168.1.2:9999/接口名称?random=xxx&md5=xxx (GET方法示例)
校验权限,处理请求
校验通过,返回数据,否则返回具体的错误信息
client AC
三. 接口描述
1. Status接口:
1.1 获取版本信息
请求地址: http://acip:9999/v1/status/version
功能: 获取设备的版本号
方法: GET
结果参数
参数 必选 描述
code true 是否成功获取结果,0为是,1为否
message true code为0时,固定为"Successfully",为1时为错误信息
data false code为0时,为具体结果数据,如下JSON所示,为1时,则无此字段
成功返回:
{
"code": 0,
"message": "Successfully",
"data": "AC12.0.9.044 B Build20171216"
}
数据字段描述:
字段名 类型 描述
data string 设备版本号
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
1.2 获取在线用户数
请求地址: http://acip:9999/v1/status/online-user
功能: 获取当前设备的在线用户数
方法: GET
结果参数同上
成功返回:
{
"code": 0,
"message": "Successfully",
"data": 2
}
数据字段描述:
字段名 类型 描述
data number 在线用户数
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
1.3 获取会话数
请求地址: http://acip:9999/v1/status/session-num
功能: 获取当前设备的会话数
方法: GET
结果参数同上
成功返回:
{
"code": 0,
"message": "Successfully",
"data": 20
}
数据字段描述:
字段名 类型 描述
data number 会话数
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
1.4 获取内置库信息
请求地址: http://acip:9999/v1/status/insidelib
功能: 获取设备内置库版本信息,包含病毒库,URL库等模块
方法: GET
结果参数同上
成功返回:
{
"code": 0,
"message": "Successfully",
"data": [
{
"current": "2017-12-15",
"enable": true,
"new": "2017-12-16",
"name": "病毒库",
"expire": "2020-06-24",
"type": "kav",
"is_expired": 0
},
{
"current": "2017-12-11 09:00:00",
"enable": true,
"new": "2017-12-11",
"name": "URL库",
"expire": "2020-06-24",
"type": "url",
"is_expired": 1
}
]
}
数据字段描述:
字段名 类型 描述
name string 库名称
current string 当前版本
new string 最新版本
expire string 升级服务的序列号过期时间
enable boolean 是否启用自动升级
规则库类型(kav:病毒库 url:URL库 up:网关补丁 contchk:应用识别 trace:审计
type string
规则库)
is_expired number 规则库是否过期(0:未过期 1:过期)
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
1.5 获取行为日志数量
请求地址: http://acip:9999/v1/status/log
功能: 获取实时的行为日志数量,包含拦截和记录数
方法: GET
结果参数同上
成功返回:
{
"code": 0,
"message": "Successfully",
"data": {
"block": 111,
"record": 222
}
}
数据字段描述:
字段名 类型 描述
block number 拦截数
record number 记录数
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
1.6 获取CPU使用率
请求地址: http://acip:9999/v1/status/cpu-usage
功能: 获取设备的实时CPU使用率
方法: GET
结果参数同上
成功返回:
{
"code": 0,
"message": "Successfully",
"data": 4
}
数据字段描述:
字段名 类型 描述
data number CPU使用率(%)
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
#####1.7 获取内存使用率
请求地址: http://acip:9999/v1/status/mem-usage
功能: 获取设备的实时内存使用率
方法: GET
结果参数同上
成功返回:
{
"code": 0,
"message": "Successfully",
"data": 26
}
数据字段描述:
字段名 类型 描述
data number 内存使用率(%)
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
#####1.8 获取磁盘使用率
请求地址: http://acip:9999/v1/status/disk-usage
功能: 获取设备的磁盘使用率
方法: GET
结果参数同上
成功返回:
{
"code": 0,
"message": "Successfully",
"data": 14
}
数据字段描述:
字段名 类型 描述
data number 磁盘使用率(%)
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
1.9 获取系统时间
请求地址: http://acip:9999/v1/status/sys-time
功能: 获取设备的当前系统时间
方法: GET
结果参数同上
成功返回:
{
"code": 0,
"message": "Successfully",
"data": "2017-12-13 17:52:11"
}
数据字段描述:
字段名 类型 描述
data string 系统时间(格式: %Y-%m-%d %H:%M:%S)
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
1.10 获取吞吐量
请求地址: http://acip:9999/v1/status/throughput?_method=GET
功能: 获取设备的上行和下行流速
方法: POST
结果参数同上
支持请求时携带过滤数据,例如:
{
"filter": {
"unit": "bytes",
"interface": "eth1"
}
}
过滤字段描述:
字段名 类型 必填 描述
unit string false 流速单位(bits或bytes),默认值为bytes
interface string false 网口("eth0,eth1"等具体网口),默认值为所有WAN口
成功返回:
{
"code": 0,
"message": "Successfully",
"data": {
"send": 1048350,
"recv": 211295,
"unit": "bytes"
}
}
数据字段描述:
字段名 类型 描述
send number 网口总上行流速
recv number 网口总下行流速
unit string 流速单位(bits或bytes)
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
1.11 获取用户流量排行
请求地址: http://acip:9999/v1/status/user-rank?_method=GET
功能: 获取用户维度下,针对上行,下行,总流速的占比排行
方法: POST
支持请求时携带过滤数据,例如:
{
"filter": {
"top": 60,
"line": "0",
"groups": [
"/group1",
"/group2"
],
"users": [
"user1",
"user2"
],
"ips": [
"ip1",
"ip2"
]
}
}
结果参数同上
过滤字段描述:
字段名 类型 描述
top number TopN排行
groups string array 要过滤的组(以"/"开头)
users string array 要过滤的用户
ips string array 要过滤的IP(只支持单个IP,不支持IP组)
line string 线路号(0:所有线路 1-N: 具体线路)
注:以上过滤字段"groups","users","ips",同时只能选择其中一种过滤条件来过滤,若同时传入多个过滤条件,则过
滤条件只会生效1种,优先级为"groups > users > ips"
成功返回:
{
"code": 0,
"message": "Successfully",
"data": [
{
"id": 0,
"name": "11.16.1.102",
"group": "/web",
"ip": "11.16.1.102",
"up": 807,
"down": 42242,
"total": 43049,
"session": 45,
"status": true,
"detail": {
"data": [
{
"id": 0,
"app": "其他",
"line": 1,
"percent": 0,
"up": 92,
"down": 52,
"total": 144
},
{
"id": 1,
"app": "访问网站",
"line": 1,
"percent": 100,
"up": 715,
"down": 42190,
"total": 42905
}
]
}
}
]
}
数据字段描述:
字段名 类型 描述
id number 序号
name string 用户名
group string 组
ip string IP地址
up number 上行流量(单位: bytes)
down number 下行流量(单位: bytes)
total number 总流量(单位: bytes)
session number 会话数
status boolean 冻结状态(false为冻结)
detail object 详细信息
失败返回:
{
"code": 1,
"message": "Unknow error, fail to acquire data!"
}
1.12 获取应用流量排行
请求地址: http://acip:9999/v1/status/app-rank?_method=GET
功能: 获取应用维度下,针对上行,下行,总流速的占比排行
方法: POST
支持请求时携带过滤数据,例如:
{
"filter": {
"top": 60,
"groups": [
"/group1",
"/group2"
],
"line": "0"
}
}
结果参数同上
过滤字段描述:
字段名 类型 描述
top number TopN排行
groups string array 用户组(以"/"开头)
line string 线路号(0:所有线路 1-N: 具体线路)
成功返回:
{
"code": 0,
"message": "Successfully",
"data": [
{
"app": "其他网页证券行情[网站浏览]",
"line": 0,
"line_name": "全部线路",
"up": 5308,
"down": 148043,
"total": 153351,
"rate": 100,
"session": 0,
"user_data": {
"data": [
{
"user": "11.16.1.101",
"grp": "/tue",
"ip": "11.16.1.101",
"up": 5308,
"down": 148043,
"total": 153351