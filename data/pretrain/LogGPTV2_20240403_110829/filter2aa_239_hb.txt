        modelBuilder.Entity().Property(p => p.Text)
        .HasMaxLength(50).IsRequired();
        base.OnModelCreating(modelBuilder);
      }
    }
Web应用程序的启动代码定义了MenuCardsContext，用作数据上下文，从配置文件中
读取连接字符串（代码文件MenuPlanner/Startup.cs）：
    public IConfiguration Configuration { get; set; }
    public void ConfigureServices(IServiceCollection services)
    {
      // Add Entity Framework services to the services container.
      services.AddEntityFramework()
            .AddSqlServer()
            .AddDbContext(options =>
              options.UseSqlServer(
                Configuration["Data:DefaultConnection:ConnectionString"]))
            .AddDbContext(options =>
              options.UseSqlServer(
                Configuration["Data:MenuCardConnection:ConnectionString"]));
      // etc.
    }
在配置文件中，添加MenuCardConnection连接字符串。这个连接字符串引用Visual
Studio 2015附带的SQL实例。当然，也可以改变它，把这个连接字符串添加到SQL Azure
中（代码文件MenuPlanner/appsettings.json）：
    {
      "Data": {
        "DefaultConnection": {
        "ConnectionString": "Server=(localdb)\\mssqllocaldb;
          Database=aspnet5-MenuPlanner-4d3d9092-b53f-4162-8627-f360ef6b2aa8;
          Trusted_Connection=True; MultipleActiveResultSets=true"
        },
        "MenuCardConnection": {
        "ConnectionString": "Server=(localdb)\\mssqllocaldb; Database=MenuCards;
          Trusted_Connection=True; MultipleActiveResultSets=true"
        }
      },
      // etc.
    }
41.9.2 创建数据库
可以使用Entity Framework命令创建代码来创建数据库。在命令提示符中，使用.NET
Core Command Line （CLI）和ef命令创建代码，来自动创建数据库。使用命令提示符
时，必须把当前文件夹设置为project.json文件所在的目录：
    >dotnet ef migrations add InitMenuCards --context MenuCardsContext
  注意： dotnet工具参见第1章和第17章。
因为这个项目定义了多个数据上下文（MenuCardsContext和ApplicationDbContext），
所以需要用--context指定数据上下文。ef命令在项目结构中创建一个Migrations文件夹，
InitMenuCards类使用Up方法来创建数据库表，使用Down方法再次删除更改（代码文件
MenuPlanner/Migrations/[date]InitMenuCards.cs）：
      public partial class InitMenuCards : Migration
      {
        public override void Up(MigrationBuilder migrationBuilder)
        {
          migrationBuilder.CreateTable(
          name: "MenuCard",
          columns: table => new
          {
            Id = table.Column(nullable: false)
              .Annotation("SqlServer:ValueGenerationStrategy",
                SqlServerValueGenerationStrategy.IdentityColumn),
            Active = table.Column(nullable: false),
            Name = table.Column(nullable: true),
            Order = table.Column(nullable: false)
          },
          constraints: table =>
          {
            table.PrimaryKey("PK_MenuCard", x => x.Id);
          });
          migrationBuilder.CreateTable(
          name: "Menu",
          columns: table => new
          {
            Id = table.Column(nullable: false)
              .Annotation("SqlServer:ValueGenerationStrategy",
                SqlServerValueGenerationStrategy.IdentityColumn),
            Active = table.Column(nullable: false),
            Day = table.Column(nullable: false),
            MenuCardId = table.Column(nullable: false),
            Order = table.Column(nullable: false),
            Price = table.Column(nullable: false),
            Text = table.Column(nullable: false),
            Type = table.Column(nullable: true)
          },
          constraints: table =>
          {
            table.PrimaryKey("PK_Menu", x => x.Id);
            table.ForeignKey(
              name: "FK_Menu_MenuCard_MenuCardId",
              column: x => x.MenuCardId,
              principalTable: "MenuCard",
              principalColumn: "Id",
              onDelete: RefeerentialAction.Cascade);
          });
        }
        public override void Down(MigrationBuilder migration)
        {
          migration.DropTable("Menu");
          migration.DropTable("MenuCard");
        }
      }
现在只需要一些代码来启动迁移过程，用最初的样本数据填充数据库。
MenuCardDatabase-Initializer在Database属性返回的DatabaseFacade对象上调用扩展方法
MigrateAsync，应用迁移过程。这又反过来检查与连接字符串关联的数据库版本是否与迁
移指定的数据库相同。如果版本不同，就需要调用Up方法得到相同的版本。此外，创建
一些MenuCard对象，存储在数据库中（代码文件
MenuPlanner/Models/MenuCardDatabaseInitializer.cs）：
          using Microsoft.EntityFrameworkCore;
          using System.Linq;
          using System.Threading.Tasks;
          namespace MenuPlanner.Models
          {
            public class MenuCardDatabaseInitializer
            {
              private static bool _databaseChecked = false;
              public MenuCardDatabaseInitializer(MenuCardsContext context)
              {
              _context = context;
              }
              private MenuCardsContext _context;
              public async Task CreateAndSeedDatabaseAsync()
              {
              if (! _databaseChecked)
              {
                _databaseChecked = true;
                await _context.Database.MigrateAsync();
                if (_context.MenuCards.Count() == 0)
                {
                  _context.MenuCards.Add(
          new MenuCard { Name = "Breakfast", Active = true, Order = 1 });
                  _context.MenuCards.Add(
          new MenuCard { Name = "Vegetarian", Active = true, Order = 2 });
                  _context.MenuCards.Add(
          new MenuCard { Name = "Steaks", Active = true, Order = 3 });
                }
                await _context.SaveChangesAsync();
              }
              }
            }
          }
有了数据库和模型，就可以创建服务了。
41.9.3 创建服务
在创建服务之前，创建了接口IMenuCardsService，它定义了服务所需的所有方法（代
码文件MenuPlanner/Services/IMenuCardsService.cs）：
    using MenuPlanner.Models;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    namespace MenuPlanner.Services
    {
      public interface IMenuCardsService
      {
        Task AddMenuAsync(Menu menu);
        Task DeleteMenuAsync(int id);
        Task GetMenuByIdAsync(int id);
        Task> GetMenusAsync();
        Task> GetMenuCardsAsync();
        Task UpdateMenuAsync(Menu menu);
      }
    }
服务类MenuCardsService实现了返回菜单和菜单卡的方法，并创建、更新和删除菜单
（代码文件MenuPlanner/Services/MenuCardsService.cs）：
    using MenuPlanner.Models;
    using Microsoft.EntityFrameworkCore
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    namespace MenuPlanner.Services
    {
      public class MenuCardsService : IMenuCardsService
      {
        private MenuCardsContext _menuCardsContext;
        public MenuCardsService(MenuCardsContext menuCardsContext)
        {
        _menuCardsContext = menuCardsContext;
        }
        public async Task> GetMenusAsync()
        {
        await EnsureDatabaseCreated();
        var menus = _menuCardsContext.Menus.Include(m => m.MenuCard);
        return await menus.ToArrayAsync();
        }
        public async Task> GetMenuCardsAsync()
        {
        await EnsureDatabaseCreated();
        var menuCards = _menuCardsContext.MenuCards;
        return await menuCards.ToArrayAsync();
        }
        public async Task GetMenuByIdAsync(int id)
        {
        return await _menuCardsContext.Menus.SingleOrDefaultAsync(
          m => m.Id == id);
        }
        public async Task AddMenuAsync(Menu menu)
        {
        _menuCardsContext.Menus.Add(menu);
        await _menuCardsContext.SaveChangesAsync();
        }
        public async Task UpdateMenuAsync(Menu menu)
        {
        _menuCardsContext.Entry(menu).State = EntityState.Modified;
        await _menuCardsContext.SaveChangesAsync();
        }
        public async Task DeleteMenuAsync(int id)
        {
        Menu menu = _menuCardsContext.Menus.Single(m => m.Id == id);
        _menuCardsContext.Menus.Remove(menu);
        await _menuCardsContext.SaveChangesAsync();
        }
        private async Task EnsureDatabaseCreated()
        {
        var init = new MenuCardDatabaseInitializer(_menuCardsContext);
        await init.CreateAndSeedDatabaseAsync();
        }
      }
    }
为了使服务可用于依赖注入，使用AddScoped方法在服务集合中注册服务（代码文件
MenuPlanner/Startup.cs）：
    public void ConfigureServices(IServiceCollection services)
    {
      // etc.
      services.AddScoped();
      // etc.
    }
41.9.4 创建控制器
ASP.NET 
MVC提供搭建功能来创建控制器，以直接访问数据库。为此，可以在
Solution Explorer中选择Controllers文件夹，并从上下文菜单中选择Add | Controller。打开
Add Scaffold对话框。在该对话框中，可以使用Entity Framework选择MVC 6 Controller视
图。单击Add按钮，打开Add 
Controller对话框，如图41-13所示。使用此对话框，可以选
择Menu模型类和Entity Framework数据上下文MenuCardsContext，配置为生成视图，给控
制器指定一个名称。用视图创建控制器，查看生成的代码，包括视图。
图41-13
图书示例不直接在控制器中使用数据上下文，而是把一个服务放在其中。这样做提供
了更多的灵活性。可以在不同的控制器中使用服务，还可以在服务中使用服务，如
ASP.NET Web API。
  注意： ASP.NET Web API参见第42章。
在下面的示例代码中，ASP.NET 
MVC控制器通过构造函数注入来注入菜单卡服务
（代码文件MenuPlanner/Controllers/MenuAdminController.cs）：
    public class MenuAdminController : Controller
    {
      private readonly IMenuCardsService _service;
      public MenuAdminController(IMenuCardsService service)
      {
        _service = service;
      }
      // etc.
    }
只有当控制器通过URL来引用而没有传递动作方法时，才默认调用Index方法。这
里，会创建数据库中所有的Menu项，并传递到Index视图。Details方法传递在服务中找到
的菜单，返回Details视图。注意错误处理。在没有把ID传递给Details方法时，使用基类的
HttpBadRequest方法返回HTTP Bad Request错误（400错误响应）。如果在数据库中没有找
到菜单ID，就通过HttpNotFound方法返回HTTP Not Found错误（404错误响应）：
    public async Task Index()
    {
      return View(await _service.GetMenusAsync());
    }
    public async Task Details(int? id = 0)
    {
      if (id == null)
      {
        return HttpBadRequest();
      }
      Menu menu = await _service.GetMenuByIdAsync(id.Value);
      if (menu == null)
      {
        return HttpNotFound();
      }
      return View(menu);
    }
用户创建新菜单时，在收到客户端的HTTP GET请求后，会调用第一个Create方法。
在这个方法中，把ViewBag信息传递给视图。这个ViewBag包含SelectList中菜单卡的信
息。SelectList允许用户选择一项。因为MenuCard集合被传递给SelectList，所以用户可以
选择一个带有新建菜单的菜单卡。
    public async Task Create()
    {
      IEnumerable cards = await _service.GetMenuCardsAsync();
      ViewBag.MenuCardId = new SelectList(cards, "Id", "Name");
      return View();
    }
  注意： 要使用SelectList类型，必须给项目添加NuGet包Microsoft.AspNet.Mvc.
ViewFeatures。
在用户填写表单并把带有新菜单的表单提交到服务器时，在HTTP 
POST请求中调用
第二个Create方法。这个方法使用模型绑定，把表单数据传递给Menu对象，并将Menu对
象添加到数据上下文中，向数据库写入新创建的菜单：
    [HttpPost]
    [ValidateAntiForgeryToken]