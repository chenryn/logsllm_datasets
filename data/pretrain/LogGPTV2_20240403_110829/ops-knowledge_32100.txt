User: Please provide an example of using Docker containers for application integration and deployment.
Assistant: Suppose we have a web application which uses Node.js and MongoDB. We can use Docker containers to integrate and deploy this application. First, we need to create two Docker images, one for the Node.js application and one for the MongoDB database. For Node.js applications, we can use the following Dockerfile: ``` FROM node:latest WORKDIR /app COPY package*.json ./ RUN npm install COPY . . EXPOSE 8080 CMD [ "npm", "start" ] `` ` This will create a Node.js image based on the latest version and install the application's dependencies into the container. Then, copy the application into the working directory and expose port 8080, and finally start the application. For MongoDB, we can use the following Dockerfile: ``` FROM mongo:latest EXPOSE 27017 ``` This will create a MongoDB image based on the latest version and expose port 27017 for applications to connect to. We can now use a Docker Compose file to define our application and compose these containers together. As follows: ``` version: '3' services: web: build: . ports: - "8080:8080" depends_on: - db db: build: ./mongo ports: - "27017:27017" ``` this We will use our Dockerfiles to build images of Node.js and MongoDB realms and combine them. The web service exposes port 8080 and the database service exposes port 27017. Web services depend on database services. Finally, we can start our application with the following command: ``` docker-compose up ``` This will start the application and map the web application to port 8080 of the host machine, allowing us to access it in the browser.