[23] There may be multiple Open Firmware pathnames for a given device.
Figure 418. Retrieving a BSD device node's Open Firmware path
// getfwpath.c
#include 
#include 
#include 
#include 
#include 
#define PROGNAME "getfwpath"
int
main(int argc, char **argv)
{
int fd;
dk_firmware_path_t path = { { 0 } };
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
exit(1);
}
if ((fd = open(argv[1], O_RDONLY))  set-defaults
0 > sync-nvram
0 > reset-nvram
0 > mac-boot
set-defaults resets most configuration variables to their default values. However, it does not alter any
user-created configuration variables. It also does not affect security-related variables.
4.11.1.1. NVRAM Caveats
There are certain noteworthy caveats regarding the manipulation of NVRAM variables from Mac OS X.
Most importantly, it must be realized that making any changes to the NVRAM variables does not result in
the NVRAM controller committing those changes to flash memory immediately. The changes are only
stored in the I/O Kit, which maintains them under the options node. When the system goes through a
proper shutdownsay, due to a halt or a rebootthe Platform Expert makes a call to the NVRAM controller,
which commits the in-memory NVRAM image to nonvolatile storage. Therefore, if you change the value
of an NVRAM variable using the nvram command-line program and simply power off the system without
a proper shutdown, the change will be lost.
When a kernel panic occurs, a panic log may be saved to NVRAM under certain circumstances. In
particular, it is not saved if panic debugging is enabled. When the log is present, it is contained in
NVRAM as the value of a firmware variable called aapl,panic-info. The kernel attempts to compress
the log before saving it to NVRAM. If the panic log is too large,[24] it is truncated before it is saved.
[24] The kernel uses a hardcoded value of 2040 bytes as the upper limit on the size of the
panic logcompressed or otherwisethat can be saved to NVRAM.
Moreover, it is possible for certain NVRAM variables to be altered or reset as a side effect of using a
system application. For example, the boot-args variable is reset, and the boot-device variable is
modified, as side effects of choosing a different system to boot in the Startup Disk preference pane.
Specifically, the Startup Disk bundle (StartupDisk.prefPane) resets boot-args to prevent potential
interference by arguments that might be inappropriate in the new boot scenario.
4.11.2. Booting from a Software RAID Device
Newer versions of BootX support booting from a RAID device configured using Apple's software RAID
implementation (AppleRAID). AppleRAID may be visualized as a type of partitioning schemeone that
spans multiple disks but presents a single virtual disk. Let us consider a specific example of an
AppleRAID configuration and see how a Mac OS X installation is booted. Figure 419 shows a RAID 0
configuration with two disks.
Figure 419. An AppleRAID software RAID configuration
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 60 of 86
[View full size image]
Each disk in Figure 419 has a small auxiliary partition of type Apple_Boot, which is conventionally
named eXternal booter. This partition contains an HFS Plus file system, which in turn contains BootX, a
boot property list (plist) file (com.apple.Boot.plist), and a few other files. The plist file lists the RAID
set's members.
$ cat com.apple.Boot.plist
...
IOBootDevicePath
IODeviceTree:sata/k2-sata@1/@0:4
IOBootDeviceSize
159898714112
IOBootDevicePath
IODeviceTree:first-boot/@0:4
IOBootDeviceSize
159898714112
The boot-device NVRAM variable in this setup refers to one of the Apple_Boot partitions.
$ nvram boot-device
boot-device sata/k2-sata@1/@0:3,\\:tbxi
$ sudo ./getfwpath /dev/rdisk0s3
sata/k2-sata@1/@0:3
When a RAID-capable BootX looks for boot paths, it checks for the existence of a boot plist file on the
boot device. If one is found, its contents are parsed and entered into a dictionary. It then iterates over the
list of potential RAID set members, examining the RAID header of each. An Apple RAID header[25]
resides on an Apple_RAID partition at an offset that is a function of the partition's size:
[25] This example uses version 2 of the AppleRAID header.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 61 of 86
enum {
kAppleRAIDHeaderSize = 0x1000,
kAppleRAIDDefaultChunkSize = 0x8000
};
#define ARHEADER_OFFSET(s) ((UInt64) \
(s) / kAppleRAIDHeaderSize * kAppleRAIDHeaderSize - kAppleRAIDHeaderSize)
...
struct AppleRAIDHeaderV2 {
char raidSignature[16];
char raidUUID[64];
char memberUUID[64];
UInt64 size;
char plist[];
};
The RAID headers on disk0s4 and disk1s4 in our example contain sufficient information to allow
BootX to identify them as members of a RAID set.
/* disk0s4 RAID header */
...
AppleRAID-MemberUUID
4C7D4187-5A3A-4711-A283-844730B5041B
...
AppleRAID-SetUUID
2D10F9DB-1E42-497A-920C-F318AD446518
...
AppleRAID-Members
77360F81-72F4-4FB5-B9DD-BE134556A253
...
/* disk1s4 RAID header */
...
AppleRAID-MemberUUID
77360F81-72F4-4FB5-B9DD-BE134556A253
...
AppleRAID-SetUUID
2D10F9DB-1E42-497A-920C-F318AD446518
...
AppleRAID-Members
4C7D4187-5A3A-4711-A283-844730B5041B
...
If BootX determines that all members of a RAID set that are required to make the set complete have been
found, it proceeds with booting. BootX itself implements a library for performing I/O on RAID devices.
The library provides open, close, read, write,[26] and seek functions for RAID device I/O.
[26] Writing to a RAID device is not supported by BootX. This function simply returns an
error.
4.11.3. Booting over a Network
We saw earlier how to "boot" Forth programs by downloading them using TFTP from a remote computer.
Mac OS X itself can be both booted and "rooted" over the network. The easiest way to configure and
manage network booting for one or more Mac OS X computers is through the NetBoot service in Mac OS
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 62 of 86
X Server. Such managed network booting offers several benefits.
Several client systems can boot from a single server-based disk image. Consequently, the
administrator has to manage only one image.
Groups of client systems can boot from images customized for the respective groups.
Large clusters of computers, whether they are computational clusters or computers within a data
center, can be identically configured, booted, and managed.
Computers can be booted in "diskless" mode for simplified administration in controlled computing
environments such as kiosks and quality assurance (QA) installations. Another use of diskless
booting is for diagnosing and fixing problems on a client computer, especially if a problem involves
the client's local disks. Disk images for such booting can be served over NFS or HTTP.
Mac OS X can automatically discover a network boot image on the server using a BOOTP/DHCP
extension: the Boot Server Discovery Protocol (BSDP).
If you have at least two machines, network booting can be quite useful while debugging a kernel or a
kernel extension. One machine hosts the kernel, and the other is the test machine that runs the kernel. It is
especially convenient if the host machine is also the build machine.
Although Apple's NetBoot service makes it easier to configure network booting, it is not required to boot
Mac OS X over the network. Let us look at an example of network booting a client "manually." We will
assume a simple setup suitable for the aforementioned kernel-debugging scenario: The test machinethe
booting clientwill use the root file system on its local disk.
Let us call the booting system CLIENT. The other machinecall it SERVERcan be any system capable of
running the TFTP service. However, we will assume that both CLIENT and SERVER are running Mac
OS X. We will explicitly assign an IP address to CLIENT for network booting. If it must get an IP address
dynamically, a DHCP server would also be required.
CLIENT would need to download three items from SERVER: BootX, the kernel, and an mkext cache.
First we must ensure that the TFTP service is enabled on SERVER. Recall from our earlier examples that
we can use the service command to enable or disable services.
$ sudo service tftp start
Next, we copy BootX and the kernel to the TFTP directory. If SERVER is also the build machine, a
symbolic link pointing to the kernel's build location could be created in the TFTP directory.
$ sudo cp /usr/standalone/ppc/bootx.xcoff /private/tftpboot/bootx.xcoff
$ sudo cp /path/to/kernel /private/tftpboot/mach_kernel.debug
$ sudo chmod 0644 /private/tftpboot/bootx.xcoff /private/tftpboot/mach_kernel.debug
The mkext cache must be created on CLIENT. Doing so avoids problems that may arise from CLIENT
and SERVER having different kernel extension requirements.
$ kextcache -l -n -a ppc -m /tmp/mach_kernel.debug.mkext /System/Library/Extensions
The -l option in the kextcache command line instructs kextcache to include the extensions required for
local disk boot, and the -n option specifies extensions for network boot. The resultant mkext file is
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 63 of 86
transferred to SERVER and copied to the TFTP directory. Note that the name of the mkext file is not
arbitraryfor a kernel file named foo, BootX will look for an mkext file called foo.mkext.
Next, we need to set the values of three Open Firmware variables on CLIENT: boot-device, boot-file,
and boot-args. Let us assume that the IP addresses of SERVER and CLIENT are 10.0.0.1 and
10.0.0.2, respectively. We set the values of boot-device and boot-file using the network booting
syntax we came across in previous examples.
0 > setenv boot-device enet:10.0.0.1,bootx.xcoff,10.0.0.2;255.255.255.0,;10.0.0.1
0 > setenv boot-file enet:10.0.0.1,mach_kernel.debug,10.0.0.2;255.255.255.0,;10.0.0.1
We noted that the names of the kernel and the mkext cache must be related. However, there is a caveat
due to the way certain versions of BootX parse the boot-file variable. For computing the mkext file's
name, BootX assumes the kernel's name to be the string after the last comma in the contents of boot-
file. In our current example, the kernel's name, as computed by BootX, would be ;10.0.0.1. In a
typical network booting configuration, where we do not need to specify CLIENT's IP address, this issue
will not arise because boot-file is of the form enet:,. If the BootX implementation you are using exhibits this behavior, you can get around the
issue by creating a symbolic link named ;10.0.0.1.mkext to mach_kernel. debug.mkext in
SERVER's TFTP directory.
The remaining configuration step is to set the value of boot-args:
0 > setenv boot-args -s -v rd=*
The -s and -v arguments specify single-user and verbose boot modes, respectively. The rd argument
specifies C's root device prefixed with an asterisk character, which forces the root file system to be local.
Here is a specific example:
0 > setenv boot-args -s -v rd=*/pci@f4000000/ata-6@d/disk@0:3
Finally, we can flush the NVRAM and reboot.
0 > sync-nvram
...
0 > mac-boot
If everything is set up correctly, the network boot process will start. You might see a flashing globe
briefly, followed by the Apple logo with a spinning globe below it. CLIENT should boot into a single user
shell.
4.12. Firmware Security
Open Firmware includes a security feature that allows you to set a password that is required to access
most commands from the firmware prompt, and optionally, to even boot the system. Open Firmware
security settings can be changed either from the firmware prompt or through Apple's Open Firmware
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 64 of 86
Password application. The latter is available for newer versions of Mac OS X on the installation media.
4.12.1. Managing Firmware Security
The password command prompts the usertwiceto type a newline-terminated security password string. The
password, which is not echoed on the screen, can contain only ASCII characters. If both user-typed
password strings match, Apple's implementation of Open Firmware encodes the password using a simple
scheme and stores the encoded version in the security-password variable. The scheme is shown in
Table 46.
Table 46. Open Firmware Encoding of an ASCII Password
ASCII Encoded ASCII Encoded ASCII Encoded ASCII Encoded ASCII Encoded
sp %8a 3 %99 F %ec Y %f3 l %c6
! %8b 4 %9e G %ed Z %f0 m %c7
" %88 5 %9f H %e2 [ %f1 n %c4
# %89 6 %9c I %e3 \ %f6 o %c5
$ %8e 7 %9d J %e0 ] %f7 p %da
% %8f 8 %92 K %e1 ^ %f4 q %db
& %8c 9 %93 L %e6 _ %f5 r %d8
' %8d : %90 M %e7 ` %ca s %d9
( %82 ; %91 N %e4 a %cb t %de
) %83  %94 Q %fb d %ce w %dd
, %86 ? %95 R %f8 e %cf x %d2
- %87 @ %ea S %f9 f %cc y %d3
. %84 A %eb T %fe g %cd z %d0
/ %85 B %e8 U %ff h %c2 { %d1
0 %9a C %e9 V %fc i %c3 | %d6
1 %9b D %ee W %fd j %c0 } %d7
2 %98 E %ef X %f2 k %c1 ~ %d4
Note that setting the password alone does not enable password protection; a security mode must also be
set through the security-mode variable. The security mode defines the level of access protection. The
following levels are supported.
 none This sets no security; even though a password may be set, it will not be required.
 command A password is required for all firmware commands except for booting the system using
default settings. The system can automatically boot in this mode after power-on.
 full A password is required for all firmware commands, including for booting the system with
default settings. The system will not automatically boot without a password.
 no-password Access to Open Firmware is entirely disabled. The system will simply boot into the
operating system regardless of any keys pressed at boot time. Note that this is not a standard Open
Firmware mode.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh3C8.htm 20.08.2007
Chapter 4. The Firmware and the Bootloader Page 65 of 86