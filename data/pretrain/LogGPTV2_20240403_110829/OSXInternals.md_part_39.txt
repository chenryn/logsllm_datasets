### 4.11.1. NVRAM Variables and Operations

A single device may have multiple Open Firmware pathnames. To retrieve a BSD device node's Open Firmware path, you can use the `getfwpath` utility, as illustrated in Figure 418.

**Figure 418: Retrieving a BSD Device Node's Open Firmware Path**

```c
// getfwpath.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/dkio.h>

#define PROGNAME "getfwpath"

int main(int argc, char **argv) {
    int fd;
    dk_firmware_path_t path = { { 0 } };

    if (argc != 2) {
        fprintf(stderr, "usage: %s <device>\n", PROGNAME);
        exit(1);
    }

    if ((fd = open(argv[1], O_RDONLY)) < 0) {
        perror("open");
        exit(1);
    }

    if (ioctl(fd, DKIOCGFIRMWAREPATH, &path) < 0) {
        perror("ioctl");
        close(fd);
        exit(1);
    }

    printf("%s\n", path.path);
    close(fd);
    return 0;
}
```

#### 4.11.1.1. NVRAM Caveats

When manipulating NVRAM variables from macOS, it is important to note that changes made to these variables are not immediately committed to flash memory. Instead, they are stored in the I/O Kit under the options node. These changes are only written to nonvolatile storage during a proper system shutdown, such as a halt or reboot. If the system is powered off without a proper shutdown, any unsaved changes will be lost.

Additionally, when a kernel panic occurs, a panic log may be saved to NVRAM, provided that panic debugging is not enabled. The log is compressed and saved as the value of the firmware variable `aapl,panic-info`. If the panic log exceeds 2040 bytes, it is truncated before being saved.

Certain NVRAM variables can also be altered or reset as a side effect of using system applications. For example, changing the startup disk in the Startup Disk preference pane resets the `boot-args` variable and modifies the `boot-device` variable to prevent potential interference by arguments that might be inappropriate in the new boot scenario.

### 4.11.2. Booting from a Software RAID Device

Newer versions of BootX support booting from a RAID device configured using Apple's software RAID implementation (AppleRAID). AppleRAID spans multiple disks but presents a single virtual disk. Figure 419 shows a RAID 0 configuration with two disks.

**Figure 419: An AppleRAID Software RAID Configuration**

Each disk in the RAID set has a small auxiliary partition of type `Apple_Boot`, conventionally named `eXternal booter`. This partition contains an HFS+ file system, which includes BootX, a boot property list (plist) file (`com.apple.Boot.plist`), and other files. The plist file lists the RAID set's members.

```plaintext
$ cat com.apple.Boot.plist
...
IOBootDevicePath
IODeviceTree:sata/k2-sata@1/@0:4
IOBootDeviceSize
159898714112
IOBootDevicePath
IODeviceTree:first-boot/@0:4
IOBootDeviceSize
159898714112
```

The `boot-device` NVRAM variable in this setup refers to one of the `Apple_Boot` partitions.

```plaintext
$ nvram boot-device
boot-device sata/k2-sata@1/@0:3,\\:tbxi
$ sudo ./getfwpath /dev/rdisk0s3
sata/k2-sata@1/@0:3
```

When BootX looks for boot paths, it checks for the existence of a boot plist file on the boot device. If found, its contents are parsed and entered into a dictionary. BootX then iterates over the list of potential RAID set members, examining the RAID header of each. The RAID header resides on an `Apple_RAID` partition at an offset determined by the partition's size.

```c
enum {
    kAppleRAIDHeaderSize = 0x1000,
    kAppleRAIDDefaultChunkSize = 0x8000
};

#define ARHEADER_OFFSET(s) ((UInt64) \
(s) / kAppleRAIDHeaderSize * kAppleRAIDHeaderSize - kAppleRAIDHeaderSize)

struct AppleRAIDHeaderV2 {
    char raidSignature[16];
    char raidUUID[64];
    char memberUUID[64];
    UInt64 size;
    char plist[];
};
```

The RAID headers on `disk0s4` and `disk1s4` contain information that allows BootX to identify them as members of a RAID set.

```plaintext
/* disk0s4 RAID header */
...
AppleRAID-MemberUUID
4C7D4187-5A3A-4711-A283-844730B5041B
...
AppleRAID-SetUUID
2D10F9DB-1E42-497A-920C-F318AD446518
...
AppleRAID-Members
77360F81-72F4-4FB5-B9DD-BE134556A253
...

/* disk1s4 RAID header */
...
AppleRAID-MemberUUID
77360F81-72F4-4FB5-B9DD-BE134556A253
...
AppleRAID-SetUUID
2D10F9DB-1E42-497A-920C-F318AD446518
...
AppleRAID-Members
4C7D4187-5A3A-4711-A283-844730B5041B
...
```

If BootX determines that all required members of the RAID set are present, it proceeds with booting. BootX includes a library for performing I/O on RAID devices, providing functions for open, close, read, write, and seek. Note that writing to a RAID device is not supported and will return an error.

### 4.11.3. Booting over a Network

Mac OS X can be booted and "rooted" over the network. The NetBoot service in macOS Server simplifies the configuration and management of network booting for multiple Mac OS X computers, offering several benefits:

- Multiple client systems can boot from a single server-based disk image.
- Groups of client systems can boot from images customized for their respective groups.
- Large clusters of computers can be identically configured, booted, and managed.
- Computers can be booted in "diskless" mode for simplified administration in controlled environments like kiosks and QA installations.
- Mac OS X can automatically discover a network boot image on the server using the Boot Server Discovery Protocol (BSDP).

For manual network booting, assume a simple setup where the test machine (CLIENT) uses the root file system on its local disk. The other machine (SERVER) runs the TFTP service. Both machines are running macOS.

First, enable the TFTP service on SERVER:

```sh
$ sudo service tftp start
```

Copy BootX and the kernel to the TFTP directory:

```sh
$ sudo cp /usr/standalone/ppc/bootx.xcoff /private/tftpboot/bootx.xcoff
$ sudo cp /path/to/kernel /private/tftpboot/mach_kernel.debug
$ sudo chmod 0644 /private/tftpboot/bootx.xcoff /private/tftpboot/mach_kernel.debug
```

Create the mkext cache on CLIENT and transfer it to SERVER:

```sh
$ kextcache -l -n -a ppc -m /tmp/mach_kernel.debug.mkext /System/Library/Extensions
$ sudo cp /tmp/mach_kernel.debug.mkext /private/tftpboot/
```

Set the values of three Open Firmware variables on CLIENT:

```sh
0 > setenv boot-device enet:10.0.0.1,bootx.xcoff,10.0.0.2;255.255.255.0,;10.0.0.1
0 > setenv boot-file enet:10.0.0.1,mach_kernel.debug,10.0.0.2;255.255.255.0,;10.0.0.1
0 > setenv boot-args -s -v rd=*/pci@f4000000/ata-6@d/disk@0:3
```

Flush the NVRAM and reboot:

```sh
0 > sync-nvram
0 > mac-boot
```

If everything is set up correctly, the network boot process will start, and CLIENT should boot into a single-user shell.

### 4.12. Firmware Security

Open Firmware includes a security feature that allows setting a password for accessing most commands from the firmware prompt and optionally for booting the system. Security settings can be changed from the firmware prompt or through Apple's Open Firmware Password application.

#### 4.12.1. Managing Firmware Security

To set a security password, use the `password` command, which prompts the user to enter the password twice. The password is encoded using a simple scheme and stored in the `security-password` variable. Table 46 shows the encoding scheme.

**Table 46: Open Firmware Encoding of an ASCII Password**

| ASCII | Encoded | ASCII | Encoded | ASCII | Encoded | ASCII | Encoded | ASCII | Encoded |
|-------|---------|-------|---------|-------|---------|-------|---------|-------|---------|
| sp    | %8a     | 3     | %99     | F     | %ec     | Y     | %f3     | l     | %c6     |
| !     | %8b     | 4     | %9e     | G     | %ed     | Z     | %f0     | m     | %c7     |
| "     | %88     | 5     | %9f     | H     | %e2     | [     | %f1     | n     | %c4     |
| #     | %89     | 6     | %9c     | I     | %e3     | \     | %f6     | o     | %c5     |
| $     | %8e     | 7     | %9d     | J     | %e0     | ]     | %f7     | p     | %da     |
| %     | %8f     | 8     | %92     | K     | %e1     | ^     | %f4     | q     | %db     |
| &     | %8c     | 9     | %93     | L     | %e6     | _     | %f5     | r     | %d8     |
| '     | %8d     | :     | %90     | M     | %e7     | `     | %ca     | s     | %d9     |
| (     | %82     | ;     | %91     | N     | %e4     | a     | %cb     | t     | %de     |
| )     | %83     |       | %94     | Q     | %fb     | d     | %ce     | w     | %dd     |
| ,     | %86     | ?     | %95     | R     | %f8     | e     | %cf     | x     | %d2     |
| -     | %87     | @     | %ea     | S     | %f9     | f     | %cc     | y     | %d3     |
| .     | %84     | A     | %eb     | T     | %fe     | g     | %cd     | z     | %d0     |
| /     | %85     | B     | %e8     | U     | %ff     | h     | %c2     | {     | %d1     |
| 0     | %9a     | C     | %e9     | V     | %fc     | i     | %c3     | |     | %d6     |
| 1     | %9b     | D     | %ee     | W     | %fd     | j     | %c0     | }     | %d7     |
| 2     | %98     | E     | %ef     | X     | %f2     | k     | %c1     | ~     | %d4     |

Setting the password alone does not enable protection; a security mode must also be set through the `security-mode` variable. The following security modes are supported:

- **none**: No security; the password is not required.
- **command**: A password is required for all firmware commands except for booting the system using default settings.
- **full**: A password is required for all firmware commands, including booting the system with default settings.
- **no-password**: Access to Open Firmware is entirely disabled, and the system boots directly into the operating system.