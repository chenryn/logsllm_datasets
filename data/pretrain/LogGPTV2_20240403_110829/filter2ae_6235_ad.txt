            if (sock) {
              netlink_detachskb(sock, nc);
            } else if (nc) {
              dev_kfree_skb(nc);
            }
            return ret;
          }
前面的代码首先根据用户提供的文件描述符引用文件对象[0]。如果当前进程文件描述符表(fdt)中不存在这个fd，则返回NULL指针并且代码进入退出路径[1]。
否则，引用与该文件关联的struct sock对象[2a]。如果没有关联的有效struct
sock对象(不存在或类型错误)，则指向sock的指针将重置为NULL并且代码将进入退出路径[3]。在这两种情况下，先前的文件对象引用都被释放[2b]。
最后，调用netlink_attachskb()[4]，尝试将struct sk_buff(nc)加入struct
sock接收队列。从那里，有三种可能的结果：
  * 一切都很顺利，代码继续在正常的路径[5c]。
  * 该函数返回1，在这种情况下，代码跳回到重试标签[5a]，也就是“重试逻辑”。
  * 否则，nc和sock都设置为NULL，代码跳转到退出路径[5b]。
### 为什么将“sock”设置为NULL很重要？
要回答这个问题，先让我们自问：如果它不是NULL会发生什么？ 回答是：
    out:
        if (sock) {
          netlink_detachskb(sock, nc);  // sk_refcnt))    // f_path.dentry->d_inode;
          struct sock *sock;
          if (!S_ISSOCK(inode->i_mode))
            return ERR_PTR(-ENOTSOCK);
          sock = SOCKET_I(inode)->sk;
          if (sock->sk_family != AF_NETLINK)
            return ERR_PTR(-EINVAL);
    [0]   sock_hold(sock);    // sk_refcnt);   // sk_rmem_alloc) > sk->sk_rcvbuf || test_bit(0, &nlk->state)) {
            // ... cut (wait until some conditions) ...
            sock_put(sk);         // ) -> ok |  | 2 (+1) | 1 | NULL  
|  |  |  |  
netlink_getsockbyfilp() -> ok |  | 2 | 2 (+1) | 0xffffffc0aabbccdd  
|  |  |  |  
fput() -> ok |  | 1 (-1) | 2 | 0xffffffc0aabbccdd  
|  |  |  |  
netlink_attachskb() -> returns 1 |  | 1 | 1 (-1) | 0xffffffc0aabbccdd  
|  |  |  |  
| close() | 0 (-1) | 0 (-1) | 0xffffffc0aabbccdd  
|  |  |  |  
goto retry |  | FREE | FREE | 0xffffffc0aabbccdd  
|  |  |  |  
fget( returns NULL |  | FREE | FREE | 0xffffffc0aabbccdd  
|  |  |  |  
goto out |  | FREE | FREE | 0xffffffc0aabbccdd  
|  |  |  |  
netlink_detachskb() -> UAF! |  | FREE | (-1) in UAF | 0xffffffc0aabbccdd  
close(TARGET_FD)系统调用中将调用fput()(它将文件对象的引用计数减1)并删除从给定文件描述符(TARGET_FD)到引用文件的映射。也就是说，将fdt[TARGET_FD]设置为NULL。由于调用close(TARGET_FD)删除了引用文件的最后一个引用，它将被释放。
由于文件对象被释放，它会删除相关sock的引用(即sock的引用计数将减1)。同样，由于sock的引用计数为零，它也会被释放。此时，sock指针是野指针，尚未重置为NULL。
对fget()的第二次调用将失败(fd不指向FDT中的任何有效文件对象)并直接跳转到“out”标签。然后调用netlink_detachskb()参数是指向已释放数据的指针，这将导致释放后重用！
这就是为什么补丁提到了“关闭fd”的原因。这是实际触发漏洞的必要条件。并且因为close()在另一个线程中非特定的时间发生，所以它需要“竞争”。
到目前为止，我们已经掌握理解漏洞以及如何触发漏洞所需的一切。我们需要满足两个条件：
  * 在第一次重试循环中，对netlink_attachskb()的调用应返回1。
  * 在第二个重试循环中，对fget()的调用应该返回NULL。
换句话说，当我们从mq_notif()系统调用返回时，sock的引用计数为-1，产生了不平衡。在进入mq_notify()之前sock引用计数被设置为1，在mq_notif()末尾处(在netlink_detachskb()中)会有释放后重用。
译者注：由于有点长，所以分成了两部分，[后一部分链接](https://xz.aliyun.com/t/5273)