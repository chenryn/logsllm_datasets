./mysql-bin.000001
重启MySQL服务程序，或者执行SQL操作"FLUSH LOGS;"，会生成一份新的日志：
\[root@dbsvr1 \~\]# ls /var/lib/mysql/mysql-bin.\*
/var/lib/mysql/mysql-bin.000001 /var/lib/mysql/mysql-bin.index
/var/lib/mysql/mysql-bin.000002
\[root@dbsvr1 \~\]# cat /var/lib/mysql/mysql-bin.index
./mysql-bin.000001
./mysql-bin.000002
步骤二：利用binlog日志重做数据库操作
1）执行数据库表添加操作
创建db1·库tb1表，表结构自定义：
mysql\> CREATE DATABASE db1;
Query OK, 1 row affected (0.05 sec)
mysql\> USE db1;
Database changed
mysql\> CREATE TABLE tb1(
-\> id int(4) NOT NULL,name varchar(24)
-\> );
Query OK, 0 rows affected (0.28 sec)
插入3条表记录：
mysql\> INSERT INTO tb1 VALUES
-\> (1,\'Jack\'),
-\> (2,\'Kenthy\'),
-\> (3,\'Bob\');
Query OK, 3 rows affected (0.12 sec)
Records: 3 Duplicates: 0 Warnings: 0
确认插入的表记录数据：
mysql\> SELECT \* FROM tb1;
+\-\-\--+\-\-\-\-\-\-\--+
\| id \| name \|
+\-\-\--+\-\-\-\-\-\-\--+
\| 1 \| Jack \|
\| 2 \| Kenthy \|
\| 3 \| Bob \|
+\-\-\--+\-\-\-\-\-\-\--+
3 rows in set (0.00 sec)
2）删除前一步添加的3条表记录
执行删除所有表记录操作：
mysql\> DELETE FROM tb1;
Query OK, 3 rows affected (0.09 sec)
确认删除结果：
mysql\> SELECT \* FROM tb1;
Empty set (0.00 sec)
步骤三：通过binlog日志恢复表记录
binlog会记录所有的数据库、表更改操作，所以可在必要的时候重新执行以前做过的一部分数据操作，但对于启用binlog之前已经存在的库、表数据将不适用。
根据上述"恢复被删除的3条表记录"的需求，应通过mysqlbinlog工具查看相关日志文件，找到删除这些表记录的时间点，只要恢复此前的SQL操作（主要是插入那3条记录的操作）即可。
1）查看mysql-bin.000002日志内容
\[root@dbsvr1 \~\]# mysqlbinlog /var/lib/mysql/mysql-bin.000002
/\*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1\*/;
/\*!50003 SET
\@OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0\*/;
DELIMITER /\*!\*/;
\# at 4
#170412 12:05:32 server id 1 end_log_pos 123 CRC32 0x6d8c069c Start:
binlog v 4, server v 5.7.17-log created 170412 12:05:32 at startup
\# Warning: this binlog is either in use or was not closed properly.
ROLLBACK/\*!\*/;
BINLOG \'
jKftWA8BAAAAdwAAAHsAAAABAAQANS43LjE3LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAACMp+1YEzgNAAgAEgAEBAQEEgAAXwAEGggAAAAICAgCAAAACgoKKioAEjQA
AZwGjG0=
\'/\*!\*/;
\# at 123
#170412 12:05:32 server id 1 end_log_pos 154 CRC32 0x17f50164
Previous-GTIDs
\# \[empty\]
\# at 154
#170412 12:05:59 server id 1 end_log_pos 219 CRC32 0x4ba5a976
Anonymous_GTID last_committed=0 sequence_number=1
SET @@SESSION.GTID_NEXT= \'ANONYMOUS\'/\*!\*/;
\# at 219
#170412 12:05:59 server id 1 end_log_pos 310 CRC32 0x5b66ae13 Query
thread_id=3 exec_time=0 error_code=0
SET TIMESTAMP=1491969959/\*!\*/;
SET @@session.pseudo_thread_id=3/\*!\*/;
SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0,
@@session.unique_checks=1, @@session.autocommit=1/\*!\*/;
SET @@session.sql_mode=1436549152/\*!\*/;
SET @@session.auto_increment_increment=1,
@@session.auto_increment_offset=1/\*!\*/;
/\*!\\C utf8 \*//\*!\*/;
SET
@@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/\*!\*/;
SET @@session.lc_time_names=0/\*!\*/;
SET @@session.collation_database=DEFAULT/\*!\*/;
CREATE DATABASE db1
/\*!\*/;
\# at 310
#170412 12:06:23 server id 1 end_log_pos 375 CRC32 0x2967cc28
Anonymous_GTID last_committed=1 sequence_number=2
SET @@SESSION.GTID_NEXT= \'ANONYMOUS\'/\*!\*/;
\# at 375
#170412 12:06:23 server id 1 end_log_pos 502 CRC32 0x5de09aae Query
thread_id=3 exec_time=0 error_code=0
use \`db1\`/\*!\*/;
SET TIMESTAMP=1491969983/\*!\*/;
CREATE TABLE tb1(
id int(4) NOT NULL,name varchar(24)
)
/\*!\*/;
\# at 502
#170412 12:06:55 server id 1 end_log_pos 567 CRC32 0x0b8cd418
Anonymous_GTID last_committed=2 sequence_number=3
SET @@SESSION.GTID_NEXT= \'ANONYMOUS\'/\*!\*/;
\# at 567
#170412 12:06:55 server id 1 end_log_pos 644 CRC32 0x7e8f2fa0 Query
thread_id=3 exec_time=0 error_code=0
SET TIMESTAMP=1491970015/\*!\*/;
BEGIN
/\*!\*/;
\# at 644
#170412 12:06:55 server id 1 end_log_pos 772 CRC32 0x4e3f728e Query
thread_id=3 exec_time=0 error_code=0 //插入表记录的起始时间点
SET TIMESTAMP=1491970015/\*!\*/;
INSERT INTO tb1 VALUES(1,\'Jack\'),(2,\'Kenthy\'), (3,\'Bob\')
/\*!\*/;
\# at 772
#170412 12:06:55 server id 1 end_log_pos 803 CRC32 0x6138b21f Xid = 10
//确认事务的时间点
COMMIT/\*!\*/;
\# at 803
#170412 12:07:24 server id 1 end_log_pos 868 CRC32 0xbef3f472
Anonymous_GTID last_committed=3 sequence_number=4
SET @@SESSION.GTID_NEXT= \'ANONYMOUS\'/\*!\*/;
\# at 868
#170412 12:07:24 server id 1 end_log_pos 945 CRC32 0x5684e92c Query
thread_id=3 exec_time=0 error_code=0
SET TIMESTAMP=1491970044/\*!\*/;
BEGIN
/\*!\*/;
\# at 945
#170412 12:07:24 server id 1 end_log_pos 1032 CRC32 0x4c1c75fc Query
thread_id=3 exec_time=0 error_code=0 //删除表记录的时间点
SET TIMESTAMP=1491970044/\*!\*/;
DELETE FROM tb1
/\*!\*/;
\# at 1032
#170412 12:07:24 server id 1 end_log_pos 1063 CRC32 0xccf549b2 Xid = 12
COMMIT/\*!\*/;
SET @@SESSION.GTID_NEXT= \'AUTOMATIC\' /\* added by mysqlbinlog \*/
/\*!\*/;
DELIMITER ;
\# End of log file
/\*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE\*/;
/\*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0\*/;
2） 执行指定Pos节点范围内的sql命令恢复数据
根据上述日志分析，只要恢复从2014.01.12 20:12:14到2014.01.12
20:13:50之间的操作即可。可通过mysqlbinlog指定时间范围输出，结合管道交给msyql命令执行导入重做：
\[root@dbsvr1 \~\]# mysqlbinlog \\
\--start-datetime=\"2017-04-12 12:06:55\" \\
\--stop-datetime=\"2017-04-12 12:07:23\" \\
/var/lib/mysql/mysql-bin.000002 \| mysql -u root -p
Enter password: //验证口令
3）确认恢复结果
mysql\> SELECT \* FROM db1.tb1;
+\-\-\--+\-\-\-\-\-\-\--+
\| id \| name \|
+\-\-\--+\-\-\-\-\-\-\--+
\| 1 \| Jack \|
\| 2 \| Kenthy \|
\| 3 \| Bob \|
+\-\-\--+\-\-\-\-\-\-\--+
3 rows in set (0.00 sec)
3 innobackupex备份工具
3.1 问题
安装percona软件包
innobackupex完整备份、增量备份操作。
恢复数据
3.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：安装XtraBackup软件包
1）了解软件包描述信息
\[root@dbsvr1 pub\]# rpm -qpi
percona-xtrabackup-24-2.4.6-2.el7.x86_64.rpm
Name : percona-xtrabackup-24
Version : 2.4.6
Release : 2.el7
Architecture: x86_64
Install Date: (not installed)
Group : Applications/Databases
Size : 32416340
License : GPLv2
Signature : DSA/SHA1, 2017年02月27日 星期一 20时28分17秒, Key ID
1c4cbdcdcd2efd2a
Source RPM : percona-xtrabackup-24-2.4.6-2.el7.src.rpm
Build Date : 2017年02月27日 星期一 20时27分21秒
Build Host : vps-centos7-x64-01.ci.percona.com
Relocations : (not relocatable)
URL : http://www.percona.com/software/percona-xtrabackup
Summary : XtraBackup online backup for MySQL / InnoDB
Description :
Percona XtraBackup is OpenSource online (non-blockable) backup solution
for InnoDB and XtraDB engines
2）安装依赖包perl-DBD-MySQL perl-Digest-MD5 libev
使用RHEL 7自带的即可，yum方式安装：
\[root@dbsvr1 pub\]# yum -y install perl-DBD-MySQL perl-Digest-MD5
libev使用网上找的rpm包 libev-4.15-1.el6.rf.x86_64.rpm //该包由讲师提供
\[root@dbsvr1 pub\]#rpm --ivh libev-4.15-1.el6.rf.x86_64.rpm
如果未安装这些依赖包，则直接安装percona-xtrabackup时会报错：
代码
3）安装percona-xtrabackup
\[root@dbsvr1 pub\]#rpm -ivh percona-xtrabackup-\*.rpm
警告：percona-xtrabackup-24-2.4.6-2.el7.x86_64.rpm: 头V4 DSA/SHA1
Signature, 密钥 ID cd2efd2a: NOKEY
准备中\... \################################# \[100%\]
正在升级/安装\...
1:percona-xtrabackup-24-2.4.6-2.el7################################# \[
33%\]
2:percona-xtrabackup-test-24-2.4.6-################################# \[
67%\]
3:percona-xtrabackup-24-debuginfo-2#################################
\[100%\]
4）确认安装的主要程序/脚本
\[root@dbsvr1 pub\]# rpm -ql percona-xtrabackup-24-2.4.6-2.el7.x86_64
/usr/bin/innobackupex
/usr/bin/xbcloud
/usr/bin/xbcloud_osenv
/usr/bin/xbcrypt
/usr/bin/xbstream
/usr/bin/xtrabackup
/usr/share/doc/percona-xtrabackup-24-2.4.6
/usr/share/doc/percona-xtrabackup-24-2.4.6/COPYING
/usr/share/man/man1/innobackupex.1.gz
/usr/share/man/man1/xbcrypt.1.gz
/usr/share/man/man1/xbstream.1.gz
/usr/share/man/man1/xtrabackup.1.gz
步骤二：innobackupex完整备份、增量备份操作
\--host 主机名
\--port 3306
\--user 用户名
\--password 密码
\--databases=\"库名\"
\--databases=\"库1 库2\"
\--databases=\"库.表\"
\--no-timestamp
不用日期命名备份文件存储的子目录，使用备份的数据库名做备份目录名
\--no-timestmap 不使用日期命名备份目录名
1）做一个完整备份
默认情况下，备份文件存储的子目录会用日期命名，
innobackupex作为客户端工具，以mysql协议连入mysqld，将数据备份到/backup文件夹：
\[root@dbsvr1 \~\]# innobackupex \--user=root \--password=1234567
/backup/mysql --no-timestamp
170425 11:05:44 innobackupex: Starting the backup operation
IMPORTANT: Please check that the backup run completes successfully.
At the end of a successful backup run innobackupex
prints \"completed OK!\".
Unrecognized character \\x01; marked by \<\-- HERE after \<\-- HERE near
column 1 at - line 1374.
170425 11:05:45 Connecting to MySQL server host: localhost, user: root,
password: set, port: not set, socket: not set
Using server version 5.7.17
innobackupex version 2.4.6 based on MySQL server 5.7.13 Linux (x86_64)
(revision id: 8ec05b7)
xtrabackup: uses posix_fadvise().
xtrabackup: cd to /var/lib/mysql
xtrabackup: open files limit requested 0, set to 1024
xtrabackup: using the following InnoDB configuration:
xtrabackup: innodb_data_home_dir = .
xtrabackup: innodb_data_file_path = ibdata1:12M:autoextend
xtrabackup: innodb_log_group_home_dir = ./
xtrabackup: innodb_log_files_in_group = 2
xtrabackup: innodb_log_file_size = 50331648