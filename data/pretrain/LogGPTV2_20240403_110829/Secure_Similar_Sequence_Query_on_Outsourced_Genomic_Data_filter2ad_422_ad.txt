2:
(cid:3)
(cid:4) B
3: A: (cid:4)xδ (cid:5) A ←
xπ (π (cid:9)(1))
4: B: (cid:4)xδ (cid:5) B ←
xπ (π (cid:9)(1))
5: for 1 ≤ i ≤ n − 1 do
6:
(cid:3)
xπ (π (cid:9)(i +1))
, · · · ,
(cid:4)
(cid:4)x
(cid:4)
]
(cid:4)
)
7:
8:
A and B: θ ← ADD-CMP((cid:4)xδ (cid:5) ,
(cid:4) A
(cid:3)
if θ == 1 then
(cid:4) B
(cid:3)
xπ (π (cid:9)(i +1))
xπ (π (cid:9)(i +1))
A: (cid:4)xδ (cid:5) A ←
B: (cid:4)xδ (cid:5) B ←
9:
10: A: (cid:4)xmin (cid:5) A ← (cid:4)xδ (cid:5) A
11: B: (cid:4)xmin (cid:5) B ← (cid:4)xδ (cid:5) B
SMS protocol are shown in Algorithm 4. Initially, we utilize SSF
(cid:9)(cid:5).
protocol to permutate the original sequence to get the new one (cid:4)x
After shuffling, A or B prepares a garbled circuit ADD-CMP for
comparing two additively secret sharing values, e.g. (cid:4)x1(cid:5) and (cid:4)x2(cid:5).
Clearly, the ADD-CMP circuit outputs 1 if x1 > x2 and 0 otherwise.
Same as above, the output of this circuit is public in this protocol.
By calling ADD-CMP n − 1 times, we are able to get the minimum
(cid:4)xδ (cid:5). At the end, the output of SMS is (cid:4)xmin (cid:5) A ← (cid:4)xδ (cid:5) A
and
(cid:4)xmin (cid:5) B ← (cid:4)xδ (cid:5) B
. In this protocol, the index δ does not reveal
any information regarding the position of the minimum in the
original sequence to A and B as the sequence has been shuffled
securely.
4.4 Secure Exact Edit Distance Computation
(SEED) Protocol
(cid:4)
] and (cid:4)y(cid:5) = [(cid:4)y1(cid:5) , · · · ,
(cid:3)
yn2
and (cid:4)y(cid:5) B
(cid:3)
xn1
and (cid:4)y(cid:5) A
(cid:4)
while B inputs (cid:4)x(cid:5) B
We assume that A and B input two secret sharing sequences
(cid:4)x(cid:5) = [(cid:4)x1(cid:5) , · · · ,
], i.e., A in-
puts (cid:4)x(cid:5) A
. Secure Exact
Edit Distance (SEED) protocol is to realize the function that com-
putes exact edit distance (cid:4)dE D (cid:5) (in the secret sharing form) between
x and y without revealing any private information about them. Now,
we explain how to run Wagner-Fisher algorithm (see Algorithm
9) for edit distance computation in a privacy-preserving manner.
A:
A:
← 0
] and
] and
← i; B:
← j; B:
(cid:4)y(cid:5) A
B inputs (cid:4)x(cid:5) B
(cid:4)y(cid:5) B
Algorithm 5 Secure Exact Edit Distance Protocol
Input: A inputs (cid:4)x(cid:5) A
(cid:4) A
(cid:3)
(cid:4) A
(cid:3)
= [(cid:4)x1(cid:5) A , · · · ,
xn1
(cid:4) B
(cid:3)
=[(cid:4)y1(cid:5) A , · · · ,
yn2
]
(cid:4) B
(cid:3)
= [(cid:4)x1(cid:5) B , · · · ,
xn1
=[(cid:4)y1(cid:5) B , · · · ,
yn2
]
Output: A outputs (cid:4)dE D (cid:5) A
; B outputs (cid:4)dE D (cid:5) B
(cid:4) A
(cid:3)
1: for 0 ≤ i ≤ n1 do
di,0
2:
(cid:3)
(cid:4) A
3: for 0 ≤ j ≤ n2 do
d0, j
4:
5: A:
6:
7: B:
8:
9: for 1 ≤ i ≤ n1, 1 ≤ j ≤ n2 do
10:
(cid:3)
di,0
(cid:3)
d0, j
(cid:4) B
(cid:4) B
A: (cid:4)t1(cid:5) A ← (cid:4)yi (cid:5) A + 1, (cid:4)t2(cid:5) A ← (cid:4)yi (cid:5) A − 1
B: (cid:4)t1(cid:5) B ← (cid:4)yi (cid:5) B , (cid:4)t2(cid:5) B ← (cid:4)yi (cid:5) B
A and B:
(cid:4)t3(cid:5) ← SBC((cid:4)t1(cid:5) , (cid:4)xi (cid:5) , (cid:4)z0(cid:5) , (cid:4)z1(cid:5))
(cid:3)
(cid:4)
(cid:3)
(cid:4)csub (cid:5) ← SBC((cid:4)xi (cid:5) , (cid:4)t2(cid:5) , (cid:4)t3(cid:5) , (cid:4)z1(cid:5))
di, j
di, j−1
(cid:4)cins (cid:5) ,
16: A: (cid:4)dE D (cid:5) A ←
17: B: (cid:4)dE D (cid:5) B ←
(cid:3)
(cid:4)
(cid:3)
di −1, j
← SMS(
(cid:4) A
(cid:3)
+ (cid:4)csub (cid:5))
di −1, j−1
(cid:4) B
(cid:3)
dn1,n2
dn1,n2
+ (cid:4)cdel (cid:5) ,
← 0
(cid:4)
(cid:4)
11:
12:
13:
14:
15:
+
(cid:4)cdel (cid:5) B ← 0, (cid:4)cins (cid:5) B ← 0, (cid:4)z0(cid:5) B ← 0, (cid:4)z1(cid:5) B ← 0
(cid:4)cdel (cid:5) A ← 1, (cid:4)cins (cid:5) A ← 1, (cid:4)z0(cid:5) A ← 0, (cid:4)z1(cid:5) A ← 1
(cid:4)
(cid:3)
di,0
(cid:4)
(cid:3)
d0, j
(0 ≤ i ≤ n1),
The main steps are shown in Algorithm 5. To start with, server
(0 ≤ j ≤ n2),
A and server B initialize
(cid:4)cins (cid:5) and (cid:4)cdel (cid:5) corresponding to line 1 − 8 in Algorithm 5. Then,
we begin to calculate di, j (1 ≤ i ≤ n1, 1 ≤ j ≤ n2) through itera-
should be larger than max(n1, n2) to
tive computing. Note that 2
guarantee the correctness of edit distance computation while (cid:2) is
the bit length of data. In each iteration, (cid:4)csub (cid:5) is assigned to 0 or 1
according to whether xi is equal to yj , i.e., csub ← (xi == yj )?0 : 1.
In order to have an assignment of (cid:4)csub (cid:5) without revealing in-
formation regarding xi and yj , we first convert “==” operator to
“>”operator as follows:
(cid:2)
csub ← (xi == yj )?0 : 1 ⇔
⎧⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎩
t1 ← yj + 1
t2 ← yj − 1
t3 ← (t1 > xi )?0 : 1
csub ← (xi > t2)?t3 : 1
then utilize SBC protocol to perform a secure assignment that cor-
responds to line 12 − 15 in Algorithm 5. Note that, the addition in
line 15 of Algorithm 5 refers to the addition in the form of additive
secret sharing as described in Section 2.2. At the end of each itera-
can be calculated by SMS protocol. With n1n2 iterations,
tion,
SEED protocol would return the final edit distance
(cid:3)
di, j
(cid:3)
dn1,n2
(cid:4)
(cid:4)
.
4.5 Secure Approximate Genomic Sequence
Comparison (SAGSC) Protocol
Assume that A and B input two secret sharing genomic sequences
(cid:4)x(cid:5) = [(cid:4)x1(cid:5) , · · · , (cid:4)xn (cid:5)] and (cid:4)y(cid:5) = [(cid:4)y1(cid:5) , · · · , (cid:4)yn (cid:5)], i.e., A inputs
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18: 
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
Algorithm 6 Secure Approximate Genomic Sequence Comparison
Protocol
Input: A inputs (cid:4)x(cid:5) A
= [(cid:4)x1(cid:5) A , · · · , (cid:4)xn (cid:5) A ] and
=[(cid:4)y1(cid:5) A , · · · , (cid:4)yn (cid:5) A ]
(cid:4)y(cid:5) A
B inputs (cid:4)x(cid:5) B
(cid:4)y(cid:5) B
=[(cid:4)y1(cid:5) B , · · · , (cid:4)yn (cid:5) B ]
= [(cid:4)x1(cid:5) B , · · · , (cid:4)xn (cid:5) B ] and
4:
3:
(cid:4) A
; B outputs (cid:4)χ (cid:5) B
Output: A outputs (cid:4)χ (cid:5) A
1: A:
(cid:3)
(cid:4)Sumx (cid:5) A ← (cid:4)x1(cid:5) A + · · · + (cid:4)xn (cid:5) A
2:
(cid:4) A
(cid:3)
← (cid:4)y1(cid:5) A + · · · + (cid:4)yn (cid:5) A
Sumy
(cid:4)T (cid:5) A ← (cid:4)Sumx (cid:5) A −
Sumy
2(cid:2) , set (cid:4)χ (cid:5) A ← r
Select a random integer r ∈ Z
5:
6: B:
(cid:4) B
(cid:3)
(cid:4)Sumx (cid:5) B ← (cid:4)x1(cid:5) B + · · · + (cid:4)xn (cid:5) B
7:
(cid:3)
← (cid:4)y1(cid:5) B + · · · + (cid:4)yn (cid:5) B
Sumy
(cid:4)T (cid:5) B ←
Sumy
9:
10: A and B:
11:
(cid:4)χ (cid:5) B ← EQ-ADD((cid:4)T (cid:5) A , (cid:4)T (cid:5) B , −r )
− (cid:4)Sumx (cid:5) B
(cid:4) B
8:
and (cid:4)y(cid:5) B
and (cid:4)y(cid:5) A
while B inputs (cid:4)x(cid:5) B
(cid:4)x(cid:5) A
. Secure Approxi-
mate Genomic Sequence Comparison (SAGSC) protocol is to realize
the function that outputs an indicator (cid:4)χ (cid:5) where χ = 1 if x is al-
most the same as y and χ = 0 otherwise. During this process, no
information regarding x and y is revealed to A and B. A naive
method of sequence comparison is to do bit-by-bit comparisons,
but generates too much time overhead since a large number of
comparison operations are needed for the long genomic sequences.
This led us to explore an approximate solution for better efficiency.
In this work, we use different specified integers (i.e., 0, 1, 2, 3) to
encode four nucleotides (i.e., A, C, G, T), and we observed that indi-
vidual differences in the human genome sequences are very small.
So we conclude that if the sums of the encodings of genomic se-
quences are equal, they can be regarded as approximately identical
yi holds, then
sequences. That is, if the equation
two sequences (cid:4)x(cid:5) and (cid:4)y(cid:5) are treated as the same. In the secret
sharing form, the above equation can be converted to
n
n
xi ==
i =1
i =1
(cid:4)xi (cid:5) A −
(cid:4)yi (cid:5) B ==
(cid:4)yi (cid:5) A −
(cid:4)xi (cid:5) B .
n