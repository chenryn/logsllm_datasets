A hidden-identity adversary does not have the list of identi-
ties chosen during the setup phase initiated by the multiple
calls to SetupCLD. A public-identity adversary has access
to this list.
In the following, we precise HI for Hidden-
Identity when identities stay hidden, and PI for Public-
Identity when they are public.
Remark 5. Note that we do not make the distinction for
a strong adversary against privacy as he is able to read the
secrets of any CLD, so PI strong adversaries and HI strong
adversaries are equivalent in a privacy game.
4. GENERIC MODIFICATIONS
We give a general framework to bring various levels of
privacy to existing identiﬁcation protocols. We describe two
modiﬁcations which allow to obtain privacy against hidden-
identity adversaries and we then combine these ﬁrst ideas to
achieve public-identity privacy, which is our main motivation
in this paper.
The security and privacy proofs of these schemes are omit-
ted due to lack of space. Examples of applications are given
199in Section 5 and in Appendix A.
4.1 Setup
We assume to work with a three-move identiﬁcation pro-
tocol P as deﬁned in Section 2.2. We use the setup al-
gorithms deﬁned in Section 3 with the following speciﬁci-
In the ﬁrst modiﬁcation, SetupVerifierKAp algo-
ties.
rithm does not generate any veriﬁer keys whereas it com-
putes a pair (KVs, KVp) associated to an asymmetric en-
cryption scheme in the second and third ones. The Setup-
CLDSecretKAp (SN) algorithm uses SetupProverKAp (1k)
to compute (s, I). The initial state of the CLD is then
(KAp, KVp, s).
The list L = {..., (I, SN ), ...} of identities of all initialized
provers is constructed accordingly. The veriﬁer knows the
content of this list L.
4.2 Identiﬁcation Schemes for Hidden-Identity
Privacy
In the two modiﬁcations below, we assume that the list L
is not public. It is kept hidden on the veriﬁer’s side. These
two modiﬁcations serve in fact as our two steps toward our
public-identity construction (cf. Section 4.3). This conﬁg-
uration can arise if a covert channel, in addition to the RF
channel, is used between the CLD and the veriﬁer. One can
think at an optical channel for instance. In this case, the
veriﬁer learns the identity by reading the CLD and executes
the protocol with the CLD to check the authenticity of the
written value.
4.2.1 Modiﬁcation 1: Introduction of a Hash Func-
tion
This ﬁrst idea is to change the ﬁrst message into its hash
value.
Let H be a hash function. The protocol can be described
as follows (see Fig. 3):
1. the CLD uses ComputeAs,KAp () (cid:55)→ (A, rA) and out-
puts H(A),
2. the veriﬁer sends a random c to the CLD,
3. the CLD uses ComputeBs,KAp (rA, c) (cid:55)→ B and out-
puts B.
To identify the prover, the veriﬁer checks amongst identities
I in L whether H(f (B)gI (c)−1) and H(A) are equal.
P
public key I
secret key s
parameters:
KAp , KVp
V
public key KVp
secret key KVs
ComputeA
s,KAp
() = (A, rA)
ComputeB
s,KAp
(rA , c) = B
a=H(A)
−−−−−−−−−−→
←−−−−−−−−−− pick c
−−−−−−−−−−−→ check for I ∈ L whether
B
c
H(f(B)gI (c)−1) ?= a
Figure 3: Modiﬁcation 1
Theorem 1. Assume that the hash function H is col-
lision and preimage resistant, assume that the underlying
scheme P is sound and is HVZK, then the protocol of the
modiﬁcation 1 is HI weak private, resistant against imper-
sonation attacks and HVZK.
Moreover, if H behaves like a random oracle, the scheme
is statistically MVZK.
The use of the hash function helps to hide the value A and
thus it is harder to retrieve identity. However the scheme is
clearly not scalable as the veriﬁer must try all the identities
in L. Note that, if the list becomes public, the privacy falls
as the ﬁnal veriﬁcation is then easily determined.
4.2.2 Modiﬁcation 2: Use of an Encryption Scheme
Let (E, D) be an asymmetric encryption scheme for which
(KVs, KVp) is a valid key pair. The second idea is to encrypt
the ﬁrst message sent to the veriﬁer.
The protocol can be described as follows (cf. Fig 4):
1. the CLD uses ComputeAs,KAp () (cid:55)→ (A, rA) and out-
puts EKVp (A),
2. the veriﬁer sends a random c to the CLD,
3. the CLD uses ComputeBs,KAp (rA, c) (cid:55)→ B and out-
puts B.
At the end, the veriﬁer checks amongst identities I in L
whether DKVs
(cid:0)EKVp (A)(cid:1) .gI (c) is equal to f (B).
P
public key I
secret key s
parameters:
KAp , KVp
V
public key KVp
secret key KVs
ComputeA
s,KAp
() = (A, rA)
ComputeB
s,KAp
(rA , c) = B
c
(A)
a=EKVp
−−−−−−−−−−−−→
←−−−−−−−−−−
−−−−−−−−−−−→ check for I ∈ L whether
(a) .gI (c) ?= f(B)
pick c
B
DKVs
Figure 4: Modiﬁcation 2
When the encryption scheme is semantically secure [10]
(IND-CPA), the modiﬁcation leads to a narrow-strong pri-
vate ZK protocol.
Theorem 2. Assume that (E, D) is IND-CPA secure, as-
sume that the underlying scheme P is sound and is HVZK,
then the protocol of the modiﬁcation 2 is narrow-strong pri-
vate and HVZK.
Moreover, if P is secure against impersonation attacks,
the modiﬁcation is also resistant against impersonation at-
tacks.
On one hand, if the original scheme is not resistant against
impersonation attack, the semantic security does not guar-
antee resistance neither. For instance, if (E, D) has a ho-
momorphic property (e.g. El Gamal encryption scheme [7],
see also Section 5.4) and if we apply this modiﬁcation to
Schnorr, then an adversary can modify on the ﬂy the in-
puts without aﬀecting the identiﬁcation result. On the other
hand, if the original scheme is resistant, the resistance holds
since the encryption scheme is a permutation.
This scheme becomes very eﬃcient and scalable if there
exists an algorithm G which allows to compute I with gI (c)
and c (i.e. G(gI (c), c) = I).
It is the case when gI is an
200exponential function in base I and c invertible (as for Fiat-
Shamir-like schemes or Schnorr-like schemes). In order to
authenticate the device, the veriﬁcation then becomes: com-
pute I = G( f (B)
4.3 Modiﬁcation 3: a Public-Identity Private
A , c) and check whether I is in L .
Protocol
We here present our ﬁnal modiﬁcation which enables to
obtain a PI private scheme. This modiﬁcation relies on the
combination of the two previous ideas. The modiﬁcation 1
leads to security against impersonation attack and the mod-
iﬁcation 2 is narrow-strong private, scalable but possibly not
secure. The modiﬁcation 3 gathers the good properties of
the two others. It uses an encryption scheme (E, D) and a
hash function H in order to ensure a higher security level.
Here L is assumed to be public. The protocol can be de-
scribed as follows (cf. Fig 5):
1. the CLD uses ComputeAs,KAp () to obtain (A, rA).He
ﬁnally outputs H(EKVp (A)),
2. the veriﬁer sends a random c to the CLD,
3. the CLD uses ComputeBs,KAp (rA, c) (cid:55)→ B and out-
puts EKVp (A) and B.
(cid:0)EKVp (A)(cid:1). He then veriﬁes whether
At the end, the veriﬁer checks the value of H(EKVp (A)) and
computes A(cid:48) = DKVs
there exists I in L such that f (B) = A(cid:48).gI (c). As in the
previous modiﬁcation, if an algorithm G allows to compute
I from (gI (c), c) then the scheme is scalable.
P
public key I
secret key s
ComputeA
s,KAp
()
= (A, rA)
ComputeB
s,KAp
(rA , c)
= B
parameters:
KAp , KVp
V
public key KVp
secret key KVs
a=H(EKVp
(A))
−−−−−−−−−−−−−−−−−→
←−−−−−−−−−−−−−−−−− pick c
c
(A),b2=B
b1=EKVp
−−−−−−−−−−−−−−−−−→ check whether H(b1) ?= a
check for I ∈ L whether
(b1) .gI (c) ?= f(B)
DKVs
Figure 5: Modiﬁcation 3
Theorem 3. Assume that (E, D) is IND-CPA secure, as-
sume that H is collision and preimage resistant, assume that
the underlying scheme P is sound and is HVZK, then this
scheme is narrow-strong private and PI forward private, re-
sistant against impersonation attack and HVZK.
Moreover, if H behaves like a random oracle, the scheme
is statistically MVZK.
5. VARIATIONS AROUND THE GPS IDEN-
TIFICATION SCHEME
The GPS scheme, described in [9] is a very eﬃcient ZK
identiﬁcation scheme. GPS is a scheme based on the Schnorr
scheme but restricts itself to small exponents. Over Galois
Fields or RSA rings, this scheme enables to save computa-
tional power on the exponentiation and on the last compu-
tation by avoiding some modular reductions. Over elliptic
curves, this scheme permits quite eﬃcient coupon applica-
tions [9].
We give thereafter the details of the modiﬁcations 2 and
3 on this scheme to achieve privacy and scalability.
To be more complete, in the Appendix A, we present also
the application of our modiﬁcations to the GQ scheme (this
application does not lead to a scalable scheme but since it
is identity based, other applications are conceivable).
5.1 Computational Assumptions
Let G be a cyclic group of order q. The Discrete Logarithm
(DL) problem can be deﬁned as:
• Given g and ga in G with a randomly chosen in [0, q − 1],
• compute a.
The Discrete Logarithm with Short Exponent (DLSE)
problem is the usual DL problem but with short exponents
instead of normal ones. It has been introduced in [42]. For
instance, when the a above is a random element in [0, S − 1]
where S is smaller than q, this deﬁnes the DLSE(S) problem.
The Computational Diﬃe-Hellman (CDH) problem can
be deﬁned as:
• Given g, ga and gb with a and b randomly chosen in
[0, q − 1],
• compute gab.
[19] introduces a similar problem where the exponents are
short. This problem is called the Short Exponent Com-
putational Diﬃe-Hellman (SECDH) problem.
It is made
of two subproblems: the (short,full)SECDH problem and
the (short,short)SECDH problem, according to the fact that
only a is a short exponent and b is a random full exponent or
a and b are both short exponents. We call it (S1, S2)SECDH
problems for a ≤ S1 and b ≤ S2. As proved in [19], the prob-
lems (S, S)SECDH and (q, S)SECDH are hard if and only if
CDH and DLSE(S) problems are hard.
Let us recall the Decisional Diﬃe-Hellman (DDH) prob-
lem:
• Given g, ga, gb with a, b randomly chosen in [0, q − 1],
• given gc = gab with probability 1/2 and gc = gd with
probability 1/2 with d randomly chosen in [0, q − 1],
• decide whether gab equals gc.
The hardness of the DDH problem implies the hardness
of the CDH problem. As for the CDH problem, the SEDDH
problem is deﬁned in [19].
It is also made of two sub-
problems according to the fact that a is short or a and b
are short. The hardness of the (q, S)SEDDH problem and
(S, S)SEDDH problem are equivalent to the hardness of the
DLSE(S) problem combined with the hardness of the DDH
problem.
5.2 Setup Algorithms
We here instantiate the diﬀerent setup algorithms of the