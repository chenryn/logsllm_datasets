title:FlexFilt: Towards Flexible Instruction Filtering for Security
author:Leila Delshadtehrani and
Sadullah Canakci and
William Blair and
Manuel Egele and
Ajay Joshi
FlexFilt: Towards Flexible Instruction
Filtering for Security
Leila Delshadtehrani
PI:EMAIL
Boston University
Boston, Massachusetts, USA
Sadullah Canakci
PI:EMAIL
Boston University
Boston, Massachusetts, USA
William Blair
PI:EMAIL
Boston University
Boston, Massachusetts, USA
Manuel Egele
PI:EMAIL
Boston University
Boston, Massachusetts, USA
ABSTRACT
As the complexity of software applications increases, there has been
a growing demand for intra-process memory isolation. The com-
mercially available intra-process memory isolation mechanisms in
modern processors, e.g., Intel’s memory protection keys, trade-off
between efficiency and security guarantees. Recently, researchers
have tended to leverage the features with low security guarantees
for intra-process memory isolation. Subsequently, they have relied
on binary scanning and runtime binary rewriting to prevent the
execution of unsafe instructions, which improves the security guar-
antees. Such intra-process memory isolation mechanisms are not
the only security solutions that have to prevent the execution of un-
safe instructions in untrusted parts of the code. In fact, we identify
a similar requirement in a variety of other security solutions. Al-
though binary scanning and runtime binary rewriting approaches
can be leveraged to address this requirement, it is challenging to
efficiently implement these approaches.
In this paper, we propose an efficient and flexible hardware-
assisted feature for runtime filtering of user-specified instructions.
This flexible feature, called FlexFilt, assists with securing various
isolation-based mechanisms. FlexFilt enables the software devel-
oper to create up to 16 instruction domains, where each instruction
domain can be configured to filter the execution of user-specified
instructions. In addition to filtering unprivileged instructions, Flex-
Filt is capable of filtering privileged instructions. To illustrate the
effectiveness of FlexFilt compared to binary scanning approaches,
we measure the overhead caused by scanning the JIT compiled code
while browsing various webpages. We demonstrate the feasibility
of FlexFilt by implementing our design on the RISC-V Rocket core,
providing the Linux kernel support for it, and prototyping our full
design on an FPGA.
CCS CONCEPTS
• Security and privacy → Hardware security implementa-
tion.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3488019
Ajay Joshi
PI:EMAIL
Boston University
Boston, Massachusetts, USA
KEYWORDS
Hardware security, OS security, memory protection domains
ACM Reference Format:
Leila Delshadtehrani, Sadullah Canakci, William Blair, Manuel Egele, and Ajay
Joshi. 2021. FlexFilt: Towards Flexible Instruction Filtering for Secu-
rity. In Annual Computer Security Applications Conference (ACSAC
’21), December 6–10, 2021, Virtual Event, USA. ACM, New York, NY,
USA, 14 pages. https://doi.org/10.1145/3485832.3488019
1 INTRODUCTION
Today’s software is a complex mixture of trusted code written
in-house and untrusted code such as third-party libraries and ap-
plication plugins. The coexistence of trusted code with potentially
vulnerable or malicious untrusted code in the same process could
comprise the confidentiality and integrity of the trusted code. To
limit the effects of bugs and security vulnerabilities, a variety of
security solutions partition sensitive data and code into isolated
components. Researchers have leveraged various techniques includ-
ing Operating System (OS)-based [10, 44] and virtualization-based
techniques [7, 40, 46], hardware-based trusted execution environ-
ments [3, 23], and memory protection domains [32, 58, 61] to en-
force isolation.
To guarantee the integrity of the isolation, the above-mentioned
security solutions have to prevent an untrusted component from
accessing or modifying the isolated components. To this end, a
variety of prior work [3, 4, 14, 15, 24, 30, 32, 49, 58, 61, 65–67] faced
a common challenge, i.e., preventing the execution of various unsafe
instructions in untrusted parts of the code (either in user space or ker-
nel space). Such unsafe instructions could compromise the integrity
of the isolation mechanisms by modifying access permissions, dis-
abling protections, gaining higher privilege, etc. To prevent the ex-
ecution of such unsafe instructions, previous works have leveraged
various approaches such as Control-Flow Integrity (CFI) [14, 24, 49]
and binary scanning and binary rewriting [3, 4, 30, 32, 49, 61, 65, 67].
As the currently existing CFI solutions [21, 25, 31, 35, 45] have non-
trivial performance overhead (> 10%), leveraging CFI to prevent
the execution of unsafe instructions is expensive. Additionally, CFI
cannot simply be leveraged in self-modifying or dynamically gener-
ated code [58]. As shown by previous works, binary scanning and
binary rewriting approaches can filter unsafe instructions in static
code [32, 61]. However, an efficient implementation of binary scan-
ning and binary rewriting, especially for dynamically generated
code, is challenging.
646ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Leila Delshadtehrani, Sadullah Canakci, William Blair, Manuel Egele, and Ajay Joshi
To clarify the challenges involved in binary scanning and binary
rewriting for preventing the execution of unsafe instructions, con-
sider the case of memory protection keys. In recent years, various
processors including ARM [51], IBM Power [54], and Intel [55] pro-
vided hardware-assisted memory protection keys, an extension to
page-based memory permissions. Accordingly, a software developer
can associate a group of memory pages with the same protection
key to create a memory protection domain. Subsequently, the soft-
ware developer can update the access permission of all the pages
in the same domain by updating the corresponding permission bits
of the protection key. While ARM and IBM Power only allow the
OS to modify the corresponding permission of a protection key,
Intel MPK allows a user-space process to make this modification.
Intel MPK stores the corresponding permission bits of all the pro-
tection keys in a new thread-local register, called protection key
right register (PKRU). Modifying the permission bits of a protection
domain requires writing into PKRU leveraging a new user-space
instruction, called WRPKRU. The execution of the WRPKRU instruction
is fast but an untrusted component can gain access permission
to any protection domain by simply writing into PKRU through
executing the WRPKRU instruction.
To ensure that all the occurrences of WRPKRU instructions are
safe, various approaches such as Hodor [32] and ERIM [61] rely on
binary inspection and runtime binary rewriting. One of the main
challenges in ensuring the safety of WRPKRU occurrences through
binary inspection is the implicit (unintended) occurrences of the
instruction. Such implicit occurrences could be the result of the
WRPKRU instruction forming across the boundary between two con-
secutive instructions or as a sub-sequence of a longer instruction.
An attacker can perform a control-flow hijacking attack to jump
into the point that an implicit WRPKRU instruction occurs. To address
this challenge, Hodor leverages debug registers to trigger a hard-
ware watchpoint once an explicit or implicit WRPKRU is about to be
executed. A vetting mechanism at kernel level allows the execution
to continue only for safe occurrences of the WRPKRU instruction.
ERIM intercepts each executable page and scans through the page
for unsafe instructions; then, it enables the execute permission iff
no unsafe occurrences exist. Otherwise, ERIM implements a run-
time binary rewriting approach to rewrite the implicit occurrences
of unsafe instructions.
The above-mentioned challenges for restricting the occurrence
of WRPKRU instructions to safe locations indicate the requirement
for an efficient approach to filter unsafe instructions at runtime.
This requirement is not limited to memory protection domains,
WRPKRU instructions, or x86 processors. We observed that a num-
ber of isolation-based security solutions, on different processor
architectures, have to prevent the execution of various unsafe in-
structions in untrusted parts of the code. In the rest of this paper,
we refer to the unsafe instructions as target instructions that should
be filtered. Depending on the isolation mechanism, the target in-
structions could be privileged or unprivileged instructions. In x86
processors, other security solutions [30, 65] limit the execution of
target instructions such as privileged MOV CR0, MOV CR3, and VMRUN.
Prior work on ARM processors [3, 4, 67] prevent the occurrence of
target instructions such as MSR, LDC, and MCR in untrusted parts of
the code. Recent works leveraging memory protection domains on
RISC-V architecture [14, 15, 58] have to limit the execution of the
WRPKRU equivalent instruction.
The previous works are limited to filtering the execution of cer-
tain target instructions. In this paper, we strive to provide a gener-
alized solution for filtering target instructions. Such a generalized
solution should satisfy the following requirements: 1) flexibility to
be applicable to a variety of instructions, 2) efficiency to be applica-
ble at runtime, and 3) fine-granularity to be able to filter various
parts of the code. To this end, we propose FlexFilt, an efficient and
flexible hardware-assisted capability for runtime filtering of target
instructions at page granularity. FlexFilt provides the generalized
instruction filtering capability via two mechanisms, i.e., instruc-
tion protection domains and flexible hardware-level filters. FlexFilt
enables the software developer to create instruction protection
domains by assigning the same protection key to a group of exe-
cutable pages. At the hardware level, FlexFilt provides configurable
filters to prevent the execution of various user-defined instructions.
The hardware-level filters can then be associated with instruction
protection domains and subsequently prevent the execution of tar-
get instructions in memory pages assigned to the corresponding
domain. FlexFilt is an efficient hardware-assisted feature and incurs
negligible performance overhead for filtering target instructions
at runtime. FlexFilt satisfies all the previously mentioned require-
ments of a generalized instruction filtering solution. In addition
to filtering user-space instructions, FlexFilt is capable of filtering
privileged instructions (i.e., supervisor mode and hypervisor mode).
To demonstrate the feasibility of FlexFilt’s design, we leverage
the RISC-V open Instruction Set Architecture (ISA) [64] and imple-
ment FlexFilt on the RISC-V Rocket core [2]. To evaluate FlexFilt in
a realistic environment, we provide the OS support for our hard-
ware design and prototype our full design (including hardware, OS,
and user-space software) on the Xilinx Zedboard FPGA [52]. In
summary, our contributions are as follows:
• We propose FlexFilt, a flexible hardware-assisted feature,
which enables a software developer to efficiently prevent the
execution of various instructions at a page granularity.
• To demonstrate the feasibility of our design, we implement
a practical prototype, consisting of the RISC-V Rocket core
enhanced with FlexFilt and the Linux kernel support for
FlexFilt, on an FPGA.
• To illustrate the effectiveness of FlexFilt compared to binary
scanning approaches, we measure the overhead of scanning
JIT compiled bytes generated by V8 JavaScript engine while
browsing various webpages.
In the spirit of open science and to facilitate the reproducibil-
ity of our experiments, we will open-source our full design:
https://github.com/bu-icsg/FlexFilt.
2 MOTIVATION AND RELATED WORK
As mentioned before, a variety of previous works faced the chal-
lenge of preventing the execution of target instructions in untrusted
parts of the code. Table 1 lists these works, their target instructions,
and the approaches they used for filtering the instructions.
647FlexFilt: Towards Flexible Instruction Filtering for Security
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 1: Comparison of previous works that prevent the execution of target instructions at runtime.
Architecture
x86
ARM
RISC-V
Mechanism
ERIM [61]
Hodor [32]
libmpk [49]
Xu et al. [66]
Donky [58]
IMIX [24]
Fidelius [65]
Underbridge [30]
Silhouette [67]
TZ-PKR [3]
SKEE [4]
Donky [58]
SealPK [14]
FlexFilt
Target Instructions
WRPKRU, XRSTOR
WRPKRU
WRPKRU
WRPKRU
WRPKRU
LDC, MCR
MSR
N/A
N/A
Extended instruction (SMOV)
MOV CR0, MOV CR4, WRMSR, VMRUN, MOV CR3
WRPKRU, MOV CR3
Extended instruction (WRPKR)
Various instructions
Privilege Level
Filtering Approach
User
User
User
User
User
User
Binary inspection and rewriting
Binary scanning and hardware watchpoints
CFI or relying on an approach like ERIM
Relying on an approach like Hodor or ERIM