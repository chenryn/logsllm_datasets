/ 
Program.
cs）：
    private static void ShowChanges(int id, EntityEntry entity)
    {
      ShowChange(id, entity.Property("Title"));
      ShowChange(id, entity.Property("Publisher"));
    }
    private static void ShowChange(int id, PropertyEntry propertyEntry)
    {
      WriteLine($"id: {id}, current: {propertyEntry.CurrentValue}, " +
      $"original: {propertyEntry.OriginalValue}, " +
      $"modified: {propertyEntry.IsModified}");
  }
为了转换SQL Server中更新的TimeStamp属性的字节数组，以可视化输出，定义了扩
展方法StringOutput（代码文件ConflictHandlingSample / Program.cs）：
    static class ByteArrayExtension
    {
      public static string StringOutput(this byte[] data)
      {
        var sb = new StringBuilder();
        foreach (byte b in data)
        {
        sb.Append($"{b}.");
        }
        return sb.ToString();
      }
    }
当运行应用程序时，可以看到如下输出。时间戳值和图书ID在每次运行时都不同。
第一个用户把书的原标题sample book更新为新标题user 1 wins。IsModified属性给Title属性
返回true，但给Publisher属性返回false。因为只有标题改变了。原来的时间戳以1.1.209结
尾；更新到数据库中后，时间戳改为1.17.114。与此同时，用户2打开相同的记录；该书的
时间戳仍然是1.1.209。用户2更新该书，但这里更新失败了，因为该书的时间戳不匹配数
据库中的时间戳。这里会抛出一个DbUpdateConcurrencyException异常。在异常处理程序
中，异常的原因写入控制台，如程序的输出所示：
    user 1: updating id 17, timestamp 0.0.0.0.0.1.1.209.
    id: 17, current: user 1 wins, original: sample book, modified: True
    id: 17, current: Sample, original: Sample, modified: False
    user 1: updated 0.0.0.0.0.1.17.114.
    user 1: 1 record(s) updated while updating user 1 wins
    user 2: updating id 17, timestamp 0.0.0.0.0.1.1.209.
    id: 17, current: user 2 wins, original: sample book, modified: True
    id: 17, current: Sample, original: Sample, modified: False
    user 2 update failed with user 2 wins
    user 2 error: Database operation expected to affect 1 row(s) but actually aff
ected 0 row(s).
    Data may have been modified or deleted since entities were loaded.
    See http://go.microsoft.com/fwlink/? LinkId=527962 for information on
    understanding and handling optimistic concurrency exceptions.
    user 2 wins 0.0.0.0.0.1.1.209.
    id: 17, current: user 2 wins, original: sample book, modified: True
    id: 17, current: Sample, original: Sample, modified: False
    updated: user 1 wins
当使用并发性令牌和处理DbConcurrencyException时，根据需要可以处理并发冲突。
例如，可以自动解决并发问题。如果改变了不同的属性，可以检索更改的记录并合并更
改。如果改变的属性是一个数字，要执行一些计算，例如点系统，就可以在两个更新中递
增或递减值，如果达到极限，就抛出一个异常。也可以给用户提供数据库中目前的信息，
询问他要进行什么修改，要求用户解决并发性问题。不要要求用户提供太多的信息。用户
可能只是想摆脱这个很少显示的对话框，这意味着他可能会单击OK或Cancel，而不阅读
其内容。对于罕见的冲突，也可以编写日志，通知系统管理员，需要解决一个问题。
38.7 使用事务
第37章介绍了使用事务编程的内容。每次使用Entity Framework访问数据库时，都涉
及事务。可以隐式地使用事务或根据需要，使用配置显式地创建它们。此节使用的示例项
目以两种方式展示事务。这里，Menu、MenuCard和MenuContext类的用法与前面的
MenusSample项目相同。这个示例应用程序使用了以下依赖项和名称空间：
依赖项
    NETStandard.Library
    Microsoft.EntityFrameworkCore
    Microsoft.EntityFrameworkCore.SqlServer
名称空间
    Microsoft.EntityFrameworkCore
    Microsoft.EntityFrameworkCore.Storage
    System.Linq
    System.Threading
    System.Threading.Tasks
    static System.Console
38.7.1 使用隐式的事务
SaveChangesAsync方法的调用会自动解析为一个事务。如果需要进行的一部分变更失
败，例如，因为数据库约束，就回滚所有已经完成的更改。下面的代码片段演示了这一
点。其中，第一个Menu 
（m1）用有效的数据创建。对现有MenuCard的引用是通过提供
MenuCardId完成的。更新成功后，Menu m1的MenuCard属性自动填充。然而，所创建的
第二个菜单mInvalid，因为提供的MenuCardId高于数据库中可用的最高ID，所以引用了无
效的菜单卡。因为MenuCard和Menu之间定义了外键关系，所以添加这个对象会失败（代
码文件TransactionsSample / Program. cs）：
    private static async Task AddTwoRecordsWithOneTxAsync()
    {
      WriteLine(nameof(AddTwoRecordsWithOneTxAsync));
      try
      {
        using (var context = new MenusContext())
        {
        var card = context.MenuCards.First();
        var m1 = new Menu
        {
          MenuCardId = card.MenuCardId,
          Text = "added",
          Price = 99.99m
        };
        int hightestCardId = await context.MenuCards.MaxAsync(c => c.MenuCardId);
        var mInvalid = new Menu
        {
          MenuCardId = ++hightestCardId,
          Text = "invalid",
          Price = 999.99m
        };
        context.Menus.AddRange(m1, mInvalid);
        int records = await context.SaveChangesAsync();
        WriteLine($"{records} records added");
        }
      }
      catch (DbUpdateException ex)
      {
        WriteLine($"{ex.Message}");
        WriteLine($"{ex? .InnerException.Message}");
      }
      WriteLine();
    }
在调用AddTwoRecordsWithOneTxAsync方法，运行应用程序之后，可以验证数据库
的内容，确定没有添加一个记录。异常消息以及内部异常的消息给出了细节：
    AddTwoRecordsWithOneTxAsync
    An error occurred while updating the entries. See the inner exception for det
ails.
    The INSERT statement conflicted with the FOREIGN KEY constraint
    "FK_Menu_MenuCard_MenuCardId".
    The conflict occurred in database "MenuCards", table "mc.MenuCards", column '
MenuCardId'.
如果第一条记录写入数据库应该是成功的，即使第二条记录写入失败，也需要多次调
用SaveChangesAsync方法，如下面的代码片段所示。在AddTwoRecordsWithTwoTxAsync
方法中，第一次调用SaveChangesAsync插入了m1菜单对象，而第二次调用试图插入
mInvalid菜单对象（代码文件TransactionsSample / Program. cs）：
    private static async Task AddTwoRecordsWithTwoTxAsync()
    {
      WriteLine(nameof(AddTwoRecordsWithTwoTxAsync));
      try
      {
        using (var context = new MenusContext())
        {
        var card = context.MenuCards.First();
        var m1 = new Menu
        {
          MenuCardId = card.MenuCardId,
          Text = "added",
          Price = 99.99m
        };
        context.Menus.Add(m1);
        int records = await context.SaveChangesAsync();
        WriteLine($"{records} records added");
        int hightestCardId = await context.MenuCards.MaxAsync(c => c.MenuCardId);
        var mInvalid = new Menu
        {
          MenuCardId = ++hightestCardId,
          Text = "invalid",
          Price = 999.99m
        };
        context.Menus.Add(mInvalid);
        records = await context.SaveChangesAsync();
        WriteLine($"{records} records added");
        }
      }
      catch (DbUpdateException ex)
      {
        WriteLine($"{ex.Message}");
        WriteLine($"{ex? .InnerException.Message}");
      }
      WriteLine();
    }
运行应用程序，添加第一个INSERT语句成功，当然第二个语句的结果是
DbUpdateException。可以验证数据库，这次添加一个记录：
    AddTwoRecordsWithTwoTxAsync
    1 records added
    An error occurred while updating the entries. See the inner exception for det
ails.
    The INSERT statement conflicted with the FOREIGN KEY constraint
    "FK_Menu_MenuCard_MenuCardId".
    The conflict occurred in database "MenuCards", table "mc.MenuCards", column '
MenuCardId'.
38.7.2 创建显式的事务
除了使用隐式创建的事务，也可以显式地创建它们。其优势是如果一些业务逻辑失
败，也可以选择回滚，还可以在一个事务中结合多个SaveChangesAsync调用。为了开始一
个与DbContext派生类相关的事务，需要调用DatabaseFacade类中从Database属性返回的
BeginTransactionAsync方法。返回的事务实现了IDbContextTransaction接口。与DbContext
相关的SQL语句通过事务建立起来。为了提交或回滚，必须显式地调用Commit或Rollback
方法。在示例代码中，当达到DbContext作用域的末尾时，Commit完成，在发生异常的情
况下回滚（代码文件TransactionsSample / Program.cs）：
    private static async Task TwoSaveChangesWithOneTxAsync()
    {
      WriteLine(nameof(TwoSaveChangesWithOneTxAsync));
      IDbContextTransaction tx = null;
      try
      {
        using (var context = new MenusContext())
        using (tx = await context.Database.BeginTransactionAsync())
        {
        var card = context.MenuCards.First();
        var m1 = new Menu
        {
          MenuCardId = card.MenuCardId,
          Text = "added with explicit tx",
          Price = 99.99m
        };
        context.Menus.Add(m1);
        int records = await context.SaveChangesAsync();
        WriteLine($"{records} records added");
        int hightestCardId = await context.MenuCards.MaxAsync(c => c.MenuCardId);
        var mInvalid = new Menu
        {
          MenuCardId = ++hightestCardId,
          Text = "invalid",
          Price = 999.99m
        };
        context.Menus.Add(mInvalid);
        records = await context.SaveChangesAsync();
        WriteLine($"{records} records added");
        tx.Commit();
        }
      }
      catch (DbUpdateException ex)
      {
        WriteLine($"{ex.Message}");
        WriteLine($"{ex? .InnerException.Message}");
        WriteLine("rolling back...");
        tx.Rollback();
      }
      WriteLine();
    }
当运行应用程序时可以看到，没有添加记录，但多次调用了SaveChangesAsync方法。
SaveChangesAsync的第一次返回列出了要添加的一个记录，但基于后面的Rollback，删除
了这个记录。根据隔离级别的设置，回滚完成之前，更新的记录只能在事务内可见，但在
事务外部不可见。
    TwoSaveChangesWithOneTxAsync
    1 records added
    An error occurred while updating the entries. See the inner exception for det
ails.
    The INSERT statement conflicted with the FOREIGN KEY constraint
    "FK_Menu_MenuCard_MenuCardId".
    The conflict occurred in database "MenuCards", table "mc.MenuCards", column '
MenuCardId'.
    rolling back...
  注意： 使用BeginTransactionAsync方法，也可以给隔离级别提供一个值，指
定数据库中所需的隔离要求和锁。隔离级别参见第37章。
38.8 小结
本章介绍了Entity Framework Core的特性，学习了对象上下文如何了解检索和更新的
实体，以及变更如何写入数据库。还讨论了迁移如何在C#代码中用于创建和更改数据库
模式。至于模式的定义，本章论述了如何使用数据注释进行数据库映射，流利的API提供
了比注释更多的功能。
本章阐述了多个用户处理同一记录时应对冲突的可能性，以及隐式或显式地使用事
务，进行更多的事务控制。
下一章介绍如何使用Windows服务创建与系统一起自动启动的程序。可以在Windows
服务中使用Entity Framework。
第39章
Windows服务
本章要点
● Windows服务的体系结构
● 创建Windows服务程序
● Windows服务的安装程序
● Windows服务的控制程序
● Windows服务的故障排除
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● Quote服务器
● Quote客户端
● Quote服务
● 服务控制
39.1 Windows服务
Windows服务是可以在系统启动时自动打开（不需要任何人登录计算机）的程序。如
果需要在没有用户交互操作的情况下运行程序，或者在权限比交互式用户更大的用户下运
行程序，就可以创建Windows服务。Windows服务的例子有WCF宿主（假定由于某些原因
不能使用IIS）、缓存网络服务器中数据的程序，或者在后台重新组织本地磁盘数据的程
序。
本章首先讨论Windows服务的体系结构。接着创建一个托管网络服务器的Windows服
务，之后讨论Windows服务的启动、监控、控制和故障排除。
如前所述，Windows服务指的是操作系统启动时可以自动打开的应用程序。Windows
服务可以在没有交互式用户登录系统的情况下运行，在后台进行某些处理。
例如，在Windows Server上，系统网络服务应可以从客户端访问，无须用户登录到服
务器上。在客户端系统上，服务可以从Internet上获取新软件版本，或在本地磁盘上进行
文件清理工作。
可以把Windows服务配置为从已经过特殊配置的用户账户或系统用户账户上运行，该
用户账户的权限比系统管理员的权限更大。
  注意： 除非特别说明，否则把Windows服务简称为服务。
下面是一些服务的示例：
● Simple TCP/IP Services是驻留一些小型TCP/IP服务器的服务程序，如echo、daytime
和quote等。
● World Wide Web Publishing Service是IIS（Internet Information Server, Internet信息服
务器）的服务。
● Event Log服务用于把消息记录到事件日志系统中。