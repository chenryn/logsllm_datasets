      ENTRYPOINT ["", "", ..., ""] 
```
这里，代码术语的含义如下:
*   ``:这是可执行文件，必须在容器启动时运行
*   `, ..., `:这些是可执行文件的变量个数(零或更多)
在语法上，一个`Dockerfile`中可以有多个`ENTRYPOINT`指令。但是，构建系统将忽略除最后一条指令之外的所有`ENTRYPOINT`指令。换句话说，在多个`ENTRYPOINT`指令的情况下，只有最后一个`ENTRYPOINT`指令有效。
为了更好地理解`ENTRYPOINT`指令，让我们使用`ENTRYPOINT`指令创建一个映像，然后使用创建的映像启动一个容器。以下是`Dockerfile`用`ENTRYPOINT`指令给`echo`的一段文字:
```
######################################################## 
# Dockerfile to demonstrate the behavior of ENTRYPOINT 
######################################################## 
# Build from base image busybox:latest 
FROM busybox:latest 
# Author: Dr. Peter 
MAINTAINER Dr. Peter  
# Set entrypoint command 
ENTRYPOINT ["echo", "Dockerfile ENTRYPOINT demo"] 
```
现在，让我们使用`docker build`作为子命令和`entrypoint-demo`作为映像名称来构建一个 Docker 映像。`docker build`系统将从当前目录(`.`)中存储的`Dockerfile`读取指令并制作映像，如下所示:
```
$ sudo docker build -t entrypoint-demo .
```
构建好映像后，我们可以使用`docker run`子命令启动容器:
```
$ sudo docker run entrypoint-demo
Dockerfile ENTRYPOINT demo  
```
这里，容器将通过回显`Dockerfile ENTRYPOINT demo`字符串像可执行文件一样运行，然后它将立即退出。如果我们将任何额外的参数传递给`docker run`子命令，那么额外的参数将被传递给`ENTRYPOINT`命令。以下是使用`docker run`子命令的附加参数启动相同映像的演示:
```
$ sudo docker run entrypoint-demo with additional arguments
Dockerfile ENTRYPOINT demo with additional arguments  
```
现在，让我们看一个例子，其中我们用`--entrypoint`选项覆盖构建时间入口点应用，然后在`docker run`子命令中启动一个 shell ( `/bin/sh`)，如下所示:
```
$ sudo docker run -it --entrypoint="/bin/sh" entrypoint-demo
/ #  
```
### 健康检查说明
作为最佳实践，任何 Docker 容器都设计为仅运行一个流程/应用/服务，并且与快速发展的**微服务架构** ( **MSA** )唯一兼容。容器的生命周期与容器内运行的进程紧密相关。当容器内运行的进程由于任何原因崩溃或死亡时，Docker 引擎会将容器移动到停止状态。在容器内部运行的应用可能处于不健康的状态，为了有效地管理容器，这种状态必须外部化。在这里，`HEALTHCHECK`指令通过以规定的时间间隔运行健康监控命令(或工具)来监控容器化应用的健康状况。
`HEALTHCHECK`指令的语法如下:
```
HEALTHCHECK [] CMD  
```
这里，代码术语的含义如下:
*   ``:以规定的时间间隔执行`HEALTHCHECK`命令。如果命令退出状态为`0`，则认为容器处于健康状态。如果命令退出状态为`1`，则认为容器处于不健康状态。
*   ``:默认情况下，`HEALTHCHECK`命令每 30 秒调用一次，命令超时 30 秒，在声明容器不健康前重试三次。或者，您可以使用以下选项修改默认间隔、超时和重试值:
*   `--interval= [default: 30s]`
*   `--timeout= [default: 30s]`
*   `--retries= [default: 3]`
这里有一个`HEALTHCHECK`指令的例子:
```
HEALTHCHECK --interval=5m --timeout=3s  
  CMD curl -f http://localhost/ || exit 1 
```
如果一个`Dockerfile`中有多个`HEALTHCHECK`指令，只有最后一个`HEALTHCHECK`指令生效。因此，您可以覆盖基础映像中定义的运行状况检查。出于任何原因，如果您选择禁用基本映像中定义的运行状况检查，您可以使用`HEALTHCHECK`指令的`NONE`选项，如下所示:
```
HEALTHCHECK NONE 
```
### ONBUILD 指令
`ONBUILD`指令将构建指令注册到一个映像，当使用该映像作为其基础映像构建另一个映像时，该指令被触发。任何构建指令都可以注册为触发器，这些指令将在下游`Dockerfile`中的`FROM`指令之后立即被触发。因此，`ONBUILD`指令可用于将构建指令的执行从基础映像推迟到目标映像。
`ONBUILD`指令的语法如下:
```
ONBUILD  
```
这里，``是另一条`Dockerfile`构建指令，稍后会触发。`ONBUILD`指令不允许链接另一条`ONBUILD`指令。此外，它不允许`FROM`和`MAINTAINER`指令作为`ONBUILD`触发器。
这里有一个`ONBUILD`指令的例子:
```
ONBUILD ADD config /etc/appconfig 
```
### 停止信号指令
`STOPSIGNAL`指令使您能够为您的容器配置退出信号。它具有以下语法:
```
STOPSIGNAL  
```
这里，``或者是有效的信号名，如 SIGKILL，或者是有效的无符号信号号。
### SHELL 指令
`SHELL`指令允许我们覆盖缺省外壳，即 Linux 上的`sh`和 Windows 上的`cmd`。
`SHELL`指令的语法如下:
```
SHELL ["", "", ..., ""] 
```
这里，代码术语的含义如下:
*   ``:容器运行时使用的外壳
*   `, ..., `:这些是外壳的变量个数(零或更多)
### 那个。dockerignore 文件
在 *Docker 的集成映像构建系统*部分，您了解到`docker build`进程将向守护进程发送完整的构建上下文。在实际环境中，`docker build`上下文将包含许多其他工作文件和目录，这些文件和目录永远不会内置到映像中。然而，`docker build`系统仍然会将这些文件发送给守护进程。因此，您可能想知道如何通过不向守护程序发送这些工作文件来优化构建过程。Docker 背后的人也考虑过这个问题，并给出了一个非常简单的解决方案，使用`.dockerignore`文件。
`.dockerignore`文件是一个换行符分隔的文本文件，您可以在其中提供要从构建过程中排除的文件和目录。文件中的排除列表可以具有完全指定的文件/目录名和通配符。
下面的代码片段是一个示例`.dockerignore`文件，通过该文件，构建系统被指示排除`.git`目录和所有扩展名为`.tmp`的文件:
```
.git 
*.tmp 
```
## 浅谈 Docker 形象管理
正如我们在上一章和本章前面所看到的，有许多方法可以处理 Docker 映像。您可以使用`docker pull`子命令从公共存储库中下载完整的安装应用栈。否则，您可以手动使用`docker commit`子命令或自动使用`Dockerfile`和`docker build`子命令组合来创建自己的应用栈。
Docker 映像被定位为容器化应用的关键构建块，进而实现分布式应用，这些应用将部署在云服务器上。Docker 映像是分层构建的，也就是说，映像可以构建在其他映像之上。原始映像称为**父映像**，生成的映像称为**子映像**。基础映像是一个包，它包含应用的公共依赖项。对原始映像所做的每个更改都存储为一个单独的层。每次提交到 Docker 映像时，您将在 Docker 映像上创建一个新层，并且对原始映像所做的每个更改都将存储为单独的层。随着层的可重用性的提高，制作新的 Docker 映像变得简单快捷。您可以通过在`Dockerfile`中更改一行来创建一个新的 Docker 映像，并且不需要重建整个栈。
现在您已经了解了 Docker 映像中的图层，您可能想知道如何在 Docker 映像中可视化这些图层。嗯，`docker history`子命令是一个很好的可视化映像图层的工具。
这里，让我们看一个更好地理解 Docker 映像中的分层的实际例子。为此，让我们遵循以下步骤:
1.  这里，我们有`Dockerfile`带有在 Ubuntu 14.04 基础映像之上自动构建 Apache2 应用映像的指令。本章中先前制作和使用的`Dockerfile`的`RUN`部分将在本节中重复使用，如下所示:
```
      ########################################### 
      # Dockerfile to build an Apache2 image 
      ########################################### 
      # Base image is Ubuntu 
      FROM ubuntu:14.04 
      # Author: Dr. Peter 
      MAINTAINER Dr. Peter  
      # Install apache2 package 
      RUN apt-get update &&  
         apt-get install -y apache2 &&  
         apt-get clean 
```
2.  现在，使用`docker build`子命令从前面的`Dockerfile`创建一个映像，如下所示:
```
      $ sudo docker build -t apache2 .
```
3.  最后，让我们使用`docker history`子命令来可视化 Docker 映像中的图层:
```
      $ sudo docker history apache2
```
前面的子命令将在每一层`apache2` Docker 映像上生成详细报告，如下所示:
```
      IMAGE CREATED CREATED BY SIZE
 aa83b67feeba 2 minutes ago /bin/sh -c apt-get
 update && apt-get inst 35.19 MB c7877665c770 3 minutes ago /bin/sh -c #(nop) 
 MAINTAINER Dr. Peter  /usr/sbin/polic 194.5 kB 97fd97495e49 6 days ago /bin/sh -c #(nop) 
 ADD file:84c5e0e741a0235ef8 192.6 MB 511136ea3c5a 16 months ago 0 B 
```
这里`apache2`映像由十个映像层组成。最上面的两层，即带有`aa83b67feeba`和`c7877665c770`映像标识的层，是我们`Dockerfile`中`RUN`和`MAINTAINER`指令的结果。映像的其余八层将通过我们的`Dockerfile`中的`FROM`指令从存储库中取出。
## 编写 Dockerfile 的最佳实践
一个不争的事实是，在提升任何新技术的过程中，一套最佳实践总是扮演着不可或缺的角色。有一个写得很好的部分列出了制作`Dockerfile`的所有最佳实践。我们觉得这不可思议，因此，我们想为您分享它们。你可以在[https://docs.docker.com/articles/dockerfile_best-practices/](https://docs.docker.com/articles/dockerfile_best-practices/)找到他们。
## 摘要
构建 Docker 的形象是 Docker 技术的一个关键方面，以简化容器化的艰苦旅程。如前所述，Docker 倡议对容器化范式具有颠覆性和变革性，这种范式已经存在了一段时间。`Dockerfile`是制作胜任 Docker 影像最突出的一个，可以一丝不苟的跨用。我们已经演示了所有命令、它们的语法以及它们的使用技巧，以便为您提供所有易于掌握的细节，这将简化您的映像构建过程。为了证实每个命令的内在含义，我们提供了一系列例子。在下一章中，我们将讨论 Docker Hub，这是一个专门用于存储和共享 Docker 映像的商店，我们还将讨论它对容器化概念渗透到 IT 企业的深远贡献。