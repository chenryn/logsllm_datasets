它在 Debian 基础映像上安装了一些特定的工具(Ruby 工具 rake 和 bundler)。它创建一个新用户，将其添加到容器映像中，并通过从主机挂载`"/home"`目录来指定工作目录，这将在下一节中详细解释。
### 共享卷
在主机级别共享卷允许其他容器获取它们需要的共享内容。这有助于更快地重建 Docker 映像，或者在添加、修改或删除依赖项时。例如，如果我们正在创建前面提到的博客的主页部署，则唯一需要共享的目录是通过 Dockerfile 与该 web 应用容器共享的`/home/vkohli/src/repos/homepage`目录，方式如下:
```
  FROM vkohli/devbase 
          WORKDIR /home/vkohli/src/repos/homepage 
          ENTRYPOINT bin/homepage web 
```
为了创建博客的开发版本，我们可以共享文件夹`/home/vkohli/src/repos/blog`，所有相关的开发人员文件都可以驻留在该文件夹中。为了创建开发版本映像，我们可以从预先创建的`devbase`中获取基础映像:
```
FROM vkohli/devbase 
WORKDIR / 
USER root 
# For Graphivz integration 
RUN apt-get update 
RUN apt-get -y install graphviz xsltproc imagemagick 
       USER vkohli 
         WORKDIR /home/vkohli/src/repos/blog 
         ENTRYPOINT bundle exec rackup -p 8080 
```
### 开发工具容器
出于开发的目的，我们在开发和生产环境中有独立的依赖关系，它们很容易在某个时候混合在一起。容器可以通过单独打包来区分依赖关系。如下面的代码所示，我们可以从基础映像中派生开发工具容器映像，并在其上安装开发依赖项，甚至允许`ssh`连接，以便我们可以处理代码:
```
FROM vkohli/devbase 
RUN apt-get update 
RUN apt-get -y install openssh-server emacs23-nox htop screen 
# For debugging 
RUN apt-get -y install sudo wget curl telnet tcpdump 
# For 32-bit experiments 
RUN apt-get -y install gcc-multilib  
# Man pages and "most" viewer: 
RUN apt-get install -y man most 
RUN mkdir /var/run/sshd 
ENTRYPOINT /usr/sbin/sshd -D 
VOLUME ["/home"] 
EXPOSE 22 
EXPOSE 8080 
```
从前面的代码中可以看出，安装了开发过程中需要的基础工具`wget`、`curl`、`tcpdump`。甚至安装了允许`ssh`连接到开发容器的 SSHD 服务。
### 测试环境容器
在不同的环境中测试代码总是会简化过程，并有助于孤立地发现更多的错误。我们可以在一个单独的容器中创建一个 Ruby 环境来生成一个新的 Ruby shell，并使用它来测试代码库:
```
FROM vkohli/devbase 
RUN apt-get update 
RUN apt-get -y install ruby1.8 git ruby1.8-dev 
```
在列出的 Dockerfile 中，我们使用基础映像作为`devbase`，只需一个命令`docker run`的帮助，就可以通过使用从这个 Dockerfile 创建的映像来测试代码，轻松创建一个新的环境。
### 构建容器
我们在应用中涉及的构建步骤有时会很昂贵。为了克服这一点，我们可以创建一个单独的构建容器，它可以使用构建过程中所需的依赖关系。以下 Dockerfile 可用于运行单独的构建过程:
```
FROM sampleapp 
RUN apt-get update 
RUN apt-get install -y build-essential [assorted dev packages for libraries] 
VOLUME ["/build"] 
WORKDIR /build 
CMD ["bundler", "install","--path","vendor","--standalone"] 
```
`/build`目录是可以用来提供编译后的二进制文件的共享目录，也可以在容器中挂载`/build/source`目录来提供更新后的依赖关系。因此，通过使用构建容器，我们可以在单独的容器中分离构建过程和最终的打包部分。它仍然通过将前面的过程分解成独立的容器来封装过程和依赖关系。
### 安装容器
该容器的目的是将安装步骤打包在不同的容器中。基本上，这是为了在生产环境中提供容器的部署。
将安装脚本打包到 Docker 映像中的示例 Docker 文件如下所示:
```
ADD installer /installer 
CMD /installer.sh 
```
`installer.sh`可以包含在生产环境中部署容器的特定安装命令，还可以为代理设置提供 DNS 条目，以便部署内聚环境。
### 盒装服务容器
为了在一个容器中部署完整的应用，我们可以捆绑多个服务来提供完整的部署容器。在这种情况下，我们将 web 应用、API 服务和数据库捆绑在一个容器中。它有助于减轻各种独立容器相互连接的痛苦:
```
services: 
  web: 
    git_url: PI:EMAIL:vkohli/sampleapp.git 
    git_branch: test 
    command: rackup -p 3000 
    build_command: rake db:migrate 
    deploy_command: rake db:migrate 
    log_folder: /usr/src/app/log 
    ports: ["3000:80:443", "4000"] 
    volumes: ["/tmp:/tmp/mnt_folder"] 
    health: default 
  api: 
    image: quay.io/john/node 
    command: node test.js 
    ports: ["1337:8080"] 
    requires: ["web"] 
databases: 
  - "mysql" 
  - "redis" 
```
### 基础设施容器
正如我们在开发环境中谈到的容器使用，有一个大的类别丢失了-基础设施服务的容器使用，如代理设置，它提供了一个内聚的环境，以便提供对应用的访问。在下面提到的 Dockerfile 示例中，我们可以看到`haproxy`已安装，并提供了指向其配置文件的链接:
```
FROM debian:wheezy 
ADD wheezy-backports.list /etc/apt/sources.list.d/ 
RUN apt-get update 
RUN apt-get -y install haproxy 
ADD haproxy.cfg /etc/haproxy/haproxy.cfg 
CMD ["haproxy", "-db", "-f", "/etc/haproxy/haproxy.cfg"] 
EXPOSE 80 
EXPOSE 443 
```
`haproxy.cfg`文件是负责认证用户的配置文件:
```
backend test 
    acl authok http_auth(adminusers) 
    http-request auth realm vkohli if !authok 
    server s1 192.168.0.44:8084 
```
# 单核
Unikernels 将源代码编译成一个定制的操作系统，该系统只包含应用逻辑所需的功能，生成一个专用的单地址空间机器映像，从而消除不必要的代码。Unikernels 是使用*库操作系统*构建的，与传统操作系统相比，它具有以下优势:
*   **快速启动时间**:unikers 使资源调配高度动态化，可以在不到一秒钟的时间内启动
*   **占用空间小** : Unikernel 的代码库比传统的操作系统小，并且非常容易管理
*   **安全性提升**:由于没有部署不必要的代码，攻击面大幅减少
*   **细粒度优化**:unikers 是使用编译工具链构建的，并针对要使用的设备驱动程序和应用逻辑进行了优化
Unikernels 与微服务架构非常匹配，因为源代码和生成的二进制文件都可以很容易地进行版本控制，并且足够紧凑，可以重新构建。而另一方面，不允许修改虚拟机，只能对源代码进行更改，这既耗时又费力。例如，如果应用不需要磁盘访问和显示工具。Unikernels 可以帮助从内核中删除这个不必要的设备驱动程序和显示功能。因此，生产系统变得极简，仅打包应用代码、运行时环境和操作系统设施，这是不可变应用部署的基本概念，其中如果生产服务器中需要任何应用更改，则构建新映像:
![Unikernels](img/image_01_007.jpg)
从传统容器到基于 Unikernel 的容器的转变
容器和 Unikernels 是最适合彼此的。最近，Unikernel 系统已经成为 Docker 的一部分，这两种技术的协作将很快出现在 Docker 的下一个版本中。正如上图中所解释的，第一个图显示了打包一个支持多个 Docker 容器的虚拟机的传统方式。下一步显示了一个 1:1 的映射(每个虚拟机一个容器)，它允许每个应用是独立的，并提供更好的资源使用，但是为每个容器创建一个单独的虚拟机会增加开销。在最后一步中，我们可以看到 Unikernels 与当前现有 Docker 工具和生态系统的协作，其中容器将获得特定于其需求的内核低库环境。
在 Docker 工具链中采用 unikers 将加速 unikers 的进步，它将被广泛用作和理解为打包模型和运行时框架，使 unikers 成为另一种类型的容器。在为 Docker 开发人员进行 unikers 抽象之后，我们将能够选择使用传统的 Docker 容器或 Unikernel 容器来创建生产环境。
# 总结
在本章中，我们借助于应用和基于操作系统的容器研究了基本的容器化概念。本章中解释的它们之间的差异将明显帮助开发人员选择完全适合他们系统的容器化方法。我们已经介绍了 Docker 技术、它的优势以及 Docker 容器的生命周期。本章中解释的八种 Docker 设计模式清楚地展示了在生产环境中实现 Docker 容器的方法。在这一章的最后，介绍了 Unikernels 的概念，这是容器化领域未来的发展方向。在下一章中，我们将从 Docker 安装故障排除问题及其深层解决方案开始。