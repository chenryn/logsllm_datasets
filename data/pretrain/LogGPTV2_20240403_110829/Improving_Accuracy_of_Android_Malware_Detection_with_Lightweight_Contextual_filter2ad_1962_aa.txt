title:Improving Accuracy of Android Malware Detection with Lightweight Contextual
Awareness
author:Joey Allen and
Matthew Landen and
Sanya Chaba and
Yang Ji and
Simon Pak Ho Chung and
Wenke Lee
Improving Accuracy of Android Malware Detection with
Lightweight Contextual Awareness
Joey Allen, Matthew Landen, Sanya Chaba, Yang Ji,
Simon Pak Ho Chung, and Wenke Lee
Georgia Institute of Technology
ABSTRACT
In Android malware detection, recent work has shown that using con-
textual information of sensitive API invocation in the modeling of
applications is able to improve the classification accuracy. However,
the improvement brought by this context-awareness varies depend-
ing on how this information is used in the modeling. In this paper,
we perform a comprehensive study on the effectiveness of using the
contextual information in prior state-of-the-art detection systems.
We find that this information has been “over-used” such that a large
amount of non-essential metadata built into the models weakens the
generalizability and longevity of the model, thus finally affects the
detection accuracy. On the other hand, we find that the entrypoint
of API invocation has the strongest impact on the classification cor-
rectness, which can further improve the accuracy if being properly
captured. Based on this finding, we design and implement a light-
weight, circumstance-aware detection system, named “PIKADROID”
that only uses the API invocation and its entrypoint in the modeling.
For extracting the meaningful entrypoints, PIKADROID applies a
set of static analysis techniques to extract and sanitize the reachable
entrypoints of a sensitive API, then constructs a frequency model
for classification decision. In the evaluation, we show that this slim
model significantly improves the detection accuracy on a data set
of 23,631 applications by achieving an f-score of 97.41%, while
maintaining a false positive rating of 0.96%.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation; Mobile
platform security;
KEYWORDS
Malware detection, Android Security
ACM Reference Format:
Joey Allen, Matthew Landen, Sanya Chaba, Yang Ji, Simon Pak Ho Chung,
and Wenke Lee . 2018. Improving Accuracy of Android Malware Detection
with Lightweight Contextual Awareness. In Proceedings of 2018 Annual
Computer Security Applications Conference, San Juan, PR, USA, December
3–7, 2018 (ACSAC’18), 12 pages.
https://doi.org/10.1145/3274694.3274744
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-6569-7/18/12. . . $15.00
https://doi.org/10.1145/3274694.3274744
INTRODUCTION
1
The Android operating system has become the most popular mobile
OS with two billion monthly active devices [24]. Unfortunately,
the popularity of the Android OS and its feature-rich environment
have made it a popular target for malicious developers. Sixteen
million new malware samples were identified in the final quarter
of 2017 alone [33]. In spite of the counter-measurements by the
Anti-Virus industry as well as Google, Android malware is still
widely active and making multi-million dollar profits. For example,
LokiBot, a banking trojan, has created over two million dollars in
revenue by attacking the customers of 121 international and domestic
banks [33].
Due to the significance and popularity of the Android OS, there
has been a large body of research for Android malware detection
[2, 3, 5, 7, 10, 11, 15, 16, 21, 31, 52, 53, 55]. Several prior ap-
proaches have tried to provide efficient and scalable malware detec-
tion by analyzing the permissions used by an application [15, 22, 55].
Unfortunately, the set of permissions only capture what capabili-
ties an application has but not how they are used so, they cannot
be used to accurately identify malware. Moreover, benign applica-
tions tend to request more permissions than necessary [14], which
causes a high false-positive rate. To address this, several systems
have proposed to instead check the usage of critical APIs in the An-
droid framework [2, 5, 21]. Using critical APIs provides a more
complete, fine-grained perspective of the application’s behavior
compared to permissions because APIs cover a more complete
set of sensitive information [39]. Also, APIs have one-to-one as-
sociations with each sensitive source while each permission usu-
ally includes more than one API capabilities. However, API-based
systems must distinguish between how sensitive APIs are used in
malicious verses benign applications. Therefore, prior approaches
prune out many sensitive APIs that are found to be common in
benign and malicious apps which affects the accuracy of classi-
fication. For instance, DroidAPIMiner[2] does not consider the
TelephonyManager.getDeviceID API to be sensitive because it is
used by benign and malicious apps with similar frequency. Including
APIs like this results in higher false negatives rates. Instead, we find
the lightweight context in which a behavior is executed helps reveal
the true intension. For example, when a user presses the cancel
button on a dialog, malicious applications are 11 times more likely
to access a device’s ID via the TelephonyManager.getDeviceID API
than benign ones. Leveraging such contextual information makes
the classification of APIs more accurate, which has the chance to
improve the malware detection accuracy.
Several prior works, such as AppContext [52] and Droidsift [53]
propose to embed the contextual factors of the API invocation in
the modeling and classification. For example, AppContext ties a
210
ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
J. Allen et. al
variety of activation events, and behavioral information to the sensi-
tive API invocation, while Droidsift constructs a dependency graph
for modeling fine-grained contextual information. However, the
modeling of many contextual factors becomes challenging because
it requires intensive labeling effort and the detection accuracy is
degraded when too much non-essential contextual information is
included [41]. Additionally, it has been shown that context-based
systems, like AppContext, suffer from overfitting because they are
too tailored towards the training samples [51]. This issues makes
these models perform poorly on new samples of malware, espe-
cially from different time periods. To address this, leveraging an
abstraction-based approach to generalize program behavior has been
proposed. Prior work has shown this can reduce overfitting and
increase the lifetime of the trained model [31]. However, we find
that one limitation of abstracted-based approaches is that they in-
cur significant context loss which can reduce the performance of
the model. Through our experimental evaluation, we find that prior
abstraction-based approaches cannot maintain enough context to
identify malware that is near the decision boundary.
We rethink the necessity and effectiveness of using contextual
information and argue to reduce the amount of contextual factors
which are considered and focus only on the most influential factors
which we define as lightweight context. The goal of lightweight
context is to create a more generalizable, contextual representation
of the Android app which is less prone to overfitting, as this is a
limitation of prior context-based systems [52, 53]. We argue that
lightweight context can create this more generalizable representa-
tion of the behavior of an Android application which is not tailored
to a specific malware family. To validate this argument, we first
study the composition of contextual information extracted by exist-
ing approaches and evaluate their effectiveness in the modeling and
classification of Android applications. The results of our study show
that compared to other contextual factors used in prior work [52],
the entrypoint provides the most informative features for classifica-
tion. An entrypoint is defined as a callback that is defined by the
application, but called by the framework in response to some event
involving the user, the device, or the environment.
We implement a lightweight, context-aware malware detection
system for Android apps and evaluate it against previous state-of-the-
art detection systems to show the performance improvement using
datasets spanning multiple years. Our proposed system, PIKADROID,
uses lightweight context to achieve highly-accurate and efficient An-
droid malware detection. PIKADROID develops contextual aware-
ness by answering the question of how a sensitive API is invoked
in a much simplified way. PIKADROID leverages this awareness to
infer when sensitive behavior is being used inappropriately which
essentially distinguishes legitimate uses of sensitive behavior from
malicious intent. Specifically, PIKADROID discovers what Android
entrypoint is used to invoke the particular sensitive API, applies a set
of reachability and frequency analysis techniques for refining, and
then learns how to distinguish under what circumstances malicious
applications invoke sensitive behavior. By leveraging lightweight,
context-based Android malware detection, PIKADROID is capable
of detecting Android malware samples with a f-score of 97.41% and
a false positive rate of 0.96%. Next, we compare PIKADROID to
prior abstraction-based approaches and find that PIKADROID can
outperform prior approaches [31] in classifying malware samples
that are 1-5 years older than the training samples.
This paper makes the following major contributions:
• Case study of context-aware, detection approaches. We
study the effectiveness of existing context-aware, modeling
and classification approaches and show these models may
have too heavy contextual information which results in lower
accuracy and labeling complexity. Additionally, we find the
pair of entrypoint and sensitive API is the most informative
contextual feature for distinguishing legitimate and illegiti-
mate uses of sensitive behavior.
• A lightweight, context-aware approach. We build a light-
weight, context-aware system, PIKADROID, that considers
the probability of the sensitive behaviors conditioned on the
current entrypoint using reachability and frequency analysis.
• Comprehensive Evaluation. Our evaluation shows sizable
improvements of accuracy over existing approaches. We
show that PIKADROID achieves an f-score of 97.41% while
maintaining a false positive rating of 0.96% when detect-
ing malware from the same time period. Specifically, we
find that compared to prior frequency-based approaches like
DroidAPIMiner [2], PIKADROID achieves a 2.2x reduction in
false-positives on average. Next, we compare PIKADROID to
prior abstraction-based approaches and find that PIKADROID
outperforms prior approaches [31] in classifying malware
samples that are 1-5 years older than the training samples.
Paper Organization. The rest of the paper is organized as follows:
§2 discusses the motivation for lightweight context and provides a
background on the issues related to context-based systems. §3 and
§4 presents the design and implementation of PIKADROID respec-
tively. §5 discusses the dataset and §6 provides the results from our
extensive evaluations. Finally §7 discusses the related work and §8
concludes.
2 RETHINKING CONTEXTUAL AWARENESS
In this section, we motivate our work by demonstrating existing
issues related to context-based, malware detection systems [51–53].
Next, we demonstrate the benefits of lightweight context and its
ability to generalize an application’s behavior.
2.1 Less Effective Contextual Information
Some current context-based, malware detection systems embed an
app’s contextual information into a graph to be used later for classi-
fication [53]. One limitation of context, graph-based approaches is
they use too much contextual information and create unique features
that cause detection to be less effective. Because of this, dependency
graphs have been shown to be extremely effective at detecting similar
variants of the same malware-family, but they are not good at dis-
tinguishing the exact dependencies in a graph that define what truly
makes this behavior malicious. This leads to contextual-confusion,
which occurs when non-informative dependencies become interwo-
ven with the malware’s essential behavior.
2.1.1 Non-essential Dependencies. Essential dependencies
are the contextual dependencies that provide information related to
the malware’s core behavior, while residual dependencies are con-
textual dependencies that are non-essential to the malicious behavior
211Improving Accuracy of Android Malware Detection with Lightweight Contextual Awareness
ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
Method Type
Activity %
(Entrypoints)
Receiver %
(Entrypoints)
Intent_params%
Service %
(Entrypoints) Database % Device %
UI %
(Entrypoints) Network %
CLASS_LOADING
REFLECTION_METHOD
ACCESS_COARSE_LOCATION
ACCESS_NETWORK_STATE
ACCESS_WIFI_STATE
BROADCAST_STICKY
CAMERA
CHANGE_WIFI_STATE
DISABLE_KEYGUARD
GET_ACCOUNTS
INTERNET
READ_PHONE_STATE
RECORD_AUDIO
RESTART_PACKAGES
VIBRATE
WAKE_LOCK
WRITE_SETTINGS
47
39
22
27
34
43
68
21
21
59
43
21
32
51
43
44
53
8
5
0
2
9
2
0
12
0
1
6
2
1
5
4
4
1
3
10
20
6
9
2
0
9
0
4
5
4
0
3
6
4
8
13
3
11
15
21
30
0
33
79
7
12
35
63