on a “reconstructed” tree. Definitionally, a given key pair is
well-formed if and only if this reconstructed tree represents a
generalized point function; the servers can appeal to Bullet 3
of Corollary 1 (in Section II-A) to check this.
1 ) with nodes 𝑣 (𝑖) = 𝑣 (𝑖)
0 , 𝑣 (𝑖)
𝑏 ) ∈ F
To see how this works, we first look at (non-private)
node traversal in Boyle-Gilboa-Ishai DPFs. To traverse from
(with |𝑖| = 𝑗) to its 𝐵th child, 𝑣 (𝑖∥𝐵)
𝑣 (𝑖)
𝑏 as
2𝜆−2 × F2 × F2. From here:
(𝑠 (𝑖)
, ·, flag(𝑖)
𝑏
1) compute (child(𝑖∥0)
) ← 𝐺2×(𝑠 (𝑖)
as (𝑠 (𝑖∥𝐵)
2) parse child(𝑖∥𝐵)
as (cw( 𝑗), 𝑡 ( 𝑗)
0 ) ∈ F
1 , 𝑡 ( 𝑗)
𝑏 ← 𝑠 (𝑖∥𝐵)
3) compute 𝑠 (𝑖∥𝐵)
𝑏 ); and then
+ (𝑡 ( 𝑗)
𝐵 · flag(𝑖)
(cid:66) (𝑠 (𝑖||𝐵)
, ·, flag(𝑖∥𝐵)
4) output 𝑣 (𝑖∥𝐵)
, first parse 𝑣 (𝑖)
𝑏 ∥00);
2𝜆−2 × F2 × F2 and cw(𝑗)
𝑏 ←
2𝜆 × F2 × F2 as the
𝑏 +(cid:0)cw( 𝑗) · (1+ flag(𝑖)
𝑏 )(cid:1) and flag(𝑖∥𝐵)
, ·,𝑇 (𝑖∥𝐵)
) ∈ F
2𝜆−2 × F2 × F2;
, child(𝑖∥1)
) ∈ F
𝑇 (𝑖∥𝐵)
𝑏
𝑏
𝑏
𝑏
𝑏
𝑏
𝑏
𝑏
𝑏
𝑏
𝑏
child.5
5For a comprehensive treatment of this construction, we defer to the
original paper by Boyle et al. [6; §3.2.2].
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
71959
)
𝑡
𝑟 0 𝑠 1 +
𝑠 0 ,
( 𝑟 0 ,
([𝑥]0 − [𝑦]0 + 𝑟0, [𝐵]0 + 𝑠0)
server 2
g
(𝑟
1,𝑠
1,𝑟
0−𝑡)
1𝑠
([𝑥]1 − [𝑦]1 + 𝑟1, [𝐵]1 + 𝑠1)
[𝑧]0 (cid:66) [𝑥]0 + [𝐵]0
g
server 0
(cid:0)[𝑥]0 − [𝑦]0 + ([𝑥]1 − [𝑦]1 + 𝑟1)(cid:1)
([𝑥]0, [𝑦]0), [𝐵]0
−𝑟0([𝐵]1 + 𝑠1) + 𝑟0𝑠1 + 𝑡
Output: ( ¯𝑥0, ¯𝑦0) (cid:66) ([𝑧]0, [𝑥]0 + [𝑦]0 − [𝑧]0)
g
server 1
(cid:0)[𝑥]1 − [𝑦]1 + ([𝑥]0 − [𝑦]0 + 𝑟0)(cid:1)
([𝑥]1, [𝑦]1), [𝐵]1
−𝑟1([𝐵]0 + 𝑠0) + 𝑟1𝑠0 − 𝑡
[𝑧]1 (cid:66) [𝑥]1 + [𝐵]1
Output: ([¯𝑥]1, [¯𝑦]1) (cid:66) ([𝑧]1, [𝑥]1 + [𝑦]1 − [𝑧]1)
Fig. 2: (2 + 1)-party realization of the conditional swap functionality ([¯𝑥], [¯𝑦]) ← FSWAP
1
0 , 𝑣 (𝑖)
0 , 𝑣 (𝑖)
0 , 𝑣 (𝑖)
1 ) and consider the node 𝑣 (𝑖) (cid:66) 𝑣 (𝑖)
0 + 𝑣 (𝑖)
1 ) is a 0-pair; and
1 ) is a 1-pair.
Notice that whether or not to apply cw( 𝑗) depends entirely
on flag(𝑖); consequently, if corresponding nodes induced by
a plausible key pair ever collide, then so too must all of
their descendants. In the spirit of Definition 3, we call such
colliding-node pairs 0-pairs; we likewise call non-colliding
pairs 1-pairs if either (i) they are at the leaf layer, or (ii) their
children comprise both a 0-pair and a 1-pair. The next
theorem is a direct consequence of these definitions.
Theorem 1. Suppose (dpf0, dpf1) is a plausible key pair
inducing (𝑣 (𝑖)
in
the reconstructed tree. The following both hold:
1) 𝑣 (𝑖) is a 0-node if and only if (𝑣 (𝑖)
2) 𝑣 (𝑖) is a 1-node if and only if (𝑣 (𝑖)
Our (2+1)-party audit protocol combines Theorem 1 with
Corollary 1 to check the well-formedness of a given (plau-
sible) key pair: Given their respective keys together with
a bitwise sharing of the (purported) distinguished input 𝑖,
the servers (i) traverse to both children of the root using
the above procedure, (ii) reconstruct the (1 − 𝐵(1))th child
to ensure it is a 0-node, and then (iii) recurse on the
height-(ℎ − 1) tree rooted at the (𝐵(1))th child.
If any (1 − 𝐵(𝑗))th child along the path from the root to
the leaf layer is not of type 0, then 𝑖 does not define a 1-
path in the reconstructed tree and the servers reject the key
pair; otherwise, as per Bullet 3 of Corollary 1, the servers
conclude that (dpf0, dpf1) constitutes a well-formed DPF with
distinguished input 𝑖.
4) MPC-based auditing: The (2 + 1)-party audit protocol
implements the strategy just described via alternating appli-
cations of the oblivious PRG (§V-A1) and conditional swap
(§V-A2) functionalities, woven together with some additional
Du-Atallah multiplications (§II-B1).
For each 𝑏 = 0, 1, server 𝑏 receives as input (i) its DPF key
dpf𝑏 (cid:66) (𝑣 (𝜀)
, cw(1), . . . , cw(ℎ)) and (ii) a (2, 2)-additive share
[𝑖]𝑏 (cid:66) ([𝐵(1)]𝑏, . . . , [𝐵(ℎ)]𝑏) of the (purported) distinguished
input 𝑖. Server 2 assists with the computation but receives
no input and produces no output.
𝑏
To begin, servers 0 and 1 compare CW sequences to ensure
they are auditing a plausible key pair; if so, server 𝑏 uses its
inputs and 𝐺2× to non-obliviously traverse to both children of
(cid:0)([𝑥], [𝑦]), [𝐵](cid:1).
𝑏 )(cid:1)
, ·, flag(1)
𝑏
the root; i.e., it computes
𝑏 ) (cid:66)(cid:0)(𝑠 (0)
𝑏
(𝑣 (0)
𝑏
, 𝑣 (1)
, ·, flag(0)
𝑏 ), (𝑠 (1)
via Steps (1)–(4) from Section V-A3, and then it secret shares
both halves of the output with server (1 − 𝑏).
Define 𝑖0 = 𝜀 and, for each 𝑗 = 1, . . . , ℎ, define 𝑖𝑗 =
𝑖𝑗−1∥𝐵( 𝑗) and ¯𝑖𝑗 = 𝑖𝑗−1∥(1 − 𝐵( 𝑗)). (Thus, 𝑖𝑗
is the length-𝑗
prefix of 𝑖 and ¯𝑖𝑗 is the length-( 𝑗 − 1) prefix of 𝑖 followed
by an incorrect
𝑗 th bit.) Upon receiving its shares from
server (1−𝑏), server 𝑏 now holds both ([𝑣 (𝑖0∥0)
]𝑏) and
([𝑣 (𝑖0∥0)
]𝑏).
]𝑏, [𝑣 (𝑖0∥1)
1
Enlisting the help of server 2, for each 𝑗 = 1, . . . , ℎ, servers
0 and 1 then:
1) invoke FSWAP for each 𝑏 = 0, 1 to produce
], [𝑣 (𝑖𝑗−1∥1)
]), [𝐵( 𝑗)](cid:1);
(cid:0)([𝑣 (𝑖𝑗−1∥0)
]𝑏, [𝑣 (𝑖0∥1)
- ([𝑣 (𝑖𝑗)
0
1
0
𝑏
𝑏
- [𝑣 (𝑖𝑗)
𝑏 ], [𝑣 (¯𝑖𝑗)
𝑏 ] as ([𝑠 (𝑖𝑗)
𝑏 ]) ← FSWAP
2) reconstruct 𝑣 (¯𝑖𝑗)(cid:66) 𝑣 (¯𝑖𝑗)
3) for each 𝑏 = 0, 1, parse
4) invoke FPRG for each 𝑏 = 0, 1 to produce
0 + 𝑣 (¯𝑖𝑗)
1 and reject if 𝑣 (¯𝑖 𝑗)≠ 0;
𝑏 ], ·, [flag(𝑖𝑗)
𝑏 ]);
]) ← FPRG([𝑠 (𝑖𝑗)
], [child(𝑖𝑗 ∥1)
5) for each 𝑏 = 0, 1 and 𝐵 = 0, 1, parse
]);
], ·, [𝑇 (𝑖𝑗 ∥𝐵)
𝑏
);
, 𝑡 ( 𝑗+1)
0
6) parse cw( 𝑗+1) as (cw( 𝑗+1), 𝑡 ( 𝑗+1)
1
7) for each 𝑏 = 0, 1 and 𝐵 = 0, 1, compute
] +(cid:0)cw( 𝑗+1) · (𝑏 + [flag(𝑖𝑗)
𝑏 ])(cid:1),
- ([child(𝑖𝑗 ∥0)
] as ([𝑠 (𝑖𝑗 ∥𝐵)
- [child(𝑖𝑗 ∥𝐵)
] ← [𝑠 (𝑖𝑗 ∥𝐵)
𝑏 ]∥00);
𝑏
𝑏
𝑏
𝑏
𝑏
] ← [𝑇 (𝑖𝑗 ∥𝐵)
] + (𝑡 ( 𝑗+1)
𝐵
· [flag(𝑖𝑗)
𝑏 ]); and,
8) finally, for each 𝑏 = 0, 1 and 𝐵 = 0, 1, set
𝑏
- [𝑠 (𝑖𝑗 ∥𝐵)
- [flag(𝑗∥𝐵)
𝑏 ← ([𝑠 (𝑖𝑗 ∥𝐵)
- 𝑣 (𝑖𝑗 ∥𝐵)
𝑏
𝑏
𝑏
], ·, [flag(𝑖𝑗 ∥𝐵)
]).
𝑏
They accept if they did not reject in Step 2 for any 𝑗.
We note that both functionalities FPRG and FSWAP consist
exclusively of (perfectly simulatable) Du-Atallah multiplica-
tions and non-interactive linear operations (and are, there-
fore, trivial to simulate); moreover, with the sole exceptions
of comparing CWs and reconstructing the 𝑣 (¯𝑖𝑗) in Step 2, all
remaining steps likewise consists exclusively of Du-Atallah
multiplications and linear operations. The reconstruction in
Step 2 yields no information unless 𝑣 (¯𝑖𝑗) ≠ 0, in which case
the servers learn that the 𝑗 th node along the purported 1-
path is incorrect. It is easy to verify that if the key pair
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
81960
is indeed well-formed with distinguished input 𝑖, then the
servers always accept; conversely, if the key pair is not a DPF
with distinguished input 𝑖, then the existence of some prefix
𝑖𝑗 of 𝑖 such that 𝑣 (¯𝑖𝑗) is not a 0-node follows contrapositively
from Corollary 1. In this case, the servers will reject in Step 2
when traversing from 𝑣 (𝑖𝑗−1) to 𝑣 (𝑖𝑗). We have thus proved the
following theorem.
Theorem 2. The (2 + 1)-party auditing protocol is complete
and perfectly sound. Moreover, the view of any semi-honest
party in an accepting run of the (2+1)-party auditing protocol
is perfectly simulatable.
B. SNIP-based auditing
The preceding section described a (2 + 1)-party computa-
tion using which servers 0 and 1 can (with assistance from
a semi-honest server 2) efficiently check the well-formedness
of their respective Boyle-Gilboa-Ishai DPF keys. We now
explain the conversion of this (2+1)-party computation into a
zero-knowledge argument based on MPC-in-the-head.
The high-level idea is for the prover, who holds dpf0 and
dpf1 and the distinguished input 𝑖, to simulate (2 + 1)-party
audit and then commit to the (unidirectional) communication
channels over which the servers exchange messages in the
simulation. From here, the verifiers challenge the prover to
open subsets of these commitments for inspection.
1) MPC-in-the-head with multiple verifiers: A critical dif-
ference between our arguments and other zero-knowledge
arguments constructed in the MPC-in-the-head paradigm
stems from (i) our use of a (2 + 1)-party computation secure
against a single passive corruption, combined with the fact
that (ii) the private inputs to servers 0 and 1 in the underlying
MPC include the private inputs to servers 0 and 1 in Sabre
(i.e., dpf0 and dpf1, respectively). Consequently, server 𝑏 can
scrutinize the view of either server 𝑏 or server 2 from a given
simulation, but never both—and it can never scrutinize the
view of server (1−𝑏). This fact all but rules out sound “single-
verifier” arguments, as a cheating prover could always, e.g.,
confine inconsistencies to transcripts that the verifier is not
allowed to scrutinize.
We circumvent this issue by leveraging two or more
verifiers that each examine a different subset of transcripts.
The argument is accepted if and only if all verifiers (i) receive
identical channel commitments from the prover, and (ii) find
no inconsistencies in the views they scrutinize. Definition-
ally, such “multi-verifier” MPC-in-the-head arguments are
equivalent to secret-shared non-interative proofs (SNIPs) with
a (modestly) generalized zero-knowledge property: whereas
Corrigan-Gibbs and Boneh’s SNIP definition [10; §4.1] insists
that the view of any proper subset of verifiers be simulatable,
“multi-verifier MPC-in-the-head” SNIPs inherit their simu-
latability requirements from the access structures governing
privacy in the underlying MPC. In the case of Sabre’s (2+1)-
party auditing, the requirement is that the view of any given
verifier be simulatable. When there are just two verifiers,
this requirement coincides with the one originally proposed
by Corrigan-Gibbs and Boneh.
2) 3-verifier SNIP auditing: The 3-verifier SNIP audit proto-
col employs (2+1)-party auditing while eliminating the need
for (almost all) interaction among the servers. Specifically,
upon sampling its DPF keys, the prover simulates a single
run of the (2 + 1)-party audit protocol from Section V-A4,
committing to the ordered sequence of messages on each
(unidirectional) simulated communication link among the
three parties. Let 𝑀 𝑎→𝑏 denote the ordered sequence of
messages sent from party 𝑎 to party 𝑏 in the simulation,
and let 𝐻 𝑎→𝑏 (cid:66) Hash(𝑀 𝑎→𝑏) for some cryptographic hash
function Hash: {0, 1}∗ → {0, 1}𝜇 (our implementation uses
SHA256 truncated to 𝜇 = 128 bits).
Notice that (dpf0, 𝑀 1→0, 𝑀 2→0) suffices to reconstruct the