the battery voltage reaches approximately 4.2 V, the second stage,
known as constant voltage charging, will begin. During this phase,
the supplied current drops off to limit the maximum voltage level
of the battery. Once the battery SoC has reached 100%, the charger
will provide a topping charge to make up for any discharging and
return the SoC to 100% [40].
As a result of these charging stages, the amount of current drawn
by a phone from a charger heavily depends on the battery SoC and
may not be affected by how much power the phone consumes.
For example, when a phone’s battery is at a low state of charge,
corresponding to constant current charging, the amount of power
the phone consumes will not significantly affect its overall current
draw. This is because the current draw is already at its maximum
without the phone consuming any power. Any power consumed
by the phone reduces the current charging the battery but does
not affect the current draw. On the other hand, during constant
voltage charging, the power consumption of the phone will reduce
the battery voltage and a larger current will be drawn to offset this.
When the phone battery is fully charged, no current flows into the
battery and the amount of power drawn from the charger is a direct
reflection of the power consumed by the phone.
2.3 Power Side-Channel Attacks
Side-channel attacks are methods to acquire sensitive information
through unintended secret-dependent variations in physical be-
haviors. The information leaked from a side-channel attack is a
024Time(s)02505007501000Current(mA)zoom.us024Time(s)02505007501000Current(mA)wikipedia.orgSession 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea653Figure 3: Threat model demonstrating a power side-channel
attack by a compromised public charging station.
assumed to have any malicious software and this threat model does
not depend on any particular software vulnerability. Additionally,
this type of attack does not require any physical tampering of the
target device or battery.
3.2 Experimental Setup
The high-level idea of the wireless power side-channel attack is
similar to that of the traditional wired power side-channel attack.
However, wireless charging interfaces do not have physical wire
connections and are likely more susceptible to noise. In that sense,
the main technical contributions of this paper lie in experimental
studies that demonstrate that wireless power side-channel attacks
are feasible in the mobile phones of today and their capabilities are
comparable to those of wired power side-channel attacks.
Here we briefly describe the experimental setup that we used.
The experiments are designed to understand the capabilities and
limitations of the wireless power side channels:
• Does the wireless power side channel leak enough informa-
tion to infer activities on a mobile device even with noise in
the wireless interface? Are the measurements repeatable?
• How is the wireless power side channel impacted by the
• How does the wireless power side channel compare to the
battery level?
wired power side channel in terms of leakage?
Current Trace Collection Circuit. The DC delivered to either a
5 W Adafruit Qi Wireless Charging Transmitter or a 10 W Max
Anker Wireless Charging Pad from a USB AC adapter was sampled
by placing an INA219 High Side DC Current Sensor in series with
the VCC wire of the Micro-USB cable that powered the transmitters.
This is depicted in Figure 4. An Arduino Micro sampled the current
sensor at a frequency of 700 Hz (500 Hz in Sections 5.6-5.8). The
cost of the entire current trace collection circuit used in this work
is less than $30.
Example Current Traces. Figure 5 demonstrates that like the USB
charging side channel, the wireless charging side channel also leaks
enough information to distinguish different websites. Additionally,
we find that the collected current traces are repeatable across differ-
ent trials indicating that the activity visible in the traces is a direct
result of loading a particular website. In all cases, the websites take
(a) Overview of current trace monitoring.
(b) Photo of setup with the Adafruit 5 W transmitter.
Figure 4: The current trace collection setup used in all exper-
iments.
a variable amount of time to load, and once fully loaded, the current
drawn by the charging transmitter returns to a steady level.
Phone Configuration. The attack is performed on an Apple iPhone
11 (2019) running iOS 14 and a Google Pixel 4 (2019) running
Android 11 which are both capable of wireless charging with Qi-
certified chargers up to powers of 7.5 W and 11 W respectively.
When the iPhone 11 traces were collected without noise, an out-
line for the phone was placed around the coil so that it could be
positioned consistently above the transmitter across every trace.
Otherwise, both phones were placed at various orientations while
remaining centered enough to properly charge.
3.3 Impact of Battery Level
Figure 6 shows how the wireless charger’s current draw varies as
the charging phone’s battery level increases. The results indicate
that the charging profiles of a wireless charger mirror those of a
wired charger [18]. At a low SoC, the current draw is relatively fixed
except for a high-frequency component coming from the wireless
interface. Then, the power draw gradually decreases as the battery
state of charge increases.
Compromised Public Charging StationWireless Charging TransmitterPower SupplyMalicious Current MonitorCurrent Trace with Side-Channel LeakageUntampered Victim Phone4 cmTrained Classifier/InferenceWireless Charging TransmitterGNDVIN –SDA SCL VCC GNDVCC +5 VVIN+INA219 Current SensorMicrocontrollerIUSB AC AdapterVINGNDPrimary CoilCurrent Sensor and MicrocontrollerTransmitting Circuit5 V Input PowerSession 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea654Figure 7: The average current consumption vs iPhone 11
state of charge for five different activities.
current assumption. The reason for this is that when the phone’s
battery is fully charged, the amount of power delivered by the wire-
less transmitter is solely determined by the power the phone is
currently using as it cannot deliver more charge to a battery that
is already at maximum capacity. If the battery is not fully charged,
the power consumption of an app running on the phone may not
dominate the power draw from the charger, as much of it will be
used to charge the battery.
Even if the average power consumption does not leak enough
information to distinguish different activities at a lower battery
level, a trace of dynamic power consumption over time can reveal
far more information. For all experiments in our evaluation section,
except for Section 5.8 where different battery levels were examined,
current traces were collected automatically beginning when the
device’s battery was full. During the duration traces were collected,
the device’s state of charge fell but always remained above 90%. In
general, we found that battery-powered mobile devices are more
susceptible to power side-channel attacks when the battery state of
charge is high. The exact amount of information leaked depends on
the charging algorithms used by a victim device. Our experiments
in Section 5 suggest that even with time-series data, the iPhone 11
leaks little information when the battery charge level is below 80%.
4 WEBSITE FINGERPRINTING ATTACK
4.1 Attack Overview
The attacker seeks to utilize collected power data to identify the
webpages being loaded in a mobile browsing application by a vic-
tim as they wirelessly charge their phone. As established by the
mobile power side-channel attacks previously discussed, loading a
website on a smartphone can affect its power consumption patterns.
When the phone battery is near full charge, the power delivered
to the wireless charging transmitter is directly proportional to the
fluctuations in activity on the phone and can be recorded by a
compromised public wireless charging station.
A set of training data can be collected by the repeated loading
of websites onto a charging device in this manner. This data can
then be preprocessed and fed to a website fingerprinting classifier
for training and validation. After training, the model can classify
new power data collected from victims by compromised charging
Figure 5: Current traces demonstrating the activity leaked
when automatically loading webpages on an iPhone 11.
Figure 6: Current delivered by a 5 W Qi charger/battery state
of charge vs charging time for an iPhone 11. The constant
current and constant voltage charging stages are identified.
Figure 7 shows how the average current consumption of a wire-
lessly charging phone varies as it executes different processes. The
experiment was carried out at 8 different battery levels. While
the results demonstrate that different processes consume different
amounts of power on average while wirelessly charging, a clear
differentiation between activities only occurred when the SoC was
high. When the state of charge is less than or equal to 95%, the
activities were generally indistinguishable by the metric of average
024Time(s)400600Current(mA)reddit.com024Time(s)reddit.com024Time(s)400600Current(mA)ofﬁce.com024Time(s)ofﬁce.com024Time(s)400600Current(mA)twitch.tv024Time(s)twitch.tv00:00:0001:23:2002:46:4004:10:00TimeSpentCharging(hh:mm:ss)406080100StateofCharge(%)300400500600700Current(mA)Constant CurrentConstant  Voltage20406080100BatteryStateofCharge(%)200400600800AverageCurrent(mA)PhoneOffScreenOffLockScreenHomeScreenCPUBenchmarkSession 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea655Table 1: 1D CNN model architecture where the duration of
the windowed input trace is 1 second (699 samples). This
window is split into three slices so that the LSTM layer can
learn the chronological relationship between the features
from each slice.
Layer Type
0
1
2
3
4
5
6
7
8
9
10
11
Input Layer
TimeDistributed(Conv1D)
TimeDistributed(MaxPooling1D)
TimeDistributed(Conv1D)
TimeDistributed(MaxPooling1D)
TimeDistributed(Conv1D)
TimeDistributed(MaxPooling1D)
TimeDistributed(Flatten)
LSTM Layer
Dropout Layer
Fully-Connected Layer
Fully-Connected Layer
Output Shape
(3,233,1)
(3,229,128)
(3,114,128)
(3,110,192)
(3,55,192)
(3,51,300)
(3,25,300)
(3,7500)
(900)
(900)
(900)
(50)
stations. This victim data will then be similarly preprocessed to
form the testing data, which if classified correctly, will reveal an
individual’s private browsing activity. This attack is performed
on untampered wireless charging transmitters, but a malicious
transmitter designed for these attacks could provide more accurate
traces.
4.2 Current Trace Collection
In the case of the iPhone 11, the mobile Safari browser connects
to the Safari development tool, Web Inspector, on a Mac computer.
The computer then runs a script that sequentially loads a set of
websites on the iPhone up to 50 times. We collect separate data
for the wireless and wired chargers. Trace collection on the Pixel
4 followed a similar process except that the Chrome browser and
Chrome Developer Tools were used to initiate webpage loading.
The current trace corresponding to the first 10 seconds of loading a
website is recorded and between loading each site, the script waits 4
seconds. This script also automatically initializes the data collection
to ensure that all power traces are synchronous and aligned. The
top 20 and 50 non-adult websites from the Alexa Top Sites in United
States list [17] were examined in this attack. All websites we visit in
this experiment are listed in Table 7 and utilize a secure connection
via HTTPS which is encrypted with TLS.
For nearly all configurations, we collect testing traces with the
intent to mirror standard device operation. This included setting
the phone’s brightness and volume at a constant level (although no
websites visited automatically played audio) and enabling Bluetooth
and cellular data. The exception to this is in Section 5.6, where we
collect test traces with volume, Bluetooth, and cellular data disabled.
For all traces, notifications on the devices were disabled to prevent
calls from interrupting the data collection script. The Pixel 4 did not
have a SIM card inserted, so it did not have cellular data enabled.
4.3 Classification Algorithm
For feature extraction, we broke each current trace into segments
that represented 1 second of the original trace, with 97.5% over-
lap. These segments were acquired by applying a sliding window
algorithm to the overall current trace. We selected this feature du-
ration because many of the identifiable features that distinguished
each trace were less than a second long. Training on many small
segments rather than entire traces helped to increase the amount
of training data available and reduced overfitting by making our
model more shift-invariant. Each trace in the test set is broken into
segments as was done for the training data, and each segment’s
classification is cast as a vote for classifying the overall test trace.
The final trace label was assigned using a majority voting scheme.
A 64/16/20 training/validation/testing split was used.
Deep neural networks act as both feature extractors and classi-
fiers, which can make attacks more successful than traditional tech-
niques. Additionally, convolutional neural networks (CNNs) [20,
34, 45] incorporate translation invariance, which allows them to
recognize features even if they are translated to different time po-
sitions. Although our current traces were collected automatically,
the loading time of pages sometimes is delayed randomly due to
website traffic or other causes.
We chose the LSTM layer for this classification problem because
it is a recurrent neural network layer that can learn the order
dependence within data. Given that the segments the network
examines are 250-350 time steps in length, the ability of the classifier
to learn order dependence would allow it to identify the presence of
multiple features within a single segment. The data we collected was
a one-dimensional time series and while loading a website, many
events such as executing JavaScript and loading images will always
be executed by the phone in the same order. In this way, the LSTM
layer complements the convolutional layers in our architecture: the
convolutional layers extract features and the LSTM layer learns
their order dependence.
A 1D CNN, the architecture of which is detailed in Table 1, is
trained as a classifier on these segments and was implemented in the
Keras [8] software package. Our architecture is a modified version
of a 1D CNN that was used for human activity recognition [7].
This model was chosen as a base because it was designed for multi-
output classification, had a foundational architecture that was easy
to build on, and proved resilient to overfitting.
The topology of our CNN is three convolutional layers followed
by a long short-term memory (LSTM) layer [35], a fully connected
layer, and a Softmax layer with one output for each website. Every
convolutional layer used ReLU activation [1], had a convolutional
window of size 5, and was followed by a max-pooling layer with a
window of size 2 and a stride of 2. Each window was split into three
equal-length temporal slices to allow the LSTM layer to update its
weights based on the chronological relationship it learned between
the features from each slice. The CNN layers were wrapped in a
TimeDistributed layer which is a layer that applies the same input
operation across all time slices constructed from each window.
There are 128 filters in the first convolutional layer, 192 in the
second, and 300 in the third. The network also uses a dropout layer
with a frequency of 50% to further reduce overfitting by randomly
dropping nodes and regularizing the network.
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea656Table 2: Rank-1 and rank-2 accuracy (%) for 1D CNN model
when classifying 20 websites with a fully charged iPhone 11.
Table 3: Rank-1 and rank-2 accuracy (%) for 1D CNN model
when classifying 20 websites with a fully charged Pixel 4. All
traces were collected under normal operation conditions.
Current Trace Type
Noiseless Wireless Rank-1
Wireless Rank-1
Noiseless Wired Rank-1
Noiseless Wireless Rank-2