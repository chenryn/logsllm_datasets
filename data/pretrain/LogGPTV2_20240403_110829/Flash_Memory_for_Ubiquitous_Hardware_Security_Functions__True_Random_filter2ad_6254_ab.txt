noise can be seen as the “gold-standard” for random number 
generation because the output of quantum events cannot be 
predicted. As Flash memory cells scale to smaller technology 
nodes, the RTN effect will become stronger. Moreover, RTN 
behavior will still exist with increasing process variation and 
at extremely low temperatures.  
B.  Noise Extraction from Digital Interface 
As digital devices, Flash memory is designed to tolerate 
analog  noise;  noise  should  not  affect  normal  memory 
operations. In order to observe the noise for random number 
generation,  a  Flash  cell  needs  to  be  in  an  unreliable  state 
between well-defined erase and program states. Interestingly, 
we found that Flash cells can be put into the in-between state 
using  the  standard  digital  interface.  In  a  high  level,  the 
approach first erases a page, issues a program command, and 
then issues a reset command after an appropriate time period 
to abort the program. This procedure leaves a page partially 
programmed  so  that  noise  can  affect  digital  outputs.  We 
found  that  the  outcome  of  continuously  reading  a  partially 
programmed bit oscillates between 1 and 0 due to noise.  
Figure 2. Thermal noise in Flash memory (time domain). 
For Flash memory in practice, experiments show that two 
types  of  noise  coexist:  thermal  noise  and  RTN.  Thermal 
noise  is  white  noise  that  exists  in  nearly  all  electronic 
devices. RTN can be observed only if a surface trap exists, 
the RTN amplitude is larger than that of thermal noise, and 
the sampling frequency (speed for continuous reads) is high 
enough. If any of these three conditions is not satisfied, only 
thermal noise will be observed as in Figure 2. In the case of 
thermal noise, a bit oscillates between the two states quickly, 
and the power spectral density (PSD) indicates white noise.  
(a) 
(b) 
Figure 3. RTN with thermal noise in Flash memory. (a) Time domain. (b) 
Moving average of 29 points on the time domain. 
35
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:10 UTC from IEEE Xplore.  Restrictions apply. 
In  the  case  that  the  RTN  amplitude  is  comparable  to 
thermal  noise,  a  combination  of  RTN  and  thermal  noise  is 
observed  as  shown  in  Figure  3.  This  is  reflected  by  the 
density  change  of  1s  in  the  continuous  reading.  A  moving 
average  on  the  time  domain  helps  to  visualize  the  density 
change.  The  PSD  of  the  result  shows  1/f2  spectrum  at  low 
frequencies and becomes flat at high frequencies. 
Figure 4. RTN in Flash memory (time domain). 
In  some  cases,  the  RTN  amplitude  is  very  high  and 
dominates  thermal  noise.  As  a  result,  only  RTN  behaviors 
are visible through digital interfaces for these bits. As shown 
in Figure 4, continuous reads show clear clusters of 1s and 0s 
in  the  time  domain.  The  power  spectral  density  (PSD)  of 
these bit sequences shows a clear RTN pattern of 1/f2.  
(a) 
(b) 
Figure 5. (a) Distribution of time in the programmed state.  
(b) Distribution of time in the erased state. 
For  a  bit  with  nearly  pure  RTN  behavior,  we  further 
validated  that  the  error  pattern  corresponds  to  RTN  by 
plotting the distributions of up and down periods. As shown 
in  Figure  5,  both  up  time  and  down  time  nicely  fit  an 
exponential  distribution 
expected.  Overall,  our 
experiments show that both RTN and thermal noise exist in 
Flash  memory  and  can  be  observed  through  a  digital 
as 
36
interface.  While  both  noise  types  can  be  used  for  random 
number generation, we focus on RTN, which is more robust 
to temperature changes. 
C.  Random Number Generation Algorithms 
In  Flash  memory  devices,  RTN  manifests  as  random 
switching  between  the  erased  state  (consecutive  1s)  and 
programmed  state  (consecutive  0s).  At  a  high-level,  our 
Flash  random  number  generator  (RNG)  identifies  bits  with 
RTN  behavior,  either  pure  RTN  or  RTN  combined  with 
thermal noise, and uses a sequence of time in the erased state 
(called up-time) and the time in the programmed state (called 
down-time)  from  those  bits.  In  order  to  produce  random 
binary outputs, the RNG converts the up-time and down-time 
sequence into a binary number sequence, and applies the von 
Neumann  extractor  for  de-biasing.  We  found  that  thermal 
noise itself is random and does not need to be filtered out. 
Algorithm I  Overall Flash RNG algorithm 
Erase a block; 
Num = 0; 
do { 
Partially program a page for T; 
Num++; 
Read Nbytes in a page N times, and record a  
trace for each bit – trace[bit]; 
For each bit in Nbytes, not selected yet 
  If (CheckRTN(trace[bit]) == true) { 
      Selected[bit] = yes; 
      NumProgram[bit] = Num; 
    } 
End for 
} repeat until most bits are programmed. 
ProgramSelectBits(Selected); 
Read  selected  bits  M  times,  and  record  up-
time and down-time; 
For each bit 
  ConvertToBinary(rawdata); 
End for 
Algorithm  I  shows  the  overall  RNG  algorithm.  To 
generate  random  numbers  from  RTN,  the  first  step  is  to 
identify bits with RTN or both RTN and thermal noise. To 
do  this,  one  block  in  Flash  memory  is  erased  and  then 
multiple  incomplete  programs  with  the  duration  of  T  are 
applied.  After  each  partial  program,  a  part  of  the  page  is 
continuously  read  N times  and  the  outcome  is  recorded  for 
each  bit.  In  our  experiments,  we  chose  to  read  the  first  80 
bits (10 bytes) in a page for 1,000 times. For each bit that has 
not  been  selected  yet,  the  algorithm  checks  if  RTN  exists 
using CheckRTN() and marks the bit location if there is RTN. 
As an optimization, the algorithm also records the number of 
partial  programs  when  a  bit  is  selected.  The  algorithm 
repeats  the process  until  all bits are  checked  for  RTN. The 
second step is to partially program all of the selected bits to 
an  appropriate  level  so  that  they  will  show  RTN  behavior. 
Finally, the algorithm reads the selected bits M times, records 
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:10 UTC from IEEE Xplore.  Restrictions apply. 
a  sequence  of  up-time  and  down-time  for  each  bit,  and 
converts the raw data to a binary sequence.  
Algorithm II  Determine whether there is RTN in a bit 
If trace[bit] has over 98% 1/0s 
Return false; 
End if  
Calculate the power spectrum density (PSD); 
Convert PSD to the log scale in both x-y; 
If  PSD  slope  is  always   Tfreq) 
Return RTN 
End if  
If PSD slope is  Tfreq) 
Return RTN-Thermal 
End if 
The  function  CheckRTN()  in  Algorithm  II  determines 
whether there is RTN in a bit based on a trace from N reads. 
The algorithm first filters out bits that almost always (more 
than 98%) produce one result, either 1 or 0. For the bits with 
enough noise, the algorithm uses the power spectral density 
(PSD) to distinguish RTN from thermal noise; PSD for RTN 
has  a  form  of  1/f2  at  a  high  frequency.  To  check  this 
condition, the algorithm computes the PSD, and converts it 
to a log-scale in both x and y axes. If the result has a slope 
less  than  Tslope  (we  use  -1.5,  the  ideal  value  is  -2)  for  all 
frequencies higher than Tfreq (we use 200Hz), the algorithm 
categorizes the bit as RTN only. If the PSD has a slope less 
than  Tslope  for  any  interval  larger  than  than  Invl (we  use 
0.2)  at  a  high  frequency,  the  bit  is  categorized  as  a 
combination of RTN and thermal noise. 
Algorithm III  Program selected bits to proper levels where 
RTN could be observed. 
For each selected bit 
Do (NumProgram[bit]-K) partial programs; 
do { 
  Partially program the bit for T; 
  Read the bit N times; 
  Find Max and Min for moving averages; 
  If Max > TMax and Min < TMin  
    Break; 
  End if 
} repeat up to L times 
End for 
The  function  ProgramSelectBits()  in  Algorithm  III 
programs selected bits to a proper level where RTN can be 
observed. Essentially, the algorithm aims to take each bit to 
the point near where they were identified to have RTN. The 
number of partial programs that were required to reach this 
point before were recorded in NumProgram[Bit]. For each 
selected  bit,  the  algorithm  first  performs  partial  programs 
with the duration of T based on the number recorded earlier 
(NumProgram[Bit]-K). Then, the algorithm performs up to 
L  more  partial  program  operations  until  a  bit  shows  RTN 
behavior. The RTN behavior is checked by reading the bit N 
times, and see if the maximum of moving averages is greater 
than a threshold (TMax = 0.7) and the minimum is less than 
another threshold (TMin = 0.3).  
Algorithm  IV  Convert  the  raw  data  to  binary  random 
sequence. 
If the bit has both RTN and thermal noise 
For each up/down-time in raw data 
  Output = LSB(up/down-time); 
End for 
End if 
If the bit has only RTN 
  do { 
  For each up/down-time in raw data 
    Output = LSB(up/down-time); 
    Shift right up/down-time by one bit; 
  End for 
} repeat until all up/down time are zero; 
End if 
Perform von Neumann de-biasing 
Finally,  the  function  ConvertToBinary()  converts  the 
raw  data  to  a  binary  random  sequence.  For  bits  with  both 
RTN and thermal noise, the up-time and down-time tend to 
be  short.  So  only  the  LSBs  of  these  numbers  are  used. 
Essentially, for every up-time and down-time, the algorithm 
produces  1  if  the  time  is  odd  and  0  otherwise.  Effectively, 
this  is  an  even-odd  scheme.  For  bits  with  perfect  RTN 
behavior, up-time and down-time tend to be longer and we 
use  more  LSBs  from  the  recorded  up/down-time.  In  this 
case,  we  first  produce  a  bit  based  on  the  LSB,  then  the 
second LSB, the third LSB, and so on until all extracted bits 
become  0.  Finally,  for  both  methods,  we  apply  the  von 
Neumann de-biasing method. The method takes two bits at a 
time,  throws  away  both bits  if  they  are identical,  and  takes 
the  first  bit  if  different.  This  process  is  described  in 
Algorithm IV. 
The stability of the bits in the partially programmed state 
is also important. We define the stability as how long a bit 
stays in the partially programmed state where RTN behavior 
can be observed. This is determined by the retention time of 
the  Flash  memory  chip  and  the  amplitude  of  the  RTN 
compared  to  the  designed  noise  margin.  Assume  the 
amplitude  of  the  RTN  is  Ar,  the  noise  margin  of  Flash 
memory is An, and the Flash retention time is 10 year, then 
the  stable  time  for  random  number  generation  after  partial 
programming  will  be  roughly  Ts=Ar/An*10  years.  This 
means  that  after  time  Ts,  a  bit  needs  to  be  reset  and 
reprogrammed. In our experiments, the bit that is shown in 
Figure 5 was still showing ideal RTN behavior even after 12 
hours. 
37
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:10 UTC from IEEE Xplore.  Restrictions apply. 
IV.  DEVICE FINGERPRINTS 
This  section  describes  techniques  to  generate  unique 
fingerprints from Flash memory devices. 
A.  Sources of Uniqueness 
Flash memory is subject to random process variation like 
any other semiconductor device. Because Flash is fabricated 
for  maximum  density,  small  variations  can  be  significant. 
Process  variation  can  cause  each  bit  of  a  Flash  memory  to 
differ  from  its  neighbors. While  variation  may  affect  many 
aspects  of  Flash cells, our  fingerprinting  technique  exploits 
threshold  voltage  variations.  Variations  in  doping,  floating 
gate  oxide  thickness,  and  control-gate  coupling  ratio  can 
cause  the  threshold  voltage  of  each  transistor  to  vary. 
Because  of  this  threshold  voltage  variation,  different  Flash 
cells will need different times to be programmed. 
B.  Extracting Fingerprints 
In this paper, we introduce a fingerprinting scheme based 
on partial programming. We repeatedly partially program  a 
page on a Flash chip. After each partial program, some bits 
will have been programmed enough to flip their states from 1 
to 0. For each bit in the page, we record the order in which 
the bit flipped. Pseudo-code is provided in Algorithm V. In 
our  experiments,  T  is  chosen  to  be  29.3us.  A  short  partial 
program  time  provide  a  better  resolution  to  distinguish 
different bits with the cost of increased fingerprinting time. 
We  do  not  enforce  all  bits  to  be  programmed,  in  order  to 
account for the possibility of faulty bits. 
Algorithm V  Extract the order in which bits in a page are 
reach the programmed state. 
Choose a partial programming time T (below 
the rated program time).  
Nbits = number of bits in one page 
Order = 1;  
Initialize BitRank[Nbits] to 0. 
do { 
    Partially program a page for T; 
    For all programmed bits do 
        BitRank[programmed bit] = Order; 
    End for 
    Order = Order + 1; 
} repeat until most (99%) bits in the page 
are programmed  
C.  Comparing Fingerprints 
The  fingerprints  extracted  from  the  same  page  on  the 
same  chip  over  time  are  noisy  but  highly  correlated.  To 
compare fingerprints extracted from the same page/chip and 
different  pages/chips,  we  use 
the  Pearson  correlation 
coefficient [5], which is defined as 