- Remote VAs have lower latency than the primary VA, leading to a negligible performance penalty
Security Evaluation
- A single cloud provider can host remote VAs at multiple data centers with sufﬁcient route diversity
- Measurement experiments with ethical BGP hijacks enable evaluation with knowledge of ground truth
- Simulation experiments can sweep a wide range of attack scenarios for a systematic evaluation
Section
3
3
4.2
4.2
4.2
4.1
5, 6
5
6
Table 3: Signiﬁcant lessons learned that show multi-vantage-point domain control validation can operate successfully at Internet
scale in a production environment.
The VA resolves the requested domain to IP addresses
using a recursive DNS resolver colocated with the VA. The
VA performs HTTP, DNS, or TLS based domain control
validation as speciﬁed by RFC 8737 [47]. In HTTP and TLS
based validations, the VA uses DNS to look up an A or AAAA
record for the requested domain, and initiates an HTTP or
TLS2 connection to the domain’s web server. In DNS based
validations, the VA checks for the validation response in a
DNS TXT record for the requested domain.
Overall, in a CA service, certiﬁcate issuance involves
complex interactions between different system components.
A minor modiﬁcation to the ACME protocol standard or the
existing Boulder implementation may affect the reliability and
security of the CA. Therefore, when designing the multiple
vantage point validation system, we want to modify neither
the ACME protocol nor the non-VA components in Boulder,
and minimize the changes to the existing VA component.
3 Multi-Vantage-Point Validation Design
Below we outline our design of multiVA, an incrementally
deployable domain validation system that leverages multiple
vantage points to mitigate BGP attacks against CAs. We ﬁrst
discuss our threat model and security goal. After that we
specify how our design complies with CA/Browser Forum
policies without requiring auditing on remote data centers.
Then, we discuss how we simplify management by using a
single cloud provider to host vantage points. Next, we present
our method for scalable and secure communication with
vantage points. We also introduce our conﬁgurable quorum
policy that can balance the trade-off between security and
2To avoid a cyclic dependency, the TLS challenge does not require a
publicly-trusted certiﬁcate but instead checks for the presence of a speciﬁed
value in the Application-Layer Protocol Negotiation ﬁeld of the TLS server
hello message as a way of demonstrating the customer has control of the
domain being validated [46].
Figure 4: Boulder with a single VA (A) and multiple VAs (B).
authority then asks the CA to sign the certiﬁcate and returns
the signed certiﬁcate (or error messages if the validation fails)
to the ACME client through the web front end.
Single-VA domain control validation. During domain
validation, Let’s Encrypt challenges the client to demonstrate
its control of the domain(s) requested in the certiﬁcate. When
the client is ready for the challenge and asks Let’s Encrypt to
initiate the domain validation challenge, the request is directed
to one of the available data centers of Let’s Encrypt by a CDN
layer in front of Boulder. A randomly selected VA instance
within the data center performs the domain validation. Note
that though there could be many VAs in different data centers,
only one VA is selected to perform domain validation for a
given domain.
4314    30th USENIX Security Symposium
USENIX Association
Domain’s web serverDomain owner’sACME clientACMEACMEWeb Front EndValidationVADomain’s web serverDomain owner’s ACME clientACMEACMEWeb Front EndValidationRemote VARemote VAValidationValidation(A)(B)RACA…VARACA…benign failures. Last, we present our phased deployment
strategy that Let’s Encrypt used to deploy our design in their
live production environment.
Threat model and security goal. We consider an adversary
that has control of a single malicious AS. The adversary
aims to obtain a bogus certiﬁcate for a victim domain by
launching BGP attacks against an IP preﬁx associated with
that domain, and hijacking domain control validation trafﬁc
between the CA and the preﬁx. Under this threat model, we do
not consider adversaries that maliciously control components
of the CA or multiVA (e.g., intentionally misbehaving vantage
points), or attempt to exploit non-BGP related vulnerabilities
in the domain control validation process (e.g., vulnerabilities
in DNS lookups [23], off-path attacks [30], implementation
bugs, and misconﬁgurations). We design multiVA to improve
the resilience of domains against BGP attacks during domain
control validation.
Also, we focus on security against equally-speciﬁc BGP
attacks where the adversary maliciously announces the same
preﬁx as the victim (as opposed to a sub-preﬁx). This is
appropriate since 1) sub-preﬁx attacks are not viable against
all preﬁxes (like those announced as /24s); 2) sub-preﬁx
attacks can be prevented by deployed technologies like
RPKI [24]3; 3) sub-preﬁx attacks are signiﬁcantly more
visible allowing them to be quickly detected (and even
mitigated [45]) with BGP monitoring. We intend for multiVA
to complement ongoing research on BGP monitoring use by
CAs [21]).
Satisfying CA/Browser Forum compliance without sacri-
ﬁcing manageability. The CA/Browser Forum governs the
operations of publicly trusted CAs, and imposes requirements
(e.g., physical security and access requirements) on CAs
that may constrain the deployment of multi-vantage-point
validation (see CA/Browser Forum Baseline Requirements
[25] Section 5). Under a naive system, all the validation
authorities (or VAs) would require independent security
audits, increasing the cost of adding VAs. The cloud
provides a logical location for additional VAs that can
signiﬁcantly improve manageability while offering many
beneﬁcial features such as geographic diversity. However,
independent security audits and physical access to the cloud
infrastructure may not be easily obtained.
To resolve this conﬂict, multiVA utilizes the concept
of primary and remote validation authorities, as shown in
Figure 4(B). A primary VA is located in a data center that
is fully compliant with the CA/Browser Forum Baseline
Requirements and, based on the current requirements, is
authorized to validate a certiﬁcate independently without any
information from other vantage points. For a CA who plans
to upgrade to multiVA, the primary VA would be the existing
VA being used by the CA. A remote VA can be deployed in a
3Even in partial deployment, RPKI can limit the spread of a sub-preﬁx
attack and allow multiVA to detect it using multiple vantage points.
network or machine managed by a third party (e.g., the cloud).
As a key deployment insight, multiVA requires that:
If
the primary VA’s validation fails, the customer’s
validation request fails. If the primary VA’s validation
succeeds, the primary VA must consider the validation
results of the remote VAs, and the validation request only
succeeds if a speciﬁed number of remote VAs’ validations
have succeeded.
Thus, all certiﬁcates signed under multiVA are a subset
of the certiﬁcates that would be signed without multiVA. By
denying certiﬁcates whenever validation from the primary
VA fails, we limit our auditing requirements to the primary
VA, maintaining compliance with the CA/Browser Forum
Baseline Requirements.
Using a single cloud provider for manageability. Even
without security audits or physical access to remote data
centers, using multiple data centers with different cloud
providers would be difﬁcult for a CA to manage. Each cloud
provider has different billing policies and requires a separate
cost analysis, along with requiring different tooling for the
Site Reliability Engineering (SRE) team. We resolve this
by hosting all multiVA VAs in a single cloud provider. Our
security analysis (§6) suggests even only using a single cloud
provider (Amazon Web Services in our case), multiVA does
achieve a signiﬁcant level of route diversity. Using a single
cloud provider signiﬁcantly improves the manageability of
multiVA, and reduces the implementation burden of multi-
vantage-point domain validation. 4
Communicating securely with remote validation author-
ities. Each component in multiVA is associated with a
certiﬁcate bound to a speciﬁc role (e.g., primary or remote
VAs), and communicates with other components using
gRPC [7] over mutually-authenticated TLS for conﬁdentiality,
authorization, and authentication. By examining certiﬁcates
and the associated roles, a component can conﬁdently
determine the legitimacy of components it communicates
with. For instance, the primary VA will not accept fraudulent
communications from nodes pretending to be remote VAs.
Besides, using gRPC saves round trips between the primary
and the remote VAs. In the gRPC-based setup, the primary
VA sends one RPC message to the remote VA which in
return sends back a validation result (see appendix A.1 for
a description of the RPC messages and API calls used in
multiVA). One validation only involves one round trip of
communication between the primary and remote VAs. An
alternative choice is VPN, but it may incur additional round
trips and introduce more latency than gRPC. We demonstrate
that multiVA introduces negligible latency compared to single-
VA domain validation in §4.1.
4The billing arrangements with AWS were handled independently of
the contributing authors by members of the Let’s Encrypt SRE team. Our
estimate of the cost of operating vantage points in AWS is roughly $100 per
month per vantage point (not including SRE costs).
USENIX Association
30th USENIX Security Symposium    4315
·108
6
4
2
)
s
n
o
i
l
l
i
M
0
0
1
(
s
t
r
e
C
#
0
Feb2020
Mar2020
April2020
May2020
June2020
July2020
Aug2020
Sep2020
Oct2020
Nov2020
Dec2020
Jan2021
Figure 5: Cumulative number of issued certiﬁcates on each
day since multiVA was deployed with domain exception list in
February 2020; the vertical line shows when full enforcement
was enabled.
Balancing security and benign failure rate with a
conﬁgurable domain validation quorum policy. A quorum
policy speciﬁes the number of remote VAs required to agree
on the validation result before signing a certiﬁcate. While
requiring domain validation to succeed at a large number of
remote VAs would enhance security, it would also increase
the risk that certiﬁcate requests get rejected incorrectly, since
in practice a non-trivial number of challenge requests may fail
due to uncontrollable factors (e.g., DNS propagation delay
and conﬁguration errors).
Our multiVA system adopts a conﬁgurable quorum policy
that enables the CA to strike a balance between different trade-
offs.5 Given n remote VAs, the k-n quorum policy allows
n − k remote VA challenges to fail to return an answer or
return an inconsistent answer during a validation, while still
allowing certiﬁcate issuance (assuming the primary VA has
successfully validated the domain). The initial deployment
uses n = 3 and k = 2, i.e., allowing at most one of three remote
VAs to fail. Our analysis shows that this setup can effectively
improve the security against domain validation attacks (§5
and §6) with an acceptable benign failure rate (§4.2).
Open-source implementation and phased deployment of
multiVA at Let’s Encrypt. We developed and released
an open-source implementation of multiVA that any CA
can use [6]. Our implementation does not require any
changes to the ACME protocol [19] and only modiﬁed
software components (∼200 lines of Go code in the core
logic [6]) relevant to domain validation in the Boulder
implementation [3]. Note that multiVA is independent of
the ACME protocol and is portable; CAs that do not support
ACME can also deploy multiVA in their backend without
supporting ACME.
Our implementation of the multiVA design was deployed
by Let’s Encrypt, a non-proﬁt which is the world’s largest
CA. Let’s Encrypt set up three remote vantage points in
three AWS datacenters: Oregon (us-west-2), Ohio (us-east-2),
and Frankfurt (eu-central-1). Let’s Encrypt’s existing primary
VAs are located in two data centers in Denver and Salt Lake
City. Since Let’s Encrypt issues millions of certiﬁcates a day,
changing their certiﬁcate issuance path required signiﬁcant
care. We collaborated with Let’s Encrypt to develop and apply
a multi-stage deployment plan:
• Staging deployment: Let’s Encrypt deployed multiVA in
a staging environment, which is a functional duplicate
of the production environment and is used for internal
testing of new features as well as external testing by
ACME client developers. 6
• Testing in production environment: Then, Let’s Encrypt
introduced multiVA to the production environment in a
data-collection mode: the remote VAs performed domain
validations, but did not affect the primary VA’s validation
decisions. Let’s Encrypt collected detailed information
on each validation from all VAs to understand the
potential causes of validation failures and performance
bottlenecks, which helped us reﬁne our implementation
to handle the load (e.g., during trafﬁc spikes) generated
by the full volume of production ACME requests.
• Production deployment with domain exception list:
Next, Let’s Encrypt applied multiVA for most of the
domain validation requests in Feb 2020, with a domain
exception list to temporarily exclude certain domains
from multiple-vantage-point validation. Let’s Encrypt
populated the exception list with domains that may,
based on the logs, have trouble with multi-vantage-point
validation to prepare for future certiﬁcate renewal. Let’s
Encrypt only did this for the domains associated with
ACME accounts that have contact information, so it
can communicate with the domain owners to inform
them that they are on the domain exception list, and
troubleshoot the issues.
The list only contained 99 ACME account IDs and most
of these IDs were associated with large hosting providers
that wanted additional time to debug their environments