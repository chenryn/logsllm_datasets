SSLv2 suites only
None
SSLv2 + some TLSv1.0 suites Reneg
mostly TLSv1.2 suites
EC, Reneg, Ticket
Table 2: Diﬀerent ClientHello messages sent during the campaigns. The campaigns in italics were made by the
EFF. The SSLv2 column indicates that a SSLv2-compatible ClientHello was sent. EC means Elliptic Curves;
DHE stands for Diﬃe-Hellman Ephemeral; ﬁnally, Reneg corresponds to the renegotiation extension [25],
and Ticket to the Session Ticket one [27].
not overload links during the ﬁrst phase of the campaigns.
We believe that it is as close as we could get to a time-
coherent snapshot. Section 6 answers questions about the
impact of time on IP address stability.
Even with this in mind, randomization can be insuﬃcient
and our SYN packets may be interpreted as an attack, and
our IP ﬁltered out. A solution could have been to use several
source IPs. Yet, if these addresses were not located in the
same neighbourhood, we might have ended up measuring
diﬀerent inconsistent views of the internet, as shown in [18].
Finally, one aspect of gathering such data we did not an-
ticipate was data storage. One easy way is to use one ﬁle per
active IP, but this rapidly ﬁlls up inode/block tables, while
the answers to one stimulus only take 20 GB in total. We
ended up grouping answers by /8 IP ranges and developping
tools to work on such ﬁles.
3.4 Global statistics on the campaigns
We ﬁrst sorted the answers received for each campaign
into several categories. Table 3 shows global results for the
ten campaigns. It partitions the answers obtained into the
following classes.
Non-TLS answers are reﬁned in empty and non-empty
answers (HTTP headers or synctactically invalid TLS mes-
sages for example). In fact, it seems common to ﬁnd non-
HTTPS service listening on port 443.
TLS answers can be of three types: TLS Alerts, com-
patible TLS Handshake messages or incompatible TLS Hand-
shake messages (a ServerHello is considered incompatible
if it contains a protocol version, a ciphersuite or extensions
the client did not propose in its ClientHello).
If we compare the EFF-1 and SSL2+ campaigns, which
correspond to similar stimuli, we obtain in both cases around
11 million valid TLS answers and 17 thousand TLS alerts,
which corroborates the results, but it seems the data from
the EFF-1 campaign have been post-processed to eliminate
a signiﬁcant part of the non-TLS results.
On the other hand, it is diﬃcult to compare our results to
the other EFF campaign, as the set of IPs probed is signiﬁ-
cantly smaller. This point is further discussed in section 6.
4. ANALYSIS METHODOLOGY
We ﬁrst deﬁne subsets of the hosts contacted: the TLS
hosts, the trusted hosts and the EV hosts. To assess the
quality of HTTPS answers, we select several parameters re-
garding the TLS protocol and the certiﬁcate chain.
4.1 Subsets
TLS hosts: hosts that answered with a TLS handshake,
compatible or not with the ClientHello.
Trusted hosts: servers which presented a server certiﬁ-
cate for which we could build a valid chain up to a root
certiﬁcate present in Firefox3 and valid at the time of the
campaign. Trusted chains not only correspond to RFC-
compliant chains, but also to chains containing useless or
unordered certiﬁcates and even to chains missing links4. Ac-
cepting the latter servers as trusted hosts conforms to most
browsers’ behaviour since they cache intermediate CA cer-
tiﬁcates to allow so-called path discovery.
EV hosts: EV certiﬁcates are a novelty in the internet
PKI oﬃcially introduced in 2007, which aim at improving
the quality of certiﬁcates. The EV guidelines [5] describe
how the certiﬁcates should be issued, the audit procedures
needed for the certiﬁcate authorities and the cryptographic
algorithms that should be banned. An EV certiﬁcate must
be issued by an EV authority (recognized by the browsers)
and contain a certiﬁcate policy5 matching the EV authority.
Once a certiﬁcate is validated and recognized as EV, the
browsers typically use green address bars to indicate to the
user that the site is EV-trusted. The EV subset consists of
hosts that sent EV chains valid at the time of the campaign.
Obviously, EV hosts are a subset of the trusted hosts.
4.2 Criteria studied
Protocol version.
A ClientHello message includes two version ﬁelds: the
external version used for the transport of this particular mes-
sage (present in the so-called Record protocol since SSLv3)
and the maximum version supported by the client, vmax.
The standard indicates that the server should choose the
3This particular certiﬁcate store is easy to access and rep-
resentative of many users.
4Of course, to build the chain up to a root certiﬁcate, the
missing links had to be present in another certiﬁcate chain
or in the root certiﬁcate store.
5Certiﬁcate policies are object identiﬁers (OID) contained
in the CertificatePolicies X.509 extension.
14
Id
NoExt1
EFF-1
EFF-2
NoExt2
DHE
FF
EC
SSL2
SSL2+
TLS12
IPs with
TCP/443
21,342,205
15,579,266
7,777,511
26,218,653
26,218,653
26,218,653
26,218,653
26,218,653
26,218,653
26,218,653
Non-TLS answers
Empty Non-empty
40.62 %
13.20 %
171,405
26.79 %
0.00 %
16,509
0.91 %
0.00 %
591
9.35 %
47.28 %
53,535
3.19 % 4,385,635
62.79 %
47.36 %
9.32 %
92,239
9.36 % 8,696,833
54.26 %
70.23 %
354,760
47.25 %
17,247
54.05 %
918,202
11.10 %
9.34 %
9.40 %
Alerts
TLS answers
Incompat. HS
Compat. HS
0.80 %
0.10 %
0.00 %
0.20 %
419
88
48
1,018
16.72 % 110,606
1,007
33.17 % 142,007
1.35 %
3,826
0.06 %
127
3.50 % 108,557
0.35 %
0.00 % 9,683,050
0.00 % 11,388,447
0.00 % 7,705,488
0.00 % 11,313,085
0.42 % 4,421,695
0.00 % 11,262,138
0.54 %
695,158
0.01 % 4,533,396
0.00 % 11,361,199
0.41 % 8,554,180
45.37 %
73.10 %
99.07 %
43.14 %
16.86 %
42.95 %
2.65 %
17.29 %
43.33 %
32.62 %
Table 3: Distribution of the answers collected for each campaign. The percentages are computed over the
total number of IPs where we found a 443 open port (second column).
maximum version it supports, up to vmax. If no such ver-
sion exists, it should terminate the handshake with an alert.
We also consider that a good server should ban SSLv2.
Ciphersuite.
The range of existing ciphersuites is deﬁned by the IANA,
and currently consists of 297 suites6. Among those suites,
the client generally oﬀers between 10 and 30 suites. In its
ServerHello, the server will select one.
After eliminating a lot of suites that contain seldom used
algorithms (ﬁxed Diﬃe-Hellman, PSK7, SRP8, etc.), we clas-
sify the ciphersuites in three groups: weak suites (SSLv2,
DES, export suites), acceptable suites (RC4, 3DES, DSS,
MD5) and strong ones (the remaining ones). We thus ob-
tain 23 weak suites, 23 acceptable suites and 44 strong suites.
Naturally, we would like the servers to select strong suites.
TLS Extensions.
As studied in a recent RFC draft [19], some servers do not
support TLS extensions and among them, some implementa-
tions simply reject ClientHello containing extensions. This
is unfortunate since this mechanism is necessary for the ex-
tensibility of the protocol:
• security ﬁxes like secure renegotiation [25];
• support for new ciphersuites using elliptic curves [2];
• new features like session tickets [27].
From a security standpoint, when a client proposes the
secure renegotiation extension, the server should support it.
Our ﬁrst analysis focuses on these TLS parameters: the
protocol version, the strength of the chosen ciphersuite and
support for the renegotiation extension. The results are pre-
sented in section 5.
Server behaviour.
In July 2011, as we sent servers multiple ClientHellos,
we gained unique insight into the behaviour of servers: the
versions they support, their reaction to restricted ciphersuite
choices, their intolerance to versions and extensions.
6To be complete, we must also count the 7 SSLv2 suites
and the 4 SSLv3 FIPS suites which are now obsolete or
redundant.
7Pre-Shared Key.
8Secure Remote Password.
Section 6 gives precise statistics about these seven cam-
paigns, by comparing the answers obtained for the diﬀer-
ent stimuli for each IP in the considered subset (TLS hosts,
trusted hosts and EV hosts).
The quality of the certiﬁcate chain.
The Certificate message contains a list of certiﬁcates
used to establish the identity of the server. This list should
be strictly ordered: the ﬁrst certiﬁcate is the server certiﬁ-
cate, and each certiﬁcate is signed by the following one. The
ﬁnal root certiﬁcate may be omitted, since the client should
already know it to trust the certiﬁcate chain.
However, some servers do not follow these rules:
they
forget intermediate certiﬁcation authorities, they send un-
ordered chains or useless certiﬁcates; others even send two
certiﬁcation paths to have a server certiﬁcate validated by
two root authorities. Such behaviour is generally accepted
by common TLS stacks which are laxist and provide features
like path discovery but may break some implementations9.
To create the trusted hosts subset, we ﬁrst need to classify
the certiﬁcate chains into three groups: empty or incomplete
chains, trusted chains, complete but untrusted chains. The
two latter classes are further reﬁned:
• RFC-compliant chains do contain only the useful cer-
tiﬁcates in the correct order;
• self-contained chains contain useless or unordered cer-
tiﬁcates, but include all the information needed to
build a complete chain;
• transvalid 10 chains lack intermediate authority to build
a complete chain. To reach the root certiﬁcate, we thus
need to use certiﬁcates from other chains.
In addition to this classiﬁcation, section 7 contains statis-
tics for other parameters: the cryptographic algorithms, the
key sizes and the validity period of the chain built.
5. ANALYSIS OF TLS PARAMETERS
5.1 Protocol version
Table 4 shows the distribution of the versions chosen by
servers for each campaign and each subset.
For standard ClientHello messages (i.e. NoExt1, EFF-1,
EFF-2, NoExt2, FF, SSL2+), we observe the same results
9One such implementation is the TLS stack present in Java
15
TLS
Trusted
EV
FF
EFF-2
EFF-1
DHE(cid:2)
NoExt1 TLS1
96 %
4 %
SSL3
TLS1 95.4 %
4.5 %
SSL3
0.1 %
SSL2
96 %
TLS1
SSL3
4 %
NoExt2 TLS1
96 %
4 %
SSL3
97 %
TLS1
3 %
SSL3
96 %
TLS1
SSL3
4 %
84 %
TLS1
16 %
SSL3
SSL2
99.9 %
SSL3 <0.1 %
TLS1 <0.1 %
SSL2+ TLS1
96 %
SSL3
4 %
SSL2 <0.1 %
TLS12(cid:2) TLS1 98.5 %
SSL3
1.4 %
TLS1.1 0.1 %
TLS1.2 <0.1%
SSL2(cid:2)
EC(cid:2)
TLS1 99.3 %
SSL3
0.7 %
TLS1 99.2 %
SSL3
0.8 %
TLS1 99.2 %
SSL3
0.8 %
TLS1 98.4 %
SSL3
1.6 %
TLS1 99.1 %
TLS1 98.5 %
SSL3
0.9 %
SSL3
1.5 %
TLS1 99.4 %
TLS1 99.4 %
SSL3
0.6 %
SSL3
0.4 %
TLS1 99.8 %
TLS1 99.6 %
SSL3
0.2 %
SSL3
0.4 %
TLS1 99.4 %
TLS1 99.4 %
SSL3
0.6 %
SSL3
0.4 %
100 %
100 % TLS1
TLS1
SSL2
100 % SSL2
100 %
TLS1 99.2 %
SSL3
0.8 %
TLS1 99.4 %
SSL3
0.6 %
TLS1 99.6 %
SSL3
0.2 %
TLS1.1 0.2 %
TLS1.2 <0.1%
TLS1 99.5 %
SSL3
0.2 %
TLS1.1 0.2 %
TLS1.2 <0.1%
Table 4: Distribution of the TLS versions chosen
by the servers for each campaign and each sub-
set. Campaigns with a star correspond to speciﬁc
July 2011 stimuli that produced signiﬁcantly less an-
swers than NoExt2 or FF.
over time. TLSv1.0 is the preferred version of the pro-
tocol: 95 % of the TLS hosts answer with TLSv1.0
and 5 % use SSLv3. If we consider the same stimuli but
focus on trusted or EV hosts, the proportion becomes more
or less 99 % for TLSv1.0 and 1 % for SSLv3. It is worth not-