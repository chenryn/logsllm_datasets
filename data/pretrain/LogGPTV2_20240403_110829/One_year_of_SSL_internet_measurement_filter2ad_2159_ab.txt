### Different ClientHello Messages Sent During the Campaigns

- **SSLv2 suites only**: Indicates that a ClientHello compatible with SSLv2 was sent.
- **None**: No specific configuration.
- **SSLv2 + some TLSv1.0 suites Reneg**: Includes SSLv2 and some TLSv1.0 ciphersuites, with renegotiation extension.
- **Mostly TLSv1.2 suites**: Primarily uses TLSv1.2 ciphersuites.
- **EC, Reneg, Ticket**: Uses Elliptic Curve (EC) ciphersuites, renegotiation extension, and session ticket extension.

**Table 2: Different ClientHello messages sent during the campaigns.** The italicized campaigns were conducted by the EFF. The SSLv2 column indicates that an SSLv2-compatible ClientHello was sent. EC stands for Elliptic Curves; DHE stands for Diffie-Hellman Ephemeral; Reneg corresponds to the renegotiation extension [25], and Ticket to the Session Ticket extension [27].

### Considerations for the First Phase of the Campaigns

To avoid overloading network links during the initial phase of the campaigns, we aimed to capture a time-coherent snapshot. Section 6 addresses the impact of time on IP address stability.

Despite these efforts, randomization can be insufficient, and our SYN packets might be interpreted as an attack, leading to our IP being filtered out. Using multiple source IPs could have been a solution, but if these IPs were not in the same neighborhood, it could result in inconsistent views of the internet, as demonstrated in [18].

Another unforeseen challenge was data storage. Storing data in one file per active IP quickly fills up inode/block tables, even though the total data from one stimulus is only about 20 GB. We ultimately grouped answers by /8 IP ranges and developed tools to handle such files.

### Global Statistics on the Campaigns

We categorized the responses received for each campaign. Table 3 shows the global results for the ten campaigns, partitioning the responses into the following classes:

- **Non-TLS Answers**: Further divided into empty and non-empty answers (e.g., HTTP headers or syntactically invalid TLS messages). It is common to find non-HTTPS services listening on port 443.
- **TLS Answers**: Can be of three types:
  - **TLS Alerts**
  - **Compatible TLS Handshake messages**
  - **Incompatible TLS Handshake messages** (a ServerHello is considered incompatible if it contains a protocol version, ciphersuite, or extensions not proposed in the ClientHello).

Comparing the EFF-1 and SSL2+ campaigns, which used similar stimuli, both yielded around 11 million valid TLS answers and 17 thousand TLS alerts, corroborating the results. However, the EFF-1 campaign appears to have been post-processed to eliminate a significant portion of non-TLS results.

It is challenging to compare our results with the other EFF campaign due to the significantly smaller set of probed IPs. This point is further discussed in Section 6.

### Analysis Methodology

We define subsets of the contacted hosts and select parameters to assess the quality of HTTPS responses, focusing on the TLS protocol and certificate chain.

#### Subsets

- **TLS Hosts**: Hosts that responded with a TLS handshake, whether compatible or not with the ClientHello.
- **Trusted Hosts**: Servers presenting a server certificate for which a valid chain up to a root certificate present in Firefox3 and valid at the time of the campaign can be built. Trusted chains include RFC-compliant chains, chains with useless or unordered certificates, and chains missing links. This aligns with most browsers' behavior, which cache intermediate CA certificates for path discovery.
- **EV Hosts**: Hosts that sent EV chains valid at the time of the campaign. EV certificates, introduced in 2007, aim to improve certificate quality. An EV certificate must be issued by an EV authority (recognized by browsers) and contain a certificate policy matching the EV authority. Browsers typically use green address bars to indicate EV-trusted sites. EV hosts are a subset of trusted hosts.

#### Criteria Studied

- **Protocol Version**: A ClientHello includes two version fields: the external version for message transport and the maximum version supported by the client (vmax). The server should choose the highest version it supports, up to vmax, or terminate the handshake with an alert if no such version exists. Good servers should ban SSLv2.
- **Ciphersuite**: Defined by IANA, currently consisting of 297 suites. Clients generally offer between 10 and 30 suites, and the server selects one. Ciphersuites are classified into weak, acceptable, and strong groups. We prefer servers to select strong suites.
- **TLS Extensions**: Some servers do not support TLS extensions, which is problematic for extensibility, security fixes, and new features. From a security standpoint, servers should support the secure renegotiation extension when proposed by the client.

Our first analysis focuses on these TLS parameters: protocol version, strength of the chosen ciphersuite, and support for the renegotiation extension. Results are presented in Section 5.

### Server Behavior

In July 2011, sending multiple ClientHellos provided unique insights into server behavior, including supported versions, reactions to restricted ciphersuite choices, and intolerance to versions and extensions.

### Quality of the Certificate Chain

The Certificate message contains a list of certificates to establish the server's identity. The list should be strictly ordered, with the first certificate being the server certificate, and each certificate signed by the next. The final root certificate may be omitted if the client already knows it.

However, some servers deviate from these rules, omitting intermediate certification authorities, sending unordered chains, or including unnecessary certificates. Common TLS stacks are lenient and provide features like path discovery, but this can break some implementations.

To create the trusted hosts subset, we classify certificate chains into three groups: empty or incomplete chains, trusted chains, and complete but untrusted chains. Trusted chains are further refined into RFC-compliant, self-contained, and transvalid chains. Section 7 provides statistics on cryptographic algorithms, key sizes, and the validity period of the built chains.

### Analysis of TLS Parameters

#### Protocol Version

Table 4 shows the distribution of versions chosen by servers for each campaign and each subset. For standard ClientHello messages (NoExt1, EFF-1, EFF-2, NoExt2, FF, SSL2+), we observe consistent results over time. TLSv1.0 is the preferred version, with 95% of TLS hosts using it and 5% using SSLv3. For trusted or EV hosts, the proportion is approximately 99% for TLSv1.0 and 1% for SSLv3.