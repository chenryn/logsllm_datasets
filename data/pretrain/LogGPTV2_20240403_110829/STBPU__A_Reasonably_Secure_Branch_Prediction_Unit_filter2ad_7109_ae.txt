tion thresholds for ST re-randomization when various STBPU
attacks have a P attack success rate. For BranchScope attack,
to have a 50% chance of success, the number of triggered
mispredictions is estimated at ≈ 8.38 × 105. For a BTB
eviction-based side channel attack, the number of triggered
evictions is ≈ 5.3×105. These are the lower-bound numbers of
mispredictions and evictions triggered by any attack discussed
in this paper. We aim to re-randomize ST well before the
attacker has a reasonable probability of a successful attack. To
do so, we utilize results from the previously discussed security
analysis and derive the re-randomization thresholds as follows.
We ﬁrst denote the attack complexity C as the least number
of evictions or mispredictions that the attack needs to trigger
to succeed with a 50% chance. Please note that we use 50%
probability rather than 100% since on average the attacker
will succeed with half the number of attempts needed for the
fully exhaustive key search. Let the variable r be the attack
difﬁculty factor and Γ be the re-randomization threshold. As
such, Γ = r · C. An attack has a 50% success rate when
r = 1. For instance, if r = 0.1, then the re-randomization
thresholds for mispredictions and evictions are set to 8.3×104
and 5.3×104, while 4.15×104 and 2.65×104 when r = 0.05.
For further experiments, we set r to 0.05 and derive the re-
randomization thresholds from this value as it offers strong
security guarantees with a low impact on performance.
B. STBPU Performance Evaluation
1) Prediction Accuracy with real branch trace: We evaluate
the STBPU impact on BPU accuracy and compare it
to
existing na¨ıve protections modeled after microcode protections
based on ﬂushing or partitioning BPU resources. To do so,
we utilize our trace-based BPU simulator based on Intel
PT technology. It avoids simulating the complex state of
microarchitectural components. Instead, it is designed to allow
rapid testing of BPU models using branch traces from a live
system running a variety of real-world scenarios.
Each simulation instance is collected from an Intel Core i7-
8550U machine that captures traces from a live physical core
and includes any OS/library code executed, including naturally
occurring context, mode switches, and interrupts. This allows
realistically simulating complex cross-process BPU effects and
assessing how BPU ﬂushing or ST re-randomization affects
performance. To evaluate single-process compute-bound sce-
narios, we collected 23 traces from different workloads in
SPEC CPU 2017. In addition, we captured traces from user
and server applications, including Apache2 workloads under
different prefork settings, Google Chrome traces when running
single or multiple browser workloads, MySQL server, and
OBS Studio.
As previously discussed, our baseline BPU model is based
on recent reverse-engineering efforts [19, 21, 32, 34, 43, 78].
To evaluate STBPU, we applied the ST mechanisms from
Section IV-B to the BPU baseline model. We also created two
models that mimic the baseline model with Intel’s microcode-
based protections, namely μcode protection 1 and 2, modeling
IPBP+IBRS protection with and without STIBP. Please note
that microcode-based protections cannot prevent branch colli-
sions from occurring within the same context. To prevent such
collisions, more structural BPU changes are required. In par-
ticular, instead of storing compressed and truncated addresses
in BTB, the full 48-bit address must be stored. As a result,
the number of entries the BTB is capable of storing must be
reduced (assuming unchanged hardware budget). We refer to
such a model as conservative, which fully prevents any known
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:07 UTC from IEEE Xplore.  Restrictions apply. 
117
Fig. 3: Overall branch prediction accuracy: STBPU against other secure BPU models
collision-based BPU attack by ﬂushing or partitioning. Note
that STBPU achieves the same security level via customizing
BPU data representations and has better performance.
The result from simulating the above ﬁve models is demon-
strated in Figure 3 where we aggregate all the effective pre-
dictions into a single metric: overall accuracy effective (OAE).
OAE counts a branch correctly predicted if all necessary
(target and direction) predictions are correct; otherwise, it’s
counted as mispredicted. Figure 3 shows the overall accuracy
of the various BPU models against the SPEC2017 benchmarks
and user applications. STBPU demonstrates an average 1.3%
overall effective prediction accuracy penalty. For comparison,
the microcode and the conservative BPU models suffer at least
around 12% overall accuracy loss with multiple cases of nearly
30% reduction. With this, we conclude that based on the BPU
accuracy data STBPU outperforms the microcode protections
that utilize ﬂushing and partitioning.
2) Cycle Accurate Evaluation using gem5: Our next eval-
uation focuses on the comprehensive impact of STBPU on
Out-of-Order (OoO) CPU in terms of cycle accurate per-
formance, evaluating effects of STBPU on advanced branch
predictors, and SMT performance. We tested three advanced
BPU models: TAGE SC L 8KB, TAGE SC L 64KB [67],
and PerceptronBP [29]. To demonstrate the consistency of
accuracy between gem5 and our previous evaluation, we also
ported and tested our baseline model from Section VII-B1. We
refer to it as SKLCond. We compared the direction prediction
accuracy between SKLCond in gem5 with our previous base-
line model using the same workloads. We observed on average
less than 5% direction prediction difference which validates
our simulator consistency.
We treated the aforementioned four BPUs as baseline mod-
els and implemented four STBPU models. In single process
evaluations, we simulated each pair of STBPU models and
their non-ST counterparts across 18 SPEC2017 workloads.
Figure 4 illustrates the reduction of direction / target predic-
tions rate and the normalized IPC between STBPU designs
and their non-secure counterparts. We observe all 4 STBPU
designs can achieve less than 2% reduction on average target
prediction rate and less than 1.3% reduction on average of di-
rection prediction rate. The less than 4% average IPC reduction
demonstrates the high effectiveness of STBPU designs.
We used the same eight BPU models in our gem5 SMT
simulations. Instead of running a single workload at a time,
we grouped the individual workloads in pairs and simulated
these pairs in SMT mode. In order to accurately evaluate
Fig. 4: STBPU single workload evaluation in gem5
the STBPU impacts on overall throughput, we calculated the
Harmonic means (Hmeans) [49] of IPCs since each workload
is equally valued. Figure 5 displays the overall IPC and the
impact on accuracy. We observed the ST SKLcond models
suffer the most in SMT mode. This is because running tasks
in SMT mode introduces more frequent ST re-randomizations.
However, the reduction of throughput is less than 5%. We
believe this is because the ST SKLcond model does not have
a separate threshold register as TAGE models do for TAGE-
table mispredictions. This causes more frequent direction mis-
predictions as shown in the ﬁrst chart of Figure 5. This effect
further affects the overall performance. On the other hand, the
advanced BPU models overall retain their efﬁciencies with
minimized accuracy reduction and throughput slowdown.
3) Aggressive ST Re-randomization and Performance:
It
is common to see a constant arms race between protection
mechanisms and more advanced attacks [57, 59]. STBPU can
withstand faster attack algorithms by reducing the ST re-
randomization threshold to lower values. This would result in
a more aggressive protection scheme but can negatively affect
the performance. To measure such an effect on performance,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:07 UTC from IEEE Xplore.  Restrictions apply. 
118
ceases any BPU training.
VIII. RELATED WORK
To protect against Spectre attacks, Intel processors are
enhanced with Spectre-speciﬁc microcode updates, including
IBRS, IBPB, and STIBP protections [28]. The implementation
of these mechanisms is not well documented and varies from
one microarchitecture to another as their performance cost.
Since these protections are added on top of unsafe BPU
designs, they usually come with a very costly performance
overhead. As a result, in practice, they are not used to their
full extent and are only enabled by the OS in critical cases
such as selectively protecting only a handful of processes.
Several previous academic works proposed BPU modiﬁca-
tions to protect against side channel and speculative execution
attacks. BRB [72] stores and reloads the entire history of the
directional predictor for each process, effectively mitigating
PHT collision-based attacks such as BranchScope. BSUP [36]
ﬁrst encrypts the PC and then encrypts the entries of BPU,
making it unsuitable for SMT processors.
Zhao et al. [81] encode branch contents (directions and
destination histories) and indexes using thread-private random
numbers to achieve isolation between threads or privilege
levels. Their approaches re-generate random numbers upon
context and mode switches, which cannot defend against the
transient execution attacks from same-address-space [75, 78].
Besides, our work implements ST re-randomization based on
BPU events allowing efﬁcient branch history retention.
The BPU in the Samsung Exynos processor is also protected
with XOR-based encryption as branch history data enhance-
ment [23]. Since this mechanism aims to prevent speculative
execution attacks such as Spectre variant 2, Exynos only en-
crypts stored branch targets of indirect branch instructions and
returns. However, other forms of branch collisions may still
result in side channel leakage [81]. Additionally, in Exynos,
an output of the hash function serves as a key for encrypting
branch target data. It is derived from a number of process and
machine-speciﬁc inputs. In our work, the OS is given more
ﬂexibility for managing the ST, which allows selective branch
history sharing, adjustment of re-randomization frequency, and
enforcing BPU isolation for various types of software entities
such as sandboxes and libraries.
IX. CONCLUSION
We presented the STBPU, a secure branch prediction design
that defends against collision-based BPU side channel and
speculative execution attacks. We performed a systematization
of BPU-related attacks and provided a detailed security anal-
ysis against recent attacks. While providing security, STBPU
demonstrates high performance for branch predictors modeled
after real-world chips and utilizing advanced models.
X. ACKNOWLEDGMENTS
The work in this paper is partially supported by Intel
Corporation and National Science Foundation grant #1850365.
The statements made herein are solely the responsibility of the
authors and do not necessarily reﬂect those of the sponsors.
Fig. 5: SMT Evaluation of STBPU using workload pairs
Fig. 6: Effects on performance when using more aggressive re-
randomization thresholds with the TAGE SC L 64KB BPU,
result are averaged from 42 combinations of SPEC CPU 2017
workload pairs. The X-axis represents the r parameter.
we experimented with lowering the r parameter. This is
equivalent to assuming a new attack that is faster 10 times,
100 times, and even more.
To demonstrate an extreme case, we select an advanced
BPU model most sensitive to branch history loss and thus
re-randomizations. We test it in the SMT setting which is
more prone to trigger branch mispredictions and evictions.
Figure 6 demonstrates how reducing the r parameter affects
the performance of the TAGE SC L BPU protected with
STBPU. It shows that the thresholds can be safely reduced and
maintain accuracy above 95%. However, setting the threshold
too low results in ST re-randomizations happening after every
few hundreds of mispredictions or evictions. This practically
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:07 UTC from IEEE Xplore.  Restrictions apply. 
119
REFERENCES
[1] O. Acıic¸mez, B. B. Brumley, and P. Grabher, “New
results on instruction cache attacks,” in International
Workshop on Cryptographic Hardware and Embedded
Systems. Springer, 2010, pp. 110–124.
[2] O. Aciic¸mez, C¸ . K. Koc¸, and J.-P. Seifert, “On the power
of simple branch prediction analysis,” in Proceedings of
the 2nd ACM symposium on Information, computer and
communications security. ACM, 2007, pp. 312–320.
[3] O. Acıic¸mez, C¸ . K. Koc¸, and J.-P. Seifert, “Predicting
secret keys via branch prediction,” in Cryptographers’
Track at the RSA Conference. Springer, 2007, pp. 225–
242.
[4] S. Aga and S. Narayanasamy, “InvisiMem: Smart mem-
ory defenses for memory bus side channel,” in ACM
SIGARCH Computer Architecture News, vol. 45, no. 2.
ACM, 2017, pp. 94–106.
[5] E. Barberis, P. Frigo, M. Muench, H. Bos, and C. Giuf-
frida, “Branch History Injection: On the Effectiveness of
Hardware Mitigations Against Cross-Privilege Spectre-
v2 Attacks,” in USENIX Security, 2022.
[6] D. J. Bernstein, “Cache-timing attacks on AES,” 2005.
and
[7] S. Bhattacharya, C. Maurice,
D. Mukhopadhyay,
“Branch Prediction Attack on
Blinded Scalar Multiplication,” IEEE Transactions on
Computers, vol. 69, no. 5, pp. 633–648, 2019.
S. Bhasin,
[8] N. Binkert, B. Beckmann, G. Black, S. Reinhardt,
A. Saidi, A. Basu, J. Hestness, D. Hower, T. Krishna,
S. Sardashti, R. Sen, K. Sewell, M. Shoaib Bin Altaf,
N. Vaish, M. Hill, and D. Wood, “The gem5 simulator,”
SIGARCH Computer Architecture News, vol. 39, pp. 1–7,
08 2011.
[9] R. Bodduna, V. Ganesan, P. Slpsk, K. Veezhinathan, and
C. Rebeiro, “Brutus: Refuting the security claims of the
cache timing randomization countermeasure proposed in
ceaser,” IEEE Computer Architecture Letters, vol. 19,
no. 1, pp. 9–12, 2020.
[10] A. Bogdanov, L. R. Knudsen, G. Leander, C. Paar,
A. Poschmann, M. J. B. Robshaw, Y. Seurin, and
C. Vikkelsoe, “PRESENT: An Ultra-Lightweight Block
Cipher,” in Cryptographic Hardware and Embedded Sys-
tems - CHES 2007, P. Paillier and I. Verbauwhede, Eds.
Berlin, Heidelberg: Springer Berlin Heidelberg, 2007, pp.
450–466.
[11] A. Bogdanov, M. Kneˇzevi´c, G. Leander, D. Toz,
K. Varıcı, and I. Verbauwhede, “spongent: A Lightweight
Hash Function,” in Cryptographic Hardware and Embed-
ded Systems – CHES 2011, B. Preneel and T. Takagi,
Eds.
Berlin, Heidelberg: Springer Berlin Heidelberg,
2011, pp. 312–325.
[12] J. Borghoff, A. Canteaut, T. G¨uneysu, E. B. Kavun,
M. Knezevic, L. R. Knudsen, G. Leander, V. Nikov,
C. Paar, C. Rechberger et al., “PRINCE–a low-latency
block cipher for pervasive computing applications,” in
International Conference on the Theory and Application
[14] C. Canella,
J. V. Bulck, M. Schwarz, M. Lipp,
B. von Berg, P. Ortner, F. Piessens, D. Evtyushkin,
and D. Gruss, “A Systematic Evaluation of Transient
Execution Attacks and Defenses,” in 28th USENIX
Security Symposium (USENIX Security 19).
Santa
Clara, CA: USENIX Association, Aug. 2019, pp.
249–266. [Online]. Available: https://www.usenix.org/
conference/usenixsecurity19/presentation/canella
of Cryptology and Information Security. Springer, 2012,
pp. 208–225.
[13] T. Bourgeat, J. Drean, Y. Yang, L. Tsai, J. Emer, and
M. Yan, “Casa: End-to-end quantitative security analysis
of randomly mapped caches,” in 2020 53rd Annual
IEEE/ACM International Symposium on Microarchitec-
ture (MICRO).
IEEE, 2020, pp. 1110–1123.
[15] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and
T. H. Lai, “SgxPectre: Stealing Intel Secrets from SGX
Enclaves Via Speculative Execution,” pp. 142–157, June
2019.
[16] B. Coppens, I. Verbauwhede, K. De Bosschere, and
B. De Sutter, “Practical mitigations for timing-based
side-channel attacks on modern x86 processors,” in Secu-
rity and Privacy, 2009 30th IEEE Symposium on.
IEEE,
2009, pp. 45–60.
[17] M. Evers, P.-Y. Chang, and Y. N. Patt, “Using hybrid
branch predictors to improve branch prediction accuracy
in the presence of context switches,” in ACM SIGARCH
Computer Architecture News, vol. 24, no. 2.
ACM,
1996, pp. 3–11.
[18] D. Evtyushkin, T. Benjamin, J. Elwell, J. A. Eitel,
A. Sapello, and A. Ghosh, “Computing with time: Mi-
croarchitectural weird machines,” in Proceedings of the
26th ACM International Conference on Architectural
Support
for Programming Languages and Operating
Systems, 2021, pp. 758–772.
[19] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh,
“Jump over ASLR: Attacking branch predictors to by-
pass ASLR,” in Microarchitecture (MICRO), 2016 49th