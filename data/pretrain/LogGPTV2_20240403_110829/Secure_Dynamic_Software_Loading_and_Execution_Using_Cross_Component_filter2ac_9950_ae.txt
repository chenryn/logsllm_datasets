Offensive technique
Shellcode (download & execute)
DLL injection
DLLs hosted by dllhost.exe
DLLs hosted by svchost.exe
Abuse of a benign DLL
DLL-based Malware: DLL hijacking and DLL-based mal-
ware are similar in the sense that both make trusted applica-
tions load malicious DLL. We have collected two DLL-based
malware samples, namely POWELIKS and Pigeon/Zekos. The
former uses dllhost.exe to load its DLLs, while the latter
uses svchost.exe to host its DLLs; Table IV summarises
all the malware instances tested against our mechanism. We
intentionally executed the samples, and then the two malware
instances were installed on the victim system. As a result,
registry keys and values for starting malware were created,
and malicious DLLs were copied onto the system. However,
these DLLs were not loaded by their intended host (either
dllhost.exe or svchost.exe) for the same reason as
the failure of the above DLL hijacking cases. Although the
malware samples abused trusted executable ﬁles to bypass se-
curity mechanisms such as application whitelisting, the trusted
ﬁles refused to load DLLs that were not signed by a trusted
vendor.
Drive-by Download Attack: For this evaluation, we have
modiﬁed a leaked exploit kit code (Bleeding Life 2) so that
a dummy malware ﬁle is downloaded and executed upon
successful exploitations. Download and execution shellcode is
well known and widely used in most exploits. The malware
is signed and performs the same operations as the malicious
dummy DLL used for the DLL hijacking evaluation. In ad-
dition, we have used a Windows XP SP3 host instead of the
Windows 7 virtual machine used for the above evaluations
so that the system has a version of the Internet Explorer
exploitable with the exploit kit. In order to allow known
exploits to work (i.e.
to
download a malware, and to execute it) no anti-virus solutions
were installed on the test-bed.
the Internet Explorer,
to exploit
When a user visited a malicious page containing our
modiﬁed exploit kit, an exploit for the Internet Explorer
was triggered, and the malware was downloaded by the
shellcode of the exploit code. However, no new malicious
process was spawned. The shellcode downloaded the malware
to the victim system without any problem, but its call to
CreateProcess() failed because the malware’s signer was
not included in the trusted vendor list of Internet Explorer. This
shows that our cross veriﬁcation implementation prevented a
process of an executable ﬁle from being created, if the ﬁle is
not singed by a trusted entities of the hosting application.
Malware’s DLL Injection: Even though the current proto-
type cannot detect every type of DLL injection, it prevents
one of the typical DLL injection methods, which is based
on CreateRemoteThread() and LoadLibrary(). It is
still widely used in real world malware. For instance, Shylock,
a notorious banking malware, injects itself to explorer.
exe using this DLL injection method. To test our prototype’s
121121
effectiveness against DLL injection, we signed a Shylock
sample, and then executed it on the same Windows XP
SP3 machine used for the drive-by download attack eval-
uation. The system was successfully infected by the sam-
ple, but a speciﬁc malware behaviour,
injecting itself to
explorer.exe, was not achieved because of a failure
of cross veriﬁcation; explorer.exe does not have the
malware signer in its trusted vendor list. We analysed the
memory dump of explorer.exe to further trace the failure.
The malicious DLL was actually written to the memory
by WriteProcessMemory() (nothing prevents this be-
haviour), but it was not be loaded by the thread created by
CreateRemoteThread(). The call to LoadLibrary()
from the thread returned NULL, which reconﬁrms the effec-
tiveness of the cross veriﬁcation.
Malware using Benign Components: Stuxnet infects its
target PLCs by abusing a benign Siemens STEP 7 DLL,
s7otbxdx.dll. This ﬁle is renamed to s7otbxsx.dll,
while a malicious s7otbxdx.dll is placed at the original
location. Then Stuxnet uses the original DLL to read from and
write to its target PLCs. We have repeated this activity using
an actual Stuxnet sample DLL. Next, we have implemented a
program (as a standalone malware) that uses s7otbxdx.dll
just as Stuxnet. Since both the main program and the replaced
DLL are developed and signed by the same author (the
attacker), the malicious s7otbxdx.dll was loaded when
we executed the malware (mutual trust case). However, the
original DLL that had been renamed to s7otbxsx.dll was
not loaded by the malicious DLL due to a failure of cross
veriﬁcation. In particular, the callee did not trust its caller,
which is the exactly inverse case of the above evaluations from
DLL hijacking to DLL injection.
Impact on performance: The proposed mechanism has
only two additional operations (i.e. trusted vendor list and
vendor comparisons) compared to the conventional digital
signature veriﬁcation, and the overhead was found to be neg-
ligible. We performed evaluation using Firefox. Even though
Firefox loads more than 20 components, the startup time delay
was under 15ms on a Microsoft Windows 7 virtual machine
with Intel Core i7 2.4 GHz CPU and 1GB of RAM. In order to
make the two operations be the only addition, the three APIs
remained intercepted, but with dummy hooks that do nothing
but invoke its original counterpart. This result shows that our
defence mechanism is practical and can be effectively applied
to real world computing platforms.
VI. DISCUSSION
A. Possible Extensions
Reputation-based System: Reputation-based systems repre-
sent a signiﬁcant trend in decision support for Internet service
provision including e-commerce and P2P networking [37],
[38], [39], [40], [41], [42]. The underlying idea is to let
parties rate each other (for example after the completion of
a transaction), and use the aggregated ratings of a given party
to derive a reputation score. This score can assist other parties
in deciding whether or not to transact with that party in the
future.
This concept can be applied to our cross veriﬁcation
mechanism. It can relax the level of security provided by
the mechanism, and it is especially useful for allowing core
components to be loaded. For instance, main executable ﬁle
C1 of an application A calls one of its components C2, where
C2 is required for the application to function correctly. Assume
there are two candidates for this component, [C2]V1 and [C2]V2.
In this case, C1 can decide which one is more trustable
component using the following reputation-based system:
• Two functions are deﬁned:
f−→ T rust(V1), and
f−→ T rust(V2)
1. V1
V2
2. {T rust(V1), T rust(V2)} g−→ more trustable vendor
With this extension, the application can select the more
trustable component and keep functioning.
Trusted Vendor List in the Cloud: Even though the vendor
can update its component with the updated trusted vendor list
at any time, maintaining such lists in the cloud can beneﬁt
the proposed mechanism. Trusted vendor lists still have to be
managed by the vendor, but authorised collaborating vendors
can be added to the lists without updating already released
binaries. In this extension case, only the lists are updated
instead of the entire binaries, but the executable loader of the
operating system must verify the integrity of trusted vendor
lists of components as well as the trust relationships.
One-way Veriﬁcation: One way of relaxing our mecha-
nism, which can be beneﬁcial in some cases, is to have only the
callers to verify the callees. This relaxation still prevents most
of malicious component loading attack techniques explained
in Section IV-D, although the rest of the attacks prevented by
the complete mechanism cannot be mitigated.
We are in the process of implementing the above extensions
and developing further extensions in order to evaluate them
with our original proposal. This evaluation will give us the
level of security of each method and the balance between
usability and security.
B. Generality of Our Mechanism
Although we have focused on Microsoft Windows plat-
form throughout
the paper and prototype implementation,
the concept is general, and hence can be applied to other
client computing platforms. First, modern operating systems
including Microsoft Windows and Mac OS X already have
code signing mechanism built
in, which can be used for
implementing our mechanism. When it comes to prototyping
the proposed mechanism using API hooking or other similar
techniques, the overall procedure is similar in Unix-like operat-
ing systems such as Mac OS X, Linux, and Solaris; dynamic
component loading is performed by the dlopen() system
call on these platforms, and it works in a similar way as it is
done on Microsoft Windows. This implies that implementing
our mechanism on such platforms is not so different from
what we have done. Even Android uses the same system call
in Android NDK for dynamic component loading, and hence
it can be incorporated with the proposed cross veriﬁcation
mechanism, although this work should start from introducing
signatures for individual components and implementing the
veriﬁcation of the individual components’ signature validity.
We have explained the differences between Android and other
major platforms in Section VII in Related Work.
122122
C. Limitations
Our mechanism cannot protect some attacks using script
ﬁles that are supported on the target platform. For exam-
ple, batch and Visual Basic script ﬁles are loaded and exe-
cuted by already trusted applications, which are cmd.exe,
cscript.exe and wscript.exe on Microsoft Windows.
And if the malicious script ﬁles use only built-in functions
and commands,
they can bypass the proposed cross veri-
ﬁcation. However, it cannot create a new process since it
will be blocked by our cross veriﬁcation; cmd.exe uses
CreateProcess() to spawn a new process.
Standalone malware executable ﬁles that run under its own
process may bypass our mechanism depending on circum-
stances, if they have legitimate digital signatures. Because any
software vendor including tiny ones must have contacted the
operating system vendor, and hence it is included in the trusted
vendor list of the operating system’s core components such as
ﬁle manager (e.g. Explorer on Microsoft Windows). However,
the risk is still smaller than the conventional code signing
mechanism, since our mechanism is application-speciﬁc hence
more ﬁne-grained. For instance, some malware execution cases
such as drive-by download and watering hole attack are
mitigated with the proposed cross veriﬁcation.
Lastly, scalability should be considered; it can be hard work
for software vendors to prepare their components for another
vendors so mutual trust relationship is established between the
two vendors’ components. However, we can envisage an ap-
proach similar to the current software licensing arrangements.
For example, like in the case of usual commercial libraries,
individual developers/small vendors apply for a license or a
developer key, and then the vendor sends a library signed
for the applicant, which can be used as part of the license
as well. In addition, this limitation can be resolved when our
mechanism is extended as discussed in Section VI-A, even
though this may decrease the level of security. Security and
ease of use are usually in trade-off relation, and our security
mechanism can be adjusted depending on user’s security
requirements.
VII. RELATED WORK
In this section, we survey closely related work on the
security of dynamic component loading.
A. Secure Loading/Execution
Chari et al. considered the problem of privilege escalation
via manipulation of ﬁlesystem path names, and proposed a
system-wide approach of having safe path name resolution
as part of the ﬁlesystem itself or a system library, thereby
protecting all applications by default [43]. This technique is
particularly useful in blocking malicious component loading,
while our mechanism can prevent other types of attacks
including general malware binaries.
Payer et al. presented an approach to run untrusted code in
a user-level sandbox [44]. This approach replaces the standard
loader with a security-aware trusted loader. The secure loader
and the sandbox together cooperate to allow controlled exe-
cution of untrusted programs. Our mechanism is more light-
weight than this approach since it only involves executable
loader without requiring sandboxing. In addition, our approach
can be incorporated into the authors’ approach as a mean of
evaluating trust.
Security-enhanced web browsers have been suggested to
reduce the threats from untrusted third-party plugins [45], [46],
[47]. Grier et al. and Wang et al. adopted operating system-
level sandboxing in order to minimise damages from malicious
plugins. In addition, Google Chrome and Apple Safari are
adopting user-level sandboxing models. These techniques aim
to reduce the damages, whereas our mechanism aims to prevent
various attacks including unsafe plugins by disallowing loading
of them.