dination between the directories of the two zones.
Security. No information is leaked about individual call ac-
tivity. However, a global observer can determine an upper
bound on the volume of calls within a zone and between any
given pair of zones. Again, this is a deliberate design de-
cision that signiﬁcantly reduces inter-mix bandwidth at the
cost of revealing some upper bounds on aggregated call vol-
ume among large client populations, which can likely be
estimated anyhow based on the number of clients and the
known call volumes between different parts of the world.
Trafﬁc obfuscation on client, SP, and mix links maintains
security invariants I6: The time series of encrypted packets
on the links of a circuit is uncorrelated with the VoIP payload
carried by the circuit and I7: Manipulating the time series
of encrypted trafﬁc on a network link does not affect the time
series of encrypted trafﬁc on downstream links.
3.5
Join protocol
When a client wishes to join the system, it chooses a zone
and is redirected by that zone’s directory (hardcoded in the
client software) to a mix within the zone. The client then
establishes a symmetric key s with the mix, which is used
for all subsequent communication with the mix, and forms
the outer layer of any onion circuit subsequently established
by the client. Finally, the mix either adopts the client with
a direct link, or redirects the client to one or more of the
superpeers (SPs) connected to the mix. Finally, the client
establishes either a single padded connection to the mix, or
k padded connections to the SPs, in each case encrypted with
symmetric key s. In the case of a mix or superpeer failure, a
client contacts another mix in the same zone and re-joins.
3.6 Superpeer architecture
Next, we describe Herd’s superpeer (SP) architecture. SPs
are an optional component of Herd—the system is fully
functional if all clients attach directly to mixes. However,
SPs can increase Herd’s scalability by reducing the client-
side bandwidth load of mixes by a factor of up to n/a, where
a is the maximum number of active clients (i.e., those mak-
ing calls) in a zone, and n is the number of online clients
attached to a zone. In Herd, n/a is likely to be large (above
645
Mix 
m 
SP 
m 
c2 
m 
c3 
m 
c4 
a) 
m 
c1 
b) 
Mix 
XOR(m1,m2,m3,m4) 
     +M1+M2+M3+M4 
SP 
m1+M1  m2+M2  m3+M3 
c1 
c3 
c2 
m4+M4 
c4 
Figure 2: (a) Downstream channel operation: The SP
forwards packet m received from the mix to each client.
Only the active client can decrypt the packet, others dis-
card the packet as chaff. (b) Upstream channel opera-
tion: The SP forwards to the mix the XOR of packets re-
ceived from clients, concatenated with the list of packet
manifests M.
10), because clients have an incentive to remain online inde-
pendent of their call activity, both to receive calls at unex-
pected times, and to prevent long-term intersection attacks.
SPs are well-connected, highly-available nodes with a
public IP address, who invest resources to support the system
altruistically or in exchange for free calls or payment. Like
clients, SPs are assumed to be continuously available (mod-
ulo power/network outages). SPs are expected to perform in
a way that keeps them in good standing with their mix (else
they will be blacklisted), but are not otherwise trusted.
Note that an SP cannot decrypt the packets it forwards be-
tween client and mix. Moreover, it cannot distinguish chaff
packets from VoIP payload packets, and thus cannot deter-
mine whether a client is active or not.
3.6.1 Routing and network coding
An SP with c attached clients must route information from
its mix link with a rate sufﬁcient to carry r calls to its c client
links, and vice versa, where c ≥ r. Our goal is to do this
without leaking information about clients’ activity to the un-
trusted SPs.
Downstream. Let us ﬁrst consider the downstream direc-
tion. The SP receives incoming packets in rounds of r pack-
ets, where each packet contains VoIP payload for one of the
r active clients. The mix must forward these packets so that
each active client receives the packet destined for it. For this
purpose, the clients attached to an SP are partitioned into r
channels, and each packet in a round of r is forwarded to
a different channel. Each packet includes the initialization
vector (IV) used to encrypt it.
Each channel supports at most one active call. The active
client can decode the packet it receives, while the remain-
ing clients in the channel cannot—they discard the packet as
chaff. To reduce the risk of call blocking when the channel to
which a client attaches is occupied, clients attach to k > 1
channels (possibly at multiple SPs). Figure 2(a) illustrates
the operation of a channel in the downstream direction.
Upstream.
In the upstream direction, in each round, the
SP receives a packet from each client attached to a channel.
Because at most one client can be active in each channel, we
can use a simple form of network coding. The SP simply
forwards to the mix the XOR of the client packets received
in each of the r channels, of which at most one is a VoIP
packets and the rest are chaff. Because the ciphertext of the
chaff packets from the idle clients is predictable to the mix
(the cleartext contains a sequence number and the packets
include the IVs), the mix can trivially recover the r payload
packets from the r XORs it receives.
Along with each XOR packet, the client forwards the
packet manifests that were attached to each client packet
included in the XOR. Each of these manifests is 4 bytes
long, encrypted with s, and includes the client’s id within
the channel, packet sequence number, and a signaling bit
(described below). The information included in the mani-
fest enables the mix to quickly decode the XOR even in the
case of lost or delayed packets, at the expense of slightly
more bandwidth on the mix–SP links for the manifests. Fig-
ure 2(b) illustrates the operation of a channel in the upstream
direction.
Note that a malicious SP or client could deny service by
sending an incorrect manifest or an unexpected chaff packet.
In this case, the mix asks the SP to send the full packets
(which the SP is expected to buffer for a couple of rounds)
from which the packets were computed, enabling the mix to
identify, drop, and blacklist the culprit’s Herd account.
3.6.2 Signaling
Next, we describe how mix and client signal incoming and
outgoing calls, in such a way that the SP does not learn when
a call starts or ends, or which client is calling or being called.
In the case of an incoming call, the mix simply chooses an
available channel to which the callee attaches (if any), and
encrypts downstream packets in the channel with the key s
shared with the callee. The callee, which like every client,
tries to decrypt every incoming packet on each channel, is
able to decrypt the information signaling an incoming call,
responds on the same channel, and once it has accepted the
call, receives VoIP packets for the duration of the call.
In the case of an outgoing call, the caller sets the signaling
bit in the manifest of the chaff packets it sends to the mix via
the SPs. Note that the caller does not know which, if any,
channel is available. The mix will respond on an available
channel to which the caller attaches (if any), as in the case of
an incoming call. The caller then provides signaling infor-
mation for the desired outgoing call on the available channel.
3.6.3 Channel allocation
Next, we describe how the mixes allocate joining clients
to channels, and incoming/outgoing calls to channels. With-
out loss of generality, we consider a single mix. (The set of
clients and SPS attached to different mixes are disjoint.)
Each client attaches to k channels. As we will show, k = 3
provides a good balance between blocking probability and
client bandwidth overhead. The number of channels C per
zone is chosen to exceed the expected number of active calls
a within the zone during the busiest period, i.e., C ≥ a.
One might consider changing C dynamically to accom-
modate diurnal load variations efﬁciently. However, such
reconﬁgurations have signiﬁcant overheads due to clients
(cid:2)(cid:6)(cid:7)(cid:1)
(cid:4)(cid:3)(cid:9)(cid:1)
(cid:4)(cid:3)(cid:10)(cid:1)
(cid:4)(cid:3)(cid:11)(cid:1)
(cid:4)(cid:3)(cid:12)(cid:1)
(cid:5)(cid:9)(cid:1)
(cid:5)(cid:10)(cid:1)
(cid:5)(cid:11)(cid:1)
(cid:5)(cid:12)(cid:1)
(cid:5)(cid:13)(cid:1)
(cid:5)(cid:14)(cid:1)
Figure 3: SP conﬁguration with k=2, N=6, C=4, where
each of the four SPs supports one channel.
changing channels, and care must be taken not to leak in-
formation that could aid in long-term intersection attacks.
Therefore, in our design, conﬁguration changes occur in-
frequently and under administrator control, as necessary to
accommodate changes in the client population and call vol-
ume.
The mix allocates a new client to k distinct channels. We
use a greedy algorithm that picks k distinct channels ran-
domly from the least occupied channels. Figure 3 shows an
example conﬁguration with 4 SPs, 6 clients, and k = 2.
An ideal conﬁguration should enable any subset of C
clients to make concurrent calls, thus imposing no con-
straints on the set of active clients. The toy conﬁguration in
Figure 3 has this property, but unfortunately, it is infeasible
in large conﬁgurations for reasonable choices of k and C. In
practical conﬁgurations, the maximal number of concurrent
calls varies among different subsets of C clients, depending
on how many channels the subset collectively attaches to.
Note that these connectivity limitation could be overcome
trivially by dynamically changing the association of clients
to channels, for instance by changing the “routing tables” at
the SPs. Unfortunately, dynamic routing inevitably leaks in-
formation related to call activity, which could be used as part
of an intersection attacks. Therefore, Herd uses static allo-
cations of clients to channels. We will show experimentally
in Section 4.1.6 that, despite the resulting connectivity con-
straints, the blocking probability remains good in practice.
Dynamic channel allocation: When an outgoing/incoming
call starts, the mix must dynamically allocate to the call an
available channel (if any) among the k channels to which
the caller/callee attaches. This is an instance of the online
bipartite matching problem. A simple, optimal algorithm
exists for this problem [36]. It initially ranks all channels
randomly, and then allocates the available channel with the
highest rank in each step.
3.6.4 Superpeer security
With the routing and coding scheme described above, a set
of colluding SPs can learn the static assignment of clients to
channels. The channel assignment reveals some constraints
on the possible sets of active clients. Clearly, at most C
clients can be active within the zone at any one time. Due
to connectivity constraints, the maximal number of active
calls for a speciﬁc set of C clients may be lower than C and
known to an adversary. However, without information about
646
call activity, this information is of little use to an adversary.
Call activity cannot be observed directly or indirectly either
by the SPs or by an adversary with access to the network.
A compromised SP can drop or delay encrypted packets
it forwards. However, mixes blacklist SPs that fail to meet a
high standard of packet loss rate and jitter. Legitimate SPs
that fail to meet the standard due to an unreliable network
may require their clients to use error-correcting codes on
their encrypted channels to the mix, thus reducing the ef-
fective loss rate to acceptable levels.
Superpeers maintain security invariant I8: Superpeers do
not know which of its clients are active at any time. More-
over, an SP cannot manipulate the encrypted trafﬁc of its
clients without being banned.
3.7 Security
Next, we argue informally that Herd’s security invariants
(summarized below) provide zone anonymity.
I1: The encrypted content on successive links of a circuit is
uncorrelated.
I2: The interior mixes on a circuit know only the previous
and next hop on the circuit.
I3: The caller’s mix knows only the caller and the next mix
on the circuit; the callee’s mix knows only the callee and the
previous mix on the circuit.
I4: A circuit includes two (not necessarily distinct) mixes in
each of the caller and callee’s zone. Given I2, this implies
that, from the perspective of a mix in the caller’s zone, the
callee is equally likely to attach to any of the mixes in the
callee’s zone, and vice versa.
I5: Any mix in a client’s zone is equally likely to be the
client’s rendez-vous mix. Thus, knowledge of a client’s
rendez-vous mix does not reveal any information about
which mix the client attaches to.
I6: The time series of encrypted packets on successive links
of a circuit is uncorrelated with the VoIP payload carried by
the circuit.
I7: Manipulating the time series of encrypted trafﬁc on a
network link does not affect the time series of encrypted traf-
ﬁc on downstream links.
I8: Superpeers do not know which of its clients are active at
any time. Moreover, an SP cannot manipulate the encrypted
trafﬁc of its clients without being banned.
I2–I5 jointly maintain zone anonymity for a caller even if
the callee’s zone is compromised, and vice versa. I1 and I6
maintain zone anonymity in the presence of a global, pas-
sive eavesdropper. I7 maintains zone anonymity despite an
active network attacker. And invariant I8 maintains zone
anonymity despite compromised SPs. A formal analysis of
Herd’s security properties remains as future work.
Next, we discuss speciﬁc attacks within our threat model
and how Herd defends against them.
Passive trafﬁc analysis attack. The trafﬁc rate on links
does not depend on individual payload ﬂows. Short-term
trafﬁc analysis is therefore unproductive. Furthermore, the
overlay topology is independent of the underlying workload.
Therefore, the adversary cannot tell which clients are com-
municating, even over long periods.
Active trafﬁc analysis attack. Here, the adversary manip-
ulates the ﬂow of encrypted, chaffed Herd trafﬁc by delay-
ing, dropping, or replaying packets, or by shutting down or
otherwise causing the intermittent failure of clients, SPs, or
mixes. Doing so has no impact on the rate of the downstream
chaffed trafﬁc, so it does not help the adversary to trace pay-
load ﬂows. For that, the adversary would require access to
a client’s payload ﬂow at the other end of a Herd circuit.
However, this case is ruled out by our threat model.
Moreover, Herd’s design makes it hard to exploit SPs for
active attacks even if the attacker has access to the payload
ﬂow on the other end, because mixes ban SPs that manifest
signiﬁcant jitter or packet loss.
Compromised caller/callee. The rendezvous mechanism
ensures that compromised callers or callees cannot learn
anything other than the zone of their communication part-
ner from the system. However, a compromised participant
could conceivably try to estimate the distance to their peer
by measuring the round-trip latency on the audio channel.
As part of future work, we are planning to investigate if such
an attack is feasible. If so, it should be possible to add ar-
tiﬁcial delay up to the boundaries of the call’s MOS quality
level, as predicted by the E-Model [34].
Long-term intersection attacks. In Section 4.1.5, we will
show experimentally the power of long-term intersection at-
tacks against unanonymized voice calls. Herd makes such
attacks unproductive, because it makes it impossible to ob-
serve when a user makes a call. Since users are online vir-
tually all the time, an adversary cannot even observe signiﬁ-
cant periods during which a client could not make a call.
Sybil attacks. Like all open anonymous communication
systems, Herd is susceptible to Sybil attacks, where an ad-
versary controls a large number of clients or superpeers. SPs
cannot observe which of their clients are active. Therefore,
an adversary who controls SPs can learn only static, weak
constraints on the possible sets of concurrently active clients,
which are not useful without information about call activity.
If the adversary manages to control a large fraction of the
clients attached to a zone, he is able to reduce the anonymity
of the remaining legitimate clients proportionally. Since
zones serve a large geographic area and user community,
however, such an attack would be difﬁcult even with large
amounts of resources. Another approach for an adversary
is to control all but one of the clients within an SP channel,
leaving the remaining legitimate client as the only possible
active user. However, such an attack would be difﬁcult be-
cause the mix controls which SPs a client attaches to.
An adversary can also use Sybils to deny service. As de-
scribed above, a misbehaving client or SP can be detected
and blacklisted by the mix. To circumvent the blacklist, the
adversary has to register a new account, from a new IP ad-
dress and using a different payment channel, making such