          roles:
            - rhel-system-roles.certificate
        ```
    :::
4.  保存该文件。
5.  运行 playbook:
    ``` literallayout
    $ ansible-playbook -i inventory.file request-certificate.yml
    ```
:::
::: itemizedlist
**其它资源**
-   有关 `certificate_requests`{.literal} 变量中使用的参数以及证书
    `系统角色`{.literal} 的额外信息，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.certificate/README.md`{.literal}
    文件。
-   有关 `ansible-playbook`{.literal} 命令的详情，请查看
    `ansible-playbook(1)`{.literal} man page。
:::
:::
::: section
::: titlepage
# []{#requesting-certificates-using-rhel-system-roles_configuring-and-managing-idm.html#requesting-a-new-certificate-from-idm-ca-using-the-certificate-system-role_requesting-certificates-using-rhel-system-roles}使用证书系统角色从 IdM CA 请求一个新证书 {.title}
:::
使用证书系统角色时，您可以使用 Red Hat Ansible Engine
在使用带有集成证书颁发机构(CA)的 IdM 服务器时发布证书。因此，当使用 IdM
作为 CA 时，您可以高效且一致地管理多个系统的证书信任链。
此过程使用 `certmonger 供应商`{.literal}，并通过 `getcert`{.literal}
命令请求证书。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
默认情况下，`certmonger`{.literal}
会在证书过期前自动尝试续订证书。您可以通过将 Ansible playbook 中的
`auto_renew`{.literal} 参数设置为 `no`{.literal} 来禁用此功能。
:::
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要部署 `证书`{.literal} 解决方案的系统中安装 Ansible。
    :::
-   您已在要运行 playbook 的系统中安装了 `rhel-system-roles`{.literal}
    软件包。
    有关 RHEL 系统角色以及如何应用它们的详情，请参阅 [RHEL
    系统角色入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/administration_and_configuration_tasks_using_system_roles_in_rhel/getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel#intro-to-rhel-system-roles_getting-started-with-rhel-system-roles){.link}。
:::
::: orderedlist
**流程**
1.  [*可选：*]{.emphasis} 创建一个清单文件，如
    `inventory.file`{.literal} ：
    ``` literallayout
    $ touch inventory.file
    ```
2.  打开清单文件并定义要请求证书的主机，例如：
    ``` literallayout
    [webserver]
    server.idm.example.com
    ```
3.  创建 playbook 文件，如 `request-certificate.yml`{.literal}:
    ::: itemizedlist
    -   将 `hosts`{.literal} 设置为包含您要请求证书的主机，如
        `webserver`{.literal}。
    -   将 `certificate_requests`{.literal} 变量设置为包含以下项：
        ::: itemizedlist
        -   将 `name`{.literal} 参数设置为证书的所需名称，如
            `mycert`{.literal}。
        -   将 `dns`{.literal} 参数设置为证书中包含的域，如
            `www.example.com`{.literal}。
        -   将 `principal`{.literal} 参数设置为指定 Kerberos 主体，如
            `HTTP/PI:EMAIL`{.literal}。
        -   将 `ca`{.literal} 参数设置为 `ipa`{.literal}。
        :::
    -   在 `roles`{.literal} 下设置
        `rhel-system-roles.certificate`{.literal} 角色。
        这是本例的 playbook 文件：
        ``` literallayout
        ---
        - hosts: webserver
          vars:
            certificate_requests:
              - name: mycert
                dns: www.example.com
                principal: HTTP/PI:EMAIL
                ca: ipa
          roles:
            - rhel-system-roles.certificate
        ```
    :::
4.  保存该文件。
5.  运行 playbook:
    ``` literallayout
    $ ansible-playbook -i inventory.file request-certificate.yml
    ```
:::
::: itemizedlist
**其它资源**
-   有关 `certificate_requests`{.literal} 变量中使用的参数以及证书
    `系统角色`{.literal} 的额外信息，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.certificate/README.md`{.literal}
    文件。
-   有关 `ansible-playbook`{.literal} 命令的详情，请查看
    `ansible-playbook(1)`{.literal} man page。
:::
:::
::: section
::: titlepage
# []{#requesting-certificates-using-rhel-system-roles_configuring-and-managing-idm.html#specifying-commands-to-run-before-or-after-certificate-issuance-using-the-certificate-system-role_requesting-certificates-using-rhel-system-roles}指定在使用证书系统角色前或之后要运行的命令 {.title}
:::
使用证书系统角色，您可以使用 Red Hat Ansible Engine
在签发或更新证书之前和之后执行命令。
在以下示例中，管理员确保在为 `www.example.com`{.literal}
发布或更新自签名证书前停止 `httpd`{.literal} 服务，然后再重启该服务。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
默认情况下，`certmonger`{.literal}
会在证书过期前自动尝试续订证书。您可以通过将 Ansible playbook 中的
`auto_renew`{.literal} 参数设置为 `no`{.literal} 来禁用此功能。
:::
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要部署 `证书`{.literal} 解决方案的系统中安装 Ansible。
    :::
-   您已在要运行 playbook 的系统中安装了 `rhel-system-roles`{.literal}
    软件包。
    有关 RHEL 系统角色以及如何应用它们的详情，请参阅 [RHEL
    系统角色入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/administration_and_configuration_tasks_using_system_roles_in_rhel/getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel#intro-to-rhel-system-roles_getting-started-with-rhel-system-roles){.link}。
:::
::: orderedlist
**流程**
1.  [*可选：*]{.emphasis} 创建一个清单文件，如
    `inventory.file`{.literal} ：
    ``` literallayout
    $ touch inventory.file
    ```
2.  打开清单文件并定义要请求证书的主机，例如：
    ``` literallayout
    [webserver]
    server.idm.example.com
    ```
3.  创建 playbook 文件，如 `request-certificate.yml`{.literal}:
    ::: itemizedlist
    -   将 `hosts`{.literal} 设置为包含您要请求证书的主机，如
        `webserver`{.literal}。
    -   将 `certificate_requests`{.literal} 变量设置为包含以下项：
        ::: itemizedlist
        -   将 `name`{.literal} 参数设置为证书的所需名称，如
            `mycert`{.literal}。
        -   将 `dns`{.literal} 参数设置为证书中包含的域，如
            `www.example.com`{.literal}。
        -   将 `ca`{.literal} 参数设置为您要用来发布证书的 CA，如
            `自签名。`{.literal}
        -   将 `run_before`{.literal}
            参数设置为在签发或续订证书之前要执行的命令，如
            `systemctl stop httpd.service`{.literal}。
        -   将 `run_after`{.literal}
            参数设置为在签发或续订此证书后要执行的命令，如
            `systemctl start httpd.service`{.literal}。
        :::
    -   在 `roles`{.literal} 下设置
        `rhel-system-roles.certificate`{.literal} 角色。
        这是本例的 playbook 文件：
        ``` literallayout
        ---
        - hosts: webserver
          vars:
            certificate_requests:
              - name: mycert
                dns: www.example.com
                ca: self-sign
                run_before: systemctl stop httpd.service
                run_after: systemctl start httpd.service
          roles:
            - linux-system-roles.certificate
        ```
    :::
4.  保存该文件。
5.  运行 playbook:
    ``` literallayout
    $ ansible-playbook -i inventory.file request-certificate.yml
    ```
:::
::: itemizedlist
**其它资源**
-   有关 `certificate_requests`{.literal} 变量中使用的参数以及证书
    `系统角色`{.literal} 的额外信息，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.certificate/README.md`{.literal}
    文件。
-   有关 `ansible-playbook`{.literal} 命令的详情，请查看
    `ansible-playbook(1)`{.literal} man page。
:::
:::
:::
[]{#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html}
::: chapter
::: titlepage
# []{#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm}第 60 章 将应用程序限制为只信任证书子集 {.title}
:::
如果您的 Identity
Management(IdM)安装配置了集成证书系统(CS)证书颁发机构(CA)，您可以创建轻量级子
CA。您创建的所有子 CA 都从属于证书系统的主 CA，即 [**ipa**]{.strong}
CA。
[*在这种情况下，轻量*]{.emphasis} [*级子 CA 意味着为特定目的发布证书的子
CA*]{.emphasis}。例如，轻量级子 CA
允许您配置服务，如虚拟专用网络(VPN)网关和 Web 浏览器，以仅接受 [*子 CA
A*]{.emphasis} 发布的证书。通过将其他服务配置为仅接受由 [*子 CA
B*]{.emphasis} 发布的证书，您可以防止它们接受 [*子 CA、主
CA（*]{.emphasis} 即 `ipa`{.literal} CA）和两者之间的任何中间子 CA
发布的证书。
如果您撤销了子 CA 的中间证书，[则正确配置的客户端会自动将此子 CA
发布的所有证书视为无效](#invalidating-a-specific-group-of-related-certificates-quickly_configuring-and-managing-idm.html "第 61 章 快速使特定一组相关证书无效"){.link}。所有其他直接由
root CA、ipa [**或其他**]{.strong} 子 CA 发布的证书保持有效。
本节使用 Apache Web
服务器的示例来说明如何将应用限制为仅信任某一证书子集。完成本节以限制 IdM
客户端上运行的 Web 服务器使用 [**webserver-ca**]{.strong} IdM 子 CA
发布的证书，并要求用户使用 web [**client-ca IdM 子 CA 发布的用户证书向
web**]{.strong} 服务器进行身份验证。
您需要执行的步骤有：
::: orderedlist
1.  [创建 IdM 子
    CA](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#creating-a-lightweight-sub-ca_restricting-an-application-to-trust-a-subset-of-certs "创建轻量级子 CA"){.link}
2.  [从 IdM WebUI 下载子 CA
    证书](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#downloading-the-sub-CA-certificate-from-IdM-WebUI_restricting-an-application-to-trust-a-subset-of-certs "从 IdM WebUI 下载子 CA 证书"){.link}
3.  [创建 CA ACL，指定正确组合用户、服务和
    CA，以及使用的证书配置集](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#creating-a-ca-acl-specifying-the-profile-users-services-and-CAs_restricting-an-application-to-trust-a-subset-of-certs "为 Web 服务器和客户端身份验证创建 CA ACL"){.link}
4.  [从 IdM 子 CA 请求在 IdM 客户端上运行的 web
    服务的证书](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#obtain-service-cert-with-certmonger_restricting-an-application-to-trust-a-subset-of-certs "使用 certmonger 为服务获取 IdM 证书"){.link}
5.  [设置单实例 Apache HTTP
    服务器](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#setting-up-a-single-instance-apache-http-server_restricting-an-application-to-trust-a-subset-of-certs "设置单实例 Apache HTTP 服务器"){.link}
6.  [向 Apache HTTP 服务器添加 TLS
    加密](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#proc_adding-tls-encryption-to-an-apache-http-server-configuration_restricting-an-application-to-trust-a-subset-of-certs "在 Apache HTTP 服务器中添加 TLS 加密"){.link}
7.  [在 Apache HTTP 服务器中设置支持的 TLS
    协议版本](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#setting-the-supported-tls-protocol-versions-on-an-apache-http-server_restricting-an-application-to-trust-a-subset-of-certs "在 Apache HTTP 服务器中设置支持的 TLS 协议版本"){.link}
8.  [在 Apache HTTP
    服务器上设置受支持的密码](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#setting-the-supported-ciphers-on-an-apache-http-server_restricting-an-application-to-trust-a-subset-of-certs "在 Apache HTTP 服务器中设置支持的密码"){.link}
9.  [在 web 服务器中配置 TLS
    客户端证书身份验证](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#configuring-tls-client-certificate-authentication_restricting-an-application-to-trust-a-subset-of-certs "配置 TLS 客户端证书身份验证"){.link}
10. [从 IdM 子 CA
    请求用户的证书，并将其导出到客户端](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#requesting-and-exporting-a-user-certificate_restricting-an-application-to-trust-a-subset-of-certs "请求新的用户证书并将其导出到客户端"){.link}
11. [将用户证书导入到浏览器中，并将浏览器配置为信任子 CA
    证书](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#configuring-browser-for-cert-auth_restricting-an-application-to-trust-a-subset-of-certs "配置浏览器以启用证书身份验证"){.link}
:::
::: section
::: titlepage
# []{#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#creating-a-lightweight-sub-ca_restricting-an-application-to-trust-a-subset-of-certs}创建轻量级子 CA {.title}
:::
有关创建子 CA 的详情，请参考：
::: itemizedlist
-   ["从 IdM WebUI 创建子
    CA"一节](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#creating-a-sub-CA-from-IdM-WebUI_restricting-an-application-to-trust-a-subset-of-certs "从 IdM WebUI 创建子 CA"){.xref}
-   ["从 IdM CLI 创建子
    CA"一节](#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#creating-a-sub-CA-from-IdM-CLI_restricting-an-application-to-trust-a-subset-of-certs "从 IdM CLI 创建子 CA"){.xref}
:::
::: section
::: titlepage
## []{#restricting-an-application-to-trust-only-a-subset-of-certificates_configuring-and-managing-idm.html#creating-a-sub-CA-from-IdM-WebUI_restricting-an-application-to-trust-a-subset-of-certs}从 IdM WebUI 创建子 CA {.title}