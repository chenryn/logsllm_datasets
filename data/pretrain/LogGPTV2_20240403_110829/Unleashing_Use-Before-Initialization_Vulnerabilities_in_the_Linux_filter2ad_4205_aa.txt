title:Unleashing Use-Before-Initialization Vulnerabilities in the Linux
Kernel Using Targeted Stack Spraying
author:Kangjie Lu and
Marie-Therese Walter and
David Pfaff and
Stefan N&quot;umberger and
Wenke Lee and
Michael Backes
Unleashing Use-Before-Initialization Vulnerabilities
in the Linux Kernel Using Targeted Stack Spraying
Kangjie Lu†, Marie-Therese Walter‡, David Pfaff‡, Stefan Nürnberger‡§, Wenke Lee†, and Michael Backes‡¶
§DFKI, ¶MPI-SWS, ‡CISPA, Saarland University
†Georgia Institute of Technology
{kjlu, wenke}@cc.gatech.edu, {walter, pfaff, backes}@cs.uni-saarland.de, PI:EMAIL
Saarland Informatics Campus
Abstract—A common type of memory error in the Linux
kernel is using uninitialized variables (uninitialized use). Unini-
tialized uses not only cause undefined behaviors but also impose a
severe security risk if an attacker takes control of the uninitialized
variables. However, reliably exploiting uninitialized uses on the
kernel stack has been considered infeasible until now since the
code executed prior to triggering the vulnerability must leave an
attacker-controlled pattern on the stack. Therefore, uninitialized
uses are largely overlooked and regarded as undefined behaviors,
rather than security vulnerabilities. In particular, full memory-
safety techniques (e.g., SoftBound+CETS) exclude uninitialized
use as a prevention target, and widely used systems such as
OpenSSL even use uninitialized memory as a randomness source.
In this paper, we propose a fully automated targeted stack-
spraying approach for the Linux kernel that reliably facilitates
the exploitation of uninitialized uses. Our targeted stack-spraying
includes two techniques:
(1) a deterministic stack spraying
technique that suitably combines tailored symbolic execution and
guided fuzzing to identify kernel inputs that user-mode programs
can use to deterministically guide kernel code paths and thereby
leave attacker-controlled data on the kernel stack, and (2) an
exhaustive memory spraying technique that uses memory occu-
pation and pollution to reliably control a large region of the kernel
stack. We show that our targeted stack-spraying approach allows
attackers to reliably control more than 91% of the Linux kernel
stack, which, in combination with uninitialized-use vulnerabilities,
suffices for a privilege escalation attack. As a countermeasure, we
propose a compiler-based mechanism that initializes potentially
unsafe pointer-type fields with almost no performance overhead.
Our results show that uninitialized use is a severe attack vector
that can be readily exploited with targeted stack-spraying, so
future memory-safety techniques should consider it a prevention
target, and systems should not use uninitialized memory as a
randomness source.
I.
INTRODUCTION
In programming languages such as C and C++, programmers
decide whether to initialize a variable with a deterministic
value when it is allocated. C enthusiasts often argue that if
programmers know that the code will later set a proper value
anyway, initialization on allocations is an unnecessary use
of precious CPU cycles. This argument makes sense from
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes  is  granted  provided  that  copies  bear  this  notice  and  the  full  citation 
on  the  first p age. R eproduction f or c ommercial p urposes i s s trictly prohibited 
without the prior written consent of the Internet Society, the first-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23387
a functional point of view since such an unnecessary use
of CPU cycles can cause a significant runtime overhead if
it occurs up to millions of times per second, as it does in
programs such as in OS kernels. However, manually keeping
track of all possible code paths to ensure proper initialization
is an error-prone task. Even worse, automatic detection of
uninitialized use, such as the warning of compilers, is inaccurate
for several reasons. First, inter-procedural tracking often leads
to false positives and false negatives because of problems such
as aliasing. Second, whether an uninitialized-use warning is
justified is highly subjective: While some programmers may
prefer a warning in every possible case, others might consider a
warning unnecessary if it would not cause an observable error
or is likely a false positive.
Uninitialized data represents arbitrary values that were
coincidentally stored in the memory. If the uninitialized data is
used for control flow, such as the case in which an uninitialized
function pointer is dereferenced, the execution of the program
or even the kernel can potentially be hijacked. A recent example
of that control flow hijacking is caused by uninitialized use is
shown in Figure 1. Here, the pointer backlog, defined at line
7, is not initialized in a code path that can be triggered only
by special inputs (i.e., when cpg->eng_st != ENGINE_IDLE),
which is dereferenced at line 15. An attacker can exploit such
an uninitialized-use vulnerability to achieve arbitrary code
execution by controlling the value of backlog, such as making
backlog point to a function pointer to malicious code.
Despite
their
dangerous
potentially
consequences,
uninitialized-use bugs are very seldom classified as security
vulnerabilities [16, 49], which arguably originates from
the perception that it is hard for an attacker to control the
memory layout in order to make dereferencing exploitable. In
particular, widely used systems such as OpenSSL explicitly
use uninitialized data for the generation of entropy (see
function ssleay_rand_bytes() in the SSLeay implementation)
and hence ground their security on the assumption that such
data is impossible to control or predict. On the other hand,
our study revealed that in 2015 and 2016 alone, although
16 uninitialized-use vulnerabilities have been patched in the
Linux Kernel, only one was reported for a CVE. In fact,
since 2004, only eight uninitialized-use vulnerabilities in the
Linux kernel have been reported for a CVE. For example,
the severe uninitialized-use vulnerability shown in Figure 1
has not been reported for a CVE. From a security point of
view, uninitialized use or more precisely, temporal memory
errors should be included as a prevention target in state-of-
the-art memory protection mechanisms. However, advanced
security mechanisms such as SoftBound+CETS [30, 31] and
/* back log is defined without initialization */
struct crypto_async_request *backlog;
if (cpg->eng_st == ENGINE_IDLE) {
backlog = crypto_get_backlog(&cpg->queue);
* uninteresting code lines are omitted
*/
1 /* file: drivers/crypto/mv_cesa.c
2
3
4 static int queue_manag(void *data)
5 {
6
7
8
9
10
11
12
13
14
15
16
17
18
19 }
if (backlog) {
return 0;
}
}
/* uninitialized pointer dereferenced! */
backlog->complete(backlog, -EINPROGRESS);
Fig. 1: A recent uninitialized pointer dereference vulnerability
discovered in the Linux kernel and patched in April 2015. backlog,
a pointer that is not initialized if cpg->eng_st != ENGINE_IDLE, is
dereferenced later on. Therefore, arbitrary code execution occurs if
an attacker can control the value of backlog on the kernel stack.
WatchdogLite [29]), which claim full memory safety, do not
currently cover uninitialized uses.
A. Challenges
Most uninitialized uses stem from the stack rather than the
heap: Out of the 16 aforementioned uninitialized-use variables
in the Linux kernel, 11 variables are stored on the stack. In
contrast to uninitialized memory on the heap, that on the stack
is hard to control for several reasons:
1) Stack memory is frequently and unpredictably reused by
other parts of code; hence, prepared data on the stack is
likely to be overwritten by other data.
2) The size of the stack objects is usually small and fixed,
so stack control is inherently challenging.
3) Stack depth (especially for the kernel) is strictly checked,
so the broad control of the stack is challenging.
As a result, to control the value of an uninitialized variable,
any successful attack needs to overcome these three challenges.
To overcome these challenges, we need to fulfill three require-
ments:
R1: The relative address of the uninitialized variable inside
the stack must be known.
R2: The memory at the discovered address of R1 must be
controllable. That is, we can write arbitrary data to this
memory.
R3: Data written in R2 must not be overwritten before it
is used by the vulnerable function that suffers from an
uninitialized use.
Until now, fulfilling all three requirements has constituted a
manual and labor-intense task if it succeeds at all. In the
past, successful exploits relied on other memory-corruption
vulnerabilities to fulfill requirement R2, or they were simply
crafted in an unprincipled manner. For example, as we will
show in §VI-F, Cook [12] found that the syscall with the
uninitialized-pointer dereferencing vulnerability could also save
some user-controlled data on the stack by manually tuning the
2
parameters, which is uncommon in practice. As this finding
was not backed up by a principled methodology, it was a “lucky
shot.” In contrast, we will show that automatic control of the
uninitialized memory can be achieved in a more general way.
B. Contributions
In this work, we show that we can meet requirement
R2 without an additional memory-corruption vulnerability or
special assumptions. In particular, we show that almost the
whole kernel stack is controllable to a local attacker by either
executing syscalls based on how they leave the stack after
they return or exhausting memory and guiding stack allocation.
We first survey existing reported and patched uninitialized-use
vulnerabilities in the Linux kernel and then propose the reliable
targeted stack-spraying technique to write and retain arbitrary
data on the kernel stack.
The core of the fully automated targeted stack spraying
includes a deterministic stack spraying technique and a reliable
exhaustive memory spraying technique. The deterministic stack
spraying technique consists of three components: a tailored
symbolic execution engine that explores paths and outputs
the concrete parameters to trigger the paths; a guided fuzzer
that takes as input information generated by the symbolic
execution engine to verify that stack control is indeed achieved;
and a coordinator that safely and efficiently parallelizes the
symbolic execution engine and the fuzzer. The exhausting
memory spraying technique complements deterministic stack
spraying by strategically consuming a huge region of memory
to guide stack allocations and preparing malicious data in the
memory pages that will be used by the guided stack allocations.
Combining both approaches allows us to reliably control almost
the whole kernel stack.
We have implemented both deterministic stack spraying
and exhausting memory spraying. The deterministic stack
sprayer is based on the S2E [11] symbolic execution engine
and the Trinity [18] syscall fuzzer. As we need concrete test
cases to use S2E, we implemented an automated test case
generator that produces S2E test cases for each syscall. To
maximize the coverage, we also implemented an S2E plugin
that identifies loops in the kernel so that our guided fuzzer
can selectively explore loop-related parameters. The exhaustive
memory sprayer is implemented as a user-level program that
runs before triggering an uninitialized-use vulnerability. Using
kprobes [2], we also implemented a checker that scans the
stack memory at each syscall entry or syscall return to verify
that we can indeed control the kernel stack.
To evaluate the performance of the targeted stack-spraying,
we measured the range, the distribution, and the frequency of
control and the time it takes to achieve control. Our evaluation
results show that we are able to control an impressive range
of 91% of the kernel stack in total. While exhaustive memory
spraying reliably controls 89% of the kernel stack on average,
deterministic stack spraying controls 32% of the frequently
used stack region, which cannot be reached by exhaustive
memory spraying. By adapting Cook’s attack to our technique,
the attacker can automatically prepare the malicious pointer on
the kernel stack and successfully launch an arbitrary memory
write or even a privilege escalation attack without the need for
known memory corruptions or any special assumptions.
reliably writes arbitrary data to the kernel stack.
In a nutshell, this paper makes the following contributions:
• We propose automated targeted stack-spraying, which
• We leverage tailored symbolic execution and guided
fuzzing to deterministically control the frequently used
stack region, and design a strategy to control dynamically
allocated kernel memory, including the kernel stack.
• We show that uninitialized memory on the kernel stack
is controllable. Future memory-safety techniques should
include uninitialized use as a prevention target.
• We propose a practical mitigation against uninitialized-use
exploits with negligible performance overhead.
II. UNINITIALIZED USES AND THE KERNEL STACK
A. Uninitialized Uses in OS Kernels
In this section, we present uninitialized-use issues in OS
kernels. We first investigate how widespread uninitialized-use
vulnerabilities actually are in the Linux kernel and how aware
people are of this problem. To this end, we have manually
analyzed the reported Common Vulnerabilities and Exposures
(CVE) entries that lead to privilege escalation attacks in the
Linux kernel since 2004 [36], and the commit log of the
Linux kernel git repository [48], which dates back to 2005.
To reduce the huge number of commits to a manageable
size, we mostly concentrated on the commit log messages
between the years 2015 and 2016. For the CVEs, we find
that eight out of 199 (4%) privilege escalation vulnerabilities
reported since 2004 are caused by the use of uninitialized
objects or pointers. For Linux kernel commit messages, we
first identified candidates of uninitialized use by inspecting
the commit messages using keywords such as uninitialized
pointer dereference and undefined pointer, which resulted in
52 candidate commits from 2015 and 2016, 28 of which were
subsequently filtered out by our manual analysis because they
are not exploitable (e.g., NULL pointer dereference bugs).
Out of the remaining 24 cases, eight are uninitialized pointer-
based reads, which can lead to information leaks, and 16
are uninitialized pointer-based writes or function calls, which
are particularly interesting to attackers. We further inspected
these 16 interesting cases and found that 11 cases (69%) are
from the stack while only five cases are from the heap. These
findings not only show that uninitialized-use vulnerabilities are
quite common in the Linux kernel but also indicate that these
vulnerabilities are not considered particularly security-relevant
or even not reported at all. Moreover, our findings confirm
that most uninitialized variables are from the stack rather than
the heap, which is a significant difference from use-after-free
vulnerabilities.
B. Kernel Stack Management
Since most uninitialized variables are from stack, our
primary focus lies on vulnerabilities caused by uninitialized
uses of stack variables and pointers in the Linux kernel, and
thus understanding how Linux manages its kernel stacks and
which features it offers in this regard is important. In Linux,
every thread has its own kernel stack allocated in the kernel
memory space with the maximum size of the stack depending
on the specific Linux version. In general, the stack is 4KB or
8KB for a 32-bit OS (x86) and 8KB or 16KB for a 64-bit OS
3
Fig. 2: The profile for stack usage of syscalls in the Linux kernel.
The total size of the kernel stack is 16KB. 90% syscalls use less than
1,260 bytes aligned to stack base. The average stack usage is less
than 1,000 bytes, and the vast majority of stack objects are allocated
within the highest 1KB stack region.
(x86-64), which is quite small compared to the default stack
size soft limit of 8MB for Linux user space stacks. The special
data structure struct thread_info, whose size is 104-byte
in our system, is saved at the stack top (low address). The
fundamental goal behind limiting the kernel stack size is to