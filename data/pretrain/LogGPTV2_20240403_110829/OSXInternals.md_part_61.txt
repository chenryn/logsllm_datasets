saved GPR3 in the process control block. It also decrements SRR0 by one instruction to cause
the cerror() routine to be executed upon return to user space.
 If error is 0, the system call returned success. unix_syscall() copies the return values from
the uthread structure to the saved GPR3 and GPR4 in the process control block. Table 610
shows how the return values are handled.
Table 610. Handling of BSD System Call Return Values
Source for
Call Return Type Source for GPR3 GPR4
Erroneous return The error variable Nothing
_SYSCALL_RET_INT_T uu_rval[0] uu_rval[1]
_SYSCALL_RET_UINT_T uu_rval[0] uu_rval[1]
_SYSCALL_RET_OFF_T (32-bit process) uu_rval[0] uu_rval[1]
_SYSCALL_RET_OFF_T (64-bit process) uu_rval[0] and uu_rval The value 0
[1] as a single u_int64_t
value
_SYSCALL_RET_ADDR_T uu_rval[0] and uu_rval The value 0
[1] as a single
user_addr_t value
_SYSCALL_RET_SIZE_T uu_rval[0] and uu_rval The value 0
[1] as a single
user_addr_t value
_SYSCALL_RET_SSIZE_T uu_rval[0] and uu_rval The value 0
[1] as a single
user_addr_t value
_SYSCALL_RET_NONE Nothing Nothing
Finally, to return to user mode, unix_syscall() calls thread_exception_return()
[osfmk/ppc/hw_exception.s], which checks for outstanding ASTs. If any ASTs are found,
ast_taken() is called. After ast_taken() returns, thread_exception_return() checks for
outstanding ASTs one more time (and so on). It then jumps to .L_thread_syscall_return()
[osfmk/ppc/hw_exception.s], which branches to chkfac() [osfmk/ppc/hw_exception.s], which
branches to exception_exit() [osfmk/ppc/lowmem_vectors.s]. Some of the context is restored
during these calls. exception_exit() eventually branches to EatRupt
[ofsmk/ppc/lowmem_vectors.s], which releases the save area, performs the remaining context
restoration and state cleanup, and finally executes the rfid (rfi for 32-bit) instruction to return from
the interrupt.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 54 of 137
Looking Back at System Calls
The system call mechanism in early UNIX operated similarly in concept to the one we
have discussed here: It allowed a user program to call on the kernel by executing the trap
instruction in user mode. The low-order byte of the instruction word encoded the system
call number. Therefore, in theory, there could be up to 256 system calls. Their handler
functions in the kernel were contained in a sysent table whose first entry was the
indirect system call. First Edition UNIX (circa November 1971) had fewer than 35
documented system calls. Figure 617 shows a code excerpt from Third Edition UNIX
(circa February 1973)note that the system call numbers for various system calls are
identical to those in Mac OS X.
Figure 617. System call data structures in Third Edition UNIX
/* Third Edition UNIX */
/* ken/trap.c */
...
struct {
int count;
int (*call)();
} sysent[64];
...
/* ken/sysent.c */
int sysent[]
{
0, &nullsys, /* 0 = indir */
0, &rexit, /* 1 = exit */
0, &fork, /* 2 = fork */
2, &read, /* 3 = read */
2, &write, /* 4 = write */
2, &open, /* 5 = open */
...
0, &nosys, /* 62 = x */
0, &prproc /* 63 = special */
...
6.7.1.4. User Processing of BSD System Calls
A typical BSD system call stub in the C library is constructed using a set of macros, some of which
are shown in Figure 618. The figure also shows an assembly-language fragment for the the exit()
system call. Note that the assembly code is shown with a static call to cerror() for simplicity, as the
invocation is somewhat more complicated in the case of dynamic linking.
Figure 618. Creating a user-space system call stub
$ cat testsyscall.h
// for system call numbers
#include 
// taken from 
#define MI_ENTRY_POINT(name) \
.globl name @\
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 55 of 137
.text @\
.align 2 @\
name:
#if defined(__DYNAMIC__)
#define MI_BRANCH_EXTERNAL(var) \
MI_GET_ADDRESS(r12,var) @\
mtctr r12 @\
bctr
#else /* ! __DYNAMIC__ */
#define MI_BRANCH_EXTERNAL(var) \
b var
#endif
// taken from Libc/ppc/sys/SYS.h
#define kernel_trap_args_0
#define kernel_trap_args_1
#define kernel_trap_args_2
#define kernel_trap_args_3
#define kernel_trap_args_4
#define kernel_trap_args_5
#define kernel_trap_args_6
#define kernel_trap_args_7
#define SYSCALL(name, nargs) \
.globl cerror @\
MI_ENTRY_POINT(_##name) @\
kernel_trap_args_##nargs @\
li r0,SYS_##name @\
sc @\
b 1f @\
blr @\
1: MI_BRANCH_EXTERNAL(cerror)
// let us define the stub for SYS_exit
SYSCALL(exit, 1)
$ gcc -static -E testsyscall.h | tr '@' '\n'
...
; indented and annotated for clarity
.globl cerror
.globl _exit
.text
.align 2
_exit:
li r0,1 ; load system call number in r0
sc ; execute the sc instruction
b 1f ; jump over blr, to the cerror call
blr ; return
1: b cerror ; call cerror, which will also return to the user
The f in the unconditional branch instruction to 1f in Figure 618 specifies the directionforward, in
this case. If you have another label named 1 before the branch instruction, you can jump to it using 1b
as the operand.
Figure 618 also shows the placement of the call to cerror() in the case of an error. When the sc
instruction is executed, the processor places the effective address of the instruction following the sc
instruction in SRR0. Therefore, the stub is set to call the cerror() function by default after the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 56 of 137
system call returns. cerror() copies the system call's return value (contained in GPR3) to the errno
variable, calls cthread_set_errno_self() to set the per-thread errno value for the current thread,
and sets both GPR3 and GPR4 to -1, thereby causing the calling program to receive return values of -
1 whether the expected return value is one word (in GPR3) or two words (in GPR3 and GPR4).
Let us now look at an example of directly invoking a system call using the sc instruction. Although
doing so is useful for demonstration, a nonexperimental user program should not use the sc
instruction directly. The only API-compliant and future-proof way to invoke system calls under Mac
OS X is through user libraries. Almost all supported system calls have stubs in the system library
(libSystem), of which the standard C library is a subset.
As we noted in Chapter 2, the primary reason system calls must not be invoked directly in user
programsespecially shipping productsis that the interfaces between system shared libraries and the
kernel are private to Apple and are subject to change. Moreover, user programs are allowed to link
with system libraries (including libSystem) only dynamically. This allows Apple flexibility in
modifying and extending its private interfaces without affecting user programs.
With that caveat, let us use the sc instruction to invoke a simple BSD system callsay, getpid().
Figure 619 shows a program that uses both the library stub and our custom stub to call getpid(). We
need an extra instructionsay, a no-opimmediately following the sc instruction, otherwise the program
will behave incorrectly.
Figure 619. Directly invoking a BSD system call
// getpid_demo.c
#include 
#include 
#include 
#include 
pid_t
my_getpid(void)
{
int syscallnum = SYS_getpid;
__asm__ volatile(
"lwz r0,%0\n"
"sc\n"
"nop\n" // The kernel will arrange for this to be skipped
:
: "g" (syscallnum)
);
// GPR3 already has the right return value
// Compiler warning here because of the lack of a return statement
}
int
main(void)
{
printf("my pid is %d\n", getpid());
printf("my pid is %d\n", my_getpid());
return 0;
}
$ gcc -Wall -o getpid_demo getpid_demo.c
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 57 of 137
getpid_demo.c: In function 'my_getpid':
getpid_demo.c:24: warning: control reaches end of non-void function
$ ./getpid_demo
my pid is 2345
my pid is 2345
$
Note that since user programs on Mac OS X can only be dynamically linked with Apple-provided
libraries, one would expect a user program not to have any sc instructions at allit should only have
dynamically resolved symbols to system call stubs. However, dynamically linked 32-bit C and C++
programs do have a couple of embedded sc instructions that come from the language runtime startup
codespecifically, the __dyld_init_check() function.
; dyld.s in the source for the C startup code
/*
* At this point the dynamic linker initialization was not run so print a
* message on stderr and exit non-zero. Since we can't use any libraries the
* raw system call interfaces must be used.
*
* write(stderr, error_message, sizeof(error_message));
*/
li r5,78
lis r4,hi16(error_message)
ori r4,r4,lo16(error_message)
li r3,2
li r0,4 ; write() is system call number 4
sc
nop ; return here on error
/*
* _exit(59);
*/
li r3,59
li r0,1 ; exit() is system call number 1
sc
trap ; this call to _exit() should not fall through
trap
6.7.2. Mach Traps
Although Mach traps are similar to traditional system calls in that they are entry points into the
kernel, they are different in that Mach kernel services are typically not offered directly through these
traps. Instead, certain Mach traps are IPC entry points through which user-space clientssuch as the
system libraryaccess kernel services by exchanging IPC messages with the server that implements
those services, just as if the server were in user space.
There are almost ten times as many BSD system calls as there are Mach traps.
Consider an example of a simple Mach trapsay, task_self_trap(), which returns send rights to the
task's kernel port. The documented mach_task_self() library function is redefined in
 to be the value of the environment variable mach_task_self_, which is
populated by the system library during the initialization of a user process. Specifically, the library
stub for the fork() system call[10] sets up the child process by calling several initialization routines,
including one that initializes Mach in the process. This latter step caches the return value of
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 58 of 137
task_self_trap() in the mach_task_self_ variable.
[10] We will see how fork() is implemented in Chapter 7.
// 
extern mach_port_t mach_task_self_;
#define mach_task_self() mach_task_self_
...
The program shown in Figure 620 uses several apparently different ways of retrieving the same
informationthe current task's self port.
Figure 620. Multiple ways of retrieving a Mach task's self port
// mach_task_self.c
#include 
#include 
#include 
int
main(void)
{
printf("%#x\n", mach_task_self());
#undef mach_task_self
printf("%#x\n", mach_task_self());
printf("%#x\n", task_self_trap());
printf("%#x\n", mach_task_self_);
return 0;
}
$ gcc -Wall -o mach_task_self mach_task_self.c
$ ./mach_task_self
0x807
0x807
0x807
0x807
The value returned by task_self_trap() is not a unique identifier like a Unix process ID. In fact, its
value will be the same for all tasks, even on different machines, provided the machines are running
identical kernels.
An example of a complex Mach trap is mach_msg_overwrite_trap() [osfmk/ipc/mach_msg.c],
which is used for sending and receiving IPC messages. Its implementation contains over a thousand
lines of C code. mach_msg_trap() is a simplified wrapper around mach_msg_overwrite_trap().
The C library provides the mach_msg() and mach_msg_overwrite() documented functions that use
these traps but also can restart message sending or receiving in the case of interruptions. User
programs access kernel services by performing IPC with the kernel using these "msg" traps. The
paradigm used is essentially client server, wherein the clients (programs) request information from the
server (the kernel) by sending messages, and usuallybut not alwaysreceiving replies. Consider the
example of Mach's virtual memory services. As we will see in Chapter 8, a user program can allocate
a region of virtual memory using the Mach vm_allocate() function. Now, although vm_allocate()
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 59 of 137
is implemented in the kernel, it is not exported by the kernel as a regular system call. It is available as
a remote procedure in the "Kernel Server" and is callable by user clients. The vm_allocate()
function that user programs call lives in the C library, representing the client end of the remote
procedure call. Various other Mach services, such as those that allow the manipulation of tasks,
threads, processors, and ports, are provided similarly.
Mach Interface Generator (MIG)
Implementations of Mach services commonly use the Mach Interface Generator (MIG),
which simplifies the task of creating Mach clients and servers by subsuming a
considerable portion of frequently used IPC code. MIG accepts a definition file that
describes IPC-related interfaces using a predefined syntax. Running the MIG
program/usr/bin/migon a definition file generates a C header, a client (user) interface
module, and a server interface module. We will see an example of using MIG in Chapter
9. MIG definition files for various kernel services are located in
the /usr/include/mach/ directory. A MIG definition file conventionally has a .def
extension.
Mach traps are maintained in an array of structures called mach_trap_table, which is similar to
BSD's sysent table. Each element of this array is a structure of type mach_trap_t, which is declared
in osfmk/kern/syscall_sw.h. Figure 621 shows the MACH_TRAP() macro.
Figure 621. Mach trap table data structures and definitions
// osfmk/kern/syscall_sw.h
typedef void mach_munge_t(const void *, void *);
typedef struct {
int mach_trap_arg_count;
int (* mach_trap_function)(void);
#if defined(__i386__)