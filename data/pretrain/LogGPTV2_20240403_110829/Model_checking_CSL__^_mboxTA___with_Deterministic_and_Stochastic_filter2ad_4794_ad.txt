( External 
DSPN 
Solver 
DSPNexpress, 
(SPNica, 
... ) 
Figure 12. CslTa-Solver 
software schema. 
definition 
CslTa-Solver 
more practical 
uses a slightly 
for DTAs, which is parametric 
propositions, 
and clock constants 
eters are then instantiated 
way, common DTAs (like x[a,,Bl  7 for our example). 
many DSPN solvers 
and translated 
cannot deal with large 
into a 
4.2. Final evaluation 
Act-{srV"emply,} 
Act-{srV"emply,} ; 
; 
x (a.k.a. 
from the translation 
of TimeNET crashes with 
Since we did not have access 
(1) the TRG is non ergodic, 
no one could be used without 
arcs); (4) the TRG 
reuse was less smooth than we expected. 
resulting 
and may have 2 or more 
istics: 
is 
recurrence 
huge (in the order of the number of the ASMC states); 
(3) 
the TRG may have more than a single arc from each pair 
of markings 
may have self-loops 
that preempt a deterministic 
(this may be caused by a DTA edge with a clock reset in the 
first clock region (0, Cl)). 
be able to treat each of these characteristics 
in order to fit 
our needs. We have considered 
DSPN solvers, 
and unfortunately 
cant amount of modifications. 
TimeNET: our installation 
DSPNs with few hundreds 
places, 
be able to deal with self-loops. 
to the source code, we put aside this tool. 
SPNica: SPNica is based on Mathematica, 
it is very limited 
a thousand 
ence implementation" 
points above but for point (1), for which we have introduced 
a modification 
DSPNexpress: 
DSPNexpress, 
as dis­
since the source code was available. 
is not able to deal with 
tributed 
DSPNExpressNG), 
any of the four points above. Points ( 1) and (3) have been 
addressed 
that circumvents 
to use DSPNExpress 
and therefore 
if the 
DTA has a reset in the first clock region (as in our exam­
ple). For point (2) we have changed the maximum number 
of places and transitions 
which is correct 
to the implementation 
in the number of transitions). 
automatically 
the problems.  Point 
DSPN (around 
as a "refer­
all the four 
a modified DSPN 
(4) is not solvable, 
in the code. 
We focused 
most of our efforts on this tool, 
in the size of the solvable 
and it should be regarded 
but very slow (we suspect 
in the code, leading 
test, which is linear 
it is not possible 
[3]. It correctly 
by generating 
of the enabling 
to a solution 
it works fine, but 
addresses 
(actually 
that this is due 
states), 
Some examples of nets that cause mal-
with the solvers can be found at 
functions 
www.di. uni to. i tr susi/PDS10/NETS. 
of writing, 
of its reliability, 
we prefer to use SPNica for small nets, because 
and DSPNexpress, 
At the time 
with all its limitations, 
ability 
Results 
of serving 
of the query are shown in figure 16. The prob­
with a, but a larger a induces a lower probability 
state by time a, leading 
each station 
in a single round increases 
to the particular 
of not 
being in a failure 
behavior 
shown in the figure. 
0.25 +--- ----------
g 0.2 +-- -#-..... om.----------
 0.15 +-r.I-----;j..,.-s !oo._-------
£ 0.1 +----f,1--)"-,(-,,=O ....... -._0I<::::------
Max. time ex for a "full" 
.:0 
5 
round, with no failures 
Figure 16. Results of DTA 15, for various /1. 
...... = 4 
3 
6 
-
­
- --
- .......  =6 
---  =8 
-
 =5 
 = 10 
Table 1 reports 
a sensitivity 
analysis 
for varying 
values 
DSPN sizes, the number of Tangible 
on a 1.5Ghz PowerPC. 
in the state space and the time needed to build the 
of N, for the first query; the table lists the ASMC dimen­
sions, the respective 
Markings 
TRG with DSPNexpress 
N ASMC ASMC DSPN  DSPN ITRGI Time 
0.629 
0.689 
1.643 
5  240  800  258  1070  803  10.143 
6  576  2208  594  2814  1923  112.720 
7  1344  5824  1362  7198  4483 1389.700 
22 
43 
64 
150  123 
84 
272  114  398  323 
states transit. 
2  12 
3  36 
4  96 
30 
54 
places transit. (seconds) 
8  3072  14848 
9  6912  36864 
10 15360 89600 
Table 1. DSPN sizes for the query in figure 15. 
20lO IEEEIIFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
for bigger nets. 
References 
assuming 
complexity, 
by far the most expensive 
a good DSPN 
step is the 
(a step that may take place more than once 
if nesting 
is present). 
Note that space com­
of a 
For what concerns 
solver is available, 
MRP solution 
for a formula, 
plexity 
MRP requires 
usually 
may also become an issue, since the solution 
the solution 
of an embedded DTMC which is 
very dense (even if the original 
ASMC is sparse). 
Whether the M x A MRP is generated 
through 
a DSPN 
produced 
solution 
for generating 
from M and A, the MRP produced 
its numerical 
has the same asymptotical 
is the same: in the former case the rules to be 
has the same 
the TRG of the 
of the 
the TRG using the definition 
complexity, 
since 
or is directly 
is the same. Therefore 
cost. It should be noted that computing 
DSPN or producing 
M x A process 
the procedure 
applied 
are the enabling 
tics, while in the latter 
states and the arcs of the M x A, as explained 
2.1. Of course even ifthe construction 
ization 
more efficient, 
lem, while the MRP solution 
perform better, 
research 
and firing rule that define the DSPN seman­
the rules are the one that define the 
since it can be tailored 
behind a DSPN tool should 
since it takes advantage 
may differ. A direct 
construction 
is the same, the real­
of many years of 
in Section 
in the field. 
All DSPN tools considered 
have some limitations 
in the 
number of places and transitions. 
and to ease the task of the modeller, 
to model-check 
in some other higher-level 
To avoid this problem, 
it could be a good idea 
as Petri Nets (or 
formalism). 
expressed 
directly 
systems 
of the TRG may be 
to the specific prob­
[1] Susanna Donatelli, 
Serge Haddad, Jeremy Sproston, 
"Model 
Checking Timed and Stochastic 
Transactions 
240, March/April, 
2009. 
on Software Engineering, 
Properties 
with CSLTA", IEEE 
vol. 35, no. 2, pp. 224-
Petri Nets", John Wiley & Sons Ltd, 
[2] Cristoph Lindemann, "Performance Modelling with Deter­
ministic and Stochastic 
March 1998. 
[3] Reinhard German, "Performance Analysis of Communica­
Stochastic 
Nets", John Wiley & Sons Ltd, 1 edition, 
tion Systems -Modeling with non-Markovian 
May 17,2000 
Petri 
[4] R. German. Iterative 
analysis 
of markov regenerative 
models. 
Perform. Eval., 44:51-72, April 2001. 
[5] Christel Baier, Lucia Cloth, Boudewijn R. Haverkort, 
Matthias Kuntz, Markus Siegle, "Model Checking Markov 
Chains with Actions and State Labels", 
Software Engineering, 
vol. 33, no. 4, pp. 209-224, 2007. 
IEEE Transactions 
on 
[6] Adnan Aziz, Kumud Sanwal, Vigyan Singhal, Robert Brayton 
"Model Checking Continuous Time Markov Chains" ACM 
Trans. on Computational 
Logic, 2000 
[7] German, R.; Kelling, Ch.; Zimmermann, A.; Hommel, G., 
Petri Nets 
Stochastic 
"TimeNET - A Toolkit for Evaluating 
with Non-Exponential 
Evaluation, 
Netherlands, 
1995 
Elsevier, 
Firing Times", Journal of Performance 
[8] Christel Baier, Boudewijn Haverkort, Holger Hermanns, 
and Joost-Pieter 
Continuous-Time 
Software Engineering, 
Katoen "Model-Checking 
Markov Chains", IEEE Transaction 
Algorithms for 
on 
Vol. 29, No.7, July 2003 
[9] Taolue Chen, Tingting Han, Joost-Pieter 
Katoen, Alexan­
from one state all its successors states 
dru Mereacre "Quantitative 
Time Markov Chains Against Timed Automata Specifications" 
Logic in Computer Science, Symposium on, Vol. 0, pages. 
309-318,2009 
Model Checking of Continuous­
[10] A. Hinton, M. Kwiatkowska, 
G. Norman and D. Parker, 
"PRISM: A Tool for Automatic Verification of Probabilis­
tic Systems.", 
and Algorithms 
(TACAS'06),2006. 
Conference on Tools 
and Analysis of Systems 
Proc. 12th International 
for the Construction 
[11] Joost-Pieter 
Katoen, Ivan S. Zapreev, Ernst Moritz Hahn, 
Holger Hermanns, David N. Jansen, "The Ins and Outs of the 
Evalua­
Probabilistic 
tion of Systems, International 
2009. 
Model Checker MRMC", Quantitative 
Conference on, pp. 167-176, 
tems", In Proc. ofICALP'90, vol.443, 1990 
[12] R. Alur and D. Dill "Automatafor Modelling Real-Time Sys­
[13] Berard, B. and Cassez, F. and Haddad, S. and Lime, D. and 
Roux, O. H. "When are Timed Automata weakly timed bisim­
ilar to Time Petri Nets? Theoretical 
ume 403, Elsevier Science Publishers 
Ltd, 2008. 
Vol­
Computer Science", 
5. Conclusions 
and Future Works 
In this paper we presented 
a simple yet effective 
way of 
deterministic 
a CSL TA query into an equivalent 
Petri net. This allows to build a full CSL TA 
translating 
and stochastic 
model checker with a limited 
ment, reusing 
model-checker 
and, despite 
been around for a while, we found a number of difficulties, 
as discussed 
amount of software develop­
DSPN tools. Unfortunately 
existing 
such a 
is only as good as the DSPN solvers 
used, 
the fact that we used DSPN tools that have 
before. 
Current 
may not be feasible 
Even with such a solver, 
work is circumventing 
of a new DSPN solver which fulfills 
this problem through 
the 
all the 
the model 
since the MRP numerical 
being very expensive 
working on the exten­
MRPs of the space-efficient 
development 
listed requirements. 
checking 
lution can become the bottleneck, 
time and space. We are currently 
sion to non-ergodic 
solution 
proach that should allow to save space and time. 
proposed 
so­
in 
iterative 
in [4] and on a decomposition-based 
ap­
Acknowledgments. 
his help in modifying 
SPNica for non-ergodic 
DSPNs. 
We would like to thank R. German for 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
614 
DSN 20lO: Amparore 
& Donatelli 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:55:53 UTC from IEEE Xplore.  Restrictions apply.