title:Paranoid Android: versatile protection for smartphones
author:Georgios Portokalidis and
Philip Homburg and
Kostas Anagnostakis and
Herbert Bos
Paranoid Android: Versatile Protection For Smartphones
Georgios Portokalidis∗
Network Security Lab
Dept. of Computer Science
Columbia University, NY, USA
PI:EMAIL
Philip Homburg
Dept. of Computer Science
Amsterdam, The Netherlands
Vrije Universiteit
PI:EMAIL
Kostas Anagnostakis
Niometris R&D
Singapore
PI:EMAIL
Herbert Bos
Dept. of Computer Science
Vrije Universiteit
Amsterdam, The Netherlands
PI:EMAIL
ABSTRACT
Smartphone usage has been continuously increasing in re-
cent years. Moreover, smartphones are often used for privacy-
sensitive tasks, becoming highly valuable targets for attack-
ers. They are also quite diﬀerent from PCs, so that PC-
oriented solutions are not always applicable, or do not oﬀer
comprehensive security. We propose an alternative solution,
where security checks are applied on remote security servers
that host exact replicas of the phones in virtual environ-
ments. The servers are not subject to the same constraints,
allowing us to apply multiple detection techniques simulta-
neously. We implemented a prototype of this security model
for Android phones, and show that it is both practical and
scalable: we generate no more than 2KiB/s and 64B/s of
trace data for high-loads and idle operation respectively, and
are able to support more than a hundred replicas running
on a single server.
Categories and Subject Descriptors
D.2.0 [General]: Protection mechanisms
General Terms
Design, Security, Reliability
Keywords
Decoupled security; Smartphones; Android
1.
INTRODUCTION
Smartphones have come to resemble general-purpose com-
puters:
in addition to traditional telephony stacks, calen-
∗This work was done while the author was in Vrije Univer-
siteit Amsterdam.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
dars, games and address books, we use them for browsing,
reading email, watching videos, and many other activities
that we used to perform on PCs. As software complexity
increases, so does the number of bugs and exploitable vul-
nerabilities [17, 32, 20, 31]. Vulnerabilities in the past have
allowed attackers to exploit bugs in the Bluetooth network
stack to take over various mobile phones. More recently, Ap-
ple’s iPhone and Google’s Android platform have also shown
to be susceptible to remote exploits [28, 24, 25] .
Moreover, as phones are used more and more for privacy
sensitive and commercial transactions, there is a growing
incentive for attackers to target them. For instance, smart-
phones can be used to perform online purchases, control
bank accounts, store passwords and other sensitive infor-
mation like social security numbers, etc. Phone-based pay-
ment for physical goods, services, mass transit, and parking
is also provided by various companies like Upaid Systems,
Black Lab Mobile, and others. Compromised smartphones
can also be used to spy upon users, as they include a GPS
sensor and a microphone that can be used to obtain a user’s
location or eavesdrop.
Smartphones will most likely become targets in the fu-
ture, and while average users may not be willing – for the
time being – to pay the cost (both in ﬁnancial and perfor-
mance terms) of securing their devices, this is not the case
for senior oﬃcials in industry, government, law enforce-
ment, banks, health care, and the military1. Smartphones
are already an integral tool in many such organisations, but
due to security and privacy concerns, and due to the lack
of security mechanisms, administrators often resolve in lim-
iting the functionality of employees’ devices (like disabling
WiFi connectivity and reception of SMS messages). In this
paper, we address the problem of security for smartphones
for organisations and individuals that care deeply about the
detection of attacks. Our goal is to provide versatile secu-
rity for smartphones, oﬀering detection of a wide range of
attacks including zero-day ones.
Deploying security mechanisms on already severely resource-
constrained smartphones can be problematic. For instance,
running a simple ﬁle scanner like ClamAV on the Android
1A famous case in point was president Obama’s 2008 strug-
gle to keep his Blackberry phone after being told this was
not possible due to security concerns. Eventually, he was
allowed to keep an extra-secure smartphone.
HTC G1’s data and application folders took approximately
30 minutes, and reduced battery capacity by 2%. Other
work [6] has also shown that running a naive ﬁle scanning
application on an HTC G1 is 11.8x slower than running it
on single-core virtual machine (VM) running on a desktop
PC. We argue for a diﬀerent security model that completely
devolves attack detection from the phone.
At a high level, we envision that security (in terms of at-
tack detection) will be just another service hosted in the
cloud, much like storage and email. Whether this is practi-
cal, or even feasible at the granularity needed for thwarting
today’s attacks has been an open research question, which
we attempt to answer in this paper. More speciﬁcally, we
propose running a synchronised replica of the phone on a
security server in the cloud. As the server does not have
the tight resource constraints of a phone, we can perform
security checks that would be too expensive to run on the
phone itself. To achieve this, we record a minimal trace of
the phone’s execution (enough to permit replaying and no
more) which we then transmit to the server. The implemen-
tation of our security model is known as Paranoid Android
(PA).
Our approach is consistent with the current trend to host
activities in the cloud, including security-related functions.
Oberheide et al. have explored AV ﬁle scanning in the cloud
with [29] and [30], but ﬁle scans are not able to detect zero-
days, remote exploits, or memory-resident attacks (all of
which have targeted mobile phones in the past [20, 14, 31,
25]). One could argue that smartphone components are fre-
quently coded in languages like Java that do no suﬀer from
such attacks. But the runtime environments (JREs) used
on smartphones are usually smaller, optimized versions of
the original JRE (e.g., Android uses the DEX Dalvik VM),
which do not necessarily provide the same security and iso-
lation guarantees , and can be themselves vulnerable to at-
tacks. Furthermore, most platforms (including Android) of-
fer native APIs for high performance applications that are
vulnerable to a wider range of attacks.
Our solution builds on work on VM recording and replay-
ing [11, 42, 26, 5, 12, 19, 37, 38, 23]. Previous work on
PC systems, makes use of tailored VMs, and assumes ample
and cheap communication bandwidth. Rather than record-
ing and replaying at the VM level, we record the trace of a
set of processes (running everything in a VM on the phone
is not realistic on any current phone). In addition, we tai-
lor the solution to smartphones, and compress and transmit
the trace in a way that minimises computational and battery
overhead. We also ensure that an attacker compromising a
device cannot bypass the security measures applied at the
server, and elude detection.
The main contributions of this paper are:
• A scalable smartphone security architecture that is
able to apply multiple security checks simultaneously
without overburdening the device.
• A prototype implementation of an execution recording
and replaying framework for Android.
• Transparent backup of all user data in the cloud.
• A replication mechanism that guarantees the detection
of an attack.
• Application transparent recording and replaying.
The remainder of the paper is organised as follows. The
architecture of PA is discussed in Section 2, while implemen-
tation details of our prototype are given in Section 3. We
evaluate the system in Section 4, and review related work in
Section 5. Conclusions are in Section 6.
2. PARANOID ANDROID ARCHITECTURE
A high-level overview of PA’s architecture is illustrated
in Figure 1. On the phone, a tracer records all information
needed to accurately replay its execution. The recorded ex-
ecution trace is transmitted to the cloud over an encrypted
channel, where a replica of the phone is running on an emula-
tor. On the cloud, a replayer receives the trace and faithfully
replays the execution within the emulator. We can apply se-
curity checks externally, as well as from within the emulator,
as long as they do not interfere with the replayed applica-
tions (i.e., they do not perform IPC with replayed processes,
modify user ﬁles, etc.). Provided we observe this rule of non-
interference, we may even run additional processes or instru-
ment the kernel. Furthermore, we use a network proxy to
connect to the Internet, which allows us to intercept and
temporarily store inbound traﬃc. The replayer can access
the proxy to retrieve the data needed for replaying. This way
the tracer does not have to retransmit the data received over
the network to the replica.
2.1 Recording And Replaying
Recording and replaying a set of processes and entire sys-
tems has been broadly investigated by previous work [11,
42, 26, 5, 12, 19, 37, 38, 23, 16]. We will only brieﬂy dis-
cuss how execution replaying is performed, while implemen-
tation speciﬁcs and various optimisations are discussed in
Section 3.1. Readers interested in recording and replaying
in general are referred to the above cited papers, and our
technical report on PA [34].
A computer program is by nature deterministic, but it re-
ceives nondeterministic inputs and events that inﬂuence its
execution ﬂow. To replay a program, we need to record all
these nondeterministic inputs and events. Such inputs usu-
ally come from the underlying hardware (e.g., time comes
from the HW clock, network data from the WiFi adaptor,
location data from the GPS sensor, etc.), which a process
receives mostly through system calls to the kernel. Thus, to
replay execution the tracer records all data transferred from
kernel to user space through system calls. The replayer then
uses the recorded values when replaying the system calls on
the replica. Note that we only replay process and not kernel
execution. While this implies that PA may not be able to
detect an attack against the kernel, most kernel vulnerabil-
ities are only exploitable locally, which would require that
the attacker ﬁrst compromises a user process.
Beside system calls, operating systems (OSs) can also al-
ter a process’ control ﬂow by using synchronous and asyn-
chronous notiﬁcation mechanisms such as signals. For in-
stance, a signal may be sent to a process when a certain
event occurs (e.g., a timer expires). Signals that notify of
serious errors (e.g., a segmentation fault, or a ﬂoating point
exception) are delivered synchronously, when the instruction
that caused the error is executed. Consequently, they will
be also generated by the OS on the replica. On the other
hand, asynchronous signals can be delivered arbitrarily, and
in fact most OSs (except real-time ones) do not even guaran-
tee their delivery. To ensure that such signals are delivered
Figure 1: Paranoid Android architecture overview
at exactly the same time during replay, we defer their deliv-
ery until the target process performs a system call.
Concurrency and inter-process communication (IPC) can
also be a source of nondeterminism. Two processes can ex-
change data using various mechanisms such as pipes, mes-
sage queues, ﬁles, sockets, shared memory, and memory
mapped ﬁles. Most of these mechanisms are implemented
using system calls to send and receive data, therefore we im-
plicitly support them by accurately replaying system calls.
This is not the case for shared memory and memory mapped
ﬁles, since they can be accessed directly. When two or
more processes use such objects to exchange data, they may
aﬀect one another in unpredictable ways, producing non-
reproducible behaviour. In the case of threads, almost all
process memory is shared.
In the presence of shared ob-
jects, accesses on these objects need to be serialised to en-
able deterministic replay [19].
In past work, Courtois et
al. [9] solve the serialisation problem using a concurrent-
read-exclusive-write (CREW) protocol for shared objects,
while Russinovich et al. [38] propose a repeatable determin-
istic task scheduler. He have adopted the latter for PA, as it
outperforms CREW protocols on uniprocessor architectures.
2.2 Synchronisation
Smartphone users enjoy plentiful wireless connectivity over
3G, WiFi, GPRS, etc.PA can use any of these networks
to synchronise with the replica by transmitting the execu-
tion trace. However, wireless connectivity can be costly in
terms of energy consumption, and detrimental to battery
life. Therefore, we assume that network connectivity may
not be always available (e.g., because the device is low on
power), and safeguard the execution trace to ensure that at-
tacks which occured while disconnected are eventually dis-
covered.
2.2.1 Loose Synchronisation
We adopt a loose synchronisation strategy between the
phone and the cloud to minimise its eﬀects on battery life.