the service) can only access valid data—so there is no data
validation performed within the service code. The procedure
is performed at the user-level because the Supervisor may be
untrusted depending on the TC-architecture.
5.3.4 Reclaiming memory
The untrusted SMM can reclaim state components from
isolated memory by updating the map list (§6.1.5). The reclaim
is validated and accepted (or denied) by the state handler and,
only when it is accepted, the Supervisor is allowed to withdraw
the reclaimed pages from the trusted execution environment.
5.4 Client Veriﬁcation of a Remote Execution
The veriﬁcation of a remote execution is equivalent to veri-
fying a hardware-based execution attestation. It can include the
identities of: 1) the executed code, 2) the input and 3) output
data, 4) a client-provided nonce (§6.1.6). A successful veriﬁ-
cation validates the signature, using a manufacturer-certiﬁed
public key (or an Attestation Veriﬁcation Service [31]), and
makes sure that the attested identities are the intended ones.
Veriﬁcation of state updates. If the service code modiﬁes the
state, the state handler can update a separate runtime version of
the state root. This represents the output state identity and can
be included in the attestation and returned to the data source
(or the client) so it can verify the modiﬁcations.
6.
IMPLEMENTATION OF LASTGT
Overview. Fig. 4 zooms into the architecture (Fig. 3) detailing
the implementation of LASTGT. In particular, Fig. 4a abstracts
the details of the hypervisor-based implementation (Fig. 4b)
and of the SGX-based implementation (Fig. 4c). This helps
identifying common parts of LASTGT whose code can be
shared across different TC-architectures.
The primitives in bold are common across implementa-
tions. Inside the SMM, they allow the untrusted user-level
code to set up the environment (createEnvironment) for the
execution of the trusted user-level code, to run it (runAt), to
map state components data and metadata in and out (mapIn,
mapOut) of the the isolated address space—though the state
handler validates them ﬁrst—and to manage state components
on disk (loadState, storeState) through the untrusted OS.
At the privileged level inside the Supervisor, the primitives
(isolateMemory, unisolateMemory) allow the Supervisor to
provide memory pages to (or to withdraw them from) the
isolated address space of the trusted application code according
to the maps conﬁgured by the SMM. The attestation primitive
that is used by the state handler to validate data and metadata
is not shown to simplify the description and ﬁgures.
Several primitives need to interact with hardware and soft-
ware that are speciﬁc to the used TC-architecture (abstracted
by the black boxes in Fig. 4a). First, the architecture-adaptation
library includes code to execute a hyper-call or a system-
call handled by a dispatcher, or to execute an instruction
wrapper, or a call that traps into a trap-handler. The memory
management and the exit adaptation boxes have very speciﬁc
functions. The former touches the state handler due to the
EACCEPT(-COPY) SGX instructions (§6.3) that the state han-
dler runs to accept changes to enclave pages. The latter instead
hides the EEXIT instruction in SGX, or a simple return of
a function in XMHF-TrustVisor, to terminate the execution.
Finally, LASTGT simply uses the OS and standard libraries
for functions such as managing state on disk.
Inside the trusted application code, the LASTGT library
mainly navigates the state hierarchy, while the register (§6.1.3)
and validate (§6.1.4) primitives hide the details of the memory
maps and of the authenticated data structure embedded in
the LASTGT-compatible state. Also, in XMHF-TrustVisor, the
trusted application code just directly calls the hypervisor for
the attestation (not shown). In SGX, instead, it has to run
dedicated instructions to terminate, to accept pages and to
attest, making the code more dependent on the TC architecture.
To summarize, LASTGT can deal with the architectural dif-
ferences between XMHF-TrustVisor and SGX through small
adaptations within a single design. Next, we describe the
architecture-independent components of LASTGT (§6.1), our
implementation for XMHF-TrustVisor (§6.2), and a design for
SGX (§6.3) in more detail.
6.1 TC-architecture-independent Details
6.1.1 Building the state
As discussed in §5.2, the user state and its meta data is
organized in a state hierarchy (Fig. 5). The state root contains
only one hash value. Both the service and client code rely
on it to validate the authenticity of the data. A directory is
173
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:21:49 UTC from IEEE Xplore.  Restrictions apply. 
Hier archy
STATE ROOT
directory
master-chunk
chunk
metadata
data
directory
chunk
...
...
...
...
master-chunk
chunk
block … block
Primitives
register 
(handler code)
validate 
(handler code)
Description
one-time call,  
constant-time,  
small memory footprint
per-item validation, 
small memory footprint
files, master-chunk 
directory indicates list of 
indicates a file, both have 
authentication metadata
a file slice
data blocks of file slice,
hash tree of blocks 
a block spans one or 
more pages in memory
1 0 .
. 0 1 1 0 0
read/write 
(service code)
r/w access to  
in-memory data  
as in original file
Fig. 5: State hierarchy. A directory can contain several master chunks and
(sub-)directories. The relevant primitives (register, validate) build a chain
of trust between the service reads/writes and the state root veriﬁed by a client.
a set of (sub-)directories and master chunks. A master chunk
maps one-to-one to a ﬁle in the ﬁlesystem. Each master chunk
includes a set of chunks, each of which corresponds to a
contiguous sequence of user data in the ﬁle. The user data
in a chunk is further logically divided into a set of blocks.
Each chunk also includes metadata, called a chunk descriptor.
It contains a static hash tree built from the chunk’s data. The
leaves of the tree are computed by hashing contiguous bytes
of the block in the chunk. The root of the tree represents the
identity of the chunk. The identities of the chunks are hashed
to form the identity of their parent master-chunk, and so on
up the root, which is the identity of the entire state.
Only a conﬁguration ﬁle and two parameters (chunk and
block size) are required to build a LASTGT-compatible state.
This information is deﬁned by the user. The conﬁguration ﬁle
is a list of ﬁles (each one producing a master chunk) and
directories to be included in the state.
This design of the state hierarchy allows efﬁcient manage-
ment of data in memory. We can load ﬁxed-size chunks from
disk as needed, without dealing with the entire state data at
once. Then we can load blocks from untrusted memory into the
trusted execution environment, possibly batching the transfer
of the pages spanned by a block. Also, as the authentication
metadata is distributed across the state hierarchy, we can easily
and locally validate data blocks in a chunk and update the hash
tree when a block is modiﬁed. In fact, the hash trees of other
chunks are not required, so they can remain on disk.
Distributing the authentication data is important for our tar-
get state sizes. A single ﬁle-wide (as in Minibox) or disk-wide
(as in Haven) hash tree has several drawbacks in comparison.
First, a single tree can take up to gigabytes (Fig. 6, top-right
of shaded area). Second, this adds complexity to cache it in
secure memory and in untrusted memory. Finally, one could
opt to load a data block together with a short membership
proof (linear in the height h of the tree). However, when using
a single tree for 1TB of user data (240 bytes) and small blocks
(210 bytes), the hash tree is tall h = 31, so the proof is large,
i.e., (h − 1) nodes × 32 bytes/node = 960 bytes or 93% of
block size, and verifying it takes many hashes (i.e., h − 1).
6.1.2 Maps for State Organization and Memory Management
LASTGT uses memory maps for state and memory man-
agement. Fig. 7 shows some entries in an example map list
that the SMM uses to store type, address and size (in pages)
of the memory it allocates. The SMM uses different map types
for metadata and data (15 types, including those for IMELs,
bytes/block 210
215
220
225
230
)
s
e
t
y
b
(
e
z
s
e
e
r
T
i
240
230
220
210
220
225
230
235
240
245
250
State size (bytes)
Fig. 6: Hash tree size (y) as a function of the state size (x) for different block
sizes, with a 32 bytes hash (e.g., SHA256). Shaded area is our target.
debugging and performance measurements), including a spe-
cial one to reclaim a map. The maps are also shared with the
Supervisor which manages the physical pages (in SGX, or the
memory access permissions in XMHF-TrustVisor), and with
the state handler that validates changes to the address space.
Memory accesses to data that is not in the trusted environ-
ment trigger a page fault and the Supervisor is invoked. The
Supervisor looks up the page fault address into the memory
maps. If the address points to data mapped in memory, this is a
map hit and the Supervisor performs lazy loading in the secure
environment (§6.1.4). It the address instead points to non-
mapped data, this is a map miss and the Supervisor triggers
the procedure for loading state from disk or for shutting down
the execution in the case of an illegal access (§6.1.5).
The state handler uses the maps to locate metadata for
validation and to ensure that pointers to supposedly non-
mapped components do not incorrectly dereference mapped
components—they must produce a fault. Notice that the initial
maps (if any) must be embedded in the trusted user-level code
and so included in the code identity eventually veriﬁed by
a client. So, initial and subsequent maps can be trusted. To
avoid tampering by the SMM, who might maliciously swap
map types (e.g., the state root map type for a IMEL type), the
state handler maintains a secure copy of the map list.
type
D
H
C
map list
address
0x0b000000
0x4b000000
0x4b001000
pages (=length) 
218       (=1GB)
1          (=4KB)
215   (=128MB)
Fig. 7: Example of a map list. Items describe type (D=dynamic memory,
not included in state hierarchy; H=in-memory embedded locator; C=chunk),
location and size of a map. Other types (and entries) are available for: root,
directories, master-chunks, chunk metadata, input and output buffers.
6.1.3 State Registration
State registration is the ﬁrst code executed in the trusted
environment. It allows the state handler to receive the state root
map. The map contains a single hash value for authenticating
the metadata and data in the state hierarchy. The state handler
uses the register primitive to copy the root hash to a static
variable representing the input state—once set, it cannot be
overwritten nor reset (without beginning a new trusted execu-
tion).
6.1.4 Normal Execution and Lazy Loading
The service execution is triggered by the LASTGT library
that begins the execution in the trusted environment. The
library initializes the state base pointer to the state root map
set up at registration-time. From the state root it then walks
the state hierarchy by following the pointers between parent
and child components.
174
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:21:49 UTC from IEEE Xplore.  Restrictions apply. 
state component 
metadata
child state comp.:
   csc1:0x0900a000
csc2:0x0900b000
csc3:0x0900c000
csc4
csc5
csc6
…
page  
delimiter
page  
delimiter
child state 
component metadata
I  n  
Memory  
E mbedded 
L ocator 
   page
…
child state 
component metadata
0x0c0df000
0x0d0ab000
Fig. 8: IMEL pages contain positions of data in memory. They allow the
LASTGT library to access a child state component (e.g., a chunk, csc2), and
they help the untrusted code to locate such component and load it. Other
IMELs (e.g., at csc1, csc3) that are not accessed are not loaded.
Correct access of a state component. LASTGT has to ensure
that the library: (i) produces a page fault when it accesses a
non-validated state component; (ii) will ﬁnd valid content in
memory and hence (iii) can be resumed only in this case. The
state handler ensures (i) by peeking into a state component
being loaded to check that it has a pointer to an IMEL page that
is not yet mapped in the isolated memory (e.g., csc3 in Fig. 8).
The handler ensures (ii) by cryptographically validating the
state component using the validate primitive. For example, in
the case of a chunk, the primitive checks the chunk’s hash tree
and whether its root matches that stored in the parent master-
chunk. For an IMEL, instead, the state handler simply checks
that it contains the address of valid state component being
loaded jointly. Ensuring (iii) is TC-architecture-dependent so
deferred to §6.2 and §6.3.
Loading metadata vs. Loading data. Except for the original
user data in a chunk, the rest of the state hierarchy is con-
sidered metadata. Metadata (directories, master chunks, chunk
metadata) and data have different types of maps. This allows