Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:51 UTC from IEEE Xplore.  Restrictions apply. 
68
in the event request stage, the scheduler will look up the
event based on the ID ﬁeld. Then, there are three possible
cases. First, the event has not happened in the browser. If
so, the scheduler will ﬁrst cancel the event by calling the
corresponding cancellation API and then marked the event as
cancelled in the queue. Second, the event has happened in the
browser and conﬁrmed in the event queue, but not invoked
by our dispatcher. If so, the scheduler will change the event
status to cancelled directly. Lastly, the event has already been
invoked by the dispatcher. If so, the scheduler will ignore the
request.
3) Event Dispatching: The dispatcher is essentially an
event loop that keeps fetching events from the event queue
following their predicted time. If the status of the fetched
event is ready, the dispatcher will invoke the event callback
with the correct execution context and arguments, and then
removes the event from the event queue. If the status of the
fetched event is pending, the dispatcher will wait for the event
to become ready. If the status of the fetched event is cancelled,
the dispatcher will directly discard the event.
E. Thread Management
Different JavaScript threads, i.e., WebWorkers, have their
own runtime, e.g., self object, and can freely communicate
with the main thread. Therefore, JSKERNEL takes control
of thread management and puts it into the kernel. We now
ﬁrst describe how to create kernel and user threads, and then
introduce the communication between different threads.
1) Kernel and User Thread Creation: The thread manager
of JSKERNEL provides a customized interface for the user-
space script to create a thread. For example, when a user-space
script constructs a new Web Worker, the the thread manager in
the kernel code, will ﬁrst construct a thread object to represent
a kernel thread. The thread object contains four ﬁelds: status,
ID, src, and kernel worker. The status ﬁeld indicates whether
the kernel thread has started (“started” status), loaded the user
thread (“ready” status), or closed (“closed” status) due to either
main or user thread request. The ID ﬁeld represents a unique
identiﬁer for the kernel thread, the src ﬁeld the user thread
source, and the kernelWorker ﬁeld a WebWorker responsible
for the kernel thread. Next, the thread manager will create and
then communicate with the kernel thread.
The kernel thread, once created, will prepare an environment
for the user thread. Speciﬁcally, the kernel thread wraps all the
timing related objects and APIs, available in a WebWorker, to
an anonymous closure, which is just like what the kernel code
does for the main thread. Note that a kernel thread maintains
a separate event queue and clock from the main thread, i.e.,
the scheduling and clock ticking follow APIs and events in
this kernel thread only (not the main thread or other kernel
threads). Once the thread environment is prepared, the kernel
thread will import the user-space thread with the source passed
from the kernel code in main thread.
2) Thread Communication: Similar to OS’s interprocess
communication, there are two types of thread communication
in browser: message passing, i.e., postMessage, and shared
memory, i.e., SharedArrayBuﬀer. The former is very popular
and widely used—and therefore JSKERNEL also adopts it for
kernel communication; the latter is rarely used and currently
disabled in many browsers due to Spectre attack. We discuss
both communications.
i.e.,
First, JSKERNEL adopts message passing for both user-
space and kernel-space communication. For example, JSKER-
NEL passes the user thread source from the main thread to one
kernel thread via the kernel-space communication. Because
there only exists one channel,
the postMessage and
onmessage one, between two threads, we create an overlay
upon the channel. Speciﬁcally, JSKERNEL wraps the original
object under a new object and uses a special ﬁeld, i.e., a type
ﬁeld, in the object to indicate whether it is a kernel- or user-
space communication. A kernel-space communication will be
directly handled by the kernel code, and a user-space will be
handled by the scheduler in each thread. Currently, JSKERNEL
supports two types of kernel-space communication: exchan-
ging a clock and passing thread source.
Second, browsers support SharedArrayBuﬀer for
two
threads to share a chunk of memory, which may also be
used for a ﬁne-grained timer [12]. JavaScript cannot directly
access contents of SharedArrayBuﬀer, but has to rely on
yped array or DataView. Just
in
Listing 5, JSKERNEL provides a customized interface to
access SharedArrayBuﬀer contents so that every access is
redirected to the kernel and put into the event queue.
like the Worker object
IV. SECURITY ANALYSIS
We now evaluate the robustness of JSKERNEL along
with depicting the corresponding security policies to handle
web concurrency attacks. As a comparison, we evaluate ﬁve
browsers—namely Google Chrome, Firefox, Microsoft Edge,
Tor Browser [17], DeterFox [14] and Fuzzyfox [6]—and one
browser extension, i.e., Chrome Zero [3]. It is worth noting
that when we mention JSKERNEL, we refer to all
three
extensions on Firefox, Chrome and Edge. As the capability in
defending against timing attacks for all three extensions are the
same, for simplicity, we uniformly use the term JSKERNEL.
In the rest of the section, we start from implicit clocks
in Section IV-A and cover web concurrency attacks in Sec-
tion IV-B.
A. Implicit Clocks as a Web Concurrency Attack
In this section, we evaluate the robustness of JSKERNEL
with a deterministic scheduling policy against timing attacks
using different implicit clocks. A summary of the evaluation
results is shown in Table I, i.e., JSKERNEL can defend against
all existing attacks, while many of them can only defend
against a limited number.
1) setTimeout as an implicit clock: In this part, we adopt
setTimeout as an implicit clock and evaluate it against three
types of timing attacks.
• Cache attack. A cache attack is where an adversary steals
the contents being cached in the system—if certain contents
have been ﬂushed out from the cache, the access time to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:51 UTC from IEEE Xplore.  Restrictions apply. 
69
Table I: Evaluation of Defenses against Web Concurrency
Attacks
Attacks
Legacy
Three
† Fuzzyfox DeterFox Tor
Browser
Chrome
Zero
JSKERNEL
setTimeout as the implicit clock
Cache Attack [7]
Script Parsing [8]
Image Decoding [8]
Clock Edge [6]








requestAnimationFrame as the implicit clock
History Snifﬁng [9]
SVG Filtering [9]
Floating Point [10]
Loopscan [11]
CSS Animation [12]
Video/WebVTT [6]






Other web concurrency attacks
CVE-2018-5092
CVE-2017-7843
CVE-2015-7215
CVE-2014-3194
CVE-2014-1719
CVE-2014-1488
CVE-2014-1487
CVE-2013-6646
CVE-2013-5602
CVE-2013-1714
CVE-2011-1190
CVE-2010-4576






















































































































†
: “Legacy Three” refers to three commercial, legacy browsers, i.e., Firefox, Chrome
and Edge; : The defense can prevent the attack; : The defense is vulnerable.
Table II: Averaged, Measured Time of Different Targets under
Varied Attacks (SVG ﬁltering attack: averaged image loading
time with different resolutions; Loopscan attack: maximum
Measured Event Interval; note that all the numbers are aver-
aged from multiple repeated experiments.)
Defense
Chrome
Firefox
Edge
Fuzzyfox
Tor Browser
Chrome Zero
JSKERNEL
SVG Filtering
Loopscan Attack
Low Resolution
High Resolution
google
16.66 ms
16.27 ms
23.85 ms
109.09 ms
16.63 ms
15.71 ms
10 ms
18.85 ms
17.12 ms
25.66 ms
145.45 ms
17.81 ms
21.63 ms
10 ms
4.5 ms
50 ms
20.8 ms
200 ms
500 ms
12.8 ms
1 ms
youtube
8.8 ms
74 ms
21.1 ms
500 ms
600 ms
8.1 ms
1 ms
such contents will be larger than the time to access unﬂushed
ones. That said, the secret being targeted for extraction
in a cache attack is the access time of speciﬁc contents.
Web-level cache attacks were ﬁrst proposed by Oren et
al. [7], where an attacker accesses a speciﬁc shared storage,
measures the latency, and guesses the website that the user
has visited before. In this paper, we adopt a simpliﬁed
version of the cache attack, i.e., measuring the access time
of ﬂushed and unﬂushed contents, using all the defenses.
JSKERNEL can defend against the attack via a deterministic
time.
• DOM-based side channel attacks. This timing attack pro-
posed by van Goethem et al. [8] is to infer the size of
cross-origin resources, such as the number of the user’s
Chrome
Firefox
Edge
JSKernel
ChromeZero
Tor Browser