captcha. Each generated captcha, (Figure 3), was annotated 1000
time by human using Mechanical Turk. We then measured the
overall accuracy of each scheme, and compared these results to the
scheme-level accuracies reported in [5]. While solving accuracy
can be measured exactly for our fake captchas, the real ones used
in our previous work were scraped from the web, and accordingly
their true solutions were not known. So we can only compare our
result to the optimistic solving accuracy metric we used previously.
The table 1 shows for each scheme the optimistic solving accuracies
reported in [5] (one for Mechanical Turk and one for an underground
service) and the solving accuracy we measured on our generated
captchas. As shown in table 1, the solving accuracy for our fake
captchas are similar to the one observed on real world captchas
except for Recaptcha. This experiment support the hypothesis that
our taxonomy and its implementation are able to accurately replicate
real world designs.
4. ATTACKING RECOGNITION
In this section we discuss how to represent a captcha so it is
easy to process by machine learning algorithms. We motivate our
algorithmic choices and evaluate their effectiveness on various anti-
recognitions features. Based on the performance of the different
machine learning algorithms, we can compare and recommend anti-
recognition techniques.
127Figure 2: Samples of the 15 popular real world captcha schemes analyzed during our evaluation
4.2 Recommended Classiﬁers
In terms of accuracy, the choice of classiﬁer does not matter
greatly because many modern classiﬁers perform strikingly well
(i.e. 97% - 99.5% ) on the MNIST dataset. Recall that to deem
a scheme insecure our system only needs to reach 1% precision.
In practice, small differences in classiﬁer accuracy never substan-
tially changed system performance. Accordingly instead of using
the classiﬁer that have the best accuracy we choose to evaluate the
classiﬁers that are the easiest to use. Speciﬁcally, we focused on
classiﬁers that are fast to train and require minimal parameter tuning.
We argue that having a classiﬁer that is easy to parameterize and
which is fast is the best choice for captcha security evaluation be-
cause most of the work is done before the recognition phase, so this
phase should be as stable and as fast as possible. Waiting a couple of
hours or even 15 minutes to see if a modiﬁcation in the pipeline had
an impact on the breaker performance would make the evaluation a
very tedious process. We choose to use SVM [11] (Support Vector
Machines) because this class of classiﬁers has become the de-facto
classiﬁer over the last few years and is known to almost always yield
very good performance regardless of the problem. We choose to use
a linear kernel rather than a polynomial kernel which would have
achieved better performance because a linear kernel is an order of
magnitude faster to train and does not require any parameter tweak-
ing. We also recommend using KNN [12] (K Nearest Neighbors)
classiﬁer because it is the fastest classiﬁer and it has nice stability
properties that make it very reliable. The relative simplicity of the
KNN allowed us to write our own version which was optimized to
work on our binary vectors and with our sliding windows algorithm.
4.1 Captcha representation recommendations
Character recognition is a core problem in machine learning. In
the context of captchas prehaps the most relevant work produced by
the machine learning community is on the MNIST database of hand-
written digits challenge [21] which aims to recognize (distorted)
handwritten digits. From this body of work, the most useful article
for captcha security research is [20] which provide a deep analysis
on how to efﬁciently recognize digits.
Based on this work and conﬁrmed by our experimentations with
Decaptcha on multiples schemes, we recommend:
• Binarize letters: While keeping letters in gray scale is useful
for certain image algorithms, classiﬁers work better and faster
on binary features so binarizing the letters in black and white
is recommended. For example our custom distance algorithm
is 35% faster on binary vectors than integer (gray scale/color)
vectors.
• Work at the pixel level: The most efﬁcient way to represent
letter is to use a matrix that encodes their pixel representation.
Using “receptors” as, sometime recommended while doing
standard OCR, is not efﬁcient in our case because of the
distortion, rotations and other captcha deformations.
When the captchas can’t be segmented and we have to recognize
the letters without segmentation, an alternative promising approach.
would be to use very high level and complex image descriptors, such
as SURF [1] and SIFT [23], that are invariant to rotation and very
stable against distortion. In theory describing letters with robust
“interest points” will make the approach faster and more stable. A
huge hurdle for using this kind of descriptors to break captchas is
the fact that the number of points that describe each letter can’t
be normalized, which prevents the use of the classiﬁers that are so
efﬁcient at recognizing characters when combined with the standard
approach.
[eBay][Baidu][Captcha.net][NIH][Wikipedia][Digg][Blizzard][Google][Skyrock][Recaptcha][Authorize][CNN][Megaupload][Reddit][Slashdot]128KNN requires more conﬁguration than SVM as the number of
neighbors (K) needs to be selected. To remove the burden of setting
it by hand, we rely on a heuristic that computes the optimal K value,
which is often 1, by performing a cross validation on the training set
to ﬁnd the optimal maximal K value. Because this heuristic requires
quadratic time in the number of vectors in the dataset, we use the
random sampling method when the vector set is too big (> 300).
On our desktop computers, our KNN algorithm takes 20 seconds
to learn a data set of 500 captchas and 2 minutes to classify 1,000
captchas. Because of its speed, KNN is our algorithm of choice
when evaluating real world captcha schemes.
4.3 Anti-recognition features evaluation
Before evaluating real-world captchas, we wanted to compare the
effectiveness of the anti-segmentation features in isolation to under-
stand their impact on the classiﬁer performance. Effectiveness here
is quantiﬁed by the scheme learnability and the classiﬁer success
rate. To compute these numbers we repeatedly trained our classiﬁer
varying the size of the training set from 10 to 500 examples. Each
testing phase was done on 1,000 captchas coming from a different
set. The SVM results are summarized in the chart 4(a) and the KNN
results are summarized in the chart 4(b).
The ﬁrst observation we can make about these results is the fact
that they support our claims that any reasonable classiﬁer is “good
enough" to build a captcha breaker. Overall, the SVM and the KNN
classiﬁers both achieve very good results and exhibit a very similar
learning rate. The only two major differences is that SVM does
better on distortion ( 61% vs 50% ) and KNN performs better with
the mix of ﬁve complex fonts ( 62% vs 59% ). As predicted by the
theory, the KNN results are also more stable than the SVM ones,
but as visible in the charts, the SVM accuracy jittering is minimal
(at most 5% ) and is unlikely to affect the outcome of a security
evaluation.
Recommendation. The results of our evaluation lead us to the
following recommendations regarding anti-segmentation features.
• Use a small non-confusable charset: While using a larger
charset slightly impacts the classiﬁer accuracy and decreases
the scheme’s learnability, the security gain is too small to be
useful: forcing the attacker to learn on 40 captchas instead of
10 reduces the accuracy from 100% to 92% which negligible
compared to the loss in human accuracy ( 98% for 0-9 down
to 82% for azAZ09 [3]). Accordingly, since increasing the
charset does not offer a signiﬁcant security gain, a captcha
charset should be small, with no caps at the very least, and
should not contain confusing letters (e.g. i-j) to make it easy
for humans to solve.
• Don’t use distortion: Applying a distortion is the most ef-
fective way for reducing classiﬁer accuracy and decreasing
scheme learnability. However, this is not sufﬁcient to pre-
vent a classiﬁer from being effective - this should be avoided
and replaced with a proper anti-segmentation technique as
distortion also harms user accuracy signiﬁcantly [3].
• Use rotation only in conjunction with anti-segmentation:
Rotating characters by itself doesn’t signiﬁcantly impede clas-
siﬁer accuracy and learnability; accordingly, their sole use is
in conjunction with anti-segmentation techniques to make the
size of each character unpredictable (See section 5.3).
It is interesting to note here that we ran an additional exper-
iment, in which we tried to learn on straight characters and
tried to classify examples from this dataset. As predicted by
the theory, SVM and KNN can’t recognize rotated characters
if they don’t learn on them. Having classiﬁers insensitive to
rotation is one of the main rationales behind the creation and
use of more complex classiﬁers such as CNN (Convolutional
Neural Networks) [20].
• Use multiple fonts: Using multiple fonts is an effective prin-
ciple as it decreases signiﬁcantly the classiﬁer accuracy and
will render the segmentation more difﬁcult by making the size
of characters unpredictable.
5. SEGMENTATION
As seen in the previous section 4, while carefully chosen anti-
recognition techniques help slow down the learning process and
reduce classiﬁer accuracy, they are not sufﬁcient by themselves. In
this section we analyze the effectiveness of the 7 anti-segmentation
techniques we found in the wild on real captchas schemes and show
their limitations. Note that we made the choice to focus on attack-
ing techniques that are as generic as possible rather that technique
optimized to break a speciﬁc captcha scheme. This choice make the
techniques described below applicable to other schemes (we were
able to break 13 schemes with the 7 techniques described below) at
the expense of a couple of accuracy points. Based on the following
analysis, we provide recommendations on which technique to use
and how to implement them.
5.1 Background Confusion
Under the term background confusion we regroup all the tech-
niques that try to prevent segmentation by “blending” the captcha
text with the background. There are three main ways to achieve this:
using a complex image background (ﬁgure 5), having a background
that has “very” similar colors to the text (ﬁgure 6) and adding noise
to the captcha (ﬁgure 7).
Some captchas schemes combine multiples background confusion
techniques. However instead of increasing the security, combining
background confusion techniques often lead to decrease it as it
makes the scheme susceptible to more attacks. This is for example
the case for Authorize (ﬁgure 8) which combines color similarity
and noise: using gray noises make it susceptible to de-noising and
anti-color attacks.
Complex background. The idea behind using a complex back-
ground is that the lines/shapes “inside it” will be confused with
the real text and thus will prevent the breaker from isolating and
segmenting the captcha. Eventhough previous works [31] have
demonstrated that usually this type of defense is insecure, many
captchas still rely on it. One of the most prominent examples of
captcha using this type of defense is the one (ﬁgure 5) that Bliz-
zard uses for all their websites (World of Warcraft, Starcraft II and
Battle.net) . While they are using random backgrounds generated
from game screenshots to prevent breakers from learning its shape
they still have to make letters “stand out” from the background so
that humans can decipher the captcha. We found out that that the
easiest way to deal with captcha schemes that use random back-
grounds but a ﬁnite number of colors is to use a technique that we
call anti-pattern: for all the possible font colors remove everything
from the captcha that is not close to this color and test if you get
a reasonable number of clusters (letters) with the right amount of
pixels. As visible in ﬁgure 5, this is very effective against Blizzard
captchas and Decaptcha solves 70% on them.
129(a) SVM classiﬁer
(b) KNN classiﬁer
Figure 4: Effectiveness of classiﬁers on various anti-recognition features. These graphs depict how fast each classiﬁer precision
improves as more examples are added to the training set.
Figure 5: Example of the Blizzard pipeline
Color similarity. A related approach to the complex background
techniques is to use colors that are perceived as very different by
humans but are in reality very close in the RGB spectrum. The best
and most sophisticated example of captcha scheme that uses this
kind of technique is the Skyrock scheme visible in ﬁgure 6. While
the letters appear very distinct to the human eye, when represented
on the RGB spectrum they are so close that it is almost impossible
to use the CFS [32] or the Anti-pattern techniques on it. However,
as visible in ﬁgure 6, an effective way to counter this defense is
to have the breaker work on a different color representation that is
closer to the human perception, namely the HSV or HSL [29] ones,
and binarize the captcha by using a threshold based on the hue or
the saturation. For Skyrock we use a threshold based on the hue
value. Changing the color space representation allows Decaptcha to
get 2% precision on Skyrock.
Noise. The last and “most efﬁcient” technique used to confuse the
segmentation is to add random noise to the image. For example, this
technique is used in Captcha.net as visible in ﬁgure 7. Note that the
noise must have the same color as the text because otherwise the anti-
pattern technique can be applied to remove it. To de-noise captchas
many techniques have been proposed over the years, including using
the standard image ﬁlter erode [30]. However it turns out that
using a MRF (Markov Random Field) aka Gibbs algorithm [14]
is far more effective. A Gibbs de-noising algorithm is an iterative
algorithm that works by computing the energy of each pixel based
on its surroundings and removing pixels that have an energy below
a certain threshold. The algorithm completes when there are no
more pixels to remove. The energy of a given pixel is computed
by summing the values on a gray scale of its 8 surrounding pixels
and dividing by 8. As visible in ﬁgure 7 this algorithm completely
negates the Captcha.net anti-segmentation defense and, accordingly,
decaptcha is able to achieve 73% precision on Captcha.net.
For Authorize, which also use noise, Decaptcha also achieves
66% precision. As we will see in the next section using the Gibbs
algorithm is also the best approach when the lines are smaller that
the characters.
Recommendation. Overall, we believe that using any background
confusion technique as a security mechanism is not secure and we
recommend not relying on these kinds of techniques. While it is
true that certain complex backgrounds are harder than others to
remove, with sufﬁcient effort and custom pre-processing, it is likely
than any of these backgrounds can be processed. Accordingly, we
recommend using background only for cosmetic purposes.
5.2 Using lines
A second approach to prevent segmentation is to use line(s) that
cross multiple characters. This approach is used by Digg (ﬁgure 9)
and Slashdot (ﬁgure 10) for instance. While it is possible to use
lines that do not cross multiples characters , like the old Microsoft
captcha, it has been proven to be a totally insecure approach [32]
and is, therefore, not discussed here. In the wild we saw two types
of lines used to prevent segmentation: small lines that cross the
captcha’s letters (e.g. Digg) and large lines of the width as the
characters’ lines that cross entire captchas (e.g. Slashdot and CNN).
Small lines. The ﬁrst approach is to use small lines that will prevent
the captcha from being segmented. This is the strategy used by Digg
(ﬁgure 9). The standard approach to deal with small lines is to use
a histogram-based segmentation [17, 31] that projects the captcha
pixels to the X or Y coordinates.
% success0%10%20%30%40%50%60%70%80%90%100%Trainning set size10205010020050009 AZ09 azAZ09Distortion 3 fonts 5 fonts Angles % success0%10%20%30%40%50%60%70%80%90%100%Trainning set size10205010020050009 AZ09 azAZ09Distortion 3 fonts 5 fonts Angles OriginalPre-processingSegmentationPost-segmentation130Figure 6: Example of the Skyrock pipeline
Figure 7: Example of the Captcha.net pipeline
This approach “works” because the region where the characters
are is denser and therefore will create peaks in the histogram. The
problem with this approach is how to determine the threshold and
the size of the windows around it. It turns out that binarizing the
captcha and then using a Gibbs de-noising algorithm with character
reconstruction (see ﬁgure 9) is actually more efﬁcient as it does not
require such a brittle and complex tuning. Using Gibbs Decaptcha is
able to achieve 86% recall and 20% precision on Digg captchas.
Big lines. The second approach is to use lines that have the same
“width” as the character segments. The main advantage of this ap-
proach is that it is not susceptible to de-noising algorithms. However,
it is susceptible to line-ﬁnding algorithms, such as the Canny edge
detection [6] and the Hough Transform [13], because the lines cross
the entire captcha. An illustration of our own implementation of
the Hough Transform that preserves letters is visible in ﬁgure 10.
As one can see, our implementation is able to ﬁnd all the lines very
accurately. The difﬁculty lies in the removal process that must pre-
serve the letters. To do this, before removing a pixel we look at