hex
b0:
6000
54
600a
6008
56
b1:
5b
56
...
instruction
PUSH1 0x60
SLOAD
PUSH1 0xa
PUSH1 0x8
JUMP
JUMPDEST
JUMP
Code Block 1: Assembly Code— We show (part of the) input
hex string disassembled and then divided into basic blocks.
each node represents a basic block and each edge denotes
a branch between two blocks. In a directed edge b0 →
b1, we refer to b1 as the successor of b0. At its core,
recovering a CFG from basic blocks requires identifying
the successor(s) of each basic block.
To determine the successor(s) for a basic block b, we
need to examine the last instruction in the block. There
are three cases:
1. An instruction that does not alter control ﬂow
2. An instruction that halts execution (STOP, REVERT,
INVALID, RETURN, SELFDESTRUCT)
3. An instruction that branches (JUMP, JUMPI)
In the ﬁrst case, control simply ﬂows to the next block
in the sequence, making that block the successor of b.
In the second case, since the execution is terminated, b
would have no successor. In the last case, the successor
depends on the target address of the branch instruction,
which requires closer scrutiny.
Indirect branches present a challenge when determin-
ing the target address [46]. In a direct branch, the destina-
tion address is derived within the basic block and thus can
be computed easily. In an indirect branch, however, the
destination address is placed on the stack before entering
a block. Consider block b1 in Code Block 1. As men-
tioned, the destination address is on the top of the stack
upon entering the block. We therefore cannot determine
the destination address from block b1 alone.
To address this issue with indirect branches, we model
the stack state in our CFG recovery algorithm, shown
in Code Block 2. The algorithm follows a conventional
pattern for CFG recovery [46]: we analyze a basic block,
identify its successors, add them to the CFG, then recur-
sively analyze the successors.
When analyzing a block, we model the stack effects
of instructions. The PUSH instructions are modeled with
concrete values placed on the stack. All other instructions
are modeled only insofar as their effect on stack height.
explore(block, stack):
if stack seen at block:
return
mark stack as seen at block
for instruction in block:
update stack with instruction
save stack state
if block ends with jump:
successor_block = stack.resolve_jump
add successor_block to CFG
explore(successor_block, stack)
if block falls to subsequent_block:
revert stack state
add subsequent_block to CFG
explore(subsequent_block, stack)
Code Block 2: CFG Recovery Algorithm— We analyze a
basic block, identify its successors, add them to the CFG, then
recursively analyze the successors
Consider the ﬁrst two instructions in block b0 in Code
Block 1. Suppose we start with an empty stack at the
block entry. The ﬁrst instruction PUSH1 0x60 will push
the constant 0x60 on the stack. The second instruction
SLOAD will consume the 0x60 to load an unknown value
from storage.
Using this stack model, we effectively emulate through
the CFG, triggering all reachable code blocks. At each
block entrance reached, we compare the current stack im-
age with stack images observed thus far. If a stack image
has already been recorded, the block would continue to a
path that has already been explored, and so the recovery
algorithm backtracks.
4.3 Lifting
In this stage, we lift EVM’s stack-based instructions into
a register-based instructions. The register-based instruc-
tions preserve most operations deﬁned in the EVM speciﬁ-
cation. Additionally, a few new operations are introduced
to make the representation more concise and understand-
able:
INTCALL, INTRET: These two instructions call and re-
turn from an internal function, respectively. Unlike ex-
ternal functions invoked through CALL, internal functions
are implicitly triggered through JUMP instructions. We
heuristically identify the internal function calls 3, which
allows further simpliﬁcation of the CFG.
ASSERT: As in many high level languages, this instruc-
tion asserts a condition. The solidity compiler inserts
3The details of the heuristic are included in the Appendix A.
1374    27th USENIX Security Symposium
USENIX Association
certain safety checks (e.g., array bounds checking) into
each produced compiled contract. In order to eliminate
redundant basic blocks, we replace these checks with
ASSERT.
NEQ, GEQ, LEQ, SL, SR: These instructions correspond
to “not equal”, “greater than or equal”, “less than or
equal”, "shift left", and “shift right”. While these op-
erations are not part of the original EVM instruction set,
the functionalities are frequently needed. These instruc-
tions allow us to collapse more verbose EVM instructions
equences (e.g., sequence EQ, ISZERO) into one NEQ in-
struction.
MOVE: This instruction copies a register value or a con-
stant value to a register. The instructions SWAP (swap two
stack items), DUP (duplicate a stack item) and PUSH (push
a stack item) are all translated into MOVE instructions.
To derive the registers on which the instructions oper-
ate, we map each stack word to a register, ranging from
$s0 to $s1023 because the EVM stack is speciﬁed to
have a maximum size of 1,024 words. Additionally, we
introduce two other registers in our intermediate repre-
sentation, namely $m and $t. The Solidity compiler uses
memory address 0x40 to store the free memory pointer.
Since that pointer is frequently accessed, we use $m to re-
place all references to that memory word. The $t register
is used as a temporary register for SWAP instructions.
Each instruction is then assigned appropriate registers
to replace its dependency on the stack. Consider the
instruction ADD as an example. ADD pops two words off of
the stack, adds them together, and pushes the result back
onto the stack. In our instruction, ADD reads from two
registers, adds the values, and writes back to a register.
Figure 1 shows both the stack and the registers during
an ADD operation. A key observation is that in order
to read and write the correct registers, the stack height
must be known [49]. In this example, the initial stack
height is three, so the ADD reads from $s1 and $s2, and
writes the result back to $s1. Our translation for this
instruction would be ADD $s1, $s2, $s1, where we
place the write_register before read_registers.
$s3
$s2
$s1
$s0
0x5
0x3
0x4
0x8
0x4
Figure 1: Lifting an ADD Instruction—We show both the stack
image and the registers before and after an ADD is executed. The
initial stack height is three, thus, ADD reads from $s1 and $s2,
and writes back the result to $s1.
PUSH1 0x1
SLOAD
DUP2
LT
ISZERO
PUSH1 0x65
JUMPI
$s3, 0x1
$s3, [$s3]
$s4, $s2
$s3, $s4, $s3
MOVE
SLOAD
MOVE
LT
ISZERO $s3, $s3
MOVE
$s4, 0x65
$s4, $s3
JUMPI
Code Block 3: Lifting A BLock— We show a block of stack-
based instructions lifted to register-based instructions given
initial stack height of three.
SLOAD
GEQ
JUMPI
$s3, [0x1]
$s3, $s2, $s3
0x65, $s3
Code Block 4: Optimizing A Block—We show the optimized
version of Code Block 3.
at the block entrance, all the instructions within the block
can be lifted. Code Block 3 shows an example of a ba-
sic block being lifted given a stack height of three at the
block entrance. We note that the stack images recorded at
a block might disagree on height. In most cases, the dis-
crepancy arises from internal function, which is resolved
by introducing INTCALL. In other cases, we duplicate the
reused block for each unique height observed.
4.4 Optimization
During the optimization phase, we apply several com-
piler optimizations to our intermediate representation. We
mainly utilize data ﬂow optimizations, including constant
folding, constant propagation, copy propagation and dead
code elimination. The details of these algorithms are out-
side the scope of this paper, but they are well described in
the literature [8, 38, 47].
The optimizations mentioned aim to simplify the code
body. A signiﬁcant number of available EVM instructions
are dedicated to moving stack values. As a result, the
lifted code contains many MOVE instructions that simply
copy data around. These optimizations eliminate such
redundancy in the instructions. Code Block 4 shows the
optimized version of the block from Code Block 3. In
the example, all the MOVE instructions are eliminated. We
also note that the LT, ISZERO sequence is further reduced
to GEQ.
Knowing the precise stack height is crucial to lifting.
As described previously, we collect the stack images for
each block during CFG recovery. Given the stack height
4.5 Aggregation
Aggregation aims to further simplify the produced inter-
mediate representation by replacing many instructions
USENIX Association
27th USENIX Security Symposium    1375
SLOAD $s3, [0x1]
GEQ
JUMPI 0x65, $s3
$s3, $s2, $s3
$s3 = S[0x1]
$s3 = $s2 ≥ $s3
if ($s3) goto 0x65
Code Block 5: Three-Address Form—We show the Code
Block 4 in three-address form.
with their analog, compact versions that we term “aggre-
gated expressions.” Unlike instructions, expressions can
be nested arbitrarily, bearing more resemblance to high
level languages.
To begin aggregation, instructions are converted into
expressions in three-address form [47]. Each expression
is a combination of an assignment and an operator, with
the write_register to the left of the assignment and
the operator along with the read_registers to the right
of the assignment. Code Block 5 shows the conversion.
Next, we aggregate expressions based on the deﬁnitions
and usages of registers. A deﬁnition is in the form $r =
RHS, where $r is a register and RHS is an expression. For
each subsequent usage of $r, we replace it with RHS as
long as it is valid to do so. We cease propagating a given
deﬁnition when either $r is redeﬁned or any part of RHS
is redeﬁned.
Combined with dead code elimination, the aggregation
process pushes the deﬁnitions down to their usages, pro-
ducing a more compact output. Consider the example in
Code Block 5, by aggregating the ﬁrst expression into the
second one, and then the second into the third, the block
can be summarized into a single expression:
if ($s2 ≥ S[0x1]) goto 0x65
4.6 Control Flow Structure Recovery
We employ structural analysis [44] algorithms to recover
high level control constructs (control ﬂow structure re-
covery). Constructs such as “while” and “if then else”
are recovered through pattern matching and collapsing
the CFG. If a region is found to be irreducible, we leave
the goto expression unchanged. Moreover, each external
function is separated by walking through a jump-table
like structure at the entrance of the CFG. Code Block 6
shows an external function as an example.
4.7 Validation
Erays transforms the contract into more readable expres-
sions. In order to make use of the expressions for fur-
ther analysis, we must ﬁrst validate that they are correct.
The correctness is evaluated through testing. Given spe-
ciﬁc contract inputs, we “execute” our representation and
assert(0x0 == msg.value)
$s2 = c[0x4]
while (0x1) {
if ($s2 >= s[0x0])
break
if ($s2 <= 0xa) {
$s2 = 0x2 + $s2
}
$s2 = 0xc + $s2
}
m[$m] = $s2
return($m, (0x20 + $m) - $m)
Code Block 6: Structural Analysis—A simple example of the
ﬁnal output of Erays, where control ﬂow structures are recovered
from blocks of expressions.
check if it produces the correct outputs.
We use go-ethereum (Geth) to generate ground truth
for the expected behavior. By replaying an execution
(transaction), Geth outputs a debug trace, which is a se-
quence of execution steps. Each step is a snapshot of the
EVM machine state, which includes the opcode executed,
the program counter, the stack image, the memory image,
and the storage image.
We then “execute” our representation and conﬁrm the
result is consistent with the debug trace. For that purpose,
we implement a virtual machine that runs our represen-
tations. During the execution, the arguments of an ex-
pression are ﬁrst evaluated, then the operation itself is
executed given the arguments. There are three classes of
operations that need to be treated differently.
In the ﬁrst case, the operations retrieve some inputs for
the contract. As an example, CALLDATALOAD fetches part
of the input data (calldata). Operations that are dependent
on the blockchain world state also fall into this category.
An example would be the BLOCKHASH, which fetches the
hash of a recently completed block. For this class of
operations, we look up the resultant value from the debug
trace. If an operation is missing in the trace (original trace
never issued such call), we mark it as a failure.