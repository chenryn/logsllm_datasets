### Optimized Text

#### 3.1 Unforgeability Flaw for TPM 2.0-based SPKs
The signature proofs of knowledge (SPKs) generated via TPM commands should be unforgeable, meaning a host must not be able to compute an SPK on a message \( m \) without calling `TPM.Sign` on a hash \( c \) that was previously cleared via a `TPM.Hash` call on \( m \). Chen and Li [5] attempted to prove this property, but their proof is incorrect, as noted by Xi et al. [8].

In the proof, the authors simulate the TPM without knowing its secret key \( tsk \). To simulate an SPK on message \( m \), they randomly choose values for \( c \) and \( s \), and then derive the t-values \( E \) and \( L \) in `TPM.Commit` based on \( c \), \( s \), and \( tpk \). For the reduction to be valid, the randomly chosen \( c \) must become the hash value of \( (m, t) \) (via `TPM.Hash` and modeling the hash as a random oracle), and `TPM.Sign` should respond with \( s \) when that \( c \) is given as input.

However, if an adversary has arbitrary access to the TPM interfaces, they can query `TPM.Hash` on many different messages \( (m_1, t), \ldots, (m_n, t) \) containing the same \( t \) value. The reduction does not know which of these queries the adversary will later use to complete the signature, thus having only a \( \frac{1}{n} \) chance to correctly simulate the proof.

**Unforgeability Fix Breaks Privacy:**
This problem is inherent in the current TPM interface but could be solved by modifying the `TPM.Sign` method, as proposed by Xi et al. [8]. When signing, the TPM first chooses a nonce \( n_t \) and computes \( c' = H(n_t, c) \) and \( s = r + c \cdot tsk \). This allows proving the unforgeability of TPM-generated SPKs, as the reduction can now program the random oracle on \( c' \) when the `TPM.Sign` query is made.

However, this modification introduces a subliminal channel, as \( n_t \) would be part of the final signature, and a subverted TPM can embed arbitrary information in that nonce, breaking anonymity without the host noticing. Given recent revelations of subverted cryptographic standards and tampered hardware, such attacks are very realistic. We propose changes to the TPM that prevent such subliminal channels and allow proving the unforgeability of SPKs, as detailed in Section 4.

#### 3.2 Static Difﬁe-Hellman Oracle
Another issue with the TPM 2.0 interface is the static Difﬁe-Hellman (DH) oracle, as highlighted by Acar et al. [25]. For any chosen point \( g \in G_1 \), the host can learn \( g^{tsk} \) by calling `TPM.Commit(g, bsn)` and `TPM.Sign(commitId, c)`, and then computing \( g^{tsk} = (g^s \cdot E^{-1})^{1/c} \). This leaks significant information about \( tsk \). Brown and Gallant [26] and Cheon [27] show that the existence of such an oracle makes finding the discrete log much easier. On Barreto-Naehrig (BN) curves, up to one-third of the security strength can be lost due to a static DH oracle. For example, a 256-bit BN curve, which should offer 128 bits of security, only offers 85 bits of security with a static DH oracle.

The static DH oracle also compromises forward anonymity, which guarantees that signatures made by an honest platform remain anonymous even if the host later becomes corrupted. In existing schemes, even anonymous signatures contain a pair \( (g_i, U_{i,k}) \) where \( g_i \) is a random generator and \( U_{i,k} = g_i^{tsk \cdot k} \). With a static DH oracle, a corrupted host can use the TPM to compute \( U'_i = g_i^{tsk} \) for all previous signatures and test whether \( U'_i = U_{i,k} \), breaking the anonymity of these signatures.

**Cleared Generators for LRSW-based Schemes:**
Xi et al. [8] propose an approach to remove the static DH oracle while preserving support for both LRSW- and q-SDH-based DAA schemes. They introduce a new `TPM.Bind` command that takes as input two group elements \( P \) and \( K \) and a proof \( \pi_P \leftarrow \text{SPK}\{\alpha : P = \bar{g}^\alpha \wedge K = tpk^\alpha\} \). The TPM verifies the proof and, if correct, stores \( P \) as a cleared generator. The `TPM.Commit` interface will then only accept such cleared generators as input for \( g \). This removes the static DH oracle because the proof \( \pi_P \) shows that \( P^{tsk} = K \) is already known. A similar approach was used in the recent LRSW-DAA scheme by Camenisch et al. [9].

However, this approach has two major problems. First, it is challenging to implement this functionality on a TPM due to limited storage. The TPM stores only a small number of root keys, and for other keys, it creates a "key blob" containing the public part of the key in the clear and the private part encrypted with one of the root keys. The TPM would need to store an authenticated list of cleared generators, which is a significant change to the current TPM 2.0 specification.

Second, this interface does not support signature-based revocation, an important extension to anonymous signatures. Signature-based revocation, introduced in EPID [28], allows revoking a platform given a signature from that platform. Each signature includes a pair \( (B, \text{nym}) \) where \( B \leftarrow G_1 \) and \( \text{nym} \leftarrow B^{tsk} \). The signature revocation list (SRL) contains tuples \( \{(B_i, \text{nym}_i)\} \) from signatures of revoked platforms. When signing, the TPM must prove it is not the producer of any of these revoked signatures. Using the changes proposed by Xi et al. [8], the host cannot input the generators \( B_i \) to the TPM anymore, as it cannot produce the required proofs \( \pi_{B_i} \) in the `TPM.Bind` interface.

**Random Generators via Hashing:**
Another approach to remove the static DH oracle is to determine the base \( g \) by hashing. Instead of inputting \( g \) in `TPM.Commit`, the host provides a basename \( bsn_E \), upon which the TPM derives \( g \leftarrow HG_1(bsn_E) \). By assuming the hash function is a random oracle, \( g \) is enforced to be random, avoiding the static DH oracle, as the host can no longer create large q-SDH sequences.

Interestingly, this approach was included in the revision from TPM 1.2 to TPM 2.0 to avoid another static DH oracle present in the earlier standard. In TPM 1.2, `TPM.Commit` received a generator \( j \) instead of \( bsn_L \) and directly computed \( K \leftarrow j^{tsk} \) and \( L \leftarrow j^r \), whereas TPM 2.0 now receives \( bsn_L \) and first derives \( j \leftarrow HG_1(bsn_L) \).

While applying the same idea to \( g \) would solve the problem, it would significantly limit the functionality of the TPM interface. Recall that TPM 2.0 was designed to support both LRSW- and q-SDH-based DAA schemes. While q-SDH schemes could be easily ported to these new interfaces, no current LRSW-based scheme would be supported. All existing LRSW-based schemes require the TPM to prove knowledge of \( d = b^{tsk} \) for a generator \( b \leftarrow a^y \) chosen by the DAA issuer. As the issuer must know the discrete logarithm \( y \), it cannot produce a basename \( bsn_E \) such that \( b = HG_1(bsn_E) \) holds.

Another protocol that would not be compatible with this change is signature-based revocation [28], which requires the TPM to use basenames \( B_i \) defined in the SRL. Camenisch et al. [10] recently proposed using \( B \leftarrow HG_1(bsn) \) instead of \( B \leftarrow G \) to avoid the DH oracle, i.e., the TPM gets \( bsn \) as input and the SRL has the form \( \{(bsn_i, \text{nym}_i)\} \). However, the authors did not detail how the TPM interfaces need to be changed to support this approach. In fact, their protocol is not easily instantiable, as the proposed computations by the TPM for generating the proofs \( \pi_{SRL,i} \) would require the TPM to keep state, necessitating new TPM commands.

**Our Approach:**
In this work, we follow the idea of using hash-based generators but thoroughly describe the necessary changes to the TPM 2.0 specification and optimize our solutions. Most importantly, our proposed modifications do not require any new TPM commands but modify the existing ones slightly. To demonstrate the flexibility of our TPM interface, we present a generic protocol that allows creating a wide class of signature proofs of knowledge using these TPM commands. The existing LRSW-based DAA and signature-based revocation protocols cannot be used with our interface due to the aforementioned issues. We therefore also propose new protocols for signature-based revocation and LRSW-based DAA that are compatible with the proposed TPM interfaces and provably secure.

### 4. THE REVISED TPM 2.0 INTERFACE
This section introduces new TPM 2.0 interfaces for creating signature proofs of knowledge. The TPM creates keys with the `TPM.Create` command. Messages can be signed by first calling `TPM.Commit`, followed by `TPM.Hash` and `TPM.Sign`. We discuss our proposed modifications to these commands and how they address the problems mentioned in Section 3. Our revised TPM interfaces are presented in Figure 1. We use a simplified notation and refer to the full version of this paper for the complete specification.

**Avoiding a Subliminal Channel:**
To solve the unforgeability problem, a nonce to which the TPM contributed needs to be included in the computation of the Fiat-Shamir challenge \( c' \). A malicious TPM must not be able to alter the distribution of the signature proofs of knowledge, as this would break privacy. The nonce needs to be computed jointly at random by the TPM and the host. In `TPM.Commit`, the TPM chooses a nonce \( n_t \) and commits to it by computing \( \bar{n_t} \leftarrow H(\text{"nonce"}, n_t) \). The host picks another nonce \( n_h \) and gives it as input to `TPM.Sign`. The TPM must use \( n_t \oplus n_h \) in the Fiat-Shamir hash. An honest host takes \( n_h \) uniformly at random, ensuring \( n_t \oplus n_h \) is uniform, preventing a malicious TPM from hiding messages in the nonce.

**Avoiding the DH Oracle:**
The `TPM.Commit` command is modified to prevent a static Difﬁe-Hellman oracle. The oracle exists in the current TPM 2.0 interface because the host can pass any value \( g \) to the TPM and obtain \( g^{tsk} \). Our revised TPM prevents this by using a generator \( \tilde{g} \) that is either \( \tilde{g} \leftarrow HG_1(bsn_E) \) for some \( bsn_E \) it receives, or set to \( \tilde{g} \leftarrow \bar{g} \) if \( bsn_E = \perp \), where \( \bar{g} \) denotes the fixed generator used within the TPMs.

Clearly, the host can no longer abuse this interface to learn information about the TPM secret key \( tsk \). If \( \tilde{g} = \bar{g} \), the host receives \( tpk \), which it already knows. If \( \tilde{g} = HG_1(bsn_E) \) and we model the hash function as a random oracle, the host receives a random element raised to the power \( tsk \), which does not provide useful information. More precisely, the proof of Lemma 2 shows that we can simulate a TPM without knowing \( tsk \), proving that the TPM does not leak information on \( tsk \). Although our changes limit the generators the host can choose, Section 5.2 shows that we can still build DAA schemes based on q-SDH and LRSW on top of this interface, including support for signature-based revocation.

**4.1 Zero-knowledge Proofs with the TPM**
We now describe how our proposed TPM interfaces can be used to create a wide class of signature proofs of knowledge. To demonstrate the flexibility of our interface, we propose a generic proof protocol `Prove` that orchestrates the underlying TPM commands. We show that proofs generated by `Prove` are unforgeable, device-bound, and remain zero-knowledge even if the TPM is subverted. Protocol designers can use our `Prove` protocol as a generic building block for more complex protocols instead of having to use the TPM commands and proving these security properties from scratch. Our DAA protocols presented in Section 5 use this approach.

**A Generic `Prove` Protocol:**
Using the proposed TPM interfaces, a host can create signature proofs of knowledge of the following structure:

\[
\text{SPK}\left\{ (\gamma \cdot (tsk + hsk), \alpha_1, \ldots, \alpha_l) : 
\begin{aligned}
& y_1 = (\hat{g}^{\delta})^{\gamma \cdot (tsk + hsk)} \cdot \prod_{i=1}^l b_i^{\alpha_i} \\
& y_2 = HG_1(bsn_L)^{\gamma \cdot (tsk + hsk)} \cdot \prod_{i=1}^l b_i^{\alpha_i} \\
& y_3 = \prod_{i=1}^l \hat{b}_i^{\alpha_i} 
\end{aligned}
\right\}(mh, mt)
\]

for values \( \delta, hsk, tsk, \gamma \in \mathbb{Z}_p \), strings \( bsn_L, mh, mt \in \{0, 1\}^* \), group elements \( y_1, y_2, y_3, \hat{g} \), and set \( \{(\alpha_i, b_i, \hat{b}_i)\}_i \) with \( \alpha_i \in \mathbb{Z}_p \). Either \( y_1, \hat{g} \), and all \( b_i \)'s are in \( G_1 \) or they are all in \( G_T \). All \( \hat{b}_i \) values and \( y_2 \) must be in \( G_1 \). If \( bsn_L = \perp \), the second equation proving a representation of \( y_2 \) is omitted from the proof. We could lift this part of the proof to \( G_T \) but omit it to simplify the presentation. The values \( y_3 \) and \( \hat{b}_i \) must either all be in \( G_1 \), \( G_2 \), or \( G_T \).

Additionally, we require that the TPM works with a cleared generator, meaning either \( \hat{g} = \tilde{g} \) or \( \hat{g} = e(\tilde{g}, \hat{g}_2) \) with \( \tilde{g} \) denoting the cleared generator being either \( \bar{g} \) (the fixed generator) or \( HG_1(bsn_E) \) for some \( bsn_E \).

**Session System Parameters:**
- \( G_1 = \langle \bar{g} \rangle \) of prime order \( q \)
- Nonce bit length \( l_n \)
- Random oracles \( H : \{0, 1\}^* \rightarrow \mathbb{Z}_p \) and \( HG_1 : \{0, 1\}^* \rightarrow G_1 \)
- Initialize \( \text{Committed} \leftarrow \emptyset \) and \( \text{commitId} \leftarrow 0 \)

**Init.** On input `TPM.Create()`:
- If this is the first invocation of `TPM.Create`, choose a fresh secret key \( tsk \leftarrow \mathbb{Z}_p \) and compute public key \( tpk \leftarrow \bar{g}^{tsk} \).
- Store \( tsk \) and output \( tpk \).

**Hash.** On input `TPM.Hash(mt, mh)`:
- If \( mt \neq \perp \), the TPM checks whether it wants to attest to \( mt \).
- Compute \( c \leftarrow H(\text{"TPM"}, mt, mh) \).
- Mark \( c \) as "safe to sign" and output \( c \).

**Commit.** On input `TPM.Commit(bsn_E, bsn_L)`:
- If \( bsn_E \neq \perp \), set \( \tilde{g} \leftarrow HG_1(bsn_E) \); otherwise, set \( \tilde{g} \leftarrow \bar{g} \).
- Choose \( r \leftarrow \mathbb{Z}_p \), \( n_t \leftarrow \{0, 1\}^{l_n} \) and store \( (\text{commitId}, r, n_t) \) in `Committed`.
- Set \( \bar{n_t} \leftarrow H(\text{"nonce"}, n_t) \), \( E \leftarrow \tilde{g}^r \), and \( K, L \leftarrow \perp \).
- If \( bsn_L \neq \perp \), set \( j \leftarrow HG_1(bsn_L) \), \( K \leftarrow j^{tsk} \), and \( L \leftarrow j^r \).
- Output \( (\text{commitId}, \bar{n_t}, E, K, L) \) and increment `commitId`.

**Sign.** On input `TPM.Sign(commitId, c, n_h)`:
- Retrieve record \( (\text{commitId}, r, n_t) \) and remove it from `Committed`; output an error if no such record was found.
- If \( c \) is safe to sign, set \( c' \leftarrow H(n_t \oplus n_h, c) \) and \( s \leftarrow r + c' \cdot tsk \).
- Output \( s \).