# 34 \| 云环境下的授权该怎么做？你好，我是胡夕。今天我要分享的主题是：Kafka 的授权机制。
## 什么是授权机制？我们在上一讲中花了不少时间讨论 Kafka 的认证机制，今天我们来看看 Kafka的授权机制（Authorization）。所谓授权，一般是指对与信息安全或计算机安全相关的资源授予访问权限，特别是存取控制。具体到权限模型，常见的有四种。-   ACL：Access-Control List，访问控制列表。-   RBAC：Role-Based Access Control，基于角色的权限控制。-   ABAC：Attribute-Based Access Control，基于属性的权限控制。-   PBAC：Policy-Based Access Control，基于策略的权限控制。在典型的互联网场景中，前两种模型应用得多，后面这两种则比较少用。ACL 模型很简单，它表征的是用户与权限的直接映射关系，如下图所示：![](Images/9344581eb3c8fad00b52a8dbe90ceaf3.png){savepage-src="https://static001.geekbang.org/resource/image/eb/ad/eb85325aa6858b45a53ecaae6e58d0ad.jpg"}而 RBAC 模型则加入了角色的概念，支持对用户进行分组，如下图所示：![](Images/8204e18fe596e44d707e03c30ac657ca.png){savepage-src="https://static001.geekbang.org/resource/image/43/aa/4368827128d1309709fe51199a11b7aa.jpg"}Kafka 没有使用 RBAC 模型，它用的是 ACL模型。简单来说，这种模型就是规定了什么用户对什么资源有什么样的访问权限。我们可以借用官网的一句话来统一表示这种模型："**PrincipalP is \[Allowed/Denied\] Operation O From Host H On Resource R.**"这句话中出现了很多个主体，我来分别解释下它们的含义。``{=html}-   Principal：表示访问 Kafka 集群的用户。-   Operation：表示一个具体的访问类型，如读写消息或创建主题等。-   Host：表示连接 Kafka 集群的客户端应用程序 IP 地址。Host    支持星号占位符，表示所有 IP 地址。-   Resource：表示 Kafka 资源类型。如果以最新的 2.3 版本为例，Resource    共有 5 种，分别是 TOPIC、CLUSTER、GROUP、TRANSACTIONALID 和    DELEGATION TOKEN。当前，Kafka 提供了一个可插拔的授权实现机制。该机制会将你配置的所有 ACL项保存在 ZooKeeper 下的 /kafka-acl 节点中。你可以通过 Kafka 自带的kafka-acls 脚本动态地对 ACL 项进行增删改查，并让它立即生效。
## 如何开启 ACL？在 Kafka 中，开启 ACL 的方法特别简单，你只需要在 Broker端的配置文件中增加一行设置即可，也就是在 server.properties文件中配置下面这个参数值：    authorizer.class.name=kafka.security.auth.SimpleAclAuthorizerauthorizer.class.name 参数指定了 ACL 授权机制的实现类。当前 Kafka 提供了Authorizer接口，允许你实现你自己的授权机制，但更常见的做法，还是直接使用 Kafka自带的**SimpleAclAuthorizer 实现类**。一旦设置好这个参数的值，并且启动Broker 后，该 Broker 就默认开启了 ACL授权验证。在实际生产环境中，你需要为集群中的每台 Broker 都做此设置。
## 超级用户（Super User）在开启了 ACL授权之后，你还必须显式地为不同用户设置访问某项资源的权限，否则，在默认情况下，没有配置任何ACL的资源是不能被访问的。不过，这里也有一个例外：**超级用户能够访问所有的资源，即使你没有为它们设置任何ACL 项**。那么，我们如何在一个 Kafka 集群中设置超级用户呢？方法很简单，只需要在Broker 端的配置文件 server.properties 中，设置 super.users参数即可，比如：    super.users=User:superuser1;User:superuser2**注意，如果你要一次性指定多个超级用户，那么分隔符是分号而不是逗号，这是为了避免出现用户名中包含逗号从而无法分割的问题**。除了设置 super.users 参数，Kafka还支持将所有用户都配置成超级用户的用法。如果我们在 server.properties文件中设置allow.everyone.if.no.acl.found=true，那么所有用户都可以访问没有设置任何ACL的资源。不过，我个人不太建议进行这样的设置。毕竟，在生产环境中，特别是在那些对安全有较高要求的环境中，采用白名单机制要比黑名单机制更加令人放心。
## kafka-acls 脚本在了解了 Kafka 的 ACL 概念之后，我们来看一下如何设置它们。当前在 Kafka中，配置授权的方法是通过 kafka-acls 脚本。举个例子，如果我们要为用户Alice 增加了集群级别的所有权限，那么我们可以使用下面这段命令。    $ kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add --allow-principal User:Alice --operation All --topic '*' --cluster在这个命令中，All 表示所有操作，topic 中的星号则表示所有主题，指定\--cluster 则说明我们要为 Alice 设置的是集群权限。这个脚本的参数有很多，我们再来看看它的另一个常见用法。    $ bin/kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add --allow-principal User:'*' --allow-host '*' --deny-principal User:BadUser --deny-host 10.205.96.119 --operation Read --topic test-topicUser 后面的星号表示所有用户，allow-host 后面的星号则表示所有 IP地址。这个命令的意思是，允许所有的用户使用任意的 IP 地址读取名为test-topic 的主题数据，同时也禁止 BadUser 用户和 10.205.96.119 的 IP地址访问 test-topic 下的消息。kafka-acls 脚本还有其他的功能，比如删除 ACL、查询已有 ACL等。它们的实际用法与上面这条命令类似，我在这里就不一一列举了，你可以使用kafka-acls.sh 来查询它的所有用法。
## ACL 权限列表刚才的这两条命令，分别涉及了主题的集群权限和读权限。你可能会问，Kafka到底提供了多少种 ACL 权限呢？我们一起来看看下面这张表格，它完整地展示了Kafka 所有的 ACL 权限。![](Images/52b29513809771ef42c1c31892dc8d3c.png){savepage-src="https://static001.geekbang.org/resource/image/62/bc/620bc02b57c49fa2d7390c698db515bc.jpg"}看到这么大一张表格，你是不是很惊讶？其实，这恰好证明 Kafka当前提供的授权机制是非常细粒度的。现在，我来跟你分享一下这个表格的使用方法。举个例子，假如你要为你的生产者程序赋予写权限，那么首先，你要在 Resource列找到 Topic 类型的权限，然后在 Operation 列寻找 WRITE 操作权限。这个WRITE 权限是限制 Producer程序能否向对应主题发送消息的关键。通常情况下，Producer程序还可能有**创建主题、获取主题数据**的权限，所以 Kafka 为 Producer需要的这些常见权限创建了快捷方式，即 \--producer。也就是说，在执行kafka-acls 命令时，直接指定 \--producer 就能同时获得这三个权限了。\--consumer 也是类似的，指定 \--consumer 可以同时获得 Consumer端应用所需的权限。
## 授权机制能否单独使用？关于授权，有一个很常见的问题是，Kafka授权机制能不配置认证机制而单独使用吗？其实，这是可以的，只是你只能为 IP地址设置权限。比如，下面这个命令会禁止运行在 127.0.0.1IP 地址上的Producer 应用向 test 主题发送数据：    $ bin/kafka-acls.sh --authorizer-properties zookeeper.connect=localhost:2181 --add --deny-principal User:* --deny-host 127.0.0.1 --operation Write --topic test $ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test>hello[2019-07-16 10:10:57,283] WARN [Producer clientId=console-producer] Error while fetching metadata with correlation id 3 : {test=TOPIC_AUTHORIZATION_FAILED} (org.apache.kafka.clients.NetworkClient)[2019-07-16 10:10:57,284] ERROR [Producer clientId=console-producer] Topic authorization failed for topics [test] (org.apache.kafka.clients.Metadata)[2019-07-16 10:10:57,284] ERROR Error when sending message to topic test with key: null, value: 5 bytes with error: (org.apache.kafka.clients.producer.internals.ErrorLoggingCallback)org.apache.kafka.common.errors.TopicAuthorizationException: Not authorized to access topics: [test请注意一下输出中的橙色字体部分。虽然没有设置任何认证机制，但是通过设置IP 地址的 ACL 授权，我们依然可以禁止这些 IP 地址上的客户端访问 Kafka资源。不过，尽管授权机制能够有限度地单独使用，但我更推荐的做法是，和我们在专栏上一讲提到的认证机制搭配使用。接下来，我来给出一个 SSL + ACL 配置的实例，来演示一下云环境下的 ACL授权应该怎么做。
## 配置实例在演示 ACL 之前，我先简单说一下 SSL 的配置。我给出一个 SHELL脚本，它可以方便你设置 SSL，代码如下：    #!/bin/bash 