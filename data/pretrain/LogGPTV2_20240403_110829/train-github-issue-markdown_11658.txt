#### When value_counts on different list value, it's ok:
    ser1 = pd.Series([[1], [2], [2]])
    ser1.value_counts()
    [2]    2
    [1]    1
    dtype: int64
#### But, when value_counts on unique list value, it's failed:
    ser2 = pd.Series([[1], [1], [1]])
    ser2.value_counts()
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
     in ()
          1 ser2 = pd.Series([[1], [1], [1]])
    ----> 2 ser2.value_counts()
    /home/centos/anaconda2/lib/python2.7/site-packages/pandas/core/base.pyc in value_counts(self, normalize, sort, ascending, bins, dropna)
        945         from pandas.core.algorithms import value_counts
        946         result = value_counts(self, sort=sort, ascending=ascending,
    --> 947                               normalize=normalize, bins=bins, dropna=dropna)
        948         return result
        949 
    /home/centos/anaconda2/lib/python2.7/site-packages/pandas/core/algorithms.pyc in value_counts(values, sort, ascending, normalize, bins, dropna)
        276     else:
        277         # ndarray path. pass original to handle DatetimeTzBlock
    --> 278         keys, counts = _value_counts_arraylike(values, dropna=dropna)
        279 
        280         from pandas import Index, Series
    /home/centos/anaconda2/lib/python2.7/site-packages/pandas/core/algorithms.pyc in _value_counts_arraylike(values, dropna)
        346         values = com._ensure_object(values)
        347         mask = com.isnull(values)
    --> 348         keys, counts = htable.value_count_object(values, mask)
        349         if not dropna and mask.any():
        350             keys = np.insert(keys, 0, np.NaN)
    pandas/hashtable.pyx in pandas.hashtable.value_count_object (pandas/hashtable.c:18970)()
    pandas/hashtable.pyx in pandas.hashtable.value_count_object (pandas/hashtable.c:18705)()
    TypeError: unhashable type: 'list'
#### I tried 1.18.1 and 1.19.0
#### Output of `pd.show_versions()`, 1.18.1
## INSTALLED VERSIONS
commit: None  
python: 2.7.12.final.0  
python-bits: 64  
OS: Linux  
OS-release: 3.10.0-327.36.2.el7.x86_64  
machine: x86_64  
processor: x86_64  
byteorder: little  
LC_ALL: None  
LANG: en_US.UTF-8
pandas: 0.18.1  
nose: 1.3.7  
pip: 8.1.2  
setuptools: 27.2.0  
Cython: 0.24.1  
numpy: 1.11.1  
scipy: 0.18.1  
statsmodels: 0.6.1  
xarray: None  
IPython: 5.1.0  
sphinx: 1.4.6  
patsy: 0.4.1  
dateutil: 2.5.3  
pytz: 2016.6.1  
blosc: None  
bottleneck: 1.1.0  
tables: 3.2.3.1  
numexpr: 2.6.1  
matplotlib: 1.5.3  
openpyxl: 2.3.2  
xlrd: 1.0.0  
xlwt: 1.1.2  
xlsxwriter: 0.9.3  
lxml: 3.6.4  
bs4: 4.5.1  
html5lib: None  
httplib2: None  
apiclient: None  
sqlalchemy: 1.0.13  
pymysql: None  
psycopg2: None  
jinja2: 2.8  
boto: 2.42.0  
pandas_datareader: None
#### Output of `pd.show_versions()`, 1.19.0
## INSTALLED VERSIONS
commit: None  
python: 2.7.12.final.0  
python-bits: 64  
OS: Linux  
OS-release: 4.4.0-45-generic  
machine: x86_64  
processor: x86_64  
byteorder: little  
LC_ALL: None  
LANG: None  
LOCALE: None.None
pandas: 0.19.0  
nose: 1.3.7  
pip: 8.1.2  
setuptools: 27.2.0  
Cython: 0.24.1  
numpy: 1.11.2  
scipy: 0.18.1  
statsmodels: 0.6.1  
xarray: None  
IPython: 5.1.0  
sphinx: 1.4.6  
patsy: 0.4.1  
dateutil: 2.5.3  
pytz: 2016.7  
blosc: None  
bottleneck: 1.1.0  
tables: 3.2.3.1  
numexpr: 2.6.1  
matplotlib: 1.5.3  
openpyxl: 2.3.2  
xlrd: 1.0.0  
xlwt: 1.1.2  
xlsxwriter: 0.9.3  
lxml: 3.6.4  
bs4: 4.5.1  
html5lib: None  
httplib2: None  
apiclient: None  
sqlalchemy: 1.0.13  
pymysql: None  
psycopg2: None  
jinja2: 2.8  
boto: 2.42.0  
pandas_datareader: None