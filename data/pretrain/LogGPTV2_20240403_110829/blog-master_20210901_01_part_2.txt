------ Shared Memory Segments --------  
key        shmid      owner      perms      bytes      nattch     status        
0x0052e2c1 16         polardb    600        56         15                        
0x0052e6a9 17         polardb    600        56         7                         
0x0052ea91 18         polardb    600        56         7                         
0x0052ee79 19         polardb    600        56         6                         
------ Semaphore Arrays --------  
key        semid      owner      perms      nsems       
```  
目录解释:  
```  
cd ~  
[polardb@iZbp15sgewxe2ioglp30z4Z ~]$ du -sh *  
968M	PolarDB-for-PostgreSQL            polardb源码  
92M	tmp_basedir_polardb_pg_1100_bld       polardb 二进制软件  
840M	tmp_datadir_polardb_pg_1100_bld   RW RO实例共享数据  
24M	tmp_primary_dir_polardb_pg_1100_bld   RW实例本地内容  
23M	tmp_replica_dir_polardb_pg_1100_bld1  RO实例本地内容  
23M	tmp_replica_dir_polardb_pg_1100_bld2  RO实例本地内容  
40M	tmp_standby_datadir_polardb_pg_1100_bld   Standby实例共享数据  
23M	tmp_standby_dir_polardb_pg_1100_bld       Standby实例本地内容  
```  
配置环境变量, 方便使用:   
```  
vi ~/.bashrc  
# 追加          
export PS1="$USER@`/bin/hostname -s`-> "            
export PGPORT=5432            
export PGDATA=/data01/polardb/tmp_primary_dir_polardb_pg_1100_bld        
export LANG=en_US.utf8            
export PGHOME=/data01/polardb/tmp_basedir_polardb_pg_1100_bld  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH            
export DATE=`date +"%Y%m%d%H%M"`            
export PATH=$PGHOME/bin:$PATH:.            
export MANPATH=$PGHOME/share/man:$MANPATH            
export PGHOST=127.0.0.1         
export PGUSER=postgres            
export PGDATABASE=postgres            
alias rm='rm -i'            
alias ll='ls -lh'            
unalias vi   
```  
查询一下:   
```  
postgres=# select version();  
                                                  version                                                     
------------------------------------------------------------------------------------------------------------  
 PostgreSQL 11beta2 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44), 64-bit  
(1 row)  
postgres=# select * from pg_replication_slots;  
 slot_name | plugin | slot_type | datoid | database | temporary | active | active_pid | xmin | catalog_xmin | restart_lsn | confirmed_flush_lsn   
-----------+--------+-----------+--------+----------+-----------+--------+------------+------+--------------+-------------+---------------------  
 standby1  |        | physical  |        |          | f         | t      |      25125 |      |              | 0/185DCB0   |   
 replica2  |        | physical  |        |          | f         | t      |      25112 |      |              | 0/185DB98   |   
 replica1  |        | physical  |        |          | f         | t      |      25098 |      |              | 0/185DB98   |   
(3 rows)  
```  
为啥是11beta2呢? PolarDB for PG是从beta2开始就进行研发, 后续会逐渐合并上来. 期待尽快合并到PG  14.     
了解greenplum的小伙伴一定记得greenplum是怎么一步一步合到9.4的, 中间经历了每一个PG的版本.   
压测一下:  
```  
pgbench -i -s 100  
pgbench -M prepared -n -r -P 1 -c 16 -j 16 -T 120   
```  
一些参数, 不解释:  
```  
postgres=# select name,setting from pg_settings where name ~ 'polar';  
                    name                    |                          setting                             
--------------------------------------------+------------------------------------------------------------  
 polar_bg_replay_batch_size                 | 20000  
 polar_bgwriter_batch_size_flushlist        | 100  
 polar_bgwriter_max_batch_size              | 5000  
 polar_bgwriter_sleep_lsn_lag               | 100  
 polar_buffer_copy_lsn_lag_with_cons_lsn    | 100  
 polar_buffer_copy_min_modified_count       | 5  
 polar_check_checkpoint_legal_interval      | 1  
 polar_clog_max_local_cache_segments        | 128  
 polar_clog_slot_size                       | 128  
 polar_copy_buffers                         | 16384  
 polar_datadir                              | file-dio:///data01/polardb/tmp_datadir_polardb_pg_1100_bld  
 polar_disk_name                            | data01  
 polar_enable_async_ddl_lock_replay         | on  
 polar_enable_parallel_bgwriter             | on  
 polar_enable_redo_logindex                 | on  
 polar_fullpage_keep_segments               | 16  
 polar_hostid                               | 2  
 polar_logindex_bloom_blocks                | 1024  
 polar_logindex_mem_size                    | 512  
 polar_logindex_table_batch_size            | 100  
 polar_logindex_unit_test                   | 0  
 polar_max_logindex_files                   | 80  
 polar_openfile_with_readonly_in_replica    | off  
 polar_parallel_bgwriter_check_interval     | 10  
 polar_parallel_bgwriter_delay              | 10  
 polar_parallel_bgwriter_enable_dynamic     | on  
 polar_parallel_bgwriter_workers            | 5  
 polar_parallel_new_bgwriter_threshold_lag  | 1024  
 polar_parallel_new_bgwriter_threshold_time | 10  
 polar_read_ahead_xlog_num                  | 200  
 polar_storage_cluster_name                 |   
 polar_streaming_xlog_meta                  | on  
 polar_version                              | 1.1.15  
 polar_vfs.localfs_mode                     | on  
 polar_vfs.max_direct_io_size               | 1048576  
 polar_vfs.pfs_force_mount                  | on  
 polar_worker.enable_polar_worker           | on  
 polar_worker.polar_worker_check_interval   | 5  
 polar_worker.prealloc_wal_file_num         | 2  
 polar_worker.xlog_temp_outdate_time        | -1  
 polar_xlog_page_buffers                    | 1024  
 polar_xlog_queue_buffers                   | 512  
(42 rows)  
```  
## 参考文档    
https://github.com/alibaba/PolarDB-for-PostgreSQL    
Deploy Instance based on Local Storage    
We provide a script which uses default configuration to compile PolarDB. This section describes how to fast deploy a PolarDB instance with storage on your local disks, by this script. System Requirements: CentOS 7.5 and above. The following setup steps are tested based on CentOS 7.5.    
1、Download the source code of PolarDB from https://github.com/alibaba/PolarDB-for-PostgreSQL/tree/main.    
2、Install dependent packages:    
```    
sudo yum install readline-devel zlib-devel perl-CPAN bison flex    
sudo cpan -fi Test::More IPC::Run    
```    
3、Select the coommand according to your actual needs to start deployment.    
Run the following commands to compile the source code only, without creating any instance:    
```    
./polardb_build.sh --noinit    
```    
Run the following commands to compile the source code, and create an instance with one node (primary node). The port number is 5432.    
```    
./polardb_build.sh    
```    
Run the following commands to compile the source code, and create an instance with two nodes. The nodes include:    
One primary node and the port number is 5432.    
One read-only node and the port number is 5433.    
```    
./polardb_build.sh --withrep --repnum=1    
```    
Run the following commands to compile the source code, and create an instance with three nodes. The nodes include:    
One primary node and the port number is 5432.    
One read-only node and the port number is 5433.    
One standby node (for standby database) and the port number is 5434.    
```    
./polardb_build.sh --withrep --repnum=1 --withstandby    
```    
Run the following commands to compile the source code, and create an instance with four nodes. The nodes include:    
One primary node and the port number is 5432.    
Two read-only nodes and the port numbers are 5433 and 5434.    
One standby node (for standby database) and the port number is 5435.    
```    
./polardb_build.sh --withrep --repnum=2 --withstandby    
```    
4、After the deployment, refer to the followng steps to check and test the created instance to make sure it is deployed correctly.    
Run the following commands to check the instance:    
```    
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/psql -p 5432 -c 'select version();'    
$HOME/tmp_basedir_polardb_pg_1100_bld/bin/psql -p 5432 -c 'select * from pg_replication_slots;'    
```    
Run the following commands to perform full regression test:    
```    
./polardb_build.sh --withrep --repnum=1 --withstandby -r-check-all -e -r-contrib -r-pl -r-external -r-installcheck-all    
```    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")