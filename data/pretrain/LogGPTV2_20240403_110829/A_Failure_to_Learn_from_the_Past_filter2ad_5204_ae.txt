It is depressing to note that the overall resistance of hosts
on the Internet to malicious software seems to have got-
ten worse, by some measures, since 1988. For instance, the
Internet Worm managed to affect at most 10% of the ma-
chines on the Internet because of a diversity of operating
systems. In 2003, we have a much less heterogeneous col-
lection of machines connected to the Internet, thus enabling
wider spread of software exploiting a security ﬂaw. In 1988,
the majority of people operating systems were profession-
als with computing backgrounds; in 2003, the majority of
machines connected to the network are operated by person-
nel with little, if any, system administration background. In
1988, an author of malicious code needed to know some
machine language programming; in 2003, anyone with ac-
cess to a text editor and WWW browser can write malicious
software using macros and downloaded root kits.
7.2. Software Flaws
The Internet Worm exploited three kinds of ﬂaws in
widely-distributed software: exploitation of trust relation-
ships, buffer overﬂows, and poor default conﬁgurations.
Sadly, all three of these problems continue to exist, and are
(in some ways) worse than in 1988.
In 1988, the Worm exploited trust relationships in the
rsh/rlogin/rexec suite of software to transfer itself
from machine to machine without authorization. In 2003,
that software is still available on many systems. Worse,
other questionable trust relationships have led to signiﬁ-
cant security problems. For instance, the lack of separa-
tion of privilege and function in Windows allowed viruses in
macros attached to word processing documents and spread-
sheets to access address books and mailers to spread them-
selves. At a network level, system administrators who have
conﬁgured ﬁrewalls to pass trafﬁc by default (permitted un-
less denied) have repeatedly been hit by software exploiting
ﬂaws. Users regularly fall for fraudulent email soliciting for
credit card information or personal details while displaying
logos and email addresses resembling those of well-known
entities. Other examples of exploitation of faulty or mis-
guided trust relationships abound.
Buffer overﬂows have been known to be a problem for
decades. Despite that, unsafe routines have been standard-
ized in the C programming library, and overﬂows continue
to drive security problems. Serious security ﬂaws in widely-
used software are currently being reported at an average
rate of between 20 and 30 per week. (As this article was
being ﬁnalized, yet another critical security ﬂaw involv-
ing buffer overﬂows was published, involving the venera-
ble sendmail program.) Examining these ﬂaws, as cat-
egorized in one of the vulnerability databases such as the
CERIAS Cassandra service, or the NIST ICAT database, re-
veals that more than 25% of the reported ﬂaws can be traced
to buffer overﬂow, and perhaps as many as 3/4 of all vulner-
abilities are simple argument validation errors.
It is appalling that commercial software is still being pro-
duced and shipped with buffer overﬂows. It is beyond the
scope of this paper to analyze all the reasons why this is so,
but it is clear that the problem has not gotten any less impor-
tant in ﬁfteen years. It is sobering to realize that our overall
infrastructure security might well be better had UNIX been
written in Cobol rather than C.
Poor default conﬁgurations also continue to plague us.
The standard installation of Windows software, for instance,
has various servers running and active on network ports that
are not usually needed. This can be contrasted with an in-
stallation of MacOS X that has no servers enabled by de-
fault. Of course, Windows is not the only culprit — software
on routers, network appliances, and systems by other ven-
dors all share this problem in common. Some distributions
of WWW servers have contained default example scripts
with known vulnerabilities. The usual explanation given for
these choices is that users do not understand the complexity
of the options and interfaces involved, and it is necessary to
enable the services to keep from generating too many com-
plaints and help requests. This is not far away from the rea-
son the DEBUG command was left enabled in the 1988 dis-
tributions of sendmail — to enable support of users who
did not understand how to conﬁgure their mailers. There is
clearly an unmet need for better user interfaces and docu-
mentation to address these problems.
7.3. Incident Response
In 1988, response to the Worm was largely ad hoc and
coordinated via mailing lists. The CERT/CC was formed to
act as a clearinghouse to help coordinate responses to fu-
ture such incidents. In 2003, the situation is not much im-
proved. System administrators often get news of new prob-
lems via mailing lists such as BUGTRAQ or newspaper sto-
ries. Judging by the number of sites that are regularly ex-
ploited via ﬂaws for which announced patches have been
available for months, it would seem that notices of ﬂaws
and ﬁxes are not getting distributed widely enough.
The CERT/CC is currently of questionable impact in
incident response. Personnel at the CERT/CC release an-
nouncements of ﬂaws and ﬁxes weeks or months after mail-
ing list announcements, if at all. Paying customers may be
able to get more timely announcements from the CERT/CC
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
and other vendors, but that is not serving the general net-
work public. The CERT/CC appeared to play little role in
the responses to several recent worms and viruses. Further-
more, no organization, including the CERT/CC is collecting
reports of even a majority of security incidents to be used in
actuarial studies.
It is interesting to note that the newly-formed Depart-
ment of Homeland Security has announced a partnership
with the CERT/CC to establish a US response capability.
One might question whether our experience with the CERT
model supports such a move as the best approach or whether
a new paradigm should be explored. The dedicated response
center model also does not reﬂect what we learned in the
Worm incident, and in times since then: a distributed re-
sponse, with many people working together, is more effec-
tive than a single center of expertise. At the least this move
fails to recognize a key underlying aspect of the problem:
the Internet is not US-only.
Another lesson from 1988 that has not been learned is
that communication is critical in addressing the problem.
The teams working to decompile the Worm communicated
results to each other and to the public using the Internet.
When their computers went down or off-line, they were
often left without access to phone lists or email, thus in-
hibiting their ability to communicate. In 2003, we have an
increasing dependence on cell phones and voice over IP
(VoIP). We saw during the 9/11 incident and the August
2003 blackout of the East Coast that cell phones were not
dependable during a crisis because of load and power is-
sues. Voice over IP has vulnerabilities in the same way —
without power, the routers won’t run, and without the net-
work, the calls cannot go through. Within a few years, a vir-
ulent worm that attacks routers and power system SCADA
controllers could well disable the very communication we
need to combat it!
7.4. Laws and Professional Ethics
As predicted, numerous laws against computer misuse
were enacted in the years after the Worm. However, de-
spite the passage of those laws and the tens of thousands
of viruses and worms written since then, fewer than a dozen
people have ever been convicted of crimes related to mal-
ware. In part this is because it is difﬁcult and expensive
to investigate and prosecute such crimes. It may also be
caused, in part, by a lack of tools and protocols to ade-
quately investigate such acts.
Not every jurisdiction has laws against the authorship of
malware. For instance, when Onel de Guzman was identi-
ﬁed in the Philippines as the author of the 2000 ILOVEYOU
Trojan/virus, he was not prosecuted there because there was
no law in effect at the time prohibiting what he did. Many
countries in the world still have no laws against releasing
malicious software into the public. Where laws do exist, the
necessary investigative technology is likely to be poor, and
the cooperation across international borders may be ineffec-
tive. Investigating a crime scene comprising 2 million com-
puters around the world presents a daunting challenge!
Members of the press and public continue to portray
computer criminals sympathetically, or even heroically, al-
though this is a problem that is slowly changing. Increas-
ing levels of fraud, identity theft, spam, viruses and other
on-line misbehavior has helped change the public willing-
ness to view computer criminals as simply misguided ge-
niuses. The staggering levels of loss from computer crime
and malware are also helping to reverse public sympathies.
One issue that is facing us currently is the nature of in-
tellectual property and fair use online. Although not ma-
licious, per se, it will deﬁne much of our legal and moral
landscape in the years to come. Already we have seen in-
tellectual property owners equating unauthorized copying
of their materials with piracy (a violent crime). Legislation
(the Digital Millennium Copyright Act) has been enacted
in the US to stem unauthorized copying but that also has a
chilling effect on research into security tools. Some intel-
lectual property owners have even sought legislation to im-
munize them from legal sanction for the creation of destruc-
tive malware aimed at “pirates.” This trend is disturbing —
having viruses and worms being written for vigilante pur-
poses is not likely to make any of us safer.
Another disturbing trend involves unwanted email, or
“spam.” Recent events suggest that some spammers may be
writing viruses and Trojan programs as a means of collect-
ing addresses and subverting third-party machines to act as
distribution engines. Given the number of vulnerable ma-
chines on the network, this may become a major problem
for security and law enforcement specialists and make the
Internet Worm appear exceedingly benign in hindsight.
Reﬂecting on the sentence Mr. Morris received, it is clear
that he acted foolishly, and (according to the court) crimi-
nally. However, the few thousand dollars in damages caused
by the Internet Worm pale in comparison to the billions of
dollars in damages caused by others since 1988. Compar-
ing Mr. Morris to some of the computer criminals who have
been active in the last 15 years makes it clear that the lack
of jail time was probably a correct decision in his case. It
is also likely that the desired deterrent effect of his convic-
tion was minimal, at best.
8. Parting Thoughts
It has been 15 years since the Internet Worm. That is
approximately 1/2 of a human generation, and approxi-
mately six ”Internet Generations.” Reﬂection on what has
happened in that interval reveals that the community either
failed to learn the lessons inherent in that attack, or we have
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
[12] F. T. Grampp and R. H. Morris. UNIX operating system se-
curity. AT&T Bell Laboratories Technical Journal, 63(8, part
2):1649–1672, Oct. 1984.
[13] H. J. Highland, editor. Computer Virus Handbook. Elsevier
Advanced Technology, 1990.
[14] K. M. King. Overreaction to external attacks on computer
systems could be more harmful than the viruses themselves.
Chronicle of Higher Education, 23 November 1988.
[15] R. Morris and K. Thompson. UNIX password security. Com-
munications of the ACM, 22(11):594–597, Nov. 1979.
[16] Participants. Proceedings of the Virus Post-Mortem Meeting.
National Computer Security Center, Ft. George Meade, MD,
8 November 1988.
[17] B. Reid. Reﬂections on some recent widespread computer
breakins. Communications of the ACM, 30(2):103–105, Feb.
1987.
[18] D. M. Ritchie. On the security of UNIX. In UNIX Supple-
mentary Documents. AT & T, 1979.
[19] D. Seeley. A tour of the worm. In Proceedings of 1989 Win-
ter Usenix Conference, San Diego, CA, Feb. 1989. Usenix
Association.
[20] J. F. Shoch and J. A. Hupp. The worm programs – early ex-
perience with a distributed computation. Communications of
the ACM, 25(3):172–180, Mar. 1982.
[21] E. H. Spafford. An analysis of the Internet worm.
In
C. Ghezzi and J. A. McDermid, editors, Proceedings of the
2nd European Software Engineering Conference, pages 446–
468, Sept. 1989. Issued as #87 in the Lecture Notes in Com-
puter Science series.
[22] E. H. Spafford. The Internet Worm program: An analysis.
Computer Communication Review, 19(1), Jan. 1989. Also
issued as Purdue CS technical report TR-CSD-823.
[23] E. H. Spafford. Are computer break-ins ethical? Journal of
Systems & Software, 17(1):41–48, Jan. 1992.
[24] E. H. Spafford. Virus. In J. Marciniak, editor, Encyclopedia
of Software Engineering. John Wiley & Sons, 1994.
[25] E. H. Spafford, K. A. Heaphy, and D. J. Ferbrache. Com-
puter Viruses: Dealing with Electronic Vandalism and Pro-
grammed Threats. ADAPSO, Arlington, VA, 1989.
[26] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the in-
ternet in your spare time. In Proceedings of the 11th Usenix
Security Symposium. Usenix Association, 2002.
[27] B. Stubbs and L. J. Hoffman. Mapping the virus battleﬁeld.
In L. J. Hoffman, editor, Rogue Programs: Viruses, Worms,
and Trojan Horses, chapter 12, pages 143–157. Van Nos-
trand Reinhold, New York, NY, 1990.
failed to value them. Systems are deployed with inexcus-
able ﬂaws, networks are conﬁgured with misplaced trust,
and incident response is uncoordinated and of minimal ef-
fectiveness. What is often missed in this kind of retrospec-
tive is that those lessons were not new in 1988, either.
As a professional group, computer scientists and engi-
neers have shown surprisingly poor attention to learning
from the past. As a community, we frequently address prob-
lems as if they were unique, and come up with specialized
solutions that are not seen as related to past experience or
some underlying truth. Our scientiﬁc base seems to have
been reduced to only those documents and software that re-
side on the WWW, and that horizon is remarkably closer
than our experience warrants.
In 1988 I was hopeful that we could make changes for the
better in how we built, conﬁgured and deployed our com-
puting systems. In 2003, with 15 more years of experience,
I have become more cynical about how we will address the
challenges we face. As such, I fully expect to be writing a
paper in 2013 or 2018 that looks back at this time as one
where we did not yet know how bad it was going to get, and
that these observations are still current. As I wrote in 1988,
”It remains to be seen.”
References
[1] L. Adleman. An abstract theory of computer viruses. In Lec-
ture Notes in Computer Science, vol 403. Springer-Verlag,
1990.
[2] E. Allman. Sendmail–An Internetwork Mail Router. Uni-
versity of California, Berkeley, 1983. Issued with the BSD
UNIX documentation set.
[3] M. Bishop. An application of a fast data encryption stan-
dard implementation. Computing Systems: The Journal of
the Usenix Association, 1(3):221–254, Summer 1988.
[4] J. Brunner. The Shockwave Rider. Harper & Row, 1975.
[5] F. Cohen. Computer Viruses. PhD thesis, University of
Southern California, 1985.
[6] P. J. Denning. The Internet Worm. American Scientist, 77(2),
March-April 1989.
[7] M. W. Eichin and J. A. Rochlis. With microscope and tweez-
ers: An analysis of the internet virus of November 1988. In
Proceedings of the Symposium on Research in Security and
Privacy, Oakland, CA, May 1989. IEEE-CS.
[8] T. Eisenberg, D. Gries, J. Hartmanis, D. Holcomb, M. S.
Lynn, and T. Santoro. The Computer Worm. Ofﬁce of the
Provost, Cornell University, Ithaca, NY, Feb. 1989.
[9] D. Ferbrache. A Pathology of Computer Viruses. Springer-
Verlag, 1992.
[10] S. Garﬁnkel, A. Schwartz, and G. Spafford. Practical UNIX
and Internet Security. O’Reilly & Associates, 2003. 3rd edi-
tion.
[11] D. Gerrold. When Harlie Was One. Ballentine Books, 1972.
The ﬁrst edition.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply.