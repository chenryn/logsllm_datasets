functional respectively). Figure 3 illustrates these results.
To examine these results more precisely, we applied a
logistic regression, as described in Section IV-B, to model
the factors that affect whether or not each individual task
was marked as functional. The ﬁnal model (see Table VIII)
shows that M2Crypto and Keyczar are signiﬁcantly worse
for functionality than the baseline PyCrypto; cryptography.io
and PyNaCl appear slightly better, but the difference is not
2Participants who skipped a task are counted as functionally incorrect for
that task.
162
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply. 
Factor
Required factors
Library
Encryption mode
Optional factors
Experienced
Security background
Library experience
Copy-paste
Library × Mode
Description
The cryptographic library used.
Asymmetric or Symmetric
True if a programming in Python is part of participant’s job, and/or if participant has been
programming in Python for more than ﬁve years; otherwise false. Self-reported.
True or false, self-reported.
Whether the participant has used the library before, seen code that used it but not used it
themselves; or neither. Self-reported.
Whether the participant pasted code during this task. Measured, per-task regressions only.
Interaction between the library and encryption mode factors described above.
Baseline
PyCrypto
Symmetric
False
False
No experience
False
cryptography.io
:asymmetric
Factors used in regression models. Categorical factors are individually compared to the baseline. Final models were selected by minimum AIC; candidates
were deﬁned using all possible combinations of optional factors, with both required factors included in every candidate.
TABLE V
Library
PyCrypto
M2Crypto
cryptography.io
Keyczar
PyNaCl
Total
Mode Consented
sym
asym
sym
asym
sym
asym
sym
asym
sym
asym
136
175
157
174
136
174
136
173
136
174
1 571
TABLE VI
Started
Total
Survey Valid
41
24
20
27
39
19
20
17
29
20
256
48
37
36
35
48
22
26
24
34
27
337
The number of participants who progressed through each phase of the study,
by condition. Each column is a subset of the previous columns.
Factor
M2Crypto
cryptography.io
Keyczar
PyNaCl
asymmetric
M2Crypto:asymmetric
cryptography.io:asymmetric
Keyczar:asymmetric
PyNaCl:asymmetric
O.R. C.I.
0.55
1.00
0.43
0.61
0.49
1.72
0.54
1.39
1.12
TABLE VII
[0.33, 0.91]
[0.61, 1.64]
[0.25, 0.75]
[0.36, 1.03]
[0.3, 0.81]
[0.83, 3.57]
[0.25, 1.16]
[0.63, 3.05]
[0.53, 2.39]
p-value
0.02*
1
0.003*
0.065
0.006*
0.144
0.112
0.418
0.768
Results of the ﬁnal logistic regression model examining whether participants
who consented proceeded through all tasks and continued to the survey.
Odds ratios (O.R.) indicate relative likelihood of continuing. Statistically
signiﬁcant factors indicated with *. See Section IV-B for further details.
signiﬁcant. Most notably, Keyczar is estimated as only 10%
as likely to produce a functional result. By comparing con-
ﬁdence intervals, we see that Keyczar is also signiﬁcantly
worse than PyNaCl and cryptography.io. The results also show
163
Fig. 3.
solutions, by condition.
Percentage of tasks for which participants generated functional
that symmetric tasks were about 6× (0.16-1) as likely as
asymmetric tasks to have functional solutions, and that using
code generated via copy-and-paste improves a task’s odds of
functionality about 3× (both signiﬁcant). The participant’s
Python experience level, security background, and experience
with their assigned library do not appear in the ﬁnal model,
suggesting they are not signiﬁcant factors in the functionality
results.
In general, the set of asymmetric cryptography tasks was
harder to solve in a functionally correct way than the set
of symmetric cryptography tasks. This seem to be largely
because we included X.509 certiﬁcate handling in the set of
asymmetric cryptography tasks. Two of the libraries speciﬁ-
cally designed to be easy to use (Keyczar and PyNaCl) do
not support X.509 certiﬁcate handling out of the box, so
these tasks had to be done via workarounds or could not
be solved at all. On the other hand,
the low-level X.509
certiﬁcate APIs of M2Crypto and PyCrypto require developers
to deal with many cryptographic details (e.g., root certiﬁcate
stores and certiﬁcate details such as the Common Name or
Subject Alternative Name), which might have an impact on
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply. 
Factor
M2Crypto
cryptography.io
Keyczar
PyNaCl
asymmetric
sec. bkgrd.
M2Crypto:asymmetric
cryptography.io:asymmetric
Keyczar:asymmetric
PyNaCl:asymmetric
p-value
[0.68, 7.11]
0.186
[7.78, 48.03] <0.001*
[6.31, 95.43] <0.001*
[4.46, 28.61] <0.001*
[1.28, 10.03]
0.015*
0.083
[0.94, 2.61]
0.909
[0.25, 4.73]
<0.001*
[0.02, 0.31]
[0.04, 7.37]
0.642
0.088
[0.07, 1.2]
O.R. C.I.
2.20
19.34
24.54
11.29
3.58
1.57
1.09
0.08
0.54
0.29
TABLE IX
Results of the ﬁnal logistic regression mixed model examining which factors
correlate with task security, among only tasks that were functional. Odds
ratios indicate relative likelihood of a solution being secure. Statistically
signiﬁcant values indicated with *. See Section IV-B for further details.
security; all of these except M2Crypto are signiﬁcant. At
the extreme, Keyczar is estimated almost 25× as likely to
produce a secure solution. This is particularly notable because
Keyczar was so difﬁcult: only 16 and seven participant tasks,
respectively, exhibited functional symmetric and asymmetric
solutions, but 12 and six of these respectively were secure,
the highest per-capita of any library. The regression results
also show that at baseline, asymmetric tasks were about 3×
more likely to exhibit secure code than symmetric tasks. The
ﬁnal model also indicates that tasks from participants with
a security background were about 1.5× more likely to be
secure; Python experience level and experience directly with
the assigned library do not seem to affect security noticeably,
as they do not appear in the ﬁnal model. The only signiﬁcant
interaction term is between cryptography.io and asymmetric:
cryptography.io is the only library for which asymmetric
performed less securely. We hypothesize that this is because
the symmetric tasks could be completed using the library’s
high-level “recipes” layer, while the asymmetric tasks required
the participant to work with the low-level “hazmat” layer.
Security perception. In the exit survey, we showed par-
ticipants the code they had written to solve each task and
asked them (on a ﬁve-point Likert scale from Strongly Agree
to Strongly Disagree) whether they thought
their solution
was secure. We did not deﬁne security, as we wanted to
know whether our participants were satisﬁed with the security
properties of their code in general, rather than meeting a
speciﬁc threat model. Across all libraries, the majority of our
participants were convinced that their solution was secure.
The median (excluding 10% of tasks for which participants
answered “I don’t know”) was no lower than “neutral” across
all combinations of libraries and encryption modes; security
conﬁdence was highest for cryptography.io and PyNaCl (both
encryption modes), as well as PyCrypto and Keyczar (asym-
metric), all of which had median value “agree.”
In considering these answers, we are most interested in tasks
for which we rated the solution insecure, but the participant
agreed or strongly agreed that their solution for that task
Fig. 4. Percentage of tasks with secure solutions, considering only tasks with
functional solutions, by condition.
functionality in addition to security.
The only signiﬁcant interaction in the ﬁnal model is between
M2Crypto and asymmetric tasks: these tasks were about 8×
more likely than expected to be marked functional. Indeed,
M2Crypto is the only library (see Figure 3) for which sym-
metric tasks were (slightly) less functional than asymmetric
tasks. We hypothesize that this is caused by the requirement
that developers have to choose many cryptographic details for
both symmetric and asymmetric encryption in M2Crypto.
Factor
M2Crypto
cryptography.io
Keyczar
PyNaCl
asymmetric
copy-paste
M2Crypto:asymmetric
cryptography.io:asymmetric
Keyczar:asymmetric
PyNaCl:asymmetric
O.R. C.I.
0.26
1.68
0.10
1.58
0.16
3.29
8.14
1.53
1.50
0.49
[0.09, 0.69]
[0.61, 4.61]
[0.04, 0.26]
[0.55, 4.56]
[0.07, 0.38]
[1.97, 5.49]
[2.29, 28.95]
[0.4, 5.75]
[0.36, 6.22]
[0.13, 1.86]
p-value
0.007*
0.311
< 0.001*
0.394
< 0.001*
< 0.001*
0.001*
0.532
0.578
0.293
TABLE VIII
Results of the ﬁnal logistic regression mixed model examining which factors
correlate with task functionality. Odds ratios indicate relative likelihood of a
task being functionally correct. Statistically signiﬁcant values indicated with
*. See Section IV-B for further details.
E. Security results
Next, we consider whether participants whose code was
functional also produced secure solutions. As with function-
ality, we observed a broad range of results (see Figure 4).
Overall, Keyczar was notably secure (for a small sample)
and PyCrypto and to a lesser extent M2Crypto were notably
insecure.
We again apply logistic regression (Section IV-B) to in-
vestigate the factors that inﬂuence security; we include only
functional task solutions in this analysis. The results are shown
in Table IX. The ﬁnal model shows that compared to the
baseline PyCrypto, every library appears to produce better
164
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:34 UTC from IEEE Xplore.  Restrictions apply. 
Factor
M2Crypto
cryptography.io
Keyczar
PyNaCl
asymmetric
sec. bkgrd.
O.R. C.I.
0.59
0.58
0.25
0.62
1.32
1.65
TABLE X
[0.25, 1.38]
[0.27, 1.27]
[0.05, 1.3]
[0.27, 1.46]
[0.72, 2.42]
[0.86, 3.14]
p-value
0.221
0.176
0.099
0.277
0.373
0.13
Results of the ﬁnal logistic regression mixed model examining factors
correlating with erroneous belief that a task is secure. Odds ratios indicate
relative likelihood of this belief. Some trends are observable, but no results
are statistically signiﬁcant. See Section IV-B for further details.
Library
PyCrypto
M2Crypto
cryptography.io
Keyczar
PyNaCl
Mean
SUS
63.9
47.8
33.9
36.4
67.2
52.3
40.8
32.5
67.2
59.5
Mode
sym
asym
sym
asym
sym
asym
sym
asym
sym
asym
TABLE XI
Mean
API Scale
64.2
52.5
32.5
35.6
67.7
61.6
40.9
26.9
66.8
57.1
Mean SUS scores and scores on our new API usability scale, by condition.
was secure. These situations are potentially dangerous, as the
developer mistakenly believes they have achieved security.
Overall, 78 of 396 tasks (19.7%) fell into this category, a
disappointingly high number. To examine factors that correlate
with this situation, we applied a mixed-model logistic regres-
sion, as described in Section IV-B, with outcome dangerous
error or not per task. The results are shown in Table X.
Although some trends are observable, the ﬁnal model ﬁnds
no signiﬁcant results; this suggests that at least at this sample
size, no particular factors were signiﬁcantly associated with a
higher likelihood of erroneous belief.
F. Participant opinions
Our self-reported usability metrics reveal large differences
between the libraries. Table XI lists the average SUS scores
by condition. Overall, PyNaCl and cryptography.io performed
best, while M2Crypto and Keyczar performed worst. Overall,
these SUS scores are quite low; a score of 68 is considered
average for end-user products and systems [63], and even our
best-performing condition does not reach this standard. This
suggests that even the most usable libraries we tested have
considerable room for improvement.
Using a linear regression model (see Section IV-B), we
analyzed the impact of library and encryption mode, shown