### Analysis of Functional and Secure Task Solutions

#### Overview
Figure 3 illustrates the results of the functional and secure task solutions. To examine these results more precisely, we applied a logistic regression, as described in Section IV-B, to model the factors that affect whether each individual task was marked as functional. The final model (Table VIII) shows that M2Crypto and Keyczar are significantly worse for functionality compared to the baseline PyCrypto. Cryptography.io and PyNaCl appear slightly better, but the differences are not statistically significant.

#### Logistic Regression Model
To further analyze the factors influencing task functionality, we used a logistic regression model. The final model (Table VIII) indicates that:

- **M2Crypto and Keyczar** are significantly less likely to produce functional results.
- **Cryptography.io and PyNaCl** show slight improvements, but the differences are not statistically significant.
- **Symmetric tasks** were about 6 times more likely to have functional solutions than asymmetric tasks.
- **Copy-and-paste code** improves the odds of functionality by about 3 times.
- Factors such as Python experience level, security background, and library experience did not appear in the final model, suggesting they are not significant factors in the functionality results.

#### Asymmetric vs. Symmetric Tasks
In general, the set of asymmetric cryptography tasks was harder to solve functionally correct compared to symmetric tasks. This is largely because X.509 certificate handling was included in the asymmetric tasks. Libraries like Keyczar and PyNaCl, designed for ease of use, do not support X.509 certificate handling out of the box, leading to workarounds or unsolvable tasks. In contrast, the low-level X.509 certificate APIs of M2Crypto and PyCrypto require developers to handle many cryptographic details, which may impact functionality.

#### Security Results
Next, we considered whether participants whose code was functional also produced secure solutions. We observed a broad range of results (Figure 4). Keyczar was notably secure (for a small sample), while PyCrypto and, to a lesser extent, M2Crypto were notably insecure.

We applied another logistic regression (Section IV-B) to investigate the factors that influence security, including only functional task solutions. The results (Table IX) show:

- **Keyczar** is estimated to be almost 25 times more likely to produce a secure solution.
- **Asymmetric tasks** at baseline were about 3 times more likely to exhibit secure code than symmetric tasks.
- Participants with a security background were about 1.5 times more likely to produce secure solutions.
- The interaction term between cryptography.io and asymmetric tasks indicates that cryptography.io is the only library for which asymmetric tasks performed less securely.

#### Security Perception
In the exit survey, participants rated their solutions on a five-point Likert scale from "Strongly Agree" to "Strongly Disagree" regarding the security of their code. Across all libraries, the majority of participants believed their solutions were secure. The median (excluding 10% of tasks for which participants answered "I donâ€™t know") was no lower than "neutral" across all combinations of libraries and encryption modes. Security confidence was highest for cryptography.io and PyNaCl (both encryption modes), as well as PyCrypto and Keyczar (asymmetric).

We are particularly interested in tasks where the solution was rated insecure, but the participant agreed or strongly agreed that their solution was secure. These situations are potentially dangerous. Overall, 78 out of 396 tasks (19.7%) fell into this category. A mixed-model logistic regression (Table X) found no significant results, suggesting that no particular factors were significantly associated with a higher likelihood of erroneous belief at this sample size.

#### Participant Opinions
Self-reported usability metrics reveal large differences between the libraries. Table XI lists the average System Usability Scale (SUS) scores by condition. PyNaCl and cryptography.io performed best, while M2Crypto and Keyczar performed worst. Overall, these SUS scores are quite low; a score of 68 is considered average for end-user products and systems. Even our best-performing condition does not reach this standard, suggesting that even the most usable libraries tested have considerable room for improvement.

Using a linear regression model (Section IV-B), we analyzed the impact of library and encryption mode on the SUS scores.