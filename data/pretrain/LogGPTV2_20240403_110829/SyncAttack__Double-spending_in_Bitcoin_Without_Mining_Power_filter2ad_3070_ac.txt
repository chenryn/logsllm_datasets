by Bitnodes can have discrepancies (i.e., due to protocol implementation or network
sampling time), it highlights that measuring the network synchronization remains
largely an open question. We note, however, that our proposed attack in §5 is largely
unaected by the synchronization values reported by Bitnodes.
1672
Figure 4: Network synchronization pattern of a node ob-
tained from algorithm 2. When the node was synchronized,
the corresponding value in the list was marked 1 (synchro-
nization indicator). Therefore, the shaded region shows all
the blocks for which the node remained synchronized.
nodes do not form an exclusive community in the overlay topology
(i.e., all mining nodes are directly connected). Our conclusions are
supported by the prior work conducted by Miller et al. [20], who
observed that mining nodes do not have a high network outdegree
and they typically follow the standard node congurations (i.e.,
default incoming and outgoing connections). As a result, when the
network synchronization deteriorates, the mining nodes are also
likely to suer from it, leading to an increase in forks [19].
4.1.2 Network Outdegree. Besides the overall synchronization of
56%, another key observation in Figure 2 is the non-uniform width
ofb5⌘(G) that indicates variations in deg+(#A ) (i.e., the changing net-
work outdegree resulting in varying block propagation patterns). It
is therefore worth investigating if the network outdegree falls below
the minimum outdegree (deg+(#A ) deg+
min(#A )), thus preventing
block delivery to a group of nodes for a long time. A test case
to determine this condition would be to nd a non-synchronized
node at a particular blockchain height and observe the node’s syn-
chronization pattern for all subsequent blocks. If the node stays
behind the blockchain for all subsequent blocks, we can conclude
that deg+(#A ) deg+
min(#A ), and there is no path in the overlay
network that delivers blocks to that node.
In Algorithm 2, we present our technique to determine if deg+(#A )
is below deg+
min(#A ) for a long time. We initialize an object $syn,
with =8 2 #A as the object keys and an empty list as the value
for each key. We then iterate over each block 2 9 2C and add 1
to the list if the latest block reported by =8 is equal to 2 9 (i.e., the
node is synchronized), and 0 otherwise. Finally, we return $syn
from algorithm 2, and apply Heuristic 2 to determine if deg+(#A )
is below deg+
Heuristic 2. For all the list values corresponding to a key in O,
if there is a value 1, after any sequence of 0’s , then deg+(#A ) is
eventually greater than deg+
min(#A ).
min(#A ).
Heuristic 2 species that if a node was behind the chain in
the past and eventually caught up, then there exists a path in the
overlay network that delivers blocks to that node. Therefore, the
average network outdegree is greater than the minimum outdegree.
After applying algorithm 2 on our dataset, we did not nd any
reachable node that stayed behind the blockchain indenitely. As
an example, in Figure 4, we plot the synchronization pattern of a
reachable node for 120 consecutive blocks. We mask the last two
Aug-17Nov-17Feb-18May-18Aug-18Nov-18Feb-19May-19Sep-19Dec-19Mar-20Jun-20Sept-20Dec-20Time(2017–2021)01NumberofForks664000664020664040664060664080664100BlockHeight01SynchronizationIndicator157.175.x.xSession 6A: Consensus and Attacks
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
Figure 5: The cumulative and the average number of reach-
able nodes present in the Bitcoin network at any time. The
gap between the two lines indicates a notable network churn
caused by the permissionless network.
Figure 6: The number of arriving and departing nodes in the
Bitcoin network. On average, in 60 days, 1,226 nodes joined
and 1,215 nodes departed from the network every day.
octets of the node’s IP address to preserve its privacy. Figure 4
shows that each time the node was behind the blockchain, it even-
tually caught up and synchronized on the latest block. The node’s
behavior in Figure 4 validates that there exists a path in the overlay
topology through which the node eventually receives the blocks.
Figure 4 also shows variations in the synchronization pattern,
indicating that the block reception depends on the node’s location in
the overlay network relative to the mining nodes. For instance, for
blocks 664060 and 664080, the node was found to be synchronized,
suggesting a close proximity with the mining nodes of those blocks.
On the other hand, for blocks 664020 and 664040, the node was
distant from the mining nodes of those blocks, and therefore did
not receive blocks even after a long time.
These observations lead to two possible characterizations of the
network outdegree. (1) The network outdegree is always greater
than the minimum outdegree and the lack of synchronization is
likely due to the node’s location in the overlay topology. (2) In the
worst case assumption, even if the network outdegree becomes
less than the minimum outdegree, it eventually recovers since the
non-synchronized nodes eventually catch up with the blockchain.
4.1.3 Key Takeaways. From the synchronization analysis of the
real world network, we make the following key conclusions. First,
the overall network synchronization is not ideal since only 56%
nodes report an up-to-date blockchain at any time. As a result, the
number of blockchain forks has increased in the last few months.
Second, despite imperfect synchronization, the network outdegree
is still greater than the minimum outdegree, which results in a
quick fork resolution and further enables the non-synchronized
nodes to catch up with the blockchain. Since the observed forks
resolve quickly, the blockchain consistency property is not violated.
In the following, we show that an adversary can prevent the fork
resolution by exploiting the Bitcoin network’s permissionless nature.
4.2 Bitcoin Network Churn
Since the Bitcoin network is permissionless, nodes can join or leave
the network at any time [31]. The arrival and departure of nodes
create the churn and changes the network outdegree, which subse-
quently aects the block propagation and the network synchroniza-
tion. In SyncAack, the adversary exploits the churn to partition
the existing nodes and the arriving nodes, and uses that partition-
ing to create forks and violate the blockchain consistency. In this
section, we analyze the Bitcoin network churn to extract useful
insights for the SyncAack construction.
In 60 days, we col-
4.2.1 Measurement Results. Network Size.
lected 45,165 IP addresses of reachable nodes with ⇡12,457 reach-
able nodes present in the network at any time. Figure 5 shows the
number of reachable nodes (|#A |) present in the network at any
time, as well as the cumulative number of unique IP addresses of
the reachable nodes collected during the measurements. The gap
between the two lines in Figure 5 indicates a notable churn rate
since the number of unique IP addresses increased continuously
while the number of reachable nodes present in the network at any
time remained almost constant (⇡12.5K).
Arriving and Departing Nodes. After observing the network
churn, we analyze the vulnerable network state created by the
churn. When a reachable node departs, all its connections are
dropped, including the incoming connections from its peers. Those
peers then try new outgoing connections to complete their default
outgoing slots (10 in Bitcoin including the two feeler connections).
If no other reachable node accepts their connection requests, their
average network outdegree decreases, aecting the network syn-
chronization (Figure 1 and §A).
Similarly, if a node joins the network and no reachable node
accepts its connections, the network outdegree remains low. Fur-
thermore, if an adversary occupies all the node’s incoming and
outgoing connections, the node can be partitioned from the rest of
the network (i.e., eclipse attack) [26]. Therefore, the node arrivals
and departures can create an imbalance in the overall network out-
degree, which can be exploited by an adversary to split the network
and control the communication model.
To analyze the number of arriving and departing nodes, we
denote #48 1   #48 as the set of nodes present in the previous day
8 1, but absent in the current day 8. The resulting value |#48 1 #48 |
gives the number of nodes that departed from the network on day
8. Conversely, |#48   #48 1| gives the number of arriving nodes that
were not found on the previous day. In Figure 6, we plot the number
of departing nodes |#48 1   #48 | and the number of arriving nodes
|#48   #48 1| for 60 days. The result shows that, on average, 1,215
nodes departed from the network and 1,226 new nodes joined the
network every day. While overall the network size remained stable
1673
1.6101.6111.6121.6131.614SamplingTime 1091234NumberofNodes 104|Nri|,µ=12,457Cumulative|Nr|1.6101.6111.6121.6131.614SamplingTime 1091234NumberofNodes 103|Nei 1 Nei|,µ=1,215|Nei Nei 1|,µ=1,226Session 6A: Consensus and Attacks
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
measurements in Figure 7 span two months, which means that
mining nodes could have persistently stayed in the network for one
month and may have departed later on. Based on these observations,
we can make the following deductions about the mining nodes, their
network communication model, and feasibility of SyncAack in
each communication model.
Figure 7: The number of persistent nodes R? in the Bitcoin
network. Note that over time, the curve attens and we nd
2,984 nodes that stayed persistently in the network.
during this period, the network experienced a notable churn rate
and a high variation in the Bitcoin network outdegree, leading to a
varying network synchronization observed in Figure 2.
It is important to note that if an adversary strategically occu-
pies all the incoming connection slots of the existing nodes in the
network, a newly arriving node will not be able to establish an out-
going connection to the existing nodes. Moreover, if the adversary
occupies the incoming and outgoing connections of the arriving
nodes, then the network will be partitioned between arriving nodes
and existing nodes. Due to the churn, the number of existing nodes
will decrease and the number of arriving nodes will increase over
time, allowing an adversary to orchestrate a mining race between
the two groups. This form of network partitioning is at the core of
the SyncAack, and in §5, we will show how the adversary achieves
this without mining power.
Persistent Nodes. Our measurements also revealed that despite
the network churn, 2,984 nodes did not leave the network during the
entire measurement study. For simplicity, we call them “persistent
nodes” (R?), and plot them in Figure 7 by counting the common
elements in #48 and #48 1. The key feature of the persistent nodes
is that, unlike the arriving nodes, the outgoing connections of
persistent nodes cannot be easily manipulated by the adversary [25,
26]. For instance, if a node =8 2 R? establishes all its outgoing
connections to other nodes in R?, those connections will not drop
despite the departure of other nodes that experience the churn.
Mining Nodes. Our next step is to study the characteristics of
the mining nodes and analyze how they can be partitioned by
the adversary. Unfortunately, Bitnodes dataset does not reveal the
mining nodes. In practice, an adversary can simply connect to all the
reachable nodes and identify the ones that relay the blocks before
other reachable nodes in the network. Those nodes can be labeled as
the mining nodes, and the adversary can determine their network
lifetime and churn. Prior works [20, 37] that used this mining nodes
detection technique have reported that the mining nodes have a
long network lifetime. Naïvely extrapolating their ndings to our
measurements conducted in 2021, we can assume that mining nodes
could be among the persistent nodes. As mentioned in the previous
section, attacking persistent nodes is harder than attacking nodes
that experience the churn.
Although the above-mentioned assumption seems logical, it may
not be entirely true based on the dierences in the experiment
duration in our study and prior works. For mining nodes detection,
[20, 37] conducted measurements for a few weeks and found that
mining nodes do not experience signicant churn. In contrast, our
1674
(1) Mining nodes are among the persistent nodes and they only
establish outgoing connections to each other (i.e., form a commu-
nity). In such a case, SyncAack will be infeasible since the adver-
sary cannot easily manipulate the outgoing connections among
the mining nodes. (2) Mining nodes are not among the persistent
nodes and they exhibit the churn. In such a case, SyncAack will be
highly feasible since the adversary can partition the mining nodes
and control their communication by exploiting the churn. (3) Some
mining nodes are among the persistent nodes while others experi-
ence the churn. Moreover, some mining nodes do not only establish
outgoing connections to the other mining nodes. In such a case,
SyncAack will still be feasible since the adversary can partition
the network between the new and the existing mining nodes.
We now evaluate how closely the real world Bitcoin communica-
tion model maps onto each of the communication model described
above. In the rst model, if mining nodes are among the persistent
nodes and make direct outgoing connections with each other then
they must instantly receive blocks from each other. As a result,
the blockchain should not fork as frequently as shown in Figure 3.
Therefore, we can rule out the possibility that if mining nodes are
among the persistent nodes then they only establish direct connec-
tions to each other. The prior work by Miller et al. [20] also showed
that the mining nodes follow a standard topology without forming
an exclusive community.
The second model is also less likely because a few mining pools
such as AntPool and SlushPool have been part of the Bitcoin net-
work for many years, and they have consistently mined blocks [9].
The churn among the nodes owned by AntPool means that a mining
pool replaces an old node with a new node to perform block relaying.
Setting up a new node and synchronizing with the blockchain can
take a long time, which would be costly for the mining pool. There-
fore, some mining nodes are likely among the persistent nodes.
The third model appears to be the most plausible characteri-
zation of the mining nodes in the current Bitcoin network. As