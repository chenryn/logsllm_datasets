### 优化后的文本

#### 安装体验
在第2.1.5节中描述了`non-free-firmware`区域。请注意，从Linux Vendor Firmware Service下载并通过fwupd加载到正在运行的Linux内核中的固件数据可能是非自由软件。

#### 9.11 虚拟化系统
通过使用虚拟化技术，我们可以在同一台机器上同时运行多个操作系统。

**提示**
参见Debian Wiki上的“System Virtualization”页面获取更多信息。

##### 9.11.1 虚拟化和模拟器工具
以下是几种虚拟化和模拟器工具平台：
- **完全硬件模拟**：例如通过`games-emulator`元软件包安装的软件包。
- **大部分CPU层的模拟**：加上一些I/O设备的模拟，如QEMU。
- **大部分CPU层的虚拟化**：加上一些I/O设备的模拟，如Kernel-based Virtual Machine (KVM)。
- **操作系统级容器虚拟化**：加上内核级的支持，如LXC (Linux Containers), Docker, `systemd-nspawn(1)`等。
- **文件系统访问虚拟化**：加上文件路径上的系统库调用，如`chroot`。
- **文件所有者权限虚拟化**：加上文件所有者权限上的系统库调用，如`fakeroot`。
- **操作系统API模拟器**：如Wine。
- **解释器级虚拟化**：加上执行选择和运行时库忽略，如Python的`virtualenv`和`venv`。

容器虚拟化详见第4.7.4节，是第7.6节的后端技术。

以下是一些帮助您搭建虚拟化系统的软件包：

| 软件包               | 流行度   | 大小   | 说明                                                                 |
|----------------------|----------|--------|----------------------------------------------------------------------|
| coreutils            | V:883, I:999 | 18306  | 包含`chroot(8)`的GNU核心工具。                                    |
| systemd-container    | V:49, I:59 | 1327   | 包含`systemd-nspawn(1)`的systemd container/nspawn工具。          |
| schroot              | V:5, I:7  | 2508   | 在`chroot`下执行Debian二进制包的特殊工具。                         |
| sbuild               | V:1, I:4  | 242    | 从Debian源码构建Debian二进制包的工具。                             |
| debootstrap          | V:5, I:55 | 309    | 搭建一个基本的Debian系统（用sh编写）。                              |
| cdebootstrap         | V:0, I:2  | 115    | 搭建一个Debian系统（用C编写）。                                     |
| cloud-image-utils     | V:1, I:16 | 66     | 云镜像管理实用程序。                                                |
| cloud-guest-utils     | V:2, I:12 | 71     | 云客户机实用程序。                                                  |
| virt-manager         | V:11, I:44 | 2296   | 虚拟机管理器：用于管理虚拟机的桌面应用。                            |
| libvirt-clients      | V:45, I:65 | 1241   | libvirt的客户端库程序。                                              |
| lxd                  | V:0, I:0  | 49275  | LXD: 系统容器和虚拟机管理器。                                       |
| podman               | V:13, I:15 | 41420  | Podman: 运行OCI-based容器的引擎。                                   |
| podman-docker        | V:0, I:0  | 248    | Podman: 运行OCI-based容器的引擎 - Docker包装器。                    |
| docker.io            | V:40, I:42 | 149302 | Docker: Linux容器运行时。                                           |
| games-emulator       | I:0       | 21     | Debian的游戏模拟器。                                                 |
| bochs                | V:0, I:0  | 6956   | Bochs: IA-32 PC仿真器。                                             |
| qemu                 | I:16      | 97     | QEMU: 快速通用处理器仿真器。                                        |
| qemu-system          | I:22      | 65     | QEMU: 全功能系统的模拟二进制。                                      |
| qemu-user            | V:1, I:6  | 93202  | QEMU: 用户模式的模拟二进制。                                        |
| qemu-utils           | V:11, I:107 | 10502 | QEMU: 工具集。                                                       |
| qemu-system-x86      | V:30, I:91 | 46166  | KVM: x86硬件上的硬件辅助全虚拟化。                                  |
| virtualbox           | V:6, I:8  | 131166 | VirtualBox: i386和amd64架构上的x86虚拟化解决方案。                   |
| gnome-boxes          | V:1, I:7  | 6691   | Boxes: 简单的GNOME应用程序，用于访问虚拟系统。                       |
| xen-tools            | V:0, I:2  | 719    | 用于管理Debian XEN虚拟服务器的工具。                                |
| wine                 | V:14, I:60 | 135   | Wine: Windows API实现（标准套件）。                                  |
| dosbox               | V:1, I:15 | 2696   | DOSBox: Tandy/Herc/CGA/EGA/VGA/SVGA显卡、声音和DOS的x86模拟器。     |
| lxc                  | V:8, I:12 | 25889  | Linux容器用户空间工具。                                              |
| python3-venv         | I:83      | 6      | venv创建虚拟的Python环境（系统库）。                                 |
| python3-virtualenv   | V:9, I:51 | 356    | virtualenv创建隔离的虚拟Python环境。                                 |
| pipx                 | V:3, I:15 | 928    | pipx在隔离环境中安装Python应用程序。                                 |

**表 9.27: 虚拟化工具列表**

##### 9.11.2 虚拟化工作流
自lenny版本以来，默认的Debian内核已支持KVM。典型的虚拟化工作流包括以下几个步骤：

1. **创建空文件系统**（目录树或磁盘映像）：
   - 目录树可以通过`mkdir -p /path/to/chroot`创建。
   - 原始磁盘映像文件可以使用`dd(1)`创建（参见第9.7.1节和第9.7.5节）。
   - `qemu-img(1)`可以创建和转换QEMU支持的磁盘映像文件。
   - 原始格式和VMDK文件格式可以作为虚拟化工具的通用格式。

2. **挂载磁盘映像到文件系统**（可选）：
   - 对于原始磁盘映像文件，可以将其作为回环设备或设备映射设备挂载（参见第9.7.3节）。
   - 对于QEMU支持的磁盘映像，可以将它们作为网络块设备挂载（参见第9.11.3节）。

3. **在目标文件系统上部署系统数据**：
   - 使用`debootstrap`和`cdebootstrap`等程序来协助处理这个过程（参见第9.11.4节）。
   - 在全功能系统模拟器下使用操作系统安装器。

4. **在虚拟化环境下运行程序**：
   - `chroot`提供基本的虚拟化环境，足以编译程序、运行控制台应用和后台守护进程。
   - QEMU提供跨平台的CPU模拟器。
   - QEMU和KVM通过硬件辅助虚拟化提供全功能系统的模拟。
   - VirtualBox可以在i386和amd64架构上，使用或不使用硬件辅助虚拟化来提供全功能系统模拟。

##### 9.11.3 挂载虚拟磁盘映像文件
对于原始磁盘映像文件，请参见第9.7节。对于其他虚拟磁盘映像文件，您可以使用`qemu-nbd(8)`导出它们，并使用内核模块`nbd`进行挂载。

`qemu-nbd(8)`支持QEMU支持的磁盘格式：raw, qcow2, qcow, vmdk, vdi, bochs, cow (user-mode Linux copy-on-write), parallels, dmg, cloop, vpc, vvfat (virtual VFAT) 和主机设备。

网络块设备可以像回环设备一样支持分区（参见第9.7.3节）。您可以按以下方式挂载`disk.img`的第一个分区：

```bash
# modprobe nbd max_part=16
# qemu-nbd -v -c /dev/nbd0 disk.img
...
# mkdir /mnt/part1
# mount /dev/nbd0p1 /mnt/part1
```

**提示**
您可以使用`qemu-nbd(8)`的`-P 1`选项来导出`disk.img`的第一个分区。

##### 9.11.4 Chroot 系统
如果您希望从终端控制台尝试一个新的Debian环境，推荐使用`chroot`。这使您能够运行unstable和testing的控制台应用程序，而不会带来通常的风险，并且不需要重启。`chroot(8)`是最基础的方法。

**注意**
以下示例假设根源系统和chroot系统都共享相同的amd64 CPU架构。

虽然您可以手动使用`debootstrap(1)`创建一个`chroot(8)`环境，但这需要一些繁琐的工作。`sbuild`软件包可以从源代码构建一个Debian软件包，并使用`schroot`管理的`chroot`环境。它与帮助脚本`sbuild-createchroot(1)`一起使用。让我们按如下所示的方式运行它，以了解其工作原理：

```bash
$ sudo mkdir -p /srv/chroot
$ sudo sbuild-createchroot -v --include=eatmydata,ccache unstable /srv/chroot/unstable-amd64-sbuild http://deb.debian.org/debian
...
```

您可以看到`debootstrap(8)`如何在`/srv/chroot/unstable-amd64-sbuild`下部署unstable环境的系统数据，用于最小的构建系统。

您可以使用`schroot(1)`登录到此环境：

```bash
$ sudo schroot -v -c chroot:unstable-amd64-sbuild
```

**注意**
`/usr/sbin/policy-rc.d` 文件总是以退出码101退出，阻止在Debian系统上自动启动后台守护进程。参见`/usr/share/doc/init-system-helpers/README.policy-rc.d.gz`。

**注意**
某些在`chroot`下的程序可能需要访问比上面根源系统上的`sbuild-createchroot`提供的文件更多的文件才能运行。例如，`/sys`、`/etc/passwd`、`/etc/group`、`/var/run/utmp`、`/var/log/wtmp`等。可能需要使用bind-mounted或复制这些文件。

**提示**
`sbuild`软件包帮助建立一个`chroot`系统来构建软件包，并在`chroot`内使用`schroot`作为后端。这是一个检查构建依赖的理想系统。更多信息请参见Debian Wiki上的`sbuild`页面和“Guide for Debian Maintainers”中的`sbuild`配置示例。

**提示**
`systemd-nspawn(1)`命令使用类似`chroot`的方法帮助运行命令或轻量级容器内的操作系统。它更强大，因为它使用命名空间来完全虚拟化进程树、进程间通信、主机名、域名，并可选网络和用户数据库。参见`systemd-nspawn`。

##### 9.11.5 多桌面系统
如果您希望尝试任何操作系统的新的GUI桌面环境，建议在Debian稳定版系统上使用QEMU或KVM，这些软件应用虚拟化技术安全地运行多桌面系统。这使您能够运行任何桌面应用程序，包括Debian不稳定版和测试版上的桌面应用程序，而不会带来通常的风险，并且不需要重启。

由于纯QEMU工具非常慢，当主机系统支持KVM时，建议使用KVM加速。

虚拟机管理器（也称为`virt-manager`）是一个方便的GUI工具，用于管理KVM虚拟机，它调用`libvirt`。

按以下方法，可以创建一个包含Debian系统的QEMU虚拟磁盘映像`virtdisk.qcow2`，并使用debian安装器的小CD进行安装：

```bash
$ wget https://cdimage.debian.org/debian-cd/5.0.3/amd64/iso-cd/debian-503-amd64-netinst.iso
$ qemu-img create -f qcow2 virtdisk.qcow2 5G
$ qemu -hda virtdisk.qcow2 -cdrom debian-503-amd64-netinst.iso -boot d -m 256
...
```

**提示**
在虚拟化下运行Ubuntu和Fedora等其他GNU/Linux发行版，是学习其配置技巧的好方法。其他专有操作系统也可以在这个GNU/Linux虚拟化下良好运行。

更多技巧请参见Debian Wiki上的“System Virtualization”页面。

### 第10章 数据管理
以下是关于在Debian系统上管理二进制和文本数据的工具及其相关提示。

#### 10.1 共享、拷贝和存档
**警告**
为避免竞争情况，不应允许多个进程对正在进行写操作的设备和文件进行不协调的写操作。可以使用`flock(1)`的文件锁定机制来避免这种情况。

数据的安全和受控共享涉及以下几个方面：
- 存档文件的建立
- 远程存储访问
- 复制
- 跟踪修改历史
- 促进数据共享
- 防止未经授权的文件访问
- 检测未经授权的文件修改

这些可以通过使用以下工具集来实现：
- 存档和压缩工具
- 复制和同步工具
- 网络文件系统
- 移动存储媒介
- 安全shell
- 认证体系
- 版本控制系统工具