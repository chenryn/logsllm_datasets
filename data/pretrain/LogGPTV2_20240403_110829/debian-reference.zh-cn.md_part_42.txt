善的安装体验。non-free-firmware区域在第 2.1.5 节里面描述。
也请注意到，fwupd 从 Linux Vendor Firmware Service 下载的固件数据并加载到正在运行的 Linux 内核，可能是
non-free。
9.11 虚拟化系统
通过使用虚拟系统，我们能在单个机器上同时运行多个系统。
提示
SeeDebianwikionSystemVirtualization.
9.11.1 虚拟化和模拟器工具
有几个虚拟化和模拟器工具平台。
• 完全的硬件模拟软件包，比如通过games-emulator元软件包安装的软件包
• 大部分CPU层的模拟，加上一些I/O设备的模拟，比如QEMU
• 大部分CPU层的虚拟化，加上一些I/O设备的模拟，比如Kernel-basedVirtualMachine(KVM)
• 操作系统级的容器虚拟化，加上内核级的支持，比如LXC(LinuxContainers),Docker,systemd-nspawn(1),...
• 操作系统级的文件系统访问虚拟化，加上在文件路径上的系统库调用，比如chroot
• 操作系统级的文件系统访问虚拟化，加上在文件所有者权限上的系统库调用，比如fakeroot
• 操作系统API模拟器，比如Wine
• 解释器级的虚拟化，加上它的执行选择和运行时库忽略，比如Python的virtualenv和venv
容器虚拟化使用第 4.7.4 节，是第 7.6 节的后端技术。
这里有一些帮你搭建虚拟化系统的软件包。
参见维基百科Comparisonofplatformvirtualmachines来获得不同平台的虚拟化解决方案的详细比较信息。
Debian参考手册 173/233
软件包 流行度 大小 说明
coreutils V:883,I:999 18306 GNU核心工具包含chroot(8)
systemd-container
V:49,I:59 1327 systemdcontainer/nspawn工具包含systemd-nspawn(1)
schroot V:5,I:7 2508 在chroot下执行Debian二进制包的特异工具
sbuild V:1,I:4 242 从Debian源码构建Debian二进制包的工具
debootstrap V:5,I:55 309 搭建一个基本的Debian系统(用sh写的)
cdebootstrap V:0,I:2 115 搭建一个Debian系统(用C写的)
cloud-image-utils
V:1,I:16 66 cloudimagemanagementutilities
cloud-guest-utils
V:2,I:12 71 cloudguestutilities
virt-manager V:11,I:44 2296 虚拟机管理器: 用于管理虚拟机的桌面应用
libvirt-clients
V:45,I:65 1241 libvirt的库程序
lxd V:0,I:0 49275 LXD:systemcontainerandvirtualmachinemanager
podman V:13,I:15 41420 podman: enginetorunOCI-basedcontainersinPods
podman-docker V:0,I:0 248 enginetorunOCI-basedcontainersinPods-wrapperfordocker
docker.io V:40,I:42 149302 docker: Linuxcontainerruntime
games-emulator I:0 21 games-emulator: Debian的游戏模拟器
bochs V:0,I:0 6956 Bochs: IA-32PC仿真器
qemu I:16 97 QEMU:快速的通用处理器仿真器
qemu-system I:22 65 QEMU:全功能系统的模拟二进制
qemu-user V:1,I:6 93202 QEMU:用户模式的模拟二进制
qemu-utils V:11,I:107 10502 QEMU:工具集
qemu-system-x86
V:30,I:91 46166 KVM:x86硬件上有硬件辅助虚拟化的全虚拟化
virtualbox V:6,I:8 131166 VirtualBox:i386和amd64上x86的虚拟化解决方案
gnome-boxes V:1,I:7 6691 Boxes: SimpleGNOMEapptoaccessvirtualsystems
xen-tools V:0,I:2 719 用于管理debianXEN虚拟服务器的工具
wine V:14,I:60 135 Wine: Windows应用程序编程接口实现（标准套件）
DOSBox:有Tandy/Herc/CGA/EGA/VGA/SVGA显卡,声音和
dosbox V:1,I:15 2696
DOS的x86模拟器
lxc V:8,I:12 25889 Linuxcontainersuserspacetools
python3-venv I:83 6 venv创建虚拟的python环境（系统库）
python3-virtualenv
V:9,I:51 356 virtualenv创建隔离的虚拟python环境
pipx V:3,I:15 928 pipx在隔离的环境中安装python应用程序
Table9.27: 虚拟化工具列表
Debian参考手册 174/233
9.11.2 虚拟化工作流
注意
自从lenny之后，默认的Debian内核就是支持KVM的。
典型的虚拟化工作流涉及以下几个步骤。
• 创建空文件系统(目录树或磁盘映像)。
– 目录树可以通过”mkdir -p /path/to/chroot”创建。
– 原始的磁盘映像文件能够使用dd(1)创建(参见第 9.7.1 节和第 9.7.5 节).
– qemu-img(1)能够创建和转化QEMU支持的磁盘映像文件.
– 原始的格式和VMDK文件格式,能够作为虚拟化工具的通用格式.
• 使用mount(8)挂载磁盘映像到文件系统(可选).
– 对于原始磁盘映像文件,把它作为回环设备或设备映射设备挂载. (参见第 9.7.3 节).
– 对于QEMU支持的磁盘映像,把它们作为networkblockdevice网络块设备挂载(参见第 9.11.3 节).
• 在目标文件系统上部署需要的系统数据。
– 使用debootstrap和cdebootstrap之类的程序来协助处理这个过程(参见第 9.11.4 节).
– 在全功能系统模拟器下使用操作系统安装器。
• 在虚拟化环境下运行一个程序。
– chroot提供基本的虚拟化环境,足够能在里面编译程序,运行控制台应用,运行后台守护程序daemon.
– QEMU提供跨平台的CPU模拟器.
– QEMU和KVM通过hardware-assistedvirtualization硬件辅助虚拟化来提供全功能系统的模拟.
– VirtualBox可以在i386和amd64上,使用或者不使用hardware-assistedvirtualization硬件辅助虚拟化来提供全功能
系统模拟.
9.11.3 挂载虚拟磁盘映像文件
对于原始磁盘映像文件,参见第 9.7 节.
对于其它虚拟磁盘映像文件,你能够用使用networkblockdevice网络块设备协议的qemu-nbd(8)来导出他们,并使用
内核模块nbd来挂载它们.
qemu-nbd(8) 支持 QEMU 所支持的磁盘格式: QEMU 支持下列磁盘格式: raw, qcow2, qcow, vmdk, vdi, bochs, cow
(user-modeLinuxcopy-on-write),parallels,dmg,cloop,vpc,vvfat(virtualVFAT)和主机设备.
网络块设备能够用和回环设备一样的方式支持分区(参见第 9.7.3 节). 你能够按下面的方式挂载”disk.img”的第一
个分区.
# modprobe nbd max_part=16
# qemu-nbd -v -c /dev/nbd0 disk.img
...
# mkdir /mnt/part1
# mount /dev/nbd0p1 /mnt/part1
提示
你可以给qemu-nbd(8)使用”-P 1”选项来导出”disk.img”的第一个分区.
Debian参考手册 175/233
9.11.4 Chroot 系统
如果你希望从终端控制台尝试一个新的Debian环境，我推荐你使用chroot。这使你能够运行unstable和testing
的控制台应用程序，不会有通常的相关风险，并且不需要重启。chroot(8)是最基础的方法。
小心
下面的列子假设根源系统和chroot系统都共享相同的amd64CPU架构。
虽然你能够手工使用debootstrap(1)来创建一个chroot(8)环境，这要求琐碎的工作。
sbuild软件包从源代码构建一个Debian软件包，使用schroot软件包管理的chroot环境。它和帮助脚本sbuild-createchroot(1)
一起。让我们按如下所示的方式运行它，来学会它是怎样工作的。
$ sudo mkdir -p /srv/chroot
$ sudo sbuild-createchroot -v --include=eatmydata,ccache unstable /srv/chroot/unstable- ←-
amd64-sbuild http://deb.debian.org/debian
...
你能够看到debootstrap(8)是如何在”/srv/chroot/unstable-amd64-sbuild”下部署unstable环境的系
统数据,用于一个最小的构建系统。
你可以使用schroot(1)来登录到这个环境。
$ sudo schroot -v -c chroot:unstable-amd64-sbuild
你可以看到一个运行在unstable环境的系统shell是如何创建的。
注意
”/usr/sbin/policy-rc.d” 文件总是用 101 退出，阻止在 Debian 系统上自动启动后台守护程序。参
见”/usr/share/doc/init-system-helpers/README.policy-rc.d.gz”。
注意
一些在chroot下的程序，需要访问比上面根源系统上的sbuild-createchroot能够提供的文件之外的更多文件
才能够运行。例如，”/sys”,”/etc/passwd”,”/etc/group”,”/var/run/utmp”,”/var/log/wtmp”等等.也许
需要使用bind-mounted或拷贝.
提示
sbuild 软件包帮助建立一个 chroot 系统来构建一个软件包，在 chroot 内使用 schroot 作为它的后端。它是一
个检查构建依赖（build-dependencies）的理想系统。更多信息参见 sbuild at Debian wiki 和在”Guide for Debian
Maintainers”中的sbuild配置样例。
提示
systemd-nspawn(1) 命令使用 chroot 类似的方法帮助运行一个命令，或者轻量级容器内的操作系统。它更强
大，因为它使用命名空间来完全虚拟化进程树、进程间通讯、主机名、域名，并可选网络和用户数据库。参见
systemd-nspawn。
Debian参考手册 176/233
9.11.5 多桌面系统
如果你希望尝试任一操作系统的一个新的GUI桌面环境，我推荐在Debian稳定版系统上使用QEMU或者KVM，这些
软件应用虚拟化技术安全的运行多桌面系统。这能让你运行任何桌面应用，包括Debian不稳定版和测试版上的桌面应
用，并且没有与之相关的通常意义上的风险，并且不需要重启。
因为单纯的QEMU工具是非常慢的，当主机系统支持KVM的时候，建议使用它来加速。
虚拟机管理器，也被称为virt-manager，它是一个便利的管理KVM虚拟机的GUI（图形用户界面）工具，它调用
libvirt。
按下面的方法，能够创建一个可以用于QEMU的包含有Debian系统的虚拟磁盘映像”virtdisk.qcow2”，这个Debian
系统使用debian安装器:小CD安装。
$ wget https://cdimage.debian.org/debian-cd/5.0.3/amd64/iso-cd/debian-503-amd64-netinst.iso
$ qemu-img create -f qcow2 virtdisk.qcow2 5G
$ qemu -hda virtdisk.qcow2 -cdrom debian-503-amd64-netinst.iso -boot d -m 256
...
提示
在虚拟化下运行Ubuntu和Fedora之类的其它GNU/Linux发行版，是一个不错的学习其配置技巧的方法。其它专
有操作系统也可以在这个GNU/Linux虚拟化下很好的运行。
在Debianwiki: SystemVirtualization参看更多技巧。
Debian参考手册 177/233
Chapter 10
数据管理
以下是关于在Debian系统上管理二进制和文本数据的工具及其相关提示。
10.1 共享，拷贝和存档
警告
为避免竞争情况，不应当对正在进行写操作的设备和文件，多个进程进行不协调的写操作。采用 flock(1)
的文件锁定机制可用于避免这种情况。
数据的安全和它的受控共享有如下几个方面。
• 存档文件的建立
• 远程存储访问
• 复制
• 跟踪修改历史
• 促进数据共享
• 防止未经授权的文件访问
• 检测未经授权的文件修改
这些可以通过使用工具集来实现。
• 存档和压缩工具
• 复制和同步工具
• 网络文件系统
• 移动存储媒介
• 安全shell
• 认证体系
• 版本控制系统工具