title:Binary Code Continent: Finer-Grained Control Flow Integrity for Stripped
Binaries
author:Minghua Wang and
Heng Yin and
Abhishek Vasisht Bhaskar and
Purui Su and
Dengguo Feng
Binary Code Continent: Finer-Grained Control Flow Integrity for Stripped
Binaries
Minghua Wang1,2,4, Heng Yin2, Abhishek Vasisht Bhaskar2, Purui Su1,3, Dengguo Feng1
{wangminghua, supurui, feng}@tca.iscas.ac.cn, {heyin, abhaskar}@syr.edu
1Trusted Computing and Information Assurance Laboratory, Institute of Software, Chinese Academy of
Sciences
2Syracuse University
3State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences
4University of Chinese Academy of Sciences
ABSTRACT
Control Flow Integrity (CFI) is an effective technique to mitigate
threats such as code-injection and code-reuse attacks in programs
by protecting indirect transfers. For stripped binaries, a CFI policy
has to be made conservatively due to the lack of source code lev-
el semantics. Existing binary-only CFI solutions such as BinCFI
and CCFIR demonstrate the ability to protect stripped binaries, but
the policies they apply are too permissive, allowing sophisticated
code-reuse attacks. In this paper, we propose a new binary-only
CFI protection scheme called BinCC, which applies static binary
rewriting to provide ﬁner-grained protection for x86 stripped ELF
binaries. Through code duplication and static analysis, we divide
the binary code into several mutually exclusive code continents. We
further classify each indirect transfer within a code continent as ei-
ther an Intra-Continent transfer or an Inter-Continent transfer, and
apply separate, strict CFI polices to constrain these transfers. To
evaluate BinCC, we introduce new metrics to estimate the average
amount of legitimate targets of each kind of indirect transfer as well
as the difﬁculty to leverage call preceded gadgets to generate ROP
exploits. Compared to the state of the art binary-only CFI, BinCFI,
the experimental results show that BinCC signiﬁcantly reduces the
legitimate transfer targets by 81.34% and increases the difﬁculty for
adversaries to bypass CFI restriction to launch sophisticated ROP
attacks. Also, BinCC achieves a reasonable performance, around
14% of the space overhead decrease and only 4% runtime overhead
increase as compared to BinCFI.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Informa-
tion ﬂow controls
General Terms
Security
Keywords
Control Flow Integrity
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from Permissions@acm.org.
ACSAC ’15, December 07-11, 2015, Los Angeles, CA, USA
Copyright 2015 ACM 978-1-4503-3682-6/15/12...$15.00.
http://dx.doi.org/10.1145/2818000.2818017.
331
1.
INTRODUCTION
ASLR [22] and DEP [2] have mitigated traditional threats to
computer programs. However, attackers are still able to launch at-
tacks through code reuse [4, 21] even if ASLR and DEP are en-
abled. Return Oriented Programming [20] (ROP) is one such code
reuse technique. Over time this technique has gained popularity
and presents a challenge to program safety. Several works [3, 6–8,
13, 19, 24] have proposed solutions to tackle these kinds of attacks
and they have all made improvement to some extent.
Control ﬂow Integrity [1] plays an important role in combating
control ﬂow hijack attacks. It forces the control ﬂow transfers in
the program to follow the policy represented by the control ﬂow
graph. The policy can be strict based on the source code as the
the control ﬂow graph tend to be completed. However, for stripped
binaries, because of the lack of source code or debug information,
the CFI policy is coarse-grained. Although many advanced CFI
implementations such as CCFIR and BinCFI can prevent the vast
majority of control ﬂow hijack threats, they may still be vulnerable
to sophisticated ROP attacks as illustrated in the works [5, 10].
In this paper, we extend one state of the art CFI solution, BinC-
FI, and propose a new binary-only CFI protection scheme, BinCC,
which provides ﬁner-grained protection for stripped binaries. By
duplicating a little amount of code and performing static analy-
sis, we divide the binary code into several mutually exclusive code
continents, and classify each indirect transfer as either an Intra-
Continent transfer or an Inter-Continent transfer. We further apply
strict CFI polices to constrain these two kinds of transfers. Under
our policy, Intra-Continent transfers have determined targets with-
in the continent, and Inter-Continent transfers are only permitted
to reach speciﬁc types of targets across continents. As a result, we
signiﬁcantly reﬁne the legitimate transfer targets.
To evaluate our policy, we introduce new metrics to estimate the
average amount of legitimate targets of each kind of indirect trans-
fer as well as the difﬁculty to leverage call preceded gadgets to
generate exploit. As compared to BinCFI, the experimental results
show that BinCC makes great improvement on both these aspect-
s. BinCC reduces the legitimate transfer targets by 81.34% com-
pared to BinCFI. Especially, BinCC provides much ﬁner-grained
protection for returns and degrades the average legitimate target-
s by 87%, thereby signiﬁcantly increasing the difﬁculty to launch
sophisticated ROP attacks by leveraging call preceded gadgets. A-
part from that, BinCC has a reasonable performance, 4% higher
runtime overhead and 14% less space overhead than BinCFI.
In summary, BinCC has the following contributions:
• BinCC proposes code duplication and code continents con-
struction and thus classifying indirect transfers as either Intra-
Continent transfers or Inter-Continent transfers, allowing to
enforce a ﬁner-grained CFI policy.
• BinCC can considerably reﬁne the legitimate targets for a bi-
nary’s indirect transfers, especially for returns, as compared
to binary based CFI implementations, BinCFI and CCFIR.
• BinCC can not only eliminate common control ﬂow hijack
threats, but also signiﬁcantly increase the difﬁculty to launch
sophisticated ROP exploits, for instance, leveraged by call
preceded gadgets.
• BinCC has reasonable performance, around 14% less space
overhead and 4% higher runtime overhead as compared to
BinCFI.
We organize the remainder of paper as follows. We discuss back-
ground and related work at Section 2, and then present the concept
of code continent and our policy in Section 3. We describe code
continent construction in Section 4 and CFI enforcement in Sec-
tion 5. Section 6 presents our evaluation. Discussion is in Section
7 and conclusion is in Section 8.
2. BACKGROUND AND RELATED WORK
CFI related implementations can be generally classiﬁed into two
categories, namely, source code based and binary only based. Since
in practice a large number of binaries we face are closed source, we
lay more emphasis on binary only based solutions. Particularly, we
discuss more on two state of the art implementations CCFIR as well
as BinCFI and the possible attacks towards them.
2.1 Source Code Based CFI
Many CFI implementations [3,11,12,16,23] need source code to
enforce CFI policy. The works [11,23] mainly focus on the protec-
tion of virtual function calls. They leverage class hierarchy analysis
to identify legitimate targets and insert checking code to perform
method and vtable checks. Both solutions can provide ﬁne-grained
protection to calls but little protection to returns. CFL [3] works
by performing a lock operation before each indirect transfer and a
corresponding unlock operation only at valid destinations. It shares
the similar insight with ours in terms of constraining returns from
relatively called functions, but it relies on source code, which is
not always available in practice, and additionally, it lacks modular
support. MCFI [15] is a CFI solution that supports separate com-
pilation. It uses several tables to store legitimate targets of indirect
transfers, and uses auxiliary type information to update their tar-
gets when modules are dynamically loaded. Instrumented code is
inserted before indirect branches and runtime checks are needed.
CPI [12], RockJIT [16] also focus on control ﬂow integrity. Rock-
JIT [16], an extension of MCFI [15], is able to prevent control ﬂow
attacks caused by JITed code. It computes the program’s precise
CFG using the JIT compiler’s source code and updates the CFI pol-
icy when dynamic code is generated at runtime. The work [12] in-
troduces code pointer integrity and code pointer separation. It can
guarantee the program safety by selectively protecting code pointer
accesses, which are susceptible to control ﬂow hijacking attacks.
2.2 Binary Only Based CFI
There are plenty of binary only based solutions [14,24,25] which
enforce control ﬂow integrity. O-CFI [14] applies a coarse-grained
policy to constrain control ﬂow transfers. The integrity checking
is performed by consulting a bounds lookup table which stores
the legitimate range for each indirect branch.
It also uses code-
randomization which helps the CFI enforcement and also enables
332
call foo
...
foo{
...
test [esp], M_R
jnz error
ret
}
foo_stub:
bar_stub:
...
call foo
...
call eax
...
call [ebx]
...
foo{
...
jmp ret_search
}
ret_search:{
find tgt
movl tgt, %gs:40
jmp %gs:0x40
springboard
(a)
}
addr_trans
(b)
Figure 1: Possible Attacks to CCFIR and BinCFI
the program to resist information disclosure attacks. SFI [24] is a
sandboxing technique that helps enforce control ﬂow integrity. The
basic idea is to make untrusted modules execute in the same pro-
cess’ address space without allowing them to access each other’s
data and code. PittSFIled [13] and NaCl [25] are SFI-based imple-
mentation to secure native code and they restrict indirect transfers’
targets to meet speciﬁc alignment requirement.
Lockdown [17] applies ﬁne-grained policies that protect bina-
ries. It uses shadow stacks to enforce integrity for returns. How-
ever, shadow stacks could introduce high runtime overhead as more
memory read and write operations are needed to maintain call/return
pairs. More importantly, shadow stacks need to be stored in safe
memory regions, which needs support from segmentation provid-
ed by hardware or isolation techniques like SFI. The safe regions
could be vulnerable to information leakage and thus controlled by
attackers to perform exploits. One real attack is shown in [9].
CCFIR [26] is a binary rewriting based CFI solution that targets
Windows x86 executables. It arranges the targets for indirect trans-
fers into a newly introduced section called a “springboard". The
targets are aligned in the springboard, and each indirect transfer is
instrumented to check whether the runtime target meets the correct
alignment. If so, the transfer will be performed through the corre-
sponding stub in the springboard, otherwise the target is regarded as
invalid. BinCFI [27] is another CFI work based on binary rewriting
and targets ELF binaries. BinCFI disassembles the binary, instru-
ments indirect transfers and puts the instrumented code into a newly
introduced code section. For each instruction, it maintains a map-
ping between the original location and the new location. Indirect
transfers are instrumented to jump to address translation routines,
which look for the targets of these transfers. If found, the routine
will execute the target at the new location. Also, BinCFI support-
s inter-module CFI policy by modifying the loader to behave as a
hub to transfer control among modules.
The CFI policy towards stripped binaries is coarse-grained as the
CFGs are imprecise. The permissive policy is still likely to be vi-
olated although it has the ability to mitigate the vast majority of
common control ﬂow hijacks. Figure 1 shows the possible attack
models to CCFIR and BinCFI. The solid line indicates the execu-
tion ﬂow at run time, while the dashed line indicates the possible
targets that could be leveraged in an attack. For CCFIR, as shown in
Figure 1(a), the target, residing in the springboard, is only required
to align against the constant M_R, so any call-site’s address would
be regarded as legitimate. Similarly, for BinCFI, a controlled re-
turn would be able to reach any call sites in the binary, as shown in
Figure 1(b). Those returns are left unprotected and give adversaries
chances to leverage call preceded gadgets to launch attacks. One
recent practical exploit has been shown [10].
3. BINARY CODE CONTINENT
We propose a ﬁner-grained CFI policy that is able to signiﬁcant-
ly reﬁne the legitimate targets of indirect transfers. In general, we
achieve this by duplicating some necessary code and performing
static analysis to separate the binary into several mutually exclu-
sive code continents, and more importantly, assigning each indi-
rect transfer to be either an Intra-Continent transfer or an Inter-
Continent transfer. This enables us to enforce separate, strict pol-
icy to achieve ﬁner-grained protection. In the following sections,
we ﬁrst describe the concept of code continent through a sample
and then present our CFI policy.
3.1 Code Continent
Code continents are constructed from Super-CFGs of function-
s. A Super-CFG (Super Control Flow Graph) is constructed, for
a function, from its CFG (Control Flow Graph) by connecting all
direct call sites in the CFG to the entry point of the callee’s Super-
CFG and the end point of the callee’s Super-CFG is connected back
to the call site. This process is repeated recursively until all the di-
rect calls in the function are handled. A code continent is a direct-
ed graph that is constructed from merging functions’ Super-CFGs
based on their common edges. Therefore, code continents are mu-
tually exclusive.
We use Figure 2 to illustrate code continents that represent the
sample code. Suppose a binary originally contains the functions,
main, foo, bar, qux and start. start is the binary’s entry
point. The ordinals within graph nodes represent the corresponding
instructions in code. In Figure, CC1 represents the code continent
generated from the Super-CFG of main. foo’s Super-CFG, which
is constructed by 5, 6 and 7, is included because foo is direct-
ly called at 3. CC2 represents the code continent generated from
bar’s Super-CFG, which has only four nodes. As no direct call
site is present in bar, no callee’s Super-CFG needs to be added in.
We divide the graph nodes contained in a code continent into
three categories: root nodes, border nodes and inner nodes. root
nodes represent entry points of indirect called functions, and they
are represented in grey in the Figure. For instance, 1 and 5 are root
nodes in CC1. border nodes are the indirect transfer instruction-
s whose targets cannot be identiﬁed while computing the Super-
CFG, and they are represented striped in the Figure, for example,
2, 4 and 6 are border nodes in CC1. The nodes that are neither
root nor border nodes are denoted as inner nodes, and they are
represented in white in the Figure. The instructions represented
by inner nodes are either non-control ﬂow transfer instructions or
control ﬂow transfers that have determined targets present inside
Super-CFGs, for example, 3 and 7.
By dividing the nodes, we are able to classify indirect transfers
into two categories, Intra-Continent transfers and Inter-Continent
transfers. Intra-Continent transfers are the indirect transfers origi-
nating from inner nodes, while Inter-Continent transfers originating
from border nodes. More importantly, we guarantee that each indi-
rect transfer is either an Intra-Continent or an Inter-Continent trans-
fer and thereby enforcing separate, strict policies. This is achieved
by performing code duplication before code continent construction.
We know that in general the functions in a binary fall into two
categories, Indirectly Called Functions (ICFs) and Directly Called
Functions (DCFs). There might be some functions that are called
in both ways, and by duplicating those functions, we can partition
the functions into two mutually exclusive sets by considering the
duplicated functions as ICFs, as shown in Figure 3. At an indirect
call site, we perform runtime dispatch to execute the duplicated
function when the original function is called. As such, a function
will be called only in a certain way, either indirectly or directly, and
because of this, a return will go back to a speciﬁc type of call site.
We thus can divide all the returns into two mutually exclusive sets:
direct returns, which only target direct call sites, as well as indirect
returns, which only target indirect call sites.
As in the sample code, ICFs are composed by main, foo, qux,
bar, while DCFs is composed by foo. Only foo is called in
both ways. Suppose the execution starts from start, originally,
the function foo is indirectly called at ﬁrst time by 9 and directly
called at second time by 3, so the return 7 would go back to those
two call sites respectively. In BinCC, foo’ is a new function gen-
erated from duplicating foo and will be executed when foo is
indirectly called at 9. This makes 7 become an Intra-Continent
transfer and 7’ become an Inter-Continent transfer, which means
that 7, as a direct return, would only return to 3, while 7’, as an
indirect return, would return to 9, as shown by the two dot arrows.
duplication
ICFs
DCFs
ICFs
DCFs
Figure 3:
Indirectly Called Functions(ICFs) and Directly
Called Functions(DCFs). Functions are partitioned into two
mutually exclusive parts through duplicating the functions in
the intersection. Duplicated functions are considered as ICFs.
3.2 CFI Policy
We propose Intra-Continent Policy and Inter-Continent Policy
to constrain Intra-Continent and Inter-Continent indirect transfers
respectively.
Intra-Continent Policy.
This policy is to constrain the inner nodes representing indirect
transfers whose targets can be determined statically. Their targets
are always present inside their own code continent and are always
determined by the Super-CFGs that compose this continent. Within
a continent, there are only two kinds of indirect control ﬂow trans-
fers we need to be concerned with, one being direct returns and the
other being indirect jumps associated with switch-case jump tables.
For each direct return, the legitimate targets are its corresponding
target call sites within the current code continent. For each indirect
jump, the legitimate targets are all the case branches in the corre-
sponding jump table. The case branches in a jump table can be
identiﬁed by static analysis, and we connect the indirect jump with
all its case branches when building Super-CFGs, which makes its
targets deterministic.
For the sample illustrated, there is one Intra-Continent indirect
transfer in those continents. It is the return at 7 in CC1. It is only
allowed to return back to the call site 3 (or say the instruction 4).
Inter-Continent Policy.