WCF的功能包括：
● 存储组件和服务 ——与联合使用自定义主机、.NET Remoting和WSE一样，也可以
将WCF服务存放在ASP.NET运行库、Windows服务、COM+进程或WPF应用程序
中，进行对等计算。
● 声明行为 ——不要求派生自基类（.NET Remoting和Enterprise Services有这个要
求），而可以使用属性定义服务。这类似于用ASP.NET开发的Web服务。
● 通信信道 ——在改变通信信道方面，.NET Remoting非常灵活，WCF也不错，因为
它提供了相同的灵活性。WCF提供了用HTTP、TCP和IPC信道进行通信的多条信
道。也可以创建使用不同传输协议的自定义信道。
● 安全结构 ——为了实现独立于平台的Web服务，必须使用标准化的安全环境。所
提出的标准用WSE 3.0实现，这在WCF中被继承下来。
● 可扩展性 ——.NET Remoting有丰富的扩展功能。它不仅能创建自定义信道、格式
化程序和代理，还能将功能注入客户端和服务器上的消息流。WCF提供了类似的
可扩展性。但是，WCF的扩展性用SOAP标题创建。
最终目标是通过进程或不同的系统、通过本地网络或通过Internet收发客户端和服务
之间的消息。如果需要以独立于平台的方式尽快收发消息，就应这么做。在远距离视图
上，服务提供了一个端点，它用协定、绑定和地址来描述。协定定义了服务提供的操作，
绑定给出了协议和编码信息，地址是服务的位置。客户端需要一个兼容的端点来访问服
务。
图44-1显示了参与WCF通信的组件。
图44-1
客户端调用代理上的一个方法。代理提供了服务定义的方法，但把方法调用转换为一
条消息，并把该消息传输到信道上。信道有一个客户端部分和一个服务器端部分，它们通
过一个网络协议来通信。在信道上，把消息传递给调度程序，调度程序再把消息转换为用
服务调用的方法调用。
WCF支持几个通信协议。为了进行独立于平台的通信，需要支持Web服务标准。要
在.NET应用程序之间通信，可以使用较快的通信协议，其系统开销较小。
第42章描述了HTTP上的通信使用REST编程样式，用JSON格式传递对象，还用
Swagger描述了服务API。在WCF中，还有几个重要的技术：SOAP是一个独立于平台的协
议，它是几个Web服务规范的基础，支持安全性、事务和可靠性。WSDL（Web Services
Description Language, Web服务描述语言）提供了描述服务的元数据。
44.1.1 SOAP
为了进行独立于平台的通信，可以使用SOAP协议，它得到WCF的直接支持。SOAP
最初是Simple Object Access Protocol的缩写，但自SOAP 1.2以来，就不再是这样了。
SOAP不再是一个对象访问协议，因为可以发送用XML架构定义的消息。现在它不是这个
缩写词了，SOAP就是SOAP。
服务从客户端中接收SOAP消息，并返回一条SOAP响应消息。SOAP消息包含信封，
信封包含标题和正文。
          UEFA
          2015-07-28T22:00:00
          0
          Athens
          2015-07-28T20:00:00
          Panathinaikos-Club Brugge
标题是可选的，可以包含寻址、安全性和事务信息。正文包含消息数据。
44.1.2 WSDL
WSDL（Web Services Description Language, Web服务描述语言）文档描述了服务的操
作和消息。WSDL定义了服务的元数据，这些元数据可用于为客户端应用程序创建代理。
WSDL包含如下信息：
● 消息的类型——用XML架构描述。
● 从服务中收发的消息——消息的各部分是用XML架构定义的类型。
● 端口类型——映射服务协定，列出了用服务协定定义的操作。操作包含消息，例如
与请求和响应序列一起使用的输入和输出消息。
● 绑定信息——包含用端口类型列出的操作并定义使用的SOAP变体。
● 服务信息——把端口类型映射到端点地址。
  注意： 在WCF中，WSDL信息由MEX（Metedata Exchange，元数据交换）端
点提供。
44.2 创建简单的服务和客户端
在详细介绍WCF之前，首先看一个简单的服务。该服务用于预订会议室。
要存储会议室预订信息，应使用一个简单的SQL 
Server数据库和RoomReservations
表。可以使用Entity Framework Migrations创建这个数据库和示例应用程序。
下面是创建服务和客户端的步骤：
（1）创建服务和数据协定。
（2）使用Entity Framework Core创建访问数据库的库。
（3）实现服务。
（4）使用WCF服务宿主（Service Host）和WCF测试客户端（Test Client）。
（5）创建定制的服务宿主。
（6）使用元数据创建客户应用程序。
（7）使用共享的协定创建客户应用程序。
（8）配置诊断设置。
44.2.1 定义服务和数据协定
首先，创建一个新的解决方案RoomReservation，在其中添加一个新的类库项目，命
名为RoomReservationContracts。
RoomReservationContracts库的示例代码使用如下依赖项和名称空间：
依赖项
    System.ComponentModel.DataAnnotations
    System.Runtime.Serialization
    System.ServiceModel
名称空间
    System
    System.Collections.Generic
    System.ComponentModel
    System.ComponentModel.DataAnnotations
    System.Runtime.CompilerServices
    System.Runtime.Serialization
    System.ServiceModel
创建一个新类RoomReservation。这个类包含属性Id、RoomName、StartTime、
EndTime、Contact和Text来定义数据库中需要的数据，并在网络中传送。要通过WCF服务
发送数据，应通过DataContract和DataMember特性对该类进行注解。
System.ComponentModel.DataAnnotations名称空间中的StringLength属性不仅可用于验证用
户输入，还可以在创建数据库表时定义列的模式（代码文件
RoomReservation/RoomReservationContracts/RoomReservation.cs）。
      using System;
      using System.Collections.Generic;
      using System.ComponentModel;
      using System.ComponentModel.DataAnnotations;
      using System.Runtime.CompilerServices;
      using System.Runtime.Serialization;
      namespace Wrox.ProCSharp.WCF.Contracts
      {
        [DataContract]
        public class RoomReservation : INotifyPropertyChanged
        {
          private int _id;
          [DataMember]
          public int Id
          {
          get { return _id; }
          set { SetProperty(ref _id, value); }
          }
          private string _roomName;
          [DataMember]
          [StringLength(30)]
          public string RoomName
          {
          get { return _roomName; }
          set { SetProperty(ref _roomName, value); }
          }
          private DateTime _startTime;
          [DataMember]
          public DateTime StartTime
          {
          get { return _startTime; }
          set { SetProperty(ref _startTime, value); }
          }
          private DateTime _endTime;
          [DataMember]
          public DateTime EndTime
          {
          get { return _endTime; }
          set { SetProperty(ref _endTime, value); }
          }
          private string _contact;
          [DataMember]
          [StringLength(30)]
          public string Contact
          {
          get { return _contact; }
          set { SetProperty(ref _contact, value); }
          }
          private string _text;
          [DataMember]
          [StringLength(50)]
          public string Text
          {
          get { return _text; }
          set { SetProperty(ref _text, value); }
          }
          protected virtual void OnNotifyPropertyChanged(string propertyName)
          {
          PropertyChanged? .Invoke(this,
          new PropertyChangedEventArgs(propertyName));
          }
          protected virtual void SetProperty(ref T item, T value,
          [CallerMemberName] string propertyName = null)
          {
          if (! EqualityComparer.Default.Equals(item, value))
          {
          item = value;
          OnNotifyPropertyChanged(propertyName);
          }
          }
          public event PropertyChangedEventHandler PropertyChanged;
        }
      }
接着创建服务协定，服务提供的操作可以通过接口来定义。IRoomService接口定义了
ReserveRoom和GetRoomReservations方法。服务协定用ServiceContract特性定义。由服务
定义的操作应用了OperationContract特性（代码文件
RoomReservation/RoomReservationContracts/IRoomService.cs）。
    using System;
    using System.ServiceModel;
    namespace Wrox.ProCSharp.WCF.Contracts
    {
      [ServiceContract(
        Namespace="http://www.cninnovation.com/RoomReservation/2016")]
      public interface IRoomService
      {
        [OperationContract]
        bool ReserveRoom(RoomReservation roomReservation);
        [OperationContract]
        RoomReservation[] GetRoomReservations(DateTime fromTime, DateTime toTime)
;
      }
    }
44.2.2 数据访问
接着，创建一个库RoomReservationData，通过Entity Framework 6.1来访问、读写数据
库中的预订信息。定义实体的类已经用RoomReservationContracts程序集定义好了，所以
需要引用这个程序集。另外还需要NuGet包Microsoft.EntityFrameworkCore和
Microsoft.EntityFrameworkCore.SqlServer。
RoomReservationData库的示例代码使用如下依赖项和名称空间：
依赖项
    Microsoft.EntityFrameworkCore
    Microsoft.EntityFrameworkCore.Commands
    Microsoft.EntityFrameworkCore.SqlServer
名称空间
    Microsoft.EntityFrameworkCore
    System
    System.Linq
    Wrox.ProCSharp.WCF.Contracts
现在可以创建RoomReservationContext类。这个类派生于基类DbContext，用作
ADO.NET 
Entity 
Framework的上下文，还定义了一个属性RoomReservations，返回
DbSet（代码文件
RoomReservation/RoomReservationData/RoomReservationContext.cs）。
    using Microsoft.EntityFrameworkCore;
    using Wrox.ProCSharp.WCF.Contracts;
    namespace Wrox.ProCSharp.WCF.Data
    {
      public class RoomReservationContext : DbContext
      {
        protected void override OnConfiguring(
        DbContextOptionsBuilder optionsBuilder)
        {
        optionsBuilder.UseSqlServer(@"server=(localdb)\mssqllocaldb; " +
          @"Database=RoomReservation; trusted_connection=true");
        }
        public DbSet RoomReservations { get; set; }
      }
    }
Entity 
Framework定义了OnConfiguring方法和可以配置数据上下文的DbContext。
UseSqlServer扩展方法（在NuGet包EntityFramework.MicrosoftSqlServer内定义）允许设置
数据库的连接字符串。
创建数据库的命令取决于是创建.NET 4.6类库还是.NET Core类库。对于.NET 4.6类
库，可以使用NuGet Package Manager Console创建数据库并应用以下命令。使用Add-
Migration命令，在项目中创建Migrations文件夹，其中的代码用于创建表
RoomReservation。Update-Database命令运用迁移并创建数据库。
    > Add-Migration InitRoomReservation
    > Update-Database
服务实现使用的功能用RoomReservationRepository类定义。ReserveRoom方法将一条
会议室预订记录写入数据库。GetReservations方法返回指定时间段的RoomReservation集合
（代码文件RoomReservation/RoomReservationData/RoomReservationRepository.cs）。
      using System;
      using System.Linq;
      using Wrox.ProCSharp.WCF.Contracts;
      namespace Wrox.ProCSharp.WCF.Data
      {
        public class RoomReservationRepository
        {
          public void ReserveRoom(RoomReservation roomReservation)
          {
          using (var data = new RoomReservationContext())
          {
            data.RoomReservations.Add(roomReservation);
            data.SaveChanges();
          }
          }
          public RoomReservation[] GetReservations(DateTime fromTime,
          DateTime toTime)
          {
          using (var data = new RoomReservationContext())
          {
            return (from r in data.RoomReservations
                    where r.StartTime > fromTime && r.EndTime < toTime
                    select r).ToArray();
          }
          }
        }
      }
  注意： ADO.NET Entity Framework详见第38章，包括用.NET Core项目配置
迁移。
44.2.3 服务的实现
现在开始实现服务。创建一个WCF服务库RoomReservationService。这个库默认包含
服务协定和服务实现。如果客户应用程序只使用元数据信息来创建访问服务的代理，则这
个模型是可用的。但是，如果客户端直接使用协定类型，则最好把协定放在一个独立的程
序集中，如本例所示。在第一个已完成的客户端，代理是通过元数据创建的。后面将介绍
如何创建客户端来共享协定程序集。把协定和实现分开是共享协定的一个准备工作。
RoomReservationService服务类实现了IRoomService接口。实现服务时，只需要调用
Room-ReservationData类的相应方法（代码文件
RoomReservation/RoomReservationService/RoomReservation-Service.cs）。
    using System;
    using System.ServiceModel;
    using Wrox.ProCSharp.WCF.Contracts;