        Sub-tag: 
            A string to prepend to the payload.
    ​
        Sub-tag: 
            A string to append to the payload.
其实到现在 sqlmap 中 Payload 的结构我们就非常清楚了
其中   来源于 boundaries.xml 中，而   来源于本身
xml/payloads/*.xml 中的  中。在本节中都有非常详细的描述了
### 针对布尔盲注的检测
在接下来的小节中，我们将会针对几种注入进行详细分析，我们的分析依据主要是 sqlmap 设定的 Payload
的数据模型和其本身的代码。本节先针对布尔盲注进行一些详细分析。
在分析之前，我们先看一个详细的 Payload:
        PostgreSQL OR boolean-based blind - WHERE or HAVING clause (CAST)
        1
        3
        3
        1
        2
        OR (SELECT (CASE WHEN ([INFERENCE]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL
            OR (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL
            OR (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL
            PostgreSQL
根据上一节介绍的子标签的特性，我们可以大致观察这个  会至少发送两个 Payload：第一个为 request 标签中的 payload
第二个为 response 标签中的 comparison 中的 Payload。
当然我们很容易想到，针对布尔盲注的检测实际上只需要检测 request.payload 和 response.comparison
这两个请求，只要这两个请求页面不相同，就可以判定是存在问题的。可是事实真的如此吗？结果当然并没有这么简单。
我们首先定义 request.payload 中的的请求为正请求 Positive，对应 response.comparison中的请求为负请求
Negative，在 sqlmap 中原处理如下：
在代码批注中我们进行详细的解释，为了让大家看得更清楚，我们把代码转变为流程图：
其中最容易被遗忘的可能并不是正负请求的对比，而是正请求与模版页面的对比，负请求与错误请求的对比和错误请求与模版页面的对比，因为广泛存在一种情况是类似文件包含模式的情况，不同的合理输入的结果有大概率不相同，且每一次输入的结果如果报错都会跳转到某一个默认页面（存在默认参数），这种情况仅仅用正负请求来区分页面不同是完全不够用的，还需要各种情形与模版页面的比较来确定。
### 针对 GREP 型（报错注入）
针对报错注入其实非常好识别，在报错注入检测的过程中，我们会发现他的 response 子标签中，包含着是 grep 子标签：
        MySQL &gt;= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)
        2
        5
        1
        1,2,3,9
        1
        AND JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]')) USING utf8)))
            AND JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')) USING utf8)))
            [DELIMITER_START](?P&lt;result&gt;.*?)[DELIMITER_STOP]
            MySQL
            &gt;= 5.7.8
我们发现子标签 grep 中是正则表达式，可以直接从整个请求中通过 grep 中的正则提取出对应的内容，如果成功提取出了对应内容，则说明该参数可以进行注入。
在具体代码中，其实非常直观可以看到：
再 sqlmap 的实现中其实并不是仅仅检查页面内容就足够的，除了页面内容之外，检查如下项：
  1. HTTP 的错误页面
  2. Headers 中的内容
  3. 重定向信息
### 针对 TIME 型（时间盲注，HeavilyQuery）
当然时间盲注我们可以很容易猜到应该怎么处理：如果发出了请求导致延迟了 X 秒，并且响应延迟的时间是我们预期的时间，那么就可以判定这个参数是一个时间注入点。
但是仅仅是这样就可以了嘛？当然我们需要了解的是 sqlmap 如何设置这个 X 作为时间点（请看下面这个函数，位于 agent.queryPage 中）：
我们发现，它里面有一个数学概念：[标准差](http://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E6%25A8%2599%25E6%25BA%2596%25E5%25B7%25AE)
>
> 简单来说，标准差是一组数值自平均值分散开来的程度的一种测量观念。一个较大的标准差，代表大部分的数值和其平均值之间差异较大；一个较小的标准差，代表这些数值较接近平均值。例如，两组数的集合{0,
> 5, 9, 14}和{5, 6, 8, 9}其平均值都是7，但第二个集合具有较小的标准差。述“相差k个标准差”，即在 X̄ ± kS
> 的样本（Sample）范围内考量。标准差可以当作不确定性的一种测量。例如在物理科学中，做重复性测量时，测量数值集合的标准差代表这些测量的精确度。当要决定测量值是否符合预测值，测量值的标准差占有决定性重要角色：如果测量平均值与预测值相差太远（同时与标准差数值做比较），则认为测量值与预测值互相矛盾。这很容易理解，因为如果测量值都落在一定数值范围之外，可以合理推论预测值是否正确。
根据注释和批注中的解释，我们发现我们需要设定一个最小 SLEEPTIME 应该至少大于 样本内平均响应时间 + 7 * 样本标准差，这样就可以保证过滤掉
99.99% 的无延迟请求。
当然除了这一点，我们还发现
    delta = threadData.lastQueryDuration - conf.timeSec
    if Backend.getIdentifiedDbms() in (DBMS.MYSQL,):  # MySQL's SLEEP(X) lasts 0.05 seconds shorter on average
        delta += 0.05
    return delta >= 0
这一段代码作为 mysql 的 Patch 存在 # MySQL’s SLEEP(X) lasts 0.05 seconds shorter on
average。
如果我们要自己实现时间盲注的检测的话，这一点也是必须注意和实现的。
### 针对 UNION 型（UNION Query）
UNION 注入可以说是 sqlmap 中最复杂的了，同时也是最经典的注入情形。
其实关于 UNION 注入的检测，和我们一开始学习 SQL 注入的方法是一样的，猜解列数，猜解输出点在列中位置。实际在 sqlmap
中也是按照这个来进行漏洞检测的，具体的测试方法位于：
跟入 unionTest() 中我们发现如下操作
    def unionTest(comment, place, parameter, value, prefix, suffix):
        """
        This method tests if the target URL is affected by an union
        SQL injection vulnerability. The test is done up to 3*50 times
        """
    ​
        if conf.direct:
            return
    ​
        kb.technique = PAYLOAD.TECHNIQUE.UNION
        validPayload, vector = _unionTestByCharBruteforce(comment, place, parameter, value, prefix, suffix)
    ​
        if validPayload:
            validPayload = agent.removePayloadDelimiters(validPayload)
    ​
        return validPayload, vector
最核心的逻辑位于 _unionTestByCharBruteforce 中，继续跟入，我们发现其检测的大致逻辑如下：
别急，我们一步一步来分析！
### 猜列数
我相信做过渗透测试的读者基本对这个词都非常非常熟悉，如果有疑问或者不清楚的请自行百度，笔者再次不再赘述关于 SQL 注入基本流程的部分。
为什么要把一件这么简单的事情单独拿出来说呢？当然这预示着 sqlmap
并不是非常简单的在处理这一件事情，因为作为一个渗透测试人员，当然可以很容易靠肉眼分辨出很多事情，但是这些事情在计算机看来却并不是那么容易可以判断的：
  1. 使用 ORDER BY 查询，直接通过与模版页面的比较来获取列数。
  2. 当 ORDER BY 失效的时候，使用多次 UNION SELECT 不同列数，获取多个 Ratio，通过区分 Ratio 来区分哪一个是正确的列数。
实际在使用的过程中，ORDER BY 的核心逻辑如下，关于其中页面比较技术我们就不赘述了，不过值得一提的是 sqlmap
在猜列数的时候，使用的是二分法（笔者看了一下，二分法这部分这似乎是七年前的代码）。
除此之外呢，如果 ORDER BY 失效，将会计算至少五个（从 lowerCount 到 upperCount）Payload 为 UNION SELECT
(NULL,) * [COUNT]，的请求，这些请求的对应 RATIO（与模版页面相似度）会汇总存储在 ratios 中，同时 items 中存储 列数 和
ratio 形成的 tuple，经过一系列的算法，尽可能寻找出“与众不同（正确猜到列数）”的页面。具体的算法与批注如下：
我们发现，上面代码表达的核心思想就是 利用与模版页面比较的内容相似度寻找最最不同的那一个请求。
### 定位输出点
假如一切顺利，我们通过上面的步骤成功找到了列数，接下来就应该寻找输出点，当然输出点的寻找也是需要额外讨论的。其实基本逻辑很容易对不对？我们只需要将
UNION SELECT NULL, NULL, NULL, NULL, … 中的各种 NULL
依次替换，然后在结果中寻找被我们插入的随机的字符串，就可以很容易定位到输入出点的位置。实际上这一部分的确认逻辑是位于下图中的函数的
_unionConfirm
其中主要的逻辑是一个叫 _unionPosition
的函数，在这个函数中，负责定位输出点的位置，使用的基本方法就是我们在开头提到方法，受限于篇幅，我们就不再展开叙述了。
## 0x03 结束语
其实按笔者原计划，本系列文章并没有结束，因为还有关于 sqlmap 中其他技术没有介绍：“数据持久化”，“action() – Exploit
技术”，“常见漏洞利用分析（udf，反弹 shell 等）”。但是由于内容是在太过庞杂，笔者计划暂且搁置一下，实际上现有的文章已经足够把 sqlmap 的
SQL 注入检测最核心的也是最有意义的自动化逻辑说清楚了，我想读读者读完之后肯定会有自己的收获。
## 0x04 再见