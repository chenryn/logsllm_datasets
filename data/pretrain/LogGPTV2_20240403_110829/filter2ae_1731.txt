# 【技术分享】攻击UEFI运行时服务和Linux

#### 译文声明
本文为翻译文章，原文来源：frizk.net。译文仅供参考，具体内容及含义请以原文为准。

**翻译：胖胖秦**
**预估稿费：140 RMB**
**投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿**

### 前言
具有物理访问权限的攻击者能够在许多完全修补且支持DMA（直接内存访问）的计算机上攻击固件。一旦在UEFI/EFI运行时服务中执行代码，就可以使用脚本来控制正在运行的Linux系统。

从Linux 4.8内核开始，内核的物理内存地址实现了完全随机化。如果计算机拥有足够大的内存，内核很有可能被随机化到4GB以上的地址空间。这意味着DMA硬件攻击仅能针对32位地址（即4GB），如PCILeech，不能直接攻击Linux内核。然而，由于EFI运行时服务通常位于4GB以下，因此它们在高内存EFI引导系统上提供了一种进入Linux的方法。

### 演示视频
请参阅下方视频，了解攻击的具体过程。

### 什么是EFI运行时服务？
UEFI（统一可扩展固件接口）是现代BIOS的替代品，负责检测硬件并配置设备，以便将控制权移交给操作系统。UEFI的两个主要组件是引导服务和运行时服务。操作系统在启动初期调用`ExitBootServices`后，引导服务便不再使用。

即使在操作系统加载并运行后，EFI运行时服务仍保持活动状态，向操作系统提供多种功能。UEFI规范定义了一组固定的运行时服务函数，这些函数的位置通过运行时服务表传递给操作系统。每个函数的物理地址为64位/8字节，并以小端格式存储在内存中。但目前所有系统的内存地址都在32位范围内，且这些地址似乎是固定的，不会在重启之间发生随机化。

Linux随后将这些地址映射到虚拟地址空间，并用相应的虚拟地址覆盖表中的初始地址。下图展示了原始和被Linux修改后的EFI运行时服务表：

```
EFI Runtime服务表
| 原始地址 | Linux修改后的地址 |
```

### 攻击方法
如果我们使用DMA将自己的代码覆盖EFI运行时服务表，或者修改EFI运行时服务表的指针指向我们插入的攻击代码，会发生什么？

当操作系统调用EFI运行时服务时，会在目标系统上执行我们的代码。例如，当读取一个EFI变量时，代码将在低内存页面以1:1映射的特殊上下文中执行。此时可以访问Linux内核，并在ring0/supervisor模式下执行。

然而，并非所有Linux内核函数都能成功调用，因为Linux已为运行时服务设置了特殊的EFI上下文。为此，可以在Linux内核中植入一个“随机”的钩子函数。当“正常”内核线程触发该钩子时，被hook的内核代码将会被执行。

### 目标系统
测试已在一台配备8GB内存的联想T430和一台配备32GB内存的Intel NUC Skull Canyon上进行。T430通过ExpressCard插槽获取DMA访问权限，而在NUC上，则需在“BIOS”中将Thunderbolt模式设置为“Legacy”，以允许通过Thunderbolt3/USB-C进行DMA访问。

对于T430，只需插入PCILeech设备并运行`pcileech.exe kmdload -kmd linux_x64_efi`命令即可。PCILeech会搜索EFI运行时服务表并hook它，然后要求用户执行某些操作来触发已hook的服务。

对于NUC，由于PCILeech在遇到不可读内存时会失败，而运行时服务表的地址是静态的，在重启之间不会改变。最简单的方法是通过在同一系统或类似系统上以EFI模式用USB引导启动Linux，然后运行`cat /sys/firmware/efi/runtime`查看运行时服务表的物理地址。假设地址为0x3b294e18，可以运行以下命令：
```
pcileech.exe kmdload -kmd linux_x64_efi -min 0x3b294000 -max 0x3b295000
```

### 备注
如果你也想尝试，可以查看GitHub上的PCILeech项目。尽管漏洞总是存在的，但攻击并非100%稳定。有时，搜索运行时服务表会失败，有时很难触发对运行时服务表的调用，有时目标系统也会崩溃。

### 结论
在Linux 4.8及以上版本的操作系统上，如Ubuntu 16.10，由于可以利用PCILeech，因此不再是完全安全的。即使你的笔记本电脑可能没有ExpressCard插槽，但如果打开后盖，可能会发现mini-PCIe或M.2插槽。

操作系统将重要数据放在高于32-bit/4GB的地址上并不能阻止DMA攻击。32位硬件（如PCILeech）可以攻击低于4GB的代码和数据。其他恶意硬件也可能攻击高达64位地址空间。

为了保护自身和固件（如运行时服务）免受恶意设备的攻击，操作系统应启用VT-d。