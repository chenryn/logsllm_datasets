# New Constructions and Practical Applications for Private Stream Searching (Extended Abstract)

## Authors
- John Bethencourt, Carnegie Mellon University, PI:EMAIL
- Dawn Song, Carnegie Mellon University, PI:EMAIL
- Brent Waters, SRI International, PI:EMAIL

## Abstract
A system for private stream searching enables a client to retrieve documents that match specific search criteria from a remote server, while ensuring the server remains oblivious to the search criteria. This extended abstract outlines a new scheme for this problem and provides an experimental analysis of its scalability. The new scheme is highly efficient in practice. We demonstrate its practical applicability by considering its performance in the demanding scenario of providing a privacy-preserving version of the Google News Alerts service.

## 1. Introduction
The Internet offers a wealth of information through various sources, including conventional websites, time-sensitive web pages like news articles and blog posts, newsgroup posts, online auctions, and web-based forums or classified ads. To utilize these resources, we need search mechanisms that distill relevant information for each user. Typically, such mechanisms require users to provide a server with a query, such as a textual keyword, which the server compares against a large dataset. However, this model becomes problematic when users want to hide their search criteria, either for commercial or personal privacy reasons. Privacy concerns were highlighted in 2005 when the U.S. Department of Justice subpoenaed search term records from popular web search engines.

Trivially, search privacy can be achieved by downloading the entire remote resource to the client machine and performing the search locally. However, this is often infeasible due to the large size of the data, limited bandwidth, or the unwillingness of the remote entity to disclose the entire resource.

Many information sources can be considered streams of documents, continuously generated and processed one-by-one by remote servers. In such cases, it would be advantageous to allow clients to establish persistent searches with the servers, where data can be efficiently processed. For example, the Google News Alerts system emails users whenever web news articles crawled by Google match their registered search keywords.

In this extended abstract, we present initial results on an efficient new cryptographic system that allows such services while maintaining the secrecy of the search criteria. The new scheme improves both the asymptotic complexity and practical performance over the previous best solution, making realistic applications feasible. In Section 4, we demonstrate this through the concrete example of Google News Alerts, providing a description of how to apply our scheme in that context along with an analysis based on actual application data. A full treatment of the proposed scheme, including detailed algorithms, complexity and correctness analysis, security proofs, and several extensions, is available in a technical report [2].

### Related Work
Several problems are related to private searching, including searching on encrypted data, single-database private information retrieval (PIR), and oblivious transfer. The most closely related problem is PIR. The recent work of Ostrovsky and Skeith [10] was the first to directly address the private searching problem, requiring communication dependent on the number of matching documents. However, their scheme has steep resource requirements, limiting its practical application. Additionally, their scheme requires keywords to be selected from a public, unencrypted dictionary, which may reveal too much information about the client's interests.

## 2. Problem Definition
In a private searching scheme, a client creates an encrypted query for a set of keywords and sends it to the server. The server then runs a search algorithm on a stream of files, keeping an encrypted buffer storing information about files that match the keywords. The encrypted buffer is periodically returned to the client, who reconstructs the matching files. The key aspect is that the server conducts the search without knowing the client's keywords. Formally, a private stream search scheme consists of three algorithms:

- **QueryConstruction (λ, ε, m, K)**: The client prepares an encrypted list of keywords. It takes a security parameter λ, a correctness parameter ε, an upper bound on the number of matching files m, and an unencrypted set of strings K. It outputs a public key Kpub, a private key Kpriv, and an encrypted query Q.
- **StreamSearch (Kpub, Q, f1, ..., ft, W1, ..., Wt)**: The server performs a private keyword search on a stream of files. It takes an encrypted query Q, a public key Kpub, and a stream of files f1, ..., ft with corresponding sets of keywords W1, ..., Wt. It produces an encrypted results buffer R.
- **FileReconstruction (Kpriv, R)**: The client extracts the set of matching files from the returned encrypted buffer using the private key Kpriv.

## 3. New Construction (Outline)
Our construction is built around the homomorphism of the Paillier cryptosystem, which allows adding plaintexts by multiplying ciphertexts. The QueryConstruction algorithm produces an encrypted query Q by initializing an array of ciphertexts and replacing specific elements with encryptions of 1. The server uses Q to process the file stream, updating the results buffer with linear combinations of matching files. The FileReconstruction algorithm decrypts the buffer and solves a system of linear equations to recover the matching files.

## 4. Practical Performance Analysis
We consider the case of creating a private version of Google News Alerts using the new construction. Google's web crawlers monitor approximately 4,500 news websites. We analyze four aspects of the resources necessary for a private search: the size of the query (sq), the size of the storage buffers (sb), the time for the server to process a single file (tp), and the time for the client to decrypt and recover the original matching files (tr).

### 4.1. Query Space
Assuming a 1024-bit Paillier key, the encrypted query Q is 256|Q| bytes. Smaller |Q| increases the spurious match rate. We derived a formula for the probability r of a non-matching file spuriously matching the query. Table 1 shows the false positive rates for different query sizes. Additional keywords increase the query size.

| Spurious Match Rate (r) | Original Query Size (sq) | Optimized Query Size (sq) |
|--------------------------|---------------------------|---------------------------|
| 0.1                      | 1.3 MB                    | 0.3 MB                    |
| 0.01                     | 13.1 MB                   | 3.6 MB                    |
| 0.001                    | 132.8 MB                  | 36.6 MB                   |

This analysis demonstrates the practicality of our scheme in real-world applications.

---

**Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06)**
**1081-6011/06 $20.00 © 2006 IEEE**
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 02:47:12 UTC from IEEE Xplore. Restrictions apply.**