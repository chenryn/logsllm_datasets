# Aurasium: Practical Policy Enforcement for Android Applications

## Authors
- **Rubin Xu**  
  Computer Laboratory, University of Cambridge, Cambridge, UK  
  Email: [rubin.xu@cl.cam.ac.uk](mailto:rubin.xu@cl.cam.ac.uk)
- **Hassen Sa√Ødi**  
  Computer Science Laboratory, SRI International, Menlo Park, USA  
  Email: [hassen.saidi@sri.com](mailto:hassen.saidi@sri.com)
- **Ross J. Anderson**  
  Computer Laboratory, University of Cambridge, Cambridge, UK  
  Email: [ross.anderson@cl.cam.ac.uk](mailto:ross.anderson@cl.cam.ac.uk)

## Abstract
The increasing popularity of Google's mobile platform, Android, has made it a prime target for the latest surge in mobile malware. Most research on enhancing the platform's security and privacy controls requires extensive modifications to the operating system, which poses significant usability issues and hinders widespread adoption. We present Aurasium, a novel solution that enhances security and privacy without modifying the Android OS. Aurasium automatically repackages arbitrary applications to attach user-level sandboxing and policy enforcement code, closely monitoring the application's behavior for security and privacy violations such as attempts to retrieve sensitive information, send SMS messages to premium numbers, or access malicious IP addresses. Aurasium can also detect and prevent privilege escalation attacks. Experiments show that Aurasium can be applied to a large sample of benign and malicious applications with nearly 100% success, without significant performance or space overhead. Aurasium has been tested on three versions of the Android OS and is freely available.

## 1. Introduction
Google's Android OS is the fastest-growing mobile operating system globally. As of July 2011, Nielsen reported that Android held 38% of the U.S. smartphone market share, which increased to 43% by August. Among those who purchased their phones in June, July, or August, Android had a 56% market share. This rapid growth, combined with the openness of its application ecosystem, has attracted malicious entities to aggressively target Android. According to a report by McAfee, attacks on Android by malware writers increased by 76% over three months, making it the most targeted mobile operating system during that period. Initially, much of the Android malware consisted of trojans masquerading as legitimate applications, leaking personal information or sending SMS messages to premium numbers. Recent malware samples indicate an escalation in capability and stealth, with attempts to gain root access through privilege escalation to establish a permanent presence on the device or bypass Android permission checks.

Efforts to combat malware and secure Android devices have focused on three main directions:
1. **Static and Dynamic Analysis:** Analyzing application code to detect malicious activities before installation.
2. **OS Modification:** Modifying the Android OS to insert monitoring modules at key interfaces to intercept malicious activity.
3. **Virtualization:** Implementing rigorous separation of domains, from lightweight isolation of applications to running multiple instances of Android using a hypervisor.

These approaches face two fundamental and intertwined problems:
1. **Definition of Malicious Behavior:** Determining what constitutes malicious behavior in an Android application is challenging. While install-time permissions provide users with control over their privacy, they are often coarse-grained. For example, an application might request access to the Internet, but it is unclear what connections it may establish with potentially malicious servers.
2. **Extensive OS Modification:** Enhancing the platform's security and privacy controls based on policy extensions typically requires extensive modifications to the operating system, leading to significant usability issues and hindering widespread adoption. The fragmentation of Android versions and hardware configurations further complicates this issue.

### Our Approach
Aurasium addresses these challenges by providing a simple, effective, robust, and deployable technology. Conceptually, Aurasium acts as an application-hardening service: a user obtains an Android application from a potentially untrusted source, but instead of installing it directly, the application is processed through Aurasium to create a hardened version. The user then installs this hardened version, assured that all interactions are closely monitored for malicious activities, and policies protecting the user's privacy and security are enforced.

Aurasium does not modify the Android OS; instead, it enforces flexible security and privacy policies by repackaging applications to attach sandboxing code. The repackaged APK can be installed on the user's phone and will enforce defined policies at runtime without altering the original application's functionalities. Aurasium leverages Android's mixed Java and native code execution architecture to achieve robust sandboxing, introducing libc interposition code to the target application and wrapping around the Dalvik virtual machine (VM).

Aurasium can interpose almost all types of interactions between the application and the OS, enabling more fine-grained policy enforcement than Android's built-in permission system. For example, when an application attempts to access a remote site, the IP of the remote server is checked against a blacklist. When an application tries to send an SMS message, Aurasium checks if the number is a premium number. Aurasium also monitors I/O operations such as read and write. We evaluated Aurasium against a large number of real-world Android applications and achieved over 99% success rate. Repackaging an arbitrary application using Aurasium is fast, requiring an average of 10 seconds.

### Main Contributions
- **Automated Repackaging System:** We built an automated system to repackage arbitrary APKs, where arbitrary policies protecting privacy and ensuring security can be enforced.
- **Advanced Policies:** We developed a set of policies that leverage advances in malware intelligence, such as IP blacklisting.
- **No Changes to Android Architecture:** Aurasium protects users from malicious applications without modifying the underlying Android architecture, making it widely deployable.
- **Robust and Portable Technology:** Aurasium is robust, tested on three versions of Android, and has low memory and runtime overhead. It is more portable across different OS versions compared to other approaches.

## 2. Aurasium

### 2.1. Android Overview
Android, the open-source mobile operating system developed by the Open Handset Alliance led by Google, is gaining increasing popularity and market share among smartphones. Built on top of a Linux 2.6 kernel, Android introduces a unique application architecture designed to ensure performance, security, and application portability. Installed applications are rigorously compartmentalized through traditional Linux permissions. Additional permission labels are assigned during install time to control the application's access to security and privacy-sensitive functionalities, forming a mandatory access-control scheme.

Android uses an inter-process communication (IPC) mechanism called Binder, extensively used for interactions between applications and for application-OS interfaces. Binder is established by a kernel driver and exposed as a special device node. Logically, the IPC works on the principle of thread migration, with Binder handling argument marshalling, object references, and IPC call recursions.

Android applications are primarily implemented in Java, with compiled class files converted into Dalvik bytecode, running on the proprietary register-based Dalvik VM. Applications are tightly coupled with a rich Android framework library and can include compiled native code as standalone Linux shared object (.so) files. The interaction between Java and native code is defined by the Java Native Interface (JNI) specification and supported by Android's Native Development Kit (NDK). In practice, only a small number of applications use native code for performance-critical tasks.

### 2.2. System Design
Aurasium consists of two major components:
- **Repackaging Mechanism:** Inserts instrumentation code into arbitrary Android applications.
- **Monitoring Code:** Intercepts an application's interactions with the system and enforces various security policies.

#### 2.2.1. Application-OS Interaction
Under the hood, some Android OS APIs are handled by the kernel, while others are implemented at user-mode system services and callable via IPC methods. Applications interact with the framework through well-documented interfaces, which encapsulate the complexity. Figure 1 shows the layers of the framework library in individual applications' address spaces.

![Android Application and Framework Structure](figure1.png)

The top level of the framework is written in Java and interacts with applications. To realize required operations, it hands over requests to the low-level part of the framework implemented in native code. The native layer consists of shared objects that perform tasks such as communicating with the Dalvik VM or establishing IPC mechanisms. These shared objects rely on lower-level shared libraries, including Bionic libc, which initiates system calls into the kernel.

For example, if an application wants to download a file, it can use HttpURLConnection or low-level Socket access. Regardless of the API, the request ultimately lands on the connect() method in the OSNetworkSystem Java class, which transfers control to libnativehelper.so, which in turn delegates the request to the connect() method in libc.so. The socket is created by libc issuing a system call into the Linux kernel.

Regardless of the complexity of the upper-layer framework, it always goes through appropriate functions in Bionic libc to interact with the OS, providing a reliable choke point for examining and modifying interactions.

#### 2.2.2. Efficient Interposition
Shared objects in Android are relocatable ELF files mapped into the process's address space when loaded. All shared objects are dynamically linked against Bionic libc. Since libc can be loaded into any memory address, dynamic linking is used to resolve the address of unknown symbols at load time. This allows Aurasium to interpose function calls from the framework into libc, enabling efficient and reliable policy enforcement.

## 3. Evaluation
We evaluate Aurasium with respect to its robustness in repackaging applications and the overhead introduced by the repackaging process. Our experiments show that Aurasium can be applied to a large number of real-world Android applications with a near 100% success rate, without significant performance or space overhead.

## 4. Threat Models and Mitigation
This section describes potential threat models against Aurasium and the mitigation techniques we have implemented to protect against them.

## 5. Related Work
We discuss related work in the field of Android security and how Aurasium compares to existing solutions.

## 6. Conclusions
In conclusion, Aurasium provides a practical and effective solution for enforcing security and privacy policies on Android applications without modifying the underlying OS. It is a robust and portable technology that can be widely deployed to protect users from malicious applications.