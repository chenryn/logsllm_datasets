>
> server for us.
>
> Scripted Web Delivery: This attack generates a payload and gives us a
> one- liner command to execute code on a system using PowerShell,
> BITSAdmin, Python, and so on.
>
> Signed Applet Attack: This package sets up a self-signed Java applet.
> This package will spawn the specified listener if the user gives the
> applet permission to run.
>
> Smart Applet Attack: The smart applet detects the Java version and
> uses an embedded exploit to disable the Java security sandbox. This
> attack is cross- platform and cross-browser.
>
> System Profiler: The system profiler is a client-side reconnaissance
> tool. It finds common applications (with version numbers) used by the
> user and reports them back to us.
>
> Spear Phishing:
>
> This option can be used to launch targeted attacks while carrying out
> a red team activity. We can set the receivers, phishing templates, and
> SMTP servers and click Send to perform the attack:
>
> ![](media/image598.jpeg)
>
> ![](media/image599.jpeg)Let\'s look at an example of payload
> generation and execution. We will use the Payload Generator. Go to
> Attack, click on Packages, and then click on Payload Generator, as
> shown in the following screenshot:
>
> After this, a new window will open. Here, we need to choose the
> listener we wish to receive our connection on and the output format of
> the payload. We will choose PowerShell Command and click Generate:
>
> ![](media/image600.jpeg)
![](media/image601.jpeg)A new window will open asking us to choose the
output folder and the payload will be generated and copied into a .txt
file:
> If we open the .txt file, we will see a base64 encoded PowerShell
> Command, as shown in the following screenshot:
>
> ![](media/image602.jpeg)
>
> Once we execute this code, we will receive a connection on our server,
> as shown in the following screenshot:
>
> ![](media/image603.jpeg)
# Beacons
> Beacons is a payload used by Cobalt Strike. It is flexible and
> supports both asynchronous and interactive modes of communication.The
> asynchronous mode can be quite slow. In this mode, the beacon calls
> home every once in a while, receives a list of the tasks that are
> assigned to it, downloads them, and goes back to sleep. This helps in
> avoiding detection on the remote system. In interactive mode, however,
> everything happens in real time. Beacons have malleable network
> indicators, which means they have a **Malleable C2** profile. This is
> responsible for transporting the data, transforming it for storage,
> and reinterpreting it backwards. We will learn more about this in the
> later chapters of this book. For now, let\'s look at the different
> features a beacon has and how to use them.
Cobalt Strike offers two ways to access the beacons:
> The beacon menu The beacon console
# The beacon menu
> The beacon menu can be accessed by right-clicking on the host. The
> Access menu contains the options shown as follows:
>
> ![](media/image604.jpeg)
>
> Dump Hashes: This will run the hashdump command on the beacon as shown
> below, which dumps the system\'s **NT LAN Manager** (**NTLM**) hashes.
> It requires elevated privileges:
>
> ![](media/image605.jpeg)
>
> Elevate: Cobalt Strike has a few inbuilt exploits for privilege
> escalation that we can use to gain admin rights. We choose Access \|
> Elevate from the menu, as shown in the following screenshot:
>
> ![](media/image606.jpeg)
>
> Clicking on this option will open a new window where we will be asked
> to choose an existing listener or to create a new one and choose the
> exploit we want to run:
>
> ![](media/image607.jpeg)
>
> Once we click Launch, we will see the following command being run in
> the console. The exploit will be executed, shown as follows:
>
> ![](media/image608.jpeg)
>
> If the exploit is successful, a new elevated session will be created:
>
> ![](media/image609.jpeg)
>
> Golden Ticket: This option has multiple dependencies and may not work
> all the time. This is because it requires the user we want to forge
> the ticket for, the domain name, the domain\'s **security identifier**
> (**SID**), and the NTLM hash of the **Kerberos ticket-granting
> ticket** (**KRBTGT**) user on a
>
> **Domain Controller** (**DC**). These are not always available. If we
> do have this information, however, the Golden Ticket option would
> basically generate a golden ticket and inject it in our current
> session to gain elevated privileges.
>
> Make Token: This option allows us to pass credentials to Cobalt
> Strike, which will generate a token for us.
>
> Run Mimikatz: Cobalt Strike beacon is integrated with Mimikatz. This
> means we can use Mimikatz features from the beacon itself. We can use
> this option by right-clicking on the host and then clicking on Access
> \| Run Mimikatz:
>
> ![](media/image610.jpeg)
>
> This will dump the hashes, shown as follows:
>
> ![](media/image611.jpeg)
>
> ![](media/image612.jpeg)The dumped credentials can be viewed by going
> to the View menu and choosing the Credentials option:
>
> This will open a new tab where all the dumped credentials can be
> viewed:
>
> ![](media/image613.jpeg)
>
> Spawn As: Once we have gained the credentials of other users, we can
> use Spawn As to launch another beacon as a different user on the
> system:
>
> ![](media/image614.jpeg)
>
> Clicking on the Spawn As option will open a new window, shown as
> follows:
>
> ![](media/image615.jpeg)
>
> ![](media/image616.jpeg)In this window, we choose the user we want to
> spawn as and the listener on which we want the beacon to connect, and
> click on the Launch button. This will automatically run the command
> spawnas and we will see a new connection pop up:
# Explore menu
> The options available in the Explore menu are as follows:
>
> Browser Pivot: Cobalt Strike allows us to do a man-in-a-browser attack
> to hijack a victim\'s authenticated browser session. Cobalt Strike
> sets up a proxy server which injects into Internet Explorer. When we
> browse through this server, we will be able to inherit all the
> cookies, client SSL certificates, and all the authenticated HTTP
> sessions. Let\'s take a look at how to perform this attack. First,
> right-click on the host and go to Explore \| Browser Pivot, shown as
> follows:
>
> ![](media/image617.jpeg)
>
> This will open a new window with a list of currently running Internet
> explorer processes on the system. Cobalt Strike automatically
> recommends to us the best child process to inject into. As shown in
> the following screenshot, we need to choose the process and the port
> number:
>
> ![](media/image618.jpeg)
>
> ![](media/image619.jpeg)Once we click on the Launch button, the proxy
> server will be started. We can then open our local browser and set the
> IP of the team server and the port number we defined before as a proxy
> in our browser to view the authenticated user sessions:
>
> Desktop (VNC): This feature allows us to view the desktop of the
> machine through **virtual network computing** (**VNC**). We can run
> this by choosing
>
> Desktop (VNC) from the Explore menu, shown as follows:
>
> ![](media/image620.jpeg)
>
> ![](media/image621.jpeg)As you can see in the following screenshot,
> the beacon will inject the VNC server into the victims process, and
> port forward it to our team server\'s IP. We can then connect to the
> IP and port of our team server through any VNC client to view the
> desktop:
>
> File Browser: This feature is self explanatory. We can browse the
> files and folders on the victim\'s machine through a GUI using this
> option:
>
> ![](media/image622.jpeg)
>
> ![](media/image623.jpeg)When you choose the File Browser option from
> the menu, a new tab will open, in which we can view and browse the
> victim\'s files and folders, shown as follows:
>
> Port Scan: Port Scan allows us to scan the internal network of the
> victim\'s machine. To run a scan, go to Explore \| Port Scan, shown as
> follows:
>
> ![](media/image624.jpeg)
>
> A new window will open, showing us the internal IP and netmask of the
> victim, We choose the IP, specify the ports, and choose the type of
> scan. In this case, we will choose an ARP scan to discover online
> hosts on the
>
> ![](media/image625.jpeg)network:
>
> ![](media/image626.jpeg)Once we click on the Scan button, we will see
> a new tab open, shown as follows. Cobalt Strike will perform the ARP
> scan and then return a list of reachable hosts in the network:
>
> Process List: This option shows us a list of all the running processes
> on the system:
>
> ![](media/image627.jpeg)
>
> As shown in the following screenshot, we can inject the beacon into
> another process using the Inject option. We can also log keystrokes,
> take a screenshot, and so on:
>
> ![](media/image628.png)
# Beacon console
> ![](media/image629.jpeg)The beacon menu does not show us all the
> features that are available. However, Cobalt Strike also provides us
> with the beacon console so that we can fully utilize its features. The
> beacon console can be opened by right-clicking on a host and choosing
> the Interact option:
![](media/image630.jpeg)This will open the console from which we can
command the beacon to perform the desired actions. Before we run
commands, however, we must first set the sleep time of the beacon to
zero, so that it changes its state to interactive from asynchronous, as
we want to receive the output of the command in real time. We can do
this by typing sleep 0:
> To view a complete list of all the commands, we can type the help
> command:
>
> ![](media/image631.jpeg)
Let us now look at a few commands in detail:
> pwd: This prints the current working directory:
>
> ![](media/image632.jpeg)
>
> hashdump: This dumps the password hashes from the system:
>
> ![](media/image633.jpeg)
>
> shell: This executes a command passed to it as a parameter into the
> system\'s shell and prints out the output of the command in return:
>
> ![](media/image634.jpeg)
Refer to the following table to see a complete list of commands and what
they do. We have already seen some of these commands being executed from
the beacon menu:
## Command Description
+-------------------+--------------------------------------------------+
| > browserpivot    | > Set up a browser pivot session                 |
+===================+==================================================+
| > bypassuac       | > Spawn a session in a high integrity process    |
+-------------------+--------------------------------------------------+
| > cancel          | > Cancel a download that\'s in progress          |
+-------------------+--------------------------------------------------+
| > cd              | > Change directory                               |
+-------------------+--------------------------------------------------+
| > checkin         | > Call home and post data                        |
+-------------------+--------------------------------------------------+
| > clear           | > Clear beacon queue                             |
+-------------------+--------------------------------------------------+
| > covertvpn       | > Deploy covert VPN client                       |
+-------------------+--------------------------------------------------+
| > cp              | > Copy a file                                    |
+-------------------+--------------------------------------------------+
| > dcsync          | > Extract a password hash from a DC              |
+-------------------+--------------------------------------------------+
| > desktop         | > View and interact with target\'s desktop       |
+-------------------+--------------------------------------------------+
| > dllinject       | > Inject a reflective DLL into a process         |
+-------------------+--------------------------------------------------+
| > download        | > Download a file                                |
+-------------------+--------------------------------------------------+
+-------------------+--------------------------------------------------+
| > downloads       | > List file downloads in progress                |
+===================+==================================================+
| > drives          | > List drives on target                          |
+-------------------+--------------------------------------------------+
| > elevate         | > Try to elevate privileges                      |
+-------------------+--------------------------------------------------+
| > execute         | > Execute a program on target                    |
+-------------------+--------------------------------------------------+
| > exit            | > Terminate the beacon session                   |
+-------------------+--------------------------------------------------+
| > getsystem       | > Attempt to get system                          |
+-------------------+--------------------------------------------------+
| > getuid          | > Get user ID                                    |
+-------------------+--------------------------------------------------+
| > hashdump        | > Dump password hashes                           |
+-------------------+--------------------------------------------------+
| > help            | > Help menu                                      |
+-------------------+--------------------------------------------------+
| > inject          | > Spawn a session in a specific process          |
+-------------------+--------------------------------------------------+
| > jobkill         | > Kill a long-running post-exploitation task     |
+-------------------+--------------------------------------------------+
| > jobs            |                                                  |
+-------------------+--------------------------------------------------+
+-------------------+--------------------------------------------------+
|                   | > List long-running post-exploitation tasks      |
+===================+==================================================+
| > ke              | > Apply a Kerberos ticket from cache to this     |
| rberos_ccache_use | > session                                        |
+-------------------+--------------------------------------------------+
| > kerb            | > Purge Kerberos tickets from this session       |
| eros_ticket_purge |                                                  |
+-------------------+--------------------------------------------------+
| > ke              | > Apply a Kerberos ticket to this session        |
| rberos_ticket_use |                                                  |
+-------------------+--------------------------------------------------+
| > keylogger       | > Inject a keystroke logger into a process       |
+-------------------+--------------------------------------------------+
| > kill            | > Kill a process                                 |
+-------------------+--------------------------------------------------+
| > link            | > Connect to a beacon peer over SMB              |
+-------------------+--------------------------------------------------+
| > logonpasswords  | > Dump credentials and hashes with Mimikatz      |
+-------------------+--------------------------------------------------+
| > ls              | > List files                                     |
+-------------------+--------------------------------------------------+
| > make_token      | > Create a token to pass credentials             |
+-------------------+--------------------------------------------------+
| > mimikatz        | > Run a Mimikatz command                         |
+-------------------+--------------------------------------------------+
| > mkdir           | > Make a directory                               |
+-------------------+--------------------------------------------------+
+-------------------+--------------------------------------------------+
| > mode dns        | > Use DNS A as data channel (DNS beacon only)    |
+===================+==================================================+
| > mode dns-txt    | > Use DNS TXT as data channel (DNS beacon only)  |
+-------------------+--------------------------------------------------+
| > mode dns6       | > Use DNS AAAA as data channel (DNS beacon only) |
+-------------------+--------------------------------------------------+
| > mode http       | > Use HTTP as data channel                       |
+-------------------+--------------------------------------------------+
| > mode smb        | > Use SMB peer-to-peer communication             |
+-------------------+--------------------------------------------------+
| > mv              | > Move a file                                    |
+-------------------+--------------------------------------------------+
| > net             | > Network and host enumeration tool              |
+-------------------+--------------------------------------------------+
| > note            | > Assign a note to this beacon                   |
+-------------------+--------------------------------------------------+
| > portscan        | > Scan a network for open services               |
+-------------------+--------------------------------------------------+
| > powerpick       | > Execute a command through Unmanaged PowerShell |
+-------------------+--------------------------------------------------+
| > powershell      | > Execute a command through powershell.exe       |
+-------------------+--------------------------------------------------+
| >                 | > Import a PowerShell script                     |
| powershell-import |                                                  |
+-------------------+--------------------------------------------------+
+-------------------+--------------------------------------------------+
| > ppid            | > Set parent PID for spawned post-ex jobs        |
+-------------------+--------------------------------------------------+
| > ps              | > Show process list                              |
+-------------------+--------------------------------------------------+
| > psexec          | > Use a service to spawn a session on a host     |
+-------------------+--------------------------------------------------+
| > psexec_psh      | > Use PowerShell to spawn a session on a host    |
+-------------------+--------------------------------------------------+
| > psinject        | > Execute PowerShell command in specific process |
+-------------------+--------------------------------------------------+
| > pth             | > Pass-the-hash using Mimikatz                   |
+-------------------+--------------------------------------------------+
| > pwd             | > Print current directory                        |
+-------------------+--------------------------------------------------+
| > rev2self        | > Revert to original token                       |
+-------------------+--------------------------------------------------+
| > rm              | > Remove a file or folder                        |
+-------------------+--------------------------------------------------+
| > rportfwd        | > Set up a reverse port forward                  |
+-------------------+--------------------------------------------------+
| > runas           | > Execute a program as another user              |
+-------------------+--------------------------------------------------+
|                   |                                                  |
+-------------------+--------------------------------------------------+
+-------------------+--------------------------------------------------+
| > runu            | > Execute a program under another PID            |
+===================+==================================================+
| > screenshot      | > Take a screenshot                              |
+-------------------+--------------------------------------------------+
| > shell           | > Execute a command through cmd.exe              |
+-------------------+--------------------------------------------------+
| > shinject        | > Inject shell code into a process               |
+-------------------+--------------------------------------------------+
| > shspawn         | > Spawn process and inject shell code into it    |
+-------------------+--------------------------------------------------+
| > sleep           | > Set beacon sleep time                          |
+-------------------+--------------------------------------------------+