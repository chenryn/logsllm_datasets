(Note that the default set ISO-8859-1 always gets a value of one unless mentioned
explicitly in the list.).
(注意，若没有在列表中提及，则默认设置ISO-8859-1 总是返回值1).
A client setting a charset request is simple by the above. But there is some confusion
about what happens with the server's return value of a charset. The returned
resource should have a Content-Type which will specify the media type of the content
such as text/html. If appropriate the media type should state the charset, such
as text/html; charset=UTF-8. If there is no charset specification, then according to
the HTTP specification it should be treated as the default ISO8859-1 charset. But
the HTML 4 specification states that since many servers don't conform to this, then
you can't make any assumptions.
如上所述，客户端设置字符集请求很简单。但对于服务器返回的字符集，发生的事情就比较复杂。返
回的资源理应包含Content-Type，用来指明内容的媒介类型，如：text/html。有些媒介类型应当声
明字符集，如text/html;charset=UTF-8。如果没有指明字符集，按照HTTP 规范就应当作为默认的
ISO8859-1 字符集处理。但是很多服务器并不符合此约定，因此 HTML 4 规定此时不能做任何假设。
If there is a charset specified in the server's Content-Type, then assume it is correct.
if there is none specified, since 50% of pages are in UTF-8 and 20% are in ASCII
then it is safe to assume UTF-8. Only 30% of pages may be wrong :-(.
如果服务器的Content-Type指定了字符集，那么就认为它是正确的。如果未指定字符集，由于50%
的页面是UTF-8 的，20%的页面是ASCII 的，因此假设字符集是UTF-8 的会比较安全，但仍然有 30%
的页面可能会出错:-(。
8.5 The Client object 客户端对象
To send a request to a server and get a reply, the convenience object Client is the
easiest way. This object can manage multiple requests and will look after issues
such as whether the server keeps the TCP connection alive, and so on.
向服务器发送一个请求并取得回复，最简单的方法是使用方便对象Client。此对象可以管理多个请
求，并处理一些问题，如与服务器间的TCP 连接是否保持活动状态等。
This is illustrated in the following program
下面的程序给出了示例：
/* ClientGet
*/
package main
import (
"fmt"
"net/http"
"net/url"
"os"
"strings"
)
func main() {
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "http://host:port/page")
os.Exit(1)
}
url, err := url.Parse(os.Args[1])
checkError(err)
client := &http.Client{}
request, err := http.NewRequest("GET", url.String(), nil)
// only accept UTF-8
request.Header.Add("Accept-Charset", "UTF-8;q=1, ISO-8859-1;q=0")
checkError(err)
response, err := client.Do(request)
if response.Status != "200 OK" {
fmt.Println(response.Status)
os.Exit(2)
}
chSet := getCharset(response)
fmt.Printf("got charset %s\n", chSet)
if chSet != "UTF-8" {
fmt.Println("Cannot handle", chSet)
os.Exit(4)
}
var buf [512]byte
reader := response.Body
fmt.Println("got body")
for {
n, err := reader.Read(buf[0:])
if err != nil {
os.Exit(0)
}
fmt.Print(string(buf[0:n]))
}
os.Exit(0)
}
func getCharset(response *http.Response) string {
contentType := response.Header.Get("Content-Type")
if contentType == "" {
// guess
return "UTF-8"
}
idx := strings.Index(contentType, "charset:")
if idx == -1 {
// guess
return "UTF-8"
}
return strings.Trim(contentType[idx:], " ")
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
8.6 Proxy handling 代理处理
Simple proxy
简单代理
HTTP 1.1 laid out how HTTP should work through a proxy. A "GET" request should be
made to a proxy. However, the URL requested should be the full URL of the destination.
In addition the HTTP header should contain a "Host" field, set to the proxy. As long
as the proxy is configured to pass such requests through, then that is all that needs
to be done.
HTTP 1.1 规定了HTTP 应当如何通过代理工作。向代理服务器发送一个"GET"请求。但是请求URL
必须是完整的目标地址。此外，设置代理的HTTP 头应当包括"Host"字段。只要代理服务器设置为允
许这样的请求通过，那么做这些就够了。
Go considers this to be part of the HTTP transport layer. To manage this it has a
class Transport. This contains a field which can be set to a function that returns
a URL for a proxy. If we have a URL as a string for the proxy, the appropriate transport
object is created and then given to a client object by
Go 把这看成HTTP 传输层的一部分。可使用Transport类进行管理。可以使用函数将代理服务器的
URL 返回到它的一个字段。假设有一个代理服务器地址字符串URL，相应的创建Transport 对象并
交给Client 对象的代码就是：
proxyURL, err := url.Parse(proxyString)
transport := &http.Transport{Proxy: http.ProxyURL(proxyURL)}
client := &http.Client{Transport: transport}
The client can then continue as before.
客户端可以像之前一样继续使用
The following program illustrates this:
下面是程序范例:
/* ProxyGet
*/
package main
import (
"fmt"
"io"
"net/http"
"net/http/httputil"
"net/url"
"os"
)
func main() {
if len(os.Args) != 3 {
fmt.Println("Usage: ", os.Args[0], "http://proxy-host:port
http://host:port/page")
os.Exit(1)
}
proxyString := os.Args[1]
proxyURL, err := url.Parse(proxyString)
checkError(err)
rawURL := os.Args[2]
url, err := url.Parse(rawURL)
checkError(err)
transport := &http.Transport{Proxy: http.ProxyURL(proxyURL)}
client := &http.Client{Transport: transport}
request, err := http.NewRequest("GET", url.String(), nil)
dump, _ := httputil.DumpRequest(request, false)
fmt.Println(string(dump))
response, err := client.Do(request)
checkError(err)
fmt.Println("Read ok")
if response.Status != "200 OK" {
fmt.Println(response.Status)
os.Exit(2)
}
fmt.Println("Reponse ok")
var buf [512]byte
reader := response.Body
for {
n, err := reader.Read(buf[0:])
if err != nil {
os.Exit(0)
}
fmt.Print(string(buf[0:n]))
}
os.Exit(0)
}
func checkError(err error) {
if err != nil {
if err == io.EOF {
return
}
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
If you have a proxy at, say, XYZ.com on port 8080, test this by
假设有一个代理服务器XYZ.com，端口8080，测试命令就是
go run ProxyGet.go http://XYZ.com:8080/ http://www.google.com
If you don't have a suitable proxy to test this, then download and install the Squid
proxy to your own computer.
如果没有合适的代理服务器可供测试，也可以在自己的计算机上下载安装Squid proxy。
The above program used a known proxy passed as an argument to the program. There
are many ways in which proxies can be made known to applications. Most browsers have
a configuration menu in which you can enter proxy information: such information is
not available to a Go application. Some applications may get proxy information from
an autoproxy.pac file somewhere in your network: Go does not (yet) know how to parse
these JavaScript files and so cannot use them. Linux systems using Gnome have a
configuration system called gconf in which proxy information can be stored: Go cannot
access this. But it can find proxy information if it is set in operating system
environment variables such as HTTP_PROXY or http_proxy using the function
上面的程序是将已知的代理服务器地址作为参数传入的。有很多办法可以将代理服务器的地址通知到
应用程序。大多数浏览器可以通过配置菜单输入代理服务器的信息：但这些信息对Go 应用没有用。
有些应用程序可以从网络中某处找到autoproxy.pac文件取得其中的代理服务器信息，但 Go(目前还)
不能解析JavaScript 文件，因此也不能使用。Gnome Linux 系统使用的配置系统gconf里可以存
储代理服务器信息，但Go 也访问不了。但是，如果在操作系统环境变量中设置代理服务器信息（如
HTTP_PROXY 或http_proxy），Go可以通过以下函数访问到：
func ProxyFromEnvironment(req *Request) (*url.URL, error)
If your programs are running in such an environment you can use this function instead
of having to explicitly know the proxy parameters.
假如你的程序运行在这样的环境中，就可以使用此功能，而不用明确指定代理服务器参数。
Authenticating proxy
身份验证代理
Some proxies will require authentication, by a user name and password in order to
pass requests. A common scheme is "basic authentication" in which the user name and
password are concatenated into a string "user:password" and then BASE64 encoded.
This is then given to the proxy by the HTTP request header "Proxy-Authorisation"
with the flag that it is the basic authentication
有些代理服务器要求通过用户名和密码进行身份验证才能传递请求。一般的方法是“基本身份验证”：
将用户名和密码串联成一个字符串“user:password”，然后进行Base64 编码，然后添加到 HTTP 请
求头的“Proxy-Authorization”中，再发送到代理服务器
The following program illlustrates this, adding the Proxy-Authentication header to
the previous proxy program:
在前一个程序的基础上增加Proxy-Authorization 头，示例如下：
/* ProxyAuthGet
*/
package main
import (
"encoding/base64"
"fmt"
"io"
"net/http"
"net/http/httputil"
"net/url"
"os"
)
const auth = "jannewmarch:mypassword"
func main() {
if len(os.Args) != 3 {
fmt.Println("Usage: ", os.Args[0], "http://proxy-host:port
http://host:port/page")
os.Exit(1)
}
proxy := os.Args[1]
proxyURL, err := url.Parse(proxy)
checkError(err)
rawURL := os.Args[2]
url, err := url.Parse(rawURL)
checkError(err)
// encode the auth
basic := "Basic " + base64.StdEncoding.EncodeToString([]byte(auth))
transport := &http.Transport{Proxy: http.ProxyURL(proxyURL)}
client := &http.Client{Transport: transport}
request, err := http.NewRequest("GET", url.String(), nil)
request.Header.Add("Proxy-Authorization", basic)
dump, _ := httputil.DumpRequest(request, false)
fmt.Println(string(dump))
// send the request
response, err := client.Do(request)
checkError(err)
fmt.Println("Read ok")
if response.Status != "200 OK" {
fmt.Println(response.Status)
os.Exit(2)
}
fmt.Println("Reponse ok")
var buf [512]byte
reader := response.Body
for {
n, err := reader.Read(buf[0:])
if err != nil {
os.Exit(0)
}
fmt.Print(string(buf[0:n]))
}
os.Exit(0)
}
func checkError(err error) {
if err != nil {
if err == io.EOF {
return
}
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
8.7 HTTPS connections by clients 客户端发起 HTTPS 连接
For secure, encrypted connections, HTTP uses TLS which is described in the chapter
on security. The protocol of HTTP+TLS is called HTTPS and uses https:// urls instead
of http:// urls.
为保证连接的安全和加密，HTTP 使用其在安全性章节中说明的 TLS 技术。HTTP+TLS 的协议被称为
HTTPS，它使用https://地址，而不是http://地址。
Servers are required to return valid X.509 certificates before a client will accept
data from them. If the certificate is valid, then Go handles everything under the
hood and the clients given previously run okay with https URLs.
服务器必须在客户端接受从其数据前返回有效的X.509 证书。如果证书有效，Go 会在内部处理好所
有的事情，而客户端会在使用HTTPS 地址是和以前工作得一样出色。
Many sites have invalid certificates. They may have expired, they may be self-signed
instead of by a recognised Certificate Authority or they may just have errors (such
as having an incorrect server name). Browsers such as Firefox put a big warning notice
with a "Get me out of here!" button, but you can carry on at your risk - which many
people do.
许多网站都使用无效的证书。这些证书可能已经过期，或者是自行签名的，而没有让认可的证书颁发
机构签名；又或者他们可能只是用错了（比如服务器名称不对）。浏览器（如Firefox），会显示一
个很大的警告通知，通知上放着“立即离开！”按钮，但你也可以仍然继续此风险 - 很多人会这么做。
Go presently bails out when it encounters certificate errors. There is cautious
support for carrying on but I haven't got it working yet. So there is no current
example for "carrying on in the face of adversity :-)". Maybe later.
Go 目前在遇到证书错误时，会bails out。对继续工作的支持非常谨慎，我还没有找到正确的方法。
因此，目前也没有“继续此风险”任何示例 :-)。以后再说吧。
8.8 Servers 服务器
The other side to building a client is a Web server handling HTTP requests. The
simplest - and earliest - servers just returned copies of files. However, any URL
can now trigger an arbitrary computation in current servers.
这边创建客户端，另一边Web 服务器则需要处理HTTP请求。最早最简单的服务器只是返回文件的副
本。然而，目前的服务器上，随便一个URL 都可能触发任何计算。
File server
文件服务器
We start with a basic file server. Go supplies a multi-plexer, that is, an object
that will read and interpret requests. It hands out requests to handlers which run
in their own thread. Thus much of the work of reading HTTP requests, decoding them
and branching to suitable functions in their own thread is done for us.
我们从一个基本的文件服务器开始。Go 提供了一个multi-plexer，即一个读取和解释请求的对象。
它把请求交给运行在自己线程中的handlers。这样，许多读取HTTP 请求，解码并转移到合适功能上
的工作都可以在各自的线程中进行。
For a file server, Go also gives a FileServer object which knows how to deliver files
from the local file system. It takes a "root" directory which is the top of a file
tree in the local system, and a pattern to match URLs against. The simplest pattern
is "/" which is the top of any URL. This will match all URLs.
对于文件服务器，Go 也提供了一个 FileServer对象，它知道如何发布本地文件系统中的文件。它需
要一个“root”目录，该目录是在本地系统中文件树的顶端；还有一个针对URL 的匹配模式。最简单
的模式是“/”，这是所有URL 的顶部，可以匹配所有的URL。
An HTTP server delivering files from the local file system is almost embarrassingly
trivial given these objects. It is
HTTP 服务器从本地文件系统中发布文件太简单了，让人都有点不好意思举例。如下：
/* File Server
*/
package main
import (
"fmt"