title:1 Trillion Dollar Refund: How To Spoof PDF Signatures
author:Vladislav Mladenov and
Christian Mainka and
Karsten Meyer zu Selhausen and
Martin Grothe and
J&quot;org Schwenk
1 Trillion Dollar Refund – How To Spoof PDF Signatures
Vladislav Mladenov
Christian Mainka
Karsten Meyer zu Selhausen
PI:EMAIL
Hackmanit GmbH
PI:EMAIL
Ruhr University Bochum, Chair for
Network and Data Security
PI:EMAIL
Ruhr University Bochum, Chair for
Network and Data Security
Martin Grothe
PI:EMAIL
Ruhr University Bochum, Chair for
Network and Data Security
Jörg Schwenk
PI:EMAIL
Ruhr University Bochum, Chair for
Network and Data Security
ABSTRACT
The Portable Document Format (PDF) is the de-facto standard for
document exchange worldwide. To guarantee the authenticity and
integrity of documents, digital signatures are used. Several public
and private services ranging from governments, public enterprises,
banks, and payment services rely on the security of PDF signatures.
In this paper, we present the first comprehensive security eval-
uation on digital signatures in PDFs. We introduce three novel
attack classes which bypass the cryptographic protection of dig-
itally signed PDF files allowing an attacker to spoof the content
of a signed PDF. We analyzed 22 different PDF viewers and found
21 of them to be vulnerable, including prominent and widely used
applications such as Adobe Reader DC and Foxit. We addition-
ally evaluated eight online validation services and found six to be
vulnerable. A possible explanation for these results could be the
absence of a standard algorithm to verify PDF signatures – each
client verifies signatures differently, and attacks can be tailored to
these differences. We, therefore, propose the standardization of a
secure verification algorithm, which we describe in this paper.
All findings have been responsibly disclosed, and the affected
vendors were supported during fixing the issues. As a result, three
generic CVEs for each attack class were issued [50–52]. Our re-
search on PDF signatures and more information is also online avail-
able at https://www.pdf-insecurity.org/.
CCS CONCEPTS
• Security and privacy → Software and application security.
KEYWORDS
PDF, signature
ACM Reference Format:
Vladislav Mladenov, Christian Mainka, Karsten Meyer zu Selhausen, Martin
Grothe, and Jörg Schwenk. 2019. 1 Trillion Dollar Refund – How To Spoof
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3339812
PDF Signatures. In 2019 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’19), November 11–15, 2019, London, United Kingdom.
ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3319535.3339812
1 INTRODUCTION
Introduced in 1993 by Adobe Systems, the Portable Document For-
mat (PDF) was designed as a solution for the consistent presentation
of documents, independent of the operating system and hardware.
Today, the PDF format has become the standard for electronic doc-
uments in our daily workflow. The total number of PDF files in
the world is hard to guess, but according to Adobe System’s Vice
President of Engineering, Phil Ydens, there were about 1.6 billion
PDF files on the web in 2015 [3], whereby 80% were created in the
same year. This leads him to estimate that about 2.5 trillion PDF files
were created since 2015. Whether this is correct or not, PDF files
are heavily used in everyone’s life – for exchanging information,
for creating and archiving invoices and contracts, for submitting
scientific papers, or for collaborating and reviewing texts.
PDF Digital Signatures. The PDF specification supports digital
signatures since 1999 in order to guarantee that the document
was created or approved by a specific person and that it was not
altered afterward. PDF digital signatures are based on asymmetric
cryptography whereby the signer possess a public and private key
pair. The signer uses his private key to create the digital signature.
Any document modification afterward invalidates the signature and
leads to an error message thrown by the corresponding PDF viewer
or validation service. PDF digital signatures must not be confused
with electronic signatures, which are the electronic equivalent of
handwritten signatures; this is done by basically adding an image
of the signer’s handwritten signature into the document. Electronic
signatures do not provide any cryptographic protection so that
spoofing attacks are trivial and not further considered.
In 2000, President Bill Clinton enacted a federal law facilitating
the use of electronic and digital signatures in interstate and foreign
commerce by ensuring the validity and legal effect of contracts. He
even approved the eSign Act by digitally signing it [35]. Since 2014,
organizations delivering public digital services in an EU member
state are required to support digitally signed documents, which are
even admissible as evidence in legal proceedings [48]. In Austria,
every governmental authority digitally signs any document [17,
§19]. In addition, any new law is legally valid after its announce-
ment within a digitally signed PDF. Several countries like Brazil,
Canada, the Russian Federation, and Japan also use and accept
Session 1A: Attack ICCS ’19, November 11–15, 2019, London, United Kingdom1Figure 1: Validly signed PDF document by Amazon with a
spoofed content. Adobe Acrobat DC claims that the ‘docu-
ment has not been modified since the signature was applied’.
digitally signed documents [53]. Outside governmental services
digitally signed PDFs are used by the private sector to sign in-
voices and contracts: e.g., invoices by Amazon, Decathlon, Sixt, and
even more are concluded secretly between companies. Even in the
academic world, PDF signatures are used to sign scientific papers
(e.g., ESORICS proceedings) as evidence of the paper’s submission
state. According to Adobe Sign, the company processed 8 billion
electronic and digital signatures in 2017 alone [1].
We thus raise the question: Is it possible to spoof a digitally signed
PDF document in a way such that the spoofed document is indistin-
guishable from a valid one?.
Novel Attacks on PDF Signatures. In this paper, we show how
to spoof a digitally signed PDF document. The only requirement
of our attacks is access to a signed PDF (e.g., an Amazon invoice).
Given such a PDF, our attacks allow an attacker to change the PDF’s
content arbitrarily without invalidating its signature – see Figure 1.
Plausible attack scenarios which may abuse the vulnerabilities could
include, for example, the manipulation of the billing date on the
digitally signed receipt to extend the warranty period of a product
or changing the contract’s information to attain more resources
than agreed upon.
We systematically analyze the verification process of PDF sig-
natures in different desktop applications as well as in server im-
plementations, and we introduce three novel attack classes, see
Figure 2. Each of them gives a blueprint for an attacker to modify a
validly signed PDF file in such way that for the targeted viewer, the
displayed content is altered without being detected by the viewer’s
signature verification code – all elements in the GUI related to sig-
nature verification are identical to the original, unaltered document.
On a technical level, each attack class abuses a different step in
the signature validation logic.
(1) The Universal Signature Forgery (USF) manipulates meta
information in the signature in such a way that the targeted
viewer application opens the PDF file, finds the signature, but
is unable to find all necessary data for its validation. Instead of
treating the missing information as an error, it shows that the
contained signature is valid.
(2) The Incremental Saving Attack (ISA) abuses a legitimate
feature of the PDF specification, which allows updating a PDF
file by appending the changes. The feature is used, for example,
to store PDF annotations, or to add new pages while editing
Figure 2: An overview of the attacks introduced in this paper:
USF, ISA, and SWA. Each attack relies on a different injection
point for malicious content without invalidating the digital
signature.
the file. The main idea of the ISA is to use the same technique
for changing elements, such as texts, or whole pages included
in the signed PDF file to what the attacker desires. The PDF
specification does not forbid this, but the signature validation
should indicate that the document has been altered after signing.
We introduce four variants of ISA masking the modification
made without raising any warnings that the document was
manipulated.
(3) The Signature Wrapping Attack (SWA) targets the signature
validation logic by relocating the originally signed content to
a different position within the document and inserting new
content at the allocated position. We introduce three differ-
ent variants of SWA which we used to bypass the signature
validation.
Large-Scale Evaluation. We provide the first large-scale evalua-
tion covering 22 different PDF viewers installed on Windows, Linux,
or MacOS. We systematically analyzed the security of the signature
validation on each of them and found signature bypasses in 21 of 22
of the viewers, including Adobe Reader DC and Foxit. Additionally,
we analyzed eight online validation services supporting signature
verification of signed PDF files. We found six of them to be vulner-
able against at least one of the attacks, and included, among others,
DocuSign – one of the worldwide leading cloud services providing
electronic signatures and ranked #4 on the Forbes Cloud 100 [15].
The results are reasoned by the fact that:
(1) There is almost no related work regarding the security of
digitally signed PDF files, even though integrity protection
is part of the PDF specification since 1999.
(2) The PDF specification does not provide an implementation
guideline or a best-practices document regarding the sig-
nature validation. Thus, developers implement a security
critical component without having a thorough understand-
ing regarding the actual risks.
Contributions. The contributions of this paper are:
• We developed three novel attack classes on PDF signatures.
Each class targets a different step in the signature validation
process and enables an attacker to bypass a PDF’s integrity
protection completely, shown in section 4.
• We provide the first in-depth security analysis of PDF appli-
cations. The results are alarming: out of 22 popular desktop
Signed PDFUSFSWAISAHeaderBody (Manipulated)Xref TableTrailerSignature: [a,b,c,d]Xref Table UpdatesTrailerHeaderBodyXref TableTrailerSignature: [a,b,c,d]Xref Table UpdatesTrailer Body (Manipulated)Xref TableTrailerHeaderBodyXref TableTrailerSignature: [a,b,c*,d*]Body (Manipulated)Xref Table UpdatesXref Table UpdatesTrailerHeaderBodyXref TableTrailerSignature: [a,b,c,d]Xref Table UpdatesTrailerabcdabc*d*Protected by the signatureContent ManipulationSession 1A: Attack ICCS ’19, November 11–15, 2019, London, United Kingdom2viewers, we could bypass the signature validation in 21 cases,
as seen subsection 5.1.
• We additionally analyzed eight online validation services
used within the European Union and worldwide for vali-
dating signed documents. We could bypass the signature
validation in six cases, shown in subsection 5.2.
• Based on our experiences, we developed a secure signature
validation algorithm and communicated it with the applica-
tion vendors during the responsible disclosure process, as
seen in section 6.
• By providing the first in-depth analysis of PDF digital signa-
tures, we pave the road for future research. We reveal new
insights and show novel research aspects regarding PDF
security, shown in section 8.
Responsible Disclosure. In cooperation with the BSI-CERT, we
contacted all vendors, provided proof-of-concept exploits, and helped
them to fix the issues. As a result, the following three generic CVEs
for each attack class covering all affected vendors were issued [50–
52].
2 PDF BASICS
This section deals with the foundations of the Portable Document
Format (PDF). We give an overview of the file structure and explain
how the PDF standard for signatures is implemented.
2.1 Portable Document Format (PDF)
A PDF consists of 4 parts: header, body, xref table, and a trailer, as
depicted in Figure 3.
Header. The header is the first line within a PDF and defines the
interpreter version to be used. The provided example uses version
PDF 1.7.
Body. The body specifies the content of the PDF and contains
text blocks, fonts, images, and metadata regarding the file itself.
The main building blocks within the body are objects, which have
the following structure: Each object starts with an object number
followed by a generation number. The generation number should
be incremented if additional changes are made to the object.
1
2
3
4
5
6
1 0 obj
...
endobj
Constant String “obj”
Generation Number
Object Number
Listing 1: Example of an object declaration within the body.
In the example depicted in Figure 3, the body contains four
objects: Catalog, Pages, Page, and stream. The Catalog object is the
root object of the PDF file. It defines the document structure and
can additionally declare access permissions. The Catalog refers to a
Pages object which defines the number of the pages and a reference
to each Page object (e.g., text columns). The Page object contains
information on how to build a single page. In the given example, it
only contains a single string object “Hello World!”.
Figure 3: A simplified example of a PDF file’s internal struc-
ture. We depict the object names after the obj string for clar-
ification.
Xref table. The Xref table contains information about all PDF ob-
jects. An Xref table can contain one or more sections.
• Each Xref table section starts with a line consisting of two
integer entries a b (e.g., “0 5” as shown in Figure 3) which
indicates that in the Xref table the following b = 5 lines
describe objects with ID (also known as object numbers)
ranging from a ∈ {0, . . . , b − 1} = {0, . . . , 4}
• Each object entry (a ∈ {0, . . . , b − 1}) in the Xref table has
three entries x y z, where x defines the byte offset of the
object from the beginning of the document; y defines its
generation number, and z ∈ {′n′,′ f ′} describes whether the
object is in-use (′n′) or not (′ f ′, say “free”). For example,
the line “0000000060 00000 n” is the third line after “0 5”
and, thus, describes the in-use object with object number 2
and generation number 0 at byte offset 60 (see “2 0 obj” in
Figure 3).
Trailer. After a PDF file is read into memory, it is processed from
the end to the beginning. Thus, the Trailer is the first processed
content of a PDF file. It contains references to the Catalog (1 0 R)
and the Xref table.
2.2 Creating a PDF Signatures
This section explains how a digitally signed PDF file is built.
%PDF-1.70 50000000000 65535 f0000000015 00000 n0000000060 00000 n0000000135 00000 n0000000245 00000 n/Root 1 0 Rstartxref30015 Byte60 Byte300 Byte%%EOF135 Byte245 Bytexreftrailer1 0 obj Catalog/Pages 2 0 R2 0 obj Pages/Kids [3 0 R]3 0 obj Page/Contents 4 0 R4 0 obj streamstreamHello World!endstreamBodyHeaderXref TableTrailerByte Offset0 ByteDocument PartsSession 1A: Attack ICCS ’19, November 11–15, 2019, London, United Kingdom3Incremental Saving. PDF Signatures rely on a feature of PDF
called incremental saving (also known as incremental updates), al-
lowing the modification of a PDF file without changing the previous
content.
In Figure 4, an original document (shown on the left side) is
being modified via incremental saving by attaching a new body, as
well as a new Xref table, and a new Trailer at the end of the file.
Within the body, new objects can be defined. A new Pages object
Figure 4: Multiple incremental savings applied on a PDF file.
can be defined, referencing two pages, for example, /Kids [3 0 R 3
0 R]. For reasons of simplicity, the same content (3 0 R) was used
twice here. The Xref table contains only a description of the newly
defined objects. The new Trailer contains a reference to the Catalog
(it could be the old Catalog or an updated one), the byte offset of
the new Xref table, and the byte offset of the previously used Xref
table. This scheme is applied for each incremental saving.
Structure of a Signed PDF. The creation of a digital signature on
a PDF file relies on incremental saving by extending the original
document with objects containing the signature information.
In Figure 5, an example of a signed PDF file is shown. The original
document is the same document as depicted in Figure 3. By signing
the document, an incremental saving is applied and the following
content is added: a new Catalog, a Signature object, a new Xref
table referencing the new object(s), and a new Trailer. The new
Catalog extends the old one by adding a new parameter Perms,
which defines the restrictions for changes within the document.
The Perms parameter references to the Signature object.
The Signature object (5 0 obj) contains information regarding
the applied cryptographic algorithms for hashing and signing the
document. It additionally includes a Contents parameter contain-