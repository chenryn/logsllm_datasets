char:el).start[);
charrel).start（);
Channel channel) {
一
---
## Page 433
(=12186+13002+12611)个 request。这个执行范例中，throughput 提升了约10 倍以上。
409683(=135956+136879+136848)个request，没有的话会处理时37799个
WorkerThread的执行范例。使川i了WorkerThread模式的话，会处理
注意：数值会随执行环境而有很大变化。
图A8-2是使用了Worker Thread 模式的执行范例，而图A8-3 则是没有使用
executes " + this);
public class Request l
List A8-4
public String tostring() {
public void execute(） {
 public Request(String name, int number) {
Thread-37706 executes i Request from Alice No.12184
private final int rumber;
private final Strirg name;
Thread-37705 executes
（前略）
-Chris的requést 被处理的个数有0~136847，共136848 个
Worker-C executes [ Request from Chris No.136847
Alice的reguest被处理的个数有0~136878，共136879个
Worker-3 executes [ Request from Alice No.l3e878
Bobby的request 被处理的个数有0-135955，共135956个
Worker-2
Worker-4 executes
Worker-O executes
Worker-2 6
worker-4
Worker-O executes
（前略）
 System.cut.println(Thread.currentThread() -getName() + "
th:s.rumber = rumber;
this.rame = name;
取消等待时间的 Request 类 (Request.java)
executes
图A8-2执行范例（使用Worlker Thread模式）
execunes
executes
[ Request from Alice No.136876
Request from Bobby No.135955]
Request frcm Chris No.136846
Request from Chris No.136845
Request from Alice No.136877
Request from Bobby No.135954
[ Request from Alice No.12183
练习问题的解答
---
## Page 434
进行处理而化了约10秒在进行循环的缘故。会进行画面的显示的，就是Event
为了提升响应性，将工作委托其他线程
行结果如图A8-9所小。
画面就不会更新。
Dispatching Thread。Event Dispatching Thread 如果没有从 aclionPerformed 方法回来,
问题8-5解答
的事件处理就失去其功能了。
从 invokeAndWait 回来了。Event Dispatching Thrcad 就动弹不了了，GUI 应用程序
invokeAndWait 回来时，这个事件的处理才告结束。但是，为了从invokeAndWait
调用出invokeAndWait，就等于是调用出事件队列中的一个事件invokeAndWait。从
件后，参数的 Runnable 被执行，控制才会回来。但是，从Event Dispatching Thread
问题8-4解答
countUp 方法中，启动了invokerThread 这个线程。这个线程执行实际的累川
修改的 MyFrame 如 List A8-5所示，修改后的画面如图 A8-4~图 A8-8所示。执
为了解决这个问题，我们可进行修改如下，
会变成问题中所述那样的结果，是因为 Swing的Event Dispatching Thread为了
如果调归
因为会失去生存性。
图A8-3执行范例（不使用Worker Thread 模式，每次都启动新的线程
Thread-37797 execut.es
（中略】
←Chis 的request被处理的个数有0~i300二、共13002个
Thread-s7785 executes
·A-ice的reguest 被处理的个数有 0~=12i55，共12186个
Thread-37707 executes
用invokeAndWait 方法，在处埋过事件队列（Event Queue）中的所有事
（中喀）
execttes
f Re:gtest from Alice No.i2608
Request
Request from Alice Nc.l3c00
from Al:ce Nc.l300l
:rcm
共12611个
Allce No.17609
（续上图）
---
## Page 435
中，我们可以看到整个流程图。
Thread 米执行.
setText”，就要使川下南的语句。
invokerThread j不会直接对累加过的数Ⅱ进行setTexi：原因在丁，invokerThread
为了将工作委托Event Disparching Thread，秘须使用invokeLater 方法
上就从 countUjp 方法回来。这就是第7章学到的 Thread-Per-Message 模式。
（ countUp）操作，调川出 countUp 的线程（Event Dispatching Thread）启动 invoderThread.
Thread Sample");
pullic class MyFrame exterds JFrane implements ActionListener 1
SwingUtilities.invokeLaler(cxercutor):
invokerThread当中，会从0,1,2..,9进行累加，再以 sleep方法休息约1秒。
Import. jeva.awt.evert.Actienlistener;
imprt
inport java.awt.FlcwLayott;
mporl
看起来好像非常复杂，但是
Label.setText( string):
inport iavax.swirg.ulabel;
mor-
irport javax.swing. jFrame;
private firal Jlabel labei = new JLabei("Event Dispatching
public MyFrame() {
priva'e final JBut. on buton = few JBttton("countUp");
setVisiblel=rue);
pack(); 
EetDefaultCiose()peration (JFrame.EXIT_ON_CLosE):
button.addAcrieniistener(this);
getCcnrentPane().aad(button);
ge-Corte:tPale(l.addilabei);
getContertPane().setlayout (rew FlowLayout());
superi"MyFrame");
jave.awt.event .ActionEvenl :
javax.swing.SwinqUtilities;
avax.sw.ng.JBultor.;
步
步仔细地思考，就能豁然开朗。在图A8-10
练习问题的解答
---
## Page 436
422
":countUp:END"):
+ ":invokerThread:END");
System.out.printin(Thread.currentThread()-getName () +":executor:END");
string
":invokerThread:BEGIN"} ;
":countUp:BEGIN");
private vcid countUp() {
public
 System,out.print-n(Thread.currentThread() .getName ()+
}.start();
new Thread("invokerThread") {
if
public void run{) {
countUp();
(e.getSource() -= buttor) l 
void actionPerformed(ActionEvent e) {
 System.out .priatln(Thread.currentThread() .getName()
System.out.println(Thread.currentThread() -getName () +
for [int i = 0;  =
for (int i = O; i < threadPool.iength; i++) ↑
for （in i“ O; i < hreadPool.lergth; i++) ↑
for (int -
t.his.count
this.tail = 0;
this.requestQuece - new Request (MAX_REQUESTj;
threacpoo_
this.head = C;
wait();
threaaPooi[i].stopThread();
threadpco-[l;.star'();
threadPool[i] = new WorkerThread("worker-" + i, this);
int head;
 int tail;
修改后的 Channel 类(Channel.java)
 final Requestll requestQueue;
- O; i< threacPoo.length; i++) {
- new workerThread[threads];
=0;
requestQueue.length) {
//Reguest 的次数
/;下次要 putRequest的位置
练习问题的解答
425
---
## Page 440
+ " is terminated.");
zpubzic class WorkerThread extends Thread ↑
InterruptedException f
List A8-7
public void run(） [
public WcrkerThread(Striny name, 
 private final Channel channel:
private volatile boolean terminated = false;
pub]ic
}firally
try { 
this.charnel - channel;
super(rame);
return request;
motifyAllt);
count--;
head = (head + l)  requestQueue.length;
Request request = requestQueue[head];
while (ccunt <= C)↓
notifyAll();
count++; 
tail = (tail + l)  requestQueue.length;
requestQueue[tail] = request;
System.out.prirtln(Thread.currentThread() .getName()
while (!terminated)
修改后的 WorkerThread 类(WorkerThread.java)
wait();
} catch (interruptedException e) {
try
synchronized
terminated = true;
request.execute(); 
Request. request = channel.takeReguest();
Request.
Channel channel) {
takeRequest(i
throws
---
## Page 441
public class CliencThread extends Thread {
impert java.util,Random;
List A8-8
public void stoplhread()
public ClientThrcad(String name,
private volatile booiean terminated = false;
private static final Random random = new Random();
private faral Channcl channel; 
public void stopThreadi) 1
i5
interrupt();
terminated = true;
terminated.");
} finally f
try 1
this.charnel 
super (name);
interrupt();
terminated - true;
System.out .println(Thread.currentThread() .getName ()
for (int i = C; !terminated; i++)
修改后的 ClientThread 类(ClientThread.jiava)
try 
|catch (InterruptedException e){
terminated - true;
Thread.sleep(random.nextInt(l000));
channel.putRequest (request);
Request reguest. - new Reguest (getName (), i);
= channel;
Channel channel)
练习问题的解答
---