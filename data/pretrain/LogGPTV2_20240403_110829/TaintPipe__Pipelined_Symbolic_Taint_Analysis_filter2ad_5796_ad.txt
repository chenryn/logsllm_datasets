g
o
b
h
m
m
k
lib
sje
er
n
g
m
q
u
a
h
2
6
o
m
4ref
n
etp
p
ntu
m
a
x
ala
star
a
v
era
n
c
b
g
e
m
m
k
Figure 9: Slowdown on SPEC CPU2006.
Figure 10: Slowdown on common Linux utilities.
posed exclusively by TaintPipe. It runs a program under
Pin without any form of analysis (“nullpin” bar). The
“TaintPipe - application” bar represents the running time
of instrumented application thread alone, and “TaintPipe
- overall” corresponds to the overall overhead when both
the application thread and pipelined worker threads are
running. The major reason we reported “TaintPipe -
application” and “TaintPipe - overall” time separately
is to show the two improvements, namely “Application
speedup” and “Taint speedup” (see Figure 1). Since the
application thread typically runs faster than the worker
threads, the “TaintPipe - overall” time is actually dom-
inated by the worker threads. Therefore, usually the
“TaintPipe - overall” time represents the relative time
spent by worker threads as well. The times reported in
this section are all normalized to native execution, that
is, application running time without dynamic binary in-
strumentation.
SPEC CPU2006. Figure 9 shows the normalized ex-
ecution times when running the SPEC CPU2006 int
benchmark suite under TaintPipe. On average, the in-
strumented application thread enforces a 2.60X slow-
down to native execution, while the overall slowdown of
TaintPipe is 4.14X. If we take Pin’s environment run-
time overhead (“nullpin” bar) as the baseline, we can see
TaintPipe imposes 2.67X slowdown (“TaintPipe - over-
all” / “nullpin”) and libdft introduces 6.4X slowdown—
this number is coincident to the observation that prop-
agating a taint tag normally requires extra 6–8 instruc-
tions [30, 11].
In summary, TaintPipe outperforms in-
lined dynamic taint analysis drastically: 2.38X faster
than the inlined dynamic taint analysis, and 3.79X faster
in terms of application execution.
In the best case
(h264ref ), the application speedup under TaintPipe ex-
ceeds 4.18X.
Utilities. We also evaluated TaintPipe on four common
Linux utilities, which were not chosen randomly. These
four utilities represent three kinds of workloads:
I/O
bounded (tar), CPU bounded (bzip2 and gzip), and
the case in-between (scp). We applied tar to archive
and extract the GNU Core utilities package (version
8.13) (∼50MB), then we employed bzip2 and gzip to
compress and decompress the archive ﬁle. Finally we
utilized scp to copy the archive ﬁle over a 1Gbps link.
As shown in Figure 10, TaintPipe reduced slowdown of
dynamic taint analysis from 7.88X to 3.24X, by a factor
of 2.43 on average.
Effects of Optimizations.
In this experiment, we
quantify the effects of taint logic optimizations we pre-
sented in Section 4.2, which are paramount for optimized
TaintPipe performance. Figure 11 shows the impact of
these optimizations when applied cumulatively on SPEC
CPU2006 and the set of common utilities. The “un-
opt” bar approximates an un-optimized TaintPipe, which
does not adopt any optimization method. The “O1” bar
indicates the optimization of function summary, reduc-
ing application slowdown notably by 26.6% for SPEC
CPU2006 and 25.0% for the common utilities. The “O2”
bar captures the effect of taint basic block cache, leading
to a further reduction by 19.0% and 22.9% for SPEC and
utilities, respectively. Intra-block optimizations, denoted
by “O3”, offer further improvement, 12.0% with SPEC
and 11.6% with the utilities).
USENIX Association  
24th USENIX Security Symposium  75
Program
Vulnerability
CVE ID
Nginx
Validation Bypass CVE-2013-4547
Micro httpd Validation Bypass CVE-2014-4927
Tiny Server Validation Bypass CVE-2012-1783
Validation Bypass CVE-2010-4052
Regcomp
Denial Of Service CVE-2014-0333
Libpng
Integer Underﬂow CVE-2010-0001
Gzip
Grep
Integer Overﬂows CVE-2012-5667
CVE-2013-0221
Buffer Overﬂow
CVE-2013-4231
Buffer Overﬂow
Buffer Overﬂow
CVE-2012-6303
CVE-2009-4496
Information Leak
Information Leak
CVE-2009-4491
Coreutils
Libtiff
Boa
Thttpd
WaveSurfer
Table 2: Tested software vulnerabilities.
# Taint Bytes
libdft Temu TaintPipe
45
80
125
1,180
72
96
653
256
290
406
164
328
45
85
126
1,148
72
112
682
260
286
418
164
328
45
80
125
1,124
72
94
608
252
268
384
164
328
9
8
7
6
5
4
3
2
1
0
)
e
m
i
t
n
u
r
d
e
z
i
l
a
m
r
o
n
(
n
w
o
d
w
o
S
l
SPEC CPU2006
 Unopt
 O1
 O2
 O3
Table 3: Malware samples and taint graphs.
Sample
Svat
RST
Agent
KeyLogger
Subsevux
Tsunami
Keitan
Fireback
Type
Virus
Virus
Rootkit
Trojan
Backdoor
Backdoor
Backdoor
Backdoor
Taint Graph
Node # Edge #
62
82
402
368
764
534
482
620
90
154
624
554
1648
734
618
1038
Control Flow
Obfuscation
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
(cid:31)
 Common utilities
Figure 11: The impact of optimizations to speed up
TaintPipe when applied cumulatively: O1 (function sum-
mary), O2 (O1 + taint basic block cache), O3 (O2 + intra-
block optimizations).
5.3 Security Applications
Software Attack Detection. One important applica-
tion of taint analysis is to deﬁne taint policies, and en-
sure they are not violated during taint propagation. We
tested TaintPipe with 12 recent software exploits listed
in Table 2, which covers a wide range of real-life soft-
ware vulnerabilities. For example, the vulnerabilities in
nginx, micro httpd, and tiny server allow remote
attackers to bypass input validation and crash the pro-
gram. The libtiff buffer overﬂow vulnerability leads
to an out of bounds loop limit via a malformed gif image.
Both boa and thttpd write data to a log ﬁle without san-
itizing non-printable characters, which may be exploited
to execute arbitrary commands. Since we have detailed
vulnerability reports, we can easily mark the locations of
taint sinks in the straight-line code and set corresponding
taint policies.
In our evaluation, TaintPipe did not generate any false
positives and successfully identiﬁed taint policy viola-
tions while incurring only small overhead. At the same
time, we evaluated the accuracy of TaintPipe. To this
end, we counted the total number of tainted bytes in the
taint state when taint analysis hit the taint sinks. Col-
umn 4 ∼ 6 of Table 2 show the number of taint bytes
when running libdft, Temu [44] and TaintPipe, respec-
tively. Compared with the inlined dynamic taint anal-
ysis tools (libdft and Temu), TaintPipe’s symbolic taint
analysis achieves almost the same results in 8 cases and
introduces only a few additional taint bytes in the other
4 cases. We attribute this to our conservative approach
to handling of symbolic memory indices. The evalu-
ation data show that TaintPipe does not result in over-
tainting [32] and rivals the inlined dynamic taint analysis
at the same level of precision.
76  24th USENIX Security Symposium 
USENIX Association
Table 4: Cryptographic function detection time.
TEA
MD5
SHA-1
Algorithm TaintPipe (s)
3.8 (<1.1X)
12.3 (1.2X)
4.5 (<1.1X)
7.4 (<1.1X)
8.8 (1.1X)
AES-CBC
Blowﬁsh
Temu (s)
15.2 (2.2X)
125.6 (3.8X)
21.4 (2.5X)
35.1 (2.6X)
40.2 (3.3X)
Generating Taint Graphs for Malware. We ran 8
malware samples collected from VX Heavens1 with
TaintPipe.2 Similar to Panorama [43], we tracked infor-
mation ﬂow and generated a taint graph for each sam-
ple. In a taint graph, nodes represent taint seeds or in-
structions operating on taint data, and a directed edge
indicates an explicit data ﬂow dependency between two
nodes. Taint graph faithfully describes intrinsic mali-
cious intents, which can be used as malware speciﬁcation
to detect suspicious samples [12]. The statistics of our
testing results are presented in Table 3. It is worth noting
that 6 out of 8 malware samples are applied with vari-
ous control ﬂow obfuscation methods (the ﬁfth column),
such as opaque predicates, control ﬂow ﬂattening, obfus-
cated control transfer targets, and call stack tampering.
As a result, the control ﬂow graphs are heavily cluttered.
For example, malware samples Keitan and Fireback
have a relatively high ratio of indirect jumps (e.g., jmp
eax). Typically it is hard to precisely infer the destina-
tion of an indirect jump statically. Thus, the taint logic
optimization methods that rely on accurate control ﬂow
graph [17, 18] will fail. In contrast, our approach does
not rely on control ﬂow graph and therefore we analyzed
these obfuscated malware samples smoothly.
Cryptography Function Detection. Malware authors
often use cryptography algorithms to encrypt malicious
code, sensitive data, and communication. Detecting
cryptography functions facilitates malware analysis and
forensics. Recent work explored the avalanche effect
to quickly identify possible cryptography functions by
observing the input-output dependency with multi-tag
taint analysis. That is, each byte in the encrypted mes-
sage is dependent on almost all bytes of input data or
key [7, 21, 48]. However, multi-tag dynamic taint anal-
ysis normally has to sacriﬁce more shadow memory and
imposes much higher runtime overhead than single-tag
dynamic taint analysis. Recall that multi-tag propagation
is handled transparently in TaintPipe. In this experiment,
we applied TaintPipe to detect such avalanche effects in
binary code. We utilized the test case suite of Crypto++
1http://vxheaven.org
2All these 8 samples are not packed. To analyze packed binaries, we
can start TaintPipe when the unpacking procedure arrives at the original
entry point.
library3 and tested 5 cryptography algorithms. Each byte
of the plain messages was labeled as a different taint tag.
We compared TaintPipe with Temu [44], which supports
multiple byte-to-byte taint propagation as well.4 The de-
tection time is shown in Table 4. We also reported the ra-
tio of multi-tag’s running time to single-tag’s. The results
show that TaintPipe is able to detect cryptographic func-
tions with little additional overhead (less than 1.1X on
average), while Temu’s multi-tag propagation imposes a
signiﬁcant slowdown (2.9X to single-tag propagation on
average).
6 Discussions and Limitations
Since TaintPipe’s pipelining design leads to an asyn-
chronous taint check, TaintPipe may detect a violation
of taint policy after the real attack happens. One possible
solution is to provide synchronous policy enforcement at
critical points (e.g., indirect jump and system call sites).
In that case, we can explicitly suspend the application
thread, and wait for the worker threads to complete. Our
current design spawns worker threads in the same pro-
cess of running both Pin and the application. In the fu-
ture, we plan to replace the worker threads with different
processes to increase isolation.
As TaintPipe may perform symbolic taint analysis
when explicit taint states are not available, TaintPipe ex-
hibits similar limitations as symbolic execution of bi-
naries. Recent work MAYHEM [8] proposes an ad-
vanced index-based memory model to deal with sym-