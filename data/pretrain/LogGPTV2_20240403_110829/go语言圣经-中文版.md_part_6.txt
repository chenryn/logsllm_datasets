的字节数，但是又不想要其内容。每当请求返回内容时，fetch函数都会往ch这个channel里写
入一个字符串，由main函数里的第二个for循环来处理并打印channel里的这个字符串。
当一个goroutine尝试在一个channel上做send或者receive操作时，这个goroutine会阻塞在调
用处，直到另一个goroutine往这个channel里写入、或者接收值，这样两个goroutine才会继续
执行channel操作之后的逻辑。在这个例子中，每一个fetch函数在执行时都会往channel里发
送一个值(ch  0:
return +1
default:
return 0
case x < 0:
return -1
}
}
这种形式叫做无tag switch(tagless switch)；这和switch true是等价的。
像for和if控制语句一样，switch也可以紧跟一个简短的变量声明，一个自增表达式、赋值语
句，或者一个函数调用(译注：比其它语言丰富)。
本章要点 48
gopl
break和continue语句会改变控制流。和其它语言中的break和continue一样，break会中断当
前的循环，并开始执行循环之后的内容，而continue会跳过当前循环，并开始执行下一次循
环。这两个语句除了可以控制for循环，还可以用来控制switch和select语句(之后会讲到)，在
1.3节中我们看到，continue会跳过内层的循环，如果我们想跳过的是更外层的循环的话，我
们可以在相应的位置加上label，这样break和continue就可以根据我们的想法来continue和
break任意循环。这看起来甚至有点像goto语句的作用了。当然，一般程序员也不会用到这种
操作。这两种行为更多地被用到机器生成的代码中。
命名类型： 类型声明使得我们可以很方便地给一个特殊类型一个名字。因为struct类型声明通
常非常地长，所以我们总要给这种struct取一个名字。本章中就有这样一个例子，二维点类
型：
type Point struct {
X, Y int
}
var p Point
类型声明和命名类型会在第二章中介绍。
指针： Go语言提供了指针。指针是一种直接存储了变量的内存地址的数据类型。在其它语言
中，比如C语言，指针操作是完全不受约束的。在另外一些语言中，指针一般被处理为“引
用”，除了到处传递这些指针之外，并不能对这些指针做太多事情。Go语言在这两种范围中取
了一种平衡。指针是可见的内存地址，&操作符可以返回一个变量的内存地址，并且*操作符
可以获取指针指向的变量内容，但是在Go语言里没有指针运算，也就是不能像c语言里可以对
指针进行加或减操作。我们会在2.3.2中进行详细介绍。
方法和接口： 方法是和命名类型关联的一类函数。Go语言里比较特殊的是方法可以被关联到
任意一种命名类型。在第六章我们会详细地讲方法。接口是一种抽象类型，这种类型可以让
我们以同样的方式来处理不同的固有类型，不用关心它们的具体实现，而只需要关注它们提
供的方法。第七章中会详细说明这些内容。
包（packages）： Go语言提供了一些很好用的package，并且这些package是可以扩展的。
Go语言社区已经创造并且分享了很多很多。所以Go语言编程大多数情况下就是用已有的
package来写我们自己的代码。通过这本书，我们会讲解一些重要的标准库内的package，但
是还是有很多限于篇幅没有去说明，因为我们没法在这样的厚度的书里去做一部代码大全。
在你开始写一个新程序之前，最好先去检查一下是不是已经有了现成的库可以帮助你更高效
地完成这件事情。你可以在 https://golang.org/pkg 和 https://godoc.org 中找到标准库和社区
写的package。godoc这个工具可以让你直接在本地命令行阅读标准库的文档。比如下面这个
例子。
本章要点 49