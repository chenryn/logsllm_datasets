   unsigned int v3; // [esp+8h] [ebp-4h]
   v3 = 1;
   for ( i = 0; i > 1) ^ 0xFD2F57CB) + 614631013 )
  {
    v3 = 16 * (s[2 * i] - ((((8 * (dword_1328C ^ 0x646E5437u) + 124976640) >> 3) ^ 0x81AAAA88) + 
1986772451));
    v18 = (int *)((char *)&v20 + i + 3);
    *((_BYTE *)&v20 + i + 3) = (s[2 * i + 778599960 + dword_13284] - (((dword_13284 - 80) ^ 0x16) - 95)) | 
v3;
  }
  *((_BYTE *)&v20 + v19 / (((dword_1328C - 1039889880 + 1491743034) ^ 0x4DB7C173) + 744859163) + 3) = 
(((_BYTE)dword_13294 > 2)) ^ 0xD639A2D1) >> 7) - 18760303);
    for ( i = ((8 * ((unsigned int)(dword_13280 - 252287816) >> 7)) >> 1) - 101873648;
          i > 7) - 1619149996) > 5) ^ 0xA9E12912) >> 6) - 45605759;
      v10 = off_13200[i];
      v8 = (int)*(&off_13218 + i);
      for ( j = (((dword_13294 ^ 0x6B4503A8u) >> 3) ^ 0x8AA18B73) + 1906990957;
            j > 1) ^ 0x42CEB488) - 808933765 )
      {
        v6 += *(_DWORD *)(4 * j + v8) * v10[j];
      }
      *(&v11 + i) = v6;
    }
    printf(aHereIsYourFlag, &v11);
  }
  else
  {
    puts(::s);
  }
  return 8 * ((dword_13288 - 1857398597 + 477812571) ^ 0x877E6FB3) - 218351504;
}
#include 
#include 
int dword_131D0[12] =
{
  3565280580,
  3865899232,
  1820743261,
  4016843373,
  3513787146,
  2438574441,
  1036979519,
  3644006006,
  1684609776,
  3690169551,
  111033914,
  1898110541
};
 int mat1[] =
 {
   4261284769,
   2593214546,
   3379508519,
   4112523213,
   4264750479,
   3683532537,
   85915988,
   4263608092,
   2066983099,
   2633565089,
   3280069325,
   582179812,
   1162929838,
   3701378876,
   2847166127,
   863127658,
   1362272088,
   1596933486,
   2606062088,
   3944383785,
   2600505476,
   2601220870,
   2573726481,
   2449150891,
   412426806,
   1870371093,
   3990476497,
   4217896481,
   630788528,
   1036316276,
   2559799280,
   3748987598,
   3286175766,
   3155304697,
   4115431692,
   1901749068,
   1041643430,
   2163243917,
   4221346961,
   2904902702,
   4216979759,
   451892609,
   3117159249,
   2587579245,
   3179261711,
   4103788675,
   46486308,
   2210148869,
   1132749441,
   423109704,
   4208667416,
   2469777797,
   2496053082,
   1494648238
 };
 #include  
 void combinationUtil(int arr[], int n, int r,
  int index, int data[], int i);
 // The main function that prints all combinations of  
 // size r in arr[] of size n. This function mainly 
 // uses combinationUtil() 
 void printCombination(int arr[], int n, int r)
 {
  // A temporary array to store all combination 
  // one by one 
  std::vector data;
  data.reserve(r);
  // Print all combination using temprary array 'data[]' 
  combinationUtil(arr, n, r, 0, data.data(), 0);
 }
 /* arr[]  ---> Input Array
    n      ---> Size of input array
    r      ---> Size of a combination to be printed
    index  ---> Current index in data[]
    data[] ---> Temporary array to store current combination
    i      ---> index of current element in arr[]     */
 void combinationUtil(int arr[], int n, int r, int index,
  int data[], int i)
 {
  // Current cobination is ready, print it 
  if (index == r) {
    int *v1 = data;
    for (int i = 0; i = n)
    return;
  // current is included, put next at next location 
  data[index] = arr[i];
  combinationUtil(arr, n, r, index + 1, data, i + 1);
  // current is excluded, replace it with next 
  // (Note that i+1 is passed, but index is not 
  // changed) 
  combinationUtil(arr, n, r, index, data, i + 1);
}
// Driver program to test above functions 
int main()
{
Found 0: d481dd44 = fdfe0ba1 7b33a8bb 3dc4ee74 df7502ce 3e1637a6 Found 1: e66cf0e0 = 51329f58 6f7b9915 df7502ce
2c55324 43846281 Found 2: 6c86565d = c96f3527 51ef954 9967f311 715a634c 9335d185 Found 3: ef6c2a6d = f5201fcd
db8e3ef9 eb1a8529 9967f311 9a3b536d Found 4: d170230a = dc9e8f3c 9b009084 18952236 bd7faf0f 83bc3205 Found 5:
9159b169 = c381e2cd dc9e8f3c 98936ﬀ0 c3df1016 94c6bf5a Found 5: 9159b169 = c96f3527 22b35be4 f54c810c ad254c2e
2c55324 Found 6: 3dcf0d3f = fe32ed8f 22b35be4 3372486a edd9d6d1 fb9ca491 Found 7: d9331e76 = fe32ed8f 91fb13ab
80f07b8d ad254c2e 1aef5581 Found 8: 64691af0 = 9cf903a1 9b555a08 b9cc1351 19382448 591685ae Found 9: dbf384cf =
fe217f1c a9b44eaf 259911b0 f54c810c 19382448 Found 10: 69e3e3a = 5f2f456e fb67fe21 bc1220f9 fb5a012f f49ad883 Found
11: 7122de4d = 9a915052 4550e6ae 9b0b7b06 fb5a012f fadb2b1
13792468ﬂagﬂag
*CTF{7h1S_Cu63_is_m4g1c}
fanoGo
Status: Completed Tags: Reverse
  int r = 5;
  int n = sizeof(mat1) / sizeof(mat1[0]);
  printCombination(mat1, n, r);
  return 0;
}
import string 
a = '''
fdfe0ba1 7b33a8bb 3dc4ee74 3e1637a6 51329f58 6f7b9915 2c55324 43846281 df7502ce
c96f3527 51ef954 715a634c 9335d185 f5201fcd db8e3ef9 eb1a8529 9a3b536d 9967f311
9b009084 18952236 bd7faf0f 83bc3205 c381e2cd 98936ff0 c3df1016 94c6bf5a dc9e8f3c
22b35be4 3372486a edd9d6d1 fb9ca491 91fb13ab 80f07b8d ad254c2e 1aef5581 fe32ed8f
9cf903a1 9b555a08 b9cc1351 591685ae fe217f1c a9b44eaf 259911b0 f54c810c 19382448
5f2f456e fb67fe21 bc1220f9 f49ad883 9a915052 4550e6ae 9b0b7b06 fadb2b18 fb5a012f 
'''
t = [[int(c, 16) for c in row.split()] for row in a.strip().split('\n')]
t = [(row[0:4], row[4:8], row[8]) for row in t]
ret = []
for ti in range(len(t)):
    cur = []
    for l1 in itertools.permutations(t[ti][0]):
        for l2 in itertools.permutations(t[ti][1]):
            l = (l1[0], l2[0], l1[1], l2[1], t[ti][2], l2[2], l1[2], l2[3], l1[3])
            c = sum([l[i] * k[ti][i] & 0xFFFFFFFF for i in range(9)]) & 0xFFFFFFFF
            a = (chr(c & 0xff), chr((c >> 8) & 0xff), chr((c >> 16) & 0xff), chr((c >> 24) & 0xff))
            for tchar in a:
                if not (tchar in string.letters or tchar in string.digits or tchar in '{}*_,+'):
                    break
            else:
                cur.append(''.join(a))
    ret.append(cur)
for c in ret:
    print c
['*CTF', 'erkU']
['Gj3o', '{7h1', 'KP6o', 'uk6W', '4gjL']
['S_Cu', 'Xp,T', 'oeps']
['63_i', 'ERNJ']
['s_m4']
['ukxG', 'uHnr', 'g1c}', '4nEE', 'YOcm', 'AkT6', 'YctL', 'VRae']
from pwn import *
yy
Status: Completed Tags: Reverse
ﬂex scanner
yy_ec :
data = [
  0x2B, 0x60, 0xC3, 0xBE, 0xC2, 0xB7, 0xC2, 0x82, 0xC2, 0x89,
  0xC3, 0x95, 0x5B, 0xC2, 0x87, 0x2A, 0x69, 0x13, 0xC2, 0x96,
  0x51, 0xC3, 0xBD, 0x6F, 0x32, 0x28, 0x5A, 0xC3, 0x92, 0x74,
  0xC2, 0x94, 0xC2, 0x94, 0xC2, 0x95, 0xC2, 0x96, 0xC2, 0xA4,
  0xC3, 0x8A, 0xC2, 0xA3, 0xC3, 0x8E, 0xC2, 0xB3, 0x24, 0x24,
  0x24, 0xC2, 0xBA, 0xC2, 0xAE, 0x46, 0x2B, 0xC2, 0xAC, 0x3C,
  0xC3, 0xAB, 0x32, 0x23, 0x2A, 0xC3, 0xB0, 0xC3, 0xB3, 0xC2,
  0xAC, 0xC3, 0x85, 0xC2, 0x87, 0x2C, 0xC2, 0xA3, 0x6B, 0xC2,
  0xAD, 0x0F, 0xC3, 0x87, 0x5C, 0xC2, 0xA8, 0xC3, 0xB3, 0xC2,
  0xAF, 0xC3, 0xA1, 0xC3, 0xB9, 0x12, 0xC3, 0x8A, 0x44, 0x72,
  0xC2, 0xA6, 0xC2, 0x91, 0x66, 0x6D, 0x31, 0xC3, 0xA7, 0x51,
  0x64, 0x67, 0x78, 0x75, 0x6B, 0xC2, 0x96, 0xC2, 0x91, 0x51,
  0xC3, 0xA7, 0x3E, 0x13, 0xC3, 0x8E, 0x57, 0x7B, 0x47, 0xC2,
  0x9D, 0x45, 0x7F, 0x29, 0x11, 0xC3, 0x95, 0xC3, 0xA1, 0xC3,
  0xA7, 0x59, 0xC2, 0x8A, 0x06, 0xC2, 0x8C, 0xC2, 0x91, 0xC2,
  0xB5, 0x0F, 0x3A, 0xC2, 0x8E, 0xC2, 0xBA, 0xC3, 0x8B, 0xC3,
  0xAA, 0xC3, 0xA8, 0xC3, 0xBC, 0xC2, 0x8E, 0x71, 0xC3, 0xBD,
  0x6F, 0x32, 0x36, 0xC3, 0xB9, 0x42, 0xC3, 0xA7, 0x49, 0xC3,
  0x92, 0x22, 0x79, 0xC3, 0x89, 0xC3, 0x93, 0x54, 0x79, 0xC3,
  0x96, 0x63, 0x6A, 0x1F, 0xC3, 0x96, 0xC3, 0xB3, 0x23, 0x6F,
  0xC2, 0x94, 0x37, 0xC2, 0x94, 0xC3, 0xA8, 0x76, 0xC3, 0x83,
  0xC3, 0x8E, 0x7C, 0x3F, 0xC2, 0xAD, 0xC3, 0xA0, 0xC2, 0x9F,
  0x0C, 0xC2, 0xAA, 0x7B, 0xC3, 0x83, 0x26, 0xC2, 0xAD, 0xC3,
  0xB0, 0x7E, 0x3A, 0xC3, 0xA5, 0x47, 0xC2, 0x9D, 0x7F, 0x09,
  0xC3, 0xA5, 0x49, 0x44, 0xC2, 0xB0, 0xC2, 0xAF, 0x0F, 0x3A,
  0xC3, 0x8C, 0x50, 0x51, 0xC3, 0xBD, 0x6F, 0x32, 0x2C, 0xC3,
  0x8C, 0x2D, 0x27, 0x49, 0xC3, 0xA3, 0x2A, 0xC3, 0xB0, 0xC3,
  0xB3, 0xC2, 0xAC, 0xC3, 0x88, 0xC2, 0x89, 0xC3, 0xB0, 0xC2,
  0x9D, 0x7E, 0x1C, 0xC2, 0x9F, 0x29, 0x11, 0x41, 0x47, 0xC3,