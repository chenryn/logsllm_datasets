overhead, hardware mechanism called SCRIBE to record
information about resource usage of each instruction and
expose this information to the software. Second, we propose
a software technique called SIED that uses the recorded in-
formation upon a failure (caused by an intermittent fault) to
diagnose the faulty resource by backtracking from the point
of failure through the program’s DDG (see Section II-C).
The intuition is that errors propagate along the DDG edges
starting from the instruction that used the faulty resource,
and hence backtracking on the DDG can diagnose the fault.
Assumptions: We make the following assumptions about
the system:
i) We assume a commodity multi-core system in which all
cores are homogeneous, and are able to communicate with
each other through a shared address space.
ii) We assume the availability of a fault-free core to
perform the diagnosis, e.g. using Dual Modular Redundancy
(DMR). This is similar to the assumption made by Li et al.
[9]. The fault-free core is only needed during diagnosis.
iii) The processor is able to deterministically replay the
failed program’s execution. Researchers have proposed the
use of deterministic replay techniques for debugging pro-
grams on multi-core machines [18], [19]. This is needed
to eliminate the effect of non-deterministic events in the
program during diagnosis (other than the fault).
iv) The fault has already been identiﬁed as an intermittent
fault prior to diagnosis. In particular, it has been ruled out
to be a transient fault - this can be done by only invoking
diagnosis if there are repeated failures. For example, there
has been work on distinguishing intermittent faults from
transient faults using a threshold mechanism [20].
Steps : Figure 1 shows the sequence of steps our technique
would follow to diagnose a fault.
1) As the program executes, the hardware layer SCRIBE
logs the Resource Usage Information (RUI) of the
instructions (step 1 in Figure 1) to memory. Every
instruction has an RUI, which is a bit array indicating
the resources it has used while moving through the pro-
cessor’s pipeline. SCRIBE is presented in Section IV.
2) Assume that the program fails as a result of an intermit-
tent fault burst in one of the processor resources (step
2). This failure can occur due to a crash or an error
detection by the application (e.g. an assertion failure).
The registers and memory state of the application is
dumped to memory, typically as a core dump (step 3).
3) The software layer diagnosis process, SIED is started
on another core. This core is used to perform the
diagnosis and is assumed to itself be fault-free during
diagnosis (see assumptions). SIED replays the program
using deterministic replay mechanisms, and constructs
the DDG (steps 4 and 5) of the replayed program.
The original program can be resumed on the core that
experienced the intermittent fault, as SIED does not
interfere with its subsequent execution.
4) When the replayed program reaches the instruction
at which the orignal program failed, SIED dumps its
register and memory state to memory (step 6).
5) SIED merges the DDG from step 5 with the RUI log in
step 1, to build the augmented DDG. This is a DDG in
which every node contains the RUI of its corresponding
instruction in the program.
6) SIED then compares the memory and register states
dumped in steps 3 and 6 to identify the set of nodes
in the augmented DDG that differ between the original
and replayed execution. Because the replayed execution
used deterministic replay, any differences between the
two executions are due to the intermittent fault. In case
of no deviation between two executions, a software bug
is diagnosed. This is similar to the diagnosis decision
made by Li et al. in [9].
365365365
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:27:50 UTC from IEEE Xplore.  Restrictions apply. 
1) Gather RUI and log to memory (SCRIBE)
2) Failure due to intermittent fault
3) Log program’s register and memory state (core dump)
4) Deterministic replay on another core (SIED)
5) Construct replayed program’s DDG (SIED)
6) Log replayed program’s register and memory state
(SIED)
7) Construct augmented DDG and backtrack using anal-
ysis heuristics (SIED)
Figure 1: End to end scenario of failure diagnosis by SCRIBE and SIED. The steps in the ﬁgure are explained in the box.
7) Finally, SIED backtracks from the faulty nodes in the
augmented DDG using analysis heuristics to ﬁnd the
faulty resource (steps 7 and 8). The details of how
SIED works are explained in Section V.
technique gathers
Challenges Addressed: We now illustrate how our tech-
nique satisﬁes the constraints posed in Section III-B.
Non-determinism: Our
the micro-
architectural resource usage information online using the
SCRIBE layer (Step 1). Therefore, it requires determinism
neither in resource usage nor fault occurrence during the
replay.
Overheads: Our technique initiates diagnosis only when a
crash or error detection occurs, thus the diagnosis overhead
is not incurred during fault-free execution. However, the
SCRIBE layer incurs both performance and power overheads
as it continuously logs the resource usage information of the
instructions executing in the processor. Note that SCRIBE
only exposes the hardware RUI information to the software
layer. The complex task of ﬁguring out the faulty component
is done in software. Hence, the power overhead of SCRIBE
is low. We describe the optimizations made to SCRIBE to
keep its performance overhead low in Section IV. We present
the performance and power overheads in section VI-B.
Software-layer visibility: The SCRIBE layer records the in-
formation on micro-architectural resource usage and exposes
it to software, thus solving the visibility problem.
No information about faulty instructions: Our technique does
not log the destination result of each instruction, and hence
cannot tell which instructions have been affected by the
fault. Instead, SIED uses the replay run to determine which
registers/memory locations are affected by the fault, and
backtracks from these in the DDG to identify the faulty
resource.
A. RUI Format
A resource in a superscalar processor consists of the
pipeline buffers and functional units. We use the term,
Resource Usage Information (RUI) to denote the set of
micro-architectural resources used by a single instruction as
it moves through the superscalar pipeline. The RUI records
the resources used by the instruction in each pipeline stage,
as a bitmap. Each ﬁeld of the RUI corresponds to a single
resource class in the pipeline. For example, consider an add
instruction which is assigned to entry 4 of the Instruction
Fetch Queue (IFQ), entry 7 of the Reorder Buffer (ROB),
entry 24 of reservation station (RS) and also uses the second
integer ALU of the processor (FU). It does not use the Load
Store Queue (LSQ), though other instructions may do so and
hence space is reserved in the RUI for the LSQ as well. The
RUI of this instruction is shown in Figure 2.
The RUI entries are stored in a circular buffer in the
process’s memory address space as the program executes on
the processor. The size of the RUI buffer is determined by
the worst-case number of instructions taken by programs to
crash or fail after an intermittent fault. Because this number
can be large, keeping the buffer on chip would lead to
prohibitive area and power overhead. Hence we choose to
keep the RUI information in the memory instead of on chip.
Therefore, in our case, the buffer size is bounded only by
the memory size.
Figure 2: The RUI entry corresponding to an add instruction
IV. SCRIBE: HARDWARE LAYER
We propose a hybrid diagnosis approach involving both
hardware and software. SCRIBE is the hardware part of
our hybrid scheme and is responsible for exposing the
micro-architectural Resource Usage Information (RUI) to
the software layer, SIED. This allows SIED to identify the
faulty resource(s) upon a failure due to an intermittent fault.
In addition, SCRIBE also logs the addresses of the executed
branches, so that the program’s control ﬂow can be restored
in case of a failure (Section V-A). The detailed design of
the SCRIBE layer was presented in our earlier work [21].
B. SCRIBE structure
To implement SCRIBE, we augment each Reorder Buffer
(ROB) entry with an X bit ﬁeld (X ∝ lg(Total number of
resources)) to store the RUI of the instruction corresponding
to that entry. This ﬁeld is ﬁlled with a valid RUI entry as the
instruction traverses the pipeline and makes use of speciﬁc
resources. As the instruction has completed its execution
when it reaches the commit stage, its complete RUI is known
when in the commit stage. The RUI entries are sent to the
memory hierarchy when their instructions are retired from
ROB, and hence only the RUI entries of the instructions
366366366
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:27:50 UTC from IEEE Xplore.  Restrictions apply. 
on the correct path of branch prediction will be sent to the
memory.
SCRIBE consists of two units:. (i) The logging unit is in
charge of aligning the RUI entries and sending them to the
priority handling unit. (ii) The priority handling unit is in
charge of choosing between a regular store and a logging
store to send to memory. We name the process of sending
RUI to the memory hierarchy as a Logging Store.
Logging Unit: Figure 3 shows the design of the logging
unit, consisting of logging buffer, alignment circuit, and
LogSQ.
other hand, if regular stores are not sent to memory in time,
the processor’s commit mechanism will stall, also degrading
performance.
Our solution is to use a hybrid approach where we switch
the priorities between the logging stores and the regular
stores based on the size of the LogSQ. In other words, we
prioritize regular load/store instructions by default, until the
logging mechanism starts stalling the commit stage (because
of one partition becoming full before the other one is
processed). At this point, the logging store instructions gain
priority over regular load/stores, until the logSQ is drained.
V. SIED: SOFTWARE LAYER
In this section, we present SIED, the software portion of
our technique.
Figure 3: The Logging Unit includes the Logging Buffer,
Alignment Circuit and LogSQ
Figure 4: Flow of information during the diagnosis process
When an instruction is retired from the ROB, the RUI
ﬁeld of its ROB entry will be inserted into the Logging
Buffer (LB). The LB is a dual partitioned queue and is in
charge of keeping the RUI of the retired instructions. Each
of the partitions of the LB get ﬁlled separately. To enable
faster writing of the RUI data to memory, we store them
as quad-words in memory. The alignment circuits creates
quad-words from RUI data in the LB and sends them to the
LogSQ. When one of the partitions becomes full, its data
is processed by the alignment circuit and the other partition
starts getting ﬁlled and vice versa. Thus, data processing
and ﬁlling modes alternate with each other in each partition
of the logging unit.
Logging Store Queue (LogSQ) buffers the quad-words sent
by the alignment circuits before they are sent to memory.
These quadwords compete with the memory trafﬁc sent by
the regular loads and stores of the program. This process is
explained below. If the LogSQ is full, the alignment circuits
have to be stalled until a free entry in the logSQ becomes
available.
Priority Unit: The goal of the priority handling unit is
to mediate accesses to main memory between the logging
stores and the regular stores performed by the processor.
The priority handling unit consists of the priority handling
circuit, which makes the decision of which store to send
to memory, and a multiplexer to select between the regular
store instructions and the logging stores.
When both a regular load/store instruction from the pro-
cessor and a logging store instruction from the logSQ are
ready, one of them has to be chosen to be sent to the memory
hierarchy. If logging stores are not sent to the memory on
time, the logSQ will become full and the instruction retiring
mechanism will stall, thereby degrading performance. On the
SIED is launched as a privileged process by the operating
system on a separate core, which enables it to read the
RUI segment in the failed program’s memory written to
by SCRIBE. Therefore, SIED has access to the history of
dynamic instructions executed before the failure, and the
micro-architectural resources used by those instructions.
Figure 4 shows the steps taken by SIED after a failure.
First, the program is replayed on a separate core until the
failed instruction, during which its DDG is built. The DDG
is augmented with the RUI and the register/memory dumps
from the original and replayed program executions. This
process is explained in Section V-A. The augmented DDG
is then fed to the DDG analysis step in Figure 4 which uses
backtracking of DDG to ﬁnd the candidates of the faulty
resource. This process is explained in Section V-B.
Example: We consider the program in Table I as a
running example to explain the diagnosis steps. The example
is drawn from execution of the benchmark mcf from SPEC
2006 benchmark suite on our simulator. However, some
instructions have been removed from the real example to
illustrate as many cases as possible in a compact way. As
the program is executing, SCRIBE monitors the execution of
instructions and logs their RUI to memory. The RUI logged
by SCRIBE during the original execution is shown in Table
I (the real RUI history includes a few thousands of entries;
however, we only show the last few entries for brevity). For
example, row #2 in Table I shows that the store quadword
instruction has used entry 26 of the ROB, entry 15 of LSQ,
entry 16 of IFQ, entry 11 of RS and functional unit 5 which
is one of the memory ports (we consider memory ports as
functional units).
Assume that in this example, the processor has multiple
functional units, and the second functional unit (f u-1) is
367367367
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:27:50 UTC from IEEE Xplore.  Restrictions apply. 
#
1
2
3
4
5
6
7
8
9
Instruction
addi r1, -1, r1
stq r1, 400(r15)
bic r3, 16, r3
stl r3, 0(r9)
bis r31, r15, r30
ldq r1, 0(r30)
ldq r3, 8(r30)
ldq r30, 16(r30)
stq r5 , -32(r30)
rob
25
26
52
53
84
85
86
87