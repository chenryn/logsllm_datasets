upon the event that the toast was informing them of. For example, following on from the previous instant
message example, the toast may map them to an XAML page in the app where they can view the conversation
and respond to the received message. If no specific XAML page is specified with a toast notification, the default
behavior is to take the user to the app’s main page.
Using Windows Phone’s standard API, ShellToast, applications are only able to send toast notifications that
when tapped link to XAML pages within their own app. That is, URIs must be relative to the app, such as
/MyXaml.xaml.
In Windows Phone 8 (not 8.1), however, this restriction can be bypassed by calling the underlying native API,
Shell_PostMessageToast(), which is exported by ShellChromeAPI.dll. That is to say, if an application crafts a
call to Shell_PostMessageToast() in the right way, a toast can be sent that when tapped launches an XAML page
in a completely different app, parameters to the XAML page included. cpuguy disclosed and demonstrated this
on xda-developers.com, in a forum post located here at http://forum.xda-developers .com/showthread.php?
t=2398275.
So, for example, a malicious app could send a toast via Shell_PostMessageToast() that when tapped launches
VulnerablePage.xaml in another third-party app, with custom parameters; that is:
/VulnerablePage.xaml?params=maliciousData
In this sense, toast notifications represent an interesting entry point in a similar way to protocol handlers—to
enter into the OnNavigatedTo() method of an XAML page. However, unlike protocol handlers, which generally
map to hard-coded XAML pages, sending toasts allows entry into arbitrary XAML pages of other third-party apps
—as long as the user taps the toast. Consider, for example, an XAML page that is responsible for making
important configuration changes, which could be leveraged by coaxing an unsuspecting user into tapping a
seemingly innocuous toast notification.
XAML pages (and their implementation code) that are deliberately mapped via protocol handlers may be coded
defensively, because developers are aware that such well-exposed entry points are prime targets for attack.
However, pages that developers never intended to be arbitrarily callable by anyone other than themselves may
be less secure. For example, some XAML page implementations may parse arguments and assume they are
trusted, because that page was not mapped via a protocol handler or any other means. Toasts provide a means
for attacking these.
This type of attack has been dubbed Cross-Application Navigation Forgery by Alex Plaskett and Nick Walker in
their Windows Phone 8 security whitepaper
(https://labs.mwrinfosecurity.com/system/assets/651/original/mwri_wp8_appsec-whitepaper-syscan_2014-
03-30.pdf).
This exact attack is what allowed all capabilities to be gained on the Samsung Ativ running certain versions of
Windows Phone, by opening a registry editor in the Diagnosis app that was otherwise inaccessible. (See the
Chapter 10 section, “Building a Test Environment.”)
Sending Arbitrary Toasts
You can send arbitrary toast notifications using the Shell_PostMessageToast() API from ShellChromeAPI.dll,
which has the following function prototype:
WINADVAPI
VOID
APIENTRY
Shell_PostMessageToast(
_In_ TOAST_MESSAGE* toastMessage
);
The useful metadata for the toast itself is passed in via a pointer to a TOAST_MESSAGE structure, which has the
following form:
typedef struct _TOAST_MESSAGE
{
CLSID guid;
LPCWSTR lpTitle;
LPCWSTR lpContent;
LPCWSTR lpUri;
LPCWSTR lpType;
} TOAST_MESSAGE;
The Windows Phone 8 SDK does not ship with an import library file (.lib) for ShellChromeAPI.dll, so to call
Shell_PostMessageToast() you need to create your own import library and link your native code against it, so
that the Windows Phone knows at load time to look in ShellChromeAPI.dll’s export table for the
Shell_PostMessageToast() entry point and henceforth use it.
You should fill each of the structure members as follows:
guid (the app’s GUID, or ProductID)—This is the ProductID that is present in the app’s manifest file
and also forms part of the full path of the app’s Install and isolated storage directories.
lpTitle—This is the pointer to the title appearing on the toast notification.
lpContent— This is the pointer to the message displayed in the toast notification.
lpUri—This is the pointer to the URI that the toast should send users to if they tap the toast.
lpType—This is the pointer to the type of toast. The string can be empty.
Because the GUID for the app being attacked is discoverable via its manifest and its local data and Install
directories, and because the title, content, and type are mostly arbitrary, the remaining important argument to
suitably craft is the URI, lpUri.
The URI takes the following form:
app://GUID/_default#/;component/SomePage.xaml?myArgs=value
GUID is simply the app’s ProductID GUID. Assembly name is the name of the DLL that the target XAML is—
minus the .dll file extension. The last portion of the URL simply specifies the name of the XAML file, and any
arguments you want to pass to it, which will reach (and most likely be parsed) in the XAML implementation’s
OnNavigatedTo() handler method.
For demonstration purposes, let’s work through a concrete example of a real application and construct a URI so
that when the toast is sent and tapped, functionality in that app will be launched, even though the toast was sent
by an entirely different app (Native Toast Notification Launcher). The app used for demonstration purposes in
this case will be LinkedIn, from a non-attacking perspective. From the WMAppManifest.xml file extracted from
the app’s Install directory, we know that the app’s product ID GUID is bdc7ae24-9051-474c-a89a-2b18f58d1317.
First, you’ll need to figure out what XAML pages the application actually has. To do this, you need to use your
filesystem access to copy a .NET assembly from the app’s Install folder; that is, C:\Data\Programs\
{GUID}\Install. After you have it on your test laptop, load it in .NET reflector and browse to Resources on the
right side panel (the “assembly browser”).
As shown in Figure 11.7, you can see a list of all the XAML pages available in the linkedin.dll assembly
(linkedin will therefore correspond to  in the URI). Choosing one that sounds interesting,
/views/companypage.xaml, you will then find the corresponding reflected C# code that implements its logic.
Figure 11.7 .NET reflector showing XAML pages in a Windows Phone 8 application
In looking through the methods, it’s clear that OnNavigatedTo() has indeed been implemented, which will be the
code entry point when the XAML page is navigated to. (See Figure 11.8.)
Figure 11.8 .NET reflector showing an XAML page’s OnNavigatedTo() implementation
Analysis of the reflected code for OnNavigatedTo() shows parsing of the query string to extract several
parameters. These are then used to create a company information page. Parameters named id, name, industry,
and logourl are parsed out and used in the generated company information page.
Putting all this together, you can form the following URI to call into the XAML page to have the app generate a
company profile page for a fictional company of your choice, Acme Corp:
app://bdc7ae24-9051-474c-a89a-2b18f58d1317 /_default#/linkedin;
component/views/companypage.xaml?id=test&name=Acme%20Corp
&industry=Exploding%20Tennis%20Balls
&logourl=http://uva.onlinejudge.org/external/116/p11613.jpg
Now, to send the toast you need to call Shell_PostMessageSend() with the correct parameters, including the
preceding URI. The process for creating a toast-sending application involves creating an import library (.lib) for
ShellChromeAPI .dll, writing the necessary native code to call into Shell_PostMessageSend(), linking against
your import library, and then writing managed code wrappers and an interface.
Fortunately, cpuguy from the xda-developers.com forum released an application for sending custom toasts; all
the app requires is for users to input an app:// URI of their choice! You can therefore use cpuguy’s app for
arbitrary XAML page testing or Cross-Application Navigation Request Forgery.
The app, Native Toast Notification Launcher, is available for download as an attachment in cpuguy’s original
post detailing the discovery: http://forum .xda-developers.com/showthread.php?t=2398275.
Figure 11.9 shows that the previous app:// URI was typed into the toast launcher app and sent, giving the
following toast notification.
Figure 11.9 The Native Toast Notification Launcher sending a toast message
Tapping the toast reveals the screen shown in Figure 11.10, indicating successful launch of the target XAML
page, showing a fake profile for Acme Corp.
Figure 11.10 The XAML screen launched after you tap the toast notification
Although the preceding example is relatively benign, it shows how toast notifications can provide an interesting
and unexpected (by developers) entry point into pages that weren’t supposed to be arbitrarily reachable, and it
follows that the potential for security issues because of this is significant. Remember that this technique only
works on Windows Phone 8 and appears to be completely fixed on Windows Phone 8.1.
Sending Toast Notifications Remotely
Applications may register to receive toasts remotely via push notifications received from Microsoft Push
Notification Service (MPNS). Registering for a push notification channel allows the developer of the app to send
notifications, including toasts, to instances of the app. Alternatively, the app’s vendor may register with a cloud
service that will do the push notifications for them, because push channel registrations with MPNS are not per
app, but per device. Introductions to push notifications and toast notifications from a code-level perspective are
available on MSDN at http://msdn.microsoft.com/en-us/library/windows/apps/ff402558(v=vs.105).aspx, and
http://msdn.microsoft.com/en-us/library/windows/apps/hh202967(v=vs.105).aspx.
When a device is running Windows Phone 8 (again, not 8.1), and a target app has registered for push
notifications, Cross-Application Navigation Forgery attacks identical to those described and shown in the
previous pages are theoretically possible to carry out by remote attackers.
Let’s first examine how apps register for push notifications and then discuss how attackers may be able to send
their own push notifications to carry out Cross-Application Navigation Forgery attacks under certain
circumstances.
Applications open a push notification channel with MPNS using the HttpNotificationChannel API. Each
instance of a particular application receives a unique URL from MPNS when it registers for push notifications.
Ultimately, this URL can be used by the app’s vendor or a cloud service to send push notifications to the
associated device.
Every time an app that wants to receive push notifications launches, it checks for an open push notification
channel, because a channel may have been created for it in a previous instance of the app. If an existing push
channel is found, the URL will be sent to the application developer or a cloud service that the developer utilizes
to send push notifications. If an existing channel is not found, a channel is opened, and toast notifications are
opted into by calling BindToShellToast() on the channel object.
The following code illustrates the basic code outline:
HttpNotificationChannel pushChannel;
/* try to find an existing push channel */
pushChannel = HttpNotificationChannel.Find("myPushChannel");
/* no push channel found – open a new one */
if (pushChannel == null)
{
pushChannel = new HttpNotificationChannel("myPushChannel");
// register for this event so that we can capture the
// URL that refers to our push channel and send it to the
// app developer or our cloud service */
pushChannel.ChannelUriUpdated += new
EventHandler(
PushChannel_ChannelUriUpdated);
/* just an error handler */
pushChannel.ErrorOccurred += new
EventHandler(
PushChannel_ErrorOccurred);
/* we register for this event if we also want to receive toast
notifications when our app is closed */
pushChannel.ShellToastNotificationReceived +=
new EventHandler(
PushChannel_ShellToastNotificationReceived);
/* open the channel */
pushChannel.Open();
/* we want to receive toast notifications via push */
pushChannel.BindToShellToast();
}
/* otherwise, we already had a push channel open */
else
{
// register for this event so that we can capture the URL
// that refers to our push channel and send it to the app
// developer or our cloud service */
pushChannel.ChannelUriUpdated += new
EventHandler(
PushChannel_ChannelUriUpdated);
pushChannel.ErrorOccurred += new
EventHandler(
PushChannel_ErrorOccurred);
// we register for this event if we also want to receive
// toast notifications when our app is closed */
pushChannel.ShellToastNotificationReceived += new
EventHandler(
PushChannel_ShellToastNotificationReceived);
/* send our MPNS URL to the developer or cloud service we use */
SendUrlToDeveloper(pushChannel.ChannelUri.ToString());
}
}
Note that both the if and the else code paths register for the ChannelUriUpdated notification. This results in the
handler, PushChannel_ChannelUriUpdated() being called if the MPNS URL associated with the channel changes.
If the channel already exists, as in this example, the URL doesn’t change; hence the URL is sent to the app
vendor or cloud service at the end of the else block.
In the if block, which runs if a channel doesn’t already exist, a channel opens and the app registers for toast
notifications. Because this creates a new channel, an MPNS URL is associated with it, and the
ChannelUriUpdated event handler will be called. In this handler function is where the URL can be sent to the app
vendor or cloud service for perusal in sending out push notifications to the device:
void PushChannel_ChannelUriUpdated(
object sender, NotificationChannelUriEventArgs e)
{
Dispatcher.BeginInvoke(() =>
{
// send URL to developer/vendor or cloud service
SendUrlToDeveloper(e.ChannelUri.ToString());
});
}
At this point, the hypothetical application will have a channel for push notifications, and the app’s vendor or
cloud service will have received the unique MPNS URL that will ultimately be used to send out push messages
to the device. The app vendor or cloud service will make HTTP POST requests to the MPNS URL. The exact form
of the requests and data depends on the push message to be sent to the associated device.
The MPNS URL itself has a form similar to the following:
http://db3.notify.live.net/throttledthirdparty/01.00/
AQZFFGnGGQRI4BFLSKVRYR9xk6FbAgAAAAADKwAAAAQDQYmL98kIxMjIxPOQ
xOTEvqDlZASQbaFzqTY6k8uML
Clearly, the token part of the URL is long and intentionally unpredictable. It doesn’t indicate which app it is
associated with.
If an attacker has the URL associated with a device’s push channel, then he is able to send push messages to the
device—in this case, toast notifications. Two general attack scenarios exist here in which an attacker may gain
knowledge of this URL.
The first is that applications may send the URL to the vendor, developer, or cloud service insecurely; that is, via
a plaintext HTTP session, meaning that any suitably positioned attacker can eavesdrop on the URL that is being
communicated, thereby gaining access to deliver push notifications to the device.
For the second scenario, notice that the MPNS URL itself is a simple http:// URL, as opposed to https://. This
means that a suitably positioned attacker may also eavesdrop on requests being made to the MPNS URL,
gaining knowledge of the URL and enough knowledge to make push notifications to the associated device.
The second case is, at present, unfortunately unavoidable; this URL was generated by MPNS, and this is the
URL that must be used, thus the potential for eavesdropping on the URL is quite real.
In the first case, eavesdropping potential boils down to the app insecurely transmitting the URL to the vendor or
cloud service, which is clearly avoidable, so when assessing apps, check for secure communication of the MPNS
URL to the vendor or cloud service.
In any case, if an attacker does indeed glean knowledge of a MPNS URL, all he has to do is make a suitably
crafted POST request to it—in XML. The following request sends a toast notification with an app:// URL in it to
conduct a Cross-Application Navigation Request Forgery attack on a hypothetical would-be vulnerable app:
Hi..
This is a toast notification
app://acb5a845-77a7-4480-be66-
b32e927f77c5/_default#/myAssembly;component/SomePage.xaml?myArgs=
maliciousData
Then, assuming the user received and tapped the toast, the XAML page would be navigated to—as long as the OS
version is previous to 8.1.
Mitigating the risk involved with attackers attacking instances of an app by their knowledge of the MPNS URL is
possible. (See Chapter 13.)
Attacking XML Parsing
Like apps for other smartphone platforms, many Windows Phone apps need to parse XML either from local
files, or more interestingly, from remote sources. For example, applications may receive XML in HTTP
responses, which they parse, store for later parsing, or both.
This section covers a few ways a developer can trip up and introduce security bugs when parsing XML in
Windows Phone apps.
Introducing the XDocument API
The standard API for parsing XML documents on the Windows Phone 8.x OSes is XDocument; you can find the
full documentation for it on MSDN (see http://msdn.microsoft.com/en-
us/library/system.xml.linq.xdocument(v=vs.110) .aspx).
XDocument forms part of the LINQ framework. The numerous other XML-parsing APIs that are available in the
desktop Windows OSes, such as XmlDocument and XmlTextReader, are unavailable on the Windows Phone 8.x
platforms; the only Microsoft-supplied API is XDocument (and associated classes).
LINQ, which stands for Language-Integrated Query, is a framework that bridges the gap between data and
objects. XDocument is a class that allows XML documents to be parsed using LINQ queries—that is, in a syntax
and fashion that will be quite familiar to readers who use SQL languages.
Consider this quick example of XDocument’s use to parse a simple XML document to get an idea for how a simple
but realistic XML document may be parsed in real code. A hypothetical app may need to parse an XML
document that looks like this: