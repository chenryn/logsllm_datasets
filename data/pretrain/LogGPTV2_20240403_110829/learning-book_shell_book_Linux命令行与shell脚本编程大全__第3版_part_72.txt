### 优化后的文本

```bash
$ echo *rich_blun8here,now* | ./isenai
$ echo *rich/blumghere.nov* | ./isenai1
$ echo *richfblumghere.nov* | ./isemail
$ echo *rich*blumghere.nov* | ./isenai1
```

#### 20.5 小结
在处理shell脚本中的数据文件时，熟悉正则表达式是必不可少的。正则表达式不仅在Linux实用工具和编程语言中得到广泛应用，还在许多采用了正则表达式引擎的应用程序中有所体现。在Linux中，存在多种不同的正则表达式引擎，其中最流行的两种是POSIX基础正则表达式（BRE）引擎和POSIX扩展正则表达式（ERE）引擎。sed编辑器主要遵循BRE引擎，而gawk程序则支持ERE引擎中的大多数特性。

正则表达式定义了用于过滤数据流中文本的模式模板。这些模式由标准文本字符和特殊字符组成。正则表达式引擎利用这些特殊字符来匹配单个或多个字符，类似于其他应用程序中的通配符机制。

通过结合普通字符和特殊字符，你可以创建出能够匹配多种数据类型的模式。随后，可以使用sed编辑器或gawk程序从大量数据中筛选出特定信息，或者验证来自其他数据输入应用的数据。下一章将深入探讨如何利用sed编辑器进行高级文本处理。sed编辑器提供的众多高级功能使其在处理大型数据集和数据过滤方面极为有用。

---

## 第21章 sed进阶

### 本章内容
- 多行命令
- 保持空间
- 排除命令
- 改变流
- 模式替代
- 在脚本中使用sed
- 创建sed实用程序

第19章介绍了如何利用sed编辑器的基本功能来处理数据流中的文本。尽管sed编辑器的基础命令足以满足大部分日常文本编辑需求，但本章将进一步介绍其更多高级特性。虽然这些功能可能不常用，但在需要时了解它们的存在及用法是非常有益的。

#### 21.1 多行命令
在使用sed编辑器的基础命令时，你可能会注意到一个限制：所有sed编辑器命令都是针对单行数据执行操作的。当sed编辑器读取数据流时，它会基于换行符的位置将数据分成多行，并逐行处理。然而，在某些情况下，你需要对跨多行的数据执行特定操作。例如，如果你正在查找短语“Linux System Administrators Group”，该短语很可能分布在两行中。此时，普通的sed编辑器命令将无法识别这种分散的短语。

幸运的是，sed编辑器的设计者已经考虑到了这种情况，并提供了相应的解决方案。sed编辑器包含了三个用于处理多行文本的特殊命令：
- **N**：将数据流中的下一行添加到当前行，形成一个多行组以供处理。
- **D**：删除多行组中的一行。
- **P**：打印多行组中的一行。

接下来的几节将进一步讲解这些多行命令，并演示如何在脚本中使用它们。

##### 21.1.1 next 命令
在讨论多行next命令之前，我们先来看看单行版本的next命令是如何工作的，这有助于更好地理解多行版本的next命令。

###### 1. 单行next命令
小写的`n`命令告诉sed编辑器移动到数据流中的下一行，而不需要重新执行整个命令列表。通常情况下，sed编辑器会在移动到下一行之前，在当前行上执行所有定义好的命令。单行next命令改变了这一流程。

例如，假设你有一个包含5行内容的数据文件，其中有两行为空。目标是删除首行之后的空白行，而保留最后一行之前的空白行。如果写一个删除空白行的sed脚本，你会删除两个空白行。

```bash
$ cat data1.txt
This is the header line.
<empty line>
This is a data line.
<empty line>
This is the last line.

$ sed '/^$/d' data1.txt
This is the header line.
This is a data line.
This is the last line.
```

由于要删除的行是空行，没有任何文本可供查找。解决办法是使用`n`命令。在这个例子中，脚本查找包含单词“header”的那一行。找到后，`n`命令会让sed编辑器移动到文本的下一行，即空行。

```bash
$ sed '/header/ { n; d }' data1.txt
This is the header line.
This is a data line.
This is the last line.
```

这时，sed编辑器会继续执行命令列表，该命令列表使用`a`命令来删除空白行。sed编辑器执行完命令脚本后，会从数据流中读取下一行文本，并从头开始执行命令脚本。因为sed编辑器再也找不到包含单词“header”的行，所以不会删除其他行。

###### 2. 合并文本行
了解了单行版的next命令后，现在来看看多行版的。单行next命令会将数据流中的下一行移动到sed编辑器的工作空间（称为模式空间）。多行版本的next命令（大写的`N`）会将下一行添加到模式空间中已有的文本后面。

这样做的效果是将数据流中的两行文本合并到同一个模式空间中。文本行仍然用换行符分隔，但sed编辑器现在会将两行文本当作一行来处理。

下面的例子演示了`N`命令的工作方式。

```bash
$ cat data2.txt
This is the header line.
This is the first data line.
This is the second data line.
This is the last line.

$ sed '/first/ { N; s/\n/ / }' data2.txt
This is the header line.
This is the first data line. This is the second data line.
This is the last line.
```

sed编辑器脚本查找包含单词“first”的那行文本。找到该行后，它会用`N`命令将下一行合并到该行，然后用替换命令`s`将换行符替换成空格。结果是，文本文件中的两行在sed编辑器的输出中变成了一行。

如果要在数据文件中查找一个可能分散在两行中的文本短语，这是非常实用的应用。这里有一个例子：

```bash
$ cat data3.txt
On Tuesday, the Linux System
All System Administrators should attend.
Administrator's group meeting will be held.
Thank you for your attendance.

$ sed 'N; s/System\nAdministrator/Desktop User/' data3.txt
On Tuesday, the Linux Desktop User's group meeting will be held.
All Desktop Users should attend.
Thank you for your attendance.
```

替换命令会在文本文件中查找特定的双词短语“System Administrator”。如果短语在同一行中，事情很好处理，替换命令可以直接替换文本。但如果短语分散在两行中，替换命令就无法识别匹配的模式。

这时`N`命令就可以派上用场了。

```bash
$ sed 'H; s/System\.Administrator/Desktop User/; x' data3.txt
On Tuesday, the Linux Desktop User's group meeting will be held.
All Desktop Users should attend.
Thank you for your attendance.
```

用`N`命令将发现第一个单词的那行和下一行合并后，即使短语内出现了换行，你仍然可以找到它。

注意，替换命令在“System”和“Administrator”之间用了通配符模式（`.`）来匹配空格和换行符这两种情况。但当它匹配了换行符时，它会从字符串中删掉换行符，导致两行合并成一行。这可能不是你想要的结果。

要解决这个问题，可以在sed编辑器脚本中使用两个替换命令：一个用来匹配短语出现在多行中的情况，另一个用来匹配短语出现在单行中的情况。

```bash
$ sed 'N
s/System\nAdministrator/Desktop\nUser/
s/System Administrator/Desktop User/' data4.txt
On Tuesday, the Linux Desktop
User's group meeting will be held.
All System Administrators should attend.
```

由于“System Administrator”文本出现在数据流的最后一行，`N`命令会错过它，因为没有其他行可读入模式空间与之合并。你可以轻松地解决这个问题—将单行命令放到`N`命令前面，并将多行命令放到`N`命令后面，像这样：

```bash
$ sed '
s/System Administrator/Desktop User/
s/System\nAdministrator/Desktop\nUser/
N' data4.txt
On Tuesday, the Linux Desktop
User's group meeting will be held.
All Desktop Users should attend.
```

现在，查找单行中短语的替换命令在数据流的最后一行也能正常工作，多行替换命令则会负责短语出现在数据流中间的情况。

##### 21.1.2 多行删除命令
第19章介绍了单行删除命令（`d`）。sed编辑器用它来删除模式空间中的当前行。但与`N`命令一起使用时，使用单行删除命令就要小心了。

```bash
$ sed 'N;/System\nAdministrator/d' data4.txt
All System Administrators should attend.
```

删除命令会在不同的行中查找单词“System”和“Administrator”，然后在模式空间中将两行都删掉。这未必是你想要的结果。

sed编辑器提供了多行删除命令`D`，它只删除模式空间中的第一行。该命令会删除到换行符（含换行符）为止的所有字符。

```bash
$ sed 'N;/System\nAdministrator/D' data4.txt
Administrator's group meeting will be held.
All System Administrators should attend.
```

文本的第二行被命令加到了模式空间，但仍然完好。如果需要删除目标数据字符串所在行的前一文本行，它能派得上用场。

这里有个例子，它会删除数据流中出现在第一行前的空白行。

```bash
$ cat data5.txt
<empty line>
This is the header line.
This is a data line.
<empty line>
This is the last line.

$ sed '/^$/ { N; /header/D }' data5.txt
This is the header line.
This is a data line.
<empty line>
This is the last line.
```

sed编辑器脚本会查找空白行，然后用`N`命令将下一行添加到模式空间。如果新的模式空间内容包含单词“header”，则`D`命令会删除模式空间中的第一行。如果不结合使用`N`命令和`D`命令，就不可能在不删除其他空白行的情况下只删除第一个空白行。

##### 21.1.3 多行打印命令
现在，你可能已经了解了单行和多行版本命令之间的差异。多行打印命令`P`沿用了同样的方法。它只打印多行模式空间中的第一行。这包括模式空间中直到换行符为止的所有字符。当你用`-n`选项阻止脚本输出时，它和显示文本的单行`p`命令的用法大同小异。

```bash
$ sed -n 'N;/System\nAdministrator/P' data3.txt
On Tuesday, the Linux System
```

当多行匹配出现时，`P`命令只会打印模式空间中的第一行。多行`P`命令的强大之处在于与`N`命令和`D`命令组合使用时。

`D`命令的独特之处在于强制sed编辑器返回到脚本的起始处，对同一模式空间中的内容重新执行这些命令（它不会从数据流中读取新的文本行）。在命令脚本中加入`N`命令，你就能单步扫过整个模式空间，将多行一起匹配。

接下来，使用`r`命令打印出第一行，然后用`D`命令删除第一行并绕回到脚本的起始处。一旦返回，`N`命令会读取下一行文本并重新开始这个过程。这个循环会一直继续下去，直到数据流结束。

#### 21.2 保持空间
模式空间（pattern space）是一块活跃的缓冲区，在sed编辑器执行命令时它会保存待检查的文本。但它并不是sed编辑器保存文本的唯一空间。

sed编辑器还有另一块称为保持空间（hold space）的缓冲区域。在处理模式空间中的某些行时，可以用保持空间来临时保存一些行。有五条命令可用于操作保持空间，见表21-1。

| 命令 | 描述 |
| --- | --- |
| `h` | 将模式空间复制到保持空间 |
| `H` | 将模式空间附加到保持空间 |
| `g` | 将保持空间复制到模式空间 |
| `G` | 将保持空间附加到模式空间 |
| `x` | 交换模式空间和保持空间的内容 |

这些命令用于将文本从模式空间复制到保持空间。这可以清空模式空间来加载其他要处理的字符串。

通常，在使用`h`或`H`命令将字符串移动到保持空间后，最终还要用`g`、`G`或`x`命令将保存的字符串移回模式空间（否则，你就不用在一开始考虑保存它们了）。

由于有两个缓冲区域，弄清楚哪行文本在哪个缓冲区域有时会比较麻烦。这里有个简短的例子演示了如何用`n`和`g`命令来将数据在sed编辑器缓冲空间之间移动。

```bash
$ cat data2.txt
This is the header line.
This is the first data line.
This is the second data line.
This is the last line.

$ sed -n '/first/ { h; p; n; p; g; p }' data2.txt
This is the first data line
This is the second data line,
This is the first data line.
```

我们来一步一步看上面这个代码例子：
1. sed脚本在地址中用正则表达式来过滤出包含单词“first”的行；
2. 当包含单词“first”的行出现时，`h`命令将该行放到保持空间；
3. `p`命令打印模式空间，也就是第一个数据行的内容；
4. `n`命令提取数据流中的下一行（`This is the second data line`），并将它放到模式空间；
5. `p`命令打印模式空间的内容，现在是第二个数据行；
6. `g`命令将保持空间的内容（`This is the first data line`）放回模式空间，替换当前文本；
7. `p`命令打印模式空间的当前内容，现在变回第一个数据行。

通过使用保持空间来回移动文本行，你可以强制输出中第一个数据行出现在第二个数据行后面。如果丢掉了第一个`p`命令，你可以以相反的顺序输出这两行。

```bash
$ sed -n '/first/ { h; n; p; g; p }' data2.txt
This is the first data line.
This is the second data line,
```

这是一个有用的开端。你可以用这种方法创建一个sed脚本来反转整个文件的文本行！但要做到这一点，你需要了解sed编辑器的排除特性，这就是下一节的内容。

#### 21.3 排除命令
第19章演示了sed编辑器如何将命令应用到数据流中的每一行文本，或者由单个地址或地址区间特别指定的多行。你也可以配置命令使其不要作用于数据流中的特定地址或地址区间。

感叹号命令（`!`）用来排除命令，即让原本会起作用的命令不起作用。下面的例子演示了这一特性。

```bash
$ sed -n '/header/!p' data2.txt
This is the second data line.
This is the first data line.
This is the last line.
```

希望这些优化后的文本更加清晰、连贯和专业。如果有任何进一步的问题或需要更多的修改，请告诉我。