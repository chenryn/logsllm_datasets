entry for a certain access request. 
OC:  OC 
is  a  set  of  open  constraints.  Open 
constraints are Boolean expressions which have 
to  be  evaluated  before  a  cache  entry's 
permission  can  be  used  as  response.  We  will 
elaborate on OCs in section 3.2.5. 
P  is  the  permission  which  is  returned  as  a 
decision  response  if  the  cache  entry  maps  to  a 
decision  request.  P  can  hold  the  responses 
PERMIT  or  DENY.  P  assumes  that  all  open 
constraints  evaluate  to  true.  Only  if  this  is  the 
case then P is returned as decision response. 
P: 
(SR), and a set of of revoke events (RE). We write it as 
DR(TE,  SR,  {RT}).  We  will  describe  each  of  the 
elements  below.  For  a  better understanding,  however, 
we introduce the notion of an event first.  
During  the  execution  of  a  process  events  happen. 
An  event  is  the  transition  from  one  state  to  another 
state given a process or task instance. An event(action, 
resource,  subject,  piid,  [tiid])  is  a  tuple  of  five  fields 
(whereas  the  field  tiid  is  optional;  tiid  stands  for task 
instance ID and uniquely identifies the respective task 
instance  if  available).  Each  of  the  fields  can  adopt 
values  describing  the  occurring  transition  during  the 
process  execution.  A  typical  example  is  given  as 
follows.  Assume  a  user  with  the  subject  ID  'Alice' 
creates  a  new  process 
the  process 
'PurchaseOrder'.  The  access  control  check  approves 
that Alice has the permissions to create the process and 
eventually  a  process  instance  with  a  process  instance 
ID  (piid)  4711  is  created.  The  event  in  this  case  is 
event(createProcess, PurchaseOrder, Alice, 4711).  
instance  of 
The  purpose  of  a  dependency  relation  is  to  define 
on  which  events  occurring  in  the  system  new  cache 
entries  should  be  created  and  on  which  events  in  the 
system obsolete cache entries should be revoked. In the 
following  paragraph  we  introduce  the  three  elements 
TE, SR, and RE of a dependency relation. 
The  trigger  event  TE(action,  resource,  subject) 
describes  the  event  on  which  a  new  cache  entry  is 
created.  It  defines  an  action,  resource,  and  subject 
element. Events of the system can  match  with trigger 
events  if  the  elements  of  the  event  are  equal  to  the 
elements of the trigger event. If this is the case, a new 
cache  entry  is  created.  The  elements  action,  resource, 
and  subject  are  specified  as  values  (e.g.,  action  = 
'createProcess').  Alternatively,  they  can  be  defined  as 
random.  The  random  placeholder  helps  specifying 
dependency  relations  which  do  not  only  match  to 
events 
action-resource-subject-
combinations,  but  also  being  relevant  for  an  event 
where,  for  instance,  only  the  action  and  resource 
elements  are  relevant  but  the  subject  element  may 
arbitrary.  An  example 
is 
TE('createProcess',  *,  *).  It  states  that  the  TE  will 
match with any event having the action 'createProcess', 
independent of the resource and subject. 
trigger  event 
specific 
The successor request SR(action, resource, subject, 
piid) defines the action, resource, subject and process 
instance ID for which a new cache entry is generated. 
An example stating that a cache should be created for 
the action 'cancelProcess', the resource 'PurchaseOrder' 
and 
'Alice'  would  be  specified  as 
SR('cancelProcess',  'PurchaseOrder',  'Alice',  event.piid). 
The  process  instanceID  is  taken  from  the  event  that 
triggered the cache generation. 
the  subject 
for  a 
with 
148158
We can also specify a cache entry which should be 
created for the same resource as given  with the event 
triggering the cache creation; we define a reference to 
the  resource  of 
the  event  as  resource  element: 
SR('cancelProcess', event.resource , 'Alice', event.piid). 
There are situations where given an event multiple 
cache  entries  should  be  created;  one  cache  entry  for 
each subject out of a set of subjects. This requires that 
the  field  subject  in  SR  must  possibly  hold  the  set  of 
subjects  or  refer  to  an  external  function  to  be  called 
when the required set of subjects should be determined.  
The third element of a dependency relation is a set 
of  revoke  events,  RE(action,  resource,  subject,  piid). 
These  elements  are 
the 
occurrence  of  a  certain  event 
the  cache  entries 
generated are revoked from the cache. Note that each 
dependency  relation  defines  the  events  which  revoke 
exactly those cache entries that have been provoked by 
the dependency relation to be created.  
responsible 
that  upon 
An  example  for  a  revoke  event  definition  is 
RE('endProcess',  'PurchaseOrder',  'Alice',  event.piid). 
It  states  that  the  cache  entry  previously  generated  
should  be  removed  whenever  the  event('endProcess', 
'PurchaseOrder',  'Alice',  event.piid)  occurs.  During 
runtime, event.piid has to be replaced with the process 
instance  ID  of  the  initial  event  which  triggered  the 
cache entry generation.In the following we give a few 
examples for dependency relations.  
The  first  example  defines  a  dependency  relation 
with an event trigger for the action 'createProcess' and 
no further specification of subject or resource. Further, 
the  dependency  relation  defines  a  successor  request 
which  generates  cache  entries 
the  action 
'cancelProcess',  for  the  same  resource  which  initially 
triggered  the  event,  and  for  each  user  which  is 
according  to  the  role  resolution  a  potential  user  
to  perform 
the  
list  of  potential  users  we  use  the  informal  function  
call  pdp.getPotentialUserList(action,  resource)  which 
retrieves the list of potential users from the PDP. The 
last element of the dependency relation states a set of 
REs 
the  action 
'endProcess'  or  'cancelProcess'  will  revoke  the  cache 
entries  previously  generated.  The  referencing  link 
between the cache entries and the revoke events is the 
process instance id. 
such  an  action.  To 
that  events  with 
that  defines 
retrieve 
for 
DR( TE( 'createProcess', *, * ), SR( 'cancelProcess', 
event.resource, pdp.getPotentialUserList( 'cancelProcess', 
event.resource), { }, event.piid), {RE('endProcess', *, *, 
event.piid), RE('cancelProcess', *, *, event.piid)}) 
The  second  example  defines 
relation 
two 
'CheckCustomerRating'  and 
between 
the  dependency 
tasks 
'ApproveCredit'  of  a 
consecutive 
149159
process  'LoanOrigination'.  It  states  if  the  first  of  the 
two tasks is completed, cache entries for the upcoming 
second  task  can  be  generated.  Also  in  this  case,  we 
generate a cache entry for each user which potentially 
may claim the task. These cache entries are used when 
a user eventually  wants to claim the task  instance for 
'ApproveCredit'.  Dependency  relations  similar  to  this 
example can be defined for the complete process such 
that 
is  one  dependency 
for  all 
consecutive tasks within a process.  
relation 
there 
DR( TE('endTask', 'LoanOrigination.CheckRating', *), 
SR('claimTask', 'LoanOrigination.ApproveCredit', 
pdp.getPotentialUserList(cancelProcess, event.resource), { }, 
event.piid), {RE('endProcess', *, *, event.piid), 
RE('cancelProcess', *, *, event.piid)}) 
time.  The 
the  current 
trigger  event  for 
The  third  example  demonstrates  a  dependency 
relation  for  a  task  where  the  execution  is  conditioned 
on 
the 
generation of the cache entry is the action 'claimTask' 
where  the  user  is  assigned  to  the  task.  The  successor 
request  shows 
the  action,  resource,  and  subject  
which  is  used  to  generate  the  cache  entry.  Further,  
there  is  the  open  constraint  'wfe.Now(  )  ≥  6.00  AND  
wfe.Now( ) ≤ 17.00' stating that the task may only be 
completed  during  working  hours.  Again,  we  use  the 
informal  notation  wfe.Now(  )  to  retrieve  the  needed 
context  information  from  the  workflow  engine  (wfe), 
the current time in this case. 
DR( TE('claimTask', 'LoanOrigination.OpenAccount', *), 
SR('endTask', 'LoanOrigination.OpenAccount', event.subject, 
{'wfe.Now( ) ≥ 6.00 AND wfe.Now( ) ≤ 17.00' }, event.piid), 
{RE('revokeTask', 'LoanOrigination. OpenAccount', 
event.subject, event.tiid), RE('endTask', 
'LoanOrigination.OpenAccount', *, event.tiid), 
RE('cancelProcess', *, *, event.piid)}) 
The example also specifies revoke events, especially 
for the events  when a  user revokes or ends a task. In 
both cases the cache entry should be removed from the 
cache.  Obviously,  it  should  also  be  removed  if  the 
process is cancelled.  
As demonstrated, one of the sources for DRs are the 
transitions of the life cycles introduced in section 2.1. 
They  represent  a  very  common  view  on  possible  life 
cycles; still every vendor implements its own versions 
of 
slightly.  Hence, 
dependency  relations  based  on  such  task  and  process 
life cycles have to be defined accordingly. 
them  which  might  differ 
The  cache  entry  will  be  generated  wrt 
the 
dependency relation (DR) (see above).  
3.2.5 Cache Entry Generation 
evaluation as they were equally assumed to evaluate to 
true) and P is returned. If one of the OCs evaluates to 
false,  the  cache  entry  can  not  be  used  and  a  regular 
evaluation with the PDP must be done. 
4. Caching Architecture 
an 
event 
The caching architecture extends the above mentioned 
access  control  architecture  with 
four  additional 
components, namely: an access decision cache, a cache 
management 
listening 
component,  and  a  dependency  storage.  The  cache 
stores  all  created  cache  entries  for  policy  decisions. 
Whenever a decision request is made which matches a 
cache request, the cached response is returned. 
component, 
 For  the  evaluation  of  open  constraints  the  cache 
might have to call the respective context providers for 
context  gathering. The cache can either be located on 
the  application  side  functioning  as  proxy  for  each 
access  decision  request,  or  it  can  be  located  at  the 
server side where the policy decision point is located as 
gathering point for all requests.  
Context Provider
  User Interface 
  Layer
PEP
  Workflow
  Engine
PEP
Process / Task
State Management
  Business 
  Object Layer
PEP
We  expect  the  majority  of  access  control  decision 
requests  during  a  process  execution  require  RBAC 
evaluation which does not depend on dynamic context 
information. For the creation of a cache entry in such 
cases, the subject for which the cache entry should be 
created, the respective action and resource is prepared 
as an access decision request and sent to the PDP for 
evaluation. We call this a fake request. The response of 
the fake request is used as cache entry. 
the  evaluation  of  other 
The  evaluation  of  such  a  fake  request  may  also 
require 
than  role-based 
constraint types (cf. section 3.2.2) requiring time, date, 
and  attribute-based  context  information  which  change 
or  may  change  during  a  process  execution  without 
further  notice.  We  classify  such  context  information 
which  underlies  steady  or  unexpected  changes  as 
dynamic context information. The challenge is the fact 
that  caching  decisions  which  are  based  on  such 
information  possibly  become  invalid  due  to  context 
changes. 
We  provide  a  solution  which  makes  caching  of 
decisions  possible  -  even  if  the  evaluation  requires 
dynamic context information. To be able to cache such 
access  decisions  we  introduced  an  additional  element 
for a cache entry: open constraints (cf. section 3.2.3).  
Security  policies  are  usually  structured  in  such  a 
way  that  permissions  which  are  given  to  a  role  are 
further  restricted  by  conditions:  a  user  might  be 
member  of  a  role  that  has  the  permission  to  execute 
Task  A;  an  additional  condition,  however,  restricts 
access 
it  only  within  working  hours.  Such 
conditions, being time or date-based or any of the other 
in section 3.2.2 presented constraint types, are usually 
expressed such that they  have to evaluate to true that 
the policy evaluates to a specific effect (i.e., PERMIT 
or DENY). For example, the condition 6 a.m. ≤ Now( ) 
AND Now( ) ≤ 8 p.m. must evaluate to true such that 
access is granted for Task A. Conditions requiring such 
dynamic  context  information  for  their  evaluation  are 
called open constraints (OC).  