### Java对\p(...)和\P(...)的支持

- **Unicode行终结符**：Java支持使用特定的Unicode行终结符，如`\u000A`、`\u000D`等。
- **使用`java.util.regex`包**：该包提供了强大的正则表达式功能，包括编译模式和匹配字符串。
- **`Pattern.compile()`方法**：这是创建`Pattern`对象的工厂方法，用于编译正则表达式。
- **`Pattern`的`matcher`方法**：此方法返回一个`Matcher`对象，可以用来执行匹配操作。
- **`Matcher`对象**：通过`Matcher`对象，可以应用正则表达式并查询匹配结果。
- **简单查找-替换**：使用`Matcher`的`replaceAll`或`replaceFirst`方法进行简单的文本替换。
- **高级查找-替换**：利用`Matcher`对象的更多功能实现复杂的文本替换。
- **原地查找-替换**：在不创建新字符串的情况下直接修改原始字符串。
- **`Matcher`的检索范围**：可以通过设置`region`方法来限制`Matcher`的搜索范围。
- **方法链**：将多个`Matcher`方法链接起来以简化代码。
- **构建扫描程序**：使用`Matcher`对象构建高效的文本扫描程序。
- **`Matcher`的其他方法**：`Matcher`还提供了一些辅助方法，如`start`、`end`等。
- **`Pattern`的其他方法**：`Pattern`类也提供了许多实用方法，如`split`等。
- **`Pattern`的`split`方法（单个参数）**：根据正则表达式分割字符串。
- **`Pattern`的`split`方法（两个参数）**：允许指定最大分割次数。
- **扩展示例**：
  - 为`ImageTag`添加宽度和高度属性。
  - 对于每个`Matcher`，使用多个`Pattern`校验HTML。
  - 解析CSV文档。
- **Java版本差异**：
  - **1.4.2和1.5.0之间的差异**：主要改进了正则表达式的性能和功能。
  - **1.5.0和1.6之间的差异**：进一步优化了正则表达式的处理速度。

---

### .NET的正则流派

- **.NET的正则流派**：.NET框架提供了强大的正则表达式支持。
- **对于流派的补充**：介绍了.NET正则表达式的独特特性和用法。
- **使用.NET正则表达式**：详细说明如何在.NET中使用正则表达式。
- **正则表达式快速入门**：提供了一个简短的教程，帮助初学者快速上手。
- **包概览**：概述了与正则表达式相关的命名空间和类。
- **核心对象概览**：介绍`Regex`、`Match`、`Group`等核心对象。
- **核心对象详解**：深入讲解这些核心对象的功能和用法。
- **创建`Regex`对象**：演示如何实例化`Regex`对象。
- **使用`Regex`对象**：展示了`Regex`对象的各种用法。
- **使用`Match`对象**：解释了`Match`对象的用途和方法。
- **使用`Group`对象**：描述了`Group`对象的作用。
- **静态“便捷”函数**：列出了一些常用的静态方法，如`IsMatch`、`Replace`等。
- **正则表达式缓存**：讨论了.NET如何缓存正则表达式以提高性能。
- **支持函数**：介绍了其他一些辅助函数。
- **.NET高级话题**：
  - **正则表达式装配件**：探讨了更高级的正则表达式技术。
  - **匹配嵌套结构**：展示了如何处理嵌套的结构。
  - **`Capture`对象**：解释了`Capture`对象的用途。

---

### PHP的正则流派

- **PHP的正则流派**：PHP提供了多种正则表达式函数，主要分为PCRE（Perl Compatible Regular Expressions）和POSIX两种。
- **Preg函数接口**：介绍了PHP中的`preg_`系列函数。
- **“Pattern”参数**：解释了正则表达式模式参数的用法。
- **Preg函数罗列**：
  - `preg_match`：执行正则表达式匹配。
  - `preg_match_all`：执行全局匹配。
  - `preg_replace`：进行简单的文本替换。
  - `preg_replace_callback`：使用回调函数进行复杂替换。
  - `preg_split`：根据正则表达式分割字符串。
  - `preg_grep`：过滤数组中的元素。
  - `preg_quote`：转义特殊字符。
- **“缺失”的preg函数**：
  - `preg_regex_to_pattern`：将正则表达式转换为模式。
  - **对未知的Pattern参数进行语法检查**：确保正则表达式语法正确。
  - **对未知正则表达式进行语法检查**：验证正则表达式的有效性。
  - **递归的正则表达式**：处理嵌套结构。
  - **匹配嵌套括号内的文本**：展示如何匹配嵌套的括号。
  - **不能回溯到递归调用之内**：讨论递归调用的限制。
  - **匹配一组嵌套的括号**：进一步解释嵌套括号的匹配。
  - **效率**：讨论了正则表达式的性能问题。
  - **模式修饰符S：“研究”**：解释了模式修饰符`S`的用法。
- **扩展示例**：
  - **用PHP解析CSV**：展示如何使用正则表达式解析CSV文件。
  - **检查taggeddata的嵌套正确性**：确保标签数据的嵌套结构正确。

---

### 正则表达式入门

#### 想象一下这幅图景

你需要检索某台Web服务器上的页面中的重复单词（例如“thisthis”）。这是一个常见的任务，尤其是在大规模文本编辑时。程序必须满足以下要求：

- 能检查多个文件，挑出包含重复单词的行，并高亮标记每个重复单词（使用标准ANSI转义字符序列），同时显示这行文字来自哪个文件。
- 能跨行查找，即使两个单词一个在某行末尾而另一个在下一行的开头，也算重复单词。
- 能进行不区分大小写的查找，例如“Thethe...”，重复单词之间可以出现任意数量的空白字符（空格符、制表符、换行符等）。
- 能查找用HTML标签分隔的重复单词。HTML标签用于标记互联网页上的文本，例如，粗体单词是这样表示的：`<b>itIsveryveryimportant</b>`。

这些问题并不容易解决，但又不能不解决。我在写作本书的手稿时，曾用一个工具来检查已经写好的部分，发现其中有很多重复单词。能够解决这种问题的编程语言有许多，但使用支持正则表达式的语言会更加简单。

#### 正则表达式

正则表达式是一种强大、便捷、高效的文本处理工具。正则表达式本身加上通用模式表示法，赋予使用者描述和分析文本的能力。配合特定工具提供的额外支持，正则表达式能够添加、删除、分离、叠加、插入和修整各种类型的文本和数据。

正则表达式的使用难度只相当于文本编辑器的搜索命令，但功能却与完整的文本处理语言一样强大。本书将向读者展示正则表达式提高生产率的诸多办法。它会教导读者如何学会用正则表达式来思考，以便掌握它们的强大功能。

如果使用当今流行的程序设计语言，解决重复单词问题的完整程序可能仅仅只需要几行代码。使用一个正则表达式的搜索和替换命令，读者就可以查找文档中的重复单词，并把它们标记为高亮。加上另一个正则表达式，你可以删除所有不包含重复单词的行（只留下需要在结果中出现的行）。最后，利用第三个正则表达式，你可以确保结果中的所有行都以它所在文件的名字开头。在下一章里，我们会看到用Perl和Java编写的程序。

宿主语言（例如Perl、Java以及VB.NET）提供了外围的处理支持，但真正的能力来自正则表达式。为了驾驭这种语言，满足自己的需求，读者必须知道如何构建正则表达式，才能识别符合要求的文本，同时忽略不需要的文本。然后，就可以把表达式和语言支持的构建方式结合起来，真正处理这些文本（加入合适的高亮标记代码，删除文本，修改文本等）。

#### 解决实际问题

掌握正则表达式，可能带来超乎你之前想象的文本处理能力。每一天，我都依靠正则表达式解决各种大大小小的问题（通常的情况是，问题本身并不复杂，但没有正则表达式就成了大问题）。

举个简单的例子，我需要检查许多文件（事实上，本书的手稿存放在70个文件中），确保每一行中`SetSize`出现的次数与`ResetSize`的一样多。为了应付复杂的情况，还需要考虑大小写的情况（例如，`setSIzE`也算作`SetSize`）。人工检查32000行文字显然不现实。

即便使用文本编辑器的“单词查找”功能，也不够方便，尤其是对所有文件进行同样的操作，何况还需要考虑所有可能的大小写情况。正则表达式就是解决这个问题的灵丹妙药。只需要一个简单的命令，我就能够检查所有的文件，获得我需要知道的结果。时间是：写命令大概15秒，检索所有的数据实际只花了2秒。这真是棒极了（如果您想知道这是怎么做到的，不妨现在就翻到第36页）。

再举一个例子，我曾帮助一个朋友处理远端机器上的某些电子邮件，他希望我把他邮箱文件中的消息作为列表发送给他。我可以把整个文件导入文本编辑器，手工删除所有信息，只留下邮件头中的几行，作为内容的列表。尽管文件不是很大，连接速度也不算慢，这样的任务还是很耗费时间而且很乏味。而且，窥见他的邮件正文，也令我尴尬。

我使用`egrep`显示每封邮件的`From:`和`Subject:`字段。为了告诉`egrep`我需要提取哪些行，我使用了正则表达式`^(From|Subject):`。朋友得到这个列表之后，让我找一封特殊的（5000行！）邮件。使用文本编辑器或者邮件系统来提取一封邮件无疑非常耗时。相反，我借助另一个工具（叫做`sed`），同样使用正则表达式来描述文件中我需要的内容。这样，我能迅速而方便地提取和发送需要的邮件。

使用正则表达式节省下来的时间或许并不能让人“激动”，但总比把时间消耗在文本编辑器中要好。如果我不知道有正则表达式这种玩意儿，根本就不会想到还有别的解决办法。所以，这个故事告诉我们，正则表达式和相关的工具能够让我们以可能未曾想过的方式来解决问题。

一旦掌握了正则表达式，你就会知道它是工具中的无价之宝，你也难以想象之前那些没有正则表达式的日子是怎么度过的。全面掌握正则表达式是很有用的。本书提供了掌握这种技能所需要的信息，我同时也希望，这本书也提供了促使你学习的动机。

注1：用过TiVo（一种数字录像机，具有许多神奇的功能，例如根据用户的偏好自动录制节目，自动跳过电视台的广告等）的人都体验过这种感觉。

---

### 作为编程语言的正则表达式

如果没有正则表达式相关经验，读者可能无法理解上个例子中正则表达式`^(From|Subject):`的意义，但这个表达式并没有什么神奇之处。其实魔术本身也不神奇，只是缺乏训练的人看起来觉得神奇而已。