||||||||||||||||||||
Table 6-3: Important EFLAGS Status Flags
Bit
Name
Description
0
Carry flag
Indicates whether a carry bit was generated from the last operation
2
Parity flag
The parity of the least-significant byte of the last operation
6
Zero flag
Indicates whether the last operation has zero as its result; used in
comparison operations
7
Sign flag
Indicates the sign of the last operation; effectively, the most-significant
bit of the result
11
Overflow
flag
Indicates whether the last operation overflowed
Selector Registers
The selector registers (CS, DS, ES, FS, GS, SS) address memory locations by indicating a
specific block of memory into which you can read or write. The real memory address used
in reading or writing the value is looked up in an internal CPU table.
NOTE
Selector registers are usually only used in operating system–specific operations. For example, on
Windows, the FS register is used to access memory allocated to store the current thread’s control
information.
Memory is accessed using little endian byte order. Recall from Chapter 3 that little
endian order means the least-significant byte is stored at the lowest memory address.
Another important feature of the x86 architecture is that it doesn’t require its memory
operations to be aligned. All reads and writes to main memory on an aligned processor
architecture must be aligned to the size of the operation. For example, if you want to read
a 32-bit value, you would have to read from a memory address that is a multiple of 4. On
aligned architectures, such as SPARC, reading an unaligned address would generate an
error. Conversely, the x86 architecture permits you to read from or write to any memory
address regardless of alignment.
Unlike architectures such as ARM, which use specialized instructions to load and store
values between the CPU registers and main memory, many of the x86 instructions can
take memory addresses as operands. In fact, the x86 supports a complex memory-
addressing format for its instructions: each memory address reference can contain a base
register, an index register, a multiplier for the index (between 1 and 8), or a 32-bit offset.
For example, the following MOV instruction combines all four of these referencing
||||||||||||||||||||
||||||||||||||||||||
options to determine which memory address contains the value to be copied into the EAX
register:
MOV EAX, [ESI + EDI * 8 + 0x50]   ; Read 32-bit value from memory address
When a complex address reference like this is used in an instruction, it’s common to see
it enclosed in square brackets.
Program Flow
Program flow, or control flow, is how a program determines which instructions to execute.
The x86 has three main types of program flow instructions: subroutine calling, conditional
branches, and unconditional branches. Subroutine calling redirects the flow of the program to
a subroutine—a specified sequence of instructions. This is achieved with the CALL
instruction, which changes the EIP register to the location of the subroutine. CALL places
the memory address of the next instruction onto the current stack, which tells the program
flow where to return after it has performed its subroutine task. The return is performed
using the RET instruction, which changes the EIP register to the top address in the stack
(the one CALL put there).
Conditional branches allow the code to make decisions based on prior operations. For
example, the CMP instruction compares the values of two operands (perhaps two registers)
and calculates the appropriate values for the EFLAGS register. Under the hood, the CMP
instruction does this by subtracting one value from the other, setting the EFLAGS register
as appropriate, and then discarding the result. The TEST instruction does the same except it
performs an AND operation instead of a subtraction.
After the EFLAGS value has been calculated, a conditional branch can be executed; the
address it jumps to depends on the state of EFLAGS. For example, the JZ instruction will
conditionally jump if the Zero flag is set (which would happen if, for instance, the CMP
instruction compared two values that were equal); otherwise, the instruction is a no-
operation. Keep in mind that the EFLAGS register can also be set by arithmetic and other
instructions. For example, the SHL instruction shifts the value of a destination by a certain
number of bits from low to high.
Unconditional branching program flow is implemented through the JMP instruction,
which just jumps unconditionally to a destination address. There’s not much more to be
said about unconditional branching.
Operating System Basics
Understanding a computer’s architecture is important for both static and dynamic reverse
engineering. Without this knowledge, it’s difficult to ever understand what a sequence of
instructions does. But architecture is only part of the story: without the operating system
Technet24
||||||||||||||||||||
||||||||||||||||||||
handling the computer’s hardware and processes, the instructions wouldn’t be very useful.
Here I’ll explain some of the basics of how an operating system works, which will help you
understand the processes of reverse engineering.
Executable File Formats
Executable file formats define how executable files are stored on disk. Operating systems
need to specify the executables they support so they can load and run programs. Unlike
earlier operating systems, such as MS-DOS, which had no restrictions on what file formats
would execute (when run, files containing instructions would load directly into memory),
modern operating systems have many more requirements that necessitate more complex
formats.
Some requirements of a modern executable format include:
• Memory allocation for executable instructions and data
• Support for dynamic linking of external libraries
• Support for cryptographic signatures to validate the source of the executable
• Maintenance of debug information to link executable code to the original source code
for debugging purposes
• A reference to the address in the executable file where code begins executing, commonly
called the start address (necessary because the program’s start address might not be the
first instruction in the executable file)
Windows uses the Portable Executable (PE) format for all executables and dynamic
libraries. Executables typically use the .exe extension, and dynamic libraries use the .dll
extension. Windows doesn’t actually need these extensions for a new process to work
correctly; they are used just for convenience.
Most Unix-like systems, including Linux and Solaris, use the Executable Linking
Format (ELF) as their primary executable format. The major exception is macOS, which
uses the Mach-O format.
Sections
Memory sections are probably the most important information stored in an executable. All
nontrivial executables will have at least three sections: the code section, which contains the
native machine code for the executable; the data section, which contains initialized data
that can be read and written during execution; and a special section to contain uninitialized
data. Each section has a name that identifies the data it contains. The code section is
usually called text, the data section is called data, and the uninitialized data is called bss.
Every section contains four basic pieces of information:
||||||||||||||||||||
||||||||||||||||||||
• A text name
• A size and location of the data for the section contained in the executable file
• The size and address in memory where the data should be loaded
• Memory protection flags, which indicate whether the section can be written or executed
when loaded into memory
Processes and Threads
An operating system must be able to run multiple instances of an executable concurrently
without them conflicting. To do so, operating systems define a process, which acts as a
container for an instance of a running executable. A process stores all the private memory
the instance needs to operate, isolating it from other instances of the same executable. The
process is also a security boundary, because it runs under a particular user of the operating
system and security decisions can be made based on this identity.
Operating systems also define a thread of execution, which allows the operating system
to rapidly switch between multiple processes, making it seem to the user that they’re all
running at the same time. This is called multitasking. To switch between processes, the
operating system must interrupt what the CPU is doing, store the current process’s state,
and restore an alternate process’s state. When the CPU resumes, it is running another
process.
A thread defines the current state of execution. It has its own block of memory for a
stack and somewhere to store its state when the operating system stops the thread. A
process will usually have at least one thread, and the limit on the number of threads in the
process is typically controlled by the computer’s resources.
To create a new process from an executable file, the operating system first creates an
empty process with its own allocated memory space. Then the operating system loads the
main executable into the process’s memory space, allocating memory based on the
executable’s section table. Next, a new thread is created, which is called the main thread.
The dynamic linking program is responsible for linking in the main executable’s system
libraries before jumping back to the original start address. When the operating system
launches the main thread, the process creation is complete.
Operating System Networking Interface
The operating system must manage a computer’s networking hardware so it can be shared
between all running applications. The hardware knows very little about higher-level
protocols, such as TCP/IP,2 so the operating system must provide implementations of
these higher-level protocols.
The operating system also needs to provide a way for applications to interface with the
network. The most common network API is the Berkeley sockets model, originally developed
Technet24
||||||||||||||||||||
||||||||||||||||||||
at the University of California, Berkeley in the 1970s for BSD. All Unix-like systems have
built-in support for Berkeley sockets. On Windows, the Winsock library provides a very
similar programming interface. The Berkeley sockets model is so prevalent that you’ll
almost certainly encounter it on a wide range of platforms.
Creating a Simple TCP Client Connection to a Server
To get a better sense of how the sockets API works, Listing 6-1 shows how to create a
simple TCP client connection to a remote server.
   int port = 12345;
   const char* ip = "1.2.3.4";
   sockaddr_in addr = {0};
➊ int s = socket(AF_INET, SOCK_STREAM, 0);
   addr.sin_family = PF_INET;
➋ addr.sin_port = htons(port);
➌ inet_pton(AF_INET, ip, &addr.sin_addr);
➍ if(connect(s, (sockaddr*) &addr, sizeof(addr)) == 0)
   {
       char buf[1024];
       ➎ int len = recv(s, buf, sizeof(buf), 0);
       ➏ send(s, buf, len, 0);
   }
   close(s);
Listing 6-1: A simple TCP network client
The first API call ➊ creates a new socket. The AF_INET parameter indicates we want to
use the IPv4 protocol. (To use IPv6 instead, we would write AF_INET6). The second
parameter SOCK_STREAM indicates that we want to use a streaming connection, which for the
internet means TCP. To create a UDP socket, we would write SOCK_DGRAM (for datagram
socket).
Next, we construct a destination address with addr, an instance of the system-defined
sockaddr_in structure. We set up the address structure with the protocol type, the TCP port,
and the TCP IP address. The call to inet_pton ➌ converts the string representation of the IP
address in ip to a 32-bit integer.
Note that when setting the port, the htons function is used ➋ to convert the value from
host-byte-order (which for x86 is little endian) to network-byte-order (always big endian).
This applies to the IP address as well. In this case, the IP address 1.2.3.4 will become the
integer 0x01020304 when stored in big endian format.
The final step is to issue the call to connect to the destination address ➍. This is the
main point of failure, because at this point the operating system has to make an outbound
call to the destination address to see whether anything is listening. When the new socket
connection is established, the program can read and write data to the socket as if it were a
||||||||||||||||||||
||||||||||||||||||||
file via the recv ➎ and send ➏ system calls. (On Unix-like systems, you can also use the
general read and write calls, but not on Windows.)
Creating a Client Connection to a TCP Server
Listing 6-2 shows a snippet of the other side of the network connection, a very simple
TCP socket server.
   sockaddr_in bind_addr = {0};
   int s = socket(AF_INET, SOCK_STREAM, 0);
   bind_addr.sin_family = AF_INET;
   bind_addr.sin_port = htons(12345);
➊ inet_pton("0.0.0.0", &bind_addr.sin_addr);
➋ bind(s, (sockaddr*)&bind_addr, sizeof(bind_addr));
➌ listen(s, 10);
   sockaddr_in client_addr;
   int socksize = sizeof(client_addr);
➍ int newsock = accept(s, (sockaddr*)&client_addr, &socksize);
   // Do something with the new socket
Listing 6-2: A simple TCP socket server
The first important step when connecting to a TCP socket server is to bind the socket
to an address on the local network interface, as shown at ➊ and ➋. This is effectively the
opposite of the client case in Listing 6-1 because inet_pton() ➊ just converts a string IP
address to its binary form. The socket is bound to all network addresses, as signified by
"0.0.0.0", although this could instead be a specific address on port 12345.
Then, the socket is bound to that local address ➋. By binding to all interfaces, we
ensure the server socket will be accessible from outside the current system, such as over
the internet, assuming no firewall is in the way.
Finally, the listing asks the network interface to listen for new incoming connections ➌
and calls accept ➍, which returns the next new connection. As with the client, this new
socket can be read and written to using the recv and send calls.
When you encounter native applications that use the operating system network
interface, you’ll have to track down all these function calls in the executable code. Your
knowledge of how programs are written at the C programming language level will prove
valuable when you’re looking at your reversed code in a disassembler.
Application Binary Interface
The application binary interface (ABI) is an interface defined by the operating system to
describe the conventions of how an application calls an API function. Most programming
languages and operating systems pass parameters left to right, meaning that the leftmost
Technet24
||||||||||||||||||||
||||||||||||||||||||
parameter in the original source code is placed at the lowest stack address. If the
parameters are built by pushing them to a stack, the last parameter is pushed first.
Another important consideration is how the return value is provided to the function’s
caller when the API call is complete. In the x86 architecture, as long as the value is less
than or equal to 32 bits, it’s passed back in the EAX register. If the value is between 32 and
64 bits, it’s passed back in a combination of EAX and EDX.
Both EAX and EDX are considered scratch registers in the ABI, meaning that their
register values are not preserved across function calls: in other words, when calling a
function, the caller can’t rely on any value stored in these registers to still exist when the
call returns. This model of designating registers as scratch is done for pragmatic reasons: it
allows functions to spend less time and memory saving registers, which might not be
modified anyway. In fact, the ABI specifies an exact list of which registers must be saved
into a location on the stack by the called function.
Table 6-4 contains a quick description of the typical register assignment’s purpose. The
table also indicates whether the register must be saved when calling a function in order for
the register to be restored to its original value before the function returns.
Table 6-4: Saved Register List
Register
ABI usage
Saved?
EAX
Used to pass the return value of the function
No
EBX
General purpose register
Yes
ECX
Used for local loops and counters, and sometimes used to pass object
pointers in languages such as C++
No
EDX
Used for extended return values
No
EDI
General purpose register
Yes
ESI
General purpose register
Yes
EBP
Pointer to the base of the current valid stack frame
Yes
ESP
Pointer to the base of the stack
Yes
Figure 6-4 shows an add() function being called in the assembly code for the print_add()
function: it places the parameters on the stack (PUSH 10), calls the add() function (CALL add),
and then cleans up afterward (ADD ESP, 8). The result of the addition is passed back from
add() through the EAX register, which is then printed to the console.
||||||||||||||||||||
||||||||||||||||||||
Figure 6-4: Function calling in assembly code
Static Reverse Engineering
Now that you have a basic understanding of how programs execute, we’ll look at some
methods of reverse engineering. Static reverse engineering is the process of dissecting an
application executable to determine what it does. Ideally, we could reverse the compilation
process to the original source code, but that’s usually too difficult to do. Instead, it’s more
common to disassemble the executable.
Rather than attacking a binary with only a hex editor and a machine code reference, you
can use one of many tools to disassemble binaries. One such tool is the Linux-based
objdump, which simply prints the disassembled output to the console or to a file. Then it’s
up to you to navigate through the disassembly using a text editor. However, objdump isn’t
very user friendly.
Fortunately, there are interactive disassemblers that present disassembled code in a
form that you can easily inspect and navigate. By far, the most fully featured of these is
IDA Pro, which was developed by the Hex Rays company. IDA Pro is the go-to tool for
static reversing, and it supports many common executable formats as well as almost any
CPU architecture. The full version is pricey, but a free edition is also available. Although
the free version only disassembles x86 code and can’t be used in a commercial
environment, it’s perfect for getting you up to speed with a disassembler. You can
download the free version of IDA Pro from the Hex Rays website at https://www.hex-
rays.com/. The free version is only for Windows, but it should run well under Wine on
Technet24
||||||||||||||||||||
||||||||||||||||||||
Linux or macOS. Let’s take a quick tour of how to use IDA Pro to dissect a simple
network binary.
A Quick Guide to Using IDA Pro Free Edition
Once it’s installed, start IDA Pro and then choose the target executable by clicking File ▸
Open. The Load a new file window should appear (see Figure 6-5).
This window displays several options, but most are for advanced users; you only need to
consider certain important options. The first option allows you to choose the executable
format you want to inspect ➊. The default in the figure, Portable executable, is usually the
correct choice, but it’s always best to check. The Processor type ➋ specifies the processor
architecture as the default, which is x86. This option is especially important when you’re
disassembling binary data for unusual processor architectures. When you’re sure the