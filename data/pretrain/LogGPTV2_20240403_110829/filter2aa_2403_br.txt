指令清单 18.2  GCC 4.4.1 
public main 
main  
proc near        
; DATA XREF: _start+17 
var_70           = dword ptr -70h 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
225 
var_6C           = dword ptr -6Ch 
var_68           = dword ptr -68h 
i_2              
= dword ptr -54h 
i                
= dword ptr -4 
push     ebp 
mov      ebp, esp 
and      esp, 0FFFFFFF0h 
sub      esp, 70h 
mov      [esp+70h+i], 0 
; i=0 
jmp      short loc_804840A 
loc_80483F7: 
mov      eax, [esp+70h+i] 
mov      edx, [esp+70h+i] 
add      edx, edx 
; edx=i*2 
mov      [esp+eax*4+70h+i_2], edx 
add      [esp+70h+i], 1      ;  i++ 
loc_804840A: 
cmp      [esp+70h+i], 13h 
jle      short loc_80483F7 
mov      [esp+70h+i], 0 
jmp      short loc_8048441 
loc_804841B: 
mov      eax, [esp+70h+i] 
mov      edx, [esp+eax*4+70h+i_2] 
mov      eax, offset aADD ; "a[%d]=%d\n" 
mov      [esp+70h+var_68], edx 
mov      edx, [esp+70h+i] 
mov      [esp+70h+var_6C], edx 
mov      [esp+70h+var_70], eax 
call     _printf 
add      [esp+70h+i], 1 
loc_8048441: 
cmp      [esp+70h+i], 13h 
jle      short loc_804841B 
mov      eax, 0 
leave 
retn 
main     
endp 
实际上变量 a 的数据类型是整型指针。严格地说，在把数组传递给函数的时候，传递的数据就是指向
第一个元素的指针，我们再根据这个指针就可以轻松地计算出数组每个元素的地址（即指针）。如果使用
a[idx]的形式表示数组元素，其中 idx 是数组元素在数组里的排列序号（即索引号），那么就可以通过数组
第一个元素的地址、索引号和数据容量求得各个元素的地址。 
举个典型的例子：字符串常量“string”是字符型数组，它的每个字符元素都是 const char*型数据。使用索引
号之后，我们就可以使用“string”[i]的形式描述字符串中的第 i 个字符——这正是 C/C＋＋表达式的表示方法！ 
18.1.2 ARM 
Non-optimizing Keil 6/2013 (ARM mode) 
EXPORT _main 
_main 
STMFD   SP!, {R4,LR} 
SUB     SP, SP, #0x50      ;分配 20 个 int 的存储空间 
; first loop 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
226 
逆向工程权威指南（上册） 
MOV     R4, #0              ; i 
B       loc_4A0 
loc_494 
MOV     R0, R4,LSL#1  
; R0=R4*2 
STR     R0, [SP,R4,LSL#2] ; store R0 to SP+R4> 16) 
addiu    
$sp, -0x80 
la       
$gp, (__gnu_local_gp & 0xFFFF) 
sw       
$ra, 0x80+var_4($sp) 
sw       
$s3, 0x80+var_8($sp) 
sw       
$s2, 0x80+var_C($sp) 
sw       
$s1, 0x80+var_10($sp) 
sw       
$s0, 0x80+var_14($sp) 
sw       
$gp, 0x80+var_70($sp) 
addiu    
$s1, $sp, 0x80+var_68 
move     
$v1, $s1 
move     
$v0, $zero 
; that value will be used as a loop terminator. 
; it was precalculated by GCC compiler at compile stage: 
li   
$a0, 0x28  # '(' 
loc_34:                            
# CODE XREF: main+3C 
; store value into memory: 
sw       
$v0, 0($v1) 
; increase value to be stored by 2 at each iteration: 
addiu    
$v0, 2 
; loop terminator reached? 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
229 
bne      
$v0, $a0, loc_34 
; add 4 to address anyway: 
addiu    
$v1, 4 
; array filling loop is ended 
; second loop begin 
la       
$s3, $LC0   
# "a[%d]=%d\n" 
; "i" variable will reside in $s0: 
move     
$s0, $zero 
li       
$s2, 0x14 
loc_54:                              
# CODE XREF: main+70 
; call printf(): 
lw       
$t9, (printf & 0xFFFF)($gp) 
lw       
$a2, 0($s1) 
move     
$a1, $s0 
move     
$a0, $s3 