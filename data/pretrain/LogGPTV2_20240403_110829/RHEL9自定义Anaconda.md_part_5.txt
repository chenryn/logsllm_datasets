-   `status`{.literal} - 提供在 spoke 中配置的值的简短概述（在 hub 的
    spoke 名称下显示）
:::
要使用户界面更清晰，可将 spoke
分组为不同的[*类别*]{.emphasis}。例如，`Localization`{.literal}
类别为键盘布局选择、语言支持和时区设置组合在一起。
每个 spoke 都包含 UI
控制，这些控制显示并允许您修改来自一个或多个模块的值。同样适用于附加组件提供的
spoke。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#threads-and-communication_developing-installer-add-ons}跨 Anaconda 线程通信 {.title}
:::
有些您需要在安装过程中执行的动作可能需要很长时间。例如：扫描磁盘以了解现有分区或下载软件包元数据。为防止您等待并保持响应，[**[Anaconda]{.application}**]{.strong}
在单独的线程中运行这些操作。
[**[Gtk]{.application}**]{.strong}
工具包不支持多个线程的元素更改。[**[Gtk]{.application}**]{.strong}
的主事件循环运行在 [**[Anaconda]{.application}**]{.strong}
进程的主线程中。因此，所有与 GUI
相关的操作都必须在主线程中执行。为此，请使用
`GLib.idle_add`{.literal}，这并不总是容易或需要的。[**[pyanaconda.ui.gui.utils]{.package}**]{.strong}
模块中定义的几个帮助程序功能和 decorators 可能会造成困难。
`@gtk_action_wait`{.literal} 和 `@gtk_action_nowait`{.literal}
修饰符以这样一种方式更改修饰函数或方法，即当调用此函数或方法时，它会自动排队到在主线程中运行的
Gtk 的主循环中。返回值要么返回给调用者，要么被丢弃。
在 spoke 和 hub 通讯中，一个 spoke
会声明何时就绪且不会被阻断。`hubQ`{.literal}
消息队列处理此功能，并定期检查主事件循环。当 spoke
变为可访问时，它会向队列发送一条消息来宣布更改，并且该更改不应再被阻止。
当 spoke
需要刷新其状态或完成一个标志时，也是如此。`Configuration and Progress`{.literal}
hub 有一个名为 `progressQ`{.literal}
的不同的队列，它充当传输安装进度更新的介质。
这些机制也用于文本界面。在文本模式中，没有主循环，但可能需要大量事件进行键盘输入。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#modules-and-d-bus_developing-installer-add-ons}Anaconda 模块和 D-Bus 库 {.title}
:::
Anaconda 模块作为独立进程运行。要通过其 `D-Bus`{.literal} API
与这些进程进行通信，请使用 `dasbus`{.literal} 库。
通过 `` D-Bus 的 API 调用方法是异步的，但使用`dasbus ``{.literal}
库，您可以将它们转换为 Python
中的同步方法调用。您还可以写入以下程序之一：
::: itemizedlist
-   带有异步调用和返回处理程序的程序
-   调用者需要等待调用完成的程序。
:::
有关线程和通信的更多信息，请参阅 [Anaconda
线程](#developing-installer-add-ons_customizing-anaconda.html#threads-and-communication_developing-installer-add-ons "跨 Anaconda 线程通信"){.link}
之间的通信。
另外，Anaconda 使用模块中运行的任务对象。任务具有 `D-Bus`{.literal} API
和方法，可在其他线程中自动执行。要成功运行任务，请使用
`sync_run_task`{.literal} 和 `async_run_task`{.literal} 助手函数。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#the-hello-world-addon-example_developing-installer-add-ons}Hello World addon 示例 {.title}
:::
Anaconda 开发人员发布了一个名为\"Hello World\"的示例附加组件，位于
[GitHub：https://github.com/rhinstaller/hello-world-anaconda-addon/](https://github.com/rhinstaller/hello-world-anaconda-addon/){.link}
中，后面章节的描述会在这里重现。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#anaconda-add-on-structure_developing-installer-add-ons}Anaconda 附加组件结构 {.title}
:::
[**[Anaconda]{.application}**]{.strong} 附加组件是 Python
软件包，其中包含含有 `__init__.py`{.literal}
和其他源目录(子软件包)的目录。由于 Python
只允许您导入每个软件包名称一次，因此请为软件包顶级目录指定唯一的名称。您可以使用任意名称，因为附加组件都会被加载，而无论它们的名称是什么，唯一的要求是它们必须被放在特定的目录中。
对附加组件的建议的命名约定类似于 Java 软件包或 D-Bus 服务名称。
要使目录名称成为 Python
软件包的唯一标识符，请使用组织的反向域名作为加载项名称的前缀，并使用下划线（`_`{.literal}）而不是点。例如，`com_example_hello_world`{.literal}。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
确保在每个目录中创建一个 `__init__.py`{.literal}
文件。缺少这个文件的目录被视为无效的 Python 软件包。
:::
在编写附加组件时，请确定以下几项：
::: itemizedlist
-   对每个界面（图形界面和文本界面）的支持可由单独的子软件包提供，对于图形界面，这些子软件包被命名为
    `gui`{.literal} ，对于基于文本的界面，这些子软件包被命名为
    `tui`{.literal} 。
-   `gui`{.literal} 和 `tui`{.literal} 软件包包含一个 `spokes`{.literal}
    子软件包。
    [^\[1\]^](#developing-installer-add-ons_customizing-anaconda.html#ftn.idm140248100544704){#developing-installer-add-ons_customizing-anaconda.html#idm140248100544704
    .footnote}
-   软件包中包含的模块有一个任意名称。
-   `gui/`{.literal} 和 `tui/`{.literal} 目录包含带有任何名称的 Python
    模块。
-   有的服务可以执行附加组件的实际工作。可使用 Python
    或者其他任何语言编写该服务。
-   该服务实现了对 D-Bus 和 Kickstart 的支持。
-   这个附加组件包含启用自动启动该服务的文件。
:::
以下是支持每个接口（Kickstart、GUI 和 TUI）的附加目录结构示例：
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#exam-sample-addon-structure}
**例 5.1. 附加组件结构示例**
::: example-contents
``` literallayout
com_example_hello_world
├─ gui
│  ├─ init.py
│  └─ spokes
│     └─ init.py
└─ tui
   ├─ init.py
   └─ spokes
   └─ init.py
```
:::
:::
每个软件包必须至少包含一个带有任意名称的模块，该名称定义了从 API
中定义的一个或多个类继承的类。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
对于所有附加组件，请遵循 Python 的 [PEP
8](http://www.python.org/dev/peps/pep-0008/){.link} 和 [PEP
257](http://www.python.org/dev/peps/pep-0257/){.link}
文档字符串约定指南。对于 [**[Anaconda]{.application}**]{.strong}
中的文档字符串的实际内容格式没有共识，唯一的要求是它们是人类可读的。如果您计划对您的附加组件使用自动生成的文档，则文档字符串应遵循您用于完成此操作的工具包指南。
:::
如果附加组件需要定义一个新类别，您可以包含类别子软件包，但不建议这样做。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#the-service-and-conf-files_developing-installer-add-ons}Anaconda 服务及配置文件 {.title}
:::
Anaconda 服务和配置文件包含在 data/
目录中。这些文件是启动附加组件服务并配置 D-Bus 所需要的。
以下是 Anaconda Hello World 附加组件的一些示例：
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#exam-addon-name-conf}
**例 5.2. [*addon-name*]{.emphasis}.conf 示例：**
::: example-contents
``` literallayout
```
:::
:::
此文件必须放在安装环境中的 `/usr/share/anaconda/dbus/confs/`{.literal}
目录中。字符串 `org.fedoraproject.Anaconda.Addons.HelloWorld`{.literal}
必须与 D-Bus 上附加服务的位置相对应。
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#exam-addon-name-service}
**例 5.3. [*addon-name*]{.emphasis}.service 示例：**
::: example-contents
``` literallayout
[D-BUS Service]
# Start the org.fedoraproject.Anaconda.Addons.HelloWorld service.
# Runs org_fedora_hello_world/service/main.py
Name=org.fedoraproject.Anaconda.Addons.HelloWorld
Exec=/usr/libexec/anaconda/start-module org_fedora_hello_world.service
User=root
```
:::
:::
此文件必须放在安装环境中的
`/usr/share/anaconda/dbus/services/`{.literal} 目录中。字符串
`org.fedoraproject.Anaconda.Addons.HelloWorld`{.literal} 必须与 D-Bus
上附加服务的位置相对应。以 `Exec=`{.literal}
开头的行中的值必须是在安装环境中启动服务的有效命令。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#gui-add-on-basic-features_developing-installer-add-ons}GUI 附加组件基本特性 {.title}
:::
与附加组件中的 Kickstart 支持类似，GUI
支持要求附加组件的每一个部分都必须至少包含一个模块，并带有一个继承自 API
定义的特定类的类定义。对于图形附加组件支持，您唯一应添加的类是
`NormalSpoke`{.literal} 类，该类在 `pyanaconda.ui.gui.spokes`{.literal}
中定义，作为屏幕普通spoke 类型的一个类。要了解有关它的更多信息，请参阅
[Anaconda
用户界面](#developing-installer-add-ons_customizing-anaconda.html#the-hub-spoke-model_developing-installer-add-ons "Anaconda 用户界面"){.link}。
要实现继承自 `NormalSpoke`{.literal} 的新类，您必须定义 API
所需的以下类属性：
::: itemizedlist
-   `builderObjects`{.literal} - 列出了来自 spoke 的 `.glade`{.literal}
    文件中的所有顶级对象，它们应与其子对象（递归方式）一起暴露给
    spoke。如果所有内容都应暴露给 spoke（不建议），则列表应为空。
-   `mainWidgetName`{.literal} - 包含 `.glade`{.literal}
    文件中定义的主窗口小部件(Add Link)的 id。
-   `uiFile`{.literal} - 包含 `.glade`{.literal} 文件的名称。
-   `category`{.literal} - 包含 spoke 所属类别的类。
-   `icon`{.literal} - 包含用于 hub 上 spoke 的图标的标识符。
-   `title`{.literal} - 定义要用于 hub 上的 spoke 的标题。
:::
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#adding-support-for-the-add-on-graphical-user-interface-gui_developing-installer-add-ons}对附加图形用户界面(GUI)添加支持 {.title}
:::
这部分描述了如何通过执行以下高级步骤来为您的附加组件的图形用户界面(GUI)添加支持：
::: orderedlist
1.  定义 Normalspoke 类所需的属性
2.  定义 `__init__`{.literal} 和 `initialize`{.literal} 方法
3.  定义 `refresh`{.literal}、`apply`{.literal} 和 `execute`{.literal}
    方法
4.  定义 `status`{.literal}、`ready`{.literal}、`completed`{.literal} 和
    `mandatory`{.literal} 属性
:::
::: itemizedlist
**先决条件**
-   您的附加组件包括对 Kickstart 的支持。请参阅 ["Anaconda
    附加组件结构"一节](#developing-installer-add-ons_customizing-anaconda.html#anaconda-add-on-structure_developing-installer-add-ons "Anaconda 附加组件结构"){.xref}。
-   安装 anaconda-widgets 和 anaconda-widgets-devel
    软件包，其中包含特定于 `Anaconda`{.literal} 的 Gtk 小部件，如
    `SpokeWindow`{.literal}。
:::
::: itemizedlist
**步骤**
-   根据以下示例，创建带有所有必要的定义的以下模块，来添加对 Add-on
    图形用户界面(GUI)的支持。
:::
::: example
[]{#developing-installer-add-ons_customizing-anaconda.html#defin-att-normal-spoke}
**例 5.4. 定义 Normalspoke 类所需的属性：**
::: example-contents
``` literallayout
# will never be translated
_ = lambda x: x
N_ = lambda x: x
# the path to addons is in sys.path so we can import things from org_fedora_hello_world
from org_fedora_hello_world.gui.categories.hello_world import HelloWorldCategory
from pyanaconda.ui.gui.spokes import NormalSpoke
# export only the spoke, no helper functions, classes or constants
all = ["HelloWorldSpoke"]
class HelloWorldSpoke(FirstbootSpokeMixIn, NormalSpoke):
    """
    Class for the Hello world spoke. This spoke will be in the Hello world
    category and thus on the Summary hub. It is a very simple example of a unit
    for the Anaconda's graphical user interface. Since it is also inherited form
    the FirstbootSpokeMixIn, it will also appear in the Initial Setup (successor
    of the Firstboot tool).
    :see: pyanaconda.ui.common.UIObject
    :see: pyanaconda.ui.common.Spoke
    :see: pyanaconda.ui.gui.GUIObject
    :see: pyanaconda.ui.common.FirstbootSpokeMixIn
    :see: pyanaconda.ui.gui.spokes.NormalSpoke