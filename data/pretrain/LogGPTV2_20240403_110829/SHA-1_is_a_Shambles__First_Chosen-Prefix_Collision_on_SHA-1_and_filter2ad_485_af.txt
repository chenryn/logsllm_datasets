certiﬁcates.
However, SHA-1 certiﬁcates are still present for legacy
purposes, on services that are used by older clients that
can not be upgraded. In particular, it remains possible
to buy a SHA-1 certiﬁcate today, and there are a few
recently-issued certiﬁcates in use on the web6. There are
also a few old SHA-1 certiﬁcates still in use7. Those cer-
tiﬁcates are rejected by modern web browsers, but they
can be accepted by non-web TLS clients. For instance,
it seems that the Mail application in Windows 10 can
open an IMAP session secured with a SHA-1 certiﬁcate
without warning.
Chosen-preﬁx collisions against MD5 have been able
to break the security of certiﬁcates in the past, with
the creation of a Rogue CA by Stevens et al. [27], and
in the wild by the ﬂame malware [21]. If some of the
CAs still issuing SHA-1 certiﬁcates use predictable serial
numbers, a similar attack might be possible today (being
located at the beginning of the “to-be-signed” part of
the certiﬁcate, if the serial number is unpredictable then
the CP collision attack is thwarted as a crucial part of
the hashed input is not controlled by the attacker).
7.3 SHA-1 Usage in TLS
Besides certiﬁcates, there are two places where SHA-1
can be used in the TLS protocol: SHA-1 can be used
to sign the handshake, and HMAC-SHA-1 can be used to
authenticate data in the record protocol.
Handshake. Client authentication in TLS uses a sig-
nature of the transcript, which can be abused using CP
collisions, as shown by the SLOTH attacks [1]. However,
this remains far from being a practical attack, because
transparency
6Some examples can be found by searching through
http://web.archive.org/
certiﬁcate
web/20191227165750/https://censys.io/certificates?q=
tags%3Atrusted+AND+parsed.signature.signature_algorithm.
name%3ASHA1%2A+AND+parsed.validity.start%3A%5B2019-01-
01+TO+%2A%5D
logs:
7As
seen in this
scan:
http://web.archive.org/web/
20191227165038/https://censys.io/ipv4?q=443.https.tls.
validation.browser_trusted%3AYes+AND+443.https.tls.
certificate.parsed.signature_algorithm.name%3ASHA1%2A
USENIX Association
29th USENIX Security Symposium    1853
the CP collision has to be computed in a very short time
(timeout value is generally set to a few seconds, but can
be up to several minutes).
In TLS 1.0 and 1.1, the handshake is hashed with the
concatenation of SHA-1 and MD5. Using the multicolli-
sion attack from Joux [9], computing a CP collision for
MD5k SHA-1 is not much harder than for SHA-1. We give
concrete ﬁgures in Table 2, showing that this is probably
within reach of a well motivated adversary.
In TLS 1.2, the hash function used is conﬁgurable. The
vast majority of TLS 1.0/1.1 clients and server support
SHA-1, and many servers actually prefer to use SHA-1,
even when the client oﬀers better algorithms8,9.
In TLS version 1.3, MD5 and SHA-1 have been removed.
Ciphersuites. The large majority of clients and
servers support ciphersuites where HMAC-SHA-1 is used
to authenticate the packets, at least for interoperability
reasons. It seems that usage of HMAC-SHA-1 represents a
few percent of all the connections10,11. This usage is not
threatened by our attack, but we recommend to avoid
SHA-1 usage when possible.
OpenSSL. The next version of OpenSSL will no longer
allow X.509 certiﬁcates signed using SHA-1 at security
level 1 and above (commit 68436f0). Since security level
1 is the default conﬁguration for TLS/SSL, this will
prevent SHA-1 usage for certiﬁcates.
Debian Linux had previously set the default conﬁgu-
ration to security level 2 (deﬁned as 112-bit security) in
the latest release (Debian Buster); this already prevents
dangerous usage of SHA-1 (for certiﬁcates and handshake
signature).
7.4 SHA-1 Usage in SSH
SHA-1’s usage in SSH is similar to its usage in TLS. The
SSH-2 protocol supports usage of SHA-1 to sign the tran-
script (at the end of the key exchange), and HMAC-SHA-1
to authenticate the data in the record protocol. As in
the TLS case, usage of SHA-1 to sign the transcript has
been shown to be potentially vulnerable to the SLOTH
8http://web.archive.org/web/20191227174651/https:
//censys.io/domain/report?field=443.https.tls.signature.
hash_algorithm
9http://web.archive.org/web/20191227174551/https:
//censys.io/domain?q=443.https.tls.signature.hash_
algorithm%3Asha1
10See
https://telemetry.mozilla.org/new-pipeline/dist.
html#!measure=SSL_CIPHER_SUITE_FULL, were buckets 5, 61 and
63 correspond to HMAC-SHA-1 ciphersuites
11http://web.archive.org/web/20191226134753/https:
//censys.io/domain/report?field=443.https.tls.cipher_
suite.name.raw
attack [1], but this is not practical given the timing con-
straints (usually just a few seconds, but can be conﬁgured
to a longer period of time).
Again, the choice of cryptographic algorithms depends
on a negotiation between the client and server, so it is
hard to know exactly what will be selected. However,
scans of the IPv4 space from censys at the time of writing
show that roughly 17% of servers use SHA-1 to sign the
transcript12, and 9% of servers use HMAC-SHA-1 in the
record protocol13. This mostly corresponds to servers
running old versions of SSH daemons.
OpenSSH. Due to our results, since version 8.2 of
OpenSSH a “future deprecation notice” is included, ex-
plaining that SHA-1 signatures will be disabled in the
near-future.
7.5 Other Usages of SHA-1
DNSSEC. SHA-1 is still used in DNSSEC, with 18%
of the top-level domains using SHA-1 at the time of writ-
ing14. Since DNSSEC signatures include user-supplied
content, CP collisions could be used to attack the
DNSSEC system.
GIT. GIT relies heavily on SHA-1 to identify all ob-
jects in a repository. It does not necessarily require cryp-
tographic security from SHA-1, but there are certainly
some attack scenarios where attacks on SHA-1 would mat-
ter. In particular, signed GIT commits are essentially
signatures of a SHA-1 hash, so they would be sensitive
to collision attacks.
The GIT developers have been working on replacing
SHA-1 for a while15, and they use a collision detection
library [26] to mitigate the risks of collision attacks.
Timestamping. Many timestamping servers appar-
ently support SHA-1, such as: https://sectigo.com/
resources/time-stamping-server
8 Conclusion and Future Works
This work shows once and for all that SHA-1 should
not be used in any security protocol where some kind
of collision resistance is to be expected from the hash
function. Continued usage of SHA-1 for certiﬁcates or for
12http://web.archive.org/web/20191226130952/https:
//censys.io/ipv4/report?field=22.ssh.v2.selected.kex_
algorithm
13http://web.archive.org/web/20191226131928/https:
//censys.io/ipv4/report?field=22.ssh.v2.selected.client_
to_server.mac
14https://www.dns.cam.ac.uk/news/2020-02-14-sha-
mbles.html
15https://git-scm.com/docs/hash-function-transition/
1854    29th USENIX Security Symposium
USENIX Association
authentication of handshake messages in TLS or SSH is
dangerous, and there is a concrete risk of abuse by a well-
motivated adversary. SHA-1 has been broken regarding
collision resistance since 2004, but it is still used in many
security systems. We strongly advise users to remove
SHA-1 support to avoid downgrade attacks.
We also show that gaming or mining GPUs oﬀer a
cheap and eﬃcient way to attack symmetric cryptog-
raphy primitives. In particular, it now costs less than
US$ 100k to rent GPUs and break cryptography with a
security level of 64 bits (i.e. to compute 264 operations
of symmetric cryptography).
The cost of our attack is roughly four times the cost
of a plain collision attack, so there is limited room for
improvements in terms of complexity.
On the other hand, we believe there is some possibility
to reduce the number of blocks used in the attack without
increasing the complexity much. Firstly, with a better
use of the global parameters of the general chosen-preﬁx
collision attack. By playing with the number of blocks,
the allowable probabilities and the size of the graph, one
could probably ﬁnd a better conﬁguration. Secondly, by
not considering only the core diﬀerential trail from [23],
but using other interesting ones, we would increase the
pool of available diﬀerences and in turn reduce the re-
quired number of blocks.
Acknowledgements
The authors would like to thank Vesselin Velichkov for
his help with regards to an initial analysis of neutral
bits applicability on SHA-1 and Werner Koch for his
comments on the applicability of our attacks on PGP.
The authors would also like to thank gpuserversrental.
com for their eﬃcient service regarding the GPU cluster
renting. The second author is supported by Temasek
Laboratories, Singapore.
A small part of the experiments presented in this paper
were carried out using the Grid’5000 testbed, supported
by a scientiﬁc interest group hosted by Inria and includ-
ing CNRS, RENATER and several Universities as well
as other organizations (see https://www.grid5000.fr).
Development and small scale experiments before launch-
ing the main computation were carried out on the rioc
cluster from Inria.
References
[1] Karthikeyan Bhargavan and Gaëtan Leurent. Tran-
script collision attacks: Breaking authentication in
TLS, IKE and SSH. In NDSS 2016. The Internet
Society, February 2016.
[2] Eli Biham and Raﬁ Chen. Near-collisions of SHA-0.
In Franklin [8], pages 290–305.
[3] Eli Biham, Raﬁ Chen, Antoine Joux, Patrick Car-
ribault, Christophe Lemuet, and William Jalby. Col-
lisions of SHA-0 and reduced SHA-1. In Ronald
Cramer, editor, EUROCRYPT 2005, volume 3494
of LNCS, pages 36–57. Springer, Heidelberg, May
2005.
[4] Gilles Brassard, editor. CRYPTO, volume 435 of
Lecture Notes in Computer Science. Springer, 1990.
[5] J. Callas, L. Donnerhacke, H. Finney, D. Shaw, and
R. Thayer. RFC 4880 - OpenPGP Message Format.
Internet Activities Board, November 2007.
[6] Ivan Damgård. A Design Principle for Hash Func-
tions. In Brassard [4], pages 416–427.
[7] Christophe De Cannière and Christian Rechberger.
Finding SHA-1 characteristics: General results and
applications. In Xuejia Lai and Kefei Chen, editors,
ASIACRYPT 2006, volume 4284 of LNCS, pages
1–20. Springer, Heidelberg, December 2006.
[8] Matthew Franklin, editor. CRYPTO 2004, volume
3152 of LNCS. Springer, Heidelberg, August 2004.
[9] Antoine Joux. Multicollisions in iterated hash func-
In
tions. Application to cascaded constructions.
Franklin [8], pages 306–316.
[10] Antoine Joux and Thomas Peyrin. Hash functions
and the (ampliﬁed) boomerang attack. In Alfred
Menezes, editor, CRYPTO 2007, volume 4622 of
LNCS, pages 244–263. Springer, Heidelberg, August
2007.
[11] Vlastimil Klima. Tunnels in hash functions: MD5
collisions within a minute. Cryptology ePrint
Archive, Report 2006/105, 2006. http://eprint.
iacr.org/2006/105.
[12] Gaëtan Leurent and Thomas Peyrin. From colli-
sions to chosen-preﬁx collisions application to full
SHA-1. In Yuval Ishai and Vincent Rijmen, edi-
tors, EUROCRYPT 2019, Part III, volume 11478
of LNCS, pages 527–555. Springer, Heidelberg, May
2019.
[13] Gaëtan Leurent and Thomas Peyrin. SHA-1 is a
Shambles - First Chosen-Preﬁx Collision on SHA-1
and Application to the PGP Web of Trust. Cryptol-
ogy ePrint Archive, Report 2020/014, 2020. https:
//eprint.iacr.org/2020/014.
USENIX Association
29th USENIX Security Symposium    1855
[14] Marc Stevens. Attacks on Hash Functions and
Applications. PHD Thesis, Leiden University, June
2012.
[15] Ralph C. Merkle. One Way Hash Functions and
DES. In Brassard [4], pages 428–446.
[16] National Institute of Standards and Technology.
FIPS 180-1: Secure Hash Standard, April 1995.
[17] National Institute of Standards and Technology.
FIPS 180-2: Secure Hash Standard, August 2002.
[18] National Institute of Standards and Technology.
FIPS 202: SHA-3 Standard: Permutation-Based
Hash and Extendable-Output Functions, August
2015.
[19] Ronald L. Rivest. The MD4 message digest algo-
rithm. In Alfred J. Menezes and Scott A. Vanstone,
editors, CRYPTO’90, volume 537 of LNCS, pages
303–311. Springer, Heidelberg, August 1991.
[20] Ronald L. Rivest. RFC 1321: The MD5 Message-
Digest Algorithm. Internet Activities Board, April
1992.
[21] Marc Stevens. Counter-cryptanalysis.
In Ran
Canetti and Juan A. Garay, editors, CRYPTO 2013,
Part I, volume 8042 of LNCS, pages 129–146.
Springer, Heidelberg, August 2013.
[22] Marc Stevens. New collision attacks on SHA-1 based
on optimal joint local-collision analysis. In Thomas
Johansson and Phong Q. Nguyen, editors, EURO-
CRYPT 2013, volume 7881 of LNCS, pages 245–261.
Springer, Heidelberg, May 2013.
[23] Marc Stevens, Elie Bursztein, Pierre Karpman, Ange
Albertini, and Yarik Markov. The ﬁrst collision for
full SHA-1. In Jonathan Katz and Hovav Shacham,
editors, CRYPTO 2017, Part I, volume 10401 of
LNCS, pages 570–596. Springer, Heidelberg, August
2017.
[24] Marc Stevens, Pierre Karpman, and Thomas Peyrin.
Freestart collision for full SHA-1.
In Marc Fis-
chlin and Jean-Sébastien Coron, editors, EURO-
CRYPT 2016, Part I, volume 9665 of LNCS, pages
459–483. Springer, Heidelberg, May 2016.
[25] Marc Stevens, Arjen K. Lenstra, and Benne
de Weger. Chosen-preﬁx collisions for MD5 and
colliding X.509 certiﬁcates for diﬀerent identities.
In Moni Naor, editor, EUROCRYPT 2007, volume
4515 of LNCS, pages 1–22. Springer, Heidelberg,
May 2007.
[26] Marc Stevens and Daniel Shumow. Speeding up
detection of SHA-1 collision attacks using unavoid-
able attack conditions. In Engin Kirda and Thomas
Ristenpart, editors, USENIX Security 2017, pages
881–897. USENIX Association, August 2017.
[27] Marc Stevens, Alexander Sotirov, Jacob Appelbaum,
Arjen K. Lenstra, David Molnar, Dag Arne Osvik,
and Benne de Weger. Short chosen-preﬁx collisions
for MD5 and the creation of a rogue CA certiﬁcate.
In Shai Halevi, editor, CRYPTO 2009, volume 5677
of LNCS, pages 55–69. Springer, Heidelberg, August
2009.
[28] Paul C. van Oorschot and Michael J. Wiener. Par-
allel collision search with cryptanalytic applications.
Journal of Cryptology, 12(1):1–28, January 1999.
[29] Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu.
Finding collisions in the full SHA-1. In Victor Shoup,
editor, CRYPTO 2005, volume 3621 of LNCS, pages
17–36. Springer, Heidelberg, August 2005.
1856    29th USENIX Security Symposium
USENIX Association