VPBox, including the presence of virtualization components.
Hardware-related Discrepancies. Row 2 to Row 7 focus on
detecting the hardware-related discrepancies caused by virtualiza-
tion. Android emulators are easy to be detected because of software-
emulated hardware and slow performance. VirtualApp and Parallel
Space reveal the same hardware effects because guest apps can still
directly access the underlying Android device’s hardware. VMOS
fails five times in the category of “Hardware Components.” The
reason is VMOS lacks virtualization support for WiFi, Telephony,
Audio, GPS, and Bluetooth. VMOS’s results imply that incomplete
device virtualization can also be exploited by adversaries to finger-
print the presence of a virtual phone.
Device Artifacts. Row 8 and Row 9 represent the detection of
device artifacts. Software-based emulators exhibit different values
in some Android system properties, and many APIs return unique
device identifiers. For app-level virtualization, to run multiple copies
of the same guest apps simultaneously, the host app (e.g., Virtual-
App) has to intentionally reveal some different device artifacts (e.g.,
Android ID) to each guest app instance. As VMOS’s device virtual-
ization is not complete, it also returns ten different API values about
device identifiers, such as TelephonyManager.getLine1Number().
In contrast, as VPBox’s foreground VP can directly access the hard-
ware, it reveals the same device artifacts as the physical device.
App-level Virtualization. Row 10 detects two characteristics
of app-level virtualization [56, 78]: 1) Shared UID between the host
app and guest apps; 2) API-hooking mechanism. The three Android
emulators also adopt API-hooking as an analysis approach. By
contrast, only VPBox succeeds in bypassing all detection heuristics.
Because each VP has its private namespace so that it does not
interfere with the other VPs and the host. Besides, VPBox does not
rely on user-level API-hooking, which means our virtualization
does not leave hook footprints in the VP’s runtime environment.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2868Table 3: The results of anti-virtual-environment detection. For the results like “X/Y”, Y is the total number of detection heuris-
tics, and X is the number of effective ones. For the results of SafetyNet and ishumei, (cid:2) means a tool successfully detects this
virtual environment, and (cid:3) means it treats this virtual environment as a genuine Android device. For each evasive malware
family, the value in “()” is the number of samples, and we represent the number of file operations generated by each evasive
malware family as (min, max, median).
Detection Heuristics
Emulated Network [69]
Performance [69]
Hardware Components [69]
Sensor Events [16]
Hypervisor Heuristics [50]
Instruction-level Profiles [55]
Android APIs [34, 69]
System Properties [34]
UID & Hooking [56, 78]
SafetyNet-bI [5]
ishumei [60]
Evasive Malware (1, 961)
Rotexy (273) [58]
Ashas (152) [63]
HeHe (145) [23]
Ztorg (143) [67]
Andr RuSms-AT (217) [62]
OBAD (290) [66]
Android.BankBot (290) [40]
GhostClicker (442) [25]
G-Ware2 (9) [9]
Android Emulator
App-Level Virtualization
Android Container
DroidScope [75] CuckooDroid [53] DroidBox [41] VirtualApp [11]
Parallel Space [42]
VMOS [71]
VPBox1
5/5
2/2
11/13
9/9
2/2
6/6
38/47
10/10
1/4
(cid:2)
(cid:2)
(9, 77, 25)
(0, 27, 0)
(0, 0, 0)
(0, 37, 25)
(0, 29, 0)
(26, 52, 40)
(0, 176, 50)
(24, 94, 41)
(0, 10, 8)
5/5
2/2
13/13
9/9
2/2
6/6
47/47
10/10
1/4
(cid:2)
(cid:2)
5/5
2/2
13/13
9/9
2/2
6/6
40/47
10/10
1/4
(cid:2)
(cid:2)
0/5
0/2
0/13
0/9
0/2
0/6
22/47
0/10
4/4
(cid:2)
(cid:2)
0/5
0/2
0/13
0/9
0/2
0/6
16/47
0/10
4/4
(cid:2)
(cid:2)
0/5
0/2
5/13
0/9
0/2
0/6
10/47
0/10
0/4
(cid:2)
(cid:2)
0/5
0/2
0/13
0/9
0/2
0/6
0/47
0/10
0/4
(cid:3)
(cid:3)
(9, 73, 10)
(0, 20, 0)
(0, 0, 0)
(0, 30, 20)
(0, 20, 0)
(20, 40, 30)
(0, 118, 30)
(12, 47, 23)
(0, 5, 3)
(9, 73, 16)
(0, 23, 0)
(0, 0, 0)
(0, 30, 20)
(0, 25, 0)
(25, 49, 35)
(0, 149, 24)
(24, 65, 35)
(0, 9, 7)
(18, 24, 19)
(0, 46, 29)
(0, 6, 0)
(0, 31, 26)
(4, 41, 10)
(16, 50, 26)
(1, 224, 71)
(56, 192, 92)
(0, 24, 3)
(0, 0, 0)
(0, 0, 0)
(0, 0, 0)
(0, 0, 0)
(0, 0, 0)
(0, 6, 0)
(0, 0, 0)
(0, 59, 35)
(0, 0, 0)
(24, 113, 43)
(51, 92, 63)
(0, 31, 17)
(0, 59, 3)
(17, 79, 36)
(38, 87, 70)
(6, 211, 93)
(85, 273, 97)
(5, 31, 7)
(50, 170, 74)
(65, 99, 75)
(26, 44, 30)
(40, 63, 45)
(48, 157, 74)
(78, 101, 94)
(64, 250, 101)
(108, 392, 125)
(127, 160, 150)
1All VPBox’s anti-virtual-machine detection experiments are performed in the foreground virtual phone.
2In addition to detecting virtual environments, G-Ware family also detects Google phones.
Commercial Detection Tools. Google SafetyNet [5] and ishumei [60]
are two representative anti-abuse/anti-fraud APIs. They help devel-
opers to determine whether their apps are running on a genuine
Android device. The “SafetyNet-bI” in Table 3 represents SafetyNet’s
“basicIntegrity” verdict. SafetyNet’s “basicIntegrity” and ishumei
can identify the signs of a rooted device, emulator, and API hook-
ing. Our results show that both of them are able to recognize all
of the tested Android emulators, VirtualApp, Parallel Space, and
VMOS, but they fail to detect VPBox. Please note that SafetyNet
also provides another more stringent Android compatibility testing,
called “ctsProfileMatch.” It detects genuine but uncertified devices,
certified devices with an unlocked bootloader, and devices with
custom ROM. VPBox does not pass the verdict of “ctsProfileMatch,”
because we have to unlock the bootloader to flash VPBox’s image.
We argue that this is not a specific limitation caused by our virtual-
ization system. We download the complete Android 6.0-10.0 system
source code, compile them in Ubuntu, and then flash them on mo-
bile devices—all of them cannot pass the check of “ctsProfileMatch”
either. Also, many top phone manufacturers run a custom ROM in
their products, such as the MIUI system in Xiaomi smartphones.
Evasive Malware. We collect 1, 961 environment-sensitive mal-
ware samples (9 families) from our industry collaborator. Security
analysts have confirmed that all of these samples try to detect vir-
tual machines. For example, HeHe [23] variants detect whether
they are being run in an emulator by checking the IMEI, phone
number, operator, and phone model. Like BareDroid [48], we also
use the number of file operations as a quantitative measurement
for the amount of malicious behaviors. Under each virtual environ-
ment, we follow CopperDroid’s targeted stimulation strategy [64]
to stimulate a running malware sample for 1 minute and monitor
its behaviors. The last nine rows of Table 3 show the number of
file operations generated by each evasive malware family—they
are strikingly different between VPBox and the others. The num-
ber “0” indicates that the sample crashed upon start; we attribute
this to the successful detection of virtual environment. Apparently,
evasive malware samples either crashed upon start or performed a
very small number of file operations under emulators and app-level
virtualization tools. In contrast, no evasive malware sample crashed
under VPBox, and malware exhibits much more behaviors than
other sandboxes. For example, we find most malware crashed in
Parallel Space [42], and the variants of HeHe [23] and Ztorg [67]
can detect all virtual environments except for VPBox.
8.3 VP Customization Evaluation
We conduct a separate experiment to compare evasive malware
behaviors in VPBox and physical Google phones. Although most
malware samples reveal the same behaviors in VPBox and physical
Google phones, we do find an exception for G-Ware [9]. Upon
further investigation, we find that, in addition to evading virtual
machines, G-Ware family also avoids running in Google phones.
G-Ware samples first retrieve the device’s system property. If the
string of “http.agent” or “Manufacturer” contains “Pixel,” “Nexus,”
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2869Table 4: Number of file operations generated by G-Ware in
Google phones (Pixel 3a XL and Nexus 6p) and four differ-
ent custom VPs. We customize the four VPs as Xiaomi Red-
miNote 4 (VP1), Xiaomi Redmi Note 4x (VP2), Huawei Honor
6x (VP3), and Huawei Honor 8 (VP4).
Samples
Real Devices VP1 VP2 VP3 VP4
G-Ware1
G-Ware2
G-Ware3
G-Ware4
G-Ware5
G-Ware6
G-Ware7
G-Ware8
G-Ware9
11
10
8
8
7
26
9
23
12
147
157
139
153
133
152
146
160
141
143
152
134
149
127
146
147