点击劫持或用户界面伪装是一种攻击，会欺骗用户点击一个看起来合法的恶意按钮。攻击者通过使用HTML页面覆盖技术将一个网页隐藏在另一个网页中来实现这一目的。让我们探讨一下这个有趣而易于利用的漏洞，为什么它是一个问题，以及您如何找到它的实例。
Note that clickjacking is rarely considered in scope for bug bounty
programs, as it usually involves a lot of user interaction on the
victim's part. Many programs explicitly list clickjacking as out of
scope, so be sure to check the program's policies before you start
hunting! However, some programs still accept them if you can demonstrate
the impact of the clickjacking vulnerability. We will look at an
accepted report later in the chapter.
请注意，点击劫持通常需要受害者进行大量交互，因此很少被视为漏洞赏金计划的范围内。许多计划明确将点击劫持列为超范围，因此在开始寻找之前，请务必检查计划的政策！然而，如果您能够证明点击劫持漏洞的影响，某些计划仍会接受它们。我们将在本章后面查看一份被接受的报告。
## [ ]{#c08.xhtml#Page_144 .pagebreak title="144"} Mechanisms {#c08.xhtml#h1-501546c08-0001}
Clickjacking relies on an HTML feature called an *iframe* . HTML iframes
allow developers to embed one web page within another by placing an
`           ` tag on the page, and then specifying the URL to
frame in the tag's `      src     ` attribute. For example, save the
following page as an HTML file and open it with a browser:
点击劫持依赖于一种叫做iframe的HTML功能。HTML
iframes允许开发人员通过在网页上放置一个\标签，然后在标签的src属性中指定要嵌入的网页的URL来将一个网页嵌入另一个网页中。例如，将以下页保存为HTML文件，并用浏览器打开：
      This is my web page.
      If this window is not blank, the iframe source URL can be framed!
You should see a web page that looks like [Figure
8-1](#c08.xhtml#figure8-1){#c08.xhtml#figureanchor8-1} . Notice that a
box places *www.example.com* in one area of the larger page.
你应该会看到一个类似图8-1的网页。请注意，一个方框会把www.example.com放在更大页面的某个区域。
![[Figure 8-1]{#c08.xhtml#figure8-1} : If the iframe is not blank, the
page specified in the iframe's [ `         src        `
]{.LiteralInCaption} attribute can be framed! ¶
图8-1：如果iframe不为空，则可以将指定在iframe的src属性中的页面框架化！](image_fi/501546c08/f08001.png){.keyline}
[ ]{#c08.xhtml#Page_145 .pagebreak title="145"} Some web pages can't be
framed. If you place a page that can't be framed within an iframe, you
should see a blank iframe, as in [Figure
8-2](#c08.xhtml#figure8-2){#c08.xhtml#figureanchor8-2} .
一些网页无法被框架。如果您将一个无法被框架的页面放置在iframe中，您应该会看到一个空白的iframe，如图8-2所示。
![[Figure 8-2]{#c08.xhtml#figure8-2} : If the iframe is blank, the
iframe source cannot be framed. ¶
图8-2：如果iframe为空，则无法框定iframe来源。](image_fi/501546c08/f08002.png){.keyline}
Iframes are useful for many things. The online advertisements you often
see at the top or sides of web pages are examples of iframes; companies
use these to include a premade ad in your social media or blog. Iframes
also allow you to embed other internet resources, like videos and audio,
in your web pages. For example, this iframe allows you to embed a
YouTube video in an external site:
Iframes对于许多事情都非常有用。您经常在网页顶部或侧边看到的在线广告就是Iframes的例子;公司使用这些来在您的社交媒体或博客中包含预先制作的广告。Iframes还允许您将其他互联网资源（例如视频和音频）嵌入您的网页中。例如，这个Iframe允许你在外部站点中嵌入YouTube视频。
[ ]{#c08.xhtml#Page_146 .pagebreak title="146"} Iframes have made our
internet a more vibrant and interactive place. But they can also be a
danger to the framed web page because they introduce the possibilities
of a clickjacking attack. Let's say that *example.com* is a banking site
that includes a page for transferring your money with a click of a
button. You can access the balance transfer page with the URL
*https://www.example.com/transfer_money* .
Iframes让网上世界变得更加充满活力和互动性。但是它们也会对被嵌套的网页构成危险，因为它们引入了点击劫持攻击的可能性。假设example.com是一个银行网站，包括一个可通过点击按钮转移您的资金的页面。您可以通过URL
https://www.example.com/transfer_money 访问余额转移页面。
This URL accepts two parameters: the recipient account ID and the
transfer amount. If you visit the URL with these parameters present,
such as
*https://www.example.com/transfer_money?recipient=RECIPIENT_ACCOUNT&amount=AMOUNT_TO_TRANSFER*
, the HTML form on the page will appear prefilled ( [Figure
8-3](#c08.xhtml#figure8-3){#c08.xhtml#figureanchor8-3} ). All you have
to do is to click the Submit button, and the HTML form will initiate the
transfer request.
此URL接受两个参数：收件人账户ID和转账金额。如果您访问带有这些参数的URL，例如
https://www.example.com/transfer_money?recipient=RECIPIENT_ACCOUNT&amount=AMOUNT_TO_TRANSFER，页面上的HTML表单将自动填充（图8-3）。您只需点击提交按钮，HTML表单就会发起转账请求。
![[Figure 8-3]{#c08.xhtml#figure8-3} : The balance transfer page with
the HTTP POST parameters prefilled ¶ 图8-3：具有预填HTTP
POST参数的余额转移页面](image_fi/501546c08/f08003.png){.keyline}
Now imagine that an attacker embeds this sensitive banking page in an
iframe on their own site, like this:
现在想象一下，如果攻击者将这个敏感的银行页面嵌入到他们自己的网站的
iframe 中，就像这样：
      Welcome to my site!
This iframe embeds the URL for the balance transfer page. It also passes
in the URL parameters to prefill the transfer recipient and amount. The
attacker hides this iframe on a website that appears to be harmless,
then tricks the user into clicking a button on the sensitive page. To
achieve this, they overlay multiple HTML elements in a way that obscures
the banking form. Take a look at this HTML page, for example:
该 iframe 嵌入了余额转账页面的 URL。它还传递了 URL
参数以预填转账收件人和金额。攻击者将此 iframe
隐藏在一个看似无害的网站上，然后诱骗用户点击敏感页面上的按钮。为了实现这一点，他们以一种方式叠加多个
HTML 元素，以模糊银行表单。例如，看看这个 HTML 页面：
      Welcome to my site!
      This is a cybersecurity newsletter that focuses on bug
    bounty news and write-ups! 
      Please subscribe to my newsletter below to receive new
    cybersecurity articles in your email inbox!
        Email:
      5 
      6 
You can see that we've added a `           ` tag at the top of
the HTML page. Anything between `           ` tags is CSS code
used to specify the styling of HTML elements, such as font color,
element size, and transparency. We can style HTML elements by assigning
them IDs and referencing these in our style sheet.
你可以看到我们在HTML页面顶部添加了一个\标签。在\标签之间的任何内容都是CSS代码，用于指定HTML元素的样式，例如字体颜色、元素大小和透明度。我们可以通过为它们分配ID并引用这些ID来设置HTML元素的样式。
Here, we set the position of our decoy element to `      absolute     `
to make the decoy site overlap with the iframe containing the victim
site [ 3 ]{.CodeAnnotation aria-label="annotation3"} . Without the
`      absolute     ` position directive, HTML would display these
elements on separate parts of the screen. The decoy element includes a
Subscribe to Newsletter button, and we carefully position the iframe so
the Transfer Balance button sits directly on top of this Subscribe
button, using new lines created by HTML's line break tag
`           ` [ 5 ]{.CodeAnnotation aria-label="annotation5"} [ 6
]{.CodeAnnotation aria-label="annotation6"} . We then make the iframe
invisible by setting its opacity to a very low value [ 1
]{.CodeAnnotation aria-label="annotation1"} . Finally, we set the
z-index of the iframe to a higher value than the decoys [ 2
]{.CodeAnnotation aria-label="annotation2"} [ 4 ]{.CodeAnnotation
aria-label="annotation4"} . The *z-index* sets the stack order of
different HTML elements. If two HTML elements overlap, the one with the
highest z-index will be on top.
在这里，我们将我们的幌子元素的位置设置为绝对位置，使得幌子站点与包含受害者站点3的iframe重叠。没有绝对位置指令，HTML会在屏幕的不同部分显示这些元素。幌子元素包括一个"订阅通讯"按钮，我们仔细地定位了iframe，使得"转移余额"按钮直接位于这个"订阅"按钮的上方，使用HTML的换行标签\5
6创建新的行。然后，我们通过将iframe的不透明度设置为非常低的值1使其不可见。最后，我们将iframe的z-index设置为比幌子的高2
4。z-index设置不同HTML元素的堆叠顺序。如果两个HTML元素重叠，具有最高z-index的元素将位于顶部。
By setting these CSS properties for the victim site iframe and decoy
form, we get a page that looks like it's for subscribing to a
newsletter, but contains an invisible form that transfers the user's
money into the attacker's account. [ ]{#c08.xhtml#Page_148 .pagebreak
title="148"} Let's turn the opacity of the iframe back to
`      opacity     ` `      :1     ` to see how the page is actually
laid out. You can see that the Transfer Balance button is located
directly on top of the Subscribe to Newsletter button ( [Figure
8-4](#c08.xhtml#figure8-4){#c08.xhtml#figureanchor8-4} ).
通过为受害者网站的iframe和诱饵表单设置这些CSS属性，我们得到了一个看起来像是订阅新闻的页面，但实际上包含一个将用户的钱转移到攻击者账户的不可见表单。让我们将iframe的不透明度反转为opacity:1，以查看页面的实际布局。您可以看到"转账余额"按钮直接位于"订阅新闻"按钮上方（图8-4）。
![[Figure 8-4]{#c08.xhtml#figure8-4} : The Transfer Balance button lies
directly on top of the Subscribe button. Victims think they're
subscribing to a newsletter, but they're actually clicking the button to
authorize a balance transfer. ¶
图8-4：转账按钮直接位于订阅按钮上方。受害者以为自己是在订阅新闻通讯，但实际上点击的是授权转账的按钮。](image_fi/501546c08/f08004.png){.keyline}
Once we reset the opacity of the iframe to `      opacity:0.00001     `
to make the sensitive form invisible, the site looks like a normal
newsletter page ( [Figure
8-5](#c08.xhtml#figure8-5){#c08.xhtml#figureanchor8-5} ).
当我们将Iframe的不透明度重置为opacity:0.00001使敏感表单变得不可见，该网站就像普通的通讯页面（图8-5）。
![[Figure 8-5]{#c08.xhtml#figure8-5} : The attacker tricks users into
clicking the button by making the sensitive form invisible. ¶
图8-5：攻击者通过使敏感表单不可见来诱使用户单击按钮。](image_fi/501546c08/f08005.png){.keyline}
If the user is logged into the banking site, they'll be logged into the
iframe too, so the banking site's server will recognize the requests
sent by the iframe as legit. When the user clicks the seemingly harmless
button, they're executing a balance transfer on *example.com* ! They'll
have accidentally transferred \$5,000 from their bank account balance to
the attacker's account instead of subscribing to a newsletter. This is
why we call this attack *user-interface redressing* or *clickjacking* :
the attacker redressed the user interface to hijack user clicks,
repurposing the clicks meant for their page and using them on a victim
site.
如果用户已登录银行网站，则他们也将登录iframe，因此银行网站的服务器将识别iframe发送的请求为合法的。
当用户单击看似无害的按钮时，他们正在执行将5000美元从其银行账户余额转移至攻击者账户的余额转移操作，而非订阅通讯。
这就是为什么我们称之为用户界面伪装或点击劫持攻击：攻击者重新设计了用户界面以劫持用户点击，重定向了原本用于其页面的点击并将它们用在受害站点上。
[ ]{#c08.xhtml#Page_149 .pagebreak title="149"} This is a simplified
example. In reality, payment applications will not be implemented this
way, because it would violate data security standards. Another thing to
remember is that the presence of an easy-to-prevent vulnerability on a
critical functionality, like a clickjacking vulnerability on the balance
transfer page, is a symptom that the application does not follow the
best practices of secure development. This example application is likely
to contain other vulnerabilities, and you should test it extensively.
这只是一个简化的例子。在现实中，支付应用程序不会以这种方式实现，因为这样做将违反数据安全标准。另一件需要记住的事情是，如果在关键功能（例如余额转移页面）上存在易于预防的漏洞，比如点击劫持漏洞，这是应用程序未遵循安全开发最佳实践的症状。这个例子应用程序很可能还存在其他漏洞，你应该进行全面测试。
## Prevention {#c08.xhtml#h1-501546c08-0002}
Two conditions must be met for a clickjacking vulnerability to happen.
First, the vulnerable page has to have functionality that executes a
state-changing action on the user's behalf. A *state-changing action*
causes changes to the user's account in some way, such as changing the
user's account settings or personal data. Second, the vulnerable page
has to allow itself to be framed by an iframe on another site.
点击劫持漏洞发生必须满足两个条件。第一，易受攻击的页面必须具有代表用户执行状态更改操作的功能。状态更改操作会以某种方式更改用户账户，例如更改用户的账户设置或个人数据。第二，易受攻击的页面必须允许自己被另一个网站的
iframe 框架化。
The HTTP response header `      X-Frame-Options     ` lets web pages
indicate whether the page's contents can be rendered in an iframe.
Browsers will follow the directive of the header provided. Otherwise,
pages are frameable by default.
HTTP响应头X-Frame-Options允许网页指示页面内容是否可以呈现在iframe中。浏览器将遵循提供的头指令。否则，页面默认可呈现在框架中。
This header offers two options: `      DENY     ` and
`      SAMEORIGIN     ` . If a page is served with the `      DENY     `
option, it cannot be framed at all. The `      SAMEORIGIN     ` option
allows framing from pages of the same origin: pages that share the same
protocol, host, and port.