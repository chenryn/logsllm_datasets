### Honey Onions: Exposing Snooping Tor HSDir Relays

**Authors:**
- Guevara Noubir and Amirali Sanatinia
- Email: {noubir, amirali}@ccs.neu.edu
- Institution: Northeastern University

---

### 1. Motivations

- Previous research has focused on the malicious behavior of Tor relays, particularly known bad Exit nodes.
- Other studies have examined the nature of hidden services content.
- However, no prior work has specifically addressed the Hidden Service Directories (HSDirs).
- Indexing hidden services requires modifications to Tor, which can indicate a higher level of effort and potentially more malicious activities.

---

### 2. Tor and Hidden Services

- Tor is a widely used practical anonymity infrastructure.
- It provides anonymity for both clients and servers through hidden services.
- The system relies on the honest behavior of volunteer relays.
- It is known that some relays, particularly Exit nodes, misbehave and may perform Man-in-the-Middle (MITM) attacks.
- There is limited knowledge about HSDirs and hidden services in general.

---

### 3. Hidden Service Directories (HSDir)

- **Client**: Initiates a connection to a hidden service.
- **Hidden Service**: Provides a service accessible only through Tor.
- **IP**: The IP address of the client or server.
- **RP**: Rendezvous Point, where the client and hidden service establish a connection.
- **HSDir**: Stores the hidden service's descriptor and facilitates the connection process.

**Steps:**
1. Client requests a hidden service.
2. Hidden service generates a descriptor and uploads it to an HSDir.
3. Client retrieves the descriptor from the HSDir.
4. Client and hidden service establish a connection via a Rendezvous Point.

---

### 4. Ring of Responsible HSDirs

- A set of HSDirs responsible for a specific hidden service.
- This ring ensures redundancy and reliability in the hidden service directory system.

---

### 5. Honey Onions (HOnions)

- **Definition**: Each HOnion corresponds to a server or process running on a local IP address, accessible only through Tor.
- **Visibility**: Not shared anywhere, ensuring controlled access.
- **Schedules**:
  - Daily
  - Weekly
  - Monthly
- **Logging**: Requests are logged for further investigation.

---

### 6. HOnions Architecture

1. **Generate HOnions**: Create unique HOnions.
2. **Place HOnions on HSDirs**: Distribute the HOnions across the HSDirs.
3. **Build Bipartite Graph**:
   - On visit, mark potential HSDirs.
   - Add to the bipartite graph.

**Example:**
- `ho_i` and `ho_j` are HOnions.
- `d_i`, `d_{i+1}`, and `d_{i+2}` are HSDirs.
- When an HOnion is visited, the corresponding HSDir is marked and added to the graph.

---

### 7. Set Cover Problem

- **Formulation**:
  - `S = S_H ∪ S_V`: Set of HOnions and HSDirs.
  - `E = {(h, d) | h ∈ S_V, d ∈ S_H, h was visited by d}`: Edges between HOnions and HSDirs.
  - **Objective**: Find the smallest subset `R ⊆ S_H` such that every `h ∈ S_V` is covered by at least one `d ∈ R`.

- **Complexity**: The set cover problem is NP-complete.
- **Solution**: Approximation algorithms can be used to find a near-optimal solution.
- **Result**: Provides a lower bound on the number of snooping HSDirs.

---

### 8. Heuristic Approach

- **Input**: `G(V, E)`: Bipartite graph of HOnions to HSDirs.
- **Output**: `S`: Set explaining visits.
- **Algorithm**:
  1. Initialize `S = ∅`.
  2. While `S ∩ S_V ≠ ∅`:
     - Pick `h ∈ S ∩ S_H` with the highest degree.
     - Update `S ← S \ {h}`.
  3. End while.

---

### 9. Integer Linear Programming (ILP)

- **Objective**: Minimize the number of HSDirs.
- **Constraints**:
  - For each `h ∈ S_V`, ensure `∑ e_i ≥ 1` for all `i` in the set of HSDirs.
- **Result**: Provides a lower bound on the number of snooping HSDirs to explain the visits.

---

### 10. Connectivity Graph

- Visual representation of the connections between HOnions and HSDirs.
- Helps in understanding the network structure and identifying potential snooping HSDirs.

---

### 11. Snooping Behavior

- **Variety**: Automated vs. manual probing.
- **Aggressiveness**: Periodic and aggressive probing.
- **Vulnerability Scanning**:
  - SQL Injection
  - Cross-Site Scripting (XSS)
  - Path Traversal
  - PHP Easter Eggs
- **Targeted Platforms**:
  - Drupal
  - Ruby on Rails

---

### 12. Geolocation of Snooping HSDirs

- Analysis of the most likely geolocations of snooping HSDirs.

---

### 13. Identity of Snoopers

- **Identification**: Difficult to identify the real entity behind the relays.
- **Hosting**: More than half of the HSDirs are hosted on cloud platforms.
- **Geolocation**: Corresponds to the location of the hosting platform, not necessarily the entity running them.
- **Privacy**: Some cloud platforms are located in countries with strong privacy protections for customers.
- **Anonymity**: Payments over Bitcoin make it even harder to identify the real actors.

---

### 14. Conclusion

- **Framework**: Honey Onions (HOnions) is a framework to detect snooping HSDirs.
- **Impact**: Provides a lower bound on the number of such relays.
- **Importance**: Tor relies on the honest behavior of volunteer relays.
- **Contribution**: This work adds to the body of research on detecting and mitigating misbehaving Tor relays, enhancing the privacy and security of the Tor network.

---

This optimized version aims to provide a clear, coherent, and professional presentation of the research.