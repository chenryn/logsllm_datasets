 A language for specifying application policies,
which govern the actions that principals are autho-
rized to perform.
 A language for specifying credentials, which allow
principals to delegate authorization to other princi-
pals
 A compliance checker, which provides a service for
determining how an action requested by principals
should be handled, given a policy and a set of cre-
dentials.
KeyNote is a simple and ﬂexible trust-management sys-
tem designed to work well for a variety of applications. In
applications using KeyNote, policies and credentials are
written in the same language. The basic unit of KeyNote
programming is the assertion. Assertions contain pro-
grammable predicates that operate on the requested at-
tribute set and limit the actions that principals are al-
lowed to perform. KeyNote assertions are small, highly-
structured programs. Authority can be delegated to others;
a digitally signed assertion can be sent over an untrusted
network and serve the same role as traditional certiﬁcates.
Unlike traditional policy systems, policy in KeyNote is
expressed as a combination of unsigned and signed policy
assertions (signed assertions are also called credentials).
There is a wide spectrum of possible combinations; on the
one extreme, all system policy is expressed in terms of lo-
cal (unsigned) assertions. On the other extreme, all policy
is expressed as signed assertions, with only one rule (the
root of the policy) being an unsigned assertion that dele-
gates to one or more trusted entities. The integrity of each
signed assertion is guaranteed by its signature; therefore,
there is no need for these to be stored within the security
perimeter of the system.
KeyNote allows the creation of arbitrarily sophisticated
security policies, in which entities (which can be identi-
ﬁed by cryptographic public keys) can be granted limited
authorization to perform speciﬁc kinds of trusted actions.
When a “dangerous” action is requested of a KeyNote-
based application, the application submits a description of
the action along with a copy of its local security policy
to the KeyNote interpreter. Applications describe actions
to KeyNote with a set of attribute/value pairs (called an
action attribute set in KeyNote terminology) that describe
the context and consequences of security-critical opera-
tions. KeyNote then “approves” or “rejects” the action
according to the rules given in the application’s local pol-
icy.
KeyNote assertions are written in ASCII and contain a
collection of structured ﬁelds that describe which princi-
pal is being authorized (the Licensee), who is doing the
authorizing (the Authorizer) and a predicate that tests the
action attributes (the Conditions). For example:
Authorizer:
Licensees:
Conditions:
"POLICY"
"Borris Yeltsin"
EmailAddress == "PI:EMAIL"
means that the “POLICY” principal authorizes the “Bor-
ris Yeltsin” principal
to do any action in which the
attribute called “EmailAddress” is equal to the string
“PI:EMAIL”. An action is authorized if asser-
tions that approve the action can link the “POLICY” prin-
cipal with the principal that authorized the action. Prin-
cipals can be public keys, which provides a natural way
to use KeyNote to control operations over untrustworthy
networks such as the Internet.
A complete description of the KeyNote language can be
found in [2].
2.2. KeyNote Control for IPsec
The problem of controlling IPsec SAs is easy to for-
mulate as a trust-management problem: the SA creation
process (usually a daemon running IKE) needs to check
for compliance whenever an SA is to be created. Here,
the actions represent the packet ﬁltering rules required to
allow two hosts to conform to each other’s higher-level
policies.
This leads naturally to a framework for trust manage-
ment for IPsec:
 Each host has its own KeyNote-speciﬁed policy gov-
erning SA creation. This policy describes the classes
of packets and under what circumstances the host
will initiate SA creation with other hosts, and also
what types of SAs it is willing to allow other hosts
to establish (for example, whether encryption will be
used and if so what algorithms are acceptable).
 When two hosts discover that they require an SA,
they each propose to the other the “least powerful”
packet-ﬁltering rules that would enable them to ac-
complish their communication objective. Each host
sends proposed packet ﬁlter rules, along with creden-
tials (certiﬁcates) that support the proposal. Any del-
egation structure between these credentials is entirely
implementation dependent, and might include the
arbitrary web-of-trust, globally trusted third-parties,
such as Certiﬁcation Authorities (CAs), or anything
in between.
 Each host queries its KeyNote interpreter to deter-
mine whether the proposed packet ﬁlters comply
with local policy and, if they do, creates the SA con-
taining the speciﬁed ﬁlters.
Other SA properties can also be subject to KeyNote-
controlled policy. For example, the SA policy may spec-
ify acceptable cryptographic algorithms and key sizes, the
lifetime of the SA, logging and accounting requirements.
Our architecture divides the problem of policy manage-
ment into two components: packet ﬁltering, based on rules
applied to every packet, and trust management, based on
negotiating and deciding which of these rules (and related
SA properties, as noted above) are trustworthy enough to
install.
This distinction makes it possible to perform the per-
packet policy operations at high data rates while effec-
tively establishing more sophisticated trust-management-
based policy controls over the trafﬁc passing through a
security endpoint. Having such controls in place makes it
easier to specify security policy for a large network, and
makes it especially natural to integrate automated policy
distribution mechanisms.
2.3. Policy Discovery
While the IPsec compliance-checking model described
above can be used by itself to provide security policy sup-
port for IPsec, there are two additional issues that need to
be addressed if such an architecture is to be deployed and
used.
The ﬁrst problem is credential discovery and acquisi-
tion. Although users or hosts may be expected to manage
locally policies and credentials that directly refer to them,
they may not know of intermediate credentials (e.g., those
issued by administrative entities) that may be required by
the hosts with which they want to communicate. Consider
the case of a large organization, with two levels of admin-
istration; local policy on the ﬁrewalls trusts only the “cor-
porate security” key. Users obtain their credentials from
their local administrators, who authorize them to connect
to speciﬁc ﬁrewalls. Thus, one or more intermediate cre-
dentials delegating authority from corporate security to
the various administrators is also needed if a user is to
be successfully authorized. Naturally, in more complex
network conﬁgurations (such as extranets) multiple levels
of administration may be present. Some method for deter-
mining what credentials are relevant and how to acquire
them is needed.
Our solution is straightforward: the host that intends to
initiate an IKE exchange can use a simple protocol, which
we call Policy Query Protocol (PQP), to acquire or update
credentials relevant to a speciﬁc intended IKE exchange.
The initiator presents a public key to the responder and
asks for any credentials where the key appears in the Li-
censees ﬁeld. By starting from the initiator’s own key (or
from some key that delegates to the initiator), it is possible
to acquire all credentials that the responder has knowledge
of that may be of use to the initiator. The responder may
also provide pointers to other servers where the initiator
may ﬁnd relevant credentials; in fact, the responder may
just provide a pointer to some other server that holds cre-
dentials for an administrative domain.
Since the credentials themselves are signed, there is no
need to provide additional security guarantees in the pro-
tocol itself. However, any local policies that the responder
discloses would have to be signed prior to being sent to
the initiator; the fact that a KeyNote policy “becomes” a
credential simply by virtue of being signed is very useful
here. Also, the PQP server may have its own policy con-
cerning which hosts are allowed to query for credentials.
The second problem is determining our own capabilities
based on the credentials we hold. This is in some sense
complementary to compliance checking; by analyzing our
credentials in the context of our peer’s policy, it is possible
to determine what types of actions are accepted by that
peer. That is, we can discover what kinds of IPsec SA
proposals are accepted by a remote IKE daemon. This
can assist in avoiding unnecessary IKE exchanges (if it is
known in advance that no SAs acceptable by both parties
can be agreed upon), or narrow down the set of proposals
we send to our peer. Note that if a host reveals all the
relevant credentials and policies using the Policy Query
Protocol, another host can determine in advance and off-
line exactly what proposals that host will accept.
Credential composition is a fairly straightforward, if po-
tentially expensive, operation: we start by constructing a
graph from the peer’s policy to our key. We then reduce
each clause in the Conditions ﬁeld of each credential to its
Disjunctive Normal Form (DNF). To determine the autho-
rization in a chain of two credentials, we need to compute
the intersection of their authorizations. This is a linear-
cost operation over the number of terms in the DNF ex-
pressions of the two credentials. For larger chains (or, in-
deed, arbitrary graphs of credentials), we can apply the
same algorithm recursively. At the end of this operation,
we have a list of acceptable proposals, which the IKE dae-
mon can then use to construct valid SA proposals for the
remote host.
Note that this operation is typically done by the initia-
tor, and thus has no signiﬁcant performance impact on the
responder, which may be a busy security gateway.
3. Implementation
3.2. Adding KeyNote Policy Control
To demonstrate our policy management scheme, we
implemented the architecture described in the previ-
ous section within the OpenBSD IPsec stack [16, 10].
OpenBSD’s IKE implementation (called isakmpd) sup-
ports both passphrase and X.509 certiﬁcate authentication.
We modiﬁed isakmpd to use KeyNote instead of the
conﬁguration-ﬁle based mechanism that was used to vali-
date new Security Associations.
3.1. The OpenBSD IPsec Architecture
In this section we examine how the (unmodiﬁed)
OpenBSD IPsec implementation interacts with isakmpd
and how policy decisions are handled and implemented.
Outgoing packets are processed in the ip output()
routine. The Security Policy Database (SPD)1 is con-
sulted, using information retrieved from the packet it-
self (e.g., source/destination addresses, transport protocol,
ports, etc.) to determine whether, and what kind of, IPsec
processing is required. If no IPsec processing is neces-
sary or if the necessary SAs are available, the appropriate
course of action is taken, ultimately resulting in the packet
being transmitted.
If the SPD indicates that the packet
should be protected, but no SAs are available, isakmpd
is notiﬁed to establish the relevant SAs with the remote
host (or a security gateway, depending on what the SPD
entry speciﬁes). The information passed to isakmpd in-
cludes the SPD ﬁlter rule that matched the packet; this is
used in the IKE protocol to propose the packet selectors2,
which describe the classes of packets that are acceptable
for transmission over the SA to be established. The same
type of processing occurs for incoming packets that are
not IPsec-protected, to determine whether they should be
admitted; similar to the outgoing case, isakmpd may be
notiﬁed to establish SAs with the remote host.
When an IPsec-protected packet is received, the rele-
vant SA is located using information extracted from the
packet and the various protections are peeled off. The
packet is then processed as if it had just been received.
Note that the resulting, de-IPsec-ed packet may still be
subject to local policy, as determined by packet ﬁlter rules;
that is, just because a packet arrived secured does not
mean that it should be accepted. We discuss this issue
further below.
1The SPD is part of all IPsec implementations[15], and is very sim-
ilar in form to packet ﬁlters (and is typically implemented as one). The
typical results of an SPD lookup are accept, drop, and “IPsec-needed”.
In the latter case, more information may be provided, such as what re-
mote peer to establish the SA with, and what level of protection is needed
(encryption, authentication).
2These are a pair of network preﬁx and netmask tuples that describe
the types of packets that are allowed to use the SA.
Because of the structure of the OpenBSD IPsec code,
we were able to add KeyNote policy control entirely by
modifying the isakmpd daemon; no modiﬁcations to the
kernel were required.
Whenever a new IPsec security association is proposed
by a remote host (with the IKE protocol), our KeyNote-
based isakmpd ﬁrst collects security-related information
about the exchange (from its exchange and sa struc-
tures) and creates KeyNote attributes that describe the
proposed exchange. These attributes describe what IPsec
protocols are present, the encryption/authentication algo-
rithms and parameters, the SA lifetime, time of day, spe-
cial SA characteristics such as tunneling, PFS, etc., the
address of the remote host, and the packet selectors that
generate the ﬁlters that govern the SA’s trafﬁc. All this in-
formation is derived from what the remote host proposed
to us (or what we proposed to the remote host, depending
on who initiated the IKE exchange).
Once passed to KeyNote,
these attributes are avail-
able for use by policies (and credentials) in determining
whether a particular SA is acceptable or not. Recall that
the Conditions ﬁeld of a KeyNote assertion contains an ex-
pression that tests the attributes passed with the query. The
IPsec KeyNote attributes were chosen to allow reasonably
natural, intuitive expression semantics. For example, to
check that the IKE exchange is being performed with the
peer at IP address 192.168.1.1, a policy would include the
test:
remote_ike_address == "192.168.001.001"
while a policy that allows only the 3DES algorithm
would test that
esp_enc_alg == "3des"
The KeyNote syntax provides the expected composition
rules and boolean operators for creating complex expres-
sions that test multiple attributes.