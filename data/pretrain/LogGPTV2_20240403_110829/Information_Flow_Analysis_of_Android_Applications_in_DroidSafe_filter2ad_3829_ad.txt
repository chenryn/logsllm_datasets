Figure 2, this means that the array object allocated at line
3 of HashMap has a depth of 4, giving it enough context to
disambiguate the Intent object that allocated the Bundle that
allocated the HashMap that allocated the array. This general
strategy works across containers in the Java and Android API
packages.
IMPROVING THE PRECISION OF ICC MODELING
VI.
Inter-component communication (ICC) is common in An-
droid applications and must be modeled both accurately and
precisely. However, the AOSP implementation of ICC-related
classes is incomplete (relying on native methods for target
resolution and payload delivery). To achieve precision, we
implement our own model of ICC via accurate analysis stubs,
aggressively resolve dynamic program values, and transform
application code to increase precision.
Intent objects describe ICC destinations. Values involved
in the resolution include both java.lang.String and java
.lang.Class objects. We resolve these values statically to
guide precision-enhancing transformations. Our ADI provides
us with an accurate and precise model for resolution analysis
of values involved in Intent resolution.
Strings are an essential base value type of many of the
Intent ﬁelds. To resolve string values given the myriad opera-
tions performed on strings, we employ the JSA String Analyzer
(JSA) [32]. JSA is a ﬂow-sensitive and context-insensitive
static analysis that includes a model of common operations
on Java’s String type. For a given String reference, the
analysis computes a multi-level automaton representing all
possible string values. As a ﬁrst pass, we run JSA (on only the
application source) to resolve values for string references that
are arguments to Android API calls. We convert each resolved
automaton to a regular expression that represents the possible
values of the string value.
After JSA is run, we replace resolved string values in the
application code with constants representing their computed
regular expression, and perform a pass of our points-to analysis
such that these values can be propagated globally. We run our
points-to analysis and store the results of this analysis for
all string references in the program, such that later we can
query the resolved regular expressions representing values for
all string references in application code.
A. Resolving Explicit Intent Destinations
We modiﬁed our PTA to never attach context to an alloca-
tion of or a method call on an object of a class in S. This means
that for a method m called on c ∈ S, the information-ﬂow
Explicit Intent objects are initiated with the destination
component’s fully-qualiﬁed class name or class constant ob-
ject. Before the PTA is run, each class constant passed to a
9
Source Method
Context: void send*Broadcast(Intent, ...) [6 variants]
Activity: void startActivit*(Intent, ...) [6 variants]
Context: void bindService(Intent, Connection)
Context: void startService(Intent)
ContentResolver: insert, query, delete, update
Target Method Call Injected
BroadcastReceiver: void onReceive(Intent)
Activity: void setIntent(Intent)
Service: void droidSafeOnBind(Intent, Connection)
Service: void onStartCommant(Intent, ...)
ContentProvider: insert, query, delete, update
Fig. 3. DroidSafe’s ICC source to target methods transformations.
method of Intent is converted into a component name string
constant representing the class. To determine the destinations
of an Intent object in our abstract heap, we query the points-
to information for the ﬁelds of component name. If all of the
strings objects in the points-to set are constants, we consider
the Intent object resolved.
B. Resolving Implicit Intent Destinations
Implicit Intent objects are Intent objects for which
a component name is not speciﬁed;
in our analysis these
are Intent objects for which the component name ﬁeld
is null. Implicit Intent objects do not directly reference
a destination but instead leave it to the Android system to
deliver them to the appropriate destination(s). A component
registers as a destination of implicit Intent objects by declar-
ing IntentFilter elements in the manifest or program-
matically installing IntentFilter objects on components.
IntentFilter registrations specify string constants that the
component will accept for the action, category, data type,
and uniform resource identiﬁer (Uri) ﬁelds of a dispatched
Intent. We parse the Android manifest, and keep a map
of implicit Intent registrations,
i.e., for each component
the implicit Intent ﬁeld values it accepts. We also sup-
port updating this map with programmatic registrations for
BroadcastReceiver objects, by modeling IntentFilter.
An implicit Intent object in our abstract heap is resolved
if our PTA concludes that the points-to set for one of the action,
category, data type, or Uri ﬁelds reference only constants (or
is empty).
For a resolved implicit Intent, i, we build i’s list of in-
app targets by comparing to each component’s intent ﬁlter. For
component c, we test the action, category, data type, and Uri
ﬁelds in sequence. For each ﬁeld, if i’s ﬁeld is unresolved,
then the test passes. If the ﬁeld of i is resolved, then if any
of its string constants are in the set of strings accepts by c’s
intent ﬁeld for the ﬁeld, then it is a match. All ﬁelds of i have
to pass the test against the respective ﬁelds of c’s intent ﬁlter
for i to be able to target c.
There is additional complexity for programmatic intent
ﬁlters, as DroidSafe may not be able to resolve all ﬁelds of an
intent ﬁlter to constants. An intent ﬁlter ﬁeld that cannot be
resolved matches the respective ﬁeld for all Intents.
C. Transforming ICC calls to Improve Precision
ICC initiation calls are methods that pass an Intent to
Android’s runtime system to perform inter-component com-
munication or binding. Our strategy for improving precision
for ICC is to transform ICC initiation calls into appropriate
method calls at the destination(s), thus linking the data ﬂows
between source and destination.
Figure 3 presents a list of the most common ICC initiation
calls, and the linkage calls that are inserted by DroidSafe to
improve precision and accuracy. For example, for an invoke of
startActivity(Intent), we transform this call into calls
of the destination activities’ setIntent(Intent), linking
the source and targets. Thus when a target Activity calls
getIntent(), all Intent objects that could possibly be sent
to the Activity are calculated by our PTA (we update the PTA
result after all ICC transformations are completed).
For ICC initiation calls on resolved Intent objects, we
link the ICC initiation call to only the destination compo-
nents that are speciﬁed by the Intent. This is achieved
by calling the appropriate linkage method on the heap ob-
ject allocated in our harness for the destination component.
For unresolved Intent objects, we insert linkage calls to
all components of
the appropriate type. For example, a
startActivity(Intent) call with an unresolved Intent
is delivered to all Activity components.
D. Android Services
Android Service components require additional sophistica-
tion because in addition to Intent-mediating communication,
messaging and RPCs can be performed. We illustrate our
Service transformations via the examples in Figure 1(c). In this
example, the Activity ICCSource binds and sends a messages
to the Service ICCService. The important steps performed by
DroidSafe to resolve this ﬂow are as follows:
1) Our manifest parser maps the Intent action string “ICC-
ServiceAction” to ICCService.
2) DroidSafe resolves the Intent object on line 15 as an
Implicit Intent with action string “ICCServiceAction”.
Consulting the implicit IntentFilter registration map,
we see the Intent’s destination is ICCService.
3) The call
to bindService(...) on line 16 is trans-
formed to a linkage call to the harness object representing
ICCService. This linkage call is a new method we deﬁne
in our ADI for Service, droidSafeOnBind(Intent,
ServiceConnection). The linkage method performs the
following (some details omitted):
a) Invoke
receiver’s)
onBind(Intent) method to retrieve the Binder
object. The ADI model for android.os.Messenger
.getBinder() creates a Binder that references the
Messenger object which created it.
ICCService’s
(the
b) Invoke
onServiceConnected(ComponentName,
Binder) on the passed ServiceConnection object,
passing
from
ICCService’s onBind() method.
the android.os.Binder returned
With the linkage methods called, the Binder object used
to create the Messenger in ICCSource line 7 is con-
10
nected to the IncomingHandler of line 8 of ICCService.
The method android.os.Messenger.send(Message) has
a stub to call
the handleMessage(Message) method of
its Handler object. Thus, the call mService.send(msg)
on line 23 of ICCSource will deliver
the message to
the handleMessage(Message) method of ICCService’s
Messenger object.
This is just one example of binding and message communi-
cation in Android that we support. The DroidSafe ICC model
supports precision increasing transformations for common
forms of ICC, and handles uncommon cases conservatively.
INFORMATION-FLOW ANALYSIS
VII.
information-ﬂow analysis
Our
computes
over-
approximation of all
the memory states that occur during
the execution of a program. The analysis is designed as a
forward data-ﬂow analysis. For each type of statement, we
deﬁne a transfer function in terms of how it changes the state
of memory.
an
We divide memory into four separate areas that store local
variables, instance ﬁelds, static ﬁelds, and arrays, reﬂecting the
semantics of the Java programming language:
Memory = Local × Instance × Static × Array
Local = Ctx × Var → InfoVal
Instance = Loc × Field → InfoVal
Static = Class × Field → InfoVal
Array = Loc → InfoVal
Ctx, Loc = AllocSitek
Each of the memory areas is modeled as a function
whose codomain consists of a set of information values. An
information value is a tuple of the type of information and the
source code location where the information was ﬁrst injected.
Our analysis can identify not only the kind of information
being exﬁltrated but the code location of the source.
In the local variable area, Local, each method’s local vari-
ables are parameterized by their calling contexts (i.e. the heap
location of a receiver object), so the precision of the analysis
does not decrease when a method is called in various contexts.
In other words, our information-ﬂow analysis analyzes local
variables in a ﬂow-insensitive and object-sensitive fashion.
The instance ﬁeld area, Instance, is a function that takes
as its arguments an abstract heap location and an instance
ﬁeld. The return value is information values that ﬂow into
the instance ﬁeld of objects at the heap location. Note that an
abstract heap location consists of a series of allocation sites
(see Section V). This area corresponds to what is colloquially
called “context-sensitive (or object-sensitive) heap” or “heap
cloning” in the literature [18]. Each static ﬁeld of each class
has an entry in the static ﬁeld area, Static. Unlike the memory
area for instance ﬁelds, the static ﬁeld area is not parameterized
by heap locations because, in Java, all objects of each class
share the static ﬁelds of the class.
The analysis collects all information values that are as-
signed to the elements of an array and stores the result at
a single heap location of the array area, Array. That is, we
analyze arrays in an array-index-insensitive fashion.
11
An information value is
injected into an appropri-
ate memory area when a source API method is invoked
from application code. More speciﬁcally, for the statement
r = o.source(a) where r is of primitive type, the analysis
puts an information value into an entry in the local variable
area that corresponds to the r variable in the current calling
context; the stored information value consists of the statement’s
location and the type of information associated with the
source method. If r is a reference, the information value
is stored in the special taint ﬁeld of an instance that r refers
to in the current calling context.
For each o.sink(a, ...) statement that invokes a sink
method, DroidSafe reports the information values for accessed
memory addresses in the sink. For each argument (and the
receiver o), DroidSafe reports all the information values that
are attached to memory addresses (and their taint ﬁeld) read
during the execution of the body of the sink method (among
memory addresses reachable from the argument).
In Figure 2, the analysis injects an information value into
the sensitive variable when Location.getLatitude(),
a source API method, is invoked (line 3 of Activity2).
The information value consists of the line number and the
type of information (for this case, a user’s location). For the
invocation of Bundle.put() method (line 5 of Activity2),
the transfer functions of the statements in the body of Bundle
.put() convey the information value from the sensitive
variable to the value ﬁeld of an Entry object whose heap
location is (cid:104) E(cid:13) ← H(cid:13) ← S(cid:13)(cid:105). At the call to a sink API
method (line 7 of Activity2), the analysis reports 1) a user’s
location information is reachable from the bundle2 argument,
2) the information was generated ﬁrst at line 3, and 3) whether
the body of the sink method actually uses the information by
reading the Entry.value ﬁeld. On the other hand, for the call
to a sink API method in Activity1 (line 6 of Activity1),
the analysis correctly reports that a user’s location information
is not reachable from the bundle1 argument. That is, even
though the Entity objects in Activity1 and Activity2
are both created at the same program location E(cid:13), the analysis