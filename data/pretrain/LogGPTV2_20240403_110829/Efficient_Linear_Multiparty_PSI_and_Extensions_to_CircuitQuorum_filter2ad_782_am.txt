(1) Pre-processing: 𝑃1, · · · , 𝑃𝑛 invoke the multiparty functionality RandomF𝑛,𝑡 (𝑚𝑠) to get ([𝑠1], · · · , [𝑠𝑚𝑠]).
(2) For each 𝑖 ∈ {2, · · · , 𝑛}, 𝑗 ∈ [𝑚𝑠], 𝑃1 and 𝑃𝑖 invoke FPSM functionality as follows: 𝑃1 and 𝑃𝑖 send inputs 𝑦 𝑗 and 𝑋𝑖, resp., and
(3) 𝑃𝑖 computes ⟨𝑔𝑖 𝑗⟩𝐵
(4) For each 𝑖 ∈ {2, · · · , 𝑛} and 𝑗 ∈ [𝑚𝑠], 𝑃1 and 𝑃𝑖 invoke F F𝑝
B2A
(5) For 𝑗 ∈ [𝑚𝑠],
1 and ⟨𝑔𝑖 𝑗⟩𝐵
𝑖 , for all 𝑖 ∈ {2, · · · , 𝑛} and 𝑗 ∈ [𝑚𝑠].
resp., and receive additive shares ⟨𝑓𝑖 𝑗⟩1 and ⟨𝑓𝑖 𝑗⟩𝑖, resp., as outputs.
functionality as follows: 𝑃1 and 𝑃𝑖 send inputs ⟨𝑔𝑖 𝑗⟩𝐵
𝑖 , resp., as outputs.
1 and ⟨𝑔𝑖 𝑗⟩𝐵
𝑖 ,
• 𝑃1 computes ⟨𝑏 𝑗⟩1 =𝑛
𝑖=2⟨𝑓𝑖 𝑗⟩1 and for 𝑖 ∈ {2, · · · , 𝑛}, 𝑃𝑖 sets ⟨𝑏 𝑗⟩𝑖 = ⟨𝑓𝑖 𝑗⟩𝑖.
• 𝑃1, · · · , 𝑃𝑛 compute [𝑏 𝑗] ← ConvertShares𝑛,𝑡 (⟨𝑏 𝑗⟩).
• 𝑃1, · · · , 𝑃𝑛 invoke the following multiparty functionalities.
– [𝑞 𝑗] ← MultF𝑛,𝑡 ([𝑏 𝑗], [𝑠 𝑗]).
– 𝑞 𝑗 ← Reveal𝑛,𝑡 ([𝑞 𝑗]).

𝑗 ∈[𝑚𝑠 ]:𝑞 𝑗 =0
(6) 𝑃1 computes the intersection as 𝑌𝑠 =
𝑦 𝑗 from elements in stash.
Figure 11: Handling Stash in mPSI Protocol
• Case 1 (𝑃1 is honest): To simulate the output of RandomF𝑛,𝑡 in
step 1, pick random 𝑠 𝑗’s, generate their shares and give 𝑡 shares
to the corrupted parties. In step 2, 𝑃1 and 𝑃𝑖 invoke the FPSM
functionality, for all 𝑖 ∈ {2, · · · , 𝑛} and 𝑗 ∈ [𝑚𝑠]. Since 𝑃1 ∉ 𝐶,
the view of corrupted parties comprises of only one of the two
boolean shares, i.e., {⟨𝑔𝑖 𝑗⟩𝐵
𝑖 }𝑖∈𝐶,𝑗 ∈[𝑚𝑠 ], which can be generated
as corresponding shares of some random bit (by definition of
FPSM). Step 3 is local and can be executed by the simulator. In
step 4, the corrupted parties see only one of the two additive
shares {⟨𝑓𝑖 𝑗⟩𝑖}𝑖∈𝐶,𝑗 ∈[𝑚𝑠 ], which can be generated as shares of
a random bit (by definition of F F𝑝
). In step 5, apart from the
B2A
local computations, which can all be executed by the simulator,
the parties call functionalities ConvertShares𝑛,𝑡, MultF𝑛,𝑡 and
Reveal𝑛,𝑡). The corrupted parties get 𝑡 shares of 𝑏 𝑗 and 𝑞 𝑗, for
each 𝑗 ∈ [𝑚𝑠]. The simulator can generate 𝑡 shares of random
values (by the security of (𝑛, 𝑡)-secret sharing), and finally, send
the output 𝑌∗
• Case 2 (𝑃1 is corrupt): The simulation of step 1 is exactly same
as in Case 1. In step 2, 𝑃1 and 𝑃𝑖 invoke FPSM functionality,
for all 𝑖 ∈ {2, · · · , 𝑛} and 𝑗 ∈ [𝑚𝑠]. The corrupted parties see
both the boolean shares {⟨𝑔𝑖 𝑗⟩𝐵
𝑖 }𝑖∈𝐶\{1},𝑗∈[𝑚𝑠 ] and only
one of the boolean shares {⟨𝑔𝑖 𝑗⟩𝐵
1 }𝑖∈[𝑛]\𝐶,𝑗 ∈[𝑚𝑠 ]. For each 𝑖 ∈
𝐶 \ {1}, simulator sets 𝑔𝑖 𝑗 = 1 if 𝑦 𝑗 ∈ 𝑋𝑖 else it sets 𝑔𝑖 𝑗 = 0.
The simulator then generates boolean shares of 𝑔𝑖 𝑗 to simu-
late {⟨𝑔𝑖 𝑗⟩𝐵
𝑖 }𝑖∈𝐶\{1},𝑗 ∈[𝑚𝑠 ] (by definition of FPSM). For
𝑖 ∈ [𝑛] \ 𝐶, the simulator generates boolean shares of random
bits to simulate {⟨𝑔𝑖 𝑗⟩𝐵
1 }𝑖∈[𝑛]\𝐶,𝑗 ∈[𝑚𝑠 ]. Step 3 is local and can
be executed by the simulator. Corrupted parties see both the
arithmetic shares {⟨𝑓𝑖 𝑗⟩1, ⟨𝑓𝑖 𝑗⟩𝑖}𝑖∈𝐶\{1},𝑗∈[𝑚𝑠 ] and one of the
arithmetic shares {⟨𝑓𝑖 𝑗⟩1}𝑖∈[𝑛]\𝐶,𝑗 ∈[𝑚𝑠 ] in step 4. For each 𝑖 ∈
𝐶 \ {1}, simulator sets 𝑓𝑖 𝑗 = 0 if 𝑦 𝑗 ∈ 𝑋𝑖 else it sets 𝑓𝑖 𝑗 = 1.
The simulator then generates arithmetic shares of 𝑓𝑖 𝑗 to simulate
{⟨𝑓𝑖 𝑗⟩1, ⟨𝑓𝑖 𝑗⟩𝑖}𝑖∈𝐶\{1},𝑗∈[𝑚𝑠 ] (by definition of F F𝑝
). To simulate
𝑠 to the corrupted parties.
1 , ⟨𝑔𝑖 𝑗⟩𝐵
1 , ⟨𝑔𝑖 𝑗⟩𝐵
B2A
the view {⟨𝑓𝑖 𝑗⟩1}𝑖∈[𝑛]\𝐶,𝑗 ∈[𝑚𝑠 ], simulator generates arithmetic
shares of random bits. In step 5, apart from the local computa-
tions, which can all be executed by the simulator, the parties call
functionalities ConvertShares𝑛,𝑡, MultF𝑛,𝑡 and Reveal𝑛,𝑡). The
corrupted parties see at most 𝑡 shares of 𝑏 𝑗, for each 𝑗 ∈ [𝑚𝑠],
which can be simulated by generating 𝑡 shares of random values
(by security of (𝑛, 𝑡)-secret sharing). Moreover, for all 𝑗 ∈ [𝑚𝑠],
simulator sets 𝑞 𝑗 = 0 if 𝑦 𝑗 ∈ 𝑌∗
𝑠 , else it picks 𝑞 𝑗 uniformly at
random from F𝑝 (since 𝑠 𝑗 are uniformly random given at most 𝑡
shares of the corrupted parties). For all 𝑗 ∈ [𝑚𝑠], it gives 𝑡 shares
of 𝑞 𝑗 as output of MultF𝑛,𝑡 and 𝑞 𝑗 as output of Reveal𝑛,𝑡.
□
Complexity. 𝑃1 invokes the PSM protocol for every element 𝑦 𝑗 in
stash and for every party 𝑃𝑖, 𝑖 ∈ {2, · · · , 𝑛}. Thus, the computation
and communication complexity of this step is O(𝑛𝑚 log(𝑚)𝜆). No-
tice that, this cost dominates the overall cost of the sub-procedure as
the rest of the steps have a complexity of O(𝑛 log(𝑚)𝜆). Hence, we
obtain an mPSI protocol with an overall complexity of 𝑂(𝑛𝑚 log(𝑚)𝜆)
in cuckoo hashing with stash setting.
E WEAK COMPARISON PROTOCOLS
E.1 Correctness and Security of Weak
Comparison Protocol I
We give a complete proof of Theorem 5.2 by proving the correctness
and security of the weak comparison protocol I in Figure 8.
Correctness. The correctness of the evaluation of the polynomial
𝜓(𝑥) directly follows from its definition and from the correctness of
the multiparty functionalities RandomF𝑛,𝑡 and MultF𝑛,𝑡 from [21].
We need to show that, for each 𝑎, except with negligible probability
in correctness parameter (𝜏), 𝑣 𝑗 = 0,∀𝑗 ∈ [𝐽] ⇐⇒ 𝜓(𝑎) = 0.
Lemma E.1. 𝜓(𝑎) = 0 =⇒ (cid:0)𝑣 𝑗 = 0,∀𝑗 ∈ [𝐽](cid:1).
Proof. This follows directly from the definition of 𝑣 𝑗.
□
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1200Lemma E.2. Probability that 𝜓(𝑎) = 0 when(cid:0)𝑣 𝑗 = 0,∀𝑗 ∈ [𝐽](cid:1) is
atleast 1 − 2−𝜏 .
Proof. For any 𝑗 ∈ [𝐽], if 𝑣 𝑗 = 0 then either 𝑠 𝑗 = 0 or 𝜓(𝑎) = 0.
If 𝜓(𝑎) = 0 then we are done. If 𝜓(𝑎) ≠ 0 and 𝑣 𝑗 = 0 then 𝑠 𝑗 = 0,
which occurs with probability 2− log |F𝑝 |. Probability that 𝑠 𝑗 = 0 for
every 𝑗 ∈ [𝐽] is 2− log |F𝑝 |·𝐽 ≤ 2−𝜏 by the definition of 𝐽. Therefore
if 𝜓(𝑎) ≠ 0 then at least one 𝑣 𝑗 ≠ 0 with probability at least
1 − 2−𝜏.
□
Hence except with failure probability at most 2−𝜏 the output of the
protocol is correct.
Security. Let 𝐶 ⊂ [𝑛] be the set of corrupted parties (|𝐶| = 𝑡  2𝜅+𝛾 to be a prime such that 𝑝 mod 4 = 3 and
𝛾 = ⌈log 𝑛⌉ + 1. The details of this protocol are given in Appendix
E.2.1.
The weak comparison protocol takes as input, the (𝑛, 𝑡)− shares
[𝑎]𝑖 from each 𝑃𝑖 (𝑖 ∈ [𝑛]), where 𝑎 ∈ F𝑝 (such that 0 ≤ 𝑎  𝑛 > 𝑘 and 𝑛 > 2𝑡. Let 𝛾 = ⌈log 𝑛⌉ + 1. Addi-
tions and multiplications in the protocol are over F𝑝, where
𝑝 depends on the specific instantiation of F 𝑝,𝑛,𝑡
Input: For each 𝑖 ∈ [𝑛], 𝑃𝑖 inputs its (𝑛, 𝑡)− share [𝑎]𝑖.
Mod
Protocol:
(1) 𝑃1, · · · , 𝑃𝑛 locally compute [𝑏] = [𝑎] − 𝑘.
(2) Let 𝑐1 = 𝑏. For each 𝑖 = 1, · · · , 𝛾, 𝑃1, · · · , 𝑃𝑛 do the follow-
ing:
• Invoke the F 𝑝,𝑛,𝑡
functionality with the input [𝑐𝑖] to
get the output [𝑑𝑖].
Mod
• For each 𝑗 ∈ [𝑛], 𝑃 𝑗 sets [𝑐𝑖+1] 𝑗 = ([𝑐𝑖] 𝑗 − [𝑑𝑖] 𝑗) · 2−1.
(3) 𝑐𝛾+1 ← Reveal𝑛,𝑡 ([𝑐𝛾+1]).
Output: 𝑃1 sets comp = 1, if 𝑐𝛾+1 = 0 and comp = 0, other-
wise. Other parties get no output.
Figure 13: WEAK COMPARISON PROTOCOL II
Theorem E.3. The protocol given in Figure 13 securely realizes
F 𝑝,𝑘,𝑛,𝑡
w-CMP in the F−hybrid model, where F = (F 𝑝,𝑛,𝑡
, Reveal𝑛,𝑡),
against a semi-honest adversary corrupting 𝑡 < 𝑛/2 parties.
Mod
Proof. Correctness. The correctness of the protocol follows
and Reveal𝑛,𝑡 and