# An Analysis of the State of Electron Security in the Wild

**Bachelor’s Thesis**

**Author:** Benjamin Altpeter  
**Date:** August 1, 2020  
**Supervisor:** Prof. Dr. Martin Johns

## Declaration of Authorship

I hereby declare that this thesis is my own unaided work. All direct or indirect sources used are acknowledged as references. I am aware that the thesis in digital form can be examined for the use of unauthorized aid and to determine whether the thesis as a whole or parts incorporated in it may be deemed as plagiarism. For the comparison of my work with existing sources, I agree that it shall be entered into a database. Further rights of reproduction and usage are not granted here. This paper has not been previously presented to another examination board and has not been published.

**Braunschweig, August 1, 2020**  
**Benjamin Altpeter**

## Table of Contents
1. Introduction
2. Background
   2.1. Electron Architecture
   2.2. A Basic App
3. Electron Attack Vectors
   3.1. Attack Vectors Shared with Web Applications
      3.1.1. OWASP Top Ten
      3.1.2. Additional Attack Vectors
   3.2. Attack Vectors Specific to Electron
      3.2.1. Not Enabling Security Features
      3.2.2. Opening URLs with `shell.openExternal()`
      3.2.3. Missing Permission Request Handlers
      3.2.4. Insecure Protocol Handlers
      3.2.5. Introducing Privileged APIs to the Window Object
   3.3. Differences in Exploitation Compared to the Browser
4. Documented Vulnerabilities in Electron Applications
   4.1. XSS and RCE in Leanote Desktop
   4.2. RCE in WordPress.com for Desktop
   4.3. RCE in Rocket.Chat Desktop
5. Automated Analysis
   5.1. Overview
   5.2. Collecting Electron Apps
   5.3. Downloading Apps and Source Code Extraction for Closed Source Apps
   5.4. Scanning for Potential Security Problems
   5.5. Results
6. Manual Analysis
   6.1. RCE in Jitsi Meet Electron
   6.2. RCE in Desktop App for CMS
   6.3. XSS and RCE in Note-taking App
   6.4. RCE in Bug Tracking App
7. Takeaways
   7.1. Security-Consciousness in Electron Apps
   7.2. Recommendations to Electron Developers
   7.3. Recommendations to App Developers
8. Related Work
   8.1. Foundational Research
   8.2. Research on Electron
   8.3. Research on Similar Frameworks
9. Conclusion
   9.1. Future Work
10. Bibliography
A. Appendix
   A.1. Vulnerabilities That Were Considered
   A.2. Exposé

## Abstract

Electron is an open-source framework for building cross-platform desktop applications using web technologies such as JavaScript, HTML, and CSS. Electron apps are becoming increasingly popular, with thousands of applications already built using the framework. This new paradigm requires new security considerations and a widened threat model: while web applications are strictly isolated from the operating system, running in the browser's sandbox, Electron apps can be given full access to the Node.js APIs, breaking this isolation. Thus, many well-known attack vectors of the web still apply to Electron applications, but they may be more severe due to full access to the system.

This thesis explores known attacks for Electron apps, comparing their impact to web apps in the browser. It then presents an analysis of 1,204 open and closed source Electron applications for various security indicators, providing insight into the state of Electron security in the wild. The results show that while the situation is improving, most apps do not take advantage of Electron's security features, and the use of dangerous functions is common.

## 1. Introduction

"It’s easier than you think: If you can build a website, you can build a desktop app."

Electron is an open-source framework for building cross-platform desktop applications using web technologies like JavaScript, HTML, and CSS. Its homepage highlights the philosophy: Electron aims to make developing desktop apps easier and possible for people without experience in this field. This strategy is working, as Electron apps are becoming more popular, often replacing native ones. Examples include messaging apps like Slack, Skype, and WhatsApp Desktop, IDEs like Atom and Visual Studio Code, and disk image writing utilities like Balena Etcher.

However, despite the benefits, one must consider the security aspects of the framework and the apps made using it. Web applications are strictly isolated from the operating system, running in the browser's sandbox. Desktop applications, on the other hand, often rely on native access. Electron bridges this gap by introducing additional privileged APIs, breaking the sandbox mechanism of the underlying browser.

Therefore, the threat model needs to be significantly widened. Many well-known web attack vectors still apply to Electron applications, some being more severe due to the lack of a sandbox. For example, XSS vulnerabilities, where an attacker injects malicious JavaScript code, are already severe on the web, allowing the attacker to modify the page and execute user functions. In Electron, these vulnerabilities become even more severe, as the "browser" has full access to the user's computer, enabling the attacker to read and write files, execute programs, and install malware.

This raises several questions: What potential security pitfalls exist when writing Electron applications? Are they commonly known and well-documented? Given that the framework targets developers with little experience in desktop applications, how security-conscious are Electron app developers? And what can be done to make Electron apps more secure? This thesis addresses these questions in two parts.

The first part focuses on the theoretical background, exploring known attacks and comparing their impact on web and Electron applications. It explains the reasons for differences in severity and effects, describes steps taken to avoid vulnerabilities and minimize risks, and looks at documented vulnerabilities in Electron apps.

The second part provides a broader picture through an empirical analysis of open and closed source Electron applications. Statistics on security-related practices of over 1,200 Electron apps were collected, including parameters like Electron version, security feature enablement, and known vulnerabilities in dependencies. From these results, recommendations for both Electron and individual app developers are provided to enhance security.

### Contributions

- A comprehensive overview of common attack vectors for Electron applications, with explanations on how to avoid them.
- Detailed explanations of three documented vulnerabilities in large Electron apps, along with minimal reproducible examples.
- Development of scripts to automatically collect and analyze Electron apps, and extension of an open-source security scanner for Electron apps.
- Presentation of statistics on the security-related practices of more than 1,200 open and closed source apps.
- Discovery and reporting of multiple vulnerabilities in Electron apps, with findings presented in this thesis.

## 2. Background

Electron is an open-source framework for developing desktop applications using web technologies, i.e., HTML for content and structure, CSS for styling, and JavaScript for functionality. This allows the resulting apps to be cross-platform, running on Linux, macOS, and Windows with minimal platform-specific code [1].

Originally developed for the Atom editor by GitHub as Atom Shell, it was later renamed to Electron in April 2015 [2]. Electron's governance moved to working groups in March 2019 [3] and has been hosted by the OpenJS Foundation since December 2019 [4], which also manages projects like jQuery, Node.js, and Esprima [5].

### 2.1. Electron Architecture

The goal of Electron is to use web technologies for wide portability and easier development while making the app feel like a native program by exposing additional capabilities to developers [1]. It combines two existing technologies and adds its own platform helpers: sites are loaded using the Chromium browser, and access to operating system primitives (e.g., file system, shell) and a vast ecosystem of libraries is provided through the Node.js JavaScript runtime. Electron adds its own APIs for native platform functions like menus, notifications, etc.

Electron apps run across multiple processes: the main process and renderer processes [6, p. 6]. There is always exactly one main process that controls the application, and each page has its own renderer process, similar to tabs in Chromium. The main process has access to all renderer processes, while the renderer processes are isolated and can only control their own page [7]. The main process has access to privileged Electron functions but cannot access the DOM APIs [8]. Renderer processes have access to the DOM APIs and, depending on the settings, may have access to some Electron APIs. Communication between the main and renderer processes occurs via inter-process communication (IPC) messages in JSON format, similar to the `postMessage` communication between a website and an iframe. Figure 2.1 illustrates this architecture.

### 2.2. A Basic App

A Node.js module bundles the JavaScript code of an application with its dependencies, which can be installed using a package manager like NPM or Yarn and saved in the `node_modules` directory [9, p. 71]. It contains a `package.json` file with metadata about the module, such as its name, version, and dependencies.

Electron apps are essentially Node.js modules with the `electron` package installed as a dependency [10]. They need a JavaScript file (often called `main.js`) as an entry point, set through the `main` field in the `package.json`. To distribute the app, it needs to be packaged either by bundling it with a prebuilt Electron binary or using a third-party tool like `electron-forge` or `electron-builder` [11].

**Figure 2.1.** The architecture of an Electron app. The app’s entry point script `main.js` runs in the main process, which has full access to the Node.js and privileged Electron platform APIs. It can spawn multiple windows that will run in separate renderer processes. These always have access to the DOM APIs and, depending on the settings, may have access to the Node.js and some Electron APIs. The different processes can communicate with one another through IPC messages (if available to the renderer processes). In this figure, the dashed blue parts may not be accessible to a renderer process depending on the settings for this particular window.

```
+-------------------+        +-------------------+        +-------------------+
|    Main Process   |<------>|  Renderer Process |<------>|  Renderer Process |
|                   |        |                   |        |                   |
|  - Full Access to |        |  - Access to DOM  |        |  - Access to DOM  |
|    Node.js &      |        |    APIs           |        |    APIs           |
|    Electron APIs  |        |  - Limited Access |        |  - Limited Access |
|  - Controls       |        |    to Electron    |        |    to Electron    |
|    Application    |        |    APIs (if set)  |        |    APIs (if set)  |
+-------------------+        +-------------------+        +-------------------+
```

**References:**
1. Electron Documentation. [Online]. Available: https://www.electronjs.org/docs
2. GitHub Blog. [Online]. Available: https://github.blog/2015-04-22-electron-cross-platform-desktop-applications/
3. Electron Governance. [Online]. Available: https://www.electronjs.org/blog/electron-governance
4. OpenJS Foundation. [Online]. Available: https://openjsf.org/
5. OpenJS Foundation Projects. [Online]. Available: https://openjsf.org/projects/
6. Electron Architecture. [Online]. Available: https://www.electronjs.org/docs/latest/tutorial/process-model
7. Chromium Multi-Process Architecture. [Online]. Available: https://www.chromium.org/developers/design-documents/multi-process-architecture
8. Electron Main and Renderer Processes. [Online]. Available: https://www.electronjs.org/docs/latest/tutorial/application-architecture
9. Node.js Documentation. [Online]. Available: https://nodejs.org/api/modules.html
10. Electron Quick Start. [Online]. Available: https://www.electronjs.org/docs/latest/tutorial/quick-start
11. Electron Forge. [Online]. Available: https://www.electronforge.io/
12. Electron Builder. [Online]. Available: https://www.electron.build/