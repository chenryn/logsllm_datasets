C语言中，函数名必须时唯一的，哪怕相同功能不同类型的参数都不行，但C++可以
C++中，只要函数参数类型不同，或者参数个数不同，或者都有，则可以使用相同函数名
编译器会根据实参的类型和数量来判断调用哪个重载函数
反汇编分析：
0069184C  call        power (0691389h)  
00691851  add         esp,8  
00691854  mov         dword ptr [i],eax  
;直接将默认值2入栈进行函数调用
    int j = power(2, 3);
00691857  push        3  
00691859  push        2  
0069185B  call        power (0691389h)  
00691860  add         esp,8  
00691863  mov         dword ptr [j],eax  
;按照函数参数逐个入栈进行调用
    return 0;
#include
using namespace std;
int mul(float a);
int mul(int a, int b);
int mul(int a, int b, int c);
int main(){
    int a1 = mul(1.2);
    int a2 = mul(1, 2);
    int a3 = mul(1, 2, 3);
    cout 
using namespace std;
void swap(int& x, int& y) {
    int tmp;
    tmp = x;
    x = y;
    y = tmp;
}
int main(){
    int a = 5, b = 10;
    cout 
using namespace std;
int a[] = { 1,2,3,4,5 };
int& index(int i) { //返回值为引用
    return a[i];
}
int main(){
    index(2) = 99;  //返回的使a[2]的引用
    cout 
using namespace std;
int main(){
    int sum = 0;
    int coin1 = 100;
    int coin2 = 50;
    int coin5 = 20;
    for (int i = 0; i  进行访问
3. 也可以通过引用访问对象中的成员
程序示例：对象中成员的访问
class npc{
    private:
    int hp;
    int mp;
    public:
    int initv();
}npcA,npcB;
npc npcA;
对象.数据成员
对象.成员函数(参数表)
#include
using namespace std;
class Point {
private:
    int x;
    int y;
public:
    void setpoint(int a, int b) {
        x = a;
        y = b;
    }
    int getx() {
        return x;
    }
    int gety() {
        return y;
    }
};
int main() {
    Point op1;
    op1.setpoint(1, 2);
    int op1x;
    op1x = op1.getx();
    cout  
>::_Sentry_base::~_Sentry_base (0191447h)  
;参数入栈，将对象op1的地址存到ecx，调用成员函数
;成员函数
    void setpoint(int a, int b) {
...
;此处省略函数调用前的初始化，this是对象op1的首地址
        x = a;
0019211D  mov         eax,dword ptr [this] 
;将对象x数据成员首地址拿出来
00192120  mov         ecx,dword ptr [a]
;把a的值拿出来
00192123  mov         dword ptr [eax],ecx
;给对象x数据成员赋值
        y = b;
00192125  mov         eax,dword ptr [this]  
00192128  mov         ecx,dword ptr [b]  
0019212B  mov         dword ptr [eax+4],ecx  
    }
    int op1x;
    op1x = op1.getx();
001918FE  lea         ecx,[op1]  
00191901  call        std::basic_ostream 