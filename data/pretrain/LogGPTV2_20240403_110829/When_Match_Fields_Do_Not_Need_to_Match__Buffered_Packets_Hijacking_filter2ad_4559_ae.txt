to hijack buffered packets no matter what the positions of
applications are.
Errors of Inter-Chain Hijacking Probability between The-
oretical and Experimental Results. By applying Equations 8
and 9 in Section V, we also calculate the theoretical inter-
chain hijacking probability with different positions of target
and malicious applications. We use pt and pe to denote the
theoretical and experimental inter-chain hijacking probability,
respectively. We deﬁne two types of errors, i.e., the absolute
error |pt − pe| and the relative error |pt−pe|
. As shown in
Figure 10, the absolute error is smaller than 0.1 in about
80% cases. The largest absolute error is 0.12. Moreover, the
relative error is below 0.15 in about 70% cases. These results
demonstrate that theoretical results are close to experimental
results in most cases. However, in a few cases, the relative
errors are large, although all absolute errors are small. For
example, the relative errors can exceed 0.3 in about 10%
cases. By analyzing the results, we ﬁnd that the inter-chain
hijacking probabilities in these cases are very small. Thus,
even a small difference between theoretical and experimental
results can lead to a large relative error. For example, we ﬁnd
there is an inter-chain hijacking probability of 0.011 in our
experimental results, and the related theoretical probability is
0.016. We can calculate the absolute error is 0.005, which is
small. However, the calculated relative error is 0.45, which is
large. It is reasonable for these errors between theoretical and
experimental results. As we shown in Appendix A, although
the processing delays can be approximately modeled as the
log-logistic distribution, there are still some differences that
lead to errors.
pe
C. Attack Effectiveness
We also conduct experiments to show the attack effective-
ness of the four attacks exploiting the buffered packet hijacking
vulnerability.
Cross-App Poisoning. We build the network topology in
Figure 3 of Section IV. We launch an attack with the mali-
10
 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1CCDFHijacking ProbabilityLoad BalancerForwardingDoS DetectionHubLearning Switch 0 0.2 0.4 0.6 0.8 1 0 0.1 0.2 0.3 0.4 0.5CDFErrorAbsolute ErrorRelative Errorcious application to poison the learning switch application by
hijacking and modifying the source MAC address of a buffered
packet. The learning switch application maintains mappings
between MAC addresses of hosts and switch ports that connect
to the hosts. It learns a mapping by analyzing the header of
a data packet and the ﬁeld of in_port in a PACKET_IN
message. Figure 11 shows the log of the learning switch
application that learns the mappings. At ﬁrst, a host h1 sends
a new ﬂow to another host h2. The switch S1 buffers the ﬁrst
packet of the ﬂow and sends a copy of it to the controller with a
PACKET_IN message. The learning switch application learns
the host h1 with the MAC address 58:ef:68:13:4e:87, which is
attached to port 1 of the switch. The malicious application also
receives the PACKET_IN message. It manipulates the source
MAC address of the buffered packet to the MAC address of h3
and makes the buffered packet resent to the controller. Thus,
the learning switch application learns a false mapping between
the MAC address 10:7b:44:46:e7:c1 of the host h3 and the
switch port 1, which is shown in Figure 11. Experiments show
that any ﬂow to the host h3 is falsely directed to the host h1
after the learning switch application is poisoned. It causes a
DoS attack.
Fig. 11: The learning switch application is poisoned by the
malicious application. It learns two hosts in a switch port.
Network Security Policy Bypass. We build the network
topology in Figure 4 of Section IV. We use a host to implement
the ﬁrewall in Figure 4. The host has two network cards
that connect the switches S1 and S3, respectively. We enable
IP forwarding and conﬁgure iptables in the host to
forward packets between the two network cards. We conﬁgure
iptables to block any packets from the host h1 to the host
h2. We leverage the host h1 to send a UDP packet to h2 and
launch tcpdump in the host h2 to see if there is any packet
from h1. As shown in Figure 12a, the host h2 does not receive
any packet from h1. However, when h1 sends a UDP packet
again after some time, the malicious application hijacks the
buffered UDP packet and forwards it to another switch port
that does not connect to the ﬁrewall. As a result, the host h3
receives the UDP packet, which is shown in Figure 12b.
(a) When the malicious application hijacks no buffered packet
(b) When the malicious application hijacks a buffered packet
Fig. 12: A host received a UDP packet that should have been
blocked by the ﬁrewall.
TCP Three-Way Handshake Disruption. We build the net-
11
Fig. 13: Connection Completion Time (CCT) for TCP ﬂows.
work topology in Figure 5 of Section IV and launch an attack
to disrupt TCP three-way handshake in the network. We use
iperf to randomly generate many TCP ﬂows among hosts.
Our attack signiﬁcantly delays establishing a TCP connection
between two hosts by dropping the ﬁrst TCP SYN packet.
Figure 13 shows the cumulative distribution function (CDF)
of connection completion time (CCT) for TCP ﬂows. From
the results, we can see that CCT for more than 90% ﬂows is
below than 10 ms without the attack. The longest CCT is about
50 ms. However, CCT of all ﬂows is more than 1000 ms with
the attack, which is twenty times longer than the longest CCT
in normal cases. It is because the Linux operating system waits
for one second before sending a second TCP SYN packet if the
ﬁrst TCP SYN packet is dropped. Such delays of TCP three-
way handshake can signiﬁcantly increase the ﬂow completion
time (FCT) for small ﬂows whose FCT is typically smaller
than 50 ms [24]. It inevitably degrades the user experience on
using the network and the revenue for operators to provide
their network services [25].
Control Trafﬁc Ampliﬁcation. We build the network topology
in Figure 6. We use TCPReplay [42] to replay the real
network trafﬁc trace from CAIDA [43] as background ﬂows 2.
We launch an attack that copies massive buffered packets to
consume bandwidth of the SDN control channel and CPU
resources of switches and controllers. Figure 14 shows the
results. The number of action buckets decides the ampliﬁcation
factor. Figure 14a shows that the available bandwidth of the
control channel is signiﬁcantly decreased with the increase
in the number of actions buckets. Particularly, the available
bandwidth is close to 0% when there are 24 buckets, which
makes new ﬂows cannot be served. Figure 14b shows that the
CPU utilization reaches 100% for an SDN switch when the
number of action buckets increases to 24. However, the CPU
utilization for the controller only reaches 12% when there are
24 action buckets. It is because the CPU of the host running
the controller has more processing powers than switches.
Moreover, since the control channel is saturated when the
number of action buckets reaches 24, no more control trafﬁc is
delivered to the controller to consume its CPU resources. The
CPU utilization of the controller tends to be stabilized when
there are more than 24 action buckets.
2As the trafﬁc trace contains a huge number of ﬂows that can overload
processing capacities of both switches and controllers, we limit the total rate
of ﬂows to less than 100 Mbps.
 0 0.2 0.4 0.6 0.8 1 1 10 100 1000CDFConnection Completion Time (ms)Normal CaseAttack Case(a) Available Bandwidth of Control Channel
Fig. 15: The architecture of ConCheck.
switches. However, it may require modifying the ﬁrmware
in all SDN switches, and it
is a challenge to update the
ﬁrmware on various types of legacy SDN switches. Thus, we
present a centralized defense solution named ConCheck on
SDN controllers. It is lightweight and requires no modiﬁcation
on SDN applications and hardware. ConCheck can be easily
deployed in SDN controllers to prevent a malicious application
from hijacking buffered packets.
A. Design
Figure 15 shows the architecture of ConCheck, which
works between the applications and the core services of the
SDN controller. The main idea is to check the consistency be-
tween the headers of buffered packets and the match ﬁelds in a
FLOW_MOD message. When there is inconsistency, ConCheck
blocks API calls that an application uses to generate ﬂow
rules. Thus, hijacking buffered packets can be prevented.
ConCheck consists of two main modules: API Calls Extractor
and Consistency Checker.
API Calls Extractor. To extract necessary messages for
further analysis, this module intercepts API calls between SDN
applications and core services. Speciﬁcally, it focuses on two
types of API calls that enforce two functionalities, i.e., reading
a PACKET_IN message and generating a FLOW_MOD message
to install ﬂow rules. By intercepting the ﬁrst API call, the
module extracts a buffer ID and the header of the buffered
packet with the ID from a PACKET_IN message. API Calls
Extractor makes a pair of them and stores the information in
Buffered Packets DB for further analysis. By intercepting the
second API call, it extracts a buffer ID and match ﬁelds from a
FLOW_MOD message. The extracted information is then passed
to Consistency Checker to detect potential attacks exploiting
buffered packet hijacking. Meanwhile, the second API call will
not be passed to ﬂow rule service in the SDN controller until
Consistency Checker checks there is no inconsistency.
Consistency Checker. This module checks if there is inconsis-
tency for the API call that generates a FLOW_MOD message. As
we mentioned before, applications hijacking buffered packets
to disrupt SDN must install a ﬂow rule with a FLOW_MOD
message. However, the message contains a buffer ID of a
buffered packet that matches no ﬂow rules installed by the
message. In other words, the header of the buffered packet is
inconsistent with the match ﬁelds speciﬁed in the FLOW_MOD
message. As Buffered Packets DB has stored the mapping
(b) CPU Utilization
Fig. 14: The effects of control trafﬁc ampliﬁcation on the
bandwidth of control channel and CPU utilization.
D. Vulnerability Disclosure and Response
We reported the identiﬁed vulnerability to major SDN
vendors and communities. Four SDN vendors/communities
replied to us:
• Pica8 is a mainstream SDN vendor on providing industry-
leading SDN switches. They acknowledged our report
and said “we have ﬁled tracking tickets and are waiting
for product management decision on releasing the ﬁx in
major/minor or patch builds”.
• ONOS is a mainstream carrier-grade SDN controller that
has been used by many service providers and enterprises.
They helped us ﬁle a defect in the ONOS project and the
ONOS community with the comment that “the defect will
be visible to the community and this info can be available
for someone to pick it up to ﬁx it”.
• Ryu is an open and popular SDN controller, which is
maintained by the RYU community. Several developers
and users in the community conﬁrmed our report.
• Open vSwitch is the most popular open-source software
SDN switches that enable OpenFlow. We discussed with
them and they said that “OpenFlow and Open vSwitch
provide no mechanisms for isolation between apps”.
VII. COUNTERMEASURE
The root cause of our attacks is the missing check on
the consistency between buffer IDs and match ﬁelds due
to a vulnerability in the OpenFlow protocol. One intuitive
countermeasure is to add the consistency checking on the SDN
12
 0 20 40 60 80 100 0 8 16 24 32 40Available Bandwidth (%)# of Action Buckets 0 20 40 60 80 100 0 8 16 24 32 40CPU (%)# of Action BucketsSDN ControllerSDN SwitchPACKET_INNotifierFlow RuleServiceOther CoreServicesSDN ControllerPACKET_INFLOW_MODAPI CallsExtractorConsistencyCheckerSDN ApplicationsConCheckBuffered Packets DBFig. 16: An example showing ConCheck checks the inconsis-
tency to detect attacks that hijack buffered packets.
inconsistency in the API call
between the buffer ID and the header of the buffered packet
with that buffer ID, Consistency Checker can use the mapping
to check the potential
that
generates a FLOW_MOD message. Figure 16 shows an example.
The API call of generating ﬂow rules contains a buffer ID
of 2 and a match ﬁeld of matching packets with the IP
source address of 1.1.1.1. However, from Buffered Packets DB,
Consistency Checker knows that the buffered packet with the
buffer ID of 2 has the IP source address of 10.0.0.2. Thus,
Consistency Checker detects there is inconsistency between
the header of the buffered packet and the match ﬁelds in the
API call of generating ﬂow rules. To prevent hijacking buffered
packets, the API call will be blocked.
B. Evaluation
As ConCheck intercepts API calls of reading PACKET_IN
and generating FLOW_MOD messages,
it adds some extra
delays for applications to install ﬂow rules. Therefore, we
implement a prototype of ConCheck in the Floodlight con-
troller and measure the performance for applications to install
ﬂow rules with and without ConCheck, respectively. Figure 17
shows the CDF of the time for applications to install ﬂow rules
(ﬂow setup time). We can see that CDF of ﬂow setup time with
ConCheck is close to that without ConCheck. More than 95%
ﬂow setup time is less than 10 ms no matter if ConCheck
is deployed. Thus, ConCheck is a lightweight countermeasure
and only introduces a negligible overhead when applications
installing ﬂow rules.
VIII. RELATED WORK
There have been a number of studies [1], [11], [9], [7],
[10], [18] that focus on the security threats of malicious or
buggy SDN applications. Ujcich et al. [1] show cross-app
poisoning attacks, in which a low privileged application tricks
a high privileged application to take actions on its behalf by
modifying shared data objects in controllers. They provide
ProvSDN to defeat such attacks by applying data provenance
and checking violations of information ﬂow control (IFC)
policies. Porras et al. [9] discover that a compromised app
can manipulate ﬂow rules to create dynamic ﬂow tunneling,
which can bypass network security polices. FortNOX [9], SE-
Floodlight [10], and VeriFlow [15] detect such kinds of attacks
by checking whether there are conﬂicts between ﬂow rules
and network security policies. Our paper provides a differ-
ent attacking method for a malicious application to conduct
cross-app poisoning and network security bypass attacks, i.e.,
exploiting the buffered packet hijacking vulnerability. Since
launching attacks with the method modiﬁes no shared data
objects in controllers and generates no rule conﬂicts, existing
countermeasures fail to defeat the attacks.
Fig. 17: CDF of ﬂow setup time.
By abusing APIs and permissions provided by controllers,
malicious applications can signiﬁcantly disrupt SDN systems,
such as controller rootkits [44] and SDN environment killing
[11]. Therefore, researchers have provided many security en-
hancement systems [16], [10], [12], [7], [13], [14]. Rose-
mary [16] isolates applications in sandboxes to safeguard con-
trollers from errant operations performed by applications. SE-
Floodlight [10], Secure-Mode ONOS [12] and SDNShield [7]
provide permission-based access control to enforce minimum
required privileges to individual applications. AEGIS [13]
and Controller DAC [14] enable dynamic access control for
applications to protect controllers against API abuse. Previous
defense systems effectively limit the SDN attack surface due
to APIs and permissions abuse. However, they are not enough
to prevent attacks that exploits the buffered packet hijacking
vulnerability since an attacker may leverage an application that
naturally has the permission of ﬂow rule installation.
Researchers have provided a few automated analysis
and test frameworks [45], [46], [47], [48] to ﬁnd potential
vulnerabilities in SDN applications and other components.
SHIELD [45] provides an automated framework to efﬁciently
conduct static analysis of SDN applications, which requires
source codes of applications and well-deﬁned malicious behav-
ior to ﬁnd malicious applications. Applications with unknown
malicious behaviors or unavailable source codes may not
be easily detected by it. DELTA [46], ATTAIN [47], and
BEADS [48] aim to automatically discover new vulnerabil-
ities resulting from applications, controllers, switches, and
malicious hosts. They have effectively identiﬁed tens of new