# mimikatz源码分析-lsadump模块（注册表）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
>
> mimikatz是内网渗透中的一大利器，本文是分析学习mimikatz源码的第二篇，主要讨论学习lsadump模块的sam部分，即从注册表获取用户哈希的部分
## Windows注册表hive格式分析
mimikatz的这个功能从本质上是解析Windows的数据库文件，从而获取其中存储的用户哈希。所以这里先简要对Windows注册表hive文件做简要说明，详细点的介绍可参见[Windows注册表HIVE文件格式解析](https://blog.csdn.net/zacklin/article/details/7682582)和[简单认识下注册表的HIVE文件格式](https://bbs.pediy.com/thread-64000.htm)两篇文章。
总的来说，hive文件的内容结构有点PE文件的意味，有“文件头”和各个“节区”、“节区头”。当然这里的“文件头”被叫做`HBASE_BLOCK`，“节区头”和“节区”分别叫做`BIN`和`CELL`也即“巢箱”和“巢室”。整个hive文件被叫做“储巢”，特点是以`HBASE_BLOCK`开头，用来记录hive文件的各种信息。  
画了个图，看上去可能会直观点：
关于各个部分的结构体定义可参考010Editor提供的模板脚本，不过笔者使用模板代码时并不能正确解析hive文件，所以后文涉及键值查询时以mimikatz中的定义的结构体为准。
### `HBASE_BLOCK`
010Editor分析后对应结构的描述如下图：
每个字段的含义可以根据对应的名称得知，需要关注的是块的签名：`regf`。
### `HBIN`
010Editor分析后对应结构的描述如下图：
前面说到，这个结构相当于PE文件的节区头，它包含了“节区”的大小，偏移等信息，这里同样需要关注`HbinSignature`即签名，对于巢箱来讲，它的签名是`hbin`，有了这个签名，就可以定位到巢箱的位置保证后续能够正常查询到键值。不同类型的数据如键、值、安全描述符等分门别类的存放在各个类型的巢室中。
## mimikatz解析流程
在提供sam文件和system文件的情况下，解析的大体流程如下：
0x1 **获取注册表system的“句柄”**  
0x2 **读取计算机名和解密密钥**  
0x3 **获取注册表sam的“句柄”**  
0x4 **读取用户名和用户哈希**
> 未提供sam文件和system文件的情况下，mimikatz会使用官方的api直接读取当前机器中的注册表
这里先对mimikatz中创建的几个结构体做简要说明，再继续对整个流程的分析。首先是`PKULL_M_REGISTRY_HANDLE`，这个结构体主要是用于标识操作的注册表对象以及注册表的内容，它由两个成员构成，即：
    typedef struct _KULL_M_REGISTRY_HANDLE {
        KULL_M_REGISTRY_TYPE type;
        union {
            PKULL_M_REGISTRY_HIVE_HANDLE pHandleHive;
        };
    } KULL_M_REGISTRY_HANDLE, *PKULL_M_REGISTRY_HANDLE;
其中，`type`用于标识是对注册表hive文件操作，还是通过API直接读取当前机器中的注册表项，这里不再对其进一步说明。对于第二个成员`pHandleHive`就涉及到第二结构体了，先看它的定义：
    typedef struct _KULL_M_REGISTRY_HIVE_HANDLE
    {
        HANDLE hFileMapping;
        LPVOID pMapViewOfFile;
        PBYTE pStartOf;
        PKULL_M_REGISTRY_HIVE_KEY_NAMED pRootNamedKey;
    } KULL_M_REGISTRY_HIVE_HANDLE, *PKULL_M_REGISTRY_HIVE_HANDLE;
这个结构体实际上就是前面所说的注册表文件的“句柄”，由4个成员组成：
1、 `hFileMapping`：文件映射的句柄  
2、 `pMapViewOfFile`：指向文件映射映射到调用进程地址空间的位置，用来访问映射文件内容  
3、 `pStartOf`：指向注册表hive文件的第一个巢箱  
4、 `pRootNamedKey`：指向一个键巢室，用于查找子键和子键值
对于键巢室，mimikatz中定义的结构体如下：
    typedef struct _KULL_M_REGISTRY_HIVE_KEY_NAMED
    {
        LONG szCell;
        WORD tag;
        WORD flags;
        FILETIME lastModification;
        DWORD unk0;
        LONG offsetParentKey;
        DWORD nbSubKeys;
        DWORD nbVolatileSubKeys;
        LONG offsetSubKeys;
        LONG offsetVolatileSubkeys;
        DWORD nbValues;
        LONG offsetValues;
        LONG offsetSecurityKey;
        LONG offsetClassName;
        DWORD szMaxSubKeyName;
        DWORD szMaxSubKeyClassName;
        DWORD szMaxValueName;
        DWORD szMaxValueData;
        DWORD unk1;
        WORD szKeyName;
        WORD szClassName;
        BYTE keyName[ANYSIZE_ARRAY];
    } KULL_M_REGISTRY_HIVE_KEY_NAMED, *PKULL_M_REGISTRY_HIVE_KEY_NAMED;
这里和010Editor给出的结果大体上一致，关于两者的差异以及孰对孰错以笔者目前的水平还不足以甄别，不过这并不影响对mimikatz解析注册表这部分代码的分析学习。实际上只是用到了其中的几个成员，如tag(签名)、flags、nbSubKeys、offsetSubkeys等，而对于这些成员，从命名上可以判断二者所代表的含义应该是相似的。
###  获取注册表“句柄”
对于sam文件和system文件，这一步所作的操作都一样，即将文件映射到内存。这里主要涉及到两个Windows API：
1、`CreateFileMapping`，MSDN解释为指定文件创建或打开一个命名或未命名的文件映射对象，函数原型如下：
    HANDLE CreateFileMappingA(
      [in]           HANDLE                hFile,
      [in, optional] LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
      [in]           DWORD                 flProtect,
      [in]           DWORD                 dwMaximumSizeHigh,
      [in]           DWORD                 dwMaximumSizeLow,
      [in, optional] LPCSTR                lpName
    );
这里主要关注两个参数，一是`hFile`即文件句柄，可以由`CreateFile`获得；二是`flProtect`，用于标识权限如`PAGE_READWRITE`
2、`MapViewOfFile`，MSDN解释为将文件映射映射到调用进程的地址空间，函数原型如下：
    LPVOID MapViewOfFile(
      [in] HANDLE hFileMappingObject,
      [in] DWORD  dwDesiredAccess,
      [in] DWORD  dwFileOffsetHigh,
      [in] DWORD  dwFileOffsetLow,
      [in] SIZE_T dwNumberOfBytesToMap
    );
同样的，这里关注两个参数，一是`hFileMappingObject`，顾名思义，文件映射的句柄；二是`dwDesiredAccess`，映射对象的访问权限，同`CreateFileMapping`的参数`flProtect`。
通过这种方式可以方便的处理大文件，因为创建一个大的文件映射时不会占用任何系统资源，只有在调用如`MapViewOfFile`来访问文件内容时才消耗系统资源，而对于`MapViewOfFile`而言，完全可以一次只映射文件数据的一小部分，然后在取消当前映射后再重新映射新的内容。这样一来，即便是处理超大文件，也不会导致进程本身占用内存过多。
回到正题，在mimikatz的源码中，创建注册表hive文件的映射目的还是为了读取文件内容，首先通过`regf`定位到hive文件的头，随后通过偏移定位到第一个bin，然后保存相关的信息：
    if((pFh->tag == 'fger') && (pFh->fileType == 0))
    {
        pBh = (PKULL_M_REGISTRY_HIVE_BIN_HEADER) ((PBYTE) pFh + sizeof(KULL_M_REGISTRY_HIVE_HEADER));
        if(pBh->tag == 'nibh')
        {
            (*hRegistry)->pHandleHive->pStartOf = (PBYTE) pBh;
            (*hRegistry)->pHandleHive->pRootNamedKey = (PKULL_M_REGISTRY_HIVE_KEY_NAMED) ((PBYTE) pBh + sizeof(KULL_M_REGISTRY_HIVE_BIN_HEADER) + pBh->offsetHiveBin);
            status = (((*hRegistry)->pHandleHive->pRootNamedKey->tag == 'kn') && ((*hRegistry)->pHandleHive->pRootNamedKey->flags & (KULL_M_REGISTRY_HIVE_KEY_NAMED_FLAG_ROOT | KULL_M_REGISTRY_HIVE_KEY_NAMED_FLAG_LOCKED)));
        }
    }
这里需要注意的点是第一个巢室即`pRootNameKey`需要对应为键巢室，否则“句柄”打开失败。
###  获取计算机名和解密密钥
获取句柄之后的操作对于`system`这个hive文件来讲，就是获取密钥了，密钥长度为16。这里的密钥位于`HKLM\SYSTEM\ControlSet000\Current\Control\LSA`，由四个不同的键的键值按固定顺序组合得到。  
首先查找键值，比如`JD`对应的值为`b8 18 7d 0b`，这一项在文件中对应的值如下图：
通过`swscanf_s`将宽字符转换为四个字节的密钥，查询完四个键之后即得到最后16个字节的密钥数据：
    const wchar_t * kuhl_m_lsadump_SYSKEY_NAMES[] = {L"JD", L"Skew1", L"GBG", L"Data"};
    ...
    for(i = 0 ; (i pHandleHive->pStartOf + pKn->offsetSubKeys);
    if(ptrF = wcschr(lpSubKey, L'\\'))
    {
        if(buffer = (wchar_t *) LocalAlloc(LPTR, (ptrF - lpSubKey + 1) * sizeof(wchar_t)))
        {
            RtlCopyMemory(buffer, lpSubKey, (ptrF - lpSubKey) * sizeof(wchar_t));
            if(*phkResult = (HKEY) kull_m_registry_searchKeyNamedInList(hRegistry, pHbC, buffer))
                kull_m_registry_RegOpenKeyEx(hRegistry, *phkResult, ptrF + 1, ulOptions, samDesired, phkResult);
            LocalFree(buffer);
        }
    }
    else *phkResult = (HKEY) kull_m_registry_searchKeyNamedInList(hRegistry, pHbC, lpSubKey);
首先通过键巢室的`offsetSubKeys`成员获取子键列表距离巢箱的偏移，随后调用`kull_m_registry_searchKeyNamedInList`定位到要查找的巢室。当然，这里有两种情况，一是要查找的子键包含路径,形如`Control\LSA`；二是不包含路径如`Select`，这种情况也即是要获取的键和根键同级。关于`Select`，可以在`regedit`中看到：
在mimikatz的代码里面，获取计算机名以及密钥是先定位该子键的：
    // kuhl_m_lsadump_getComputerAndSyskey
    if(kuhl_m_lsadump_getCurrentControlSet(hRegistry, hSystemBase, &hCurrentControlSet))
    {
        kprintf(L"Domain : ");
        if(kull_m_registry_OpenAndQueryWithAlloc(hRegistry, hCurrentControlSet, L"Control\\ComputerName\\ComputerName", L"ComputerName", NULL, &computerName, NULL))
        {
            kprintf(L"%s\n", computerName);
            LocalFree(computerName);
        }
        kprintf(L"SysKey : ");
        if(kull_m_registry_RegOpenKeyEx(hRegistry, hCurrentControlSet, L"Control\\LSA", 0, KEY_READ, &hComputerNameOrLSA))
    ...
    // kuhl_m_lsadump_getCurrentControlSet