title:Detection of Information Leaks via Reflection in Android Apps
author:Jyoti Gajrani and
Li Li and
Vijay Laxmi and
Meenakshi Tripathi and
Manoj Singh Gaur and
Mauro Conti
POSTER: Detection of Information Leaks via Reﬂection in
Android Apps
Jyoti Gajrani
MNIT, Jaipur, India
PI:EMAIL
Meenakshi Tripathi
MNIT, Jaipur, India
PI:EMAIL
Li Li
SnT, University of
Luxembourg, Luxembourg
PI:EMAIL
M.S. Gaur
MNIT, Jaipur, India
PI:EMAIL
Vijay Laxmi
MNIT, Jaipur, India
PI:EMAIL
Mauro Conti
University of Padua, Italy
PI:EMAIL
ABSTRACT
Reﬂection is a language feature which allows to analyze and
transform the behavior of classes at the runtime. Reﬂec-
tion is used for software debugging and testing. Malware
authors can leverage reﬂection to subvert the malware de-
tection by static analyzers. Reﬂection initializes the class,
invokes any method of class, or accesses any ﬁeld of class.
But, instead of utilizing usual programming language syn-
tax, reﬂection passes classes/methods etc. as parameters to
reﬂective APIs. As a consequence, these parameters can be
constructed dynamically or can be encrypted by malware.
These cannot be detected by state-of-the-art static tools.
We propose EspyDroid, a system that combines dynamic
analysis with code instrumentation for a more precise and
automated detection of malware employing reﬂection. We
evaluate EspyDroid on 28 benchmark apps employing major
reﬂection categories. Our technique show improved results
over FlowDroid via detection of additional undetected ﬂows.
These ﬂows have potential to leak sensitive and private in-
formation of the users, through various sinks.
Keywords
Dynamic Analysis; Instrumentation; Malware; Reﬂection;
Android
1. MOTIVATION FOR WORK
• Faruki et al.
identiﬁed reﬂection as one of the major
stealth technique used by Android malware to evade static
analysis techniques [6].
• Through an analysis spanned across four years, Andru-
bis [9] reported that reﬂection is employed by 57.08% of
Android malware samples.
• Highly advance malware families like OBAD, FakeInstallar
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ASIA CCS ’17 April 02-06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4944-4/17/04.
DOI: http://dx.doi.org/10.1145/3052973.3055162
etc. make use of Java Reﬂection APIs and nested meth-
ods.
Moreover, Android provides Inter-Component Communic-
ation (ICC) feature for communication among components
of application. Intent is a message passing object to request
an action from a component (from same or diﬀerent app) to
facilitate ICC. Unfortunately, malware authors are misusing
the feature to distribute the leaks over multiple components
of given apps [10]. Further, not only classes or methods can
be called through reﬂection but Intents also. Detection and
analysis of these malware require ICC supported analysis
approach.
1 String cls = " android . T e l e p h o n y .
T e l e p h o n y M a n a g e r " ;
2 String reverse = new S t r i n g B u f f e r ( "
d I e c i v e D t e g " ) . reverse () . t o S t r i n g () ;
3 Class c = Class.forName(cls);
4 tm = ( T e l e p h o n y M a n a g e r ) this . g e t S y s t e m S e r v i c e
( Context . T E L E P H O N Y _ S E R V I C E ) ;
5 Method method = c.getMethod(reverse, new Class[0]);
6 String id=(String) method.invoke(tm);
7 Intent i = new Intent ( this , A c t i v i t y 2 . class ) ;
8 i . p u t E x t r a ( " imei " , id ) ;
9 s t a r t A c t i v i t y ( i ) ;
M a i n A c t i v i t y
10 String value = g e t I n t e n t () . g e t E x t r a s () .
g e t S t r i n g ( " imei " ) ;
11 S m s M a n a g e r sm = S m s M a n a g e r . g e t D e f a u l t () ;
12 sm . s e n d T e x t M e s s a g e ( phoneNo , null , value , null ,
null ) ;
A c t i v i t y 2
Listing 1: Reﬂective APIs (Highlighted) which can be
exploited for information leaks
Listing 1 shows the code of Onlytelephony_reverse app
from the well-known DroidBench benchmark [2]. This app
uses reﬂective APIs (lines highlighted) and ICC (lines 7-
9) to leak the sensitive data, e.g., IMEI here. The class
android.Telephony.TelephonyManager deﬁne the method
getDeviceId(). MainActivity instantiates the object of
this class using Class.forName API (Line 3). The example
not only uses reﬂection but also constructs method-name dy-
namically by using the reverse() function (Line 2). Then,
it passes this dynamically constructed method-name to get-
Method() API (Line 5) which creates the method object.
911Finally, it invokes the speciﬁed method using reﬂection API
invoke() (Line 6). Furthermore, MainActivity passes the
IMEI value to Activity2 using Android Intent (lines 7-9),
and Activity2 performs the leakage of IMEI using SMS.
The method reverse() here is just a motivating example,
where in other cases more complicated methods could be
applied such as encryption, substring, concatenation etc. to
subvert static analysis.
We analyzed this application on FlowDroid [5], IccTA,
AmanDroid, and DroidSafe static analysis tools developed
for detection of privacy leaks. None of these tools were suc-
cessful in identifying the leak. Also, we analyze the applica-
tion using DroidRA [8] which is reﬂection-aware static ana-
lysis approach. However, DroidRA also fails to identify the
leak here as the app constructs the method name at runtime.
The dynamic construction of parameters of reﬂective APIs
is very trivial and can be done using various ways like con-
catenation, encryption, and substring generation.
2. CONTRIBUTIONS
Our proposed technique is a work in progress with the
following contributions:
• We propose EspyDroid, a system that combines static and
dynamic analysis to unfold the hidden leaks performed by
the app using reﬂection. Runtime monitoring makes Espy-
Droid capable of resolving reﬂection when the arguments
of reﬂective APIs are encrypted, obfuscated or run-time
dependent.
• EspyDroid is able to detect leaks distributed over multiple
components through Intents. Also, when Intents them-
selves are called through reﬂection.
• We tested EspyDroid on widely used DroidBench bench-
mark and similar work DroidRA.
3. PROPOSED SOLUTION: EspyDroid
The aim of EspyDroid is to unravel leaks in the presence
of reﬂection directly on app bytecode to obliviate the need
of source code for this analysis.
3.1 Overall Solution
The overall architecture of EspyDroid is as shown in Fig-
ure 1. The complete system of EspyDroid consists of three
main modules: Dynamic Analyzer, Log Tracer, Instru-
mentation Agent.
The Dynamic Analyzer module uses APIMonitor [1] which
repackages the app to add monitoring code for the speciﬁed
reﬂection APIs and then executes the app and collects logs.
In this way, it assists in resolving the reﬂective APIs and
associated parameters (Step 1). Log Tracer traces the logs
and prepares processed input (Step 2) for Instrumentation
Agent that generates equivalent non-reﬂective statement(s)
for each reﬂective statement and instruments at appropriate
point (Step 3). The Instrumentation Agent is developed
in Java and performs instrumentation in Jimple, the inter-
mediate code representation of Soot framework [4]. The
aim of instrumentation is to prepare enhanced intermediate
code (thus an enhanced app) with resolved reﬂective calls
so as to enable precise and accurate taint propagation. For
automatic UI exploration of app, Intelligent UI exploration
module from [7] is used which is black-box testing approach
extended using Robotium framework [3].
Figure 1: EspyDroid System Architecture
3.2 Illustrative Example
Figure 2 shows the Jimple code snippet of MainActiv-
ity corresponding to motivating example of Listing 1. The
corresponding instrumented code with non-reﬂective state-
ments is also shown. The three reﬂective APIs (highlighted),
and the corresponding instrumented statements are shown
in Figure 2. For the example, two non-reﬂective statements
are constructed. One instrumentation is corresponding to
reﬂectively instantiating class (Line 7) which is useful for
inferring the method name and other instrumentation is
corresponding to reﬂectively invoking the method (Lines 10
and 14). The illustrative example explains the approach of
Instrumentation Agent with one of the representative app.
Some of the representative samples access Intents class and
its methods also through reﬂective APIs. The way Instru-
mentation Agent is designed handles the instrumentation of
Intent-based reﬂections similarly.
4. EXPERIMENTS
perform sensitive leaks.
the class names that perform sensitive leaks.
We use 17 DroidBench, 9 DroidRA, two modiﬁed versions
of DroidRA samples as representative dataset. The major
usages of reﬂection in the representative dataset are:
• Reﬂective class instantiations to hide the class names that
• Constructor-based reﬂective class instantiations to hide
• Reﬂective invocations of methods to hide the malicious
• Field-based reﬂective accesses to set the class ﬁelds with
• All above cases with leaks in single component or distrib-
• Source and Sink methods accessed by reﬂective instan-
tiation of their classes to hide the classes and methods
accessing sensitive information or leaking it.
• Intent-based reﬂective access to hide the communication
• Encrypted/Obfuscated parameters of reﬂective APIs to
fail even reﬂection aware static analysis based techniques.
between two components.
methods invoked.
the malicious information to be leaked.
uted over multiple components.
EspyDroid is able to identify a number of distinct leakage
App having Reflection APIs for hiding leaks SootLog TracerInstrumentationAgent@JimpleDynamic AnalyzerLogsInstrumented App (Reflection resolved)Jimple Code(1)(2)(3)912Figure 2: Jimple code of Listing 1, and the instrumented Jimple Code
paths which are not captured by FlowDroid alone. The
results show a large improvement in identiﬁcation of leak-
ages and hence, lead to reduction of false negatives. In the
original representative dataset, FlowDroid could identify 19
leakage paths while the same tool could identify 47 leakage
paths in the instrumented apps when used in conjunction
with EspyDroid. Not only the leakage paths, but the number
of identiﬁed sources and sinks is also improved. FlowDroid
could identify 143 sources and sinks in original dataset while
FlowDroid could identify 173 sources and sinks on instru-
mented dataset. The results demonstrate that the precision
of static analysis tools get improved on taking instrumented
apps as input instead of original reﬂection-employed apps.
5. CONCLUSIONS
We propose EspyDroid, a reﬂection aware technique which
is resilient against encryption, obfuscation or run-time de-
pendency of reﬂection APIs parameters. The results on
small representative dataset demonstrate that static analyz-
ers results in large false negatives in the presence of reﬂec-
tion. To improve upon these missed leaks, EspyDroid pro-
poses an hybrid approach to improve false negatives. Espy-
Droid is a modular work in progres which shall be expanded
for handling more advanced cases of reﬂection.
6. ACKNOWLEDGMENTS
This work is partially supported by Security Analysis Fra-
mework for Android Platform (SAFAL, Grant 1000109932)
by Department of Electronics and Information Technology,
Government of India. The work is also partially suppor-
ted by DST-CNRS project IFC/DST-CNRS/2015-01/332 at
MNIT Jaipur.
7. REFERENCES
[1] APIMonitor. https://code.google.com/archive/p/
droidbox/wikis/APIMonitor.wiki.
[2] DroidBench. https://github.com/
secure-software-engineering/DroidBench/tree/develop.
[3] Robotium.
https://github.com/RobotiumTech/robotium.
[4] The soot framework for java program analysis: a
retrospective. In Cetus Users and Compiler
Infastructure Workshop (CETUS 2011), 2011.
[5] S. Arzt et al. Flowdroid: Precise context, ﬂow, ﬁeld,
object-sensitive and lifecycle-aware taint analysis for
android apps. ACM SIGPLAN Notices, 2014.
[6] P. Faruki et al. Android security: a survey of issues,
malware penetration, and defenses. IEEE
Communications Surveys & Tutorials, 17(2), 2015.
[7] J. Gajrani et al. spectra: a precise framework for
analyzing cryptographic vulnerabilities in android
apps. In to be published in 2017 14th IEEE Annual
Consumer Communications & Networking Conference
(CCNC). IEEE, 2017.
[8] L. Li et al. Droidra: Taming reﬂection to support
whole-program analysis of android apps. In
Proceedings of the 25th International Symposium on
Software Testing and Analysis. ACM, 2016.
[9] M. Lindorfer et al. Andrubis - a tool for analyzing
unknown android applications. 2014.
[10] D. Octeau et al. Eﬀective inter-component
communication mapping in android: An essential step
towards holistic security analysis. In Presented as part
of the 22nd USENIX Security Symposium (USENIX
Security 13), 2013.
instrumented withinstrumented with913