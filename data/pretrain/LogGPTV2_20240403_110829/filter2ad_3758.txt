# Detection of Information Leaks via Reflection in Android Apps

**Authors:**
- Jyoti Gajrani, MNIT, Jaipur, India (Email: [PI:EMAIL])
- Li Li, SnT, University of Luxembourg, Luxembourg (Email: [PI:EMAIL])
- Vijay Laxmi, MNIT, Jaipur, India (Email: [PI:EMAIL])
- Meenakshi Tripathi, MNIT, Jaipur, India (Email: [PI:EMAIL])
- Manoj Singh Gaur, MNIT, Jaipur, India (Email: [PI:EMAIL])
- Mauro Conti, University of Padua, Italy (Email: [PI:EMAIL])

## Abstract
Reflection is a language feature that allows for the analysis and transformation of class behavior at runtime. It is commonly used for software debugging and testing. Malware authors can exploit reflection to evade detection by static analyzers. Reflection can initialize classes, invoke methods, or access fields, but it does so by passing classes, methods, etc., as parameters to reflective APIs. These parameters can be dynamically constructed or encrypted, making them undetectable by current static tools.

We propose EspyDroid, a system that combines dynamic analysis with code instrumentation to detect malware using reflection more precisely and automatically. We evaluate EspyDroid on 28 benchmark apps employing major reflection categories. Our technique shows improved results over FlowDroid by detecting additional undetected flows, which have the potential to leak sensitive and private information through various sinks.

**Keywords:** Dynamic Analysis, Instrumentation, Malware, Reflection, Android

## 1. Motivation for Work
- Faruki et al. identified reflection as a major stealth technique used by Android malware to evade static analysis techniques [6].
- Andrubis reported that 57.08% of Android malware samples employ reflection over a four-year span [9].
- Advanced malware families like OBAD and FakeInstaller use Java Reflection APIs and nested methods.
- Android's Inter-Component Communication (ICC) feature, which facilitates communication among application components, is also misused by malware to distribute leaks across multiple components [10]. Reflection can be used to call Intents, further complicating detection.

### Example of Reflective API Usage
```java
1 String cls = "android.telephony.TelephonyManager";
2 String reverse = new StringBuffer("getDeviceId").reverse().toString();
3 Class c = Class.forName(cls);
4 TelephonyManager tm = (TelephonyManager) this.getSystemService(Context.TELEPHONY_SERVICE);
5 Method method = c.getMethod(reverse, new Class[0]);
6 String id = (String) method.invoke(tm);
7 Intent i = new Intent(this, Activity2.class);
8 i.putExtra("imei", id);
9 startActivity(i);

// MainActivity
10 String value = getIntent().getExtras().getString("imei");
11 SmsManager sm = SmsManager.getDefault();
12 sm.sendTextMessage(phoneNo, null, value, null, null);

// Activity2
```

This example from DroidBench [2] demonstrates how reflective APIs (lines 3, 5, and 6) and ICC (lines 7-9) can be used to leak sensitive data, such as IMEI. The method name is dynamically constructed (line 2), and the method is invoked using reflection (line 6). The IMEI value is then passed to `Activity2` via an Intent (lines 7-9), and `Activity2` sends the IMEI using SMS (lines 10-12).

## 2. Contributions
Our proposed technique, EspyDroid, is a work in progress with the following contributions:
- **Combination of Static and Dynamic Analysis:** EspyDroid combines static and dynamic analysis to uncover hidden leaks performed by apps using reflection. Runtime monitoring enables EspyDroid to resolve reflection even when the arguments of reflective APIs are encrypted, obfuscated, or runtime-dependent.
- **Detection of Distributed Leaks:** EspyDroid can detect leaks distributed over multiple components through Intents, including when Intents themselves are called through reflection.
- **Evaluation on Benchmarks:** We tested EspyDroid on widely used DroidBench benchmarks and similar work DroidRA.

## 3. Proposed Solution: EspyDroid
The goal of EspyDroid is to detect leaks in the presence of reflection directly on app bytecode, eliminating the need for source code.

### 3.1 Overall Solution
The architecture of EspyDroid consists of three main modules: Dynamic Analyzer, Log Tracer, and Instrumentation Agent.

- **Dynamic Analyzer:** Uses APIMonitor [1] to repackage the app, add monitoring code for specified reflection APIs, execute the app, and collect logs (Step 1).
- **Log Tracer:** Traces the logs and prepares processed input for the Instrumentation Agent (Step 2).
- **Instrumentation Agent:** Generates equivalent non-reflective statements for each reflective statement and instruments them at appropriate points (Step 3). This module is developed in Java and performs instrumentation in Jimple, the intermediate code representation of the Soot framework [4].

### 3.2 Illustrative Example
Figure 2 shows the Jimple code snippet of `MainActivity` corresponding to the motivating example in Listing 1. The instrumented code with non-reflective statements is also shown. The three reflective APIs (highlighted) and the corresponding instrumented statements are illustrated. For the example, two non-reflective statements are constructed: one for reflectively instantiating the class (Line 7) and another for reflectively invoking the method (Lines 10 and 14).

## 4. Experiments
We use 17 DroidBench, 9 DroidRA, and two modified versions of DroidRA samples as a representative dataset. The major usages of reflection in the dataset include:
- Reflective class instantiations to hide class names.
- Constructor-based reflective class instantiations.
- Reflective invocations of methods to hide malicious activities.
- Field-based reflective accesses to set class fields.
- All cases with leaks in single or multiple components.
- Source and sink methods accessed by reflective instantiation to hide classes and methods accessing sensitive information.
- Intent-based reflective access to hide communication between components.
- Encrypted/obfuscated parameters of reflective APIs to evade even reflection-aware static analysis techniques.

EspyDroid identifies a number of distinct leakage paths not captured by FlowDroid alone. In the original dataset, FlowDroid could identify 19 leakage paths, while it could identify 47 leakage paths in the instrumented apps when used with EspyDroid. The number of identified sources and sinks also improved from 143 to 173, demonstrating the enhanced precision of static analysis tools with instrumented apps.

## 5. Conclusions
We propose EspyDroid, a reflection-aware technique resilient against encryption, obfuscation, or runtime dependency of reflection API parameters. Results on a small representative dataset show that static analyzers result in many false negatives in the presence of reflection. EspyDroid uses a hybrid approach to improve these missed leaks and is a modular work in progress that will be expanded to handle more advanced cases of reflection.

## 6. Acknowledgments
This work is partially supported by the Security Analysis Framework for Android Platform (SAFAL, Grant 1000109932) by the Department of Electronics and Information Technology, Government of India, and by the DST-CNRS project IFC/DST-CNRS/2015-01/332 at MNIT Jaipur.

## 7. References
[1] APIMonitor. https://code.google.com/archive/p/droidbox/wikis/APIMonitor.wiki
[2] DroidBench. https://github.com/secure-software-engineering/DroidBench/tree/develop
[3] Robotium. https://github.com/RobotiumTech/robotium
[4] The Soot framework for Java program analysis: a retrospective. In Cetus Users and Compiler Infrastructure Workshop (CETUS 2011), 2011.
[5] S. Arzt et al. FlowDroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. ACM SIGPLAN Notices, 2014.
[6] P. Faruki et al. Android security: a survey of issues, malware penetration, and defenses. IEEE Communications Surveys & Tutorials, 17(2), 2015.
[7] J. Gajrani et al. Spectra: a precise framework for analyzing cryptographic vulnerabilities in Android apps. To be published in 2017 14th IEEE Annual Consumer Communications & Networking Conference (CCNC). IEEE, 2017.
[8] L. Li et al. DroidRA: Taming reflection to support whole-program analysis of Android apps. In Proceedings of the 25th International Symposium on Software Testing and Analysis. ACM, 2016.
[9] M. Lindorfer et al. Andrubis - a tool for analyzing unknown Android applications. 2014.
[10] D. Octeau et al. Effective inter-component communication mapping in Android: An essential step towards holistic security analysis. Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13), 2013.