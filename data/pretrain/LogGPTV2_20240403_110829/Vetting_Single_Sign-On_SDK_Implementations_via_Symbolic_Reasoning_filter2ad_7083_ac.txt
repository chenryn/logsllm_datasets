73%
41%
32%
44%
54%
49%
branch
coverage
37%
31%
33%
39%
68%
34%
29%
37%
46%
52%
# of bugs
discovered
2
0
1
2
0
2
2
2
1
2
# of path
discovered
40
649
1282
6
4
14
6
12
12
2
statement
coverage
58%
42%
46%
47%
83%
43%
38%
55%
56%
62%
branch
coverage
56%
35%
39%
44%
77%
36%
35%
47%
50%
60%
# of bugs
discovered
2
2
5
2
1
2
2
2
1
3
• 1: Facebook SDK supports OIDC, and the other SDKs support OAuth2.0 protocol.
6.2 Experiment Setup and Performance
We run S3KVetter on an LXC instance of a Ubuntu 14.04
machine with 8 core CPU and 64GB memory. The test-
ing of each SSO SDK can be completed within 5 sec-
onds. Such runtime efﬁciency of S3KVetter can be at-
tributed to the following 2 design decisions: Firstly, we
internally simulate the external parties and thus spare
S3KVetter from executing the most time-consuming net-
work requests. Secondly, we concretely execute non-
core methods. As such, the number of paths to be ex-
plored as well as the complexity of path constraint to
be solved are signiﬁcantly reduced. Without these two
heuristics, it can take several minutes for testing even a
small SDK.
6.3 Program Coverage
S3KVetter is able to overcome the fundamental weak-
ness of traditional symbolic execution when dealing with
multi-party, asynchronous distributed systems. By that,
we mean that, when a conventional symbolic execution
engine is unable to obtain correct/ meaningful results
(e.g., code) from external parties (and thus gets stuck
in error-processing paths), S3KVetter can either “gener-
ate” valid results, or schedule to other paths, to continue
exploring meaningful paths beyond the error-processing
paths. Therefore, as shown in Table 1, S3KVetter can
achieve 2%-13% higher statement coverage and 2%-19%
higher branch coverage for the SDKs under test. Such
coverage data is measured by coverage.py [1]. While in-
creasing the code coverage by modifying a limited set
of inputs is increasingly harder for higher values, even
small increases in code statements can signiﬁcantly dis-
cover more program paths.
Despite the improvement, we note that S3KVetter is
far from achieving 100% coverage. This is in line with
our expectation for two reasons: Firstly, a SDK often
contains functions beyond the scope of SSO (e.g., adver-
tisement, notiﬁcation, etc.). For example, Facebook has
developed over 80 functions in their Graph API to sup-
port data ingestion and interchange for the Facebook’s
platform. These functions therefore are not considered
by S3KVetter. Secondly, only a limited set of inputs
(e.g., Step 1, 5 and 10 in Fig. 1) can be controlled by an
attacker. With such limited capability, the attacker can
only reach part of the code statements. Since S3KVetter
cannot reach more paths than the attacker, incomplete
coverage is expected.
6.4 Vulnerabilities Discovered
As presented in Table 2, S3KVetter has found 7 types of
vulnerabilities among these SDKs. While some vulner-
abilities have been well studied in the literature, four of
them are uncovered by S3KVetter for the ﬁrst time. The
damages of these newly discovered vulnerabilities vary
depending on the speciﬁc implementations. The security
impact can range from snifﬁng user activities at the RP,
to the hijacking of the victim’s RP account. There is only
one requirement for the exploitation of these vulnerabil-
ities8: the attacker needs to setup a malicious RP (mRP)
and lure a victim user to login to the mRP. Once this con-
dition is satisﬁed, the attacker can remotely control the
victim’s account of any RP which uses the vulnerable
SSO SDK. We detail these newly discovered vulnerabil-
ities in Section 7.
6.4.1 Detection Accuracy
We have manually veriﬁed all the reported vulnerabili-
ties and found no false positive. However, S3KVetter can
contain false negatives (like the state-of-the-art symbolic
analysis techniques) for two main reasons. Firstly, our
developed security property only focuses on the authen-
tication issues. Yet, there may be other important prop-
erties. Secondly, S3KVetter may not be able to explore
all execution paths due to the following limitations:
8For the use-before-assignment of the state variable, the require-
ment is even simpler: the victim just needs to visit a malicious web
page.
1466    27th USENIX Security Symposium
USENIX Association
Table 2: Summary of Discovered Vulnerabilities
Token
substitution
no check of
misuse or
no use of state
use-before-assignment
of state variable
New classes of vulnerabilities
Bypass MAC
key protection
refresh token
injection
N.A
Y
N.A
N.A
N.A
N.A
N.A
N
N.A
N.A
N.A
N.A
Y
N.A
N.A
N.A
N.A
N.A
N.A
N.A
N
Y
Y
N
N
N
N
N
N
N
access token
injection
N
N
Y
N
N
N
N
N
N
N
SDK
Existing classes of vulnerabilities
TLS
Y
N
N
Y
N
Y
Y
Y
N
Y
Y
N
Y
Y
Y
Y
Y
Y
Y
Y
N
N
Y
N
N
N
N
N
N
Y
Facebook SDK
Request-OAuthLib
OAuthLib
Sinaweibopy
OAuth2Lib
Rauth
Python-weixin
Boxsdk
Renrenpy
Douban-client
• The underlying SMT solver assumes a query does
not have a feasible solution when it takes too long to
solve. However, it can be the case that the constraint
under query is too complex. We cannot cover those
feasible paths related to such a complex constraint.
• PyExZ3 uses class inheritance to track program ex-
ecution. However, if the SDK explicitly casts the
input data to native data type, PyExZ3 will lose the
control for this variable (We seldom observe such
cases in practice though).
• We concretely run non-core methods (e.g., URL-
encode) and do not check whether these non-core
methods contain bugs.
6.5 Usability
It is straightforward to apply S3KVetter on an SSO
SDK. Only two manual steps are required by an analyst.
Firstly, the analyst should build a sample app, based on
the SDK under test, so that S3KVetter can actually exe-
cute/ explore the app and thus the target SDK. Thanks to
the widely available developer documentation and ofﬁ-
cial sample codes, this step is relatively straightforward.
Secondly, the analyst should mark which functions can
be reached by which part of the attacker’s input9. Al-
though there can be thousands of functions in a SDK ,
the attacker usually can only reach very few of them. For
example, only three functions of the Request-OAuthLib
SDK can be directly invoked by an attacker. Given the
small number of these functions, it becomes trivial to
identify which part of the user inputs is symbolic. For in-
stance, the Request-OAuthLib SDK authenticates a user
only based on the variable of request.url. Therefore,
only this variable is marked as symbolic (one example
can be found in Appendix B). The other variables like
cookies and HTTP headers, though controllable by an
attacker, are treated as concrete since they are not pro-
cessed by the SDK of interest.
9While we assume an attacker can control all packets sent to the RP
server, only part of these packets would be processed by the SDK.
To apply S3KVetter on other multi-party systems, one
additional manual step is to develop the required security
properties (i.e., the counterpart of Listing 1) for the spe-
ciﬁc domain of applications. Fortunately, the required se-
curity properties are high-level in nature and do not need
to be developed by a domain expert. For example, the list
of the required security properties for payment services
can be developed by codifying the following statement:
A merchant M should accept an order if and only if the
user has paid to the cashier in the correct amount for
that speciﬁc order associated with merchant M.
Note that the developed scurity property is not neces-
sarily an exhaustive list of all protocol states.
In fact,
the analyst is free to specify the properties of interest.
For instance, if an SSO system only supports the im-
plicit call-ﬂow (where the code variable is not involved),
Clause 2 in Listing 1 is no longer needed. Note also that
S3KVetter is agnostic to how the security properties are
derived. While other researchers have managed to au-
tomatically extract the required security properties from
the source code [5] or protocol speciﬁcation [16], their
results are complementary to ours and can be adopted to
further extend the capabilities of S3KVetter.
6.6 Comparison with Existing Testing
Tools for SSO
To the best of our knowledge, there is no existing work
(except [49]) which performs comprehensive blackbox
fuzzing/ testing on SSO SDKs.
• [18, 33, 51] build tools to check speciﬁc, previ-
ously known vulnerabilities (e.g.,CSRF), but could
not discover new ones.
• While our earlier work on model-based security
testing for OAuth2.0 (OAuthTester) [49] has the po-
tential, at least in theory, to discover all the vulnera-
bilities listed in Table 2, our testing shows that OAu-
thTester can only detect two out of the seven types
of vulnerabilities (TLS and state misuse) listed.
This is because some vulnerabilities discovered by
S3KVetter can only be triggered under very speciﬁc
USENIX Association
27th USENIX Security Symposium    1467
conditions. Without the source code, it is very difﬁ-
cult for blackbox-testers (like [49]) to uncover such
ﬁne-grain, condition-speciﬁc problem.
7 Case Study of Vulnerabilities Discovered
7.1 Access token Injection
As the result of SSO, an access token is issued to the RP.
Based on the access token, the RP can identify the user.
The authenticity of the access token is therefore a critical
security requirement. As such, many IdPs (e.g., Face-
book, Sina) have provided an access token-debug API
for RPs to verify the access tokens they received. This
API is heavily used by RPs running the implicit ﬂow [13]
but seldom by those implementing the authorization-
code ﬂow. This is because an access token obtained via
the authorization-code ﬂow is generally believed to be
secure by SDK developers or IdPs. Such belief is based
on the fact that, under the authorization-code ﬂow, the
access token is exchanged over a secure TLS connection
routed directly between the IdP and RP, without passing
through the mobile (client) device which may be con-
trolled/ tampered by the attacker. However, we will show
that an access token obtained using the authorization-
code ﬂow can still be insecure under the presence of
the so-called “access token injection” vulnerability. This
vulnerability is caused by the ill-conceived design of
SSO SDKs. For any RP using a SDK with the “ac-
cess token injection” vulnerability, an attacker can re-
motely inject any access token of her choice to the vul-
nerable RP. As a result, as long as the attacker can obtain
a valid (but different) access token of Alice (e.g., by lur-