 Seq Scan on test (cost=0.00..1791.00 rows=100000 width=15)
 Filter: (id = 1)
 postgres=# explain select * from test where id=100;
 Index Scan using idx_test_1 on test (cost=0.00..8.27 rows=1 width=15)
 Index Cond: (id = 100)
Index
 -- 非索引列的使用
 postgres=# explain select * from test where info='digoal' and id=1;
 QUERY PLAN
 --------------------------------------------------------
 Seq Scan on test (cost=0.00..2041.00 rows=1 width=15)
 Filter: ((info = 'digoal'::text) AND (id = 1))
 postgres=# create index idx_test_2 on test(id) where info='digoal100';
 postgres=# explain select * from test where info='digoal100';
 QUERY PLAN
 ------------------------------------------------------------------------
 Index Scan using idx_test_2 on test (cost=0.00..8.27 rows=1 width=15)
 (1 row)
Index
 -- 为什么要去除common 值
 postgres=# drop index idx_test_1;
 postgres=# drop index idx_test_2;
 postgres=# explain select * from test where id=1;
 QUERY PLAN
 -------------------------------------------------------------
 Seq Scan on test (cost=0.00..1791.00 rows=100000 width=15)
 Filter: (id = 1)
 -- 为什么会走全表扫描
 postgres=# select id,count(*) from test group by id order by count(*) desc limit 10;
 id | count
 -----+--------
 1 | 100001
 120 | 1
 887 | 1
 681 | 1
Index
 函数索引和表达式索引
 表达式索引
 postgres=# explain select * from test where id+1=100;
 QUERY PLAN
 ----------------------------------------------------------
 Seq Scan on test (cost=0.00..2059.86 rows=505 width=15)
 Filter: ((id + 1) = 100)
 postgres=# create index idx_test_1 on test((id+1));
 CREATE INDEX
 postgres=# explain select * from test where id+1=100;
 QUERY PLAN
 ----------------------------------------------------------------------------
 Bitmap Heap Scan on test (cost=12.18..577.45 rows=505 width=15)
 Recheck Cond: ((id + 1) = 100)
 -> Bitmap Index Scan on idx_test_1 (cost=0.00..12.05 rows=505 width=0)
 Index Cond: ((id + 1) = 100)
Index
 函数索引
 -- 以下区分大小写的场景无法使查询走普通的索引.
 postgres=# create table test (id int,info text,crt_time timestamp(0));
 postgres=# insert into test select
generate_series(1,100000),'digoal'||generate_series(1,100000),clock_timestamp(
);
 postgres=# create index idx_test_info on test(info);
 postgres=# explain select * from test where info ~* '^a';
 Seq Scan on test (cost=0.00..1887.00 rows=10 width=23)
 Filter: (info ~* '^a'::text)
 -- 忽略大小写的ilike和~* 要走索引的话, 开头的字符只能是大小写一致的, 字母不行.
数字可以. 例如字母a区分大小写, 数组0不区分大小写.索引中的条目也就有差别.
 postgres=# explain select * from test where info ~* '^0';
 Index Scan using idx_test_info on test (cost=0.00..8.28 rows=10 width=23)
 Index Cond: ((info >= '0'::text) AND (info  Bitmap Index Scan on idx_test_info_1 (cost=0.00..13.27 rows=500 width=0)
 Index Cond: ((lower(info) >= 'a'::text) AND (lower(info)  Result (cost=0.00..0.01 rows=1 width=0)
 (4 rows)
 绑定变量是否走索引取决于驱动, 机制和以上类似.(通常SESSION的第一个解析为硬解析,
后面都是软解析.硬解析的时候的执行计划决定了后面的所有执行计划)
Index
 索引带来的Modify Overhead
 降低Overhead的手段之一 : HOT
 创建表时设置fillfactor 0) */
 #define LP_REDIRECT 2 /* HOT redirect (should have lp_len=0) */
 #define LP_DEAD 3 /* dead, may or may not have storage */
Tuple Layout
HeapTupleHeaderData(23 Bytes on most machine)
null bitmap(Optional,The null bitmap is only present
if the HEAP_HASNULL bit is set in t_infomask.
occupies enough bytes to have one bit per data column.
a 1 bit indicates not-null, a 0 bit is a null)
Padding(Optional, Any padding needed to make t_hoff a MAXALIGN
multiple will appear between the null bitmap and the object ID)
One
object ID(Optional, only present if the
Tuple
HEAP_HASOID bit is set in t_infomask)
ColumnData
HeapTupleHeader Layout
Field Type Length Description
t_xmin TransactionId 4 bytes insert XID stamp
t_xmax TransactionId 4 bytes delete XID stamp
insert and/or delete CID stamp (overlays
t_cid CommandId 4 bytes
with t_xvac)
XID for VACUUM operation moving a row
t_xvac TransactionId 4 bytes
version
t_ctid ItemPointerData 6 bytes current TID of this or newer row version
t_infomask2 int16 2 bytes number of attributes, plus various flag bits
t_infomask uint16 2 bytes various flag bits
t_hoff uint8 1 byte offset to user data
INDEX Pointer Introduction
 ItemPointers (index) ->
ItemId数据结构
(Array of (lp_off:15bit,
lp_flags:2bit,lp_len:15bit) pairs pointing to the
actual items. 4 bytes per ItemId.)
 -> Item (tuple)
HOT Introduction
 Heap-Only Tuple Benefit :
 eliminates redundant index entries
 allows the re-use of space taken by DELETEd or obsoleted UPDATEd tuples without
performing a table-wide vacuum.
 Example
 Update 1: Index points to 1
 line points [1] [2]
 Items [111111111]->[2222222222]
 Update 2: Index points to 1
 line point [1]->[2]
 Items [2222222222]
 Update 3: Index points to 1
 line points [1]->[2] [3]
 Items [2222222222]->[3333333333]
 Update 4: Index points to 1
 line points [1]------>[3]
 Items [3333333333]