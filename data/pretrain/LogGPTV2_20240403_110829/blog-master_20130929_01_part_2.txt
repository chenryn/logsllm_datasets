```  
# 在.return探针中可以得到$return变量的值.  
```  
```  
[root@db-172-16-3-39 ~]# stap --vp 5 -e 'probe kernel.function("tcp_v4_connect").return {printf("%s, %d, %d, %s\n", pp(), pid(), cpu(), $return$$);}'  
Parsed kernel "/lib/modules/2.6.18-348.12.1.el5/build/.config", containing 1977 tuples  
Parsed kernel /lib/modules/2.6.18-348.12.1.el5/build/Module.symvers, which contained 3546 vmlinux exports  
Searched: " /usr/share/systemtap/tapset/x86_64/*.stp ", found: 4, processed: 4  
Searched: " /usr/share/systemtap/tapset/*.stp ", found: 81, processed: 81  
Pass 1: parsed user script and 85 library script(s) using 146796virt/23704res/3012shr/21392data kb, in 160usr/10sys/171real ms.  
kernel.function("tcp_v4_connect@net/ipv4/tcp_ipv4.c:158").return, 6461, 2, 0  
```  
函数可用的三个过滤规则如下 :   
```  
The .inline modifier for .function filters the results to include only instances of inlined functions.   
The .call modifier selects the opposite subset.   
The .exported modifier filters the results to include only exported functions.   
Inline functions do not have an identifiable return point, so .return is not supported on .inline probes.  
```  
inline过滤器不能使用.return指定返回probe, 因为inline没有返回点.  
```  
The .statement variant places a probe at the exact spot, exposing those local variables that are visible there.  
```  
语句级的探针, 用于指定源码中的指定行或者行范围, 一般用于观察变量的值在函数中的变化.  
另外, 其实如果使用statement探针, 指定行为funciton开头的行号. 那么和使用funciton探针效果是一样的.  
inline函数过滤参考 :   
http://en.wikipedia.org/wiki/Inline_function  
例子3 :   
```  
probe kernel.statement("*@net/ipv4/tcp_ipv4.c:159")  
[root@db-172-16-3-39 ~]# stap -e 'probe kernel.statement("*@net/ipv4/tcp_ipv4.c:159") {printf("%s, %d, %d, %s, %s\n", pp(), pid(), cpu(), $$vars, $sk$$.$uaddr$$.$addr_len$$.$inet$$.$tp$$.$usin$$.$rt$$.$daddr$$.$nexthop$$.$tmp$$.$err$$.$inet_opt$$);}'  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:168"), 4761, 2, sk=0xffff810222892d00 uaddr=0xffff8100acfc1ec8 addr_len=0x10 inet=? tp=? usin=? rt=? daddr=0xffff8102 nexthop=? tmp=? err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff810222892d58, .prev=0xffff810222892d58}}}, .sk_sleep=0xffff81022327  
```  
注意以上输出, pp()函数输出的位置为168行. 参见本文末尾, 168行所有的变量定义都好了.  
改成169行, 实际上输出的是171行的位置. 171是下一个语句开始前.  
```  
probe kernel.statement("*@net/ipv4/tcp_ipv4.c:169")  
[root@db-172-16-3-39 ~]# stap -e 'probe kernel.statement("*@net/ipv4/tcp_ipv4.c:169") {printf("%s, %d, %d, %s, %s\n", pp(), pid(), cpu(), $$vars, $sk$$.$uaddr$$.$addr_len$$.$inet$$.$tp$$.$usin$$.$rt$$.$daddr$$.$nexthop$$.$tmp$$.$err$$.$inet_opt$$);}'  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:171"), 4907, 5, sk=0xffff81012d214080 uaddr=0xffff8100afb07ec8 addr_len=0x10 inet=? tp=? usin=? rt=? daddr=0xffff8101 nexthop=? tmp=? err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d2140d8, .prev=0xffff81012d2140d8}}}, .sk_sleep=0xffff81012d0d  
```  
使用statement探针时, 不需要指定函数名. 关键是要指定文件和行号.  
接下来对通配符做一些介绍 :   
```  
kernel.function(PATTERN)  
kernel.function(PATTERN).call  
kernel.function(PATTERN).return  
kernel.function(PATTERN).return.maxactive(VALUE)  
kernel.function(PATTERN).inline  
kernel.function(PATTERN).label(LPATTERN)  
module(MPATTERN).function(PATTERN)  
module(MPATTERN).function(PATTERN).call  
module(MPATTERN).function(PATTERN).return.maxactive(VALUE)  
module(MPATTERN).function(PATTERN).inline  
kernel.statement(PATTERN)  
kernel.statement(ADDRESS).absolute  
module(MPATTERN).statement(PATTERN)  
```  
In the above probe descriptions, MPATTERN stands for a string literal that identifies the loaded kernel module of interest and LPATTERN stands for a source program label. Both MPATTERN and LPATTERN may include asterisk (*), square brackets "[]", and question mark (?) wildcards.  
```  
MPATTERN 和 LPATTERN 分别表示模块和label的表达样式字符串, 字符串外必须使用""双引号, 字符串中可以使用*, [], ? 等通配符.  
```  
```  
PATTERN stands for a string literal that identifies a point in the program. It is composed of three parts:  
```  
以上PATTERN代表funciton和statement中的表达样式字符串, 字符串外必须使用""双引号. 字符串包含3个部分.  
The first part is the name of a function, as would appear in the nm program's output. This part may use the asterisk and question mark wildcard operators to match multiple names.  
```  
第一个部分是函数名, 可以使用*, [], ? 等通配符.  
```  
The second part is optional, and begins with the ampersand (@) character. It is followed by the path to the source file containing the function, which may include a wildcard pattern, such as mm/slab*. In most cases, the path should be relative to the top of the linux source directory, although an absolute path may be necessary for some kernels. If a relative pathname doesn't work, try absolute.  
第二个部分是源文件(可选), 以@开头, 后面跟字符串(源文件路径), 字符串可以使用*, [], ? 等通配符.  
源文件一般使用的是相对路径, 例如本文用到的/usr/src/debug/kernel-2.6.18/linux-2.6.18-348.12.1.el5.x86_64/net/ipv4/tcp_ipv4.c  
在使用时输入相对路径@net/ipv4/tcp_ipv4.c  
如果内核不认相对路径的话, 请使用绝对路径.  
```  
The third part is optional if the file name part was given. It identifies the line number in the source file, preceded by a ``:'' or ``+''.   
The line number is assumed to be an absolute line number if preceded by a ``:'',   
or relative to the entry of the function if preceded by a ``+''.   
All the lines in the function can be matched with ``:*''.  函数所有行用:*表示  
A range of lines x through y can be matched with ``:x-y''. 行范围用:x-y表示.  
```  
第三个部分是第二部分的suffix, 如果没有第二部分的话就没有第三部分.  
```  
第三部分指定行号.以 :或者+开头.  
:表示指定的行号  
+表示offset多少行, 相对行号.  
Alternately, specify PATTERN as a numeric constant to indicate a relative module address or an absolute kernel address.  
```  
最后, PATTERN可以用模块地址或者内核地址来填充.  
一般用statement探针时可以指定行号或者*代表这个函数中的所有行, 在这种情况下第一部分最好指定函数.  
例如 :   
```  
probe kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:*")  
```  
这个探针会对net/ipv4/tcp_ipv4.c中函数tcp_v4_connect的所以行触发 .   
```  
[root@db-172-16-3-39 ~]# stap -e 'probe kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:*") {printf("%s, %d, %d, %s, %s\n", pp(), pid(), cpu(), $$vars, $sk$$.$uaddr$$.$addr_len$$.$inet$$.$tp$$.$usin$$.$rt$$.$daddr$$.$nexthop$$.$tmp$$.$err$$.$inet_opt$$);}'  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:171"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=0x10 inet=? tp=? usin=? rt=? daddr=0xffff8101 nexthop=? tmp=? err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:174"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=0x10 inet=? tp=? usin=? rt=? daddr=0xffff8101 nexthop=? tmp=0xffffffffffffff9f err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:186"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0x0 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:192"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0x0 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:197"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0x0 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:198"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0x0 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:200"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0x0 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:201"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0x0 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:202"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0x0 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:211"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0x0 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:220"), 5847, 3, peer=0x0 sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0xffffffffa82d1bd8 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:226"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0xffffffffa82d1bd8 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:229"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0xffffffffa82d1bd8 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  
kernel.statement("tcp_v4_connect@net/ipv4/tcp_ipv4.c:230"), 5847, 3, sk=0xffff81012d2146c0 uaddr=0xffff8100a82d1ec8 addr_len=? inet=? tp=? usin=? rt=0xffff81012dfaf200 daddr=0x270310ac nexthop=0x270310ac tmp=0xffffffffa82d1bd8 err=? inet_opt=?, {.__sk_common={.skc_family=2, .skc_state='\a', .skc_reuse='\000', .skc_bound_dev_if=0, .skc_node={.next=0x0, .pprev=0x0}, .skc_bind_node={.next=0x0, .pprev=0x0}, .skc_refcnt={.counter=1}, .skc_hash=0, .skc_prot=0xffffffff80370780}, .sk_shutdown=0, .sk_no_check=0, .sk_userlocks=0, .sk_protocol='\006', .sk_type=1, .sk_rcvbuf=87380, .sk_lock={.slock={.raw_lock={.slock=1}}, .owner=0x1, .wq={.lock={.raw_lock={.slock=1}}, .task_list={.next=0xffff81012d214718, .prev=0xffff81012d214718}}}, .sk_sleep=0xffff8100b060  