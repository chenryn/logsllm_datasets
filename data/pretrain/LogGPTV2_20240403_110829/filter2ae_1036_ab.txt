              let test_value;
              /**
               * case值
               */
              if (test){
                test_value = test.value;
              }
              else{
                test_value = 'default_case';
              }
              /**
               * 获取所有的case下语句
               */
              let statement_array = [];
              for (let i of consequent)
              {
                /**
                 * 丢弃continue语句
                 */
                if (types.isContinueStatement(i)) {
                  continue;
                }
                statement_array.push(i)
              }
              case_map[test_value] = statement_array;
            }
            /**
             * 根据array执行顺序拼接case语句
             */
            for (let i of array){
              tmp_array = tmp_array.concat(case_map[i]);
            }
            if (case_map.hasOwnProperty('default_case')) {
              tmp_array = tmp_array.concat(case_map['default_case'])
            }
            //替换节点
            path.replaceWithMultiple(tmp_array);
            /**
             * 手动更新scope
             */
            path.scope.crawl();
          }
        }
        //调用插件，处理待处理 js ast 树
        traverse(ast, visitor);
上面时AST处理的核心代码，转换后如下
                var array = '4|3|8|5|4|0|2|3'.split('|'),
            index = 0;
        console.log('This is case 4');
        console.log('This is case 3');
        console.log('This is case 8');
        console.log('This is case 5');
        console.log('This is case 4');
        console.log('This is case 0');
        console.log('This is case 2');
        console.log('This is case 3');
        console.log('This is case [default], exit loop.');
当然其它的控制流平坦化也是可以还原的，有兴趣的可以自己探索，有问题可以探讨交流。
## 反调试
​ 代码混淆只能给攻击者增加代码阅读的难度，但是如果进行动态调试分析结合本地静态代码分析还是可以找到代码关键逻辑。那么如何防调试就是很重要的一点。
​ 下面从JS调试的攻防角度做一个统计
攻击手法 | 防御手法  
---|---  
控制台打开 | 控制台快捷删除，宽度检测  
控制台调试器打开 | debugger  
控制台输出 | 控制台清空，内置函数重写  
控制台打断点 | scope检测、debugger  
控制台调用DOM事件 | 堆栈检测  
函数、对象属性修改 | 函数防劫持、对象冻结  
NodeJS本地调式分析 | 代码格式化检测  
### 控制台
#### 打开
删除打开控制台的快捷键阻止控制台打开。
绕过：从菜单启动开发者工具。
    window.addEventListener('keydown', function(event){ 
        console.log(event);
        if (event.key == "F12" || ((event.ctrlKey || event.altKey) && (event.code == "KeyI" || event.key == "KeyJ" || event.key == "KeyU"))) {
            event.preventDefault(); 
            return false;
        }
    });
    window.addEventListener('contextmenu', function(event){ 
        event.preventDefault();
        return false;
    });
宽度检测判断窗口是否变化。可能会存在误检测的情况，需要注意。
    (function () {
        'use strict';
        const devtools = {
            isOpen: false,
            orientation: undefined
        };
        const threshold = 160;
        const emitEvent = (isOpen, orientation) => {
            let string = "DevTools are " + (isOpen ? "open" : "closed") + "";
            console.log(string);
            document.write(string);
        };
        setInterval(() => {
            const widthThreshold = window.outerWidth - window.innerWidth > threshold;
            const heightThreshold = window.outerHeight - window.innerHeight > threshold;
            const orientation = widthThreshold ? 'vertical' : 'horizontal';
            if (
                !(heightThreshold && widthThreshold) &&
                ((window.Firebug && window.Firebug.chrome && window.Firebug.chrome.isInitialized) || widthThreshold || heightThreshold)
            ) {
                if (!devtools.isOpen || devtools.orientation !== orientation) {
                    emitEvent(true, orientation);
                }
                devtools.isOpen = true;
                devtools.orientation = orientation;
            } else {
                console.log(devtools.isOpen);
                if (devtools.isOpen) {
                    emitEvent(false, undefined);
                }
                devtools.isOpen = false;
                devtools.orientation = undefined;
            }
        }, 500);
        if (typeof module !== 'undefined' && module.exports) {
            module.exports = devtools;
        } else {
            window.devtools = devtools;
        }
    })();
#### 调试器
开发者工具打开之后，需要选择调试器功能进行调试分析。通过设置`debugger`来阻止调试器调试。
  1. 定时debugger
    function debug() {
        debugger;
        setTimeout(debug, 1);
    }
    debug();
这种`debugger`会一直停住，对调试影响很大。
  1. 时间差debugger
        addEventListener("load", () => {
        var threshold = 500;
        const measure = () => {
            const start = performance.now();
            debugger;
            const time = performance.now() - start;
            if (time > threshold) {
                document.write("DevTools were open since page load");
            }
        }
        setInterval(measure, 300);
    });
由于`debugger`会停止使调试器停止，可以通过计算时间差来判断时否打开调试器。还可以单独时间差进行检测，`debugger`放在其它地方。
绕过：借助的调试器的"条件断点"、'"Never pause here"'功能。
#### 输出
清空控制台的打印，可以避免攻击者修改代码打印对象等。
    function clear() {
        console.clear();
        setTimeout(clear, 10);
    }
    clear();
绕过：对于直接在控制台打印变量没有影响，并且调试时可以直接查看变量。
#### 断点调试
如何去检测攻击者是否在打断点调试，有两种思路，一种是通过时间来检测，另外一种是依靠scope来检测。两种都有各自的问题。
  1. 时间检测断点调试
        var timeSinceLast;
    addEventListener("load", () => {
        var threshold = 1000;
        const measure = () => {
            if (!timeSinceLast) {
                timeSinceLast = performance.now();
            }
            const diff = performance.now() - timeSinceLast;
            if (diff > threshold) {
                document.write("A breakpoint was hit");
            }
            timeSinceLast = performance.now();
        }
        setInterval(measure, 300);
    });
当页面加载完成时，执行函数，定义一个时间基线，检测代码执行时间差是不是超过时间基线，一旦存在断点，必然会超过时间基线，那么就检出断点调试。但这里有个问题是如果浏览器执行代码的时间差也超过时间基线也会被检出，也就是误检。这种情况出现的机率还挺高，如果业务前端比较复杂（现在一般都是），使用性能不好的浏览器就会出现误检。
    1. scope检测
                function malicious() {
            const detect = (function(){
                const dummy = /./;
                dummy.toString = () => {
                    alert('someone is debugging the malicious function!');
                    return 'SOME_NAME';
                };
                return dummy;
            }());
        }
        function legit() {
            // do a legit action
            return 1 + 1;
        }
        function main() {
            legit();
            malicious();
        }
        debugger;
        main();
变量在被定义之后，调试器在断点执行的时候获取其scope，从而触发toString函数。浏览器的兼容性是这个方法的缺陷。
#### 事件调用
攻击者经常利用控制台执行事件调用，例如通过获取按钮元素后，点击，提交用户名和密码登录。函数堆栈就可以检测出这种情况。
    function test(){
                console.log(new Error().stack); //Chrome、Firefox
                IE 11
                 try {
                     throw new Error('');
                 } catch (error) {
                    stack = error.stack || '';
                 }
                 console.log(stack); 
                console.log(1);
            }
            test()
  * Firefox
  * Chrome
从Firefox和Chrome的结果可以看出来，代码自执行的堆栈和控制台执行的堆栈是不同的。
#### 函数、对象属性修改
攻击者在调试的时，经常会把防护的函数删除，或者把检测数据对象进行篡改。可以检测函数内容，在原型上设置禁止修改。
    // eval函数
    function eval() {
        [native code]
    }
    //使用eval.toString进行内容匹配”[native code]”，可以轻易饶过
    window.eval = function(str){
            /*[native code]*/
            //[native code]
            console.log("[native code]");
        };
    //对eval.toString进行全匹配，通过重写toString就可以绕过
    window.eval = function(str){
            //....
        };
        window.eval.toString = function(){
            return `function eval() {
                [native code]
            }`
        };
    //检测eval.toString和eval的原型
    function hijacked(fun){
            return "prototype" in fun || fun.toString().replace(/\n|\s/g, "") != "function"+fun.name+"(){[nativecode]}";
        }
    //设置函数属性之后，无法被修改
    Object.defineProperty(window, 'eval', {
            writable: false,configurable: false,enumerable: true
        });
### NodeJS调试
攻击者在本地分析调试时需要把代码进行格式化后才能够分析。
    //格式化后
    function y() {
        var t = (function() {
            var B = !![];
            return function(W, i) {
                var F = B ? function() {
                    if (i) {
                        var g = i['apply'](W, arguments);
                        i = null;
                        return g;
                    }
                } : function() {};
                B = ![];
                return F;
            };
        }());
        var l = t(this, function() {
            return l['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](l)['search']('(((.+)+)+)+$');
        });
        l();
        console['log']('aaaa');
        console['log']('ccc');
    };
    y();
    function Y() {
        console['log']('bbbbb');
    };
    Y();
    //格式化前
    function y(){var t=(function(){var B=!;
执行格式化后的代码会出现递归爆炸的情况，因为匹配了换行符。
# 结语
* * *
本文只列举了一些常见的前端JS防破解手段，还有一些更高级的手段，例如：自定义编译器、WebAssembly、浏览器特性挖掘等。结合自身的业务合理的使用代码混淆和反调试手法，来保证业务不被恶意分析，避免遭到爬虫的危害。