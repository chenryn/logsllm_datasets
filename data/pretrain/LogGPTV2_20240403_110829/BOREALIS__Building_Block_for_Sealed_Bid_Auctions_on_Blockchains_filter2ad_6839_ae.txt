5 Zero-Knowledge Tools
In the following, we present details about the various ZK proofs used within
the paper. The framework by Groth and Sahai [36] allows proving multi-scalar
equations (see Equation 1) in ZK. So, for each proof we want to provide, we
reformulate all properties to prove as a set of such multi-scalar equations. We
then prove each set of equations using the approach in [36]. If not stated dif-
ferently, the output of our proofs below is simply the output of corresponding
Groth and Sahai proofs of our equations.
5.1 Proving a Bit (Proof Bit)
Party P proves that a previously committed integer v ∈ Zp is either 0 ∈ Zp or
1 ∈ Zp by showing that v·(1−v) = 0, i.e., v = v2. Using additively homomorphic
20
Elgamal encryption c = Epk(v), P will show plaintext equivalence of ciphertexts
c and c(cid:48) = v · c in ZK. However, P cannot simply multiply c with secret v and
publish result c(cid:48), as this would leak whether or not v = 0. Therefore, the idea
is to randomize c(cid:48) at the same time as multiplying it by v. P chooses random
$← Zp and computes c(cid:48)[0] = v· c[0] + r·P1, c(cid:48)[1] = v· c[1] + r· pkP for public key
r
pkP . The remaining plaintext equivalence proof is rather standard and proves
an ECDLP, namely P proves that skP · (c(cid:48)[0]− c[0]) = c(cid:48)[1]− c[1] for private key
skP .
multi-scalar equations over G1.
So, applying the Groth and Sahai framework, P proves the following three
1. Correctness of c(cid:48)[0]
secret: y1 = v, y2 = r
public: γ1,1 = c[0], γ1,2 = P1, t = c(cid:48)[0]
2. Correctness of c(cid:48)[1]
secret: y1 = v, y2 = r
public: γ1,1 = c[1], γ1,2 = pkP , t = c(cid:48)[1]
3. c, c(cid:48) plaintext equivalence
secret: y = skP
public: γ1 = c(cid:48)[0] − c[1], t = c(cid:48)[1] − c[1]
ProofBit comprises the Groth and Sahai proofs for these three equations
together with c(cid:48) and commitment Com(r).
5.2 Proving Encryption (Proof ECDLP, Proof Enc)
Party P proves that previously committed input integer v (for example: a bit)
and its public key matches ciphertext c. The following equations and all re-
maining ones in this section are Groth and Sahai’s multi-scalar equations over
G1.
First, P proves that their private key skP matches their public key pkP .
This is just a ZK proof of knowledge of exponent for ECDLP.
public: γ1 = P1, t = pkP
secret: y = skP
P now proves correctness of encryption.
1. Correctness of EpkP (v)[0]
secret: y = r
public: γ1 = P1, t = EpkP (v)[0]
2. Correctness of EpkP (v)[1]
secret: y1 = r, y2 = v
public: γ1,1 = pkP , γ1,2 = P1, t = EpkP (v)[1]
21
5.3 Proving DGK (Proof DGK)
that vi,u − vj,u + 1 +(cid:80)(cid:96)
Pi proves that secret ciphertexts c1, . . . , c(cid:96) are encrypting DGK with their secret
input vi,1, . . . , vi,(cid:96) and Pj’s public ciphertexts EpkPj
(vj,(cid:96)). To
prove DGK in the clear, remember that Pi would have to show for u ∈ {1, . . . , (cid:96)}
δ=u+1(vi,δ + vj,δ −
2 · vi,δ · vj,δ). In our Elgamal-encrypted domain, we therefore have:
δ=u+1 vi,δ ⊕ vj,δ = vi,u − vj,u + 1 +(cid:80)(cid:96)
(vj,1), . . . , EpkPj
(cid:96)(cid:88)
δ=u+1
(vj,δ)[0])
cu[0] = − EpkPj
(vj,u)[0] +
(EpkPj
(vj,δ)[0]
− 2 · vi,δ · EpkPj
cu[1] =vi,u · P1 − EpkPj
(vj,u)[1] + P1 +
(vj,δ)[1] − 2 · vi,δ · EpkPj
+ EpkPj
(cid:96)(cid:88)
(vi,δ · P1
δ=u+1
(vj,δ)[1]).
We rearrange both equations and get
(cid:96)(cid:88)
cu[0] +
2 · vi,δ · EpkPj
(vj,δ)[0] = −EpkPj
(vj,u)[0] +
δ=u+1
cu[1] − vi,u · P1 − (cid:96)(cid:88)
vi,δ · P1 +
(cid:96)(cid:88)
δ=u+1
δ=u+1
2 · vi,δ · EpkPj
= −EpkPj
(vj,u)[1] + P1 +
(cid:96)(cid:88)
δ=u+1
EpkPj
(vj,δ)[0]
(vj,δ)[1]
(cid:96)(cid:88)
EpkPj
(vj,δ)[1].
Note that the right-hand sides contain only public information, while the left-
hand sides contain secret information. We therefore derive Groth and Sahai’s
representation as follows:
δ=u+1
1. Correctness of cu[0]
secret: x = cu[0], yu+1 = vi,u+1, . . . , y(cid:96) = vi,(cid:96)
public: γ1,u+1 = 2 · EpkPj
1, Γ = 0, t = −EpkPj
So, the multi-scalar equations are of type(cid:80)(cid:96)
(vj,u)[0] +(cid:80)(cid:96)
δ=u+1 EpkPj
(vj,δ)[0]
l=u+1 γ1,l · yl + γ2 · x = t.
(vj,u+1)[0], . . . , γ1,(cid:96) = 2 · EpkPj
(vj,(cid:96))[0], γ2 =
2. Correctness of cu[1]
u+1 = vi,u+1, . . . , y(cid:48)
secret: x = cu[1], yu = vi,u, y(cid:48)
vi,(cid:96)
public: γ1,u = −P1, γ(cid:48)
2·EpkPj
1,u+1 = −P1, . . . , γ(cid:48)
(vj,(cid:96))[1], γ2 = 1, Γ = 0, t = −EpkPj
Here, multi-scalar equations are of type γ1,u · yu +(cid:80)(cid:96)
(cid:96) = vi,(cid:96), y(cid:48)(cid:48)
u+1 = vi,u+1, . . . , y(cid:48)(cid:48)
(cid:96) =
1,(cid:96) = −P1, γ(cid:48)(cid:48)
(vj,u)[1]+P1+(cid:80)(cid:96)
1,u+1 = 2·EpkPj
l +(cid:80)(cid:96)
δ=u+1 EpkPj
(vj,δ)[1]
l ·
l=u+1 γ(cid:48)(cid:48)
l=u+1 γ(cid:48)
1,l · y(cid:48)
(vj,u+1)[1], γ(cid:48)(cid:48)
1,(cid:96) =
y(cid:48)(cid:48) + γ2 · x = t.
22
5.4 Proving Permutation Networks (Proof Blind, Proof Shuﬄe,
Proof Shuﬄe∗)
A crossbar switch is a simple operator with two inputs i1, i2 and two outputs
o1, o2. The switch either assigns output o1 to i1 and o2 to i2, or the other
way around o1 = i2 and o2 = i1. Basically, the switch ﬂips the input or not.
Crossbar switches are building blocks for permuting larger input sequences.
2 , each for n
2 , and the other output is routed to the second PN n
To randomly permute an input of n elements, we construct a Beneˇs [10]
permutation network PNn out of crossbar switches. The idea to permute n
elements is to recursively use 2 permutation networks PN n
2 elements.
More speciﬁcally, the n elements of the input are grouped by two and input to n
2
crossbar switches. One output of each switch is routed to the ﬁrst permutation
network PN n
2 permutation
network. The output of the two PN n
2 permutation networks is then connected
to a ﬁnal sequence of n
2 crossbar switches. That is, the outputs of the ﬁrst
PN n
2 switches, and
the outputs of the second PN n
2 permutation network are routed to the second
inputs of switches. The recursion ends with PN2 permutation networks which
are again crossbar switches.
requires n · log n − n
2 permutation network are routed to the ﬁrst inputs of the n
To permute an input sequence of n elements, a Beneˇs permutation network
2 crossbar switches.
5.4.1 Zero-Knowledge Proof Setup
Party Pi wants to prove in ZK correctness of an n element shuﬄe. Speciﬁcally in
this paper, Pi has as an input a sequence of n additively homomorphic Elgamal
ciphertexts c1, . . . , cn and outputs a re-encrypted shuﬄe Cπ(1), . . . , Cπ(n). Note
that in contrast to the typical scenario where both sequences of ciphertexts cj
and Cj are public, we are targeting the situation where inputs c are private,
i.e., Pi has only published commitments Com(cj) to them, and just the C are
public.
commitments Com(c(cid:48)
commitments are blinded versions of the cj.
Pi proves in two steps: ﬁrst, Pi computes blinded versions c(cid:48)
j) to them, and proves in ZK that the c(cid:48)
j, publishes
j behind these
The second step is then to randomly shuﬄe the c(cid:48)
j and prove correctness of
the shuﬄe by using a permutation network. The idea here is that for any n, the
recursive layout of a permutation network is ﬁxed. So, for a party Pi to prove
correctness of an n element shuﬄe in ZK, it is suﬃcient to prove correctness of
all n · log n − n
2 internal crossbar switches.
5.4.2 Proving Blinding (ProofBlind)
First, we will use the previously introduced blinding of ciphertexts instead of re-
encryption. Otherwise, decryption will leak details about the DGK evaluation.
Let c(cid:48) be a blinded additively homomorphic Elgamal ciphertext of c com-
puted as above. Commitments Com(c), Com(c(cid:48)) for ciphertexts and a commit-
ment Com(R) for a random string R have been published. Pi proves in ZK
23
that ciphertext c(cid:48) is a blinded version of ciphertext c1. The Groth and Sahai
representation is:
1. Correctness of c(cid:48)[0]
secret: x1 = c(cid:48)[0], x2 = c[0], y = R,
public: γ1 = O, γ2,1 = 1, γ2,2 = 0, Γ =(cid:0) 0 −1
public: γ1 = O, γ2,1 = 1, γ2,2 = 0, Γ =(cid:0) 0 −1
secret: x1 = c(cid:48)[1], x2 = c[1], y = R,
2. Correctness of c(cid:48)[1]
0
0
0
0
(cid:1), t = O
(cid:1), t = O
Note that Γ is non-zero, so our multi-scalar equations combine secret ele-
ments from G1 and Zp. Party Pi also has to prove that R (cid:54)= 0, but this is
straightforward: for some point ˆR (cid:54)= O, Pi reveals R · ˆR, which has to be (cid:54)= O,
and proves correctness of this product with a ProofECDLP.
5.4.3 Proving a Crossbar Switch (ProofShuﬄe)
Pi constructs a single ZK crossbar switch with inputs i1, i2 and outputs o1, o2. In
our case, the inputs are two additively homomorphic Elgamal ciphertexts c(cid:48)
1, c(cid:48)
2
which the switch will randomly permute and then output as C1, C2. Using the
Groth and Sahai framework, Pi will prove in ZK that the two output ciphertexts
C1, C2 are a permutation of input c(cid:48)
2. As output C1, C2 of one crossbar
switch serves as input for two other crossbar switches in a permutation network,
neither c(cid:48)
2 (output of blinding above) nor C1, C2 are public. Instead, Pi only
publishes commitments to them. Only the last sequence of crossbar switches
reveals output ciphertexts which another party Pj can ﬁnally decrypt.
We realize a crossbar switch by ﬂipping input depending on secret random
bit β ∈ {0, 1}. To be able to use β, Pi ﬁrst publishes commitment Com(β) and
proves that β ∈ {0, 1}, see Section 5.1. Speciﬁcally, Pi proves that C1, C2 is a
permutation of secret c(cid:48)
1, c(cid:48)
1, c(cid:48)
1, c(cid:48)
2:
C1[0] = β · c
1[0] + (1 − β) · c
(cid:48)
(cid:48)
2[0]
C1[1] = β · c
1[1] + (1 − β) · c
(cid:48)
(cid:48)
2[1]
C2[0] = (1 − β) · c
1[0] + β · c