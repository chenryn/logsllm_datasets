# Towards a Security Benchmark for Database Management Systems

**Authors:**
- Marco Vieira
- Henrique Madeira

**Affiliation:**
- CISUC â€“ University of Coimbra
- 3030 Coimbra, Portugal
- Email: [Insert Email]

## Abstract
Organizations face significant challenges in protecting their data from unauthorized access and malicious corruption. Database Management Systems (DBMS) are the core of modern information systems, serving as the last line of defense against unauthorized data access. Despite the critical role of DBMS in data security, there is currently no practical method to evaluate or compare the security features of these systems. This paper introduces an approach to characterize the security mechanisms in both DBMS and real database installations, using a set of security classes. The proposed method is versatile and can be applied by system integrators, database administrators, and end-users.

## 1. Introduction
Information is a vital resource for any organization, and its management is crucial for success. One of the primary concerns for system managers is the protection of data from unauthorized access and malicious attacks. With the rapid growth of the internet, security threats have become a critical issue for all information infrastructures.

Databases are central to most organizations' information infrastructure, and database administrators (DBAs) play a key role in maintaining their security. DBAs are responsible for managing various aspects of the DBMS environment, including performance, recovery, and security. Major DBMS products, such as Oracle Database Server, Sybase Adaptive Server, and Informix Dynamic Server, are highly complex and require diligent administration.

Database security aims to protect against:
1. Unauthorized attempts to access private data.
2. Loss or corruption of critical data due to malicious actions.
3. Undue delays in accessing or using data.
4. Malicious interferences that may cause denial of service.

The main goal of DBMS security is to protect the system and data from intrusion. Security vulnerabilities can be internal (related to the configuration and implementation of security mechanisms) or external (dependent on the intention and capability of attackers). Security encompasses several properties, including confidentiality, authenticity, integrity, and availability.

To achieve these properties, various security mechanisms have been developed over the years, such as secure channels, authentication, protection and authorization, and auditing and intrusion detection. While DBMS have a long history of incorporating high-security features, the effectiveness of these mechanisms often depends on the DBA's configuration. There is currently no practical way to evaluate the effectiveness of these security mechanisms, which is the focus of this paper.

The database industry has established benchmarks for performance evaluation, but security benchmarking has been largely absent. This paper proposes a practical approach to characterize the security mechanisms in DBMS and real database installations, using a set of security classes. The proposed method is illustrated through a comparative analysis of two DBMS: Oracle 9i and PostgreSQL 7.3.

## 2. Assessing Security in DBMS
A typical database application is a client-server or multi-tier system where users connect to a DBMS via a client application or a web browser. To access the server, users must pass through an authentication process, which can be internal (using usernames and passwords) or external (using authentication servers like Kerberos or NTS).

DBMS implement security mechanisms based on user privileges, which control the actions users can perform. These privileges include system privileges (e.g., creating users, procedures, tables, indexes) and object privileges (e.g., selecting, deleting, updating, inserting data).

Sophisticated DBMS also provide encryption mechanisms for secure data communication and storage. Auditing mechanisms record all user actions, allowing for a posteriori analysis to detect unauthorized accesses or anomalous usage.

Data in a typical database application varies in criticality, from non-critical to highly protected. The security mechanisms in a DBMS should protect data according to its criticality level. The main goal of DBMS security is to protect the system and data from intrusion, even if an intruder gains access to the machine running the DBMS.

### 2.1. Data Criticality Levels
To understand the different levels of data criticality and how they should be protected, we analyzed several typical database applications. Based on interviews with DBAs and the analysis of data models, we propose the following data criticality levels:

- **Level 1: Non-Critical Data** - Data that does not represent confidential information and can be easily recovered if modified or destroyed (e.g., zip codes, lists of countries/cities, car manufacturers).
- **Level 2: Protected Against Unauthorized Modification** - Data that must be protected against unauthorized modification but not necessarily against unauthorized read (e.g., product lists in an online retail store).
- **Level 3: Protected Against Unauthorized Read and Modification** - Most data in typical database applications falls into this category (e.g., clients' orders, customers' information, employees' information).
- **Level 4: Highly Critical Data** - Data that must be extremely protected against unauthorized read and modification.

## 3. Proposed Security Benchmark Approach
To assess the security mechanisms in DBMS, we propose a classification system based on security classes ranging from Class 0 to Class 5, with each class having a set of security requirements. Systems are classified according to the security requirements they satisfy. Additionally, we introduce a metric called "Security Requirements Fulfillment" (SRF) to measure how well a system meets the security requirements on a scale of 0 to 100.

This approach can be used in two scenarios:
1. **Comparing Different DBMS Products**: End-users, system vendors, and researchers can use this method to compare the security features of different DBMS in a realistic way.
2. **Assessing Security in Real Database Installations**: DBAs can use this method to evaluate the security of existing database installations and find the best configuration based on the criticality of the stored data.

## 4. Comparative Analysis of Two DBMS
We apply our proposed security benchmark approach to two DBMS: Oracle 9i and PostgreSQL 7.3. This comparative analysis demonstrates the practical utility of our method in evaluating and comparing the security features of different DBMS.

## 5. Conclusion and Future Work
This paper introduces a practical approach to characterize and evaluate the security mechanisms in DBMS and real database installations. The proposed method uses a set of security classes and a complementary metric to assess the security requirements fulfillment. Future work will focus on refining the security classes and expanding the scope of the benchmark to include more DBMS and real-world applications.

---

**References:**
1. [Citation]
2. [Citation]
3. [Citation]
4. [Citation]
5. [Citation]
6. [Citation]
7. [Citation]
8. [Citation]
9. [Citation]
10. [Citation]
11. [Citation]