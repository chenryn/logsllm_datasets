1: Let Π = (A1, . . . , Ak), where Aj = (lj , qj , dj , gj ) for
j = 1, . . . , k;
λj = lj; ρj = ρj−1 + qj; δj = dj;
if δj = rgt then
else {δj = dwn}
γj = h(λj , ρj , gj , γj−1);
ξj = ξj−1 + qj;
γj = h(λj , ρj , γj−1, gj );
ξj = ξj−1;
2: λ0 = 0; ρ0 = 1; γ0 = T ; ξ0 = 0;
3: for j = 1, . . . , k do
4:
5:
6:
7:
8:
9:
10:
11:
end if
12: end for
13: if γk 6= Mc then
14:
15: else if ρk − ξk 6= i then
16:
17: else {γk = Mc and ρk − ξk = i}
18:
19: end if
return reject;
return reject;
return accept;
LEMMA 1. If T is the correct representation of block i and se-
quence Π of length k is the correct proof for T , then the following
properties hold for the values computed in iteration k of the for-
loop of Algorithm 2:
1. Value ρk is equal to the number of nodes at the bottom level
of the skip list, i.e., the number n of blocks of the ﬁle;
2. Value ξk is equal to n − i; and
3. Value γk is equal to the label of the start node of the skip list.
3.4 Updates
The possible updates in our DPDP scheme are insertions of a
new block after a given block i, deletion of a block i, and modiﬁ-
cation of a block i.
To perform an update, the client issues ﬁrst query atRank(i)
(for an insertion or modiﬁcation) or atRank(i − 1) (for a dele-
tion), which returns the representation T of block i or i − 1 and
its proof Π′. Also, for an insertion, the client decides the height of
the tower of the skip list associated with the new block. Next, the
client veriﬁes proof Π′ and computes what would be the label of
the start node of the skip list after the update, using a variation of
the technique of [24]. Finally, the client asks the server to perform
the update on the skip list by sending to the server the parameters
of the update (for an insertion, the parameters include the tower
height).
We outline in Algorithm 3 the update algorithm performed by
the server (performUpdate) and in Algorithm 4 the update algo-
rithm performed by the client (verUpdate). Input parameters T ′
and Π′ of verUpdate are provided by the server, as computed by
performUpdate.
Since updates affect only nodes along a veriﬁcation path, these
algorithms run in expected O(log n) time whp and the expected
size of the proof returned by performUpdate is O(log n) whp.
d(vj) =(rgt
q(vj) =8>>>>>:
g(vj) =8>>>>>:
r(rgt(vj))
1
r(dwn(vj))
r(rgt(vj))
f (rgt(vj))
x(vj)
f (dwn(vj))
f (rgt(vj))
if j = 1
if j > 1 and l(vj) = 0
if j > 1, l(vj) > 0 and d(vj) = rgt
if j > 1, l(vj) > 0 and d(vj) = dwn
if j = 1
if j > 1 and l(vj) = 0
if j > 1, l(vj) > 0 and d(vj) = rgt
if j > 1, l(vj) > 0 and d(vj) = dwn
,
.
The proof for block i with data T (i) is the sequence Π(i) =
(A(v1), . . . , A(vk)) where A(v) = (l(v), q(v), d(v), g(v)). So
the proof consists of tuples associated with the nodes of the ver-
iﬁcation path. Boolean d(v) indicates whether the previous node
is to the right or below v. For nodes above the bottom level, q(v)
and g(v) are the rank and label of the successor of v that is not on
the path. The proof Π(5) for the skip list of Figure 1 is shown in
Table 2. Due to the properties of skip lists, a proof has expected
size O(log n) with high probability (whp).
Algorithm 1: (T , Π) = atRank(i)
1: Let v1, v2, . . . , vk be the veriﬁcation path for block i;
2: return representation T of block i and proof
Π = (A(v1), A(v2), . . . , A(vk)) for T ;
3.3 Veriﬁcation
After receiving from the server the representation T of block i
and a proof Π for it, the client executes Algorithm 2 to verify the
proof using the stored metadata Mc.
Algorithm 2 iteratively computes tuples (λj, ρj, δj, γj) for each
node vj on the veriﬁcation path plus a sequence of integers ξj. If
the returned block representation T and proof Π are correct, at each
iteration of the for-loop, the algorithm computes the following val-
ues associated with a node vj of the veriﬁcation path:
• integer λj = l(vj), i.e., the level of vj;
• integer ρj = r(vj), i.e., the rank of vj;
• boolean δj, which indicates whether the previous node vj−1
is to the right or below vj;
• hash value γj = f (vj), i.e., the label of vj;
• integer ξj, which is equal to the sum of the ranks of all the
nodes that are to the right of the nodes of the path seen so far,
but are not on the path.
217Algorithm 3: (T ′, Π′) = performUpdate(i, T , upd)
set j = i;
set j = i − 1;
1: if upd is a deletion then
2:
3: else {upd is an insertion or modiﬁcation}
4:
5: end if
6: set (T ′, Π′) = atRank(j);
7: if upd is an insertion then
8:
9: else if upd is a modiﬁcation then
10:
11: else {upd is a deletion}
12:
13: end if
14: update the labels, levels and ranks of the affected nodes;
15: return (T ′, Π′);
insert element T in the skip after the i-th element;
replace with T the i-th element of the skip list;
delete the i-th element of the skip list;
Algorithm 4:
{accept, reject} = verUpdate(i, Mc, T , upd, T ′, Π′)
set j = i;
set j = i − 1;
1: if upd is a deletion then
2:
3: else {upd is an insertion or modiﬁcation}
4:
5: end if
6: if verify(j, Mc, T ′, Π′) = reject then
7:
8: else {verify(j, Mc, T ′, Π′) = accept}
9:
return reject;
from i, T , T ′, and Π′, compute and store the updated label M ′
the start node;
return accept;
c of
10:
11: end if
4. DPDP SCHEME CONSTRUCTION
In this section, we present our DPDP I construction. First, we
describe our algorithms for the procedures introduced in Deﬁni-
tion 1. Next, we develop compact representatives for the blocks to
improve efﬁciency (blockless veriﬁcation). In the following, n is
the current number of blocks of the ﬁle. The logarithmic complex-
ity for most of the operations are due to well-known results about
authenticated skip lists [12, 25]. Most of the material of this section
also applies to the DPDP II scheme presented in Section 6.
4.1 Core construction
The server maintains the ﬁle and the metadata, consisting of an
authenticated skip list with ranks storing the blocks. Thus, in this
preliminary construction, we have T (b) = b for each block b. The
client keeps a single hash value, called basis, which is the label of
the start node of the skip list. We implement the DPDP algorithms
as follows.
• KeyGen(1k) → {sk, pk}: Our scheme does not require any keys
to be generated. So, this procedure’s output is empty, and hence
none of the other procedures make use of these keys;
• PrepareUpdate(sk, pk, F , info, Mc) → {e(F ), e(info), e(M )}:
This is a dummy procedure that outputs the ﬁle F and infor-
mation info it receives as input. Mc and e(M ) are empty (not
used);
c }:
c, PM ′
• PerformUpdate(pk, Fi−1, Mi−1, e(F ), e(info), e(M ))
→
Inputs Fi−1, Mi−1 are the previously
{Fi, Mi, M ′
stored ﬁle and metadata on the server (empty if this is the ﬁrst
run). e(F ), e(info), e(M ), which are output by PrepareUpdate,
are sent by the client (e(M ) being empty). The procedure up-
dates the ﬁle according to e(info), outputting Fi, runs the skip
list update procedure on the previous skip list Mi−1 (or builds the
skip list from scratch if this is the ﬁrst run), outputs the resulting
c, and the proof returned by
skip list as Mi, the new basis as M ′
c . This corresponds to calling Algo-
the skip list update as PM ′
rithm 3 on inputs a block index j, the new data T (in case of an
insertion or a modiﬁcation) and the type of the update upd (all
this information is included in e(info)). Note that the index j and
the type of the update upd is taken from e(info) and the new data
c = Π(j),
T is e(F ). Finally, Algorithm 3 outputs M ′
which are output by PerformUpdate. The expected runtime is
O(log n) whp;
c and PM ′
• VerifyUpdate(sk, pk, F , info, Mc, M ′
c, PM ′
c ) → {accept,
reject}: Client metadata Mc is the label of the start node of the
c is empty.
previous skip list (empty for the ﬁrst time), whereas M ′
The client runs Algorithm 4 using the index j of the update, Mc,
previous data T , the update type upd, the new data T ′ of the
c sent by the server as input (most of the
update and the proof PM ′
inputs are included in info). If the procedure accepts, the client
c (new and correct metadata has been computed).
sets Mc = M ′
The client may now delete the new block from its local storage.
This procedure is a direct call of Algorithm 4. It runs in expected
time O(log n) whp;
• Challenge(sk, pk, Mc) → {c}: This procedure does not need
any input apart from knowing the number of blocks in the ﬁle
(n). It might additionally take a parameter C which is the num-
ber of blocks to challenge. The procedure creates C random
block IDs between 1, . . . , n. This set of C random block IDs are
sent to the server and is denoted with c. The runtime is O(C);
• Prove(pk, Fi, Mi, c) → {P }: This procedure uses the last ver-
sion of the ﬁle Fi and the skip list Mi, and the challenge c sent
by the client. It runs the skip list prover to create a proof on the
challenged blocks. Namely, let i1, i2, . . . , iC be the indices of
the challenged blocks. Prove calls Algorithm 1 C times (with
arguments i1, i2, . . . , iC) and sends back C proofs. All these C
proofs form the output P . The runtime is O(C log n) whp;
• Verify(sk, pk, Mc, c, P ) → {accept, reject}: This function
takes the last basis Mc the client has as input, the challenge c
sent to the server, and the proof P received from the server. It
then runs Algorithm 2 using as inputs the indices in c, the meta-
data Mc, the data T and the proof sent by the server (note that T
and the proof are contained in P ). This outputs a new basis. If
this basis matches Mc then the client accepts. Since this is per-
formed for all the indices in c, this procedure takes O(C log n)
expected time whp.
The above construction requires the client to download all the chal-
lenged blocks for the veriﬁcation. A more efﬁcient method for rep-
resenting blocks is discussed in the next section.
4.2 Blockless veriﬁcation
We can improve the efﬁciency of the core construction by em-
ploying homomorphic tags, as in [2]. However, the tags described
here are simpler and more efﬁcient to compute. Note that it is pos-
sible to use other homomorphic tags like BLS signatures [5] as in
Compact POR [30].
We represent a block b with its tag T (b). Tags are small in
size compared to data blocks, which provides two main advantages.
First, the skip list can be kept in memory. Second, instead of down-
loading the blocks, the client can just download the tags. The in-
tegrity of the tags themselves is protected by the skip list, while the
tags protect the integrity of the blocks.
218In order to use tags, we modify our KeyGen algorithm to output
pk = (N, g), where N = pq is a product of two primes and g is
N . The public key pk is sent to the
an element of high order in Z∗
server; there is no secret key.
The tag T (b) of a block b is deﬁned by
the only difference between the two schemes is the authenticated
structure used for protecting the integrity of the tags.
We begin with the following lemma, which follows from the
two-party authenticated skip list construction (Theorem 1 of [24])
and our discussion in Section 3.
T (b) = gb mod N .
The skip list now stores the tags of the blocks at the bottom-level
nodes. Therefore, the proofs provided by the server certify the tags
instead of the blocks themselves. Note that instead of storing the
tags explicitly, the server can alternatively compute them as needed
from the public key and the blocks.
The Prove procedure computes a proof for the tags of the chal-
lenged blocks mij (1 ≤ i1, . . . , iC ≤ n denote the challenged
indices, where C is the number of challenged blocks and n is the
total number of blocks). The server also sends a combined block
j=1 ajmij , where aj are random values sent by the client
as part of the challenge. The size of this combined block is roughly
the size of a single block. Thus, we have a much smaller overhead
than for sending C blocks. Also, the Verify algorithm computes
the value
M =PC
T =