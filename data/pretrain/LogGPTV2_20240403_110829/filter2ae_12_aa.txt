# 前言
电气鼠靶场系统包含了常见的漏洞案例，有提示和代码案例。初学者可以通过查询资料等方式通过关卡，在试炼的过程学习漏洞原理和代码审计。  
为什么会想到编写电气鼠靶场系统呢？主要是以前入门的时候自己也搭过 pikachu 靶场进行练习。这是入门的好工具，使用的是 PHP
语言实现的。正巧我正在学习 Java 开发，脑子一热就开始编写这套系统。学Java半个月，编写这套系统也差不多花了半个月。
# 系统介绍
电气鼠靶场系统是一种带有漏洞的Web应用程序，旨在为Web安全渗透测试学习者提供学习和实践的机会。  
通过在靶场系统上进行实际漏洞攻击和利用，学习者可以更好地理解和掌握Web安全渗透测试的技术和方法，以及如何保护Web应用程序免受攻击。靶场系统的实际攻击模拟也有助于学习者提高他们的安全意识，了解常见的攻击手段和漏洞利用方式，从而更好地保护他们自己和他们所负责的Web应用程序。  
该靶场使用 Java 编写，使用 Tomcat + Mysql 的技术完成。可以通过 docker-compose 快速安装。  
项目链接：
# 案例编写思路
靶场中的案例一定是符合目前Web安全检测的测试用例的。针对一些常见的漏洞进行案例编写，不仅是对漏洞本身进行的一个思考，也是对安全开发的一个思考。漏洞是怎么产生的？需要知根知底。
## XSS 漏洞
XSS（跨站脚本攻击）是一种常见的Web安全漏洞，攻击者可以通过注入恶意脚本代码，实现对用户的攻击。在Java
Web开发中，以下业务代码可能存在XSS漏洞：
  1. 表单提交和查询结果的显示：在表单提交和查询结果的显示中，用户输入的数据没有经过过滤，直接显示在页面上，攻击者可以通过注入恶意脚本代码实现攻击。解决办法是对用户输入的数据进行HTML编码，可以使用Java自带的工具类或者第三方库来实现。 
  2. URL参数的传递：如果使用URL传递参数，攻击者可以通过注入恶意脚本代码实现攻击。解决办法是对URL参数进行编码，可以使用Java自带的工具类或者第三方库来实现。 
  3. 富文本编辑器：富文本编辑器中用户输入的内容可能包含HTML标签和脚本代码，攻击者可以通过注入恶意脚本代码实现攻击。解决办法是使用富文本编辑器自带的过滤器或者使用第三方库对用户输入的内容进行过滤。 
  4. JavaScript代码的编写：在编写JavaScript代码时，要注意防止XSS攻击，不要直接使用用户输入的数据作为JavaScript代码的参数，可以对用户输入的数据进行编码。 
XSS漏洞的原因是业务代码没有对用户输入的数据进行过滤和编码，攻击者可以通过注入恶意脚本代码实现攻击。为了防止XSS漏洞，需要在业务代码中对用户输入的数据进行过滤和编码。  
XSS攻击可以达到不同的目的，但大致上有以下几种：
  1. 窃取用户信息：攻击者可以通过注入恶意脚本代码获取用户的敏感信息，例如用户名、密码、Cookie等。
  2. 欺骗用户：攻击者可以通过注入恶意脚本代码修改页面内容，伪装成合法的页面或者提供虚假的信息，从而欺骗用户。
  3. 利用用户权限进行恶意操作：攻击者可以通过注入恶意脚本代码获取用户的权限，例如通过获取管理员的权限进行恶意操作。
  4. 传播病毒：攻击者可以通过注入恶意脚本代码，在用户访问网页时传播病毒。
### 开发思路
XSS攻击最终是在游览器客户端展示，其本身与HTML和JS息息相关。根据后端渲染、前后端分离、前端渲染的三种情况，也有不同的XSS展示效果。  
一种是前后端分离，在请求接口后返回的响应包设置了`ContentType`为`text/html`那么极有可能会产生漏洞。在实战中一般是 Jsonp
回调接口处会出现这种情况：
    http://xxx.xxxx.xxx/?callback=jQuery11130014313909482240961_1561597612526&lastpagetime=1559829276&_=1561602219158
这里的 `callback` 是可控的。一旦我们设置了返回数据包内容类型为`text/html`那么将会导致XSS反射型漏洞的产生。
    response.setContentType("text/html;charset=utf-8");
还有一种是后端渲染的情况。使用 JSP 或者其他模板语言引擎。例如：Thymeleaf、Velocity、FreeMarker。  
一般的JSP输出变量到HTML的写法可以这么写：
其他的模板语言有不同的写法，但只要是没有经过过滤直接输出到HTML页面中去的，游览器解析后就会造成XSS攻击。  
最后一种是前端渲染。有很多业务都可以使用前端完成，如今有很多前端的开发框架例如：React、Vue、Angular。尽管十分推荐使用类似`innerText`的方式显示数据，但会存在某些业务上无法避免的使用类似`innerHTML`的方法显示数据，一旦没有做好足够严格的数据校验，那么将会产生XSS漏洞。
    function generateNote(mes){
        return `
                   Note:${mes}`;
    }
    function submitText(){
        $("#notice")[0].innerHTML = generateNote("我不在乎你输入的是什么，就算是：" + $("#own-text")[0].value)
      }
我开发时没有选择使用框架，直接使用了原生JS ES6语法拼接字符串，并且大量使用`innerHTML`属性。  
如果想要减少XSS攻击的产生，我们可以使用`StringEscapeUtils`工具对用户输入的内容进行转义。  
代码来源：`com/pika/electricrat/xss/dto/XssServlet.java`
    public void getMarkData(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String content = request.getParameter("content");
        response.setContentType("text/html;charset=utf-8");
        response.getWriter().write("我不在乎你输入的是什么，就算是：" + StringEscapeUtils.escapeHtml(content));
    }
## 暴力破解
暴力破解（Brute
Force）是黑客常用的一种密码破解方法，其基本思想是不断尝试所有可能的密码组合，直到找到正确的密码为止。通常，黑客会使用自动化的脚本或工具来进行暴力破解攻击，从而加快密码破解的速度。  
具体来说，暴力破解攻击通常通过以下步骤实现：
  1. 枚举可能的密码：黑客会根据目标账户的相关信息，如用户名、生日、常用词汇等，生成一份可能的密码字典。
  2. 尝试所有可能的密码组合：黑客会使用自动化的工具，逐个尝试所有可能的密码组合，直到找到正确的密码为止。
  3. 破解成功：一旦黑客找到了正确的密码，就可以使用该密码访问目标账户，进而窃取敏感信息或者进行其他恶意行为。
### 开发思路
为了防止暴力破解攻击，通常采取以下措施：
  1. 强密码策略：要求用户设置复杂度较高的密码，如长度大于8个字符、包含大小写字母、数字和特殊字符等。
  2. 密码锁定策略：如果用户多次输入错误密码，可以暂时锁定用户账户，防止暴力破解攻击。
  3. 多因素认证：除了密码，还需要使用其他身份验证方式，如短信验证码、指纹识别、硬件令牌等，增加攻击者的破解难度。
  4. 安全监控和报警：对于异常的登录行为，及时进行监控和报警，以便尽早发现并阻止攻击行为的发生。
上面四种防御手段的维度都有所不同。主要在多因素认证上百花齐放，不同的网站采用不同的因素认证。比较常见的有以下几种，即包括但不限于。
  1. 图片验证码：常用于用户注册、登录等场景，要求用户输入图片中的验证码。
  2. 隐藏域验证码：将一个随机字符串放在表单中的一个隐藏域中，提交表单时验证字符串是否正确。
  3. 图片滑块验证码：将一张图片分成若干块，要求用户将某一块拖动到指定位置。
  4. 声音验证码：要求用户听取一段语音，并输入语音中的验证码。
**图片验证码**  
在开发中，主要实现了图片验证码和隐藏域验证码的功能。尽管图片验证码的作用十分有效，但我们仍然需要考虑到一些因素，例如图片验证码的不刷新、不过期或短期不过期、如果验证码生成算法不够复杂，可能被破解。如果验证码是纯数字或字母，可以使用机器学习等技术进行破解。  
代码来源：`com/pika/electricrat/burteforce/dto/UserServlet.java`
    public Boolean verificationImageCodeEasy(String text){
        ImageCodeEntity entity = new ImageCodeEntity(text);
        ImageCodeEntity res = icd.find(entity);
        return res != null;
    }
代码来源：`com/pika/electricrat/burteforce/dao/Impl/ImageCodeDaoImpl.java`
    @Override
    public ImageCodeEntity find(ImageCodeEntity entity) {
        try{
            String sql = "select * from " + entity.getSqlTableName() + " where text=?";
            return jt.queryForObject(sql, new BeanPropertyRowMapper<>(ImageCodeEntity.class), entity.getText());
        }
        catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }
这里我直接从数据库中通过验证码作为条件语句查询，如果查询到就通过，也就是说一旦生成的验证码足够多，就会导致验证码无效。所以我设置，每次获取验证码时都会清除已过期的验证码，验证码有效期5分钟。一般来说，图片验证码没有有效期——它是一次性的，所以你可以在这5分钟内进行暴力破解。  
**隐藏域验证码**  
实现思路是，生成随机的Token返回在页面中，提交登录请求的时候携带提交。Token生成在Session中，通过和用户输入的Token进行对比就能防止接口重发。但实际来说，使用Burp可以做到先获取Token再做登录行为，达到暴力破解的目的。  
代码来源：`com/pika/electricrat/burteforce/dto/UserServlet.java`
    // 登录时对比用户输入的Token
    @Api({RequestMethodType.POST})
    public Map loginWithToken(HttpServletRequest request, HttpServletResponse response){
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        String token = request.getParameter("token");
        HttpSession session = request.getSession();
        String v_token = session.getAttribute("token") != null ? String.valueOf(session.getAttribute("token")) : null;
        HashMap data = new HashMap<>();
        if (token == null || !token.equals(v_token)){
            data.put("VerificationStatus", false);
            return data;
        }
        session.removeAttribute("token");
        data.put("VerificationStatus", true);
        data.put("loginStatus", udi.login(username,password));
        return data;
    }
    // 获取Token
    @Api({RequestMethodType.GET})
    public Map getToken(HttpServletRequest request, HttpServletResponse response){
        String token = udi.getVerificationToken();
        HttpSession session = request.getSession();
        session.setAttribute("token", token);
        HashMap data = new HashMap<>();
        data.put("token", token);
        return data;
    }
其中`session.removeAttribute("token");`说明了，校验完Token后，该Token会被销毁。但如果攻击者能够获得表单的源代码，可以轻松获取隐藏域中的字符串，并提交伪造的表单。
## CSRF（跨域请求伪造）
CSRF（跨站请求伪造）攻击可能会导致攻击者获得您提供给用户的登录凭据。在CSRF攻击中，攻击者通过欺骗受害者浏览器发起一个跨站请求，该请求利用了受害者当前的登录状态并向攻击者指定的URL发送了一个请求。  
CSRF漏洞可以导致用户的账户被劫持，或者攻击者可以执行不被授权的操作，例如更改用户密码、删除数据等。  
有朋友可能会问，为什么不再写一个关于CORS漏洞的，CORS（跨来源资源共享）和CSRF（跨站请求伪造）是两种完全不同的安全问题。  
实际上，虽然这两个漏洞有共同点，但利用的场景不一样。其中CORS更多的是配合未授权API接口获取敏感信息等，而CSRF携带用户令牌（Cookie）能做的操作会比CORS更多。
### 开发思路
常见防御CSRF的手段：
  1. 验证来源站点，服务器端对每个请求进行来源站点验证，只允许来自指定站点的请求通过。
  2. 添加token验证，在请求参数或者HTTP头中添加一个token，用于验证请求的合法性。
**验证来源站点**  
一般使用referer和origin两种方式来验证。但是，referer易被篡改或者不可靠，而origin可以被使用者自由伪造，因此单独使用这种方式可能存在被绕过的风险。  
在开发过程中并没针对这两个头进行限制，但做了用户登录状态校验。  
代码来源：`com/pika/electricrat/csrf/dto/UserInfoServlet.java`
    @Api({RequestMethodType.POST, RequestMethodType.GET})
    public Map editInfo(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HashMap map = checkLogin(request, response);
        boolean isLogin = (boolean) map.get("loginStatus");
        HashMap data = new HashMap<>();
        data.put("loginStatus", isLogin);
        if (!isLogin) return data;
        String phone = request.getParameter("phone");
        String address = request.getParameter("address");
        UserEntity user = (UserEntity) map.get("user");
        data.put("updateStatus", uisi.updateByUserId(user.getId(),phone,address));
        return data;
    }
**添加token验证**  
需要保证token的随机性和复杂性，以避免被猜测或者攻击者伪造token。  
这里跟暴力破解防御中的隐藏域验证码类似，都是通过接口获取到前端，请求时携带到后端进行校验。不过于之不同的是，暴力破解的token验证后会被销毁，而这里的我校验后并没有销毁。而
Session 设置了30分钟过期，也就是说你可以在30分钟内进行CSRF攻击。  
代码来源：`com/pika/electricrat/csrf/dto/UserInfoServlet.java`
    @Api({RequestMethodType.POST, RequestMethodType.GET})
    public Map editInfoWithToken(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String token = request.getParameter("csrf_token");
        HttpSession session = request.getSession();
        String v_token = session.getAttribute("csrf_token") != null ? String.valueOf(session.getAttribute("csrf_token")) : null;
        HashMap data = new HashMap<>();