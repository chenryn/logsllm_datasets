/* TRACE_POSTGRESQL_BUFFER_CHECKPOINT_SYNC_START () */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_BUFFER_CHECKPOINT_SYNC_START_ENABLED() __builtin_expect (buffer__checkpoint__sync__start_semaphore, 0)  
#define postgresql_buffer__checkpoint__sync__start_semaphore buffer__checkpoint__sync__start_semaphore  
#else  
#define TRACE_POSTGRESQL_BUFFER_CHECKPOINT_SYNC_START_ENABLED() __builtin_expect (postgresql_buffer__checkpoint__sync__start_semapho  
re, 0)  
#endif  
__extension__ extern unsigned short postgresql_buffer__checkpoint__sync__start_semaphore __attribute__ ((unused)) __attribute__ ((se  
ction (".probes")));  
#define TRACE_POSTGRESQL_BUFFER_CHECKPOINT_SYNC_START() \  
DTRACE_PROBE(postgresql,buffer__checkpoint__sync__start)  
/* TRACE_POSTGRESQL_BUFFER_CHECKPOINT_DONE () */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_BUFFER_CHECKPOINT_DONE_ENABLED() __builtin_expect (buffer__checkpoint__done_semaphore, 0)  
#define postgresql_buffer__checkpoint__done_semaphore buffer__checkpoint__done_semaphore  
#else  
#define TRACE_POSTGRESQL_BUFFER_CHECKPOINT_DONE_ENABLED() __builtin_expect (postgresql_buffer__checkpoint__done_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_buffer__checkpoint__done_semaphore __attribute__ ((unused)) __attribute__ ((section (  
".probes")));  
#define TRACE_POSTGRESQL_BUFFER_CHECKPOINT_DONE() \  
DTRACE_PROBE(postgresql,buffer__checkpoint__done)  
/* TRACE_POSTGRESQL_CHECKPOINT_START ( int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_CHECKPOINT_START_ENABLED() __builtin_expect (checkpoint__start_semaphore, 0)  
#define postgresql_checkpoint__start_semaphore checkpoint__start_semaphore  
#else  
#define TRACE_POSTGRESQL_CHECKPOINT_START_ENABLED() __builtin_expect (postgresql_checkpoint__start_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_checkpoint__start_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_CHECKPOINT_START(arg1) \  
DTRACE_PROBE1(postgresql,checkpoint__start,arg1)  
/* TRACE_POSTGRESQL_CHECKPOINT_DONE ( int, int, int, int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_CHECKPOINT_DONE_ENABLED() __builtin_expect (checkpoint__done_semaphore, 0)  
#define postgresql_checkpoint__done_semaphore checkpoint__done_semaphore  
#else  
#define TRACE_POSTGRESQL_CHECKPOINT_DONE_ENABLED() __builtin_expect (postgresql_checkpoint__done_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_checkpoint__done_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_CHECKPOINT_DONE(arg1,arg2,arg3,arg4,arg5) \  
DTRACE_PROBE5(postgresql,checkpoint__done,arg1,arg2,arg3,arg4,arg5)  
/* TRACE_POSTGRESQL_CLOG_CHECKPOINT_START ( char) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_CLOG_CHECKPOINT_START_ENABLED() __builtin_expect (clog__checkpoint__start_semaphore, 0)  
#define postgresql_clog__checkpoint__start_semaphore clog__checkpoint__start_semaphore  
#else  
#define TRACE_POSTGRESQL_CLOG_CHECKPOINT_START_ENABLED() __builtin_expect (postgresql_clog__checkpoint__start_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_clog__checkpoint__start_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_CLOG_CHECKPOINT_START(arg1) \  
DTRACE_PROBE1(postgresql,clog__checkpoint__start,arg1)  
/* TRACE_POSTGRESQL_CLOG_CHECKPOINT_DONE ( char) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_CLOG_CHECKPOINT_DONE_ENABLED() __builtin_expect (clog__checkpoint__done_semaphore, 0)  
#define postgresql_clog__checkpoint__done_semaphore clog__checkpoint__done_semaphore  
#else  
#define TRACE_POSTGRESQL_CLOG_CHECKPOINT_DONE_ENABLED() __builtin_expect (postgresql_clog__checkpoint__done_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_clog__checkpoint__done_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_CLOG_CHECKPOINT_DONE(arg1) \  
DTRACE_PROBE1(postgresql,clog__checkpoint__done,arg1)  
/* TRACE_POSTGRESQL_SUBTRANS_CHECKPOINT_START ( char) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_SUBTRANS_CHECKPOINT_START_ENABLED() __builtin_expect (subtrans__checkpoint__start_semaphore, 0)  
#define postgresql_subtrans__checkpoint__start_semaphore subtrans__checkpoint__start_semaphore  
#else  
#define TRACE_POSTGRESQL_SUBTRANS_CHECKPOINT_START_ENABLED() __builtin_expect (postgresql_subtrans__checkpoint__start_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_subtrans__checkpoint__start_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_SUBTRANS_CHECKPOINT_START(arg1) \  
DTRACE_PROBE1(postgresql,subtrans__checkpoint__start,arg1)  
/* TRACE_POSTGRESQL_SUBTRANS_CHECKPOINT_DONE ( char) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_SUBTRANS_CHECKPOINT_DONE_ENABLED() __builtin_expect (subtrans__checkpoint__done_semaphore, 0)  
#define postgresql_subtrans__checkpoint__done_semaphore subtrans__checkpoint__done_semaphore  
#else  
#define TRACE_POSTGRESQL_SUBTRANS_CHECKPOINT_DONE_ENABLED() __builtin_expect (postgresql_subtrans__checkpoint__done_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_subtrans__checkpoint__done_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_SUBTRANS_CHECKPOINT_DONE(arg1) \  
DTRACE_PROBE1(postgresql,subtrans__checkpoint__done,arg1)  
/* TRACE_POSTGRESQL_MULTIXACT_CHECKPOINT_START ( char) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_MULTIXACT_CHECKPOINT_START_ENABLED() __builtin_expect (multixact__checkpoint__start_semaphore, 0)  
#define postgresql_multixact__checkpoint__start_semaphore multixact__checkpoint__start_semaphore  
#else  
#define TRACE_POSTGRESQL_MULTIXACT_CHECKPOINT_START_ENABLED() __builtin_expect (postgresql_multixact__checkpoint__start_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_multixact__checkpoint__start_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_MULTIXACT_CHECKPOINT_START(arg1) \  
DTRACE_PROBE1(postgresql,multixact__checkpoint__start,arg1)  
/* TRACE_POSTGRESQL_MULTIXACT_CHECKPOINT_DONE ( char) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_MULTIXACT_CHECKPOINT_DONE_ENABLED() __builtin_expect (multixact__checkpoint__done_semaphore, 0)  
#define postgresql_multixact__checkpoint__done_semaphore multixact__checkpoint__done_semaphore  
#else  
#define TRACE_POSTGRESQL_MULTIXACT_CHECKPOINT_DONE_ENABLED() __builtin_expect (postgresql_multixact__checkpoint__done_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_multixact__checkpoint__done_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_MULTIXACT_CHECKPOINT_DONE(arg1) \  
DTRACE_PROBE1(postgresql,multixact__checkpoint__done,arg1)  
/* TRACE_POSTGRESQL_TWOPHASE_CHECKPOINT_START () */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_TWOPHASE_CHECKPOINT_START_ENABLED() __builtin_expect (twophase__checkpoint__start_semaphore, 0)  
#define postgresql_twophase__checkpoint__start_semaphore twophase__checkpoint__start_semaphore  
#else  
#define TRACE_POSTGRESQL_TWOPHASE_CHECKPOINT_START_ENABLED() __builtin_expect (postgresql_twophase__checkpoint__start_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_twophase__checkpoint__start_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_TWOPHASE_CHECKPOINT_START() \  
DTRACE_PROBE(postgresql,twophase__checkpoint__start)  
/* TRACE_POSTGRESQL_TWOPHASE_CHECKPOINT_DONE () */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_TWOPHASE_CHECKPOINT_DONE_ENABLED() __builtin_expect (twophase__checkpoint__done_semaphore, 0)  
#define postgresql_twophase__checkpoint__done_semaphore twophase__checkpoint__done_semaphore  
#else  
#define TRACE_POSTGRESQL_TWOPHASE_CHECKPOINT_DONE_ENABLED() __builtin_expect (postgresql_twophase__checkpoint__done_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_twophase__checkpoint__done_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_TWOPHASE_CHECKPOINT_DONE() \  
DTRACE_PROBE(postgresql,twophase__checkpoint__done)  
/* TRACE_POSTGRESQL_BUFFER_SYNC_START ( int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_BUFFER_SYNC_START_ENABLED() __builtin_expect (buffer__sync__start_semaphore, 0)  
#define postgresql_buffer__sync__start_semaphore buffer__sync__start_semaphore  
#else  
#define TRACE_POSTGRESQL_BUFFER_SYNC_START_ENABLED() __builtin_expect (postgresql_buffer__sync__start_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_buffer__sync__start_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_BUFFER_SYNC_START(arg1,arg2) \  
DTRACE_PROBE2(postgresql,buffer__sync__start,arg1,arg2)  
/* TRACE_POSTGRESQL_BUFFER_SYNC_WRITTEN ( int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_BUFFER_SYNC_WRITTEN_ENABLED() __builtin_expect (buffer__sync__written_semaphore, 0)  
#define postgresql_buffer__sync__written_semaphore buffer__sync__written_semaphore  
#else  
#define TRACE_POSTGRESQL_BUFFER_SYNC_WRITTEN_ENABLED() __builtin_expect (postgresql_buffer__sync__written_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_buffer__sync__written_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_BUFFER_SYNC_WRITTEN(arg1) \  
DTRACE_PROBE1(postgresql,buffer__sync__written,arg1)  
/* TRACE_POSTGRESQL_BUFFER_SYNC_DONE ( int, int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_BUFFER_SYNC_DONE_ENABLED() __builtin_expect (buffer__sync__done_semaphore, 0)  
#define postgresql_buffer__sync__done_semaphore buffer__sync__done_semaphore  
#else  
#define TRACE_POSTGRESQL_BUFFER_SYNC_DONE_ENABLED() __builtin_expect (postgresql_buffer__sync__done_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_buffer__sync__done_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_BUFFER_SYNC_DONE(arg1,arg2,arg3) \  
DTRACE_PROBE3(postgresql,buffer__sync__done,arg1,arg2,arg3)  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")