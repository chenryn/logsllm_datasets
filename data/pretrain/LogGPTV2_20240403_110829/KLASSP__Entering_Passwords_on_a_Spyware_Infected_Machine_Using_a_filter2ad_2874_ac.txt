narrow the search space for correct password by exam-
ining only the low entropy possibilities. For example,
the choice snoopy2 appears much more likely a pass-
word than sdgsdio.
Given that a spyware attacker will have as many pass-
words to try as the size of the shared-secret space we
cannot aﬀord to make his task even simpler. For this
reason we favor the shared-secrets introduced in Section
3.1.2, which essentially avoid the attacker using second
order entropy analysis. By using that, we increase the
probability that low entropy passwords will withstand
attack. An important exception exists for passwords
that are numeric; i.e. consist of numbers only.
If we
assume that in numeric PINs all 10 digits are equally
likely, and that the randomly typed characters are also
numeric, the entropy attack gains very little. Thus a
much simpler shared-secret can be employed for nu-
meric passwords, since the attacker’s main option would
appear to be to attempt login.
3.3.2 Collusion/Averaging Attack
When trying to extract signal from noise multiple in-
dependent measurements can help reduce the noise. It
is for this reason that we assumed that collusion among
spyware machines was unlikely. For example the em-
bedded string in (1) was:
laspqm5nsdgsos8gfsodg4dpuouuyhdg2.
(3)
On another occasion for the same user logging into the
same account the string might be
wqsasdfnk4olou3dnsodgsjap1yheyjedrd2.
(4)
As more embedded strings are gathered the password
keys are the only thing constant as everything else changes.
A simple dynamic programming approach will likely re-
veal the password if it has access to even two of the
embedded strings. For this reason spyware has a far
simpler task if the ﬁrst login attempt is unsuccessful
and the user types it a second time. Equally, if a user
realizes that she typed a random key instead of a pass-
word key and backspaces to correct it, she generally
gives away one key of the password.
3.3.3 Man in the Middle Attack
A natural line of attack is for the spyware author to
set up a login server, claim to be a user whose userid
has already been captured, type a series of keys and
watch to see which are relayed from the proxy to the
login server. This would be enough to reveal which
symbol and position in the table were assigned to that
user. This doesn’t work, since the proxy will relay the
PI:EMAIL password only to hotmail and
so on. Since the user enumerates the userid and do-
mains she will be using, the attacker cannot induce the
6
proxy to relay any information for that userid to any
other domain.
3.4 Obscuring by Mapping Password Keys
In Sections 3.1 and 3.2, we obscured the password
by inserting random keys. While that will certainly
make recovering the password harder, the amount of
randomness that can be inserted is limited by the fact
that the password characters are still typed in the clear.
A much stronger method to obscure the password is to
perform a random mapping of the keys, and do the
reverse mapping at the proxy. We will now examine
this alternative.
In this approach, we assume at registration time the
user gets a printed table that she will be use to encrypt
(map) the password. The idea is that, since passwords
are usually short, we can use a character-by-character
encryption table, and ask the user to do the encryption
herself.
More speciﬁcally, before a trip, the user goes to the
KLASSP webserver site, and ask for an encryption ta-
ble, similar to the one presented in Figure 3. Each table
is random and a new table is generated for each user,
each time. Each table has an ID number. Note that
since we assume no collusion, she can print a table at
one current (unsafe) internet cafe for use in her next
(also unsafe) location. When logging in from an unsafe
location, she goes to the proxy site, and types the de-
sired target site (e.g., www.BigBank.com), and the ID.
Figure 4 shows a simple version of the user interface.
The proxy shows the target page in the lower frame.
When the proxy detect that the focus is in a password
ﬁeld, the top frame instructs the user on which column
in the table to use for entering the next password char-
acter. According to the user’s choice, a new column in
the table is used for every new session (recommended)
or for every character (for maximum security). If the
same table is used for too many sessions, the user may
exhaust the table; if so the the last entry is used as
many times as required. Note that re-using the last en-
try is simply a last-resort eﬀort; the user should obtain
a new table before the current one is exhausted.
If the user is using the one column per character ap-
proach, breaking the encryption is essentially impos-
sible, since any key will be mapped to any key with
same probability. Even if we use the same column for
the whole session, only a few characters will have been
typed, and no signiﬁcant statistical information can be
obtained to try and break the encryption table. Only
when the last column is being used repeatedly (i.e., af-
ter the one time pad is exhausted, and until the user
obtain a new one) there is any possibility of breaking
the encryption. In this case, while the user is still safe
from a direct decryption attack for several many char-
acters, more eﬃcient attacks are possible, as described
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006TABLE ID: 734955
7
3
5
l
s
2
f
u
h T k
6
k
J
4
2
1
5
h
A r
r F s
B f
)
3
C 7
D G 5
...
...
...
10
8
9
f
s F
5
r T
g A i
x
...
...
z Z d
...
...
5
o P L y
...
...
...
...
Figure 3: A segment of sample encryption table, show-
ing the mapping for characters A-D. Each column cor-
responds to a particular random mapping. For example,
if instructed by the proxy to use column 6, and the next
password character is “D”, the user would type “y” in-
stead.
below.
3.4.1 Attacks and possible solutions
The use of a one-time key removes the opportunity
for any direct attack on the keys. Nevertheless, a few
other attacks are still possible, if we assume the attacker
has complete control over the compromised machine. In
particular, a two-men-in-the middle attack, intercepting
the keys before it reaches the proxy as well as on the
way out would be very insidious. More speciﬁcally, a
DNS redirection sends the keystrokes to redirect of the
original proxy to a hacker site. The site then intercepts
and changes the target site (e.g., from BigBank.com
to FakeBank.com). The modiﬁed site will then receive
the clear password. This attack can be avoided as long
as the user remember to check the SSL certiﬁcate of
the proxy. If the user is willing to declare in advance
which domains will be visited (during the registration
phase) this problem is avoided as the proxy will not
send keystrokes to any site not on that list, or that is
not known to be safe.
Another point of attack is by exhausting the keys in
the table. More speciﬁcally, the compromised computer
could change the typed characters so that you cannot
login at the site. As the users keeps trying to login, the
keys will be exhausted. The last key is then used for
any subsequent entry. After the user leaves, the attacker
can then submit the same keystrokes to a fake site and
get the password in the clear. A solution similar to the
one proposed above would also circumvent this attack.
We could also instruct the user not to keep using the
table once it reaches the last entry (note: we allow the
user to keep using it, since is most likely still safer then
typing the password in the clear).
4.
IMPLEMENTATION
We now address some of the issues related to imple-
mentation of the proxy. This architecture illustrated
in Figure 5 is common to each of the methods of ob-
scuring the password described in Section 3. We ﬁrst
describe the sequence of events, and the ﬂow of connec-
tions between the user’s browser, the KLASSP proxy,
Figure 4: Sample screen capture of the proxy server in-
terface. The upper frame tells the user which column of
the table to use for the next character. The lower frame
is the actual site to which the user is logging in.
the KLASSP webserver and the end login server.
In our implementation we rely on running Javascript
scripts in the user’s browser. We use ASP.Net script-
ing to handle the the actions to be performed at the
web server. We use JScript scripting in the KLASSP
proxy to alter certain requests and responses between
the client browser and the login server.
4.1 Sequence of Events
1. User sets browser to point at the proxy
2. User navigates to the KLASSP webserver, enters
the userid and url (e.g. www.bigbank.com/login
and gets Shared Secret prompts
3. User enters obscured password, using one of the
methods in Section 3, and submits to the KLASSP
webserver
4. The KLASSP webserver server extracts the pass-
word
5. Browser is auto-transferred to request the the url
6. Proxy intercepts response and populates login form
with userid and “roguepwd”
7. User receives pre-populated actualLogin page and
clicks submit button.
7
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20068. Proxy intercepts request and replaces “roguepwd”
with pwd XOR salt from the database. It deletes
the entire record (userid, pwd XOR salt, actual-
Login) from the database
9. Login proceeds and proxy reverts to MITM rˆole.
4.2 User Experience
To use the service a user ﬁrst points the browser at the
proxy server. In both Internet Explorer and Firefox this
is done in the Connection Settings tab of the options
menu. By entering the IP address of the proxy we are
sure that all connections ﬂow through the proxy. Note
that this does not require any installation or privileges
that are not available to all users. For example a user
at an internet caf´e will be able to do this (even guest
accounts on a Windows system have this privilege).
The user next navigates to KLASSP webserver and
enters the obscured password using one of the shared
secret methods described in Section 3. When the ob-
scured password has been uploaded to the webserver the
user’s browser automatically opens www.bigbank.com/
login. The user need type nothing further and merely
clicks the submit button and login proceeds.
4.3 KLASSP webserver
The KLASSP webserver acts as the visible compo-
nent. The user is ﬁrst asked for the address actualLogin
of the login site, and her userid at that site. At this
point the webserver retrieves the shared secret for that
user. The user now enters the obscured password using
one of the shared secret methods described in Section
3. For the methods of Sections 3.1 and 3.2 all of the
images are downloaded to the browser at once to avoid
the possible delay of a roundtrip to the server at each