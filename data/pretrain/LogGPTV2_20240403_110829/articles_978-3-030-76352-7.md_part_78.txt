**Email: PI**

### Abstract
SQL query logs are valuable for system design, upgrades, and monitoring the SQL queries running on specific applications. These logs provide insights into system operations. Existing research uses SQL query logs to find patterns when the underlying data and database schema are unavailable. For this purpose, a knowledge base in the form of an ontology is created and mined for knowledge extraction. In this paper, we propose an approach to create and evolve an ontology from SQL query logs. Furthermore, since transforming these SQL queries into an ontology alters their original form, we also propose a strategy to recover these queries in their original form. Experiments on real-world datasets demonstrate the effectiveness of our proposed approach.

**Keywords:** SQL logs, Bloom filter, Ontology evolution, Online transaction processing, RecSQL, DFS

### 1. Introduction
Online Transaction Processing (OLTP) systems facilitate day-to-day operations in organizations. One useful by-product of OLTP systems is the logs of SQL queries. These SQL logs can be used for design evaluation, upgrades, maintenance, and more. For example, a dimensional model can be built from SQL logs.

In large OLTP systems, the size of these logs can be enormous, making it challenging to detect trends, patterns, and relationships among queries. To address this, an ontology can be constructed from these logs to enhance data semantics and integrate homogeneous schemas. For instance, consider two basic queries: "select id, name from student" and "select id, name, marks from student." The minor difference between them (one additional attribute) can be detected manually, but with massive logs, a robust mechanism for knowledge extraction is essential.

Existing research uses SQL logs for various purposes, such as recommendation systems [11], clustering [8] for access pattern learning, workload analysis based on term frequency of projection [9], and building ontologies [1] using materialized views. However, there is a gap in the literature regarding the use of SQL logs for ontology evolution.

Figure 1 illustrates the key steps of our proposed approach. As soon as a query is received, it is evaluated to determine if it has been previously processed. If the query is already incorporated into the ontology, it is not further processed. Otherwise, it is added to the ontology, evolving it. Our change capture mechanism also allows for the accurate recovery of original queries. A limitation of our work is that we focus only on simple select statements, which may or may not have a group by clause.

### 2. Related Works
In this section, we review existing studies, dividing them into two parts: the usage of query logs for various purposes and the use of logs for ontology building.

[6] analyzes query logs to assess the structure of queries, aiding in recommendation systems and user profiling. Agrawal et al. [2] rank tuples in SQL queries, build rules for context, and analyze queries using established rules. Yang et al. [12] construct graphs from logs to find similar queries based on Jaccard coefficients. Aligon et al. [3] define a similarity function for comparing OLAP queries, focusing on selection and join operations. Unlike these works, we identify changes in SQL logs rather than finding similar queries.

Aadil [1] transforms user requirements into SQL queries and checks their existence in the database, creating materialized views to build an ontology. This approach avoids issues like synonyms, equivalence, and identity but does not address ontology evolution. Rend et al. [10] build an ontology from source data and transform business requirements into organizational models, performing dimensional modeling. However, they do not detect changes in source data to evolve the ontology. Elfaki et al. [5] represent relational tables as a knowledge graph and then transform it into a knowledge base. Khattak et al. [7] consider three types of changes (add, extend, reduce) and save them in a change history log for ontology evolution. However, they do not consider the nature of data as SQL queries.

### 3. The Proposed Methodology
In this section, we present our proposed approach, illustrated in Figure 2, where SQL queries are used to evolve the ontology.

#### 3.1 Type of SQL Queries Handled by Our Approach
We consider simple "select" statements that may or may not have a "group by" clause. Examples include:
- `select id, name from student`
- `select id, title from course`
- `select count(customerid), country from customers group by country`

The generic syntax is:
- `Select ColNames From TableName`
- `Select ColNames From TableName Group By ColNames`

#### 3.2 Feature Engineering
We perform feature engineering to transform queries into a format recognized by our approach. This process converts queries to lowercase, removes "select" and "from" keywords, and adds the table name as a prefix followed by an underscore. For example:
- `{select course.id, course.title from course}` becomes
- `{course_id, course_title from course}`

#### 3.3 Capturing Change Using Bloom Filter
To capture changes in SQL logs for ontology evolution, we use a Bloom filter, which helps identify whether an element exists. If it does not, it is added to the ontology. Along with the Bloom filter, we build a prefix tree to recover transformed SQL queries.

Bloom filters [4] are probabilistic and space-efficient data structures for searching. They check whether an element is a member and save each seen value as a bit vector.

Figure 3 shows a prefix tree obtained from example SQL queries. After transforming the queries, we split them into separate terms and save each term in the Bloom filter and add it to the prefix tree.

#### 3.4 Ontology Evolution
From the example, we get terms like `course id`, `course title`, `course year`, `student id`, and `student name`. We make the table name a concept and column names as properties of each concept, creating an initial ontology. When a new query is received, its concept and properties are checked in the Bloom filter. If the properties do not exist, they are added as new properties of an existing concept.

#### 3.5 Recovering SQL Logs
The prefix tree holds all observed SQL logs. To recover queries in their original form, we use a Depth-First Search (DFS) and our proposed RecSQL approach. DFS traverses each branch, but it cannot differentiate between multiple queries in a single branch. RecSQL is an extended version of DFS traversal.

Figure 4 illustrates the RecSQL approach. Starting at the root node, we check the edge with the highest weight and traverse it. Each traversal decrements the edge weights, and once the weight becomes zero, the edge is dropped. This ensures each branch is traversed the correct number of times, recovering 100% accurate SQL queries.

### 4. Experimental Evaluation
#### 4.1 Experimental Setups
The algorithms were implemented in Python and tested on a laptop with a Core i3 processor (2.0 GHz) and 8 GB RAM.

#### 4.2 Datasets
We used a Kaggle dataset containing 4985 SQL queries, including only select statements without where clauses and group by queries.

**Evaluating Query Recovery Time and Accuracy:**
Figure 5 compares the execution time of RecSQL and DFS. RecSQL consumes more time but recovers queries with higher accuracy, as shown in Figure 6. For 1000 queries, RecSQL recovers 822 queries, while DFS recovers only 117. For 5000 queries, RecSQL recovers 4043 queries, while DFS recovers 749. DFS is faster but less accurate because it does not use edge weights.

### 5. Conclusion
In this work, we proposed a robust and effective approach for ontology evolution based on SQL logs. Our approach recovers SQL queries with 100% accuracy using a Bloom filter and prefix tree. We aim to extend this work to handle queries involving "join" and "where" clauses.

**Acknowledgment:**
This research was supported by the Zayed University Cluster Research Fund 18038.

**References:**
1. Aadil, B., Wakrime, A.A., Kzaz, L., Sekkaki, A.: Automating data warehouse design using ontology. In: 2016 International Conference on Electrical and Information Technologies (ICEIT), pp. 42–48. IEEE (2016)
2. Agrawal, R., Rantzau, R., Terzi, E.: Context-sensitive ranking. In: Proceedings of the 2006 ACM SIGMOD International Conference on Management of Data, pp. 383–394. ACM (2006)
3. Aligon, J., Boulil, K., Marcel, P., Peralta, V.: A holistic approach to OLAP sessions composition: the Falseto experience. In: Proceedings of the 17th International Workshop on Data Warehousing and OLAP, pp. 37–46. ACM (2014)
4. Bloom, B.H.: Space/time trade-offs in hash coding with allowable errors. Commun. ACM 13(7), 422–426 (1970)
5. Elfaki, A., Aljaedi, A., Duan, Y.: Mapping ERD to knowledge graph. In: 2019 IEEE World Congress on Services (SERVICES), vol. 2642, pp. 110–114. IEEE (2019)
6. Kamra, A., Terzi, E., Bertino, E.: Detecting anomalous access patterns in relational databases. VLDB J. 17(5), 1063–1077 (2008)
7. Khattak, A.M., Pervez, Z., Khan, W.A., Khan, A.M., Latif, K., Lee, S.: Mapping evolution of dynamic web ontologies. Inf. Sci. 303, 101–119 (2015)
8. Kul, G., et al.: ETTU: Analyzing query intents in corporate databases. In: Proceedings of the 25th International Conference Companion on World Wide Web, pp. 463–466. International World Wide Web Conferences Steering Committee (2016)
9. Makiyama, V.H., Raddick, J., Santos, R.D.: Text mining applied to SQL queries: a case study for the SDSS SkyServer. In: SIMBig, pp. 66–72 (2015)
10. Ren, S., Wang, T., Lu, X.: Dimensional modeling of medical data warehouse based on ontology. In: 2018 IEEE 3rd International Conference on Big Data Analysis (ICBDA), pp. 144–149. IEEE (2018)
11. Stefanidis, K., Drosou, M., Pitoura, E.: You may also like’ results in relational databases. In: Proceedings International Workshop on Personalized Access, Profile Management and Context Awareness: Databases, Lyon. Citeseer (2009)
12. Yang, X., Procopiuc, C.M., Srivastava, D.: Recommending join queries via query log analysis. In: 2009 IEEE 25th International Conference on Data Engineering, pp. 964–975. IEEE (2009)

**Artificial Intelligence in the IoT Security Services (AI-IOTS 2020)**
International Workshop on Artificial Intelligence in the IoT Security Services