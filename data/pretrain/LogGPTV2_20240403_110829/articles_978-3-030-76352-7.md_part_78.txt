PI:EMAIL
Abstract. LogsofSQLqueriesareusefulforbuildingthesystemdesign,
upgrading,andcheckingwhichSQLqueriesarerunningoncertainappli-
cations.TheseSQLqueriesprovideususefulinformationandknowledge
about the system operations. The existing works use SQL query logs to
findpatternswhentheunderlyingdataanddatabaseschemaisnotavail-
able. For this purpose, a knowledge-base in the form of an ontology is
created whichisthenminedforknowledgeextraction. Inthispaper,we
haveproposedanapproachtocreateandevolveanontologyfromlogsof
SQLqueries.Furthermore,whentheseSQLqueriesaretransformedinto
the ontology, they loose their original form/shape i.e., we do not have
original SQL queries. Therefore, we have further proposed a strategy to
recover these SQL queries in their original form. Experiments on real
world datasets demonstrate the effectiveness of the proposed approach.
· · ·
Keywords: SQL logs Bloom filter Ontology evolution Online
· ·
transaction processing RecSQL DFS
1 Introduction
Onlinetransactionprocessingsystems(OLTP)areusefultofacilitatethedayto
day operations of the organization. One specific and useful feature obtained as
a by-product is the logs of SQL queries. These SQL logs can be used for design
evaluation,upgrading,maintenanceamongothers.WecanbuildtheDimensional
Model from SQL logs.
ThesizeofsuchlogsisverybiginlargeOLTPsystems,soitishardtodetect
get trends, patterns, the relationship among queries and so on. To solve this
matter, we can build an ontology from these logs for aforementioned purposes.
As we know that an ontology is information-rich data repository and enhances
the semantics of data. Therefore, it can be used to enhance the semantic of
source data, and integration of homogeneous schema. For example, consider
two very basic queries “select id, name from student” and “select id, name,
marks from student”. We find a minor difference between them as the second
(cid:2)c SpringerNatureSwitzerlandAG2021
H.Hacidetal.(Eds.):ICSOC2020Workshops,LNCS12632,pp.509–517,2021.
https://doi.org/10.1007/978-3-030-76352-7_46
510 A. Yousaf et al.
query contains only one additional attribute. Such minor difference can easily
be detected manually. However, when we have a massive logs of queries which
contain some related queries as above, so there is a dire need to have a proper
mechanism for knowledge extraction.
The existing uses SQL logs for various purposes like recommendation sys-
tems [11], clustering [8] for access patterns learning, workload analysis based
on term frequency of projection [9], and also for building the ontology [1] using
materialized views. So, we find from the literature that a number of people has
performedresearchonSQLlogsforbuildingtheontologyhowever,wecouldnot
find any work where someone have used the SQL logs for ontology evolution
purpose.
Fig.1. Key step of the proposed approach.
Considering aforementioned utilization of SQL logs and research gap in the
literature, we focus on ontology evolution. Figure1 illustrate the major steps of
our proposed approach where as soon as a query is received, it is first evaluated
whether such query is previously processed or not. By process, we mean that
if this is already incorporated in the ontology then it will not be processed
further to evolve the ontology. On the other hand, it will be processed to be
part of the ontology and hence the ontology gets evolved. Our change capture
mechanism/approach is also useful in a sense that it allows us to accurately
recover the original queries. One of the limitation of our work is that we only
focus on simple select statements which may or may not have group by clause.
Ontology Evolution Using Recoverable SQL Logs 511
2 Related Works
Inthissection,wereviewsomeexistingstudieswherewehavedividedtheminto
2 parts i.e. usage of query logs for various purposed and using logs for ontology
building.
[6]analyzethequerylogsforassessingthestructureofqueries.Thesequeries
logs help in the recommendation systems and building the user profile. Agrawal
et al. [2] rank the tuples of the SQL queries. They build rules for context and
analyze the queries by using established rules. They identify the similarity of
the query by cosine distance. Yang et al. [12] build the graph from logs to find
the similar queries based on Jaccard coefficient. Aligon et al. [3] define their
own similarity function for comparing the OLAP queries. They identify that
important part of queries is the selection and join. They compute the similarity
ofjoinandgroupby,usingthedistancebetweenattributesondifferenthierarchy
levels. Compared to the existing works, we identify the changes in SQL logs
instead of finding the similar queries.
Inthisaspect,Aadil[1]transformuserneeds/requirementsintoSQLqueries
and check their existence in database. They then create materialized views to
build ontology. For building ontology, the materialized view is transformed into
anOWLclass,andtheprimarykeyattributebecomespropertyfunction.Inthis
way,theyavoidtheproblemslikesynonyms,equivalence,andidentity.Whereas,
their approach is quite comprehensive however, they do not study the task of
ontology evolution. Rend et al. [10] build the ontology from source data and
transform business requirements into the organization model. Then they per-
formdimensional modeling ontheontology andorganizational model. However,
thekeydrawbackinworkisthatthechangeshappeninginsourcedatacannotbe
detectedtoevolvetheontology.Elfakietal.[5]representtherelationaltablesby
a knowledge graph which is then transformed into a knowledge base. For ontol-
ogy evolution, Khattak et al. [7] consider 3 types of changes i.e., add, extend,
and reduce. The changes are saved in the change history log in the semantic
structure. By change history log, they reconcile the mapping to eliminate unre-
liable mappings and re-establish them for ontology evolution. However, they do
not consider the nature of data as SQL queries.
3 The Proposed Methodology
In this section, we present our proposed approach. We refer to Fig.2 to techni-
cally elaborate our methodology, where the SQL queries are used to evolve the
ontology. Our approach is presented in following sub-sections.
3.1 Type of SQL Queries Handled by Our Approach
In this paper, we consider simple “select” statements which may or may not
have “group by” clause. For example,
512 A. Yousaf et al.
Fig.2.WecapturedonlythosequerieswhichhavesimpleSelectandGroupBystate-
ments and check in Bloom Filter, then Add them in the prefix tree and Evolve the
Ontology.
(i) select id, name From student
(ii) select id, title From course
(iii) select count(customerid), country from customers group by country
the generic form/syntax of these queries is
– Select ColNames From TableName
– Select ColNames From TableName Group By ColNames
3.2 Feature Engineering
Inthissub-section,weperformfeaturingengineeringforthequeriestotransform
them into a format which is recognized by our approach. Our proposed feature
engineeringprocessinitiallyconvertsaqueryinto“lowercase”.Wethenremove
the “select” and “from” keywords and add the table name as prefix followed by
an underscore to attach it with the attribute name. The example is presented
below.
{select course.id,course.title from course}
converted as
{course_id,course_title from course}.
3.3 Capturing Change Using Bloom Filter
Now we discuss how to capture the change in SQL logs for ontology evolution.
For this purpose, we use bloom filter which helps us to identify whether certain
Ontology Evolution Using Recoverable SQL Logs 513
element is already exists or not. If it does not exist, we add it into the ontology
i.e. the ontology is evolved. On the other hand, if it is seen then we discard it.
Along with the bloom filter, we build a prefix tree which is used to recover the
transformed SQL queries.
Bloomfilter[4]isaprobabilisticandspace-efficientdatastructureforsearch-
ing. It checks whether the element is a member or not. It saves each seen value
in the form of a bit vector and tells that whether the element is present or not
in it.
Fig.3. A prefix tree obtained from given example SQL queries.
As soon as we engineer/transform the queries into our proposed form, we
split it into separate terms and save each term in bloom filter and add into
prefix tree. For instance, we consider following list of queries to demonstrate
building of prefix tree.
– select course.courseid, course.title from course
– select courseid from course
– select courseid, title from course
– select id, name from student
– select year from course
andusefollowingqueryasdetailed/runningexampleforclearunderstanding.
{Select course.id,Course.title from Course}
is converted as
{course_id,course_title from course}
514 A. Yousaf et al.
After the transformation, we split the query into separate terms like this
course id, course title and course. We then append the table name with each
term as course id,course name. Each augmented term gets an index which is
then added into bloom filter, which checks its existence. If this term is being
seen for the first time, it gets added into the ontology and also added in prefix
tree.
3.4 Ontology Evolution
Inthissection,wediscussourontologyevolutionprocess.Fromtheaboveexam-
ple we got course id, course name, course year, student id and student name.
From these list of keywords, we make table name as a concept and column
names as properties of each concept. In this way, an initial ontology is created.
When a new query is received, its concept and properties are checked in bloom
filter. If its properties do not exist then they are added either as new property
of an existing concept. Our ontology building approach is based upon the idea
of [1].
3.5 Recovering SQL Logs
The prefix tree holds all the SQL logs observed. To recover the query in its
original form, we present a DFS and our proposed RecSQL approach. The DFS
approach is based on the well known idea of DFS traversal. The issue of DFS
approach is that it considers each branch as a single query, and hence unable to
differentiatethatasinglebranchmaycontainmorethanonequery.Forinstance,
fortheabovegivenqueriescertainaresubsetofothers.Thissubsetandsuperset
queries are represented as a single branch. The proposed RecSQL approach is
an extended/altered version of DFS traversal.
We present the steps of RecSQL using the Fig.3. Prefix tree is taken as an
input. Start at root node i.e. “Start” and check the edge having higher weight.
Wehaveedgeweight4withthenode“Course”.Nowweoperateonthispathfor4
times.Onreachingthe“Course”,wefurtherchecktheedgehavinghigherweight.
Inthisway,wereachtheleafnode.Usingthe“Course”,ourfirstrecovereditems
are“Course”andnodes“0”,“1”.Eachtraversaltoleafnodeandre-cursingback
to “Course” node decrements the edge weights like the weight from “Course” to
“0” is decreased to 2 from 3, and 2 to 1 for node “1”. Going to “Course” again
and decrementing the edge weights again, provide us “Course”, “0”, and “1”.
As the edge weight becomes 0, the edge is dropped. In this way, each branch is
traversed equal to the edge weight number of times. Each recurse back provides
a list of nodes which are infact the SQL queries which are 100% accurate. The
Fig.4 presents the running example to clearly explain our SQL recoverer.
Ontology Evolution Using Recoverable SQL Logs 515
Fig.4. This is illustration show the recovery of sql queries through our Proposed
method RecSQL.
4 Experimental Evaluation
4.1 Experimental Setups
The algorithms were implemented in Python, and all the experiments were per-
formed on a laptop with Core i3 with 2.0GHz processor having 8GB RAM.
4.2 Datasets
We used Kaggle dataset having 4985 SQL queries, containing only select state-
ment without where clause and group by queries.
Evaluating the Query Recovery Time and Recovered Logs Accuracy.
The Fig.5 compares the execution time of RecSQL method and DFS. We find
thattheproposedapproachconsumesmoretime.However,consideringtheaccu-
racy of recovery is much lesser in DFS approach as shown in Fig.6. As we see
in Fig.6 that in 1000 queries we recover the query 117 and 822 from DFS and
proposed recover(RecSQL). In the from 5000 queries we recover the 749 queries
fromDFSand4043byRecSQL.WeseethatRecSQLrecovermorequerieswhile
DFSnot.TheDFStimetakingislessbuttheissueisrecoveredisalsoless.This
is because of DFS are not used edge weight. The DFS only take edge, not edge
weight.OurproposedalgorithmRecSQLrecovertheSQLlogsbyusingtheedge
weight.
516 A. Yousaf et al.
Fig.5. Time comparison between DFS and proposed RecSQL on Kaggle dataset
Fig.6. Accuracy comparison between DFS and proposed RecSQL on Kaggle dataset
5 Conclusion
In this work, we proposed a simple yet robust and effective approach for ontol-
ogy evolution based on SQL logs. The proposed approach recoveres the SQL
queries with 100% accuracy using bloom filter and prefix tree. We recover the
original SQL queires from ontology using the prefix tree. In this work, we only
considered “select” and “group-by” queries. Whereas, we aim to consider the
queries involving “join” and “where” clauses.
Acknowledgment. This research work was supported by Zayed University Cluster
Research Fund 18038.
References
1. Aadil, B., Wakrime, A.A., Kzaz, L., Sekkaki, A.: Automating data warehouse
design using ontology. In: 2016 International Conference on Electrical and Infor-
mation Technologies (ICEIT), pp. 42–48. IEEE (2016)
Ontology Evolution Using Recoverable SQL Logs 517
2. Agrawal, R., Rantzau, R., Terzi, E.: Context-sensitive ranking. In: Proceedings of
the 2006 ACM SIGMOD International Conference on Management of Data, pp.
383–394. ACM (2006)
3. Aligon, J., Boulil, K., Marcel, P., Peralta, V.: A holistic approach to OLAP ses-
sionscomposition:thefalsetoexperience.In:Proceedingsofthe17thInternational
Workshop on Data Warehousing and OLAP, pp. 37–46. ACM (2014)
4. Bloom,B.H.:Space/timetrade-offsinhashcodingwithallowableerrors.Commun.
ACM 13(7), 422–426 (1970)
5. Elfaki,A.,Aljaedi,A.,Duan,Y.:MappingERDtoknowledgegraph.In:2019IEEE
World Congress on Services (SERVICES), vol. 2642, pp. 110–114. IEEE (2019)
6. Kamra,A.,Terzi,E.,Bertino,E.:Detectinganomalousaccesspatternsinrelational
databases. VLDB J. 17(5), 1063–1077 (2008)
7. Khattak, A.M., Pervez, Z., Khan, W.A., Khan, A.M., Latif, K., Lee, S.: Mapping
evolution of dynamic web ontologies. Inf. Sci. 303, 101–119 (2015)
8. Kul,G.,etal.:Ettu:Analyzingqueryintentsincorporatedatabases.In:Proceed-
ings of the 25th International Conference Companion on World Wide Web, pp.
463–466. International World Wide Web Conferences Steering Committee (2016)
9. Makiyama, V.H., Raddick, J., Santos, R.D.: Text mining applied to SQL queries:
a case study for the SDSS SkyServer. In: SIMBig, pp. 66–72 (2015)
10. Ren,S.,Wang,T.,Lu,X.:Dimensionalmodelingofmedicaldatawarehousebased
on ontology. In: 2018 IEEE 3rd International Conference on Big Data Analysis
(ICBDA), pp. 144–149. IEEE (2018)
11. Stefanidis, K., Drosou, M., Pitoura, E.: You may also like’ results in relational
databases.In:ProceedingsInternationalWorkshoponPersonalizedAccess,Profile
Management and Context Awareness: Databases, Lyon. Citeseer (2009)
12. Yang, X., Procopiuc, C.M., Srivastava, D.: Recommending join queries via query
log analysis. In: 2009 IEEE 25th International Conference on Data Engineering,
pp. 964–975. IEEE (2009)
Artificial Intelligence in the IoT Security
Services (AI-IOTS 2020)
IInternational Workshop on Artificial