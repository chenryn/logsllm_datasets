# Traps and Pitfalls: Practical Problems in System Call Interposition-Based Security Tools

**Author:** Tal Garfinkel  
**Affiliation:** Computer Science Department, Stanford University  
**Contact:** PI:EMAIL

## Abstract
System call interposition is a powerful method for regulating and monitoring application behavior. In recent years, a wide variety of security tools have been developed using this technique. However, this approach comes with numerous pitfalls that, if overlooked, can allow these tools to be easily circumvented. To highlight these issues, we present the lessons learned from several design and implementation cycles of our system call interposition-based sandboxing tool. We first discuss the problems and pitfalls encountered, such as incorrectly replicating OS semantics, overlooking indirect paths to resources, race conditions, incorrectly subsetting a complex interface, and side effects of denying system calls. We then provide practical solutions to these problems and offer general principles for avoiding the difficulties we faced.

## 1. Introduction
The growing interest in OS-based intrusion detection and confinement has led to various approaches that rely on system call interposition for both confinement [24, 2, 5, 3, 9, 11, 19, 14] and intrusion detection [15, 30, 21, 27]. The system call interface is an attractive boundary for interposition, as it allows the monitoring and regulation of virtually all interactions between an application and the network, file system, and other sensitive system resources. Unfortunately, building secure tools that interpose on this interface can be quite subtle. If not carefully implemented, such tools can be easily bypassed.

During the development of Janus, our system call interposition-based application sandboxing tool, we encountered numerous mistakes and challenges. Our experience suggests that past work in this area often presents an incomplete or inaccurate picture of the steps required to ensure the correctness of an interposition-based tool. Many works focus on higher-level issues like policy specification [3, 8] and analysis of system call patterns [21, 15] for intrusion detection, while those focusing on mechanism [13, 11, 16] tend to address general design and performance rather than the practical pitfalls.

We found that the problems arising from the interactions between the interposition mechanism, tool architecture, and the system call API can be subtle. The Unix API and process-tracing interfaces are highly complex, and overlooking minor details can undermine a tool's security. Addressing these details can require significant changes to the tool's architecture, impacting performance and the range of enforceable security policies.

This paper presents the pitfalls and problems we encountered, the solutions we explored, and the principles we derived for designing, building, and auditing such systems. Although our context is a sandboxing tool, many of the issues and solutions are relevant to intrusion detection tools that use system call interposition.

## 2. Background and Related Work
The current Janus implementation evolved through successive improvements and rewrites, starting from the prototype described by Goldberg et al. [14]. The original Janus architecture restricted an application's interactions with the OS by interposing on system calls via standard process tracing mechanisms. Other systems, such as MapBox [3] and Consh [5], were later developed based on this architecture.

However, as Wagner [29] detailed, the ptrace interface, initially used by Janus for interposition in Linux, has limitations that make it unsuitable for secure applications. Cesare [7] further discusses the limitations of ptrace in the presence of hostile applications.

Attempts to overcome ptrace's limitations using other Unix mechanisms have had mixed results. Subterfugue [1] addresses argument races but incurs a severe performance penalty. Jain and Sekar [16] propose a more efficient user-level approach, but it is not entirely secure. The Solaris /proc interface, another process tracing mechanism, also has security drawbacks [29].

To support secure system call interposition, the current version of Janus uses a dedicated mechanism implemented as a loadable kernel module in Linux. A similar approach is taken by SysTrace [24], which closely resembles the current Janus design.

Other groups have explored novel system call interposition mechanisms for broader applications, such as SLIC [13] and Interposition Agents [17] for OS extensibility, and Ufo [4] for implementing a user-level filesystem. Some commercial products also use in-kernel system call interposition for application sandboxing [8, 9].

Intrusion detection via system call traces has received significant attention [10, 15, 21, 27]. This work often abstracts away real system details, working with an idealized model. Secure system call tracing faces similar challenges to secure system call interposition, but with additional complexities due to the passive nature of intrusion detection.

For readers seeking background on the Unix API, we recommend Stevens [26] or McKusick et al. [22].

## 3. The Janus Architecture
Janus can be visualized as a firewall between an application and the operating system, regulating which system calls are allowed. It consists of `mod_janus`, a kernel module providing secure system call interposition, and `janus`, a user-level program interpreting a user-specified policy to decide which system calls to allow or deny.

### 3.1. Basic Operating Model
1. **Startup**: `janus` reads a policy file specifying allowed files and network resources.
2. **Forking**: `janus` forks, the child relinquishes its resources, and the parent attaches to the child using the tracing interface provided by `mod_janus`.
3. **Execution**: The child execs the sandboxed application.
4. **Resource Access**: All new resource accesses (e.g., via `open`, `bind`) are screened by Janus to decide whether to allow the application access.
5. **Supervision**: The program runs under Janus's supervision until it ends or is killed for a policy violation. New children of a sandboxed process are also subject to the same security policy.

### 3.2. System Call Screening
When a sandboxed process attempts a system call like `open("foo")`:
1. The call traps into the kernel at the system call entry point.
2. A hook at the entry point redirects control to `mod_janus`.
3. `mod_janus` notifies `janus` of the system call request and puts the calling process to sleep.
4. `janus` wakes up, requests call details from `mod_janus`, and decides whether to allow or deny the call.
5. If allowed, the call resumes normally. If denied, an error is returned to the process, and the call is aborted.

## 4. Problems and Pitfalls
This section outlines the problems and pitfalls encountered during the development of Janus, categorized as follows: incorrectly replicating OS semantics, overlooking indirect paths to resources, race conditions, incorrectly subsetting a complex interface, and side effects of denying system calls.

### 4.1. Incorrectly Replicating the OS
To make policy decisions, Janus must obtain and interpret OS state associated with the monitored application. This can lead to two types of replication: OS state and OS functionality. Both introduce the possibility of inconsistencies leading to incorrect policy decisions.

#### 4.1.1. Incorrectly Mirroring OS State
Janus often needs OS state to make policy decisions. For example, when a process calls `ioctl` on a descriptor, Janus might need to know if the descriptor is read-only, read-write, associated with a file or socket, or has the `O_SYNC` flag set. One solution is to infer current OS state by observing past application behavior. While this avoids modifying the OS and reduces system call overhead, inferring even trivial information can be error-prone.

For instance, Janus needs to know the protocol type of IP sockets to decide whether to allow a monitored process to access them. Inferring this information from past behavior can lead to errors.