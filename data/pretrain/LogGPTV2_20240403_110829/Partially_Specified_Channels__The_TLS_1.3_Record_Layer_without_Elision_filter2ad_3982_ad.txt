2Advint-cs
CH,(cid:96) (t + O(q1 + sq2), q1, µ1)
CH (˜t, r) + 2Advsim-stat
CH,S (˜t, r) ,
where ˜t = t + O(q1 + q2) and r = (q1, q2, µ2, µ2).
This is analogous to, but much more general than [20, Theorem 4.5]. It also conﬁrms a conjecture of
FGMP; see [20, Remark 4.6]. The idea of the proof is to construct a PRIV-S adversary B from a given
PRIV-SR adversary A and simulator S that simulates A’s Recv queries using S. What we show is that
INT-CS and SIM-STAT (with respect to S) security suﬃce for this reduction to work and to obtain the
bound.
11
G1(A) G2(A)
1 declare str Env , S, bool sync, win, b
2 (Mu, Wr , Re, De) ←← Init ( )
3 b ←← {0, 1}; sync ← 1
4 b(cid:48) ←← ASend,Recv
5 return (b = b(cid:48))
(var Env )
1
Send(M0, sc0, M1, sc1)
6 L0 ← leak ((cid:96), M0, sc0)
7 L1 ← leak ((cid:96), M1, sc1)
8 if L0 (cid:54)= L1 then return (⊥,⊥)
9 (X, H, α) ←← Mux SD (Mb, scb, var Mu)
10 (C, γ) ←← Write SD (X, H, α, var Wr )
11 S ← S (cid:107) C ; return (C, γ)
Recv(C)
12 (Y, H, α) ←← Read SD (C, var Re)
13 (M, sc, γ) ←← Demux SD (Y, H, α, var De)
14 if sync and Y (cid:22) S then
S ← S % Y ; M, sc ← ⊥
16 else sync ← 0
win ← win ∨ (M (cid:54)= ⊥ ∧ sc (cid:54)= ⊥)
if win then M, sc ← ⊥
15
17
18
G3(A)
20 declare str S, bool b
21 (Mu, Wr , Re, De) ←← Init ( )
22 b ←← {0, 1}
23 b(cid:48) ←← ASend,Recv
24 return (b = b(cid:48))
(var Env )
1
Send(M0, sc0, M1, sc1)
25 L0 ← leak ((cid:96), M0, sc0)
26 L1 ← leak ((cid:96), M1, sc1)
27 if L0 (cid:54)= L1 then return (⊥,⊥)
28 (X, H, α) ←← Mux SD (Mb, scb, var Mu)
29 (C, γ) ←← Write SD (X, H, α, var Wr )
30 S ← S (cid:107) C ; return (C, γ)
Recv(C)
31 M, sc ← ⊥; γ ←← S SD (S, C)
32 return (M, sc, γ)
19 return (M, sc, γ)
Figure 5: games G1, G2, and G3 for proof of Theorem 1.
Proof of Theorem 1. Fix t, s, q1, q2, µ1, µ2 ∈ N and let r = (q1, q2, µ1, µ2). Let A = (A1,A2) be a t-time
PRIV-SR adversary with resources r and let S be an s-time simulator. We exhibit an INT-CS adversary B =
(B1,B2), a SIM-STAT adversary C = (C1,C2), and a PRIV-S adversary D = (D1,D2) such that
Advpriv-sr
CH,(cid:96) (A) ≤ 2Advint-cs
CH (B) + 2Advsim-stat
CH,S (C) + Advpriv-s
CH,(cid:96) (D) ,
where B and C run in time t + O(q1 + q2) and each uses query resources r, and D runs in time t + O(q1 + sq2)
and uses resources (q1, µ1).
The proof is by a game-playing argument; refer to games G1, G2, and G3 deﬁned in Figure 5. (Note
that the SD oracle is not explicitly deﬁned in these games; it has the same deﬁnition as in the PRIV-SR
game.) Game G1 is the PRIV-SR notion embellished with a book-keeping ﬂag win, whose value is set on
line 5:17. However, the value of win does not aﬀect the distribution of oracle outputs (or the game) in any
way. So for any A and a uniform random b ∈ {0, 1}, the random variables G1(A) = 1 and Exppriv-sr
CH,(cid:96),b(A) = b
are identically and independently distributed.
Game G2, which includes the boxed instruction at line 5:18, is identical to game G1 until the ﬂag win
gets set. By the Fundamental Lemma of Game Playing [10], we have
(cid:2) Exppriv-sr
CH,(cid:96),b(A) = b(cid:3) ≤ Pr(cid:2) G2(A) = 1(cid:3)+
Pr(cid:2) G2(A) sets win(cid:3) .
Pr
b
1
(var Env ) as follows. It samples a bit b, then executes b(cid:48) ←← A Send(cid:48),Recv(cid:48)
Next, deﬁne B Send,Recv
(var Env ).
On input of (M0, sc0, M1, sc1), oracle Send(cid:48) checks that leak ((cid:96), M0, sc0) equals leak ((cid:96), M1, sc1). If not, it
outputs (⊥,⊥); otherwise, it asks (C, γ) ←← Send(Mb, scb) and outputs (C, γ). On input of C, oracle Recv(cid:48)
asks (M, sc, γ) ←← Recv(C) and outputs (M, sc, γ). Finally, when A1 halts, algorithm B1 halts. Next, deﬁne
algorithm B2(I, var Env ) by executing O ←← A2(I, var Env ) and returning O. It is clear by the deﬁnition
of the INT-CS game that if A sets win in its game, then B also sets win in its game. Hence, for any A,
Pr(cid:2) G2(A) sets win(cid:3) ≤ Pr(cid:2) Expint-cs
CH (B) sets win(cid:3)
1
(1)
(2)
= Advint-cs
CH (B) .
12
Observe that in game G2 the Recv oracle always returns (⊥,⊥, γ), i.e., M and sc are always set to
⊥. Thus, if the status message γ were predictable without knowing the reader or demultiplexer states (Re
and De resp.), then game G2 could be simulated by a PRIV-CPA adversary, because the Recv oracle in G2
would be simulatable.
With this observation, we create game G3 from G2 by replacing the entire Recv code with the statement
“M, sc ← ⊥; γ ←← S SD(S, C)”, where S is the given simulator for the SIM-STAT security experiment. We
also remove the win and sync ﬂags, as they are no longer relevant. The deﬁnition of game G3 leads
us to deﬁne algorithm C Send,Recv
It samples a bit b ←← {0, 1} and executes b(cid:48) ←←
ASend(cid:48),Recv(cid:48)
(var Env ). Queries to Send(cid:48) are answered just as they were in the deﬁnition of B1 above. On
input of C, oracle Recv(cid:48) asks γ ←← Recv(C) and outputs (⊥,⊥, γ). Finally, when A1 halts and outputs b(cid:48),
algorithm C1 halts and outputs (b = b(cid:48)). Deﬁne C2 just as we deﬁned B1 above. Then for any A, S,
and d ∈ {0, 1},
(var Env ) as follows.
1
1
and so
CH,S,d (C) = 1(cid:3)
Pr(cid:2) G3−d(A) = 1(cid:3) = Pr(cid:2) Expsim-stat
Pr(cid:2) G2(A) = 1(cid:3) =(cid:0)Pr(cid:2) G2(A) = 1(cid:3) − Pr(cid:2) G3(A) = 1(cid:3)(cid:1)
+ Pr(cid:2) G3(A) = 1(cid:3)
CH,S (C) + Pr(cid:2) G3(A) = 1(cid:3) .
= Advsim-stat
(3)
(4)
(6)
1
Lastly, we deﬁne D Send
(var Env ) as follows. Initialize str S and execute b(cid:48) ←← ASend(cid:48),Recv(cid:48)
(var Env ).
On input of (M0, sc0, M1, sc1), Send(cid:48) asks (C, γ) ←← Send(M0, sc0, M1, sc1), computes S ← S (cid:107) C, and
outputs (C, γ). On input of C, oracle Recv(cid:48) executes γ ←← S SD(C, S) and outputs (⊥,⊥, γ). Finally,
when A1 outputs b(cid:48), halt and output b(cid:48). Next, deﬁne D2 just as we deﬁned C2 and B2 above. From the
deﬁnition of G3, it is clear that for any A,
1
(5)
Summarizing, we have that for every adversary A and simulator S, there exist adversaries B, C, and D such
that
b
CH,(cid:96),b(D) = b(cid:3) .
(cid:2) Exppriv-s
Pr(cid:2) G3(A) = 1(cid:3) = Pr
(cid:16)
CH,(cid:96),b(A) = b(cid:3)(cid:17) − 1
(cid:2) Exppriv-sr
(cid:16)
Pr(cid:2) G2(A) = 1(cid:3) + Advint-cs
CH,(cid:96) (A) = 2
(cid:16)
CH,S (C) + Pr(cid:2) G3(A) = 1(cid:3) + Advint-cs
≤ 2
≤ 2
= 2Advsim-stat
CH,S (C) + Advpriv-s
CH,(cid:96) (D) + 2Advint-cs
(cid:17) − 1
CH (B)
Advsim-stat
Pr
b
CH (B) .
(cid:17) − 1
CH (B)
Advpriv-sr
The claimed bound follows. To complete the proof, we note that B and C use query resources r and D
uses query resource (q1, µ1). Since simulating each query requires O(1) time, adversaries B and C run in
time t + O(q1 + q2), and D runs in time t + O(q1 + sq2).
Remark. We emphasize that, although we have used SIM-STAT to prove a generic composition result, the
notion is not merely a technical one. The intuition it captures is important: distinguishable error messages
have been exploited repeatedly [36, 17, 27, 3] to attack AE-powered secure-channel protocols. As a result,
there has been a considerable push in the cryptographic community to make addressing this subtlety a ﬁrst
class consideration [14, 22, 6].
5 The TLS 1.3 record layer
Our study of partially speciﬁed channels owes much to a desire to analyze the TLS 1.3 record layer, in
particular without eliding its optional features and unspeciﬁed details. So, we begin this section with an
overview of some of its salient features, and a discussion of certain design choices that may have implications
13
when the record layer is viewed through the lens of our security notions. This is followed (in Section 5.2)
by a decomposition of the record layer into its component building blocks. Then we show how to securely
compose these into a PSC that nearly formalizes the speciﬁcation; we propose a small change to the standard
that signiﬁcantly improves ﬂexibility of the scheme.
Note about the draft. This analysis pertains to draft 23 [32], current at the time of writing. Note that
the change to the record layer we suggest here will be adopted in the ﬁnal version of the protocol [30].
5.1 Overview
TLS can be viewed as three client-server protocols executing concurrently: the handshake protocol handles
(re-)initialization of the channel; the record protocol is used to exchange application data between the
client and the server; and the alert protocol is used to close the channel. The record layer refers to the
mechanism used to protect ﬂows between client and server in each sub-protocol. Each of these ﬂows is
authenticated and encrypted as soon as the client and server have exchanged key material. (Usually the only
unprotected messages are the initial client hello and part of the server hello.) Intuitively, each of these ﬂows
constitutes a logical data stream, and the record layer is a means of multiplexing these streams over a single
communications channel (e.g., a TCP connection). Among the record layer’s many design criteria is the need
to maximize ﬂexibility for implementations. This means, somewhat paradoxically, that the speciﬁcation does
not fully specify every aspect of the construction. Rather, the record-layer speciﬁcation [32, Section 5] deﬁnes
some core functionalities that must be implemented and provides a set of parameters for compliant, fully
realized schemes.
Content types. Each stream has an associated content type. Available types are handshake, application
data, alert, and change ciphersuite spec (CCS); additional content types may be added subject to certain
guidelines [32, Section 11]. If the client or server receives a message of unknown content type, it must send
an unexpected message alert to its peer and terminate the connection. The CCS type is only available for
compatibility with systems accustomed to processing records for TLS 1.2 and earlier. Usually a CCS message
must be treated as an unexpected message, but under speciﬁc conditions, it must simply be dropped.
Records. Plaintext records encode the content type, the stream fragment, the length of the fragment
(which may not exceed 214 bytes), and an additional ﬁeld called legacy record version, whose value is ﬁxed
by the speciﬁcation. (It is only present for backwards compatibility.) All ﬂows, including unprotected ones
(the initial handshake message and CCS messages) are formatted in this manner. The streams of data are
transformed into a sequence of records; stream fragments of the same content type may be coalesced into a
single record, but the record boundaries are subject to the following rules [32, Section 5.1]:
• Handshake, no interleaving: if two records correspond to a single handshake message, then they must
be adjacent in the sequence of records.
• Handshake, no spanning a key change: if two records correspond to a single handshake message, then
they both must precede the next key change (deﬁned in Section 5.1). If this condition is violated, then
the second record must be treated as an unexpected message.
• Handshake and alert, no zero-length messages: only application data records may have zero length.