title:A Proof-Carrying File System
author:Deepak Garg and
Frank Pfenning
A Proof-Carrying File System
Deepak Garg and Frank Pfenning
June 6, 2009
CMU-CS-09-123
School of Computer Science
Carnegie Mellon University
Pittsburgh, PA 15213
Abstract
This paper presents the design and implementation of PCFS, a ﬁle system that uses
formal proofs and capabilities to eﬃciently enforce access policies expressed in a rich
logic. Salient features include backwards compatibility with existing programs and au-
tomatic enforcement of access rules that depend on both time and system state. We
rigorously prove that enforcement using capabilities is correct, and evaluate the ﬁle
system’s performance.
This work was supported partially by the iCAST project sponsored by the National Science Council,
Taiwan, under grant no. NSC97-2745-P-001-001, and partially by the Air Force Research Laboratory
under grant no. FA87500720028.
Keywords: Access control, proof carrying authorization, ﬁle system
1
Introduction
There is a signiﬁcant mismatch in the complexity of ﬁle access policies prevalent in
large organizations like intelligence and military establishments, and the sophistication
of mechanisms currently available for their enforcement. Policies often rely on high level
concepts like delegation of rights, time-based expiration of credentials, and attributes of
individuals and ﬁles, whereas the only available mechanism for enforcing these policies
in ﬁle systems today is access control lists. Translating the intent of complex policy
rules to these low level lists, and keeping the latter up-to-date with respect to changing
credentials requires substantial and continuous manual eﬀort and is a source of many
policy enforcement errors.
These considerations suggest the need for an architecture that represents the high-
level intent of policy rules directly, and automatically enforces access control. Proof-
carrying authorization (PCA) [7–9] is a promising, open-ended architecture for this
purpose; it has previously been applied to web services and distributed access control for
physical devices. In PCA, policy rules are represented as logical formulas at a high level
of abstraction and enforced automatically with proofs. However, during each access to
a resource, a logical proof that establishes relevant access rights for the calling process
must be veriﬁed. This is a slow process that takes tens or hundreds of milliseconds,
making the architecture infeasible for a realistic ﬁle system.
This paper presents the design and implementation of a ﬁle system that adapts
PCA to provide direct and eﬃcient enforcement of complex access policies. Like PCA,
access in the ﬁle system depends on proofs, and hence we call it the Proof-Carrying File
System (PCFS). To be precise, however, access requests in PCFS do not actually carry
proofs in them as they do in PCA. Instead, proofs are veriﬁed by a trusted program in
advance of access, and exchanged for capabilities that are used to authorize access. By
combining proofs and capabilities in this manner, PCFS retains PCA’s high-level policy
enforcement, without the bottleneck due to veriﬁcation of proofs at the point of access.
Brieﬂy, PCFS works as follows. The access policy is represented as a set of logical
formulas and distributed to users in the form of digital certiﬁcates signed by policy ad-
ministrators. A user constructs formal proofs which show that the policy entails certain
permissions for her. Each proof is checked by a trusted proof veriﬁer which gives the user
a signed capability in return. This capability, called a procap (for proven capability),
can be used repeatedly to get authorized access to the ﬁle system. A capability can be
checked in a few microseconds. As a result, ﬁle access in PCFS is very eﬃcient. Another
merit of exchanging proofs for capabilities in advance of access is that the implemen-
tation factors into two parts that interact via capabilities only: (a) the front end that
deals with policies, proofs and generation of capabilities, and (b) the backend that uses
capabilities to authorize access and perform I/O. Indeed the PCFS backend is indepen-
dent of the logic used in the front end, and it can be used with any policy infrastructure
that produces compatible capabilities.
Besides the fact that PCFS is the ﬁrst implementation of a ﬁle system that uses
logic for rigorous, automatic, and eﬃcient policy enforcement, we believe that our work
makes three technically challenging contributions. The ﬁrst contribution is an expressive
logic for writing policies, called BL, which allows a novel combination of user-deﬁned
predicates, predicates that capture the state of the system, and rules and credentials
1
that are valid only in stipulated intervals of time. The latter two allow representation
of policy rules that depend on ﬁle meta data (like extended attributes), as well as rules
that expire automatically.
Second, we develop an end-to-end enforcement mechanism for such rich policies.
This is non-trivial because constraints about time and system state that occur in logical
formulas must also be reﬂected in proofs, and subsequently in capabilities that are used
for enforcement. For this reason, capabilities used in PCFS are conditional on the time
of access and the prevailing system state. In addition to the implementation, we prove
a theorem which shows that enforcement using capabilities is sound with respect to a
PCA-like enforcement where proofs are checked directly at each access.
Third, as opposed to all existing implementations that use PCA or related mecha-
nisms for enforcement of policies, PCFS is compliant with the POSIX ﬁle system call
interface, and is backward compatible with existing programs. This is made possible
due to two design decisions. First, instead of requiring programs to pass capabilities
during ﬁle system calls, capabilities are put in an indexed store on disk from where they
are read by the ﬁle system interface (hence existing programs don’t have to change).
Second, when a new ﬁle is created, the user creating the ﬁle automatically gets access
to the ﬁle for a ﬁxed period of time. As a result, programs can freely create and use
temporary ﬁles, without requiring administrators to create policies to govern them.
The intended deployment for PCFS is in ﬁle servers where multiple users log into
the same machine and access shared ﬁles, which need to be protected through complex
rules. Another interesting application of the PCFS architecture could be in situations
where the storage is not powerful enough to verify complete proofs, but has enough
computational power to check the much simpler capabilities (e.g., in embedded devices).
We also expect that this combination of logic and capabilities can be used for access
control in other operating system interfaces besides ﬁle systems.
Organization. The rest of this paper is organized as follows. In Section 2 we introduce
the architecture of PCFS and its various components. Section 3 covers the logic used
to represent policies, its features and meta-theoretic properties. Section 4 describes the
front end of the ﬁle system including our implementation of certiﬁcates, automatic proof
search, and proof veriﬁcation that creates procaps. Section 5 discusses the backend of
the ﬁle system that uses procaps to authorize permissions. Section 6 evaluates PCFS in
terms of expressiveness and performance. Section 7 discusses related work, and Section 8
concludes the paper.
2 Overview of PCFS
PCFS is implemented as a local ﬁle system for the Linux operating system. It is based
on the Fuse kernel module [2]. Technically, PCFS is a virtual ﬁle system since it uses an
underlying ﬁle system (ext3 in all experiments reported in this paper) to perform I/O
after relevant access checks are made. PCFS is mounted using the command:
$> sudo pcfs-main /path/to/src /path/to/mountpoint
Here /path/to/src is an existing directory in an ext3 system, and /path/to/mountpoint
is an empty directory. After the execution of this command, any ﬁle system call on
2
Figure 1: PCFS Workﬂow
a path like /path/to/mountpoint/foo/bar results in a corresponding operation on
/path/to/src/foo/bar, but is subject to rigorous access checks.
Access checks in PCFS rely on a combination of proof-carrying authorization (PCA)
[7–9] and cryptographic capabilities. PCA provides the backbone for enforcement of the
access policy through formal logic and digital certiﬁcates, while capabilities are used
to improve eﬃciency. We consider this combination a novel contribution of this work,
although capabilities have been used in other settings in the past to oﬀset the cost of
access checks [6, 20, 28, 31, 32]. Capabilities in PCFS are called proven capabilities, or
procaps, since they are obtained by verifying formal logical proofs. A detailed comparison
of PCFS to existing access control systems based on PCA is provided in Section 7.
Figure 1 shows the PCFS workﬂow. Numbers are used to label steps in order of
occurrence. Steps 1–6 create and store procaps which show that a user is allowed certain
permissions in the ﬁle system. These steps are performed in advance of ﬁle access, and
happen infrequently (usually when a user accesses a ﬁle for the ﬁrst time). Once procaps
are stored, they can be used repeatedly to perform ﬁle operations (steps 7–12). The
solid black vertical line in the diagram separates parts that happen in user space, i.e.,
before and after a ﬁle system call (left side of the line) from those that happen during
a ﬁle system call (right side of the line).
In the following we describe the steps of Figure 1 in some detail. Brieﬂy, policy
enforcement in PCFS follows the path:
Policy → Proof → Procap → File access
3
FILE­APIDataProof, certificate verifierProof searchadmin saysmay (...) admin saysmay (...) admin saysmay (...) admin saysmay (...) admin saysmay (...) admin saysmay (...) admin saysmay (...) admin saysmay (...) UseryesDatanoError/ErrorProcapStorePCFSHandlerProcapOK?File system callAdministratorsadmin saysmay (...) admin saysmay (...) admin saysmay (...) admin saysmay (...) 1234567891011a11b11c12Storage(Ext3)admin saysmay (...) admin saysmay (...) admin saysmay (...) admin saysmay (...) PoliciesProofProcapSecret keyLegendPolicy creation (Step 1). We deﬁne a policy as a set of rules and facts which deter-
mines access rights. An access right is a triple (cid:104)k, f, η(cid:105), which means that user k (Alice,
Bob, etc) has permission η (read, write, etc) on ﬁle or directory f. We allow diﬀerent
rules and facts in a policy to be created by diﬀerent individuals called administrators
(this is necessary to faithfully represent separation of duty in many organizations). We
require that each administrator write her portion of facts and rules as logical formulas
in a text ﬁle and digitally sign the ﬁle with her private key. This signed ﬁle is called a
certiﬁcate. In a concrete sense, therefore, a policy is a collection of certiﬁcates signed by
diﬀerent administrators. Abstractly, a policy is a collection of logical formulas that are
contained in the certiﬁcates. We often denote this collection of logical formulas with the
symbol Γ. Representing a policy as logical formulas as opposed to, say, natural language
has the advantage that its meaning becomes unambiguous through the logic’s inference
rules. Logical representation is also amenable to automatic enforcement. PCFS pro-
vides its own logic, BL, for writing logical formulas. BL is more expressive than prior
logics designed for similar purposes, and its syntax and proof system are described in
Section 3.
PCFS provides a command line tool, pcfs-cert, to help administrators check for-
mulas for adherence to logical syntax, to digitally sign them, and to convert them to
a custom certiﬁcate format.
(We could have used a standard certiﬁcate format like
X.509 [23], but found it easier to create our own format.) Policy rules and facts in
practice generally follow speciﬁc templates, and we expect that our command line tool
can be replaced by GUIs. We do not assume a centralized store for certiﬁcates. Instead
they are distributed to users to whom they grant permissions. Typically, some certiﬁ-
cates are created once and used for many months or years, whereas others are created
as events happen in the system. As a result of the latter, the policy itself is not static,
but changes over time.
Proof generation (Steps 2–3). Once certiﬁcates have been created by adminis-
trators and given to users, the latter use them to show that they are allowed certain
permissions in the ﬁle system. The basic tenet of PCFS (adapted from PCA) is that
a user k is allowed permission η on resource f at time u, if and only if the user can
provide a formal logical proof M which shows that the policies in eﬀect (Γ) entail a ﬁxed
formula auth(k, f, η, u), or in formal notation, M :: Γ (cid:96) auth(k, f, η, u). The formula
auth(k, f, η, u) is deﬁned in Section 3.
To help users construct the proof M, PCFS provides an automatic theorem prover,
through the command line tool pcfs-search. This tool is based in logic program-
ming [27] (see Section 4 for a brief description of our approach). Figure 1 shows the user
giving the policy (certiﬁcates) to the proof search tool in step 2, and the proof search
tool returning a proof in step 3. A typical proof construction in PCFS takes several
hundred milliseconds. A salient point is that the proof search tool is not a trusted
component of PCFS and it is perfectly alright for a user to create her own proof search
tool or even use a heuristic-based method or decision procedure to construct proofs in
speciﬁc cases.
Proof veriﬁcation (Steps 4–5). Once the user has constructed a proof M, this
proof, together with the certiﬁcates used to construct it, is given to a proof veriﬁer,
4
invoked using another command line program pcfs-verify (Step 4 in Figure 1). The
code of the veriﬁer is simpler than that of the prover and it must be trusted. The veriﬁer
checks that the logical structure of the proof M is correct, and that all certiﬁcates used
in the proof are genuine, i.e., their digital signatures check correctly. If both these hold,
then the veriﬁer gives back to the user a procap, which is a capability that mentions the
right (cid:104)k, f, η(cid:105) that the proof grants (Step 5). The procap also contains some conditions
on which the proof depends and is signed using a shared symmetric key that is known
only to the veriﬁer and the ﬁle system interface (see Section 4 for details). A typical
proof veriﬁcation including creation of a procap takes several tens or a few hundred
milliseconds, depending on the size of the proof.
Procap injection (Step 6). After receiving a procap, the user calls another command
line tool which puts the procap in a central store marked “Procap Store” in Figure 1.
This store is in a designated part of the PCFS ﬁle system, and is accessible to both users
as well as the system interface. The system interface looks up this store to ﬁnd relevant
procaps when ﬁle system calls are made. The organization of the store is described in
Section 5.
File system call (Step 7). A call to the PCFS ﬁle system is made through the
usual POSIX ﬁle system API during the execution of a user program or through a
shell command like ls, cp, rm, etc. The PCFS backend respects the standard POSIX
interface, so user programs and shell commands don’t need to change to work on it.
However, before a program is started or a shell command is executed, the user must
ensure that procaps granting the executing process all needed permissions have been
created and injected using Steps 2–6. Alternatively, the program may be augmented to
possibly create, and certainly inject, procaps on the ﬂy.
Procap look up and checking (Steps 8–10). When a system call is made on a
PCFS ﬁle system, it is redirected by the Linux kernel to a process server which we have
written (Step 8 in Figure 1). Depending on the speciﬁc operation requested, this server
looks up one or more procaps in the procap store (Steps 9 and 10). The exact procaps
needed for each operation vary, and are listed in Section 5. If all relevant procaps are
found, they are checked. Checking a typical procap takes only 10–100µs (cf. the time
taken to check a proof, which is of the order of tens or hundreds of milliseconds). Details
of procap checking are presented in Section 4.
Error (Steps 11a, 12).
ation is missing, or fails to check, an error code is returned to the user program.
If any procap needed for performing the requested ﬁle oper-
If all relevant procaps needed to perform the
File operation (Steps 11b, 11c, 12).
requested ﬁle operation are found, and successfully check, then the underlying ext3 ﬁle
system is used to perform the requested ﬁle operation (Step 11b). The result of the
operation is returned to the user (Steps 11c and 12).
5
2.1 Implementation
The PCFS implementation can be roughly divided into two parts: (a) the front end,
which comprises the command line tools for creating certiﬁcates, constructing proofs,
checking proofs to create procaps, and injecting procaps into the central store (Steps 1–6
in Figure 1), and (b) the backend which handles the calls from the Fuse kernel module,
looks up procaps in the store, checks them, and then makes calls on the underlying ﬁle
system to perform disk operations (Steps 8–11c in Figure 1). The two parts interact
via procaps which carry information from logical proofs into the ﬁle system’s interface.
The front end (with the exception of the procap injection tool) is based in logic, and the
technical challenge there has been the development of a well-founded logic (BL) that is
not only expressive, but that can also be eﬃciently implemented. Our implementation
of the front end tools is written in Standard ML, and comprises nearly 7,000 lines of
code. OpenSSL is used for all cryptographic operations. Because the front end tools
are used less frequently than the backend, their eﬃciency is also less of a concern. The
backend is the bottleneck for performance and needs to be extremely eﬃcient.
It is
implemented in C++ using approximately 10,000 lines of code.
3 BL: The Authorization Logic
PCFS provides a logic for expressing policies, which we call BL, and outline in this
section.1 A detailed description of the logic’s proof system and meta theory is deferred
to Appendix A. BL is an extension of ﬁrst-order intuitionistic logic with two modalities
that have been studied in prior work [5, 16, 24]: k says s, which means that principal
k states or believes formula s, and s @ [u1, u2] which means that s holds from time u1
to time u2. The former is used to distinguish in the logic parts of the policy made by
diﬀerent individuals whereas the latter is needed to accurately represent time-dependent
rules. The logical interpretation of k says s in BL is diﬀerent from that in any existing
work. This new interpretation is designed to facilitate fast proof search. In addition to
these modalities, BL supports constraints, which are relations between terms decided
using external decision procedures not formalized in the logic (e.g., the usual order ≤
on integers). BL also supports predicates that capture the state of the ﬁle system.
Formulas in BL are denoted using the letters s and r. The syntax of BL is summarized