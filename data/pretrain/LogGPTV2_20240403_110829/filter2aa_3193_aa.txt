CANSPY: a Platform for Auditing CAN Devices 
Arnaud Lebrun 
Airbus Defence and Space 
PI:EMAIL 
Jonathan-Christofer Demay 
Airbus Defence and Space 
PI:EMAIL 
ABSTRACT 
In the past few years, several tools have been released allowing hobbyists to connect to CAN buses found in cars. This is welcomed as the 
CAN protocol is becoming the backbone for embedded computers found in smartcars. Its use is now even spreading outside the car through 
the OBD-II connector: usage-based policies from insurance companies, air-pollution control from law enforcement or engine diagnostics 
from smartphones for instance. Nonetheless, these tools will do no more than what professional tools from automobile manufacturers can 
do. In fact, they will do less as they do not have knowledge of upper-layer protocols. 
Security auditors are used to dealing with this kind of situation: they reverse-engineer protocols before implementing them on top of their 
tool of choice. However, to be efficient at this, they need more than just being able to listen to or interact with what they are auditing. 
Precisely, they need to be able to intercept communications and block them, forward them or modify them on the fly. This is why, for 
example, a platform such as Burp Suite is popular when it comes to auditing web applications. 
In this talk, we present CANSPY, a platform giving security auditors such capabilities when auditing CAN devices. Not only can it block, 
forward or modify CAN frames on the fly, it can do so autonomously with a set of rules or interactively using Ethernet and a packet 
manipulation framework such as Scapy. It is also worth noting that it was designed to be cheap and easy to build as it is mostly made of 
inexpensive COTS. Last but not least, we demonstrate its versatility by turning around a security issue usually considered when it comes to 
cars: instead of auditing an electronic control unit (ECU) through the OBD-II connector, we are going to partially emulate ECUs in order to 
audit a device that connects to this very connector. 
CCS Concepts 
• Networks➝Bus networks • Security and privacy➝Embedded systems security • Security and privacy➝Penetration testing.   
Keywords 
Controller Area Network; Man-in-the-middle attack; Smart vehicle; Security audit. 
1. INTRODUCTION 
In the past years, the increasing addition of embedded computers in cars known as Electronic Control Unit, or ECU, has improved vehicle 
performances as well as safety and comfort for the occupants. As far as the latter point is concerned, it comes along with the need to make 
the car connected (i.e., Wi-Fi, Bluetooth, USB or even mobile broadband). As the car’s use of new technologies increases, so does the 
attack surface. That much has been proven in the recent years and on numerous occasions by security researchers. As a matter of fact, they 
have demonstrated that the worst possible scenario can become reality: a malicious individual remotely endangering the vehicle’s 
occupants as well as the nearby vehicles on the road [1]. It is worth noting that, to achieve such result, it is usually needed to go beyond the 
compromise of an embedded computer exposed by the attack surface and expand the compromise deeper in the car. 
To ensure that such scenarios will not happen outside the laboratories of security researchers, automobile manufacturers have started to 
mandate information security firms to conduct audits on current ECUs to assess the risks the vehicle is exposed to and, if need be, craft 
remediation plans before damage has already been done. To go farther with this approach, they also mandate audits on prototype ECUs 
with the explicit aim of fixing security issues at the earliest possible stage. Regarding the case of prototypes, it is worth mentioning that, not 
only it greatly reduces the risk of a vulnerability to ever be present in a commercial vehicle, it is also the most cost-effective approach. 
Auditing ECUs is fairly new for information security firms and there is still a great deal of work to be done regarding the methodology and 
the tools. Indeed, security auditors are costly resources for automobile manufacturers, meaning that they usually have much less time to 
find vulnerabilities than security researchers. On the other hand, unlike security researchers, they work with the assistance of engineers 
from the automobile manufacturer. Nonetheless, improving efficiency and thus cost-effectiveness is always at stake for security auditors. 
In this paper, we will focus on two aspects: auditing ECUs that are not directly exposed by the attack surface and, more precisely, auditing 
them using a penetration testing approach. To that end, after giving an overview of the datalink protocol ECUs use to communicate with 
each other, we will go through the penetration testing methodology when applied to this particular case. Then, we will present CANSPY, a 
platform providing security auditors with the ability to intercept communications and block them, forward them or modify them on the fly 
with standard penetration testing tools. Finally, we will demonstrate the versatility and the efficiency of CANSPY by turning around a 
security issue usually considered when it comes to cars: instead of auditing an ECU through the OBD-II connector, we are going to 
partially emulate ECUs in order to lay the groundwork needed to audit a device that connects to this very connector. 
2. CAN: CONTROLLER AREA NETWORK 
The Controller Area Network or CAN is a multi-master serial bus standard initially designed for vehicle applications but is now used in 
several other industries (e.g., the aerospace industry). In this section, we will cover the most important aspects of this standard. 
2.1 CAN LAYERS 
The CAN standard specifies the physical and datalink layers of the OSI model. More specifically, ISO 11898-2 and 11898-3 cover the 
physical layer respectively for high-speed and low-speed (i.e., fault-tolerant) transmission while ISO 11898-1 covers the datalink layer. 
Higher-layer protocols are not covered by ISO 11898 and several other standards haven been designed to address them (e.g., ISO15765-2). 
At physical level, communications rely on differential signaling, meaning that electrical transmission is using two complementary signals. 
Receiving nodes then measure the difference between the two signals (e.g., ECUs for vehicles, see Figure 1 for illustration). The benefits of 
this compared to measuring the difference between a single wire and a ground are robustness against signal noise and fault tolerance. More 
specifically, communications relies on balanced differential signaling which means that the flows of both signals are equal but opposite in 
direction (i.e., high and low signals). Over a twisted-pair cable, as in the case of the CAN standard, balanced differential signaling enhances 
even further the noise-robustness capabilities. Furthermore, additional noise immunity is achieved by maintaining the differential 
impedance at low level with 120 ohms resistors at each end of the bus. 
Figure 1. Diagram of a single CAN bus 
Regarding the datalink layer, let us first focus on the Media Access Control sublayer (MAC). To handle collision issues, it relies on the 
CSMA/CR mechanism: Carrier Sense Multiple Access with Collision Resolution. This is a lossless bitwise arbitration method of collision 
resolution while transmitting. The key aspects behind this mechanism are the following: 
The logical 0 is a dominant bit (i.e., a high voltage state). 
The logical 1 is a recessive bit (i.e., a low voltage state). 
The idle state is represented by the recessive state (i.e., a logical 1). 
Each node always listens to the bus including when it is transmitting. 
As a result, if two or more nodes start transmitting at the same time, the collision is resolved by the following behavior: 
If all nodes transmit the same bit, dominant or recessive, none of them can detect the collision since the observed voltage state is 
the expected one and the transmission thus continues for each one of them. 
If one or more nodes transmit a dominant bit while the others transmit a recessive one, the latter will detect the collision as they 
listen to the bus and therefore stop transmitting while the former continue with the transmission. 
This arbitration continues until there is only one node transmitting on the bus. 
All the nodes that lose arbitration wait for the next time the bus is in an idle state to try transmitting again. 
In the case of the CAN standard, this arbitration is supposed to be over by the time each node has transmitted the ID, meaning that the 
lower the ID is, the better priority the message has. This also means that, within a single CAN bus, every ID must be unique to a type of 
messages, a given type of messages can only be transmitted by one particular node and a node can however transmit multiple types of 
messages. On that regard, Table 1 and Table 2 provide a complete overview of both base and extended frame formats. To continue with the 
CAN frame format, let us now focus on some of the aspects associated with the Logical Link Control sublayer (LLC). 
Table 1. The CAN base frame format (source: Wikipedia) 
NAME 
LENGTH (BITS) 
DESCRIPTION 
Start-of-frame 
1 
Denotes the start of frame transmission. 
Identifier 
11 
A unique identifier which also represents the message priority. 
Remote transmission request (RTR) 
1 
Logical 0 for data frames and logical 1 for remote request frames 
Identifier extension bit (IDE) 
1 
Logical 0 for base frame format with 11-bit identifiers 
Reserved bit (r0) 
1 
Reserved bit 
Data length code (DLC) 
4 
The number of bytes of data 
Data field 
0-64 
The data to be transmitted (length dictated by the DLC field) 
CRC 
15 
Cyclic redundancy check 
CRC delimiter 
1 
Must be recessive (logical 1) 
ACK slot 
1 
A recessive bit (logical 1) for the transmitter 
ACK delimiter 
1 
Must be recessive (logical 1) 
End-of-frame (EOF) 
7 
Must be recessive (logical 1) 
Table 2. The CAN extended frame format (source: Wikipedia) 
NAME 
LENGTH (BITS) 
DESCRIPTION 
Start-of-frame 
1 
Denotes the start of frame transmission 
Identifier A 
11 
First part of the unique identifier which also represents the message priority 
Substitute remote request (SRR) 
1 
Must be recessive (logical 1) 
Identifier extension bit (IDE) 
1 
Logical 1 for extended frame format with 29-bit identifiers 
Identifier B 
18 
Second part of the unique identifier which also represents the message priority 
Remote transmission request (RTR) 
1 
Logical 0 for data frames and logical 1 for remote request frames 
Reserved bits (r1, r0) 
2 
Reserved bits 
Data length code (DLC) 
4 
Number of bytes of data 
Data field 
0–64 
Data to be transmitted (length dictated by the DLC field) 
CRC 
15 
Cyclic redundancy check 
CRC delimiter 
1 
Must be recessive (logical 1) 
ACK slot 
1 
A recessive bit (logical 1) for the transmitter 
ACK delimiter 
1 
Must be recessive (logical 1) 
End-of-frame (EOF) 
7 
Must be recessive (logical 1) 
Transmission using data frames is pretty straight forward. The interesting aspect here is the acknowledgment mechanism. It relies on the 
ACK slot: while the transmitting node is setting the field with a recessive bit, any other node will overwrite it with a dominant bit if it does 
not detect an error. When that occurs, the transmitting node becomes aware that the frame has been properly received by at least one node. 
In the opposite situation, the frame is queued again for transmission until proper reception or until a timeout occurs. 
Finally, one last aspect deserving a bit of explanation: Remote Transmission Request (RTR) frames. Usually, on a CAN bus, the nodes are 
transmitting data frames on their own, leaving it to the other nodes to decide whether or not to process the transmitted data. However, it is 
possible for a node to request specific data by using a RTR frame with the proper identifier field. In this situation, the transmitted frame 
differs in the following ways: 
The RTR field is set with a recessive bit (i.e., a logical 1). 