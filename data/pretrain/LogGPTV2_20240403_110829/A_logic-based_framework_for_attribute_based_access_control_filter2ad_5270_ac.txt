• Ψ0 ↑ (P ) = Vf alse, where Vf alse assigns F (false) to
all instantiated atoms.
• Ψα+1 ↑ (P ) = Ψ(Ψα ↑ (P )) for every successor ordinal
α.
• Ψα ↑ (P ) =
α.
(cid:1)
β j → R(ai) ≥ R(aj), where
R(aj) is the rank of aj. Suppose m is the largest rank in A.
That is, m =max{R(a) : a ∈ A}, and let C(A, i) =| {R(aj) :
R(aj) = i} | for every i ≤ m. That is, C(A, i) is the number
of predicates with rank i. Then deﬁne R(A), the rank of the
multiset A as the vector (C(A, m), . . . , C(A, 0)). We order
multi set ranks (that is (C(A, m), . . . , C(A, 0))) lexicographi-
cally.
Deﬁnition 5 specify the ranks for ground instances of re-
served predicates, their multisets and ABAC rules. Using
our operational semantics, we show that any application of
an ABAC rule reduces the rank of the rule state, and there-
fore must terminate ﬁnitely.
Lemma 1
(properties of ranks). Suppose h←B is
an ABAC rule with a ground fourth attribute. Then R(h) >
R(b) for any reserved predicate b in the body B. Further-
more, suppose that (A∪{p(2s)}, C) →1 (A∪ B, C ∪ C”∪{2s =
2t}) is a one-step derivation where p(2t)←B, C” is a rule in P
and p(2s)←B, C” is a named apart instance of p(2s)←B, C”.
Then R(A ∪ {p(2s)}) > R((A ∪ B). Here p(2s) and p(2t) must
have ground fourth attributes.
Proof: See the appendix. We now use lemma 1 to show
that ABAC queries terminate.
Theorem 1
(finite termination of ABAC queries).
Every ABAC query (A, C) either fails or succeeds, where A
is a reserved predicate with a ground fourth attribute.
Proof: See the appendix.
As a corollary, we now obtain that any ABAC query al-
ways gives a yes or no answer, implying that all three valued
models have only two truth values true and false, as stated
in the follwing corollary.
Corollary 1. Every three valued model of a ABAC pol-
icy assigns either T or F for reserved predicates where the
fourth attribute is instantiated. In that case, bottom-up se-
mantics and the well-founded constructions assigns the same
truth values to the same predicate instances and have the
same answer sets.
Proof: See [BS04].
Corollary 1 shows that in ABAC every request is either
honored or rejected. But the ABAC model is not a ﬁxed
point of the Φ operator , as it is well known that the closure
ordinal of the Φ operator is not ω [FBJ90, Fag97]. ([FBJ90]
gives a simple counter example)
5. OPTIMIZING ABAC POLICIES
One of the major criticisms levied against using (con-
strained) logic programs is their runtime ineﬃciency due
to the backtracking through program clauses. Although
general complexity bounds arising out of constraint solvers
cannot be totally avoided, we choose two techniques (among
many available techniques such as stack copying, constraint
optimization etc) to reduce this ineﬃciency. The ﬁrst is to
transform any ABAC policy into one with lesser backtrack-
ing but the same semantics - generally referred to as program
transformations. The second is to materialize commonly ac-
cessed predicates instances. We discuss them in order, and
show that they provide the same level of eﬃciency.
5.1 Applying Program Transformation Tech-
niques to ABAC Policies
As stated, the objective is to transform an ABAC pol-
icy into one that is semantically equivalent policy, but with
lesser runtime overheads. General techniques of this kind
grew out of program transformation work for functional lan-
guages by Burstall and Darlington [BD77], and were later
applied to logic programming by Tamaki and Sato [TS84].
They are comprehensively surveyed by Petrossi et al. [PP98].
Etalle et al.
[EG96], Maher [Mah93] and some reverences
quoted therein have extended these results to constraint
logic programming.
In this section we develop a policy
rewriting algorithm based on the work of Etalle et al. [EG96]
for a restricted class of policies that use only Horn clauses.
The reason for this limitation is imposed upon the theorems
proved in [EG96] that we use as the basis of our algorithm.
Our ongoing work address extending them to constructive
negation ala Fagas. First we state results used from [EG96]
in our algorithm. Toward that end, deﬁnition 6 specify the
program transformations we propose to apply to ABAC poli-
cies.
Definition 6
(CLP transforms). Suppose cl is the
rule A←C, H, K in the ABAC policy P where H and K
are respectively a non-constraint predicate and a sequence of
them. Then:
Unfolding: Let cl be the rule A←C, H, K and cli be Hi←
Ci, Bi for all i ≤ n. Let {cli | 1 ≤ n} be all rules in
P where C ∧ Ci ∧ (H = Hi) is satisﬁable. Let cl
(cid:3)
i be
the clause A←C ∧ Ci ∧ (H = Hi), Bi. Then unfolding
H in P consists of replacing cl by the collection {cli :
= P\{cl}∪{cli :
1 ≤ i ≤ n} to obtain P(cid:3)
1 ≤ i ≤ n}.
. That is, P(cid:3)
Clause Splitting: Let cli be the rule Hi←Ci, Bi where
{Hi←Ci, Bi | 1 ≤ i ≤ n} are all clauses in P such that
every c ∧ Ci ∧ (H = Hi) is satisﬁable. Let cl
(cid:3)
i be the
rule A←C ∧ Ci ∧ (H = Hi), H, K for all i ≤ n. If for
any i, j ∈ [1, n], C∧Ci∧Cj∧(Hi = Hj) is inconsistent,
then replace cl with the collection {cli : 1 ≤ i ≤ n} to
= P \ {cl} ∪ {cli : 1 ≤ i ≤ n}.
obtain P(cid:3)
Accordingly, splitting is an unfolding in which bodies
of the unfolding clauses are not replaced.
. That is, P(cid:3)
Clause Removal: Let cl be the cluse H←C, B in P where
C is unsatisﬁable. Then remove cl from P to obtain
P(cid:3)
. That is, P(cid:3)
= P \ {cl}.
Constraint Replacement: Suppose C
is a constraint where
every successful derivation of B →∗ D satisﬁes (C ∧
D) ↔ (C
, B.
(cid:3) ∧ D). Then replace H←C, B by H←C
(cid:3)
(cid:3)
Theorem 2 from [EG96] says that program transforma-
tions in deﬁnition 6 do not alter the semantics of ABAC
policies.
Theorem 2. Suppose P(cid:3)
is obtained from P by apply-
ing any ﬁnite sequence of program transformations stated
in deﬁnition 6. Then P and P(cid:3)
have the same answer set
semantics.
Proof: See [EG96].
Algorithm 1 policy transformation algorithm
INPUT : An ABAC Policy P
OUTPUT : An ABAC Policy P(cid:3)
as P
with the same semantics
Loop for predetermined number of times for rules without
dercando(-,-,(-),-) heads
if rule H←C, B ∈ P then
(cid:3)
B.
(cid:3)
remove rules with unsatisﬁable con-
%%Comment:
straints.
Apply constraint solver to C
if C is inconsistent then remove {H←C, B} from P
%%Comment: reduce constraints
else let C
H←C, B by H←C
be the reduced constraint of C. Replace
else if for rule A←C, H, K where {Hi←Ci, Bi | 1 ≤ i ≤
n} are the only clauses in P and c ∧ Ci ∧ (H = Hi) is
satisﬁable for all i ≤ n then
if for any i, j ∈ [1, n], Ci∧Cj∧(Hi = Hj) is inconsistent
then
%% Comment: apply splitting
replace A←C, H, K by the rule set {A←C ∧ Ci ∧
(H = Hi), H, K}.
else %%Comment: apply unfolding