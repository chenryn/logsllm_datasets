quite sensitive information. For example, attackers
can use shouldOverrideUrlLoading(WebView view,
String url) to intercept the URL and extract the
access token for OAuth implicit ﬂow authorization.
4. Network Trafﬁc Manipulation APIs. These APIs
can provide attackers with the ability to monitor/-
modify network trafﬁcs between the WebView and
the remote server.
From Table 1, we can conclude that both Android and
iOS provide powerful APIs for developers to manipulate
quite sensitive Web resources. A study about how these
APIs are used by developers is quite urgent to help
us understand its security implications in real-world.
1Web storage includes localStorage and sessionStorage (see http
s://www.w3.org/TR/webstorage/). This paper refers any data
saved on the device by a WebView as “Local Storage”, not only the
data saved by HTML5 localStorage API.
Considering that Android is the most popular mobile
platform and convenient to collect a large volume of
apps, we base our empirical study on Android.
3 XPMChecker
To support a large-scale empirical study of Web resource
manipulation behaviors in real-world apps, this paper
designs an automatic tool, named XPMChecker to rec-
ognize this behavior in apps. This section ﬁrst describes
the challenges met in automatically checking of cross-
principal manipulation behaviors and then details the
design of XPMChecker.
3.1 Challenges and Ideas
According to the deﬁnition of XPM, we need to check
whether app principal and Web principal are the same.
However,
it is non-trivial to automatically recognize
cross-principal manipulation of Web resources. It at least
faces the following challenges.
• Vague App Principal. According to same-origin
policy, the security principal of a Web resource is
identiﬁed by a triple (i.e.
protocol, host, port).
However, there lacks a way to name the security
principal of app code. Meanwhile, host apps often
incorporate third-party libraries and SDKs, making
it quite challenging to identify the principals for
different app code.
• Naming Diversity. Web principal and app principal
are extracted from different sources and use dif-
ferent naming conventions for their identity, thus
two kinds of naming diversity are introduced: poly-
morphism and abbreviation. Polymorphism is that
the Web resource and app code may come from
the same provider but they use different terms as
their identities. Abbreviation is also very common,
e.g. both “facebook” and “fb” represent the same
company. Obviously,
it is a huge challenge to
1186    27th USENIX Security Symposium
USENIX Association
correctly determine whether the Web principal and
app principal represent the same party.
Main Ideas. After manually analyzing several apps
with Web resource manipulation behaviors, we learn
some insights to design XPMChecker. Basically speak-
ing, our solution is composed of the following two ideas.
• Using code identity information to indicate app
principal. Although there is no existing identiﬁers
to represent app principal, we ﬁnd some indicators
extracted from the code can represent app principal.
For example, we can use Java package name, app
name, etc. Furthermore, we could recognize third-
party libraries in an app and use different app
principal indicators based on their code.
• Leveraging search engine to compare Web principal
and app principal.
It is hard to automatically
determine whether a Web principal and an app
principal belong to the same party. Our idea is to
leverage search engine knowledge. The insight is
that the search results for a Web principal and an
app principal should be highly related if they belong
to the same party.
3.2 Design Overview
Based on the above ideas, we design and implement
XPMChecker which is capable of automatically rec-
ognizing XPM behaviors in real-world Android apps.
Figure 2 presents the workﬂow of XPMChecker. Overall
speaking, XPMChecker is composed of the following
three key components.
• Static Analyzer accepts an Android APK ﬁle as
input, locates all possible Web resource manipula-
tion points and collects manipulation information
for each manipulation point. The manipulation
information include the manipulated Web URL and
manipulating context. Static Analyzer records all
the information into a database for further analysis.
• Principal Identiﬁer identiﬁes Web Principal and
App Principal for each manipulation point with
the manipulation information in the database.
• XPMClassiﬁer gives a ﬁnal decision about whether
a Web resource manipulation point
is cross-
principal or not by leveraging nature language
processing techniques and search engines.
Since our study mainly targets Android, XPMChecker
is implemented for Android. Similarly, our methodology
also works for other platforms such as iOS. We present
the details of XPMChecker in the following.
Table 2: The selected 9 Web resource manipulation APIs
to study.
API
Manipulated Web Resource API Type
CookieManager.getCookie
loadUrlJs, evaluateJavascript
onPageFinished, onPageStarted,
onLoadResource
shouldOverrideUrlLoading1
shouldOverrideUrlLoading2
shouldInterceptRequest
Local Storage
Web Content
Web Address
Web Address
Network Trafﬁc
Network Trafﬁc
I
II
II, III
III
III
II, III
1 boolean shouldOverrideUrlLoading (WebView view, String url), before API level 24.
2 boolean shouldOverrideUrlLoading (WebView view, WebResourceRequest request), after
API level 24.
3.3 Static Analyzer
The static analyzer ﬁrst ﬁnds all the manipulation points
for each input APK ﬁle, and extracts the manipulated
Web URL and manipulating context for each manipula-
tion point. The static analyzer is implemented based on
Soot framework [28] and Flowdroid [11].
Build ICFG. Each APK ﬁle is parsed and then an
inter-procedure control ﬂow graph (ICFG) is built. Some
Web resource manipulation APIs are actually callbacks
that are implicitly called by the system,
thus edges
representing the implicit invocations are added to the
ICFG.
Locate Web Resource Manipulation Point. Web
resource manipulation points are located by traversing
the ICFG to look for the the signatures of Web resource
manipulation APIs. We thoroughly study the ofﬁcial
document of Android WebView APIs [9] and their us-
ages in real-world apps. Finally, as listed in Table 2, we
choose 9 APIs that manipulate sensitive Web resources
to perform the study. In real-world apps, there are some
API invocation sites with no manipulated Web resources
actually. For example, some apps just override shoul-
dOverrideUrlLoading API and call its super method
using “super(this)” without any other behaviors. We use
a forward data ﬂow analysis to ﬁlter out these points.
3.3.1 Extract Manipulated Web Resource URL
It is non-trivial to extract the manipulated URL at each
manipulation point, as it is highly dependent on the
speciﬁc API. We study these manipulation APIs and
classify them into the following three basic types.
• Type I. The URL is the parameter for such ma-
nipulation API, For example, the manipulated URL
for CookieManager.getCookie(String url) is its ﬁrst
parameter, as showed in Listing 1.
• Type II. The URL should be extracted from the
invoked WebView instance. For example, in Listing
2, the manipulated URL of evaluateJavascript is
USENIX Association
27th USENIX Security Symposium    1187
Figure 2: Basic workﬂow of XPMChecker. XPMChecker is composed of three components to recognize XPM
behaviors in Android apps. First, Static Analyzer parses input APK ﬁles and collects Web resource information into a
database. Second, Principal Identiﬁer extracts both Web principal and app principal for each manipulation point. At
last, XPM Classiﬁer recognizes XPM behavior by leveraging search engine knowledge.
the string “www.google.com” loaded by its base
WebView instance.
• Type III. The URL is passed as a callback param-
eter, and can not be statically obtained. Listing 3
shows an example of such API. For shouldOver-
rideUrlLoading API, the “url” is a callback parame-
ter and can only be determined at runtime. However
it can be inferred from the code control structure
(i.e. the if conditions in line 2 and line 5).
1
2
1
2
3
4
5
C o o k i e M a n a g e r cm = new C o o k i e M a n a g e r () ;
cm . g e t C o o k i e ( " www . google . com " ) ;
Listing 1: Type I, URL from a parameter.
WebView wv = new WebView ( this ) ;
// some code
wv . loadUrl ( " www . google . com " ) ;
// some o t h e r code
wv . e v a l u a t e J a v a s c r i p t ( " JS_CODE " , ..) ;
Listing 2: Type II, URL from base WebView instance.
1
2
3
4
5
6
7
8
9
boolean s h o u l d O v e r r i d e U r l L o a d i n g ( WebView
webview , String url ) {
if ( url . s t a r t s w i t h ( " www . google . com " ) )
{
// some code
}
else if ( url . equals ( " www . f a c e b o o k . com
" ) ) {
// some o t h e r code
}
// o t h e r code
}
Listing 3: Type III, URL from a callback parameter.
URL Extraction. Table 2 presents the types for the
selected 9 manipulation APIs. We use different methods
to extract manipulated Web resource URL according to
the API type. For Type I API, the URL is the ﬁrst
parameter of the API. For Type III API, the URL can
be inferred from the branch statements in its code. We
do a forward data ﬂow analysis from the “url” parameter,
and collect all branch statements having string operations
with the “url” parameter as the inferred positions.
It is more complicated to handle Type II APIs, where
the manipulated URLs are actually loaded by the base
WebView instances. There are two cases to determine the
URL of the WebView instance: statically loaded URLs
and dynamically loaded URLs. Statically loaded URLs
are loaded with LOAD URL APIs, including loadUrl,
loadDataWithBaseURL, postUrl, etc.
In this case, we
use the ICFG to ﬁnd invocations of LOAD URL APIs,
and the manipulated URL can be extracted from their
parameters. Dynamically loaded URLs are loaded when
the users navigates from one page to another. Similar to
Type III APIs, the dynamic URLs are inferred from the
control ﬂow structure of the code.
String Analysis. After we know the position of the
manipulated URL, we then use string analysis to reveal
the string value. Speciﬁcally, we ﬁrst do backward
slicing along the ICFG to collect all instructions used
to construct the URL. Then, we forward traverse the
program slice to reconstruct the string-related operations.
We try to calculate the string value by modeling common
string operations such as initialization and concatenation
of StringBuilder and StringBuffer. Besides, Android-
speciﬁc APIs such as reading strings from asset ﬁles and
SharedPreferences are also modeled.
1188    27th USENIX Security Symposium
USENIX Association
 !"#$%&’()$*$+,%&!*-./01 !"#$%&’(&$)*)$$#$%&’(&$)*2’3%104#-$&’ %3560-+)’&$,*)-!.#/01)0*1,7%0!8+!0+)’&$,*)-&’2#(3’-!4-’1+!,+"*-% 60!$+9+012’3:-*44+9+01;<second layer of the tree is the signatures for the methods
in the parent class. The method signature is calculated
by hashing all the Android APIs it invoked. We only
consider the Android APIs listed by PScout [12].
When comparing two manipulating code signatures,
we ﬁrst need to judge whether they use the same manipu-
lation API. If they invoke different manipulated APIs, the
manipulating code signatures are thought to be different.
Otherwise, we compare the Merkle trees for the two
manipulating code signatures from top to bottom.
In summary, the static analyzer module locates all ma-
nipulation points in each APK, extracts the manipulated
URL and manipulating context for each point, and saves
this information into a database.
3.4 Principal Identiﬁer
Based the extracted manipulation information at each
manipulation point, we further need to identify the Web
principal and app principal.
Identify Web Principal. A naive idea is to use the
Web origin (a triple of protocol, host and port) as the Web
principal. Since the protocol and port element deﬁned in
the Web origin are hard to compare with app principal,
our solution uses the domain name at each manipulation
point as the Web principal.
Before extracting domains from Web resource URLs,
we need to normalize the extracted URLs as there may
be some abnormal URLs, such as short URL, IP address.
The domain names of short URLs and IP addresses can
be retrieved by dynamically loading them or resolved
with reverse DNS lookup.
For domains which are
common cloud sub-domains, we extract their domain
names as the sub-domains or paths to the host server.
For example, for the URL “s3.amazonaws.com/X” or
“Y.s3.amazonaws.com”, we extract “X” and “Y” as their
domains (Web principals).
Identify App Principal. Unlike Web principals, there
is no existing way to construct app principal. Our
solution is to leverage code features to indicate the
security principal of the manipulating code. Generally,
manipulating code may originate from two sources: the
host app or a third-party library. If the code is from the
host app, we use META of the app as the app principal
indicator. Otherwise we use the declaring package name
DP instead. Our insight is that Android developers
usually include reverse domain name in the package
name of their code.
To distinguish library code and host app code, we use
the signature for the code union (SIG). Our observation
is that library code tends to appear in many apps.
If
the SIG appears in only one app, or apps from the
same developer, the code union belongs to the host app.
Otherwise,
if it appears in more than one app from
Figure 3: Use Merkle tree to represent manipulating code
signature.
Since we focus on integrated Web services, URLs with
protocols other than HTTP/HTTPS are not considered
and ﬁltered out. Furthermore, there may be more than
one manipulated Web URL at one manipulation point,
such as the example in Listing 3. These URLs are all
extracted and saved into the database for further analysis.
3.3.2 Extract Manipulating Context
To identify the app principal, we need to collect some
context information at each manipulation point. Speciﬁ-
cally, the following information is collected.
• META, the meta-information of the app, including
application package name and developer informa-
tion;
• DP, the declaring package name of the manipulating
code;
• SIG, the signature for the manipulating code;
The META and DP information can be directly extracted
from the APK ﬁle and app market. The SIG is a signature
used to identify the provenance of the manipulating code,
i.e. the host app or a third-party library. To calculate the
code signature, we ﬁrst need to determine the boundary
of the manipulating code and then extract its signature
based on code feature inside the code boundary.
Manipulating Code Union. We introduce the code
union concept to represent the code originates from the
same principal. Considering the problem context of our
paper, we deﬁne the code union by grouping code that
manipulates the same WebView instance. Speciﬁcally,
it contains the class of the manipulation point, classes
that are connected with the same WebView instance, and
classes of the Java objects that have been injected into
WebView through addJavaScriptInterface API.
Manipulating Code Signature. We use a variant
of Merkle trees [35] with depth of 2 to represent the
manipulating code signature (as shown in Figure 3). In
these hash trees, every non-leaf node is labeled with the
hash of its child nodes. The ﬁrst layer of the tree is the
signatures for the classes in the same code union. The
USENIX Association
27th USENIX Security Symposium    1189
Code Union SignatureClass SignatureMethod SignatureClass SignatureMethod SignatureMethod Signature……different developers, it originates from a library.
Obfuscated Package Name Recovery. The package