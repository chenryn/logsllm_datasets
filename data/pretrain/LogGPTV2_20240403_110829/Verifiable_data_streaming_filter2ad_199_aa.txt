title:Verifiable data streaming
author:Dominique Schr&quot;oder and
Heike Schr&quot;oder
Veriﬁable Data Streaming
Dominique Schröder
Saarland University, Germany
University of Maryland, USA
Heike Schröder
Technical University of Darmstadt, Germany
ABSTRACT
In a veriﬁable data streaming protocol, the client streams a
long string to the server who stores it in its database. The
stream is veriﬁable in the sense that the server can neither
change the order of the elements nor manipulate them. The
client may also retrieve data from the database and update
them. The content of the database is publicly veriﬁable such
that any party in possession of some value s and a proof π
can check that s is indeed in the database.
We introduce the notion of veriﬁable data streaming and
present an eﬃcient instantiation that supports an exponen-
tial number of values based on general assumptions. Our
main technique is an authentication tree in which the leaves
are not ﬁxed in advanced such that the user, knowing some
trapdoor, can authenticate a new element on demand with-
out pre- or re-computing all other leaves. We call this data
structure chameleon authentication tree (CAT). We instan-
tiate our scheme with primitives that are secure under the
discrete logarithm assumption. The algebraic properties of
this assumption allow us to obtain a very eﬃcient veriﬁca-
tion algorithm. As a second application of CATs, we present
a new transformation from any one-time to many-time sig-
nature scheme that is more eﬃcient than previously known
solutions.
Categories and Subject Descriptors
F.0 [Theory of Computation]: General
General Terms
Security, Theory
Keywords
Outsourcing, streaming, veriﬁable delegation
INTRODUCTION
1.
In a veriﬁable data streaming protocol (VDS), the client
C streams a long string S = s[1], . . . , s[m] to the server S
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$10.00.
who stores the string in its database DB. The length of S
exceeds the client’s memory such that C cannot read or store
the entire string at once. Instead, C reads some substring
s[i] ∈ {0, 1}k and sends it to the server. The stream is
veriﬁable in the sense that the server cannot change the
order of the elements or manipulate them. The entries in
the database are publicly veriﬁable such that any party in
possession of s[i] and a proof πs[i] can check that C stored
s[i] in DB hold by S.
The client has also the ability to retrieve and update any
element in the database. Whenever the client wishes to get
some value s[j] from DB, then the server appends a proof
πs[j] that shows the authenticity of s[j] with respect to some
veriﬁcation key PK. To update some element i in DB, the
client retrieves (s[i], πs[i]) from S, checks its validity, and
sends the updated value s(cid:48)[i] back to the server.
1.1 Trivial Approaches
It seems that a VDS can easily obtained by letting the
client sign all values it streams to the server. This solution
indeed works for append-only databases that do not con-
sider the order of the elements (clearly, a stateful solution
encodes the position into each element). What makes the
problem interesting is that the client can update the ele-
ments in the database. In this setting, the trivial solution
does not work anymore, because all previous entries in DB
would still verify under the public key and it is unclear how
to revoke previous signatures. One could let the client store
all previous elements locally in order to keep track of all
changes. This approach, however, would not only lead the
problem ad absurdum, but it simply is impossible due to the
limited storage capacities of the client.
1.2 Applications
Several companies oﬀer already storage in the Internet
such as, e.g., Google drive, Dropbox, Apple’s iCloud, and
many more. The basic idea is that users can outsource most
of their data to a seemingly unbounded storage.
In some
cases, such as Google’s Chromebook, the complete data are
stored in the cloud while the client keeps only a small portion
of the data. Google provides for the users of the Chrome-
book some free storage, but they have to pay a yearly fee
for any additional space.
From a high-level point of view, this can be seen as data
streaming, where a weak client streams a huge amount of
data to a very powerful server. A crucial point here is the
authenticity of the data. How can the client make sure that
the server is not charging the client for space it is not using
953(e.g., by adding random data to the user’s database)? Fur-
thermore, the client needs to verify that the server keeps the
current version of the data without modifying it, or switch-
ing back to an old version.
Taking the order of data into account is a very natural
requirement in computer science. As an example consider a
server that stores the DNA sequences for a health insurance.
A diﬀerence in the sequence of the DNA usually means some
sort of mutation which eﬀects, e.g., in a disease. Thus, if a
malicious server manages to change the order in a patient’s
DNA sequence, then the client might have to pay a higher
fee due to some medical risks (such as genetic disease) that
might be implied by this mutation. The website of the Mu-
seum of Paleontology of UC Berkley describes the aﬀect of
mutations [oCMoP12].
1.3 Our Contribution
We introduce the notion of veriﬁable data streaming and
present an instantiation that supports an exponential num-
ber of values based on general assumptions. Our solution
has eﬃcient updates and the data in the database are pub-
licly veriﬁable. Moreover, our construction is secure in the
standard model. We summarize our contributions as follows:
• Our main technical contribution is an authentication
tree that authenticates an exponential number of val-
ues, but where the leaves are not deﬁned in advance.
The owner of a trapdoor can add elements to the tree
without pre- or re-computing all other elements. We
call such a tree a chameleon authentication tree (CAT).
• We show the generality of our technique by applying
it to two diﬀerent problems: Firstly, we build a veri-
ﬁable data streaming protocol based on CATs. This
scheme supports an exponential number of elements,
eﬃcient updates, and the items in the database are
publicly veriﬁable. The second application of CATs is
a new transformation from any one-time to many-time
signature scheme in the standard model that is more
eﬃcient than all previous approaches.
• We instantiate our construction with primitives that
are secure under the discrete logarithm assumption in
the standard model. This assumption is not only very
mild, but the algebraic structure allows us to obtain a
more eﬃcient veriﬁcation algorithm. The basic idea is
to apply batch veriﬁcation techniques to our veriﬁca-
tion algorithm.
1.4 Related Work
Veriﬁable data streaming is related to veriﬁable databases
(VDB) by Benabbas, Gennaro, and Vahlis [BGV11]. The
main diﬀerence to their work is that the data during the
setup phase in a streaming protocol are unknown. Moreover,
our notion has an algorithm that allows adding elements to
the database that consists of a single message from the user
to the server (which does not change the veriﬁcation key of
the database). One might wonder if VDBs can be used to
simulate veriﬁable data streaming protocols by generating a
database of exponential size and adding the entries via the
update algorithm. This idea, however, does not work be-
cause the update procedure usually requires interaction and
the server updates the veriﬁcation key afterwards. Another
diﬀerence is that the data in a VDB are usually unordered.
That is, the element di in the database DB is associated
to some key xi, i.e., DB(xi) = di. But there is no explicit
ordering of the elements.
The problem of VDBs has previously been investigated in
the context of accumulators [Ngu05, CKS09, CL02] and au-
thenticated data structures [NN00, MND+01, PT07, TT10].
These approaches, however, often rely on non-constant as-
sumptions (such as the q-Strong Diﬃe-Hellman assumption)
as observed in [BGV11]. Recent works, such as [BGV11]
or [CF11], focus on storing speciﬁc values (such as poly-
nomials) instead of arbitrary ones and they usually only
support a polynomial number of values (instead of expo-
nentially many). Moreover, the scheme of [BGV11] is not
publicly veriﬁable.
Proofs-of-retrievability are also similar in the sense that
the server proves to the client that it is actually storing all of
the client’s data [SW08, FB06, SM06]. The interesting re-
search area of memory delegation [CKLR11] is also diﬀerent,
because it considers veriﬁable computation on (streamed)
data. A more eﬃcient solution has been suggested by Cor-
mode, Mitzenmacher, and Thaler in [CMT12].
2. VERIFIABLE DATA STREAMING
In a veriﬁable data streaming protocol (VDS), a client C
reads some long string S = s[1], . . . , s[m] ∈ {0, 1}mk that
C wishes to outsource to a server S in a streaming manner.
Since the client cannot store and read the entire string at
once, C reads a substring s[i] ∈ {0, 1}k of S and sends s[i]
to the server who stores the value in its database DB. We
stress that we are interested in a streaming protocol, i.e.,
the communication between the client and the server at this
stage is unidirectional and the string is ordered. The data
must be publicly veriﬁable in the sense that the server holds
some public key PK and everybody in possession of some
data s[i] and a proof πs[i] can verify that s[i] is stored in
DB. Whenever the client wishes to retrieve some data s[i]
from the database DB, C sends i to the server who returns
s[i] together with a proof πs[i]. This proof shows that s is the
ith element in DB and its authenticity with respect to PK.
In addition, the client has the ability to update any value
s[i] to a new string s(cid:48)[i] which leads to a new veriﬁcation
key PK(cid:48). More formally:
Deﬁnition 1. A veriﬁable data streaming protocol VDS =
(Setup, Append, Query, Verify, Update) is a protocol between
two PPT algorithms: a client C and a server S. The server
S can store an exponential number n of elements in its
database DB and the client keeps some small state O(log n).
The scheme consists of the following PPT algorithms:
Setup(1λ): The setup algorithm takes as input the security
parameter 1λ. It returns a veriﬁcation key PK and a
secret key SK. The veriﬁcation key PK is given to the
server S and the secret key to the client C. W.l.o.g.,
SK always contains PK.
Append(SK, s): This algorithm appends the value s to the
database DB hold by the server. The client sends a
single message to the server who stores the element
in DB. Adding elements to the database may change
the private key to SK(cid:48), but it does not change the
veriﬁcation key PK.
Query(PK, DB, i): The interactive query protocol
is exe-
cuted between S(PK, DB) and C(i). At the end of the
954protocol, the client either outputs the ith entry s[i] of
DB together with a proof πs[i], or ⊥.
(2) add an element to the database without the help of the
user; (3) break the update mechanism. More formally:
Verify(PK, i, s, πs[i]): The veriﬁcation algorithm outputs s[i]
if s[i] is the ith element in the database DB, otherwise
it returns ⊥.
Update(PK, DB, SK, i, s(cid:48)): The interactive update protocol
(cid:104)S(PK, DB),C(SK, i, s(cid:48))(cid:105) takes place between the server
S(PK, DB) and the client C(SK, i, s(cid:48)) who wishes to
update the ith entry of the database DB to s(cid:48). At the
end of the protocol the server sets s[i] ← s(cid:48) and both
parties update PK to PK(cid:48).
A veriﬁable data streaming protocol must fulﬁll the usual
completeness requirements.
2.1 Efﬁciency and Security Evaluation of VDS
Veriﬁable data streaming protocols should fulﬁll both “sys-
tem” and “crypto” criteria. System criteria usually require
that a scheme must be as eﬃcient as possible. In our setting,
eﬃciency should be evaluated w.r.t. computational complex-
ity, storage complexity, and communication complexity. The
server in a VDS must be able to store an exponential number
of elements and we require that there is no a-priori bound
on the number of queries to the server. The veriﬁers in the
system should be stateless with public veriﬁability. Every-
body in possession of a data s and a proof πs should be able
to verify that s is stored at position i and that s is valid
w.r.t. the veriﬁcation key PK.
The most important crypto criteria are the following: A
malicious server A should not be able to add elements to
the database outsourced by the client without its help. This
means that A might ask the client to add q elements to its
database DB (where q is adaptively determined by A), but
he is unable to add any further element that veriﬁes under
PK. A veriﬁable streaming protocol is order-preserving, i.e.,
the malicious server A cannot change the order of any ele-
ment in the database. Furthermore, A should not be able
to change any element in the database. Again, this prop-
erty must hold even if A has the ability to ask the client to
update q elements of its choice. Finally, the server should
only be able to issue proofs that allow to recover the stored
ﬁle. These criteria follow the ones that have been suggested
in the context of proofs-of-retrievability [SW08].
2.2 Security of VDS
The security notion of VDS is similar to the one of veriﬁ-
able databases [BGV11], but diﬀers in many aspects: First,
our model considers the case of public veriﬁability, while
the one of [BGV11] does not. Second, we are dealing with
a stream of data that has an explicit ordering. In contrast,
the model of [BGV11] ﬁxes the size of DB during the setup
and guarantees authenticity only for these data. In partic-
ular, the adversary breaks the security in our model if he
manages to output a data s[i] with a valid proof πs[i], but
where s[i] is not the ith value in DB.
We model this intuition in a game between a challenger
and an adversary A that adaptively adds and updates el-
ements to resp. in the database. At the end of the game,
A tries to compute a false statement saying that a diﬀerent
data s[i] is the ith value in the database. This covers the
diﬀerent attack scenarios we have discussed so far. A suc-
cessful attacker could (1) change the order of an element;
Setup: The challenger runs Setup(1λ) to generate a private
key SK and a public key PK. It sets up an initially
empty database DB and gives the public key PK to
the adversary A.
Queries: The challenger provides two interfaces for A that
A may query adaptively and in an arbitrary order.
If the adversary queries the append interface on some
data s, then the challenger will run Append(SK, s) to
append s to its database DB. Subsequently, it re-
turns the corresponding proof πs to A. The second
interface is an update interface that takes as input
an index j and an element s(cid:48)[j]. Whenever A in-
vokes this interface, the challenger will run the pro-
tocol Update(PK, DB, SK, i, s(cid:48)) with A. Notice that
each call to this interface will update the veriﬁcation
key as well. By DB = s[1], . . . , s[q] we denote the state
of the database after A’s last query and PK∗ is the cor-
responding veriﬁcation key stored by the challenger.
Output: Eventually, the adversary outputs (i∗, s∗, π∗