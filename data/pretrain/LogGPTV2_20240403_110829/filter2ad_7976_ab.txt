![
](https://images.seebug.org/content/images/2019/08/26f2273d-9961-4ae6-8c42-e53703d76f65.png-w331s)
可以看到，我们的输入成功的到达了反序列化的点。
### 4.3 Core ext 漏洞点利用过程分析
看下`Core`中的那个漏洞点。
路径：`typo3/sysext/core/Classes/DataHandling/DataHandler.php:1453`
    public function fillInFieldArray($table, $id, $fieldArray, $incomingFieldArray, $realPid, $status, $tscPID)
    {
        // Initialize:
        $originalLanguageRecord = null;
        $originalLanguage_diffStorage = null;
        $diffStorageFlag = false;
        // Setting 'currentRecord' and 'checkValueRecord':
        if (strpos($id, 'NEW') !== false) {
            // Must have the 'current' array - not the values after processing below...
            $checkValueRecord = $fieldArray;
            if (is_array($incomingFieldArray) && is_array($checkValueRecord)) {
                ArrayUtility::mergeRecursiveWithOverrule($checkValueRecord, $incomingFieldArray);
            }
            $currentRecord = $checkValueRecord;
        } else {
            // We must use the current values as basis for this!
            $currentRecord = ($checkValueRecord = $this->recordInfo($table, $id, '*'));
            // This is done to make the pid positive for offline versions; Necessary to have diff-view for page translations in workspaces.
            BackendUtility::fixVersioningPid($table, $currentRecord);
        }
        // Get original language record if available:
        if (is_array($currentRecord)
            && $GLOBALS['TCA'][$table]['ctrl']['transOrigDiffSourceField']
            && $GLOBALS['TCA'][$table]['ctrl']['languageField']
            && $currentRecord[$GLOBALS['TCA'][$table]['ctrl']['languageField']] > 0
            && $GLOBALS['TCA'][$table]['ctrl']['transOrigPointerField']
            && (int)$currentRecord[$GLOBALS['TCA'][$table]['ctrl']['transOrigPointerField']] > 0
           ) {
            $originalLanguageRecord = $this->recordInfo($table, $currentRecord[$GLOBALS['TCA'][$table]['ctrl']['transOrigPointerField']], '*');
            BackendUtility::workspaceOL($table, $originalLanguageRecord);
            $originalLanguage_diffStorage = unserialize($currentRecord[$GLOBALS['TCA'][$table]['ctrl']['transOrigDiffSourceField']]);
        }
        ......//省略代码
看代码，如果我们要进入反序列化的点，需要满足前面的`if`条件
    if (is_array($currentRecord)
            && $GLOBALS['TCA'][$table]['ctrl']['transOrigDiffSourceField']
            && $GLOBALS['TCA'][$table]['ctrl']['languageField']
            && $currentRecord[$GLOBALS['TCA'][$table]['ctrl']['languageField']] > 0
            && $GLOBALS['TCA'][$table]['ctrl']['transOrigPointerField']
            && (int)$currentRecord[$GLOBALS['TCA'][$table]['ctrl']['transOrigPointerField']] > 0
        ) 
也就是说要满足以下条件
  * `$currentRecord`是个数组
  * 在`TCA`中`$table`的表属性中存在`transOrigDiffSourceField`、`languageField`、`transOrigPointerField`字段。
  * `$table`的属性`languageField`和`transOrigPointerField`在`$currentRecord`中对应的值要大于`0`。
查一下`TCA`表，满足第二条条件的表有
    sys_file_reference
    sys_file_metadata
    sys_file_collection
    sys_collection
    sys_category
    pages
但是所有`sys_*`的字段的`adminOnly`属性的值都是`1`，只有管理员权限才可以更改。因此我们可以用的表只有`pages`。
它的属性值是
    [languageField] => sys_language_uid
    [transOrigPointerField] => l10n_parent
    [transOrigDiffSourceField] => l10n_diffsource
再往上，有一个对传入的参数进行处理的`if-else`语句。
从注释中，我们可以知道传入的各个参数的功能：
  * 数组 `$fieldArray` 是默认值，这种一般都是我们无法控制的
  * 数组 `$incomingFieldArray` 是你想要设置的字段值，如果可以，它会合并到`$fieldArray`中。
而且如果满足`if (strpos($id, 'NEW') !==
false)`条件的话，也就是`$id`是一个字符串且其中存在`NEW`字符串，会进入下面的合并操作。
    $checkValueRecord = $fieldArray;
    ......
    if (is_array($incomingFieldArray) && is_array($checkValueRecord)) {
        ArrayUtility::mergeRecursiveWithOverrule($checkValueRecord, $incomingFieldArray);
    }
    $currentRecord = $checkValueRecord;
![
](https://images.seebug.org/content/images/2019/08/8e9cdf5b-13f5-4bad-8538-74a37ad49dee.png-w331s)
如果不满足上面的`if`条件，`$currentRecord`的值就会通过`recordInfo`方法从数据库中直接获取。这样后面我们就无法利用了。
简单总结一下，我们需要
  * `$table`是`pages`
  * `$id`是个字符串，而且存在`NEW`字符串
  * `$incomingFieldArray`中要存在`payload`
接下来我们看在哪里对该函数进行了调用。
全局搜索一下，只找到一处，在`typo3/sysext/core/Classes/DataHandling/DataHandler.php:954`处的`process_datamap`方法中进行了调用。
![
](https://images.seebug.org/content/images/2019/08/a89c2807-42e9-4638-997a-1a1e064d2ba6.png-w331s)
整个项目中，对`process_datamap`调用的地方就太多了，尝试使用`xdebug`动态调试来找一下调用链。从`RIPS`团队的那一篇分析文章结合上面的对表名的分析，我们可以知道，漏洞点在创建`page`的功能处。
接下来就是找从`EditDocumentController.php`的`mainAction`方法到前面我们分析的`fillInFieldArray`方法的调用链。
尝试在网站中新建一个`page`，然后在调用`fillInFieldArray`的位置下一个断点，发送请求后，我们就拿到了调用链。
![
](https://images.seebug.org/content/images/2019/08/5a0dbc79-485e-4928-b83d-3c37da5cecaf.png-w331s)
看一下`mainAction`的代码。
    public function mainAction(ServerRequestInterface $request): ResponseInterface
    {
        // Unlock all locked records
        BackendUtility::lockRecords();
        if ($response = $this->preInit($request)) {
            return $response;
        }
        // Process incoming data via DataHandler?
        $parsedBody = $request->getParsedBody();
        if ($this->doSave
            || isset($parsedBody['_savedok'])
            || isset($parsedBody['_saveandclosedok'])
            || isset($parsedBody['_savedokview'])
            || isset($parsedBody['_savedoknew'])
            || isset($parsedBody['_duplicatedoc'])
        ) {
            if ($response = $this->processData($request)) {
                return $response;
            }
        }
        ....//省略代码
    }
当满足`if`条件是进入目标`$response = $this->processData($request)`。
    if ($this->doSave
            || isset($parsedBody['_savedok'])
            || isset($parsedBody['_saveandclosedok'])
            || isset($parsedBody['_savedokview'])
            || isset($parsedBody['_savedoknew'])
            || isset($parsedBody['_duplicatedoc'])
        ) 
这个在新建一个`page`时，正常的表单中就携带`doSave == 1`，而`doSave`的值就是在方法`preInit`中获取的。
![
](https://images.seebug.org/content/images/2019/08/aad56dea-41dd-425b-96ba-0ae0597fca93.png-w331s)
这样条件默认就是成立的，然后将`$request`传入了`processData`方法。
    public function processData(ServerRequestInterface $request = null): ?ResponseInterface
    {
    // @deprecated Variable can be removed in TYPO3 v10.0
        $deprecatedCaller = false;
        ......//省略代码
        $parsedBody = $request->getParsedBody(); // 获取Post请求参数
        $queryParams = $request->getQueryParams(); // 获取Get请求参数
        $beUser = $this->getBackendUser(); // 获取用户数据
        // Processing related GET / POST vars
        $this->data = $parsedBody['data'] ?? $queryParams['data'] ?? [];
        $this->cmd = $parsedBody['cmd'] ?? $queryParams['cmd'] ?? [];
        $this->mirror = $parsedBody['mirror'] ?? $queryParams['mirror'] ?? [];
        // @deprecated property cacheCmd is unused and can be removed in TYPO3 v10.0
        $this->cacheCmd = $parsedBody['cacheCmd'] ?? $queryParams['cacheCmd'] ?? null;
        // @deprecated property redirect is unused and can be removed in TYPO3 v10.0
        $this->redirect = $parsedBody['redirect'] ?? $queryParams['redirect'] ?? null;
        $this->returnNewPageId = (bool)($parsedBody['returnNewPageId'] ?? $queryParams['returnNewPageId'] ?? false);
        // Only options related to $this->data submission are included here
        $tce = GeneralUtility::makeInstance(DataHandler::class);
        $tce->setControl($parsedBody['control'] ?? $queryParams['control'] ?? []);
        // Set internal vars
        if (isset($beUser->uc['neverHideAtCopy']) && $beUser->uc['neverHideAtCopy']) {
            $tce->neverHideAtCopy = 1;
        }
        // Load DataHandler with data
        $tce->start($this->data, $this->cmd);
        if (is_array($this->mirror)) {
            $tce->setMirror($this->mirror);
        }
        // Perform the saving operation with DataHandler:
        if ($this->doSave === true) {
            $tce->process_uploads($_FILES);
            $tce->process_datamap();
            $tce->process_cmdmap();
        }
        ......//省略代码
    }
代码很容易懂，从`$request`中解析出来的数据，首先存储在`$this->data`和`$this->cmd`中，然后实例化一个名为`$tce`，调用`$tce->start`方法将传入的数据存储在其自身的成员`datamap`和`cmdmap`中。
    typo3/sysext/core/Classes/DataHandling/DataHandler.php:735
    public function start($data, $cmd, $altUserObject = null)
    {
       ......//省略代码
        // Setting the data and cmd arrays
        if (is_array($data)) {
            reset($data);
            $this->datamap = $data;
        }
        if (is_array($cmd)) {
            reset($cmd);
            $this->cmdmap = $cmd;
        }
    }
而且`if ($this->doSave === true)`这个条件也是成立的，进入`process_datamap`方法。
![
](https://images.seebug.org/content/images/2019/08/7128b88f-6c62-44c6-9a24-59cf4601c012.png-w331s)
代码有注释还是容易阅读的，在第`985`行，获取了`datamap`中所有的键名，然后存储在`$orderOfTables`，然后进入`foreach`循环，而这个`$table`，在后面传入`fillInFieldArray`方法中，因此，我们只需要分析`$table
== pages`时的循环即可。
    $fieldArray = $this->fillInFieldArray($table, $id, $fieldArray, $incomingFieldArray, $theRealPid, $status, $tscPID);
大致浏览下代码，再结合前面的分析，我们需要满足以下条件：
  * `$recordAccess`的值要为`true`
  * `$incomingFieldArray`中的`payload`不会被删除
  * `$table`的值为`pages`
  * `$id`中存在`NEW`字符串
既然正常请求可以直接断在调用`fillInFieldArray`处，正常请求中，第一条、第三条和第四条都是成立的。
根据前面对`fillInFieldArray`方法的分析，构造`payload`，向提交的表单中添加三个键值对。
    data[pages][NEW5d3fa40cb5ac4065255421][l10n_diffsource] ==> serialized_shell_data
    data[pages][NEW5d3fa40cb5ac4065255421][sys_language_uid] ==> 4
    data[pages][NEW5d3fa40cb5ac4065255421][l10n_parent] ==> 4
其中`NEW*`字符串要根据表单生成的值进行对应的修改。
![
](https://images.seebug.org/content/images/2019/08/22ac5b5e-1f73-44e4-8b3f-5a35a1bcb578.png-w331s)
发送请求后，依旧能够进入`fillInFieldArray`，而在传入的`$incomingFieldArray`参数中，可以看到我们添加的三个键值对。
![
](https://images.seebug.org/content/images/2019/08/b2aab9b0-198c-4e24-86e4-2439a567dd0d.png-w331s)
进入`fillInFieldArray`之后，其中`l10n_diffsource`将会进行反序列化操作。此时我们在请求中将其`l10n_diffsource`改为构造好的序列化字符串，重新发送请求即可成功`getshell`。
![
](https://images.seebug.org/content/images/2019/08/ef93ce35-4500-4449-9359-fd1fc744ecda.png-w331s)
## 5\. 写在最后
其实单看这个漏洞的利用条件，还是有点鸡肋的，需要你获取到`typo3`的一个有效的后台账户，并且拥有编辑`page`的权限。
而且这次分析`Typo3`给我的感觉与其他网站完全不同，我在分析创建&修改`page`这个功能的参数过程中，并没有发现什么过滤操作，在后台的所有参数都是根据`TCA`的定义来进行相应的操作，只有传入不符合`TCA`定义的才会抛出异常。而`TCA`的验证又不严格导致了变量覆盖这个问题。
官方的修补方式也是不太懂，直接禁止了反序列化操作，但是个人认为这次漏洞的重点还是在于前面变量覆盖的问题上，尤其是`Backend`的利用过程中，可以直接覆盖从数据库中取出的数据，这样只能算是治标不治本，后面还是有可能产生新的问题。
当然了，以上只是个人拙见，如有错误，还请诸位斧正。
## 6\. 参考链接
  * 
  * 
  * 
  * [https://typo3.org/security/advisory/typo3-core-sa-2019-020/](https://docs.typo3.org/m/typo3/reference-tca/master/en-us/Introduction/Index.html "https://typo3.org/security/advisory/typo3-core-sa-2019-020/")
* * *