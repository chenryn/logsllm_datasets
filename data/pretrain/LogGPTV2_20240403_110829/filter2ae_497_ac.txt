        if switch_code == 0x174:
            v6=data[80]
            v7=data[8]
            for i in range(8,0,-1):
                data[10*i]=data[9*(i-1)+i-1]
            data[0]=v6
            for j in range(1,9):
                data[8*j]=data[8*j+8]
            data[8*9]=v7            # Look at me!!!
        if switch_code == 0x176:
            v3 = data[76]
            result = data[36]
            v4 = data[36]
            for k in range(8,0,-1):
                result = 9*k
                data[9*k+4]=data[9*(k-1)+4]
            data[4]=v3
            for l in range(8):
                data[l+36]=data[l+37]
                result=l+1
            data[44]=v4
其中在rdmsr遇到了一个坑
dword_405030[8 * j] =
v7;此时j应该为9，而在使用python的for语句时data[8*j]=v7此时的j为8，这也就直接导致，我调试了好久.23333
    def vmcall_func(switch_code):
        v1 = (switch_code >> 24)
        i = ((switch_code>>16)&0xf)+9*((((switch_code>>16)&0xff)>>4)&0xf)
        byte_switch_code = switch_code&0xff
        if ((switch_code>>8)&0xff == 0xcc):
            d_input = m_input
        else:
            d_input = m_input[::-1]
        if v1 == op[0]:
            data[i]=d_input[byte_switch_code]
        elif v1 == op[1]:
            data[i]+=d_input[byte_switch_code]
            data[i]&=0xff
        elif v1 == op[2]:
            data[i]-=d_input[byte_switch_code]
            data[i]&=0xff
        elif v1 == op[3]:
            data[i]=data[i]/d_input[byte_switch_code]
            data[i]&=0xFF
        elif v1 == op[4]:
            data[i]*=d_input[byte_switch_code]
            data[i]&=0xFF
        elif v1 == op[5]:
            data[i]^=d_input[byte_switch_code]
            data[i]&=0xFF
        elif v1 == op[6]:
            data[i]^=d_input[byte_switch_code-1]+d_input[byte_switch_code]-d_input[byte_switch_code+1]
            data[i]&=0xFF
        elif v1 == op[7]:
            data[i]^=d_input[byte_switch_code]*16
            data[i]&=0xFF
        elif v1 == op[8]:
            data[i]|=d_input[byte_switch_code]
            data[i]&=0xFF
        elif v1 == op[9]:
            data[i]^=d_input[byte_switch_code+1]^d_input[byte_switch_code-1]^(d_input[byte_switch_code-2]+d_input[byte_switch_code]-d_input[byte_switch_code+2])
            data[i]&=0xFF
        elif v1 == 0xDD:
            print "vmx_off"
        elif v1 == 0xFF:
            check()
            return
        else:
            print "error"
注意操作符的运算顺序，python在带来便利的同时，也会为我们带来困扰。
最后会进行check函数，据出题人证实确实是代码写错了，但是并不影响我们解题。check的过程其实就是对数独进行校验的过程，基于此我们进行恢复。
off_405534是check_data的指针
    def check():
        for n in range(9):
            v5=[0 for m in range(9)]
            for i in range(9):
                v5[i]=data[((check_data[n]+i)&0xF)+9 * (((check_data[n]+i) >> 4) & 0xF)]
                s.add(v5[i]>0,v5[i]<10)
            for j in range(8):
                for k in range(j+1,9):
                    s.add(v5[j]!=v5[k])
这里使用z3求解器，添加了约束条件。接下来将z3求解的相应代码补全。相关的数据可以通过lazyida插件进行导出。最终完整代码如下：
    def gate_one():
        static_data=[0x07, 0xE7, 0x07, 0xE4, 0x01, 0x19, 0x03, 0x50, 0x07, 0xE4, 0x01, 0x20, 0x06, 0xB7, 0x07, 0xE4, 0x01, 0x22, 0x00, 0x28, 0x00, 0x2A, 0x02, 0x54, 0x07, 0xE4, 0x01, 0x1F, 0x02, 0x50, 0x05, 0xF2, 0x04, 0xCC, 0x07, 0xE4, 0x00, 0x28, 0x06, 0xB3, 0x05, 0xF8, 0x07, 0xE4, 0x00, 0x28, 0x06, 0xB2, 0x07, 0xE4, 0x04, 0xC0, 0x00, 0x2F, 0x05, 0xF8, 0x07, 0xE4, 0x04, 0xC0, 0x00, 0x28, 0x05, 0xF0, 0x07, 0xE3, 0x00, 0x2B, 0x04, 0xC4, 0x05, 0xF6, 0x03, 0x4C, 0x04, 0xC0, 0x07, 0xE4, 0x05, 0xF6, 0x06, 0xB3, 0x01, 0x19, 0x07, 0xE3, 0x05, 0xF7, 0x01, 0x1F, 0x07, 0xE4]
        s=''
        for i in range(0, len(static_data), 2):
            op = static_data[i]
            op_data = static_data[i+1]
            if op == 0:
                op_data-=34
            if op == 1:
                op_data-=19
            if op == 2:
                op_data-=70
            if op == 3:
                op_data-=66
            if op == 4:
                op_data^=0xca
            if op == 5:
                op_data^=0xfe
            if op == 6:
                op_data^=0xbe
            if op == 7:
                op_data^=0xef
            s+=chr(op|((op_data<<3)&0x78))
        print s
    def init_box():
        result = data[40]
        v6 = data[40]
        for i in range(4):
            data[8*i+40]=data[8*i+40-1]
            for j in range(2*i+1):
                data[3 - i + 9 * (i + 4 - j)]=data[3 - i + 9 * (i + 4 - (j + 1))]
            for k in range(2 * i + 2):
                data[k + 9 * (3 - i) + 3 - i] = data[10 * (3 - i) + k + 1]
            for l in range(2 * i + 2):
                data[9 * (l + 3 - i) + i + 5] = data[9 * (3 - i + l + 1) + i + 5]
            m=0
            while m < result:
                result = 2*i+2
                data[9 * (i + 5) + i + 5 - m] = data[9 * (i + 5) + i + 5 - (m + 1)]
                m+=1
        data[72]=v6
    def cpuid_func(switch_code):
        if switch_code == 0xDEADBEEF:
            for i in range(10):
                op[i]^=key1[i]
        elif switch_code == 0xCAFEBABE:
            for j in range(10):
                op[j]^=key2[j]
    def invd_func(switch_code):
        if switch_code == 0x4433:
            for i in range(5):
                v0 = op[2*i]
                op[2*i]=op[2*i+1]
                op[2*i+1]=v0
        elif switch_code == 0x4434:
            v5 = op[0]
            for j in range(9):
                op[j]=op[j+1]
            op[9]=v5
        elif switch_code == 0x4437:
            v3 = op[7]
            for k in range(3):
                op[k+7]=op[7-k-1]
                if k == 2:
                    op[7-k-1]=op[3]
                else:
                    op[7-k-1]=op[k+7+1]
            for l in range(1):
                op[3]=op[3-l-2]
                op[3-l-2]=op[3-l-1]
            op[3-1-1]=v3
    def rdmsr(switch_code):
        if switch_code == 0x174:
            v6=data[80]
            v7=data[8]
            for i in range(8,0,-1):
                data[10*i]=data[9*(i-1)+i-1]
            data[0]=v6
            for j in range(1,9):
                data[8*j]=data[8*j+8]
            data[8*9]=v7            # Look at me!!!
        if switch_code == 0x176: