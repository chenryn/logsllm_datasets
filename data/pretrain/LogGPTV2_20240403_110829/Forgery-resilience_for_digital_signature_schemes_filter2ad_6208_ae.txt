Hamming weight function.
Using this technique, we claim that signing or accepting can
be performed using one exponentiation, gm or ym, resp., and a
small number of multiplications. Namely, ga
ctr can both be
computed exclusively using modular multiplications during sign-
ing. The same applies to the Accept algorithm concerning the com-
putations of ga
m. As for the key generation, it essentially
requires the signer to pick a key for the PRF, a random element,
N invocations of the PRF, and N + 1 modular exponentiations to
the power of b. Using the same trick as above, all these modular
exponentiations can be turned into modular multiplications.
m and gb
ctr and gb
[24] Michael O. Rabin. Digitalized signatures and public-key
functions as intractable as factorization. Technical report,
Massachusetts Institute of Technology, Cambridge, MA,
USA, 1979.
[25] Ron Rivest and Robert Silverman. Are 19strong’ primes
needed for RSA? Cryptology ePrint Archive, Report
2001/007, 2001. http://eprint.iacr.org/.
B. CRYPTOGRAPHIC ACCUMULATORS
Accumulators were introduced by Benaloh and de Mare [4] as an
alternative to digital signatures for authenticating a predetermined
set of elements Y . Basically, an accumulator scheme is an algo-
rithm to combine a large set of values into one, short accumulator z
of constant size , such that there is a short witness that a given value
was indeed incorporated into the accumulator. The initial proposal
of Benaloh and de Mare was to use a quasi-commutative hash func-
tion, i.e., a one-way hash function h that satisﬁes h(h(x, y1), y2) =
h(h(x, y2), y1). Bari´c and Pﬁtzman [2] later generalized this def-
inition to not require quasi-commutativity and provided a stronger
notion of security called collision-freeness (Note that almost all ac-
cumulator schemes are still based on a quasi-commutative func-
tion). While in one-way accumulators, the veriﬁer is required to
be unable to produce a witness for an element that is not included
in the accumulator’s set Y correctly veriﬁes with the accumula-
tor, collision-free accumulators consider this impossibility from the
prover point of view, i.e., the adversary is granted the ability to
freely choose the set Y .
In this work, we will need an even stronger security notion for
collision-free accumulators. That is, we consider the existence of
an algorithm that given an eventual trapdoor information, the au-
thenticator z, and an element y not in the set Y that generated z,
produces a witness that makes y being accepted by the veriﬁcation
algorithm as being accumulated. In these settings, the adversary’s
goal, who is polynomial, is to produce a witness for a value y that
is not in the set Y and has not been queried to the oracle that sat-
isﬁes the veriﬁcation algorithm. The scheme is secure if the win-
ning probability of any such adversary is negligible and we call
an accumulator satisfying this notion strongly collision-free. Note
that since unconditionally collision-free accumulators such as [19]
do not admit the existence of an (exponential) algorithm for pro-
ducing a witness of a value that was not accumulated in a set, the
oracle our adversary accesses for strong collision-freeness cannot
exist. Hence, in this case collision-freeness and strong collision-
freeness are equivalent. For this reason, the deﬁnition that follows
only deals with computationally secure accumulators.
DEFINITION 5. An accumulator scheme is deﬁned through the
ﬁrst four algorithms. The ﬁfth one is deﬁned for strongly collision-
free accumulator schemes.
• AccKey(1λ) → (Kacc, t). A PPT algorithm that, on input
a security parameter λ and outputs an accumulator key Kacc
and a trapdoor information t. For the sake of simplicity, we
assume that the accumulator key uniquely caracterizes a set
Y .
• AccKacc (Yw = {y1, . . . , yN}) → (zacc, aux). The algorithm
used to accumulate a set Yw of N values from Y using the
accumulator key Kacc. After its execution, the value zAcc
is made public. This algorithm is deterministic and runs in
polynomial-time.
• wKacc (yi, zacc, aux) → wi. This is the deterministic polynomial-
• EvalAuthKacc (yi, wi, zacc) → {0, 1}. EvalAuth is a polynomial-
time algorithm used to generate the witness wi for yi. It out-
puts ⊥, when yi ∈ Yw.
time algorithm that asserts the authenticity of yi with respect
to zacc. As such, it takes as input the accumulator key Kacc
and the value to authenticate yi along with its witness wi and
outputs a bit.
• Extractt,Kacc (zacc, y) → w. A special polynomial-time al-
gorithm for producing a witness w for y ∈ Y . That witness
has to be correct in the sense that EvalAuthKacc (y, w, zacc) =
1
A strongly collision-free accumulator has to satisfy the following
two properties.
• Correctness. This notion captures the requirement that ev-
ery value that was accumulated in a set can be authenticated.
More formally, we require that for every natural number λ
and N,
Pr [∃i : EvalAuthKacc (yi, wi, zacc) = 0
(Kacc,·) ← AccKey(1λ)
Yw = {y1, . . . , yN} ⊂R Y
(zacc, aux) ← AccKacc (Yw)
wi ← wKacc (yi, zacc, aux)
 = 0,
with the probability being taken over the choice of Yw and the
randomness of AccKey.
• Strong Collision-freeness. We consider a polynomial-time
algorithm A that has access to an oracle which implements
Extractt,Kacc (·,·) and denote by YE the list of queries A
submits to its oracle. The accumulator scheme is strongly
collision-free if for every such algorithm A, it holds that for
every natural numbers λ and N
Pr EvalAuthKacc (y, w, zacc) = 1
y ∈ Yw ∪ YE
(Kacc, t) ← AccKey(1λ)
(zacc, aux) ← AccKacc (Yw)
Here, the probability is taken over the random coins of A and
AccKey.
 = negl(λ).
(Yw, y, w) ← AExtractt,Kacc (·,·)(Kacc)
Several constructions of collision-free accumulators were pro-
posed and it turns out that most of them can be easily shown to be
strongly collision-free. We mention in particular the collision-free
accumulator based on the Strong RSA assumption due to Bari´c and
Pﬁtzman [2] which can easily be shown to be strongly collision-
free using a classical trick by Shamir [28] regarding the difﬁculty of
n given an e-th root
computing the e-th root of an element from Z
of the same element when e and e are co-prime. After the introduc-
tion of dynamic accumulators by Camenisch and Lysyanskaya [6],
several constructions of accumulators from bilinear pairings such
as [18, 5] were proposed. Writing a proof that these commitments
are also strongly collision-free is not very difﬁcult (In [5], when un-
necessary dynamic addition of elements is discarded, an adversary
against the strong collision-freeness of the scheme reduces to an
attacker against the underlying signature scheme). Due to lack of
space, giving a full proof for the strong collision-freeness of these
accumulators is left to the full version of the paper. We further
recall that Nyberg’s accumulator scheme [19] is strongly collision-
free as it is unconditionally collision-free.
C. TRUSTABILITY AGAINST MALICIOUS
JUDGES
The only property left to demonstrate relates to malicious judges
whose goal is to produce a valid signature on a message that was
not signed by the signer.
THEOREM 6. If the accumulator is strongly collision-free, then
the construction of Section 4 is validatable with respect to the judge
under the RSA assumption.
Due to space constrains, we omit to give a full formal proof of
this result. It shall however appear in the ﬁnal version of the paper.
PROOF. We let A be a polynomial-time algorithm that takes as
input a public key pk and a validation key vk to output a valid
signature σ = (gm , y, w) on a message m. Since a valid
signature is unique, as states Thm 3, it must be that
gm = gm yb+m
(6)
We now consider an adversary ARSA against the RSA problem.
As described in Deﬁnition 2, ARSA takes as input the modulus n
along with the three integers a, b (that divide ϕ(n)), and e (that
is co-prime with ϕ(n)) and an element h ∈ Z
n which e-th root
has to be recovered. Given the algorithm A against the forgery-
resilient scheme, we construct ARSA as follow. First, ARSA com-
putes y = ha and v = hb. It then generates the necessary material
for the accumulator scheme, i.e., it uses AccKey to get the accumu-
lator key KAcc and picks a random K for the PRF F . After that, it
follows on the scheme’s KeyGen algorithm and computes the val-
ues to accumulate. In the end, ARSA obtains a valid pair of public
and veriﬁcation keys that are given as input to A. After A’s execu-
tion, ARSA gets the signature (gm , y, w) and the corresponding
message m.
As for the proof of Thm 5, we can use the strong collision-
freeness of the accumulator scheme to rule out the case where y ∈
{y1, . . . , yN}. Therefore, there must exist an index i < N such
that y = F a
K (i). Once ARSA recovers this index, it uses Equa-
tion (6) to retrieve the value of gm. Using the fact that m and e
are coprime, ARSA computes g using the extended Eucledian algo-
rithm.
D. ON THE USE OF A VALIDATE ORACLE
One might wonder what happens if the powerful adversary against
the validatibility property of a forgery-resilient signature scheme
does have access to a Validate oracle, i.e., she can ask the judge to
assert the validity of a signature. We prove that this does not give a
signiﬁcant advantage.
THEOREM 7
(VALIDATIBILITY WITH A Validate ORACLE).
Let a forgery-resilient scheme with security parameters α and λ. If
2−α is negligible in λ then no polynomial-time adversary, who,
along with the signing and solver oracles, is augmented by an ac-
cess to a Validate oracle, defeats the validatibility property of the
scheme with a non-negligible probability.
PROOF. (Sketch) Assume an adversary who has an access to a
Validate oracle against the validatibility of the scheme. We con-
struct a simulator for that oracle as follows. If the adversary sub-
mits a signature obtained from the signing oracle, then the simula-
tor outputs 1. In all other cases, the simulator outputs 0. Due to
the correctness of the scheme, Validate always outputs 1 when the
simulator outputs 1. In the other case, i.e., when Validate outputs
1 and the simulator outputs 0, we obtain an adversary who suc-
cessfully forges a valid signature. However, the validatibility of the
scheme upper-bounds the probability that an adversary produces a
valid signature by 2−α + negl(λ), which is negligible. Hence, the
probability that the answers from the Validate oracle and the simu-
lator differ is negligible. Using a simple hybrid argument, we can
show that every adversary with an access to a Validate oracle re-
duces to one that does not have such an oracle at her disposal.
A similar result can be obtained for signers. Since they do not
necessarily know the validation key, it is legitimate to study the
eventual advantage a malicious signer acquires through the opera-
tion of querying the judge for the validity of a signature. Using a
similar reasoning used for the case of veriﬁers, we derive the fol-
lowing theorem.
THEOREM 8. Consider a forgery-resilient scheme with secu-
rity parameters α and λ. If there exists a polynomial-time adver-
sary (in λ), who, along with the secret and public keys, has the
ability to query a Validate oracle, and defeats the undeniability
property of the scheme with a non-negligible probability, then we
can construct another polynomial-time adversary who is successful
in defeating the undeniability property of the scheme with a non-
negligible probability without having to query the Validate oracle.
PROOF. (Sketch) In order to show that the signers get no advan-
tage by accessing a Validate oracle, we can show that the result
of the latter can be predicted by constructing a simulator for that
oracle. The simulation is carried out as follows: when the signer
submits a pair (m, σ) to the Validate oracle, the simulator returns
whether the pair is acceptable (since the signer gets the public key
as input, it is known to the simulator). That is, the simulator an-
swers 1 when the pair is aceptable and 0 otherwise. For the proof,
we need to consider the cases where the outputs of Validate and the
simulator differ. For the ﬁrst case, when the Validate oracle outputs
1, i.e., that the signature is valid, then, the simulator never outputs
0, i.e., the signature is not acceptable since every valid signature
is acceptable due to the soundness property. For the other case,
we use the undeniability property (with an empty list as auxiliary
input) to limit the probability that the adversary outputs an accept-
able, but not valid, signature to a negligible value in λ. Again,
the simulator and the Validate oracle produce computationally in-
distinguishable distributions and as before, a hybrid argument can
show that the adversary who behaves like the original one but uses
the simulator instead of the Validate oracle produces an indistin-
guishable output. In other words, this adversary wins the undenia-
bility experiment with a probability essentially unchanged, i.e., the
difference between the two winning probabilities is negligible.
D.1 On Existential Unforgeability of Forgery-
Resilient Signatures
When deﬁning the security properties of forgery-resilient signa-
tures, we have not explicitly demanded that it must be difﬁcult for
a polynomially-bounded forger to construct acceptable signatures.
Clearly, a signature scheme is useless if it is easy to make forgeries,
even if they can be later repudiated. Actually, we can show that the
proposed security deﬁnitions imply that forging a signature of any
message, under a chosen message attack, is hard for polynomially
bounded enemies. As a corollary, any forgery-resilient signature
scheme can be transformed into a secure classical digital signature
scheme.
THEOREM 9. Assuming that 2−α is negligible in λ, any cor-
rect, undeniable, and validatable, forgery-resilient signature scheme
can be transformed into an equally efﬁcient classical digital signa-
ture scheme secure against existential forgery under chosen-message
attacks in which the Accept algorithm plays the role of the classical
Verify algorithm and the validation key vk is discarded.
PROOF. We start from a successful existential forger A who
takes the public-key as input and has access to a signing oracle
OSign for which we consider two winning cases. In the ﬁrst one,
the adversary wins by producing a valid, and hence acceptable, sig-
nature while in the second case the forgery is only an acceptable
signature. We show that both winning probabilities are negligible.
For the ﬁrst case, let us deﬁne the adversary Ap against the unde-
niability property of the forgery-resilient signature scheme as fol-
lows. On input the key pair (sk, pk), the adversary runs A with
input pk and uses sk to build the signing oracle OSign that answers
A’s signing queries. Ap ﬁnally outputs the same output as A,
namely (m, σ). Clearly, the winning probability of Ap equals
A’s, which is negligible due to undeniability.
For the second case, we consider an adversary AO against the
validatibility property of the forgery-resilient signature scheme. Re-
calling that AO has access to a signing oracle OSign, we deﬁne it as
follows: On input pk, it runs A with input pk and forwards any of
its signing query to OSign. As before, AO outputs the same output
as A (Note that AO does not query O since A does not have ac-
cess to it.). At last, validatibiliy ensures that the probability of AO
winning is negligible (recall that 2−α is negligible).
We conclude that pA = negl(λ). Hence the scheme is secure
against existential forgery with chosen message attack.