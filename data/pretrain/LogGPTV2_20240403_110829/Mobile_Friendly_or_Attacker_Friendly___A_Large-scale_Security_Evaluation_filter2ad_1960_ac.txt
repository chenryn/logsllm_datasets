webpages found by applying heuristics (subdomains, TLDs and
URL paths) that indicate a mobile webpage. Mendoza et al. [17]
analyzed inconsistencies in security-related HTTP headers when
websites are served to desktop or mobile clients, finding over 2,000
websites with at least one different configuration. They attribute
these errors in part to the difficulty of consistently maintaining
multiple versions of one website.
Large-scale analyses of web security mechanisms have been
used to determine the security awareness and effort of website
infrastructure operators. Van Goethem et al. [27] measured defen-
sive security mechanisms and vulnerabilities across over 22,000
European websites, based upon which they develop a score that
estimates the security level of a website. Stock et al. [24] performed
SecureNeutralInsecureTimeoutAll secureObsolete parametersHTTP resourcesConnection errorRedirects to HTTPInvalid common nameOther error_All secureObsolete parametersHTTP resourcesConnection errorRedirects to HTTPInvalid common nameOther error_SecureNeutralInsecureTimeoutDesktopMobileSession 3A: Web Attack MeasurementsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand210a longitudinal study of the adoption of security mechanisms, trans-
lating them into security awareness indicators, and correlated these
with the presence of related vulnerabilities. Tajalizadehkhoob et
al. [25] measured security features on shared hosting platforms,
and derived the security effort of both the website operator and
hosting provider through statistical inference of latent factors.
Due to the particular environment, e.g. a small screen size, brows-
ing on mobile devices can suffer exploits that are not present on
the desktop. Niu et al. [20] were the first to uncover additional
vectors for phishing across three mobile browsers, e.g. due to URL
truncation. Felt and Wagner [9] found that the interaction between
mobile applications and websites visited through mobile browsers
can also enable phishing attacks. Amrutkar et al. [3] found two
classes of display security vulnerabilities in mobile browsers that
were previously unseen in desktop versions. The authors later also
analyzed the visibility of security indicators in mobile browsers [4].
Luo et al. [16] studied support for security mechanisms in mobile
browsers over time, finding that while adoption increases over time,
several popular mobile browsers do not yet support a majority of
such mechanisms, and may be slow to pick up features already in
use on popular websites.
6 CONCLUSION
In this paper, we set out to explore whether the security of mobile-
first sites is comparable to that of their desktop counterpart. Through
a large-scale analysis of a variety of security features on 10,222 web-
sites, we find that in most cases desktop sites exhibit a minimally
higher prevalence and wider-reaching coverage of these features
compared to mobile sites. As mobile sites are typically developed by
the same organization, but several years after the desktop version,
the lack of difference in the adoption and coverage of security fea-
tures and the similarities in their implementation strongly suggest
that for many organizations, security is a retroactive effort that is
applied consistently across all assets.
ACKNOWLEDGMENTS
This research is partially funded by the Research Fund KU Leuven.
Victor Le Pochat holds a PhD Fellowship of the Research Foundation
- Flanders (FWO).
REFERENCES
[1] Maarten Aertsen, Maciej Korczyński, Giovane Moura, Samaneh Tajalizadehkhoob,
and Jan van den Berg. 2017. No domain left behind: is Let’s Encrypt democratizing
encryption?. In Proceedings of the Applied Networking Research Workshop (ANRW
2017). ACM, 48–54.
[2] C. Amrutkar, Y. S. Kim, and P. Traynor. 2017. Detecting Mobile Malicious Web-
pages in Real Time. IEEE Transactions on Mobile Computing 16, 8 (Aug 2017),
2184–2197.
[3] Chaitrali Amrutkar, Kapil Singh, Arunabh Verma, and Patrick Traynor. 2012.
VulnerableMe: Measuring Systemic Weaknesses in Mobile Browser Security. In
Proceedings of the 8th International Conference on Information Systems Security
(ICISS 2012). Springer, 16–34.
[4] C. Amrutkar, P. Traynor, and P. C. van Oorschot. 2015. An Empirical Evaluation
IEEE Transactions on Mobile
of Security Indicators in Mobile Web Browsers.
Computing 14, 5 (May 2015), 889–903.
[5] Sajjad Arshad, Seyed Ali Mirheidari, Tobias Lauinger, Bruno Crispo, Engin Kirda,
and William Robertson. 2018. Large-Scale Analysis of Style Injection by Relative
Path Overwrite. In Proceedings of the 2018 World Wide Web Conference (WWW
2018). International World Wide Web Conferences Steering Committee, 237–246.
[6] Kayce Basques. 2018. Simulate Mobile Devices with Device Mode in Chrome Dev-
Tools. https://developers.google.com/web/tools/chrome-devtools/device-mode/.
[7] Frederik Braun and Mario Heiderich. 2013. X-Frame-Options: All about Click-
jacking? “How else do X-Frame-Options protect my website”. https://cure53.de/
xfo-clickjacking.pdf. (2013).
[8] Stefano Calzavara, Alvise Rabitti, and Michele Bugliesi. 2016. Content security
problems?: Evaluating the effectiveness of content security policy in the wild. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications
Security (CCS 2016). ACM, 1365–1375.
[9] Adrienne Porter Felt and David Wagner. 2011. Phishing on Mobile Devices. In
Web 2.0 Security and Privacy 2011 (W2SP 2011).
[10] Gertjan Franken, Tom Van Goethem, and Wouter Joosen. 2018. Who left open
the cookie jar? A comprehensive evaluation of third-party cookie policies. In
Proceedings of the 27th USENIX Security Symposium. 151–168.
[11] Tobias Gondrom and David Ross. 2013. HTTP header field X-Frame-Options.
https://tools.ietf.org/html/rfc7034. (2013).
[12] Mario Heiderich, Marcus Niemietz, Felix Schuster, Thorsten Holz, and Jörg
Schwenk. 2012. Scriptless attacks: stealing the pie without touching the sill.
In Proceedings of the 2012 ACM conference on Computer and communications
security (CCS 2012). ACM, 760–771.
[13] Gareth Heyes. 2014. RPO. http://www.thespanner.co.uk/2014/03/21/rpo/.
[14] Dave S. Kerby. 2014. The Simple Difference Formula: An Approach to Teaching
Nonparametric Correlation. Comprehensive Psychology 3 (Jan. 2014), 1:1–1:9.
[15] Victor Le Pochat, Tom Van Goethem, Samaneh Tajalizadehkhoob, Maciej Ko-
rczyński, and Wouter Joosen. 2019. Tranco: A Research-Oriented Top Sites
Ranking Hardened Against Manipulation. In Proceedings of the 26th Annual
Network and Distributed System Security Symposium (NDSS 2019).
[16] Meng Luo, Pierre Laperdrix, Nima Honarmand, and Nick Nikiforakis. 2019. Time
Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism
Support in Mobile Browsers. In Proceedings of the 26th Annual Network and
Distributed System Security Symposium (NDSS 2019).
[17] Abner Mendoza, Phakpoom Chinprutthiwong, and Guofei Gu. 2018. Uncovering
HTTP Header Inconsistencies and the Impact on Desktop/Mobile Websites. In
Proceedings of the 2018 World Wide Web Conference (WWW 2018). ACM.
[18] Amanda K. Montoya and Andrew F. Hayes. 2017. Two-condition within-
participant statistical mediation analysis: A path-analytic framework. Psycholog-
ical Methods 22, 1 (2017), 6–27.
[19] Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos, Steven Van Acker,
Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna. 2012.
You are what you include: large-scale evaluation of remote javascript inclusions.
In Proceedings of the 2012 ACM conference on Computer and communications
security (CCS 2012). ACM, 736–747.
[20] Yuan Niu, Francis Hsu, and Hao Chen. 2008. iPhish: Phishing Vulnerabilities on
Consumer Electronics. In Proceedings of the 1st Conference on Usability, Psychology,
and Security (UPSEC 2008).
[21] Gustav Rydstedt, Baptiste Gourdin, Elie Bursztein, and Dan Boneh. 2010. Framing
Attacks on Smart Phones and Dumb Routers: Tap-jacking and Geo-localization.
In Proceedings of the 4th USENIX Workshop on Offensive Technologies.
[22] Emily Schechter. 2018.
HTTP as
milestone-chrome-security-marking-http-not-secure/.
secure”.
“not
A milestone for Chrome security: marking
https://www.blog.google/products/chrome/
[23] Statcounter. 2019. Desktop vs Mobile Market Share Worldwide - Jan 2014 -
Dec 2018. http://gs.statcounter.com/platform-market-share/desktop-mobile/
worldwide/#monthly-201401-201812.
[24] Ben Stock, Martin Johns, Marius Steffens, and Michael Backes. 2017. How the
Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security.
In Proceedings of the 26th USENIX Security Symposium (USENIX Security 2017).
USENIX Association, 971–987.
[25] Samaneh Tajalizadehkhoob, Tom Van Goethem, Maciej Korczyński, Arman
Noroozian, Rainer Böhme, Tyler Moore, Wouter Joosen, and Michel van Eeten.
2017. Herding vulnerable cats: a statistical approach to disentangle joint re-
sponsibility for web security in shared hosting. In Proceedings of the 2017 ACM
SIGSAC Conference on Computer and Communications Security (CCS 2017). ACM,
553–567.
[26] Herbert Van de Sompel, Michael L Nelson, Robert Sanderson, Lyudmila L Bal-
akireva, Scott Ainsworth, and Harihar Shankar. 2009. Memento: Time travel for
the web. arXiv preprint arXiv:0911.1112 (2009).
[27] Tom Van Goethem, Ping Chen, Nick Nikiforakis, Lieven Desmet, and Wouter
Joosen. 2014. Large-scale security analysis of the web: Challenges and find-
ings. In Proceedings of the 7th International Conference on Trust and Trustworthy
Computing (TRUST 2014). Springer, 110–126.
[28] Lukas Weichselbaum, Michele Spagnuolo, Sebastian Lekies, and Artur Janc. 2016.
CSP is dead, long live CSP! On the insecurity of whitelists and the future of
content security policy. In Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security (CCS 2016). ACM, 1376–1387.
[29] Frank Wilcoxon. 1945. Individual Comparisons by Ranking Methods. Biometrics
Bulletin 1, 6 (Dec. 1945), 80–83.
[30] Christoph Zauner. 2010. Implementation and benchmarking of perceptual image
hash functions. http://www.phash.org/.
Session 3A: Web Attack MeasurementsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand211A SECURITY FEATURES
The ever-increasing complexity of the modern-day web has intro-
duced a wide variety of vulnerability classes. In this section, we
give a brief summary of the most common ones and discuss some
of the mechanisms that are used to mitigate them: these are the
security features that we study in this paper.
A.1 Cross-site scripting (XSS)
The vast majority of modern websites are dynamically composed
with content originating from many different sources, such as third-
party services or information contained in the GET or POST request.
A cross-site scripting vulnerability is formed when a web page
includes content from an untrusted, attacker-controlled source
without sufficient encoding or escaping. Most commonly, the value
of a GET or POST query parameter is put directly in the response:
when the website developer did not correctly encode this value,
e.g. by replacing  element,
even when these are hosted on a cross-origin domain. This func-
tionality introduced so-called clickjacking attacks, also referred to
as UI-redressing attacks. In this type of attack, the adversary creates
a malicious web page where they include a target web page that
for instance contains a button, which when clicked will perform
an action on the victim’s behalf. On mobile browsers, tricking the
user to click on a certain location may be facilitated by leveraging
tap-jacking attacks, where the adversary re-creates a part of the
visual browser environment which becomes hidden when scrolling
down. This makes the victims believe that they are interacting with
the browser application, e.g. to switch tabs, while they are actually
clicking an overlayed invisible frame [21].
Originally proposed in 2012, the X-Frame-Options response
header can be used to deter clickjacking attacks [11]. More specifi-
cally, this header can be used by website administrators to overrule
the default behavior, and prevent other websites from including
the protected web pages. Next to clickjacking, X-Frame-Options
also provides a range of other attacks that rely on framing a target
web page [7]. As such, it should be considered best practice to re-
turn this header on all endpoints, except those that are explicitly
meant to be included. Recent work by Luo et al. reported that in the
Google Chrome browser, the Allow-From directive of the X-Frame-
Options header is not supported [16]. Instead, the browser vendor
advises website owners to make use of the frame-ancestors di-
rective of Content Security Policy.
A.4 Content-sniffing vulnerabilities
This attack could be mitigated by adding the response header To
prevent attacks that exploit the browser’s content-sniffing algo-
rithm, the X-Content-Type-Options with the value nosniff can
be used. This XCTO header also prevents relative-path override
(RPO) attacks [5, 13], which abuse the fact that some websites in-
clude stylesheets from relative paths, i.e. by using ../ in the path.
A mismatch between what is considered the endpoint on the client-
side versus on the server-side, allows an adversary to inject CSS
code under certain conditions. This could be used to perform a wide
range of attacks against unwitting victims [12].
A.5 Man-in-the-middle attacks
Many recent initiatives are driving the adoption of TLS on the web,
e.g. Let’s Encrypt allows website owners to conveniently obtain a
certificate for free, resulting in a significantly increased adoption [1],
and Google Chrome is marking web pages visited over HTTP as
“Not Secure” [22]. However, there are still various things that can
go wrong in the presence of a man-in-the-middle adversary who
can actively manipulate unencrypted requests and responses. For