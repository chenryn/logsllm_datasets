title:Understanding the prevalence and use of alternative plans in malware
with network games
author:Yacin Nadji and
Manos Antonakakis and
Roberto Perdisci and
Wenke Lee
Understanding the Prevalence and Use of Alternative
Plans in Malware with Network Games
Yacin Nadji
College of Computing
Georgia Institute of
Technology
Atlanta, GA 30602, USA
PI:EMAIL
Manos Antonakakis
Damballa Inc.
Atlanta, GA 30308, USA
PI:EMAIL
Wenke Lee
College of Computing
Georgia Institute of
Technology
Atlanta, GA 30602, USA
PI:EMAIL
Roberto Perdisci
Department of Computer
Science
University of Georgia
Athens, GA 30602, USA
PI:EMAIL
ABSTRACT
In this paper we describe and evaluate a technique to im-
prove the amount of information gained from dynamic mal-
ware analysis systems. By playing network games during
analysis, we explore the behavior of malware when it be-
lieves its network resources are malfunctioning. This forces
the malware to reveal its alternative plan to the analysis
system resulting in a more complete understanding of mal-
ware behavior. Network games are similar to multipath ex-
ploration techniques, but are resistant to conditional code
obfuscation. Our experimental results show that network
games discover highly useful network information from mal-
ware. Of the 161,000 domain names and over three million
IP addresses coerced from malware during three weeks, over
95% never appeared on public blacklists. We show that this
information is both likely to be malicious and can be used
to improve existing domain name and IP address reputation
systems, blacklists, and network-based malware clustering
systems.
1.
INTRODUCTION
Malware authors often implement a variety of techniques
to improve the reliability of their malicious network infras-
tructure. For example, short-lived domain names are used
by attackers to act as temporary drop sites for exﬁltrated
private information. Fast-ﬂux service networks [30] let at-
tackers rapidly change DNS resource records to improve the
availability of their malicious network infrastructure. Mali-
cious networks are becoming decentralized to eliminate a
central point of failure. All of these techniques improve
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’11 Dec. 5-9, 2011, Orlando, Florida USA
Copyright 2011 ACM 978-1-4503-0672-0/11/12 ...$10.00.
the reliability of malware by making them more resistant
to take-down eﬀorts. Furthermore, malware often makes
use of randomness when choosing domain names or IP ad-
dresses to use to contact its command-and-control (C&C)
server, which makes malware even more resilient and more
diﬃcult to analyze.
In particular, this poses a problem for dynamic malware
analysis systems, which suﬀer from observing a single exe-
cution trace of a running program. For example, consider
a malware family that randomly chooses a C&C domain
name from a predeﬁned list of 10 domains to connect to
at runtime. MD5 distinct binaries of this malware family
could have non-intersecting sets of domain names implying
that they are unrelated samples. Furthermore, if a malware
sample from this family successfully connected to the ﬁrst
domain name it picked and queried, we would fail to see the
remaining nine domain names it could have used. These ad-
ditional domain names could be instrumental in providing a
malware sample a reliable way of contacting its C&C in the
event some of its domain names had been remediated since
it was initially created. Of existing malware samples seen in
the wild, how many employ alternative plans in the form of
additional domain names or IP addresses to contact in the
event of network failure?
In this paper, we present a framework that addresses the
primary weakness of dynamic malware analysis from a new
point of view using the concept of network games. A network
game tricks executing malware into revealing additional net-
work information i.e., domain names and IP addresses. By
providing fabricated network responses, malware is led to
believe its C&C is unavailable forcing it to attempt to con-
nect by whatever means necessary. Gaming malware from
the network is complementary to existing approaches, such
as multipath exploration [22, 38], but is resistant to eva-
sion through conditional code obfuscation [34]. By using
RFC-compliant network responses, games are indistinguish-
able from legitimate network responses from the malware’s
perspective on the host. Using our framework, GZA1, we
1Named after the Wu-Tang Clan member also known as
“The Genius”
design a suite of games to understand the use and preva-
lence of alternative plans in malware in the wild by explor-
ing malware behavior under a perceived unreliable network.
Furthermore, we quantify the usefulness of the additional
network information to security practitioners by examining
public blacklists for the appearance of this information.
The gains generated from playing network games with
malware directly beneﬁts DNS and IP reputation systems [2,
4], network-based malware clustering systems [24], and tra-
ditional domain name and IP address blacklists. Further-
more, with these games we can obtain a better understand-
ing of domain name generation algorithms [25, 39] (DGA)
to aid in reverse-engineering them.
Speciﬁcally, our paper provides the following contribu-
tions:
• We design and implement a framework, GZA, for ex-
ploratory malware analysis using the concept of net-
work games. Network games can be implemented quickly
in as little as 100 lines of Python to respond to devel-
oping malware behavior and ﬁt the speciﬁc needs of a
malware analyst.
• Using GZA, we measure the prevalence of alternative
plans in malware. We analyze a large dataset con-
taining 2,191 distinct malware samples, and show that
approximately 17% of the samples exhibit alternative
plan behaviors.
• We study the long-term beneﬁts of using network games
to complement existing malware analysis techniques.
Network games coerce, on average, an additional three
domain names and two IP addresses from samples with
alternative plans. Approximately 95% of the coerced
information never appears on public blacklists through-
out the course of our study. Over 76% of the coerced
domain names were ﬂagged as potentially malicious by
the domain name reputation system Notos [2].
The remainder of this paper is structured as follows. In
Section 2 we explicitly deﬁne network games and the speciﬁc
games we used in our study. In Section 3 we describe the im-
plementation of GZA. We present the methodology for two
studies to examine alternative plan prevalence in Section 4,
with the subsequent results shown in Section 5. We discuss
the implications of network games as well as potential eva-
sion techniques and their solutions in Section 6. We discuss
similarities and diﬀerences from prior work in Section 7 and
conclude the paper in Section 8.
2. PLAYING GAMES WITH MALWARE
Malware uses the same network protocols that benign soft-
ware uses when performing malicious activity. Despite the
fact that many network protocols exist, nearly all commu-
nication on the Internet follows one of two patterns:
1. A transport layer (e.g., TCP and UDP) connection is
made to an IP address directly, or
2. A DNS query is made for a domain name (e.g., google.com)
and a connection to the returned IP address is made
as in #1.
two patterns for contacting its C&C servers and performing
its malicious activities, these are the patterns we must target
during analysis.
We deﬁne a network game to be a set of rules that de-
termine when to inject “false network information” into the
communication between a running malware executable and
the Internet. More speciﬁcally, false information is a forged
network packet. Consider the running malware sample m in
Figure 1(a). Sample m ﬁrst performs a DNS query to deter-
mine the IP address of its C&C server located at foo.com.
The returned IP address, a.b.c.d, is then used to connect to
the C&C and the malware has successfully “phoned home”.
Sample m could also bypass DNS entirely if it were to hard-
code the IP address of its C&C and communicate with it di-
rectly, as we see in Figure 1(c). This gives us two opportuni-
ties to play games with sample m as shown in Figures 1(b,d):
we can say the domain name resolution of foo.com was un-
successful (b) or the direct connection to IP address a.b.c.d
was unsuccessful (d). At this point, sample m has four pos-
sible courses of action:
1. Retry the same domain name or IP address,
2. Remain dormant to evade dynamic analysis and try
again later,
3. Give up, or
4. Try a previously unused domain name or IP address.
In (b) and (d), we see the malware samples taking action #4
and querying a previously unseen domain name (bar.com)
and IP address (e.f.g.c), respectively. Action #2 is a com-
mon problem in dynamic malware analysis systems in gen-
eral and is further discussed in Section 6.2.
2.1 Notation
Stated more formally, let h be a machine infected with a
malware sample m that is currently executing in our analy-
sis system running game Gname. Gname is a packet transfor-
mation function called name. Given a packet p, Gname(p)
represents Gname gaming p and its value is either the origi-
nal packet, or some altered packet p(cid:48) that changes the intent
of p. The implementation details of Gname determine when
to return p or p(cid:48). For example, p could contain the resolved
IP address of a queried domain name d, whereas p(cid:48) says d
does not exist. In all other ways, such as type of packet and
source and destination IP addresses, p and p(cid:48) are identical.
As h communicates with the outside world, it sends ques-
tion packets, qi, in the form of domain name queries and
requests to initiate a TCP connection and receives response
packets, rj, in the form of domain name resolutions and ini-
tiated TCP connections2. False information is provided to
the host h by delivering Gname(rj) in lieu of rj. A sample set
for m, Gname,m represents the set of unique domain names
and IP addresses queried by m while running under Gname.
The functions D and I operate on sample sets and return
the subset of unique domain names or the subset of unique
IP addresses, respectively. Given a set of malware sample
MD5s, M , a game set, GM
name represents the subset of sam-
ples that were “successfully gamed” by Gname. A game is
considered successful if it forces a malware sample to query
Higher-level protocols leverage these two use cases for nearly
all communication. If we can assume malware relies on these
2More accurately, a TCP response packet is a TCP SYN-
ACK packet as part of the TCP connection handshake.
Gname
Gname(p)
Gname,m
GM
name
A game called name.
The result of Gname’s transformation on
packet p.
The set of network information i.e., unique
IP addresses and domain names contacted,
generated when malware sample m is gamed
by Gname.
The subset of malware samples from M that
were successfully gamed by Gname.
D(s), I(s) Given a sample set, s, return the subset of
unique domain names or IP addresses in s,
respectively.
Table 1: Notation for describing games and the sets
they generate.
DNS/TCP packets as they are the predominant protocols
used to establish and sustain C&C communication; how-
ever, our approach is general and can be adapted to other
protocols used less commonly in C&C communication. The
design of an individual game is based on anecdotal evidence
of how malware samples, in general, communicate. We de-
sign seven games to perform our analysis of alternative plan
behavior in malware:
Gnull.
To provide a baseline to compare the eﬀectiveness of fu-
ture games, this game allows response packets to reach its
host without modiﬁcation. In other words, Gnull is the iden-
tity function.
Note that this does not mean malware communication is
allowed to run completely unfettered. We perform stan-
dard precautionary measures to prevent malicious activity
from harming external systems. However, these measures
are not considered part of our network games, but simply
good practice when analyzing potentially malicious binaries.
We discuss these precautionary measures, which are always
performed irrespective of the active game, in detail in Sec-
tion 3.2.
Gdns1.
Malware often immediately connects to its C&C or per-
forms some probing operation to determine the status of its
network before doing so. This game assumes the ﬁrst domain
name lookup corresponds to a test of network availability
and should be allowed to pass through without modiﬁca-
tion. Subsequent domain name lookups for domains other
than what was queried ﬁrst will be spoofed. For example, if
google.com is the ﬁrst domain queried, all subsequent do-
mains that are not google.com will be spoofed. We approxi-
mate this behavior in the next game using a whitelist. For a
DNS response packet pd, Gdns1(pd) returns pd if its the ﬁrst
DNS request packet and p(cid:48)
d otherwise. Gdns1 is successful
for m iﬀ |Gdns1,m| > |D(Gnull,m)|.
Gdnsw.
A popular domain name, like google.com, is unlikely to
operate as a C&C server for a botnet. Therefore, DNS
queries on popular domain names are unlikely to be conceal-
ing additional malicious network information. For a DNS
response packet pd, Gdnsw(pd) returns pd if the domain be-
ing queried is whitelisted and p(cid:48)
d otherwise. Our whitelist is
Figure 1: Malware samples m (a-b) and m(cid:48) (c-d) ini-
tiating a connection with the C&C server. m con-
nects by ﬁrst performing a DNS query to determine
the IP address of its C&C server followed by initiat-
ing a TCP connection. Sample m(cid:48) connects directly
to the C&C using a hard-coded IP address. Exam-
ples (a) and (c) connect without intervention by a
game, while (b) and (d) have false information (de-
noted by boxes) injected.
more network information than under a run without a game
present. We formally deﬁne this in the following section.
The described notation is summarized in Table 1 and will
be used throughout the remainder of the paper.
2.2 Designing Games for Interrogating Mal-
ware
Crafting games without a priori knowledge of malware
network behavior is diﬃcult. Furthermore, a successful game
for sample m may be unsuccessful for sample m(cid:48). By using
generic games “en masse”, we improve our chances of suc-
cessfully gaming malware during analysis. We design a suite
of games to coerce a given malware sample into showing its
alternative plan during analysis. We apply all games to a
malware sample to improve the likelihood of success. Each
game focuses either on DNS or TCP response packets in
an attempt to harvest additional C&C domain names or IP
addresses, respectively. For a DNS response packet pd, p(cid:48)
d
is a modiﬁed response packet that declares the queried do-
main name does not exist, i.e., a DNS rcode of NXDOMAIN.
For a TCP response packet pt, p(cid:48)
t is a modiﬁed response
packet that terminates the 3-way TCP handshake, i.e., a
TCP-RESET packet. In this paper, we choose to focus on
DNS resolvermGZAC&C1IP: a.b.c.dC&C2IP: e.f.g.hQ: foo.com IP?R: a.b.c.dQ: TCP SYNa.)b.)Q: foo.com IP?R: a.b.c.dR: NXDOMAINQ: bar.com IP?...c.)...m'Q: TCP SYNR: TCP SYN-ACK...Q: TCP SYNR: TCP SYN-ACKR: TCP RSTQ: TCP SYN...d.)comprised of the top 1000 Alexa domain names [1]. Gdnsw
is successful for m iﬀ |Gdnsw,m| > |D(Gnull,m)|.
Gtcpw.
An IP address that resides in a known benign network
is also unlikely to function as a C&C, much like a popu-
lar domain name. For a TCP response packet pt, Gtcpw(pt)
returns pt if the IP being queried is whitelisted and p(cid:48)
t oth-
erwise. Our whitelist is the dnswl IP-based whitelist [17].
Gtcpw is successful for m iﬀ |Gtcpw,m| > |I(Gnull,m)|.
Gtcp1.
Malware is often delivered by a dropper, a program that
downloads, installs and runs the actual malicious binary. If
we prevent the dropper from downloading its malicious pay-
load, we will not observe the malicious behavior and fail to
unearth alternative plans. We create a class of games that
focus on droppers by allowing a variable number of TCP
streams to successfully complete before forging response pack-
ets. For a TCP response packet pt, Gtcp1(pt) returns pt if
the packet is the ﬁrst TCP stream and p(cid:48)
t otherwise. Gtcp1
is successful for m iﬀ |Gtcp1,m| > |I(Gnull,m)|.
Gtcp2.
Droppers can have multiple stages where malicious pay-
loads are downloaded in more than one TCP stream. This
games two stage droppers. This game is the same as Gtcp1,
but allows two TCP streams to complete. For a TCP re-
sponse packet pt, Gtcp2(pt) returns pt if the packet is the
ﬁrst or second TCP stream and p(cid:48)
t otherwise. Gtcp2 is suc-
cessful for m iﬀ |Gtcp2,m| > |I(Gnull,m)|.
Gtcp3.
While one and two stage droppers are fairly common in
the wild, we wanted to test for three stage droppers. We
can compare the results for Gtcp1, Gtcp2 and Gtcp3 to deter-
mine when we no longer beneﬁt from increasing the number
of allowable TCP streams. This game is the same as Gtcp1,
but allows three TCP streams to complete. For a TCP re-
sponse packet pt, Gtcp3(pt) returns pt if the packet is the
ﬁrst, second or third TCP stream and p(cid:48)
t otherwise. Gtcp3
is successful for m iﬀ |Gtcp3,m| > |I(Gnull,m)|.
3. GZA
In this section, we describe the architecture of GZA and
speciﬁc implementation details of our system.
3.1 Architecture
GZA contains two components: dynamic malware anal-
ysis and gameplay. The ﬁrst component simply runs mali-
cious code in a fresh virtual machine (VM) and records all
network activity that occurs in the VM. All network activity
for a VM is routed through one of the games described in
Section 2.2 as seen in Figure 2. While the malware sam-
ple under analysis initiates communication with its C&C,
all packets destined for a VM are routed through a network