LAN PROTOCOL ATTACKS 
PART 1 -
ARP RELOADED
Presented at Defcon 15 
Las Vegas, NV 2007
Jesse ‘x30n’ D’Aguanno
jesse[at]praetoriang.net / x30n[at]digrev.org
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
Background
•
$whoami
–
Jesse ‘x30n’ D’Aguanno
–
Director of Professional Services and Research - Praetorian Global
•
Lead Professional Services - Penetration Testing, Code audit, etc.
•
Lead Vulnerability Research Efforts
–
Team Captain / Researcher - Digital Revelation
•
Group of hackers who share stuff & beat other hackers in competitions
•
Usual suspects in Defcon CTF
•
Taken Defcon CTF title twice + Interz0ne CTF & toorcon rootwars
–
Invented techniques and coined the term “Blackjacking”
–
Didn’t write the book “Blackjacking”
2
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP - Background
•
Networked systems need a way to identify the layer 2 address of peers on the same 
network segment based on their protocol address
•
Enter the Address Resolution Protocol (ARP)
–
ARP allows a system to dynamically identify the hardware address (In our case MAC address) 
of a networked peer via its protocol address (IP address)
–
It does this by sending REQUEST packets to the network broadcast for any one with the IP 
we’re looking for
•
I.e “Who has 192.168.1.100”
–
The host with the matching IP sends a RESPONSE packet to the requester with it’s hardware 
address
•
I.e “192.168.1.100 is at 00:DF:1A:9C:A3:78”
–
To reduce the amount of transactions required, hosts maintain an “ARP cache” of recently 
resolved MAC Address / IP Pairs
•
Else, each transaction would require an ARP lookup
3
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP - Background
•
Anatomy of an ARP packet
4
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
•
192.168.1.20 Requests the hardware address of 192.168.1.100
ARP Request
5
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP - Reply
6
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP Attacks - ARP Cache 
•
ARP Cache Poisoning
–
ARP is unauthenticated
–
Whoever sends a reply to a requester first wins
•
The ARP cache is updated with the contents of the reply
•
Sometimes the ARP cache is updated when it gets a reply even if it didn’t send a request
– Depends on OS
–
Traditionally, this is exploited by sending forged REPLY packets to a victim to have them 
update their ARP cache 
7
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP Attacks - ARP Cache 
•
ARP cache poisoning results:
–
Man in the Middle 
•
E.g Poison the victim with your MAC address for the IP address of the gateway... Host 
communicates with you instead of the gateway
–
Denial of Service (DoS)
•
E.g Poison the victim with a bogus MAC address and the IP address of the gateway... 
Host can’t communicate with gateway
8
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP Cache Poisoning - MiTM
•
Client Sends ARP Request for 192.168.1.1 (Gateway)
9
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP Cache Poisoning - MiTM
•
Attacker sends spoofed REPLY packet to host with its MAC for 192.168.1.1
10
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP Cache Poisoning - MiTM
•
Attacker can now forward packets to 192.168.1.1 intercepting all communication 
between 192.168.1.20 and the Gateway (192.168.1.1)
11
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP Cache Poisoning - DoS
•
192.168.1.20 Requests the hardware address of 192.168.1.1 (Gateway)
12
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP Cache Poisoning - DoS
•
Attacker sends spoofed REPLY packet to 192.168.1.1 that 192.168.1.1 is at 
00:DE:AD:BE:EF:01 (Non-existent MAC Address)
13
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP Cache Poisoning - DoS
•
Victim now thinks 192.168.1.1 is at 00:DE:AD:BE:EF:01 so communication is broken
14
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP Attacks - CAM Table Overflow
•
CAM Table Overflow
–
A network hub broadcasts all packets to all ports
–
A network switch on the other hand maintains a record of what hardware addresses are 
associated with each switch port 
•
Stores this and other info in its CAM (Content-Addressable Memory) table
–
Only forwards packets to the port associated with the destination hardware address in the 
ethernet frame
–
CAM table overflow
•
Attacker sends thousands of bogus MAC addresses to the network
•
Switch’s CAM table is updated with each MAC
•
The CAM table can only hold so much data, so at some point it becomes full
•
The switch then forwards all traffic to all ports again (Like a hub)
•
CAM table overflow results:
–
Since switch now acts the same as a hub, the attacker can eavesdrop (“sniff”) all traffic on that 
network segment
15
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
ARP Attacks - Weaknesses
•
ARP cache poisoning
–
Current methods of ARP cache poisoning utilize ARP REPLY packets
–
Unfortunately, not all OSs will update their ARP cache when they receive an ARP REPLY if 
they haven’t first sent a matching ARP REQUEST
–
To overcome this, some poisoning tools sniff the network for broadcast ARP REQUESTs, 
sending forged REPLYs in response to all requests
•
CAM table overflow
–
CAM table overflow requires many hundreds if not thousands of spoofed ARPs
–
Obviously very noisy and identifiable attack
–
Technologies like Cisco’s port security can limit the number of MAC addresses allowed on 
each switch port
•
Mitigates the risk of a CAM table overflow since the switch doesn’t recognize any more MAC 
addresses on that port once the pre-set limit is reached
16
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
Arpcraft
•
arpcraft tool was created to help in testing different ARP conditions
~$./arpcraft
ERROR: Missing required options!
Usage: ./arpcraft [options]
Options:
-i                   Interface to send on    *
-sha               Source Hardware Address *
-spa                Source Protocol Address *
-tha               Target Hardware Address *
-tpa                Target Protocol Address *
-o "request" or "reply"         Opcode                  *
-esrc              Source MAC for Ethernet Frame
-edst              Destination MAC for Ethernet Frame
-h                              This Help Message
-interval 
          How often we should send ARP (defaults to 5 secs)
-c -count   
            How many packets to send (Defaults to unlimited)
17
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
Arpcraft
•
arpcraft (cont.)
                     Ethernet Frame Layout
#################################################################
#  Destination MAC Address:     00:00:00:00:00:00               #    
#
#  Source MAC Address:          00:00:00:00:00:00               #    
#
#  Ether Type:                  ARP                             #    
#
#################################################################
                     ARP Packet Layout
#################################################################
#  Hardware Type:                       1 (Ethernet)            #    
#
#  Protocol Type:                       0800 (IP)               #    
#
#  Hardware Address Length:             (6)                     #    
#
#  Protocol Address Length:             (4)                     #    
#
#  Opcode:                                      #    
#
#  Sender Hardware Address (SHA):       00:00:00:00:00:00       #    
#
#  Sender Protocol Address (SPA):       127.0.0.1               #    
#
#  Target Hardware Address (THA):       00:00:00:00:00:00       #    
#
#  Target Protocol Address (TPA):       127.0.0.1               #    
#
#################################################################
~$
18
Defcon 15
Las Vegas, NV August 2007
Jesse D’Aguanno
(c) Copyright 2007 Praetorian Global, LLC
Arpcraft
•
Examples