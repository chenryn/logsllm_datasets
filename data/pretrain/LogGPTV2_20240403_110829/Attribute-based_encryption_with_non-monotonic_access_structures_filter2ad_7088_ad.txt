The adversary A, will submit two challenge
Challenge
messages M0 and M1 to the simulator. The simulator ﬂips
a fair binary coin ν, and returns an encryption of Mν . The
ciphertext is output as
x = C f (x)}x∈γ,
E = (γ, E(1) = Mν Z, E(2) = C,{E(3)
x = C θx}x∈γ)
{E(4)
If µ = 0 then Z = e(g, g)abc. Then by inspection, the ci-
phertext is a valid ciphertext for the message Mν under the
set γ.
Otherwise, if µ = 1, then Z = e(g, g)z. We then have
E(1) = Mν e(g, g)z. Since z is random, E(1) will be a ran-
dom element of GT from the adversary’s viewpoint and the
message contains no information about Mν .
A will submit a guess ν0 of ν.
Phase 2 The simulator acts exactly as it did in Phase 1.
If ν0 = ν the
Guess
simulator will output µ0 = 0 to indicate that it was given a
valid BDH-tuple; otherwise, it will output µ0 = 1 to indicate
it was given a random 4-tuple.
As shown above, the simulator’s generation of public pa-
rameters and private keys is identical to that of the actual
scheme.
In the case where µ = 1 the adversary gains no informa-
tion about ν. Therefore, we have Pr[ν 6= ν0|µ = 1] = 1
2 .
Since the simulator guesses µ0 = 1 when ν 6= ν0, we have
Pr[µ0 = µ|µ = 1] = 1
2 .
If µ = 0 then the adversary sees an encryption of Mν . The
adversary’s advantage in this situation is  by assumption.
Therefore, we have Pr[ν = ν0|µ = 0] = 1
2 + . Since the
simulator guesses µ0 = 0 when ν = ν0, we have Pr[µ0 =
µ|µ = 0] = 1
2 + .
The overall advantage of the simulator in the Decisional
2 =
2
2 Pr[µ0 = µ|µ = 0] + 1
2 − 1
2 Pr[µ0 = µ|µ = 1]− 1
BDH game is 1
1
1
2 ( 1
2 + ) + 1
2
2 = 1
2 .
5. CONCLUSIONS AND FUTURE DIREC-
TIONS
We presented the ﬁrst Attribute-Based Encryption system
that supports the expression of non-monotone formulas in
key policies. We achieved this through a novel application of
revocation methods into existing ABE schemes. In addition,
the performance of our scheme compares very favorably to
that of existing, less-expressive ABE systems.
An important goal in ABE systems is to create even more
expressive systems. Our work took a signiﬁcant step forward
by allowing key policies that can express any access formula.
Eventually, we would like to have systems that can express
any access circuit.
6. REFERENCES
[1] H. Anton and C. Rorres. Elementary Linear Algebra,
9th Edition. 2005.
Cryptology – Eurocrypt, volume 2656 of LNCS.
Springer, 2003.
[12] R. Canetti, S. Halevi, and J. Katz. Chosen Ciphertext
Security from Identity Based Encryption. In Advances
in Cryptology – Eurocrypt, volume 3027 of LNCS,
pages 207–222. Springer, 2004.
[13] M. Chase. Multi-authority attribute-based encryption.
In The Fourth Theory of Cryptography Conference
(TCC 2007), 2007.
[14] L. Cheung and C. Newport. Provably Secure
Ciphertext Policy ABE. In ACM conference on
Computer and Communications Security (ACM CCS),
2007.
[15] C. Cocks. An identity based encryption scheme based
on quadratic residues. In IMA Int. Conf., pages
360–363, 2001.
[16] V. Goyal, O. Pandey, A. Sahai, and B. Waters.
Attribute Based Encryption for Fine-Grained Access
Conrol of Encrypted Data. In ACM conference on
Computer and Communications Security (ACM CCS),
2006.
[17] M. Ito, A. Saito, and T. Nishizeki. Secret Sharing
Scheme Realizing General Access Structure. In IEEE
Globecom. IEEE, 1987.
[18] M. Naor and B. Pinkas. Eﬃcient trace and revoke
[2] A. Beimel. Secure Schemes for Secret Sharing and Key
schemes. In Financial Cryptography, pages 1–20, 2000.
Distribution. PhD thesis, Israel Institute of
Technology, Technion, Haifa, Israel, 1996.
[3] J. Benaloh and J. Leichter. Generalized Secret Sharing
and Monotone Functions. In Advances in Cryptology –
CRYPTO, volume 403 of LNCS, pages 27–36.
Springer, 1988.
[4] J. Bethencourt, A. Sahai, and B. Waters.
Ciphertext-policy attribute-based encryption. In
Proceedings of the IEEE Symposium on Security and
Privacy (To Appear), 2007.
[5] G. R. Blakley. Safeguarding cryptographic keys. In
National Computer Conference, pages 313–317.
American Federation of Information Processing
Societies Proceedings, 1979.
[6] D. Boneh and X. Boyen. Eﬃcient Selective-ID Secure
Identity Based Encryption Without Random Oracles.
In Advances in Cryptology – Eurocrypt, volume 3027
of LNCS, pages 223–238. Springer, 2004.
[7] D. Boneh and M. Franklin. Identity Based Encryption
from the Weil Pairing. In Advances in Cryptology –
CRYPTO, volume 2139 of LNCS, pages 213–229.
Springer, 2001.
[8] D. Boneh, C. Gentry, and B. Waters. Collusion
Resistant Broadcast Encryption with Short
Ciphertexts and Private Keys. In Advances in
Cryptology – CRYPTO, volume 3621 of LNCS, pages
258–275. Springer, 2005.
[9] R. Bradshaw, J. Holt, and K. Seamons. Concealing
complex policies with hidden credentials. In ACM
Conference on Computer and Communications
Security, pages 146–157, 2004.
[10] E. F. Brickell. Some ideal secret sharing schemes.
Journal of Combinatorial Mathematics and
Combinatorial Computing, 6:105–113, 1989.
[11] R. Canetti, S. Halevi, and J. Katz. A Forward-Secure
Public-Key Encryption Scheme. In Advances in
[19] M. Pirretti, P. Traynor, P. McDaniel, and B. Waters.
Secure Atrribute-Based Systems. In ACM conference
on Computer and Communications Security (ACM
CCS), 2006.
[20] V.V. Prasolov. Problems and Theorems in Linear
Algebra. American Mathematical Society, 1994.
[21] A. Sahai and B. Waters. Fuzzy Identity Based
Encryption. In Advances in Cryptology – Eurocrypt,
volume 3494 of LNCS, pages 457–473. Springer, 2005.
[22] A. Shamir. How to share a secret. Commun. ACM,
22(11):612–613, 1979.
[23] A. Shamir. Identity Based Cryptosystems and
Signature Schemes. In Advances in Cryptology –
CRYPTO, volume 196 of LNCS, pages 37–53.
Springer, 1984.
[24] N. Smart. Access control using pairing based
cryptography. In CT-RSA, pages 111–121, 2003.
APPENDIX
A. REALIZING ANY ACCESS FORMULA
We show how our main construction above can be used to
realize any access formula. Any formula can be represented
as an access tree T . Each interior node, y, in the tree will
be either a threshold gate, with threshold ky, and numy
children, or a NOT of a threshold gate. We also assume that
the children of an interior node are ordered; we let parent(y)
denote the parent of node y and we let index(y) denote which
child node of parent(y) node y is. In addition, each leaf will
be either an attribute or the NOT of an attribute. We note
that using threshold gates captures the case of AND and
OR gates. We let attr(y) denote a leaf node’s attribute.
We ﬁrst observe that by applying DeMorgan’s law we can
transform a tree T 0 into a tree T so that T represents the
same access scheme as T 0, but has only NOTs at the leaves,
where the attributes are. The observation follows from the
fact that a negative k of n threshold gate is equivalent to a
k + 1 of n threshold gate, where all the children are negated.
We can transform the tree T 0 by doing a pre-order traversal
and applying this transformation to all interior nodes that
are negated. The result is a tree T that only has negated
leaves. For the rest of this discussion we assume that such
a transformation has been applied and that only the leaves
of T are negated, interior nodes will consist only of positive
threshold gates.
Now we need to show how to assign shares λy ∈ Zp to each
leaf node in a (transformed) access tree T for key generation
and which ωy ∈ Zp values to use for a particular decryption.
We essentially assign each interior node a value on a random
polynomial and recurse. We begin by assigning λy values to
all nodes in the system. First, we assign the root of the tree
the value λroot = α. Then, we repeat the following process
until all nodes have been assigned. Pick an arbitrary interior
node y that has λy deﬁned, but where the children of y are
undeﬁned. Then pick a random polynomial qy(x) over Zp of
degree kx − 1 with the restriction that qy(0) = λy. For each
child node of z assign λz = qy(indexz). After this is done
the λy values for interior nodes can be discarded. For Each
leaf node y, λy is a share in the scheme for attribute attr(x)
where the attribute is primed if the leaf node is negated.
Finally, suppose there is an encryption to a set S of at-
tributes and further suppose that there is a satisfying assign-
ment to the access tree T of a key. Then the ωi values can
be derived by recursively computing the Lagrangian coeﬃ-
cients of each satisﬁed node in the tree. We refer the reader
to the work of Goyal et al. [16] and Bethencourt, Sahai, and
Waters [4] for details on this and eﬃciency optimizations.
B. CORRECTNESS OF SIMULATION
Here we prove Claim 1.
Proof:
We will establish this claim by a case analysis. For key
material corresponding to negated parties ˘xi:
• If xi ∈ γ, then let ri = −λi + r0
i. Note that ri is
distributed uniformly over Zp and is independent of all
other variables except r0
i =
gr0
. Also, D(4)
2 = gλi+ri
i) = V (xi)ri .
i = g−λi+r0
And ﬁnally, D(5)
i = gri . Thus, this key
material is valid and distributed correctly.
i. Then observe that D(3)
i = gθxi·(−λi+r0
• If xi /∈ γ, then the simulation produces key material
2
i
using the same procedure as the ABE scheme.
For key material corresponding to non negated parties ˘xi:
• If xi ∈ γ, then the simulation produces key material
using the same procedure as the ABE scheme.
• If xi /∈ γ, then to see why the simulated key material is
good, note that by our construction of u(x), the value
i + u(xi) will be non-zero for all xi /∈ γ. Now let
xd
ri = r0
i +u(xi) . Note that ri is distributed uniformly
xn
over Zp and is independent of all other variables except
r0
i. Then,
i− λi
D(1)
i
= g
= g
−f(xi)
xd
+u(xi)
i
3
−λif(xi)
xd
i
(gxd
2
i +u(xi)
+u(xi) (gxd
2
i +u(xi)
i
gf (xi))r0
gf (xi))r0
i
−λi
+u(xi) (gxd
xd
i
r0
i−
λi
+u(xi)
xd
i
2
= gλi
i +u(xi)
gf (xi))
i +u(xi)
2
2 (gxd
2 (gxd
2 T (xi)ri
2
= gλi
= gλi
i +u(xi)
gf (xi))
and
D(2)
i = g
xd
i
3
−1
+u(xi)
r0
i−
gr0
i = g
λi
+u(xi) = gri
xd
i
gf (xi))r0
i
2