        ```
    2.  运行 playbook：
        ``` literallayout
        $ ansible-playbook -v -i path_to_inventory_directory/inventory.file path_to_playbooks_directory/ensure-reboot-sudocmd-is-present.yml
        ```
    :::
3.  创建引用命令的 `sudo`{.literal} 规则：
    ::: orderedlist
    1.  创建一个
        `ensure-sudorule-for-idmuser-on-idmclient-is-present.yml`{.literal}
        Ansible playbook，以使用 `sudo`{.literal} 命令条目来确保存在
        sudo 规则。sudo 规则允许 [**idm_user**]{.strong} 重新启动
        [**idmclient**]{.strong}
        计算机。要简化此步骤，您可以复制并修改 `/usr/share/doc/ansible-freeipa/playbooks/sudorule/ensure-sudorule-is-present.yml`{.literal}
        文件中的示例：
        ``` literallayout
        ---
        - name: Tests
          hosts: ipaserver
          become: true
          tasks:
          # Ensure a sudorule is present granting idm_user the permission to run /usr/sbin/reboot on idmclient
          - ipasudorule:
              ipaadmin_password: MySecret123
              name: idm_user_reboot
              description: A test sudo rule.
              allow_sudocmd: /usr/sbin/reboot
              host: idmclient.idm.example.com
              user: idm_user
              state: present
        ```
    2.  运行 playbook：
        ``` literallayout
        $ ansible-playbook -v -i path_to_inventory_directory/inventory.file path_to_playbooks_directory/ensure-sudorule-for-idmuser-on-idmclient-is-present.yml
        ```
    :::
:::
::: title
**验证步骤**
:::
验证 idm [**\_user 能够使用 `sudo`{.literal} 重新启动
[**idmclient**]{.strong}，以此测试您在 IdM
服务器上确认其存在性的**]{.strong} `sudo`{.literal} 规则是否在
[**idmclient**]{.strong}
上工作。请注意，可能需要过几分钟后，服务器上所做的更改才会对客户端生效。
::: orderedlist
1.  以 [ **[**idm_user 用户身份登录 idmclient**]{.strong}** ]{.strong}。
2.  使用 `sudo`{.literal} 重新启动计算机。在提示时输入
    [**idm_user**]{.strong} 的密码：
    ``` literallayout
    $ sudo /usr/sbin/reboot
    [sudo] password for idm_user:
    ```
:::
如果正确配置了 `sudo`{.literal}，则计算机将重新启动。
::: itemizedlist
**其它材料**
-   有关如何使用 Ansible playbook 在 IdM 中应用 `sudo`{.literal}
    命令、命令组和规则的更多详细信息，请参阅
    `/usr/share/doc/ansible-freeipa/ 目录中的 README-sudocmdgroup.md 和 README-sudorule.`{.literal}
    md Markdown 文件。
:::
:::
:::
[]{#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts.html}
::: chapter
::: titlepage
# []{#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts.html#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts}第 5 章 使用 ldapmodify 在外部管理 IdM 用户 {.title}
:::
您可以使用 `ldapmodify 和 ldap`{.literal} `delete`{.literal}
实用程序直接从命令行界面(CLI)修改身份管理(IdM)LDAP。实用程序提供用于添加、编辑和删除目录内容的完整功能。您可以使用这些实用程序管理服务器的配置条目和用户条目中的数据。实用程序也可用于编写脚本，以执行一个或多个目录的批量管理。
::: section
::: titlepage
# []{#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts.html#templates-for-managing-IdM-user-accounts-externally_using-ldapmodify-to-manage-IdM-users-externally}在外部管理 IdM 用户帐户的模板 {.title}
:::
本节论述了 IdM 中各种用户管理操作的模板。模板显示您必须使用
`ldapmodify`{.literal} 修改哪些属性才能实现以下目标：
::: itemizedlist
-   添加新阶段用户
-   修改用户属性
-   启用用户
-   禁用用户
-   保留用户
:::
模板采用 LDAP 数据交换格式(LDIF)格式。LDIF
是一种标准的纯文本数据交换格式，用于表示 LDAP 目录内容和更新请求。
通过使用模板，您可以配置调配系统的 LDAP 供应商来管理 IdM 用户帐户。
如需详细示例流程，请参阅以下部分：
::: itemizedlist
-   [添加 LDIF 文件中定义的 IdM
    阶段用户](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#adding-an-IdM-stage-user-defined-in-an-LDIF-file_configuring-IdM-for-external-provisioning-of-users "添加 LDIF 文件中定义的 IdM 阶段用户"){.link}
-   [使用 ldapmodify 直接从 CLI 添加 IdM
    暂存用户](#configuring-IdM-for-external-provisioning-of-users_managing-users-groups-hosts.html#adding-an-IdM-stage-user-directly-from-the-CLI-using-ldapmodify_configuring-IdM-for-external-provisioning-of-users "使用 ldapmodify 直接从 CLI 添加 IdM 暂存用户"){.link}
-   [使用 ldapmodify 保留 IdM
    用户](#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts.html#preserving-an-IdM-user-with-ldapmodify_using-ldapmodify-to-manage-IdM-users-externally "使用 ldapmodify 保留 IdM 用户"){.link}
:::
::: itemizedlist
**用于添加新阶段用户的模板**
-   [**用于添加自动分配了 UID 和 GID
    的用户的模板**]{.strong}。创建的条目的可分辨名称(DN)必须以
    `uid=user_login`{.literal} 开头：
    ``` literallayout
    dn: uid=user_login,cn=staged users,cn=accounts,cn=provisioning,dc=idm,dc=example,dc=com
    changetype: add
    objectClass: top
    objectClass: inetorgperson
    uid: user_login
    sn: surname
    givenName: first_name
    cn: full_name
    ```
-   [**以静态方式分配 UID 和 GID 的用户模板**]{.strong} ：
    ``` literallayout
    dn: uid=user_login,cn=staged users,cn=accounts,cn=provisioning,dc=idm,dc=example,dc=com
    changetype: add
    objectClass: top
    objectClass: person
    objectClass: inetorgperson
    objectClass: organizationalperson
    objectClass: posixaccount
    uid: user_login
    uidNumber: UID_number
    gidNumber: GID_number
    sn: surname
    givenName: first_name
    cn: full_name
    homeDirectory: /home/user_login
    ```
    在添加 stage 用户时，您不需要指定任何 IdM 对象类。IdM
    在激活用户后自动添加这些类。
:::
::: itemizedlist
**用于修改现有用户的模板**
-   [**修改用户属性**]{.strong} ：
    ``` literallayout
    dn: distinguished_name
    changetype: modify
    replace: attribute_to_modify
    attribute_to_modify: new_value
    ```
-   [**禁用用户**]{.strong} ：
    ``` literallayout
    dn: distinguished_name
    changetype: modify
    replace: nsAccountLock
    nsAccountLock: TRUE
    ```
-   [**启用用户**]{.strong} ：
    ``` literallayout
    dn: distinguished_name
    changetype: modify
    replace: nsAccountLock
    nsAccountLock: FALSE
    ```
    更新 `thensAccountLock`{.literal}
    属性不会影响暂存和保留的用户。虽然更新操作成功完成，但属性值 remains
    `nssAccountLock: TRUE`{.literal}。
-   [**保留用户**]{.strong} ：
    ``` literallayout
    dn: distinguished_name
    changetype: modrdn
    newrdn: uid=user_login
    deleteoldrdn: 0
    newsuperior: cn=deleted users,cn=accounts,cn=provisioning,dc=idm,dc=example,dc=com
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在修改用户之前，使用用户的登录名(DN)获取用户的可分辨名称(DN)。[*在以下示例中，user_allowed_to_modify_user_entries*]{.emphasis}
用户是用户可以修改用户和组信息的用户，如 [**Activator 或**]{.strong} IdM
管理员。这个示例中的密码是这个用户的密码：
``` literallayout
[...]
# ldapsearch -LLL -x -D "uid=user_allowed_to_modify_user_entries,CN=users,cn=accounts,dc=idm,dc=example,dc=com" -w "Secret123" -H ldap://r8server.idm.example.com -b "cn=users,cn=accounts,dc=idm,dc=example,dc=com" uid=test_user
dn: uid=test_user,cn=users,cn=accounts,dc=idm,dc=example,dc=com
memberOf: cn=ipausers,cn=groups,cn=accounts,dc=idm,dc=example,dc=com
```
:::
:::
::: section
::: titlepage
# []{#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts.html#templates-for-managing-IdM-group-accounts-externally_using-ldapmodify-to-manage-IdM-users-externally}在外部管理 IdM 组帐户的模板 {.title}
:::
本节论述了 IdM 中各种用户组管理操作的模板。模板显示您必须使用
`ldapmodify`{.literal} 修改哪些属性来实现以下目的：
::: itemizedlist
-   创建新组
-   删除现有组
-   将成员添加到组中
-   从组中删除成员
:::
模板采用 LDAP 数据交换格式(LDIF)格式。LDIF
是一种标准的纯文本数据交换格式，用于表示 LDAP 目录内容和更新请求。
通过使用模板，您可以配置调配系统的 LDAP 供应商来管理 IdM 组帐户。
::: title
**创建新组**
:::
``` literallayout
dn: cn=group_name,cn=groups,cn=accounts,dc=idm,dc=example,dc=com
changetype: add
objectClass: top
objectClass: ipaobject
objectClass: ipausergroup
objectClass: groupofnames
objectClass: nestedgroup
objectClass: posixgroup
uid: group_name
cn: group_name
gidNumber: GID_number
```
::: itemizedlist
**修改组**
-   [**删除现有组**]{.strong} ：
    ``` literallayout
    dn: group_distinguished_name
    changetype: delete
    ```
-   [**将成员添加到组中**]{.strong} ：
    ``` literallayout
    dn: group_distinguished_name
    changetype: modify
    add: member
    member: uid=user_login,cn=users,cn=accounts,dc=idm,dc=example,dc=com
    ```
    不要向组添加阶段或保留的用户。尽管更新操作成功完成，但不会作为组的成员更新用户。只有活动用户才能属于组。
-   [**从组中删除成员**]{.strong} ：
    ``` literallayout
    dn: distinguished_name
    changetype: modify
    delete: member
    member: uid=user_login,cn=users,cn=accounts,dc=idm,dc=example,dc=com
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在修改组之前，使用组的名称搜索来获取组的可分辨名称(DN)。
``` literallayout
# ldapsearch -YGSSAPI -H ldap://server.idm.example.com -b "cn=groups,cn=accounts,dc=idm,dc=example,dc=com" "cn=group_name"
dn: cn=group_name,cn=groups,cn=accounts,dc=idm,dc=example,dc=com
ipaNTSecurityIdentifier: S-1-5-21-1650388524-2605035987-2578146103-11017
cn: testgroup
objectClass: top
objectClass: groupofnames
objectClass: nestedgroup
objectClass: ipausergroup
objectClass: ipaobject
objectClass: posixgroup
objectClass: ipantgroupattrs
ipaUniqueID: 569bf864-9d45-11ea-bea3-525400f6f085
gidNumber: 1997010017
```
:::
:::
::: section
::: titlepage
# []{#using-ldapmodify-to-manage-IdM-users-externally_managing-users-groups-hosts.html#preserving-an-IdM-user-with-ldapmodify_using-ldapmodify-to-manage-IdM-users-externally}使用 ldapmodify 保留 IdM 用户 {.title}
:::
本节论述了如何使用 `ldapmodify`{.literal} 来保留 IdM
用户；即，如何在员工离开公司后停用用户帐户。
::: itemizedlist
**先决条件**
-   您可以作为 IdM 用户进行身份验证，并具有保留用户的角色。
:::
::: orderedlist
**流程**
1.  以 IdM 用户身份登录，并具有保留用户的角色：
    ``` literallayout
    $ kinit admin
    ```
2.  输入 `ldapmodify`{.literal} 命令，并将 Generic Security Services
    API(GSSAPI)指定为用于身份验证的简单身份验证和安全层(SASL)机制：
    ``` literallayout
    # ldapmodify -Y GSSAPI
    SASL/GSSAPI authentication started
    SASL username: PI:EMAIL