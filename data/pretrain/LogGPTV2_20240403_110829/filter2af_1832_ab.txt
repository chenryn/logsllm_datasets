                //直接调用send函数，并没有进行检查验证
            }
        }
        function calculateBonus(address employee) return (uint)
        {
            uint bonus = 0;//可以手动对此进行调控
            bonuses[employee] = bonus;
            //修改奖金的额度
        }
    }
#### 3 调用堆深度限制
调用深度（call depth）被限制为 1024。EVM 中一个智能合约可以通过 message call 调用其它智能合约，被调用的智能合约可以继续通过
message call 再调用其它合约，甚至是再调用回来（recursive）。
这意味着如果嵌套调用的数量达到1024，合约将会失败。攻击者可以递归调用一个合约1023次，然后调用开发者合约函数，造成“send”因为这个限制而失败。
例如下面的代码：
    function sendether() {
        address addr = 0x6c8f2a135f6ed072de4503bd7c4999a1a17f824b;
        addr.send(20 ether);
        //用户会认为无论如何此函数都会被处理
        var thesendok = true;
        //用户会认为无论如何都会返回true
        ...
    }
之后我们也初始化fallback函数：
    function fallback() {
        //fallback函数内容
    }
至此用户会认为我们既然已经定义了fallback函数，那么应该就万无一失了。然而我们看下面的攻击代码：
    function hack() {
        var count = 0;
        while (count 
  * 2 
  * 3 
  * 4 
  * 5 
  * 6 
**本稿为原创稿件，转载请标明出处。谢谢。**