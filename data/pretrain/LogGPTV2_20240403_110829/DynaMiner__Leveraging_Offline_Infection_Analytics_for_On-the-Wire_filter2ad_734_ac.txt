# 优化后的文本

## 图3：各种图属性的平均测量值
在90天内（2016年1月至4月），数据显示这些网站被网络犯罪分子越来越多地利用。

### 按家族分布
图2展示了恶意软件感染中不同家族的诱惑策略分布。搜索引擎和被入侵的网站始终是当前流行的漏洞利用工具包中最常用的诱惑策略。这种相似性归因于漏洞利用工具包作者经常使用类似的黑帽SEO方案，或者他们可能入侵了类似的一组易受攻击的网站。

### II-C. 图属性的见解
恶意软件感染涉及多个参与者（即各种主机）和关系（例如请求、响应、下载、重定向），这些关系将参与者链接起来。这种结构本质上是一个（有向）图。受到这种固有的图结构的启发，我们研究了恶意软件感染的图属性。图3显示了不同图属性的平均测量结果。虽然我们在图抽象中的详细见解将在第三章和第四章中呈现，但在这里我们简要总结了我们在数据集中检查的图属性。

#### 基本图属性
平均而言，感染图具有更多的节点和边。此外，感染图往往具有更高的直径、度数和体积。

#### 中心性
除了负载中心性外，感染图的平均度中心性、接近中心性和介数中心性较低。

#### 连通性
由于请求-响应和重定向关系的高频率，感染图总体上具有较高的度连通性、邻居数量和PageRank值。

### II-D. HTTP头部属性的见解
感染行为显著。虽然HTTP头部对于模式匹配很有趣，但在本工作中，我们检查了一组更专门的与载荷无关动态分析相关的头部元素。图4总结了我们对感染数据集的分析。总的来说，我们注意到感染痕迹的统计分布与良性痕迹明显不同。特别是，GET和POST请求的平均数量、重定向链以及HTTP 40X响应代码的数量明显高于良性痕迹（在某些情况下甚至高出一倍）。典型的感染至少包含两条重定向链，而典型的无感染痕迹则没有。在一些感染痕迹中，我们注意到某些漏洞利用工具包家族（如Goon）的重定向链异常长（例如长达30条）。像Angler、Nuclear和Neutrino这样的漏洞利用工具包也以其复杂的重定向链而闻名（参见表I中的“重定向次数”列）。

#### 感染后回拨尝试
在770个感染痕迹中的708个中，我们确认至少有一次“回拨”的尝试。在所有情况下，我们的分析表明，从受害者主机发起的下载后请求的目标主机（IP地址）在下载过程中从未出现过。我们发现这一特征证实了我们对整个恶意软件感染过程进行分析以提取有效检测特征的直觉。

### III. 网络对话图分析
我们现在介绍我们的网络对话分析，重点是图抽象、构建和注释。

#### 概述
图5显示了DYNAMINER的高级概述，包括两个主要阶段：离线网络对话分析（阶段1）和在线恶意软件检测（阶段2）。在阶段1中，DYNAMINER分析网络对话痕迹（PCAPs）以构建WCG并对其进行分析。分析的结果是用于训练分类器的与载荷无关的特征。在阶段2中，DYNAMINER不断接收实时HTTP请求-响应事务，并推断感染线索。每当它找到一个感染线索（例如，超过阈值的重定向链，随后下载可能是恶意的有效载荷类型），它就会围绕该线索构建一个潜在的感染WCG。构建的WCG随后传递给特征提取引擎，以提取WCG属性供分类器评估。最后，DYNAMINER对WCG做出判决（感染或良性）。如果DYNAMINER认为WCG具有传染性，则终止相应的会话。对于每个被认为是良性的WCG，DYNAMINER会继续监控其增长，直到用户终止相应的Web会话或WCG停止增长。

### III-A. 图抽象
现在我们将描述如何构建WCG，因为它们是我们分析、学习和检测的基础。WCG是有向图，捕捉了一个主机与一个或多个远程主机之间的交互。WCG中的节点代表一个唯一的主机，可以是受害者主机、恶意主机或重定向中介主机。受害者主机是下载（并执行）恶意软件载荷的主机。或者，受害者主机也可以通过向攻击者的服务器发送感染后的渗出数据来识别。如果一个节点至少向受害者主机下载了一次恶意载荷，则将其标记为恶意节点。中介重定向主机是从受害者主机开始链接主机的主机。从主机Hi到主机Hj的边可以表示以下三种情况之一：(i) Hi向Hj发送请求（例如GET、POST）；(ii) 受害者Hj从主机Hi接收响应（可能是载荷下载）；或(iii) Hi被重定向到Hj。

让我们正式定义WCG的抽象。假设H表示WCG数据集中所有主机的集合，Rq表示所有请求的集合，Rs表示所有响应的集合，Rr表示所有重定向的集合。那么，对于客户端Hi的WCG Gi定义为Gi = (Φi, Ψi, Σi, α, β)，其中：
- Φi ⊆ Rqi × Rqi 表示由Hi发起的请求对应的有向边集合。
- Ψi ⊆ Rsi × Rsi 表示由Hi接收的响应对应的有向边集合。
- Σi ⊆ Rri × Rri 表示Hi参与的重定向关系对应的有向边集合。
- α 表示关于节点的属性集，可能包括节点类型、IP地址和端口号。
- β 表示关于节点之间边的属性集，如协议、载荷细节（例如类型、大小）、时间戳和用户代理。

### III-B. 图构建
给定一个HTTP事务流，为了构建WCG，我们首先提取唯一主机以填充节点。接下来，我们将HTTP事务分组成主机对之间的对话。对于每一对对话，我们识别一个或多个请求、响应或重定向边。然后，我们用相关的对话属性对节点和边进行注释。最后，我们利用源-目的地信息通过边连接节点。WCG的构建从添加所谓的原点节点开始。原点节点是一个特殊的节点，表示诱惑来源。当已知Web对话的起源时，原点节点取引用者的名称。否则，它被标记为“空”。

### 实际感染示例
图6显示了我们从Angler漏洞利用工具包的一个感染痕迹中构建的简化WCG。“bing.com”节点是引用者节点，它是启动恶意站点的原点。包括原点节点在内，WCG有8个节点和31条边（图中未全部显示）。在预下载动态（蓝色虚线区域）中，受害者通过搜索引擎被重定向到被入侵的站点A，然后被引导到B（一个漏洞利用工具包着陆页）。B中的iframe重定向将受害者引导到提供Flash漏洞的漏洞利用工具包服务器C。下载动态（红色虚线椭圆）以从主机C下载一个Flash文件结束。最后，在下载后动态（紫色虚线椭圆）中，恶意软件通过POST请求联系远程主机D、E和F。这三个主机指向三个唯一的IP地址，提供臭名昭著的CryptoWall勒索软件。为了简洁起见，我们在图6中没有显示WCG的所有节点和边的属性。然而，我们的方法用计算特征所需的属性对WCG的节点和边进行注释。接下来，我们将讨论节点、边和整个WCG的注释。

### III-C. 图注释
#### 节点级别
WCG中的节点用以下属性进行注释：
- **基本属性**：包括主机名和IP地址。
- **每个主机的URI**：对于每个主机，我们计算具有该主机名（IP地址）的唯一URI数量。
- **载荷摘要**：这捕获从节点发出或接收到的不同载荷类型的计数。载荷类型包括：已知的漏洞利用类型（例如*.jar、*.exe、*.pdf、*.xap、*.swf）和常见的交换载荷（例如图像、HTML、JavaScript代码、压缩文件、文本文件）。摘要还包括勒索软件漏洞利用载荷。由于勒索软件带有不同的文件扩展名，我们在Web对话中匹配了从行业报告中编译的45种不同的文件扩展名[10]。

### 边级别
WCG中的边用以下属性进行注释：
- **时间戳**：边所代表事件发生的时间。
- **对话阶段**：此属性为出现在预下载阶段的边分配0，为下载阶段的边分配1，为下载后阶段的边分配2。为了确定边的阶段，我们考虑请求-响应对的时间戳、HTTP方法和响应代码。例如，如果请求使用GET方法，在此之前没有已知的漏洞利用载荷下载到受害者客户端，并且响应代码是30x，那么我们将请求-响应对分配到预下载阶段。所有剩余的请求-响应对在关联其时间戳的一致性后被分配到下载阶段。注意，最后一个30x响应代码是预下载阶段的结束和载荷下载阶段的开始。同样，最后一个20x响应的内容类型是已知漏洞利用载荷之一，则被视为载荷下载阶段的结束。对于使用POST方法联系节点且没有已知漏洞利用载荷下载的请求-响应对，如果响应代码是200或40x，则将其分配到下载后阶段。
- **HTTP方法**：请求边使用的HTTP方法。
- **URI长度**：请求边的URI长度。
- **响应代码**：响应边的HTTP响应代码。
- **载荷文件类型**：响应边的载荷类型。
- **载荷大小**：响应边的载荷大小（字节）。

#### 图级别
除了节点和边的属性外，我们还计算聚合属性，作为分类传染性WCG的基础特征。以下是我们在WCG中添加的注释：
- **不跟踪**：如果启用了“DNT”属性，则分配1，否则分配0。
- **X-Flash版本**：如果设置了“X-Flash”版本，则捕获其值，否则分配0。
- **平均载荷计数**：不同载荷类型的图级计数。
- **平均载荷大小**：载荷大小的图级度量（字节）。
- **请求方法总数**：图中GET、POST和其他请求方法的总数。
- **总引用者**：图中设置引用者的请求总数。
- **跨域重定向**：发生在不同来源之间的重定向计数。
- **重定向长度**：重定向链中涉及的独特跳转数。
- **TLD多样性**：重定向链中涉及的独特顶级域名数量。
- **图动态**：图级别的属性，包括阶数、大小、度数、密度、体积、各种中心性和连通性度量、邻域动态和聚类系数。
- **对话持续时间**：图中对话的总持续时间（秒）。
- **平均交易间隔时间**：这捕获了图中HTTP交易的平均到达间隔时间。
- **连续重定向之间的平均延迟**：这捕获了连续两次重定向之间的平均时间估计。此属性有助于区分传染性重定向和良性重定向，因为感染通常具有较短的连续重定向延迟。

### III-D. 启发式和全局属性的说明
#### 启发式
为了全面捕捉WCG中的行为和关系，我们采用了一些启发式方法。我们主要从HTTP事务的引用者和重定向头值中推断预下载重定向。然而，重定向证据通常嵌入在混淆的HTML或JavaScript中。我们逆向工程混淆的JavaScript和HTML代码，以挖掘丰富重定向链的证据，这些重定向链在第一次下载事件之前遵循。尽管我们捕捉预下载动态是为了捕捉重定向的展开方式，但我们的观察表明，在某些情况下，即使在下载之后，WCG中也会出现重定向链（例如，点击广告横幅时）。对于这种情况，我们修改了预下载重定向推理方法，以求和WCG中的所有重定向。

#### 全局属性
通过对基准数据集的分析，我们发现平均每张恶意软件感染图中有10个节点，最少2个节点，最多404个节点。边的数量范围在2到1778条之间，平均为46条。至于生命周期，图的平均生命周期为123秒，范围在0.5到4061秒之间。

### IV-A. 图特征（f7 - f25）
我们对图动态的关注受到了[12]中的下载器图分析和[25]中的重定向图分析的启发。虽然[12]也使用了下载器图的直径、密度和聚类系数，但我们的WCG抽象在三个方面与[12]有所不同。首先，我们将载荷作为边属性，并将下载它的URL作为节点。与我们的技术不同，[12]将下载的可执行文件作为节点，将源URL作为边。其次，[12]、[16]和[25]分别分析了下载器图和重定向图。在DYNAMINER中，我们结合了下载图和重定向图。此外，我们还包括了可用的下载后图动态。事实上，我们的研究表明，92%的感染WCG至少包含1条下载后边。第三，我们计算并展示了新的图特征的有效性。