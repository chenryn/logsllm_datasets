 22 // ErrPoolClosed 表示请求（Acquire）了一个 
 23 // 已经关闭的池 
 24 var ErrPoolClosed = errors.New("Pool has been closed.") 
 25 
 26 // New 创建一个用来管理资源的池。 
 27 // 这个池需要一个可以分配新资源的函数，  
 28 // 并规定池的大小 
 29 func New(fn func() (io.Closer, error), size uint) (*Pool, error) { 
 30 
 if size <= 0 { 
 31 
 return nil, errors.New("Size value too small.") 
 32 
 } 
 33 
 34 
 return &Pool{ 
 35 
 factory:   fn, 
 36 
    resources: make(chan io.Closer, size), 
 37 
 }, nil 
 38 } 
 39 
 40 // Acquire 从池中获取一个资源 
 41 func (p *Pool) Acquire() (io.Closer, error) { 
 42 
 select { 
 43 
 // 检查是否有空闲的资源 
 44 
 case r, ok := <-p.resources: 
 45 
 log.Println("Acquire:", "Shared Resource") 
 46 
 if !ok { 
 47 
 return nil, ErrPoolClosed 
 48 
 } 
 49 
 return r, nil 
 50 
 51 
 // 因为没有空闲资源可用，所以提供一个新资源 
 52 
 default: 
 53 
 log.Println("Acquire:", "New Resource") 
 54 
 return p.factory() 
 55 
 } 
 56 } 
 57 
 58 // Release 将一个使用后的资源放回池里 
 59 func (p *Pool) Release(r io.Closer) { 
 60 
 // 保证本操作和 Close 操作的安全 
 61 
 p.m.Lock() 
 62 
 defer p.m.Unlock() 
 63 
 64 
 // 如果池已经被关闭，销毁这个资源 
 65 
 if p.closed { 
 66 
 r.Close() 
 67 
 return 
 68 
 } 
 69 
 70 
 select { 
 71 
 // 试图将这个资源放入队列 
 72 
 case p.resources <- r: 
 73 
 log.Println("Release:", "In Queue") 
 74 
 75 
 // 如果队列已满，则关闭这个资源 
 76 
 default: 
 77 
 log.Println("Release:", "Closing") 
 78 
 r.Close() 
 79 
 } 
 80 } 
 81 
 82 // Close 会让资源池停止工作，并关闭所有现有的资源 
 83 func (p *Pool) Close() { 
 84 
 // 保证本操作与 Release 操作的安全 
 85 
 p.m.Lock() 
 86 
 defer p.m.Unlock() 
 87 
 88 
 // 如果 pool 已经被关闭，什么也不做 
 89 
 if p.closed { 
 90 
 return 
 91 
 } 
 92 
 93 
 // 将池关闭 
 94 
 p.closed = true 
 95 
 96 
 // 在清空通道里的资源之前，将通道关闭 
 97 
 // 如果不这样做，会发生死锁 
 98 
 close(p.resources) 
 99 
100 
 // 关闭资源 
101 
 for r := range p.resources { 
102 
 r.Close() 
103 
 } 
104 } 
代码清单 7-14 中的 pool 包的代码声明了一个名为 Pool 的结构，该结构允许调用者根据所
需数量创建不同的资源池。只要某类资源实现了 io.Closer 接口，就可以用这个资源池来管理。
让我们看一下 Pool 结构的声明，如代码清单 7-15 所示。
代码清单 7-15  pool/pool.go：第 12 行到第 20 行
12 // Pool 管理一组可以安全地在多个 goroutine 间 
13 // 共享的资源。被管理的资源必须 
14 // 实现 io.Closer 接口 
15 type Pool struct { 
16 
 m 
 sync.Mutex 
17 
 resources chan io.Closer 
18 
 factory   func() (io.Closer, error) 
19 
 closed    bool 
20 } 
Pool 结构声明了 4 个字段，每个字段都用来辅助以 goroutine 安全的方式来管理资源池。在
第 16 行，结构以一个 sync.Mutex 类型的字段开始。这个互斥锁用来保证在多个 goroutine 访
问资源池时，池内的值是安全的。第二个字段名为 resources，被声明为 io.Closer 接口类
型的通道。这个通道是作为一个有缓冲的通道创建的，用来保存共享的资源。由于通道的类型是
一个接口，所以池可以管理任意实现了 io.Closer 接口的资源类型。
factory 字段是一个函数类型。任何一个没有输入参数且返回一个 io.Closer 和一个
error 接口值的函数，都可以赋值给这个字段。这个函数的目的是，当池需要一个新资源时，
可以用这个函数创建。这个函数的实现细节超出了 pool 包的范围，并且需要由包的使用者实现
并提供。 
第 19 行中的最后一个字段是 closed 字段。这个字段是一个标志，表示 Pool 是否已经被
关闭。现在已经了解了 Pool 结构的声明，让我们看一下第 24 行声明的 error 接口变量，如代
码清单 7-16 所示。 
代码清单 7-16  pool/pool.go：第 22 行到第 24 行
22 // ErrPoolClosed 表示请求（Acquire）了一个 
23 // 已经关闭的池 
24 var ErrPoolClosed = errors.New("Pool has been closed.") 
Go 语言里会经常创建 error 接口变量。这可以让调用者来判断某个包里的函数或者方法返
回的具体的错误值。当调用者对一个已经关闭的池调用 Acquire 方法时，会返回代码清单 7-16
里的 error 接口变量。因为 Acquire 方法可能返回多个不同类型的错误，所以 Pool 已经关闭
时会关闭时返回这个错误变量可以让调用者从其他错误中识别出这个特定的错误。 
既然已经声明了 Pool 类型和 error 接口值，我们就可以开始看一下 pool 包里声明的函
数和方法了。让我们从池的工厂函数开始，这个函数名为 New，如代码清单 7-17 所示。
代码清单 7-17  pool/pool.go：第 26 行到第 38 行
26 // New 创建一个用来管理资源的池。 
27 // 这个池需要一个可以分配新资源的函数，  
28 // 并规定池的大小 
29 func New(fn func() (io.Closer, error), size uint) (*Pool, error) { 
30 
 if size <= 0 { 
31 
 return nil, errors.New("Size value too small.") 
32 
 } 
33 
34 
 return &Pool{ 
35 
 factory:   fn, 
36 
    resources: make(chan io.Closer, size), 
37 
 }, nil 
38 } 
代码清单 7-17 中的 New 函数接受两个参数，并返回两个值。第一个参数 fn 声明为一个函
数类型，这个函数不接受任何参数，返回一个 io.Closer 和一个 error 接口值。这个作为参
数的函数是一个工厂函数，用来创建由池管理的资源的值。第二个参数 size 表示为了保存资源
而创建的有缓冲的通道的缓冲区大小。 
第 30 行检查了 size 的值，保证这个值不小于等于 0。如果这个值小于等于 0，就会使用
nil 值作为返回的 pool 指针值，然后为该错误创建一个 error 接口值。因为这是这个函数唯
一可能返回的错误值，所以不需要为这个错误单独创建和使用一个 error 接口变量。如果能够
接受传入的 size，就会创建并初始化一个新的 Pool 值。在第 35 行，函数参数 fn 被赋值给
factory 字段，并且在第 36 行，使用 size 值创建有缓冲的通道。在 return 语句里，可以构
造并初始化任何值。因此，第 34 行的 return 语句用指向新创建的 Pool 类型值的指针和 nil
值作为 error 接口值，返回给函数的调用者。
在创建并初始化 Pool 类型的值之后，接下来让我们来看一下 Acquire 方法，如代码清单
7-18 所示。这个方法可以让调用者从池里获得资源。 
代码清单 7-18  pool/pool.go：第 40 行到第 56 行
40 // Acquire 从池中获取一个资源 
41 func (p *Pool) Acquire() (io.Closer, error) { 
42 
 select { 
43 
 // 检查是否有空闲的资源 
44 
 case r, ok := <-p.resources: 
45 
 log.Println("Acquire:", "Shared Resource") 
46 
 if !ok { 
47 
 return nil, ErrPoolClosed 
48 
 } 
49 
 return r, nil 
50 
51 
 // 因为没有空闲资源可用，所以提供一个新资源 
52 
 default: 
53 
 log.Println("Acquire:", "New Resource") 
54 
 return p.factory() 
55 
 } 
56 } 
代码清单 7-18 包含了 Acquire 方法的代码。这个方法在还有可用资源时会从资源池里返回
一个资源，否则会为该调用创建并返回一个新的资源。这个实现是通过 select/case 语句来检
查有缓冲的通道里是否还有资源来完成的。如果通道里还有资源，如第 44 行到第 49 行所写，就
取出这个资源，并返回给调用者。如果该通道里没有资源可取，就会执行 default 分支。在这
个示例中，在第 54 行执行用户提供的工厂函数，并且创建并返回一个新资源。 
如果不再需要已经获得的资源，必须将这个资源释放回资源池里。这是 Release 方法的任
务。不过在理解 Release 方法的代码背后的机制之前，我们需要先看一下 Close 方法，如代
码清单 7-19 所示。 
代码清单 7-19  pool/pool.go：第 82 行到第 104 行
 82 // Close 会让资源池停止工作，并关闭所有现有的资源 
 83 func (p *Pool) Close() { 
 84 
 // 保证本操作与 Release 操作的安全 
 85 
 p.m.Lock() 
 86 
 defer p.m.Unlock() 
 87 
 88 
 // 如果 pool 已经被关闭，什么也不做 
 89 
 if p.closed { 
 90 
 return 
 91 
 } 
 92 
 93 
 // 将池关闭 
 94 
 p.closed = true 
 95 
 96 
 // 在清空通道里的资源之前，将通道关闭 
 97 
 // 如果不这样做，会发生死锁 
 98 
 close(p.resources) 
 99 
100 
 // 关闭资源 
101 
 for r := range p.resources { 