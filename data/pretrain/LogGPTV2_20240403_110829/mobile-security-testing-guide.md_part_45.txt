keyStore.load(null);
key = (SecretKey) keyStore.getKey("key2", null);
Encrypt the authentication data and other sensitive data stored by the application using a secret key through
AES-GCM cipher and use device specific parameters such as Instance ID, etc. as associated data
Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
final byte[] nonce = new byte[GCM_NONCE_LENGTH];
random.nextBytes(nonce);
GCMParameterSpec spec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, nonce);
cipher.init(Cipher.ENCRYPT_MODE, key, spec);
byte[] aad = "".getBytes();;
cipher.updateAAD(aad);
cipher.init(Cipher.ENCRYPT_MODE, key);
//use the cipher to encrypt the authentication data see 0x50e for more details.
328
Android Anti-Reversing Defenses
Encrypt the secret key using the public key stored in Android keystore and store the encrypted secret key in
the private storage of the application
Whenever authentication data such as access tokens or other sensitive data is required, decrypt the secret
key using private key stored in Android keystore and then use the decrypted secret key to decrypt the
ciphertext
Use token-based device authentication (Instance ID) to make sure that the same instance of the app is used.
Static Analysis
In the past, Android developers often relied on the Settings.Secure.ANDROID_ID (SSAID) and MAC addresses.
However, the behavior of the SSAID has changed since Android O, and the behavior of MAC addresses changed with
the release of Android N. In addition, there are new recommendations for identifiers in Google's SDK documentation.
These last recommendations boil down to: either use the Advertising ID when it comes to advertising - so that a
user can decline - or use the Instance ID for device identification. Both are not stable accross device upgrades and
device-resets, but Instance ID will at least allow to identify the current software installation on a device.
There are a few key terms you can look for when the source code is available:
Unique identifiers that will no longer work:
Build.SERIAL without Build.getSerial
htc.camera.sensor.front_SN for HTC devices
persist.service.bdroid.bdadd
Settings.Secure.bluetooth_address , unless the system permission LOCAL_MAC_ADDRESS is enabled in
the manifest
ANDROID_ID used only as an identifier. This will influence the binding quality over time for older devices.
The absence of Instance ID, Build.SERIAL , and the IMEI.
TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
String IMEI = tm.getDeviceId();
The creation of private keys in the AndroidKeyStore using the KeyPairGeneratorSpec or KeyGenParameterSpec
APIs.
To be sure that the identifiers can be used, check AndroidManifest.xml for usage of the IMEI and Build.Serial . The
file should contain the permission  .
Apps for Android O will get the result "UNKNOWN" when they request Build.Serial .
Dynamic Analysis
There are several ways to test the application binding:
Dynamic Analysis with an Emulator
1. Run the application on an emulator.
2. Make sure you can raise the trust in the application instance (e.g., authenticate in the app).
3. Retrieve the data from the emulator according to the following steps:
SSH into your simulator via an ADB shell.
Execute run-as  . Your app-id is the package described in the AndroidManifest.xml.
chmod 777 the contents of cache and shared-preferences.
Exit the current user from the the app-id.
Copy the contents of /data/data//cache and shared-preferences to the SD card.
Use ADB or the DDMS to pull the contents.
329
Android Anti-Reversing Defenses
4. Install the application on another emulator.
5. In the application's data folder, overwrite the data from step 3.
Copy the data from step 3 to the second emulator's SD card.
SSH into your simulator via an ADB shell.
Execute run-as  . Your app-id is the package described in AndroidManifest.xml .
chmod 777 the folder's cache and shared-preferences.
Copy the older contents of the SD card to /data/data//cache and shared-preferences .
6. Can you continue in an authenticated state? If so, binding may not be working properly.
Google Instance ID
Google Instance ID uses tokens to authenticate the running application instance. The moment the application is reset,
uninstalled, etc., the Instance ID is reset, meaning that you'll have a new "instance" of the app. Go through the
following steps for Instance ID:
1. Configure your Instance ID for the given application in your Google Developer Console. This includes managing
the PROJECT_ID.
2. Setup Google Play services. In the file build.gradle , add
apply plugin: 'com.android.application'
...
dependencies {
compile 'com.google.android.gms:play-services-gcm:10.2.4'
}
3. Get an Instance ID.
String iid = Instance ID.getInstance(context).getId();
//now submit this iid to your server.
4. Generate a token.
String authorizedEntity = PROJECT_ID; // Project id from Google Developer Console
String scope = "GCM"; // e.g. communicating using GCM, but you can use any
// URL-safe characters up to a maximum of 1000, or
// you can also leave it blank.
String token = Instance ID.getInstance(context).getToken(authorizedEntity,scope);
//now submit this token to the server.
5. Make sure that you can handle callbacks from Instance ID, in case of invalid device information, security issues,
etc. This requires extending Instance IDListenerService and handling the callbacks there:
public class MyInstance IDService extends Instance IDListenerService {
public void onTokenRefresh() {
refreshAllTokens();
}
private void refreshAllTokens() {
// assuming you have defined TokenList as
// some generalized store for your tokens for the different scopes.
// Please note that for application validation having just one token with one scopes can be enough.
ArrayList tokenList = TokensList.get();
Instance ID iid = Instance ID.getInstance(this);
for(tokenItem : tokenList) {
tokenItem.token =
iid.getToken(tokenItem.authorizedEntity,tokenItem.scope,tokenItem.options);
// send this tokenItem.token to your server
330
Android Anti-Reversing Defenses
}
}
};
6. Register the service in your Android manifest:
When you submit the Instance ID (iid) and the tokens to your server, you can use that server with the Instance ID
Cloud Service to validate the tokens and the iid. When the iid or token seems invalid, you can trigger a safeguard
procedure (e.g., informing the server of possible copying or security issues or removing the data from the app and
asking for a re-registration).
Please note that Firebase also supports Instance ID.
IMEI & Serial
Google recommends not using these identifiers unless the application is at a high risk.
For pre-Android O devices, you can request the serial as follows:
String serial = android.os.Build.SERIAL;
For devices running Android version O and later, you can request the device's serial as follows:
1. Set the permission in your Android manifest:
2. Request the permission at run time from the user: See
https://developer.android.com/training/permissions/requesting.html for more details.
3. Get the serial:
String serial = android.os.Build.getSerial();
Retrieve the IMEI:
1. Set the required permission in your Android manifest:
2. If you're using Android version M or later, request the permission at run time from the user: See
https://developer.android.com/training/permissions/requesting.html for more details.
3. Get the IMEI:
TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
String IMEI = tm.getDeviceId();
SSAID
331
Android Anti-Reversing Defenses
Google recommends not using these identifiers unless the application is at a high risk. You can retrieve the SSAID as
follows:
String SSAID = Settings.Secure.ANDROID_ID;
The behavior of the SSAID has changed since Android O, and the behavior of MAC addresses changed with the
release of Android N. In addition, there are new recommendations for identifiers in Google's SDK documentation.
Because of this new behavior, we recommend that developers not rely on the SSAID alone. The identifier has become
less stable. For example, the SSAID may change after a factory reset or when the app is reinstalled after the upgrade
to Android O. There are devices that have the same ANDROID_ID and/or have an ANDROID_ID that can be
overridden.
Effectiveness Assessment
There are a few key terms you can look for when the source code is available:
Unique identifiers that will no longer work:
Build.SERIAL without Build.getSerial
htc.camera.sensor.front_SN for HTC devices
persist.service.bdroid.bdadd
Settings.Secure.bluetooth_address , unless the system permission LOCAL_MAC_ADDRESS is enabled in the
manifest.
Usage of ANDROID_ID as an identifier only. Over time, this will influence the binding quality on older devices.
The absence of Instance ID, Build.SERIAL , and the IMEI.
TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
String IMEI = tm.getDeviceId();
To make sure that the identifiers can be used, check AndroidManifest.xml for usage of the IMEI and Build.Serial .
The manifest should contain the permission  .
There are a few ways to test device binding dynamically:
Using an Emulator
See section "Dynamic Analysis with an Emulator" above.
Using two different rooted devices
1. Run the application on your rooted device.
2. Make sure you can raise the trust (e.g., authenticate in the app) in the application instance.
3. Retrieve the data from the first rooted device.
4. Install the application on the second rooted device.
5. In the application's data folder, overwrite the data from step 3.
6. Can you continue in an authenticated state? If so, binding may not be working properly.
References
OWASP Mobile Top 10 2016
M9 - Reverse Engineering - https://www.owasp.org/index.php/Mobile_Top_10_2016-M9-Reverse_Engineering
332
Android Anti-Reversing Defenses
OWASP MASVS
MSTG-RESILIENCE-1: "The app detects, and responds to, the presence of a rooted or jailbroken device either by
alerting the user or terminating the app."
MSTG-RESILIENCE-2: "The app prevents debugging and/or detects, and responds to, a debugger being
attached. All available debugging protocols must be covered."
MSTG-RESILIENCE-3: "The app detects, and responds to, tampering with executable files and critical data within
its own sandbox."
MSTG-RESILIENCE-4: "The app detects, and responds to, the presence of widely used reverse engineering
tools and frameworks on the device."
MSTG-RESILIENCE-5: "The app detects, and responds to, being run in an emulator."
MSTG-RESILIENCE-6: "The app detects, and responds to, tampering the code and data in its own memory
space."
MSTG-RESILIENCE-9: "Obfuscation is applied to programmatic defenses, which in turn impede de-obfuscation
via dynamic analysis."
MSTG-RESILIENCE-10: "The app implements a 'device binding' functionality using a device fingerprint derived
from multiple properties unique to the device."
SafetyNet Attestation
Developer Guideline - https://developer.android.com/training/safetynet/attestation.html
SafetyNet Attestation Checklist - https://developer.android.com/training/safetynet/attestation-checklist
Do's & Don'ts of SafetyNet Attestation - https://android-developers.googleblog.com/2017/11/10-things-you-might-
be-doing-wrong-when.html
SafetyNet Verification Samples - https://github.com/googlesamples/android-play-safetynet/
SafetyNet Attestation API - Quota Request - https://support.google.com/googleplay/android-
developer/contact/safetynetqr
Tools
adb - https://developer.android.com/studio/command-line/adb
Frida - https://www.frida.re
DDMS - https://developer.android.com/studio/profile/monitor
333
Platform Overview
iOS Platform Overview
iOS is a mobile operating system that powers Apple mobile devices, including the iPhone, iPad, and iPod Touch. It is
also the basis for Apple tvOS, which inherits many functionalities from iOS. This section introduces the iOS platform
from an architecture point of view. The following five key areas are discussed:
1. iOS security architecture
2. iOS application structure
3. Inter-process Communication (IPC)
4. iOS application publishing
5. iOS Application Attack Surface
Like the Apple desktop operating system macOS (formerly OS X), iOS is based on Darwin, an open source Unix
operating system developed by Apple. Darwin's kernel is XNU ("X is Not Unix"), a hybrid kernel that combines
components of the Mach and FreeBSD kernels.
However, iOS apps run in a more restricted environment than their desktop counterparts do. iOS apps are isolated
from each other at the file system level and are significantly limited in terms of system API access.
To protect users from malicious applications, Apple restricts and controls access to the apps that are allowed to run
on iOS devices. Apple's App Store is the only official application distribution platform. There developers can offer their
apps and consumers can buy, download, and install apps. This distribution style differs from Android, which supports
several app stores and sideloading (installing an app on your iOS device without using the official App Store). In iOS,
sideloading typically refers to the app installation method via USB, although there are other enterprise iOS app
distribution methods that do not use the App Store under the Apple Developer Enterprise Program.
In the past, sideloading was possible only with a jailbreak or complicated workarounds. With iOS 9 or higher, it is
possible to sideload via Xcode.
iOS apps are isolated from each other via Apple's iOS sandbox (historically called Seatbelt), a mandatory access
control (MAC) mechanism describing the resources an app can and can't access. Compared to Android's extensive
Binder IPC facilities, iOS offers very few IPC (Inter Process Communication) options, minimizing the potential attack
surface.
Uniform hardware and tight hardware/software integration create another security advantage. Every iOS device offers
security features, such as secure boot, hardware-backed Keychain, and file system encryption (referred as data
protection in iOS). iOS updates are usually quickly rolled out to a large percentage of users, decreasing the need to
support older, unprotected iOS versions.
In spite of the numerous strengths of iOS, iOS app developers still need to worry about security. Data protection,
Keychain, Touch ID/Face ID authentication, and network security still leave a large margin for errors. In the following
chapters, we describe iOS security architecture, explain a basic security testing methodology, and provide reverse
engineering how-tos.
iOS Security Architecture
The iOS security architecture, officially documented by Apple in the iOS Security Guide, consists of six core features.
This security guide is updated by Apple for each major iOS version:
Hardware Security
Secure Boot
Code Signing
Sandbox
Encryption and Data Protection
334
Platform Overview
General Exploit Mitigations
Hardware Security
The iOS security architecture makes good use of hardware-based security features that enhance overall performance.
Each iOS device comes with two built-in Advanced Encryption Standard (AES) 256-bit keys. The device’s unique IDs
(UIDs) and a device group IDs (GIDs) are AES 256-bit keys fused (UID) or compiled (GID) into the Application
Processor (AP) and Secure Enclave Processor (SEP) during manufacturing. There's no direct way to read these keys
with software or debugging interfaces such as JTAG. Encryption and decryption operations are performed by
hardware AES crypto-engines that have exclusive access to these keys.
The GID is a value shared by all processors in a class of devices used to prevent tampering with firmware files and
other cryptographic tasks not directly related to the user's private data. UIDs, which are unique to each device, are
used to protect the key hierarchy that's used for device-level file system encryption. Because UIDs aren't recorded
during manufacturing, not even Apple can restore the file encryption keys for a particular device.
To allow secure deletion of sensitive data on flash memory, iOS devices include a feature called Effaceable Storage.
This feature provides direct low-level access to the storage technology, making it possible to securely erase selected
blocks.
335
Platform Overview
Secure Boot
When an iOS device is powered on, it reads the initial instructions from the read-only memory known as Boot ROM,
which bootstraps the system. The Boot ROM contains immutable code and the Apple Root CA, which is etched into
the silicon chip during the fabrication process, thereby creating the root of trust. Next, the Boot ROM makes sure that
the LLB's (Low Level Bootloader) signature is correct, and the LLB checks the iBoot bootloader's signature is correct
too. After the signature is validated, the iBoot checks the signature of the next boot stage, which is the iOS kernel. If
any of these steps fail, the boot process will terminate immediately and the device will enter recovery mode and
display the "Connect to iTunes" screen. However, if the Boot ROM fails to load, the device will enter a special low-
level recovery mode called Device Firmware Upgrade (DFU). This is the last resort for restoring the device to its
original state. In this mode, the device will show no sign of activity; i.e., its screen won't display anything.
This entire process is called the "Secure Boot Chain". Its purpose is focused on verifying the boot process integrity,
ensuring that the system and its components are written and distributed by Apple. The Secure Boot chain consists of
the kernel, the bootloader, the kernel extension, and the baseband firmware.
Code Signing