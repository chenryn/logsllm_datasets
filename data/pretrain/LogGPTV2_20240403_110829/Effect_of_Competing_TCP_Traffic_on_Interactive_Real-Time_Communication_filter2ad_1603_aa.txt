title:Effect of Competing TCP Traffic on Interactive Real-Time Communication
author:Ilpo J&quot;arvinen and
Binoy Chemmagate and
Aaron Yi Ding and
Laila Daniel and
Markus Isom&quot;aki and
Jouni Korhonen and
Markku Kojo
Eﬀect of Competing TCP Traﬃc
on Interactive Real-Time Communication
Ilpo J¨arvinen1, Binoy Chemmagate1, Aaron Yi Ding1, Laila Daniel1,
Markus Isom¨aki2, Jouni Korhonen3, and Markku Kojo1
1 University of Helsinki
2 Nokia
3 Nokia Siemens Networks
Abstract. Providing acceptable quality level for interactive media ﬂows
such as interactive video or audio is challenging in the presence of TCP
traﬃc. Volatile TCP traﬃc such as Web traﬃc causes transient queues to
appear and vanish rapidly introducing jitter to the packets of the media
ﬂow. Meanwhile long-lived TCP connections cause standing queues to
form which increases the one-way delay for the media ﬂow packets. To
get insights into this problem space we conducted experiments in a real
high-speed cellular network. Our results conﬁrm the existence of issues
with both Web-like traﬃc and long-lived TCP connections and highlight
that current trend of using several parallel connections in Web browsers
tends to have high cost on media ﬂows. In addition, the recent proposal
to increase the initial window of TCP to ten segments, if deployed, is
going to make the jitter problem even worse.
1
Introduction
Introducing delay sensitive end-to-end media ﬂows such as interactive video and
audio between Internet users introduces a number of challenges with congestion
control. These challenges involve two interrelated problems. First, how to ensure
that real-time communications behave fairly with other competing Internet traf-
ﬁc. Second, how to ensure good quality to the interactive media, in particular
with the other competing traﬃc that the users potentially generate to share the
bottleneck(s) on the end-to-end path. In this paper we focus on the latter chal-
lenge. In a common case the bottleneck resides in the access network of the end
user, where most of the traﬃc, if not all, is that generated by the user. When we
consider the link speed in developing or underdeveloped areas, we can see that,
most of the users are still using residential access such as DSL or mobile broad-
band as the primary Internet access. Even in developed areas the link capacity
for residential Internet access is quite often not more than a few megabits per
second.
Web traﬃc in general is very bursty and easily creates transient queues at bot-
tlenecks in front of slow and moderate speed access links. These queues interfere
with any competing traﬃc by introducing delay spikes that delay sensitive ﬂows
M. Roughan and R. Chang (Eds.) PAM 2013, LNCS 7799, pp. 94–103, 2013.
c(cid:2) Springer-Verlag Berlin Heidelberg 2013
Eﬀect of Competing TCP Traﬃc on Interactive Real-Time Communication
95
encounter as harmful jitter. Moreover, a browser of today is quite aggressive us-
ing many parallel TCP connections to speed up retrieval of the Web pages [2,15].
At the same time, websites “optimize” the end user experience by taking advan-
tage of the parallel TCP connections feature of the browser. The “optimized”
Web pages contain objects that seem to reside in diﬀerent domains but are in-
stead coming from the same server. Such fake domains trick the browser to allow
more parallel connections as browsers limit the number of parallel connections
per domain. The use of a large number of parallel TCP connections with typical
Web traﬃc tends to intensify queuing eﬀect and may dramatically increase the
eﬀect of the delay spikes, which is likely to be particularly harmful to delay sen-
sitive traﬃc such as interactive audio and video. Moreover, in the recent years
some eﬀorts have been made to increase the initial window of TCP from three to
ten segments [3,5]. Such increase together with the large number of parallel TCP
connections introduces rapidly changing environment for any traﬃc competing
with the parallel TCP ﬂows.
While solutions such as Low Extra Delay Background Transport (LEDBAT) [14]
that attempt to keep queuing delay low exist, their use for Web traﬃc would be
controversial as the Web traﬃc is certainly not less than best eﬀort type. Quite
contrary, the browsers and websites aim to minimize the latency in Web page
transmission which is in direct conﬂict with the carefulness that approaches such
as LEDBAT need. Considering that current browsers and websites disregard ad-
vice on number of concurrent connections [6] to shorten latency, it is unlikely that
browser makers or website administrators would ﬁnd LEDBAT or similar approach
an acceptable solution. Besides, deployment of a new TCP variant in large scale
would be a challenge in itself. On the other hand, if such TCP variant would be
used only on-demand when a threat to harm media ﬂows exists, additional sig-
nalling between the end hosts would be required as LEDBAT is implemented at
the sender. Such signalling again would face deployment challenges.
On the network side, phenomenon called buﬀerbloat [8,11] has recently at-
tracted some attention. Because of buﬀerbloat, devices in the network can end
up buﬀering enormous amount of traﬃc such as the initial windows of all par-
allel web responses. Active queue management (AQM) and its most prominent
representative Random Early Detection (RED) [7] is often proposed as a solu-
tion to the buﬀerbloat but that is challenging to realize in practice. The access
network devices that are typically bottlenecks lack support for AQM/RED, and
even if available, RED does not work with the default settings as it is “too gen-
tle to handle fast changes due to TCP slow start when the aggregate traﬃc is
limited” [10]. As tuning of the RED parameters requires modiﬁcations on the
intermediate network nodes, it is not deployable in the short run on large scale
even if RED itself is supported by the devices.
Media ﬂows are typically reduced in size for transmission by a codec which
tries to retain human observable properties of the original content while removing
information where human senses cannot detect the changes. Usually codecs can
conceal sporadic losses quite well, but when more losses occur consecutively,
quality deteriorates and distortions become noticeable. A jitter buﬀer between
96
I. J¨arvinen et al.
the receiving codec and the network absorbs jitter that occurs in the packet
transmission over the network. The codec needs the data on time because the
media playback is time bound. If a sudden delay increase occurs in the network,
the media packet might not arrive in time for the playback and needs to be
discarded unused. Selecting a larger jitter buﬀer size is a tradeoﬀ as it would
allow larger jitter to occur but at the same time it increases the total end-to-end
delay, potentially resulting in unacceptable interactive media quality.
Another problem for media ﬂows are long-lived TCP connections such as soft-
ware updates and ﬁle downloads. A long-lived TCP connection tends to create
long queues that occupy the bottleneck buﬀers for a long period of time. The long
term queues often cause high end-to-end one-way delay for interactive media,
resulting in unacceptable interactive media quality.
Some studies explored media ﬂows and Web Traﬃc in 3G/3.5G network [9,16].
In these studies, however, the diﬀerent traﬃc types might not be competing
with each other over the cellular data channel. In this study we focus on the
eﬀect of simultaneous TCP ﬂows on interactive media, and also on the eﬀect
of the larger TCP initial window [3]. To our best knowledge, neither eﬀect has
been explored in a 3G/3.5G environment before. Although cellular access is
used in the experiments, we believe that the results are representative for any
access with similar moderate link capacity because deep buﬀers are a widespread
phenomenon [8]. TCP performance and the interactions between parallel TCP
connections are out of scope for this study.
In this paper we measure the eﬀect of competing TCP traﬃc to interactive
media ﬂows in a real high-speed cellular network environment. The rest of this
paper is organized as follows. In Section 2 we introduce the test setup and
workloads for the experimentation. In Section 3 we analyze how TCP traﬃc
aﬀects the one-way delay and delay variation of a media ﬂow. In Section 4 we
analyze the transient eﬀect of jitter-induced loss periods on a media ﬂow and in
Section 5 we conclude our ﬁndings.
2 Test Setup and Workloads
The experiments have been carried out over a real cellular Internet access using
emulated traﬃc ﬂows to allow full control over the workloads and more accurate
analysis of the results. The test system comprises of a mobile host and ﬁxed
server, as presented in Figure 1.
Fig. 1. Test environment
Eﬀect of Competing TCP Traﬃc on Interactive Real-Time Communication
97
In order to get the baseline for interactive media ﬂow behavior without com-
peting traﬃc in the test environment we ﬁrst measure the performance of an
emulated audio only workload. We then focus on the two major workloads that
roughly mimic two typical TCP traﬃc loads competing with an interactive me-
dia ﬂow: (1) Software update during a voice call (Audio+Bulk) and (2) Web
browsing when a voice call is ongoing (Audio+n short TCP ﬂows). In the Au-
dio+Bulk workload, an emulated audio ﬂow starts ﬁrst and then a Bulk TCP
transfer of 28 MB starts. Bulk TCP’s start time is distributed uniformly between
10 to 12 seconds after the start of the audio ﬂow. In the Audio+n short TCP
ﬂows workload, an emulated audio ﬂow starts ﬁrst and then n short TCP ﬂows
start at the same time, the start time being distributed uniformly between 10
to 12 seconds after the start of the audio ﬂow. The n short TCP ﬂows can be
one TCP ﬂow, two TCP ﬂows or six TCP ﬂows. The total size of the short TCP
ﬂows is 372 kB. In both scenarios the audio ﬂow is ongoing while TCP traﬃc
is starting in the middle of the audio ﬂow. The audio ﬂow lasts long enough to
cover the whole duration of the TCP transfer.
The direction of traﬃc in all test cases is from the ﬁxed server to the mobile
host. We also send enough warming up packets right before each test run to
ensure that a dedicated channel (DCH state) is allocated for the actual test
data, and thereby radio state changes are not aﬀecting the results. The n short
TCP ﬂows are tested with initial window of three (IW3) and initial window of
ten (IW10). The audio ﬂow is a constant bit-rate (CBR) type with bit-rate of
16 kbps yielding 32 kbps total bit-rate with IP, UDP, and RTP headers, that
is, an IP packet of 80 bytes is transmitted every 20 ms. We run 50 replications
with each diﬀerent combination of test parameter values. All the test traﬃc is
captured using tcpdump [17] on both the mobile host and the ﬁxed server. We
carefully synchronized the end host clocks prior each test run using Network
Time Protocol (NTP) [13] allowing initially enough time for the clocks to be
slowly adjusted towards almost equal rates. This enabled us to measure one-way
delay [1] for each media packet with reasonable accuracy by taking the diﬀerence
in timestamps found in the tcpdump logs at each end.
3 Eﬀects on One-Way Delay and Delay Variation
In the conducted experiments, the HSPA network introduced hardly any losses
during the observed period. Therefore, the eﬀect of competing TCP traﬃc is
mainly due to the delay and the changes in the delay. While analyzing the
results, we noticed that on a few occasions the wireless link introduced very long
delays to packet delivery ranging from 3 seconds to rare occurrences with more
than 60 seconds of delay. Also a large number of consecutive losses, reordering,
or packet duplication occurred during such events. We choose to ﬁlter out the
cases where clear symptoms of such event occurred because we are interested in
how TCP aﬀects media ﬂow rather than wireless link problems. As we do not
have access to the cellular operator network to collect traces, we cannot conﬁrm
the exact cause for this “wireless phenomenon” but in most of the cases they are
likely to be caused by the cellular access deciding to switch access technology.
98
I. J¨arvinen et al.
 1
 0.8
 0.6
 0.4
 0.2
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
F
D
C
 0
 0
 0.02
 0.04
 0.06
One-way delay (s)
 0.08
 0.1
 0
 0
 1
 2
 3
 4
 5
One-way delay (s)
Fig. 2. CDF of one-way delay for 15 secs
audio only workload, 50 replications
Fig. 3. CDF of one-way delay for an audio
ﬂow with a competing Bulk TCP connec-
tion, 50 replications
Figure 2 shows the cumulative distribution function (CDF) of end-to-end one-
way delay [1] for 15 secs audio only workload. The one-way delay is good enough
for inter-active audio conversation. The loss-rate is only 0.05 %. The delays
remain below 40 ms except for a handful of packets, the median and maximum
measured one-way delay being 18.0 ms and 70.4 ms, respectively.
Figure 3 shows the CDF of one-way delay for the media ﬂow packets during a
bulk TCP transfer. With the competing bulk TCP transfer interactive audio is
impossible because the one-way delays during the TCP transfer are prohibitive.
Already the 25th percentile of the one-way delay is 0.5 secs and the median is 1.42
secs. We conﬁrmed from the traces that deep buﬀering is the main cause for the
delay increase; soon after the bulk TCP transfer starts the delay increases and
remains around 1.5-2.5 secs consistently for the duration of the TCP transfer.
Such a delay increase was not present in audio only results. Few values especially
in the highest end, however, might be due to wireless network phenomena on
top of the deep buﬀering.
Figure 4 shows CDF of the one-way delay for the media ﬂow with short TCP
ﬂows when diﬀerent number of TCP connections and diﬀerent TCP initial win-
dow sizes are in use. The one-way delay with one competing TCP ﬂow using
initial window of three segments is reasonably low and seems to allow smooth
packet delivery for interactive media. Increasing the number of TCP connec-
tions from one to two causes only a moderate increase in the end-to-end delay.
However, increasing the TCP connection count to six introduces larger one-way
delays, and the sharp knee transition with one or two ﬂows is transformed into
an earlier increase in the one-way delay aﬀecting roughly 40 % of the packets.
However, in all cases with competing TCP traﬃc using IW3 the one-way delay
remains below 150ms all the way up to 75th percentile.
The one-way delay with competing TCP traﬃc using initial window of ten
segments is notably higher than when using initial window of three in all cor-
responding cases. In all cases with the initial window of ten the one-way delay
is higher than with the case of six TCP connections using the initial window
of three. The median one-way delay with six competing TCP ﬂows using IW10
Eﬀect of Competing TCP Traﬃc on Interactive Real-Time Communication
99
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
Audio+1 TCP flows, IW=3
Audio+1 TCP flows, IW=10
Audio+2 TCP flows, IW=3
Audio+2 TCP flows, IW=10
Audio+6 TCP flows, IW=3
Audio+6 TCP flows, IW=10
 0.2
 0.4
 0.6
 0.8
 1
Audio flow one-way delay (s)
IW3
IW10
)
e
l
i
t
n
e
c
r
e
p
h
t
5
7
-
h
t
5
2
,
n
a
d
e
m
i
(
e
t
a
r
s
s
o
L
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
4
6
8
1
1
2
0
0
0
0
5
0
4
6
8
1
1
2
0
0
0
0
5