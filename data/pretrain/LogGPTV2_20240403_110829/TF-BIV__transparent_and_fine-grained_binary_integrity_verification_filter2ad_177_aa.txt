# TF-BIV: Transparent and Fine-Grained Binary Integrity Verification in the Cloud

**Authors:**  
Fangjie Jiang<sup>1,2,3</sup>, Quanwei Cai<sup>1,2*</sup>, Jingqiang Lin<sup>1,2,3</sup>, Bo Luo<sup>4</sup>, Le Guan<sup>5</sup>, Ziqiang Ma<sup>1,2,3</sup>

**Affiliations:**  
1. State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences  
2. Data Assurance and Communication Security Center, Chinese Academy of Sciences  
3. School of Cyber Security, University of Chinese Academy of Sciences  
4. Department of Electrical Engineering and Computer Science, University of Kansas, USA  
5. Department of Computer Science, University of Georgia, USA

**Contact:**  
{jiangfangjie, caiquanwei, linjingqiang}@iie.ac.cn, PI:EMAIL, PI:EMAIL, PI:EMAIL

## Abstract
With the advent of virtualization technologies, various services have been migrated to the cloud. While tenants implement their own security controls within the virtual machine (VM), binary integrity verification mechanisms in the virtual machine manager (VMM) offer enhanced protection against malware. However, existing integrity verification mechanisms in the cloud lack complete transparency and fine-grained efficiency. Some schemes selectively check the integrity of sensitive binaries but require VM modifications, such as integrating monitoring libraries. Others, although requiring no VM modifications, enforce checking on all binaries, leading to significant performance overheads.

In this paper, we introduce TF-BIV, a transparent and fine-grained binary integrity verification scheme that requires no modifications or software/driver installations in the VM. TF-BIV identifies sensitive processes at creation and checks the integrity of related binaries, including the guest OS kernel and dependent binaries. Transparency and efficiency are achieved by leveraging hardware virtualization supports (Intel Extended Page Table) and debugging features (Monitor Trap Flag). We have implemented a prototype of TF-BIV based on QEMU-KVM and demonstrated its usability in cloud-based cryptographic services, achieving strict invocation controls. In addition to password-based authentication, TF-BIV provides process-level authorization. Evaluation shows that TF-BIV incurs only about 3.6% performance overhead.

*Quanwei Cai is the corresponding author.

## Introduction
Over the past decade, cloud computing has become the de facto standard for hosting and delivering online services. While migrating services to the cloud offers significant benefits such as scalability and cost reduction, security remains a major concern. All stakeholders in this scenario have their own security considerations and deploy their own controls. For tenants, it is crucial to ensure the integrity of their core services hosted in the cloud. Conventional security controls, such as anti-virus, web application firewalls, and OS hardening, are deployed within VMs. However, these may be insufficient against zero-day vulnerabilities, misconfigurations, and phishing attacks.

On the other hand, cloud service providers (CSPs) are concerned with the security of both the tenants' systems and the cloud platform itself. A compromised guest process/OS can escape from the VM, potentially harming the host OS, performing malicious tasks like Bitcoin mining, or launching attacks against other tenants. Traditional access control for sensitive services (e.g., cryptographic services) in the cloud is based on VM identifiers and passwords, failing to achieve process-level control. This allows malicious processes in the victim VM to invoke sensitive services using leaked passwords.

A mechanism that consistently validates the integrity of sensitive VM binaries (including the OS kernel and dependent libraries) would benefit both tenants and CSPs. CSPs could use this mechanism to monitor the status of processes running in VMs and identify malicious or compromised processes. Additionally, the cloud platform could provide integrity verification as an add-on service, offering another layer of protection. Since the CSP-provided mechanism runs within the VMM, it will continue to function even if the guest OS is compromised or security functions fail.

Various mechanisms have been proposed to check the integrity of OS and applications in guest VMs. Patagonix and HIMA validate all active processes, while InkTag and AppShield require modifications to the guest OS or integration of secure modules into applications. En-ACCI validates the integrity of invoking processes for cryptographic services but is vulnerable to Time of Check to Time of Use (TOCTTOU) consistency attacks. No existing scheme meets the following four desired properties:

- **Isolation:** The integrity verification system should be fully isolated from the guest OS and target applications.
- **Transparency:** The guest OS and target applications should be unaware of the security checks conducted in the VMM, requiring no modifications.
- **TOCTTOU Consistency:** The continuity of integrity guarantees must be provided beyond the time of verification.
- **Fine-Grained Verification:** Tenants should have the flexibility to designate sensitive applications for protection, allowing bulk updates of non-sensitive binaries independently.

In this paper, we present TF-BIV, a binary integrity verification scheme in the cloud. To our knowledge, TF-BIV is the first to achieve these properties. Specifically, (1) isolation is achieved by triggering integrity verification through hardware events in the VMM, preventing interference from subverted applications or the OS kernel. (2) Transparency is maintained by leveraging hardware virtualization and virtual machine introspection (VMI) without modifying the guest VM. (3) TOCTTOU consistency is ensured by continuously monitoring updates to the page table and verified physical pages using Intel EPT and Monitor Trap Flag. (4) Fine-grained verification is provided on a per-process basis, with default verification for basic shared system services.

Process-level integrity monitoring is particularly important for critical or sensitive add-on services provided by cloud platforms. For tenants, the invoking process requires the same security assurance as the sensitive service. CSPs are also concerned with the security of the invoking process, as a compromised process can abuse add-on services. Typical cryptographic services include key management services (KMS) and cloud-based hardware security modules (Cloud HSM).

The main contributions of TF-BIV are:
- **Hardware-Assisted Integrity Verification:** TF-BIV supports fine-grained protections, allowing tenants to specify processes for validation. It is completely transparent to the VM and requires no support from the guest OS or applications.
- **Prototype Implementation and Evaluation:** We developed a prototype of TF-BIV on QEMU-KVM with Intel EPT and demonstrated its effectiveness and efficiency through extensive experiments. We also provide a detailed security analysis and qualitative comparison with other schemes.
- **Application to Cryptographic Services:** TF-BIV is applied to check the integrity of processes invoking cloud-based cryptographic services, showing modest overhead and effectively protecting sensitive services by allowing access only from authorized processes.

The rest of this paper is organized as follows. Sections 2 and 3 introduce the background and threat model. Section 4 describes the technical details of the integrity verification mechanism. Section 5 presents the security analysis. Section 6 introduces the process-level authorization mechanism for cloud-based cryptographic services. Sections 7 and 8 present the implementation specifics and experimental results, respectively. Finally, Section 9 discusses related work, and Section 10 concludes the paper.

## Background and Preliminaries
TF-BIV leverages virtual machine introspection (VMI) and hardware-assisted virtualization to achieve transparent process-level binary integrity checking. This section provides necessary background information on VMI and Intel's hardware virtualization implementation, VT-x.

### Virtualization and VMI
Virtualization allows multiple operating systems to share a single physical machine, creating the illusion that each OS runs in its own virtual machine. A virtual machine manager (VMM) ensures security by isolating VMs and controlling access to hardware resources. Exceptions, such as I/O access and system events, are handled and mediated by the VMM.

In a typical virtualization environment, the VMM is oblivious to the internal state of the guest OS, which can pose a challenge for security monitoring. VMI techniques allow the VMM to inspect and analyze the internal state of the guest OS, enabling the detection of malicious activities and the enforcement of security policies.

### Intel VT-x
Intel VT-x is a hardware virtualization technology that provides direct access to CPU resources, reducing the overhead of traditional software-based virtualization. VT-x includes features such as Extended Page Tables (EPT) and Monitor Trap Flag (MTF), which are leveraged by TF-BIV to achieve efficient and transparent integrity verification.

- **Extended Page Tables (EPT):** EPT enables the VMM to manage memory translations for the guest OS, allowing it to track and control memory access more efficiently.
- **Monitor Trap Flag (MTF):** MTF is a feature that triggers a trap when certain conditions are met, such as a change in the page table or a write to a protected memory region. This feature is used by TF-BIV to detect and respond to unauthorized modifications.

By leveraging these hardware features, TF-BIV can perform integrity verification without requiring any modifications to the guest OS or applications, ensuring both transparency and efficiency.