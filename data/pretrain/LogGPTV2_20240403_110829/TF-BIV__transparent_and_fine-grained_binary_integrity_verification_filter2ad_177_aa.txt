title:TF-BIV: transparent and fine-grained binary integrity verification
in the cloud
author:Fangjie Jiang and
Quanwei Cai and
Jingqiang Lin and
Bo Luo and
Le Guan and
Ziqiang Ma
TF-BIV: Transparent and Fine-grained Binary Integrity
Verification in the Cloud
Fangjie Jiang1,2,3, Quanwei Cai1,2∗, Jingqiang Lin1,2,3, Bo Luo4, Le Guan5, Ziqiang Ma1,2,3
1. State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences
2. Data Assurance and Communication Security Center, Chinese Academy of Sciences
3. School of Cyber Security, University of Chinese Academy of Sciences
4. Department of Electrical Engineering and Computer Science, the University of Kansas, USA
5. Department of Computer Science, the University of Georgia, USA
{jiangfangjie, caiquanwei, linjingqiang}@iie.ac.cn, PI:EMAIL, PI:EMAIL, PI:EMAIL
ABSTRACT
With the emergence of virtualization technologies, various services
have been migrated to the cloud. Beyond the tenants’ own secu-
rity controls implemented in the virtual machine (VM), the binary
integrity verification mechanism in the virtual machine manager
(VMM) provides stronger protections against malware. Unfortu-
nately, none of existing integrity verification mechanisms in the
cloud provides complete transparency and fine-grained efficiency.
Some schemes selectively check the integrity of sensitive bina-
ries, but they require modifications to the VMs (e.g., integrating
monitoring libraries) to trigger verification. Others, although need
no modification to the VMs, have to enforce checking on all the
binaries, because they cannot distinguish binary images for the
sensitive processes from the binaries for insensitive ones, leading
to significant performance overheads. In this paper, we present
TF-BIV, a transparent and fine-grained binary integrity verification
scheme, which does not require any modification or software/driver
installation in the VM. TF-BIV identifies the sensitive processes
at the creation, and checks the integrity of the binaries (including
the guest OS kernel and the dependant binaries) related to these
processes. The provided transparency and efficiency are achieved
by leveraging existing hardware virtualization supports (i.e., Intel
extended page table) and debugging features (i.e., monitor trap
flag). We have implemented the TF-BIV prototype based on QEMU-
KVM. To demonstrate the usability of TF-BIV, we adopted it for
cloud-based cryptographic services, to achieve the strict invoking
controls. In addition to the password-based authentication, TF-BIV
further achieves process-level authorization to the invokers. Inten-
sive evaluation shows that TF-BIV implements the designed binary
integrity verification with only about 3.6% performance overhead.
∗Quanwei Cai is the corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359795
CCS CONCEPTS
• Security and privacy → Access control; Virtualization and
security.
KEYWORDS
Integrity verification, virtualization, cloud-based cryptographic ser-
vice
ACM Reference Format:
Fangjie Jiang, Quanwei Cai, Jingqiang Lin, Bo Luo, Le Guan and Ziqiang Ma.
2019. TF-BIV: Transparent and Fine-grained Binary Integrity Verification
in the Cloud. In 2019 Annual Computer Security Applications Conference
(ACSAC’19), December 9–13, 2019, San Juan, PR, USA. ACM, New York, NY,
USA, 13 pages. https://doi.org/10.1145/3359789.3359795
1 INTRODUCTION
In the past decade, cloud computing has been becoming the de facto
standard model of hosting and delivering online services. While
migrating services to the cloud brings significant benefits such as
scalability and cost reduction, security has been a major concern. All
stakeholders in this scenario have their own security considerations
and, in response, deploy their own controls. First, it is critical for
the tenants to ensure the integrity of their core services hosted
in the cloud. Conventional security controls, such as anti-virus,
web application firewall, and OS hardening are deployed within
the virtual machines (VMs). However, they might be unable to deal
with zero-day vulnerabilities [23–25], misconfigurations, phished
users, etc. On the other hand, cloud service providers (CSPs) are
concerned with the security of the tenants’ systems, as well as the
security of the cloud platform itself. In particular, a compromised
guest process/OS may escape from the VM to harm the host OS
[84, 85], to perform malicious tasks such as Bitcoin mining [53],
or launch attacks against other tenants [41, 62]. Meanwhile, the
traditional access control of sensitive services (e.g., cryptographic
service) in the cloud is based on the identifier of the VM and the
corresponding password, but fails to achieve the control based on
the invoking process, while only a small number of processes are
actually authorized to invoke the sensitive service. Therefore, the
malicious processes running in the victim VM may invoke the
sensitive service with leaked passwords.
A mechanism that consistently validates the integrity of the
sensitive VM binaries (including OS kernel and all dependant li-
braries) will benefit both the cloud tenants and service providers.
The CSPs could adopt this mechanism to monitor the status of
processes running in VM, and to effectively identify malicious or
compromised processes. Moreover, the cloud platform could pro-
vide the integrity verification as an add-on service to the tenants,
i.e., binary-integrity-as-a-service. The tenants will benefit from an-
other layer of protection beyond their own security controls. Since
the CSP-provided mechanism runs within the VMM, the integrity
monitor will still function even when the guest OS is compromised
and/or security functions in the guest OS fail.
Various mechanisms have been proposed to check the integrity
of the OS and applications running in a guest VM. Patagonix [54]
and HIMA [5] are proposed for the sensitive scenario, in which all
active processes in the VM are validated. To guarantee the integrity
of specified processes, InkTag [36] has to modify the guest OS
kernel and AppShield [19] integrates a secure module into the
sensitive applications, which constructs an isolated context for
high-assurance processes even in the presence of compromised OS.
En-ACCI [47] validates the integrity of the invoking processes to
cryptographic services in the cloud. However, it only validates the
invoking process when the cryptographic service is being invoked
but not beyond, making it vulnerable to Time of Check to Time
of Use (TOCTTOU) consistency attacks. In summary, no binary
integrity verification scheme has yet been developed that meets
the following four desired properties.
• Isolation: The integrity verification system is fully isolated
from the guest OS and the target applications. The in-VMM
validator should not be interfered by the malicious guest OS
or target applications.
• Transparency: The guest OS and the target application
should be oblivious of the security checking conducted in
the VMM. Thus, no modification (e.g., hooks, drivers, or
libraries) is required in the guest OS.
• TOCTTOU consistency: The continuity of integrity guar-
• Fine-grained verification: Given that there are more non-
sensitive applications than sensitive ones in a VM, it is de-
sirable that the tenants have the flexibility to designate the
sensitive applications to be protected. So the tenant is free to
update the non-sensitive binaries in bulk independently. For
sensitive binaries, the tenants have to notify the CSP of any
changes to sensitive binaries so that an up-to-date integrity
meta-data of the sensitive binaries are always available in
VMM.
antee beyond the time-of-verification must be provided.
In this paper, we present TF-BIV, a binary integrity verification
scheme in the cloud. As far as we know, TF-BIV is the first to achieve
the aforementioned properties. More specifically, (1) to achieve
isolation, in TF-BIV, integrity verification is triggered by hardware
events and is performed in VMM. Therefore, subverted applications
or OS kernel in the guest VM cannot interfere with or bypass
TF-BIV. (2) To keep the guest VM unmodified, TF-BIV leverages
hardware virtualization and virtual machine introspection (VMI) to
hook critical system events (e.g., process creation) and to infer VM
semantic (e.g., the virtual memory layout), respectively. Note that
the result of VMI might be untrusted. We never use it to influence the
verification results, but only for acceleration purposes. (3) TF-BIV
leverages hardware-assisted second-level address translation (e.g.,
Intel EPT) and monitor trap flag (MTF) [42] to continuously monitor
any updates to the page table and the verified physical pages of the
target process. As a result, any modification to the verified memory
pages (and the memory layout) will be captured by hardware. This
ensures TOCTTOU consistency. (4) Finally, all of these security
checks are performed on a per-process basis. Unprotected processes
are not influenced. Thus, fine-grained process-level verification is
provided. Meanwhile, the basic shared system services (i.e., the OS
kernel, the runtime and drivers) are verified by default.
The process-level integrity monitoring is especially important
for critical or sensitive add-on services provided by cloud platforms.
For tenants, the invoking process requires almost the same security
assurance as the sensitive service (e.g., cloud-based cryptograhic
services). CSPs are also concerned with the security of the invoking
process. Once the invoking process is compromised, the add-on ser-
vices may be abused. For example, the RSA private key may be used
to sign a fake X.509 certificate. Typical cryptographic services in the
cloud include (1) the key management service (KMS), such as AWS
KMS [2], Azure Key Vault [55], Google Cloud KMS [34] and Aliyun
KMS [20]; and (2) the cloud-based hardware security module (Cloud
HSM), such as AWS Cloud HSM [1] and Google Cloud HSM [33].
CSPs strive to ensure the security of the cryptographic services, for
example, they adopt FIPS 140-2 [30] accredited hardware security
modules for the cryptographic computations. However, the security
of the invoking process (i.e., the invoker) is often overlooked: (1)
the identity of invokers and the corresponding passwords used in
authentication may be leaked due to various reasons [13, 75]; (2)
only one or a small number of processes running in the VM actually
need to invoke the cryptographic service, but access to the service
is authorized to the entire VM; and (3) an adversary may gain access
to the victim VM (on the whitelist), or tamper with a vulnerable
process to invoke sensitive services, bypassing authentication and
authorization. Therefore, to ensure the secure invoking of sensitive
cloud services, the CSPs are expected to verify the integrity of the
caller process, including the OS kernel and all dependant libraries.
As a side benefit, authorization of callers of sensitive services will
be specified and enforced at the process level.
The main contributions of TF-BIV are as follows:
• We propose a hardware-assisted binary integrity verification
scheme in the cloud. It supports fine-grained protections that
allow tenants to specify the processes to be validated. The
proposed mechanism is completely transparent to the VM,
and it does not need any support (OS modification, configu-
ration, driver/software installation, or modules integration)
from the guest OS and applications.
• We developed a prototype of TF-BIV on QEMU-KVM with
Intel EPT. With extensive experiments, we demonstrate the
effectiveness and efficiency of TF-BIV. We also provide an in-
depth security analysis of TF-BIV, and qualitatively compare
TF-BIV with other binary integrity verification schemes.
• We apply TF-BIV as to check the integrity of processes that
invoke cloud-based cryptographic service. The result shows
that the overhead is modest. This demonstrates that TF-BIV
effectively protects sensitive services by only allowing the
access from authorized processes.
The rest of this paper is organized as follows. We introduce the
background and the threat model in Sections 2 and 3. Section 4 de-
scribes the technical details of the integrity verification mechanism.
We then present the security analysis in Section 5. We introduce
the process-level authorization mechanism for cloud-based crypto-
graphic services, as the application of TF-BIV in Section 6. Next, we
present the implementation specifics and experimental results in
Sections 7 and 8, respectively. Finally, we discuss the related works
in Section 9, and then conclude the paper.
2 BACKGROUND AND PRELIMINARIES
TF-BIV relies on VMI and hardware-assisted virtualization to achieve
transparent process-level binary integrity checking. This section
provides necessary background information about VMI and Intel’s
hardware virtualization implementation – VT-x.
2.1 Virtualization and VMI
Virtualization allows multiple OSes to share a single physical ma-
chine. It creates an illusion that every OS runs in its own (virtual)
machine. To ensure security, a virtual machine manager (VMM)
is responsible for isolating VMs and controls access to hardware
resources, so that VMs do not interfere with each other. Exceptions,
e.g., I/O access and system events, are handled and mediated by the
VMM.
In a typical virtualization environment, the VMM is oblivious