# TEE安全攻防之内存隔离
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
众所周知，Normal World的用户态与内核态的地址空间隔离是基于MMU分页来实现的，那么Normal World与Secure
World的地址空间隔离是如何实现的呢？这篇文章将从CPU和OS的角度进行深入分析，并分析其中存在的安全风险。（
_阅读本文需要了解ARM体系结构及TRUSTZONE的基础知识_ ）
## 硬件隔离机制
阅读ARM TrustZone手册可知，内存的隔离是由TZASC(TrustZone Address Space Controller)来控制
，TZASC可以把外部DDR分成多个区域 ，每个区域可以单独配置为安全区域或非安全区域 ，Normal World的代码只能访问非安全区域。
下面以TZC-380这款地址空间控制器来进行说明，其它型号控制器的原理也大同小异。
**通过配置 TZASC的寄存器来设置不同属性的region，一个region表示
一段连续的物理地址空间，TZASC给每个region提供了一个可编程的安全属性域，只有在Secure状态下才允许修改这些寄存器**
，TZASC的基址不是固定的，不同厂商实现可能不同，但是每个寄存器的offset是固定的，如下所示：
结合[OP-TEE代码](https://github.com/OP-TEE/optee_os/blob/9742eed4c9f48b886bd9bd40e7cbd80213baee00/core/drivers/tzc380.c)对配置
TZASC进行分析：
通过 **对region对应的控制寄存器进行设置来配置安全内存地址空间** ：
    /*
     * `tzc_configure_region` is used to program regions into the TrustZone
     * controller.
     */
    void tzc_configure_region(uint8_t region, vaddr_t region_base, uint32_t attr)
    {
        assert(tzc.base);
        assert(region  Register
            // 注意：region n的基址寄存器的[14:0]永远为0，因为 TZASC不允许region size小于32KB
            tzc_write_region_base_low(tzc.base, region,
                          addr_low(region_base));
            // 设置Region Setup High  Register,第n个region基址的[63:32]位
            // 和上面的low addr拼成完整的region基址
            tzc_write_region_base_high(tzc.base, region,
                           addr_high(region_base));
            // 设置Region Attributes  Register
            // 控制permissions,region size, subregion disable,and region enable
            tzc_write_region_attributes(tzc.base, region, attr);
        } else {
            // 第0个region的基址不需要设置 ，只需要设置region的属性
            tzc_write_region_attributes(tzc.base, region,
                            attr & TZC_ATTR_SP_MASK);
        }
    }
    `
    // 设置Region Setup Low  Register的值 
    static void tzc_write_region_base_low(vaddr_t base, uint32_t region,
                          uint32_t val)
    {
        // 定位到第region个Region对应的寄存器，即上图中的region_setup_low_n
        // tzasc基址寄存器+region control寄存器的偏移(0x100)+region n寄存器的size
        io_write32(base + REGION_SETUP_LOW_OFF(region), val);
    }
通过阅读代码可知，tzc_configure_region是对第n个region的基址、大小和属性进行设置 ，其中属性寄存器的格式如下：
> **sp : 第n个region的权限设置 ，当发生访问region时，sp控制TZASC是否允许访问region。**  
>  size:第n个region的大小 。  
>  subregion_disable: region被划分为8个相同大小的sub-> regions，第一位表示相应的subregion是否disabled。  
>  en: 第n个region是否开启。
在imx_configure_tzasc函数中对region进行了配置 ：
    static TEE_Result imx_configure_tzasc(void)
    {
        vaddr_t addr[2] = {0};
        int end = 1;
        int i = 0;
        // TZASC基址
        addr[0] = core_mmu_get_va(TZASC_BASE, MEM_AREA_IO_SEC);
         ......
        for (i = 0; i = 13);
        // 初始化内存信息表，即记录下各region的PA/VA，用来PV/VA转换
        // 后面也会根据这些信息对页表进行初始化
        offs = init_mem_map(tmp_mmap, ARRAY_SIZE(static_memory_map), seed);
        check_mem_map(tmp_mmap);
        core_init_mmu(tmp_mmap);  // 初始化页表，进行内存映射
        dump_xlat_table(0x0, 1);
        core_init_mmu_regs(cfg);  // 记录页表基址，用来设置TTBR0
        cfg->load_offset = offs;
        memcpy(static_memory_map, tmp_mmap, sizeof(static_memory_map));
    }
上面函数首先调用init_mem_map初始化一个内存信息表，
**记录下各Region的PA和VA，此表用来物理地址和虚拟地址转换，后面页表初始化时也会根据此表进行填充。**
    static unsigned long init_mem_map(struct tee_mmap_region *memory_map,
                      size_t num_elems, unsigned long seed)
    {
        /*
         * @id_map_start and @id_map_end describes a physical memory range
         * that must be mapped Read-Only eXecutable at identical virtual
         * addresses.
         */
        vaddr_t id_map_start = (vaddr_t)__identity_map_init_start;
        vaddr_t id_map_end = (vaddr_t)__identity_map_init_end;
        unsigned long offs = 0;
        size_t last = 0;