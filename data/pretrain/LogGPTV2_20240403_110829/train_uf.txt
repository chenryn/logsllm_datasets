.b log_buf_len
had the value 4096;
from kernel 1.3.54, it was 8192;
from kernel 2.1.113, it was 16384;
since kernel 2.4.23/2.6, the value is a kernel configuration option
.rb ( config_log_buf_shift ,
default value dependent on the architecture).
.\" under "general setup" ==> "kernel log buffer size"
.\" for 2.6, precisely the option seems to have appeared in 2.5.55.
since linux 2.6.6, the size can be queried with command type 10 (see below).
.ss commands
the \fitype\fp argument determines the action taken by this function.
the list below specifies the values for
.ir type .
the symbolic names are defined in the kernel source,
but are not exported to user space;
you will either need to use the numbers, or define the names yourself.
.tp
.br syslog_action_close " (0)"
close the log.
currently a nop.
.tp
.br syslog_action_open " (1)"
open the log.
currently a nop.
.tp
.br syslog_action_read " (2)"
read from the log.
the call
waits until the kernel log buffer is nonempty, and then reads
at most \filen\fp bytes into the buffer pointed to by
.ir bufp .
the call returns the number of bytes read.
bytes read from the log disappear from the log buffer:
the information can be read only once.
this is the function executed by the kernel when a user program reads
.ir /proc/kmsg .
.tp
.br syslog_action_read_all " (3)"
read all messages remaining in the ring buffer,
placing them in the buffer pointed to by
.ir bufp .
the call reads the last \filen\fp
bytes from the log buffer (nondestructively),
but will not read more than was written into the buffer since the
last "clear ring buffer" command (see command 5 below)).
the call returns the number of bytes read.
.tp
.br syslog_action_read_clear " (4)"
read and clear all messages remaining in the ring buffer.
the call does precisely the same as for a
.i type
of 3, but also executes the "clear ring buffer" command.
.tp
.br syslog_action_clear " (5)"
the call executes just the "clear ring buffer" command.
the
.i bufp
and
.i len
arguments are ignored.
.ip
this command does not really clear the ring buffer.
rather, it sets a kernel bookkeeping variable that
determines the results returned by commands 3
.rb ( syslog_action_read_all )
and 4
.rb ( syslog_action_read_clear ).
this command has no effect on commands 2
.rb ( syslog_action_read )
and 9
.rb ( syslog_action_size_unread ).
.tp
.br syslog_action_console_off " (6)"
the command saves the current value of
.i console_loglevel
and then sets
.i console_loglevel
to
.ir minimum_console_loglevel ,
so that no messages are printed to the console.
before linux 2.6.32,
.\" commit 1aaad49e856ce41adc07d8ae0c8ef35fc4483245
the command simply sets
.i console_loglevel
to
.ir minimum_console_loglevel .
see the discussion of
.ir /proc/sys/kernel/printk ,
below.
.ip
the
.i bufp
and
.i len
arguments are ignored.
.tp
.br syslog_action_console_on " (7)"
if a previous
.b syslog_action_console_off
command has been performed,
this command restores
.i console_loglevel
to the value that was saved by that command.
before linux 2.6.32,
.\" commit 1aaad49e856ce41adc07d8ae0c8ef35fc4483245
this command simply sets
.i console_loglevel
to
.ir default_console_loglevel .
see the discussion of
.ir /proc/sys/kernel/printk ,
below.
.ip
the
.i bufp
and
.i len
arguments are ignored.
.tp
.br syslog_action_console_level " (8)"
the call sets
.i console_loglevel
to the value given in
.ir len ,
which must be an integer between 1 and 8 (inclusive).
the kernel silently enforces a minimum value of
.ir minimum_console_loglevel
for
.ir len .
see the
.ir "log level"
section for details.
the
.i bufp
argument is ignored.
.tp
.br syslog_action_size_unread " (9) (since linux 2.4.10)"
the call
returns the number of bytes currently available to be read
from the kernel log buffer via command 2
.rb ( syslog_action_read ).
the
.i bufp
and
.i len
arguments are ignored.
.tp
.br syslog_action_size_buffer " (10) (since linux 2.6.6)"
this command returns the total size of the kernel log buffer.
the
.i bufp
and
.i len
arguments are ignored.
.pp
all commands except 3 and 10 require privilege.
in linux kernels before 2.6.37,
command types 3 and 10 are allowed to unprivileged processes;
since linux 2.6.37,
these commands are allowed to unprivileged processes only if
.ir /proc/sys/kernel/dmesg_restrict
has the value 0.
before linux 2.6.37, "privileged" means that the caller has the
.br cap_sys_admin
capability.
since linux 2.6.37,
"privileged" means that the caller has either the
.br cap_sys_admin
capability (now deprecated for this purpose) or the (new)
.br cap_syslog
capability.
.\"
.\"
.ss /proc/sys/kernel/printk
.i /proc/sys/kernel/printk
is a writable file containing four integer values that influence kernel
.i printk()
behavior when printing or logging error messages.
the four values are:
.tp
.i console_loglevel
only messages with a log level lower than this value will
be printed to the console.
the default value for this field is
.b default_console_loglevel
(7), but it is set to
4 if the kernel command line contains the word "quiet",\" since linux 2.4
10 if the kernel command line contains the word "debug",
and to 15 in case
of a kernel fault (the 10 and 15 are just silly, and equivalent to 8).
the value of
.ir console_loglevel
can be set (to a value in the range 1\(en8) by a
.br syslog ()
call with a
.i type
of 8.
.tp
.i default_message_loglevel
this value will be used as the log level for
.ir printk()
messages that do not have an explicit level.
up to and including linux 2.6.38,
the hard-coded default value for this field was 4
.rb ( kern_warning );
since linux 2.6.39,
.\" commit 5af5bcb8d37f99ba415a1adc6da71051b84f93a5
the default value is a defined by the kernel configuration option
.br config_default_message_loglevel ,
which defaults to 4.
.tp
.i minimum_console_loglevel
the value in this field is the minimum value to which
.i console_loglevel
can be set.
.tp
.i default_console_loglevel
this is the default value for
.ir console_loglevel .
.\"
.\"
.ss the log level
every
.ir printk ()
message has its own log level.
if the log level is not explicitly specified as part of the message,
it defaults to
.ir default_message_loglevel .
the conventional meaning of the log level is as follows:
.ts
lb lb lb
lb c l.
kernel constant	level value	meaning
kern_emerg	0	system is unusable
kern_alert	1	t{
action must be taken immediately
t}
kern_crit	2	critical conditions
kern_err	3	error conditions
kern_warning	4	warning conditions
kern_notice	5	t{
normal but significant condition
t}
kern_info	6	informational
kern_debug	7	debug-level messages
.te
.sp 1
the kernel
.ir printk()
routine will print a message on the
console only if it has a log level less than the value of
.ir console_loglevel .
.sh return value
for \fitype\fp equal to 2, 3, or 4, a successful call to
.br syslog ()
returns the number
of bytes read.
for \fitype\fp 9,
.br syslog ()
returns the number of bytes currently
available to be read on the kernel log buffer.
for \fitype\fp 10,
.br syslog ()
returns the total size of the kernel log buffer.
for other values of \fitype\fp, 0 is returned on success.
.pp
in case of error, \-1 is returned,
and \fierrno\fp is set to indicate the error.
.sh errors
.tp
.b einval
bad arguments (e.g.,
bad
.ir type ;
or for
.i type
2, 3, or 4,
.i buf
is null,
or
.i len
is less than zero; or for
.i type
8, the
.i level
is outside the range 1 to 8).
.tp
.b enosys
this
.br syslog ()
system call is not available, because the kernel was compiled with the
.br config_printk
kernel-configuration option disabled.
.tp
.b eperm
an attempt was made to change
.i console_loglevel
or clear the kernel
message ring buffer by a process without sufficient privilege
(more precisely: without the
.b cap_sys_admin
or
.br cap_syslog
capability).
.tp
.b erestartsys
system call was interrupted by a signal; nothing was read.
(this can be seen only during a trace.)
.sh conforming to
this system call is linux-specific and should not be used in programs
intended to be portable.
.sh notes
from the very start, people noted that it is unfortunate that
a system call and a library routine of the same name are entirely
different animals.
.\" in libc4 and libc5 the number of this call was defined by
.\" .br sys_klog .
.\" in glibc 2.0 the syscall is baptized
.\" .br klogctl ().
.sh see also
.br dmesg (1),
.br syslog (3),
.br capabilities (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" this man page is copyright (c) 1999 andi kleen .
.\"
.\" %%%license_start(verbatim_one_para)
.\" permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%license_end
.\"
.\" $id: netdevice.7,v 1.10 2000/08/17 10:09:54 ak exp $
.\"
.\" modified, 2004-11-25, mtk, formatting and a few wording fixes
.\"
.\" modified, 2011-11-02, , added many basic
.\"  but missing ioctls, such as siocgifaddr.
.\"
.th netdevice  7 2021-03-22 "linux" "linux programmer's manual"
.sh name
netdevice \- low-level access to linux network devices
.sh synopsis
.nf
.b "#include "
.b "#include "
.fi
.sh description
this man page describes the sockets interface which is used to configure
network devices.
.pp
linux supports some standard ioctls to configure network devices.
they can be used on any socket's file descriptor regardless of the
family or type.
most of them pass an
.i ifreq
structure:
.pp
.in +4n
.ex
struct ifreq {
    char ifr_name[ifnamsiz]; /* interface name */
    union {
        struct sockaddr ifr_addr;
        struct sockaddr ifr_dstaddr;
        struct sockaddr ifr_broadaddr;
        struct sockaddr ifr_netmask;
        struct sockaddr ifr_hwaddr;
        short           ifr_flags;
        int             ifr_ifindex;
        int             ifr_metric;
        int             ifr_mtu;
        struct ifmap    ifr_map;
        char            ifr_slave[ifnamsiz];
        char            ifr_newname[ifnamsiz];
        char           *ifr_data;
    };
};
.ee
.in
.pp
.b af_inet6
is an exception.
it passes an
.i in6_ifreq
structure:
.pp
.in +4n
.ex
struct in6_ifreq {
    struct in6_addr     ifr6_addr;
    u32                 ifr6_prefixlen;
    int                 ifr6_ifindex; /* interface index */
};
.ee
.in
.pp
normally, the user specifies which device to affect by setting
.i ifr_name
to the name of the interface or
.i ifr6_ifindex
to the index of the interface.
all other members of the structure may
share memory.
.ss ioctls
if an ioctl is marked as privileged, then using it requires an effective
user id of 0 or the
.b cap_net_admin
capability.
if this is not the case,
.b eperm
will be returned.
.tp
.b siocgifname
given the
.ir ifr_ifindex ,
return the name of the interface in
.ir ifr_name .
this is the only ioctl which returns its result in
.ir ifr_name .
.tp
.b siocgifindex
retrieve the interface index of the interface into
.ir ifr_ifindex .
.tp
.br siocgifflags ", " siocsifflags
get or set the active flag word of the device.
.i ifr_flags
contains a bit mask of the following values:
.\" do not right adjust text blocks in tables
.na
.ts
tab(:);
c s
l l.
device flags
iff_up:interface is running.
iff_broadcast:valid broadcast address set.
iff_debug:internal debugging flag.
iff_loopback:interface is a loopback interface.
iff_pointopoint:interface is a point-to-point link.
iff_running:resources allocated.
iff_noarp:t{
no arp protocol, l2 destination address not set.
t}
iff_promisc:interface is in promiscuous mode.
iff_notrailers:avoid use of trailers.
iff_allmulti:receive all multicast packets.
iff_master:master of a load balancing bundle.
iff_slave:slave of a load balancing bundle.
iff_multicast:supports multicast
iff_portsel:is able to select media type via ifmap.
iff_automedia:auto media selection active.
iff_dynamic:t{
the addresses are lost when the interface goes down.
t}
iff_lower_up:driver signals l1 up (since linux 2.6.17)
iff_dormant:driver signals dormant (since linux 2.6.17)
iff_echo:echo sent packets (since linux 2.6.25)
.te
.ad
.pp
setting the active flag word is a privileged operation, but any
process may read it.
.tp
.br siocgifpflags ", " siocsifpflags
get or set extended (private) flags for the device.
.i ifr_flags
contains a bit mask of the following values:
.ts
tab(:);
c s
l l.
private flags
iff_802_1q_vlan:interface is 802.1q vlan device.
iff_ebridge:interface is ethernet bridging device.
iff_slave_inactive:interface is inactive bonding slave.
iff_master_8023ad:interface is 802.3ad bonding master.
iff_master_alb:interface is balanced-alb bonding master.
iff_bonding:interface is a bonding master or slave.
iff_slave_needarp:interface needs arps for validation.
iff_isatap:interface is rfc4214 isatap interface.
.te
.pp
setting the extended (private) interface flags is a privileged operation.
.tp
.br siocgifaddr ", " siocsifaddr ", " siocdifaddr
get, set, or delete the address of the device using
.ir ifr_addr ,
or
.i ifr6_addr
with
.ir ifr6_prefixlen .
setting or deleting the interface address is a privileged operation.
for compatibility,
.b siocgifaddr
returns only
.b af_inet
addresses,
.b siocsifaddr
accepts
.b af_inet
and
.b af_inet6
addresses, and
.b siocdifaddr
deletes only
.b af_inet6
addresses.
a
.b af_inet
address can be deleted by setting it to zero via
.br siocsifaddr .
.tp
.br siocgifdstaddr ", " siocsifdstaddr
get or set the destination address of a point-to-point device using
.ir ifr_dstaddr .
for compatibility, only
.b af_inet
addresses are accepted or returned.
setting the destination address is a privileged operation.
.tp
.br siocgifbrdaddr ", " siocsifbrdaddr
get or set the broadcast address for a device using
.ir ifr_brdaddr .
for compatibility, only
.b af_inet
addresses are accepted or returned.
setting the broadcast address is a privileged operation.
.tp
.br siocgifnetmask ", " siocsifnetmask
get or set the network mask for a device using
.ir ifr_netmask .
for compatibility, only
.b af_inet
addresses are accepted or returned.
setting the network mask is a privileged operation.
.tp
.br siocgifmetric ", " siocsifmetric
get or set the metric of the device using
.ir ifr_metric .
this is currently not implemented; it sets
.i ifr_metric
to 0 if you attempt to read it and returns