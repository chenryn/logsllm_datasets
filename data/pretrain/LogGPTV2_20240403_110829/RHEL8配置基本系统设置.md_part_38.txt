:::
开发人员的其他 Python 工具通过相应的 `python3x-devel`{.literal} 模块中的
CodeReady Linux Builder 存储库发布。
`python38-devel`{.literal} 模块包含 `python38-pytest`{.literal}
软件包及其依赖项：py `parsing`{.literal}、`atomwrites、attrs`{.literal}
`、打包`{.literal}、``{=html}
`py`{.literal}、`更多-itertools`{.literal}、`plugingy`{.literal} 和
`wcwidth`{.literal} 软件包。
`python39-devel`{.literal} 模块包含 `python39-pytest`{.literal}
软件包及其依赖项：py `parsing`{.literal}、attrs、package`、`{.literal}
`py`{.literal} `、`{.literal}
`more-itertools`{.literal}、`plugingy`{.literal}、`wcwidth`{.literal}、`iniconfig`{.literal}
和 `pybind11`{.literal} 软件包。`python39-devel`{.literal} 模块还包含
`python39-debug`{.literal} 和 `python39-Cython`{.literal} 软件包。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
红帽不支持 CodeReady Linux Builder 存储库及其内容。
:::
若要从 `python39-devel`{.literal} 模块安装软件包，请使用以下步骤：
::: orderedlist
**流程**
1.  启用 CodeReady Linux Builder 存储库：
    ``` literallayout
    # subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms
    ```
2.  启用 `python39-devel`{.literal} 模块：
    ``` literallayout
    # yum module enable python39-devel
    ```
3.  安装 `python39-pytest`{.literal} 软件包：
    ``` literallayout
    # yum install python39-pytest
    ```
:::
要从 `python38-devel`{.literal} 模块安装软件包，请在以上命令中将 [
*[*python39-*]{.emphasis}替换为 python38*]{.emphasis} -。
::: itemizedlist
**其它资源**
-   [如何使用 CodeReady Linux Builder
    中的内容](https://access.redhat.com/articles/4348511){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_installing-and-using-python.html#proc_installing-python-2_assembly_installing-and-using-python}安装 Python 2 {.title}
:::
有些应用程序和脚本尚未完全移植到 Python 3，需要运行 Python 2。Red Hat
Enterprise Linux 8 允许并行安装 Python 3 和 Python 2。如果需要 Python 2
功能，请安装 AppStream 存储库中提供的 `python27`{.literal} 模块。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
请注意，Python 3 是 Python 项目的主要开发方向。对 Python 2
的支持正在分阶段停用。`python27`{.literal} 模块的支持周期比 Red Hat
Enterprise Linux 8 短。
:::
::: itemizedlist
**流程**
-   要从 `python27`{.literal} 模块安装 Python 2.7，请使用：
    ``` literallayout
    # yum install python2
    ```
    `python27:2.7`{.literal} 模块流是自动启用的。
:::
带有 Python 2 附加组件模块的软件包通常使用 `python2-`{.literal}
前缀。安装其他 Python 软件包时始终包含前缀，如下例所示。
::: itemizedlist
-   要安装 Python 2 `的 Requests`{.literal} 模块，请使用：
    ``` literallayout
    # yum install python2-requests
    ```
-   要将 `Cython`{.literal} 扩展安装到 Python 2，请使用：
    ``` literallayout
    # yum install python2-Cython
    ```
:::
::: itemizedlist
**验证步骤**
-   要验证系统中安装的 Python 版本，请使用：
    ``` literallayout
    $ python2 --version
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
按照设计，您可以并行安装 RHEL 8 模块，包括
`python27`{.literal}、python`36`{.literal}、`python38`{.literal} 和
`python39`{.literal} 模块。
:::
::: itemizedlist
**其它资源**
-   [在 RHEL 8
    中安装、管理和删除用户空间组件](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_managing_and_removing_user-space_components/){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_installing-and-using-python.html#ref_migrating-from-python-2-to-python-3_assembly_installing-and-using-python}从 Python 2 迁移到 Python 3 {.title}
:::
作为开发者，您可能想要将之前使用 Python 2 编写的代码迁移到 Python 3。
有关如何将大型代码库迁移到 Python 3 的更多信息，请参阅 [Storageative
Python 3 Porting
Guide](https://portingguide.readthedocs.io/en/latest/#fconservative){.link}。
请注意,在迁移后,原始 Python 2 代码就可以被 Python 3 解释器解释，也可以被
Python 2 解释器解析。
:::
::: section
::: titlepage
# []{#assembly_installing-and-using-python.html#proc_using-python_assembly_installing-and-using-python}使用 Python {.title}
:::
运行 Python 解释器或 Python 相关命令时，请始终指定版本。
::: itemizedlist
**先决条件**
-   确保安装了所需的 Python 版本。
:::
::: itemizedlist
**流程**
-   要运行 Python 3.6 解释器或相关命令，请使用：
    ``` literallayout
    $ python3
    $ python3 -m cython --help
    $ pip3 install package
    ```
-   要运行 Python 3.8 解释器或相关命令，请使用：
    ``` literallayout
    $ python3.8
    $ python3.8 -m cython --help
    $ pip3.8 install package
    ```
-   要运行 Python 3.9 解释程序或相关命令，请使用：
    ``` literallayout
    $ python3.9
    $ python3.9 -m pip --help
    $ pip3.9 install package
    ```
-   要运行 Python 2 解释器或相关命令，请使用：
    ``` literallayout
    $ python2
    $ python2 -m cython --help
    $ pip2 install package
    ```
:::
:::
:::
[]{#assembly_configuring-the-unversioned-python.html}
::: chapter
::: titlepage
# []{#assembly_configuring-the-unversioned-python.html#assembly_configuring-the-unversioned-python}第 41 章 配置未指定版本的 Python {.title}
:::
系统管理员可以使用 `alternatives`{.literal} 命令配置位于
`/usr/bin/python`{.literal} 的被指定版本的 `python`{.literal}
命令。请注意，在将未指定版本的命令配置为相应的版本之前，必须安装所需的
` python3`{.literal}、python`38`{.literal}、python`39`{.literal} 或
python2``{=html} 软件包。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`/usr/bin/python`{.literal} 执行文件由 `alternatives`{.literal}
系统控制。更新时可能会覆盖任何手动更改。
其他 Python 相关的命令，如
`pip3`{.literal}，没有可配置的未指定版本变体。
:::
::: section
::: titlepage
# []{#assembly_configuring-the-unversioned-python.html#proc_configuring-the-unversioned-python-command-directly_assembly_configuring-the-unversioned-python}直接配置未指定版本的 python 命令 {.title}
:::
您可以将未指定版本的 `python`{.literal} 命令直接配置为所选版本的
Python。
::: itemizedlist
**先决条件**
-   确保安装了所需的 Python 版本。
:::
::: itemizedlist
**流程**
-   要将未指定版本的 `python`{.literal} 命令配置为 Python 3.6，请使用：
    ``` literallayout
    # alternatives --set python /usr/bin/python3
    ```
-   要将未指定版本的 `python`{.literal} 命令配置为 Python 3.8，请使用：
    ``` literallayout
    # alternatives --set python /usr/bin/python3.8
    ```
-   要将未指定版本的 `python`{.literal} 命令配置为 Python 3.9，请使用：
    ``` literallayout
    # alternatives --set python /usr/bin/python3.9
    ```
-   要将未指定版本的 `python`{.literal} 命令配置为 Python 2，请使用：
    ``` literallayout
    # alternatives --set python /usr/bin/python2
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-the-unversioned-python.html#proc_configuring-the-unversioned-python-command-interactively_assembly_configuring-the-unversioned-python}以互动方式将未指定版本的 python 命令配置为所需的 Python 版本 {.title}
:::
您可以以交互方式将未指定版本的 `python`{.literal} 命令配置为所需的
Python 版本。
::: itemizedlist
**先决条件**
-   确保安装了所需的 Python 版本。
:::
::: orderedlist
**流程**
1.  要以互动方式配置未指定 `版本的 python`{.literal} 命令，请使用：
    ``` literallayout
    # alternatives --config python
    ```
2.  从提供的列表中选择所需版本。
3.  要重置此配置并删除未指定版本的 `python`{.literal} 命令，请使用：
    ``` literallayout
    # alternatives --auto python
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-the-unversioned-python.html#_additional_resources_14}其它资源 {.title}
:::
::: itemizedlist
-   `alternatives(8)和`{.literal} `unversioned-python(1)`{.literal} man
    page
:::
:::
:::
[]{#assembly_packaging-python-3-rpms.html}
::: chapter
::: titlepage
# []{#assembly_packaging-python-3-rpms.html#assembly_packaging-python-3-rpms}第 42 章 打包 Python 3 RPM {.title}
:::
大多数 Python 项目使用 Setuptools 进行打包，并在 `setup.py`{.literal}
文件中定义软件包信息。有关 Setuptools 打包的详情，请参考 [Setuptools
文档](https://setuptools.readthedocs.io/en/latest/){.link}。
您还可以将您的 Python 项目打包打包到 RPM 软件包中，与 Setuptools
打包相比具有以下优势：
::: itemizedlist
-   软件包与其他 RPM 的依赖关系规范（甚至非 Python）
-   加密签名
    通过加密签名，可以使用操作系统的其他部分对 RPM
    软件包的内容进行验证、集成和测试。
:::
::: section
::: titlepage
# []{#assembly_packaging-python-3-rpms.html#con_spec-file-description-for-a-python-package_assembly_packaging-python-3-rpms}Python 软件包的 SPEC 文件描述 {.title}
:::
SPEC 文件包含 `rpmbuild`{.literal} 实用程序用来构建 RPM
的指令。这些说明包含在一系列部分中。SPEC
文件包含定义这些部分的两个主要部分：
::: itemizedlist
-   强制（包含一系列在正文中使用的元数据项）
-   正文（包含说明的主要部分）
:::
与非 Python RPM SPEC 文件相比，Python 项目的 RPM SPEC
文件有一些具体内容。最值得注意的是，Python 库的任何 RPM
软件包的名称都必须包含用于确定版本的前缀，例如：Python 3.6 的
`python3`{.literal}、Python 3.8 的 `python38`{.literal} 或 Python 3.9 的