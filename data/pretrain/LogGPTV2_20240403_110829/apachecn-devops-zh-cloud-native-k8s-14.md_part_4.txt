    为了使事情变得简单，让我们只使用基本的内存消息传递层，但是了解您可以使用的所有选项是很好的。关于消息渠道的模块化选项，请查看[https://knative.dev/docs/eventing/channels/channels-crds/](https://knative.dev/docs/eventing/channels/channels-crds/)的文档。对于事件源选项，可以查看[https://knative.dev/docs/eventing/sources/](https://knative.dev/docs/eventing/sources/)。
8.  要安装`in-memory`消息层，请使用以下命令:
    ```
    kubectl apply --filename https://github.com/knative/eventing/releases/download/v0.18.0/in-memory-channel.yaml
    ```
9.  以为我们结束了？没有！最后一件事。我们需要安装一个代理，它将从消息传递层获取事件，并在正确的地方处理它们。让我们使用默认的代理层，MT-Channel 代理层。您可以使用以下命令安装它:
    ```
    kubectl apply --filename https://github.com/knative/eventing/releases/download/v0.18.0/mt-channel-broker.yaml
    ```
说完了，我们终于结束了。我们已经通过 Knative 安装了端到端的 FaaS 实现。正如你所知，这不是一项容易的任务。让 Knative 令人惊叹的是让它变得痛苦的同样一件事——它提供了如此多不同的模块化选项和配置，以至于即使在为每一步选择最基本的选项时，我们仍然花了很多时间来解释安装。还有其他可用的选项，例如 OpenFaaS，它们更容易启动和运行，我们将在下一节中探讨这一点！然而，从好的方面来说，现在我们终于准备好了，我们可以加入我们的 FaaS 了。
### 在加拿大实施 FaaS 模式
现在我们已经建立了 Knative，我们可以使用它来实现一个 FaaS 模式，其中事件将通过一个触发器触发 Knative 中运行的一些代码。要建立一个简单的 FaaS，我们需要三样东西:
*   从入口点发送事件的经纪人
*   消费者服务来实际处理我们的事件
*   指定何时将事件路由到使用者进行处理的触发器定义
首先，我们的经纪人需要创建。这很简单，类似于创建入口记录或网关。我们的 YAML 是这样的:
kna active-broker . YAML:
```
apiVersion: eventing.knative.dev/v1
kind: broker
metadata:
 name: my-broker
 namespace: default
```
接下来，我们可以创建一个消费者服务。这个组件实际上只是我们处理事件的应用——我们的函数本身！与其向您展示比您已经看到的更多的 YAML，不如让我们假设我们的消费者服务只是一个名为`service-consumer`的常规老 Kubernetes 服务，它路由到运行我们应用的四副本部署的 Pods。
最后，我们需要一个触发器。这决定了如何以及从代理路由哪些事件。扳机的 YAML 是这样的:
Knative-trigger.yaml:
```
apiVersion: eventing.knative.dev/v1
kind: Trigger
metadata:
  name: my-trigger
spec:
  broker: my-broker
  filter:
    attributes:
      type: myeventtype
  subscriber:
    ref:
     apiVersion: v1
     kind: Service
     name: service-consumer
```
在这个 YAML，我们创建了一个`Trigger`规则，通过我们的经纪人`my-broker`发生的任何事件，如果其类型为`myeventtype`，将自动被路由到我们的消费者`service-consumer`。有关 Knative 中触发器过滤器的完整文档，请查看[https://knative.dev/development/eventing/triggers/](https://knative.dev/development/eventing/triggers/)的文档。
那么，我们如何创造一些事件呢？首先，使用以下命令检查代理网址:
```
kubectl get broker
```
这将产生以下输出:
```
NAME      READY   REASON   URL                                                                                 AGE
my-broker   True             http://broker-ingress.knative-eventing.svc.cluster.local/default/my-broker     1m
```
我们现在终于可以测试我们的 FaaS 解决方案了。让我们旋转一个快速 Pod ，我们可以从这里向触发器发出请求:
```
kubectl run -i --tty --rm debug --image=radial/busyboxplus:curl --restart=Never -- sh
```
现在，从这个 Pod 中，我们可以继续测试我们的触发器，使用`curl`。我们需要发出的请求需要有一个等于`myeventtype`的`Ce-Type`头，因为这是我们的触发器所需要的。Knative 使用形式为`Ce-Id`、`Ce-Type`的头来进行路由，如下面的代码块所示。
`curl`请求如下所示:
```
curl -v "http://broker-ingress.knative-eventing.svc.cluster.local/default/my-broker" \
  -X POST \
  -H "Ce-Id: anyid" \
  -H "Ce-Specversion: 1.0" \
  -H "Ce-Type: myeventtype" \
  -H "Ce-Source: any" \
  -H "Content-Type: application/json" \
  -d '{"payload":"Does this work?"}'
```
如您所见，我们正在向代理 URL 发送`curl` `http`请求。此外，我们在 HTTP 请求中传递了一些特殊的头。重要的是，我们正在传递`type=myeventtype`，这是我们触发器上的过滤器发送处理请求所需要的。
在这个例子中，我们的消费者服务回显了主体 JSON 的有效载荷键，以及一个`200` HTTP 响应，因此运行这个`curl`请求会给我们以下信息:
```
> HTTP/1.1 200 OK
> Content-Type: application/json
{
  "Output": "Does this work?"
}
```
成功！我们已经测试了我们的 FaaS，它返回了我们所期待的。从这里开始，我们的解决方案将随着事件数量的增加而上下扩展到零，并且与 Knative 一样，有更多的定制和配置选项来根据我们的需求定制我们的解决方案。
接下来，我们将使用 OpenFaaS 而不是 Knative 来研究相同的模式，以突出这两种方法之间的差异。
## 在 Kubernetes 卫星上为 FaaS 使用开放式火焰原子吸收光谱法
既然我们已经讨论了开始使用 Knative，让我们用 OpenFaaS 做同样的。首先，为了安装 OpenFaaS 本身，我们将使用来自`faas-netes`资源库的 Helm 图表，该资源库位于[https://github.com/openfaas/faas-netes](https://github.com/openfaas/faas-netes)。
### 安装带头盔的开放式风扇组件
首先，我们将创建两个名称空间来保存我们的 OpenFaaS 组件:
*   `openfaas`保存 OpenFaas 的实际服务组件
*   `openfaas-fn`保持我们部署的功能
我们可以使用以下命令从`faas-netes`存储库中使用一个漂亮的 YAML 文件添加这两个名称空间:
```
kubectl apply -f https://raw.githubusercontent.com/openfaas/faas-netes/master/namespaces.yml
```
接下来，我们需要用以下 Helm 命令添加`faas-netes` `Helm` `repository`:
```
helm repo add openfaas https://openfaas.github.io/faas-netes/
helm repo update
```
最后，我们实际部署了 OpenFaaS！
前面`faas-netes`存储库中 OpenFaaS 的 Helm 图有几个可能的变量，但是我们将使用以下配置来确保创建了一组初始身份验证凭证，并且部署了入口记录:
```
helm install openfaas openfaas/openfaas \
    --namespace openfaas  \
    --set functionNamespace=openfaas-fn \
    --set ingress.enabled=true \
    --set generateBasicAuth=true 
```
现在，我们的 OpenFaaS 基础设施已经部署到我们的集群中，我们想要获取在 Helm 安装过程中生成的凭据。Helm 图表将创建这些作为钩子的一部分，并将它们存储在一个机密中，因此我们可以通过运行以下命令来获取它们:
```
OPENFAASPWD=$(kubectl get secret basic-auth -n openfaas -o jsonpath="{.data.basic-auth-password}" | base64 --decode)
```
这就是我们需要的所有 Kubernetes 设置！
接下来，让我们安装 OpenFaas 命令行界面，这将使管理我们的 OpenFaas 功能变得极其容易。
### 安装调用 OpenFaaS 命令行界面并部署功能
要安装 OpenFaaS CLI，我们可以使用以下命令(对于 Windows，查看前面的 OpenFaaS 文档):
```
curl -sL https://cli.openfaas.com | sudo sh
```
现在，我们可以开始构建和部署一些功能了。通过命令行界面最容易做到这一点。
在为 OpenFaaS 构建和部署函数时，OpenFaaS 命令行界面提供了一种简单的方法来生成样板，并为特定的语言构建和部署函数。它通过“模板”做到这一点，并支持各种风格的节点、Python 等。有关模板类型的完整列表，请查看位于[https://github.com/openfaas/templates](https://github.com/openfaas/templates)的模板库。
使用 OpenFaaS 命令行界面创建的模板类似于您对托管无服务器平台(如 AWS Lambda)的期望。让我们使用以下命令创建一个全新的 Node.js 函数:
```
faas-cli new my-function –lang node
```
这将产生以下输出:
```
Folder: my-function created.
Function created in folder: my-function
Stack file written: my-function.yml
```
如您所见，`new`命令生成了一个文件夹，其中包含一些函数代码本身的样板，以及一个 OpenFaaS YAML 文件。
OpenFaaS YAML 文件将显示如下:
My-function.yml:
```
provider:
  name: openfaas
  gateway: http://localhost:8080
functions:
  my-function:
    lang: node
    handler: ./my-function
    image: my-function
```
实际的函数代码(在`my-function`文件夹中)由一个函数文件–`handler.js`和一个依赖清单`package.json`组成。对于其他语言，这些文件会有所不同，我们不会在 Node 中深究依赖关系的细节。但是，我们将编辑`handler.js`文件以返回一些文本。编辑后的文件是这样的:
处理者. js:
```
"use strict"
module.exports = (context, callback) => {
    callback(undefined, {output: "my function succeeded!"});
}
```
这段 JavaScript 代码将返回一个带有我们文本的 JSON 响应。
现在我们已经有了我们的函数和处理程序，我们可以继续构建和部署我们的函数了。OpenFaaS 命令行界面使构建函数变得简单，我们可以使用以下命令来完成:
```
faas-cli build -f /path/to/my-function.yml 
```
这个命令的输出很长，但是当它完成时，我们将在本地构建一个新的容器映像，并嵌入我们的函数处理程序和依赖项！
接下来，我们将我们的容器映像推送到容器存储库中，就像我们推送给任何其他容器一样。OpenFaaS 命令行界面为此提供了一个简洁的包装器命令，它会将映像推送到 Docker Hub 或备用容器映像存储库:
```
faas-cli push -f my-function.yml 
```
现在，我们可以将我们的功能部署到 OpenFaaS。命令行界面再次使这变得容易。使用以下命令部署它:
```
faas-cli deploy -f my-function.yml
```
现在一切都准备好了让我们测试我们的功能，部署在 OpenFaaS 上！我们在部署 OpenFaaS 时使用了入口设置，因此请求可以通过该入口。然而，我们的新函数生成的 YAML 文件被设置为在`localhost:8080`上发出请求，用于开发目的。我们可以为我们的入口网关将该文件编辑到正确的`URL`(关于如何做到这一点，请参考[https://docs.openfaas.com/deployment/kubernetes/](https://docs.openfaas.com/deployment/kubernetes/)的文档)，但是相反，让我们做一个快捷方式，让 OpenFaaS 在我们的本地主机上打开。
让我们使用`kubectl port-forward`命令在本地主机端口`8080`上打开我们的 OpenFaaS 服务。我们可以这样做:
```
export OPENFAAS_URL=http://127.0.0.1:8080
kubectl port-forward -n openfaas svc/gateway 8080:8080
```
现在，让我们将之前生成的身份验证凭据添加到 OpenFaaS 命令行界面，如下所示:
```
echo -n $OPENFAASPWD | faas-cli login -g $OPENFAAS_URL -u admin --password-stdin
```
最后，为了测试我们的函数，我们需要做的就是运行以下命令:
```
faas-cli invoke -f my-function.yml my-function
```
这将产生以下输出:
```
Reading from STDIN - hit (Control + D) to stop.
This is my message
{ output: "my function succeeded!"});}
```
正如您所看到的，我们已经成功收到了预期的响应！
最后，如果我们想要删除这个特定的函数，我们可以使用下面的命令来完成，类似于我们使用`kubectl delete -f`的方式:
```
faas-cli rm -f my-function.yml 
```
就这样！我们的功能被移除了。
# 总结
在本章中，我们学习了 Kubernetes 上的服务网格和无服务器模式。为了给这些做好准备，我们首先讨论了在 Kubernetes 上运行 sidecar 代理，特别是特使代理。
然后，我们继续学习服务网格，并学习如何安装和配置 Istio 服务网格，以便通过相互 TLS 进行服务到服务的路由。
最后，我们继续讨论 Kubernetes 上的无服务器模式，在这里您学习了如何配置和安装 Knative，以及用于无服务器事件的另一种方法 OpenFaaS 和 Kubernetes 上的 FaaS。
本章中使用的技巧将帮助您在 Kubernetes 上构建服务网格和无服务器模式，为您设置全自动的服务到服务发现和 FaaS 事件。
在下一章(也是最后一章)，我们将讨论在 Kubernetes 上运行有状态应用。
# 问题
1.  静态和动态特使配置有什么区别？
2.  特使配置的四个主要部分是什么？
3.  Knative 有哪些缺点，OpenFaaS 相比如何？
# 进一步阅读
*   CNCF 山水:[https://landscape.cncf.io/](https://landscape.cncf.io/)
*   官场久别论坛:[https://discuss . kubrintes . io/](https://discuss.kubernetes.io/)