### OAuth 1.0 Workflow and Signature Generation

#### Temporary-Credential Request Phase
To initiate the temporary-credential request phase, the client must be registered with the resource server and have a `consumer_key` and `consumer_secret` pair. The `oauth_callback_confirmed` parameter must be present and set to `true`, confirming that the resource server received the `oauth_callback` sent in the request.

At the end of this phase, the client will receive an `oauth_token` and an `oauth_token_secret`.

#### Resource-Owner Authorization Phase
During the resource-owner authorization phase, the client must get the `oauth_token` from the previous phase authorized by the user or the resource owner. The client redirects the user to the resource server with an HTTP GET request, including the `oauth_token` as a query parameter.

Example:
```http
GET /authorize_token?oauth_token=bhgdjgdds HTTP/1.1
Host: server.com
```

The resource server then displays the client's name on its login page. The user must authenticate and authorize the token. After approval, the resource server redirects the user to the `oauth_callback` URL corresponding to the client:

Example:
```http
GET /client_cb?x=1&oauth_token=dsdsdsdd&oauth_verifier=dsdsdsds HTTP/1.1
Host: client.net
```

**Parameters:**
- **`oauth_token`**: An identifier generated by the resource server to link the `oauth_verifier` to the `oauth_consumer_key`.
- **`oauth_verifier`**: A shared verification code generated by the resource server, used by the client in future requests to generate the `oauth_signature`.

If no `oauth_callback` URL is registered, the resource server displays a verification code to the user, who must provide it to the client manually.

At the end of this phase, the client has a new `oauth_token` and an `oauth_verifier`.

#### Token-Credential Request Phase
During the token-credential request phase, the client makes a direct HTTP POST or GET request to the access token endpoint hosted at the resource server:

Example:
```http
POST /access_token HTTP/1.1
Host: server.com
Authorization: OAuth realm="simple",
    oauth_consumer_key="dsdsddDdsdsds",
    oauth_token="bhgdjgdds",
    oauth_signature_method="PLAINTEXT",
    oauth_verifier="dsdsdsds",
    oauth_signature="fdfsdfdfdfdfsfffdf"
```

**Authorization Header Parameters:**
- **`OAuth`**: Identifies the type of the authorization header.
- **`realm`**: An identifier known to the resource server, used to decide how to authenticate the OAuth client.
- **`oauth_consumer_key`**: A unique identifier issued to the OAuth client by the resource server.
- **`oauth_signature_method`**: The method used to generate the `oauth_signature` (e.g., `PLAINTEXT`, `HMAC-SHA1`, `RSA-SHA1`).
- **`oauth_signature`**: The signature calculated according to the method defined in `oauth_signature_method`.
- **`oauth_token`**: The temporary-credential identifier returned in the temporary-credential request phase.
- **`oauth_verifier`**: The verification code returned in the resource-owner authorization phase.

After validating the access token request, the resource server sends the following response to the client:

Example:
```http
HTTP/1.1 200 OK
Content-Type: application/x-www-form-urlencoded
oauth_token=dsdsdsdsdweoio998s&oauth_token_secret=ioui789kjhk
```

**Parameters:**
- **`oauth_token`**: An identifier generated by the resource server, used in future requests to identify the `oauth_token_secret`.
- **`oauth_token_secret`**: A shared secret generated by the resource server, used by the client in future requests to generate the `oauth_signature`.

At the end of this phase, the client will have a new `oauth_token` and a new `oauth_token_secret`.

#### Invoking a Secured Business API with OAuth 1.0
At the end of the OAuth token dance, the following tokens should be retained at the OAuth client end:
- **`oauth_consumer_key`**: An identifier generated by the resource server to uniquely identify the client.
- **`oauth_consumer_secret`**: A shared secret generated by the resource server, never sent over the wire.
- **`oauth_token`**: An identifier generated by the resource server at the end of the token-credential request phase.
- **`oauth_token_secret`**: A shared secret generated by the resource server at the end of the token-credential request phase.

Example of an HTTP POST request to access a secured API with OAuth 1.0:

```http
POST /student?name=pavithra HTTP/1.1
Host: server.com
Content-Type: application/x-www-form-urlencoded
Authorization: OAuth realm="simple",
    oauth_consumer_key="dsdsddDdsdsds",
    oauth_token="dsdsdsdsdweoio998s",
    oauth_signature_method="HMAC-SHA1",
    oauth_timestamp="1474343201",
    oauth_nonce="rerwerweJHKjhkdsjhkhj",
    oauth_signature="bYT5CMsGcbgUdFHObYMEfcx6bsw%3D"
```

**Additional Parameters:**
- **`oauth_timestamp`**: A positive integer representing the number of seconds since January 1, 1970, 00:00:00 GMT.
- **`oauth_nonce`**: A randomly generated unique value added to the request to avoid replay attacks.

#### Demystifying `oauth_signature`
The `oauth_signature` is required in two phases: the temporary-credential request phase and the token-credential request phase. It is also required in all client requests to the protected resource or to the secured API. The OAuth specification defines three kinds of signature methods: `PLAINTEXT`, `HMAC-SHA1`, and `RSA-SHA1`.

- **`PLAINTEXT`**: No signature.
- **`HMAC-SHA1`**: Uses a shared key for the signature.
- **`RSA-SHA1`**: Uses an RSA private key for the signature.

**Signature Calculation with the `PLAINTEXT` Method:**

| Phase | `oauth_signature` |
|-------|-------------------|
| Temporary-credential request phase | `consumer_secret&` |
| Token-credential request phase | `consumer_secret&oauth_token_secret` |

For example, if the consumer secret is `Ddedkljlj878dskjds` and the shared token secret is `ekhjkhkhrure`, the `oauth_signature` for the token-credential request phase would be `Ddedkljlj878dskjds&ekhjkhkhrure`.

**Generating the Base String:**

##### Temporary-Credential Request Phase
1. Get the uppercase value of the HTTP request header (e.g., `POST`).
2. Get the value of the scheme and the HTTP host header in lowercase (e.g., `http://server.com`).
3. Get the path and the query components in the request resource URI (e.g., `/oauth/request-token`).
4. Concatenate all OAuth protocol parameters, excluding `oauth_signature`, with `&` (no line breaks).
5. Concatenate the outputs from steps 2 and 3.
6. Concatenate the output from steps 5 and 4 with `&`.
7. URL-encode the output from step 6.
8. Concatenate the output from steps 1 and 7 with `&` to produce the final base string.

##### Token-Credential Request Phase
Follow the same steps as above, but include the `oauth_token` and `oauth_verifier` in the concatenated parameters.

**Building the Signature:**

- **`HMAC-SHA1`**:
  - Temporary-credential request phase: `oauth_signature = HMAC-SHA1(consumer_secret&, base-string)`.
  - Token-credential request phase: `oauth_signature = HMAC-SHA1(consumer_secret&oauth_token_secret, base-string)`.

- **`RSA-SHA1`**:
  - `oauth_signature = RSA-SHA1(RSA private key, base-string)`.

**Generating the Base String in an API Call:**
Follow the same steps as above to build the `oauth_signature` for each API call.