• 
oauth_callback_confirmed: This must be present and set to true. 
It helps the client to confirm that the resource server received the 
oauth_callback sent in the request.
To initiate the temporary-credential request phase, the client must first be registered 
with the resource server and have a consumer key/consumer secret pair. At the end of 
this phase, the client will have an oauth_token and an oauth_token_secret.
 Resource-Owner Authorization Phase
During the resource-owner authorization phase, the client must get the oauth_token 
received in the previous phase authorized by the user or the resource owner. The client 
redirects the user to the resource server with the following HTTP GET request. The 
oauth_token received in the previous phase is added as a query parameter. Once the 
request hits the resource server, the resource server knows the client corresponding to 
the provided token and displays the name of the client to the user on its login page. The 
user must authenticate first and then authorize the token:
GET /authorize_token?oauth_token= bhgdjgdds HTTP/1.1
Host: server.com
APPendix B  OAuTH 1.0
336
After the resource owner’s approval, the resource server redirects the user to the 
oauth_callback URL corresponding to the client:
GET /client_cb?x=1&oauth_token=dsdsdsdd&oauth_verifier=dsdsdsds HTTP/1.1
Host: client.net
Let’s examine the definition of each parameter:
• 
oauth_token: An identifier generated by the resource server. It’s used 
to identify the value of the oauth_verifier in future requests made 
by the client to the resource server. This identifier links the oauth_
verifier to the oauth_consumer_key.
• 
oauth_verifier: A shared verification code generated by the 
resource server. The client will use this in the future requests to 
generate the oauth_signature.
Note if no oauth_callback uRL is registered by the client, the resource server 
displays a verification code to the resource owner. The resource owner must 
take it and provide it to the client manually. The process by which the resource 
owner provides the verification code to the client is outside the scope of the OAuth 
specification.
To initiate the resource-owner authorization phase, the client must have access to 
the oauth_token and the oauth_token_secret. At the end of this phase, the client has a 
new oauth_token and an oauth_verifier.
 Token-Credential Request Phase
During the token-credential request phase, the client makes a direct HTTP POST or a GET 
request to the access token endpoint hosted at the resource server:
POST /access_token HTTP/1.1
Host: server.com
Authorization: OAuth realm="simple",
oauth_consumer_key="dsdsddDdsdsds",
oauth_token="bhgdjgdds",
APPendix B  OAuTH 1.0
337
oauth_signature_method="PLAINTEXT",
oauth_verifier="dsdsdsds",
oauth_signature="fdfsdfdfdfdfsfffdf"
The authorization header in the request is constructed with the following 
parameters:
• 
OAuth: The keyword used to identify the type of the authorization 
header. It must have the value OAuth.
• 
realm: An identifier known to the resource server. Looking at the 
realm value, the resource server can decide how to authenticate the 
OAuth client. The value of realm here serves the same purpose as in 
HTTP Basic authentication.
• 
oauth_consumer_key: A unique identifier issued to the OAuth client 
by the resource server. This key is associated with a secret key that is 
known to both the client and the resource server.
• 
oauth_signature_method: The method used to generate the 
oauth_signature. This can be PLAINTEXT, HMAC-SHA1, or RSA-SHA1. 
PLAINTEXT means no signature, HMAC-SHA1 means a shared key has 
been used for the signature, and RSA-SHA1 means an RSA private key 
has been used for the signature. The OAuth specification doesn’t 
mandate any signature method. The resource server can enforce any 
signature method, based on its requirements.
• 
oauth_signature: The signature, which is calculated according to the 
method defined in oauth_signature_method.
• 
oauth_token: The temporary-credential identifier returned in the 
temporary-credential request phase.
• 
oauth_verifier: The verification code returned in the resource- 
owner authorization phase.
After the resource server validates the access token request, it sends back the 
following response to the client:
HTTP/1.1 200 OK
Content-Type: application/x-www-form-urlencoded
oauth_token=dsdsdsdsdweoio998s&oauth_token_secret=ioui789kjhk
APPendix B  OAuTH 1.0
338
Let’s examine the definition of each parameter:
• 
oauth_token: An identifier generated by the resource server. In future 
requests made by the client, this will be used to identify the value 
of oauth_token_secret to the resource server. This identifier links 
oauth_token_secret to the oauth_consumer_key.
• 
oauth_token_secret: A shared secret generated by the resource 
server. The client will use this in future requests to generate the 
oauth_signature.
To initiate the token-credential request phase, the client must have access to the 
oauth_token from the first phase and the oauth_verifier from the second phase. At 
the end of this phase, the client will have a new oauth_token and a new oauth_token_
secret.
 Invoking a Secured Business API with OAuth 1.0
At the end of the OAuth token dance, the following tokens should be retained at the 
OAuth client end:
• 
oauth_consumer_key: An identifier generated by the resource 
server to uniquely identify the client. The client gets the oauth_
consumer_key at the time of registration with the resource server. The 
registration process is outside the scope of the OAuth specification.
• 
oauth_consumer_secret: A shared secret generated by the resource 
server. The client will get the oauth_consumer_secret at the time 
of registration, with the resource server. The registration process is 
outside the scope of the OAuth specification. The oauth_consumer_
secret is never sent over the wire.
• 
oauth_token: An identifier generated by the resource server at the 
end of the token-credential request phase.
• 
oauth_token_secret: A shared secret generated by the resource 
server at the end of the token-credential request phase.
APPendix B  OAuTH 1.0
339
Following is a sample HTTP request to access a secured API with OAuth 1.0. Here we 
send an HTTP POST to the student API with one argument called name. In addition to 
the previously described parameters, it also has oauth_timestamp and oauth_nonce.  
An API gateway (or any kind of an interceptor) intercepts the request and talks to the 
token issuer to validate the authorization header. If all looks good, the API gateway 
routes the request to the business service (behind the API) and then sends back the 
corresponding response:
POST /student?name=pavithra HTTP/1.1
Host: server.com
Content-Type: application/x-www-form-urlencoded
Authorization: OAuth realm="simple",
oauth_consumer_key="dsdsddDdsdsds ",
oauth_token="dsdsdsdsdweoio998s",
oauth_signature_method="HMAC-SHA1",
oauth_timestamp="1474343201",
oauth_nonce="rerwerweJHKjhkdsjhkhj",
oauth_signature="bYT5CMsGcbgUdFHObYMEfcx6bsw%3D"
Let’s examine the definition of the oauth_timestamp and oauth_nonce parameters:
• 
oauth_timestamp: A positive integer that is the number of seconds 
counted since January 1, 1970, 00:00:00 GMT.
• 
oauth_nonce: A randomly generated unique value added to the 
request by the client. It’s used to avoid replay attacks. The resource 
server must reject any request with a nonce that it has seen before.
 Demystifying oauth_signature
Out of the three phases we discussed in the section “The Token Dance,” oauth_
signature is required in two: the temporary-credential request phase and the token- 
credential request phase. In addition, oauth_signature is required in all client requests 
to the protected resource or to the secured API. The OAuth specification defines three 
kinds of signature methods: PLAINTEXT, HMAC-SHA1, and RSA-SHA1. As explained earlier, 
PLAINTEXT means no signature, HMAC-SHA1 means a shared key has been used for the 
signature, and RSA- SHA1 means an RSA private key has been used for the signature.  
APPendix B  OAuTH 1.0
340
The OAuth specification doesn’t mandate any signature method. The resource server 
can enforce a signature method, based on its requirements. The challenge in each 
signature method is how to generate the base string to sign. Let’s start with the simplest 
case, PLAINTEXT (see Table B-1).
Table B-1. Signature Calculation with the PLAINTEXT Signature Method
Phase
oauth_signature
Temporary-credential request phase
consumer_secret&
Token-credential request phase
consumer_secret&oauth_token_secret
With the PLAINTEXT oauth_signature_method, the oauth_signature is the encoded 
consumer secret followed by &. For example, if the consumer secret associated with the 
corresponding consumer_key is Ddedkljlj878dskjds, the value of oauth_signature 
is Ddedkljlj878dskjds&. In this case, TLS must be used to protect the secret key going 
over the wire. This calculation of oauth_signature with PLAINTEXT is valid only for the 
temporary-credential request phase. For the token-credential request phase, oauth_
signature also includes the shared token secret after the encoded consumer secret. 
For example, if the consumer secret associated with the corresponding consumer_key is 
Ddedkljlj878dskjds and the value of the shared token secret is ekhjkhkhrure, then the 
value of oauth_signature is Ddedkljlj878dskjds&ekhjkhkhrure. The shared token secret 
in this case is the oauth_token_secret returned in the temporary-credential request phase.
For both HMAC-SHA1 and RSA-SHA1 signature methods, first you need to generate a 
base string for signing, which we discuss in the next section.
 Generating the Base String in Temporary-Credential 
Request Phase
Let’s start with the temporary-credential request phase. The following is a sample OAuth 
request generated in this phase:
POST /oauth/request-token HTTP/1.1
Host: server.com
Authorization: OAuth realm="simple",
oauth_consumer_key="dsdsddDdsdsds",
oauth_signature_method="HMAC-SHA1",
APPendix B  OAuTH 1.0
341
oauth_callback="http://client.net/client_cb",
oauth_signature="dsDSdsdsdsdddsdsdsd"
Step 1: Get the uppercase value of the HTTP request header (GET or POST):
POST
Step 2: Get the value of the scheme and the HTTP host header in lowercase. If the 
port has a nondefault value, it needs to be included as well:
http://server.com
Step 3: Get the path and the query components in the request resource URI:
/oauth/request-token
Step 4: Get all the OAuth protocol parameters, excluding oauth_signature, 
concatenated by & (no line breaks):
oauth_consumer_key="dsdsddDdsdsds"&
oauth_signature_method="HMAC-SHA1"&
oauth_callback="http://client.net/client_cb"
Step 5: Concatenate the outputs from steps 2 and 3:
http://server.com/oauth/request-token
Step 6: Concatenate the output from steps 5 and 4 with & (no line breaks):
http://server.com/oauth/access-token&
oauth_consumer_key="dsdsddDdsdsds"&
oauth_signature_method="HMAC-SHA1"&
oauth_callback="http://client.net/client_cb"
Step 7: URL-encode the output from step 6 (no line breaks):
http%3A%2F%2Fserver.com%2Foauth%2F
access-token&%26%20oauth_consumer_key%3D%22dsdsddDdsdsds%22%26
oauth_signature_method%3D%22HMAC-SHA1%22%26
oauth_callback%3D%22http%3A%2F%2Fclient.net%2Fclient_cb%22
APPendix B  OAuTH 1.0
342
Step 8: Concatenate the output from steps 1 and 7 with &. This produces the final 
base string to calculate the oauth_signature (no line breaks):
POST&http%3A%2F%2Fserver.com%2Foauth%2F
access-token&%26%20oauth_consumer_key%3D%22dsdsddDdsdsds%22%26
oauth_signature_method%3D%22HMAC-SHA1%22%26
oauth_callback%3D%22http%3A%2F%2Fclient.net%2Fclient_cb%22
 Generating the Base String in Token Credential  
Request Phase
Now, let’s see how to calculate the base string in the token-credential request phase. The 
following is a sample OAuth request generated in this phase:
POST /access_token HTTP/1.1
Host: server.com
Authorization: OAuth realm="simple",
oauth_consumer_key="dsdsddDdsdsds",
oauth_token="bhgdjgdds",
oauth_signature_method="HMAC-SHA1",
oauth_verifier="dsdsdsds",
oauth_signature="fdfsdfdfdfdfsfffdf"
Step 1: Get the uppercase value of the HTTP request header (GET or POST):
POST
Step 2: Get the value of the scheme and the HTTP host header in lowercase. If the 
port has a nondefault value, it needs to be included as well:
http://server.com
Step 3: Get the path and the query components in the request resource URI:
/oauth/access-token
Step 4: Get all the OAuth protocol parameters, excluding oauth_signature, 
concatenated by & (no line breaks):
oauth_consumer_key="dsdsddDdsdsds"&
oauth_token="bhgdjgdds"&
APPendix B  OAuTH 1.0
343
oauth_signature_method="HMAC-SHA1"&
oauth_verifier="dsdsdsds"
Step 5: Concatenate the output from steps 2 and 3:
http://server.com/oauth/access-token
Step 6: Concatenate the output from steps 5 and 4 with & (no line breaks):
http://server.com/oauth/request-token&
oauth_consumer_key="dsdsddDdsdsds"&
oauth_token="bhgdjgdds"&
oauth_signature_method="HMAC-SHA1"&
oauth_verifier="dsdsdsds"
Step 7: URL-encode the output from step 6 (no line breaks):
http%3A%2F%2Fserver.com%2Foauth%2F
request-token%26oauth_consumer_key%3D%22dsdsddDdsdsds%22%26
oauth_token%3D%22%20bhgdjgdds%22%26
oauth_signature_method%3D%22HMAC-SHA1%22%26
oauth_verifier%3D%22%20dsdsdsds%22%20
Step 8: Concatenate the output from steps 1 and 7 with &. This produces the final 
base string to calculate the oauth_signature (no line breaks):
POST&http%3A%2F%2Fserver.com%2Foauth%2F
request-token%26oauth_consumer_key%3D%22dsdsddDdsdsds%22%26
oauth_token%3D%22%20bhgdjgdds%22%26
oauth_signature_method%3D%22HMAC-SHA1%22%26
oauth_verifier%3D%22%20dsdsdsds%22%20
 Building the Signature
Once you’ve calculated the base string for each phase, the next step is to build the signature 
based on the signature method. For the temporary-credential request phase, if you use 
HMAC-SHA1 as the signature method, the signature is derived in the following manner:
oauth_signature= HMAC-SHA1(key, text)
oauth_signature= HMAC-SHA1(consumer_secret&, base-string)
APPendix B  OAuTH 1.0
344
For the token-credential request phase, the key also includes the shared token 
secret after the consumer secret. For example, if the consumer secret associated with 
the corresponding consumer_key is Ddedkljlj878dskjds and the value of the shared 
token secret is ekhjkhkhrure, then the value of the key is Ddedkljlj878dskjds&ekhjkh
khrure. The shared token secret in this case is the oauth_token_secret returned in the 
temporary-credential request phase:
oauth_signature= HMAC-SHA1(consumer_secret&oauth_token_secret, base- string)
In either phase, if you want to use RSA-SHA1 as the oauth_signature_method, the 
OAuth client must register an RSA public key corresponding to its consumer key, at the 
resource server. For RSA-SHA1, you calculate the signature in the following manner, 
regardless of the phase:
oauth_signature= RSA-SHA1(RSA private key, base-string)
 Generating the Base String in an API Call
In addition to the token dance, you also need to build the oauth_signature in each 