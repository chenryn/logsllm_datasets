else { //unknown
//Unknown
return "unknown";
}
这段代码，找到了几个浏览器独有的对象，能够识别浏览器的大版本。依据这个思
路，还可以找到更多“独特的”浏览器对象。
安全研究者Gareth Heyes曾经找到一种更巧妙的方法，通过很精简的代码，即可识
别出不同的浏览器。
//Firefox detector 2/3 by DoctorDan
FF=/a/[-1]=='a'
//Firefox 3 by me:-
FF3=(function x(){})[-5]=='x'
//Firefox 2 by me:-
FF2=(function x(){})[-6]=='x'
//IE detector I posted previously
IE='\v'=='v'
//Safari detector by me
Saf=/a/.__proto__=='//'
//Chrome by me
Chr=/source/.test((/a/.toString+''))
//Opera by me
Op=/^function \(/.test([].sort)
//IE6 detector using conditionals
try {IE6=@cc_on @_jscript_version 
曾经访问过的
未曾访问过的
浏览器会将点击过的链接示以不同的颜色：
安全研究者Rsnake公布了一个POC，其效果如下：
Rsnake演示的攻击效果
红色标记的，就是用户曾经访问过的网站（即Visited下的两个网站）。
这个POC代码如下：
但是Firefox在2010年3月底决定修补这个问题，因此，未来这种信息泄露的问题可
能在Mozilla浏览器中不会再继续存在了。
3.2.2.6 获取用户的真实IP地址
通过XSS Payload还有办法获取一些客户端的本地IP地址。
很多时候，用户电脑使用了代理服务器，或者在局域网中隐藏在NAT后面。网站看
到的客户端IP地址，是内网的出口IP地址，而并非用户电脑真实的本地IP地址。如何才
能知道用户的本地IP地址呢？
JavaScript本身并没有提供获取本地IP地址的能力，有没有其他办法？一般来说，
XSS攻击需要借助第三方软件来完成。比如，客户端安装了Java环境（JRE），那么
XSS就可以通过调用JavaApplet的接口获取客户端的本地IP地址。
在XSS攻击框架“Attack API”中，就有一个获取本地IP地址的API：
/**
* @cat DOM
* @name AttackAPI.dom.getInternalIP
* @desc get internal IP address
* @return {String} IP address