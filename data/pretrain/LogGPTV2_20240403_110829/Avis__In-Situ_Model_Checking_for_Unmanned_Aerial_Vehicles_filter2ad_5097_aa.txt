# Avis: In-Situ Model Checking for Unmanned Aerial Vehicles

**Authors:**
- Max Taylor
- Haicheng Chen
- Feng Qin
- Christopher Stewart

**Affiliation:**
The Ohio State University

## Abstract
Control firmware in unmanned aerial vehicles (UAVs) relies on sensors to manage flight operations, from takeoff to landing and waypoint navigation. However, sensor failures can occur at any time during a flight, leading to crashes, flyaways, or other unsafe conditions if the control firmware mishandles these failures. In-situ model checking is a technique that systematically fails sensors to identify potential unsafe conditions. The type and timing of sensor failures significantly affect their manifestation, creating a large search space. We propose Avis, an in-situ model checker designed to efficiently uncover UAV sensor failures that lead to unsafe conditions. Avis leverages operating modes, which are labels mapping software execution to corresponding flight operations. By injecting sensor failures during mode transitions, Avis can quickly identify unsafe conditions. We implemented Avis and applied it to ArduPilot and PX4, two widely used control firmware. Avis found unsafe conditions 2.4 times faster than Bayesian Fault Injection, the state-of-the-art approach. Additionally, Avis discovered 10 previously unknown software bugs leading to unsafe conditions and correctly reported all 5 known bugs reinserted into the code.

## 1. Introduction
Unmanned aerial vehicles (UAVs) perform various missions, including hovering, flying to waypoints, and conducting complex aerial operations. Without a human aboard, UAVs can handle dangerous, long, or unprofitable missions for traditional aircraft. For example, UAVs can enter wildfires and war zones, survey crop fields, and assess damage caused by natural disasters, pests, and diseases. Control firmware, the software that reads from sensors, models the aircraft's state, responds to pilot commands, and controls navigation, is crucial for UAV operations. With the global market for UAVs expected to exceed $42B, the reliability of control firmware is increasingly important. Software bugs in this firmware can have serious consequences, such as crashes.

UAVs use a variety of sensors, including inertial measurement units (IMUs), global positioning systems (GPSs), compasses, and barometers. These sensors can fail due to various reasons, such as magnetic field disruptions or power disconnections. Control firmware is designed to handle sensor failures by failing over to redundant sensors, discarding invalid readings, and using multiple methods to model the aircraft's state. Despite these precautions, sensor failures can still cause unsafe flight conditions where the control firmware executes flight operations that crash the UAV or disrupt its mission. Figure 1 illustrates an unsafe condition in ArduPilot where IMU failure during landing led to a crash because the control firmware incorrectly assumed GPS could safely navigate altitude adjustments.

Sensor bugs are segments of control firmware source code that, if fixed, could prevent unsafe flight conditions caused by sensor failures. Our analysis of public GitHub repositories shows that sensor bugs account for 40% of source code patches intended to fix UAV crashes. Given the severity of sensor bug manifestations, more preemptive approaches are needed.

In-situ model checking systematically injects faults during simulated executions to find faults that violate invariant properties. However, applying this technique to UAVs presents unique challenges. First, control firmware accesses sensor readings frequently (10^3–10^4 times per second), and one or multiple types of sensors can fail at any moment, creating a vast failure space. Second, sensor bug manifestations depend on the timing and type of failure. Practical in-situ model checking must balance these concerns. While statistics-driven fault injection seems necessary given the search space, sampling approaches may miss time-sensitive bugs.

This paper introduces Avis, an in-situ model checker for UAVs. Avis exploits the common sentiment among control firmware developers that sensor bugs often stem from failure handling logic tailored to specific operating modes. Avis uses custom workloads to exercise transitions between operating modes and carefully injects failures near these transitions. This approach prioritizes likely bug-revealing injection sites while capturing time-sensitive issues. Compared to Bayesian Fault Injection (BFI), a statistically guided model checker, Avis does not rely on statistical inference and can comprehensively explore fault handling logic across operating modes.

We implemented Avis and applied it to ArduPilot and PX4. Avis found unsafe conditions 2.4 times more efficiently than BFI. When we re-inserted 5 known bugs causing serious unsafe conditions, Avis found all of them, while BFI did not. Avis also uncovered 10 previously unknown software bugs related to IMU and GPS failures, with 2 confirmed by developers.

### Contributions
- A study characterizing the frequency and impact of sensor bugs in widely used open-source control firmware.
- A fault injection approach that exploits operating modes in UAVs for stratified breadth-first search.
- A framework for building UAV workloads that exercise operating modes.
- A prototype of Avis and experimental results on ArduPilot and PX4, demonstrating its efficiency and efficacy in capturing known and new sensor bugs.

## 2. Background
Figure 2 depicts the runtime execution for ArduPilot, a widely used control firmware for UAVs. Created in 2007 by hobbyists, ArduPilot is now used by more than 65 companies in industrial applications. It supports a wide range of aircraft and has a code base exceeding 700K lines with nearly 100 developers contributing. PX4 is another popular, open-source framework for autopilot control firmware, with over 6M lines of code and used in production-grade PixHawk UAVs.

ArduPilot uses multiple parallel threads to read from sensors and manage flight dynamics. Pilots can provide input via remote control or laptop. An operating mode encompasses all code execution associated with a pilot command. ArduPilot supports 25 operating modes, including takeoff, landing, manual piloting, and automated maneuvers. During each iteration of the simulation, an operating mode translates user inputs and sensor signals to actuation in the motor systems. ArduPilot includes models to estimate the aircraft's state, but sensor failures can render these models useless, leading to unsafe conditions.

## 3. Impact of Sensor Bugs on UAV Reliability
Our analysis of public GitHub repositories reveals that sensor bugs represent 40% of source code patches intended to fix UAV crashes. These bugs often lead to serious consequences, such as crashes. However, the large and complex nature of control firmware makes it difficult for developers to preemptively address sensor bugs. Instead, they often wait for users to report manifestations before investigating root causes. Given the severity of sensor bug manifestations, more proactive approaches are necessary.

## 4. Avis Design
Avis consists of three major components: workloads, a fault injection engine, and an invariant monitor. Avis tests a UAV by simulating its behavior under a workload. Workloads issue flight commands to the UAV. The fault injection engine monitors the vehicle's mode transitions and schedules injections. The invariant monitor checks the UAV's simulated physical state to detect unsafe conditions and generates detailed reports to help reproduce and diagnose bugs.

UAV simulation involves executing mostly unmodified UAV source code while simulating hardware. The only modifications are the use of simulated sensor and actuator drivers. The sensor drivers read from the simulator instead of hardware. This setup allows Avis to test the control firmware in a controlled environment.

## 5. Implementation Details
We implemented Avis and applied it to ArduPilot and PX4. Avis found unsafe conditions 2.4 times more efficiently than Bayesian Fault Injection (BFI). When we re-inserted 5 known bugs causing serious unsafe conditions, Avis found all of them, while BFI did not. Avis also uncovered 10 previously unknown software bugs related to IMU and GPS failures, with 2 confirmed by developers.

## 6. Evaluation
We evaluated Avis by comparing it to BFI in terms of efficiency (unsafe conditions found per simulation) and efficacy (bugs uncovered). Avis found unsafe conditions 2.4 times more efficiently than BFI. When we re-inserted 5 known bugs, Avis found all of them, while BFI did not. Avis also uncovered 10 previously unknown software bugs related to IMU and GPS failures, with 2 confirmed by developers.

## 7. Related Work
We discuss related work in §VII, including other fault injection techniques and their limitations.

## 8. Conclusion
In conclusion, Avis is an efficient and effective in-situ model checker for UAVs. It leverages operating modes to systematically inject sensor failures and identify unsafe conditions. Avis outperforms existing approaches like Bayesian Fault Injection and has successfully identified both known and new sensor bugs in widely used control firmware.