title:What Did You Add to My Additive Manufacturing Data?: Steganographic
Attacks on 3D Printing Files
author:Mark Yampolskiy and
Lynne Graves and
Jacob Gatlin and
Anthony Skjellum and
Moti Yung
What Did You Add to My Additive Manufacturing Data?:
Steganographic Attacks on 3D Printing Files
Mark Yampolskiy
Auburn University
USA
Lynne Graves
University of South Alabama
USA
Jacob Gatlin
Auburn University
USA
Anthony Skjellum
University of Tennessee at
Chattanooga
USA
Moti Yung
Google LLC.
Columbia University
USA
ABSTRACT
Additive Manufacturing (AM) adoption is increasing in home and
industrial settings, but information security for this technology is
still immature. Thus far, three security threat categories have been
identified: technical data theft, sabotage, and illegal part manufac-
turing. In this paper, we expand to a new threat category: misuse
of digital design files as a subliminal communication channel. We
identify and explore attacks by which arbitrary information can
be embedded steganographically in the most common digital de-
sign file format, the STL, without distorting the printed object.
Because the technique will not change the manufactured object’s
geometry, it is likely to remain unnoticed and can be exploited for
data transfer. Further, even with knowledge of our methods, defend-
ers cannot distinguish between actual data transfer and random
manipulation of the files. This is the first info-hiding attack on this
system, conducted despite the fact that random changes may spoil
the physical artifact and result in detection.
CCS CONCEPTS
• Applied computing → Computer-aided manufacturing; •
Security and privacy → Cryptography.
KEYWORDS
Information Hiding Attacks, Additive Manufacturing, 3D print-
ing, File Transfers, Encryption, Cryptovirology, Steganographic
channels, Traffic Analysis, Malware.
ACM Reference Format:
Mark Yampolskiy, Lynne Graves, Jacob Gatlin, Anthony Skjellum, and Moti
Yung. 2021. What Did You Add to My Additive Manufacturing Data?:
Steganographic Attacks on 3D Printing Files. In 24th International Sym-
posium on Research in Attacks, Intrusions and Defenses (RAID ’21), Octo-
ber 6–8, 2021, San Sebastian, Spain. ACM, New York, NY, USA, 16 pages.
https://doi.org/10.1145/3471621.3471843
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
RAID ’21, October 6–8, 2021, San Sebastian, Spain
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-9058-3/21/10...$15.00
https://doi.org/10.1145/3471621.3471843
1 INTRODUCTION
Additive Manufacturing (AM), often referred to as 3D Printing, is
a computerized direct digital manufacturing technology in which
three-dimensional objects are built up, layer by layer, based on the
information specified in a design file [34]. Because of the numerous
advantages that this technology brings, over the past 29 years AM
enjoyed an impressive 26.6% average annual growth rate of world-
wide revenues for products and services [64]. Over the last three
years alone, the number of enterprise-class printer manufacturers
has more than doubled [23]. Meanwhile, more than 1200 compa-
nies offer 3D printing as a service [2], allowing flexible on-demand
manufacturing based on customer designs. Additionally, the hob-
byist 3D-printing community is growing rapidly, a trend supported
by a confluence of factors like falling desktop 3D printer prices,
increased automation and quality of 3D-printed objects, as well as
access to a wide variety of design files on the internet.
As a consequence of these developments, the design files used
in 3D printing are becoming increasingly available. These files are
downloaded from a variety of free or paid websites, uploaded to
cloud services offered by printer manufacturers, and/or exchanged
among friends or business partners via e-mail, making them a
common payload in internet traffic. The same files are also routinely
stored on personal or company computers along with the .docx,
.pdf, .jpg, .mp3, and other common file formats.
The information security community is well aware of how easy
it is to embed additional data in pictures, text, or video files. Even
though the embedded covert information may change the underly-
ing data, the introduced distortions are small enough they will be
hard to detect by humans. The common nature of the files provides
malware (Trojan) or other malicious actors an opportunity to “blend
in” secret messages with normal network traffic. Considering the
increased proliferation of digital design files for 3D printing, we
must investigate whether these files can be similarly exploited as a
covert channel for arbitrary information stealing.
The answer, however, is nontrivial. As opposed to images, text,
and video files, 3D-printing design files are interpreted by software
to produce (3D-print) carefully designed physical artifacts. Partic-
ularly with functional parts, the 3D-printed objects must adhere
to tight tolerances. Alterations to design files can have detrimental
effects on their ability to be integrated into a system, or impact the
part’s mechanical properties (known as function) [66]. Less obvious
alterations of the 3D object printing orientation can also degrade
266RAID ’21, October 6–8, 2021, San Sebastian, Spain
Yampolskiy et al.
a part’s function because of the inherent anisotropic properties of
3D printing [67, 73].
Changes to design files have already been exploited by inten-
tional cyber-physical sabotage attacks [7, 56] and in a proposal to
prevent part infringement [15]. In the case of the dr0wned attack [7],
the failure of a sabotaged 3D-printed propeller mid-flight led to
the destruction of the quad-copter UAV on which it was installed1.
Observable impacts like this will draw attention to a covert com-
munication channel, an outcome that a malicious actor normally
would like to avoid.
Therefore, the central question we pose in this work is: How
easy is it, despite the required accuracy for 3D printing, to use the
exchange of 3D-printing files as a channel for arbitrary informa-
tion stealing? Then, if yes, can this information be hidden? (Note
that important trade secrets can reside in the environment of 3D-
printing files, so covert information hiding is very tempting!) In
this paper, we answer this question for STL (STereoLithography)
files, which are the most widely adopted digital design file format
used in AM [18], both in industrial and hobbyist settings.
The remainder of this paper is organized as follows. In Section 2
we introduce considered attack characteristics, including the con-
cepts of steganography and subliminal channels, selected use cases
for the considered attack, and an outline of mechanisms that de-
termine the strength of attack. In Section 3, we provide further
background necessary for the discussion of our proposal. This in-
cludes a brief introduction of the STereoLithography (STL) design
file format, and an overview of the related literature. In Section 4,
we present our proposal for encoding individual bits into an STL
file, then show how it can be scaled up to a raw steganographic
channel that can encode or decode bytes while updating internal
positioning in a carrier STL file. Then, we present how an arbitrary
binary file can be stored in and recovered from a carrier STL file
using the defined functions. In Section 5, we present our proposal
for the strong attack, which constitutes a fully encrypted unidirec-
tional steganographic covert channel. We demonstrate the validity
of the proposed attack using the legally questionable Liberator gun
files in Section 6. Next, in Section 7, we offer further discussion,
such as the implications of the proposed attack on the AM Security
field as a whole, three different contexts of attack distinguishability,
and the robustness of the introduced channel against sanitation
efforts. We conclude, in Section 8, with a brief review and summary
of the major results of this paper.
2 ATTACK CHARACTERISTICS
In this section, we first discuss steganography and subliminal chan-
nels, then consider use cases for our attacks, and then cover the
attack mechanisms.
2.1 Steganography and Subliminal Channels
Steganography is a term of art associated with techniques to hide the
presence of a secret message. With its recorded origins dating back
to 440BC [48], steganography has had numerous implementations.
In the classical, pre-computer age, examples include the insertion
of secret messages in a painting (e.g., in the form of water ripples
1The attack is summarized in a short YouTube video: https://www.youtube.com/watch?
v=zUnSpT6jSys
representing Morse code, or in a handwritten letter, or as the Nth
character of each line or sentence).
In the computer age, despite the rise and pervasive use of cryp-
tography, steganography has found a variety of new forms [48, 51].
The theoretical possibilities of steganography in digital documents
has been extensively studied in the literature [4, 6, 19, 30, 60]. If
an underlying channel contains a source of entropy, i.e., redundant
information that can be modified without disrupting the usability
of the digital data, it can be used for embedding a secret message. A
classical example is the encoding of an arbitrary bit stream in a .bmp
file, where each pixel can be represented through its three RGB (red,
green, blue) components. To encode individual bits of the stream,
the least significant bits of the RGB values can be modified. As the
resulting distortions of color are not perceptible by a human eye,
the encoded data has the potential to remain undetected. Steganog-
raphy can be found in numerous practical applications, such as
digital media watermarking [13, 17, 26, 40] or in circumventing
censorship [21, 33, 62, 63].
Closely related to steganography are subliminal (and covert chan-
nels). Here, the idea is to “piggyback” on the legitimate or legitimate-
looking communication channel between two parties and embed
in it an additional secret message. For example, a .bmp file could be
sent that contains a secret message that was embedded using the
approach outlined above.
In addition to the possibility of message encoding is the question
of its distinguishability. Ideally, the distribution of the encoded
message is close to the distribution of a normal message, making it
impossible to determine whether a hidden message is present or
not.
For a more formal treatment of steganography and information
hiding in media channels see [10, 36]. For kleptographic attacks
and exploitation of channels combined with cryptographic tools
see [69–71].
2.2 Use Cases for Considered Attacks
We consider attacks that attempt unauthorized transmission over
hidden channels, as well as concealment of the associated stolen
or illegal data. While this behavior can be exhibited by all kinds of
attacks, a certain degree of concealment is common to real-world
targeted attacks and attack campaigns [57]. Balancing between risks
and rewards [54], exploiting existing communications channels like
the transfer of design files would allow criminals to significantly
reduce both the risk of and investment in the attack. We offer these
for a few realistic examples.
Information Stealing/Leaking: Malicious insiders remain one
of the biggest security threats for both public and private organi-
zations [29, 59]. They often have access to classified, proprietary,
or otherwise sensitive information that can be of great value to
external actors, and can themselves initiate an attack [8]. Since
internet access is ubiquitous, malicious actors might be tempted to
use it to exfiltrate2 stolen information. However, external network
connections are routinely monitored for suspicious activities and
2Henceforth in this paper we use term exfiltration to indicate an unauthorised data
transfer. It can be conducted either by a malicious actor or by malware. The same
technique can be used to transfer data out of or into a protected environment. To
clearly distinguish the latter case, we will use term infiltration.
267What Did You Add to My Additive Manufacturing Data?
RAID ’21, October 6–8, 2021, San Sebastian, Spain
outgoing communications containing encrypted content can be ex-
plicitly blocked. In this setting, the question faced by the malicious
insider becomes whether the stolen data can be exfiltrated through
legitimate-appearing internet activities.
A similar scenario applies to malware, such as spyware Trojans
that steal information and transmit it to external parties automat-
ically. If such activities are discovered, they can be blocked and
investigated, eventually leading to the discovery and removal of
the malware. To prevent or delay detection, communication has to
appear legitimate and blend in with other network traffic.
Downloading Malicious Content: To obtain access to the desired
information, malicious insiders might need specialized tools, such
as network sniffers or password crackers. However, potentially
malicious software is routinely recognized and blocked by firewalls.
This raises a reverse challenge to the malicious insider: how to
infiltrate the necessary malware while disguising the traffic with a
legitimate purpose.
Malware can be confronted with similar obstacles. In the case
of droppers, malware whose sole purpose is to install additional
malware, this functionality depends on the ability to download ad-
ditional malware from the internet while bypassing firewall checks.
Enabling Reverse Shell to a Command & Control (C&C) Server:
Among the malware that a malicious insider or dropper can install
on a corporate computer is a reverse shell: malware that “calls out”
to an external Command & Control (C&C) Server and provides it
with remote shell access to the compromised computer. It is com-
mon to use reverse shells to browse through files, download and
upload files, and execute arbitrary commands including the instal-
lation of additional programs. On the C&C Server side, either a
malicious actor or automated malware exercises control and com-
municates commands. Obviously, this communication, including
commands, console outputs, and file transfers, needs to avoid de-
tection by firewalls or other sophisticated intrusion detection and
prevention systems (IDS/IPS).
Storing Stolen/Illegal Data on a Computer: Since sensitive infor-
mation might be accessible on an agency or corporate network,
activities like storing such information on a computer connected
to the Internet might be tightly monitored. This poses a challenge
for malicious actors, such as those connected to a compromised
computer via a reverse shell, who need to temporarily store the
stolen data prior to its leaking without raising red flags.
Eventually, malicious actors on the outside would also face a
similar challenge of hiding the presence of stolen and illegally pos-
sessed data. In order to avoid prosecution if incriminating evidence
should be discovered, they might want to conceal the illegally ob-