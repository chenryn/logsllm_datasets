is employed—data written to such buﬀers is parsed and san-
itized at runtime.
Qualiﬁers Q1 for other program expressions are similarly
partitioned into static or dynamic sets—for instance, a string
expression used in a print statement with a dynamically-
qualiﬁed output buﬀer is also dynamically-qualiﬁed in our
type system using the DYNS qualiﬁer. The set S is a static
over-approximation of the set of context transitions that the
string expression can induce. Sanitizer selection can be done
statically for statically-qualiﬁed (such as STATICc1(cid:44)→c2 ) ex-
pressions and these sanitizers can be placed during compila-
tion. For dynamically-qualiﬁed expressions, however, since
the context of the output buﬀer is known only at runtime,
the sanitizer selection is performed by the CSRP approach.
Speciﬁcally, the CSAS engine inserts additional instrumen-
tation for dynamically-qualiﬁed string expressions to keep
the untrusted substrings in the expression separate from
constant substrings. At runtime, when such an expression
is being used in a print, it is parsed at runtime as per
the dynamically-determined start context and the necessary
sanitization primitives are applied to the untrusted sub-
strings. In our evaluation, less than 1% of the expressions
were dynamically-qualiﬁed; a large majority of the cases do
not incur the cost of runtime parsing, enabling our type sys-
tem to be “mostly static”.
Handling Context Ambiguity for Templates. Static
context ambiguity may manifest for template start and end
contexts as well. A template may be invoked in multiple
starting contexts or may be expected to return in multiple
ending contexts.
In such cases, our CSAS engine resolves
the ambiguity purely statically, by cloning templates. For
templates that may start or end in more than one context,
the CSAS engine generates multiple versions of the template
during compilation, each specializing to handle a speciﬁc
pair of start and end contexts.
Inferring Placement of Sanitizers. Our engine can in-
sert sanitizers into code in which developers have manu-
ally applied some sanitizers (chosen from the sanitization
library), without undoing existing sanitization if it is cor-
rect. Our type rules require additional sanitizers to only be
inserted at print statements and at type promotion opera-
tions. Type promotion operations identify points where ex-
pressions need to be converted from UNSAFE-qualiﬁed types
to statically- or dynamically-qualiﬁed types. These type
promotion commands have the form v := (Q)e, where Q
is a qualiﬁed type which are introduced by the CSAS engine
when converting templates into the IR. Note that this design
separates the type inference task from the type safety rules
— type promotions may be added anywhere in the IR by the
type qualiﬁer inference algorithm, as long as the resulting IR
conforms to the type rules after inference.
4.2 Static Type Rules
In this section, we deﬁne a set of type rules which impose
static restrictions S0 - S4 to acheive the 3 properties (CR,
CSAN and NOV) described in Section 2.2.
The type system is subdivided into two main kinds of
typing judgements, one for typing language expressions (Fig-
ure 7) and one for typing language commands (Figure 8). In
our type rules, Γ denotes the type environment that maps
program variables, the output buﬀer (denoted by the symbol
ρ) and template name symbols to qualiﬁers Q.
In a ﬂow-sensitive type system like ours, type qualiﬁer
for variables change from one program location to another.
Therefore, typing judgements for the language commands
(Figure 8) capture the eﬀects of command execution on type
environments and have the form Γ (cid:96) c =⇒ Γ(cid:48). This judge-
ment states that the command c is well-typed under the type
environment Γ and its execution changes the type environ-
ment Γ to Γ(cid:48). The expression typing judgement Γ (cid:96) e : Q is
standard: it states that at the given program location, the
expression e has a type qualiﬁer Q under the environment
Γ. All expressions that are neither statically-qualiﬁed nor
dynamically-qualiﬁed, map to UNSAFE in Γ. The set of de-
clared variables V and a map LF from statement labels to
their enclosing functions are assumed to be pre-computed
and available externally.
Deﬁning Sanitizer Correctness. The soundness of our
type system relies on the correctness of externally provided
sanitizers. To deﬁne sanitizer correctness more precisely, we
template StatAmb($imgLink, $name) {if ($name == “”) then print (“”); fiprint ($imgLink);if ($name == “”) then print (“\” />”);else print (“”); fi; return;}592v ∈ V
{v (cid:55)→ Q} ∈ Γ
Γ (cid:96) v : Q
t-var
αi (cid:54)= string
c ∈ C
Γ (cid:96) const(i : αi) : STATICc(cid:44)→c
t-const
IsP arseV alid(s, c1, c2)
Γ (cid:96) const(s : string) : STATICc1(cid:44)→c2
t-conststr
Γ (cid:96) e1 : STATICc(cid:44)→c
Γ (cid:96) e2 : STATICc(cid:44)→c
Γ (cid:96) (e1 : bool) (cid:12) (e2 : bool) : STATICc(cid:44)→c
c ∈ C
t-bool
Γ (cid:96) e1 : STATICc(cid:44)→c
Γ (cid:96) e2 : STATICc(cid:44)→c
Γ (cid:96) (e1 : int) ⊕ (e2 : int) : STATICc(cid:44)→c
c ∈ C
t-int
Γ (cid:96) e1 : STATICc1(cid:44)→c2
Γ (cid:96) e2 : STATICc2 (cid:44)→c3
Γ (cid:96) (e1 : string) · (e2 : string) : STATICc1(cid:44)→c3
t-strcat-stat
Γ (cid:96) e : UNSAFE
SanM ap(c1 (cid:44)→ c2, f)
c1, c2 ∈ C
Γ (cid:96) San(f, e) : STATICc1(cid:44)→c2
t-san
IsP arseV alid(s, c1, c2)
Γ (cid:96) const(s : string) : DYN{c1(cid:44)→c2}
t-cstrdyn
Γ (cid:96) e1 : DYNS1
Γ (cid:96) e2 : DYNS2
Γ (cid:96) (e1 : string) · (e2 : string) : DYNS1(cid:46)(cid:47)S2
t-strcat-dyn
Γ (cid:96) e : Q
v ∈ V
Γ (cid:96) v := e =⇒ Γ[v (cid:55)→ Q]
t-assign
Figure 7: Type Rules for Expressions.
Γ (cid:96) e : Q
Γ (cid:96) v1 := (Q
Q ≤ Q
(cid:48)
(cid:48))e =⇒ Γ[v1 (cid:55)→ Q
t-prom
(cid:48)]
Γ0 (cid:96) c1 : Γ1
Γ1 (cid:96) S : Γ2
Γ0 (cid:96) c1; S =⇒ Γ2
t-seq
Γ (cid:96) e : STATICc1(cid:44)→c2
Γ (cid:96) ρ : CTXSTATc1
Γ (cid:96) print(e) =⇒ Γ[ρ (cid:55)→ CTXSTATc2 ]
t-print-static-1
Qρ = CTXSTATcρ
Q
ρ(cid:48) = CTXSTATc
ρ(cid:48)
Γ (cid:96) f : (Q1 , Q2 . . . Qk) → [Qρ → Q
(Γ (cid:96) ei : Qi)
cρ , c
ρ(cid:48) ∈ C
ρ(cid:48) ]
i∈{1...k}
^
^
Γ (cid:96) ρ : Qρ
i∈{1...k}
Γ (cid:96) callTemplatef(e1 , e2 , . . . , ek) =⇒ Γ[ρ (cid:55)→ CTXSTATc
ρ(cid:48) ]
Γ (cid:96) e : DYNS1
Γ (cid:96) ρ : CTXDYNS2
|CDom(S1, C) ∩ S2| (cid:54)= 0
Γ (cid:96) print(e) =⇒ Γ[ρ (cid:55)→ CTXDYNCRange(S1,S2)]
t-print-dyn-2
((Qi ≤ STATICci (cid:44)→c
i(cid:48) ) ∧ (ci ∈ C) ∧ (c
i(cid:48) ∈ C))
t-call
Γ (cid:96) ρ : CTXSTATc
Γ (cid:96) f : (Q1, Q2 . . . Qk) → [Qρ → Q
c ∈ C
{(cid:96) (cid:55)→ f} ∈ LF
ρ(cid:48) ]
Γ (cid:96) (cid:96) : return; =⇒ Γ
Q
ρ(cid:48) = CTXSTATc
t-ret-stat
c ∈ C
Q = CTXDYNS
Γ (cid:96) f : (Q1, Q2 . . . Qk) → [Qρ → Q
Q
Γ (cid:96) (cid:96) : return; =⇒ Γ[ρ (cid:55)→ CTXSTATc]
c ∈ S
ρ(cid:48) ]
{(cid:96) (cid:55)→ f} ∈ LF
ρ(cid:48) = CTXSTATc
Γ (cid:96) ρ : Q
|S| = 1
t-ret-dyn
Γ0 (cid:96) S1 : Γ
Γ0 (cid:96) S2 : Γ
Γ0 (cid:96) if(e)thenS1elseS2 =⇒ Γ
t-ifelse
Γ (cid:96) S =⇒ Γ
Γ (cid:96) while(e)S =⇒ Γ
t-while
Figure 8: Type Rules for Commands. The output buﬀer (of base type η) is denoted by the symbol ρ.
reuse the notion of valid syntactic forms, formalized by Su
et. al. [47]. A sanitizer f is correct for a context transition
cs (cid:44)→ ce, if all strings sanitized with f are guaranteed to
parse validly starting in context cs yielding an end context
ce according to our canonical grammar, and if the sentential
forms generated during such a parse are valid syntactic forms
as per the application’s intended security policy [47].
In
other words, sanitized strings can span diﬀerent contexts,
but all the intermediate contexts induceded during parsing
untrusted strings should be syntactically conﬁned to non-
terminals allowed by the application’s policy. We assume
that a relation SanM ap, mapping each possible context-
transition to a matching sanitizer, is available externally.
S0: No Implicit Type Casts. Our type system separates
UNSAFE-qualiﬁed, statically-qualiﬁed and dynamic-qualiﬁed
types.
It does not permit implicit type conversions be-
tween them. Type qualiﬁer conversions are only permitted
through explicit type promotion operations, according to a
promotibility relation ≤ deﬁned in Figure 9.
S ∈ 2C
c ∈ S
CTXSTATc ≤ CTXDYNS
c1, c2 ∈ C
q ≤ q
Figure 9: The promotibility relation ≤ between type qualiﬁers
UNSAFE ≤ STATICc1 (cid:44)→c2
S ∈ 2C×C
UNSAFE ≤ DYNS
Our promotibility relation is diﬀerent from the standard
subtyping relation ((cid:22))—for example, the following subsump-
tion rule applies in standard subtyping, but our promotibil-
ity relation does not adhere to it:
Γ (cid:96) e : Qs
Qs (cid:22) Qt
Γ (cid:96) e : Qt
t-sub
The static type qualiﬁer-based restrictions S1 and S3 de-
ﬁned below together satisfy the no over-sanitization (NOS)
property. Similarly, S2 ensures the context restriction (CR)
property. The S3 and S4 together satisfy the context-sensitivity
(CSAN) property while maintaining strict separation between
dynamically-qualiﬁed and statically-qualiﬁed expressions.
S1: No Sanitization for Constants. The rules T-CONST,
T-CONSTSTR and T-CSTRDYN show that constant string values
acquire the type qualiﬁer without any sanitization. These
values are program constants, so they are implicitly trusted.
S2: Canonical Parsing. The qualiﬁer parameters (denot-
ing the context-transitions) for trusted constant strings are
inferred by parsing them according to the canonical gram-
mar. We assume the availability of such a canonical gram-
mar (assumption 1 in Section 2.3), embodied in a predicate
IsP arseV alid deﬁned below.
Definition 1. IsP arseV alid is a predicate of type string
×C ×C → bool, such that IsP arseV alid(s, c1, c2) evaluates
to true if and only if the data string s parses validly as per
the assumed canonical grammar starting in context c1 yield-
ing a ﬁnal context c2.
S3: Safe String Expression Creation. The rules for
concatenation do not permit strings qualiﬁed as UNSAFE to
be used in concatenations, forcing the type inference engine
to type promote (and hence sanitize) operands before they
can be used in concatenation opertions. The T-STRCAT-STAT
rule ensures that only statically safe strings can be concate-
nated whereas the T-STRCAT-DYN rule constructs dynami-
cally qualiﬁed strings. The latter rule conservatively over-
approximates the result’s dynamic set of context-transitions
that could occur at runtime. For over-approximating sets,
we deﬁne an inner-join S1 (cid:46)(cid:47) S2 as the set of all context tran-
sitions c1 (cid:44)→ c2 such that c1 (cid:44)→ c3 ∈ S1 and c3 (cid:44)→ c2 ∈ S2.
593S4: Context-Sensitive Output. The rules for print com-
mands ensure that the emitted string expression can not be
UNSAFE-qualiﬁed. Further, the type rule T-PRINT-STATIC-1
ensures that the context type qualiﬁer of the emitted string
matches the context of the output buﬀer, when both of them
are statically-qualiﬁed.
Only dynamically-qualiﬁed strings can be emitted to dy-
namically qualiﬁed output buﬀers—a strict separation be-
tween dynamic and static type qualiﬁed expressions is main-
tained. The T-PRINT-DYN-2 type rule capture this case.
This requires a runtime parsing, as described in section 4.3,
to determine the precise context. The static type rules com-
pute the resulting context for the output buﬀer by an over-
approximate set, considering the context-transition sets of
two dynamically-qualiﬁed input operands. To compute the
resulting context set, we deﬁne 2 operations over a context-
transition set S for a dynamically qualiﬁed type DYNS:
CDom(S, E) = {Ci|Ci (cid:44)→ Ce ∈ S, Ce ∈ E}
CRange(S, B) = {Ci|Cs (cid:44)→ Ci ∈ S, Cs ∈ B}
Control ﬂow Commands. Type rules T-IFELSE and T-
WHILE for control ﬂow operations are standard, ensuring that
the type environment Γ resulting at join points is consis-
tent. Whenever static context ambiguity arises at a join
point, the types of the incoming values must be promoted
to dynamically-qualiﬁed type to conform to the type rules.
Our type inference step (as Section 5.1 explains) introduces
these type promotions at join points in the untyped IR, so
that after type inference completes, the well-typed IR ad-
heres to the T-IFELSE and T-WHILE rules.
In our language, templates do not
Calls and Returns.
return values but take in parameters passed by value.
In
addition, templates have side-eﬀects on the global output
buﬀer. For a template f , Γ maps f by name to a type
(Q1, Q2, . . . Qk) → [Qρ → Qρ(cid:48) ], where (Q1, Q2, . . . Qk) de-
notes the expected types of its arguments and Qρ → Qρ(cid:48)
denotes the side-eﬀect of f on the global output buﬀer ρ.
The T-CALL rule imposes several restrictions.
First, it enforces that each formal parameter either has a
statically-qualiﬁed type or is promotible to one (by relation
≤). Second, it ensures that the types of actual parameters
and the corresponding formal parameters match. Finally, it
enforces that each (possibly cloned) template starts and ends
in statically precise contexts, by ensuring that Qρ and Qρ(cid:48)
are statically-qualiﬁed. The output buﬀer (ρ) can become
dynamically qualiﬁed within a template’s body, as shown in
example of Figure 6, but the context of ρ should be precisely
known at the return statement. In the example of Figure 6,
the context of ρ is ambiguous at the join-point of the ﬁrst