DROPTABLEintegertable;
17.8.3.3 FOR_LOOP（integer 变量）语句
语法图
说明：- 变量name会自动定义为integer类型并且只在此循环里存在。变量name
介于lower_bound和upper_bound之间。 - 当使用REVERSE关键字时，lower_bound必须
大于等于upper_bound，否则循环体不会被执行。
17.8.3.4 FOR_LOOP 查询语句
语法图
南大通用数据技术股份有限公司
661
GBase 8s V8.8开发者手册
说明：变量target会自动定义，类型和query的查询结果的类型一致，并且只在此
循环中有效。target的取值就是query的查询结果。
17.8.3.5 FORALL 批量查询语句
语法图
说明：- 变量index会自动定义为integer类型并且只在此循环里存在。index的取
值介于low_bound和upper_bound之间。 - 如果声明了SAVEEXCEPTIONS，则会将循环
体DML执行过程中每次遇到的异常保存在SQL&BULK_EXCEPTIONS中，并在执行结束
后统一抛出一个异常，循环过程中没有异常的执行的结果在当前子事务内不会回滚。
示例
CREATETABLEhdfs_t1(
titleNUMBER(6),
didVARCHAR2(20),
data_periodVARCHAR2(25),
kindVARCHAR2(25),
intervalVARCHAR2(20),
timeDATE,
isModifiedVARCHAR2(10)
);
南大通用数据技术股份有限公司
662
GBase 8s V8.8开发者手册
INSERTINTOhdfs_t1VALUES(8,'Donald','OConnell','DOCONNEL','650.507.9833',
to_date('21-06-1999','dd-mm-yyyy'),'SH_CLERK');
CREATEORREPLACEPROCEDUREproc_forall()
AS
BEGIN
FORALLiIN100..120
updatehdfs_t1settitle=title+100*i;
END;
/
--调用函数
CALLproc_forall();
--查询存储过程调用结果
SELECT*FROMhdfs_t1WHEREtitleBETWEEN100AND120;
--删除存储过程和表
DROPPROCEDUREproc_forall;
DROPTABLEhdfs_t1;
17.8.4 分支语句
语法
分支语句的语法请参见下图。
南大通用数据技术股份有限公司
663
GBase 8s V8.8开发者手册
when_clause子句的语法图参见下图。
参数说明：
 case_expression：变量或表达式。
 when_expression：常量或者条件表达式。
 statement：执行语句。
示例
CREATEORREPLACEPROCEDUREproc_case_branch(pi_resultininteger,pi_returnout
integer)
AS
BEGIN
CASEpi_result
WHEN1THEN
pi_return:=111;
WHEN2THEN
pi_return:=222;
WHEN3THEN
pi_return:=333;
WHEN6THEN
南大通用数据技术股份有限公司
664
GBase 8s V8.8开发者手册
pi_return:=444;
WHEN7THEN
pi_return:=555;
WHEN8THEN
pi_return:=666;
WHEN9THEN
pi_return:=777;
WHEN10THEN
pi_return:=888;
ELSE
pi_return:=999;
ENDCASE;
raiseinfo'pi_return:%',pi_return;
END;
/
CALLproc_case_branch(3,0);
--删除存储过程
DROPPROCEDUREproc_case_branch;
17.8.5 空语句
在PL/SQL程序中，可以用NULL语句来说明“不用做任何事情”，相当于一个占位符，
可以使某些语句变得有意义，提高程序的可读性。
语法
空语句的用法如下：
DECLARE
…
BEGIN
南大通用数据技术股份有限公司
665
GBase 8s V8.8开发者手册
…
IFv_numISNULLTHEN
NULL;-- 不需要处理任何数据。
ENDIF;
END;
/
17.8.6 错误捕获语句
缺省时，当PL/SQL函数执行过程中发生错误时退出函数执行，并且周围的事务也会回
滚。可以用一个带有EXCEPTION子句的BEGIN块捕获错误并且从中恢复。其语法是正常
的BEGIN块语法的一个扩展：
[>]
[DECLARE
declarations]
BEGIN
statements
EXCEPTION
WHENcondition[ORcondition...]THEN
handler_statements
[WHENcondition[ORcondition...]THEN
handler_statements
...]
END;
如果没有发生错误，这种形式的块儿只是简单地执行所有语句，然后转到END之后的
下一个语句。但是如果在执行的语句内部发生了一个错误，则这个语句将会回滚，然后转到
EXCEPTION 列表。寻找匹配错误的第一个条件。若找到匹配，则执行对应的
handler_statements，然后转到END之后的下一个语句。如果没有找到匹配，则会向事务的
外层报告错误，和没有EXCEPTION子句一样。错误码可以捕获同一类的其他错误码。
也就是说该错误可以被一个包围块用EXCEPTION捕获，如果没有包围块，则进行退出
南大通用数据技术股份有限公司
666
GBase 8s V8.8开发者手册
函数处理。
condition的名称可以是SQL标准错误码编号说明的任意值。特殊的条件名OTHERS匹
配除了QUERY_CANCELED之外的所有错误类型。
如果在选中的handler_statements里发生了新错误，则不能被这个EXCEPTION子句捕
获，而是向事务的外层报告错误。一个外层的EXCEPTION子句可以捕获它。
如果一个错误被EXCEPTION捕获，PL/SQL函数的局部变量保持错误发生时的原值，
但是所有该块中想写入数据库中的状态都回滚。
示例：
CREATETABLEmytab(idINT,firstnameVARCHAR(20),lastnameVARCHAR(20));
INSERTINTOmytab(firstname,lastname)VALUES('Tom','Jones');
CREATEFUNCTIONfun_exp()RETURNSINT
AS$$
DECLARE
xINT:=0;
yINT;
BEGIN
UPDATEmytabSETfirstname='Joe'WHERElastname='Jones';
x:=x+1;
y:=x/0;
EXCEPTION
WHENdivision_by_zeroTHEN
RAISENOTICE'caughtdivision_by_zero';
RETURNx;
END;$$
LANGUAGEplpgsql;
南大通用数据技术股份有限公司
667
GBase 8s V8.8开发者手册
callfun_exp();
NOTICE: caughtdivision_by_zero
fun_exp
---------
1
(1row)
select*frommytab;
id|firstname|lastname
----+-----------+----------
|Tom |Jones
(1row)
DROPFUNCTIONfun_exp();
DROPTABLEmytab;
当控制到达给 y 赋值的地方时，会有一个division_by_zero 错误失败。这个错误将被
EXCEPTION子句捕获。而在RETURN语句里返回的数值将是x的增量值。
说明：
进入和退出一个包含EXCEPTION子句的块要比不包含的块开销大的多。因此，不必要
的时候不要使用EXCEPTION。
在下列场景中，无法捕获处理异常，整个存储过程回滚：节点故障、网络故障引起的存
储过程参与节点线程退出以及COPYFROM操作中源数据与目标表的表结构不一致造成的
异常。
示例 ：UPDATE/INSERT异常
这个例子根据使用异常处理器执行恰当的UPDATE或INSERT 。
CREATETABLEdb(aINT,bTEXT);
南大通用数据技术股份有限公司
668
GBase 8s V8.8开发者手册
CREATEFUNCTIONmerge_db(keyINT,dataTEXT)RETURNSVOIDAS
$$
BEGIN
LOOP
--第一次尝试更新key
UPDATEdbSETb=dataWHEREa=key;
IFfoundTHEN
RETURN;
ENDIF;
--不存在，所以尝试插入key，如果其他人同时插入相同的key，我们可能得到唯一key
失败。
BEGIN
INSERTINTOdb(a,b)VALUES(key,data);
RETURN;
EXCEPTIONWHENunique_violationTHEN
--什么也不做，并且循环尝试再次更新。
END;
ENDLOOP;
END;
$$
LANGUAGEplpgsql;
SELECTmerge_db(1,'david');
SELECTmerge_db(1,'dennis');
--删除FUNCTION和TABLE
DROPFUNCTIONmerge_db;
DROPTABLEdb;
南大通用数据技术股份有限公司
669
GBase 8s V8.8开发者手册
17.8.7 GOTO 语句
GOTO语句可以实现从GOTO位置到目标语句的无条件跳转。GOTO语句会改变原本
的执行逻辑，因此应该慎重使用，或者也可以使用EXCEPTION处理特殊场景。当执行GOTO
语句时，目标Label必须是唯一的。
语法
 labeldeclaration::=
 gotostatement::=
示例
gbase=#CREATEORREPLACEPROCEDUREGOTO_test()
AS
DECLARE
v1 int;
BEGIN
v1 :=0;
LOOP
EXITWHENv1>100;
v1:=v1+2;
ifv1>25THEN
GOTOpos1;
ENDIF;
ENDLOOP;
>
v1:=v1+10;
raiseinfo'v1is%.',v1;
南大通用数据技术股份有限公司
670
GBase 8s V8.8开发者手册
END;
/
callGOTO_test();
限制场景
GOTO使用有以下限制场景：
不支持有多个相同的GOTOlabels目标场景，无论是否在同一个block中。
BEGIN
GOTOpos1;
>
SELECT*FROM...
>
UPDATEt1SET...
END;
不支持GOTO跳转到IF语句、CASE语句、LOOP语句中。
BEGIN
GOTOpos1;
IFvalidTHEN
>
SELECT*FROM...
ENDIF;
END;
不支持GOTO语句从一个IF子句跳转到另一个IF子句，或从一个CASE语句的WHEN
子句跳转到另一个WHEN子句。