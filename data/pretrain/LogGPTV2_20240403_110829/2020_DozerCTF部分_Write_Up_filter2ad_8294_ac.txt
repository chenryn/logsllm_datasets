        //printf("after k3: %x,%xn",left,right);
        unsigned long cipherRight = left ^ right;
        unsigned long cipherLeft = right;
        //printf("%x,%xn",cipherLeft,cipherRight);
        return combineHalves(cipherLeft, cipherRight);
    }
    void generateSubkeys(int seed)
    {
        srand(seed);
        int c;
        for (c = 0; c < 6; c++)
            //subkey[c] = (rand() << 16L) | (rand() & 0xFFFFL);
            subkey[c] = statickey[c];
    }
    int numPlain;
    unsigned long long plain0[MAX_CHOSEN_PAIRS];
    unsigned long long cipher0[MAX_CHOSEN_PAIRS];
    unsigned long long plain1[MAX_CHOSEN_PAIRS];
    unsigned long long cipher1[MAX_CHOSEN_PAIRS];
    unsigned long long statsp0[3][6] = { { 334750566828076423 , 14598798383091910896 , 7362627570683058495 , 13061853162603734587 , 1089167770670218094 , 17743978066697931267 } , { 8114919877170383009 , 4550952407898372987 , 7285893453974094070 , 10800961177820396850 , 4729992887711911505 , 12448229247856667657 } , { 7958106831885282721 , 4689555180493185263 , 1587569058779522562 , 18329783110864205218 , 2434120028102900466 , 15842198057420313606 } };
    unsigned long long statsc0[3][6] = { { 17018258111090692558 , 4926176093594960481 , 12958472494695275414 , 296532034877147054 , 1623835293301588483 , 8363277828096518872 } , { 3063858680351852201 , 10646101081212077820 , 15397342153794659053 , 10801501799668663670 , 17229473246650265091 , 8099425474283857864 } , { 15867189407617151753 , 661452670953466009 , 10540986253208519300 , 18255646694794273988 , 5880631140809782311 , 14623112566573913744 } };
    unsigned long long statsp1[3][6] = { { 334750566828043527 , 14598798383091878000 , 7362627570683025855 , 13061853162603701947 , 1089167770670250990 , 17743978066697964163 } , { 8114778589926246433 , 4551093695142509563 , 7285753266241585270 , 10800819890576194994 , 4730134174956113617 , 12448087960612465801 } , { 7813991643775872417 , 4833670368535486703 , 1443453870737221122 , 18185667922821903778 , 2578235216145201906 , 15698082869378012166 } };
    unsigned long long statsc1[3][6] = { { 10093771275142207713 , 7225202440948577749 , 10650264112472712722 , 16511768989482887425 , 3927611061609309492 , 6055244609925753539 } , { 17108331246921735026 , 4814782841167528319 , 17638696549988693696 , 5747466028523721217 , 15490696876033367847 , 17706088208678251576 } , { 10548930562483154223 , 7020273959868597499 , 6725024520067991760 , 12375375273599356543 , 5936183591201277651 , 10399017144689224464 } };
    void undoFinalOperation()
    {
        int c;
        for (c = 0; c < numPlain; c++)
        {
            unsigned long cipherLeft0 = leftHalf(cipher0[c]);
            unsigned long cipherRight0 = rightHalf(cipher0[c]) ^ cipherLeft0;
            unsigned long cipherLeft1 = leftHalf(cipher1[c]);
            unsigned long cipherRight1 = rightHalf(cipher1[c]) ^ cipherLeft1;
            cipher0[c] = combineHalves(cipherLeft0, cipherRight0);
            cipher1[c] = combineHalves(cipherLeft1, cipherRight1);
        }
    }
    unsigned long crackLastRound(unsigned long outdiff)
    {
        printf("  Using output differential of 0x%08xn", outdiff);
        printf("  Cracking...");
        unsigned long fakeK;
        for (fakeK = 0x00000000L; fakeK < 0xFFFFFFFFL; fakeK++)
        {
            int score = 0;
            int c;
            for (c = 0; c < numPlain; c++)
            {
                unsigned long Y0 = leftHalf(cipher0[c]);
                unsigned long Y1 = leftHalf(cipher1[c]);
                unsigned long fakeInput0 = Y0 ^ fakeK;
                unsigned long fakeInput1 = Y1 ^ fakeK;
                unsigned long fakeOut0 = fBox(fakeInput0) ^ rightHalf(cipher0[c]);
                unsigned long fakeOut1 = fBox(fakeInput1) ^ rightHalf(cipher1[c]);
                uint32_t fakeDiff = fakeOut0 ^ fakeOut1;
                if (fakeDiff == outdiff) score++; else break;
            }
            if (score == numPlain)
            {
                printf("%d", score);
                printf("found subkey : 0x%08lxn", fakeK);
                //return fakeK;
            }
        }
        printf("failedn");
        return 0;
    }
    void chosenPlaintext(unsigned long long diff)
    {
        int c = -1;
        if (diff == 0x0000000000008080LL) {
            c = 0;
        }
        else if (diff == 0x0000808000008080LL) {
            c = 1;
        }
        else if (diff == 0x0200000002000000LL) {
            c = 2;
        }
        for (int i = 0; i < numPlain; i++) {
            plain0[i] = statsp0[c][i];
            plain1[i] = statsp1[c][i];
            cipher0[i] = statsc0[c][i];
            cipher1[i] = statsc1[c][i];
        }
    }
    void undoLastRound(unsigned long crackedSubkey)
    {
        int c;
        for (c = 0; c < numPlain; c++)
        {
            unsigned long cipherLeft0 = leftHalf(cipher0[c]);
            unsigned long cipherRight0 = rightHalf(cipher0[c]);
            unsigned long cipherLeft1 = leftHalf(cipher1[c]);
            unsigned long cipherRight1 = rightHalf(cipher1[c]);
            cipherRight0 = cipherLeft0;
            cipherRight1 = cipherLeft1;
            cipherLeft0 = fBox(cipherLeft0 ^ crackedSubkey) ^ rightHalf(cipher0[c]);
            cipherLeft1 = fBox(cipherLeft1 ^ crackedSubkey) ^ rightHalf(cipher1[c]);
            cipher0[c] = combineHalves(cipherLeft0, cipherRight0);
            cipher1[c] = combineHalves(cipherLeft1, cipherRight1);
        }
    }
    void prepForCrackingK0()
    {
        int c;
        for (c = 0; c < numPlain; c++)
        {
            unsigned long cipherLeft0 = leftHalf(cipher0[c]);
            unsigned long cipherRight0 = rightHalf(cipher0[c]);
            unsigned long cipherLeft1 = leftHalf(cipher1[c]);
            unsigned long cipherRight1 = rightHalf(cipher1[c]);
            unsigned long tempLeft0 = cipherLeft0;
            unsigned long tempLeft1 = cipherLeft1;
            cipherLeft0 = cipherRight0;
            cipherLeft1 = cipherRight1;
            cipherRight0 = tempLeft0;
            cipherRight1 = tempLeft1;
            cipher0[c] = combineHalves(cipherLeft0, cipherRight0);
            cipher1[c] = combineHalves(cipherLeft1, cipherRight1);
        }
    }
    int main()
    {
        /*
            generateSubkeys(time(NULL));
            cipher0[0] = encrypt(0x3433323138373635);
            printf("---n");
            cipher1[0] = encrypt(0x3433323138373635^0x8080);
            //cipher1[0] = encrypt(0x3433323138373635^0x808000008080);
            //cipher1[0] = encrypt(0x3433323138373635^0x200000002000000);
            printf("---n");
            printf("%llxn", cipher0[0]) ;
            printf("%llxn", cipher1[0]) ;
            numPlain = 1;
            undoFinalOperation();
            undoLastRound(subkey[3]);
            undoLastRound(subkey[2]);
            undoLastRound(subkey[1]);
            printf("%llxn", cipher0[0]) ;
            printf("%llxn", cipher1[0]) ;
            return 0;
            */
        printf("JK'S FEAL-4 DIFFERENTIAL CRYPTANALYSIS DEMOn");
        printf("-------------------------------------------n");
        printf("n");
        int graphData[20];
        int c;
        generateSubkeys(time(NULL));
        numPlain = 6;
        unsigned long long inputDiff1 = 0x0000000000008080LL;
        unsigned long long inputDiff2 = 0x0000808000008080LL;
        unsigned long long inputDiff3 = 0x0200000002000000LL;
        unsigned long outDiff = 0x02000000L;
        unsigned long fullStartTime = time(NULL);
        //CRACKING ROUND 4
        printf("ROUND 4n");
        chosenPlaintext(inputDiff1);
        undoFinalOperation();
        unsigned long startTime = time(NULL);
        unsigned long crackedSubkey3 = crackLastRound(outDiff);
        //unsigned long crackedSubkey3 = subkey[3];
        //unsigned long crackedSubkey3 = 0x00d13ef9;
        //unsigned long crackedSubkey3 = 0x00d1be79;
        printf("%xn", crackedSubkey3);
        unsigned long endTime = time(NULL);
        printf("  Time to crack round #4 = %i secondsn", (endTime - startTime));
        //CRACKING ROUND 3
        printf("ROUND 3n");
        chosenPlaintext(inputDiff2);
        undoFinalOperation();
        undoLastRound(crackedSubkey3);
        startTime = time(NULL);
        unsigned long crackedSubkey2 = crackLastRound(outDiff);
        //unsigned long crackedSubkey2 = subkey[2];
        //unsigned long crackedSubkey2 = 0x3a9907f0;
        //unsigned long crackedSubkey2 = 0x3a998770;
        printf("%xn", crackedSubkey2);
        endTime = time(NULL);
        printf("  Time to crack round #3 = %i secondsn", (endTime - startTime));
        //CRACKING ROUND 2
        printf("ROUND 2n");
        chosenPlaintext(inputDiff3);
        undoFinalOperation();
        undoLastRound(crackedSubkey3);
        undoLastRound(crackedSubkey2);
        startTime = time(NULL);
        unsigned long crackedSubkey1 = crackLastRound(outDiff);
        //unsigned long crackedSubkey1 = 0x1f052d05;
        //unsigned long crackedSubkey1 = 0x1f05ad85;
        printf("%xn", crackedSubkey1);
        endTime = time(NULL);
        printf("  Time to crack round #2 = %i secondsn", (endTime - startTime));
        //CRACK ROUND 1
        printf("ROUND 1n");
        undoLastRound(crackedSubkey1);
        unsigned long crackedSubkey0 = 0;
        unsigned long crackedSubkey4 = 0;
        unsigned long crackedSubkey5 = 0;
        printf("  Cracking...");
        startTime = time(NULL);
        uint32_t guessK0;
        for (guessK0 = 0; guessK0 < 0xFFFFFFFFL; guessK0++)
        {
            uint32_t guessK4 = 0;
            uint32_t guessK5 = 0;
            int c;
            for (c = 0; c < numPlain; c++)