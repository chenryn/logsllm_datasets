# 零、前言
这本书帮助读者学习、创建、部署和提供 Docker 网络的管理步骤。Docker 是一个 Linux 容器实现，支持创建轻量级的可移植开发和生产质量环境。这些环境可以增量更新。Docker 通过利用包含原则来实现这一点，例如 cgroups 和 Linux 名称空间，以及基于覆盖文件系统的可移植映像。
Docker 提供了网络原语，允许管理员指定不同的容器如何与每个应用联网，连接到它们的每个组件，然后将它们分布在大量服务器上，并确保它们之间的协调，而不管它们运行在哪个主机或虚拟机上。这本书汇集了所有最新的 Docker 网络技术，并提供了设置细节的深入解释。
# 这本书涵盖了什么
[第 1 章](1.html#DB7S1-2d417e3c905d4b6c9e03acfd1355cc86 "Chapter 1. Docker Networking Primer")*Docker Networking Primer*解释了 Docker Networking 的基本组件，这些组件是从耦合简单的 Docker 抽象和强大的网络组件演变而来的，比如 Linux 桥、Open vSwitch 等等。本章还解释了如何使用各种模式创建 Docker 容器。在默认模式下，端口映射通过使用 iptables NAT 规则帮助我们，允许到达主机的流量到达容器。本章稍后将介绍容器的基本链接，并讨论下一代 Docker 网络，即 libnetwork。
[第 2 章](2.html#KVCC1-2d417e3c905d4b6c9e03acfd1355cc86 "Chapter 2. Docker Networking Internals")*Docker 网络内部*，讨论 Docker 的内部网络架构。我们将在 Docker 中了解 IPv4、IPv6 和 DNS 配置。本章稍后将介绍单主机和多主机中容器之间的 Docker 桥和通信。本章还解释了覆盖隧道和在 Docker 网络上实现的不同方法，如 OVS、Flannel 和 Weave。
[第 3 章](3.html#PNV61-2d417e3c905d4b6c9e03acfd1355cc86 "Chapter 3. Building Your First Docker Network")、*构建您的第一个 Docker 网络*，展示了 Docker 容器如何使用不同的网络选项(如 Weave、OVS 和 Flannel)从多个主机进行通信。管道工程使用传统的 Linux 桥，Weave 创建一个虚拟网络，OVS 使用 GRE 隧道技术，Flannel 为每台主机提供一个单独的子网来连接多台主机上的容器。有些实现(如管道工程)是遗留的，将在一段时间后过时，而另一些则设计用于特定的操作系统，如带有 CoreOS 的 Flannel。本章还介绍了 Docker 网络选项的基本比较。
[第 4 章](4.html#UGI02-2d417e3c905d4b6c9e03acfd1355cc86 "Chapter 4. Networking in a Docker Cluster")、*Docker 集群中的联网*使用各种框架深入解释了 Docker 联网，例如本地 Docker Swarm，其中使用 libnetwork 或现成的覆盖网络 Swarm 提供了多主机联网功能。另一方面，Kubernetes 与 Docker 的视角不同，在 Docker 中，每个 pod 都将获得一个唯一的 IP 地址，pod 之间的通信可以在服务的帮助下进行。使用开放式虚拟交换机或 IP 转发高级路由规则，可以增强 Kubernetes 网络，以提供不同子网的主机之间的连接，并将主机暴露给外部世界。在中间层的例子中，我们可以看到 Marathon 被用作部署的容器联网的后端。以中间层的 DCOS 为例，整个部署的机器栈被视为一台机器，以在部署的容器服务之间提供丰富的网络体验。
[第 5 章](5.html#12AK81-2d417e3c905d4b6c9e03acfd1355cc86 "Chapter 5. Security and QoS for Docker Containers")、*Docker 容器的安全性和服务质量*，通过引用内核和 cgroups 名称空间来深入探讨 Docker 安全性。我们还将访问文件系统和各种 Linux 功能的一些方面，容器利用这些方面来提供更多的功能，例如权限容器，但代价是在威胁方面暴露得更多。我们还将看到如何使用代理容器来限制易受攻击的流量，从而在 AWS ECS 中的安全环境中部署容器。我们还将讨论 AppArmor 如何配备丰富的**强制访问控制** ( **MAC** )系统，该系统提供内核增强功能，以便将应用限制在有限的资源集内。利用 Docker 容器的优势有助于我们在安全的环境中部署它们。在最后一节中，我们将快速深入了解 Docker 安全基准以及在生产环境中审核和部署 Docker 时可以遵循的一些重要建议。
[第 6 章](6.html#190861-2d417e3c905d4b6c9e03acfd1355cc86 "Chapter 6. Next Generation Networking Stack for Docker: libnetwork")*Docker 的下一代网络栈:libnetwork* 将探讨 Docker 网络的一些更深层次和概念性方面。其中之一是 libnetworking——Docker 网络模型的未来，随着 Docker 1.9 的发布，它已经初具规模。在解释 libnetworking 概念的同时，我们还将研究 CNM 模型、它的各种对象和组件，以及它的实现代码片段。接下来，我们将研究 CNM 的驱动程序，主要的驱动程序是覆盖驱动程序，详细介绍部署作为游民设置的一部分。我们将研究容器与覆盖网络的独立集成，以及 Docker Swarm 和 Docker Machine。在下一节中，我们将解释 CNI 接口及其可执行插件，并给出一个使用 CNI 插件配置 Docker 网络的教程。在最后一节中，将详细介绍 Calico 项目，该项目提供基于 libnetwork 之外的可扩展网络解决方案，并主要提供与 Docker、Kubernetes、Mesos、裸机和虚拟机的集成。
# 这本书你需要什么
大多数情况下，所有的设置基本上都需要 Ubuntu 14.04(安装在物理机上或作为虚拟机)和 Docker 1.9，这是迄今为止的最新版本。如果需要，在每次设置之前都会提到特定的操作系统和软件需求(开源 Git 项目)。
# 这本书是给谁的
如果你是一名 Linux 管理员，想通过 Docker 学习网络，以确保核心元素和应用的高效管理，那么这本书就是为你准备的。假设具备 LXC/Docker 的基本知识。
# 惯例
您还会发现许多区分不同类型信息的文本样式。以下是这些风格的一些例子和对它们的意义的解释。
文本中的码字、数据库表名、文件夹名、文件名、文件扩展名、路径名、伪 URL、用户输入和 Twitter 句柄如下所示:“您可能会注意到，我们使用了 Unix 命令`rm`来删除`Drush`目录，而不是 DOS `del`命令。”
代码块设置如下:
```
# * Fine Tuning
#
key_buffer = 16M
key_buffer_size = 32M
max_allowed_packet = 16M
thread_stack = 512K
thread_cache_size = 8
max_connections = 300
```
当我们希望将您的注意力吸引到代码块的特定部分时，相关的行或项目以粗体显示:
```
# * Fine Tuning
#
key_buffer = 16M
key_buffer_size = 32M
max_allowed_packet = 16M
thread_stack = 512K
thread_cache_size = 8
max_connections = 300
```
任何命令行输入或输出都编写如下:
```
cd /ProgramData/Propeople
rm -r Drush
git clone --branch master http://git.drupal.org/project/drush.git
```
**新的** **术语**和**重要的** **词语**以粗体显示。你在屏幕上看到的单词，例如在菜单或对话框中，出现在如下文本中:“在**选择** **目的地** **位置**屏幕上，点击**下一步**接受默认目的地。”
### 注
警告或重要提示会出现在这样的框中。
### 类型
提示和技巧是这样出现的。
# 读者反馈
我们随时欢迎读者的反馈。让我们知道你对这本书的看法——你喜欢或不喜欢什么。读者反馈对我们来说很重要，因为它有助于我们开发出你真正能从中获益的标题。
要给我们发送一般反馈，只需发送电子邮件``，并在您的邮件主题中提及书名。
如果你对某个主题有专业知识，并且对写作或投稿感兴趣，请参见我们位于[www.packtpub.com/authors](http://www.packtpub.com/authors)的作者指南。
# 客户支持
现在，您已经自豪地拥有了一本书，我们有许多东西可以帮助您从购买中获得最大收益。
## 下载示例代码
你可以从你在[http://www.packtpub.com](http://www.packtpub.com)的账户下载这本书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
您可以按照以下步骤下载代码文件:
1.  使用您的电子邮件地址和密码登录或注册我们的网站。
2.  将鼠标指针悬停在顶部的 **SUPPORT** 选项卡上。
3.  点击**代码下载&勘误表**。
4.  在**搜索**框中输入图书名称。
5.  选择要下载代码文件的书籍。
6.  从您购买这本书的下拉菜单中选择。
7.  点击**代码下载**。
下载文件后，请确保使用最新版本的解压缩文件夹:
*   视窗系统的 WinRAR / 7-Zip
*   zipeg/izp/un ARX for MAC
*   适用于 Linux 的 7-Zip / PeaZip
## 下载本书的彩色图片
我们还为您提供了一个 PDF 文件，其中包含本书中使用的截图/图表的彩色映像。彩色映像将帮助您更好地理解输出中的变化。您可以从[http://www . packtpub . com/sites/default/files/downloads/learningdockernetworkking _ color images . pdf](http://www.packtpub.com/sites/default/files/downloads/LearningDockerNetworking_ColorImages.pdf)下载此文件。
## 勘误表
尽管我们尽了最大努力来确保我们内容的准确性，但错误还是会发生。如果你在我们的某本书里发现了错误——可能是文本或代码中的错误——如果你能向我们报告，我们将不胜感激。通过这样做，你可以让其他读者免受挫折，并帮助我们改进这本书的后续版本。如果您发现任何勘误表，请访问[http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)，选择您的书籍，点击**勘误表提交表**链接，并输入您的勘误表的详细信息。一旦您的勘误表得到验证，您的提交将被接受，勘误表将上传到我们的网站或添加到该标题勘误表部分下的任何现有勘误表列表中。
要查看之前提交的勘误表，请前往[https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)并在搜索栏中输入图书名称。所需信息将出现在**勘误表**部分。
## 盗版
互联网上版权材料的盗版是所有媒体的一个持续问题。在 Packt，我们非常重视版权和许可证的保护。如果您在互联网上遇到任何形式的我们作品的非法拷贝，请立即向我们提供位置地址或网站名称，以便我们寻求补救。
请通过``联系我们，获取疑似盗版资料的链接。
我们感谢您在保护我们的作者方面的帮助，以及我们为您带来有价值内容的能力。
## 问题
如果您对本书的任何方面有问题，可以在``联系我们，我们将尽最大努力解决问题。