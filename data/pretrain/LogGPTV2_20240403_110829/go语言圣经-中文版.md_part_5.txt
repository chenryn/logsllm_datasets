下面的程序会演示Go语言标准库里的image这个package的用法，我们会用这个包来生成一系
列的bit-mapped图，然后将这些图片编码为一个GIF动画。我们生成的图形名字叫利萨如图形
(Lissajous figures)，这种效果是在1960年代的老电影里出现的一种视觉特效。它们是协振子
在两个纬度上振动所产生的曲线，比如两个sin正弦波分别在x轴和y轴输入会产生的曲线。图
1.1是这样的一个例子：
译注：要看这个程序的结果，需要将标准输出重定向到一个GIF图像文件（使用
./lissajous
命令）。下面是GIF图像动画效果：
> output.gif
这段代码里我们用了一些新的结构，包括const声明，struct结构体类型，复合声明。和我们举
的其它的例子不太一样，这一个例子包含了浮点数运算。这些概念我们只在这里简单地说明
一下，之后的章节会更详细地讲解。
gopl.io/ch1/lissajous
// Lissajous generates GIF animations of random Lissajous figures.
package main
import (
"image"
"image/color"
"image/gif"
"io"
GIF动画 33
gopl
"math"
"math/rand"
"os"
)
var palette = []color.Color{color.White, color.Black}
const (
whiteIndex = 0 // first color in palette
blackIndex = 1 // next color in palette
)
func main() {
// The sequence of images is deterministic unless we seed
// the pseudo-random number generator using the current time.
// Thanks to Randall McPherson for pointing out the omission.
rand.Seed(time.Now().UTC().UnixNano())
lissajous(os.Stdout)
}
func lissajous(out io.Writer) {
const (
cycles = 5 // number of complete x oscillator revolutions
res = 0.001 // angular resolution
size = 100 // image canvas covers [-size..+size]
nframes = 64 // number of animation frames
delay = 8 // delay between frames in 10ms units
)
freq := rand.Float64() * 3.0 // relative frequency of y oscillator
anim := gif.GIF{LoopCount: nframes}
phase := 0.0 // phase difference
for i := 0; i out.gif
练习 1.5： 修改前面的Lissajous程序里的调色板，由黑色改为绿色。我们可以
用 来得到 这个色值，三个十六进制的字符串分
color.RGBA{0xRR, 0xGG, 0xBB, 0xff} #RRGGBB
别代表红、绿、蓝像素。
练习 1.6： 修改Lissajous程序，修改其调色板来生成更丰富的颜色，然后修改SetColorIndex
的第三个参数，看看显示结果吧。
GIF动画 35
gopl
GIF动画 36
gopl
1.5. 获取URL
对于很多现代应用来说，访问互联网上的信息和访问本地文件系统一样重要。Go语言在net这
个强大package的帮助下提供了一系列的package来做这件事情，使用这些包可以更简单地用
网络收发信息，还可以建立更底层的网络连接，编写服务器程序。在这些情景下，Go语言原
生的并发特性（在第八章中会介绍）显得尤其好用。
为了最简单地展示基于HTTP获取信息的方式，下面给出一个示例程序fetch，这个程序将获取
对应的url，并将其源文本打印出来；这个例子的灵感来源于curl工具（译注：unix下的一个用
来发http请求的工具，具体可以man curl）。当然，curl提供的功能更为复杂丰富，这里只编
写最简单的样例。这个样例之后还会多次被用到。
gopl.io/ch1/fetch
// Fetch prints the content found at a URL.
package main
import (
"fmt"
"io/ioutil"
"net/http"
"os"
)
func main() {
for _, url := range os.Args[1:] {
resp, err := http.Get(url)
if err != nil {
fmt.Fprintf(os.Stderr, "fetch: %v\n", err)
os.Exit(1)
}
b, err := ioutil.ReadAll(resp.Body)
resp.Body.Close()
if err != nil {
fmt.Fprintf(os.Stderr, "fetch: reading %s: %v\n", url, err)
os.Exit(1)
}
fmt.Printf("%s", b)
}
}
这个程序从两个package中导入了函数，net/http和io/ioutil包，http.Get函数是创建HTTP请求
的函数，如果获取过程没有出错，那么会在resp这个结构体中得到访问的请求结果。resp的
Body字段包括一个可读的服务器响应流。ioutil.ReadAll函数从response中读取到全部内容；
获取URL 37
gopl
将其结果保存在变量b中。resp.Body.Close关闭resp的Body流，防止资源泄露，Printf函数会
将结果b写出到标准输出流中。
$ go build gopl.io/ch1/fetch
$ ./fetch http://gopl.io
The Go Programming Languagetitle>
...
HTTP请求如果失败了的话，会得到下面这样的结果：
$ ./fetch http://bad.gopl.io
fetch: Get http://bad.gopl.io: dial tcp: lookup bad.gopl.io: no such host
译注：在大天朝的网络环境下很容易重现这种错误，下面是Windows下运行得到的错误信
息：
$ go run main.go http://gopl.io
fetch: Get http://gopl.io: dial tcp: lookup gopl.io: getaddrinfow: No such host is known.
无论哪种失败原因，我们的程序都用了os.Exit函数来终止进程，并且返回一个status错误码，
其值为1。
练习 1.7： 函数调用io.Copy(dst, src)会从src中读取内容，并将读到的结果写入到dst中，使用
这个函数替代掉例子中的ioutil.ReadAll来拷贝响应结构体到os.Stdout，避免申请一个缓冲区
（例子中的b）来存储。记得处理io.Copy返回结果中的错误。
练习 1.8： 修改fetch这个范例，如果输入的url参数没有 前缀的话，为这个url加上该
http://
前缀。你可能会用到strings.HasPrefix这个函数。
练习 1.9： 修改fetch打印出HTTP协议的状态码，可以从resp.Status变量得到该状态码。
获取URL 38
gopl
1.6. 并发获取多个URL
Go语言最有意思并且最新奇的特性就是对并发编程的支持。并发编程是一个大话题，在第八
章和第九章中会专门讲到。这里我们只浅尝辄止地来体验一下Go语言里的goroutine和
channel。
下面的例子fetchall，和前面小节的fetch程序所要做的工作基本一致，fetchall的特别之处在于
它会同时去获取所有的URL，所以这个程序的总执行时间不会超过执行时间最长的那一个任
务，前面的fetch程序执行时间则是所有任务执行时间之和。fetchall程序只会打印获取的内容
大小和经过的时间，不会像之前那样打印获取的内容。
gopl.io/ch1/fetchall
并发获取多个URL 39
gopl
// Fetchall fetches URLs in parallel and reports their times and sizes.
package main
import (
"fmt"
"io"
"io/ioutil"
"net/http"
"os"
"time"
)
func main() {
start := time.Now()
ch := make(chan string)
for _, url := range os.Args[1:] {
go fetch(url, ch) // start a goroutine
}
for range os.Args[1:] {
fmt.Println(<-ch) // receive from channel ch
}
fmt.Printf("%.2fs elapsed\n", time.Since(start).Seconds())
}
func fetch(url string, ch chan<- string) {
start := time.Now()
resp, err := http.Get(url)
if err != nil {
ch <- fmt.Sprint(err) // send to channel ch
return
}
nbytes, err := io.Copy(ioutil.Discard, resp.Body)
resp.Body.Close() // don't leak resources
if err != nil {
ch <- fmt.Sprintf("while reading %s: %v", url, err)
return
}
secs := time.Since(start).Seconds()
ch <- fmt.Sprintf("%.2fs %7d %s", secs, nbytes, url)
}
下面使用fetchall来请求几个地址：
$ go build gopl.io/ch1/fetchall
$ ./fetchall https://golang.org http://gopl.io https://godoc.org
0.14s 6852 https://godoc.org
0.16s 7261 https://golang.org
0.48s 2475 http://gopl.io
0.48s elapsed
并发获取多个URL 40
gopl
goroutine是一种函数的并发执行方式，而channel是用来在goroutine之间进行参数传递。
main函数本身也运行在一个goroutine中，而go function则表示创建一个新的goroutine，并在
这个新的goroutine中执行这个函数。
main函数中用make函数创建了一个传递string类型参数的channel，对每一个命令行参数，我
们都用go这个关键字来创建一个goroutine，并且让函数在这个goroutine异步执行http.Get方
法。这个程序里的io.Copy会把响应的Body内容拷贝到ioutil.Discard输出流中（译注：可以把
这个变量看作一个垃圾桶，可以向里面写一些不需要的数据），因为我们需要这个方法返回