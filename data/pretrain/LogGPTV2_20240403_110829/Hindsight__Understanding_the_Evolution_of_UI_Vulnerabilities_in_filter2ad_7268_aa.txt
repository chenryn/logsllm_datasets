title:Hindsight: Understanding the Evolution of UI Vulnerabilities in
Mobile Browsers
author:Meng Luo and
Oleksii Starov and
Nima Honarmand and
Nick Nikiforakis
Hindsight: Understanding the Evolution of UI Vulnerabilities in
Mobile Browsers
Meng Luo, Oleksii Starov, Nima Honarmand, Nick Nikiforakis
Stony Brook University
{meluo, ostarov, nhonarmand, nick}@cs.stonybrook.edu
ABSTRACT
Much of recent research on mobile security has focused on mali-
cious applications. Although mobile devices have powerful browsers
that are commonly used by users and are vulnerable to at least as
many attacks as their desktop counterparts, mobile web security
has not received the attention that it deserves from the commu-
nity. In particular, there is no longitudinal study that investigates
the evolution of mobile browser vulnerabilities over the diverse
set of browsers that are available out there. In this paper, we un-
dertake the first such study, focusing on UI vulnerabilities among
mobile browsers. We investigate and quantify vulnerabilities to 27
UI-related attacks—compiled from previous work and augmented
with new variations of our own—across 128 browser families and
2,324 individual browser versions spanning a period of more than
5 years. In the process, we collect an extensive dataset of browser
versions, old and new, from multiple sources. We also design and
implement a browser-agnostic testing framework, called Hindsight,
to automatically expose browsers to attacks and evaluate their vul-
nerabilities. We use Hindsight to conduct the tens of thousands
of individual attacks that were needed for this study. We discover
that 98.6% of the tested browsers are vulnerable to at least one of
our attacks and that the average mobile web browser is becoming
less secure with each passing year. Overall, our findings support
the conclusion that mobile web security has been ignored by the
community and must receive more attention.
CCS CONCEPTS
• Security and privacy → Browser security; Software and ap-
plication security; Mobile platform security; Vulnerability
scanners;
KEYWORDS
Mobile browser security; vulnerability testing; user interface; phish-
ing attacks; Hindsight
1 INTRODUCTION
The recent years have seen a steady increase in sales of mobile
devices as even more users purchase smartphones and tablets to
supplement their computing needs. The smartphones’ cleaner UIs,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3133987
in combination with an ever increasing number of apps and con-
stantly decreasing prices, are attracting more and more users who
entrust their devices with sensitive data, such as personal pho-
tographs, work emails, and financial information—making mobile
devices an increasingly popular target for attacks.
Even though the most common form of abuse in smartphones
is that of malicious applications, it is most certainly not the only
possible kind of abuse. One must not forget that smartphones have
powerful browsers and, as such, are susceptible to at least as many
problems as desktop browsers. A user visiting a malicious website
through her mobile browser can be the victim of web application
attacks (e.g., XSS and CSRF), attacks against the browser (e.g., mem-
ory corruption [24] and application logic issues [11]), as well as
attacks against the user herself (e.g., phishing and malvertising).
Especially for phishing and malvertising, prior research has
shown that users of mobile browsers may be more susceptible
to such attacks than users of traditional desktop browsers [2, 3, 15,
27, 30, 32]. The limited screen real-estate of hand-held devices, com-
bined with mobile browsers’ desire to maximize the space allotted
to a webpage means that parts of the browser UI, under certain con-
ditions, disappear. These parts, such as the address bar, are critical
for identifying the true nature of a website and if they are missing,
an attacker can more easily trick users into divulging their personal
and financial information.
A major limitation of the aforementioned research is that the
quantification of which mobile browsers were vulnerable to what
attacks was done once and was done manually. Therefore, the re-
ported findings could only capture the state of vulnerability at the
time when the researchers performed their experiments. The quick
update cycles of modern software, coupled with the fact that the
app stores of modern smartphones house hundreds of different mo-
bile browsers (each advertising a wealth of features, such as tracker
blocking, voice-control, and reduced data consumption) means that
we currently do not know which browsers are vulnerable to what
attacks and how the vulnerability of the mobile browser ecosystem
has evolved over time, i.e., are mobile browsers becoming more or
less vulnerable to specific UI attacks?
Recognizing this gap, in this paper, we collect the attacks against
mobile browsers discussed in prior research and, after expanding
them with novel variations, we distil from them a series of attack
building blocks, i.e., techniques that attackers could use, either
stand-alone or in unison, to perform one or more attacks against
mobile web users.
To test mobile browsers against these building blocks, we design
and implement Hindsight, a dynamic-analysis, browser-agnostic
framework that can automatically expose any given mobile browser
to an attack and assess whether the attack succeeded or failed. Our
framework is able to overcome a series of challenges, such as by-
passing the splash screens of browsers, dealing with idiosyncrasies
of different browsers, and, most importantly, extract information
about a browser’s UI in a browser-agnostic fashion without relying
on browser-specific web drivers (e.g., those used by Selenium) and
without the assistance of the browser itself.
In this paper, we focus on Android and its web browsers, due
to the platform’s popularity, the large number of official and third-
party app stores, and its open-source ecosystem which greatly
faciliates the implementation of a framework like Hindsight. By
crawling Android app stores and third-party websites for current
and past versions of mobile web browsers and filtering out dupli-
cates and those browsers that do not conform to our definition
of a modern web browser, we expose 2,324 APKs belonging to
128 distinct browser families to 27 different attack building blocks.
By launching more than 62K individual attacks and automatically
assessing their success or failure, we are able to quantify the vulner-
ability of modern mobile web browsers and how this vulnerability
has evolved since 2011 (the year of our earliest APK files).
Among others, we find that 98.6% of the evaluated browsers
are vulnerable to at least one attack, with the average browser
being vulnerable to twelve. Depending on the specific browser
evaluated, we find that attackers have typically more than one way
of hiding a browser’s address bar, confusing users about the exact
URL on which they are located, and stealing browser cookies due to
the rendering of mixed content. Contrary to our expectations, we
discover that mobile browsers, even some of the most popular ones,
appear to be becoming more vulnerable as years have passed. We
also quantify the attacks that have the widest applicability across
different browser families, finding attacks that are applicable to
more than 96% of all our evaluated browser versions. Our results
are a clear sign that mobile web security has been ignored by the
community and must receive more attention before attackers start
abusing the many vulnerabilities that they have at their disposal.
Overall, our contributions are the following:
• We systematically analyze related work and compile a list of
mobile browser UI vulnerabilities. We expand that list with
novel attack variations and arrive at 27 building blocks that
expose mobile web browsers to different UI attacks.
• We collect thousands of Android mobile browser APK files
from multiple, often non-cooperative, online sources, cover-
ing 128 different browser families with versions from 2011 to
2016. We devise techniques to date each APK so that we can
perform longitudinal measurements across browser families.
• To analyze the large and diverse set of browser families, we
design and develop an automated, pluggable, and browser-
agnostic framework (called Hindsight) for unsupervised in-
stallation and exposure of mobile browsers to a series of UI
attacks, and determination of the tested browsers’ vulnera-
bility to each evaluated attack. We describe the non-trivial
challenges that we had to overcome to build Hindsight.
• Using our framework and attack building blocks, we auto-
matically expose mobile browsers to more than 62K attack
instances. By analyzing the reports generated by our frame-
work, we paint a picture of how the status of mobile UI web
security has changed over a period of 5 years and identify
trends that demonstrate that the evaluated threats have been
largely ignored and need urgent addressing.
2 ATTACK BUILDING BLOCKS
To evaluate the UI security of mobile browsers, we started by per-
forming a thorough investigation of prior work [2, 3, 6, 15, 16, 30, 32,
38], in search for known attacks. In addition to the attacks that we
discovered, we also reasoned about interactions of mobile browsers
with websites and how browsers could attempt to maximize the
screen real-estate for the rendered websites. Through a process of
trial-and-error we were able to identify novel variations of existing
attacks. Table 1 shows the results of this process in the form of
yes/no questions. We name each of these 27 questions an attack
building block (ABB). For any given browser, if the answer to an
ABB is “yes”, then the browser is vulnerable to that building block.
We chose the term “attack building block” to stress the fact that
these vulnerabilities can be used either stand-alone or combined.
In the next paragraphs, we discuss each class of ABBs and provide
a few characteristic examples.
ABBs #1–6: Event Routing. Event routing attacks abuse the non-
intuitive routing of events across overlapping elements typically
belonging to different origins. Clickjacking is a well-known case of
an event routing attack from the desktop browser world. Mobile
browser event routing attacks have the potential to cause more
damage since users interact with small screens and tap (as opposed
to click) which covers wider regions of a page. In 2012, Amrutkar
et al. [2, 3] showed that some mobile browsers did not always
follow the event-routing policy found in desktop browsers where,
in the case of multiple overlapping elements, the topmost element
receives the click/tap events. The authors showed that, at the time,
the Android stock browser, Nokia Mini-Map and Opera Mini would
trigger the event handlers of elements that were underneath opaque
images. This behavior could be used to, among others, facilitate
click-fraud (where expensive ads are hidden underneath images
that trick the user to interact with them) and non-standard login
CSRF attacks. In our study, ABBs #1–6 test event routing across
different combinations of cross-origin elements.
ABBs #7–19: URL & Address Bar. Similar to desktop browsers,
mobile browsers have to display the URL of the current page in
order to convey a website’s true identity to the user. Since attack-
ers can freely register domains, and create arbitrary subdomains
and filepaths, a browser’s address bar is of critical importance for
defending against spoofing attacks.
Unfortunately there exist ways which websites can abuse to
confuse users or hide a mobile browser’s address bar, by triggering
different parts of a browser’s logic for maximizing the screen real-
estate allotted to webpages. ABBs #7–19 cover various ways which
attackers could use to hide their website’s identity.
For example, mobile browsers have to decide how to show long
URLs that do not “fit” in the limited width of the user’s screen.
ABBs #7–9 quantify whether a mobile browser shows the leftmost
part of a long URL which has many subdomains (e.g. www.paypal.
com.attacker.com), the rightmost part of a URL with a long file-
path (e.g. www.attacker.com/foo/bar/www.paypal.com, and ei-
ther the leftmost or the rightmost parts for a URL with both many
(a) Google Chrome
(b) Mozilla Firefox
(c) Dolphin Browser
(d) APUS Browser Turbo
Figure 1: Examples of vulnerabilities in the latest (bottom row) and an older (top row) version of four popular mobile browsers. The warning
sign indicates behaviors that can be abused for spoofing attacks: (a) rendering URLs with confusing IDN-based domain, (b) truncating long
URLs with many subdomains, (c) hiding the address bar in case of a long page, (d) showing a page’s title instead of its URL.
subdomains as well as a long file-path. Similarly, mobile browsers
have to decide whether they want to give preference to a website’s
title instead of its URL (e.g., showing “Welcome to Facebook” ver-
sus https://www.facebook.com, ABB #12), whether they should
hide the URL bar when a user starts interacting with a page (e.g.,
through scrolling or switching to landscape mode, ABBs #14–16),
whether they should show a previously hidden address bar upon
sensitive interactions (e.g., text input, ABBs #17–19) and whether
they should display IDN domains in their punycode or internation-
alized format (ABB #10). Figure 1 shows four different browsers
that are vulnerable to four different ABBs in these classes.
ABBs #20–27: Security Indicators & Content. With the increased
focus on HTTPS, and the presence of SSL/TLS errors that developers
and users must be able to recognize, security indicators are as impor-
tant as a browser’s address bar. Specifically, a mobile web browser
needs to be able to communicate to users whether the current web-
site is loaded over HTTPS (as opposed to plain HTTP), whether
there is mixed content that could jeopardize some of the guarantees
of HTTPS, and whether the current certificate is signed by a chain
of trustworthy Certificate Authorities, or it is self-signed. Moreover,
other icons that are unrelated to HTTPS, such as a website’s favicon,
must be displayed on a different location on a browser’s address
bar to avoid attackers using padlock-like favicons in combination
with SSL stripping attacks [28].
Prior work has shown that mobile browsers have been ignor-
ing W3C best practices with regard to indicator placement and
different browser families vary wildly in terms of their signage
for denoting SSL protected websites, mixed content warnings, and
Table 1: List of the 27 attack building blocks (ABBs) used to evaluate security of mobile browsers
Class
Event
Routing
URL
Test#
1–6
7–9
10
Address
Bar
Security
Indicators
Content
Prior Work
[3, 6]
Explanation
Do cross-origin, overlapping elements receive events when they are not the
topmost ones? (Different tests for combinations of overlapped images and
buttons, links, forms, and other images)
When presented with a long URL (long subdomain, long filepath, or a combi-
nation of both), does a browser render that URL in a way that could be abused
for spoofing attacks?
When presented with an Internationalized Domain Name (IDN), will a browser
display the IDN format?
[3, 6]
Is the address bar hidden if the top-level frame is navigated by a child frame?
[8]
Does a browser show a page’s title instead of its URL?
Novel
Is the address bar hidden if the visited website has a lot of content?
Novel
Is the address bar hidden when switching the device to “landscape" mode?
[30, 32]
Is the address bar hidden upon manual/automatic page scrolling?
Is the address bar hidden when typing in a textbox and tapping on a button?
[15, 38]
Is the address bar hidden when typing to a fake (e.g., canvas-created) textbox? Novel
Is the favicon placed next to padlock icon?
11
12