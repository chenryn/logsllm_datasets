# Hindsight: Understanding the Evolution of UI Vulnerabilities in Mobile Browsers

## Authors
Meng Luo, Oleksii Starov, Nima Honarmand, Nick Nikiforakis  
Stony Brook University  
{meluo, ostarov, nhonarmand, nick}@cs.stonybrook.edu

## Abstract
Recent research on mobile security has primarily focused on malicious applications. However, mobile devices also have powerful browsers that are frequently used and are vulnerable to a wide range of attacks, similar to their desktop counterparts. Despite this, mobile web security has not received the attention it deserves from the research community. Specifically, there is a lack of longitudinal studies investigating the evolution of mobile browser vulnerabilities across the diverse set of available browsers.

In this paper, we conduct the first such study, focusing on user interface (UI) vulnerabilities in mobile browsers. We investigate and quantify vulnerabilities to 27 UI-related attacks, compiled from previous work and augmented with new variations. Our study covers 128 browser families and 2,324 individual browser versions spanning over five years. To facilitate this, we collect an extensive dataset of browser versions from multiple sources and design and implement Hindsight, a browser-agnostic testing framework. Hindsight automatically exposes browsers to attacks and evaluates their vulnerabilities.

Our findings reveal that 98.6% of the tested browsers are vulnerable to at least one of our attacks, and the average mobile web browser is becoming less secure each year. These results highlight the need for increased attention to mobile web security.

## CCS Concepts
- Security and privacy → Browser security; Software and application security; Mobile platform security; Vulnerability scanners

## Keywords
Mobile browser security; vulnerability testing; user interface; phishing attacks; Hindsight

## 1. Introduction
The recent years have seen a steady increase in the sales of mobile devices as more users purchase smartphones and tablets to supplement their computing needs. The cleaner user interfaces (UIs), combined with an ever-increasing number of apps and decreasing prices, are attracting more users who entrust their devices with sensitive data such as personal photographs, work emails, and financial information. This makes mobile devices an increasingly popular target for attacks.

While the most common form of abuse on smartphones is through malicious applications, it is not the only type of threat. Smartphones have powerful browsers, making them susceptible to many of the same issues as desktop browsers. A user visiting a malicious website through their mobile browser can be the victim of various web application attacks, such as cross-site scripting (XSS) and cross-site request forgery (CSRF), as well as attacks against the browser itself, such as memory corruption and application logic issues. Additionally, users can be targeted directly through phishing and malvertising.

Prior research has shown that mobile browser users may be more susceptible to phishing and malvertising attacks compared to desktop users [2, 3, 15, 27, 30, 32]. The limited screen real-estate of handheld devices, combined with the desire to maximize the space allotted to a webpage, means that critical parts of the browser UI, such as the address bar, can disappear under certain conditions. This makes it easier for attackers to trick users into divulging personal and financial information.

A major limitation of previous research is that the quantification of which mobile browsers were vulnerable to specific attacks was done manually and at a single point in time. Given the rapid update cycles of modern software and the large number of different mobile browsers available, it is currently unknown which browsers are vulnerable to what attacks and how the vulnerability landscape has evolved over time.

To address this gap, we collected and expanded upon the UI-related attacks discussed in prior research, distilling them into a series of attack building blocks. We then designed and implemented Hindsight, a dynamic-analysis, browser-agnostic framework that can automatically expose any given mobile browser to these attacks and assess their success or failure. Hindsight overcomes several challenges, including bypassing splash screens, handling browser idiosyncrasies, and extracting UI information in a browser-agnostic manner without relying on browser-specific web drivers.

In this study, we focus on Android and its web browsers due to the platform's popularity, the large number of official and third-party app stores, and its open-source ecosystem. By crawling Android app stores and third-party websites, we collected 2,324 APKs belonging to 128 distinct browser families. We exposed these browsers to 27 different attack building blocks, launching over 62,000 individual attacks and automatically assessing their success or failure.

Our key findings include:
- 98.6% of the evaluated browsers are vulnerable to at least one attack, with the average browser being vulnerable to twelve.
- Contrary to expectations, mobile browsers, even some of the most popular ones, appear to be becoming more vulnerable over time.
- We identified attacks that are applicable to more than 96% of all evaluated browser versions.

These results clearly indicate that mobile web security has been overlooked by the community and requires urgent attention.

## 2. Attack Building Blocks
To evaluate the UI security of mobile browsers, we conducted a thorough investigation of prior work [2, 3, 6, 15, 16, 30, 32, 38] to identify known attacks. We also reasoned about interactions between mobile browsers and websites to discover novel attack variations. Table 1 summarizes the 27 attack building blocks (ABBs) we identified, each formulated as a yes/no question. If the answer to an ABB is "yes," the browser is vulnerable to that building block.

### 2.1 Event Routing
Event routing attacks exploit the non-intuitive routing of events across overlapping elements, typically belonging to different origins. For example, clickjacking is a well-known event routing attack. In 2012, Amrutkar et al. [2, 3] showed that some mobile browsers did not always follow the event-routing policy found in desktop browsers, allowing attackers to trigger event handlers of elements underneath opaque images. This behavior could facilitate click-fraud and non-standard login CSRF attacks. ABBs #1–6 test event routing across different combinations of cross-origin elements.

### 2.2 URL & Address Bar
Similar to desktop browsers, mobile browsers must display the current page's URL to convey a website's true identity. Attackers can abuse this by hiding the address bar or rendering URLs in a confusing manner. ABBs #7–19 cover various ways attackers can hide or manipulate the address bar.

For instance, mobile browsers must decide how to show long URLs that do not fit the screen width. ABBs #7–9 test whether a browser shows the leftmost part of a long URL with many subdomains, the rightmost part of a URL with a long file path, or either part for a URL with both. Similarly, ABBs #12–19 test whether the browser hides the address bar during user interactions, such as scrolling, switching to landscape mode, or typing in textboxes.

### 2.3 Security Indicators & Content
With the increased focus on HTTPS, security indicators are crucial for communicating the security status of a website. A mobile browser must indicate whether a site is loaded over HTTPS, if there is mixed content, and if the certificate is trustworthy. ABBs #20–27 test the placement and visibility of security indicators, such as the padlock icon, and the handling of mixed content.

Table 1: List of the 27 attack building blocks (ABBs) used to evaluate the security of mobile browsers

| Class | Test # | Explanation |
|-------|--------|-------------|
| Event Routing | 1–6 | Do cross-origin, overlapping elements receive events when they are not the topmost ones? (Different tests for combinations of overlapped images and buttons, links, forms, and other images) |
| URL & Address Bar | 7–9 | When presented with a long URL (long subdomain, long filepath, or a combination of both), does a browser render that URL in a way that could be abused for spoofing attacks? |
| URL & Address Bar | 10 | When presented with an Internationalized Domain Name (IDN), will a browser display the IDN format? |
| URL & Address Bar | 11 | Is the address bar hidden if the top-level frame is navigated by a child frame? |
| URL & Address Bar | 12 | Does a browser show a page’s title instead of its URL? |
| URL & Address Bar | 13 | Is the address bar hidden if the visited website has a lot of content? |
| URL & Address Bar | 14–16 | Is the address bar hidden when switching the device to “landscape" mode? Is the address bar hidden upon manual/automatic page scrolling? |
| URL & Address Bar | 17–19 | Is the address bar hidden when typing in a textbox and tapping on a button? Is the address bar hidden when typing to a fake (e.g., canvas-created) textbox? |
| Security Indicators & Content | 20–27 | Is the favicon placed next to the padlock icon? Other tests for the placement and visibility of security indicators and handling of mixed content. |

This comprehensive approach allows us to systematically evaluate the security of mobile browsers and provide actionable insights for improving mobile web security.