## 前言
我是头回学习到phar
RCE的相关知识，通过这次的SUCTF，通过复现大佬们所说的知识，发现了很多有意思的东西，过来记录一下，同时也总结了一些phar序列化的一些技巧，算是一次整理，大佬们不要见笑。
## 背景知识
### phar文件结构
在php>=5.3的时候，默认开启支持Phar，文件状态问为只读，而且使用phar文件不需要任何配置。php使用phar://伪协议来解析phar文件的内容。
其文件结构包括4个部分：
  * stub
phar 扩展识别的标志 格式为 `xxx`
  * manifest
phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这里即为反序列化漏洞点。
  * contents
压缩文件的内容
  * signature
文件的签名内容
### phar使用方式
如下是一个使用phar的一个例子：
    startBuffering();
        $phar->setStub("");
        $o = new User();
        $o->name = "test";
        $phar->setMetadata($o);
        $phar->addFromString("test.txt", "test");
        $phar->stopBuffering();
    ?>
得到的test.phar 内容如下：
    00000000: 3c3f 7068 7020 5f5f 4841 4c54 5f43 4f4d  ..[..
    00000020: 0001 0000 0011 0000 0001 0000 0000 0025  ...............%
    00000030: 0000 004f 3a34 3a22 5573 6572 223a 313a  ...O:4:"User":1:
    00000040: 7b73 3a34 3a22 6e61 6d65 223b 733a 343a  {s:4:"name";s:4:
    00000050: 2274 6573 7422 3b7d 0800 0000 7465 7374  "test";}....test
    00000060: 2e74 7874 0400 0000 46fc 6e5d 0400 0000  .txt....F.n]....
    00000070: 0c7e 7fd8 b601 0000 0000 0000 7465 7374  .~..........test
    00000080: 9d18 4c48 ba24 6ed6 a810 3690 2aac 034e  ..LH.$n...6.*..N
    00000090: 6aee e818 0200 0000 4742 4d42            j.......GBMB
可以看到，有一部分是序列化之后的内容，就是我们在上一部分所说的`manifest`也就是`meta-data`
### phar序列化原理
使用phra://伪协议读取文件的时候，文件会被解析成phar对象，这个时候，刚才那部分的序列化的信息就会被反序列化，这就是漏洞的原理。
简单的测试一下：还是利用刚才的代码生成的test.phar文件
运行结果显示调用了User类的析构函数。
## 漏洞利用
### 函数扩展
根据以上代码的测试可知，只要phar://协议解析文件的时候，就会造成序列化的问题，类似这样的函数不光有`file_get_contents`还有其他函数；
有大牛曾经总结过，所有文件操作的函数都可以触发这种序列化：
  * `fileatime` / `filectime` / `filemtime`
  * `stat` / `fileinode` / `fileowner` / `filegroup` / `fileperms`
  * `file` / `file_get_contents` / `readfile` / `fopen``
  * `file_exists` / `is_dir` / `is_executable` / `is_file` / `is_link` / `is_readable` / `is_writeable` / `is_writable`
  * `parse_ini_file`
  * `unlink`
  * `copy`
还有大牛深入的分析过这些函数的原理，并且加以扩展：
  * `exif_thumbnail`
  * `exif_imagetype`
  * `imageloadfont`
  * `imagecreatefrom***`
  * `hash_hmac_file`
  * `hash_file`
  * `hash_update_file`
  * `md5_file`
  * `sha1_file`
  * `get_meta_tags`
  * `get_headers`
  * `getimagesize`
  * `getimagesizefromstring`
几乎所有和IO有关的函数都涉及到了
### 利用条件分析
对环境的要求无非就是可以让程序的后端使用上述列出来的函数或者其他函数加载我们上产的phar文件，所以对环境也无非有以下要求：
  * 可以上传我们构造的phar文件
这要求服务器端可以上传，或者自动生成，既然phar的文件标识是
        xxx
我们可以构造xxx 实质成为我们想成为的任何文件，最常见的利用方式就是将其变为gif文件 ，就是把文件上加上"GIF89a"即可，
可是，如果要是要求上传一个真的图片呢：
可以通过这个思路构造一个图片以下是脚本：
        startBuffering();
    $phar->addFromString("test.txt","test");
    $phar->setStub($jpeg_header_size." __HALT_COMPILER(); ?>");
    $o = new TestObject();
    $phar->setMetadata($o);
    $phar->stopBuffering();
上如，可以生成一张正常的图片来绕过`getimagesize`的检测
  * 魔术方法可以调用
这个没什么好说的，跟普通的序列化利用方法差不多，需要找到自己可以执行的代码。
  * 有IO操作
简单来讲就是可以使用phar://协议读取文件
如果不能phar不能出现在开始，网上有绕过的姿势：
        $z = 'compress.bzip2://phar:///home/sx/test.phar/test.txt';
## 例题分析
例题就是前一段时间的SUCTF的Upload labs 2
### 环境搭建
源码在这里：
    https://github.com/team-su/SUCTF-2019/tree/master/Web/Upload%20Labs%202
直接
    docker-compose build
    docker-compose up
然后直接访问
这总搭建环境的事，建议直接在vps上搞，不图别的，就因为网速贼快。。。。
### 题目分析
题目直接是代码审计
给出了源码