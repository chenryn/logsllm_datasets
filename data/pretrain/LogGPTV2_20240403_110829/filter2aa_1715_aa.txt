MouseJack: Injecting Keystrokes 
into Wireless Mice
Marc Newlin | PI:EMAIL | @marcnewlin
Marc Newlin
Security Researcher @ Bastille Networks
((Mouse|Key)Jack|KeySniffer)
●
Wireless mice and keyboards
○
16 vendors 
○
proprietary protocols (non-Bluetooth)
○
4 families of transceivers
●
16 vulnerabilities 
○
keystroke sniffing
○
keystroke injection
○
many are unpatchable 
Types of vulnerabilities
●
Keystroke Injection
○
Unencrypted, targeting mice
○
Unencrypted, targeting keyboards
○
Encrypted, targeting keyboards
●
Keystroke Sniffing
○
Unencrypted keyboards
●
Forced Pairing
○
Logitech Unifying dongles
○
Keyboard disguised as mouse
●
Malicious macro programming
○
Delayed keystroke injection
●
Denial of service
○
Crash USB dongle firmware
ShhhMouse
Turns out everybody makes vulnerable devices...
Prior Research
Thorsten Schroeder and Max Moser (2010)
●
“Practical Exploitation of Modern Wireless Devices” (KeyKeriki) 
●
Research into XOR encrypted Microsoft wireless keyboards
Travis Goodspeed (2011)
●
“Promiscuity is the nRF24L01+’s Duty”
●
Research into nRF24L pseudo-promiscuous mode functionality 
Samy Kamkar (2015)
●
KeySweeper
●
Microsoft XOR encrypted wireless keyboard sniffer 
How do mice and keyboards work?
Peripherals send user input to dongle
Dongle sends user input to computer
An attacker can talk to your dongle...
or eavesdrop on your unencrypted keyboard
Background and Motivation
"Since the displacements of a mouse 
would not give any useful information 
to a hacker, the mouse reports are 
not encrypted."
- Logitech (2009)
Initial Logitech mouse research
●
USRP B210 SDR
●
Logitech M510 mouse
●
GNU Radio decoder
●
Good for passive RX
●
USB and CPU latency make 
two way communications 
tricky
Burning Man to the rescue! (duh)
NES controller internals
●
Arduino Nano
●
DC boost converter
●
nRF24L01+
●
vibration motor
●
WS2812B LED
Logitech mouse hijacking NES controller
“Village Adventure”
by Marc Newlin
IoT Village
a Logitech mouse clicker
did not like the hax
NES Controller v2 (now with more things!)
NES controller v2 internals
●
Teensy 3.1
●
5x nRF24L01+ radios
●
1x WS2812B RGB LED
●
500mAh LiPo battery
●
microSD card reader
●
OLED display
OSK attack @ ToorCon
●
Windows 8.1/10
●
Deterministically 
launch split OSK
●
Keys are at known 
offsets from screen 
corners, assuming 
default DPI
●
Slow, very slow
Discovering that first vulnerability
●
Logitech Unifying keyboards
●
Unencrypted keystroke injection
●
Is it really that easy? 
I’ll take one of each, please...
Research 
Process
Gather OSINT and implement SDR decoder
●
FCC test reports
○
Frequencies 
○
Modulation (sometimes)
●
RFIC documentation
○
Physical layer configuration
○
Packet formats
●
The Google
○
“How hack mice?”
○
“Why keyboard not encrypt?”
●
SDR decoder
○
GNU Radio
○
USRP B210
○
2.4GHz ISM band 
○
500kHz, 1MHz, 2MHz GFSK
Build out a protocol model
1.
Generate some ARFz
a.
Move the mouse, click some buttons
b.
Type on the keyboard
2.
What data is sent over the air, and when? 
a.
Infer payload structures
b.
Observe protocol behavior (channel hopping, ACKs, crypto, etc) 
Look for low hanging fruit
●
Wireless mice
○
All tested mice are unencrypted
○
Does it transmit keystrokes? 
○
Does it send raw HID data? 
●
Wireless keyboards
○
Is the keyboard unencrypted? 
○
Is it replay vulnerable? 
Fuzzing (poke it and see what breaks)
●
usbmon / wireshark
○
USB sniffing to see what the dongle sends to the host computer
●
xinput / magic sysrq
○
Disable xinput processing of target keyboards and mice
○
Disable magic sysrq to avoid those pesky unintended hard reboots 
●
fuzzer
○
NES controller, and later custom nRF24LU1+ firmware 
Nordic Semiconductor nRF24L
Nordic Semiconductor nRF24L Family
●
2.4GHz GFSK transceivers 
●
250kbps, 1Mbps, 2Mbps data rates
●
0-32 byte payloads, 8 or 16 bit CRC
●
Vendor defined mouse/keyboard protocols
Transceiver
8051 MCU
128-bit AES
USB
Memory
nRF24LE1
Yes
Yes
No
Flash
nRF24LE1 OTP
Yes
Yes
No
OTP   (no firmware updates)
nRF24LU1+
Yes
Yes
Yes
Flash
nRF24LU1+ OTP
Yes
Yes
Yes
OTP   (no firmware updates)
nRF24L Enhanced Shockburst
●
MAC Layer Functionality
○
Automatic ACKs 
○
Automatic retransmit
Common nRF24L Configuration
●
“Standardized” properties
○
2 Mbps data rate 
○
5 byte address length
○
2 byte CRC
○
Automatic ACKs
○
Automatic retransmit
●
Vendor specific properties
○
RF channels 
○
Payload lengths
Logitech Unifying
Logitech Unifying
●
Universal pairing
○
Any mouse or keyboard can pair 
with any dongle
●
Firmware update support
○
Dongles support firmware updates
○
Most mice/keyboards do not 
●
Transceivers
○
nRF24LU1+ / nRF24LE1 (most common)
○
TI-CC2544 / TI-CC2543 (higher end)
○
All OTA compatible
●
Encryption
○
Mice are unencrypted
○
Keyboard multimedia keys are 
unencrypted
○
Regular keyboard keys are 
encrypted with 128-bit AES
○
Key generation during pairing
●
Some Dell products are really 
Unifying
○
Dell KM714
○
Likely others
Logitech Unifying Base Packet Format
●
5, 10, and 22 byte payloads
●
1 byte payload checksum
Logitech Unifying Addressing
●
Lowest octet is device ID
○
Defaults to 07 from the factory
●
Device ID increments when 
you pair a new device
○
Re-pairing a device doesn’t 
change its ID
●
Device ID 00 is reserved for 
the dongle
Logitech Unifying Payload Addressing
RF Address
Payload
Addressing Mode
11:22:33:44:07 (Dongle Address)
00:XX:XX:XX:XX
Transmit to the address of a 
paired mouse and ignore the 
device index field
11:22:33:44:00 (Mouse Address)
07:XX:XX:XX:XX
Transmit payload to the dongle 
address and use the device 
index field
ACK Payloads (Dongle to Peripheral Cmds)
Logitech Unifying ACK Payload Example
[16.922]  9D:65:CB:58:4D  0040006E52                                      // keepalive, 110ms interval
[16.923]  9D:65:CB:58:4D                                                  // ACK 
[17.015]  9D:65:CB:58:4D  0040006E52                                      // keepalive, 110ms interval
[17.015]  9D:65:CB:58:4D                                                  // ACK 
[17.108]  9D:65:CB:58:4D  0040006E52                                      // keepalive, 110ms interval
[17.108]  9D:65:CB:58:4D                                                  // ACK 
[17.201]  9D:65:CB:58:4D  0040006E52                                      // keepalive, 110ms interval
[17.201]  9D:65:CB:58:4D                                                  // ACK 