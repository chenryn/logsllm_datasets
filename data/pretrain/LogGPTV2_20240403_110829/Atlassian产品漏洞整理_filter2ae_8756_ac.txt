> and from version 8.0.0 before version 8.0.4, and from version 8.1.0 before
> version 8.1.1 allows remote attackers to access files in the Jira webroot
> under the META-INF directory via a lax path access check.
CNNVD描述：
> Atlassian Jira
> 7.13.4之前版本、8.0.4之前版本和8.1.1之前版本中的CachingResourceDownloadRewriteRule类存在安全漏洞。远程攻击者可利用该漏洞访问Jira
> webroot中的文件。
相应插件下载：
其实在lib目录下有。
`UrlRewriteFilter`
> It is a very powerful tool just like Apache’s mod_rewrite.
bug bounty作者描述漏洞细节：
> the application takes input from the user, and uses it to build a file path
> to which the user is forwarded. Since the user controls a part of that path,
> they may be able to direct themselves to sensitive files, like /META-INF/*,
> application code, or configuration files, which may contain passwords.
只是把用户提供的url在服务端重写了一下，只能访问一些META-INF目录下的配置文件，不能访问jsp源码。  
参考：
**Demo**
然而并不能访问`WEB-INF`目录下的文件。
这个漏洞危害较低，看看就好。
confluence之前爆过这个urlrewrite.xml的任意配置文件读取漏洞：
不过应该后来一起被修复了。
有人提供了一份[源码](https://github.com/moink635/mysource/blob/master/jira-project/jira-components/jira-core/src/main/java/com/atlassian/jira/plugin/webresource/CachingResourceDownloadRewriteRule.java)，从注释里看，这里就是为了防止路径穿越的。
###  [CVE-2019-8444]存储型XSS
影响版本：version 
###  [CVE-2018-13404]VerifyPopServerConnection功能SSRF
需要管理员权限才能触发。
这个功能是为了验证邮件服务器的连接的开放性，但是没有对可访问的IP和端口进行限制。这里`/secure/admin/VerifySmtpServerConnection!add.jspa`接收了`serverName`和`port`参数，服务端可以向用户指定的`serverName`和`port`发起TCP请求，导致了SSRF。
参考了一下Jira的开发文档，知道了一般url后缀对应的是do某方法，然后url前面的是对应的Java的类，所以可以在  
`atlassian-jira-software-7.13.0-standalone/atlassian-jira/WEB-INF/atlassian-bundled-plugins/jira-mail-plugin-10.0.13.jar!/com/atlassian/jira/plugins/mail/webwork/VerifySmtpServerConnection#doAdd`  
下断点。
最终在`atlassian-jira-software-7.13.0-standalone/atlassian-jira/WEB-INF/atlassian-bundled-plugins/base-hipchat-integration-plugin-7.10.3.jar!/javax/mail/Service#connect`  
调用
    connected = this.protocolConnect(host, port, user, password);
完成TCP请求。
参考：
###  [CVE-2019-11581]未授权服务端模板注入漏洞
这个漏洞是Jira爆出的影响力较大的漏洞，是未授权RCE。但是由于这个出漏洞的功能并不是Jira默认开启的，所以影响有限。  
详情参考：
###  [CVE-2019-8451]未授权SSRF漏洞
在漏洞的利用方面主要是利用了Jira在检查用户提供的url时可以通过`@`符进行绕过。在调试方面的困难点在于漏洞的触发需要加上特殊请求头`X-Atlassian-Token: no-check`。
详情参考：
还有一个早前的比较著名的SSRF漏洞，一些bug hunters用这个漏洞攻击AWS获取其meta敏感信息。
###  [CVE-2017-9506]Atlassian OAuth插件的SSRF漏洞
影响范围：
Atlassian OAuth插件1.3.0 
调试：
根据文章中的描述，漏洞点在：`IconUriServlet`。
从jar包中找字符串：
    grep -irn "iconuri" `find .|grep .jar`
然后定位到`atlassian-jira-6.4.14-standalone/atlassian-jira/WEB-INF/atlassian-bundled-plugins/atlassian-oauth-service-provider-plugin-1.9.8.jar!/com/atlassian/oauth/serviceprovider/internal/servlet/user/IconUriServlet.class的doGet()`  
下断点。
可以看到，这里接收了`consumerUri`参数之后，直接对该url发起了请求。
参考：
## Confluence
####  Confluence相关背景知识
背景知识主要内容翻译自官方文档。
#####  Confluence的Home目录以及重要目录说明
  * `bin/setenv.bat` 或者`bin/setenv.sh`文件：  
可用来编辑一些`CATALINA_OPTS`变量、内存设置、gc变量等系统属性。
  * `confluence/WEB-INF/classes/confluence-init.properties`：  
在这里指定confluence的home目录。
Confluence的Home目录是Confluence存储其配置信息、搜索索引和附件的目录。 “Home目录”也叫“数据目录”。
其他文件及目录的介绍：
  * `confluence.cfg.xml`: 包含confluence的各种属性。  
  * `attachments/`: confluence上的所有附件都存在这里。如果想要更改，可以编辑`confluence.cfg.xml`文件的这个属性`attachments.dir`
  * `backups/`: 每日自动备份（或手动备份）的内容会存放在这里，文件名大概是：`daily-backup-YYYY_MM_DD.zip`这个样子。想要更改这个位置，可以编辑`confluence.cfg.xml`的这个属性`daily.backup.dir`。
  * `bundled-plugins/`: 每次confluence重启的时候，都会重新从数据库中读取。所以， **删除这个目录下的文件并不能卸载这个插件！**
  * `database/`:主要是用于存储h2数据库文件。 如果使用外部数据库，比如mysql，就不会用到这个目录。  
  * `index/`: 应用程序大量使用Confluence索引进行内容搜索和最近更新的列表，这对于正在运行的Confluence实例至关重要。 如果此目录中的数据丢失或损坏，可以通过从Confluence中运行完整重新索引来恢复它。 此过程可能需要很长时间，具体取决于Confluence数据库存储的数据量。  
  * `journal/`: [暂时不太清楚]
  * `logs/`: confluence的应用日志。
  * `plugin-cache/`: Confluence所有的插件都存放在数据库中，但为了能快速访问插件JARs中的类，于是把插件缓存到了这个目录下。当系统安装或者卸载插件的时候会更新这个目录。每次confluence重启的时候，都会重新从数据库中读取。所以， **删除这个目录下的文件并不能卸载这个插件！**  
  * `temp/`: 用于一些运行时的功能，比如exporting, importing, file upload and indexing。此目录中的文件是临时文件，可在Confluence关闭时被安全地删除。 Confluence中的daily job会删除不再需要的文件。也可以在`confluence.cfg.xml`文件中定义不同的temp目录，然后在`webwork.multipart.saveDir`属性中设置新的值
  * `thumbnails/`: 存放图片文件的缩略图。
  * `shared-home/`: 某些功能的缓存文件，比如Office文件以及PDF预览也放在这个目录下。也用于迁移到Data Center,。
所有其他的数据，包括页面的内容，都是存放在数据库中的。
**如何更改Home目录**
当Confluence启动的时候，会去`confluence-init.properties`文件中寻找Home目录的位置。想要更改Home目录，需要编辑`confluence-init.properties`文件的`confluence.home`属性。
**License所在目录**
Confluence的License写在其Home目录（也叫confluecne安装目录）的这个文件里
    confluence.cfg.xml
到时候更新这里就行了。
当试用Confluence的时候，默认会使用内嵌的H2 Database
参考：
是以一个home目录下的`database/h2db.mv.db`文件形式存在。
###  Confluence历史漏洞
**[CVE-2019-3396]未授权RCE**
Confluence的漏洞最早引起国内安全研究者的较大关注应该是那次Confluence的未授权RCE `CVE-2019-3396`。
这个功能“小工具连接器”是Confluence自带的。在对某些链接的预览功能的请求中存在一个隐藏参数`_template`，攻击者可插入payload造成文件读取，某些版本可以加载指定的任意模板造成代码执行。
深入的分析可以参考Lucifaer大佬的博文：
**[CVE-2019-3398]路径穿越漏洞**
搭建Confluence漏洞环境的过程中发现还是比较方便的，界面风格也比较喜欢，于是我熟悉了它家产品的环境搭建流程，申请license的过程中注册了Atlassian的账号，没想到一两个星期之后的一个晚上凌晨1点，我刚准备睡觉，睡前看了一眼我的Gmail，发现Atlassian给我发了一封邮件通知说Confluence有一个严重漏洞`CVE-2019-3398`的安全公告：
于是连夜起来用前几天刚搭好还热乎的环境调试到第二天早上终于把PoC调试出来了。
这个漏洞的触发和payload插入是分开了。需要先通过上传附件的功能将webshell的内容和希望上传到的地方（通过路径穿越）设置好，然后再通过“下载全部附件”的功能把webshell复制到预先设置好的路径下，加载webshell执行任意命令。由于附件文件是存在于Confluence的Home目录下，上传webshell成功的前提是需要知道Confluence的自带Tomcat路径和Confluence的Home路径之间的相对关系，这样才能准确地通过`../`把webshell复制到Tomcat路径下被加载。
详情参考：
**[CVE-2019-3394]敏感信息泄露漏洞**
Confluence有一个”导出到Word”的功能。而导出的文件内容是基于当前被导出的文档内容的。而这个文档中可以包含文字也可以包含图片。当包含图片时，这个图片的路径可以由用户通过路径穿越指定，导致了这个漏洞的产生。（其实这个导出的文件并不是标准的doc格式，只是微软的Office刚好可以打开而已，如果是用其他客户端可能出错打不开。）  
这个漏洞跟CVE-2019-3398有两点类似。第一点，都是需要两次请求才能完成漏洞利用。都是需要先设置好payload，然后再通过下载操作或者导出操作触发漏洞。第二点是payload都是通过路径穿越指定的。
详情参考：
**[CVE-2019-3395]WebDAV插件未授权SSRF漏洞**
用一句话描述就是，当向受影响的Confluence请求`/webdav`开头的url（这个功能是WebDAV插件提供的）时，用户可以指定任意Host请求头（如果Confluence在其与用户之间没有使用Nginx做反向代理验证这个Host头），然后Confluence会向这个Host发起请求，并将这个请求的响应返回给客户端。
详情参考：
以上就是今年Confluence爆出来的重要漏洞了，如果再往前追溯，还可以找到之前的这个信息泄露漏洞。
**[CVE-2017-7415]未授权信息泄露（低版本）**
这个漏洞源于未对REST接口的页面diff功能做权限校验，匿名用户即可访问。  
exploit：  
影响范围：
6.0.0  Atlassian Confluence 6.0.7之前的6.x版本中存在安全漏洞。远程攻击者可利用该漏洞绕过身份验证，读取任意日志或页面。
直接一个请求：
    /rest/tinymce/1/content//draft/diff
可访问任意博客/Pages页面。
比如：
这个页面：
本来需要登录才能访问
而如果通过这个url去访问：
可以直接访问到
漏洞调试