(write)  the  stored  bits,  we  need  to  perform  a  sequence  of 
consecutive  shift  and read (write) operations.  A  shift  is  the 
injection of current, shown in Fig. 2(b), so as to place the next 
bit in racetrack memory under the read/write port.  
Suppose  we  want  to  read  bit (cid:1854)(cid:2869) and  currently  bit (cid:1854)(cid:2868)  is 
and (cid:1854)(cid:2869) is placed under the read/write port as in Fig. 2(c). If the 
domain that  contains (cid:1854)(cid:2869) and (cid:1854)(cid:2870) is wrongly  positioned  under 
deletion error since (cid:1854)(cid:2869) is skipped (i.e., a bit is deleted). On the 
positioned  under  the  read/write  port.  Ideally,  we  inject  the 
correct amount of current to perform a single shift operation 
the read/write port as in Fig. 2(d). We refer to this error as a 
injected  current  is  larger  than  expected,  then  we  skip  the 
other hand, if the injected current is smaller than expected, the 
port's position does not change and we might read the same 
bit twice. We refer to this error as an insertion error (i.e., an 
extra bit is inserted).  
We should emphasize that, regardless of whether a shift 
error  occurs,  the  memory  controller  always  provides  the 
desired number of bits, say n. A shift error just affects which 
n bits are provided. For instance, if a deletion happens as in 
Fig.  2(d),  then  we receive  the  first (cid:1866)=5 bits  excluding (cid:1854)(cid:2869), 
which are (cid:1854)(cid:2870), (cid:1854)(cid:2871), (cid:1854)(cid:2872), (cid:1854)(cid:2873), (cid:1854)(cid:2874). 
We observe that a single deletion (or insertion) can cause 
as  many  as  n  bit  errors,  which  greatly  complicates  error 
coding, as we show later.  
III.  ERROR CODING FOR RACETRACK 
Coding for racetrack is different than for typical memory 
technologies  because  of  its  bit-serial  nature  (which  affects 
performance)  and  its  susceptibility  to  shift  errors  (which 
makes many standard codes ineffective). 
We  now  discuss  two  broad  approaches  to  coding  for 
racetrack—vertical  (across  tracks)  and  horizontal  (within  a 
track)—and show why commonly used coding techniques do 
not work.  
3
1
next bit
 0
 1
 1
 0
 0
 1
 0
 0
 1
 0
 0
 0  1
(cid:1855)= 1 0 1 0 1 0 1 0
1
1
 1
 0
 1
 0
 1
 0
 1
 0
 0
 1
 0
 1
 0
 1
 0
(cid:1855)′= 0 0 1 0 1 0 1 0
8
=
(cid:1829)
To  clarify  the  explanation,  we  use  the  well-known 
Hamming code as a running example. Hamming codes add 
parity  bits  to  datawords  to  form  codewords,  and  they  are 
parameterized  by  the  bit  lengths  of  the  datawords  and 
codewords.  With  no  loss  of  generality,  we  assume  a 
Hamming(8,4)  code  that  encodes  4-bit  datawords  as  8-bit 
codewords. The code provides SECDED protection. 
A.  Vertical Coding 
Ideally, for performance, we would employ a vertical code 
that uses domains across multiple tracks to store a codeword, 
as illustrated in Fig. 3. We would use one bit from each of C 
different tracks to store the C bits of the codeword. With such 
a code, we could read all C bits in parallel with a single shift 
and read operation on each track.  
In Fig. 3(a) we illustrate an 8-bit codeword c =10101010 
from the Hamming (8,4) code striped vertically across C = 8 
tracks. Fig. 3(b) shows the state of these 8 tracks after a single 
deletion in the first track changes c to c΄= 00101010.  
 Only  one  bit  position  is  affected  and  thus  a  SECDED 
Hamming  code  like  Hamming(8,4) can  correctly  recover c. 
However, the code cannot fix the still-erroneous position of 
the domains on that track with respect to the read/write port. 
Note  that,  because  the  code  cannot  differentiate  between 
deletions  and  insertions,  the  codeword  bits  that  are  striped 
across tracks cannot be correctly aligned. Once the position of 
the  domains  becomes  incorrect  with  respect  to  the  port,  it 
remains  incorrect,  which  can  lead  to  further  errors  on  that 
track. Worse, a subsequent error on another track can now lead 
to  a  multiple-error  scenario  that  cannot  be  corrected  by  a 
SECDED code. Thus, a shift error on one track can easily lead 
to a situation in which the data on all 8 tracks are lost. 
We are unaware of any existing coding scheme that would 
overcome  the  problem  we  have  just  described.  We  do  not 
claim that such a code is impossible, but to our knowledge, it 
has not yet been invented. 
(b)
Fig. 3. Hamming code – vertical implementation 
(a)
 1
next bit
(cid:1829)=8
 1
 1  0
 1
 1
 0
 0
 0
(cid:1855)= 1 0 1 0 1 0 1 0
 1
 1
 1
 0
 1
 0
 0
(cid:1855)= 0 1 0 1 0 1 0 1
(a)
(b)
0
Fig. 4. Hamming code – horizontal implementation 
B.  Horizontal Coding 
to 
store 
below. 
Given that vertical coding is not possible, we are left with 
horizontal coding, in which each C-bit codeword is written on 
the domains of a single track, as illustrated in Fig. 4. The main 
drawback of horizontal coding is that we need to perform C 
read and C shift operations to read all the domains (bits) of a 
single codeword. That means that latency depends on C. 
that  we  want 
shift errors, we use an example.3  
To explain why standard codes do not suffice for handling 
Our Hamming(8,4) code has a generate matrix G shown 
codeword c and then written to the track as shown in Fig. 4(a). 
(cid:1833)=(cid:3430)1 0 0
0 0 1 0 0 1
0 1 1 110 111
0 1 0
0 1 0
0 0 0 1 1 1 1 0(cid:3434) 
(cid:1855)=(cid:1856)∗(cid:1833)=[1 0 1 0 1 0 1 0] 
(cid:1855)′=[ 0 1 0 1 0 1 0 1] 
(cid:1855)(cid:4593)=(cid:1856)(cid:4593)∗(cid:1833)=[0 1 0 1 0 1 0 1 ] 
(cid:1856)′=[0 1 0 1] 
the  dataword  
(cid:1856)=[1 0 1 0] on a track. The dataword is first encoded to the 
the state of the track after the deletion error converts c into (cid:1855)′.  
We  observe  that (cid:1855)′ differs  from  c  in  every  bit  position, 
Nevertheless, it is instructive to see the resulting dataword (cid:1856)′ 
We observe that (cid:1856)′ differs from the correct dataword d in 
  Assume that a single deletion happens during the first shift 
operation while we are trying to read c. In Fig. 4(b) we present 
which  overwhelms  the  capability  of  a  SECDED  code. 
that is produced by our code: 
Assume 
every  bit  position,  despite  experiencing  only  a  single  shift 
error. Through this example it is easy to see that, even if we 
had used stronger codes (e.g., DECTED), we still could not 
address shift errors. Additionally, even if we could detect and 
correct the bit-value errors, the position of the read/write port 
with respect to the domains would still be wrong. Thus, any 
future read/shift operations would suffer additional bit-value 
errors.  
C.  Conclusion 
Based on our observations thus far, we have the following 
three goals for GreenFlag: 
(cid:120)  GreenFlag must be a horizontal code. 
3 HiFi [12] also illustrates how typical  codes fail to tolerate shift 
errors. We provide this explanation here for completeness. 
(cid:120)  GreenFlag cannot be a typical code, like Hamming (or 
Reed-Solomon, CRC, etc.). 
(cid:120)  GreenFlag should be compatible with 3D racetrack and 
its limitation of one read/write port per track. 
IV.  VARSHAMOV-TENENGOLTS CODES 
GreenFlag  coding  is  based  on  Varshamov-Tenengolts 
(VT) codes [14], which are part of a family of graph-based 
codes. VT codes are constituents of communication systems 
where deletions are common, but we are unaware of any prior 
use  in  computer  systems.  We  note  that  graph-based  codes 
have  been  proposed 
in 
communication systems [17]. 
A.  Graph Codes 
to  correct  deletion  errors 
To  label  different  binary  strings,  we  use  different  boldface 
resulting binary strings should not be identical. If two binary 
to store different values in racetrack memory, we need to be 
able to distinguish them even after a single deletion. In other 
refer to them as conflicting; if they cannot be confused with a 
single deletion, we refer to them as non-conflicting. Consider 
the following set of binary strings. 
To  explain  VT  codes,  we  first  present  graph  codes  in 
general,  their  key  idea,  and  a  simple  example.  We  then 
formally define VT codes.  
We denote binary strings with boldface letter (e.g., (cid:2206)), and 
bits in these strings are denoted by lower case letters (e.g., (cid:1876)(cid:2869)). 
letters, e.g., (cid:2206) and (cid:2207). 
Key idea: Consider two binary strings (cid:2206) = (cid:1876)(cid:2869),(cid:1876)(cid:2870),…,(cid:1876)(cid:3041) and 
(cid:2207) = (cid:1877)(cid:2869),(cid:1877)(cid:2870),…,(cid:1877)(cid:3041). In order to be able to use these two strings 
words, if (cid:1876)(cid:3036) and (cid:1877)(cid:3037) are deleted for (cid:1861),(cid:1862) ∈{1,2,…,(cid:1866)}, then the 
strings (cid:2206) and (cid:2207) can  be  confused  with  a  single  deletion,  we 
(cid:3422) 1
0
0
1
00000 00011 01110
10101 11000 11111
↓(cid:2185)(cid:2782) (cid:3426) 
↓(cid:2185)(cid:2777)
↓(cid:2185)(cid:2780)
↓(cid:2185)(cid:2779)
Let (cid:1830)(cid:2185)(cid:2192) denote the set of all strings of length 4 that result from 
a single deletion in (cid:1855)(cid:3037). In this example, (cid:1830)(cid:2185)(cid:2777)={0000} while 
(cid:1830)(cid:2185)(cid:2780)={0101,1101,1001,1011,1010}. Thus, if we read out 
“0101” we know that it refers to codeword (cid:2185)(cid:2780)=10101. 
Formal definition: Consider all 2(cid:3041) binary strings of length (cid:1866). 
We create a conflict graph (cid:1840)=((cid:1848),(cid:1831)), where (cid:1848) is the node 
set and (cid:1831)⊆(cid:1848)×(cid:1848) is the edge set. Each node in this graph 
corresponds to a unique binary string of length (cid:1866) (|(cid:1848)|=2(cid:3041)). 
0,1,2,…,2(cid:3041)−1 and we let node (cid:1861) correspond to the binary 
expansion (of length (cid:1866)) of (cid:1861) that we denote by (cid:2184)(cid:2191). 
Now, ((cid:1861),(cid:1862)) ∈(cid:1831) if  and  only  if (cid:2184)(cid:2191) and (cid:2184)(cid:2192) are  conflicting. 
Fig. 5 depicts a conflict graph (cid:1840) for (cid:1866)=3. In this graph, a set 
the  maximum  number of  strings  of  length (cid:1866) corresponds  to 
of non-conflicting strings corresponds to an independent set; 
These six strings/codewords are pairwise non-conflicting. 
the  nodes  with  numbers 
For  simplicity,  we 
0
↓(cid:2185)(cid:2778)
0
↓(cid:2185)(cid:2781)
the  size  of  the  maximum  independent  set.  This  problem  is 
label 
4
7
5
1
3
2
0
6
4
Fig. 5. Conflict graph N for n=3 
well-studied  in  graph  theory. For a  given (cid:1866),  we  denote  the 
maximum independent set by (cid:1835)(cid:3041). We use the binary strings 
corresponding to the nodes in the maximum independent set 
as our codewords. We note that the maximum independent set 
of a graph is not necessarily unique. For the graph in Fig. 5, 
the  maximum  independent  set  is  of  size  two  and  includes 
nodes 0 and 7.  
Although we have demonstrated only how a graph code 
works  for  a  deletion,  the  explanation  for  insertions  is 
analogous, and a graph code that can tolerate a single deletion 
can also tolerate a single insertion. 
There  are  two  major  challenges with  using  graph codes 
that we will address when we present GreenFlag in Section V. 
First, encoding and decoding require the use of look-up tables, 
and  those  tables  can  have  significant  space  and  latency 
overheads. Second, if decoding reveals a shift error, we can 
only  correct  it  if  we  know  whether  it  was  a  deletion  or  an 
insertion.  That  problem  has  not  arisen  for  communication 
systems that consider only deletion or insertion errors but not 
a mixture of both [18, 19, 20, 21, 22, 23, 24]. 
B.  Varshamov-Tenengolts Codes 
We  have already  shown  that it is possible  to  use  graph 
codes to tolerate shift errors, but there are two challenges that 
must  be  overcome.  One  of  those  challenges—requiring 
lookup tables for encoding and decoding, which does not scale 
to  long  codes—has  been  addressed  by  a  special  family  of 
graph codes called Varshamov-Tenengolts (VT) codes.  
  VT codes impose an additional constraint on the graph-
based  codes  in  order  to  enable  faster  and  more  efficient 
encoding and decoding.  
Formal definition: a VT(n) code consists of all binary strings 
(cid:2185)=((cid:1855)(cid:2869),(cid:1855)(cid:2870),…,(cid:1855)(cid:3041)) that satisfy: 
ni=1 mod n+1≡
                                  ∑ ici
00                 Equation 1 
n
where the sum is evaluated as an ordinary rational integer. We 
refer to Equation 1 as the checksum. 
The  encoding  and  decoding  algorithms  of  VT  codes 
depend  on  their  construction  (i.e.,  how  parity  bits  are 
generated  and  at  which  positions  they  appear  in  the 
codeword). There are several ways to construct VT codes, and 
in  Section  V  we  provide  a  novel  construction  method  that 
allows for efficient encoding and decoding. 
Detecting  a  shift  error  with  a  VT  code  is  as  simple  as 
calculating the checksum. If the checksum is zero, then there 
was no shift error. Otherwise a shift error occurred.  
While error detection is simple, error correction is more 