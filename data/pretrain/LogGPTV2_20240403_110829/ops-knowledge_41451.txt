User: How to leverage Docker containerization to deploy applications? Please provide a working Docker Compose example.
Assistant: Steps for Docker containerized application deployment: 1. Prepare Dockerfile Create a Dockerfile in the root directory of the application, and define the image and configuration information required for the application to run in the file. For example, for a Flask program written in Python, the Dockerfile could look like this: ``` FROM python:3.7-alpine RUN apk add --no-cache gcc musl-dev linux-headers WORKDIR /app COPY requirements.txt . RUN pip install --no-cache-dir -r requirements.txt COPY . . CMD ["python", "app.py"] ``` 2. Create a Docker image Run the following command to create a Docker image: ``` docker build -t my-flask-app . ``` Among them, the -t parameter specifies the image name as my-flask-app. 3. Create a Docker Compose file Create a docker-compose.yml file to define the application service and container configuration information. For example, here is a Docker Compose example running a Flask application: ``` version: "3.7" services: web: image: my-flask-app ports: - "5000:5000" ``` This file defines a service web, which uses the my-flask-app image and maps port 5000 of the container to port 5000 of the host. 4. Run Docker Compose Run the following command to start the application: ``` docker-compose up ``` This command will start the web service and output the log information of the application on the console. 5. Access the application Enter http://localhost:5000 in the browser to access the application deployed in the Docker container. The above is an example of a simple Docker containerized deployment application, which can be configured and modified according to specific application requirements.