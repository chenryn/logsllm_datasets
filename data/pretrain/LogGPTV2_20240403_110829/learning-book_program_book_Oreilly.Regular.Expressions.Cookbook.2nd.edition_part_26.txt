3.13 Find a Match Within Another Match | 183
---
## Page 200
The solution that uses rwo regular expressions doesn’t even begin to look for numbers
until it has found the section boundaries, which it does in linear time.
The XRegExp library for JavaScript has a special matchChain() method that is specifi-
cally designed to get the matches of one regex within the matches of another regex.
This method takes an array of regexes as its second parameter. You can add as many
regexes to the array as you want. You can find the matches of a regex within the matches
of another regex, within the matches of other regexes, as many levels deep as you want.
This recipe only uses two regexes, so our array only needs rwo elements. If you want
the next regex to search within the text matched by a paricular capturing group of a
regex, add that regex as an object to the array. The object should have a regex property
with the regular expression, and a backref property with the name or number of the
a backref property, then the retumed array will contain the matches of that capruring
pue xa8a1 e qm 1oafqo ue se Keare aq u xa8au ise| au Agoads no. j1 dnou8 Buunudes
group in the final regex.
See Also
This recipe uses techniques introduced by three earlier recipes. Recipe 3.8 shows code
to determine the position and length of the match. Recipe 3.10 shows code to get a list
of all the matches a regex can find in a string. Recipe 3.11 shows code to iterate over
all the matches a regex can find in a string.
3.14ReplaceAll Matches
Problem
You want to replace all matches of the regular expression cbefore> with the replacement
text (after),
Solution
C#
You can use the static call when you process only a small number of strings with the
same regular expression:
(xae, axoga, utxssaqns]aetday*xadag = susnsax utxs
If the regex is provided by the end user, you should use the static call with full exception
handling:
string resultString = null;
try{
resultString = Regex.Replace(subjectString, "before, "after*);
}catch (ArgumentNullException ex)(
// Cannot pass null as the regular expression, subject string,
184 | Chapter 3: Programming with RegularExpressions
---
## Page 201
// or replacement text
}catch (ArgumentException ex){
// Syntax error in the regular expression
Construct a Regex object if you want to use the same regular expression with a large
number of strings:
Regex regexObj = new Regex(“before");
(xe,xss)edaoxax = sx x
If the regex is provided by the end user, you should use the Regex object with full
exception handling:
string resultString = null;
try{
Regex regex0bj = new Regex("before*);
try{
resultString = regex0bj.Replace(subjectString, “after");
}catch (ArgumentNullException ex){
// Cannot pass null as the subject string or replacenent text
} catch (ArgumentException ex) {
{
// Syntax error in the regular expression
VB.NET
You can use the static call when you process only a small number of strings with the
same regular expression:
Dim ResultString = Regex,Replace(SubjectString, "before”, "after*)
If the regex is provided by the end user, you should use the static call with full exception
handling:
Dim ResultString As String = Nothing
ResultString = Regex.Replace(SubjectString, "before”, "after*)
Catch ex As ArgunentNullException
'Cannot pass null as the regular expression, subject string,
‘or replacement text
Catch ex As ArgunentException
Syntax error 1n the regular expression
End Try
ael e uia uoissaudxa 1eqnau aues au asn oi suem no. j! 1oa(qo xaag t 1onsuo
number of strings:
Dim RegexObj As New Regex("before*)
3.14 Replace AlIMatches | 185
---
## Page 202
If the regex is provided by the end user, you should use the Regex object with full
exception handling:
Dim ResultString As String = Nothing
11
Din RegexObj As New Regex(*before*)
Try
(x, saaadagxy = ssg
Catch ex As ArgumentNullException
‘Cannot pass null as the subject string or replacement text
End Try
Catch ex As ArgunentException
End Txy
'Syntax error in the regular expression
Java
You can use the static call when you process only one string with the same regular
expression:
(xae, axoa,)vaedaxuxsoaqns = sugsnsx uxs
call with full exception handling:
If the regex or replacement text is provided by the end user, you should use the static
try {
}catch (PatternSyntaxException ex){
// Syntax error in the regular expression
}catch (IllegalArgumentException ex) {
// Syntax error in the replacement text (unescaped $ signs?)
}catch (IndexOutofBoundsException ex){
// Non-existent backreference used the replacenent text
a81e| e qm totssaudxs reqnsaa aues au asn on tuem no. j! 1oofqo 1auoen e 1onsuo
number of strings:
Pattern regex = Pattern.compile(“before");
Matcher regexMatcher = regex,matcher(subjectString);
(,xge,asetdaxxauexalax = Burstnsax uxs
Ratcher objecr with full exception handling:
If the regex or replacement text is provided by the end user, you should use the
String resultString = null;
}↓
Pattern regex = Pattern.compile("before");
Matcher regexMatcher = regex.natcher(subjectString);
try{
resultString = regexMatcher .replaceAll(*after");
186 | Chapter 3: Programming with RegularExpressons
---
## Page 203
} catch (IllegalArgumentException ex){
// Syntax error in the replacenent text (unescaped $ signs?)
}catch (IndexOutofBoundsException ex){
// Non-existent backreference used the replacement text
}catch (PatternSyntaxException ex){
// Syntax error in the regular expression
JavaScript
result = subject.replace(/before/g, "after*);
PHP
$result = preg_replace(′/before/', ‘after', $subject);
Perl
With the subject string held in the special variable $_, storing the result back into $_:
s/before/after/g;
With the subject string held in the variable $subject, storing the result back into
$subject:
$subject =~ s/before/after/g;
With the subject string held in the variable $subject, storing the result into $result:
($result = $subject) =~ s/before/after/g;
Python
If you have only a few strings to process, you can use the global function:
result = re.sub(*before”, "after", subject)
To use the same regex repeatedly, use a compiled object:
reobj = re.compile("before")
result = reobj.sub("after*, subject)
Ruby
result = subject-gsub(/before/, 'after′)
Discussion
NET
In .NET, you will always use the Regex.Replace() method to search and replace with
a regular expression. The Replace() method has 10 overloads. Half of those take a
3.14 ReplaceAlMatches | 187
---
## Page 204
string as the replacement text; those are discussed here. The other half take a
MatchEvaluator delegate as the replacement, and those are discussed in Recipe 3.16.
The first parameter expected by Replace() is always the string that holds the original
subject text you want to search and replace through. This parameter should not be
null. Otherwise, Replace() will throw an ArgunentNullException. The return value of
Replace() is always the string with the replacements applied.
If you want to use the regular expression only a few times, you can use a static call. The
second parameter is then the regular expression you want to use. Specify the replace-
ment text as the third parameter. You can pass regex options as an optional fourth
parameter. If your regular expression has a syntax error, an ArgumentException will be
thrown.
If you want to use the same regular expression on many strings, you can make your
code more efficient by constructing a Regex object fist, and then calling Replace() on
that object. Pass the subject string as the first parameter and the replacement text as
the second parameter. Those are the only required parameters.
When calling Replace() on an instance of the Regex class, you can pass additional pa-
rameters to limit the search-and-replace. If you omit these parameters, all matches of
the regular expression in the subject string will be replaced. The static overloads of
Replace() do not allow these additional parameters; they always replace all matches.
As the optional third parameter, afer the subject and replacement, you can pass the
number of replacements to be made. If you pass a number greater than one, that is the
maximum number of replacements that will be made. For example, Replace (subject ,
replacement, 3) replaces only the first three regular expression matches, and further
matches are ignored. If there are fewer than three possible matches in the string, all
matches will be replaced. You will not receive any indication that fewer replacements
were made than you requested. If you pass zero as the third parameter, no replacements
will be made at all and the subject string will be returned unchanged. If you pass 1, all
regex matches are replaced. Specifying a number less than -1 willcause Replace() to
throw an ArgumentOutofRangeException.
If you specify the third parameter with the number of replacements to be made, then
you can specify an optional fourth parameter to indicate the character index at which
the regular expression should begin to search. Essentially, the number you pass as the
fourth parameter is the number of characters at the start of your subject string that the
regular expression should ignore. This can be useful when you've already processed
the string up to a point, and you want to search and replace only through the remainder
of the string. If you specify the number, it must be between zero and the length of the
subject string. Otherwise, Replace() throws an ArgumentoutofRangeException. Unlike
fual aq1 sayiads seq1 1a1atue1ed t apisoud o1 nof moe 1ou saop ()aoe[dag ° (up1en
of the substring the regular expression is allowed to search through.
188 |Chapter 3: Programming with RegularExpressions
---
## Page 205
Java
If you only want to search and replace through one string with the same regex, you
can call either the replaceFirst() or replaceAll() method directly on your string.
Both methods take two parameters: a string with your regular expression and a
string with your replacement text. These are convenience functions that
call Pattern.conpile("before") matcher(subjectString) replaceFirst ("after*) and
Pattern.compile(*beforea) matcher(subjectString) -replaceAll(aafter*).
If you want to use the same regex on multiple strings, you should create the Matcher
object as explained in Recipe 3.3. Then, call replaceFirst() or replaceAll() on your
matcher, passing the replacement text as the only parameter.
There are three different exception classes you have to contend with if the regex
and replacement text are provided by the end user. The exception class
pe ()sxtgaoedaxurs (atduosuxaped fq umo st uotdasxgxeusutated
String-replaceA11()
ifthe
regular
expression
x
I1legalArgunentException is thrown by replaceFirst() and replaceA11() if there’s a
syntax error in the replacement text. If the replacement text is syntactically valid but
references a capturing group that does not exist, then IndexoutofBoundsException is
thrown instead.
JavaScript
To search and replace through a string using a regular expression, call the replace()
function on the string. Pass your regular expression as the first parameter and the string
with your replacement text as the second parameter. The replace() function returns a
new string with the replacements applied.
If you want to replace all regex matches in the sring, set the /g flag when creatingyour
regular expression object. Recipe 3.4 explains how this works. If you don’t use the /g
flag, only the first match will be replaced.
PHP
You can easily search and replace through a string with preg_replace(). Pass your
regular expression as the first parameter, the replacement text as the second parameter,
and the subject string as the third parameter. The return value is a string with the
replacements applied.
The optional fourth parameter allows you to limit the number of replacements made.
If you omit the parameter or specify -1, all regex matches are replaced. If you specify
0, no replacements are made. If you specify a positive number, preg_replace() will
replace up to as many regex matches as you specified. If there are fewer matches, all of
them are replaced without error.
3.14 Replace AIMatches |189
---
## Page 206
If you want to know how many replacements were made, you can add a fifth parameter
to the call. This parameter wil receive an integer with the number of replacements that
were actually made.
A special feature of preg_replace () is that you can pass arrays instead of strings for the
first three parameters. If you pass an array of strings instead of a single string as the
third parameter, preg_replace() wil return an array with the search-and-replace done
on all the strings.
If you pass an array of regular expression strings as the first parameter,
preg_replace() will use the regular expressions one by one to search and replace
through the subject string. If you pass an array of subject strings, all the regular ex-
pressions are used on all the subject strings. When searching for an array of regular
expressions, you can specify either a single string as the replacement (to be used by all
the regexes) or an array of replacements. When using two arrays, preg_replace() walks
through both the regex and replacement arrays, using a different replacement text for
each regex. preg_replace() walks through the array as it is stored in memory, which is
not necessarily the numerical order of the indexes in the array. If you didn’t build the
array in numerical order, call ksort() on the arrays with the regular expressions and
replacement texts before passing them to preg_replace()
This example builds the $replace array in reverse order:
/e/.-[ojxa8axs
sregex[1]-/b/';
.//.[]xa8axs
$replace[2] =‘3′;
$replace[1] = '2′;
$replace[0] = ‘'1′;
echo preg_replace($regex, $replace, "abc");
ksort($replace);
echo preg_replace($regex, $replace, “abc”);
The first call to preg_replace() displays 321, which is not what you might expect. After
using ksort(), the replacement returns 123 as we intended. ksort() modifies the vari-
able you pass to it. Don't pass its retum value (crue or false) to preg_replace().
Perl
In Perl, s/// is in fact a substitution operator. If you use s/// by itself, it will search and
replace through the $_ variable, storing the result back into $_-
If you want to use the substitution operator on another variable, use the =α binding
operator to associate the substitution operator with your variable. Binding the substi
tution operator to a string immediately executes the search-and-replace. The result is
stored back into the variable that holds the subject string.
190 | Chapter 3: Programming with RegularExpressions
---
## Page 207
The s// operator always modifies the variable you bind it to. If you want to store the
result of the search-and-replace in a new variable without modifying the original, first
assign the original sring to the result variable, and then bind the substitution operator
to that variable. The Perl solution to this recipe shows how you can take those two
Steps in one line of code.
Use the /g modifier explained in Recipe 3.4 to replace all regex matches. Without it,
Perl replaces only the first match.
Python
The sub() function in the re module performs a search-and-replace using a regular
Ix31 1uauaoedau 1moA *asueued isag au1 se uojssadxa eqnBau 1no ssed uoissaudxa
as the second parameter, and the subject string as the third parameter. The global
sub() function does not accept a parameter with regular expression options.
The re.sub() function calls re,compile(), and then calls the sub() method on the com-
piled regular expression object. This method has two required parameters: the replace-
ment text and the subject string.
Both forms of sub() returm a string with all the regular expressions replaced. Both take
one optional parameter that you can use to limit the number of replacements to be
made. If you omit it or set it to zero, allregex matches are replaced. If you pass a positive
number, that is the maximum number of matches to be replaced. If fewer matches can
be found than the count you specified, all matches are replaced without error.
Ruby
The gsub() method of the String class does a search-and-replace using a regular ex-
pression. Pass the regular expression as the first parameter and a string with the re-