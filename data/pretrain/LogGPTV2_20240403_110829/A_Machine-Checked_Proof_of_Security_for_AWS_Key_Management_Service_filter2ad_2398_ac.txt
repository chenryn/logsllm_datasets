check that they are updated consistently with the domain management rules by HSMs. (Although
we have not formalized this, in Appendix B we discuss how our proof implies security in a model
where corrupt hosts are considered.)
Domain States, Tokens and Key Usage. A domain state logically consists of two parts: 1) a domain
trust describing the administrative state of the domain—its entities and rules of operation—and
2) the actual domain keys. The trust components include a unique name of the domain, the set of
entities of each type treated as genuine for the domain and the agreement keys for each HSM in the
domain. The trust also includes a set of quorum rules deﬁning what sets of operators (quorums) are
considered trustworthy. Domain state modiﬁcations must be authorized by one of these quorums.
Since the trust state of a domain can evolve over time (as operators, HSMs, and hosts are added
and removed from the domain), the trust also includes the cryptographic ﬁngerprint (hash) of the
previous trust from which it was derived (by means of a trust update). Domain keys are kept secret
from all entities other than the HSMs of the domain, whereas the domain trust only has to be
authenticated. The concrete trust representation is signed by an HSM of the trust.
To provide the encryption functionality of a domain, its HSMs need access to the domain
keys, which should not be exposed to other entities. To allow this, the domain state is concretely
represented by a domain token signed by an HSM of the trust, which includes an encryption of
the domain keys. This representation authenticates the state and binds the encrypted data to the
trust; domain keys are decryptable only by the HSMs of the trust.
To allow encryptions between HSMs of a domain, each HSM has a long-term Diﬃe-Hellman
agreement key pair. It certiﬁes its (public) agreement key as its own by signing it with its identity
key. To encrypt the domain keys for the other HSMs in a domain, an HSM ﬁrst encrypts them
under an ephemeral symmetric key. It then generates an ephemeral Diﬃe-Hellman key pair, uses
DH agreement with this key pair and each of the agreement keys of the domain HSMs to compute
a shared secret with each HSM, uses a key derivation function (KDF) on each shared secret to
produce a set of symmetric keys, each of which is used to encrypt the ephemeral symmetric key.
The result is a multi-recipient encryption of the domain keys to all the other HSMs in the domain
based on DHIES [1]. This scheme has performance advantages: ciphertexts to all the HSMs in the
domain take less bandwidth and can be batch-generated faster. The ﬁnal domain token includes
all of these encryptions, the public ephemeral Diﬃe-Hellman key, and the domain trust, all signed
by the HSM creating the token. When an HSM receives a command (other than to create a new
domain), it also gets a domain token on which to operate14 (see Figure 2); it decrypts the domain
token, and uses it to process the request.
Domain State Transitions. The security of a domain depends critically on all of the HSMs of a
domain being genuine. For example, if an adversary could somehow introduce an identity into a
domain for which he holds the private signing key, he could use this identity to sign an agreement
key for which he holds the private key, have another member update the domain, and use his fake
agreement key to decrypt the new domain token, breaking security. However, the HSMs performing
13 Note that it is always safe to add domain-local secrets that appear only encrypted by keys of the domain. This
can be done by allowing such secrets to only be created by an HSM of the domain (that immediately encrypts the
new secret under a domain key), and to be re-encrypted from one domain key to another domain key of the same
domain. For example, in AWS KMS, customer master keys are treated in this way, and hosts are also responsible
for issuing the commands that manage the creation and usage of such keys.
14 In AWS KMS, these domain states are typically cached within the HSMs, rather than being explicitly provided
as part of a command. This provides slightly stronger security guarantees, e.g. wrt state rollback.
7
the domain update operations (adding and removing entities) do not carry with them a state that
allows them to recognize the identity keys of genuine entities. Domain updates where HSMs modify
trusts therefore rely on authorizations (attestations) of identity keys produced by operators, as
follows.
An HSM will sign a new trust with any set of entities and quorum rules, if that trust is initial
(i.e., has no predecessor ﬁngerprint).15 To modify an existing trust to create a new trust, an HSM
checks that 1) it is an HSM of the existing trust, and 2) every entity in the new trust is either
in the old trust or is certiﬁed (for the domain) by a quorum of operators of the existing trust. If
these checks are successful, it creates and signs a new trust with the updated information, with the
ﬁngerprint of the existing trust as predecessor of the new one.
A host processing requests for a domain maintains in his state a trust for the domain; his
commands can only be processed by HSMs in the trust.16 As the trust of a domain evolves, hosts
update their version of the trust. A host of a domain is initially given the initial trust of the domain.
A host updates to a new trust only if 1) the predecessor ﬁngerprint of new trust is the ﬁngerprint
of its current trust, and 2) the new trust is signed by an HSM of its current trust.
Invariant: an honest trust stays honest. A trust is honest if and only if its HSMs, hosts, and
operators are all genuine, every quorum of operators (as deﬁned by its quorum rules) contains an
honest operator, and its predecessor trust (if any) is honest. A crucial property of the DMP is that,
if a domain is initially created with an honest trust, then the domain will remain honest as updates
are performed by HSMs. Note that this guarantee is enforced even though the HSM performing
the updates keeps no state other than its own signing and agreement keys:17 such an HSM has no
way of distinguishing genuine operators from non-genuine ones, and it depends on attestation by
operators to identify genuine HSMs.
Intuitively, the trust honesty property is preserved by the following inductive reasoning, which
we formalize in our machine-checked proof. The base case is trivial. In the inductive step, an HSM
is asked to update an honest existing trust to a new trust, and it performs checks (1-2) described
above. By the quorum requirement on honest trusts, any entity certiﬁed by a quorum in the existing
trust is guaranteed to be genuine. By check 2) above, the HSM will therefore guarantee that all
entities in the new trust are genuine. To show that honesty is preserved it remains to prove that
the quorum requirement is satisﬁed by the new trust. This is guaranteed by the global assumption
on the security parameter n: since we just proved all operators in the new trust must be genuine,
it must be the case that any subset of operators of size at least n contains at least one honest
operator. Thus, if the current trust is honest, the successor trust (once signed by an HSM of the
predecessor trust) is also honest. By the observation of the last paragraph, the actions of a host
guarantee that if the host starts out with an honest trust, the host trust will remain honest.
Allowing Dishonest Domains. The DMP presented here allows dishonest domains to share entities
with honest domains. In AWS KMS, this is prevented by having HSMs cache domain states, and
using additional commands by which an HSM attests to its current domains. This allows operators
to check that an HSM is loaded up with honest domain tokens, and so will never process requests
using dishonest domain tokens. The current proof shows that locking down the HSMs in this way
15 This corresponds to a domain creation request in AWS KMS.
16 Commands are in fact issued by ﬁrst obtaining an ephemeral symmetric key token generated by an HSM of the
trust, with the plaintext key decryptable only using either a domain key or by the host requesting the token. We
do not describe this communication mechanism in this paper.
17 Again, AWS KMS caches domain tokens, rather than them being explicitly provided for updates; the DMP proof
shows that this caching is not needed for the current security proof.
8
is not needed to achieve domain security. Note that the current proof nevertheless still applies to
the security of AWS KMS, since the latter’s stricter rules simply restrict adversarial action.
3.2 Formalization in EasyCrypt
Background on EasyCrypt. EasyCrypt is an interactive proof assistant for verifying the security
of cryptographic constructions in the computational model. EasyCrypt adopts the code-based ap-
proach, in which primitives, security goals and hardness assumptions are expressed as probabilistic
programs. EasyCrypt uses formal tools from program veriﬁcation and programming languages to
justify cryptographic reasoning, providing several program logics. We now describe the formaliza-
tion of the DMP in EasyCrypt.18
(∗ Identities of HSMs ∗)
(∗ Identities of Operators ∗)
type HId.
type OpId.
type HstId. (∗ Identities of Hosts ∗)
type DomId. (∗ Identities of Domains ∗)
(∗ Trust data (genuine HSMs) and metadata ∗)
type Fpr.
type Quorum = OpId fset ∗ int.
type Metadata = Quorum ∗ Fpr option ∗ HstId fset ∗ DomId.
type Trust = (HId fset) ∗ Metadata.
(∗ Domain keys in plaintext and encrypted form ∗)
type Keys = (Handle,Key) fmap.
type EKeys = MCTxt.
(∗ Unwrapped domain token ∗)
type TkData = { td inst: bool; td trust: Trust; td skeys: Keys; }.
(∗ Wrapped domain token and trust ∗)
type TkWrapped = { tkw ekeys: EKeys; tkw signer: HId; tkw sig: signature; }.
type Token = { tk inst: bool; tk trust: Trust; tk wdata: TkWrapped; }.
Fig. 3. EasyCrypt Deﬁnitions for Domain Tokens
Trusts and Domain Tokens. Figure 3 shows the EasyCrypt declarations for domain tokens. The HId
type is a pair holding the signing key of the HSM and its public agreement key. The OpId type is
simply the signing key for the human operator. Type TkWrapped corresponds to signed data structures,
which we reuse both for signed trusts and signed domain tokens. Technically, this simpliﬁes the
writing of invariants, as we only need to deal with one encoding function into the domain of signature
schemes. We then syntactically distinguish (using bit tk inst) installable signed trusts—only these
can be installed in hosts—from signed domain tokens that also carry domain keys.
Wrapping and Unwrapping. Figure 4 shows how we formalize in EasyCrypt the operations carried
out by HSMs to wrap (i.e., creating a data structure that is digitally signed and contains encrypted
domain keys) and unwrap (verifying authenticity and recover cleartext domain keys) domain tokens.
Operator checkToken performs consistency checks on tokens and performs signature veriﬁcation; in
particular, it also checks that the encrypted keys cph are encrypted to all HSM members of the trust