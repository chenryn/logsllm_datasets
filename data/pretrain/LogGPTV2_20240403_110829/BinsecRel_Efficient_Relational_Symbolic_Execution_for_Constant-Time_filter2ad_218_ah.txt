π(cid:48) (cid:44) π ∧ (true = ϕ
(cid:94)
(cid:94)
ITE-FALSE
P.l = ite e ? ltrue: lf alse
|l = ϕ
π(cid:48) (cid:44) π ∧ (f alse = ϕ
(cid:94)
(cid:94)
P.l = v := e
(cid:94)(cid:48)
ρ(cid:48) (cid:44) ρ[v (cid:55)→ ϕ
]
P.l = @e := e(cid:48)
ASSIGN
STORE
(cid:0)ρ, µ
(cid:94)(cid:1) e(cid:48) (cid:96) φ
(cid:94)(cid:48)
π(cid:48) (cid:44) π ∧ µ
(cid:94)
Figure 7: Symbolic evaluation of DBA instructions and ex-
(cid:86)
(cid:86)
pressions where canonical (ϕ
if it is in canonical
) returns ϕ
form or a temporary variable otherwise.
The tricky cases are the non-deterministic rule: ITE-TRUE,
ITE-FALSE, and D-JUMP. However, because the leakages t
and t(cid:48) determine the control ﬂow of the program, there exist
a unique symbolic rule that can be applied to match the
execution of both ck and c(cid:48)
k.
For the other rules, let us consider the simpler case of a
self-composed symbolic execution where each execution is
updated independently from the other. It can be shown that
for each symbolic rule, any side of the symbolic execution
is updated without under-approximation hence the relation
∼∼∼r sk+1 is preserved. Now, in
ck+1
the case of relational symbolic execution, updating the shared
simple expressions that are equal in both executions is strictly
equivalent as updating these expressions independently in both
execution.
∼∼∼l sk+1 ∧ c(cid:48)
k+1
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:43 UTC from IEEE Xplore.  Restrictions apply. 
1036
2) Sketch of Proof of Correctness of RelSE (Theorem 2):
The proof is similar to proofs of correctness in standard
symbolic execution. We can prove inductively that for each
step in the symbolic execution, the update of the path predicate
preserves the semantics of the concrete program.
(cid:86)
Let us consider a conﬁguration sk (cid:44)(cid:0)l, ρ, µ
, π(cid:1) such that
the induction hypothesis “the path predicate is correct” holds.
Then, for each model M such that M (cid:15) π, then for c0, ck
such that c0
We want to show that for any symbolic step sk → sk+1,
∼∼∼M
p sk, we have c0 −→k ck
∼∼∼M
p s0 ∧ ck
the hypothesis holds.
In the non-deterministic rules: ITE-TRUE, ITE-FALSE, and
D-JUMP,
the path predicate π is updated to a new path
predicate π(cid:48) and the rule ensures the satisﬁability of π(cid:48).
Therefore, either there exists a model M (cid:15) π(cid:48) and a concrete
∼∼∼M
conﬁguration ck+1 given by ck+1
p sk, or the rule cannot
be applied. Moreover, because π(cid:48) is strictly stronger than π,
we also have M(cid:48) (cid:15) π, therefore there exists a concrete step
ck −→ ck+1.
For the other rules, it can be shown that the symbolic
execution is updated without over-approximation hence the
correction of the path predicate is preserved.
3) Proof of CT Security (Theorem 3):
t
0
k
k
(cid:86)
0 −→
t(cid:48)
k, and sk.
s0 (cid:32)k sk ∧ ck
Proof. (Induction). Let s0 be an initial symbolic conﬁguration
for which the symbolic evaluation never gets stuck. Let us
∼∼∼l s0, c(cid:48)
∼∼∼r s0, ck (cid:44)
consider concrete conﬁgurations c0
(l, r, m) and ck(cid:48) (cid:44) (l(cid:48), r(cid:48), m(cid:48)) such that c0 −→
k ck, c(cid:48)
k c(cid:48)
, π(cid:1) such that:
From Theorem 1, there exists sk (cid:44)(cid:0)ls, ρ, µ
and t = t(cid:48). We show that if Theorem 3 holds at step k, then
it holds at step k + 1.
∼∼∼l sk ∧ c(cid:48)
∼∼∼r sk
(1)
Note that from Eq. (1) and Deﬁnition 2, we have ls = l = l(cid:48),
therefore the same instructions and expression are evaluated
in conﬁgurations ck, c(cid:48)
Because the symbolic execution does not get stuck, there
exists sk+1 such that sk (cid:32) sk+1. We show by contradiction
that the leakage bv and bv(cid:48) produced by ck −→
ck+1 and
k −→
c(cid:48)
Suppose that ck and c(cid:48)
k produce distinct leakages. This can
happen during the evaluation of a rule LOAD, D_JUMP, ITE,
STORE.
rations ck and c(cid:48)
and c(cid:48)
Case LOAD: The evaluation of the expression @e in conﬁgu-
k produces leakages bv and bv(cid:48) st. ck @e (cid:96) bv
be the evaluation of the leakage in
From Eq. (1) and Deﬁnition 2 we have that ∃M (cid:15) π st.
Assuming that the load is insecure then bv (cid:54)= bv(cid:48), hence
the symbolic conﬁguration:(cid:0)ρ, µ
c(cid:48)
k+1 are necessarily equal.
k @e (cid:96) bv(cid:48). Let ϕ
, e(cid:1) (cid:96) ϕ
|l) and bv(cid:48) = M (ϕ
(cid:86)
bv = M (ϕ
(cid:86)
.
(cid:86)
(cid:86)
(cid:86)
bv
bv
|r).
|r) and M (cid:15) π ∧ ϕ
(cid:86)
However, because sk is non-blocking we can deduce that
|r)
) is true, meaning that (cid:64)M (cid:15) π ∧ (ϕ
(cid:86)
|l
(cid:86)
secLeak (ϕ
which is a contradiction. Therefore bv = bv(cid:48).
(cid:54)= ϕ
(cid:86)
Cases D_JUMP, ITE, STORE: The reasoning is analogous.
(cid:86)
M (ϕ
|l) (cid:54)= M (ϕ
(cid:86)
(cid:86)
|l (cid:54)= ϕ
|r.
We have shown that the hypothesis holds for k+1. If s0 (cid:32)k+1
∼∼∼l
sk+1, then for all low-equivalent initial conﬁgurations c0
0 −→
s0 and c(cid:48)
ck+1 and c(cid:48)
t(cid:48)
k −−→
c(cid:48)
bv(cid:48) c(cid:48)
4) Proof of Bug-Finding for CT (Theorem 3):
∼∼∼r s0 such that c0 −→
k+1 where t = t(cid:48), then t · [bv] = t(cid:48) · [bv(cid:48)].
k ck −→
bv
k
0
t
(cid:86)
(cid:86)
(cid:86)
(cid:86)
(cid:86)
(cid:86)
c0
st.(cid:0)ρ, µ
, e(cid:1) (cid:96) ϕ
sk (cid:44)(cid:0)ls, ρ, µ
Proof. Let us consider symbolic conﬁgurations s0 and sk such
that s0 (cid:32)k sk and sk is stuck. This can happen during the
evaluation of a rule LOAD, D_JUMP, ITE, STORE.
, π(cid:1) produces a leakage ϕ
(2)
c(cid:48)
0,
|l (cid:54)= ϕ
∃M (cid:15) π ∧ (ϕ
From Deﬁnition 2, because c0
(cid:86)
.
), meaning that
the
concrete
∼∼∼M
l sk and c(cid:48)
Let us
consider
∼∼∼M
l s0 ∧ ck
ck (cid:44) (l, r, m), and ck(cid:48) (cid:44) (l(cid:48), r(cid:48), m(cid:48)) such that:
Case LOAD: where an expression @e in the conﬁguration
This evaluation blocks iff ¬secLeak (ϕ
|r)
conﬁguration c0,
∼∼∼M
∼∼∼M
r s0 ∧ c(cid:48)
r sk
Follows Theorem 2, that c0 −→k ck and c(cid:48)
0 −→k c(cid:48)
k.
∼∼∼r s0 we
∼∼∼l s0 ∧ c(cid:48)
∼∼∼r sk, we have
∼∼∼l sk ∧ c(cid:48)
have c0 (cid:39)L c(cid:48)
ls = l = l(cid:48).
Therefore the evaluation of ck and c(cid:48)
k also contain the
expression @e, producing leakages bv and bv(cid:48) st. ck @e (cid:96) bv
and c(cid:48)
(cid:86)
|l) and bv(cid:48) =
From Deﬁnition 2 we have bv = M (ϕ
(cid:86)
M (ϕ
Therefore, we have two initial conﬁgurations c0 and c(cid:48)
fying
k @e (cid:96) bv(cid:48).
|r), and from Eq. (2) we can deduce bv (cid:54)= bv(cid:48).
0 and because ck
0 veri-
k
k
0
0
c0 (cid:39)L c(cid:48)
0 ∧ c0 −→
k ck −→
ck+1 ∧ c(cid:48)
t
bv
k c(cid:48)
k −→
0 −→
c(cid:48)
t(cid:48)
∧ t · [bv] (cid:54)= t(cid:48) · [bv
bv
(cid:48)]
k+1
which shows that the program is insecure.
Cases D_JUMP, ITE, STORE: The reasoning is analogous.
C. Usability: Stubs for Input Speciﬁcation
We enable the speciﬁcation of high and low variables in
C source code using dummy functions that are stubbed in
the symbolic execution (cf. Example 3). Note that this is at
the cost of portability (it can only be used around C static
libraries or when in possession of the C source code). If
portability is required, the user can still refer to the binary-
level speciﬁcation method (Section V) which relies on manual
reverse-engineering to ﬁnd the offsets of secrets relatively to
the initial esp.
A call to a function high_input_n(addr), where n is
a constant value, speciﬁes that the memory must be initialized
with n secret bytes, starting at address addr.
Example 3 (Stub for specifying high locations). A user can
write a wrapper around a function foo to mark its arguments
as low or high as shown in listing 3. The function foo can be
deﬁned in an external library which must be statically linked
with the wrapper program.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:43 UTC from IEEE Xplore.  Restrictions apply. 
1037
uint8_t secret[4]; uint8_t public[4];
high_input_4(secret); //4 bytes high input
low_input_4(public);
return foo(secret, public);
//4 bytes low input
Listing 3: Wrapper around external function foo
the
the
execution,
During
function
symbolic
high_input_4(secret) is encountered, it is stubbed as:
@[secret+1] := (cid:104)β1| β(cid:48)
@[secret+0] := (cid:104)β0| β(cid:48)
1(cid:105)
0(cid:105)
@[secret+2] := (cid:104)β2| β(cid:48)
@[secret+3] := (cid:104)β3| β(cid:48)
3(cid:105)
2(cid:105)
where βi, β(cid:48)
D. Zoom on the Lucky13 Attack
i are fresh 8-bit bitvector variables.
Lucky 13 [50] is a famous attack exploiting timing vari-
ations in TLS CBC-mode decryption to build a Vaudenay’s
padding oracle attack and enable plaintext recovery [7], [50].
We do not actually mount an attack but show how to ﬁnd
violations of constant-time that could potentially be exploited
to mount such attack.
We focus on the function tls-cbc-remove-padding
which checks and removes the padding of the decrypted
record. We extract the vulnerable version from OpenSSL-
1.0.16 and its patch from [16]. Finally, we check that no
information is leaked during the padding check by specifying
the record data as private.
On the insecure version, BINSEC/REL accurately reports
5 violations, and for each violation, returns the address of
the faulty instruction, the execution trace which can be vi-
triggering the violation.
sualized with IDA, and an input
For instance, on the portion of code in listing 4,
three
violation are reported: two conditional statement depending
on the padding length at
lines 3 and 4, and a memory
access depending on the padding length at line 4. For the
conditional at line 3, when the length LEN of the record data
is set to 63, BINSEC/REL returns in 0.11s the counterexam-
ple “data_l[62]=0; data_r[62]=16”, meaning that
an execution with a padding length set to 0 will take a different
path that an execution with a padding length set to 16.
1
2
3
4
5
pad_len = rec->data[LEN-1]; // Get padding length
[...]
for (i = LEN - pad_len; i data[i] != pad_len)
return -1; // Incorrect padding
Listing 4: Padding check in OpenSSL-1.0.1
On the secure version, when the length LEN of the record
data is set to 63, BINSEC/REL explores all the paths in 400s
and reports no vulnerability.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:43 UTC from IEEE Xplore.  Restrictions apply. 
1038