title:CV-Inspector: Towards Automating Detection of Adblock Circumvention
author:Hieu Le and
Athina Markopoulou and
Zubair Shafiq
CV-INSPECTOR: Towards Automating Detection
of Adblock Circumvention
Hieu Le
Athina Markopoulou
Zubair Shaﬁq
University of California, Irvine
University of California, Irvine
University of California, Davis
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—The adblocking arms race has escalated over the
last few years. An entire new ecosystem of circumvention (CV)
services has recently emerged that aims to bypass adblockers
by obfuscating site content, making it difﬁcult for adblocking
ﬁlter lists to distinguish between ads and functional content. In
this paper, we investigate recent anti-circumvention efforts by
the adblocking community that leverage custom ﬁlter lists. In
particular, we analyze the anti-circumvention ﬁlter list (ACVL),
which supports advanced ﬁlter rules with enriched syntax and
capabilities designed speciﬁcally to counter circumvention. We
show that keeping ACVL rules up-to-date requires expert list
curators to continuously monitor sites known to employ CV
services and to discover new such sites in the wild — both
tasks require considerable manual effort. To help automate
and scale ACVL curation, we develop CV-INSPECTOR, a ma-
chine learning approach for automatically detecting adblock
circumvention using differential execution analysis. We show that
CV-INSPECTOR achieves 93% accuracy in detecting sites that
successfully circumvent adblockers. We deploy CV-INSPECTOR
on top-20K sites to discover the sites that employ circumvention
in the wild. We further apply CV-INSPECTOR to a list of sites that
are known to utilize circumvention and are closely monitored by
ACVL authors. We demonstrate that CV-INSPECTOR reduces the
human labeling effort by 98%, which removes a major bottleneck
for ACVL authors. Our work is the ﬁrst large-scale study of the
state of the adblock circumvention arms race, and makes an
important step towards automating anti-CV efforts.
I.
INTRODUCTION
The widespread adoption of adblocking has threatened the 
advertising-based  business  model  of  many  online  publishers 
[20].  In  response,  publishers  have  deployed  anti-adblockers 
that  detect  adblockers  and  force  users  to  either  disable  their 
adblockers  or  sign  up  for  paid  subscriptions  [11],  [55],  [67]. 
However,  anti-adblocking  has  not  proven  very  successful: 
adblockers  can  often  hide  anti-adblocking  popups  [42],  [50],
[78] or  users  mostly  choose  to  navigate  away  [20],  [56].
Some  publishers  have  resorted  to  outright  circumvention  of
adblockers. There are now dedicated third-party circumvention
(CV) services  that  help  publishers  re-insert  ads  by  bypassing
adblockers.  Examples  include  AdThrive  [12],  AdDefend  [7],
and  Publica  [59].  These  CV  services  are  different,  and  more
advanced,  than  anti-adblockers.  While  anti-adblockers  gener-
ally  initiate  a  dialogue  with  users  [66],  CV  providers  try  to
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25 February 2021,Virtual 
ISBN 1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24055
www.ndss-symposium.org
sneak ads without giving users any notice or choice [44], [61],
[62]. More speciﬁcally, CV services re-insert ads by evading
ﬁlter lists [35], such as the community-driven EasyList (EL)
[68], used by adblockers to block ads [13], [22], [26], [53].
the anti-circumvention list (ACVL),
The adblocking community has taken notice of the ag-
gressive circumvention tactics used by CV services. Most
notably, Adblock Plus (ABP) [5] established a dedicated anti-
circumvention (anti-CV) effort that is centered around a new
dedicated ﬁlter list,
to
counter these CV services [4], [36], [45]. ACVL supports an
extended syntax with advanced capabilities, such as to hide
DOM elements based on a combination of CSS styles and text,
beyond the simpler rules supported by EL [47]. Concurrently
with ABP, other adblockers, such as uBlock Origin [71] and
AdGuard [9], also incorporate similar advanced anti-CV ﬁlter
rules [8], [10], [39], [69]. Similar to other adblocking ﬁlter
lists [31], [68], anti-CV ﬁlter rules are curated manually based
on crowdsourced user feedback. However, ACVL is curated
primarily by a small set of expert list authors instead of the
broader community that supports EL. Thus, a key challenge
faced by the ACVL curators is keeping up with the fast paced
nature of CV services [30]. Our measurements show that the
updates to ACVL are made 8.7 times more frequently as
compared to EL. Another challenge is that anti-CV efforts
are in the public domain, which gives CV providers the
opportunity to monitor anti-CV efforts and adapt their evasive
tactics accordingly.
To address these challenges, we introduce CV-INSPECTOR,
an automated approach to detect whether a site employs ad-
block CV services. CV-INSPECTOR includes (i) an automated
data collection and differential execution analysis for a list of
sites of interest; (ii) an algorithm for prioritizing and expediting
ground truth labeling; and (iii) a supervised machine learn-
ing classiﬁer using features that capture obfuscation of web
requests and HTML DOM by CV services. We evaluate CV-
INSPECTOR using two real-world data sets. First, we consider
the top-20K sites and show that CV-INSPECTOR is able to
accurately detect whether or not a site employs circumvention.
In the process, we uncover several new sites (including news
publishers, adult sites, and niche lower-ranked sites) that
successfully employ third-party CV services. Second, we apply
CV-INSPECTOR, with ACVL loaded, on a set of sites that
are continuously monitored by ABP, and ﬁnd that some of
them successfully evade anti-CV ﬁlters. More importantly, our
results show that CV-INSPECTOR can reduce human labeling
efforts by 98%, which is a major step in scaling the effort
to combat circumvention. To the best of our knowledge,
this work presents the ﬁrst
large-scale systematic analysis
of adblock circumvention on the web. It provides tools [72]
that can signiﬁcantly automate circumvention detection and
monitoring, thus helping to prioritize the efforts of expert
ACVL curators, which is a major bottleneck in this arms race.
The outline of the rest of the paper is the following.
Sec. II provides background of adblock circumvention and
related work. Sec. III provides a longitudinal characterization
of the anti-CV ﬁlter list and highlights pain-points and bot-
tlenecks. Sec. IV presents the design and evaluation of the
CV-INSPECTOR methodology, including the description of the
automated web crawling, the differential analysis, the machine
learning classiﬁer and feature engineering. Sec. V applies CV-
INSPECTOR for two different applications: discovering sites
that employ CV services in the wild and monitoring sites that
are known to employ circumvention to reduce human labeling
efforts. Sec. VI concludes with a discussion of potential
impact, limitations, and future directions.
II. BACKGROUND & RELATED WORK
Adblockers rely on ﬁlter lists to detect and counter ads.
Rules in these ﬁlter lists are manually curated by volunteers
based on crowdsourced user feedback [13], [73]. Filter rules
can block network requests to fetch ads using hostname or
path information. In addition, they can hide HTML elements
of ads using class names or IDs. As adblocking has gone
mainstream [20], publishers have undertaken various counter-
measures that can be divided into three categories.
A. Whitelisting
Some adblockers allow whitelisting of ads if they con-
form to certain standards. The Acceptable Ads program [1]
whitelists ads if they are not intrusive based on their placement,
distinction, and size. ABP and a few other adblockers currently
implement the Acceptable Ads based whitelist. The Better Ads
Standard [18], by the Coalition for Better Ads, prohibits a
narrower set of intrusive ad types such as pop-up ads and large
sticky ads. Google’s Chrome browser blocks ads on sites that
do not comply with the Better Ads Standard, and whitelists
ads on the remaining sites [25]. However, whilelisting is not
a silver bullet for publishers. First, it is not supported by
many popular adblockers such as uBlock Origin and the Brave
Browser. Second, some adblockers, such as ABP, require large
publishers to pay a fee to be whitelisted. Publishers may also
have to pay a fee to ad exchanges, such as the Acceptable Ads
Exchange, to serve acceptable ads.
Prior work has investigated the evolution and impact of
ad whitelisting. Walls et al. [74] studied the growth of the
Acceptable Ads whitelist over the years and showed that it
covers a majority of the popular sites. They also reported
that the whiltelisting process is ﬂawed because “acceptable”
ads are often disliked by users due to their intrusiveness
and misleading resemblance to page content. In fact,
the
whitelisting of deceptive ads from content recommendation
networks such as Taboola and Outbrain [17] has been quite
controversial [3]. Pujol et al. [60] showed that most ABP users
do not opt-out of the Acceptable Ads whitelist despite these
issues. Merzdovnik et al. [46] showed that ABP blocked the
least amount of ads as compared to other adblocking tools
because of whitelisting.
B. Anti-adblocking
Many publishers deploy anti-adblockers that use client-
side JavaScript (JS) to detect adblockers based on whether
ads are missing. Fig. 1(a) illustrates the workﬂow of anti-
adblocking. The logic is implemented by a client-side JS that
ﬁrst detects whether an ad is missing by measuring the ad’s
display properties or other dimensions. Then, it displays a
popup either warning users to disable their adblockers or a
paywall asking them to sign-up for paid subscriptions.
Third-party anti-adblocking services [19], [41], [56] are
used by many news publishers such as the Washington Post and
Forbes. Nithyanand et al. [52] manually analyzed JS snippets
to characterize anti-adblockers. Mughees et al. [50] trained
a machine learning classiﬁer to detect anti-adblockers based
on HTML DOM changes. These early studies showed that
hundreds of sites had started deploying anti-adblockers.
Adblockers counter anti-adblockers using specialized ﬁlter
lists that use the same syntax as the standard EL. These ﬁlter
rules either trick the detection logic of anti-adblockers by
allowing baits or hiding the warning message shown by anti-
adblockers after detection. Iqbal et al. [42] studied the coverage
of these ﬁlter lists (e.g., Adblock Warning Removal List)
against anti-adblocking. They showed that these ﬁlter lists are
often slow in adding suitable rules by several weeks or some-
times even months. They further trained a machine learning
classiﬁer to detect anti-adblocking JS using static analysis. Zhu
et al. [78] proposed a dynamic differential analysis approach
to detect and disrupt anti-adblockers. The aforementioned
countermeasures have proven reasonably successful against
anti-adblockers. Moreover, the warning messages shown by
anti-adblockers have proven to be of limited beneﬁt [23], [63].
About three-quarters of surveyed users said that they would
simply leave the site instead of disabling their adblocker [56].
C. Circumvention
Publishers have recently started to manipulate the delivery
of ads on their site to outright circumvent adblockers. Circum-
vention techniques can be broadly divided into two categories:
Cloaking-based Circumvention. Publishers route ads through
channels that adblockers do not have visibility into due to bugs
or other limitations. For instance, advertisers used WebSockets
to circumvent adblocking extensions in Chrome because of a
bug in the WebRequest API that is used by extensions to in-
tercept network requests [16]. More recently, advertisers have
used DNS CNAME to disguise HTTP requests to advertising
and tracking domains as ﬁrst-party requests [27], [28]. How-
ever, cloaking-based circumvention is not long-lasting because
it is neutralized once the bug is ﬁxed. For example, Bashir et
al. [16] showed that WebSockets-based cloaking was rendered
ineffective when Chrome patched the WebRequest bug [57].
Moreover, cloaking is typically not effective against browsers
with built-in adblocking because they are not constrained by
the extension API used by adblocking extensions. Thus, we
do not focus on cloaking-based circumvention in our work.
Obfuscation-based Circumvention. Publishers obfuscate
their web content (e.g., domain, URL path, element ID) to
evade ﬁlter rules used by adblockers [75]. In contrast
to
cloaking-based approaches, obfuscation-based circumvention
2
Filter Types
Web Request
Blocking
Element Hiding
Advanced
JavaScript Abortion
Advanced
Element Hiding
EL ACVL Example








||a.com/ads/*/images$script
||a.com##.ad-container
||a.com#$#abort-on-property-read EX,
||a.com#$#abort-on-property-write EX
||a.com#$#hide-if-contains-visible-text
sor/
Purpose
Blocks web requests matching domain, path
and script type
Hides all elements matching class name
Stops JS execution from reading or writing to
window.EX
Hides all elements containing Sponsor text
/Spon-
TABLE I.
OVERVIEW OF SIMPLE (USED BY EASYLIST OR “EL”) AND ADVANCED (USED BY EL AND ACVL) FILTER RULES. ONLY THE ADVANCED
FILTER RULES CAN STOP THE EXECUTION OF JS AND TAKE INTO ACCOUNT THE VISIBILITY OF CONTENT WHEN BLOCKING ELEMENTS.
is powerful because it exploits the inherent weaknesses of
ﬁlter rules — namely that ﬁlter rules must be precise when
targeting what to block (i.e., to avoid false positives) and that
they are slow to adapt (i.e., ﬁlter rule updates). Furthermore,
obfuscation-based circumvention can allow publishers to seam-