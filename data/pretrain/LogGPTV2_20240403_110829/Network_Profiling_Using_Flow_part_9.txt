203.0.113.30
47 0 0 Router
1 0 2048
6 * * 80, 443 * Web client
17 123 * 123
CMU/SEI-2012-TR-006 | 56
Appendix B Scripts
These scripts follow the steps provided in the body of the report. Edit them with the appropriate
values for dates, addresses, and so on. Use the Unix “script” command to save text output to a
file.
Remember that the scripts will not provide final profile results. They will simply return a list of
potential addresses corresponding to each service and, in some cases, a few other details about the
traffic being filtered. It is the profiler’s job to further investigate and validate the output using the
process described in the body of the report.
Section 3 Script
This script selects a sample data set and prints out the top protocols, top requested services, and
top services being provided.
#! /bin/bash
echo Initial dataset:
rwfilter --type=out,outweb --start-date=2011/09/28:00 --end-
date=2011/09/28:23 --protocol=0- --pass=sample.rw
rwfileinfo sample.rw
echo -e "\nTop protocols:"
rwstats sample.rw --fields=protocol --count=5
echo -e "\nTop services being requested:"
rwfilter sample.rw --type=out,outweb --protocol=0- --pass=stdout|rwstats --
count=5 --fields=dport
echo -e "\nTop services being provided:"
rwfilter sample.rw --type=out,outweb --protocol=0- --pass=stdout|rwstats --
count=5 --fields=sport
Section 4 Script
This script finds the active addresses in the sample.rw data set and turns them into a SiLK IPset.
#! /bin/bash
echo Number of TCP talkers:
rwfilter sample.rw --type=out,outweb --protocol=6 --packets=4- --ack-flag=1
--pass=stdout|rwset --sip-file=tcp-talkers.set
rwsetcat tcp-talkers.set --count
echo -e "\nNumber of talkers on other protocols:"
rwfilter sample.rw --type=out --protocol=0-5,7- --pass=stdout|rwset --sip-
file=other-talkers.set
rwsetcat other-talkers.set --count
rwsettool --union tcp-talkers.set other-talkers.set --output-
path=talkers.set
CMU/SEI-2012-TR-006 | 57
rm tcp-talkers.set
rm other-talkers.set
echo
rwsetcat talkers.set --network-structure
echo -e "\nClass C network blocks:"
rwsetcat talkers.set --network-structure=C
echo -e "\nTransit traffic:"
rwfilter sample.rw --type=out,outweb --not-sipset=talkers.set --
pass=stdout|rwtotal --sip-first-8 --summation --skip-zeroes --no-titles |
cut -f 2 -d "|"
rwfilter sample.rw --type=out,outweb --dipset=talkers.set --
pass=stdout|rwtotal --sip-first-8 --summation --skip-zeroes --no-titles |
cut -f 2 -d "|"
Section 5 Script
This script finds potential assets for each service in Section 5.
#! /bin/bash
echo "######## Web Servers ########"
rwfilter sample.rw --type=outweb --sport=80,443,8080 --protocol=6 --
packets=4- --ack-flag=1 --pass=stdout|rwstats --fields=sip --percentage=1 --
bytes --no-titles|cut -f 1 -d "|"|rwsetbuild > web_servers.set
echo Potential Web Servers:
rwfilter sample.rw --type=outweb --sport=80,443,8080 --protocol=6 --
packets=4- --ack-flag=1 --sipset=web_servers.set --pass=stdout|rwuniq --
fields=sip,sport --bytes --sort-output
echo -e "\n######## Web Clients ########"
rwfilter sample.rw --type=out,outweb --protocol=6 --ack-flag=1 --packets=4-
--dport=80,8000,8080,443,1935,1755,554 --pass=stdout|rwset --sip-
file=tcpclients.set
rwfilter sample.rw --type=out,outweb --protocol=17 --dport=1755,554 --
pass=stdout|rwset --sip-file=udpclients.set
rwsettool --union tcpclients.set udpclients.set --output-path=webclients.set
rm tcpclients.set
rm udpclients.set
rwfilter sample.rw --type=out,outweb --sipset=webclients.set --
dport=80,8080,8000,443,1935,1755,554 --pass=stdout|rwstats --fields=sip --
percentage=1 --no-titles|cut -f 1 -d "|" |rwsetbuild > web_clients.set
rm webclients.set
echo Potential Web Clients:
rwfilter sample.rw --type=out,outweb --sipset=web_clients.set --
dport=80,8080,8000,443,1935,1755,554 --pass=stdout|rwuniq --
fields=sip,dport,protocol --bytes --sort-output
echo -e "\n"Web Client traffic volume:
CMU/SEI-2012-TR-006 | 58
rwfilter sample.rw --type=out,outweb --sipset=web_clients.set --
dport=80,8080,8000,443,1935,1755,554 --pass=stdout|rwuniq --fields=sip --
bytes
echo -e "\n######## Email ########"
echo Potential SMTP servers
rwfilter sample.rw --type=out --sport=25,465,110,995,143,993 --protocol=6 --
packets=4- --ack-flag=1 --pass=stdout|rwset --sip-file=smtpservers.set
rwfilter sample.rw --type=out --sport=25,465,110,995,143,993 --
sipset=smtpservers.set --protocol=6 --packets=4- --ack-flag=1 --
pass=stdout|rwuniq --fields=sip --bytes --sort-output
echo -e "\n"Potential SMTP clients:
rwfilter sample.rw --type=out --dport=110,143,587,993,995 --protocol=6 --
ack-flag=1 --packets=4- --pass=stdout|rwset --sip-file=email_clients.set
rwfilter sample.rw --type=out --dport=110,143,587,993,995 --protocol=6 --
ack-flag=1 --packets=4- --sipset=email_clients.set --pass=stdout|rwuniq --
fields=sip,dport --bytes --sort-output
echo -e "\n######## DNS ########"
echo DNS Servers:
rwfilter sample.rw --type=out --sport=53 --protocol=17 --pass=stdout|rwstats
--fields=sip --percentage=1 --packets --no-titles|cut -f 1 -d "|"|
rwsetbuild > dns_servers.set
rwsetcat dns_servers.set
echo -e "\n"DNS Clients:
rwfilter sample.rw --type=out --dport=53 --protocol=17 --pass=stdout|rwstats
--fields=sip --percentage=1 --packets --no-titles|cut -f 1 -d "|"|rwsetbuild
> dns_clients.set
rwsetcat dns_clients.set
echo -e "\n"Recursive DNS Servers:
rwsettool --intersect dns_clients.set dns_servers.set --output-
path=dns_recursive.set
rwsetcat dns_recursive.set
echo -e "\n"Iterative DNS Servers:
rwsettool --difference dns_servers.set dns_recursive.set --output-
path=dns_iterative.set
rwsetcat dns_iterative.set
echo -e "\n"DNS Client traffic:
rwfilter sample.rw --type=out --sipset=dns_clients.set --dport=53 --
pass=stdout|rwstats --fields=sip --percentage=1 --bytes
echo -e "\n######## VPN ########"
echo Potential VPNs:
rwfilter sample.rw --type=out --protocol=47,50,51 --pass=stdout|rwuniq --
fields=sip --no-titles|cut -f 1 -d "|" |rwsetbuild > vpn.set
rwfilter sample.rw --type=out --sipset=vpn.set --pass=stdout|rwuniq --
fields=sip,protocol --bytes --sort-output
echo -e "\n######## Remote File Services ########"
CMU/SEI-2012-TR-006 | 59
echo Potential FTP Servers:
rwfilter sample.rw --type=out --protocol=6 --packets=4- --ack-flag=1 --
sport=21 --pass=stdout|rwstats --fields=sip --percentage=1 --bytes --no-
titles|cut -f 1 -d "|"|rwsetbuild > ftpservers.set
rwsetcat ftpservers.set
rwfilter sample.rw --type=out --protocol=6 --packets=4- --ack-flag=1 --
sport=22 --pass=stdout|rwstats --fields=sip --percentage=1 --bytes --no-
titles|cut -f 1 -d "|"|rwsetbuild>ssh_servers.set
echo -e "\nPotential SSH Servers"
rwsetcat ssh_servers.set
echo -e "\n"Potential Telnet Servers:
rwfilter sample.rw --type=out --protocol=6 --packets=4- --ack-flag=1 --
sport=23 --pass=stdout|rwstats --fields=sip --percentage=1 --bytes --no-
titles|cut -f 1 -d "|"|rwsetbuild > telnet_servers.set
rwsetcat telnet_servers.set
echo -e "\n"Potential FTP Clients:
rwfilter sample.rw --type=out --protocol=6 --packets=4- --ack-flag=1 --
dport=21 --pass=stdout|rwstats --fields=sip --percentage=1 --bytes --no-
titles|cut -f 1 -d "|"|rwsetbuild > ftp_clients.set
rwsetcat ftp_clients.set
rwfilter sample.rw --type=out --protocol=6 --packets=4- --ack-flag=1 --
dport=22 --pass=stdout|rwstats --fields=sip --percentage=1 --bytes --no-
titles|cut -f 1 -d "|"|rwsetbuild > ssh_clients.set
echo
echo Potentail SSH Clients:
rwsetcat ssh_clients.set
rwfilter sample.rw --type=out --protocol=6 --packets=4- --ack-flag=1 --
dport=23 --pass=stdout|rwstats --fields=sip --percentage=1 --bytes --no-
titles|cut -f 1 -d "|"|rwsetbuild > telnet_clients.set
echo
echo Potential Telnet Clients:
rwsetcat telnet_clients.set
echo
echo FTP Servers making active connections:
rwfilter sample.rw --type=out --sipset=ftpservers.set --sport=20 --flags-
initial=S/SAFR --pass=stdout|rwuniq --fields=sip
echo
echo FTP Clients making active connections:
rwfilter sample.rw --type=out --dport=20 --sipset=ftp_clients.set --
pass=stdout|rwuniq --fields=sip
echo -e "\n######## Leftovers ########"
echo Servers:
rwfilter sample.rw --type=out --sport=1-19,24,26-52,54-499,501-1023 --
pass=stdout|rwstats --fields=sport --percentage=1
echo -e "\nClients:"
CMU/SEI-2012-TR-006 | 60
rwfilter sample.rw --type=out --dport=1-19,24,26-52,54-499,501-1023 --
pass=stdout| rwstats --fields=dport --percentage=1
Section 6 Script
This script uses an extended data sample to find any remaining active hosts. Profile these hosts
using the methods in Section 5.7.
#! /bin/bash
echo Number of unprofiled active hosts before expansion:
mv talkers.set talkers.txt
rwsettool --union *.set --output-path=profiled_assets.set
mv talkers.txt talkers.set
rwsettool --difference talkers.set profiled_assets.set --output-
path=not_profiled.set
rwsetcat not_profiled.set --count
sdate=2011/10/01:00
edate=2011/10/31:23
rwfilter --start-date=$sdate --end-date=$edate --type=out,outweb --not-
sipset=talkers.set --protocol=6 --packets=4- --ack-flag=1 --
pass=stdout|rwset --sip-file=tcp-talkers.set
rwfilter --start-date=$sdate --end-date=$edate --type=out --not-
sipset=talkers.set --protocol=0-5,7- --pass=stdout|rwset --sip-file=other-
talkers.set
rwsettool --union tcp-talkers.set other-talkers.set not_profiled.set --
output-path=new_unprofiled.set
echo Number of unprofiled hosts after expansion:
rwsetcat new_unprofiled.set --count
rm tcp-talkers.set
rm other-talkers.set
rm not_profiled.set
echo -e "\n"Profile the hosts below using Chapter 6
rwsetcat new_unprofiled.set
CMU/SEI-2012-TR-006 | 61
References
URLs are valid as of the publication date of this document.
[Lonvick 2006]
Lonvick, C. & Ylonen, T. The Secure Shell (SSH) Transport Layer Protocol (RFC 4253).
Network Working Group, Internet Engineering Task Force, January 2006.
http://www.ietf.org/rfc/rfc4253.txt
[Mockapetris 1987]
Mockapetris, P. Domain Names – Implementation and Specification (RFC 1035). Network
Working Group, Internet Engineering Task Force, November 1987.
http://www.ietf.org/rfc/rfc1035.txt
[OMB 2006]
Executive Office of the President. Memorandum for the Heads of Departments and Agencies (M-
06-16). Executive Office of the President, Office of Management and Budget, June 2006.
www.whitehouse.gov/omb/memoranda/fy2006/m06-16.pdf
[Postel 1983]
Postel, J. & Reynolds, J. Telnet Protocol Specification (RFC 854). Network Working Group,
Internet Engineering Task Force, May, 1983. http://www.ietf.org/rfc/rfc854.txt
[Postel 1985]
Postel, J. & Reynolds, J. File Transfer Protocol (FTP) (RFC 959). Network Working Group,
Internet Engineering Task Force, October 1985. http://www.ietf.org/rfc/rfc959.txt
[US-CERT 2008]
US-CERT. Multiple DNS Implementations Vulnerable to Cache Poisoning (VU#800113). US-
CERT, 2008. http://www.kb.cert.org/vuls/id/800113
CMU/SEI-2012-TR-006 | 62
REPORT DOCUMENTATION PAGE Form Approved
OMB No. 0704-0188
Public reporting burden for this collection of information is estimated to average 1 hour per response, including the time for reviewing instructions,
searching existing data sources, gathering and maintaining the data needed, and completing and reviewing the collection of information. Send comments
regarding this burden estimate or any other aspect of this collection of information, including suggestions for reducing this burden, to Washington
Headquarters Services, Directorate for information Operations and Reports, 1215 Jefferson Davis Highway, Suite 1204, Arlington, VA 22202-4302, and to
the Office of Management and Budget, Paperwork Reduction Project (0704-0188), Washington, DC 20503.
1. AGENCY USE ONLY 2. REPORT DATE 3. REPORT TYPE AND DATES
(Leave Blank) August 2012 COVERED
Final
4. TITLE AND SUBTITLE 5. FUNDING NUMBERS
Network Profiling Using Flow FA8721-05-C-0003
6. AUTHOR(S)
Austin Whisnant, Sid Faber
7. PERFORMING ORGANIZATION NAME(S) AND ADDRESS(ES) 8. PERFORMING ORGANIZATION
Software Engineering Institute REPORT NUMBER
Carnegie Mellon University CMU/SEI-2012-TR-006
Pittsburgh, PA 15213
9. SPONSORING/MONITORING AGENCY NAME(S) AND ADDRESS(ES) 10. SPONSORING/MONITORING
HQ ESC/XPK AGENCY REPORT NUMBER
5 Eglin Street ESC-TR-2012-006
Hanscom AFB, MA 01731-2116
11. SUPPLEMENTARY NOTES
12A DISTRIBUTION/AVAILABILITY STATEMENT 12B DISTRIBUTION CODE
Unclassified/Unlimited, DTIC, NTIS
13. ABSTRACT (MAXIMUM 200 WORDS)
This report provides a step-by-step guide for profiling—discovering public-facing assets on a network—using network flow (netflow) data.
Netflow data can be used for forensic purposes, for finding malicious activity, and for determining appropriate prioritization settings. The
goal of this report is to create a profile to see a potential attacker’s view of an external network.
Readers will learn how to choose a data set, find the top assets and services with the most traffic on the network, and profile several
services. A case study provides an example of the profiling process. The underlying concepts of using netflow data are presented so that
readers can apply the approach to other cases. A reader using this report to profile a network can expect to end with a list of public-
facing assets and the ports on which each is communicating and may also learn other pertinent information, such as external IP
addresses, to which the asset is connecting. This report also provides ideas for using, maintaining, and reporting on findings. The
appendices include an example profile and scripts for running the commands in the report. The scripts are a summary only and cannot
replace reading and understanding this report.
14. SUBJECT TERMS 15. NUMBER OF PAGES
network, profiling, inventory, servers, services, flow, netflow, traffic, situational awareness 75
16. PRICE CODE
17. SECURITY CLASSIFICATION OF 18. SECURITY CLASSIFICATION 19. SECURITY CLASSIFICATION 20. LIMITATION OF
REPORT OF THIS PAGE OF ABSTRACT ABSTRACT
Unclassified Unclassified Unclassified UL
NSN 7540-01-280-5500 Standard Form 298 (Rev. 2-89) Prescribed by ANSI Std. Z39-18
298-102
|---|--|--|--|
| 0 |  |  |  |