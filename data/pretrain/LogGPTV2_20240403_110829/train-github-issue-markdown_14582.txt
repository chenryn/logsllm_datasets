### Original Ticket: http://projects.scipy.org/numpy/ticket/1631 (2010-10-10)
**Reported by:** @nstange  
**Assigned to:** @charris

---

#### Issue Description

For NumPy 1.5.0, the test suite crashes with a `SIGBUS` in the following tests:
- "Test filled w/ flexible dtype ... Bus Error (core dumped)" in `numpy-1.5.0/numpy/ma/tests/test_core.py`
- "Test that 'exotic' formats are processed properly ... Bus Error (core dumped)" in `numpy-1.5.0/numpy/ma/tests/test_mrecords.py`

The problem is that SPARC processors require 8-byte values to be aligned at 8-byte memory boundaries. NumPy correctly identifies the misalignment (verified using gdb), and the fix is straightforward. The attached patch `02_put_mask_only_on_behaved_arrays.diff` addresses this by adding a check for `ISBEHAVED` (which includes `ISALIGNED` and `ISWRITABLE`) in addition to `ISCONTIGUOUS` in `PyArray_PutMask` (item_selection.c).

#### Additional Issues

After applying the above fix, another issue arises:
- A `SIGSEGV` in "Tests fields retrieval" (numpy-1.5.0/numpy/ma/tests/test_mrecords.py:77).

The problem is in `_copy_same_shape` (numpy-1.5.0/numpy/core/src/multiarrayctors.c:732) where `dest->dimensions == NULL`. Additionally, `maxaxis == -1` at that point. The attached patch `04_copy_from_same_shape_zerodim_fix.diff` provides a solution. There is one point in the patch where I am unsure about the correct position of `PyArray_INCREF(src);` and `PyArray_XDECREF(dest);`. Since I am not familiar with Python's reference counting, please review this part.

#### Further Observations

While debugging the `SIGSEGV` issue, I discovered another potential problem:
- In `PyArray_IterAllButAxis` (numpy-1.5.0/numpy/core/src/multiarray/iterators.c), `minaxis` is not set if the first nonzero stride is the smallest. The attached patch `03_fix_iterallbutaxis_minstride_search.diff` addresses this.

#### Current Test Suite Status

Despite the fixes, the test suite still fails with the following errors:
- **FAIL: Ticket #1897 second test**
  ```python
  Traceback (most recent call last):
  File "/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/site-packages/numpy/core/tests/test_regression.py", line 1255, in test_structured_arrays_with_objects2
  assert sys.getrefcount(strb) == numb
  AssertionError:
  7 = .getrefcount('aaaa')
  array([[(0L, 'aaaa'), (0L, 'aaaa')]], dtype=[('f0', '>i8'), ('f1', '|O4')])
  > > array([[(0L, 'aaaa'), (0L, 'aaaa')]], dtype=[('f0', '>i8'), ('f1', '|O4')])[array([[(0L, 'aaaa'), (0L, 'aaaa')]], dtype=[('f0', '>i8'), ('f1', '|O4')]).nonzero()] = array([[(0L, 'aaaa'), (0L, 'aaaa')]], dtype=[('f0', '>i8'), ('f1', '|O4')]).ravel()[:1]
  >  assert .getrefcount('bbbb') == 7
  >  assert .getrefcount('aaaa') == 7 + 2
  ```

- **FAIL: Test filled w/ mvoid**
  ```python
  Traceback (most recent call last):
  File "/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/site-packages/numpy/ma/tests/test_core.py", line 518, in test_filled_w_mvoid
  assert_equal(tuple(test), (1, default_fill_value(1.)))
  File "/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/site-packages/numpy/ma/testutils.py", line 94, in assert_equal
  return _assert_equal_on_sequences(actual, desired, err_msg='')
  File "/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/site-packages/numpy/ma/testutils.py", line 66, in _assert_equal_on_sequences
  assert_equal(actual[k], desired[k], 'item=%r\n%s' % (k,err_msg))
  File "/pf/m/m222086/xas/solaris10/python2/python-2.7-ve0-gcc/lib/python2.7/site-packages/numpy/ma/testutils.py", line 98, in assert_equal
  raise AssertionError(msg)
  AssertionError:
  Items are not equal:
  item=1
  ACTUAL: 2.0
  DESIRED: 1e+20
  ```

At least there are no more segfaults or bus errors. However, the `mvoid` class seems to be causing issues. Here is an example:
```python
import numpy as np
import numpy.ma as ma
import numpy.ma.core
from numpy.ma.core import *
x = ma.array([(1,2.)], mask=[(0,1)], dtype=[('a', int), ('b', float)])
print(x.filled())  # Output: [(1, 1e+20)]
x = mvoid((1,2.), mask=[(0,1)], dtype=[('a', int), ('b', float)])
print(x.filled())  # Output: (1, 2.0)
```

Since the `mvoid` masking does not work as expected, I cannot release this build to our scientists. Do you have any idea what the issue could be? Also, do you know what `mvoid` is? I cannot find any documentation about it. I am considering removing this class from my NumPy build, but I am concerned about potential dependencies outside of NumPy.

Best regards,  
Nicolai