title:POSTER: Mitigating Memory Sharing-based Side-channel Attack by Embedding
Random Values in Binary for Cloud Environment
author:Taehun Kim and
Youngjoo Shin
POSTER: Mitigating Memory Sharing-based Side-channel Attack
by Embedding Random Values in Binary for Cloud Environment
Taehun Kim
Kwangwoon University
Seoul, Republic of Korea
PI:EMAIL
ABSTRACT
Memory deduplication is a technique that eliminates duplicate phys-
ical pages among virtual machines (VMs). Despite the advantage of
efficient memory utilization in cloud computing, it leads to mem-
ory sharing-based side-channel attacks. Accordingly, most cloud
service providers nowadays disable the memory deduplication on
their servers to mitigate threats of the attacks, which comes at the
cost of the efficiency loss. In this paper, we propose a novel mitiga-
tion technique for cloud computing environments against memory
sharing-based side-channel attacks. Our technique converts vul-
nerable applications to secure ones that resist against the attacks.
In particular, we utilize binary instrumentation to embed a secret
random value inside an executable binary of the application. The
random value will prevent memory sharing of security-sensitive
applications with other from different security domains. On the
other hand, the application-specific approach allows the system-
wide memory deduplication, which preserves the efficient memory
usage. We present the design and implementation of proposed mit-
igation as well as its evaluation results.
KEYWORDS
Memory sharing-based side-channel attack; Binary instrumenta-
tion; Countermeasure; Cloud computing
ACM Reference Format:
Taehun Kim and Youngjoo Shin. 2020. POSTER: Mitigating Memory Sharing-
based Side-channel Attack by Embedding Random Values in Binary for
Cloud Environment. In Proceedings of the 15th ACM Asia Conference on
Computer and Communications Security (ASIA CCS ’20), October 5–9, 2020,
Taipei, Taiwan. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/
3320269.3405444
1 INTRODUCTION
Cloud service providers realize infrastructure-as-a-service (IaaS)
model with the help of virtualization technology [1]. In virtualization-
based multi-tenant infrastructure, there exists multiple virtual ma-
chines (VMs) on a same host that have numerous duplicate memory
pages. Hypervisors such as KVM and VMWare ESXi support mem-
ory deduplication technique to eliminate duplicate pages among
VMs. The memory deduplication will reduce the memory overhead
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6750-9/20/10.
https://doi.org/10.1145/3320269.3405444
Youngjoo Shin
Kwangwoon University
Seoul, Republic of Korea
PI:EMAIL
and thus help cloud service providers achieve cost savings up to
four times compared with memory compression [4].
However, this technique leads to memory sharing-based side-
channel attacks [2, 7, 9], which seriously threatens the security
of cloud computing. To mitigate security threats from the attacks,
cloud service providers disable memory deduplication on cloud
servers. Hypervisor vendors also turn off the deduplication feature
by default in their products [8]. Such kind of mitigations, however,
will come at the cost of the efficiency loss due to lack of memory
deduplication. We need to consider both security and efficiency
when designing mitigation techniques for cloud computing services.
Specifically, it is necessary to devise a technique that resists against
memory sharing-based side-channel attacks while preserving the
deduplication feature.
In this paper, we propose a novel mitigation technique for cloud
environments. This mitigation converts any vulnerable applica-
tions on cloud servers to secure ones that resist against the memory
sharing-based side-channel attacks. More specifically, this tech-
nique embeds secure random values into every executable page
of the application’s binary. The random values will prevent the
memory pages from being shared with other that belong to differ-
ent security domains. Unless an attacker knows those values, he
cannot mount the side-channel attack against the application. Most
importantly, the application-specific approach allows us to employ
the system-wide memory deduplication on cloud servers without
losing security.
Our implementation of this mitigation leverages a static binary
instrumentation technique. This implies that any modifications in
source code are not necessary to convert applications, which has a
huge advantage in deploying our technique to practical systems.
We present a detailed implementation of proposed mitigation
as well as its evaluation results in this paper. Throughout experi-
mental analysis, we validate the effectiveness of this mitigation for
mitigating memory sharing-based side-channel attacks.
The remainder of this paper is organized as follows. In Section
2, we provide background knowledge on the proposed technique.
In Section 3, we present a design of proposed mitigation and its
implementation. In Section 4, we analysis security of our technique
in terms of time complexity for attackers. Finally, we conclude this
paper and present some future work in Section 5.
2 BACKGROUND
2.1 Memory sharing-based side-channel attack
Cache side-channel attacks. This is an attack that extracts secret
value by exploiting race condition on shared cache [9]. Flush+Reload
is a typical memory sharing-based cache side-channel attack. It
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan919There are several challenging issues when implementing this
technique. The first problem is how to embed random values in
every executable pages, and the second is how to preserve program
semantics of the application after manipulation. We address these
problems as follows.
Inserting JMP instructions. Embedding random values in .text
section, where executable code is located, may corrupt the con-
trol flow and compromise the program semantics. We address this
problem by utilizing a jump-based trampoline instruction. Specif-
ically, we place a x86 jump instruction in the binary prior to the
location of the random value. This instruction branches to the orig-
inal instructions which are copied to a newly added text section
(i.e., .new_text). This way, we can prevent the processor from
recognizing the random values as illegal instructions.
Patching the binary. Inserting additional trampoline instructions
into the binary may induce misalignment between the modified
executable code and the relocation information. Even worse, it will
highly likely compromise the program semantics of x86-64 applica-
tions where PC-relative addressing mode is used. In order to avoid
such misalignment, we propose a patch-based binary instrumen-
tation technique. In this method, we look for candidate locations
in the executable code where there exist only certain instructions
that has no dependency on relocation information. Once found,
we copy these instructions to .new_text section and then replace
them with the JMP and the random values.
Fig. 1 illustrates how our method works. We create a new section
(i.e., .new_text) to the binary. We then choose the code block
3 in the original code as a location to be patched (Fig. 1a) and
copy original instructions to the new section. That is, we replace
instructions in the block with our trampoline instruction as well
as a random value. Following the copied code, we should append
another jump instruction so that it will return to the original control
flow (i.e., the code block 4) after execution (Fig. 1b).
As the memory layout remains the same after patching the bi-
nary, we can preserve the original program semantics.
3.1 Implementation
Now we describe our implementation of proposed mitigation in
detail. The overall structure of the implementation is depicted in
Fig. 2. We use LIEF [6] and disassembler objdump to implement this
mitigation.
Our mitigation is conducted in three different levels; instruction,
machine code and binary level. In instruction level, we add a new
section (i.e., .new_text) to binary of the target application. After
that, we examine and collect disassembled instructions as well as
machine code. In machine code level, we generate random values to
be embedded and then search for candidate instruction set in the
binary. By leveraging the fact that the candidate code block contains
no information related to symbol table, relocation information,
branch target and RIP-relative instructions, we can boost up the
searching by just filtering out certain instructions such as lea, call
and relative jumps. Once the code block has been found, we copy
the original instructions in the block to the .new_text section in
machine code. Then, we place our instructions and the random
value to that location. In binary level, we iterate the machine code
level procedure for each page in .text section.
(a) Original code
(b) Patch-based code
Figure 1: Comparison of Original and Patch-based code
consists of three phases: (1) Flush: The spy flushes the target cache
line shared with the victim. (2) Idle: The spy waits for a certain
amount of time while the victim accesses the shared sensitive data.
(3) Reload: The spy reloads the cache line. If the reload time is long,
it means that the victim did not access the shared data. Otherwise,
the victim accessed it. By leveraging such timing difference as a
side-channel, the spy can leak sensitive data.
Memory deduplication attacks. This attack exploits a copy-on-
write (CoW) mechanism of memory deduplication to infer secret
data [2, 7] of other VMs. It consists of three phases: (1) Phase 1: The
spy VM maps candidates of a victim’s target page to memory. (2)
Phase 2: After waiting for a certain amount of time, the hypervisor
may perform deduplication over memory pages. (3) Phase 3: The
spy measures write-access latency on all the candidate pages. A
write operation to merged pages will take longer than other pages.
Such timing difference also gives a side-channel by which a secret
information can be leaked.
2.2 Static Binary Instrumentation
Static binary instrumentation (SBI) is a technique that manipulates
an executable binary of application to reinforce its security against
control-flow hijacking attacks [3, 10]. Since SBI directly manipu-
lates the application at the binary level, it has to consider adjust-
ment of relocating information to preserve the program semantics.
MULTIVERSE [3] is one of SBI frameworks which is applicable to
x86 COTS executable binaries. We re-purpose it to embed secure
random values in every executable page of target applications.
3 THE PROPOSED TECHNIQUE
We propose a mitigation technique against memory sharing-based
side-channel attacks. Our technique can be used without disabling
memory deduplication, thus achieves both security and efficiency
in cloud computing.
In particular, this technique attempts to embed fixed-size (i.e., 8
bytes) random values in every page that belongs to .text section
of the target application. The random value will prevent the page
from being shared with other processes. Unless an attacker has
information about the value, it is infeasible to infer any secrets
through memory sharing-based side-channel attacks. We utilize
SBI to manipulate the binary and to embed the random values.
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan920Figure 2: The architecture of proposed mitigation
In order to maintain the control flow of original application,
we need to correctly select the jmp instruction and calculate its
operand. For this, we utilize jmpq instruction. It has the property of
a near jump, PC-relative (i.e.,"jmp rel32") [5]. The length of jmpq
is 5 bytes, where it is composed of 1 byte opcode (i.e., 0xE9) and 4
byte operand (i.e., PC-relative destination address). We calculate
the operand by using Equation (1). We also added a new section
(i.e., .new_text) after the last section in binary. Therefore, when
determining the operand of the jmpq instruction that transfers the
control flow from .text to .new_text section, there is no problem
because the destination address has a larger than the PC. However,
in the opposite case, since the destination address is smaller than
the PC, a negative operand is obtained. In this case, we can maintain
the correct control flow using two’s complement.
𝑗𝑚𝑝𝑞 𝑜𝑝𝑒𝑟𝑎𝑛𝑑 = 𝑑𝑒𝑠𝑡𝑖𝑛𝑎𝑡𝑖𝑜𝑛 𝑎𝑑𝑑𝑟𝑒𝑠𝑠 − 𝑃𝐶 − 5
(1)
4 EVALUATION
In this section, we evaluate the security of our proposed technique
by measuring the time complexity of attacks.
We conducted an experiment on a host machine with Intel Core
i5-7400 3.00GHz processor and 16GB memory. We also configured
a virtualized environment on the same host machine running KVM,
consisting of two VMs with 4GB memory and Ubuntu 18.04 LTS.
A target application was compiled with gcc 7.5.0 on Intel x86-64
architecture and then translated by using proposed technique.
During the experiment, we executed a spy program that mounts
two kinds of attacks, cache side-channel attack (CSA) and memory
deduplication attack (MDA), against the target application. The
CSA and MDA programs are built based on Yarom et al. [9] and
Barresi et al. [2], respectively.
We denote N by the size of random values to be embedded in each
page. We also denote by 𝛼 and 𝛽 the execution time for CSA and
MDA against proposed mitigation-applied target applications. The
time complexity for the attackers can be represented as Equation
(2), (3). Based on these equations, we know that the time complexity
is proportional to the size of the embedded random values.
𝑇𝐶𝑆𝐴 = 2(𝑁×8)−1 × 𝛼 (𝑚)
𝑇𝑀𝐷𝐴 = 2(𝑁×8)−1 × 𝛽 (𝑚)
(2)
(3)
Figure 3: The time complexity of attack against proposed
mitigation-enabled applications
Fig. 3 shows the time complexity of the side-channel attacks.
When embedding 8 bytes random values in binary, 𝑇𝐶𝑆𝐴 and 𝑇𝐷𝑀𝐴
take average 48 × 1010 and 48 × 1012 years, respectively.
5 CONCLUSION AND FUTURE WORK
In this paper, we proposed a novel mitigation technique against
memory sharing-based side-channel attacks. This mitigation can
be used with memory deduplication because random values are
embedded only to security-sensitive application. In our evaluation,
we quantified and evaluated the time complexity of this mitigation.
In the future, we will expand our research on huge page (2MB), size
overhead, run time and load time overhead.
ACKNOWLEDGEMENT
This work was supported by Institute of Information & communi-
cations Technology Planning & Evaluation (IITP) grant funded by
the Korea government(MSIT) (No.2019-0-00533, Research on CPU
vulnerability detection and validation)
REFERENCES
[1] Amazon. 2020. Customer Success Powered by the AWS Cloud. [Online]. Available:.
http://aws.amazon.com/solutions/case-studies/
[2] Antonio Barresi, Kaveh Razavi, Mathias Payer, and Thomas R Gross. 2015. CAIN:
Silently Breaking ASLR in the Cloud. 9th USENIX Workshop on Offensive Tech-
nologies (WOOT 15) (2015).
[3] Erick Bauman, Zhiqiang Lin, and Kevin W. Hamlen. 2018. Superset Disassembly:
Statically Rewriting x86 Binaries Without Heuristics. In NDSS.
[4] Yuhui Deng, Xinyu Huang, Liangshan Song, Yongtao Zhou, and Frank Z Wang.
2017. Memory Deduplication: An Effective Approach to Improve the Memory
System . In Journal of Information Science and Engineering, 33 (5). 1103–1120.
[5] Part Guide. 2016. Intel® 64 and IA-32 architectures software developers manual.
Volume 2 (2A, 2B, 2C & 2D): Instruction Set Reference, A-Z, 2016.
[6] Quarkslab. 2020. Library to Instrument Executable Formats. [Online]. Available:.
https://github.com/lief-project/LIEF
[7] Kuniyasu Suzaki, Kengo Iijima, Toshiki Yagi, and Cyrille Artho. 2011. Memory
deduplication as a threat to the guest OS. Proceedings of the Fourth European
Workshop on System Security - EUROSEC ’11 (2011), 1–6.
[8] VMware. 2020. Security considerations and disallowing inter-Virtual Machine
Transparent Page Sharing. [Online]. https://kb.vmware.com/s/article/2080735
[9] Yuval Yarom and Katrina Falkner. 2014. FLUSH+RELOAD: A High Resolution,
Low Noise, L3 Cache Side-Channel Attack. In 23rd USENIX Security Symposium.
San Diego, CA, 719–732.
[10] Mingwei Zhang and R. Sekar. 2013. Control Flow Integrity for COTS Binaries. In
22nd USENIX Security Symposium. Washington, D.C., 337–352.
Poster Session ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan921