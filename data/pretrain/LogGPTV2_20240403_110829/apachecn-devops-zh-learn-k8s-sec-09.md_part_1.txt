# 九、DevOps 管道中的映像扫描
在开发生命周期的早期阶段发现缺陷和漏洞是一个很好的实践。识别问题并在早期修复它们有助于提高应用的健壮性和稳定性。它还有助于减少生产环境中的攻击面。保护 Kubernetes 集群必须覆盖整个 DevOps 流。类似于强化容器映像并在工作负载清单中限制强大的安全属性，映像扫描可以帮助改善开发端的安全状况。然而，映像扫描绝对可以超越这一点。
在这一章中，首先我们将介绍映像扫描的概念和漏洞，然后我们将谈论一个流行的开源映像扫描工具 **Anchore Engine** ，并向您展示如何使用它来进行映像扫描。最后，我们将向您展示如何将映像扫描集成到 CI/CD 管道中。
学完这一章，你应该熟悉了映像扫描的概念，用 Anchore Engine 扫描映像感觉很舒服。更重要的是，如果到目前为止还没有，您需要开始考虑将映像扫描集成到您的 CI/CD 管道中的策略。
我们将在本章中讨论以下主题:
*   介绍容器映像和漏洞
*   使用锚定引擎扫描映像
*   将映像扫描集成到配置项/光盘管道中
# 介绍容器映像和漏洞
映像扫描可用于识别映像中的漏洞或违反最佳实践的情况(取决于映像扫描仪的能力)。漏洞可能来自映像中的应用库或工具。在我们进入映像扫描之前，最好多了解一点容器映像和漏洞。
## 容器映像
容器映像是一个文件，它捆绑了微服务二进制文件、它的依赖关系、微服务的配置等等。如今，应用开发人员不仅要编写代码来构建微服务，还需要构建一个映像来封装应用。有时应用开发人员可能不遵循安全最佳实践来编写代码或从未经认证的来源下载库。这意味着漏洞可能存在于您自己的应用或应用所依赖的依赖包中。但是，不要忘记您使用的基本映像，它可能包括另一组易受攻击的二进制文件和包。首先，让我们看看映像是什么样子的:
```
$ docker history kaizheh/anchore-cli
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
76b8613d39bc        8 hours ago         /bin/sh -c #(nop) COPY file:92b27c0a57eddb63…   678B                
38ea9049199d        10 hours ago        /bin/sh -c #(nop)  ENV PATH=/.local/bin/:/us…   0B                  
525287c1340a        10 hours ago        /bin/sh -c pip install anchorecli               5.74MB              
f0cbce9c40f4        10 hours ago        /bin/sh -c apt-get update && apt-get install…   423MB               
a2a15febcdf3        7 months ago        /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B                  
           7 months ago        /bin/sh -c mkdir -p /run/systemd && echo 'do…   7B                  
           7 months ago        /bin/sh -c set -xe   && echo '#!/bin/sh' > /…   745B                
           7 months ago        /bin/sh -c [ -z "$(apt-get indextargets)" ]     987kB               
           7 months ago        /bin/sh -c #(nop) ADD file:c477cb0e95c56b51e…   63.2MB       
```
前面的输出显示了映像的文件层`kaizheh/anchore-cli`(显示带有`--no-trunc`标志的完整命令)。您可能会注意到，每个文件层都有相应的命令来创建它。在每个命令之后，会创建一个新的文件层，这意味着映像的内容已经一层一层地更新了(基本上，Docker 的工作原理是写时复制)，您仍然可以看到每个文件层的大小。这很容易理解:当您安装新的软件包或向基础中添加文件时，映像大小会增加。`missing`映像标识是一个已知的问题，因为 Docker Hub 只存储叶层的摘要，而不存储父映像中的中间摘要。然而，之前的映像历史确实告诉了映像是如何在 Dockerfile 中的，如下所示:
```
FROM ubuntu
RUN apt-get update && apt-get install -y python-pip jq vim
RUN pip install anchorecli
ENV PATH="$HOME/.local/bin/:$PATH"
COPY ./demo.sh /demo.sh
```
前面的 Dockerfile 的工作原理描述如下:
1.  为了构建 `kaizheh/anchore-cli` 映像，我选择从 `ubuntu` 构建。
2.  然后，我安装了软件包`python-pip`、`jq`和`vim`。
3.  接下来，我用上一步安装的`pip`安装`anchore-cli`。
4.  然后我配置了环境变量路径。
5.  最后，我将一个 shell 脚本`demo.sh`复制到映像中。
下图显示了映射到 Dockerfile 指令的映像文件层:
![Figure 9.1 – Dockerfile instructions map to image file layers ](img/B15566_09_001.jpg)
图 9.1–docker file 指令映射到映像文件层
你不必记住每一层都添加了什么。归根结底，容器映像是一个压缩文件，包含应用所需的所有二进制文件和包。当从映像创建容器时，容器运行时提取映像，然后专门为提取的映像内容创建一个目录，然后在启动映像之前为映像中的入口点应用配置 chroot、cgroup、Linux 名称空间、Linux 功能等。
现在您知道了容器运行时从映像启动容器的神奇之处。但是你仍然不确定你的映像是否容易被攻击。让我们看看映像扫描真正在做什么
## 检测已知漏洞
人都会犯错开发者也会犯错。如果应用中的缺陷可被利用，这些缺陷就会成为安全漏洞。有两种类型的漏洞——一种是已被发现的漏洞，另一种是未知的漏洞。安全研究人员、渗透测试人员和其他人非常努力地寻找安全漏洞，以使相应的修复降低危害的可能性。修补安全漏洞后，开发人员会将修补程序作为更新应用到应用中。如果这些更新没有按时应用，应用就有被破坏的风险。如果这些已知的安全问题被恶意的家伙利用，将会给公司造成巨大的损失。
在本节中，我们不打算讨论如何寻找安全漏洞。让安全研究人员和道德黑客做他们的工作。相反，我们将讨论如何通过执行漏洞管理来发现和管理那些由映像扫描工具发现的已知漏洞。此外，我们还需要知道漏洞是如何被跟踪并在社区中共享的。那么，我们来说说 CVE 和 NVD。
### 漏洞数据库简介
**CVE** 代表**常见漏洞和暴露**。当发现漏洞时，会为其分配一个唯一的标识号，以及一个描述和公共参考。通常，描述中包含受影响的版本信息。这是一个 CVE 条目。每天都有数百个漏洞被识别，并获得由 MITRE 分配的唯一 CVE 标识。
**NVD** 代表**国家脆弱性数据库**。它会同步 CVE 列表。一旦 CVE 名单有了新的更新，新的 CVE 将立即出现在 NVD。除了 NVD，还有一些其他可用的漏洞数据库，如 Synk。
以一种简单的方式解释映像扫描工具的神奇之处:映像扫描工具提取映像文件，然后在映像中查找所有可用的包和库，并在漏洞数据库中查找它们的版本。如果有任何软件包的版本与漏洞数据库中的任何 CVE 描述相匹配，映像扫描工具将报告映像中存在漏洞。如果在容器映像中发现漏洞，您不应该感到惊讶。那么，你打算怎么处理他们？你需要做的第一件事是保持冷静，不要惊慌。
### 管理漏洞
有了漏洞管理策略，就不会慌了。一般来说，每个漏洞管理策略都将从基于 CVE 细节了解漏洞的可利用性和影响开始。NVD 提供了一个漏洞评分系统，也称为**通用漏洞评分系统** ( **CVSS** )来帮助您更好地了解漏洞有多严重。
根据您对漏洞的理解，需要提供以下信息来计算漏洞得分:
*   **攻击向量**:攻击是网络攻击、本地攻击还是物理攻击
*   **攻击复杂性**:利用漏洞有多难
*   **所需权限**:漏洞利用是否需要任何权限，如 root 或非 root
*   **用户交互**:漏洞利用是否需要任何用户交互
*   **范围**:漏洞是否会导致跨安全域
*   **保密性影响**:漏洞利用对软件保密性的影响有多大
*   **完整性影响**:漏洞利用对软件完整性的影响有多大
*   **可用性影响**:漏洞利用对软件可用性的影响有多大
CVSS 计算器可在 https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator 获得:
![Figure 9.2 – CVSS calculator ](img/B15566_09_002.jpg)
图 9.2–CVSS 计算器
虽然前面截图中的输入字段只覆盖了基本得分指标，但它们是决定漏洞关键程度的基本因素。还有另外两个度量标准可以用来评估漏洞的严重性，但是我们不会在这一部分讨论它们。根据 CVSS(第 3 版)，有四个评分范围:
*   **低** : 0.1-3.9
*   **中** : 4-6.9
*   **高** : 7-8.9
*   **临界** : 9-10
通常，映像扫描工具会在报告映像中的任何漏洞时提供 CVSS 评分。在您采取任何响应措施之前，漏洞分析至少还有一个步骤。您需要知道漏洞的严重性也可能受到您自己的环境的影响。让我举几个例子:
*   该漏洞只能在 Windows 中利用，但基本操作系统映像不是 Windows。
*   可以通过网络访问利用该漏洞，但映像中的进程仅发送出站请求，从不接受入站请求。
前面的场景展示了很好的例子，CVSS 分数并不是唯一重要的因素。您应该关注关键且相关的漏洞。然而，我们的建议仍然是明智地优先考虑漏洞，并尽快修复它们。
如果在映像中发现漏洞，最好尽早修复。如果在开发阶段发现了漏洞，那么你应该有足够的时间去响应。如果在运行的生产集群中发现漏洞，您应该修补映像，并在修补程序可用时立即重新部署。如果补丁不可用，制定缓解策略可以防止集群受损。
这就是为什么映像扫描工具对您的配置项/光盘管道至关重要。在一节中介绍漏洞管理是不现实的，但我认为对漏洞管理的基本了解将帮助您最大限度地利用任何映像扫描工具。有一些流行的开源映像扫描工具可用，如 Anchore、Clair、Trivvy 等。让我们用例子来看一个这样的映像扫描工具。
# 使用锚定引擎扫描映像
Anchore Engine 是一个开源的映像扫描工具。它不仅分析 Docker 映像，而且允许用户定义接受映像扫描策略。在这一节中，我们将首先对 Anchore Engine 进行高层次的介绍，然后我们将展示如何部署 Anchore Engine，以及如何使用 Anchore 自带的 CLIl、`anchore-cli`来部署 Anchore Engine 的基本映像扫描用例。
## 锚定发动机简介
当映像提交给 Anchore Engine 进行分析时，Anchore Engine 会首先从映像注册表中检索映像元数据，然后下载映像并对映像进行排队分析。以下是 Anchore Engine 将分析的项目:
*   映像元数据
*   映像层
*   操作系统包，如`deb`、`rpm`、`apkg`等
*   文件数据
*   Application dependency packages:
    -红宝石
    - Node.js NPMs
    - Java 档案
    - Python 包
*   文件内容
要在 Kubernetes 集群中使用 **Helm** —CNCF 项目部署 Anchore Engine ，该项目是 Kubernetes 集群的包管理工具，请运行以下命令:
```
$ helm install anchore-demo stable/anchore-engine
```
Anchore Engine 由几个微服务组成。当部署在 Kubernetes 集群中时，您会发现以下工作负载正在运行:
```
$ kubectl get deploy
NAME                                      READY   UP-TO-DATE   AVAILABLE   AGE
anchore-demo-anchore-engine-analyzer      1/1     1            1           3m37s
anchore-demo-anchore-engine-api           1/1     1            1           3m37s
anchore-demo-anchore-engine-catalog       1/1     1            1           3m37s
anchore-demo-anchore-engine-policy        1/1     1            1           3m37s
anchore-demo-anchore-engine-simplequeue   1/1     1            1           3m37s
anchore-demo-postgresql                   1/1     1            1           3m37s
```
Anchore Engine 将映像扫描服务分离到前面日志中显示的微服务中:
*   **API** :接受映像扫描请求
*   **目录**:维护映像扫描作业的状态
*   **策略**:加载映像分析结果并进行策略评估
*   **分析器**:从映像注册表中提取映像并执行分析
*   **简单队列**:对映像扫描任务进行排队
*   **PostgreSQL** :存储映像分析结果和状态
现在 Anchore Engine 在 Kubernetes 集群中成功部署，让我们看看如何用`anchore-cli`进行映像扫描。
## 用锚线扫描映像
锚定引擎支持从 RESTful 应用编程接口和`anchore-cli`访问。`anchore-cli`迭代使用起来很方便。`anchore-cli`不需要在 Kubernetes 集群中运行。您需要配置以下环境变量来启用对锚定引擎的命令行界面访问:
*   `ANCHORE_CLI_URL`:锚定引擎 API 端点
*   `ANCHORE_CLI_USER`:访问锚定引擎的用户名
*   `ANCHORE_CLI_PASS`:进入锚定引擎的密码
成功配置环境变量后，您可以使用以下命令验证与锚定引擎的连接: