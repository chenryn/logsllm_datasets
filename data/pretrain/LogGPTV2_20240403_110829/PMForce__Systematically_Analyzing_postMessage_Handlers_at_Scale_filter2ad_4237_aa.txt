title:PMForce: Systematically Analyzing postMessage Handlers at Scale
author:Marius Steffens and
Ben Stock
PMForce: Systematically Analyzing
postMessage Handlers at Scale
Marius Steffens and Ben Stock
CISPA Helmholtz Center for Information Security
{marius.steffens,stock}@cispa.saarland
ABSTRACT
The Web has become a platform in which sites rely on intricate
interactions that span across the boundaries of origins. While the
Same-Origin Policy prevents direct data exchange with documents
from other origins, the postMessage API offers one relaxation that
allows developers to exchange data across these boundaries. While
prior manual analysis could show the presence of issues within
postMessage handlers, unfortunately, a steep increase in postMes-
sage usage makes any manual approach intractable. To deal with
this increased work load, we set out to automatically find issues in
postMessage handlers that allow an attacker to execute code in the
vulnerable sites, alter client-side state, or leak sensitive information.
To achieve this goal, we present an automated analysis frame-
work running inside the browser, which uses selective forced ex-
ecution paired with lightweight dynamic taint tracking to find
traces in the analyzed handlers that end in sinks allowing for code-
execution or state alterations. We use path constraints extracted
from the program traces and augment them with Exploit Templates,
i.e., additional constraints, ascertaining that a valid assignment
that solves all these constraints produces a code-invoking or state-
manipulating behavior. Based on these constraints, we use Z3 to
generate postMessages aimed at triggering the insecure functional-
ity to prove exploitability, and validate our findings at scale.
We use this framework to conduct the most comprehensive
experiment studying the security issues of postMessage handlers
found throughout the top 100,000 most influential sites yet, which
allows us to find potentially exploitable data flows in 252 unique
handlers out of which 111 were automatically exploitable.
CCS CONCEPTS
• Security and privacy → Web application security.
KEYWORDS
taint analysis; forced execution; large-scale analysis; XSS
ACM Reference Format:
Marius Steffens and Ben Stock. 2020. PMForce: Systematically Analyzing
postMessage Handlers at Scale. In Proceedings of the 2020 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’20), November
9–13, 2020, Virtual Event, USA. ACM, New York, NY, USA, 13 pages. https:
//doi.org/10.1145/3372297.3417267
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417267
1 INTRODUCTION
The web that we know today heavily relies on the intricate inter-
play of various services that jointly contribute to the plethora of
feature-rich applications that we have grown fond of over the years.
This interconnectivity, however, would not be possible without
controlled relaxations of the web’s fundamental security principle,
i.e., the Same-Origin Policy (SOP). The SOP sets a clear security
boundary that protects the integrity of web sites by restricting how
content from different origins (i.e., the tuple of protocol, host, and
port) may interact with one another. That is, an attacker’s page
cannot read or modify the content of a banking application by
accessing the frame or read content from other origins. Sharing
data across origins can be very beneficial to users, e.g., having one
central billing provider which can be used on various online shops
removes the need to provide payment information to all the par-
ties. The shop can then share the invoice with the service provider,
which handles confirmation of the user and billing, and then no-
tifies the shop that the transaction was successful. The shop can
then continue with the shipping process and provide the user with
real-time information about the checkout process.
One such mechanism introduced to allow for the sharing of data
across origin boundaries is the postMessage API. It allows sending
serializable JavaScript objects from one frame to another by making
use of the postMessage function that is accessible cross-origin on
any frame. The receiving frame can register JavaScript callback
functions that are invoked when a postMessage is dispatched to
the current frame. The postMessage API provides the means to
ascertain the integrity and confidentiality of messages. However,
these mechanisms are purely optional. As Son and Shmatikov [24]
could show back in 2013 via manual analysis, postMessage handlers
are frequently exposing security-critical functionality while not
checking the integrity of messages at all or doing so incorrectly.
In various cases, these handlers could be abused to achieve Cross-
Site Scripting (XSS), which allows an attacker to exfiltrate data
and perform actions on behalf of the user. Besides introducing
XSS, postMessage handlers can be abused to manipulate client-side
state (such as cookies and localStorage) or leak the very same state
to attackers. As shown in a recent study by Stock et al. [26], the
amount of sites making use of cross-origin communication using
the postMessage API has increased between 2013 and 2016 by more
than 20% among the top 500 sites. In fact, our crawls show that
among the top 100,000 sites we can find over 27,000 hash-unique
handlers. Given this widespread usage of postMessages, we can
no longer meaningfully rely on manual efforts to reason about the
state of postMessage handler security.
To tackle this issue, we present the first automated pipeline,
which allows us to analyze the security- and privacy-sensitive be-
havior of postMessage handlers across the web. We leverage forced
1
2
3
4
5
6
7
8
9
execution with lightweight dynamic taint tracking techniques to
explore the complete behavior of handler functions and extract
potentially vulnerable program traces. By using an SMT solver on
the path constraints extracted from these traces, we can generate
postMessages that trigger the dangerous behavior. Furthermore, we
augment our traces by encoding exploitation criteria on the data
flows, allowing us to generate exploit candidates, which we validate
automatically. Contrary to previous approaches, which had to rely
on patched browsers or reduced JavaScript language features, our
complete pipeline runs as an in-browser solution, without the need
to change the underlying JavaScript engine.
We report on a study of the postMessage handlers of the top
100,000 sites, according to Tranco [19]. We find 111 unique handlers
with validated flaws, affecting 379 sites. Of those, due to insufficient
origin checks, 219 sites can be trivially exploited by any attacker.
To sum up, our work makes the following contributions:
• We present a dynamic execution framework for JavaScript,
augmented with forced execution and taint tracking, that au-
tomatically collects security- and privacy-relevant program
traces from postMessage handlers in Section 3.
• Based on these traces, we show the feasibility of encoding
exploitability constraints in Section 4, which allow us to
automatically generate payloads that trigger malicious func-
tionality using a state-of-the-art SMT solver.
• With this pipeline in place, we report on the most compre-
hensive study of the threats of postMessage handlers as of
today in Section 5. We analyze the top 100,000 web sites,
uncovering abusable security issues on 379 sites from which
219 are trivially exploitable.
2 BACKGROUND AND RELATED WORK
In this section, we provide the necessary background information
for our paper. In particular, we briefly discuss the underlying mech-
anism of postMessages and which attacker models we consider
for our analyses and how these might interact with the handler
functions of the target site. Subsequently, we outline how our work
relates to prior work.
2.1 Background and Attacker Models
The fundamental security boundary of the web is the so-called
Same-Origin Policy (SOP). The SOP restricts interaction among
resources that do not share the same origin by default, e.g., two
frames cannot access one another if their origin differs. However,
such two frames might need to exchange data to allow users a
seamless integration of services, e.g., a website using a third-party
payment provider that handles the billing of the customer. To enable
such use cases, the postMessage API was introduced to allow for
controlled relaxations of the SOP. In the setting of postMessages,
one frame sends a postMessage containing arbitrary, serializable
data to another frame by calling the postMessage functionality
on a handle to the other frame. While the SOP disallows access
to functions on cross-origin frames, the postMessage function is
an exemption by design to enable cross-origin communication. If
the receiving frame has a postMessage handler registered, it will
be called with an event that contains the sent data (event.data),
// running at https://foo.com
function handler(event){
if(event.origin == 'https://bar.org' && event.data == 'Ping')
event.source.postMessage('Pong','https://bar.org')
}
window.addEventListener('message', handler);
// running at https://bar.org
foo_window.postMessage('Ping', 'https://foo.com')
Figure 1: Simple postMessage example
alongside the origin (event.origin) of the sender frame and a
handle to the sender frame (event.source), as shown in Figure 1.
While the postMessage API allows for both the enforcement of
integrity and confidentiality of messages, these guarantees are not
provided by default. In our example, integrity is enforced by check-
ing that the message originates from https://bar.org before ex-
ecuting our intended functionality. Confidentiality is achieved by
fixing the second parameter of the postMessage call to the desired
destination origin. In the example, this is set to https://foo.com
as the browsers enforces that the postMessage is only sent when
the origin of the frame matches the supplied origin. That is, should
the frame have been navigated away for some reason, the message
will not be leaked to another origin.
Our work aims at automatically finding security- and privacy-
sensitive functionalities inside such handlers, which can be ex-
ploited using standard attacker models, i.e., the web attacker. Once
the victim visits the attacker’s site, the attacker’s JavaScript can get
a handle to the target page, either via iframes, popups, or newly
created tabs, and then send postMessages to the target page. De-
pending on whether a registered handler performs checks on the
origin, the attacker might need to control specific domains. In our
example above, an attacker needs to be able to send a postMessage
from the origin of https://bar.com to trigger functionality.
We are interested in understanding how many handlers conduct
security- and privacy-sensitive behavior that can be used across
origins. In particular, out of this set of sites, we want to investigate
how many of those could be abused by an attacker, e.g., because
they lack proper integrity checks, to compromise the site. For our
work, we set out to find four types of security- and privacy-related
issues, as depicted in Figure 2:
Cross-Site Scripting (XSS). If a postMessage handler uses data
sent via a postMessage in the context of a native function that
performs a string-to-code conversion, such as document.write or
eval, the attacker can send a message containing a payload that
they want to have executed within the vulnerable site. An attacker
might leverage this to steal confidential information or perform
actions on behalf of the user.
State Manipulation. When the sent data is used in an assignment
to document.cookie or a localStorage value, the attacker can tam-
per with the client-side state. Such state is frequently used inside
the site, bearing the risk of introducing persistent client-side XSS
[25] or undermining the efficacy of security mechanisms deployed
by the site. More concretely, if an attacker can arbitrarily change
cookies for a given site, they may change the value of a Double Sub-
mit cookie [17] and thus be able to circumvent Cross-Site Request
Forgery protections or perform Session Fixation attacks [18].
1
2
3
4
5
6
7
8
9
10
11
12
13
14
function handler(event){
switch(event.data.mode){
case 'xss':
eval(event.data.xss)
case 'state':
document.cookie = event.data.cookie
localStorage[event.data.key] = event.data.value
case 'launder':
let frame = document.getElementById('other_window');
frame.contentWindow.postMessage(event.data, '*')
case 'leak':
event.source.postMessage(document.cookie, '*')
}
}
Figure 2: Four types of PM handler vulnerabilities
PM Origin Laundering. Given a postMessage handler that relays
received postMessages, an attacker can leverage this functionality
to launder their origin and use the origin of the vulnerable handler
to circumvent otherwise secure origin checks. In this scenario, the
attacker needs to position the frame, which should receive the
laundered message relative to where the vulnerable frame relays
this message. In the example depicted in Figure 2, the attacker can
redirect the frame that is fetched from the DOM as discussed by
Barth et al. [3], by using the window.frames property.
Privacy Leaks. When a postMessage handler sends out private
information, such as user preferences or session information, to
another frame when requested to do so, an attacker can potentially
trigger this action and leak sensitive information. Such information
may be fetched from cookies or localStorage and then sent to the
frame, which sent the original message as depicted in Figure 2.
2.2 Related Work
Our related work is mainly distributed among two axes, the first
one being the feasibility of applying advanced program analysis
techniques such as forced execution and symbolic/concolic exe-
cution to web sites, whereas the second area is the identification
of security and privacy threats on the web at scale. Naturally, the
underlying techniques have been applied in various other domains,
e.g., binaries [22] or LLVM IR [5], however, we mainly focus on the
area of the web as it introduces its own set of challenges.
Advanced Program Analysis Techniques for Web Security. Saxena
et al. [20] used symbolic execution, which was patched into the
WebKit engine, to find injection vulnerabilities in web sites automat-
ically. They utilized their engine to generate test cases, which were
then further analyzed using dynamic taint tracking approaches
combined with fuzzing techniques to find XSS. We purposely chose
forced execution over symbolic execution, as our approach only
needs to conduct the costly constraint solving step when we have
found an interesting trace in the program, as we are only interested
in a small subset of all behavior constituting a normal postMessage
handler. Similarly to the aforementioned work, Li et al. [11] built
a symbolic execution engine with added event exploration mech-
anisms guided by a taint analysis. In contrast, Kolbitsch et al. [9]
picked up on the idea of symbolic execution for malware detection
and added what they dubbed Multi Execution, which allows cover-
ing multiple symbolic paths in one execution simultaneously. Since
postMessage handlers found in the wild are not actively trying to
subvert analysis, e.g., by provoking path explosions, the number
of paths that need to be explored are typically reasonable, which
lessens the need for a Multi Execution framework. Additionally,
choosing such an approach would incur changes to the underly-
ing JavaScript engine. Hu et al. [7] built forced execution atop
the Webkit engine to find malicious Javascript code. Contrary, to
their approach, we opt to implement a selective forced execution
framework, which allows us to only forcefully execute PM handlers,
while the rest of the code runs normally. Kim et al. [8] presented a
crash-free forced execution engine built atop Webkit with a similar
goal of uncovering malicious Javascript. Among other things, their
engine handles missing DOM elements and exceptions to advance
further into the malicious parts of the code. Since our attacker
model cannot influence the presence of DOM elements by itself,
we are restricted with the environment that is currently present in
the page. Therefore, artificially handling such cases would produce
infeasible paths that cannot be exploited. Modeling real-world be-
havior of modern web sites requires extensive support for string
operations and regular expressions in the logic of the constraint
solver, which has been an ongoing line of research [12, 20, 27, 28]
for several years.
While our work shares the common theme of applying advanced
programming techniques to the web, we show the feasibility of
moving most of the building blocks, i.e., forced execution, dynamic
taint analysis, and exploit/test generation, to an in-browser solution.
We apply all these building blocks to the domain of postMessage
handlers and show the feasibility of modeling in-the-wild behavior
in a state-of-the-art SMT solver and discuss how we can augment
collected constraints to find exploitable handlers automatically. This
enables our approach to be seamlessly migrated to newer browsers
with added features, allowing easy extension to new APIs if needed.
Large-Scale Analyses on the Web’s Security and Privacy. We now
turn towards discussing related works concerning the security and