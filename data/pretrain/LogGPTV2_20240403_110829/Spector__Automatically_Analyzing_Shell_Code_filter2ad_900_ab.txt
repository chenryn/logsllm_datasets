that is resistant to many polymorphism techniques [17]. 
Their  method  only 
and 
differences  between  the  shell  code  binaries,  and  does 
not provide an analysis of the code functionality. Their 
technique may classify shell code that makes the exact 
same  API  calls 
the 
underlying  code  was  written  in  a  vastly  different 
manner.  Although 
is  effective  at 
identifying  exploits  and  viruses  written  by  different 
hackers  with  different  styles  and  coding  methods,  it 
will not necessarily associate shell code with the same 
behavior. Spector, on the other hand, outputs high-level 
function  calls  that  describe  shell  code’s  expected 
into  different  categories 
this  method 
if 
actions, which can help with responding to a threat, as 
well as to classify code based on its functionality. 
Static analysis has been applied to binary programs 
in  the  past  in  order  to  extract  meaningful  system  call 
operations.  Giffin  et  al.  [13]  outline  a  method  for 
statically  analyzing  binary  code  to  create  a  program 
model for use in an intrusion detection system. Spector 
generates a similar model in the form of its high-level 
output,  but  Spector  only  generates  a  linear  call 
sequence  and  characterizes  malicious  activity  rather 
than legitimate activity. Spector symbolically executes 
malicious  code  to  help  understand  its  behavior,  while 
model-checking  intrusion  detection  systems  execute 
malicious code executes natively, but check it against a 
model  at  run-time  to  detect  deviations  from  normal 
behavior  [13,  30].As  far  as  we  know,  the  method 
presented  by  Giffin  et  al.  for  static  analysis  is  not 
applicable  to  malicious  self-modifying  code,  which 
occurs  in  many  attack  payloads.  Spector  is  able  to 
process  self-modifying  code  because  it  dynamically 
emulates  instructions,  including  writes  to  the  code 
segment. 
to  accurately 
Programs known as decompilers are available for a 
number of languages. Decompilers take machine code 
and re-create high-level language code (e.g. see [6, 8, 
12,  19,  27,  29]).  These  decompilers  try  to  recreate 
original C or Java code after it has been compiled into 
a  binary.  Current  decompilers  may  produce  different 
output  for  polymorphic  instances  of  the  same  shell 
code  because 
incorporate 
memory references and other operations that may affect 
the  internal  process  state  but  do  not  change  the  API 
calls.  Spector,  on  the  other  hand,  will  classify  shell 
code  with  the  same  behavior  into  one  group.  An 
additional shortcoming of decompilers is that they are 
unable 
some  hand-written  assembly 
constructs  such  as  self-modifying  code,  which  would 
prevent analysis of many attack payloads. Spector, on 
the  other  hand,  is  able  to handle self-modifying code, 
which occurs quite frequently for shell code that has a 
“decoder”  sequence  at  the  beginning.  Decoders  are 
often used to eliminate NULL bytes in the payload of a 
buffer overflow attack. 
to  handle 
Today’s  polymorphism  tools,  such  as  CLET  [11], 
ADMmutate [16], and  polynop [14], are designed with 
the explicit goal of evading network intrusion detection 
systems  (NIDS).    As  such,  they  primarily  focus  on 
making the NOP sled, decoding sequence, and encoded 
binary  undetectable  by  byte-matching  signatures, 
spectrum  analysis,  and  neural  classifiers 
[11]. 
However, they do not modify the main part of the shell 
code  itself,  because doing so is complicated and does 
not  help  in  evading  (NIDS).  In  the  future,  we  expect 
they 
try 
as 
such 
substituting 
equivalent 
that  methods 
instructions (i.e. “a = a + a” is equivalent to “a = a * 2” 
and  “a  =  a  <<  1”)  and  inserting  NOP-equivalent 
instructions in the middle of code sequences could be 
easily applied to the encoded portion of shell code as 
well.  Spector  is  able  to  generate  the  same  high-level 
output  in  spite  of  such  modifications  because  they  do 
not affect the sequence of API calls made by the shell 
code, which ultimately determines its impact on the rest 
of the system. 
Anti-virus  software  vendors  have  had  to  deal  with 
polymorphic  portable  executable  (PE)  files  for  a 
number  of  years.  One  approach  they  have  taken  for 
identifying  polymorphic  viruses  is  to  execute  them  in 
an emulated environment and search the address space 
for virus signatures once the initial decoding sequence 
is  complete.  This  technique  is  known  as  generic 
decryption  (GD)  [18].  A  similar  method  may  be 
effective  against  current  polymorphic  shell  code  that 
has  a  variable  encoding,  but  a  static  inner  body. 
Spector  actually  uses  this  technique  as  a  performance 
optimization (see Section 5.1). However, it is severely 
limited in that will not work if the main part of the shell 
code  contains  polymorphic  variations, 
such  as 
equivalent  instruction  substitution  or  NOP  insertion. 
Spector extracts API function call information directly 
instead of relying on signatures, and thus does not have 
this limitation. 
3. System Overview 
Spector is designed to take the executable portion of 
an  attack  payload  as  its  input  and  generate  low-level 
and  high-level  outputs  describing  the  functionality  of 
the code. As such, it requires a front-end to display its 
output  and  a  back-end  system  to  feed  it  executable 
payloads.  The  back-end  must  be  able  to  perform  two 
tasks: (1) identify network messages that contain shell 
code-based  exploits,  and  (2)  determine  the  starting 
point of code execution within each payload. There are 
already  a  number  of  intrusion  detection systems, such 
as Snort [26] and Bro [22], which can monitor traffic at 
the network layer and detect shell code attacks. Given 
the  output  of  the  IDS,  the  next  step  is  to  identify  the 
executable portion of the payload before handing it off 
to  Spector.  This  can  be  done  by  hand,  using  a 
signature-based  code  identification  method  such  as 
Shield  [31],  or  with  the  help  of  a  heuristic-based 
method  similar  to  that  in  [24].  Spector  then  analyzes 
the  code  using  symbolic  execution  and  extracts  the 
sequence  of  Windows  API  calls  along  with  their 
parameters.  This  sequence  is  used  to  classify  similar 
payloads. Spector also generates a low-level instruction 
504504
Add Instruction (add) 
if(op.type == REG) 
  registers[dest_reg] = src + dest 
else if(op.type == MEM) 
  memory[dest_address] = src + dest 
Return Instruction (ret) 
registers[EIP] = memory[registers[ESP]] 
registers[ESP] = registers[ESP] + src 
Figure 2. Sample symbolic emulation code for an 
x86 add and ret instructions. The src, dest, 
dest_reg, and dest_address values are 
loaded from an immediate, register, or memory. 
disassembly  with  annotated values to provide detailed 
information about the shell code’s execution. 
For our implementation, we used Spector to analyze 
attack payloads collected from a number of lightweight 
honeypots.  Lightweight  honeypots  are  computers  that 
are set up on unused IP address space to elicit random 
attacks on the internet. Our setup included honeyd [25], 
which  allows  one  computer  to  claim  multiple  IP 
addresses,  and  Nepenthes  [3],  which  responds  to 
network  traffic  and  emulates  vulnerable  software.  We 
then  took  the  payloads  from  Nepenthes  and  ran  them 
through  a  custom  signature-based  attack  matching 
module which determined the type of exploit as well as 
the  starting  point  of  shell  code  execution.  Finally, 
Spector  analyzed  each  payload  starting  from 
its 
execution point. 
After  Spector  has  finished  processing  payloads,  it 
needs  to  send  the  data  to  a front end that can display 
them in a meaningful way. Spector could just dump the 
list of API calls and the full code disassembly for each 
payload  to  a  file.  Instead,  Spector  inserts  them  into  a 
database  so  that it can classify payloads that have the 
same  API  call  sequence.  The  database  also  supports 
queries  on  general  statistics  such  as  the  number  and 
frequency  of  payloads  associated  with  each  class  of 
shell  code.  In  the  future,  we  plan  to  integrate  this 
database with the Arbor Networks ATLAS web portal 
[2] to provide detailed information about the classes of 
shell  code  associated  with  particular 
services, 
vulnerabilities, and malware. 
4. Symbolic Emulation Architecture 
Spector  uses  a  custom  x86  processor  emulator  to 
monitor  and  record  the  behavior  of  shell  code. 
(Instruction  decoding 
the  help  of 
libdisassemble [15].) When Spector first starts up, it 
initializes a generic process environment and loads the 
shell  code  into  its  own  memory  segment.  It  then 
the  first 
executes 
the  shell  code  starting  with 
is  done  with 
value  :=  unknown  |  number  |  symbol
    | expression | bitmask 
expression  :=  (value,  operand, 
    value) 
bitmask  :=  ({value,  bit-index}  |  0
    | 1) [repeat 32 times] 
Figure 3. A grammer that specifies the possible 
contents of a value object in Spector. Values can 
contain arbitrarily long nested expressions of other 
values. Italicized items are terminal. 
instruction,  and  runs  until  the  shell  code  executes  an 
invalid  instruction,  crashes,  or  calls  an  application 
programming  interface  (API)  function  to  terminate 
execution.  At  each  instruction,  Spector  records  the 
decoded instruction, operand(s), and result to create a 
fully commented disassembly of the shell code. It also 
generates a high-level of trace of only the API function 
calls and their parameters.  
The  Spector  emulator  utilizes  custom  objects  for 
values  and  for  memory  that  enable  simple  instruction 
evaluation, while at the same time supporting complex 
memory and symbolic values. Figure 2 shows example 
code for an add instruction and for a ret instruction. For 
the add instruction, the source and destination operands 
are loaded with the correct values from an immediate, 
register, or memory. Then, Spector calculates the result 
simply  using  the  addition  operator  and  stores  it  in  a 
register or memory location, depending on the type of 
instruction.  Spector  executes  the  ret  instruction  by 
popping the value off of the top of the stack, storing it 
to  the  instruction  pointer  register,  then  advancing  the 
stack  register  an  amount  specified  by  an  immediate 
operand.  In  Spector,  the  logic  of  each  operation  is 
separate  from  the  underlying  types  that  hold  and 
manipulate  specific  values.  The  remainder  of  this 
section  describes  the  architecture  of  the  underlying 
types  and  other  critical  components  in  the  Spector 
symbolic emulation engine. 
4.1. Values 
In  Spector,  values  are  represented  by  objects  that 
support  all  of 
the  standard  arithmetic  and  bit 
operations.  However,  they  may  contain  unknowns, 
symbols,  expressions,  or  bit  masks  in  addition  to 
concrete  numbers.  Figure  3  shows  a  grammar  that 
specifies the possible contents of a value in Spector. An 
example  of  an  expression-type  value  is  (code  +  20), 
which would represent the code symbol plus 20 bytes. 
Spector uses bit masks to properly handle instructions 
that split up symbolic values by masking, storing, and 
505505
then later reconstructing them. A bit mask value is a list 
of 32 bits. Each bit can be 0, 1, or contain a reference 
to a bit from another value. 
Spector  makes  a  distinction  between  unknown  and 
symbolic values. A symbolic value is one that has some 
significance  in  relation  to  the  shell  code’s  execution, 
but does not have a fixed concrete value; it could have 
a  number  of  values  depending  on  random  factors 
during execution. Examples of symbolic values include 
function pointers and object handles. Unknown values 
do not have any significance whatsoever in relation to 
the shell code. An example of an unknown value is the 
content of a random memory location. Because nothing 
is known about unknown values, they should never be 
used  as  memory  addresses  or  tested  for  branch 
conditions. Symbolic values, however, may be used in 
these situations. 
Like  other  symbolic  execution  engines  [5,  9,  28], 
Spector  cannot  afford  to  create  a  new  expression  for 
every  operation  without  simplifying  the  result.  What 
you could end up with, especially for a frequently used 
variable,  is  a  long  list  of  nested  expressions, many of 
which actually cancel each other out. This is especially 
true  for  operations  like  “xor  eax,  eax”,  which  are 
frequently  seen  in  x86  assembly,  where  the  result  is 
zero  regardless  of 
the  operands.  When  Spector 
evaluates code like “src + dest”, as seen in Figure 2, it 
initially  creates  a  new  expression  value  and  sets  it  to 
(src,  +,  dest), but then runs a simplification algorithm 
to  try  to  reduce  the  result  to  a  number,  symbol,  or 
smaller expression. In general, Simplification improves 
performance,  readability,  and  is  necessary  in  some 
cases  for  determining  memory  locations  and  branch 
conditions. If the complexity of the simplification rules 
is  too  high,  however,  it  could  potentially  degrade 
performance. 
We created the following simplification steps based 
on experience with actual shell code we saw during our 
experiments.  These  rules  were  sufficient  to  simplify 
expressions  encountered  in  the  shell  code  samples. 
Spector  will  take  the  following  steps  to  simplify  an 
expression with values A and B:  
•  If A is number and B is number, then compute and 
store the numeric result. 
•  Check for special cases, such as A – A and A * 1, 
where the result is equal to a number or to one of 
the operands.  
•  If  the  operation  is  addition  or  subtraction,  then 
flatten all nested expressions using the associative 
property  and  distribute  negatives.  Combine  all 
numeric  values  into  one  term  and  eliminate  any 
non-numeric values that cancel each other out (i.e. 
A – A). If only one term remains, then set it to be 
the result.  
•  If  the  operation  is  left  shift  or  right  shift,  then 
create  a  bit  mask  value  for  the  result,  shifting 
values if the operand is already a bit mask. 
•  If the operation is a logical AND or a logical OR 
and  A  or  B  is  a  number,  then  create  a  bit  mask 
setting  bits  to ‘0’ and ‘1’ where appropriate; if A 
and B are bit masks, combine each bit to create a 
bit mask result. If the resulting bit mask represents 
a concrete number or complete 32-bit value (all 32 
bits  of  the  same  value  in  order),  then  replace  the 
bit mask with the original value. 
These steps reduce the complexity of values in most 
common cases, such as masking off bytes of symbolic 
values and re-combining them, adding then subtracting 