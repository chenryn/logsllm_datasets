日期转换为天数，以保证HASH（TO_DAYS（d）)是一个有效的散列函数。
么它必须将列值转换为整数。例如，如果d是一个DATE列，那么你可以使用TO_DAYS(d)函数把
表达式exor的计算结果必须是一个非NUUL非负的整数，因此如果表达式引I用了某个非整数列，那
CREATE TABLE语句将返回一条出错信息。
表达式里可以使用ABS（）函数，但不允许使用RAND（）函数。如果使用了一个不允许使用的函数，
VALUES子句只能与RANGE（)和LIST（)搭配使用。
对于通过使用结尾的 SELECT 语句创建和填充的表，如果为其指定了列定义，那么列定义将在
对于RANGE（)或LIST（），表达式expr的计算结果必须是一个整数或NULL值。对于HASH（），
口用另一个表的部分内容创建一个新表：
口创建一个临时表；为获得更好的访问速度，使其成为一个MEMORY表：
每个 partition_option值对应着一个附加的分区特性，如下面所示。（虽然在以下描述里使
expr表达式必须是确定性的，这样可以确保同样的输入总是会得到同样的结果。例如，在éxpr
口用另一个表的内容创建一个新表：
口创建一个新表作为另一个表的空白副本：
COMMENT[=]'str'
对于KEY（），其参数都是列名，但这些列不必是整数类型。
如果包含的分区定义使用了HASH（)或KEY（），那么这些分区定义不应该有VALUES子句。
以下语句演示了CREATETABLE语句的一些常见用法。
口
口
CREATE TABLE prez_copy SELECT * FROM president;
CREATE TABLE prez_copy LIKE president;
CREATE TABLE customer
上还有一个多列索引：
所有分区指定同一种存储引擎。
用来处理该分区的存储引擎。表分区不支持混合使用多种存储引擎，所以必须为同一个表的
这些选项用来表明你计划存储在该分区中的行的最大值和最小值。n必须是一个正整数。
MAX_ROWS[=]n、MIN_ROWS[=]n
被存储到什么地方。默认的存储位置是该表所在数据库的数据库目录。
[STORAGE] ENGINE [=]  engine_name
这两个选项类似于前面描述过的同名的表选项。它们分别用来设定该分区里的数据或索引将
DATA DIRECTORY[=]'dir_name',
为分区加上一个描述性的注释。
PRIMARYKEY
first_name
last_name
id
(id),
CHAR（30)
first_name,birth
E.1．SQL语句语法（非复合语句）
671
---
## Page 692
的描述。
数据库拥有 INSERT 权限。
新的新行里的列。OLD和NEW关键字都不区分大小写。
的列。类似地，在INSERT 或UPDATE 触发器里，可以用NEW.col_name语法来引用将被插入或更
要使用多条语句，必须用关键字BEGIN和END把它们括起来以构成一个复合语句（参考E.2节）。
被激活。
条语句对每个行进行处理之前或之后执行触发器所包含的语句。
语句而必不可少的各项权限。
则必须拥有 tbl_name 表的 UPDATE 权限。此外，该账户还必须拥有为了正常执行触发器定义里的
tbl_name表的 SELECT权限；如果想在触发器的定义里使用SETNEW.col_name修改表里的列，
TRIGGER权限；如果想在触发器的定义里使用NEW或OLD引I用tbl_name表里的列，则必须拥有
请参考4.3节。默认使用执行CREATETRIGGER语句的那个用户的账户。相关账户对该表必须拥有
语句时，需要对与触发器相关联的那个表拥有TRIGGER权限。
据库里的一个表，必须按照 db_name.tbl_name 的格式来给出它的名字。使用cREATE TRIGGER
它所包含的语句。默认情况下，
672
对于每个账户，在mysql.user 表里创建的行都没有任何权限。如果某个账户已经存在，则会
在DELETE或UPDATE触发器里，可以用OLD.col_name语法来引I用将被删除或更新的旧行里
trigger_stmt 部分是由 SQL语句构成的触发器主体。它应该只包含一条SQL语句。如果需
trigger_event 值应该是INSERT、UPDATE 或DELETE，用以表明哪种语句将导致触发器
trigger_time 值既可以是BEFORE，也可以是AFTER；分别表示的是应该在激活触发器的那
当触发器被激活时，DEFINER子句将被用来确定其安全上下文(即用于核查其访问权限的账户)
如果指定了auth_info子句，则它表示的是，新账户的身份认证是使用密码，还是使用身份认
创建一个或多个MySQL账户。这条语句要求拥有全局级CREATEUSER 权限，或者对mysql
CREATEUSER
触发器不带任何参数，并且像存储函数那样，无法执行会产生一个结果集的语句。
在触发器创建时生效的sql_mode系统变量的值会被保存起来并在触发器被激活时恢复生效。
SETNEW.col_name= value
在BEFORE触发器里，可以使用SET语句修改新行里的值：
把触发器和表关联在一起，如此一来，
CREATE
OCREATE TRIGGER
还可以对新表里的列进行定义以覆盖那些基于结果集特性的默认定义：
CREATE TABLE new_tbl (PRIMARY KEY (a)) SELECT a, b,C FROM old_tbl;
|IDENTIFIED WITH auth_plugin[AS'auth_string']
SELECT a,b,c FROM old_tbl;
[,account
TRIGGER
[DEFINER=definer_name]
附录ESQL语法参考
UNSIGNED NOT NULL AUTO_INCREMENT, b DATE, PRIMARY KEY (a))
trigger_name trigger_timetrigger_event
，tbl_name 表来自当前的默认数据库。如果针对的是某个特定的数
'password`
当该表上发生特定的事件时，该触发器将被激活并执行
---
## Page 693
的预处理语句将不能再执行。
则仅限于当前视图。如果这两个关键字都没有给出，
引用了其他视图。当使用CASCADED 时，检查操作会延伸到底层视图。当使用LOCAL时，检查操作
足 SELECT里的 WHERE子句所指定的条件为真)。关键字CASCADED 和LOCAL可用于在视图定义里
句一起用于更新底层表的视图)。它允许利用视图插入或修改底层表里的记录行，只是这些记录都满
MySQL服务器将根据具体情况自行选择如何处理。默认设置是UNDEFINED。
TEMPTABLE，MySQL在用到该视图的时候将把它创建为一个临时表。如果被设置为UNDEFINED，
句时，MySQL 将把该视图的定义合并到那条语句里。执行的是最终那条语句。如果被设置为
问权限的账户），请参考4.3节。默认使用执行CREATEVIEW语句的那个用户的账户。
ORREPLACE子句，则还必须拥有对该视图的DROP权限。
有权限，并且对select_stmt语句里引用到其他地方的每一个列都拥有SELECT权限。如果使用了
如果省略了col_list，新视图将由其视图定义里的SELECT语句所选取的列构成。
REPLACE子句，则新视图将替换旧视图。
证。这种情况并不安全，应该尽量避免。
空密码的 IDENTIFIED BY子句，或者没有指定IDENTIFIED WITH子句，则连接不会进行身份认
证插件。更多详细信息请参考13.2.1.3节。当客户端使用此账户连接服务器时，如果没有指定带有非
WITHCHECKOPTION子句适用于可更新视图（它指的是那些可以与UPDATE或其他表修改语
如果指定了col_list，新视图将由该列表里的列构成。新视图里的每个列都必须名列其中。
释放此前使用 PREPARE 语句进行预处理而得到的那条名为 stmt_name 的预处理语句。被释放
ALGORITHM子句决定着如何处理视图。如果被设置为MERGE，当你发出一条引用了该视图的语
·DELETE
在调用视图时，DEFINER和 SQL SECURITY子句将被用来确定其安全上下文（即用于核查其访
tbl_list:
DELETE[LOW_PRIORITY][QUICK][IGNORE]
DELETE[LOW_PRIORITY][QUICK][IGNORE]
DELETE [LOW_PRIORITY]
·DEALLOCATE PREPARE
(DEALLOCATE IDROP}PREPARE stmt_name
如果想创建视图，则必须对它拥有CREATEVIEW权限，对select_stmt 语句所选取的各列拥
select_stmt是一条用来定义视图的 SELECT语句。在该语句里可以引用表或其他视图。
创建一个视图。默认情况下，如果存在同名的视图，
CREATE [OR REPLACE]
●CREATE VIEW
[WHERE where_expr]
USING
FROM
WHERE
FROM
PARTITION
FROM
tbl_list
tbl_
list
tb1
tbl_
where_expr]
_refs
name
ame[(col
{DEFINER
[QUICK][IGNORE]
name]
list)]AS
TEMPTABLE
IINVOKER}]
|UNDEFINED}]
，则MySQL将默认使用CASCADED。
E.1SQL语句语法（非复合语句）
则会看到一条出错信息。如果指定了OR
673
---
## Page 694
配的那几个列里。
息。结尾的字符串会被解释为匹配模式（如LIKE 操作符)，并且会将输出限制在名字与该模式相匹
参考 SHOW条目。在这种语法里，如果给定列，DESCRIBE语句的输出报告中将只包含关于该列的信
删除行的那个表查询行的子查询。
式，如下所示：
tbl_name，也可以是tbl_name.*（这种形式是为了与ODBC保持兼容）。
据表之间的连接关系确定需要删除哪些行。对于那些需要删除行的表，其名字的指定形式可以是
信息。
要执行的索引树的叶合并工作。
使用表级别锁定的存储引擎（如MyISAM或MEMORY）有效。
能把子查询指定为表。
删除行，或者根据涉及多个表的条件来删除行。tbl_refs 的语法与 SELECT 的类似，区别在于不
用表时为它们声明一个别名。DELETE语句的其他部分可以引用表别名，但是不能声明它们。
用，
另一种
的某个行不在指定的分区里，则它会保持不变。
使用针对分区表的 PARTITION子句，以表明需要从哪个分区或子分区删除行。此时，如果将被删除
674
口下面这条语句将显示 president 表里的last_name列的描述信息：
tbl_refs 子句用来给出为了判断应该删除哪些行而需要关联的表。在这个子句里，可以在引
DELETE语句的第二种和第三种形式特别适用于从多个表一次删除有关行。它们使你能够根
如果使用了IGNORE修饰符，那么在行被删除时发生的错误将被忽略。这些错误会生成警告
对于MyISAM表，给出QUICK选项能加快语句的执行速度。MyISAM存储引擎将不执行通常
LOW_PRIORITY选项将使DELETE语句的执行被延迟到没有客户端读取该表为止。此选项只对
第一种形式的 DELETE 语句会删除tbl_name 表里的行。第二种和第三种形式可以从多个表里
带表名或视图名的 DESCRIBE语句产生的输出报告与 SHOW COLUMNS 语句的相同。更多信息请
·DESCRIBE
多表 DELETE语句不允许有 ORDER BY或LIMIT子句。另外，WHERE子句也不允许包含会从被
如果想从t1表里删除id值与t2表里的ia值相匹配的那些行,则可以使用第一种多表语法形
能更精确地控制将要删除哪些行。ORDER BY子句的语法与 SELECT语句的相同。
如果给出ORDER BY子句，则各个行会按最终排序顺序被删除。如果将它与LIMIT子句结合使
如果给出LIMIT子句，则其中的n值指定的是将要删除的最大行数。
如果省略了WHERE子句，则表中的全体行都将被删除。（如果不需要行统计，那么还可以使用
DELETE语句可以删除表里的行，并返回被删除的行数。自MySQL5.6.2起，DELETE语句支持
DELETE FROM t1 USING t1 INNER JOIN t2 WHERE t1.id = t2.id;
也可以使用第二种语法形式，如下所示：
DELETE t1 FROM t1 INNER JOIN t2 WHERE t1.id=t2.id;
种清空表的方式，即使用TRUNCATETABLE。）
与 WHERE子句里指定的条件相匹配的行会被删除。
PARTITION
tbl_name[.*]
附录ESQL语法参考
[PARTITION (partition_name I, partition_name] ...)]
tbl_name[
(partition_name [, partition_name]...)]
---
## Page 695
删除一个PRIMARYKEY，必须用一个标识符把后者引起来。
DROPINDEX 语句来处理。更多详细信息请参考 ALTER TABLE 条目。若要使用 DROPINDEX 语句
个警告。
权限。
有 IF EXISTS子句,MySQL 将生成一条警告信息。执行此操作时，必须拥有事件所属数据库的EVENT
需要手动删除所有的其他文件和子目录，然后再次执行DROPDATABASE语句。
这些文件不会被DROPDATABASE语句删除。这种情况会导致数据库目录无法被删除，而且DROP
目录（如.frm文件）。此语句不会删除其他文件和目录。如果在数据目录里放入了非表文件，
处理结果集。例如，DO语句可用来设置变量，或者调用那些你只关心其副作用而不关心返回值的函数。
一个警告。
多信息请参考EXPLAIN条目。
SELECT。自 MySQL5.6.3起，该语句可以为 SELECT、DELETE、INSERT、REPLACE 或 UPDATE。更
删除指定的事件。IF EXISTS子句的作用是禁止显示事件不存在时会产生的出错信息。如果带
DROPDATABASE语句成功执行后，会返回一个计数值一
数据库是由数据目录下的目录表示的。服务器只会删除它可以识别为其自身创建的文件和
从 tbl_name表里删除名为index_name的索引l。MySQL 将把这条语句当作一条ALTER TABLE
·DROP INDEX
IF EXISTS子句的作用是禁止显示例程不存在时会产生的出错信息。在这种情况下，会生成一
删除指定的存储函数或存储过程。这些语句要求拥有指定例程的 ALTER ROUTINE 权限。
·DROP FUNCTION、DROP PROCEDURE
（这个计数值其实是它实际删除的.frm文件的个数，但二者的含义是一样的。）
IF EXISTS子句的作用是禁止显示数据库不存在时会产生的出错信息。在这种情况下，会生成
DROP [TEMPORARY] (TABLE|TABLES) [IF EXISTS]
DROP(FUNCTION I PROCEDURE) [IF EXISTS] routine_name
删除指定的数据库及其内容。执行此语句时，对指定数据库必须拥有DROP权限。
对表达式进行计算，但不返回计算结果。这使得DO语句用起来比SELECT语句方便，它不需要
·DO
DESCRIBE 后面带上语句之后等同于 EXPLAIN 语句。在 MySQL5.6.3之前，该语句必须为
口下面这条语句将显示 president 表里的 last_name 和 first_name 列的描述信息：
·DROPTABLE
DROPINDEXindex_nameONtbl_name
DROP EVENT[IF EXISTS]event_name
·DROPEVENT
DROP DATABASE [IF EXISTS] db_name
DROPDATABASE
Doexpr[，expr]...
tbl_name[,tbl_name]
DESCRIBE presidentname';
DESCRIBE president last_name;
@sideb:= 4,@sidec := SQRT(@sidea*@sidea+@sideb*+@sideb);
E.1.
一其表示的是实际删除的表或视图的个
SQL语句语法（非复合语句）
675
---
## Page 696