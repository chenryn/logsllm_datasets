::: bodypic-c
![](OEBPS/Images/167-i.jpg){.calibre427}
:::
接着把exec.jar设置到类环境变量中，运行即可：\
·export CLASSPATH jar的路径。
·exec/system/bin/app_process jar的目录jar中的入口类。
为了演示，例子都是在root用户下做的操作，如下所示：
::: bodypic-c
![](OEBPS/Images/167-2-i.jpg){.calibre428}
:::
运行成功，看到打印的log信息，权限拒绝了，因为只能允许system用户访问，下面就用su降权到system再运行，如下所示：
::: bodypic-c
![](OEBPS/Images/167-3-i.jpg){.calibre429}
:::
[注意：]{.yanse}每次切换用户的时候，一定要记得重新设置一下类变量，不然会运行失败的。
成功获取到值了。总结一下步骤：
1）导出可执行的jar文件。
2）使用dx命令将class文件转化成dex文件。
3）将转化之后的dex文件塞到jar文件中，然后导入设备的指定目录。
4）设置可执行jar文件到类环境变量中。
5）执行app_process命令，运行jar文件。
补充一些说明：上面看到了可以成功使用app_process命令来运行一个jar文件，关于app_process的相关知识网上有很多资料，它是Android系统中启动Java代码的关键。这里也可以直接运行dex文件，使用命令dalvikvm。
首先将上面执行dx命令后的classes.dex文件adb放到/data目录下，如下所示：
::: bodypic-c
![](OEBPS/Images/167-4-i.jpg){.calibre430}
:::
然后执行dalvikvm命令，如下所示：
::: bodypic-c
![](OEBPS/Images/167-5-i.jpg){.calibre431}
:::
::: bodypic-c
![](OEBPS/Images/168-i.jpg){.calibre432}
:::
这里同样看到权限拒绝，降级切换到system用户，如下所示：
::: bodypic-c
![](OEBPS/Images/168-2-i.jpg){.calibre433}
:::
了解了如何使用app_process来运行jar文件，便体验到了Android中一些API的访问限制该如何处理，主要是用su来进行降权处理，而su能够降权是因为它本身提供了可以修改uid的功能，即调用setuid和setgid函数即可，所以在手机root之后发现还是不能调用系统的一些API时，可以尝试使用su来降权进行调用。
[]{#066.xhtml}
#### 10.6 本章小结 {.bodycontent-title2}
本章知识点有点多，一环扣着一环，分析run-as命令的用法时去分析源码，发现错误的根源之后，引出Linux中的setuid和setgid问题，解决问题之后，总结了setuid和setgid的使用场景，然后继续分析了run-as命令的作用。最后也解决一个问题，即如何调用系统中那些有uid限制的API，通过一个例子来解析问题，引出了Android中如何执行jar文件。
[]{#067.xhtml}
### 第11章 Android中的allowBackup属性 {.bodycontent-title4}
很多开发者对Android关于AndroidManifest.xml中的allowBackup属性不太了解，而开发者在使用IDE工具开发的时候自动生成代码，而这个属性的值会被设置成true，会直接导致隐私数据的丢失。本章就介绍这个属性对应用安全的影响到底有多大以及注意事项。
[]{#068.xhtml}
#### 11.1 allowBackup属性介绍 {.bodycontent-title2}
Android API Level
8及以上Android系统提供了为应用程序数据的备份和恢复功能，此功能的开关由应用程序中AndroidManifest.xml文件中的allowBackup属性值决定，其属性值默认是true。当allowBackup标志为true时，用户即可通过adb
backup和adb
restore命令对应用数据进行备份和恢复，这可能会带来一定的安全风险。
这个属性的安全风险源于adb
backup命令容许任何一个能够打开USB调试开关的人从Android手机中复制应用数据到外设，一旦应用数据被备份之后，所有应用数据都可被用户读取；adb
restore容许用户指定一个恢复的数据来源（即备份的应用数据）来恢复应用程序数据的创建。因此，当一个应用数据被备份之后，用户即可在其他Android手机或模拟器上安装同一个应用，并通过恢复该备份的应用数据到该设备上，在该设备上打开该应用即可恢复到被备份的应用程序的状态。
尤其是通讯录应用，一旦应用程序支持备份和恢复功能，攻击者即可通过adb
backup和adb
restore命令进行恢复新安装的同一个应用来查看聊天记录等信息；对于支付金融类应用，攻击者可通过此方法来进行恶意支付、盗取存款等。因此为了安全起见，开发者务必将allowBackup标志值设置为false来关闭应用程序的备份和恢复功能，以免造成信息泄露和财产损失。
allowBackup安全风险详情：
·allowBackup风险位置：AndroidMannifest.xml文件android：allowBackup属性。
·allowBackup风险触发前提条件：未将AndroidMannifest.xml文件中的android：allowBackup属性值设为false。
·allowBackup风险原理：当allowBackup标志值为true时，即可通过adb
backup和adb restore命令来备份和恢复应用程序数据。
[]{#069.xhtml}
#### 11.2 如何获取应用隐私数据 {.bodycontent-title2}
前面了解了allowBackup属性的相关知识点，可以看到allowBackup属性的风险非常大。如果这个属性是true的话，怎么在没有root的设备去获取数据呢？
首先看这样一个场景，现在市场上有一些应用锁类的App，它们就是给每个应用打开的时候添加一个密码，打开App的时候需要输入密码才能进入应用，一般会把自己的银行App、通讯类的App加密。现在市场上这些应用锁的原理也很简单，一般是三种方式实现：
·最古老的方式是后台启动一个service，然后隔一段时间去轮询，获取当前的topActivity，然后进行操作。
·因为Android
5.0以后，获取当前的topActivity需要授权，所以这里还需要做一个操作就是引导用户去开一些权限功能。
·通过辅助功能可以监听当前Window的变化，这种方式比上面的轮询方式高效多了。
其实前两种方式差不多，唯一的区别就在于获取topActivity的方式，其实Google可能意识到了，获取topActivity是很危险的一件事：比如现在有一个恶意的软件，可以通过这个功能，当用户启动设备中的一些通讯、银行App的时候，可以监听到然后就启动他们自己定义的钓鱼登录页面，模拟这些App的登录，最终可以获取到用户名和密码了，完成盗取。
下面来看一个市场上比较火的一款应用锁App，如图11-1所示。
::: bodypic-c
![](OEBPS/Images/11a1-i.jpg){.calibre434}
:::
图11-1 市场中的某个应用锁App\
下载这个apk之后使用aapt查看它的AndroidManifest.xml内容：
::: bodypic-c
![](OEBPS/Images/170-i.jpg){.calibre149}
:::
在拿到一个apk的时候，如果想知道apk中的一些资源和配置信息，aapt命令是个不错的选择，同时，它能够删除apk中的一些资源，添加一些资源到apk中都是可以的，查看结果如图11-2所示。
因为AndroidManifest.xml内容有点多，就重定向到一个txt文件中，看到allowBackup属性为true，因为非0的都是true。说明applock.apk这个应用是可以使用adb
backup命令进行隐私数据的备份的。接下来就看一下如何进行备份。
###### 第一步：进行数据的备份 {.section-subtitle}
代码如下：
::: bodypic-c
![](OEBPS/Images/170-2-i.jpg){.calibre435}
:::
·\[-system\|-nosystem\] 这个指令是告诉adb在备份时是否要连同系统一起备份。若没有打的话默认是-system表示会一起备份系统。若连系统一起备份，在还原的时候会复盖系统档案对于已经升级后的手机是非常不好的。我不知道在没有root的情况下adb是否有权限去还原系统档案，但就算如此，还是不建议这样做。因此-nosystem是建议一定要打上的指令。
::: bodypic-c
![](OEBPS/Images/11a2-i.jpg){.calibre436}
:::
图11-2 aapt命令查看应用的AndroidManifest.xml
·-all 这个指令除非只是要备份单一App不然是一定要打上去的。这个是问你是否要备份全部的App，若有加上-nosystem的指令。那么就只会备份你目前已经安装上去的App而不会连系统App一起备份。
·\[-apk\|-noapk\] 默认是-noapk，这个参数的意思是，是否连安装的apk一起备份。若为-noapk，则只会备份apk的资料档（像是游戏存盘、设定之类的）。
·\[-shared\|-noshared\] 默认是-noshared，这个会问你是否连手机储存空间或是SD卡的档案一起备份。关于这个应用的包名，可以直接从上面dump出来的AndroidManifest.xml中获取即可，如图11-3所示。
::: bodypic-c
![](OEBPS/Images/11a3-i.jpg){.calibre437}
:::
图11-3 查看AndroidManifest.xml文件
获取包名之后，就可以执行命令，把导出来的文件保存到当前目录下：applock.ab，如下所示，注意这里的格式是ab，这个也是Android中备份文件的格式要求：
::: bodypic-c
![](OEBPS/Images/171-2-i.jpg){.calibre438}
:::
当执行这个命令的时候，设备端会出现一个提示页面，如图11-4所示。
这时候会提示输入备份密码，为了简单可以不输入，直接点击备份即可，备份完之后的文件如图11-5所示。
::: bodypic-c
![](OEBPS/Images/11a4-i.jpg){.calibre439}
:::
图11-4 备份截图
::: bodypic-c
![](OEBPS/Images/11a5-i.jpg){.calibre440}
:::
图11-5 备份之后的文件
###### 第二步：abe工具来解析ab文件 {.section-subtitle}
还需要借助一个工具来解析这个ab文件。这个工具是开源的，用Java语言写的。源码位于：[https://github.com/nelenkov/android-backup-extractor](https://github.com/nelenkov/android-backup-extractor){.calibre32
.pcalibre}
这里没有直接下载源码，然后编译了，直接在网上下载了一个编译好的工具，工具下载地址如下。
[提示：]{.yanse}工具下载地址：
[http://download.csdn.net/detail/jiangwei0910410003/9523470](http://download.csdn.net/detail/jiangwei0910410003/9523470){.calibre32
.pcalibre}\
用法也很简单，看到使用unpack参数来将ab文件转化成tar文件：
::: bodypic-c
![](OEBPS/Images/172-2-i.jpg){.calibre441}
:::
再用解压缩软件查看内容，如图11-6所示。
::: bodypic-c
![](OEBPS/Images/11a6-i.jpg){.calibre442}
:::
图11-6 压缩软件打开备份文件\
现在如果想知道它的密码，可以直接查看SharePreferences
文件即可，因为一般都会把密码放到这里保存，当然这是一个非常危险的操作，如果再没有对密码进行加密的话，那更是危险了，如图11-7所示，是应用的沙盒中XML数据。
查看SmartLockConfig.xml内容，如图11-8所示。
被猜中了，它竟然把手势密码以明文的方式保存在这里。这里它用的是九宫格手势方式加密，03678代表的应该是一个L，可以对照图11-9九宫格图查看。
::: bodypic-c
![](OEBPS/Images/11a7-i.jpg){.calibre443}
:::
图11-7 SharedPreference文件
::: bodypic-c
![](OEBPS/Images/11a8-i.jpg){.calibre444}
:::
图11-8 存储密码文件
到这里就成功破解了应用锁应用的加密App的功能，而且是在设备没有root的情况下。下面来总结一下：
::: bodypic-c
![](OEBPS/Images/11a9-i.jpg){.calibre445}
:::
图11-9 九宫格图\
1）这个App现在在市场的下载量还是蛮高的，但是看到它一不留神把allowBackup属性设置成true，就导致了数据可能被外泄，更为有趣的是，在使用几个IDE工具，默认新建的工程之后，这个属性的值也是true，如下所示（Eclipse和AndroidStudio开发工具）。
::: bodypic-c
![](OEBPS/Images/173-3-i.jpg){.calibre446}
:::
上面就是现在比较常用的两个IDE工具：Eclipse和AndroidStudio。可以看到当新建一个工程时，默认把这个属性设置成true，那么当不设置这个属性时，也是可以进行备份的，因为默认值是true。也许Google的想法是为了防止数据的丢失，就留了这个功能，便于用户备份数据。但是这里会隐含一些安全问题，在开发时如果不去注意这个属性的话，就会产生很大风险。以后在开发的过程中一定要记得把这个属性设置成false，特别是非常重要的需要账号登录的App。
2）上面分析了应用锁的App，并非只是一个案例，其实现在很多App都有这个问题，看看某市场App，如下所示：
::: bodypic-c
![](OEBPS/Images/174-i.jpg){.calibre447}
:::
它也是没有手动改变这个属性为false，所以它的数据也是可以导出来的。再看看某视频App，如下所示：
::: bodypic-c
![](OEBPS/Images/174-2-i.jpg){.calibre448}
:::
也是一样，不过像这些App，它们的账号登录密码的信息肯定不是放在本地的，而是放到服务端进行验证的，不像应用锁这样的，它不需要联网也是可以进行操作，所以密码必须放到本地。但是只要这个属性allowBackup为true的话，就会被查看到沙盒数据，就是不安全的。最后再来看看某社交App的5.0版本也有这个问题，不过它在6.0之后已经把allowBackup设置成false了，如下所示：
::: bodypic-c
![](OEBPS/Images/174-3-i.jpg){.calibre449}
:::
这里看到它没有设置allowBackup属性，但是刚刚说了，默认值就是true，所以还是可以导出来的，下面可以使用上面的导出步骤进行操作，如图11-10所示。
::: bodypic-c
![](OEBPS/Images/11a10-i.jpg){.calibre450}
:::
图11-10 社交数据库信息
其实社交App把通讯录和聊天记录都是保存到数据库中，但是这个数据库是加密的。数据库加密，其实是需要反编译App才知道，然后动态调试跟踪代码破解，因为通讯录和聊天内容是没有网络就可以查看的，那么加解密肯定是放在本地做的，只要是放在本地做的就可以进行破解。
不过可以看到这个App在后续的版本已经修复了这个问题，6.0版本之后就不能导出来数据了，那么5.0的用户其实还是会受影响的。
3）还是回到这个应用锁App中来，其实在这里还是想说一番的，作为下载量蛮高的App，竟然把密码用明文保存到XML中，这种做法其实是对用户的不负责，首先这里完全可以使用MD5来做密码验证就可以了，为何要暴露明文；其次是为什么把这么重要的数据保存到XML中，稍微加点破解难度考虑放到so中也是可以的。
4）开发的过程中，最后一步发包的时候一定要检查一下这个属性是否为false，因为它牵涉到应用的太多隐私信息了。
[]{#070.xhtml}
#### 11.3 如何恢复应用数据 {.bodycontent-title2}
可以使用adb
backup命令来做一下操作，就是在开发过程中，如果遇到手机没有root的，但是又想查看沙盒数据，那么这个也是一种方式，当然可以使用run-as命令来操作。
与上面的adb backup命令相对应的还有一个就是adb
restore命令，它是用来恢复数据的，具体用法：
::: bodypic-c
![](OEBPS/Images/175-i.jpg){.calibre451}
:::