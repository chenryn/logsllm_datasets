title:Malicious-Secure Private Set Intersection via Dual Execution
author:Peter Rindal and
Mike Rosulek
Malicious-Secure Private Set Intersection via Dual Execution∗
Peter Rindal†
Mike Rosulek†
August 9, 2017
Abstract
Private set intersection (PSI) allows two parties, who each hold a set of items, to compute the
intersection of those sets without revealing anything about other items. Recent advances in PSI
have signiﬁcantly improved its performance for the case of semi-honest security, making semi-
honest PSI a practical alternative to insecure methods for computing intersections. However,
the semi-honest security model is not always a good ﬁt for real-world problems.
In this work we introduce a new PSI protocol that is secure in the presence of malicious
adversaries. Our protocol is based entirely on fast symmetric-key primitives and inherits impor-
tant techniques from state-of-the-art protocols in the semi-honest setting. Our novel technique
to strengthen the protocol for malicious adversaries is inspired by the dual execution technique
of Mohassel & Franklin (PKC 2006). Our protocol is optimized for the random-oracle model,
but can also be realized (with a performance penalty) in the standard model.
We demonstrate our protocol’s practicality with a prototype implementation. To securely
compute the intersection of two sets of size 220 requires only 13 seconds with our protocol, which
is ∼ 12× faster than the previous best malicious-secure protocol (Rindal & Rosulek, Eurocrypt
2017), and only 3× slower than the best semi-honest protocol (Kolesnikov et al., CCS 2016).
1
Introduction
Private set intersection (PSI) allows two parties with respective sets X and Y to compute the
intersection X ∩ Y , without revealing the remaining elements in X or Y . PSI and closely related
protocols have numerous applications including auctions [NPS99], remote diagnostics [BPSW07],
DNA searching [TKC07], social network check-ins, private contact discovery [Mar14], botnet de-
tection, advertising [PSSZ15], and many others.
PSI is a special case of secure two-party computation. One may consider two adversarial models
for secure computation: the semi-honest model, where the protocol is protected against adversaries
who follow the protocol but try to learn as much as possible from the messages they have seen;
and the malicious model, where the protocol is protected against adversaries who may arbitrarily
deviate from the protocol. Over the last several years there has been signiﬁcant progress made in
eﬃcient PSI protocols for the semi-honest model. In this work, we focus on the more demanding
malicious security model.
1.1 Paradigms for PSI
To put our results into context, we review diﬀerent approaches for PSI, with a special emphasis on
those approaches which achieve malicious security.
∗Full version of a paper published in ACM CCS 2017.
†Oregon State University, {rindalp,rosulekm}@oregonstate.edu. Supported by NSF awards 1149647, 1617197, and
a Google Research Award. The ﬁrst author is also supported by an ARCS foundation fellowship.
1
Based on Oblivious Transfer. Pinkas, Schneider & Zohner (PSZ) [PSZ14] proposed a tech-
nique for PSI that relies heavily on oblivious transfers (OT). Using modern OT extension pro-
tocols [IKNP03, KK13, ALSZ13, KOS15], it is possible to perform millions of OT instances per
second, almost entirely from cheap symmetric-key cryptographic operations.
The PSZ approach for PSI has been improved in a series of works [PSSZ15, PSZ16, OOS16,
KKRT16], with the protocol of Kolesnikov et al. [KKRT16] currently being the fastest PSI protocol
against semi-honest adversaries. There have been modiﬁcations of the protocol [OOS16] that
provide security against a restricted class of malicious adversaries (i.e., the protocol protects against
a malicious Alice only), but so far there has been no success in leveraging this most promising PSI
paradigm to provide security in the full malicious security model.
Based on Bloom Filters. Dong, Chen & Wen [DCW13] describe an approach for PSI based on
representing the parties’ sets as Bloom ﬁlters. This approach also relies heavily on OT extension,
and is reasonably eﬃcient (though not as fast as the PSZ paradigm above).
The authors of [DCW13] described a protocol that was claimed to have security against mali-
cious adversaries, but that was later found to have bugs [Lam16, RR17]. In a prior work [RR17],
we gave a protocol based on Bloom ﬁlter encodings that indeed has security against malicious ad-
versaries. Previously this protocol was the fastest in the malicious security model. In [RR17] we
also argued that the use of Bloom ﬁlters in this paradigm is likely to have an inherent dependence
on the random-oracle model.
Based on Diﬃe-Hellman. One of the ﬁrst protocols proposed for PSI is due to Meadows [Mea86]
and fully described by Huberman, Franklin & Hogg [HFH99]. It uses a simple modiﬁcation of the
Diﬃe-Hellman key agreement protocol to achieve PSI in the presence of semi-honest adversaries.
De Cristofaro, Kim & Tsudik [DKT10] showed how to augment the protocol to provide security
against malicious adversaries.
The main beneﬁt of this Diﬃe-Hellman paradigm is its extremely low communication com-
plexity. Indeed, protocols in this paradigm have by far the smallest communication complexity.
However, the Diﬃe-Hellman paradigm requires expensive public-key operations for each item in the
parties’ sets, making them much slower than the OT-based approaches that require only a constant
number of public-key operations.
Other paradigms. Freedman, Nissim & Pinkas [FNP04] proposed an approach for PSI based
on oblivious polynomial evaluation. This technique was later extended to the malicious setting
[DMRY09, HN10, FHNP14]. The idea behind these protocols is to construct a polynomial Q whose
roots are Alice’s items. The coeﬃcients of Q are homomorphically encrypted and sent to the Bob.
For each of Bob’s items y, he homomorphically evaluates ˆy := r · Q(y) + y for a random r. When
Alice decrypts the result, she will see ˆy = y for all y in the intersection. These protocols require
expensive public-key operations for each item.
Huang, Evans & Katz [HEK12] discuss using general-purpose secure computation (garbled
circuits) to perform PSI. Later improvements were suggested in [PSZ14, PSSZ15]. At the time of
[HEK12], such general-purpose PSI protocols in the semi-honest setting were actually faster than
other special-purpose ones. Since then, the results in OT-based PSI have made special-purpose
PSI protocols signiﬁcantly faster. However, we point out that using general-purpose 2PC makes it
relatively straight-forward to achieve security against malicious adversaries, since there are many
well-studied techniques for general-purpose malicious 2PC.
Kamara et al. [KMRS14] presented techniques for both semi-honest and malicious secure PSI
2
in a server-aided model. In this model the two parties who hold data enlist the help of an untrusted
third party who carries out the majority of the computation. Their protocols are extremely fast
(roughly as fast as the plaintext computation) and scale to billions of input items. In our work,
we focus on on the more traditional (and demanding) setting where the two parties do not enlist a
third party.
1.2 Our Results
From the previous discussion, we see that the fastest PSI paradigm for semi-honest security (due
to PSZ) has no fully malicious-secure variant. We ﬁll this gap by presenting a protocol based on
the PSZ paradigm that achieves malicious-secure private set intersection.
We start with the observation that in the PSZ paradigm the two parties take the roles of “sender”
and “receiver,” and it is relatively straight-forward to secure the protocol against a malicious
receiver [OOS16]. Therefore our approach is to run the protocol in both directions, so that each
party must play the role of receiver at diﬀerent times in the protocol. This high-level idea is inspired
by the dual-execution technique of Mohassel & Franklin [MF06]. In that work, the parties perform
two executions of Yao’s protocol in opposite directions, taking advantage of the fact that Yao’s
protocol is easily secured against a malicious receiver. In that setting, the resulting dual-execution
protocol achieves malicious security but leaks one adversarially-chosen bit. In our setting, however,
we are able to carefully combine the two PSI executions in a way that achieves the usual notion of
full malicious security.
Because our protocol is based on the fast PSZ paradigm, it relies exclusively on cheap symmetric-
key cryptography. We have implemented our protocol and compare it to the previous state of the
art. We ﬁnd our protocol to be 12× faster than the previous fastest malicious-secure PSI protocol
of [RR17], on large datasets. Our implementation can securely compute the intersection of million-
item sets in only 12.6 seconds on a single thread (2.9 seconds with many threads).
Finally, as mentioned above, the previous fastest malicious PSI protocol [RR17] appears to rely
inherently on the random-oracle model. We show that our protocol can be instantiated in the
standard model. Both our standard model and random-oracle optimized protocols are faster than
[RR17] in the LAN setting, with our latter protocol being the fastest across all settings.
2 Preliminaries
2.1 Notation
Alice is the sender and Bob is the receiver who learns the intersection. Alice holds the set X and
Bob Y , where X, Y ⊆ {0, 1}σ. For simplicity, we assume |X| = |Y | = n. The computational and
statistical security parameters are denoted as κ and λ. Let [m] := {1, ..., m}.
2.2 Security for Secure Computation
We deﬁne malicious security with the standard notation for secure computation. Namely, our
protocol is malicious secure in the universal composability (UC) framework of Canetti [Can01].
This simulation based paradigm deﬁnes security with respect to two interaction,
• Real interaction: a malicious adversary A attacks the honest party who runs the protocol π.
An environment Z chooses the honest party’s input and is forwarded their ﬁnal output of π.
Z may arbitrarily interact with A. The protocol is in a hybrid world where A and the honest
3
Parameters: σ is the bit-length of the parties’ items. n is the size of the honest parties’ sets.
n(cid:48) > n is the allowed size of the corrupt party’s set.
• On input (Receive, sid, Y ) from Bob where Y ⊆ {0, 1}σ, ensure that |Y | ≤ n if Bob is
honest, and that |Y | ≤ n(cid:48) if Bob is corrupt. Give output (bob-input, sid) to Alice.
• Thereafter, on input (Send, sid, X) from Alice where X ⊆ {0, 1}σ,
likewise ensure
that |X| ≤ n if Alice is honest, and that |X| ≤ n(cid:48) if Alice is corrupt. Give output
(Ouput, sid, X ∩ Y ) to Bob.
Figure 1: Ideal functionality for private set intersection (with one-sided output)
party have access to the ideal Fencode functionality of Figure 2. We deﬁne real[π,Z,A] to
be the output of Z in this interaction.
• Ideal interaction: a malicious adversary S and an honest party interact with the ideal FPSI
functionality of Figure 1. The honest party forwards the input provided by the environment
Z to the FPSI functionality and returns their output to Z. We deﬁne ideal[FPSI,Z,S] to be
the output of Z in this interaction.
The protocol π UC-securely realizes FPSI if:
simulator S, such that for all PPT environments Z:
for all PPT adversaries A, there exists a PPT
real[π,Z,A] ≈ ideal[FPSI,Z,S]
where “≈” denotes computational indistinguishable.
3 Overview of PSZ Paradigm
Pinkas, Schneider, and Zohner [PSZ14] (hereafter PSZ) introduced a paradigm for PSI that is
secure against semi-honest adversaries. There have since been several improvements made to this
general paradigm [PSSZ15, KKRT16, OOS16]. In particular, the implementation of [KKRT16] is
the fastest secure PSI protocol to date. Adapting this paradigm to the malicious security model is
therefore a natural direction.
In this section, we describe the PSZ paradigm, and discuss what prevents it from achieving
malicious security.
3.1 High-Level Overview
The PSZ paradigm works as follows. First, for simplicity suppose Alice has n items X = {x1, . . . , xn}
while Bob has one item y. The goal of private set inclusion is for Bob to learn whether y ∈ X,
and nothing more. We abstract the main step of the protocol as an oblivious encoding step,
which is similar in spirit to an oblivious pseudorandom function [FIPR05]. The parties interact so
that Alice learns a random mapping F , while Bob learns only F (y). The details of this step are
not relevant at the moment. Then Alice sends F (X) = {F (x1), . . . , F (xn)} to Bob. Bob can check
whether his value F (y) is among these values and therefore learn whether y ∈ {x1, . . . , xn}. Since
F is a random mapping, the other items in F (X) leak nothing about the set X.
The protocol can be extended to a proper PSI protocol, where Bob has a set of items Y =
{y1, . . . , yn}. The parties simply perform n instances of the private set inclusion protocol, one for
4
each yi, with Alice using the same input X each time. This leads to a PSI protocol with O(n2)
communication.
To reduce the communication cost, the parties can agree on a hashing scheme that assigns their
items to bins. In PSZ, they propose to use a variant of Cuckoo hashing. For the sake of example,
suppose Bob uses cuckoo hashing with two hash functions to assign his items to bins. In cuckoo
hashing, Bob will assign item y to the bin with index either h1(y) or h2(y), so that each bin contains
at most one item. Alice will assign each of her items x to both bins h1(x) and h2(x), so that each of
her bins may contain several items. Overall, for each bin Alice has several items while Bob has (at
most) one, so they can perform the private set inclusion protocol for each bin. There are of course
many details to work out, but by using this main idea the communication cost of protocol can be
reduced to O(n).
3.2
Insecurity against Malicious Adversaries
The PSZ protocol and its followups are proven secure in the semi-honest setting, but are not secure
against malicious adversaries. There are several features of the protocol that present challenges in
the presence of malicious adversaries:
• Even if the “oblivious encoding” subprotocol is made secure against malicious adversaries, the
set-inclusion subprotocol does not become malicious-secure. The technical challenge relates
to the problem of the simulator extracting inputs from a malicious Alice. The simulator
sees only the random mapping F and the items {F (x1), . . . , F (xn)} sent by Alice. For the
simulator to extract Alice’s eﬀective input, the mapping F must be invertible. However, the
oblivious encoding instantiations generally do not result in an invertible F .
• In the PSZ protocol, Bob uses cuckoo hashing to assign his items to bins. Each item y may
be placed in two possible locations, and the ﬁnal placement of item y depends on all of Bob’s
other items. A corrupt Alice may exploit this in the protocol to learn information about
Bob’s set. In particular, Alice is supposed to place each item x in both possible locations
h1(x) and h2(x). A corrupt Alice may place x only in h1(x). Then if x turns out to be in
the intersection, Alice learns that Bob placed x in h1(x) but not h2(x). As just mentioned,
whether Bob places an item according to h1 or h2 depends on all of Bob’s items, so it is
information that cannot be simulated in the ideal world.
• In the O(n2) PSI protocol, Alice is supposed to run many instances of the simple set-inclusion
protocol with the same set X each time. However, a malicious Alice may use diﬀerent sets
in diﬀerent instances. In doing so, she can inﬂuence the output of the protocol in ways that
cannot be simulated in the ideal world.
4 Oblivious Encoding
As discussed in the previous section, the PSZ paradigm uses an oblivious encoding step.
In
Figure 2 we deﬁne an ideal functionality for this task.
Intuitively, the functionality chooses a
random mapping F , allows the receiver to learn F [c] for a single c, and allows the sender to learn
F [c] for an unlimited number of c’s. However, if the sender is corrupt, the functionality allows
the sender to choose the mapping F (so that it need not be random). This reﬂects what our
instantiations of this functionality are able to achieve.
We describe two instantiations of this functionality that are secure in the presence of malicious
adversaries.
5
Parameters: two parties denoted as Sender and Receiver. The input domain {0, 1}σ and
output domain {0, 1}(cid:96) for a private F .
1. [Initialization] Create an initially empty associative array F : {0, 1}σ → {0, 1}(cid:96).
2. [Receiver Encode] Wait for a command (Encode, sid, c) from the Receiver, and record
c. Then:
3. [Adversarial Map Choice] If the sender is corrupt, then send (RecvInput, sid) to
the adversary and wait for a response of the form (Deliver, sid, Fadv). If the sender is
honest, set Fadv = ⊥. Then:
4. [Receiver Output] If Fadv = ⊥ then choose F [c] uniformly at random; otherwise set
F [c] := Fadv(c), interpreting Fadv as a circuit. Give (Output, sid, F [c]) to the receiver.
Then:
5. [Sender Encode] Stop responding to any requests by the receiver. But for any number
of commands (Encode, sid, c(cid:48)) from the sender, do the following:
• If F [c(cid:48)] doesn’t exist and Fadv = ⊥, choose F [c(cid:48)] uniformly at random.
• If F [c(cid:48)] doesn’t exist and Fadv (cid:54)= ⊥, set F [c(cid:48)] := Fadv(c(cid:48)).
• Give (Output, sid, c(cid:48), F [c(cid:48)]) to the sender.
Figure 2: The Oblivious Encoding ideal functionality Fencode
In the programmable-random-oracle model. Orr`u, Orsini & Scholl [OOS16] describe an
eﬃcient 1-out-of-N oblivious transfer protocol, for random OT secrets and N exponential in the
security parameter. The protocol is secure against malicious adversaries. In order to model an
exponential number of OT secrets, they give an ideal functionality which is identical to ours except
that the adversary is never allowed to choose the mapping. Hence, their protocol also realizes
our functionality as well (the simulator simply chooses Fadv = ⊥ so that the functionality always
chooses a random mapping).
Their protocol is proven secure in the programmable random-oracle model. Concretely, the cost
of a single OT/oblivious encoding in their protocol is roughly 3 times that of a single semi-honest
1-out-of-2 OT.
In the standard model.
In the standard model, it is possible to use a variant of the semi-honest
oblivious encoding subprotocol from PSZ. The protocol works as follows, where the receiver has
input c:
• The sender chooses 2σ random κ-bit strings: m[1, 0], m[1, 1], . . . , m[σ, 0], m[σ, 1].
• The parties perform σ instances of OT, where in the ith instance the sender provides inputs
m[i, 0], m[i, 1], the receiver provides input ci and receives m[i, ci].
• The receiver computes output(cid:76)
• To obtain the encoding of any value c(cid:48), the receiver can compute(cid:76)
tion with (cid:96) bits of output.
i PRF(m[i, ci], c), where PRF is a secure pseudorandom func-
i PRF(m[i, c(cid:48)
i], c(cid:48)).
6
(cid:54)= c, there is a position i in which c(cid:48)
For security against a corrupt receiver, the simulator can extract c from the receiver’s OT inputs.
We can then argue that all other oblivious encodings look random to the receiver. Indeed, for every
c(cid:48)
i], c(cid:48))
contains a term PRF(m[i, c(cid:48)
i (cid:54)= ci, so the corresponding encoding (cid:76)
sender’s OT inputs. It can then hard-code these values into a circuit Fadv(c) =(cid:76)
For security against a corrupt sender, the simulator can extract the m[i, b] values from the
i PRF(m[i, ci], c)