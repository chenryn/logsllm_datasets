Figure 4: Protocol for integrating a new ECU into an existing
control network. The in-vehicle Attestation Server (AS) is
shipped with a certificate of its public key.
been tampered with (cf. Section 2.2). When starting the vehicle,
untrusted system software on the participating ECUs is in charge
of loading PM components, and the secure PMA hardware com-
putes the corresponding module-specific keys based on the PM’s
identity. A simple challenge-response attestation protocol to prove
possession of the expected KP M thus suffices for AS to establish
that PM has been properly loaded. To properly protect against re-
play attacks (P3), however, AS should make sure to always include
a monotonically incrementing attestation nonce n in the challenge.
Regarding the second challenge, session key distribution, we
leverage the observation that distributed load-time attestation al-
ready necessitates communication between AS and every PM. We
thus let AS generate random 128-bit session keys for all connec-
tions whenever starting the car, and modify the above attestation
protocol to include dynamic key provisioning (S4), as illustrated
in Fig. 3. AS first broadcasts an encrypted challenge for every PM,
containing the newly generated session key as well as the global
nonce value n. Note that 128-bit session keys wont fit within a
single CAN message, and the load-time challenge therefore needs
to be spread across multiple successive CAN frames. We encrypt
the challenge with KP M to ensure that session keys are only pro-
visioned to properly isolated and unmodified PM. The attestation
process is finally completed when a PM responds with a MAC over
n, using KP M . We propose to connect the vehicle ignition switch
directly to AS, such that the car refuses to start when load-time
attestation fails (S3). This way, the driver is given a strong assur-
ance that any critical event (e.g., braking) while driving can only
be caused by a legitimate sender component (e.g., braking pedal).
To address the final requirement, ECU replacement, we equip
AS with asymmetric cryptography. Note that this does not violate
our requirement for lightweight ECUs (P2), as every car only needs
a single authentication server component that would typically be
deployed on one of the higher-end vehicle processors. Specifically,
we assume AS is shipped with a certificate of its public key, signed
with the private key of the legitimate car vendor. Figure 4 outlines
the protocol. When a new ECU joins an existing control network,
it initially broadcasts a unique replacement identifier IDr . Upon
receiving IDr , AS sends its public key certificate and the new re-
placement identifier to the remote car vendor over the untrusted
automobile repair shop’s network connection. The car vendor acts
as the trusted infrastructure provider in the Sancus key hierarchy
(Section 2.2), and thus possesses the node master keys of all ECUs it
VulCAN: Vehicular Component Authentication and Software Isolation
ACSAC’17, December 2017, San Juan, Puerto Rico, USA
produced. Upon receiving IDr and a valid AS certificate, the vendor
computes the Sancus module-specific key KP M for any authenti-
cated software components to be executed on that ECU, and uses
AS’s public key to send them securely back to the car. AS can now
proceed with the load-time attestation protocol for the newly joined
ECU over the local CAN bus, as depicted in Fig. 3.
To prevent an attacker from acquiring the module key KP M
herself, the remote car vendor should mark used part identifiers IDr ,
and never hand out KP M to a different vehicle attestation server.
Please also note that AS stores all module keys for subsequent
attestations, such that public key cryptography and a network
connection are only rarely needed, when upgrading the car. In this
respect, AS can reset its module-specific attestation nonce n after
every PM software update, since KP M depends on the code section.
Shielding Legacy ECUs (S5). VulCAN requires hardware and soft-
ware changes for critical ECUs, whereas part suppliers are typically
restrained to quickly implement such changes in the heterogeneous
automotive landscape. In this regard, previous software-only so-
lutions [34, 38] remain backwards compatible with, but cannot
provide any security guarantees for ECUs that do not adopt the
required software changes. We therefore present a transition mech-
anism that can be used to securely shield unmodified legacy ECUs
from an untrusted CAN bus.
Intuitively, we position a Sancus-enabled gateway ECU in front
of the legacy ECU, and perform the necessary authentication trans-
parently on behalf of the shielded legacy component(s). This basic
idea is similar to the already existing CAN gateways that separate
high-speed from low-speed traffic in modern automobiles. It has
been repeatedly shown [10, 22], however, that existing such CAN
gateways can easily be bridged by exploiting or reprogramming
their software. Our approach on the other hand relies on PMAs, as
outlined above, to establish a minimal TCB on the gateway ECU.
More specifically, the security gateway participates in message au-
thentication and software attestation protocols on the untrusted
CAN network as usual, but makes sure to only forward success-
fully authenticated messages over the trusted private CAN bus. To
prevent an attacker in control of untrusted software on the gate-
way ECU from forwarding traffic on the private CAN bus herself,
we deploy a secure I/O driver PM that takes exclusive ownership
over the CAN transceiver device. This of course implies that the
protected CAN driver code becomes part of the TCB, which we
consider acceptable given that the CAN driver needs to be trusted
on the gateway ECU only, and can be considerably simplified when
forwarding packets.
4 SECURITY ANALYSIS
Protocol Requirements (P1, P3). We first evaluate the protocol-
level message authentication and replay protection requirements for
a traditional adversary that controls the network, but not the soft-
ware on sender/receiver ECUs. In this case, the security argument
reduces to the security of the underlying MAC scheme. According
to Eq. (1), an adversary could collect a legacy CAN identifier and
plain text payload, plus its corresponding MAC and non-secret
nonce ci to try and brute-force all possible 128-bit session keys.
Finding the correct session key would require 2127 MAC evalua-
tions on average, which is considered infeasible even for extremely
motivated adversaries. Alternatively, the attacker could try to cor-
rectly guess the smaller 64-bit MAC output. Note, however, that the
birthday paradox for finding an arbitrary collision does not apply
here, for the adversary’s goal is to forge a message with chosen
ID, nonce, and payload. As such, the probability to correctly guess
the MAC output is 2−63. To verify her guess, however, the attacker
would have to interact online with the valid receiver. The available
time frame for such an attack is reasonably limited, for nonce coun-
ters are incremented after every legitimate message and session
keys are refreshed on counter overflow. The same property finally
ensures proper replay attack resilience.
Note that the security of the LeiA [38] CAN authentication pro-
tocol has been formally proven, under the MAC unforgeability
assumption. We present a practical replay attack against the vati-
CAN [34] protocol, however, in Appendix A. Being based on the
birthday paradox, the attack abuses the increased probability of
nonce reuse due to vatiCAN’s frequent random nonce renewal
scheme. As discussed above, our vulcanized vatiCAN implementa-
tion therefore omits the global nonce generator.
System Requirements (S2–S5). We first define the in-vehicle TCB3
for authenticated CAN components more precisely. As with any
execution platform, the processor is ultimately trusted, which ren-
ders the security argument for VulCAN’s system requirements
inevitably specific to the implementation platform (in our case the
minimalistic secure Sancus [31, 33] hardware). We furthermore
trust the relevant authenticated software components themselves;
in the case of braking for instance, only those PMs that participate
in the creation and processing of that event are considered trusted.
We expect the size of these modules to be within reach of formal
verification [37] and secure compilation [36] techniques. Finally, we
trust the global vehicle attestation server introduced above. That
is, we assume secure, tamper-proof storage capacity and code exe-
cution on the AS node. Importantly, unlike previous CAN security
proposals [34, 38, 46], our solution necessitates tamper-resistant
persistent storage on the AS node only. We thus relax the require-
ments for lightweight ECUs, and move the burden of long-term
cryptographic key and nonce storage to a single platform that can
be more easily maintained. Specifically, we advise the use of widely
available higher-end trusted execution technology such as ARM
TrustZone [2] or Intel SGX [25] on the processor hosting AS.
The security of distributed software attestation (S3) follows from
the correctness assumption of AS and the Sancus hardware. For
Sancus’ hardware-level key derivation scheme ensures that the
expected KP M is only available to a correctly isolated PM on a
specific ECU, and AS includes a persistent counter n in the attesta-
tion challenge to establish a fresh guarantee every time the driver
starts her car. Likewise, the security of isolated execution and key
secrecy (S2) reduces to the correctness of the Sancus hardware.
Please note that our adversary model considers physical attackers
that exploit hardware side-channels to extract cryptographic key
material out-of-scope. We do assume that all ECUs are shipped
with independent node master keys, however, such that extract-
ing keys from one ECU does not affect uninvolved components
(S4). Our Sancus-based implementation is furthermore immune to
3 Note that the development environments of the car vendor and part suppliers are
isolated from the in-vehicle network, and thus not within reach of the attacker.
ACSAC’17, December 2017, San Juan, Puerto Rico, USA
Jo Van Bulck, Jan Tobias Mühlberg, and Frank Piessens
remotely exploitable software side-channels, since keys are never
directly processed by software, and Sancus uses a constant-time
hardware implementation of SpongeWrap [4] with spongent [5]
as the underlying hash function.
The security of our session key provisioning scheme (S4) follows
from the security of the attestation protocol, on which it piggybacks.
Likewise, the security of the ECU replacement protocol between
the vehicle attestation server and the remote car vendor entirely
depends on the correctness of AS. As long as the adversary does
not get hold of AS’s private key, she never gets to know KP M by
observing network traffic. An attacker that actively interacts with
the remote car vendor does not learn KP M neither, since the vendor
is required to keep track of assigned replacement IDs on a first-
come, first-served basis that ensures keys are never retransmitted to
a different attestation server. The only leverage left for an adversary
in this scheme, is to launch a denial-of-service attack by claiming
all replacement IDs. Such availability issues are out of the scope of
our work, but can easily be mitigated at the application level. The
car vendor could for instance engage in a complementary protocol
with the automobile repair shop to establish the legitimacy of the
replacement part to be installed, before actually assigning IDr and
handing out KP M to the vehicle attestation server AS.
Finally, the security of shielding unmodified legacy ECUs (S5)
with a Sancus-enabled gateway follows from the protocol-level
security guarantees (P1, P3), plus authenticated component isola-
tion (S2) and attestation (S3). Specifically, since the CAN driver
itself executes in a PM in this case, the gateway can guarantee that
only legitimate events (i.e., properly authenticated messages on the
public bus) trigger CAN forwarding on the private bus.
5 EXPERIMENTAL EVALUATION
We fully implemented the vatiCAN [34] and LeiA [38] specifica-
tions, but leave the implementation of the attestation server as
future work. We can only directly relate our approach to the previ-
ously reported software-only vatiCAN evaluation, however, for our
work presents the first actual implementation of LeiA. In this sec-
tion, we evaluate our vulcanized vatiCAN/LeiA implementations in
terms of runtime overhead, memory footprint, and TCB size. Note
that we do not evaluate bus congestion due to added CAN frames,
as this does not yield interesting results beyond what is reported
by vatiCAN, i.e., a modest 3% increase.
All experiments were conducted on a testbench featuring six
Xilinx Spartan-6 FPGAs, each synthesized with a Sancus-enabled
OpenMSP430 core [13, 33] running at 20 MHz. With the given clock
speed, 1 CPU cycle corresponds to 50 ns, and 10,000 cycles cor-
respond to 0.5 ms. Each Sancus core was configured to provide
128 bits of security. Analogous to previous research [34], we inter-
faced our ECUs over SPI with widely used off-the-shelf Microchip
MCP2515 CAN transceiver chips on a common bus speed of 500
kBit/s. All source code was compiled with the Sancus C compiler
based on LLVM/Clang v4.0.0 with optimizations set for size (-Os).
5.1 TCB Size and Memory Footprint
We implemented vulcanized vatiCAN/LeiA as a small C library that
leverages Sancus’ hardware-level authenticated encryption prim-
itives, and that can optionally be included in a protected Sancus
Table 1: Overhead to send an (authenticated) CAN message
with/without Sancus encryption and software protection.
Scenario
Legacy (standard ID)
Legacy (extended ID)
vatiCAN (extrapolated†)
Sancus+vatiCAN (unprotected)
Sancus+vatiCAN (protected)
Sancus+LeiA (unprotected)
Sancus+LeiA (protected)
Cycles
8,135
9,620
58,948
15,570
16,036
18,770
19,211
Time Overhead
–
0.41 ms
18%
0.48 ms
625%
2.95 ms
91%
0.78 ms
0.80 ms
97%
131%
0.94 ms
0.96 ms
136%
† Inferred from the observed Sancus+vatiCAN timings by replacing the hardware
based MAC computation cycles with the reported Keccak SHA-3 computation cycles.
PM. Importantly, when the library is included in a PM, the remain-
der of the software stack remains explicitly untrusted regarding
MAC computation integrity and confidentiality of key material.
That is, the TCB encompasses only the vatiCAN/LeiA library and
any application-specific protected message processing code. In this
regard, we measured 212 lines of trusted source code for LeiA, and
only 147 lines for vatiCAN, using the sloccount utility [47] and
excluding debug code. Regarding the unprotected software stack,
even our elementary CAN driver alone already requires 322 lines
of code. In comparison, we measured over 670 lines of code for the
popular CAN bus shield for Arduino devices [41], and established
embedded operating systems such as Contiki or FreeRTOS exceed
several tens of thousands of lines of code. As such, vulcanized CAN
authentication modules significantly reduce the TCB, making them
more manageable in security and safety validation efforts.
The memory footprint of the unprotected CAN driver measures
2,482 bytes. For our vulcanized vatiCAN/LeiA libraries on the other
hand, the total binary sizes measure respectively 790/1,818 bytes
when compiled as an unprotected application, and 906/1,948 bytes
when compiled as part of a protected module. The slightly increased
PM binary size is due to compiler-generated code stubs inserted
on every call to and from the unprotected CAN driver. vatiCAN
furthermore requires 22 bytes of metadata for each authenticated
connection (a 16-bit ID, 128-bit symmetric key, and 32-bit nonce),
whereas LeiA requires 44 bytes (16-bit ID, 64-bit epoch counter,
16-bit nonce, 128-bit long-term/session keys). Note that the 128-bit
long-term keys can be shared across multiple connections, depend-
ing on the required security guarantees.
5.2 Performance Evaluation
To yield a fair overhead comparison, it should be noted that vatiCAN
was evaluated on a 16 MHz ATmega 8-bit ECU. We expect software
performance to be within the same order of magnitude, however,
on our 20 MHz MSP430 16-bit microcontrollers.