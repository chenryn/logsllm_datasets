---
## Page 370
361
我们来编译下述源代码，它使用了库函数rand()。
据部分在使用该库的程序执行时映射到该程序的虚拟内存空间内。下面来具体看
许多程序为了减少可执行文件的大小，使用了共享库。共享库内的代码部分和数
程序和共享库
可以参考《Xen彻底入门》（翔泳社出版，ISBN：978-4-7981-1447-7）。
Xen 的其他信息
指定--crash选项，可以在获取内存转储之后停止domain。
352|第6章高手们的调试技术
一看。
[例]
Dumping core of domain:Asianux3GA_HV ...
#xm dump-core --crash Asianux3GA_Hv/home/user/axhvmstall.crash
int main(void)
int funcl（void)
#include
#include
[test1.c]
return1;
WARNING:
STATE:
程序执行流程时必不可少的知识。
本hack介绍通过GOT/PLT调用函数的原理，这是通过汇编代码调查
理解用GOT/PLT调用函数的原理
panictasknotfound
TASK_RUNNING
www.TopSage.com
——吉田俊辅
---
## Page 371
享库中的函数地址再调用。GNU/Linux 系统中，该机制用到了 PLT（Procedure
的，每次运行都不一样，因此 rand()地址在编译时是不知道的，运行时要调查共
现在，Libc-2.5.s0被映射到0x37d8200000地址上，该地址是在程序运行时被确定
libc-2.5.so提供 printf()、malloc()、rand()等 C语言的主要函数。
共享库所需的函数，因此程序很少明确地调用该共享库提供的函数；而
可知 testl使用了ld-2.5.so和libc-2.5.so两个共享库，ld-2.5.so主要提供使用
该状态下，从其他终端输入以下内容，即可显示testl 的虚拟内存。
为了查看虚拟空间的内存映射，我们用GDB 将该程序暂停。
$ cat /proc/ pidof testl /maps
0x0000000000400487 in main ()
Starting program: /root/tmp/test1
$ gdb test1
fffffffff60000o-ffffffffffe00000 ---p 0000000000:00 0
7fff277ee000-7fff27803000 rw-p 7fff277ee000 00:00 0
2aaaaaad7000-2aaaaaad9000 rw-p 2aaaaaad7000 00:00 0
0 00:00 00qe227 d-M 000222eeee27-000qee7
37d8544000-37d8548000 r
37d801a000-37d801b000r
250090 00:01 00061000 d--1 0000108020-000610892E
506991 00:P1 00000000 d- 00010900-0000900
506991 00:04 0000000 dx-J 00010000-0000000
Breakpoint 1 at 0x400487
(gdb) start
*#
return a + b;
b = rand();
a = funcl();
int a, b; 
r--p 00144000 fd:00 360460
rw-p 0001a000 fd:00 360453
www.TopSage.com
HACK#63 理解用 GOT/PLT 调用函数的原理【 353
[vdso]
[stack]
/lib64/libc-2.5.s0
/lib64/libc-2.5.s0
/lib64/libc-2.5.s0
/lib64/libc-2.5.s0
/lib64/ld-2.5.s0
/lib64/ld-2.5.s0
/lib64/ld-2.5.s0
/root/tmp/test1
/root/tmp/testl
362
---
## Page 372
363
的相对位置关系可以在编译时确定，因此通常使用相对地址的 call 指令直接调用。
址。func1()的函数实体位于 0x400478，如下所示。程序中包含的用户函数与调用者
中输入了 start命令的状态下，对 main()进行反汇编，即可看到编译结果如下所示。
这里利用刚才的 testl来看看实际上 PLT 和 GOT 是如何使用的。在刚才的 GDB
函数调用
用巧妙的方法在调用时避免了这种无用的检查，方法稍后说明。
置就不会再发生变化。因此，调用库函数时没有必要检查GOT是否被设置。glibc
再跳转。但是，库函数地址在程序运行过程中不会改变，因此GOT 的值一旦设
的值而已。如果GOT中尚未设置调用函数的地址，就将地址设置到GOT中之后
基本上与用到的库函数数量相同。简单来说，这些代码只是跳转到GOT 中设置
以像调用自己的用户函数一样调用这些小型代码。因此，PLT中包含的小型代码
的库函数地址会设置到该区域中。PLT 是调用库函数时的小型代码集合，程序可
简单介绍一下 PLT 和 GOT。GOT是保存库函数地址的区域，程序运行时，用到
354 1 第6章高手们的调试技术
自己的函数funcl()和库函数rand()的调用方法相同，都是给call指令指定相对地
0x000000000040047c :
0x0000000000400479 :
9x0000000000400478:
(gdb) disas funcl
0x00000000004004a2:
x00000000004004a1:
0x000000000040049e
x000000000040049b
x0000000000400498
x0000000000400493
x0000000000400490
x000000000040048b
x0000000000400487 :
0x0000000000400484 :
x0000000000400483 :
Dump of assembler code for function main:
(gdb) disas main 
:
:
:
:
:
:
www.TopSage.com
push
mov
mov
push
retq
leaveq
mov
callq 0x4003a8 
callg
sub
mov
%rbp
$0x1,%eax
dxfffffffffffffff8(&rbp),%eax
oxfffffffc(&rbp),%eax
geax,0xffffffffffc(rbp)
geax,oxfffffffffff8(%rbp)
 $0x10,&rsp
%rsp,%rbp
&rbp
0x400478 
&rsp,%rbp
---
## Page 373
续阅读GLIBC的代码。
将 rand()等库函数的地址设置到 GOT 中。后面还有许多处理，有兴趣的可以继
回,不能算做一个函数),如下所示。处调用的_dl_fixup()
了。0x40038e 处的 jmpq 指令调用_dl_runtime_resolve()函数（严格来说它不会返
第 2 条指令为跳转指令，可以认为第3条以后的指令与此无关，这里就不再介绍
用×命令显示5条指令看看。
符号信息的关系，只把地址作为反汇编指令的参数是无法反汇编的，因此我们先
θx4003ae地址后面的指令。push 指令之后跳转到 0x400388，该地址处的代码由于
用 rand()。这就是刚才说过的无须检查 GOT 是否被设置的原理。我们接着看看
处设置为rand()函数的地址，设置完成后，0x4003a8 处的 jmpq 指令就可以直接调
际上，这是因为 GOT 尚未设置成库函数的地址。0x4003ae之后的指令将0x600870
结果，尽管执行了 0x4003a8 处的 jmpq 指令，也只是跳转到了下一条指令而己。实
就是说，这就是 jmpq指令的地址。
开头为跳转指令。跳转地址保存在0x600870。如下，查看该值，为 0x4003ae，也
址的 call 指令。我们来看看被调用的地址0x4003a8 处的汇编代码。
至于 rand()的调用方法，一眼看上去似乎与 func1()相同，都是采用了指定相对地
0x40038e: jmpq *2098380(%rip)
0x600870 :Ox004003ae
No function contains specified address.
(gdb)x 0x600870
0x00000000004003b3 :
0x00000004003ae :
0x00000000004003a8 :
Dump of assembler code for function rand@plt:
(gdb) disas 0x4003a8
0x000000000400482 : retq
0x00000000400481 : leaveq
0x400388: pushq 2098378(%rip)
(gdb) x/5i 0x400388
(gdb) disas 0x400388
www.TopSage.com
# 0x600860 
#0x600858 
jmpq 0x400388
# 0x600870 
jmpq*2098370(%rip)
HACK#63 理解用 GOT/PLT 调用函数的原理| 355
pushq  $0x1 
365
364
---
## Page 374
看来，跟调用用户函数没什么区别。
此就能明白，尽管实际上经过了十分曲折的路径调用了目标库函数，但在 main
地处执行 ret 指令时，返回到的地址就是main()函数的下一个地址 0x400498。到
也没有使用 call 指令一次。因此，在_d_runtime_resolve()跳转后，在跳转目的
从 main()的 0x400493处 rand@plt 被调用，到_dl_runtime_resolve()都是跳转，而
将它赋给rll，最后作为 jmpqg 指令的操作数跳转到要调用的函数。
参数使用。_dl_fixup()函数将调用函数的地址返回到 rax中，_dl_runtime_resolve(）
此外，到这里一共执行了两次 push指令，累积在栈上的这些值会作为后续处理的
356|第6章高手们的调试技术
0x00000037d7e1230b :
0x00000037d7e12307 :
0x00000037d7e12303 :
0x0000037d7e122fe :
0x0000037d7e122f9 :
0x00000037d7e122f4 
0x00000037d7e2122ef:
0x0000037d7e122d8 :
0x0000037d07e22d4
0x00000037d7e122cb
0x00000037d7e122c6
0x00000037d7e122cl
0x00000037d7e122bc 
0x000037d7e122b7:
0x00000037d7e122a0 :
Dump of assembler code for function _dl_runtime_resolve:
(gdb) disas 0x00600037d7e122a0
0x600860 :
(gdb) x 8x600860
5 
:
:
:
:
:
:
:
:
:
:
:
www.TopSage.com
0x00000037d7e122a0
callq 0x37d7e0ca50 
mOV
sub
jmpq
add
nov
mov
TOV
0
*gr11
$0x48,%rsp
0x8(%rsp) ,%rcx
0x10 (%rsp),%rdx
0x20(%rsp) ;%rdi
0x28(%rsp),%r8
0x30(%rsp) ,%r9
%rax,&r1l
0x38(%rsp),%rdi
(%rsp) ,%rax
0x18(%rsp) ,%rsi
$0x3,%rsi
%r1l,%rsi
%rll,&rsi
%rsi,%rl1
0x40(%rsp) ,%rsi
%r9,0x30(%rsp)
%r8,0x28(%rsp)
srdi,0x20(%rsp)
%rsi,0x18(%rsp)
%rdx, 0x10(%rsp)
%rcx,0x8(%rsp)
%rax, (%rsp)
$0x38,&rsp
---
## Page 375
自己系统的需要，仅加载必要的模块，以节省内存消耗。但是，挂载根文件系统
ext4、xfs、reiserfs 等），各个用户也不尽相同。实现模块化之后，用户可以根据
是因为使用的磁盘接口（SATA或SCSI）、卡的种类、根文件系统的格式（ext3、
SCSI卡、文件系统等挂载root文件系统时必需的功能也被编译成内核模块。这
几乎所有发行版都用initramfs来挂载root文件系统。在这些Linux发行版中，像
什么是initramfs
#64
本hack介绍了跟踪程序时频繁遇到的通过PLT/GOT调用库函数的原理。
总结
_dl_runtime_resolve(），就可以直接跳转到rand（）了。
是rand(）函数的起始地址。也就是说，下次调用rand@plt时，无须通过
查看rand@plt跳转到的地址（0x600870中保存的地址），发现是0x37d8233a70，正
我们将断点设在了_d_runtime_resolve(）的最后那条jmpq指令上，运行到该处后，
接下来我们看看_dl_runtime_resolve(）中对GOT的设置。
查看设置后的GOT
0x37d8233a70:
(gdb)x/i0x00800037d8233a70
0X600870:
Breakpoint 2,0x0000037d7e1230b in_dl_runtime_resolve()
Continuing.
Breakpoint2at0x37d7e1230b
(gdb)b*0x08037d7e1230b_dl_runtime_resolve的最后地址
（gdb）x0x600870
from/Lib64/ld-linux-x86-64.so.2
（gdb）c
许多发行版在启动时采用了initramfs，本hack就介绍了它的调试方法。
调试initramfs镜像
sub
$0x8,%rsp
www.TopSage.com
0x00000037d8233a70
—大和一洋
367
---
## Page 376
368
将这些文件解压缩，看看其中的内容。
能是由于历史原因)，实际的内容是initramfs。
如，Fedoral0 为每个内核版本都准备了 initramfs。这些文件名以 initrd 开头（可
如前所述，initramfs 是个 gzip 压缩过的 cpio 文件，通常保存在/boot 目录下。例
调试信息，以了解问题发生在什么地方。
数情况下很难得知究竟发生了什么问题。本 hack 介绍的方法给 initramfs 添加了
但大多数发行版的 initramfs 脚本并不会显示详细信息。因此，问题发生时，大多
程中突然停止等。许多问题的原因就是initramfs 中没有包含必要的模块和命令等，
系统启动时经常发生的问题就是根文件系统无法挂载导致的 kermel panic、运行过
调试 initramfs
的挂载。