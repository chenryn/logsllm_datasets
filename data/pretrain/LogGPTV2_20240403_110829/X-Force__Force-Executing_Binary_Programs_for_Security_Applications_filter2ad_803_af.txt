ple that features multi-staged, condition-guarded and
environment-speciﬁc payload. In the ﬁrst stage, the mal-
ware extracts a DLL which it carries as its resource,
packs the DLL in memory using a proprietary algorithm
and writes the packed DLL to the disk. In the second
stage, the packed DLL is loaded, unpacks itself in mem-
ory and executes the main payload.
There is a previous report [26] in which the analysts
used both static and dynamic analyses to analyze this
sample. To perform static analysis using IDA Pro, they
manually extract and unpack the DLL. This requires re-
verse engineering the unpacking algorithm, which could
be both time consuming and difﬁcult. Our system avoids
such trouble by concretely executing the unpacking rou-
tine which performs the unpacking for us. Compared
with their dynamic analysis, it takes X-Force about 5
hours to ﬁnish 800 executions to explore all paths in both
the ﬁrst and second stages of the malware. After that,
the traces are transformed into a ﬂow graph containing
378 functions. Our system is able to discover a set of
malicious behaviors that are NOT mentioned in the pre-
vious report. As shown in Fig. 5, each highlighted func-
tion call in the graph corresponds to a previously unre-
vealed malicious behavior. Each behavior is identiﬁed
using the library calls made in the corresponding func-
tion. For example, as shown in Fig. 6, the library calls
and the parameters in the function at 0x10009b50 show
that it recursively enumerates and deletes ﬁles and direc-
tories starting from the root directory, which indicates its
behavior is to delete all ﬁles on the disk.
In Fig. 5 we can see that the common dominator of all
these function calls (highlighted in red color) determines
if the value of eax register is larger than 0x196. With taint
analysis in X-Force, we ﬁnd that the value of the eax reg-
ister is related to an input which is a buffer in a previous
recv library function call. This indicates it represents the
command ID sent by the C&C server, which leads to the
execution of different malicious behaviors. Hence, we
suspect that the previous analysts missed some behav-
iors because the C&C server only sent part of the pos-
sible commands at the time they ran the malware. We
also ﬁnd that the buffer in the recv function call is trans-
lated to the command ID using a private decryption algo-
rithm, so it would be infeasible for symbolic analysis to
solve the constraints and construct a valid input. We also
want to point out that at the time we perform the analysis,
the C&C server of this malware is already inactive; we
would not be able to discover these malicious behaviors,
had we not used X-Force.
Win32/PWSteal.F. Before trying X-Force on this sam-
ple, we ﬁrst try static analysis using IDA-Pro. Surpris-
ingly, this sample does not import any suspicious library
function; not even a function that could perform I/O
(e.g.
read/write ﬁle, registry or network socket). The
LoadLibrary() and GetProcAddress() functions are
not imported either, which means the common approach
of dynamically loading libraries is not used. The strings
in the executable do not contain any DLL name or li-
brary function name either. This indicates the sample
is equipped with advanced API obfuscation technique to
thwart static analysis.
Since static analysis is infeasible, we submit the sam-
ple to the Anubis malware analysis platform for dynamic
analysis. The result shows the malware does read some
registry entries and ﬁles, however, none of them seems
malicious. Hence, we feed the sample to our system
in hopes of revealing its real intent. X-Force achieves
full coverage after exploring 30 paths and generates a
graph with 15 functions. By traversing the graph, we
ﬁnd that this malware aims at stealing the password that
is stored by IE and Firefox in the victim’s machine. It
enumerates the registry entry that stores the encrypted
auto-complete password for IE and calls library func-
tions such as CryptUnprotectData() to decrypt the
stored password. This is very similar to the attack men-
tioned in [1]. Regarding Firefox, it ﬁrst gets the user
name from profiles.ini under the Firefox applica-
tion data directory, and then steals the password that is
stored in the signons*.txt under the directory of the
user name. The password is then uploaded to a remote
FTP server using the ﬁle name [Computer Name].[IP
Address].txt. Clearly, this sample ﬁnds the entry ad-
dresses of these library functions at runtime using some
obfuscation techniques. X-Force allows us to identify the
USENIX Association  
23rd USENIX Security Symposium  839
malicious behavior without spending unnecessary time
on reverse-engineering the API obfuscation.
Moreover, the ﬂow graph also reveals the reason why
Anubis missed the malicious behavior: the malware per-
forms environment checks to make sure the targets ex-
ist before trying to attack. For example, in the function
where the malware steals password from IE, it will try
to open the registry entry that contains the auto-complete
password; if such entry does not exist or is empty, the
malware will cease its operation and return from that
function. Also, before it tries to steal password stored by
Firefox, it will ﬁrst try querying the installation directory
of Firefox from registry to make sure the target program
exists in the system. Such “prerequisites“ are unlikely
to be fulﬁlled in automated analysis systems as they are
unpredictable. However, by force-executing through dif-
ferent paths, X-Force is able to get through these checks
to reveal the real intent of the malware.
TYPE_1 func1(TYPE_2 arg1, TYPE_3 arg2) {
TYPE_4 var1;
var1 = strlen (arg1);
if (arg2 >= var1)
return 0;
return arg1[arg2];
1 
2 
3 
4 
}
Figure 7: REWARDS example.
5.3 Type Reverse Engineering
Researchers have proposed techniques to reverse engi-
neer variable and data structure types for stripped bi-
naries [30, 39, 25]. The reverse engineered types can
be used in forensic analysis and vulnerability detection.
There are two common approaches. REWARDS [30]
and HOWARD [39] leverage dynamic analysis. They
can produce highly precise results but incompleteness
is a prominent limitation – they cannot reverse engineer
types of variables if such variables are not covered by ex-
ecutions. TIE [25] leverages static analysis and abstract
interpretation such that it provides good coverage. How-
ever, it is challenging to apply the technique to large and
complex binaries due to the cost of analysis.
Figure 8: Type reverse engineering coverage results.
One advantage of X-Force is that the forced execu-
tions are essentially concrete executions such that exist-
ing dynamic analyses could be easily ported to X-Force
to beneﬁt from the good coverage. Therefore in the third
case study, we port the implementation of REWARDS to
X-Force. Given a binary executable and a few test in-
puts, REWARDS executes it while monitoring dataﬂow
during execution. When execution reaches system or
library calls, the types of the parameters of these calls
are known. Such execution points are called type sinks.
Through the dynamic dataﬂow during execution, such
types could be propagated to variables that (transitively)
contributed to the parameters in the past and to variables
that are (transitively) dependent on these parameters.
Consider the example in Fig. 7. Assume func1 is
executed. After line 1, the type of arg1 and var1 get
resolved using the interface of strlen(). So TYPE 2
is char *, and TYPE 4 is unsigned int.
In line 2,
arg2 is compared with var1, implying they have the
same type. Thus TYPE 3 gets resolved as unsigned
int. Later when line 4 gets executed, it returns TYPE 1
which is resolved as char since arg1 is of char *.
Figure 9: Type reverse engineering accuracy results.
Porting REWARDS to X-Force requires very little
modiﬁcation of either the REWARDS or the X-Force
systems as they only interface through the (forced) con-
crete executions. Facilitated by X-Force, REWARDS is
able to run legacy binaries and COTS binaries without
any inputs. In our experiment, we run the new system on
the 12 SPEC2000 INT binaries. They are a lot more com-
plex than the Linux core-util programs used in the origi-
nal paper [30]. To acquire the ground truth, we compile
the programs with the option of generating debugging
symbols as PDB ﬁles, and use DIA SDK to read the type
information from the PDB ﬁles.
We evaluate the system in terms of both coverage and
accuracy. Coverage means the percentage of variables in
the program that have been executed by our system. Ac-
curacy is the percentage of the covered variables whose
types are correctly reverse engineered. From Fig. 8, the
average coverage is around 84%. The coverage heav-
ily relies on the code coverage of X-Force. Recall that
these programs have non-trivial portion of unreachable
code. The variables in those code regions cannot be re-
verse engineered by our system. From Fig.9, the average
accuracy is about 90%. The majority of type inference
840  23rd USENIX Security Symposium 
USENIX Association
Figure 10: Essence of X-Force.
failures is caused by the fact that the variables are not
related to any type sink.
We also compare with IDA and the original RE-
WARDS. IDA has a static type inference algorithm that
works in a similar fashion. When we run the original
REWARDS, we have two conﬁgurations: (1) use the test
input only (1 input per program) and (2) use both the
test and the reference inputs (around 4 inputs per pro-
gram). From Fig. 8 and Fig. 9, our system has much
better accuracy than IDA (90% vs. 55% on average) and
better coverage than the original REWARDS, i.e., 84%
vs. 57% (test+reference) or 34% (test input only). The
better accuracy than IDA is achieved by the more precise
modeling of behavior difﬁcult for static analysis, such as
heap accesses and indirect calls and jumps.
6 Discussion and Future Work
X-Force is intended to be a practical solution for ana-
lyzing unknown (malicious) binaries without requiring
any source code or inputs. Hence, X-Force trades sound-
ness and completeness for practicality.
It is unsound
as it could explore infeasible paths. It is incomplete as
it cannot afford exploring all paths. Figure 10 shows
how X-Force compares with static and dynamic analysis:
The “Reachable Program State” oval denotes all states
that can be reached through possible program inputs –
the ideal coverage for program analysis. Static analyses
often make conservative approximations such that they
yield over-approximate coverage. Dynamic analyses an-
alyze a number of real executions and hence yield under-
approximate results. X-Force explores a larger set of ex-
ecutions than dynamic analyses. Since X-Force makes
unsound approximations, its results may be invalid (i.e.,
outside the ideal oval). Furthermore, it is incomplete as
its results may not cover the ideal ones.
However, we argue that X-Force is still of importance
in practice:
(1) There are many security applications
whose analysis results are not so sensitive to paths, such
as the three studies in this paper. As such, path infeasi-
bility may not affect the results much. However, having
concrete states in path exploration is still critical in these
applications such that an execution based approach like
X-Force is suitable; (2) Only a very small percentage of
predicates are switched (Section 5.1) in X-Force. Execu-
tion is allowed to proceed naturally in most predicates,
respecting path feasibility. According to our observa-
tions, most of the predicates that got switched in linear
search are those checking if the program has been pro-
vided the needed parameters, if ﬁles are properly opened,
and if certain environmental conﬁgurations are correctly
set-up; (3) In X-Force, taint analysis is used to identify
predicates that are affected by inputs and only such pred-
icates are eligible for switching.
Moreover, X-Force allows users to (1) rapidly explore
the behaviors of any (unknown) binary as it simply exe-
cutes the binary (without solving constraints); (2) handle
binaries in a much broader spectrum (e.g., large, packed,
or obfuscated binaries); (3) easily port or develop dy-
namic analysis on X-Force as the executions in X-Force
are no different from regular concrete executions.
Future Work. We believe this paper is just an initial step
in developing a unique type of program analysis different
from the traditional static, dynamic, and symbolic anal-
ysis. We have a number of tasks in our future research
agenda.
• While X-Force simply forces the branch outcomes
of a few predicates without considering their feasi-
bility, we suspect that there is a chance in practice
the forced paths are indeed feasible in many cases.
Note that the likelihood of infeasibility is not high if
the forced predicates are not closely correlated. We
plan to use a symbolic analysis engine that mod-
els the path conditions along the forced paths to ob-
serve how often they are infeasible.
• We develop 3 exploration algorithms in this pa-
per. From the evaluation data on the SPECINT2000
programs, there are cases (e.g., perlbmk) that the
current exploration algorithms cannot handle well.
More effective algorithms, for example, based on
modeling functions behaviors and caching previous
exploration choices, will be developed.
• We currently handle multi-threaded programs by se-
rializing their executions. In the future, we will ex-
plore forcing real concurrent executions. We envi-
sion this has to be integrated with ﬂipping sched-
ule decisions, which is a standard technique in ex-
ploring concurrent execution state. How to handle
the enlarged state space and the potentially intro-
duced infeasible thread schedules will be the new
challenges.
• The current system is implemented as a tool on
top of PIN. To build a tool that makes use of X-
Force, for example REWARDS, the implementation
of the additional tool is currently mixed with X-
Force. They are compiled together to a single PIN-
tool. We aim to make X-Force transparent to dy-
namic analysis developers by providing an PIN-like
interface. Ideally, existing PIN-tools can be easily
USENIX Association  
23rd USENIX Security Symposium  841
ported to X-Force to beneﬁt from the large number
of executions provided by the X-Force engine.
• We also plan to port the core X-Force engine to