14: end while
end if
k = k − ei
ei = 0
else
The pair (r, s) is the ECDSA signature of the message m.
Given the knowledge of the ephemeral key k and all the
known information of (s, r, m), the secret key can be easily
recovered by
−1(s · k − H(m)) mod q .
α = r
(1)
2.2 The Windowed Non-Adjacent Form Rep-
resentation
Let us (cid:12)rst describe the implementation of scalar multi-
plication with windowed Non-Adjacent Form (wNAF).
In OpenSSL, if scalar multiplication kG is to be computed,
a window size w is (cid:12)rstly chosen (for curve secp256k1, w =
3), after which precomputation and storage of the points
{±G,±3G, . . . ,±(2w − 1)G} is executed. Then the scalar k
is converted to the Non-Adjacent Form (NAF), represented
by a sequence of digits ei, where ei ∈ {0,±1,±3, . . . ,±(2w−
1)}. Every non-zero element is followed by at least w ze-
ro values. Algorithm 1 introduces the concrete method for
∑
converting a scalar into its Non-Adjacent Form. We denote
those non-zero digits among {ei} as {ki}l
i=1, where l is the
number of non-zero digits. Denote the position of each ki as
i=1 ki · 2(cid:21)i .
λi, then the scalar k can be rewritten as k =
We call kl the most signi(cid:12)cant digit (MSD) and kl−1
the second MSD. After converting k to the wNAF repre-
sentation, the scalar multiplication kG is executed as the
Algorithm 2 describes.
In the actual OpenSSL execution,
instead of computing kG, it adds q or 2q to the ephemeral
key to make sure that k is ⌊log2 q⌋ + 1 bit long. This method
can resist the Brumley and Tuveri remote timing attack [5].
In most cases, the multiplication is done as (k + q)G.
l
Note that OpenSSL uses the modi(cid:12)ed wNAF representa-
tion instead of the generalized one as stated in Algorithm
1 to avoid length expansion in some cases and to make ex-
ponentiation more e(cid:14)cient. The representation of modi(cid:12)ed
wNAF is very similar to the wNAF. Each non-zero coe(cid:14)-
cient is followed by at least w zero coe(cid:14)cients, except for the
most signi(cid:12)cant digit which is allowed to violate this condi-
tion in some cases. As the use of modi(cid:12)ed wNAF a(cid:11)ects the
attack results little, we only consider the case of the wNAF
for simpli(cid:12)cation.
if r = 0, then go back to the (cid:12)rst step.
3. Compute s = k
−1 (H(m) + r · α) mod q; if s = 0, then
go back to the (cid:12)rst step.
1507Algorithm 2: OpenSSL implementation of
kG using wNAF
Input: Scalar k in the wNAF e0, e1, . . . , ev and
precomputed points
{±G,±3G, . . . ,±(2w − 1)G}
Output: kG
1: Q = G
2: for i = v, v − 1, . . . , 0 do
3:
4:
5:
6:
7: end for
Q = 2 · Q
if ei ̸= 0 then
Q = Q + eiG
end if
2.3 The Flush+Reload Attack on wNAF Rep-
resentation
According to Algorithm 2, if the if-then block is ran into,
digit ei is non-zero, and vice versa. So if we are able to
detect whether the if-then block is executed or not during
each loop of for-do, we can determine whether ei is zero or
not. The Flush+Reload attack is just a perfect tool for
doing this.
The Flush+Reload attack was (cid:12)rst proposed by Yarom
and Falkner [29]. Unlike most of the other side-channel at-
tacks that target the L1 cache level [4, 25, 30] or the branch
prediction bu(cid:11)er [2], it targets LLC, which is shared be-
tween cores, thus making it possible to mount the attack
between di(cid:11)erent cores. Using the Flush+Reload attack,
Yarom and Falkner snooped on the square-and-multiply ex-
ponentiation in the GnuPG implementation of RSA and be-
ing able to recover the RSA secret key [29]. They also use
the Flush+Reload attack to recover 95% of the ephemer-
al key of ECDSA which is implemented by OpenSSL over
characteristic two (cid:12)elds using the Montgomery ladder for
scalar multiplication [28], which means that only one sig-
nature would be enough to fully recover the ECDSA secret
key.
The Flush+Reload attack can be used to obtain the
double-and-add chain of the OpenSSL implementation of kG
using wNAF. It uses a spy program to monitor cache hit-
s/misses so that we can determine whether the program has
ran into the if-then block of Algorithm 2. Denote \A" for
an add operation in the if-then block, and \D" for a double
operation. Under the assumption of a perfect side-channel,
we may obtain a double-and-add chain of information like
this (assume that the window size w = 3, and the sequence
is written from the higher index to the lower index):
\ADDDADDDDDDAD . . . . . . DDDADD"
In fact, a double operation is done every time before the
if-then block is executed, so there is a \D" right before each
\A", but we omit these \D"s for simpli(cid:12)cation.
From the wNAF representation rule introduced in Section
2.2, though we can decide a digit is zero or not according
to the double-and-add chain of a scalar multiplication, it is
impossible to determine the sign of the non-zero digit.
If
the non-zero digit is negative, there exists carries into the
next bits. So it is not easy to get direct information on the
value of bits from the double-and-add chain in most cases
but some positions of non-zero digits.
2.4 The Extended Hidden Number Problem
The Extended Hidden Number Problem (EHNP) intro-
duced in [10] is originally used to recover the secret key
of a DSA signature, given some discrete leaked bits of the
ephemeral key.
Let N be a prime number. Given u congruences
li∑
βix +
j=1
ai;jki;j ≡ ci mod N, 1 ≤ i ≤ u ,
where ki;j and x are unknown variables satisfying 0 ≤ ki;j ≤
2"i;j and 0  256.
What’s needed to be added is that our method of extract-
ing information does not rely on any special property of
elliptic curves, we can extract on average 105.8 bits of infor-
mation per signature for any type of 256-bit elliptic curve.
3.2 Basic Attack
From Equation (1) we have αr − sk + H(m) ≡ 0 mod q.
Substituting k by Equation (2), we can get that there exists
an h ∈ Z such that
αr − l∑
(2(cid:21)j +1 · s)dj −(
j=1
)
sk − H(m)
The values of 0 < α < q, 0 6 dj 6 2w − 1 and h are
unknown, and others are known.
Suppose we successfully get u signature pairs (ri, si) of
message mi (1 6 i 6 u) using the same secret key α. From
Equation (3) we have the following u equations:
j=1
αr1 − l1∑
αri − li∑
αru − lu∑
j=1
j=1
······
(2(cid:21)1;j +1 · s1)d1;j −(
(2(cid:21)i;j +1 · si)di;j −(
(2(cid:21)u;j +1 · su)du;j −(
∑
······
)
s1k1 − H(m1)
)
siki − H(mi)
)
suku − H(mu)
+ h1q = 0
+ hiq = 0
+ huq = 0
(4)
where li is the number of non-zero digits of the i-th ephemer-
al key, λi;j is the position of the j-th non-zero digit ki;j of
li
j=1 2(cid:21)i;j +w and
the i-th ephemeral key, ki =
di;j = (ki;j − 1)/2 + 2w−1. The values of α, di;j and hi are
unknown.
j=1 2(cid:21)i;j −∑
li
We denote this EHNP instance as ECDSA-EHNP, which
can be converted to an approximate SVP using the method
introduced in [10]. For 1 6 i 6 u and 1 6 j 6 li, let
βi = siki − H(mi) mod q, ρi;j = 2(cid:21)i;j +1 · si mod q, and
µi;j be the value that 0 6 di;j 6 2(cid:22)i;j −1, which equals to w.
We use Equation (4) to construct a lattice L spanned by the
matrix M de(cid:12)ned by Equation (5), where δ is a parameter
with a proper value.
1As introduced previously, in the actual OpenSSL execution
of ECDSA, (k + q)G is done in most cases, we assume the
wNAF method is applied with (k + q)G. And the double-
and-add chain is obtained from a scalar of ⌊log2 q⌋ + 1 =
256 + 1 = 257 bits of a 256-bit ECDSA
+ hq = 0 .
(3)
Choice of δ.
(
In the lattice L = L(M ), there exists a vector
=
u
i=1 li.
,··· ,
du;1
2(cid:22)u;1
d1;l1
2(cid:22)1;l1
du;lu
2(cid:22)u;lu
δ − δ
2
δ − δ
2
,··· ,
d1;1
2(cid:22)1;1
δ − δ
2
δ − δ
2
,− δ
2
0,··· , 0,
α
q
δ − δ
∑
2
⃗w = (h1,··· , hu, α, d1;1,··· , d1;l1 ,··· , du;1,··· , du;lu ,−1) · M
,··· ,
)
,··· ,
∈ L
whose Euclidean norm satis(cid:12)es that ∥ ⃗w∥ 6 (cid:14)
T =
Note that there is another vector that is quite short, say
⃗v = (−r1,··· ,−ru, q, 0,··· , 0)·M = (0,··· , 0, δ, 0,··· , 0) ∈
∑
L, which is likely to be the (cid:12)rst vector of the reduced lattice
basis.
The lattice determinant is |L| = qu−1 · δT +2/2U +1, where
U =
i;jµi;j, and the dimension of L is n = T + u + 2. As
we can see, if the value of δ is appropriately chosen, vector
⃗w is very likely to be a short vector of L. So we can use the
lattice reduction algorithm like LLL [17] or BKZ [23] to get
the vector ⃗w, thus recovering the secret key α.
T + 2, where
√
2
As we state above, we need to set the value of δ appropri-
ately. A natural question is how to choose δ so that we can
recover the secrete key.
Actually, the value of δ is to adjust the target vector ⃗w
to be a short vector concerning the lattice M so that the
lattice reduction algorithm can (cid:12)nd it. Thus on one hand,
we need the target vector ⃗w to be short, while on the other
hand, the target vector can not be too short to be achieved
by the lattice reduction algorithm such as LLL and BKZ.
First, we need to ensure the target vector ⃗w to be rel-
atively short. Consider the Gaussian heuristic to estimate
the shortest vector in lattice, we have
√
λ1(L) ≈ GH(L) ≈
|L|1=n .
n
2πe