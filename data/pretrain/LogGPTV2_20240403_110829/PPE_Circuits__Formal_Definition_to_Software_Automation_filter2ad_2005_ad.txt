variables. However, if the polynomial h evaluates to 0 for a given
set of InTrusted variables, then this becomes an issue because uj
is now zero-ed out in the fk polynomial. We design our Rule 4 to
validate this larger class of untrusted polynomials and the resulting
testing circuit checks if the coefficient of the non-InTrusted variable
uj evaluates to 0 and handles it accordingly. Below, we further gen-
eralize this concept to validate untrusted polynomials with multiple
non-InTrusted variables. Rule 4 is formally described in Figure 6
and prove its correctness property in Lemma 4.4.
Lemma 4.4 (Correctness of Rule 4). Let Π = (G, n, m, f, u,
α , Trusted) be a PPE problem instance as in Definition 3.1, j ∈ [n]
and k ∈ [m]. Suppose ⊥(cid:44) (IsIdentity, Π′, Π′′) = Rule4(Π, j, k). Then
for every pair of testing circuits C′ and C′′ of problem instances
Π′ and Π′′ respectively, the PPE circuit ((NOT IsIdentity) ∧ C′) ∨
(IsIdentity ∧ C′′) is a testing circuit for Π. (Proof of this lemma
appears in Appendix E.)
4.3 Applying the Rules
Rules 1-4 are combined into the main algorithm, called QSearch,
in Figure 7 that takes as input a PPE problem and outputs a PPE
circuit or the special message unknown. We prove that if QSearch
outputs a testing circuit, then that circuit is guaranteed to correctly
classify PPE challenges for this PPE problem.
Theorem 4.5 (Correctness of the PPE Circuit Searching
Algorithm in Figure 7). Let Π = (G, n, m, f, u, α , Trusted) be a
PPE problem instance as in Definition 3.1. Let C = QSearch(Π). If
C (cid:44) unknown, then C is a PPE testing circuit for Π as in Definition 3.5,
and therefore Π is circuit testable.
Proof of this theorem appears in Appendix F.
5 IMPLEMENTATION
We implemented the PPE circuit searching algorithm described
in Figure 7 in a software tool called AutoCircuitPPE. We ran the
tool on several signature, verifiable random function and advanced
encryption schemes as well as other types of pairing-based pub-
lic/private parameters, including some that are PPE circuit testable
and some that are provably not PPE circuit testable. Fortunately,
our tool was able to produce outputs for the two main schemes
left open by the previous AutoPPE tool [45] and for some new
schemes not studied in that prior work. We now present the design
7Recall that InTrusted variables are the set of all variables used in the Trusted
set of polynomials.
Session 2B: Applied Cryptography CCS '20, November 9–13, 2020, Virtual Event, USA397Description of Rule 3
Input: A PPE problem Π = (G, n, m, f, u, α , Trusted) and an integer k ∈ [1, m].
Output: Two PPE circuits IsIdentity, C and two circuit PPE problems Π′, Π′′, or the symbol ⊥ (meaning could not apply rule).
Steps of Rule3(Π, k):
(1) If k ∈ Trusted or αk = T or fk ∈ f has variables not in InTrusted, abort and output ⊥.
(2) Let the formal variables F1, F2, · · · , Fm represent group elements of any PPE challenge corresponding to Π. These formal variables also
(3) Compute completion lists {s1, s2, sT } = CL(fTrusted). For any i ∈ I and j ≤ |si |, let Si[j] = дsi[j]
, and let Ui[j] be the pairing product
αi
(4) Let αk = 3−αk . Check if there exist constant vectors a = (a1, · · · , a|sT |) and b = (b1, · · · , b|sαk
represent the input wires of the PPE circuits IsIdentity and C being constructed.
term computing Si[j] in terms of formal variables F1, · · · , Fm.
|) with entries in Zp s.t. (|sαk
j =1 bj ·sαk
[j])
is not a constant polynomial when expressed in canonical form, and
|
(5) If such (a, b) exist, then
(Computing coefficient vectors a, b reduces to checking if the polynomial 0 belongs to the span of polynomials sT ∪ fk · sαk
• Compute PPEs
.)
fk · (
bj · sαk
[j]) ≡
aj · sT [j].
|sT |
j =1
|
|sαk
j =1
A := (
|sT |
B :=
UT [j]aj =
Uαk
|sαk
|
e(Fk,|sαk
e(|sαk
j =1
[j]bj = Iαk
),
|
j =1 Uαk
|
[j]bj )
[j]bj , Fk)
if αk = 1
if αk = 2
j =1
where Iαk
is the identity element in group Gαk
• Compute Π′ = (G, n, m, f, u, α , Trusted ∪ {k }) and Π′′ = SubstituteZero(Π,|sαk
is described in Figure 4. (Intuitively, SubstituteZero creates a new PPE problem instance by substituting|sαk
[j]), where the SubstituteZero algorithm
[j] with 0 in the
• If Π′′ = Π, then output ⊥. Otherwise, output the circuit IsIdentity = MakeCircuit(G, m, α , A), the circuit C = MakeCircuit(G, m, α , B)
j =1 bj · sαk
j =1 bj · sαk
j =1 Uαk
.
|
|
Trusted set of polynomials).
and PPE problems Π′, Π′′.
(6) If such (a, b) do not exist, then output ⊥.
Figure 5: Procedure for moving certain polynomials fk with all InTrusted variables to Trusted
of the AutoCircuitPPE tool followed by its test case results and
performance numbers.
5.1 AutoCircuitPPE Implementation
We implemented AutoCircuitPPE using Ocaml version 4.02.3. We
built the code on top of the AutoPPE8 tool (Hohenberger and
Vusirikala [45]; ACM CCS 2019), which in turn utilizes some of
the parsing tools and data structures (to store polynomials) of the
Generic Group Analyzer (GGA) tool9 (Barthe et al. [18]; CRYPTO
2014). We also used the SageMath package10 to solve systems of
linear equations and implemented the remaining logic ourselves.
The input format of AutoCircuitPPE is the same as the AutoPPE
tool, which makes testing with both tools easier.11 For the sake
of completeness, we present the input format below. The tool’s
input consists of pairing information (such as the Type I, II or III)
and a set of trusted/untrusted polynomials along with their group
identifiers.12 Besides, the tool optionally takes as input information
8https://github.com/JHUISI/auto-tools
9https://github.com/generic-group-analyzer/gga
10https://www.sagemath.org/
11Unlike AutoPPE, our tool does not take fixed/unfixed variables as input, as we
12While this program input is in a slightly different format than Definition 3.1, we
did not find this information to be necessary or useful.
stress that it is the same information.
that allows the tool to help the user encode some cryptosystem
parameters as a PPE problem instance. In particular, all trusted
and untrusted elements (represented by polynomials) are bilinear
group elements in G1, G2 or GT and Definition 3.1 does not al-
low including an element in Zp in either set. However, since it is
not uncommon for schemes to contain elements in the Zp domain
as part of their public or private parameters, we implemented a
workaround for those schemes similar to AutoPPE.13 The tool runs
the PPE circuit searching algorithm in Figure 7 along with a few
optimizations implemented in AutoPPE such as computing com-
pletion list before applying all the rules. It outputs either a PPE
circuit or the special symbol unknown. The PPE circuit computed
by the QSearch algorithm is generally very large; therefore we op-
timize the circuit by a few techniques such as computing common
sub-circuits only once.14
13Whenever a polynomial fi is added to the Trusted set, then the implementation
also adds uj · fi for any variables uj representing elements in Zp.
14Note that recursive calls to QSearch with the same arguments result in
common sub-circuits. However, common sub-circuits could occur even in other
scenarios. As a simple example, one recursive call to QSearch may result in
a sub-circuit of the form (NOT PPE1) OR (PPE1 AND PPE2), and an-
other recursive call to QSearch with different inputs may result in a sub-circuit
((NOT PPE1) AND PPE3) OR (PPE1 AND PPE4). In this case, (NOT PPE1) is
a common sub-circuit that can be evaluated only once.
Session 2B: Applied Cryptography CCS '20, November 9–13, 2020, Virtual Event, USA398Description of Rule 4
Input: A PPE problem Π = (G, n, m, f, u, α , Trusted) and inte-
gers j ∈ [n] and k ∈ [m].
Output: Either ⊥ (meaning could not apply the rule) or a PPE
circuit IsIdentity and two PPE problems Π′, Π′′.
Steps of Rule4(Π, j, k):
j
than uj , and
InTrusted, and
(1) If polynomial fk ∈ f is of the form h1 · ud
+ h2, where
• j (cid:60) InTrusted, k (cid:60) Trusted,
• the polynomial h1 contains only variables in
• the polynomial h2 contains any variables other
• the constant d ∈ Zp is relatively prime to p − 1,
then proceed to the next step. Otherwise, abort and out-
put ⊥.
(2) Let the formal variables F1, F2, · · · , Fm represent group
elements of any PPE challenge for Π. These formal vari-
ables will also represent the input wires of the PPE circuit
IsIdentity being constructed.
(3) Compute completion lists {s1, s2, sT } = CL(fTrusted).
For any i ∈ I and j ≤ |si |, let Si[j] = дsi[j]
, and let
αi
Ui[j] be the pairing product term computing Si[j] in
terms of formal variables F1, · · · , Fm.
(4) If there exists an α ∈ I (recall I = {1, 2, T } in the Type
III setting) and a constant vector a = (a1, a2, · · · , a|sα |)
j =1 aj ·sα [j], then
set PPE
with elements in Zp such that h1 =|sα |
|sα |
j =1
A :=
Uα [j]aj = Iα ,
IsIdentity is defined,
where Iα is the identity element of the group Gα . Then
define IsIdentity = MakeCircuit(G, m, α , A).
then set PPE problem
(5) If
Π′
and
Π′′ = SubstituteZero(Π, h1), where the function
SubstituteZero is defined in Figure 4. Output IsIdentity
and Π′, Π′′.
(G, n, m, f, u, α , Trusted ∪ {k })
(6) If IsIdentity is not defined, output ⊥.
=
Figure 6: Procedure for moving certain polynomials fk con-
taining exactly one non-InTrusted variable to Trusted
The source code for AutoCircuitPPE comprises roughly 4K lines
of Ocaml code. The input file to the tool consists of the type of pair-
ing, set of trusted and untrusted polynomials. For the schemes
in Table 1, this information can be expressed within 3-6 lines
of code. In our experience, most pairing-based schemes can be
encoded into this input format within a few minutes. The ease
of converting a given pairing-based scheme into the input for-
mat for AutoCircuitPPE makes the tool highly practical and use-
ful. The code for AutoCircuitPPE is publicly available at https:
//github.com/JHUISI/auto-tools.
5.2 A Detailed Example for the Dodis VRF
(a [45] "gray area" scheme)
Let’s walk through an example of using our tool on the Verifiable
Random Function by Dodis [34]. The Setup algorithm takes as input
security parameter λ and an input length n. It samples a Type I group
G = (p, д1,дT ,G1,GT , e), samples c ← Zp, ai ← Zp for i ∈ [n]. It
Main Algorithm for PPE Testing Circuit Search
Input: A PPE problem Π = (G, n, m, f, u, α , Trusted).
Output: A PPE circuit Q or the special symbol unknown.
Steps of QSearch(Π):
Start. If Trusted = [m], then output the always accepting cir-
cuit Q := Cacc.
Rule 1. For k = 1 to m,
(a) Call z = Rule1(Π, k).
(b) If z = (C, Π′) (cid:44)⊥, then
(i) Call C′ = QSearch(Π′) and
(ii) if C′ (cid:44) unknown, then output the PPE circuit Q :=
C AND C′.
Rule 2. For k = 1 to m and j = 1 to n,
(a) Call z = Rule2(Π, j, k).
(b) If z = Π′ (cid:44)⊥, then
(i) Call C′ = QSearch(Π′) and
(ii) if C′ (cid:44) unknown, then output the PPE circuit Q :=
C′.
Rule 3. For k = 1 to m,
(a) Call z = Rule3(Π, k).
(b) If z = (IsIdentity, C, Π′, Π′′) (cid:44)⊥, then
(i) Call C′ = QSearch(Π′) and
(ii) if C′ (cid:44) unknown, then call C′′ = QSearch(Π′′) and
(iii) if C′ (cid:44) unknown and C′′ (cid:44) unknown, then output
((NOT IsIdentity) AND C AND C′) OR (IsIdentity AND C′′).
Rule 4. For k = 1 to m and j = 1 to n,
the PPE circuit Q :=
(a) Call z = Rule4(Π, j, k).
(b) If z = (IsIdentity, Π′, Π′′) (cid:44)⊥, then
(i) Call C′ = QSearch(Π′),
(ii) if C′ (cid:44) unknown, then call C′′ = QSearch(Π′′) and
(iii) if C′ (cid:44) unknown and C′′ (cid:44) unknown, then output
Q := ((NOT IsIdentity) AND C′) OR (IsIdentity AND C′′).
Final. Otherwise, output unknown.
the PPE circuit
д
1
(cid:17)
(cid:16)
c·an1
Figure 7: Recursive procedure for searching for a PPE Test-
ing Circuit
then outputs secret key sk = (д1, a1, a2,· · · an) and verification
c·a1
key vk = (д1, дc1 , д
). The VRF algorithm takes
n
1
as input secret key sk and bit string input x. It then outputs y =
. The goal of this
д