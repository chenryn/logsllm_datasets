title:TrueErase: per-file secure deletion for the storage data path
author:Sarah M. Diesburg and
Christopher R. Meyers and
Mark J. Stanovich and
Michael Mitchell and
Justin Marshall and
Julia Gould and
An-I Andy Wang and
Geoff Kuenning
TrueErase: Per-File Secure Deletion  
for the Storage Data Path 
Sarah Diesburg, Christopher Meyers, Mark Stanovich, Michael Mitchell, Justin 
Marshall, Julia Gould, and An-I Andy Wang 
{diesburg, meyers, stanovic, mitchell, jmarshal, gould, awang}@cs.fsu.edu 
Florida State University 
Geoff Kuenning 
Harvey Mudd 
College 
PI:EMAIL 
destruction  of  data  after  it  has  expired  (e.g.,  client  files), 
complying  with  government  regulations  to  dispose  of  sensitive 
data (e.g., HIPPA [10]), deleting temporarily shared trade secrets, 
military applications demanding immediate destruction of selected 
data, and disposing of media in one-time-use applications.   
Unfortunately, existing per-file secure-deletion solutions tend 
to be file-system- and storage-medium-specific, or limited to one 
segment  of  the  operating-system  storage  data  path  (e.g.,  the  file 
system)  without  taking  into  account  other  components  (e.g., 
storage media type).  For example, a secure deletion issued by a 
program might not be honored by optimization software used on 
typical  flash  devices  that  keep  old  versions  of  the  data  [41].  
Solutions that rely on secure deletion of a stored encryption key 
become a subset of this problem, because they, too, must have a 
way to ensure the key is erased. 
In  addition,  achieving  secure  deletion  is  hard  due  to  diverse 
threat  models.    This  paper  focuses  on  dead  forensics  attacks  on 
local storage, which occur after the computer has been shut down 
properly.    Attacks  on  backups  or  live  systems,  cold-boot  attacks 
[9], covert channels, and policy violations are beyond our scope.    
In particular, our system assumes that we have full control of 
the  entire  storage  data  path  in  a  non-distributed  environment.  
Thus,  the  research  question  is,  under  benign  user  control  and 
system  environments,  what  holistic  solution  can  we  design  and 
build  to  ensure  that  the  secure  deletion  of  a  file  is  honored 
throughout  the  legacy  storage  data  path?    Although  tightly 
constrained, this criterion still presents significant challenges. 
We introduce TrueErase, a framework that irrevocably deletes 
data and metadata upon user request.  TrueErase goes to the heart 
of the user's mental model: securely deleted data, like a shredded 
document, should be irrecoverable. 
We assume the presence of file-system-consistency properties 
[34],  which  have  been  shown  to  be  a  requirement  of  secure 
deletion.    We  also  note  that  if  we  have  control  over  the  storage 
layer,  achieving 
is 
straightforward [18, 27, 38, 41]. 
secure  deletion 
raw  NAND 
flash 
However,  TrueErase  is  designed  to  overcome  the  many 
challenges of correctly propagating secure deletion information in 
a full-data-path manner—all the way from the user to the storage.  
This  framework  is  essential  for  building  other  secure-deletion 
capabilities that rely on tainting or encryption-based key deletion.  
Thus,  our  contributions  are  the  following:  (1)  a  per-file  secure-
deletion framework that works with the legacy storage data path, 
which (2) addresses the challenges raised throughout the data path 
into a single work and (3) has been systematically verified. 
2.  EXISTING APPROACHES  
We  distinguish 
the  need  for  TrueErase  from  existing 
approaches  by  enumerating  desirable  characteristics  of  secure 
deletion systems (Table 1).  
•  Per-file:  Fine-granularity  secure  deletion  brings  greater 
control  to  the  user  while  potentially  reducing  costly  secure 
deletion operations on the storage device.  
ABSTRACT 
The  ability  to  securely  delete  sensitive  data  from  electronic 
storage is becoming important.  However, current per-file deletion 
solutions tend to be limited to a segment of the operating system’s 
storage data path or specific to particular file systems or storage 
media. 
 This  paper  introduces  TrueErase,  a  holistic  secure-deletion 
framework.  Through its design, implementation, verification, and 
evaluation, TrueErase shows that it is possible to build a legacy-
compatible  full-storage-data-path  framework  that  performs  per-
file  secure  deletion  and  works  with  common  file  systems  and 
solid-state  storage,  while  handling  common  system  failures.    In 
addition,  this  framework  can  serve  as  a  building  block  for 
encryption- and tainting-based secure-deletion systems. 
Categories and Subject Descriptors 
D.4.2 [Storage Management]: Allocation/deallocation strategies, 
D.4.3  [File  Systems  Management]:    Access  methods,  D.4.6 
[Security and Protection]:  Information flow controls 
General Terms 
Design, Security 
Keywords 
Secure deletion, file systems, storage, security, NAND flash 
1.  INTRODUCTION 
Data  privacy  is  an  increasing  concern  as  more  sensitive 
information is being stored in electronic devices.  Once sensitive 
data is no longer needed, users may wish to permanently remove 
this  data  from  electronic  storage.    However,  typical  file  deletion 
mechanisms only update the file’s metadata (e.g., pointers to the 
data), leaving the file data intact.  Even recreating the file system 
from scratch does not ensure the data is removed [7].  
A  remedy  is  secure  deletion,  which  should  render  data 
irrecoverable.  Much  secure  deletion  is  implemented  through 
partition-  or  device-wide  encryption  or  overwriting  techniques 
(see  §2).    However,  coarse-grained  methods  may  not  work  on 
media such as NAND flash [41], and are cumbersome to use when 
only  a  few  files  need  to  be  securely  deleted.    Further,  securely 
deleting  an  entire  device  or  partition  may  be  infeasible  for 
embedded devices. 
Per-file secure deletion is concerned with securely removing a 
specific file’s content and metadata (e.g., name).  This ability can 
assist with implementing privacy policies concerning the selective 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
ACSAC ’12, Dec. 3–7, 2012, Orlando, Florida, USA. 
Copyright 2012 ACM 978-1-4503-1312-4/12/12 …$15.00. 
439
•  Encryption-free:    Encryption  systems  securely  delete  by 
destroying  the  keys  of  encrypted  files.    However,  these 
systems are complex due to managing per-file keys, providing 
efficient  random  access,  data  and  metadata  padding  and 
alignments,  etc.    Encryption  may  also  expire  due  to  more 
computing 
or 
implementation bugs [4, 5]; thus, encrypted data might still be 
recovered  after  its  key  is  deleted.    In  addition,  passphrase-
derived keys can be surrendered (e.g., via coercion) to retrieve 
deleted  files.    For  these  reasons,  systems  that  keep  keys  on 
storage or third-party sites still need a way to securely delete 
keys on various storage media.   
computers) 
quantum 
power 
(e.g., 
•  Data-path-wide:  Many  secure-deletion  solutions  are  within 
one  layer  of  the  legacy  storage  data  path  (Figure  1).    The 
storage-management layer has no information about a block’s 
file  ownership  [6,  35]  and  cannot  support  per-file  deletion.  
File-system-  and  application-layer  solutions  are  generally 
unaware of the storage medium and have limited control over 
the storage location of data and metadata.  In addition, storage 
such as NAND flash may leave multiple versions of sensitive 
data  behind.    Thus,  we  need  a  solution  that  spans  the  entire 
data path to enforce secure deletion. 
•  Storage-medium-agnostic:  A  secure-deletion 
framework 
should be general enough to accommodate solid-state storage 
and portable devices that use these types of storage.  
•  Limited changes to the legacy code:  Per-file secure deletion 
requires  some  information  from  the  file  system.    However, 
getting  such  information  should  not  involve  modifying 
thousands of lines of legacy code. 
•  Metadata secure deletion: Secure deletion should also remove 
metadata, such as the file name, size, etc.  
•  Crash handling: A secure-deletion solution should anticipate 
system crashes and provide meaningful semantics afterwards. 
Table 1: Existing secure-deletion methods and characteristics.
columns: F. per-file; E.  encryption-free; D.  data-path-wide;
S.  storage-medium-agnostic;  L.  limited  changes  to  legacy
code; M.  securely delete metadata; C.  handle crashes 
Secure delete encrypted device/partition key [12, 13, 
F  E  D  S  L  M C 
  (cid:57) (cid:57) (cid:57) 
19, 30, 40] 
Specialized hard drive commands [11] 
Specialized flash medium commands (page 
  (cid:57)   
(cid:57) (cid:57)   
  (cid:57) (cid:57) (cid:57) 
  (cid:57)   
granularity) [41] 
Stackable file system deletion [14, 15]  
Modified file system – deletion through overwriting 
(cid:57) (cid:57)   
(cid:57) (cid:57)   
  (cid:57) (cid:57) (cid:57) 
  (cid:57) (cid:57) (cid:57) 
[1, 14, 15] 
Modified file system – deletion through encryption 
(cid:57)   
  ? 
  ? 
[25] 
  (cid:57)  ?  (cid:57) 
Dedicated server(s) for encryption keys [8, 24] 
  (cid:57)    ? 
Encrypted backup system [2] 
  (cid:57)  ? 
User-space solution on top of flash file system [27]  (cid:57) (cid:57)   
(cid:57) (cid:57)   
  (cid:57)   
Overwriting tools [19, 28, 29, 31, 42] 
(cid:57) (cid:57) (cid:57)    (cid:57)  ?  ? 
Modified flash file systems – device erasures and/or 
(cid:57)   
(cid:57)   
overwriting [27, 38] 
Modified flash file systems – encryption with key 
(cid:57)    (cid:57)    ?  (cid:57)  ? 