title:A Trusted Safety Verifier for Process Controller Code
author:Stephen E. McLaughlin and
Saman A. Zonouz and
Devin J. Pohly and
Patrick D. McDaniel
A Trusted Safety Veriﬁer
for Process Controller Code
Stephen McLaughlin, Saman Zonouz⇤, Devin Pohly, Patrick McDaniel
Pennsylvania State University, ⇤University of Miami
{smclaugh, djpohly, mcdaniel}@cse.psu.edu, ⇤PI:EMAIL
Abstract—Attackers can leverage security vulnerabilities in
control systems to make physical processes behave unsafely.
Currently, the safe behavior of a control system relies on a
Trusted Computing Base (TCB) of commodity machines, ﬁre-
walls, networks, and embedded systems. These large TCBs, often
containing known vulnerabilities, expose many attack vectors
which can impact process safety. In this paper, we present the
Trusted Safety Veriﬁer (TSV), a minimal TCB for the veriﬁcation
of safety-critical code executed on programmable controllers. No
controller code is allowed to be executed before it passes physical
safety checks by TSV. If a safety violation is found, TSV provides
a demonstrative test case to system operators. TSV works by ﬁrst
translating assembly-level controller code into an intermediate
language, ILIL. ILIL allows us to check code containing more
instructions and features than previous controller code safety
veriﬁcation techniques. TSV efﬁciently mixes symbolic execution
and model checking by transforming an ILIL program into
temporal execution graph that lumps together safety-
a novel
equivalent controller states. We implemented TSV on a Raspberry
Pi computer as a bump-in-the-wire that intercepts all controller-
bound code. Our evaluation shows that it can test a variety of
programs for common safety properties in an average of less than
three minutes, and under six minutes in the worst case—a small
one-time addition to the process engineering life cycle.
I.
INTRODUCTION
Control systems used in the power grid, industrial au-
tomation, and transportation are fundamental parts of modern
society. Due to their strategic importance and large attack
surfaces, they are becoming attractive targets for attacks lead-
ing to physical damage [16], [29]. Most recently,
it was
revealed that the Stuxnet malware uploaded malicious code to
Programmable Logic Controllers (PLCs) to physically damage
the centrifuges they controlled [11]. A recent study found that
PLC honeypots experienced not only port scanning, but also
attempts at modifying control system speciﬁc protocols and
access to system diagnostics [34]. These vulnerable Internet-
connected controllers are exposed by computer search engines
such as Shodan [1]. This has led to efforts for securing critical
infrastructure based on control systems [17], [31]. Recent
research has demonstrated that attacks against PLCs can be
partially automated [18]. This makes the protection of PLCs
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1) Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:17)(cid:21)(cid:20)
from malicious code injection of paramount importance.
Past efforts to ensure control system safety have focused on
securing the control system’s Trusted Computing Base (TCB),
the set of hardware and software that must function properly
to ensure safe behavior. Unfortunately, such approaches are
insufﬁcient as software patches are often applied only months
after release [26], and new vulnerabilities are discovered on
a regular basis [4], [23]. Instead, we focus on signiﬁcantly
reducing the TCB size by verifying the safety of control
code immediately before it is executed on the PLC. For our
purposes, a safety property is any temporal property that can
be stated in linear temporal logic. This allows TSV to protect
against malicious behaviors beyond those handled by existing
failsafe mechanisms, such as captive key interlocks. Existing
safety veriﬁcation methods for PLCs suffer from two main
limitations. (i.) Those based on model checking experience the
state explosion problem when dealing with numerical inputs.
(ii.) Previous techniques fail to check code using common PLC
features such as master control relays and non-volatile data
storage (See Section VII).
In this paper, we present the Trusted Safety Veriﬁer (TSV).
TSV reduces the Trusted Computing Base (TCB) for safe
process execution from the entire control system down to the
protected PLC and a single embedded computer administered
through a narrow interface. TSV is deployed as a bump-in-
the-wire that sits between the control system network and the
PLC. All code to be executed on the PLC is ﬁrst checked
against a set of safety properties deﬁned by process engineers.
Examples of safety properties include bounds on numerical
device parameters, e.g., maximum drive velocity and accelera-
tion, and safety interlocks, which ensure physically conﬂicting
events do not occur.
This paper makes the following contributions.
• We introduce TSV as by far the most minimal TCB
proposed to maintain control system safety properties.
Our tool can check a much larger variety of PLC code
•
than any previous safety analysis tool. (See Table I in
Section VII.)
TSV is the ﬁrst binary analysis tool to verify temporal
properties, including for programs that take numerical
inputs.
•
• We fully implement TSV and demonstrate its per-
formance in checking a variety of properties against
different control systems.
TSV works in a number of steps. First, an assembly-level
is translated
PLC program, called an instruction list (IL),
into the Instruction List Intermediate Language (ILIL). ILIL,
which we based on the Vine intermediate language [30],
makes all instruction side-effects explicit, thus maintaining all
information ﬂows between system registers and memory. In
the second step, the ILIL program is symbolically executed
(mixed with concrete executions when values are known) to
produce a symbolic scan cycle, representing all executions
of the code by the PLC. Thus, all inputs which produce an
equivalent symbolic output are lumped together. Third, the
symbolic scan cycle is used to construct a novel Temporal
Execution Graph, (TEG) which represents multiple repeated
executions of the controller code. Finally, the TEG is checked
against a set of safety properties speciﬁed in linear temporal
logic. If any check fails, a counterexample and the offending
instructions are provided to the system operator.
TSV Safety properties are the same as those used by
process engineers in designing the control system. To maintain
the integrity of TSV’s platform, new safety rules should
be updated by a physically present operator with a special
programming device. Given that this only needs to occur when
the physical safety requirements of plant machinery change,
this measure is far less burdensome than some proposed by
large industrial security standards [20].
We implemented a working prototype of TSV on a Rasp-
berry PI embedded computer to check code for Siemens PLCs,
the most widely deployed in the world [28]. We evaluated
TSV on six case studies representing a diverse set of PLC
and control system functionality. These case studies consist of
speciﬁcations and code that is runnable on several of the most
popular PLC architectures. Our implementation can check
for typical safety properties like range violations and safety
interlocks in a few minutes. If a safety check fails, a useful
counterexample and the offending instructions are produced.
By using an intermediate language for our analysis, TSV can
be extended in the future to handle check code for other
proprietary PLC architectures. Because our prototype checks
assembly-level code, it effectively checks any PLC program
written in higher-level or graphical languages like relay ladder
logic, function block diagram, and structured text.
This paper is organized as follows. Section II gives an
introduction to PLCs and lays out our assumed threat model.
Section III gives an overview of TSV’s architecture and use.
Section IV and Section V explain the symbolic execution and
model checking engines in detail. Section VI describes our
prototype implementation and evaluation results. Section VII
covers the related work in control system safety and security,
and Section VIII concludes.
II. BACKGROUND AND THREAT MODEL
A. Programmable Logic Controllers
A Programmable Logic Controller (PLC) is a digital, multi-
input multi-output computer used for real-time automation of
physical machinery. They are used in virtually every control
application from assembly lines to nuclear power plants. The
PLC sits in a tight closed loop with the physical system
it controls. Many times per second, the PLC reads sensor
measurements, calculates the necessary change to the system,
and sends commands to physical machinery to make the
changes. The PLC uses a modiﬁable software program to
perform the second step.
A PLC’s program is executed continuously as long as the
PLC is running. Each execution of the program is called a scan
cycle, and typically lasts several milliseconds. On each scan
cycle, three steps occur. (i.) The sensor inputs are buffered
into the input memory (I). (ii.) The PLC program is executed
to perform calculations based on the input memory and state
from the previous scan cycle. (iii.) The result of the PLC
program is buffered in the output memory (Q), from where it
is transmitted to the plant machinery. In addition to the sensor
and machine interfaces, PLCs have a separate programming
interface, e.g., Ethernet or RS-232 for uploading of new code
and data by process engineers and plant operators. TSV’s job
is to efﬁciently check any code coming over this interface for
safety properties speciﬁc to the plant machinery.
In addition to the typical features found in most instruction
set architectures PLCs employ a number of special features that
TSV must handle.
•
•
Function Blocks. PLCs execute code in discrete
segments called function blocks with ﬁxed entry and
exit points. Each function block has a local memory
that only it can address. This is different from stack
memory in that each function block’s local memory
exists in the same absolute address space, i.e., not
relative to a stack pointer.
Timers. PLCs support hardware timers that evaluate
to a Boolean value. A timer starts when its input
experiences an edge transition. Once the timer has
reached a preset time, its own output goes from low
to high.
Counters. A counter is a value in PLC memory that is
incremented each time a speciﬁed instruction causes
a value to go from low to high. This is useful for
counting events like the number of times an input wire
receives a high signal.
• Master Control Relays. A Master Control Relay
(MCR) deﬁnes a section of PLC code which behaves
differently depending on the value of a speciﬁc input
wire. If the MCR input is false, the code executes
normally. If it is true, certain instructions will output
a zero value. This is done to halt any machinery in
case of an emergency condition.
Data Blocks. PLCs retrieve conﬁguration information
about the physical process from blocks of persistent
storage called data blocks (DBs). Each DB has a
unique integer used to qualify any addresses to its
data. A special kind of DB, called an instance DB
is also used to pass parameters to function blocks.
Edge Detection. Certain PLC instructions will only
execute after a speciﬁc memory value goes from low
to high. This requires the CPU to check for low to
high transitions before any such instruction executes.
•
•
•
B. Threat Model
In modern control system networks, a security ﬂaw in
almost any component can be leveraged to upload malicious
code to a PLC. A clear example of this was the Stuxnet virus,
which used many potential vectors, including the program
2
development environment, to propagate to a PLC-connected
computer [11]. TSV’s aim is to reduce the amount of control
system infrastructure needed to guarantee safe behavior of
PLC-controlled processes to a single embedded computer and
the PLC itself.
It must be possible to notify plant operators when a safety
violation is found in some PLC-bound code. If there is a
rootkit present on a PLC connected computer, then notiﬁca-
tions from TSV may be suppressed at the receiver. To handle
this, we assume that there is some narrow, secure interface
for notiﬁcations. A common way of implementing this in a
control environment could be by way of an analog alarm,
similar to those sounded when a piece of physical machinery
malfunctions. Upon hearing the alarm, plant operators could
directly download the safety counterexample, e.g., via serial
port. In an emergency situation where immediate PLC access
is needed, a physical switch in the plant could be employed
to bypass TSV, similar to the emergency stop buttons on most
heavy machinery.
We also must assume that the interface for uploading safety
properties to TSV is secured. For example, a simple ﬁle format
could be read from a USB key directly by TSV. While the use
of an air-gap may seem to mitigate the advantage of a network
connected PLC, safety properties require modiﬁcation far less
frequently than PLC code. Compared to the large numbers of
requirements in existing industrial security regulations [20],
this is a small additional overhead. We note that TSV is not
secure against a privileged insider with physical access to the
plant ﬂoor.
TSV cannot defend against false data injection attacks,
in which a PLC is given forged sensor data. Additional
defenses already exist for such attacks based on improved state
estimators [5], [27]. Additionally, TSV cannot defend against
PLC ﬁrmware exploitation, in which case the veriﬁed control
logic can be completely bypassed by the compromised PLC.
III. SYSTEM OVERVIEW
Figure 1 shows TSV’s architecture. TSV sits as a bump-
in-the-wire between system operators and the PLC. Any piece
of PLC-bound code is intercepted and checked for safety
properties, previously supplied by process engineers. To test
safety properties written in temporal logic, TSV uses model
checking for part of the veriﬁcation. Model checking suffers
from state space explosion on numerical inputs. For example,
if a PLC program has a single conditional branch depending
on an integer value, the model checker will explore all of the
possibilities, i.e., 232 states. To prevent state space explosion,
TSV ﬁrst performs a symbolic execution of the program to
lump together all inputs that produce the same symbolic output.
The resulting state machine is many orders of magnitude
smaller than the naive approach.
Symbolic execution of the PLC code occurs in two main
steps. First,
the PLC code is lifted into an intermediate
language designed to make the analysis more generic and
explicit. The lifted program is then symbolically executed to
generate a mapping from path predicates to symbolic outputs.
This mapping contains all possible executions of a single scan
PLC Code (IL)
Safety Speciﬁcation
TSV
Instruction Lifting
ILIL Code
Symbolic Execution
Symbolic Scan Cycle
Graph Generation
Temporal Execution Graph
Counterexample
)
l
i
a
F
(
Formal Veriﬁcation
(Pass)
PLC Code
PLC
Fig. 1. TSV Architecture.
cycle1, hence, we refer to it as a symbolic scan cycle. Once
the symbolic scan cycle is calculated, TSV’s model checking
component is invoked. The symbolic scan cycle is an important
step, as it prevents intra-scan cycle property violations from
being rejected by TSV. In other words, if the PLC’s variables
temporarily violate a safety property at some point during
the scan cycle, but the property is not violated when control
signals are sent to physical machinery, then TSV will not reject
the control program. This is an important distinction from
the existing work combining symbolic execution and formal
veriﬁcation.
The formal veriﬁcation component takes a set of temporal
properties, consisting of atomic propositions combined with
temporal qualiﬁers, and veriﬁes they are maintained by a
state-based model of the PLC code. We call this model, the
Temporal Execution Graph (TEG). The TEG is a state machine
in which each state transition represents a single scan cycle.
Each state in the TEG contains the state and output variables
of the PLC program, and a set of Boolean variables for
the atomic propositions. Each Boolean represents whether the
safety property is true or false in that state. If any path is
reachable in which a property is false, then a safety violation
is raised.
The TEG is constructed as follows. An initial state is cho-
sen in which all state and output variables are zero. Recalling
that the symbolic scan cycle maps path predicates to symbolic
values for PLC variables including the output variables, a new
state is generated for each path predicate with its PLC variables
updated according to the corresponding symbolic output. For
each of these newly created states, several more states are
generated with different valuates of the atomic propositions.
The process then repeats on each new state. See Section V-B
for a detailed description of TEG creation.
IV. PLC CODE ANALYSIS
TSV veriﬁes safety properties of PLC code using a com-
bination of symbolic execution and model checking. Tradi-
tional model checking, which explores states exhaustively,
1In practice, it contains all executions that are reachable by scan cycle’s
hard deadline. See Section IV-B.
3
prog ::= inst⇤fun⇤
fun ::= ident(var){inst⇤}
inst ::= cjmp e,e,e | jmp e | label ident | ident := e
e ::= load(ident,addr) | store(ident,addr, int) | e binop e