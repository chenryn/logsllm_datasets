## PostgreSQL的安全场景介绍, 以及security label(安全标签功能)的label provider: pgsodium 加密库介绍(隐藏|加密敏感信息) - 字段透明加解密 - libsodium 加密库实现   
### 作者      
digoal      
### 日期      
2023-07-07      
### 标签      
PostgreSQL , PolarDB , 安全 , 敏感信息 , 加密 , security label , row security policy , anon , sepgsql , libsodium , pgsodium , 字段透明加密 , 触发器。     
----      
## 背景    
接上一篇:  
- [《PostgreSQL的安全场景介绍, 以及security label(安全标签功能)和两个label provider: anon, sepgsql的介绍(隐藏|加密敏感信息)》](../202307/20230707_01.md)    
pgsodium是一款利用libsodium加密库的PosgreSQL安全插件, 可以用来管理密钥, 加解密数据. 相比pgcrypt功能更加强大.   
- 启动数据库实例时需要给定 root key (即server key)   
- root key可以从kms服务器获取, 也可以本地生成. 推荐生产中使用kms管理.   
- 使用root key可以生成很多数据key以及对应key id  
- 使用root key可以生成很多数据key pair (public , secret)  
- 使用root key可以从key id反解析出对应的key 原始值  
- 结合security label , 可以自动对字段内容进行加密. (实现字段内容透明加解密. 注意由于原始内容未实际存储, 所以不支持索引排序操作, 这里说的透明是指自动完成加密存储, 并从视图读取解密数据.)  
- 提供了libsodium加密库对应的SQL API  
![pic](20230707_02_pic_001.jpg)  
## 测试  
在macOS pg 15环境中测试  
1、先安装libsodium  
```  
git clone --depth 1 --branch stable https://github.com/jedisct1/libsodium   
cd libsodium  
CC=clang CXX=clang++ ./configure  
make  
make check  
sudo make install  
```  
2、安装pgsodium  
```  
git clone --depth 1 https://github.com/michelp/pgsodium  
cd pgsodium  
C_INCLUDE_PATH=/usr/local/include PG_LDFLAGS=-L/usr/local/lib USE_PGXS=1 make   
C_INCLUDE_PATH=/usr/local/include PG_LDFLAGS=-L/usr/local/lib USE_PGXS=1 make install  
```  
3、安装pgsodium插件  
```  
psql  
create extension pgsodium;  
postgres=# \dx  
                               List of installed extensions  
   Name   | Version |   Schema   |                       Description                         
----------+---------+------------+---------------------------------------------------------  
 pgsodium | 3.1.7   | pgsodium   | Pgsodium is a modern cryptography library for Postgres.  
 plpgsql  | 1.0     | pg_catalog | PL/pgSQL procedural language  
(2 rows)  
postgres=# \dn  
          List of schemas  
      Name      |       Owner         
----------------+-------------------  
 pgsodium       | postgres  
 pgsodium_masks | postgres  
 public         | pg_database_owner  
(3 rows)  
```  
注意要将pgsodium配置到第一搜索路径  
```  
set search_path=pgsodium, "$user", public;  
```  
可以看到key表, 就是保存create_key创建的key的地方. 使用security label进行透明字段加密时, 必须使用key表中的key id.   
```  
postgres=# \dt  
         List of relations  
  Schema  | Name | Type  |  Owner     
----------+------+-------+----------  
 pgsodium | key  | table | postgres  
(1 row)  
postgres=# \dv  
             List of relations  
  Schema  |     Name      | Type |  Owner     
----------+---------------+------+----------  
 pgsodium | decrypted_key | view | postgres  
 pgsodium | mask_columns  | view | postgres  
 pgsodium | masking_rule  | view | postgres  
 pgsodium | valid_key     | view | postgres  
(4 rows)  
postgres=# \x  
Expanded display is on.  
postgres=# \df create*  
List of functions  
-[ RECORD 1 ]-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
Schema              | pgsodium  
Name                | create_key  
Result data type    | valid_key  
Argument data types | key_type key_type DEFAULT 'aead-det'::key_type, name text DEFAULT NULL::text, raw_key bytea DEFAULT NULL::bytea, raw_key_nonce bytea DEFAULT NULL::bytea, parent_key uuid DEFAULT NULL::uuid, key_context bytea DEFAULT '\x7067736f6469756d'::bytea, expires timestamp with time zone DEFAULT NULL::timestamp with time zone, associated_data text DEFAULT ''::text  
Type                | func  
```  
使用create_key()可以创建key, 并存储到key表中.  
```  
postgres=# select * from create_key();  
-[ RECORD 1 ]---+-------------------------------------  
id              | b9250679-be72-49f8-be33-efec93116659  
name            |   
status          | valid  
key_type        | aead-det  
key_id          | 1  
key_context     | \x7067736f6469756d  
created         | 2023-07-07 21:19:10.464761+08  
expires         |   
associated_data |   
postgres=# select * from key;  
-[ RECORD 1 ]---+-------------------------------------  
id              | b9250679-be72-49f8-be33-efec93116659  
status          | valid  
created         | 2023-07-07 21:19:10.464761+08  
expires         |   
key_type        | aead-det  
key_id          | 1  
key_context     | \x7067736f6469756d  
name            |   
associated_data |   
raw_key         |   
raw_key_nonce   |   
parent_key      |   
comment         |   
user_data       |   
```  
4、配置pgsodium自动加载, 并且使用本地生成root key的脚本来进行测试.   
```  
postgresql.conf  
shared_preload_libraries = 'pgsodium'   
```  
查看一下生成root key的脚本内容  
```  
digoaldeMacBook-Pro:getkey_scripts digoal$ pwd  
/Users/digoal/Downloads/pgsodium/getkey_scripts  
digoaldeMacBook-Pro:getkey_scripts digoal$ ll  
total 40  
-rwxr-xr-x   1 digoal  staff   593B  7  7 20:21 pgsodium_getkey_aws.sh  
-rw-r--r--   1 digoal  staff   547B  7  7 20:21 pgsodium_getkey_doppler.sh  
-rwxr-xr-x   1 digoal  staff   1.3K  7  7 20:21 pgsodium_getkey_gcp.sh  
-rwxr-xr-x   1 digoal  staff   165B  7  7 20:21 pgsodium_getkey_urandom.sh  
drwxr-xr-x   7 digoal  staff   224B  7  7 20:21 .  
-rwxr-xr-x   1 digoal  staff   747B  7  7 20:21 pgsodium_getkey_zmk.sh  
drwxr-xr-x  31 digoal  staff   992B  7  7 21:13 ..  
digoaldeMacBook-Pro:getkey_scripts digoal$ cat pgsodium_getkey_urandom.sh  
#!/bin/bash  
KEY_FILE=$PGDATA/pgsodium_root.key  
if [ ! -f "$KEY_FILE" ]; then  
    head -c 32 /dev/urandom | od -A n -t x1 | tr -d ' \n' > $KEY_FILE  
fi  
cat $KEY_FILE  
```  
这个脚本用了`$PGDATA`变量, key文件第一次获取后将会存储下来. 所以server key的内容是不变的, 内容变了的话就危险了, 因为后面要通过这个key来解码它之前生成的key id对应的secret key.   
```  
digoaldeMacBook-Pro:getkey_scripts digoal$ ./pgsodium_getkey_urandom.sh  
d5acd8b85d370bd418ed56dc6a54e56f2336ac235af9db7aa7d06b051ac21507  
```  
将生成root key的脚本拷贝到pghome对应子目录, 然后启动数据库实例  
```  
cp pgsodium_getkey_urandom.sh $PGHOME/share/postgresql/extension/pgsodium_getkey  
digoaldeMacBook-Pro:getkey_scripts digoal$ pg_ctl start  
waiting for server to start....2023-07-07 21:33:57.435 CST [33286] LOG:  pgsodium primary server secret key loaded  
2023-07-07 21:33:57.457 CST [33286] LOG:  redirecting log output to logging collector process  
2023-07-07 21:33:57.457 CST [33286] HINT:  Future log output will appear in directory "log".  
 done  
server started  
```  
5、继续创建data key  
```  
postgres=# set search_path=pgsodium, "$user", public;  
SET  
postgres=# select * from create_key();  
                  id                  | name | status | key_type | key_id |    key_context     |            created            | expires | associated_data   
--------------------------------------+------+--------+----------+--------+--------------------+-------------------------------+---------+-----------------  
 82730add-3c8e-4e5c-96ce-2d722e74e1a0 |      | valid  | aead-det |      2 | \x7067736f6469756d | 2023-07-07 21:34:25.439691+08 |         |   
(1 row)  
postgres=# select * from create_key();  
                  id                  | name | status | key_type | key_id |    key_context     |            created            | expires | associated_data   
--------------------------------------+------+--------+----------+--------+--------------------+-------------------------------+---------+-----------------  
 877f8bd5-334b-4e6e-9d18-849f65f2c669 |      | valid  | aead-det |      3 | \x7067736f6469756d | 2023-07-07 21:34:28.490552+08 |         |   
(1 row)  
```  
查看key表  
```  
postgres=# select * from key;  
                  id                  | status |            created            | expires | key_type | key_id |    key_context     | name | associated_data | raw_key | raw_key_nonce | parent_key | comment | user_data   
--------------------------------------+--------+-------------------------------+---------+----------+--------+--------------------+------+-----------------+---------+---------------+------------+---------+-----------  
 b9250679-be72-49f8-be33-efec93116659 | valid  | 2023-07-07 21:19:10.464761+08 |         | aead-det |      1 | \x7067736f6469756d |      |                 |         |               |            |         |   
 82730add-3c8e-4e5c-96ce-2d722e74e1a0 | valid  | 2023-07-07 21:34:25.439691+08 |         | aead-det |      2 | \x7067736f6469756d |      |                 |         |               |            |         |   
 877f8bd5-334b-4e6e-9d18-849f65f2c669 | valid  | 2023-07-07 21:34:28.490552+08 |         | aead-det |      3 | \x7067736f6469756d |      |                 |         |               |            |         |   
(3 rows)  
```  
6、测试security label 透明加密列的内容  
```  
postgres=# create schema private;  
CREATE SCHEMA  
postgres=# CREATE TABLE private.users (  
id bigserial primary key,   
secret text);  
CREATE TABLE  
postgres=# SECURITY LABEL FOR pgsodium ON COLUMN private.users.secret IS 'ENCRYPT WITH KEY ID b9250679-be72-49f8-be33-efec93116659';  
NOTICE:  view "decrypted_users" does not exist, skipping  
NOTICE:  function private.users_encrypt_secret_secret() does not exist, skipping  
NOTICE:  trigger "users_encrypt_secret_trigger_secret" for relation "private.users" does not exist, skipping  
NOTICE:  about to masking role private.users private.decrypted_users  
SECURITY LABEL  
```  
可以看到自动创建了触发器  
```  
postgres=# \d private.users   
                               Table "private.users"  
 Column |  Type  | Collation | Nullable |                  Default                    
--------+--------+-----------+----------+-------------------------------------------  
 id     | bigint |           | not null | nextval('private.users_id_seq'::regclass)  
 secret | text   |           |          |   
Indexes:  
    "users_pkey" PRIMARY KEY, btree (id)  
Triggers:  
    users_encrypt_secret_trigger_secret BEFORE INSERT OR UPDATE OF secret ON private.users FOR EACH ROW EXECUTE FUNCTION private.users_encrypt_secret_secret()  
postgres=# \df private.users_encrypt_secret_secret  
                                   List of functions  
 Schema  |            Name             | Result data type | Argument data types | Type   
---------+-----------------------------+------------------+---------------------+------  
 private | users_encrypt_secret_secret | trigger          |                     | func  
(1 row)  
```  
查看触发器函数内容可以了解到自动使用加密函数, 以及指定的key id对应的原始key内容来加密数据.  
```  
postgres=# \sf private.users_encrypt_secret_secret  
CREATE OR REPLACE FUNCTION private.users_encrypt_secret_secret()  
 RETURNS trigger  
 LANGUAGE plpgsql  
AS $function$  
		BEGIN  
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE  
			CASE WHEN 'b9250679-be72-49f8-be33-efec93116659' IS NULL THEN NULL ELSE pg_catalog.encode(  
			  pgsodium.crypto_aead_det_encrypt(  
				pg_catalog.convert_to(new.secret, 'utf8'),  
				pg_catalog.convert_to(('')::text, 'utf8'),  
				'b9250679-be72-49f8-be33-efec93116659'::uuid,  
				NULL  
			  ),  
				'base64') END END;  
		RETURN new;  
		END;  
		$function$  
```  
插入数据, 查看原始表的内容已经自动加密  
```  
postgres=# insert into private.users (secret ) values ('test');  
INSERT 0 1  
postgres=# select * from private.users;  
 id |                      secret                        
----+--------------------------------------------------  
  1 | If9GBZHYdD3fZK+JSTQixjKUqLb5GjxESo+9oxL98S5TlFj6  
(1 row)  
```  