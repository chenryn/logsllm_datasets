# 四、创建管道和工作流
一个在工作流中自动运行的管道，通过不同的阶段，将早期发现问题，并帮助您的团队以最有效的方式协作。
在本章中，我们将遵循持续的集成实践，在每次变更时自动运行管道，以确保我们的所有代码都遵循高质量标准，并且它运行并通过所有测试。我们还将准备一个容器投入生产。
我们将看到如何利用 GitHub 和 Travis CI 等工具，以最少的干预创建映像。
在本章中，我们将涵盖以下主题:
*   理解持续集成实践
*   配置特拉维斯配置项
*   配置 GitHub
*   从特拉维斯 CI 推送 Docker 映像
到本章结束时，您将知道如何在每次代码更改时自动运行测试，以及如何创建一个安全网来允许您更快、更高效地开发。
# 技术要求
您需要一个 GitHub 帐户，并且需要成为您将为持续集成而设置的项目的所有者。作为本章的一部分，我们将创建一个 Travis CI 帐户。
您可以从 GitHub([https://GitHub . com/PacktPublishing/hand-On-Docker-for-micro-service-with-Python/tree/master/chapter 04](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter04))的`Chapter04`子目录中检出本章中提到的完整代码。以`.travis.yml`结尾的文件在根目录中。
# 理解持续集成实践
**持续集成**(通常缩写为 **CI** )是一系列确保代码始终处于工作状态的软件工程实践。
术语持续集成来自于历史上必须频繁集成软件，通常是一天多次。这是因为开发人员使用的本地代码不一定会自动与其他人的代码结合。如今，使用一个源代码管理版本控制软件，比如 Git，使得一些元素自动可用。
持续集成强调始终拥有潜在的可发布代码。这使得发布经常成为可能，只需要少量的代码增量。
Making more releases more often actually generates an increase in the quality of each release. More deployments also mean that each deployment is smaller, reducing the possibility of a big problem. Even if it sounds counterintuitive, faster deployment is highly correlated with higher quality in deployments and fewer production problems.
The objective here is to be able to increase the deployment speed. But for that, we need to be sure to build a good safety net that checks (automatically) that what we're doing is safe to release. That's where all the CI practices come into play.
在设置好所有的流程和基础设施之后，很有可能一天实现多次发布(假设代码生成得足够快)。到达那里可能需要一段时间，但一定要花时间去理解这个过程，并制作所有必要的工具，以确保在不牺牲稳定性的情况下获得速度。相信我，这是完全可以实现的！
# 产生自动化构建
CI 的核心元素是生成与源代码控制系统集成的自动化构建。软件构建是(从源代码开始)执行一系列操作并产生输出的过程。如果项目是用编译语言编写的，输出通常是编译后的程序。
如果我们想要高质量的软件，那么构建的一部分包括检查生成的代码是否符合代码标准。如果代码没有遵循这些标准，那么构建将返回一个错误。
A common way of describing errors on a build is to say that the *build is broken*. A build can break in different ways, and some kinds of error may stop it early (such as a compilation error before running tests) or we can continue to detect further issues (such as running all tests to return all possible errors).
可以作为构建一部分的步骤示例如下:
*   编译代码。
Python usually doesn't need to be compiled, but it might be required if you use C extensions (modules written in C and imported from Python: [https://docs.python.org/3/extending/](https://docs.python.org/3/extending/)) or tools such as Cython ([https://cython.org/](https://cython.org/)[).](https://cython.org/)
*   运行单元测试
*   运行静态代码分析工具
*   构建一个或多个容器
*   使用安全([https://pyup.io/safety/](https://pyup.io/safety/))等工具检查已知漏洞的依赖关系
*   生成用于分发的二进制或源包。比如 RPM([https://rpm.org/](https://rpm.org/))、德比安套餐([https://www.debian.org/doc/manuals/debian-faq/ch-pkg_basics](https://www.debian.org/doc/manuals/debian-faq/ch-pkg_basics))等等
*   运行其他类型的测试
*   从代码生成报告、图表或其他资产
任何可以自动运行的东西都可以成为构建的一部分。本地构建可以随时生成，即使代码仍在进行中。这对调试和解决问题很重要。但是自动化构建将针对每个单独的提交运行，而不是在任何中间阶段。这使得检查哪些代码将在生产中运行以及哪些代码仍在运行变得非常明确。
Note that a single commit may still be work in progress, but it will be worth committing anyway. Maybe it's a single step toward a feature, more than one person is working on the same part of the code, or it's work spread over several days and the code gets pushed at the end of the day. No matter, each commit is a reproducible step that can be built and checked whether the build is successful or not.
为每个提交运行构建可以非常快速地检测到问题。如果提交量很小，一个突破性的变化就很容易确定。它还使得恢复破坏构建的更改并返回到已知的工作代码变得容易。
# 了解在构建中使用 Docker 的优势
构建的主要传统问题之一是拥有一个足够的构建环境，其中包含运行完整构建所需的所有依赖项。这可能包括编译器、运行测试的测试框架、任何静态分析工具以及包管理器。版本的差异也会产生错误。
正如我们之前看到的，Docker 是封装我们软件的一种非常棒的方式。它允许我们创建一个包含我们的代码和所有能够完成所有步骤的工具的映像。
在前一章中，我们看到了如何基于构建映像在单个命令中运行单元测试。映像本身可以运行自己的单元测试。这抽象了测试环境并明确定义了它。这里唯一需要的依赖是安装 Docker。
请记住，一个构建可以生成多个映像，并使它们协同工作。在上一章中，我们看到了如何通过生成服务映像和数据库映像来运行单元测试，但是还有更多可能的用途。例如，您可以检查在两个不同的操作系统上运行的测试，从每个操作系统或不同的 Python 解释器版本创建两个映像，并检查测试是否全部通过。
Docker 映像的使用允许在所有环境中实现标准化。我们可以在开发环境中本地运行映像，使用与自动化环境中相同的命令。这简化了错误和问题的查找，因为它在构建运行的任何地方都创建了相同的环境，包括封装的操作系统。
Do not underestimate this element. Before that, a developer working on a laptop running Ubuntu and keen to run code to be deployed in CentOS needed to install a **Virtual Machine** (**VM**) and follow steps to have an environment similar to the one in production. But invariably, the local VM would deviate as it was difficult to keep every developer's local VM in sync with the one in production; also, any automated-build tool might also have requirements, such as not supporting an old version of CentOS running in production.
To make things worse, sometimes different projects were installed on the same VM, to avoid having one VM per project, and that may cause compatibility problems.
Docker massively simplifies this problem, in part forcing you to explicitly declare what the dependencies are, and reducing the surface actually required to run our code.
请注意，我们不一定需要创建运行整个构建的单一步骤；它可能是几个 Docker 命令，甚至使用不同的映像。但要求是它们都包含在 Docker 中，Docker 是运行它所需的唯一软件。
使用 Docker 构建的主要产品是 Docker 映像。我们需要正确地标记它们，但前提是构建成功。
# 利用管道概念
配置项工具有助于阐明构建应该如何进行，并围绕管道的概念进行工作。管道是阶段的集合。如果其中任何一个不成功，管道就会停止。
管道中的每个阶段都可以产生可以在后期使用的元素，或者作为完整构建的最终产品。这些最终的元素被称为人工制品。
让我们看一个管道的例子:
![](img/11e95cdf-0c76-4701-9c4a-69964b4b49dd.png)
第一阶段从源代码管理系统中提取最新的提交。然后，我们构建所有的容器，运行测试和静态分析。如果一切都成功了，我们标记得到的`server`容器，并将其推送到注册表。
The order in which these stages run should be oriented at detecting problems as quickly as possible to give quick feedback. For example, if the `static-analysis` stage is much faster than the `test` stage, putting the analysis stage first will make a failing build finish earlier. Be aware of which parts can be executed earlier to reduce the feedback time.
配置项工具通常允许在管道中进行大量配置，包括并行运行不同阶段的可能性。为了能够并行运行阶段，它们需要能够并行，这意味着它们不应该改变相同的元素。
如果选择的配置项工具允许并行运行阶段，管道可以定义如下:
![](img/c7754936-9bc7-4507-a412-2ad09198cb3c.png)
请注意，我们并行构建数据库和测试映像。下一阶段构建其余的元素，这些元素已经在缓存中可用，所以它会非常快。测试和静态分析可以在两个不同的容器中并行运行。
这可能会加速复杂的构建。
Be sure to validate that the amount of time taken reduces. There are cases where the time taken will be very similar. For example, static analysis could be very fast or the hardware you run it on may be not powerful enough to build things in parallel, making the time taken to build in parallel and sequentially very similar. So, always validate your assumptions.
管道在专门针对特拉维斯配置项工具的脚本中进行了描述。稍后我们将看一个 Travis CI 的例子。
# 分支、合并和确保清晰的主构建
我们什么时候运行构建？每次推送提交时。但每个结果都不一样。当处理像 Git 这样的源代码控制系统时，我们通常有两种分支:
*   一个主要分支
*   特征分支
它们实现了一个特定的特性或错误修复，当准备好时，它将被合并到主分支中，如下图所示:
![](img/a6510d21-1c6b-4fa8-9d99-fc0e7b0b6a57.png)
在这个例子中，我们看到主分支(**大师**)是如何分支发展**特色** **A** 的。**功能** **接下来简单介绍一下**。有一个**特性 B** 还没有合并，因为还没有准备好。有了关于哪些构建成功或不成功的额外信息，我们就可以知道什么时候将功能分支合并到主分支是安全的:
![](img/f477c83f-b377-42f2-b128-2d526c862899.png)
尚未合并的特征分支中的断裂并不严重，但是当它正在进行工作时，预计会发生。同时，主要分支的破损是应该尽快修复的事件。如果主分支状态良好，这意味着它可能是可释放的。
GitHub 对此有一个模型:拉请求。我们将配置拉请求来自动检查构建是否已经通过并避免合并。如果我们强制任何特性分支在合并回来之前也与主分支保持同步，那么主分支最终会非常稳定。
For dealing with branches in Git to define releases, the most popular model is Git-flow, defined in this influential blog post ([https://nvie.com/posts/a-successful-git-branching-model/](https://nvie.com/posts/a-successful-git-branching-model/)). The following CI practices allow simplify things a bit and don't deal with elements such as release branches. This blog post is a highly recommended read.
在主要分支中拥有连续的成功构建也非常有助于培养项目的稳定性和质量感。如果主分支损坏非常罕见，那么用最新的主分支创建新版本的信心非常高。
# 配置特拉维斯配置项
Travis CI([https://travis-ci.com/](https://travis-ci.com/))是一种流行的持续集成服务，可免费用于公共 GitHub 项目。与 GitHub 的集成非常简单，它允许您配置运行它的平台，例如 macOS、Linux，甚至 iOS。
Travis CI 与 GitHub 紧密集成，所以只需要登录 GitHub 就可以访问。我们将看看如何将我们的项目与它联系起来。
For clarity, only the code in this chapter will be hooked up to Travis.
Travis 的工作方式与其他 CI 工具有些不同，它通过启动一个新的虚拟机来创建独立的作业。这意味着为前一阶段创建的任何工件都需要复制到其他地方，以便在下一阶段开始时下载。
这使得事情有时有点不切实际，一个简单的解决方案是为每个单独的工作建立多次。
Configuring a remote system such as Travis CI can be a little frustrating sometimes, as it requires you to push a commit to be built to see if the configuration is correct. Also, it gets configured with a YAML file, which can be a bit temperamental in terms of syntax. It will take you a few attempts to get something stable, but don't worry. Once it is set up, you can change it only via a specific pull request as the configuration file is also under source control. 
You can also check the requests in the Travis CI configuration to see if a `.yml` file creates a parse error.
You can check full Travis CI documentation here: [https://docs.travis-ci.com/](https://docs.travis-ci.com/).
要配置 Travis CI，让我们从从 GitHub 添加一个存储库开始。
# 向特拉维斯竞争情报添加回购
要向 Travis CI 添加回购，我们需要采取以下步骤:
1.  第一个阶段是转到 Travis CI 网页，并使用您的 GitHub 凭据登录。
2.  然后，您需要通过激活它来授予 Travis 对 GitHub 的访问权限。
3.  然后，选择要构建的回购。
The easiest starting point is to fork the repo with the examples from this book in [https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python). Feel free to do so!
But remember to change the usernames, credentials, and registry information to match your own.