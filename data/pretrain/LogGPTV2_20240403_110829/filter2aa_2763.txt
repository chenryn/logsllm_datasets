#BHUSA @BlackHatEvents

### Crashing Your Way to Medium-IL: Exploiting the PDB Parser for Privilege Escalation
**Gal De Leon (@galdeleon)**  
**Palo Alto Networks**

#### About Me
- **Gal De Leon (@galdeleon)**
  - Principal Security Researcher at Palo Alto Networks
  - Specializes in fuzzing, vulnerabilities, exploits, and mitigations
  - Microsoft MSRC MVSR 2018, 2019, 2020
    - Discovered approximately 40 vulnerabilities

---

### Agenda
1. What are PDBs?
2. Finding Vulnerabilities in the PDB Parser
3. Attack Surfaces
4. Exploit & Demo

---

### What are PDB Files?
- **Purpose**: Store debugging information (symbols) about an executable.
- **Contents**: Function names, global variables, type information, etc.
- **Creation**: Generated from source files during the build process.
- **Usage**: Utilized by debuggers to provide detailed information during debugging.

**Example:**
```plaintext
0:007> .reload /f notepad.exe
0:007> x notepad!*
00007ff7`9b4c4520 notepad!__scrt_uninitialize_thread_safe_statics (void)
00007ff7`9b4a86b0 notepad!ShowOpenSaveDialog (void)
00007ff7`9b4c09e8 notepad!StringLengthWorkerW (void)
00007ff7`9b4c38e0 notepad!initialize_printf_standard_rounding (void)
00007ff7`9b4a1640 notepad!`dynamic initializer for 'szFileName'' (void)
...
```

**File Format:**
- **Proprietary Format by Microsoft**
  - Binary
  - Multi Stream Format (MSF)
- **Open-Sourced for Non-Microsoft Compilers**
- **Parser Implementation**: `Dbghelp.dll`
  - Shipped by default
  - API for loading PDBs and extracting symbol data

---

### Letâ€™s Fuzz PDB
**Fuzzing Setup:**
- **Corpus**: Approximately 5000 PDBs from various sources.
- **Test Harness**: A program that loads a PDB file and parses it using `Dbghelp!SymLoadModule`.
- **Fuzzer**: WinAFL fuzzer

**Workflow:**
1. Start with a corpus of PDBs.
2. Mutate the PDBs.
3. Run the test harness.
4. Capture crashes.
5. Repeat the process.

---

### Attack Surface
- **Remote Symbol Servers**: An attacker can control or perform a Man-in-the-Middle (MitM) attack on the symbol server to serve arbitrary PDBs.

**Example:**
```plaintext
0:007> .sympath srv*http://msdl.microsoft.com/download/symbols
Symbol search path is: 
srv*http://msdl.microsoft.com/download/symbols
Expanded Symbol search path is: 
srv*http://msdl.microsoft.com/download/symbols
0:007> .reload /f notepad.exe
```

**Report to Microsoft MSRC:**
- **Initial Report**: August 18, 2020
- **Response**: September 15, 2020
  - Microsoft decided not to fix the vulnerability due to the complexity of the attack surface.
  - The attacker needs to control the symbol server or MitM the connection, and the victim must load a PDB from the server.

---

### Other Attack Surfaces
- **Components Using Dbghelp.dll**: 
  - `Appverif.exe`, `appverifUI.dll`, `comsvcs.dll`, `devinv.dll`, `taskkill.exe`, `faultrep.dll`, `wer.dll`, etc.
- **Elevation of Privileges**: 
  - Windows Error Reporting (WER) uses `Dbghelp.dll`.

**Windows Error Reporting (WER) Recap:**
- **Functionality**: WER collects information about crashes and hangs and reports them to Microsoft.
- **Process Flow**:
  - Process crash -> `WerFault.exe` worker is launched.

**Process Interaction:**
```plaintext
svchost.exe (WerSvc)
Process.exe
ALPC
WerFault.exe
Parent: Process.exe
Child: WerFault.exe
CreateProcessAsUser()
```

**How `WerFault.exe` Uses `Dbghelp.dll`:**
- Parses the stack trace of the crashing thread.
- Adds the stack trace hash to the error report.

**Code Example:**
```c
long long UtilGetStackTrace(long ProcessId, long ThreadId) {
  /* ... */
  HANDLE CrashingProc = OpenProcess(PROCESS_ALL_ACCESS, 0, ProcessId);
  SymInitialize(CrashingProc, NULL, fInvadeProcess=TRUE);
  /* ... */
  for ( ... ) { StackWalk(); }
}
```

**Permissions:**
- **Default**: `WerFault.exe` runs with the same privileges as the crashing process.
- **Exception**: Low-IL crash -> Medium-IL `WerFault.exe`.

**Integrity Levels (IL):**
- **Low-IL**: Used for sandboxing (e.g., iexplore renderers).
- **Browser Exploit Chains**: Renderer RCE -> sandbox escape/EoP.

**Game Plan:**
- Elevate privileges from Low-IL to Medium-IL.

**Steps:**
1. From a Low-IL process:
   - Write a malformed PDB file to disk.
   - Crash the own process (Low-IL).
   - `WerFault.exe` (Medium-IL) launches.
   - `WerFault.exe` loads the malformed PDB file.
   - Exploit the PDB parsing bug for EoP.

**Loading PDBs from Arbitrary Paths:**
- **Restriction**: Cannot write to most paths as Low-IL.
- **Solution**: Use the `PdbFilePath` in the PE/Executable header to point to `%AppData%\LocalLow`.

**Struct Definition:**
```c
struct CV_INFO_PDB20 {
  CV_HEADER CvHeader;
  DWORD Signature;
  DWORD Age;
  BYTE PdbFilePath[];
};
```

**Bug in `Dbghelp.dll`:**
- **Issue**: Index is allowed to be zero, leading to type confusion.
- **Exploitation**: Control the value of `Index - 1` to call a virtual function.

**Heap Header Structure (32-bit):**
- **Header**: 8 bytes prior to every heap allocation.
- **Security Cookie**: Prevents heap overrun exploits.
- **Key Generation**: 8-byte key generated per heap at runtime.

**Heap Encoding:**
- **Encoding**: XOR with a random key.
- **Predictability**: Part of the key remains clear text.

**Spray Primitive:**
- **Goal**: Spray `WerFault.exe` address space from the crashing process (Low-IL).
- **Method**: Load multiple PDBs using `Dbghelp!SymInitialize`.
  - PDB #1: Spray memory.
  - PDB #2: Trigger the vulnerability.

**Control Flow:**
- **Problem**: CFG is enabled on `WerFault.exe`.
- **Solution**: Call `kernel32!LoadLibrary` to load a DLL from `%AppData%\LocalLow` and run the payload.

**Demo:**
- **Escape Internet Explorer EPM Sandbox**:
  - Enhanced Protected Mode (EPM) - Low IL + AppContainer.
  - PDB bug behaves differently, pointing to a kernel-mode address.

**Microsoft Fix (CVE-2021-24090 / KB5000802):**
- **Change**: `WerFault.exe` no longer parses PDB files.
- **Implementation**:
  ```c
  SymSetExtendedOption(IMAGEHLP_EXTENDED_OPTIONS::LOAD_SYMBOLS_DISABLED, TRUE);
  v33_Ret = SymInitialize(v11_CrashingProc, NULL, TRUE);
  if (SymGetExtendedOption(IMAGEHLP_EXTENDED_OPTIONS::LOAD_SYMBOLS_DISABLED)) {
    _pwprint(L"load symbols is disabled!\n");
    return 4;
  }
  ```

**Takeaways:**
- **Fuzzing Efficiency**: Effective for the right targets.
- **Exploit Success**: Works despite all mitigations.
- **Multiple Attack Surfaces**: One bug can be exploited in various ways.

**Contact:**
- **Gal De Leon (@galdeleon)**