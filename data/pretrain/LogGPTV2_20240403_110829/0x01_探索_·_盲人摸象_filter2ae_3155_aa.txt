## 0x01 探索 · 盲人摸象
接触题目第一步，英文等下看，先扫描下二维码，得到一个带有get参数的url？
这不就是同一个地址么？hxcode什么鬼？二维码不是QRcode么？
记笔记，记笔记……马克关键词……
从 `readme.html` 中通读1-7条信息，得到少许关键字 `debug`/`Alpha`/`deverlopment` 等信息。
归总信息：
  1. 出现组织机构GIT地址： 
  2. 出现相关用户名： `evil7`
  3. `bakdoor` 可能存在后门
再看看有没有 `robots.txt` ，在其中找到其他有用信息。
  1. 通过 `/?dev=debug` 发现可查看index.php源码
  2. 查看 `UserID/?id=*` 在 `id=1` 时，发现用户名 `ev1l7_1s_adm1N` 是激活状态
  3. 如描述，通过 `/?dev=debug` 查看源码后找到非必要方式构造的静态文件读取，实为文件包涵后门 `include($_GET["lnk"])`
## 0x02 插曲 · 枚举登陆
`index.php` 源码里看到弱比较逻辑，第一反应构造md5为科学计数值 `0e\d{30}`
类型，通读页面源码，发现奇怪的静态文件加载方式，居然是个include的包涵构造的GET类型API，考虑伪协议读取 `config.php`
验证逻辑可绕过。构造特殊md5后，通过已知用户名`ev1l7_1s_adm1N`，和 `特殊md5` 绕过password判断。
这不是直接爆破就行了嘛！！嘎嘎大笑~
重复POST提交，直至 `cookie` 中 `login` 值与 `index.php` 中条件成立，成功登陆！记录 `code1` 和`code2`
为之后猜测 `$max` 和 `$seed` 做准备。
但是！本地测试枚举成功，实际发布题目后，又是另一番酸爽……
## 0x03 审计 · 弱点复现
本地测试题目的时候，经过16w多次POST提交，可以直接由前两位随机数 `code1` 和 `code2` 得到一个基本雏形的预测数组。
但是实际发布题目之后发现，用来提供多种解题思路的爆破枚举方式，反而增加了游戏难度，比如做为作者，我自己都爆破不出了！哆洗喋！？哦哆key！
    5. evil7 always write BUGs or fuxking things in our object! Shiiiit... in this one too.
呵呵呵，还好留有一个任意包含知识点的 `include` “后门”，所以运气太差并不影响整体解答，反而让做题选手更需要理解各知识点的组合。歪打正着科科~
(｡･∀･)ﾉﾞ
从 `index.php` 中找到指定 `seed` 的伪随机算法，通过之前获得两个随机数，控制 `$max` 值进行随机数预测(读取
`config.php` 则可直接找到 `$max = 1777` ) ，爆破猜测得 `$max` , `$seed` 以及关键随机数值 `$rkey` ,
强迫症不在乎多几秒运行，这里任性取整 `2k*2k` 枚举。
      string(32) "blablabla……"
        .
        .
        .
      string(32) "b08fd397d76818a38aa4b6cf67207c41"
      [2656]=>
      string(32) "935b6f344a60023c56e2b61481b2f22a"
      [2657]=>
      string(32) "9d290f5a1461a1aa020d1310e4759cab"
      [2658]=>
      string(32) "014f8e781e8cc928ae3da3c338bab9d1"
      [2659]=>
      string(32) "07da3992bddbf87f7f0081f4476ae405"
      [2660]=>
      string(32) "463180bdbcc64a51ffc37172f3bde0fa"
      [2661]=>
      string(32) "9d290f5a1461a1aa020d1310e4759cab"
      [2662]=>
      string(32) "ca1570a23f9fa3fadab35c581909fc1c"
      [2663]=>
      string(32) "788e83cd2c3e47b351e6b9a57f476a93"
    }
拿到`RSAkey`，却没有加密文本？搞毛？
回到起点第一步骤 `readme.html` 重新梳理信息:
`6. He say we will find it at first but after done all debug first. (what fuxk
is that mean?)`
题目入口是一个二维码，登陆入口只有一个静态图片，顺手全都下载下来，先分析有无隐写
看到通道内容确实有细微数据被修改，但是两个图均未发现直接写入的其他图片FLAG
(直接写FLAG到图里工具一键就没了，还考你干嘛？哈哈哈)
查看`hint-7` 以及那个多出来的get参数 `hxcode` 开始收集外部信息，寻找可疑信息:
`7. If U need more. Pls check others in https://github.com/deepwn`
发现deepwn组中只有一个开发成员，麻蛋的83个项目一个个找？挠头……
理清思路，先找找evil7账号有关验证码和图像处理的repo。
点进个人主页，第一眼就发现时间线里，跟题目上线同期发布，新项目 `pngCrypto.js`！
并且看名称，正好是关于某种png像素隐写文件什么的吧？
(借鉴了某前端大佬png文件压缩js的思路，这里用作隐写简直完美~)
猜测跟某特定隐写考点有关，分析一下 `pngCrypto.js/pngCrypto.js` 文件中加解密实现过程。
结合查找隐写图像时，发现二维码图片第一行（first）像素出现的锯齿，再想想hint里描述的毫无意义的前4句“凑数”卵话：
    1. This system is in testing. 
    (alpha版本：内部开发版本)
    2. U can see many ideas in this version.
    （此版本：1.0-Alpha）
    3. We will cancel alpha when fix bug with the rand_number.
    (直接指明alpha和random问题)
    4. Next create new APP & QRcode after development. We must do that.
    (提到QRcode将在开发后也就是“alpha版本后”换新)
如果你还不怀疑Alpha做手脚了，那你还是掐死我吧。
（仅用1000左右像素宽度，哪怕缩略图也很容易看出来啊！诺你看！）
单独拿出第一行像素内容，`在黑色背景下` 发现是修改后隐藏有特定信息，根据hint提示的 `Alpha` 开始修改 `pngCrypto.js`
脚本，直接构造一个html页面如下：
        deepCrypto
            function uncrypto(f) { // 本题中我们只需要解密function
                var dl = document.getElementById('dl');
                dl.innerText = 'Loading...';
                var reader = new FileReader();
                reader.readAsDataURL(f);
                reader.onload = function () {