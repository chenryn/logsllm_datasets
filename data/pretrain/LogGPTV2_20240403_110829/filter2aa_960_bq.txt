EOF. You’re left with a new image file. Your new file has identical leading 
and trailing chunks as the original image, but it also contains your payload, 
injected as a new ancillary chunk.
To help visualize a working representation of what you built so far, 
reference the overall working project code at https://github.com/blackhat-go 
/bhg/tree/master/ch-13/imgInject/. The imgInject program consumes command 
line arguments containing values for the original PNG image file, an offset 
location, an arbitrary data payload, the self-declared arbitrary chunk type, 
and the output filename for your modified PNG image file, as shown in 
Listing 13-15.
$ go run main.go -i images/battlecat.png -o newPNGfile --inject –offset \ 
    0x85258 --payload 1234243525522552522452355525
Listing 13-15: Running the imgInject command line program
Hiding Data with Steganography   307
If everything went as planned, offset 0x85258 should now contain a new 
rNDm chunk segment, as shown in Figure 13-4. 
Figure 13-4: A payload injected as an ancillary chunk (such as rNDm)
Congratulations—you’ve just written your first steganography program! 
Encoding and Decoding Image Byte Data by Using XOR 
Just as there are many types of steganography, so are there many tech-
niques used to obfuscate data within a binary file. Let’s continue to build 
the sample program from the previous section. This time, you’ll include 
obfuscation to hide the true intent of your payload. 
Obfuscation can help conceal your payload from network-monitoring 
devices and endpoint security solutions. If, for example, you’re embedding 
raw shellcode used for spawning a new Meterpreter shell or Cobalt Strike 
beacon, you want to make sure it avoids detection. For this, you’ll use 
Exclusive OR bitwise operations to encrypt and decrypt the data.
An Exclusive OR (XOR) is a conditional comparison between two binary 
values that produces a Boolean true value if and only if the two values are not 
the same, and a Boolean false value otherwise. In other words, the statement 
is true if either x or y are true—but not if both are true. You can see this rep-
resented in Table 13-1, given that x and y are both binary input values.
Table 13-1: XOR Truth Table
x
y
x ^ y output
0
1
True or 1
1
0
True or 1
0
0
False or 0
1
1
False or 0
You can use this logic to obfuscate data by comparing the bits in the 
data to the bits of a secret key. When two values match, you change the bit 
in the payload to 0, and when they differ, you change it to 1. Let’s expand 
the code you created in the previous section to include an encodeDecode() 
function, along with XorEncode() and XorDecode() functions. We’ll insert these 
functions into the utils package (Listing 13-16). 
308   Chapter 13
func encodeDecode(input []byteu, key stringv) []byte {
    w var bArr = make([]byte, len(input))
    for i := 0; i < len(input); i++ {
        x bArr[i] += input[i] ^ key[i%len(key)]
    }
    return bArr
}
Listing 13-16: The encodeDecode() function (/ch-13 /imgInject/utils/encoders.go)
The encodeDecode() function consumes a byte slice containing the pay-
load u and a secret key value v as arguments. A new byte slice, bArr w, is 
created within the function’s inner scope and initialized to the input byte 
length value (the length of the payload). Next, the function uses a condi-
tional loop to iterate over each index position of input byte array. 
Within the inner conditional loop, each iteration XORs the current 
index’s binary value with a binary value derived from the modulo of the 
current index value and length of the secret key x. This allows you to use a 
key that is shorter than your payload. When the end of the key is reached, 
the modulo will force the next iteration to use the first byte of the key. Each 
XOR operation result is written to the new bArr byte slice, and the function 
returns the resulting slice.
The functions in Listing 13-17 wrap the encodeDecode() function to facili-
tate the encoding and decoding process.
// XorEncode returns encoded byte array
u func XorEncode(decode []byte, key string) []byte {
    v return encodeDecode(decode, key)
}
// XorDecode returns decoded byte array
u func XorDecode(encode []byte, key string) []byte {
    v return encodeDecode(encode, key)
}
Listing 13-17: The XorEncode() and XorDecode() functions (/ch-13/imgInject/utils 
/encoders.go)
You define two functions, XorEncode() and XorDecode(), which take the 
same literal arguments u and return the same values v. That’s because 
you decode XOR-encoded data by using the same process used to encode 
the data. However, you define these functions separately, to provide clarity 
within the program code.
To use these XOR functions in your existing program, you’ll have to 
modify the ProcessImage() logic you created in Listing 13-8. These updates 
will leverage the XorEncode() function to encrypt the payload. The modifi-
cations, shown in Listing 13-18, assume you’re using command line argu-
ments to pass values to conditional encode and decode logic. 
Hiding Data with Steganography   309
// Encode Block
if (c.Offset != "") && c.Encode {
    var m MetaChunk
    u m.Chk.Data = utils.XorEncode([]byte(c.Payload), c.Key)
    m.Chk.Type = chk.strToInt(c.Type)
    m.Chk.Size = chk.createChunkSize()
    m.Chk.CRC = chk.createChunkCRC()
    bm := chk.marshalData()
    bmb := bm.Bytes()
    fmt.Printf("Payload Original: % X\n", []byte(c.Payload))
    fmt.Printf("Payload Encode: % X\n", chk.Data)
    utils.WriteData(b, c, bmb)
}
Listing 13-18: Updating ProcessImage() to include XOR encoding (/ch-13/imgInject 
/pnglib/commands.go)
The function call to XorEncode() u passes a byte slice containing the pay-
load and secret key, XORs the two values, and returns a byte slice, which is 
assigned to chk.Data. The remaining functionality remains unchanged and 
marshals the new chunk segment to eventually be written to an image file.
The command line run of your program should produce a result simi-
lar to the one in Listing 13-19.
$ go run main.go -i images/battlecat.png --inject --offset 0x85258 --encode \
--key gophers --payload 1234243525522552522452355525 --output encodePNGfile
Valid PNG so let us continue!
u Payload Original: 31 32 33 34 32 34 33 35 32 35 35 32 32 35 35 32 35 32 32
34 35 32 33 35 35 35 32 35
v Payload Encode: 56 5D 43 5C 57 46 40 52 5D 45 5D 57 40 46 52 5D 45 5A 57 46
46 55 5C 45 5D 50 40 46
Success: encodePNGfile created 
Listing 13-19: Running the imgInject program to XOR encode a data chunk block 
The payload is written to a byte representation and displayed to stdout 
as Payload Original u. The payload is then XORed with a key value of gophers 
and displayed to stdout as Payload Encode v.
To decrypt your payload bytes, you use the decode function, as in 
Listing 13-20.
//Decode Block 
if (c.Offset != "") && c.Decode {
    var m MetaChunk
    u offset, _ := strconv.ParseInt(c.Offset, 10, 64)
    v b.Seek(offset, 0)
    w m.readChunk(b)
    origData := m.Chk.Data
    x m.Chk.Data = utils.XorDecode(m.Chk.Data, c.Key)
    m.Chk.CRC = m.createChunkCRC()
    y bm := m.marshalData()
310   Chapter 13
    bmb := bm.Bytes()
    fmt.Printf("Payload Original: % X\n", origData)
    fmt.Printf("Payload Decode: % X\n", m.Chk.Data)
    z utils.WriteData(b, c, bmb)
}
Listing 13-20: Decoding the image file and payload (/ch-13/imgInject/pnglib 
/commands.go)
The block requires the offset position of the chunk segment that con-
tains the payload u. You use the offset to Seek() v the file position, along 
with a subsequent call to readChunk() w that’s necessary to derive the SIZE, 
TYPE, DATA, and CRC values. A call to XorDecode() x takes the chk.Data payload 
value and the same secret key used to encode the data, and then assigns the 
decoded payload value back to chk.Data. (Remember that this is symmetric 
encryption, so you use the same key to both encrypt and decrypt the data.) 
The code block continues by calling marshalData() y, which converts your 
Chunk struct to a byte slice. Finally, you write the new chunk segment contain-
ing the decoded payload to a file by using the WriteData() function z.
A command line run of your program, this time with a decode argu-
ment, should produce the result in Listing 13-21.
$ go run main.go -i encodePNGfile -o decodePNGfile --offset 0x85258 –decode \ 
--key gophersValid PNG so let us continue!
u Payload Original: 56 5D 43 5C 57 46 40 52 5D 45 5D 57 40 46 52 5D 45 5A 57
46 46 55 5C 45 5D 50 40 46
v Payload Decode: 31 32 33 34 32 34 33 35 32 35 35 32 32 35 35 32 35 32 32 34
35 32 33 35 35 35 32 35
Success: decodePNGfile created
Listing 13-21: Running the imgInject program to XOR decode a data chunk block 
The Payload Original value u is the encoded payload data read from the 
original PNG file, while the Payload Decode value v is the decrypted payload. 
If you compare your sample command line run from before and the output 
here, you’ll notice that your decoded payload matches the original, cleartext 
value you supplied originally.
There is a problem with the code, though. Recall that the program code 
injects your new decoded chunk at an offset position of your specification. If 
you have a file that already contains the encoded chunk segment and then 
attempt to write a new file with a decoded chunk segment, you’ll end up with 
both chunks in the new output file. You can see this in Figure 13-5.
Figure 13-5: The output file contains both the decoded chunk segment and encoded 
chunk segment.
Hiding Data with Steganography   311
To understand why this happens, recall that the encoded PNG file has 
the encoded chunk segment at offset 0x85258, as shown in Figure 13-6. 
Figure 13-6: The output file containing the encoded chunk segment
The problem presents itself when the decoded data is written to off-
set 0x85258. When the decoded data gets written to the same location as 
the encoded data, our implementation doesn’t delete the encoded data; 
it merely shifts the remainder of the file bytes to the right, including the 
encoded chunk segment, as illustrated previously in Figure 13-5. This can 
complicate payload extraction or produce unintended consequences, such 
as revealing the cleartext payload to network devices or security software. 
Fortunately, this issue is quite easy to resolve. Let’s take a look at our 
previous WriteData() function. This time, you can modify it to address the 
problem (Listing 13-22).  
//WriteData writes new data to offset
func WriteData(r *bytes.Reader, c *models.CmdLineOpts, b []byte) {
    offset, err := strconv.ParseInt(c.Offset, 10, 64)
    if err != nil {
        log.Fatal(err)
    }
    w, err := os.OpenFile(c.Output, os.O_RDWR|os.O_CREATE, 0777)
    if err != nil {
        log.Fatal("Fatal: Problem writing to the output file!")
    }
    r.Seek(0, 0)
    var buff = make([]byte, offset)
    r.Read(buff)
    w.Write(buff)
    w.Write(b)
    u if c.Decode {
        v r.Seek(int64(len(b)), 1) 
    }
    w _, err = io.Copy(w, r)
    if err == nil {
        fmt.Printf("Success: %s created\n", c.Output)
    }
}
Listing 13-22: Updating WriteData() to prevent duplicate ancillary chunk types (/ch-13 
/imgInject/utils/writer.go)
You introduce the fix with the c.Decode conditional logic u. The XOR 
operation produces a byte-for-byte transaction. Therefore, the encoded 
and decoded chunk segments are identical in length. Furthermore, the 
312   Chapter 13
bytes.Reader will contain the remainder of the original encoded image file 
at the moment the decoded chunk segment is written. So, you can perform 
a right byte shift comprising the length of the decoded chunk segment on 
the bytes.Reader v, advancing the bytes.Reader past the encoded chunk seg-
ment and writing the remainder of bytes to your new image file w.  
Voila! As you can see in Figure 13-7, the hex editor confirms that you 
resolved the problem. No more duplicate ancillary chunk types. 
Figure 13-7: The output file without duplicate ancillary data
The encoded data no longer exists. Additionally, running ls -la against 
the files should produce identical file lengths, even though file bytes have 
changed. 
Summary
In this chapter, you learned how to describe the PNG image file format as 
a series of repetitive byte chunk segments, each with its respective purpose 
and applicability. Next, you learned methods of reading and navigating the 
binary file. Then you created byte data and wrote it to an image file. Finally, 
you used XOR encoding to obfuscate your payload. 
This chapter focused on image files and only scratched the surface of 
what you can accomplish by using steganography techniques. But you should 
be able to apply what you learned here to explore other binary file types. 
Additional Exercises
Like many of the other chapters in this book, this chapter will provide 
the most value if you actually code and experiment along the way. 
Therefore, we want to conclude with a few challenges to expand on 
the ideas already covered:
1.
While reading the XOR section, you may have noticed that the
XorDecode() function produces a decoded chunk segment, but never
updates the CRC checksum. See if you can correct this issue.
2.
The WriteData() function facilitates the ability to inject arbitrary chunk
segments. What code changes would you have to make if you wanted
to overwrite existing ancillary chunk segments? If you need help, our
explanation about byte shifting and the Seek() function may be useful
in solving this problem.
Hiding Data with Steganography   313
3. Here’s a more challenging problem: try to inject a payload—the PNG 
DATA byte chunk—by distributing it throughout various ancillary chunk 
segments. You could do this one byte at a time, or with multiple group-
ings of bytes, so get creative. As an added bonus, create a decoder that 
reads exact payload byte offset locations, making it easier to extract 
the payload. 
4. The chapter explained how to use XOR as a confidentiality technique—a 
method to obfuscate the implanted payload. Try to implement a different 
technique, such as AES encryption. Go core packages provide a number 
of possibilities (see Chapter 11 if you need a refresher). Observe how the 
solution affects the new image. Does it cause the overall size to increase, 
and if so, by how much?
5. Use the code ideas within this chapter to expand support for other 
image file formats. Other image specifications may not be as organized 
as PNG. Want proof? Give the PDF specification a read, as it can be 
rather intimidating. How would you solve the challenges of reading 
and writing data to this new image format?
14
BU IL DING A  
CO M M A N D - A N D - CON T ROL R AT
In this chapter, we’ll tie together several 
lessons from the previous chapters to build 
a basic command and control (C2) remote 
access Trojan (RAT). A RAT is a tool used by 
attackers to remotely perform actions on a compro­
mised victim’s machine, such as accessing the file­
system, executing code, and sniffing network traffic. 
Building this RAT requires building three separate tools: a client implant, 
a server, and an admin component. The client implant is the portion of the 
RAT that runs on a compromised workstation. The server is what will interact 
with the client implant, much like the way Cobalt Strike’s team server—the 
server component of the widely used C2 tool—sends commands to compro­
mised systems. Unlike the team server, which uses a single service to facili­
tate server and administrative functions, we’ll create a separate, stand­alone 
admin component used to actually issue the commands. This server will act 
as the middleman, choreographing communications between compromised 
systems and the attacker interacting with the admin component. 
316   Chapter 14
There are an infinite number of ways to design a RAT. In this chapter, 
we aim to highlight how to handle client and server communications for 
remote access. For this reason, we’ll show you how to build something simple 
and unpolished, and then prompt you to create significant improvements 
that should make your specific version more robust. These improvements, in 
many cases, will require you to reuse content and code examples from previ­
ous chapters. You’ll apply your knowledge, creativity, and problem­solving 
ability to enhance your implementation.
Getting Started
To get started, let’s review what we’re going to do: we’ll create a server that 
receives work in the form of operating system commands from an admin 
component (which we’ll also create). We’ll create an implant that polls the 
server periodically to look for new commands and then publishes the com­
mand output back onto the server. The server will then hand that result back 
to the administrative client so that the operator (you) can see the output. 
Let’s start by installing a tool that will help us handle all these network 
interactions and reviewing the directory structure for this project.
Installing Protocol Buffers for Defining a gRPC API
We’ll build all the network interactions by using gRPC, a high­performance 
remote procedure call (RPC) framework created by Google. RPC frame­
works allow clients to communicate with servers over standard and defined 
protocols without having to understand any of the underlying details. The 
gRPC framework operates over HTTP/2, communicating messages in a 
highly efficient, binary structure. 
Much like other RPC mechanisms, such as REST or SOAP, our data 