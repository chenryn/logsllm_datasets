    000000000000000
这样可以得到第一个 flag。
消除第二个方块有点困难，因为（比较小的）飞行器只能沿着对角线方向和水平竖直方向飞行，我们的可控制区域比较小，无法让飞行器移动后与方块碰撞。
所以我们可以找一些会扩散比较大的初始状态，例如这个链接里面讲的例子。
一个可行的例子：
    000000000000000
    000000000000000
    000000000000000
    000000000000000
    000000000000000
    000000000000000
    000000011000000
    000000001100000
    000000011000000
    000000010000000
    000000000000000
    000000000000000
    000000000000000
    000000000000000
    000000000000000
**暴力解法**
直接随机生成 0/1 矩阵，大概几十次就可以找到一个，Python 代码见solve.py
    import random
    MAP_SIZE = 50
    CONTROL_SIZE = 15
    STEP = 200
    FLAGS = [(5, 45), (25, 45)]
    def flag_range(flag):
        x, y = flag
        for i in range(2):
            for j in range(2):
                yield x + i, y + j
    class Game:
        def __init__(self, W, H):
            self.W = W
            self.H = H
            self.map = [[0 for _ in range(W)] for _ in range(H)]
            for flag in FLAGS:
                for x, y in flag_range(flag):
                    self.map[x][y] = 1
        def step(self):
            new = [[0 for _ in range(self.W)] for _ in range(self.H)]
            for i in range(self.H):
                for j in range(self.W):
                    cnt = 0
                    for io in -1, 0, 1:
                        for jo in -1, 0, 1:
                            if 0  GBK
Reopen with Encoding -> UTF-8
Save with Encoding -> ISO8859-1
Reopen with Encoding -> GBK
## **7.自复读的复读机**
url：
**解题思路**
使用搜索引擎搜索“输出自己的程序”或者类似的词，可以查到这类程序叫做 Quine。可以很容易在网上查到很多 Python 3 的 Quine，例如：
exec(s:='print("exec(s:=%r)"%s)')
还有
s='s=%r;print(s%%s)';print(s%s)
等等。
这道题要求输出代码的逆序以及代码的哈希，我们可以修改上面的 Quine：
输出自己逆序的程序：exec(s:='print(("exec(s:=%r)"%s)[::-1])')（把 print 的内容用括号括起来然后逆序即可）
但这样提交之后有一个问题，就是输出比代码多了一个 \n，这是由于输入的代码结尾没有换行符而 print 输出的内容结尾会自带换行符，我们只需要让 print
不输出换行符，加一个 ,end="" 即可。
对于第二问，我们把 print 的内容用 Python 自带的计算 sha256 的函数包起来即可。
**答案**
第一问（每行都是一个可能的构造）：
exec(s:='print(("exec(s:=%r)"%s)[::-1],end="")')
s='s=%r;print((s%%s)[::-1],end="")';print((s%s)[::-1],end="")
第二问（每行都是一个可能的构造）：
    exec(s:='print(__import__("hashlib").sha256(("exec(s:=%r)"%s).encode()).hexdigest(),end="")')
    exec(s:='import hashlib;print(hashlib.sha256(("exec(s:=%r)"%s).encode()).hexdigest(),end="")')
    import hashlib;s='import hashlib;s=%r;print(hashlib.sha256((s%%s).encode()).hexdigest(),end="")';print(hashlib.sha256((s%s).encode()).hexdigest(),end="")
其他
要注意的是，这道题的程序是使用标准输入读入代码然后用 exec() 执行的，所以并不能使用 print(open( **file** ).read())
之类输出自己源代码文件的方案。
你可以使用 import os; os.system('ls') 之类的代码来在服务器上任意执行命令，但是进程是以低权限运行的，这种方法不能读到 flag。
## **8.233 同学的字符串工具**
url：
**“字符串大写工具”题解**
代码的意思是：如果我们输入一个字面上不是 "flag" 但转换为大写后会变成 "FLAG" 的字符串，就可以得到 flag。
我们可以以 "unicode uppercase collision" 为关键字搜索，不难找到一个连字（ligature）
ﬂ (0xFB02)
这个“字符”将在转换为大写时变成 FL 两个字符！因此，只需输入 ﬂag 即可得到 flag。
flag{badunic0debadbad}
**“UTF-7 转换工具”题解**
代码的意思是：如果我们输入一个字面上不是 "flag" 但从 UTF-7 转换为 UTF-8 后会变成 "flag" 的字符串，就可以得到 flag。
不妨查阅 UTF-7 相关资料。可以得知：一个 Unicode 字符串，在 UTF-7 编码下，可能有多种编码，甚至纯粹的 ASCII
字符串也可以有多种编码！
那么事情就简单了。我们依照 Wikipedia 等参考资料给出的 UTF-7 编码算法，可以构造出 "flag" 的另一种“写法”。比如，选择 f 下手。
f 的 Unicode 码位是 0x66
将 0x66 写成 16 位二进制数：0000 0000 0110 0110
重新分组：000000 000110 011000
使用 base64 的编码表，将每组变成一个字符：AGY
那么最终 "flag" 的另一种 UTF-7 替代写法就是 +AGY-lag，输入即可得到 flag。
flag{please_visit_www.utf8everywhere.org}
文笔生疏，措辞浅薄，望各位大佬不吝赐教，万分感谢。
免责声明：由于传播或利用此文所提供的信息、技术或方法而造成的任何直接或间接的后果及损失，均由使用者本人负责， 文章作者不为此承担任何责任。
转载声明：儒道易行
拥有对此文章的修改和解释权，如欲转载或传播此文章，必须保证此文章的完整性，包括版权声明等全部内容。未经作者允许，不得任意修改或者增减此文章的内容，不得以任何方式将其用于商业目的。