### Exploitation Strategy for Memory Control and PC Control

#### Overview
This document outlines a strategy to achieve memory control and program counter (PC) control in SQLite using the FTS3 (Full-Text Search) module. The exploitation path leverages heap spraying, controlled dereferencing, and manipulation of function calls to gain arbitrary read/write (RW) and PC control.

#### Memory Control in Known Address
1. **Heap Spray**:
   - In modern browsers, heap spraying can be achieved by allocating a large number of JavaScript `ArrayBuffer` objects. This technique helps in controlling memory at known addresses.

2. **Dereference Fts3Cursor**:
   - Dereference the `Fts3Cursor` at a specified and controlled location. This allows us to fake `Fts3Cursor` and other related structures.

3. **Code Path for Arbitrary RW/PC Control**:
   - Identify a code path within `optimize`, `offsets`, or `matchinfo()` functions that can be exploited for arbitrary RW or PC control.

#### One Exploitation Path for Arbitrary RW

1. **fts3OptimizeFunc**:
   - This function is a key entry point for our exploitation. It calls `sqlite3Fts3Optimize` which, in turn, interacts with various SQLite functions.
   - By controlling the arguments, we can achieve:
     - Copy value from a controlled location to any address (arbitrary write).
     - Copy value from any address to a controlled location (arbitrary read).

```c
static void fts3OptimizeFunc(
  sqlite3_context *pContext,
  int nVal,
  sqlite3_value **apVal
){
  int rc;
  Fts3Table *p;
  Fts3Cursor *pCursor;
  UNUSED_PARAMETER(nVal);
  assert( nVal==1 );
  if( fts3FunctionArg(pContext, "optimize", apVal[0], &pCursor) )
    return;
  p = (Fts3Table *)pCursor->base.pVtab;
  rc = sqlite3Fts3Optimize(p);
  ...
}
```

2. **Fake Fts3Cursor and Related Structures**:
   - Create a fake `Fts3Cursor` and all related structures in a controlled (heap sprayed) memory.
   - Add a `Fts3Table` to the `Fts3Cursor`.

3. **sqlite3Fts3Optimize**:
   - This function performs operations on the `Fts3Table` and can be manipulated to cause specific behaviors.

```c
int sqlite3Fts3Optimize(Fts3Table *p){
  int rc;
  rc = sqlite3_exec(p->db, "SAVEPOINT fts3", 0, 0, 0);
  if( rc==SQLITE_OK ){
    rc = fts3DoOptimize(p, 1);
    if( rc==SQLITE_OK || rc==SQLITE_DONE ){
      int rc2 = sqlite3_exec(p->db, "RELEASE fts3", 0, 0, 0);
      if( rc2!=SQLITE_OK ) rc = rc2;
    }else{
      sqlite3_exec(p->db, "ROLLBACK TO fts3", 0, 0, 0);
      sqlite3_exec(p->db, "RELEASE fts3", 0, 0, 0);
    }
  }
  sqlite3Fts3SegmentsClose(p); 
  return rc;
}
```

4. **Manipulate `sqlite3_exec`**:
   - Ensure `sqlite3_exec` returns a non-`SQLITE_OK` value to trigger specific code paths.

5. **sqlite3SafetyCheckOk**:
   - Manipulate `sqlite3SafetyCheckOk` to return 0, indicating an invalid database connection.

```c
int sqlite3SafetyCheckOk(sqlite3 *db){
  u32 magic;
  if( db==0 ){
    logBadConnection("NULL");
    return 0;
  }
  magic = db->magic;
  if( magic!=SQLITE_MAGIC_OPEN ){
    if( sqlite3SafetyCheckSickOrOk(db) ){
      testcase( sqlite3GlobalConfig.xLog!=0 );
      logBadConnection("unopened");
    }
    return 0;
  }else{
    return 1;
  }
}
```

6. **sqlite3Fts3SegmentsClose**:
   - This function closes the segments and can be used to free resources and manipulate pointers.

```c
void sqlite3Fts3SegmentsClose(Fts3Table *p){
  sqlite3_blob_close(p->pSegments);
  p->pSegments = 0;
}
```

7. **sqlite3_finalize**:
   - Finalize the prepared statement and manipulate the `Vdbe` structure.

```c
int sqlite3_finalize(sqlite3_stmt *pStmt){
  int rc;
  if( pStmt==0 ){
    rc = SQLITE_OK;
  }else{
    Vdbe *v = (Vdbe*)pStmt;
    sqlite3 *db = v->db;
    if( vdbeSafety(v) ) return SQLITE_MISUSE_BKPT;
    sqlite3_mutex_enter(db->mutex);
    checkProfileCallback(db, v);
    rc = sqlite3VdbeFinalize(v);
    rc = sqlite3ApiExit(db, rc);
    sqlite3LeaveMutexAndCloseZombie(db);
  }
  return rc;
}
```

8. **sqlite3VdbeReset**:
   - Reset the `Vdbe` and ensure `p->magic` is set to `VDBE_MAGIC_HALT`.

```c
int sqlite3VdbeReset(Vdbe *p){
  sqlite3 *db;
  db = p->db;
  sqlite3VdbeHalt(p);
  if( p->pc>=0 ){
    vdbeInvokeSqllog(p);
    sqlite3VdbeTransferError(p);
    sqlite3DbFree(db, p->zErrMsg);
    p->zErrMsg = 0;
    if( p->runOnlyOnce ) p->expired = 1;
  }else if( p->rc && p->expired ){
    ...
  }
  Cleanup(p);
  p->iCurrentTime = 0;
  p->magic = VDBE_MAGIC_RESET;
  return p->rc & db->errMask;
}
```

9. **sqlite3VdbeMemSetStr**:
   - Use this function to perform a controlled `strcpy` operation.

```c
int sqlite3VdbeMemSetStr(Mem *pMem, const char *z, int n, u8 enc, void (*xDel)(void*)){
  int nByte = n;
  ...
  if( nByte > iLimit ) nByte = iLimit+1;
  ...
  if( xDel==SQLITE_TRANSIENT ){
    int nAlloc = nByte;
    ...
    if( sqlite3VdbeMemClearAndResize(pMem, MAX(nAlloc,32)) ) return SQLITE_NOMEM_BKPT;
    memcpy(pMem->z, z, nAlloc);
  }
  ...
  return SQLITE_OK;
}
```

#### One Exploitation Path for PC Control

1. **invokeProfileCallback**:
   - This function invokes several callbacks (`xProfile`, `xTrace`, `xCurrentTime`, `xCurrentTimeInt64`) that can be controlled in sprayed memory.

```c
static SQLITE_NOINLINE void invokeProfileCallback(sqlite3 *db, Vdbe *p){
  sqlite3_int64 iNow;
  sqlite3_int64 iElapse;
  ...
  sqlite3OsCurrentTimeInt64(db->pVfs, &iNow);
  iElapse = (iNow - p->startTime)*1000000;
  if( db->xProfile ){
    db->xProfile(db->pProfileArg, p->zSql, iElapse);
  }
  if( db->mTrace & SQLITE_TRACE_PROFILE ){
    db->xTrace(SQLITE_TRACE_PROFILE, db->pTraceArg, p, (void*)&iElapse);
  }
  p->startTime = 0;
}
```

2. **Control Callbacks**:
   - Use `db->xProfile` to control the gadget address, `db->pProfileArg` for the first argument, and `p->zSql` for the second argument.
   - Nullify `db->Vfs->xCurrentTimeInt64` to bypass `sqlite3OsCurrentTimeInt64`.

#### ASLR Bypass and Shellcode Execution

1. **Leak FTS3Cursor Address**:
   - Use CVE-2017-6991 to leak the address of a `FTS3Cursor` object.
   - The first member of the `FTS3Cursor` struct points to a global variable `fts3Module`.
   - Read the address of `fts3Module` to reveal the base address of the SQLite library.

2. **Execute Shellcode**:
   - Use the arbitrary function call primitive to invoke `longjmp` or `mprotect` to mark the memory pages of the shellcode as executable.
   - Trigger the function call primitive again to jump to the shellcode and execute it.

#### Conclusion
By carefully manipulating the SQLite FTS3 module and related functions, we can achieve both arbitrary RW and PC control. This strategy involves heap spraying, controlled dereferencing, and manipulation of function calls to gain full control over the execution flow.

Thank you!