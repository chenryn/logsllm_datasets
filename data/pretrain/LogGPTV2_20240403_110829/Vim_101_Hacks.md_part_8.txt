# Managing Vim Sessions

Vim allows you to save and restore your editing sessions, including directory, window size, and other customizations. Here’s how you can manage sessions:

- **Creating a Session:**
  - `:mksession` creates a new session with the default file name `Session.vim` in the current working directory.
  - `:mksession filename` saves the session with a specified filename in the current working directory.

- **Opening a Saved Session:**
  - `$ vim -S Session.vim` opens the default saved session.
  - `$ vim -S filename` opens a session using the specified session filename in the current directory.
  - `:source Session.vim` applies all session settings from a particular session file after you are already in the Vim editor.

# Executing Unix Shell Commands Inside Vim

You can execute Unix shell commands directly from within Vim using the following methods:

- `:!unix-command` runs a Unix command.
  - Example: `:!ls` lists files in the current directory.
  - Example: `:!date` displays the current date and time.

- Passing the Current File Name:
  - `:!echo %` passes the current file name to the Unix command.
    - Example: `:!ls –l %` executes `ls –l` on the current file.
  - `:!echo %:p` passes the full path of the current file to the Unix command.
    - Example: `:!echo %:p` outputs `/etc/sysctl.conf`.
  - `:!echo %:e` passes the extension of the current file to the Unix command.
    - Example: `:!echo %:e` outputs `conf`.

# Using Vimdiff to Compare Files

`vimdiff` is a powerful tool for comparing and reviewing differences between files. It provides a more colorful and user-friendly interface compared to the standard `diff` command.

- **Unix `diff` Command:**
  ```sh
  $ diff employee.txt new-employee.txt
  1c1
  < 100 Jason Smith Senior Developer
  ---
  > 500 King James Manager
  4a5,7
  > 600 Raj Patel Team Lead
  > 700 Emily Jacob HR
  ```

- **Vimdiff Visual Output:**
  ```sh
  $ vimdiff employee.txt new-employee.txt
  ```
  - This command shows a visual comparison of the two files, making it easy to see changes and additions.

- **Vimdiff Commands:**
  - `$ vimdiff file1 file2` shows the diff using a vertical window split.
  - `$ vim -d file1 file2` is an alternative way to show the diff.
  - `$ vimdiff -o file1 file2` shows the diff using a horizontal window split.
  - `$ vim -d -o file1 file2` is an alternative way to show the diff.
  - `:diffsplit file2` launches a horizontal diff if you are already inside a file.
  - `:vert diffsplit file2` launches a vertical diff if you are already inside a file.
  - `[c` goes to the next change inside `vimdiff`.
  - `]c` goes to the previous change inside `vimdiff`.

# Mapping Keys in Vim

Vim’s `map` feature allows you to map keys to frequently used commands, enhancing your productivity.

- **Creating a Map:**
  - `:map :write :!cc % && ./a.out` maps `:write` to compile the current C program and execute the output.
  - To execute the map, simply type `:write`.

- **Additional Examples:**
  - `:map :w :up` maps `:w` to `:up`.
  - `:map :q :confirm q` maps `:q` to `:confirm q`.
  - `:map` displays all defined maps.

# Making Bash Shell Work Like Vim

If you prefer Vim’s keybindings, you can use them in your bash shell by setting the following option:

- `$ set -o vi` enables Vim mode in bash.
- Press `ESC` to enter command mode and use Vi commands for editing.
- To make this change permanent, add `set -o vi` to your `.bashrc` file.
- To disable Vim mode and revert to Emacs mode, use `$ set -o emacs`.

# Setting and Unsetting Vim Options

Vim offers a wide range of options that you can set or unset to customize your editing environment.

- **Setting Options:**
  - `:set nu` shows line numbers.
  - `:set ic` ignores case when searching.
  - `:set ro` disables writing of files.
  - `:set wm=n` sets the right-most margin column.
  - `:set ai` turns on auto indentation.
  - `:set all` displays all settings of your Vim session.
  - `:set list` displays invisible characters.
  - `:set hlsearch` highlights matched patterns.
  - `:set incsearch` activates incremental search mode.

- **Unsetting Options:**
  - Add the prefix `no` to unset an option.
  - Example: `:set nonu` unsets the display line number option.

# Default Registers and Their Uses

Vim uses registers to store deleted, copied, or substituted text. Here are some important registers:

- `%` stores the name of the current file.
- `#` stores the name of the alternate file.
- `:` stores the most recent executed command line.
- `/` stores the last search pattern.
- `"` stores the last used register.

- **Pasting from Registers:**
  - `"%p` pastes the name of the current file as text.

# Numeric Registers and Recovering Deletes

- There are 10 numbered registers (0 through 9).
- Register `0` stores the most recent yank (copy).
- Register `1` stores the most recent deletion.
- Each subsequent deletion shifts the content of the registers.

# Vim Directory Operations

Vim can be used as a file manager to navigate and perform operations on directories and files.

- **Opening a Directory:**
  - `# vim /etc/` opens the `/etc/` directory in Vim.
  - Use the following keys to navigate and perform actions:
    - `Enter` opens the file under the cursor.
    - `Enter` on a directory goes to that directory.
    - `D` deletes the file under the cursor.
    - `R` renames the file under the cursor.
    - `X` executes the file under the cursor.
    - `o` opens a horizontal split window.

- **Launching the File Explorer:**
  - `:Ex` opens the current directory in the Vim file explorer.
  - `:Ex ~/etc/` opens a specific directory.
  - `:Sex` opens the current directory in a horizontal split.
  - `:Vex` opens the current directory in a vertical split.
  - `:Tex` opens the current directory in a new tab.

# Power of Search in Vim

Vim provides powerful search and navigation features to help you find and replace text efficiently.

- **Navigation by Search:**
  - `/search-term` searches forward for the first occurrence of the term.
  - `?search-term` searches backward.
  - `n` goes to the next occurrence.
  - `N` goes to the previous occurrence.
  - `//` or `??` repeats the previous forward or reverse search.

- **Searching for the Current Word:**
  - `*` goes to the next occurrence of the word under the cursor.
  - `#` goes to the previous occurrence.
  - `g*` and `g#` perform partial matches.

- **Listing All Occurrences:**
  - `[I` lists all occurrences of the word under the cursor.

- **Searching for a Character within a Line:**
  - `fX` goes to character `X` in the forward direction.
  - `FX` goes to character `X` in the reverse direction.
  - `tX` goes to one character before `X` in the forward direction.
  - `TX` goes to one character before `X` in the reverse direction.
  - `;` repeats the latest `f`, `F`, `t`, or `T` in the forward direction.
  - `,` repeats the latest `f`, `F`, `t`, or `T` in the backward direction.

# Find and Replace Examples

Vim’s substitution command is highly versatile. Here are some examples:

- **Substitute All Occurrences in the Whole File:**
  - `:%s/old-text/new-text/g` replaces all occurrences of `old-text` with `new-text` in the entire file.

- **Substitute in the Current Line:**
  - `:s/helo/Hello/gi` replaces `helo` with `Hello` in the current line, ignoring case.

- **Substitute in a Range of Lines:**
  - `:10,20s/old-text/new-text/g` replaces `old-text` with `new-text` in lines 10 to 20.

These examples cover both basic and advanced text substitution features in Vim.