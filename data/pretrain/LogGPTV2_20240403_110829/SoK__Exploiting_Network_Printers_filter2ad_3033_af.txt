(cid:36)
(cid:36)
(cid:36)
(cid:36)
(cid:36)
(cid:36)
(cid:36)
(cid:36)(cid:37)
(cid:36)(cid:37)
(cid:36)(cid:37)
(cid:36)(cid:37)
(cid:36)(cid:37)
(cid:36)(cid:37)
(cid:36)(cid:37)
(cid:36)
(cid:36)
(cid:36)(cid:37)
(cid:36)(cid:37)
(cid:36)(cid:37)
(cid:36)(cid:37)
(cid:36)(cid:37)
(cid:15)(cid:41)(cid:3)
(cid:36)
(cid:36)(cid:37)
(cid:36)(cid:45)
(cid:36)
(cid:36)(cid:48)
(cid:36)
(cid:36)
(cid:36)
(cid:36)
(cid:36)
(cid:36)
(cid:36)
(cid:36)
(cid:36)
(cid:15)(cid:41)(cid:3)
(cid:15)(cid:41)(cid:3)
(cid:15)(cid:41)(cid:3)
(cid:15)(cid:41)(cid:3)
(cid:15)(cid:41)(cid:3)
(cid:15)(cid:41)(cid:3)
(cid:36)
(cid:15)(cid:41)(cid:3)
(cid:15)(cid:41)(cid:3)
(cid:36)
(cid:15)(cid:41)(cid:3)
(cid:36)(cid:36)
(cid:38)
(cid:36)(cid:39)
(cid:36)(cid:39)
(cid:36)(cid:40)
(cid:36)(cid:40)
(cid:36)(cid:40)
(cid:36)(cid:40)
(cid:38)
(cid:38)
(cid:42)
(cid:36)(cid:40)
(cid:36)(cid:40)
(cid:44)
(cid:36)(cid:36)
(cid:45)
(cid:46)
(cid:36)
(cid:36)
(cid:38)
(cid:46)
(cid:5)(cid:8)(cid:47)(cid:8)(cid:19)(cid:18)(cid:53)
(cid:36)
(cid:36)(cid:37)
(cid:18)(cid:8)(cid:54)(cid:26)(cid:42)(cid:8)(cid:4)(cid:54)(cid:46)(cid:30)(cid:19)(cid:8)(cid:9)(cid:6)(cid:49)(cid:30)(cid:8)
(cid:54)(cid:46)(cid:30)(cid:19)(cid:8)(cid:9)(cid:6)(cid:49)(cid:26)(cid:30)(cid:26)(cid:11)(cid:44)(cid:4)(cid:26)(cid:7)(cid:4)(cid:30)(cid:26)(cid:38)(cid:26)(cid:11)(cid:8)(cid:18)
(cid:19)(cid:29)(cid:11)(cid:4)(cid:54)(cid:46)(cid:30)(cid:19)(cid:8)(cid:9)(cid:6)(cid:49)(cid:30)(cid:8)(cid:57)(cid:3)(cid:29)(cid:7)(cid:11)(cid:45)(cid:42)(cid:9)(cid:26)(cid:51)(cid:11)(cid:4)(cid:22)(cid:8)(cid:8)(cid:18)(cid:49)(cid:6)(cid:42)(cid:39)(cid:4)(cid:19)(cid:29)(cid:11)(cid:4)(cid:6)(cid:54)(cid:6)(cid:26)(cid:30)(cid:6)(cid:49)(cid:30)(cid:8)
(cid:43)
(cid:15)(cid:41)(cid:3)
(cid:19)(cid:29)(cid:11)(cid:4)(cid:11)(cid:8)(cid:7)(cid:11)(cid:8)(cid:18)(cid:4)(cid:55)(cid:4)(cid:51)(cid:33)(cid:44)(cid:7)(cid:26)(cid:42)(cid:6)(cid:30)(cid:30)(cid:44)(cid:4)(cid:49)(cid:9)(cid:29)(cid:39)(cid:8)(cid:19)(cid:4)(cid:51)(cid:9)(cid:26)(cid:19)(cid:11)(cid:26)(cid:19)(cid:47)(cid:4)(cid:22)(cid:46)(cid:19)(cid:42)(cid:11)(cid:26)(cid:29)(cid:19)(cid:6)(cid:30)(cid:26)(cid:11)(cid:44)
(cid:19)(cid:29)(cid:4)(cid:7)(cid:46)(cid:51)(cid:51)(cid:29)(cid:9)(cid:11)(cid:4)(cid:22)(cid:29)(cid:9)(cid:4)(cid:3)(cid:29)(cid:7)(cid:11)(cid:45)(cid:42)(cid:9)(cid:26)(cid:51)(cid:11)(cid:4)(cid:29)(cid:9)(cid:4)(cid:3)(cid:10)(cid:5)(cid:4)(cid:51)(cid:6)(cid:7)(cid:7)(cid:56)(cid:29)(cid:9)(cid:18)(cid:4)(cid:51)(cid:9)(cid:29)(cid:11)(cid:8)(cid:42)(cid:11)(cid:26)(cid:29)(cid:19)
Figure 8: Our evaluation shows that a majority of common printer devices are vulnerable to the analyzed attacks.
1 %!
2
> s e t s y s t e m p a r a m s
Listing 12: Reset device to factory defaults (PostScript).
7.3. Print job manipulation
Content overlay. To implement
the attack described in
Section 5.3, we redeﬁned the showpage operator which is
contained in every PostScript document to print the current
page. We can hook in there, execute our own code, and then
call the original version of the operator. By doing so, we can
overlay all pages to be printed with a custom document. This
attack was applicable to 14 devices.
Content replacement. The problem of replacing text in
PostScript ﬁles can be reduced to the problem of extracting
strings from the rendered document. This is not trivial,
because strings can be dynamically built by the PostScript
program itself. Hence, simple parsing and replacing within
the document source code is not a general option.
We used the approach of Nevill-Manning et al. [44]
and in our tests, we redeﬁned the show operator, which is
used to paint current strings. Please note that this simple
approach is only applicable with high success probability to
text documents, which have been created, for example, with
LaTeX.
7.4. Information disclosure
In this subsection we present different attacks leading to
information disclosure such as revealing content stored in
the memory, ﬁles on the ﬁle system or print jobs.
Memory access. We were not able to reproduce mem-
ory dumping using PostScript as described in 5.4, because
we were not
in possession of Xerox devices. However,
our evaluation showed that Brother MFC-9120CN, Brother
DCP-9045CDN, and Konica bizhub 20p were vulnerable to
arbitrary NVRAM access using PJL. Listing 13 shows an
example attack vector, where X is an integer referring to the
accessed memory address. Our prototype implementation
simply increments this value to dump the NVRAM.
1 @PJL RNVRAM ADDRESS = X
Listing 13: Read byte at location X.
This critical attack leads to the disclosure of user PINs
and passwords for the embedded web server, for POP3 and
SMTP as well as for FTP and Active Directory proﬁles.
File system access. To evaluate PostScript and PJL imple-
mentations for their abilities to access the ﬁle system as
discussed in 5.4, we implemented this functionality in PRET
according to the standards [8], [46].
Accessing ﬁles with PostScript was supported by a
variety of devices in our test printer pool but sandboxed to a
certain directory. This limits the possibilities of an attacker
to mostly harmless actions like font modiﬁcation. Only HP
223
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:18 UTC from IEEE Xplore.  Restrictions apply. 
LaserJet 4200N was prone to path traversal which allowed
access to the whole ﬁle system. This issue affects almost 40
other HP devices and was discussed in [5]. An example for
PostScript ﬁle system access on the HP LaserJet 4200N is
given in Listing 14.
1 %!
2
3
4
5
6
7
r e a d { b y t e exch 0 exch p u t
i n f i l e
(% s t d o u t )
{ i n f i l e
f i l e b y t e w r i t e s t r i n g }
/ b y t e
/ i n f i l e
{
e x i t } i f e l s e
( . . / . . / . . / e t c / passwd )
( r )
f i l e d e f
( 0 ) d e f }}
(w)
c l o s e f i l e
} l o o p
Listing 14: Read password ﬁle with PostScript.
The HP developers attempted to ﬁx the issue in the
ﬁrmware for HP LaserJet 4250N. However, we could bypass
this protection with a new attack, by using %*% special
characters as disk preﬁx and .././
instead of ../ for path
traversal. We could access the whole ﬁle system even
for the latest ﬁrmware version. The impact is signiﬁcant;
passwords for the embedded web server can be found in
/dev/rdsk_jdi_cfg0 while the RAM is available for reading
and writing at /dev/dsk_ram0.
OKI MC342dn allowed us to execute one level of path
traversal, where a directory called hidden/ was located
containing stored fax numbers, email contacts, local users’
PINs, and the SNMP community string. More interesting,
however, is the fact that this MFP can be integrated into a
network using features like Email-to-Print or Scan-to-FTP.
An attacker can ﬁnd in the hidden/ directory passwords for
LDAP, POP3, SMTP, outbound HTTP proxy, FTP, SMB,
Webdav, as well as the IPsec pre-shared keys. This is a
good example how an attacker can escalate her way into a
company’s network, using the printer device as a starting
point.
Four tested devices allowed us to access the ﬁle system
with PJL commands. HP LaserJet 4200N and HP LaserJet
4250N were prone to path traversal attacks which is well
known for both devices and has been discussed in [3]. An
example for PJL ﬁle system access on HP LaserJet 4200N
is given in Listing 15.
1 @PJL FSQUERY NAME = " 0 : \ . . \ . . \ e t c \ passwd "
2 @PJL FSUPLOAD NAME = " 0 : \ . . \ . . \ e t c \ passwd " OFFSET=0
SIZE=23
searched for a technique to store print jobs independent of
support for ﬁle operations and concluded to use permanent
dictionaries. As we wanted to capture print jobs from the
very beginning, our redeﬁned operator must be the very ﬁrst
operator contained in the PostScript document. For example,
all documents printed with CUPS are pressed into a ﬁxed
structure beginning with currentfile /ASCII85Decode
filter. Based on the assumption of such a ﬁxed struc-
ture, one can overwrite the currentﬁle operator to invoke
exitserver and the ﬁlter operator to ﬁnally start the capture
loop. For other printing systems, this attack should also be
possible, but operators need to be adapted. This vulnerability
has presumably been present in printing devices for decades,
as solely language constructs deﬁned by the PostScript
standard are abused.
To evaluate this attack, we infected all devices in the test
printer pool with the PostScript malware. 13 devices were
vulnerable to this attack.
Credential disclosure. In addition to web server passwords
which may be obtained by accessing memory or the ﬁle sys-
tem, printer language credentials themselves are a valuable
target as they are required for some of the attacks described
in this work.
PostScript provides two types of protection mechanisms;
the SystemParamsPassword is required to change print
job settings like paper size while the StartJobPassword is
needed to exit the server loop and, therefore, permanently
alter the PostScript environment. The checkpassword opera-
tor which takes either an integer or a string as input checks
for both passwords at once [9]. The key size is very large;
PostScript strings can contain arbitrary ASCII characters and
have a maximal length of 65,535 [8], which theoretically
allows key sizes of 524,280 bit. On the other hand, brute-
force attacks can be performed extremely fast because a
PostScript interpreter can be programmed to literally crack
itself. A simple PostScript password cracker testing for
numerical values as passwords is shown in Listing 16.
/ min 0 d e f
s t a t u s d i c t b e g i n {
/ max 1000000 d e f
dup c h e c k p a s s w o r d {== s t o p }{ pop } i f e l s e
1 %!
2
3
4
5
6
7
min 1 max {
} f o r
} s t o p p e d pop
Listing 15: Read password ﬁle with PJL.
Listing 16: PostScript password brute-force.
Print job capture. With the capability to hook into arbitrary
PostScript operators it is possible to manipulate and access
foreign print jobs. To parse the actual datastream sent to
the printer, an idea based on the debug.ps project can be
applied [39]; every line to be processed by the PostScript
interpreter can be accessed by reading from the %lineedit
special ﬁle [8]. This can be done in a loop, line by line,
retrieving the content of printed documents. Each line can
further be executed using the exec operator and appended to
a ﬁle. This method, however, only worked for few devices in
our test printer pool, and for unknown reasons, lines became
fragmented at random on larger print jobs. We, therefore,
Our tested printers were capable of performing between
5,000 and 100,000 password veriﬁcations per second. Such
enormous cracking rates can be achieved because a printer’s
RIP is highly optimized for processing PostScript code and
password guessing attempts are not limited. The only ex-
ceptions – and thus seemingly secure printers – are Brother
MFC-9120CN, Brother DCP-9045CDN, and Konica bizhub
20p, which accepted one password per second. However,
we found out that these printers only veriﬁed the very ﬁrst
character of the password, which effectively limits the key
size to 8 bit and allows an attacker to crack the password
even manually.
224
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:18 UTC from IEEE Xplore.  Restrictions apply. 
PJL disk lock is the defense mechanism propagated by
HP against PJL ﬁle system access, including its known path
traversal vulnerabilities [48]. However, PJL passwords are
vulnerable to brute-force attacks because of their limited 16
bit key size as demonstrated by [26]. The devices in our test
printer pool could verify between 50 and 1,000 passwords
per second, leading to average cracking times between 30
seconds and ten minutes.
8. Countermeasures
there is no silver bullet
Most attacks against printers are enabled because there
is no clear distinction between page description and printer
control functionality. Using the very same channel for
data – to be printed – and code – to control the device
– makes printers insecure by design. Potentially harmful
commands can be executed by anyone who has the rights
to print. Therefore,
to counter
such design-immanent ﬂaws. There are, however, various
short- and long-term recommendations, best practices, and
workarounds to mitigate the risks until their causes are ﬁxed
by printer manufacturers. Network administrators should
never leave their printers accessible from the Internet and
disable raw port 9100/tcp printing if not required. While
this does not prevent all the presented attacks, it complicates
them and in particular mitigates the attacker’s ability to leak
data. A more secure approach is to completely sandbox all
printing devices into a separate VLAN, only accessible by a
hardened print server as proposed by Costin [18] and shown
in Figure 9. If the printer supports authentication, it should
be conﬁgured to accept print jobs from authorized personnel
only.
(cid:19)(cid:3)(cid:2)(cid:6)(cid:20)(cid:12)(cid:21)(cid:21)(cid:6)(cid:13)(cid:14)(cid:22)(cid:16)(cid:18)(cid:23)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:2)
(cid:1)(cid:7)(cid:8)(cid:5)(cid:9)(cid:10)(cid:2)(cid:3)(cid:11)(cid:5)
(cid:12)(cid:4)(cid:13)(cid:14)(cid:1)(cid:15)(cid:16)
(cid:17)(cid:4)(cid:5)(cid:6)(cid:2)(cid:11)(cid:2)(cid:6)(cid:5)(cid:6)(cid:2)(cid:8)
(cid:16)(cid:4)(cid:3)(cid:12)(cid:17)(cid:10)(cid:17)(cid:18)