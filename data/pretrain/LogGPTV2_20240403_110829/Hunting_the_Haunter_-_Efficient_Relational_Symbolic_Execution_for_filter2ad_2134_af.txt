on tainting, reports a violation in Listing 7, line 2 because
toLeak is tainted with secret data, whereas the program is
secure because toLeak is set to 0 before being leaked. In
contrast, BINSEC/HAUNTED, based on relational SE, does not
report such false alarms.
Four previous works have used symbolic execution for
analysis of cache side-channels [16], [44]–[46]. Three of
them [16], [44], [45] target binary code; only two of them [16],
12
Tool
Technique
AISE [9]
KLEESPECTRE [11]
SPECUSYM [10]
Abstract Interp.
SE (KLEE)
SE (KLEE)
OO7 [4]
FASS [12]
SPECTECTOR [3]
PITCHFORK [5]
Tainting
MC (UCLID5)
SE
SE&taint. (ANGR)
BINSEC/HAUNTED
RelSE
Target
LLVM
LLVM
LLVM
Binary
Binary
Binary
Binary
Binary
Property
Precise
PHT
STL
Scales
Cache
Cache
Cache
Patterns
SNI
SNI
SCT
SCT








 NA
Explicit*
Explicit*
∼ NA
Explicit*
Explicit*
Optim-Explicit
Haunted






Explicit
Haunted






∼ PHT /  STL
 PHT / ∼ STL
Benchs
Crypto
Crypto
Crypto
Other
Litmus
Litmus
Crypto
Crypto
Table V: Comparison of BINSEC/HAUNTED with related work where SNI denotes speculative non-interference (transient execution
does not leak more information than regular execution). *These tools restrict to leaks in transient execution, so Haunted-PHT
optimization does not apply, however their straightforward adaptation to SCT would be Explicit.
1
2
3
4
5
6
7
8
void leakThis(uint8_t toLeak) {
tmp &= publicarray2[toLeak * 512]; }
void case_1(uint32_t idx) {
if (idx 
inst ::= lval := exp
| ite exp? l1:l2
| goto exp | goto l
| halt
lval ::= v | store exp
exp ::= v | bv | load exp
| u exp
| exp b exp
u ::= ¬ | −
b ::= + | × | ≤ | . . .
Figure 3: DBA syntax, where l, l1, l2 are program locations,
v is a variable and bv is a value,
b) represents unary
(resp. binary) operators.
(resp.
B. Proofs
In this section, we provide proofs for the main result
of the paper. Let C.f denote the ﬁeld f in the symbolic
conﬁguration C. For instance, for C (cid:44)(cid:0)l, δ, ρ, µ
, π,(cid:101)π,(cid:101)λ(cid:1), C.(cid:101)π
is the speculative path predicate (cid:101)π. Let C0...n denote a set of
predicate (cid:101)π, nor transient load set (cid:101)λ, but just an invalidation
depth(cid:101)δ at which the transient paths are terminated.
n conﬁguration {C0 . . . Cn}. Additionally, for a set of n sets
{S0 . . . Sn}, S0...n denotes the union of these sets.
Note that in Explicit RelSE, there is no speculative path
(cid:86)
Property 1 (Unconstrained ite are sets of expressions). Let π
(cid:86)
be a path predicate and ϕ
be a symbolic if-then-else expression
built over a set of relational symbolic bitvectors {ϕ1
(cid:86)}