generated from (CI(cid:2) , DK0)   KM.Enc(PK, I(cid:2)
enc),
(cid:2)   SE.Enc(DK, Mb), b 2R
KDF(DK0, `) = DK k d, C
b
C(cid:2) = Commitd(DK).
{0, 1}, and
(cid:2)  
Game1: The game is identical to Game0 except that C
C(cid:2) = Commitd(DR),
SE.Enc(DR, Mb), b 2R {0, 1}, and
where DR   SE.Gen(1(cid:2)) and d is a random coin.
Game2:
=
that
Commitd(R), where R is a random string of length `SE
and d is a random coin.
(cid:2)  
Game3:
SE.Enc(DR, QM), where DR   SE.Gen(1(cid:2)) and QM is a
random message.
c(cid:6) Gamej (i, j = 0, 1, 2, 3, i ¤ j)
denotes that Gamei and Gamej are computationally indis-
tinguishable from each other. We will prove the indistin-
guishability in the following lemmas.
to Game2 except
Hereafter, Gamei
to Game1
Identical
Identical
that C
except
b
C
Lemma 1. Assume the AB-KEM ˘KM is CPA secure,
the key derivation function KDF is secure, and the com-
mitment scheme (Commit, Decom) is computationally
hiding, then Game0
c(cid:6) Game2.
Proof. Consider the following game:
b
(cid:2)  
Game0: Same as Game0
C(cid:2) = Commitd(DR0),
SE.Enc(DR0, Mb), b2R {0, 1}, and
where DR0 k d = KDF(DR0, `) and DR0 is a random
that C
except
session key.
We ﬁrst show that CPA security of the AB-KEM implies
c(cid:6) Game0. Suppose there exists a PPT adversary
Game0
A that can distinguish Game0 and Game0 with non-
negligible probability. We construct an algorithm B to
break CPA security of the AB-KEM.
S. Lin, R. Zhang and M. Wang
Actually, B receives PK from the challenger and then
chooses KDF with the output length `, ˘SE with the
private-key length `SE, and (Commit, Decom),
then
sends PP = (PK, KDF, `, ˘SE, `SE, (Commit, Decom))
to A. A adaptively issues private key and re-encryption
key queries. For any private key query for Ikey, B forwards
it to its own oracle and returns the answer to A. For any
re-encryption key query for (Ikey, I0
enc), B obtains the
private key SKI from its own oracle and sends RKI!I0
to A by running RKGen(PP, SKI, I0
enc) ! RKI!I0 . After
receiving two equal-length messages M0, M1 and I(cid:2)
enc from
A with the restriction that f (Ikey, I(cid:2)
enc) ¤ 1 for any queried
Ikey, B sends I(cid:2)
enc to the challenger. The challenger runs
Enc(PP, I(cid:2)
enc) ! (CI(cid:2) , DK0), and sets K0 = DK0, K1 =
b
DR0, where DR0 is a random session key, then picks ˇ 2R
{0, 1} and returns (CI(cid:2) , Kˇ ) to B. B computes KDF(Kˇ ,
C(cid:2)and then selects b 2R
b
`) = K k d and Commitd(K) =
(cid:2)
{0, 1}, runs SE.Enc(K, Mb) ! C
, and sends CTI(cid:2) =
C(cid:2)) to A as the challenge ciphertext. After
(I(cid:2)
enc, CI(cid:2), C
the second query phase with the same restriction as before,
A outputs its guess b0 2 {0, 1}. If b0 = b, B outputs 0;
otherwise, B outputs 1.
We can see that B has properly simulated Game0 and
Game0 for the case of ˇ = 0 and ˇ = 1, respectively. If
the adversary A can distinguish Game0 and Game0 with
non-negligible probability, B can attack CPA security
of the AB-KEM with non-negligible advantage. Thus
Game0
The security of the KDF implies that KDF(DR0, `) is
indistinguishable from a random string. That is, DR0 and
d are both indistinguishable from a random string, which
implies that Game0 c(cid:6) Game1. Then Game0
c(cid:6) Game1.
Because the commitment scheme is computationally hid-
ing, Game1
c(cid:6) Game2. Hence, Game0
c(cid:6) Game0.
c(cid:6) Game2.
(cid:2)
,
c(cid:6) Game3.
Lemma 2. Assume ˘SE is semantically secure, then
Game2
Proof. Suppose there exists a PPT adversary A that
can distinguish Game2 and Game3 with non-negligible
probability. We can construct an algorithm B to attack
the semantical security of ˘SE with non-negligible
probability.
Actually, B runs Setup(1(cid:2), U) ! (PP, MSK) and sends
b
PP to A and then simulates the oracles {Osk,Ork} for
A. When A submits M0, M1, and I(cid:2)
enc to B, B computes
C(cid:2) as described in Game2 and then selects a random
CI(cid:2) ,
message QM, picks b 2R {0, 1}, and sends M0 = Mb, M1 =
QM to the challenger. The challenger picks ˇ 2R {0, 1}
(cid:2)   SE.Enc(DR, Mˇ ), where DR  
b
and computes C
to B. Then B sends CTI(cid:2) =
SE.Gen(1(cid:2)), and returns C
C(cid:2)) to A. After given access to the oracles
(I(cid:2)
enc, CI(cid:2), C
again, A outputs its guess b0 2 {0, 1}. If b0 = b, B returns
0 and outputs 1 otherwise.
We can see that B has properly simulated Game2 and
Game3, respectively. If A can distinguish Game2 and
Game3 with non-negligible probability, B can attack the
(cid:2)
(cid:2)
,
SecurityComm.Networks(2016) © 2016 John Wiley & Sons, Ltd.
DOI: 10.1002/sec
S. Lin, R. Zhang and M. Wang
Provable security
semantical security of ˘SE with non-negligible probabil-
ity. Thus Game2
c(cid:6) Game3.
By transitivity of computational indistinguishability, we
c(cid:6) Game3. Because Game3 contains no
obtain Game0
information about the messages submitted by the adver-
sary, the advantage of the adversary in Game3 is negligi-
ble. Thus, the advantage of the adversary in the real game
is negligible. It follows that the constructed AB-VPRE
scheme is CPA secure.
the commitment
is computationally binding,
Lemma 3. Suppose that
scheme
(Commit, Decom)
then
the constructed AB-VPRE scheme meets veriﬁcation
soundness.
Proof. Suppose there exists an adversary A that can
attack the veriﬁcation soundness with non-negligible
probability. We can build an algorithm B to attack the
computational binding of the commitment scheme with
non-negligible probability. Let B be the sender in the
commitment scheme and executes A as follows:
B calls Setup(1(cid:2), U) ! (PP, MSK) and sends PP to
A, then simulates the oracles Osk, Ork, Ore, Ode, Orvd for
A. After receiving I(cid:2)
enc, M(cid:2) from A, B runs Enc(PP,
b
b
(cid:2)
I(cid:2)
enc, M(cid:2)) ! CTI(cid:2) , where CTI(cid:2) = (I(cid:2)
b
enc, C0, C1, C2, C
,
C(cid:2) = Commitd(DK), then sends CTI(cid:2) to
C(cid:2)) and
b
C(cid:2) to the receiver. After given access to
A, and sends
the oracles again, A outputs a re-encrypted ciphertext
0, C0
enc, C0
C0(cid:2), CI0(cid:2)), and I0
CTI0(cid:2) = (I0(cid:2)
key satis-
enc) = 1. B calls KGen(PP, MSK, I0
fying f (I0
key, I0(cid:2)
key) !
then runs REVer.Test(CTI(cid:2) , CTI0(cid:2)) ! b and
SKI0 ,
REVer.Dec(PP, SKI0, CTI0(cid:2), b) ! M0. A wins the game if
b = 1 and M0 … {M(cid:2),?}, which implies that there exists a
tuple (DK0, d0) satisfying DK0¤DK such that SE.Dec(DK0,
(cid:2)
) ! M0, and Commitd0(DK0) = Commitd(DK). That
C
contradicts to the computational binding of the commit-
ment scheme.
Suppose that A wins the game with non-negligible
probability, then B breaks the computational binding of the
commitment scheme with non-negligible probability.
1, C0
2, C
0(cid:2)
,
Combining all the preceding discussions, we complete
the proof for Theorem 1.
The security property of re-encrypted ciphertexts is pro-
vided in Theorem 2. Because its proof is similar to that for
Theorem 1, we omit the proof here for the limit of space.
Theorem 2. Suppose the AB-KEM ˘KM is CPA secure,
the symmetric key encryption scheme ˘SE is semantically
secure, the key derivation function KDF is secure, and the
commitment scheme (Commit, Decom) is computation-
ally hiding, then the constructed AB-VPRE scheme is CPA
secure at re-encrypted ciphertexts.
Remark 2. We remark that the constructed AB-VPRE
scheme inherits the security of the underlying AB-KEM
SecurityComm.Networks(2016) © 2016 John Wiley & Sons, Ltd.
DOI: 10.1002/sec
scheme. If the AB-KEM scheme is selectively CPA secure,
the resulting AB-VPRE scheme is selectively CPA secure
as well.
5. INSTANTIATIONS
In this section, we instantiate our generic construction
with three AB-KEMs. For comparisons with the existing
AB-PRE schemes [2,6,20] that are based on similar AB-
KEMs as ours, we just provide three selectively secure
AB-VPRE schemes. That is, one KP-AB-VPRE scheme
and two CP-AB-VPRE schemes with monotonic and non-
monotonic access structures, respectively. We note that one
can achieve adaptively secure AB-KEMs in prime-order
groups by properly instantiating the bilinear encoding AB-
KEM [23] and thus obtain adaptively secure AB-VPRE
schemes.
5.1. AB-VPRE-1
We ﬁrst describe the CP-AB-KEM scheme [2] as in the
subsequent discussion (U = {1, 2,(cid:2)(cid:2)(cid:2) , n}).
1
(cid:2)
gx, {gti, h
x, {ti, x
ti


ti }1i3n
p )n and implicitly set KE0(Er, Ea) = ˙ n
(cid:4) KM.Setup(1(cid:2), U): Choose a bilinear group sys-
tem (G, GT , e) of prime order p (p 2 ‚(2(cid:2))). Select
a generator g 2R G, x, y, {ti}1i3n 2R Z(cid:2)

p . Set
Ea =
}1i3n
, ˛ = xy, h = gx. Then
e(g, g)˛ = e(g, h)y, gEa =
. The
public parameters PK = (e, g, gEa, e(g, g)˛) and the
master secret key MSK = (˛, Ea).
(cid:4) KM.KGen(PK, MSK, S): Choose Er = (r1,(cid:2)(cid:2)(cid:2) ,
rn) 2R (Z(cid:2)
i=1ri =
r0, and KE(S, Er, Ea) = ({ x
ri}i2U\S;
ti
ri}i2U). Then SK = (SK0, SK1) where SK0 =
{ x
t2n+i
V
g˛ (cid:2) gxKE0(Er,Ea) = hy+r0, SK1 = gKE(S,Er,Ea) = ({h
ri
ti }i2S;
ri
tn+i }i2U\S; {h
{h
i, i 2 I 
(cid:4) KM.Enc(PK, A): A is represented as
U, where i denotes an attribute (positive i+ or negative
i–). Select s 2R Z(cid:2)
p , and implicitly set CE(A, Eu, Ea) =
({ti}i2I^i=i+, {tn+i}i2I^i=i–, {t2n+i}i2U\I), where Eu is
null. Then the ciphertext C =(C0, C1, C2), where C0 =
gs, C2 = hs, C1 = gsCE(A,Eu,Ea) = ({gtis}i2I^i=i+,
{gtn+is}i2I^i=i–, {gt2n+is}i2U\I). The
encapsulated
key DK0 = e(g, g)˛s.
(cid:4) KM.Dec(SK, C): If f (S, A) ¤ 1, output ?; other-
wise, deﬁne bilinear function F as follows:
ri}i2S; { x
tn+i
ri
t2n+i }i2U).
(cid:2)


Y
Y
gKE(S,Er,Ea), gsCE(A,Eu,Ea)

Y
gtis, h

ri
ti
e
i2I^i=i+^i2S
=
e
gt2n+is, h
ri
t2n+i
i2U\I
ri
tn+i
= e(g, h)sr0