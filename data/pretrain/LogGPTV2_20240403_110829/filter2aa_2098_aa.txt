**© Copyright 2019 NCC Group**

**An NCC Group Publication**

**Common Security Issues in Financially-Oriented Web Applications: A Guide for Penetration Testers**

**Prepared by: Soroush Dalili**

**Version 2.0**

---

**NCC Group | Page 2**

**© Copyright 2019 NCC Group**

**Table of Contents**

1. **Introduction** ...................................................................................................................... 3
2. **Common Vulnerability Classes in Financially-Oriented Web Applications** ........................ 4
   2.1. **Time-of-Check-Time-of-Use (TOCTOU) and Race Condition Issues** ............................ 4
      2.1.1. **Transferring Money or Points, or Buying Items Simultaneously** .......................... 4
      2.1.2. **Changing the Order upon Payment Completion** ................................................... 5
      2.1.3. **Changing the Order after Payment Completion** ................................................... 6
   2.2. **Parameter Manipulation** ............................................................................................. 6
      2.2.1. **Price Manipulation** ............................................................................................... 6
      2.2.2. **Currency Manipulation** ......................................................................................... 6
      2.2.3. **Quantity Manipulation** ......................................................................................... 7
      2.2.4. **Shipping Address and Post Method Manipulation** ............................................... 7
      2.2.5. **Additional Costs Manipulation** ............................................................................. 7
      2.2.6. **Response Manipulation** ......................................................................................... 7
      2.2.7. **Repeating an Input Parameter Multiple Times** .................................................... 8
      2.2.8. **Omitting an Input Parameter or its Value** ............................................................ 8
      2.2.9. **Mass Assignment, Autobinding, or Object Injection** .......................................... 8
      2.2.10. **Monitor the Behaviour while Changing Parameters to Detect Logical Flaws** .... 8
   2.3. **Replay Attacks (Capture-Replay)** .............................................................................. 9
      2.3.1. **Replaying the Call-back Request** ......................................................................... 9
      2.3.2. **Replaying an Encrypted Parameter** ................................................................... 10
   2.4. **Rounding Errors** ....................................................................................................... 10
      2.4.1. **Currency Rounding Issues** ................................................................................ 10
      2.4.2. **Generic Rounding Issues** .................................................................................. 11
   2.5. **Numerical Processing** .............................................................................................. 12
      2.5.1. **Negative Numbers** ............................................................................................. 12
      2.5.2. **Decimal Numbers** .............................................................................................. 12
      2.5.3. **Large or Small Numbers** .................................................................................... 12
      2.5.4. **Overflows and Underflows** .................................................................................. 12
      2.5.5. **Zero, Null, or Subnormal Numbers** .................................................................... 12
      2.5.6. **Exponential Notation** .......................................................................................... 13
      2.5.7. **Reserved Words** ................................................................................................ 13
      2.5.8. **Numbers in Different Formats** .......................................................................... 13
   2.6. **Card Number-Related Issues** ................................................................................... 15
      2.6.1. **Showing a Saved Card Number during the Payment Process** ........................... 15
      2.6.2. **Card Number Enumeration via Registering Duplicate Cards** ............................ 15
   2.7. **Dynamic Prices, Prices with Tolerance, or Referral Schemes** ................................. 15
   2.8. **Discount Codes, Vouchers, Offers, Reward Points, and Gift Cards** ........................ 16
      2.8.1. **Enumeration and Guessing** ................................................................................ 16
      2.8.2. **Vouchers and Offers Stacking** ........................................................................... 16
      2.8.3. **Earning More Points or Cash Return than the Price when Buying an Item** ...... 16
      2.8.4. **Using Expired, Invalid, or Other Users’ Codes** ................................................ 16
      2.8.5. **State and Basket Manipulation** .......................................................................... 16
      2.8.6. **Refund Abuse** .................................................................................................... 17
      2.8.7. **Buy-X-Get-Y-Free** .............................................................................................. 17
      2.8.8. **Ordering Out of Stock or Unreleased Items** ...................................................... 17
      2.8.9. **Bypassing Other Restrictions** ............................................................................ 17
      2.8.10. **Point Transfer** ................................................................................................ 18
   2.9. **Cryptography Issues** ................................................................................................ 18
   2.10. **Downloadable and Virtual Goods** ........................................................................... 18
   2.11. **Hidden and Insecure Backend APIs** ........................................................................ 18
   2.12. **Using Test Data in Production Environment** ........................................................... 19
   2.13. **Currency Arbitrage in Deposit/Buy and Withdrawal/Refund** ................................. 19
3. **Conclusions** .................................................................................................................... 21
4. **References and Further Reading** ..................................................................................... 23

---

**NCC Group | Page 3**

**© Copyright 2019 NCC Group**

**1. Introduction**

In today's digital landscape, it is rare to find individuals who have not engaged in online shopping or utilized online financial services. These services offer convenience and additional value, such as loyalty programs, to attract and retain customers, thereby ensuring market competitiveness. While creating new online commercial services is essential for most organizations, it must be done securely to meet client, regulatory, and legal expectations.

E-commerce applications, due to the high value of the products and services they handle, are prime targets for threat actors seeking financial gain or aiming to damage a company’s reputation. This document summarizes NCC Group’s experience in assessing e-commerce and financial services applications, providing a comprehensive checklist of common security issues observed in these systems.

Security assessments of e-commerce and financial services require specialized test cases that cover logical security issues and rare vulnerabilities not typically identified through conventional penetration or functional testing. Vulnerabilities such as price manipulation, buying items at a reduced cost, or earning free money are particularly interesting, but they do not represent all possible attack vectors.

Many application-specific e-commerce security issues cannot be detected by static or dynamic automated security scanners, or even through manual code reviews, if the reviewer lacks a thorough understanding of the application's rules, business logic, and threat scenarios. NCC Group’s experience indicates that one of the best ways to identify these issues early in the development lifecycle is to document all the rules (do’s and don’ts) for both business processes and supporting software. These rules can then be used to create a threat model, from which specific security-focused test cases, scenarios, or checklists can be developed. This approach benefits security-focused code reviewers and penetration testers by providing insights into the expected system behavior and design thought processes. It also enhances the performance of automated security scanners by defining new rules to detect specific issues.

This whitepaper discusses the common security issues NCC Group has identified over the past fifteen years of performing security assessments on real e-commerce and financial service web applications. The resulting checklist can serve as an additional tool for penetration testers when evaluating e-commerce applications.

---

**NCC Group | Page 4**

**© Copyright 2019 NCC Group**

**2. Common Vulnerability Classes in Financially-Oriented Web Applications**

This section introduces various vulnerability classes, providing an overview of each and examples of how to test for their presence. We have excluded generic web application issues, such as those involving authentication, authorization, and input validation, focusing instead on vulnerabilities specific to financially-oriented web applications. Where possible, we have mapped these into the categories used in the Common Weakness Enumeration (CWE).

### 2.1. Time-of-Check-Time-of-Use (TOCTOU) and Race Condition Issues

**CWE: 367 and 557**

TOCTOU is a software bug that occurs when an application checks the state of a resource before using it, but the resource's state changes between the check and the use, invalidating or altering the results of the check. Time and order sequence are crucial for the correct operation of financial software. Many financial transactions rely on checking balances and values (sometimes in real time) before processing. If there is latency, delay, or an opportunity to modify values between these checks, or if resource coordination is not properly implemented in multi-threaded solutions, there may be opportunities to manipulate application logic, potentially for financial gain.

#### 2.1.1. Transferring Money or Points, or Buying Items Simultaneously

This is a common flaw in e-commerce applications that maintain user balances and allow money transfers or simultaneous purchases. Consider the following example, commonly seen by NCC Group [1]. A user is authenticated to a financial application from two different devices. A transaction is initiated to transfer £100 from bank account number 1019 to bank account number 9823. Suppose the server-side code is as follows, and the user’s account balance is £100:

```java
if (amount <= account_balance) { 
    account_balance = account_balance – amount;
}
```

If the transfer request can be fired twice simultaneously, the first check (line 1) might be executed twice before the account balance is updated (line 2). This would result in the account balance being decremented by £100 twice, allowing the user to transfer more money than allowed. This issue can be exploited by writing a simple multithreaded script that uses multiple valid sessions for the same user, simulating concurrent logins on multiple devices. In some cases, it is even possible to exploit this using the same session if the application processes requests concurrently.

The implications of this vulnerability can be severe, depending on the nature of the application, as it opens the potential for theft or unauthorized use of funds, and provides a mechanism for fraud and money laundering. This issue is prevalent in many financial applications, such as banking apps that allow money transfers between multiple accounts, shopping websites where users can buy multiple items simultaneously, or commercial sites that allow users to earn and transfer reward points.

Some applications prevent negative account balances by replacing them with zero. In the above example, if the application had this feature, the user could potentially gain £100. Concurrency issues can also affect discount voucher codes, allowing one-time promotion codes to be used multiple times.

#### 2.1.2. Changing the Order upon Payment Completion

Applications that allow users to change their orders while paying for an item can be vulnerable if there is no final verification. Although race conditions in changing the shopping basket during payment processing seem complex, often there is no need for this, especially if the payment page is hosted by a third-party or an external module. In this case, the order can be modified while the user is on the payment page and before completing the payment. Changing items, shipping methods, addresses, quantities, etc., can affect the final price while the application still uses the initial, cheaper price.

For example, a user selects a cheap item and adds it to the basket. They then go to the checkout page to pay for the selected item. Without closing the payment page, the user opens the main website in a new browser tab (using the same session token) and adds more expensive items to the basket. The user then returns to the initial checkout page and completes the payment for the initial item. When the order is completed, all items in the basket are shown as paid in the final receipt, allowing the user to buy additional items for free.

This vulnerability can also exist in the deposit process when an application holds user balances. NCC Group has encountered a scenario where an application validated input values and stored them in the session, regardless of the validation result. If a user provided valid values to proceed to the next stage and then replayed the previous request with invalid values, the application stored the invalid values in the session without revalidating them, leading to severe logical issues.

#### 2.1.3. Changing the Order after Payment Completion

Updating details in a completed order, generated invoice, or quote can lead to financial loss if the application does not verify the status of a completed transaction. This allows users to add more items to an already completed order, modify existing items to abuse offers, or change other details without paying additional fees.

For example, an insurance certificate was generated for a cheap vehicle with incorrect details to reduce the insurance cost. After the order was completed, the previously sent requests were modified and replayed to bypass checks that identified the status of the insurance application. This allowed the user to change details within the paid insurance certificate to include more expensive vehicles or alter the expiry time without paying additional fees.

### 2.2. Parameter Manipulation

**CWE: 20, 691, 693, 179, 345, 807, 115, 133, 166, 167, 168, 171, 915**

Parameter manipulation is a key technique for exploiting many of the security issues outlined in this paper. Below, we discuss the most important parameters to consider and test during an assessment of a financial application.

#### 2.2.1. Price Manipulation

Price manipulation is a critical test for any e-commerce application where users can purchase products. Applications typically send price data to the payment pages, especially when the payment module is not part of the web application and does not have access to user sessions or the database. It is also possible to find applications that send price data when an item is added to the basket.

Sometimes, it is possible to buy the same item cheaper or even for free by manipulating its price. Although it is rare to find applications that accept negative numbers via price fields, this should always be tested as it can significantly alter the application flow.

For example, an e-commerce site’s “add to basket” mechanism included a hidden “price” parameter. The application ignored a manipulated price in the request and used the correct value instead. However, by adding several sale items (items with additional discounts) to the basket, the application started using the price parameter within the request, allowing price manipulation and negative values.

In poorly implemented applications, it is possible to change the price value in the callback from the payment server, which goes through the user’s browser and not via the backend APIs. The user can alter the price before going to the payment page, and after completing the transaction, the price in the callback URL will be changed to reflect its initial value. The user could later request a refund and gain this money. Although it is rare to see such a vulnerable application nowadays, it is always worth checking for this type of vulnerability.

#### 2.2.2. Currency Manipulation

Although an e-commerce website may not accept different currencies, payment applications generally do and require the currency parameter to be specified in the initial request. If a website does not validate the currency parameter upon completion of a transaction, a user can exploit this by depositing money in a currency with a much lower value than the requested currency.

For example, a user makes a £20 payment to a website using the PayPal payment option. The request sent to PayPal was intercepted, and the currency parameter was changed from “GBP” (British Pound) to “INR” (Indian Rupee). After completing the transaction on PayPal with 20 Indian Rupees, the website authorized the transaction without checking the currency, and £20 was deposited in the user’s account while only £0.22 was withdrawn from the PayPal account.

#### 2.2.3. Quantity Manipulation

Websites calculate the final price based on the quantity of items purchased. Therefore, it may be possible to manipulate the quantity parameter to contain small or negative values, affecting the price on the final payment page. Websites may remove items with zero or negative values in the quantity parameters, but this can still lead to issues if not properly handled.

---

**NCC Group | Page 7**

**© Copyright 2019 NCC Group**

**Figure 3: Paying less by currency manipulation**

In summary, the vulnerabilities discussed in this section highlight the importance of robust validation and synchronization mechanisms in financially-oriented web applications. By understanding and testing for these issues, penetration testers can help ensure the security and integrity of e-commerce and financial services.