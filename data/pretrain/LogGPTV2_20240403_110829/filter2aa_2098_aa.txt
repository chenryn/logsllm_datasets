© Copyright 2019 NCC Group  
An NCC Group Publication 
Common Security Issues in Financially-
Oriented Web Applications 
A guideline for penetration testers 
Prepared by: 
Soroush Dalili 
Version 2.0 
NCC Group | Page 2 
© Copyright 2019 NCC Group 
Contents 
1 
Introduction ...................................................................................................................................... 3 
2 
Common Vulnerability Classes in Financially-Oriented Web Applications ...................................... 4 
2.1 
Time-of-Check-Time-of-Use (TOCTOU) and Race Condition Issues .................................... 4 
2.1.1 
Transferring Money or Points, or Buying Items Simultaneously................................ 4 
2.1.2 
Changing the Order upon Payment Completion ....................................................... 5 
2.1.3 
Changing the Order after Payment Completion ........................................................ 6 
2.2 
Parameter Manipulation ......................................................................................................... 6 
2.2.1 
Price Manipulation ..................................................................................................... 6 
2.2.2 
Currency Manipulation ............................................................................................... 6 
2.2.3 
Quantity Manipulation ................................................................................................ 7 
2.2.4 
Shipping Address and Post Method Manipulation ..................................................... 7 
2.2.5 
Additional Costs Manipulation ................................................................................... 7 
2.2.6 
Response Manipulation ............................................................................................. 7 
2.2.7 
Repeating an Input Parameter Multiple Times .......................................................... 8 
2.2.8 
Omitting an Input Parameter or its Value .................................................................. 8 
2.2.9 
Mass Assignment, Autobinding, or Object Injection .................................................. 8 
2.2.10 Monitor the Behaviour while Changing Parameters to Detect Logical Flaws ............ 8 
2.3 
Replay Attacks (Capture-Replay) ........................................................................................... 9 
2.3.1 
Replaying the Call-back Request .............................................................................. 9 
2.3.2 
Replaying an Encrypted Parameter ......................................................................... 10 
2.4 
Rounding Errors ................................................................................................................... 10 
2.4.1 
Currency Rounding Issues ...................................................................................... 10 
2.4.2 
Generic Rounding Issues ........................................................................................ 11 
2.5 
Numerical Processing ........................................................................................................... 12 
2.5.1 
Negative Numbers ................................................................................................... 12 
2.5.2 
Decimal Numbers .................................................................................................... 12 
2.5.3 
Large or Small Numbers .......................................................................................... 12 
2.5.4 
Overflows and Underflows ....................................................................................... 12 
2.5.5 
Zero, Null, or Subnormal Numbers .......................................................................... 12 
2.5.6 
Exponential Notation ................................................................................................ 13 
2.5.7 
Reserved Words ...................................................................................................... 13 
2.5.8 
Numbers in Different Formats ................................................................................. 13 
2.6 
Card Number-Related Issues ............................................................................................... 15 
2.6.1 
Showing a Saved Card Number during the Payment Process................................ 15 
2.6.2 
Card Number Enumeration via Registering Duplicate Cards .................................. 15 
2.7 
Dynamic Prices, Prices with Tolerance, or Referral Schemes ............................................. 15 
2.8 
Discount Codes, Vouchers, Offers, Reward Points, and Gift Cards .................................... 16 
2.8.1 
Enumeration and Guessing ..................................................................................... 16 
2.8.2 
Vouchers and Offers Stacking ................................................................................. 16 
2.8.3 
Earning More Points or Cash Return than the Price when Buying an Item ............ 16 
2.8.4 
Using Expired, Invalid, or Other Users’ Codes ........................................................ 16 
2.8.5 
State and Basket Manipulation ................................................................................ 16 
2.8.6 
Refund Abuse .......................................................................................................... 17 
2.8.7 
Buy-X-Get-Y-Free .................................................................................................... 17 
2.8.8 
Ordering Out of Stock or Unreleased Items ............................................................ 17 
2.8.9 
Bypassing Other Restrictions .................................................................................. 17 
2.8.10 Point Transfer .......................................................................................................... 18 
2.9 
Cryptography Issues ............................................................................................................. 18 
2.10 Downloadable and Virtual Goods ......................................................................................... 18 
2.11 Hidden and Insecure Backend APIs ..................................................................................... 18 
2.12 Using Test Data in Production Environment ........................................................................ 19 
2.13 Currency Arbitrage in Deposit/Buy and Withdrawal/Refund ................................................ 19 
3 
Conclusions ................................................................................................................................... 21 
4 
References and Further Reading .................................................................................................. 23 
NCC Group | Page 3 
© Copyright 2019 NCC Group 
1 
Introduction 
Today it is often hard to find individuals who have not purchased something online or used online 
financial services. Online services offer ease of use and provide other value-add properties such as 
loyalty card schemes to attract and retain customers, thus ensuring market competiveness. Creating 
new online commercial services is imperative for most organisations, but has to be done in a safe and 
secure manner to meet client, regulatory, and legal expectations.  E-commerce applications, due to 
the value of the products and services they offer, are valuable targets for threat actors who are looking 
for financial gain or wish to damage a company’s brand or reputation.  
This document summarises NCC Group’s experience of assessing e-commerce and financial services 
applications, providing a checklist of common security issues seen in financial services web 
applications. 
Security assessments of e-commerce applications and financial services require specific security-
minded test cases to be developed. These tests have to cover logical security issues or rare 
vulnerabilities that are usually not found through conventional security penetration or functional testing. 
Vulnerabilities such as price manipulation, buying items at a reduced price or even for free, or earning 
free money are the most interesting; however, these vulnerabilities don’t represent all possible attacks. 
Unfortunately, many application-specific e-commerce security issues cannot be identified by static or 
dynamic automated security scanners, or even in a manual source code review, if the reviewer does 
not have a complete understanding of the application rules, business logic and processes, and threat 
scenarios. 
In NCC Group’s experience, one of the best ways to identify the business logic and application-specific 
security issues early in the development lifecycle is to write down all the rules (do’s and don’ts) both 
for the business processes and the supporting software and systems. These rules can then be used 
to create a threat model. Specific security-focused test cases, scenarios, or checklists can then be 
designed based on this threat model, and used to identify vulnerabilities and verify the correctness of 
the implementation. Security-focused code reviewers and penetration testers benefit from these 
documents, as they provide information about the expected behaviour of the system and the thought 
patterns that guided its design. Automated security scanners (especially static analysis tools) can also 
have their performance improved, by defining new rules to detect specific issues once a detection 
pattern has been developed. 
This whitepaper discusses the commonly-seen security issues that NCC Group has found over the 
last fifteen years of performing security assessments of real e-commerce and financial service web 
applications. The resulting checklist can be used as an additional tool for penetration testers when 
assessing e-commerce applications.  
NCC Group | Page 4 
© Copyright 2019 NCC Group 
2 
Common Vulnerability Classes in Financially-Oriented Web Applications  
In this section we introduce you to the vulnerability classes, providing an overview of each and 
examples of how to test for their presence. 
We have omitted generic web application issues, such as those involving authentication, authorisation, 
and input validation; instead the issues discussed in the following sections are those that have specific 
relevance to financially-oriented web applications. Where possible we have mapped these into the 
categories used in the Common Weakness Enumeration. [10] 
2.1 Time-of-Check-Time-of-Use (TOCTOU) and Race Condition Issues  
CWE: 367 and 557 
TOCTOU is a software bug that occurs when an application checks the state of a resource before 
using it, but the resource's state changes between the check and the use in a way that invalidates or 
changes the results of the check.  
Time and order sequence are crucial to correct financial software operations. Many financial 
transactions rely on checking balances and values (sometimes in real time) before processing. If there 
is latency, delay, or opportunity to modify values between these checks, or if resource coordination is 
not properly implemented around multi-threaded solutions, then there may be scope for manipulating 
application logic, perhaps for financial gain. 
2.1.1 Transferring Money or Points, or Buying Items Simultaneously 
This is a common flaw within e-commerce applications that keep users’ balances and allow money 
transfer or simultaneous purchases. 
Consider the following example, commonly seen by NCC Group [1]. A user is authenticated to a 
financial application from two different devices. A transaction is performed seeking to transfer money 
from bank account number 1019 to bank account number 9823 for the amount of £100. 
Suppose the server-side code is as follows, and that the user’s account balance is £100: 
1: if (amount <= account_balance) { 
2: 
account_balance = account_balance – amount 
3: } 
Figure 1: Using concurrent sessions to exploit a race condition issue 
If the transfer request can be fired twice into the web application at the same time, there is the potential 
that line 1 in the code to be executed twice before line 2 is executed. If this occurs, then the first check 
that £100 is <= £100 holds true twice, and so when the if statement block executes, the 
account_balance value is decremented by £100 twice, meaning that the user has been able to 
transfer more money than allowed (as dictated by the if statement in the source code). 
This problem can be exploited by writing a simple piece of multithreaded code that uses multiple valid 
sessions for the same user (for example by simulating concurrent logins on multiple devices). In some 
cases, it is even possible to exploit it using the same session when they can be processed by the 
application at the same time. The implications of this could be severe, depending on the nature of the 
NCC Group | Page 5 
© Copyright 2019 NCC Group 
application, as it opens up the potential for theft or use of unauthorised amounts of money, and 
provides a potential mechanism for fraud and other laundering activities. 
This issue can be found in many financial applications, such as a banking application that allows 
money transfer between multiple accounts, a shopping website in which a user can buy multiple items 
at the same time, or a commercial website that allows its users to earn and transfer their reward points. 
Some applications may even prevent a user from having a negative value in their account by replacing 
negative values with 0. If the application in the above example had this feature, the user could 
potentially gain £100. 
Concurrency issues may also affect discount voucher codes which can only be used once or twice. As 
a result, it might be possible to use a one-time promotion code multiple times by exploiting this issue. 
2.1.2 Changing the Order upon Payment Completion 
Applications that allow users to change their order while paying for an item can also be vulnerable 
when there is no verification at the end of the process. Although race conditions in changing the 
shopping basket while payment is being processed seem a little tricky, often there is no need for this, 
especially if the payment page is not part of the application but is a third-party website or an external 
module. In this case, the order can be changed while the user is on the payment page and before 
clicking the “pay” button to complete the payment. Changing items in the basket, shipping method and 
posting address, quantity of items and so forth can affect the final price while the application still uses 
the initial cheaper price. 
The following case shows an example of this vulnerability which was seen in a production website: 
A cheap item was selected and added to the basket. The user then went to the checkout page to pay 
for the selected item. At this stage, without closing the payment page, the user opened the main 
website in a new browser tab (to use the same session token) and added other and more expensive 
items to the basket. After doing this, the user went to the initial checkout page, which was open in the 
previous browser tab, to complete payment for the initial item. When the order was completed, all items 
in the basket were shown as paid in the final receipt. The user could buy additional items for free, while 
only paying for the initial item. 
Figure 2: An example of changing the order upon payment completion 
This vulnerability may also exist in the deposit process when an application can hold user balances. 
NCC Group has also encountered a rare scenario in which an application validated the input values 
and stored them in the session regardless of the validation result. In this case, the application did not 
go to the next stage when an input value was invalid. However, if a user went to the next stage by 
providing valid values, and then replayed the previous request with invalid values, the application 
stored the invalid values in the session and did not validate them any more as the user had already 
passed that stage. This caused severe logical issues for the application. 
NCC Group | Page 6 
© Copyright 2019 NCC Group 
2.1.3 Changing the Order after Payment Completion 
Updating details in a completed order, a generated invoice or quote can lead to financial loss. This can 
happen when an application does not verify the status of a completed transaction.  
As a result, it might be possible to add more items to an already completed order, modify existing items 
to abuse an existing offer, or change other details without paying an additional fee. 
The following case shows an example of this vulnerability which was seen in a production website: 
An insurance certificate was generated for a cheap vehicle with wrong details to reduce the insurance 
cost. After the order was completed, the previously sent requests were modified and replayed to 
bypass checks that were applied in order to identify the status of an insurance application. As a result, 
it was possible to change details within a paid insurance certificate to include more expensive vehicles 
or to change the expiry time without paying an additional fee. 
2.2 Parameter Manipulation  
CWE: 20 , 691 , 693 , 179 , 345 , 807 , 115 , 133 , 166 , 167 , 168 , 171, 915 
Parameter manipulation is a key technique for exploiting many of the security issues outlined in this 
paper. Below we discuss the most interesting parameters that should be considered and tested during 
an assessment of a financial application. 
2.2.1 Price Manipulation 
Price manipulation is an important test for any e-commerce applications in which the user can 
purchase a product. Applications normally send the price data to the payment pages, especially when 
the payment module is not part of the web application and therefore does not have access to user 
sessions or the database. It is also possible to find applications that send the price data upon selecting 
an item to add it to the basket. 
Sometimes it is possible to buy the same item cheaper or even for free by manipulating its price. 
Although nowadays it is very rare to find an application that accepts negative numbers via the price 
fields, this always needs to be tested as it may change the application flow completely. 
The following interesting example has been seen by NCC Group in recent years: 
The e-commerce site’s “add to basket” mechanism contained a “price” parameter in a hidden field, but 
the application ignored a manipulated price in the request and used the correct value instead. 
However, it was found later that by adding a number of sale items (items with additional discounts) to 
the basket, the application started using the price parameter within the request, and allowed price 
manipulation and negative values (see the “Dynamic Prices, Prices with Tolerance, or Referral 
Schemes” section for more information). 
Sometimes, when the application is badly implemented, it is possible to change the price value on the 
callback from the payment server (which goes through the user’s browser and not via the backend 
APIs). In this case, the user can alter the price before going to the payment page, and after completing 
the transaction the price in the callback URL will be changed to reflect its initial value. The user could 
later ask for a refund and gain this money. Although it is rare to see a vulnerable application like this 
nowadays, it is always worth checking for this type of vulnerability. 
2.2.2 Currency Manipulation 
Although an e-commerce website may not accept different currencies, payment applications normally 
accept them, and they generally require the currency parameter to be specified in the initial request. If 
a website does not validate the currency parameter upon completion of a transaction, a user can cheat 
by depositing money in a currency which has a much lower value than the requested currency. The 
following example shows a badly-implemented PayPal payment method that could be exploited: 
A user makes a payment of £20 to a website, using the PayPal payment option. The request that the 
website sent to the PayPal website was intercepted and the currency parameter was changed to “INR” 
(Indian Rupee) from “GBP” (British Pound). After completing the transaction on the PayPal website 
NCC Group | Page 7 
© Copyright 2019 NCC Group 
with 20 Indian Rupees, the website authorised the transaction without checking the currency, and £20 
was deposited in the user’s account while only £0.22 was withdrawn from the PayPal account. 
Figure 3: Paying less by currency manipulation 
2.2.3 Quantity Manipulation 
Websites calculate a final price based on the quantity of items purchased. Therefore, it may be possible 
for this parameter to be manipulated to contain small or negative values, to affect the price on the final 
payment page.  
The website may remove items that have zero or negative values within the quantity parameters. In 