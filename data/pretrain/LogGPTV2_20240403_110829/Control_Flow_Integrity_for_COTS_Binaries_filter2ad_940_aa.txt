title:Control Flow Integrity for COTS Binaries
author:Mingwei Zhang and
R. Sekar
Control Flow Integrity for COTS Binaries
Mingwei Zhang and R. Sekar, Stony Brook University
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4Control Flow Integrity for COTS Binaries ∗
Mingwei Zhang and R. Sekar
Stony Brook University
Stony Brook, NY, USA.
Abstract
Control-Flow Integrity (CFI) has been recognized as an
important low-level security property.
Its enforcement
can defeat most injected and existing code attacks, in-
cluding those based on Return-Oriented Programming
(ROP). Previous implementations of CFI have required
compiler support or the presence of relocation or debug
information in the binary. In contrast, we present a tech-
nique for applying CFI to stripped binaries on x86/Linux.
Ours is the ﬁrst work to apply CFI to complex shared
libraries such as glibc. Through experimental evalu-
ation, we demonstrate that our CFI implementation is
effective against control-ﬂow hijack attacks, and elimi-
nates the vast majority of ROP gadgets. To achieve this
result, we have developed robust techniques for disas-
sembly, static analysis, and transformation of large bina-
ries. Our techniques have been tested on over 300MB of
binaries (executables and shared libraries).
Introduction
1
Since its introduction by Abadi et. al. [1, 2], Control-
Flow Integrity (CFI) has been recognized as an impor-
tant low-level security property. Unlike address-space
randomization [24, 5] and stack cookies [12, 17], CFI’s
control-ﬂow hijack defense is not vulnerable to the re-
cent spate of information leakage and guessing attacks
[40, 37, 16]. Unlike code injection defenses such as
DEP (data execution prevention), CFI can protect from
existing code attacks such as return-oriented program-
ming (ROP) [38, 9, 49] and jump-oriented programming
(JOP) [10, 7]. In addition to exploit defense, CFI pro-
vides a principled basis for building other security mech-
anisms that are robust against low-level code attacks, as
evidenced by its application in software fault isolation
[27, 47] and sandboxing of untrusted code [15, 46].
An important feature of CFI is that it can be meaning-
∗This work was supported in part by AFOSR grant FA9550-09-1-
0539, NSF grant CNS-0831298, and ONR grant N000140710928.
fully enforced on binaries. Indeed, some applications of
CFI, such as sandboxing untrusted code, explicitly target
binaries. Most existing CFI implementations, including
those in Native Client [46], Pittsﬁeld [27], Control-ﬂow
locking [6] and many other works [22, 3, 42, 4, 36] are
implemented within compiler tool chains. They rely on
information that is available in assembly code or higher
levels, but unavailable in COTS binaries. The CFI imple-
mentation of Abadi et al [2] relies on relocation informa-
tion. Although this information is included in Windows
libraries that support ASLR, UNIX systems (and specif-
ically, Linux systems) rely on position-independent code
for randomization, and hence do not include relocation
information in COTS binaries. We therefore develop a
new approach for enforcing CFI on COTS binaries with-
out relocation or other high-level information.
Despite operating with less information, the security
and performance provided by our approach are compara-
ble to that of the existing CFI implementations. More-
over, our implementation is robust enough to handle
complex executables as well as shared libraries. We be-
gin by summarizing our approach and results.
1.1 CFI for COTS Binaries
We present the ﬁrst practical approach for CFI enforce-
ment that scales to large binaries as well as shared
libraries without requiring symbol, debug, or reloca-
tion information. We have developed techniques that
cope with the challenges presented by static analysis
and transformation of large programs, including those
of Firefox, Adobe Acrobat 9, GIMP-2.6 and glibc.
In
our experiments, we have transformed and tested over
300MB of binaries. Some of the key features of our de-
sign are:
• Modularity: Each shared library and executable is in-
strumented independently to enforce CFI. Our tech-
nique ensures that when an executable is loaded and
run, CFI property is enforced globally across the exe-
cutable and all the shared libraries used by it.
USENIX Association  
22nd USENIX Security Symposium  337
1
• Transparency: If our instrumentation made even the
smallest changes to (stack, heap or static) mem-
ory used by a program, it can cause complex pro-
grams to fail or function differently. As an exam-
ple, consider saved return addresses on the program
stack. Since code rewriting causes instruction loca-
tions to change, a straight-forward implementation
would change these saved return addresses. Unfortu-
nately, programs use this information in several ways:
– Position-independent code (PIC) computes the lo-
cations of static variables from return address.
– C++ exception handler uses return addresses to
identify the function (or more speciﬁcally, the try-
block within the function) to which the exception
needs to be dispatched.
– A program may use the return address (and any
other code pointer) to read constant data stored in
the midst of code, or more generally, its own code.
Changes to saved return address would cause these
uses to break, thus leading to application failure. For
this reason, our instrumentation has been designed to
provide full transparency.
The principal challenge in achieving full transparency
is one of performance. To address this challenge, we
have developed new optimization techniques.
• Compiler independence and support for hand-coded
assembly: Our approach does not make strong as-
sumptions regarding the compiler used to generate
a binary, such as the the conventions for generating
jump tables. Indeed, our code has been tested with
hand-written assembly, such as that found in low-
level libraries (e.g., glibc). It has been tested with the
two popular compilers on Linux, GCC and LLVM.
1.2 Quality of Protection
An ideal CFI implementation will restrict program ex-
ecution to exactly the set of program paths that can be
taken.
In practice, due to the fact that targets of indi-
rect control-ﬂow (ICF) transfers are difﬁcult to predict,
CFI implementations enforce a conservative approxima-
tion of ideal CFI. Different techniques enforce different
approximations, so a natural and important question con-
cerns the relative strengths of these techniques. To an-
swer this question, we propose a simple metric, called
average indirect target reduction (AIR) which quantiﬁes
the fraction of possible indirect targets eliminated by a
CFI technique. To compute AIR, we start with the frac-
tion of possible targets eliminated by a CFI technique for
each ICF transfer instruction, and average this number
across all ICF transfer instructions. (See Deﬁnition 1 on
Page 6.)
AIRs of several types of CFI are shown in Figure 1.
For the base case of an unprotected program, every byte
CFI
type
null
instr
bundle
reloc
strict
bin
Description
no CFI protection
Restrict ICFs to valid instruction boundaries
Instructions grouped into 32-byte bundles [46].
All ICFs must target the start of a bundle.
CFI based on relocation information. Indirect
calls/jumps to target any location present in
relocation table, returns to target a location
immediately following a call.
Enforces property closely matching reloc-CFI
but does not require relocation info.
Generalizes strict-CFI to avoid special
treatment of threads and exceptions
AIR
(%)
0.00
79.27
96.04
99.13
99.08
98.86
Figure 1: CFI ﬂavors and strengths on SPEC CPU2006.
address in the code is a possible ICF target, and the AIR
is 0%. We then deﬁne a coarse form of CFI called instr-
CFI that limits ICF transfers to instruction boundaries. It
eliminates attacks that jump to the middle of instructions.
Bundle-CFI is another coarse form of CFI used in Pitts-
Field [27] and Native Client [46]. It limits ICF transfers
to addresses that are multiples of 16 (PittsField) or 32
(Native Client).
The next version, reloc-CFI, captures the strength of
CFI implementation described by Abadi et al [2]. It relies
on relocation information in binaries. (See Section 4.2
for more discussion).
Large and complex binaries contain several exceptions
to the simple model of calls, returns and indirect jumps
embodied in many CFI works:
• Returns used as jumps. Return instructions are some
times used to jump to functions by pushing their ad-
dress on the stack and returning. Examples include
code for thread context switching, signal handling,
etc.
• Returns to caller function, but not a return address.
Some times, returns go back to a caller, but don’t tar-
get a return address, e.g., due to C++ exceptions.
• Jumps to return addresses. Functions such as longjmp
use an indirect jump that targets a return address.
• Runtime generation of new ICF targets. Some appli-
cations create ICF targets on the ﬂy using dlopen to
add additional libraries at any point during runtime.
• Indirect jumps using arithmetic operations. Low-
level assembly code can contain ICF targets that are
computed using multiple arithmetic operations.
To cope with these exceptions, our approach, called bin-
CFI, avoids making any of the common assumptions re-
garding ICF targets in general. Instead, it relies on static
analysis and a very conservative set of assumptions so
that it can scale to large executables and libraries.
Note that bin-CFI eliminates about 99% of possible
indirect targets. Moreover, it experiences only a small
338  22nd USENIX Security Symposium 
USENIX Association
2
decrease in AIR as compared to reloc-CFI. This provides
evidence that our approach achieves compatibility with
COTS binaries without incurring a major reduction in
its quality of protection.
To further pinpoint the sources of the slight decrease in
AIR, we implemented a stricter version of bin-CFI called
strict-CFI. It uses the same binary analysis techniques as
bin-CFI, but instead of providing a general way to han-
dle exceptions and threads, it simply uses a relaxed pol-
icy for a few speciﬁc instructions in system libraries that
perform thread switching or exception unwinding. Note
that the strict-CFI has an AIR very close to that of reloc-
CFI, pointing out that the sources of AIR decrease are the
exceptions that need to be made in order to support large
and complex binaries. Effective precision loss incurred
by our static analysis is very small (0.05%) as compared
to the use of relocation information.
1.2.1 Experimental Evaluation
We present a detailed experimental evaluation of our
technique. Key points include:
• Good performance: Techniques for achieving trans-
parency and modularity can exact a price in terms of
performance. We describe several optimization tech-
niques in Section 6 that have reduced the overhead to
about 8.54% across the SPEC CPU benchmark suite.
• ROP and JOP defense: As our AIR measurements
indicate, about 99% of possible ICF targets have been
eliminated by bin-CFI. Moreover, on the SPEC CPU
2006 benchmark, our technique also eliminated about
93% of ROP gadgets that were found by the popular
ROP gadget discovery tool ROPGadget [35].
• Control-ﬂow hijack detection. Our results show that
bin-CFI defeats the vast majority of control-ﬂow hi-
jack attacks from the RIPE benchmark [45].
2 Disassembly
2.1 Background
There are two basic techniques for disassembly: linear
disassembly and recursive disassembly. Linear disas-
sembly starts by disassembling the ﬁrst instruction in a
given segment. Once an instruction at an address l is
disassembled, and is determined to have a length of k
bytes, disassembly proceeds to the instruction starting at
address l + k. This process continues to the end of the
segment.
Linear disassembly can be confused by “gaps” in code
that consist of data or alignment-related padding. These
gaps will be interpreted by linear disassembly as in-
structions and decoded, resulting an erroneous disas-
sembly. With variable-length instruction sets such as
those of x86, incorrect disassembly of one instruction
can cause misidentiﬁcation of the start of the next in-
struction; hence these errors can cascade even past the
end of gaps.
Recursive disassembly uses a different strategy, one
that is similar to a depth-ﬁrst construction of program’s
control-ﬂow graph (CFG). It starts with a set of code
entry points speciﬁed in the binary. For an executable,
there may be just one such entry point speciﬁed, but for
shared libraries, the beginning of each exported functions
is speciﬁed as well. The technique starts by disassem-
bling the instruction at an entry point. Subsequent in-
structions are disassembled in a manner similar to linear
disassembly. The difference with linear disassembly oc-
curs when control-ﬂow transfer instructions are encoun-
tered. Speciﬁcally, (a) each target identiﬁed by a direct
control-ﬂow transfer instruction is added to the list of
entry points, and (b) disassembly stops at unconditional
control-ﬂow transfers.
Unlike linear disassembly, recursive disassembly does
not get confused by gaps in code, and hence does not
produce incorrect disassembly1. However, it fails to dis-
assemble code that is reachable only via ICF transfers.
Incompleteness of recursive disassembly can be miti-
gated by providing it a list of all targets that are reachable
via ICF transfers. This list can be computed from relo-
cation information. However, in stripped binaries, which
typically do not contain relocation information, recursive
disassembly can fail to disassemble signiﬁcant parts of
the code.
2.2 Our Disassembly Technique
The above discussion on using relocation information to
complete recursive disassembly suggests the following
strategy for disassembly:
• Develop a static analysis to compute ICF targets.
• Modify recursive disassembly to make use of these as
possible entry points.
Unfortunately, the ﬁrst step will typically result in a su-
perset of possible ICF targets: some of these locations
don’t represent code addresses. Thus, blindly following
ICF targets computed by static analysis can lead to incor-
rect disassembly. We therefore use a different strategy,
one that combines linear and recursive disassembly tech-
niques, and uses static analysis results as positive (but not
deﬁnitive) evidence about correctness of disassembly.
Our approach starts by eagerly disassembling the
entire binary using linear disassembly, which is then
checked for errors. The error checking step primarily
relies on the steps used in recursive disassembly. Finally,
1This does rely on some assumptions: (a) calls must return to the
instruction following the call, (b) all conditional branches are followed
by valid code, and (c) all targets of (conditional as well as uncondi-
tional) direct control-ﬂow transfers represent legitimate code. These