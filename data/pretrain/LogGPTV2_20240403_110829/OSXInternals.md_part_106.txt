$ zprint | grep kalloc
kalloc.16 16 484K 615K 30976 39366 26998 4K 256 C
kalloc.32 32 1452K 1458K 46464 46656 38240 4K 128 C
kalloc.64 64 2404K 2916K 38464 46656 24429 4K 64 C
kalloc.128 128 1172K 1728K 9376 13824 2987 4K 32 C
kalloc.256 256 692K 1024K 2768 4096 2449 4K 16 C
kalloc.512 512 916K 1152K 1832 2304 1437 4K 8 C
kalloc.1024 1024 804K 1024K 804 1024 702 4K 4 C
kalloc.2048 2048 1504K 2048K 752 1024 663 4K 2 C
kalloc.4096 4096 488K 4096K 122 1024 70 4K 1 C
kalloc.8192 8192 2824K 32768K 353 4096 307 8K 1 C
kalloc.large 60648 2842K 4360K 48 73 48 59K 1
Note that the zone named kalloc.large in the zprint output in Figure 846 is not realit is a fake zone
used for reporting on too-large-for-a-zone objects that were allocated through kmem_alloc().
The kalloc family provides malloc-style functions, along with a version that attempts memory allocation
without blocking.
void *
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 115 of 135
kalloc(vm_size_t size);
void *
kalloc_noblock(vm_size_t size);
void *
kalloc_canblock(vm_size_t size, boolean_t canblock);
void
krealloc(void **addrp, vm_size_t old_size, vm_size_t new_size,
simple_lock_t lock);
void
kfree(void *data, vm_size_t size);
Both kalloc() and kalloc_noblock() are simple wrappers around kalloc_canblock(), which prefers
to get memory through zalloc_canblock(), unless the allocation size is too
largekalloc_max_prerounded (8193 bytes by default or more). krealloc() uses kmem_realloc() if the
existing allocation is already too large for a kalloc zone. If the new size is also too large, krealloc() uses
kmem_alloc() to allocate new memory, copies existing data into it using bcopy(), and frees the old
memory. If the new memory fits in a kalloc zone, krealloc() uses zalloc() to allocate new memory. It
still must copy existing data and free the old memory, since there is no "zrealloc" function.
8.16.5. The OSMalloc Family
The file osfmk/kern/kalloc.c implements another family of memory allocation functions: the
OSMalloc family.
OSMallocTag
OSMalloc_Tagalloc(const char *str, uint32_t flags);
void
OSMalloc_Tagfree(OSMallocTag tag);
void *
OSMalloc(uint32_t size, OSMallocTag tag);
void *
OSMalloc_nowait(uint32_t size, OSMallocTag tag);
void *
OSMalloc_noblock(uint32_t size, OSMallocTag tag);
void
OSFree(void *addr, uint32_t size, OSMallocTag tag);
The key aspect of these functions is their use of a tag structure, which encapsulates certain properties of
allocations made with that tag.
#define OSMT_MAX_NAME 64
typedef struct _OSMallocTag_ {
queue_chain_t OSMT_link;
uint32_t OSMT_refcnt;
uint32_t OSMT_state;
uint32_t OSMT_attr;
char OSMT_name[OSMT_MAX_NAME];
} *OSMallocTag;
Here is an example use of the OSMalloc functions:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 116 of 135
#include 
OSMallocTag my_tag;
void
my_init(void)
{
my_tag = OSMalloc_Tagalloc("My Tag Name", OSMT_ATTR_PAGEABLE);
...
}
void
my_uninit(void)
{
OSMalloc_Tagfree(my_tag);
}
void
some_function(...)
{
void *p = OSMalloc(some_size, my_tag);
}
OSMalloc_Tagalloc() calls kalloc() to allocate a tag structure. The tag's name and attributes are set
based on the arguments passed to OSMalloc_Tagalloc(). The tag's reference count is initialized to one,
and the tag is placed on a global list of tags. Thereafter, memory is allocated using one of the OSMalloc
allocation functions, which in turn uses one of kalloc(), kalloc_noblock(), or kmem_alloc_pageable
() for the actual allocation. Each allocation increments the tag's reference count by one.
8.16.6. Memory Allocation in the I/O Kit
The I/O Kit provides its own interface for memory allocation in the kernel.
void *
IOMalloc(vm_size_t size);
void *
IOMallocPageable(vm_size_t size, vm_size_t alignment);
void *
IOMallocAligned(vm_size_t size, vm_size_t alignment);
void *
IOMallocContiguous(vm_size_t size, vm_size_t alignment,
IOPhysicalAddress *physicalAddress);
void
IOFree(void *address, vm_size_t size);
void
IOFreePageable(void *address, vm_size_t size);
void
IOFreeAligned(void *address, vm_size_t size);
void
IOFreeContiguous(void *address, vm_size_t size);
IOMalloc() allocates general-purpose, wired memory in the kernel map by simply calling kalloc().
Since kalloc() can block, IOMalloc() must not be called while holding a simple lock or from an
interrupt context. Moreover, since kalloc() offers no alignment guarantees, IOMalloc() should not be
called when a specific alignment is desired. Memory allocated through IOMalloc() is freed through
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 117 of 135
IOFree(), which simply calls kfree(). The latter too can block.
Pageable memory with alignment restriction is allocated through IOMallocPageable(), whose alignment
argument specifies the desired alignment in bytes. The I/O Kit maintains a bookkeeping data structure
(gIOKitPageableSpace) for pageable memory.
// iokit/Kernel/IOLib.c
enum { kIOMaxPageableMaps = 16 };
enum { kIOPageableMapSize = 96 * 1024 * 1024 };
enum { kIOPageableMaxMapSize = 96 * 1024 * 1024 };
static struct {
UInt32 count;
UInt32 hint;
IOMapData maps[kIOMaxPageableMaps];
lck_mtx_t *lock;
} gIOKitPageableSpace;
The maps array of gIOKitPageableSpace contains submaps allocated from the kernel map. During
bootstrap, the I/O Kit initializes the first entry of this array by allocating a 96MB (kIOPageableMapSize)
pageable map. IOMallocPageable() calls IOIteratePageableMaps(), which first attempts to allocate
memory from an existing pageable map, failing which it fills the next slotup to a maximum of
kIOPageableMaps slotsof the maps array with a newly allocated map. The eventual memory allocation is
done through kmem_alloc_pageable(). When such memory is freed through IOFreePageable(), the
maps array is consulted to determine which map the address being freed belongs to, after which
kmem_free() is called to actually free the memory.
Wired memory with alignment restriction is allocated through IOMallocAligned(), whose alignment
argument specifies the desired alignment in bytes. If the adjusted allocation size (after accounting for the
alignment) is equal to or more than the page size, IOMallocAligned() uses kernel_memory_allocate
(); otherwise, it uses kalloc(). Correspondingly, the memory is freed through kmem_free() or kfree().
IOMallocContiguous() allocates physically contiguous, wired, alignment-restricted memory in the
kernel map. Optionally, this function returns the physical address of the allocated memory if a non-NULL
pointer for holding the physical address is passed as an argument. When the adjusted allocation size is less
than or equal to a page, physical contiguity is trivially present. In these two cases, IOMallocContiguous
() uses kalloc() and kernel_memory_allocate(), respectively, for the underlying allocation. When
multiple physical contiguous pages are requested, the allocation is handled by kmem_alloc_contig().
Like vm_page_alloc(), this function also causes memory allocation directly from the free list. It calls
kmem_alloc_contig(), which in turn calls vm_page_find_contiguous() [osfmk/vm/vm_resident.c].
The latter traverses the free list, inserting free pages into a private sublist sorted on the physical address.
As soon as a contiguous range large enough to fulfill the contiguous allocation request is detected in the
sublist, the function allocates the corresponding pages and returns the remaining pages collected on the
sublist to the free list. Because of the free list sorting, this function can take a substantial time to run when
the free list is very largefor example, soon after bootstrapping on a system with a large amount of physical
memory.
When the caller requests the newly allocated memory's physical address to be returned,
IOMallocContiguous() first retrieves the corresponding physical page from the pmap layer by calling
pmap_find_phys() [osfmk/ppc/pmap.c]. If the DART IOMMU[25] is present and active on the system,
the address of this page is not returned as is. As we noted earlier, the DART translates I/O Kit-visible 32-
bit "physical for I/O" addresses to 64-bit "true" physical addresses. Code running in the I/O Kit
environment cannot even see the true physical address. In fact, even if such code attempted to use a 64-bit
physical address, the DART would not be able to translate it, and an error would occur.
[25] We will discuss the DART in Section 10.3.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 118 of 135
If the DART is active, IOMallocContiguous() calls it to allocate an appropriately sized I/O memory
rangethe address of this allocation is the "physical" address that is returned. Moreover,
IOMallocContiguous() has to insert each "true" physical page into the I/O memory range by calling the
DART's "insert" function. Since IOFreeContiguous() must call the DART to undo this work,
IOMallocContiguous() saves the virtual address and the I/O address in an _IOMallocContiguousEntry
structure. The I/O Kit maintains these structures in a linked list. When the memory is freed, the caller
provides the virtual address, using which the I/O Kit can search for the I/O address on this linked list.
Once the I/O address is found, the structure is removed from the list and the DART allocation is freed.
// iokit/Kernel/IOLib.c
struct _IOMallocContiguousEntry
{
void *virtual; // caller-visible virtual address
ppnum_t ioBase; // caller-visible "physical" address
queue_chain_t link; // chained to other contiguous entries
};
typedef struct _IOMallocContiguousEntry _IOMallocContiguousEntry;
8.16.7. Memory Allocation in the Kernel's BSD Portion
The BSD portion of the kernel provides _MALLOC() [bsd/kern/kern_malloc.c] and _MALLOC_ZONE()
[bsd/kern/kern_malloc.c] for memory allocation. The header file bsd/sys/malloc.h defines the
MALLOC() and MALLOC_ZONE() macros, which are trivial wrappers around _MALLOC() and _MALLOC_ZONE
(), respectively.
void *
_MALLOC(size_t size, int type, int flags);
void
_FREE(void *addr, int type);
void *
_MALLOC_ZONE(size_t size, int type, int flags);
void
_FREE_ZONE(void *elem, size_t size, int type);
The BSD-specific allocator designates different types of memory with different numerical values, where
the "memory type" (the type argument), which is specified by the caller, represents the purpose of the
memory. For example, M_FILEPROC memory is used for open file structures, and M_SOCKET memory is
used for socket structures. The various known types are defined in bsd/sys/malloc.h. The value M_LAST
is one more than the last known type's value. This allocator is initialized during kernel bootstrap by a call
to kmeminit() [bsd/kern/kern_malloc.c], which goes through a predefined array of kmzones
structures (struct kmzones [bsd/kern/kern_malloc.c]). As shown in Figure 847, there is one
kmzones structure for each type of memory supported by the BSD allocator.
Figure 847. Array of memory types supported by the BSD memory allocator
// bsd/kern/kern_malloc.c
char *memname[] = INITKMEMNAMES;
struct kmzones {
size_t kz_elemsize;
void *kz_zalloczone;
#define KMZ_CREATEZONE ((void *)-2)
#define KMZ_LOOKUPZONE ((void *)-1)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 119 of 135
#define KMZ_MALLOC ((void *)0)
#define KMZ_SHAREZONE ((void *)1)
} kmzones[M_LAST] = {
#define SOS(sname) sizeof (struct sname)
#define SOX(sname) -1
-1, 0, /* 0 M_FREE */
MSIZE, KMZ_CREATEZONE, /* 1 M_MBUF */
0, KMZ_MALLOC, /* 2 M_DEVBUF */
SOS(socket), KMZ_CREATEZONE, /* 3 M_SOCKET */
SOS(inpcb), KMZ_LOOKUPZONE, /* 4 M_PCB */
M_MBUF, KMZ_SHAREZONE, /* 5 M_RTABLE */
...
SOS(unsafe_fsnode),KMZ_CREATEZONE, /* 102 M_UNSAFEFS */
#undef SOS
#undef SOX
};
...
Moreover, each type has a string name. These names are defined in bsd/sys/malloc.h in another array.
// bsd/sys/malloc.h
#define INITKMEMNAMES { \
"free", /* 0 M_FREE */ \
"mbuf", /* 1 M_MBUF */ \
"devbuf", /* 2 M_DEVBUF */ \
"socket", /* 3 M_SOCKET */ \
"pcb", /* 4 M_PCB */ \
"routetbl", /* 5 M_RTABLE */ \
...
"kauth", /* 100 M_KAUTH */ \
"dummynet", /* 101 M_DUMMYNET */ \
"unsafe_fsnode" /* 102 M_UNSAFEFS */ \
}
...
As kmeminit() iterates over the array of kmzones, it analyses each entry's kz_elemsize and
kz_zalloczone fields. Entries with kz_elemsize values of -1 are skipped. For the other entries, if
kz_zalloczone is KMZ_CREATEZONE, kmeminit() calls zinit() to initialize a zone using kz_elemsize
as the size of an element of the zone, 1MB as the maximum memory to use, PAGE_SIZE as the allocation
size, and the corresponding string in the memname array as the zone's name. The kz_zalloczone field is
set to this newly initialized zone.
If kz_zalloczone is KMZ_LOOKUPZONE, kmeminit() calls kalloc_zone() to simply look up the kernel
memory allocator (kalloc) zone with the appropriate allocation size. The kz_zalloczone field is set to the
found zone or to ZONE_NULL if none is found.
If kz_zalloczone is KMZ_SHAREZONE, the entry shares the zone with the entry at index kz_elemsize in
the kmzones array. For example, the kmzones entry for M_RTABLE shares the zone with the entry for
M_MBUF. kmeminit() sets the kz_zalloczone and kz_elemsize fields of a KMZ_SHAREZONE entry to those
of the "shared with" zone.
Thereafter, _MALLOC_ZONE() uses its type argument as an index into the kmzones array. If the specified
type is greater than the last known type, there is a kernel panic. If the allocation request's size matches the
kz_elemsize field of kmzones[type], _MALLOC_ZONE() calls the Mach zone allocator to allocate from
the zone pointed to by the kz_zalloczone field of kmzones[type]. If their sizes do not match,
_MALLOC_ZONE() uses kalloc() or kalloc_noblock(), depending on whether the M_NOWAIT bit is clear
or set, respectively, in the flags argument.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 120 of 135
Similarly, _MALLOC() calls kalloc() or kalloc_noblock() to allocate memory. The type argument is
not used, but if its value exceeds the last known BSD malloc type, _MALLOC() still causes a kernel panic.
_MALLOC() uses a bookkeeping data structure of its own to track allocated memory. It adds the size of this
data structure (struct _mhead) to the size of the incoming allocation request.
struct _mhead {
size_t mlen; // used to record the length of allocated memory
char dat[0]; // this is returned by _MALLOC()
};
Moreover, if the M_ZERO bit is set in the flags argument, _MALLOC calls bzero() to zero-fill the memory.
8.16.8. Memory Allocation in libkern's C++ Environment
As we noted in Section 2.4.4, libkern defines OSObject as the root base class for the Mac OS X kernel.
The new and delete operators for OSObject call kalloc() and kfree(), respectively.
// libkern/c++/OSObject.cpp
void *
OSObject::operator new(size_t size)
{
void *mem = (void *)kalloc(size);
...
return mem;
}
void
OSObject::operator delete(void *mem, size_t size)
{
kfree((vm_offset_t)mem, size);
...
}
8.17. Memory-Mapped Files
Mac OS X provides the mmap() system call for mapping files, character devices, and POSIX shared
memory descriptors into the caller's address space. Moreover, anonymous memory can be mapped by
setting MAP_ANON in the flags argument to mmap().
void *
mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset);
When mmap() is used to map a regular file or anonymous memory, the mapping is backed by an on-disk
object as follows.
Anonymous memory is always backed by swap space.
 A regular file's mapping is backed by the file itself if MAP_SHARED was specified in the flags
argument to mmap(). This means that any modifications made to the mapping are written to the
original file when the corresponding pages are evicted.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007