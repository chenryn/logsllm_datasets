·动态内存管理：该做什么和UNIX不让你做什么。
·文件锁：协调锁、共享文件的封锁区和避免造成死锁现象，
·dbm数据库：UNIX提供的一个数据库方面的函数库
7.1内存管理
在任何计算机系统上内存都是珍稀资源。不管插了多少内存条，它总是不够用，在许非很
久远的过去，人们甚至曾经认为一兆字节的内存已经超出了任何人的实际需要，可如今，6-+倍
下此的内存倒被看做是单用户个入电脑的最低要求了。许多系统上的内存配置己经大大超出了
这个数字。
从最早期的操作系统版本开始，UNIX就以一种非常聪明的办法管理着内存。UNIX应川
序决不允许直接访问物理内存。也许应用程序看起来好象可以这样做，但应用积序看到的共足
一个精心控制的假象而已。
UNIX提供给进程的永远是一个平整的连续的内存模型—这就是每个进程都能够“看见”
的属于它自已的那块内存区域。几乎所有版本的UNIX操作系统都提供了内存保护机制，它保证
不正确的（或者恶意的）程序无法覆盖属于其他进释或者属于操作系统的内存。在一般情况下，
分配给一个进程的内存既不能被任何其他的进程读，也不能被它们写。几乎所有版本的UNIX都
使用了硬件机制实施这种内存使用方面的私用性。
7.1.1简单的内存分配机制
我们可以通过C语言标准库中的malloc调用来分配内存，它的定义如下所小：
include 
void *malloc( s1ze_t size );
请注意，X/Open技术规范在这里与某些UNIX的具体版本有一个差异，就是它不要求有一个
专用的malloc.h头文作。还要一个需要注意的问题，指定待分配内存字节数的size参数并不是一
个简单的int整数，虽然它往往相当于一个不带符号的整数类型。
在大多数UNIX系统上，我们可以申请分配大量的内存，请看下面的程序：
动手试试：简单的内存分配操作
加入jaVva编程群：524621833
---
## Page 215
第7章数据营理
197
把下面这个memory1.c程序敲进计算机
dinclude 
include 
#inrlude 
#include 
#include 
define A_MEGABYTE (1024 * 1024)
int main(1
char *some_nenory;
size_t size_to_allocate =A_MEGABYTE;
int megs_obtained = 0;
while (megs_obtained
invlude 
include 
define ONE_x (1024)
int main()
char *sone_metory:
int
size_to_allocate=ONE_K；
int
negs_obtained0;
int
ks_obtained = 0;
while (1)(
for (ks_obtained=0;ks_obtained
#define ONE_K (1024)
int main()
加入jaVva编程群：524621833
---
## Page 219
第7章数据管理
201
if (sore_nmory = NULL1exit(EXIT_FA:LURE):
while(1)(
!,0\.±s
scan_ptr++:
exit (EXIT_SUCCESS) :
1
程序的输出很简单，如下所示：
memory4
segnentation fault (core furped1
操作注释：
UNIX的内存管理系统防止系统的其他部分受到这个内存滥用的影响。在确信一个行为恶劣
的程序（这就是一个）有可能损害其他程序时，UNIX立刻停止它的运行。
运行在一个UNIX系统上的每一个程序都只能看到它自己的内存映象，这个映象与其他程序
的不一样。只要操作系统知道物理内存是如何安排的，它不仅能够为用户程序管理内存，还可
以对用户程序提供隔离保护。
7.1.4空指针
现代的UNIX系统与MS-DOS不一样，它们对空指针的读写有着很强的戒备心理，但对这种
情况的实际处理过程不同版本有不同的做法。
动手试试：访问一个空指针
我们用memory5a.c程序来看看对它指针进行读写时会出境什么情况：
include 
include 
inelude 
int main()
printf(*A read from null $s\n*, sone_menory1:
sprintf(some_memory.“A write Lo null\n*);
exit (EXIT_SUCCESS):
程序的输出如下所示：
$memory5a
A rcad from null (nul1)
Soqmentation fault (core Gunped)
操作注释：
第-一个printf试图输出一个取自-个空指针的字符串，接下来的sprintf试图对一个空指针进
行写操作。在这种情况下，Linux容忍了读操作（这要感谢GNU的C语言库），让程序输出了一个
加入jaVa编程群：524621833
---
## Page 220
202
Linux程序设计
其实并不存在的字符串，这个字符串“神奇”地包含着“（nullo”等字符。但它对写操作就没
有那么宽容了，结果是终止了这个程序的运行。这在某些时候能够帮助我们追踪程序中的漏洞
我们可以再试一次，但这次我们不使用GNU的C语言库。我们发现读零地址的操作也不能进
行了。请看下面的memory5b.c程序：
inelude 
tinclude <stdlib.h:
int main()
char z = *Iconst char *10;
printf (*I read from loca*ior zero\n*) :
exit(EXIT_SUCCESS) ;