该命令列出了正在运行的容器:
```
docker ps
```
如果没有任何运行的容器，您应该有一个空白屏幕，标题为:
![Activity 1 — Utilizing the docker pull Command](img/image01_13a.jpg)
## 活动 2 —分析 Docker 命令行界面
通过在终端上键入`docker`，确保 Docker CLI 正在运行。
已经要求您演示到目前为止涵盖的命令。
让你熟悉 Docker 命令行界面。本活动的目标是通过运行列出的命令，以及在探索过程中通过操纵构建的容器寻求其他命令的帮助，来深入了解`docker-compose` CLI。目标是命令行界面足够灵活，能够在现实场景中使用它，例如运行自动化脚本。
1.  Docker 启动并运行了吗？在终端或命令行应用上键入`docker`。
2.  Search for the official Apache image using the CLI, using `docker search apache:`
    ![Activity 2 — Analyzing the Docker CLI](img/image01_14a.jpg)
3.  尝试使用`docker pull apache.`拉取映像
4.  使用`docker images.`确认映像在本地的可用性
5.  额外奖励:使用`docker run apache.`将映像作为容器运行
6.  奖励:停止容器使用`docker stop .`
7.  奖励:使用`docker rm .`删除容器和映像
# dock file 语法
每个 Docker 的形象都是从一个 Docker 档案开始的。要创建应用或脚本的映像，只需创建一个名为 **Dockerfile** 的文件。
### 注
它没有扩展名，以大写字母 d 开头。
Dockerfile 是一个简单的文本文档，其中编写了作为容器模板的所有命令。Dockerfile 总是以基本映像开始。它包含创建应用或运行脚本的步骤。
在我们构建之前，让我们快速看一下编写 Dockerfiles 的一些最佳实践。
一些最佳实践包括但不限于以下内容:
*   **关注点分离**:确保每个 Dockerfile 尽可能集中在一个目标上。这将使它更容易在多个应用中重用。
*   **避免不必要的安装**:这样可以降低复杂度，让映像和容器足够紧凑。
*   **重用已经构建的映像**:Docker Hub 上有几个已经构建和版本化的映像；因此，与其实现已经存在的映像，不如通过导入来重用。
*   **层数有限**:最少的层数可以让一个人拥有紧凑或者更小的体型。内存是构建映像和容器时要考虑的一个关键因素，因为这也会影响映像的消费者或客户端。
我们将简单地从 Python 和 JavaScript 脚本开始。这些语言的选择是基于它们的受欢迎程度和易于演示。
## 为 Python 和 JavaScript 示例编写 Dockerfiles
### 注
不需要关于所选语言的经验，因为它们旨在动态地展示任何语言如何采用容器化。
### 蟒蛇
在我们开始之前，创建一个新的目录或文件夹；让我们把它作为我们的工作空间。
打开目录运行`docker search python`。我们来挑选官方形象:`python`。官方映像在**官方**栏中有**【确定】** 的值:
![Python](img/image01_15a.jpg)
去[hub.docker.com](http://hub.docker.com)或者[store.docker.com](http://store.docker.com)搜索 python 得到正确的标签或者至少知道最新标签的 Python 映像是什么版本。我们将在*主题 D* 中更多地讨论标签。
映像标签应该是具有类似于`3.x.x`或`3.x.x-rc.`的语法的数字
创建一个名为`run.py`的文件，输入第一行如下:
```
print("Hello Docker - PY")
```
在同一文件夹级别创建一个新文件并命名为 **Dockerfile。**
### 注
我们没有文件扩展名。
在**文件**中增加以下内容:
```
FROM python
ADD . .
RUN ls
CMD python run.py
```
如前所述， **FROM** 命令指定了基础映像。
该命令也可以用于**继承**的观点。这意味着，如果包中已经存在映像，则不必在 Dockerfile 中包含额外的包安装。
**ADD** 命令将指定的源文件复制到映像文件系统中的目标位置。这意味着脚本的内容将被复制到指定的目录。
在这种情况下因为`run.py`和 Dockerfile 在同一个级别上，所以`run.py`被复制到我们正在构建的基础映像文件系统的工作目录中。
在构建映像时执行**运行**命令。`ls`在这里运行只是为了让我们看到映像文件系统的内容。
当基于我们将使用这个 Dockerfile 创建的映像运行容器时，使用 **CMD** 命令。这意味着在 Dockerfile 执行结束时，我们打算运行一个容器。
### JavaScript
退出上一个目录，新建一个目录。这个将演示一个节点应用。
在脚本中添加以下行并保存:
```
console.log("Hello Docker - JS")
```
运行`docker search node` -我们来挑选官方图片:`node`
记住官方形象在**官方**栏中有**【确定】**的值:
![JavaScript](img/image01_16a.jpg)
注意，node 是基于谷歌高性能、开源 JavaScript 引擎 V8 的 JavaScript 运行时。
前往[hub.docker.com](http://hub.docker.com)搜索节点获取正确的标签或者至少知道最新标签的节点映像是什么版本。
创建一个新的**文件**并添加以下内容:
这应该与脚本在同一文件级别。
```
FROM node
ADD . .
RUN ls
CMD node run.js
```
我们现在就讨论这些。
## 活动 3 —构建文档文件
通过在终端上键入`docker`，确保 Docker CLI 正在运行。
让你熟悉 Dockerfile 语法。本活动的目标是帮助理解和练习使用第三方映像和容器。这有助于更好地了解容器化对协作的影响。这通过构建已经存在的特性或资源来加快产品交付速度。
你被要求写一个简单的 Dockerfile 打印`hello-world`。
1.  Docker 启动并运行了吗？在终端或命令行应用上键入`docker`。
2.  创建一个新目录并创建一个新的 Dockerfile。
3.  编写一个包含以下步骤的 Dockerfile】
# 建筑映像
在我们开始构建映像之前，让我们先了解一下上下文。映像是一个独立的包，可以运行应用或分配的服务。映像是通过 Dockerfiles 构建的，docker files 是定义如何构建映像的模板。
容器被定义为运行时实例或映像版本。请注意，这将在您的计算机或主机上作为一个完全隔离的环境运行，这使得它对于测试等任务是一次性的和可行的。
准备好 Dockerfile 后，让我们进入 Python Dockerfile 目录并构建映像。
## Docker 建造
构建映像的命令如下:
```
docker build -t  
```
`-t`代表标签。``可以包括具体的标签，比如最新的。建议您这样做:始终标记映像。
**Dockerfile**的相对位置在这里将是一个`dot (.)`表示 docker file 与代码的其余部分在同一层；也就是说，它处于项目的根级别。否则，您将输入 Dockerfile 所在的目录。
例如，如果它在 Docker 文件夹中，你会有`docker build -t  docker`，或者如果它在高于根目录的文件夹中，你会有两个点。高两级是用三个点代替一个点。
### 注
终端上的输出，并与 Dockerfiles 上写的步骤进行比较。您可能希望有两个或多个 Dockerfile 来配置不同的情况，例如，一个 docker file 用于构建生产就绪的应用，另一个用于测试。不管你有什么理由，Docker 都有解决办法。
默认的 Dockerfile 是，是的，Dockerfile。按照最佳实践，任何额外的一个被命名为`Dockerfile.`，比如说`Dockerfile.dev`。
要使用默认文件之外的 Dockerfile 构建映像，请运行以下命令:`docker build -f Dockerfile. -t  `
### 注
如果您使用对 Dockerfile 的更改来重建映像，而不指定不同的标签，将会构建一个新映像，并且之前的映像被命名为`.`
`docker`构建命令有几个选项，您可以通过运行`docker build --help`自行查看。用诸如“最新”这样的名称标记映像也用于版本控制。我们将在*话题 F* 中对此进行更多讨论。
要构建映像，请在 Python 工作区中运行以下命令:
```
>$ docker build -t python-docker .
```
### 注
尾随点是这里语法的一个重要部分:
![docker build](img/image01_17a.jpg)