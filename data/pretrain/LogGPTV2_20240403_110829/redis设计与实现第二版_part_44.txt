续查找指定的数据库键。
指定的数据库键时，节点A会向客户端返回一个ASK错误，指引客户端到节点 B 继
如果节点A正在迁移槽i至节点B，那么当节点A 没能在自己的数据库中找到命令
属于某个槽的所有键值对从一个节点转移至另一个节点。
对 Redis 集群的重新分片工作是由 redis-trib 负责执行的，重新分片的关键是将
的信息可以指引客户端转向至正在负责相关槽的节点。
己负责，如果不是的话，节点将向客户端返回一个MOVED 错误，MOVED 错误携带
节点在接到一个命令请求时，会先检查这个命令请求要处理的键所在的槽是否由自
---
## Page 293
第24章监视器
第23章慢查询日志
第22章二
第21章 排序
第19章事务
第18章发布与订阅
二进制位数组
独立功能的实现
第四部分
---
## Page 294
阅者。
被发送给所有与这个频道相匹配的模式的订
会被发送给这个频道的所有订阅者，它还会
他客户端向某个频道发送消息时，消息不仅
式，从而成为这些模式的订阅者：每当有其
执行PSUBSCRIBE命令订阅一个或多个模
条消息，如图 18-2 所示。
那么“news.it"的三个订阅者都将收到这
向"news.it"频道发送消息"hello",
订阅者，如图18-1所示。
那么这三个客户端就是“news.it”频道的
有订阅者都会收到这条消息。
阅者（subscriber）：每当有其他客户端向被订阅的频道发送消息（message）时，频道的所
除了订阅频道之外，客户端还可以通过
PUBLISH "news.it" "hello"
如果这时某个客户端执行命令
 SUBSCRIBE "news.it"
举个例子，假设A、B、C三个客户端都执行了命令：
通过执行 SUBSCRIBE命令，客户端可以订阅一个或多个频道，从而成为这些频道的订
Redis 的发布与订阅功能由 PUBLISH、SUBSCRIBE、PSUBSCRIBE等命令组成。
发布与订阅
第18章
客户端A
图18-1news.it 频道和它的三个订阅者
客户端A
图 18-2 向 news.it 频道发送消息
"hello".
news.it 频道
订阅订阔
news.it频道
客户端B
客户端B
客户端C
客户端C
---
## Page 295
"news.et"频道的"news.[ie]t"模式，如图 18-5所示。
B会收到消息，客户端C和客户端D也同样会收到消息，因为这两个客户端正在订阅匹配
向"news.et"频道发送消息"world"，那么不仅正在订阅"news.et"频道的客户端
"news.it"频道的"news.[ie］t"模式，如图18-4所示。
A会收到消息，客户端C和客户端D也同样会收到消息，因为这两个客户端正在订阅匹配
向"news.it"频道发送消息"hello"，那么不仅正在订阅"news.it"频道的客户端
PUBLISH "news.et" "world"
与此类似，如果某个客户端执行命令
PUBLISH "news.it" "hello"
如果这时某个客户端执行命令
D
口客户端A正在订阅频道"news.it"。
举个例子，假设如图18-3所示：
式"news.[ie]t"。
客户端B正在订阅频道"news.et"。
图 18-4将消息发送给频道的订阅者和匹配模式的订阅者（1）
客户端A
 PUBLISH "news.it" "hello"
客户端A
"hello"
news.it频道
/订阅
news.it频道
图18-3频道和模式的订阅状态
"hello"
客户端C
客户端C
匹配
匹配
订阅
客户端D
客户端D
"hello"
订阅
V
匹配
匹配
news.et频道
news.et频道
客户端B
客户端B
衍阅
订阅
第18章
发布与订阀·291
---
## Page 296
频道的客户端：
这个字典的键是某个被订阅的频道，而键的值则是一个链表，链表里面记录了所有订阅这个
频道之间就建立起了一种订阅关系。
18.1
个子命令的实现原理。
说明消息是如何发送给频道的订阅者以及模式的订阅者的。
PUNSUBSCRIBE命令的实现原理。
UNSUBSCRIBE命令的实现原理，然后介绍订阅模式的PSUBSCRIBE命令和退订模式的
Redis 将所有频道的订阅关系都保存在服务器状态的 pubsub_channels 字典里面,
最后，本章将对 Redis 2.8新引人的 PUBSUB命令的三个子命令进行介绍，并说明这三
在介绍完以上四个命令的实现原理之后，本章会对 PUBLISH命令的实现原理进行介绍
第四部分独立功能的实现
客户端client-4正在订阅"news.sport"频道。
 client-1、client-2、client-3三个客户端正在订阅"news.it"频道。
比如说，图18-6 就展示了一个 pubsub_channels 字典示例，这个字典记录了以下信息：
struct redisServer {
当一个客户端执行 SUBSCRIBE 命令订阅某个或某些频道的时候，这个客户端与被订阅
本章接下来的内容将首先介绍订阅频道的 SUBSCRIBE命令和退订频道的
频道的订阅与退订
!...
//保存所有频道的订阅关系
图18-5将消息发送给频道的订阅者和匹配模式的订阅者（2）
客户端A
订阅
news.it频道
'world"
news.[ie]t模式
客户端C
匹配
客户端D
.."world"
 PUBLISE "news.et" "world"
news.et 频道
客户端B
"worldn
---
## Page 297
之后，pubsub_channels字典将更新至图 18-7所示的状态，其中用虚线包围的是新添加的节点
户端client-10086执行命令
被订阅的频道在 pubsub_channels 字典中进行关联。
18.1.1
每当客户端执行 SUBSCRIBE 命令订阅某个或某些频道的时候，服务器都会将客户端与
SUBSCRIBE "news.sport" "news.movie"
至于原本就已经有客户端在订阅的"news.sport"频道，client-10086的节点
‘ow smau，sauuuansqnd 
举个例子，假设服务器 pubsub_channels 字典的当前状态如图 18-6 所示，那么当客
口 如果频道还未有任何订阅者，那么它必然不存在于 pubsub_channels 字典，程序
口 如果频道已经有其他订阅者，那么它在 pubsub_channels 字典中必然有相应的订
根据频道是否已经有其他订阅者，关联操作分为两种情况执行：
链表，然后再将客户端添加到链表，成为链表的第一个元素。
阅者链表，程序唯一要做的就是将客户端添加到订阅者链表的末尾。
放在了频道对应链表的末尾，排在client-4节点的后面。
阅"news.movie"频道。
只包含一个 client-10086节点，表示目前只有client-10086一个客户端在订
首先要在 pubsub_channels 字典中为频道创建一个键，并将这个键的值设置为空
订阅频道
pubsub_channels
"news.business"
"news.movie"
"news.sport"
图18-7 执行 SUBSCRIBE 之后的 pubsub_channels 字典
"news.it"
"news.business"
pubsub_channels
"news.sport"
"news.it"
图18-6 一个 pubsub_channels 字典示例
f elient-10086
client-5
client-4
client-1
client-4
client-1
client-5
 client-10086
client-6
client-6
第18章发布与订阔·293
---
## Page 298
294·第四部分独立功能的实现
之后，图中用虚线包围的两个节点将被删除（如图18-9所示）：
client-10086执行命令
关联：
个或某些频道的时候，服务器将从 pubsub_channels 中解除客户端与被退订频道之间的
18.1.2
UNSUBSCRIBE "news.sport" "news.movie"
在pubsub_channels字典更新之后，client-10086 的信息已经从“news ，
举个例子，假设 pubsub_channels 的当前状态如图18-8所示，那么当客户端
口如果删除退订客户端之后，频道的订阅者链表变成了空链表，那么说明这个频道已
UNSUBSCRIBE命令的行为和SUBSCRIBE命令的行为正好相反，
口:
def subscribe (*all_input_channels) :
SUBSCRIBE命令的实现可以用以下伪代码来描述：
另外，因为删除client-10086之后，频道“news.movie"已经没有任何订阅
sport"频道和"news.movie"频道的订阅者链表中被删除了。
经没有任何订阅者了，程序将从 pubsub_channels字典中删除频道对应的键。
者链表，然后从订阅者链表中删除退订客户端的信息。
者，
退订频道
遍历输入的所有频道
，因此键＂news.movie"也从字典中被删除了。
server.pubsub_channels [channel] .append(client)
#将订阅者添加到频道所对应的链表的末尾
"news.business"
pubsub_channels
 server.pubsub_channels[channel] = [] 
图 18-8 执行 UNSUBSCRIBE 之前的 pubsub_channels 字典
"news.movie"
"news.sport"
"news.it"
Y
 client-10086
client-5
client-4
client-1
client-10086:
client-6
client-2
client-3
，当一个客户端退订某
---
## Page 299
了订阅模式的客户端：
Pattern 结构，这个结构的 pattern 属性记录了被订阅的模式，而client 属性则记录
patterns 属性里面：
属性里面，与此类似，服务器也将所有模式的订阅关系都保存在服务器状态的 pubsub
18.2
pubsub_patterns 属性是一个链表，
前面说过，服务器将所有频道的订阅关系都保存在服务器状态的 pubsub_channels
typedef struct pubsubPattern (
struct redisServer
def unsubscribe (*all_input_channels) :
UNSUBSCRIBE命令的实现可以用以下伪代码来描述：
//订阅模式的客户端
模式的订阅与退订
!.··
list *pubsub_patterns;
/1保存所有模式订阅关系
//
for channel in all_input_channels:
#遍历要退订的所有频道
if len(server.pubsub_channels[channell) == 0:
#那么将频道从字典中删除
server.pubsub_channels[channel] .remove (client)
#在订阅者链表中删除退订的客户端
server.pubsub_channels.remove (channel)
"news.business"
pubsub_channels
"news.sport"
"news.it"
client-5
client-4
client-1
，链表中的每个节点都包含着一个pubsub
 client-6
client-2client-3
第18章发布与订阔·295
---
## Page 300
296●第四部分独立功能的实现
client 属性设置为订阅模式的客户端。
阅的模式执行以下两个操作：
18.2.1
个链表记录了以下信息：
端client-9正在订阅模式"news.*"。
2）将 pubsubPattern 结构添加到 pubsub_patterns 链表的表尾。举个例子，假
每当客户端执行PSUBSCRIBE 命令订阅某个或某些模式的时候，服务器会对每个被订
PSUBSCRIBE "news.*"
那么当客户端client-9 执行命令
客户端client-9正在订阅模式"news.*"
口
客户端client-7正在订阅模式"music.*"
图 18-10 是一个 pubsubPattern 结构示例，
pubsub_patterns
 pubsubPattern;
客户端client-8正在订阅模式“book.*"
redisServer
订阅模式
robj *pattern;
/！被订阅的模式
redisClient *client;
图18-12 执行 PSUBsCRIBE 命令之前的 pubsub_patterns 链表
pubsub_patterns
redisServer
图18-11
pubsubPattern
"music.*
pattern
client-
client
pubsub_patterns 链表示例
pubsubPattern
，将结构的 pattern 属性设置为被订阅的模式
"music.*"
pattern
client-7
client
，它显示客户