### Table 3: Communication Cost in MB and Running Time in Seconds of PSI Protocols

| \( n_1 \) | \( n_2 \) | Protocol | 10 Gbps (s) | 50 Mbps (s) | 1 Mbps (s) |
|----------|----------|----------|-------------|-------------|-------------|
| 290.82   | 27.5     | SH       | 251.69      | 311.4       | 17.17       |
| —        | 46.81    | 1M       | 267.69      | 170.82      | 18.25       |
| 108.92   | 16.39    | 2M       | 16.26       | 113.02      | Online      |
| 2.26     | 5.09     | SH       | 1.71        | 2.79        | 3.11        |
| 97.06    | 5.26     | 1M       | 1.75        | 1.24        | 4.64        |
| 0.59     | 0.38     | 2M       | 3.11        | 0.63        | 38.53       |
| 74.15    | 25.03    | SH       | 40.15       | 45.11       | 1929.76     |
| 48.34    | 27.73    | 1M       | 22.37       | 39.7        | 7.10        |
| 6.10     | 40.38    | 2M       | 7.90        | 717.08      | 1153.23     |
| 452.7    | 687.77   | SH       | 726.81      | —           | 798.26      |
| 489.7    | 371.77   | 1M       | 609.49      | 109.41      | 128.43      |
| 721.81   | 120.49   | 2M       | Total       | 2.26        | 5.47        |
| 2.17     | 3.36     | SH       | 3.74        | 97.06       | 5.93        |
| 2.22     | 1.24     | 1M       | 5.01        | 0.69        | 0.95        |
| 3.74     | 0.67     | 2M       | 38.53       | 74.57       | 31.16       |
| 40.71    | 45.75    | 1929.76  | 49.02       | 36.16       | 22.37       |
| 40.02    | 7.46     | 6.67     | 41.01       | 8.96        | 717.08      |
| 1154     | 554.26   | 688.34   | 727.46      | —           | 798.94      |
| 597.26   | 371.77   | 610.25   | 117.81      | 129.10      | 722.45      |
| 121.81   |          |          |             |             |             |

**Note:** Cells with "—" denote settings not supported or program out of memory.

### 5.2 Experiments and Evaluation

#### Experimental Setup
We implemented our protocol in C++ and executed it on a single Intel Xeon processor with a clock speed of 2.30 GHz and 256 GB of RAM. The parties communicated over a simulated 10 Gbps network with a round-trip time (RTT) of 0.2 ms for the LAN setting. We also tested all protocols in a WAN setting with an RTT of 80 ms and two different network bandwidths: 50 Mbps and 1 Mbps.

#### Protocol Evaluation
In this section, we benchmark the state-of-the-art semi-honest and malicious PSI protocols [11, 16, 29, 36, 42, 43]. Below, we briefly discuss several protocols that were not included in our comparison:

- **Jarecki-Liu Protocol [34]**: This is a malicious-secure, DH-based protocol. However, it achieves a weaker ideal functionality where the adversary can choose items adaptively.
- **Rindal & Schoppmann [48]**: This recent PSI protocol is based on silent vector-OLE and is extremely efficient for large sets. However, its implementation is not yet publicly available, and its high fixed costs make it inefficient for small sets.
- **Chen et al. [12]**: This is the state-of-the-art (one-sided) malicious FHE-based PSI. Its first step is essentially classic DH-PSI, before any FHE operations. Since our entire protocol is more efficient than DH-PSI, we expect ours to be much faster for small-to-medium-sized sets.
- **RSA-based PSI Protocols [3, 17]**: These protocols require at least one RSA exponentiation per item. RSA elements are 16 times larger than elliptic curve (ECC) elements. A simple benchmark on our experimental hardware (openssl speed rsa4096 ecdhx25519) shows that RSA-4096 exponentiation is 100 times slower than ECC exponentiation. Therefore, RSA-based protocols will always be approximately 100 times slower than ours.

We report detailed comparisons in Tables 2 and 3 for small set sizes \(\{2^7, 2^8, 2^9, 2^{10}\}\) and large set sizes \(n \in \{2^{12}, 2^{16}, 2^{20}\}\). As expected, our protocol shows significant performance improvements when the set size is small.

Our poly-DH PSI protocol is highly amenable to precomputation (by precomputing exponentiations). When reporting the performance of these protocols, we split the total running time into two phases:
- **Offline**: Operations like generating random pairs \((r_i, g^{r_i})\), which can be done without any interaction and before the inputs are known.
- **Online**: Everything else, starting when the parties have determined their inputs.

#### Bandwidth Comparison
Our polynomial-based protocol requires the lowest communication among all PSI protocols. The communication of our polynomial-based protocol is approximately 2 times smaller than that of the classic DH PSI. Compared to the malicious DH-based PSI protocol [16] (DKT), our protocol shows about a 3-4 times improvement.

For a semi-honest PSI with unequal set sizes, the communication cost is \((n_1 |G| + n_2 \ell)\) bits for the polynomial-based PSI protocol, and about \((n_1 + n_2)|G| + n_2 \ell)\) bits for the classic DH-based PSI. For example, with \(n_1 = 2^{16}\) and \(n_2 = 2^{20}\), the polynomial-based protocol takes 12.58 MB of communication, while the classic DH PSI needs 46.14 MB, a 3.67 times improvement.

We also compare the bandwidth to the state-of-the-art OT-based semi-honest PSI protocols [11, 36, 42] and the malicious PSI protocol [43]. Note that [36] (KKRT) and [43] (PaXoS) are the fastest PSI protocols to date, and [11] (CM) is the fastest in networks with moderate bandwidth (e.g., 30-100 Mbps), while [42] (SpOT-low) has the least communication among practical semi-honest protocols. The communication cost of our protocol is about 3-4.6 times, 1.4-1.7 times, and 3.7-7.8 times less than that of [36], [42], and [43], respectively.

#### Runtime Comparison
For small sets (e.g., \(n = 2^9\)), our polynomial-based protocol is faster than all DH-based and OT-based schemes in both LAN and WAN settings. Starting from \(n = 2^{10}\), our protocol is slower than the OT-based protocols in the LAN setting. However, in the WAN setting with 1 Mbps network bandwidth and 80 ms round-trip latency, our protocol is 1-3.17 times faster due to its lower communication cost.

The polynomial-based protocol is particularly beneficial in unbalanced settings where the sender's set size is larger than the receiver's set size (\(n_2 > n_1\)). This means that the sender only needs to send a short fingerprint \(\ell\) per item in his set, whereas in the DH-based protocol, the sender must send a group element per item. Since the implementations of PaXoS and DKT do not support computing PSI for asymmetric sets, we omit their performance costs. Table 3 shows that in most cases, the running time of our polynomial-based protocol is faster than other semi-honest protocols. Consequently, our protocol is faster than other malicious protocols. For \(n_1 = 2^{16}\) and \(n_2 = 2^{20}\) in the WAN setting with 1 Mbps bandwidth, the baseline DH protocol runs in 574.26 seconds, while the polynomial-based protocol requires 117.81 seconds, a factor of 4.9 times and 3.1 times improvement, respectively.

A summary of the state-of-the-art (including this work) is presented in Figure 1, where the running time is measured in the LAN setting. Our PSI protocol's performance is mostly unaffected by changes in network bandwidth and latency due to its extremely low communication complexity.

### Conclusions
For small sets (\(n \leq 512\)), our protocol is the best in terms of both communication and computation. As discussed in Section 1, for sets of this size, our protocol is less expensive than the base OTs required for OT extension and PSI protocols based on OTs.

### Acknowledgements
The first author is partially supported by a Facebook research award. The second author is partially supported by NSF awards #2031799, #2101052, and #2115075. We are grateful to the CCS 2021 anonymous reviewers whose feedback was instrumental in improving several aspects of this paper.

### References
[References listed as provided in the original text.]

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and easier to understand.