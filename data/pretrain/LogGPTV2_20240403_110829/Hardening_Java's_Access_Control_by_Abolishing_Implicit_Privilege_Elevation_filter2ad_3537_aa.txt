title:Hardening Java's Access Control by Abolishing Implicit Privilege Elevation
author:Philipp Holzinger and
Ben Hermann and
Johannes Lerch and
Eric Bodden and
Mira Mezini
2017 IEEE Symposium on Security and Privacy
Hardening Java’s Access Control by
Abolishing Implicit Privilege Elevation
Philipp Holzinger∗, Ben Hermann†, Johannes Lerch†, Eric Bodden‡ and Mira Mezini†
∗Fraunhofer SIT, Email: PI:EMAIL
†Technische Universit¨at Darmstadt, Email: {lastname}@cs.tu-darmstadt.de
‡Fraunhofer IEM & Paderborn University, Email: PI:EMAIL
Abstract—While the Java runtime is installed on billions of
devices and servers worldwide, it remains a primary attack vector
for online criminals. As recent studies show, the majority of all
exploited Java vulnerabilities comprise incorrect or insufﬁcient
implementations of access-control checks. This paper for the
ﬁrst time studies the problem in depth. As we ﬁnd, attacks are
enabled by shortcuts that short-circuit Java’s general principle of
stack-based access control. These shortcuts, originally introduced
for ease of use and to improve performance, cause Java to
elevate the privileges of code implicitly. As we show, this creates
many pitfalls for software maintenance, making it all too easy
for maintainers of the runtime to introduce blatant confused-
deputy vulnerabilities even by just applying normally semantics-
preserving refactorings.
How can this problem be solved? Can one implement Java’s
access control without shortcuts, and if so, does this implementa-
tion remain usable and efﬁcient? To answer those questions, we
conducted a tool-assisted adaptation of the Java Class Library
(JCL), avoiding (most) shortcuts and therefore moving to a
fully explicit model of privilege elevation. As we show, the
proposed changes signiﬁcantly harden the JCL against attacks:
they effectively hinder the introduction of new confused-deputy
vulnerabilities in future library versions, and successfully restrict
the capabilities of attackers when exploiting certain existing
vulnerabilities. We discuss usability considerations, and through
a set of large-scale experiments show that with current JVM
technology such a faithful implementation of stack-based access
control induces no observable performance loss.
I. INTRODUCTION
The Java platform is installed and running on literally
billions of devices and servers worldwide [1]. It is also one
of the ﬁrst execution environments to feature an elaborate
security model [2]. The platform was designed with the
explicit requirement for the secure execution of code retrieved
from untrusted locations such as applets on a website that will
run in the client’s browser. Yet, according to Cisco’s Annual
Security Reports Java was the number one attack vector for
web exploits in 2013 with a share of 87% [3], and even 91%
in 2014, thus clearly outranking Flash and Adobe PDF [4].
A large variety of attacks was enabled due to incorrect
or insufﬁcient implementations of access control checks. In
particular, Holzinger et al. recently showed in a large-scale
study on more than ten years of Java exploitation [5] that the
by far most prominent attack vectors exploit vulnerabilities
caused by an implicit assignment and elevation of privileges
within the Java Class Library (JCL). In this work, we inves-
tigate this prevalent problem in full depth and suggest and
evaluate a concrete mitigation strategy. The goal is not just
to signiﬁcantly harden the Java platform but to also draw
important conclusions for the secure design of future runtimes.
At a ﬁrst glance, the implicit assignment of privilige seems
to ease the life of JCL developers, as it allows them to
access security sensitive low-level operations without explicit
access-control checks. As our research shows, though, this
advantage is greatly outweighed by a severe drawback of
such an implicit privilege elevation: if developers do not—
at all times—properly protect the privileges they are assigned,
they might accidentally leak them to attackers, opening up the
runtime to so-called confused-deputy attacks [6]. But due to
the implicitness of the privilege elevation developers are most
often unaware of having obtained privileges in the ﬁrst place,
and hence also unaware of their obligation to protect them.
On a lower level, the Java Security Model features isolated
zones where code can run with limited privileges such as
a restricted access to the ﬁle system. For any given Java
Virtual Machine (JVM), administrators can conﬁgure this
JVM’s security setting through a specialized policy language.
A set of standard policies, shipped with the Java runtime, pro-
vides default protection domains, for instance for applets and
applications using Java Web Start. During runtime, the JVM
uses stack-based access control [2] to check if a caller has the
permission to access any given security-sensitive functionality.
In theory, the JVM performs a stack walk, checking that each
and every frame on the current call stack is associated with
sufﬁcient access permissions. In cases where one of those
frames belongs to an untrusted applet, for instance, this check
will fail, resulting in a SecurityException being thrown.
But as we ﬁnd, this is only theory. In practice, it shows
that many security-sensitive methods in the Java Class Library
(JCL) implement what we call shortcuts: They execute stack
walks only under certain circumstances and use heuristics
(such as checking the immediate caller’s classloader) to vali-
date the secure execution in other cases. Methods with short-
cuts are generally caller-sensitive: Depending on the nature of
the shortcut, they grant privileges implicitly to certain groups
of callers, in many cases to all callers within the JCL.
As we ﬁnd, shortcuts are highly problematic for two rea-
sons. First, they pose a signiﬁcant risk to the security of
the overall Java Platform, due to the fragile nature of caller-
sensitive behavior. As demonstrated by previous exploits, at-
tackers can abuse insecure use of reﬂection to invoke shortcut-
© 2017, Philipp Holzinger. Under license to IEEE.
DOI 10.1109/SP.2017.16
1027
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:58 UTC from IEEE Xplore.  Restrictions apply. 
containing methods, which help them break out of Java’s
sandbox. As Holzinger et al. showed, caller sensitivity in
combination with confused deputies alone is abused by 36%
of all exploits they found in the wild [5].
Second, shortcuts severely impede the maintainability of
the Java runtime’s implementation. During our investigation
we found several places inside the runtime library, at which
developers could inadvertently break the entire platform’s
security through simple code transformations that would oth-
erwise be considered semantics-preserving refactorings. In
particular this is true for the introduction of wrapper methods.
Wrappers modify the call stack, which can inadvertently cause
the shortcuts to check properties of the wrong stack frames.
Incidentally, some of those places were even commented with
warnings to “NOT REFACTOR THIS CODE”. In addition to
cases, where a shortcut poses an immediate threat, there are
often cases in which it can lead to an exploitable vulnerability
later, due to simple code maintenance/evolution.
We conducted an experiment, transforming a JCL release
such that explicit doPrivileged-calls become the only
way in which the JCL elevates privileges. This has several
advantages. First, as we elaborate later, it eliminates certain
attack vectors that abuse insecure use of reﬂection to proﬁt
from shortcuts. Second, it makes privilege elevation explicit,
which eliminates the potential to elevate privileges accidentally
through code restructuring/evolution. Third, explicit privilege
elevation allows both security experts and code analysis
tools [7], [8] to focus on doPrivileged-calls to ensure the
security of the access-control implementation.
One prevalent reason for introducing shortcuts in the ﬁrst
place is that stack-based access control is expensive (after all,
the JVM needs to reify the call stack); shortcuts lead to a
faster implementation of access control [9]. In this work we
show through a set of large-scale experiments that no such
penalty is measurable on the DaCapo benchmark suite [10],
despite the fact that it makes heavy use of security-sensitive
APIs, and also state reasons for why this is the case.
A second reason for the presence of shortcuts is that the
implicit assignment of privilege is convenient, as it reduces the
need to elevate priviliges explicitly, e.g. through an appropriate
access-control policy. Another contribution of this paper is
thus a detailed assessment on the usability implications that
a move from implicit to purely explicit privilege elevation
entails. This assessment allows us to provide speciﬁc guidance
for an actual
implementation of our hardening in Java’s
codebase. Last but not least we discuss lessons learned that
ought to guide design decisions in the security architecture of
future language runtimes.
To summarize, this work makes the following contributions:
• the ﬁrst detailed analysis of the effects of implicit privi-
lege elevation and shortcuts for access-control checks in
Java, along with the security and maintainability prob-
lems they induce (Section III),
• a tool-assisted analysis and adaptation technique to avoid
the risk of (introducing) confused deputies in the JCL due
to shortcuts (Section IV),
• an adapted version of the JCL that implements access
control without shortcuts, a detailed explanation of why
this adapted version enhances security and maintainabil-
ity (Section IV-D),
• a set of large-scale experiments showing that this added
security and maintainability comes at a negligible runtime
cost (Section V), and
• guidance on the productive use of our proposed solution,
and an outline of open research questions (Section VI),
as well as general lessons learned from our in-depth
analysis (Section VII).
All artifacts needed to reproduce our results are publicly
available.1
II. BACKGROUND
The JCL restricts access to security-sensitive resources
by means of security-policy enforcement. Only code with
appropriate permissions may use, e.g., ﬁlesystem or network
functionality. To this end, every security-sensitive operation
is guarded by a call to the security manager. The security
manager applies a stack-based access-control algorithm to
decide whether attempted access shall be granted or denied.
Permission checks are performed by inspecting the current
call stack and computing the intersection of the permissions
that the declaring class of each method on the stack has been
assigned by the running virtual machine’s security policy. If
the required permission is contained in the intersection, access
is granted by returning from the check method, otherwise an
exception is thrown that prevents the attempted action.
There are two deviations from this basic model: (a) privi-
leged actions [2] and (b) what we call shortcuts.
Privileged actions
for
call
speciﬁc operations by a
Code with appropriate permissions can explicitly el-
evate privileges
to
doPrivileged. This ensures that subsequent access-control
decisions ignore all callers on the call stack before the
doPrivileged-call. This concept enables trusted code to
act as a guarantor on whose behalf untrusted code may
perform a certain action. Trusted code on whose behalf the
action is performed has to ensure that all security-sensitive
actions performed in this context cannot cause harm even if
triggered by malicious code. Consider for illustration Listing 2,
where readProp uses doPrivileged to temporarily el-
evate the privileges of the executing thread such that
the
call to checkPermission in openFile can succeed. In
the example, the “privileged” call to openFile is explicitly
entrusted not to misuse its privileges, in this case rightfully
so, as readProp uses the privilege carefully, reading only
the system-properties ﬁle it needs, exposing no ﬁle handle to
a potential attacker.
1https://github.com/stg-tud/jdeopt
1028
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:58 UTC from IEEE Xplore.  Restrictions apply. 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
class FileAccess {
File openFile(String path) {
//if no trusted library class
Class c = Reflection.getCallerClass();
if(c!=null && ClassLoader.getClassLoader(c)!=null) {
SecurityManager s = System.getSecurityManager();
s.checkPermission(new FilePermission(path));
}
return newFileHandle(path);
}
}
class SystemProperties {
public String readProp(String name) {
File f = FileAccess.
openFile(JDK_PATH+"/system.properties");
... //read property
}
}
// code below this point is added in a later release
class Util {
public File openFileFromRoot(String name) {
return FileAccess.openFile("/"+name);
}
}
Listing 1. Example shortcut for permission check
Shortcut checks
i.e., a call
We say that a method contains a shortcut if it contains
a permission check,
to a method of the form
SecurityManager.check*, that is carried out only if
certain constraints on the current call stack are satisﬁed. These
constraints are expressed through conditionals and typically
take the immediate caller and/or its classloader into account.
Class.getDeclaredMethods is an example for such a
method. It skips a permission check in case the immediate
caller was deﬁned by the same classloader as the class whose
members shall be accessed by the call. The Secure Coding
Guidelines for Java [11] (JSCG) list a number of such “caller-
sensitive” methods [9] in sections 9.8 through 9.11. They
should be used with special care to avoid the introduction
of vulnerabilities. Only a subset of those methods use their
knowledge about the call stack to implement shortcuts.
illustration,
1. Assume
consider
that
simpliﬁed example
the
in
For
Listing
classes FileAccess and
SystemProperties exist in some release of the JCL and
class Util has been introduced in a later release to the
(trusted) library, as a convenience. Method openFile opens
arbitrary ﬁles on the caller’s behalf. Since this is a security-
sensitive operation, the method checks for the appropriate
FilePermission. However,
takes a
shortcut: It performs the permission check actually only for
such callers that are not associated with a null classloader
(see line 5). All classes in the JCL, including FileAccess
and SystemProperties here, are associated with the
classloader null, i.e., by taking the shortcut, the method
openFile implicitly trusts all calls from the JCL.
in doing so,
it
This is no problem with callers that actually deserve this
trust. For instance, the method readProp uses the privilege
carefully, reading only the system-properties ﬁle it needs and
otherwise exposing no ﬁle handle. However, it is fairly easy to
accidentally expose the elevated privilege to untrusted users.
For instance, to the developer of the new class Util, it
is not at all obvious that the introduction of such a simple
wrapper could have severe security implications. In the ex-
ample, the new method openFileFromRoot is an example
of a confused deputy: it exposes the complete behavior of
openFile to its callers, without any ﬁltering, checking,