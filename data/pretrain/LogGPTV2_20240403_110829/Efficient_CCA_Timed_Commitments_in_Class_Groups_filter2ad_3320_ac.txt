sampled key 𝐾. More concretely, our timed commitment consists
of the puzzle 𝑍 from (1), prime-order group ciphertexts in (2) and
𝐾,(cid:8)(𝑐𝑖,0, 𝑐𝑖,1) = (𝐺𝑠𝑖 , 𝐾𝑠𝑖 · 𝐺𝑟𝑖)(cid:9)
𝑖∈[𝛼]
where 𝑟𝑖 is the 𝑖-th bit of 𝑟. Our NIZK proof must now certify that
the following conditions are met:
1) The public key 𝐾 is correctly sampled from the class group.
2) The class group ciphertexts {𝑐𝑖,0, 𝑐𝑖,1}𝑖∈[𝛼] encrypt the bit de-
3) Both 𝑖-th ciphertexts ( ˜𝑐𝑖,0, ˜𝑐𝑖,1) and (𝑐𝑖,0, 𝑐𝑖,1) either encrypt 0 or
composition of the randomness 𝑟 used in 𝑍1.
1.
Statement 1) is a standard proof of knowledge of discrete logarithm
(over the class group), whereas 2) can be reduced to a proof discrete
logarithm equality (again over the class group) by running the
linear reconstruction in the exponent. Thus the only statement that
concerns two different groups is 3). Fortunately, we can split the
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2666statement as
( ˜𝑐𝑖,0, ˜𝑐𝑖,1) AND (𝑐𝑖,0, 𝑐𝑖,1) Encrypt 0
( ˜𝑐𝑖,0, ˜𝑐𝑖,1) AND (𝑐𝑖,0, 𝑐𝑖,1) Encrypt 1.
OR
where each clause individually can again be reduced to a standard
proof of discrete logarithm equality (over the respective group). The
clauses are then combined via standard OR and AND composition of
sigma protocols. In some sense, the bridging across the two groups
is delegated to the AND composition of sigma protocols, which can
be implemented very efficiently (e.g. simply use the same challenge
in the sigma protocol). Finally, statements 1), 2), and 3) are again
stitched together via AND composition of sigma protocols.
2.3 Distributed Randomness Generation
We show the applicability of our CCA timed commitment by con-
structing a distributed randomness generation protocol: The proto-
col is run among 𝑛 parties (𝑃1, . . . , 𝑃𝑛), and the objective is to com-
pute a 256-bit random string 𝑟∗, that is, unbiased, and unpredictable
even in the presence of 𝑛 − 1 corrupted parties, that cooperate to
bias the distribution of 𝑟∗. Our protocol proceeds in three phases.
Commitment Phase: Each party 𝑃𝑖 locally samples a random integer
𝑥𝑖 ← Z𝑞 (where Z𝑞 is the message space of the timed commitments)
and generates a timed commitment (𝑐𝑖, 𝜋𝑖) to such an integer. All
the timed commitments are generated with respect to a fixed time
parameter T, which conservatively bounds the duration of the
commitment phase. Parties broadcast their timed commitments to
other parties which locally verify the validity of each individual
commitment.
(Fast Termination) Opening Phase: Each party 𝑃𝑖 then reveals 𝑥𝑖
along with the random coins used in generating their timed com-
mitment (𝑐𝑖, 𝜋𝑖). Parties can locally check if the opening is valid, by
recomputing the timed commitments of other parties themselves.
The final random value is computed as 𝑟∗ :=𝑖∈[𝑛] 𝑥𝑖 by each party.
This optimistic case, where everyone reveals their valid openings
does not require force opening of any of the timed commitments
and the final value 𝑟∗ is generated without the need to perform any
sequential computation.
(Slow Termination) Force-Opening Phase: In the event that one or
more parties do not reveal a valid opening for their commitments,
the other parties need to force-open their commitments to compute
𝑟∗. To avoid a computational blowup in the number of aborting
parties, this is done by evaluating the addition homomorphically
over the commitments
−−−−−−−−−→ ˜𝑐
where ˜𝑐 contains the output𝑖∈[𝑛] 𝑥𝑖 = 𝑟∗. Thus the output of the
(𝑐1, . . . , 𝑐𝑛) Eval(sum,·)
protocol can be obtained by simply force-opening ˜𝑐. This phase can
be further optimized by letting a single designated party (say 𝑃 𝑗)
compute the force-opening algorithm along with succinct proof
of correctness [62, 74]. The end result is that the revealing of com-
mitments is publicly verifiable even if one or many parties do not
reveal their valid openings.
Analysis. The resulting output 𝑟∗ is both unbiased and unpre-
dictable. In our analysis, we show a stronger statement: for an
adversary running in time at most T, 𝑟∗ is computationally indis-
tinguishable from a value sampled uniformly from Z𝑞. For this
analysis to go through, the CCA security of the timed commitment
is crucial: Intuitively, it prevents the adversary from mauling hon-
estly generated commitments and choosing its own 𝑥𝑖 as a function
of the honestly committed values, which would ultimately result in
a biased distribution.
3 PRELIMINARIES
We denote by 𝜆 ∈ N the security parameter and by 𝑥 ← A(in; 𝑟)
the output of the algorithm A on input in using 𝑟 ← {0, 1}∗ as its
randomness. We often omit this randomness and only mention it
explicitly when required. The notation [𝑛] denotes a set {1, . . . , 𝑛}
and [𝑖, 𝑗] denotes the set {𝑖, 𝑖 + 1, . . . , 𝑗}. We model non-uniform
probabilistic polynomial time (PPT) adversaries as families of circuits
{A𝜆}𝜆∈N of size 𝜆𝑂(1) with 𝜆𝑂(1) input and output bits. We also
consider the parallel running time of (PRAM) adversaries that we
also model as circuits. The parallel time is determined by the depth
of the circuit and the total running time is determined by the total
size of the circuit.
Non-Interactive Zero-Knowledge Proofs. We make use of non-
interactive zero-knowledge (NIZK) proof [9] for a language L that
allows a prover to convince a verifier about the validity of a certain
statement stmt ∈ L without revealing any other information. We
require a NIZK proof to satisfy the properties of zero-knowledge,
and simulation soundness [67]. We recall the formal definitions
in Appendix A.
Homomorphic Time-Lock Puzzles. Time-lock puzzles [66] al-
low one to hide a secret for a certain amount of time T. A homomor-
phic time-lock puzzle additionally offers homomorphic evaluation
of several puzzles to generate a single puzzle. The notion was pro-
posed by Malavolta and Thyagarajan [55]. It consists of a setup
algorithm (PSetup), that takes as input a time hardness parameter
T and outputs public parameters of the system pp, a puzzle genera-
tion algorithm (PGen) that, on input the public parameter and a
message, generates the corresponding puzzle. One can then evalu-
ate homomorphically functions over encrypted messages (PEval)
and solve the resulting puzzle in time T (Solve). The security re-
quirement is that for every PRAM adversary A of running time
≤ T𝜀(𝜆) the messages encrypted are computationally hidden. They
also propose efficient constructions for linear and multiplicative
homomorphism based on the sequential squaring assumption in
the RSA group. Below we recall the formal definitions from [55].
We recall the formal definitions in Appendix A.
Class Groups. Given a non square integer Δ  2𝜆𝐵 is a prime. The reason why we need to use a prime number
will become clear in our construction of CCA timed commitments.
We will work with a cyclic subgroup G ⊂ 𝐶𝑙(Δ𝐾), generated by
a random square 𝐺 of 𝐶𝑙(Δ𝐾) (such an element can be efficiently
generated by generating an ideal of OΔ𝐾 above a random splitting
prime, cf [46, Subsection 3.1]). We denote 𝑠 the (unknown) order of
G which is a divisor of ˜𝑠. For large 𝑞 we can assume that gcd(𝑠, 𝑞) =
1.
In 𝐶𝑙(Δ𝑞), we will work with a cyclic subgroup Γ of the squares
of 𝐶𝑙(Δ𝑞) generated by 𝛾 where 𝛾 := 𝛾𝑞𝐹 with 𝛾𝑞 = 𝜓𝑞(𝐺). We thus
have that Γ is of order 𝑞𝑠 and satisfy Γ ≃ Γ𝑞 × ⟨𝐹⟩, where Γ𝑞 = ⟨𝛾𝑞⟩
is the subgroup of 𝑞−th powers, Γ𝑞 := {𝑎𝑞, 𝑎 ∈ Γ}. The HSM𝐶𝐿
assumption (introduced in [28], cf Definition B.3) states that given
an element 𝛿 of Γ it is hard to tell if 𝛿 ∈ Γ𝑞 or not. It can be seen as
an adaptation of Paillier’s DCR assumption in the CL setting.
The class group generator CGGen depicted in Fig. 1 outputs
all these parameters: G, 𝐺, 𝐹, 𝛾, 𝛾𝑞, ˜𝑞. Note that this is a public coin
setup: the seeds of the probabilistic prime generators to compute
𝑝, ˜𝑞 and 𝐺 are published.
The fast variant of the CL encryption scheme that we consider
is described in Appendix C. As a side contribution, we prove in
Theorem C.1 that with a slight modification of the definition of
𝐺, the indistinguishability of the scheme holds under the HSM𝐶𝐿
assumption (the security of this variant was not really analysed in
[27]).
Our new homomorphic time-lock puzzle from class group is
depicted in Figure 2. The setup consists in running CGGen and
computing 𝐻 := 𝐺2T. Then the puzzle is
𝑍 := (𝑍1, 𝑍2) := (𝐺𝑟 ,𝜓𝑞(𝐻𝑟) · 𝐹𝑚)
Note that 𝑍2 ∈ Γ and 𝜓𝑞(𝐻𝑟) is an element of Γ𝑞. As a result,
retrieving 𝐹𝑚 from 𝑍2 corresponds to solving the computational
subgroup decomposition problem Γ ≃ Γ𝑞 × ⟨𝐹⟩ associated to the
HSM𝐶𝐿 assumption. This is done when solving the puzzle, by com-
puting 𝜓𝑞(𝐻𝑟) as 𝜓𝑞((𝐺𝑟)2T), and then retrieving 𝑚 from 𝐹𝑚 using
the SolveDL algorithm. The homomorphic property of the scheme
follows from the Elgamal structure of the puzzle and the fact that
𝜓𝑞 is an homomorphism.
that 𝑝𝑞 ≡ −1 (mod 4) and (𝑞/𝑝) = −1