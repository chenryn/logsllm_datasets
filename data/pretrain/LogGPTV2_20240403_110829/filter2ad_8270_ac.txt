          byte[] arrayOfByte3 = CommonUtils.readResource(paramString);
          if (arrayOfByte3.length == 0) {
             CommonUtils.print_error("Could not find sleeved resource: " + paramString + " [ERROR]");
          } else {
             CommonUtils.print_stat("Used internal resource: " + paramString);
          }
          return arrayOfByte3;
       }
    }
我们重点来看这个解密。
    /*
    * 该函数是从 license文件中获取的 2 个 key 进行一些列的验证解密；
    * 最终将加密的 dll 文件进行解密返回。
    * paramArrayOfbyte 是源文件读取出来的 byte[] 数据
    */
    public byte[] decrypt(byte[] paramArrayOfbyte) {
       try {
          // 取 paramArrayOfbyte 的开头至倒数 -16 的数据，这段数据是 dll 的主体数据
          byte[] arrayOfByte1 = Arrays.copyOfRange(paramArrayOfbyte, 0, paramArrayOfbyte.length - 16);
          // 取 paramArrayOfbyte 的剩下的 16 位数据。
          byte[] arrayOfByte2 = Arrays.copyOfRange(paramArrayOfbyte, paramArrayOfbyte.length - 16, paramArrayOfbyte.length);
          byte[] arrayOfByte3 = null;
          synchronized(this) {
             // 先用我们在 license中生成的 hash_key 作为密钥，对 arrayOfByte1 进行摘要计算
             this.mac.init(this.hash_key);
             arrayOfByte3 = this.mac.doFinal(arrayOfByte1);
          }
          // 取 arrayOfByte3 的前 16位数据
          byte[] arrayOfByte4 = Arrays.copyOfRange(arrayOfByte3, 0, 16);
          // 两两对比，如果相等，则步入 else。该对比，主要防止 dll 被篡改。
          if (!MessageDigest.isEqual(arrayOfByte2, arrayOfByte4)) {
             CommonUtils.print_error("[Sleeve] Bad HMAC on " + paramArrayOfbyte.length + " byte message from resource");
             return new byte[0];
          } else {
             byte[] arrayOfByte5 = null;
             synchronized(this) {
                // 在对比成功后，将使用 key 对 dll主体内容数据进行 AES 解密
                arrayOfByte5 = this.do_decrypt(this.key, arrayOfByte1);
             }
             DataInputStream dataInputStream = new DataInputStream(new ByteArrayInputStream(arrayOfByte5));
             int i = dataInputStream.readInt();
             int j = dataInputStream.readInt();
             if (j >= 0 && j  经过有符号转换 int，结果为29999999 -> 用于判断是否永久有效（是否为发行版）
    4位 -> 经过有符号转换 int，结果不为 0 即可 -> 水印
    1位 -> 该 byte 值必须是大于 40 且小于 128 -> 判断认证是否适合 4.x
    1位 -> 该 byte 值必须是 16 -> key 的长度
    16位 -> 该 key 理论上无法逆推
    要注意的是：处理 .auth 文件的时候，还需要判断文件头...，因此还需要填充文件头，但按照分析下来，是 4 个字节，但在实测过程中，发现是 6 个字节
    因此 .auth 文件的必要数据是 32 位 -> 6 + 4 + 4 + 1 + 1 + 16
因此我们只需要逆推 `DataParser` 中的 `readInt()` 就可以得到想要的内容。
因此在解析 `.auth` 后返回的 `byte[]` 应该为：
    byte[] decrypt = { 1, -55, -61, 127, 0, 0, 34, -112, 127, 16, 27, -27, -66, 82, -58, 37, 92, 51, 85, -114, -118, 28, -74, 103, -53, 6 };
代入测试：
##### 4.1.2、生成 RSA 公钥、私钥及签名
该步骤，主要是生成 RSA 公私钥，然后使用私钥对上述生成的数据进行加密（注意，当你用私钥加密的时候，需要用公钥解密）后保存到
`cobaltstrike.auth`中。
你可以使用 `openssl` 生成，使用 2048 位即可，也可以使用代码生成，参考代码如下：
    import javax.crypto.BadPaddingException;
    import javax.crypto.Cipher;
    import javax.crypto.IllegalBlockSizeException;
    import javax.crypto.NoSuchPaddingException;
    import java.io.*;
    import java.security.*;
    import java.util.Base64;
    public class RSAKeyPairGenerator {
        private PrivateKey privateKey;
        private PublicKey publicKey;
        public RSAKeyPairGenerator() throws NoSuchAlgorithmException {
            KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
            keyGen.initialize(2048);
            KeyPair pair = keyGen.generateKeyPair();
            this.privateKey = pair.getPrivate();
            this.publicKey = pair.getPublic();
        }
        // 将byte 写入文件
        public void byte2File(String path, byte[] data) throws IOException {
            File f = new File(path);
            f.getParentFile().mkdirs();
            FileOutputStream fos = new FileOutputStream(f);
            fos.write(data);
            fos.flush();
            fos.close();
        }
        public PrivateKey getPrivateKey() {
            return privateKey;
        }
        public PublicKey getPublicKey() {
            return publicKey;
        }
        // 加密数据
        public byte[] encryptPri(byte[] data, PrivateKey privateKey) throws BadPaddingException, IllegalBlockSizeException, InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException {
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.ENCRYPT_MODE, this.privateKey);
            return cipher.doFinal(data);
        }
        public static void main(String[] args) throws NoSuchAlgorithmException, IOException, IllegalBlockSizeException, InvalidKeyException, NoSuchPaddingException, BadPaddingException {
            RSAKeyPairGenerator PairGenerator = new RSAKeyPairGenerator();
            byte[] data = { -54, -2, -64, -45, 0, 43, 1, -55, -61, 127, 0, 0, 34, -112, 127, 16, 27, -27, -66, 82, -58, 37, 92, 51, 85, -114, -118, 28, -74, 103, -53, 6 };
            byte[] rsaByte = PairGenerator.encryptPri(data, PairGenerator.getPrivateKey());
            PairGenerator.byte2File("RSA/cobaltstrike.auth", rsaByte);
            PairGenerator.byte2File("RSA/authkey.private", PairGenerator.getPrivateKey().getEncoded());
            PairGenerator.byte2File("RSA/authkey.pub", PairGenerator.getPublicKey().getEncoded());
        }
    }
成功生成，剩下的就是替换相关文件，再更改 `AuthCrypto.load()` 中的 MD5 值。
#### 4.2、硬编码 key
直接在 `Authorization()` 中注释掉以下代码行：
    byte[] arrayOfByte2 = authCrypto.decrypt(arrayOfByte1);
    注释部分可以扩大到读取 cobaltstrike.auth 部分
然后直接将解析后的 byte[] 进行写入
    byte[] arrayOfByte2 = { 1, -55, -61, 127, 0, 0, 34, -112, 127, 16, 27, -27, -66, 82, -58, 37, 92, 51, 85, -114, -118, 28, -74, 103, -53, 6 };
#### 4.3、CSHook.jar
以上两种方法都对 Jar 包进行修改，那我们再来看看不对源码进行修改的前提下进行 hook。Hook 的原理就是热替换，热替换的核心就在于
`Instrumentation` 的两个方法：
    // addTransformer() 用来注册类的修改器；
    void addTransformer(ClassFileTransformer transformer, boolean canRetransform);
    // retransformClasses() 会让类重新加载，从而使得注册的类修改器能够重新修改类的字节码。
    void retransformClasses(Class... classes) throws UnmodifiableClassException;
这里主要是使用了 `addTransformer()`，其实原理很简单，就是将 4.2 中编译好的 `Authorization()`
类进行热替换，从而不去修改 jar
包的情况下完成认证。这部分知识可以参考：[javaagent使用指南](https://www.cnblogs.com/rickiyang/p/11368932.html)
##### 4.3.1、读取 Authorization.class
首先先读取改写好的 `Authorization.class`：
    // 先读取 Authorization.class，byte[] 转 base64
    public void toByteArray(String filename) throws IOException{
        File f = new File(filename);
        if (!f.exists()) {
            throw new FileNotFoundException(filename);
        }
        ByteArrayOutputStream bos = new ByteArrayOutputStream((int) f.length());
        BufferedInputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(f));
            int buf_size = 1024;
            byte[] buffer = new byte[buf_size];
            int len = 0;
            while (-1 != (len = in.read(buffer, 0, buf_size))) {
                bos.write(buffer, 0, len);
            }
            String base64Str = Base64.getEncoder().encodeToString(bos.toByteArray());
            System.out.println(base64Str);
            //return base64Str;
        } catch (IOException e) {
            e.printStackTrace();
            throw e;
        } finally {
            try {
                in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            bos.close();
        }
    }
然后再编写 `addTransformer()` 的调用类
##### 4.3.2、Transformer 类
    public class Transformer implements ClassFileTransformer {
        public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
            if (className.equals("common/Authorization")) {
                String base64class = "此处为 4.3.1 小节生成的内容";
                System.out.println("Found desired class: " + className);
                classfileBuffer = Base64.getDecoder().decode(base64class);
            }
            return classfileBuffer;
        }
    }
##### 4.3.3、premain
    public class CSHook {
        public static void premain(String paramString, Instrumentation paramInstrumentation) {
            System.out.println("Hook start");
            Transformer transformer = new Transformer();
            paramInstrumentation.addTransformer(transformer);
        }
    }
注意：指定 `premain` 方法的位置，这里选择了修改 `META-INF/MANIFEST.MF` 的内容，将 `Main-Class` 修改成
`Premain-Class`。编译生成即可。
最后，这里提供 CS 4.1 的 key ：
    byte[] arrayOfByte2 = { 1, -55, -61, 127, 0, 0, 34, -112, 127, 16, -128, -29, 42, 116, 32, 96, -72, -124, 65, -101, -96, -63, 113, -55, -86, 118 };
### 0x05 参考
[RSA加密、解密、签名、验签的原理及方法](https://www.cnblogs.com/pcheng/p/9629621.html)
[Java加密解密之MAC（消息认证码）](https://blog.csdn.net/x_san3/article/details/80613605)
[暴力解决一切？破解AES也是妄想！](https://www.sdnlab.com/21145.html)
[Patch Cobalt Strike 4.0](https://blog.gzsec.org/post/Patch-Cobalt-Strike-4.0/)
[CobaltStrike4.0无Hook蛮力Cracked
License思路](https://ca3tie1.github.io/post/cobaltstrike40-wu-hook-man-li-cracked-license-si-lu/)
[Cobaltstrike 4破解之
我自己给我自己颁发license](https://mp.weixin.qq.com/s/Pneu8R0zoG0ONyFXF9VLpg)