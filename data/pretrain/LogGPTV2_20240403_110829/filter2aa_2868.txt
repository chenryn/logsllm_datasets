# HTTP请求走私

## 概述
在讨论HTTP请求走私之前，我们需要先了解一个基本问题：HTTP请求如何标识一个请求的结束，尤其是在POST请求中。有两种主要方式来界定请求的结束：
1. 通过 `Content-Length` 请求头来指定请求体的长度。
2. 在分块传输时，使用 `Transfer-Encoding: chunked` 请求头，并在请求体的最后一行添加 `0\r\n\r\n` 来表示请求结束。

根据HTTP/1.1规范，当这两种请求头同时存在时，应忽略 `Content-Length` 而以分块传输为准。然而，在实际应用中，反向代理链中的多个服务器可能对这些标准的支持程度不一，从而导致一些非预期的效果。这就是HTTP请求走私漏洞产生的原因。

## 漏洞原理
HTTP请求走私漏洞通常发生在前后端服务器对请求结束标志的处理不一致时。攻击者可以构造一种特殊的请求，使得前端服务器将其视为一个完整的请求进行转发，而后端服务器却误认为这是两个不同的请求。

### 示例
假设我们有一个请求如下：

```http
POST /search HTTP/1.1
Host: xxx.net
...
Content-Type: application/x-www-form-urlencoded
Content-Length: 50
Transfer-Encoding: chunked
q=something
0
GET /404 HTTP/1.1
X-Ignore: eat
```

在这个例子中：
- 前端服务器读取 `Content-Length: 50`，将整个请求视为一个请求并转发给后端。
- 后端服务器以 `Transfer-Encoding: chunked` 为标准，将 `0\r\n\r\n` 视为请求结束，并将后续部分视为下一个请求。

这会导致后端服务器错误地处理请求，从而产生安全风险。

## 类型与利用方法
### CL-TE类型
在这种类型的攻击中，前端服务器使用 `Content-Length` 来界定请求结束，而后端服务器使用 `Transfer-Encoding: chunked`。攻击者可以通过构造特定的请求来实现请求走私。

#### 示例
```http
POST /search HTTP/1.1
Host: xxx.net
...
Content-Type: application/x-www-form-urlencoded
Content-Length: 50
Transfer-Encoding: chunked
q=something
0
GET /404 HTTP/1.1
X-Ignore: eat
```

### TE-CL类型
在这种类型的攻击中，前端服务器使用 `Transfer-Encoding: chunked` 来界定请求结束，而后端服务器使用 `Content-Length`。攻击者同样可以通过构造特定的请求来实现请求走私。

#### 示例
```http
POST /search HTTP/1.1
Host: xxx.net
...
Content-Type: application/x-www-form-urlencoded
Content-Length: 13
Transfer-Encoding: chunked
q=something
POST /404 HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 15
x=1
0
```

### 畸形请求头绕过
即使前后端服务器的标准一致，攻击者也可以通过构造畸形的 `Transfer-Encoding` 头来绕过这种一致性，从而实现请求走私。

#### 示例
```http
POST /404 HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 15
x=1
0
POST[空格]
```

## 攻击场景
### 绕过前端访问控制
攻击者可以利用请求走私绕过前端的安全访问控制，直接将请求发送到后端业务逻辑。例如，攻击者可以构造一个请求，使得后端服务器将后续请求拼接成一个新的请求，从而绕过前端的访问控制。

### 窃取Cookie
攻击者可以利用请求走私窃取用户的敏感信息，如Cookie。通过构造特定的请求，攻击者可以将受害者的请求拼接到自己的请求中，从而获取受害者的Cookie。

### 水坑型XSS
如果无法找到存储型间接回显点，攻击者可以利用一次性直接回显的特点，结合反射型XSS漏洞，使受害者触发XSS攻击。

### 任意重定向
攻击者可以利用请求走私和某些Web服务器（如Apache和IIS）的特性，强制受害者重定向到恶意域名。

### Web缓存投毒
攻击者还可以利用请求走私和Web缓存机制，将恶意内容缓存下来，从而影响后续的所有用户。

## 结论
HTTP请求走私是一种复杂的攻击技术，利用了前后端服务器对请求结束标志处理不一致的漏洞。了解其原理和攻击方法对于防范此类攻击至关重要。

原文作者: hosch3n  
原文链接: [https://hosch3n.github.io/2020/07/22/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/](https://hosch3n.github.io/2020/07/22/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/)  
许可协议: 知识共享署名-非商业性使用 4.0 国际许可协议

由 Hexo 强力驱动 | 主题 - Even  
©2020 hosch3n