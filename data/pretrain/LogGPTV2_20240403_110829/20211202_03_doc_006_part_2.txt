In Step 1, take care to not walk into endless cycles.
⚠
#
Computing Connected Components (Query Plan)
{…}: Reachable front nodes, 8ᵢ derived component ID:
₁ ₂
•₁ ⇐ ﹛₁﹐₂﹐₃﹐₄﹜ A B ﹛₂﹐₁﹐₃﹐₄﹜ ⇒ •₁
₅
•₅ ⇐ ﹛₅﹜ E
₄ ₃
•₁ ⇐ ﹛₄﹐₂﹐₃﹐₁﹜ D C ﹛₃﹐₄﹐₂﹐₁﹜ ⇒ •₁
•₆ ⇐ ﹛₆﹐₇﹜ F G ﹛₇﹐₆﹜ ⇒ •₆
⁶ ⁷
Tasks for further post-processing:
Assign sane component IDs (8₁,8₂,8₃).
Extract subgraphs based on components' node sets.
#
Recursive Graph Walks, From All Nodes at the Same Time
WITH RECURSIVE
walks(node, front) AS (
SELECT n.node, n.node AS front -- (è,è) ∈ walks: we can
FROM nodes AS n -- reach ourselves
UNION -- only èö≥ front nodes will be recorded ✔
SELECT w.node, g."to" AS front -- record front node
FROM walks AS w, graph AS g -- ⎱ finds all incident
WHERE w.front = g."from" -- ⎰ graph edges
)
Invariant: If (è,T) ∈ walks, node T is reachable from è.
#
Recursive Graph Walks, From All Nodes at the Same Time
₁ ₂ 1₀ 1×1⥁ 2×1⥁ 3×1⥁
A B ┌────┬─────┐ ┌────┬─────┐ ┌────┬─────┐ ┌────┬─────┐
₅ │node│front│ │node│front│ │node│front│ │node│front│
E ├────┼─────┤ ├────┼─────┤ ├────┼─────┤ ├────┼─────┤
₄ ₃ │ 1 │ 1 │ │ 1 │ 2 │ │ 1 │ 3 │ └────┴─────┘
D C │ 2 │ 2 │ │ 2 │ 1 │ │ 1 │ 4 │
│ 3 │ 3 │ │ 2 │ 3 │ │ 3 │ 1 │
F G │ 4 │ 4 │ │ 2 │ 4 │ │ 4 │ 1 │
⁶ ⁷ │ 5 │ 5 │ │ 3 │ 2 │ └────┴─────┘
│ 6 │ 6 │ │ 3 │ 4 │
│ 7 │ 7 │ │ 4 │ 2 │
└────┴─────┘ │ 4 │ 3 │
│ 6 │ 7 │
│ 7 │ 6 │
└────┴─────┘
3 ┆ Recursive Text Processing
Tree path finding and connected component search used
node adjacency information to explore graph structure,
iteration by iteration.
In a variant of this theme, let us view text as lists of
adjacent characters that we recursively explore.
We particularly use the observation (let µ :: text,
è ≥ 1):
µ = left(µ, è) || right(µ, -è)
=────?───@ =─────?────@
prefix of µ of length è all but the first è chars of µ
#
Set-Oriented (Bulk) Regular Expression Matching
Goal: Given a — potentially large — table of input
strings, validate all strings against a regular expression:2
┌─────┐ ┌─────┬──────┐
│input│ │input│parse?│
├─────┤ ├─────┼──────┤
│ µ₁ │ │ µ₁ │ ✔ │
│ µ₂ │ │ µ₂ │ ✘ │
│ ⋮ │ │ ⋮ │ ⋮ │
│ µₙ │ │ µₙ │ ✔ │
└─────┘ └─────┴──────┘
Plan: Parse all ;ᵢ in parallel (run  0
AND m.state = f.source
AND strpos(f.labels, left(m.input, 1)) > 0
)
#
Matching Progess (by Compound / by Step)
➊ Focus on indivdiual compound ➋ Focus on parallel progress
┌─────────┬────┬─────┬────────┐ ╎ ┌────┬─────────┬─────┬────────┐
│compound │step│state│ input │ ━━━━━ │step│compound │state│ input │
├─────────┼────┼─────┼────────┤ ━━━━━ ├────┼─────────┼─────┼────────┤
│citrate │ 0 │ 0 │C₆H₅O₇³⁻│ ╎ │ 0 │citrate │ 0 │C₆H₅O₇³⁻│
│citrate │ 1 │ 1 │₆H₅O₇³⁻ │ ╎ │ 0 │hydronium│ 0 │H₃O⁺ │
│citrate │ 2 │ 1 │H₅O₇³⁻ │ ╎ │ 1 │citrate │ 1 │₆H₅O₇³⁻ │
│citrate │ 3 │ 1 │₅O₇³⁻ │ ╎ │ 1 │hydronium│ 1 │₃O⁺ │
│citrate │ 4 │ 1 │O₇³⁻ │ ╎ │ 2 │citrate │ 1 │H₅O₇³⁻ │
│citrate │ 5 │ 1 │₇³⁻ │ ╎ │ 2 │hydronium│ 1 │O⁺ │
│citrate │ 6 │ 1 │³⁻ │ ╎ │ 3 │citrate │ 1 │₅O₇³⁻ │
│citrate │ 7 │ 2 │⁻ │ empty ╎ │ 3 │hydronium│ 1 │⁺ │
│citrate │ 8 │ 3 │ε string ╎ │ 4 │citrate │ 1 │O₇³⁻ │
╪ ╪ ╪ ╪ ╪ ╎ │ 4 │hydronium│ 3 │ε │
│hydronium│ 0 │ 0 │H₃O⁺ │ ╎ │ 5 │citrate │ 1 │₇³⁻ │
│hydronium│ 1 │ 1 │₃O⁺ │ ╎ │ 6 │citrate │ 1 │³⁻ │
│hydronium│ 2 │ 1 │O⁺ │ ╎ │ 7 │citrate │ 2 │⁻ │
│hydronium│ 3 │ 1 │⁺ │ final ╎ │ 8 │citrate │ 3 │ε │
│hydronium│ 4 │ 3 state ╎ ╪ ╪ ╪ ╪ ╪
└─────────┴────┴─────┴────────┘ ╎ └────┴─────────┴─────┴────────┘
Termination and Bag Semantics (UNION ALL)
The recursive CTE in regular expression matching uses bag
semantics (UNION ALL). Will matching always terminate?
Column step is increased in each iteration, thusFFG
1. 1⥁ will never produce duplicate rows and
2. there is no point in computing the difference 1⥁(t) \ r
in iterate(1⥁, 1₀): 1⥁(t) ∩ r = ∅.
1⥁ is guaranteed to evaluate to ∅∅ at one point, sinceFFG
1. one character is chopped off in each iteration and
length(m.input) > 0 will yield false eventually, or
2. the FSM gets stuck due to an invalid input character
(strpos(f.labels, left(m.input, 1)) yields 0).
#
4 ┆ Recursive Array Processing: Solving Sudoku3 Puzzles
┏━━━┯━━━┯━━━┳━━━┯━━━┯━━━┳━━━┯━━━┯━━━┓
┃ 5 │ 3 │ ┃ │ 7 │ ┃ │ │ ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
Fill in the blanks with digits ∈
┃ 6 │ │ ┃ 1 │ 9 │ 5 ┃ │ │ ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
{1,…,9} such that
┃ │ 9 │ 8 ┃ │ │ ┃ │ 6 │ ┃
┣━━━┿━━━┿━━━╋━━━┿━━━┿━━━╋━━━┿━━━┿━━━┫
┃ 8 │ │ ┃ │ 6 │ ┃ │ │ 3 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
1. no 3×3 square and
┃ 4 │ │ ┃ 8 │ │ 3 ┃ │ │ 1 ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ 7 │ │ ┃ │ 2 │ ┃ │ │ 6 ┃
┣━━━┿━━━┿━━━╋━━━┿━━━┿━━━╋━━━┿━━━┿━━━┫ 2. no row or column
┃ │ 6 │ ┃ │ │ ┃ 2 │ 8 │ ┃
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ │ │ ┃ 4 │ 1 │ 9 ┃ │ │ 5 ┃
carries the same digit twice.
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
┃ │ │ ┃ │ 8 │ ┃ │ 7 │ 9 ┃
┗━━━┷━━━┷━━━┻━━━┷━━━┷━━━┻━━━┷━━━┷━━━┛
Here: encode board as digit array.
3 Japanese: sū(ji) + doku(shin), “number with single status.”
#
Row-Major Array-Encoding of a 2D Grid
┏━━━┯━━━┯━━━┳━━━┯━━━┯━━━┳━━━┯━━━┯━━━┓
₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
Build row-wise int[] array
₉
┠───┼───┼───╂───┼───┼───╂───┼───┼───┨
of 81 cells ∈ {0,…,9},
with 0 ≡ blank.
Derive row/column/square index from cell 0 ∈ {0,…,80}:
Row of 0: (0 / 9) * 9 ∈ {0,9,18,27,36,45,54,63,72}
Column of 0: 0 % 9 ∈ {0,1,2,3,4,5,6,7,8}
Square of 0: ((0 / 3) % 3) * 3 + (0 / 27) * 27 ∈
{0,3,6,27,30,33,54,57,60}
(Clunky — But: relational encodings of grids upcoming.)
#
Finding All Puzzle Solutions (Query Plan)
board blank
{5,3,0,0,7,…} J ∈ {0,…,80} ∪ {□}
3
Table sudoku
1. Invariant:
Column board encodes a valid (but partial) Sudoku board
in which the first blank (≡ 0) occurs at index ”. If
the board is complete, ” = □.
2. In each iteration, fill in all digits ∈ {1,…,9} at ” and
keep all boards that turn out valid.
#
Finding All Puzzle Solutions (SQL Code)
WITH RECURSIVE
sudoku(board, blank) AS (
SELECT i.board AS board, array_position(i.board, 0)-1 AS blank
FROM input AS i -- 3
-- encodes blank
UNION ALL
SELECT s.board[1:s.”] || fill_in || s.board[s.”+2:81] AS board,
array_position(
s.board[1:s.”] || fill_in || s.board[s.”+2:81], 0)-1 AS blank
FROM sudoku AS s(board, ”), generate_series(1,9) AS fill_in
-- =──────────────?──────────────@
-- try to fill in all 9 digits
WHERE s.” IS NOT NULL AND NOT EXISTS (
SELECT NULL
FROM generate_series(1,9) AS i
-- =───────────?───────────@
-- 9 cells in row/column/square
WHERE fill_in IN (‹ú‘ô‘\µ ‘è UV≥/0V’÷Wè/µ1÷õUö VT s.” õ\ VTTµö\ i›))
)
5 ┆ Emulating Physical Operator Behavior: Loose Index Scans
Implement SELECT DISTINCT t.dup FROM t efficiently, given