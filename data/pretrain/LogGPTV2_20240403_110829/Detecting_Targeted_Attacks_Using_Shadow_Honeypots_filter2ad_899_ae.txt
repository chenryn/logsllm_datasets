speciﬁc, application-aware ﬁlters expressed as programs
in a simple language. These programs roughly mirror the
state of the protected service, allowing for more intelli-
gent application of content ﬁlters, as opposed to simplis-
tic payload string matching.
HoneyStat [13] runs sacriﬁcial services inside a vir-
tual machine, and monitors memory, disk, and network
events to detect abnormal behavior. For some classes of
attacks (e.g., buffer overﬂows), this can produce highly
accurate alerts with relatively few false positives, and can
detect zero-day worms. Although the system only pro-
tects against scanning worms, “active honeypot” tech-
niques [58] may be used to make it more difﬁcult for an
automated attacker to differentiate between HoneyStats
and real servers. The Internet Motion Sensor [9] is a dis-
tributed blackhole monitoring system aimed at measur-
ing, characterizing, and tracking Internet-based threats,
including worms. [12] explores the various options in lo-
cating honeypots and correlating their ﬁndings, and their
140
14th USENIX Security Symposium
USENIX Association
impact on the speed and accuracy in detecting worms and
other attacks.
Reference [35] proposes the use of honeypots with in-
strumented versions of software services to be protected,
coupled with an automated patch-generation facility. This
allows for quick (< 1 minute) ﬁxing of buffer overﬂow
vulnerabilities, even against zero-day worms, but depends
on scanning behavior on the part of worms. Toth and
Kruegel [48] propose to detect buffer overﬂow payloads
(including previously unseen ones) by treating inputs re-
ceived over the network as code fragments; they show
that legitimate requests will appear to contain relatively
short sequences of valid x86 instruction opcodes, com-
pared to attacks that will contain long sequences. They
integrate this mechanism into the Apache web server, re-
sulting in a small performance degradation.
The HACQIT architecture [16, 31, 29, 30] uses var-
ious sensors to detect new types of attacks against se-
cure servers, access to which is limited to small num-
bers of users at a time. Any deviation from expected or
known behavior results in the possibly subverted server
to be taken off-line. A sandboxed instance of the server
is used to conduct “clean room” analysis, comparing the
outputs from two different implementations of the ser-
vice (in their prototype, the Microsoft IIS and Apache
web servers were used to provide application diver-
sity). Machine-learning techniques are used to general-
ize attack features from observed instances of the attack.
Content-based ﬁltering is then used, either at the ﬁrewall
or the end host, to block inputs that may have resulted in
attacks, and the infected servers are restarted. Due to the
feature-generalization approach, trivial variants of the at-
tack will also be caught by the ﬁlter. [49] takes a roughly
similar approach, although ﬁltering is done based on port
numbers, which can affect service availability. Cisco’s
Network-Based Application Recognition (NBAR) [2] al-
lows routers to block TCP sessions based on the presence
of speciﬁc strings in the TCP stream. This feature was
used to block CodeRed probes, without affecting regu-
lar web-server access. Porras et al. [27] argue that hy-
brid defenses using complementary techniques (in their
case, connection throttling at the domain gateway and a
peer-based coordination mechanism), can be much more
effective against a wide variety of worms.
DOMINO [57] is an overlay system for cooperative in-
trusion detection. The system is organized in two layers,
with a small core of trusted nodes and a larger collection
of nodes connected to the core. The experimental analy-
sis demonstrates that a coordinated approach has the po-
tential of providing early warning for large-scale attacks
while reducing potential false alarms. Reference [59] de-
scribes an architecture and models for an early warning
system, where the participating nodes/routers propagate
alarm reports towards a centralized site for analysis. The
question of how to respond to alerts is not addressed, and,
similar to DOMINO, the use of a centralized collection
and analysis facility is weak against worms attacking the
early warning infrastructure.
Suh et al.
[44], propose a hardware-based solution
that can be used to thwart control-transfer attacks and re-
strict executable instructions by monitoring “tainted” in-
put data.
In order to identify “tainted” data, they rely
on the operating system. If the processor detects the use
of this tainted data as a jump address or an executed in-
struction, it raises an exception that can be handled by
the operating system. The authors do not address the is-
sue of recovering program execution and suggest the im-
mediate termination of the offending process. DIRA [37]
is a technique for automatic detection, identiﬁcation and
repair of control-hijaking attacks. This solution is imple-
mented as a GCC compiler extension that transforms a
program’s source code adding heavy instrumentation so
that the resulting program can perform these tasks. The
use of checkpoints throughout the program ensures that
corruption of state can be detected if control sensitive
data structures are overwritten. Unfortunately, the per-
formance implications of the system make it unusable as
a front line defense mechanism. Song and Newsome [24]
propose dynamic taint analysis for automatic detection of
overwrite attacks. Tainted data is monitored throughout
the program execution and modiﬁed buffers with tainted
information will result in protection faults. Once an at-
tack has been identiﬁed, signatures are generated using
automatic semantic analysis. The technique is imple-
mented as an extension to Valgrind and does not require
any modiﬁcations to the program’s source code but suf-
fers from severe performance degradation.
The Safe Execution Environment (SEE) [45] allows
users to deploy and test untrusted software without fear
of damaging their system. This is done by creating a
virtual environment where the software has read access
to the real data; all writes are local to this virtual envi-
ronment. The user can inspect these changes and decide
whether to commit them or not. We envision use of this
technique for unrolling the effects of ﬁlesystem changes
in our system, as part of our future work plans. A similar
proposal is presented in [21] for executing untrusted Java
applets in a safe “playground” that is isolated from the
user’s environment.
USENIX Association
14th USENIX Security Symposium
141
7 Conclusion
We have described a novel approach to dealing with
zero-day attacks by combining features found today in
honeypots and anomaly detection systems. The main ad-
vantage of this architecture is providing system designers
the ability to ﬁne tune systems with impunity, since any
false positives (legitimate trafﬁc) will be ﬁltered by the
underlying components.
We have implemented this approach in an architecture
called Shadow Honeypots. In this approach, we employ
an array of anomaly detectors to monitor and classify all
trafﬁc to a protected network; trafﬁc deemed anomalous
is processed by a shadow honeypot, a protected instru-
mented instance of the application we are trying to pro-
tect. Attacks against the shadow honeypot are detected
and caught before they infect the state of the protected ap-
plication. This enables the system to implement policies
that trade off between performance and risk, retaining the
capability to re-evaluate this trade-off effortlessly.
Finally, the preliminary performance experiments indi-
cate that despite the considerable cost of processing sus-
picious trafﬁc on our Shadow Honeypots and overhead
imposed by instrumentation, our system is capable of sus-
taining the overall workload of protecting services such
as a Web server farm, as well as vulnerable Web browsers.
In the future, we expect that the impact on performance
can be minimized by reducing the rate of false positives
and tuning the AD heuristics using a feedback loop with
the shadow honeypot. Our plans for future work also in-
clude evaluating different components and extending the
performance evaluation.
Acknowledgments
The work of K. Anagnostakis, P. Akritidis, K. Xini-
dis and E. Markatos was supported in part by the GSRT
project EAR (USA-022) funded by the Greek Secretariat
for Research and Technology and by the IST project
NoAH (011923) funded by the European Union. P. Akri-
tidis and E. Markatos are also with the University of
Crete.
References
[1] i-Bench.
http://http://www.veritest.com/
benchmarks/i-bench/default.asp.
[2] Using Network-Based Application Recognition and Access Con-
trol Lists for Blocking the ”Code Red” Worm at Network Ingress
Points. Technical report, Cisco Systems, Inc.
[3] CERT Advisory CA-2001-19:
‘Code Red’ Worm Exploiting
Buffer Overﬂow in IIS Indexing Service DLL. http://www.
cert.org/advisories/CA-2001-19.html, July 2001.
A complete benchmarking and regression
http://freshmeat.net/projects/
[4] ApacheBench:
testing suite.
apachebench/, July 2003.
[5] Cert Advisory CA-2003-04: MS-SQL Server Worm. http://
www.cert.org/advisories/CA-2003-04.html, Jan-
uary 2003.
[6] Microsoft Security Bulletin MS04-028:
Buffer Over-
run in JPEG Processing Could Allow Code Execution.
http://www.microsoft.com/technet/security/
bulletin/MS04-028.mspx, September 2004.
[7] US-CERT Technical Cyber Security Alert TA04-217A: Multi-
ple Vulnerabilities in libpng. http://www.us-cert.gov/
cas/techalerts/TA04-217A.html, August 2004.
[8] P. Akritidis, K. Anagnostakis, and E. P. Markatos. Efﬁcient
content-based ﬁngerprinting of zero-day worms. In Proceedings
of the IEEE International Conference on Communications (ICC),
May 2005.
[9] M. Bailey, E. Cooke, F. Jahanian, J. Nazario, and D. Watson. The
Internet Motion Sensor: A Distributed Blackhole Monitoring Sys-
tem. In Proceedings of the 12th ISOC Symposium on Network and
Distributed Systems Security (SNDSS), pages 167–179, February
2005.
[10] M. Bhattacharyya, M. G. Schultz, E. Eskin, S. Hershkop, and
S. J. Stolfo. MET: An Experimental System for Malicious Email
Tracking. In Proceedings of the New Security Paradigms Work-
shop (NSPW), pages 1–12, September 2002.
[11] C. Clark, W. Lee, D. Schimmel, D. Contis, M. Kone, and
A. Thomas. A Hardware Platform for Network Intrusion De-
tection and Prevention. In Proceedings of the 3rd Workshop on
Network Processors and Applications (NP3), February 2004.
[12] E. Cook, M. Bailey, Z. M. Mao, and D. McPherson. Toward Un-
derstanding Distributed Blackhole Placement. In Proceedings of
the ACM Workshop on Rapid Malcode (WORM), pages 54–64,
October 2004.
[13] D. Dagon, X. Qin, G. Gu, W. Lee, J. Grizzard, J. Levine, and
H. Owen. HoneyStat: Local Worm Detection Using Honepots.
In Proceedings of the 7th International Symposium on Recent
Advances in Intrusion Detection (RAID), pages 39–58, October
2004.
[14] E. N. Elnozahy, L. Alvisi, Y.-M. Wang, and D. B. Johnson. A sur-
vey of rollback-recovery protocols in message-passing systems.
ACM Comput. Surv., 34(3):375–408, 2002.
[15] J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast
Portscan Detection Using Sequential Hypothesis Testing. In Pro-
ceedings of the IEEE Symposium on Security and Privacy, May
2004.
[16] J. E. Just, L. A. Clough, M. Danforth, K. N. Levitt, R. Maglich,
J. C. Reynolds, and J. Rowe. Learning Unknown Attacks – A
Start. In Proceedings of the 5th International Symposium on Re-
cent Advances in Intrusion Detection (RAID), October 2002.
[17] H. Kim and B. Karp. Autograph: Toward Automated, Distributed
Worm Signature Detection. In Proceedings of the 13th USENIX
Security Symposium, pages 271–286, August 2004.
[18] C. Kruegel, F. Valeur, G. Vigna, and R. Kemmerer. Stateful Intru-
sion Detection for High-Speed Networks. In Proceedings of the
IEEE Symposium on Security and Privacy, pages 285–294, May
2002.
142
14th USENIX Security Symposium
USENIX Association
[19] C. Kruegel and G. Vigna. Anomaly Detection of Web-based At-
tacks. In Proceedings of the 10th ACM Conference on Computer
and Communications Security (CCS), pages 251–261, October
2003.
[20] J. G. Levine, J. B. Grizzard, and H. L. Owen. Using Honeynets
to Protect Large Enterprise Networks. IEEE Security & Privacy,
2(6):73–75, November/December 2004.
[21] D. Malkhi and M. K. Reiter. Secure execution of java applets us-
ing a remote playground. IEEE Trans. Softw. Eng., 26(12):1197–
1209, 2000.
[22] A. J. Malton. The Denotational Semantics of a Functional Tree-
Manipulation Language. Computer Languages, 19(3):157–168,
1993.
[23] D. Moore, C. Shannon, G. Voelker, and S. Savage. Internet Quar-
antine: Requirements for Containing Self-Propagating Code. In
Proceedings of the IEEE Infocom Conference, April 2003.
[24] J. Newsome and D. Dong. Dynamic Taint Analysis for Auto-
matic Detection, Analysis, and Signature Generation of Exploits
on Commodity Software. In Proceedings of the 12th ISOC Sym-
posium on Network and Distributed System Security (SNDSS),
pages 221–237, February 2005.
[25] A. Pasupulati, J. Coit, K. Levitt, S. F. Wu, S. H. Li, J. C. Kuo,
and K. P. Fan. Buttercup: On Network-based Detection of Poly-
morphic Buffer Overﬂow Vulnerabilities.
In Proceedings of the
Network Operations and Management Symposium (NOMS), pages
235–248, vol. 1, April 2004.
[26] J. Pincus and B. Baker. Beyond Stack Smashing: Recent Ad-
vances in Exploiting Buffer Overﬂows. IEEE Security & Privacy,
2(4):20–27, July/August 2004.
[27] P. Porras, L. Briesemeister, K. Levitt, J. Rowe, and Y.-C. A. Ting.
A Hybrid Quarantine Defense. In Proceedings of the ACM Work-
shop on Rapid Malcode (WORM), pages 73–82, October 2004.
[28] N. Provos. A Virtual Honeypot Framework. In Proceedings of the
13th USENIX Security Symposium, pages 1–14, August 2004.
[29] J. Reynolds, J. Just, E. Lawson, L. Clough, and R. Maglich. On-
line Intrusion Protection by Detecting Attacks with Diversity. In
Proceedings of the 16th Annual IFIP 11.3 Working Conference
on Data and Application Security Conference, April 2002.
[30] J. C. Reynolds, J. Just, L. Clough, and R. Maglich. On-Line Intru-
sion Detection and Attack Prevention Using Diversity, Generate-
and-Test, and Generalization. In Proceedings of the 36th Annual
Hawaii International Conference on System Sciences (HICSS),
January 2003.
[31] J. C. Reynolds, J. Just, E. Lawson, L. Clough, and R. Maglich.
The Design and Implementation of an Intrusion Tolerant System.
In Proceedings of the International Conference on Dependable
Systems and Networks (DSN), June 2002.
[32] M. Roesch. Snort: Lightweight intrusion detection for networks.
(software
In Proceedings of USENIX LISA, November 1999.
available from http://www.snort.org/).
[33] L. Schaelicke, T. Slabach, B. Moore, and C. Freeland. Character-
izing the Performance of Network Intrusion Detection Sensors. In
Proceedings of Recent Advances in Intrusion Detection (RAID),
September 2003.
[35] S. Sidiroglou and A. D. Keromytis. A Network Worm Vaccine
Architecture. In Proceedings of the IEEE Workshop on Enterprise
Technologies: Infrastructure for Collaborative Enterprises (WET-
ICE), Workshop on Enterprise Security, pages 220–225, June
2003.
[36] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated worm
ﬁngerprinting. In Proceedings of the 6th Symposium on Operat-
ing Systems Design & Implementation (OSDI), December 2004.
[37] A. Smirnov and T. Chiueh. DIRA: Automatic Detection, Identiﬁ-
cation, and Repair of Control-Hijacking Attacks. In Proceedings
of the 12th ISOC Symposium on Network and Distributed System
Security (SNDSS), February 2005.
[38] T. Spalink, S. Karlin, L. Peterson, and Y. Gottlieb. Building a
Robust Software-Based Router Using Network Processors.
In
Proceedings of the 18th ACM Symposium on Operating Systems
Principles (SOSP), pages 216–229, Chateau Lake Louise, Banff,
Alberta, Canada, October 2001.
[39] D. Spinellis. Reliable identiﬁcation of bounded-length viruses
IEEE Transactions on Information Theory,
is NP-complete.
49(1):280–284, January 2003.
[40] L. Spitzner. Honeypots: Tracking Hackers. Addison-Wesley,
2003.
[41] S. Staniford. Containment of Scanning Worms in Enterprise Net-
works. Journal of Computer Security, 2005. (to appear).
[42] S. Staniford, D. Moore, V. Paxson, and N. Weaver. The Top Speed
of Flash Worms. In Proceedings of the ACM Workshop on Rapid
Malcode (WORM), pages 33–42, October 2004.
[43] S. Staniford, V. Paxson, and N. Weaver. How to Own the Internet
in Your Spare Time. In Proceedings of the 11th USENIX Security
Symposium, pages 149–167, August 2002.
[44] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas. Secure program
execution via dynamic information ﬂow tracking. SIGOPS Oper-
ating Systems Review, 38(5):85–96, 2004.
[45] W. Sun, Z. Liang, R. Sekar, and V. N. Venkatakrishnan. One-way
Isolation: An Effective Approach for Realizing Safe Execution
Environments. In Proceedings of the 12th ISOC Symposium on
Network and Distributed Systems Security (SNDSS), pages 265–
278, February 2005.
[46] P. Sz¨or and P. Ferrie. Hunting for Metamorphic. Technical report,
Symantec Corporation, June 2003.
[47] Top Layer Networks. http://www.toplayer.com.
[48] T. Toth and C. Kruegel. Accurate Buffer Overﬂow Detection via
In Proceedings of the 5th Sympo-
Abstract Payload Execution.
sium on Recent Advances in Intrusion Detection (RAID), October
2002.
[49] T. Toth and C. Kruegel. Connection-history Based Anomaly De-
In Proceedings of the IEEE Workshop on Information
tection.
Assurance and Security, June 2002.
[50] S. Venkataraman, D. Song, P. B. Gibbons, and A. Blum. New
Streaming Algorithms for Fast Detection of Superspreaders.
In
Proceedings of the 12th ISOC Symposium on Network and Dis-
tributed Systems Security (SNDSS), pages 149–166, February
2005.
[34] S. E. Schechter, J. Jung, and A. W. Berger. Fast Detection of Scan-
ning Worm Infections.
In Proceedings of the 7th International
Symposium on Recent Advances in Intrusion Detection (RAID),
pages 59–81, October 2004.
[51] G. Vigna, W. Robertson, and D. Balzarotti. Testing Network-
based Intrusion Detection Signatures Using Mutant Exploits. In
Proceedings of the 11th ACM Conference on Computer and Com-
munications Security (CCS), pages 21–30, October 2004.
USENIX Association
14th USENIX Security Symposium
143
[52] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier. Shield:
Vulnerability-Driven Network Filters for Preventing Known Vul-
nerability Exploits. In Proceedings of the ACM SIGCOMM Con-
ference, pages 193–204, August 2004.
[53] K. Wang and S. J. Stolfo. Anomalous Payload-based Network
Intrusion Detection. In Proceedings of the 7th International Sym-
posium on Recent Advanced in Intrusion Detection (RAID), pages
201–222, September 2004.
[54] N. Weaver, S. Staniford, and V. Paxson. Very Fast Containment of
Scanning Worms. In Proceedings of the 13th USENIX Security
Symposium, pages 29–44, August 2004.
[55] D. Whyte, E. Kranakis, and P. van Oorschot. DNS-based Detec-
tion of Scanning Worms in an Enterprise Network. In Proceedings
of the 12th ISOC Symposium on Network and Distributed Systems
Security (SNDSS), pages 181–195, February 2005.
[56] J. Wu, S. Vangala, L. Gao, and K. Kwiat. An Effective Architec-
ture and Algorithm for Detecting Worms with Various Scan Tech-
niques. In Proceedings of the ISOC Symposium on Network and
Distributed System Security (SNDSS), pages 143–156, February
2004.
[57] V. Yegneswaran, P. Barford, and S. Jha. Global Intrusion Detec-
tion in the DOMINO Overlay System. In Proceedings of the ISOC
Symposium on Network and Distributed System Security (SNDSS),
February 2004.
[58] V. Yegneswaran, P. Barford, and D. Plonka. On the Design and
Use of Internet Sinks for Network Abuse Monitoring.
In Pro-
ceedings of the 7th International Symposium on Recent Advances
in Intrusion Detection (RAID), pages 146–165, October 2004.
[59] C. C. Zou, L. Gao, W. Gong, and D. Towsley. Monitoring and
Early Warning for Internet Worms. In Proceedings of the 10th
ACM International Conference on Computer and Communica-
tions Security (CCS), pages 190–199, October 2003.
144
14th USENIX Security Symposium
USENIX Association