4 bytes of the internal state.
1010Algorithm 6 OpenJDK SHA1PRNG next (engineNextBytes)
Require: S = (S1, S2, S3), n
Ensure: S, R
i = t = 0
if S3 > 0 then
t = min n − i, 20 − S3
R[0,··· , t − 1] = S2[S3,··· , S3 + t − 1]
S2[S3,··· , S3 + t − 1] = [0]
end if
while i  320 then
S6 = HK(I)
end if
¯I = reverse(I)
S4 = S4 ⊕ ¯I
S7 = true
S1 = |S3|
return S(cid:48) = (S1, S2, S3, S4, S5, S6, S7)
The next algorithm. This algorithm is described in Al-
gorithms 12 and 13.
It is implemented with the methods
engineNextBytes and updateEntropyPool. It takes as in-
put the current internal state S and n, the number of bytes
requested. It outputs an n-byte R and a new value for the
internal state. It relies on S1 to generate the output as fol-
lows: if S1  0 and S7 = false then
if time ≥ S5[4] + S5[5] then
for S5[0] to S5[0] + 20 do
S4 = S4 ⊕ I
S5[4] = δ
S5[5] + S5[2] + time
S5[0] + 1
end if
end for
end if
return (S4, S5, S7)
Proof. Consider an adversary A against the security of IBM
SHA1PRNG that chooses a distribution D, such that D(0) = I
where I is of size 20 bytes and random (i.e. D is legiti-
mate with γ0 = 160). Next A makes the following ora-
cle queries in the security game BWD: one D-refresh, one
next-ror with an output of size 10 bytes, one M-set-state
with M = (0, 0, 0, 0, 0, 0, 0), J = {3} and one ﬁnal next-ror
with an output of size 10 bytes. Then:
• After one D-refresh with I, S1 = |S3|, S2 = 0, S3 =
0, S4 = 0⊕I, S5[0] = 0, S5[1] = 128, S5[2] = 30, S5[3] =
0, S5[4] = 0, S6 = 0, S7 = true.
• After one next-ror with n = 10, S1 = 10, S2 = 0, S3 =
HK(0||0 ⊕ I||0||128), S4 = 0 ⊕ I, S5[0] = 0, S5[1] =
128, S5[2] = 30, S5[3] = 0, S5[4] = 0, S6 = 0, S7 =
true. R = S3[0, . . . , 10]. The output R is random.
• After one M-set-state with M = (0, 0, 0, 0, 0, 0, 0), J =
{1}, S1 = 1, S2 = 0, S3 = HK(0||0⊕I||0||128), S4 = 0⊕
I, S5[0] = 0, S5[1] = 128, S5[2] = 30, S5[3] = 0, S5[4] =
0, S6 = 0, S7 = true.
• After one next-ror with n = 10, S1 = 10, S2 = 0, S3 =
SHA1(0||0 ⊕ I||0||128), S4 = 0 ⊕ I, S5[0] = 0, S5[1] =
128, S5[2] = 30, S5[3] = 0, S5[4] = 0, S6 = 0, S7 = true
and R = S3[0, . . . , 10].
Therefore, A obtains a 10-byte string in the last next-ror-
oracle query that is exactly the same as the previous next-ror-
oracle query, whereas ideally, this event occurs only with
probability 2−80. Therefore the IBM SHA1PRNG is not back-
ward secure for γ∗ ≤ 160. Note that as the ﬁelds S2 and
S3 are not updated during the refresh Algorithm, A could
make suﬃcient calls to D-refresh to mount a similar attack
for a larger value of γ∗.
4.6 Towards a Secure Implementation
In [16], Dodis et al. proposed a construction based on simple
operations in a ﬁnite ﬁeld. Let G : {0, 1}m → {0, 1}n+(cid:96)
be a (deterministic) pseudorandom generator where m < n.
The PRNG G is deﬁned as follows:
• setup(): output seed = (X, X(cid:48)) $← {0, 1}2n.