6
7
8
9
10
F ileOpen(p, f )
F ileRead(p, f )
F ileW rite(p, f )
F ileDel(p, f )
IP CRead(p, c)
IP CW rite(p, c)
SessionCreate(p, x)
SessionRead(p, x)
SessionW rite(p, x)
F ork(p1, p2)
11 M emW rite(p, a)
12 M emRead(p, a)
13
14
U nitEnter(p)
EmailRecv(p, m)
OT [f ] = hf, getTime()i;
U T [p]∪ = {OT [f ]}
LB = LB + hWRITE, f, U T [p] ∪ {OT [f ]}, getTime()i
if (f is owned by p) LB = LB − h∗, f, ∗, ∗i; else LB = LB + hDEL, f, U T [p], getTime()i;
OT [f ] = nil;
OT [c] = hc, getTime()i; U T [p] = U T [p] ∪ {OT [c]}
LB = LB + hWRITE, c, U T [p], getTime()i
t = newSource(); OT [x] = ht, gettime()i
U T [p] = U T [p] ∪ {OT [x]}
LB = LB + hWRITE, x, U T [p], getTime()i
LB = LB + hFORK, p2, U T [p1], getTime()i
M T [a] = U T [p];
U T [p]∪ = M T [a]
U T [p] = {hp, −i}
t = newSource(); U T [p] = U T [p] + {ht, getTime()i}
B. Run-time Operation Rules
Table I describes the taint propagation and logging oper-
ations conducted by the threads in the user space daemon. A
worker thread (in the daemon) receives an event from the ring
buffer and processes it based on the rules in the table.
File Operations. Rules 1-4 are for ﬁle related event process-
ing. For a ﬁle open event with process p opening a ﬁle f ,
ProTracer creates a new taint that consists of the ﬁle object and
the current timestamp. The taint denotes the provenance set of
the ﬁle at this moment, which may include multiple external
sources. The principle is that ProTracer uses a singleton taint
to represent a provenance set for a system object that can
propagate information across processes,
including ﬁle and
IPC. This is a critical design decision which will be further
explained. The taint is then associated with f through the
ObjectTaintStore OT . Upon a ﬁle read, the taint set of the
current execution unit of p is enhanced with the taint of f ,
meaning the current execution of p is also affected by the
provenance of f . Upon a ﬁle write, a log entry is inserted to
the log buffer denoting the write operation and the associated
taint set, which is the union of the current unit taint set and the
ﬁle taint (Rule 3). Intuitively, after the write, the ﬁle inherits
the taints of all the preceding input syscalls in the same unit.
The design choice of using a singleton taint to denote the
provenance (taint) set of an object on external storage has a
few critical advantages over the design of directly propagating
provenance sets.
•
•
An object may be transitively dependent on a large
set of taint sources. It is expensive to propagate taint
sets, which entails allocating space and performing
set unions. Hence, ProTracer uses a singleton taint
consisting of the object and a timestamp to denote
the current taint set of the object and propagates the
taint.
The design allows out-of-order processing of events
in the ring buffer. As mentioned earlier, the kernel
inserts events with timestamps to the ring buffer and
the user space daemon retrieves and handles these
events from the same buffer. Events from different
processes may be dispatched to different threads that
execute concurrently. As such, event processing across
7
processes may be out-of-order. For example, assume
two applications A and B. A writes to a ﬁle f and
closes it before B reads it. The ﬁle read event (in
B) may be processed before the ﬁle write (in A) is
processed. If we directly propagate the taint set of f
from A to B, we have to wait for the ﬁle write to be
processed before processing the ﬁle read, substantially
limiting concurrency. With the current design, the ﬁle
read will use a fresh taint, without waiting for the
computation of the set. The timestamps of the taint
set (recorded to the log buffer at the write event) and
the fresh taint (introduced at the ﬁle read) would allow
ProTracer to infer the proper mapping between the set
and the new taint during the ofﬂine causal analysis.
The design allows us to record not only the what
provenance, but also the how provenance. Traditional
techniques based on standard tainting [21] can only
record the set of taint sources associated with an
object, missing the history about how the object was
created and updated. With the current design, each
time an object is updated (i.e. written to the permanent
storage), a log entry representing the set of taints of
the object is recorded.
•
Upon deleting a ﬁle (Rule 4), ProTracer not only resets
the taint of f , but also removes all the log entries in the
buffer related to f if the process p is the exclusive owner of f ,
meaning f is a temporary ﬁle that does not escape the lifespan
of its owner. We say the p is the owner of f if p creates f
and f is never read by another process. If p is not the owner,
the log entries related to f cannot be removed as the history
of f may still be of interest. For example, an APT attack may
remove a malicious library generated in an earlier phase of
the attack (by another process) to cover its trail. The history
of the malicious library is still valuable although it is deleted.
In addition, the deletion event itself needs to be logged as it
is part of the malicious behavior. The log buffer is ﬂushed to
the disk when it is close to full. It often takes a long time
for the log buffer to reach its capacity so that most temporary
ﬁle deletes happen before the buffer is ﬂushed, allowing the
pruning of dead log events (Section II) such as temporary ﬁle
reads and writes.
IPC Operations. Processes may use IPC (e.g. pipes) to
communicate with each other. Upon an IPC write (Rule 6), a
log entry is added to denote the write and the provenance of the
write, which is essentially the current unit taint set. Following
the design policy of using singleton taints to allow out-of-order
processing, upon an IPC read a new taint consisting of the IPC
object and the current timestamp is created and added to the
unit taint set of the receiver process (Rule 5).
Network Operations and Process Spawn. Network opera-
tions are handled similar to ﬁle operations. We consider a
network session as a unique taint source. As such, each time a
session is created, a new taint ID is created and associated with
the session. When a process p receives packets from a session,
the taint of the session is added to the unit taint set of p (Rule
8). When p sends a packet through a session, the provenance
of the network send is denoted by the unit taint set of p. A log
entry containing the taint set is recorded. Such entries allow
ProTracer to construct causality across hosts. When a process
p1 spawns another process p2 (Rule 10), the provenance of the
child is the unit taint set of its parent. A log entry is added to
record the fork and the corresponding taint set.
Execution Unit Related Operations. These events are gen-
erated by selective program instrumentation [27]. Application
executables are instrumented in a very small number of places
to emit special syscalls to indicate the beginning and the end of
an execution unit, and memory operations that denote the high
level workﬂow between units. ProTracer needs to propagate
taints through the memory object involved. Upon a write to a
memory object, the unit taint set is propagated to the object
(Rule 11). Later, when the same memory object is read in
another unit, its taint set is inserted to the taint set of the new
unit (Rule 12). As mentioned in Section II, execution units are
considered autonomous and their correlations are only through
the workﬂow related memory objects explicitly monitored by
ProTracer. Therefore, when the execution leaves a unit and
enters a new unit, the unit taint set is reset to only containing
the process itself (Rule 13).
Taint Source Operations. Upon events such as receiving an
email, a new ID representing the source is created and inserted
to the unit taint set (Rule 14). Note that these events may
be at a higher level than syscalls. In our implementation, the
corresponding protocol libraries are instrumented to generate
these high level events.
Example. Consider the example in Fig. 7. We have two
programs running in the system: a browser and a PDF reader.
Parts of the code snippets of the two applications are shown.
Although the code snippets simulate the workﬂow in a real-
world browser and a real-world PDF reader, they are sub-
stantially simpliﬁed and abstracted to be consistent with our
deﬁnitions in Fig. 6. Speciﬁcally, the browser has two threads:
the UI thread that handles UI events and the worker thread
that performs background operations such as downloading a
ﬁle. The event handling loop dominates the execution of the
UI thread. The beginning of the loop is instrumented by a
function UnitEnter() that will produce an event denoting
the start of a unit. In lines 8-11, if the UI event is the click
of a hyper link, the URL is added to the work queue. Since
the queue operations denote the workﬂow across units, the
enqueue operation is instrumented to generate a memory write
event (line 9). The worker thread execution is dominated by
the loop in lines 22-36, which acquires a request from the
work queue and processes it. Lines 23-24 denote the unit
instrumentation and the memory read instrumentation. If the
request is to access a URL, a temporary ﬁle “tmp” is created to
store the downloaded content. A session is created and used to
download the resource (lines 28-29). The downloaded content
is written to the ﬁle (line 30). An IPC object is created to
communicate with the PDF reader to display the PDF ﬁle
(lines 32-33). The temporary ﬁle is deleted at the end (line
34).
The PDF reader is also event driven. If it receives an IPC
request to render a PDF ﬁle, it acquires the ﬁle through IPC and
saves it to buf (lines 56-57) before rendering it. If it receives
a UI request to save the PDF ﬁle, it creates a ﬁle and writes
buf to the ﬁle (lines 62-64). ProTracer detects that buf carries
workﬂow across units (i.e. the loop iterations corresponding to
8
UnitEnter ();
UnitEnter( );
MemRead(q.head( ));
MemWrite(q.tail( ))
UnitEnter( );
MemWrite(buf);
MemRead(buf);
Program TimeStamp Event
Rule
OT[]/MT[]
UT[]
LB
Browser
1 UnitEnter(b)
2 MemWrite(b,q[0])
3 UnitEnter(b)
4 MemRead(b,q[0])
5 SessionCreate(b,x)
6 SessionRead(b,x)
7 FileWrite(b,f)
8 IPCWrite(b,c)
9 FileDel(b,f)
10 UnitEnter(r)
11 IPCRead(r,c)
13
11 MT[q[0]]=UT[b]={}
UT[b]={OT[b]}={}
13
12
7 OT[x]=
8
3
6
4 OT[f]=nil
13
UT[b]={OT[b]}={}
UT[b]=UT[b] U MT[q[0]]={}
UT[b]=UT[b] U {OT[x]}={, }
UT[r]={OT[r]}={}
LB=,},7>
LB=,},7>; 
       ,},8>
LB= ,},8>
7 OT[c]=
UT[r]=UT[r] U OT[c] ={,}
12 MemWrite(r,buf)
11 MT[buf]=UT[r]={,}
Reader
13 UnitEnter(r)
14 MemRead(r,buf)
15 FileWrite(r,o)
13
12
3
UT[r]={}
UT[r]=UT[r] U MT[buf]={,}
LB=,},8>;
       ,},15>
Fig. 7: Example for the logging and tainting run-time. The shaded statements correspond to syscalls. The statements in red are
those instrumented by ProTracer to generate special events.
the IPC and the save-as-a-ﬁle operations), the read and write
of buf are instrumented (lines 58 and 63).
Fig. 7 (c) shows a sample execution of the system, in which
the user clicks a hyper link denoting a remote PDF ﬁle, the ﬁle
is then downloaded and rendered by the reader, and ﬁnally the
user further saves the ﬁle. The table shows the events generated
by ProTracer and how the run-time processes these events. The
second column shows the timestamps; the third column shows
the events with process b and r denoting the browser and the
reader, respectively. The fourth column shows the rules applied
and the last three columns show the state of the various data
structures.
Observe that in the ﬁrst unit corresponding to the click of
the hyper link, the UnitEnter event causes the unit taint of
b to be reset to {hb, −i}. Upon the MemWrite at 2, the taint
of the queue is updated to contain the taint of the current unit.
The execution then proceeds to the unit from the worker thread
that downloads the ﬁle. At 3, the unit taint set is reset. At 4,
the taint set of the queue is unioned with the unit taint set. At
5, since a network session is considered an external source, an
ID t1 is generated to denote the source. The taint of the session
is inserted to the unit taint set at 6 due to the SessionRead
event. At 7, the downloaded content is saved to the temporary
ﬁle f , and thus a log entry is inserted to the log buffer LB to
denote the write and the provenance. The ﬁle is further passed
to the reader through an IPC c. The IPCWrite event leads
to another log entry at 8. At 9, the deletion of f leads to the
removal of the ﬁrst log entry as f is a temporary ﬁle.
Timestamps 10-15 correspond to the execution of the
reader, which consists of two units. The ﬁrst one renders
the ﬁle and the second one saves the ﬁle. At 11, a new
taint
is created to denote the provenance set of the IPC
object c at timestamp 11, which essentially denotes the set
{hb, −i, ht1, 5i}. The taint is inserted to the unit taint set of
r. The unit taint set is propagated to buf at 13. In the second
unit (timestamps 13-15), the taint set of buf is retrieved and
inserted to the unit taint set. When the ﬁle is written, another
log entry is added to denote the write.
There are three important things that we need to point
out. (1) Although there are 15 events, ProTracer only needs
to log two of them, which are the two in LB at the end. In
other words, on-the-ﬂy taint propagation avoids storing a lot of
events. (2) ProTracer introduced a new taint hc, 11i to denote
the provenance set of c at 11 such that the processing of the
9
reader events and the processing of the browser events can
be performed concurrently by different threads. And from the
timestamp 11 and the log, we know that hc, 11i must represent
the taint set in the ﬁrst log entry. (3) The log entries reﬂect
the history of the ﬁle, whereas existing techniques only track
the sources of the ﬁle.
C. Handling Global File Accesses
A long running execution can often be divided to three
parts. The ﬁrst one is the start phase, which is responsible for
loading conﬁgurations, allocating resources like ﬁle descriptors
for application log ﬁles. The second one is the event handling
loop, which handles a large number of external requests.
The third one is the closing phase, where all resources are
deallocated before the process terminates. In the previous
sections, we mainly focus on the event handling loops, which
dominate and generate units. However, handling the other two
phases, especially ﬁle operations in those phases, is equally
important. Files opened in the start phase are often used
throughout the whole execution. For example, the Apache
httpd server opens its application log ﬁles (e.g. access log
and error log) in the start phase. The access log will be written
within any unit that handles an external request. This log
ﬁle is a shared object across most of the units, which would
cause unnecessary dependence between units. To address this
problem, we apply a special policy to objects opened in the
start phase. In particular, these objects are stated as global in
the log. During execution, they are not considered as shared
objects and operations on these ﬁles are not logged.
Unlike log ﬁles, which are opened in the start phase and
not closed until the end phase, some objects used in the start
phase have a very short life time. They are usually opened,
read and then closed. Typical examples include conﬁguration
ﬁles and libraries used by an application. Our policy is to log
these events, because the data read from these ﬁles can be
possibly utilized for a malicious purpose. An example is that
a malicious library downloaded from a remote site is loaded
by a normal application in the start phase.
Discussion: Completeness of ProTracer. As introduced in
Section I, we aim to capture all the external and internal
entities that affect a system object and their casual relations.
With the assumption that all the provenance related syscalls are
intercepted by ProTracer, we want to show that the alternation