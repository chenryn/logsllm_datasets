Description 
IMAGE_REL_SH3_ABSOLUTE 
0x0000 
This relocation is ignored. 
IMAGE_REL_SH3_DIRECT16 
0x0001 
Reference to the 16-bit location that contains 
the virtual address of the target symbol. 
IMAGE_REL_SH3_DIRECT32 
0x0002 
The target’s 32-bit virtual address. 
IMAGE_REL_SH3_DIRECT8 
0x0003 
Reference to the 8-bit location that contains the 
virtual address of the target symbol. 
IMAGE_REL_SH3_DIRECT8_WORD 
0x0004 
Reference to the 8-bit instruction that contains 
the effective 16-bit virtual address of the target 
symbol. 
IMAGE_REL_SH3_DIRECT8_LONG 
0x0005 
Reference to the 8-bit instruction that contains 
the effective 32-bit virtual address of the target 
symbol. 
IMAGE_REL_SH3_DIRECT4 
0x0006 
Reference to the 8-bit location whose low 4 bits 
contain the virtual address of the target symbol. 
IMAGE_REL_SH3_DIRECT4_WORD 
0x0007 
Reference to the 8-bit instruction whose low 4 
bits contain the effective 16-bit virtual address 
of the target symbol. 
IMAGE_REL_SH3_DIRECT4_LONG 
0x0008 
Reference to the 8-bit instruction whose low 4 
bits contain the effective 32-bit virtual address 
of the target symbol. 
IMAGE_REL_SH3_PCREL8_WORD 
0x0009 
Reference to the 8-bit instruction which 
contains the effective 16-bit relative offset of the 
target symbol. 
IMAGE_REL_SH3_PCREL8_LONG 
0x000A 
Reference to the 8-bit instruction which 
contains the effective 32-bit relative offset of the 
target symbol. 
IMAGE_REL_SH3_PCREL12_WORD 
0x000B 
Reference to the 16-bit instruction whose low 
12 bits contain the effective 16-bit relative offset 
of the target symbol. 
IMAGE_REL_SH3_STARTOF_SECTION 
0x000C 
Reference to a 32-bit location that is the virtual 
address of the symbol’s section. 
IMAGE_REL_SH3_SIZEOF_SECTION 
0x000D 
Reference to the 32-bit location that is the size 
of the symbol’s section. 
IMAGE_REL_SH3_SECTION 
0x000E 
The 16-bit section index of the section 
containing the target. This is used to support 
debugging information. 
IMAGE_REL_SH3_SECREL 
0x000F 
The 32-bit offset of the target from the 
beginning of its section. This is used to support 
debugging information as well as static thread 
local storage. 
IMAGE_REL_SH3_DIRECT32_NB 
0x0010 
The target’s 32-bit relative virtual address. 
ARM Processors 
The following relocation Type indicators are defined for ARM processors: 
Constant 
Value 
Description 
IMAGE_REL_ARM_ABSOLUTE 
0x0000 
This relocation is ignored. 
IMAGE_REL_ARM_ADDR32 
0x0001 
The target’s 32-bit virtual address. 
IMAGE_REL_ARM_ADDR32NB 
0x0002 
The target’s 32-bit relative virtual address. 
IMAGE_REL_ARM_BRANCH24 
0x0003 
The 24-bit relative displacement to the target.  
IMAGE_REL_ARM_BRANCH11 
0x0004 
Reference to a subroutine call, consisting of 
two 16-bit instructions with 11-bit offsets. 
IMAGE_REL_ARM_SECTION 
0x000E 
The 16-bit section index of the section 
containing the target. This is used to support 
debugging information. 
IMAGE_REL_ARM_SECREL 
0x000F 
The 32-bit offset of the target from the 
beginning of its section. This is used to support 
debugging information as well as static thread 
local storage. 
5.3. COFF Line Numbers 
COFF line numbers indicate the relationship between code and line-numbers in source files. The 
Microsoft format for COFF line numbers is similar to standard COFF, but it has been extended to 
allow a single section to relate to line numbers in multiple source files. 
COFF line numbers consist of an array of fixed-length records. The location (file offset) and size 
of the array are specified in the section header. Each line-number record is of the following 
format: 
Offset 
Size 
Field 
Description 
0 
4 
Type (*) 
Union of two fields: Symbol Table Index and RVA. 
Whether Symbol Table Index or RVA is used 
depends on the value of Linenumber. 
4 
2 
Linenumber 
When nonzero, this field specifies a one-based 
line number. When zero, the Type field is 
interpreted as a Symbol Table Index for a function.
The Type field is a union of two four-byte fields, Symbol Table Index, and RVA: 
Offset 
Size 
Field 
Description 
0 
4 
SymbolTableIndex 
Used when Linenumber is 0: index to symbol table 
entry for a function. This format is used to indicate 
the function that a group of line-number records 
refer to. 
0 
4 
VirtualAddress 
Used when Linenumber is non-zero: relative 
virtual address of the executable code that 
corresponds to the source line indicated. In an 
object file, this contains the virtual address within 
the section. 
A line-number record, then, can either set the Linenumber field to 0 and point to a function 
definition in the Symbol Table, or else it can work as a standard line-number entry by giving a 
positive integer (line number) and the corresponding address in the object code. 
A group of line-number entries always begins with the first format: the index of a function symbol. 
If this is the first line-number record in the section, then it is also the COMDAT symbol name for 
the function if the section’s COMDAT flag is set. (See Section 5.5.6, “COMDAT Sections.”) The 
function’s auxiliary record in the Symbol Table has a Pointer to Linenumbers field that points to 
this same line-number record. 
A record identifying a function is followed by any number of line-number entries that give actual 
line-number information (Linenumber greater than zero). These entries are one-based, relative to 
the beginning of the function, and represent every source line in the function except for the first 
one. 
For example, the first line-number record for the following example would specify the ReverseSign 
function (Symbol Table Index of ReverseSign, Linenumber set to 0). Then records with 
Linenumber values of 1, 2, and 3 would follow, corresponding to source lines as shown: 
// some code precedes ReverseSign function 
int ReverseSign(int i) 
1: 
{ 
2: 
return -1 * i; 
3: 
} 
5.4. COFF Symbol Table 
The Symbol Table described in this section is inherited from the traditional COFF format. It is 
distinct from CodeView® information. A file may contain both a COFF Symbol Table and 
CodeView debug information, and the two are kept separate. Some Microsoft tools use the 
Symbol Table for limited but important purposes, such as communicating COMDAT information to 
the linker. Section names and file names, as well as code and data symbols, are listed in the 
Symbol Table. 
The location of the Symbol Table is indicated in the COFF Header. 
The Symbol Table is an array of records, each 18 bytes long. Each record is either a standard or 
auxiliary symbol-table record. A standard record defines a symbol or name, and has the following 
format: 
Offset 
Size 
Field 
Description 
0 
8 
Name (*) 
Name of the symbol, represented by union of 
three structures. An array of eight bytes is used if 
the name is not more than eight bytes long. See 
Section 5.4.1, “Symbol Name Representation, ” 
for more information. 
8 
4 
Value 
Value associated with the symbol. The 
interpretation of this field depends on Section 
Number and Storage Class. A typical meaning is 
the relocatable address. 
12 
2 
SectionNumber 
Signed integer identifying the section, using a 
one-based index into the Section Table. Some 
values have special meaning defined in “Section 
Number Values.” 
14 
2 
Type 
A number representing type. Microsoft tools set 
this field to 0x20 (function) or 0x0 (not a 
function). See Section 5.4.3, “Type 
Representation,” for more information. 
16 
1 
StorageClass 
Enumerated value representing storage class. 
See Section 5.4.4, “Storage Class,” for more 
information. 
17 
1 
NumberOfAuxSymbols 
Number of auxiliary symbol table entries that 
follow this record. 
Zero or more auxiliary symbol-table records immediately follow each standard symbol-table 
record. However, typically not more than one auxiliary symbol-table record follows a standard 
symbol-table record (except for .file records with long file names). Each auxiliary record is the 
same size as a standard symbol-table record (18 bytes), but rather than define a new symbol, the 
auxiliary record gives additional information on the last symbol defined. The choice of which of 
several formats to use depends on the Storage Class field. Currently defined formats for auxiliary 
symbol table records are shown in “Auxiliary Symbol Records.” 
Tools that read COFF symbol tables must ignore auxiliary symbol records whose interpretation is 
unknown. This allows the symbol table format to be extended to add new auxiliary records, 
without breaking existing tools. 
5.4.1. Symbol Name Representation 
The Name field in a symbol table consists of eight bytes that contain the name itself, if not too 
long, or else give an offset into the String Table. To determine whether the name itself or an offset 
is given, test the first four bytes for equality to zero. 
Offset 
Size 
Field 
Description 
0 
8 
Short Name 
An array of eight bytes. This array is padded 
with nulls on the right if the name is less 
than eight bytes long. 
0 
4 
Zeroes 
Set to all zeros if the name is longer than 
eight bytes. 
4 
4 
Offset 
Offset into the String Table. 
5.4.2. Section Number Values 
Normally, the Section Value field in a symbol table entry is a one-based index into the Section 
Table. However, this field is a signed integer and may take negative values. The following values, 
less than one, have special meanings: 
Constant 
Value 
Description 
IMAGE_SYM_UNDEFINED 
0 
Symbol record is not yet assigned a section. If the value 
is 0 this indicates a references to an external symbol 
defined elsewhere. If the value is non-zero this is a 
common symbol with a size specified by the value. 
IMAGE_SYM_ABSOLUTE 
-1 
The symbol has an absolute (non-relocatable) value and 
is not an address. 
IMAGE_SYM_DEBUG 
-2 
The symbol provides general type or debugging 
information but does not correspond to a section. 
Microsoft tools use this setting along with .file records 
(storage class FILE). 
5.4.3. Type Representation 
The Type field of a symbol table entry contains two bytes, each byte representing type 
information. The least-significant byte represents simple (base) data type, and the most-significant 
byte represents complex type, if any: 
MSB 
LSB 
Complex type: none, pointer, function, array. 
Base type: integer, floating-point, etc. 
The following values are defined for base type, although Microsoft tools generally do not use this 
field, setting the least-significant byte to 0. Instead, CodeView information is used to indicate 
types. However, the possible COFF values are listed here for completeness. 
Constant 
Value 
Description 
IMAGE_SYM_TYPE_NULL 
0 
No type information or unknown base type. Microsoft 
tools use this setting.  
IMAGE_SYM_TYPE_VOID 
1 
No valid type; used with void pointers and functions. 
IMAGE_SYM_TYPE_CHAR 
2 
Character (signed byte). 
IMAGE_SYM_TYPE_SHORT 
3 
Two-byte signed integer. 
IMAGE_SYM_TYPE_INT 
4 
Natural integer type (normally four bytes in Windows 
NT). 
IMAGE_SYM_TYPE_LONG 
5 
Four-byte signed integer. 
IMAGE_SYM_TYPE_FLOAT 
6 
Four-byte floating-point number. 
IMAGE_SYM_TYPE_DOUBLE 
7 
Eight-byte floating-point number. 
IMAGE_SYM_TYPE_STRUCT 
8 
Structure. 
IMAGE_SYM_TYPE_UNION 
9 
Union. 
IMAGE_SYM_TYPE_ENUM 
10 
Enumerated type. 
IMAGE_SYM_TYPE_MOE 
11 
Member of enumeration (a specific value). 
IMAGE_SYM_TYPE_BYTE 
12 
Byte; unsigned one-byte integer. 
IMAGE_SYM_TYPE_WORD 
13 
Word; unsigned two-byte integer. 
IMAGE_SYM_TYPE_UINT 
14 
Unsigned integer of natural size (normally, four bytes). 
IMAGE_SYM_TYPE_DWORD 
15 
Unsigned four-byte integer. 
The most significant byte specifies whether the symbol is a pointer to, function returning, or array 
of the base type specified in the least significant byte. Microsoft tools use this field only to indicate 
whether or not the symbol is a function, so that the only two resulting values are 0x0 and 0x20 for 
the Type field. However, other tools can use this field to communicate more information. 
It is very important to specify the function attribute correctly. This information is required for 
incremental linking to work correctly. For some architectures the information may be required for 
other purposes. 
Constant 
Value 
Description 
IMAGE_SYM_DTYPE_NULL 
0 
No derived type; the symbol is a simple scalar 
variable.  
IMAGE_SYM_DTYPE_POINTER 
1 
Pointer to base type. 
IMAGE_SYM_DTYPE_FUNCTION 
2 
Function returning base type. 
IMAGE_SYM_DTYPE_ARRAY 
3 
Array of base type. 
5.4.4. Storage Class 
The Storage Class field of the Symbol Table indicates what kind of definition a symbol represents. 
The following table shows possible values. Note that the Storage Class field is an unsigned one-
byte integer. The special value -1 should therefore be taken to mean its unsigned equivalent, 
0xFF. 
Although traditional COFF format makes use of many storage-class values, Microsoft tools rely on 
CodeView format for most symbolic information and generally use only four storage-class values: 
EXTERNAL (2), STATIC (3), FUNCTION (101), and STATIC (103). Except in the second column 
heading below, “Value” should be taken to mean the Value field of the symbol record (whose 
interpretation depends on the number found as the storage class). 
Constant 
Value 
Description / Interpretation of Value 
Field 
IMAGE_SYM_CLASS_END_OF_FUNCTION 
-1 
(0xFF) 
Special symbol representing end of 
function, for debugging purposes. 
IMAGE_SYM_CLASS_NULL 
0 
No storage class assigned. 
IMAGE_SYM_CLASS_AUTOMATIC 
1 
Automatic (stack) variable. The Value field 
specifies stack frame offset. 
IMAGE_SYM_CLASS_EXTERNAL 
2 
Used by Microsoft tools for external 
symbols. The Value field indicates the size 
if the section number is 
IMAGE_SYM_UNDEFINED (0). If the 
section number is not 0, then the Value 
field specifies the offset within the section. 
IMAGE_SYM_CLASS_STATIC 
3 
The Value field specifies the offset of the 
symbol within the section. If the Value is 0, 
then the symbol represents a section name.