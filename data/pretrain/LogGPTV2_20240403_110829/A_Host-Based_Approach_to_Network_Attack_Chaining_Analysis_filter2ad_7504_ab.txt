For each hj ∈ H Do
For each (hi, hj ) ∈ T Do
If access((hi, hj ) ∈ T ) > access(eij ) Then
/* Update eij ∈ E */
eij .access = access((hi, hj ) ∈ T )
If access(eij ) == admin Then
Stop, move to next host-pair
Figure 1. findInitialAccess algorithm.
Algorithm findInitialAccess deserves a few
comments. We include in the set of hosts, one outside
host with no privileges and no exploits. This host repre-
sents the basic attacker. We also consider a limited, ordered
set of access levels, namely, none, connectivity,
pass-through, user, and admin. Our notion of ac-
cess level could clearly be reﬁned, but we take the position
that it is an adequate start. Initially, access graph E has each
edge eij ∈ E initialized to access level none. In some cases
there may be multiple trust relationships between hosts in
a network. In these cases, findInitialAccess is de-
signed to examine each relationship and retain the one that
provides the highest level of access (lines 12− 14). To help
reduce computational cost, lines 15−16 cause the algorithm
to cease checking for new access levels if the current level
of access for a given edge is already at its highest.
The next step in our model is to calculate maximal ob-
tainable level of access between all the hosts in the network
using each host’s known exploits. If sufﬁcient connectiv-
ity on the appropriate ports exists between two hosts, an
exploitable vulnerability exists on the destination host, and
the source host has all of the prerequisites for the exploit,
an edge can be added from source to destination. For book-
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
keeping purposes, edges are tagged with a route ID, source
host, destination host, the means by which the edge was
achieved (trust relationship, exploit name, etc.), the access
level achieved, bugtraq ID, and a chain ID ﬂag to determine
if the edge was part of a chain of exploits. The chain ID ﬂag
will be empty if it is not part of a chain, otherwise the route
ID of the last edge used in the chain is indicated. The algo-
rithm findMaximalAccess, shown in Figure 2, calcu-
lates the maximal access each host has on each other host in
presence of applying any exploits. Here access() returns
the current level of access for a given edge eij (an edge be-
tween hosts i and j), or a possible higher level access gained
through an exploit xk launched from host i against the target
host j.
ﬁndMaximalAccess(H , E , X , V ) :
INPUT: A set of host nodes, H
INPUT: A set of access edges, E
INPUT: A set of network exploits, X
INPUT: A set of vulnerabilities at each host, V
OUTPUT: Access graph of hosts H with maximal access
edges E
/* Direct Exploits */
For each hi ∈ H Do
For each hj ∈ H Do
If access(eij ) == admin Then
For each vk ∈ V exhibited by host hj Do
Stop, move to next host-pair
For each xw ∈ X against vk Do
If all preconditions xw are TRUE Then
If access(xw) > access(eij ) Then
/* Update edge eij ∈ E */
eij .access = access(xw)
If access(eij ) == admin Then
Stop, move to next host-pair
/* Indirect Exploits */
For each hk ∈ H Do
For each hi ∈ H Do
If access(eik) > none Then
For each hj ∈ H Do
If access(eij ) == admin Then
If access(ekj ) > access(eij ) Then
Stop, move to next host-pair
/* Update edge eij ∈ E */
eij .access = access(ekj )
eij .chainID = eik
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
Figure 2. findMaximalAccess algorithm.
The algorithm findMaximalAccess examines both
direct exploits and chained sets of exploits (indirect edges).
Lines 9 through 21 attempt for each host to run the best (di-
rect) available exploit against each of it’s neighbors (e.g.,
hosts they can communicate with).
In some cases there
may be an exploit that can be run by a host against itself,
these are often referred to as “self–elevation of privilege”
attacks. For example, on several platforms including So-
laris 2.5 through 2.6 the “dtappgather symlink” vulnera-
bility (bugtraq 131) can be used to overwrite any ﬁle
present on the ﬁlesystem, regardless of the owner of the
ﬁle, because of improper ownership checking. Using this
exploit a malicious user can alter ﬁles and permissions to
gain greater access on the affected machine. Thus, the algo-
rithm findMaximalAccess includes (hi, hi) as a valid
host pair. An interesting aspect of the model is that success-
ful exploits carried out on one host can satisfy the precondi-
tions for a different exploit on some other host; resulting in
an attack chain. Our model captures this through the use of
indirect edges—a transitive aspect of an attack chain is con-
sidered. For example, if there exists host A with user level
access to host B, but there also exists admin level access
from host B to host C, then from the penetration testing per-
spective, this is equivalent to A having admin level access
to C. Our access graph would use an indirect edge eac with
access level admin to capture the aforementioned scenario.
The second half of findMaximalAccess, lines 23− 33,
computes the transitive closure (cf. [4]) of our access graph.
This is done for each host by attempting to improve their
access to another host by using the other exploits that have
been carried out. To improve the algorithm performance,
line 26 is used to test whether–or–not access level of edge
eik is higher than none. Since i and k values do not change
as j changes, the test for eik edge is moved out of the inner–
most loop. Note that the monotonicity assumption en-
sures that this process will converge, will not involve back-
tracking, and hence is computationally feasible. To help
minimize computational cost, findMaximalAccess has
similar break points to findInitialAccess where the
algorithm will stop checking for new access levels if an
edge already has the highest level of access.
The information to develop this type of access graph can
be discovered directly with vulnerability scanning tools and
resources such as the bugtraq database. It is helpful to
sort the possible exploits by level of access gained. The
ﬁrst exploit for which all of the preconditions are satisﬁed is
guaranteed to be the most powerful exploit available. Once
an edge is added, the algorithm can then be modiﬁed to
move on to the next pair of hosts, subsequently reducing
the computational cost.
ac-
computational
follows.
cess graph can be
findInitialAccess computes
intended ac-
cess levels of the network using a set of trust relationships,
T . In the algorithm, there are as many nodes, n, as there
are hosts in the network, and each host pair is analyzed,
hence making a quadratic number of edges, n2. Therefore
making the required number of computations T n2. Since
findMaximalAccess uses exploits in its algorithm
to determine the maximal access in a network,
it has
a slightly higher computational cost. The ﬁrst part of
cost of developing our
roughly analyzed as
The
the
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
findMaximalAccess examines only the direct edges in
a network, so in the worse case the number of computations
required is XV n2, where X is the total number of exploits
for all the hosts, V is the total number of vulnerabilities
present in the network, and n is the total number of hosts.
The second half of findMaximalAccess (indirect
exploits) examines chains of exploits by examining ex-
isting edges in combination with exploits iteratively until
all possible paths have been examined.
In the densest
access graph, with all access levels higher than none,
we can compute the transitive closure (cf. [4]) in time
proportional to n3. Therefore the total computational cost
of findMaximalAccess is XV n2 + n3.
the graph stabilizes. Now the analyst can review the new
network conﬁguration to see if it is acceptable.
The access graph developed by an analyst can also be
used as a means of providing near real–time early warning
of potential attacks. Intrusion detection systems (IDS) are
used to help the system administrator detect when an attack
is being carried out in real–time in order to minimize the
damage. Our approach can be computationally run in real–
time to provide early warning of vulnerable areas to prevent
exposure from ever occurring. Given a stable access graph,
an analyst can determine risk areas and secure them to pre-
empt an attack in near real–time.
3. Analysis
Given a stable access graph, we suggest that an analyst
can use this information in a variety of ways to help secure
the network. First, we suggest that an analyst can identify
a host with an unacceptable level of compromise and a so-
lution to ﬁx the problem. This involves, in some but not all
cases, patching the vulnerabilities of the exploit that led im-
mediately to that level of access. The exploit to patch is the
one identiﬁed by the edge tags explained above. This is not
true in all cases, which is the rationale for the approaches
in the literature that compute entire attack graphs. In this
paper, however, this is exactly the trade–off we make: we
accept that the analyst may make a suboptimal choice of
which vulnerability to patch, in return for having the com-
putational complexity be polynomial instead of exponential.
Although a complete attack would provide an analyst with
the minimal number of changes required to secure the net-
work, they are extremely expensive to build. Our approach
will present the analyst with an area that needs to be ﬁxed
and since it is computed in polynomial time it provides real–
time results. The approach cannot provide a comprehensive
list of changes that are required in one iteration, however it
can be accomplished through several iterations.
Once the access graph stabilizes, the analyst can then
compute the effect a patch of a vulnerability has on the net-
work access graph by ﬁrst checking if there exists an equiv-
alent exploit. An equivalent exploit is an exploit that will
result in the same access on the target host and whose all
preconditions are satisﬁed by the same set of hosts. If this
is the case, the analysis is complete. If not, then we need
to ﬁnd the next most powerful, applicable exploit for edges
that directly use that exploit. For each effected direct edge,
we will attempt to ﬁnd the next best access it can achieve
by examining trust relationships and exploits. Then for ev-
ery other edge whose chain depended on the now infeasible
edge is re–examined, as it may no longer be feasible as well.
In each case, the next most powerful exploit is chosen. This
occurs recursively until all affected edges are examined and
potentialNewMaximalAccess(H , T , E , X , V , ha ) :
INPUT: A set of host nodes, H
INPUT: A set of trust relationships, T
INPUT: A set of access edges, E
INPUT: A set of network exploits, X
INPUT: A set of vulnerabilities at each host, V
INPUT: A new attacker node, ha
OUTPUT: Access graph of hosts H with maximal access
edges E
/* Trust Relationships */
For each hi ∈ H Do
For each (ha, hi) ∈ T Do
If access((ha, hi) ∈ T ) > access(eai) Then
/* Update eai */
eai.access = access((ha, hi) ∈ T )
If access(eai) == admin Then
Stop, move to next host-pair
/* Direct Exploits */
For each hi ∈ H Do
If access(eai) == admin Then
For each vj ∈ V exhibited by host hi Do
Stop, move to next host-pair
For each xk ∈ X against vj Do
If all preconditions xk are TRUE Then
If access(xk) > access(eai) Then
/* Update edge eai ∈ E */
eai.access = access(xk)
If access(eai) == admin Then
Stop, move to next host-pair
/* Indirect Exploits */
For each hk ∈ H Do
For each hi ∈ H Do
If access(eik) > none Then
For each hj ∈ H Do
If access(eij ) == admin Then
If access(ekj ) > access(eij ) Then
Stop, move to next host-pair