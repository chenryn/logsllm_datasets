message_properties
message_properties is a value of the type, message_properties_t:
message_properties_t IS RECORD(
priority BINARY_INTEGER NOT NULL DEFAULT 1
delay BINARY_INTEGER NOT NULL DEFAULT NO_DELAY,
expiration BINARY_INTEGER NOT NULL DEFAULT NEVER,
correlation VARCHAR2(128) DEFAULT NULL,
attempts BINARY_INTEGER
recipient_list AQ$_RECIPIENT_LIST_T,
exception_queue VARCHAR2(61) DEFAULT NULL,
enqueue_time DATE,
state BINARY_INTEGER,
sender_id SYS.AQ$_AGENT DEFAULT NULL,
original_msgid RAW(16) DEFAULT NULL,
signature aq$_sig_prop DEFAULT NULL,
transaction_group VARCHAR2(30) DEFAULT NULL,
user_property SYS.ANYDATA DEFAULT NULL,
delivery_mode PLS_INTEGER NOT NULL DEFAULT
DBMS_AQ.PERSISTENT);
The supported values for message_properties_t are:
priority If the queue table definition includes a sort_list that
references priority, this parameter affects the order that
messages are dequeued. A lower value indicates a higher
dequeue priority.
delay Specify the number of seconds that will pass before a
message is available for dequeueing or NO_DELAY.
expiration Use the expiration parameter to specify the number of
seconds until a message expires.
correlation Use correlation to specify a message that will be associated
with the entry; the default is NULL.
attempts This is a system-maintained value that specifies the number
of attempts to dequeue the message.
recipient_list This parameter is not supported.
exception_queue Use the exception_queue parameter to specify the name
of an exception queue to which a message will be moved if it
expires or is dequeued by a transaction that rolls back too
many times.
enqueue_time enqueue_time is the time the record was added to the
queue; this value is provided by the system.
state This parameter is maintained by DBMS_AQ; state can be:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 45
Database Compatibility for Oracle® Developers
Built-in Package Guide
DBMS_AQ.WAITING – the delay has not been reached.
DBMS_AQ.READY – the queue entry is ready for processing.
DBMS_AQ.PROCESSED – the queue entry has been processed.
DBMS_AQ.EXPIRED – the queue entry has been moved to the
exception queue.
sender_id This parameter is not supported; specify a value of NULL.
original_msgid This parameter is accepted for compatibility and ignored.
signature This parameter is not supported; specify a value of NULL.
transaction_group This parameter is accepted for compatibility and ignored.
user_property This parameter is not supported; specify a value of NULL.
delivery_mode This parameter is not supported; specify a value of
DBMS_AQ.PERSISTENT.
payload
Use the payload parameter to retrieve the payload of a message with a dequeue
operation. The payload type must match the type specified when creating the
queue table.
msgid
Use the msgid parameter to retrieve a unique message identifier.
Example
The following anonymous block calls DBMS_AQ.DEQUEUE, retrieving a message from the
queue and a payload:
DECLARE
dequeue_options DBMS_AQ.DEQUEUE_OPTIONS_T;
message_properties DBMS_AQ.MESSAGE_PROPERTIES_T;
message_handle raw(16);
payload work_order;
BEGIN
dequeue_options.dequeue_mode := DBMS_AQ.BROWSE;
DBMS_AQ.DEQUEUE(
queue_name => 'work_queue',
dequeue_options => dequeue_options,
message_properties => message_properties,
payload => payload,
msgid => message_handle
);
DBMS_OUTPUT.PUT_LINE(
'The next work order is [' || payload.subject || '].'
);
END;
The payload is displayed by DBMS_OUTPUT.PUT_LINE.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 46
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.2.3 REGISTER
Use the REGISTER procedure to register an email address, procedure or URL that will be
notified when an item is enqueued or dequeued. The signature is:
REGISTER(
reg_list IN SYS.AQ$_REG_INFO_LIST,
count IN NUMBER)
Parameters
reg_list
reg_list is a list of type AQ$_REG_INFO_LIST; that provides information
about each subscription that you would like to register. Each entry within the list
is of the type AQ$_REG_INFO, and may contain:
Attribute Type Description
name VARCHAR2 (128) The (optionally schema-qualified) name of the
subscription.
namespace NUMERIC The only supported value is
DBMS_AQ.NAMESPACE_AQ (0)
callback VARCHAR2 Describes the action that will be performed upon
(4000) notification. Currently, only calls to PL/SQL
procedures are supported. The call should take
the form:
plsql://schema.procedure
Where:
schema specifies the schema in which the
procedure resides.
procedure specifies the name of the procedure
that will be notified.
context RAW (16) Any user-defined value required by the callback
procedure.
count
count is the number of entries in reg_list.
Example
The following anonymous block calls DBMS_AQ.REGISTER, registering procedures that
will be notified when an item is added to or removed from a queue. A set of attributes (of
sys.aq$_reg_info type) is provided for each subscription identified in the DECLARE
section:
DECLARE
subscription1 sys.aq$_reg_info;
subscription2 sys.aq$_reg_info;
subscription3 sys.aq$_reg_info;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 47
Database Compatibility for Oracle® Developers
Built-in Package Guide
subscriptionlist sys.aq$_reg_info_list;
BEGIN
subscription1 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ,
'plsql://assign_worker?PR=0',HEXTORAW('FFFF'));
subscription2 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ,
'plsql://add_to_history?PR=1',HEXTORAW('FFFF'));
subscription3 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ,
'plsql://reserve_parts?PR=2',HEXTORAW('FFFF'));
subscriptionlist := sys.aq$_reg_info_list(subscription1, subscription2,
subscription3);
dbms_aq.register(subscriptionlist, 3);
commit;
END;
/
The subscriptionlist is of type sys.aq$_reg_info_list, and contains the
previously described sys.aq$_reg_info objects. The list name and an object count
are passed to dbms_aq.register.
3.2.4 UNREGISTER
Use the UNREGISTER procedure to turn off notifications related to enqueueing and
dequeueing. The signature is:
UNREGISTER(
reg_list IN SYS.AQ$_REG_INFO_LIST,
count IN NUMBER)
Parameters
reg_list
reg_list is a list of type AQ$_REG_INFO_LIST; that provides information
about each subscription that you would like to register. Each entry within the list
is of the type AQ$_REG_INFO, and may contain:
Attribute Type Description
name VARCHAR2 (128) The (optionally schema-qualified) name of the
subscription.
namespace NUMERIC The only supported value is
DBMS_AQ.NAMESPACE_AQ (0)
callback VARCHAR2 Describes the action that will be performed upon
(4000) notification. Currently, only calls to PL/SQL
procedures are supported. The call should take
the form:
plsql://schema.procedure
Where:
schema specifies the schema in which the
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 48
Database Compatibility for Oracle® Developers
Built-in Package Guide
procedure resides.
procedure specifies the name of the procedure
that will be notified.
context RAW (16) Any user-defined value required by the
procedure.
count
count is the number of entries in reg_list.
Example
The following anonymous block calls DBMS_AQ.UNREGISTER, disabling the notifications
specified in the example for DBMS_AQ.REGISTER:
DECLARE
subscription1 sys.aq$_reg_info;
subscription2 sys.aq$_reg_info;
subscription3 sys.aq$_reg_info;
subscriptionlist sys.aq$_reg_info_list;
BEGIN
subscription1 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ,
'plsql://assign_worker?PR=0',HEXTORAW('FFFF'));
subscription2 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ,
'plsql://add_to_history?PR=1',HEXTORAW('FFFF'));
subscription3 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ,
'plsql://reserve_parts?PR=2',HEXTORAW('FFFF'));
subscriptionlist := sys.aq$_reg_info_list(subscription1, subscription2,
subscription3);
dbms_aq.unregister(subscriptionlist, 3);
commit;
END;
/
The subscriptionlist is of type sys.aq$_reg_info_list, and contains the
previously described sys.aq$_reg_info objects. The list name and an object count
are passed to dbms_aq.unregister.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 49
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.3 DBMS_AQADM
EDB Postgres Advanced Server Advanced Queueing provides message queueing and
message processing for the Advanced Server database. User-defined messages are stored
in a queue; a collection of queues is stored in a queue table. Procedures in the
DBMS_AQADM package create and manage message queues and queue tables. Use the
DBMS_AQ package to add messages to a queue or remove messages from a queue, or
register or unregister a PL/SQL callback procedure.
Advanced Server also provides extended (non-compatible) functionality for the
DBMS_AQ package with SQL commands. Please see the Database Compatibility for
Oracle Developers Reference Guide for detailed information about the following SQL
commands:
 ALTER QUEUE
 ALTER QUEUE TABLE
 CREATE QUEUE
 CREATE QUEUE TABLE
 DROP QUEUE
 DROP QUEUE TABLE
The DBMS_AQADM package provides procedures that allow you to create and manage
queues and queue tables.
Function/Procedure Return Type Description
ALTER_QUEUE n/a Modify an existing queue.
ALTER_QUEUE_TABLE n/a Modify an existing queue table.
CREATE_QUEUE n/a Create a queue.
CREATE_QUEUE_TABLE n/a Create a queue table.
DROP_QUEUE n/a Drop an existing queue.
DROP_QUEUE_TABLE n/a Drop an existing queue table.
PURGE_QUEUE_TABLE n/a Remove one or more messages from a queue table.
START_QUEUE n/a Make a queue available for enqueueing and
dequeueing procedures.
STOP_QUEUE n/a Make a queue unavailable for enqueueing and
dequeueing procedures
Advanced Server's implementation of DBMS_AQADM is a partial implementation when
compared to Oracle's version. Only those functions and procedures listed in the table
above are supported.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 50
Database Compatibility for Oracle® Developers
Built-in Package Guide
Advanced Server supports use of the arguments listed below:
Constant Description For Parameters
DBMS_AQADM.TRANSACTIONAL(1) This constant is defined, but message_grouping
will return an error if used.
DBMS_AQADM.NONE(0) Use to specify message message_grouping
grouping for a queue table.
DBMS_AQADM.NORMAL_QUEUE(0) Use with create_queue to queue_type
specify queue_type.
DBMS_AQADM.EXCEPTION_QUEUE Use with create_queue to queue_type
(1)
specify queue_type.
DBMS_AQADM.INFINITE(-1) Use with create_queue to retention_time
specify retention_time.
DBMS_AQADM.PERSISTENT (0) The message should be stored enqueue_options_t.delivery_mode
in a table.
DBMS_AQADM.BUFFERED (1) This constant is defined, but enqueue_options_t.delivery_mode
will return an error if used.
DBMS_AQADM.PERSISTENT_OR_BU This constant is defined, but enqueue_options_t.delivery_mode
FFERED (2) will return an error if used.
3.3.1 ALTER_QUEUE
Use the ALTER_QUEUE procedure to modify an existing queue. The signature is:
ALTER_QUEUE(
max_retries IN NUMBER DEFAULT NULL,
retry_delay IN NUMBER DEFAULT 0
retention_time IN NUMBER DEFAULT 0,
auto_commit IN BOOLEAN DEFAULT TRUE)
comment IN VARCHAR2 DEFAULT NULL,
Parameters
queue_name
The name of the new queue.
max_retries
max_retries specifies the maximum number of attempts to remove a message
with a dequeue statement. The value of max_retries is incremented with each
ROLLBACK statement. When the number of failed attempts reaches the value
specified by max_retries, the message is moved to the exception queue.
Specify 0 to indicate that no retries are allowed.
retry_delay
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 51
Database Compatibility for Oracle® Developers
Built-in Package Guide
retry_delay specifies the number of seconds until a message is scheduled for
re-processing after a ROLLBACK. Specify 0 to indicate that the message should be
retried immediately (the default).
retention_time
retention_time specifies the length of time (in seconds) that a message will be
stored after being dequeued. You can also specify 0 (the default) to indicate the
message should not be retained after dequeueing, or INFINITE to retain the
message forever.
auto_commit
This parameter is accepted for compatibility and ignored.
comment
comment specifies a comment associated with the queue.
Example
The following command alters a queue named work_order, setting the retry_delay
parameter to 5 seconds:
EXEC DBMS_AQADM.ALTER_QUEUE(queue_name => 'work_order', retry_delay => 5);
3.3.2 ALTER_QUEUE_TABLE
Use the ALTER_QUEUE_TABLE procedure to modify an existing queue table. The
signature is:
ALTER_QUEUE_TABLE (
queue_table IN VARCHAR2,
comment IN VARCHAR2 DEFAULT NULL,
primary_instance IN BINARY_INTEGER DEFAULT 0,
secondary_instance IN BINARY_INTEGER DEFAULT 0,
Parameters
queue_table
The (optionally schema-qualified) name of the queue table.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 52
Database Compatibility for Oracle® Developers
Built-in Package Guide
comment
Use the comment parameter to provide a comment about the queue table.
primary_instance
primary_instance is accepted for compatibility and stored, but is ignored.
secondary_instance
secondary_instance is accepted for compatibility, but is ignored.
Example
The following command modifies a queue table named work_order_table:
EXEC DBMS_AQADM.ALTER_QUEUE_TABLE
(queue_table => 'work_order_table', comment => 'This queue table
contains work orders for the shipping department.');
The queue table is named work_order_table; the command adds a comment to the
definition of the queue table.
3.3.3 CREATE_QUEUE
Use the CREATE_QUEUE procedure to create a queue in an existing queue table. The
signature is:
CREATE_QUEUE(
queue_name IN VARCHAR2
queue_table IN VARCHAR2,
queue_type IN BINARY_INTEGER DEFAULT NORMAL_QUEUE,
max_retries IN NUMBER DEFAULT 5,
retry_delay IN NUMBER DEFAULT 0
retention_time IN NUMBER DEFAULT 0,
dependency_tracking IN BOOLEAN DEFAULT FALSE,
comment IN VARCHAR2 DEFAULT NULL,
auto_commit IN BOOLEAN DEFAULT TRUE)
Parameters
queue_name
The name of the new queue.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 53
Database Compatibility for Oracle® Developers
Built-in Package Guide
queue_table
The name of the table in which the new queue will reside.
queue_type
The type of the new queue. The valid values for queue_type are:
DBMS_AQADM.NORMAL_QUEUE – This value specifies a normal queue (the
default).
DBMS_AQADM.EXCEPTION_QUEUE – This value specifies that the new queue is
an exception queue. An exception queue will support only dequeue operations.
max_retries
max_retries specifies the maximum number of attempts to remove a message
with a dequeue statement. The value of max_retries is incremented with each
ROLLBACK statement. When the number of failed attempts reaches the value
specified by max_retries, the message is moved to the exception queue. The
default value for a system table is 0; the default value for a user created table is 5.
retry_delay
retry_delay specifies the number of seconds until a message is scheduled for
re-processing after a ROLLBACK. Specify 0 to indicate that the message should be
retried immediately (the default).
retention_time
retention_time specifies the length of time (in seconds) that a message will be
stored after being dequeued. You can also specify 0 (the default) to indicate the
message should not be retained after dequeueing, or INFINITE to retain the
message forever.
dependency_tracking
This parameter is accepted for compatibility and ignored.
comment
comment specifies a comment associated with the queue.
auto_commit
This parameter is accepted for compatibility and ignored.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 54
Database Compatibility for Oracle® Developers
Built-in Package Guide
Example
The following anonymous block creates a queue named work_order in the
work_order_table table:
BEGIN
DBMS_AQADM.CREATE_QUEUE ( queue_name => 'work_order', queue_table =>
'work_order_table', comment => 'This queue contains pending work orders.');
END;
3.3.4 CREATE_QUEUE_TABLE
Use the CREATE_QUEUE_TABLE procedure to create a queue table. The signature is:
CREATE_QUEUE_TABLE (
queue_table IN VARCHAR2,
queue_payload_type IN VARCHAR2,
storage_clause IN VARCHAR2 DEFAULT NULL,
sort_list IN VARCHAR2 DEFAULT NULL,
multiple_consumers IN BOOLEAN DEFAULT FALSE,
message_grouping IN BINARY_INTEGER DEFAULT NONE,
comment IN VARCHAR2 DEFAULT NULL,
auto_commit IN BOOLEAN DEFAULT TRUE,
primary_instance IN BINARY_INTEGER DEFAULT 0,
secondary_instance IN BINARY_INTEGER DEFAULT 0,
compatible IN VARCHAR2 DEFAULT NULL,
secure IN BOOLEAN DEFAULT FALSE)
Parameters
queue_table
The (optionally schema-qualified) name of the queue table.
queue_payload_type
The user-defined type of the data that will be stored in the queue table. Please
note that to specify a RAW data type, you must create a user-defined type that