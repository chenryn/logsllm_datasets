### message_properties

`message_properties` is a value of the type `message_properties_t`, which is defined as follows:

```sql
message_properties_t IS RECORD(
    priority BINARY_INTEGER NOT NULL DEFAULT 1,
    delay BINARY_INTEGER NOT NULL DEFAULT NO_DELAY,
    expiration BINARY_INTEGER NOT NULL DEFAULT NEVER,
    correlation VARCHAR2(128) DEFAULT NULL,
    attempts BINARY_INTEGER,
    recipient_list AQ$_RECIPIENT_LIST_T,
    exception_queue VARCHAR2(61) DEFAULT NULL,
    enqueue_time DATE,
    state BINARY_INTEGER,
    sender_id SYS.AQ$_AGENT DEFAULT NULL,
    original_msgid RAW(16) DEFAULT NULL,
    signature aq$_sig_prop DEFAULT NULL,
    transaction_group VARCHAR2(30) DEFAULT NULL,
    user_property SYS.ANYDATA DEFAULT NULL,
    delivery_mode PLS_INTEGER NOT NULL DEFAULT DBMS_AQ.PERSISTENT
);
```

#### Supported Values for `message_properties_t`

- **priority**: If the queue table definition includes a `sort_list` that references `priority`, this parameter affects the order in which messages are dequeued. A lower value indicates a higher dequeue priority.
- **delay**: Specifies the number of seconds that will pass before a message is available for dequeuing, or `NO_DELAY`.
- **expiration**: Specifies the number of seconds until a message expires.
- **correlation**: Used to specify a message that will be associated with the entry; the default is `NULL`.
- **attempts**: A system-maintained value that specifies the number of attempts to dequeue the message.
- **recipient_list**: This parameter is not supported.
- **exception_queue**: Specifies the name of an exception queue to which a message will be moved if it expires or is dequeued by a transaction that rolls back too many times.
- **enqueue_time**: The time the record was added to the queue; this value is provided by the system.
- **state**: Maintained by `DBMS_AQ`; possible values are:
  - `DBMS_AQ.WAITING`: The delay has not been reached.
  - `DBMS_AQ.READY`: The queue entry is ready for processing.
  - `DBMS_AQ.PROCESSED`: The queue entry has been processed.
  - `DBMS_AQ.EXPIRED`: The queue entry has been moved to the exception queue.
- **sender_id**: This parameter is not supported; specify a value of `NULL`.
- **original_msgid**: This parameter is accepted for compatibility and ignored.
- **signature**: This parameter is not supported; specify a value of `NULL`.
- **transaction_group**: This parameter is accepted for compatibility and ignored.
- **user_property**: This parameter is not supported; specify a value of `NULL`.
- **delivery_mode**: This parameter is not supported; specify a value of `DBMS_AQ.PERSISTENT`.

### Example: Dequeue Operation

The following anonymous block calls `DBMS_AQ.DEQUEUE` to retrieve a message from the queue and its payload:

```sql
DECLARE
    dequeue_options DBMS_AQ.DEQUEUE_OPTIONS_T;
    message_properties DBMS_AQ.MESSAGE_PROPERTIES_T;
    message_handle RAW(16);
    payload work_order;
BEGIN
    dequeue_options.dequeue_mode := DBMS_AQ.BROWSE;
    DBMS_AQ.DEQUEUE(
        queue_name => 'work_queue',
        dequeue_options => dequeue_options,
        message_properties => message_properties,
        payload => payload,
        msgid => message_handle
    );
    DBMS_OUTPUT.PUT_LINE('The next work order is [' || payload.subject || '].');
END;
/
```

### 3.2.3 REGISTER

Use the `REGISTER` procedure to register an email address, procedure, or URL that will be notified when an item is enqueued or dequeued. The signature is:

```sql
REGISTER(
    reg_list IN SYS.AQ$_REG_INFO_LIST,
    count IN NUMBER
)
```

#### Parameters

- **reg_list**: A list of type `AQ$_REG_INFO_LIST` that provides information about each subscription to be registered. Each entry within the list is of type `AQ$_REG_INFO` and may contain:
  - **name**: (Optionally schema-qualified) name of the subscription.
  - **namespace**: The only supported value is `DBMS_AQ.NAMESPACE_AQ (0)`.
  - **callback**: Describes the action that will be performed upon notification. Currently, only calls to PL/SQL procedures are supported. The call should take the form `plsql://schema.procedure`.
  - **context**: Any user-defined value required by the callback procedure.
- **count**: The number of entries in `reg_list`.

#### Example

The following anonymous block calls `DBMS_AQ.REGISTER` to register procedures that will be notified when an item is added to or removed from a queue:

```sql
DECLARE
    subscription1 sys.aq$_reg_info;
    subscription2 sys.aq$_reg_info;
    subscription3 sys.aq$_reg_info;
    subscriptionlist sys.aq$_reg_info_list;
BEGIN
    subscription1 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ, 'plsql://assign_worker?PR=0', HEXTORAW('FFFF'));
    subscription2 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ, 'plsql://add_to_history?PR=1', HEXTORAW('FFFF'));
    subscription3 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ, 'plsql://reserve_parts?PR=2', HEXTORAW('FFFF'));
    subscriptionlist := sys.aq$_reg_info_list(subscription1, subscription2, subscription3);
    dbms_aq.register(subscriptionlist, 3);
    COMMIT;
END;
/
```

### 3.2.4 UNREGISTER

Use the `UNREGISTER` procedure to turn off notifications related to enqueuing and dequeuing. The signature is:

```sql
UNREGISTER(
    reg_list IN SYS.AQ$_REG_INFO_LIST,
    count IN NUMBER
)
```

#### Parameters

- **reg_list**: A list of type `AQ$_REG_INFO_LIST` that provides information about each subscription to be unregistered. Each entry within the list is of type `AQ$_REG_INFO` and may contain:
  - **name**: (Optionally schema-qualified) name of the subscription.
  - **namespace**: The only supported value is `DBMS_AQ.NAMESPACE_AQ (0)`.
  - **callback**: Describes the action that will be performed upon notification. Currently, only calls to PL/SQL procedures are supported. The call should take the form `plsql://schema.procedure`.
  - **context**: Any user-defined value required by the procedure.
- **count**: The number of entries in `reg_list`.

#### Example

The following anonymous block calls `DBMS_AQ.UNREGISTER` to disable the notifications specified in the example for `DBMS_AQ.REGISTER`:

```sql
DECLARE
    subscription1 sys.aq$_reg_info;
    subscription2 sys.aq$_reg_info;
    subscription3 sys.aq$_reg_info;
    subscriptionlist sys.aq$_reg_info_list;
BEGIN
    subscription1 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ, 'plsql://assign_worker?PR=0', HEXTORAW('FFFF'));
    subscription2 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ, 'plsql://add_to_history?PR=1', HEXTORAW('FFFF'));
    subscription3 := sys.aq$_reg_info('q', DBMS_AQ.NAMESPACE_AQ, 'plsql://reserve_parts?PR=2', HEXTORAW('FFFF'));
    subscriptionlist := sys.aq$_reg_info_list(subscription1, subscription2, subscription3);
    dbms_aq.unregister(subscriptionlist, 3);
    COMMIT;
END;
/
```

### 3.3 DBMS_AQADM

EDB Postgres Advanced Server Advanced Queueing provides message queuing and message processing for the Advanced Server database. User-defined messages are stored in a queue, and a collection of queues is stored in a queue table. Procedures in the `DBMS_AQADM` package create and manage message queues and queue tables. Use the `DBMS_AQ` package to add messages to a queue or remove messages from a queue, or register or unregister a PL/SQL callback procedure.

Advanced Server also provides extended (non-compatible) functionality for the `DBMS_AQ` package with SQL commands. Please see the Database Compatibility for Oracle Developers Reference Guide for detailed information about the following SQL commands:

- `ALTER QUEUE`
- `ALTER QUEUE TABLE`
- `CREATE QUEUE`
- `CREATE QUEUE TABLE`
- `DROP QUEUE`
- `DROP QUEUE TABLE`

The `DBMS_AQADM` package provides procedures that allow you to create and manage queues and queue tables.

#### Function/Procedure Summary

- **ALTER_QUEUE**: Modify an existing queue.
- **ALTER_QUEUE_TABLE**: Modify an existing queue table.
- **CREATE_QUEUE**: Create a queue.
- **CREATE_QUEUE_TABLE**: Create a queue table.
- **DROP_QUEUE**: Drop an existing queue.
- **DROP_QUEUE_TABLE**: Drop an existing queue table.
- **PURGE_QUEUE_TABLE**: Remove one or more messages from a queue table.
- **START_QUEUE**: Make a queue available for enqueuing and dequeuing procedures.
- **STOP_QUEUE**: Make a queue unavailable for enqueuing and dequeuing procedures.

Advanced Server's implementation of `DBMS_AQADM` is a partial implementation compared to Oracle's version. Only the functions and procedures listed above are supported.

#### Supported Constants

- **DBMS_AQADM.TRANSACTIONAL(1)**: Defined but will return an error if used.
- **DBMS_AQADM.NONE(0)**: Use to specify message grouping for a queue table.
- **DBMS_AQADM.NORMAL_QUEUE(0)**: Use with `create_queue` to specify `queue_type`.
- **DBMS_AQADM.EXCEPTION_QUEUE(1)**: Use with `create_queue` to specify `queue_type`.
- **DBMS_AQADM.INFINITE(-1)**: Use with `create_queue` to specify `retention_time`.
- **DBMS_AQADM.PERSISTENT (0)**: The message should be stored in a table.
- **DBMS_AQADM.BUFFERED (1)**: Defined but will return an error if used.
- **DBMS_AQADM.PERSISTENT_OR_BUFFERED (2)**: Defined but will return an error if used.

### 3.3.1 ALTER_QUEUE

Use the `ALTER_QUEUE` procedure to modify an existing queue. The signature is:

```sql
ALTER_QUEUE(
    queue_name IN VARCHAR2,
    max_retries IN NUMBER DEFAULT NULL,
    retry_delay IN NUMBER DEFAULT 0,
    retention_time IN NUMBER DEFAULT 0,
    auto_commit IN BOOLEAN DEFAULT TRUE,
    comment IN VARCHAR2 DEFAULT NULL
)
```

#### Parameters

- **queue_name**: The name of the queue.
- **max_retries**: Specifies the maximum number of attempts to remove a message with a dequeue statement. When the number of failed attempts reaches the value specified by `max_retries`, the message is moved to the exception queue. Specify `0` to indicate that no retries are allowed.
- **retry_delay**: Specifies the number of seconds until a message is scheduled for re-processing after a `ROLLBACK`. Specify `0` to indicate that the message should be retried immediately (the default).
- **retention_time**: Specifies the length of time (in seconds) that a message will be stored after being dequeued. You can also specify `0` (the default) to indicate the message should not be retained after dequeuing, or `INFINITE` to retain the message forever.
- **auto_commit**: This parameter is accepted for compatibility and ignored.
- **comment**: Specifies a comment associated with the queue.

#### Example

The following command alters a queue named `work_order`, setting the `retry_delay` parameter to 5 seconds:

```sql
EXEC DBMS_AQADM.ALTER_QUEUE(queue_name => 'work_order', retry_delay => 5);
```

### 3.3.2 ALTER_QUEUE_TABLE

Use the `ALTER_QUEUE_TABLE` procedure to modify an existing queue table. The signature is:

```sql
ALTER_QUEUE_TABLE (
    queue_table IN VARCHAR2,
    comment IN VARCHAR2 DEFAULT NULL,
    primary_instance IN BINARY_INTEGER DEFAULT 0,
    secondary_instance IN BINARY_INTEGER DEFAULT 0
)
```

#### Parameters

- **queue_table**: The (optionally schema-qualified) name of the queue table.
- **comment**: Provides a comment about the queue table.
- **primary_instance**: Accepted for compatibility and stored, but is ignored.
- **secondary_instance**: Accepted for compatibility, but is ignored.

#### Example

The following command modifies a queue table named `work_order_table`:

```sql
EXEC DBMS_AQADM.ALTER_QUEUE_TABLE(
    queue_table => 'work_order_table', 
    comment => 'This queue table contains work orders for the shipping department.'
);
```

### 3.3.3 CREATE_QUEUE

Use the `CREATE_QUEUE` procedure to create a queue in an existing queue table. The signature is:

```sql
CREATE_QUEUE(
    queue_name IN VARCHAR2,
    queue_table IN VARCHAR2,
    queue_type IN BINARY_INTEGER DEFAULT NORMAL_QUEUE,
    max_retries IN NUMBER DEFAULT 5,
    retry_delay IN NUMBER DEFAULT 0,
    retention_time IN NUMBER DEFAULT 0,
    dependency_tracking IN BOOLEAN DEFAULT FALSE,
    comment IN VARCHAR2 DEFAULT NULL,
    auto_commit IN BOOLEAN DEFAULT TRUE
)
```

#### Parameters

- **queue_name**: The name of the new queue.
- **queue_table**: The name of the table in which the new queue will reside.
- **queue_type**: The type of the new queue. Valid values are:
  - `DBMS_AQADM.NORMAL_QUEUE (0)`: Specifies a normal queue (the default).
  - `DBMS_AQADM.EXCEPTION_QUEUE (1)`: Specifies that the new queue is an exception queue, which will support only dequeue operations.
- **max_retries**: Specifies the maximum number of attempts to remove a message with a dequeue statement. The default value for a system table is `0`; the default value for a user-created table is `5`.
- **retry_delay**: Specifies the number of seconds until a message is scheduled for re-processing after a `ROLLBACK`. Specify `0` to indicate that the message should be retried immediately (the default).
- **retention_time**: Specifies the length of time (in seconds) that a message will be stored after being dequeued. You can also specify `0` (the default) to indicate the message should not be retained after dequeuing, or `INFINITE` to retain the message forever.
- **dependency_tracking**: This parameter is accepted for compatibility and ignored.
- **comment**: Specifies a comment associated with the queue.
- **auto_commit**: This parameter is accepted for compatibility and ignored.

#### Example

The following anonymous block creates a queue named `work_order` in the `work_order_table` table:

```sql
BEGIN
    DBMS_AQADM.CREATE_QUEUE(
        queue_name => 'work_order', 
        queue_table => 'work_order_table', 
        comment => 'This queue contains pending work orders.'
    );
END;
/
```

### 3.3.4 CREATE_QUEUE_TABLE

Use the `CREATE_QUEUE_TABLE` procedure to create a queue table. The signature is:

```sql
CREATE_QUEUE_TABLE (
    queue_table IN VARCHAR2,
    queue_payload_type IN VARCHAR2,
    storage_clause IN VARCHAR2 DEFAULT NULL,
    sort_list IN VARCHAR2 DEFAULT NULL,
    multiple_consumers IN BOOLEAN DEFAULT FALSE,
    message_grouping IN BINARY_INTEGER DEFAULT NONE,
    comment IN VARCHAR2 DEFAULT NULL,
    auto_commit IN BOOLEAN DEFAULT TRUE,
    primary_instance IN BINARY_INTEGER DEFAULT 0,
    secondary_instance IN BINARY_INTEGER DEFAULT 0,
    compatible IN VARCHAR2 DEFAULT NULL,
    secure IN BOOLEAN DEFAULT FALSE
)
```

#### Parameters

- **queue_table**: The (optionally schema-qualified) name of the queue table.
- **queue_payload_type**: The user-defined type of the data that will be stored in the queue table. Note that to specify a `RAW` data type, you must create a user-defined type.
- **storage_clause**: Optional storage clause for the queue table.
- **sort_list**: Optional sort list for the queue table.
- **multiple_consumers**: Indicates whether the queue supports multiple consumers.
- **message_grouping**: Specifies the message grouping. The valid value is `DBMS_AQADM.NONE (0)`.
- **comment**: Provides a comment about the queue table.
- **auto_commit**: This parameter is accepted for compatibility and ignored.
- **primary_instance**: Accepted for compatibility and stored, but is ignored.
- **secondary_instance**: Accepted for compatibility, but is ignored.
- **compatible**: Optional compatibility setting.
- **secure**: Indicates whether the queue table is secure.

#### Example

The following command creates a queue table named `work_order_table`:

```sql
EXEC DBMS_AQADM.CREATE_QUEUE_TABLE(
    queue_table => 'work_order_table', 
    queue_payload_type => 'work_order_type', 
    comment => 'This queue table contains work orders for the shipping department.'
);
```

This completes the optimized and structured documentation for the `message_properties` and related procedures in the `DBMS_AQ` and `DBMS_AQADM` packages.