### 优化后的文本

#### 结构体 `_LDR_DATA_TABLE_ENTRY` 的分析

以下是对两个 `_LDR_DATA_TABLE_ENTRY` 实例的详细解析。这些结构体用于描述已加载的 DLL 模块的信息。

##### ntdll.dll

- **InLoadOrderLinks**: _LIST_ENTRY [0x00000209`4b3f2f60 - 0x00000209`4b3f2dd0]
- **InMemoryOrderLinks**: _LIST_ENTRY [0x00000209`4b3f3b10 - 0x00007fff`ff43a4f0]
- **InInitializationOrderLinks**: _LIST_ENTRY [0x00007fff`ff2d0000 - 0x00000000`00000000]
- **DllBase**: 0x00000000`001f5000
- **EntryPoint**: 0x00000000`003c003a
- **SizeOfImage**: 0x4b3f2cc0
- **FullDllName**: _UNICODE_STRING "ntdll.dll"
- **BaseDllName**: _UNICODE_STRING "⸰䬿ȉ" (可能存在编码问题)
- **Flags**: 0xff43a280
  - **PackagedBinary**: 0
  - **MarkedForRemoval**: 0
  - **ImageDll**: 0
  - **LoadNotificationsSent**: 0
  - **TelemetryEntryProcessed**: 0
  - **ProcessStaticImport**: 0
  - **InLegacyLists**: 0
  - **InIndexes**: 1
  - **ShimDll**: 0
  - **InExceptionTable**: 1
  - **ReservedFlags1**: 0
  - **LoadInProgress**: 0
  - **LoadConfigProcessed**: 1
  - **EntryProcessed**: 0
  - **ProtectDelayLoad**: 1
  - **ReservedFlags3**: 3
  - **DontCallForThreads**: 0
  - **ProcessAttachCalled**: 0
  - **ProcessAttachFailed**: 0
  - **CorDeferredValidate**: 0
  - **CorImage**: 1
  - **DontRelocate**: 0
  - **CorILOnly**: 1
  - **ChpeImage**: 1
  - **ReservedFlags5**: 3
  - **Redirected**: 1
  - **ReservedFlags6**: 3
  - **CompatDatabaseProcessed**: 1
- **ObsoleteLoadCount**: 0x7fff
- **TlsIndex**: 0
- **HashLinks**: _LIST_ENTRY [0x00000000`a280d1d6 - 0x00000000`00000000]
- **TimeDateStamp**: 0
- **EntryPointActivationContext**: 0x00000209`4b3f2ef0
- **Lock**: 0x00000209`4b3f2ef0
- **DdagNode**: 0x00000209`4b3f2ef0
- **NodeModuleLink**: _LIST_ENTRY [0x00000000`00000000 - 0x00000000`00000000]
- **LoadContext**: (null)
- **ParentDllBase**: 0x00000209`4b4070f8
- **SwitchBackContext**: (null)
- **BaseAddressIndexNode**: _RTL_BALANCED_NODE
- **MappingInfoIndexNode**: _RTL_BALANCED_NODE
- **OriginalBase**: 0xf46857d4
- **LoadTime**: _LARGE_INTEGER 0x00000002`00000000
- **BaseNameHashValue**: 0x800
- **LoadReason**: 0 (LoadReasonStaticDependency)
- **ImplicitPathOptions**: 0
- **ReferenceCount**: 0
- **DependentLoadFlags**: 0xfdf023f0
- **SigningLevel**: 0x66 'f'

##### KERNEL32.DLL

- **InLoadOrderLinks**: _LIST_ENTRY [0x00000209`4b3f3b00 - 0x00000209`4b3f2dd0]
- **InMemoryOrderLinks**: _LIST_ENTRY [0x00000209`4b3f4f30 - 0x00000209`4b3f3b10]
- **InInitializationOrderLinks**: _LIST_ENTRY [0x00007fff`fe180000 - 0x00007fff`fe1970d0]
- **DllBase**: 0x00000000`000be000
- **EntryPoint**: 0x00000000`00420040
- **SizeOfImage**: 0x4b3f3670
- **FullDllName**: _UNICODE_STRING "KERNEL32.DLL"
- **BaseDllName**: _UNICODE_STRING "㕐䬿ȉ" (可能存在编码问题)
- **Flags**: 0xff43a260
  - **PackagedBinary**: 0
  - **MarkedForRemoval**: 0
  - **ImageDll**: 0
  - **LoadNotificationsSent**: 0
  - **TelemetryEntryProcessed**: 0
  - **ProcessStaticImport**: 1
  - **InLegacyLists**: 1
  - **InIndexes**: 0
  - **ShimDll**: 0
  - **InExceptionTable**: 1
  - **ReservedFlags1**: 0
  - **LoadInProgress**: 0
  - **LoadConfigProcessed**: 1
  - **EntryProcessed**: 0
  - **ProtectDelayLoad**: 1
  - **ReservedFlags3**: 3
  - **DontCallForThreads**: 0
  - **ProcessAttachCalled**: 0
  - **ProcessAttachFailed**: 0
  - **CorDeferredValidate**: 0
  - **CorImage**: 1
  - **DontRelocate**: 0
  - **CorILOnly**: 1
  - **ChpeImage**: 1
  - **ReservedFlags5**: 3
  - **Redirected**: 1
  - **ReservedFlags6**: 3
  - **CompatDatabaseProcessed**: 1
- **ObsoleteLoadCount**: 0x7fff
- **TlsIndex**: 0
- **HashLinks**: _LIST_ENTRY [0x00000000`0871fae9 - 0x00000000`00000000]
- **TimeDateStamp**: 0
- **EntryPointActivationContext**: 0x00000209`4b3f3610
- **Lock**: 0x00000209`4b3f3610
- **DdagNode**: 0x00000209`4b3f3610
- **NodeModuleLink**: _LIST_ENTRY [0x00000000`00000000 - 0x00000000`00000000]
- **LoadContext**: 0x00007fff`ff3ec3a4
- **ParentDllBase**: 0x00000209`4b406b08
- **SwitchBackContext**: 0x00000209`4b3f5f68
- **BaseAddressIndexNode**: _RTL_BALANCED_NODE
- **MappingInfoIndexNode**: _RTL_BALANCED_NODE
- **OriginalBase**: 0x00000004`536cd652
- **LoadTime**: _LARGE_INTEGER 0x00000002`00004000
- **BaseNameHashValue**: 0
- **LoadReason**: 0 (LoadReasonStaticDependency)
- **ImplicitPathOptions**: 0
- **ReferenceCount**: 0
- **DependentLoadFlags**: 0xfdf023f0
- **SigningLevel**: 0x66 'f'

通过上述结构，可以实现模块断链隐藏 DLL。使用 `!dlls` 命令的结果与此相同。

#### 获取 PEB

以下是几种常用的编程方法来调用 PEB（进程环境块）：

1. **使用 NtQueryInformationProcess 函数**

   `NtQueryInformationProcess` 是一个内核函数，用于获取进程信息。其结构体如下：

   ```c
   __kernel_entry NTSTATUS NtQueryInformationProcess(
       [in]            HANDLE           ProcessHandle,
       [in]            PROCESSINFOCLASS ProcessInformationClass,
       [out]           PVOID            ProcessInformation,
       [in]            ULONG            ProcessInformationLength,
       [out, optional] PULONG           ReturnLength
   );
   ```

   该函数的第二个参数可以是一个 `PROCESS_BASIC_INFORMATION` 结构体，其中包含指向 PEB 的指针。示例如下：

   ```c
   #include <Windows.h>
   #include <winternl.h>

   typedef NTSTATUS(*MYPROC) (HANDLE, PROCESSINFOCLASS, PVOID, ULONG, PULONG);
   typedef struct _PROCESS_BASIC_INFORMATION {
       NTSTATUS ExitStatus;
       PPEB PebBaseAddress;
       ULONG_PTR AffinityMask;
       KPRIORITY BasePriority;
       ULONG_PTR UniqueProcessId;
       ULONG_PTR InheritedFromUniqueProcessId;
   } PROCESS_BASIC_INFORMATION;

   int main() {
       HANDLE h = GetCurrentProcess();
       PROCESS_BASIC_INFORMATION ProcessInformation;
       ULONG length = 0;
       HINSTANCE ntdll;
       MYPROC GetProcessInformation;

       ntdll = LoadLibrary(TEXT("Ntdll.dll"));
       GetProcessInformation = (MYPROC)GetProcAddress(ntdll, "NtQueryInformationProcess");

       (GetProcessInformation)(h, ProcessBasicInformation, &ProcessInformation, sizeof(ProcessInformation), &length);

       // 示例：替换命令行和映像路径名
       wchar_t commandline[] = L"C:\\windows\\system32\\notepad.exe";
       ProcessInformation.PebBaseAddress->ProcessParameters->CommandLine.Buffer = commandline;
       ProcessInformation.PebBaseAddress->ProcessParameters->ImagePathName.Buffer = commandline;

       return 0;
   }
   ```

2. **汇编调用**

   对于 32 位和 64 位系统，PEB 分别存储在 `fs` 和 `gs` 寄存器中。以下是 64 位和 32 位的汇编代码示例：

   **64 位汇编**：

   ```asm
   GetPEBAsm64 proc
       push rbx
       xor rbx, rbx
       xor rax, rax
       mov rbx, qword ptr gs:[00000060h]
       mov rax, rbx
       pop rbx
       ret
   GetPEBAsm64 endp
   ```

   **32 位汇编**：

   ```asm
   __asm
   {
       mov eax, dword ptr fs : [00000030h]
       mov peb, eax
   }
   ```

3. **定义相关结构体**

   以下是与 PEB 相关的一些结构体定义：

   ```c
   typedef struct _UNICODE_STRING {
       unsigned short Length;
       unsigned short MaximumLength;
       wchar_t* Buffer;
   } UNICODE_STRING, *PUNICODE_STRING;

   typedef struct _CURDIR {
       UNICODE_STRING DosPath;
       void* Handle;
   } CURDIR, *PCURDIR;

   typedef struct _RTL_USER_PROCESS_PARAMETERS {
       unsigned int MaximumLength;
       unsigned int Length;
       unsigned int Flags;
       unsigned int DebugFlags;
       void* ConsoleHandle;
       unsigned int ConsoleFlags;
       void* StandardInput;
       void* StandardOutput;
       void* StandardError;
       CURDIR CurrentDirectory;
   } RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;

   PRTL_USER_PROCESS_PARAMETERS ProcParam(void);

   int main(void) {
       wprintf(L"%s\n", ProcParam()->CurrentDirectory.DosPath.Buffer);
   }
   ```

通过以上方法，可以有效地获取和操作 PEB 以满足特定需求。