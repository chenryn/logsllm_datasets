### 3. Multi-Recipient Public Key Encryption (PKE)

#### 3.2 Security of MR-MM-PKE

In this section, we delve into the essential concepts of multi-recipient encryption. We will first outline the purpose and syntax of multi-recipient encryption, followed by a critical review of the security models proposed in the literature. We identify several shortcomings in these models and propose solutions to address them. The construction of a secure multi-recipient encryption scheme under our new model is deferred to Sections 4.2 and 5.

#### 3.1 Syntax of MR-MM-PKE

We revisit the concept of multi-recipient encryption as introduced in [5]. Unlike traditional public key encryption, this primitive allows for batch processing, enabling multiple encryption operations to be executed simultaneously. The work in [5] focuses on the multi-message setting, where each specified recipient key encrypts an individual message. A key property of multi-recipient encryption is that the decryption process is oblivious to the other keys used in creating a given ciphertext. This feature can lead to significant efficiency gains due to cost amortization in the encryption process, where some computations can be shared across multiple ciphertexts.

**Definition 5 (MR-MM-PKE):** A multi-recipient multi-message public key encryption scheme (MR-MM-PKE) \( E = (PGen, KGen, Enc, Dec) \) consists of four efficient algorithms:

- **PGen(1\(\lambda\))**: On input security parameter \( 1\lambda \), this algorithm outputs public parameters \( pp \).
- **KGen( )**: This probabilistic algorithm outputs a key pair \( (sk, pk) \).
- **Enc((pk1, ..., pkn), (m1, ..., mn))**: On input vectors of public keys \( (pk1, ..., pkn) \) and messages \( (m1, ..., mn) \), this probabilistic algorithm outputs a vector of ciphertexts \( (c1, ..., cn) \).
- **Dec(sk, c)**: On input a secret key \( sk \) and a ciphertext \( c \), this algorithm outputs either a message or the error symbol \( \bot \).

For fixed parameters \( pp \) and any \( n \in \mathbb{N} \), let \( (skj, pkj) \leftarrow KGen() \) and \( mj \in \{0, 1\}^* \) for all \( j \in [n] \). The MR-MM-PKE is correct if for all encryptions:
\[ (c1, ..., cn) \leftarrow Enc((pk1, ..., pkn), (m1, ..., mn)) \]
we have \( Dec(skj, cj) = mj \) for all \( j \in [n] \).

Note that regular public key encryption can be seen as a special case of MR-MM-PKE by restricting the Enc algorithm to accept only single-element vectors \( (pk1, m1) \). Additionally, a straightforward but uninteresting way to construct MR-MM-PKE from regular public key encryption is to create all ciphertexts independently by invoking \( Enc(pkj, mj) \) once for each \( j \in [n] \).

To model the security of MR-MM-PKE schemes, [5] proposes a generalization of the standard indistinguishability notion for public key encryption. Specifically, they introduce two notions: one corresponding to CPA security and the other to CCA security. Here, we focus on the CCA variant. In their game-based definition, the adversary must distinguish between encryptions of two sets of messages. However, upon closer examination, we found several technical issues that weaken the practical security guarantees provided by the model.

#### 3.2.1 The Security Model by Bellare, Boldyreva, and Staddon [5]

In Figure 2, we reproduce the CCA security experiment from [5] (with slight notation adjustments). The experiment simulates an environment with \( k \) honest users, providing the adversary with their public keys \( (pk1, ..., pkk) \) and decryption oracles. The adversary outputs two vectors of messages, \( (m0_1, ..., m0_k) \) and \( (m1_1, ..., m1_k) \), where one of these vectors will be encrypted for the keys in \( (pk1, ..., pkk) \) in the challenge ciphertext \( (c1, ..., ck) \). Additionally, the adversary generates adversarial keys \( (pk1^*, ..., pk(n-k)^*) \) and corresponding messages \( (m1^*, ..., m(n-k)^*) \). The consistency of the adversary's output is checked, and the challenge ciphertext is created. According to [5], an MR-MM-PKE scheme \( E \) is secure if the return value \( d \) of the experiment is computationally independent of the parameter \( b \) for all efficient adversaries \( A = (A1, A2) \).

#### 3.2.2 Shortcomings in the Model from [5]

The first issue arises because the vector of encryption keys is always prefixed by honestly chosen ones. This can be problematic. Consider an arbitrary MR-MM-PKE scheme \( E \) that is secure in the model from [5]. Assume each ciphertext of \( E \) starts with a prefix "0". Execute the KGen algorithm to create a distinguished key pair \( (sk^*, pk^*) \). Now, modify the encryption algorithm such that, on input \( (pk1, ..., pkn) \) and \( (m1, ..., mn) \), the ciphertext vector \( (c1, ..., cn) \) is computed as usual if \( pk1 \neq pk^* \), but set to \( ("1" || m1, ..., "1" || mn) \) otherwise. If the decryption routine is adapted to handle these ciphertexts correctly, the modified scheme \( E' \) is still secure in the sense of [5]. However, intuitively, \( E' \) is not secure because the prefix "1" indicates the presence of \( pk^* \).

Another issue is the verification of the consistency of the adversary's outputs. In [5], the adversary is required to reveal the decryption keys corresponding to the adversarially-generated keys. In a follow-up work [4], the authors restrict the adversary further by requiring the random coins used to create the keys instead. Generally, security models assuming knowledge-of-secret-key (KOSK) are so strong that their practical relevance is questionable. While it is argued that public keys are certified by trusted authorities (CAs) in practice, we are not aware of any CA that requires zero-knowledge proofs of knowledge of secret keys.

#### 3.2.3 Criticism of the KOSK Assumption

In line (c) of the experiment, the adversary is expected to reveal the decryption keys corresponding to potentially maliciously-chosen encryption keys. This is known as the KOSK assumption. This assumption is problematic because it may not hold in practical systems where proofs of knowledge of private keys are not required. For example, consider the ElGamal encryption scheme. If the adversary claims a key \( X2 = X1^t \) for some \( t \in \mathbb{Z}_p \), the confidentiality of all other ciphertext components can be trivially broken.

#### 3.2.4 Our Strengthened Security Model for MR-MM-PKE

We now present our new security model for multi-recipient encryption, which addresses the issues discussed above. In our model, the adversary can specify arbitrary vectors of encryption keys, including repetitions and any order. The KOSK assumption is no longer required.

**Definition 6 (Indistinguishability of MR-MM-PKE):** An MR-MM-PKE scheme \( E = (PGen, KGen, Enc, Dec) \) is indistinguishable (MR-PKE-IND-secure) if for all \( k \) and \( n \) polynomially dependent on the security parameter and all efficient adversaries \( A = (A1, A2) \) interacting in experiments \( Expt_{E, A, k, n}^{MR-PKE-IND} \) from Figure 3, the following advantage function is negligible in \( \lambda \):

\[ Adv_{E, A, k, n}^{MR-PKE-IND}(\lambda) = \left| \Pr[Expt_{E, A, k, n}^{MR-PKE-IND, 1}(1\lambda) = 1] - \Pr[Expt_{E, A, k, n}^{MR-PKE-IND, 0}(1\lambda) = 1] \right| \]

where the probabilities are taken over the random coins of the experiment, including those consumed by \( A \).