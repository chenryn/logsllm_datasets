### ParaSpectre: A Tool for Hooking and Manipulating Android Applications

#### Overview
ParaSpectre is a powerful tool designed to hook and manipulate Android applications. It leverages JSON for method matching, custom Ruby code, and an interactive in-process Ruby REPL. The tool is implemented using Xposed and provides first-class access to the Java runtime environment and classloaders.

#### Key Features
- **Method Matching Selectors**: Configure method matching selectors using JSON.
- **Custom Ruby Code**: Hooked functions can call into custom Ruby code.
- **Interactive Ruby REPL**: Drop into an interactive in-process Ruby REPL for real-time inspection and manipulation.
- **Xposed Implementation**: Built on top of the Xposed framework.
- **Java Runtime Access**: Provides full access to the Java runtime environment and classloaders.
- **Startup Hooking**: Ensures that arbitrary app packages can be hooked at device startup.
- **Hook Reloading**: Only requires restarting the application or process, unlike Xposed hooks which need APK reinstallation and device reboot.

#### Capabilities
- **Flexible Method Matching**:
  - Be as specific or vague as needed to select methods for hooking.
  - Uses an intersection of provided selectors to filter classes and methods.
  - Class matching by superclass name and implemented interfaces.
  - Method matching by method name, argument type signature, return type, and exception signature.

- **Ruby Integration (via JRuby)**:
  - Solid scripting language with good Java interoperability.
  - Can run on Android with minimal setup.
  - Direct access to the hooked application’s classloader.
  - No need for reflection; write code directly.
  - Define subclasses and implementations for app-defined classes and interfaces.
  - Stackable script hooks per application package, class matcher, and method matcher.

- **Runtime Exploration**:
  - Use Pry REPLs for inspecting and manipulating application state at runtime.
  - Hooks drop into a Pry REPL if they don’t return early.
  - Connect-back REPLs with modified pry-remote for secure remote debugging.

- **Web Configuration Editor**:
  - Raw Jetty Servlet web app running on Android.
  - Usable from a mobile browser on the Android device.
  - Supports a hook editing workflow without requiring `adb push`.
  - Tracks edits in an on-device Git repo.
  - Basic access controls using API keys.
  - Per-app hook configuration files with format validation.
  - Write inline Ruby hooks or reference flat Ruby files.

#### Design
- **Simple Setup**:
  - Loads hook configuration data from main ParaSpectre app directory.
  - Reads config files based on app package name, falling back to a core `paraspectre.json` config.
  - Sets up a JRuby environment on Android.
  - Uses Xposed to set up hooks on matching classes and methods.
  - Invokes config-specified JRuby hooks.

- **JSON Config Example**:
  ```json
  {
    "classes": [
      {
        "name": "android.support.v7.app.AppCompatActivity",
        "methods": [
          {
            "name": "findViewById",
            "params": ["int"],
            "returns": "android.view.View",
            "eval": "puts 'id: ' + args[0].to_s; return;"
          }
        ],
        "eval": "puts 'in ' + method.to_s;"
      }
    ],
    "eval": ""
  }
  ```

- **More Complex Hooks**:
  - Break out more involved hooks into separate Ruby files.
  - Example:
    ```json
    {
      "classes": [
        {
          "name": "okhttp3.OkHttpClient$Builder",
          "methods": [
            {
              "name": "build",
              "eval_file": "okhttp3.OkHttpClient$Builder::build.rb"
            }
          ]
        }
      ]
    }
    ```

#### Performance
- **Initialization and Matching**:
  - Pre-dexed JRuby JAR loaded during Zygote init.
  - Stores file under `/data/dalvik-cache/paraspectre` due to SEAndroid policies.
  - Uses reflection to override the parent classloader with the app classloader.
  - Initializes JRuby scripting containers separately in each hooked app.
  - Initial Ruby code execution takes several seconds but is optimized for subsequent runs.

- **Class Searching and Matching**:
  - Iterates through class names in the app’s own DEX files.
  - Bypasses worst-case path in `ClassLoader::loadClass` by invoking `BaseDexClassLoader::findClass` directly.
  - Still faces challenges with the classloader global lock, which may be mitigated by direct DEX file parsing.

- **Results**:
  - JRuby container initialization reduced from 29 seconds to near-instantaneous.
  - Class matching overhead is generally unobservable on single DEX applications.
  - Large apps like `com.facebook.katana` (with 12 DEX files and 100k classes) take 30 seconds for class iteration.

#### Security Considerations
- **DRuby Protocol**:
  - The DRuby protocol is inherently dangerous and unauthenticated.
  - Hooked apps can potentially gain RCE on the host running the pry-remote-based client.
  - Recommended to run the REPL client from a VM.
  - Long-term solution involves researching and sandboxing the DRuby protocol.

#### Future Work
- **Gem JAR File Upload API**
- **UI Overhaul** for creating, editing, and managing hooks.
- **Android 7/N+ Compatibility** once Xposed supports it.
- **Config File Security** to address SEAndroid changes.
- **Root Access Utilization** for shared config in `/data/dalvik-cache/paraspectre`.

#### Acknowledgments
- Special thanks to contributors: aleks, arkos, bones, fofão, jblatz, justin, nabla, niko, s0rcy, teknogeek, trixr4skids, weber.

#### Questions?
- Contact: PI:EMAIL
- GitHub: [https://github.com/nccgroup/paraspectre](https://github.com/nccgroup/paraspectre)

---

Presented by Jeff Dileo (chaosdata) at DEFCON 25.