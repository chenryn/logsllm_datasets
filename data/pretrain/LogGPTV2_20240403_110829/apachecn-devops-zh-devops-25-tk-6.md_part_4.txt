26  ) +
27  sum(
28      (
29          sum(
30              label_join(
31                  rate(
32                      container_cpu_usage_seconds_total{
33                          namespace!="kube-system",
34                          pod_name!=""
35                      }[5m]
36                  ),
37                  "pod",
38                  ",",
39                  "pod_name"
40              )
41          ) by (pod) /
42          sum(
43              kube_pod_container_resource_requests_cpu_cores{
44                  namespace!="kube-system",
45                  namespace!="ingress-nginx"
46              }
47          ) by (pod) and
48          sum(
49              kube_pod_container_resource_requests_cpu_cores{
50                  namespace!="kube-system",
51                  namespace!="ingress-nginx"
52              }
53          ) by (pod) > $minCpu
54      ) > bool ($cpuReqPercentMax / 100)
55  )
```
该查询类似于我们在普罗米修斯警报中使用的查询。更准确地说，它是两个普罗米修斯警报的组合。前半部分返回预留 CPU 超过`$minCpu` (5 CPU 毫秒)且实际 CPU 使用率低于`$cpuReqPercentMin` (50%)的 Pods 数量。后半部分与第一部分几乎相同，只是它返回的 Pods 的 CPU 使用率高于`$cpuReqPercentMax` (150%)。
因为我们的目标是返回一个单一的统计，在这种情况下，是豆荚的数量，你可能会惊讶，我们使用了`sum`而不是`count`。计数豆荚确实更有意义，除了如果没有结果会返回`N/A`。为了避免这种情况，我们对`bool`使用了一个技巧。通过将它放在表达式前面，如果有匹配项，它将返回`1`，如果没有匹配项，它将返回`0`。这样，如果没有一个 Pods 符合条件，我们就不会得到一个空的结果，而是`0`，这是有问题的 Pods 数量的更好的表示。
总之，我们正在检索实际 CPU 低于预留 CPU 的`$cpuReqPercentMin` (50%)的所有 Pods 的总和，加上实际 CPU 高于预留 CPU 的`$cpuReqPercentMax` (150%)的所有 Pods 的总和。在这两种情况下，只有超过`$minCpu`(五个中央处理器毫秒)的吊舱被包括在内。查询本身并不是我们能写的最简单的查询，但是考虑到我们已经花了很多时间在普罗米修斯查询上，我认为我不应该用一些琐碎的事情来“侮辱”你。
接下来，请单击选项选项卡。我们将在这里定义触发颜色变化的条件。
我们不需要指定期间的平均值，而是当前有问题的 Pods 的数量。我们将通过将 Stat 下拉列表的值更改为 Current 来实现这一点。
我们希望这个面板非常明显，所以我们将 Stat 字体大小更改为`200%`。我更喜欢更大的字体，但格拉夫纳不允许我们比这更高。
接下来，我们想要更改面板的背景颜色，因此请选中“给背景着色”复选框。
我们最多可以使用三种颜色，但我相信我们只需要两种。一个或多个吊舱满足条件，或者没有一个满足条件。
查询一返回`1`，或者更高的数字，就应该通知我们。请输入`1`作为着色阈值。如果我们有更多，我们会用逗号把它们分开。
最后，由于我们只有两个条件，绿色和红色，我们需要将第二种颜色从橙色更改为红色。请点击着色颜色中的*红色*图标，并用*红色*替换该值。第三种颜色不用，我们就原封不动。
![](img/23e5659a-1dbc-440a-9d53-13f57bb1eeea.png)
Figure 6-10: Grafana's single stat panel
我们已经完成了面板，所以回到仪表盘。
继续之前，请点击*保存仪表盘*图标，然后点击保存按钮。
到目前为止，我们创建了一个带有一个图形和一个 stat(信号量)的仪表板。前者显示了随着时间的推移，与保留的 CPU 相比，CPU 使用率的偏差。它有警报(红色区域)，告诉我们其中一个向量是否在预定义的边界之外。单个 stat(信号量)显示带有绿色或红色背景的单个数字，这取决于该数字是否达到阈值，在我们的例子中，阈值被设置为`1`。
我们刚刚开始，在这个仪表板变得有用之前，我们需要许多其他面板。我将使您免于重复定义其他指令。我觉得你已经掌握了格拉芙娜的工作原理。你至少应该有自己可以扩展的基础知识。
我们快进。我们将导入我准备的仪表板，并讨论设计选择。
# 更好的大屏幕仪表板
我们探索了如何创建一个带有图形和单个 stat(信号量)的仪表板。两者都基于相似的查询，显著的区别在于它们显示结果的方式。我们将假设我们开始构建的仪表板的主要目的是在一个大屏幕上可用，对许多人来说是可见的，而不是作为我们在笔记本电脑上保持打开的东西。至少，不是连续的。
这样一个仪表板的主要目的应该是什么？在回答这个问题之前，我们将导入我为本章创建的仪表板。
请单击左侧菜单中的+按钮，然后选择导入。输入`9132`作为*Grafana.com 仪表盘*，按下加载按钮。选择一个*普罗米修斯数据源*。请随意更改任何值以满足您的需求。尽管如此，你可能还是想推迟，直到你更熟悉仪表板。
无论如何，完成后请点按“导入”按钮。
![](img/a5120c4e-3ecd-4fb2-8080-840bc9cfa513.png)
Figure 6-11: Grafana dashboard based on semaphores
你可能会看到一个或多个红色信号灯。这很正常，因为我们集群中的一些资源配置不正确。例如，普罗米修斯请求的内存可能比它需要的少。没关系，因为它可以让我们看到仪表板在运行。Gists 中使用的定义不应该是生产就绪的，您已经知道您必须调整它们的资源，可能还有一些其他的东西。
您会注意到，我们导入的仪表板仅由信号量组成。至少第一眼看上去是这样。尽管它们可能不如图表和其他类型的面板有吸引力，但它们作为我们系统健康状况的指标要有效得多。我们不需要看仪表盘。如果它显示在大屏幕上就足够了，而我们在做其他事情。如果其中一个盒子变成红色，我们会注意到的。这将是一个行动的号召。或者，更准确地说，如果一个红盒子持续变红的时间更长，我们需要做一些事情，从而排除它是假阳性的可能性，假阳性将在几分钟后自行解决。
您可以将此仪表板视为普罗米修斯警报的补充。它不能取代它们，因为有一些微妙的，但重要的差异，我们将在后面讨论。
我不会描述每个面板，因为它们反映了我们之前创建的普罗米修斯警报。你现在应该熟悉他们了。如有疑问，请点击面板左上角的 I 图标。如果描述不够，请进入面板的编辑模式，并检查查询和颜色选项。
请注意，仪表盘可能并不完美。您可能需要更改一些变量值或颜色阈值。例如，*节点*面板的阈值设置为`4,5`。从颜色来看，如果节点数跳到 4，就会变成橙色(警告)，如果跳到 5，就会变成红色(恐慌)。你的价值观可能会有所不同。理想情况下，我们应该使用变量而不是硬编码的阈值，但这在 Grafana 中目前是不可能的。不是所有地方都支持变量。你作为开源项目的支持者，应该做一个公关。如果你有，请让我知道。
这是否意味着我们所有的仪表板都应该是绿色和红色的盒子，里面只有一个数字？我确实认为信号量应该是“默认”显示。当它们是绿色时，就不需要其他任何东西了。如果情况不是这样，我们应该扩展信号量的数量，而不是用随机的图形来混淆我们的监视器。然而，这回避了一个问题。当一些盒子变成红色甚至橙色时，我们该怎么办？
在方框下方，您会发现带有附加面板的*图形*行。它们在默认情况下不可见是有原因的。
在正常情况下没有理由看到它们。但是，如果其中一个信号量确实发出了警报，我们可以展开*图形*并查看有关该问题的更多详细信息。
![](img/c5d02e39-5bfa-48fb-ab27-4f8cdb1b7741.png)
Figure 6-12: Grafana dashboard based on tables and graphs
*图形*行中的面板是*警报*行中面板(信号量)的反映。每个图表显示了来自相同位置(但不同行)的与单个 stat 相关的更详细的数据。这样，我们就不需要浪费时间试图找出哪个图形对应于“红框”。
相反，我们可以直接跳到相应的图中。如果右边第二行的信号灯变红，看看右边第二行的图表。如果多个框变成红色，我们可以快速查看相关图形，并尝试找到关系(如果有)。通常情况下，我们将不得不从格拉夫纳转向普罗米修斯，并更深入地研究度量标准。
像您前面的仪表板应该能让我们快速开始解决问题。顶部的信号量提供了警报机制，该机制将导致下面的图表，该图表将快速指示问题的可能原因。从那里开始，如果原因很明显，我们可以转移到普罗米修斯并开始调试(如果这是正确的话)。
Dashboards with semaphores should be displayed on big screens around the office. They should provide an indication of a problem. Corresponding graphs (and other panels) provide a first look at the issue. Prometheus serves as the debugging tool we use to dig into metrics until we find the culprit.
我们探索了一些提供类似功能的东西。尽管如此，普罗米修斯警报、信号量、图形警报和格拉夫纳通知之间的区别可能还不清楚。为什么我们没有创建任何 Grafana 通知？接下来我们将探讨这些问题和其他一些问题。
# 普罗米修斯警报与格拉夫纳通知、信号量与图形警报
标题本身可能会令人困惑，所以让我们简要描述一下其中提到的每个元素。
普罗米修斯警报和格拉夫纳通知服务于相同的目的，尽管我们没有探索后者。我将让您了解 Grafana 通知如何独立工作。谁知道呢？在接下来的讨论之后，你可能甚至不想花时间和他们在一起。
格拉夫纳的通知可以转发给不同的收件人，方式类似于普罗米修斯的警报通过警报器管理器转发的方式。然而，有几件事让格拉夫纳的通知不那么吸引人。
如果我们能用普罗米修斯警报和格拉夫纳警报达到同样的结果，那么前者就有明显的优势。如果从普罗米修斯处触发警报，这意味着导致警报触发的规则也在普罗米修斯中定义。
因此，评估是在数据源进行的，我们避免了 Grafana 和 Prometheus 之间不必要的延迟。我们离数据源越近越好。在警报/通知的情况下，更近意味着普罗米修斯内部。
在普罗米修斯中定义警报的另一个优点是，它允许我们做更多的事情。例如，在格拉夫纳没有相当于普罗米修斯的`for`语句。我们无法定义只有在条件持续一段时间后才会触发的通知。我们需要对查询进行非平凡的添加来实现同样的目的。另一方面，Alertmanager 提供了更复杂的方法来过滤警报，对警报进行分组，并仅转发符合特定标准的警报。在普罗米修斯和警报管理器中定义警报比在格拉夫纳定义通知有许多其他优势。但是，我们不会一一讨论。除非你已经确信放弃格拉夫纳通知，转而使用普罗米修斯警报和警报管理器，否则我会让你去找出所有的不同之处。
有一个重要的原因是你不应该完全拒绝格拉夫纳的通知。您正在使用的数据源可能没有警报/通知机制，或者它可能是您不拥有的企业许可证的一部分。由于格拉夫纳支持许多不同的数据源，普罗米修斯只是其中之一，格拉夫纳通知允许我们使用这些数据源中的任何一个，甚至可以组合它们。
Stick with Prometheus for alerts/notifications based on metrics stored there. For other data sources, Grafana alerts might be a better or even the only option.
现在，我们简要探讨了普罗米修斯警报和格拉夫纳通知之间的区别，我们将进入信号量。
信号量(基于单个 stat 面板的 Grafana 仪表板)不能取代 Prometheus 警报。首先，很难，甚至不可能创建仅当某个值达到某个阈值一段时间后才会变红的信号量(例如，像普罗米修斯警报中的`for`语句)。这意味着信号量可能会变成红色，但过了一会儿又变回绿色。这不是采取行动的原因，因为问题很快就自动解决了。如果我们每次在格拉夫纳有东西变红的时候都跳，我们会有很好的身体状态，但是我们不会做很多有用的工作。
信号量是可能不需要任何干预的问题的指示。虽然这种假阳性应该避免，但几乎不可能完全消除它们。这意味着我们应该盯着屏幕，看看在我们采取行动之前，一个红色的盒子是否会持续红色至少几分钟。信号量的主要目的不是向应该解决问题的个人或团队提供通知。对 Slack、电子邮件和其他目的地的通知可以做到这一点。信号量提供对系统状态的感知。
最后，我们探讨了在图上定义的警报。这些是图表中的红线和区域。它们不是有问题的好指标。它们不是那么容易发现，所以它们不能提高意识，而且它们肯定不能取代通知。相反，他们在我们发现有问题后帮助我们。如果一个通知或一个信号量提醒我们有一个可能需要修复的问题，图形提醒可以帮助我们识别罪魁祸首。哪个吊舱在红色区域？哪个入口收到的请求比预期的多？这些只是我们可以通过图表提示回答的几个问题。
# 现在怎么办？
Grafana 使用起来相对简单直观。如果您知道如何为连接到 Grafana 的数据源(例如普罗米修斯)编写查询，那么您已经了解了最具挑战性的部分。剩下的大部分是关于复选框、选择面板类型和在屏幕上排列东西。主要的困难是避免被一堆华而不实的仪表板冲昏头脑，这些仪表板没有提供多少价值。一个常见的错误是为我们能想象的一切创建一个图表。这只会降低真正重要的东西的价值。少往往就是多。
就这样。如果这本书是专用的，就销毁它，如果不是，或者你打算马上跳到下一章，就保留它。如果您保留它，请通过执行以下命令删除`grafana`图表。如果我们在下一章中需要它，我会确保它包含在 Gists 中。
```
 1  helm delete grafana --purge
```
在你离开之前，你可能要复习一下本章的要点。
*   用图表查看仪表板是浪费时间。在收到问题通知后访问仪表板更有意义。尽管如此，除了琐碎的问题，所有问题都需要通过普罗米修斯度量标准进行更深入的挖掘。
*   仪表板不是为我们盯着看而设计的，尤其是当它们出现在每个人都能看到的大屏幕上时。
*   作为一种查看系统状态的方式，信号量比图形有用得多，尽管它们看起来不像图形那样丰富多彩和赏心悦目。
*   带有信号灯的仪表板应该显示在办公室周围的大屏幕上。他们应该提供一个问题的迹象。相应的图表(和其他面板)提供了对问题的初步了解。普罗米修斯作为调试工具，我们用它来挖掘度量，直到找到罪魁祸首。
*   坚持使用 Prometheus，根据存储在那里的指标获取警报/通知。对于其他数据源，Grafana 警报可能是更好的选择，甚至是唯一的选择。