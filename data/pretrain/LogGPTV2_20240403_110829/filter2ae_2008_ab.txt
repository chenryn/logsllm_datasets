                return;
            } else {
                $_template->smarty->ext->_updateCache->updateCache($this, $_template, $no_output_filter);
            }
        }
这里因为我们之前没有进行过模板缓存文件的生成会进入这里的 else，我们继续跟进 smartytemplatecompiled 类中的这个 render：
    public function render(Smarty_Internal_Template $_template)
        {
            // checks if template exists
            if (!$_template->source->exists) {
                $type = $_template->source->isConfig ? 'config' : 'template';
                throw new SmartyException("Unable to load {$type} '{$_template->source->type}:{$_template->source->name}'");
            }
            if ($_template->smarty->debugging) {
                if (!isset($_template->smarty->_debug)) {
                    $_template->smarty->_debug = new Smarty_Internal_Debug();
                }
                $_template->smarty->_debug->start_render($_template);
            }
            if (!$this->processed) {
                $this->process($_template);
            }
        }
第105行开始对前面生成的模板进行处理：
    # smarty_template_compiled
    # line about 104
    if (!$this->processed) {
        $this->process($_template);
    }
可以看到这里的 $this->process($_template)；跟进process
    public function process(Smarty_Internal_Template $_smarty_tpl)
        {
            $source = &$_smarty_tpl->source;
            $smarty = &$_smarty_tpl->smarty;
            if ($source->handler->recompiled) {
                $source->handler->process($_smarty_tpl);
            } elseif (!$source->handler->uncompiled) {
                if (!$this->exists || $smarty->force_compile ||
                    ($smarty->compile_check && $source->getTimeStamp() > $this->getTimeStamp())
                ) {
                    $this->compileTemplateSource($_smarty_tpl);
                    $compileCheck = $smarty->compile_check;
                    $smarty->compile_check = false;
                    $this->loadCompiledTemplate($_smarty_tpl);
                    $smarty->compile_check = $compileCheck;
                } else {
                    $_smarty_tpl->mustCompile = true;
                    @include($this->filepath);
                    if ($_smarty_tpl->mustCompile) {
                        $this->compileTemplateSource($_smarty_tpl);
                        $compileCheck = $smarty->compile_check;
                        $smarty->compile_check = false;
                        $this->loadCompiledTemplate($_smarty_tpl);
                        $smarty->compile_check = $compileCheck;
                    }
                }
                $_smarty_tpl->_subTemplateRegister();
                $this->processed = true;
            }
        }
process方法定义在第90行。现在初次访问，也即文件的第97行会对模板文件进行编译，即如简介中所言开始生成编译文件：
    if (!$this->exists || $smarty->force_compile ||
        ($smarty->compile_check && $source->getTimeStamp() > $this->getTimeStamp())
    ) {
        $this->compileTemplateSource($_smarty_tpl);
        $compileCheck = $smarty->compile_check;
        $smarty->compile_check = false;
        $this->loadCompiledTemplate($_smarty_tpl);
        $smarty->compile_check = $compileCheck;
    }
    compileTemplateSource方法定义在同文件的第189行，在第203行装载完编译器后（loadCompiler()），调用write方法进行写操作：
    public function compileTemplateSource(Smarty_Internal_Template $_template)
    {
        ...
        try {
            // call compiler
            $_template->loadCompiler();//装载编译器
            $this->write($_template, $_template->compiler->compileTemplate($_template));
        }
        ...
跟入compileTemplate方法，定义libs\sysplugins\smarty_internal_templatecompilerbase.php第330行：
    public function compileTemplate(Smarty_Internal_Template $template, $nocache = null,
                                        Smarty_Internal_TemplateCompilerBase $parent_compiler = null)
        {
            // get code frame of compiled template
            $_compiled_code = $template->smarty->ext->_codeFrame->create($template,
                                                                         $this->compileTemplateSource($template, $nocache,
                                                                                                      $parent_compiler),
                                                                         $this->postFilter($this->blockOrFunctionCode) .
                                                                         join('', $this->mergedSubTemplatesCode), false,
                                                                         $this);
            return $_compiled_code;
        }
create是生成编译文件代码的方法，定义在`libs\sysplugins\smarty_internal_runtime_codeframe.php`第28行
    //在第45行，在生成output内容时有如下代码：
    $output .= "/* Smarty version " . Smarty::SMARTY_VERSION . ", created on " . strftime("%Y-%m-%d %H:%M:%S") .
                       "\n  from \"" . $_template->source->filepath . "\" */\n\n";
    //将 $_template->source->filepath的内容直接拼接到了$output里。这段代码是为了生成编译文件中的注释，$output的头尾有注释符号/*和*/。
现在考虑如何利用，我们需要闭合前面的注释符号，即payload的最前面需要加上`*/`。同时还要把后面的`*/`给注释掉，可以在payload最后加上`//`。中间填上php代码即可。另外需要注意的是，在win平台下，文件名中不允许有`*`，而smarty框架的生成的编译文件的名字会含有我们的payload，所以在win下时会直接提示创建文件失败。
在linux平台下即可利用成功。
这就是Smarty下生成的临时文件的内容，其中蓝框的部分就是输出点，可以看到输出点是存在两个地方分别是在注释中以及在数组中。那么现在问题就很简单了，我们如何通过这两个输出点能够闭合其中的注释或者是代码，从而执行我们加入的代码。  
然后在process中，能够将我们这个文件自动包含：
    private function loadCompiledTemplate(Smarty_Internal_Template $_smarty_tpl)
        {
            if (function_exists('opcache_invalidate') && strlen(ini_get("opcache.restrict_api")) filepath, true);
            } elseif (function_exists('apc_compile_file')) {
                apc_compile_file($this->filepath);
            }
            if (defined('HHVM_VERSION')) {
                eval("?>" . file_get_contents($this->filepath));//就是这个位置
            } else {
                include($this->filepath);
            }
        }
eval(“?>”.file_get_contents($this->filepath)) 相当于一个远程文件包含，这里调用了 include
，我们之前写入缓存的php文件也就被包含进而执行了。
## 实战：
### [NISACTF 2022]midlevel：
打开题目界面：  
说明这个界面是用smarty进行创建的，所以我们确定攻击方式就为smarty，下一步寻找注入点：
打开整道题都是说明的ip右上角也有ip,用到 x-forwarded-for试一下有没有模板注入，我们用上面的判断模板的方法来实践一下：
这里我们用smarty特有的注释符方式来验证，发现并没有回显comment的值，所以我们可以确定这个位置就是smarty模板注入。
然后我们确定版本：
    {$smarty.version}
    Current IP:3.1.30
    //所以这个位置我们不能够使用获取类的静态方法来进行攻击，也不能用php标签来进行攻击。
    //又因为php的版本是php7，所以我们不能用literal标签，最后我们使用if来进行攻击
后续会继续更新2021和2022的CVE漏洞，因为自己代码审计水平有限，所以还请师傅们多多指教
参考文章：  