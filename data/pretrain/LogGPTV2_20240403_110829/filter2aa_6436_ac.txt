```
这样，在根目录执行 mvn clean package 时，Maven 根据根目录的 pom.xml 找到包括 parent 在内的共 4 个 ``，一次性全部编译。
---
## eclipse使用maven
### 安装插件
从 Eclipse Marketplace 上获取 m2eclipse 并安装：
首先要在 Eclipse 中安装插件：在 Help->install new software, 输入下面地址 http://download.eclipse.org/technology/m2e/releases
像安装其他插件那样一路下一步就OK了。
### 配置插件
Preference --> maven
可以设置 Installations 和 User Setting
### 创建一个maven项目
new 一个 project ,选择 Maven Project
选择默认的工程位置
创建工程，这里可以选择 org.apache.maven.archetype
填写相关的groupId artifactId version等信息
点击完成就创建好了一个简单的maven工程。
### 目录结构
创建完毕后,目录结构如下
* pom.xml：用于定义或者添加 jar 包的依赖
* src-main：用于存放 java 源文件
* src-test：用于存放测试用例。
也许工程下还会出现 target 文件夹，这个是用来生成对应的 class 文件或发布的 jar 包。
### 常见报错
**XXX中没有主清单属性**
打包后的 jar 文件中的 MANIFEST.MF 缺少项目启动项，即没有 Main-Class 和 Start-Class
pom.xml 添加插件即可
```xml
		    org.apache.maven.plugins
		    maven-jar-plugin
		    3.0.2
		                true
		                com.test.first_maven.App 
```
---
## idea 使用 maven
setting --> Build,Execution,Deployment --> Build Tools --> Maven
---
## POM 文件样本
```xml
    4.0.0
    BETA-Reptile
    BETA-P
    1.0-SNAPSHOT
        -Dfile.encoding=UTF-8
        UTF-8
                org.apache.maven.plugins
                maven-compiler-plugin
                3.8.1
                    1.8
                    1.8
                org.apache.maven.plugins
                maven-shade-plugin
                1.2.1
                        package
                            shade
                                    [主类]
            mysql
            mysql-connector-java
            5.1.47
            runtime
```
---
### JAVAFX
```xml
将布局 fxml 文件放在 target 文件夹中
			src/main/java
				**/*.properties
				**/*.fxml
				**/fxml/*.fxml
			false
```
---
## SpringBoot 打包插件
```xml
            org.springframework.boot
            spring-boot-marven-plugin
    org.springframework.boot
    spring-boot-maven-plugin
    2.3.7.RELEASE
        code.landgrey.Application
            repackage
                repackage
```
---
## idea marven 添加本地 jar 到本地仓库
```
mvn install:install-file -Dfile=
           -DgroupId=
           -DartifactId=
           -Dversion=
           -Dpackaging=
mvn install:install-file -Dfile=ojdbc8.jar -DgroupId=com.github.noraui -DartifactId=ojdbc8  -Dversion=12.2.0.1 -Dpackaging=jar
```
---
## maven 打包加入本地 jar
我们需要将本地 jar 也加入到 pom.xml 的依赖配置项中，而本地 jar 最好是放在项目路径下，比如 lib 目录。
在 pom.xml 配置文件中增加一个 dependency 的配置，groupId,artifactId,version 均随意指定，因为最终起决定作用的是 scope 属性以及 systemPath 属性。
```xml
    asnrt
    javase
    3.14.15
    system
    ${project.basedir}/lib/asnrt.jar
```
只需要这么配置，我们进行 mvn package 的时候，就不会报错，而且打出的 jar 包直接运行也不会报错。
本地运行没有报错，是有个警告，构建成功，放到 gitlab，自动构建，最后运行，出现了以下警告：
```
[WARNING] Some problems were encountered while building the effective model for com.huali.mec:mec-tcp-receiver:jar:1.0.0
[WARNING] 'dependencies.dependency.systemPath' for asnrt:javase:jar should not point at files within the project directory, ${project.basedir}/lib/asnrt.jar will be unresolvable by dependent projects @ line 99, column 17
```
意思是不能使用项目目录中的 jar，也有人遇到了这样的问题：https://www.phpsong.com/3536.html，根据他的提示，需要将 `${project.basedir}` 改为 `${pom.basedir}` 。
---
## Source & Reference
- https://www.liaoxuefeng.com/wiki/1252599548343744/1309301146648610
- https://www.runoob.com/maven/maven-tutorial.html
- https://www.cnblogs.com/xdp-gacl/p/3498271.html
- https://blog.csdn.net/u012052268/article/details/78916196
- https://blog.csdn.net/banjing_1993/article/details/83073210
- https://blog.csdn.net/qq_32588349/article/details/51461182