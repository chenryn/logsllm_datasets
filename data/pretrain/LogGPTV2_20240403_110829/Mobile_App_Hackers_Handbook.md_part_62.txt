A handler must then be implemented to act as the entry point for when the app launches due to some outside
source invoking a myproto: URL. You do this quite simply by implementing the UriMapperBase interface (see
http://msdn.microsoft.com/en-us/library/windows/apps/jj206987(v=vs.105) .aspx#BKMK_URIassociations):
class myUriMapper : UriMapperBase
{
private string fullUri;
public override Uri MapUri(Uri myUri) {
fullUri = HttpUtility.UrlDecode(myUri.ToString());
if(fullUri.Contains("myproto:")) {
// get data after "myproto:" scheme
string data = fullUri.IndexOf("myproto:") + 8;
// do something useful with data
}
}
}
The preceding code URL-encodes the entire URL that was invoked, and then checks it for the presence of the
URL scheme that we’re interested in handling in this case (because an app may register for and deal with more
than one URL scheme). If myproto: is present, a reference to all data after the myproto: string is given to the
data variable, and then the app is free to parse the rest of the data and use it in whatever way it pleases.
Although this example handler doesn’t actually do any useful work, consider an example for a hypothetical VoIP
application that has a URL handler named myvoip: and initiates a call automatically every time its URL scheme
is invoked with a phone number:
class myUriMapper : UriMapperBase
{
private string fullUri;
public override Uri MapUri(Uri myUri) {
fullUri = HttpUtility.UrlDecode(myUri.ToString());
if(fullUri.Contains("myvoip:CallNumber?number=")) {
// get phone number
string phoneNo = fullUri.IndexOf("number=") + 7;
// launch call screen with number
return new Uri("/DoCall.xaml?phoneNumber=" +
phoneNo, UriKind.Relative);
}
return myUri; // else launch normally
}
}
This VoIP URL handler extracts the phone number passed to the handler and then maps the request to the
DoCall.xaml page, passing the phone number with it. The implementation code for the DoCall.xaml page
(DoCall .xaml.cs) takes the phone number passed in and automatically initiates a phone call to it.
When XAML pages are navigated to, as in the previous URL handler, its OnNavigatedTo method is called.
Parameters can be passed in the same way as standard URLs, as demonstrated previously when a phone number
is passed into the page. DoCall.xaml.cs could have an implementation similar to the following:
protected override void OnNavigatedTo(NavigationEventArgs e) {
string phoneNumber;
if (this.NavigationContext.QueryString.ContainsKey("phoneNumber"))
{
phoneNumber = this.NavigationContext.QueryString["phoneNumber"];
bool ret = await DoVoIPCall(phoneNumber);
}
// other logic
else {
[ ... ]
}
}
This functionality would be callable via an appropriately crafted invocation of myvoip:, such as
myvoip:CallNumber?number=12345678901, which results in the DoCall.xaml page being opened as in
DoCall.xaml?phoneNumber=12345678901.
You can fairly easily see how a call being initiated without permission from the user could be a bad thing, and
although this hypothetical case is just an example, it’s not detached from reality. In fact, a very popular VoIP
application was vulnerable to almost exactly the same bug: Its protocol handler allowed calls to be launched
without prompting the user for permission. Issues with this liberal allowance for initiating calls could range
from undesirably wasting a user’s calling credit, to effectively eavesdropping on a user’s real-life conversation by
calling a number owned by the attacker.
Consider another example protocol handler, this time an application that in some place renders a web page in a
WebBrowser control. This particular hypothetical application offers the ability to change the page that it renders
in the WebBrowser:
class myUriMapper : UriMapperBase
{
private string fullUri;
public override Uri MapUri(Uri myUri) {
fullUri = HttpUtility.UrlDecode(myUri.ToString());
if(fullUri.Contains("myapp:ChangeSettings?homePage=")) {
// get phone number
string page = fullUri.IndexOf("homePage=") + 9;
// launch call screen with number
return new Uri("/ChangeSettings.xaml?homePage="
+ phoneNo, UriKind.Relative);
}
return myUri; // else launch the app normally
}
}
Having the ability to change the page rendered by an app’s WebBrowser control presents possible attack vectors,
such as, phishing attacks via fake login screens, because WebBrowser controls do not actually show the URL of
the current page. Such functionality is conceivable, as well, because some apps may need to be able to update or
change the location to be rendered at will (for example, by a page that is being rendered in the WebBrowser in
the first place).
Other attack scenarios could involve inclusion of data passed into dynamically generated web pages, SQL
injection, and other application-specific privileged or sensitive actions. When URL handlers are offered by an
app, you should find out what action is taken. (For example, it is likely that the request is mapped to a XAML
page.) You also need to ascertain what action occurs with any inputted data from there. (In this case, what
happens in OnNavigatedTo()?) Manual testing and code review are both viable options, with code review being
generally preferred when original or reflected code has been gleaned.
Now that we’ve discussed the basics of custom protocol handlers and how they could possibly present security
risks, it’s worth summarizing all the ways that URL handlers can be invoked, because this is ultimately what an
attacker will be concerned with. In no particular order, they are:
By web pages being viewed in Internet Explorer or another web browser—This can be done either
via a hyperlink,
click me
or via a URL scheme that is followed automatically, such as via an iframe, an event handler, or otherwise:
The user is not prompted for permission to launch the app.
By web pages in WebBrowser and WebView controls—This can be done either via a hyperlink,
click me
or via a URL scheme that is followed automatically, such as via an iframe, an event handler, or otherwise:
The user is not prompted for permission to launch the app.
By other apps on the device—
Windows.System.Launcher.LaunchUriAsync(new System.Uri(
"myApp://aaaaaaaa"));
The user is not prompted for permission to launch the app.
By a nearby NFC device or tag—For example, from a proximate Windows Phone, other smartphone, or
NFC tag:
long Id = device.PublishUriMessage(new System.Uri("myUrl:something"));
The user is prompted for permission to accept and launch the URL—unless the app being launched was
ticked as trusted during a previous launch. Trusting an app to allow NFC URL launches is only available in
Windows Phone 8.1, not 8.
File Handlers
Applications can register to be associated with file extensions. Then, when a file bearing that file extension is
opened on the device, the registered app launches and can make a copy of the file, open it, parse it, and
otherwise handle it in the way that it is designed. For example, a PDF viewer would register to be associated
with the .pdf file extension, and upon a PDF file being opened, the app would launch, parse the file, and attempt
to render it.
Because many apps that register as file extension handlers parse the data found in opened files bearing their
extension, the scope for interesting security bugs becomes quite apparent.
Additionally, files that are received via email or via browser downloads and then opened also result in file
handling behavior being honored, so file handlers offer avenues of attack for completely remote attackers if
vulnerable apps are installed on a given device.
An app’s intention to be associated with one or more file extensions is declared in the manifest file, much as for
protocol handlers. If the app has been built and distributed for both Windows Phone 8 and 8.1 (that is, XAP),
this desire will be the WMAppManifest.xml file, and a sample app may register for the .myExt file extension using
some markup like the following:
Assets/img_small.png
Assets/img_medium.png
Assets/img_large.png
.myExt
If the app targets only Windows Phone 8.1 and is therefore an APPX package, the file extension handler
declaration will be located in the app’s Package .appxmanifest file, and may resemble this:
myExt
.myExt
The application must then register a handler to be called into when a file bearing the .myExt extension is
opened. This is done in a similar manner as for protocol handlers: by implementing the UriMapperBase interface.
A hypothetical app could contain the following code:
namespace sdkAutoLaunch
{
class AssociationUriMapper : UriMapperBase
{
private string fullUri;
public override Uri MapUri(Uri uri)
{
fullUri = uri.ToString();
// a file association launch
if (fullUri.Contains("/FileTypeAssociation"))
{
// Get the file ID
int fileIDIndex = fullUri.IndexOf("fileToken=") + 10;
string fileID = fullUri.Substring(fileIDIndex);
// get the name of the file that was opened
string incomingFileName =
SharedStorageAccessManager.GetSharedFileName(fileID);
// Get the file ext of file that was opened
string incomingFileType =
Path.GetExtension(incomingFileName);
// switch case, we may have registered more than
// one file extension
switch (incomingFileType)
{
case ".myExt":
return new Uri("/ParseFile.xaml?fileToken="
+ fileID, UriKind.Relative);
// handle other file exts we reg'd for?
// ...
default:
return new Uri("/MainPage.xaml",
UriKind.Relative);
}
}
return uri; // else launch app normally
}
}
}
This code receives a URL string (in the Uri parameter) of the form /FileTypeAssociation?fileToken={GUID};
this string is then parsed. Ultimately the app launches its ParseFile.xaml page and passes the file’s token to it,
whenever a .myExt file has been opened on the device.
ParseFile.xaml.cs could contain the following code, which copies the file from the OS’s shared storage space
into its own IsolatedStorage, opens it, and then begins parsing it:
protected override async void OnNavigatedTo(NavigationEventArgs e)
{
base.OnNavigatedTo(e);
if (NavigationContext.QueryString.ContainsKey("fileToken"))
{
// copy the file from shared storage to our own sandboxed
// storage space
Await SharedStorageAccessManager.CopySharedFileAsync(
ApplicationData.Current.LocalFolder, "newFile.myExt",
NameCollisionOption.ReplaceExisting,
NavigationContext.QueryString["fileToken"]);
var file = await folder.GetFileAsync("newFile.myExt");
// open the file for reading
using (var fs = await file.OpenAsync(FileAccessMode.Read))
{
using (var inStream = fs.GetInputStreamAt(0))
{
using (var reader = new DataReader(inStream))
{
await reader.LoadAsync((uint)fs.Size);
// parse the file contents
parseInputFile(reader);
}
}
}
}
}
The details of what the hypothetical parser (in this case, the parseInputFile() method) actually does with the
file contents would be completely application dependent; however, many apps are likely to have registered their
file extension(s) so that they can parse, process, or otherwise use files of a certain type in a useful way. For
example, apps may register so that they act as the device’s PDF viewer or image viewer.
Other apps may parse binary files in some way, or they may open the file, and then send it back to the
developer’s server for use, and perhaps do some parsing on it in between—think collecting telemetry statistics,
logs, or crash dumps. Whatever the case, designing secure file parsers can be difficult; homegrown file parsers
don’t exactly have a history for being very secure! Some mature apps from the desktop may have been ported to
Windows Phone and may be using the desktop app’s parsing engine that was written in native code, via
P/Invoke, which may spell trouble.
After you’ve identified the code path that is followed when the registered file type is opened, it’s time to dig into
the parser or processor for bugs. You can do this using source code (original or reflected), or via some kind of
file format fuzzing.
Before concluding this section on protocol and file handlers, let’s look at the possible ways files can be
launched:
By web pages being viewed in Internet Explorer—The user is not prompted for permission to launch
the app.
By web pages in WebBrowser and WebView controls—
The user is not prompted for permission to launch the app.
From email attachments—The user is not prompted for permission to launch the app.
By other apps on the device—For example here the user is not prompted for permission to launch an app.
StorageFolder local =
Windows.Storage.ApplicationData.Current.LocalFolder;
StorageFile bqfile = await local.GetFileAsync("file.theirExt");
// launch the file
Windows.System.Launcher.LaunchFileAsync(bqfile);
By a nearby NFC device—For example from a proximate Windows Phone, other smartphone, or NFC tag.
The user is prompted for permission to accept and launch the file—unless the app being launched has been
“ticked” as trusted during a previous launch. Trusting an app to allow NFC URL launches is only available in
Windows Phone 8.1, not 8.
From SD cards—This is a special case, and was discussed earlier in this chapter, see the earlier section “SD
Cards” under “Analyzing for Entry Points” for more information.
Toast Notifications
Toast notifications are small message bars that appear at the top of the screen to notify the user of an event.
Typically, an app will publish a toast when something happens that the user may want to react to, such as
receiving an instant message.
When an app sends a toast notification, it specifies which of its pages should be launched if the user chooses to
tap the toast. The general idea is that upon tapping a toast, users should be taken to the page where they can act