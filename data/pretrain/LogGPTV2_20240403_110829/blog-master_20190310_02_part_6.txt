              |                 | $__EDBwrapped__$                                                             |     
(1 row)    
postgres=# select pronamespace::regnamespace,proname,prosrc,probin from pg_proc where proname='put_line';    
 pronamespace | proname  |                                    prosrc                                    | probin     
--------------+----------+------------------------------------------------------------------------------+--------    
 dbms_output  | put_line |                                                                             +|     
              |          | $__EDBwrapped__$                                                            +|     
              |          | UTF8                                                                        +|     
              |          | d0vf6gwQ6CEkFoPaHLYgW1cvknLmE/WdfBQXQ5Q614fSkXdoIL4aS8yklB+jCb6h1H/nu0fgwc/o+|     
              |          | V7MQYCUrvMWG0UvpNujoUJfEHKBFLQAIgjsssk2elNo=                                +|     
              |          | $__EDBwrapped__$                                                             |     
 utl_file     | put_line |                                                                             +|     
              |          | $__EDBwrapped__$                                                            +|     
              |          | UTF8                                                                        +|     
              |          | dzrm80Wdq+9FuQqbIKIzJfhTWdZ8ZgD8TIvYYmuNPQhmua9A8h+5L4sISiDUSAbY4NCa4ZDoNhYF+|     
              |          | s3OYfa09YBwQxjhYGk/ZQ1Acwm3bUYrNu755/iT92yuXWvQwdd+aLw==                    +|     
              |          | $__EDBwrapped__$                                                             |     
 utl_file     | put_line |                                                                             +|     
              |          | $__EDBwrapped__$                                                            +|     
              |          | UTF8                                                                        +|     
              |          | dzrm80Wdq+9FuQqbIKIzJfhTWdZ8ZgD8TIvYYmuNPQhmua9A8h+5L4sISiDUSAbY4NCa4ZDoNhYF+|     
              |          | s3OYfa09YBwQxjhYGk/ZQ1Acwm3bUYrNu755/iT92yuXWvQwdd+aLw==                    +|     
              |          | $__EDBwrapped__$                                                             |     
 utl_file     | put_line |                                                                             +|     
              |          | $__EDBwrapped__$                                                            +|     
              |          | UTF8                                                                        +|     
              |          | dzrm80Wdq+9FuQqbIKIzJfhTWdZ8ZgD8TIvYYmuNPQhmua9A8h+5L4sISiDUSAbY4NCa4ZDoNhYF+|     
              |          | s3OYfa09YBwQxjhYGk/ZQ1Acwm3bUYrNu755/iT92yuXWvQwdd+aLw==                    +|     
              |          | $__EDBwrapped__$                                                             |     
 utl_file     | put_line |                                                                             +|     
              |          | $__EDBwrapped__$                                                            +|     
              |          | UTF8                                                                        +|     
              |          | dzrm80Wdq+9FuQqbIKIzJfhTWdZ8ZgD8TIvYYmuNPQhmua9A8h+5L4sISiDUSAbY4NCa4ZDoNhYF+|     
              |          | s3OYfa09YBwQxjhYGk/ZQ1Acwm3bUYrNu755/iT92yuXWvQwdd+aLw==                    +|     
              |          | $__EDBwrapped__$                                                             |     
(5 rows)    
```    
### 8、SQL语法深水区支持    
1、支持connect by。    
```  
postgres=# CREATE TABLE TBL_TEST    
(    
ID    NUMBER,    
NAME VARCHAR2(100 ),        
PID   NUMBER                                  DEFAULT 0    
);    
CREATE TABLE  
postgres=# INSERT INTO TBL_TEST(ID,NAME,PID) VALUES('1','10','0');    
INSERT 0 1  
postgres=# INSERT INTO TBL_TEST(ID,NAME,PID) VALUES('2','11','1');    
INSERT 0 1  
postgres=# INSERT INTO TBL_TEST(ID,NAME,PID) VALUES('3','20','0');    
INSERT 0 1  
postgres=# INSERT INTO TBL_TEST(ID,NAME,PID) VALUES('4','12','1');    
INSERT 0 1  
postgres=# INSERT INTO TBL_TEST(ID,NAME,PID) VALUES('5','121','2');    
INSERT 0 1  
postgres=# select * from TBL_TEST    
postgres-# start with id=1    
postgres-# connect by prior id = pid;   
 id | name | pid   
----+------+-----  
  1 | 10   |   0  
  2 | 11   |   1  
  5 | 121  |   2  
  4 | 12   |   1  
(4 rows)  
```  
2、支持分区表语法      
```  
CREATE table TABLE_PARTITION(  
       COL1   NUMBER,  
       COL2   VARCHAR2(10)  
)   
partition by range(COL1)(  
          partition TAB_PARTOTION_01 values less than (450000),  
          partition TAB_PARTOTION_02 values less than (900000),  
          partition TAB_PARTOTION_03 values less than (1350000),  
          partition TAB_PARTOTION_04 values less than (1800000),  
          partition TAB_PARTOTION_OTHER values less THAN (MAXVALUE)  
);  
```  
3、支持rowid  
```  
postgres=# create table test (id int);  
CREATE TABLE  
postgres=# insert into test values (1),(2);  
INSERT 0 2  
postgres=# select rowid from test;  
 rowid   
-------  
 16406  
 16407  
(2 rows)  
postgres=# select rowid,* from test;  
 rowid | id   
-------+----  
 16406 |  1  
 16407 |  2  
(2 rows)  
```  
4、语义层面支持rownum，不依赖sequence  
```  
postgres=# select * from tbl_test where rownum <10;  
 id | name | pid   
----+------+-----  
(0 rows)  
postgres=# explain select * from tbl_test where rownum <10;  
                         QUERY PLAN                           
------------------------------------------------------------  
 Seq Scan on tbl_test  (cost=0.00..13.25 rows=87 width=282)  
   Filter: (rownum < 10)  
(2 rows)  
```  
## 小结    
EDB从2005年开始基于PostgreSQL的代码适配Oracle，已经有14年的Oracle兼容性适配积累，应该来说是PG生态中，ORACLE兼容性最好的产品了。    
2015年，阿里云与EDB合作推出云端RDS PPAS，兼容Oracle的版本。兼具了PostgreSQL社区版本特性，以及Oracle兼容性。EDB在以上兼容性做得非常到位。    
截止目前，已有很多传统客户借助PPAS产品，几乎无痛地成功去O（从8i到12c都有非常成功的案例）。    
2018年云栖大会阿里云与EDB达成深层战略合作。为客户去O提供更好的服务与产品。    
EDB的Oracle兼容性涉及：     
1、SQL语法    
2、类型    
3、函数    
4、包    
5、索引类型    
6、操作符    
7、格式（内部存储格式，输入输出格式）     
8、样式（使用样式，例如 null=''）      
9、编程语言    
10、自定义pl/sql 存储过程    
11、自定义pl/sql 函数    
12、自定义pl/sql 包    
13、客户端驱动(OCI)    
14、客户端编程(PRO\*C)      
去O除了数据库引擎，还有一个更不可或缺的是去O工具与生态。    
[ADAM](https://www.aliyun.com/product/adam)是阿里云提供的去O兼容性评估、不兼容转换、整体迁移工具。提供能力：    
1、兼容性评估，改造工作量    
2、不兼容转换    
3、schema迁移    
4、全量数据迁移    
5、增量迁移    
6、一致性校验    
7、SQL、存储过程调用一致性校验    
8、仿真回放与结果一致性校验    
9、引擎独特特性优化    
10、风险揭示（慢SQL揭示）    
11、拆库建议    
12、分库建议    
13、一键迁移    
14、优化与诊断    
15、迁移过程植入人工干预（DDL允许改动（结构变更、索引变更...），迁移数据允许增加WHERE条件（部分、满足条件迁移））    
16、并行迁移    
17、多合一迁移    
18、一拆多迁移    
## O兼容性对比    
本文以内置系统表、包、一些ORACLE独特语法的兼容性入手，分析Oracle兼容性是否到了深水区。很显然EDB已经在深水区，而且O兼容性的打磨属于体力活，14年的打磨不是一朝一夕能实现的。    
## 参考    
[《PostgreSQL , EDB EPAS PPAS(兼容Oracle) , Oracle 对比（兼容性、特性优劣势） - 企业去O,去IOE》](../201903/20190301_01.md)      
[《xDB Replication Server - PostgreSQL, Oracle, SQL Server, PPAS 全量、增量(redo log based, or trigger based)同步（支持single-master, mult-master同步, 支持DDL）》](../201902/20190203_01.md)      
[《MTK使用 - PG,PPAS,oracle,mysql,ms sql,sybase 迁移到 PG, PPAS (支持跨版本升级)》](../201812/20181226_01.md)      
[《PostgreSQL vs PPAS 差异 - Oracle评估、迁移、验证、性能调优》](../201812/20181210_01.md)      
[《PostgreSQL(PPAS 兼容Oracle) 从零开始入门手册 - 珍藏版》](../201811/20181102_02.md)      
[ADAM](https://www.aliyun.com/product/adam)    
[business-comparison-edb-and-oracle-ebook](20190310_02_pdf_001.pdf)    
[Database_Compatibility_for_Oracle_Developers_Guide_v11](20190310_02_pdf_002.pdf)    
[technical-comparison-edb-postgres-enterprise-and-oracle-enterprise-ebook](20190310_02_pdf_003.pdf)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")