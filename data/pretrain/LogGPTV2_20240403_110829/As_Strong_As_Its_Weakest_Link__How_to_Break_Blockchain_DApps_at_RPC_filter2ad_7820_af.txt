of DoSes have been designed and practiced on the different
layers of a blockchain system in smart-contract execution [44],
[30],
transaction processing [51], [34], [40], mining-based
consensus [26], [60], and the underlying P2P network [54],
[58], [43], [63]. For instance, in the P2P network layer, an
14
eclipse attack [54], [58] aims to isolate a DoS-victim peer
from the network and a routing attack [43], [63] employs
BGP hijacking to intercept network trafﬁc towards partitioning
it. Among these attack vectors, of particular relevance are
the DoSes that evade the Gas-based mechanism for smart-
contract execution. Under-priced EVM instructions, notably
EXCODESIZE [42] and SUICIDE [21], have been identiﬁed
and exploited in practice DoS attacks. Ethereum EIP150 [44]
ﬁxes the bugs by increasing the Gas associated with these
instructions. Broken metering [62] further exploits the runtime
variation of an EVM instruction, with the goal
to lower
contract-execution throughput (gas per second) at low cost.
Defensive mechanisms [47] have been proposed to punish
contracts that excessively execute a particular (vulnerable)
instruction. Unlike existing DoS attacks, DoERS uniquely
targets the RPC-service layer of a blockchain node. DoERS
is extremely low-cost and does not incur no Gas or Ether),
which differs from existing DoSes that incur signiﬁcant Gas.
Blockchain RPC attacks: In the existing literature, the only
research work on the attacks exploiting blockchain’s RPC is a
measurement of currency stealing attacks [48]. In the currency-
stealing attack, an adversarial client exploits the time window
between an account-unlocking RPC request and a transaction-
send request, such that she can gain unauthorized access to an
account unlocked on a RPC service. DoERS differs from the
RPC-based currency stealing attack in that it does not exploit
the privileged RPCs (e.g., account unlocking and transaction
sending) but focus on the open RPC queries that allow smart-
contract execution.
Blockchain measurements: Passive measurement [57] re-
veals various deployment information in Ethereum network
(e.g., node distribution, network sizes, etc.). The approach
taken is to launch several Ethereum nodes and collect the mes-
sages they exchange with their neighbors, which are analyzed
to uncover network information. There are other measurement
works focusing on Bitcoin network topology [50], [53], Mon-
ero P2P network [45], ERC20 token networks [65], etc. The
measurement studies in this work focus on the DoERS security
and leverage a novel measurement method based on orphan
transactions that are not taken in existing works.
VIII. RESPONSIBLE DISCLOSURE
We have disclosed the DoERS vulnerability to the developer
communities of Geth [15] and Parity/OpenEthereum [38], as
well as all tested service providers. The bug reports are sent
in May, 2020, leaving tested services at least 9 months to ﬁx
the bug before disclosing the vulnerability publicly (in Feb.
2021).
We have received a total of $260 bounty in Ether and are
informed by the RPC services that bug ﬁxing is in progress.
For instance, our bug report has been acknowledged in Geth
v1.9.16 release (July 10, 2020), which sets a new default limit
to 25 ∗ 106 Gas. Also after our reporting, ServiceX5 sets a
new limit to their service at 25 ∗ 106 Gas, and invites us for
further testing.
IX. CONCLUSION
This paper presents the ﬁrst measurement study on the
security of Ethereum’s RPC-enabled nodes under denial of
service attacks. The results reveal that ﬁve out of the nine
popular services (as of Apr. 2020) have turned on RPCs with-
out conﬁguring any Gas limits. These peers are particularly
vulnerable and can be crashed by the proposed DoERS attack
that sends as few as a single eth_call request at zero
Ether cost. While the four other services including ServiceX6
have conﬁgured Gas limits, the limits are so nonrestrictive
that a properly conﬁgured DoERS attack can cause a latency
increase by 2.1× ∼ 50×, as veriﬁed in our probes. On a local
node protected by a very restrictive limit of 0.65 block gas,
sending 150 RPC requests per second can slow down the block
synchronization of the victim by 91%.
This work addresses the challenge of eliminating the Do-
ERS vulnerability without affecting service usability. We pro-
pose mitigation beyond simply limits the Gas; these techniques
include unpredictable load balancing, performance anomaly
detection, and interruptible EVM instructions. They are easy
to be engineered in a RPC service at the layers of both service
frontend and the underlying EVM.
ACKNOWLEDGMENT
The authors
thank anonymous NDSS reviewers. The
ﬁrst
four authors are partially supported by NSF Grant
CNS1815814. XiaoFeng Wang is supported in part by the NSF
CNS-1618493, 1838083 and 1801432. Xiapu Luo is supported
by Hong Kong RGC Project (No. 152193/19E).
REFERENCES
[1] Amazon ec2 - amazon web services. https://aws.amazon.com/ec2/.
[2] Api
https://en.bitcoin.it/wiki/API reference
reference (json-rpc).
(JSON-RPC).
[3] Bigquery: Serverless, highly scalable, and cost-effective cloud data
warehouse. https://curl.haxx.se/.
[4] Bitcoin script. https://en.bitcoin.it/wiki/Script.
[5] Blockchain explorer. https://www.blockchain.com/explorer.
[6] Chain api — eosio developer docs.
https://developers.eos.io/
manuals/eos/latest/nodeos/plugins/chain api plugin/api-reference/
index#operation/get account.
and
breed
digital
cats!
https:
[7] Cryptokitties:
Collect
//www.cryptokitties.co/.
[8] Cryptokitties on dapp radar (showing ﬁve smart contracts deployed on
ethereum). https://dappradar.com/app/3/cryptokitties.
[9] curl, command line tool and library for transferring data with urls. https:
[10] Dapp survey results 2019. https://medium.com/ﬂuence-network/dapp-
survey-results-2019-a04373db6452.
[11] Devp2p library (used in ethereum).
https://github.com/ethereum/
//curl.haxx.se/.
devp2p/.
[12] Eip 1767: Graphql
interface to ethereum node data.
https://
eips.ethereum.org/EIPS/eip-1767.
[13] Eosio on dfuse. https://docs.dfuse.io/guides/eosio/.
[14] Eth namespace: Geth provides “state override” extensions to the standard
“eth call”. https://geth.ethereum.org/docs/rpc/ns-eth.
[15] Ethereum bounty program. https://bounty.ethereum.org/.
[16] Ethereum json rpc. https://ethereumbuilders.gitbooks.io/guide/content/
en/ethereum json rpc.html.
[17] Ethereum name service.
[18] Faucet in gitcoin. https://gitcoin.co/faucet.
[19] Gas limit on eth call? https://community.infura.io/t/gas-limit-on-eth-
call/1115/.
[20] getfunddetails in the melon protocol. https://github.com/melonproject/
protocol/blob/f5bc07870c0f6a88a1b0ec855752dbd9cc6a23f5/src/
contracts/factory/FundRanking.sol#L8.
[21] Geth nodes under attack again (reddit).
https://www.reddit.com/r/
ethereum/comments/55s085/geth nodes under attack again we are
actively/.
[22] Geth requires manual conﬁguration to enable rpc. https://github.com/
ethereum/wiki/wiki/JSON-RPC#json-rpc-endpoint.
[23] Go sdk — stellar developer — rest api.
https://www.stellar.org/
developers/horizon/reference/index.html.
[24] Google cloud: Cloud computing services. https://cloud.google.com/.
[25] Internal/ethapi: allow eth call with custom code. https://github.com/
ethereum/go-ethereum/issues/19836.
[26] Irreversible transactions: Finney attack.
Irreversible Transactions#Finney attack.
https://en.bitcoin.it/wiki/
[27] Json rpc api - wiki. https://wiki.parity.io/JSONRPC.
[28] Json-rpc in ethereum wiki (eth call). https://github.com/ethereum/wiki/
[29] Json-rpc in ethereum wiki
wiki/json-rpc#eth\ call.
(eth estimategas).
ethereum/wiki/wiki/json-rpc#eth\ estimateGas.
https://github.com/
[30] Known
attacks
-
ethereum smart
contract
best
practices.
https://consensys.github.io/smart-contract-best-practices/known
attacks/#dos-with-block-gas-limit.
[31] Ligntning network, scalable, instant bitcoin/blockchain transactions.
[32] Management apis by go ethereum.
https://github.com/ethereum/go-
ethereum/wiki/Management-APIs.
[33] Melon terminal. https://melon.avantgarde.ﬁnance/.
[34] Memoria 700 million stuck in 115,000 unconﬁrmed bitcoin trans-
actions. https://www.ccn.com/700-million-stuck-115000-unconﬁrmed-
bitcoin-transactions/.
[35] Metamask: A crypto wallet & gateway to blockchain apps.
https:
//metamask.io/.
[36] Nmap: the network mapper - free security scanner. https://nmap.org/.
[37] Node discovery protocol
https://github.com/ethereum/
in devp2p.
devp2p/blob/master/discv4.md.
[38] Parity bug bounty program. https://www.parity.io/bug-bounty/.
[39] Public apis on greymass, an eosio block producer. https://greymass.com/
en/apis.
[40] Report: Bitcoin (btc) mempool shows backlogged transactions, increased
fees if so? https://goo.gl/LsU6Hq.
[41] Solidity in depth – contracts, section: View function and pure function.
https://solidity.readthedocs.io/en/v0.4.24/contracts.html.
[42] Transaction spam attack: Next steps. https://blog.ethereum.org/2016/09/
22/transaction-spam-attack-next-steps/.
[43] Maria Apostolaki, Aviv Zohar, and Laurent Vanbever. Hijacking bitcoin:
Routing attacks on cryptocurrencies. In IEEE Symposium on SP 2017,
pages 375–392, 2017.
[44] Vitalik Buterin. Eip150: Gas cost changes for io-heavy operations.
[45] Tong Cao, Jiangshan Yu, J´er´emie Decouchant, Xiapu Luo, and Paulo
IACR
Exploring the monero peer-to-peer network.
Ver´ıssimo.
Cryptology ePrint Archive, 2019:411, 2019.
[46] Raphael Lefbvre Renaud Larsen Cathy Pill, Sarah Levin Weinberg.
Stellar: Smart inﬂuencer marketing platform. stellar.io.
[47] Ting Chen, Xiaoqi Li, Ying Wang, Jiachi Chen, Zihao Li, Xiapu Luo,
Man Ho Au, and Xiaosong Zhang. An Adaptive Gas Cost Mechanism
for Ethereum to Defend Against Under-Priced DoS Attacks. In ISPEC
2017, pages 3–24, 2017.
[48] Zhen Cheng, Xinrui Hou, Runhuai Li, Yajin Zhou, Xiapu Luo, Jinku
Li, and Kui Ren. Towards a ﬁrst step to understand the cryptocurrency
stealing attack on ethereum. In RAID 2019, pages 47–60, 2019.
[49] Philip Daian, Steven Goldfeder, Tyler Kell, Yunqi Li, Xueyuan Zhao,
Iddo Bentov, Lorenz Breidenbach, and Ari Juels.
Flash boys 2.0:
Frontrunning, transaction reordering, and consensus instability in de-
centralized exchanges. CoRR, abs/1904.05234, 2019.
[50] Sergi Delgado-Segura, Surya Bakshi, Cristina P´erez-Sol`a, James Litton,
Andrew Pachulski, Andrew Miller, and Bobby Bhattacharjee. Tx-
probe: Discovering bitcoin’s network topology using orphan transac-
tions. In Financial Cryptography and Data Security - 23rd International
Conference, FC 2019, Frigate Bay, St. Kitts and Nevis, February 18-22,
2019, Revised Selected Papers, pages 550–566, 2019.
[51] Shayan Eskandari, Seyedehmahsa Moosavi, and Jeremy Clark. Sok:
Transparent dishonesty: Front-running attacks on blockchain.
In
Financial Cryptography and Data Security - FC 2019 International
15
Workshops, VOTING and WTSC, St. Kitts, St. Kitts and Nevis, February
18-22, 2019, Revised Selected Papers, pages 170–189, 2019.
[52] Amir Feder, Neil Gandal, J. T. Hamrick, and Tyler Moore. The impact of
ddos and other security shocks on bitcoin currency exchanges: evidence
from mt. gox. J. Cybersecur., 3(2):137–144, 2017.
[53] Matthias Grundmann, Till Neudecker, and Hannes Hartenstein. Exploit-
ing transaction accumulation and double spends for topology inference
in bitcoin.
In Aviv Zohar, Ittay Eyal, Vanessa Teague, Jeremy Clark,
Andrea Bracciali, Federico Pintore, and Massimiliano Sala, editors,
Financial Cryptography and Data Security - FC 2018 International
Workshops, BITCOIN, VOTING, and WTSC, Nieuwpoort, Curac¸ao,
March 2, 2018, Revised Selected Papers, volume 10958 of Lecture Notes
in Computer Science, pages 113–126. Springer, 2018.
[54] Ethan Heilman, Alison Kendler, Aviv Zohar, and Sharon Goldberg.
Eclipse attacks on bitcoin’s peer-to-peer network. In Jaeyeon Jung and
Thorsten Holz, editors, USENIX Security 2015, Washington, D.C., USA,
pages 129–144. USENIX Association, 2015.
[55] Maurice Herlihy. Atomic cross-chain swaps. In ACM Symposium on
PODC 2018, pages 245–254, 2018.
[56] Benjamin Johnson, Aron Laszka, Jens Grossklags, Marie Vasek, and
Tyler Moore. Game-theoretic analysis of ddos attacks against bitcoin
mining pools.
In Financial Cryptography and Data Security - FC
2014 Workshops, BITCOIN and WAHC 2014, Christ Church, Barbados,
March 7, 2014, Revised Selected Papers, pages 72–86, 2014.
[57] Seoung Kyun Kim, Zane Ma, Siddharth Murali, Joshua Mason, Andrew
In
Miller, and Michael Bailey. Measuring ethereum network peers.
Proceedings of IMC 2018, pages 91–104, 2018.
[58] Yuval Marcus, Ethan Heilman, and Sharon Goldberg. Low-resource
eclipse attacks on ethereum’s peer-to-peer network. IACR Cryptology
ePrint Archive, 2018:236, 2018.
[59] Andrew Miller, Iddo Bentov, Ranjit Kumaresan, and Patrick McCorry.
CoRR,
Sprites: Payment channels that go faster than lightning.
abs/1702.05812, 2017.
[60] Michael Mirkin, Yan Ji, Jonathan Pang, Ariah Klages-Mundt, Ittay Eyal,
and Ari Juels. Bdos: Blockchain denial of service, 2019.
[61] OpenEthereum.
from localhost.
blob/597cbc2d6c62cae6374f8e6fce6eb954de3504cb/parity/cli/tests/
conﬁg.full.toml.
rpc by default only to requests
https://github.com/openethereum/openethereum/
Parity opens
[62] Daniel P´erez and Benjamin Livshits. Broken metre: Attacking resource
metering in EVM. CoRR, abs/1909.07220, 2019.
[63] Muoi Tran, Inho Choi, Gi Jun Moon, Anh V. Vu, and Min Suk Kang. A
Stealthier Partitioning Attack against Bitcoin Peer-to-Peer Network. In
To appear in Proceedings of IEEE Symposium on Security and Privacy
(IEEE S&P), 2020.
[64] Marie Vasek, Micah Thornton, and Tyler Moore. Empirical analysis
of denial-of-service attacks in the bitcoin ecosystem.
In Financial
Cryptography and Data Security - FC 2014 Workshops, BITCOIN and
WAHC 2014, Christ Church, Barbados, March 7, 2014, Revised Selected
Papers, pages 57–71, 2014.
[65] Friedhelm Victor and Bianca Katharina L¨uders. Measuring ethereum-
based ERC20 token networks.
In Financial Cryptography and Data
Security - 23rd International Conference, FC 2019, Frigate Bay, St. Kitts
and Nevis, February 18-22, 2019, Revised Selected Papers, pages 113–
129, 2019.
APPENDIX
A. Exploitability Measurements on Ethereum Peers
The initial state of the measurement study is a list of
Ethereum peers’ IPs collected from the mainnet (based on a
passive measurement method [57]; see details in § A2). Given
the peers’ IPs, our ﬁrst measurement module (§ A1a) is to
classify whether each peer is a valid, public RPC peer. Validity
means that the peer should not be a honeypot. Each identiﬁed
public RPC peer is a potential victim under DoERS, as its
IP and RPC port is known. The second measurement module
(§ A1b) is to proﬁle these potential victim peers and to obtain
their gas limit. Recall that a gas limit can prevent a naive
DoERS attack. With the knowledge of the IP, RPC port, and
16
gas limits of an Ethereum peer, a practical DoERS attack that
evades the gas limit can be readily adjusted and mounted. The
measurement results and security implications are discussed
respectively in § A2 and in § IV-F.
1) Measurement Methodology:
int res;
int[] ports = nmap(peerIP);
for(int port : ports) {
1 int TestPublicRPC(Peer peerIP){