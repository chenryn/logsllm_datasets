### Denial of Service (DoS) Attacks on Blockchain Systems

Various DoS attacks have been designed and executed across different layers of a blockchain system, including smart-contract execution [44, 30], transaction processing [51, 34, 40], mining-based consensus [26, 60], and the underlying peer-to-peer (P2P) network [54, 58, 43, 63]. For example, in the P2P network layer, an eclipse attack [54, 58] aims to isolate a victim node from the network, while a routing attack [43, 63] uses BGP hijacking to intercept and partition network traffic.

Among these attack vectors, DoS attacks that exploit the Gas-based mechanism for smart-contract execution are particularly relevant. Under-priced Ethereum Virtual Machine (EVM) instructions, such as EXTCODESIZE [42] and SUICIDE [21], have been identified and exploited in practical DoS attacks. Ethereum Improvement Proposal (EIP) 150 [44] mitigates these issues by increasing the Gas cost associated with these instructions. Additionally, broken metering [62] exploits the runtime variation of EVM instructions to reduce contract-execution throughput at a low cost. Defensive mechanisms [47] have been proposed to penalize contracts that excessively use specific (vulnerable) instructions.

Unlike existing DoS attacks, DoERS specifically targets the Remote Procedure Call (RPC) service layer of a blockchain node. DoERS is extremely low-cost and does not incur any Gas or Ether, distinguishing it from other DoS attacks that require significant Gas.

### Blockchain RPC Attacks

In the literature, the only research on attacks exploiting blockchain's RPC is a study on currency-stealing attacks [48]. In these attacks, an adversarial client exploits the time window between an account-unlocking RPC request and a transaction-send request to gain unauthorized access to an unlocked account. DoERS differs from these RPC-based currency-stealing attacks because it does not exploit privileged RPCs (e.g., account unlocking and transaction sending) but focuses on open RPC queries that allow smart-contract execution.

### Blockchain Measurements

Passive measurements [57] reveal various deployment information in the Ethereum network, such as node distribution and network sizes. This approach involves launching Ethereum nodes and analyzing the messages exchanged with their neighbors. Other measurement studies focus on Bitcoin network topology [50, 53], Monero P2P network [45], ERC20 token networks [65], and more. The measurement studies in this work focus on DoERS security and employ a novel method based on orphan transactions, which has not been used in existing works.

### Responsible Disclosure

We disclosed the DoERS vulnerability to the developer communities of Geth [15] and Parity/OpenEthereum [38], as well as all tested service providers. The bug reports were sent in May 2020, giving the tested services at least nine months to fix the bug before public disclosure in February 2021. We received a total of $260 in bounty in Ether and were informed that bug fixing is in progress. For instance, our bug report was acknowledged in Geth v1.9.16 (released on July 10, 2020), which sets a new default Gas limit of 25 * 10^6. After our reporting, ServiceX5 also set a new limit of 25 * 10^6 Gas and invited us for further testing.

### Conclusion

This paper presents the first measurement study on the security of Ethereum's RPC-enabled nodes under DoS attacks. The results show that five out of nine popular services (as of April 2020) have enabled RPCs without configuring any Gas limits, making them particularly vulnerable. These peers can be crashed by a single eth_call request at zero Ether cost. While the other four services, including ServiceX6, have configured Gas limits, these limits are nonrestrictive, allowing a properly configured DoERS attack to cause latency increases of 2.1x to 50x, as verified in our probes. On a local node protected by a very restrictive limit of 0.65 block gas, sending 150 RPC requests per second can slow down the block synchronization of the victim by 91%.

This work addresses the challenge of eliminating the DoERS vulnerability without affecting service usability. We propose mitigation techniques beyond simply limiting Gas, including unpredictable load balancing, performance anomaly detection, and interruptible EVM instructions. These techniques are easy to implement in an RPC service at both the frontend and the underlying EVM layers.

### Acknowledgment

The authors thank anonymous NDSS reviewers. The first four authors are partially supported by NSF Grant CNS1815814. XiaoFeng Wang is supported in part by the NSF grants CNS-1618493, 1838083, and 1801432. Xiapu Luo is supported by the Hong Kong RGC Project (No. 152193/19E).

### References

[References are listed as provided, with URLs and details included.]

### Appendix

#### A. Exploitability Measurements on Ethereum Peers

The initial state of the measurement study is a list of Ethereum peers' IPs collected from the mainnet using a passive measurement method [57]. Given the peers' IPs, the first measurement module (ยง A1a) classifies whether each peer is a valid, public RPC peer. Validity means that the peer should not be a honeypot. Each identified public RPC peer is a potential victim under DoERS, as its IP and RPC port are known. The second measurement module (ยง A1b) profiles these potential victim peers to obtain their gas limit. Recall that a gas limit can prevent a naive DoERS attack. With the knowledge of the IP, RPC port, and gas limits of an Ethereum peer, a practical DoERS attack that evades the gas limit can be readily adjusted and mounted. The measurement results and security implications are discussed in ยง A2 and ยง IV-F, respectively.

#### 1. Measurement Methodology

```java
int res;
int[] ports = nmap(peerIP);
for(int port : ports) {
    int TestPublicRPC(Peer peerIP) {
        // Implementation of the test function
    }
}
```

This methodology ensures that each peer is thoroughly tested and classified, providing a comprehensive understanding of the potential vulnerabilities in the Ethereum network.