Input/output interactive Markov chains [4] are an in-
tegration of input/output automata [16] and CTMC [15,
18].
I/O-IMC are closely related to Interactive Markov
Chains [12] (IMC) which are an integration of interactive
processes [17] and CTMC.
Figure 2.a shows two examples of input/output interac-
tive Markov chains. Circles denote states in the model and
transitions are depicted as arrows. The starting state is iden-
tiﬁed by a black dot. There are two different kinds of transi-
tions in an I/O-IMC model: Markovian transitions, denoted
by a small rectangle on the arrow and interactive transi-
tions, denoted by a line on the arrow. Each I/O-IMC has
an action signature, written next to its starting state, which
shows how it communicates with the environment.
I/O-
IMC B, for instance, has an input action a?, an output ac-
tion b! and no internal actions. When each of the I/O-IMC’s
actions has at least one associated transition, the action sig-
nature can be (and often is) omitted. The difference between
inputs, outputs and internal actions will be discussed later in
this section.
I/O-IMC B has a Markovian transition from state 1 to
state 2. This transition has a rate of λ. Markovian transi-
tions in I/O-IMC behave exactly the same way as Marko-
vian transitions in CTMC: the I/O-IMC moves from state
1 to state 2 after an exponentially distributed delay. An
I/O-IMC with only Markovian transitions can thus be in-
terpreted as a CTMC. I/O-IMC B also has an interactive
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007transition from state 1 to state 3 labeled a?. This denotes
that the move from 1 to 3 is an input action named a. Input
actions are denoted with a question mark (i.e. a?). If some
other I/O-IMC performs an output action named a while
I/O-IMC B is in state 1 then B will move to state 3 imme-
diately. It is important to note that every state of I/O-IMC B
has an outgoing input transition named a. This means that
B is always ready to respond to an output-action a, even if
this does not result in a state-change (when B is in state 3,
4, or 5). For clarity we will omit these transitions (input-
actions from a state to itself) from now on. We say that I/O-
IMC B is input-enabled with respect to action a. Note that
input actions are delayable, i.e. they must wait until another
I/O-IMC performs the corresponding output-action.
A different kind of interactive transition from state 4 to
state 5 is also present in B. This transition is labeled b! and
is an output action. Output actions are denoted with an ex-
clamation mark (i.e. b!). When I/O-IMC B performs this
output action all I/O-IMC which have b as an input action
must perform this input action. Unlike input actions, output
actions are immediate; i.e. when I/O-IMC B moves to state
4 notime passes before it moves to state 5. It is however
possible that another interactive transition is taken immedi-
ately. Speciﬁcally, if two or more different output actions
are possible in a state, then the choice between the transi-
tions is non-deterministic. One of the transitions is taken
immediately, but it is not known how this choice is made.
A
-
a!
-
1
B
a?
b!
-
1
a!
2
3
-
b!
a;
1,1
a?
a?
4
b!
5
a?
2
3
a?
a?
1,2
2,1
2,2
a;
b!
3,4
3,5
a;
3,3
(b) Parallel composition of A and B, 
hiding signal a (‘Hide a in A||B’)
-
b!
a;
1,1
b!
3,4
3,5
(a) Two examples of I/O-IMC
(c) Aggregation of ‘Hide a in A||B’
Figure 2. Composition, hiding, and aggregation.
Besides input and output actions there are also internal
actions. Internal actions are denoted with a semi-colon (;)
and model internal computation steps of the system they
represent. Thus, internal actions do not inﬂuence other I/O-
IMC and are not inﬂuenced by other I/O-IMC. Similar to
output actions, internal actions are immediate.
The reason it is interesting to combine Markovian and
interactive transitions is that interactive transitions enable
the construction of large I/O-IMC by composition of sev-
eral smaller I/O-IMC [12]. The subject at hand (the analysis
of dynamic fault trees) is a good example. Instead of trans-
forming the entire DFT into one large CTMC we transform
the basic events and gates of the DFT ﬁrst and then cre-
ate a single I/O-IMC by combining the smaller ones (see
Section 5). The I/O-IMC formalism is one such approach
to combining Markovian and interactive transitions. A dis-
cussion on different approaches to combining Markovian
and interactive transitions in one formalism can be found
in [12]. An I/O-IMC can also be transformed into a smaller
aggregated I/O-IMC that is equivalent (i.e. preserving the
system reliability measure) to the original I/O-IMC. This
state space aggregation, which generalizes the notion of
lumping in CTMC, can very effectively reduce the resources
necessary to create a model of a real-life system [14]. In this
work we have used weak bisimulation to aggregate the I/O-
IMC. For the deﬁnition of weak bisimulation for I/O-IMC
we refer the reader to [4] and for details on the complexity
of the minimization algorithm we refer to [12]. Figure 2
shows an example of how two I/O-IMC A and B can be
composed (and hiding signal a with which they commu-
nicate) and how the resulting I/O-IMC can then be aggre-
gated. When composing I/O-IMC A and B we synchronize
on signal a, because it is in both their action signatures.
Since B has a as an input, it has to wait for A’s output
action a!. This explains the absence of an input transition
a? from state (1, 1) in the composed model. However, in
state (2, 1), for instance, A outputs its signal a (and moves
to state 3) and B simultaneously makes the corresponding
input transition and moves from state 1 to 3. All Marko-
vian transitions and non-synchronizing signals are essen-
tially interleaved during composition. Since weak bisim-
ulation abstracts from internal (unobserved) actions; states
(1,2), (2,1), (2,2), and (3,3) are equivalent given that they
essentially all move with a rate λ to the same state (3,4). In-
deed, these 4 states are aggregated into a single (unlabeled)
state in Figure 2.c.
4. DFT to I/O-IMC conversion
During the conversion of a DFT to a MC, the DIFTree al-
gorithm [11] proceeds as follow: First, the MC’s initial state
is created, listing the states of all basic events contained in
the DFT as operational 6. From the initial state, every BE
is being failed (according to its failure rate) one at a time
and the corresponding transition and next state are created
where the state information (i.e. operational or failed) of
the basic event is updated. For every newly created state,
the DFT model (i.e. system state) is evaluated to determine
whether the state corresponds to an operational or a failed
system state7. As long as a state is an operational state, ev-
ery operational BE contained in that state is being failed,
and a corresponding new transition (and optionally a new
state) is created. Note that each MC state has a vector list-
6Some extra information, such as which spare gate is using a given
spare, is also appended to the state.
7This operation is unnecessary in the I/O-IMC framework.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007ing the state of all basic events contained in the DFT; conse-
quently, this makes the state-space grow exponentially with
the number of basic events.
This DIFTree MC generation approach, where the model
of a dynamic system is generated at once and as a whole,
is to be contrasted with our compositional aggregation ap-
proach. paper In our I/O-IMC framework, each DFT ele-
ment (i.e. basic event and gates) has a corresponding I/O-
IMC precisely deﬁning its behavior (i.e. semantics). Every
I/O-IMC has an initial operational state (i.e. with no incom-
ing transition), some intermediate operational (dormant or
active) states, a ﬁring (i.e. about to output a failure sig-
nal) state, and an absorbing ﬁred state. The ﬁring and ﬁred
states are both failed states and are drawn as gray circles
and double circles respectively. There are two main signals
(or actions): a ﬁring signal and an activation signal. The
ﬁring signal of element A is denoted by fA and it signals
the failure of a BE or a gate. The activation signal refers to
the activation (i.e. switching from dormant to active mode)
of a spare A and is denoted by aA. An activation signal
is only output by spare gates, and aA,B denotes the activa-
tion of spare A by spare gate B. Indeed, since a spare A
can be shared, and thus activated, by multiple spare gates,
an activation signal is needed for each of the spare gates.
These activation signals are then translated by an auxiliary
I/O-IMC model8 called activation auxiliary (AA) into a sin-
gle activation signal aA which acts as an input to the spare
A. In the original DIFTree methodology, only BE can act
as spares, and thus BE are the only elements that exhibit
a dormant as well as an active behavior. However, in our
framework we lift this restriction by allowing any indepen-
dent sub-system to act as a spare. As a consequence, spare
gates also exhibit dormant and active behaviors (see Sec-
tion 6 for further details).
In the following, we show the I/O-IMC of the basic
event, the PAND gate, the FDEP gate, and the spare gate
(the full details on all the gates can be found in [4]). We
postpone the discussion on the spare gate model until Sec-
tion 6.
4.1. Basic event I/O-IMC model
As pointed out in Section 2, a basic event has a differ-
ent failing behavior depending on its dormancy factor. For
this reason we identify three types of basic events and corre-
spondingly three types of I/O-IMC. Figure 3 shows the I/O-
IMC corresponding to a cold, warm, and hot basic events
(all called A). The I/O-IMC clearly captures the behavior
of the basic event described in Section 2.
8The AA model is essentially an OR gate having as inputs the various
activations signals coming from the spare gates, and as an output a spare
activation signal rather than a ﬁring signal.
·
aA?
aA?
fA!
aA?
fA!
fA!
Figure 3. I/O-IMC models of cold, warm, and hot BE.
4.2. PAND gate I/O-IMC model
The PAND gate ﬁres if all its inputs fail and fail from
left to right order.
If the inputs ﬁre in the wrong order,
the PAND gate moves to an operational absorbing state (de-
noted with an X on Figure 4). Figure 4 shows the I/O-IMC
fP
fA
fB
fA?
fB?
fB?
fP!
Figure 4. I/O-IMC of the PAND gate.
of the PAND gate P with two inputs A and B (A being the
leftmost input).
4.3. FDEP gate I/O-IMC model
A functional dependency is modeled using a ﬁring auxil-
iary (FA). The FA governs when a dependent DFT element
ﬁres, i.e. either when the element fails by itself or when its
failure is triggered by the FDEP gate trigger. There exists a
different FA for each dependent event. Figure 5 shows the
FA of element A, which is functionally dependent upon B.
The signal f∗
A corresponds to the failure of element A by
itself without factoring in its functional dependency (i.e. in
isolation), and the signal fA corresponds to the failure of A
when also considering its functional dependency upon B.
In order to get the correct behavior of the element A, one
has to compose the three I/O-IMC corresponding to A in
isolation, to its FA, and to the trigger B. Note that any ele-
ment which has A as input has to now interface with A’s FA
rather than directly with A. Note also that the ﬁring auxil-
B
FDEP
A
f*A?
fB?
fA!
Figure 5. I/O-IMC of the ﬁring auxiliary.
iary I/O-IMC is similar to the OR gate I/O-IMC with two
input signals f∗
A and fA.
In the original DIFTree methodology, only BE can be
dependent events. However, in our framework we lift this
restriction by allowing any sub-system to be an FDEP gate
dependent event (Section 6).