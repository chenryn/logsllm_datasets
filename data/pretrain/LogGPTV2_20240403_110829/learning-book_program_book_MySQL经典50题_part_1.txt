# OCR Output
## Page 1
超经典MySQL练习50题
出品：Python数据之道
24 Nov, 2020
---
## Page 2
Contents
1超经典MySQL练习50题
1.1建表和插入数据
1.2题目1..
1.3题目2
8
1.4题目3
9
1.5题目4
11
1.6题目5
1.7题目6
16
1.8题目7
17
1.9题目8
19
1.10题目9
20
1.11题目10
24
1.12题目11
29
1.13题目12
31
1.14题目13
34
1.15题目14
37
1.16题目15
39
1.17题目16
42
1.18题目17
45
1.19题目18
49
1.20题目19
50
1.21题目20
55
1.22题目21
60
1.23题目22
61
1.24题目23
67
1.25题目24
1.26题目25
78
1.27题目26
84
1.28题目27
85
1.29题目28
86
1.30题目29
1.31题目30
89
1.32题目31.
91
---
## Page 3
Contents
Python数据之道
1.33题目32
91
1.34题目33
E6
1.35题目34
94
1.36题目35
95
1.37题目36
96
1.38题目37
98
1.39题目38
99
1.40题目39
100
1.41题目40，
101
1.42题目41
105
1.43题目 42
108
1.44题目43
112
1.45题目 44
113
1.46题目 45
114
1.47题目46
116
1.48题目47
119
1.49题目48
120
1.50题目49
121
1.51题目50
122
2延伸阅读
124
2.1我是谁
124
2.2推荐内容
125
http:/liyangbit.com
---
## Page 4
1超经典MySQL练习50题
出品: Python 数据之道 (ID:PyDataLab)
练习题整理：Peter
内容编辑：Lemon
相信大多学习了Mysql数据库语言的同学都会上网找练习来练手，而大部分的人肯定知道有一篇Mysql经典练习
题50题的帖子，上面的题目基本上通盖了Mysql查询语句的关键知识点。
笔者近期对又将这50题进行了练习，同时整理了相关的参考答案，有自己的思路和方法，也有参考大神们的。不
得不说，这50题对SQL的提升真的很有帮助！
笔者使用的MySQL版本是MySQL5.7.28。
学生表
s_bin
MySQL
经典50题
课程表
1.1建表和插入数据
在开始之前，先建立本文所需要的数据表格：
建表
学生表
CREATE TABLE ′Student’(
s_idVARCHAR(20),
^s_name* VARCHAR (2e) NOT NULL DEFAULT
^s_birth? VARCHAR(20) NOT NULL DEFAULT 11
^s_Sex^VARCHAR(10) NOT NULL DEFAULT
11
PRIMARY KEY(^s_id’)
9);
---
## Page 5
Chapter1.超经典MySQL练习50题
Python数据之道
10
课程表
CREATE TABLE Course^(
12
c_idVARCHAR(20),
13
^c_name* VARCHAR(2e) NOT NULL DEFAULT 1
14
^t_id* VARCHAR(20) NOT NULL,
15
PRIMARY KEY(^c_id’)
16
)；
17
教师表
18
CREATE TABLE Teacher(
19
^t_idVARCHAR(20),
20
^t_name^ VARCHAR(2e) NOT NULL DEFAULT +
21
PRIMARY KEY(′t_id’)
2.2.
)；
2.3
成绩表
24
CREATE TABLE
`Score(
25
*s_idVARCHAR(20),
26
'c_id
VARCHAR(20),
27
s_score′ INT(3),
28
PRIMARY KEY(*s_id’,^c_id’)
29
)；
30
31
插入学生表测试数据
32
insert into Student values(1’，赵雷'，
（，t0-10-066T
EE
insert into Student values(*02
，
钱电
，
'1990-12-21*
（
34
insert into Student values(*03
，
孙风
，
'1990=0520*
，
男）；
35
insert into Student values(*@4*
，
李云
'19900806*
，
男）；
36
insert into Student values(*05
，
周梅！
'1991-12-01*
，
女）;
37
nsert into Student values(*06'
，
昊兰！
'1992-03-01*
，
女）；
38
insert into Student values(*07
，
+毕联：
'1989-07-01*
，
女）;
39
insert into Student values(*@81
王菊！
‘1990-01-20
女）；
40
课程表测试数据
41
insert into Course values('θ1'
语文
*01°);
'02*) ;
42.
insert into Course values('02'
，
‘数学
insert into Course values('03'
，
43
英语
，
（0
44
45
=
教师表测试数据
46
insert into Teacher values(*@1*
，
李四）;
张三'）;
47
insert into Teacher values(*02*
insert into Teacher values(*03*
，
48
，
玉五）；
49
50
成绩表测试数据
51
insert into Score values('o1', *θ1*
, 80) ;
52
insert into Score values(*1',*02"
，90);
53
insert into Score values(*01'
，'03
(66*
54
insert into Score values(*02'
，
'01'
， 78) ;
55
insert into Score values(*02'
，
'02'
，
68) ;
56
nsert into Score values(′02'
0.
, 80) ;
57
insert into Score values(*03'
, 80) ;
58
insert into Score values(03', *02"
, 80) ;
59
insert into Score values(*03'
, 80) ;
insert into Score values(*04', *θ1*
, 50);
http://liyangbit.com
---
## Page 6
Chapter1.超经典MySQL练习50题
Python数据之道
61
nsert into Score values(′04',*θ2", 38);
62
insert into Score values(*04',*03, 20);
63
insert into Score values(*05', *θ1*, 76);
64
insert into Score values(*05', *02"
,87) ;
65
insert into Score values(*06',*01′ , 31);
66
insert into Score values(*06', *03"
，34);
67
insert into Score values(*07',*02" , 89);
68
nsert into Score values(07',*θ3", 98);
1.2题目1
1.2.1题目要求
查询“01课程比“02”课程成绩高的学生的信息及课程分数
1.2.2SQL实现
方法1
2
select
3 , *
,b.s_score as l_score
5
,c.s_score as 2_score
6
from Student a
join Score b on a.s_id = b.s_id
and b.c_id = '01'
两个表通过学号连接，指
定01
left join Score c on a.s_1d = c.s_id and c.c_id=*@2* or c.c_id 1s NuLL -- 指度
02，或者c中的c_id直接不存在
6
为NULL的条件可以不存在，
因为左连接中会直接排除C表中不存在的数据。包含NULL
10
where b.s_score > c.s_score;
判断条件
11
12
13
方法2：直接使用where语句
14
select
15
3 , *
16
,b.s_score as l_score
17
,c.s_score as 2_score
18
from Student a, Score b, Score c
19
where a.s_id=b.s_id
列出全部的条件
20
and a.s_id=c.s_id
21
and b.c_id=*01*
2.2.
and c.c_id=*02*
2.3
and b.s_score > c.s_score;
=-前者成顷高
http:/liyangbit.com
---
## Page 7
Chapter1.超经典MySQL练习50题
Python数据之道
mysql> select
->a. *
->,b.s_score as 1_score
,c.s_score as 2_score
->fron Student a
-> join 5core b on a.5_id = b.s_1d and b.c_id = *θ1'
两个表
通过学号连接，指定81
-> left join Score c on a.s_id = c.s_id and c.c_id='θ2’ or c.c_id
NULL--指定θ2，或者c中的c_id直接不存在
->--为NULL的条件可以不存在，因为左连接中会直接排除c表中不存在的
数据，包含NULL
->where b.s_score > c.s_score;
判断条件
s_id 1s_name |s_birth
1s_sex11_score 12_score1
781
-+-·.
钱电
|1996-12-21
+
109
白
李云
11990-08-06
5θ1
481
in
set
(0.00 sec)
第二种方法实现：
mysql> select
-> a. *
->,b.s_score as 1_score
>
,c.s_score as 2_score
方法2
>
from Student a,Score b,
Score
-> where a.s_id=b.s_id
列出全部的条件
p"s'=p"se pue  and b.c_id=*01'
-> and c.c_id='02'
-> and b.s_score >c.s_score;
"-前者成绩高
--+-·..
5_id | s_name
1s_birth
1s_sex |1_score |2_score |
2
|钱电
11990-12-21|
761
601
θ4
李云
11990-08-061男
501
401
rows in set (0.θ1 sec)
http://liyangbit.com
---
## Page 8
Chapter1.超经典MySQL练习50题
Python数据之道
[mysql>
select
from
Score:
id
5
score
01
01
80
01
02
90
01
03
96
02
01
70
02
02
60
θ2
03
80
03
01
结
香
丁80
03
02
81
03
03
85
04
01
50
04
02
40
04
03
30
05
01
76
05
02
87
06
01
43
06
03
56
07
θ2
89
07
03
94
1.3题目2
1.3.1题目要求
查询"01课程比"02"课程成绩低的学生的信息及课程分数（题目1是成绩高）
http:/liyangbit.com
---
## Page 9
Chapter1.超经典MySQL练习50题
Python数据之道
1.3.2SQL实现
类比题目1的实现过程
方法1：通过连接方式实现
select
3, t
,b.s_score as l_score
,c.s_score as 2_score
fron Student a
left join Score b on a.s_id=b.s_id and b.c_id='o1' or b.c_id=NULL
--包含NULL
的数据
join score c on a.s_id=c.s_id and c.c_id='02'
where b.s_score = 60;
7
12.
=-附加题：总分超过200分的同学
select
http://liyangbit.com
---
## Page 10
Chapter1.超经典MySQL练习50题
Python数据之道
14
b.s_id
15
,b.s_nane
16
, round(sum(a-s_score),2) as sum_score
17
=sum 求和
fron Student b
18
join Score a
19
on b.s_id=a.s_id
20
group by b.s_id
21
having sum_score > 200;
mysql> select b.s_1d,b.s_nane
round(avg(a.s_score),2) as avg_score
>
from 5tudent b
-> jo1n Score a
-> on b.s_id=a.s_id
-> group by b.s_id
-> having avg_score > 60
5_id I s_name 1 avg_score 1
赵雷
88.671
82
钱电
76.001
θ3
孙风
82.001
05
周梅
81.50 1
07
郑竹
91.50 1
附加题：总分超过200分的同学
mysql> select
>b.s_id
->，b.s_name
>,round(sun(a.s_score).2) as sum_score
sum求和
->from Student b
->join Score a
-> on b.s_id=a.s_id
->group by b.s_id
-> having sun_score >200;
5_id 1 s_name
sum_score
01
赵雷
266.001
@2
1钱电
210.001
θ3
1孙风
246.001
rows 1n set (0.00 sec)
http://liyangbit.com
10
---