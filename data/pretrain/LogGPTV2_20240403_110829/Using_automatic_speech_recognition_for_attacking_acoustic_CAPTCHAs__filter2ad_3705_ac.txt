where S, B, and N denote the start symbol, a digit block
and a noise segment, respectively. The symbol D represents
the individual digits as deﬁned by Eq. 10 and [D] speciﬁes
an optional digit.
We solved 10,864 CAPTCHAs in total, receiving a cor-
rect response from the website for 6,827 attempts, which
corresponds to an average success rate of 62.8 %.
Comparing this result with the success rate of 19 % for the
older version of reCAPTCHA (cf. 3) we can see that the cur-
rent scheme appears to be easier to for the ASR system. We
assume that this is due to the fact that the current version of
reCAPTCHA uses synthetic speech rather than real speech
recordings as well as a relatively simple background noise
signal3.
Usability Revisited.
After the attack, we possess a reference transcription for
6,827 CAPTCHA signals, which enables us to assess the
human recognition scores for the reCAPTCHA scheme. We
have conducted a subsequent listening experiment, involving
10 participants, where each participant was asked to provide
a transcription for 50 randomly chosen CAPTCHAs. Again,
the participants were briefed that they were to take part in
a scientiﬁc study. With the help of this second listening
test, we have collected the human recognition scores for 500
3The diﬀerence in the complexity of the background noise
signals is clearly noticeable when comparing Fig. 1 and 2.
Table 3: Human recognition scores in percent for reCAPT-
CHA 2014. The scores are based on the listening test results
of 500 diﬀerent CAPTCHAs (sentences), corresponding to
5,140 digits (words).
Sent Acc. Word Acc.
Mean
Std. dev.
24.40
17.35
84.69
6.55
diﬀerent CAPTCHA signals. Table 3 depicts the human
recognition scores for the current reCAPTCHA scheme.
We can see from Tab. 3 that the mean sentence accuracy is
quite low at only 24.40 %, rendering the intelligibility of the
CAPTCHA fairly questionable. The word accuracy is given
by 84.69 %, which represents an acceptable score regarding
the intelligibility of individual digits.
5. PERCEPTUALLY MOTIVATED DESIGN
In order to render the training of an automated CAPT-
CHA solver more diﬃcult, it is beneﬁcial to introduce as
much variability into the speech signals as possible. In prin-
ciple, this can be achieved by expanding the lexicon, i.e., by
using a higher number of words for the CAPTCHA. Fur-
ther, it is advantageous to introduce several speakers into
the signals that exhibit diﬀerent speaking characteristics like
fundamental frequency, speaking rate and, particularly, di-
alect. Thus increasing the complexity of the speech signal
will typically compel an attacker to acquire more labeled
CAPTCHA signals for training a robust automated solver.
Another important design aspect is to prevent certain at-
tack strategies. Segmentation-based attacks (cf. [3, 26]) for
instance can be hindered or even prevented when designing a
CAPTCHA by ﬁlling the speech pauses with supplementary
signals that have roughly the same energy as the speech,
but do not carry any semantic information. This procedure
can also confuse the attacking system, especially when the
supplementary signals exhibit similar spectral characteris-
tics as the speech signal itself. Suitable signal types are, for
instance, speech shaped noise or multi-talker babble noise.
5.1 Exploiting Auditory Perception
There is a variety of complex acoustic scenarios that hu-
mans with normal hearing can easily cope with, whereas
they represent a challenging task for ASR. One major prob-
lem for ASR is the simultaneous occurrence of multiple sound
sources that overlap both in time and in frequency. How-
ever, the human auditory system possesses the ability of
isolating acoustic streams from a mixture of sound events,
which is known in the literature as the phenomenon of au-
ditory streaming [2, 9]. Hence, for designing robust acoustic
CAPTCHAs, we can attempt to exploit the human ability
of sound separation while creating a more challenging ASR
task. We can construct the audio signal such that the in-
dividual words are somewhat superimposed on each other.
This renders word isolation in time virtually impossible as
there is no separation between adjacent words. Of course,
the superposition of words has to be done in a way that
allows a human listener to identify the designated order of
words. Thus, there has to be a certain time delay between
the beginning of two adjacent words.
Another diﬃculty for ASR is the recognition of speech
in the presence of reverberation, as this causes a tempo-
ral smearing or dispersion of the audio signal. Despite this
temporal smearing, speech intelligibility in reverberant en-
vironments remains relatively high for human listeners [28].
Based on these insights, we generate CAPTCHAs by ex-
ploiting both of the above mentioned concepts, i.e., auditory
streaming and reverberation, as discussed in the following.
5.2 Generation of Signals
In order to produce CAPTCHAs that are comparable to
the reCAPTCHA schemes, we also restrict the underlying
vocabulary to digits between zero and nine. For signal gener-
ation, we use the TIDIGITS speech corpus [17] which origi-
nally consists of 326 diﬀerent speakers (111 men, 114 women,
50 boys and 51 girls) each pronouncing 77 digit sequences.
Here, we created a subset of the corpus by incorporating
only the single-digit recordings of 25 male and 25 female
speakers, yielding a total number of 1000 individual digits
that represent the signal repository for our CAPTCHA gen-
eration approach.
Creation of Digit Blocks.
Random digit signals are chosen from the database, alter-
nating male and female speakers. The signals are concate-
nated in time such that two consecutive digits are superim-
posed to some extent and we refer to the outcome as a digit
block in the following. The number of digit blocks is varied
between 4 and 5, which results in a maximum number of 8
and 10 digits per CAPTCHA, respectively. At ﬁrst, all digit
blocks are separated by a silence segment with its length cho-
sen randomly and uniformly from the interval [0.75 s, 2.5 s].
The superposition of signals is based on the short-time root
mean square (RMS) power of the isolated digit sequences
and is controlled by a small set of parameters. As a ﬁrst
step, the RMS power of the k-th digit signal xk(t) is com-
puted in a frame-wise manner:
pk(m) = 10 log10
vuut
1
L
L−1
X
i=0
xk(mR + i)2
 .
(12)
In order to perform signal concatenation, we derive an indi-
vidual pivot element for each RMS power curve by searching
for the location of the maximum:
ˆmk = arg max
(pk(m)) .
(13)
m
Next, we determine two power minima that enclose ˆmk and
lie within a certain power range. To achieve this, we ﬁrst
compute a power ﬂoor for each digit:
ˇpk = ˆpk − βpk(m),
(14)
where ˆpk represents the value of the power maximum that
is:
ˆpk = pk( ˆmk),
(15)
with β as a threshold constant and pk(m) denoting the sam-
ple mean of pk(m). The location of the power minimum on
the left hand side of ˆmk is then given by:
ˇmL
k = arg min
0... ˆmk
(|pk(m) − ˇpk|)
(16)
and the location of the power minimum on the right hand
side of ˆmk reads:
ˇmR
k = arg min
ˆmk...M
(|pk(m) − ˇpk|) ,
(17)
where M is the number of available frames. Using these
maximum and minimum values, we compute two anchor
points for each digit. The left anchor point of the k-th digit
is midway between ˆmk and ˇmL
k :
´mk =
ˆmk − ˇmL
k
2
+ ˇmL
k
(18)
and the right anchor point of the k-th digit is centered be-
tween ˆmk and ˇmR
k :
`mk =
ˇmR
k − ˆmk
2
+ ˆmk.
(19)
A digit block is then created by aligning two digits at their
respective left and right anchor points. Therefore, we super-
impose two consecutive digit signals in time such that:
´m2l
!
= `m2l+1 ∀ l = 0, 1, 2, . . .
(20)
is fulﬁlled and we denote the signal that contains all digit
blocks by y(t). Figure 3 shows an example of the block
creation method by means of the RMS power curves for two
consecutive digits.
(a) 1st digit
(b) 2nd digit
30
20
10
)
m
(
1
p
30
20
10
)
m
(
2
p
0
0
10
20
30
0
0
m
ˆmk
10
20
30
m
ˇmR
k
ˇmL
k
`mk
´mk
(c) Digit block
40
30
20
10
)
m
(
2
1
p
0
0
5
10
15
20
25
30
35
40
45
m
Figure 3: Example of the block creation method. (a) shows
the short-time RMS power of the ﬁrst digit and (b) shows
the short-time RMS power of the second digit. The short-
time RMS power of the digit block that results from signal
concatenation is shown in (c).
Incorporating Background Noise.
After creating the sequence of digits blocks y(t), all silent
parts within the signal are superimposed by multi-talker
babble noise from the NOISEX-92 database [27]. The NOI-
SEX babble noise is 235 s long and we extract random noise
segments of suitable length for creating the noise parts of
the CAPTCHA. The noise segments are scaled such that
the RMS power curve of y(t) exhibits no conspicuous peaks
and remains fairly stationary. We denote the noisy wave-
form of digit blocks by y′(t).
It should be stressed at this point that the utilized cor-
pora, i.e., TIDIGITS and NOISEX, were chosen for conve-
nience to provide a proof of concept. We are aware of the
fact that the data is not suitable for a practical application
of the CAPTCHA as these corpora are publicly available,
which would facilitate the training of automated CAPTCHA
solvers.
Reverberating Signals.
The ﬁnal CAPTCHA signal z(t) is obtained by a convo-
lution of the noisy digit sequence y′(t) with an artiﬁcially
generated room impulse response w(t)e−t/τ :
Table 4: Inter-labeler agreement in percent for the proposed
CAPTCHA. The results are shown for the individual digit
block transcriptions and for the full transcription (i.e., an
agreement on all blocks). The scores are based on the lis-
tening test results of 200 diﬀerent CAPTCHAs for each re-
verberation time.
# Agreements
1 (No)
2
3
4 (All)
Block transcription
Full transcription
10.43
19.50
11.26
28.00
24.69
34.00
53.63
18.50
(a) T60 = 100 ms
# Agreements
1 (No)
2
3
4 (All)
z(t) = y′(t) ∗ (cid:16)w(t)e−t/τ(cid:17) ,
(21)
Block transcription
Full transcription
9.55
57.50
31.42
29.00
58.67
13.50
0.37
0.00
(b) T60 = 300 ms
where w(t) represents white Gaussian noise with zero mean
and unit variance and τ is a predeﬁned decay time.
For creating CAPTCHA signals, two diﬀerent reverbera-
tion times are compared. A common way for characterizing
reverberation is the time constant T60, which is the time
it takes for the room impulse response power to drop by
60 dB. We create CAPTCHA signals for T60 = 100 ms and
for T60 = 300 ms and compare the human performance as
well as the robustness against ASR-based attacks in Sec. 5.3
and Sec. 5.4, respectively. The spectrogram of the CAPT-
CHA is shown in Fig. 4 for a reverberation time of 100 ms.
]
z
H
k
[
y
c
n
e
u
q
e
r
F
4
3
2