### 五、整数溢出攻击
下面我们讲述一下利用区块链合约中的系统漏洞导致的攻击行为。
事件回顾：
    4月25日早间，火币Pro公告，SMT项目方反馈今日凌晨发现其交易存在异常问题。该漏洞代理的直接经济损失高达上亿元人民币，间接产生的负面影响目前无法估量。
而这个漏洞取源于整数溢出问题。
我们来看一个例子：
    pragma solidity ^0.4.10;
    ​
    /**
    这是一个测试整数类型上溢和下溢的例子
    */
    contract Test{
    ​
      // 整数上溢
      //如果uint8 类型的变量达到了它的最大值(255)，如果在加上一个大于0的值便会变成0
      function test() returns(uint8){
        uint8 a = 255;
        uint8 b = 1;
    ​
        return a+b;// return 0
      }
    ​
      //整数下溢
      //如果uint8 类型的变量达到了它的最小值(0)，如果在减去一个小于0的值便会变成255
      function test() returns(uint8){
        uint8 a = 0;
        uint8 b = 1;
    ​
        return a-b;// return 255
      }
    }
而根据上面的内容，我们知道这中漏洞就是由于检测不严格而导致的，这也会在现实的协议中产生致命的危害。
而在曾经出现过严重问题的SMT合约中，整数溢出问题就给了其一个大的教训。
比如在源码transferProxy()代码中：
    function transferProxy(address _from, address _to, uint256 _value, uint256 _feeSmt,
            uint8 _v,bytes32 _r, bytes32 _s) public transferAllowed(_from) returns (bool){
    ​
            if(balances[_from] 
  * 3 
  * 4 
**本稿为原创稿件，转载请标明出处。谢谢。**