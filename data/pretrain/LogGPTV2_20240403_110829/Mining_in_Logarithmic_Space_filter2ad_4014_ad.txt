21:
return Π
22:
23: end function
end if
return Π
end if
𝜇 ← min 𝑀
𝑏 ← (D[𝜇] ∩ D′[𝜇])[−1]
if |D′[𝜇]{𝑏:}| > |D[𝜇]{𝑏:}| then
if ℓ′ > ℓ then
return Π′
return Π′
Let us now study the security-critical portion of our protocol,
namely how the verifier compares two different proofs Π and Π′.
Given two proofs Π and Π′, the algorithm must decide which one
is best or captures the most proof of work. In other words, it must
conceptually correspond to the longest underlying chain, or the un-
derlying chain with the most work. The comparison algorithm is
illustrated in Algorithm 3. The comparison is performed as follows.
Initially, the two proofs Π and Π′ are verified for syntactic valid-
ity: That Π begins with G, it is a chain, and that 𝜒 contains valid
transactions extending the application data snapshot contained in
𝜒[0]. The comparison continues by invoking the Dissolve𝑚,𝑘(Π)
function of Algorithm 2 on each of Π and Π′. As before, this func-
tion extracts the maximum level ℓ containing at least 2𝑚 blocks.
Then it picks the required blocks from each level, with at least 2𝑚
blocks per level, but also a sufficient number of blocks per level
to span the last 𝑚 blocks in the level above. Contrary to the in-
vocation in Algorithm 2, we are not passing the full chain to the
function; instead, we are passing a chain which has already un-
dergone compression. As such, if the compressed state was hon-
estly generated, the triplet (𝜒, ℓ, D) on the verifier end will be the
same as the triplet on the prover end, because compress𝑚,𝑘(C) =
compress𝑚,𝑘(compress𝑚,𝑘(C)) (but may be something else in case
of adversarial proofs).
Session 12D: Decentralized Cryptographic ProtocolsCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3493Only once the two proofs are stratified into levels D, the com-
parison algorithm attempts to choose a level 𝜇 at which the com-
parison will be performed. This level is the minimum level 𝜇 for
which both provers have provided blocks (note that it is not suffi-
cient that both provers have provided the same block at the same
level; it must also have been selected in the same index of D). In
the edge case that no such level can be found, the prover with the
higher ℓ wins (if no such level is found and they share the same
level, it is irrelevant which prover will win). In the normal case
that a level is found, then the comparison takes place by taking
account only blocks of that level. The comparison begins by find-
ing the most recent block shared by the two parties at that level,
(D[𝜇] ∩ D′[𝜇])[−1]. We call this the lowest common ancestor 𝑏.
The blocks of the selected level following block 𝑏 (which must nec-
essarily be disjoint by the definition of 𝑏) are then counted, and the
party with the most blocks wins.
Let us give a high-level intuition of why this protocol chooses
the longest chain. The key idea is that, in addition to the Common
Prefix property holding for regular blocks, this property also holds
for 𝜇-superblocks at any level. More precisely, if there is a forking
point 𝑏, the adversary could not have produced more than 𝑚 su-
perblocks of level 𝜇 faster than the honest parties can produce 𝑚
superblocks of level 𝜇. This property stands at the heart of the fol-
lowing theorem.
Theorem 4.1 (Security). When the honest verifier of Algorithm 3
receives a proof Π constructed by an honest party using Algorithm 2
and a proof Π′ constructed by the adversary, it will decide in favour
of the honest proof, unless the adversary is playing honestly and Π′
was generated according to protocol.
Sketch. First, consider the case that 𝑀 ≠ ∅. If the comparison
is performed at level 𝜇 = 0, this is akin to comparing traditional
chains and the theorem holds due to the Common Prefix property.
If the comparison is performed at a level 𝜇 > 0, then we apply
the extended Common Prefix property at level 𝜇. By the minimal-
ity of 𝜇, there will be at least 𝑚 blocks of the appropriate level
following 𝑏 and so the honest parties will win.
Lastly, if 𝑀 = ∅, then we can apply the extended Common Prefix
property at the highest level ℓ achieved by the honest party. By
construction, the honest party holds at least 2𝑚 blocks at this level.
Because the adversary must have achieved a better ℓ′ > ℓ to win,
she must also have at least 2𝑚 blocks of a higher level, but these
are also of level ℓ. But this contradicts the extended Common Prefix
property, giving us the desired result.
□
While this gives some intuition about why the protocol is de-
signed the way it is, the core security argument pertains to argu-
ing why the extended Common Prefix property holds. We formally
prove this statement in the Analysis section for 1/3 adversaries,
where we also make the security theorem more precise.
5 MINING NEW BLOCKS
So far, we have used full nodes to help bootstrap newly booting
miners. Can light miners be used to bootstrap newly booting min-
ers instead? If we can achieve this, then we might as well get rid
of full nodes altogether.
Our light miner already holds a valid proof Π = 𝜋 𝜒 correspond-
ing to an underlying honest full node chain C at the time it is boot-
strapped by others. Before further blocks are mined on the net-
work (either by itself, or by others), it can send this Π to newly
booting miners, and they, too, will be convinced of the current
application data snapshot. The question is how to update this Π
when a new block is mined. Suppose a new block 𝑏 is mined on
top of C, either by our light miner or by someone else. The un-
derlying honest chain then becomes C′
= C𝑏. Can we produce a
proof Π′ corresponding to C′ by only utilizing Π? More specifi-
cally, given Π = Compress𝑚,𝑘(C) and 𝑏, but not given C, can we
produce Π′
= Compress𝑚,𝑘(C𝑏)? Indeed we can. In fact, it is as
simple as evaluating C′
= Compress𝑚,𝑘(Π𝑏).
Theorem 5.1 (Online). Consider Π = Compress𝑚,𝑘(C) gener-
ated about an underlying honest chain C, and a block 𝑏 mined on
top of C. Then Compress𝑚,𝑘(C𝑏) = Compress𝑚,𝑘(Π𝑏).
Proof. Consider which blocks are sampled and which blocks
are pruned by Compress𝑚,𝑘(C𝑏). Clearly the block 𝑏 will be in-
cluded in both Compress𝑚,𝑘(C𝑏) and Compress𝑚,𝑘(Π𝑏). All the
other blocks selected by Compress𝑚,𝑘(C𝑏) will already exist in Π,
and in the correct positions. This is because the blocks selected
from a level are the last 2𝑚 of a level, or the last 𝑚 spanning the
level above, and adding block 𝑏 at the end can only render a previ-
ously sampled block irrelevant, but not add further block require-
ments from the past.
□
Note also that, when mining a new block 𝑏, all the data required
to compute the interlink pointers of 𝑏 are readily available in 𝜋 𝜒,
as 𝜋 contains the most recent 2𝑚 blocks of every level, and only
the most recent one is needed for interlinking (c.f., Algorithm 1).
Our final light miner therefore works as follows. It maintains a
current proof Π = 𝜋 𝜒 and mines using 𝜒[−1] as the chain tip. If
it is successful in mining 𝑏 on top of 𝜒, it replaces Π by setting it
to Π′
= Compress𝑚,𝑘(Π𝑏) and broadcasts this to the network. As
all of the other online miners, light or full, will hold their own 𝜒∗
not differing more than 𝑘 blocks from 𝜒, it is, in fact, sufficient that
it broadcasts the new 𝜒′
= 𝜒[1:]𝑏 portion of Π′. Now the newly
computed Π corresponds to the chain C𝑏, which the miner never
sees, as it has been pruned. Regardless, Π can be used to bootstrap
new light miners from genesis.
Consider now the case that our light miner holds a Π = 𝜋 𝜒
and a different miner mines a new block 𝑏. By the Common Pre-
fix property, this block will not deviate more than 𝑘 blocks from
the 𝜒 that our light miner already holds. Typically, it will be just a
block on top of 𝜒, but occassionally it could correspond to a chain
reorganization up to 𝑘 blocks long. In the case of a reorganization,
the light miner requests the last 𝑘 blocks 𝜒′ on top of which 𝑏 was
mined. These can be provided to us if the block 𝑏 was mined by a
light or a full miner, as both hold and can send 𝜒′. The blocks in
𝜒′ will intersect the previously known 𝜒 at some fork point. The
light miner checks that the transactions included in this 𝜒′ can be
applied to the application data snapshot that the light miner has
independently calculated for the fork point. This amounts to full
block validation. The light miner also checks that the newly mined
block really does correspond to a longer chain and that a reorga-
nization is warranted by ensuring that there are more blocks in
Session 12D: Decentralized Cryptographic ProtocolsCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3494𝜒′ after the fork point 𝑏 than there are in 𝜒 after the fork point
(i.e., that |𝜒′{𝑏:}| > |𝜒{𝑏:}|). It then replaces the stored proof by
setting Π to be the proof corresponding to 𝜋 𝜒 when the portion
of 𝜒 after the most recent common block between 𝜒 and 𝜒′ is re-
placed by the blocks in 𝜒′, i.e., it updates its stored proof to be
Π′
= Compress𝑚,𝑘(𝜋 𝜒{:𝑏}𝜒′{𝑏:}).
We note here that, for consensus purposes, the value 𝑘 has to be
large to ensure negligible probability of failure, and this pertains
to the value adopted by light miners. However, for transaction ver-
ification purposes, the value 𝑘 can be tuned to represent the risk
of the transaction to be validated; for example a small value of
𝑘 = 6, as is customary in Bitcoin, can be adopted. This means that,
while the light miner must indeed keep a 𝜒 with a somewhat larger
length (say, 𝑘 = 128) to ensure that consensus does not break down,
a transaction towards the end and burried under just 𝑘 = 6 blocks
can be considered confirmed for all practical purposes. The value
of 𝑘 used for consensus synchronization and for transaction verifi-
cation can be different and specified by the user.
end for
Π ← maxvalid𝑚,𝑘(Π′, Π)
Π ← Compress𝑚,𝑘(Π𝑏)
broadcast(Π)
Algorithm 4 The final logspace miner.
1: Π ← ∅
2: function Init𝑚,𝑘(Π)
for Π′ ∈ Π do
3:
4:
5:
6: end function
7: function Mine𝑚,𝑘(x)
𝑏 ← pow(Π[−1], 𝑥)
8:
if 𝑏 ≠ 𝜖 then
9:
10:
11:
12:
13: end function
14: upon BootstrapReqest do
15:
16: end upon
17: upon NewBlockReceived(𝜒′) do
18:
19:
20:
21:
22:
23:
24:
25:
26:
end if
27:
28: end upon
𝜒 ← Π[−𝑘:]
𝜋 ← Π[: − 𝑘]
if 𝜒′ is a chain ∧ 𝜒′[0] ∈ 𝜒 then
𝑏 ← (𝜒 ∩ 𝜒′)[−1]
if |𝜒′{𝑏:}| > |𝜒{𝑏:}| then
end if
return Π
Validate 𝜒′ state transitions starting from 𝑏
Π ← Compress𝑚,𝑘(𝜋 𝜒{:𝑏}𝜒′{𝑏:})
broadcast(Π)
end if
The light miner is illustrated in Algorithm 4. The miner boot-
straps in the Init algorithm by looking at candidate states Π pro-
vided by the network and extracting the best. This is stored in the
logarithmic state variable Π. The miner mines using the Mine al-
gorithm which takes an application state 𝑥 and attempts to mine a
new block including this state on top of the current proof Π. Here,
we assume that 𝑥 has already been checked for validity, and that
it contains the appropriately computed snapshot after the state
transitions mandated by the included transactions have been ap-
plied. The actual mining is done by calling the function pow which
attempts to find a nonce that solves the proof-of-work equation.
If it does (𝑏 ≠ 𝜖, with 𝜖 indicating failure), it returns the new
block 𝑏. The miner updates its state to be the new state Π ←
Compress𝑚,𝑘(Π𝑏) and broadcasts it to the network. This is also
sent to new bootstrapping nodes when requested (BootstrapRequest).
When a light miner receives a newly mined block in NewBlockRe-
ceived, only the 𝜒 portion of the newly discovered proof Π is neces-
sary. This is compared against the local 𝜒 and the state is updated
if the received proof is better.
At this point, full nodes are no longer necessary. Light min-
ers can bootstrap from genesis. They have all the data needed to
mine on their own, and to validate newly mined blocks from the
network. If a newly booting light miner wishes to synchronize
with the network, they have sufficient data to help them do so.
The blockchain protocol remains exactly the same as in traditional
blockchains, but all the instances of chains are replaced by proofs
instead. Light miners mine on top of their current proof instead of
mining on top of a chain. When they discover a new block, they
send the newly computed proof instead of a chain. This concludes
our construction.
6 ANALYSIS
For our analysis, we work in the Backbone model [21] and adopt
an environment where the network is synchronous and the proto-
col is executed in distinct rounds. We give a short overview of the
model. Let 𝜅 denote the security parameter, and 𝑛 denote the to-
tal number of parties, 𝑡 of which are adversarial. Block generation
takes place, by honest and adversarial parties alike, by invoking a