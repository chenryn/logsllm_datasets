and M (cid:2)
was not queried for signature at period t(cid:2).
F’s advantage AdvFS(F) is her probability of victory taken
over all coin tosses. We say that she (t, qs, qu, ε)-breaks the
scheme if she has advantage ε within running in time t after
qs signing queries and qu update queries.
The second security notion, termed update security, cap-
tures the security against an adversary obtaining encrypted
signing keys for all periods but not the second factor decryp-
tion key. It mirrors the fact that, at any time, the encrypted
key EncSK is by itself useless to generate signatures.
Definition 2. The update security property is the neg-
ligible advantage of a PPT adversary in this game.
1. The challenger performs the key generation and gives
the public key PK and the initial encrypted key EncSKt
for period t = 0 to F. The second factor decryption
key DecK is held back from F.
2. F adaptively interacts with the following oracles.
· Sign : at any time, the forger can ask for a sig-
nature on an arbitrary message M for the current
time period t.
· Update : once she decides to move forward in
time, the adversary queries the challenger that
runs the update algorithm and increments the pe-
riod number t.
3. F outputs a message M (cid:2) and a signature σ(cid:2) for some
period t(cid:2). She wins if M (cid:2) was not queried for signature
at period t(cid:2) and Verify(t(cid:2), T, PK, M (cid:2), σ(cid:2)) = 1.
F’s advantage AdvUS(F) is deﬁned as in deﬁnition 1.
3. ACHIEVING UNTRUSTED UPDATES IN
ANY FORWARD-SECURE SIGNATURE
In the implementation proposed in [12], the second factor
DecK is not taken as input by the key generation algorithm
but is uniformly chosen by the latter in a set which is as
large as the private key space. It is assumed to be in turn
encrypted using a password that has suﬃcient entropy to
prevent oﬄine dictionary attacks. Hence, this second factor
can also be the random seed used to generate a key pair
for an ordinary signature scheme. It follows that a forward-
secure signature ΠFS = (KeygenFS, UpdateFS, SignFS, VerifyFS)
can always be endowed with a second factor protection by
combining them with a regular (i.e. non-forward-secure)
digital signature Θ = (K,S,V). The public key PK of the
FSS-UU scheme thus includes the public key PKFS of ΠFS
as well as the public key pk of Θ. At any period, the “en-
crypted” signing key EncSKt is the private key SKt of ΠFS
while the second factor DecSK is the seed used to gener-
ate (sk, pk). A signature on a message M is then given
by the concatenation σ = (cid:4)SignFS(M, t, SKt),Ssk(t||M )(cid:5) of
both signatures. Veriﬁcation is obviously achieved by run-
ning both veriﬁcation algorithms.
The security of the FSS-UU scheme in the sense of deﬁni-
tion 1 directly follows from the forward security of ΠFS while
the update security, according to deﬁnition 2, is easily seen
to rely on the unforgeability of Θ against chosen-message
attacks [19].
We note that the construction is similar to another one
used in [16] in a related context to obtain strongly key-
insulated signatures. Combined with known results [4, 28],
it shows - not so surprisingly - the existence of forward-
secure signatures with untrusted updates and at most log-
arithmic complexity if digital signatures exist at all, which
amounts to assuming that one-way functions exist [33].
Although clearly not optimal from an eﬃciency point of
view, this method provides a fairly practical realization of
untrusted updates in the Itkis-Reyzin forward-secure signa-
ture [22] at the expense of almost doubling the signature
length. Recall that the latter scheme uses the Guillou-
Quisquater [20] signature with a diﬀerent prime exponent
(that is part of the signature) for each time period. Un-
trusted updates can be achieved by including an indepen-
dent prime GQ exponent e as well as a power I = DecKe mod
N in the public key (the same RSA modulus N being used
in both schemes after the erasure of its prime factors). A
signature then includes an Itkis-Reyzin signature as well
as a proof of knowledge of DecK, a single Fiat-Shamir-like
[18] hash value acting as a challenge in both non-interactive
proofs in order to decrease the signature length.
4. EFFICIENT GENERIC CONSTRUCTIONS
FROM 2-PARTY SIGNATURES
In this section, we construct a FSS-UU scheme from two-
party multi-signatures [21] by extending the generic forward-
secure signatures of Malkin, Micciancio and Miner [28].
Formally, a 2-party multi-signature scheme consists of a
4-uple 2MS = (PGMS, KgMS, SignMS, VerifyMS) of algorithms.
Among these, PGMS is a common parameter generation al-
gorithm run by a central authority; KgMS is a user key gener-
ation algorithm independently run by each signer; SignMS is
a possibly interactive algorithm jointly run by both parties
(each of which taking his private key and the peer party’s
public key in addition to the message and public param-
eters) to sign a message while VerifyMS is the veriﬁcation
algorithm allowing for the veriﬁcation of a signature w.r.t.
both parties’ public keys. We emphasize that 2-party multi-
signatures are a more general primitive than 2-party sequen-
tial multi-signatures deﬁned in [17] in that the signing pro-
cess is not necessarily non-interactive or sequential.
For the applications that we have in mind, we do not need
a multi-signature scheme with a complex key generation pro-
tocol such as the one of [30]. Actually, the ﬁrst generic com-
position (termed ‘sum composition’ in [28]) does not even
require to consider a strong model as in [7]. With this ﬁrst
composition, we can settle for schemes that are secure in
the registered public key model as deﬁned in [9, 27]. In the
latter, the adversary is challenged on a single public key be-
longing to a honest signer and attempts to frame the latter
and wrongly accuse him of having jointly signed a message
with corrupt users. The attacker is allowed to generate her-
self public keys for corrupt signers. The registered public
key model deals with rogue key attacks by requiring the ad-
versary to reveal the matching private keys when registering
public keys that she creates for herself.
The second composition, called ‘product composition’ in
[28], is more diﬃcult to adapt in the present context and
its extension does not appear to work in a fully generic and
black box fashion. Nevertheless, we show that it can be
applied if one of its component is a FSS-UU scheme ob-
tained by means of the sum composition applied to a bipar-
tite multi-signature in the plain public key model of Bellare
and Neven [7].
4.1 The Sum Composition
The sum composition of [28] is extended so as to provide
a FSS-UU scheme with 2T periods from two such schemes
having each T periods. When iterated log T times, it turns
a 2-party multi-signature (seen as FSS-UU with a single pe-
riod) into a forward-secure signature with untrusted updates
over T = 2τ periods that will be dubbed FSS-UU
here.
⊕
The idea of the generic construction is to use two FSS-UU
schemes Σ0 = (Keygen0, CheckKey0, Update0, Sign0, Verify0)
and Σ1 = (Keygen1, CheckKey1, Update1, Sign1, Verify1) that
are both implemented with the same second factor decryp-
tion key DecK used as a global variable by algorithms Sign0
and Sign1. When the construction is applied log T times to
obtain T periods, the second factor DecK is chosen once-and-
for-all at the highest level setup and used as second factor in
both Σ0 and Σ1. When combined FSS-UU schemes Σ0 and
Σ1 have only one period (that is, 2-party multi-signatures
2MS0 and 2MS0), DecK is used as a random seed to gener-
ate the key pair ( ˜sk, ˜pk) ← KgMS(DecK) to be used as the
second party key in both 2MS0 and 2MS1.
4.1.1 Description
Our notations are close to the ones of [28] and we use
the same ingredients. Namely, G denotes a length-doubling
forward-secure pseudorandom generator1 (as originally sug-
gested in [25]) and H is a collision-resistant hash function.
Finally, ε and a||b respectively stand for the empty string
and the concatenation of two binary strings a and b. When
subscripted by binary indexes or not, r always denotes a
random seed. We assume that seeds r, r0, r1 and second fac-
tors DecK are random strings of equal length.
At a high level, this construction starts from a bipartite
multi-signature 2MS and recursively applies the sum com-
position technique of [28] to generate keys for only one of
the two parties. The second party’s key pair is remains un-
changed throughout all periods and is derived from a second
factor DecK chosen in the setup phase. This factor is kept as
a global variable in all recursive steps and only comes into
play for signing messages.
At the setup of the scheme, the key generation algorithm
is called with arguments including T = 2τ and pk(cid:2)
= ε. As
in [28], SKeygen and PKeygen denote algorithms carrying
out the same operations as Keygen but respectively erase
public and private outputs.
1A forward-secure PRG is one where seeds are periodically
refreshed and where the exposure of the seed at a given pe-
riod leaks no computable information about pseudorandom
sequences generated in past periods. Eﬃcient constructions
of such generators from regular PRGs exist [8].
/* initialization */
/* DecK is kept as a static global variable */
= ε and T > 1)
Keygen(λ, r, T, pk(cid:2)
)
If (pk(cid:2)
cp ← PGMS(λ);
(r, DecK) ← G(r);
( ˜sk, ˜pk) ← KgMS(DecK);
pk(cid:2) ← (cp, ˜pk);
endif
If (T = 1)
(sk, pk) ← KgMS(r);
Return(cid:2)
(cid:3)
;
EncSK = (cid:4)sk, 0, pk, ε(cid:5), PK = (pk(cid:2), H(pk, ε))
else
(r0, r1) ← G(r);
(EncSK0, PK0) ← Keygen0(λ, r0, T /2, pk(cid:2)
PK1 ← PKeygen1(λ, r1, T /2, pk(cid:2)
Parse PK0 as (pk(cid:2), pk0) and PK1 as (pk(cid:2), pk1);
PK ← (pk(cid:2), H(pk0, pk1));
endif
Return ((cid:4)EncSK0, r1, pk0, pk1(cid:5)
, PK);
(cid:7)
(cid:5)(cid:6)
);
);
(cid:4)
CheckKey
EncSK
(cid:5)
(cid:3)
(cid:2)
EncSK
t, T,
(cid:7)(cid:4)
(cid:2), r1, pk0, pk1(cid:5), PK
(cid:6)
(cid:4)EncSK
Parse PK as (pk(cid:2), h);
Output ⊥ if h (cid:7)= H(pk0, pk1);
Set PK0 = (pk(cid:2), pk0) and PK1 = (pk(cid:2), pk1);
If (T = 1)
(cid:2)
Let pk = pk0 and sk = EncSK
Return ⊥ if r1 (cid:7)= 0, pk1 (cid:7)= ε or (sk, pk)
is not a valid key pair for 2MS;
Return (cid:2);
;
endif
If (t < T /2)
return CheckKey0
else
(cid:2)
return CheckKey1
(cid:3)
(cid:2), PK0
t, T /2, EncSK
;
(cid:2)
t − T /2, T /2, EncSK
(cid:2), PK1
Sign
(cid:5)
(cid:3)
EncSK
t, T,
(cid:6)
(cid:4)EncSK
(cid:7)(cid:4)
(cid:2), r1, pk0, pk1(cid:5), DecK, M, PK
(cid:2)
At the initial stage of the recursion, set M ← M||t;
Parse PK as (pk(cid:2), h) and pk(cid:2)
Output ⊥ if h (cid:7)= H(pk0, pk1);
Set PK0 = (pk(cid:2), pk0) and PK1 = (pk(cid:2), pk1);
If (T = 1)
as (cp, ˜pk);
;
Let pk ← pk0 and sk ← EncSK
(cid:2)
Return ⊥ if r1 (cid:7)= 0, pk1 (cid:7)= ε or (sk, pk)
is not a valid key pair for 2MS;
( ˜sk, ˜pk) ← KGMS(DecK);
Return ⊥ if ˜pk diﬀers from the 2nd part of pk(cid:2)
Run SignMS on M on behalf of both parties
using sk, ˜sk and cp to generate σ(cid:2)
Return (cid:4)σ(cid:2), pk, ε(cid:5);
;
;
endif
If (t < T /2)
σ(cid:2) ← Sign0(t, T /2, EncSK
σ(cid:2) ← Sign1(t − T /2, T /2, EncSK
else
Return ((cid:4)σ(cid:2), pk0, pk1(cid:5)
, t)
(cid:7)
(cid:5)(cid:6)
(cid:4)
(cid:2), DecK, M, PK0)
(cid:2), DecK, M, PK1)
σ
Verify
σ
(cid:2)
(cid:7)(cid:4)
t, T, PK, M,
(cid:6)
(cid:5)
(cid:4)σ(cid:2), pk0, pk1(cid:5) (cid:3)
Parse PK as (pk(cid:2), h) and pk(cid:2)
Output ⊥ if h (cid:7)= H(pk0, pk1);
If (T = 1)
Return ⊥ if pk1 (cid:7)= ε;
Return VerifyMS(cp, pk0, ˜pk, M, σ(cid:2)
);
as (cp, ˜pk);
endif
Set PK0 = (pk(cid:2), pk0) and PK1 = (pk(cid:2), pk1);
If (t < T /2)
Return Verify0(t, T /2, PK0, M, σ(cid:2)
Return Verify1(t − T /2, T /2, PK1, M, σ(cid:2)