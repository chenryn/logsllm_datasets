# 【技术分享】正则表达式基础库源码审计与漏洞分析

## 译文声明
本文为翻译文章，原文来源：mp.weixin.qq.com。译文仅供参考，具体内容和含义以原文为准。
**作者：柳本金@360代码卫士**

## 前言
正则表达式是字符串处理的基本功能，它使用单个字符串来描述并匹配一系列符合特定句法规则的字符串。大多数编程语言都提供了正则表达式的功能，例如Perl、Python、Tcl、PHP等。这些语言通常依赖开源的正则表达式基础库来实现该功能。例如，glibc使用GRegex提供正则表达式功能，而glibc作为GNU发布的C运行库，是Linux系统中最底层的API之一，几乎所有的应用程序库都会依赖于它。因此，如果正则表达式基础库存在漏洞，将对上层的各种软件产生严重影响，带来极大的安全风险。

最近，360代码卫士团队对常见的正则表达式基础库进行了源码审计和漏洞挖掘，发现了10多个漏洞，并已提交至CVE（Common Vulnerabilities and Exposures）以及国家信息安全漏洞库。目前已有5个漏洞获得了CVE编号。其中，PCRE库广泛应用于Apache、MySQL、PHP、KDE、Postfix、Analog、Nmap、Apple Safari、Nginx等基础框架或组件；GRegex库由Isamu Hasegawa开发，在glibc、uclibc等标准库中有所应用。

本文将以PCRE库为例，简述源码审计和漏洞挖掘的过程，并深入分析CVE-2017-11660的原理，说明不当的底层基础库源码处理对上层应用软件的影响和危害，进而强调基础库软件源代码安全的重要性。

## 源码审计与漏洞挖掘
### PCRE库基本信息
PCRE库的源代码经过360代码卫士扫描后，结果统计如下：
总体而言，PCRE的代码质量较高。各缺陷详细信息及分类如下表所示：

| 缺陷类型 | 数量 |
| --- | --- |
| 越界访问 | 1 |
| ... | ... |

其中，越界访问漏洞即 **CVE-2017-11660** ，主要触发原因是代码中没有对循环边界进行正确检查，导致越界访问了分配的内存。相关代码片段如下：

```c
for (;;)
{
    RMATCH(eptr, ecode, offset_top, md, eptrb, RM18);
    if (rrc != MATCH_NOMATCH) RRETURN(rrc);
    if (eptr-- == pp) break;        /* Stop if tried at original pos */
    BACKCHAR(eptr);
}
```

宏定义 `BACKCHAR` 如下：

```c
#define BACKCHAR(eptr) while((*eptr & 0xc0) == 0x80)  eptr--
```

在上述循环中，退出条件为 `if (eptr-- == pp)`。然而，后续的宏 `BACKCHAR(eptr)` 对 `eptr` 进行递减操作。当 `eptr` 递减到小于 `pp` 时，退出条件不再成立，从而导致访问分配给 `eptr` 之前的内存数据。

### 内存溢出的原因
内存溢出是由于代码缺陷运行的结果。直接原因在于循环退出条件判断不当。具体来说，如果 `eptr` 在循环开始时已经小于 `pp`，那么该循环将无法有效终止。以下是一些可能导致此类问题的常见情况：
- 对获取的 `break` 等可以有效退出循环的语句进行判断；
- 判断执行 `break` 是否依赖于绝对相等（“==”）这样的条件；
- 分析等值判断的左右值是否可能被污染；
- 分析循环体是否有“死循环”的可能性（如 `for(;;) { … }` 或 `while(true){ … }`）。

在上述代码中，缺陷如下图所示：
![代码缺陷示意图](image_url)

在上述 `for` 循环中，缺少每次进入循环的有效判断，这创造了死循环的可能性。`if` 语句的判断条件为等值判断，只有在左右两值相等的情况下才能触发执行语句。此外，等值判断的左右值存在被污染的可能性，从而导致 `if` 条件无法满足，循环退出语句 `break` 无法被执行，最终进入死循环。检测流程示意图如下：
![检测流程示意图](image_url)

进行检测时，界面显示效果如下：
![检测界面显示效果](image_url)

分析发现，这段代码是PCRE中 `match` 函数处理 `OP_NCLASS` 和 `OP_CLASS` 操作码的部分，并且在其他地方也出现了，对应着 `OP_XCLASS` 操作码。

## 漏洞验证分析
正则表达式用于查找符合某些复杂规则的字符串，涉及上述漏洞的元字符包括：

根据代码审计的分析结果，我们构造了一个精简的POC（Proof of Concept）来验证漏洞：

```c
// POC代码
```

编译并运行该POC后，程序崩溃。调试信息如下：

```gdb
// gdb调试信息
```

从调试信息中可以看到，`subject` 的地址为 `0xbfffafc7`，搜索内容为 `xddx88x42x41`。`pp` 和 `eptr` 的值分别为：

- `pp` 的值为 `subject + 1`，是正常的值；
- `eptr` 远远小于 `pp`，且达到了内存边界，从而导致内存访问异常。

## 漏洞利用与危害分析
在上述POC中，往内存前搜索字符串“AABB”，当然也可以搜索其他字符串，这样会引发严重的信息泄露。由于PHP使用了PCRE正则表达式库，我们尝试在PHP中对此漏洞进行利用和危害分析，确认PCRE的这个漏洞是否影响到PHP。

下载并编译PHP最新版7.2.0，构造PHP的精简POC如下：

```php
// PHP POC代码
```

其中，`preg_match` 函数的功能是执行正则表达式匹配，其底层实现采用了PCRE。PHP 7.2.0 使用了 PCRE 4.1。分析发现，PHP对PCRE中的函数进行了封装调用，并对结果值做了检测。相关代码在 `ext/pcre/php_prce.c` 文件中的 `php_pcre_match_impl` 函数内：

```c
if ((offsets[1] - offsets[0] < 0) || pcre_get_substring_list(subject, offsets, count, &stringlist) < 0) {
    efree(subpat_names);
    efree(offsets);
    if (match_sets) efree(match_sets);
    php_error_docref(NULL TSRMLS_CC, E_WARNING, "Get subpatterns list failed");
    RETURN_FALSE;
}
```

`"offsets[1] - offsets[0] < 0"` 对返回的结果进行了检测。当漏洞触发后，返回的结果中 `offsets[1]` 是负数，因此条件成立，然后返回 `RETURN_FALSE`。

虽然此漏洞存在于PCRE中，但由于PHP对PCRE中的函数进行了封装调用，并对结果值做了检测，因此PHP不受 CVE-2017-11660 漏洞的影响。但本次源码审计和漏洞挖掘发现的另一个PCRE漏洞 CVE-2017-11164，确实影响到了PHP，可以在PHP中造成拒绝服务攻击。

具体来说，CVE-2017-11164 漏洞影响到PHP的库函数 `preg_match`。基于PHP的各种Web应用如果使用了 `pcre_match` 库函数，则也会受到影响，存在被拒绝服务攻击的风险。例如，Web应用中使用 `preg_match` 实现搜索功能时，攻击者可以在搜索的原始内容中插入特定字符串，从而通过特殊构造的字符发起拒绝服务攻击。

总结而言，确保基础库的安全性对于整个软件生态系统的安全性至关重要。希望本文能够引起大家对基础库代码安全的关注，并采取相应的防护措施。