                }
                this.valid = true;
                MudgeSanity.systemDetail("id", this.watermark + "");
                // 4.0 的 key 为 {27, -27, -66, 82, -58, 37, 92, 51, 85, -114, -118, 28, -74, 103, -53, 6}
                SleevedResource.Setup(arrayOfByte3);
             } catch (Exception localException2) {
                MudgeSanity.logException("auth file parsing", localException2, false);
             }
          }
       }
    }
#### 3.3、AuthCrypto 类
看看对 `authkey.pub` 及 `cobaltstrike.auth` 解密的类。
    /*
    * 解密函数解析，主要是涉及 RSA 解密和 gzip 解压相关操作，这里作者其实是在文件头加了四个字节
    * */
    public final class AuthCrypto {
       public Cipher cipher;
       public Key pubkey = null;
       protected String error = null;
       public AuthCrypto() {
          try {
             // 构造方法中生成了一个 RSA/ECB/PKCS1Padding 的 ciper
             this.cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
             this.load();
          } catch (Exception var2) {
             this.error = "Could not initialize crypto";
             MudgeSanity.logException("AuthCrypto init", var2, false);
          }
       }
       // Load() -> 加载公钥，验证哈希
       public void load() {
          // RSA 解密常规初始化操作
          try {
             // 读取 authkey.pub
             byte[] arrayOfByte1 = CommonUtils.readAll(CommonUtils.class.getClassLoader().getResourceAsStream("resources/authkey.pub"));
             // MD5 操作
             byte[] arrayOfByte2 = CommonUtils.MD5(arrayOfByte1);
             // 对比 hash，以校验 authkey.pub 文件是否符合要求
             if (!"8bb4df00c120881a1945a43e2bb2379e".equals(CommonUtils.toHex(arrayOfByte2))) {
                // 无效的授权文件
                CommonUtils.print_error("Invalid authorization file");
                System.exit(0);
             }
             X509EncodedKeySpec localX509EncodedKeySpec = new X509EncodedKeySpec(arrayOfByte1);
             KeyFactory localKeyFactory = KeyFactory.getInstance("RSA");
             // RSA 公钥
             this.pubkey = localKeyFactory.generatePublic(localX509EncodedKeySpec);
          } catch (Exception var5) {
             this.error = "Could not deserialize authpub.key";
             MudgeSanity.logException("authpub.key deserialization", var5, false);
          }
       }
       public String error() {
          return this.error;
       }
       /*
       * 解密 cobaltstrike.auth 的主函数，如果返回不为 null，则校验通过。
       * */
       public byte[] decrypt(byte[] paramArrayOfByte) {
          // RSA 解密，并返回 byte 数组
          byte[] arrayOfByte1 = this._decrypt(paramArrayOfByte);
          try {
             if (arrayOfByte1.length == 0) {
                return arrayOfByte1;
             } else {
                // 将解密好的数据，交给了 DataParser
                DataParser localDataParser = new DataParser(arrayOfByte1);
                localDataParser.big();
                // byte 数组转有符号 Int -> 取头部 4个字节判断文件头是否正确，这里并不是标准的 gzip头 -> byte[] b = {-54, -2, -64, -45}
                // 注：有符号数最高位为1，表示负数；最高位为0，表示正数
                int i = localDataParser.readInt();
                if (i == -889274181) {
                   this.error = "pre-4.0 authorization file. Run update to get new file";
                   return new byte[0];
                } else if (i != -889274157) {
                   this.error = "bad header";
                   return new byte[0];
                } else {
                   int j = localDataParser.readShort();
                   byte[] arrayOfByte2 = localDataParser.readBytes(j);
                   return arrayOfByte2;
                }
             }
          } catch (Exception localException) {
             this.error = localException.getMessage();
             return new byte[0];
          }
       }
       /*
        * 这个函数需要注意的是，代入的数据是使用 RSA 公钥进行解密的，然后返回解密后的数据。
        * 因此在生成 .auth 的时候，应该使用密钥进行加密。
        */
       protected byte[] _decrypt(byte[] paramArrayOfByte) {
          byte[] arrayOfByte = new byte[0];
          try {
             if (this.pubkey == null) {
                return new byte[0];
             } else {
                synchronized(this.cipher) {
                   this.cipher.init(2, this.pubkey);
                   arrayOfByte = this.cipher.doFinal(paramArrayOfByte);
                }
                return arrayOfByte;
             }
          } catch (Exception localException) {
             this.error = localException.getMessage();
             return new byte[0];
          }
       }
    }
结合上述两个代码，如果验证通过，则可以打开客户端页面。这与 3.X 的认证大致相同。
#### 3.4、SleevedResource 类
与 3.X 不同的是，4.X 在 `Authorization()` 中新增了一个新的验证
`SleevedResource.Setup()`。该验证的大致流程为：
    1、使用 .auth 文件的一部分数据作为一个 key，将该 key 再进行处理拆分；
    2、程序调用内置的 dll 文件；
    3、读取 dll 文件，对 dll 文件进行处理拆分；
    4、使用拆分的 key 分别对拆分的 dll 分别进行 hmac 摘要验证及 AES 解密。
    5、最后执行 dll。
跟进 `SleevedResource.Setup(arrayOfByte3);` 看一看：
    public class SleevedResource {
       private static SleevedResource singleton;
       private SleeveSecurity data = new SleeveSecurity();
       public static void Setup(byte[] paramArrayOfByte) {
          singleton = new SleevedResource(paramArrayOfByte);
       }
       public static byte[] readResource(String paramString) {
          return singleton._readResource(paramString);
       }
       private SleevedResource(byte[] paramArrayOfByte) {
          // 将 16 个字节的数据传入 SleeveSecurity.registerKey() 中
          this.data.registerKey(paramArrayOfByte);
       }
        /*
        * 这是一个读取文件，并对文件进行解密的函数方法
        * paramString 是一个文件名（文件相对路径）
        * */
        private byte[] _readResource(String paramString) {
          // strrep 是将 paramString 文件路径中的 resources/ 替换成 sleeve/
          String str = CommonUtils.strrep(paramString, "resources/", "sleeve/");
          // 替换之后实际上是读取 jar 包中 sleeve 目录下的文件，返回一个 byte[]
          byte[] arrayOfByte1 = CommonUtils.readResource(str);
          if (arrayOfByte1.length > 0) {
             long l = System.currentTimeMillis();
             // 将读取的文件 byte[] 代入解密阶段
             byte[] arrayOfByte2 = this.data.decrypt(arrayOfByte1);
             return arrayOfByte2;
          } else {
             // 不经过替换，直接读取源文件(sleeve 中不存在的文件，在 resources 中存在)
             byte[] arrayOfByte3 = CommonUtils.readResource(paramString);
             if (arrayOfByte3.length == 0) {
                CommonUtils.print_error("Could not find sleeved resource: " + paramString + " [ERROR]");
             } else {
                CommonUtils.print_stat("Used internal resource: " + paramString);
             }
             return arrayOfByte3;
          }
       }
    }
发现调用 `SleevedResource` 类的构造函数并将该 byte 数组传递给了 `dns.SleeveSecurity` 的
`registerKey()` 方法，继续跟进该方法：
    public void registerKey(byte[] paramArrayOfByte) {
       synchronized(this) {
          try {
             MessageDigest localMessageDigest = MessageDigest.getInstance("SHA-256");
             // 首先利用我们的 array，获取了一个 digest，大小是 256
             byte[] arrayOfByte1 = localMessageDigest.digest(paramArrayOfByte);
             byte[] arrayOfByte2 = Arrays.copyOfRange(arrayOfByte1, 0, 16);
             byte[] arrayOfByte3 = Arrays.copyOfRange(arrayOfByte1, 16, 32);
             // 取了 arrayOfByte1 的 0-16 作为 AES 的加密 key
             this.key = new SecretKeySpec(arrayOfByte2, "AES");
             // 取了arrayOfByte1 的 16-32 作为 Hmac 的加密 key
             this.hash_key = new SecretKeySpec(arrayOfByte3, "HmacSHA256");
          } catch (Exception var8) {
             var8.printStackTrace();
          }
       }
    }
嗯，到这里没见到往下走的验证了，估摸着第一轮验证就结束了。
此时启动 `teamserver`，则会在 `temserver` 中看到一个错误：
    [-] [Sleeve] Bad HMAC on xxxxx byte message from resource
注意：此验证是在调用 CS 内置 `EXE/DLL`
时所需要的，当验证不通过时，则出现该错误。因此当在绕过了开头的限制，则可以开启客户端，只不过功能受影响；只有该验证顺利通过，才是完全授权验证。
#### 3.4、decrypt() 方法调用链
我们搜索该错误，在 `SleeveSecurity.decrypt()` 中找到。
我们依次查看调用链：
我们在 `SleevedResource` 中看到此 `decrypt()` 方法的调用。而 `readResource()` 则调用了
`_readResource()`。我们再查看关于 `readResource()` 的调用：
我们就此挑选比较干净的调用例子来分析。
    protected byte[] export_dll() {
        // 判断框架位数，之后传入一个文件
        byte[] arrayOfByte = SleevedResource.readResource(this.x64 ? "resources/browserpivot.x64.dll" : "resources/browserpivot.dll");
        String str = CommonUtils.bString(arrayOfByte);
        Packer packer = new Packer();
        packer.little();
        packer.addShort(this.port);
        int i = str.indexOf("COBALTSTRIKE");
        str = CommonUtils.replaceAt(str, CommonUtils.bString(packer.getBytes()), i);
        return CommonUtils.toBytes(str);
    }
此时回头查看 `_readResource()` 函数。
    /*
    * 这是一个读取文件，并对文件进行解密的函数方法
    * paramString 是一个文件名（文件相对路径）
    * */
    private byte[] _readResource(String paramString) {
       // strrep 是将 paramString 文件路径中的 resources/ 替换成 sleeve/
       String str = CommonUtils.strrep(paramString, "resources/", "sleeve/");
       // 替换之后实际上是读取 jar 包中 sleeve 目录下的文件
       byte[] arrayOfByte1 = CommonUtils.readResource(str);
       if (arrayOfByte1.length > 0) {
          long l = System.currentTimeMillis();
          // 将读取的文件 byte[] 代入解密阶段
          byte[] arrayOfByte2 = this.data.decrypt(arrayOfByte1);
          return arrayOfByte2;
       } else {
          // 不经过替换，直接读取源文件(sleeve 中不存在的文件，在 resources 中存在)