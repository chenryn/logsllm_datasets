ENV = = 
```
前面的指令设置了两个环境变量。使用环境变量的键和值之间的`=`符号，并用空格分隔两个环境键值，以定义多个环境变量:
```
ENV key1="env value with space" 
```
对环境变量中有空格的值使用引号。
以下是关于`ENV`指令需要记住的几点:
*   使用一条指令定义多个环境变量
*   从映像创建容器时，环境变量可用
*   可以使用`docker inspect `从映像中查看环境变量
*   通过将`--env =`选项传递给`docker run`命令，可以在运行时更改环境变量的值
**来自我们的 Joomla 映像的示例文档文件**
在这里，我们为 Joomla 和 Docker 映像设置了在没有交互式终端的情况下运行的环境变量:
```
# Set the environment variables 
ENV DEBIAN_FRONTEND noninteractive 
ENV JOOMLA_VERSION 3.4.1 
```
**运行**
该指令允许您运行命令并生成图层。`RUN`指令的输出将是为正在处理的映像构建的层。传递给`RUN`指令的命令在该指令之前构建的层上运行；一个人需要处理订单。
**通用构造**
```
RUN  
```
``以 shell - `/bin/sh -c` shell 形式执行。
```
RUN ["executable", "parameter1", "parameter2"] 
```
在这种特殊的形式中，您以可执行的形式指定`executable`和`parameters`。确保在命令中传递可执行文件的绝对路径。这对于基本映像没有`/bin/sh`的情况很有用。您可以指定一个可执行文件，它可能是您在基础映像中的唯一可执行文件，并使用它在上面构建层。
如果不想使用`/bin/sh`外壳，这也很有用。考虑一下:
```
RUN ["/bin/bash", "-c", "echo True!"] 
RUN ; 
```
实际上，这是一种特殊形式的示例，您可以指定多个由`;`分隔的命令。`RUN`指令一起执行这些命令，并为所有指定的命令构建一个单层。
**来自我们的 Joomla 映像的示例文档文件**
在这里，我们更新包管理器并安装所需的依赖项:
```
# Update package manager and install required dependencies 
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \ 
    mysql-server \ 
    apache2 \ 
    php5 \ 
    php5-imap \ 
    php5-mcrypt \ 
    php5-gd \ 
    php5-curl \ 
    php5-apcu \ 
    php5-mysqlnd \ 
    supervisor 
```
请注意，我们已经有目的地编写了新的软件包，以便按照初始安装命令添加它们自己的 apt-get 安装行。
这样做是为了，如果我们需要添加或删除一个包，我们可以这样做，而不需要重新安装 Dockerfile 中的所有其他包。显然，如果需要的话，这可以节省大量的构建时间。
### 注
**Docker 缓存:** Docker 将首先对照主机的映像缓存检查之前构建的任何匹配图层。如果找到，将跳过 Dockerfile 中的给定构建步骤，从缓存中利用前一层。因此，最好的做法是单独登记每个 Dockerfile 的`apt-get -y install`命令。
正如我们已经讨论过的，Docker 文件中的`RUN`命令将在 Docker 容器的上下文和文件系统下执行任何给定的命令，并产生一个带有任何结果文件系统更改的新映像层。我们首先运行`apt-get update`来确保软件包的存储库和 PPAs 被更新。然后，在单独的调用中，我们指示包管理器安装 MySQL、Apache、PHP 和 Supervisor。`-y`标志跳过交互确认。
安装了所有必要的依赖项来运行我们的服务，我们应该整理一下，给我们一个更干净的 Docker 映像:
```
# Clean up any files used by apt-get 
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 
```
**添加**
此信息用于将文件和目录从本地文件系统或文件从远程网址复制到映像中。必须在`ADD`指令中指定来源和目的地。
**通用构造**
```
ADD     
```
这里``的路径是相对于构建上下文的。此外，``的路径可以是绝对的，也可以是相对于`WORKDIR`的:
```
ADD      
```
多个文件，例如``、``、``，被复制到``中。请注意，这些源文件的路径应该相对于构建上下文，如下所示:
```
ADD   
```
``的内容与文件系统元数据一起被复制到``中；目录本身不会被复制:
```
ADD text_* /text_files
```
构建上下文目录中所有以`text_`开头的文件都被复制到容器映像中的`/text_files`目录中:
```
ADD ["filename with space",...,  ""] 
```
带空格的文件名可以用引号指定；在这种情况下，需要使用 JSON 数组来指定 ADD 指令。
以下是关于`ADD`指令需要记住的几点:
*   复制到容器映像中的所有新文件和目录都有 UID 和 GID 作为`0`
*   如果源文件是远程网址，目标文件将拥有`600`权限
*   在`ADD`指令的源中引用的所有本地文件应该在构建上下文目录或其子目录中
*   如果本地源文件是受支持的 tar 归档文件，那么它将被解包为一个目录
*   如果指定了多个源文件，目标必须是一个目录，并以结尾斜线`/`结束
*   如果目标不存在，将根据需要与路径中的所有父目录一起创建
**来自我们的 Joomla 映像的示例文档文件**
在这里，我们将`joomla`下载到 Apache web 根目录:
```
# Download joomla and put it default apache web root 
ADD https://github.com/joomla/joomla-cms/releases/download/$JOOMLA_VERSION/Joomla_$JOOMLA_VERSION-Stable-Full_Package.tar.gz /tmp/joomla/ 
RUN tar -zxvf /tmp/joomla/Joomla_$JOOMLA_VERSION-Stable-Full_Package.tar.gz -C /tmp/joomla/ 
RUN rm -rf /var/www/html/* 
RUN cp -r /tmp/joomla/* /var/www/html/ 
# Put default htaccess in place 
RUN mv /var/www/html/htaccess.txt /var/www/html/.htaccess 
RUN chown -R www-data:www-data /var/www 
# Expose HTTP and MySQL 
EXPOSE 80 3306 
```
**复制**
`COPY`命令指定位于输入路径的文件应该从与 Dockerfile 相同的目录复制到容器内部的输出路径。
**CMD**
`CMD`指令有三种形式——外壳形式(作为`ENTRYPOINT`的默认参数)和首选的可执行形式。`CMD`的主要目的是为正在执行的容器提供默认值。这些默认值可以包括或省略一个可执行文件，后者也必须指定一个`ENTRYPOINT`指令。如果用户为 Docker `run`指定参数，那么它们将覆盖`CMD`中指定的默认值。如果您希望您的容器每次都运行相同的可执行文件，那么您应该考虑将`ENTRYPOINT`与`CMD`结合使用。
以下是需要记住的几点:
*   不要将`CMD`与`RUN`混淆- `RUN`将实际执行命令并提交结果，而`CMD`在构建期间不执行命令，而是为映像指定预期的命令
*   一个 Dockerfile 只能执行一个`CMD`；如果你登记了多个，只有最后一个`CMD`会被执行
**来自我们的 Joomla 映像的示例文档文件**
在这里，我们设置了 Apache 来启动它:
```
# Use supervisord to start apache / mysql 
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf 
CMD ["/usr/bin/supervisord", "-n"] 
```
以下是我们完成的 Joomla Dockerfile 的内容:
```
FROM ubuntu 
MAINTAINER John Wooten  
ENV DEBIAN_FRONTEND noninteractive 
ENV JOOMLA_VERSION 3.4.1 
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \ 
    mysql-server \ 
    apache2 \ 
    php5 \ 
    php5-imap \ 
    php5-mcrypt \ 
    php5-gd \ 
    php5-curl \ 
    php5-apcu \ 
    php5-mysqlnd \ 
    supervisor 
# Clean up any files used by apt-get 
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* 
# Download joomla and put it default apache web root 
ADD https://github.com/joomla/joomla-cms/releases/download/$JOOMLA_VERSION/Joomla_$JOOMLA_VERSION-Stable-Full_Package.tar.gz /tmp/joomla/ 
RUN tar -zxvf /tmp/joomla/Joomla_$JOOMLA_VERSION-Stable-Full_Package.tar.gz -C /tmp/joomla/ 
RUN rm -rf /var/www/html/* 
RUN cp -r /tmp/joomla/* /var/www/html/ 
# Put default htaccess in place 
RUN mv /var/www/html/htaccess.txt /var/www/html/.htaccess 
RUN chown -R www-data:www-data /var/www 
# Expose HTTP and MySQL 
EXPOSE 80 3306 
# Use supervisord to start apache / mysql 
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf 
CMD ["/usr/bin/supervisord", "-n"] 
```
其他常见的 Dockerfile 命令如下: **ENTRYPOINT**
一个`ENTRYPOINT`允许你配置一个将作为可执行文件运行的容器。从 Docker 的文档中，我们将使用提供的示例；以下内容将以其默认内容开始`nginx`，监听端口`80`:
```
docker run -i -t --rm -p 80:80 nginx 
```
对`docker run `的命令行参数将以可执行形式`ENTRYPOINT`附加在所有元素之后，并将覆盖使用`CMD`指定的所有元素。这允许将参数传递到入口点，即`docker run  -d`将把`-d`参数传递到入口点。您可以使用`docker run --entrypoint`标志覆盖`ENTRYPOINT`指令。
标签
该指令指定映像的元数据。稍后可以使用`docker inspect `命令检查该映像元数据。这里的想法是在映像元数据中添加关于映像的信息，以便于检索。为了从映像中获取元数据，不需要从映像中创建容器(或者将映像安装在本地文件系统上)，Docker 将 metdata 数据与每个 Docker 映像相关联，并且它有一个预定义的结构；使用`LABEL`，可以添加描述映像的附加关联元数据。
映像的标签是键值对。以下是在 Dockerfile 中使用`LABEL`的示例:
```
LABEL =  =  = 
```
该指令将向映像添加三个标签。此外，请注意，它将创建一个新的层，因为所有标签都添加在单个`LABEL`指令中:
```
LABEL  "key"="value with spaces" 
```