                 --init-only \
                 --header /path/to/header \
                 /dev/sdb1 sdb1_encrypted
    ```
    将 [*/path/to/header*]{.emphasis} 替换为使用分离的 LUKS
    标头指向该文件的路径。必须可以访问分离的 LUKS
    标头，以便稍后可以解锁加密的设备。
    该命令会要求您输入密码短语并启动加密过程。
3.  挂载该设备：
    ``` screen
    # mount /dev/mapper/sdb1_encrypted /mnt/sdb1_encrypted
    ```
4.  启动在线加密：
    ``` screen
    # cryptsetup reencrypt --resume-only --header /path/to/header /dev/sdb1
    ```
:::
::: itemizedlist
**其他资源**
-   `cryptsetup(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#encrypting-a-blank-block-device-using-luks2_encrypting-block-devices-using-luks}使用 LUKS2 加密空白块设备 {.title}
:::
此流程提供有关使用 LUKS2 格式加密空白块设备的信息。
::: itemizedlist
**先决条件**
-   空白块设备。
:::
::: orderedlist
**步骤**
1.  将分区设置为加密的 LUKS 分区：
    ``` screen
    # cryptsetup luksFormat /dev/sdb1
    ```
2.  打开加密的 LUKS 分区：
    ``` screen
    # cryptsetup open /dev/sdb1 sdb1_encrypted
    ```
    这样可解锁分区并使用设备映射器将其映射到新设备中。这会提醒内核
    `设备`{.literal} 是加密设备，应通过 LUKS 并使用
    `/dev/mapper/device_mapped_name`{.literal}
    来寻址，以免覆盖加密的数据。
3.  要将加密的数据写入分区，必须通过设备映射名称访问该分区。为此，您必须创建一个文件系统。例如：
    ``` screen
    # mkfs -t ext4 /dev/mapper/sdb1_encrypted
    ```
4.  挂载该设备：
    ``` screen
    # mount /dev/mapper/sdb1_encrypted mount-point
    ```
:::
::: itemizedlist
**其他资源**
-   `cryptsetup(8)`{.literal} 手册页
:::
:::
:::
[]{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html}
::: chapter
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening}第 10 章 使用基于策略的解密配置加密卷的自动解锁 {.title}
:::
基于策略的解密(PBD)是技术集合，可在物理和虚拟上解锁加密的根和辅助硬盘。PBD
使用各种解锁方法，如用户密码、受信任的平台模块(TPM)设备、连接到系统的
PKCS #11 设备，如智能卡或特殊的网络服务器。
PBD
允许将不同的解锁方法合并成一个策略，从而可以以不同的方式解锁同一个卷。RHEL
中 PBD 当前实施由 Clevis 框架和插件组成，称为 [*pin*]{.emphasis}。每个
pin 都提供单独的解锁功能。目前，可提供以下 pins ：
::: itemizedlist
-   `Tang`{.literal} - 允许使用网络服务器解锁卷
-   `tpm2`{.literal} - 允许使用 TPM2 策略解锁卷
-   SSS - 允许使用 Shamir\'s Secret Sharing(SSS)加密方案部署高可用性系统
    ``{.literal}
:::
网络绑定磁盘加密(NBDE)是 PBD
的一个子类，允许将加密的卷绑定到特殊的网络服务器。NBDE 的当前实现包括
Tang 服务器的 Clevis pin 和 Tang 服务器本身。
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#network-bound-disk-encryption_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}网络绑定磁盘加密 {.title}
:::
在 Red Hat Enterprise Linux 中，NBDE 是通过以下组件和技术实现的：
::: figure
[]{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#fig-NBDE-Clevis-Tang}
**图 10.1. 使用 LUKS1 加密的卷时的 NBDE 方案。luksmeta 软件包不用于
LUKS2 卷。**
::: figure-contents
::: mediaobject
![RHEL 安全指南 453350 0717 ECE
NBDE](images/RHEL_Security-Guide_453350_0717_ECE_NBDE.png)
:::
:::
:::
[*Tang*]{.emphasis}
是一个将数据绑定到网络状态的服务器。当系统绑定到某个安全网络时，它会使包含数据的系统变得可用。Tang
是无状态的，不需要 TLS 或身份验证。与基于 escrow
的解决方案不同，服务器存储所有加密密钥并了解以前使用的每个密钥，Tang
从不与任何客户端密钥进行交互，因此不会从客户端获得任何识别信息。
[*Clevis*]{.emphasis} 是一个自动化解密的可插拔框架。在 NBDE 中，Clevis
提供 LUKS 卷的自动解锁。[**[clevis]{.package}**]{.strong}
软件包提供了该特性的客户端。
[*Clevis pin*]{.emphasis} 是 Clevis 框架的一个插件。其中一个 pins
是实现与 NBDE 服务器进行交互的插件 - Tang。
Clevis 和 Tang 是通用的客户端和服务器组件，提供网络绑定加密。在 Red Hat
Enterprise Linux 中，它们与 LUKS
一起使用，以加密和解密根和非根存储卷，从而完成网络绑定磁盘加密。
客户端和服务器端组件都使用 [*José*]{.emphasis} 库来执行加密和解密操作。
当您开始调配 NBDE 时，Tang 服务器的 Clevis pin 将获得 Tang
服务器发布的非对称密钥的列表。或者，由于密钥是非对称的，因此 Tang
的公钥列表可以分发到带外，以便客户端能够在不访问 Tang
服务器的情况下进行操作。此模式称为 [*脱机调配*]{.emphasis}。
Tang 的 Clevis pin
使用其中一个公钥来生成唯一的强加密的加密密钥。使用此密钥加密数据后，密钥将被丢弃。Clevis
客户端应将此调配操作生成的状态存储在方便的位置。这种加密数据的过程就是
[*调配步骤*]{.emphasis}。
LUKS 版本 2(LUKS2)是 RHEL 中的默认磁盘加密格式，因此 NBDE
的调配状态作为令牌存储在 LUKS2
标头中。[**[luksmeta]{.package}**]{.strong} 软件包对 NBDE
的调配状态的利用只用于使用 LUKS1 加密的卷。
Tang 的 Clevis pin 支持 LUKS1 和 LUKS2，不需要规范。Clevis
可以加密纯文本文件，但您必须使用 `cryptsetup`{.literal}
工具来加密块设备。如需更多信息，请参阅 [使用 LUKS
加密块设备](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/encrypting-block-devices-using-luks_security-hardening){.link}。
当客户端准备好访问其数据时，它会加载再调配步骤中生成的元数据，并响应恢复加密密钥。此过程是
[*恢复步骤*]{.emphasis}。
在 NBDE 中，Clevis 使用 pin 绑定 LUKS
卷，以便能自动解锁它。成功完成绑定流程后，可以使用提供的 Dracut
解锁程序解锁磁盘。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果将 `kdump`{.literal} 内核崩溃转储机制设置为将系统内存的内容保存到
LUKS 加密的设备中，则会在第二次内核引导时提示您输入密码。
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#installing-an-encryption-client-clevis_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}安装加密客户端 - Clevis {.title}
:::
使用此流程可以在您的系统上部署并开始使用 Clevis 可插拔框架。
::: orderedlist
**步骤**
1.  在带有加密卷的系统上安装 Clevis 及其 pins：
    ``` screen
    # dnf install clevis
    ```
2.  要解密数据，请使用 `clevis decrypt`{.literal} 命令，并提供 JSON Web
    加密(JWE)格式的密码文本，例如：
    ``` screen
    $ clevis decrypt 
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#deploying-a-tang-server-with-selinux-in-enforcing-mode_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}部署 SELinux 处于 enforcing 模式的 Tang 服务器 {.title}
:::
使用此流程可以将运行在自定义端口上的 Tang 服务器部署为 SELinux enforcing
模式下的受限服务。
::: itemizedlist
**先决条件**
-   `policycoreutils-python-utils`{.literal} 包及其依赖项已经安装。
-   `firewalld`{.literal} 服务在运行。
:::
::: orderedlist
**步骤**
1.  要安装 `tang`{.literal} 软件包及其依赖项，请以 `root`{.literal}
    用户身份输入以下命令：
    ``` screen
    # dnf install tang
    ```
2.  选择一个未被占用的端口，例如 [*7500/tcp*]{.emphasis}，并允许
    `tangd`{.literal} 服务绑定到该端口：
    ``` screen
    # semanage port -a -t tangd_port_t -p tcp 7500
    ```
    请注意，一个端口只能供一个服务使用，因此试图使用一个已有的端口意味着
    `ValueError：Port already defined`{.literal} 错误信息。
3.  在防火墙中打开端口：
    ``` screen
    # firewall-cmd --add-port=7500/tcp
    # firewall-cmd --runtime-to-permanent
    ```
4.  启用 `tangd`{.literal} 服务：
    ``` screen
    # systemctl enable tangd.socket
    ```
5.  创建覆盖文件：
    ``` screen
    # systemctl edit tangd.socket
    ```
6.  在以下编辑器屏幕中，其打开了位于
    ` /etc/systemd/system/tangd.socket.d/`{.literal} 目录中的一个空
    `override.conf`{.literal} 文件，通过添加以下行将 Tang
    服务器的默认端口从 80 改为之前选择的端口号：
    ``` screen
    [Socket]
    ListenStream=
    ListenStream=7500
    ```
    保存文件并退出编辑器。
7.  重新载入更改的配置：
    ``` screen
    # systemctl daemon-reload
    ```
8.  检查您的配置是否正常工作：
    ``` screen
    # systemctl show tangd.socket -p Listen
    Listen=[::]:7500 (Stream)
    ```
9.  启动 `tangd`{.literal} 服务：
    ``` screen
    # systemctl restart tangd.socket
    ```
    由于 `tangd`{.literal} 使用了 `systemd`{.literal}
    套接字激活机制，因此服务器会在第一次连接进来时就立即启动。在第一次启动时会自动生成一组新的加密密钥。要执行手动生成密钥等加密操作，请使用
    `jose`{.literal} 工具。