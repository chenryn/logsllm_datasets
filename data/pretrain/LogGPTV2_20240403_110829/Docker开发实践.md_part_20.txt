4 dfs.class
3 dfs.server.namenode.
2 dfs.period
2 dfs.audit.log.maxfilesize
2 dfs.audit.log.maxbackupindex
1 dfsmetrics.log
1 dfsadmin
1 dfs.servers
1 dfs.replication
1 dfs.file
通过该容器，就可以进行Hadoop程序的开发和运行了。然而Hadoop一般在集群上才更能体
现其价值，而该容器只是一个Hadoop节点。接下来，我们介绍一下如何通过Docker来部署Hadoop
集群。
11.3 构建 Hadoop 集群
在这一节中，我们介绍一款管理Hadoop集群的工具Ambari，以及如何通过Docker来部署
Hadoop集群。
11.3 构建Hadoop集群 123
11.3.1 Ambari简介
1
Apache Ambari是一款致力于简化Hadoop集群的安装、开发集成、管理和监控的开源软件。
2
它对外提供RESTful形式的API，以供外部更好地管理Hadoop集群。通过Ambari工具，系统管理
员可以进行如下操作。
3
 安装Hadoop集群：Ambari提供了在集群中构建Hadoop服务的步骤以及安装配置。
 管理Hadoop集群：Ambari提供了对Hadoop集群中所有节点的集中管理，包括启动、停止
4
和重新配置等。
 监控Hadoop集群：Ambari提供了监控Hadoop集群健康状况和运行状态的控制面板，还对
5
外提供监控接口，以便用户定制监控信息。
通过Ambari的RESTful API接口，Hadoop的安装、管理和监控等组件也特别容易持续集成。 6
Ambari是Hadoop集群开发的一把利器，本节中我们将通过Ambari的Docker镜像来构建Hadoop集
群环境。 7
Ambari框架采用的是C/S模式，其架构如图11-1所示。服务端是ambari-server，客户端是
ambari-agent。ambari-server主要管理部署在每个节点上的管理监控程序，对外提供RESTful API，其 9
中一类API为ambari-web程序（ambari-web是Ambari提供的Web形式的管理工具）提供监控管理服务，
另一类API与ambari-agent交互。ambari-server中的Master模块接受API和Agent接口的请求，完成集群 8
的集中式管理监控逻辑，并将相关状态保存到PostgreSQL数据库中。ambari-agent分布在集群的每一
个节点，它是无状态的，只负责所在节点的状态采集及维护工作。此外，Ambari还提供了ambari-shell， 10
以shell的形式来管理集群。在ambari-shell内部，通过API和ambari-server进行通信。
11
11
13
14
15
图11-1 Ambari的C/S架构 16
11.3.2 部署Hadoop集群 17
在说明必要的基础原理之后，下面开始Ambari的Docker之旅。
18
124 第11章 使用Docker部署Hadoop集群
首先，我们可以在Docker Hub上直接获取Ambari的镜像：
$ docker pull sequenceiq/ambari:1.6.0
拉取成功之后，查看本地镜像：
$ docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
sequenceiq/ambari 1.6.0 bec373d0401a 3 months ago 1.782 GB
这个镜像包含了ambari-server、ambari-agent和ambari-shell，你可以通过它们部署单点或者多
点的Hadoop集群。
这里我们部署一个单点的Hadoop集群。对于多点集群，具体步骤也是一样的，只是涉及更多
具体的Ambari配置，这里就不展开说明了。这里将会用到两个容器，它们都基于刚刚获取到的镜
像。第一个容器运行ambari-server和ambari-agent，第二个容器则运行ambari-shell，用于通过命令
的形式管理集群。
首先，启动运行ambari-server和ambari-agent的容器：
$ docker run -d -p 8080 -h 127.0.0.1 --name ambari-singlenode sequenceiq/ambari:1.6.0 --tag
ambari-server=true
123f5b8a3f36229357310e41bff15c6a8d871b08e7316c2bc211cbdf2fba36f4
micall@micall-ThinkPad:~$ docker ps
CONTAINER ID IMAGE COMMAND CREATED
STATUS PORTS NAMES
123f5b8a3f36 sequenceiq/ambari:1.6.0 "/usr/local/serf/bin 15 seconds ago
Up 13 seconds 7373/tcp, 7946/tcp, 0.0.0.0:49154->8080/tcp ambari-singlenode
容器运行成功了。--tag ambari-server=true会将ambari-server命令加入到entrypoint中，而这
个容器默认的entrypoint为start-serf-agent.sh，这样ambari-server和ambari-agent都运行起来了。
接着启动另外一个容器，即运行ambari-shell的容器：
$ docker run -e BLUEPRINT=single-node-hdfs-yarn --link ambari-singlenode:ambariserver -t --rm
--entrypoint /bin/sh sequenceiq/ambari:1.6.0 -c /tmp/install-cluster.sh
AMBARI_HOST=172.17.0.60
[DEBUG] waits for ambari server: 172.17.0.60 RUNNING ...
....
[DEBUG] waits until 1 hosts connected to server ...
[DEBUG] connected hosts: 1
_ _ _ ____ _ _ _
/ \ _ __ ___ | |__ __ _ _ __ (_)/ ___| | |__ ___ | || |
/ _ \ | '_ ` _ \ | '_ \ / _` || '__|| |\___ \ | '_ \ / _ \| || |
/ ___ \ | | | | | || |_) || (_| || | | | ___) || | | || __/| || |
/_/ \_\|_| |_| |_||_.__/ \__,_||_| |_||____/ |_| |_| \___||_||_|
Welcome to Ambari Shell. For command and param completion press TAB, for assistance type 'hint'.
ambari-shell>blueprint defaults
Default blueprints added
11.3 构建Hadoop集群 125
ambari-shell>cluster build --blueprint single-node-hdfs-yarn
1
...
CLUSTER:single-node-hdfs-yarn>
2
启动容器后，就进入到ambari-shell命令界面中了。关于ambari-shell的用法，这里就不再展开
说明了，读者可以参考相关资料进行学习。
3
我们知道Ambari还提供了Web管理界面。从上面的docker ps命令知道，主机的49154端口和
第一个容器的8080端口进行映射了。我们可以通过浏览器来访问本地的49154端口，得到如图11-2
4
所示的登录界面。
5
6
7
9
8
10
图11-2 Ambari的Web管理登录页面
默认的用户名和密码为admin/admin。登录之后，由于当前没有建立集群，所以会自动进入
11
安装Hadoop集群的向导页面，见图11-3。
11
13
14
15
16
图11-3 Ambari的Hadoop集群安装向导页面 17
这里我们就不一步步说明如何安装Hadoop集群了。有了集群之后，就会出现如图11-4所示的
18
管理面板。
126 第11章 使用Docker部署Hadoop集群
图11-4 Ambari的管理面板
关于使用Docker来部署Hadoop集群的介绍就到这里。若想了解更多相关信息，读者可以自行
深入了解Ambari的用法。
Part 3
第三篇
高级篇 ：高级话题、API、
工具及集群管理
本 篇 内 容
第12章 容器网络
第13章 安全
第14章 Docker API
第15章 Fig
第16章 Kubernetes
第17章 shipyard
第18章 Machine+Swarm+Compose
128 第12章 容器网络
第 12 章
容器网络
Docker最初诞生于Linux操作系统，在部署分布式网络应用方面提供了强有力的支持。只有
对容器网络的原理理解透彻之后，才可以自定义出我们所需要的灵活的网络架构。本章主要包含
以下内容：
 与Docker紧密相关的网络工具。
 Docker网络的原理基础。
 容器网络的配置及原理。
 Docker网桥的配置及自定义。
12.1 容器网络的原理
通过手动模拟Docker引擎内部的操作，能够让读者看清容器网络内部的本质。
12.1.1 基础网络工具
在讲解容器网络的原理之前，我们有必要先介绍几个与容器网络紧密相关的系统网络工具，
比如iptables、ip和brctl-util。通过这些工具，我们可以检测容器的网络状态，也可以自定义我们
的容器网络。
1. iptables
系统网络工具netfilter/iptables是Docker容器网络虚拟化所依赖的重要工具之一，它是Linux系
统下一套IP数据包的过滤系统。通过定义一些规则，可以过滤、修改、重定向、阻塞流经主机的
网络包。这些规则根据目的组织到不同的表（table）中，在表中又根据其检测的点组织成规则链。
实际上，表和链可以看作是netfilter的两个维度。iptables共有4个表，分别是filter、nat、mangle
和raw。iptables是用来查看和修改这些规则及配置的命令行工具。
表filter定义了哪些数据包可以通过，哪些不可以通过，展示如下：
# iptables -t filter -L
Chain INPUT (policy ACCEPT)
12.1 容器网络的原理 129
target prot opt source destination
1
Chain FORWARD (policy ACCEPT)
2
target prot opt source destination
ACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHED
ACCEPT all -- anywhere anywhere
3
ACCEPT all -- anywhere anywhere
4
Chain OUTPUT (policy ACCEPT)
target prot opt source destination
5
表nat定义了地址转换规则，展示如下：
# iptables -t nat -L
6
Chain PREROUTING (policy ACCEPT)
target prot opt source destination
DOCKER all -- anywhere anywhere ADDRTYPE match dst-type LOCAL
7
Chain INPUT (policy ACCEPT)
9
target prot opt source destination
8
Chain OUTPUT (policy ACCEPT)
target prot opt source destination
DOCKER all -- anywhere !127.0.0.0/8 ADDRTYPE match dst-type LOCAL
10
Chain POSTROUTING (policy ACCEPT)
target prot opt source destination 10
MASQUERADE all -- 172.17.0.0/16 anywhere
12
Chain DOCKER (2 references)
target prot opt source destination
13
表mangle用来根据规则修改数据报文，展示如下：
# iptables -t mangle -L 14
Chain PREROUTING (policy ACCEPT)
target prot opt source destination
15
Chain INPUT (policy ACCEPT)
target prot opt source destination 16
Chain FORWARD (policy ACCEPT) 17
target prot opt source destination
18
Chain OUTPUT (policy ACCEPT)
130 第12章 容器网络
target prot opt source destination
Chain POSTROUTING (policy ACCEPT)
target prot opt source destination
在iptables中，-t命令用来指定要操作的表。由于raw默认情况下为空，且本章并不涉及该表，
故以上展示没有将其列出来。
由上面的表可以看到，iptables内置了5条标准规则链，这些规则链也称为勾子函数（hook function）。
 PREROUTING：路由前勾子。
 INPUT：数据包流入口勾子。
 FORWARD：转发勾子。
 OUTPUT：数据包出口勾子。
 POSTROUTING：路由后勾子。
除了5个标准链外，用户还可以自定义链，如上面的DOCKER规则链。任何一个数据包，只要
流经本机网络，必将触发以上勾子函数中的一个或多个。Docker容器也正是通过添加和修改相关
的规则链来达到控制网络连接的目的的。
2. ip
Linux下的ip命令与ifconfig、route命令类似，但功能更强大，并旨在取代后者。ifconfig
和route命令虽是已经废弃了的命令，但在大部分Linux系统上还能继续使用。本章中，我们会使
用更现代的ip命令来做演示。如果读者更熟悉老的命令，也可以使用老命令。下面演示一下ip命
令的几个功能。更多强大的操作，读者可参阅ip命令手册。
 为指定网络设备设置IP：
# ip addr add 192.168.1.12/24 dev wlan0
 查看指定网络设备的网络地址：
# ip addr show wlan0
3: wlan0:  mtu 1500 qdisc mq state UP group default qlen 1000
link/ether 48:5d:60:ed:5a:0d brd ff:ff:ff:ff:ff:ff
inet 172.16.9.18/24 brd 172.16.9.255 scope global wlan0
valid_lft forever preferred_lft forever
inet6 fe80::4a5d:60ff:feed:5a0d/64 scope link
valid_lft forever preferred_lft forever
 列出路由列表：
# ip route show
default via 172.16.9.1 dev wlan0 proto static
172.16.9.0/24 dev wlan0 proto kernel scope link src 172.16.9.18 metric 9
172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.42.1
12.1 容器网络的原理 131