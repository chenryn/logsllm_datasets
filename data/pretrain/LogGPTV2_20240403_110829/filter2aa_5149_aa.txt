---
title: Go
date: 2020-12-17 21:51:44
background: bg-[#4ba4cc]
tags:
    - Go
categories:
    - Programming
intro: |
    This cheat sheet provided basic syntax and methods to help you using [Go](https://go.dev/). 
plugins:
    - copyCode
---
Getting Started
--------
### hello.go
```go
package main
import "fmt"
func main() {
    fmt.Println("Hello, world!")
}
```
Run directly
```shell script
$ go run hello.go
Hello, world!
```
Or try it out in the [Go repl](https://repl.it/languages/go)
### Variables
```go
var s1 string
s1 = "Learn Go!"
// declare multiple variables at once
var b, c int = 1, 2
var d = true
```
Short declaration
```go
s1 := "Learn Go!"        // string
b, c := 1, 2             // int
d := true                // bool
```
See: [Basic types](#go-basic-types)
### Functions
```go
package main
import "fmt"
// The entry point of the programs
func main() {
    fmt.Println("Hello world!")
    say("Hello Go!")
}
func say(message string) {
    fmt.Println("You said: ", message)
}
```
See: [Functions](#go-functions)
### Comments
```go
// Single line comment
/* Multi-
 line comment */
```
### If statement
```go
if true {
    fmt.Println("Yes!")
}
```
See: [Flow control](#go-flow-control)
Go Basic types
--------
### Strings
```go
s1 := "Hello" + "World"
s2 := `A "raw" string literal
can include line breaks.`
// Outputs: 10
fmt.Println(len(s1))
// Outputs: Hello
fmt.Println(string(s1[0:5]))
```
Strings are of type `string`.
### Numbers 
```go
num := 3         // int
num := 3.        // float64
num := 3 + 4i    // complex128
num := byte('a') // byte (alias: uint8)
var u uint = 7        // uint (unsigned)
var p float32 = 22.7  // 32-bit float
```
#### Operators
```go
x := 5
x++
fmt.Println("x + 4 =", x + 4)
fmt.Println("x * 4 =", x * 4) 
```
See: [More Operators](#go-operators-and-punctuation)
### Booleans
```go
isTrue   := true
isFalse  := false
```
#### Operators 
```go
fmt.Println(true && true)   // true 
fmt.Println(true && false)  // false
fmt.Println(true || true)   // true
fmt.Println(true || false)  // true
fmt.Println(!true)          // false
```
See: [More Operators](#go-operators-and-punctuation)
### Arrays {.row-span-2}
```go
┌────┬────┬────┬────┬─────┬─────┐
| 2  | 3  | 5  | 7  | 11  | 13  |
└────┴────┴────┴────┴─────┴─────┘
  0    1    2    3     4     5
```
---
```go
primes := [...]int{2, 3, 5, 7, 11, 13}
fmt.Println(len(primes)) // => 6
// Outputs: [2 3 5 7 11 13]
fmt.Println(primes)
// Same as [:3], Outputs: [2 3 5]
fmt.Println(primes[0:3])
```
---
```go
var a [2]string
a[0] = "Hello"
a[1] = "World"
fmt.Println(a[0], a[1]) //=> Hello World
fmt.Println(a)   // => [Hello World]
```
#### 2d array
```go
var twoDimension [2][3]int
for i := 0; i  2d:  [[0 1 2] [1 2 3]]
fmt.Println("2d: ", twoDimension)
```
### Pointers
```go
func main () {
  b := *getPointer()
  fmt.Println("Value is", b)
}
```
```go
func getPointer () (myPointer *int) {
  a := 234
  return &a
}
```
```go
a := new(int)
*a = 234
```
See: [Pointers](https://tour.go.dev/moretypes/1)
### Slices
```go
s := make([]string, 3)
s[0] = "a"
s[1] = "b"
s = append(s, "d")
s = append(s, "e", "f")
fmt.Println(s)
fmt.Println(s[1])
fmt.Println(len(s))
fmt.Println(s[1:3])
slice := []int{2, 3, 4}
```
See also: [Slices example](https://gobyexample.com/slices)
### Constants
```go
const s string = "constant"
const Phi = 1.618
const n = 500000000
const d = 3e20 / n
fmt.Println(d)
```
### Type conversions
```go
i := 90
f := float64(i)
u := uint(i)
// Will be equal to the character Z
s := string(i)
```
#### How to get int string?
```go
i := 90
// need import "strconv"
s := strconv.Itoa(i)
fmt.Println(s) // Outputs: 90
```
Go Strings
--------
### Strings function
```go
package main
import (
	"fmt"
	s "strings"
)
func main() {
    /* Need to import strings as s */
	fmt.Println(s.Contains("test", "e"))
    /* Build in */
    fmt.Println(len("hello"))  // => 5
    // Outputs: 101
	fmt.Println("hello"[1])
    // Outputs: e
	fmt.Println(string("hello"[1]))
}
```
### fmt.Printf {.row-span-2 .col-span-2}
```go
package main
import (
	"fmt"
	"os"
)
type point struct {
	x, y int
}
func main() {
	p := point{1, 2}
	fmt.Printf("%v\n", p)                        // => {1 2}
	fmt.Printf("%+v\n", p)                       // => {x:1 y:2}
	fmt.Printf("%#v\n", p)                       // => main.point{x:1, y:2}
	fmt.Printf("%T\n", p)                        // => main.point
	fmt.Printf("%t\n", true)                     // => TRUE
	fmt.Printf("%d\n", 123)                      // => 123
	fmt.Printf("%b\n", 14)                       // => 1110
	fmt.Printf("%c\n", 33)                       // => !
	fmt.Printf("%x\n", 456)                      // => 1c8
	fmt.Printf("%f\n", 78.9)                     // => 78.9
	fmt.Printf("%e\n", 123400000.0)              // => 1.23E+08
	fmt.Printf("%E\n", 123400000.0)              // => 1.23E+08
	fmt.Printf("%s\n", "\"string\"")             // => "string"
	fmt.Printf("%q\n", "\"string\"")             // => "\"string\""
	fmt.Printf("%x\n", "hex this")               // => 6.86578E+15
	fmt.Printf("%p\n", &p)                       // => 0xc00002c040
	fmt.Printf("|%6d|%6d|\n", 12, 345)           // => |    12|   345|
	fmt.Printf("|%6.2f|%6.2f|\n", 1.2, 3.45)     // => |  1.20|  3.45|
	fmt.Printf("|%-6.2f|%-6.2f|\n", 1.2, 3.45)   // => |1.20  |3.45  |
	fmt.Printf("|%6s|%6s|\n", "foo", "b")        // => |   foo|     b|
	fmt.Printf("|%-6s|%-6s|\n", "foo", "b")      // => |foo   |b     |
	s := fmt.Sprintf("a %s", "string")
	fmt.Println(s)
	fmt.Fprintf(os.Stderr, "an %s\n", "error")
}
```
See also: [fmt](https://go.dev/pkg/fmt/)
### Function examples
| Example                       | Result      |
|-------------------------------|-------------|
| Contains("test", "es")        | true        |
| Count("test", "t")            | 2           |
| HasPrefix("test", "te")       | true        |
| HasSuffix("test", "st")       | true        |
| Index("test", "e")            | 1           |
| Join([]string{"a", "b"}, "-") | a-b         |
| Repeat("a", 5)                | aaaaa       |
| Replace("foo", "o", "0", -1)  | f00         |
| Replace("foo", "o", "0", 1)   | f0o         |
| Split("a-b-c-d-e", "-")       | [a b c d e] |
| ToLower("TEST")               | test        |
| ToUpper("test")               | TEST        |
Go Flow control
--------
### Conditional
```go
a := 10
if a > 20 {
    fmt.Println(">")
} else if a  0 {
    fmt.Println("Yes")
}
```
---
```go
if _, err := doThing(); err != nil {
    fmt.Println("Uh oh")
}
```
### Switch
```go {.wrap}
x := 42.0
switch x {
case 0:
case 1, 2:
    fmt.Println("Multiple matches")
case 42:   // Don't "fall through".
    fmt.Println("reached")
case 43:
    fmt.Println("Unreached")
default:
    fmt.Println("Optional")
}
```
See: [Switch](https://github.com/golang/go/wiki/Switch)
### For loop
```go
for i := 0; i  4 2
}
```
See: [Structs](https://tour.go.dev/moretypes/2)
### Literals
```go
v := Vertex{X: 1, Y: 2}
// Field names can be omitted
v := Vertex{1, 2}
// Y is implicit
v := Vertex{X: 1}
```
You can also put field names.
### Maps {.row-span-2}
```go
m := make(map[string]int)
m["k1"] = 7
m["k2"] = 13
fmt.Println(m) // => map[k1:7 k2:13]
v1 := m["k1"]