assumptions are seldom violated, except in case of obfuscated code.
USENIX Association  
22nd USENIX Security Symposium  339
3
an error correction step identiﬁes and marks regions of
disassembled code as representing gaps. The error de-
tection step relies on the following checks:
• Invalid opcode: Some byte patterns do not corre-
spond to any instruction, so attempts to decode them
will result in errors. This is relatively rare because
x86 machine code is very dense. But when it occurs,
it is a deﬁnitive indicator of a disassembly error.
• Direct control transfers outside the current module.
Cross-module transfers need to use special structures
called program-linkage table (PLT) and global offset
table (GOT), and moreover, need to use ICF transfers.
Thus, any direct control transfer to an address outside
the current module indicates erroneous disassembly.
• Direct control transfer to the middle of an instruc-
tion: This can happen either because of incorrect dis-
assembly of the target, or incorrect disassembly of the
control-ﬂow transfer instruction. Detection of addi-
tional errors near the source or target will increase our
conﬁdence regarding which of the two has been incor-
rectly disassembled. In the absence of additional in-
formation, our approach considers both possibilities.
Since errors in linear disassembly arise due to gaps,
our error correction step relies on identifying and mark-
ing these gaps. An incorrectly disassembled instruction
signiﬁes the presence of a gap, and we need to ﬁnd its
beginning and end. To ﬁnd the beginning of the gap, we
simply walk backward from the erroneously disassem-
bled instruction to the closest preceding unconditional
control-ﬂow transfer. If there are additional errors within
a few bytes preceding the gap, the scan is continued for
the next preceding unconditional control-ﬂow transfer.
To ﬁnd the end of the gap, we rely on static analysis re-
sults (Section 3). Speciﬁcally, the smallest ICF target
larger than the address of the erroneously disassembled
instruction is assumed to be the end of the gap. Once
again, if there are disassembly errors in the next few
bytes, we extend the gap to the next larger ICF target.
After the error correction step, all identiﬁed disassem-
bly errors are contained within gaps. At this point, the bi-
nary is disassembled again, this time avoiding the disas-
sembly of the marked gaps. If no errors are detected this
time, then we are done. Otherwise, the whole process
needs to be repeated. While it may seem that repetition
of disassembly is an unnecessarily inefﬁcient measure,
we have used it because of its simplicity, and because
disassembly errors have been so rare in our implementa-
tion that no repetition was needed for the vast majority
of our benchmarks.
Indirect Control Flow Analysis
3
In this section, we describe a static analysis for discov-
ering possible ICF targets. We classify ICF targets into
several categories, and devise distinct analyses to com-
pute them:
• Code pointer constants (CK) consists of code ad-
dresses that are computed at compile-time.
• Computed code addresses (CC) include code ad-
dresses that are computed at runtime.
• Exception handling addresses (EH) include code ad-
dresses that are used to handle exceptions.
• Exported symbol addresses (ES) include export func-
tion addresses.
• Return addresses (RA) include the code addresses
next of a call.
Our static analysis results are ﬁltered to retain only those
addresses that represent valid instruction boundaries in
disassembled code.
Identifying Code Pointer Constants (CK)
3.1
In general, there is no way to distinguish a code pointer
from other types of constants in code. So, we take a con-
servative approach: any constant that “looks like a code
pointer,” as per by the following tests, is included in CK:
• it falls within the range of code addresses in the cur-
rent module.
• it points to an instruction boundary in disassembled
code.
Note that a module has no compile-time knowledge of
addresses in another module, and hence it sufﬁces to
check for constants that fall within the range of code ad-
dresses in the current module. For shared libraries, ab-
solute addresses are unknown, so we check if the con-
stant represents a valid offset from the base of the code
segment. It is also possible that the offset may be with
respect to the GOT of the shared library, so our validity
check takes that into account as well.
The entire code and data segments are scanned for pos-
sible code constants as determined by the procedure in
the preceding paragraph. Since 32-bit values need not
be aligned on 4-byte boundaries on x86, we use a 4-byte
sliding window over the code and data to identify all po-
tential code pointer constants.
Identifying Computed Code Pointers (CC)
3.2
Whereas our CK analysis was very conservative, it is dif-
ﬁcult to bring the same level of conservativeness to the
analysis of computed code pointers. This is because, in
general, arbitrary computations may be performed on a
constant before it is used as an address, and it would be
impossible to estimate the results of such operations with
any degree of accuracy. However, these general cases are
just a theoretical possibility. The vast majority of code
is generated from high-level languages where arbitrary
340  22nd USENIX Security Symposium 
USENIX Association
4
pointer arithmetic on code pointers isn’t meaningful2.
Even for hand-written assembly, considerations such as
maintainability, reliability and portability lead program-
mers to avoid arbitrary arithmetic on code pointers. So,
rather than supporting arbitrary code pointer computa-
tion, we support computed code pointers in a limited set
of contexts where they seem to arise in practice. Indeed,
the only context in which we have observed code pointer
arithmetic is that of jump tables3.
The most common case of jump tables arise from com-
piling switch statements in C and C++ programs.
If
these were the only sources of CC, then a simple ap-
proach could be developed that is based on typical con-
ventions used by compilers for translating switch state-
ments. However, this approach isn’t feasible in our case
since we wish to handle many low-level libraries that
contain hand-written assembly code. So, we begin by
identifying properties that we believe are generic to jump
tables:
• Jump table targets are intra-procedural: the ICF trans-
fer instruction and ICF target are in the same function.
(We don’t require function boundaries — we estimate
them conservatively, as described below.)
• The target address is computed using simple arith-
metic operations such as additions and multiplication.
• Other than one quantity that serves as an index, all
other quantities involved in the computation are con-
stants in the code or data segment.
• All of the computation takes place within a ﬁxed size
window of instructions, currently set to 50 instruc-
tions in our implementation.
Based on these characteristics, we have developed a
static analysis technique to compute possible CC targets.
It uses a three-step process. The ﬁrst step is the identi-
ﬁcation of function boundaries and the construction of a
control-ﬂow graph. In the absence of full symbol table
information, it is difﬁcult to identify all function bound-
aries, so we fall back to the following approach that
uses information about exported function symbols. We
treat the region between two successive exported func-
tion symbols as an approximation of a function. (Note
that this approximation is conservative, as there may be
non-exported functions in between.) We then construct a
control-ﬂow graph for each region.
In the second step, we identify instructions that per-
form an indirect jump. We perform a backward walk
from these instructions using the CFG. All backward
paths are followed, and for each path, we trace the
2This is true even in languages that are notorious for pointer arith-
metic, such as C.
3C++ exception handling also involved address arithmetic on return
addresses, but we can rely on exception handler information that must
be included in binaries rather than the CC analysis.
chain of data dependences to compute an expression for
the indirect jump target. This expression has the form
∗(CE1 + Ind) +CE2, where CE1 and CE2 denote expres-
sions consisting of only constants, Ind represents the in-
dex variable, and * denotes memory dereferencing. In
some cases, it is possible to extend the static analysis to
identify the range of values that can be taken by Ind.
However, we have not implemented such an analysis, es-
pecially because the index value may come from other
functions.
Instead, we make an assumption that valid
Ind values will start around 0.
In the third step, we enumerate possible values for the
index variable, compute the jump target for each value,
and check if it falls within the current region. Speciﬁ-
cally, we check if CE1 + Ind falls within the data or code
segment of the current module, and if so, retrieve the
value stored at this location. It is then added with CE2
and the result checked to determine if it falls within the
current region. If so, the target is added to the set CC. If
either of these checks fail, Ind value is deemed invalid.
We start from Ind value of 1, and explore values on
either side until we reach values for which the computed
target is invalid.
We point out that the backward walk through the CFG
can cross function boundaries, e.g., traversing into the
body of a called function.
It may also go backwards
through indirect jumps. To support this case, we ex-
tend the CFG to capture indirect jumps discovered by
the analysis. The maximum extent of backward pass is
bounded by the window size speciﬁed above.
The above procedure can fail in some cases, e.g., if
CC computation is dispersed beyond the 50-instruction
window used in the analysis, or if the computation does
not have the form ∗(CE1 +Ind) +CE2. In such cases, we
can conservatively add every instruction address within
the region to CC.
Identifying Other Code Addresses
3.3
Below, we describe the computation of the three remain-
ing types of code pointers: exception handlers (EH), ex-
ported symbols (ES), and return addresses (RA).
In ELF binaries, exception handlers are also valid ICF
targets. They are constructed by adding a base address
with an offset. The base addresses and offsets are stored
in ELF sections .eh frame and .gcc except table re-
spectively. Both these sections are in DWARF [26] for-
mat. We use an existing tool, katana [29, 30], to parse
these DWARF sections and get both base addresses and
offsets, and thus compute the set EH. (We point out that
the CC analysis mentioned above won’t be able to dis-
cover these EH targets because DWARF format permits
variable length numeric encoding such as LEB128, and
hence the simple technique of scanning for 32-bit con-
stant values won’t work.)
USENIX Association  
22nd USENIX Security Symposium  341
5
Exported symbol (ES) addresses are listed in the dy-
namic symbol table, which is found in the .dynamic sec-
tion of an ELF ﬁle.
Return addresses (RA) are simply the set of locations
that follow a call instruction in the binary. Thus, they can
be computed following the disassembly step.
4 Deﬁning and Assessing CFI for Binaries
4.1 A Metric for Measuring CFI Strength
Previous works on CFI have relied on analysis of higher
level code to effectively narrow down ICF targets. Since
binary analysis is generally weaker than analyses on
higher-level code, our CFI enforcement is likely to be
less precise.
It is natural to ask how much protection
is lost as a result. To answer this question, we deﬁne a
simple metric for quality of protection offered by a CFI
technique.
Deﬁnition 1 (Average Indirect target Reduction (AIR))
Let i1, ...,in be all the ICF transfers in a program and S
be the number of possible ICF targets in an unprotected
program. Suppose that a CFI technique limits possible
targets of ICF transfer i j to the set Tj. We deﬁne AIR of
this technique as the quantity
1
n
n
j=1(cid:31)1− |Tj|
S (cid:30)
∑
where the notation |T| denotes the size of set T .
On x86, where branches can target any byte offset, S
is the same as the size of code in a binary.
4.2 A Simple CFI Property based on Relocation
CFI techniques are generally based on the following
model of how ICF transfers are used in source code:
1. Indirect call (IC): An indirect call can go to any func-
tion whose address is taken, including those addresses
that are implicitly taken and stored in tables, such as
virtual function tables in C++.
2. Indirect jump (IJ): Since compiler optimizations4 can
replace an indirect call (IC) with indirect jump (IJ),
the same policy is often applied to indirect jumps as
well.
3. Return (RET): Returns should go back to any Return
Address (RA), i.e., an instruction following a call.
It is theoretically possible to further constrain each of
these sets, and moreover, use different sets for each ICF
transfer. However, implementations typically don’t use
this option, as increased precision comes with certain
drawbacks. For instance, the callers of functions in
shared libraries (or dynamically linked libraries in the
case of Microsoft Windows) are not known before run-
time, and hence it is difﬁcult to constrain their returns
more narrowly than described above. Moreover, some
techniques rely on relocation information, which does
not distinguish between targets reachable by IC from
those reachable by IJ, or between the targets reachable
by any two ICs. Hence they do not reﬁne over the above
property. For this reason, we refer to the above CFI prop-
erty as reloc-CFI.
The description of implementation in Abadi et al [2]
indicates their use of relocation information, and con-
ﬁrms the above policy regarding ICs. No speciﬁcs are
provided regarding IJs and returns, but for reasons de-
scribed above, we believe that they support the reloc-CFI
policy described above. We also note that indexed hooks
[22] uses a single table for ICs and IJs, and another for
returns, enforcing reloc-CFI but in a kernel environment.
4.3 Strict-CFI: A CFI Property for Binaries Closely
Matching Reloc-CFI
Strict-CFI is derived from reloc-CFI, except that it uses
ICF targets computed by our ICF target analysis rather
than relocation information. In addition, strict-CFI in-
corporates an extension needed to handle features such
as exception handling and multi-threading. Speciﬁcally,
these features are used by a handful of instructions in
system libraries, and we simply relax the above policy
for these instructions:
• Instructions performing exception related stack un-
winding are permitted to go to any exception handler
landing pad (EH).
• Instructions performing context switches are permit-
ted to use any type of ICF transfer to transfer to a
function address.
Since they apply to a very small fraction of ICF trans-
fers in a program, their overall effect on AIR is negligi-
ble. Thus, the difference in AIR between reloc-CFI and
strict-CFI will pinpoint the precision loss due to the use
of static analysis in place of relocation information.
4.4 Bin-CFI: CFI for Complex Binaries
Complex binaries can contain exceptions to the simple
model of ICF transfers outlined earlier. To deﬁne a suit-