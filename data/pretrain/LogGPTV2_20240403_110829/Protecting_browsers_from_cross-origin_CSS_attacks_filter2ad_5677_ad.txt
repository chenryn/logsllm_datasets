### 4.6.2 Entity Encoding for Punctuation

To mitigate potential attacks, it is crucial to entity-encode specific punctuation characters within the attackerâ€™s injected strings. While existing XSS filters often handle quote marks, they are not necessary for the attack; an unquoted `url()` can be used instead. However, curly braces are essential for the attack. Therefore, we recommend entity-encoding all curly braces in user-submitted content using `&#123;` and `&#125;`. This will block all known forms of the attack, as long as the attacker cannot force UTF-7 encoding. Unfortunately, most popular scripting languages' library routines do not currently substitute curly braces.

As mentioned in Section 3.3.4, it is also important to ensure that the `Content-Type` header includes a character set declaration. Otherwise, the attacker may defeat HTML entity encoding of quotes and curly braces by forcing the target page to be interpreted as UTF-7. Declaring the character set in a meta tag inside the document is insufficient, as the CSS parser will not recognize this tag.

### 4.6.3 Avoid Ambient Authentication

Cross-site attacks often rely on the browser transmitting "ambient" authentication information, such as HTTP credentials or session cookies, with any request to the target site. The web-key authentication scheme [7] avoids the use of ambient authentication information by embedding credentials in site URLs instead. This defense blocks cross-origin CSS attacks as well as cross-site request forgery [4]. However, if a URL with a credential becomes visible to the victim user (e.g., via the location bar), they might be tricked into revealing it. Sites must assess whether this trade-off is acceptable.

### 5. Related Work

In this section, we review defenses against similar attacks: content-sniffing XSS, cross-site script inclusion, and cross-channel scripting. We also examine recent research proposals for secure web browsers in the context of the cross-origin CSS attack.

#### 5.1 Content-Sniffing XSS

Browsers use content-sniffing algorithms to detect HTML documents that were not properly labeled by the server. Websites that allow users to upload files also use content-sniffing to ensure that only benign formats (e.g., images) are accepted. When the site's sniffing algorithm differs from the browser's, an attacker may construct a "chameleon" document that the website believes is benign but the browser recognizes as HTML [3]. For example, a file beginning with `GIF<HTML` will be treated as an image by some versions of MediaWiki but as HTML by some versions of Internet Explorer.

To address this, Barth et al. [3] proposed a single, trusted sniffing algorithm that can be universally adopted. The signatures it looks for are prefix-disjoint, which excludes the possibility of chameleon documents. It also pays attention to the `Content-Type` header and will not escalate a document's capabilities. Microsoft proposed an alternative solution, a new HTTP header `X-Content-Type-Options`, to allow sites to opt out of content sniffing [19].

Both proposals aim to ensure that if the server believes a document is not HTML, the browser will not process it as HTML. They do not protect against the cross-origin CSS attack, which tricks the browser into processing an HTML document as CSS.

#### 5.2 Cross-Site Script Inclusion

Subsets of JavaScript syntax, such as JSON, are commonly used as data transport formats. Since the browser security model allows scripts to be imported from different domains, an attacker can steal data in this format by mentioning its URL in a `<script>` tag [9]. Servers can block this attack by prefixing their JSON responses with a JavaScript statement that causes a syntax error or infinite loop. Legitimate clients can strip this prefix before parsing the JSON, but the malicious page's script tag evaluates the entire response and will not get past the prefix. Servers may also mitigate the attack by using JSON responses only for HTTP POST requests, as the `<script>` tag always generates GET requests. However, this may require significant redesign of the web application. Avoiding ambient authentication is also effective against this attack.

#### 5.3 Cross-Channel Scripting

Many consumer electronic devices provide various services, such as FTP or SNMP, along with a web interface. Cross-channel scripting (XCS) [6] is a type of XSS attack that injects arbitrary strings into web content via non-web channels (e.g., uploading crafted filenames), bypassing common sanitizations for web exploits. This attack illustrates a vulnerability where content intended for one service is misinterpreted by another. SiteFirewall [6] is a client-side defense that blocks XCS attacks at the payload execution stage by requiring sites to provide a site-wide policy in a cookie to specify permitted external resources. However, this defense is ineffective against cross-origin CSS attacks because the attacker can whitelist the target site in its policy.

#### 5.4 Content Security Policy

Content Security Policy (CSP) is a Mozilla initiative [24] that provides web developers with a way to specify how content interacts on their websites. The policy is delivered via an HTTP response header. In Firefox 4.0, CSP includes a `frame-ancestors` directive that affects whether a document can be included by other sites via `<object>`, `<frame>`, and `<iframe>` tags. However, this directive does not prevent a document from being included across origins as a stylesheet, image, or script. Thus, CSP by itself does not currently provide protection against cross-origin CSS import attacks. Additional directives are expected to be added to CSP in the future.

#### 5.5 Same Origin Mutual Approval

The Same Origin Mutual Approval (SOMA) proposal [21] restricts communication between origins by requiring mutual approval between a web page's server and the servers of its cross-origin resources. Each server provides two well-known URLs declaring its cross-origin policy. One lists all sites to which its operators expect to make cross-origin requests, and the other dynamically reveals whether a cross-origin request from another site is acceptable. Browsers are modified to check both policy URLs before making any cross-origin request. This design prevents leaking confidential data to unapproved sites and mitigates the cross-origin CSS attack. However, the negotiation scheme incurs additional network round-trips and requires modifications to all participating websites and browsers.

#### 5.6 Cross-Origin Resource Sharing

The Cross-Origin Resource Sharing (CORS) proposal [25] is similar to SOMA but uses HTTP headers rather than well-known URLs. It is designed to expand the set of sites allowed to retrieve a resource that would normally be same-origin only. Initially designed to allow sites to cooperate with XMLHttpRequest, browser vendors are also considering it for video, downloadable fonts, and other novel resource types. These can be restricted to same-origin by default and then opened up to cross-origin requests only when this does not reveal confidential information. Thus, CORS reduces the risk of future cross-origin attacks using novel resource types. Applying it to traditional resource types such as CSS or JavaScript would break too many websites to be feasible.

#### 5.7 Gazelle Browser

The Gazelle browser [29] includes strict architectural control over resource protection and sharing across websites. Sites are security principals, and all cross-principal communication is mediated by the browser kernel to prevent cross-origin attacks. Cross-origin resources are only retrieved if the content has the proper content type in the HTTP response. Thus, Gazelle implements what we described in Section 4.1.1 as "strict enforcement" of cross-origin CSS labeling, as a natural consequence of its architecture. Users of Gazelle are protected against cross-origin CSS attacks, though at some cost in site incompatibility (62 out of 100,000 sites in our survey).

#### 5.8 OP Browser

The OP web browser [14] sandboxes browser components to isolate and contain failures. Its architecture does not provide automatic protection against cross-origin CSS attacks, which depend on the high-level behaviors described in Section 3.1. However, OP maintains a detailed security audit log that forensic experts can use to identify the site where the attack originated.

### 6. Conclusion

In this paper, we argued that it is dangerous for browsers to allow a page to determine the content type of an included cross-origin resource. Cross-origin CSS attacks have been known for some time, but existing defenses for JavaScript-based CSS attacks are ineffective against the new variants we have discovered. We propose two variants on stricter content type handling: a strict defense based solely on content types and a minimal defense that uses a content-sniffing rule to improve site compatibility. We surveyed 100,000 websites to assess the site compatibility of our proposals. Common server misconfigurations trigger false positives in the strict variant, breaking 62 (0.06%) of the 100,000 sites; the minimal variant does not break any sites. Our defense has been adopted in major browsers, including Firefox, Google Chrome, Safari, and Opera. We also described some server-side mitigations for the attack.

Error-tolerant parsing has extensibility benefits that have allowed CSS to become the dominant presentation format for the Web and will allow it to continue to evolve in the future. As more new features are introduced into browsers, we expect that many of them will consider adopting error-tolerant parsing as well. We hope that the designers of these features will take into consideration the importance of correctly determining the content type of cross-origin resources to avoid similar attacks.

### Acknowledgements

We thank Dave Hyatt, Sam Weinig, Maciej Stachowiak, and Adam Barth of the WebKit project, and David Baron and Boris Zbarsky of Mozilla, for reviewing our implementations of cross-origin CSS defenses. We also thank Helen Wang, our shepherd, and Eric Lawrence of Microsoft for their guidance and feedback.

### References

[1] Alexa. Top Sites. http://www.alexa.com/topsites.
[2] A. Barth. HTTP state management mechanism, 2010. https://datatracker.ietf.org/doc/draft-ietf-httpstate-cookie/.
[3] A. Barth, J. Caballero, and D. Song. Secure content sniffing for web browsers, or how to stop papers from reviewing themselves. In Proceedings of the 30th IEEE Symposium on Security and Privacy, 2009.
[4] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses for cross-site request forgery. In Proceedings of the 15th ACM Conference on Computer and Communications Security, 2008.
[5] T. Berners-Lee. WorldWideWeb: Proposal for a HyperText Project, 1990. http://www.w3.org/Proposal.html.
[6] H. Bojinov, E. Bursztein, and D. Boneh. XCS: cross channel scripting and its impact on web applications. In CCS â€™09: Proceedings of the 16th ACM conference on Computer and communications security, 2009.
[7] T. Close. Web-key: Mashing with permission. In Web 2.0 Security and Privacy, 2008.
[8] D. Crockford. The application/json media type for JavaScript Object Notation (JSON), 2006. http://tools.ietf.org/html/rfc4627.
[9] Fortify. JavaScript Hijacking Vulnerability Detected. http://www.fortify.com/advisory.jsp.
[10] J. Franks, P. M. Hallam-Baker, J. L. Hostetler, S. D. Lawrence, and P. J. Leach. HTTP authentication, 1999. http://www.ietf.org/rfc/rfc2617.txt.
[11] M. Gillon. Google Desktop Exposed: Exploiting an Internet Explorer vulnerability to phish user information, 2005. http://www.hacker.co.il/security/ie/css_import.html.
[12] D. Goldsmith and M. Davis. UTF-7: A Mail-Safe Transformation Format of Unicode, 1997. http://tools.ietf.org/html/rfc2152.
[13] GreyMagic Software. GreyMagic Security Advisory GM#004-IE, 2002. http://www.greymagic.com/security/advisories/gm004-ie/.
[14] C. Grier, S. Tang, and S. T. King. Secure web browsing with the OP web browser. In IEEE Symposium on Security and Privacy, 2008.
[15] D. Hyatt, W. Bastian, et al. WebKit, an open source web browser engine, 2005â€“2010. http://webkit.org/.
[16] C. Jackson. Improving Browser Security Policies. PhD thesis, Stanford University, Stanford, CA, USA, 2009.
[17] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell. Protecting browser state from web privacy attacks. In Proceedings of the 15th International World Wide Web Conference. (WWW 2006), 2006.
[18] D. M. Kristol and L. Montulli. HTTP state management mechanism, 1997. http://www.ietf.org/rfc/rfc2109.txt.
[19] E. Lawrence. IE8 Security Part V: Comprehensive Protection. http://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx.
[20] H. W. Lie. Cascading Style Sheets. PhD thesis, University of Oslo, Norway, 2005. http://people.opera.com/howcome/2006/phd/.
[21] T. Oda, G. Wurster, P. C. van Oorschot, and A. Somayaji. SOMA: mutual approval for included content in web pages. In Proceedings of the 15th ACM conference on Computer and communications security, 2008.
[22] ofk. CSSXSS attack on mixi post key, 2008. http://d.hatena.ne.jp/ofk/20081111/1226407593.
[26] W3C. CSS syntax and basic data types. http://www.w3.org/TR/CSS2/syndata.html.
[27] W3C. Document Object Model CSS. http://www.w3.org/TR/DOM-Level-2-Style/css.html.
[23] J. Ruderman. JavaScript Security: Same Origin. http://www.mozilla.org/projects/security/components/same-origin.html.
[24] S. Stamm, B. Sterne, and G. Markham. Reining in the web with content security policy. In WWW â€™10: Proceedings of the 19th international conference on World wide web, 2010.
[28] W3C. HTML 4.01 Specification. http://www.w3.org/TR/html4/.
[29] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and H. Venter. The Multi-Principal OS Construction of the Gazelle Web Browser. In Proceedings of the 18th USENIX Security Symposium, 2009.
[25] A. van Kesteren et al. Cross-origin resource sharing (editorâ€™s draft), 2010. http://dev.w3.org/2006/waf/access-control/.
[30] E. Z. Yang. HTML Purifier, 2006â€“2010. http://htmlpurifier.org.