---
## Page 391
第12章进程间通信：管道
373
include *cliserv.h*
include 
int main()
int server_fifo_fd,client_fifo_fd:
struct data_to_pass_st my_data;
char client_fifo[256]:
int read_res;
skfifo(SERVER_FIFO_NAME,0777);
server_fifo_Ed- open(SERVER_FIFO_NAME, O_RDONLY);
if（server_tito_fdss-l)（
fprintflstderr.*Server fifo failure\n*l;
exit (EXIT_FAILURE1:
sleep(10): /* lets clients queue for @eno purposes */
do{
read_reg = read(server_fifo_fd, &my_data. sizeof(ny_data));
if {read_res > 0）（
3）在接下来的这一部分里，我们对刚刚从客户那里读到的数据做一些处理：我们把Some_data
中的字符全部转换为大写，做把CLIENT_FIFO_NAME和接收到的client_pid结合在一起。
Lap_char_ptr z my_data.sone_data;
while (*tnp_char_ptr){
*tmp_char_ptr toupper(*tnp_char_ptx);
tmp_char_ptr++;
sprintf(client_fifo, CLIzNr_FIFO_NAME, my_data.client_pid) ;
4）然后，我们以只读的阻塞模式打开客户管道，把经过处理的数据发送回去。最后是关机处
理：关闭服务器管道的文件描述符，用unlink调用删除服务器管道的FIFO文件，退出程序运行。
client_fifo_fd = openlclient_fifo,O_wRoNLY);
if (elient_tifo_fd1=-1）（
write(client_fifo_fd, sny_data, sizeof(my_datal1:
close(client_fifo_fd):
，
}while （read_res > 0）:
unlink(SERVER_FIFO_NAME):
close(server_fife_fd):
exit(EXIT_SUCCESS):
5）从这里开始是客户程序client.c。程序的开始部分先检查服务器FIFO文件是否存在，如果
存在就打开它。然后查出自己的进程ID，它构成了将要发送到服务器去的数据的一部分。然后
创建好客户FIFO文件，进人下一部分。
include 
include *cliserv.h*
int main()
int server_fifo_fd, client_fifo_fd;
struct dota_to_pass_st my_data;
char client_fifo[256];
int tines_to_send;
server_fifo_fd = open(SERVER_FIFO_NAME. O_wRCNLY):
加入jaVva编程群：524621833
---
## Page 392
374
Linux程序设计
if (server_fifo_fd =s -1){
fprintf(stderr,*Sorry, no server\n*}:
exit(ZXIT_FAILURE);
1
my_data.client_pid = getpid(1;
sprintf(client_fifo, CLIENT_FIFO_NAME,ny_data.client_pid):
fprintf(stderr,“Sorry. can't make es\n,client_fifo}:
exit(EXIT_FAILURE) :
1
6）这部分有五次循环。每次循环都把客户数据发送给服务器，然后打开客户FIFO文件（只
读，阻塞模式），读回数据。最后，关闭客户FIFO文件并从内存里把它删掉。
for (times_to_send s 0; times_to_send  0)(
printf(*received:tsn*, ay_data.scme_data);
close(client_fifo_fd) ;
close(server_fifo_fd):
unlink(client_fifo);
exit(EXIT_SUCCESS):
1
进行测试的时候，我们只需运行一次服务器程序，客户程序可以运行多次。为了让它们尽
可能地在几乎同一时间启动，我们将使用如下所示的shel命令：
$for1in12345
S sezver &
cllent&
do
done
shell命令启动了一个服务器进程和五个客户进程。下面是客户们产生的输出，为简洁起见
我们做了删节：
531 sent He11o fron 531, received: HELL0 FROM 531
532 sent Hello from 532.
529 sent Hello from 529.
received:HELLO PROM 529
received: HELLO FROM 532
530 sent Hello from 530.
532 sent Hello from 532. received: HELLO FROK 532
531 sent Hello from
531,
正如大家看到的，不同的客户请求交织在了一起，但每个客户提交的数据在得到服务器的
处理之后都能正确地返回给对应的客户。注意，客户请求的交织现象是随机的，服务器接收到
客户请求的先后顺序会随机器的不同而有所差异，即使是同一台机器，各次运行的情况也有可
能发生变化。
操作注释：
在下面的注释部分里，我们将尝试对客户和服务器交互执行时各种操作的先后顺序进行说
加入jaVa编程群：524621833
---
## Page 393
第12章进程间通信：管道
375
明，这是我们以前没有涉及到的。
服务器以只读模式创建自己的FIFO文件并阻塞。它将一直等到有客户以写方式打开这个
FIFO文件建立连接为止。此时，服务器进程解除阻塞状态，执行sleep语句进人休眠，这使来自
客户的请求排队等候。（在实际软件里应该把sleep语句去掉。我们之所以在这里使用它，是为了
演示此程序多个进程同时执行的正确操作。）
与此同时，在打开了服务器FIFO之后，客户创建自已独一无二的命名管道，为读取服务器
发回的数据做好准备。这一切都完成后，客户开始向服务器写数据（如果管道是满的，或者服
接收到来自客户的数据后，服务器对数据进行处理，以写方式打开客户管道并把数据写回
去，写问去的数据将解除客户的阻塞状态。当客户不再被阻塞时，它就可以从它自己的管道里
读取服务器写人的数据了。
整个过程不断重复，直到最后一个客户关闭服务器管道为止，而这将使服务器的read调用失
败（返同“0”），因为已经没有任何进程以写方式打开服务器管道了。如果这是一个真正的服务
器进程，还需要等待以后的客户，我们就需要对它进行改进，这有两种做法：
·对它自已的服务器管道打开一个文件描述符，阻塞最后一个read调用而不是返回“0”。
·当read返回“0”字节时，关闭再重新打开一个服务器管道，使服务器进程阻塞在open处等
待客户的到来，就象它最初启动时那样。
在重新编写CD数据库软件时，我们将向大家演示命名管道的这两种使用技巧。
12.7CD唱盘管理软件
看过用管道实现简单的客户/服务器系统的例子之后，我们重新造访我们的CD唱盘管理软件，
并准备照猫画虎地对它进行改进。我们还将添加一些信号处理内容，使我们能够在进程被中断
的时候采取一些清理动作。
在我们深人到这个新版本里去之前，先来编译这个软件。如果读者已经从出版社站点上下
载了源代码，请用Makefile来编译server_app和client_app这两个程序。敲人“server_app-i”将
使程序初始化一个新的CD唱盘数据库。不用说，如果服务器没有启动运行，客户是不会运行的。
下面是对程序进行编译用的Makefile文件。
all:server_app elient_app
CFLAGSaI/usr/include/db1 -pedantic -Ws11
Por debugging un-comment the next line
DFLAGS=-DDEBUG_TRACE=1g
Include for systems with dbn, but only as part of the 3sD licensed versicn
DEM_INC_PATH=/usr/1nclude/db1
and not in che standard locations.This is the default..
DBM_LIB_FILE=db
definitions,and uncomnent these
加入jaVa编程群：524621833
---
## Page 394
376
Linux程序设计
DBM_INC_PATH=/usr/include
#DSK_LIB_PILE=ndbm
 For systems where the gibm libraries have been fetched and installed
separately in the default 1ocations under /usr/local
comment out the previous definitions,and unconnent these
DBN_INC_PATH=/usr/1ocal/Include
DBN_LIB_PATH=/usr/local/1ib
DBM_LIB_FILE=gdbn
.C.0:
$(CC)$(CFLAGS)-IS(DBK_INC_PATH)$(DPLAGS)·C $<
cd_dbm.o: cd_dbm.e cd_data.h
app_ui.o:app_ui.c cd_data.h
client_if.o: client_if.c cd_data.h cliserv.h
pipe_imp.o: pipe_imp.c cd_data.h cliserv.h
server.o: server.e cd_data.h cliserv.h
client_app: app_ui.o client_if.o pipe_inp.o
server_app:..
S(CC) -o server_app -LS (DBN_LIB_PATH) S (DFLAGS) server.o cd_dbm.o pipe_inp.o
server.o cd_dbm.o pipe_inp.o
clean:
rm -f server_app client_app *.o *s
12.7.1目标
我们的目的是把这个软件中与数据库打交道的部分和用户程序界面部分分开。我们还希望
只运行一个服务器进程，但允许许多客户进程同时运行。我们将尽量减少对现有代码的修改，
只要有可能，就保留原来的代码不微改动。
为了使事情简单化，我们还希望能够在软件里面来创建（和删除）管道，这样就不需要有
一个系统管理员来为我们创建我们将会用到的命名管道了。
另外一个重要的问题是我们要保证不会出现繁忙等待某个事件的现象，减少对CPU资源的
消耗。我们已经了解UNIX允许我们进人阻塞状态，使用最少的资源等待事件的发生。我们将利
用管道的阻塞特性来保证CPU的有效使用。总之，服务器至少在理论上可以在客户请求到来之
前等上许多个小时。
12.7.2买现
我们曾经在第7章编写过这个软件，在那个单进程版本里，我们使用了一组数据访问例程来
处理数据。这些例程包括：
int database_initialize(const int new_database);
cdc_entry get_cdc_entry(const char *cd_catalog_ptr);
void database_close(void) :
cdt_entry get_cdt_entry(const char *cd_catalog_ptr,const int track_no);
int add_cdc_entry(const cdc_entry entry_to_add);
int add_cdt_entry(const cdt_entry entry_to_add);
int del_cdc_entry(const
char *cd_catalog_ptr):
int del_cdt_entry(const char *cd_catalog_ptr. const int track_no):
加入jaVa编程群：524621833
---
## Page 395
第12章进程间通信：管道
377
cdc_entry search_cdc_entry(const char *cd_catalog_ptr,
int *first_call_ptr);
这些函数正好可以让我们把客户和服务器两部分方便地分开。
这个软件的单进程版本被编译为一个单个的程序，但我们可以把它看做是由两个部分组成
的系统，如图12-6所示。
用户操作界面
数据库访间
图12-6
在客户-服务器实现里，我们想在软件的两个主要部分之间合乎逻辑地添上一些命名管道和
支持性代码。
图12-7是我们需要的模型结构。
客户
提光
客户接口
服务器接口
连接管道
图12-7
加入jaVa编程群：524621833
---
## Page 396
378
Linux程序设计
在我们的实现里，我们选择把客户接口例程和服务器接口例程都放在同一个文件里，即
pipe_imp.c文件。这将把客户/服务器实现版本中与使用命名管道有关的代码都集中到一个文件
里去，而被传输数据的格式编排和打包工作将与实现命名管道的例程隔离开来。我们的源文件
更多了，但它们之间的界线也更符合逻辑了。这个软件里的调用结构如图12-8所示。
客户
服务器
app_ui.c
od_dbm.c
elientif.c
sezvez.c
pipe_inp.c
pipe_imp.c
连接管道
图12-8
文件app_ui.c、client-if.c和pipe_imp.c将被编译在一起构成一个客户程序；面文件cd_dbm.c、
server.c和pipe_imp.c将被编译在一起构成一个服务器程序；头文件cliserv.h将以一个公共定义头
文件的形式把这两个程序联系起来。
文件app_ui.c和cd_dbm.c需要改动的地方很少，基本上都是为了把两个程序更好地分离开。
这个软件现在已经比较大了，但代码的绝大部分与我们以前看到的相比并不需要改动，所以我
们这里只把cliserv.h、client_if.c和pipe_imp.c文件中的代码清单列出来。
首先来看看cliserv.h文件。这个文件定义了客户接口和服务器接口。客户和服务器程序都要
用到它。
这个文件的某些部分依赖于客户/服务器的具体实现办法，在这个例子里就是命名
管道。在下一章的末尾我们还将改用另外一种不同的客户/服务器模型。
动手试试：CD唱盘管理软件的头文件：cliserv.h
1)先是必要的系统头文件，如下所示：
加入jaVa编程群：524621833
---