title:An Investigation of the Android Kernel Patch Ecosystem
author:Zheng Zhang and
Hang Zhang and
Zhiyun Qian and
Billy Lau
An Investigation of the 
Android Kernel Patch Ecosystem
Zheng Zhang, UC RIverside; Hang Zhang and 
Zhiyun Qian, UC Riverside; Billy Lau, Google Inc.
https://www.usenix.org/conference/usenixsecurity21/presentation/zhang-zheng
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.An Investigation of the Android Kernel Patch Ecosystem
Zheng Zhang
UC Riverside
PI:EMAIL
Hang Zhang
UC Riverside
PI:EMAIL
Zhiyun Qian
UC Riverside
PI:EMAIL
Billy Lau
Google Inc.
PI:EMAIL
Abstract
open-source projects are often reused in commercial
software. Android, a popular mobile operating system,
is a great example that has fostered an ecosystem of
open-source kernels. However, due to the largely
decentralized and fragmented nature, patch propagation
from the upstream through multiple layers to end
In this paper, we
devices can be severely delayed.
undertake a thorough investigation of
the patch
propagation behaviors in the entire Android kernel
ecosystem.
By analyzing the CVEs and patches
available since the inception of the Android security
bulletin, as well as open-source upstream kernels (e.g.,
Linux and AOSP) and hundreds of mostly binary OEM
kernels (e.g., by Samsung), we ﬁnd that the delays of
patches are largely due to the current patching practices
and the lack of knowledge about which upstream
commits being security-critical. Unfortunately, we ﬁnd
that the gap between the ﬁrst publicly available patch
and its ﬁnal application on end devices is often months
leaving a large attack window for
and even years,
experienced
unpatched
vulnerabilities.
hackers
exploit
the
to
Introduction
1
open-source software is ubiquitous and often serves as
the foundation of our everyday computing needs.
Unfortunately,
they also contain a large number of
vulnerabilities — there are new security patches
released weekly for open-source software (e.g., Linux).
It can be tricky to ensure timely delivery of patches
for open-source software because of the widespread
reuse phenomenon where multiple versions or branches
of the open-source software co-exist and can be divided
into
downstream ones.
Downstream developers reuse much of the upstream
software and add ﬁnishing touches (e.g., customization,
stability ﬁxes).
downstream
More importantly,
upstream and
so-called
developers have to take critical security patches from
upstream to eliminate vulnerabilities. This is often
challenging because upstream and downstream branches
are often developed and maintained by different
organizations and companies that often have different
priorities and goals in mind.
as
add
who
Qualcomm
The single most prominent example is the Android
ecosystem. The Android open-source Project (AOSP)
kernels are derived from Linux kernels (i.e., reused in
Android) with many features added for mobile devices.
In turn, the AOSP kernels are reused by chipset vendors
such
additional
hardware-speciﬁc changes. A chipset vendor’s kernel is
then ﬁnally reused by OEM vendors such as Samsung
and Xiaomi. This means that the patches can originate
from more than one upstream kernels (e.g., Linux,
AOSP, and Qualcomm), and the propagation can take
multiple steps to ﬁnally reach the OEM vendors. Even
though Google has been working diligently with OEM
vendors on patching, e.g., through its monthly update
program [1],
the ecosystem is unfortunately so
decentralized that it is beyond the control of a single
entity.
of
by
the
lack
Motivated
and
understanding of the patching process, we set out to
investigate the unique and complex Android kernel
ecosystem.
Speciﬁcally, we are interested in the
following high-level aspects:
transparency
(1) The relationship between the upstream and
downstream kernels, e.g., who is responsible for the
initial patch, and how does it propagate?
(2) The timeliness of patch propagation, e.g., what is
the typical delay in each step with the patch propagation
and where is the bottleneck?
(3) The factors that inﬂuence the patch propagation,
e.g., what are the current best practices by different
entities, and how can we improve the situation?
It
is challenging to conduct such a measurement
study. Speciﬁcally, even though Android kernels inherit
USENIX Association
30th USENIX Security Symposium    3649
the open-source license from Linux, kernel sources from
OEM vendors are often released broken/half-baked,
with substantial delays, and only intermittently (e.g.,
when the phone was initially released) [38, 35, 33]. In
contrast, the binary ROMs (i.e., ﬁrmware images) are
easier to ﬁnd.
to be able to analyze
closed-source Android ﬁrmware images, we build a
static
analysis
a
conducting patch
state-of-the-art
presence test in binaries.
tool on top of FIBER [42],
tool
capable of
Therefore,
reveal
By analyzing the patches announced in the Android
security bulletin, 20+ OEM phone models, and 600+
kernel images, we delineate many interesting ﬁndings
that
intriguing relationships among different
parties as well as the bottleneck of the whole patch
propagation process. When fair to do so, we also
compare the responsiveness among different parties,
e.g., which OEM vendors are more diligent in patching
their devices.
We summarize our contributions as follows:
• We investigate the unique Android kernel ecosystem
that is decentralized and fragmented. We mine the
patch propagation delays across all layers and locate
the bottleneck.
• We improve a state-of-the-art source-to-binary patch
presence test tool and develop a system on top of it to
check the closed-source kernels from OEM vendors.
We plan to open-source our system and release the
dataset to improve the transparency of the ecosystem.
• We conduct a large-scale measurement that shows
nearly half of the CVEs are patched on OEM devices
roughly 200 days or more after the initial patch is
publicly committed in the upstream, and 10% – 30%
CVEs are patched after a year or more.
• Furthermore, by mining the commit methods and
correlating them with notiﬁcation dates published by
Google and Qualcomm, we explain the causes of
patch delays. We also distill takeaways and potential
prescriptive solutions to improve the current situation.
2 Android Kernel Ecosystem
the
Android is known for
its diverse and fragmented
ecosystem where multiple variants of the operating
system co-exist [21]. On one hand,
the scale and
diversity of
ecosystem participants deﬁnitely
contributed to Android’s overall success. On the other
hand,
is extremely challenging to ensure the
consistency and security of every Android variant out on
the market.
It is especially true for Android kernels
which are themselves derived from the upstream Linux
kernel.
Hierarchy of Linux/Android kernels.
Figure 1
it
Figure 1: Android ecosystem for kernel version 4.4
illustrates the typical relationship between the upstream
and downstream kernels. At the very top, we have the
Linux mainline that moves forward rapidly with all the
features and bug ﬁxes. Its kernel versions are tagged as
4.4, 4.5, etc. Periodically when appropriate, it gets
forked into stable (e.g., 4.3.y) or long term support
(LTS) branches (e.g., 4.4.y) with mostly only bug
ﬁxes [30]. The difference between stable and LTS
branches is that the former is short-lived (a few weeks)
while the latter is supported for a few years. For the
beneﬁt of longer support, Android common kernels
(e.g.,
follow the LTS branches.
Meanwhile, Google developers will add the necessary
changes for mobile devices to turn the Linux kernel into
an Android kernel [29]. In addition, the developers will
merge the ﬁxes from Linux to ensure that they stay
up-to-date and bug-free.
typically
4.4)
such
by SoC vendors
In Figure 1, Google’s Android common 4.4 is initially
forked from Linux mainline 4.4 and in the future merges
all the changes from Linux LTS 4.4.y. Then there are
branches maintained
as
Qualcomm, MediaTek, and Exynos (out of which only
Qualcomm provides the complete history in git repos).
Take Qualcomm as an example, when the company
decides to ship a new SoC like Snapdragon 830, it may
choose to fork a then-recent Android common 4.4.y. In
fact, there exists a generic 4.4.y branch and multiple
chipset-speciﬁc branches all maintained by Qualcomm
(simpliﬁed in Figure 1).
Interestingly, sometimes
Qualcomm may choose to fork directly from upstream
Linux (e.g., 4.9.y)
instead of Android common.
Nevertheless, it will still merge signiﬁcant changes from
Android common later on. According to our analysis,
SoC vendors typically take ﬁxes and security patches
from its direct upstream, Android common, instead of
Linux. This practice is reasonable as Google has already
done a signiﬁcant amount of work for the SoC vendors
such as patch compatibility tests for Android kernels.
However, this also increases the patch propagation delay
due to the extra hop.
3650    30th USENIX Security Symposium
USENIX Association
MainlineLTS 4.4.y4.4 Mainline  Fork Patch Patch propagation  Mi 6 4.4 4.4 Stable4.54.6...4.4Finally, at the very bottom of the hierarchy is the
OEM vendor kernel. Depending on the device model
and its chipset, e.g., a Xiaomi phone using Snapdragon
835, the corresponding branch from the SoC vendor will
be forked (Qualcomm’s 4.4.y). The OEM vendor may
then optionally add new features (e.g., Samsung’s kernel
hardening [39]) or simply only port bug ﬁxes from the
upstream (for smaller OEM vendors). However, when it
comes to security patches, OEM vendors tend to have a
tighter connection with Google who monthly updates its
Android security bulletin since 2015. According to our
knowledge, Google serves as the main point of contact
notifying OEM vendors
security
vulnerabilities even though the original patch may come
from other parties (e.g., Linux or Qualcomm). From Sep
2017, Qualcomm has also established its own security
bulletin and independently notiﬁes its customers about
Qualcomm-speciﬁc vulnerabilities
[18, 37], which
overlap with the ones on the Android security bulletin.
Android security bulletin is a central location where
Google publishes monthly updates on Android security
patches and their corresponding CVEs [1]. For the
CVEs affecting the open-source Android components
(for kernels, most are open-sourced except some
proprietary drivers, e.g., by MediaTek), there will be
links to the upstream kernel commits representing the
patches of the vulnerabilities.
various
about
It is worth noting that as Android kernels can be
customized by individual OEM vendors,
the bulletin
may not cover OEM-speciﬁc vulnerabilities (e.g., an
OEM device may use
system).
Nevertheless, it represents Google’s best effort to keep
track of vulnerabilities that affect the Android common
kernel, the upstream Linux kernel, and SOC vendors
(primarily Qualcomm).
In fact, each CVE has a
corresponding link to its patch (i.e., a git commit) that
belongs to one of the three kernel repositories.
custom ﬁle
Before publicizing the vulnerabilities on the Android
security bulletin, Google notiﬁes OEM vendors at least
one month earlier to ensure that affected devices are
the publication of
patched [2].
vulnerabilities
bulletin
represents a major event in the patch management cycle,
after which unpatched devices will be in danger. Indeed,
our measurement results suggest that OEM vendors are
dependent on Google for patching.
In other words,
on
the Android
security
a
3 Measurement Goal and Pipeline
As alluded to earlier, the goal of the measurement is to
shed light on the patch propagation in the fragmented
Android kernel ecosystem. In this paper, we explicitly
assume the knowledge of the affected function(s) and
the
upstream
source-level
itself,
patch
the
as
Linux/Android kernels do offer detailed patch commits.
As a result, our goal is that given a CVE, we will track
the propagation of the initial patch along the chain of
upstream-downstream kernels. Together with the CVE
publication time on the Android security bulletin, we
can paint a timeline of patch commit and announcement
events in the whole patch management cycle.
Before we introduce the measurement pipeline, we
ﬁrst introduce the three different types of kernels that
are publicly accessible, with increasing degrees of
difﬁculties to analyze.
(1) Type 1: Repository. Kernels made available
through git
repositories contain complete commit
history. They represent the easiest case to analyze as a
security patch can be easily located in the commit log
— typically they simply copy the commit message
and/or reference the commit given in the Android
security bulletin’s link.
Linux, Android common,
Qualcomm and Nexus/Pixel kernels belong to this
category. Unfortunately, other SoC vendors such as
Samsung Exynos, MediaTek, and Huawei Kirin do not
offer git repositories corresponding their recent chipsets.
(2) Type 2: Source code snapshots. Most OEM
vendors prefer to release their kernels in the form of
source
history
(Google’s own Nexus/Pixel phones are exceptions). It is
usually possible to check if a particular CVE is patched
in the snapshot via simple source-level
function
comparison (more details in §4.2). The issue though, is
that such snapshots are released with substantial delays
and often sporadically, leading to missing data points
and inconclusive results.
snapshots without
commit
code
(3) Type 3: Binary. The most available form of OEM
kernels is the binary one – ﬁrmware images or ROMs.
In fact, there is an abundant supply of Android ROMs
on both ﬁrst-party [9, 10] and third-party websites [7, 8].
These ROMs represent a valuable data source for patch
propagation analysis, as long as we can accurately test
patch presence in these binaries.
Measurement pipeline.
measurement pipeline (Figure 2) that
analysis of the above three kernel types:
Now we introduce the
integrates the
(1) Crawler. Initially, we crawl the kernel-related CVE
information from Google’s Android security bulletin [1].
This includes CVE numbers, speciﬁc patch commits, and
the corresponding repositories in which the patches were
committed.
(2) Patch locator. This is to analyze type 1 target
kernels (i.e., repositories). It attempts to determine if a
given patch (or a similar one) exists in a target kernel
repository (§4.1).
If so, it outputs the corresponding
patch commit in the repository, which then also serves
as the reference in the patch presence test for type 2 and
type 3 kernels.
USENIX Association
30th USENIX Security Symposium    3651
Figure 2: Measurement pipeline.
(3) Patch evolution tracker. The tracker tries to collect
all possible versions of a patched function (i.e.,
the
function can continue evolving after the security patch)
in the repositories,
this can help us reliably test the
patch presence in both type 2 (i.e., source snapshot) and
type 3 (i.e., binary) kernels.
It
(4) Source-level matcher.
tries to match each
patched function version (identiﬁed by the evolution
tracker) to the target function in a type 2 kernel, in order
to perform a source-level patch presence test (§4.2).
(5) E-FIBER. E-FIBER is capable of translating each
patched function version into a binary signature and then
matching the signature in type 3 binary kernel as a patch
presence test. We build E-FIBER on top of FIBER [42],
a state-of-the-art binary patch presence test system. We
will articulate the improvements we made over FIBER in
§4.3.
4 Patch Presence Test
In this section we will detail the methodology of patch
presence tests against the three kernel types.
To better facilitate the discussion of this paper, we
call the patch linked in Android security bulletin the
“linked upstream patch”, which can only be in type 1
kernels (repositories), i.e., Linux, Android commons,
Qualcomm. Interestingly, later we ﬁnd that these may
not be the earliest patches.
4.1 Repository Target
When our target is a repository, we search through the
commit history using the patch locator to test
the
presence of an equivalent patch.
Patch locator: We combine various information
about the original patch to determine its presence in the
target repository. Speciﬁcally, we have the following
procedure:
1) For each commit, we attempt to perform a simple
string match on the commit subject. If it is a patch they
borrow from the upstream,
the downstream kernels
typically retain the original subject. If there are multiple
hits, we use the commit message to identify the real
match. Typically, the downstream kernels will not only
copy the original commit message but also reference the
upstream commit, e.g., cherry picked from commit
XYZ. If no results are found, we perform the second step.
2) When commit subject and message are not retained
when applying the same patch in downstream, we
search through the commit history of the corresponding
patched ﬁle, attempting to match the complete source
level changes (including both the added/removed lines
as well as the context lines) with those in the original
patch. If still no match, we move to the next step.
In any of the above steps, if there are multiple results
returned, we manually identify the correct one by
inspecting the commit message (note that the message is
no longer exactly copied else the ﬁrst step would have
caught it). In addition, if no match is ever found after all
the steps, we attempt a manual search using parts of the