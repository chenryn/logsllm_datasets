insights 
faults 
and the components 
are the elements 
A decision 
tree has been preferred 
over 
because it is simple to interpret, 
and it 
on why the percentage 
of non-elusive 
is higher in some components. 
(CI), and the remaining 
those in which the percentage 
is negligible 
respectively 
faults 
in two classes, 
of non-elusive 
ones (C2), in order to discriminate 
non-elusive 
In fact, we observed 
analysis 
metrics 
than 5%. The dataset 
two classes 
that there are some differences 
when the percentage 
(50 and 46 components, 
of non-elusive 
is higher 
is composed by 96 components 
respectively). 
from a preliminary 
in the complexity 
components 
faults. 
with most 
faults 
in 
A decision 
tree (Figure 
13) is obtained 
from the whole 
[22]. The training 
algo­
in two parts, 
by choosing 
metric) 
the dataset 
classifies 
the training 
(i.e., complexity 
using the C4.5 algorithm 
dataset 
rithm iteratively 
splits 
an attribute 
most effectively 
on the subsets. 
then repeated 
resent questions about 
threshold 
a complexity 
a component, 
to a threshold 
first compared 
choose one of the two children 
for each node, until a leaf is reached. 
number of components 
of the training 
leaf, and the number of components 
value, and leafs represent 
complexity 
and a threshold 
that 
data; this operation 
is 
The root and inner nodes rep­
being over than a 
metrics 
class labels. 
To classify 
metric of the component 
specified 
is 
in the root node, to 
nodes; the same is repeated 
Figure 13 shows the 
set classified 
by each 
wrongly classified. 
By analyzing 
the structure 
of the tree, we can notice that 
is the metric most relevant 
to non­
the number of times a reference 
faults; 
InDepR (in the root node) 
elusive 
it represents 
to a symbol of the component 
other components. 
ponents 
faults 
:::; 22 for most components 
with non-elusive 
is found in 
In fact, InDepR is > 22 for most com­
(e.g., a function) 
(25 out of 46), and InDepR 
with a small percentage 
of 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
444 
DSN 2010: Natella et al. 
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
KEY: 
C1 = % non· elusive 
C2 = % non· elusive 
=5% 
phase; however, 
using the decision 
we simply classified 
tree. This evaluation 
that can be achieved. 
since the whole dataset 
91.67% of the components. 
in the faultload only faults 
in components 
,y ......   .. C1 (3/1) 
""",, ,;;;>5 ........ C2 (3/0) 
1 .....   C1 (7/0) 
negligible 
L.,.,..  _ _ .......... .;,>1;..,......",. C1 (10/0) 
a reduced number 
; .....   ..... _
set of faults). 
"""" ................................. >3;;;;40!""" ...... C2 (12/3) 
complex software 
locations 
9 .....  .....  ..... 9;;.... ...... C2(2/0) 
faults 
is high enough to still obtain statistically 
between number of injected 
and non-elusive 
for more fine-grained 
are needed to obtain a better 
is 
only components 
with a 
faults 
comes at the cost of 
Cl, 48 components), 
are non-elusive 
in which the number of fault 
signif­
we obtain 10,312 faults 
faults; 
and percentage 
of both elusive 
This does not seem to be a limitation 
lower than 14.57% when no filtering 
is caused by the 
in the same 
of injected faults 
amount of non-elusive 
However, including 
_ >9;.... ....... C1(4/0) 
identification 
(26.02% of the whole 
this percentage 
of non-elusive 
The trade-off 
techniques 
trade-off. 
If 
not 
systems, 
faults 
faults 
in 
Figure 13. Decision 
nents complexity 
metrics. 
tree based on compo­
Component list 
out of 50). This fact implies 
faults (42 
with a small InDepR contain 
non-elusive 
ponents 
non-elusive 
of faults 
component 
as in the case of the "sqLstring.cc" 
in a component 
can propagate 
to several 
faults. 
that com­
of 
with high InDepR (a fault in the 
This can be due to the higher "exposure" 
a small percentage 
other components), 
component 
functions 
(/nDepR 
for string 
1168), which provides 
utility 
1  C1 
2  C1 
51 C2 
52 C2 
to non-elusive 
is 
of non-elusive 
have a noticeable 
Another metric relevant 
faults 
When InDepR 
handling. 
AvgCyc (in both children 
nodes of the root). 
is low and AvgCyc is > 7, components 
percentage 
InDepR is high and AvgCyc is :::; 1, components 
percentage 
the "sqLtable.cc" 
for managing 
Therefore, 
those with low InDepR or low AvgCyc should be selected, 
since they contain 
from class C2, which provides 
with AvgCyc =  11. 
for fault injection, 
faults (9 out of 46), and when 
have a low 
is associated 
components 
SQL tables, 
when filtering 
(5 out of 50). For instance, 
a lower percentage 
of non-elusive 
of non-elusive 
faults. 
support 
faults 
Until this point, we analyzed 
the decision 
tree to identify 
of components 
containing 
we also want to investigate 
if the decision 
non-elusive 
However, 
the key features 
faults. 
tree can guide the selection 
should be filtered 
amount of non-elusive 
scenario, 
of the decision 
(class 
considered 
complexity 
metrics 
Cl) or not (class 
out (i.e., without 
a priori of components 
that 
the 
faults in the components). 
knowing beforehand 
In this 
are the input 
of a component 
tree, to decide if the component 
should be 
C2) in SFI. 
K-fold 
validation 
To obtain an initial 
evaluation 
of the non-elusive  faults 
An explanatory 
model of the data 
is built using all 
components 
Model 
accuracy is 
validated 
-& 
1:8:-: 
,1:8:-4 
1) ... C2 
[ill 
2) [ill 
K) [ill 
... C2 
... C2 
K sublists 
the same size 
of 
K different 
models are 
built, using 
K-1 sublists 
for training 
and 1 sublist 
for testing 
Average 
error 
L8: 
Figure 14. Model validation. 
Moreover, 
we evaluated 
the accuracy 
components 
of the model when 
in the 
not included 
[22] (Figure 
values and the tree structure 
we use it to discriminate 
dataset. 
In fact, the threshold 
may not be suited and need some tuning for each specific 
system. To this aim, we used the k-fold cross validation 
technique 
and then we evaluated 
fold when the remaining 
model. This approach 
accuracy 
in our dataset. 
sify 61.46% of components; 
14); we split the dataset 
the classification 
provides 
when it used to analyze 
of the model 
not included 
In this case, the tree is able to correctly 
clas­
9 folds are used for training 
using the decision 
an estimation 
components 
in 10 folds, 
accuracy 
tree to ana-
on each 
a 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
445 
DSN 2010: Natella et al. 
20lO IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
not in the dataset, 
the expected 
percentage 
non-elusive 
faults is 10.75%, which is still 
of non-elusive 
when no fil­
faults 
does not guarantee 
Although 
this result 
of the model with respect 
it increases 
our confidence 
in the use of 
to all complex 
lyze components 
of remaining 
lower than the percentage 
tering is performed. 
the effectiveness 
software 
complexity 
throughout 
research 
the specific 
to tune thresholds 
to further 
systems, 
metrics 
validation 
direction. 
on more software systems 
is a future 
Moreover, 
some kind of adaptation 
to 
system (e.g., by means of clustering 
in the model) can be potentially 
techniques 
exploited 
improve the effectiveness 
of filtering. 
for filtering non-elusive faults. 
A more 
scale Complex Critical 
http://dots-1ccLprin.
dis.unina.it),
DM1407. 
Infrastructures" 
(DOTS-LCCI, 
References 
[1] 1. Andrews et al. Using Mutation Analysis for  Assessing 
[2] 1. Arlat et al. Fault Injection 
and Comparing Testing Coverage Criteria. 
for Dependability 
IEEE TSE, 2006. 
Validation: 
A Methodology and Some Applications. 
1990. 
IEEE TSE, 16(2), 
[3] A. Avizienis et al. Basic Concepts and Taxonomy of 
Dependable and Secure Computing. IEEE TDSC, 2004. 
[4] V. Basili and B. Perricone. 
An Empirical Investigation. 
Software Errors and Complexity: 
and K. Prasad. Test and Development Process 
Comm. ACM, 27(1), 1984. 
[5] R. Chillarege 
Retrospective-a 
DSN,2002. 
Case Study using ODC Triggers. 
In Proc. 
[6] R. Chillarege 
et al. Orthogonal Defect Classification-A 
Measurements. 
IEEE TSE, 18(11), 
how the representativeness 
of 
by means 
and improved, 
representative 
faults. 
We 
Concept for In-Process 
1992. 
[7] 1. Christmansson 
extent of the issue and the effectiveness 
of 
and R. Chillarege. 
Generation 
of an Error 
Set that Emulates Software Faults based on Field Data. In 
Proc. FTCS, 1996. 
[8] 1. Duraes and H. Madeira. Characterization 
of Operating 
Systems Behavior in the Presence of Faulty Drivers through 
Software Fault Emulation. 
In Proc. EDCC, 2002. 
[9] 1. Duraes and H. Madeira. Generic Faultloads 
Benchmarking. 
Based on 
In Proc. 
[10] 1. Duraes and H. Madeira. Emulation of Software Faults: A 
Approach. IEEE TSE, 2006. 
Software Faults for Dependability 
DSN,2004. 
Field Data Study and a Practical 
[11] N. Fenton and N. Ohlsson. Quantitative 
Analysis of Faults 
and Failures in a Complex Software System. IEEE TSE, 
26(8), 2000. 
[12] 1. Gray. Why Do Computers Stop and What Can Be Done 
[13] W. Howden. Weak Mutation Testing and Completeness 
Report TANDEM TR-85.7, 1985. 
About It? Technical 
of 
case study, in the 
(G-SWFIT) and a 
system (MySQL). 
and stay hidden (elusiveness). 
to their ability 
to elude 
Experimental 
results 
elude more than 50% 
way 
G-SWFIT as an effective 
To cope with the remaining 
we proposed 
out components 
with a large 
the use of com­
We observed 
a relationship 
and the occurrence 
of non-elusive 
InDepR and AvgCyc). We exploited 
this 
faults 
6 Conclusion 
faults 
with respect 
This paper investigated 
faults can be analyzed 
for selecting 
in of a real-world 
SF! technique 
injected 
of a set of  criteria 
evaluated  the 
the proposed criteria 
context of an existing 
complex and widely used open-source 
Faults were analyzed 
testing 
show that 85.43% of injected 
of test cases, thus supporting 
to emulate software 
non-elusive 
plexity 
metrics 
extent of non-elusive 
between metrics 
(in particular, 
relationship 
faults; 
age of non-elusive 
can be potentially 
that the refinement 
elimination 
tativeness 
techniques 
(14.57%), 
for filtering 
faults. 
of results 
that use the injection 
of non-elusive 
obtained 
using a very simple classifier, 
components 
to identify 
faults. 
faults 
Acknowledgment 
containing 
the expected 
percent­
non-elusive 
Test Sets. IEEE TSE, 1982. 
[14] T. larboui et al. Analysis of the Effects of Real and Injected 
faults was reduced to 10.75%, which 
improved 
of faultloads 
down to 2.55%. We believe 
made possible 
will improve the represen­
through 
faults 
this 
Software Faults: Linux as a Case Study. In Proc. EDCC, 
2002. 
[15] H. Madeira, D. Costa, and M. Vieira. On the Emulation of 
In Proc. DSN, 
Software Faults by Software Fault Injection. 
2000. 
in dependability 
assessment 
[16] M. Moraes et al. Injection 
of Faults at Component Interfaces 
of software 
faults. 
and Inside the Component Code: Are They Equivalent? 
Proc. EDCC, 2006. 
In 
[17] M. Moraes et al. Experimental 
[18] T. Ostrand and E. Weyuker. The Distribution 
parison Using Software Fault Injection. 
Risk Assessment and Com­
In Proc. DSN, 2007. 
of Faults in a 
Software System. In Proc. ISSTA, 2002. 
Large Industrial 
[19] D. Sheskin. Handbook of Parametric and Nonparametric 
TEP, http://www.critical­
[20] M. Sullivan and R. Chillarege. 
Software Defects and their 
Statistical 
Procedures. 
2004. 
Marie Curie Industry-Academia Partnerships 
This work has been partially 
supported 
by the project 
Technology for an Evolutionary 
(CRITICAL-S
"CRITICAL Software 
Partnership" 
and 
step.eu), 
Pathways (lAPP) number 230672, within the context 
of 
the Seventh Framework 
Programme  (FP7), 
and by the 
Italian 
for Education, 
(MIUR) within the framework 
Off-The-Shelf 
based middleware 
systems for Large-
University, 
of the project 
Ministry 
and Research 
"Dependable 
Impact on System Availability-A 
in Operating Systems. In Proc. FTCS, 1991. 
Study of Field Failures 
[21] M. Vieira and H. Madeira. A Dependability 
Benchmark for 
OLTP Application 
Environments. 
In Proc. VLDB, 2003. 
[22] I. Witten and E. Frank. Data Mining: Practical 
Machine 
Learning Tools and Techniques. 
2005. 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
446 
DSN 20lO: Natella et al.