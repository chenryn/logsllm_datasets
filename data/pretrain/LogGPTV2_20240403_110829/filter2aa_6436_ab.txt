    runtime
```
provided 依赖表示编译时需要，但运行时不需要。最典型的 provided 依赖是 Servlet API，编译的时候需要，但是运行时，Servlet 服务器内置了相关的 jar，所以运行期不需要：
```xml
    javax.servlet
    javax.servlet-api
    4.0.0
    provided
```
Maven 如何知道从何处下载所需的依赖？也就是相关的 jar 包？答案是 Maven 维护了一个中央仓库（repo1.maven.org），所有第三方库将自身的 jar 以及相关信息上传至中央仓库，Maven 就可以从中央仓库把所需依赖下载到本地。
Maven 并不会每次都从中央仓库下载 jar 包。一个 jar 包一旦被下载过，就会被 Maven 自动缓存在本地目录（用户主目录的. m2 目录），所以，除了第一次编译时因为下载需要时间会比较慢，后续过程因为有本地缓存，并不会重复下载相同的 jar 包。
### 唯一ID
对于某个依赖，Maven 只需要 3 个变量即可唯一确定某个 jar 包：
* groupId：属于组织的名称，类似 Java 的包名；
* artifactId：该 jar 包自身的名称，类似 Java 的类名；
* version：该 jar 包的版本。
通过上述 3 个变量，即可唯一确定某个 jar 包。Maven 通过对 jar 包进行 PGP 签名确保任何一个 jar 包一经发布就无法修改。修改已发布 jar 包的唯一方法是发布一个新版本。
因此，某个 jar 包一旦被 Maven 下载过，即可永久地安全缓存在本地。
注：只有以 -SNAPSHOT 结尾的版本号会被 Maven 视为开发版本，开发版本每次都会重复下载，这种 SNAPSHOT 版本只能用于内部私有的 Maven repo，公开发布的版本不允许出现 SNAPSHOT。
---
## Maven镜像
国内用户可以使用阿里云提供的 Maven 镜像仓库。使用 Maven 镜像仓库需要一个配置，进入maven 的conf目录，编辑 settings.xml 配置文件，内容如下：
```xml
  aliyunmaven
  *
  阿里云公共仓库
  https://maven.aliyun.com/repository/public
```
配置镜像仓库后，Maven的下载速度就会非常快。
如果是 idea 自带的,根据 idea 里的配置来改
具体可以参考阿里云的教程
- https://developer.aliyun.com/mvn/guide
---
## 命令行编译
在命令中，进入到 pom.xml 所在目录，输入以下命令：
```
mvn clean package
```
如果一切顺利，即可在 target 目录下获得编译后自动打包的 jar。
---
## lifecycle
### phase
Maven 的生命周期由一系列阶段（phase）构成，以内置的生命周期 default 为例，它包含以下 phase：
* validate
* initialize
* generate-sources
* process-sources
* generate-resources
* process-resources
* compile
* process-classes
* generate-test-sources
* process-test-sources
* generate-test-resources
* process-test-resources
* test-compile
* process-test-classes
* test
* prepare-package
* package
* pre-integration-test
* integration-test
* post-integration-test
* verify
* install
* deploy
如果我们运行 mvn package，Maven 就会执行 default 生命周期，它会从开始一直运行到 package 这个 phase 为止：
* validate
* ...
* package
如果我们运行 mvn compile，Maven 也会执行 default 生命周期，但这次它只会运行到 compile，即以下几个 phase：
* validate
* ...
* compile
Maven 另一个常用的生命周期是 clean，它会执行 3 个 phase：
* pre-clean
* clean （注意这个clean不是lifecycle而是phase）
* post-clean
所以，我们使用 mvn 这个命令时，后面的参数是 phase，Maven 自动根据生命周期运行到指定的 phase。
更复杂的例子是指定多个 phase，例如，运行 mvn clean package，Maven 先执行 clean 生命周期并运行到 clean 这个 phase，然后执行 default 生命周期并运行到 package 这个 phase，实际执行的 phase 如下：
* pre-clean
* clean （注意这个 clean 是 phase）
* validate
* ...
* package
在实际开发过程中，经常使用的命令有：
```
mvn clean           清理所有生成的 class 和 jar；
mvn clean compile   先清理，再执行到 compile；
mvn clean test      先清理，再执行到 test，因为执行 test 前必须执行 compile，所以这里不必指定 compile；
mvn clean package   先清理，再执行到 package。
```
大多数 phase 在执行过程中，因为我们通常没有在 pom.xml 中配置相关的设置，所以这些 phase 什么事情都不做。
经常用到的 phase 其实只有几个：
* clean：清理
* compile：编译
* test：运行测试
* package：打包
### Goal
| 执行的 Phase	    | 对应执行的 Goal |
| - | - |
| compile	        | compiler:compile |
| test	            | compiler:testCompile && surefire:test |
goal 的命名总是 abc:xyz 这种形式。
lifecycle 相当于 Java 的 package，它包含一个或多个 phase；
phase 相当于 Java 的 class，它包含一个或多个 goal；
goal 相当于 class 的 method，它其实才是真正干活的。
大多数情况，我们只要指定 phase，就默认执行这些 phase 默认绑定的 goal，只有少数情况，我们可以直接指定运行一个 goal，例如，启动 Tomcat 服务器：
```
mvn tomcat:run
```
---
## 插件
使用 Maven 构建项目就是执行 lifecycle，执行到指定的 phase 为止。每个 phase 会执行自己默认的一个或多个 goal。goal 是最小任务单元。
我们以 compile 这个 phase 为例，如果执行：
```
mvn compile
```
Maven 将执行 compile 这个 phase，这个 phase 会调用 compiler 插件执行关联的 compiler:compile 这个 goal。
实际上，执行每个 phase，都是通过某个插件（plugin）来执行的，Maven 本身其实并不知道如何执行 compile，它只是负责找到对应的 compiler 插件，然后执行默认的 compiler:compile 这个 goal 来完成编译。
所以，使用 Maven，实际上就是配置好需要使用的插件，然后通过 phase 调用它们。
Maven已经内置了一些常用的标准插件：
| 插件名称	    | 对应执行的phase |
| - | - |
| clean	        | clean |
| compiler	    | compile |
| surefire	    | test |
| jar	        | package |
---
## 模块管理
在软件开发中，把一个大项目分拆为多个模块是降低软件复杂度的有效方法：
对于 Maven 工程来说，原来是一个大项目，现在可以分拆成 3 个模块：
```
mutiple-project
├── module-a
│   ├── pom.xml
│   └── src
├── module-b
│   ├── pom.xml
│   └── src
└── module-c
    ├── pom.xml
    └── src
```
如果模块 A 和模块 B 的 pom.xml 高度相似，那么，我们可以提取出共同部分作为 parent：
```
multiple-project
├── pom.xml
├── parent
│   └── pom.xml
├── module-a
│   ├── pom.xml
│   └── src
├── module-b
│   ├── pom.xml
│   └── src
└── module-c
    ├── pom.xml
    └── src
```
模块 B、模块 C 都可以直接从 parent 继承，大幅简化了 pom.xml 的编写。
如果模块 A 依赖模块 B，则模块 A 需要模块 B 的 jar 包才能正常编译，我们需要在模块 A 中引入模块 B
```xml
    ...
            com.itranswarp.learnjava
            module-b
            1.0
```
最后，在编译的时候，需要在根目录创建一个 pom.xml 统一编译：
```xml
    4.0.0
    com.itranswarp.learnjava
    build
    1.0
    pom
    build
        parent
        module-a
        module-b
        module-c