    PACGA      X1, X5, X1
    LDR       X2, [X0,#0x88]
从`struct arm_kernel_saved_state`结构体提取pac code。
    CMP       X1, X2
    B.NE       loc_FFFFFFF008139B14
    RET
相同返回上层函数。
    __TEXT_EXEC:__text:FFFFFFF008139B14 ;
    PACIBSP
    STP       X29, X30, [SP,#var_10]!
    MOV       X29, SP
    BL        _panic
不相同则panic系统。
    LDR       X5, [X2,#0x4F8]
    MOV       W6, #0
    LDR       X3, [X2,#0x508]
    LDR       X4, [X5,#0x200]
    CMP       X3, X4
    B.EQ       loc_FFFFFFF008138B48
    STR       X3, [X5,#0x200]
    MSR       #0, c2, c1, #2, X3 ; APIBKeyLo_EL1
    ADD       X3, X3, #1
    MSR       #0, c2, c1, #3, X3 ; APIBKeyHi_EL1
    ADD       X3, X3, #1
    MSR       #0, c2, c2, #2, X3 ; APDBKeyLo_EL1
    ADD       X3, X3, #1
    MSR       #0, c2, c2, #3, X3 ; APDBKeyHi_EL1
加载新进程的pac key到对应的系统寄存器。
## 内核pac与用户进程pac切换
### 进入内核
进程每次通过系统调用进入内核或者发生错误进入内核异常处理流程时，需要把进程的pac key切换为内核的pac key。
    __TEXT_EXEC:__text:FFFFFFF008131410 fleh_dispatch64
    MOVK       X2, #0xFEED,LSL#48
    MOVK       X2, #0xFACE,LSL#32
    MOVK       X2, #0xFEED,LSL#16
    MOVK       X2, #0xFAD5 ; 0xFEEDFACEFEEDFAD5
    MRS       X3, #0, c13, c0, #4 ; TPIDR_EL1
    LDR       X3, [X3,#0x4F8]
    LDR       X4, [X3,#0x208]
    CMP       X2, X4
    B.EQ       loc_FFFFFFF0081314F0
    MSR       #0, c2, c1, #0, X2 ; APIAKeyLo_EL1
    ADD       X4, X2, #1
    MSR       #0, c2, c1, #1, X4 ; APIAKeyHi_EL1
    ADD       X4, X4, #1
    MSR       #0, c2, c2, #0, X4 ; APDAKeyLo_EL1
    ADD       X4, X4, #1
    MSR       #0, c2, c2, #1, X4 ; APDAKeyHi_EL1
    STR       X2, [X3,#0x208]
在进入内核时，首先要更新`APIAKey_EL1`和`APDAKey_EL1`为固定值0xFEEDFACEFEEDFAD5极其增值。
    MOV       X21, X1
    MOV       X20, X30
    MOV       X1, X22
    MOV       W2, W23
    MOV       X3, X20
    MOV       X4, X16
    MOV       X5, X17
    BL        _ml_sign_thread_state
更新完pac key值，马上对当前进程的thread state进行签名。
### 退出内核
    __TEXT_EXEC:__text:FFFFFFF00813197C exception_return_unint_tpidr_x3_dont_trash_x18
    MOV       X0, SP
    LDR       W2, [X0,#arg_110]
    LDR       X1, [X0,#arg_108]
    LDP       X16, X17, [X0,#arg_88]
    MOV       X22, X3
    MOV       X23, X4
    MOV       X24, X5
    MOV       X20, X1
    MOV       X21, X2
    LDR       X3, [X0,#arg_F8]
    MOV       X4, X16
    MOV       X5, X17
    BL        _ml_check_signed_state
在退出内核到用户态前，需要再次校验下当前进程的thread state，如果发生错误，则panic系统。
    LDR       X1, [X2,#0x510]
    LDR       X2, [X2,#0x4F8]
    LDR       X3, [X2,#0x208]
    CMP       X1, X3
    B.EQ       loc_FFFFFFF008131A3C
    MSR       #0, c2, c1, #0, X1 ; APIAKeyLo_EL1
    ADD       X3, X1, #1
    MSR       #0, c2, c1, #1, X3 ; APIAKeyHi_EL1
    ADD       X3, X3, #1
    MSR       #0, c2, c2, #0, X3 ; APDAKeyLo_EL1
    ADD       X3, X3, #1
    MSR       #0, c2, c2, #1, X3 ; APDAKeyHi_EL1
    STR       X1, [X2,#0x208]
恢复进程使用的pac key。
## 进程thread state pac的初始化
前面提到在进程切换时，需要验证进程的thread state pac，那么它是在何时初始化的呢？
答案在进程初始化stack时进行thread state的pac计算。
    _machine_stack_attach
    STR       X1, [X0,#0x78] ; struct arm_kernel_saved_state->pc
    MOV       X2, #0x100004
    STR       W2, [X0,#0x80] ; struct arm_kernel_saved_state->cpsr
    ADRL       X3, _thread_continue
    STR       X3, [X0,#0x68] ; struct arm_kernel_saved_state->lr
    MOV       X4, XZR
    MOV       X5, XZR
    STP       X4, X5, [X0]
    MOV       X6, X30
    BL        _ml_sign_kernel_thread_state ; sign thread state.
## Ppl相关
Ppl提供了两个服务用来给用户进程数据进行签名与验签。
### _pmap_sign_user_ptr
    __TEXT_EXEC:__text:FFFFFFF007B609A0 _pmap_sign_user_ptr
    ADD       X29, SP, #0x30
    MOV       X19, X0
    MRS       X23, #3, c4, c2, #1 ; DAIFSet
    TBNZ       W23, #7, loc_FFFFFFF007B609D0 ; TPIDR_EL1
    MSR       #6, #7
关闭DAIF中断
    MRS       X8, #0, c13, c0, #4 ; TPIDR_EL1
    LDR       X8, [X8,#0x4F8]
    LDR       X20, [X8,#0x208]
    MOV       W0, #0
    MOV       X1, X3
    BL        _ml_set_kernelkey_enabled
将0作为参数传递给`_ml_set_kernelkey_enabled`。
    __TEXT_EXEC:__text:FFFFFFF008139374 _ml_set_kernelkey_enabled        
    MRS       X2, #0, c13, c0, #4 ; TPIDR_EL1
    LDR       X2, [X2,#0x4F8]
    LDR       X3, [X2,#0x208]
    CMP       X1, X3
    B. EQ       loc_FFFFFFF0081393A8 ; S3_4_C15_C0_4
如果当前进程的pac key和用户传递进来的pac key相等，则直接跳转到后面。
    MSR       #0, c2, c1, #0, X1 ; APIAKeyLo_EL1
    ADD       X3, X1, #1
    MSR       #0, c2, c1, #1, X3 ; APIAKeyHi_EL1
    ADD       X3, X3, #1
    MSR       #0, c2, c2, #0, X3 ; APDAKeyLo_EL1
    ADD       X3, X3, #1
    MSR       #0, c2, c2, #1, X3 ; APDAKeyHi_EL1
    STR       X1, [X2,#0x208]
依次切换系统寄存器`APIAKey_EL1`、`APDAKey_EL1`，可以看到ppl只用key A来签名用户代码或数据。
    MRS       X1, #4, c15, c0, #4 ; S3_4_C15_C0_4
    ORR       X3, X1, #4
    AND       X2, X1, #0xFFFFFFFFFFFFFFFB
    CMP       W0, #0
    CSEL       X1, X2, X3, EQ
    MSR       #4, c15, c0, #4, X1 ; S3_4_C15_C0_4
    ISB
    RET
如果传递给`_ml_set_kernelkey_enabled`函数的第一个参数为0，那么将`S3_4_C15_C0_4`的第3个bit置0，否则置1。
回到`_pmap_sign_user_ptr`
    CMP       W22, #2
    B.EQ       loc_FFFFFFF007B609FC
    CBNZ       W22, loc_FFFFFFF007B60A34
    PACIA      X19, X21
    B        loc_FFFFFFF007B60A00
    PACDA      X19, X21
如果第2个参数为2，则使用pacda对第1个参数签名，如果为0，使用pacia进行签名，如果不是0，也不是2， 则panic系统。
    MOV       W0, #1
    MOV       X1, X20
    BL        _ml_set_kernelkey_enabled
将1作为参数传递给`_ml_set_kernelkey_enabled`。
    _ml_set_kernelkey_enabled(0, pac_key)
    ...
    Pacia/pacib
    ...
    _ml_set_kernelkey_enabled(1, pac_key)
因此我们可以推测出`S3_4_C15_C0_4`的第2个bit为上锁功能， 0代表上锁，1代表解锁。
### _pmap_auth_user_ptr
    AUTIA      X19, X21
    B        loc_FFFFFFF007B60AD4
    AUTDA      X19, X21
    B        loc_FFFFFFF007B60AD4
    AUTDB      X19, X21
    B        loc_FFFFFFF007B60AD4
    AUTIB      X19, X21
这里我们看到`_pmap_auth_user_ptr`在验签的时候还使用了key b，而`_ml_set_kernelkey_enabled`只设置了key
a， 说明了key a是进程相关的，而key b是进程不相关的， XNU源码里定义了以下几种类型的pac key：
    EXTERNAL_HEADERS/ptrauth.h
    typedef enum {
     ptrauth_key_asia = 0,
     ptrauth_key_asib = 1,
     ptrauth_key_asda = 2,
     ptrauth_key_asdb = 3,
     /* A process-independent key which can be used to sign code pointers.
       Signing and authenticating with this key is a no-op in processes
       which disable ABI pointer authentication. */
     ptrauth_key_process_independent_code = ptrauth_key_asia,
     /* A process-specific key which can be used to sign code pointers.
       Signing and authenticating with this key is enforced even in processes
       which disable ABI pointer authentication. */
     ptrauth_key_process_dependent_code = ptrauth_key_asib,
     /* A process-independent key which can be used to sign data pointers.
       Signing and authenticating with this key is a no-op in processes
       which disable ABI pointer authentication. */
     ptrauth_key_process_independent_data = ptrauth_key_asda,
     /* A process-specific key which can be used to sign data pointers.
       Signing and authenticating with this key is a no-op in processes
       which disable ABI pointer authentication. */
     ptrauth_key_process_dependent_data = ptrauth_key_asdb,
     /* The key used to sign C function pointers.
       The extra data is always 0. */
     ptrauth_key_function_pointer = ptrauth_key_process_independent_code,
     /* The key used to sign return addresses on the stack.
       The extra data is based on the storage address of the return address.
       On ARM64, that is always the storage address of the return address plus 8
       (or, in other words, the value of the stack pointer on function entry) */
     ptrauth_key_return_address = ptrauth_key_process_dependent_code,
     /* The key used to sign frame pointers on the stack.
       The extra data is based on the storage address of the frame pointer.
       On ARM64, that is always the storage address of the frame pointer plus 16
       (or, in other words, the value of the stack pointer on function entry) */
     ptrauth_key_frame_pointer = ptrauth_key_process_dependent_data,
     /* The key used to sign block function pointers, including:
        invocation functions,
        block object copy functions,
        block object destroy functions,
        __block variable copy functions, and
        __block variable destroy functions.
       The extra data is always the address at which the function pointer
       is stored.
       Note that block object pointers themselves (i.e. the direct
       representations of values of block-pointer type) are not signed. */
     ptrauth_key_block_function = ptrauth_key_asia,
     /* The key used to sign C++ v-table pointers.
       The extra data is always 0. */
     ptrauth_key_cxx_vtable_pointer = ptrauth_key_asda,
     /* Other pointers signed under the ABI use private ABI rules. */
    } ptrauth_key;
* * *