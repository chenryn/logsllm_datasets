# Life Management
## [Life review](life_review.md)
* New: How to review your life.
    Sometimes is good to stop, get into your cave and do an introspection on how is
    your life going.
    I like to do this exercise the last week of the year. Although I'd like to do it
    at least twice a year.
    This article is the checklist I follow to do my life review, it may seem a lot
    to you or maybe very simple. You can take it as a base or maybe to get some
    ideas and then create your own that fits your needs.
    The process then has many phases:
    - [Housekeeping](life_review.md#housekeeping)
    - [Analysis](life_review.md#analysis)
    - [Planning](life_review.md#planning)
# Coding
## Languages
### [Libraries](python_gnupg.md)
* New: Introduce python gnupg.
    [python-gnupg](https://github.com/vsajip/python-gnupg) is a Python library to
    interact with `gpg` taking care of the internal details and allows its users to
    generate and manage keys, encrypt and decrypt data, and sign and verify
    messages.
    [Installation](https://github.com/vsajip/python-gnupg#installing-from-pypi):
    ```bash
    pip install python-gnupg
    ```
    [Usage](https://gnupg.readthedocs.io/en/latest/#getting-started):
    ```python
    gpg = gnupg.GPG(gnupghome="/path/to/home/directory")
    gpg.decrypt("path/to/file")
    public_keys = gpg.list_keys()
    private_keys = gpg.list_keys(True)
* Correction: Use `decrypt_file` instead of `decrypt` for files.
    ```python
    gpg.decrypt_file("path/to/file")
    ```
    Note: You can't pass `Path` arguments to `decrypt_file`.
### [Pytest](pytest.md)
* Correction: Remove warning that `pytest-random-order` can't be used with `pytest-xdist`.
    The issue was fixed
### [Python Snippets](python_snippets.md)
* New: [Get common elements of two lists.](python_snippets.md#get-common-elements-of-two-lists)
    ```python
    >>> a = ['a', 'b']
    >>> b = ['c', 'd', 'b']
    >>> set(a) & set(b)
    {'b'}
    ```
* New: [Recursively find files.](python_snippets.md#recursively-find-files)
    ```python
    from pathlib import Path
    for path in Path("src").rglob("*.c"):
        print(path.name)
    ```
* New: [Print an exception using the logging module.](python_snippets.md#using-the-logging-module)
    Logging an exception can be done with the module-level function
    `logging.exception()` like so:
    ```python
    import logging
    try:
        1 / 0
    except BaseException:
        logging.exception("An exception was thrown!")
    ```
    ```
    ERROR:root:An exception was thrown!
    Traceback (most recent call last):
    File ".../Desktop/test.py", line 4, in 
        1/0
    ZeroDivisionError: division by zero
    ```
    Notes
    - The function `logging.exception()` should only be called from an exception
      handler.
    - The logging module should not be used inside a logging handler to avoid a
      `RecursionError`.
    It's also possible to log the exception with another log level but still show
    the exception details by using the keyword argument `exc_info=True`, like so:
    ```python
    logging.critical("An exception was thrown!", exc_info=True)
    logging.error("An exception was thrown!", exc_info=True)
    logging.warning("An exception was thrown!", exc_info=True)
    logging.info("An exception was thrown!", exc_info=True)
    logging.debug("An exception was thrown!", exc_info=True)
    logging.log(level, "An exception was thrown!", exc_info=True)
    ```
* New: [Print an exception with the traceback module.](python_snippets.md#with-the-traceback-module)
    The `traceback` module provides methods for formatting and printing exceptions
    and their tracebacks, e.g. this would print exception like the default handler
    does:
    ```python
    import traceback
    try:
        1 / 0
    except Exception:
        traceback.print_exc()
    ```
    ```python
    Traceback (most recent call last):
      File "C:\scripts\divide_by_zero.py", line 4, in 
        1/0
    ZeroDivisionError: division by zero
    ```
### [Elasticsearch](python_elasticsearch.md)
* New: Introduce python elasticsearch library.
    [Python elasticsearch](https://elasticsearch-py.readthedocs.io/en/latest/) is
    the Official low-level client for Elasticsearch. Its goal is to provide common
    ground for all Elasticsearch-related code in Python; because of this it tries to
    be opinion-free and very extendable.
    [Installation](https://elasticsearch-py.readthedocs.io/en/latest/#installation):
    ```bash
    pip install elasticsearch
    ```
    Usage:
    ```python
    from elasticsearch import Elasticsearch
    client = Elasticsearch("http://localhost:9200")
    +client.indices.get(index="*")
    resp = client.search(index="test-index", query={"match_all": {}})
    documents = resp.body["hits"]["hits"]
    doc = {"partial_document": "value"}
    resp = client.update(index=INDEX, id=id_, doc=doc)
    ```
## [Git](git.md)
* New: [Revert a commit.](git.md#revert-a-commit)
    ```bash
    git revert commit_id
    ```
* New: [Get interesting stats of the repo.](git.md#get-interesting-stats-of-the-repo)
    [Number of commits of the last year per user](https://stackoverflow.com/questions/31190474/how-to-count-git-commits-per-user-in-a-date-range):
    ```bash
    git shortlog -sne --since="31 Dec 2020" --before="31 Dec 2021"
    ```
    You can also use [`git-fame`](https://github.com/casperdcl/git-fame#usage) to
    extract a more detailed report:
    ```bash
    $: git-fame --since 1.year --cost hour --loc ins -w -M -C
    | Author          |   hrs |   loc |   coms |   fils |  distribution   |
    |:----------------|------:|------:|-------:|-------:|:----------------|
    | Lyz             |    10 | 28933 |    112 |    238 | 64.1/33.3/75.8  |
    | GitHub Action   |     2 | 16194 |    220 |     73 | 35.9/65.5/23.2  |
    | Alexander Gil   |     2 |     9 |      1 |      1 | 0.0/ 0.3/ 0.3   |
    | n0rt3y5ur       |     2 |     1 |      1 |      1 | 0.0/ 0.3/ 0.3   |
    | Guilherme Danno |     2 |     1 |      1 |      1 | 0.0/ 0.3/ 0.3   |
    | lyz-code        |     2 |     0 |      1 |      0 | 0.0/ 0.3/ 0.0   |
    ```
    You can use `pipx install git-fame` to install it.
# DevOps
## Hardware
### [CPU](cpu.md)
* New: [Installation tips for CPU.](cpu.md#installation)
    When installing an AM4 CPU in the motherboard, rotate the CPU so that the small
    arrow on one of the corners of the chip matches the arrow on the corner of the
    motherboard socket.
# Operating Systems