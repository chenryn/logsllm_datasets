&& mapped_path[1] == '\0'))
strcat (mapped_path, "/");
strcat (mapped_path, dir);
}
8  Advisories  for 
http://www.cert.org/advisories/CA-1999-13.html 
ftp://www.auscert.org.au/security/advisory/AA-
1999.01.wu-ftpd.mapping_chdir.vul.  
this  vulnerability  can  be  found  at 
and 
LCLint  generates  warnings  for  the  unsafe  calls  to 
strcat.  This was fixed in latter versions of wu-ftpd by 
calling strncat instead of strcat.  
Because  of  the  limitations  of  static  checking,  LCLint 
sometimes  generates  spurious  error  messages.    If  the 
user  believes  the  code  is  correct,  annotations  can  be 
added to precisely suppress spurious messages.   
Often the code was too complex for LCLint to analyze 
correctly.    For  example,  LCLint  reports  a  spurious 
warning  for 
it  cannot 
determine  that  ((1.0*j*rand()) / (RAND_MAX +
1.0)) always produces a value between 1 and j: 
this  code  fragment  since 
i = passive_port_max
– passive_port_min + 1;
port_array = calloc (i, sizeof (int));
for (i = 3; … && (i > 0); i--) {
for (j = passive_port_max
– passive_port_min + 1;
… && (j > 0); j--) {
k = (int) ((1.0 * j * rand())
/ (RAND_MAX + 1.0));
pasv_port_array [j-1]
= port_array [k];
Determining that the port_array[k] reference is safe 
would  require  far  deeper  analysis  and  more  precise 
specifications than is feasible within a lightweight static 
checking tool. 
Detecting  buffer  overflows  with  LCLint  is  an  iterative 
process.      Many  of  the  constraints  we  found  involved 
functions  that  are  potentially  unsafe.    We  added 
function preconditions to satisfy these constraints where 
possible.  In certain cases, the code was too convoluted 
for LCLint to determine that our preconditions satisfied 
the  constraints.    After  convincing  ourselves  the  code 
was  correct,  we  added  annotations  to  suppress  the 
spurious warnings. 
Before any annotations were added, running LCLint on 
wu-ftpd resulted in 243 warnings each corresponding to 
an unresolved constraint.   We added 22 annotations to 
the source code through an iterative process similar to 
the  examples  described  above.    Nearly  all  of  the 
annotations  were  used 
indicate  preconditions 
constraining 
function 
parameters.   
After adding these annotations and modifying the code, 
running  LCLint  produced  143  warnings.    Of  these,  88 
reported  unresolved  constraints 
involving  maxSet.  
While  we  believe  the  remaining  warnings  did  not 
indicate  bugs  in  wu-ftpd,  LCLint’s  analyses  were  not 
sufficiently  powerful  to  determine  the  code  was  safe.  
Although this is a higher number of spurious warnings 
than we would like, most of the spurious warnings can 
the  value  of  maxSet 
to 
for 
be quickly understood and suppressed by the user.  The 
source code contains 225 calls to the potentially buffer 
overflowing  functions  strcat,  strcpy,  strncat, 
strncpy, fgets and gets.  Only 18 of the unresolved 
warnings resulted from calls to these functions.  Hence, 
LCLint is able to determine that 92% of these calls are 
safe  automatically.    The  other  warnings  all  dealt  with 
classes of problems that could not be detected through 
simple lexical techniques.  
4.2 BIND 
BIND is a key component of the Internet infrastructure.  
Recently,  the  Wall  Street  Journal  identified  buffer 
overflow  vulnerabilities  in  BIND  as  a  critical  threat  to 
the  Internet  [WSJ01].    We  focus  on  named,  the  DNS 
sever portion of BIND, in this case study.  We analyzed 
BIND  version  8.2.2p79,  a  version  with  known  bugs.  
BIND  is  larger  and  more  complex  than  wu-ftpd.  The 
name  server  portion  of  BIND,  named,  contains 
approximately 47 000 lines of C including shared libra-
ries.  LCLint took less than three and a half minutes to 
check all of the named code.   
We limited our analysis to a subset of named because 
of the time required for human analysis. We focused on 
three  files:  ns_req.c  and  two  library  files  that  contain 
functions  which  are  called  extensively  by  ns_req.c:  
ns_name.c and  ns_sign.c.  These files contain slightly 
more than 3 000 lines of code. 
BIND  makes  extensive  use  of  functions  in  its  internal 
library  rather  than  C  library  functions.  In  order  to 
accurately  analyze  individual  files,  we  needed  to 
annotate  the  library  header  files.    The  most  accurate 
way to annotate the library would be to iteratively run 
LCLint  on  the  library  and  add  annotations.    However, 
the  library  was  extremely  large  and  contains  deeply 
nested  call  chains.    To  avoid  the  human  analysis  this 
would  require,  we  added  annotations  to  some  of  the 
library  functions  without  annotating  all  the  dependent 
functions.    In  many  cases,  we  were  able  to  guess 
preconditions  by  using  comments  or  the  names  of 
function  parameters.    For  example,  several  functions 
took  a  pointer  parameter  (p)  and  another  parameter 
encoding  it  size  (psize),  from  which  we  inferred  a 
precondition  MaxSet(p)  >= 
  After 
annotating  selected  BIND  library  functions,  we  were 
able to check the chosen files without needing to fully 
annotate all of BIND. 
LCLint  produces  warnings  for  a  series  of  unguarded 
buffer writes in the function req_query.  The code in 
9 The source code is available at 
ftp://ftp.isc.org/isc/bind/src/8.2.2-P7/bind-src.tar.gz 
(psize  –  1). 
  If 
question is called in response to a specific type of query 
which  requests  information  concerning  the  domain 
name  server  version.  BIND  appends  a  response  to  the 
buffer containing the query that includes a global string 
read  from  a  configuration  file. 
the  default 
configuration  is  used,  the  code  is  safe  because  this 
function  is  only  called  with  buffers  that  are  large 
enough to store the response.  However, the restrictions 
on  the  safe  use  of  this  function  are  not  obvious  and 
could  easily  be  overlooked  by  someone  modifying  the 
code.  Additionally, it is possible that an administrator 
could  reconfigure  BIND  to  use  a  value  for  the  server 
version  string  large  enough  to  make  the  code  unsafe.  
The  BIND  developers  agreed  that  a  bounds  check 
should be inserted to eliminate this risk [Andrews01]. 
BIND  uses  extensive  run  time  bounds  checking.  This 
type of defensive programming is important for writing 
secure programs, but does not guarantee that a program 
is secure.  LCLint detected a known buffer overflow in 
a  function  that  used  run  time  checking  but  specified 
buffer sizes incorrectly.10 
The function  ns_req examines a DNS query and gen-
erates a response.  As part of its message processing, it 
looks  for  a  signature  and  signs  its  response  with  the 
function  ns_sign.  LCLint reported that it was unable 
to satisfy a precondition for ns_sign that requires the 
size of the message buffer be accurately described by a 
size parameter.  This precondition was added when we 
initially  annotated  the  shared  library.    A  careful  hand 
analysis of this function reveals that to due to careless 
modification  of  variables  denoting  buffer  length,  it  is 
possible for the buffer length to be specified incorrectly 
if  the  message  contains  a  signature  but  a  valid  key  is 
not  found.    This  buffer  overflow  vulnerability  was 
introduced  when  a  digital  signature  feature  was  added 
to BIND (ironically to increase security).  Static analysis 
tools  can  be  used  to  quickly  alert  programmers  to 
assumptions  that  are  broken  by  incremental  code 
changes. 
Based on our case studies, we believe that LCLint is a 
useful  tool  for  improving  the  security  of  programs.   It 
does  not  detect  all  possible  buffer  overflow 
vulnerabilities,  and  it  can  generate  spurious  warnings.  
In  practice,  however, 
it  provides  programmers 
concerned  about  security  vulnerabilities  with  useful 
assistance,  even  for  large,  complex  programs.    In 
addition to aiding in the detection of exploitable buffer 
overflows,  the  process  of  adding  annotations  to  code 
encourages  a  disciplined  style  of  programming  and 
10  An  advisory  for  this  vulnerability  can  be  found  at 
http://lwn.net/2001/0201/a/covert-bind.php3. 
produces  programs  that  include  reliable  and  precise 
documentation.  
5.  Implementation 
Our  analysis  is  implemented  by  combining  traditional 
compiler  data  flow  analyses  with constraint generation 
and  resolution.    Programs  are analyzed at the function 
level;  all  interprocedural  analyses  are  done  using  the 
information contained in annotations.   
We  support  four  types  of  constraints  corresponding  to 
the  annotations  introduced  in  Section  2:  maxSet, 
minSet, maxRead, and minRead.  Constraints can also 
contain constants and variables and allow the arithmetic 
operations:  +  and  -.    Terms  in  constraints  can  refer  to 
any C expression, although our analysis will not be able 
to evaluate some C expressions statically. 
The full constraint grammar is:  
constraint ⇒ (requires | ensures)  
constraintExpression relOp constraintExpression 
relationalOp ⇒ == | > | >= | = 1,  
ensures maxRead(t @ 3:4) >= -1 and  
ensures (t @ 3:4) = (t @ 1:1) + 2. 
The assignment to *t on line 2 produces the constraint 