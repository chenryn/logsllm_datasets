w = xw + λ(cid:48)
w, λw, [λ(cid:48)
w].
Inputs: For each input wire w: P1, P2: mw = xw + λw, λ(cid:48)
Evaluation: For each gate (a,b,c,T ) following topological order:
Evaluation Group 1 (P1 and P2)
1. if T = + : mc ← ma + mb; [λc] ← [λa] + [λb]; λ(cid:48)
2. if T = · (Dot Product/Multiplication Gate)
(cid:3) ,(cid:2)(cid:98)λc/2d(cid:99)(cid:3)) ← FTriple(a,b,c);
i=1(mai · mbi − mai · [λbi ]− mbi · [λai ]) +(cid:2)∑n
(b) [mc] ← ∑n
(c) mc ← open([mc]); mc ← (cid:98)(mc + λ(cid:48)
(a) ((cid:2)∑n
i=1 λaiλbi + λc
c)/2d(cid:99)−(cid:98)λ(cid:48)
c ← λ(cid:48)
a + λ(cid:48)
c/2d(cid:99); λ(cid:48)
b
(cid:3)
i=1 λai · λbi + λc
c ← (cid:98)λ(cid:48)
c/2d(cid:99); [λc] ←(cid:2)(cid:98)λc/2d(cid:99)(cid:3)
(cid:104)
c ← m(cid:48)
c] ← [λ(cid:48)
1. if T = + : m(cid:48)
a] + [λ(cid:48)
2. if T = · (Dot Product/Multiplication Gate)
Evaluation Group 2 (P3 and P4)
a + m(cid:48)
b; [λ(cid:48)
(cid:105)
ai · [λ(cid:48)
− m(cid:48)
ai · m(cid:48)
bi
c ← (cid:98)(m(cid:48)
c]); m(cid:48)
i=1 λ(cid:48)
aiλ(cid:48)
bi + λ(cid:48)
∑n
(a) (
(b) [m(cid:48)
i=1(m(cid:48)
c] ← ∑n
(c) m(cid:48)
c ← open([m(cid:48)
Cross Check
b]; λc ← λa + λb
c/2d(cid:99)(cid:3)) ← FTriple(a,b,c);
,(cid:2)(cid:98)λ(cid:48)
(cid:104)
(cid:105)
bi ]− m(cid:48)
c + λc)/2d(cid:99)−(cid:98)λc/2d(cid:99); λc ← (cid:98)λc/2d(cid:99); [λ(cid:48)
i=1 λ(cid:48)
∑n
bi + λ(cid:48)
ai · λ(cid:48)
ai ]) +
· [λ(cid:48)
bi
c
c
c] ←(cid:2)(cid:98)λ(cid:48)
c/2d(cid:99)(cid:3)
1. All parties make a call to Fcoin to sample the same random nonce r, compute the double masked value for each wire
dw = mw + λ(cid:48)
w = m(cid:48)
w + λw. They each computes hi ← hash(d1||...||dn||r).
2. P1 sends h1 to P2 and P4. P3 sends h3 to P2 and P4.
a functionality, else he sends 1. P4 does the same thing when verifying h1 = h3.
3. P2 veriﬁes that h1 = h3. If true, he sends 0 to For
4. Repeat the previous instructions with the variable exchanged as follows, P2 sends h2 to P1 and P3, and P4 sends h4 to P1 and P3.
5. P1 and P3 separately verify they received same values from P2 and P4, and provide input to the For functionality, accordingly.
6. All the parties will receive the result from For in order to determine to continue or to abort.
Output: All parties output masked values of the output wires. P1, P2 output (m(1)
V , λ(cid:48)(1)
V , [λ(1)
V ]). P3, P4 output (m(cid:48)(1)
V , λ(1)
V , [λ(cid:48)(1)
V ]).
a4-party logical OR
Figure 6: Protocol to handle Masked Evaluation With Truncation
structure. As long as the group that accesses the data does
not know the permutation pattern of the shufﬂe, our scheme
remains secure. In our explanation of the construction, we
assume Alice and Bob are responsible to access the data, and
Charlotte and David handle the shufﬂing. At the beginning
of each phase, all four parties contribute to compute MAC
values of data. After computation, the veriﬁcation group ver-
iﬁes MAC values, to prevent the malicious adversary from
modifying the data.
4.1 Construction Overview
Data Structure: In our framework, the data is represented in
a graph structure G = (V, E), in which vertices contain user
and item proﬁles, and edges represent the relation between
connected vertices. Each edge, represented as E, has ﬁve main
elements, (E.lid, E.rid, E.ldata, E.rdata, E.isReal), where isReal
indicates if an edge is “real” or “dummy”. Each vertex, V,
contains two main elements, (Vid, Vdata). The Vdata storage
is large enough to hold aggregated edge data from multiple
adjacent edges during the gather operation.
Dummy Generation: Before the main protocol begins, a
number of dummy edges will be generated according to an
appropriate distribution, and concatenated to the list of real
edges, in order to provide (ε,δ)-Differential Privacy. There-
fore, the input to the framework is a concatenated list of real
and dummy edges, and list of vertices. The circuit for gen-
erating these dummies, together with the noise distribution,
is taken directly from the work of Mazloom and Gordon, so
we do not describe it again here. The cost of this execution
is very small relative to the rest of the protocol, and it is only
performed once at the beginning of the any computation, re-
gardless of how many iterations the computation has (both the
histogram and the matrix factorization computations require
only one dummy generation operation). These dummy edges
are marked with a (secret shared) ﬂag isReal, indicating that
dummies should not inﬂuence the computation during the
Apply phase. However, they still have node identiﬁers, so they
contribute to the number of memory accesses to these nodes
during the Gather and Scatter phases. The protocol we use
2494    29th USENIX Security Symposium
USENIX Association
time; in one iteration of the protocol, data is gathered at all of
the left vertices, and in the next iteration, it is gathered at all
of the right vertices. Gather for the left vertices is described
in Figure 13: for each edge, Alice and Bob ﬁrst reconstruct
the id of the left vertex E.lid, locate the corresponding vertex,
and then append the data of the other end of the edge, i.e. the
data of the right vertex, [E.rdata] with its MAC tags, to the left
vertex data storage. They do the same for all the incoming
edges to that vertex. Note that in the next iteration of the
algorithm they follow the same procedure for the right vertex,
if applicable. When Alice and Bob access the left side of
each edge, they learn the number of times each left vertex is
accessed, which leaks the degree of each vertex in the graph.
However, due to the dummy edges that we shufﬂed-in with the
real ones, what they learn is the noisy degree of each vertex,
which preserve deferential privacy. At the end of this phase,
Charlotte and David verify that Gather was executed correctly
by calling FcheckZero, verifying that the data was unmodiﬁed.
They abort if the veriﬁcation fails. We note that, in addition
to modifying data, a malicious adversary might try to move
data to the wrong vertex. From a security standpoint, this is
equivalent to the case that the adversary moves data to the
correct vertex during Gather, but modiﬁes the shares of the
authenticated identiﬁer. To simplify the analysis, we assume
that the adversary moves data to the correct vertex.
Step 3. Oblivious Apply: This operation consists of three
sub-operations. First, additive shares of data are converted
to masked values, then the main functionality (e.g. gradient
descent) is applied on the masked values (at each vertex),
and ﬁnally the masked values are converted back to additive
secret-shares, which then will be used in the following phases
of the framework.
Step 3.1. Secure Share-Mask Conversion: All the parties
participate in the Apply phase, providing their shares as input
to the Arithmetic Circuit that computes the intended function-
ality. However, in order to prepare the private data for the
Apply operation, the secret-shared values need to be trans-
formed into "masked" values. In order to convert shares to
masked values, each group agrees on a vector of random mask
values, denoted as λ for Alice-Bob and λ(cid:48) for Charlotte-David.
Then they call the Fsharemask functionality and collaboratively
transform the share values [V ] to masked values V + λ and
V + λ(cid:48).
Step 3.2. Computing the function of interest on input
data: As part of the Apply phase, the parties compute the
function of interest on the input data: for example, they per-
form addition for Histograms, or gradient descent for Matrix
Factorization. The parties execute the four-party protocol
described in Figure 6 to evaluate the relevant circuit.
Step 3.3. Secure Mask-Share Conversion: At the end of the
Apply phase, data is in the masked format and needed to be
converted to secret-shared values. As described previously,
each party can locally convert their masked values to additive
Figure 7: Input preparation phase: input data is secret-shared
between both groups of parties
for generating dummy edges appears in Figure 2 of Mazloom
and Gordon ( [15], Deﬁnition 2).
Step 0. Input preparation: We assume the input data is ad-
ditively secret-shared between parties in each group, so that
parties in each group, together can reconstruct the data. For
example, Alice and Bob receive 2-out-of-2 secret shares of E,
such that [E]A + [E]B = E mod 2k+s, as shown in Figure 7.
Step 1. Oblivious Shufﬂe: In this step, Charlotte and David
shufﬂe the edges. Shufﬂing edges between the gathering of
data at the left nodes and the gathering of data at the right
nodes ensures that the graph edge structure remains hidden.
Alice and Bob are responsible to verify that the shufﬂe op-
eration has been done correctly. To facilitate that, before the
shufﬂe begins, they need to compute a MAC tag for each
edge. To compute the MACs, ﬁrst Alice and Bob agree on
a random value α, then all parties call a functionality, FMAC,
to securely compute shares of MAC tags, [M]([M] ≡ [αE]).
To perform the shufﬂe, Charlotte and David agree on a ran-
dom permutation π, then each locally shufﬂes its shares of the
edges E along with its shares of the corresponding MAC tags,
according to permutation π. At the the end of this step, Alice
and Bob receive the shufﬂed edges from the other group, and
call the veriﬁcation function, FCheckZero. If the veriﬁcation
fails, it means one of the parties in the shufﬂing group, either
Charlotte or David, has cheated and modiﬁed the edge data,
and the protocol aborts; otherwise they continue to the next
phase.
Step 2. Oblivious Gather: The next operation after Shuﬄe
is the Gather operation, which requires access to the node
identiﬁers, and will be handled by Alice and Bob. In turn,
Charlotte and David should be able to verify the correctness of
the Gather operation. Therefore, before the Gather operation,
Charlotte and David agree on a random value β, and all parties
make a sequence of calls to the FMAC functionality, generating
a new MAC tag for each data element of each edge. That
is, they create three tags per edge: one tag for each of the
two vertex ids, and one tag for the edge data. The Gather
operation is performed on only one side of each edge at a
USENIX Association
29th USENIX Security Symposium    2495
0User	DataBobDavidAliceCharlotteCharlotteInput	Preparationsecret-shares, without interacting with other parties.
Step 4. Oblivious Scatter: The result of each computation
resides inside the corresponding vertex. We need to update
the data on the edges with the freshly computed data. In this
step, all players copy the updated data from the vertex to the
incoming (or outgoing) edges. The players refer to the list of
opened ID’s obtained during Gather to decide how to update
each edge. Recall, edges are held as additive secret shares; the
update of the edge data can be done locally. Finally, they
re-randomize all the shares.
This explanation and accompanying diagrams only show the
graph operations applied on the left vertices of each edge. To
complete one round of the graph computation, we need to
repeat the steps 1-4 on the right vertices as well.
4.2 Oblivious Graph Operations
The hybrid world protocol is presented in Figure 9. There we
assume access to ideal functionalities for Shufﬂe, Gather, Ap-
ply and Scatter. In this section, we explain how we instantiate
each of these ideal functionalities, and provide the security
proofs for each protocol under a single malicious corruption.
Fsgas: Four-Party Secure Graph Parallel
Computation Functionality
Input: User input is a directed graph, G(E,V ), secret
shared between the parties:
Alice,Bob hold secret shares of E, such that, for each
edge, [E]A + [E]B = E mod 2k+s.
Charlotte,David hold secret shares of E, such that
[E]C + [E]D = E mod 2k+s.
([E]A, [E]B, [E]C, [E]D ∈ Z2k+s, and E ∈ Z2k).
Functionality:
1. Waits for input from all parties.
2. Veriﬁes that [E]A + [E]B = [E]C + [E]D. If not, sends
abort to all parties.
3. Reconstructs E, then computes E(1) = f unc(E).
4. Secret shares E(1) to P1, P2; and E(1) to P3, P4.
5. Computes the leakage L(G), sends it to all parties.
Output: Secret shares of the updated edge values
(e.g. user and item proﬁles). The parties also obtain the
leakage L(G).
Figure 8: Fsgas: Four-party ideal functionality for securely
applying the graph parallel model of computation.
4.2.1 Four-Party Oblivious Shuﬄe
The Shuﬄe operation is used to hide the edge structure of
the graph: during the Gather and Scatter operations, the ver-
tex on each side of an edge is accessed, and shufﬂing the
edges between these two phases hides the connection between
Πsgas: Four-Party Secure Graph Parallel
Computation Protocol
Input: User input is a directed graph, G(E,V ), secret
shared between the parties:
Alice,Bob hold secret shares of E, s.t. for each edge,
[E]A + [E]B = E mod 2k+s.
Charlotte,David hold secret shares of E, s.t. for each
edge, [E]C + [E]D = E mod 2k+s.
([E]A, [E]B, [E]C, [E]D ∈ Z2k+s, and E ∈ Z2k).
Protocol:
Note: The following steps are conducted on the left vertex
of each edge (for example in computing Histogram). In or-
der to perform one single iteration of Matrix Factorization,
these steps should be done twice, once on the left vertices,
then on the right vertices.
1. Oblivious Shufﬂe Four players make a call to
Fshuﬄe([E]) to shufﬂe their shares. They receive
shares of shufﬂed edges, [E(1)] ← [π(E)].
2. Oblivious Gather The parties call Fgather([E(1)])