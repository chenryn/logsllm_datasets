new byte[irdex]; 
---
## Page 260
public class Main f
知异常的发生。
发生异常时，未来调用FutureData类（List 9-4）的 getContent 方法时，可以得
那么，接下来就是问题了。请改写范例程序，使得在建立RealData 的实例中途
例如l，像程序List 9-10这样调用request,虽然抛出了NegativeAraySizeException
List 9-10
public static void main(Stringll args) 
【CTRL+C结束程序）
java.larg.NegativeArraysizeException
main BEGIN
}catch (Exception e) {
ryf
réquest{-l， N) END
request(-1， N) BEGIN
e.printStackTrace();
making RealData(-i, N) BEGIN
System.out.printin("main END");
(+N, '-)sanba'sou = eep eea
 System,out.println("main BEGIN");
at Hostsl.run (Host.java:ll)
at ReaiData.(RealData.java:5)
Host host = new Host();
Main 类(Main.java)
图9.7执行范例
Future-
←程序停在这里
一先给您这张提货单
第9章
---
## Page 261
Termination
好，去睡觉吧
Two-Phase
快把玩具收拾
第10章
---
## Page 262
工作。这个状态称为【终止处理中】。从【作业中】改变成【终止处理中】是第--
248
阶段。
则送出“终止请求”。接着这个线程，并不会马上结束，而会开始进行必要的刷新
再终止线程。
好，去睡觉吧”。这时小朋友就停下来不玩了，开始收拾玩具。
Two-Phase Termination Pattern
我们将线程进行平常的处理的状态称为【作业中】。当希望结束这个线程时，
解释过来就是“两阶段终止"（见图10-1)。这个Pattern用来进行结束的操作后，
这一章要学习的是Two-Phase Termination Pattern。
小朋友总是把玩具散落一地。晚上到了睡觉时间时，妈妈会说“快把玩具收拾
【终止处理中】的状态时，不会进行平常的操作。虽然线程还在运行，但进行
终止处理中
作业中
辣
终止处理完毕
终止要求
品
图10-1两阶段终止
1
终止的第阶段
终止的第二阶段
---
## Page 263
以从多个线程同时访问。
减号则表示 private。另外，《frozen}的限制表示final、concurrent}的限制则表示可
材。类说明如表10-1所示。
使读者能看清楚 Two-Phase Termination Patterm 的架构，所以尽量以这种小程序为题
要在约10秒后结束程序。虽然这个程序进行的操作实在没有意义，不过在这里为了
Termination Patterm.
是第二阶段，
的是终止处理。直到终止处理结束后，才真正结束线程。【终止处理中】的操作结束，
Main
CountupThread
范例程序
类图中，字段名称与方法名称前面标示着加号(+)或减号（一）。加号表示 public，
先从【作业中】进入【终止处理中】状态，再真止结束掉线程。这就是Two-Phase
类阁如图10-2所示，顺序图则如图10-3所示。
在这单要写的范例程序，有-条线程会每隔约500毫秒将让数递增1，而我们
接下来就来研究Two-Phase Termination Pattern的范例程序。
·收到终止请求后，要尽快开始终止处理（响应性)。
●-·定会进行终止处理（生命性）：
●安全地结束（安全性）：
主要考虑的关键因素如下：
名
Main
称
Two-Phase Termination-
图10-2范例程序的类图
Requests shutcown
表10-1类一览表
操作测试用的类
递增数字的线程
+run  frozen
+isShutdowmRequested I concurrent]
dollork
+shutdownRequest [ concurrent }
-shutdowmRequested
doshutdown
-counter
CountupThread
一快把玩具收拾好，去睡觉吧
10草
249
---
## Page 264
邮州丝线程版啡模我
否前进到【终止处理中】。
CountupThread 类
线程等待结束！
shutdownRequest 方法用来对此线程送出终止请求。想要结束CountupThread线
---
counter字段表示现在的值。
CountupThread类（List 10-1）是一条会不断递增数值（0→1→2→3）的线程。
Main
T-
shuidownRequest
图10-3范例程序的顺序图
join
Start
CountupThread
1
T
false
OMOP
false
true
isShutdownRequesred
!isShutdownRequested
doShutdown
isShutdownRequested
为送出
---
## Page 265
现象：
就是递增计数），并将值显示出来。
块中，调用进行终止处理的 doShutdown方法。
进行while 循环。在循环中，会调用用来实际进行作业的 doWork 方法。并在finally
是一旦变成 true 就不会再变成false 的 latch（门门），所以就算从多条线程同时调用
用 interrupt 方法。使线程就算在 sleep 或是wait 的状态下，也能结束掉。
10-6来讨论，
程时，就要调用这个方法。
（意即是否已经收到终止请求），
doShutdown方法则是进行终止处理的方法。这个方法里应该要进行终止线程时
run 方法则是实际的处理内容。只有在 shutdownRequested 的值为 false 时，会
isShutdownRequested方法则是用来检查 shutdownRequest方法是否已经被调用
请注意 shutdownRequest方法不只会将 shutdownRequested设置成 ture，还会调
注1：因为不会出现同时有线程要求设置为 true，义有线程要求设置为 false 的 race condition
doWork方法是用来进行实际操作的方法。
而 shutdownRequested 字段声明成volatile 的理由，则留到本章末的练习问题
shutdiownRequest 方法没有 synchronized 的必要。因为 shutdownRequested 标识
public class CountupThread extends Thread {
List 10-1
public boolean isShutdownRequested() ↑
11判断终止请求是否已经送出
public void shutdownRequest ()
private volatile booiean shutdownRequested = false;
//已经送出终止请求则为true
private long counter = 0;
/1计数器的值
//终止请求
return shutdownRequested;
interrupt(); 
 shutdownRequested = true;
CountupThread 类(CountupThread.java)
Two-PhaseTermination---快把玩具收拾好，去睡觉吧
，在这里只是将counter 的值加】（也
910童
---
## Page 266
Main类
252
不会从join方法中退出。
shutdownRequest 方法。这个方法调用后会马上退出。
Thread 类的join 方法，是用来等待到线程结束用的方法。在指定的线程结束前，
public class Main {
对线程送出终止请求，
Main类（List 10-2）会启动CountupThread 线程：
启
List 10-2
动线程时，如往常一样，
public static void main(String[l args)
private void doshutdowni) f
/终止处理
private void dowerk() throws InterruptedException {
1/操作
public final void runi) (
//动作
 System.out.println("doshutdown: counter = " + counter);
Thread.sleep(500);
counter++;
try { 
finaliy
catch (InterruptedException e) l
doshutdown ();
Main 类 (Main.java)
while (!shutdownRequested) {
dowork();
则是使用刚刚在CountupThread类里声明的
使用 start 方法。
并在约10秒后将它结束掉。
---
## Page 267
方法会被调用，之后线程就结束了。
执行范例如图
doWork: counter = 12
dowork: counter =
dowork: counter =
doWork: counter
dowork: counter
dowork:
doWork:
doWork:
dowork: counter
dowork: counter
main: BEGIN 
dowork:
dowork:
System.out-printl:("main: END");
} catch (InterruptedException e) 
try I
e.printStackTrace();
counter
 Counter
counter
counter
 counter
t.join();
11等待线程结束
t.shutdownRequest();
System.out.printlnI"main: :
//对线程送出终止请求
Thread.sleep(10000);
//稍微空出一段时间
t.start();
CountupThread t = new CountupThread();
！！启动线程
110-4 所示。我们可以看到的确在送出终止请求后，doShutdown
Two-Phase Termination-
I
L
10
00
中
L
M
←约500毫秒递增一次
shutdownRequest");
一快把玩具收拾好，去睡觉吧
第10片
253
---
## Page 268
doShutdown 设置成 protected 方法。UML 的类图中，protected 是以井号（#）表示的。
繁，那从收到终止请求，直到真正进入【终止处理中】状态所间隔的时间，就可以
在可以安全地开始进行终止处理的地方，检查这个标识。如果检查标识的操作很频
法使用 Single Threaded Execution Pattern（第 1 章）。
有用来提出终止请求的 shutdownRequest方法。我们没有必要对 shutdownRequest 方
缩短。
TerminationRequester 参与者是Main 类。
Terminator（终止的人）参易者
Two-Phase Termination Pattern 的所有参与者
TerminationReguester（送出终止请求的人）参易者
图10-5 的类图，是假定可以定义 Terminator 参与者的子类，故将 doWork 与
范例程序中，Terminator参与者是CountupThread类。
Terminator 参与者拥有一个标识（门门）表示自已是否已经收到终止请求。并
自已进入【终止处理中】状态。接着在终止处理执行完毕后，线程正式结束。
当shutdownRequest方法被调用，Terminator参与者就会在考虑到安全性的情况
Terminator 参与者会接受终止请求，实际进行终止处理。Terminator 参与者提供
TerminationRequester 参与者对Terminator 参与者送出终止请求。范例程序中，
Two-Phase Termination Pattern 的所有参与者如下：
main: END
main: join
doShutdown: counter = 20
main: shutdownRequest
dowork: counter = 20
doWork:
dowork:
dowork:
dowork:
dowork: counter
doWork: ccunter
dowork: counter = 13
counter 
counter =
courter
counter =
19
18
15
6
图10-4执行范例
结束
主线程等特CountupThread线程结束
doShutdown 方法进行终止处理
主线程调用shutdownRequest方法
（续上图）
---
## Page 269
发生只有x的值指定了，但y的值没有指定的问题。
使用这个方法时，即使有多条线程在执行，x与y的值会安全地一起被指定。不会
synchronized 方法的中间），也会马上结束。例如下面的例子：
java.lang.ThreadDeath 异常而马上结束。即使该线程现在正在执行临界区间（例如
是不建议使用（deprecated）的方法，我们不应该使用。
不可以使用Thread类的stop方法
本章末的练习问题10-4，就要尝试建立覆盖（override）doWork与doShutdown 的类。
原因是 stop 方法会使实例丧失安全性的保障。使用 stop 方法时，线程会抛出
扩展思考方向的提示
setXY是 synchromized 方法，所以这个方法同时只能有·个线程执行。于是，
java.lang.Thread 类有一个用来强制结束掉线程的 stop 方法。但是 stop 现在已经
class Position l
public final void run () [
public synchronized void setxY{int newX, int newY) {
private int yi
private int x;
TermdnationRequester
try 1
finally I
) catch (InterruptedException e)(
Y = newy;
x = newX;
't) umopanusop
while (1shutdownRequested) {
 dohorktl:
Two-Phase Termination--
图10-5
Two-Phase Termination Pattem 的类图
Requests shutdown 
FdoShutdowm
tdoHork
+isShutdowmRequested ( concurrent ]
+shutdowmRequest I concurrent !
-shutdowmRequested
一-快把玩具收拾好，去睡觉吧
To.lnator
10章
255
---
## Page 270
就有待商椎了。“会忽视InteruptedException的地方”，像下面就是：
isInterrupted 方法，就可以正确地进行终止处理。
就不需要用到 shutdownRequested 标识了。只要catch InterruptedException，并使用
异常，并使用 islntenupted 方法检查中断状态，不就好了吗？”
那又何必特地做一个新的shutdownRequested标识呢。只要catch InterruptedException
InterruptedException异常，就算没有抛出异常，线程也会变成中断状态。既然如此，
只测试中断状态也是不够的