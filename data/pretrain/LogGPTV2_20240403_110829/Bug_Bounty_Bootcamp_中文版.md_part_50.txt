另一方面，基于错误的SQL注入攻击会在数据库中触发错误，以从返回的错误消息中收集信息。例如，我们可以使用MySQL中的CONVERT()函数来引发错误：
    SELECT Title, Body FROM Emails
    WHERE Username='vickie' AND AccessKey='ZB6w0YLjzvAVmp6zvr'
    UNION SELECT 1,
    CONVERT((SELECT Password FROM Users WHERE Username="admin"), DATE); –-
The `      CONVERT(     ` `      VALUE     `{.variable} `      ,     `
`      FORMAT     `{.variable} `      )     ` function attempts to
convert `      VALUE     `{.variable} to the format specified by
`      FORMAT     `{.variable} . Therefore, this query will force the
database to convert the admin's password to a `      date     ` format,
which can sometimes cause the database to throw a descriptive error like
this one:
CONVERT（VALUE，FORMAT）函数尝试将VALUE转换为FORMAT指定的格式。因此，这个查询将强制数据库将管理员密码转换为日期格式，这有时会导致数据库抛出如下所示的描述性错误：
    Conversion failed when trying to convert "t5dJ12rp$fMDEbSWz" to data type "date".
The database throws descriptive errors to help developers pinpoint
problems, but can also accidentally reveal information to outsiders if
error messages are shown to regular users as well. In this example, the
database points out that it has failed to convert a string value,
`      "t5dJ12rp$fMDEbSWz"     ` , to the `      date     ` format. But
`      t5dJ12rp$fMDEbSWz     ` is the password of the admin account! By
displaying a descriptive error message, the database has accidentally
revealed a sensitive piece of information to outsiders.
数据库提供详细的错误信息来帮助开发人员找到问题，但如果错误信息也显示给普通用户，就可能会意外地向外泄露信息。在这个例子中，数据库指出无法将"t5dJ12rp\$fMDEbSWz"这个字符串值转换成日期格式。但是，"t5dJ12rp\$fMDEbSWz"是管理员账户的密码！通过显示详细的错误信息，数据库意外地向外界透露了一条敏感信息。
### Step 2: Look for Blind SQL Injections {#c11.xhtml#h2-501546c11-0004}
Also called *inferential SQL injections* , *blind SQL injections* are a
little harder to detect and exploit. They happen when attackers cannot
directly extract information from the database because the application
doesn't return SQL data or descriptive error messages. In this case,
attackers can infer information by sending SQL injection payloads to the
server and observing its subsequent behavior. Blind SQL injections have
two subtypes as well: Boolean based and time based.
也称为推理性SQL注入，盲注攻击比较难以检测和利用。这种攻击发生在攻击者不能直接从数据库中提取信息的情况下，因为应用程序不返回SQL数据或描述性错误消息。在这种情况下，攻击者可以通过向服务器发送SQL注入负载并观察其随后的行为来推断信息。盲注攻击也分为两个子类型：基于布尔值和基于时间的情况。
*Boolean-based SQL injection* occurs when attackers infer the structure
of the database by injecting test conditions into the SQL query that
will return either `      true     ` or `      false     ` . Using those
responses, attackers could slowly infer the contents of the database.
For example, let's say that *example.com* maintains a separate table to
keep track of the premium members on the platform. [
]{#c11.xhtml#Page_197 .pagebreak title="197"} Premium members have
access to advanced features, and their home pages display a
`      Welcome, premium member!     ` banner. The site determines who is
premium by using a cookie that contains the user's ID and matching it
against a table of registered premium members. The GET request
containing such a cookie might look like this:
基于布尔值的 SQL 注入是指攻击者通过向 SQL
查询注入测试条件来推断数据库结构，以返回 true 或
false。攻击者可以利用这些响应，逐步推断出数据库的内容。例如，假设
example.com
维护一个单独的表来跟踪平台上的高级会员。高级会员可以访问高级功能，并在其主页上显示"欢迎，高级会员！"的横幅。该网站通过使用包含用户
ID 的 cookie
并将其与注册的高级会员表进行匹配来确定谁是高级会员。包含此类 cookie 的
GET 请求可能如下所示：
    GET /
    Host: example.com
    Cookie: user_id=2
The application uses this request to produce the following SQL query:
该应用程序使用此请求来生成以下SQL查询：
    SELECT * FROM PremiumUsers WHERE Id='2';
If this query returns data, the user is a premium member, and the
`      Welcome, premium member!     ` banner will be displayed.
Otherwise, the banner won't be displayed. Let's say your account isn't
premium. What would happen if you submit this user ID instead?
如果此查询返回数据，则用户是高级会员，并将显示"欢迎，高级会员！"横幅。否则，该横幅将不会显示。假设您的帐户不是高级帐户。如果您提交此用户ID，会发生什么？
    2' UNION SELECT Id FROM Users
    WHERE Username = 'admin'
    and SUBSTR(Password, 1, 1) ='a';--
Well, the query would become the following:
好的，查询将变为以下内容：
    SELECT * FROM PremiumUsers WHERE Id='2'
    UNION SELECT Id FROM Users
    WHERE Username = 'admin'
    and 1SUBSTR(Password, 1, 1) = 'a';--
The `      SUBSTR(     ` `      STRING     `{.variable} `      ,     `
`      POSITION     `{.variable} `      ,     `
`      LENGTH     `{.variable} `      )     ` function extracts a
substring from the `      STRING     `{.variable} , of a specified
`      LENGTH     `{.variable} , at the specified
`      POSITION     `{.variable} in that string. Therefore,
`      SUBSTR(Password, 1, 1)     ` [ 1 ]{.CodeAnnotation
aria-label="annotation1"} returns the first character of each user's
password. Since user 2 isn't a premium member, whether this query
returns data will depend on the second `      SELECT     ` statement,
which returns data if the admin account's password starts with an
`      a     ` . This means you can brute-force the admin's password; if
you submit this user ID as a cookie, the web application would display
the premium banner if the admin account's password starts with an
`      a     ` . You could try this query with the letters
`      b     ` , `      c     ` , and so on, until it works.
SUBSTR（字符串，位置，长度）函数从指定位置开始，提取字符串中指定长度的子字符串。因此，SUBSTR（密码，1，1）返回每个用户密码的第一个字符。由于用户2不是高级成员，此查询返回数据取决于第二个SELECT语句，如果管理员帐户的密码以a开头，则返回数据。这意味着您可以强制破解管理员的密码；如果您将此用户ID提交为cookie，则Web应用程序将显示高级横幅，如果管理员帐户的密码以a开头。您可以尝试使用字母b，c等进行此查询，直到成功。
You can use this technique to extract key pieces of information from the
database, such as the database version, table names, column names, and
credentials. I talk more about this in [ "Escalating the Attack" on page
201 ]{.xref itemid="xref_target_“Escalating the Attack”  on page 201"} .
您可以使用此技术从数据库中提取关键信息，如数据库版本、表名、列名和凭据。我在第201页的"升级攻击"中将更详细地讨论此技术。
A *time-based SQL injection* is similar, but instead of relying on a
visual cue in the web application, the attacker relies on the
response-time difference caused by different SQL injection payloads. For
example, what might happen if the injection point from our preceding
example doesn't return any visual clues about the query's results? Let's
say premium members don't get a special banner, and their user
interfaces don't look any different. How do you exploit this SQL
injection then?
时间型SQL注入类似，但攻击者不依赖于Web应用程序中的视觉提示，而是依赖于不同SQL注入有效负载所引起的响应时间差异。例如，如果我们上一个示例中的注入点没有返回任何关于查询结果的视觉提示会发生什么？假设高级会员没有获得特殊横幅，他们的用户界面也没有任何不同。那么您如何利用此SQL注入呢？
[ ]{#c11.xhtml#Page_198 .pagebreak title="198"} In many databases, you
can trigger a time delay by using a SQL query. If the time delay occurs,
you'll know the query worked correctly. Try using an `      IF     `
statement in the SQL query:
在许多数据库中，您可以通过使用SQL查询触发时间延迟。如果时间延迟发生，您将知道查询已正确工作。尝试在SQL查询中使用IF语句。
在许多数据库中，您可以使用SQL查询触发时间延迟。如果时间延迟发生，您将知道查询已正确工作。尝试在SQL查询中使用IF语句。
    IF(CONDITION, IF-TRUE, IF-FALSE)
For example, say you submit the following ID:
例如，假设您提交以下身份证：
    2' UNION SELECT
    IF(SUBSTR(Password, 1, 1) = 'a', SLEEP(10), 0)
    Password FROM Users
    WHERE Username = 'admin';
The SQL query would become the following:
SQL查询将变为以下内容：
    SELECT * FROM PremiumUsers WHERE Id='2'
    UNION SELECT
    IF(SUBSTR(Password, 1, 1) = 'a', SLEEP(10), 0)
    Password FROM Users
    WHERE Username = 'admin';
The `      SLEEP(     ` `      SECONDS     `{.variable} `      )     `
function in MySQL will create a time delay in the response for the
specified number of seconds. This query will instruct the database to
sleep for 10 seconds if the admin's password starts with an
`      a     ` character. Using this technique, you can slowly figure
out the admin's password.
MySQL 中的 SLEEP（SECONDS）函数将在指定的秒数内创建响应延迟。
如果管理员密码以 "a" 字符开头，则此查询将指示数据库等待 10 秒钟。
使用此技术，您可以逐渐找出管理员的密码。
### Step 3: Exfiltrate Information by Using SQL Injections {#c11.xhtml#h2-501546c11-0005}
Imagine that the web application you're attacking doesn't use your input
in a SQL query right away. Instead, it uses the input unsafely in a SQL
query during a backend operation, so you have no way to retrieve the
results of injection via an HTTP response, or infer the query's results
by observing server behavior. Sometimes there's even a time delay
between when you submitted the payload and when the payload gets used in
an unsafe query, so you won't immediately be able to observe differences
in the application's behavior.
请想象一下，您正在攻击的Web应用程序不会立即在SQL查询中使用您的输入。相反，在后端操作期间不安全地使用输入作为SQL查询，因此您无法通过HTTP响应检索注入的结果，也无法通过观察服务器行为推断查询的结果。有时，提交有效载荷和有效载荷在不安全的查询中使用之间会存在时间延迟，因此您可能无法立即观察到应用程序行为上的差异。
In this case, you'll need to make the database store information
somewhere when it does run the unsafe SQL query. In MySQL, the
`      SELECT. . .INTO     ` statement tells the database to store the
results of a query in an output file on the local machine. For example,
the following query will cause the database to write the admin's
password into */var/www/html/output.txt* , a file located on the web
root of the target web server:
在这种情况下，当数据库运行不安全的SQL查询时，您需要将信息存储在某个地方。在MySQL中，SELECT\...INTO语句告诉数据库将查询结果存储在本地计算机上的输出文件中。例如，下面的查询将导致数据库将管理员密码写入到位于目标Web服务器的Web根目录下的/var/www/html/output.txt文件中：
    SELECT Password FROM Users WHERE Username='admin'
    INTO OUTFILE '/var/www/html/output.txt'
We upload to the */var/www/html* directory because it's the default web
directory for many Linux web servers. Then you can simply access [
]{#c11.xhtml#Page_199 .pagebreak title="199"} the information by
navigating to the */output.txt* page on the target:
*https://example.com/output.txt* . This technique is also a good way to
detect second-order SQL injections, since in second-order SQL
injections, there is often a time delay between the malicious input and
the SQL query being executed.
我们上传到/var/www/html目录，因为它是许多Linux
Web服务器的默认Web目录。然后，您可以通过导航到目标上的/output.txt页面（https://example.com/output.txt）简单地访问信息。这种技术还是检测二阶SQL注入的好方法，因为在二阶SQL注入中，恶意输入和执行SQL查询之间经常存在时间延迟。
Let's put this information in context. Say that when you browse
*example.com* , the application adds you to a database table to keep
track of currently active users. Accessing a page with a cookie, like
this
让我们将这个信息放入背景中。假设当您浏览example.com时，该应用程序会将您添加到数据库表中以跟踪当前活跃用户。访问一个带有
cookie 的页面，就像这样。
    GET /
    Host: example.com
    Cookie: user_id=2, username=vickie
will cause the application to add you to a table of active users. In
this example, the ActiveUsers table contains only two columns: one for
the user ID and one for the username of the logged-in user. The
application uses an `      INSERT     ` statement to add you to the
ActiveUsers table. `      INSERT     ` statements add a row into the
specified table with the specified values:
将会使应用程序将您添加到活跃用户表中。在此示例中，ActiveUsers表仅包含两列：一个用于用户ID，一个用于已登录用户的用户名。应用程序使用INSERT语句将您添加到ActiveUsers表中。INSERT语句将指定的值添加到指定表中的一行：
    INSERT INTO ActiveUsers
    VALUES ('2', 'vickie');
In this case, an attacker can craft a malicious cookie to inject into
the `      INSERT     ` statement:
在这种情况下，攻击者可以制作恶意的 cookie，并注入到 INSERT 语句中。
    GET /
    Host: example.com
    Cookie: 1user_id="2', (SELECT Password FROM Users
    WHERE Username='admin'
    INTO OUTFILE '/var/www/html/output.txt'));-- ", username=vickie
This cookie [ 1 ]{.CodeAnnotation aria-label="annotation1"} will, in
turn, cause the `      INSERT     ` statement to save the admin's
password into the *output.txt* file on the victim server:
这个Cookie
1会触发INSERT语句将管理员密码保存在受害服务器的output.txt文件中。
    INSERT INTO ActiveUsers
    VALUES ('2', (SELECT Password FROM Users
    WHERE Username='admin'
    INTO OUTFILE '/var/www/html/output.txt'));-- ', 'vickie');
Finally, you will find the password of the admin account stored into the
*output.txt* file on the target server.
最后，你会在目标服务器的output.txt文件中找到管理员账户的密码。
### Step 4: Look for NoSQL Injections {#c11.xhtml#h2-501546c11-0006}
Databases don't always use SQL. *NoSQL* , or *Not Only SQL* , databases
are those that don't use the SQL language. Unlike SQL databases, which
store data in tables, NoSQL databases store data in other structures,