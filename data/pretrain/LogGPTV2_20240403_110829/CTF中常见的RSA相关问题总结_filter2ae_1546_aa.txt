# CTF中常见的RSA相关问题总结
# 前言
理解基本概念后，代码就可以说明一切，所以本文将每种攻击方式的实现方法都提炼成了一个函数，在理解原理时会有帮助，在需要时也可以直接调用。
本文的例题附件、代码段、工具和后续更新都会放在 [RSA-ATTACK](https://github.com/findneo/RSA-ATTACK)
，欢迎 star & watch 。
# 基础
## RSA概要
在开始前可以通过 [《RSA算法详解》](http://www.guideep.com/read?guide=5676830073815040)
这篇文章了解关于RSA的基础知识，包括加解密方法，算法原理和可行性证明等。
## 应用流程
  1. 选取两个较大的互不相等的质数p和q，计算`n = p * q` 。
  2. 计算`phi = (p-1) * (q-1)` 。
  3. 选取任意e，使得e满足 `1 a ≡ c*(b^-1) (mod n)，其中b模n的逆记作b的负一次方。
    费马小定理:
    a是整数,p是质数,则a^p==a(mod p),如果a不是p的倍数,还有a^(p-1) ≡ 1(mod p) 
    """
推荐文章 [模运算总结](https://blog.sengxian.com/algorithms/mod-world) 和
[取模运算涉及的算法](https://github.com/wujr5/algorithm-analysis-and-design/blob/master/relative-algorithm-learning/6-algorithm-about-modulo-operation.md) 。
## 欧几里得算法
欧几里得算法是求最大公约数的算法, 也就是中学学的
[辗转相除法](https://zh.wikipedia.org/wiki/%E8%BC%BE%E8%BD%89%E7%9B%B8%E9%99%A4%E6%B3%95)
。记 `gcd(a,b)` 为a和b的最大公约数，欧几里得算法的基本原理是`gcd(a,b)==gcd(b,a%b),(b!=0)` 和
`gcd(a,0)==a` 。
Python实现如下：
    # 递归版
    def gcd(a, b):
        return a if not b else gcd(b, a % b)
    # 迭代版
    def gcd2(a, b):
        while b:
            a, b = b, a % b
        return a
## 扩展欧几里得算法
扩展欧几里得算法基于欧几里得算法，能够求出使得 `ax+by=gcd(a,b)` 的一组x,y。
[这篇文章](http://blog.miskcoo.com/2014/09/chinese-remainder-theorem#i-3)
解释得很到位，对照下图和以下递归版实现容易理解。
Python实现如下：
    # 递归版
    def ext_euclid ( a , b ):
        # ref:https://zh.wikipedia.org/wiki/扩展欧几里得算法
        if (b == 0):
            return 1, 0, a
        else:
            x1 , y1 , q = ext_euclid( b , a % b ) # q = GCD(a, b) = GCD(b, a%b)
            x , y = y1, ( x1 - (a // b) * y1 )
            return x, y, q
    # 迭代版
    def egcd(a, b):
        # ref:https://blog.csdn.net/wyf12138/article/details/60476773
        if b == 0:
            return (1, 0, a)
        x, y = 0, 1
        s1, s2 = 1, 0
        r, q = a % b, a / b
        while r:
            m, n = x, y
            x = s1 - x * q
            y = s2 - y * q
            s1, s2 = m, n
            a, b = b, r
            r, q = a % b, a / b
        return (x, y, b)
## 中国剩余定理
[维基百科](https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86)
给出了简洁生动的说明:
参考以上说明进行的Python实现:
    def CRT(mi, ai):
        # mi,ai分别表示模数和取模后的值,都为列表结构
        # Chinese Remainder Theorem
        # lcm=lambda x , y:x*y/gcd(x,y)
        # mul=lambda x , y:x*y
        # assert(reduce(mul,mi)==reduce(lcm,mi))
        # 以上可用于保证mi两两互质
        assert (isinstance(mi, list) and isinstance(ai, list))
        M = reduce(lambda x, y: x * y, mi)
        ai_ti_Mi = [a * (M / m) * gmpy2.invert(M / m, m) for (m, a) in zip(mi, ai)]
        return reduce(lambda x, y: x + y, ai_ti_Mi) % M
以上程序将mi当作两两互质处理,实际上有时会遇到其他情况，这时就需要逐一两两合并方程组。我参照下图实现了一个互质与不互质两种情况下都能工作良好的中国剩余定理（解同余方程组）的Python程序。
    def GCRT(mi, ai):
        # mi,ai分别表示模数和取模后的值,都为列表结构
        assert (isinstance(mi, list) and isinstance(ai, list))
        curm, cura = mi[0], ai[0]
        for (m, a) in zip(mi[1:], ai[1:]):
            d = gmpy2.gcd(curm, m)
            c = a - cura
            assert (c % d == 0) #不成立则不存在解
            K = c / d * gmpy2.invert(curm / d, m / d)
            cura += curm * K
            curm = curm * m / d
        return (cura % curm, curm) #(解,最小公倍数)
图片截自
[中国剩余定理（互质与不互质的情况）](https://blog.csdn.net/qq_29980371/article/details/71053219)
。
# 常见攻击方式实践
## 准备工具
  * python
    * gmpy2库
      * Windows：可从 直接下载已编译的安装包。
      * Linux： `sudo apt install python-gmpy2`
    * libnum库：
      * `git clone [github.com/hellman/libnum.git](https://github.com/hellman/libnum.git) && cd libnum && python setup.py install`
  * yafu
    * 
  * RSATool2v17.exe
## RSA解密
若已知私钥d，则可以直接解密： `m=pow(c,d,n)` 。
若已知质数p和q，则通过依次计算欧拉函数值phi、私钥d可解密。简易实现如下：
    def rsa_decrypt(e, c, p, q):
        phi = (p - 1) * (q - 1)
        n = p * q
        try:
            d = gmpy2.invert(e, phi) #求e模phi的逆
            return pow(c, d, n)
        except Exception as e:
            print "e and phi are not coprime!"
            raise e
在选取加密指数e时要求phi，e互质，也就是`gcd(phi,e)==1` ，如果不满足是无法直接解密的。
为什么说这个呢？是因为有时会有乍一看有点奇怪的情况。比如SCTF2018的`Crypto - a number problem` ，题目是
    x**33=1926041757553905692219721422025224638913707 mod 3436415358139016629092568198745009225773259
    tell me the smallest answer of x
其中`n=3436415358139016629092568198745009225773259`
可以直接分解得到p,q，出`phi=(p-1)*(q-1)` ，然后惊奇地发现`gcd(phi,33)==3`
。这时如果对加密过程比较熟悉的话，就可以想到实际上公钥`e=11` ，明文是`m=x^3` ，应该先求出m。然后再爆破x。
    for i in range(1000000):
        # 推荐使用gmpy2库运算，用pow开立方不可行
        if gmpy2.iroot(m + i * n, 3)[1]:
            x = gmpy2.iroot(m + i * n, 3)[0]
            # i==243277,x==9420391510958023
            break
## 查询已知的n的可分解情况
在线查询：
api接口：
    curl http://factordb.com/api?query=12345
    response:
    {"id":"12345","status":"FF","factors":[["3",1],["5",1],["823",1]]}
## 使用yafu分解N
**适用情况：p,q相差较大或较小时可快速分解。**
使用方法：`yafu-x64.exe factor(233)` ，`yafu-x64.exe help`