http://mdsec.net/shop/154/
http://mdsec.net/shop/167/
http://mdsec.net/shop/179/
cc0055..iinndddd 115500 88//1199//22001111 1122::0055::4444 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 151
Chapter 5 n Bypassing Client-Side Controls 151
Attaching a Debugger
Decompilation is the most complete method of understanding and compromis-
ing a browser extension. However, in large and complex components containing
tens of thousands of lines of code, it is nearly always much quicker to observe the
component during execution, correlating methods and classes with key actions
within the interface. This approach also avoids diffi culties that may arise with
interpreting and recompiling obfuscated bytecode. Often, achieving a specifi c
objective is as simple as executing a key function and altering its behavior to
circumvent the controls implemented within the component.
Because the debugger is working at the bytecode level, it can be easily used
to control and understand the fl ow of execution. In particular, if source code
can be obtained through decompilation, breakpoints can be set on specifi c
lines of code, allowing the understanding gained through decompilation to be
supported by practical observation of the code path taken during execution.
Although effi cient debuggers are not fully matured for all the browser exten-
sion technologies, debugging is well supported for Java applets. By far the best
resource for this is JavaSnoop, a Java debugger that can integrate Jad to decom-
pile source code, trace variables through an application, and set breakpoints on
methods to view and modify parameters. Figure 5-6 shows JavaSnoop being
used to hook directly into a Java applet running in the browser. Figure 5-7
shows JavaSnoop being used to tamper with the return value from a method.
Figure 5-6: JavaSnoop can hook directly into an
applet running in the browser
NOTE It’s best to run JavaSnoop before the target applet is loaded.
JavaSnoop turns off the restrictions set by your Java security policy so that it
can operate on the target. In Windows, it does this by granting all permissions
to all Java programs on your system, so ensure that JavaSnoop shuts down
cleanly and that permissions are restored when you are fi nished working.
An alternative tool for debugging Java is JSwat, which is highly confi gu-
rable. In large projects containing many class fi les, it is sometimes preferable
cc0055..iinndddd 115511 88//1199//22001111 1122::0055::4444 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 152
152 Chapter 5 n Bypassing Client-Side Controls
to decompile, modify, and recompile a key class fi le and then use JSwat to hot-
swap it into the running application. To use JSwat, you need to launch an applet
using the appletviewer tool included in the JDK and then connect JSwat to it.
For example, you could use this command:
appletviewer -J-Xdebug -J-Djava.compiler=NONE -J-
Xrunjdwp:transport=dt_socket,
server=y,suspend=n,address=5000 appletpage.htm
Figure 5-7: Once a suitable method has been identified, JavaSnoop can be used to
tamper with the return value from the method
When you’re working on Silverlight objects, you can use the Silverlight Spy
tool to monitor the component’s execution at runtime. This can greatly help
correlate relevant code paths to events that occur within the user interface.
Silverlight Spy is available from the following URL:
http://firstfloorsoftware.com/SilverlightSpy/
cc0055..iinndddd 115522 88//1199//22001111 1122::0055::4444 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 153
Chapter 5 n Bypassing Client-Side Controls 153
Native Client Components
Some applications need to perform actions within the user’s computer that cannot
be conducted from inside a browser-based VM sandbox. In terms of client-side
security controls, here are some examples of this functionality:
n Verifying that a user has an up-to-date virus scanner
n Verifying that proxy settings and other corporate confi guration are in force
n Integrating with a smartcard reader
Typically, these kinds of actions require the use of native code components,
which integrate local application functionality with web application functional-
ity. Native client components are often delivered via ActiveX controls. These are
custom browser extensions that run outside the browser sandbox.
Native client components may be signifi cantly harder to decipher than other
browser extensions, because there is no equivalent to intermediate bytecode.
However, the principles of bypassing client-side controls still apply, even if this
requires a different toolset. Here are some examples of popular tools used for
this task:
n OllyDbg is a Windows debugger that can be used to step through native
executable code, set breakpoints, and apply patches to executables, either
on disk or at runtime.
n IDA Pro is a disassembler that can produce human-readable assembly
code from native executable code on a wide variety of platforms.
Although a full-blown description is outside the scope of this book, the fol-
lowing are some useful resources if you want to know more about reverse
engineering of native code components and related topics:
n Reversing:SecretsofReverseEngineering by Eldad Eilam
n HackerDisassemblingUncovered by Kris Kaspersky
n TheArtofSoftwareSecurityAssessment by Mark Dowd, John McDonald,
and Justin Schuh
n FuzzingforSoftwareSecurityTestingandQualityAssurance (ArtechHouse
Information Security and Privacy) by Ari Takanen, Jared DeMott, and
Charlie Miller
n TheIDAProBook:TheUnoffi cialGuidetotheWorld’sMostPopularDisassembler
by Chris Eagle
n www.acm.uiuc.edu/sigmil/RevEng
n www.uninformed.org/?v=1&a=7
cc0055..iinndddd 115533 88//1199//22001111 1122::0055::4455 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 154
154 Chapter 5 n Bypassing Client-Side Controls
Handling Client-Side Data Securely
As you have seen, the core security problem with web applications arises because
client-side components and user input are outside the server’s direct control.
The client, and all the data received from it, is inherently untrustworthy.
Transmitting Data Via the Client
Many applications leave themselves exposed because they transmit critical data
such as product prices and discount rates via the client in an unsafe manner.
If possible, applications should avoid transmitting this kind of data via the
client. In virtually any conceivable scenario, it is possible to hold such data on
the server and reference it directly from server-side logic when needed. For
example, an application that receives users’ orders for various products should
allow users to submit a product code and quantity and look up the price of each
requested product in a server-side database. There is no need for users to submit
the prices of items back to the server. Even where an application offers different
prices or discounts to different users, there is no need to depart from this model.
Prices can be held within the database on a per-user basis, and discount rates
can be stored in user profi les or even session objects. The application already
possesses, server-side, all the information it needs to calculate the price of a
specifi c product for a specifi c user. It must. Otherwise, it would be unable, on
the insecure model, to store this price in a hidden form fi eld.
If developers decide they have no alternative but to transmit critical data via
the client, the data should be signed and/or encrypted to prevent user tamper-
ing. If this course of action is taken, there are two important pitfalls to avoid:
n Some ways of using signed or encrypted data may be vulnerable to
replay attacks. For example, if the product price is encrypted before
being stored in a hidden fi eld, it may be possible to copy the encrypted
price of a cheaper product and submit it in place of the original price.
To prevent this attack, the application needs to include suffi cient context
within the encrypted data to prevent it from being replayed in a differ-
ent context. For example, the application could concatenate the product
code and price, encrypt the result as a single item, and then validate
that the encrypted string submitted with an order actually matches the
product being ordered.
n If users know and/or control the plaintext value of encrypted strings that
are sent to them, they may be able to mount various cryptographic attacks
to discover the encryption key the server is using. Having done this, they
can encrypt arbitrary values and fully circumvent the protection offered
by the solution.
cc0055..iinndddd 115544 88//1199//22001111 1122::0055::4455 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 155
Chapter 5 n Bypassing Client-Side Controls 155
In applications running on the ASP.NET platform, it is advisable never to
store any customized data within the ViewState — especially anything sensi-
tive that you would not want to be displayed on-screen to users. The option to
enable the ViewState MAC should always be activated.
Validating Client-Generated Data
Data generated on the client and transmitted to the server cannot in principle
be validated securely on the client:
n Lightweight client-side controls such as HTML form fi elds and JavaScript
can be circumvented easily and provide no assurance about the input that
the server receives.
n Controls implemented in browser extension components are sometimes
more diffi cult to circumvent, but this may merely slow down an attacker
for a short period.
n Using heavily obfuscated or packed client-side code provides additional
obstacles; however, a determined attacker can always overcome these.
(A point of comparison in other areas is the use of DRM technologies to
prevent users from copying digital media fi les. Many companies have
invested heavily in these client-side controls, and each new solution usu-
ally is broken within a short time.)
The only secure way to validate client-generated data is on the server side of
the application. Every item of data received from the client should be regarded
as tainted and potentially malicious.
COMMON MYTH
It is sometimes believed that any use of client-side controls is bad. In particu-
lar, some professional penetration testers report the presence of client-side
controls as a “fi nding” without verifying whether they are replicated on the
server or whether there is any non-security explanation for their existence. In
fact, despite the signifi cant caveats arising from the various attacks described
in this chapter, there are nevertheless ways to use client-side controls that do
not give rise to any security vulnerabilities:
n Client-side scripts can be used to validate input as a means of enhanc-
ing usability, avoiding the need for round-trip communication with the
server. For example, if the user enters her date of birth in an incorrect
format, alerting her to the problem via a client-side script provides a
much more seamless experience. Of course, the application must revali-
date the item submitted when it arrives at the server.
Continued
cc0055..iinndddd 115555 88//1199//22001111 1122::0055::4455 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 156
156 Chapter 5 n Bypassing Client-Side Controls
COMMON MYTH (continued)
n Sometimes client-side data validation can be effective as a security
measure — for example, as a defense against DOM-based cross-site
scripting attacks. However, these are cases where the focus of the attack
is another application user, rather than the server-side application,
and exploiting a potential vulnerability does not necessarily depend on
transmitting any malicious data to the server. See Chapters 12 and 13
for more details on this kind of scenario.
n As described previously, there are ways of transmitting encrypted data
via the client that are not vulnerable to tampering or replay attacks.
Logging and Alerting
When an application employs mechanisms such as length limits and JavaScript-
based validation to enhance performance and usability, these should be inte-
grated with server-side intrusion detection defenses. The server-side logic that
performs validation of client-submitted data should be aware of the validation
that has already occurred on the client side. If data that would have been blocked
by client-side validation is received, the application may infer that a user is
actively circumventing this validation and therefore is likely to be malicious.
Anomalies should be logged and, if appropriate, application administrators
should be alerted in real time so that they can monitor any attempted attack
and take suitable action as required. The application may also actively defend
itself by terminating the user’s session or even suspending his account.
NOTE In some cases where JavaScript is employed, the application still can
be used by users who have disabled JavaScript within their browsers. In this
situation, the browser simply skips JavaScript-based form validation code, and
the raw input entered by the user is submitted. To avoid false positives, the log-
ging and alerting mechanism should be aware of where and how this can arise.
Summary
Virtually all client/server applications must accept the fact that the client com-
ponent, and all processing that occurs on it, cannot be trusted to behave as
expected. As you have seen, the transparent communications methods gener-
ally employed by web applications mean that an attacker equipped with simple
tools and minimal skill can easily circumvent most controls implemented on
the client. Even where an application attempts to obfuscate data and processing
residing on the client side, a determined attacker can compromise these defenses.
cc0055..iinndddd 115566 88//1199//22001111 1122::0055::4455 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 157
Chapter 5 n Bypassing Client-Side Controls 157
In every instance where you identify data being transmitted via the client, or
validation of user-supplied input being implemented on the client, you should
test how the server responds to unexpected data that bypasses those controls.
Often, serious vulnerabilities lurk behind an application’s assumptions about
the protection afforded to it by defenses that are implemented at the client.
Questions
Answers can be found at http://mdsec.net/wahh.
1. How can data be transmitted via the client in a way that prevents tamper-
ing attacks?
2. An application developer wants to stop an attacker from performing brute-
force attacks against the login function. Because the attacker may target
multiple usernames, the developer decides to store the number of failed
attempts in an encrypted cookie, blocking any request if the number of
failed attempts exceeds fi ve. How can this defense be bypassed?
3. An application contains an administrative page that is subject to rigor-
ous access controls. It contains links to diagnostic functions located on a
different web server. Access to these functions should also be restricted
to administrators only. Without implementing a second authentication
mechanism, which of the following client-side mechanisms (if any) could
be used to safely control access to the diagnostic functionality? Do you
need any more information to help choose a solution?
(a) The diagnostic functions could check the HTTP Referer header to
confi rm that the request originated on the main administrative page.
(b) The diagnostic functions could validate the supplied cookies to confi rm
that these contain a valid session token for the main application.
(c) The main application could set an authentication token in a hidden fi eld
that is included within the request. The diagnostic function could vali-
date this to confi rm that the user has a session on the main application.
4. If a form fi eld includes the attribute disabled=true, it is not submitted
with the rest of the form. How can you change this behavior?
5. Are there any means by which an application can ensure that a piece of
input validation logic has been run on the client?
cc0055..iinndddd 115577 88//1199//22001111 1122::0055::4455 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 158
cc0055..iinndddd 115588 88//1199//22001111 1122::0055::4466 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 159
CHAPTER
6
Attacking Authentication
On the face of it, authentication is conceptually among the simplest of all the
security mechanisms employed within web applications. In the typical case, a
user supplies her username and password, and the application must verify that
these items are correct. If so, it lets the user in. If not, it does not.
Authentication also lies at the heart of an application’s protection against
malicious attack. It is the front line of defense against unauthorized access. If an
attacker can defeat those defenses, he will often gain full control of the applica-
tion’s functionality and unrestricted access to the data held within it. Without
robust authentication to rely on, none of the other core security mechanisms
(such as session management and access control) can be effective.
In fact, despite its apparent simplicity, devising a secure authentication func-
tion is a subtle business. In real-world web applications authentication often is
the weakest link, which enables an attacker to gain unauthorized access. The
authors have lost count of the number of applications we have fundamentally
compromised as a result of various defects in authentication logic.
This chapter looks in detail at the wide variety of design and implementa-
tion fl aws that commonly affl ict web applications. These typically arise because
application designers and developers fail to ask a simple question: What could
an attacker achieve if he targeted our authentication mechanism? In the majority
of cases, as soon as this question is asked in earnest of a particular application,
a number of potential vulnerabilities materialize, any one of which may be
suffi cient to break the application.
159
cc0066..iinndddd 115599 88//1199//22001111 1122::0066::3366 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 160
160 Chapter 6 n Attacking Authentication
Many of the most common authentication vulnerabilities are no-brainers.
Anyone can type dictionary words into a login form in an attempt to guess
valid passwords. In other cases, subtle defects may lurk deep within the appli-
cation’s processing that can be uncovered and exploited only after painstaking
analysis of a complex multistage login mechanism. We will describe the full
spectrum of these attacks, including techniques that have succeeded in breaking
the authentication of some of the most security-critical and robustly defended
web applications on the planet.
Authentication Technologies
A wide range of technologies are available to web application developers when
implementing authentication mechanisms:
n HTML forms-based authentication
n Multifactor mechanisms, such as those combining passwords and physi-
cal tokens
n Client SSL certifi cates and/or smartcards
n HTTP basic and digest authentication
n Windows-integrated authentication using NTLM or Kerberos