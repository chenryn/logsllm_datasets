title:Sharing More and Checking Less: Leveraging Common Input Keywords to
Detect Bugs in Embedded Systems
author:Libo Chen and
Yanhao Wang and
Quanpu Cai and
Yunfan Zhan and
Hong Hu and
Jiaqi Linghu and
Qinsheng Hou and
Chao Zhang and
Haixin Duan and
Zhi Xue
Sharing More and Checking Less: Leveraging Common 
Input Keywords to Detect Bugs in Embedded Systems
Libo Chen, School of Electronic Information and Electrical Engineering, Shanghai Jiao 
Tong University; Yanhao Wang, QI-ANXIN Technology Research Institute; Quanpu Cai and 
Yunfan Zhan, School of Electronic Information and Electrical Engineering, Shanghai Jiao 
Tong University; Hong Hu, Pennsylvania State University; Jiaqi Linghu, QI-ANXIN Technology 
Research Institute; Qinsheng Hou, QI-ANXIN Technology Research Institute; Shandong 
University; Chao Zhang and Haixin Duan, BNRist & Institute for Network Science and 
Cyberspace, Tsinghua University; Tsinghua University-QI-ANXIN Group JCNS; Zhi Xue, 
School of Electronic Information and Electrical Engineering, Shanghai Jiao Tong University
https://www.usenix.org/conference/usenixsecurity21/presentation/chen-libo
This paper is included in the Proceedings of the 
30th USENIX Security Symposium.
August 11–13, 2021
978-1-939133-24-3
Open access to the Proceedings of the 
30th USENIX Security Symposium 
is sponsored by USENIX.
Leveraging Common Input Keywords to Detect Bugs in Embedded Systems
Sharing More and Checking Less:
Libo Chen ∗∗1, Yanhao Wang∗2, Quanpu Cai1, Yunfan Zhan1, Hong Hu3, Jiaqi Linghu2, Qinsheng Hou2,6,
Chao Zhang4,5, Haixin Duan4,5, Zhi Xue ††1
1School of Electronic Information and Electrical Engineering, Shanghai Jiao Tong University
2QI-ANXIN Technology Research Institute
3Pennsylvania State University
4BNRist & Institute for Network Science and Cyberspace, Tsinghua University
5Tsinghua University-QI-ANXIN Group JCNS 6Shandong University
{bob777, zxue}@sjtu.edu.cn, PI:EMAIL, PI:EMAIL, {chaoz, duanhx}@tsinghua.edu.cn
Abstract
IoT devices have brought invaluable convenience to our daily
life. However, their pervasiveness also ampliﬁes the impact
of security vulnerabilities. Many popular vulnerabilities of
embedded systems reside in their vulnerable web services.
Unfortunately, existing vulnerability detection methods can-
not effectively nor efﬁciently analyze such web services: they
either introduce heavy execution overheads or have many
false positives and false negatives.
In this paper, we propose a novel static taint checking so-
lution, SaTC, to effectively detect security vulnerabilities in
web services provided by embedded devices. Our key insight
is that, string literals on web interfaces are commonly shared
between front-end ﬁles and back-end binaries to encode user
input. We thus extract such common keywords from the front-
end, and use them to locate reference points in the back-end,
which indicate the input entry. Then, we apply targeted data-
ﬂow analysis to accurately detect dangerous uses of the un-
trusted user input. We implemented a prototype of SaTC and
evaluated it on 39 embedded system ﬁrmwares from six popu-
lar vendors. SaTC discovered 33 unknown bugs, of which 30
are conﬁrmed by CVE/CNVD/PSV. Compared to the state-of-
the-art tool KARONTE, SaTC found signiﬁcantly more bugs
on the test set. It shows that, SaTC is effective in discovering
bugs in embedded systems.
1 Introduction
IoT (Internet of Things) devices open the door to unprece-
dented connectivity and bring innovative approaches and ser-
vices to our daily life. It is believed that 5.8 billion IoT end-
points are in use in 2020 [44]. However, the pervasiveness
of IoT devices renders bugs more devastating and leads to a
signiﬁcant security risk. According to the report [32], 57% of
IoT devices are vulnerable to medium or high severity attacks,
making these devices low-hanging fruit for attackers.
∗Co-leading authors.
†Corresponding author.
Among all IoT devices, wireless routers and web cameras
suffer more attacks than other embedded devices [32, 39, 41–
43]. The key reason is that these devices expose web ser-
vices and network services that usually contain exploitable
vulnerabilities. For example, a wireless router usually pro-
vides a web-based interface for end-users to conﬁgure the
system. The underlying ﬁrmware contains a web server, vari-
ous front-end ﬁles, and back-end binary programs. The web
server accepts HTTP requests from the front-end and sum-
mons back-end binaries to handle them. In this scenario, at-
tackers may construct malicious inputs to the front-end in
order to compromise corresponding back-end binaries.
Unfortunately, existing methods cannot effectively analyze
services in embedded systems to detect vulnerabilities. They
are blocked by complicated interactions and implicit data de-
pendencies between the front-end and the back-end. Dynamic
solutions, like fuzzing [8, 52] and emulation [7, 23, 50, 53],
provide concrete context to run the back-end. However, dy-
namic executions can only reach a small portion of all possible
program states, leading to a lot of false negatives. Static meth-
ods, like KARONTE [34], rely on the common inter-process
communication (IPC) paradigms between the front-end and
the back-end (e.g., environment variables) to locate input-
processing code, and perform centralized testing. Unfortu-
nately, these methods may result in many false positives as
they ignore the user-input context stored in the front-end ﬁles.
We observe that the key point of ﬁnding bugs from em-
bedded systems is to use the front-end of the web service to
locate the back-end code that handles the user-supplied data.
In this paper, we present SaTC (Shared-keyword aware
Taint Checking), a novel static analysis approach that tracks
the data ﬂow of the user input between front-end and back-
end to precisely detect security vulnerabilities. Our insight
is that a back-end function handling the user-input usually
shares a similar keyword with the corresponding front-end
ﬁle: in the front-end, the user-input is labeled with a keyword
and encoded in the data package; in the back-end, the same or
similar keyword is used to extract the user-input from the data
package. Therefore, we can use the shared keyword to identify
USENIX Association
30th USENIX Security Symposium    303
Figure 1: Motivating example. The left-hand side shows the front-end of the Tenda AC18 router: the USB management interface and the
source code of the web page; the right-hand side shows the back-end: the call graph of the message processing process. deviceName is used by
the code in the front-end and the back-end. An attacker can inject arbitrary command via sending a request with a malicious device name.
the connection between front-end and back-end, and locate
the entry of user-input in the back-end. With the user-input
entry, we can apply selective data-ﬂow analysis to track the
untrusted input and identify its dangerous usage, like using it
as a command, which leads to command injection attacks.
To improve the speed of vulnerability detection in embed-
ded systems, we propose three optimizations to traditional
taint analysis techniques. First, based on the features of IoT
ﬁrmware, we develop a coarse-grained taint engine which
contains special rules for particular functions to balance the
efﬁciency and accuracy. Second, we speed up the path explo-
ration with the input guidance and the trace merging, which
leverages the call graph and sink functions to optimize the
searching space. Finally, to handle the inﬁnite paths prob-
lem in speciﬁc functions (e.g., sanitizer function), we use a
prioritization algorithm to efﬁciently process loops.
We design SaTC with three components: an input-keyword
extractor to collect keywords from the front-end ﬁles, an in-
put entry recognizer to locate input entry in the back-end
binaries, and an input-sensitive taint engine to efﬁciently de-
tect vulnerabilities. Our prototype is implemented based on
Ghidra [31] and KARONTE [34] with around 9800 lines of
Python code. It supports parsing multiple types of front-end
ﬁles, including JavaScript, HTML, and XML ﬁles, and could
analyze back-end in widely used architectures, such as x86,
ARM, and MIPS.
To understand the efﬁcacy of SaTC on detecting vulner-
abilities from embedded systems, we apply our tool on 39
ﬁrmware samples from six vendors. SaTC successfully dis-
covered 33 unknown vulnerabilities in these latest-version
ﬁrmware samples, including command injection vulnerabili-
ties and buffer overﬂow bugs. Among these bugs, 30 of them
have been assigned CVE/CNVD/PSV IDs due to their severe
security impact. We also compare SaTC with the state-of-
the-art bug detection tool, KARONTE. After testing seven
ﬁrmware samples for two days, SaTC raises 65 alerts which
contain 36 true positives, while KARONTE does not detect
any true positive. The results show that SaTC is a practical
tool to detect bugs in embedded systems.
In summary, we make the following contributions:
• We propose a novel technique that leverages the common
keywords between the front-end and back-end of embedded
systems to locate the data entry in the back-end binary.
• We design and implement SaTC that utilizes coarse-grained
taint analysis and trace merging method to efﬁciently detect
vulnerabilities in embedded systems.
• We evaluate SaTC on 39 real-world ﬁrmware samples and
discover 33 unknown bugs, including command injection,
buffer overﬂow, and incorrect access control bugs.
To foster future research, we will release the source code
of SaTC as well as the experiment data at https://gith
ub.com/NSSL-SJTU/SaTC.
Roadmap. §2 provides the motivation and background of
this work, and gives an overview of our system. §3, §4, §5
and §6 present the design and implementation of our data-
relationship recovering technique and the sensitive-data ﬂow
analysis. We demonstrate the efﬁcacy of SaTC through ex-
periments and case studies on real-world ﬁrmware samples
in §7. We discuss the application scenarios of SaTC and its
limitation in §8, and compare our system with related work
in §9. §10 concludes the paper.
2 Problem and Approach Overview
In this section, we ﬁrst provide the background of vulnerabili-
ties in embedded systems. Then, we present the overview of
our approach and discuss the associated challenges.
Threat Model. In this paper we aim to detect security vulner-
304    30th USENIX Security Symposium
USENIX Association
Back-endFront-EndAttackerSendMaliciousRequestSendRequestClick Event(Unmount)UserfuncAfuncBfuncCfuncEformsetUsbUnloadfuncDCommand InjectionRegister_Handler (" GetSambaCfg ",formGetSambaConf );
Register_Handler (" setUsbUnload ",formsetUsbUnload );
Register_Handler (" GetUsbCfg ",formGetUsbCfg );
1 int sub_426B8 () {
2
3
4
5 }
6
7 int formsetUsbUnload ( uint32_t input) {
8
9
10
11
12
13
14 }
uint32_t v1 = input;
void *cmd = WebsGetVar (input ," deviceName " ,& unk_F213C );
doSystemCmd (" netctrl %d?op=%d, string_info =%s" ,..., cmd);
sub_2C43C (v1 ,"HTTP /1.0 200 OK\r\n\r\n");
sub_2C43C (v1 ,"{\" errCode \":0}");
return sub_2C984 (v1 ,200);
Listing 1: Back-end code of the motivating example. Function
sub_426B8 registers several handler functions, including function
formsetUsbUnload which processes USB unload action.
abilities from two types of IoT devices, i.e., wireless routers
and web cameras. These devices implement convenient web
services and network services to help the system manage-
ment, conﬁguration and data sharing, like through protocols
MQTT (Message Queuing Telemetry Transport) and UPnP
(Universal Plug and Play). As these two types of devices are
usually the entries to the home network or local network [25],
attackers pay a lot of attention to them and like to hack them
through the network services [7, 8, 13]. For example, a re-
cent study [45] shows that 75% of IoT attacks in 2018 are
directed against routers, while web cameras are second at
15.2%. Meanwhile, most of these devices still have critical
ﬂaws [32, 46]. We consider the attackers who have access to
a copy of the target device’s ﬁrmware, but are not physically
accessible to the victim device. They can only communi-
cate with the front-end interfaces to affect the values used
in the back-end. The back-end is protected with state-of-the-
art defense mechanisms on IoT devices, such as Executable
Space Protection [26], Address Space Layout Randomiza-
tion [33], and stack canaries [14]. However, due to the limited
resources, no advanced mechanisms (e.g., software deﬁned
networking [3], intrusion detection system [1, 49]) are de-
ployed to dynamically recognize these attacks, i.e., command
injection and memory corruption attacks.
2.1 Motivating Example
The web services of an IoT device usually consist of two
components, the front-end and the back-end. The front-end
presents the conﬁgurations and functionalities of the device to
the end-users, while the back-end parses the requests received
from the front-end and executes related services. Figure 1
shows an example where the end-user utilizes the interac-
tive web interface to manage external devices of the Tenda
AC18 router. Currently, there is one USB drive called Gen-
eral USB Flash Disk mounted to the router and the user de-
cides to remove it. From the front-end web interface, she
just needs to click the Unmount button. The front-end will
automatically synthesize an unmount request with the device
name attached (line 4 in status_usb.js on the left-hand side),
and send the request to the back-end on the right-hand side.
The back-end web server will parse the request and invoke
function formsetUsbUnload to handle the request. Function
formsetUsbUnload identiﬁes the device name, synthesizes a
command string (line 4 in httpd) and executes the command
to unmount the speciﬁed device (line 5 in httpd).
Unfortunately, the web service contains a typical command
injection vulnerability. As function formsetUsbUnload gener-
ates the unmount command without any sanitization check,
an attacker can append extra commands to deviceName and
thus run arbitrary commands on the router. For example, a
malicious deviceName 22;telnetd -l /bin/sh -p 3333 &
forces the back-end program to run two commands: 1)
netctrl ... 22 and 2) telnetd -l /bin/sh -p 3333 &,
where the second command launches a server to accept any
future commands. Furthermore, an attacker can directly send
the malicious unmount command to the back-end via the URL
http://IP:Port/goform/setUsbUnload?deviceName=evalCMD,
showing that the device can be compromised remotely.
Current bug-ﬁnding techniques cannot detect these vulner-
abilities effectively. Dynamic solutions, like fuzzing [8] and
emulation [7, 50, 53], cannot guarantee to cover all program
states and may miss many critical bugs. For example, to use
the recent work SRFuzzer [52] to identify this bug, we have to
insert a USB device into the router and trigger all the normal
interactions between the front-end and the back-end, includ-
ing Unmount. However, if we do not have much knowledge of
the router and forget to take these manual actions, the dynamic
methods will likely miss this highly exploitable bug. Static ap-
proaches such as KARONTE [34] focus on back-end binaries
and try to analyze all possible paths to ﬁnd bugs. For exam-
ple, KARONTE takes common inter-process communication
(IPC) paradigms between the web server and the binaries as
the starting points for analysis. However, the large number of
IPC interfaces bring in a large number of excessive analyses
and thus lead to many false positives. We need to identify
the real entries of user-inputs in the back-end programs to
perform targeted, accurate analysis.
2.2 Observation
Without an oracle to highlight all real entries of user-inputs
in the back-end, how can we discover the vulnerability in the
motivating example? Our intuition is that the strings shown
in the web interface are commonly used in both front-end
ﬁles and back-end functions: in the front-end, the user-input
is labeled with a keyword and encoded in the data package; in
the back-end, the same or similar keyword is used to extract
the user-input from the data package. With these shared key-
words, we can connect the front-end and the back-end, and
identify the input-processing functions from the latter. Start-
ing from these functions, we can perform the static data-ﬂow
analysis and effectively identify exploitable bugs.
Consider our motivating example in Figure 1, the front-
end JavaScript ﬁle status_usb.js contains two strings
goform/setUsbUnload and deviceName. Coincidentally, both
of them occur in the back-end binary httpd. Listing 1 pro-
USENIX Association
30th USENIX Security Symposium    305
Table 1: Intuition veriﬁcation. F-Strs represents the strings se-
lected from front-end and used to encode user-input; B-allStrs rep-
resents all the printable strings in the back-end; Intersection repre-
sents the F-Strs strings that are used to retrieve data in the back-end;
Veriﬁed indicates the Intersection strings conﬁrmed to label the
same data in the front-end and the back-end; % represents the pro-
portion of Veriﬁed in Intersection.
Vendor
Tenda
Tenda
Tenda
Tenda
Netgear
Netgear
Motorola M2
D-Link
867
D-Link
882
TOTOLink A950RG
Device Series #F-Str #B-allStrs #Intersect Veriﬁed %
81.4
AC9
70
AC15
96.9
63
86.4
AC18
57
79
W20E
88.8
59 100.0
R7000P
72
XR300
94.7
31 100.0
50
94.3
94.1
81
27
87.1
86
65
66