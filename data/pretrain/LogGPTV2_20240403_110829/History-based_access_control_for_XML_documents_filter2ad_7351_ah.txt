user wants to view an entire document, the view operation must be invoked
for every objects of the document. In contrast to the read operation of some
other systems, e.g., [BL73, BN89], the view operation does not imply a data
transfer in a technical system. In contrast to this, a view is presented to the
user. Since the user could misuse the viewed information, the view operation
48
CHAPTER 4. MODEL
is logged in the history at the time when the view is created and presented
to the user. All versions of the view operation are listed together with their
parameters in Table 4.5.
Parameter 1
Operation
element speciﬁcation
view element
attribute speciﬁcation
view attribute
view text block text block speciﬁcation
Table 4.5: Versions of the view operation and their parameters
The view element operation is used to view an element. With this op-
eration only the element itself can be viewed, but not its attributes and text
content. This operation also does not allow to view the children elements of
an element. For these elements, the view element operation must be invoked
individually. If our model is implemented as part of an editing program, the
program can invoke the view element operation for every element of the
document the user wants to view. As a result of this process, the program,
can create a view of the document.
In similar fashion, to the view element operation, the view attribute
operation is used to view attributes and the view text block operation is
used to view the text content of an XML element.
4.5 History
We use the history to keep track of changes caused by the operations create,
copy, delete, change attribute and view. As stated above, we use the
history to record how the content of a document was created. Finally, we
can access this information in conditions to deﬁne the applicable objects of
an access control rule.
We record the following aspects in the history:
• The context of each performed operation, where the context is a tuple
of subject, role and date.
• The previous values of attributes, where each change is caused by the
change-attribute operation.
• Deleted elements.
• Deleted attributes.
4.5. HISTORY
49
• Which elements or text blocks are copies of each other. These copies
were created by the copy operation.
Concerning the copy operation, we store which object is a copy of another
object. We store this information by keeping track of the is-copy-of relation
between objects. We deﬁne the is-copy-of relation between two objects o1
and o2 as follows:
Deﬁnition 4.5.1 (is-copy-of relation). An object o1 is in is-copy-of relation
with an object o2, if o1 was created by applying the copy operation on o2.
To visualize this, we can view the copied objects as a graph, where each
node of the graph represents an object and each directed edge of the graph
represents a copy operation. This directed edges point from the original to
the copied object. In other words, each edge represents an is-copy-of relation
between two objects of the graph.
Figure 4.1: Illustration of the is-copy-of relation
Figure 4.1 shows a graphical illustration of the is-copy-of relation of the
objects mentioned in the scenario. We refer to this kind of illustration as
copy graph. We deﬁne a copy graph as follows:
Deﬁnition 4.5.2 (copy graph). A copy graph is a graph, where each object
is represented as a node and the is-copy-of relation between the objects is
represented by directed edges.
Moreover, Figure 4.1 shows two copy graphs. The copy graph on the left
side of the ﬁgure shows three is-copy-of relations, whereas the graph on the
right side of the ﬁgure only shows one such relation.
In this example, all
objects are text blocks. In the general case, objects of a copy graph can be
XML elements as well. In addition, the copy graph in the ﬁgure may not
reﬂect all is-copy-of relations and there can be nodes that are in is-copy-
of relation with the depicted nodes, but these are not shown. In the case,
where no nodes are omitted from the copy graph, we refer to the copy graph
as being complete. Such a complete copy graph is deﬁned as follows:
ABEFCDPress ReleaseReport (Main)Report (Intro.)Int. NewsletterPatent ApplicationProject Summary50
CHAPTER 4. MODEL
Deﬁnition 4.5.3 (complete copy graph). A copy graph is complete, if there
is no object that is in is-copy-of relation with an object of the graph and that
is not represented by a node of the graph.
4.6 Access Control Rules
In this section, we deﬁne the syntax and the semantics of access control rules.
We deﬁne two types of rules. The ﬁrst type of rule deﬁnes permissions for
the unary operations create, view, delete and change attribute. Ac-
cordingly, we refer to this type of rule as unary rule. The second type of rule
deﬁnes permissions for the binary operation. Consequently, we call this type
of rule copy rule. The syntax of both types of rules is listed in Figure 4.2.
We deﬁne the semantics of the rules below.
Unary rule
Copy rule
Element
Role
Operation Operation
Object
Mode
Description
Role
Description
Element
Role
Role
“Copy”
Operation
XPath
XPath
Object
Destination XPath
allow | deny Mode
allow | deny
Figure 4.2: Syntax of access control rules
Access control rules consist of several ﬁelds, where each ﬁeld except of
the mode ﬁeld deﬁnes a condition that must be true to apply the rule. If any
of the conditions deﬁned by a ﬁeld of the rule is not satisﬁed, then the rule is
not applicable. Next, we continue by explaining the diﬀerent ﬁelds of a rule.
4.6.1 Role ﬁeld
The role ﬁeld of a rule describes the role (as described in [SCFY96] and
Section 2.1.2) in which a subject must be active in to apply the rule. In other
words, if a subject is active in the same role as deﬁned in the corresponding
rule, the rule is applicable for him.
In addition to this, the rule is also
applicable, if a subject is active in a role that is superior to the role deﬁned
in the rule. Reconsider the role hierarchy from the scenario (see Section 3.1),
where employee is the most generic role and researcher is a role that is
superior to employee. In this example, a rule deﬁned for the role employee
is also applicable for subjects that are active in the role researcher.
4.6. ACCESS CONTROL RULES
51
4.6.2 Operation ﬁeld
The operation ﬁeld of a rule deﬁnes the operation for that a rule is applicable
for.
In other words, the operation deﬁned in the rule must be equal to
the operation that a subject wants to perform. Otherwise the rule is not
applicable for that operation. In case of a copy rule, the operation ﬁeld is
always copy. Moreover, we do not diﬀerentiate between the diﬀerent types
of objects in the operation ﬁeld of a rule. For example, if the creation of
an attribute should be allowed, the operation ﬁeld of the corresponding
rule is set to create instead of create attribute. To denote that the rule
allows the creation of a speciﬁc attribute, an attribute must be speciﬁed in
the object ﬁeld of a rule.
4.6.3 Object ﬁeld
The object ﬁeld of a rule deﬁnes for which objects a rule is applicable for.
Instead of listing individual objects in rules in an ACL-like manner [GD72],
we describe objects by their properties, e.g., location within a document or
attribute values. In addition to this, we can describe objects by their history.
We use XPath patterns [CD99] (see also Section 2.2.5) to describe the objects
for which a rule is applicable. We use XPath, since its clearly deﬁned seman-
tics makes the interpretation of the resulting rules unambiguous. Moreover,
XPath has a predeﬁned set of mechanisms that can be used for our purpose,
which also simpliﬁes the implementation of our model. To check whether a
rule is applicable for a speciﬁc object, we must evaluate the XPath pattern
for the current object. As a result, we will receive a set of objects that is
speciﬁed by the XPath pattern. If the current object is part of this result
set, the rule is applicable for that object.
4.6.4 Destination ﬁeld
The destination ﬁeld of a copy rule deﬁnes the destinations to where an
object must be copied to be aﬀected by the rule. Since only the copy op-
eration has a destination, only copy rules have a destination ﬁeld. When
a user performs a copy operation, its destination must be included in the
destination ﬁeld of a copy rule to apply the corresponding rule. Similar to
the object ﬁeld, the destination ﬁeld is an XPath pattern. This pattern
must be evaluated for the current destination document, which yields to a set
of objects that are described by the pattern. If the destination of the current
copy operation is part of this result set, then the copy rule is applicable for
that destination.
52
CHAPTER 4. MODEL
4.6.5 Mode ﬁeld
Finally, the mode ﬁeld of a rule does not deﬁne a condition that must be
fulﬁlled. Instead, it deﬁnes whether the rule is positive or negative. If the
mode ﬁeld of a rule is set to “deny”, then the rule is negative. In contrast to
this, if the mode ﬁeld of a rule is set to “allow”, the rule is positive. Thus, a
positive rule allows the speciﬁed operation on the object in question, whereas
a negative rule denies to perform the operation.
4.6.6 Conﬂict resolution strategy
In some cases, there can be more than one applicable access control rule for
an operation that a user wants to perform. We have no problem if all of
these rules are either positive or negative. But in cases, where some of these
rules are positive and some others are negative, we have a conﬂict. In these
cases, we either must allow or deny the corresponding operation.
A common conﬂict resolution strategy is to deﬁne that one type of rule
has priority over the other type, e.g., that deny rules always take precedence.
According to Requirement 8 (see Section 3.2), we want to have a more ad-
vanced strategy, which also allows to specify positive exceptions to a negative
rule. We cannot do this with the simple “deny takes precedence over allow
strategy”. Therefore, we use a two step approach in conﬂict resolution.
In the ﬁrst step, we compare the role ﬁelds of all matching rules. Since
rules also match if the subject is in a superior role to the role deﬁned in
the rule, we can have rules which diﬀer in their role ﬁeld. In this case, a
rule that speciﬁes a superior role has precedence over a rule that speciﬁes an
inferior role. For example, if we have an allow rule for subjects in the role
senior accountant and a deny rule for subjects in the role accountant,
then the rule for subjects in the role senior accountant takes precedence.
We only apply the second step, if the conﬂict was not solved with the
ﬁrst step. The conﬂict is not solved, if there are still positive and negative
rules remaining, which do not diﬀer in their role ﬁeld. In these cases, we
ﬁnally apply “deny takes precedence over allow”.
4.6.7 Default semantics
In contrast to the previous situation, where multiple rules are applicable for
an object, there also can be objects for which no access control rule deﬁnes
access. In these cases, we apply the default semantics of our model, which is
deny. In other words, if the access to the object is neither allowed nor denied
by a rule, then the object is not accessible.
4.7. ACCESSING THE HISTORY WITH XPATH
53
4.7 Accessing the History with XPath
We use access control rules to deﬁne access depending on the content of a
document and on the history. Recall that we use XPath patterns to deﬁne
the objects of a unary rule as well as the destination of a copy rule. As
a consequence, we need a method to access the histories within an XPath
pattern.
It is not possible to access the history information with the predeﬁned
mechanisms of XPath, because the mechanisms of XPath are restricted to
the current document and at least some parts of the history should not be
stored within the document itself, e.g., the information about the is-copy-of
relation among elements should be stored separately, since it aﬀects multi-
ple documents. Moreover, the access to the histories should be independent
of the method of storing the histories. This allows to change the storing
mechanism without the need to change all existing access control rules. As
a consequence, to enable access to the history information from XPath pat-
terns, we extend the function library of XPath with a set of functions that
we deﬁne in the following sections. The functions are designed to enable ac-
cess to all history information (see Section 4.5) that we record. Since XPath
allows to combine several aspects in a logical condition, we can also deﬁne
rules which need to use multiple aspects of the history. All functions can op-
tionally use an element as ﬁrst parameter. Otherwise, all functions apply to
the current context element. We have organized our functions in six diﬀerent
groups, where each group consists of functions for a similar purpose.
4.7.1 Getting Copies of an Object
This group of functions is related to the is-copy-of relation of objects among
each other, where an object can either be a text block (see Section 4.3) or
an XML element. The functions of this group are required to express rules
that deﬁne access depending on the source of an object or on the locations
to where an object was copied. Figure 4.1 illustrates the is-copy-of relation,
where the examples show the processes of the scenario in Chapter 3. For
each object, we denote in which document it is contained, e.g., object A is
created within a press release.
The function copies returns all elements of the corresponding complete
copy graph, whereas the function predecessors returns all elements that are
on the path to the root element of the copy graph starting from the current
element. Finally, the function successors returns all elements in the subtree
below the current element. The elements occurring as the result of any such
function are sorted ascending by creation time, which enables the author of a
54
CHAPTER 4. MODEL
rule to use the indexing mechanisms of XPath to address a speciﬁc element,
e.g., predecessors()[1] refers to the root of a copy graph.
Moreover, the surrounding XML document of the returned elements can
be analyzed in a rule. For example, to check in which type of document
the copies of an element reside, one must retrieve the corresponding root
element of a copied element. As a result, the access rights of one XML
document can depend on the content of several other XML documents. We
refer to these documents as dependent documents. We deﬁne whether one
document depends on another document as follows:
Deﬁnition 4.7.1 (depending document). A document d1 depends on the
document d2 if at least one object of d1 is part of the complete copy-graph of
an object in d2.
Note that the relation deﬁned above is symmetrical, which means that
if d1 depends on d2 then d2 also depends on d1. For one document d1 there
can be more than one document on which d1 depends on. We refer to all
documents on which the access rights of one document can depend as the set
of depending document, which we deﬁne as follows:
Deﬁnition 4.7.2 (depending documents). The set of depending documents
of a document d1, is the set of all documents dx, where d1 depends on dx.
The depending document are important, when the access rights of one
document are evaluated, since the content of the depending documents can
be relevant for the access rights of the document in question.
Table 4.6 lists the functions for getting the copies of an object and gives
an example for each one. These examples refer to the left graph of Figure
4.1 and B as the current element.
Function
copies()
predecessors() elements on the path to the root {A}
successors()
Returns
all elements of the copy graph
elements in the subtree below
Example
{A, B, C, D}
{C, D}
Table 4.6: Getting the copies of an object
We can formulate a policy from our scenario in Chapter 3 by writing
a corresponding access control rule with the help of the copies function.
The rule denies the viewing of reports for a subjects in the role “researcher”
if they contain nodes that have been copied to or from a patent application
(PA). To keep the example rule short, we do not check whether the PA is still
4.7. ACCESSING THE HISTORY WITH XPATH
55
Role: