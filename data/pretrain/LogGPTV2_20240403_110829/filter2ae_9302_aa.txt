### 一、前言
过了一遍“数字经济CTF”的区块链题目，发现题目还可以。在这里将思路以及解题过程做一个总结，希望能够给研究的同学带来一些启发。
比赛包括两道题目，这里先将第一题的分析以及过程做一个总结。
### 二、题目描述
拿到题目如下所示：
观察后发发现题目没有给传统的基础函数提示，所以我们对合约基本上是一无所知的。所以还是老样子，我们需要逆向合约了。
根据题目我们也知道获得flag的形式还是调用SendFlag函数，传入邮箱获得。
下面让我们具体分析一下题目。
### 三、解题步骤
扔到decompile中
得到下面的一些函数：
    contract Contract {
        function main() {
            memory[0x40:0x60] = 0x80;
            if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }
            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;
            if (var0 == 0x1a374399) {
                // Dispatch table entry for 0x1a374399 (unknown)
                var var1 = msg.value;
                if (var1) { revert(memory[0x00:0x00]); }
                var1 = 0x00be;
                var var2 = func_02FA();
                var temp0 = memory[0x40:0x60];
                memory[temp0:temp0 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;
                var temp1 = memory[0x40:0x60];
                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];
            } else if (var0 == 0x1cee5d7a) {
                // Dispatch table entry for 0x1cee5d7a (unknown)
                var1 = msg.value;
                if (var1) { revert(memory[0x00:0x00]); }
                var1 = 0x0115;
                var2 = func_0320();
                var temp2 = memory[0x40:0x60];
                memory[temp2:temp2 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;
                var temp3 = memory[0x40:0x60];
                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];
            } else if (var0 == 0x6bc344bc) {
                // Dispatch table entry for payforflag(string)
                var1 = msg.value;
                if (var1) { revert(memory[0x00:0x00]); }
                var1 = 0x01be;
                var temp4 = msg.data[0x04:0x24] + 0x04;
                var temp5 = msg.data[temp4:temp4 + 0x20];
                var temp6 = memory[0x40:0x60];
                memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;
                memory[temp6:temp6 + 0x20] = temp5;
                memory[temp6 + 0x20:temp6 + 0x20 + temp5] = msg.data[temp4 + 0x20:temp4 + 0x20 + temp5];
                var2 = temp6;
                payforflag(var2);
                stop();
            } else if (var0 == 0x8da5cb5b) {
                // Dispatch table entry for owner()
                var1 = msg.value;
                if (var1) { revert(memory[0x00:0x00]); }
                var1 = 0x01d5;
                var2 = owner();
                var temp7 = memory[0x40:0x60];
                memory[temp7:temp7 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;
                var temp8 = memory[0x40:0x60];
                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];
            } else if (var0 == 0x96c50336) {
                // Dispatch table entry for 0x96c50336 (unknown)
                var1 = 0x021f;
                func_059E();
                stop();
            } else if (var0 == 0x9ae5a2be) {
                // Dispatch table entry for 0x9ae5a2be (unknown)
                var1 = 0x0229;
                func_0654();
                stop();
            } else if (var0 == 0xd0d124c0) {
                // Dispatch table entry for 0xd0d124c0 (unknown)
                var1 = msg.value;
                if (var1) { revert(memory[0x00:0x00]); }
                var1 = 0x0240;
                var2 = func_0730();
                var temp9 = memory[0x40:0x60];
                memory[temp9:temp9 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;
                var temp10 = memory[0x40:0x60];
                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];
            } else if (var0 == 0xe3d670d7) {
                // Dispatch table entry for balance(address)
                var1 = msg.value;
                if (var1) { revert(memory[0x00:0x00]); }
                var1 = 0x02c3;
                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;
                var2 = balance(var2);
                var temp11 = memory[0x40:0x60];
                memory[temp11:temp11 + 0x20] = var2;
                var temp12 = memory[0x40:0x60];
                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];
            } else if (var0 == 0xed6b8ff3) {
                // Dispatch table entry for 0xed6b8ff3 (unknown)
                var1 = msg.value;
                if (var1) { revert(memory[0x00:0x00]); }
                var1 = 0x02ee;
                func_076D();
                stop();
            } else if (var0 == 0xff2eff94) {
                // Dispatch table entry for Cow()
                var1 = 0x02f8;
                Cow();
                stop();
            } else { revert(memory[0x00:0x00]); }
        }
        function func_02FA() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }
        function func_0320() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }
        function payforflag(var arg0) {
            if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }
            if (msg.sender != storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }
            if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }
            var temp0 = address(address(this)).balance;
            var temp1 = memory[0x40:0x60];
            var temp2;
            temp2, memory[temp1:temp1 + 0x00] = address(storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);
            var var0 = !temp2;
            if (!var0) {
                var0 = 0x7c2413bb49085e565f72ec50a1fb0460b69cf327e0b0d882980385b356239ea5;
                var temp3 = arg0;
                var var1 = temp3;
                var temp4 = memory[0x40:0x60];
                var var2 = temp4;
                var var3 = var2;
                var temp5 = var3 + 0x20;