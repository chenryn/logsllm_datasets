through its APIs. In a microservice architecture, the add-
on server is likely to have its own data storage.
• The attacker may be able to access data in the host
application with cross-domain messaging, or indirectly
through the add-on server. The ability to do this depends
on the design of the host application and its add-on APIs.
• The attacker can spoof another user interface in the add-
on iframe and trick the user into entering conﬁdential
data or credentials.
• As in all XSS attacks, the attacker can access HTML5
APIs and request access to local resources, such as ge-
olocation, or authorization to external resources owned
by the victim user.
We will discuss the designs of different host applications
and analyze what the attacker can gain in each case in Sec-
tion 4. It is important to understand that the malicious script
runs in the iframe with a different origin than the host ap-
plication. Thus, it cannot access the DOM model of the host-
application within the web browser or the cookies related to
the host application. Instead, any access to host-application
data has to be gained either through published APIs in the
add-on server or with cross-origin access methods.
4 Analysis of XSS consequences
To understand better what consequences there are to the ex-
ecution of malicious code, we analyzed the add-on system
architectures of three popular cloud application suites: Mi-
crosoft (MS) Ofﬁce Online [3], G Suite [1], and Shopify [4].
This section presents our analysis in detail, and Table 2 at the
end of the section summarizes the results.
4.1 MS Ofﬁce Online add-ons
MS Ofﬁce Online is a cloud-based ofﬁce suite, which includes
popular ofﬁce applications like Word, Excel, PowerPoint, and
Outlook. The applications in the suite all have the same ar-
chitecture, illustrated in Figure 2. The add-on UI is displayed
inside the host application UI, which allows the user to inter-
act with the add-on seamlessly when using the application.
The add-on UI is contained in an iframe and has a different
origin than the encapsulating application, which prevents it
from directly accessing user data in the host application.
The add-on interacts with the host application on the client
side via JavaScript APIs. Speciﬁcally, MS Ofﬁce Online ap-
plications use window.postMessage() [43] for cross-origin
Figure 2: MS Ofﬁce Online add-on architecture
messaging between the add-on’s iframe and the parent appli-
cation window. The add-on can request different levels of ac-
cess to the host-application data [37], shown in Table 1. If the
host application is Word, Excel, PowerPoint or OneNote, the
add-on can only request access to the current document that
the user is working on. Outlook add-ons, on the other hand,
can request access not only to the current item (i.e. email or
compose form) but also to the user’s whole mailbox. Outlook
add-ons can also call getCallbackTokenAsync(), a special
API that returns an access token with the permission level of
the add-on. The add-on UI running in the browser can send
this token to the add-on server, which can use it to access the
email server [39] on the add-on’s behalf for a limited time.
4.1.1 XSS exploits
Let us consider how an attacker can exploit an MS Ofﬁce
Online add-on that is vulnerable to XSS. First, the victim
needs to install the add-on. Then, depending on the add-on, the
attacker can exploit the situation with either of the two attack
vectors that we presented in Section 3: it can inject malicious
scripts into a document that is shared with the victim, or in
the case of Outlook, it can send an email that contains the
malicious scripts to the victim. Below, we consider what kind
of access the attacker can gain to the user’s data in the host
application.
Get the same level of access as the add-on. Because of the
local messaging with the host application window, the attacker
can access any resources that the add-on is permitted to access.
Since the attacker’s scripts run within the add-on’s iframe, it
is not possible for the host application to differentiate between
malicious requests from the attackers and legitimate ones.
If the host application is Word, Excel, PowerPoint or
OneNote, the attacker can access only the open document.
This might not always be useful to the attacker because the
document was originally shared with the attacker. However,
the attacker can use the injected script as a backdoor to retain
his access even after the victim revokes his legitimate access,
e.g. by making a personal copy of a form or template before
4
ofﬁce.live.com/Word.aspxAdd-on UIAdd-onserverOfﬁce App ServerJavaScriptAPIsOfﬁce AppUITable 1: MS Ofﬁce Online add-on permission levels
Application
Outlook
Word, Excel,
PowerPoint,
OneNote
Permission
Restricted
ReadItem
ReadWriteItem
ReadWriteMailbox
Restricted
ReadDocument
ReadAllDocument
WriteDocument
ReadWriteDocument
Description
Read phone numbers, addresses, and URLs from the current item
Read all properties of the current item
Full access to the current item
Full access to the mailbox
Read/write settings of the add-in that are stored in the current document
Read only the text in the current document
Read everything in the current document, which includes text, formatting, links, graphics, etc.
Write to the user’s selection in the current document.
Full access to the current document
ﬁlling it with conﬁdential data. In Outlook, on the other hand,
the attacker will gain full access to the victim’s mailbox if
the vulnerable add-on has the ReadWriteMailbox permission.
This means that the attacker can read all of the victim’s emails
and send emails on the victim’s behalf.
Request an OAuth 2.0 token. As noted earlier, the ability to
control the iframe enables the attacker to spoof parts of the
application user interface, which makes it possible to trick
the user in various ways, such as phishing for conﬁdential
data. We found, however, one speciﬁc trick that the attacker
can play on MS Ofﬁce Online users. Many add-ons act as the
connectors between the MS Ofﬁce Online applications and
third-party web services built on the Azure platform. Such
an add-on only provides a UI for the user to interact with the
third-party backend server. Instead of acting like an add-on
server, the server uses more powerful APIs for interacting
with the host application. To obtain such access, the service
provider must register an Azure application with the Microsoft
identity platform [36], and the user must authorize the appli-
cation to access the necessary resources. The authorization is
based on OAuth 2.0 [26] as follows. The add-on displays a
popup that shows information about the application includ-
ing the name, logo and domain, as well as the permissions
that the application is requesting, as illustrated in Figure 3. If
the user agrees to authorize the application, the application
will receive an access token, which it can use to access the
requested resources from anywhere.
Since the users of MS Ofﬁce Online add-ons are already fa-
miliar with the OAuth authorization prompt, the attacker can
exploit it to phish for access rights. First, the attacker creates
an Azure application with the exact same name as the vul-
nerable add-on. This is possible because Azure applications
do not need to have unique names. With the injected script,
the attacker requests authorization for some of the user’s re-
sources. If the victim authorizes the attacker’s application, the
attacker can use the access token to access the victim’s data
in the host application from anywhere. The token is similar
to the Outlook token discussed above but applicable to any of
the MS Ofﬁce Online applications. It is difﬁcult for the victim
user to judge whether a particular add-on should be granted
Figure 3: MS Ofﬁce Online add-on authorization prompt
an OAuth 2.0 token or limited to the add-on APIs.
4.1.2 Case study: Translator for Outlook
We will use the "Translator for Outlook" [38], an add-on de-
veloped by Microsoft itself, to demonstrate the exploits. As
the name suggests, it is an add-on for the email service Out-
look, which translates the user’s emails to a selected language.
The main workﬂow of the add-on is as follows.
1. The user starts the add-on. The host application will
display the add-on as a side panel in its UI.
2. The user selects the language that she wants to translate
the opening email to.
3. The add-on translates the whole email to the selected
language and displays the result.
The problem with the add-on is that it renders the translated
text as HTML without escaping the text ﬁrst. As the result,
if the attacker, which could be anyone on the Internet, sends
an email that contains malicious scripts to the victim and the
victim tries to translate it with the add-on, the scripts will
be executed. The add-on, however, only has the ReadItem
permission. Thus, by exploiting the local messaging with the
host application alone, the attacker will not be able to read
5
AppLogoLet
this
app
accessyour
info?.com
needs
your
permission
to:Read
your
proﬁle will be able to read yourproﬁle.Read
and
write
access
to
your
mail will be able to read, update,create and delete email in your mailbox.Does not include permission to send mail.Send
mail
as
you will be able to send mail asyou.Figure 5: G Suite add-on authorization prompt
Google. Its server has two main interfaces: one translates the
user-selected text and returns the result, and the other replaces
the text of the current selection with the translated text.
Since the add-on server is a Google APIs client, it must
be authorized before it can access the user’s private data.
This occurs when the user starts the add-on for the ﬁrst time.
Figure 5 shows a typical authorization prompt. If the user
approves, the add-on server obtains an access token with the
requested permissions.
G Suite add-ons can request permissions to access user
data in any G Suite applications. For example, a Google
Docs add-on can request permissions to send emails from
the user’s Gmail account. While this cross-application per-
missions model makes the add-ons ﬂexible and powerful,
malicious add-ons could exploit it to gain access to a wide
range of user data by, for example, requesting permissions
to “Read, compose, send, and permanently delete all your
email from Gmail” and “See, edit, create, and delete all of
your Google Drive ﬁles”. To mitigate such threats, Google
performs manual veriﬁcation of add-ons that request sensitive
permissions [23] to ensure that the add-ons comply with the
Google API User Data Policy [22].
4.2.1 XSS exploits
Next, we consider what kind of access a successful XSS at-
tacker can get to user data.
Get the same access as the add-on. At ﬁrst glance, since
the host application window does not accept local messages
from the add-on UI, it appears that the XSS attacker cannot
access the victim’s data. However, there is a very common
Google API used by the add-on UIs that allows the attacker to
bypass this limitation: Google provides the Picker API [20]
for the user to select a ﬁle or folder that is stored in Google
servers. Like any other Google APIs, the Picker API requires
an access token to operate. The add-on servers commonly
create an interface by which the add-on code running in the
browser can obtain a copy of the server’s token; this is even
recommended practice [21]. The server’s token, however, is
not limited to the Picker API. Now, the injected XSS code can
Figure 4: G Suite add-on architecture
the victim’s mailbox or send emails on the victim’s behalf.
To gain such access rights, the attacker can use his malicious
scripts to request an OAuth 2.0 token as we described in the
previous section.
4.2 G Suite add-ons
G Suite is another ofﬁce suite, which is developed by Google.
Some well-known examples of the applications in the suite
are Google Docs, Google Sheets, and Gmail.
Before going into details about how G Suite add-ons work,
we need to understand the concept of Google APIs [17]. They
are a set of APIs that give programmatic access to many
Google products, such as Google Maps and Google Drive.
For a client (e.g. a website) to access private user data using
the APIs, it must be ﬁrst attached to a Google Cloud Platform
(GCP) project [18]. The client then needs to obtain an access
token with OAuth as follows. First, the user is redirected to
the Google Authorization website, where the user must sign
in with her Google account. The website then displays an
authorization prompt showing the name of the GCP project
and the permissions that the client is requesting. If the user
grants the permissions, the Google Authorization server sends
the access token to the client. Otherwise, the client receives
an error.
Figure 4 shows the architecture of G Suite add-ons. The
main difference between them and MS Ofﬁce Online’s is
that G Suite add-ons are completely hosted on the Google
cloud. The add-on server is basically a Google APIs client that
can directly interact with the user data. The add-on UI sends
requests to interfaces deﬁned by the add-on server, and the
server implements the desired action on user data as well as
returns responses. The server interfaces can only be accessed
by add-on code that originates from the same server. One
example is Translate [19], a Google Docs add-on provided by
6
docs.google.com/document/G Suite App  UI Add-on  UIGoogle cloudAdd-onserverG Suite App  ServerGoogle APIs wants to access yourGoogle AccountThis will allow  to:View and manage your Google Docs documentsDisplay and run third-party web content inprompts and sidebars inside Google PI:EMAILalso request the access token, and thus it will gain the same
permissions to the user’s data as the add-on server has.
Request an OAuth 2.0 token. If the vulnerable add-on does
not use the Picker API, the attacker can turn the injected script
into a Google APIs JavaScript client and request an OAuth
2.0 token from the user. In that case, an authorization prompt
is displayed to the victim in the same way as when an add-
on requests permissions in its ﬁrst run (see Figure 5). While
the attacker must use his own GCP project for his malicious
client, it could choose a name for the project that matches the
add-on’s name.
This is similar to the phishing exploit that we presented for
Ofﬁce Online add-ons in Section 4.1.1. We believe that this
attack will have a high success rate because G Suite users are
already familiar with the authorization prompt, and the victim
might think that the add-on has been updated and needs new
permissions.
4.2.2 Case study: Form Ranger
Form Ranger [14] is an add-on for Google Form with the
most number of users. Google Forms is an online service that
helps collect information from users via surveys and quizzes,
and the add-on allows automatically populating a form with
data from any spreadsheet in the user’s Google Drive. The
main workﬂow of the add-on is as follows.
1. The user starts the add-on. The host application will
display the add-on as a side panel in its UI.
2. The add-on shows the list of questions in the form. For
each question, the add-on allows the user to populate the
answer options with data from a spreadsheet.
3. The user selects a question, and the add-on displays a list
of all spreadsheets that are stored in the user’s Google
Drive. Note that the Picker API is used here.
4. The user selects a document in the list, and the add-on