              Open Document
MainWindow类的Readers属性调用GetReaders方法，把读取器返回给ComboBox数据
绑定。GetReaders方法返回赋予documentReaders变量的列表。万一没有指定
documentReaders，就使用LogicalTreeHelper类获取网格grid1中的所有流文档读取器。由于
流文档读取器没有基类，也没有所有读取器都实现的接口，因此LogicalTreeHelper查找类
型为FrameworkElement、有Document属性的所有元素。所有流文档读取器都有Document
属性。对于每个读取器，用Name和Instance属性创建一个新的匿名对象。Name属性用于
显示在组合框中，允许用户选择活动的读取器，Instance属性包含对读取器的引用，如果
读取器应是活动的，就显示它（代码文件DocumentsDemos/Flow-DocumentsDemo/
MainWindow.xaml.cs）：
    public IEnumerable Readers => GetReaders();
    private List _documentReaders = null;
    private IEnumerable GetReaders()
    {
      return _documentReaders ? ?
      (
        _documentReaders =
        LogicalTreeHelper.GetChildren(grid1).OfType()
          .Where(el => el.GetType().GetProperties()
          .Where(pi => pi.Name == "Document").Count() > 0)
          .Select(el => new
          {
            Name = el.GetType().Name,
            Instance = el
          }).Cast().ToList());
      }
  注意： 用于GetReaders方法的合并运算符（??）参见第8章。
  注意： 示例代码使用了dynamic关键字——activeDocumentReader变量声明为
dynamic类型。使用dynamic关键字是因为，ComboBox中的SelectedItem会返回
FlowDocumentReader、FlowDocumentScrollViewer、FlowDocumentPageViewer或
RichTextBox。所有这些类型都是流文档读取器，它们都提供了FlowDocument类型的
Document属性。但是，要定义这个属性，并没有通用的基类或接口。dynamic关键字允
许从同一个变量中访问这些不同的类型，并使用Document属性。dynamic关键字详见第
16章。
当用户选择一个流文档读取器时，就调用OnReaderSelectionChanged方法。引用这个
方法的XAML代码如上所示。在这个方法中，把以前选择的流文档读取器设置为折叠，使
之隐藏起来，并把变量activeDocumentReader设置为选中的读取器：
    private void OnReaderSelectionChanged(object sender,
                                    SelectionChangedEventArgs e)
    {
      dynamic item = (sender as ComboBox).SelectedItem;
      if (_activedocumentReader ! = null)
      {
        _activedocumentReader.Visibility = Visibility.Collapsed;
      }
      _activedocumentReader = item.Instance;
    }
    private dynamic _activedocumentReader = null;
当用户单击按钮，打开文档时，就会调用OnOpenDocument方法。在这个方法中，使
用XamlReader类加载选中的XAML文件，如果读取器返回FlowDocument（此时XAML的
根元素是FlowDocument），就给activeDocumentReader的Document属性赋值，把Visibility
设置为visible：
      private void OnOpenDocument(object sender, RoutedEventArgs e)
      {
        try
        {
          var dlg = new OpenFileDialog();
          dlg.DefaultExt = "＊.xaml";
          dlg.InitialDirectory = Environment.CurrentDirectory;
          if (dlg.ShowDialog() == true)
          {
          using (FileStream xamlFile = File.OpenRead(dlg.FileName))
          {
            var doc = XamlReader.Load(xamlFile) as FlowDocument;
            if (doc ! = null)
            {
              _activedocumentReader.Document = doc;
              _activedocumentReader.Visibility = Visibility.Visible;
            }
          }
          }
        }
        catch (XamlParseException ex)
        {
          MessageBox.Show($"Check content for a Flow document: {ex.Message}");
        }
      }
运行的应用程序如图35-11所示。在该图的流文档中，FlowDocumentReader采用
TwoPage模式。
图35-11
35.4 固定文档
无论固定文档在哪里复制或使用，它总是定义相同的外观、相同的分页方式，并使用
相同的字体。WPF定义了用于创建固定文档的FixedDocument类，和用于查看固定文档的
DocumentViewer类。
本章使用一个示例应用程序，通过编程方式创建一个固定文档，该程序要求用户输入
一个用于创建固定文档的菜单规划。菜单规划的数据就是固定文档的内容。图35-12显示
了这个应用程序的主用户界面，用户可以在其中用DatePicker类选择某一天，在DataGrid
中输入一周的菜单，再单击Create Doc按钮，新建一个FixedDocument。这个应用程序使用
Page对象在NavigationWindow中导航。单击Create Doc按钮会导航到一个包含固定文档的
新页面上。
图35-12
Create 
Doc按钮的事件处理程序OnCreateDoc导航到一个新页面上。为此，处理程序
实例化新页面DocumentPage。这个页面包含一个NavigationService_LoadCompleted处理程
序，把它赋予NavigationService的LoadCompleted事件。在这个处理程序中，新页面可以访
问传送给页面的内容。接着调用Navigate（）方法导航到page2。新页面接收对象menus，
该对象包含了构建固定页面所需的所有菜单信息。menus变量的类型是
ObservableCollection（代码文件
CreateXps/CreateXps/MenuPlannerPage.xaml.cs）。
    private void OnCreateDoc(object sender, RoutedEventArgs e)
    {
      if (_menus.Count == 0)
      {
        MessageBox.Show("Select a date first", "Menu Planner",
                    MessageBoxButton.OK);
        return;
      }
      var page2 = new DocumentPage();
      NavigationService.LoadCompleted += page2.NavigationService_LoadCompleted;
      NavigationService.Navigate(page2, _menus);
    }
在DocumentPage中，使用DocumentViewer获取对固定文档的读取访问权限。固定文
档在NavigationService_LoadCompleted（）方法中创建。在这个事件处理程序中，从第一
个页面传递的数据通过NavigationEventArgs的ExtraData属性接收。
把接收到的ObservableCollection赋予menus变量，该变量用于构建固定
页面（代码文件CreateXps/ CreateXps/DocumentPage.xaml.cs）：
    internal void NavigationService_LoadCompleted(object sender,
      NavigationEventArgs e)
    {
      _menus = e.ExtraData as ObservableCollection;
      _fixedDocument = new FixedDocument();
      var pageContent1 = new PageContent();
      _fixedDocument.Pages.Add(pageContent1);
      var page1 = new FixedPage();
      pageContent1.Child = page1;
      page1.Children.Add(GetHeaderContent());
      page1.Children.Add(GetLogoContent());
      page1.Children.Add(GetDateContent());
      page1.Children.Add(GetMenuContent());
      viewer.Document = _fixedDocument;
      NavigationService.LoadCompleted -= NavigationService_LoadCompleted;
    }
固定文档用FixedDocument类创建。FixedDocument元素只包含可通过Pages属性访问
的PageContent元素。PageContent元素必须按它们显示在页面上的顺序添加到文档中。
PageContent定义了单个页面的内容。
PageContent有一个Child属性，因此可以把PageContent关联到FixedPage上。在
FixedPage上可以把UIElement类型的元素添加到Children集合中。在这个集合中可以添加
前两章介绍的所有元素，包括TextBlock，它本身可以包含Inline和Block元素。
在示例代码中，FixedPage的子元素用辅助方法GetHeaderContent（）、
GetLogoContent（）、GetDateContent（）和GetMenuContent（）创建。
GetHeaderContent（）方法创建一个TextBlock，并返回它。给TextBlock添加Inline元
素Bold，又给Bold添加Run元素。Run元素包含文档的标题文本。利用
FixedPage.SetLeft（）和FixedPage.SetTop（），定义TextBox在固定页面中的位置。
    private static UIElement GetHeaderContent()
    {
      var text1 = new TextBlock
      {
        FontFamily = new FontFamily("Segoe UI"),
        FontSize = 34,
        HorizontalAlignment = HorizontalAlignment.Center
      };
      text1.Inlines.Add(new Bold(new Run("cn|elements")));
      FixedPage.SetLeft(text1, 170);
      FixedPage.SetTop(text1, 40);
      return text1;
    }
GetLogoContent（）方法在固定文档中使用RadialGradientBrush添加一个Ellipse形状的
徽标：
    private static UIElement GetLogoContent()
    {
      var ellipse = new Ellipse
      {
        Width = 90,
        Height = 40,
        Fill = new RadialGradientBrush(Colors.Yellow, Colors.DarkRed)
      };
      FixedPage.SetLeft(ellipse, 500);
      FixedPage.SetTop(ellipse, 50);
      return ellipse;
    }
GetDateContent（）方法访问menus集合，把一个日期范围添加到文档中：
    private UIElement GetDateContent()
    {
      string dateString = $"{menus[0].Day:d} to {menus[menus.Count - 1].Day:d}";
      var text1 = new TextBlock
      {
        FontSize = 24,
        HorizontalAlignment = HorizontalAlignment.Center
      };
      text1.Inlines.Add(new Bold(new Run(dateString)));
      FixedPage.SetLeft(text1, 130);
      FixedPage.SetTop(text1, 90);
      return text1;
    }
最后，GetMenuContent（）方法创建并返回一个Grid控件，这个网格中的列和行包含
日期、菜单和价格信息：
      private UIElement GetMenuContent()
      {
        var grid1 = new Grid
        {
          ShowGridLines = true
        };
        grid1.ColumnDefinitions.Add(new ColumnDefinition
        {
          Width= new GridLength(50)
        });
        grid1.ColumnDefinitions.Add(new ColumnDefinition
        {
          Width = new GridLength(300)
        });
        grid1.ColumnDefinitions.Add(new ColumnDefinition
        {
          Width = new GridLength(70)
        });
        for (int i = 0; i < _menus.Count; i++)
        {
          grid1.RowDefinitions.Add(new RowDefinition
          {
          Height = new GridLength(40)
          });
          var t1 = new TextBlock(new Run($"{_menus[i].Day:ddd}"));
          var t2 = new TextBlock(new Run(_menus[i].Menu));
          var t3 = new TextBlock(new Run(_menus[i].Price.ToString()));
          var textBlocks = new TextBlock[] { t1, t2, t3 };
          for (int column = 0; column < textBlocks.Length; column++)
          {
        textBlocks[column].VerticalAlignment = VerticalAlignment.Center;
        textBlocks[column].Margin = new Thickness(5, 2, 5, 2);
        Grid.SetColumn(textBlocks[column], column);
        Grid.SetRow(textBlocks[column], i);
        grid1.Children.Add(textBlocks[column]);
          }
        }
        FixedPage.SetLeft(grid1, 100);
        FixedPage.SetTop(grid1, 140);
        return grid1;
      }
运行应用程序，所创建的固定文档如图35-13所示。
图35-13
35.5 XPS文档
使用Microsoft 
Word，可以把文档另存为PDF或XPS文件。XPS是XML纸张规范
（XML Paper Specification），是WPF的一个子集。Windows包含一个XPS读取器。
.NET在System.Windows.Xps、System.Windows.Xps.Packaging和System.IO.Packaging
名称空间中包含读写XPS文档的类和接口。
因为XPS以zip文件格式打包，所以很容易把扩展名为.xps的文件重命名为.zip，打开
该归档文件，来分析XPS文档。
XPS文件需要在.zip文档中有XML纸张规范（可从http://www.microsoft.com/
whdc/xps/xpsspec.mspx上下载）定义的特定结构。这个结构基于OPC（Open 
Packaging
Convention，开放打包约定）, Word文档（OOXML或Office Open XML）也基于OPC。在
这个文件中，可以包含用于元数据、资源（如字体和图片）和文档本身的不同文件夹。在
XPS文档的文档文件夹中，可以找到表示XAML的XPS子集的XAML代码。
要创建XPS文档，可使用System.Windows.Xps.Packaging名称空间中的XpsDocument
类。要使用这个类，也需要引用程序集ReachFramework。通过这个类可以给文档添加缩
略图（AddThumbnail（））和固定文档序列（AddFixedDocumentSequence（）），还可
以给文档加上数字签名。固定文档序列使用IXpsFixedDocumentSequenceWriter接口写入，
该接口使用IXpsFixedDocumentWriter在序列中写入文档。
如果FixedDocument已经存在，写入XPS文档就有一个更简单的方法。不需要添加每
个资源和每个文档页，而可以使用System.Windows.Xps名称空间中的XpsDocumentWriter
类。要使用这个类，必须引用System.Printing程序集。
下面的代码段包含一个创建XSP文档的处理程序。首先创建用于菜单规划的文件名，
它使用星期几和名称menuplan。星期几用GregorianCalender类来计算。接着打开
SaveFileDialog，让用户覆盖已创建的文件名，并选择在其中存储文件的目录。
SaveFileDialog类在名称空间Microsoft.Win32中定义，它封装本地文件对话框。接着新建
一个XpsDocument，其中将文件名传送给构造函数。因为XPS文件使用ZIP格式压缩内
容，所以使用CompressionOption可以指定该压缩是在时间上还是空间上进行优化。
之后使用静态方法XpsDocument.CreateXpsDocumentWriter（）创建一个
XpsDocumentWriter。重载XpsDocumentWriter的Write（）方法，从而接受不同的内容或
将内容部分写入文档中。Write（）方法可接受的选项有FixedDocumentSequence、
FixedDocument、FixedPage、string和DocumentPaginator。在示例代码中，仅传送了前面创
建的fixedDocument（代码文件CreateXps/CreateXps/MenuDocumentPage. xaml.cs）：
      private void OnCreateXPS(object sender, RoutedEventArgs e)
      {
        var c = new GregorianCalendar();
        int weekNumber = c.GetWeekOfYear(_menus[0].Day,
          CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
        var dlg = new SaveFileDialog
        {