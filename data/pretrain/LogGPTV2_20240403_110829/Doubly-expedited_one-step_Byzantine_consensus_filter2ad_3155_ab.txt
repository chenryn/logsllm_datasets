3
1.3 Roadmap
The paper is organized as follows: Section 2 presents the system model, the deﬁnitions of Byzantine
consensus problem and other necessary formalizations. Section 3 provides the legality criteria for doubly-
expedited condition-sequence pair and two examples for it. Section 4 describes the generic framework of
doubly-expedited one-step consensus algorithms. Section 5 provides the ﬁnal remarks.
2 Preliminaries
(cid:81)
2.1 System model
We assume an asynchronous distributed system model subject to Byzantine failures.
It consists of a
= {p1, p2, . . . , pn} of n processes. Each process communicates with each other process by sending
set
messages over a reliable link where neither message loss, duplication nor corruption occurs. Besides,
there is no assumption about relative speed of processes or about the timely delivery of messages.
As we consider Byzantine failure model, a faulty process can behave arbitrarily, which means that it
is allowed even not to follow the deployed algorithm. A process that is not faulty is said to be correct.
We assume an upper bound, denoted by t, on the number of faulty processes. Each process knows the
value of t in advance. Throughout this paper, we assume 5t  t ∨ F (J) = the most common non ⊥ value in J.
These properties are used to enforce the basic requirements of the doubly-expedited Byzantine con-
sensus. Informally, P 1 and P 2 are the predicates to test whether the current view of a process contains
1In what follows P 1(J) = true is abbreviated as P 1(J)
5
suﬃcient information to decide in one or two step(s) respectively, and F is the function to obtain the
decision value from the current view. Thus, the ﬁrst property LT1 is for imposing one-step termination.
The predicate P1 must allow each correct process to decide in one step if its view has the possibility to
come from an input vector included in the condition C1
k and the actual number of failures is less than or
equal to k. Similarly, the property LT2 corresponds to two-step decision. The property LA3 (or LA4)
enforces the agreement between one-step (or two-step) decision and others. The last property LU5 is the
one to guarantee unanimity.
3.3 Example 1: Frequency-Based Legal Condition-sequence pair
This subsection introduces a legal condition-sequence pair (P f req) that is based on the frequency-based
condition and proves its legality. Let 1st(J) be a non ⊥ value that appears most often in a vector J. If
two or more values appear most often in J, then the largest one is selected. Let ˆJ be a vector obtained
by replacing 1st(J) from J by ⊥, and we deﬁne 2nd(J) = 1st( ˆJ). That is, 2nd(J) is the second most
frequent value in J. The frequency-based condition Cf req
is deﬁned as follows:
d
d = {I ∈ V n|#1st(I)(I) − #2nd(I)(I) > d}
Cf req
It is known that Cf req
consensus in failure prone asynchronous systems, where at most d processes can crash.
belongs to d-legal conditions [10], which are necessary and suﬃcient to solve the
d
Using this condition, we can construct the frequency-based condition-sequence pair (P f req) as follows:
where
P f req = (S1, S2) = ((C1
0 , C1
1 , C1
2 , ...C1
k , ...C1
t ), (C2
0 , C2
1 , C2
2 , ...C2
k , ...C2
t ))
k = Cf req
C1
4t+2k and C2
k = Cf req
2t+2k
As well as, the associated parameters P 1f req, P 2f req and F f req can be deﬁned as below:
• P 1f req(J) ≡ #1st(J)(J) − #2nd(J)(J) > 4t.
• P 2f req(J) ≡ #1st(J)(J) − #2nd(J)(J) > 2t.
• F f req(J) = 1st(J).
Notice that, since there are at most t Byzantine processes, the stronger assumption n > 6t is required
to construct P f req.
Theorem 1 The condition-sequence pair P f req is legal.
Proof LT1: We have to show that ∀J ∈ V n
: ∃I ∈ C1
k ∧ dist(J, I) ≤ k ⇒ P 1(J).
t
That is #1st(I)(I) − #2nd(I)(I) > 4t + 2k ∧ dist(J, I) ≤ k ⇒ #1st(J)(J) − #2nd(J)(J) > 4t.
Since I ∈ C1
k, we have #1st(I)(I) − #2nd(I)(I) > 4t + 2k. As dist(J, I) ≤ k, we get #1st(I)(J) ≥
#1st(I)(I)− k. Also, for any value x (cid:54)= 1st(I), #x(J) ≤ #x(I) + k holds. Since 2nd(I) is the second most
frequent value in I, #x(J) ≤ #2nd(I)(I) + k. Hence, #1st(I)(J)− #x(J) ≥ #1st(I)(I)− k − #2nd(I)(I)− k.
Therefore, we get #1st(I)(J)− #x(J) > 4t. It implies that 1st(I) = 1st(J) and #1st(J)(J)− #2nd(J)(J) >
4t.
LT2: We have to show that ∀J ∈ V n
k ∧ dist(J, I) ≤ k ⇒ P 2(J).
That is #1st(I)(I) − #2nd(I)(I) > 2t + 2k ∧ dist(J, I) ≤ k ⇒ #1st(J)(J) − #2nd(J)(J) > 2t.
The proof is almost the same as the proof LT1 (with only replacing C1
: ∃I ∈ C2
k and 4t with C2
k and 2t respec-
t
tively).
6
LA3: Consider J, J(cid:48) ∈ V n
t . We have to show that if P 1f req(J) ∧ ∃I, I(cid:48) : J ≤ I ∧ J(cid:48) ≤ I(cid:48) ∧ dist(I, I(cid:48)) ≤ t,
then 1st(J) = 1st(J(cid:48)).
Suppose 1st(J) (cid:54)= 1st(J(cid:48)) for contradiction. Since P 1f req(J) holds, #1st(J)(J) − #v(J) > 4t also
t and J ≤ I, it follows that at most t entries
holds for any value v (cid:54)= 1st(J). From the facts J ∈ V n
of I, which are occupied by the value ⊥ in J, can contain v. Hence, #1st(J)(I) − #v(I) > 3t holds.
It implies that 1st(I) = 1st(J). Then, since dist(I, I(cid:48)) ≤ t, I and I(cid:48) can diﬀer in at most t entries.
Let these entries contain 1st(J) and v respectively in I and I(cid:48). Hence, #1st(J)(I(cid:48)) ≥ #1st(J)(I) − t and
#v(I(cid:48)) ≤ #v(I) + t. Therefore, #1st(J)(I(cid:48))− #v(I(cid:48)) ≥ #1st(J)(I)− t− #v(I)− t. When simpliﬁed, we get
#1st(J)(I(cid:48)) − #v(I(cid:48)) > t. This implies that 1st(I(cid:48)) = 1st(I) = 1st(J). Then, from J(cid:48) ∈ V n
t and J(cid:48) ≤ I(cid:48),
it follows that at most t entries of J(cid:48), which corresponds to 1st(J) in I(cid:48), can contain ⊥. It implies that