        if (inFirstElement) {
            this.putCurrentEntryIntoMap(reader, context, result, sortedMap);
            reader.moveUp();
        }
        this.populateMap(reader, context, result, sortedMap);
        try {
            if (JVM.hasOptimizedTreeMapPutAll()) {
                if (comparator != null && comparatorField != null) {
                    comparatorField.set(result, comparator);
                }
                result.putAll(sortedMap);
            } else if (comparatorField != null) {
                comparatorField.set(result, sortedMap.comparator());
                result.putAll(sortedMap);
                comparatorField.set(result, comparator);
            } else {
                result.putAll(sortedMap);
            }
        } catch (IllegalAccessException var8) {
            throw new ConversionException("Cannot set comparator of TreeMap", var8);
        }
    }
调用this.putCurrentEntryIntoMap(reader, context, result, sortedMap)，继续跟进
通过readItem读取标签内容，然后put到target这个map中去
回到populateTreeMap，通过reader.moveUp()往后继续解析xml
跟进 this.populateMap(reader, context, result, sortedMap)
跟进populateCollection
这里循环所有节点调用addCurrentElementToCollection
    protected void addCurrentElementToCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection, Collection target) {
        Object item = this.readItem(reader, context, collection);
        target.add(item);
    }
这里也是解析标签内容然后添加到target这map中去
readItem方法
    protected Object readItem(HierarchicalStreamReader reader, UnmarshallingContext context, Object current) {
        Class type = HierarchicalStreams.readClassType(reader, this.mapper());
        return context.convertAnother(current, type);
    }
读取标签内容，将其转换为对应的类，然后返回
最后在addCurrentElementToCollection中添加到map中去
跟进这里的readClassType
和之前的一样，然后返回一个type调用convertAnother
这里的流程就和之前一样了，最后跟到了DynamicProxyConverter#unmarshal
返回了一个代理类，代理的是EventHandler，回到populateTreeMap，调用了putAll
随后会调用父类的也就是Abstract的putAll
这里的key ，value就是之前添加到map的
跟进put，来到TreeMap的put
这里的k就是那个代理类，所以这里会触发对应的EventHandler#invoke方法
接着跟进invokeInternal方法
这里得到了targetMethod是ProcessBuilder.start
然后在这里调用到ProcessBuilder.start，就可以去执行相应的命令了
其实整个流程就是一个解析xml的流程
从com.thoughtworks.xstream.core.TreeUnmarshaller#start方法开始解析xml，调用HierarchicalStreams.readClassType通过标签名获取Mapper中对于的class对象。获取class完成后调用com.thoughtworks.xstream.core.TreeUnmarshaller#convertAnother,该方法会根据class转换为对应的Java对象。convertAnother的实现是mapper.defaultImplementationOf方法查找class实现类。根据实现类获取对应转换器，获取转换器部分的实现逻辑是ConverterLookup中的lookupConverterForType方法,先从缓存集合中查找Converter,遍历converters找到符合的Converter。随后，调用convert返回object对象。convert方法实现逻辑是调用获取到的converter转换器的unmarshal方法来根据获取的对象，继续读取子节点，并转化成对象对应的变量。直到读取到最后一个节点退出循环。最终获取到java对象中的变量值也都设置，整个XML解析过程就结束了
## POC2
            fookey
            foovalue
                java.lang.Comparable
                            calc.exe
                    start
            good
之前是用的sortedset标签，然后寻找到他的实现类是TreeMap类，这里直接用tree-map也可以，获取的实现类是他本身，转换器则是TreeMapConverter
# CVE-2020-26217远程代码执行漏洞
# 漏洞复现
影响范围
                0
                            text/plain
                                            0
                                            -1
                                            1
                                                        calc
                                                java.lang.ProcessBuilder
                                                start
                                            start
                                    KEYS
                                    0
                                    0
                                    0
                            false
                    0
            test
## 漏洞分析
在分析之前我们先来看一个例子，以便更好的理解POC
    package XStream;
    import com.thoughtworks.xstream.XStream;
    import java.util.HashMap;
    import java.util.Map;
    class person{
        String name;
        int age;
        public person(String name,int age){
            this.name = name;
            this.age = age;
        }
    }
    public class MapTest {
        public static void main(String[] args) throws Exception{
            Map map = new HashMap();
            map.put(new person("DawnT0wn", 20), "test");
            XStream xStream = new XStream();
            String xml = xStream.toXML(map);
            System.out.println(xml);
        }
    }
输出效果
          DawnT0wn
          20
        test
在Xstream将Map生成xml格式数据时，会为每个Entry对象生成一个…元素，并将该Entry中的key与value作为其子元素顺次放置于其中第一个和第二个元素处
这里我们生程xml数据的时候，是用的一个map类型，然后map的key，value分别是一个实例化和一个字符串
最后得到了的数据可以看出来，Xstream生成xml时，其结构应遵循如下结构
        ...
        ...
        ...
具体的可以在
回过头来看我们的poc，先折叠一下
看到是这个样子的，这里就是一个map类型，entry的key是jdk.nashorn.internal.objects.NativeString，value是test
然后这个类里面的value属性是com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data这个类，这个类里面的dataHandler属性又被设置为了什么，大致意思就是这样，接下来就可以开始分析了
跟踪方法和上面一个洞差不多，可以来到一个putCurrentEntryIntoMap方法，根据标签的类型，这次来到的是MapConverter#putCurrentEntryIntoMap方法
在这之前会新建一个map，也就是target，然后会调用put，放进target这个map中去，
之前看urldns这些链子的时候就知道，map的key最后会调用到hashcode，这里的key就是jdk.nashorn.internal.objects.NativeString，然后来到了jdk.nashorn.internal.objects.NativeString的hashcode方法
跟进this.getStringValue
判断value是否实现了String接口
看看POC
这个类的value被设置为了Base64Data类，在之前的convertAnother方法已经转换为java对象，所以这里调用了com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data的toString方法
跟进这个类的get
this.dataHandler.getDataSource().getInputStream()
首先获取this.dataHandler的datasource属性，即是获取Base64Data对象中dataHandler属性的DataSource值，Base64Data的dataHandler属性值以及dataHandler的dataSource属性值都可以在xml中设置。poc中将dataSource设置为：com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource
所以这里就相对于调用com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource的getInputStream方法
即获取他的is属性
在poc中，这个is属性被设置为了java.io.SequenceInputStream
再跟进readFrom
这里就调用了java.io.SequenceInputStream的read方法
跟进nextStream
这里的e属性被设置为了javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator，跟进nextElenment
这些参数都是可以再xml中设置的，来到了javax.imageio.spi.FilterIterator的next
再跟进advance
poc中设置了iter参数
        0
        -1
        1
                    calc
当iter.next()执行后，poc中构造的java.lang.ProcessBuilder被返回并赋值给elt
filter则是javax.imageio.ImageIO$ContainsFilter
跟进过来看到
调用了method.invoke传入的参数就poc构造的java.lang.ProcessBuilder
在method和elt都可控的情况下，method控制为ProcessBuilder类的start方法，因为这是个无参的方法，直接传入ProcessBuilder对象即elt即可，通过反射执行了ProcessBuilder类的start方法造成了命令执行
# CVE-2020-26259任意文件删除漏洞
## 漏洞复现
poc
                0
                            text/plain
                                /test.txt
                    0
            test
在我的根目录下创建一个txt后，运行后删除
## 漏洞分析
其实这个POC和上面CVE-2020-16217差别不大，只是is属性变了而已，继续看到这个get方法
之前是从readFrom下手，这次是从close方法下手
此时的is是com.sun.xml.internal.ws.util.ReadAllStream$FileStream，跟入com.sun.xml.internal.ws.util.ReadAllStream$FileStream中的close方法
这里判断tempFile只要部位空则删除，否则就打印文件不存在
# CVE-2021-21344远程代码执行漏洞
## 漏洞复现
起一个web服务
起一个恶意的rmi
POC
                2