title:ShadowCrypt: Encrypted Web Applications for Everyone
author:Warren He and
Devdatta Akhawe and
Sumeet Jain and
Elaine Shi and
Dawn Xiaodong Song
ShadowCrypt: Encrypted Web Applications for Everyone
Warren He
UC Berkeley
PI:EMAIL
Devdatta Akhawe
UC Berkeley
PI:EMAIL
Sumeet Jain
UC Berkeley
PI:EMAIL
Elaine Shi
University of Maryland
PI:EMAIL
Dawn Song
UC Berkeley
PI:EMAIL
ABSTRACT
A number of recent research and industry proposals discussed using
encrypted data in web applications. We ﬁrst present a systemati-
zation of the design space of web applications and highlight the
advantages and limitations of current proposals. Next, we present
ShadowCrypt, a previously unexplored design point that enables
encrypted input/output without trusting any part of the web ap-
plications. ShadowCrypt allows users to transparently switch to
encrypted input/output for text-based web applications. Shadow-
Crypt runs as a browser extension, replacing input elements in a
page with secure, isolated shadow inputs and encrypted text with
secure, isolated cleartext. ShadowCrypt’s key innovation is the use
of Shadow DOM, an upcoming primitive that allows low-overhead
isolation of DOM trees. Evaluation results indicate that Shadow-
Crypt has low overhead and of practical use today. Finally, based on
our experience with ShadowCrypt, we present a study of 17 popular
web applications, across different domains, and the functionality
impact and security advantages of encrypting the data they handle.
ACM Classiﬁcation: D.4.6 Security and Protection
1.
INTRODUCTION
Users today face the privacy diffusion problem: a number of web
applications handle their data but users lack control of and visibility
into who can access their data, who can modify it, and who can
summarize or embed their data without permission. Violations of the
user’s expectation of data usage abound, from rogue employees [8]
and government agencies [49], to unexpected changes in policies by
the web application itself [20, 28].
A promising solution to this problem is providing only encrypted
data to web applications. The user can control the decryption keys
and only provide them to trusted principals. A large body of prior
work in the cryptography community [7, 16, 44] as well as in the
systems community [37, 38] discusses techniques to encrypt and
compute on data handled by web (or cloud-based) applications.
Few, if any, of these proposals have achieved broad adoption. A
possible reason could be that all the proposals require signiﬁcant ap-
plication rewrites. The resulting deployment and usability difﬁculty
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660326.
is an insurmountable mountain for typical users and developers. Re-
quiring application rewrites also means that users cannot make the
switch to encrypted data; instead, they have to wait for developers.
Clearly, there is a need for a secure, usable mechanism for en-
crypting data in web applications that puts the users back in control.
For this reason, companies such as Virtru [48] have emerged. Virtru
offers a browser plugin that performs email encryption, such that
web-mail providers like Gmail cannot see users’ data in the clear.
However, Virtru provides only a point solution for a handful of Web-
mail providers, and does not generalize to other web applications.
1.1 Our Contributions: ShadowCrypt
We present ShadowCrypt, a general solution for encrypting tex-
tual data for existing web applications. With ShadowCrypt, security
conscious users are back in control of their data: they have the
choice of sending encrypted data to web apps (e.g., Gmail, Face-
book, Twitter, Reddit, etc.), while still being able to use much of the
functionality of existing web apps.1
ShadowCrypt sits between the web application and the user,
where it captures user input and provides encrypted data to the
application. When the application displays encrypted data to the
user, ShadowCrypt again transparently captures encrypted text in the
page and renders decrypted text instead. Our experiments indicate
that ShadowCrypt causes minimal overhead on web pages, which is
unnoticeable to the user.
ShadowCrypt is designed to be secure against potentially mali-
cious or compromised web applications. Therefore, a key challenge
in developing ShadowCrypt is successfully isolating private data
from the web application’s JavaScript and HTML code. While
the browser provides primitives to isolate JavaScript code, the user
only interacts with the DOM (i.e., the UI tree). Secure input/output
requires securely isolating the application’s DOM from the DOM
containing the private data in the clear. To isolate the DOM, Shadow-
Crypt relies on Shadow DOM, an upcoming W3C standard already
supported in modern web browsers like Google Chrome and Firefox.
In this sense, ShadowCrypt’s design minimizes the trusted comput-
ing base to the browser and ShadowCrypt itself. As we discuss
in Section 2.1, in all previous proposals of encrypting data to web
applications, the web application’s JavaScript/HTML code can ac-
cess the user’s data in the clear, while in some proposals even the
server-side PHP or Java code can access the user data in the clear.
ShadowCrypt defaults to random encryption, a good ﬁt for tex-
tual data common in web applications. ShadowCrypt also supports
deterministic encryption. This allows search to continue working
without application modiﬁcation, a trade-off also made in previous
work [37]. To study to what extent ShadowCrypt would impact
1ShadowCrypt is available for download in the Google Chrome
Store as well as open-source online [43].
through the DOM’s APIs. Both JavaScript (via, e.g., XMLHttpRe-
quest) and the DOM (via, e.g., form submissions) can send data to
the server. We refer to the combination of HTML, JavaScript, and
CSS code as client-side code.
All proposals to encrypt web application data attempt to reduce
the amount of code that can access data in the clear. Typically, these
proposals operate at a “chokepoint” to ensure complete mediation.
Figure 1 shows three chokepoints (a, b, and c).
An encryption system running at a chokepoint enforces the in-
variant that all code to the left (in Figure 1) of the chokepoint can
access only encrypted data. Code to the right of the encryption
system’s chokepoint is part of the application’s trusted computing
base (TCB); it has access to data in the clear, and users must trust it
to maintain the data’s conﬁdentiality.
A system using a chokepoint farther to the right has the beneﬁt
of a smaller TCB, but it is less ﬂexible. By contrast, a typical
web application without any data encryption has a large TCB that
encompasses all of its code, including the database.
(a) Between front end and database
Systems that rely on chokepoint (a) (Figure 1) give both the server-
side and client-side application code (i.e., the DOM and JavaScript
code) access to data in the clear. Data is encrypted before reaching
the database server. This design protects against a curious database
administrator or an untrusted/compromised database server.
Previous Work. CryptDB [37] adopts this design. CryptDB mod-
iﬁes the database schema to store encrypted values. CryptDB also
includes a proxy that interposes on application queries and translates
normal queries into queries on the encrypted database. This allows
an application’s unmodiﬁed queries to work transparently, easing
the system’s adoption.
Limitations. The user needs to trust both the server-side and
client-side code for ensuring data conﬁdentiality. While crypto-
graphic and remote attestation techniques can help prove code iden-
tity [36], authentic applications could still be vulnerable to (for
example) SQL Injection or XSS attacks leading to data theft.
CryptDB does support a user-aware mode to mitigate the large
TCB, but using it requires providing the CryptDB proxy with the
whole application’s access control logic, which impacts backwards
compatibility. Further, if an administrator with access to all users’
data logs in, an adversary could still get all the data in the clear.
(b) Between the client and the network
A system at this chokepoint (Figure 1 (b)) allows only the applica-
tion’s client side (i.e., JavaScript/HTML) to access private data in
the clear. The application’s client-side JavaScript code encrypts data
before sending any data to the server-side
Previous Work. This design is the most commonly used solution
today. Popular applications encrypting at this chokepoint include
password managers (e.g., LastPass), ﬁle hosting providers (e.g.,
Mega), messaging applications (e.g., CryptoCat), and secure note
providers (e.g., LastPass).
Christodorescu proposed the idea of separating the client’s UI
and networking code and inserting a crypto layer in between [9],
but their proposal requires a browser and application rewrite. Mylar
is an extension of the Meteor JavaScript framework for building
applications that encrypt all their data sent to the server [38]. Devel-
opers need to write their applications in Meteor (affecting backwards
compatibility) and tell Mylar what data needs encryption.
Limitations. In this design, everything to the right of the choke-
point (Figure 1 (b)) is part of the TCB. Thus, security of user data
requires authenticating the client-side (i.e., JavaScript/HTML) code.
Figure 1: Architecture of typical web applications and chokepoints for data
encryption.
the functionality of existing web applications, we tested Shadow-
Crypt with 17 popular web applications covering a broad range of
functionality such as email, social networks, task management, and
medical records. We found that the combination of deterministic and
random encryption facilitates transparent data encryption while still
maintaining prominent functionality in 14 out of the 17 applications
we studied, including popular applications like Gmail.
In our current prototype, users manually share the encryption
keys with collaborators through a separate, trusted channel. We
designed ShadowCrypt to handle key distribution independently of
its isolation system. We hope that ShadowCrypt provides a new,
easily deployed platform for the broader community to develop and
evaluate novel key management and sharing systems for security
and usability.
Our experience with popular web applications is (to our knowl-
edge) the ﬁrst empirical study of the trade-off between functionality
and data-encryption in wide-ranging applications such as publishing,
task management, and medical records. Section 7 provides the de-
tails of our case studies. The issues we present help identify future
work opportunities for encrypted data in the cloud. Some of the
issues we identify are fundamental: for example, it is not clear how
to support current advertising practices with encrypted user data.
Supporting encryption requires advertisers to adopt new targeting
and ad-serving practices.
2. PROBLEM AND APPROACH OVERVIEW
A number of recent proposals investigated encrypting data han-
dled by web applications. In this section, we ﬁrst systematize the
design space and organize previous work throughout this space (Sec-
tion 2.1). Then, we present ShadowCrypt and position it in the
design space (Section 2.2). We also discuss our threat model and
the security goals ShadowCrypt aims to ensure (Section 2.3).
2.1 Understanding the Design Space
Consider a simpliﬁed architecture of typical web applications
(including our running example), outlined in Figure 1. The server
consists of a database and a publicly accessible “frontend.” The
database stores user data, and the frontend (written in, for example,
PHP, NodeJS, or Rails) generates HTML from this data and serves
it to clients over the network. The frontend also receives data from
the client, processes it, and stores it in the database.
The client is a web browser, which transforms the HTML it
receives into the “DOM,” a tree-structured representation of the
application’s user interface. The user interacts with the application
through the DOM.
The application’s HTML can also include JavaScript code, which
JavaScript interacts with the user indirectly,
the browser runs.
DBaclientfront-endservercDOMJSbBugs in the client-side code (e.g., XSS) could also compromise
security by leaking data in the clear.
Applications such as LastPass and Mega trust their servers (via
an HTTPS channel) to provide correct code and thus only protect
against the passive adversary at the server side. CryptoCat is a
browser extension and does not load code from remote servers
(except, of course, during installation and updates). Mylar takes a
middle route: it requires the developer sign all client-side code and
a browser extension veriﬁes this signature before allowing the load.
These authentication measures only prove the identity of the code,
not that it is bug free. It is not trivial to implement encryption at
chokepoint (b) correctly. The browser does not provide any API to
interpose on all network channels. In addition to cross-site scripting
attacks, the application needs to protect against HTML injection
attacks, which can leak sensitive data without any JavaScript code
execution.
For example, if an attacker can insert the HTML string <img
src=’http://evil.com/log.cgi? (unclosed single quote)
before a secret value in HTML, the user’s secret data would end
up on the attacker’s servers without any JavaScript involved. Za-
lewski [52] and Heiderich [24] identify a number of attacks to steal
sensitive data even in the absence of code injection attacks.
Given the large size and complexity of modern HTML5 applica-
tions, ensuring correctness of client-side code and that it does not
leak sensitive data is difﬁcult. LastPass, Mega, and CryptoCat all
have suffered from client-side vulnerabilities [10, 12, 29]
2.2 ShadowCrypt
ShadowCrypt works at the chokepoint (c) in Figure 1. This
chokepoint encrypts data before the application code (including
the client-side code) can access it. The application can only view
an encrypted version of the data. This requires isolating the input
and output ﬁelds while still providing the application access to the
encrypted data.
Choosing this chokepoint means that no application code is in
the TCB. This leads to a system secure against attackers at the
client-side as well as the server-side. It also gives the user complete
control over the data. In contrast, previous proposals required trust-
ing application developers to handle data in a privacy-preserving
manner.
The key challenge is providing a secure user interface and an
isolated environment in which to store keys and to perform the
encryption. ShadowCrypt relies on the browser extension infrastruc-
ture to provide a secure isolated environment for executing code
and storing keys. Unfortunately, this is not sufﬁcient since the user
only interacts with the DOM (Figure 1), which is shared between
the application and browser extensions. ShadowCrypt relies on a