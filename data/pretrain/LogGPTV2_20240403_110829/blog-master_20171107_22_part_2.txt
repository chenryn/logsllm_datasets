 Planning time: 0.027 ms  
 Execution time: 2.591 ms  
(13 rows)  
```  
2、大数据量排序  
```  
alter table t_large set (parallel_workers =32);  
set parallel_setup_cost =0;  
set parallel_tuple_cost =0;  
set max_parallel_workers_per_gather =32;  
set work_mem ='1GB';  
explain select * from t_large order by id desc limit 1;  
postgres=# explain select * from t_large order by id desc limit 1;  
                                         QUERY PLAN  
---------------------------------------------------------------------------------------------  
 Limit  (cost=810844.97..810845.00 rows=1 width=4)  
   ->  Gather Merge  (cost=810844.97..3590855.42 rows=100000032 width=4)  
         Workers Planned: 32  
         ->  Sort  (cost=810844.14..818656.64 rows=3125001 width=4)  
               Sort Key: id DESC  
               ->  Parallel Seq Scan on t_large  (cost=0.00..473728.01 rows=3125001 width=4)  
(6 rows)  
postgres=# select * from t_large order by id desc limit 1;  
    id  
-----------  
 100000000  
(1 row)  
Time: 1482.964 ms (00:01.483)  
```  
3、大数据量创建索引效率  
```  
postgres=# create index idx_t_large_id on t_large(id);  
CREATE INDEX  
Time: 37937.482 ms (00:37.937)  
```  
4、大数据估值TOP N  
```  
postgres=# select most_common_vals, most_common_freqs from pg_stats where tablename='t_estimate';  

most_common_vals  | {354316,354445,404899,431899,451975,525707,545934,552219,631936,654703,686785,52824,97919,100231,134912,137688,158267,161541,171349,182376,182892,186086,192265,196224,197934,206937,207098,208325,213459,218788,218939,225221,226377,238291,239857,245513,245868,250632,250836,251535,251972,254658,254998,255236,256667,259600,260215,263041,266027,268086,271091,271490,271520,272019,272459,282086,286285,287848,288015,288233,288310,288344,288605,289181,289901,291581,296327,301385,301631,304765,304923,306094,306309,307188,312000,313190,313449,315581,317808,320374,320769,322517,322889,323389,326463,326738,330239,331553,334323,335451,335588,337521,338605,342766,344188,344662,344730,345081,345096,346053}  
most_common_freqs | {0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05,6.66667e-05}  
Time: 1.274 ms  
```  
5、大数据、复合索引、求任意一个GROUP c1的TOP c2的ID，1亿条数据。  
```  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 112  
number of threads: 112  
duration: 300 s  
number of transactions actually processed: 203376551  
latency average = 0.165 ms  
latency stddev = 0.324 ms  
tps = 677702.381595 (including connections establishing)  
tps = 677897.901150 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.002  \set c1 random(1,1000)  
         0.168  select id from t_idx_test where c1=:c1 order by c2 desc limit 1;  
```  
#### TPS： 677897  
5、大数据、复合索引、求任意一个GROUP c1的TOP c2的ID，1亿条数据。TPS：677897  
#### 平均响应时间： 0.165 毫秒  
1、小数据量排序，1万条数据，排序耗时 2.6 毫秒。  
2、大数据量排序，1亿条数据，排序耗时 1.48 秒。  
3、大数据量创建索引效率，1亿条数据，创建索引耗时 37.9 秒。  
4、大数据估值TOP N，1一条数据，估算TOP N，耗时 1.27 毫秒。  
5、大数据、复合索引、求任意一个GROUP c1的TOP c2的ID，1亿条数据。平均响应时间： 0.165 毫秒。  
## 参考  
[《PostgreSQL、Greenplum 应用案例宝典《如来神掌》 - 目录》](../201706/20170601_02.md)  
[《数据库选型之 - 大象十八摸 - 致 架构师、开发者》](../201702/20170209_01.md)  
[《PostgreSQL 使用 pgbench 测试 sysbench 相关case》](../201610/20161031_02.md)  
[《数据库界的华山论剑 tpc.org》](../201701/20170125_01.md)  
https://www.postgresql.org/docs/10/static/pgbench.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")