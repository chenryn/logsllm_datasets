示例：
    from burp import IBurpExtender 
    from burp import IContextMenuFactory
    from burp import IHttpListener
    class BurpExtender(IBurpExtender,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers   = callbacks.getHelpers()
            self._context   = None
            # set up the extension
            callbacks.setExtensionName('IBurp')
            callbacks.registerHttpListener(self)
        def processHttpMessage(self,toolflag,messageIsRequest,messageInfo):
            service = messageInfo.getHttpService()
            request = messageInfo.getRequest()
            analyze_req = self._helpers.analyzeRequest(service,request)
            params = analyze_req.getParameters()
            new_params = ''
            for param in params:
                k = param.getName().encode("utf-8")
                v = param.getValue().encode("utf-8")
                new_params += k + '=' + v +'&'
            new_params = new_params[:-1]
            print('Params is '+ new_params)
输出：
上述代码用于获取请求中的参数列表，包括cookie的以及query，如果不想要cookie的参数，可以使用一个判断：
    if param.getType() == IParameter.PARAM_COOKIE:
                    continue
参考：
  * analyzeResponse
此方法返回一个IResponseInfo实例，我们可以使用此实例来分析响应数据包。
示例：
    from burp import IBurpExtender 
    from burp import IContextMenuFactory
    from burp import IHttpListener
    class BurpExtender(IBurpExtender,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers   = callbacks.getHelpers()
            self._context   = None
            # set up the extension
            callbacks.setExtensionName('IBurp')
            callbacks.registerHttpListener(self)
        def processHttpMessage(self,toolflag,messageIsRequest,messageInfo):
            response = messageInfo.getResponse()
            analyze_response = self._helpers.analyzeResponse(response)
            print("status code:"+str(analyze_response.getStatusCode()))
输出：
  * getRequestParameter
此方法用于获取request中特定参数的详细信息，返回IParameter实例。
示例：
    from burp import IBurpExtender 
    from burp import IContextMenuFactory
    from burp import IHttpListener
    class BurpExtender(IBurpExtender,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers   = callbacks.getHelpers()
            self._context   = None
            # set up the extension
            callbacks.setExtensionName('IBurp')
            callbacks.registerHttpListener(self)
        def processHttpMessage(self,toolflag,messageIsRequest,messageInfo):
            request = messageInfo.getRequest()
            analyze_param = self._helpers.getRequestParameter(request,"v")
  * urlDecode
顾名思义，传入一个字符串，返回url解码后的字符串，同样也可以传入bytes的数据，返回被解码后的数据。
  * urlEncode
一样的，传入一个字符串，返回被url编码后的字符串，同上，也可以传入bytes的数据，返回被编码的字符串。
  * base64Decode&base64Encode&stringToBytes&bytesToString
这几个编码解码都是一样的，不重复赘述了。
  * indexOf
直接看图吧，这个方法和Python中的index的使用方式是一样的。
  * buildHttpMessage
这个方法挺重要的，在更新请求的时候会经常用到。
以github上的某个插件为例介绍此方法：[CaidaoExt.py](https://github.com/ekgg/Caidao-AES-Version/blob/8f52ef82f9cdbe84863b8c6f82c1ac3150159940/BurpSuite-Caidao-Extender/CaidaoExt.py)
在57-66行获取了请求的详细信息并使用buildHttpMessage方法创建一个更新后的请求：
    info = getInfo(messageInfo, messageIsRequest, self._helpers)
                headers = info.getHeaders()
                # get the body
                body = getBody(messageInfo.getRequest(), messageIsRequest, self._helpers)
                # encrypt the caidao post body
                encryptedBody = encryptJython(body, key, iv)
                newMSG = self._helpers.buildHttpMessage(headers, encryptedBody)
67行使用messageInfo.setRequest更新了请求消息主体，此时发出去的请求即为加密后的请求。
由于buildHttpMessage返回的是byte的数据类型，所以同样也可以用于漏扫时的重新发包：
    againReq = self._helpers.buildHttpMessage(againReqHeaders, reqBodys)
    ishttps = False
    if protocol == 'https':
    ishttps = True
    againRes = self._callbacks.makeHttpRequest(host, port, ishttps, againReq)
  * buildHttpRequest
同样的，此方法也可以用来使用于当漏扫时重新发包：
    java_URL = URL(http_url)
    port = 443 if java_URL.protocol == 'https' else 80
    port = java_URL.port if java_URL.port != -1 else port
    httpService = self.helpers.buildHttpService(java_URL.host, port, java_URL.protocol)
    httpRequest = self.helpers.buildHttpRequest(URL(http_url))
    self.callbacks.makeHttpRequest(httpService, httpRequest))
  * addParameter
看官方描述就清楚了，此方法是用于添加request中的参数的，需要传入一个byte的数据包以及IParameter实例的参数或参数集合。
返回一个完整的数据包，数据类型为byte。
  * removeParameter
同上，传递的参数都是一样的，只不过会移除指定的参数或参数集。
返回一个完整的数据包，数据类型为byte。
  * updateParameter
同上，用于更新请求中的参数，目前支持更新cookie，postdata，url中的参数。
返回更新后的完整数据包，数据类型为byte。
  * toggleRequestMethod
此方法用于切换GET/POST请求，类似以下这个按钮：
返回切换方法后的完整数据包，数据类型为byte。
  * buildHttpService
这个方法在官方案例中有提到：[TrafficRedirector.py](https://github.com/PortSwigger/example-traffic-redirector/blob/master/python/TrafficRedirector.py)
个人理解是用来更新httpservice的，一般搭配setHttpService来使用。
  * buildParameter
传入param的name以及value，最后一个type实际上就是IParameter内置的几个type：
返回一个IParameter实例，配合前面的updateParameter或addParameter使用。
  * makeScannerInsertionPoint&analyzeResponseVariations&analyzeResponseKeywords
留个坑，这几个方法没用过，不清楚细节，不在这儿班门弄斧了。
### IExtensionStateListener
此接口通过调用`IBurpExtenderCallbacks.registerExtensionStateListener()`来实现。
需要实现的方法只有一个：extensionUnloaded
当插件被取消使用或者被卸载时，都将触发此方法。
### IHttpListener
这个接口挺重要的，可以通过调用`IBurpExtenderCallbacks.registerHttpListener()`来实现此接口。
  * processHttpMessage
这是此接口中唯一一个需要实现的方法，当通过`IBurpExtenderCallbacks.registerHttpListener()`注册了HTTP监听器后，所有的流量都会先传入processHttpMessage方法中进行处理。
传递进来的值有这么几个：
1.toolFlag (标志位)  
2.messageIsRequest (标记处理的数据包是request还是response)  
3.messageInfo (一个IHttpRequestResponse实例，包含当前请求的详细信息)
需要注意的是，浏览器访问某个页面时，流量会先经过此方法，当此方法运行结束后，浏览器才会返回页面，所以如果我们的漏扫是需要发很多次包的，就不要使用这个接口，或者进行某些判断后才触发漏扫的流程。
我们一般使用这个方法来进行如下几个操作：
1.替换请求or响应主体内容  
2.进行一次性漏洞扫描 (如xxe这种只需要发一次包的)
### IHttpRequestResponse
此接口用于检索和更新有关数据包详细信息，具体可使用的方法如下：
PS：getxxx的方法只能在响应结束后使用，而setxxx的方法也只能在响应前使用。
下面挑几个经常用的来介绍。
  * getHttpService
返回IHttpService的实例，通过此方法我们可以获得一些请求中的信息，包括域名、端口、协议等。
示例：
    from burp import IBurpExtender 
    from burp import IContextMenuFactory
    from burp import IHttpListener
    class BurpExtender(IBurpExtender,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers   = callbacks.getHelpers()
            self._context   = None
            # set up the extension
            callbacks.setExtensionName('IBurp')
            callbacks.registerHttpListener(self)
        def processHttpMessage(self,toolflag,messageIsRequest,messageInfo):
            service = messageInfo.getHttpService()
            host = service.getHost()
            port = service.getPort()
            protocol = service.getProtocol()
            complete_url = str(protocol) + '://' + str(host) + ':' + str(port)
            print("You are loading: " + complete_url)
输出：
  * getRequest&getResponse
这两个方法用于获取请求主体或响应主体，返回的数据类型为bytes，一般配合analyzeRequest以及analyzeResponse来解析请求或响应主体中的信息。
  * setHighlight
高亮某个请求信息，color可以自定义，一般用于高亮存在敏感信息的数据包等。
示例：
    from burp import IBurpExtender 
    from burp import IContextMenuFactory
    from burp import IHttpListener
    class BurpExtender(IBurpExtender,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self._callbacks = callbacks
            self._helpers   = callbacks.getHelpers()
            self._context   = None
            # set up the extension
            callbacks.setExtensionName('IBurp')
            callbacks.registerHttpListener(self)
        def processHttpMessage(self,toolflag,messageIsRequest,messageInfo):
            messageInfo.setHighlight('red')
此时我们在history中就可以看到被高亮的请求了，效果如下：
  * setRequest&setResponse
两个set的作用都是一样的，一个是用来替换请求主体的信息，一个是用来替换响应主体的信息，拿一个做介绍，以一个解析unicode编码的插件为例：[changeu.py](https://github.com/stayliv3/burpsuite-changeU/blob/master/changeu.py)
29行开始处理数据包，使用`if not messageIsRequest`来确保处理的只是response。
42-50行处理header中的content-type：
    for header in headers:
                        # Look for Content-Type Header)
                        if header.startswith("Content-Type:"):
                            # Look for HTML response
                            # header.replace('iso-8859-1', 'utf-8')
                            # print header
                            new_headers.append(header.replace('iso-8859-1', 'utf-8'))
                        else:
                            new_headers.append(header)
将编码替换为utf-8。
54-62行处理response中的body：
    body = response[analyzedResponse.getBodyOffset():]
                    body_string = body.tostring()
                    # print body_string
                    u_char_escape = re.search( r'(?:\\u[\d\w]{4})+', body_string)
                    if u_char_escape:
                        # print u_char_escape.group()
                        u_char = u_char_escape.group().decode('unicode_escape').encode('utf8')
                        new_body_string = body_string.replace(u_char_escape.group(),'--u--'+u_char+'--u--')
                        new_body = self._helpers.bytesToString(new_body_string)
将unicode解码后替换为原响应body，在64行更新了响应结果：
    messageInfo.setResponse(self._helpers.buildHttpMessage(new_headers, new_body))
实现效果：
### IHttpService
这个之前讲其他接口的时候用到了，这里不赘述了，一般是要配合其他接口来使用的，获取详细的请求地址。
### IInterceptedProxyMessage&IProxyListener
IInterceptedProxyMessage这个接口是由注册IProxyListener来实现获取数据包的详细信息的。
先看看IProxyListener吧，这个其实和IHttpListener有点像，只不过IHttpListener是获取burp所有模块的数据包，而IProxyListener仅获取proxy模块的数据包。
接口描述如下：
传入的message就是IInterceptedProxyMessage的实例，其他的都和IHttpListener是一样的。
接着转回来看IInterceptedProxyMessage实例，其可以使用的方法如下：
这里的getMessageInfo方法，最终得到的就是IHttpListener中传入的message。
  * getClientIpAddress
此方法返回客户端的请求地址，一般是127.0.0.1。
  * getListenerInterface
此方法返回代理地址，默认为127.0.0.1:8080。
  * getMessageInfo
此方法返回一个IHttpRequestResponse实例，相当于IHttpListener中传入的message，可以调用其实例中存在的方法。
### IIntruderxxx
这几个接口留个坑，下次讲吧，没用到过。
### registerMenuItem
此接口用于实现自定义菜单上下文，并通过重写menuItemClicked方法来实现一些自定义操作。
通过`Callbacks.registerMenuItem()`来重写。
示例：
    #! /usr/bin/python
    # A sample burp extention in python (needs jython) which extracts hostname from the request (Target Tab).
    from burp import IBurpExtender
    from burp import IMenuItemHandler
    import re
    import urllib2
    class BurpExtender(IBurpExtender):
        def registerExtenderCallbacks(self, callbacks):
            self.mCallBacks = callbacks
            self.mCallBacks.registerMenuItem("Sample Extention", hostnamefunc())
    class hostnamefunc(IMenuItemHandler):
        def menuItemClicked(self, menuItemCaption, messageInfo):
            print "--- Hostname Extract ---"
            if messageInfo:
                request1=HttpRequest(messageInfo[0].getRequest())
                req=request1.request
                host=req[1]    
                print host
                print "DONE"
    class HttpRequest:
        def __init__(self, request):
            self.request=request.tostring().splitlines()
加载此插件后可以看到在右键菜单中多了一个选项：
通过点击就可以触发menuItemClicked方法，实现对应的功能，这里实现的功能是gethostname。
输出：
### Another
剩下的就是上图中的接口了，基本上是之前接口的方法中引入的实例或对象等。想了解这些方法的话，对应方法对应去看即可。
## 学习方法
个人建议是对着别人写过的工具理解其中的代码，哪里不理解的可以去看官方接口，或者去github搜某些接口的用法，本地多改改就能理解代码的含义了，
**Burp写插件其实就是在实现Burp自带的接口，重写其中的一些方法以达成某些想法。**
## 总结
在写这篇文章的过程中，很多方法我是一边实现一边写的，导致有的地方可能写的不正确(因为是按照个人理解写的)，如果有错误的地方，希望师傅们能指出来，我会及时更正文中的错误点