other complex codeby keeping a log of the semantics of these routines and noting 
possible error conditions and the implications of those errors. 
Because allocation routines are so universal and try to achieve much the same 
purpose from application to application, the following sections cover the most 
common problems you should watch for. 
Is It Legal to Allocate 0 Bytes? 
Many code auditors know that requesting an allocation of 0 bytes on most OS 
allocation routines is legal. A chunk of a certain minimum size (typically 12 or 16 
bytes) is returned. This piece of information is important when you're searching for 
integer-related vulnerabilities. Consider the code in Listing 7-37. 
Listing 7-37. Integer Overflow with 0-Byte Allocation Check 
char *get_string_from_network(int sockfd) 
{ 
  unsigned int length, read_bytes; 
  char *string; 
  int n; 
  length = get_integer_from_network(sockfd); 
  string = (char *)my_malloc(length + 1); 
  if(!string) 
    return NULL; 
  for(read_bytes = 0; read_bytes data_ptr = (char *)(data + sizeof(struct block_hdr)); 
    hdr->end_ptr = data + sizeof(struct block_hdr) + size; 
    return hdr->data_ptr; 
} 
This simple addition operation introduces the potential for an integer overflow 
vulnerability that is very similar to the problem in Listing 7-37. In this case, the 
my_malloc3() function is vulnerable to an integer overflow for any size values 
between 0xFFFFFFFF and 0xFFFFFFFF - sizeof(struct block_hdr). Any value in this 
range will result in the allocation of a small buffer for an extremely large length 
request. 
Reallocation functions are also susceptible to integer overflow vulnerabilities because 
an addition operation is usually required when determining the size of the new 
memory block to allocate. Therefore, if users can specify one of these sizes, there's a 
good chance of an integer wrap occurring. Adequate sanity checking is rarely done to 
ensure the safety of reallocation functions, so code reviewers should inspect carefully 
to make sure these checks are done. Listing 7-40 shows a function that increases a 
buffer to make space for more data to be appended. 
Listing 7-40. Reallocation Integer Overflow 
int buffer_grow(struct buffer *buf, unsigned long bytes) 
{ 
    if(buf->alloc_size  buf->used >= bytes) 
        return 0; 
    buf->data = (char *)realloc(buf->data, 
                                buf->alloc_size + bytes); 
    if(!buf->data) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
392 
        return 1; 
    buf->alloc_size += bytes; 
    return 0; 
} 
The bolded code in Listing 7-40 shows a potentially dangerous addition operation. If 
users can specify the bytes value, bytes + buf->alloc_size can be made to wrap, and 
realloc() returns a small chunk without enough space to hold the necessary data. 
Are the Data Types for Request Sizes Consistent? 
Sometimes allocation functions can behave unexpectedly because of typing issues. 
Many of the typing issues discussed in Chapter 6(? [????.]) are especially relevant 
when dealing with allocators, as any mistake in type conversions more than likely 
results in a memory corruption vulnerability that's readily exploitable. 
On occasion, you might come across memory allocators that use 16-bit sizes. These 
functions are more vulnerable to typing issues than regular allocators because the 
maximum value they can represent is 65535 bytes, and users are more likely to be 
able to specify data chunks of this size or larger. Listing 7-41 shows an example. 
Listing 7-41. Dangerous Data Type Use 
void *my_malloc4(unsigned short size) 
{ 
    if(!size) 
        return NULL; 
    return malloc(size); 
} 
The only thing you need to do to trigger a vulnerability is find a place in the code 
where my_malloc4() can be called with a value can be larger than 65535 (0xFFFF) 
bytes. If you can trigger an allocation of a size such as 0x00010001 (which, 
depending on the application, isn't unlikely), the value is truncated to a short, 
resulting in a 1-byte allocation. 
The introduction of 64-bit systems can also render allocation routines vulnerable. 
Chapter 6(? [????.]) discusses 64-bit typing issues in more detail, but problems can 
happen when intermixing long, size_t, and int data types. In the LP64 compiler 
model, long and size_t data types are 64-bit, whereas int types occupy only 32 bits. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
393 
Therefore, using these types interchangeably can have unintended and unexpected 
results. To see how this might be a problem, take another look at a previous example. 
void *my_malloc(unsigned int size) 
{ 
    if(size == 0) 
        return NULL; 
    return malloc(size); 
} 
As stated previously, this allocation wrapper doesn't do much except check for a 
0-length allocation. However, it does one significant thing: It takes an unsigned int 
parameter, as opposed to a size_t, which is what the malloc() function takes. On a 
32-bit system, these data types are equivalent; however, on LP64 systems, they are 
certainly not. Imagine if this function was called as in Listing 7-42. 
Listing 7-42. Problems with 64-Bit Systems 
int read_string(int fd) 
{ 
    size_t length; 
    char *data; 
    length = get_network_integer(fd); 
    if(length + 2  MAX_MEMORY_BLOCK) 
        return NULL; 
    size = (size + 15) & 0xFFFFFFF0; 
    return malloc(size); 
} 
The allocator in Listing 7-43 is quite restrictive, in that it allows allocating only small 
chunks. Therefore, it's not susceptible to integer overflows when rounding up the 
request size after the size check. If rounding were performed before the size check 
rather than after, however, the allocator would still be vulnerable to an integer 
overflow. Also, note whether the size parameter is signed. Had this argument been 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
395 
negative, you could evade this maximum size check (and wrap the integer over the 
0-boundary during the rounding up that follows the size check). 
Is a Different Size Memory Chunk Than Was Requested Ever Returned? 
Essentially all integer-wrapping vulnerabilities become exploitable bugs for one 
reason: A different size memory chunk than was requested is returned. When this 
happens, there's the potential for exploitation. Although rare, occasionally a memory 
allocation routine can resize a memory request. Listing 7-44 shows the previous 
example slightly modified. 
Listing 7-44. Maximum Memory Allocation Limit Vulnerability 
#define MAX_MEMORY_BLOCK 100000 
void *my_malloc6(unsigned int size) 
{ 
    if(size > MAX_MEMORY_BLOCK) 
        size = MAX_MEMORY_BLOCK; 
    size = (size + 15) & 0xFFFFFFF0; 
    return malloc(size); 
} 
The my_malloc6() function in Listing 7-44 doesn't allocate a block larger than 
MAX_MEMORY_BLOCK. When a request is made for a larger block, the function resizes the 
request instead of failing. This is very dangerous when the caller passes a size that 
can be larger than MAX_MEMORY_BLOCK and assumes it got a memory block of the size it 
requested. In fact, there's no way for the calling function to know whether 
my_malloc6() capped the request size at MAX_MEMORY_BLOCK, unless every function that 
called this one checked to make sure it wasn't about to request a block larger than 
MAX_MEMORY_BLOCK, which is extremely unlikely. To trigger a vulnerability in this 
program, attackers simply have to find a place where they can request more than 
MAX_MEMORY_BLOCK bytes. The request is silently truncated to a smaller size than 
expected, and the calling routine invariably copies more data into that block than was 
allocated, resulting in memory corruption. 
Allocator Scorecards and Error Domains 
When reviewing applications, you should identify allocation routines early during the 
audit and perform a cursory examination on them. At a minimum, you should address 
each potential danger area by scoring allocation routines based on the associated 
vulnerability issuescreating a sort of scorecard. You can use this scorecard as a 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
396 
shorthand method of dealing with allocators so that you don't need to create 
extensive audit log. However, you should still search for and note any unique 
situations that haven't been addressed in your scorecard, particularly when the 
allocation routine is complex. Take a look at what these allocator scorecards might 
look like in Table 7-6. 
Table 7-6. Allocator Scorecard 
Function prototype 
int my_malloc(unsigned long size) 
0 bytes legal 
Yes 
Rounds to 
16 bytes 
Additional 
operations 
None 
Maximum size 
100 000 bytes 
Exceptional 
circumstances 
When a request is made larger than 100 000 bytes, the 
function rounds off the size to 100 000. 
Notes 
The rounding is done after the maximum size check, so there is 
no integer wrap there. 
Errors 
None, only if malloc() fails. 
This scorecard summarizes all potential allocator problem areas. There's no column 
indicating whether values are signed or listing 16-bit issues because you can instantly 
deduce this information from looking at the function prototype. If the function has 
internal issues caused by the signed conditions of values, list them in the Notes row 
of the scorecard. For simple allocators, you might be able to summarize even further 
to error domains. An error domain is a set of values that, when supplied to the 
function, generate one of the exceptional conditions that could result in memory 
corruption. Table 7-7 provides an example of summarizing a single error domain for 
a function. 
Table 7-7. Error Domain 
Function prototype int my_malloc() 
Error domain 
0xFFFFFFF1 to 0xFFFFFFFF 
Implication 
Integer wrap; allocates a small chunk 
Each allocator might have a series of error domains, each with different implications. 
This shorthand summary is a useful tool for code auditing because you can refer to it 
and know right away that, if an allocator is called with one of the listed values, there's 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
397 
a vulnerability. You can go through each allocator quickly as it's called to see if this 
possibility exists. The advantage of this tool is that it's compact, but the downside is 
you lose some detail. For more complicated allocators you may need to refer to more 
detailed notes and function audit logs. 
Error domain tables can be used with any functions you audit, not just allocators; 
however, there are some disadvantages. Allocation functions tend to be small and 