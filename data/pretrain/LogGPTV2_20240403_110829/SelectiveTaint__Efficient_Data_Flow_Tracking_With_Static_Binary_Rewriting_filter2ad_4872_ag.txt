# Figure 7: The Performance Overhead of the Tested Benchmarks

## Table 4: Vulnerable Software and Their Associated Vulnerabilities

| Category | Program | Version | CVE ID | Vulnerability |
| --- | --- | --- | --- | --- |
| Sound Processing Utilities | SoX | 14.4.2 | CVE-2019-8356 | Buffer Overflow |
| Multiplayer Online Game Client | TinTin++ | 2.01.6 | CVE-2019-7629 | Buffer Overflow |
| Raw Image Decoder | dcraw | 9.28 | CVE-2018-19655 | Buffer Overflow |
| GIF Format Decoding Library | ngiflib | 0.4 | CVE-2018-11575 | Buffer Overflow |
| Programming Language Interpreter | Gravity | 0.3.5 | CVE-2017-1000437 | Buffer Overflow |
| Audio Normalization Software | MP3Gain | 1.5.2 | CVE-2017-14411 | Double Free, Integer Underflow |
| Assembler and Disassembler | NASM | 2.14.02 | CVE-2019-8343 | Integer Underflow |
| Exif Jpeg Header Manipulation Tool | Jhead | 3.00 | CVE-2018-6612 | Buffer Overflow |
| Web Server | Nginx | 1.4.0 | - | - |

## Taint Analysis Techniques
- **STATICTAINTALL**:
  - ✓ SoX
  - ✓ TinTin++
  - ✓ dcraw
  - ✓ ngiflib
  - ✓ Gravity
  - ✓ MP3Gain
  - ✓ NASM
  - ✓ Jhead
  - ✓ Nginx

- **SELECTIVETAINT**:
  - ✓ SoX
  - ✓ TinTin++
  - ✓ dcraw
  - ✓ ngiflib
  - ✓ Gravity
  - ✓ MP3Gain
  - ✓ NASM
  - ✓ Jhead
  - ✓ Nginx

## Dynamic Information for Selective Tainting
Each data object could hold dynamic information such as concrete values from runtime. This can further enhance SELECTIVETAINT by tailoring binary rewriting to specific concrete inputs. For example, recent taint improvement systems like Iodine [5] use a combination of static and dynamic approaches to elide unnecessary taint propagation logic.

## Context-Aware Instrumentation
Current binary instrumentation in SELECTIVETAINT is context-insensitive, meaning it does not consider the calling context of the binary function. However, there are cases where taint propagation may be necessary in some contexts but not others. For instance, a function called from the beginning of program execution to the first taint-introducing instruction might not need taint propagation. Future work will explore making the instrumentation context-aware or using multiple copies of the function (some with taint, some without) to improve this.

## Improving Static Binary Analysis
We have made several assumptions about the binary code to simplify our analysis, such as assuming the code is not obfuscated and ignoring dynamically generated code. Any improvements in static binary code analysis could benefit SELECTIVETAINT. In our implementation, we used Dyninst [7] and successfully rewrote all binaries in our evaluation without encountering corner cases. Future work may include implementing other binary rewriters such as MULTIVERSE [6] and DDISASM [13].

## Improving CFG Reconstruction for Precise Alias Analysis
As seen in the soundness analysis of SELECTIVETAINT (§4.3.2), improving the precision of alias analysis and CFG reconstruction can enhance the soundness of the system. For example, in the instruction `call eax`, where there could be aliasing between formal and actual parameters, a precise alias analysis would greatly affect the control flow targets and thus the CFG reconstruction. Although we use the approaches in §4.1 and §4.2 to improve precision, a more precise alias analysis would significantly benefit our analysis.

## Related Work
### Dynamic Data Flow Tracking (DDFT)
Over the past decades, many DDFT systems have been developed. DYTAN [11] was one of the first tools that allowed customized taint analysis and could track implicit information flows due to control dependencies. However, its performance overhead can be as high as 50x for dynamic taint analysis with both control- and data-flow-based propagation and 30x for data-flow-based propagation alone. Saxena et al. [32] proposed a static technique that recovers higher-level structures from x86 binaries and applies it to taint tracking. Unlike our approach, their stack analysis trades off accuracy for performance, ignoring global and heap memory while VSA tracks these. MINEMU [8] aims to design an efficient emulator using new memory layouts and SSE registers to improve taint analysis. Libdft [17], a highly-optimized DDFT framework, shows faster performance, imposing about 4x slowdown for gzip when compressing or decompressing files.

### Recent Efforts
Recent efforts [5, 15, 16, 24, 25] have further improved the performance overhead of DDFT. For instance, Jee et al. [16] propose Taint Flow Algebra (TFA) that separates program logic from data flow tracking, transforming the data flow tracking logic into an intermediate representation and then performing classic compiler optimizations. SHADOWREPLICA [15] runs DFT in parallel in a shadow thread for each application thread, using an offline application analysis phase to minimize the information needed to communicate between threads. TAINTPIPE [25] uses pipelined symbolic taint analysis that both parallelizes and pipelines taint analysis. STRAIGHTTAINT [24] logs control flow profiling and execution state when taint seeds are first introduced. Most recently, IODINE [5] uses an optimistic hybrid analysis that restricts predicated static analysis to elide a runtime monitor only when it is proven to be safe. Unlike our approach, Iodine is built atop LLVM IR, requiring the source code of the target application, whereas SELECTIVETAINT is a binary-only approach.

### Binary Rewriting
There is also a significant body of work on static binary rewriting. Recent efforts include UROBOROS [6], RAMBLR [36], and DDISASM [13]. UROBOROS is a tool that repeatedly disassembles the executable so that the generated code can be reassembled back into working binaries. RAMBLR further analyzes the assumptions of UROBOROS and finds multiple complex corner cases that must be considered in symbolization. RAMBLR applies advanced static analyses, such as VSA, and achieves great performance for a static rewriter. MULTIVERSE [6] is the first static binary rewriting tool that systematically rewrites x86 COTS binaries without heuristics. Probabilistic disassembly [23] uses probabilities to model the uncertainty caused by information loss during compilation and assembly. Features such as data flow and control flow are leveraged to compute a probability for each address in the code space. DDISASM [13] combines static analysis and heuristics in Datalog and shows that Datalog’s inference process suits disassembling. In our implementation, while we could have used the most recent work such as MULTIVERSE, we used Dyninst [7] due to its rich APIs.

### Alias Analysis on Binary
Prior efforts on binary alias analysis either introduce an IR and use Datalog to reason about points-to relations [9] or introduce sets for values held at each program point (e.g., abstract address sets [12], or symbolic value sets [1]). The alias relation of two variables is determined by whether the abstraction sets of these two variables intersect. Earlier efforts (e.g., [1, 12]) do not resolve indirect jumps in CFG and reconstruct more CFG edges, limiting the analysis precision. They also assume no system calls, which may introduce uninitialized value sets into the system. Debray et al. [12] use less general sets of values, which are residue-based (module k), whereas we use all possible values.

## Conclusion
We have presented an efficient static analysis-based data flow tracking framework, SELECTIVETAINT. Unlike previous taint analysis methods that use dynamic binary instrumentation, SELECTIVETAINT is built on static binary rewriting. The key insight is to use VSA to identify instructions that never involve taint analysis and then rewrite the rest to implement the taint analysis. We tested SELECTIVETAINT with 29 binary programs, including 16 Unix utilities, five network daemons, and eight vulnerable applications, and observed superior performance, which is 1.7x faster than the state-of-the-art dynamic taint analysis tools.

## Acknowledgments
We are grateful to our shepherd Vasileios P. Kemerlis and the anonymous reviewers, including those from the artifact evaluation committee, for their constructive feedback. We also thank Haohuang Wen for his assistance during the evaluation. This research was supported in part by DARPA award N6600120C4020, NSF awards 1750809 and 1834215, and ONR award N00014-17-1-2995.

## Availability
The source code of SELECTIVETAINT and the benchmark programs used during the evaluation are publicly available at https://github.com/OSUSecLab/SelectiveTaint.

## References
[1] W. Amme, P. Braun, E. Zehendner, and F. Thomasset. Data dependence analysis of assembly code. In Proceedings of the 1998 International Conference on Parallel Architectures and Compilation Techniques, PACT ’98, pages 340–347, Washington, DC, USA, 1998. IEEE Computer Society.
...
[41] D. Y. Zhu, J. Jung, D. Song, T. Kohno, and D. Wetherall. TaintEraser: Protecting sensitive data leaks using application-level taint tracking. ACM SIGOPS Operating Systems Review, 45(1):142–154, Feb. 2011.

---

This optimized version improves the clarity, coherence, and professionalism of the text. It organizes the information into clear sections, uses consistent formatting, and provides a more structured and readable presentation.