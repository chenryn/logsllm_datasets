      2006-03-01T12:00:00.183Z
      Iuyz3d3P0aTou39dzbqaEXAMPLE=
This example request is taken from Amazon S3's SOAP API documentation.
It deletes an S3 bucket named *quotes* . As you can see, API request
parameters are passed to the server as tags within the XML document.
此请求示例取自Amazon S3的SOAP
API文档。它删除名为quotes的S3存储桶。正如您所看到的，API请求参数以XML文档中的标签形式传递到服务器上。
The SOAP response looks like this:
SOAP响应如下：
        204
        No Content
This response indicates that the bucket is successfully deleted and no
longer found.
该响应表示该存储桶已成功删除且不再存在。
SOAP APIs have a service called *Web Services Description Language (*
*WSDL)* , used to describe the structure of the API and how to access
it. If you can find the WSDL of a SOAP API, you can use it to understand
the API before hacking it. You can often find WSDL files by adding
*.wsdl* or *?wsdl* to the end of an API endpoint or searching for URL
endpoints containing the term *wsdl* . In the WSDL, you will be able to
find a list of API endpoints you can test.
SOAP APIs有一个叫做Web Services Description Language
(WSDL)的服务，用于描述API的结构和如何访问它。如果你能找到一个SOAP
API的WSDL，你可以在入侵前使用它来了解API。你可以通过在API端点的末尾添加
.wsdl 或
?wsdl，或者搜索包含wsdl术语的URL端点来找到WSDL文件。在WSDL中，你将能够找到你可以测试的API端点列表。
### GraphQL APIs {#c24.xhtml#h2-501546c24-0003}
*GraphQL* is a newer API technology that allows developers to request
the precise resource fields they need, and to fetch multiple resources
with just a single API call. GraphQL is becoming increasingly common
because of these benefits.
GraphQL是一种较新的API技术，能够让开发人员请求所需精确资源字段，并通过单个API调用获取多个资源。由于这些优势，GraphQL正变得越来越普遍。
GraphQL APIs use a custom query language and a single endpoint for all
the API's functionality. These endpoints are commonly located at [
]{#c24.xhtml#Page_359 .pagebreak title="359"} /graphql, */gql* , or */g*
. GraphQL has two main kinds of operations: queries and mutations.
*Queries* fetch data, just like the GET requests in REST APIs.
*Mutations* create, update, and delete data, just like the POST, PUT,
and DELETE requests in REST APIs.
GraphQL
API使用自定义查询语言和单个端点来实现所有API的功能。这些端点通常位于/graphql、/gql或/g处。GraphQL有两种主要操作类型：查询和变更。查询获取数据，就像REST
API中的GET请求一样。变更创建、更新和删除数据，就像REST
API中的POST、PUT和DELETE请求一样。
As an example, take a look at the following API requests to Shopify's
GraphQL API. Shopify is an e-commerce platform that allows users to
interact with their online stores via a GraphQL API. To access Shopify's
GraphQL API, developers need to send POST requests to the endpoint
*https://SHOPNAME.myshopify.com/admin/api/API_VERSION/graphql.json* with
the GraphQL query in the POST request body. To retrieve information
about your shop, you can send this request:
例如，来看一下对Shopify的GraphQL
API发送的以下API请求。Shopify是一款电子商务平台，允许用户通过GraphQL
API与他们的在线商店进行交互。开发人员需要向终端https://SHOPNAME.myshopify.com/admin/api/API_VERSION/graphql.json发送POST请求，并在POST请求正文中包含GraphQL查询才能访问Shopify的GraphQL
API。要检索有关您的商店的信息，您可以发送此请求：
    query {
       shop {
         name
         primaryDomain {
           url
           host
         }
       }
     }
This GraphQL query indicates that we want to retrieve the name and
`      primaryDomain     ` of the shop, and that we need only the
`      primaryDomain     ` 's URL and host properties.
这个GraphQL查询表示我们想要检索店铺的名称和primaryDomain，并且我们仅需要primaryDomain的URL和host属性。
Shopify's server will return the requested information in JSON format:
Shopify的服务器将以JSON格式返回请求的信息：
    {
       "data": {
         "shop": {
           "name": "example",
           "primaryDomain": {
             "url": "https://example.myshopify.com",
             "host": "example.myshopify.com"
           }
         }
       }
    }
Notice that the response doesn't contain all the object's fields, but
instead the exact fields the user has requested. Depending on your
needs, you can request either more or fewer fields of the same data
object. Here is an example that requests fewer:
请注意，响应并不包含所有对象的字段，而是用户请求的确切字段。根据您的需要，您可以请求相同数据对象的更多或更少的字段。这是一个请求更少字段的示例：
    query {
       shop {
         name
       }
     }
[ ]{#c24.xhtml#Page_360 .pagebreak title="360"} You can also request the
precise subfields of a resource's properties and other nested
properties. For example, here, you request only the URL of the
`      primaryDomain     ` of a shop:
您还可以请求资源属性及其他嵌套属性的精确子域。例如，在此，您只请求店铺的primaryDomain的URL：
    query {
       shop {
         primaryDomain {
           url
         }
       }
     }
These queries are all used to retrieve data.
这些查询用于检索数据。
Mutations, used to edit data, can have arguments and return values.
Let's take a look at an example of a mutation taken from *graphql.org* .
This mutation creates a new customer record and takes three input
parameters: `      firstName     ` , `      lastName     ` , and
`      email     ` . It then returns the ID of the newly created
customer:
变异是用于编辑数据的，可以具有参数和返回值。让我们来看一下来自graphql.org的变异示例。这个变异创建一个新的客户记录，并接受三个输入参数：firstName、lastName和email。然后返回新创建的客户的ID。
    mutation {
      customerCreate(
        input: {
          firstName: "John",
          lastName: "Tate",
          email: "PI:EMAIL" })
         {
         customer {
           id
         }
       }
    }
GraphQL's unique syntax might make testing it hard at first, but once
you understand it, you can test these APIs the same way that you test
other types of APIs. To learn more about GraphQL's syntax, visit
[https://graphql.org/](https://graphql.org/){.LinkURL} .
\`GraphQL的独特语法可能一开始让测试变得困难，但一旦你理解了它，你可以像测试其他类型的API一样测试这些API。要了解有关GraphQL语法的更多信息，请访问https://graphql.org/。\`
GraphQL APIs also include a great reconnaissance tool for bug hunters: a
feature called *introspection* that allows API users to ask a GraphQL
system for information about itself. In other words, they're queries
that return information about how to use the API. For example,
`      __schema     ` is a special field that will return all the types
available in the API; the following query will return all the type names
in the system. You can use it to find data types you can query for:
GraphQL API还包括一个伟大的侦察工具，供漏洞猎人使用:
一种名为introspection的功能，允许API用户向GraphQL系统询问有关它自己的信息。换句话说，它们是返回有关如何使用API的信息的查询。例如，\_\_schema是一个特殊的字段，它将返回API中可用的所有类型;以下查询将返回系统中所有类型的名称。您可以使用它来查找可以查询的数据类型。
    {
      __schema {
        types {
          name
        }
      }
    }
[ ]{#c24.xhtml#Page_361 .pagebreak title="361"} You can also use the
`      __type     ` query to find the associated fields of a particular
type:
你也可以使用 \_\_type 查询来找到特定类型关联的字段：
    {
      __type(name: "customer") {
        name
        fields {
          name
        }
      }
    }
You will get the fields of a type returned like this. You can then use
this information to query the API:
您将会得到该类型的字段返回信息，然后可以使用此信息查询 API：
    {
      "data": {
        "__type": {
          "name": "customer",
          "fields": [
            {
              "name": "id",
            },
            {
              "name": "firstName",
            },
            {
              "name": "lastName",
            },
            {
              "name": "email",
            }
          ]
        }
      }
    }
Introspection makes recon a breeze for the API hacker. To prevent
malicious attackers from enumerating their APIs, many organizations
disable introspection in their GraphQL APIs.
introspection使得API黑客的侦查变得易如反掌。为了防止恶意攻击者枚举他们的API，许多组织在他们的GraphQL
API中禁用introspection。
### API-Centric Applications {#c24.xhtml#h2-501546c24-0004}
Increasingly, APIs aren't used as simply a mechanism to share data with
outside developers. You'll also encounter *API-centric applications* ,
or applications built using APIs. Instead of retrieving complete HTML
documents from the server, API-centric apps consist of a client-side
component that requests and renders data from the server by using API
calls.
越来越多的情况是，API不再仅仅被用作与外部开发者共享数据的机制。您也会遇到以API为中心的应用程序，或者使用API构建的应用程序。与从服务器检索完整HTML文档不同，以API为中心的应用程序包括一个客户端组件，通过使用API调用请求和呈现来自服务器的数据。
For example, when a user views Facebook posts, Facebook's mobile
application uses API calls to retrieve data about the posts from the
server instead of retrieving entire HTML documents containing embedded
data. The application then renders that data on the client side to form
web pages.
例如，当用户查看Facebook的帖子时，Facebook的移动应用程序使用API调用从服务器检索有关帖子的数据，而不是检索包含嵌入式数据的整个HTML文档。然后，应用程序在客户端端呈现该数据，以形成网页。
[ ]{#c24.xhtml#Page_362 .pagebreak title="362"} Many mobile applications
are built this way. When a company already has a web app, using an
API-centric approach to build mobile apps saves time. APIs allow
developers to separate the app's rendering and data-transporting tasks:
developers can use API calls to transport data and then build a separate
rendering mechanism for mobile, instead of reimplementing the same
functionalities.
许多移动应用程序都是这样构建的。当公司已经拥有一个Web应用程序时，采用API中心化方法来构建移动应用程序可以节省时间。API允许开发人员将应用程序的呈现和数据传输任务分离：开发人员可以使用API调用传输数据，然后为移动构建单独的呈现机制，而不是重新实现相同的功能。