文档的新鲜生存期说明了在文档不再新鲜，无法提供给某个特定的客户端之前能够停
192 留多久。新鲜生存期取决于服务器和客户端的限制。服务器上可能有一些与文档的出
版变化率有关的信息。那些非常稳定的已归档报告可能会在数年内保持新鲜。期刊可
能只在下一期的出版物出来之前的剩余时间内有效——下一周，或是明早6点。
客户端可能有些其他指标。如果稍微有些过期的内容速度更快的话，它们可能也愿
意接受，或者它们可能希望接收最新的内容。缓存是为用户服务的。必须要满足他
们的要求。
7.11.5 完整的服务器——新鲜度算法
例7-2给出了一个用于计算服务器新鲜度限制的Perl算法。它会返回文档仍由服务
器提供时所能到达的最大使用期。
例7-2 服务器新鲜度限制的计算
sub server_freshness_limit
{
local($heuristic,$server_freshness_limit,$time_since_last_modify);
$heuristic = 0;
if ($Max_Age_value_set)
{
$server_freshness_limit = $Max_Age_value;
}
elseif ($Expires_value_set)
{
$server_freshness_limit = $Expires_value - $Date_value;
}
elseif ($Last_Modified_value_set)
{
$time_since_last_modify = max(0, $Date_value -
$Last_Modified_value);
$server_freshness_limit = int($time_since_last_modify *
$lm_factor);
$heuristic = 1;
}
else
{
202 ｜ 第7章
$server_freshness_limit = $default_cache_min_lifetime;
$heuristic = 1;
}
if ($heuristic)
{
if ($server_freshness_limit > $default_cache_max_lifetime)
{ $server_freshness_limit = $default_cache_max_lifetime; }
if ($server_freshness_limit < $default_cache_min_lifetime)
{ $server_freshness_limit = $default_cache_min_lifetime; }
}
return($server_freshness_limit);
} 193
现在，我们来看看客户端怎样修正服务器为文档指定的使用期限制。例7-3显示了
一个Perl算法，此算法获取了服务器的新鲜度限制并根据客户端的限制对其进行修
改。它会返回一个最大使用期，这是在无需再次验证，仍由缓存提供文档的前提下，
文档的最大生存时间。
例7-3 客户端新鲜度限制的计算
sub client_modified_freshness_limit
{
$age_limit = server_freshness_limit( ); ## From Example 7-2
if ($Max_Stale_value_set)
{
if ($Max_Stale_value == $INT_MAX)
{ $age_limit = $INT_MAX; }
else
{ $age_limit = server_freshness_limit( ) + $Max_Stale_value; }
}
if ($Min_Fresh_value_set)
{
$age_limit = min($age_limit, server_freshness_limit( ) -
$Min_Fresh_value_set);
}
if ($Max_Age_value_set)
{
$age_limit = min($age_limit, $Max_Age_value);
}
}
整个进程中包含两个变量：文档的使用期及其新鲜度限制。如果使用期小于新鲜度
限制，就说明文档“足够新鲜”。例7-3中的算法只是考虑了服务器的新鲜度限制，
并根据附加的客户端限制对其进行了调整。希望通过本节的介绍能使在HTTP规范
中描述的比较微妙的过期算法更清晰一些。
缓 存 ｜ 203
7.12 缓存和广告
读到这里，你一定已经意识到缓存可以提高性能并减少流量。知道缓存可以帮助用
户，并为用户提供更好的使用体验，而且缓存也可以帮助网络运营商减少流量。
7.12.1 发布广告者的两难处境
你可能认为内容提供商会喜欢缓存。毕竟，如果到处都是缓存的话，内容提供商就
不需要购买大型的多处理器Web服务器来满足用户需求了——他们不需要付过高的
194 网络服务费，一遍一遍地向用户发送同样的数据。更好的一点是，缓存可以将那些
漂亮的文章和广告以更快，甚至更好看的方式显示在用户的显示器上，鼓励他们去
浏览更多的内容，看更多的广告。这就是内容提供商所希望的！吸引更多的眼球和
更多的广告！
但这就是困难所在。很多内容提供商的收益都是通过广告实现的——具体来说，每
向用户显示一次广告内容，内容提供商就会得到相应的收益。（可能还不到一两便
士，但如果一天显示数百万条广告的话，这些钱就会叠加起来！）这就是缓存的问
题——它们会向原始服务器隐藏实际的访问次数。如果缓存工作得很好，原始服务
器可能根本收不到任何HTTP访问，因为这些访问都被因特网缓存吸收了。但如果
你的收益是基于访问次数的话，你就高兴不起来了。
7.12.2 发布者的响应
现在，广告商会使用各种类型的“缓存清除”技术来确保缓存不会窃取他们的命中
流量。他们会在内容上加上no-cache首部。他们会通过CGI网关提供广告。还会
在每次访问时重写广告URL。
这些缓存清除技术并不仅用于代理缓存。实际上，现在主要将其用于每个Web浏览
器中都启用了的缓存。但是，如果某些内容提供商维护其命中率的行为太过火了，
就会降低缓存为其站点带来的积极作用。
理想情况下，内容提供商会让缓存吸收其流量，而缓存会告诉内容提供商它们拦截
了多少次命中。现在，缓存有好几种方式可以做到这一点。
一种解决方案就是配置缓存，每次访问时都与原始服务器进行再验证。这样，每次
访问时都会将命中推向原始服务器，但通常不会传送任何主体数据。当然，这样会
降低事务处理的速度。23
注23： 有些缓存支持这种再验证的变体形式，在这种方式中，它们可以在后台发起条件GET或HEAD请求。
用户不会感觉到时延，但这个请求会触发对原始服务器的离线访问。这是一种改进方式，但这种方
式加重了缓存的负荷，极大地增加了流经网络的流量。
204 ｜ 第7章
7.12.3 日志迁移
理想的解决方案是不需要将命中传递给服务器的。毕竟，缓存就可以记录下所有的
命中。缓存只要将命中日志发送给服务器就行了。实际上，为了保持内容提供商们
的满意度，有些大型缓存的提供商已经在对缓存日志进行人工处理，并将其传送给
受影响的内容提供商了。 195
但是，命中日志很大，很难移动。而缓存日志并没有被标准化或被组织成独立的日
志，以传送给单独的内容提供商。而且，这里面还存在着认证和隐私问题。
已经有一些高效（和不那么高效的）日志分发策略的建议了。但还没有哪个建议成
熟到足以为Web软件厂商采用。很多建议都非常复杂，需要联合商业伙伴才能实
现。24有几家联合厂商已经开始开发广告收入改造工程的支撑框架了。
7.12.4 命中计数和使用限制
RFC 2227，“HTTP的简单命中计数和使用限制”中定义了一种简单得多的方案。这
个协议向HTTP中添加了一个称为Meter的首部，这个首部会周期性地将对特定
URL的命中次数回送给服务器。通过这种方式，服务器可以从缓存周期性地获取对
已缓存文档命中次数的更新。
而且，服务器还能控制在缓存必须向服务器汇报之前，其中的文档还可以使用多少
次，或者为缓存文档设置一个时钟超时值。这种控制方式被称为使用限制；通过这
种方式，服务器可以对缓存向原始服务器汇报之前，已缓存资源的使用次数进行
控制。
我们将在第21章详细介绍RFC 2227。
7.13 更多信息
更多有关缓存的信息，请参见以下参考资源。
• http://www.w3.org/Protocols/rfc2616/rfc2616.txt
RFC 2616 ，由 R. Fielding、J. Gettys、J. Mogul、H. Frystyk、L. Mastinter、 P.
Leach和T. Berners-Lee编写的“Hypertext Transfer Protocol”。
• Web Caching（《Web缓存》）
Duane Wessels编写，O’Reilly & Associates公司出版。
注24： 已经启动了几个商业项目，在尝试开发综合了缓存和日志功能的全球性解决方案。
缓 存 ｜ 205
• http://www.ietf.org/rfc/rfc3040.txt
RFC 3040，“Internet Web Replication and Caching Taxonomy”（“因特网Web复
制与缓存分类法”）。
• Web Proxy Servers（《Web代理服务器》）
Ari Luotonen编写，Prentice Hall计算机图书。
• http://www.ietf.org/rfc/rfc3143.txt
RFC 3143，“Known HTTP Proxy/Caching Problems”（“已知的HTTP代理/缓存
问题”）。
• http://www.squid-cache.org
196 Squid Web代理缓存。
206 ｜ 第7章
第8章
集成点：网关、隧道及中继
207
事实证明，Web是一种强大的内容发布工具。随着时间的流逝，人们已经从只在网
上发送静态的在线文档，发展到共享更复杂的资源，比如数据库内容或动态生成的
HTML页面。Web浏览器这样的HTTP应用程序为用户提供了一种统一的方式来访
问因特网上的内容。
HTTP也已成为应用程序开发者的一种基本构造模块，开发者们可以在HTTP上捎
回其他的协议内容（比如，可以将其他协议的流量包裹在HTTP中，用HTTP通
过隧道或中继方式将这些流量传过公司的防火墙）。Web上所有的资源都可以使
用HTTP协议，而且其他应用程序和应用程序协议也可以利用HTTP来完成它们的
任务。
本章简要介绍了一些开发者用HTTP访问不同资源的方法，展示了开发者如何将
HTTP作为框架启动其他协议和应用程序通信。
本章会讨论：
• 在HTTP和其他协议及应用程序之间起到接口作用的网关；
• 允许不同类型的Web应用程序互相通信的应用程序接口；
• 允许用户在HTTP连接上发送非HTTP流量的隧道；
• 作为一种简化的HTTP代理，一次将数据转发一跳的中继。
8.1 网关
HTTP扩展和接口的发展是由用户需求驱动的。要在Web上发布更复杂资源的需求
197 出现时，人们很快就明确了一点：单个应用程序无法处理所有这些能想到的资源。
为了解决这个问题，开发者提出了网关（gateway）的概念，网关可以作为某种翻译
器使用，它抽象出了一种能够到达资源的方法。网关是资源和应用程序之间的粘合
剂。应用程序可以（通过HTTP或其他已定义的接口）请求网关来处理某条请求，
网关可以提供一条响应。网关可以向数据库发送查询语句，或者生成动态的内容，
就像一个门一样：进去一条请求，出来一个响应。
图8-1显示的是一种资源网关。在这里，Joe的五金商店服务器就是作为连接数据库
内容的网关使用的——注意，客户端只是在通过HTTP请求资源，而Joe的五金商
店的服务器在与网关进行交互以获取资源。
有些网关会自动将HTTP流量转换为其他协议，这样HTTP客户端无需了解其他协
议，就可以与其他应用程序进行交互了（参见图8-2）。
208 ｜ 第8章
客户端在请求http://www.joes-hardware.com/query-db.cgi?newproducts
请求报文
GET /query-db.cgi?newproducts HTTP/1.1
Host: www.joes-hardware.com
Accept: *
响应报文
客户端 HTTP/1.0 200 OK
New product list: www.joes-hardware.com 网关 数据库
...
图8-1 网关的魔力
（a）HTTP/FTP服务器端FTP网关
HTTP FTP
HTTP客户端 网关 FTP服务器
（b）HTTPS/HTTP客户端安全网关
SSL HTTP
HTTPS客户端 网关 Web服务器
（c）HTTP/CGI服务器端应用程序网关
CGI（或其他API）
HTTP
应用程序服务器 程序
HTTP客户端 应用程序服务器网关
图8-2 三个Web网关实例
图8-2显示了三个网关的示例。