### Suffix and Brotli Transform Dictionary Word

The suffix is defined as:
```c
suffix[(T)->prefix_suffix_map[prefixBROTLI_TRANSFORM_PREFIX_ID(T, I)]]
```

The function `BrotliTransformDictionaryWord` is defined as follows:
```c
int BrotliTransformDictionaryWord(const uint8_t *transforms, t* word, int len, int* dst, const int transform_idx) {
    t* prefix = BROTLI_TRANSFORM_PREFIX(transform_idx);
    // Function body
}
```

### Speculative BCB Gadget in Brotli

Listing 5: Speculative BCB gadget found in Brotli.

#### Performance Overhead after Patching

After applying a serialization tool to patch all reported gadget locations in six programs, we compared the performance of these programs before and after patching. Specifically, we used a modified version of Speculative Load Hardening (SLH) [18] shipped with SpecFuzz to patch the programs. We only patched the gadgets reported by SpecFuzz and SpecTaint, and compared the runtime performance with fully hardened programs (patching all conditional branches).

In this experiment, we used benchmarks shipped with the programs, if available, as well as test benchmarks provided by SpecFuzz. Figure 3 shows the comparison results. As we can see, patching the gadgets detected by SpecTaint introduces negligible overhead compared to patching gadgets detected by SpecFuzz and full hardening. On average, the performance overhead was reduced by 55% compared to SpecFuzz's patching and 73% compared to full hardening. As presented in Table III, SpecTaint produced fewer gadget candidates than SpecFuzz, thus reducing the runtime overhead introduced by patching those gadgets. We also found that in some cases, SLH patching introduces large runtime overhead. For instance, SpecFuzz found three more gadget candidates in HTTP, but the performance slowdown caused by these three candidates is almost 60%. This is because these three candidates are located on hot paths that are frequently exercised, demonstrating the importance of high precision in gadget detection.

### Efficiency Evaluation

In this experiment, we evaluated the runtime performance of SpecTaint on six real-world applications. Since the workflow of SpecTaint is fundamentally different from SpecFuzz, it is not easy to have an end-to-end runtime comparison. SpecFuzz extends the fuzzing technique, and its fuzzing procedure and gadget detector are closely coupled. In contrast, SpecTaint is a detection tool that can receive test cases from fuzzers. In this evaluation, we marked user inputs as taint sources and simulated speculative execution over tainted branches. Note that SpecTaint can simulate speculative execution on every conditional branch. The runtime of simulating speculative execution over tainted branches is reasonable to reflect efficiency because, as presented in Table III, around 80% of detected gadgets are enclosed by tainted branches (intra-process gadgets IV-B).

We collected several statistical results, including the total number of executed branches at the normal mode, the total number of tainted branches for speculative execution simulation, the total number of nested branches explored in speculative execution mode, and the number of speculative execution paths on average to be explored. We also collected the execution time for each simulated speculative execution path, which includes the taint analysis, path exploration time, and gadget detection time.

Since SpecTaint extends a whole-system emulation platform and performs dynamic taint analysis, it incurs more runtime overhead for speculative taint analysis. However, as presented in Table V, SpecTaint can analyze large programs within a reasonable amount of time. For example, for Brotli, SpecTaint finished 8,900 branches as switch points for speculative execution simulation within 40 minutes. This means that SpecTaint can finish the SE path exploration, including state management, taint analysis, and pattern checking for one switch point within 0.04 seconds. Additionally, SpecTaint has a reasonable analysis time, finishing the analysis within a few hours for most programs; only JSMN and SSL exceed 10 hours. SSL is substantially more complex than the other programs, and running it in the emulator is already very slow. On average, SpecTaint takes around 6.8 hours to analyze one program. Compared with SpecFuzz, which takes 10 hours to reproduce the results presented in Table III, the analysis time in Table V suggests that SpecTaint can achieve precise simulation of speculative execution and perform dynamic speculative taint analysis without introducing much overhead.

### Case Study

As presented in Table III, SpecTaint discovered 11 new Spectre gadgets that were not detected by SpecFuzz [39]. After manual inspection, we confirmed that ten of them are exploitable and one gadget is considered a false positive (not exploitable, see Section VII). In this section, we showcase one detected Spectre gadget from the Real-world V1 Dataset due to page limitations. To further demonstrate the capability of SpecTaint, we present one Spectre gadget detected by SpecTaint from a well-known machine learning framework, Caffe [1].

#### Speculative BCB in Brotli

Brotli is a general-purpose lossless compression program. SpecTaint found an exploitable Spectre gadget in the function `ProcessCommandsInternal` and `BrotliTransformDictionaryWord`. Listing 5 presents the relevant code snippets. Before calling the function `BrotliTransformDictionaryWord` at line 11, it first checks whether `transform_idx` is less than `num_transforms` to avoid potential overflow. In the function `BrotliTransformDictionaryWord`, it uses `transform_idx` as an index to perform two memory accesses using the macro `BROTLI_TRANSFORM_PREFIX` (load a value from an array using `transform_idx`, then use the loaded value as an index to read another array). If the branch at line 5 was mispredicted during speculative execution, `BROTLI_TRANSFORM_PREFIX` would perform out-of-bound memory access and leak the loaded value via converted cache side channels.

In this example, three properties make this Spectre gadget exploitable:
1. `transform_idx` is marked as tainted, which is propagated from user inputs. This means the attacker can control its value by manipulating the input.
2. Computing the branch outcome at line 5 may take hundreds of CPU cycles when `transforms->num_transforms` is not in cache and needs to be fetched from memory. Thus, it opens a large speculative execution window and allows the execution of the following gadget during speculative execution.
3. The macro `BROTLI_TRANSFORM_PREFIX` loads the out-of-bound value using `transform_idx` as an index, then uses the loaded value as an index to access another array. It first reads a potential secret via an out-of-bound memory access and leaks the secret by using the secret as an index to access another array. Thus, the attacker can retrieve the secret via the cache side channel.

This gadget is newly detected by SpecTaint. Although it is hard to find the reason why SpecFuzz missed this gadget, we speculate that SpecFuzz failed to detect it due to incomplete speculative execution simulation. As discussed earlier, SpecFuzz favors fuzzing throughput by adopting a lightweight speculative execution simulation strategy, which selectively overlooks some speculative paths.

### Solver UpdateSmoothedLoss Function

The `UpdateSmoothedLoss` function is defined as follows:
```c
template <typename Dtype>
void Solver::UpdateSmoothedLoss(Dtype loss, int iter, bool average_loss, int start_iter) {
    if (losses.size() > 0 && losses[iter - 1] != loss) {
        smoothed_loss = (average_loss ? (smoothed_loss + loss) / 2 : loss);
    }
}
```

This function updates the smoothed loss based on the current loss, iteration, and whether to average the loss.