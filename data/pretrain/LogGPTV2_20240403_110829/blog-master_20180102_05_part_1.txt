## PostgreSQL Oracle 兼容性之 - connect by 高级选项 CONNECT_BY_ISLEAF、SYS_CONNECT_BY_PATH、CONNECT_BY_ISCYCLE、LEVEL    
### 作者                            
digoal                            
### 日期                            
2018-01-02                           
### 标签                            
PostgreSQL , CTE , 递归查询 , cycle , depth , loop , deep , level , 层级 , array , row array      
----                            
## 背景     
Oracle connect by语法支持异构查询，其中包含了一些特殊的变量：CONNECT_BY_ROOT、CONNECT_BY_ISLEAF、SYS_CONNECT_BY_PATH、CONNECT_BY_ISCYCLE、LEVEL。  
https://docs.oracle.com/cd/B19306_01/server.102/b14200/queries003.htm#i2053935     
https://docs.oracle.com/cd/B19306_01/server.102/b14200/pseudocolumns001.htm     
PostgreSQL通过CTE语法同样可以实现异构查询，同样能支持：  
1、层级  
2、路径  
3、规避循环  
4、限制每个层级返回的条数  
## CTE 例子  
https://www.postgresql.org/docs/10/static/queries-with.html  
[《PostgreSQL 图式搜索(graph search)实践 - 百亿级图谱，毫秒响应》](../201801/20180102_04.md)    
1、层级，路径，规避循环的例子：  
背景，图式搜索是PostgreSQL在（包括流计算、全文检索、图式搜索、K-V存储、图像搜索、指纹搜索、空间数据、时序数据、推荐等）诸多特性中的一个。    
采用CTE语法，可以很方便的实现图式搜索（N度搜索、最短路径、点、边属性等）。    
其中图式搜索中的：层级深度，是否循环，路径，都是可表述的。    
![pic](20180102_04_pic_001.png)    
![pic](20180102_04_pic_002.jpg)    
表结构，  
```  
create table a(    
  c1 int,                -- 点1    
  c2 int,                -- 点2    
  prop jsonb,            -- 点1,2对应的边的属性，使用JSON存储    
  primary key (c1,c2)    -- 主键    
);    
```  
CTE SQL及解释如下：  
```  
WITH RECURSIVE search_graph(    
  c1,     -- 点1    
  c2,     -- 点2    
  prop,   -- 边的属性    
  depth,  -- 深度，从1开始    
  path,   -- 路径，数组存储    
  cycle   -- 是否循环    
) AS (    
        select c1,c2,prop,depth,path,cycle from (    
        SELECT      -- ROOT节点查询    
          g.c1,     -- 点1    
          g.c2,     -- 点2    
          g.prop,   -- 边的属性    
          1 depth,            -- 初始深度=1    
          ARRAY[g.c1] path,   -- 初始路径    
          false  as cycle     -- 是否循环(初始为否)    
        FROM a AS g     
        WHERE     
          c1 = ?                           -- ROOT节点=?    
          -- AND prop->>weight >= ?        -- 相关性权重    
          -- ORDER BY prop->>weight desc   -- 可以使用ORDER BY，例如返回权重排在前面的N条。    
          limit ?                          -- 每个层级限制多少条？    
        ) t    
      UNION ALL    
        select c1,c2,prop,depth,path,cycle from (    
        SELECT               -- 递归子句     
          g.c1,              -- 点1    
          g.c2,              -- 点2    
          g.prop,            -- 边的属性    
          sg.depth + 1 depth,    -- 深度+1    
          path || g.c1 path,     -- 路径中加入新的点    
          (g.c1 = ANY(path)) as cycle     -- 是否循环，判断新点是否已经在之前的路径中    
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN    
        WHERE     
          g.c1 = sg.c2         -- 递归JOIN条件    
          AND NOT cycle        -- 防止循环    
          AND sg.depth >weight >= ?        -- 相关性权重    
          -- ORDER BY prop->>weight desc   -- 可以使用ORDER BY，例如返回权重排在前面的N条。    
          limit ?                          -- 每个层级限制多少条？               
        ) t    
)    
SELECT * FROM search_graph;       -- 查询递归表，可以加LIMIT输出，也可以使用游标    
```  
查询举例：  
3级递归，每级限制输出100条，输出层级，路径等。  
```    
   c1    |    c2    | prop | depth |          path          | cycle     
---------+----------+------+-------+------------------------+-------    
   31208 |   300008 |      |     1 | {31208}                | f    
   31208 |   300040 |      |     1 | {31208}                | f    
   31208 |   300046 |      |     1 | {31208}                | f    
   31208 |   300050 |      |     1 | {31208}                | f    
   31208 |   300061 |      |     1 | {31208}                | f    
   31208 |   300082 |      |     1 | {31208}                | f    
   31208 |   300093 |      |     1 | {31208}                | f    
   31208 |   300116 |      |     1 | {31208}                | f    
   31208 |   300135 |      |     1 | {31208}                | f    
   31208 |   300201 |      |     1 | {31208}                | f    
   31208 |   300215 |      |     1 | {31208}                | f    
   31208 |   300218 |      |     1 | {31208}                | f    
   31208 |   300304 |      |     1 | {31208}                | f    
   31208 |   300333 |      |     1 | {31208}                | f    
   31208 |   300352 |      |     1 | {31208}                | f    
   31208 |   300375 |      |     1 | {31208}                | f    
   31208 |   300390 |      |     1 | {31208}                | f    
   31208 |   300423 |      |     1 | {31208}                | f    
   31208 |   300457 |      |     1 | {31208}                | f    
   31208 |   300531 |      |     1 | {31208}                | f    
   31208 |   300560 |      |     1 | {31208}                | f    
   31208 |   300565 |      |     1 | {31208}                | f    
   31208 |   300596 |      |     1 | {31208}                | f    
   31208 |   300691 |      |     1 | {31208}                | f    
   31208 |   300722 |      |     1 | {31208}                | f    
   31208 |   300739 |      |     1 | {31208}                | f    
   31208 |   300774 |      |     1 | {31208}                | f    
   31208 |   300798 |      |     1 | {31208}                | f    
   31208 |   300806 |      |     1 | {31208}                | f    
   31208 |   300814 |      |     1 | {31208}                | f    
   31208 |   300860 |      |     1 | {31208}                | f    
   31208 |   300880 |      |     1 | {31208}                | f    
   31208 |   300902 |      |     1 | {31208}                | f    
   31208 |   300958 |      |     1 | {31208}                | f    
   31208 |   301003 |      |     1 | {31208}                | f    
   31208 |   301020 |      |     1 | {31208}                | f    
   31208 |   301109 |      |     1 | {31208}                | f    
   31208 |   301151 |      |     1 | {31208}                | f    
   31208 |   301155 |      |     1 | {31208}                | f    
   31208 |   301194 |      |     1 | {31208}                | f    
   31208 |   301235 |      |     1 | {31208}                | f    
   31208 |   301255 |      |     1 | {31208}                | f    
   31208 |   301264 |      |     1 | {31208}                | f    
   31208 |   301270 |      |     1 | {31208}                | f    
   31208 |   301276 |      |     1 | {31208}                | f    
   31208 |   301283 |      |     1 | {31208}                | f    
   31208 |   301303 |      |     1 | {31208}                | f    
   31208 |   301306 |      |     1 | {31208}                | f    
   31208 |   301367 |      |     1 | {31208}                | f    
   31208 |   301405 |      |     1 | {31208}                | f    
   31208 |   301446 |      |     1 | {31208}                | f    
   31208 |   301474 |      |     1 | {31208}                | f    
   31208 |   301529 |      |     1 | {31208}                | f    
   31208 |   301534 |      |     1 | {31208}                | f    
   31208 |   301575 |      |     1 | {31208}                | f    
   31208 |   301592 |      |     1 | {31208}                | f    
   31208 |   301609 |      |     1 | {31208}                | f    
   31208 |   301640 |      |     1 | {31208}                | f    
   31208 |   301680 |      |     1 | {31208}                | f    
   31208 |   301685 |      |     1 | {31208}                | f    
   31208 |   301686 |      |     1 | {31208}                | f    
   31208 |   301713 |      |     1 | {31208}                | f    
   31208 |   301824 |      |     1 | {31208}                | f    
   31208 |   301832 |      |     1 | {31208}                | f    
   31208 |   301852 |      |     1 | {31208}                | f    