thattheaccessmethodcodeinPOSTGRESisbeingwritteninC.
Franz LISP, Opus 42 is also fairly compatible with CommonLISP [STEE84], anemerging standard
LISP dialect. Therefore, in the future, if translation from Franz to CommonLISP is necessary, this will
requireminimal effort.
In general, compiled LISP code executes less efficiently than compiled C code. Therefore, an
optimizer written in LISP will execute more slowly than anoptimizer written in C. This, however,is not
aproblem. Asdiscussedinsection3.1,POSTGREScompiles queryplansandcaches,forlateruse,plans
and tuples resulting from query preexecution. Because of these two features, a single query plan pro-
ducedby the optimizer may beusedseveraltimes. Asaresult,thecostofoptimizationisamortized over
several executions. This significantly reduces a query’s planning cost, yielding a figure that is minimal
relative to the overall cost of execution. Therefore, in terms of optimizer efficiency, the choice of
languageisnotamajorconcern.
34
4.2. Representing Query PlansinLISP
In general, the cost of query processing constitutes the most significant portion of a query’s execu-
tion cost. Therefore, the query processor must execute as cost efficiently as possible. To meet this goal,
every node in the plan tree is constructed using one-dimensional arrays. These are known as ‘‘vectors’’
in LISP. Each element within a vector correspondsto some propertyofanode. By indexing appropriate
vectorentries,allpropertiescanbeaccessedinconstanttime.
Among the properties within each plan node are the left and right subtrees of the node, target lists,
and qualifications. The left and right subtrees either point to another plan node or nothing (nil in LISP).
The target list and qualification entries respectively point to a list of individual target list elements and a
list of restriction clauses. Lists are used to represent these structures because both sets of items are vari-
able length, and random access to individual entries within these lists is not required. Each target list
item consists of two items, also grouped together in a list. The first item in the list is a ‘‘resdom’’ node.
It contains information about its corresponding target list entry — its type, destination, and if relevant,
sortorhashinformation. Eachresdomnodeisimplemented usingavector. Thesecondelement,anexpr,
is an arbitrary arithmetic expression consisting of variables, constants, parameters, functions, and opera-
tors. Each of these subcomponents is also a vector, and these vectors are linked together in a list if they
representthe arguments to aparticular operation orfunction.Arestriction clauseisabooleanexpr;there-
foretheprecedingdescriptionappliestoqualificationsaswell.
In addition, every plan node contains an empty slot that the query processor uses to store runtime-
specific queryinformation. Figure 4.1 showsthe internal representationofaqueryplanthat accessestwo
attributesandprocessesasinglejoinclauseusingnestediteration.
Constructs analogous to records in Pascal and ‘‘structs’’ in C are used to build the different vector
types associated with eachnodetype. Theseconstructs arecalled ‘‘defstructs’’inLISP. With defstructs,
LISP programmers can combine primitive data types to create structured items. These new data struc-
tures, in turn, canbecombined andnested to createevenmore complex structures. Afterdefining adefs-
35
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
pointertoruntimeinformation
usedbythequeryprocessor
NESTLOOPnode
state
targetlist
RESDOM VAR RESDOM VAR
lefttree
righttree
qual
SCANnode
SCANnode
OPER VAR VAR
Figure4.1
Internalrepresentationofanestediterationjoinnode
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
truct,LISPautomaticallyprovidesasetofroutinestodynamically createobjectsofthesestructuredtypes
and to access information within a structure. As a result, although a vector is the underlying data type
used to implement defstructs, users can access node properties by specifying field names, as opposed to
indexing vector entries. Figure 4.2 shows a Franz LISP defstruct definition and associated routines for a
nestloopnode.
36
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
; Planinformationcommontoallplannodes
(defstruct(plannode
(:conc-nameget_))
(statenil)
targetlist
(lefttreenil)
(righttreenil))
;initializelefttree,righttree,andstatetonil
; Nestloopnode
(defstruct(nestloop
(:includeplannode)
;nodecontainsdefstructdefinedabove
(:conc-nameget_)
(:constructormake_nestloop(targetlistquallefttreerighttree)))
(nodetype‘‘NESTLOOP’’)
qual)
;
; LISProutinesprovidedasaresultoftheabovedefinitions:
;
; Routinestoretrievepropertyfields:
(get_statenode)
(get_targetlistnode)
(get_lefttreenode)
(get_righttreenode)
(get_nodetypenode)
(get_qualnode)
; Routinetoconstructanestloopnode:
(make_nestlooptargetlist quallefttreerighttree)
Figure4.2
Sampledefstructdefinition
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
4.3. InternalDataStructures
In the process of creating possible query plans, the optimizer generates a great deal of information.
To keep track of all this information, a more flexible structure of LISP is used — property lists. Every
37
LISP object may have associated with it a list of characteristics, set by the user, called a property list. A
major advantage of property lists is that one does not have to preallocate space for property slots, as
required for defstructs. As a result, at anygiven time, everyobject may haveanarbitrary number ofpro-
pertiesassociatedwithit.
Property lists are implemented using linked lists. Thus, access to information within a property list
requires a linear search. The inefficiency of linear search is not a problem here because generally, the
optimizer does not storeanymore than fourorfive items within asingle propertylist, andasindicated in
section 4.1, efficiency is not a primary consideration in this part of the system. Therefore, because pro-
pertylistsaresimplertoworkwith,theyareusedextensivelywithintheoptimizer.
4.4. LISP-CInterface
The foreign function interface in LISP is fairly easy to work with, provided a set of stringent rules
arefollowed. Forexample, the standardwayto passstructured information (e.g. acharacterstring)from
a C function is to return a pointer to the object. From here, the user can manipulate information within
the object by referencingthepointer. This,however,will notworkwhenLISPcallsCbecauseLISPcan-
notmanipulateobjectsthatChasallocated. ItpresentsproblemsfortheLISPgarbagecollector.
To work around this, C can return structured information by loading the data into variables that
LISP has passed as parameters. Space forthese returnvariables must beallocated by LISP priorto the C
call. This is straightforward provided LISP knows the size of the returning object and can set aside a
sufficient amount of memory. However, this is not always the case because tuples returned by C access
methodroutinesarevariablelength.
Fortunately, the optimizer never requires the contents of an entire tuple; on all occasions, it only
needs a fixed set of attributes from within a single tuple. Therefore, rather than attempt to directly mani-
pulate arbitrary tuples returned by access method routines, a layer written in C was built between the
optimizer and the access method code. When the optimizer needs information from system catalogs, it
calls some routine within this layer, which then calls access method routines to retrieve tuples. Desired
38
information within these tuples are either returned explicitly as integers and floats, or they are passed
backwithinvariablesallocatedbyLISP.
As an example, the optimizer may call a C routine, within the layer, called ‘‘retrieve_index’’ to
retrieve information about a secondary index. In calling the routine, LISP passes a pointer to an integer
array ‘‘indexinfo.’’ ‘‘Retrieve_index’’ then calls the access method routine ‘‘getnext’’ until an appropri-
ate tuple fromthe index catalog hasbeenlocated. The index identifier, the number ofpagesin the index,
and any other relevant information are extracted from the tuple and passed back to the optimizer in the
array ‘‘indexinfo.’’ Consequently, variable length tuples are handled solely by C, resulting in a cleaner
andsimplerLISP-Cinterface.
4.5. AnEvaluationofUsingLISP
Overall, writing the POSTGRES optimizer requiredabout 6500 lines ofLISP codeandanother 700
lines of C code. Having written the optimizer, using LISP was an excellent choice. There was a close
matchbetweenourprocessingneedsandtheconstructsandfunctionsLISPprovides. Asaresult,thepro-
gramming effort was simplified. Had we used a language like C, we would have hadto explicitly imple-
mentstructuresandroutinesequivalenttothoseLISPprovides.
While writing the optimizer, it was also evident that other features of LISP were instrumental in
simplifying code development. For instance, LISP allows you to either interpret or compile code written
in the language. Naturally, compiled code is used in POSTGRES, but in developing the optimizer, the
interpretive option was used. This significantly reduced development time because debugging was
simplerandcompilation timewaseliminated.
LISP also supports dynamic allocation and implicit recollection of free space. The latter is imple-
mented using garbage collection. As a result of these two properties, the optimizer can easily create
objectsofanytypewhenneeded,andLISPautomaticallyhandlesmemorymanagementissues.
Last ofall, LISP is aweaklytyped language andbecauseno single type is associated with variables
in weakly typed languages, union types were implicit and variable declarations were unnecessary. This
39
further resulted in simpler data structure definitions because declaration of field types was also unneces-
sary, as shown in figure 4.2. Another advantage of weakly typed languages is the absence of strict type
checking. As a result, there is acertain degreeofindependence betweenthe parametersaroutine accepts
and those that are actually passed. For example, if a routine accepts an identifier as a parameter but does
not manipulate its actual value, then whetherthe identifier is aninteger orstring is not significant; choos-
ingoneortheotherwill notaffectcodewithin theroutine. Inmanysituations, thischaracteristicallowed
ustomakechangeswithout modifying otherrelevantpiecesofcode. Changescouldbemademuchmore
quickly as a result. So to briefly summarize, LISP was a simpler and much more flexible language to
workwith.
5. PERFORMANCEOF THE POSTGRESOPTIMIZER
This section describes how we went about validating the POSTGRES optimizer. It also presents
anddiscussesourresults.
5.1. TestingTheOptimizer
ToevaluatethePOSTGRESoptimizer’s performanceaswellasassessthecredibility ofitscostfor-
mulas, we could do the following. We could measure the amount of time required to execute various
query plans, and then we could compare these measurements with the optimizer’s predicted costs.
Ideally, the predicted cost will be identical to the actual measured cost. However, this is an unrealistic
expectation since optimizer cost formulas are merely estimates. A more attainable goal is for the optim-
izer to select the true optimal plan in a large majority of cases. This will at least show that in almost all
circumstances,aselectedplanisthebestplannotonlyaccordingtotheoptimizerbutalsoinreality.
Thetestsdescribedaboveillustrate howwewouldhavewantedtovalidatetheoptimizer. However,
at the time when we wanted to run these performance tests, measuring the amount of time required to
execute a query plan was impossible becauseother partsofPOSTGREShadnot beenfully implemented.
Asanalternative, wecomparedPOSTGRESplanswithqueryplansselectedbytheoptimizerofcommer-
40
cial INGRES [KOOI82],which also happens to use an enumerative planning algorithm. The assumption
behind this is that the INGRES optimizer selects ‘‘correct’’ plans. Therefore, if a plan selected by
POSTGRES is equivalent to a plan selected by INGRES, (for the same query under similar conditions),
then the POSTGRES optimizer has also generated a ‘‘correct’’ plan. Although this may not always be a
valid assumption, it is probably a very good one since the INGRES optimizer has beentested, tuned, and
used widely; and tests have shown that it is ‘‘extremely good’’ [ROWE86]. Furthermore, comparing
POSTGRES and INGRES query plans at least allowed us to validate our optimizer against something
otherthanourintuition astowhichplansshouldbeselected.
Commercial INGRES was chosen as a basis for our comparisons because it is ideal in several
respects. First of all, it has a feature that allows users to examine plans selected by the optimizer. By
issuing the command ‘‘setqep,’’plan treesforall subsequentjoin querieswill beprinted on theterminal
monitor, easily allowing us to make comparisons between INGRES and POSTGRES plans. In addition,
both POSTGRES and INGRES store within database catalogs statistical information that can be used to
compute more realistic operatorselectivities. InINGRES,these statistics aregeneratedandsubsequently
updated using the ‘‘optimizedb’’ command, while POSTGRES maintains them using system demons.
Anexampleofhowthisextrainformation wouldbeputtouseisthefollowing. Supposearelation,r,has
100 tuples but only 10 distinct values in attribute, r.f. Because the number of distinct values is a better
1
indicator of the distribution of data within r.f, a clause like r.f = 1 would have a selectivity of hhh rather
10
1
than hhhh, asaresult ofusing this extra information. Inboth systems, wemade useofthis andother sta-
100
tistical information to generate more accurate cost estimations. As a result, fair comparisons could be
madebetweenthetwooptimizers.
However,thePOSTGRESoptimizer isnotidentical totheINGRESoptimizer, andconsequently,in
certain situations, INGRES selected a plan that POSTGRES did not even consider. In these cases,it was
impossible to determine whether POSTGRES had selected the optimal path from among those plans it
had considered; but as will become evident in the next subsection, we were still able to draw some
41
interesting conclusions. Onesituation wherethisoccursrelatestothemannerinwhichbothsystemstreat
secondaryindices. Figure5.1illustrateshowasecondaryindexisgenerallyused. Giventhekey(s)ofthe
index, the system locates within the secondary index relation a unique tuple identifier (tid). It then uses
thetid todirectly retrieveanappropriatetuple fromthecorrespondingindexedrelation. ThePOSTGRES
query plan tree corresponding to such a secondary index scan is shown in figure 5.2a, while the INGRES
tree is shown in figure 5.2b. A join between the tidp field in EMPINDEX and tid in EMP is required
becauseINGRESliterally treats secondaryindices asrelations,giventhat relationsareusedtoimplement
them. In this particular case, although the two trees are different in appearance, they are both processed
in the manner shown in figure 5.1. The only difference is that joining of tids is implicit in the
POSTGRESindexscannode.
It will not always be the case that there will be a POSTGRES tree equivalent to an INGRES tree
because by treating secondary indices as relations, further strategies are available to the INGRES optim-
izer. Infigure5.2, the index relation, EMPINDEX,isjoined directly withitscorrespondingindexedrela-
tion, EMP. POSTGRESwill only useasecondaryindexinthismanner. INGRES,however,maychoose
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
key tidp
secondary
index
relation
indexed
relation
Figure5.1
Usingsecondaryindices
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
42
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
Join-tid
indexscan
EMP
usingEMPINDEX
(dept) indexscan scan
EMPINDEX EMP
(dept)
(a) (b)