SeNetworkLogonRight 
Allows a user to connect to the computer from 
the network. 
SeRemoteInteractiveLogonRight 
Allows a user to log on to the computer via a 
Remote Desktop connection. 
SeBatchLogonRight 
Allows a user to log on using a batch-queue 
facility, such as the Task Scheduler service. 
SeInteractiveLogonRight 
Allows a user to log on locally and start an 
interactive session on the computer. 
Note: Users who don't have this right can start a 
remote interactive session on the computer if 
they have the SeRemoteInteractive right. 
SeServiceLogonRight 
Allows a security principal to log on as a service. 
Services can be configured to run under the 
Local System, Local Service, or Network Service 
accounts, which have a built-in right to log on as 
a service. Any service that runs under a 
separate user account must be assigned this 
right. 
SeDenyNetworkLogonRight 
Prohibits a user from connecting to the 
computer from the network. 
SeDenyInteractiveLogonRight 
Prohibits a user from logging on directly at the 
keyboard. 
SeDenyBatchLogonRight 
Prohibits a user from logging on using a 
batch-queue facility. 
SeDenyServiceLogonRight 
Prohibits a user from logging on as a service. 
SeDenyRemoteInteractiveLogonRight Prohibits a user from logging on to the 
computer via a Remote Desktop connection. 
Access Tokens 
Access tokens are system objects that describe the security context for a process or 
thread. They are used to determine whether a process can or can't access a securable 
object or perform a system task that requires special privilege. Access tokens can be 
derived from a number of sources, but they are initially created when a user starts a 
new session. This initial token is referred to as a primary access token; it's assigned 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
654 
to all new processes started in the current logon session. The MSDN description for 
access tokens contains a list of components that make up the access token; the 
following list shows the main fields of interest: 
Security Identifier (SID) This SID identifies the user associated with this 
access token. 
Group List This series of SIDs identifies all the groups the user belongs to at 
the time of logon. 
Session Security Identifier This field is the logon session identifier 
associated with this token. Many tokens are associated with a single session. 
Privilege List This field is a list of special privileges, or rights, required to 
perform system-related tasks. 
Default DACL Every securable object creation routine takes a security 
descriptor parameter. The default DACL is applied when a NULL DACL is 
supplied and inheritance rules require a DACL. 
Restricting SID List This field is a list of restricted SIDs for the token. 
Restricted tokens are discussed in more detail in "Restricted Tokens" later in 
this chapter. 
A token containing all this information is created at every user logon and is later 
copied for each process and thread spawned in the session. Note that the token is 
copied, as opposed to a reference being passed, because each process or thread can 
optionally modify certain attributes of its access token. By using a copy for each 
process and thread, modifications don't affect other processes in the same session. 
Only certain parts of the access token can be modified by a process and a thread. 
Obviously, the unrestricted capability to change certain components of the token 
(such as the user and group SIDs or the privileges list) would completely undermine 
the security model. However, several other fields (such as the default DACL) can be 
modified safely to address access control concerns in a session. 
Privileges 
As noted earlier, privileges are special permissions that allow a principal to perform 
system-related tasks. Table 11-2 lists privileges that can be granted to a principal. 
Table 11-2. Windows Privileges 
Privilege Name 
Description 
SeAssignPrimaryTokenPrivilege 
Allows a user to assign the primary access token 
for a process or thread. 
SeAuditPrivilege 
Allows a user to generate security logs. 
SeBackupPrivilege 
Allows a user to create backups of system files 
and directories. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
655 
Table 11-2. Windows Privileges 
Privilege Name 
Description 
SeChangeNotifyPrivilege 
Allows a user to be notified when certain files or 
folders are changed. 
SeCreateGlobalPrivilege 
Allows a user to create global objects (available 
only in Windows Server 2003, Windows XP SP2, 
Windows 2000 SP4, and later). 
SeCreatePagefilePrivilege 
Allows a user to create a page file. 
SeCreatePermanentPrivilege 
Allows a user to create a permanent system 
object. 
SeCreateTokenPrivilege 
Allows a user to create new token objects. 
SeDebugPrivilege 
Allows a user to attach to and debug processes. 
SeEnableDelegationPrivilege 
Enables computer and user accounts to be trusted 
for delegation. 
SeImpersonateName 
Allows a user to impersonate a client (available 
only in Windows Server 2003, Windows XP SP2, 
Windows 2000 SP4, and later). 
SeIncreaseBasePriorityPrivilege Allows a user to increase the scheduling priority of 
a process. 
SeIncreaseQuotaPrivilege 
Allows a user to increase his or her quota. 
SeLoadDriverPrivilege 
Allows a user to load kernel drivers. 
SeLockMemoryPrivilege 
Allows a user to lock pages in memory. 
SeMachineAccountPrivilege 
Allows a user to add a workstation to the domain. 
SeManageVolumePrivilege 
Allows a user to manage files on a volume. 
SeProfileSingleProcessPrivilege Allows a user to profile a single process. 
SeRemoteShutdownPrivilege 
Allows a user to shut down the machine remotely. 
SeRestorePrivilege 
Allows a user to restore system files and 
directories. 
SeSecurityPrivilege 
Allows a user to manage audit logs. 
SeShutdownPrivilege 
Allows a user to shut down the machine. 
SeSyncAgentPrivilege 
Allows the use of synchronization services. 
SeSystemEnvironmentPrivilege 
Allows modification of firmware environment 
variables. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
656 
Table 11-2. Windows Privileges 
Privilege Name 
Description 
SeSystemProfilePrivilege 
Allows a user to profile system performance. 
SeSystemtimePrivilege 
Allows a user to change the system time. 
SeTakeOwnershipPrivilege 
Allows a user to take ownership of objects and 
files owned by other users. 
SeTcbPrivilege 
Identifies a user as part of the trusted computing 
base. 
SeUnlockPrivilege 
Allows a user to unlock a laptop. 
SeUnsolicitedInputPrivilege 
Allows a user to read input from a terminal device. 
Privileges play a vital role in system integrity; obviously, the haphazard assignment 
of privileges could result in a compromise of the system. For example, a user with 
SeDebugPrivilege can take over processes owned by other users; this privilege would 
allow attackers to run arbitrary code in the context of another account. Similarly, a 
user with SeLoadDriverPrivilege might load a malicious driver into kernel mode, thus 
taking complete control of the system. 
The default allocation of privileges is generally safe. However, services and similar 
applications might require additional access. If this access isn't carefully considered, 
it could create operational vulnerabilities that allow privilege escalation. Some 
applications must also downgrade permissions dynamically, and failing to do so might 
result in similar implementation vulnerabilities. This concern is addressed more later 
in the "Restricted Tokens" section. 
Group List 
An access token contains a list of SIDs for all the associated user's group 
memberships. When attempting to access an object, the object DACL is checked 
against entries in the group list. Access is refused if no matching entries exist or if an 
entry explicitly denies access. Otherwise, access is granted if a matching SID entry 
provides the requested level of access or higher. 
The SID list is generated at logon and can't be updated during a session. This 
approach allows performing access checks quickly and efficiently, even in a 
distributed environment. To see how this works, you can easily alter your account 
membership with the Microsoft Management Console. Any changes you make affect 
the account, but the current session is untouched. You have to log back on under a 
new session for changes in group membership to take effect. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
657 
There's an exception to the requirement that group membership can't be altered for 
an active session. Group memberships can be somewhat altered through the use of 
SID attributes, which are parameters associated with each SID entry in the group list. 
They define how the SID entry applies and how it can be altered. So although new 
groups can't be added, existing groups can be altered by manipulating their attributes, 
and although groups can't be removed, any SID entry that isn't mandatory can be 
disabled. Table 11-3 describes attributes that can be associated with SIDs in a group 
list. 
Table 11-3. SID Attributes 
SID Attribute 
Meaning 
SE_GROUP_ENABLED 
This SID is enabled for access checks. 
SE_GROUP_ENABLED_BY_DEFAULT By default, this SID is enabled. This information is 
used when a token is being reverted to its default 
state. 
SE_GROUP_LOGON_ID 
This SID is a logon session SID. 
SE_GROUP_MANDATORY 
This group SID is enabled and can't be disabled. 
SID_GROUP_OWNER 
The SID describes the owner of a group or object. 
SE_GROUP_RESOURCE 
This group SID identifies a domain local group. 
SE_GROUP_USE_FOR_DENY_ONLY 
This SID can be used for deny access control entries 
(ACEs) only; it's ignored when examining allow ACEs 
for an object. 
Restricted TokensF 
Some entries in a group list can be disabled, but even more extreme measures can be 
taken to reduce the permissions granted to a token. To do this, you create a 
restricted token, which is a token that has a nonempty restricted SID list. An access 
check for a restricted token differs from a normal token. An access check succeeds 
only if the DACL SID entry is present in both the normal group list and the restricted 
group list. Further, restricted tokens can set the SE_GROUP_USE_FOR_DENY_ONLY flag on 
mandatory SID entries. This approach can even be used to prevent the account from 
using its own SID for granting access to a resource. 
A restricted token can also revoke any privileges currently assigned to the token. By 
combining group and privilege restrictions, drastically limiting the access granted to a 
token object is possible. A restricted token is created by using the 
CreateRestrictedToken() function; its prototype is shown as follows: 
BOOL CreateRestrictedToken(HANDLE ExistingTokenHandle, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
658 
        DWORD Flags, 
        DWORD DisableSidCount, 
        PSID_AND_ATTRIBUTES SidsToDisable, 
        DWORD DeletePrivilegeCount, 
        PLUID_AND_ATTRIBUTES PrivilegesToDelete, 
        DWORD RestrictedSidCount, 
        PSID_AND_ATTRIBUTES SidsToRestrict, 
        HANDLE NewTokenHandle) 
This function is used to supply a list of SIDs that can be disabled, to delete privileges 
from a token, and to add restricted SIDs to an access token. This effectively means 
that any process can create an access token containing a subset of the privileges and 
resource access rights the original token had. 
Of course, creating a new token might not be appropriate in many circumstances. 
Instead, you can modify attributes of the existing token with these functions: 
AdjustTokenGroups() and AdjustTokenPrivileges(). These functions can be used to 
alter an existing token by modifying group membership, as described in the section 
on group lists, or by altering token privileges. Here's the prototype of 
AdjustTokenGroups(): 
BOOL AdjustTokenGroups(HANDLE TokenHandle, 
        BOOL ResetToDefault, 
        PTOKEN_GROUPS NewState, 
        DWORD BufferLength, 
        PTOKEN_GROUPS PreviousState, 
        PDWORD ReturnLength) 
This function can enable and disable groups in an access token, but the specified 
groups must already exist in the token's list of group SIDs. This function simply sets 
or clears the attributes discussed in the previous section. Primarily, it's used to set or 
clear the SE_GROUP_ENABLED attribute, which determines how the group affects an 
access check. A value of TRUE for the ResetToDefault parameter causes the NewState 
value to be ignored and the default state of the access token restored. 
Similarly, a process can enable or disable the privileges in an access token by using 
the AdjustTokenPrivileges() function. Here's the function prototype: 
BOOL AdjustTokenPrivileges(HANDLE TokenHandle, 
        BOOL DisableAllPrivileges, 
        PTOKEN_PRIVILEGES NewState, 
        DWORD BufferLength, 
        PTOKEN_PRIVILEGES PreviousState, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
659 
        PDWORD ReturnLength) 
Modifications made with AdjustTokenGroups() aren't irrevocable. Further, 
modifications made by using AdjustTokenPrivileges() are permanent only in 
Windows XP SP2 and Server 2003 or later and only if the SE_PRIVILEGE_REMOVED flag is 
set in the NewState parameter. This creates situations in which attackers can reset the 
token to its default state should they gain control of the process through a 
vulnerability. A restricted token, however, prevents the token from being reset to its 
original group list and privilege state. 
Software Restriction Policies (SAFER) API 
Windows XP and Server 2003 added the Software Restriction Policies (SAFER) API to 
provide a simpler method of running processes under additional restrictions. The 
SaferCreateLevel() function provides machine and user scope restrictions and 
accepts five levels of security, ranging from disallowed to fully trusted. It can be used 
with SaferCreateTokenFromLevel() to create restricted tokens more easily. The SAFER 
levels from the MSDN are listed in Table 11-4. 
Table 11-4. SAFER Levels 
Value 
Meaning 
SAFER_LEVELID_DISALLOWED 
Software doesn't run, regardless of the user's access 
rights. 
SAFER_LEVELID_UNTRUSTED 
Allows programs to run with access only to resources 
granted to well-known groups, blocking access to 
Administrator and Power User privileges and personally 
granted rights. 
SAFER_LEVELID_CONSTRAINED 
Software can't access certain resources, such as 
cryptographic keys and credentials, regardless of the 
user's access rights. 
SAFER_LEVELID_NORMALUSER 
Allows programs to run as a user who doesn't have 
Administrator or Power User access rights. Software 
can access resources accessible by normal users. 
SAFER_LEVELID_FULLYTRUSTED Software access rights are determined by the user's 
access rights. 
Running Under Different Contexts 
Windows provides the capability to change the current thread's token or create a new 
process under a different token. Functionally, this capability is similar to the su 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
660 
command in UNIX. However, the implementation and use of the Windows 
functionality is very different. The first major difference is that Windows requires the 
user's password credentials to create a token for another user context. 
Note 
At first, requiring the user's password credentials to create a token for another user 
context might seem a bit odd. The local system account has unrestricted access to the 
account database and at some level eventually creates the logon session and token. 
Of course, this is true for a stand-alone system, and undocumented API calls could be 
used to manually generate a logon session and token for any user. However, Windows 
stand-alone authentication is more of a subset of Windows domain authentication. In 
a domain environment, only a domain controller has the context necessary to issue 
credentials for domain-level users. So a local system could use the native API calls to 