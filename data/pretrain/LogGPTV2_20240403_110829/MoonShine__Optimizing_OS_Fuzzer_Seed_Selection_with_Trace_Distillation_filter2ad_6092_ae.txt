like databases or Web servers may have such dependen-
cies as their processes/threads often share sockets and
memory regions. Developing a tracking mechanism for
such inter-thread/inter-process dependencies will be an
interesting future work.
False Positives from Static Analysis. MoonShine’s
static implicit dependency analysis may result in false
positives, i.e., it may detect two system calls to have im-
plicit dependencies where there are none. Note that these
false positives do not affect the coverage achieved by the
distilled corpus but might make the traces slightly larger
than they need to be.
In our experiments, we observed that
imprecise
pointer analysis is a major source of false positives. If
two system calls read and write from the same struct
ﬁeld, MoonShine cannot determine if the corresponding
pointers refer to the same struct instance. For example,
MoonShine identiﬁes mlock as an implicit dependency
of munmap because struct vma is a write dependency of
mlock and a read dependency of munmap. However, the
instances of struct vma are completely determined by
the pointers passed in as the ﬁrst argument to each call.
If the ﬁrst arguments to these calls are different, then the
instances of the struct will also differ and the two calls
will not be dependencies. However, due to the impre-
cision of static analysis, MoonShine always treats these
calls as dependencies irrespective of their arguments.
7.2 Future Work
Supporting other Kernel Fuzzers. Most fuzzers, irre-
spective of their design, beneﬁt signiﬁcantly from using
a diverse and compact set of seeds [31]. MoonShine’s
trace distillation mechanism is designed to increase the
diversity and minimize the size of seed traces (while
maintaining the dependencies) used for kernel fuzzing.
Although our current prototype implementation is based
on Linux and Syzkaller, there are a several ways we can
extend MoonShine to beneﬁt other kernel fuzzers. In par-
ticular, for other Linux kernel fuzzers, it should be rela-
tively straightforward to adapt MoonShine’s trace gener-
ation and seed selection components. MoonShine’s static
implicit dependency analysis can also be easily extended
to other open source OS kernels such as FreeBSD.
For closed-source operating systems like Microsoft
Windows, MoonShine can potentially support trace dis-
tillation of by leveraging recent works [29, 33] using
virtualization-based approaches to capturing system call
traces and kernel code coverage albeit with higher per-
formance overhead. MoonShine can be extended to
dynamically identify implicit dependencies by tracking
the load and store instructions executed during a sys-
tem call execution and identifying the calls that read-
/write to the same addresses. Such a virtualization-
based dynamic approach to tracking implicit dependen-
cies will be more precise (i.e., fewer false positives) than
MoonShine’s static-analysis-based approach, but will in-
cur signiﬁcantly higher performance overhead. Explor-
ing this tradeoff is an interesting area for future research.
Fuzzing Device Drivers. The system calls in our
traces targeted core subsystems of the Linux kernel such
as ﬁle system, memory management, and networking.
However, device drivers make up over 40% of the Linux
source code [15] and are the most common source of vul-
nerabilities [34]. Recent work [20, 28] has shown that
targeted fuzzing of device drivers is effective at discover-
ing critical security vulnerabilities. We believe that these
approaches can also beneﬁt from MoonShine’s trace dis-
tillation. For example, seeds distilled from traces of An-
droid applications/services that communicate with differ-
ent device drivers can be used for efﬁcient fuzzing of An-
droid device drivers.
8 Related Work
Seeding and Distillation. Seed selection was ﬁrst ex-
plored in the context of ﬁle-format fuzzing, i.e., fuzzers
for application code that parse well-structured input
(pdfs, jpeg, png, etc.). In 2008, Ormandy et al. seeded
a fuzzer for the Microsoft internet explorer browser with
contents gathered by crawling different URLs and un-
covered two serious security vulnerabilities [27].
In
2011, Evans et al. also seeded a fuzzer for Adobe Flash
Player with 20,000 distilled SWF ﬁles and discovered
400 unique crashes [19].
Recently, Beret et al. evaluated four distillation strate-
gies on the CERT Basic Fuzzing Framework (BFF) [2]
across 5 ﬁle formats and found maximizing code cov-
erage to be the optimal distillation strategy [31]. While
MoonShine is also a seed distillation framework, distil-
lation for OS fuzzers is fundamentally a different and ar-
guably more difﬁcult problem than distilling ﬁle formats.
File-format distillation works at the level of entire ﬁles
and simply selects a small set of seed ﬁles out of a given
set of ﬁles without worrying about pruning each individ-
ual ﬁle’s contents. By contrast, OS fuzzer distillation
must work at the ﬁner granularity of individual system
calls within program traces and maintain the implicit/-
explicit dependencies of the system calls while minimiz-
ing the number of calls as the program traces tend to be,
on average, multiple orders of magnitude larger than the
USENIX Association
27th USENIX Security Symposium    741
seed ﬁles used for fuzzing.
Seed Generation and Generational Fuzzers. Gener-
ational fuzzers craft test inputs according to some form
of speciﬁcation and are often used to fuzz programs
which take highly-structured input, e.g., compilers. For
instance, jsfunfuzz [32], and Csmith [40] are equipped
with JavaScript and C grammars, respectively, which
they use to craft syntactically valid programs. Other
fuzzers use dynamically learned grammars to help craft
input. For example, Godefroid et al. [21] present a white-
box fuzzer which generates grammatical constraints dur-
ing symbolic execution.
Another related line of work has investigated the pos-
sibility of synthetically crafting new seeds from exist-
ing ones. LangFuzz [24] and IFuzzer [36] are both
JavaScript fuzzers that parse code fragments from an in-
put test suite and recombine these fragments to craft in-
teresting new inputs. Skyﬁre [39] uses a PCSG (proba-
bilitistic context-sensitive grammar) learned from input
programs to generate diverse and uncommon seeds. By
contrast, MoonShine distills the seed traces while pre-
serving both syntactic and semantic integrity and the
achieved code coverage.
Lastly, IMF [22] is a model-based macOS kernel
fuzzer that programatically infers an API model from the
call trace of real-world programs. Using this inferred
model, IMF is able to generate and mutate C programs
for use in a fuzzing campaign. Both IMF and MoonShine
rely on tracking explicit input dependencies between sys-
tem calls. However, unlike MoonShine, IMF does not
perform any trace distillation, which in our setting slows
the rate of fuzzing by up to 90%. Furthermore, IMF does
not support any implicit dependency tracking, which was
essential for ﬁnding 10 out of the 17 vulnerabilities de-
tected by MoonShine.
Other Fuzzers. Trinity [11], iknowthis [4], and sys-
fuzz [9] are other examples of Linux system call fuzzers
built with hard-coded rules and grammars.
In addi-
tion, there also exists another class of evolutionary ker-
nel fuzzers built on or inspired by AFL [1]. These are
TriforceLinuxSyscallFuzzer [10], TriforceAFL [23], and
kAFL [33], the latter two of which are OS agnostic. Like
Syzkaller, all of these OS fuzzers can potentially beneﬁt
from the coverage improvements offered by the Moon-
Shine framework.
Finally,
the class of evolutionary fuzzers that tar-
get semantic bugs (e.g., SlowFuzz [35], NEZHA [30],
Frankencerts [17], and Mucerts [41]) may also similarly
beneﬁt from domain-speciﬁc seed distillation techniques
that maximize coverage or path diversity.
Implicit Dependencies. MoonShine’s approach of
identifying implicit dependencies across system calls is
conceptually similar to the dependency tracking mecha-
nisms used in record-replay systems that can replay an
application’s execution trace. Deterministic replay re-
quires identiﬁcation of the system calls that access some
shared resources to ensure preserving their relative or-
dering during replay. To do this, record-replay systems
like Dora [25] and Scribe [26] log serialized access to
shared kernel resources, e.g., inodes and memory tables.
However, MoonShine, unlike these systems, uses static
analysis to track implicit dependencies.
9 Developer Responses
We have responsibly disclosed all the vulnerabilities
identiﬁed in this work to the appropriate subsystem
maintainers and vendors. In total, 9 of the 17 vulnera-
bilities have already been ﬁxed and we are working with
the developers to ﬁx the rest. Our reports include a de-
scription of the bug, our kernel conﬁgs, and a Proof-of-
Concept (POC) test input. The inotify buffer overﬂow
vulnerability was assigned CVE-2017-7533 and the ﬁx
was applied to the 4.12 kernel and backported to all sta-
ble kernels versions after 3.14. The JFS memory corrup-
tion and socket_setattr bugs were addressed within a
week of disclosure and have been assigned CVE-2018-
12233 and CVE-2018-12232 respectively. The ﬁxes for
both of these bugs are currently being tested and will be
backported to the affected stable kernels after the 4.18-
rc2 release.
10 Conclusion
In this paper we designed, implemented and evaluated
Moonshine, a framework that automatically generates
seeds for OS fuzzers by distilling system call traces gath-
ered from the execution of real programs. Our exper-
imental results demonstrated that Moonshine is able to
efﬁciently distill a trace of over 2.8 million system calls
into just over 14,000 calls while preserving 86% of the
coverage. Moreover, the seeds generated by Moonshine
improved the coverage of Syzkaller by over 13%, and re-
sulted in the discovery of 17 new vulnerabilities in the
Linux kernel that the default Syzkaller could not ﬁnd by
itself.
11 Acknowledgement
We thank Junfeng Yang, Jason Nieh, and the anonymous
reviewers for their constructive and valuable feedback.
This work is sponsored in part by NSF grant CNS-16-
17670, ONR grant N00014-17-1-2010, and a Google
Faculty Fellowship. Any opinions, ﬁndings, conclusions,
or recommendations expressed herein are those of the
authors, and do not necessarily reﬂect those of the US
Government, ONR, or NSF.
742    27th USENIX Security Symposium
USENIX Association
References
[1] aﬂ. https://github.com/mirrorer/afl.
[2] CERT Basic Fuzzing Framework (BFF). https://github.com/
CERTCC-Vulnerability-Analysis/certfuzz.
[3] Glibc Testsuite.
https://sourceware.org/glibc/wiki/
Testing/Testsuite.
[4] iknowthis. https://github.com/rgbkrk/iknowthis.
[5] Kernel memory leak detector. https://www.kernel.org/doc/
html/v4.10/dev-tools/kmemleak.html.
[25] N. Viennot, S. Nair, and J. Nieh. Transparent Mutable Replay for
Multicore Debugging and Patch Validation. In Proceedings of the
18th International Conference on Architectural Support for Pro-
gramming Languages and Operating Systems (ASPLOS), pages
127–138, 2013.
[26] O. Laadan, N. Viennot, and J. Nieh. Transparent, Lightweight
Application Execution Replay on Commodity Multiprocessor
Operating Systems. In Proceedings of the ACM (SIGMETRICS)
International Conference on Measurement and Modeling of Com-
puter Systems, pages 155–166, 2010.
[27] T. Ormandy. Making software dumber.
http://taviso.
[6] Linux Kernel Selftests.
https://www.kernel.org/doc/
decsystem.org/making_software_dumber.pdf, 2008.
Documentation/kselftest.txt.
[7] Linux Testing Project.
https://linux-test-project.
github.io/.
[8] Open Posix Test Suite. http://posixtest.sourceforge.net/.
[28] P. Paganini.
Google syzkaller
several ﬂaws
cover
//securityaffairs.co/wordpress/65313/hacking/
linux-usb-subsystem-flaws.html, 2017.
in linux usb subsystem.
fuzzer allowed to dis-
https:
[9] sysfuzz:
A Prototype Systemcall Fuzzer.
https:
//events.ccc.de/congress/2005/fahrplan/attachments/
683-slides_fuzzing.pdf.
[29] J. Pan, G. Yan, and X. Fan. Digtool: A Virtualization-Based
Framework for Detecting Kernel Vulnerabilities. In Proceedings
of the 26th USENIX Security Symposium, pages 149–165, 2017.
[10] Triforce Linux Syscall Fuzzer.
https://github.com/
nccgroup/TriforceLinuxSyscallFuzzer.
[11] Trinity. https://github.com/kernelslacker/trinity.
[12] aﬂ-tmin.
http://www.tin.org/bin/man.cgi?section=1&
topic=afl-tmin, 2013.
[13] Strace. https://strace.io/, 2017.
[14] The Undeﬁned Behavior Sanitizer - UBSAN. https://www.
kernel.org/doc/html/v4.11/dev-tools/ubsan.html, 2017.
[30] T. Petsios, A. Tang, S. Stolfo, A. D. Keromytis, and S. Jana.
NEZHA: Efﬁcient Domain-Independent Differential Testing. In
Proceedings of the 38th IEEE Symposium on Security and Pri-
vacy (S&P), pages 615–632, 2017.
[31] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren,
G. Grieco, and D. Brumley. Optimizing Seed Selection for
Fuzzing.
In Proceedings of the 23rd USENIX Security Sympo-
sium, pages 861–875, 2014.
[32] J. Ruderman. Introducing jsfunfuzz. http://www.squarefree.
[15] S. Bhartiya. How Linux is the Largest Software Project. https:
com/2007/08/02/introducing-jsfunfuzz/, 2007.
//www.cio.com/article/3069529/, 2016.
[16] N. Brown. Smatch: pluggable static analysis for C. https://
lwn.net/Articles/691882/, 2016.
[17] C. Brubaker, S. Jana, B. Ray, S. Khurshid, and V. Shmatikov.
Using Frankencerts for Automated Adversarial Testing of Certiﬁ-
cate Validation in SSL/TLS Implementations. In Proceedings of
the 35th IEEE Symposium on Security and Privacy (S&P), pages
114–129, 2014.
[18] J. Edge. The kernel address sanitizer.
https://lwn.net/
Articles/612153/, 2017.
[19] C. Evans, M. Moore,
Fuzzing at
https://security.googleblog.com/2011/08/
and T. Ormandy.
scale.
fuzzing-at-scale.html.
[20] DIFUZE: Interface Aware Fuzzing for Kernel Drivers. Difuze:
Interface aware fuzzing for kernel drivers.
In Proceedings of
the ACM Conference on Computer and Communications Secu-
rity (CCS), pages 2123–2138, 2017.
[21] P. Godefroid, A. Kiezun, and M. Y. Levin. Grammar-based white-
In Proceedings of the 29th ACM SIGPLAN Con-
box fuzzing.
ference on Programming Language Design and Implementation
(PLDI), pages 206–215, 2008.
[22] H. Han and S. K. Cha. IMF: Inferred Model-based Fuzzer. In
Proceedings of the 2017 ACM SIGSAC Conference on Computer
and Communications Security (CCS), pages 2345–2358, 2017.
[23] J. Hertz and T. Newsham.
Project
Run aﬂ
https://www.nccgroup.trust/us/
triforce:
everything!
on
about-us/newsroom-and-events/blog/2016/june/
project-triforce-run-afl-on-everything/, 2017.
[24] C. Holler, K. Herzig, and A. Zeller. Fuzzing with Code Frag-
ments. In Proceedings of the 21st USENIX Security Symposium,
pages 445–458, 2012.
[33] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and
T. Holz. kAFL: Hardware-Assisted Feedback Fuzzing for OS
Kernels.
In Proceedings of the 26th USENIX Security Sympo-
sium, pages 167–182, 2017.
[34] J. V. Stoep. Android: protecting the kernel. Linux Security Sum-
mit, 2016.
[35] T. Petsios, J. Zhao, A. D. Keromytis, and S. Jana. SlowFuzz:
Automated Domain-Independent Detection of Algorithmic Com-
plexity Vulnerabilities. In Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security (CCS),
pages 2155–2168, 2017.
[36] S. Veggalam, S. Rawat, I. Haller, and H. Bos. IFuzzer: An Evo-
lutionary Interpreter Fuzzer using Genetic Programming. In Pro-
ceedings of the 21st European Symposium on Research in Com-
puter Security (ESORICS), pages 581–601, 2016.
[37] D. Vykov.
Syzkaller.
https://github.com/google/
syzkaller, 2016.
[38] D. Vyukov. Kernel: add kcov code coverage. https://lwn.
net/Articles/671640/, 2016.
[39] J. Wang, B. Chen, L. Wei, , and Y. Liu. Skyﬁre: Data-Driven
Seed Generation. In Proceedings of the 38th IEEE Symposium
on Security and Privacy (S&P), pages 579–594, 2017.
[40] X. Yang, Y. Chen, E. Eide, and J. Regehr. Finding and under-
standing bugs in c compilers. In Proceedings of the 32nd ACM
SIGPLAN Conference on Programming Languge Design and Im-
plementation (PLDI), pages 283–294, 2011.
[41] Y. Chen, T. Su, C. Sun, Z. Su, and J. Zhao. Coverage-directed dif-
ferential testing of JVM implementations. In Proceedings of the
37th ACM Conference on Programming Language Design and
Implementation (PLDI), pages 85–99, 2016.
USENIX Association
27th USENIX Security Symposium    743