```
NAME                    TYPE           CLUSTER-IP         EXTERNAL-IP   PORT(S)                                         AGE
nginx-frontend    NodePort   10.43.164.118               80:31574/TCP,443:32432/TCP   4s
```
输出显示类型是节点端口，并且我们已经公开了服务的 IP 地址和端口。如果您查看端口，您会注意到，与集群 IP 服务不同，节点端口服务显示两个端口，而不是一个。第一个端口是内部集群服务可以瞄准的公开端口，第二个端口号是随机生成的端口，可以从集群外部访问。
由于我们为服务公开了两个端口 80 和 443，我们将分配两个节点端口。如果有人需要从集群外部定位服务，他们可以定位具有所提供端口的任何工作节点来访问服务:
![Figure 6.1 – NGINX service using NodePort ](img/Fig_6.1_B15514.jpg)
图 6.1–使用节点端口的 NGINX 服务
每个节点维护一个节点端口及其分配服务的列表。由于该列表与所有节点共享，因此您可以使用该端口定位任何正常运行的节点，Kubernetes 会将其路由到一个正在运行的 pod。
为了可视化流量，我们创建了一个图形，向 NGINX 窗格显示网络请求:
![Figure 6.2 – NodePort traffic flow overview ](img/Fig_6.2_B15514.jpg)
图 6.2–节点端口流量概述
使用节点端口公开服务时，需要考虑一些问题:
*   如果删除并重新创建服务，分配的节点端口将会改变。
*   如果您的目标节点离线或有问题，您的请求将失败。
*   将节点端口用于太多服务可能会令人困惑。您需要记住每个服务的端口，并且记住没有与服务相关联的*外部*名称。这可能会让以集群中的服务为目标的用户感到困惑。
由于这里列出的限制，您应该限制使用节点端口服务。
### 负载平衡器服务
许多人从 Kubernetes 开始阅读服务，发现负载平衡器类型会为服务分配一个外部 IP 地址。由于外部 IP 地址可以由网络上的任何机器直接寻址，这对于服务来说是一个有吸引力的选择，这就是为什么许多人首先尝试使用它。不幸的是，由于许多用户从使用本地 Kubernetes 集群开始，他们在尝试创建负载平衡器服务时遇到了麻烦。
负载平衡器服务依赖于与 Kubernetes 集成的外部组件来创建分配给该服务的 IP 地址。大多数内部 Kubernetes 安装不包括这种类型的服务。当您尝试使用没有支持基础设施的负载平衡器服务时，您会发现您的服务在`EXTERNAL-IP`状态列中显示``。
我们将在本章后面解释负载平衡器服务以及如何实现它。
### 外部名称服务
ExternalName 服务是具有特定用例的唯一服务类型。当您查询使用外部名称类型的服务时，最终端点不是运行在集群中的 pod，而是外部域名。
举一个您在 Kubernetes 之外可能很熟悉的例子，这类似于使用`c-name`给主机记录加别名。当您在域名系统中查询`c-name`记录时，它会解析为主机记录，而不是 IP 地址。
在使用此服务类型之前，您需要了解它可能会给您的应用带来的潜在问题。如果目标端点使用 SSL 证书，您可能会遇到问题。由于您正在查询的主机名可能与目标服务器证书上的名称不同，因此您的连接可能不会成功，因为名称不匹配。如果您发现自己处于这种情况，您可能可以使用证书中添加了**主题备选名称** ( **SAN** )的证书。向证书添加替代名称允许您将多个名称与一个证书相关联。
为了解释为什么您可能想要使用 ExternalName 服务，让我们使用以下示例:
![](img/Table_3.jpg)
根据需求，使用 ExternalName 服务是完美的解决方案。那么，我们将如何完成要求呢？(这是一个理论练习；您不需要在您的 KinD 集群上执行任何东西)
1.  第一步是创建一个清单，该清单将为数据库服务器创建 ExternalName 服务:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: sql-db
      namespace: finance
    spec:
      type: ExternalName
      externalName: sqlserver1.foowidgets.com
    ```
2.  创建服务后，下一步是将应用配置为使用新服务的名称。由于服务和应用在同一个名称空间中，您可以将应用配置为以名称`sql-db`为目标。
3.  现在，当应用查询`sql-db`时，会解析到`sqlserver1.foowidgets.com`，最终解析到 192.168.10.200 的 IP 地址。
这实现了最初的要求，只使用 Kubernetes DNS 服务器将应用连接到外部数据库服务器。
您可能想知道为什么我们不简单地配置应用来直接使用数据库服务器名称。关键是第二个要求，当 SQL server 迁移到容器时，限制任何重新配置。
由于在将 SQL server 迁移到集群后，我们无法重新配置应用，因此将无法在应用设置中更改 SQL server 的名称。如果我们将应用配置为使用原始名称`sqlserver1.foowidgets.com`，则迁移后应用将无法工作。通过使用 ExternalName 服务，我们能够通过用指向 SQL 服务器的标准 Kubernetes 服务替换 ExternalHost 服务名称来更改内部 DNS 服务名称。
要实现第二个目标，请执行以下步骤:
1.  删除`ExternalName`服务。
2.  使用名称`ext-sql-db`创建一个新服务，使用`app=sql-app`作为选择器。清单看起来像这里显示的:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: sql-db
      name: sql-db
      namespace: finance
      ports:
      - port: 1433
        protocol: TCP
        targetPort: 1433
        name: sql
      selector:
        app: sql-app
      type: ClusterIP
    ```
由于我们为新服务使用相同的服务名称，因此不需要对应用进行任何更改。应用仍将以名称`sql-db`为目标，该名称现在将使用部署在集群中的 SQL 服务器。
现在您已经了解了服务，我们可以继续讨论负载平衡器，它将允许您使用标准的 URL 名称和端口向外部公开服务。
# 负载平衡器简介
在讨论不同类型的负载平衡器之前，了解**开放系统互连** ( **OSI** )模型很重要。了解现场视察模型的不同层将有助于您理解不同的解决方案如何处理传入的请求。
## 了解现场视察模型
当您听说在 Kubernetes 中公开应用的不同解决方案时，您通常会在这里提到第 7 层或第 4 层负载平衡。这些名称指的是各自在现场视察模型中的运行位置。每一层提供不同的功能；运行在第 7 层的组件提供与第 4 层组件不同的功能。
首先，让我们看一下这七个层的简要概述以及每个层的描述。对于本章，我们对两个突出显示的部分**第 4 层和第 7 层**感兴趣:
![](img/Table_4.jpg)
表 6.3 现场视察模型层
您不需要成为现场视察层的专家，但您应该了解第 4 层和第 7 层负载平衡器提供了什么，以及它们各自如何用于集群。
让我们更深入地了解第 4 层和第 7 层的细节:
*   **第 4 层**:如图表描述所述，第 4 层负责设备间的通信流量。运行在第 4 层的设备可以访问 TCP/UPD 信息。基于第 4 层的负载平衡器使您的应用能够为任何 TCP/UDP 端口的传入请求提供服务。
*   **第 7 层**:第 7 层负责为应用提供网络服务。当我们说应用流量时，我们指的不是 Excel 或 Word 等应用；相反，我们指的是支持应用的协议，比如 HTTP 和 HTTPS。
在下一节中，我们将解释每种负载平衡器类型，以及如何在 Kubernetes 集群中使用它们来公开您的服务。
# 第 7 层负载平衡器
Kubernetes 以入口控制器的形式提供第 7 层负载平衡器。有许多解决方案可以为您的集群提供入口，包括:
*   NGINX
*   使者
*   特拉菲克
*   哈普西
通常，第 7 层负载平衡器的功能有限。在 Kubernetes 世界中，它们被实现为入口控制器，可以将传入的 HTTP/HTTPS 请求路由到您公开的服务。我们将在*创建入口规则*部分详细介绍如何将 NGINX 实现为 Kubernetes 入口控制器。
## 名称解析和第 7 层负载平衡器
要在 Kubernetes 集群中处理第 7 层流量，您需要部署一个入口控制器。入口控制器依赖传入的名称将流量路由到正确的服务。在传统服务器部署模型中，您将创建一个 DNS 条目，并将其映射到一个 IP 地址。
部署在 Kubernetes 集群上的应用没有什么不同，用户将使用域名来访问应用。
通常，您会创建一个新的通配符域，通过外部负载平衡器(如 F5、HAproxy 或跷跷板)来定位入口控制器。
让我们假设我们的公司叫做 FooWidgets，我们有三个 Kubernetes 集群，由一个带有多个入口控制器端点的外部负载平衡器作为前端。我们的 DNS 服务器将为每个集群提供条目，使用指向负载平衡器虚拟 IP 地址的通配符域:
![](img/Table_5.jpg)
表 6.4 入口的通配符域名示例
下图显示了请求的整个流程:
![Figure 6.3 – Multiple-name Ingress traffic flow ](img/Fig_6.3_B15514.jpg)
图 6.3–多名称入口流量
图 6.3 中的每个步骤都在这里详细说明:
1.  使用浏览器，用户请求网址[https://timesheets.cluster1.foowidgets.com](https://timesheets.cluster1.foowidgets.com)。
2.  域名系统查询被发送到域名系统服务器。DNS 服务器查找`cluster1.foowidgets.com`的区域详细信息。DNS 区域中有一个条目解析为在负载平衡器上为域分配的 VIP。
3.  `cluster1.foowidgets.com`负载平衡器的 VIP 分配了三个后端服务器，指向我们部署了入口控制器的三个工作节点。
4.  使用其中一个端点，请求被发送到入口控制器。
5.  入口控制器会将请求的网址与入口规则列表进行比较。当找到匹配的请求时，入口控制器将把请求转发给分配给入口规则的服务。
为了帮助加强入口的工作方式，它将有助于在集群上创建入口规则，以查看它们的运行情况。现在，关键要点是入口使用请求的网址将流量导向正确的 Kubernetes 服务。
## 使用 nip.io 进行名称解析
大多数个人开发集群，比如我们的 KinD 安装，可能没有足够的权限向 DNS 服务器添加记录。为了测试入口规则，我们需要针对由入口控制器映射到 Kubernetes 服务的唯一主机名。如果没有 DNS 服务器，您需要创建一个本地主机文件，其中多个名称指向入口控制器的 IP 地址。
例如，如果您部署了四个 web 服务器，您需要将这四个名称都添加到您的本地主机中。这里显示了一个例子:
`192.168.100.100 webserver1.test.local`
`192.168.100.100 webserver2.test.local`
`192.168.100.100 webserver3.test.local`
`192.168.100.100 webserver4.test.local`
这也可以用一行而不是多行来表示:
`192.168.100.100 webserver1.test.local webserver2.test.local webserver3.test.local webserver4.test.local`
如果您使用多台计算机来测试您的部署，您将需要在计划用于测试的每台计算机上编辑主机文件。在多台机器上维护多个文件是一个管理上的噩梦，并且会导致使测试成为一个挑战的问题。
幸运的是，有免费的服务可以提供我们可以使用的 DNS 服务，而不需要为我们的 KinD 集群配置复杂的 DNS 基础设施。
Nip.io 是我们将用于我们的 KinD 集群名称解析需求的服务。使用我们之前的网络服务器示例，我们将不需要创建任何 DNS 记录。我们仍然需要将不同服务器的流量发送到运行在 192.168.100.100 上的 NGINX 服务器，这样【Ingress 就可以将流量路由到适当的服务。Nip.io 使用包含主机名中的 ip 地址的命名格式将名称解析为 IP。例如，假设我们有四个要测试的 web 服务器，称为 webserver1、webserver2、webserver3 和 webserver4，在 192.168.100.100 上运行的入口控制器上有入口规则。
正如我们前面提到的，我们不需要创建任何记录来实现这一点。相反，我们可以使用命名约定让 nip.io 为我们解析名称。每个 web 服务器将使用具有以下命名标准的名称:
`..nip.io`
下表列出了所有四个 web 服务器的名称:
![](img/Table_6.jpg)
表 6.5–Nip . io 域名示例
当您使用任何前面的名称时，nip.io 会将它们解析为 192.168.100.100。您可以在下面的截图中看到每个名称的 ping 示例:
![Figure 6.4 – Example name resolution using nip.io ](img/Fig_6.4_B15514.jpg)
图 6.4–使用 nip.io 的名称解析示例
这可能看起来没有什么好处，因为您在名称中提供了 IP 地址。如果你知道 ip 地址，为什么还需要麻烦使用 nip.io？
请记住入口规则需要一个唯一的名称来将流量路由到正确的服务。虽然您可能不需要该名称来了解服务器的 IP 地址，但入口规则需要该名称。每个名字都是唯一的，使用全名的第一部分——在我们的例子中，即`webserver1`、`webserver2`、`webserver3`和`webserver4`。
通过提供这项服务，nip.io 允许您为入口规则使用任何名称，而不需要在您的开发集群中有一个 DNS 服务器。
现在，您已经知道如何使用 nip.io 来解析集群的名称，让我们解释一下如何在 Ingress 规则中使用 nip.io 名称。
## 创建入口规则
请记住，入口规则使用名称将传入的请求路由到正确的服务。以下是传入请求的图形表示，显示了入口如何路由流量: