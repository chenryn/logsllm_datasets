general proof for plaintext-aware schemes, which turns out
to be rather straightforward.
3.2 The Cramer-Shoup system
The Cramer-Shoup encryption scheme [7] is quite practi-
cal and provides chosen-ciphertext security against adaptive
attacks. This is achieved in the standard security model,
based on the hardness of the Decision Diﬃe-Hellman prob-
lem in a cyclic group G of large prime order q.
The scheme operates in the following way. We describe
the slight variation given in [22]. (We follow the author’s
notation, which gives diﬀerent meaning to the symbols e, d
than we gave in §2.)
Key Generation: A group G (along with its size, q), and
random elements g1, g2 ∈ G and x1, x2, y1, y2, z ∈ (Z/qZ)
are chosen. The public key is
(g1, g2, c = gx1
1 gx2
2 , d = gy1
1 gy2
2 , h = gz
1 ),
together with a universal one-way hash function H : {0, 1}∗ →
(Z/qZ). The private key is (x1, x2, y1, y2, z).
Encryption: The input is a plaintext message m ∈ G. The
encryption algorithm chooses a random element r ∈ (Z/qZ)
and computes
u1 = gr
1, u2 = gr
2, e = hrm, α = H(u1, u2, e), v = crdrα.
The ciphertext is (u1, u2, e, v).
Decryption: Given a ciphertext (u1, u2, e, v) the decryp-
tion algorithm ﬁrst computes α and examines the equation
ux1+y1α
= v. If it does not hold then the ciphertext
−1.
is rejected; otherwise the output is m = e(uz
1)
ux2+y2α
1
2
Relation between keys: We consider now what sort of
relation makes sense between the keys of a Cramer-Shoup
instance and the keys of a signature scheme which is used in
combination with it. The most natural scenario is to use the
Cramer-Shoup instance together with a signature scheme
that also uses the group G, having (g1, h) as its public key
and z as its private key. This applies to a number of sig-
nature schemes that are deﬁned over cyclic groups, such as
El Gamal, DSA, or Schnorr’s signature scheme. Let Sig de-
note any of these schemes, using the same group G as our
Cramer-Shoup instance, with (g1, h) as the public veriﬁca-
tion key. The other keys of the Cramer-Shoup instance are
distributed exactly as in the deﬁnition of the key generation
of the scheme, independently of the signature system.
Simulating decryption: Given an adversary A that at-
tacks a signature scheme Sig when used together with the
Cramer-Shoup scheme as described above, we construct an
runs A
adversary A(cid:1)
as a black box and must therefore simulate the operation of
a decryption oracle for the Cramer-Shoup instance.
attacking Sig alone. This adversary A(cid:1)
219The adversary A(cid:1)
1. A(cid:1)
2. A(cid:1)
operates in the following manner:
is given the public key v = (g1, h) of Sig.
−1 satisﬁes xx
deﬁnes keys for the Cramer-Shoup instance.
It
−1
chooses a random exponent x and deﬁnes g2 = hx
,
−1 ≡ 1 mod q (and therefore h =
where x
2 ). It then chooses random elements x1, x2, y1, y2 ∈ G
gx
and sets c = gx1
as in the original
scheme. The distribution of the keys is exactly that
of the keys in the original scheme, subject to the con-
straint that (g1, h) are ﬁxed as part of the public key
of the attacked signature scheme.
2 , d = gy1
1 gx2
1 gy2
2
2
1
3. A(cid:1)
ux2+y2α
−1. (That is, A(cid:1)
runs the given adversary A against the combined
use of the two schemes, and provides a decryption or-
acle for the Cramer-Shoup instance. When A asks to
decrypt a ciphertext (u1, u2, e, v) the decryption oracle
ﬁrst veriﬁes that ux1+y1α
= v, using its knowl-
edge of x1, x2, y1, y2. If this equation holds it computes
the plaintext m = e(ux
uses its knowl-
2 )
edge of logg2 h for performing the decryption, instead
of using logg1 h as in the original scheme).
It can easily be veriﬁed that the view of A is identical
to its view in an actual run against a combined instance of
Sig and the Cramer-Shoup scheme, and its probability of
success is therefore unchanged.
3.3 The Naor-Yung System
The Naor-Yung encryption scheme [17] was the ﬁrst to
provide chosen-ciphertext security (although only against
“lunch-time” attacks, giving chosen-ciphertext security in
the pre-processing mode, and not against adaptive attacks).
Security is proven in the standard model based on a crypto-
graphic assumption and without modeling any function as
a random oracle.
On a high level, the Naor-Yung encryption scheme oper-
ates in the following way: The scheme uses two indepen-
dently chosen instances (E1, E2) of a chosen-plaintext se-
cure encryption scheme, and a noninteractive zero knowl-
edge (NIZK) proof system [5]. To encrypt a message, one
encrypts it twice, once using each of the two encryption keys,
and provides a NIZK proof for the statement that the two
ciphertexts are encryptions of the same plaintext. In the de-
cryption phase the owner of the private key ﬁrst veriﬁes the
NIZK proof, and if it is valid it decrypts one of the cipher-
texts using one of its private keys. It is important for us that
the veriﬁcation of the NIZK proof does not require knowl-
edge of the private key, and therefore can be performed by
any party.
Relation between keys: To set the Naor-Yung scheme
in our context we assume that the keys of one of the two
encryption instances, say E1, are related, or possibly equal,
to the keys of the signature scheme Sig and are therefore
unknown to our adversary. The keys of E2 are distributed
according to their original distribution, independently of Sig.
The key of the Naor-Yung scheme also contains a random
string R which is used for the NIZK proofs.
Simulating the decryption oracle: The construction
of a simulator S that provides decryptions of legitimate ci-
phertexts without knowing the private keys of E1 is straight-
forward. The simulator chooses a key pair for E2, and sets
the public key of its encryption scheme to contain the public
keys of E1 and E2 plus a random string R. When S receives
a ciphertext it ﬁrst checks the NIZK proof to verify that the
two encryptions under the two public keys are of the same
plaintext. If this is correct, it uses the private key of E2 to
decrypt the second encryption. This is the correct decryp-
tion, since the soundness of the NIZK proof ensures that
the two plaintexts are equal. The view of the adversary is
identical to its view in interacting with the combined cryp-
tosystem, up to a negligible error that depends on the error
probability of the NIZK proof.
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
1, E
(cid:1)
2, R
) with E1 = E
Combined use of two Naor-Yung schemes: Assume
that the adversary has access to two instances of the Naor-
Yung scheme, N Y and N Y
, which share one of their keys.
That is, cryptosystem N Y has keys (E1, E2, R) and N Y
has
(cid:1)
keys (E
1, while the other keys are in-
dependent of E1 and of each other. Suppose also that the
adversary can present only “lunch-time” chosen-ciphertext
queries to N Y , but can present adaptive queries to N Y
even
after it receives a challenge for N Y . It is somewhat surpris-
ing that this combined scheme does not aﬀect the security
of N Y , even though the Naor-Yung scheme is not known to
be secure against adaptive chosen-ciphertext attacks.
To see why this holds, assume that there is an adversary
A that breaks the combined scheme. We show how to use it
to construct an adversary A(cid:1)
that breaks N Y with a lunch-
time attack. A(cid:1)
, and sends
to A. Before receiving the
the public keys of N Y and N Y
challenge ciphertext, it can forward A’s queries about N Y
to N Y ’s decryption oracle. After receiving the challenge, A
, and A(cid:1)
can only ask queries about N Y
can answer these
(cid:1)
since it knows the decryption key for E
2.
ﬁrst chooses a random E
(cid:1)
2 and R
(cid:1)
(cid:1)
(cid:1)
A sketch of a proof for the Dolev-Dwork-Naor
scheme: The Dolev-Dwork-Naor scheme [10], which pre-
ceded the Cramer-Shoup scheme, provides the same security
against adaptive chosen-ciphertext attacks, using a generic
construction which is considerably less eﬃcient. Without
going into detail, the scheme of [10] uses k pairs of encryp-
tion keys, all chosen according to a scheme which is chosen-
plaintext secure. When a party generates an encrypted mes-
sage it must choose a signature key, and a hash of the cor-
responding veriﬁcation key chooses one encryption key out
of every pair. Every bit of the message is encrypted with
each of the k chosen keys, and in addition the ciphertext
is signed and contains a NIZK proof of consistency among
the encryptions. The proof that this scheme can be securely
used in combination with a signature scheme is similar to
the proof given for the Naor-Yung scheme. Namely, most of
the keys of the system can be part of the private key of the
attacked scheme and therefore unknown, since it is suﬃcient
to be able to decrypt only one of the k encryptions of the
message. This is achieved, for example, when one of the k
pairs of encryption schemes is independent of the key of the
attacked cryptosystem. Therefore, in every choice of keys
that is made in the encryption process, one of the two keys
in this pair is used to encrypt the message, and the result
can be decrypted by the simulator. Alternatively, it is suf-
ﬁcient that a large sample of the keys in diﬀerent pairs are
independent of the key of the attacked cryptosystem, so that
for every encrypted message there is a high probability that
one of these keys is used for encryption, and the resulting
ciphertext can be decrypted by the simulator.
Remark: Our results show that using an encryption scheme
whose keys are related to those of a signature scheme does
not reduce the security of the latter.
It seems, therefore,
220that if encryption scheme E1 provides weaker security than
encryption scheme E2, it should be more diﬃcult to prove
the result with respect to scheme E1 than with respect
to scheme E2. Therefore, the result regarding the Naor-
Yung scheme (which does not provide security against adap-
tive post-processing attacks) seems stronger than the re-
sults regarding the Cramer-Shoup and the Dolev-Dwork-
Naor schemes.
3.4 Plaintext-Awareness and OAEP+
3.4.1 Plaintext-awareness
Plaintext-awareness was introduced by Bellare and Ro-
gaway in [2], and a modiﬁed deﬁnition was given in [1].
We follow Shoup [23] and call these deﬁnitions PA1 and
PA2, respectively. This notion of security applies only in
the random-oracle model.
Intuitively, an encryption scheme provides plaintext aware-
ness if an adversary that sends ciphertext queries to a de-
cryption oracle can only receive decryptions of ciphertexts
for which it is already “aware” of the plaintexts that are
encrypted by these ciphertexts.
This property is captured by the requirement that there be
a plaintext extractor which, given a ciphertext along with a
transcript of the interaction of the adversary with the hash
functions (or any other functions in the scheme) that are
modeled as random oracles, can output the plaintext that
is encrypted by the given ciphertext. Bellare et al. [1] have
shown PA2 to be strictly stronger than adaptive chosen-
ciphertext security in the random-oracle world.
The OAEP scheme [2] was proven to have the PA1 prop-
erty, and its instantiation with the RSA cryptosystem, RSA-
OAEP, is part of two industry standards, PKCS #1, version
2 and IEEE P1363. Recently Shoup [23] has shown that
one cannot prove that the PA1 deﬁnition provides adap-
tive chosen-ciphertext security if the proof only uses black
box reductions. (PA1 still provides chosen-ciphertext secu-
rity against non-adaptive attacks.) In addition, Shoup has
suggested a new scheme, OAEP+, which satisﬁes the PA2
deﬁnition (and therefore provides chosen-ciphertext security
against adaptive attacks, as proven in [1]). Very recently,
Fujisaki et al. [13] have shown that RSA-OAEP (namely,
OAEP using the RSA function as the trapdoor permuta-
tion) is secure, and Boneh [6] has given a simpler variant of
OAEP for the RSA and Rabin functions. We will discuss
these cryptosystems in the full version of this paper.
Our aim is to prove that the decryption oracle D of a
plaintext-aware encryption scheme does not help any adver-
sary to break a signature scheme Sig whose keys may be
related to the private keys of the encryption scheme.
In-
tuitively this should be true, since the plaintext-awareness
property ensures that by examining a ciphertext and the ad-
versary’s interaction with the random oracle, the plaintext
extractor can provide the plaintext that is encrypted by the
given ciphertext. The plaintext extractor can therefore pro-