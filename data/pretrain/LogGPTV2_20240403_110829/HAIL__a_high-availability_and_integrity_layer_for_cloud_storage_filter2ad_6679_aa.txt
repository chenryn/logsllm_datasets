title:HAIL: a high-availability and integrity layer for cloud storage
author:Kevin D. Bowers and
Ari Juels and
Alina Oprea
HAIL: A High-Availability and Integrity Layer
for Cloud Storage
Kevin D. Bowers
RSA Laboratories
Cambridge, MA, USA
PI:EMAIL
Ari Juels
RSA Laboratories
Cambridge, MA, USA
PI:EMAIL
Alina Oprea
RSA Laboratories
Cambridge, MA, USA
PI:EMAIL
ABSTRACT
We introduce HAIL (High-Availability and Integrity Layer), a dis-
tributed cryptographic system that allows a set of servers to prove to
a client that a stored ﬁle is intact and retrievable. HAIL strengthens,
formally uniﬁes, and streamlines distinct approaches from the cryp-
tographic and distributed-systems communities. Proofs in HAIL
are efﬁciently computable by servers and highly compact—typically
tens or hundreds of bytes, irrespective of ﬁle size. HAIL crypto-
graphically veriﬁes and reactively reallocates ﬁle shares. It is ro-
bust against an active, mobile adversary, i.e., one that may progres-
sively corrupt the full set of servers. We propose a strong, formal
adversarial model for HAIL, and rigorous analysis and parameter
choices. We show how HAIL improves on the security and efﬁ-
ciency of existing tools, like Proofs of Retrievability (PORs) de-
ployed on individual servers. We also report on a prototype imple-
mentation.
Categories and Subject Descriptors
E.3 [Data]: [Data Encryption]
General Terms
Security
Keywords
Distributed storage systems, cloud storage, data availability, era-
sure codes, proofs of retrievability
1.
INTRODUCTION
Cloud storage denotes a family of increasingly popular on-line
services for archiving, backup, and even primary storage of ﬁles.
Amazon S3 [1] is a well known example. Cloud-storage providers
offer users clean and simple ﬁle-system interfaces, abstracting away
the complexities of direct hardware management. At the same time,
though, such services eliminate the direct oversight of component
reliability and security that enterprises and other users with high
service-level requirements have traditionally expected.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
To restore security assurances eroded by cloud environments, re-
searchers have proposed two basic approaches to client veriﬁca-
tion of ﬁle availability and integrity. The cryptographic commu-
nity has proposed tools called proofs of retrievability (PORs) [23]
and proofs of data possession (PDPs) [2]. A POR is a challenge-
response protocol that enables a prover (cloud-storage provider) to
demonstrate to a veriﬁer (client) that a ﬁle F is retrievable, i.e.,
recoverable without any loss or corruption. The beneﬁt of a POR
over simple transmission of F is efﬁciency. The response can be
highly compact (tens of bytes), and the veriﬁer can complete the
proof using a small fraction of F .
As a standalone tool for testing ﬁle retrievability against a single
server, though, a POR is of limited value. Detecting that a ﬁle is
corrupted is not helpful if the ﬁle is irretrievable and the client has
no recourse. Thus PORs are mainly useful in environments where
F is distributed across multiple systems, such as independent stor-
age services. In such environments, F is stored in redundant form
across multiple servers. A veriﬁer (user) can test the availability of
F on individual servers via a POR. If it detects corruption within a
given server, it can appeal to the other servers for ﬁle recovery. To
the best of our knowledge, the application of PORs to distributed
systems has remained unexplored in the literature.
A POR uses ﬁle redundancy within a server for veriﬁcation. In a
second, complementary approach, researchers have proposed dis-
tributed protocols that rely on queries across servers to check ﬁle
availability [25, 31]. In a distributed ﬁle system, a ﬁle F is typically
spread across servers with redundancy—often via an erasure code.
Such redundancy supports ﬁle recovery in the face of server errors
or failures. It can also enable a veriﬁer (e.g., a client) to check the
integrity of F by retrieving fragments of F from individual servers
and cross-checking their consistency.
In this paper, we explore a uniﬁcation of the two approaches to
remote ﬁle-integrity assurance in a system that we call HAIL (High-
Availability and Integrity Layer).
HAIL manages ﬁle integrity and availability across a collection
of servers or independent storage services. It makes use of PORs
as building blocks by which storage resources can be tested and re-
allocated when failures are detected. HAIL does so in a way that
transcends the basic single-server design of PORs and instead ex-
ploits both within-server redundancy and cross-server redundancy.
HAIL relies on a single trusted veriﬁer—e.g., a client or a service
acting on behalf of a client—that interacts with servers to verify the
integrity of stored ﬁles. (We do not consider a clientless model in
which servers perform mutual veriﬁcation, as in distributed infor-
mation dispersal algorithms such as [16, 17, 8, 20].)
HAIL offers the following beneﬁts:
Strong ﬁle-intactness assurance: HAIL enables a set of servers
to prove to a client via a challenge-response protocol that a stored
187ﬁle F is fully intact—more precisely, that the client can recover F
with overwhelming probability. HAIL protects against even small,
e.g., single-bit, changes to F .
Low overhead: The per-server computation and bandwidth re-
quired for HAIL is comparable to that of previously proposed PORs.
Apart from its use of a natural ﬁle sharing across servers, HAIL im-
proves on PORs by eliminating check values and reducing within-
server ﬁle expansion.
Strong adversarial model: HAIL protects against an adversary
that is active, i.e., can corrupt servers and alter ﬁle blocks and mo-
bile, i.e., can corrupt every server over time.
Direct client-server communication: HAIL involves one-to-one
communication between a client and servers. Servers need not
intercommunicate—or even be aware of other servers’ existence.
(In comparison, some information dispersal algorithms involve server-
to-server protocols, e.g., [16, 17, 8, 20].) The client stores just a
secret key.
Static ﬁle protection: HAIL protects static stored objects, such
as backup ﬁles and archives. Constructing protocols to accommo-
date ﬁle updates, i.e., to provide integrity assurance for dynamically
changing objects, is left to future work.
Our two broad conceptual contributions in HAIL are:
Security modeling. We propose a strong, formal model that
involves a mobile adversary, much like the model that motivates
proactive cryptographic systems [22, 21]. A mobile adversary is
one capable of progressively attacking storage providers—and in
principle, ultimately corrupting all providers at different times.
None of the existing approaches to client-based ﬁle-integrity ver-
iﬁcation treats the case of a mobile adversary. We argue that the
omission of mobile adversaries in previous work is a serious over-
sight.
In fact, we claim that a mobile adversarial model is the
only one in which dynamic, client-based veriﬁcation of ﬁle integrity
makes sense. The most common alternative model is one in which
an adversary (static or adaptive) corrupts a bounded number of
servers. As real-world security model for long-term ﬁle storage,
this approach is unduly optimistic: It assumes that some servers are
never corrupted. More importantly, though, an adversarial model
that assumes a ﬁxed set of honest servers for all time does not re-
quire dynamic integrity checking at all: A robust ﬁle encoding can
guarantee ﬁle recovery irrespective of whether or not ﬁle corrup-
tions are detected beforehand.
HAIL design strategy: Test-and-Redistribute (TAR). HAIL
is designed like a proactive cryptographic system to withstand a
mobile adversary. But HAIL aims to protect integrity, rather than
secrecy.
It can therefore be reactive, rather than proactive. We
base HAIL on a new protocol-design strategy that we call TAR
(Test-And-Redistribute). With TAR, the client uses PORs to detect
ﬁle corruption and trigger reallocation of resources when needed—
and only when needed. On detecting a fault in a given server via
challenge-response, the client communicates with the other servers,
recovers the corrupted shares from cross-server redundancy built in
the encoded ﬁle, and resets the faulty server with a correct share.
Our TAR strategy reveals that for many practical applications,
PORs and PDPs are overengineered. PORs and PDPs assume a
need to store explicit check values with the prover. In a distributed
setting like that for HAIL, it is possible to obtain such check values
from the collection of service providers itself. On the other hand,
distributed protocols for checking ﬁle availability are largely under-
engineered: Lacking robust testing and reallocation, they provide
inadequate protection against mobile adversaries.
Three main coding constructions lie at the heart of HAIL:
Dispersal code: In HAIL, we use what we call a dispersal code
for robustly spreading ﬁle blocks across servers. For the disper-
sal code in HAIL, we propose a new cryptographic primitive that
we call an integrity-protected error-correcting code (IP-ECC). Our
IP-ECC construction draws together PRFs, ECCs, and universal
hash functions (UHFs) into a single primitive. This primitive is an
error-correcting code that is, at the same time, a corruption-resilient
MAC on the underlying message. The additional storage overhead
is minimal—basically just one extra codeword symbol.
(cid:2)) = hκ(m + m
(cid:2)
(cid:2)) for messages m and m
In a nutshell, our IP-ECC is based on three properties of (certain)
universal hash function families h: (1) h is linear, i.e., hκ(m) +
hκ(m
and key κ; (2) For
a pseudorandom function family (PRF) g, the function hκ(m) +
gκ(cid:2) (m) is a cryptographic message-authentication code (MAC) on
m; and (3) hκ(m) may be treated as a parity block in an error-
correcting code applied to m.
Server code: File blocks within each server are additionally en-
coded with an error-correcting code that we call a server code. This
code protects against the low-level corruption of ﬁle blocks that
may occur when integrity checks fail. (For efﬁciency, our server
code is a computational or “adversarial” error-correcting code as
deﬁned in Bowers et al. [6].)
Aggregation code: HAIL uses what we call an aggregation code
to compress responses from servers when challenged by the client.
It acts across multiple codewords of the dispersal code. One feature
of the aggregation code is that it combines / aggregates multiple
MACs in our IP-ECC into a single composite MAC. This composite
MAC veriﬁes correctly only if it represents a combination of valid
MACs on each of the aggregated codewords.
Note that while the aggregation code is built on an error-correcting
code, it is computed as needed, and thus imposes no storage or ﬁle-
encoding overhead.
Organization. We review related work in Section 2. We give an
overview of the HAIL construction and its main technical ingredi-
ents in Section 3. We introduce our adversarial model in Section 4
and describe technical building blocks for HAIL in Section 5. The
details of the HAIL protocol are described in Section 6, and its se-
curity properties in Section 7. We give implementation results in
Section 8 and conclude in Section 9.
2. RELATED WORK
HAIL may be viewed loosely as a new, service-oriented version
of RAID (Redundant Arrays of Inexpensive Disks). While RAID
manages sector redundancy dynamically across hard-drives, HAIL
manages ﬁle redundancy across cloud storage providers. Recent
multi-hour failures in S3 illustrate the need to protect against ba-
sic service failures in cloud environments. In view of the rich tar-
gets for attack that cloud storage providers will present, HAIL is
designed to withstand Byzantine adversaries. (RAID is mainly de-
signed for crash-recovery.)
Information dispersal. Distributed information dispersal algo-
rithms (IDA) that tolerate Byzantine servers have been proposed [16,
17, 8, 20]. In these algorithms, ﬁle integrity is enforced within the
pool of servers itself. Some protocols protect against faulty clients
that send inconsistent shares to different servers [17, 8, 20]. In con-
trast, HAIL places the task of ﬁle-integrity checking in the hands of
the client or some other trusted, external service. Unlike previous
work, which veriﬁes integrity at the level of individual ﬁle blocks,
HAIL provides assurance at the granularity of a full ﬁle. This dif-
ference motivates the use of PORs in HAIL, rather than block-level
integrity checks.
188Universal Hash Functions. Our IP-ECC primitive fuses sev-
eral threads of research that have emerged independently. At the
heart of this research are Universal Hash-Functions (UHFs). (In
the distributed systems literature, common terms for variants of
UHFs are algebraic signatures [31] or homomorphic ﬁngerprint-
ing [20].) UHFs can be used to construct message-authentication
codes (MAC) [19, 4, 14] (see [28] for a performance evaluation
of various schemes). In particular, a natural combination of UHFs
with pseudorandom functions (PRFs) yields MACs.
PORs and PDPs. Juels and Kaliski (JK) [23] formally deﬁne
PORs and propose a POR protocol that only supports a limited
number of challenges. Shacham and Waters (SW) [32] offer al-
ternative constructions based on the idea of storing block integrity
values that can be aggregated to reduce the communication com-
plexity of a proof. They construct symmetric-key POR protocols
based on the UHF + PRF paradigm and publicly veriﬁable PORs
based on publicly veriﬁable homomorphic authenticators.
In concurrent and independent work, Bowers et al. [6] and Dodis
et al. [12] give frameworks for POR protocols that generalize the
JK and SW protocols. Both papers propose the use of an error-
correcting code in computing server responses to challenges with
the goal of ensuring ﬁle extraction through the challenge-response
interface. The focus of [12] is mostly theoretical in providing ex-
traction guarantees for adversaries replying correctly to an arbitrary
small fraction of challenges. In contrast, Bowers et al. consider
POR protocols of practical interest (in which adversaries with high
corruption rates are detected quickly) and show different parameter
tradeoffs when designing POR protocols.
Ateniese et al. [2] propose a closely related construction called
a proof of data possession (PDP). A PDP detects a large fraction
of ﬁle corruption, but does not guarantee ﬁle retrievability. Subse-
quent work gives ﬁle update protocols in the PDP model [3, 13].
Curtmola et al. [11] proposed an extension of PDPs to multiple
servers. Their proposal essentially involves computational cost re-
duction through PDP invocations across multiple replicas of a sin-
gle ﬁle, rather than a share-based approach. Earlier closely related
constructions to PORs and PDPs include [15, 33, 27].
Distributed protocols for dynamic ﬁle-integrity checking. Lillib-
ridge et al. [25] propose a distributed scheme in which blocks of a
ﬁle F are dispersed across n servers using an (n, m)-erasure code.
Servers spot-check the integrity of one another’s fragments using
message authentication codes (MACs).
Schwartz and Miller (SM) [31] propose a scheme that ensures
ﬁle integrity through distribution across multiple servers, using error-
correcting codes. They employ keyed algebraic encoding and stream-
cipher encryption to detect ﬁle corruptions. Their keyed encoding
function is equivalent to a Reed-Solomon code in which codewords
are generated through keyed selection of symbol positions. We
adopt some ideas of simultaneous MACing and error-correcting in
our HAIL constructions, but we deﬁne the construction rigorously
and prove its security properties.
Proactive cryptography. Our adversarial model is inspired by
the literature on proactive cryptography initiated by [22], which has
yielded protocols resilent to mobile adversaries for secret sharing
(e.g., [22, 7]) as well as signature schemes (e.g., [21]). In previous
proactive systems, key compromise is a silent event; consequently,
these systems must redistribute shares automatically and provide
protections that are proactive. Corruption of a stored ﬁle, however,
is not a silent event.
It results in a change in server state that a
veriﬁer can detect. For this reason, HAIL can rely on remediation
that is reactive. It need not automatically refresh ﬁle shares at each
interval, but only on detecting a fault.
3. HAIL OVERVIEW
In this section, we present the key pieces of intuition behind
HAIL. We start with simple constructions and build up to more
complex ones.