# 七、Docker 仓库
概观
在本章中，您将学习 Docker 如何管理数据。知道将数据存储在哪里以及您的服务将如何访问数据是至关重要的。本章将探讨运行无状态和有状态 Docker 容器，并将深入研究不同应用的存储配置设置选项。到本章结束时，您将能够区分 Docker 中的不同存储类型，并识别容器的生命周期及其各种状态。您还将学习如何创建和管理 Docker 卷。
# 简介
在前几章中，您学习了如何从映像运行容器以及如何配置其网络。您还了解到，在从映像制作容器时，您可以传递各种 Docker 命令。在本章中，您将学习如何在创建容器后控制它们。
假设您被指派为电子商店构建一个 web 应用。您将需要一个数据库来存储产品目录、客户信息和购买交易。要存储这些详细信息，您需要配置应用的存储设置。
Docker 中有两种类型的数据存储。第一个是与容器生命周期紧密耦合的存储。如果容器被移除，该存储类型上的文件也将被移除，并且无法检索。这些文件存储在容器内部的精简读/写层中。这种类型的存储也称为其他术语，例如本地存储、`graphdriver`存储和存储驱动程序。本章的第一节重点介绍这种类型的存储。这些文件可以是任何类型的，例如，Docker 在基本映像上安装新图层后创建的文件。
本章的第二部分探讨无状态和有状态服务。有状态的应用是需要持久存储的应用，例如持久存储并且比容器更持久的数据库。在有状态服务中，即使容器被移除，数据仍然可以被访问。
容器以两种方式在主机上存储数据:通过卷和绑定装载。不建议使用绑定装载，因为绑定装载会将主机上的现有文件或目录绑定到容器内的路径。这种绑定通过使用主机上的完整或相对路径增加了引用负担。但是，当您使用卷时，会在主机上 Docker 的存储目录中创建一个新目录，Docker 会管理该目录的内容。我们将在本章的第三部分集中讨论如何使用卷。
在 Docker 中探索不同类型的存储之前，让我们先来探索一下容器的生命周期。
# 容器生命周期
容器是由它们的基本映像制作的。该容器通过在映像层栈的顶部创建一个薄读/写层来继承映像的文件系统。基本映像保持不变，不会对其进行任何更改。您的所有更改都发生在容器的顶层。比如说你创建一个`ubuntu: 14.08`的容器。此映像中没有`wget`包。当你安装`wget`软件包时，你实际上是把它安装在顶层。所以，你有一个基础映像层，在它上面，还有一个`wget`层。
如果你也安装`Apache`服务器，它将是前两层之上的第三层。要保存所有更改，您需要将所有这些更改提交到一个新的映像，因为您不能覆盖基本映像。如果不将更改提交到新映像，这些更改将随着容器的移除而被删除。
容器在其生命周期中会经历许多其他状态，因此查看容器在其生命周期中可能具有的所有状态非常重要。因此，让我们深入了解不同的容器状态:
![Figure 7.1: Container life cycle ](img/B15021_07_01.jpg)
图 7.1:容器生命周期
容器经历的不同阶段如下:
*   使用`docker container run`子命令，容器进入`CREATED`状态，如图*图 7.1* 所示。
*   在每个容器内部，都有一个主进程在运行。当该过程开始运行时，容器的状态变为`UP`状态。
*   使用`docker container pause`子命令，容器的状态变为`UP(PAUSED)`。容器冻结或暂停，但仍处于`UP`状态，且未停止或移除。
*   要继续运行容器，请使用`docker container unpause`子命令。在这里，容器的状态将再次变为`UP`状态。
*   使用`docker container stop`子命令停止容器，但不将其移除。容器的状态变为`EXITED`状态。
*   如果执行`docker container kill`或`docker container stop`子命令，容器将退出。要杀死容器，使用`docker container kill`子命令。容器状态变为`EXITED`。但是，要退出容器，应该使用`docker container stop`子命令，而不是`docker container kill`子命令。不要杀死你的容器；一定要删除它们，因为删除容器会触发容器的宽限关闭，例如，给时间将数据保存到数据库，这是一个较慢的过程。但是，killing 不会这样做，可能会导致数据不一致。
*   停止或终止容器后，也可以继续运行容器。要启动容器并将其返回到`UP`状态，请使用`docker container start`或`docker container start -a`子命令。`docker container start -a`等于跑`docker container start`再跑`docker container attach`。不能将本地标准输入、输出和错误流附加到已退出的容器；容器必须首先处于`UP`状态，以附加本地标准输入、输出和错误流。
*   要重新启动容器，请使用`docker container restart`子命令。重启子命令的作用类似于执行`docker container stop`后跟`docker container start`。
*   Stopping or killing the container does not remove the container from the system. To remove the container entirely, use the `docker container rm` subcommand.
    注意
    您可以将几个 Docker 命令相互连接起来，例如`docker container rm -f $(docker container ls -aq)`。您想首先执行的那个应该包含在括号中。
    在这种情况下，`docker container ls -aq`告诉 Docker 在安静模式下列出所有容器，甚至是退出的容器。`-a`选项表示显示所有容器，无论它们的状态如何。`-q`选项用于安静模式，这意味着只显示数字标识，而不是所有容器的详细信息。该命令`docker container ls -aq`的输出将是`docker container rm -f`命令的输入。
理解 Docker 容器生命周期事件为为什么一些应用可能需要或可能不需要持久存储提供了一个很好的背景。在进入 Docker 中呈现的不同存储类型之前，让我们执行前面提到的命令，并在下面的练习中探索不同的容器状态。
注意
请使用`touch`命令创建文件，使用`vim`命令使用 vim 编辑器处理文件。
## 练习 7.01:通过 Docker 容器的公共状态进行转换
ping www.google.com 是验证服务器或集群节点是否连接到互联网的常见做法。在本练习中，您将遍历 Docker 容器的所有状态，同时检查服务器或集群的节点是否连接到互联网。
在本练习中，您将使用两个终端。一个终端将用于运行一个容器来 ping www.google.com，另一个终端将用于通过执行前面提到的命令来控制这个正在运行的容器。
要 ping www.google.com，您将根据`ubuntu:14.04`映像制作一个名为`testevents`的容器:
1.  Open the first terminal and execute the `docker container run` command to run a container. Use the `--name` option to give the container a specific nickname—for example, `testevents`. Don't let the Docker host generate a random name for your container. Use the `ubuntu:14.04` image and the `ping google.com` command to verify that the server is running on the container:
    ```
    $docker container run --name testevents ubuntu:14.04 ping google.com
    ```
    输出如下:
    ```
    PING google.com (172.217.165.142) 56(84) bytes of data.
    64 bytes from lax30s03-in-f14.1e100.net (172.217.165.142):
    icmp_seq=1 ttl=115 time=68.9 ms
    64 bytes from lax30s03-in-f14.1e100.net (172.217.165.142):
    icmp_seq=2 ttl=115 time=349 ms
    64 bytes from lax30s03-in-f14.1e100.net (172.217.165.142):
    icmp_seq=3 ttl=115 time=170 ms
    ```
    正如您在前面的输出中看到的，ping 已经开始。你会发现数据包正在传输到`google.com`。
2.  Dedicate the first terminal to the pinging output. Now, control this container by executing the commands in another terminal. In the second terminal, execute `docker container ls` to list all the running containers:
    ```
    $docker container ls
    ```
    寻找名为`testevents`的容器。状态应为`Up`:
    ```
    CONTAINER ID    IMAGE           COMMAND            CREATED
       STATUS           PORTS          NAMES
    10e235033813     ubuntu:14.04   "ping google.com"  10 seconds ago
       Up 5 seconds                    testevents
    ```
3.  Now, run the `docker container pause` command in the second terminal to pause the running container in the first terminal:
    ```
    $docker container pause testevents
    ```
    您将看到 being 已经停止，不再传输任何数据包。
4.  List the running containers again by using `docker container ls` in the second terminal:
    ```
    $docker container ls
    ```
    如下图所示，`testevents`的状态为`Up(Paused)`。这是因为你先前运行了`docker container pause`命令:
    ```
    CONTAINER ID    IMAGE         COMMAND            CREATED
       STATUS            PORTS          NAMES
    10e235033813    ubuntu:14.04  "ping google.com"  26 seconds ago
       Up 20 seconds (Paused)           testevents
    ```
5.  Use `docker container unpause` in the second terminal to start the paused container and make it resume sending packets:
    ```
    $docker container unpause testevents
    ```
    您会发现 ping 会恢复，新数据包会在第一个终端中传输。
6.  In the second terminal, run the `docker container ls` command again to see the container's current status:
    ```
    $docker container ls
    ```
    您会看到`testevents`容器的状态为`Up`:
    ```
    CONTAINER ID    IMAGE         COMMAND            CREATED
       STATUS            PORTS          NAMES
    10e235033813    ubuntu:14.04  "ping google.com"  43 seconds ago
       Up 37 seconds                    testevents
    ```
7.  Now, run the `docker container stop` command to stop the container:
    ```
    $docker container stop testevents
    ```
    您将看到容器在第一个终端退出，shell 提示符返回:
    ```
    64 bytes from lax30s03-in-f14.1e100.net (142.250.64.110):
    icmp_seq = 42 ttl=115 time=19.8 ms
    64 bytes from lax30s03-in-f14.1e100.net (142.250.64.110):
    icmp_seq = 43 ttl=115 time=18.7 ms
    ```
8.  Now, run the `docker container ls` command in any terminal:
    ```
    $docker container ls
    ```
    您将看到`testevents`容器不再在列表中，因为`docker container ls`子命令仅显示正在运行的容器:
    ```
    CONTAINER ID      IMAGE      COMMAND     CREATED
            STATUS         PORTS                   NAMES
    ```
9.  Run the `docker container ls -a` command to display all the containers:
    ```
    $docker container ls -a
    ```
    可以看到`testevents`容器现在的状态是`Exited`:
    ```
    CONTAINER ID    IMAGE         COMMAND            CREATED
       STATUS            PORTS          NAMES
    10e235033813    ubuntu:14.04  "ping google.com"  1 minute ago
       Exited (137) 13 seconds ago      testevents
    ```
10.  Use the `docker container start` command to start the container. Also, add the `-a` option to attach local standard input, output, and error streams to the container and see its output:
    ```
    $docker container start -a testevents
    ```
    正如您在下面的代码片段中看到的，ping 会继续，并在第一个终端中执行:
    ```
    64 bytes from lax30s03-in-f14.1e100.net (142.250.64.110):
    icmp_seq = 55 ttl=115 time=63.5 ms
    64 bytes from lax30s03-in-f14.1e100.net (142.250.64.110):
    icmp_seq = 56 ttl=115 time=22.2 ms
    ```
11.  Run the `docker ls` command again in the second terminal:
    ```
    $docker container ls
    ```
    你会观察到`testevents`返回列表，状态为`Up`，正在运行:
    ```
    CONTAINER ID    IMAGE         COMMAND            CREATED
       STATUS            PORTS          NAMES
    10e235033813    ubuntu:14.04  "ping google.com"  43 seconds ago
       Up 37 seconds                    testevents
    ```
12.  Now, remove the `testevents` container using the `rm` command with the `-f` option. The `-f` option is used to force-remove the container:
    ```
    $docker container rm -f testevents
    ```
    第一个终端停止执行`ping`命令，第二个终端返回容器名称:
    ```
    testevents
    ```
13.  Run the `ls -a` command to check whether the container is running or not:
    ```
    $docker container ls -a
    ```
    你不会在列表中找到`testevents`容器，因为我们刚刚从系统中删除了它。
    现在，除了`CREATED`，你已经看到了容器的所有各种状态。这是典型的，因为你通常看不到`CREATED`状态。在每个容器中，都有一个主进程，其**进程标识(PID)** 为 0，**父进程标识(PPID)** 为 1。该进程在容器外有不同的标识。当此进程被终止或移除时，容器也会被终止或移除。通常，当主进程运行时，容器的状态从`CREATED`变为`UP`，这表明容器已经成功创建。如果主进程失败，容器状态不会从`CREATED`改变，这就是你要设置的:
14.  Run the following command to see the `CREATED` status. Craft a container named `testcreate` from the `ubuntu:14.04` image using the `docker container run` command:
    ```
    $docker container run --name testcreate ubuntu:14.04 time
    ```
    `time`命令会产生错误，因为`ubuntu:14.04`里面没有这样的命令。
15.  Now, list the running containers:
    ```
    $docker container ls
    ```
    您会看到列表是空的:
    ```
    CONTAINER ID    IMAGE         COMMAND            CREATED
       STATUS            PORTS          NAMES
    ```
16.  Now, list all the containers by adding the `-a` option:
    ```
    $docker container ls -a
    ```
    在列表中查找名为`testcreate`的容器；你会观察到它的状态是`Created`:
    ```
    CONTAINER ID    IMAGE         COMMAND         CREATED
       STATUS            PORTS          NAMES
    C262e6718724    ubuntu:14.04  "time"          30 seconds ago
       Created                          testcreate
    ```
    如果容器卡在`CREATED`状态，这表明已经产生错误，Docker 无法启动容器并运行。
在本练习中，您探索了容器生命周期及其不同状态。您还学习了如何使用`docker container start -a `命令从附件开始，以及如何使用`docker container rm `停止容器。最后，我们讨论了如何使用`docker container rm -f `强制移除正在运行的容器。然后，我们看到了`CREATED`的罕见情况，只有当命令产生错误，容器无法启动时才会显示。
到目前为止，我们关注的是容器的状态，而不是它的大小。在下一个练习中，我们将学习如何确定容器占用的内存大小。
## 练习 7.02:检查磁盘上的容器大小
当您第一次制作一个容器时，它的大小与带有顶部读/写层的基础映像相同。随着添加到容器中的每一层，其大小都会增加。在本练习中，您将创建一个以`ubuntu:14.04`为基础映像的容器。更新并在其顶部安装`wget`，以突出状态转换对数据保留的影响:
1.  Run the `docker container run` command with the `-it` option to create a container named `testsize`. The `-it` option is used to have an interactive terminal to run commands inside the running container:
    ```
    $docker container run -it --name testsize ubuntu:14.04
    ```
    该提示现在看起来像`root@:/#`，其中容器标识是 Docker 引擎生成的一个数字。因此，当您在机器上运行此命令时，您将有一个不同的数字。如前所述，在容器内意味着容器将处于`UP`状态。
2.  Dedicate the first terminal to the running container and execute the commands in the second terminal. Having two terminals saves us from detaching the container to run a command and then reattaching to the container to run another command inside it.
    现在，验证容器最初具有基础映像的大小，即`ubuntu:14.04`。使用第二个终端中的`docker image ls`命令列出映像。检查`ubuntu:14.04`映像的大小:
    ```
    $docker image ls
    ```
    在下面的输出中可以看到，映像的大小为`188MB`:
    ```
    REPOSITORY     TAG      IMAGE ID         CREATED
      SIZE
    ubuntu         14.04    971bb3841501     23 months ago
      188MB
    ```
3.  Now, check the size of the container by running the `docker container ls -s` command to get the container's size:
    ```
    $docker container ls -s