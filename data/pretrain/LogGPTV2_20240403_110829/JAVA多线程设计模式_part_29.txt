writer.println(s);
try 
java.io.FileWriter;
catch (loException e) f
é,printStackTrace(};
writer = new Printwriter(new FileWriter("log.txt"));
单线程用的 Log 类（Logjava)
范例程序1的类图（没有使用 Thread-Specific Storage Patterm）
Haia
Uses.
close
println
riter
---
## Page 291
隔约100毫秒)。结果如图11-2和图11-3所示。
Main类
Main类（List 11-2）会使用 Log 文件，慢慢地输出 0~9的数字到log 文件（间
public class Main {
Eist 11-2
 public static void main(string[] args)
END
BEGIN
public static void close() ↑
System.out.println("END");
System.out.printlr("BEGIN");
Log.close();
for (int i = 0; i < 10: i++)
writer.closei);
try t
Main 类(Main.java)
一约100毫秒×10=约1秒后显示
catch (InterruptedException e) {
Thread.sleep(100);
=== End of log ====
main: i =
main: i
main:
main:
mair:
main:
main:
main:
main: i =
图 11-3产生的 log 文件（log.txt）的内容
i
T-
Thread-Specific Storage-——-每个线程的保管箱
9
图11-2执行结果
L
5
2
1
一
第11章
---
## Page 292
JHNR公线精液冲模式
类（List 11-3)。
的类。名称应该取为 ThreadSpecificLog类，不过太长了，所以在这里命名为TSLog
线程特有的 TSLog类
意思：
明如表11-2所示，
是要写出程序能够自动区分线程，将字符串写入正确的 Iog 文件里的机制。类的说
而是要像范例程序1一样，只要机械式地在方法里调用Log-println 就好了。我们就
不过，输出log的时候，我们希望与范例文件！一样，只写下面的语句：
串输出到log文件log.txt里而：
Main
ClientThread
 java.lang.ThreadLocal
Log
TSLog
接下来要写的范例程序 2，则是要将不同线程的字符串写到不同的 log 文件里。
使用 Thread-Specific Storage Pattern 的范例
范例程序2：
首先，在这里范例程序1的Log 类为依据，建立用来输出线程特有的log 记录
图11-5的类中所画的{sequential}限制，表示“逐一执行（以单线程执行）”的
前面的范例程序 1，并没有什么特别的内容。只不过调用 println 方法，将字符
也就是说，我们并不是建立·个扩充Thread的类，加上PrintWrtier实例的字段：
时序图如图11-4所示。
名
操作溯试用的类别
调用 Log 的线程
用来建立线程特有的空间
产生log的类（进行分配线程的工作）
产生log的类（实例由每个线程所拥有）
表11-2范例程序2的类一览表
:..in
说
:Log
---
## Page 293
static..}的初始化操作就改到构造器里进行，类图如图11-5所示。
log文件”为前提设计的。
而 TSLog类则要对每个线程建立“个实例，所以要建立实例字段与实例方法。
public class TSLog f
impcrt java.io.IoException;
import
impcrt java.io.PrintWriter;
List 11.3
public TsLog(String filename)
private PrintWriter writer = null;
//初始化writer字段
Starts 
java.io.FileWriter;
try 
图11-5范例程序2 的类图（使用 Thread-Specific Storage Patterm）
catch (IQException e) [
writer = new PrintWriter(new Filewriter(filename)):
é.printStackTrace(};
TSLog 类(TSLog.java)
二二
实例3个
CllentThread
以现在的线程为键值。
 Thread-Specific Storage--
 11 1s
3uses
getTSLog (concurrent
Println (concwrent}
tsLogCollection
thread.
object 
Gers/sets
：
Decific
java.lang.Thread
Writer
一每个线程的保管箱
closelsequential!
println {sequential]
local
TSLog
Managesi
11章
---
## Page 294
280
Log类
（println和close）都-·样，可是实现却相差很多。
ThreadLocal();
public class Lcg { 
List 11-4
private static final
private static TSLog getTsLogi) f
/！取得线程特有的log
public static void ciosei) {
/！关闭log
public static void printin(string s) 1
//加入一条log
public void closei)
//关闭log
public void println(String s) (
TSLog tslog = (TsLog)tsLogcollection.get();
getrslogf),close();
getTsLog().println(s);
//如果线程是第一次调用，就建立新文件并注册10g
writer.println(s);
writer.close();
Log 类(Log.java)
 null} {
ThreadLocal
tsLogCollection = new
---
## Page 295
法所作的事改在 run 方法里。
的Main类（List I1-2）比较。
ClientThread 类 
命名为“线程的名称-log.txt"。
tsLogCollection。这就像线程第
目前还没有放入任何东西——也就是第一-次使用。
程
需要将线程名称作为参数传入 getTSLog里。
getTSLogForAlice、getTSLogForBobby、getTSLogForChris 之类的方法。另外，也不
线
这个 tsLogCollection字段，就像是用来储藏每个线程的TSLog 实例的保管箱一样。
支持单线程。
都将工作委托给这个 writer。这个 writer 对Log 类只有1个，所以范例程序1只能
为
（TSLog的实例）是白己（线程）所拥有的。
第一次进来保管箱间，所以打开自己的保管箱，
了检查现在这条线程是不是第-·次调目 getTSLog。如果返回值是null，就像是线
在第－次调用 getTSLog 的时候，程序会产生新的 TSLog 实例，set 给
程，所以不需要为不同线程定义不同的方法。也就是不需要定义
而范例程序 2 的 Log 类，具有 java.lang.ThreadLocal 类型的类字段（tsLogCollection）。
ClientThread（List 1l-5）是使用 Log,printlin 与 Log.close 的线程。请与范例
getTSLog 里，使用if 语句检查 tsLogCollection.get 的返回值是不是 mull。这是
getTSLog 做的操作，就像是从保管箱里取出白己的行李一样。取出的行李
 public class ClientThread extends Thread ↑
getTSLog 的返回值，会因为调用这个方法的线程不同而更改。因为会自动判断
gctTSLog方法，可以取得线程特有的 TSLog 实例。
范例程序2中，println与jclose 方法也都把工作委托给 getTSLogO的返回值。
范例程序1的Log类，具有 PrintWriter类型的类字段（writer）。println 与 close
"-log.txt"); 
List 11-5
 public ClientThread(String name) 1
return tsLog;
tsLogCollectiun,set(tsLog);
 ClientThread 类 (ClientThread.java)
。相信读者看的出来，只不过是把与 Main类的 main 方
Thread-Specific Storage--
次把自己的行李放进保管箱里。这时，将 log文件
当然是“空”的。空的，就表示
一每个线程的保管箱
11章
---
## Page 296
的TSLog 对象的样子。虽然3条线程都是调用 Log 类的同一个方法，但实际上使
282
Chris)。
Main类
图1I-7表示 Alice、Bobby、Chris 三条 ClientThread 通过 Log 类使用线程特有
执行结果如图11-6 所示。
 public class Main ↑
范例程序 2 的 Main类(List 11-6)启动了3条 ClientThread 的线程(Alice、Bobby,
List:11-6
Bobby END
Chris END
Alice
Chris
Bobby BEGIN
Alice BEGIN
public static void main(string[] args)
public void run() f
[ew ClientThread("Alice").start();
new(
rew
System.out.println(getName() + " END");
Log.close();
System.out.printin(getName () + " BFGIN"):
BEGIN
for (int i = 0; i < 10; i++)
super(name};
END
ClientThread"chris"). start ();
ClientThread("Bobby") .start ()
Main 类(Main.java)
（T+=T")uTuTId·o
ry i
Catch (Interrupteitxception e) {
Thread.sleep(i00);
图!1-6执行结果
---
## Page 297
TSObject 参与者。而 setTSObject 方法被调用时，则在对照表里设置 Client 参与者
与TSObject参与者的纠合，
TSOGjectCollection（线程独有对象的集合）参易者
者可由多个Client 参与者一起使用。
Client（委托人）参易者
的是每个线程独自的TSLog实例：
上 Thread-Specific 实在太元长，所以都省略成 TS）：
TSObjectProxy（线程独有对象的代理者）参与者
Thread-Specific Storage Pattern 的所有参与者
范例程序 2 中i，TSObjectCollection 参与者是 java.lang.ThreadLocal 类。
当 getTSObject 方法被调用时，就检查对照表，返回 Client 参与者所对应的
范例程序2丰，TSObjectProxy参与者是Log类。
范例程序2中，Client 参与者是ClientThread类。
Client 参与者会将工作委托给 TSObjectProxy 参与者。
TSObjectCollection 参与者拥有 Client 参与者与 TSObject 参与者的对照表。
首先，TSObjectProxy 参与j者会使用 TSObjectCollection 参与者，取得Client 参
TSObjectProxy参与者会处理多个Client参与者委托的工.作。
请与范例程序1的时序图（图11-4）加以比较。
图 11-7范例程序 2的时序图（使用 Thread-Specific Storage Pattem）
Chria:CliontThread
Alice:ClientThread
"·.
Thread-Specific Storage--
:Log
:ThreadLocal
:TsLog
个 TSObjectProxy 参与
一每个线程的保管箱
第11年
·-加
2
---
## Page 298
 TSOhjert (线程独有的对象) 参与者
只会由单线程调用。
TS-Thred-Specic 为
类图如图11-8所示。
范例程序2，TSObject 参与者是TSLog类。
TSObject 参与者由 TSObjectCollection 参与者所管理。 TSObject 参与者的方法
TSObject 参与者存放有线程特有的信息，
（线程独白）之略
Cllent
--·. . ---
n Uses
图 I1-8  Thread-Specfic Storage Pattern 的类图
IT
以现在的线程为键值，
request3 concurrent;
request2(concurrent;
get'setTSObject参与者
requestl {concurrent}
多个
Gets/sets
m是Client参与者的个数（等于
TSObjcct参与者的个数)
 setTSObject
getTSObjcet
requcstl, request2, rcquest
 TSObjectCollection
Cliem参与者）使用
只会山单线程
request3 (concurrent)
request2(concurrent)
requestl {concurrent)
TSObject
manages
---
## Page 299
4
的TSObject参与者
本书中，TSObjectProxy 参与者拥有1个TSObjectCollection 参与者。而以
注意：本书所介绍的 Thread-Specific Storage Pattern，与附录E[POSA2]实现的
图 1I-10 则是多个Client 参与者使用自己专用的TSObject 参与者时的样子。
第一次以后调用
图 11-9是第--次调用TSObjectProxy 参与者时，建立新 TSObject 参与者时的样
图 11-9Thread-Specific Storage Patlerm 的顺序图（建立新的 TSObject 参与者）
方式不同。
:Client
Isanbal
request
Thread-Specific Storage———每个线程的保管箱
TSObieet
Proxy
”→
—
1
getTSObject
TSObject
new
.....
L.
Isanban
IT
TSObtiet
Collenction
-----
request
单11幕
---
## Page 300
局部变量，都是线程所独有，无法由其他线程访问。但是，这些变量一退出方法就
局部变量与 java.lang.ThreadLocal 类
286
类就是TSObjectProxy参与j者：