以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 单线程使用的 Log 类 (Log.java)

#### 范例程序1的类图（未使用 Thread-Specific Storage Pattern）

```java
public class Main {
    public static void main(String[] args) {
        System.out.println("BEGIN");
        try (PrintWriter writer = new PrintWriter(new FileWriter("log.txt"))) {
            for (int i = 0; i < 10; i++) {
                writer.println("main: i = " + i);
                Thread.sleep(100); // 暂停约100毫秒
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("END");
    }
}
```

- **执行结果**：程序会每隔约100毫秒输出一个数字到 `log.txt` 文件中，总共输出10个数字。大约1秒后显示“END”。

- **生成的日志文件内容**：
  ```
  BEGIN
  main: i = 0
  main: i = 1
  main: i = 2
  main: i = 3
  main: i = 4
  main: i = 5
  main: i = 6
  main: i = 7
  main: i = 8
  main: i = 9
  END
  ```

---

### 使用 Thread-Specific Storage Pattern 的范例

#### 范例程序2的类一览表

- **TSLog 类 (TSLog.java)**：每个线程特有的日志记录类。
- **Log 类 (Log.java)**：管理线程特有的 TSLog 实例。
- **ClientThread 类 (ClientThread.java)**：使用 Log 类进行日志记录的线程。

#### TSLog 类 (TSLog.java)

```java
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class TSLog {
    private PrintWriter writer;

    public TSLog(String filename) throws IOException {
        writer = new PrintWriter(new FileWriter(filename));
    }

    public void println(String s) {
        writer.println(s);
    }

    public void close() {
        if (writer != null) {
            writer.close();
        }
    }
}
```

#### Log 类 (Log.java)

```java
import java.lang.ThreadLocal;

public class Log {
    private static final ThreadLocal<TSLog> tsLogCollection = new ThreadLocal<>();

    public static void println(String s) {
        getTsLog().println(s);
    }

    public static void close() {
        getTsLog().close();
    }

    private static TSLog getTsLog() {
        TSLog tsLog = tsLogCollection.get();
        if (tsLog == null) {
            try {
                tsLog = new TSLog(Thread.currentThread().getName() + "-log.txt");
                tsLogCollection.set(tsLog);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return tsLog;
    }
}
```

#### ClientThread 类 (ClientThread.java)

```java
public class ClientThread extends Thread {
    public ClientThread(String name) {
        super(name);
    }

    @Override
    public void run() {
        System.out.println(getName() + " BEGIN");
        try {
            for (int i = 0; i < 10; i++) {
                Log.println(getName() + ": i = " + i);
                Thread.sleep(100); // 暂停约100毫秒
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(getName() + " END");
        Log.close();
    }
}
```

#### Main 类 (Main.java)

```java
public class Main {
    public static void main(String[] args) {
        new ClientThread("Alice").start();
        new ClientThread("Bobby").start();
        new ClientThread("Chris").start();
    }
}
```

- **执行结果**：程序会启动三个线程（Alice, Bobby, Chris），每个线程会在自己的日志文件中记录0到9的数字，每个数字之间间隔约100毫秒。

- **生成的日志文件内容**：
  - `Alice-log.txt`
    ```
    Alice: i = 0
    Alice: i = 1
    Alice: i = 2
    Alice: i = 3
    Alice: i = 4
    Alice: i = 5
    Alice: i = 6
    Alice: i = 7
    Alice: i = 8
    Alice: i = 9
    ```
  - `Bobby-log.txt`
    ```
    Bobby: i = 0
    Bobby: i = 1
    Bobby: i = 2
    Bobby: i = 3
    Bobby: i = 4
    Bobby: i = 5
    Bobby: i = 6
    Bobby: i = 7
    Bobby: i = 8
    Bobby: i = 9
    ```
  - `Chris-log.txt`
    ```
    Chris: i = 0
    Chris: i = 1
    Chris: i = 2
    Chris: i = 3
    Chris: i = 4
    Chris: i = 5
    Chris: i = 6
    Chris: i = 7
    Chris: i = 8
    Chris: i = 9
    ```

---

### Thread-Specific Storage Pattern 的参与者

- **TSObject 参与者**：每个线程独有的对象（如 TSLog）。
- **TSObjectProxy 参与者**：处理多个客户端委托的工作（如 Log 类）。
- **TSObjectCollection 参与者**：管理客户端与线程独有对象的对照表（如 ThreadLocal）。
- **Client 参与者**：调用 TSObjectProxy 参与者的方法（如 ClientThread）。

#### 时序图

![时序图](图11-7.png)

- **第一次调用**：创建新的 TSObject 参与者并设置到 TSObjectCollection 中。
- **后续调用**：从 TSObjectCollection 中获取已存在的 TSObject 参与者。

---

### 局部变量与 `java.lang.ThreadLocal` 类

- **局部变量**：每个线程独有的变量，退出方法后即失效。
- **`java.lang.ThreadLocal` 类**：提供线程本地存储，允许每个线程拥有独立的变量实例。

通过这种方式，我们可以确保每个线程在访问共享资源时不会相互干扰，从而实现线程安全的日志记录。