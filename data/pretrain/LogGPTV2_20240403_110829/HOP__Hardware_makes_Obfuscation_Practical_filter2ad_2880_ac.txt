of passing to the token the correct and fresh encrypted state
as well as fresh values of memory reads, a malicious receiver
can pass old values.5 The receiver can also mix-and-match
values from entirely different executions of the same program
or different programs. The rest of the section outlines how to
prevent the above attacks. We remark that while the below have
simple ﬁxes, the problems themselves are easy to overlook and
underscore the need for a careful formal analysis. Indeed, we
discovered several of these issues while working through the
security proof itself.
5Here is a possible attack by which the adversary can distinguish between
two access patterns. Consider the access pattern {a, a} i.e., accessing the
same block consecutively. If a tree-based ORAM [49] is used, after the ﬁrst
access, the block is remapped to a new path l(cid:48) and the new path l(cid:48) would be
subsequently accessed. If the adversary rewinds and executes again, the block
may be mapped to a different path l(cid:48)(cid:48). Thus, for two different executions, two
different paths (l(cid:48) and l(cid:48)(cid:48)) are accessed for the second access. Note that for
another access pattern {a, b} for a (cid:54)= b, the same paths would be accessed
even after rewinding, thus enabling the adversary to distinguish between access
patterns.
Preventing mix-and-match. To prevent this attack, we en-
force that the receiver must submit an encrypted state state,
corresponding to an execution at some point t, along with a
matching read from time t for the same execution. To achieve
this, observe that state is encrypted with a IND-CPA + INT-
CTXT-secure authenticated encryption scheme, and that the
state carries all necessary information to authenticate the next
memory read. The state contains information unique to the
speciﬁc program, the speciﬁc program execution, and to the
speciﬁc instruction that the token expects.
Preventing rewinding during program execution. An ad-
versary may try to gain more information by rewinding an
execution to a previous time step, and replaying it from
that point on. To prevent an adversary from learning more
information in this way, we make sure that the token simply
replays an old answer should rewinding happen — this way,
the adversary gains no more information by rewinding. To
achieve this, we make sure that any execution for a (program,
inp) pair is entirely deterministic no matter how many times
you replay it. All randomness required by the token (e.g., those
required by the ORAM or memory checker) are generated
pseudorandomly based on the tuple (K, HS, HR) where K is
a secret key hardwired in the token, HR is a commitment to
the receiver’s input and HS := digest(mem0) is a Merkle root
of the program.
Preventing rewinding during input insertion. In our setting,
the obfuscated program’s inputs inp are chosen by the receiver.
Since inputs can be long, it may not be possible to submit the
entire input in one shot. As a result, the receiver has to submit
the input word by word. Therefore the malicious receiver may
rewind to a point in the middle of the input submission, and
change parts of the input in the second execution. Such a
rewinding causes two inputs to use the same randomness for
some part of the execution.
To prevent such an input rewinding attack, we require
that the adversary submit a Merkle tree commitment HR :=
digest(inp) of its input inp upfront, before submitting a long
input word by word. HR uniquely determines the rest of
the execution, such that any rewinding will effectively cause
the token to play old answers (as mentioned above), and the
adversary learns nothing new through rewinding.
IV. FORMAL SCHEME
We now give a formal model for the fully optimized HOP
processor (i.e., including all subsections in Section III) and
prove its security in UC framework. Section IV-A describes the
preliminaries. Section IV-B describes the ideal functionality
for obfuscation of RAM programs. Sections IV-C and IV-D
describe our formal scheme and proof in the UC framework.
A. Preliminaries
The notations used in this section are summarized in
Table I. We denote the assignment-operator with :=, while we
use = to denote equality. Encryption of data is denoted by an
overline, e.g., state = EncK(state), where Enc denotes a IND-
CPA + INT-CTXT-secure authenticated encryption scheme and
K is the key used for encryption.
6
TABLE I: Notations
K
mem0
inp
mem
outp
(cid:96)in, (cid:96)out, w
N
T
RAM.params
oramstate
sstorestate
HR
HS
(cid:48)
H
Hardwired secret key stored by the token
A program as a list of instructions
Input to the program
Memory required for program execution
Program output
Bit-lengths of input, output, and memory word
Number of words in memory
Time for program execution
{T, N, (cid:96)in, (cid:96)out, w}
State stored by ORAM
State stored by sstore
Digest of receiver’s input, i.e., digest(inp)
Digest of sender’s program, i.e., digest(mem0)
Merkle root of the main memory
Universal Composability framework. The Universal Com-
posability framework [10] considers two worlds – 1. real
world where the parties execute a protocol π. An adversary A
controls the corrupted parties. 2. ideal world where we assume
the presence of a trusted third party. The parties interact with
a trusted third party (also called ideal functionality F) with
a protocol φ. A simulator S tries to mimic the actions of A.
Intuitively, the amount of information revealed by π in the real
world should not be more than what is revealed by interacting
with the trusted third party in the ideal world. In other words,
we have the following: an environment E observes one of the
two worlds and guesses the world. Protocol π UC-realizes ideal
functionality F if for any adversary A there exists a simulator
S, such that an environment E cannot distinguish (except with
negligible probability) whether it is interacting with S and φ
or with A and π.
Random Access Machines. We now give deﬁnitions for
Random Access Machine (RAM) programs, a basic processor
model for RAM programs. Let RAM[Π, T, N, (cid:96)in, (cid:96)out, w]
denote a family of RAM programs with the following public
parameters: Π denotes the next instruction circuit; T denotes
the number of steps the program will be executed; w denote
the bit-width of a memory word; and N, (cid:96)in and (cid:96)out denote
the memory, input and output lengths respectively (in terms of
number of words).
We consider programs RAM := (cid:104)cpustate, mem(cid:105) ∈
RAM[Π, T, N, (cid:96)in, (cid:96)out, w]
to be a tuple, where cpustate
denotes the CPU’s initial internal state, and mem denotes an
initial memory array. In these programs, for each step of the
execution, the next instruction function is executed over the
old cpustate and the most recently fetched w bit memory word
denoted rdata:
(cpustate, op) := Π(cpustate, rdata)
As a result, cpustate is updated, and a next read/write instruc-
tion op is fetched. Initially, rdata is set to 0.
On input inp, the execution of RAM[T, N, (cid:96)in, (cid:96)out, w] :=
(cid:104)Π, cpustate, mem(cid:105) is deﬁned as the following:
7
rdata := 0
mem[1..(cid:96)in] := inp
for t ∈ [1, 2, . . . , T ]:
(cpustate, op) := Π(cpustate, rdata)
if op = (write, addr, wdata)
else if op = (read, addr,⊥)
mem[addr] := wdata
rdata := mem[addr]
Output rdata
// rdata stores the output
For notational simplicity, we assume that output length
is small and can be stored in rdata. However, our
(cid:96)out
results can be extended easily to larger values of (cid:96)out. For
succinctness, we denote (T, N, (cid:96)in, (cid:96)out, w) by RAM.params.
Wherever its clear from context, we abuse notation to denote
RAM[Π, T, N, (cid:96)in, (cid:96)out, w] as RAM.
Oblivious RAM. Let mem denote a memory array that
supports two types of operations: a) On (read, addr),
it
outputs mem[addr]; b) On (write, addr, wdata),
it sets
:= wdata, and outputs ⊥. In this paper, we
mem[addr]
deﬁne an Oblivious RAM as a stateful, probabilistic algorithm
that interacts with a memory array mem. It is denoted as
ORAMN,w where N and w are public parameters denoting
the memory capacity in terms of number of words, and the
bit-width of a word. mem denotes the initial state of the
memory, where all but the ﬁrst N locations are set to 0.
An ORAM converts memory contents mem to mem(cid:48). An
ORAM takes two types of inputs: op := (read, addr), and
op := (write, addr, wdata). After receiving input opi, ORAM
interacts with mem(cid:48), and produces read/write operations into
mem(cid:48) as output, denoted by (cid:126)opi. These operations (cid:126)opi implic-
itly deﬁne memory contents of mem.
We say that an ORAM algorithm is correct, if for any n, for
any input sequence (op1, . . . , opn), ORAM outputs correctly.
In other words, the memory contents of mem implicitly deﬁned
by mem(cid:48) after execution of ( (cid:126)op1, . . . , (cid:126)opn) is identical to the
memory contents of mem deﬁned by executing (op1, . . . , opn)
on mem. We say that an ORAM scheme ORAM is oblivious
if there exists a polynomial-time simulator Sim such that
time adversary A can distinguish between
no polynomial
the transcript of the real ORAM execution and a simulated
transcript that Sim outputs. Sim is given only N and w, even
when the simulated memory access are provided one-by-one
to A.
Remark: ORAM initialization. In this paper, we assume an
ORAM starts out with a memory array where the ﬁrst N
words are non-zero (reﬂecting the initial unshufﬂed memory),
followed by all zeros. Most ORAM schemes require an initial-
ization procedure to shufﬂe the initial memory contents. In this
paper, we assume that the ORAM algorithm performs a linear
scan of ﬁrst N memory locations and inserts them into ORAM.
This is used by the simulator in our proof to extract the input
used for execution of the program. We use the convention that
such initialization is performed by the ORAM algorithm upon
the ﬁrst read or write operation — therefore our notation does
not make such initialization explicit. This also means that the
ﬁrst ORAM operation will incur a higher overhead than others.
FRAM
obf
[sender, receiver ]
On receive (“create”, RAM) from sender for the ﬁrst time:
Create a unique nonce denoted pid
Store (pid, RAM), send (“create”, pid) to receiver
On receive (“execute”, pid, inp) from receiver:
assert (pid, RAM) is stored for some RAM
outp := RAM(inp), send outp to receiver
obf
Fig. 2: Ideal Functionality FRAM
. Although there can be
multiple instances of this ideal functionality, we omit writing
the session identiﬁer explicity without risk of ambiguity. In
this paper, we adopt the same UC notational conventions as
Pass, Shi, and Tramer [44]. In particular, we parametrize each
functionality and protocol by its session identiﬁer, and the
identiﬁers of the parties involved — although in this paper,
we omit writing the session identiﬁer explicitly without risk
of ambiguity.
B. FRAM
obf
: Modeling Obfuscation in UC
The ideal functionality for obfuscation FRAM
is described
in Figure 2. The sender sends the description of a RAM
program, RAM ∈ RAM and a program ID pid, using the
“create” query. The functionality stores this program, pid, the
sender and receiver. When the receiver invokes “execute” query
on an input inp, it evaluates the program on inp, and returns
output outp.
obf
C. Scheme Description
obf
sender. Let
We now provide the complete description of our scheme.
the secure hardware token through the Ftoken
We model
functionality (Figure 3). Our construction realizes FRAM
in
the Ftoken-hybrid model [27] and is described in Figure 4.
In order to account for all possible token queries that may
be required for an ORAM scheme, Ftoken relies on an internal,
transient instance of Finternal
to execute each step of the
program evaluation. Each time Ftoken yields control to the
receiver, the entire state of Finternal is destroyed. Whenever
the receiver calls back Ftoken with state, Ftoken once again
creates a new, transient instance of Finternal, sets its state to
the decrypted state, and invokes Finternal to execute next step.
The
the program to be obfuscated be
RAM := (cid:104)cpustate0, mem0(cid:105) where mem0 is a list of program
instructions. The sender ﬁrst creates the token containing a
hardwired secret key K where K := (K1, K2, K3). K1 is
used as the encryption key for encrypting state, K2 is used as
the key to a pseudorandom function used by the ORAM and
K3 is used as the key for a pseudorandom function used by
sstore (described later). This is modeled by our functionality
using the “store key” query (Figure 4 line 1). The sender
then encrypts mem0 (one instruction at a time) to obtain
mem0. It creates a Merkle root HS := digest(mem0), which
is used by Ftoken during execution to verify integrity of the
program. The sender creates an encrypted header header :=
EncK1(cpustate0, HS, RAM.params) where RAM.params =
{T, N, (cid:96)in, (cid:96)out, w}. The sender sends header, mem0, and
RAM.params as the obfuscated program to the receiver. As the
obfuscated program consists of only the encrypted program
and metadata, for a program of size P bits, the obfuscated
program has size P + O(1) bits. In the real world, the sender
sends the hardware token implementing functionality Ftoken
to the receiver. The receiver can use the same stateless token
to execute multiple obfuscated programs sent by the sender.
Ftoken [sender, receiver ]
// Store the secret key K in the token
On receive (“store key”, K) from sender:
Store the secret key K, ignore future “store key” inputs
Send “done” to sender
// This step commits the receiver to his input through HR
On receive (“initialize”, header, HR) from receiver:
Parse K := (K1, K2, K3)
(cpustate0, HS, RAM.params) := DecK1(header); abort
if fail
state := {ssid := (HS, HR), time := 0,
rdata := 0, cpustate := cpustate0,
sstorestate := (“init”, HS, HR, H(cid:48) := 0),
oramstate := “init”, params := RAM.params}
send state := EncK1(state) to receiver
On receive ( ) from Finternal: // ORAM queries
state := EncK1(Finternal.state)
send ( , state) to receiver
On receive ( , state) from receiver: // ORAM queries
state := DecK1 (state), abort if fail
Instantiate a new instance Finternal,
set Finternal.state := state, and Finternal.K := K
Send
to Finternal