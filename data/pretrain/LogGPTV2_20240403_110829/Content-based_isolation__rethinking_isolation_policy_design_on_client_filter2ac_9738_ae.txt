applications.
This work follows up on our earlier position paper on Ser-
viceOS [50].
Other isolation policies. SubOS [22] observed that
each (remote) data object needs to be rendered with a dif-
ferent principal label, called a sub-user id. SubOS includes a
browser [21] which puts each URL page in a separate SubOS
process. The SubOS’s isolation policy is ﬁxed and can be
Figure 8: Memory committed for increasing instances of
Wordpad. Each new instance loads a 10MB document.
116 bytes
1MB 10MB
Windows (.NET program)
Windows (WinInet program)
ServiceOS, no Drawbridge
ServiceOS, with Drawbridge
3ms
1ms
15ms
16ms
98ms
297ms
124ms
156ms
924ms
1337ms
955ms
1017ms
Table 3: Overhead of fetching content of various sizes.
a chart embedded in an Excel spreadsheet from same owner
would stay in the same process. We can see that we impose
no signiﬁcant penalty for opening documents from the same
owner, but documents from diﬀerent owners (using diﬀerent
processes) do carry a sizable memory overhead. However,
most of it comes from (1) Drawbridge, and (2) loading Ex-
cel’s add-in libraries, which adds 47MB for each new process.
We could address (1) by picking a more eﬃcient isolation
mechanism, and improve (2) with native source-code mod-
iﬁcation, as exempliﬁed by Wordpad which only adds 9MB
for 10 instances.
ServiceOS’s monitor and shell have little memory foot-
print, using 31.4MB of memory at worst during our tests.
Content fetch APIs. We measured the time it takes
our IE renderer to use our Fetch() API to retrieve three
documents of various sizes from a web server on a 100Mbps
local network, and compared to two popular ways Windows
programs retrieve content today: using .NET’s native Http-
WebRequest class, and using the WinInet library in Win-
dows (recall that ServiceOS’s implementation of HTTP also
uses .NET’s HttpWebRequest). Table 3 shows our results.
We ﬁnd that ServiceOS introduces some latency for pass-
ing content to renderers, but that overhead is amortized for
larger document sizes. For example, for a 10MB document,
ServiceOS is only 3% (31ms) slower than a native .NET pro-
gram, excluding the 62ms of Drawbridge overhead. Most of
this is due to extra IPCs to ServiceOS monitor and unop-
timized buﬀering. Interestingly, .NET’s HTTP library out-
performs WinInet for larger documents; the margin is large
enough to mask ServiceOS’s overhead. Thus, native Win-
dows applications that used WinInet may actually encounter
faster content fetch with ServiceOS.
We also evaluated the overhead of various new headers
we introduced for content fetch in Sections 4 and 5, and
found that it is negligible. For example, verifying a signature
in the Owner header with a 1024-bit public key adds only
about 1.5ms to each content fetch roundtrip, enforcing the
dispatch-to directive takes less than 1ms, and parsing and
verifying trust lists takes less than 1ms even when checking
whether a document can be admitted to a PI with 100 other
documents, with all documents having 101-entry trust lists.
010020030040050012345678910Memory Size  (MB) Windows (multi-process)ServiceOS (multi-process)ServiceOS (Drawbridge)1177too ﬁne-grained for many content owners. In contrast, we
enable isolation policies of arbitrary granularity while being
compatible with web.
PinUP [14] advocates an isolation policy that restricts
which applications may access a particular local ﬁle. Un-
like ServiceOS, PinUP does not isolate mutually distrusting
ﬁles opened by a single application.
COP [7] proposes to extend the same-origin policy by let-
ting web content specify new origins using unique origin IDs;
this bears some similarity to our owner-ID-based labeling
proposal. Although COP’s goals are similar to our principal
labeling goals (Section 4.2), COP’s origin ID management
is complex and may involve HTML and JavaScript modiﬁ-
cation, which we do not require for web sites in our system.
COP does not support native applications or browser plug-
ins, whereas our system’s primary goal is to oﬀer a general-
ized policy and to support both web and native applications.
Isolation mechanisms. Many mechanisms [33, 53, 12,
38, 47, 15, 29, 3, 26] have been developed to conﬁne applica-
tions. Usually, these approaches either require applications
to formulate their own security policies, resulting in many
inconsistent policies coexisting on the system, or they put
this burden on administrators. Our work deﬁnes a uniform
isolation policy as deﬁned by the content-based principal
model and shifts its enforcement to the OS. We also needed
to design new mechanisms for specifying (Section 4) and
enforcing (Section 5) the principal deﬁnitions.
Object-capability systems and DIFC techniques [42, 54,
13, 27] can be used to implement isolation mechanisms. Re-
alizing our principal model on these systems is an area of
future research.
9. CONCLUSION
We advocate a content-based principal model in which the
operating system relieves applications from the burden of
isolating remotely addressable content, boosting the security
of both user’s data and the system by localizing the impact
of any content including malicious content. Our key contri-
bution is to generalize web browsers’ same-origin policy into
an isolation policy suitable for all applications while main-
taining compatibility with the web. To this end, we have in-
vented content processing stacks to conceptualize execution
instances and introduced a general principal model that en-
ables ﬂexible isolation granularities using public-key-based
owner IDs or trust lists to deﬁne principals. For principal
deﬁnition enforcement (beyond robust isolation container
design), we introduced the dispatch bit for cross-principal
content fetch and dispatch.
We have built a substantial prototype system and adapted
to it a number of real-world applications, such as Word, Ex-
cel, and Outlook. Our vulnerability study indicates that
exploits against more than 80% of vulnerabilities of popular
software can be contained. We have demonstrated that real-
world exploits’ impact can indeed be isolated in our system,
and our performance evaluation shows that our system is
practical. From these experiences, we believe that content-
based isolation policy is indispensable for future client plat-
forms where applications increasingly interface with cloud-
backed content.
10. ACKNOWLEDGEMENTS
We thank Barry Bond, Galen Hunt, and Reuben Olinsky
for their help with Drawbridge integration. We thank Chris
Hawblitzel for his valuable feedback on our paper draft. We
thank Bill Barlowe for his help with our vulnerability anal-
ysis.
11. REFERENCES
[1] Adobe Secure Software Engineering Team. Inside
Adobe Reader Protected Mode. http:
//blogs.adobe.com/asset/tag/protected-mode.
[2] Adobe Security Bulletin Search.
http://www.adobe.com/support/security/.
[3] AppArmor Application Security for Linux.
http://www.novell.com/linux/security/apparmor/.
[4] A. Barth. The web origin concept. Internet-Draft,
http://tools.ietf.org/html/draft-abarth-
origin-09, 2010.
[5] A. Barth, C. Jackson, and J. C. Mitchell. Robust
defenses for cross-site request forgery. In To appear at
the 15th ACM Conference on Computer and
Communications Security (CCS 2008), 2008.
[6] Build FAQ for OpenOﬃce.org.
http://www.openoffice.org/FAQs/build_faq.html.
[7] Y. Cao, V. Rastogi, Z. Li, Y. Chen, and A. Moshchuk.
Redeﬁning web browser principals with a conﬁgurable
origin policy. In DSN, 2013.
[8] T. Close. Decentralized identiﬁcation.
http://www.waterken.com/dev/YURL/.
[9] C. Collberg, J. H. Hartman, S. Babu, and S. K.
Udupa. Slinky: static linking reloaded. In USENIX
ATC, 2005.
[10] R. S. Cox, J. G. Hansen, S. D. Gribble, and H. M.
Levy. A safety-oriented platform for web applications.
In IEEE Symposium on Security and Privacy, 2006.
[11] Content security policy (csp).
https://wiki.mozilla.org/Security/CSP/Spec.
[12] J. R. Douceur, J. Elson, J. Howell, and J. R. Lorch.
Leveraging legacy code to deploy desktop applications
on the web. In OSDI, 2008.
[13] P. Efstathopoulos, M. Krohn, S. VanDeBogart,
C. Frey, D. Zieglar, E. Kohler, D. Mazieres,
F. Kaashoek, and R. Morris. Labels and Event
Processes in the Asbestos Operating System. In
SOSP, 2005.
[14] W. Enck, P. McDaniel, and T. Jaeger. Pinup: Pinning
user ﬁles to known applications. In ACSAC, 2008.
[15] I. Goldberg, D. Wagner, R. Thomas, and E. A.
Brewer. A secure environment for untrusted helper
applications. In USENIX Security, 1996.
[16] Google Cloud Connect for Microsoft Oﬃce.
http://tools.google.com/dlpage/cloudconnect.
[17] GreenBorder. www.google.com/greenborder/.
[18] C. Grier, S. Tang, and S. T. King. Secure web
browsing with the OP web browser. In Proceedings of
the IEEE Symposium on Securiy and Privacy, 2008.
[19] J. Howell, B. Parno, and J. Douceur. Embassies:
Radically refactoring the web. In NSDI, 2013.
[20] G. Hunt and J. Larus. Singularity: Rethinking the
Software Stack. In Operating Systems Review, April
2007.
1178[21] S. Ioannidis and S. M. Bellovin. Building a secure web
browser. In Proceedings of the FREENIX Track: 2001
USENIX Annual Technical Conference, 2001.
[22] S. Ioannidis, S. M. Bellovin, and J. M. Smith.
Sub-operating systems: A new approach to application
security. In SIGOPS European Workshop, 2002.
[23] C. Jackson. Improving browser security policies. PhD
thesis, Stanford University, CA, 2009.
[24] C. Jackson and A. Barth. Beware of Finer-Grained
Origins. In Web 2.0 Security and Privacy, May 2008.
[38] D. E. Porter, S. Boyd-Wickizer, J. Howell, R. Olinsky,
and G. C. Hunt. Rethinking the library OS from the
top down. In ASPLOS, 2011.
[39] Programming application-level add-ins.
http://msdn.microsoft.com/en-
us/library/bb157876.aspx.
[40] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, and
H. J. Wang. User-driven access control: Rethinking
permission granting in modern operating systems. In
IEEE Symposium on Security and Privacy, 2012.
[25] C. Karlof, J. Tygar, D. Wagner, and U. Shankar.
[41] J. Ruderman. The Same-Origin Policy.
Dynamic Pharming Attacks and Locked Same-Origin
Policies for Web Browsers. In CCS, 2007.
http://www.mozilla.org/projects/security/
components/same-origin.html.
[26] T. Kim and N. Zeldovich. Making Linux protection
[42] J. S. Shapiro and S. Weber. Verifying the eros
mechanisms egalitarian with UserFS. In Usenix
Security, aug 2010.
[27] M. Krohn, A. Yip, M. Brodsky, N. Cliﬀer, M. F.
Kaashoek, E. Kohler, and R. Morris. Information
Flow Control for Standard OS Abstractions. In 21st
Symposium of Operating Systems Principles, 2007.
[28] E. Lawrence. XDomainRequest - Restrictions,
Limitations and Workarounds.
http://blogs.msdn.com/b/ieinternals/archive/
2010/05/13/xdomainrequest-restrictions-
limitations-and-workarounds.aspx.
[29] P. Loscocco and S. Smalley. Integrating ﬂexible
support for security policies into the Linux operating
system. In Proceedings of the 2001 USENIX Annual
Technical Conference, 2001.
[30] Microsoft. Protected View in Oﬃce 2010.
http://blogs.technet.com/b/office2010/archive/
2009/08/13/protected-view-in-office-2010.aspx.
[31] Microsoft. Remote desktop protocol.
msdn.microsoft.com/en-
us/library/cc240445(PROT.10).aspx.
[32] Microsoft. Windows Internet API.
msdn.microsoft.com/en-
us/library/aa385331(VS.85).aspx.
[33] Microsoft. Windows Vista Integrity Mechanism
Technical Reference.
http://msdn.microsoft.com/en-
us/library/bb625964.aspx.
[34] Microsoft security bulletins and advisories: MS10-087,
MS10-079, MS10-103. http://www.microsoft.com/
technet/security/current.aspx.
conﬁnement mechanism. In IEEE Symposium on
Security and Privacy, 2000.
[43] Shatter Attacks - How to break Windows.
http://www.thehackademy.net/madchat/vxdevl/
papers/winsys/shatter.html.
[44] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee. On
the incoherencies in web browser access control
policies. In IEEE Symposium on Security and Privacy,
2010.
[45] S. Tang, H. Mai, and S. T. King. Trust and protection
in the Illinois Browser Operating System. In OSDI,
2010.
[46] A. van Kesteren. Cross-origin resource sharing. W3C
Working Draft, http://www.w3.org/TR/cors/, 2010.
[47] R. Wahbe, S. Lucco, T. E. Anderson, and S. L.
Graham. Eﬃcient software-based fault isolation. In
SOSP, 1993.
[48] H. J. Wang, X. Fan, J. Howell, and C. Jackson.
Protection and Communication Abstractions in
MashupOS. In ACM Symposium on Operating System
Principles, October 2007.
[49] H. J. Wang, C. Grier, A. Moshchuk, S. T. King,
P. Choudhury, and H. Venter. The Multi-Principal OS
Construction of the Gazelle Web Browser. In USENIX
Security, 2010.
[50] H. J. Wang, A. Moshchuk, and A. Bush. Convergence
of Desktop and Web Applications on a Multi-Service
OS. In HotSec, 2009.
[51] T. Wobber, A. Yumerefendi, M. Abadi, A. Birrell, and
D. R. Simon. Authorizing Applications in Singularity.
In Eurosys, March 2007.
[35] MS Oﬃce 2010 RTF Header Stack Overﬂow
[52] XMLHttpRequest Level 2.
Vulnerability.
http://www.exploit-db.com/exploits/17474/.
http://www.w3.org/TR/XMLHttpRequest/.
[53] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth,
[36] P. Muncaster. How We Found the File That Was Used
to Hack RSA. http://www.f-
secure.com/weblog/archives/00002226.html,
August 2011.
T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar.
Native client: A sandbox for portable, untrusted x86
native code. In IEEE Symposium on Security and
Privacy, 2009.
[37] L. Popa, A. Ghodsi, and I. Stoica. Http as the narrow
[54] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and
waist of the future internet. In HotNets, Monterey,
CA, 2010.
D. Mazi`eres. Making information ﬂow explicit in
HiStar. In 7th Symposium on Operating Systems
Design and Implementation, 2006.
1179