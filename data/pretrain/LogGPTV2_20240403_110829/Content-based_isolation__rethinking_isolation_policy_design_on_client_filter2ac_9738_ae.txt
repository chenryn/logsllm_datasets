# Applications and Isolation Policies

This work builds upon our earlier position paper on ServiceOS [50]. In this section, we will discuss other isolation policies and mechanisms, as well as the performance and memory overhead of our system.

## Other Isolation Policies

### SubOS
SubOS [22] introduces a policy where each remote data object is assigned a unique principal label, known as a sub-user ID. This ensures that each URL page is rendered in a separate SubOS process. The isolation policy in SubOS is fixed and cannot be modified. For example, a chart embedded in an Excel spreadsheet from the same owner would remain within the same process. Our approach does not impose significant penalties for opening documents from the same owner, but documents from different owners (using different processes) do carry a notable memory overhead. Most of this overhead is due to:

1. **Drawbridge**: Adds 62ms of latency.
2. **Loading Excel’s add-in libraries**: Adds 47MB per new process.

We can mitigate these issues by:
- Using a more efficient isolation mechanism.
- Modifying the native source code, as demonstrated by Wordpad, which only adds 9MB for 10 instances.

### PinUP
PinUP [14] proposes an isolation policy that restricts which applications can access specific local files. Unlike ServiceOS, PinUP does not isolate mutually distrusting files opened by a single application.

### COP
COP [7] extends the same-origin policy by allowing web content to specify new origins using unique origin IDs. While COP's goals are similar to our principal labeling goals (Section 4.2), its origin ID management is complex and may require HTML and JavaScript modifications. COP does not support native applications or browser plugins, whereas our system aims to offer a generalized policy for both web and native applications.

## Isolation Mechanisms

Several mechanisms [33, 53, 12, 38, 47, 15, 29, 3, 26] have been developed to confine applications. These approaches either require applications to define their own security policies, leading to inconsistencies, or place the burden on administrators. Our work defines a uniform isolation policy based on the content-based principal model and shifts enforcement to the OS. We also designed new mechanisms for specifying (Section 4) and enforcing (Section 5) principal definitions.

### Object-Capability Systems and DIFC Techniques
Object-capability systems and DIFC techniques [42, 54, 13, 27] can be used to implement isolation mechanisms. Adapting our principal model to these systems is an area of future research.

## Performance Evaluation

### Memory Overhead
Figure 8 illustrates the memory committed for increasing instances of Wordpad, with each new instance loading a 10MB document. The memory footprint of ServiceOS’s monitor and shell is minimal, using 31.4MB at most during our tests.

### Content Fetch APIs
We measured the time it takes for our IE renderer to use our Fetch() API to retrieve three documents of various sizes from a web server on a 100Mbps local network. We compared this to two common methods used by Windows programs: .NET’s HttpWebRequest class and the WinInet library. Table 3 shows our results.

| Document Size | Windows (.NET program) | Windows (WinInet program) | ServiceOS, no Drawbridge | ServiceOS, with Drawbridge |
|---------------|------------------------|---------------------------|--------------------------|----------------------------|
| 116 bytes     | 3ms                    | 1ms                       | 15ms                     | 16ms                       |
| 1MB          | 98ms                   | 297ms                     | 124ms                    | 156ms                      |
| 10MB         | 924ms                  | 1337ms                    | 955ms                    | 1017ms                     |

ServiceOS introduces some latency for passing content to renderers, but this overhead is amortized for larger document sizes. For a 10MB document, ServiceOS is only 3% (31ms) slower than a native .NET program, excluding the 62ms of Drawbridge overhead. This is primarily due to extra IPCs to the ServiceOS monitor and unoptimized buffering.

Interestingly, .NET’s HTTP library outperforms WinInet for larger documents, masking ServiceOS’s overhead. Therefore, native Windows applications that used WinInet may actually experience faster content fetch with ServiceOS.

### New Headers Overhead
We evaluated the overhead of the new headers introduced for content fetch in Sections 4 and 5. The overhead is negligible. For example:
- Verifying a signature in the Owner header with a 1024-bit public key adds about 1.5ms.
- Enforcing the dispatch-to directive takes less than 1ms.
- Parsing and verifying trust lists takes less than 1ms, even when checking if a document can be admitted to a PI with 100 other documents, all having 101-entry trust lists.

## Conclusion

We advocate a content-based principal model where the operating system relieves applications from isolating remotely addressable content, enhancing the security of both user data and the system. Our key contribution is generalizing the web browser's same-origin policy into an isolation policy suitable for all applications while maintaining web compatibility. We have built a substantial prototype system and adapted several real-world applications, such as Word, Excel, and Outlook. Our vulnerability study indicates that over 80% of popular software vulnerabilities can be contained, and our performance evaluation shows that our system is practical.

## Acknowledgements

We thank Barry Bond, Galen Hunt, and Reuben Olinsky for their help with Drawbridge integration. We also thank Chris Hawblitzel for his valuable feedback on our paper draft and Bill Barlowe for his assistance with our vulnerability analysis.

## References

[References listed as provided]

---

This version of the text is more structured, coherent, and professional, with clear headings and a logical flow of information.