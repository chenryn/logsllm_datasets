# 密码破解和审计
这是渗透测试中最有趣的部分之一！坐在后面喝杯咖啡，享受密码刷屏几个小时。我是hashcat 的舔狗，所以本文将详细介绍如何使用hashcat。John 是一个可选的替代方案，如果通过用散列与彩虹表进行比较来破解，可以使用Orphcrack，但是我还不打算在本指南中详细介绍它们。
---
## Hashcat
一些有用的链接
* [FAQ](https://hashcat.net/wiki/doku.php?id=frequently_asked_questions#how_can_i_show_previously_cracked_passwords_and_output_them_in_a_specific_format_eg_emailpassword)
* [命令行参数](https://hashcat.net/wiki/doku.php?id=hashcat)
* [hashat 模式码](https://hashcat.net/wiki/doku.php?id=example_hashes)
* [Hashview, hashcat的web前端](http://www.hashview.io/screenshots.html)
Hashcat可以用GPU破解各种哈希。在这些例子中，最需要破解的是NTLM哈希、Kerberost tickets 和其他您可能偶然发现的东西，比如 Keepass 数据库。其目标自然是尽量快地破解，你会看到一堆垃圾密码。我强烈建议搞一个牛X点的GPU，这样就开心许多。即使我的GTX 1060 3GB并不咋地，我还是用它破解NTLM。
最基本的 hashcat 攻击是基于字典。意思就是为字典中的每个条目计算哈希，并与要破解的哈希进行比较。hashcat语法很好理解，但你需要知道hashcat的各种“modes”的用法，这些可以在上面的实用链接部分有。为了快速查找，我在下面列出一些在 AD 环境中最常用的。
| mode | 哈希 | 描述 |
| ------------ | --------------- | ------------------------------- |
| 1000 | NTLM | 很常见，用于一般域身份验证 |
| 1100 | MsCache | 老版本的域缓存凭据 |
| 2100 | MsCache v2 | 新版本的域缓存凭据 |
| 3000 | LM | 很少用，也是老版本（仍然是NTLM的一部分）|
| 5500 | NetNTLMv1 / NetNTLMv1+ESS | 通过网络进行身份验证的NTLM |
| 5600 | NetNTLMv2 | 通过网络进行身份验证的NTLM |
| 7500 | Kerberos 5 AS-REQ Pre-Auth etype 23 | AS_REQ 是 Kerberoas 的初始用户身份认证请求 |
| 13100 | Kerberos 5 TGS-REP etype 23 | TGS_REP 是票据授权服务器(TGS)对先前请求的回复 |
### 字典攻击
对字典攻击来说，字典的质量是最重要的。它可以很大，可以覆盖很大范围。这对于像 NTLM 这种破解代价很低散列很有用，但是对于像 MsCacheV2 这种很难破解的散列来说，您通常希望基于 OSINT 和某些假设或枚举（比如密码策略）得到更精炼的列表，并应用规则。
这是一个使用世界著名字典 rockyou 进行字典破解的例子。
```bash
hashcat64.exe -a 0 -m 1000 ntlm.txt rockyou.txt
```
这种方法的局限性和所有字典攻击一样，如果字典里没有正确的密码，就不能破解。于是就有了基于规则的破解。
### 基于规则的破解
规则就是对单词进行不停额修改，比如剪切或者扩展单词，或者添加一些字母特殊字符之类的。跟字典破解一样，这也需要一个很大的规则列表，基于规则的攻击基本上类似于字典攻击，但是增加了一些对单词的修改，这自然增加了我们能够破解的哈希。
hashcat有一些自带的规则，比如dive。但是人们已经使用统计数据来尝试生成更高效的破解规则。本文详细描述了一个名为 [One Rule to Rule Them All](https://www.notsosecure.com/one-rule-to-rule-them-all/) 的规则集，可以从Github上下载。我用这个规则已经取得了很大的成功，而且统计数据证明它是非常好的。如果想用更少的规则更快地破解，那么 hashcat 中有很多内置的规则，比如 best64.rule。使用 best64 规则集y运行rockyou
```bash
hashcat64.exe -a 0 -m 1000 -r ./rules/best64.rule ntlm.txt rockyou.txt
```
这里你可以把字典和规则都尝试下，只要你的gpu和散热足够屌，你就可以上天。
在破解一定数量的哈希之后，将破解的密码输出到一个文件里.
`--out-file 2` 表示只输出密码。
```
hashcat64.exe -a 0 -m 1000 ntlm.txt rockyou.txt --outfile cracked.txt --outfile-format 2
Recovered........: 1100/2278 (48.28%)
```
继续以破解的密码作为单词列表再次破解，并设置一个大规则集以恢复更多密码。你可以这样循环几次，这样你可以用这个技术破解大量密码。
```bash
hashcat64.exe -a 0 -m 1000 ntlm.txt cracked.txt -r .\rules\OneRuleToRuleThemAll.rule
​
Recovered........: 1199/2278 (52.63%)
​
hashcat64.exe -a 0 -m 1000 ntlm.txt cracked.txt -r .\rules\dive.rule
​
Recovered........: 1200/2278 (52.68%)
```
使用 .pass_2a(90GB) 字典和 .uleulethemall 规则集的究极攻击。
```bash
hashcat64.exe -a 0 -m 1000 ntlm.txt weakpass_2a.txt -r .\rules\oneruletorulethem.rule
```
### 掩码攻击
尝试给定字符空间的所有组合。很像暴力破解，但是更加具体一点。
```bash
hashcat64.exe -a 3 -m 1000 ntlm.txt .\masks\8char-1l-1u-1d-1s-compliant.hcmask
```
### 一些建议
* [Seclists](https://github.com/danielmiessler/SecLists) - 所有类型列表的一个大集合，不仅仅用于密码破解
* [Weakpasswords](https://weakpass.com/) - 有许多又小又好的字典，它们都带有统计信息和用于估计破解时间的计算器。我列出了其中一些，下面这些你也应该知道。
* rockyou.txt - 老牌，稳定，高效
* norsk.txt - 通过下载维基百科和许多挪威语字典来制作一个挪威语字典，并把它们结合在一起，再去重。
* weakpass_2a - 90 GB 字典
* [​Keyboard-Combinations.txt](https://github.com/danielmiessler/SecLists/blob/5c9217fe8e930c41d128aacdc68cbce7ece96e4f/Passwords/Keyboard-Combinations.txt) - 这是按照QWERTY键盘布局上的常规模式列出的所谓的键盘走动列表。参见下面的章节。
#### 生成你自己的字典
有时候，网上的字典并不会删减，所以你必须自己制作。有几种情况必须自己做字典。
1. 需要一个非英语字典
2. 需要一个按键字典
3. 需要一个有针对性的字典
#### 非英语字典
对于第一种情况，我的朋友 @tro 和我分享了他的技巧。我们下载了给定语言的维基百科，然后用一句话对其进行处理，对其进行精简并且去除所有特殊字符。
```bash