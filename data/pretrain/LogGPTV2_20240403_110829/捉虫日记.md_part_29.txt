位的当前值。该命令会单步进人子函数
P
执行单条指令或单行源代码，并（可选地）显示所有寄存器和标志
位的当前值。该命令不会进人子函数
B.2.5
查看数据
命
描
dd address
以双字值（4字节）显示address地址的内容
du address
以unicode字符方式显示address地址的内容
P
显示局部变量、全局变量或结构体和联合体等数据类型的信息
poi(address)
从指定的address地址返回指针长度的数据（pointer-sizeddata）。指针的
大小是32位或64位，取决于系统架构
B.2.6
信息查询命令
命
令
描
述
r
列出寄存器和寄存器值
kb
打印函数调用栈的回溯
sappe n
以机器指令形式转储address附近一段内存的内容
---
## Page 178
附录B调
试161
B.2.7其他命令
命
描述
Ianalyze -v
该调试器扩展显示关于异常或错误检查的大量有用信息
Idrvobj DRIVER_OBJECT
该调试器扩展显示DRIVER_OBJECT的详细信息
.sympath
这条命令改变调试器符号搜索的默认路径
.reload
这条命令删除所有符号信息并按需要重新加载符号
B.3Windows内核调试
为了分析第6章描述的漏洞，需要一个调试Windows内核的方法。我用
VMwarel2和WinDbg3按以下步骤搭建调试环境。
口第一步：为远程内核调试配置VMware的
本章附录中我使用以下
客户机系统。
软件版本：VMwareWorkstation
口第二步：调整客户机系统的boot.ini。
6.5.2禾oWinDbg 6.10.3.233.
口第三步：为调试Windows内核配置VMware
宿主机上的WinDbg。
B.3.1第一步：为远程内核调试配置VMware的客户机系统
安装了WindowsXPSP3VMware客户机系统之后，我关闭了客户机系统并从
VMware的命令区（Commands section）中选择EditVirtualMachineSettings。然后
点击Add按钮增加一个新的串口，选择如图B-1和图B-2显示的配置。
Add Hardware Wizard
Serial Port Type
What meda shouid this serial port access
enial port
Usehyial erilportnehos
Output tofle
add pe
图B-1输出到命名管道
---
## Page 179
162附录B调
试
Add Hardware Wzard
Specify Socket
Which sodket shouid this serial port connect to?
medpipe
1Lpipelcom_I
The otherend s an
Device status
Connect at po
图B-2命名管道配置
新的串口添加成功后，我在“I/Omode”区域选择了“YieldCPUonpoll”复
选框，如图B-3所示。
MecyncSeng
Hardware Optons
Device
Sumnary
Device stabus
Memory
Connecied
8GB
Coect tp
Auto detect
Connection
Auto detect
Use ghysical serial port
Network Ac
Host-only
Autsdetert
usB Controler
Present
Sound Card
Auto detect
Senai Port
Using named pi....
Auto detect
aed pipe:
1Llppelcom_1
Thaedshe serve
Theoterndsanpca
I/Omode
ied CPU on poll
portiri poled mode (as
Add...
Bemove
图B-3新串口的配置
B.3.2第二步：调整客户机系统的boot.ini
然后启动这个VMware客户系统并编辑WindowsXP的boot.ini文件，以包含
以下配置项（粗体部分激活内核调试）。
---
## Page 180
附录B调
试163
[boot loader]
timeout=30
default=multi(o)disk(o)rdisk(o)partition(1)\wINDowS
[operating systems]
multi(o)disk(o)rdisk(o)partition(1)\wINDowS="Microsoft Windows XP Professional"/
noexecute=optin/fastdetect
multi(o)disk（o)rdisk(o)partition(1)\WINDowS="Microsoft Windows XP Professional-
Debug"/fastdetect/debugport=com1
然后我重启客户机系统，选择启动菜单中的新项目“MicrosoftWindowsXP
Professional-Debug[debuggerenabled]”来启动系统，如图B-4所示。
FieEdeViewMTesmWindoHep
Tog.ysteh.Tu.staci
图B-4新的启动菜单选项
B.3.3第三步：为调试Windows内核配置VMware宿主机上的WinDbg
最后一步就是配置VMware宿主机上的WinDbg，以便让WinDbg通过管道附
加到VMware客户机系统的内核上。为此，我创建了一个如图B-5所示的批处理
文件。
mdbg.bat-Editor
FileEditFomatViewHelp
windbg-b-kcom:pipe,port-\\.\pipe\com_1,resets=0
图B-5内核调试用的WinDbg批处理文件
---
## Page 181
164附录B调
试
然后，双击这个批处理文件，把VMware宿主机上的WinDbg附加到VMware
WindowsXP客户机系统的内核上，如图B-6所示。
FiltEdnYiewDebugWindowHelp
地
aro
Breakinstruction exception-code 80000003（first chance）
You
THIS IS HOT A BUG OR A SYSTEH CRASH
I you did not intend to break into the debugger. press the *g key.
int.
kd>
LnC.Co0Sys0:KdSrvSProc000:0Thrd000:0
图B-6附加内核调试器（WinDbg）
B.4GNU调试器
以下表格列出了一些有用的GNU调试器（gdb）命令。完整的可用命令列表
见gdb在线文档[4。
B.4.1
启动和结束gdb
命
令
描述
we18o1d qp8
启动gdb开始调试program
quit
退出调试器
B.4.2
通用命令
命
令
描
述
run arguments
运行被调试程序（指定参数arguments）
attach processID
把调试器附加到PID为processID的进程上
---
## Page 182
附录B调
试165
B.4.3断点
命
令
描
breakfunction
在指定的函数function（文件file中）起始处设置一个断点
break line number
在linenumber（文件file中）指定的代码行起始处设置一个断点
break *address
在address地址处设置一个断点
info breakpoints
列出已设置断点信息
delete number
删除number指定的已设置断点
B.4.4
运行调试目标
命
令
描
述
stepi
执行一条机器指令。单步进人子函数
nexti
执行一条机器指令。不会进入子函数
continue
继续执行
B.4.5
查看数据
命
令
描
述
x/CountFormatSize
以指定格式Format打印地址address处指定大小Size、指定数量Count的对象
address
Size：b（字节），h（半字），w（字），g（giant,8字节）
Format：o（八进制），x（十六进制），d（十进制），u（无符号十进制），t（二
进制），f（浮点数），a（地址），i（指令），c（字符），s（字符串）
B.4.6
信息查询命令
命令
描
述
info registers
列出寄存器和寄存器值
backtrace
打印函数调用栈的回溯
disassemble address
以机器指令形式转储address附近一段内存的内容
B.4.7
其他命令
命
令
描
述
set disassembly -flavor intellatt
设置反汇编风格为Intel或者AT&T汇编语法。默认使用
AT&T语法
shell command
执行shell命令comand
set variable *(address)=value
把value保存到address指定的位置
source file
从文件file读人调试器命令
set follow-fork-mode parent|child
指示调试器跟踪父进程parent或子进程child
---
## Page 183
166附录B调试
B.5用Linux作为MacOSX内核调试的主机
这一节介绍将一台Linux系统作为MacOSX内核调试主机的详细步骤。
口第一步：安装一个古老的RedHat7.3Linux操作系统。
口第二步：获取必要的软件包。
口第三步：在Linux主机上构建Apple调试器。
口第四步：准备调试环境。
B.5.1第一步：安装一个古老的RedHat7.3Linux操作系统
因为所使用的AppleGNU调试器（gdb）版本需要版本3以上的GNUC编译
器（gcc）才能正确构建，我下载并安装了古老的RedHat7.3Linux系统。安装
时选择自定义安装类型。需要选择安装包（PackageGroupSelection）时，在各种
包选项中我只选择了Network Support、SoftwareDevelopment和OpenSSH包。这
些包涵盖了Linux上构建Applegdb必需的全部开发工具和库。安装时我增加了一
个非特权用户k，用户主目录为/home/tk。
B.5.2第二步：获取必要的软件包
成功安装Linux主机之后，我下载了以下软件包。
口Apple定制版本的gdb源代码[6]。
口GNU标准版本的gdb源代码[。
口在Linux下编译Apple gdb的一个补丁[8]。
口相应的XNU内核源代码版本。我是要准备Linux调试主机来研究第7章描
述的内核bug，因此我下载了XNU版本792.13.89。
口相应的Apple内核调试包（Apple'sKermel DebugKit）。我是在MacOSX
10.4.8上发现了第7章探讨的那个bug，因此我下载了相应的内核调试包版
本10.4.8（Kernel_Debug_Kit_10.4.8_8L2127.dmg）。
B.5.3第三步：在Linux主机上构建Apple调试器
在Linux主机上下载必要的软件包之后，解压以下两个版本的gdb。
linux$ tar xvzf gdb-292.tar.gz
linux$ tar xvzf gdb-5.3.tar.gz
然后用GNUgdb的mmalloc目录替换了Apple源代码树的相应目录。
---
## Page 184
附录B调
试167
linux$mvgdb-292/src/mmallocgdb-292/src/old_mmalloc
linux$ cp -Rgdb-5.3/mmalloc gdb-292/src/
在Apple版本的gdb中应用补丁。
linux$ cd gdb-292/src/
linux$patch-p2<../../osx_gdb.patch
patching file gdb/doc/stabs.texinfo
patching file gdb/fix-and-continue.c
patchingfilegdb/mach-defs.h
patchingfilegdb/macosx/macosx-nat-dyld.h
patching file gdb/mi/mi-cmd-stack.c
使用以下命令构建必要的库。
linux$ su
Password:
linux# pwd
/home/tk/gdb-292/src
linux# cd readline
linux#./configure; make
linux# cd../bfd
linux#./configure --target=i386-apple-darwin --program-suffix=_osx; make;
make install
linux# cd../mmalloc
linux#./configure; make; make install
linux# cd../intl
linux#./configure; make; make install
linux# cd../libiberty
linux#./configure;make; make install
linux# cd../opcodes
1linux#./configure --target=i386-apple-darwin--program-suffix=_osx; make;
make install
为构建调试器本身，我需要从XNU内核源代码中复制一些头文件到Linux主
机的include目录中。
linux# cd/home/tk
linux# tar-zxvfxnu-792.13.8.tar.gz
linux# cp-Rxnu-792.13.8/osfmk/i386//usx/include/
linux#cp-Rxnu-792.13.8/bsd/i386//usr/include/
cp:overwrite/usr/include/i386/Makefile'？y
cp:
overwrite/usr/include/i386/endian.h'?y
cp:overwrite/usr/include/i386/exec.h'?y
1inux#cp-Rxnu-792.13.8/osfmk/mach/usr/include/
---
## Page 185
168附录B调
试
然后我在新的_types.h文件中注释掉一些类型定义，避免编译期冲突（见第