机。也称为“手持设备”。
更多资料请关注裁的新浪薄客http：//blo
---
## Page 144
第7章程序是在何种环境中运行的
面从Java应用方面来看，Java虚拟机就是运行环境。虽然这样看起来
Java虚拟机全是好处，但其实也有不少问题。其中一点就是，不同的
Java虚拟机之间无法进行完整互换。这是因为，想让所有字节代码在
任意Java虚拟机上都能运行是比较困难的。而且，当我们使用只适用
于某些特定硬件的功能时，就会出现在其他Java虚拟机上无法运行，
或者功能使用受限等情况。
另一点就是运行速度的问题。Java虚拟机每次运行时都要把字节
代码变换成本机代码，这一机制是造成运行速度慢的原因。为此，目
前业界也在努力改善这一问题，比如把首次变换后的本地代码保存起
来，第2次以后直接利用本地代码，或是对字节代码中处理较为费时
的部分进行优化（改善生成的本地代码质量）等。
7.7BIOS和引导
最后对一些比较基础（和硬件相近的部分）的内容做一下补充说明。
程序的运行环境中，存在着名为BIOS（BasicInputOutput System）的系
统。BIOS存储在ROM中，是预先内置在计算机主机内部的程序。
BIOS除了键盘、磁盘、显卡等基本控制程序外，还有启动“引导程序”
的功能。引导程序是存储在启动驱动器起始区域的小程序。操作系统的
启动驱动器一般是硬盘，不过有时也可以是CD-ROM或软盘。
开机后，BIOS会确认硬件是否正常运行，没有问题的话就会启动
引导程序。引导程序的功能是把在硬盘等记录的OS加载到内存中运
行。虽然启动应用是OS的功能，但OS并不能自己启动自己，面是通
过引导程序来启动。
---
## Page 145
7.7BI0S和引导
（拔靴带）可以带动（启动）操作系统这样的大程序（靴子），所以由
此得名（图7-8）。虽然操作系统运行以后，程序员就不用再关注BIOS
及引导程序了，但需要知道它们的存在。
拔靴带
图7-8小引导程序带动大操作系统
本章我们一起了解了应用程序的运行环境，并对源代码和本地代
码进行了简单的说明。下一章，我们将对源代码转换到本地代码的流
程，也就是“编译”进行详细说明。
更多资料请关注我的新浪薄客tt
---
## Page 147
第
章
从源文件到可执行文件
热身问答
阅读正文前，让我们先回答下面的问题来热热身吧。
1.CPU可以解析和运行的程序形式称为什么代码？
2.将多个目标文件结合生成EXE文件的工具称为什么？
3.扩展名为.obj的目标文件的内容，是源代码还是本地代码？
4.把多个目标文件收录在一起的文件称为什么？
5.仅包含Windows的DLL文件中存储的函数信息的文件称为
什么？
6.在程序运行时，用来动态申请分配的数据和对象的内存区域
形式称为什么？
更多资料请关注我的新浪薄客ttp
---
## Page 148
第8章从源文件到可执行文件
怎么样？是不是发现有一些问题无法简单地解释清楚呢？下面
是笔者的答案和解析，供大家参考。
1.本地代码（机器语言代码）
2.链接器
3.本地代码
4.库文件
5.导入库
6.堆
1.通过编译源代码得到本地代码。
2.通过编译和链接，得到EXE文件。
3.通过对源文件进行编译，得到目标文件。例如，C语言中，将
Samplel.c这个源文件编译后，就会得到Samplel.obj这个目标
文件。目标文件的内容是本地代码
4.链接器会从库文件中抽取出必要的目标文件并将其结合到EXE
文件中。此外，还存在一种程序运行时结合的DLL形式的库
文件。
5.把导入库信息结合到EXE文件中，这样程序在运行时就可以利
用DLL内的函数了。
6.堆的内存空间会根据程序的命令进行申请及释放。
---
## Page 149
8.1计算机只能运行本地代码
本章
重点
源代码完成后，就可以编译生成可执行文件了。
负责实现该功能的是编译器。本章将围绕着编译器的
功能，详细介绍从程序编写到运行为止的流程。首先，我们会和大家
一起看一下源文件是如何通过编译转换成可执行文件的。接下来，我
们会继续关注可执行文件被加载到内存后的运行机制。此外，还会对
程序运行时内存上的栈及堆进行说明。由于篇幅有限，本章只介绍了
用C语言编译器来编写Windows用的可执行文件（EXE文件）的示
例，不过其他环境及编程语言等采用的基本上是同样的机制。因此，
即使不了解C语言的相关知识也不会有影响，这一点请大家放心。
8.1
计算机只能运行本地代码
首先，请大家看一下代码清单8-1。这是一个用C语言记述的
Windows程序。该程序运行后，会把123和456的平均值289.5显示在
消息框（图8-1）中。程序的内容并没有什么意思，这里仅仅是作为例
子使用面已。
代码清单8-1求解平均值的程序
#include cvindovs.h>
#include 
//消息框的标题
char*title-·示例程序1*
①本书使用的是BorlandC++Compiler 5.5。命令行版的Borland C++Compiler
5.5 可T xt从 Borland #) 网 ab ( htp:/borland.comjp/products/cbuilder/freecompiler.
html2007.1）上免费下载。C++是在C语言的基础上进加相应功能而开发
出来的编程语言。用C语言编写的源文件，也可以在C++编译器上进行
编译。
②消息题是一个为了显示短消息而出现的小窗口。
更多资料请关注我的新浪博客http：//blop
---
## Page 150
第8章从源文件到可执行文件
//返目两个参数的平均值的函数
double Average [double a, double b) {
return (a + b) / 2)
//程序运行启始位置的函数
Int KINAPI WInNain (HINSTASCE h, KINSTANICE d, LPSTR s, int m)
double ave)
//保存字持患的变量
//保存平均值的变量
char butf [60] :
//求解123，456的平均值
ave = Average(123, 456);
//编写量示在消息征中的字符串
sprintf（buff，·平均值-，ave）;
[3]
HessageBox (sULL, buff, title, MB_oK) /
//打开消息框
[4]
return 0/
示例程序1
平均值=289.500000
OK
图8-1代码清单8-1的执行结果
类似于代码清单8-1这样，用某种编程语言编写的程序就称为源代
码”，保存源代码的文件称为源文件。用C语言编写的源文件的扩展名
通常是“c"，因此，这里我们就把代码清单8-1的文件命名为Samplel.c。
①这里的“源代码”用英文表示是“source code”。source有“原始的”的意
思，因此所谓源代码，就是原始的代码。源代码有时也称为源程序。
---
## Page 151
8.2本地代码的内容
因为源文件是简单的文本文件，所以用Windows自带的记事本等文本
编辑器就可以编写。
代码清单8-1的源代码是无法直接运行的。这是因为，CPU能直
接解析并运行的不是源代码而是本地代码的程序。作为计算机大脑的
Pentium等CPU，也只能解释已经转换成本地代码的程序内容。
本地（native）这个术语有“母语的”意思。对CPU来说，母语就
是机器语言，而转换成机器语言的程序就是本地代码。用任何编程语
言编写的源代码，最后都要翻译成本地代码（图8-2），否则CPU就不
能理解。也就是说，即使是用不同编程语言编写的代码，转换成本地
代码后，也都变成用同一种语言（机器语言）来表示了。
不同的编程语言
问样的编程语言
C语言编写的
翻译：
源代码
本地代码
翻译
C++语言编写的
源代码
本地代码
解析运行
BASIC语言编写的
翻译
本地代码
源代码
CPU
asca语言编写的
翻译
源代码
本地代码
图8-2转换成本地代码后就变成了同样的语言
8.2本地代码的内容
Windows中EXE文件的程序内容，使用的就是本地代码。正所谓
“百闻不如一见”，接下来就让我们来看一下本地代码的内容吧。
---
## Page 152
第8章从源文件到可执行文件
用记事本打开由代码清单8-1的内容转换成本地代码得到的EXE
文件（Samplel.exe），页面显示情况如图8-3所示。据此我们应该可以
看出，本地代码的内容是人类无法理解的。也正是因为如此，才有了
用人类容易理解的C语言等编程语言来缩写源代码，然后再将源代码
转换成本地代码这一方法。
Samp.·记事本
查M
辑IE格式IO
禁助00
3确的提
1-E)-
PS
B68CI
图8-3用记事本打开EXE文件后出现了无法理解的文字
接下来，我们把刚才的EXE文件的内容Dump一下。Dump是指
把文件的内容，每个字节用2位十六进制数来表示的方式。本地代码
的内容就是各种数值的罗列，这一点想必大家都了解。而这些数值就
是本地代码的真面目。每个数值都表示某一个命令或数据（图8-4）。
这里我们用的是原始的Dump程序。
面计算机就是把所有的信息作为数值的集合来处理的。例如，A
这个字符数据就是用十六进制数41来表示的。与此相同，计算机指令
也是数值的罗列。这就是本地代码。
---
## Page 153
8.3编泽器负责转换源代码
图84本地代码的真面目是数值的罗列
8.3
编译器负责转换源代码
能够把C语言等高级编程语言编写的源代码转换成本地代码的程
序称为编译器。每个编写源代码的编程语言都需要其专用的编译器。
将C语言编写的源代码转换成本地代码的编译器称为C编译器。
编译器首先读入代码的内容，然后再把源代码转换成本地代码。
编译器中就好像有一个源代码同本地代码的对应表。但实际上，仅仅
靠对应表是无法生成本地代码的。读入的源代码还要经过语法解析、
句法解析、语义解析等，才能生成本地代码。
根据CPU类型的不同，本地代码的类型也不同。因而，编译器不
仅和编程语言的种类有关，和CPU的类型也是相关的。例如，Pentium
等x86系列CPU用的C编译器，同PowerPC这种CPU用的C编译器
就不同。从另一个方面来看，这其实是非常方便的。因为这样一来，
同样的源代码就可以翻译成适用于不同CPU的本地代码了（图8-5）。
更多资料请关注裁的新浪薄客http：//blo
---
## Page 154
8章从源文件到可执行文件
读入
xB6系
转换
x86系CPU用的
编译器
C语言
本地代码
源代码
读入
Power PC用的
转换
+
Power PC用的
编译器
本地代码
图8-5同样的源代码可以转换成适用于不同处理器的本地代码
因为编译器本身也是程序的一种，所以也需要运行环境。例如，
有Windows用的C编译器、Linux用的C编译器等。此外，还有一