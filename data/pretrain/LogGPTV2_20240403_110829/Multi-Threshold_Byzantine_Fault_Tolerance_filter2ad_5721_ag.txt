nous model. Another recent work [28] studies reliable broadcast
and Byzantine agreement with different fault thresholds for dif-
ferent correctness properties and captures optimal trade-offs be-
tween them in the asynchronous model. In comparison, our MT-BFT
framework captures trade-offs not only between different correct-
ness properties but also between different timing models, notably as
we improve synchronous safety without compromising properties
in asynchrony or partial synchrony.
Dual timing model. The beautiful recent work of Blum et al. [7–
9] is the closest to our work and is the inspiration to our work.
They considered the async-sync dual timing model. They provided
a first and partial answer the above question. However, it does
not completely resolve the above dilemma as it cannot match the
fault tolerance of classic single-model protocols. For example, with
𝛽𝑎 = 𝛾𝑎 < 𝑛/3, their protocol tolerates only 𝛽𝑠 = 𝛾𝑠 < 𝑛/3, which
is the same as classic asynchronous and partially synchronous
protocols, while our protocol tolerates 𝛽𝑠 < 2𝑛/3. Moreover, from
a practical perspective, the construction of their protocol seems
more complicated and works in lockstep rounds. In contrast, our
protocol is simpler and closer to deployed practical protocols.
The XFT protocol [35] also considers the psync-sync dual timing
model. It extends Paxos [33], a popular crash fault-tolerant (CFT)
replication protocol, to tolerate 𝑓 < 𝑛/2 Byzantine faults under
synchrony. However, under partial-synchrony, the protocol does
not tolerate Byzantine faults.
Flexible BFT. Flexible BFT [37] (FBFT) is a recent work that sup-
ports two different timing models and also separates thresholds for
safety and liveness. FBFT also combines some techniques from the
partially synchronous PBFT and the synchronous Sync HotStuff,
like our protocol in Section 4. But the key difference is that FBFT
does not fully combine the two protocols. Instead, it leaves the two
different commit rules untouched, and leaves the responsibility to
each client to choose between the two commit rules according to
its own belief about the network. This is a fundamental difference
in the design goal as FBFT’s goal is to support clients with diverse
beliefs about the network. If a client in FBFT makes an incorrect
assumption about the network, e.g., choose the synchronous com-
mit rule when the network is asynchronous, the protocol does not
provide any guarantees to that client.
In contrast, our protocol in Section 4 combines the two protocols
including their commit rules from different timing models into a
single protocol with a single commit rule. And we maintain the
standard model where clients do not choose their own models or
commit rules. Our protocol provides all clients with safety and live-
ness guarantees under both timing models (though with different
fault thresholds).
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1697Ebb-and-flow. Another recent work called Ebb-and-flow [41] also
takes FBFT’s approach of having two commit rules for two different
models and leaving the responsibility to the clients to choose be-
tween them (though its primary motivation is to support dynamic
availability). Interestingly, if we constrain all clients in Ebb-and-
flow to choose the partially synchronous commit rule, then their
protocol can be regarded as an MT-BFT protocol with 𝛽𝑠 < 𝑛/2
and 𝛽𝑎 = 𝛾𝑎 = 𝛾𝑠 < 𝑛/3, which has a higher but not optimal
synchronous safety threshold.
7 CONCLUSION AND FUTURE WORK
We introduce multi-threshold BFT, a generalized version of the BFT
problem, which defines fault thresholds separately for safety and
liveness under synchrony and asynchrony (or partial-synchrony),
respectively. Our optimal protocols have strictly stronger fault
tolerance than classic BFT protocols. We also present a general
framework to upgrade existing protocols to achieve optimal syn-
chronous safety with minimum overhead. Our customized protocol
in Section 4 that allows generic (i.e., other than 𝛽𝑎 = 𝛾𝑎 = ⌊ 𝑛−1
3 ⌋)
parameter choices works only in the psync-sync model. Therefore,
the tightness of the fault bounds for MT-BFT SMR in the async-sync
model is still open and interesting future work.
ACKNOWLEDGMENTS
We thank our shepherd Julian Loss and the anonymous reviewers at
ACM CCS 2021 for their helpful feedback. This work was supported
in part by gifts from Novi and VMware.
REFERENCES
[1] Ittai Abraham, Srinivas Devadas, Danny Dolev, Kartik Nayak, and Ling Ren.
2019. Synchronous Byzantine Agreement with Expected 𝑂(1) Rounds, Expected
𝑂(𝑛2) Communication, and Optimal Resilience. In Financial Cryptography and
Data Security (FC). Springer, 320–334.
[2] Ittai Abraham, Dahlia Malkhi, Kartik Nayak, Ling Ren, and Maofan Yin. 2020.
Sync HotStuff: Simple and Practical Synchronous State Machine Replication. In
IEEE Symposium on Security and Privacy (S&P). IEEE, 106–118.
[3] Ittai Abraham, Dahlia Malkhi, and Alexander Spiegelman. 2019. Asymptotically
optimal validated asynchronous byzantine agreement. In ACM Symposium on
Principles of Distributed Computing (PODC). 337–346.
[4] Ittai Abraham, Kartik Nayak, Ling Ren, and Zhuolun Xiang. 2020. Optimal Good-
case Latency for Byzantine Broadcast and State Machine Replication. arXiv
preprint arXiv:2003.13155 (2020).
[5] Elli Androulaki, Artem Barger, Vita Bortnikov, Christian Cachin, Konstantinos
Christidis, Angelo De Caro, David Enyeart, Christopher Ferris, Gennady Lavent-
man, Yacov Manevich, et al. 2018. Hyperledger fabric: a distributed operating
system for permissioned blockchains. In Thirteenth EuroSys Conference. ACM,
30.
[6] Mathieu Baudet, Avery Ching, Andrey Chursin, George Danezis, François Garillot,
Zekun Li, Dahlia Malkhi, Oded Naor, Dmitri Perelman, and Alberto Sonnino.
[n.d.]. State machine replication in the Libra Blockchain.
[7] Erica Blum, Jonathan Katz, and Julian Loss. 2019. Synchronous consensus with
optimal asynchronous fallback guarantees. In Theory of Cryptography Conference
(TCC). Springer, 131–150.
[8] Erica Blum, Jonathan Katz, and Julian Loss. 2020. Network-Agnostic State Ma-
chine Replication. arXiv preprint arXiv:2002.03437 (2020).
[9] Erica Blum, Chen-Da Liu-Zhang, and Julian Loss. 2020. Always have a backup
plan: fully secure synchronous MPC with asynchronous fallback. In Annual
International Cryptology Conference (CRYPTO). Springer, 707–731.
[10] Gabriel Bracha. 1987. Asynchronous Byzantine agreement protocols. Information
and Computation 75, 2 (1987), 130–143.
[11] Mike Burrows. 2006. The Chubby lock service for loosely-coupled distributed
systems. In 7th Symposium on Operating Systems Design and Implementation
(OSDI). 335–350.
[12] Vitalik Buterin and Virgil Griffith. 2017. Casper the friendly finality gadget. arXiv
preprint arXiv:1710.09437 (2017).
[13] Christian Cachin, Klaus Kursawe, Frank Petzold, and Victor Shoup. 2001. Se-
cure and efficient asynchronous broadcast protocols. In Annual International
Cryptology Conference (CRYPTO). Springer, 524–541.
[14] Miguel Castro, Barbara Liskov, et al. 1999. Practical Byzantine fault tolerance. In
3rd Symposium on Operating Systems Design and Implementation (OSDI). USENIX,
173–186.
[15] T-H Hubert Chan, Rafael Pass, and Elaine Shi. 2018. PiLi: An Extremely Simple
Synchronous Blockchain. IACR Cryptology ePrint Archive, Report 2018/980 (2018).
(2018). https://github.com/
jpmorganchase/quorum/blob/master/docs/QuorumWhitepaperv0.2.pdf.
[16] J.P.Morgan Chase. 2018. Quorum Whitepaper.
[20] Danny Dolev and H. Raymond Strong. 1983. Authenticated algorithms for
[17] Allen Clement, Flavio Junqueira, Aniket Kate, and Rodrigo Rodrigues. 2012. On
the (limited) power of non-equivocation. In ACM Symposium on Principles of
Distributed Computing (PODC). 301–308.
[18] Allen Clement, Manos Kapritsos, Sangmin Lee, Yang Wang, Lorenzo Alvisi, Mike
Dahlin, and Taylor Riche. 2009. Upright cluster services. In 22nd ACM SIGOPS
Symposium on Operating Systems Principles (SOSP). 277–290.
[19] James C Corbett, Jeffrey Dean, Michael Epstein, Andrew Fikes, Christopher Frost,
Jeffrey John Furman, Sanjay Ghemawat, Andrey Gubarev, Christopher Heiser,
Peter Hochschild, et al. 2013. Spanner: Google’s globally distributed database.
ACM Transactions on Computer Systems (TOCS) 31, 3 (2013), 1–22.
Byzantine agreement. SIAM J. Comput. 12, 4 (1983), 656–666.
[21] Sisi Duan, Michael K Reiter, and Haibin Zhang. 2018. BEAT: Asynchronous BFT
made practical. In ACM SIGSAC Conference on Computer and Communications
Security (CCS). 2028–2041.
[22] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer. 1988. Consensus in the
presence of partial synchrony. J. ACM 35, 2 (1988), 288–323.
[23] Paul Feldman and Silvio Micali. 1988. Optimal algorithms for Byzantine agree-
ment. In 20th Annual ACM Symposium on Theory of Computing (STOC). 148–161.
[24] Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios Vlachos, and Nickolai Zeldovich.
2017. Algorand: Scaling byzantine agreements for cryptocurrencies. In 26th
Symposium on Operating Systems Principles (SOSP). 51–68.
[25] Guy Golan Gueta, Ittai Abraham, Shelly Grossman, Dahlia Malkhi, Benny Pinkas,
Michael Reiter, Dragos-Adrian Seredinschi, Orr Tamir, and Alin Tomescu. 2019.
SBFT: a scalable and decentralized trust infrastructure. In 2019 49th Annual
IEEE/IFIP international conference on dependable systems and networks (DSN).
IEEE, 568–580.
[26] Bingyong Guo, Zhenliang Lu, Qiang Tang, Jing Xu, and Zhenfeng Zhang. 2020.
Dumbo: Faster asynchronous bft protocols. In ACM SIGSAC Conference on Com-
puter and Communications Security (CCS). 803–818.
[27] Yue Guo, Rafael Pass, and Elaine Shi. 2019. Synchronous, with a chance of
partition tolerance. In Annual International Cryptology Conference (CRYPTO).
Springer, 499–529.
[28] Martin Hirt, Ard Kastrati, and Chen-Da Liu-Zhang. 2020. Multi-Threshold Asyn-
chronous Reliable Broadcast and Consensus. In 24th International Conference on
Principles of Distributed Systems (OPODIS).
[29] Patrick Hunt, Mahadev Konar, Flavio Paiva Junqueira, and Benjamin Reed. 2010.
ZooKeeper: Wait-free Coordination for Internet-scale Systems.. In USENIX annual
technical conference, Vol. 8.
[30] Jonathan Katz and Chiu-Yuen Koo. 2009. On expected constant-round protocols
for byzantine agreement. J. Comput. System Sci. 75, 2 (2009), 91–112.
[31] Ramakrishna Kotla, Lorenzo Alvisi, Mike Dahlin, Allen Clement, and Edmund
Wong. 2007. Zyzzyva: speculative byzantine fault tolerance. In 21st ACM SIGOPS
Symposium on Operating Systems Principles (SOSP). 45–58.
[32] Michael Kumhof and Clare Noone. 2018. Central bank digital currencies-design
principles and balance sheet implications. (2018).
[33] Leslie Lamport. 2019. The part-time parliament. In Concurrency: the Works of
Leslie Lamport. 277–317.
[34] Leslie Lamport, Robert Shostak, and Marshall Pease. 1982. The Byzantine Gen-
erals Problem. ACM Transactions on Programming Languages and Systems 4, 3
(1982), 382–401.
[35] Shengyun Liu, Paolo Viotti, Christian Cachin, Vivien Quéma, and Marko Vukolić.
2016. XFT: Practical fault tolerance beyond crashes. In USENIX Symposium on
Operating Systems Design and Implementation (OSDI). 485–500.
[36] Yuan Lu, Zhenliang Lu, Qiang Tang, and Guiling Wang. 2020. Dumbo-mvba:
Optimal multi-valued validated asynchronous byzantine agreement, revisited. In
ACM Symposium on Principles of Distributed Computing (PODC). 129–138.
[37] Dahlia Malkhi, Kartik Nayak, and Ling Ren. 2019. Flexible byzantine fault tol-
erance. In ACM SIGSAC Conference on Computer and Communications Security
(CCS). 1041–1053.
[38] Andrew Miller, Yu Xia, Kyle Croman, Elaine Shi, and Dawn Song. 2016. The
honey badger of BFT protocols. In ACM SIGSAC Conference on Computer and
Communications Security (CCS). 31–42.
[39] Atsuki Momose, Jason Paul Cruz, and Yuichi Kaji. 2020. Hybrid-BFT: Optimisti-
cally Responsive Synchronous Consensus with Optimal Latency or Resilience.
IACR Cryptology ePrint Archive, Report 2020/406 (2020).
[40] Satoshi Nakamoto. 2008. Bitcoin: A peer-to-peer electronic cash system. (2008).
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1698[41] Joachim Neu, Ertem Nusret Tas, and David Tse. 2020. Ebb-and-flow protocols: A
resolution of the availability-finality dilemma. arXiv preprint arXiv:2009.04987
(2020).
[42] Rafael Pass and Elaine Shi. 2017. Hybrid consensus: Efficient consensus in the
permissionless model. In International Symposium on Distributed Computing
(DISC). Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.
[43] Rafael Pass and Elaine Shi. 2018. Thunderella: Blockchains with optimistic instant
confirmation. In Annual International Conference on the Theory and Applications
of Cryptographic Techniques (EUROCRYPT). Springer, 3–33.
[44] Marshall Pease, Robert Shostak, and Leslie Lamport. 1980. Reaching agreement
in the presence of faults. Journal of the ACM (JACM) 27, 2 (1980), 228–234.
[45] Fred B Schneider. 1990. Implementing fault-tolerant services using the state
machine approach: A tutorial. ACM Computing Surveys (CSUR) 22, 4 (1990),
299–319.
[46] Nibesh Shrestha, Ittai Abraham, Ling Ren, and Kartik Nayak. 2020. On the
Optimality of Optimistic Responsiveness. In ACM SIGSAC Conference on Computer
and Communications Security (CCS). 839–857.
[47] Maofan Yin, Dahlia Malkhi, Michael K Reiter, Guy Golan Gueta, and Ittai Abra-
ham. 2019. Hotstuff: Bft consensus with linearity and responsiveness. In ACM
Symposium on Principles of Distributed Computing (PODC). ACM, 347–356.
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1699