### 2. 颜色有时系统的组成比较复杂，只用基本图形不足以表达所有不同的系统组成部件，这时就需要用颜色来区分了。那么下一个问题就来了，该用哪些颜色呢？我的答案是使用大部分人觉得美的颜色。那大部分人觉得美的颜色是什么呢？彩虹色，当然这一点也我没有做过专门调查，只是凭经验得来。所以我一般用的颜色就是彩虹七色，外加两种经典色：黑、白。这样就有九种颜色加上好几种基本图形，可以组合出几十种表达不同组件的图形元素，基本也就够用了。彩虹七色包括：红、橙、黄、绿、青、蓝、紫。但七种颜色的选择也是有优先级，在一本讲设计的书中Designing with the Mind inMind（中文译本《认知与设计》）提出了下面一些色彩使用准则：-   **使用饱和度、亮度以及色相区分颜色，确保颜色的高反差**，因为人的视觉是为边缘反差而优化的。-   **使用独特的颜色**，因为人最容易区分的颜色包括：红、绿、黄、蓝、白和黑。-   **避免使用色盲无法区分的颜色对**，比如：深红－黑，深红－深绿，蓝色－紫色，浅绿－白色。-   **使用颜色之外的其他提示**，对有颜色视觉障碍的人友好，而且也增强了可理解性。-   **避免强烈的对抗色**，比如：红黑，黄黑。以你看为什么交通灯是：红、黄、绿？为什么乔布斯选择这三个颜色作为 Mac操作系统中所有应用窗体的按纽颜色，这也是暗合人类的视觉认知原则的。所以我现在多选择的是白底、黑字、黑色线条，色块优先选择红、绿、黄、蓝，实在不够用了才会选择橙、青、紫。当然红有好多种红，绿有好多种绿，该用哪种呢？看下图所示，给出了 RGB三原色的配色数值，这属于个人偏好，在 Mac的显示器下看起来很舒服。但若用在其他场合，比如投影什么的，就可能需要根据投影实际效果进行微调了。![](Images/0b9ddb42417fc3025be44568a98540f8.png){savepage-src="https://static001.geekbang.org/resource/image/f3/c0/f3c5d15b7ad9162e6277a797258c0ac0.png"}```{=html}```个人偏好的颜色配色参数]{.reference}```{=html}```
### 3. 审美除了基本的图形和颜色选择之外，另外一个关注点是审美。审美对最终的效果呈现有很大影响，这得感谢苹果总设计师乔纳森·伊夫（JonathanIve）把大众的审美倾向全部带入到扁平化时代，所以实际中我只需要把图形弄得扁平，去掉立体、阴影什么的，看起来就还不错了。毕竟我们画的是系统设计图，不是美术设计稿，审美方面的追求就适可而止了。![](Images/a7fc8753f8c43ac0d85977ab18b45c5a.png){savepage-src="https://static001.geekbang.org/resource/image/2d/56/2d227bb1042dfa64dd9d6eef23c1a856.png"}```{=html}```审美效果示例图]{.reference}```{=html}```
## 三、几何？探讨了如何，我们再接着看看几何。此 "几何"不是数学里的几何，而是掌握画图技法到底代价几何？又价值几何呢？好些年前了，我画的技术图示（来自以前的一个分享PPT）大概是下面这样的，总是觉得不好，不太满意，却又不知道不好在哪里，以及该怎么改进。然后就归咎于工具不好用，从一开始用Viso 画，后来尝试了 Mac 下的专业绘图工具OmniGraffle，觉得太复杂，后又找到个在线绘图网站draw.io](http://draw.io)，感觉还可以，但由于是国外网站，访问效率不太好，没多久就又放弃了。![](Images/99ea9884f84846cef8e4551024d4f691.png){savepage-src="https://static001.geekbang.org/resource/image/d0/64/d0b835a8ca5f088241c564cb76db6d64.png"}```{=html}```"优化前"的技术图示]{.reference}```{=html}```之后需要做一些胶片演示时，用了 Mac 下的 Keynote（相当于 Windows 下的PPT），需要画技术图示时想如果直接在 Keynote 里画最省事了，然后就开始用Keynote 画了。按 "如何"一节的指导原则，我重新画了下上面那个技术图示，如下：![](Images/9dfccb694460a7db4d52db0c3b6b54aa.png){savepage-src="https://static001.geekbang.org/resource/image/c5/65/c527abb098dbc1a6bac04057e4643165.png"}```{=html}```"优化后"的技术图示]{.reference}```{=html}```这花费的时间绝对不会比画上面那个多，但呈现出的效果却要好很多。所以，学会使用一种简单的软件，使用简单的图形和配色，在最有效率的情况下画出一幅效果还不错的图例，也是很有价值的。当然你可能会认为只有写出的代码才有价值，其实这里你可能忽视了一个大部分程序员都认同的观点：代码也是写给人看的。程序员不会认为一份机器能运行而人很难看懂的代码是好代码，而画好图就能更好地帮助你去思考代码的组织和呈现方式。曾经问我关于画图工具的人，我知道他们差的不是一个画图工具，而是对于"画图"本身的思维认知与技法打磨。所以在本文我分享了我近些年一直在使用的一种极简绘制技术图例的技法，毕竟我们画图只是为了追求讲清楚一个技术方案或展示一个系统，而不需要考虑任何多余的艺术性。最低的代价，还不错的效果，在效率和效果之间取得性价比最高的平衡。曾几何时，你想象中很麻烦的事原来也可以如此简单。关于展现的第二种形式：画图，今天的分享就到这里。你平时是如何画技术图示的？在用什么工具？欢迎你在留言区和大家分享分享。------------------------------------------------------------------------![](Images/a1e61bd5d0a80da9fdfd53ba1e12f2e4.png){savepage-src="https://static001.geekbang.org/resource/image/45/b8/456def9c2e16edaec6543cfa03376cb8.jpg"}
# 32 \| 演讲：表达的技术展现的另一种形式是：**演讲**。其实作为程序员出身的我，演讲水平非常有限，但在职业发展与成长的道路上，演讲却是必经之路。所以，我确实有比较系统地思考和琢磨过演讲的价值、效果以及提升的方法，现在我将其分享给你，希望能对你的成长或者职业道路有所帮助。
## 一、价值与效果写作的展现，是一种广度路线，产生间接、长尾效应；演讲的展现，是一种深度路线，产生直接、深度连接。为什么说写作是广度而演讲是深度的？过去几年，我读过很多的文章、书，但还能记得住只言片语的都非常少。即使当时一些给我非常多启发与触动的文字，如今也只能记得当时触动的感觉，却忘了触动的内容。但好些年前，我参加过几次行业大会，有那么几场演讲，现在回想起来，不仅记得当时深受启发的触动感，甚至还能记得当时的内容。这就是演讲带来的深度效应，它的现场感更立体，有助于留下更深刻的记忆，持续发挥影响的时间也超过了文字。演讲的现场立体感带来的深度效应，也只能留在现场。即使我们把整个演讲过程录制成为视频，观看视频的过程也会损失很大一部分深度影响力，也许这就是为什么有人会去看现场演唱会的原因。所以，演讲的最大价值就在于这样的深度效应。但现场感并不一定带来深度影响，也可能是把人"催眠"了。那如何发挥好演讲的效果呢？这里我就先谈谈我自己的一些经历和感悟。``{=html}
## 二、经历与感悟成长路上，终究会遇上演讲；从没遇上演讲的程序员，可能天花板就会比较低。作为程序员，我的第一次演讲经历，当然是技术分享，团队内部的。如今回想，第一次分享暴露出了很多方面的问题。比如，材料准备时发现PPT技能太差，想展现的内容做出来的效果太挫；现场讲的时候容易跑偏或者陷入细节，整体节奏失控；想表达的内容太多，信息量过大。这些问题都导致第一次演讲的效果不尽如人意。后来再有技术分享的机会时，我已经开始写作了一段时间，发现写作实际对演讲是有帮助的。写作和演讲的共通处在于：内容、观点、信息传递的目标都是要考虑的，只是最终的表达形式不同。而且因为写了不少东西，也反而获得了更多的技术分享机会。从业这么些年，经历了从线上到线下，从组内到部门，然后再到公司或行业级的不同规模的分享演讲，挑战并不一样，其中最大的区别在于现场感的压力不同。而且除了分享式的演讲，还有另外一种汇报式的演讲，如：晋升述职。技术分享，一般时间会长一些（一小时左右），而晋升述职，时间则要短很多（十分钟左右）。前者的压力来自对象的规模，后者的压力来自对象的角色。而不同时长的演讲，准备的方式也不太一样。时间长的演讲，准备的内容就多，要精确地讲好这么多内容是一个挑战；而时间短的演讲，内容不多，但就需要合适地挑选和裁剪，并且精确地传递，这又是另外一种挑战。那对于不同的演讲类型，有通用的准备方法吗？下面我们尝试梳理下。