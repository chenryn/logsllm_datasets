understanding the internal logic of the replaced functions.
Table 2 was created by taking the union of the handlers ex-
ecuted during interactive emulation for the binaries in Table 3
and classifying them as trivial, translating, or internal logic.
It shows 44.5% are trivial handlers, 42.2% are translating
handlers, and 13.3% implement internal logic. Therefore,
for our ﬁrmware samples, over 85% of the handlers can
be implemented with little or no understanding of how the
internals of functions they are intercepting are implemented.
The 13% that required understanding internal logic primar-
ily represent cases where the HAL itself manipulated global
state also used by the rest of the program. For example, the
Atmel Ethernet and 6LowPAN case studies use the external
interrupt controller (EXTI) which maps several external inter-
rupts to a single CPU interrupt. The EXTI interrupt service
routine (ISR) looks up the ID of the actual interrupt source in
an MMIO register, and uses it to look up the correct callback
in a global array. HALucinator does not have access to the
global array, and thus cannon directly look up the correct call-
back. Instead, the EXTI handler implements a simple MMIO
peripheral that enables reading/writing the MMIO status reg-
ister. This enables the EXTI ISR to execute correctly. While
this requires understanding some chip-level details, it retains
the scaling and relative simplicity of high-level emulation.
1210    29th USENIX Security Symposium
USENIX Association
HAL
ASF v3
STM32
NXP
Total
Trivial
12 (30.8%)
17 (58.6%)
8 (53.3%)
37 (44.5%)
Translation
19 (48.7%)
9 (31.0%)
7 (46.7%)
35 (42.2%)
Internal Logic
8 (20.5%)
3 (10.3%)
0 ( 0.0%)
11 (13.3%)
Total
39
29
15
83
Table 2: Categorization by difﬁculty of implementing han-
dlers. Showing number of handlers that implement Trivial,
Translating, and Internal Logic behaviors.
We implemented a MMIO register and no internal machine,
versus implementing all the MMIO registers of all the used
peripherals in the ﬁrmware and their associated internal state
machines that control how the bits in those registers are used.
Scaling Across Devices. To demonstrate how HLE allows
the emulation of one HAL to scale across devices, we
constructed an experiment using samples from the NXP
MCUXpresso HAL, each from a different board and CPU.
These represent chips from each of NXPs major ARM
microcontroller product families, including Kinetis, LPC,
and i.MX, whose designs and peripheral layouts are entirely
different due to their development under formerly-separate
companies. Regardless of family and lineage, all of these
parts share the same HAL. As a result, we obtained 20
instances of the uart_polling example, from 20 different
development boards. The uart_polling example was
selected as UARTs are available on nearly every board and
the presence of other peripherals varies from board to board.
We then emulated these 20 ﬁrmware samples using the same
NXP UART handlers and peripheral models. Speciﬁcally we
used three handlers, a transmit handler, receive handler, and
a default handler that returns zero. The only differences in
the conﬁguration of HALucinator for the different ﬁrmware
was in the RAM/Flash layout, clock interception, and power
initialization functions all of which were handled by the
trivial default handler. In total 29 unique functions were inter-
cepted. Six function at minimum, nine maximum, and 6.9 on
average were intercepted per board. This shows that the same
handlers and models can be used to support multiple product
families. The only challenge was to identify the names of the
intercepted clock and power initialization functions.
5.3
Interactive Emulation Comparison
Next we re-host the 16 ﬁrmware samples shown in Table 1
interactively, using QEMU, Avatar2 [43], and HALucinator.
In this experiment, we use the QEMU provided with
Avatar2 in its default conﬁguration and load and execute the
ﬁrmware into QEMU without the hardware present. In this
conﬁguration any access to unsupported MMIO in QEMU
will fault. Avatar2 was conﬁgured to execute the ﬁrmware in
QEMU and forward all MMIO to a physical board connected
by a debugger. Thus, all reads and writes to MMIO obtain
values from or write to physical hardware. HALucinator
utilized the functions found by LibMatch, and we intercept
a sufﬁcient number of HAL functions to enable the ﬁrmware
samples to perform their externally observable functionality
as compared to execution on the physical hardware. For
any MMIO that is executed, we implement a default MMIO
handler that returns zero for reads and silently ignore writes.
We consider the external behavior to be “correct” if equiv-
alent functionality can be performed on the emulated system
as on the real hardware. Speciﬁcally, the TCP/UDP examples
successfully transmit the same data as the physical hardware.
We are able to access the same pages on the HTTP server
ﬁrmware samples. The FatFs examples are able to read and
write the required data to the the appropriate ﬁles within its
ﬁle system. We veriﬁed this by mounting the binary images
provide by HALucinator through the SD card model as a
FAT32 ﬁle system. The 6LoWPAN examples successfully
talk to each other and their echoed messages are sent out
their UARTs in the same order as the physical hardware.
The UART examples are able to send and receive data over
their UARTs and give the expected responses. Finally, the
PLC sample, connects to its Android programming app,
successfully loads a ladder logic, and executes it. Due to the
limited inspection capabilities of hardware we cannot verify
that equal code paths are followed as compared to physical
hardware. Obtaining this level of inspection is a primary mo-
tivation for emulating embedded systems. It should be noted
that enabling this level of emulation exceeds what is needed
purely for fuzzing, as fuzzing can be performed by simply get-
ting the system to read an input. Providing the same level of
functionality enables fuzzing to start from a plausible initial
starting point, and as will be shown in Section 5.4 HLE en-
ables targeting the fuzzer at different layers within a ﬁrmware.
Table 3 shows the software libraries used by each ﬁrmware,
and the interfaces modeled by HALucinator. For each
technique it shows the number of unique basic blocks
executed (“BB”), which indicates how much of the ﬁrmware
executes. It also shows if the external input and output
behavior matches that observed from executing the ﬁrmware
on physical hardware (external behavior correct – “EBC”).
For Avatar2, we report the number of reads and writes
forwarded to the board (“Fwd R/W”) which demonstrate
that Avatar2 is correctly forwarding memory requests. For
HALucinator, we report the number of functions intercepted
(“Funcs”) and the number of unique addresses handled by
the default MMIO. The number of functions intercepted
gives a measure of how much work is required to emulate
the ﬁrmware using HALucinator, and the MMIO using the
default handler are accesses to hardware that could potentially
be replaced with further interception of HAL functions.
HALucinator enables the correct black-box behavior in all
cases—all vendors, all boards, all ﬁrmware samples. Among
our baseline approaches, the NXP UART ﬁrmware using
Avatar2 is the only other ﬁrmware successfully emulated. This
is because it is a simple ﬁrmware that polls the MMIO and
does not use any interrupts. In all cases, QEMU triggers a bus
fault when any MMIO occurs and executes at most 39 unique
USENIX Association
29th USENIX Security Symposium    1211
lwIP HTTP
Software Libraries
ASF
ASF, FatFS,
ASF, HTTP, lwIP
Modeled Interfaces
UART
UART, SD Card, EXTI
UART, Ethernet
Mfr. Application
8
Atmel UART
8
Atmel SD FatFs
Atmel
8
Atmel 6LoWPAN Sender ASF, Contiki, uIPv6, 6LoWPAN UART, 802.15.4, EXTI, Clock, Timer, EDBG 14
Atmel 6LoWPAN Receiver ASF, Contiki, uIPv6, 6LoWPAN UART, 802.15.4, EXTI, Clock, Timer, EDBG 14
STM UART
8
8
STM SD FatFs
8
STM UDP Echo Client
8
STM UDP Echo Server
8
STM TCP Echo Client
8
STM TCP Echo Server
STM PLC
39
4
NXP UART
4
NXP UDP Echo Server MCUExpresso, lwIP
4
MCUExpresso, lwIP
NXP TCP Echo Server
NXP HTTP Server
MCUExpresso, lwIP
4
Averages 9.7
STM32Cube
STM32Cube FatFS
STM32Cube, lwIP
STM32Cube, lwIP
STM32Cube, lwIP
STM32Cube, lwIP
STM32Cube, lwIP, STM-WiFi Clock, Timer, STM-WiFI, UART, SPI
MCUExpresso
UART, GPIO
GPIO, SD Card, Clock
Ethernet, Clock, GPIO, EXTI
Ethernet, Clock
Ethernet, Clock, GPIO, EXTI
Ethernet, Clock
UART
UART, Ethernet
UART, Ethernet
UART, Ethernet
















184
344
265
121
122
40
41
32
40
31
33
54
107
54
54
56
98.7
QEMU
BB EBC BB Fwd R/W EBC
Avatar2
HALucinator
BB Funcs. MMIO EBC
4 
43
28 
920
24 
1,584
36 
2,734
36 
2,474
66
7 
25 
625
10 
732
10 
568
10 
1,110
10 
1,002
713
41 
28 
82
43 
805
43 
1,173
1,756
45 
1024.2
5
14
8
21
21
10
18
16
15
16
15
17
6
13
14
14
13.9
25.0
467
554
935
521
903
17
17
15
17
15
15
17












1,766 



66
66
68
341.2
Table 3: Comparison of QEMU, Avatar2, and HALucinator.
basic blocks (on STM PLC). Avatar2’s MMIO forwarding
enables executing further into the ﬁrmware (the average num-
ber of basic blocks increases from 9.7 to 98.7), but quickly
runs into problems. All the STM samples and the NXP UDP,
TCP, and HTTP samples enable the SysTick timer early in
their initialization. The SysTick timer is part of the Cortex-M
architecture and implemented in QEMU. The emulation
is signiﬁcantly slower than the actual hardware thus, when
SysTick is enabled QEMU is quickly overwhelmed with
interrupts. It is unable to ﬁnish handling one interrupt before
the next occurs. HALucinator intercepts the HAL functions
that initialize the SysTick timer and substitutes a counter to
keep time; enabling it to avoid this problem. All the Atmel
ﬁrmware samples halt when the debugger fails to write an
MMIO address on the board. The debugger does not give any
indication why this occurs. In most cases, the debugger has
successfully written the address previously, implying the error
is not that the address is invalid. This highlights one of the
challenges of emulating with hardware-in-the-loop. The emu-
lator, debugger, and board must be synchronized and execute
without error in unison to enable successful emulation. Even
if the debugger worked reliably, the ﬁrmware samples depend
on interrupts, which Avatar2 does not synchronize with the
emulator and thus they would still fail to execute correctly.
This experiment shows how HALucinator enables the em-
ulation of complex ﬁrmware that exhibits the same external
functionality as the ﬁrmware executing on real hardware,
which existing approaches cannot do. HALucinator executed
more than 1,000 basic blocks on average, 10x more than
Avatar2, on our sample ﬁrmware. The emulation of four dif-
ferent boards from three different manufactures demonstrates
the ability of HLE to support a wide variety of hardware, and
the reuse of the same peripheral models for all boards shows
their scalability across vendors and hardware platforms.
5.4 Fuzzing with HALucinator
We now demonstrate that HALucinator’s emulation is useful
for dynamic analysis by fuzzing the network connected
Time
Name
Executions Total Paths Crashes
WYCINWYC
1d:0h
5
1,548,582
Atmel lwIP HTTP (Ethernet) 19d:4h
273
37,948,954
Atmel lwIP HTTP (TCP)
0d:10h
2,645,393
38
1d:10
0
1,876,531
Atmel 6LoWPAN Sender
1d:10
Atmel 6LoWPAN Receiver
3
2,306,569
3d:8h