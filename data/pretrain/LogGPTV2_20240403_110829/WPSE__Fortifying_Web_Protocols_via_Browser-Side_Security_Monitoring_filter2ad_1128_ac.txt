constraint uri1 = uri2 in the integrity policy πI is vi-
olated. Thus, no transition is enabled for the state access
and the request is blocked by WPSE, therefore prevent-
ing the attack.
4.2 Attacks Against SAML
The Security Assertion Markup Language (SAML)
2.0 [34] is an open standard for sharing authentication
and authorization across a multitude of domains. SAML
is based on XML messages called assertions and deﬁnes
different proﬁles to account for a variety of use cases and
USENIX Association
27th USENIX Security Symposium    1499
C
1○ URI
SP
IdP
2○ SAMLRequest=AuthnRequest, RelayState=URI
3○ login form
User credentials
4○ SAMLResponse=Response, RelayState=URI
5○ URI
6○ resource
Figure 3: SAML 2.0 SP-Initiated SSO with Redirect/POST Bindings.
deployment scenarios. SSO functionality is enabled by
the SAML 2.0 web browser SSO proﬁle, whose typi-
cal use case is the SP-Initiated SSO with Redirect/POST
Bindings [33, 4]. Similarly to OAuth 2.0, there are three
entities involved: a user controlling a web browser (C),
an identity provider (IdP) and a service provider (SP).
The protocol prescribes how C can access a resource pro-
vided by an SP after authenticating with an IdP.
The relevant steps of the protocol are depicted in Fig-
ure 3. In step 1(cid:13), C requests from SP the resource lo-
cated at URI; in 2(cid:13) the SP redirects the browser to the
IdP sending an AuthnRequest XML message in deﬂated,
base64-encoded form and a RelayState parameter; C pro-
vides his credentials to the IdP in step 3(cid:13) where they are
veriﬁed; in step 4(cid:13) the IdP causes the browser to issue
a POST request to the Assertion Consumer Service at
the SP containing the base64-encoded SamlResponse and
the RelayState parameters; in 5(cid:13) the SP processes the re-
sponse, creates a security context at the service provider
and redirects C to the target resource at URI; given that
a security context is in place, the SP provider returns the
resource to C.
The RelayState is a mechanism for preserving some
state information at the SP, such as the resource URI re-
quested by the user [20].
If the RelayState parameter
is used within a request message, then subsequent re-
sponses must maintain the exact value received with the
request [35]. A violation of this constraint enables at-
tacks such as [3], in which C requests a resource URIi at
a malicious SPi. SPi pretends to be C at the honest SP
and requests a different resource at SP located at URISP
which is returned to SPi. The malicious service provider
replies to C by providing a redirection address containing
a different resource URI, thus causing the browser to send
URIi instead of instead of URI as the value of RelayState
at steps 2(cid:13), 4(cid:13). The result is that C forcibly accesses a
resource at SP, while he originally asked for a resource
from SPi.
Interestingly, by using WPSE it is possible to instruct
the browser with knowledge of the protocol in such a way
that the client can verify whether the requests at steps
2(cid:13), 4(cid:13) are related to the initial request. We distilled a
simple policy for the SAML 2.0 web browser SSO pro-
ﬁle that enforces an integrity constraint on the value of
the RelayState parameter, thus blocking requests to un-
desired resources due to a violation of the policy.
Furthermore, SAML 2.0 does not specify any way to
maintain a contextual binding between the request at step
2(cid:13) and the request at step 4(cid:13).
It follows that only the
SAMLResponse and RelayState parameters are enough
to allow C to access the resource at URI. We discov-
ered that this shortcoming in the protocol has a critical
impact on real SPs using the SAML-based SSO proﬁle
described in this section. Indeed, we managed to mount
an attack against Google that allows a web attacker to
authenticate any user on Google’s suite applications un-
der the attacker’s account, with effects similar to a Login
CSRF attack. Since Google can act as a Service Provider
(SP) with a third party IdP, an attacker registered to a
given IdP can simulate a login attempt with his legiti-
mate credentials to obtain a valid POST request to the
Google assertion consumer service (step 4(cid:13)). Once ac-
cessed, a malicious web page can then cause a victim’s
browser to issue the attacker’s request to the Google as-
sertion consumer service, thus forcing the victim inside
the attacker’s controlled authenticated session.
The vulnerability can be exploited by any web attacker
with a valid account on a third party IdP that uses Google
as SP. In particular, our university uses SAML 2.0 with
Google as a Service provider to offer email and storage
1500    27th USENIX Security Symposium
USENIX Association
facilities to students and employees. We have imple-
mented the attack by constructing a malicious webpage
that silently performs a login on Google’s suite applica-
tions using one of our personal accounts. The vulnera-
bility allows the attacker to access private information of
the victim that has been saved in the account, such as ac-
tivity history, notes and documents. We have responsibly
reported this vulnerability to Google who rewarded us
according to their bug bounty program. As soon as they
are available, we will provide on our website the details
of the ﬁxes that Google is implementing to resolve the
issue [14].
From the browser standpoint, this attack is clearly
caused by a violation of the protocol ﬂow given that steps
1(cid:13)- 3(cid:13) are carried out by the attacker and step 4(cid:13) and sub-
sequent ones involve the victim. WPSE identiﬁes the
outgoing request to the IdP as a protocol ﬂow deviation,
thereby preventing the attack.
4.3 Out-of-Scope Attacks
We have shown that WPSE is able to block a wide range
of attacks on existing web protocols. However, some
classes of attacks cannot be prevented by browser-side
security monitoring. Speciﬁcally, WPSE cannot prevent:
1. attacks which do not deviate from the expected pro-
tocol ﬂow. An example of such an attack against
OAuth 2.0 is the automatic login CSRF attack pre-
sented in [6], which exploits the lack of CSRF pro-
tection on the login form of the relying party to
force an authentication to the identity provider. This
class of attacks can be prevented by implementing
appropriate defenses against known web attacks;
2. attacks which cause deviations from the expected
protocol ﬂow that are not observable by the browser.
In particular, this class of attacks includes network
attacks, where the attacker corrupts the trafﬁc ex-
changed between the protocol participants. For in-
stance, a network attacker can run the IdP mix-up
attack from [19] when the ﬁrst step of OAuth 2.0
is performed over HTTP. This class of attacks can
be prevented by making use of HTTPS, preferably
backed up by HSTS;
3. attacks which do not involve the user’s browser at
all. An example is the impersonation attack on
OAuth 2.0 discussed in [43], where public infor-
mation is used for authentication. Another exam-
ple is the DuoSec vulnerability found on several
SAML implementations [30] that exploits a bug in
the XML libraries used by SPs to parse SAML mes-
sages. This class of attacks must be necessarily
solved at the server side.
5 Experimental Evaluation
Having discussed how WPSE can prevent several real-
world attacks presented in the literature, we ﬁnally move
to on-ﬁeld experiments. The goal of the present sec-
tion is assessing the practical security beneﬁts offered
by WPSE on existing websites in the wild, as well as to
test the compatibility of its browser-side security mon-
itoring with current web technologies and programming
practices. To this end, we experimentally assessed the ef-
fectiveness of WPSE by testing it against websites using
OAuth 2.0 to implement SSO at high-proﬁle IdPs.
5.1 Experimental Setup
We developed a crawler to automatically identify exist-
ing OAuth 2.0 implementations in the wild. Our analysis
is not meant to provide a comprehensive coverage of the
deployment of OAuth 2.0 on the web, but just to identify
a few popular identity providers and their relying parties
to carry out a ﬁrst experimental evaluation of WPSE.
We started from a comprehensive list of OAuth 2.0
identity providers6 and we collected for each of them
the list of the HTTP(S) endpoints used in their imple-
mentation of the protocol. Inspired by [45], our crawler
looks for login pages on websites to ﬁnd syntactic occur-
rences of these endpoints: after accessing a homepage,
the crawler extracts a list of (at most) 10 links which may
likely point to a login page, using a simple heuristic. It
also retrieves, using the Bing search engine, the 5 most
popular pages of the website. For all these pages, the
crawler checks for the presence of the OAuth 2.0 end-
points in the HTML code and in the 5 topmost scripts
included by them. By running our crawler on the Alexa
100k top websites, we found that Facebook (1,666 web-
sites), Google (1,071 websites) and VK (403 websites)
are the most popular identity providers in the wild.
We then developed a faithful XML representation of
the OAuth 2.0 implementations available at the selected
identity providers. There is obviously a large overlap be-
tween these speciﬁcations, though slight differences are
present in practice, e.g., the use of the response type
parameter is mandatory at Google, but can be omitted
at Facebook and VK to default to the authorization code
mode. For the sake of simplicity, we decided to model
the most common use case of OAuth 2.0, i.e., we as-
sume that the user has an ongoing session with the iden-
tity provider and that authorization to access the user’s
resources on the provider has been previously granted to
the relying party. For each identity provider we devised
a speciﬁcation that supports the OAuth 2.0 authorization
code and implicit modes, with and without the optional
6 https://en.wikipedia.org/wiki/List_of_OAuth_
providers
USENIX Association
27th USENIX Security Symposium    1501
state parameter, leading to 4 possible execution paths.
Finally, we created a dataset of 90 websites by sampling
30 relying parties for each identity provider, covering
both the authorization code mode and the implicit mode
of OAuth 2.0. We have manually visited these websites
with a browser running WPSE both to verify if the proto-
col run was completed successfully and to assess whether
all the functionalities of the sites were working properly.
In the following we report on the results of testing our ex-
tension against these websites from both a security and a
compatibility point of view.
5.2 Security Analysis
We devised an automated technique to check whether
WPSE can stop dangerous real-world attacks. Since we
did not want to attack the websites, we focused on two
classes of vulnerabilities which are easy to detect just
by navigating the websites when using WPSE. The ﬁrst
class of vulnerabilities enables conﬁdentiality violations:
it is found when one of the placeholders generated by
WPSE to enforce its secrecy policies is sent to an unin-
tended web origin. The second class of vulnerabilities,
instead, is related to the use of the state parameter:
if
the state parameter is unused or set to a predictable static
value, then session swapping becomes possible (see Sec-
tion 2.2). We can detect these cases by checking which
protocol speciﬁcation is enforced by WPSE and by mak-
ing the state parameter secret, so that all the values bound
to it are collected by WPSE when they are substituted by
the placeholders used to enforce the secrecy policy.
We observed that our extension prevented the leakage
of sensitive data on 4 different relying parties. Interest-
ingly, we found that the security violation exposed by the
tool are in all cases due to the presence of tracking or ad-
vertisements libraries such as Facebook Pixel,7 Google
AdSense,8 Heap9 and others. For example, this has been
observed on ticktick.com, a website offering collabo-
rative task management tools. The leakage is enabled by
two conditions:
1. the website allows its users to perform a login via
Google using the implicit mode;
2. the Facebook tracking library is embedded in the
page which serves as redirect URI.
Under these settings, right after step 4(cid:13) of the proto-
col, the tracking library sends a request to https://
www.facebook.com/tr/ with the full URL of the cur-
rent page, which includes the access token issued by
7 https://www.facebook.com/business/a/facebook-
pixel
8 https://www.google.com/adsense
9 https://heapanalytics.com/
Google. We argue that this is a critical vulnerability,
given that leaking the access token to an unauthorized
party allows unintended access to sensitive data owned
by the users of the affected website. We promptly re-
ported the issue to the major tracking library vendors
and the vulnerable websites. Library vendors informed
us that they are not providing any ﬁx since it is a respon-
sibility of web developers to include the tracking library
only in pages without sensitive contents.10
For what concerns the second class of vulnerabilities,
55 out of 90 websites have been found affected by the
lack or misuse of the state parameter. More in detail,
we identiﬁed 41 websites that do not support it, while
the remaining 14 websites miss the security beneﬁt of
the state parameter by using a predictable or constant
string as a value. We claim that such disheartening situa-
tion is mainly caused by the identity providers not setting
this important parameter as mandatory. In fact, the state
parameter is listed as recommended by Google and op-
tional by VK. On the other hand, Facebook marks the
state parameter as mandatory in its documentation, but
our experiments showed that it fails to fulﬁll the require-
ment in practice. Additionally, it would be advisable to
clearly point out in the OAuth 2.0 documentation of each
provider the security implications of the parameter. For
instance, according to the Google documentation,11 the
state parameter can be used “for several purposes, such
as directing the user to the correct resource in your appli-
cation, sending nonces, and mitigating cross-site request
forgery”: we believe that this description is too vague
and opens the door to misunderstandings.
5.3 Compatibility Analysis
To detect whether WPSE negatively affects the web
browser functionality, we performed a basic navigation
session on the websites in our dataset. This interaction
includes an access to their homepage, the identiﬁcation
of the SSO page, the execution of the OAuth 2.0 proto-
col, and a brief navigation of the private area of the web-
site. In our experiments, the usage of WPSE did not im-
pact in a perceivable way the browser performance or the
time required to load webpages. We were able to navi-
gate 81 websites ﬂawlessly, but we also found 9 websites
where we did not manage to successfully complete the
protocol run.
In all the cases, the reason for the compatibility is-
sues was the same, i.e., the presence of an HTTP(S) re-
quest with a parameter called code after the execution
of the protocol run. This message has the same syntactic
10 See, for instance, Google AdSense program policy available at
https://support.google.com/adsense/topic/6162392
11 https://developers.google.com/identity/protocols/
OAuth2WebServer
1502    27th USENIX Security Symposium
USENIX Association
structure as the last request sent as part of the authoriza-
tion code mode of OAuth 2.0 and is detected as an attack
when our security monitor moves back to its initial state
at the end of the protocol run, because the message is
indistinguishable from a session swapping attempt (see
Section 2.2). We manually investigated all these cases: 2
of them were related to the use of the Gigya social login
provider, which offers a uniﬁed access interface to many
identity providers including Facebook and Google; the
other 7, instead, were due to a second exchange of the au-
thorization code at the end of the protocol run. We were
able to solve the ﬁrst issue by writing an XML speciﬁca-
tion for Gigya (limited to Facebook and Google), while
the other cases openly deviate from the OAuth 2.0 spec-
iﬁcation, where the authorization code is only supposed
to be sent to the redirect URI and delivered to the relying
party from there. These custom practices are hard to ex-
plain and to support and, unsurprisingly, may introduce
security ﬂaws. In fact, one of the websites deviating from
the OAuth 2.0 speciﬁcation suffers from a serious secu-
rity issue, because the authorization code is ﬁrst com-
municated to the website over HTTP before being sent
over HTTPS, thus becoming exposed to network attack-
ers. We responsibly disclosed this security issue to the
website owners.
In the end, all the compatibility issues we found boil
down to the fact that a web protocol message has a rela-
tively weak syntactic structure, which may end up match-
ing a custom message used by websites as part of their
functionality. We think that most of these issues can be
robustly solved by using more explicit message formats
for standardized web protocols like OAuth 2.0: explic-
itness is indeed a widely recognized prudent engineer-
ing practice for traditional security protocols [1]. Having
structured message formats could be extremely helpful
for a precise browser-side fortiﬁcation of web protocols
which minimizes compatibility issues.
6 Formal Guarantees
Now we formally characterize the security guarantees of-
fered by our monitoring technique. Here we provide an
intuitive description of the formal result, referring the in-
terested reader to [15] for a complete account.
The formal result states that given a web protocol that
is proven secure for a set of network participants and an
uncorrupted client, by our monitoring approach we can