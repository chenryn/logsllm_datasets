代码来源：
# **0x01 前言**
也是某天闲的无聊，看到CVE上有个老哥提了一个SQL的注入漏洞，就借此分析学习了一波。
# **0x02 分析过程**
本地搭建了环境，最终产生SQL注入的代码位于inc/Lib/Core/Db.class.php
    // where子单元分析
        protected function parseWhereItem($key,$val) {
            $whereStr = '';
            if(is_array($val)) {
                if(is_string($val[0])) {
                    if(preg_match('/^(EQ|NEQ|GT|EGT|LT|ELT)$/i',$val[0])) { // 比较运算
                        $whereStr .= $key.' '.$this->comparison[strtolower($val[0])].' '.$this->parseValue($val[1]);
                    }elseif(preg_match('/^(NOTLIKE|LIKE)$/i',$val[0])){// 模糊查找
                        if(is_array($val[1])) {
                            $likeLogic  =   isset($val[2])?strtoupper($val[2]):'OR';
                            if(in_array($likeLogic,array('AND','OR','XOR'))){
                                $likeStr    =   $this->comparison[strtolower($val[0])];
                                $like       =   array();
                                foreach ($val[1] as $item){
                                    $like[] = $key.' '.$likeStr.' '.$this->parseValue($item);
                                }
                                $whereStr .= '('.implode(' '.$likeLogic.' ',$like).')';                          
                            }
                        }else{
                            $whereStr .= $key.' '.$this->comparison[strtolower($val[0])].' '.$this->parseValue($val[1]);
                        }
                    }elseif('exp'==strtolower($val[0])){ // 使用表达式
                        $whereStr .= ' ('.$key.' '.$val[1].') ';
                    }elseif(preg_match('/IN/i',$val[0])){ // IN 运算
                        if(isset($val[2]) && 'exp'==$val[2]) {
                            $whereStr .= $key.' '.strtoupper($val[0]).' '.$val[1];
                        }else{
                            if(is_string($val[1])) {
                                 $val[1] =  explode(',',$val[1]);
                            }
                            $zone      =   implode(',',$this->parseValue($val[1]));
                            $whereStr .= $key.' '.strtoupper($val[0]).' ('.$zone.')';
                        }
                    }elseif(preg_match('/BETWEEN/i',$val[0])){ // BETWEEN运算
                        $data = is_string($val[1])? explode(',',$val[1]):$val[1];
                        $whereStr .=  ' ('.$key.' '.strtoupper($val[0]).' '.$this->parseValue($data[0]).' AND '.$this->parseValue($data[1]).' )';
                    }else{
                        throw_exception(L('_EXPRESS_ERROR_').':'.$val[0]);
                    }
                }else {
                    $count = count($val);
                    $rule  = isset($val[$count-1])?strtoupper($val[$count-1]):'';
                    if(in_array($rule,array('AND','OR','XOR'))) {
                        $count  = $count -1;
                    }else{
                        $rule   = 'AND';
                    }
                    for($i=0;$icomparison[strtolower($val[$i][0])]:'=';
                            $whereStr .= '('.$key.' '.$op.' '.$this->parseValue($data).') '.$rule.' ';
                        }
                    }
                    $whereStr = substr($whereStr,0,-4);
                }
            }else {
                //对字符串类型字段采用模糊匹配
                if(C('DB_LIKE_FIELDS') && preg_match('/('.C('DB_LIKE_FIELDS').')/i',$key)) {
                    $val  =  '%'.$val.'%';
                    $whereStr .= $key.' LIKE '.$this->parseValue($val);
                }else {
                    $whereStr .= $key.' = '.$this->parseValue($val);
                }
            }
            return $whereStr;
        }
这是一个where查询的解析函数，可以看到这里根据val的类型和值进行了多个if判断，发现基本上每个条件判断里都有一个parseValue函数，我们跟进去看一下。
    protected function parseValue($value) {
            if(is_string($value)) {
                $value =  '\''.$this->escapeString($value).'\'';
            }elseif(isset($value[0]) && is_string($value[0]) && strtolower($value[0]) == 'exp'){
                $value =  $this->escapeString($value[1]);
            }elseif(is_array($value)) {
                $value =  array_map(array($this, 'parseValue'),$value);
            }elseif(is_bool($value)){
                $value =  $value ? '1' : '0';
            }elseif(is_null($value)){
                $value =  'null';
            }
            return $value;
        }
基本上调用parseValue的查询都会被增加转义符，理论上无法直接存在注入。但是仔细看可以发现，里面有一个诡异的判断：
这两个条件并没有调用parseValue，而是直接拼接了val数组的值。  
所以存在两种情况可以绕过这个parseValue：
  1. val[0] == 'exp', val[1] == payload；
  2. val[2] == 'exp', val[0] == payload 或val[1] == payload；  
很奇怪啊这个地方，非常不理解为啥排除了这两个地方的过滤。  
后面就是找到调用关系就行了，全局搜了下parseWhereItem的调用地方，全部出现在parseWhere函数中：
        protected function parseWhere($where) {
         $whereStr = '';
         if(is_string($where)) {
             // 直接使用字符串条件
             $whereStr = $where;
         }else{ // 使用数组表达式
             $operate  = isset($where['_logic'])?strtoupper($where['_logic']):'';
             if(in_array($operate,array('AND','OR','XOR'))){
                 // 定义逻辑运算规则 例如 OR XOR AND NOT
                 $operate    =   ' '.$operate.' ';
                 unset($where['_logic']);
             }else{
                 // 默认进行 AND 运算
                 $operate    =   ' AND ';
             }
             foreach ($where as $key=>$val){
                 $whereStr .= '( ';
                 if(is_numeric($key)){
                     $key  = '_complex';
                 }                    
                 if(0===strpos($key,'_')) {
                     // 解析特殊条件表达式
                     $whereStr   .= $this->parseThinkWhere($key,$val);
                 }else{
                     // 查询字段的安全过滤
                     if(!preg_match('/^[A-Z_\|\&\-.a-z0-9\(\)\,]+$/',trim($key))){
                         throw_exception(L('_EXPRESS_ERROR_').':'.$key);
                     }
                     // 多条件支持
                     $multi  = is_array($val) &&  isset($val['_multi']);
                     $key    = trim($key);
                     if(strpos($key,'|')) { // 支持 name|title|nickname 方式定义查询字段
                         $array =  explode('|',$key);
                         $str   =  array();
                         foreach ($array as $m=>$k){
                             $v =  $multi?$val[$m]:$val;
                             $str[]   = '('.$this->parseWhereItem($this->parseKey($k),$v).')';