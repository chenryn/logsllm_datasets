### 5.2 Shell的父子关系

#### 5.2.1 进程列表

在Linux系统中，Shell允许用户通过命令行参数来修改其启动方式。表5-1列出了bash中可用的命令行参数。

**表5-1 bash命令行参数**

| 参数 | 描述 |
| --- | --- |
| `-c string` | 从字符串`string`中读取并执行命令 |
| `-i` | 启动一个能够接收用户输入的交互式Shell |
| `--login` | 以登录Shell的形式启动 |
| `--restricted` | 启动一个受限Shell，用户会被限制在默认目录中 |
| `-s` | 从标准输入中读取命令 |

要获取更多关于bash命令的帮助信息，可以使用`man bash`或`bash --help`命令。

退出子shell时，可以使用`exit`命令。例如：

```bash
$ exit
```

此外，`exit`命令还可以用来登出当前的虚拟控制台终端或终端仿真器软件。

运行Shell脚本也会创建子shell。有关这方面的更多信息将在第11章中介绍。

即使不使用bash命令或运行Shell脚本，也可以生成子shell。一种方法是使用进程列表。你可以在一行中指定一系列依次执行的命令，只需在命令之间加入分号（`;`）。例如：

```bash
$ pwd; ls; cd /etc; pwd; cd; pwd; ls
```

然而，这并不是真正的进程列表。要创建进程列表，必须将这些命令用括号包围起来。例如：

```bash
$ (pwd; ls; cd /etc; pwd; cd; pwd; ls)
```

括号的使用使命令列表变成了进程列表，并生成了一个子shell来执行这些命令。

另一种命令分组的方法是使用花括号 `{}`，并在命令列表尾部加上分号（`;`）。例如：

```bash
$ { pwd; ls; cd /etc; pwd; cd; pwd; ls; }
```

使用花括号进行命令分组不会像进程列表那样创建子shell。

要确定是否生成了子shell，可以使用环境变量`BASH_SUBSHELL`。如果`echo $BASH_SUBSHELL`返回0，表示没有子shell；如果返回1或其他更大的数字，则表示存在子shell。例如：

```bash
$ pwd; ls; cd /etc; pwd; cd; pwd; ls; echo $BASH_SUBSHELL
```

输出结果为0，表明这些命令不在子shell中运行。

如果使用进程列表：

```bash
$ (pwd; ls; cd /etc; pwd; cd; pwd; ls; echo $BASH_SUBSHELL)
```

输出结果为1，表明确实创建了子shell来执行这些命令。

你甚至可以在命令列表中嵌套括号来创建子shell的子shell。例如：

```bash
$ (pwd; echo $BASH_SUBSHELL)
/home/ChriatLne
1

$ (pwd; (echo $BASH_SUBSHELL))
/home/ChriatLne
2
```

在第二个例子中，额外的一对括号在子shell中创建了另一个子shell，因此输出结果为2。

在Shell脚本中，经常使用子shell进行多进程处理，但这样做会显著降低处理速度。在交互式的CLI Shell会话中，子shell同样存在问题，因为终端控制着子shell的I/O。

#### 5.2.2 别出心裁的子shell用法

在交互式Shell CLI中，有许多富有成效的子shell用法。进程列表、协程和管道（将在第11章中介绍）都利用了子shell。

##### 1. 探索后台模式

在后台模式中运行命令可以让CLI在处理命令的同时继续使用。经典的后台模式示例是`sleep`命令。例如：

```bash
$ sleep 10 &
[1] 2396
```

使用`ps -f`命令可以查看后台进程的状态：

```bash
$ ps -f
UID        PID  PPID  C STIME TTY          TIME CMD
christine  2396 2338  0 10:17 pts/9    00:00:00 sleep 10
christine  2397 2338  0 10:17 pts/9    00:00:00 ps -f
```

`jobs`命令可以显示当前运行在后台模式中的所有用户的进程（作业）：

```bash
$ jobs
[1]+  Running                 sleep 10 &
```

使用`jobs -l`选项可以显示更多的相关信息，包括PID：

```bash
$ jobs -l
[1]+  2396 Running                 sleep 10 &
```

当后台作业完成时，会显示出结束状态：

```bash
[1]+  Done                    sleep 10 &
```

##### 2. 将进程列表置入后台

将进程列表置入后台模式可以使CLI在处理任务的同时保持可用。例如：

```bash
$ (sleep 2; echo $BASH_SUBSHELL; sleep 2) &
[2] 2401
```

在命令输出上，子shell的标识数字1会出现在提示符旁边。按回车键后会返回新的提示符。

##### 3. 协程

协程可以在后台生成一个子shell，并在其中执行命令。使用`coproc`命令可以实现这一点。例如：

```bash
$ coproc sleep 10
[1] 2544
```

`jobs`命令可以显示协程的处理状态：

```bash
$ jobs
[1]+  Running                 coproc COPROC sleep 10 &
```

可以通过扩展语法为协程命名。例如：

```bash
$ coproc My_Job { sleep 10; }
[1] 2570
$ jobs
[1]+  Running                 coproc My_Job { sleep 10; } &
```

注意，扩展语法需要在第一个花括号（`{`）和命令名之间有一个空格，并且命令以分号（`;`）结尾。

通过这些方法，你可以在CLI中创造性地使用子shell，从而更高效地处理任务。