error message. The bank gets either some trace
information that it stores in a database, or an
error message.
is
Spend(U(W, pkM),M(skM, pkB, n)) This is a protocol
between a user U and a merchant M that transfers
one coin from the user’s wallet W to the merchant.
The merchant gets an e-coin coin and the user
updates his wallet to contain one less coin.
Deposit(M(skM, coin, pkB),B(pkM, skB)) This
is a
protocol between a merchant M and a bank B
that lets the merchant deposit a coin he got from
a customer into his bank account.
PublicSecurityProtocols(protocol , params, arglist) This
is a set of
functions that can be invoked by
anybody to identify double spenders and verify
their guilt.
The bank ﬁnds double-spenders,
but it must be able to convince everyone else.
The Camenisch et al. protocols [CHL05] include
Identify(params, coin1 , coin2 ) to identify a double
spender, VerifyGuilt(params, coin, pkU , proof ) to
publicly verify that user U had double spent a coin,
Trace(params, coin, pkU , proof , database) to ﬁnd
all coins spent by a guilty user, VerifyOwnership
(params, coin, proof , pkU) to verify that a guilty
user spent a particular coin. The exact set of
functions depends on the e-cash system and its
desired security properties.
The security properties of an e-cash system depend
on the model we use: plain, random oracle, common
random string, etc. Here we sketch what an adversary
must do to defeat the e-cash system and explain where
the properties of the security model come into play;
we refer the reader to Camenisch et al. [CHL05]. We
require four properties from an e-cash system:
Correctness: If an honest user runs Withdraw with
an honest bank, then neither outputs error; if an honest
user runs Spend with an honest merchant, then the
merchant accepts the coin.
Anonymity: Even if a malicious bank conspires
with one or more malicious merchants, the bank cannot
link a user to any coins he spends. We create a simula-
tor S and give it special powers (e.g. control of random
oracle, ability to generate common parameters, control
of key generation). The simulator should be able to
run the Spend protocol without knowing any informa-
tion about any user’s wallet or public/secret-key pair.
Formally, we create an adversary A that plays the
part of the bank and of all merchants. A creates the
bank’s public-key pkB. Then, A gets access to an in-
terface Game that plays either the real or ideal game;
A must determine which. A can make four types of
queries to Game:
GameSetup(1k) generates
params and private parameters auxsim for S.
the
public
parameters
GameGetPK(i) returns the public-key of user Ui, gen-
erated by UKeygen(1k, params).
GameWithdraw(i) runs the Withdraw protocol with
user Ui: Withdraw(Ui(pkB, ski, n),A(state, n)).
(We use state to denote the state of the adversary;
it is updated throughout the course of protocol ex-
ecution). We call Wj the wallet generated the jth
time protocol Withdraw is run.
GameSpend(j) in the real game, this runs the spend
protocol with the user U that holds the wallet Wj:
Spend(U(Wj),A(state, n)). In the ideal game, S
pretends to be the user: Spend(S(params,
auxsim, pkB),A(state, n)); S does not have access
to the wallet Wj or know who owns it.
An adversary is legal if it never asks a user to double-
spend a coin:
for all j, the adversary never calls
GameSpend(j) more than n times (where n is the size
of the wallet). An e-cash scheme preserves anonymity
if, for all pkB, no computationally bounded legal ad-
versary can distinguish between the real game and the
ideal game with more than negligible probability.
Balance: No group of dishonest users and mer-
chants should be able to deposit more coins than
they withdraw. We assume that each coin has a se-
rial number (generated during the Withdraw protocol)
We create a knowledge extractor X that executes the
Withdraw protocol with u dishonest users and gener-
ates un coin serial numbers: S1, . . . , Sun (we assume
each user withdraws n coins). No adversary should be
able to successfully deposit a coin with serial number
S unless S ∈ {S1, . . . , Sun}. Again, X must have addi-
tional powers, such as control of the random oracle or
special knowledge about public parameters.
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007Culpability and Exculpability: Any user that
runs Spend twice on the same coin should be caught
by the bank; however, a malicious bank should not be
able to conspire with malicious merchants to frame an
honest user for double-spending. We omit the speciﬁcs
of these deﬁnitions and refer the reader to Camenisch
et al. [CHL05].
2.3 Deﬁnition of Endorsed E-Cash
Endorsed e-cash is similar to E-cash. The only dif-
ference is that spending a coin is split into two stages.
In the ﬁrst stage, a user gives a merchant a blinded
version of the coin, a.k.a. an unendorsed coin. An un-
endorsed coin is not a real coin and cannot be deposited
with the bank. A user is allowed to issue unendorsed
coins as often as he wants — it should be impossible to
link two unendorsed versions of the same coin. (This
is the chief diﬀerence between our solution and that of
Jakobsson [Jak95] and Asokan et al. [ASW00]). A user
can endorse a coin by giving a particular merchant the
information he needs to transform the unendorsed coin
into a real coin (i.e. an endorsed coin) that can be de-
posited with the bank. As long as a user endorses at
most one version of the same wallet coin, he is not a
double-spender and cannot be identiﬁed.
An endorsed e-cash system is almost identical to
a regular e-cash system, except Spend is replaced by
SplitCoin, ESpend, and Reconstruct. We deﬁne the
three new protocols:
SplitCoin(params, Wj, pkB) A user U can take a coin
from his wallet and generate (φ, x, y, coin0). The
value coin0 is a blinded version of the e-coin. The
function φ is a one-way homomorphic function,
such that φ(x) = y. The tuple (φ, x, y, coin0)
should have enough information to reconstruct the
e-coin.
ESpend(U(W, pkM),M(skM, pkB, n)) This is the en-
dorsed spend protocol. The user U privately runs
SplitCoin to generate (φ, x, y, coin0). The user
gives the merchant (φ, y, coin0), but keeps x for
himself. The merchant uses coin0 to verify the va-
lidity of the unendorsed coin.
Reconstruct(φ, x, y, coin0) This function (typically used
by a merchant) reconstructs a coin that can be
deposited with the bank if and only if φ(x) = y.
An endorsed e-cash scheme should have the same prop-
erties of correctness, anonymity, balance, culpability
and exculpability as an e-cash scheme. However, the
deﬁnitions must be slightly modiﬁed to ﬁt the new set
of protocols:
Correctness: (Informally), if an honest user runs
Withdraw with an honest bank, then neither will output
Anonymity:
an error message; if an honest user runs SplitCoin and
gives the resulting (φ, y, coin0) to an honest merchant
via the ESpend protocol, the merchant will accept; if an
honest merchant gets (φ, y, coin0) from an honest user
and learns the value x = φ−1(y), then he’ll be able to
use Reconstruct to generate a valid coin that an honest
bank will accept during the Deposit protocol.
Splitting a coin into two pieces:
(φ, y, coin0) and x should not increase the ability of a
consortium of a malicious bank and merchants to link
a coin to a user. Nor should an adversary be able to
link two unendorsed versions of the same coin to each
other. Once again, we create a simulator S and give
it special powers. The simulator should be able to run
the ESpend protocol without knowing any information
about any user’s wallet or public/secret-key pair.
Formally, we create an adversary A that plays the
part of the bank and of all merchants. A creates the
bank’s public-key pkB. Then, A gets access to an in-
terface Game that plays either a real game or an ideal
game; A must determine which. A can make ﬁve types
of queries to Game:
GameSetup(1k) generates
params and private parameters auxsim for S.
the
public
parameters
GameGetPK(i) returns the public-key of user Ui, gen-
erated by UKeygen(1k, params).
GameWithdraw(i) runs the Withdraw protocol with
user Ui: Withdraw(Ui(pkB, ski, n),A(state, n)).
We call Wj the wallet generated the jth time the
protocol Withdraw is run.
GameESpend(j, J) gives
the
adversary an unen-
dorsed coin number J from wallet Wj.
In
the real game, GameESpend runs the ESpend
protocol with the user U that holds the wal-
ESpend(U(Wj, J, pkB),A(state, n)).
let Wj:
the
the
In
part
of
the
protocol:
ESpend(S(params, auxsim, pkB),A(state, n)).
S knows nothing about the wallet Wj, the partic-
ular coin J requested, or the user who owns it. In
the end, the adversary gets the unendorsed coin
(φ, y, coin0).
game,
and
plays
the
S
runs
ideal
user
GameEndorse(φ, y, coin0) returns either the endorse-
ment x = φ−1(y) or an error message if the
protocol GameESpend has not previously issued
(φ, y, coin0).
called legal
to double-spend.
it never asks
An adversary is
a user
Suppose two separate
calls to GameESpend(j, J) result in the responses
(φ, y1, coin0
A legal adver-
sary never calls both GameEndorse(φ, y1, coin0
1) and
1) and (φ, y2, coin0
2).
if
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 20072).
GameEndorse(φ, y2, coin0
An endorsed e-cash
scheme preserves anonymity if no computationally
bounded legal adversary can distinguish between the
real and ideal game with more than negligible proba-
bility.
the
Balance: The balance property remains the same.
com-
Culpability and Exculpability: We
to cre-
bine SplitCoin, ESpend, and Reconstruct
to the
ate a protocol SPEND that corresponds
Spend protocol of a standard e-cash scheme. We
e-cash system EC =
need to show that
(BKeygen, UKeygen, Withdraw, SPEND, Deposit,
PublicSecurityProtocols) meets the culpability and ex-
culpability guarantees of a standard e-cash system.
We deﬁne SPEND(U(W, pkM),M(skM, pkB, n)) as fol-
lows: First, U calls SplitCoin(params, Wj,
pkB) to generate the tuple (φ, x, y, coin0) and sends it
to M. When M receives (φ, x, y, coin0), he veriﬁes
that (φ, y, coin0) is valid (as in ESpend), and checks if
φ(x) 6= y coin.
If either test fails, M rejects. Oth-
erwise, M creates the corresponding endorsed coin
coin = Reconstruct(φ, x, y, coin0). M stores coin un-
til he is ready to deposit it.
The culpability and exculpability properties provide
protection if the user issues only one unendorsed coin
per wallet coin – in this case, endorsed e-cash reduces
to standard e-cash. So what prevents dishonest mer-
chants from using an endorsement from one coin to
generate endorsements for other coins? If a merchant
successfully deposits a falsely endorsed coin with the
bank, then he violates the balance property.
If the
merchant uses the fake endorsement to frame a user
for double-spending, then he violates anonymity.
3 Endorsed E-Cash Instantiation
In this section we describe how to build an endorsed
e-cash system from the Camenisch, Hohenberger and
Lysyanskaya ([CHL05] Section 4.1) e-cash system, re-
ferred to as CHL in sequel. All we have to do is split
the CHL Spend protocol into (SplitCoin, Reconstruct,
ESpend). We review the CHL Spend protocol in Sec-
tion 3.1. Then we modify it to create an endorsed
e-cash system in Section 3.2 and prove it is secure in
Section 3.3. We construct a CHL-like on-line endorsed
e-cash system in Section 3.4.
3.1 CHL Compact E-Cash
CHL compact e-cash lets users withdraw several
coins at once. A user has a secret-key u ∈ Zq and
public-key gu. To withdraw n coins, the user ran-
domly chooses s, t ∈ Zq and obtains from the bank
a CL-signature σ on (u, s, t). A CL-signature [CL02,
CL04] lets the bank sign a message without learn-
ing what it is (though the bank learns some informa-
tion about σ). Now the user has a wallet of n coins:
(0, u, s, t, σ), . . . , (n − 1, u, s, t, σ).
To pay a merchant, the user constructs an e-coin
(S, T, Φ, R) from the wallet coin (J, u, s, t, σ) (see Algo-
rithm 3.1). S is a unique (with high probability) serial
number, (T, R) are needed to trace double-spenders —
knowing two diﬀerent (T, R) values corresponding to
the same wallet coin lets the bank learn the user’s iden-
tity, Φ is a zero-knowledge proof that tells the merchant
and bank that the e-coin is valid, and R is as hash of
the contract between the user and merchant and should
be unique to every transaction (this lets the bank use
(T, R) to catch double-spenders).
To deposit
and e-coin,
the merchant
gives
(S, T, Φ, R) to the bank, along with his public-key. The
bank checks whether it has already seen a coin with
serial number S – if yes, then the bank knows that
somebody is trying to double-spend because S is sup-
posed to be unique. If it has seen (S, R) before, then
the merchant is at fault because R is unique to ev-
ery transaction If the bank hasn’t seen (S, R) before,
then the user is at fault and the bank uses the values
(S, Told, Φold, Rold) and (S, T, Φ, R) to learn the double-
spending user’s identity. CHL ﬁnds double-spenders
in a manner similar to Chaum et al. [CFN90], but it
only learns the user’s public-key, and not his secret-
key (Camenisch et al’s extended solution also reveals
the secret-key). This distinction has great signiﬁcance
to fair exchange (Section 4).
Global parameters: Let k be the security parameter.
All computation is done in a group G, of prime order
q = Θ(2k), with generator g. We assume there is a
public-key infrastructure.
Spend lets a user U pay a merchant M the wallet
coin (J, u, s, t, σ): First, the user and merchant agree on
a contract contract (we assume each contract is unique
per merchant). The merchant gives the user his public
key pkM. Then, the user runs CalcCoin, as deﬁned in
Algorithm 3.1, to create the coin (S, T, Φ, R) and sends
it to the merchant. Finally, the merchant veriﬁes Φ to
check the validity of the coin (S, T, Φ, R).
Eﬃciency: CalcCoin uses the Dodis-Yampolskiy
pseudo-random function [DY05] to instantiate Fs(x) =
g1/(s+x+1). As a result, a user must compute seven
multi-base exponentiations to build the commitments
and eleven more for the proof. The merchant and bank
need to do eleven multi-base exponentiations to check
that the coin is valid.
Security: CHL requires (1) the security of a CL-