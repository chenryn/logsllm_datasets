55.JumpGame
题目
Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Determine if you are able to reach the last index.
Example 1:
Input: [2 , 3, 1,1, 4]
output: true
Example 2:
Input: [3 , 2, 1, 0, 4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
jump length is 0, which makes it impossible to reach the 1ast
index.
题目大意
给定一个非负整数数组，最初位于数组的第一个位置。数组中的每个元素代表在该位置可以跳跃的最大
长度。判断是否能够到达最后一个位置。
解题思路
·给出一个非负数组，要求判断从数组0下标开始，能否到达数组最后一个位置。
·这一题比较简单。如果某一个作为起跳点的格子可以跳跃的距离是n，那么表示后面n个格子
都可以作为起跳点。可以对每一个能作为起跳点的格子都尝试跳一次，把能跳到最远的距离
maxJump不断更新。如果可以一直跳到最后，就成功了。如果中间有一个点比maxJump还要
大，说明在这个点和maxump中间连不上了，有些点不能到达最后一个位置。
代码
func canJump(nums[]int) boo1{
n := 1en(nums)
if n == 0 {
return false
if n == 1 {
return true
0 =: duncxew
---
## Page 154
for i, v := range nums {
if i > maxJump {
return false
maxJump = max(maxJump,i+v)
return true
56.Merge Intervals
题目
Given a collection of intervals, merge all overlapping intervals.
Example 1:
Input: [[1,3], [2,6], [8,10], [15,18]]
Output: [[1,6], [8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:
Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
题目大意
合并给的多个区间，区间有重叠的要进行区间合并。
解题思路
先按照区间起点进行排序。然后从区间起点小的开始扫描，依次合并每个有重叠的区间。
代码
package leetcode
/☆
* Definition for an interval.
type Interval struct{
---
## Page 155
Start int
End
int
// Interval define
type Interval struct {
Start int
End
int
func merge56(intervals []Interval) []Interval {
if 1en(intervals) == 0 {
return intervals
quicksort(intervals, 0, len(intervals)-1)
res := make([]Interval, 0)
res = append(res, intervals[0])
curIndex :=0
for i := l; i  res[curIndex].End {
curIndex++
res = append(res, intervals[i])
}else{
res [curIndex] .End = max(intervals[i] .End, res [curIndex] .End)
return res
func max(a int, b int) int {
if a > b {
return a
return b
func min(a int,b int) int {
if a > b {
return b
return a
func partitionSort(a []Interval, lo, hi int) int {
[4]e =: 40d
i:= 1o - 1
for j := lo; j = hi {
return
p := partitionSort(a, lo, hi)
quicksort(a, lo, p-1)
quicksort(a, p+l, hi)
57.lnsertlnterval
题目
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if
necessary).
You may assume that the intervals were initially sorted according to their start times.
Example 1:
Input: intervals = [[1,3],[6,9]], newInterva] = [2,5]
Output: [[1,5],[6,9]]
Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterva] = [4,8]
Output: [[1, 2],[3,10], [12,16]]
Explanation: Because the new interva] [4,8] overlaps with [3,5],[6,7], [8,10]
题目大意
这一题是第56题的加强版。给出多个没有重叠的区间，然后再给一个区间，要求把如果有重叠的区间
进行合并。
---
## Page 157
解题思路
可以分3段处理，先添加原来的区间，即在给的newlnterval之前的区间。然后添加newlnterval，注
意这里可能需要合并多个区间。最后把原来剩下的部分添加到最终结果中即可。
代码
package leetcode
/*
* Definition for an interval.
type Interval struct {
Start int
End
int
*/
func insert(intervals []Interval, newInterval Interval) []Interval {
res := make([]Interval, 0)
if len(intervals) == 0 {
res = append(res, newInterval)
return res
curIndex := 0
for curIndex  n-1 11 y > n-1 11 × = 0 && visit[x][y-1]== 1 {
++punou
continue
case 3:
if x=1 >= 0 && visit[x-1][y]== 1 {
++punou
continue
return res
60.PermutationSequence
题目
---
## Page 160
The set [1, 2, 3,...,*n*]  contains a total of n! unique permutations.
: = u joj aouanbas gujmolo aun ja am 'apuo ul suogenad aua jo le suljaqei pue gugsll g
1."123"
2."132"
3. "213"
4. "231"
5. “312"
6."321"
Given n and k, return the kth permutation sequence.
Note:
● Given n will be between 1 and 9 inclusive.
● Given k will be between 1 and n! inclusive.
Example 1:
Input: n = 3, k = 3
Output: "213"
Example 2:
Input: n = 4, k = 9
Output: "2314"
题目大意
给出集合[1,2,3.,n]，其所有元素共有n！种排列。
按大小顺序列出所有排列情况，并一一标记，当n=3时，所有排列如
下：“123"，“132"，“213"，“231"，“312"，“321"，给定n和k，返回第k个排列。
解题思路
·用DFS暴力枚举，这种做法时间复杂度特别高，想想更优的解法。
代码
package leetcode
import（
---
## Page 161
...
"strconv"
func getPermutation(n int,k int) string {
if k == 0 {
return ""
used, p, res := make([]bool, n), []int{},
findPermutation(n， 0, &k, p, &res, &used)
return res
func findpermutation(n, index int, k *int, p []int, res *string， used *[]bool)
fmt.Printf("n = %v index = %v k = %v p = %v res = %v user = %v\n", n,index,
*k，p，*res，*used)
if index == n {
*k--
if *k ==
0{
for
v:=range p{
res += strconv.Itoa(v + 1)
return
for i := 0; i 2->3->4->5->NULL, k = 2
Output: 4>5>1->2->3>NULL
Exp1anation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:
Input: 0->1->2->NULL, k = 4
Output: 2->0>1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL
题目大意
旋转链表K次。
解题思路
这道题需要注意的点是，K可能很大，K=2000000000，如果是循环肯定会超时。应该找出O（n）的复
杂度的算法才行。由于是循环旋转，最终状态其实是确定的，利用链表的长度取余可以得到链表的最终
旋转结果。
这道题也不能用递归，递归解法会超时。
代码
package leetcode
/*
* Definition for singly-linked list.
* type ListNode struct {
valint
Next *ListNode
*/
func rotateRight(head *ListNode,k int) *ListNode {
if head == nil 11 head.Next == nil 11 k == 0 {
return head
---
## Page 163
newHead := &ListNode{Val: 0, Next: head}
1en := 0
cur := newHead
for cur.Next != nil{
1en++
cur = cur.Next
if (k % 1en） == 0 {
return head
cur.Next = head
cur = newHead
for i :=len -k%len; i > 0;i--{
cur = cur.Next
res := &ListNode{val: O, Next: cur.Next}
cur.Next = ni1
return res.Next
62. Unique Paths
题目
A robot is located at the top-left corner of a m x n grid (marked Start' in the diagram below).
a yeau o u s soqo au aw u nujod ue je tulu io umop jauja ao uo ue joqo au
bottom-right corner of the grid (marked *Finish' in the diagram below).
How many possible unique paths are there?
Above is a 7 x 3 grid. How many possible unique paths are there?
Note: m and n will be at most 100.
Example 1:
---
## Page 164
Input: m = 3,n =
output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-
right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right