high-level speciﬁcation called a ﬂow policy. IFC is sound
and conservative: if IFC approves a program, then the
program has no undesired information ﬂows, but if IFC
issues a warning, then the program might or might not
actually misbehave at run time. The guarantee is modulo
human examination of a small number of trusted assump-
tions to suppress false positive warnings, including ones
about indirect ﬂow through conditionals.
As shown in Fig. 1, a programmer using IFC provides
two kinds of information about the information ﬂows in
the program. First, the programmer provides a ﬂow policy
ﬁle, which describes the types of information ﬂows that
are permitted in the program (see Sect. 2.3). For example,
a simple app for recording audio to the ﬁle system would
have a ﬂow policy containing only RECORD_AUDIO→
FILESYSTEM. It would be suspicious if this app’s ﬂow pol-
icy contained RECORD_AUDIO→INTERNET, because that
ﬂow allows audio to be leaked to an attacker’s server.
Second, the programmer writes Java annotations to ex-
press the information ﬂow properties of method signatures
and ﬁelds. Each annotated type includes a set of sensitive
sources from which the data may have originated and a
set of sinks to which the data may be sent. For exam-
ple, the programmer of the audio recording app would
annotate the recorded data with @Source(RECORD_AUDIO)
@Sink(FILESYSTEM). IFC uses type-checking over an infor-
mation ﬂow type system to verify that the annotated code
is consistent with the ﬂow policy ﬁle.
2.1 Types: ﬂow sources and sinks
The type qualiﬁer @Source on a variable’s type indicates
what sensitive sources might affect the variable’s value.
The type qualiﬁer @Sink indicates where (information com-
puted from) the value might be output. These qualiﬁers
can be used on any occurrence of a type, including in type
parameters, object instantiation, and cast types.
As an example, consider the declaration
@Source(LOCATION) @Sink(INTERNET) double loc;
The type of variable loc is @Source(LOCATION) @Sink(INTER-
NET) double. The type qualiﬁer @Source(LOCATION) indi-
cates that the value of loc might have been derived
from location information. Similarly, the type qualiﬁer
@Sink(INTERNET) indicates that loc might be output to the
network. A programmer typically writes either @Source or
@Sink, but not both; see Sect. 2.6.
The arguments to @Source and @Sink are permissions
drawn from our enriched permission system (Sect. 2.2).
The argument may also be a set of permissions to indicate
that a value might combine information from multiple
sources or ﬂow to multiple locations.
2.2 Comparison to Android permissions
IFC’s permissions are ﬁner-grained than standard Android
manifest permissions in two ways. First, Android permits
any ﬂow between any pair of permissions in the manifest
— that is, an Android program may use any resource men-
tioned in the manifest in an arbitrary way. Second, IFC
reﬁnes Android’s permission, as we now discuss.
IFC’s permissions are not enforced at run time as An-
droid permissions are (potentially resulting in an excep-
tion during execution). Rather, they are statically guaran-
teed at compile time. Even if an app inherited a permis-
sion from another app with the same sharedUserId, IFC
will require that permission be listed in the ﬂow policy.
2.2.1 Restricting existing permissions
Android’s INTERNET permission represents all reachable
hosts on the Internet, which is too coarse-grained to ex-
press the developer’s intention. IFC allows this permis-
sion to be parameterized with a domain name, as in IN-
TERNET(“*.google.com”). Other permissions can be param-
eterized in a similar style in which the meaning of the
optional parameter varies based on the permission it qual-
iﬁes. For example, a parameter to FILESYSTEM represents
a ﬁle or directory name or wildcard, whereas the parame-
ter to SEND_SMS represents the number that receives the
SMS. Other permissions that need to be parameterized
include CONTACTS, *_EXTERNAL_FILESYSTEM, NFC, *_SMS,
and USE_SIP, plus several of those described in Sect. 2.2.2,
such as USER_INPUT to distinguish sensitive from non-
sensitive user input.
2.2.2 Sinks and sources for additional resources
IFC adds additional sources and sinks to the Android
permissions. For example, IFC requires a permission to
retrieve data from the accelerometer, which can indicate
the user’s physical activity, and to write to the logs, which
a colluding app could potentially read. Table 1 lists the ad-
ditional sources and sinks. We selected and reﬁned these
by examining the Android API and Android programs,
and it is easy to add additional ones. Our system does
not add much complexity: it only adds 26 permissions to
Android’s standard 145, or 18% more permissions.
Some researchers feel that the Android permission
model is already too complicated for users to under-
stand [12]. But our perspective is that of a full-time audi-
tor who is trained to analyze applications. The ﬂow policy
is examined once per application by that skilled engineer,
not on every download by a user, so the total human bur-
den is less. (See Sect. 3.11 for empirical measurements.)
4
Both source and sink
CAMERA_SETTINGS
CONTENT_PROVIDER
DATABASE
DISPLAY
SPEAKER
WRITE_CLIPBOARD FILESYSTEM
Sinks
Table 1: Additional sources and sinks used by IFC, beyond the
built-in 145 Android permissions.
Sources
ACCELEROMETER CONDITIONAL
BUNDLE
LITERAL
MEDIA
PHONE_NUMBER WRITE_EMAIL
RANDOM
WRITE_LOGS
READ_CLIPBOARD
READ_EMAIL
READ_TIME
USER_INPUT
PARCEL
PROCESS_BUILDER
SECURE_HASH
SHARED_PREFERENCES
SQLITE_DATABASE
SYSTEM_PROPERTIES
The more detailed ﬂow policy ﬁle yields more insight
than simple Android permissions, because the ﬂow policy
(Sect. 2.3) makes clear how each resource is used, not just
that it is used.
We now discuss two permissions, LITERAL and CONDI-
TIONAL, whose meaning may not be obvious.
Literals The LITERAL source is used for programmer-
written manifest constants, such as "Hello world!". This
enables IFC to distinguish information derived from the
program source code from other inputs. Manifest literals
are used benignly for many purposes, such as conﬁguring
default settings. The ﬂow policy shows how they are used
in the program, and they can be examined by the analyst.
Conditionals
Indirect information ﬂow through condi-
tionals can leak private information. For example, con-
sider the following code and a ﬂow policy containing
LITERAL→INTERNET and USER_INPUT→FILESYSTEM:
@Source(USER_INPUT) @Sink(FILESYSTEM)
long creditCard = getCCNumber();
final long MAX_CC_NUM = 9999999999999999;
for (long i = 0 ; i  myList;
Here, the elements of myList are strings that are obtained
from CONTACTS and that may ﬂow to SMS.
IFC also supports qualiﬁer polymorphism, in which
the type qualiﬁers can change independently of the un-
derlying type. For example, this allows a programmer to
write a generic method that can operate on values of any
information ﬂow type and return a result of a different
Java type with the same sources/sinks as the input.
Parametric polymorphism, qualiﬁer polymorphism,
and regular Java types can be used together. The type
system combines the qualiﬁer variables and the Java types
into a complete qualiﬁed type. Although extensions to
the type system are always possible, we have found our
system effective in practice thus far.
Inference and defaults
2.6
A complete type consists of a @Source qualiﬁer, a @Sink
qualiﬁer, and a Java type. To reduce programmer effort
and code clutter, most of the qualiﬁers are inferred or
defaulted. A programmer need not write qualiﬁers within
method bodies, because such types are inferred by IFC.
Even for method signatures and ﬁelds, a programmer gen-
erally writes either @Source or @Sink, but not both. We now
explain these features. For experimental measurements,
see Sect. 3.10.
2.6.1 Type inference and ﬂow-sensitivity
A programmer does not write information ﬂow types
within method bodies. Rather, local variable types are
inferred.
IFC implements this inference via ﬂow-sensitive type
reﬁnement. Each local variable declaration (also casts,
instanceof, and resource variables) defaults to the top type,
@Source(ANY) @Sink({}). At every properly-typed assign-
ment statement, the type of the left-hand side expression
is ﬂow-sensitively reﬁned to that of the right-hand side,
which must be a subtype of the left-hand side’s declared
type. The reﬁned type applies until the next side effect
that might invalidate it.
IFC limits type inference to method bodies to ensure
that each method can be type-checked in isolation, with
a guarantee that the entire program is type-safe if each
method has been type-checked. It would be possible to