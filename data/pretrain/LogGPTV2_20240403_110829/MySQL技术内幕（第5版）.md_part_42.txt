的SQL模式，更多相关信息请参考3.3节。“零”值也是那些声明时带有NOT NULL属性的日期
也有小数秒部分，
在输入日期方面，MySQL的处理方式则比较灵活。例如，它可以把两位数的年份转换为四
如果把DATE值赋值给DATETIME列，那么MySQL会自动把时间部分补足为'0O：0O：00"。
自MySQL5.6.5起，
DATE和TIME类型分别用于保存日期值和时间值，而DATATIME类型则用于保存日期和时
从TIME 到 DATETIME 的转换，依赖于具体的 MySQL版本：自MySQL5.6.4起，当前日期
mySql> INSERT INTO t（dt,d,t) VALUES(NOW(),NOW(), NOW（)）;
mySql> CREATE TABLE t (dt DATETIME, d DATE,
在3.2.6.7节，会进一步讨论MySQL所使用的日期解释规则。
mysql> SELECT
mysql>INSERT INTO mytb1 (date_col)
遵照标准 SQL和ISO8601规范的要求，MySQL的日期表示顺序为“年-月-日”。例如，2015
12013-01-0915:33:2412013-01-09115:33:24
dt
1999-12-03
date_col
。对于平时已习惯性的一些格式，如12-3-99＇或'3-12-99＇，解释情况有可能与你想
YEAR
TIMESTAMP
DATETIME
TIME
DATE
类型定义
只是在存储时它们会被丢弃掉。
，DATETIME列会自动把当前时间戳作为初始值，并进行更新。更多相关
表3-15时态类型的“零”值
tTIME）;
0000
0000-00-0000:00:00[.000000]
0000-00-0000:00:00[.000000]
00:00:00[.000000]
0000-00-00
3.2MySQL数据类型
'hh:mm:ss[.uuuuuu]’和
157
---
## Page 178
这样的时区名来更改时区设置。
果服务器的时区表已按照12.6.1节所描述那样进行了设置，那么还可以使用·Europe/Zurich‘
那个值。事实上，只要更改一下会话时区设置，就可以在一个会话里看到这样的效果：
使用了另一个时区去连接服务器，并检索该值，那么它所看到的值则是调整为其所设置时区的
从UTC转换回会话时区，从而让你看到与你存储结果一样的时间值。不过，如果另一个客户端
保存这样的值时，服务器会把它从会话时区转换为UTC。当以后检索该值时，服务器又会把它
限值则与4个字节所能表示的最大Unix时间相对应。
过请注意，TIMESTAMP的取值范围并非起始于·1970-01-0100:00:00′。你可能会想当然地认
储为自纪元以来总共逝去的秒数。1970年的起始确定了TIMESTAMP类型的取值范围下限值。（不
数秒部分，但在存储时会被丢弃。它的取值范围与Unix时间密切相关，其中规定1970年的第
03:14:07[.999999]′。与DATETIME一样，在MySQL5.6.4之前，
数据类型有一些特殊的属性，我们接下来就会对它们进行讨论。
意思是“时间戳”，它的字面意思很容易让人误以为该类型只与时间有关，其实不然。）TIMESTAMP
为
3.2.6.2
来提供它。
‘12:30：00＇。如果想把·12:30＇当作“12分30秒”，那么需要以完整的形式（如*00:12:30)
望的样子。例如，把＇30·和·12：30·插到某个TIME列，那么最终的存储值为+00：00:30＇和
值，以及为何可以大于+23：59：59的具体原因。
值表示的则是一段逝去的时间。这也正是表3-13里所示的TIME列的取值范围为何可以包含负
间部分表示的是一天里的时间，且必须是在+00：00：00＇～123：59：59·的范围内。但是，TIME
会添加上时间。对于以前的版本，这个转换并不一定会产生有意义的结果。
158
它就是纪元以来的那个0秒，但0表示的时间戳是，0000-00-0000：00：00＇。）取值范围上
一天为“零日”，也称作“纪元”。
TIMESTAMP列会自动把当前时间戳作为初始值，并进行更新。此外，如果在定义TIMESTAMP
TIMESTAMP类型列的取值范围是·1970-01-0100:00:00[.000000]*~·2038-01-19
在MySQL里，DATATIME 类型里的时间值与TIME 值略有不同。对于 DATATIME 类型，时
在上面示例里，指定时区所采用的方式为：相对于UTC的小时和分钟的有符号偏移量。如
TIMESTAMP是一种时态数据类型，用于储存日期和时间的组合值。（单词timastamp的中文
mysql> SET time_zone =
mySql> CREATE TABLE t(ts TIMESTAMP);
当往表里插入“短”（不完整）的TIME值时，一定要小心。它们可能不会被解释成你所期
mysql> SELECT ts FROM t;
1 2000-01-0100:00:00
mysql> SELECT ts FROM t;
2000-01-01 03:00:00
ts
ts
sql>
第3章数据类型
TIMESTAMP数据类型
1.00:20+
，对于每一个TIMESTAMP值，MySQL会用4个字节来把它存
#将时区前调3个小时
#将时区设置为UTC
TIMESTAMP值也允许有小
账
---
## Page 179
到微秒级。
分。DATETIME(1)允许日期和时间值精确到十分之一秒。TIMESTAMP（6)允许时间戳的精确值达
为微秒。如果没有指定fSP，则默认值为0。例如，TIME 和TIME（O)是等价的，都没有小数部
(fsp)，精度值最高可达6位数字。fsp 值必须是0~6，0表示没有小数部分，而6则表示精度
版本。
3.2.6.5时态类型的小数秒功能
始化为适当的值。更多相关信息请参考4.2.3节。
另外，也可以使用TIMESTAMP 列或DATETIME 列来代替；或者设置一个触发器，让它将该列初
要得到这种结果，那么可以在每次创建新行时，显式地将该列的值设置为CURRENT_TIMESTAMP。
日期和时间。（更多与掌控这些类型默认值的规则相关的信息请参考3.2.6.6节。）如果其他类型想
前日期和时间”。TIMESTAMP和DATETIME 列之所以比较特殊，是因为它们的默认值可以为当前
以外，你都不能使用像CURRENT_TIMESTAMP这样的函数来将DATETIME 列的默认值设置为“当
MySQL所使用的设置默认值的规则。
TIMESTAMP类型除外，其默认值为NOTNULL。
3.2.6.4时态数据类型的属性
与使用SMALLINT相比，使用YEAR更节省空间。
（它将占用两倍的空间）。如果需要表示的年份包含在YEAR类型所能表示的年份范围内，那么
样。如果想要用一个整数类型来覆盖YEAR类型所能表示的年份范围，那么需要使用SMALLINT
的字符串来指定它。
存储的值将会是0000,而不是2000。如果想要把值00转换为2000,那么需要以形如0＇或00
例如，97和14会变成1997和2014。不过请注意，当把数值00插到4位的YEAR列时，最终
YEAR（2）列会继续保持不变；但对于新表，这样的列会被创建为YEAR（4）。
YEAR（4)来代替。由于这样的存储问题，自MySQL5.6.6起，就废弃了YEAR（2）：在已有表里
存储的1970和2070都会显示为70。避免这类问题的最简单方法是避免使用YEAR（2），用
如果使用YEAR(2)来存储该范围之外的值，那么最终的显示值将不确定。例如，YEAR(2)列里
型更省存储空间。
年份等，那么使用YEAR就足够了。如果不需要完整的日期值，那么用YEAR会比用其他日期类
YEAR类型的取值范围是1901~2155年。如果只会用到日期里的年份，如出生年份、政府选
一个显示宽度M，M值只能为4 或2。如果在YEAR列的定义里忽略掉M，那么其默认值将为
3.2.6.3YEAR数据类型
为当前时间戳。更多相关信息请参考3.2.6.6节。
列时为了允许存放NULL值而带有NULL属性，那么当把NULL存储到该列时，该列值会被设置
在
本节重点描述 MySQL如何处理时间值里的小数秒。它主要适用于MySQL5.6.4及以上的
大部分情况下，这些默认值都必须为常量。除了TIMESTAMP（自MySQL5.6.5起)和DATETIME
也可以用DEFAULT子句来设定默认值。在3.2.3描述了在列定义没有包含DEFAULT子句时
时态列的定义可以包含通用属性NULL 或NOT NULL。如果都不指定，则默认为NULL，
TINYINT 类型的存储空间占用量与YEAR 类型（只有1个字节）的一样，但取值范围不一
MySQL会使用其年值判断规则，将输人的2位YEAR值转换成4位值（参考3.2.6.8节）。
YEAR（2）只显示最后两位数，并且这种类型实际只能存储从1970年到2069年之间的值
YEAR 是单字节数据类型，其用意在于提高年值的表示效率。在声明YEAR 列时，可以指定
TIME、DATETIME 和TIMESTAMP 类型的声明语法中，允许设置一个可选的小数秒精度
3.2MySQL数据类型
159
4
---
## Page 180
DEFAULT属性和ON UPDATE属性来定义它。
CURRENT_TIMESTAMP、像0那样的常量值，或者是格式为'CCYY-MM-DD hh:mm:sSs"的值。也可
置为
的
情况。也不能让多个列拥有自动初始化特性，或者让多个列拥有自动更新特性。
种或全部。不能出现一个TIMESTAMP列拥有自动初始化特性，而另一个列拥有自动更新特性的
3.2.6.6时态类型的自动特性
个微秒部分丢弃。
使用了这些值，但是如果你想要在某个时间列里存储包含微秒部分的值，那么MySQL会将那
CURTIME(3)返回的时间则包括了一个精度高达千分之一秒的小数秒部分：
返回值进行小数秒位数的控制。例如，CURTIME（)返回的是不带小数秒部分的当前时间，而
MySQL5.6.4之前的版本有些不带参数的函数，现在也开始接受fsp参数，以方便对可能有的
160
如果想让表里的第一个TIMESTAMP列具有一个或两个自动特性，那么可以组合使用
5.6.5版本之前，对于DEFAULT 属性，DATETIME只允许常量，并且不支持ON UPDATE。
如果同时指定 DEFAULT 和ONUPDATE 属性，它们的顺序无关紧要。默认值可以是
为当前时间戳。要想允许TIMESTAMP列存储NULL值，在定义它时需要带有NULL属性。
还有一个只适用于TIMESTAMP 列的特殊特性：如果将列设置为 NULL，那么它的值会被设
一种或全部，和DATETIME列一样。
MySQL5.6.5扩展并推广了对自动特性的支持：任何TIMESTAMP列都可以有这两种特性中
口如果使用DEFAULT CURRENT_TIMESTAMP，那么列将拥有自动初始化特性。如果指定ON
对于MySQL5.6.5之前的版本，可以为表里任何单个的TIMESTAMP列指定两种特性中的一
TIMESTAMP和DATETIME列可以有自动初始化属性和自动更新特性。
MySQL5.6.4之前的版本，只提供了对微秒值的有限支持。有一些时间函数，如DATE_ADD（），
在C.2.5节里，对各个函数的描述表明了什么时候允许使用fsp参数。
mySql> SELECT CURTIME(),CURTIME(3）;
对于带时态参数的函数，其接受或返回的时态值中都带有小数秒部分。
口
口如果两种属性都没有指定，那么MySQL会将列定义为具有DEFAULTCURRENT_TIMESTAMP
自
CO
请使月
口“自动更新”即意味着，对于已有的行，当把任何其他列更改为不同值时，这两种类
口女
口“自动初始化”即意味着，对于新行，如果在INSERT语句里省略了这两种类型的列，
UPDATE CURRENT_TIMESTAMP，那么它还会拥有自动更新特性。
自MySQL5.6.5起，DATETIME列便开始允许这些与DEFAULT 和ON UPDATE一样的属性。
那么列会被设置为当前时间戳。
12:22:31
CURTIME()1CURTIME(3)
并且列有自动更新特性。
如果没有DEFAULT，但有ON UPDATE CURRENT_TIMESTAMP，那么具体的默认值为O，
如果使用指定了常量值的DEFAULTconstant_value属性，那么列将不具有自动初始化
和ONUPDATECURRENT_TIMESTAMP两种属性。
际上是在防止自动更新。）
型的列都会被更新为当前时间戳。
第3章数据类型
用下列语法来指定TIMESTAMP列：
112:22:31.475
（将列设置成它的当前值不算自动更新；这种做法实
。在某些情况下，
---
## Page 181
CC）的日期和时间格式，所用规则请参考3.2.6.6节。对于带分隔符的字符串格式，日期里可以
精度高达6位数字（微秒）的小数秒部分。例如，DATETIME和TIMESTAMP值支持的格式有：
此外，自MySQL5.6.4起，TIME、DATETIME和TIMESTAMP数据类型，还可以带有一个可选的
3.2.6.7
变化，那么ts_modified会被自动更新为当时的修改时间戳。
当时的插入时间戳。如果要更新已有的行，那么可以不用管这两列。如果任何其他列的值发生
TIMESTAMP 列：
者在INSERT语句里省略它。对于后续的更新操作，列会保持它的价值，一直到显式更改它为止。
自动更新：
并且在把 DATETIME 列设置为 NULL 时，没有产生特殊效果。
属性是 NOT NULL。这会产生一种特殊效果，即当你把列显式地设置成 NULL 时，MySQL 会将
它
止在更改列时自动更新，可以将列设置成它的当前值。
特性的影响，那么在执行插入或更新操作时，可以显式地把列设置成所期望的值。例如，为防
可以两个都用。此外，DATETIME 列也可以有这些属性。
带CURRENT_TIMESTAMP属性。然后，对于任何其他的单个TIMESTAMP列，可以使用DEFAULT
化或自动更新特性，那么必须使用DEFAULTconstant_value属性显式地定义第一列，同时不
MySQL可以正确解释各种格式的日期和时间列的输入值，其中包括字符串形式和数值形式。
再来看一个包含两个列的表，这两个列分别用于存储创建时间和最后修改时间，它们都是
设置成当前时间戳。（对于插入和更新操作，都是如此。）如果在列的定义里指定NULL，那么
下面来看一个表，它含有一列。在新增行时，列会被设置成当前时间戳，并且之后不会被
TIMESTAMP和DATETIME列的定义也可以包含NULL或NOTNULL属性。TIMESTAMP的默认
如果要新建一个行，则需要通过以下方式将列初始化为当前时间戳：将列设置为NULL，或
如果不想让拥有自动初始化特性或自动更新特性的TIMESTAMP或DATETIME列，受到这些
自MySQL5.6.5起，对于任何TIMESTAMP列，可以自由地使用这两个属性当中的一个，也
MySQL也可以解释那些没有世纪部分（即cC)的MySQL也可以解释那些没有世纪部分（即
对于 DATE、TIME 和YEAR 类型值，也有类似的表示。
如果要插入一个新行，
CREATE TABLE t2
对于MySQL5.6.5之前的版本，如果要让某个TIMESTAMP列（而非第一列）使用自动初始
YYMMDDhhmmss[.uuuuuu]
CCYYMMDDhhmmss[.uuuuuu]
CREATE TABLE t1
CCYYMMDDhhmmss[.uuuuuu]'
YY-MM-DDhh:mm:Ss[.uuuuuu]
ts_modified TIMESTAMP
...other columns...
tS_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ts_created
处理时态值
TIMESTAMP DEFAULT 0,
，则需要把这两个TIMESTAMP列都设置为NULL，从而将它们设置成
DEFAULT CURRENT_TIMESTAMP
ON UPDATE CURRENT_TIMESTAMP
3.2MySQL数据类型
161
---
## Page 182
换规则的实际效果：
MySQL在处理那些包含2位数字的年份值时，会把它们转换成4位数字。
3.2.6.8解释模糊年份值
为20001231；而对于DATETIME类型，即为200012310000）。
一个字符串值'001231'。如果的确需要使用数字，则需要使用完整形式（对于DATE类型，
字之后，数字001231会被看作1231，于是，对它的解释就会变得不确定。此时，最好是提供
DATETIME类型，那么它会被解释成·2000-12-3100：00：00＇。另外，在解析器将其处理成娄
字的值，并且如果将其当作DATE类型，那么它会被解释成·2000-12-31′；而如果将其当
字符串形式指定的，还是以数字形式指定的。例如，字符串·001231·会被看作是一个有6位数