当在容器中运行的应用服务之间路由数据包时，也会发生类似的事情。源容器和目标容器可以位于同一个集群节点上，这对应于两个员工在同一栋大楼中工作的情况。目标容器可以在不同的集群节点上运行，这对应于两个员工在同一街区的不同建筑中工作的情况。最后，第三种情况是数据包来自集群外部，必须路由到在集群内部运行的目标容器。
所有这些情况以及更多的情况都必须由指挥者来处理。
# 负载平衡
在高度可用的分布式应用中，所有组件都必须是冗余的。这意味着每个应用服务都必须在多个实例中运行，这样，如果一个实例出现故障，服务作为一个整体仍然可以运行。
为了确保一个服务的所有实例都在工作，而不仅仅是闲坐着，必须确保服务请求被平均分配给所有实例。这种在服务实例之间分配工作负载的过程称为**负载平衡**。对于如何分配工作负载，存在各种算法。通常情况下，负载平衡器使用所谓的循环算法工作，该算法确保使用循环算法将工作负载平均分配给实例。
我们再次期望编排者处理从一个服务到另一个服务或者从外部资源到内部服务的负载平衡请求。
# 缩放比例
当在一个由 orchestrator 管理的集群中运行我们的容器化、分布式应用时，我们也希望有一种简单的方法来处理预期或意外增加的工作负载。为了处理增加的工作负载，我们通常只安排遇到这种增加负载的服务的额外实例。然后，负载平衡器将被自动配置为将工作负载分布在更多可用的目标实例上。
但是在现实场景中，工作负载会随着时间的推移而变化。如果我们看看像亚马逊这样的购物网站，它可能在晚上高峰时段负载很高，那时每个人都在家在线购物；在黑色星期五等特殊日子，它可能会承受极端负荷；并且它在清晨可能经历很少的交通流量。因此，服务不仅需要能够向上扩展，还需要在工作负载下降时能够向下扩展。
我们还期望编排者在扩展或缩减时以有意义的方式分发服务实例。将服务的所有实例安排在同一个集群节点上是不明智的，因为如果该节点宕机，整个服务都会宕机。负责放置容器的编排器的调度器还需要考虑不要将所有实例放置在同一计算机机架中，因为如果机架的电源出现故障，整个服务也会受到影响。此外，关键服务的服务实例甚至应该分布在数据中心，以避免中断。所有这些决定以及更多的决定都是指挥者的责任。
# 自愈
如今，编排器非常老练，可以为我们维持一个健康的系统做很多事情。编排器监控集群中运行的所有容器，并自动用新实例替换崩溃或无响应的容器。协调器监控集群节点的健康状况，如果节点变得不健康或出现故障，则将其从调度器循环中移除。位于这些节点上的工作负载会自动重新调度到不同的可用节点。
指挥者监控当前状态并自动修复损坏或协调期望状态的所有这些活动导致所谓的**自愈**系统。在大多数情况下，我们不必积极参与并修复损坏。指挥者会自动为我们做这件事。
但是有些情况，没有我们的帮助，指挥者是无法处理的。想象一下，我们有一个服务实例在一个容器中运行。容器已启动并运行，从外部看，看起来非常健康。但是里面的应用处于不健康的状态。应用没有崩溃，只是不再能像设计的那样工作了。没有我们的暗示，指挥者怎么可能知道这件事？不行！处于不健康或无效的状态对每个应用服务来说意味着完全不同的东西。换句话说，健康状况取决于服务。只有服务的作者或其运营商知道健康在服务的上下文中意味着什么。
现在，编排器定义了接缝或探针，应用服务可以通过这些接缝或探针在什么状态下与编排器进行通信。存在两种基本类型的探针:
*   服务可以告诉指挥者它是否健康
*   该服务可以告诉指挥者它已经准备好或者暂时不可用
服务如何确定上述答案完全取决于服务。编排者只定义它将如何询问，例如，通过 HTTP GET 请求，或者它期望什么类型的回答，例如，OK 或 NOT OK。
如果我们的服务实现逻辑来回答前面的健康或可用性问题，那么我们就有了一个真正的自我修复系统，因为编排者可以杀死不健康的服务实例，并用新的健康服务实例替换它们，并且它可以将暂时不可用的服务实例从负载平衡器的循环中移除。
# 零停机部署
如今，证明一个需要更新的任务关键型应用完全宕机越来越难。这不仅意味着错失机会，还可能导致公司声誉受损。使用该应用的客户只是不准备再接受这样的不便，并且会很快离开。此外，我们的发布周期越来越短。在过去，我们每年会发布一到两个新版本，现在，许多公司每周更新应用多次，甚至每天更新多次。
这个问题的解决方案是提出一个零宕机应用更新策略。编排者需要能够批量更新单个应用服务。这也叫**滚动更新**。在任何给定时间，给定服务的实例总数中只有一个或几个被删除，并被新版本的服务替换。只有当新实例可以运行，并且不会产生任何意外错误或显示任何不良行为时，才会更新下一批实例。重复这一过程，直到所有实例都被新版本替换。如果由于某种原因，更新失败了，我们希望编排器自动将更新的实例回滚到它们以前的版本。
其他可能的零宕机部署是所谓的金丝雀版本和蓝绿色部署。在这两种情况下，服务的新版本将与当前的活动版本并行安装。但最初，新版本只能在内部访问。然后，运营部门可以对新版本进行冒烟测试，当新版本运行良好时，在蓝绿色部署的情况下，路由器会从当前的蓝色版本切换到新的绿色版本。一段时间以来，新的绿色版本的服务受到密切监控，如果一切正常，旧的蓝色版本可以退役。另一方面，如果新的绿色版本不像预期的那样工作，那么只需要将路由器设置回旧的蓝色版本，以实现完全回滚。
在金丝雀版本的情况下，路由器的配置方式是，它通过新版本的服务输送一小部分流量，比如 1%，而 99%的流量仍然通过旧版本路由。新版本的行为受到密切监控，并与旧版本的行为进行比较。如果一切看起来都很好，那么通过新服务传输的流量百分比就会略有增加。重复这个过程，直到 100%的流量通过新服务路由。如果新服务已经运行了一段时间，并且一切看起来都很好，那么旧服务可以退出使用。
大多数编排者至少支持开箱即用的滚动更新类型的零宕机部署。蓝绿色和淡黄色版本通常很容易实现。
# 亲和力和位置感知
有时，某些应用服务需要在其运行的节点上提供专用硬件。例如，输入/输出绑定服务要求集群节点连接高性能**固态硬盘** ( **固态硬盘**)，或者某些服务要求**加速处理单元** ( **APU** )。编排器允许我们定义每个应用服务的节点关联性。然后，编排者将确保其调度器只调度满足所需标准的集群节点上的容器。
应避免定义与特定节点的亲缘关系；这将引入单点故障，从而损害高可用性。始终将一组多个群集节点定义为应用服务的目标。
一些编排引擎也支持所谓的**位置感知**或**地理感知**。这意味着您可以请求编排者在一组不同的位置上平均分布服务的实例。例如，可以用可能的值`west`、`center`和`east`来定义标签`datacenter`，并将该标签应用于具有对应于相应节点所在地理区域的值的所有集群节点。然后，指示指挥者使用这个标签来对某个应用服务进行地理感知。在这种情况下，如果一个人请求九个服务副本，编排者将确保三个实例被部署到三个数据中心(西区、中区和东区)的每个节点上。
地理认知甚至可以分级定义；例如，可以将数据中心作为顶级鉴别器，然后是可用性区域，然后是服务器机架。
地理感知或位置感知用于降低因电源故障或数据中心停机而导致的停机概率。如果应用实例分布在服务器机架、可用性区域，甚至数据中心，那么所有的事情都不可能一下子发生。一个区域将始终可用。
# 安全
如今，信息技术中的安全性是一个非常热门的话题。网络战正处于历史最高水平。大多数高知名度的公司都是黑客攻击的受害者，造成了非常昂贵的后果。每个**首席信息官** ( **CIO** )或**首席技术官** ( **CTO** )最可怕的噩梦之一就是早上醒来，在新闻中听到他们的公司成为黑客攻击的受害者，敏感信息被窃取或泄露。
为了应对这些安全威胁，我们需要建立一个安全的软件供应链，并深入实现安全防御。让我们看看企业级指挥者可以完成的一些任务。
# 安全通信和加密节点身份
首先，我们希望确保由编排者管理的集群是安全的。只有受信任的节点才能加入群集。加入集群的每个节点都获得一个加密节点标识，节点之间的所有通信都必须加密。为此，节点可以使用**互传输层安全** ( **MTLS** )。要相互验证集群的节点，需要使用证书。这些证书会定期或应请求自动轮换，以在证书泄露时保护系统。
集群中发生的通信可以分为三种类型。一个是关于通信飞机。有**管理**、**控制**、**数据**飞机:
*   集群管理器或主机使用管理平面来例如调度服务实例、执行运行状况检查，或者创建和修改集群中的任何其他资源，例如数据卷、机密或网络。