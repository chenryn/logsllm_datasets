ﬁll the last block of data if the input is not a multiple of the block
size. Example of padding algorithms are ZEROPADDING, where
the last block is ﬁlled with zeros, PKCS#5 [14] and PKCS#7 [44].
(3) AsymmEncryption implements algorithms for public-key
cryptography [2]. These algorithms use a key pair (key): a public
key and a private key. They can be used for (i) encryption and
decryption as well as (ii) signature and veriﬁcation. For (i), the
message is encrypted with the public key of the receiver. It can
alg
alg
key
pad
alg
seed
out
pass
(1) MessageDigest
(2) SymmEncryption
R-01
R-02
R-03
R-04
R-05
(3) AsymmEncryption
R-19
R-20
R-21
(5) RandomGenerator
R-06
R-07
R-08
R-09
(4) KeyDerivation
R-10
R-11
R-12
R-13
R-06
R-08
R-17
R-18
R-14
R-15
R-16
(6) KeyStorage
(7) SSL/TLS/Certif
R-23
R-22
R-24
R-25
R-26
iv
key
alg
pad
mode
#blocks
salt
pass
iter
urlprot
allhost
allcert
sethost
Fig. 2. Classes of a typical crypto library with their parameters (arrows entering
in the class). For each class we report the crypto rules of TABLE I that need
parameters of that speciﬁc class.
be then decrypted only with the private key of the receiver. For
(ii), a message is signed with the private key of the sender and
veriﬁed with the corresponding public key. The parameters of
this class are the algorithm (alg) used for encryption, e.g., RSA,
elliptic curves (EC) or digital signature algorithm (DSA), and the
padding (pad), e.g., NOPADDING, PKCS1-v1.5 and PSS [45].
(4) KeyDerivation implements algorithms to derive crypto
keys [43]. A key derivation function takes as input a password or
a passphrase (pass) and generates a key by using a salt (salt),
i.e., a random value, and by applying a function, e.g., hashing,
for a ﬁxed number of iterations (iter). The larger is the number
of iterations the harder is to implement brute-force attacks [14].
(5) RandomGenerator implements algorithms for generating
random numbers. The relevant parameters are the algorithm
(alg) used for generating the numbers, the bytes of the generated
number (out), and the seed (seed) for the generation. In this
paper we assume that there are only two categories of algorithms:
Secure and NotSecure. The parameter alg is Secure if it
generates numbers suited for crypto, otherwise it is NotSecure.
(6) KeyStorage implements algorithms to store crypto keys,
certiﬁcates and other sensitive content. Usually, it takes as input
a password or a passphrase (pass) to store contents securely.
(7) SSL/TLS/Certif is a class including multiple functions
for SSL/TLS and certiﬁcates: (1) connections that can be HTTP
or HTTPS (urlprot), (2) host name veriﬁcation that can accept
all the host names or not (allhost), (3) certiﬁcate validation,
which can trust all certiﬁcates or not (allcert), and (4) host
name veriﬁcation for SSL/TLS connections (sethost) [16].
A. Threat Model and Crypto Rules
TABLE I reports the rules that are supported by CRYLOGGER.
We collected them from (i) papers ad (ii) documents published
by NIST as well as IETF. Fig. 2 shows how the rules relate to
the crypto classes. Some rules use parameters from more than
one class (e.g., R-06 and R-08). We use the same threat model
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1975
ID
R-01
R-02
R-03
R-04 †
R-05
R-06 †
R-07
R-08 †
R-09 †
R-10
R-11 †
R-12 †
R-13
Rule Description
Don’t use broken hash functions (SHA1, MD2, MD5, ..)
Don’t use broken encryption alg. (RC2, DES, IDEA ..)
Don’t use the operation mode ECB with > 1 data block
Don’t use the operation mode CBC (client/server scenarios)
Don’t use a static (= constant) key for encryption
Don’t use a “badly-derived” key for encryption
Don’t use a static (= constant) initialization vector (IV)
Don’t use a “badly-derived” initialization vector (IV)
Don’t reuse the initialization vector (IV) and key pairs
Don’t use a static (= constant) salt for key derivation
Don’t use a short salt (< 64 bits) for key derivation
Don’t use the same salt for different purposes
Don’t use < 1000 iterations for key derivation
Ref.
[8]
[8]
[5]
[12]
[5]
[5]
[5]
[5]
[46]
[5]
[14]
[46]
[14]
ID
R-14 †
R-15 †
R-16
R-17
R-18
R-19
R-20 †
R-21 †
R-22
R-23
R-24
R-25
R-26
Rule Description
Don’t use a weak password (score < 3)
Don’t use a NIST-black-listed password
Don’t reuse a password multiple times
Don’t use a static (= constant) seed for PRNG
Don’t use an unsafe PRNG (java.util.Random)
Don’t use a short key (< 2048 bits) for RSA
Don’t use the textbook (raw) algorithm for RSA
Don’t use the padding PKCS1-v1.5 for RSA
Don’t use HTTP URL connections (use HTTPS)
Don’t use a static (= constant) password for store
Don’t verify host names in SSL in trivial ways
Don’t verify certiﬁcates in SSL in trivial ways
Don’t manually change the hostname veriﬁer
Ref.
[47]
[48]
[48]
[49]
[49]
[13]
[50]
[51]
[16]
[48]
[16]
[16]
[16]
Crypto rules that are considered in this paper. The symbol † indicates the rules that are not covered by other approaches (we used [6] as reference).
TABLE I
of the current static tools. We brieﬂy describe the crypto rules
below. The severity of most of these rules is discussed in [6].
R-01 does not let applications use broken hash functions,
e.g., those for which we can generate collisions, like SHA1 [7].
R-02 forbids the use of some broken algorithms for symmetric
encryption, for example, Blowﬁsh, DES, etc. R-03 and R-04
do not allow applications to use the operation modes ECB and
CBC, respectively. ECB is well known to be vulnerable since
identical blocks of plaintext are encrypted to identical blocks of
ciphertext. This breaks the property of semantic security [52].
CBC is instead vulnerable to padding oracle attacks in client-
server scenarios [12]. R-05 and R-06 put restrictions on how
to generate keys. R-05 requires that the keys for symmetric
encryption are randomly generated by the application instead
of being hard-coded in the app as constants. R-06 requires the
keys to have enough randomness, i.e., they should be generated
by using a random generator that is considered secure for
crypto. R-07 and R-08 are similar to R-05 and R-06, but they
consider the IVs that are used in symmetric encryption instead
of the keys. The IVs, in fact, should always be random and
non-constant to strengthen data conﬁdentiality when they are
paired with some operation modes, e.g., GCM. R-09 requires
that the same pair (key, IV) is never reused to encrypt different
messages. Reusing the same pair (key, IV) makes the encryption
predictable. R-10 is the same as R-05: it is, however, applied
to the salt used in key generation instead of the keys used in
symmetric encryption. R-11 requires the salt to be large enough
(≥ 64 bits) to protect the password used for key generation. R-12
prohibits the reuse of the same salt because it defeats the purpose
of adding randomness to the corresponding password. R-13
requires to use a sufﬁcient number of iterations to generate the
key so that brute-force attacks become infeasible. R-14 and R-15
require to use a password that has not been black-listed and that
is “hard” enough for password-based encryption, respectively.
R-16 forbids using the same password multiple times (e.g.,
constant passwords). R-17 requires to use a random value as
seed instead of a constant value for pseudo-random number
generation (PRNG). Using a constant seed defeats the purpose
of generating random number as the sequence of numbers that is
generated becomes predictable. R-18 does not allow applications
to use PRNGs that are not approved for crypto operations, for
example java.util.Random [6]. R-19, R-20 and R-21 forbid
some conﬁgurations of the RSA algorithm. In particular, the
key should be ≥ 2048 bits and a padding algorithm different
from NOPADDING (R-20) and PKCS1-v1.5 (R-21) must be used
for encryption / decryption. R-22 forbids the use of HTTP and
requires the use of the more secure alternative HTTPS. R-23
forbids the use of static passwords for key storage. R-24 and
R-25 require to properly verify host names and certiﬁcates. For
example, accepting all host names or all certiﬁcates should not be
allowed. R-26 forbids to modify the standard host name veriﬁer,
which can lead to insecure communication over SSL/TLS.
V. CHECKING CRYPTO RULES DYNAMICALLY
We deﬁne four checking procedures to cover the crypto rules
reported in TABLE I. Each checking procedure covers multiple
rules, while each rule is veriﬁed by only one checking procedure.
These checking procedures are shown graphically in Fig. 3 and
explained in detail in the next sections. These procedures are
generic: they can be applied to new crypto rules if needed.
A. Unacceptable Values
The checking procedure of Fig. 3 (a) extracts from the log
all the values of a parameter or a combination of parameters
and veriﬁes that they can be used to conﬁgure the corresponding
crypto class. All the values that are collected from the log are
sent to a rule-speciﬁc function that says ‘yes’ if the values are
allowed by the rule or ‘no’ otherwise. For R-01, for instance,
we need to ensure that the parameter alg of MessageDigest
never takes one of the following values: SHA1, MD2, MD5, etc.
This is the most basic checking procedure and it is used to check
the highest number of crypto rules. We describe how we check
the crypto rules that fall under this type below. For each rule, we
report which property must be satisﬁed by all the values that are
collected for that rule.
R-01: MessageDigest.alg /∈ {‘SHA1’, ..}
R-02: SymmEncryption.alg /∈ {‘DES’, ..}
For rules R-01 and R-02 we simply check that broken algorithms
are not used for message digest and encryption, respectively.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1976
[MessageDigest] alg: SHA1 
[SymmEncryption] key: k1
[SymmEncryption] key: k1 
log1
[MessageDigest] alg: SHA1
[MessageDigest] alg: SHA2
=
Yes / No
[SymmEncryption] key: k2 
[SymmEncryption] key: k3
acceptable?
Yes / No
log
[SymmEncryption] key: k2
log2
random?
Yes / No
log
[SymmEncryption] IV: v1
[SymmEncryption] key: k1 
Yes / No
=
[SymmEncryption] IV: v2
[SymmEncryption] key: k2 
log
(a) Unacceptable Values 
(b) Constant Values 
(c) Badly-Derived Values 
(d) Reused Values 
Fig. 3. We deﬁne four checking procedures to cover all the crypto rules of TABLE I. (a) We check if some unacceptable values are used to conﬁgure a parameter of
a crypto class (e.g., SHA1 for rule R-01). (b) We check if a parameter is conﬁgured with constant values by verifying if the same values are found in two different
executions of an application (e.g., same key for rule R-05). (c) We check if the values of a parameter of a crypto class has enough randomness (e.g., the keys for
rule R-06). (d) We check if some values of a parameter are reused multiple times during the execution of an application (e.g., the pairs (key, IV) for R-09).
R-03: SymmEncryption.mode (cid:3)= ‘ECB’ or
SymmEncryption.#blocks = 1
R-04: SymmEncryption.mode (cid:3)= ‘CBC’
For rules R-03 and R-04, we check that the operation modes
ECB / CBC are not used. We accept the use of ECB for 1 data
block.
R-11: KeyDerivation.salt ≥ 64 bits
R-13: KeyDerivation.iter ≥ 1000
For key derivation we check that the lengths of the salts in the
log are always ≥ 64 bits and the number of iterations is ≥ 1000.
R-14: KeyDerivation.pass /∈ BadPass
R-15: score(KeyDerivation.pass) ≥ 3
For key derivation, we check if the password is broken (i.e., it
belongs to BadPass2) or weak. To check if a password is weak
we use zxcvbn [47] and consider it bad if it has a score < 3.
R-18: RandomGenerator.alg = ‘Secure’
We check that the algorithm to generate random numbers is
Secure, i.e., it should generate truly-random numbers. For
example in Java, java.secure.SecureRandom must be used
instead of java.util.Random, whose randomness is limited.
R-19: AsymmEncryption.alg (cid:3)= ‘RSA’ or
AsymmEncryption.key ≥ 2048 bits
R-20: AsymmEncryption.alg (cid:3)= ‘RSA’ or
AsymmEncryption.pad (cid:3)= ‘NOPADDING’
R-21: AsymmEncryption.alg (cid:3)= ‘RSA’ or
AsymmEncryption.pad (cid:3)= ‘PKCS1-v1.5’
These rules do not admit encryption keys that are < 2048 bits
for RSA and require some padding algorithm different from
NOPADDING and PKCS1-v1.5 for encryption/decryption [51].
R-22: SSL/TLS/Cert.urlprot (cid:3)= ‘HTTP’
We check that HTTP is never used as a connection protocol.
R-24: SSL/TLS/Cert.allhost = ‘False’
R-25: SSL/TLS/Cert.allcert = ‘False’
R-26: SSL/TLS/Cert.sethost not assigned
For rules R-24 and R-25, we check that apps do not naively
verify host names and certiﬁcates (e.g., they do not verify the
host name at all or they trust all certiﬁcates). For rule R-26, we
check that the default host name veriﬁer is not replaced to avoid
host name veriﬁcation, e.g., in Java by creating sockets3.
B. Constant Values
The checking procedure of Fig. 3 (b) veriﬁes if a parameter
of a crypto class is constant or not. For instance, for rule R-05
we need to ensure that applications do not use static encryption
keys that are hard-coded in the app. Ideally, the keys should be
generated with a proper random generator. To verify the rules
in this category, we examine the logs of two executions of the
same application and check that the values that are found in one
of the execution log is not present in the other and vice versa.
For example, for rule R-05 we check the following:
R-05: { SymmEncryption.key }1 ∩
{ SymmEncryption.key }2 = ∅
where we used { }1 to indicate the values collected in the
ﬁrst log and { }2 the values collected in the second log. In a
similar way, we check the rules R-07, R-10, R-17, and R-23 with
the values of SymmEncryption.iv, KeyDerivation.salt,
RandomGenerator.seed, and KeyStorage.pass.
C. Badly-derived Values
The checking procedure reported in Fig. 3 (c) veriﬁes if a
value is truly random or not. For rule R-06, for example, we
need to guarantee that the application uses encryption keys that
have enough randomness. To verify the rules of this type, we
collect all the values of the relevant parameter and we make the
following three checks sequentially (box random? of Fig. 3 (c)):
1. if the value is obtained from RandomGenerator with alg
= ‘Secure’, then we consider it a legit value;
(cid:4)= ‘Secure’, then we consider it a bad value;
2. if the value is obtained from RandomGenerator with alg
3. otherwise we apply the NIST tests for randomness [49] and
if at least one test fails we consider it a bad value.
2We used a set of passwords from: https://github.com/cry/nbp.
3Android SSL: https://developer.android.com/training/articles/security-ssl.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1977
The ﬁrst two checks try to determine the origin of the value, i.e.,
if it has been generated by RandomGenerator (parameter out).
If the origin cannot be determined, e.g., the value is generated in
some other ways by the application, then we use the NIST tests.
For each NIST test we have three possible outcomes: (i) failure,
(ii) success, or (iii) skipped because there are not enough bits to
apply the speciﬁc test. We consider that an app violates a rule if
at least one NIST test fails. This policy can be easily changed
by the user. We apply this procedure to rules R-06 and R-08.
Verifying the randomness of values is a challenging task. While
this test does not ensure that the values that pass the check are
truly random, it ﬁnds obvious sources of non-randomness. Static
approaches do not typically check these types of rules.
D. Reused Values
The checking procedure of Fig. 3 (d) checks if a value or a
combination of values of a parameter of a crypto class is reused
across the executions of an application. For instance, for rule R-
09, we have to ensure that the same pair (key, IV) is never reused
to encrypt different messages. The checking procedure collects
all the values from the log and checks if there are duplicates:
R-09: containsDuplicates(
{ (SymmEncryption.key,
SymmEncryption.iv) }) = False
We used this checking procedure for the rules R-09 and R-12.
Static approaches do not typically check these types of rules.
VI. IMPLEMENTATION OF CRYLOGGER FOR ANDROID
We implemented CRYLOGGER to detect crypto misuses in
Java and Android apps by instrumenting classes of the Java
Cryptography Extension (JCE) and the Java Cryptography Archi-
tecture (JCA), which are part of the Java standard library4. These
classes provide a common interface for crypto algorithms to all
Java apps. This interface is then implemented by ‘providers’, i.e.,
speciﬁc crypto libraries, e.g., SunJCE, BouncyCastle, etc. Thus,
they are the perfect place to detect crypto misuses in Android (as
well as Java) apps. TABLE II reports the mapping of the classes
of Section IV (Crypto Classes in the table) to the Java classes
that we instrumented. In some cases, a single crypto class, e.g.,
RandomGenerator, is mapped to multiple Java classes, e.g.,
Random and SecureRandom. In the appendices (TABLE III) we
report for each class the member methods that we instrumented
and the parameters that we collected for each Java class.
A. Automated Testing of Android Apps
We ran CRYLOGGER on 1780 Android apps from the ofﬁcial
Google Play Store. These are among the most popular free apps
of 33 different categories (Section IX). In this section, we discuss
how we automated the testing for such a large number of apps.
We implemented a Python script to perform the following
nine steps. Step (S1) starts an Android emulator, whose Java
library has been instrumented with CRYLOGGER (or we can use
a real device). (S2) downloads the chosen app from the Google
4Documentation about JCA and JCE can be found here: https://docs.oracle.
com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html (Java 7).
Crypto Classes
MessageDigest
SymmEncryption
AsymmEncryption
KeyDerivation
RandomGenerator
KeyStorage
SSL/TLS/Certif.
Java Classes
java.security.MessageDigest
javax.crypto.Cipher
javax.crypto.Cipher
java.security.Signature
javax.crypto.spec.PBEKeySpec
javax.crypto.spec.PBEParameterSpec
java.util.Random
java.security.SecureRandom
java.security.KeyStore
java.net.URL
java.net.ssl.SSLContext
java.net.ssl.SocketFactory
java.net.ssl.HttpsURLConnection
Mapping from the crypto library of Section IV to the Java standard library.
TABLE II
Play Store market. (S3) conﬁgures the user interface (UI) of the
emulator to facilitate random testing (more details below). (S4)
installs the app on the emulator with the android debug bridge
(ADB)5. (S5) uses Monkey to send random events to the UI of
the app (the number of UI events is conﬁgurable and Monkey
can be replaced with other tools). We call ‘events’ the actions
that can be performed on the UI of an app, such as scrolling,
touching, inserting text, etc. (S6) collects the crypto log. (S7)
uninstalls the app and deletes its data with ADB. (S8) checks the
crypto rules and reports the rules that have been violated. (S9)
tests another app starting from Step (S4), if it is necessary.
Android apps are UI driven [39]. Therefore to verify an app,
there are two main alternatives: manual tests, where a user needs
to interact with the UI of the app, and automated tests, where the
UI events are generated by a tool [37], e.g., Monkey. Since the
results of any dynamic tool, including CRYLOGGER, are as good
as the UI events used to exercise the app, it is critical to deﬁne
how to test the apps to detect crypto misuses. Since we wanted
to fully automate the testing process, we decided to exclude the
option of performing manual tests. We decided to use Monkey
for the experimental results in Sections VIII and IX. Monkey is
the most popular tool for random-based testing and compared
to other tools for random-based generation is known to be the
most effective [37]. The main advantage of Monkey is that it
is fully automated. It is also fully integrated in Android Studio,
and thus supported on all the apps of the Google Play Store and
on different Android versions. In addition, it is fast because to
generate events it does not need to maintain any information
(state) of the app. It has, however, two limitations: (1) random
events generate unintended behaviors, for instance, turning off
Internet or closing the app [39], and (2) poor app coverage since
the events are generated randomly, for example, Monkey cannot
perform complex operations, such as app registration or login.
(1) Unintended Behaviors: To address this problem, we added
Step (S3) mentioned above. This step (i) activates the immersive
mode6, where an app is ﬁxed on the screen and there is no easy
way to return to the home screen, (ii) removes the quick settings,
so that Monkey cannot interact with system conﬁgurations, e.g.,
Wi-Fi, and (iii) disables physical buttons, e.g., power and volume,
to focus the attention of Monkey on the app. We observed that
5Android ADB: https://developer.android.com/studio/command-line/adb.
6Immersive: https://developer.android.com/training/system-ui/immersive.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1978
these modiﬁcations eliminate most of the unintended behaviors.