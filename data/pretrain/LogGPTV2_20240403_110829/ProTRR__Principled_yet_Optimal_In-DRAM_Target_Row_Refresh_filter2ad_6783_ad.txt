impossible. We start by evaluating the victim hammer count
in the two cases, summing the different contributions:
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
741
REFREFREFa)TRFMREFREFREFb)RFMRFMRFMREFREFREFc)RFMRFMACTs usedRFMRFMRFMRFMSkipped ACTs0.1M0.2M0.3M0.4M0.5M0.6M# DecoysHammersDecoys leftFeintingFeinting-mediumFeinting-lite1357270310350# ACTs remaining30020010040k30k20k10k00Decoys left: mediumDecoys left: liteTx(1)(αi+1)= y+ TRF M×B
x(2)(αi+1)= y+ TRF M×B
D(αi)+ TRF M×B
D(αi)+V + ϵ×B
D(αi)−V
D(αi)+V + TRF M×B
D(αi) +
ϵ×B
D(αi)−V
We can evaluate when x(1)(αi+1)> x(2)(αi+1). This results
in TRF M > ϵ which is always true. Therefore, case (2) can
never be more optimal than case (1). This means that is not
possible that using the extra activations ceases to be useful
in one interval and becomes useful again in a later interval.
Likewise, if case (1) was not useful, case (2) would also not be
useful. By induction, it cannot become useful in the future: if i
is not useful and i+ 1 is not useful, i+ 2 will also not be useful,
and so on. Concluding, the attacker can calculate when to
stop inducing extra RFMs, deriving the best possible FEINTING.
Figure 8 shows the effectiveness of different FEINTING strategies
on DDR5. These results show that while FEINTING-Medium
improves the attack compared to FEINTING-Lite, in the case of
{V ; B}= 2 the improvement of the last optimization does not
result in a higher Hammer max.
D. FEINTING on DDR5 with RFM postponing
More sophisticated memory controllers may issue RFM com-
mands irregularly, i.e., not always precisely after RAAIMT acti-
vations. However, it must never be after TRF M= m× RAAIMT
(i.e., RAAMMT) activations. In case that TRF M > TREF ,
FEINTING can be improved if we assume that the attacker can
influence the scheduling of RFM commands. The idea is to
leverage extra activations gained by postponing RFMs to build
blocks of RAAIMT activations. This causes the RAA counter to
increase quickly, and at some point, the memory controller will
have to issue multiple, previously postponed RFM commands.
It is optimal for the attacker if the LtREF W activations are
equally distributed over intervals of size RAAIMT, similarly
as for FEINTING-Medium. In the last few intervals, postponed
RFMs can be sent after the tREFW, as such, allowing the
attacker to further increase the count of the decoys (needed
for REFs) and victim in these intervals without causing RFMs.
Furthermore, in this setting, the attacker requires fewer decoys
since fewer RFMs are issued during the attack. We refer to
Appendix B for more details.
VI. PROTRR
An ideal TRR mechanism (TRRideal) requires a large
amount of storage. For example, a single-rank module with
16 banks/rank and 16 bit row addresses needs in total 14 MiB
(Rthresh= 5 K). Mitigations deployed in the memory controller
can use known optimized data structures to detect when a
potential victim row reaches a specific threshold. Once this
happens, these mitigations can delay the execution of normal
DRAM operations to refresh this victim row [16], [19], [20],
[45]. As already explained (§V), it is not possible for in-DRAM
mitigations to delay DRAM requests due to the synchronous
nature of the DRAM protocol.
Park et al. [19] use Misra-Gries summaries [31] that provide
deterministic guarantees of finding the most frequently activated
(aggressor) rows [49]. Misra-Gries summaries are proven to be
optimal in the number of counters they need for detecting
frequent items. Unfortunately, these summaries cannot be
Fig. 9: Victim counting in PROTRR. Once a row is activated ( 1 ), if its
address is contained in the summary it is pruned ( 1a ). Then, the aggressor
blast diameter is considered ( 2 , for e.g. B= 2) identifying the victim rows.
The victim rows are compared with the summary’s content, which is updated
accordingly ( 3a , 3b , 3c ).
directly applied to the in-DRAM setting. First, Misra-Gries
provides guarantees of finding frequent items occurring more
than a fixed threshold in a stream with a specific length.
However, an in-DRAM mitigation must protect V rows with
the highest count at any TRR event without a fixed threshold.
It is unclear how many counters are necessary to provide
similar guarantees in PROTRR. Secondly, in a proactive in-
DRAM setting, the counters of refreshed rows must reset while
processing the stream, which is not considered in Misra-Gries.
Our proposed in-DRAM Rowhammer mitigation, PROTRR,
uses a new frequent item counting scheme for in-DRAM
operation, called PROMG (Proactive Misra-Gries). PROMG
operates similarly to the Misra-Gries scheme, but is designed
to function in the in-DRAM scenario. In the followings, we
show how PROMG is similarly optimal in the number of
required counters by leveraging the bounds given by FEINTING.
Furthermore, we show how PROMG enables PROTRR to
provide an optimal trade-off between the number of required
counters and additional refreshes – given a DRAM device with
a specific Rthresh.
A. Design of PROTRR
PROMG is a proactive version of Misra-Gries summaries
with two crucial differences. First, PROMG needs a different
number of counters than the original Misra-Gries since it needs
to make proactive decisions. We later show how FEINTING
can be used to right-size PROMG summaries. Second, PROMG
supports pruning entries from its summaries.
 pairs and a spillover counter. Conceptually, the
Similar to Misra-Gries, a PROMG summary is a table of
spillover counter represents the upper bound of counts for all
rows that are currently not in the summary. For every input,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
742
2Victims generator Summary update3calculated using FEINTINGVictim not presentVictim not presentAggressor not presentAggressor presentSpillover......CAddr.H.C.0x00010x0005x111001aSpillover......Addr.H.C.0x00010x00050x000911101bVictim presentSpillover......Addr.H.C.0x00010x0005x+11103a12Low spilloverSpillover......Addr.H.C.0x00010x00050x00030x120311113b01High spilloverSpillover......Addr.H.C.0x00010x00050x0003x+10x11222213c21x+1x-1 ACT of aggressor “x” 1its ID is compared with all existing table entries; if there is
a match, the associated counter is increased. Otherwise, the
spillover value is compared with the lowest counter, and if
the former is equal to or higher than the latter, the new input
replaces that entry and its counter is increased. If every entry
has a higher count than the spillover, the spillover is increased.
Unlike Misra-Gries, in PROMG, a row that is either activated
or refreshed is pruned from the summary, and its victim rows
are treated as summary inputs.
C+1 times
Figure 9 shows how PROTRR makes use of PROMG. On
each activation, PROTRR updates its summary accordingly by
incrementing counters that are associated with victim rows of
the activated row. At each TRR event, PROTRR refreshes the
V rows with the highest counters in the summary.
Right-sizing the PROMG summary in PROTRR. In the
original Misra-Gries scheme, given C counters and an input
stream of size L, any entry occurring more than L
will be included in the summary [19]. In contrast, PROTRR
uses PROMG to make proactive decisions without reaching a
threshold. To do this securely, we need to find the right number
of PROMG counters for PROTRR to be secure against FEINTING.
Furthermore, every row will be refreshed in a tREFW which
we also leverage in PROTRR to ensure that the counters do
not grow unbounded. To do this securely, however, we have to
adjust the bounds given by FEINTING. We now prove theorems
that shows how PROTRR right-sizes PROMG considering these
observations.
Theorem 4 (FEINTING optimality against PROTRR). If the
amount of TRR events in an attack is n, given PROTRR with
spillover), FEINTING is the optimal attack against PROTRR.
Corollary. Given Hammer max obtained with FEINTING for
fixed (V , B and n TRR events) and considering PROTRR with
C=(n− 1)× V + 1 counters in the summary (excluding the
C=(n− 1)× V+ 1 counters (excluding the spillover), PROTRR
where the Rowhammer threshold Rthresh>Hammer max.
▸ Proof. Given that C =(n− 1)× V + 1, PROTRR behaves
protects any device less vulnerable than Hammer max, i.e.,
exactly like an ideal counter against FEINTING. Therefore, an
attacker is able to reach Hammer max as described earlier. We
now prove that an attacker forcing the replacement of rows
in the summary due to the limited number of counters does
not increase Hammer max. A replacement happens if a row ˜ds
that is not in the summary is hammered, and the spillover is
equal or higher than the minimum count of the summary (row
˜dt). The replacement increases the counter that now refers to
˜ds. The effect on the attack is equivalent as if ˜dt had been
hammered, since for the victim to survive, it does not matter
which decoy is TRRed. Note that the replacement can only
happen if more than C decoys have already been hammered;
otherwise, ˜ds is added to the summary. Moreover, because
C= DT , all the decoys necessary for the attack have already
been hammered. Therefore, these replacements cannot improve
the attack.
Resetting. Over time, the counters can grow unbounded, thus
requiring unlimited storage to avoid overflows. This does not
reflect reality where every row is refreshed at least once in a
tREFW. To handle this, PROTRR resets the entire summary
once every tREFW. The refresh of a given row, however, is
not necessarily synchronized with the summary reset. This loss
of information about the past tREFW allows an attacker to
perform FEINTING across a reset, thus changing the supported
Rthresh. We address this in Theorem 5.
Theorem 5 (Non-linearity of FEINTING). In the presence of
a summary reset, two independent and shorter back-to-back
FEINTING result in a higher Hammer max than a longer one.
▸ Intuition. FEINTING starts after the victim row has been
regularly refreshed (REFI) to maximize the activations
available for the attack (LtREF W ). However, during the
attack, the summary could reset, leading to an information
loss that can be exploited to increase Hammer max. For
example, two attacks of (each) 4096 intervals require half
of the decoys than one attack lasting 8192 intervals but
using the same number of activations, allowing the victim
to be hammered more.
a summary reset happening σ intervals after FEINTING has
n intervals, never crossing a summary reset. The number
of times the victim will be hammered by the end of these
▸ Proof. We define the baseline as case (1): FEINTING lasting
intervals is denoted by x(1)(αn). In case (2), we consider
started (with σ< n− 1). Once the summary resets, it becomes
remaining i= n− σ intervals. The cumulative number of times
the victim is hammered, after n intervals is x(2)(αn). We
the first attack (σ intervals) and the second attack (n− σ
intervals): x(2)(αn) = ∑σ
B×T
ϕ=1
1+ϕ×V . Instead,
case (1) consists of only one attack: x(1)(αn)=∑n−1
B×T
ϕ=0
1+ϕ×V .
compare these two cases. In case (2), the number of hammers
to the victim is obtained by two different contributions,
empty, and a new FEINTING can be initialized, lasting the
ϕ×V+1 +∑i−1
B×T
ϕ=0
FEINTING attacks are optimal.
The second part of case (2) overlaps with the start of case (1),
i.e., their contributions are equal — a direct consequence of
Theorem 2. The first part of case (2) is larger than the sum of
the σ last terms in case (1), which proves the non-linearity.
Corollary (FEINTING-Split). Given a summary reset every
2 ), independent back-to-back
attacker to have two distinct and independent FEINTING. Now
we prove that the optimal condition for the attacker is when
there are two equally long attacks. We start by showing the
effect of moving an interval from the attack’s second part (i.e.,
tREFW, two balanced (σ= n−1
We proved that if σ < n− 1, it is always better for the
last n− σ intervals) to the first part (i.e., first σ intervals).
σ×V+1 ≥
B×T
part is beneficial for the attacker when B×T
leading to (i− 1)≥ σ. Given that i= n− σ, it follows that
1+(i−1)×V
the best case for the attacker is when σ = n−1
2 . Because
The reader will remember that the sum of the two intervals
is fixed by n. Moving an interval from the second to the first
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
743
Fig. 10: Flexibility in PROTRR. Example for DDR4 (B=2, V=2, tREFW
=64 ms). For a fixed storage, TRR distance (d) can be used as trade off.
PROTRR implements summary refresh, we have to consider
this adaptation of FEINTING, which we refer to as FEINTING-
Split, when right-sizing the PROMG summary. Before finalizing
FEINTING-PROTRR, we add flexibility to PROTRR.
B. Optimality and Flexibility
Depending on the DRAM technology, a vendor may afford
a maximum number of TRR events (N) to be performed
in a tREFW and a certain number of counters (C) to keep
track of victim rows. We design PROTRR to be flexible: given
any pair of (N, C), the maximum vulnerability protected
can be obtained using FEINTING. A DRAM vendor, knowing
the Rthresh for its own devices, can decide to change N
or C as needed. Furthermore, we show that for any given
(N, C, Rthresh), PROTRR is optimal: there exists no other
deterministic in-DRAM TRR that is secure against FEINTING
with a smaller number of TRR events than N. Similarly, for
a given Rthresh and N, the number of counters C is optimal.
We first show how PROTRR achieves flexibility and optimality
for N, and then we discuss the same for C.
Flexible and optimal TRR events. The bounds given by
FEINTING enable vendors to calculate the required TRR
events (N) in a tREFW for a device-specific Rthresh. The
following theorem shows that N is optimal for a given Rthresh.
Theorem 6 (TRR events optimality). For a supported Rthresh,
PROTRR is optimal in the number of TRR events needed.
To defend Rthresh= Hammer max+ 1 against FEINTING, the
+ 1 TRR events in a tREFW.
device requires at least DT−1
If a smaller number of TRRs are employed, then the decoys
for FEINTING will be fewer, and Hammer max will exceed
Rthresh. Hence, the number of TRR events is optimal. This
feature of PROTRR provides it with flexibility on the number
of TRR events. We can reduce the number of TRR events if a
device has a high Rthresh. In practice, a manufacturer can tune
the number of TRR events using the distance d (§V-B). This
enables configurability of PROTRR according to the DRAM
vendors’ needs. Figure 10 shows how PROTRR can support
devices with different Rthresh by appropriately choosing d.
We now show how PROTRR provides further flexibility in the
number of required counters.
Flexible and optimal number of counters. For a given
Rthresh, FEINTING gives us the optimal number of TRR events.
It follows that DT counters are needed. Given that Misra-Gries
summaries are space-optimal [49], using DT counters will be
optimal against FEINTING. For more flexibility, we show how
PROTRR can reduce this number of counters with a slight
increase of Rthresh.
V