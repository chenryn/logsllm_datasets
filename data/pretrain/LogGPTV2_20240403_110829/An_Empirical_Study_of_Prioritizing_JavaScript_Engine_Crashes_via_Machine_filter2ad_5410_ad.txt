classifying security bugs when its model is trained on crash-dump
files only from each JS engine. As Section 6.3 describes, the most
Session 9: FuzzingAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand652Table 7: Evaluation of CRScope with oversampled crash instances.
Target system
JS engines
CRScope
Exniffer
CRScope
+ Exniffer
Selected model
Accuracy
Precision
Recall
F1-Score
AUC
Selected model
Accuracy
Precision
Recall
F1-Score
AUC
Selected model
Accuracy
Precision
Recall
F1-Score
AUC
Chakra
RFC
0.85 ± 0.04
0.84 ± 0.06
0.87 ± 0.03
0.85 ± 0.04
0.85 ± 0.04
RFC
0.69 ± 0.09
0.64 ± 0.08
0.83 ± 0.06
0.72 ± 0.07
0.69 ± 0.08
RFC
0.81 ± 0.08
0.80 ± 0.08
0.84 ± 0.09
0.82 ± 0.08
0.81 ± 0.08
V8
RFC
0.89 ± 0.04
0.89 ± 0.08
0.90 ± 0.02
0.89 ± 0.04
0.89 ± 0.04
RFC
0.86 ± 0.02
0.81 ± 0.04
0.94 ± 0.06
0.87 ± 0.02
0.86 ± 0.02
DTC
0.91 ± 0.05
0.91 ± 0.05
0.87 ± 0.08
0.90 ± 0.06
0.91 ± 0.05
SpiderMonkey
DTC
0.93 ± 0.04
0.95 ± 0.03
0.92 ± 0.07
0.93 ± 0.04
0.93 ± 0.03
MLP
0.77 ± 0.03
0.76 ± 0.02
0.78 ± 0.09
0.77 ± 0.04
0.77 ± 0.03
DTC
0.93 ± 0.02
0.95 ± 0.04
0.92 ± 0.06
0.93 ± 0.02
0.93 ± 0.02
All
RFC
0.88 ± 0.05
0.89 ± 0.04
0.86 ± 0.07
0.87 ± 0.05
0.88 ± 0.05
RFC
0.77 ± 0.05
0.74 ± 0.05
0.83 ± 0.06
0.78 ± 0.04
0.77 ± 0.05
DTC
0.88 ± 0.03
0.90 ± 0.05
0.87 ± 0.02
0.88 ± 0.03
0.88 ± 0.03
(a) Chakra
(b) V8
(c) SpiderMonkey
(d) All
Figure 2: ROC curves for CRScope with oversampled crash instances
significant features included backtraces and function names, each
of which differs among JS engines.
We also compared our experimental results for the models trained
on the features addressed in Exniffer [60]. Exniffer is a machine
learning based tool that predicts the exploitability of crashes using
crash-dump files and the last branch record (LBR) register. This
work used a total of 51 static and dynamic features from crash-
dumps and the LBR register, respectively. Out of the 51 features,
there were 44 static features, which consisted of whether the back-
trace was corrupted; whether the instruction pointer, base pointer,
and stack pointer referenced valid memories; the type of access
violation; the number of operands; each operand type; and the
type of signal. When implementing Exniffer, we used static (not dy-
namic) features to leverage only crash-dump files. We excluded LBR
information because the extraction of this dynamic information
from complex software, such as JS engines, is difficult for normal
users who lack security expertise; this issue contradicts our goal.
Furthermore, Tripathi et al. demonstrated that the LBR features
were not significant when Exniffer classified exploitability; the LBR
features did not appear in the top five significant features [60].
Table 7 shows that CRScope achieves a better performance than
Exniffer in all cases. It demonstrates that the Exniffer features are
not more effective than ours in determining security bugs. Interest-
ingly, when combining the features from CRScope and Exniffer, the
performance in all cases, except Chakra’s one, is boosted. This result
clearly demonstrates that CRScope features significantly contribute
to identifying security bugs, and Exniffer features are complemen-
tary, partly contributing to CRScope performance improvement.
6.3 Feature Importance (RQ3)
Table 8 shows the list of the top five features, ranked by their signifi-
cance in each selected model, which produced the best performance.
Some listed features have a square bracket ([ ]), which represents
the feature type and the vectorization method used to extract the
feature. The left-hand element of a colon in the bracket is a feature
type. We abbreviate Crashing instruction, Crashing function, and
0.00.20.40.60.81.0FalsePositiveRate0.00.20.40.60.81.0TruePositiveRateMNB:0.73(±0.13)LR:0.77(±0.08)MLP:0.81(±0.07)SVC:0.79(±0.09)DTC:0.76(±0.07)RFC:0.85(±0.04)Exniﬀer:0.69(±0.08)0.00.20.40.60.81.0FalsePositiveRate0.00.20.40.60.81.0TruePositiveRateMNB:0.76(±0.07)LR:0.88(±0.05)MLP:0.88(±0.03)SVC:0.89(±0.05)DTC:0.87(±0.04)RFC:0.89(±0.04)Exniﬀer:0.86(±0.02)0.00.20.40.60.81.0FalsePositiveRate0.00.20.40.60.81.0TruePositiveRateMNB:0.81(±0.03)LR:0.90(±0.03)MLP:0.92(±0.05)SVC:0.88(±0.04)DTC:0.93(±0.03)RFC:0.92(±0.05)Exniﬀer:0.77(±0.03)0.00.20.40.60.81.0FalsePositiveRate0.00.20.40.60.81.0TruePositiveRateMNB:0.70(±0.02)LR:0.83(±0.06)MLP:0.88(±0.05)SVC:0.86(±0.03)DTC:0.87(±0.06)RFC:0.88(±0.05)Exniﬀer:0.77(±0.05)Session 9: FuzzingAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand653Table 8: Most significant features in the CRScope models
JS engines
Chakra
(RFC)
V8
(RFC)
Spider
Monkey
(DTC)
All
(RFC)
CRScope
Top-5 features
1. [b:c] js
2. [b:t] js profilinghelpers
3. [b:c] interpreterstackframe
4. [i:t] rbx
5. [b:t] javascriptproxy
1. [b:t] abort
2. signal
3. [i:t] ptr
4. [i:t] ud2
5. [f:t] v8
1. [b:c] runfile
2. [b:c] jit
3. [b:c] jsstring
4. [f:t] js
5. [i:t] 0x1cb
1. [f:t] execute executescript
2. [f:t] js
3. [f:c] internal
4. crash_type
5. [b:t] js profilinghelpers
JS engines
Chakra
(RFC)
V8
(DTC)
Spider
Monkey
(DTC)
All
(DTC)
CRScope + Exniffer
Top-5 features
1. [b:c] js
2. [b:t] js profilinghelpers
3. [i:t] rbx
4. [f:t] js sourcetextmodulerecord
5. [b:t] javascriptproxy
1. signal
2. [f:c] accessors
3. [b:t] internal object
4. [b:c] compile
5. [F13] Memory operand is Null
1. [f:t] js
2. [F34] Resume Flag
3. [b:c] jit
4. [b:c] runfile
5. [b:c] gc
1. [f:t] js
2. [F20] Operand is register
3. [b:c] internal
4. crash_type
5. [i:t] qword
Backtrace as “i,” “f,” and “b,” respectively. The right-hand element
indicates either CountVectorizer or TfidfVectorizer, which are ab-
breviated as “c,” and “t,” respectively. For instance, [i:t] ptr means
that its corresponding feature value is ptr that is extracted from a
crashing instruction by applying the TfidfVectorizer method. Other
features without the square bracket represent a feature type ex-
tracted via LabelEncoder, such as signal and crash_type. The other
features starting with “F” in a square bracket represent features
from Exniffer. The number next to the “F” represents a feature index
used in [60].
Chakra. The third row shows the top five significant features for
the Chakra classifier models. When considering only CRScope fea-
tures, most of the significant features, except for the fourth top
feature, were namespace and class names extracted from back-
traces. The first, second, third, and fifth top features represent the
Js namespace, Js::ProfilingHelpers class, Js::InterpreterStackFrame
class, and Js::JavascriptProxy class, respectively. We investigated
the Chakra dataset and found that 88.1% of crash instances with the
Js::ProfilingHelpers feature and 73.8% with the Js::InterpreterStack-
Frame feature were security bugs. On the other hand, all crash
instances with the Js::JavascriptProxy feature were non-security
bugs, thus enabling the classifier to assign a non-security bug for
these crash instances. It is apparent that the classes appearing in a
backtrace significantly contribute to the CRScope classification of
security bugs.
The fourth feature is the rbx register extracted from the crash-
ing instructions. We investigated the usage of rbx in our Chakra
dataset. This register stored a data value (e.g., mov rbx, QWORD
PTR [r12]) or referenced a memory address (e.g., mov rax, QWORD
PTR [rbx+0x8]). Interestingly, when the rbx register references a
non-null memory address, such crashes were classified as security-
related. This result shows that the usage of the rbx register at a
crashing instruction plays an important role in security bug classi-
fication.
V8. The top feature of the V8 model is abort, which is a 1-gram
token of the v8::internal::OS::Abort or v8::base::OS::Abort functions
extracted from backtraces. These functions are primarily utilized
when the engine detects an error and then terminates by itself.
In our V8 dataset, 68.6% of crash instances with the abort feature
were non-security bugs. Interestingly, however, crash instances
with abort feature had SIGILL (86.1%) or SIGABRT (13.9%) signals,
and 73.7% of crash instances with SIGILL were non-security bugs,
while 63.2% of crash instances with SIGABRT were security bugs.
Therefore, this top feature contributes to CRScope identifying both
security and non-security bugs.
The second top feature is signal. In our V8 dataset, a signal is one
of SIGSEGV, SIGABRT, SIGILL, and SIGFPE. About 87.4% of crash
instances with the SIGSEGV feature and 63.2% of crash instances
with the SIGABRT feature were security bugs. On the other hand,
all crash instances with the SIGFPE feature and 73.7% of crash
instances with the SIGILL feature were non-security bugs. Hence,
the former and latter signals affect the capability of CRScope to
classify security bugs and non-security bugs, respectively.
The third and fourth top features were extracted from crashing
instruction. Any instructions involving ptr read or write from/to
main memory addresses. In our V8 dataset, 93% of crash instances
with ptr had the SIGSEGV signal, which indicates a memory bug.
Approximately 85.9% of crash instances with the ptr feature were
security-related. The ud2 instruction means an undefined instruc-
tion and is closely related to the abort functions and SIGILL signal
because all crash instances with the ud2 feature had the SIGILL
signal and backtraces involving the abort functions. Therefore, it
had the same percentage of non-security bugs with SIGILL crash
instances (i.e., 73.7%). Among crashing instructions, ptr and ud2
Session 9: FuzzingAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand654function f () {
({ a = () => {
let arguments ;
}} = 1) ;
arguments .x;
}
f () ;
Listing 1: Chakra PoC code that invokes the security bug of
CVE-2017-8670
var proxy = new Proxy ( function () {} , {}) ;
class C extends proxy {
constructor () {
super ( Object . setPrototypeOf (C , function () {}) )
}
}
Reflect . construct (C , [] , proxy );
Listing 2: Chakra PoC code that invokes a non-security bug
contributed to CRScope being able to identify security bugs and
non-security bugs, respectively.
SpiderMonkey. The runfile feature, the top feature for SpiderMon-
key, indicates the partial sequence of a backtrace,
RunFile − Process − ProcessArдs − Shell − main,
which locates at the bottom of the backtrace. In our SpiderMonkey
dataset, 83.1% of crash instances with that backtrace were non-
security bugs. However, we concluded that this feature has no
discriminative capability since the call sequence including runfile
is a common method for executing JS tests, which does not have
any security implication.
The second and third top features represent the js::jit and JSString
classes, respectively. We analyzed the usage of those classes in our
dataset. We found that the more the js::jit class appears in a back-
trace, the more likely its crash instance is security-related. The rate
of security bugs among the crash instances for which the number of
the js::jit class appearing in the backtrace is greater than zero was
45.3%. This rate grows as the number of js::jit occurrences increases;
the security bug rate when considering only backtraces for which
the number of js::jit occurrences was greater than two increased to
71.4%. Further, the rate went up to 77.3% when the occurrence was
greater than three, and 82.4% when the occurrence was greater than
four. For the crashes with backtraces involving JSString, we ob-
served two kinds of backtraces; JSString::isRope - JSString::isLinear
- JSString::ensureLinear and JSString::dumpRepresentation. Inter-
estingly, all crash instances with the former backtrace were non-
security bugs, while the latter were security bugs.
The fifth top feature is the 0x1cb value extracted from crashing
instruction. In our SpiderMonkey dataset, there were four crashing
instruction instances involving 0x1cb, and they shared the same
instruction semantic: mov DWORD PTR [eax], 0x1cb. This opera-
tion attempts to write 0x1cb to a memory location referenced by a
register, resulting in a write violation when the referenced address
is not accessible or allocated. We observed that all of these instances
were security bugs.
Exniffer. When covering both CRScope and Exniffer features, our
features showed up in the top five significant features in most cases.
It indicates that CRScope features are more adequate in terms of