示例代码如下：
    Properties props = new Properties();
    // 生成一个ORB，并初始化，这个和Server端一样
    props .put("org.omg.CORBA.ORBInitialPort", "1050");
    props.put("org.omg.CORBA.ORBInitialHost", "192.168.0.2");
    ORB orb = ORB.init(args, props);
    // 获得根命名上下文
    org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
    // 用NamingContextExt代替NamingContext.
    NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
    // 通过名称获取服务器端的对象引用
    String name = "Hello";
    Hello hello = HelloHelper.narrow(ncRef.resolve_str(name));
### 2\. 通过 ORB.string_to_object
示例代码如下：
    ORB orb = ORB.init(args, null);
    org.omg.CORBA.Object obj 
    = orb.string_to_object("corbaname::192.168.0.2:1050#Hello");
    Hello hello = HelloHelper.narrow(obj);
如上代码，传入的参数是 corbaname: 开头的字符串，string_to_object 支持三种协议：
corbaname: 、 corbaloc: 、 IOR:
#### 2.1 IOR
IOR 是一个数据结构，它提供了关于类型、协议支持和可用 ORB 服务的信息。ORB 创建、使用并维护该 IOR。
简单可以理解为，存储着 corba server 相关 rpc 信息，以 IOR:XXX 形式表现的字符串，如：
    IOR:000000000000000100000000000000010000000000000027000100000000000b33302e35322e38382e370000041a00000000000b4e616d6553657276696365
#### 2.2 corbaloc
corbaloc 经过处理最终也是生成一个 IOR ，然后通过 IOR 创建出一个 stub
#### 2.3 corbaname
他的处理逻辑如下：
如上图，这完全和第一种通过 NameServer 获取 stub 的方式一样，后续的调用链在 client 安全风险分析过程中会展示出来。
### 3.通过 jndi （javax.naming.InitialContext.lookup）
代码如下：
    ORB orb = ORB.init(args, null);
    Hashtable env = new Hashtable(5, 0.75f);
    env.put("java.naming.corba.orb", orb);
    Context ic = new InitialContext(env);
    // resolve the Object Reference using JNDI
    Hello helloRef 
    =HelloHelper.narrow((org.omg.CORBA.Object)ic.lookup("corbaname::192.168.0.2:1050#Hello"));
如上述代码，也是使用的 corbaname 作为协议开头，因为 jndi 同时支持3中写法：
iiopname:
iiop:
corbaname:
其中， iiopname 和 iiop 开头的协议串，最终会转换成 corbaloc 开头的协议串。corbaname 开头的协议，会触发
org.omg.CosNaming._NamingContextStub#resolve 调用。
resolve 函数 和 resolve_str 函数实现逻辑是一样的、执行结果也相同，只是参数类型不同而已。
## 九、client 端调用 rpc
使用方式目前只收集到 2 种：
· 1. 通过 client 端 stub 进行调用
· 2. 通过 Dynamic Invocation Interface（dii request）调用
### 1\. stub 调用
代码如下：
    Properties props = new Properties();
    // 生成一个ORB，并初始化，这个和Server端一样
    props .put("org.omg.CORBA.ORBInitialPort", "1050");
    props.put("org.omg.CORBA.ORBInitialHost", "192.168.0.2");
    ORB orb = ORB.init(args, props);
    // 获得根命名上下文
    org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
    // 用NamingContextExt代替NamingContext.
    NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
    // 通过名称获取服务器端的对象引用
    String name = "Hello";
    Hello hello = HelloHelper.narrow(ncRef.resolve_str(name));
    //调用远程对象
    System.out.println(hello.sayHello());
### 2\. dii 调用
代码如下：
    Properties props = new Properties();
    // 生成一个ORB，并初始化，这个和Server端一样
    props .put("org.omg.CORBA.ORBInitialPort", "1050");
    props.put("org.omg.CORBA.ORBInitialHost", "192.168.0.2");
    ORB orb = ORB.init(args, props);
    // 获得根命名上下文
    org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
    // 用NamingContextExt代替NamingContext.
    NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
    // 通过名称获取服务器端的对象引用
    String name = "Hello";
    Hello hello = HelloHelper.narrow(ncRef.resolve_str(name));
    Request request = hello._request("sayHello");
    request.invoke();
    System.out.println(request.result().value());
如上述代码，在 stub 获取的部分和 stub 调用方式完全一样，后续是通过获取
com.sun.corba.se.impl.corba.RequestImpl 以此来进行 dii 调用的（Dynamic Invocation
Interface）。
## 十、Server 解析
### 服务注册
回顾一下 HelloServer 中注册服务的代码，如下：
    // 获得命名上下文 NameService
    org.omg.CORBA.Object objref = orb.resolve_initial_references("NameService");
    // 使用NamingContextExt 它是 INS（Interoperable Naming Service，协同命名规范）的一部分
    NamingContextExt ncRef = NamingContextExtHelper.narrow(objref);
    // 绑定一个对象引用，以便客户端可以调用
    String name = "Hello";
    NameComponent[] nc = ncRef.to_name(name);
    ncRef.rebind(nc, href);
如上代码，在获取到 NameService 后随即开始注册服务，服务名叫做 Hello，client 端可以通过服务名在 NameService
中搜索服务。在此调用 NamingContextExt#rebind 是向 ORBD 发送一个重绑定请求。
### 派遣请求
在服务绑定完成后，服务端会开始监听一个高端口等待客户端的连接通信。
下图是客户端发起请求后，服务端派遣请求的工作流程：
至此，JDK CORBA 基本概念介绍结束。
## 十一、安全风险
经过分析和探索，发现了 client 端、server 端、orbd 端含有如下风险点：
· client 端 ，存在反序列化风险和远程类加载风险
· server 端，存在反序列化风险
· orbd，存在反序列化风险
在下篇中，将会分析 JDK CORBA 中存在的风险点。
## 参考文献
RPC基本原理：
CORBA Website：
wiki：
基本概念：
构建简单的 corba 应用：
corba 简介：
corba 通信过程浅析：
## 关于作者
**蚂蚁安全非攻实验室**
：隶属于蚂蚁安全九大实验室之一。蚂蚁安全非攻实验室致力于JAVA安全技术研究，覆盖蚂蚁自研框架和中间件、经济体开源产品以及行业中广泛使用的第三方开源产品，通过结合程序自动化分析技术和AI技术，深度挖掘相关应用的安全风险，构建可信的安全架构解决方案。
* * *