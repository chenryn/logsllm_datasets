 有了全部这些信息，现在就可以开始处理一个FOO的点对形式了。你使用parse-cons-form
元素主体的输出过程与属性值的输出类似：你可以在主体上循环调用process来求值其中的
(defun emit-attributes (processor attributes)
在emit-attributes中，属性名必须是关键字符号，因此它不会被求值，但你应当调用顶
在emit-open-tag中你需要在适当的时候调用freshline,然后用emit-attributes来输
(og aossaooid) tqu-dxas-suos-ssaoosd unga)
(defparameter *xhtml* nil)
当生成HTML时你需要的最后一点儿信息是，你是否在生成XHTML，因为这将影响到你输
(saanqtrane d-Apoq 6en xossaooid) b6ea-uado-atwa ungap)
(defun preserve-whitespace-p (tag) (find tag *preserve-whitespace-elements*))
也是合法的，例如使用而非。所有兼容HTML 4.0
(defun empty-element-p (tag) (find tag *empty-elements*))
要为这样的浏览器生成HTML，那么你将修改emit-attributes从而以不同的方式输出那些属性。
的浏览器都应当同时理解两种形式，但一些有bug的浏览器对于特定属性可能只理解没有值的那种形式。如果需
(loop for
((61 =()> u e1o1) 1ossoxd bu1xs-me1)
(woy wrog-suos-asred) (poq saanqtrine bei) uta-antea-atdtanu)
(when (string= 
(freshline processor))
(emit-close-tag
(Apog bea rossasoid Xpoq-auawata-atwa)
(emit-open-tag 
{let ((*escapes*
*escapes*
processor
processor tag body attributes)
*attribute-escapes*))
attributes)
www.TopSage.com
(eql v t) (string-downcase k) v)))
tag body))}
#~(~a~)=" k})
~a" form))
30.7
基本求值规则
一只是T而非
387
---
## Page 405
的绑定。它还可以让你指定是否想要美化HTML输出，默认值是变量*pretty*的值。
为FOO公共API的一部分暴露出来，你不如定义一个宏with-html-output，让它来为你处理流
*html-output*作为其输出流。
被绑定的情况下返回该变量的值；否则，它生成html-pretty-printer的一个新实例，它使用
用助手函数get-pretty-printer来得到美化打印器对象，该函数在*html-pretty-printer*
调用process并向其传递html-pretty-printer和一个需要求值的Lisp形式。你可以定义并使
出闭合标签，你都需要为块和段落元素输出一个结束的换行。
例如当主体为空并且你要么在输出XHTML，要么该元素是特殊的空元素之一)。无论是否实际输
388
因此，如果你想要使用emit-html来生成HTML到一个文件里，那么就可以这样来写：
有了这个函数，就可以将HTML输出到*html-output*了。与其将变量*html-output*作
(defun emit-html (sexp)(process (get-pretty-printer)sexp))
函数process是基本的FOO解释器。为了让其更易于使用，你可以定义函数emit-html，它
(defun emit-close-tag (processor tagbody-p)
最后，正如你可能想到的那样，emit-close-tag输出闭合的标签（除非不需要闭合标签，
(defun get-pretty-printer ()
(defun emit-element-body (processor tag body)
(with-open-file(out"foo.html":directionoutput)
(or *html-pretty-printer*
(when
(unless（and（or*xhtml*
(with-html-output
(when (preserve-whitespace-p tag)(toggle-indenting processor))
(dolist（item body)
(when (preserve-whitespace-ptag)
(when (block-element-p tag)
(let*
when
(freshline processor)))
(raw-string processor（format nil
(process processor item))
,@body))
(freshline processor)))
(freshline processor)
第30章实践：HTML生成库，解释器部分
:printer(make-instance'indenting-printer:out *html-output*))))
(make-instance
html-pretty-printer
((*html-output*
(or
(*pretty*
pretty))
(out
:prettyt)
,stream)
www.TopSage.com
(empty-element-ptag))(notbody-p))
(toggle-indenting processor))
tag))）
---
## Page 406
符和宏来使其具有更强的表达能力。
将HTML生成代码直接嵌入到Lisp程序中了。你还能扩展FOO语言，通过添加它自己的特殊操作
30.8下一步是什么
在第31章里，你将看到如何实现一个宏来将FOO表达式编译成CommonLisp，这样你就可以
www.TopSage.com
30.8下一步是什么
389
---
## Page 407
html-pretty-printer上的方法的代码来输出美化的HTML；而当*pretty*为NIL时，它生成
Common Lisp表达式的列表。当*pretty*为真时，generate-code生成使用特化在
这在多数时候会很重要，因为它使你得以合并更多的raw-string op。
成一次性输出的字符串组合的单个op。该优化函数也可以将那些只用于美化打印的op提取出来，
process函数来编译该列表。
了编译器的第一阶段，在一个FOO形式列表的每个形式上调用带有html-compiler实例的
个列表，包括一个命名了该操作的关键字和传递给产生该op的函数的参数。函数sexp->ops实现
数的那些操作码（op)。
调整的向量的槽,这种向量用来集聚那些代表在执行process函数的过程中调用后台接口广义函
31.1
编译器将利用这种能力。
解，编译器只需将这些代码识别出来，并直接嵌人到其所生成代码的正确位置上就可以了。FOO
Lisp宏时，你还可以获得额外的优势：让含有嵌人式CommonLisp代码的语言更容易被编译器理
合并在一起,从而使用比解释器更少量的写入操作来输出同样的HTML。当编译器是一个Common
化它们生成的代码，使其更加高效。FOO编译器能够做到这点是因为它通过将字面文本尽可能地
器通常比解释器更有优势，这是因为编译过程是预先完成的，因此它们可以多花一点儿时间来优
转译成Common Lisp代码的CommonLisp宏，因此它可以直接嵌入到Common Lisp程序中。编译
处理同样的程序却可以产生以其他语言表示的实现相同行为的代码。在FOO中，编译器是将FOO
这个编译器保存的op向量随后被传给一个用来优化它的函数，将相邻的raw-string op合并
随后你将实现后台接口中广义函数上的方法，在向量中保存操作序列。每一个op被表示成一
编译器
编译器部分
实践：HTML生成库
www.TopSage.com
---
## Page 408
两阶段用来保存op的向量。
其值打算嵌入的变量。
一的非自求值原子。你可以假设任何非FOO的点对都是用来内联运行的代码，而所有的符号都是
embed-code和embed-value函数。由于所有的自求值对象都是合法的FOO形式，不需要传递给
了利用这点，你需要修改process函数，使其在处理一个并非FOO形式的表达式时可以调用
值。这样，每个含有对html宏调用的函数都将同时含有生成美化和紧凑输出的代码。
而另一个是在*pretty*绑定到NIL时生成的。究竟使用哪个展开式取决于*pretty*在运行期的
直接向流*html-output*写入的代码。
 现在让我们查看编译器的代码。首先你应当创建两个函数，它们略微地抽象了将在编译的前
编译器和解释器之间的另一个明显区别是，编译器可以在它生成的代码中嵌入Lisp形式。为
宏html实际上会生成一个含有两个展开式的主体，一个是在*pretty*绑定到T时生成的，
接下来你可以定义html-compiler类和特化在其上的方法，以实现后台接口。
((raysnq-sdo do puaaxa-usnd-ioaoaa) (iayinq-sdo do) do-usnd unyap)
(defun make-op-buffer () (make-array 10 :adjustable t :fill-pointer 0))
(defun process (processor form)
(defmethod embed-code ((compiler html-compiler) code)
(defmethod embed-value ((compiler html-compiler) value)
(defmethod toggle-indenting ((compiler html-compiler))
(defmethod unindent ((compiler html-compiler))
(defmethod indent ((compiler html-compiler))
(defmethod freshline ((compiler html-compiler))
(defmethod newline ((compiler html-compiler))
(defclass html-compiler ()
(push-op 
(push-op
(push-op
do-usnd)
(push-op
(push-op
(push-op
(push-op
(cond
t.
(sexp-html-p form) (process-sexp-html processor form))
(:embed-code
(:toggle-indenting) (ops compiler)))
(:unindent） (ops compiler)))
(:indent） (ops compiler)))
(:freshline)
{:raw-string,string
((compiler html-compiler) string &optional newlines-p)
(ops compiler)))
embed-codeprocessorform)
www.TopSage.com
,newlines-p)
(ops compiler)))
31.1编译器
391
---
## Page 409
*html-output*，后者就是美化打印器用来发送输出的那个流。
绑定在html-pretty-printer 上。当*pretty*为NIL时，
当*pretty*为真时，它生成在*html-pretty-printer*上调用后台广义函数的代码，该变量
*pretty*为NIL时清除美化打印的op。
个交替出现:raw-string和:newline两个op的序列，然后再添加下一个op。这个函数也负责在
这样，相邻的:raw-string op将把需输出的字符串拼接成单个字符串。一旦遇到了一个不
向量。对于每个:raw-string op，算法是简单的，它将字符串写入到一个临时字符串缓冲区里。
下面是sexp->ops从一个简单的FOO形式中产生的结果：
392
实际的函数generate-code很简单。
最后一步是将这些op转化成相应的CommonLisp代码。这一阶段也会关注*pretty*的值。
(((noo d:)): sdoops了。
(defun generate-code (ops)
(defun optimize-static-output (ops)
下一个阶段optimize-static-output接受一个op的向量并返回一个含有优化后版本的新
defun sexp->ops (body)
（((do apoo<-do:# Xdde) 1oatto sdo ssoioe do xo doot)
(let ((new-ops (make-op-buffer)))
(:RAW-STRING
(loop with compiler
new-ops))
while pos))
when pos do
for pos 
for start = 
(with-
finally (return (ops compiler))))
第 31章 
(compile-buffer buf new-ops)))
-output-to-string (buf)
ecase
(position #\Newline str :start start)
"FOO"
实践：HTML生成库，编译器部分
(compile-buffer buf new-ops)
0 then(1+
((:newline :embed-value :embed-code)