这里的另一个新内容是sETF用在了诸如（getfrow：title)这样的复杂形式上。第6章将
有了完美通用的select和where函数，是时候开始编写下一个所有数据库都需要的特性
NIL
CL-UsER> (update (where :artist “Dixie Chicks"):rating 11)
(defun update (selector-fn &key title artist rating(ripped nilripped-p))
因为在这些语言里，if是一个语句，而不是一个表达式。
中的三目运算符（？：），其中这样的写法是合法的：
这样则是不合法的：
(setf *db*
更新已有的记录一
第3章实践：简单的数据库
(mapcar
#'（lambda（row)
some_boolean
(some_boolean)valuel;elsevalue2;
if
(ifrating
(ifartist
www.TopSage.com
—WHERE再战江湖
(setf
(setf(getf row
(setf(getf
(getfrow
(getf
:artist)artist))
:rating)rating))
:title）title))
---
## Page 46
where的调用，使用一个只做必要比较的匿名函数。举个例子，如果发现这段代码：
序将所有这些调用where的位置以及究竟传递了哪些参数都找出来。然后就可以替换每一个对
的其他关键字形参是否被设置了。?如果真的想要移除所有这些运行期检查，则可以通过一个程
码来检查你所关心的那些值，但为什么它非要在运行期来检查title参数是否被传递进来了呢？
update也需要承担同样的重复。最令人讨厌的一点在于，where函数的本意是动态生成一点儿代
不得不改动它的多个副本。并且如果改变了CD的字段，就必须添加或删除where的子句。
虑的重复出现在where函数里。where的函数体是一堆像这样的子句，每字段一个：
的命令行接口，只有50行多点儿。总共就这些。
3.8
结果重新保存到*db*中，delete-rows?事实上改变了数据库的内容。
谓词的元素都被删掉。和REMOVE-IF-NOT一样，它实际不会影响传人的那个列表，但是通过将
这样就可以了。
想象一下你正在试图优化这段代码，并且已经发现了它花费太多的时间检查title和where
不过这里仍然有一些讨厌的代码重复，看来可以在消除重复的同时使代码更为灵活。我所考
③
① 你需要使用delete-rows这个名字而不是更明显的delete，因为已经有一个Common Lisp函数叫做DELETE了。
②
(select (where :title "Give Us a Break" :ripped t))
眼下情况还不算太坏，但它的开销和所有的代码重复是一样的：如果想要改变它的行为，
(if title (equal (getf cd:title) title) t)
目前所有的数据库代码，支持插人、选择、更新，更不用说还有用来添加新记录和导出内容
函数REMOVE-IF的功能跟REMOVE-IF-NOT正好相反，在它所返回的列表中，所有确实匹配
甚至可以更容易地添加一个函数来从数据库里删除记录。
 CL-USER> (select (where :artist "Dixie Chicks"))
测到的影响。另一方面，这些由where返回的函数刚好位于任何select、update或delete-rows调用的内循
考虑到检测一个变量是否为NIL是非常省事的，因此很难说检查关键字参数是否被传递的开销对整体性能有可检
记到脑子里的方法？”“不，我是说我把我的头放在显示器上，然后那段代码不应该比我的头还大。”
我的一个朋友某一次采访一个从事编程工作的工程师，并问了他一个典型的采访问题：“你怎样判断一个函数或
至少这段代码里没有。*db*的旧值所使用的内存将被自动回收，假设没有其他地方持有对它的引用的话。
数的。但我还没准备好来解释关于包的事情。
Lisp包系统可以提供你处理这类名字冲突的途径，因此如果你真想要的话，还是可以得到一个叫做delete的函
(defun delete-rows (selector-fn)
环之中，它们将在数据库每一项上都被调用一次。不管怎么说，出于阐述的目的，我们必须要把它处理掉。
者方法太大了？”
如果你担心这些代码产生了内存泄露，那么大可放心：Lisp就是发明垃圾收集（以及相关的堆分配）的那个语言。
(:TITLE "Fly" :ARTIST “Dixie Chicks" :RATING 11 :RIPPED T))
消除重复，
(setf *db* (remove-if selector-fn *db*)))
“这个嘛，”被采访者说，“我不喜欢任何比我头还大的方法。”“你是说那些无法将所有细节都
，获益良多
www.TopSage.com
:RATING 11 :RIPPED T)
3.8 消除重复，获益良多
?
而
就
---
## Page 47
给ReVBRsE,后者返回列表（formatt“hello，world"）。backwards再将这个值传回给REPL,
却有着完全不同的效果。你可以像下面这样来使用这个宏：
宏定义包括名字，就像函数那样，另外宏还有形参列表以及表达式体，这些也与函数一样。但宏
创建一个宏：
数并返回一个逆序的新列表。因此(reverse′(1 2 3))的求值结果为(3 2 1)。现在让我们
然后对其求值以顶替最初表达式。
合法的Lisp形式。REPL随后将这个列表传给backwards代码。backwards中的代码再将列表传
宏。在开始写这个示例宏之前，我需要快速介绍一个新函数：REVERSE，它接受一个列表作为参
Lisp表达式，在原先宏调用的位置上进行求值。
器不再求值参数并将其传给函数，而是直接传递未经求值的参数给宏代码，后者返回一个新的
是一个由编译器自动为你运行的代码生成器。?当一个Lisp表达式包含了对宏的调用时，Lisp编译
同点了。C预处理器操作在文本替换层面上，对C和C++的结构几乎一无所知；而Lisp宏在本质上
的宏和那些在C和C++里看到的基于文本的宏，从本质上讲，除了名字相似以外就再没有其他共
化成你手写代码的预处理器就是非常值得的了。
想到这样做将是极其痛苦的。如果它们有足够多，足够重要，那么编写某种可以将where调用转
应的子句，所以它不会像where可能返回的函数那样做任何额外的工作。
而是提供了一个更有效率的选择器函数。这个匿名函数只带有在这次调用里实际关心的字段所对
则可以将其改为：
我将从一个简单而荒唐的例子开始，然后说明你应该怎样把where函数替换成一个where
30
①宏也可以由解释器来运行一
这样backwards宏就相当于定义了一个跟Lisp很像（只是反了一下）的新语言，你随时可以
宏与函数的主要词法差异在于你需要用DEFMACRO而不是DEFUN来定义一个宏。除此之外，
使这件事变得极其简单的Lisp特性是它的宏（macro）系统。我必须反复强调，Common Lisp
你可能会想象把所有的源代码都过一遍，并以这种方式修复所有对where的调用，但你也会
因此它保持表达式（"hello，world”tformat）不被求值，这样正好，因为它不是一个
它是怎么工作的？REPL开始求值这个backwards表达式时，它认识到backwards是一个宏
注意，这个匿名函数跟where所返回的那个是不同的，你并非在试图节省对where的调用，
hello, world 
CL-USER> (backwards ("hello, world" t format))
(defmacro backwards (expr) (reverse expr))
#'(lambda (cd)
(select
细节将在后续各章里提及。
第3章实践：简单的数据库
(equal
1 (getf cd :ripped) t))))
一但考虑编译的代码时能更容易理解宏的要点。和本章里的所有其他内容一样，相关
www.TopSage.com
---
## Page 48
第二个表达式中逗号的影响。
于表达式之前的反引号，可以像引号那样阻止表达式被求值。
求值的少数表达式时，真正需要的是一种书写表达式的方式。当然，确实存在这样一种方法。位
因此如果你将make-comparison-expr写成下面这样，它将如你所愿：
就不是你想要的了。尽管如此，你也知道如何防止Lisp去求值一个形式：在它前面加一个单引号。
value来说是对的，这正是你想要的。但是它也会以同样的方式对待equal、getf以及cd，而这
为列表的第一个元素出现时，它会假设这是一个变量的名字并去查找它的值。这对于field和
以函数应写成下面这样。
个下列形式的表达式：
码。在手工优化的选择器函数里，对于每个实际在最初的where调用中引用的字段来说，都有一
宏，它在每个特定的where调用里只生成真正需要的代码。最佳方法还是自底向上构建我们的代
的代码，都是在编译期运行的。换句话说，编译器将产生完全相同的代码，无论你写成
Lisp程序里，这种新语言的效率就跟正常Lisp一样高，因为所有的宏代码，即用来生成新表达式
通过将一个逆序的Lisp表达式包装在一个对backwards宏的调用里来使用它。而且，在编译了的
那么让我们来编写一个给定字段名及值并返回表达式的函数。由于表达式本身只是列表，所
那么这些东西又能对消除where里的代码重复有什么帮助呢？情况是这样的：可以写出一个
有了反引号，就可以像下面这样书写make-comparison-expr了。
^(1 2 (+ 1 2))
不同的是，在一个反引用表达式里，任何以逗号开始的子表达式都是被求值的。请注意下面
其实还有更好的办法。当你一般不对表达式求值，但又希望通过一些方法从中提取出确实想
(123)
CL-USER>‘(1 2 3)
CL-USER>^(1 2 3)
CL-USER> (make-comparison-expr :rating 10)
可以在REPL里测试它。
(defun make-comparison-expr (field value)
但这里还有一件麻烦事：你知道，当Lisp看到一个诸如field或value这样的简单名字不作
(EQUAL (GETF CD:RATING) 10)
(defun make-comparison-expr (field value)
(EQUAL (GETF CD :TITLE) "Give Us a Break")
(equal (getf cd field) value)
(list equal (list getf cd field) value))
(12(+1 2))
www.TopSage.com
；wrong
3.8消除重复，获益良多
---
## Page 49
可以通过使用函数MACROEXPAND-1来精确地看到一个where调用将产生出哪些代码。
那么变量clauses将包含这个列表。
到一个单一列表中，并成为那个跟在&rest后面的名字所对应的变量的值。因此如果像下面这样
调用where的话。
数的方式。当参数列表里带有&rest时，一个函数或宏可以接受任意数量的实参，它们将被收集
达式看出“,”和“,@”之间的区别：
将接下来的表达式（必须求值成一个列表）的值嵌入到其外围的列表里。你可以通过下面两个表
的值，很简单。
以由where宏本身来实现。使用一个反引号来生成一个模板，然后插入make-comparisons-list
*db*中添加记录时所使用的PUSH宏的操作是相反的。
make-comparison-expr，然后在循环结束时收集所有返回的结果。Pop宏所执行的操作与往
当 fields列表有剩余元素时它会保持循环，一次弹出两个元素，将它们传递给
巧——强有力的LOOP宏。
数上调用make-comparison-expr的结果。为了实现这个函数，就需要使用一点儿高级Lisp技
参排成一列传递进来，你将需要一个函数，可以从这样的列表中成对提取元素，并收集在每对参
于一个比较表达式组成的，它们全被封装在一个AND表达式里。假设现在想让where宏的所有实
32
(where :title "Give Us a Break" :ripped t)
如果传给MACROEXPAND-1一个代表宏调用的形式，它将使用适当的参数来调用宏代码并返
这个列表被传递给了make-comparisons-list，其返回一个由比较表达式所组成的列表。
where宏的另一个重要特性是在实参列表中使用&rest。和&key一样，&rest改变了解析参
(defmacro where (&rest clauses)
关于LOOP的全面讨论放到了第22章，目前只需了解这个LOOP表达式刚好做了你想做的事：
也可以使用“,@”在列表的中间插入东西。
(defun make-comparisons-list (fields)
现在如果回过头来看那个手工优化的选择器函数，就可以看到其函数体是由每字段/值对应
(:title "Give Us a Break" :ripped t)
^(and ,@(list 1 2 3) 4) → (AND 1 2 3 4)
(defun make-comparison-expr (field value)
(and,(list 1 2 3))
`#'(lambda (cd) (and ,@(make-comparisons-list clauses))))
(equal (getf cd ,field)
第3章实践：简单的数据库
 collecting (make-comparison-expr (pop fields) (pop fields))))
→(AND(1 23))
,value})
www.TopSage.com
---
## Page 50
点儿的代码。在下一章里，我们将对Lisp进行更加系统的概述。
括支持多表或是更复杂的查询。第27章将建立一个具备这些特性的MP3数据库。
实上，新的where宏可以用在任何基于plist的数据库上。
数据库的代码中只有make-cd、prompt-for-ca以及add-ca函数是特定于CD及其字段的。事
法层面的抽象，以及按照定义通过更简明地表达底层一般性的方式所得到的抽象。现在这个微型
就是正确选用宏所达到的效果。这件事合乎逻辑，因为宏只不过是另一种创建抽象的手法一—词
3.9
代码。并且新的代码更加通用，再也不需要理会我们CD记录中的特定字段了。
回其展开式。因此可以像这样检查上一个where调用：
本章的要点在于快速介绍少量Lisp特性，展示如何用它们编写出比“hello,world”更有趣一
尽管如此，它距离一个完整的数据库仍很遥远。你可能会想到还有大量需要增加的特性，包
现在，有趣的事情发生了。你不但去除了重复，而且还使得代码更有效且更通用了。这通常
它成功了。并且事实上，新的where宏加上它的两个助手函数还比老的where函数少了一行
（(:TITLE"Give Usa Break"
看起来不错。现在让我们实际试一下。
'（LAMBDA（CD)
CL-USER>(macroexpand-1(where :title"Give Us a Break"
总结