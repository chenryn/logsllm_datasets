'\" t
.TH "JOURNALD\&.CONF" "5" "" "systemd 231" "journald.conf"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
journald.conf, journald.conf.d \- 日志服务配置文件
.SH "SYNOPSIS"
.PP
/etc/systemd/journald\&.conf
.PP
/etc/systemd/journald\&.conf\&.d/*\&.conf
.PP
/run/systemd/journald\&.conf\&.d/*\&.conf
.PP
/usr/lib/systemd/journald\&.conf\&.d/*\&.conf
.SH "描述"
.PP
这些文件用于配置系统日志服务
\fBsystemd-journald.service\fR(8)
的行为。
.SH "配置目录及其优先级"
.PP
默认设置是在编译期间确定的， 所以仅在确实需要修改默认设置的情况下， 才需要使用配置文件。位于
/etc/systemd/
目录中的初始配置文件， 仅包含了展示选项默认值的注释， 目的在于方便系统管理员查看和直接修改。
.PP
如果软件包想要自定义某些默认设置， 那么必须将自定义的配置文件安装到
/usr/lib/systemd/*\&.conf\&.d/
目录中。
/etc/
目录仅供系统管理员使用。 系统管理员可以利用下面的逻辑来覆盖默认设置： 主配置文件最先被读取， 优先级也最低。 所有
*\&.conf\&.d/
中的配置文件 都会覆盖主配置文件中的设置。 所有
*\&.conf\&.d/
中的配置文件(无论位于哪个目录中)， 统一按照文件名的字典顺序处理。 如果在多个配置文件中设置了同一个选项， 那么仅以文件名最靠后(字典顺序)的那一个为准。 为了便于排序， 建议给所有
*\&.conf\&.d/
中的配置文件 都加上两位十进制数字的文件名前缀。
.PP
如果系统管理员想要屏蔽
/usr/lib/
目录中的某个配置文件， 那么最佳做法是在
/etc/
目录中 创建一个指向
/dev/null
的同名符号链接， 即可彻底屏蔽
/usr/lib/
目录中的同名文件。
.SH "选项"
.PP
所有选项都位于
"[Journal]"
小节：
.PP
\fIStorage=\fR
.RS 4
在哪里存储日志文件：
"volatile"
表示仅保存在内存中， 也就是仅保存在
/run/log/journal
目录中(将会被自动按需创建)。
"persistent"
表示优先保存在磁盘上， 也就优先保存在
/var/log/journal
目录中(将会被自动按需创建)， 但若失败(例如在系统启动早期"/var"尚未挂载)， 则转而保存在
/run/log/journal
目录中(将会被自动按需创建)。
"auto"(默认值) 与
"persistent"
类似， 但不自动创建
/var/log/journal
目录， 因此可以根据该目录的存在与否决定日志的保存位置。
"none"
表示不保存任何日志(直接丢弃所有收集到的日志)， 但日志转发(见下文)不受影响。 默认值是
"auto"
.RE
.PP
\fICompress=\fR
.RS 4
默认值"yes"表示： 压缩存储大于特定阈值的对象。
.RE
.PP
\fISeal=\fR
.RS 4
默认值"yes"表示：如果存在一个"sealing key"(由
\fBjournalctl\fR(1)
的
\fB\-\-setup\-keys\fR
命令创建)， 那么就为所有持久保存的日志文件启用 FSS(\m[blue]\fBSeekable Sequential Key Generators\fR\m[]\&\s-2\u[1]\d\s+2)保护， 以避免日志文件被恶意或无意的修改。
.RE
.PP
\fISplitMode=\fR
.RS 4
设置如何按用户分割日志文件，以实现不同的访问控制策略(日志守护进程会确保每个用户都能读取自己的日志文件)。 注意，仅分割持久保存的日志(/var/log/journal)，永不分割内存中的日志(/run/log/journal)。 可以使用的分割策略如下：
"uid"
表示每个用户都有自己专属的日志文件(无论该用户是否拥有登录会话)， 但系统用户的日志依然记录到系统日志中。这是默认值。
"none"
表示不对日志文件进行分割，而是将所有日志都记录到系统日志中。 这意味着非特权用户根本无法读取属于自己的日志信息。
.RE
.PP
\fIRateLimitIntervalSec=\fR, \fIRateLimitBurst=\fR
.RS 4
用于限制日志的生成速度(设为零表示不作限制)。
\fIRateLimitIntervalSec=\fR
用于设置一个时间段长度，默认值是30秒。
\fIRateLimitBurst=\fR
用于设置一个正整数，表示消息条数，默认值是1000条。 表示在
\fIRateLimitIntervalSec=\fR
时间段内， 每个服务最多允许产生
\fIRateLimitBurst=\fR
数量(条数)的日志。 在同一个时间段内，超出数量限制的日志将被丢弃，直到下一个时间段才能再次开始记录。 对于所有被丢弃的日志消息，仅用一条类似"xxx条消息被丢弃"的消息来代替。 这个限制是针对每个服务的限制，一个服务超限并不会影响到另一个服务的日志记录。
\fIRateLimitIntervalSec=\fR
可以使用下面的时间单位："ms",
"s",
"min",
"h",
"d"
.RE
.PP
\fISystemMaxUse=\fR, \fISystemKeepFree=\fR, \fISystemMaxFileSize=\fR, \fISystemMaxFiles=\fR, \fIRuntimeMaxUse=\fR, \fIRuntimeKeepFree=\fR, \fIRuntimeMaxFileSize=\fR, \fIRuntimeMaxFiles=\fR
.RS 4
限制日志文件的大小上限。 以
"System"
开头的选项用于限制磁盘使用量， 也就是
/var/log/journal
的使用量。 以
"Runtime"
开头的选项用于限制内存使用量， 也就是
/run/log/journal
的使用量。 以
"System"
开头的选项仅在
/var/log/journal
目录确实存在且可写时才有意义。 但以
"Runtime"
开头的选项永远有意义。 也就是说， 在系统启动早期
/var
尚未挂载时、 或者系统管理员禁止在磁盘上存储日志的时候， 仅有
"Runtime"
开头的选项有意义。
\fBjournalctl\fR
与
\fBsystemd\-journald\fR
工具会忽略日志目录中 所有后缀名不等于
"\&.journal"
或
"\&.journal~"
的文件。 换句话说， 日志目录中不应该存在后缀名不等于
"\&.journal"
或
"\&.journal~"
的文件， 因为这些文件永远不会被清理。
.sp