### Tag-Side Attacks Against NFC

#### What is NFC?
NFC (Near Field Communication) is a technology that enables contactless communication between two devices in close proximity. It has a wide range of applications, primarily in door access control and payment systems.

#### Why Attack NFC?
- **Interesting Technology**: NFC is a fascinating and widely used technology.
- **Cost of Analysis Tools**: Low-level analysis tools can be prohibitively expensive.
- **Known Insecurity**: Despite known security vulnerabilities, NFC remains widely used.

#### ISO-14443
ISO-14443 is a standard that focuses on 13.56 MHz NFC communication. It defines the characteristics of the communication between tags and readers. There are two main tag types based on this standard: Type A and Type B, with ISO-14443A being the most commonly used.

##### Low-Level Communication – ISO14443A
- **Powering Tags**: Tags are powered by electromagnetic induction.
- **Communication from Reader to Tag**: The reader communicates by disabling the field at specific intervals using the Modified Miller coding scheme.
- **Communication from Tag to Reader**: Tags respond by modifying the power they draw from the reader, using the Manchester coding scheme.

###### Modified Miller Coding Scheme
- **0 bit after 0 bit**: Low for the first quarter, followed by high for the remainder.
- **0 bit after 1 bit**: High for the entire transmission.
- **1 bit**: High for the first half, low for one quarter, and high for the remainder.

###### Manchester Coding Scheme
- **Signal Modulation**: Performed by modifying the phase of the signal. In NFC, this is done by altering the load drawn by the tag using a subcarrier.

#### Basic Enumeration
- **Anticollision**: This process occurs when multiple tags are communicating with a reader. It involves requesting responses based on partial UIDs, increasing the number of bits requested until a single UID is identified. Once communication with one tag is complete, the next tag can be identified and communicated with.

#### Encryption and Authentication
- **Mifare Ultralight**:
  - An authentication key is sent to the tag.
  - If the key is correct, the reader authenticates with the tag, and communication can proceed.
  - Failed attempts are logged and may lock the chip.
  - Supports no authentication or a wider range of methods in newer versions.

- **Mifare Classic**:
  - Uses the Crypto-1 algorithm.
  - Reader requests authentication for a sector (0x60/0x61).
  - Tag responds with a unique four-byte nonce.
  - Reader sends a random value and an encrypted number generated from the original nonce.
  - Tag responds with an encrypted number generated from the nonce.
  - All further communication is encrypted.
  - Each sector can be authenticated using its own unique keys.

- **Mifare DESFire**:
  - Based on different application IDs.
  - Authentication uses DES, 3-DES, or AES, depending on version and configuration.
  - Multiple keys can be used for authentication.
  - Similar to Mifare Classic but not yet meaningfully broken.

#### Creating Analysis Tools
- **Existing Tools and Projects**:
  - Proxmark3: <https://proxmark.com/>
  - Chameleon Mini: <https://github.com/emsec/ChameleonMini>
  - HydraNFC: <https://hydrabus.com/hydranfc-1-0-specifications/>
  - SimpleNFC: <http://www.nonan.net/nkruse/simplenfc>
  - Emutag: <http://www.emutag.com/>

- **NFC Field Detection**:
  - **LED and Coil**: Useful for detecting active fields.
  - **Passive Sniffer – RTL-SDR**:
    - Powerful SDR, tunable between 25MHz and 1700MHz.
    - Configurable sample rate.
    - Libraries available for simple communication.
    - **Problems**:
      - Cannot tune down to 13.56MHz without hardware modifications.
      - Cannot run at a low sample rate.
      - Bundled with a weak antenna.
      - Not built for purpose.
    - **Solution**:
      - Tune to harmonic frequency (27.12MHz).
      - Set sample rate to 1.695MHz for synchronization.
      - Introduce a coil to the NFC field for adequate power.
      - Detect communication from the reader to the tag.
      - Automatic gain control possible due to constant signal.
      - Accurate real-time analysis of communication.

#### Building a Tag
- **Initial Tag Type**: Mifare Classic.
- **Objectives**:
  - Build without standard NFC chipsets to access raw communication.
  - Use minimal components.
  - Fully implement Crypto-1 authentication.

- **Hardware Requirements**:
  - **Inductive Coupling**: LC circuit resonating with the field.
  - **Demodulation**: Envelope detector using a diode, resistor, and capacitor.
  - **Microcontroller**: ATTiny84 selected for initial device.
    - 8KB program space, 512B RAM.
    - Programmable with Arduino or dedicated programmer.
    - DIP package for easy prototyping.
    - Good support for interrupts and timers.
    - Limited debugging support.
    - 8-bit architecture may cause issues with fast calculations.

- **Implementation**:
  - **Receiving Circuit**: Built with a simple layout, accurately receiving communication with sufficient voltage to trigger GPIO.
  - **Timing Issues**:
    - Using a 13.56MHz crystal, ATTiny was synchronized with the reader.
    - Clock drift on the MCU caused inconsistent results.
    - Interrupts were configured to run whenever the signal went low, improving accuracy to 99%.

- **Implementing Crypto-1**:
  - Converted from C to AVR assembly.
  - Optimized for 24-bit operations and efficient bit-shifts.
  - Increased calculation speed by ~10 times.

- **Hardware Limitations**:
  - Microcontroller too slow for complex operations.
  - Limited memory and EEPROM.
  - Difficult debugging process.
  - Limited pins for additional peripherals.
  - Some readers require faster response times.

- **Building a Better Device**:
  - **STM32L496ZG**:
    - 1MB Flash, 320KB RAM.
    - 72MHz clock speed.
    - 32-bit architecture.
    - USB and UART peripherals.
    - Easy programming and debugging.
    - Same circuitry and logic as previous device.
  - **Synchronization**:
    - Internal clock not tunable to 13.56MHz.
    - External crystal increases complexity.
    - Assessed various frequencies to find the most suitable candidate.

- **Additional Features**:
  - **Multi-Tag Support**: Implemented by having multiple state machines.
  - **Dynamic Crypto-1 Key Generation**: Reverse-engineer key generation algorithms.
  - **Implementing DESFire**: Modify SAK and ATQA response values, replay legitimate requests.

#### Security Weaknesses
- **Crypto-1 Weaknesses**:
  - Known for a long time, especially in the paper “Dismantling Mifare Classic”.
  - 48-bit keys split into 24-bit keys, vulnerable to brute force.
  - Vulnerable to replay attacks.
  - Nonces can be used to recover 32-bits of keystream.
  - Rollbacks from authentication can fully recover the initial key.

- **Attacking Crypto-1 from the Tag**:
  - Key recovery from two authentication requests.
  - XORing generated values with the reader’s response to get 32-bits of keystream.
  - Reducing possible 24-bit keys to ~200,000.
  - Checking key pairs to find combinations generating the 32-bit keystream.
  - Rolling back through the random value and initial nonce to recover the initial key.

- **Demonstration**:
  - Selected a Mifare Classic reader from a Japanese video game.
  - Reverse-engineered USB communication.
  - Wrote a tool to identify tags and read data.
  - Verified keys against the reader, showing successful recovery.
  - Generated multiple keys by emulating unique UIDs.

- **Improvements**:
  - Increase key size.
  - Use a single, large key.
  - Improve PRNG on the tag.
  - Remove known plaintext from authentication.

- **Raw Protocol Weaknesses**:
  - Initial enumeration procedures not supported by most NFC chipsets.
  - No limits on response sizes, leading to potential memory corruption.
  - Anticollision procedures can be exploited by overflowing the buffer.

- **High-Level Protocol Weaknesses**:
  - Each tag type has its own weaknesses.
  - NDEF data has the greatest potential for vulnerabilities.
  - Complex authentication and encryption are limited by tag hardware capabilities.

#### Future Work
- Release source code for RTL-SDR, AVR, and STM32 tools.
- Design boards.
- Fully implement and assess DESFire.
- Research more tag types for weaknesses.

#### Questions
Christopher Wade  
@Iskuri1  
<https://github.com/Iskuri>  
<https://www.pentestpartners.com>