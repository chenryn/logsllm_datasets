title:Reverse-Engineering a Cryptographic RFID Tag
author:Karsten Nohl and
David Evans and
Starbug and
Henryk Pl&quot;otz
Reverse-Engineering a Cryptographic RFID Tag
Karsten Nohl and David Evans
University of Virginia
Department of Computer Science
{nohl,evans}@cs.virginia.edu
Starbug and Henryk Pl¨otz
Chaos Computer Club
Berlin
PI:EMAIL, PI:EMAIL
Abstract
The security of embedded devices often relies on the secrecy of proprietary cryptographic algorithms. These
algorithms and their weaknesses are frequently disclosed through reverse-engineering software, but it is
commonly thought to be too expensive to reconstruct designs from a hardware implementation alone. This
paper challenges that belief by presenting an approach to reverse-engineering a cipher from a silicon imple-
mentation. Using this mostly automated approach, we reveal a cipher from an RFID tag that is not known
to have a software or micro-code implementation. We reconstruct the cipher from the widely used Mifare
Classic RFID tag by using a combination of image analysis of circuits and protocol analysis. Our analysis re-
veals that the security of the tag is even below the level that its 48-bit key length suggests due to a number of
design ﬂaws. Weak random numbers and a weakness in the authentication protocol allow for pre-computed
rainbow tables to be used to ﬁnd any key in a matter of seconds. Our approach of deducing functional-
ity from circuit images is mostly automated, hence it is also feasible for large chips. The assumption that
algorithms can be kept secret should therefore to be avoided for any type of silicon chip.
Il faut qu’il n’exige pas le secret, et qu’il puisse sans inconv´enient tomber entre les mains de l’ennemi.
([A cipher] must not depend on secrecy, and it must not matter if it falls into enemy hands.)
August Kerckhoffs, La Cryptographie Militaire, January 1883 [13]
1
Introduction
It has long been recognized that security-through-obscur-
ity does not work. However, vendors continue to be-
lieve that if an encryption algorithm is released only as
a hardware implementation, then reverse-engineering the
cipher from hardware alone is beyond the capabilities of
likely adversaries with limited funding and time. The
design of the cipher analyzed in this paper, for example,
had not been disclosed for 14 years despite more than a
billion shipped units. We demonstrate that the cost of re-
verse engineering a cipher from a silicon implementation
is far lower than previously thought.
In some cases, details of an unknown cryptographic ci-
pher may be found by analyzing the inputs and outputs
of a black-box implementation. Notable examples in-
clude Bletchley Park’s breaking the Lorenz cipher during
World War II without ever acquiring a cipher machine
[5] and the disclosure of the DST cipher used in cryp-
tographic Radio Frequency Identiﬁcation (RFID) tokens
from Texas Instruments [4]. In both cases, researchers
started with a rough understanding of the cipher’s struc-
ture and were able to ﬁll in the missing details through
cryptanalysis of the cipher output for known keys and
inputs. This black-box approach requires some prior un-
derstanding of the structure of a cipher and is only appli-
cable to ciphers with statistical weaknesses. The output
of a sound cipher should not be statistically biased and
therefore should not leak information about its structure.
Other ciphers have been disclosed through disassem-
bly of their software implementation. Such implemen-
tations can either be found in computer software or as
microcode on an embedded micro-controller. Ciphers
found through software disassembly include the A5/1
and A5/2 algorithms that secure GSM cell phone com-
munication [1] and the Hitag2 and Keeloq algorithms
used in car remote controls [3]. The cryptography on
the RFID tags we analyzed is not known to be available
in software or in a micro-code implementation; tags and
reader chips implement the cipher entirely in hardware.
In this paper, we focus on revealing proprietary cryptog-
raphy from its silicon implementation alone. Reverse-
engineering silicon is possible even when very little is
known about a cipher and no software implementation
USENIX Association  
17th USENIX Security Symposium 
185
exists. The idea of reverse-engineering hardware is not
new. Hardware analysis is frequently applied in indus-
try, government, and the military for spying, security as-
sessments, and protection of intellectual property. Such
reverse-engineering, however, is usually considered pro-
hibitively expensive for typical attackers, because of the
high prices charged by professionals offering this ser-
vice. The key contribution of this work is demonstrating
that reverse-engineering silicon is cheap and that it can
be mostly automated. This is the ﬁrst published work
to describe the details of reverse-engineering a crypto-
graphic function from its silicon implementation. We
describe a mostly automated process that can be used
to cheaply determine the functionality of previously un-
known cipher implementations.
We demonstrate the feasibility of our approach by reveal-
ing the cipher implemented on the NXP Mifare Clas-
sic RFID tags, the world’s most widely used crypto-
graphic RFID tag [16]. Section 2 describes our reverse-
engineering method and presents the cipher. Section 3
discusses several weaknesses in the cipher beyond its
short key size. Weak random numbers combined with
a protocol ﬂaw allow for rainbow tables to be computed
that reduce the attack time from weeks to minutes. Sec-
tion 4 discusses some potential improvements and de-
fenses. While we identify ﬁxes that would increase the
security of the Mifare cipher signiﬁcantly, we conclude
that good security may be hard to achieve within the de-
sired resource constraints.
2 Mifare Crypto-1 Cipher
We analyzed the Mifare Classic RFID tag by NXP (for-
merly Philips). This tag has been on the market for over
a decade with over a billion units sold. The Mifare Clas-
sic card is frequently found in access control systems and
tickets for public transport. Large deployments include
the Oyster card in London, and the SmartRider card in
Australia. Before this work, the Netherlands were plan-
ning to deploy Mifare tags in OV-chipkaart, a nation-
wide ticketing system, but the system will likely be re-
engineered after ﬁrst news about a potential disclosure of
the card’s details surfaced [17]. The Mifare Classic chip
currently sells for 0.5 Euro in small quantities, while tags
with larger keys and established ciphers such as 3-DES
are at least twice as expensive.
The cryptography found in the Mifare cards is a stream
cipher with 48-bit symmetric keys. This key length has
been considered insecure for some time (for example, the
Electronic Frontier Foundation’s DES cracking machine
demonstrated back in 1998 that a moderately-funded at-
tacker could brute force 56-bit DES [6]) and the practical
security that Mifare cards have experienced in the past
relies primarily on the belief that its cipher was secret.
We ﬁnd that the security of the Mifare Classic is even
weaker than the short key length suggests due to ﬂaws in
its random number generation and the initialization pro-
tocol discussed in Section 3.
The data on the Mifare cards is divided into sectors, each
of which holds two different keys that may have different
access rights (e.g., read/write or read-only). This division
allows for different applications to each store encrypted
data on a tag—an option rarely used in practice. All se-
crets are set to default values at manufacturing time but
changed before issuing the tags to users. Different tags
in a system may share the same read key or have dif-
ferent keys. Sharing read keys minimizes the overhead
of key-distribution to ofﬂine readers. We ﬁnd, however,
that the protocol level measures meant to prevent differ-
ent users from impersonating each other are insufﬁcient.
Unique read and write keys should, therefore, be used for
each tag and ofﬂine readers should be avoided as much
as possible.
2.1 Hardware Analysis
The chip on the Mifare Classic tag is very small with
a total area of roughly one square millimeter. About a
quarter of the area is used for 1K of ﬂash memory (a
4K version is also available); another quarter is occupied
by the radio front-end and outside connectivity, leaving
about half the chip area for digital logic including cryp-
tography.
The cryptography functions make up about 400 2-NAND
gate equivalents (GE), which is very small even com-
pared to highly optimized implementations of standard
cryptography. For example, the smallest known imple-
mentation of the AES block cipher (which was specif-
ically designed for RFID tags) requires 3400 GEs [7].
The cryptography on the Mifare tags is also very fast and
outputs 1 bit of key stream in every clock cycle. The AES
circuit, by comparison, takes 1000 clock cycles for one
128-bit AES operation (10 milliseconds on a tag running
at 106 kHz).
To reverse engineer the cryptography, we ﬁrst had to get
access to sample chips, which are usually embedded in
credit card size plastic cards. We used acetone to dis-
solve the plastic card, leaving only the blank chips. Ace-
tone is easier and safer to handle than alternatives such
as fuming nitric acid, but still dissolves plastic cards in
186 
17th USENIX Security Symposium 
USENIX Association
(a)
(b)
Figure 1: (a) Source image of layer 2 after edge detection; (b) after automated template detection.
about half an hour. Once we had isolated the silicon
chips, we removed each successive layer through me-
chanical polishing, which we found easier to control than
chemical etching. Simple polishing emulsion or sandpa-
per with very ﬁne grading of 0.04µm sufﬁces to take off
micrometer-thick layers within minutes.
Although the polishing is mostly straightforward, the one
obstacle to overcome is the chip tilting. Since the chip
layers are very close together, even the smallest tilt leads
to cuts through several layers. We addressed this problem
in two ways. First, we embedded the millimeter-size chip
in a block of plastic so it was easier to handle. Second,
we accpeted that we could not completely avoid tilt using
our simple equipment and adapted our image stitching
tools to patch together chip layers from several sets of
pictures, each imaging parts of several layers.
The chip contains a total of six layers, the lowest of
which holds the transistors. We took pictures using a
standard optical microscope at a magniﬁcation of 500x.
From multiple sets of these images we were able to au-
tomatically generate images of each layer using tech-
niques for image tiling that we borrowed from panorama
photography. We achieved the best results using the
open source tool hugin (http://hugin.sourceforge.net/)
by setting the maximum variance in viewer angle to a
very small value (e.g., 0.1◦) and manually setting a few
control points on each image.
The transistors are grouped in gates that each perform
a logic function such as AND, XOR, or ﬂip-ﬂop as il-
lustrated in Figure 1. Across the chip there are several
thousand such logic gates, but only about 70 different
types of gates. As a ﬁrst step toward reconstructing the
circuit, we built a library of these gates. We implemented
template matching that given one instance of a logic gate
ﬁnds all the other instances of the same gate across the
chip. Our tools take as input an image of layer 2, which
represents the logic level, and the position of instances
of different logic gates in the image. The tools then use
template matching to ﬁnd all other instances of the gate
across the image, including rotated and mirrored vari-
ants. Since larger gates sometimes contain smaller gates
as building blocks, the matching is done in order of de-
creasing gate sizes.
Our template matching is based on normalized cross-
correlation which is a well-known similarity test [14]
and implemented using the MATLAB image process-
ing library. Computing this metric is computationally
more complex than standard cross-correlation, but the
total running time of our template matching is still un-
der ten minutes for the whole chip. Normalized cross-
correlation is insensitive to the varying brightness across
our different images and the template matching is able
to ﬁnd matches with high accuracy despite varying col-
oration and distortion of the structures that were caused
by the polishing.
USENIX Association  
17th USENIX Security Symposium 
187
We then manually annotated each type of gate with its
respective functionality. This step could be automated
as well through converting the silicon-level depiction of