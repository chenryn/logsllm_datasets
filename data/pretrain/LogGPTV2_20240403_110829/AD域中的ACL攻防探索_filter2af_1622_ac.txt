#####  DCSync需要什么权限
一个域内用户想要通过DCSync获取krbtgt的HASH值需要在域对象或者是域内的高权限组中有以下三种权限的其中一个：  
复制目录更改Replicating Directory Changes (DS-Replication-Get-Changes)
复制目录更改所有Replicating Directory Changes All (DS-Replication-Get-Changes-All)（Exchange用的就是这个） 正在复制筛选集中的目录更改Replicating Directory Changes In Filtered
Set (rare, only required in some environments)  
这几个权限在DACL的设置页是可以看到的：
#####  如何给一个用户添加DCSync权限
除了上面的利用方式之外，如果想单纯的尝试给一个账号添加DCSync权限，或者是在有了高权限账号的情况下希望存留DCSync的后门，可以使用powerviewer.ps1的Add-DomainObjectAcl函数实现：
    Add-DomainObjectAcl -TargetIdentity "DC=test,DC=local" -PrincipalIdentity zhangs -Rights DCSync
执行之后会在域对象（”DC=test,DC=local”）的DACL中添加一条主体为zhangs的权限为”复制目录更改”的ACE：
然后使用zhangs进行DCSync，这里可以看到添加前后的变化：
    .\mimikatz.exe "lsadump::dcsync /user:test\krbtgt" "exit"
注意，这里复制目录更改权限的ACE是添加在域对象DC=test,DC=local上的。
###  Invoke-ACLPwn
运行时需要.NET 3.5环境，Windows Server
2012安装遇到报错，最后的解决方法(需要在网上下载SxS的安装包[https://pan.baidu.com/share/init?surl=kDgdYerM0lVB32Q_IEqLUw提取码：gwzk)：](https://pan.baidu.com/share/init?surl=kDgdYerM0lVB32Q_IEqLUw%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Agwzk\)%EF%BC%9A)
    dism.exe /online /enable-feature /all /featurename:NetFX3 /Source:F:\Sources\SxS\
GitHub地址：  
背景信息在发布者博客上：  
环境需要：
     .NET 3.5 + sharphound.exe + mimikatz.exe
用法示例：
    .\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -NoDCSync
    .\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -mimiKatzLocation .\mimikatz.exe
    .\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -mimiKatzLocation .\mimikatz.exe -userAccountToPwn 'Administrator'
    .\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -mimiKatzLocation .\mimikatz.exe -LogToFile
    .\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -mimiKatzLocation .\mimikatz.exe -NoSecCleanup
    .\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -mimiKatzLocation .\mimikatz.exe -Username 'testuser' -Domain 'xenoflux.local' -Password 'Welcome01!'
使用第一条标识了-NoDCSync（不会做DCSync的动作，只判断是否能够存在能够DCSync的权限）的命令：
提示Got WriteDACL
permissions.如果加上mimikatz.exe一起使用,可以看到直接获取了krbtgt的HASH值，也就是说已经可以直接生成黄金票据了：
但是这个工具经过实际测试只适用于小型的域控，在有上百万条ACL的域内会出现跑了几天也跑不出结果的情况
###  针对DACL的隐身方式
通过隐藏账户可以掩盖主体本身，阻止防御者轻易的发现谁实际上拥有ACE中指定的权限。这种方式主要应对的是对于高危的ACL进行扫描行为。
####  隐藏用户
1、将要隐藏的用户所有者改为攻击者或者攻击者控制的账户  
2、设置一条拒绝完全控制的ACE
点击应用之后所有用户都无法在外部访问查看此账户的ACL，包括administrator：
    Get-DomainObjectAcl -Identity hideuser -domain test.local -Resolve
但是如上图所示，在ADSI编辑器中还是可以看到的，如果想要在ADSI编辑器中也看不到，那么就要将主体设置为用户本身，或者其他攻击者控制的账户：
点击应用可以看到，即使在ADSI编辑器中也无法查询到：
同时在AD用户和计算机中用户类型会变为未知：
此时这个账号无法删除和访问属性，但是仍然能够正常使用
####  隐藏OU中所有的子对象
直接添加一条拒绝Everyone的列出内容权限
然后再查看这个OU的时候会发现所有的用户都不显示。
同样，通过powerviewer也无法查看ACL：
###  形形色色的ACL后门
####  AdminSDHolder
AdminSDHolder会将自身的ACL列表每隔一个小时向受保护的组中同步，所以如果在AdminSDHolder中添加一个ACE作为后门，则受保护的组中将会一直被同步策略。受保护的组有[https://docs.microsoft.com/en-us/previous-versions/technet-magazine/ee361593(v=msdn.10)?redirectedfrom=MSDN：](https://docs.microsoft.com/en-us/previous-versions/technet-magazine/ee361593\(v=msdn.10\)?redirectedfrom=MSDN%EF%BC%9A)
在AdminSDHolder的DACL中设置一条主体为zhangs，权限为完全控制的ACE
    Add-DomainObjectAcl -TargetIdentity "CN=AdminSDHolder,CN=System,DC=test,DC=local" -PrincipalIdentity zhangs -Rights All
不过这样也有一个坏处就是所有的受保护组的ACL中都会被添加上这一条作为后门的ACE，隐藏其中一个账户并不能起到作用，所以还是比较容易被发现的。并且添加时会产生一条ID为5136的事件日志。
也可以通过修改注册表设置推送时间，这里设置为60s：
    reg add hklm\SYSTEM\CurrentControlSet\Services\NTDS\Parameters /v AdminSDProtectFrequency /t REG_DWORD /d 60
60秒之后就可以使用xiaom权限添加任意用户到domain admins组  
####  关于LAPS的隐藏后门
LAPS的全称是Local Administrator Password
Solution，主要作用是将域内主机的本地管理员密码存储在LDAP中，作为计算机账户的一个机密属性，配合GPO实现自动定期修改密码，设置密码长度、强度等。LAPS通过首先将Active
Directory架构扩展为包括两个新字段ms-MCS-AdmPwd（密码本身）和 ms-MCS-AdmPwdExpirationTime（密码过期时）来完成其方法。  
具体的配置和如何查询明文密码可以参考：  
此时的环境：一个配置了LAPS的testwin7主机（属于testou）、一个域中的普通的测试账号zhangs
此时通过命令查看testwin7主机的本地administrator密码：
    Get-AdmPwdPassword –ComputerName testwin7
在zhangs登录的主机上使用LAPS UI尝试获取testwin7的本地密码没有成功：
然后在testou中添加zhangs的读取密码的权限：
    Set-AdmPwdReadPasswordPermission -Identity testou -AllowedPrincipals zhangs
此时再在zhangs主机上尝试获取testwin7密码:
能够成功获取，但是此时的zhangs的权限是能够通过Find-AdmPwdExtendedRights排查到的：
    Find-AdmPwdExtendedRights -Identity testou -IncludeComputers | fl
解决方法是在testou中新建一个msImaging-PSPs类型的对象testmspsps，此类容器的权限不能被Find-AdmPwdExtendedRights所遍历，同时将testwin7移动到testmspsps中，然后在testmspsps的ACL中设置主体为zhangs的完全控制权限：
此时在zhangs中就可以获取testwin7的密码，并且不会被Find-AdmPwdExtendedRights这个命令遍历到：
这种方式的缺点在于需要移动域内主机所属的组。
####  针对域对象的后门
上面所说的后门都是针对User Objects或者Group Objects的，这里要说的是针对Domain
Objects。通过在Domain对象的DACL中添加ACE能够赋予用户特定的权限。因为实现这个操作需要较高权限，所以可以使用，这里使用powerviewer.ps1的Add-DomainObjectAcl函数实现：
    Add-DomainObjectAcl -TargetIdentity "DC=test,DC=local" -PrincipalIdentity zhangs -Rights DCSync
然后使用zhangs进行DCSync，这里可以看到添加前后的变化：
    .\mimikatz.exe "lsadump::dcsync /user:test\krbtgt" "exit"
####  针对组策略对象的ACL
GPO中的ACL同样能够进行权限维持等操作，修改SYSVOL的属性，意味着主体可以修改GPO的设置。
以域控组的组策略为例，可以在组策略管理中的委派选项中进行设置：
创建之后在对应的GPO文件夹下可以看到对应的权限：  
## 0x04 监测防御
在域内修改ACL时会产生ID为5136的事件日志，可以通过日志分析平台进行检测和发现，可以通过匹配ObjectDN字段判断是否存在域内关键对象的ACL被修改
上图是AdminSDHolder组被修改时的windows事件日志。这里需要兼顾的就是对于ACL对象的选择，确定哪些是关键组，以及是否存在漏掉的关键组。如果一个域里没有配置对域控中ACL日志的检查，那么几乎是没有办法防御的。
## 0x05 小结
本文主要说明了域内的ACL相关攻击手法，有一些已经广为人知，还有一些可能很少在实际的攻击中出现，如果有更好的思路和建议欢迎探讨。在windows的安全体系中ACL是至关重要的一环，并且在本地ACL方面也有很多的利用方式，比如硬链接结合权限问题进行提权的手法，这里不再赘述。
## 参考链接：