title:The devil is in the (implementation) details: an empirical analysis
of OAuth SSO systems
author:San-Tsai Sun and
Konstantin Beznosov
The Devil is in the (Implementation) Details:
An Empirical Analysis of OAuth SSO Systems
San-Tsai Sun and Konstantin Beznosov
Laboratory for Education and Research in Secure Systems Engineering
Department of Electrical and Computer Engineering
University of British Columbia
Vancouver, Canada
{santsais,beznosov}@ece.ubc.ca
ABSTRACT
Millions of web users today employ their Facebook accounts
to sign into more than one million relying party (RP) web-
sites. This web-based single sign-on (SSO) scheme is enabled
by OAuth 2.0, a web resource authorization protocol that
has been adopted by major service providers. The OAuth
2.0 protocol has proven secure by several formal methods,
but whether it is indeed secure in practice remains an open
question. We examine the implementations of three major
OAuth identity providers (IdP) (Facebook, Microsoft, and
Google) and 96 popular RP websites that support the use
of Facebook accounts for login. Our results uncover several
critical vulnerabilities that allow an attacker to gain unau-
thorized access to the victim user’s proﬁle and social graph,
and impersonate the victim on the RP website. Closer ex-
amination reveals that these vulnerabilities are caused by a
set of design decisions that trade security for implementa-
tion simplicity. To improve the security of OAuth 2.0 SSO
systems in real-world settings, we suggest simple and practi-
cal improvements to the design and implementation of IdPs
and RPs that can be adopted gradually by individual sites.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Authentication, Access
controls
General Terms
Security
Keywords
OAuth 2.0, Web Single Sign-On
1.
INTRODUCTION
OAuth 2.0 [19], an open and standardized web resource
authorization protocol, enables users to grant third-party
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$10.00.
application access to their web resources without sharing
their login credentials or the full extent of their data. Com-
pared to its predecessor and other existing protocols such
as OpenID [33], Google AuthSub [14], Yahoo BBAuth [48],
and Microsoft Live ID [26], OAuth 2.0 (“OAuth” for short,
unless otherwise speciﬁed) makes it simple for developers to
implement the protocol, and supports a diversity of third-
party applications, such as websites and applications run-
ning on browser, mobile, desktop, or appliance devices. To
use OAuth as a web single sign-on (SSO) scheme, a resource
hosting site (e.g., Facebook) plays the role of an identity
provider (IdP) that maintains the identity information of
the user and authenticates her, while the third-party website
(e.g., CNN) acts as a relying party (RP) that relies on the
authenticated identity to authorize the user and customize
user experience.
Given the popularity of major IdPs and the proliferation
of RP websites, the risk of compromised implementations
can be signiﬁcant. Even though the protocol has yet to be ﬁ-
nalized, there are already over one billion OAuth-based user
accounts provided by major service providers such as Face-
book [11], Google [16] and Microsoft [26]. This enormous
user base attracts millions of RPs that take this opportunity
to reach a broader set of users, and integrate their services
deep into users’ social context [12]. OAuth provides a clear
and compelling business incentive for RPs [41]. The proto-
col enables not only web SSO but also personalized, web-
scale content sharing through social graphs and platform-
speciﬁc services such as messaging, recommendations, rat-
ing, and activity feeds. From adversary’s perspective, how-
ever, the information guarded by OAuth SSO systems can
be attractive as well. Through a successful exploit of an
uncovered weakness in the protocol or implementations, an
adversary could harvest private data from those millions
of users for identify theft, on-line proﬁling, and large-scale
email spam, phishing, and drive-by-download campaigns [5].
The tremendous user base and growing popularity within
these IdP and RP websites could lure numerous adversaries
continually into this “lucrative business.”
To ensure protocol security, several approaches based on
formal methods [32, 8, 38] were used to analyze the OAuth
protocol. The results of those analysis suggest that the
protocol is secure, provided that the comprehensive secu-
rity guidelines from the OAuth working group—included in
“OAuth threat model” [25]—are followed by the IdP and RP.
However, given that the formal proofs are executed on ab-
stract models, some important implementation details could
378be inadvertently left out. Furthermore, it is unclear whether
real implementations actually do follow the above guidelines.
Thus, the research question regarding the security of OAuth
implementations remains open.
OAuth-based SSO systems are built upon the existing
web infrastructure, but web application vulnerabilities (e.g.,
insuﬃcient transport layer protection, cross-site scripting
(XSS), cross-site request forgery (CSRF)) are prevalent [31]
and constantly being exploited [47, 29]. Moreover, as the
protocol messages are passed between the RP and IdP via
the browser, a vulnerability found in the browser could also
lead to signiﬁcant security breaches. To enhance the security
of OAuth SSO systems, our research goal was to furthering
the understanding of (1) how those well-known web vul-
nerabilities could be leveraged to compromise OAuth SSO
systems, (2) the fundamental enabling causes and conse-
quences, (3) how prevalent they are, and (4) how to prevent
them in a practical way. These issues are still poorly under-
stood by researchers and practitioners.
To address these questions, we examined the implementa-
tions of three major IdPs (Facebook, Microsoft, and Google),
and 96 Facebook RPs listed on Google Top 1,000 Web-
sites [15] that provide user experience in English. We treated
IdPs and RPs as black boxes, and relied on the analysis of
the HTTP messages passing through the browser during an
SSO login session. In particular, we traced the information
ﬂow of SSO credentials (i.e., data used by the RP server-
side program logics to identify the current SSO user) to ex-
plore potential exploit opportunities. For each uncovered
vulnerability, an exploit was designed and tested using a set
of semi-automatic evaluation tools that we implemented to
avoid errors introduced by manual inspections.
One of our key ﬁndings is that the conﬁdentiality of the
temporary secret key to the user’s accounts can be compro-
mised. In OAuth, an access token that represents the scope
and duration of a resource authorization is the temporary
secret key to the user’s accounts on both RP and IdP web-
sites; and any party with the possession of an access token
can assume the same rights granted to the token by the re-
source owner. Like a capability, if forged or copied, it allows
an adversary to obtain unauthorized access. Our analysis
reveals that, although the OAuth protocol itself is secure,
the conﬁdentiality of access tokens can be compromised in
several ways.
First, the OAuth protocol is designed speciﬁcally to pre-
vent access tokens from exposing in the network (further
discussed in Section 2), and yet we found that many ac-
cess tokens obtained on the browser side are transmitted in
unprotected form to the RP server side for the purpose of
authentication state synchronization. In some RPs, access
tokens are appended as query parameters to the RP’s sign-in
endpoint (i.e., the URI that issues the authenticated session
cookie), which reveals the tokens in the browser’s history
and server logs. Moreover, to simplify accessibility, IdPs’
JavaScript SDKs or RPs themselves store access tokens into
HTTP cookies, and hence opens the tokens to a wide range
of attacks (e.g., network eavesdropping, XSS cookie theft).
Surprisingly, our evaluation shows that only 21% of RPs em-
ploy SSL to protect SSO sessions, even though about half of
tested RPs have protected their traditional login forms with
SSL.
Second, and more interestingly, access tokens can be stolen
on most (91%) of the evaluated RPs, if an adversary could
exploit an XSS vulnerability on any page of the RP web-
site. Obviously, an XSS vulnerability found on the login
page of an RP for which access tokens are obtained on the
browser-side (i.e., client-ﬂow ) could allow an adversary to
steal access tokens during the SSO process. Nevertheless,
our test exploit even succeeded on RPs that obtain access
tokens only through a direct communication with the IdP
(i.e., server-ﬂow, not via browser), regardless of whether
the user has already logged into the RP website, and when
the redirect URL is SSL-protected. XSS vulnerabilities are
prevalent [31, 4], and their complete mitigation is shown to
be diﬃcult [9, 21, 35, 44, 28, 34].
Third, even assuming the RP website itself is free from
XSS vulnerabilities, cross-site access token theft could be
carried out by leveraging certain vulnerabilities found in
browsers. We analyzed and tested two such exploit scenarios
in which the vulnerable browsers are still used by about 10%
of web users [45]. The ﬁrst exploit executes the token theft
script embedded in an image ﬁle by leveraging the browser’s
content-sniﬃng algorithm [1]. The second one steals an ac-
cess token by sending a forged authorization request through
a script element and then extracting the token via onerror
event handler which contains cross-origin vulnerability [30].
In addition to access tokens, our evaluation results show
that an attacker could gain complete control of the victim’s
account on many RPs (64%) by sending a forged SSO cre-
dential to the RP’s sign-in endpoint through a user-agent
controlled by the attacker. Interestingly, some RPs obtain
the user’s IdP account proﬁle on the client-side, and then
pass it as an SSO credential to the sign-in endpoint on the
server side to identify the user. However, this allows an at-
tacker to impersonate the victim user by simply using the
victim’s publicly accessible Facebook account identiﬁer.
Various CSRF exploits can be leveraged to compromise
users’ data residing on RPs, and assist XSS token theft at-
tacks. When the authenticity of SSO credentials—such as
the access token, authorization code, or user identiﬁer—is
not veriﬁed by the receiving RP website, this weakness could
be exploited to mount a session swapping attack [2], which
forces a victim user to sign into the RP as the attacker in
order to spoof the victim’s personal information (e.g., tricks
the victim into linking her credit card to the attacker’s ac-
count), or mount an XSS attack as we discovered. Further-
more, due to insuﬃcient CSRF protection by RPs, many
tested RPs are vulnerable to a force-login attack [42] that
allows a web attacker to stealthily force a victim user to sign
into the RP. After a successful force-login attack, our eval-
uation found that an adversary could use CSRF attacks to
alter the users’ proﬁle information on 21% of the evaluated
RPs. More interestingly, we found that a session swapping
or force-login vulnerability can be leveraged to (1) overcome
an attack constraint in which an authenticated session with
the RP is prerequisite for a successful XSS exploit, and (2)
bootstrap a token theft attack by luring a victim user to
view a maliciously crafted page anywhere on the web, when
a user’s RP account information is not sanitized for XSS.
Unlike logic ﬂaws, the fundamental causes of the uncov-
ered vulnerabilities cannot simply be removed with a soft-
ware patch. Our analysis reveals that those uncovered weak-
nesses are caused by a combination of implementation sim-
plicity features oﬀered by the design of OAuth 2.0 and IdP
implementations, such as the removal of the digital signature
from the protocol speciﬁcation, the support of client-ﬂow,
379and an “automatic authorization granting” feature. While
these simplicity features could be problematic for security,
they are what allow OAuth SSO to achieve rapid and widespread
adoption.
We aimed to design practical mitigation mechanisms that
could prevent or reduce the uncovered threats without sac-
riﬁcing simplicity. To be practical, our proposed improve-
ments do not require modiﬁcations from the OAuth protocol
or browsers, and can be adopted by IdPs and RPs gradually
and separately. Moreover, the suggested recommendations
do not require cryptographic operations from RPs because
understanding the details of signature algorithms and how
to construct and sign their base string is the common source
of problems for many SSO RP developers [36].
As OAuth SSO systems are being employed to guard bil-
lions of user accounts on IdPs and RPs, the insights from our
work are practically important and urgent, and could not be
obtained without an in-depth analysis and evaluation. To
summarize, this work makes the following contributions: (1)
the ﬁrst empirical investigation of the security of a represen-
tative sample of most-visited OAuth SSO implementations,
and a discovery of several critical vulnerabilities, (2) an eval-
uation of the discovered vulnerabilities and an assessment of
their prevalence across RP implementations, and (3) a de-
velopment of practical recommendations for IdPs and RPs
to secure their implementations.
The rest of the paper is organized as follows: The next
section introduces the OAuth 2.0 protocol and discusses re-
lated work. Section 3 provides an overview of our approach,
and Section 4 presents the evaluation procedures and results.
In Section 5, the implications of our results are discussed.
We describe our proposed countermeasures in Section 6, and
summarize the paper and outline future work in Section 7.
2. BACKGROUND AND RELATED WORK
Many websites expose their services through web APIs
to facilitate user content sharing and integration. Building
upon the actual implementation experience of proprietary
protocols, such as Google AuthSub, Yahoo BBAuth and
Flickr API, the OAuth 2.0 protocol is an open and stan-
dardized API authorization protocol that enables users to
grant third-party applications with limited access to their
resources stored at a website. The authorization is made
without sharing the user’s long-term credentials, such as
passwords, and allows the user to selectively revoke an appli-
cation’s access to their account. OAuth is designed as an au-
thorization protocol, but many implementations of OAuth
2.0 are being deployed for web single sign-on (SSO), and
thus authentication. In these cases, user identity informa-
tion hosted on an IdP is authorized by the user and shared
as a web resource for RPs to identify the current SSO user.
Compared to its predecessor, OAuth 2.0 tends to make
the protocol simple for RP developers to implement. First,
it removes the digital signature requirements from the spec-
iﬁcation, and relies on SSL as the default way for communi-
cation between the RP and IdP. This also improves perfor-
mance as the protocol becomes stateless without requiring
RPs to store temporary token credentials. Second, it splits
out ﬂows for diﬀerent security contexts and client applica-
tions. In particular, in the context of SSO, it supports client-
ﬂow so that the OAuth protocol can be executed completely
within a browser.
Figure 1: The server-ﬂow protocol sequences.
2.1 How OAuth 2.0 works
OAuth-based SSO systems are based on browser redirec-
tion in which an RP redirects the user’s browser to an IdP
that interacts with the user before redirecting the user back
to the RP website. The IdP authenticates the user, iden-
tiﬁes the RP to the user, and asks for permission to grant
the RP access to resources and services on behalf of the user.
Once the requested permissions are granted, the user is redi-
rected back to the RP with an access token that represents
the granted permissions. With the authorized access token,
the RP then calls web APIs published by the IdP to access
the user’s proﬁle attributes.
The OAuth 2.0 speciﬁcation deﬁnes two ﬂows for RPs
to obtain access tokens: server-ﬂow (known as the “Au-
thorization Code Grant” in the speciﬁcation), intended for
web applications that receive access tokens from their server-
side program logic; and client-ﬂow (known as the “Implicit
Grant”) for JavaScript applications running in a web browser.
Figure 1 illustrates the following steps, which demonstrate
how server-ﬂow works:
1. User U clicks on the social login button, and the browser
B sends this login HTTP request to RP.
2. RP sends response_type=code, client ID i (a random
unique RP identiﬁer assigned during registration with the
IdP), requested permission scope p, and a redirect URL
r to IdP via B to obtain an authorization response. The
redirect URL r is where IdP should return the response
back to RP (via B). RP could also include an optional
state parameter a, which will be appended to r by IdP
when redirecting U back to RP, to maintain the state
between the request and response. All information in the
authorization request is publicly known by an adversary.
3. B sends response_type=code, i, p, r and optional a to
IdP. IdP checks i, p and r against its own local storage.
4. IdP presents a login form to authenticate the user. This
step could be omitted if U has already authenticated in
the same browser session.
5. U provides her credentials to authenticate with IdP, and
then consents to the release of her proﬁle information.
The consent step could be omitted if p has been granted
by U before.
6. IdP generates an authorization code c, and then redi-
rects B to r with c and a (if presented) appended as
parameters.
7. B sends c and a to r on RP.
8. RP sends i, r, c and a client secret s (established dur-
ing registration with the IdP) to IdP’s token exchange
endpoint through a direct communication (i.e., not via