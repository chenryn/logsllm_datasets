a
V
l
l
a
r
e
v
O
e
l
b
a
i
r
a
V
x
e
l
p
m
o
C
e
c
n
e
r
e
f
f
i
D
e
e
r
T
Ghidra
IDA Pro
Angr
Reca.| Prec. Reca. | Prec. Reca.| Prec. Reca.| Prec.
85.32 | 86.14 66.83 | 62.94 62.82 | 60.02 39.94 | 26.96
wget
lighttpd 87.67 | 86.35 52.65 | 52.15 46.18 | 41.37 44.35 | 22.90
82.10 | 84.07 67.63 | 69.34 67.09 | 63.97 46.64 | 30.53
grep
100.0 | 100.0 84.78 | 79.10 78.26 | 75.00 59.78 | 37.42
gzip
100.0 | 100.0 68.29 | 51.16 26.83 | 22.00 21.95 | 11.25
fortune
91.02 | 91.32 68.04 | 62.94 56.24 | 52.47 42.53 | 25.81
Avg.
73.26 | 83.14 29.21 | 47.20 20.29 | 76.39 N/A | N/A
wget
lighttpd 84.32 | 85.87 05.51 | 27.08 06.78 | 50.00 N/A | N/A
57.39 | 84.52 10.43 | 35.29 11.30 | 41.67 N/A | N/A
grep
100.0 | 100.0 66.67 | 73.68 57.14 | 81.25 N/A | N/A
gzip
100.0 | 100.0 50.00 | 66.67 00.83 | 33.33 N/A | N/A
fortune
82.99 | 90.71 32.35 | 49.98 20.77 | 65.53 N/A | N/A
Avg.
wget
lighttpd
28.92
12.37
30.09
00.00
00.00
14.28
grep
gzip
fortune
Avg.
70.99
80.18
78.41
42.50
100.0
74.42
62.84
64.87
60.93
00.00
00.00
37.73
N/A
N/A
N/A
N/A
N/A
N/A
Simpliﬁed
of
(a)
has
CVE-2019-12802,
an out-of-boundary memory access for
array data inside structure node_t.
example
which
(c) Assemble code for line 8
and line 9 in Fig 18a. Lines A,
B, C, D, E, F are the original
assemble code,
lines C1, C2,
C3, C4, C5 are instrumented by
RetroWrite, and lines C3a,
C3b, C3c, C3d, C3e are instru-
mented by our enhancement.
Only our instrumentation can
report CVE-2019-12802.
(b) Address sanitizer maps 8 bytes of
the application memory into 1 byte of
the shadow memory named shadow
byte. However, only 5 bits of each
shadow byte are used in standard
libasan.so.4.
Fig. 18: Field-level binary ASAN instrumentation for CVE-
2019-12802.
very coarse-grained border identiﬁcation. Speciﬁcally, for an
allocated heap region, redzones are only inserted before and
after the region, not between the variables/ﬁelds within the
region. This may degrade the effectiveness of ASAN. Take
CVE-2019-12802 [49] as an example. It is an out-of-bound
vulnerability whose simpliﬁed code is shown in Figure 18a.
The vulnerability occurs at line 9, in which there is an out-
of-bound memory access for array data inside the node t
structure. RetroWrite does not insert redzone code within the
node t structure, hence cannot detect the vulnerability.
information such that
We strengthen RetroWrite to take in our reconstructed
symbol
to
a structure can be detected. Speciﬁcally, we aim to
prevent
from being accessed by any
array instruction. To avoid false warnings and offer a
strong (probabilistic) guarantee, we carefully deﬁne scalar
scalar variables
corruptions
internal
Fig. 19: Subgraph statistics in factor graph inference
i
as
an
array
if
deﬁne
variables and array instruction. We deﬁne v as a scalar
variable, if P (Scalar(v)) > 0.99 ∧ ¬(∃(a1, a2), s.t. (a1 ≤
v.a ≤ a2) ∧ (P (Array(a1, a2)) > 0.01)) Similarly,
we
:
Accessed(i, v),∃(a1, a2), s.t. AccessMultiChunks(i, v.a.r) ∧
(a1 ≤ v.a ≤ a2) ∧ (P (Array(a1, a2))) > 0.99). We leverage
RetroWrite to instrument the target binary. For any memory
access by an array instruction, besides the basic ASAN
checks provided by RetroWrite, we additionally check it is
accessing a scalar variable.
instruction,
∀v
Figures 18c and 18b present the details of our implementa-
tion. Lines [A][B][C][D][E][F] in Figure 18c are the
original assembly code for line 8-9 in Figure 18a, where
rcx in line [B] stores the value of i and rax+rcx*8
in line [D] stores the address of p->data[i]. Lines
[C1][C2][C3][C4][C5] are instrumented by RetroWrite.
They ﬁrst get
the target address of instruction [D] (line
[C1]), read its shadow value (dil) from the correspond-
ing shadow memory (lines [C2][C3]), and validate the
shadow value (lines [C4][C5]). RetroWrite’s ASAN is
based on the standard libasan.so.4. Hence it directly in-
vokes asan_report_error to report errors. An interest-
ing observation is that, even though libasan.so.4 uses one
byte to store shadow value, only 5 bits of the byte are
used, as shown by the shadow value layout in Figure 18b.
This allows us to store more meta information using the
remaining 3 bits. In our case, we use one bit
to record
whether the memory stores a scalar variable. After that, we
instrument more validation instructions for array instructions.
Lines [C3a][C3b][C3c][C3d][C3e] are added by OS-
PREY, for array instruction [D]. The instrumentation validates
whether the accessed memory stored a scalar variable. As
such, the mentioned CVE can be successfully detected. The
instrumented code does not cause any false warnings when
executed on normal test cases. Note that although probabilistic
guarantees may not be strong enough for production systems,
they make perfect sense for vulnerability detection, in which
rare false warnings are acceptable.
G. Execution Time
In Table III, we measure the execution time of different
tools on the two benchmark sets. Due to the space limit,
we aggregate CoreUtils’ results and show the averaged data.
Detailed results [45] are available for interested readers. In
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:02 UTC from IEEE Xplore.  Restrictions apply. 
830
01. typedefstruct node{02.   longdata[0x20];03.   structnode *next;04. } node_t;05.06. void gee() {07.   node_t*p = malloc(sizeof(node_t));08.   for (inti=0; idata[i] = 0;10. }lsbmsbBits used by standard libasan.so.4.Bits used by OSPREYenhancement.[A] xorrcx, rcx[B] cmpecx, 0x20[C] jg[C1] lea rdi, [rax+rcx*8][C2] shrrdi, 3[C3] movdil, [rdi+SHADOW_BASE][C3a] movrsi, rdi[C3b] and sil, 0x30[C3c] cmpsil, 0x30[C3d] jz[C3e] and dil, 0x8F[C4] test dil, dil[C5] jnz[D] mov[rax+rcx*8], 0[E] incecx[F] jmpB01234567Log Base 10ProgramsAccess (3420)BaseAddr (306)MemCopy (404)PointsTo (97529)MallocSize (152)MayArray (13)050100150200250300050100150200250300350400450Subgraph SizeSubgraph NumberProgramsSubgraph Number (79.67)Subgraph Size (45.51)TABLE III: Execution time of different tools. The numbers in
the brackets denote how many times OSPREY is slower than
the corresponding tool.
Angr
Program Osprey
Ghidra
IDA
d
r
a
w
o
H
3604.80s 94.74s (37.05×) 18.98s (188.88×) 41.47s (85.92×)
wget
lighttpd 2013.12s 63.89s (30.51×) 16.80s (118.83×) 31.60s (62.70×)
832.52s 66.75s (11.47×) 32.62s (24.52×) 33.88s (23.57×)
grep
(8.15×) 11.84s (39.84×) 18.57s (25.04×)
gzip
483.65s 52.84s
(66.13×) 7.11s (58.45×)
fortune 422.92s 37.48s (10.28×) 6.30s
CoreUtils 528.24s 35.35s (13.94×) 5.80s
(90.08×) 10.55s (49.07×)
(18.57×) 15.39s (88.04×) 23.87s (50.79×)
1314.21s 58.51s
Avg.
TABLE IV: Impact of aggressive optimizations with -O3.
Def., O3, Degra., and # CVars denote the analysis results
for binaries compiled under the default optimization (-O0),
under -O3, degradation from -O0, and the number of complex
variables in memory, respectively.
(a) F1 scores for overall variable recovery
Osprey
Ghidra
IDA
Angr
Program
s
d
r
a
w
o
H
Def. O3 Degra. Def. O3 Degra. Def. O3 Degra. Def. O3 Degra.
wget 0.86 0.66 23.11% 0.65 0.51 20.89% 0.48 0.20 58.65% 0.32 0.21 34.52%
lighttpd 0.87 0.65 25.26% 0.52 0.29 44.59% 0.43 0.15 64.07% 0.30 0.09 71.72%
0.83 0.74 11.21% 0.68 0.60 11.74% 0.54 0.20 63.03% 0.37 0.16 55.72%
grep
gzip
1.00 0.74 26.44% 0.82 0.37 55.20% 0.67 0.24 64.30% 0.46 0.16 64.46%
fortune 1.00 0.82 17.86% 0.58 0.63 -7.16% 0.24 0.33 -38.36% 0.15 0.20 -34.44%
CoreUtils 0.89 0.62 31.01% 0.74 0.49 37.78% 0.71 0.27 61.12% 0.43 0.16 63.84%
0.91 0.70 22.48% 0.67 0.48 27.18% 0.51 0.23 45.47% 0.34 0.16 42.64%
Avg.
Fig. 20: Tree difference for CoreUtils
general, OSPREY is 18.57, 88.04, and 50.79 times slower than
Ghidra, IDA Pro, and Angr, respectively. We argue that reverse
engineering is often a one-time effort and OSPREY provides a
different trade-off between cost and accuracy. It is also worth
noting that Ghidra is the second slowest one due to its register-
based data-ﬂow analysis, and IDA Pro is the fastest one as its
variable recovery mainly relies on hard-coded code pattern
matching rules.
H. Scalability
To assess the scalability of OSPREY, we evaluate OSPREY
on Apache and Nginx,
two well-known applications with
signiﬁcantly larger code base than the benchmarks we used.
On both programs, OSPREY produces the highest F1 Score
for overall and complex variable recovery, and the lowest
tree difference. Details can be found in our supplementary
material [45].