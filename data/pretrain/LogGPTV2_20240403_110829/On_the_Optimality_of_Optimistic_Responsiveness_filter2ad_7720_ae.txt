Claim 17. If an honest replica directly commits a block Bk in
view v using the synchronous commit rule, then there does not exist a
certificate for an equivocating block in view v.
Proof. Suppose replica r synchronously commits Bk in view v at
time t without detecting an equivocation. Observe that an equiv-
ocating responsive certificate does not exist since replica r would
not ack two equivocating blocks. Hence, we need to only show that
a synchronous equivocating certificate does not exist. We show it
with the following two arguments. First, r votes for Bk at time leqt
and sends an ack for Bk at time ≤ t − ∆. r’s ack for Bk arrives all
honest replicas by time t. Hence, no honest replica will vote for an
equivocating block B′
k′ at time ≥ t. Second, no honest replica must
have sent an equivocating ack at time ≤ t − ∆. Otherwise, replica r
would not have committed. This also implies that no honest replica
will vote for an equivocating block at time ≤ t (due to the ∆ wait
between ack and vote).
v (Bk) or C1/2
□
Lemma 18. If an honest replica directly commits a block Bk in
view v then, (i) there doesn’t exist an equivocating certificate in view
v, and (ii) all honest replicas receive Cv(Bk) before entering view
v + 1.
Proof. Part(i) follows immediately from Claim 16 and Claim 17.
Suppose replica r commits Bk at time t either responsively or
synchronously. r notifies the certificate (Cf
v (Bk)) which
arrives at all honest replicas at time ≤ t + ∆. Observe that no honest
replica r′ has entered view v + 1 at time ≤ t + ∆. Otherwise, due
to 2∆ wait before entering the new view, r′ must have sent either
equivocating or a blame certificate at time ≤ t − ∆; r must have
received the blame certificate at time ≤ t. It would have quit view
and not committed. Hence, all honest replicas receive Cv(Bk) before
entering view v + 1.
□
Lemma 19. If an honest replica directly commits a block Bk in
view v, then all honest replicas lock on a certified block that ranks
higher than or equal to Cv(Bk) before entering view v + 1.
Proof. By Lemma 18 part (ii), all honest replicas will receive Cv(Bk)
before entering view v + 1. By Lemma 18 part (i), no equivocating
certificate exists in view v. Since replicas lock on the highest certi-
fied block as soon as they enter the next view, all honest replicas
lock on a certified block that ranks higher than or equal to Cv(Bk)
before entering view v + 1.
□
Lemma 20 (Uniqe Extensibility). If an honest replica directly
commits a block Bk in view v, then any certified block that ranks
equal to or higher than Cv(Bk) must extend Bk .
Proof. Any certified block B′
k′ in view v of rank equal to or higher
than Cv(Bk) must extend Bk. Otherwise, B′
k′ equivocates Bk and
by Lemma 18, B′
k′ cannot be certified in view v. For views higher
than v, we prove the lemma by contradiction. Let S be the set of
certified blocks that rank higher than Cv(Bk), but do not extend Bk.
Suppose for contradiction S (cid:44) ∅. Let Cv∗(Bℓ∗) be a lowest ranked
block in S. Also, note that if Bℓ∗ does not extend Bk, then Bℓ∗−1
does not extend Bk either.
For Cv∗(Bℓ∗) to exist, some honest replica must vote for Bℓ∗ in
view v either upon receiving a proposal ⟨propose, Bℓ∗ , v∗, Cv′(Bℓ∗−1)⟩
for v′  v.
Also, this certificate is ranked lower than Cv∗(Bℓ∗) due to its height.
Hence, this contradicts the fact that Cv∗(Bℓ∗) is a lowest ranked
block in S.
□
Safety. The safety proof is identical to that of Theorem 14 except
Lemma 20 needs to be invoked.
Liveness. The liveness proof is similar to that of Theorem 15.
6 OPTIMISTIC RESPONSIVENESS WITH
OPTIMISTICALLY RESPONSIVE
VIEW-CHANGE
The protocols in Section 4 and Section 5 are optimistically respon-
sive in the steady-state. However, whenever a leader needs to be
replaced, the view-change protocol must always incur a synchro-
nous wait. This suffices if leaders are replaced occasionally, e.g.,
when a leader replica crashes. However, in a democracy-favoring
approach it may be beneficial to replace leaders after every block, or
every few blocks. In such a scenario, the synchronous wait during
view-change will increase the latency of the protocol. For example,
the protocol in Section 4 waits at least 4∆ time during view-change
to ensure that the new leader collects status from all honest repli-
cas. Thus, in an execution where leaders are changed after every
block, even when the leader is honest, this protocol requires at
least 4∆ + O(δ) for one block to be committed even during opti-
mistic executions, and requires at least 6∆ when  3n/4 replicas are honest,
this protocol can commit blocks in O(δ) time and replace leaders in
O(δ) time. When more than n/4 replicas are malicious with rotating
honest leaders, the protocol still commits in 5∆ + O(δ) time.
6.1 Steady State Protocol
We make following modifications to the steady state protocol in
Section 4 to support a responsive view-change. In a synchronous
commit, a replica commits within 3∆ time after voting if no equiv-
ocation or blame certificate has been received. The additional ∆
wait in the synchronous commit accounts for the responsive view-
change that may occur before all honest replicas receive a certificate
for committed blocks. The propose and vote steps remain identical.
However, after voting for Bk, the commit-timerv,k is set to 3∆ time.
Pre-commit. The protocol includes an additional pre-commit step
with two pre-commit rules active simultaneously. The pre-commit
is identical to the commit step in the previous protocol. A replica
pre-commits using the rule that is triggered first. In a responsive
pre-commit, a replica r pre-commits a block Bk immediately when
it receives ⌊3n/4⌋ + 1 votes for Bk, i.e., C3/4
v (Bk) in view v and
broadcasts commit message via ⟨commit, Bk , v⟩r .
In a synchronous pre-commit, a replica pre-commits Bk when
its commit-timerv,k reaches ∆ and broadcasts ⟨commit, Bk , v⟩r .
Commit. In a responsive commit, a replica commits a block Bk
immediately along with its ancestors when it receives ⌊3n/4⌋ +
1 commit messages for Bk. In a synchronous commit, a replica
commits Bk and all its ancestors when its commit-timerv,k expires
and it doesn’t detect an equivocation or blame certificate. As before,
the commit rules are non-blocking to rest of the execution.
Yield. When leader L wants to relinquish his leadership in view
v, L broadcasts ⟨yield, v⟩L. The yield message forces an explicit
view-change and useful for democracy-favoring leader policy and
change leader after every block. Ideally, an honest leader issues
yield after committing at least one block itself in view v.
Blame and quit view. The conditions for blaming the leader re-
mains identical to earlier protocols. We make modifications in how
a replica quits a view. Replicas quit view v when they receive f + 1
blame messages, detect equivocation or receive a yield message
from the current leader. On quitting view v, replica r broadcasts
⟨quit-view, v, CC⟩r where CC is the highest ranked chain certifi-
cate known to r. Replica r also broadcasts messages that triggered
quitting view v, for example, a blame certificate or yield message.
After quitting view v, replica r sets view-timerv +1 to 2∆ and starts
counting down.
The requirements for a pre-commit in this protocol is identical to
the requirements for a commit in the protocol in Section 4. Hence,
a similar intuition for those steps apply here as well.
6.2 View-change Protocol
Unlike a synchronous view-change as shown in Figure 2 that waits
2∆ before entering a new view, a responsive view-change allows
replicas to quit current view and immediately transition to the next
view without any delay. In the new view, a leader can also propose
blocks without waiting for an additional 2∆ time. We make the fol-
lowing modifications to the view-change protocol to accommodate
the responsive view-change.
Status. The status step includes two rules for entering into the
new view. A replica r enters into view v + 1 based on which rule
is triggered first. A responsive rule is triggered when replica r
3/4
B
3/4
B
3/4
B
of ⌊3n/4⌋ + 1 quit-
receives responsive quit-view certificate Q
view messages in view v and enters view v+1 immediately. Replica r
broadcasts Q
to all replicas, updates its lock, lockv +1 to a highest
ranked chain certificate and sends lockv +1 to the new leader L′ via
a status message. The responsive status rule ensures that a replica
receives a responsively committed blocks when making immediate
transition to a higher view. This is critical to maintain the safety
of protocol (explained later). Due to the synchrony assumption,
within ∆ time and transition
all other honest replicas receive Q
immediately to view v + 1.
The synchronous status rule is triggered when view-timerv +1
expires. Note that the view-timerv was set to 2∆. The 2∆ wait
ensures that all honest replicas receive a highest ranked chain
certificate CC in the quit-view message before entering view v + 1.
Replica r enters view v +1, and updates its lock, lockv +1 to a highest
ranked chain certificate and sends lockv +1 to the new leader L′ via
⟨status, lockv +1⟩r .
New-View. Upon entering view v + 1, the leader waits for a set S
of f + 1 status messages. We call the set S of f + 1 status messages
as status certificate. Based on the status certificate S, L′ picks the
highest ranked chain certificate lockv +1 and broadcasts new-view
message ⟨new-view-resp, v + 1, lockv +1⟩L′ along with S. Sending
S along with new-view message justifies that tip(lockv +1) extends
committed blocks in previous view.
First-Vote. Upon receiving a ⟨new-view-resp, v + 1, lock′⟩L′ mes-
sage along with status certificate S, if chain certificate lock′ has
the highest rank in S, then it forwards the new-view message to
all replicas and broadcasts a vote for it. Note that replica r may
have lockv +1 with rank higher than lock′. A replica votes for lock′
as long as lock′ is vouched by S. This is critical to ensure safety
across views.
Next, we provide some intuition on how the view-change proto-
3/4
C
and Q
col provides liveness and safety across views.
How is the safety of a responsive commit maintained across
views? Suppose an honest replica r responsively commits a block
Bk at time t. A responsive commit for a block Bk requires a set
3/4
of ⌊3n/4⌋ + 1 commit messages. A responsive view-change
Q
C
of ⌊3n/4⌋ + 1 quit-view messages. Due to a quo-
requires a set Q
rum intersection argument, Q
intersect in at least one
honest replica h which sends chain certificate CC such that tip(CC)
extends Cv(Bk). Observe that this also explains why highest ranked
chain certificate is sent with a quit-view message. The highest chain
certificate CC such that tip(CC) extends Cv(Bk) from the honest
replica h at the intersection allows another replica r′ performing a
responsive view change to learn about the commit of Bk.
A synchronous view-change waits 2∆ time before moving to a
higher view. If an honest replica h ∈ Q
pre-commits responsively,
the chain certificate CC sent by replica h in quit-view message
reaches replica r′ by the time the replica r′ enters view v + 1.
Similarly, if replica h ∈ Q
pre-commits synchronously, honest
replicas making a synchronous view-change receive Cv(Bk) by
the time h pre-commits. Thus, all honest replicas lock on chain
certificate CC such that tip(CC) extends Cv(Bk).
3/4
C
3/4
C
3/4
B
3/4
B
Let v be the view number and replica L be the leader of the current view. While in view v, a replica r runs the following steps in iterations:
(1) Propose. If replica r is the leader L, upon receiving Cv(Bk−1), it broadcasts ⟨propose, Bk , v, Cv(Bk−1)⟩L where Bk extends Bk−1.
(2) Vote. Upon receiving the first proposal ⟨propose, Bk , v, Cv(Bk−1)⟩L with a valid view v certificate for Bk−1 (not necessarily from L)
where Bk extends Bk−1, forward the proposal to all replicas, broadcast a vote in the form of ⟨vote, Bk , v⟩r . Set commit-timerv,k to
3∆ and start counting down.
(3) Pre-commit. Replica r pre-commits Bk using one of the following rules if r is still in view v:
(a) Responsive Pre-commit. On receiving ⌊3n/4⌋+1 votes for Bk, i.e., C3/4
(b) Synchronous Pre-commit. If commit-timerv,k reaches ∆, pre-commit Bk and broadcast ⟨commit, Bk , v⟩r to all replicas.
(4) (Non-blocking) Commit. If replica r is still in view v, r commits Bk using the following rules:
(a) Responsive Commit. On receiving ⌊3n/4⌋ + 1 commit messages for Bk in view v, commit Bk and all its ancestors. Stop
(b) Synchronous Commit. If commit-timerv,k reaches 0, commit Bk and all its ancestors.
(5) Yield. Upon committing at least a block in view v, Leader L broadcasts ⟨yield, v⟩L when it wants to renounce leadership.
(6) (Non-blocking) Blame and quit view.
v (Bk) in view v, pre-commit Bk and broadcast ⟨commit, Bk , v⟩r .
commit-timerv,k.
- Blame if no progress. For p > 0, if fewer than p proposals trigger r’s votes in (2p + 4)∆ time in view v, broadcast ⟨blame, v⟩r .
- Quit view on f + 1 blame messages. Upon gathering f + 1 distinct blame messages, broadcast ⟨quit-view, v, CC⟩ along with f + 1
blame messages where CC is the highest ranked chain certificate known to r. Abort all view v timers, and quit view v. Set
view-timerv +1 to 2∆ and start counting down.
- Quit view on detecting equivocation. If leader equivocation is detected, broadcast ⟨quit-view, v, CC⟩r along with the equivocating
proposals, abort all view v timers, and quit view v. Set view-timerv +1 to 2∆ and start counting down.
- Quit view on yield. Upon receiving yield, broadcast ⟨quit-view, v, CC⟩r message along with yield message, abort all view v timers,
and quit view v. Set view-timerv +1 to 2∆ and start counting down.
Figure 5: Steady state protocol for optimistically responsive view-change.
Let L and L′ be the leader of view v and v + 1, respectively.
i) Status. Replica r can enter view v + 1 using one of the following rules:
a) Responsive. Upon gathering ⌊3n/4⌋ + 1 distinct quit-view messages, broadcast them. Update its chain certificate CC to the highest
possible rank. Set lockv +1 to CC and send ⟨status, lockv +1⟩r to L′. Enter view v + 1 immediately. Stop view-timerv +1.
send ⟨status, lockv +1⟩r to L′. Enter view v + 1.
1, lockv +1⟩L′ along with S where lockv +1 is highest ranked chain certificate in S.
to lock′, broadcast ⟨new-view-resp, v + 1, lock′⟩L′, and ⟨vote, tip(lock′), v + 1⟩r .
b) Synchronous. When view-timerv +1 expires, update its chain certificate CC to the highest possible rank. Set lockv +1 to CC and
ii) New View. Upon receiving a set S of f + 1 distinct status messages after entering view v + 1, broadcast ⟨new-view-resp, v +
iii) First Vote. Upon receiving the first ⟨new-view-resp, v + 1, lock′⟩L′ along with S, if lock′ has a highest rank in S, update lockv +1
Figure 6: The optimistically responsive view-change protocol
How is the safety of a synchronous commit maintained across