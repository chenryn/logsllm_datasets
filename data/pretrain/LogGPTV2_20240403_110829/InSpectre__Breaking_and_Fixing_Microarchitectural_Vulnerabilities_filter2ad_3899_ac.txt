yields the same value as the store in t32. If the store t32 has been
commiŠed to memory, the execution of the load yields the obser-
vation dl 1.
4.4 Operational Semantics
We can now deﬁne the microinstructions’ transition relation σ
σ ′, implementing the lifecycle of Section 4.2.
(Execute) A microinstruction can be executed if it hasn’t already
been executed (s(t )↑), the guard holds ([c]s), and the dependencies
have been resolved ([ι](s)↓):
l
−→→
(Exe)
ι = t ← c?o ∈ I
s(t )↑
[c]s
[ι]σ = (v, l )
σ = (I , s, C, F)
l
−→→ (I , s[t 7→ v], C, F)
Observe that if ι is a load from the memory subsystem, the rule
can produce the observation of a data load.
(Commit) Once a memory store has been executed (s(t )↓), it can
be commiŠed to memory, yielding an observation. Œe rule en-
sures that stores can only be commiŠed once (t < C) and that
stores on the same address are commiŠed in program order, by
checking that all past stores are in C, i.e., bn(str-may(σ , t )) ⊆ C.
(Cmt)
t ← c?st M ta tv ∈ I
s(t )↓
bn(str-may(σ , t )) ⊆ C
t < C
σ = (I , s, C, F)
ds s (ta )
−−−−−−−→→ (I , s, C ∪ {t }, F)
In summary, stores can be executed internally in any order, how-
ever, they are commiŠed in order. In Example 3, if σ has storage
s = {t11 7→ 1; t12 7→ 1; t31 7→ 1; t32 7→ 3} and commits C = ∅,
then only t12 can be commiŠed, since t22 has not been executed
and bn(str-may(σ , t32)) * C. Notice that t22 is in the may stores
since its address has not been resolved. Œerefore, t32 can be com-
miŠed only a‰er t12 has been commiŠed and t21 has been executed.
However, the commit of t32 does not have to wait for the commit
or execution of t22. In fact, if σ ′ has storage s ′ = s ∪ {t21 7→ 0} then
bn(str-may(σ ′
, t32)) = {t12}. Œat is, the order of store commits is
only enforced per location, as expected.
(Fetch-Decode) A program counter store enables the fetching and
decoding (i.e., translating) of a new ISA instruction. Œe rule for
fetching is similar to the rule for commit, since instructions are
fetched in order. Œe set F keeps track of program counter updates
whose resulting instruction has been fetched and ensures that in-
structions are not fetched or decoded twice. Fetching the result of
a program counter update yields the observation of an instruction
load from address a.
(Ftc)
t ← c?st P C tv ∈ I
s(t ) = a
bn(str-may(σ , t )) ⊆ F
t < F
σ = (I , s, C, F)
il a
−−−→→ (I ∪ I ′
, s, C, F ∪ {t })
where I ′ = translate(a, max(I ))
Write max(I ) for the largest name t in I and translate(a,max(I ))
for the translation of the instruction at address a, ensuring that
the names of the microinstructions thus generated are greater than
max(I ).
(Remarks on OoO semantics) Œe three rules of the seman-
tics reﬂect the atomicity of MIL microinstructions: A transition
can aﬀect a single microinstruction by either assigning a value to
the storage, extending the set of commits, or extending the set of
fetches. In the following, we use step-param(σ , σ ′) = (α , t ) to iden-
tify the rule α ∈ {Exe, Cmt(a, v), Ftc(I )} that enables σ −→→ σ ′ and
the name t of the aﬀected microinstruction. In case of commits we
also extract the modiﬁed address a and the saved value v, in case of
fetches we extract the newly decoded microinstructions I . Œe se-
mantics preserves several invariants: Let (I , s, C, F) = σ if α = Exe
then σ (t )↑; if α = Cmt(a,v) then t < C and free names (i.e., address
and value) of the corresponding microinstruction are deﬁned in s;
if α = Ftc(I ′) then t < F; all state components are monotonic.
(Initial state) In order to bootstrap the computation, we assume
that the set of microinstructions of the initial state contains one
store for each memory address and register, the value of these
stores is the initial value of the corresponding resource, and that
these stores are in the storage and commits of the initial state.
dependencies at time of execution of the microinstruction identi-
ﬁed by t. Œerefore, a state in the speculative semantics is a tu-
ple h = (I , s, C, F , δ , P) where σ = (I , s, C, F) is the corresponding
state in the OoO semantics. Abusing notation we write (σ , δ , P)
to denote a state in the specutative semantics, and use h, h1, . . . to
range over these states. Informally, δ (t ) is a snapshot of the stor-
age that aﬀects the value of t due to speculative predictions. As we
will see, these snapshots are needed in order to match speculative
states with non-speculative states, and to restore the state of the
execution in case of misspeculation.
5.1 Managing Microinstruction Dependencies
Œe execution of a microinstruction may depend on local (intra-)
instruction dependencies, the names appearing freely in a microin-
struction, as well as cross (inter-) instruction dependencies, caused
by memory or register loads.
Deﬁnition 5.1. Let t ← c?o ∈ σ . Œe dependencies of t in σ are
deps(t , σ ) = fn(t ← c?o) ∪ depsX (t , σ )
where the cross-instruction dependencies are deﬁned as
depsX (t , σ ) = (cid:26) ∅,
asn(σ , t ) ∪ srcs(σ , t ),
if t is not a load
otherwise.
Cross-dependencies are nonempty only for loads and consist of the
names of active stores aﬀecting t in state σ , asn(σ , t ) = bn(str-act(σ , t )),
plus, the names of stores potentially intervening between the ear-
liest active store and t (we call srcs(σ , t ) the potential sources of t),
which are deﬁned as
srcs(σ , t ) = {fn(c ′), {t ′
a }
| min(asn(σ , t )) ≤ t ′
a t ′
t ′ ← c ′?st τ t ′
< t ,
v ∈ σ }
Intuitively, a load depends on the execution of active stores that
may aﬀect the address of that load. Moreover, the fact that a name
t ∗ is in the set of active stores asn depends on the addresses and
guards of all stores between t ∗ and t. Œis is because their values
will determine the actual store that aﬀects the address of the load t.
Œanks to our ordering relation < between names, we can use the
minimum name min(asn) in asn to compute all stores between any
name in asn and t, thus extracting the free names of their guards
and addresses.
Œe following ﬁgure illustrates dependencies of the load from
Example 3:
t11
1
0
1
1
t21
t31
t41
t12
t22
t32
t42
st M t11 1
st M t21 2
st M t31 3
l d M t41
5 SPECULATIVE SEMANTICS
We now extend the OoO semantics to support speculation. We
add two new components to the states: a set of names P ⊆ n(I )
whose values have been predicted as result of speculation, and a
partial function δ : N ⇀ S recording, for each name t, the storage
If s = {t11 7→ 1; t21 7→ 0; t41 7→ 1} then the set of active stores
names asn for t42 is bn(str-act(σ , t42)) = {t12, t32}, as depicted
by the solid ellipses. In particular, min(asn) = t12. We consider
all stores between t12 and the load t42 (i.e., t12, t22, and t32), and
add to the set of cross-dependencies the names in their guards
6
and addresses, namely t11, t21 and t31, as depicted by the dashed
rectangle. Observe that t21 is in the set of cross-dependencies,
although t22 is not an active store. Œis is because membership
of t12 in the active stores’ set depends on the address t21 being
set to 0, i.e., s(t21) = 0. Œerefore, the set of cross-dependencies
depsX (t42, σ ) = {t12, t32, t11, t21, t31}. Finally, the local dependen-
cies of the load t42 consist of its parameter t41 (the doŠed ellipsis),
such that deps(t42, σ ) = {t12, t32, t11, t21, t31, t42}.
We verify that the dependencies deps are computed correctly.
Deﬁnition 5.2 (t-equivalence). Let σ1 and σ2 be states with stor-
age s1 and s2, and ι1 and ι2 be the microinstructions identiﬁed by t.
Œen σ1 and σ2 are t-equivalent, σ1 ∼t σ2, if ι1 = ι2, s1|fn(ι1) =
s2 |fn(ι2), and if t’s microinstruction is a load with dependencies
Ti = deps(t , σi ) and active stores SAi = str-act(σi |Ti , t ) for i ∈
{1, 2} then SA1 = SA2 and s1 |S A1
= s2 |S A2
.
Intuitively, t-equivalence states that, if the microinstruction named
with t depends (in the sense of deps) in both states on the same ac-
tive stores and these stores assign the same value to t, then the
microinstruction has the same dependencies, it is enabled, and it
produces the same result in both states.
We use three possible states of the example above to illustrate
t-equivalence: σ1 is a state reachable in the OoO semantics, σ2 and
σ3 may result from misspeculating the value of t31 to be 0 and 5
respectively.
t11
t21
t31
t41
1
0
1
1
1
2
3
t12
t22
t32
t42
σ1
/t42
t11
t21
t31
t41
1
0
0
1
1
2
3
t12
t22
t32
t42
σ2
∼t42
t11
t21
t31
t41
1
0
5
1
1
2
3
t12
t22
t32
t42
σ3
Œe states σ1 and σ2 are not t42-equivalent. In particular, T1 =
deps(t42, σ1) = {t31, t32} (notice that t12 and t22 are not in the de-
pendencies because by we know that t31 7→ 1 and t41 7→ 1) , T2 =
deps(t42, σ2) = {t11, t21, t31, t12}. Notice that σ1 |T1 and σ2 |T2 con-
tain all the information needed to evaluate the semantics of t42 in
σ1 and σ2 respectively. In this case SA1 = str-act(σ1 |T1
, t42) = {t32},
and SA2 = str-act(σ2|T2
, t42) = {t12} hence SA1 , SA2: the two
states lead the load t42 to take the result produced by two diﬀerent
memory stores.
Œe states σ2 and σ3 are t42-equivalent. In fact, T3 = deps(t42, σ3) =
{t11, t21, t31, t12} and SA3 = str-act(σ3 |T3
SA2 = SA3 and s2|S A2
take the result produced by the same memory stores.
, t42) = {t12}. Œerefore,
= s3|S A3 : Œe two states lead the load t42 to
Lemma 5.3. If σ1 ∼t σ2 and t’s microinstruction in σ1 is ι = t ←
c?o, then deps(t , σ1) = deps(t , σ2), [c]σ1 = [c]σ2, and if [ι]σ1 =
(v1, l1) and [ι]σ2 = (v2, l2) then v1 = v2.
Proof. See Appendix A.1.
(cid:3)
5.2 Microinstruction Lifecycle
Figure 2 depicts the microinstruction lifecycle under speculative
execution. Compared to the OoO lifecycle of Section 4.2, states
7
Decoded
Exe
Rbk
Prd
v
Pexe
Rbk
Speculated
Retired
Commiˆed
Ret
Cmt
v
v
v
Ftc
Ret
v
v
Ftc
Predicted
Speculatively fetched
Fetched
v
t ∈ P
v
δ (t )↓ ∧ t < F
v
δ (t )↓ ∧ t ∈ F
v
δ (t )↑ ∧ t < F ∪ C
v
δ (t )↑ ∧ t ∈ F
v
δ (t )↑ ∧ t ∈ C
Figure 2: Speculative semantics: Microinstruction lifecycle
Decoded, Predicted, Speculated, and Speculatively Fetched corre-
spond to state Decoded, state Retired corresponds to Executed, oth-
erwise states Fetched and CommiŠed are the same. As depicted in
the legend, transitions between states set diﬀerent properties of a
microinstruction’s lifecycle, which we will model in the semantics.
State Predicted (doŠed circle) models microinstructions that have
not yet been executed, but whose result values have been predicted.
A Decoded microinstruction can transition to state Predicted by
predicting its result value, thus recording that the value was pre-
dicted and causing the state of the microinstruction to be deﬁned.
A microinstruction that is ready to be executed (in Decoded), pos-
sibly relying on predicted values, can be executed and transition
to state Speculated (dashed circle), recording its dependencies in
the snapshot. Notice that state Speculated models both specula-