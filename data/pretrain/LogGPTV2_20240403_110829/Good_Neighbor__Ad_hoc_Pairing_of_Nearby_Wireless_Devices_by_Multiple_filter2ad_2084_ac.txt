20.49
δ
0.86
0.46
0.52
¯r
-13.77
-16.90
-18.04
δ
0.42
0.44
0.31
10
20
30
Table 1. Measured RSS values under various
distance between two receiving antennas. L
is the distance between two receiving anten-
nas.
The experiment indicates that even when the distance be-
tween the two receiving antennas decreases to 10cm, which
is a reasonable lower bound of the longest dimension of
many handheld devices, the RSS ratio is still large enough
(13.72) to be usable in our scheme.
5 Prototype
We developed a prototype of our device pairing scheme
to evaluate the practicality of our scheme.
5.1 Set up
Sender The sender is an Openmoko Free Runner smart-
phone running Linux. It has a single antenna and a Wi-Fi
module.
Receiver The receiver is a Dell E5400 laptop running a
modiﬁed Fedora Linux kernel version 2.6.29-rc5-wl based
on the wireless-testing tree.
The laptop has an inte-
grated 802.11n Intel Wi-Fi Link 5300 wireless card, and
is equipped with three internal antennas, although our pro-
totype uses only two of these antennas. We marked the lo-
cations of the antennas on the surface of the laptop.
Pairing procedure The sender and receiver share no prior
secret. The receiver continuously runs a pairing server pro-
gram. The user pairs the sender with the receiver via the
following steps:
1. The user places the sender next to the left antenna of
the receiver.
2. The user starts our pairing program on the sender.
Then, the program sends a sequence of packets to the
receiver.
3. After receiving a sufﬁcient number of measurement
packets that satisfy the pairing criteria below (usually
within a few seconds), the receiver notiﬁes the user via
a beep. Then, the user places the sender next to the
right antenna of the receiver.
4. After receiving another sufﬁcient number of measure-
ment packets that satisfy the pairing criteria , the re-
ceiver notiﬁes the user of a successful pairing via mul-
tiple beeps.
Pairing criteria The receiver decides whether the sender
is close by measuring the RSS ratios (i.e., the ratio between
the RSS on the left and right antennas) of the RSSIQuery
packets from the sender. In both Step 3 and 4 above, the
receiver places the packets into a FIFO queue of size 40
and checks if the RSS ratios of all the packets in the queue
satisfy:
• The mean ¯r of the RSS ratios exceeds a threshold (¯r >
rH in Step 3, and ¯r  100cm). Table 2 also shows the maximum mean
RSS ratios of the packets in different distance ranges. When
the sender is in close-range, the maximum mean RSS ratio
is above 15, while this ratio drops to 6.35 and 3.43 when the
sender is in mid-range and long-range, respectively.
5.3 Timing evaluation
We measured the time that it takes the user to complete a
successful device pairing. From the user’s perspective, the
pairing consists of three steps:
0. Move the sender to the left antenna of the receiver.
1. Click a button on the sender to start the pairing, and
wait for the receiver to beep (indicating that the re-
ceiver has received enough measurement packets that
satisfy its criteria).
2. Move the sender to the right antenna of the receiver,
and wait for the receiver to beep multiple times (indi-
cating that the pairing has succeeded).
We did not measure the time for Step 0 because it is irrel-
evant to the design of our protocol. We measured the time
for Steps 1 and 2 shown in Table 3.
The user took an average of 5.29s to complete Step 1. A
large portion of this time (3.67s) is spent on waiting for the
sender to send 15 power query packets. Currently, to send a
Distance
range
Time
for
Ave
Min
Step 1 Max
Ave
Time
for
Min
Step 2 Max
Total
Ave
 100cm
Timeout
Timeout
TImeout
Timeout
Timeout
TImeout
Timeout
Table 3. Authentication Time.
packet at a different power level, our prototype implementa-
tion in the sender needs to execute the iwconﬁg command,
which takes about 200ms each time. To reduce the time
spent on Step 1, we could use more efﬁcient ways to adjust
the power levels of packets, or to ﬁnd the best power level
more efﬁciently than a linear search (e.g., a binary search
between all the power levels). The user took an average of
6.35s to complete Step 2. Compared to Step 1, the variation
in the time for Step 2 is larger because it includes the time
for the user to move the sender from the left antenna to the
right antenna of the receiver. The average time for step 1
and 2 in device paring is 11.64s. This is faster than or com-
parable to most other wireless device pairing schemes[10].
Moreover, this scheme requires no user decision and has a
fail-safe default: if the user fails to follow the simple proce-
dure, the pairing simply fails.
6 Security and usability
6.1 Security
6.1.1 Success probability of random attacks
H
square as
We calculate the probability of successful attack if a
faraway attacker just randomly picks two locations dur-
ing the device pairing. Assume RSS ratio r induced by
the attacker follows Gaussian distributions N(µH, σ2
H) and
N(µL, σ2
L), the means of n RSS ratio ˆµH and ˆµL should fol-
low N(µH, σ2
n ) and N(µL, σ2
n ), respectively. The sample
H and ˆσ2
variances ˆσ2
L have distributions proportional to chi-
σ2
n · χ2(n− 1) and
H
Let the threshold of the mean as µt and that of the vari-
ance as σ2
t , the attacker’s device will be paired only when
ˆµH is larger than its threshold and ˆµL is smaller than its
threshold, and the sample variances ˆσ2
L are smaller
than their threshold. Note that for normal distribution, the
sample mean and sample variance are independent. There-
fore, ˆµH, ˆσ2
L are independent of each other. The
probability of a successful attack is:
n · χ2(n− 1), respectively.
H , ˆµL, and ˆσ2
H and ˆσ2
L
σ2
L
Pa = Pr(ˆµH > µt )· Pr(−ˆµL > µt)· Pr( ˆσ2
H < σ2
t )
· Pr( ˆσ2
L < σ2
t )
σH /√n )· (1− Q(−µt−µL
= Q( µt−µH
σL/√n ))
· γ((n−1)/2,(nσ2
· γ((n−1)/2,(nσ2
Γ((n−1)/2)
Γ((n−1)/2)
t )/(2σ2
H ))
t )/(2σ2
L))
(5)
where Q(x) is the Q-function computing the right-tail prob-
ability for normal random variables, γ(k, x) is the lower in-
complete Gamma function, and Γ(k) is the Gamma func-
tion.
Using the parameters set for our prototype system, the
probability of successful attack is less than 10−15.5
6.1.2 Attacks leveraging multipath effect
In our experiments on the prototype system, the sender
occasionally passed the ﬁrst phase of the pairing scheme
when it was more than 20cm away from either antenna on
the receiver. This indicates that the receiver has a non-
negligible probability of receiving a sufﬁcient number of
packets that have stable and large RSS ratios even when the
sender is not in its close proximity. This is inconsistent with
the result in Section 6.1.1 and is mainly caused by the mul-
tipath effect.
Due to the multipath effect, the received signal can be-
come stronger or weaker if there is a constructive or de-
structive superposition of the signals coming from different
paths, respectively. In an indoor environment, multipath ef-
fect is often caused by reﬂection on the surface of the ﬂoor,
ceiling, wall, furniture, and even people. Using our scheme,
when the sender is paired with a nearby receiver, the multi-
path effect will unlikely affect the RSS values signiﬁcantly
because the sender is very close to the receiver. However, a
faraway attacker could take advantage of the multipath ef-
fect to cause a large RSS ratio measured at the two antennas
on the receiver, therefore breaking our scheme.
We use the following simpliﬁed two-path model to show
how much multi-path effect can affect our scheme. Assume
the signal strength is determined by only two dominating
paths: a straight path from the sender to the receiver, and a
path reﬂected on the ground, as shown in Figure 8. Let HS
be the height of the sending antenna, HR be the height of
the two receiving antennas, L be the distance between two
receiving antennas, LD1 and LD2 be the length of two direct
paths, and LR1 and LR2 be the length of two reﬂect paths. We
also deﬁne Γ as the reﬂection coefﬁcient, which depends on
the polarization of the radio wave and the reﬂection angle.
According to [25], we have:
r = 10log10
(LR1 · cos∆θ1 + ΓLD1)2 + (LR1· sin∆θ1)2
(LR2 · cos∆θ2 + ΓLD2)2 + (LR2· sin∆θ2)2
5We compute the probability in Matlab, which gives answer 0. Since
Matlab supports 10−15 precision, we conclude that the probability is less
than 10−15.
Figure 8. Two paths model
where ∆θ1 and ∆θ2 are phase delays, which are determined
by LR1, LD1 and LR2, LD2 respectively. In theory, it may
be possible for an attacker to choose an appropriate path
lengths and reﬂection angle to manipulate the value of ∆θ
and Γ to make r a large value.
However,
to launch this attack successfully,
the at-
tacker’s sender must be in the line of sight of the receiver,
and the attacker must identify two proper locations and cal-
culate the lengths and reﬂection angles of all transmission
paths to the receiver. This is very challenging, if not infea-
sible, as the attacker would need to measure the locations,
geometries, and surface properties of all the objects in the
environment. Even if this daunting task were feasible, we
can mitigate this attack by incorporating frequency hopping
into our protocol. With frequency hopping, the attacker’s
optimal path lengths in different channels are most likely
different, so it would be very difﬁcult to ﬁnd a path length
that keeps the RSS ratio high in all the channels. Incorpo-
rating frequency hopping in our scheme is straightforward:
instead of using only one channel, S sends RSSIMeasur-
ing packets while cycling through all the channels. How-
ever, it is not easy to implement frequency hopping on the
platform where we implemented our prototype, because it
takes substantial time to switch wireless channels from the
user space. We believe that this limitation can be overcome
by an implementation of frequency hopping in the device
driver or the ﬁrmware.
Nevertheless, we conducted an experiment to test this
idea of frequency hopping. We observed RSS values by
placing the sender randomly at locations that are 2m or 4m
from the receiver. Both the receiver and sender are placed
at a height of 30cm or 1m. The packets are sent via different