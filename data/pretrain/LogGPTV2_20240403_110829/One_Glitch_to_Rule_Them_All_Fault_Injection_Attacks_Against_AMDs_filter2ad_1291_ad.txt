can cause packet collisions if left unattended. To avoid possible
interference with our packet injection, we disable the telemetry
reporting shortly after the SVI2 bus becomes active (A4 in Figure
4).
5.4 Voltage Drop
To lower the voltage level of the AMD-SP, we inject two commands
into the SVI2 bus (B3 and B4 in Figure 4). First, we configure a
low voltage identification (VID) setting, and secondly, we inject the
same VID that was configured before the voltage drop (see 5.3.3).
The voltage set by the first packet is too low for the AMD-SP to
operate correctly and would cause non-recoverable errors, even
if configured for only a short time. However, due to the limited
voltage regulation speed of the VR, we inject the second command
before the configured voltage is reached. This way, we can control
A1A2A3A4B1B2B5delaydurationARK verificationB3B4SVCSVDVSoCCSCSsuccess0 s20 µs3.17 ms20 µs330.43 ms20 µs100 µs331.3 ms20 µsB7B6C1C2Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2882the depth and shape of our voltage drop with only one parameter,
the duration. Another advantage is that the voltage rail reaches its
minimum for only a short moment, which we call the fault time
(B5 in Figure 4). The fault time occurs directly after the second
command injection, which allows us to trigger the fault injection
precisely.
5.4.1 Trigger. As discussed in Section 4.1, counting the number
of active low (negative) CS pulses allows us to determine the time
window for the ARK verification. To more precisely control the
fault time (B5 in Figure 4) within the ARK verification window, we
use a delay parameter, which is the time between the last counted
CS pulse and the fault time. Both timings are implemented on the
Teensy using a busy loop where one iteration corresponds to 12.5 ns.
The complete trigger process proceeds as follows, see Figure 4:
A1 Starting with the boot detection, we count the number of CS
pulses.
B1 The first CS pulse is counted.
B2 After counting the last CS pulse3, we start the busy loop
B3 After (delay − duration) busy loop cycles we inject the first
counter.
SVI2 command.
B4 Duration many busy loop cycles later – exactly delay busy
loop cycles after B2 – we inject the second SVI2 command.
B5 The fault time is precisely determined by the CS pulse count
and delay.
Fault Feedback. We can use the CS line to infer what effect
5.4.2
our voltage drop had on the execution of the AMD-SP. Two different
behaviors can be observed, see Figure 2:
B6 No further accesses to the SPI flash occur.
B7 The AMD-SP continues to load data from the SPI flash.
For our attack firmware image with an invalid ARK, B6 means that
the attack failed. The reason is either that our key was correctly
identified as invalid, or that we caused an unrecoverable fault in
the ROM bootloader’s operation. In this case, the Teensy resets the
target using the ATX reset line. Since the ROM bootloader only
continues to load data from the SPI flash when the loaded key was
accepted as valid, B7 means that our attack succeeded.
5.5 Determining the Attack Parameters
To successfully mount the glitching attack, we first need to de-
termine the glitching parameters: The delay, responsible for the
precise timing of our voltage drop, and the duration, which sets the
depth of the voltage drop (see Figure 4). As a first step, we limit
both parameters to windows containing all sensible values (Sections
5.5.1 and 5.5.2). This is done manually using the serial interface of
the Teensy, which took us around 30 minutes for each CPU. These
windows are then searched and refined using automated attacks
(see Section 5.5.3).
5.5.1 Delay Window. In the beginning, we limit the delay param-
eter such that the fault time always lies in the ARK verification
3To achieve a certain voltage drop depth within the ARK verification window, the first
SVI2 command has to be issued before the last CS pulse (B3 Figure 4). In these cases
we have to decrease the number of CS pulses that we count.
window. This is done by measuring the CS line at fault time for vary-
ing delay parameters and firmware images. With the duration set
to zero and an invalid ARK on the flash image, we can use the last
CS pulse to determine the first delay value in the ARK verification
window (C1 in Figure 4).
Then we flash the original firmware image to the SPI flash. Since
this image’s ARK is valid, our “attack attempts” – with duration set
to zero – will not affect the AMD-SP’s boot process, i.e., the CS line
is pulled low again (C2 in Figure 4). By again measuring the CS line
at fault time, we now find the last delay inside the ARK verification
window. According to our observation, the resulting delay window
is about 2000 parameters (Teensy busy loop cycles) wide.
5.5.2 Duration Window. As a next step, we limit the duration pa-
rameter, i.e., the voltage depth, so that we can search the resulting
parameter space. To do this, we use the already flashed original
firmware image and run our attack with varying duration param-
eters and a delay that is inside the window specified above. For
shorter durations, our attacks will mostly have no effect on the
AMD-SP, but for longer durations, the attacks will mostly cause
unrecoverable faults in the AMD-SP (see Figure 5). Using a binary
search, we can identify the window of transition between these
two extremes.
We observed a higher probability to cause functional faults, i.e.,
faults which alter the AMD-SP’s behavior while still maintaining
an operational state, with duration parameters inside this transition
window. This observation aligns with other works that analyze
voltage faults on ARM processors with respect to the depth and
length of a voltage drop [51].
s
e
l
p
m
a
s
400
200
0
920
930
940
950
duration parameter
no effect
fault
960
970
Figure 5: Attack samples for duration parameters in the tran-
sition window between no visible effect (no effect) and an
unrecoverable fault (fault). The attacks target the original
firmware image on the AMD Epyc 72F3 CPU. The final du-
ration window is marked in black and contains the values
deemed most likely to cause a functional fault by the refine-
ment process.
5.5.3 Refining Parameters. To limit both parameters further, we
repeatedly attempt our attack with randomly selected values of the
duration and delay window. On each CPU we tested, it took us less
than 6 hours to archive a first successful attempt. The parameter
space can now be limited further, e.g., to a window of ±50 delay
parameters and ±10 duration parameters around the successful
attempt’s values. With these smaller windows, we have an increased
chance of achieving successes, which we use to limit the parameter
space further.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2883Total
Succ./Attempts
Success Rate
72F3 (Zen 3)
170/486695
0.035 %
7272 (Zen 2)
17/15459
0.11 %
7281 (Zen 1)
144/110382
0.130 %
endorsement key derivation, we built a payload that extracts the
firmware encryption key. The firmware encryption scheme used in
AMD CPUs is described in detail in the following section.
Final Window
Succ./Attempts
Success Rate
ΔDelay/ΔDur.
6/4653
0.129 %
4/2
6/3467
0.173 %
14/3
36/18309
0.197 %
20/10
Table 3: Attack results per CPU
5.5.4 Results. We summarize the overall results in Table 3, together
with the final parameter windows we used. Our attack gains code
execution reliably with an average waiting time between 13.5 min
(Zen 1) and 46.5 min (Zen 3) for our final parameters. However,
the calculated success rates cannot be translated into a reliable
worst-case time-to-exploit metric since the successful attempts are
not uniformly distributed over time.
5.6 Payloads
In this section, we present the attack payloads we executed lever-
aging the glitching of the AMD-SP’s ROM bootloader. We briefly
describe our approach to re-enable the attacks presented in [15].
For further details regarding these attacks, we refer to the original
paper.
Dumping the ROM bootloader and extracting secrets. To analyze
the endorsement key derivation process, we build a payload that
extracts the ROM bootloader and SRAM contents of all targeted
CPUs. The payload writes the respective components to the SPI
bus, including the VCEK secrets. The CEK secrets were extracted
from the crypto co-processor (CCP) using a similar payload.4 In
Section 7, we use these secrets to derive the CEK and VCEK key of
the exploited CPUs.
SEV Policy Override. In [15], the authors present attacks against
SEV-protected VMs based on firmware issues present in the first
generation of AMD Epyc CPUs (Zen 1). We successfully mounted
these attacks on an AMD Epyc Zen 2 system, running the latest
SEV firmware available from [7]. Similarly to [15], we patched the
SEV firmware to ignore the guest’s policy for the DBG_DECRYPT
command. The target host was booted with a modified PSP OS
firmware, which allowed us to update any SEV firmware signed
with our own key.
AMD-SP Firmware Decryption. Our analysis of the AMD-SP’s
firmware images for AMD Epyc Zen 3 CPUs showed that firmware
components, such as the PSP OS and the SEV firmware, are en-
crypted, see Section 3. In contrast to that, the analyzed AMD Epyc
Zen 2 and Zen 1 images did not contain encrypted firmware images.
For AMD Epyc Zen 3 CPUs, we inferred the encryption mechanism
by analyzing the ROM bootloader extracted from an AMD Epyc Zen
2 CPU. Despite the fact that the Zen 2 firmware components were
not encrypted, the ROM bootloader supports encrypted firmware
files according to our anlysis. To enable the firmware analysis on
AMD Epyc Zen 3 systems and to better understand SEV-SNP’s
4There is no public documentation available for the CCP. However, its functionality is
described in the corresponding Linux kernel driver: [33].
6 FIRMWARE DECRYPTION
The AMD-SP on Epyc Zen 3 CPUs uses AES in cipher block chaining
(CBC) mode to decrypt firmware components stored on the external
SPI flash. Each component is prepended with a 256-byte header
in the SPI flash. The header contains meta-information about the
respective component, such as a component’s size and whether it is
encrypted or not. In case a component is encrypted, the header also
contains the component’s encryption key, denoted as component
key (cK) in the following text, and the initialization vector (IV)
required for the decryption using 𝐴𝐸𝑆-𝐶𝐵𝐶. To protect the cK, it
is encrypted using AES in electronic codebook (ECB) mode with a
key stored within the AMD-SP’s filesystem on the SPI flash. This
key is referred to as Intermediate Key Encryption Key (iKEK) [50].
Our analysis of the ROM bootloader of AMD Epyc Zen 2 CPUs
revealed that the iKEK is encrypted, and the corresponding key, de-
noted as root key (rK) in the following text, is held in non-readable
memory areas of the CCP. There is no public documentation avail-
able for the CCP. However, its functionality is described in the
corresponding Linux kernel driver, see [33].
In case a firmware component is encrypted, the AMD-SP on
AMD Epyc CPUs performs the following steps:
(1) Load the iKEK from the SPI flash
(2) Decrypt the iKEK using the rK:
→ 𝑖𝐾𝐸𝐾′ = 𝐴𝐸𝑆-𝐸𝐶𝐵(𝑟𝐾, 𝑖𝐾𝐸𝐾)
→ 𝑐𝐾′ = 𝐴𝐸𝑆-𝐸𝐶𝐵(𝑖𝐾𝐸𝐾′, 𝑐𝐾)
→ 𝑝𝑙𝑎𝑖𝑛𝑡𝑒𝑥𝑡 = 𝐴𝐸𝑆-𝐶𝐵𝐶(𝑐𝐾′, 𝐼𝑉 , 𝑑𝑎𝑡𝑎)
(3) Decrypt the cK using the decrypted iKEK:
(4) Decrypt the component using the decrypted cK:
Using the glitch attack, we verified that the rK is not directly
accessible. To analyze the firmware components on AMD Epyc Zen
3 CPUs, we created a payload that performs step 2, i.e., the iKEK
decryption. With the decrypted iKEK (𝑖𝐾𝐸𝐾′), we could decrypt
the PSP OS and the SEV firmware to enable further analysis of the
VCEK key derivation process, which is presented in the following
section.
7 CEK & VCEK DERIVATION
Through the attacks presented in Section 5.6, we have access to
the firmware components that implement the key derivation for
SEV’s endorsement keys and the corresponding secrets. The CEK
and VCEK are fundamental for the security properties of SEV (see
Section 3.1.2). Both are derived from secret values burned into
the fuses of the AMD SoC. Each AMD SoC has a unique 256-bit
identifier (ID) that can be used to retrieve certificates for the CEK
and VCEK keys from AMD [2, 4].
7.1 Key Derivation Algorithms
In this section we present our analysis of the derivation algorithms
for the CEK and the VCEK.
7.1.1 CEK Derivation. The CEK is generated from a 32-byte secret.
This secret is expanded to 56 pseudorandom bytes using NIST’s
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2884Key Derivation Function in Counter Mode (KDF), specified in [16],
with HMAC-SHA256 as Pseudorandom Function. The KDFs inputs
for the CEK derivation are an empty context, the label “sev-chip-
endorsement-key” and, as key, the SHA256 digest of the secret.
These 56 pseudorandom bytes can then be converted into an ECDSA
key on the secp384r1 curve [13]. The algorithm used for this is
NIST’s Key Pair Generation Using Extra Random Bits, specified in [9].
ID Derivation. The ID of the AMD SoC is generated from
7.1.2
the same secret as the CEK. This secret is interpreted as the private
part of an ECDSA key on the elliptic curve secp256k1, specified
in [13]. The public part of this key, encoded as the concatenation