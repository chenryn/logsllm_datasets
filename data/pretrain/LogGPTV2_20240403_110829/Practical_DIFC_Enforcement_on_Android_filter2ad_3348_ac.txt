component’s processName). That is, Weir ensures that
components that were meant to run together (i.e., as-
signed the same processName), still run together . We
now describe our approach, followed by an example.
Our approach: On every call, Weir retrieves the label of
the caller (i.e., the callerLabel). Weir then checks if an
instance of the desired component is running in a process
whose label matches callerLabel. If one is found, the call
is delivered to the matching instance. If not, Weir creates
a new instance of the called component.
When the target component instance is assigned, Weir
1124  25th USENIX Security Symposium 
USENIX Association
"procActivity" ;
label = {}
A
startActivity
label={}
"procService"; 
label = {}
C
B
startService
label={}
startActivity
label={}
(a) Step 1: A is called from an empty label.
"procActivity" ;
label = {}
A
startActivity
label={}
"procActivity_0" ;
label = {L1}
A
startActivity
label={L1}
startActivity
label={}
startActivity
label={L1}
B
B
"procService"; 
label = {}
C
startService
label={}
"procService_0"; 
label = {L1}
startService
label={L1}
C
(b) Step 2: A is called from a label = {L1}.
"procActivity" ;
label = {}
A
startActivity
label={}
"procActivity_0" ;
label = {L1}
A
startActivity
label={L1}
startActivity
label={}
startActivity
label={L1}
B
B
"procService_1"; 
label = {L2}
bindService
label={L2}
C
"procService"; 
label = {}
C
startService
label={}
"procService_0"; 
label = {L1}
startService
label={L1}
C
(c) Step 3: C is called from a label = {L2}.
Figure 3: Weir’s lazy polyinstantiation of three app com-
ponents; activities A and B, and a service C.
must ﬁnd a process to execute it. If the process associ-
ated with this component (i.e., processName) has a dif-
ferent label, Weir cannot execute the new instance in it,
and has two options: a) assign a polyinstantiated process
that is associated with processName and has the label
callerLabel or 2) create a new process associated with
the processName with label callerLabel. As it is evident
based on the ﬁrst option, Weir keeps track of a process-
Name and all its instances created for various secrecy la-
bels. Weir can then reuse a previously instantiated pro-
cess that is associated with the original processName and
already has the required label (i.e., lazy polyinstantia-
tion). Additionally, Weir can ensure adherence to the
developer’s process assignment; i.e., that component in-
stances only execute in the process associated with their
processName.
If a matching process is not available,
Weir creates a new process for callerLabel, and internally
maintains its association with the original processName.
Example: Consider an app with three components, ac-
tivities A and B, and a service C. The developer sets the
processName for A and B to be “procActivity”, whereas
the processName for C is set to “procService”. This
means that A and B are expected to run in the same pro-
cess, while C runs in a separate process. The app is pro-
grammed such that when A is started, it starts B, follow-
ing which B starts C. Using Figure 3, we describe Weir’s
instantiation of A, B, and C and their processes.
In Step 1 (Figure 3a), A is ﬁrst called by an unlabeled
caller; i.e., the callerLabel is empty. A new instance of A
is created, and a new process by the name “procActivity”
is started for it. Then, A calls B. The label of A0s process
is empty, so B is also instantiated with an empty label, in
the matching process, i.e., “procActivity”. B then calls C,
which is instantiated in the new process “procService”.
In the Step 2 (Figure 3b), A is called from a caller with
callerLabel = {L1}. Weir cannot deliver the call to the
existing instance of A, as its process has a mismatching
label (i.e., callerLabel = {L1} 6= {}). Thus, Weir creates
a new instance of A for this call. As there are no pro-
cesses associated with “procActivity” and with the label
{L1}, Weir also allocates a new process “procActivity 0”
to host this instance. Thus, for this call, a new instance
of A is started in a new process “procActivity 0”, whose
label is set to {L1}. When this instance of A calls B, the
call is treated as a call to B with callerLabel = {L1}, the
caller being A0s new instance with label {L1}. As Weir
keeps records of all the processes created for polyinstan-
tiation, it starts a new instance of B in the process that
is associated with B’s original process “procActivity”,
and has a matching label {L1}, i.e., “procActivity 0”.
Reusing an existing process instance is an example of
“lazy” polyinstantiation. When this instance of B starts
C, Weir creates a new instance of C due to mismatching
labels, in a new process “procService 0” with label {L1}.
In Step 3 (Figure 3c), bindService is called on C with
the label callerLabel = {L2}. Since the caller’s label
{L2} mismatches with the two existing instances of C
that are running with labels {} and {L1}, a new instance
of C is created. As there are no processes associated with
“procService” that have a label matching {L2}, a new
process “procService 1” is created to host the new in-
stance. Note that all of these instances and processes
exist simultaneously, as shown in the ﬁgures.
If C is
called again with the label callerLabel = {L2}, Weir will
not have to create a new instance, and the call will be
delivered to the existing instance of C running in pro-
cess “procService 1” with the matching label {L2} (i.e.,
“lazy” polyinstantiation).
Weir’s approach maintains context-based separation in
memory (G1), and also ensures that components conﬁg-
ured to run in the same process still run together; i.e.,
our approach is transparent to the application, satisfying
goal G3. For example, instances of A and B exist to-
gether, both in the labeled as well as the unlabeled con-
texts. Weir supports all Android components declared
in the application manifest, i.e., activities, services, con-
tent providers and broadcast receivers. An exception is
broadcast receivers registered at runtime, which are in-
stantiated at registration in the secrecy context of the reg-
istering process, and hence not subject to further instanti-
ation. Any future broadcasts to such receivers are treated
as direct calls subject to strict DIFC label checks.
USENIX Association  
25th USENIX Security Symposium  1125
4.3 Polyinstantiation of Storage
To prevent restrictive labeling of shared storage by
processes running in sensitive contexts, Weir extends
context-based separation to the storage as well (G2).
Weir achieves this separation without denying access to
instances in sensitive secrecy contexts (G3).
Our approach: Weir separates shared state in the inter-
nal and external storage using ﬁle-system polyinstanti-
ation via a layered ﬁle system approach [29]. Our ap-
proach is similar to Solaris Containers [22], and more re-
cently, Docker [24]. Context-sensitive storage separation
has also been used previously in DIFC, for known persis-
tent data objects. For example, in their DIFC system for
the Chromium Web browser, Bauer et al. create context-
speciﬁc copies of bookmarks to prevent a restrictive label
from making bookmarks unusable [5].
In Weir, every secrecy context receives its own copy-
on-write ﬁle system layer. Processes running in a par-
ticular secrecy context have the same view of the ﬁle
system, which may be different from those running in
other contexts. All ﬁle operations are performed on the
context-speciﬁc layer attached to a process, which relays
them to the underlying ﬁle system (i.e., the default layer).
Unlabeled processes are assigned the default layer.
For simplicity, new layers are always created from
the default layer, and never from existing labeled layers.
That is, for any layer with label L, the copy-on-write al-
ways occurs from the default layer (with label {}), and
not another lower layer (say label L1), even if L1 is lower
than L (i.e., L1 ✓ L). An alternate design choice of using
a non-default lower layer for copy-on-write could lead
to conﬂicts due to incompatible copies of data at differ-
ent, but similarly labeled lower layers. For example, two
labels L2 and L3 might be at the same level below L in
the DIFC lattice, but may have different copies of the
same ﬁle. For resolving such conﬂicts, the system may
have to either involve the user or the application. The
backwards compatibility and usability effects of choos-
ing a lower layer need further exploration, although it
may be a more ﬂexible option. Hence, our design sim-
pliﬁes the potential choice between contending layers by
always choosing to copy from the default layer.
For efﬁciency, a layer only stores the changes made
to the default layer by processes in the layer’s secrecy
context (i.e., copy-on-write). When a ﬁle present in the
default layer is ﬁrst written by a process attached to a
non-default layer, the ﬁle is ﬁrst copied to the non-default
layer and then modiﬁed. Future accesses for the ﬁle from
that context are directed to its own copy. When a process
attached to a non-default layer tries to read a ﬁle that
has never been modiﬁed in the calling process’s layer, it
reads the original ﬁle on the default layer. Weir’s storage
approach is an extension of its lazy polyinstantiation, i.e.,
"procService"; 
label = {}
"procService_0"; 
label = {L1}
C
read/write
C
read
"procService"; 
label = {}
C
read/write
"procService_0"; 
label = {L1}
C
write
Shared
Prefs
Layer (L1)
Shared
Prefs
copy
Shared
Prefs
Layer (L1)
(a) Labeled instance reads.
(b) Labeled instance writes.
Figure 4: Weir’s storage polyinstantiation using layers.
new layers are created only when a process with a pre-
viously unknown secrecy context is initialized. Applica-
tions transparently access storage using any ﬁle system
API, and Weir directs the accesses to the correct ﬁles.
Weir stores the ﬁles copied to layers in layer-speciﬁc
copy-on-write directories. While creating such directo-
ries, Weir accounts for the security and availability re-
quirements of applications and users. For application-
speciﬁc internal storage, copy-on-write directories are
created in an area that is accessible only to instances of
the particular application. For public external storage,
Weir creates common label-speciﬁc copy-on-write direc-
tories in an area accessible to all apps. This approach
ensures that when an application is uninstalled, its data
on external storage is still available to the user.
Example: Figure 4 shows two instances of the compo-
nent C, one of which is running in the unlabeled secrecy
context (i.e., label {}), while the other has a label {L1}.
Weir sets up a ﬁle system layer, i.e., Layer (L1), to medi-
ate all ﬁle accesses by the labeled instance. Layer (L1) is
only attached to processes with label {L1}.
As seen in Figure 4a, initially, both the unlabeled and
labeled instances of C read from the shared preferences
ﬁle (i.e., SharedPrefs). That is, Layer (L1) relays all the
read requests by the labeled instance of C for unmodiﬁed
SharedPrefs ﬁle to the default storage. Once the labeled
instance of C attempts to write to the SharedPrefs ﬁle,
Weir copies it to Layer (L1). This copy is used for all
future read or write accesses by instances with label (L1).
Security of copy-on-write directories: Weir ensures the
security of the layered directories through a combination
of ﬁle labeling and Linux permissions. File labels are ini-
tialized when ﬁrst written, to the writing process’s label.
Weir uses strict DIFC label checks for all successive ﬁle
accesses. Further, Weir prevents the implicit ﬂows due
to the presence or number (i.e., count) of such copy-on-
write directories. To address ﬂows through the presence
of speciﬁc copy-on-write directories, Weir uses random
directory names known only to the system. To prevent
ﬂows that make use of the number of such directories,
Weir creates the copy-on-write directories inside a parent
directory owned by Weir. The Linux permissions of this
parent directory are set to deny the read operation on it,
and hence cannot be used to list or count subdirectories.
1126  25th USENIX Security Symposium 
USENIX Association
Together with the polyinstantiation in memory, Weir’s
approach enables transparent separation of different se-
crecy contexts without modifying legacy apps.
4.4 Label Changes and Binder checks
A component instance’s label is implicitly set when it is
instantiated. Similarly, a ﬁle’s label is initialized when it
is ﬁrst written to. For all successive accesses (i.e., direct
Binder IPC and ﬁle reads/writes respectively), Weir does
not apply ﬂoating labels, but performs a strict DIFC label
check (i.e., data may not ﬂow to a “lower” label). Hence,
any label changes after initialization can only be explicit.
An application aware of Weir may change the label of
its instances by raising it (to read secret data), or low-
ering it (to declassify data), provided the change is le-