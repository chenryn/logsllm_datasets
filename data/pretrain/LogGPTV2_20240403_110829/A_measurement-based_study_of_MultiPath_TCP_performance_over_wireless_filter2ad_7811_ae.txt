C
1
Out of order delay with log scale (milliseconds)
500 1000
50 100
5
10
A
T
&
T
+
W
F
i
i
V
e
r
i
z
o
n
+
W
i
F
i
S
p
r
i
n
t
+
W
i
F
i
Table 6: Statistics on MPTCP RTT (ﬂow mean
±standard errors) and out-of-order (OFO) delay
(connection mean ±standard errors) over diﬀerent
carriers.
File size
4 MB
8 MB
16 MB
32 MB
RTT(ms)
AT&T
Verizon
Sprint
WiFi
110.0±6.7
228.0±26.9
202.9±14.4
102.0±6.4
399.2±46.1
262.5±24.6
114.1±7.5
360.4±44.3
480.4±40.6
99.6±6.5
296.1±31.7
346.2±28.1
56.2±6.7
43.4±6.4
29.4±7.5
30.0±6.5
OFO(ms)
AT&T
Verizon
Sprint
30.9±3.2
36.7±5.6
91.3±12.6
26.8±4.0
67.7±11.7
126.9±29.9
16.7±1.4
61.3±12.9
301.7±44.3
13.1±1.6
50.2±8.9
204.5±29.8
Figure 13: Out-of-order delay distributions of
MPTCP connections using WiFi and one of the
three cellular paths.
ing packets from the slow path (in this case, the cellular
network).
MPTCP with Sprint 3G exhibits a diﬀerent pattern. 75%
of the packets are out-of-order when they arrive at the re-
ceive buﬀer. Note that the out-of-order delay might not be
very important for user’s Web browsing, but it is signiﬁcant
in the context of real-time traﬃc. For example, in Face-
time or Skype, the maximum tolerable end-to-end latency
is considered to be about 150 ms (one-way network delay
plus the out-of-order delay). Here, we see more than 20%
of the packets have out-of-order delay larger than 150 ms,
even without including the one-way network delay. That is,
given that Sprint 3G’s average RTT is about 200 ms, if we
consider the one-way delay to be half of the RTT, its overall
end-to-end delay (prior to be available to associated appli-
cation) is (200/2)+100 = 200 ms, which is much larger than
the duration that most modern real time applications can
tolerate.
6. DISCUSSION
As mobile devices and smart phones are now equipped
with two interfaces (WiFi and 3G/4G), they provide nat-
ural platforms on which to use MPTCP. We have shown
how applicable MPTCP is for mobile devices where multi-
ple paths are available. We demonstrated the performance
of MPTCP on ﬁle transfers of small and large ﬂows, from 8
KB to 32 MB.
Web traﬃc contributes a large fraction of today’s Internet
traﬃc [4, 20], and cellular networks have also experienced
tremendous HTTP traﬃc growth from mobile devices [5].
Although it has been reported that most Web traﬃc to mo-
bile devices are ﬂows smaller than 1 MB to 2 MB [6], online
video streaming contributes the majority of the traﬃc to
mobile devices [5], which has long been thought of as down-
loading a large single object from the server.
A previous study [27] shows that, for modern online video
streaming applications, such as Youtube or Netﬂix, trans-
fers usually begin with a prefetching/buﬀering phase con-
sisting of a large data download, followed by a sequence of
periodic smaller data downloads. Table 7 summarizes the
measurements we performed on two popular mobile devices
when playing Netﬂix movies, whereas Youtube in general
prefetches less aggressively by 10MB to 15MB and transfers
blocks periodically of size 64 KB and 512 KB.
Table 7: Summary of Netﬂix video streaming
Prefetch (MB) Block (MB) Period (sec)
Android
iPad
40·6±0.9
15·0±2.6
5·2±0.2
1·8±0.5
72·0±10.1
10·2±2.7
Our MPTCP measurements shed light on how MPTCP
can be utilized not only for Web browsing, but also for
online video streaming. We have demonstrated the utility
of MPTCP for conventional Web object downloads by our
small ﬂow measurements. We show that small ﬂows beneﬁt
from using MPTCP with multiple slow starts and by using
multiple ﬂows. When the ﬁle size is really small, say 8KB or
16KB, a fewer than a dozen of packets are required, which
can be easily transmitted through the ﬁrst ﬂow within one
or two RTTs. In this case, MPTCP behaves like single-path
TCP and does not harm other TCP users.
In the future, when online video streaming servers are
MPTCP-capable, our measurements provide some insights
for understanding how well the long prefetching process and
the short periodic transfers can be achieved. Furthermore,
it can greatly reduce the download time without having the
viewers waiting for too long and breaking the connection,
even though they are mobile.
In the context of mobility, when using single-path TCP,
users move from one access point to another, changing their
IP address and forcing the on-going connections to be either
stalled or reset. In addition, all the previously downloaded
data in the stalled connections not yet delivered to the ap-
plication would be wasted. In contrast, MPTCP not only
466leverages multiple paths simultaneously and performs traﬃc
oﬄoading on the ﬂy. It also provides robust data transport
in a dynamically changing environment and can support mo-
bility without wasting bandwidth in reset connections.
An alternative to MPTCP is to identify the best network
among all available ones, and maintain a single ﬂow over
that network without worrying switching among them. We
argue against this option because it could be very costly or
almost impossible to decide which network is the real win-
ning network as it depends on the loss rates and RTTs over
each path, as well as the ﬁle sizes. Most of this informa-
tion is not available a priori at the client, and the loss rates
and RTTs can also vary over time. MPTCP, on the other
hand, has been shown to be responsive to changes in the net-
works by performing congestion balancing across diﬀerent
paths/networks [19, 32] and can use the best path without
any of this information in advance.
Finally, as one beneﬁts from using MPTCP by utilizing
an additional interface, a natural question is energy con-
sumption. By adding another cellular path to an MPTCP
connection, there will be an additional energy cost for acti-
vating and using the antenna. We have ported the current
Linux MPTCP kernel to Android phones so as to better
understand the relationship between the desired MPTCP
performance gain and the additional energy cost. We leave
this as future work.
7. RELATED WORK
MPTCP is a set of extensions to regular TCP, which al-
lows users to spread their traﬃc across potentially disjoint
paths [8]. The general design of MPTCP has been inspired
by the early work of Han et al. [10] and Kelly & Voice [16]
that developed theoretically grounded controllers for a mul-
tipath transport protocol. Numerous studies have recently
been published that discuss performance issues with current
MPTCP implementations. These studies have resulted in a
number of changes in the congestion controller [14, 19, 32] in
an attempt to provide better fairness and throughput.
Although MPTCP is being standardized by IETF, little
is understood about how well it performs in dynamic en-
vironments such as wireless networks. Raiciu et al. [23, 32]
showed that MPTCP outperforms standard TCP when path
diversity is available in a data center network as well as in
very simple wireless settings. Paasch et al. [22] studied mo-
bile/WiFi handover performance with MPTCP. The authors
investigated the impact of handover on MPTCP connections
using diﬀerent modes such as full-MPTCP mode (where all
potential subﬂows are used to transmit packets) and backup
mode (where only a subset of subﬂows are used). They
showed that MPTCP can utilize other available subﬂows
when WiFi is disconnected but did not explore how quickly
MPTCP can re-use re-established WiFi. In [25], Raiciu et
al. also studied mobility with MPTCP. They examined a
mobile MPTCP architecture consisting of a mobile host, an
optional MPTCP proxy, and a remote host. While it shows
MPTCP outperforms standard TCP in a mobile scenario,
it does not examine full end-to-end MPTCP or the delayed
re-use problem.
All these studies have ignored the eﬀect of multi-path
on ﬁnite size ﬂows. Moreover, they have studied the per-
formance of MPTCP through analysis, by simulations, or
by measurement in environments where all the traﬃc is
well controlled.
In contrast, we study the performance of
MPTCP in the wild, with real wireless settings and back-
ground traﬃc, and focuses on ﬁnite size data objects that
better represent real world traﬃc.
8. SUMMARY AND CONCLUSION
In this paper, we reported latency measurements made
for diﬀerent ﬁle sizes using multi-path over WiFi and one
of three diﬀerent cellular providers, and compared them to
the latencies using only one of either the WiFi or cellular
provider. Two of the providers use LTE, and for these we
observed the latencies are smaller using them exclusively ex-
cept for very small ﬁles. The third provider uses a CDMA-
based 3G technology and we ﬁnd that using WiFi signif-
icantly reduces download latency. However, in all cases,
MPTCP generates latencies that are comparable to or nearly
comparable to the smallest latency produced by either WiFi
or cellular. We also studied how latencies are aﬀected by
load on the WiFi path, the congestion controller design in
MPTCP, the number of paths, and whether data ﬂows are
started simultaneously or in a staggered manner (as stipu-
lated by MPTCP). In all, we conclude from our results that
MPTCP provides a robust data transport and reduces the
variability in download latencies.
9. ACKNOWLEDGEMENTS
This research was sponsored by US Army Research labo-
ratory and the UK Ministry of Defense under Agreement
Number W911NF-06-3-0001. The views and conclusions
contained in this document are those of the authors and
should not be interpreted as representing the oﬃcial poli-
cies, either expressed or implied, of the US Army Research
Laboratory, the U.S. Government, the UK Ministry of De-
fense, or the UK Government. The US and UK Govern-
ments are authorized to reproduce and distribute reprints
for Government purposes notwithstanding any copyright no-
tation hereon. This material is also based upon work sup-
ported by the National Science Foundation under Grant No.
CNS-1040781 and was supported in part by the EU project
CHANGE (FP7-ICT-257422).
10. REFERENCES
[1] M. Allman. Comments on buﬀerbloat. ACM
SIGCOMM Computer Communication Review,
43(1):30–37, 2012.
[2] M. Allman, V. Paxson, and E. Blanton. RFC 5681:
TCP congestion control, 2009.
[3] M. C. Chan and R. Ramjee. TCP/IP performance
over 3G wireless links with rate and delay variation.
Wireless Networks, 11(1-2):81–97, 2005.
[4] J. Erman, A. Gerber, M. T. Hajiaghayi, D. Pei, and
O. Spatscheck. Network-aware forward caching. In
Proceedings of the 18th International Conference on
World Wide Web (WWW), 2009.
[5] J. Erman, A. Gerber, K. Ramadrishnan, S. Sen, and
O. Spatscheck. Over the top video: the gorilla in
cellular networks. In Proceedings of the 2011 ACM
SIGCOMM conference on Internet Measurement
Conference (IMC), 2011.
[6] H. Falaki, D. Lymberopoulos, R. Mahajan,
S. Kandula, and D. Estrin. A ﬁrst look at traﬃc on
smartphones. In Proceedings of the 10th ACM
467SIGCOMM conference on Internet Measurement
Conference (IMC), 2010.
[7] S. Floyd, J. Mahdavi, M. Mathis, and M. Podolsky.
RFC 2883: An extension to the selective
acknowledgement (SACK) option for TCP, 2000.
[20] G. Maier, A. Feldmann, V. Paxson, and M. Allman.
On dominant characteristics of residential broadband
Internet traﬃc. In Proceedings of the 9th ACM
SIGCOMM conference on Internet Measurement
Conference (IMC), 2009.
[8] A. Ford, C. Raiciu, M. Handley, and O. Bonaventure.
[21] MultiPath TCP Linux kernel implementation.
RFC 6824: TCP extensions for multipath operation
with multiple addresses, 2013.
[9] J. Gettys and K. Nichols. Buﬀerbloat: Dark buﬀers in
the Internet. Communications of the ACM,
55(1):57–65, 2012.
[10] H. Han, S. Shakkottai, C. V. Hollot, R. Srikant, and
D. Towsley. Multi-path TCP: A joint congestion
control and routing scheme to exploit path diversity in
the Internet. IEEE/ACM Transactions on Networking,
14:1260–1271, December 2006.
[11] J. Huang, Q. Feng, A. Gerber, Z. M. Mao, S. Sen, and
O. Spatscheck. A close examination of performance
and power characteristics of 4G LTE networks. In
Proceedings of the 8th International Conference on
Mobile Systems, Applications, and Services (MobiSys),
2012.
[12] J. Huang, Q. Xu, B. Tiwana, Z. M. Mao, M. Zhang,
and P. Bahl. Anatomizing application performance
diﬀerences on smartphones. In Proceedings of the 8th
international Conference on Mobile Systems,
Applications, and Services (MobiSys), 2010.
[13] P. Hurtig and A. Brunstrom. Enhanced metric caching
for short TCP ﬂows. In Proceedings of IEEE
International Conference on Communications (ICC),
2012.
http://mptcp.info.ucl.ac.be/.
[22] C. Paasch, G. Detal, F. Duchene, C. Raiciu, and
O. Bonaventure. Exploring mobile/WiFi handover
with multipath TCP. In Proceedings of ACM
SIGCOMM Workshop on Cellular Networks (CellNet),
2012.
[23] C. Raiciu, S. Barre, C. Pluntke, A. Greenhalgh,
D. Wischik, and M. Handley. Improving datacenter
performance and robustness with multipath TCP. In
ACM SIGCOMM Computer Communication Review,
volume 41, pages 266–277, 2011.
[24] C. Raiciu, M. Handly, and D. Wischik. RFC 6356:
Coupled congestion control for multipath transport
protocols, 2011.
[25] C. Raiciu, D. Niculescu, M. Bagnulo, and M. J.
Handley. Opportunistic mobility with multipath TCP.
In Proceedings of the 6th ACM Workshop on Mobility
in the Evolving Internet Architecture (MobiArch),
2011.
[26] C. Raiciu, C. Paasch, S. Barre, A. Ford, M. Honda,
F. Duchene, O. Bonaventure, and M. Handley. How
hard can it be? Designing and implementing a
deployable multipath TCP. In Proceedings of the 9th
USENIX Conference on Networked Systems Design
and Implementation (NSDI), 2012.
[14] B. Jiang, Y. Cai, and D. Towsley. On the resource
[27] A. Rao, A. Legout, Y.-s. Lim, D. Towsley, C. Barakat,
utilization and traﬃc distribution of multipath
transmission control. Perform. Eval.,
68(11):1175–1192, Nov. 2011.
[15] H. Jiang, Y. Wang, K. Lee, and I. Rhee. Tackling
buﬀerbloat in 3G/4G networks. In Proceedings of the
2012 ACM SIGCOMM conference on Internet
Measurement Conference (IMC), 2012.
[16] F. Kelly and T. Voice. Stability of end-to-end
algorithms for joint routing and rate control.
SIGCOMM Computer Communications Review,
35(2):5–12, Apr. 2005.
[17] F. P. Kelly, A. K. Maulloo, and D. K. Tan. Rate
control for communication networks: shadow prices,
proportional fairness and stability. Journal of the
Operational Research society, 49(3):237–252, 1998.
[18] P. Key, L. Massouli´e, and D. Towsley. Combining
multipath routing and congestion control for
robustness. In Proceedings of the 40th IEEE
Conference on Information Sciences and Systems
(CISS), 2006.
[19] R. Khalili, N. Gast, M. Popovic, U. Upadhyay, and
J.-Y. Le Boudec. MPTCP is not pareto-optimal:
Performance issues and a possible solution. In
Proceedings of the 8th International Conference on
Emerging Networking Experiments and Technologies
(CoNEXT), 2012.
and W. Dabbous. Network characteristics of video
streaming traﬃc. In Proceedings of the 7th Conference
on Emerging Networking Experiments and
Technologies (CoNEXT), 2011.
[28] P. Sarolahti and A. Kuznetsov. Congestion control in
Linux TCP. In Proceedings of the USENIX Annual
Technical Conference (ATC), 2002.
[29] V. Shrivastava, S. Rayanchu, J. Yoonj, and
S. Banerjee. 802.11n under the microscope. In
Proceedings of the 8th ACM SIGCOMM conference on
Internet Measurement Conference (IMC), 2008.
[30] tcpdump. http://www.tcpdump.org.
[31] tcptrace. http://www.tcptrace.org.
[32] D. Wischik, C. Raiciu, A. Greenhalgh, and
M. Handley. Design, implementation and evaluation of
congestion control for multipath TCP. In Proceedings
of the 8th USENIX conference on Networked Systems
Design and Implementation (NSDI), 2011.
468