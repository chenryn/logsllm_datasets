zombiehelp54
发现 rt 参数以及其值之后，它也注意到了，参数一户在所有 JSON 响应中都返回。不幸的
是，这并没有什么帮助，因为 CORS 保护了 Badoo，攻击者无法读取这些响应，所以它继续
挖掘。
最终，文件 包含了 值。更
https://eu1.badoo.com/worker-scope/chrome-service-worker.js rt
好的是，这个文件可以由攻击者任意读取，而不需要受害者做什么，除了浏览这个恶意页
面。这里是它提供的代码。
26
八、跨站请求伪造
Badoo account take over
本质上，当受害者加载此页面时，它会调用 Badoo 的脚本，为用户获取 rt 参数，之后代表
受害者进行调用，这里，它将受害者的账户链接到了攻击者的，本上上完成了账户的控制。
重要结论
无风不起浪。这里，攻击者注意到了 rt 参数在不同位置返回，特别是 JSON 响应，因
此，它正确猜测了，它可能出现在一些可以利用的地方，这里是 JS 文件。
继续干吧，如果你觉得一些东西可能会发生，一定要继续挖掘。当你访问目标站点或应
用时，使用 Burp 检查所有被调用的资源。
总结
CSRF 表示另一个攻击向量，并且可能在受害者不知道，或者不主动执行操作的情况下发
生。CSRF 漏洞的发现可能需要一些机智，同样，也需要测试任何东西的渴望。
通常，如果站点执行 POST 请求，Web 表单都统一由应用框架保护，例如 Rails，但是 API
又是另外一个事情。例如， Shopify 使用了 RoR 编写，它对所有表单默认提供了 CSRF 保护
（当然也可以关掉）。但是，显而易见，这对于使用框架创建的 API 不一定成立。最后，一
定要观察任何通过 GET 请求执行的，修改服务器数据的调用（例如删除操作）。
27
九、应用逻辑漏洞
九、应用逻辑漏洞
作者：Peter Yaworski
译者：飞龙
协议：CC BY-NC-SA 4.0
应用逻辑漏洞不同于其他我们讨论过的类型。虽然 HTML 注入、HTML 参数污染和 XSS 都涉
及到提交一些类型的潜在恶意输入，应用落地及漏洞实际上涉及到操纵场景和利用 Web APP
代码中的 Bug。
这一类型攻击的一个值得注意的例子是 Egor Homakov 对 Github 的渗透，Github 使用 RoR
编写。如果你不熟悉 Rails，他是一个非常流行的 Web 框架，在开发 Web 站点时，它可以处
理很多繁杂的东西。
在 2012 年 3 月，Egor 通知了 Rails 社区，通常，Rails 会接受所有提交给它的参数，并使用
这些值来更新数据库记录（取决于开发者的实现。Rails 核心开发者的想法是，使用 Rails 的
Web 开发者应该负责填补它们的安全间隙，并定义那个值能够由用户提交来更新记录。这个
行为已经在社区内人人皆知了，但是 Github 上的线程展示了很少的人能够鉴别出来它带来的
风险（ ）。
https://github.com/rails/rails/issues/5228
当核心开发者不同意他的时候，Egor 继续利用 Github 上的认证漏洞，通过猜测和提交参数
值，它包含创建日期（如果你熟悉 Rails 并且知道多数数据库记录包含创建和更新日期列，它
就不太困难）。因此，它在 Github 上传了一个票据，年份是未来的某个日期。它也设法更新
SHH 访问密钥，这可以使他访问 Github 官方的代码仓库。
之前提到了，这个渗透通过 Github 后端代码实现，它并没有合理验证 Egor 所做的事情，这
在随后可用于更新数据库记录。这里，Egor 发现了叫做大量赋值漏洞的东西。
应用逻辑漏洞，即发现前面讨论的这种类型的攻击，更加有技巧性，因为它们依赖代码判定
的创造性思维，并且并不仅仅是提交潜在的恶意代码，开发者没有转义它。（不要尝试在这
里简化其它类型的漏洞，一些 XSS 攻击也很复杂！）
使用 Github 的例子，Egor 知道了系统基于 Rails 以及 Rails 如何处理用户输入。在其他例子
中，它涉及直接编程调用 API 来测试应用的行为，就像 Shopify 的管理员权限绕过那样。或
者，它涉及重复使用来自认证 API 调用的返回值，来进行后续的API 调用，本不应该允许你
这么做。
示例
28
九、应用逻辑漏洞
1. Shopify 管理员权限绕过
难度：低
URL：
shop.myshopify.com/admin/mobile_devices.json
报告链接：
https://hackerone.com/reports/100938
报告日期：2015.11.22
奖金：$500
描述：
Shopify 是一个巨大并健壮的平台，它包含 Web UI 以及受支持的 API。这个例子中，API 不
验证一些权限，而 Web UI 明显会这么做。因此，商店的管理员，它们不被允许接受邮件提
醒，可以通过操作 API 终端来绕过这个安全设置，在它们的 Apple 设备中收到提醒。
根据报告，黑客只需要：
使用完全访问权限的账号登录 Shopify 移动应用
拦截 的请求
POST /admin/mobile_devices.json
移除该账号的所有权限
移除添加的移动端提醒
重放 的请求
POST /admin/mobile_devices.json
这样做之后，用户可以接收到所有商店处的订单的移动端提醒，因此忽略了商店配置的安全
设置。
重要结论
这里有两个重要结论。首先，并不是所有东西都涉及代码注入。始终记住使用代码并观
察向站点传递了什么信息，并玩玩它看看什么会发生。这里，所有发生的事情是，移除
POST 参数来绕过安全检查。其次，再说一遍，不是所有攻击都基于 HTML 页面。API
终端始终是一个潜在的漏洞区域，所以确保你考虑并测试了它们。
2. 星巴克竞态条件
难度：中
URL：
Starbucks.com
报告链接：
http://sakurity.com/blog/2015/05/21/starbucks.html
报告日期：2015.5.21
奖金：无
29
九、应用逻辑漏洞
描述：
如果你不熟悉竞态条件，本质上它是两个潜在的进程彼此竞争来完成任务，基于一个厨师场
景，它在请求被执行期间变得无效。换句话说，这是一个场景，其中你拥有两个进程，它们
本应该是互斥的，不应该同时完成，但是因为它们几乎同时执行，它们被允许这么做了。
这里是一个例子：
1. 你在手机上登录进了你的银行站点，并请求将 $500 从你的一个仅仅拥有 $500 的账户转
到另一个账户。
2. 这个请求花费很长时间（但是仍然处理），所以你在你的笔记本上登录，并且再次执行
了相同请求。
3. 笔记本的请求几乎立即完成了，但是你的手机也是这样。
4. 你刷新了银行账户，并发现你的账户里有 $1000。这意味着请求执行了两次，这本不应
被允许，因为你一开始只拥有 $500。
虽然这个很基础，理念都是一样的，一些条件存在于请求开始，在完成时，并不存在了。
所以，回到这个例子，Egor 测试了从一个星巴克的卡中转账，并且发现他成功触发了竞态条
件。请求使用 CURL 程序几乎同时创建。
重要结论
竞态条件 是个有趣的攻击向量，它有时存在于应用处理一些类型的余额的地方，例如金
额、积分，以及其他。发现这些漏洞并不总是发生在第一次尝试的时候，并且可能需要
执行多次重复同时的请求。这里，Egor 在成功之前执行了 6 次请求。但是要记住在测试
它的时候，要注意流量负荷，避免使用连续的测试请求危害到站点。
3. Binary.com 权限提升
难度：低
URL：
binary.com
报告链接：
https://hackerone.com/reports/98247
报告日期：2015.11.14
奖金：$300
描述：
这真是一个直接的漏洞，不需要过多解析。
本质上，在这个场景下，用户能够登录任何账户，代表被黑的用户账户，并查看敏感信息，
或执行操作，并且一切只需要知道用户的 UID。
30
九、应用逻辑漏洞
在你渗透之前，如果你登录了 ，并查看了页面的 HTML，你会注意到有
Binary.com/cashier
个  标签包含 PIN 参数。这个参数实际上就是你的账户 ID。
下面，如果你编辑了 HTML，并且插入了另一个 PIN，站点就会自动在新账户上执行操作，
而不验证密码或者任何其他凭据。换句话说，站点会将你看做你所提供的账户的拥有者。
同样，所需的一切就是知道某人的账户号码。你甚至可以在出现在 中的时间修改
iframe
为 ，来触发另一个账户的付款操作。但是， 表示，所有取款都需要手动
PAYOUT Bianry.com
人工复查，但是这并不是说，这就一定会被发现。
重要结论
如果你寻找基于漏洞的认证，要留意凭据传递给站点的地方。虽然这个漏洞通过查看页
面源码来实现，你也可以在使用代理拦截器的时候，留意传递的信息。
如果你的确发现了被传递的一些类型的凭据，但他们看起来没有加密时，要注意了，并
且尝试玩玩它们。这里，PIN 是 而密码是 。显然
CRXXXXXX 0e552ae717a1d08cb134f132
PIN 没有解密，但是密码加密了。未加密的值是一个非常好的地方，你可以从这里下
手。
4. HackerOne 信号操作
难度：低
URL：
hackerone.com/reports/XXXXX
报告链接：
https://hackerone.com/reports/106305
报告日期：2015.12.21
奖金：$500
描述：
在 2015 年年末，HackerOne 向站点进入了新的功能，叫做信号。本质上，在这些报告关闭
之后，它有助于识别黑客的之前漏洞报告的有效性。重要的是要注意，用户可以关闭它们在
HackerOne 上的报告，这本应该对他们的声誉和信号功能毫无影响。
所以，你可以猜到，在测试该功能的时候，一个黑客发现了这个功能的不合理实现，并且允
许黑客向任何团队创建报告，自己关闭报告，并从中受益。
这就是这里的情况了。
重要结论
通过一个简短的描述，这里的结论不可能全部覆盖。一定要留意新的功能！当站点实现了新
的功能时，它对于黑客就像鲜肉一样。新的功能展示了测试新代码和搜索漏洞的机会。这就
和 Shopify 和 Twitter 的 CSRF，以及 Facebook 的 XSS 漏洞一样。为了最大利用它们，使你
31
九、应用逻辑漏洞
自己熟悉公司，并且订阅公司的博客是个好主意，以便你在一些东西发布之后能够收到提
醒。之后测试它们。
5. Shopify S3 Bucket 开放
难度：中
URL：
cdn.shopify.com/assets
报告链接：
https://hackerone.com/reports/106305
报告日期：2015.11.9
奖金：$1000
描述：
Amazon 简易存储 S3，是一个服务，允许用户在 Amazon 的云服务器上储存和托管文件。
Shopify 和许多站点都是用 S3 来储存和托管静态内容，例如图片。
Amazon Web 服务的整个套件，AWS，是非常健壮的，并包含权限管理系统，允许管理员为
每个服务定义权限，包含 S3。许可包含创建 S3 Bucket 的功能（Bucket 就像储存器的文件
夹），读取和写入 Bucket ，以及其他。
根据披露，Shopify 没有合理配置它们的 S3 Bucket 权限，并且无意中允许任何认证过的
AWS 用户读取或写入它们的 Bucket。这显然是由问题的，因为你至少不希望恶意的黑帽子使
用你的 S3 Bucket 来储存和托管文件。