(with-slots 
dable
"baz"
object
:hams
:hams
(object
0:spams
#
www.TopSage.com
Spam-
strea
0>
:type t)
23.2训练过滤器
255
---
## Page 273
因为ECASE不对键求值。
被调用，那么第二个分支将运行，从而递增spam计数。这里符号ham和spam在调用increment-
将会递增。另一方面，如果它像这样
被调用，那么type的值将是符号ham，而ECASE的第一个分支将被求值并且对应特性的ham计数
的值。因此，如果increment-count像这样
象进行比较。在这个函数中，这意味着键是符号ham和spam，而不是任何名为ham和spam的变量
第二个参数所传递的值。
EQL相等的子句。在本例中，这意味着当变量type被求值时，得到了作为increment-count的
应的槽。
都定义成带有一个:aCCeSSOr选项，因此可以使用INCF和由DEFCLASS创建的访问函数来递增相
下的方法通过其他尚不存在的函数来实现它。
计数器，它们代表目前所处理过的有用信息或垃圾邮件信息的全局计数。你可以再次采用自顶向
键不会被求值。换句话说，tYpe的值将与Lisp读取器作为ECASE形式一部分所读取的字面对
256
?
① 如果你以后决定需要为不同的类编写不同版本的increment-feature,那么你可以将increment-count重定
(increment-count some-feature 'spam)
(increment-count some-feature 'ham)
其中的ECASE构造是cASE的一个变体，两者都类似于源自Algol语言的case语句（在C和它
(defun increment-count (feature type)
你已经编写了extract-features，因此下一个需要编写的是increment-count，它接受
(defun train (text type)
身。这样，每个子句可以有多个键，CASE和ECASE将选择键列表中含有键形式的值的子句。例如，如果你想要
象。一个单一的非列表对象被当作列表指示符对待时相当于一个只含有一个对象的列表，而一个列表将指代它本
(defun increment-count (feature type)
把good作为ham的同义词而把bad作为spam的同义词，那么你可以像下面这样来编写increment-count：
从技术上来讲，
义成一个广义函数，而将该函数定义成一个特化在word-feature上的方法。
(ecase type
(increment-total-count type)}
(dolist 
(ecase type
(spam (incf (spam-count feature)))))
(ham (incf (ham-count feature)))
increment-
第23章
(spam bad)
(feature
一个CASE或ECASE的每个子句中的键都将被解释成一个列表指示符，
-count feature type))
实践：垃圾邮件过滤器
）(incf (spam-count feature)))))
(incf (ham-count feature)))
(extract-features text))
www.TopSage.com
一个指定了对象列表的对
---
## Page 274
的频率视为未来邮件中同样特征在有用信息和垃圾邮件信息中出现的概率。
*total-hams*中的频率数据。假设用于训练的邮件集合在统计上有代表性，那么可以将观察到
集中在它们是怎样实现的。
的数学原理?超出了本书的范围，有兴趣的读者可以参考Gray Robinson的几篇论文。我将把焦点
23.3按单词来统计
应当按照如下方式在clear-database中添加几行：
掉这些数据。但是你希望在重置*feature-database*之后可以顺便重置这两个变量。因此,
在你运行程序期间始终保持其中的数据，你不想只是因为在开发过程中重新加载了你的代码就扔
量*total-spams*和*total-hams*会比较好。
键之外的东西时，ECASE应当报错。正常的CASE相对宽松，当没有匹配的子句时返回NIL。
统计计算的起点是测量值的集合一
为了实现increment-total-count，需要决定将计数保存在哪里。目前，使用两个特殊变
① 从数学的角度来说，本章中有时对概率一词较宽松的用法可能会冒犯严肃的统计学家。不过，由于即便是该用法
分类邮件的基本方法是提取其中的特征，计算含有该特征的邮件是垃圾邮件的概率，然后再
(defun clear-database ()
应当使用DEFVAR来定义这两个变量，理由与用在*feature-database*时相同—它们将
的赞成者，其中还进一步划分成贝叶斯论者和频率论者，也无法对概率究竞是什么达成统一意见，因此我不会担
(defun increment-total-count (type)
(defvar *total-hams* 0)
(defvar *total-spams* 0)
不同算法和思想的有用信息。
获得)。 SpamBayes项目（http:/spambayes.sourceforge.net/）的存档邮件列表里也含有许多关于测试垃圾过滤器的
文章是 “Handling Redundancy in Email Token Probabilities” (可从htp:/garyrob.blogs.com//handlingtokenredundancy94.pdf
com/0101454/stories/2002/09/16/spamDetection.html.上) C及 “Why Chi? Motivations for the Use of Fisher's Inverse
*feature-database* (make-hash-table :test #'equal)
(setf
{ecasetype
*total-hams* 0))
*total-spams* 0
(spam (incf *total-spams*))))
ham
m(incf *total-hams*))
——保存在*feature-database*、
www.TopSage.com
23.3按单词来统计
*total-spams*和
257
---
## Page 275
合并。基本上，你以一个假设的先验概率开始计算新的概率并在添加新信息之前给假设的概率一
Robinson在他的论文中推荐了一个基于贝叶斯概念的函数，将观察到的数据与先验知识或假设相
很可能又出现了一次，这次出现在一条正常邮件中，使得它突然成为了垃圾邮件可能性为0.5的
邮件还是有用信息中都很罕见，在2000条消息中仅出现一次。如果你训练了另外2000条邮件，它
个特征的出现预测一个邮件是垃圾邮件的概率是相等的，都是1。
一个出现在所有1000条邮件中，而另一个仅出现一次。根据当前spam-probability的定义，两
经训练了2000条消息，一半是垃圾邮件而另一半正常。现在考察两个只出现在垃圾邮件中的特征。
零，那么相应的每特征计数也将是零，因此你可以将结果频率视为零而不会带来不良影响。）
一个为零，那么你应当将相应的频率视为零。（很明显，如果垃圾邮件或有用消息的任一总数为
除以有用邮件总数。为了避免发生除零错误，如果*total-spams*或*total-hams*两者任何
的整体概率无关。这样，你需要将垃圾邮件数量除以接受训练的垃圾邮件总数，将有用邮件数量
垃圾邮件里，从而这个函数计算出1/10的垃圾邮件概率。
的比值。这样，就可以用如下方式来计算它：
含有该特征的给定邮件是垃圾邮件的概率，就是含有该特征的垃圾邮件与含有该特征的所有邮件
得到接近于1的评分，而带有许多有用特征和很少垃圾邮件特征的邮件的评分会接近于0。m
将所有这些概率综合成该邮件的一个整体评分，带有许多垃圾邮件特征和很少有用特征的邮件将
个权重。Robinson的函数如下所示：
一条中性特征。
第一个统计函数用来计算一个含有给定特征的邮件是垃圾邮件的概率。从某种角度看，一个
所以看起来你想要计算一个概率，它以某种方式影响了进入到每个特征中的数据点数。
但你更感兴趣的是一个给定特征出现在一封垃圾邮件中的概率，与收到垃圾邮件或正常邮件
258
尽管如此，那个仅出现一次的特征很可能实际上是一个中性的特征，它很明显在无论是垃圾
(defun bayesian-spam-probability(feature &optional
这个版本还有另一个问题——它没有在每单词概率上计入到达并分析的消息数量。假设你已
(defun spam-probability (feature)
该函数的值可能被任何邮件是一封垃圾邮件或有用邮件的总体概率所影响。例如，假设你通
(defun spam-probability(feature)
(let
(with-slots (spam-count ham-count)feature
(with-slots (spam-countham-
（/
(/spam-count（+spam-countham-count))))
(let((spam-frequency
第23章实践：垃圾邮件过滤器
(+(*weight assumed-probability)
(ham-frequency
www.TopSage.com
spam-count
count)feature
(weight1）)
(assumed-probability 1/2)
(max
（1*total-spams*)))
(ham-count feature))))
大家
弘网
---
## Page 276
本。换句话说，它一定是条有用的邮件。
的特征来自一个有偏的样本一
的合并值，然后反向卡方分布函数将很可能返回一个比较高的值，事实也正是如此。但如果反向
垃圾邮件中的特征。如果你根据Fisher的方法合并这些随机选择的概率，那么你将得到一个中间
就是说，一个特征的随机选择将通常含有一些经常出现在垃圾邮件中的特征和另一些很少出现在
如果它是的话，那么单独的概率，即每个特征出现在一个垃圾邮件中的可能性也将是随机的。这
开始，一个你想要击倒的稻草人。这个空假设是被分类的消息事实上只是一个特性的随机集合，
么是许多相对的低概率，要么是少量非常低的概率。）
反向卡方分布函数返回一个较低的概率时，这意味着在单独的概率中存在相当多的低概率。（要
在1950年证明，如果这些单独的概率是彼此无关的并且来自于0和1之间的统一分布，那么得到的
这样。の
概率。但是它们实际上不可能是彼此无关的，特定的特征很可能会一起出现，而其他一些却从不
实现score函数的最后一步是找出一种方式，将大量的概率个体合并成介于0和l之间的单个值。
23.4
大约0.9995的垃圾邮件概率。
中，然后返回一个反映了通过组合相同数量的随机选择概率得到越来越大的值的可能性。当这个
值将满足卡方（chi-square，x²）分布。该值和概率数量的两倍可以输入到一个反向卡方分布函数
以奏效的具体细节的前堤下，方法是这样的：首先你通过将所有概率相乘来把它们组合在一起。
一个出现在一条垃圾邮件中而没有出现在有用邮件中的特征具有0.75的bayesian-spam-
①从技术上来讲，对一些事实上无关的概率进行非无关的概率合并，这称为原生贝叶斯（Naive Bayesian）。Graham
为了使用这个概率来检测一个给定的邮件是否是垃圾邮件，你从一个空假设(nullhypothesis)
Robinson提议使用由统计学家R.A.Fisher发明的概率组合方法。在不讨论为什么它的技术可
如果单独的特征概率是彼此无关的，那么从数学上来讲可以将它们相乘从而得到一个合并的
尽管如此，Fisher方法并不是对称的，因为反向卡方分布函数对于由给定数量的随机选择的
Robinson建议把1/2作为assumed-probability的值，把1作为weight的值。使用这些值，
最初发表的建议本质上是一个原生贝叶斯分类器，其中带有一些“经验驱动”的常量因子。
合并概率
(+ weight data-points))))
(* data-points basic-probability))
www.TopSage.com
23.4合并概率
259
---
## Page 277
数，那么fisher在概念上很简单。
现过的特征。这些特征将具有值为0的垃圾邮件计数和有用计数。untrained-p函数非常简单。
的概率。将这两个概率组合在一起就可以给你一个介于0和1之间的整体垃圾邮件程度评分。
得到该邮件是有用邮件的概率。相反，从有用概率中减去fisher评分将得到该邮件是垃圾邮件
低。这样，一个低的fisher垃圾邮件概率评分意味着存在许多有用的特征。将这个评分减去1就
它们计数。当单独的概率中含有许多来自随机文本的低概率值时，由fisher返回的值也将非常
可以在循环过程中统计概率的数量，然后将这个计数传给fisher从而避免在fisher本身再次对
到一个接近1/2的最终值，从而得到一个“不确定”的分类。
到一个接近0或1的强烈的指示值。但是当垃圾邮件程度和有用程度的评分都高或都低时，你将得
分相反（高的垃圾邮件程度和低的有用程度，或者反过来）时可以带来很好的效果，这时你将得
间差异的一半与1/2相加，换句话说，就是垃圾邮件程度和1减去有用程度的平均值。这在两个评
的组合的有用程度-垃圾邮件程度评分。Rabinson所推荐的方法是将有用程度和垃圾邮件程度之
该邮件垃圾邮件程度的一个衡量。
至少也是对它有用程度的一个好的衡量。相反，对于单独的有用概率的Fisher合并可以给你关于
合，那么这意味着该邮件很可能是有用的。返回的数值就算并非该邮件是有用邮件的字面概率，
邮件概率时，而它告诉你有很高的概率表明空假设是错误的一—邮件并不是一个单词的随机集
是有利的，因为当你拒绝空假设时你知道更好的假设是什么。当你用Fisher方法合并单独的垃圾
概率返回的合并后的概率，将比你从合并实际概率中得到的值大得多。这种非对称性的用法对你
为了得到一个最终的评分，你需要将这两个指标合并成单一的值，从而给一个范围是从0到1
260
在循环内部，你可以使用函数untrained-p来跳过那些从邮件中提取出的从未在训练中出
(defun fisher (probs number-of-probs)
剩下的唯一一个新的函数是fisher本身。假设你已经有了一个inverse-chi-square函
(defun untrained-p (feature)
你接受一个特征的列表并循环它们，构建起两个概率的列表，一个列出含有每个特征的消息
(defun score (features)