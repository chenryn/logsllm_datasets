# Unknown - Master Office
Category: Reversing
## Description
> You press a button and enter through a tinted glass door. There is a vast oil painting on the wall that depicts a bold man with a scar under his left eye, under his arms rests a white chubby cat. Below the painting is the very same man, and he’s addressing you: "Well, well, well. Isn’t it the trouble maker? Huh, how did you get past the guards? Well, I have a final offer for you. I’ll let you live only on one condition: START WORKING FOR ME! BWAHAHAHAHA-" While he goes on with his monologue about conquering the world and some twisted philosophy about how he is actually the good guy and so on you start discretely fiddling with a control panel labeled "Self destruction". You need to quickly figure out the activation code while he’s distracted.
> 
> Challenge: Strange Virtual Machine (reversing)
> 
> Everyone is coming up with their own programming language these days, so I came up with my own architecture. You can use it to run the attached program that will print the flag for you
A ROM file and an archive were attached.
## Solution
Let's check the attached files:
```console
┌──(user@kali)-[/media/sf_CTFs/google/18_Unknown_-_Master_Office/files]
└─$ xxd -g 1 vm.rom
00000000: 01 69 00 00 00 00 02 01 69 0b bc 00 00 00 ff 08  .i......i.......
00000010: 04 47 02 47 01 01 69 00 00 00 00 09 47 01 69 0a  .G.G..i.....G.i.
00000020: 30 00 00 00 01 69 00 00 00 00 02 00 69 05 47 08  0....i......i.G.
00000030: 01 69 00 01 00 00 09 47 00 69 0a 45 00 00 00 02  .i.....G.i.E....
00000040: 00 47 05 47 08 01 69 00 01 00 00 03 69 47 04 69  .G.G..i.....iG.i
00000050: 02 01 69 0b 10 00 00 00 05 47 08 05 47 08 04 47  ..i......G..G..G
00000060: 02 47 01 01 69 02 00 00 00 09 47 01 69 0a 7e 00  .G..i.....G.i.~.
00000070: 00 00 01 69 01 00 00 00 02 00 69 05 47 08 01 69  ...i......i.G..i
00000080: 01 00 00 00 03 69 47 04 69 02 01 69 0b 5e 00 00  .....iG.i..i.^..
00000090: 00 02 78 00 04 78 01 69 02 00 00 00 03 69 47 04  ..x..x.i.....iG.
000000a0: 69 02 01 69 0b 5e 00 00 00 05 78 02 79 00 03 69  i..i.^....x.y..i
000000b0: 78 03 79 02 00 69 05 47 08 05 47 08 04 47 02 47  x.y..i.G..G..G.G
000000c0: 01 02 01 42 fc 09 47 00 00 0a 2f 01 00 00 02 01  ...B..G.../.....
000000d0: 42 02 02 47 fd 02 48 00 04 48 04 48 01 69 01 00  B..G..H..H.H.i..
000000e0: 00 00 03 69 47 03 69 02 01 69 0b 5e 00 00 00 05  ...iG.i..i.^....
000000f0: 48 03 69 47 03 00 03 69 48 03 69 02 01 69 0b 10  H.iG...iH.i..i..
00000100: 00 00 00 05 48 02 48 00 04 48 04 48 02 01 48 fe  ....H.H..H.H..H.
00000110: 05 48 05 48 04 48 04 48 01 69 01 00 00 00 03 69  .H.H.H.H.i.....i
00000120: 47 03 69 02 01 69 0b bc 00 00 00 05 48 05 48 05  G.i..i......H.H.
00000130: 47 08                                            G.
┌──(user@kali)-[/media/sf_CTFs/google/18_Unknown_-_Master_Office/files]
└─$ tar -xvf vm-impl.tgz
vm/
vm/Cargo.toml
vm/src/
vm/src/lib.rs
vm/.gitignore
vm-cli/
vm-cli/Cargo.toml
vm-cli/src/
vm-cli/src/main.rs
vm-cli/Cargo.lock
vm-cli/.gitignore
```
The interesting files are `vm/src/lib.rs`:
```rust
use std::io::{Read, Write};
pub type Register = char;
pub const REG_RV: Register = 0 as Register;
pub const REG_ARG0: Register = 1 as Register;
pub const REG_ARG1: Register = 2 as Register;
pub const REG_FLAG: Register = 0xFF as Register;
// Instructions
#[derive(Copy, Clone, Debug)]
pub enum Instruction {
    Nop,
    MovConst {
        reg: Register,
        v: u32,
    },
    MovReg {
        reg: Register,
        reg2: Register,
    },
    MathOp {
        reg_out: Register,
        reg: Register,
        op: u8,
        reg2: Register,
    },
    PushReg(Register),
    PopReg(Register),
    PushConst(u32),
    JmpConst(u32),
    PopPc,
    Test {
        reg: Register,
        op: u8,
        reg2: Register,
    },
    JmpCond(u32),
    Call(u32),
    Strlen,
    CharAt,
    Print,
    Exit,
}
impl Instruction {
    pub fn read(f: &mut std::fs::File) -> std::io::Result {
        let mut opcode = [0u8];
        f.read_exact(&mut opcode)?;
        let read_u32 = |f: &mut std::fs::File| -> std::io::Result {
            let mut buf = [0u8; 4];
            f.read_exact(&mut buf)?;
            let res: u32 = unsafe { std::mem::transmute(buf) };
            Ok(res)
        };
        let read_u8 = |f: &mut std::fs::File| -> std::io::Result {
            let mut buf = [0u8];
            f.read_exact(&mut buf)?;
            Ok(buf[0])
        };
        let read_reg = |f: &mut std::fs::File| read_u8(f).map(|x| x as char);
        Ok(match opcode[0] {
            0 => Instruction::Nop,
            1 => Instruction::MovConst {
                reg: read_reg(f)?,
                v: read_u32(f)?,
            },
            2 => Instruction::MovReg {
                reg: read_reg(f)?,
                reg2: read_reg(f)?,
            },
            3 => Instruction::MathOp {
                reg_out: read_reg(f)?,
                reg: read_reg(f)?,
                op: read_u8(f)?,
                reg2: read_reg(f)?,
            },
            4 => Instruction::PushReg(read_reg(f)?),
            5 => Instruction::PopReg(read_reg(f)?),
            6 => Instruction::PushConst(read_u32(f)?),
            7 => Instruction::JmpConst(read_u32(f)?),
            8 => Instruction::PopPc,
            9 => Instruction::Test {
                reg: read_reg(f)?,
                op: read_u8(f)?,
                reg2: read_reg(f)?,
            },
            10 => Instruction::JmpCond(read_u32(f)?),
            11 => Instruction::Call(read_u32(f)?),
            0xFC => Instruction::Strlen,
            0xFD => Instruction::CharAt,
            0xFE => Instruction::Print,
            0xFF => Instruction::Exit,
            _ => unreachable!(),
        })
    }
    pub fn write(&self, f: &mut std::fs::File) -> std::io::Result {
        f.write_all(&[(*self).into()])?;
        use Instruction::*;
        match self {
            MovConst { reg, v } => {
                let v_raw: [u8; 4] = unsafe { std::mem::transmute(*v) };
                f.write_all(&[*reg as u8])?;
                f.write_all(&v_raw)?;
            }
            MovReg { reg, reg2 } => {
                f.write_all(&[*reg as u8, *reg2 as u8])?;
            }
            MathOp {
                reg_out,
                reg,
                op,
                reg2,
            } => {
                f.write_all(&[*reg_out as u8, *reg as u8, *op, *reg2 as u8])?;
            }
            PushReg(reg) => {
                f.write_all(&[*reg as u8])?;
            }
            PopReg(reg) => {
                f.write_all(&[*reg as u8])?;
            }
            PushConst(c) => {
                let c_raw: [u8; 4] = unsafe { std::mem::transmute(*c) };
                f.write_all(&c_raw)?;
            }
            JmpConst(c) => {
                let c_raw: [u8; 4] = unsafe { std::mem::transmute(*c) };
                f.write_all(&c_raw)?;
            }
            Test { reg, op, reg2 } => {
                f.write_all(&[*reg as u8, *op, *reg2 as u8])?;
            }
            JmpCond(c) => {
                let c_raw: [u8; 4] = unsafe { std::mem::transmute(*c) };
                f.write_all(&c_raw)?;
            }
            Call(c) => {
                let c_raw: [u8; 4] = unsafe { std::mem::transmute(*c) };
                f.write_all(&c_raw)?;
            }
            PopPc | Strlen | CharAt | Print | Exit | Nop => {}
        }
        Ok(())
    }
}
impl std::fmt::Display for Instruction {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        use Instruction::*;
        match self {
            MovConst { reg, v } => write!(f, "mov {:?}, 0x{:08X}", *reg, v),
            MovReg { reg, reg2 } => write!(f, "mov {:?}, {:?}", *reg, *reg2),
            MathOp {
                reg_out,
                reg,
                op,
                reg2,
            } => write!(f, "{:?} = alu({:?}, {}, {:?}", *reg_out, *reg, *op, *reg2),
            PushReg(reg) => write!(f, "push {:?}", *reg),
            PopReg(reg) => write!(f, "pop {:?}", *reg),
            PushConst(c) => write!(f, "push 0x{:X}", *c),
            JmpConst(c) => write!(f, "jmp 0x{:X}", *c),
            Test { reg, op, reg2 } => write!(f, "test {:?}, {}, {:?}", *reg, *op, *reg2),
            JmpCond(c) => write!(f, "jmpc 0x{:X}", *c),
            Call(c) => write!(f, "call 0x{:X}", *c),
            PopPc => write!(f, "ret"),
            Strlen => write!(f, "call Strlen"),
            CharAt => write!(f, "call CharAt"),
            Print => write!(f, "chall Print"),
            Exit => write!(f, "exit"),
            Nop => write!(f, "nop"),
        }
    }
}
impl Into for Instruction {
    fn into(self) -> u8 {
        use Instruction::*;
        match self {
            Nop => 0,
            MovConst { .. } => 1,
            MovReg { .. } => 2,
            MathOp { .. } => 3,
            PushReg(_) => 4,
            PopReg(_) => 5,
            PushConst(_) => 6,
            JmpConst(_) => 7,
            PopPc => 8,
            Test { .. } => 9,
            JmpCond(_) => 10,
            Call(_) => 11,
            Strlen => 0xFC,
            CharAt => 0xFD,
            Print => 0xFE,
            Exit => 0xFF,
        }
    }
}
```
And `vm-cli/src/main.rs`:
```rust
extern crate vm;
use std::io::{Seek, Write};
use vm::*;
const INPUT_DATA: [u32; 63] = [
    66, 82, 66, 117, 75, 91, 86, 87, 31, 51, 222, 187, 112, 236, 9, 98, 34, 69, 0, 198, 150, 29,
    96, 10, 69, 26, 253, 225, 164, 8, 110, 67, 102, 108, 103, 162, 209, 1, 173, 130, 186, 5, 123,
    109, 187, 215, 86, 232, 23, 215, 184, 79, 171, 232, 128, 67, 138, 153, 251, 92, 4, 94, 93,
];
struct Vm {
    f: std::fs::File,
    registers: [u32; 256],
    stack: [u32; 64 * 1024],
    flag: bool,
    sp: usize,
}
impl Vm {
    fn new>(path: T) -> std::io::Result {
        let f = std::fs::File::open(path.as_ref())?;
        Ok(Self {
            f,
            registers: [0u32; 256],
            stack: [0u32; 64 * 1024],
            flag: false,
            sp: 0,
        })