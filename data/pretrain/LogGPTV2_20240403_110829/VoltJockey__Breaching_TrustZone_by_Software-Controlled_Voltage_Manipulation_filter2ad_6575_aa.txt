title:VoltJockey: Breaching TrustZone by Software-Controlled Voltage Manipulation
over Multi-core Frequencies
author:Pengfei Qiu and
Dongsheng Wang and
Yongqiang Lyu and
Gang Qu
VoltJockey: Breaching TrustZone by Software-Controlled
Voltage Manipulation over Multi-core Frequencies
Pengfei Qiu1,2,3, Dongsheng Wang1,2, Yongqiang Lyu2∗, Gang Qu3
1Department of Computer Science and Technology, Tsinghua University, Beijing, China.
2Beijing National Research Center for Information Science and Technology, Tsinghua University, Beijing, China.
3Dept. of Electrical and Computer Engineering & Institute for Systems Research, Univ. of Maryland, College Park, USA.
PI:EMAIL,{wds,luyq}@mail.tsinghua.edu.cn,PI:EMAIL
ABSTRACT
ARM TrustZone builds a trusted execution environment based on
the concept of hardware separation. It has been quite successful in
defending against various software attacks and forcing attackers to
explore vulnerabilities in interface designs and side channels. The
recently reported CLKscrew attack breaks TrustZone through soft-
ware by overclocking CPU to generate hardware faults. However,
overclocking makes the processor run at a very high frequency,
which is relatively easy to detect and prevent, for example by hard-
ware frequency locking.
In this paper, we propose an innovative software-controlled hard-
ware fault-based attack, VoltJockey, on multi-core processors that
adopt dynamic voltage and frequency scaling (DVFS) techniques
for energy efficiency. Unlike CLKscrew, we manipulate the voltages
rather than the frequencies via DVFS unit to generate hardware
faults on the victim cores, which makes VoltJockey stealthier and
harder to prevent than CLKscrew. We deliberately control the fault
generation to facilitate differential fault analysis to break TrustZone.
The entire attack process is based on software without any involve-
ment of hardware. We implement VoltJockey on an ARM-based
Krait processor from a commodity Android phone and demonstrate
how to reveal the AES key from TrustZone and how to breach
the RSA-based TrustZone authentication. These results suggest
that VoltJockey has a comparable efficiency to side channels in
obtaining TrustZone-guarded credentials, as well as the potential
of bypassing the RSA-based verification to load untrusted appli-
cations into TrustZone. We also discuss both hardware-based and
software-based countermeasures and their limitations.
CCS CONCEPTS
• Security and privacy → Security in hardware; Embedded
systems security; Hardware attacks and countermeasures.
∗Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354201
KEYWORDS
TrustZone; fault injection attack; voltage manipulation; low voltage
error; dynamic voltage and frequency scaling (DVFS).
ACM Reference Format:
Pengfei Qiu, Dongsheng Wang, Yongqiang Lyu, Gang Qu. 2019. VoltJockey:
Breaching TrustZone by Software-Controlled Voltage Manipulation over
Multi-core Frequencies. In 2019 ACM SIGSAC Conference on Computer and
Communications Security (CCS’19), November 11–15, 2019, London, United
Kingdom. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/
3319535.3354201
1 INTRODUCTION
TrustZone technology extends the hardware and software architec-
tures of ARM-based system-on-chip (SoC) to provide an isolated
trusted execution environment for a wide array of devices, includ-
ing handsets, tablets, wearable devices, and enterprise systems.
Almost all of the current ARM-based processors are designed to
enable TrustZone. For example, there are more than one billion
smart phones worldwide equipped with TrustZone. Meanwhile,
more and more applications have been developed taking advantage
of TrustZone’s security such as payment protection, digital rights
management, bring your own device (BYOD), and various secured
enterprise solutions [66].
TrustZone utilizes the hardware-assured security methodologies
that have intrinsically tight interfaces to direct software executions
for a trusted and secure execution environment. Current attacks
to TrustZone mainly rely on the implementation vulnerabilities of
software interfaces, such as secure monitor call (SMC), interrupt
request (IRQ), fast interrupt request (FIQ), shared memory access,
and trusted application-specific calls [66]. Amending unsafe func-
tions is effective to defend against those attacks. In addition to the
software vulnerability-based attacks, it has also been reported suc-
cessful attacks by exploiting hardware imperfections such as side
channel [49] and hardware fault injection attack [65]. Although side
channel attacks can only steal sensitive information, the hardware
fault injection attacks can be deployed to invalidate the security
measures of TrustZone and allow the attackers to gain control of
it. For example, the CLKscrew attack [65] breaks TrustZone by
overclocking CPU with software. However, this attack is also easy
to be addressed by hardware frequency locking.
In this study, we propose an innovative hardware-fault injection
method to break TrustZone. Our method manipulates the voltage
of the multi-cores processor to induce hardware faults and hence
earns the name VoltJockey. The basic idea is to lower the voltage
deliberately such that fault could occur because of the vulnerability
driven by the hardware dynamic voltage and frequency scaling
Session 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom195(DVFS) technique [14]. Compared to the CLKscrew attack [65],
which motivates our work and is the most relevant, VoltJockey has
the following two advantages: 1) it does not rely on the overclocking
mechanism or manipulating frequencies; 2) the entire attack process
is carried out under the normal functions of DVFS, and the glitch
voltages are also valid voltages for DVFS. Both make VoltJockey a
more practical and dangerous attack than CLKscrew.
Although changing voltage was mentioned in the original CLKscrew
paper, the authors also acknowledged that the system crashes when
they manipulate the voltage. Indeed, they have reported that when
the device is set to any voltage outside the range 0.6V to 1.17V ,
it either reboots or freezes [65]. This suggests that the voltage-
change based attack they have experimented follows the same idea
of CLKscrew. That is, running the system at voltage level outside
the normal range allowed by DVFS. This could be the reason of
their failure in extending CLKscrew attack from overclocking to
"overVoltage". Even if they manage to implement such "overVoltage"
attack, it can be easily detected and prevented by voltage guardians
or locking techniques. From this point of review, VoltJockey is
different from CLKscrew.
VoltJockey exploits the voltage management-related vulnera-
bilities of DVFS. The DVFS technique aims at saving energy by
enabling software to adjust frequencies and voltages of cores. It
has been employed by most of the modern commercial processors
including those by ARM and Intel. Processors can reliably work
at a fixed clock frequency with a range of voltage levels. How-
ever, if the voltage is inappropriately low, the processor could not
reach the expected frequency and this will cause delay in delivering
data from one function/component to another. Thus, next func-
tion/component might be using the incorrect data and results in
wrong functional behaviors and/or hardware faults. Similarly, if the
voltage is inappropriately high, the processor might also work with
unpredictable functional behaviors and thus introduced unexpected
errors to the running applications on it. Both kinds of faults make it
possible for the attackers to analyze sensitive data or alter software
outputs with differential fault analysis techniques.
We validate VoltJockey on an ARM-based Krait processor, whose
voltage is controlled by a common hardware regulator. The attack
is launched as follows: we first provide a high frequency to a victim
core and a low frequency to an attacker core, and then give the pro-
cessor a transitory voltage that is sufficiently high for the attacker
core to perform tasks correctly but is not for the victim core to work
normally. As a consequence, such glitch voltage will trigger func-
tional errors into the victim core without bringing any hazardous
impacts to the attacker core. The error output will be collected
for differential fault analysis. We implement this and successfully
obtain the AES key protected by TrustZone and circumvent the
RSA-based signature verification so we can load any applications
into TrustZone.
Our main contributions in this paper can be summarized as:
(1) We propose a novel software-controlled hardware fault-
based attack to TrustZone, the VoltJockey, which manip-
ulates the voltages of DVFS-enabled multi-core processors
to breach TrustZone protections.
(2) We introduce a methodology for analyzing and exploiting the
vulnerability of multi-core voltage-frequency management
of DVFS to perform the VoltJockey attack, which can realize
precise injections of the low-voltage faults into TrustZone
procedures.
(3) We validate VoltJockey on an ARM-based Krait processor
by breaking AES and RSA in TrustZone. The experiments
successfully obtain the encryption key of AES and load un-
trusted applications into TrustZone by invalidating the RSA
verification.
The remainder of this paper is organized as follows. Section 2
introduces the essential preliminaries of TrustZone, DVFS, and
voltage management of the ARM-based Krait micro architecture.
Section 3 describes the overall methodology and basic idea of the
VoltJockey. Section 4 gives the major challenges and corresponding
technical details in implementing the attack. Section 5 and Section
6 demonstrate the real applications of VoltJockey on the AES key
extraction and RSA output alteration in TrustZone, respectively. At
the end of the paper, Section 7 states the related work, Section 8
analyzes the possible countermeasures against the VoltJockey, and
Section 9 finally concludes the paper.
2 PRELIMINARIES
In this section, we introduce the basics on TrustZone, DVFS, and
voltage management of ARM-based Krait micro architecture, re-
spectively.
2.1 ARM TrustZone
For enhancing the confidentiality, integrity, and availability of
trusted applications, ARM develops TrustZone technology, which
extends the hardware and software architectures of SoC to create
an trusted execution environment [2]. The processor can work in
two worlds, normal world and secure word. TrustZone virtualizes
a physical core as a virtual logical core and a virtual secure core,
which execute in a time-sliced fashion and perform the normal-
world and secure-world programs, separately. A trusted application
(also expressed as a trustlet) can be loaded from normal world into
secure world with associated kernel drivers as long as it passes the
verification by the RSA-based authentication procedure [2].
Although TrustZone enhances the security of ARM-based plat-
forms to a remarkable extent, some software vulnerabilities can
still be exploited to breach it. For example, the privilege escala-
tion attacks can be launched if the necessary boundary check is
missed when invoking secure services [51, 57, 64]; the downgrade
attacks can be implemented if the system does not limit firmware
versions [15, 30]. However, those vulnerabilities can easily be fixed
by software upgrading. In contrast, the attacks that utilize hardware
vulnerabilities may be more difficult to be prevented due to the
upgrading overheads to both hardware and software. Such attacks
include side channel attacks [16, 49] and hardware fault injection
attacks [65]. Our proposed VoltJockey belongs to this category.
2.2 Dynamic Voltage and Frequency Scaling
The energy consumption is the integral of instantaneous dynamic
power over time. And, the instantaneous power is proportional
to the product of frequency and voltage quadratic1 [41]. In order
1Formally, the formula of dynamic power P, voltage V , and frequency F for an
electronic component that has a capacitative load C is: P = αCV 2F .
Session 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom196to improve the energy efficiency, most of the current processors
enable the DVFS extension [14], which dynamically adjusts the
frequency and voltage of processors cores based on the real time
computation load. On one hand, the integrated circuits are designed
with variable voltages and corresponding frequencies available on-
chip at real time. On the other hand, the regulator driver provided
by hardware distributors directs hardware and exposes interfaces
for privileged software2 to change the frequency and voltage [41].
The vendor-stipulated voltage/frequency operating performance
points (OPPs) [65] attach a frequency with a particular voltage that
guarantees the processor works error-freely and energy-efficiently
under that frequency. System managers can configure the CPU
frequency manually with driver commands. However, no command
can be utilized for them to modify the CPU voltage directly.
2.3 Voltage Management of Krait Architecture
Krait [13] is a processor micro architecture designed by Qualcomm
with ARMv7-A instruction set architecture and is fabricated in 24
nanometers. It is largely embedded in Qualcomm processors, such
as, MSM8960, MSM8x60A, MSM8x30, MSM8960 Pro, APQ8064, and
APQ8084AB. Our verification experiments are mainly enforced on
Google Nexus 6, which has an APQ8084AB processor. Figure 1 il-
lustrates the voltage management framework in Krait architecture.
The SoC usually connects to several hardware peripherals such
as memory, camera, sensor, audio, display, etc. They are usually
sourced from different vendors and may work under different rated
voltages. It is impractical to provide a fixed voltage to all the pe-
ripherals. Therefore, the Krait SoC provides a power management
integrated circuit (PMIC) (PMA8084 in Nexus 6 [32]) that integrates
several hardware regulators to provide different voltages to the
hardware peripherals.
vendor-specific regulator driver [33, 39] to direct the output of PMIC
and wrap the voltage related operations. Secondly, the common
DVFS [38] driver updates the core frequency on the requirement
of energy saving and performance, which will result in the core
voltage modification indirectly. However, all cores share the same
hardware regulator, and thus have the same working voltage which
can support a range of different frequencies for the cores to op-
erate with. This is the hardware vulnerability that our proposed
VoltJockey will exploit.
3 VOLTAGE-BASED HARDWARE FAULT AND
OVERVIEW OF VOLTJOCKEY
Voltage is one of the key factors to ensure the correct functions of
a circuit. In this section, we discuss the fact that inappropriate volt-
ages can violate the timing constraints and introduce unexpected
outputs in digital circuits. Based on the hardware faults introduced
by manipulated voltages, we propose the attack of VoltJockey.
3.1 Timing Constraints of a Circuit
A digital circuit usually consists of multitudinous electronic com-
ponents. For an input, one electronic component spends a certain
time to give a stable and unambiguous output. Therefore, proper
timing constraint should be satisfied to fulfill the valid information
processing in the digital circuit. In fact, debugging the timing con-
straint is a very important and essential step when designing and
validating a sequential circuit.
Figure 2 demonstrates the timing constraint for an example
circuit that starts and ends with a sequential electronic element (flip-
flop (FF) in this example), separately. The middle logic components
transfer the output of the first FF to the input of the last FF. We
assume the two FFs are triggered by the clock pulse’s rising edges.
First, we make the following definitions.
Figure 1: The voltage management of Krait architecture.
There are two significant drivers in the software stack of voltage