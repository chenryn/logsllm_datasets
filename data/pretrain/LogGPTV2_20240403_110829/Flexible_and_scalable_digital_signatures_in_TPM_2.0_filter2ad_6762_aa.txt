title:Flexible and scalable digital signatures in TPM 2.0
author:Liqun Chen and
Jiangtao Li
Flexible and Scalable Digital Signatures in TPM 2.0
Liqun Chen
HP Laboratories
Bristol, UK
PI:EMAIL
ABSTRACT
Trusted Platform Modules (TPM) are multipurpose hard-
ware chips, which provide support for various cryptographic
functions. Flexibility, scalability and high performance are
critical features for a TPM. In this paper, we present the new
method for implementing digital signatures that has been in-
cluded in TPM version 2.0. The core part of this method
is a single TPM signature primitive, which can be called by
diﬀerent software programmes, in order to implement sig-
nature schemes and cryptographic protocols with diﬀerent
security and privacy features. We prove security of the TPM
signature primitive under the static Diﬃe-Hellman assump-
tion and the random oracle model. We demonstrate how to
call this TPM signature primitive to implement anonymous
signatures (Direct Anonymous Attestation), pseudonym sys-
tems (U-Prove), and conventional signatures (the Schnorr
signature). To the best of our knowledge, this is the ﬁrst
signature primitive implemented in a limited hardware en-
vironment capable of supporting various signature schemes
without adding additional hardware complexity compared
to a hardware implementation of a conventional signature
scheme.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection
Keywords
TPM; Digital Signatures; Direct Anonymous Attestation
1.
INTRODUCTION
A Trusted Platform Module (TPM) is a hardware chip
used to provide veriﬁable attestation and integrity for a com-
puter platform and to also provide support for multiple cryp-
tographic functions necessary to implement data protection
in the platform. The implementation of these functions in
hardware has an advantage that it provides much better
tamper resistance than any software. But the disadvantage
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profi or commercial advantage and that copies bear this notice and the full cita-
tion on the firs page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior specifi permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11...$15.00.
http://dx.doi.org/10.1145/2508859.2516729.
Jiangtao Li
Intel Corporation
Portland, Oregon, USA
PI:EMAIL
of hardware implementation is that it usually costs more and
is less ﬂexible than software implementation. Therefore, it
is essential to ﬁnd a good balance between hardware and
software implementation, in order to achieve high security
using the minimum hardware resources.
TPMs can be made by any chip manufacturer, but to
be useful they must all obey standard protocols and use
a common interface. The speciﬁcation of these protocols
and interfaces has been developed by an industrial standards
body, namely the Trusted Computing Group (TCG). The
current version of the TPM speciﬁcation is 1.2 [30]. This
speciﬁcation is also available as the international standard
ISO/IEC 11889 [1]. TPMs implementing version 1.2 of the
standard have been embedded in hundreds of millions of
computing platforms.
TPM 1.2 only requires support for a small number of cryp-
tographic algorithms: SHA-1, HMAC, RSA signature and
encryption, AES1, one-time-pad with XOR for symmetric
encryption, and Direct Anonymous Attestation (DAA). As
the TPM becomes widely used, there is a need for more ﬂex-
ible cryptographic algorithms being supported, because dif-
ferent countries and regions around the world have their own
standard cryptographic algorithms and therefore their own
diﬀering requirements for a cryptographic processor. With
a target of providing support for algorithm agility, the TCG
has developed a new version of TPM speciﬁcations (TPM
2.0), which is now available for public review [31].
One critical challenge when designing the new TPM spec-
iﬁcation is including multiple cryptographic functionalities
and ﬂexibly selective cryptographic algorithms but ensuring
that the chip can be made cheaply and still have high perfor-
mance. In this paper, we describe how the digital signature
primitive in TPM 2.0 was developed.
This work is based on two observations: (1) In a complex
signature scheme, like DAA [5] and U-Prove [24], which we
aim to implement using TPM 2.0, the computation directly
using a private key is only a small part of the computa-
tion of the signature; (2) the computation using the private
key is a self-contained signature operation that can be used
by diﬀerent pieces of software to create diﬀerent/multiple
complicated signatures. Based on these two observations,
we designed a small signature primitive, which is imple-
mented within a TPM and can be called by a number of
other schemes and protocols. The starting point for this
work was the requirement that a TPM be able to support
three diﬀerent types of signature: conventional signatures,
1AES is optional for TPM 1.2 according on revision 116 of
the TPM 1.2 speciﬁcation, published on March 3, 2011.
37DAA signatures, and U-Prove signatures. All of them can be
based on Elliptic Curve Cryptography (ECC). Our goal was
to implement these signature schemes without more over-
head in hardware than implementing a conventional signa-
ture scheme, such as the Schnorr signature scheme [28].
In our scheme the signing functionality is protected by
the TPM, but the veriﬁcation function exists external to
the TPM. This is acceptable, because veriﬁcation does not
involve the private key and anybody is able to verify the
integrity of a signature for themselves. We transfer a major
part of the computation of the signing process to external
software and only keep a small core operation in the TPM.
The assurance of the scheme is not reduced by moving these
computations outside the TPM. The TPM is a principal
signer who holds the private key, the external software only
plays the role of a helper that does not have the key, and it
cannot forge a signature without the aid of the TPM.
The contributions of this paper are summarized as follows:
• We design a new TPM signature primitive, denoted
by tpm.sign. It can be seen as a Schnorr type of signa-
ture scheme [28]. The special feature is that it has two
generators of a group - one is conventional and the
other is derived from a hash of an arbitrary integer.
Each generator is associated with a Schnorr signature.
The signing algorithm combines the two separated sig-
natures into one. We demonstrate how to implement
tpm.sign using a few simple TPM 2.0 commands. Most
of these commands are also used for other TPM func-
tions; as a result tpm.sign requires very little additional
TPM resources.
• We conduct rigorous security analysis of tpm.sign. We
prove that tpm.sign is secure under the static Diﬃe-
Hallmen assumption in the random oracle model.
• We present how to use tpm.sign to implement DAA
in TPM 2.0. Our implementation supports two diﬀer-
ent pairing-based DAA schemes using a single inter-
face. The DAA implementation no longer requires any
heavy, expensive and single purpose TPM commands
as used in TPM 1.2.
• We present how to use tpm.sign to implement U-Prove
1.1 protocol in TPM 2.0. The U-Prove implementation
does not require any extra TPM resources, as it simply
reuses the TPM commands existing for DAA.
Although the proposed scheme was designed for TPM 2.0,
the central idea of the scheme, i.e. using a single hardware-
based signature to enable a variety of cryptographic pro-
tocols,
is not just useful for TPM, but can also beneﬁt
other applications; for example, DAA can be used to pro-
vide an anonymous announcement system in vehicular net-
works [15], and U-Prove can use a smartcard or mobile phone
for diﬀerent applications [24].
In the remainder of the paper, we will ﬁrst introduce the
TPM signature primitive, tpm.sign, in §2, including the se-
curity proof of this algorithm, which will be followed by
implementation details in TPM 2.0 in §3. After that we will
present the ﬁrst application of tpm.sign, which is DAA, in
§4; our implementation supports two diﬀerent pairing-based
DAA schemes. We will further demonstrate that tpm.sign
can be used as the protected hardware device for Microsoft
U-Prove in §5. We will conclude our paper and discuss the
future work in §6.
2. THE TPM SIGNATURE PRIMITIVE
2.1 Functional Description
We ﬁrst describe the TPM signature primitive in TPM
2.0, denoted by tpm.sign. This is a Schnorr type of signa-
ture scheme, and has the following three procedures: key
generation, signing, and veriﬁcation. Only the key gener-
ation and signing procedures are implemented in TPM. In
the rest of the paper, we use the following notation: Let
G = (cid:2)g(cid:3) be a cyclic group of prime order p and g be a gen-
erator. Let H : {0, 1}∗ → Zp and HG : {0, 1}∗ → G be two
collision-resistent hash functions.
Key Generation This procedure selects a random x ← Z
∗
p
and computes y := gx. The secret key is x while the
public key is y.
Signing This procedure takes a message m ∈ {0, 1}∗
, a
, and a group element P1 ∈ G, and
string str ∈ {0, 1}∗
calls the following two sub-procedures:
Commit Oracle (OC ) Given P1, str as input:
1. Verify that P1 ∈ G.
2. If str = ∅, set P2 := 1 (the identity element
3. Choose a random integer r ← Zp.
4. Compute R1 := P r
of G), otherwise, compute P2 := HG(str).
2 , and K2 := P x
2
1 , R2 := P r
where x is the private key.
5. Output R1, R2, and K2.
Sign Oracle (OS) Given ch, m ∈ {0, 1}∗
as input,
where ch = (R1, R2) for simplicity:2
1. Compute c := H(ch, m).
2. Compute s := r + cx mod p using r from the
commit oracle and delete r.
3. Output (c, s).
The signature on m is (P1, P2, R1, R2, K2, c, s). It is a
signature of knowledge
SPK{(x) :K 1 = P x
1 ∧ K2 = P x
2 }(m).
Veriﬁcation This procedure takes the message m, the sig-
nature (P1, P2, R1, R2, K2, c, s), and K1 ∈ G as input,
such that K1 = P x
It performs the
following steps:
1 and K2 = P x
2 .
1. If P1 = 1 and P2 = 1, return 0 (invalid).
2. Verify that H(R1, R2, m) =c.
3. Verify that R1 = P s
1 · K
−c
1
and R2 = P s
2 · K
−c
2 .
4. If any of the veriﬁcation steps fails, return 0 (in-
valid), otherwise return 1 (valid).
The veriﬁcation procedure relies on K1 = P x
1 and K2 =
P x
2 . If they are not guaranteed, then the signature can be
easily forged. In the TPM 2.0 implementation of U-Prove
and Schnorr signature, K1 is the public key y.
In DAA,
the discrete log between P1 and K1 can be veriﬁed by the
veriﬁer through other means. Note that K2 is a pseudonym
2In the TPM implementation of this oracle, ch could be a
hash of R1, R2, and other information.
38of TPM in the DAA and U-Prove schemes. If the same P2
is used, K2 is always the same for a private key x.
Observe that a special case of this signature algorithm
is the Schnorr signature. In the signing procedure, choose
P1 = g and str = ∅ such that R1 = gr and R2 = K2 = 1.
In the veriﬁcation procedure, set P1 = g, K1 = y, and P2 =
K2 = 1. It is easy to see that R1 = gr = gs · y
−c
1
holds and the Schnorr signature can be veriﬁed successfully.
2.2 Security Notions and Proof
−c = P s
1 · K
To prove security of tpm.sign, we use the standard secu-
rity notion for digital signature schemes. We consider ex-
istential forgery where the goal of the adversary is to pro-
duce a valid signature on a message that he chooses. We
consider the chosen-message attack where the adversary is
given adaptive access to signatures on messages of his choice
while attempting to forge a signature. In the TPM 2.0 im-
plementation, the signing procedure is implemented using
two separate TPM commands, one for each sub-procedure.
Besides allowing the adversary to obtain signatures on the
messages of his choice, we allow him to directly query the
commit oracle OC and the sign oracle OS of his choice. For
example, the adversary can query OC a few times before
querying OS, or the adversary can modify ch to a diﬀerent
value before querying OS.
Definition 1
(Security Definition). The tpm.sign
scheme is secure if an existential forgery is computationally
impossible, if the adversary is given adaptive access to sig-
nature on messages of his choice and given adaptive access
to oracles OC and OS.
The security of our TPM 2.0 signature scheme depends
on the following static Diﬃe-Hellman (DH) problem.
Definition 2
(Static DH Oracle). Let G be a cyclic
∗
group of prime order p. Let x be a value in Z
p. Given any
P ∈ G, the static DH oracle on x computes and outputs P x.
(Static DH Problem). Let G be a cyclic
group of prime order p. Given g, h ∈ G such that h = gx, the
static DH problem is to compute x given access to a static
DH oracle on x.
Definition 3
Lemma 1
(The Forking Lemma). Let A be a proba-
bilistic polynomial time turning machine. Let Q and R be
the number of queries that A can ask to the random or-
acle and the number of queries A can ask to the signer,
respectively. Assume that within a time bound T , A pro-
duces a valid signature (m, σ1, h, σ2) with probability  ≥
10(R + 1)(R + Q)/2k. If the triples (σ1, h, σ2) can be simu-
lated without knowing the secret key, with an indistinguish-
able distribution probability, then there is another machine
which has control over the machine obtained from A replac-
ing interaction with the signer by simulation and produces
(cid:3)
two valid signatures (m, σ1, h, σ2) and (m, σ1, h
2) such
that h (cid:10)= h
(cid:3) ≤ 120686QT /.
in expected time T
, σ
(cid:3)
(cid:3)
Theorem 2. The tpm.sign scheme is secure under the se-
curity deﬁnition in Deﬁnition 1 in the random oracle model
under the static DH assumption.
Proof. Suppose there is an adversary A that breaks the
tpm.sign scheme above, i.e., A outputs a forged signature
(m, P1, P2, R1, R2, K2, c, s) after given access to signatures
on messages of its choices and access to oracles OC and OS.
We can construct an algorithm B which makes use of A to
solve the static DH assumption. B is given a pair (g, h = gx),
where B can access the static DH oracle on x in polynomial
time. That is, B can sends any P ∈ G to the static DH
oracle and obtains P x back. The goal is for B to compute
the private key x. Algorithm B works as follows.
Key generation: B sets h as the public key and outputs it
to A and sets logg h as the corresponding private key
x, although B does not know x.
Signature Query: If A makes a signature query on m with
P1 and str as input, B computes P2 := HG(str) and
queries the static DH oracle with P1 and P2 and ob-
2 back. B chooses at ran-
tains K1 = P x
dom c and s and computes R1 := P s