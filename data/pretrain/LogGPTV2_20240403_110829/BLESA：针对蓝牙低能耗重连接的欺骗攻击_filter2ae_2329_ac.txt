为了检验第二个漏洞，测试了四个不同的客户端设备，它们涵盖了具有不同BLE堆栈实现的所有主要平台。在下表中提供了有关这些设备的详细信息。在每个平台上进行实验，以探讨以下两个问题的答案：（1）两种身份验证程序中的哪一个客户端设备在与服务器设备重新连接时会利用吗？
（2）如果客户端设备遵循主动身份验证过程，则其BLE堆栈实现是否存在任何逻辑缺陷，使其容易受到欺骗攻击？
为了回答这两个问题，首先将每个经过测试的客户端与一台服务器（使用Linux笔记本电脑进行仿真，如下表所示）配对，然后断开它们的连接。之后将经过测试的客户端与同一服务器重新连接，并要求客户端读取服务器的属性之一，同时使用Wireshark捕获所有生成的BLE流量。
通过分析与用作客户端的Linuxlaptop对应的流量数据，发现Linux
BLE堆栈（即通过gatttool访问的BlueZ）实现了响应式身份验证过程。结果，Linux
BLE遭受了漏洞2的困扰。相反，发现Android，iOS和WindowsBLE堆栈实现了主动身份验证过程，其中Windows
BLE堆栈严格遵循BLE规范。但是，即使加密/验证失败，Android和iOS设备也会继续重新连接。
**责任披露：**
已于2019年4月8日向Apple和Google报告了此漏洞。Apple已确认本文的发现，已将CVE-2020-9770分配给该漏洞，并进行了修复。尽管Google也确认了该漏洞，但被告知漏洞报告类似于比本研究早三天提交的另一份报告。注意到，测试设备（即具有Android
10的Google Pixel XL）中，较新的Android BLE实施（截至2020年5月）仍然很容易受到攻击。
###  C.针对Linux客户端的BLESA
为了攻击Linux客户端（前表第三行中列出），使用另一台Linux笔记本电脑作为服务器设备。模拟的服务器运行python脚本以提供与敏感属性相对应的服务，该属性可以在安全级别3（即具有加密和身份验证的连接）下读取。为了模拟攻击者，使用带有CSR
4.0蓝牙加密狗的Linux桌面（如下表所示）。攻击者还运行一个Python脚本，该脚本处理从客户端接收到的消息，并针对该客户端启动BLESA。此外，在客户端设备上使用thegatttool发送属性读取请求并接收响应。
为了启动BLESA，攻击者执行以下步骤：❶扫描（bluetoothctl）服务器发送的广告包以记录其MAC地址；
❷将攻击者的蓝牙MAC地址（BlueZ中的bdaddr工具）更改为服务器的MAC地址，以便客户端可以与攻击者重新建立连接；
通过向加密狗发出主机控制器接口（HCI）命令，HCI_LE_Set_Advertising_Parameters，HCI_LE_Set_Advertising_Data和HCI_LE_Set_Advertising_Enable来广播与服务器相同的（模拟的）广播包；
❹在从客户端接收到ATT_READ_REQ消息后，通过ATT_READ_RSP消息注入欺骗数据。
通过执行这些步骤，攻击者成功绕过了Linuxclient的反应式身份验证过程，并诱使客户端接受欺骗数据。
###  D.针对Android / iOS客户端的BLESA
由于BLESA通过将连接降级为纯文本来绕过链路层身份验证，因此与不使用任何应用程序层安全性机制（例如，加密或身份验证）的BLE服务器设备通信的所有基于Android和iOS的客户端设备都容易受到BLESA的攻击。注意到根据先前的研究，从BLE服务器设备读取数据时，有46％的Android应用程序（累计安装量为23.79亿）未利用应用程序层安全性。这意味着至少46％的Andriod应用程序容易受到BLESA的攻击。Apple应用程序商店中的易受攻击的应用程序所占的比例很可能相似。
在这里展示了攻击者（如前表所示）如何通过模拟Oura环将BLESA投放到Google Pixel手机上。攻击者执行前三个步骤，即❶扫描环的广播数据包；
❷克隆广播包和环的MAC地址。此后，攻击者执行以下操作：❹发送HCI命令HCI_LE_Long_Term_Key_Request_Negative_Reply，指示在收到HCI事件HCI_LE_Long_Term_Key_Request时，密钥无法绕过加密和身份验证；❺在之后从ATT_READ_RSQ消息中通过ATT_READ_RSP消息注入欺骗数据。注意到，攻击者可以按照相同的步骤针对iOS客户端设备启动BLESA。
通过执行这些步骤，攻击者成功地将欺骗的数据注入到智能手机中，并且在智能手机上运行的环的配套应用程序将欺骗的数据显示给用户。 上图a显示，在实验中，Oura
Ring设备的实际电池电量为43％。
通过BLESA，成功地向应用程序注入了伪造的电池电量（0％），如图b所示;同时，还注入了另一条欺骗性消息，该消息触发了应用程序中的通知，提示充电已完成，如图c所示。
注意到，尽管第一个欺骗消息使应用程序认为电池电量为0％，但有趣的是，该应用程序接受了另一个欺骗消息（对应于充电完成）并向用户显示错误通知。可以在
上访问此攻击的演示。
## 0x06 Mitigation of BLESA
为了防止BLESA，需要确保客户端与其之前配对的服务器设备之间的重新连接过程安全。可以通过改进BLE堆栈实现和/或更新BLE规范来实现这一目标。
**更新实施：** 就Linux
BLEstack（通过gatttool访问的BlueZ）而言，可以将客户端设备更新为仅采用主动身份验证。根据BlueZ开发人员，他们已将gatttoolas标记为不推荐使用，它将从BlueZ中完全删除gatttool及其源代码，并且仅保留bluetoothctl。此外，可以通过正确遵循BLE规范来缓解已发现的Android和iOS客户端使用的主动身份验证的实现漏洞。更新的实现必须确保当与先前配对的服务器的身份验证失败时，客户端将中止连接并重新启动配对过程。  
一个更根本的问题是，即使对于主动身份验证，BLESA也会在实现中存在其他潜在错误的情况下绕过链路层身份验证。这是安全研究人员建议在多层上进行身份验证的典型方案。实际上，如果在应用程序层进行身份验证/加密，则链路层问题就不会成为可利用的问题。不幸的是，这种改进可能会不能广泛部署，因为很大一部分资源受限的设备无法远程更新。
**修订规范：**
虽然修复错误以使BLE设备快速抵御BLESA是很重要的，但制定出规范以防止更高级的欺骗攻击也同样重要。为此，应防止客户端首先发送属性访问请求然后根据服务器返回的错误消息调整连接的安全级别。换句话说，在发送访问请求之前，客户端应首先获取有关存储在服务器上的属性的访问要求的真实信息，然后调整连接的安全级别以满足这些要求。但是，此方法要求客户端在配对过程中记录服务器上每个属性的安全要求。因此，需要更新规范中的配对过程，以便服务器可以将其每个属性的安全性要求发送给客户端。
## 0x07 Conclusion
在本文中对BLE规范中定义的重新连接过程进行了形式验证，并发现了BLE链路层身份验证机制中的两个设计缺陷。通过利用这些设计缺陷，本研究提出了BLESA，这是一种新颖的BLE欺骗攻击，攻击者可以通过它模拟BLE服务器设备并将欺骗数据提供给先前配对的BLE客户端设备。
BLESA可以轻松地针对运行Linux的BLE设备启动（通过gatttool访问）。
此外，对已发现的现实BLE实现中的漏洞的进一步检查，揭示了Android和iOS
BLE堆栈中的一个相关实现漏洞。由于存在此漏洞，这两个堆栈都容易受到BLESA的攻击。为了展示BLESA，详细介绍了如何使用此攻击来将来自健身追踪器的数据欺骗到Android智能手机。此外，估计了可能受到此攻击影响的现有Android应用程序的数量。最后讨论了重新连接过程中可能的改进，以从根本上减轻BLESA等欺骗攻击的威胁。