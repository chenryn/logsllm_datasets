227
217
188
172
156
111
104
99
85
78
75
48
43
27
23
14
3.87
1.17
2.86
3.84
3.37
2.18
1.68
1.68
1.62
1.49
0.32
4.09
1.57
0.76
0.10
2.33
0.31
0.14
0.10
15.15
1.97
6.52
9.43
7.54
4.01
2.98
2.85
2.75
3.68
0.50
8.45
3.00
1.17
0.15
3.39
0.36
0.17
0.12
13,669.71
13,143.17
1,196,978.79
77,329.87
34,012.16
35,926.76
13,893.55
2,388.59
8,182.24
7,426.38
382.60
54,394.71
21,808.51
2,712.50
525.72
49,540.12
61.40
801.64
78.10
0.38
0.23
0.38
0.68
0.25
0.35
0.34
0.07
0.03
0.86
0.02
2.85
0.07
0.01
0.01
0.17
0.00
0.00
0.00
0.76%
0.72%
2.98%
3.11%
28.41%
15.63% 10.79%
3.37%
3.05%
4.77%
8.96%
5.35%
1.46%
1.00%
0.72%
0.78%
0.53%
0.85% 12.03%
0.13%
0.24%
24.74% 49.01%
0.65%
0.17%
0.04%
2.47%
0.05%
0.01%
0.03%
6.39%
5.19%
2.91%
3.95%
1.42% 81.08% 10.54%
9.46%
4.40%
4.24%
2.17%
5.66%
1.94%
4.71%
0.87%
1.06%
0.12%
0.52%
0.25%
0.46% 13.67%
0.02%
0.26%
2.26% 35.26%
1.60%
1.32%
0.26%
0.18%
0.12%
0.03%
2.49%
3.08%
0.00%
0.04%
0.03%
0.05%
0.00%
0.01%
3.16%
0.18%
0.07%
5.66%
0.02%
0.06%
0.02%
The users, downloads, traﬃc, and access time are all computed by aggregating the data of each app in
the category
The percentile of W -Traﬃc (C -Traﬃc) and W -Time (C -Time) refer to the data traﬃc and foreground
access time over Wi-Fi (W) and cellular (C) network, respectively.
from diﬀerent categories to enable the fast delivery of po-
tentially co-installed apps to end-users.
Given two app categories M and N, we denote the number
of unique devices that install an app either in M or N as D
(M ∪ N ), and the number of unique devices that install apps
from both in M and N as D (M ∩ N ). We then compute
D(M∪N )
D(M∩N to indicate how likely that the apps in M and N
are installed together. We also take into account the special
case, where M =N , indicating how many users install more
than one app in this category.
Figure 8 shows the probability distribution that apps from
diﬀerent categories are selected together. The categories are
sorted in the descending order of the number of apps. An
immediate observation is that categories having more apps
are more closely correlated. In addition, apps providing re-
lated functionalities are more likely to be selected together.
For example, users may want to share a video from a video-
player app to friends by employing a communication app
(e.g., correlation between COMMUNICATION and VIDEO
is 0.77), or use a viewer app to open a document that is
received by an instant messenger app (e.g., correlation be-
tween TOOL and COMMUNICATION is 0.88 ).
It is not surprising that users may install more than one
app in some categories. For example, in GAME, TOOL, and
COMMUNICATION, the correlations are all more than 0.8.
The result suggests that users have more interests and needs
in these categories.
4.3 Uninstallation Patterns
We next to explore a question: how an app is likely
to be disliked or abandoned by users. Such question
is quite crucial to app developers, marketplace operators,
and end-users. App developers can know how much their
apps are not appreciated by users, so that they can ﬁnd and
ﬁx problems in time to avoid user loss. Marketplace oper-
ators can improve their recommendation systems to ﬁlter
unpopular, low-quality, or even malware apps. End-users
can avoid downloads of frequently abandoned apps and po-
tential threats.
For the question, the absolute number of unistallations of
an app may not be a good indicator. For example, apps
with high uninstallations may also have high downloads. So
we compute the metric of installation/uninstallation ratio,
denoted as Ω(appi), to indicate how likely an app would be
abandoned.
(cid:80) Idevicei and (cid:80) Udevicei represent the number of devices
Given an app appi, we ﬁrst compute
(cid:80) Idevicei
(cid:80) Udevicei
, where
that installed and uninstalled appi, respectively. We extract
all devices that appear in both installation and uninstalla-
tion logs of appi from the Universal User Set. For each
device, we order the appi’s installation and uninstallation log
entries by their timestamps, in the form of 
and . Here, ti refers to the timestamp when
the installation or uninstallation action was performed. In
particular, an uninstallation action could not be used unless
an installation action was made previously, i.e., Iti ≺ Uti.
Doing so assures that appi is exactly uninstalled.
The lower value of Ω(appi) an app holds, the higher like-
lihood it is abandoned. For better illustration, Figure 9(a)
shows the scattered distribution of Ω(appi) (denoted as “I/U
ratio”) of top 12,000 apps ranked by their downloads. The
median value of Ω is about 7.46. The Ω of 80% apps’ is less
than 11. In this way, Ω can exactly tell how much an
app is actually abandoned by users. However, Ω(appi)
is not a good signal to comprehensively reﬂect how much
an app is disliked by users, because users may not always
uninstall an app even if they do not need the app any longer.
To better understand the users’ attitude towards apps, we
evaluate the lifecycle of abandoned apps by combining the
temporal information to Ω. Such evaluation is motivated by
an intuition that an app is likely to be a disliked one if it
is uninstalled shortly after installed. To this end, we com-
pute the app’s lifecyle by the timestamps of installation and
uninstallation. We have two immediate observations. First,
from Figure 9(b), if an app is exactly uninstalled, its lifecy-
cle can be identiﬁed. About 40% abandoned apps can
“survive” for only less than one day, and about 93%
abandoned apps can “survive” for less than a week.
465Figure 8: Heatmap of illustrating the relationship of co-installed app categories.
Second, from Figure 9(c), we can ﬁnd a positive corre-
lation among Ω and lifecycle of abandoned apps. In
other words, apps with a lower Ω are more likely to be unin-
stalled within a shorter interval.
5. NETWORK ACTIVITY PATTERNS
Understanding network activities of apps is a highly in-
teresting topic. Previous studies have already revealed some
ﬁndings on network usage of apps, e.g., TCP ﬂows on tier-1
network [24], or usage logs by ﬁeld studies [20, 23]. In con-
trast, our study is performed at a much ﬁner granularity.
First, we distinguish daily data traﬃc and access time from
Wi-Fi and cellular network, respectively. Second, we distin-
guish daily data traﬃc and access time from foreground and
background, respectively.
Based on the granularity of network activities, our study
aims to explore some ﬁndings not covered by previous ef-
forts. End-users can know which apps are network-intensive,
and result in more data traﬃc and battery life. In this way,
end-users can identify “undesirable” apps, optimize improper
network privilege, or even remove these apps. Marketplace
operators can also detect some potentially problematic apps.
App developers can ﬁx possible bugs, and OS-vendors can
patch to avoid threats. Network providers can leverage net-
work behavior and suggest proper data plans for end-users.
5.1 Data Trafﬁc Patterns
First, we identify “network-intensive” apps, i.e., apps that
consume more data traﬃc than others. We aggregate apps
by their categories and summarize the total traﬃc consump-
tion (in GB) from Wi-Fi and cellular, respectively. As shown
in Table 1, VIDEO apps are the most “traﬃc-intensive”.
Apps from the VIDEO category consume 81.08% of Wi-Fi
traﬃc and 28.41% cellular traﬃc against all apps.
Inter-
estingly, apps from TOOL and SYSTEM TOOL consume
a lot of data traﬃc. The apps in these two categories in-
clude apps of input method, anti-virus, app management,
etc. Users heavily rely on these apps to manage, optimize,
and personalize their devices.
We then classify data traﬃc into two dimensions: (1) Wi-
Fi and cellular; (2) foreground and background. Such classi-
ﬁcation can provide us more insights of traﬃc consumption.
We show the detailed summary in Table 2.
5.1.1 Trafﬁc of Wi-Fi and Cellular
In most categories,
it is not surprising that Wi-Fi ac-
counts for more than 60% in total traﬃc. In the categories
of VIDEO, TOOL, MUSIC, SYSTEM TOOL, SHOPPING,
and EDUCATION, more than 80% data traﬃc is from Wi-
Fi. A possible reason is that most of these apps are usually
used in places with stable Wi-Fi connection, e.g., at home
or cafe. The situation is quite diﬀerent in COMMUNICA-
TION. The traﬃc from cellular network accounts for about
39.9%. It is not surprising because users may use COMMU-
NICATION apps whenever a network connection is avail-
able.
5.1.2 Trafﬁc of Foreground and Background
We then identify the foreground and background traﬃc
of an app, respectively. Often, the foreground traﬃc is gen-
erated when users interact with the app.
In an Android
OS, a foreground app can be determined if the app is cur-
rently at the top of the activity stack.
In contrast, the
background traﬃc implies that the app is still connecting
to network even users do not interact with it. From Ta-
ble 2, the foreground traﬃc accounts for more than 60% in
most categories. Foreground traﬃc accounts for about 50%
466(a) Possibility of app abadonment
(b) Lifecyle distribution of abandoned
apps
(c) Lifecycle of
apps
frequently abandoned
Figure 9: Lifecyle of abandoned app.
Table 2: Network Summary by App Category
C -Traﬃc
W -Traﬃc
C -Traﬃc
W -Traﬃc
C -Time
W -Time
C -Time
W -Time
(B)
45.13%
39.13%
15.90%
35.19%
20.65%
51.57%
17.09%
39.38%
43.11%
24.64%