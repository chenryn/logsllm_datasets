headers and payloads using functions
val parse_record: r:record → Tot (option (n:nat × c:lbytes n))
val format_record: n:nat → c:lbytes n → Tot (r:record)
(ensures parse_record r = Some (n,c))
These function speciﬁcations sufﬁce to establish our theo-
rems below. We now give the concrete format function for
TLS 1.3:
Function format((cid:3) : len, f : fragment (cid:3))
f.data(cid:8)[f.ct](cid:8) pad0((cid:3) − |f.data|)
where pad0 n is the string of n 0x00 bytes. We verify the
post-condition of format by typing. We omit the correspond-
ing parse function and the code for processing headers.
475
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
where f0 (respectively, f1) is a fragment (respectively, a ﬁnal
fragment), with ﬁxed content type and data 0(cid:4).
Ciphersuite
General bound
(cid:5)(cid:6)
(cid:7)
+ qd
(cid:2)
(cid:3)
qe
1 +
(214+1)
Lhse(A[qe, qd]) ≤
Prf (B[qe(1 + (cid:11)(214 + 1)/(cid:3)b(cid:12)) + qd + j0])
+ MMac1(C[214 + 1 + 46, qd, qe + qd])
(cid:4)
Prf (B
) + qd
293
Prp(B[qb]) + q2
where qb = qe(1 + (cid:11)(214 + 1)/16(cid:12)) + qd + 1
Prp(B(cid:9)
224.5
with re-keying every 224.5 records (counting
qe for all streams, and qd ≤ 260 per stream)
2129 + qd
260 + 1
256
234.5
) + 1
(cid:8)
qe
b
2118
(cid:11)
64
(cid:10)
ChaCha20-
Poly1305
AES128-GCM
AES256-GCM
AES128-GCM
AES128-GCM
The game logs the encryption stream in F , indexed by
fragment sequence numbers and ciphertexts. It has an oracle
for creating decryptors; it stores their state in a table D,
indexed by some abstract d chosen by the adversary. It does
not model stream termination, enforced purely by typing the
stream content.
Given A against Stae, we construct B against Aead with
Theorem 4 (Lhse perfectly reduces to Stae):
Lhse(A[qe, qd]) = Stae(B[qe, qd, 214 + 1, (cid:2)a])
where (cid:2)a is 0 for TLS 1.3 and 13 for TLS 1.2.
Multi-Stream LHSE In the next section (as in our interface
above), we use a multi-instance Lhse game, deﬁned below.
Game Multi(Lhseb)
E ← ∅; return {Gen, GenD, Encrypt, Decrypt}
Oracle Gen(i)
if (E[i] = ⊥) E[i] $← Lhseb()
Oracle GenD(i, d)
if (E[i] = ⊥) E[i] $← Lhseb()
E[i].GenD(d)
Oracle Decrypt(i, d, v)
if (E[i] = ⊥) return ⊥
return E[i].Decrypt(d, v)
Oracle Encrypt(i, (cid:3), f )
if (E[i] = ⊥) return ⊥
return E[i].Encrypt((cid:3), f )
For every fresh index i passed to Gen, we spawn an instance
of Lhse and we record its state and oracle in table E. In
all other cases, the oracles above now look up the shared
instance at i and forward the call to the instance oracle.
Security bounds for TLS Table I gives the concrete bounds
by ciphersuites, setting (cid:2)p to 214 + 1 and (cid:2)a to 0 (or 13
for TLS 1.2). ChaCha20 uses a Davies-Meyer construction
and is considered a good PRF. For AES-GCM ciphersuites,
blocks are relatively small (16 bytes) so we incur a loss
q
of
2129 by the PRP/PRF switching lemma [6], intuitively
accounting for the probability of observing collisions on
ciphertext blocks and inferring the corresponding plaintext
blocks are different. As observed e.g. by Luykx and Paterson
[34], this factor limits the amount of data that can be sent
securely using AES-GCM.
2
b
Based on their suggestion to send at most 224.5 fragments
with the same key (itself based on a proof by [9] for the
UF-1CMA security of GHASH that avoids the full PRF-
PRP switching loss), our implementation may automatically
trigger TLS re-keying after sending 224.5 fragments. This
strategy results in the bound in the last row, which no longer
depends quadratically on qe and thus achieves a poor man’s
form of beyond birthday bound security.
VIII. THE TLS 1.3 RECORD PROTOCOL
Figure 4 presents the TLS 1.3 protocol from draft-19,
focusing only on how it drives the record layer. In par-
ticular, this presentation ignores most of the details of the
476
SUMMARY OF SECURITY BOUNDS FOR THE TLS AEAD CIPHERSUITES.
Table I
handshake. Figure 1 in Section I illustrates the sub-protocol
streams from the point of view of the client.
The client sends the ClientHello message in cleartext,
and may then immediately install a fresh 0-RTT key kc
0 in
the record layer and use it to encrypt a stream of early data.
The server receives this message and, if it accepts 0-RTT,
also installs the 0-RTT key kc
0 and decrypts the client’s data.
Otherwise, it discards this ﬁrst stream. In parallel, the server
sends a ServerHello message that allows both parties
to derive encryption keys kc
h for the handshake
messages, and kc
1 for application data. The server
installs ks
h in the record and uses it to encrypt a ﬁrst stream
of handshake messages, ending with a ﬁnished message that
1. If the server supports
triggers the installation of key ks
0.5-RTT, it may immediately start using ks
1 for sending
application data.
h and ks
1 and ks
Once 0-RTT stream is complete (signaled by an
end-of-early-data message)
and after processing the
ServerHello, the client installs the handshake keys kc
h
and ks
h for encryption and decryption. It completes the
handshake by sending its own encrypted stream, ending with
a ﬁnished message, and installs the application trafﬁc keys
1 and ks
1.
kc
Upon completing the handshake, the server also installs
1 for decryption. After this point, the connection is fully
kc
established and both parties use the installed application
trafﬁc keys for all content types: AppData, Alert, and even
Handshake messages (such as KeyUpdate).
Later, the client (or the server) can terminate their current
output stream by sending either a KeyUpdate handshake
message or a close-notify alert message. In the ﬁrst case,
it installs and starts using the next application trafﬁc key
2 (then kc
3, etc.). The server (or the client) responds
kc
accordingly, with a KeyUpdate or a close-notify. In the
ﬁrst case, it installs and starts using the next trafﬁc keys kc
2
and ks
2. In the second case, the connection is closed.
In all cases, each party uses a single stream at a time in
each direction, for sending and receiving all content types,
and each stream ends with a distinguished message that
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
Client C
Knows sk C, psk
log 0
Server S
Knows sk S, psk
log 0
ClientHello(nC, gx, a0, . . .)
0-RTT Keys (encrypt-only):
0 = kdf(psk , log 0)
kc
0-RTT Keys (decrypt-only):
0 = kdf(psk , log 0)
kc
log 1
enck
c
0 (Data(m0))
enck
0 (EndOfEarlyData)
c
log 1
ServerHello(nS, gy, a1, . . .)
Handshake Keys:
= kdf(psk , gxy, log 1)
kc
h, ks
h
log 2
Handshake Keys:
= kdf(psk , gxy, log 1)
kc
h, ks
h
log 2
enck
s
h (ServerCert-Finished(cert S, . . .))
0.5/1-RTT Trafﬁc Keys:
kc
1, ks
1 = kdf(psk , gxy, log 2)
0.5/1-RTT Trafﬁc Keys:
kc
1, ks
1 = kdf(psk , gxy, log 2)
enck
s
1 (Data(m0.5))
c
enck
h (ClientCert-Finished(cert C, . . .))
Handshake Complete
Update Keys (C → S):
2 = kdf(kc
1)
kc
c
s
enck
enck
enck
1 (Data(m1))
1 (Data(m2))
1 (KeyUpdate)
c
c
enck
enck
2 (Data(m3))
1 (Data(m4))
s
Handshake Complete
Update Keys (C → S):
2 = kdf(kc
1)
kc
c
enck
enck
2 (Alert(close_notify))
1 (Alert(close_notify))
s
Duplex Data Stream:
C → S : m0, m1, m3
S → C : m0.5, m2, m4
Duplex Data Stream:
C → S : m0, m1, m3
S → C : m0.5, m2, m4
Figure 4. TLS 1.3 draft-19 message exchange, seen from the viewpoint
of the Record Protocol. Dotted arrows represent zero or more (encrypted)
application data fragments. Each key stands for an instance of LHSE.
clearly indicates its ﬁnal fragment. 0-RTT data ends with an
end-of-early-data message; encrypted handshake messages
in both directions end with the ﬁnished message; 0.5 and
1-RTT data streams end with a key update or a close-notify
alert. This precaution ensures that any truncations at the
end of a stream will cause a connection failure, rather than
continuing with the next stream.
Performance/Security Trade-Offs. 0-RTT and 0.5-RTT
signiﬁcantly decrease communications latency, but
they
yield weaker application security. 0-RTT trafﬁc has weaker
forward secrecy and is subject to replays: if multiple servers
may accept the connection and (as usual) do not share an
anti-replay cache, then they may all receive and process
(preﬁxes of) the same early trafﬁc data. This motivates our
model with multiple decryptors, and also requires the server
application to defer some effects of early-data processing
till handshake completion. Also, since data is sent before
ciphersuite negotiation, the client may use relatively weak al-
gorithms (or broken implementations) that the server would
otherwise have a chance to refuse.
0.5-RTT incurs similar, lesser risks as the server sends
data before the handshake completes. The server is subject
to 0-RTT truncation attacks if it starts sending data before
receiving the client’s end of early data. Also, if the server
relies on a client signature, it should not send sensitive
data before handshake completion. In contrast with 0-RTT,
sending 0.5-RTT trafﬁc is a local conﬁguration issue for the
server; the client receives 0.5-RTT data after completing the
handshake and does not distinguish it from 1-RTT data.
TLS 1.2 is routinely deployed with ‘FalseStart’, which
is similar to 0.5-RTT but in the other direction, the client
may locally decide to start sending encrypted application
data as soon as it can compute the keys, before handshake
completion. This places additional trust in the client’s ci-
phersuite whitelist, inasmuch as sensitive data may be sent
before conﬁrming their correct negotiation with the server.
A Minimal Record Game Next, we present a simpliﬁed,
more liberal model of the Record that seeks to abstract
away from the details of how the connection evolves.
This facilitates the statement of a standalone ‘record-layer’
theorem, but our approach similarly applies to our full
F(cid:2) implementation integrated with miTLS, which carefully
keeps track of the sequence of keys, as outlined at the end
of this section.
We abstract
the state of the connection by a context
bitstring; as the handshake progresses, we concatenate more
relevant handshake parameters to the context. For instance,
after ClientHello, the context consists of the client’s
nonce nC and its proposed ciphersuites and key exchange
values; after ServerHello, it additionally contains the
server nonce nS, algorithm choice, key exchange value, etc.
Instead of modeling duplex channels between clients and
servers, we consider separate sequences of streams in each
direction. Our game (Figure 5) models re-keying and context
extension for a sequence of streams (all in the same direc-
tion), covering 0-RTT, 0.5-RTT, and 1-RTT trafﬁc, relying
on the multi-instance game SE = Multi(Lhse) (see §VII).