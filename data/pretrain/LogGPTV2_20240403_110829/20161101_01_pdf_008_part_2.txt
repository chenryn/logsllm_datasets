### Redo Record Identification and Structure

- **RBA (Redo Block Address) Identifies the Start of a Redo Record:**
  - **Fields:**
    - **Log Sequence Number:** 0x3666
    - **Block Number within Redo Log:** 0xcf
    - **Byte Number within Block:** 0x10

### Change Vector

- **Description:**
  - A change vector describes a change to a single data block.
  - It can apply to:
    - Undo headers
    - Undo blocks
    - Data segment headers
    - Data blocks
  - The change vector is created in the Program Global Area (PGA) before the data block buffer is modified.

- **Structure:**
  - **Header**
  - **Array of Change Record Lengths**
  - **Array of Change Records**

- **Example:**
  - **Change Header:**
    - Length Vector: 16
  - **Change Records:**
    - Change Record 1: 20
    - Change Record 2: 48
    - Change Record 3: 28
    - Change Record 4: 29
    - Change Record 5: 2
    - Change Record 6: 2
    - Change Record 7: 10

### Change Vector Header

- **Every change vector has a header, for example:**
  - `CHANGE #2 TYP:0 CLS: 1 AFN:5 DBA:0x0144d023 SCN:0x0000.0ac67cce SEQ: 4 OP:11.5`
  
- **Fields:**
  - **CHANGE:** Change number
  - **TYP:** Change type
  - **CLS:** Class
  - **AFN:** Absolute File Number
  - **DBA:** Relative Database Block Address
  - **SCN:** System Change Number
  - **SEQ:** Sequence Number (relative to SCN)
  - **OP:** Operation Code

### Transactions and Redo Logs

- **Statements and Redo Logs:**
  - **Example:**
    ```sql
    UPDATE t1
    SET c2 = 101
    WHERE c1 = 1;
    ```
    - **Undo Header:** 5.2
    - **Slot Status:**
      - Slot 0: c2 = 100
      - Slot 0: c2 = 101
    - **Redo:** 11.5
    - **Data Block:**
      - Slot 0: c2 = 101
      - Slot 0: c2 = 100
    - **Commit:** 5.4

### Redo Record Data

- **For Data Blocks:**
  - **INSERT:**
    ```sql
    INSERT INTO score (team, runs, wickets)
    VALUES ('AUS', 100, 4);
    ```
  - **UPDATE:**
    ```sql
    UPDATE score
    SET runs = 104, wickets = 5
    WHERE team = 'AUS';
    ```
  - **DELETE:**
    ```sql
    DELETE FROM score
    WHERE team = 'AUS';
    ```

- **Undo Operations:**
  - **OP 5.1 (11.1):** Delete Row Piece - DRP
  - **OP 5.1 (11.1):** Update Row Piece - URP
  - **OP 5.1 (11.1):** Insert Row Piece - IRP

- **Redo Operations:**
  - **OP 11.2:** Insert Row Piece - IRP
  - **OP 11.5:** Update Row Piece - URP
  - **OP 11.3:** Delete Row Piece - DRP

### Global Temporary Tables

- **Statements and Redo:**
  - **Statement #1:**
    - **HEADER:** 5.2
    - **UNDO #1:** 5.1
    - **REDO #1:** 11.2
  - **Statement #2:**
    - **UNDO #2:** 5.1
    - **REDO #2:** 11.2
  - **Statement #3:**
    - **UNDO #3:** 5.1
    - **REDO #3:** 11.2
  - **COMMIT:** 5.4

### Protection Against Partial Writes on Disk

- **Redo Page Partial Write Protection:**
  - Oracle can be configured to use checksums to verify blocks in the redo log files.
  - If block checking is enabled, Oracle computes a checksum for each redo log block written to the current log.
  - The checksum is written in the header of the block and used to detect corruption in a redo log block.

### LGWR Process

- **The log writer process (LGWR) writes one contiguous portion of the buffer to disk:**
  - A commit record when a user process commits a transaction
  - Redo log buffers every three seconds or when the redo log buffer is one-third full
  - When a DBW process writes modified buffers to disk, if necessary

- **Group Commits:**
  - During high activity, LGWR can write to the redo log file using group commits.
  - For example, when LGWR is writing T-1 Commit operation redo entries to disk, other users issue COMMIT statements.
  - After the first transaction's entries are written to the redo log file, the entire list of redo entries of waiting transactions can be written to disk in one operation, reducing I/O.

### Redo Implementation in PostgreSQL

- **Key Structures:**
  - [Details to be provided]

- **Advantages & Disadvantages:**
  - [Details to be provided]

### Redo Implementation in Oracle

- **Advantages:**
  1. Updates have less redo as they write only changed data.
  2. Group commits by LGWR can reduce overall I/O and improve performance.
  3. Writing in block sizes the same as hardware/OS block size provides benefits.
  4. Log writer flushes redo if the redo log buffer is one-third full, ensuring no contention for the Redo Log Buffer.

- **Disadvantages:**
  1. There can be significant space wastage in Redo log files during high database activity.
  2. Redo for Insert and Delete SQL statements is more extensive compared to PostgreSQL because it must write redo for undo data generated.
  3. Headers size is larger compared to PostgreSQL, with multiple headers for one Redo Record (one for each Redo Record and one for each Change Vector).

### Improvements in PostgreSQL

- **Proposed Improvements:**
  1. **Reduce WAL for Update Operations:**
     - Write only changed column values and reconstruct the full row during recovery.
  2. **Flushing Data Page Contents:**
     - Flushing data page contents during commit by the main user process is costly; other databases do this in the background.
  3. **Group Commits by WAL Writer:**
     - Introduce a concept similar to group commits by the WAL writer to improve performance during high transaction volumes.
  4. **Tuple Visibility Logic:**
     - Improve the tuple visibility logic for setting the transaction status in a tuple during asynchronous commits.
  5. **Reduce Redundant Redo Block Writes:**
     - Optimize the writing of the same Redo Block repeatedly if the transaction data is small.

### Need for WAL Reduction for Update

- **In most telecom scenarios, the Update operation updates a few columns out of all used in the schema.**
  - **Example:**
    ```sql
    CREATE TABLE callinfo (
      logtime date not null,
      updatetime date,
      callerno varchar2(20),
      agentid varchar2(10),
      status int,
      i0 int,
      c0 varchar2(20),
      i1 int,
      c1 varchar2(20),
      i2 int,
      c2 varchar2(20),
      i3 int,
      c3 varchar2(20),
      i4 int,
      c4 varchar2(20),
      i5 int,
      c5 varchar2(20),
      i6 int,
      c6 varchar2(20),
      i7 int,
      c7 varchar2(20),
      i8 int,
      c8 varchar2(20),
      i9 int,
      c9 varchar2(20),
      content varchar2(512)
    );

    UPDATE callinfo
    SET status = status + 1, i0 = i0 + 1
    WHERE callerno = :callerno;
    ```

### Method-1 to Reduce WAL for Update Operations

- **Only send the changed data to WAL and reconstruct the tuple during recovery.**
  - Reconstruction requires the old tuple data and the new tuple changed data to reconstruct the row at the time of recovery.
  - After the row is generated, it will be inserted into the data page.
  - This method is better when the old and new tuples are on the same page; otherwise, it needs to perform I/O during recovery.
  - The changed columns are logged in a byte-by-byte instruction set format using the tuple descriptor.

- **Example:**
  ```sql
  CREATE TABLE foo (col1 integer, col2 integer, col3 varchar(50), col4 varchar(50));
  INSERT INTO foo VALUES (1, 1, repeat('abc', 15), repeat('def', 15));

  UPDATE foo
  SET col2 = 100
  WHERE col1 = 1;
  ```
  - **Diff Instructions:**
    - COPY 4 bytes from old to new tuple
    - IGNORE 4 bytes on old tuple
    - ADD 4 bytes from new tuple
    - COPY 90 bytes from old to new tuple

- **Advantages:**
  - The diff format can encode the diff instructions in a small number of bytes, significantly reducing the WAL volume.
  - The simplicity of the diff algorithm is important, but it introduces additional CPU usage and potential contention since the diff is calculated while the block is locked.
  - It is proposed that the diff would only be calculated when the new tuple length exceeds a hard-coded limit.

### Method-2 to Reduce WAL for Update Operations

- **This method applies only if the table has fixed-length columns (e.g., int, char, float).**
  - Keep only the changed data and its offset in the WAL.
  - Reconstruction requires the old tuple data and the new tuple changed data to reconstruct the row at the time of recovery.
  - After the row is generated, it will be inserted into the data page.
  - This method is better when the old and new tuples are on the same page; otherwise, it needs to perform I/O during recovery.

- **Example:**
  ```sql
  CREATE TABLE foo (col1 integer, col2 integer, col3 varchar(50), col4 varchar(50));
  INSERT INTO foo VALUES (1, 1, repeat('abc', 15), repeat('def', 15));

  UPDATE foo
  SET col2 = 100
  WHERE col1 = 1;
  ```
  - **Log Format:**
    - Old tuple location: Offset: 5, length: 4, value: 100
    - Offset and length can be stored in 2-3 bytes, considering this will be applied to tuples of length less than 2000 bytes.

### Comparison of Method-1 and Method-2

- **Method-1:**
  - Valid irrespective of the data type of columns.
  - Contention chances are higher as the information required for logging should be available during tuple formation.
  - Generation of the new tuple during recovery can be slower due to the need for a byte-by-byte reconstruction.

- **Method-2:**
  - Applied only in certain cases depending on the data type.
  - Contention chances are lower as the information required for logging should be available during tuple formation.
  - Generation of the new tuple during recovery can be faster as it needs to make a copy of the original tuple and then replace new values at specified locations.

Thank you.