this case), we argue that they could still be vulnerable/exploited in an extended
threat model in which external HTML ﬁles are not trusted (which could be also
reasonable considering that these ﬁles could be manipulated by malicious apps
in the phone).
False Negatives. To evaluate the false negatives of BridgeScope, we randomly
selected 20 apps from those non-potentially-vulnerable apps that had at least
one WebView. Thorough manual review and testing (almost 1 h per app) of how
the WebViews are used in those 20 apps, showed that none were potentially
vulnerable, suggesting that indeed our false negative rate is relatively low.
5.3 Overall Findings
Diverse WebView implementations. Based on our static analysis result,
we found that WebView implementations are indeed diverse. Table 6 shows the
distribution of diﬀerent WebView implementations in our dataset.
Table 6. Diverse WebView implementations
Android Default
WebView
Mozilla Rhino
Based WebView
Chromeview XWalkView Total
11,823
526
20
0
11,913
Evadable Security Checks in WebView event handlers. As shown in
Sect. 2, event handlers perform security checks on the URL to be connected.
However, in our evaluation we found that the customized event handler did
not properly protect sensitive information leakage. Once sensitive information
is successfully obtained in the web context, it can always be directly sent out
through a JavaScript API or by dynamically creating DOM elements [9].
Precisely and Scalably Vetting JavaScript Bridge in Android Hybrid Apps
161
Attacking capability. To further understand the attack capability on those
potentially vulnerable apps, we analyze the diﬀerent sinks and sensitive APIs
of those conﬁrmed potentially vulnerable apps and summarize the attack capa-
bilities shown in Table 7. The most common attack enabled is to steal private
information from content providers. This is due to the fact that a large number
of potentially vulnerable apps use sensitive JavaScript Bridges to load authenti-
cation tokens from content providers. We also observe that attackers can launch
diverse attacks including some critical attacks such as sending text messages,
sending emails, and playing videos.
Table 7. Attacking capability distribution
Attack capability
App number Attack capability
App number
Leaking Content Provider Content 241
Sending text message by intent 57
Leaking the Device ID
Leaking phone numbers
Directly sending text message
42
14
2
Sending email by intent
Playing video by intent
Create calendar by intent
Downloading/Saving Picture
344
SOP Violation Attack
51
61
171
41
Table 8. Diﬃculty to exploit vulnerabilities
Network channel HTTP Third-Party HTTPS HTTPS
Diﬃculty
Number
Easy Medium
224
103
Hard
290
Attack complexity. To reduce the false positive caused by our analysis assump-
tion (Sect. 4.1) and further understand the relative diﬃculty of launching attacks
on vulnerable apps, we deﬁne three attack complexity levels:
– Hard: The content in a vulnerable WebView is loaded over ﬁrst-party HTTPS.
In this case, those vulnerable JavaScript Bridges could be intentional bridges
to the trusted JavaScript in the ﬁrst-party content. However, it could still be
attacked by hijacking HTTPS traﬃc [3], especially considering that HTTPS
can be very poorly/insecurely implemented or used in mobile apps [11,13].
– Medium: The vulnerable WebView loads third-party content over HTTPS. It
faces similar risks as above [3,11,13]. In addition, attackers could compromise
third-party content (such as through a Content Delivery Network [20]) to
inject the malicious JavaScript.
– Easy: The vulnerable WebView loads web content through HTTP. In this
case, attackers can easily inject the malicious JavaScript into HTTP traﬃc.
Based on the above deﬁnitions, Table 8 shows the results of attacking com-
plexity analysis of our automatically veriﬁed vulnerable apps. We can see that
the majority of vulnerable apps are hard to attack, but we also note that
162
G. Yang et al.
most apps that fall into this category contain JavaScript Bridges that explic-
itly allow trusted JavaScript to access sensitive information from users. In other
words, as long as the transport protocol is compromised, attacker capabilities are
enhanced. Recent disclosures of the fragility of HTTPS [5,6] makes this scenario
more trivial than not.
We also observe that there exists a large number of vulnerable apps using the
HTTP protocol, which can be obviously easily attacked through code injection
since communication is in clear text.
5.4 Case Studies
We present two interesting case studies of vulnerable apps here. In the interest
of responsible disclosure, we avoid naming the speciﬁc apps at this time while
we notify developers and coordinate possible ﬁxes.
Case 1: Advertisement library vulnerability. In this case, the vulnerable
app loads an advertisement library, which is a common practice in app develop-
ment. However, this ad library contains a vulnerable WebView, which is used to
communicate with the advertiser’s website to retrieve advertising content over
the HTTP protocol. BridgeScope detects only one vulnerable JavaScript Bridge
imported into this vulnerable WebView. However, 56 methods are available in
this vulnerable JavaScript Bridge. Among them, 19 are critical methods, which
can be invoked by attackers to steal sensitive information (such as device ID,
WIFI status, network operator name, and user’s internal data) and download or
delete ﬁles and folders in the device.
We found 12 apps in our dataset that used this vulnerable advertisement
library, making all of them equally vulnerable.
Case 2: Vulnerable browser apps. Developers often extend WebView to
quickly create and specify their own customized browser apps. Many special-
ized ‘browsers’ on the app market use this model. We crawled 100 popular
browser apps from Google Play in January 2016. 74 of them are merely exten-
sions of the standard WebView. BridgeScope successfully detected 6 vulnerable
browser apps that can be exploited to leak sensitive information such as device ID
(5 apps), phone number (1 app), serial number (1 app).
We also found one popular browsers app, downloaded by more than 100,000
users, which suﬀers from SOP Violation Attacks. The app is designed to provide
an ad-free user experience by ﬁltering out ads using a blacklist. A bridge function,
named ‘applyAdsRules(String url)’, checks whether the url is related to an
advertisement website. If the url is ‘safe’, it will be sent to the app’s main Activity
to render it using the key API W ebV iew.loadU rl(url). This ﬁts the pattern of
the SOP violation attack, giving an attacker the ability to load content that he
knows not to be blacklisted by the app’s ﬁlter function to launch client-side XSS
attacks.
Diﬀerent from other apps, these browser apps have much larger attack sur-
faces since the website (e.g., third-party) to be accessed and the protocol used
in communications (e.g., HTTP or HTTPS) are speciﬁed by users, making them
Precisely and Scalably Vetting JavaScript Bridge in Android Hybrid Apps
163
relatively easy to attack by simply redirecting a user to an attacker-controlled
website.
5.5 Results on Real-World Malware
In addition to ﬁnding potential vulnerabilities in benign apps, we also test our
tool on real-world malware that uses JavaScript Bridge techniques. By searching
reports from Honeynet [2] and Palo Alto Networks [24], we collected 23 malicious
apps that were reported to employ JavaScript Bridge techniques.
By running BridgeScope on these malicious apps, we found a total of 68 sensi-
tive bridges. Although the malicious servers were already down, BridgeScope still
successfully identiﬁed malicious behaviors hidden in JavaScript Bridges, includ-
ing leaking of sensitive information, sending text messages, and prompting fake
notiﬁcations, which are the same as the report descriptions about these malware
by Honeynet [2] and Palo Alto Networks [24].
6 Discussion
Limitation in Static Analysis. Similar to other existing static analysis
tools [4,33], our work does not handle implicit data ﬂow, or low level libraries
written in C/C++, which may lead to false negatives. However, C/C++ library
could be mitigated by modeling their functions, such as system.arraycopy(). We
leave implicit data ﬂow tracking as our future work.
More comments on HTTPS. In this paper, some of detected vulnerable
apps require hijacking HTTPS in order to exploit them. We consider that
while HTTPS may pose a higher level of complexity and diﬃculty for exploit-
ing JavaScript Bridge vulnerabilities, it is still a realistic threat vector because
HTTPS is widely implemented insecurely/poorly in mobile apps [11,13] and sev-
eral recent high proﬁle works also showed the inherent issues of HTTPS [5,6,20].
Therefore, once attackers can successfully hijack HTTPS, they can exploit our
reported vulnerabilities to launch diverse critical attacks (shown in Table 7).
7 Related Work
WebView Security. Luo et al. [22] exposed attack vectors in WebView, and
demonstrated the JavaScript Bridge vulnerability. Chin et al. [8] analyzed Web-
View vulnerabilities that result in excess authorization and ﬁle-based cross-zone
scripting attacks. Mutchler et al. [23] did a generic large scale study on security
issues (such as unsafe navigation and unsafe content retrieval) in Android apps
equipped with WebView. Wu et al. [34] discussed ﬁle leakage problems caused
by ﬁle:// and content:// schemes in WebView. Georgiev et al. [14] did a study
on a popular third-party hybrid middleware frameworks. Hassanshahi et al. [17]
studied the security issues caused by intent hyperlinks.
164
G. Yang et al.
The JavaScript Bridge vulnerability is rooted in the conﬂict between secu-
rity models of the native and web context [14], and the lack of privilege isola-
tion [19]. The approach NoFrak proposed by [14] partially solves the conﬂict
by extending the web’s same original policy (SOP) to the local resources. Other
works such as MobileIFC [28] also propose a similar concept of extending SOP to
mediate access control between the mobile and web context within a hybrid app.
Jin et al. [19] proposed a defense solution for JavaScript Bridge vulnerabilities in
hybrid apps, with focus on privilege separation based on iFrame instances within
the WebView. In [31], the authors proposed Draco, a uniform and ﬁne-grained
access control framework for web code running in Android default WebView.
Privacy Detection And Protection. Taint analysis is an eﬀective approach for
detecting privacy leakage. On Android, systems such as TaintDroid [10] and Flow-
Droid [4] are among some of the most well-known taint-based systems. Existing
Android analysis tools [4,7,12,15,33] may be useful for detection of vulnerabili-
ties. However, existing work either performed coarse-grained analysis, or imposed
high performance overhead [7,18]. Furthermore, existing work could not handle
the semantics of JavaScript Bridge and diverse WebView implementations.
8 Conclusion
The integration of mobile and web through the use of WebView requires compro-
mises to be made in the security of both platforms. Subsequently, we ﬁnd that
the current design and practices in the implementation of WebView causes a
class of generic vulnerabilities that can be exploited by attackers to cause serious
problems on mobile devices. We implement an analysis framework, BridgeScope,
which can automatically discover vulnerabilities in a hybrid mobile app and gen-
erate test attack code that is then automatically veriﬁed as a feasible exploit.
Our system is implemented in Android, and we provide evaluation that shows
our system is a feasible approach to automatically and precisely discover vulner-
abilities at large scale.
Acknowledgments. This material is based upon work supported in part by the the
National Science Foundation (NSF) under Grant no. 0954096 and 1314823. Any opin-
ions, ﬁndings, and conclusions or recommendations expressed in this material are those
of the authors and do not necessarily reﬂect the views of NSF.
References
1. Binary Expression Tree. https://en.wikipedia.org/wiki/Binary expression tree
2. Is android malware served in theatres more sophisticated? http://www.honeynet.
org/node/1081
3. Akhawe, D., Barth, A., Lam, P.E., Mitchell, J., Song, D.: Towards a formal founda-
tion of web security. In: Computer Security Foundations Symposium (CSF) (2010)
4. Arzt, S., Rasthofer, S., Fritz, C., Bodden, E., Bartel, A., Klein, J., Le Traon, Y.,
Octeau, D., McDaniel, P.: Flowdroid: precise context, ﬂow, ﬁeld, object-sensitive
and lifecycle-aware taint analysis for android apps. In: PLDI (2014)
Precisely and Scalably Vetting JavaScript Bridge in Android Hybrid Apps
165
5. Aviram, N., Schinzel, S., Somorovsky, J., Heninger, N., Dankel, M., Steube, J.,
Valenta, L., Adrian, D., Halderman, J.A., Dukhovni, V., K¨asper, E., Cohney, S.,
Engels, S., Paar, C., Shavitt, Y.: Drown: breaking TLS using SSLv2. In: USENIX
Security (2016)
6. Beurdouche, B., Bhargavan, K., Delignat-Lavaud, A., Fournet, C., Kohlweiss, M.,
Pironti, A., Strub, P.-Y., Zinzindohoue, J.K.: A messy state of the union: taming
the composite state machines of TLS. In: IEEE Symposium on Security and Privacy
(2015)
7. Calzavara, S., Grishchenko, I., Maﬀei, M.: Horndroid: practical and sound static
analysis of android applications by SMT solving. In: IEEE European Symposium
on Security and Privacy, EuroS&P (2016)
8. Chin, E., Wagner, D.: Bifocals: analyzing WebView vulnerabilities in android appli-
cations. In: Kim, Y., Lee, H., Perrig, A. (eds.) WISA 2013. LNCS, vol. 8267, pp.
138–159. Springer, Cham (2014). doi:10.1007/978-3-319-05149-9 9
9. Demetriou, S., Merrill, W., Yang, W., Zhang, A., Gunter, C.A.: Free for all!. assess-
ing user data exposure to advertising libraries on android. In: NDSS (2016)
10. Enck, W., Gilbert, P., Chun, B.-G., Cox, L.P., Jung, J., McDaniel, P., Sheth, A.N.:
Taintdroid: an information-ﬂow tracking system for realtime privacy monitoring on
smartphones. In: OSDI (2010)
11. Fahl, S., Harbach, M., Muders, T., Baumg¨artner, L., Freisleben, B., Smith, M.:
Why eve and mallory love android: an analysis of android ssl (in)security. In:
ACM CCS (2012)
12. Fuchs, A.P., Chaudhuri, A., Foster, J.S.: Scandroid: Automated security certiﬁca-
tion of android applications. Manuscript, Univ. of Maryland (2009)
13. Georgiev, M., Iyengar, S., Jana, S., Anubhai, R., Boneh, D., Shmatikov, V.: The
most dangerous code in the world: Validating ssl certiﬁcates in non-browser soft-
ware. In: ACM CCS (2012)
14. Georgiev, M., Jana, S., Shmatikov, V.: Breaking and ﬁxing origin-based access
control in hybrid web/mobile application frameworks. In: NDSS, vol. 2014 (2014)
15. Gordon, M.I., Kim, D., Perkins, J., Gilham, L., Nguyen, N., Rinard, M.:
Information-ﬂow analysis of android applications in droidsafe. In: NDSS (2015)
16. Hardy, N.: The confused deputy: (or why capabilities might have been invented).
ACM SIGOPS Operating Syst. Rev. 22(4), 36–38 (1988)
17. Hassanshahi, B., Jia, Y., Yap, R.H.C., Saxena, P., Liang, Z.: Web-to-application
injection attacks on android: characterization and detection. In: Pernul, G., Ryan,
P.Y.A., Weippl, E. (eds.) ESORICS 2015. LNCS, vol. 9327, pp. 577–598. Springer,
Cham (2015). doi:10.1007/978-3-319-24177-7 29
18. Huang, W., Dong, Y., Milanova, A., Dolby, J.: Scalable and precise taint analysis
for android. In: ISSTA, pp. 106–117 (2015)
19. Jin, X., Wang, L., Luo, T., Du, W.: Fine-grained access control for HTML5-based
mobile applications in android. In: Desmedt, Y. (ed.) ISC 2013. LNCS, vol. 7807,
pp. 309–318. Springer, Cham (2015). doi:10.1007/978-3-319-27659-5 22
20. Liang, J., Jiang, J., Duan, H., Li, K., Wan, T., Wu, J.: When https meets CDN: a
case of authentication in delegated service. In: IEEE Symposium on Security and
Privacy (2014)
21. Lu, L., Li, Z., Wu, Z., Lee, W., Jiang, G.: Chex: statically vetting android apps
for component hijacking vulnerabilities. In: ACM CCS (2012)
22. Luo, T., Hao, H., Du, W., Wang, Y., Yin, H.: Attacks on webview in the android
system. In: ASCAC (2011)
166
G. Yang et al.
23. Mutchler, P., Doupe, A., Mitchell, J., Kruegel, C., Vigna, G., Doup, A., Mitchell,
J., Kruegel, C., Vigna, G.: A large-scale study of mobile web app. security. In:
MoST (2015)
24. P.A. Networks. New Android Trojan Xbot Phishes Credit Cards and Bank
Accounts, Encrypts Devices for Ransom. http://researchcenter.paloaltonetworks.
com/2016/02/new-android-trojan-xbot-phishes-credit-cards-and-bank-accounts-
encrypts-devices-for-ransom/
25. Rasthofer, S., Arzt, S., Bodden, E.: A machine-learning approach for classifying
and categorizing android sources and sinks. In: NDSS, pp. 23–26 (2014)
26. Rastogi, V., Shao, R., Chen, Y., Pan, X., Zou, S., Riley, R.: Are these ads safe:
detecting hidden attacks through the mobile app-web interfaces. In: NDSS (2016)
27. Sedol, S., Johari, R.: Survey of cross-site scripting attack in android apps. Int. J.
Inform. Comput. Technol. 4(11), 1079–1084 (2014)
28. Singh, K.: Practical context-aware permission control for hybrid mobile applica-
tions. In: Stolfo, S.J., Stavrou, A., Wright, C.V. (eds.) RAID 2013. LNCS, vol.
8145, pp. 307–327. Springer, Heidelberg (2013). doi:10.1007/978-3-642-41284-4 16
29. Sounthiraraj, D., Sahs, J., Greenwood, G., Lin, Z., Khan, L.: SMV-HUNTER:
large scale, automated detection of SSL/TLS man-in-the-middle vulnerabilities in
android apps. In: NDSS (2014)
30. Steensgaard, B.: Points-to analysis in almost linear time. In: POPL, New York,
NY, USA, pp. 32–41 (1996)
31. Tuncay, G.S., Demetriou, S., Gunter, C.A.: Draco: a system for uniform and ﬁne-
grained access control for web code on android. In: ACM CCS (2016)
32. Wang, R., Xing, L., Wang, X., Chen, S.: Unauthorized origin crossing on mobile
platforms: threats and mitigation. In: ACM CCS (2013)
33. Wei, F., Roy, S., Ou, X., et al.: Amandroid: a precise and general inter-component
data ﬂow analysis framework for security vetting of android apps. In: ACM CCS
(2014)
34. Wu, D., Chang, R.K.C.: Indirect File Leaks in Mobile Applications. MoST (2015)