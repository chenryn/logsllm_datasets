### 5.2 Extended Threat Model

In this case, we argue that even if the external HTML files are not trusted, these apps could still be vulnerable to exploitation. This is a reasonable assumption, as these files can be manipulated by malicious applications on the phone.

### 5.3 False Negatives

To evaluate the false negatives of BridgeScope, we randomly selected 20 apps from those that were initially classified as non-potentially-vulnerable but had at least one WebView. A thorough manual review and testing (taking approximately one hour per app) of how WebViews are used in these 20 apps showed that none were potentially vulnerable. This suggests that our false negative rate is relatively low.

### 5.4 Overall Findings

#### Diverse WebView Implementations

Based on our static analysis results, we found that WebView implementations are indeed diverse. Table 6 shows the distribution of different WebView implementations in our dataset.

**Table 6. Diverse WebView Implementations**

| Implementation Type | Number of Apps |
|---------------------|----------------|
| Android Default WebView | 11,823 |
| Mozilla Rhino Based WebView | 526 |
| Chromeview | 20 |
| XWalkView | 0 |
| **Total** | **11,913** |

#### Evadable Security Checks in WebView Event Handlers

As discussed in Section 2, event handlers perform security checks on the URLs to be connected. However, in our evaluation, we found that customized event handlers did not adequately protect against sensitive information leakage. Once sensitive information is obtained in the web context, it can be directly sent out through a JavaScript API or by dynamically creating DOM elements [9].

#### Attacking Capabilities

To further understand the attack capabilities of potentially vulnerable apps, we analyzed the different sinks and sensitive APIs. Table 7 summarizes the attack capabilities. The most common attack is the theft of private information from content providers, likely due to the frequent use of sensitive JavaScript Bridges to load authentication tokens from these providers. We also observed that attackers can launch various critical attacks, such as sending text messages, emails, and playing videos.

**Table 7. Attack Capability Distribution**

| Attack Capability | Number of Apps |
|-------------------|-----------------|
| Leaking Content Provider Content | 241 |
| Sending Text Message by Intent | 57 |
| Leaking Device ID | 42 |
| Leaking Phone Numbers | 14 |
| Directly Sending Text Message | 2 |
| Sending Email by Intent | 344 |
| Playing Video by Intent | 51 |
| Creating Calendar by Intent | 61 |
| Downloading/Saving Picture | 171 |
| SOP Violation Attack | 41 |

#### Difficulty to Exploit Vulnerabilities

To reduce false positives caused by our analysis assumptions and to understand the relative difficulty of launching attacks on vulnerable apps, we defined three attack complexity levels:

- **Hard**: The content in a vulnerable WebView is loaded over first-party HTTPS. In this case, the vulnerable JavaScript Bridges might be intentional bridges to trusted JavaScript in the first-party content. However, these can still be attacked by hijacking HTTPS traffic [3], especially considering the poor implementation of HTTPS in mobile apps [11,13].
- **Medium**: The vulnerable WebView loads third-party content over HTTPS. It faces similar risks as above [3,11,13]. Additionally, attackers could compromise third-party content (e.g., through a Content Delivery Network [20]) to inject malicious JavaScript.
- **Easy**: The vulnerable WebView loads web content through HTTP. In this case, attackers can easily inject malicious JavaScript into HTTP traffic.

**Table 8. Difficulty to Exploit Vulnerabilities**

| Network Channel | Difficulty | Number of Apps |
|-----------------|------------|-----------------|
| HTTP | Easy | 224 |
| Third-Party HTTPS | Medium | 103 |
| First-Party HTTPS | Hard | 290 |

Most vulnerable apps are hard to attack, but many of these contain JavaScript Bridges that explicitly allow trusted JavaScript to access sensitive user information. Recent disclosures about the fragility of HTTPS [5,6] make this scenario more plausible. We also observed a significant number of vulnerable apps using the HTTP protocol, which can be easily attacked through code injection since communication is in clear text.

### 5.5 Case Studies

We present two interesting case studies of vulnerable apps. For responsible disclosure, we avoid naming the specific apps while notifying developers and coordinating possible fixes.

#### Case 1: Advertisement Library Vulnerability

In this case, the vulnerable app loads an advertisement library, a common practice in app development. However, this ad library contains a vulnerable WebView, which communicates with the advertiser's website over HTTP. BridgeScope detected only one vulnerable JavaScript Bridge imported into this WebView, but 56 methods were available, including 19 critical methods that can be invoked by attackers to steal sensitive information (such as device ID, WiFi status, network operator name, and user’s internal data) and download or delete files and folders on the device.

We found 12 apps in our dataset that used this vulnerable advertisement library, making all of them equally vulnerable.

#### Case 2: Vulnerable Browser Apps

Developers often extend WebView to create custom browser apps. Many specialized 'browsers' on the app market use this model. We crawled 100 popular browser apps from Google Play in January 2016, and 74 of them were merely extensions of the standard WebView. BridgeScope successfully detected 6 vulnerable browser apps that can be exploited to leak sensitive information such as device ID (5 apps), phone number (1 app), and serial number (1 app).

We also found one popular browser app, downloaded by more than 100,000 users, that suffers from SOP Violation Attacks. The app provides an ad-free experience by filtering out ads using a blacklist. A bridge function, `applyAdsRules(String url)`, checks whether the URL is related to an advertisement website. If the URL is 'safe,' it is sent to the app’s main Activity to render it using the key API `WebView.loadUrl(url)`. This fits the pattern of an SOP violation attack, allowing an attacker to load content that bypasses the app’s filter to launch client-side XSS attacks.

Unlike other apps, these browser apps have much larger attack surfaces because the websites and protocols used in communications (e.g., HTTP or HTTPS) are specified by users, making them relatively easy to attack by redirecting users to attacker-controlled websites.

### 5.6 Results on Real-World Malware

In addition to finding potential vulnerabilities in benign apps, we tested BridgeScope on real-world malware that uses JavaScript Bridge techniques. By searching reports from Honeynet [2] and Palo Alto Networks [24], we collected 23 malicious apps that employed JavaScript Bridge techniques.

Running BridgeScope on these malicious apps, we found a total of 68 sensitive bridges. Although the malicious servers were down, BridgeScope successfully identified malicious behaviors hidden in JavaScript Bridges, including leaking sensitive information, sending text messages, and prompting fake notifications, consistent with the report descriptions by Honeynet [2] and Palo Alto Networks [24].

### 6. Discussion

#### Limitation in Static Analysis

Similar to other existing static analysis tools [4,33], our work does not handle implicit data flow or low-level libraries written in C/C++, which may lead to false negatives. However, C/C++ libraries can be mitigated by modeling their functions, such as `system.arraycopy()`. We leave implicit data flow tracking for future work.

#### More Comments on HTTPS

Some of the detected vulnerable apps require hijacking HTTPS to exploit them. While HTTPS may pose a higher level of complexity and difficulty for exploiting JavaScript Bridge vulnerabilities, it is still a realistic threat vector. HTTPS is widely implemented insecurely in mobile apps [11,13], and recent high-profile works have shown inherent issues with HTTPS [5,6,20]. Therefore, once attackers successfully hijack HTTPS, they can exploit our reported vulnerabilities to launch various critical attacks (as shown in Table 7).

### 7. Related Work

#### WebView Security

Luo et al. [22] exposed attack vectors in WebView and demonstrated the JavaScript Bridge vulnerability. Chin et al. [8] analyzed WebView vulnerabilities leading to excess authorization and file-based cross-zone scripting attacks. Mutchler et al. [23] conducted a large-scale study on security issues (such as unsafe navigation and content retrieval) in Android apps with WebView. Wu et al. [34] discussed file leakage problems caused by `file://` and `content://` schemes in WebView. Georgiev et al. [14] studied popular third-party hybrid middleware frameworks. Hassanshahi et al. [17] examined security issues caused by intent hyperlinks.

The JavaScript Bridge vulnerability stems from the conflict between the security models of the native and web contexts [14] and the lack of privilege isolation [19]. The NoFrak approach proposed by [14] partially resolves this conflict by extending the web's Same-Origin Policy (SOP) to local resources. Other works, such as MobileIFC [28], propose similar concepts for extending SOP to mediate access control between the mobile and web contexts within hybrid apps. Jin et al. [19] proposed a defense solution for JavaScript Bridge vulnerabilities in hybrid apps, focusing on privilege separation based on iFrame instances within the WebView. In [31], the authors proposed Draco, a uniform and fine-grained access control framework for web code running in the Android default WebView.

#### Privacy Detection and Protection

Taint analysis is an effective approach for detecting privacy leakage. On Android, systems such as TaintDroid [10] and FlowDroid [4] are well-known taint-based systems. Existing Android analysis tools [4,7,12,15,33] may be useful for detecting vulnerabilities. However, existing work either performs coarse-grained analysis or imposes high performance overhead [7,18]. Furthermore, existing work cannot handle the semantics of JavaScript Bridge and diverse WebView implementations.

### 8. Conclusion

The integration of mobile and web through the use of WebView requires compromises in the security of both platforms. We find that the current design and practices in WebView implementation cause a class of generic vulnerabilities that can be exploited by attackers to cause serious problems on mobile devices. We implement an analysis framework, BridgeScope, which can automatically discover vulnerabilities in hybrid mobile apps and generate test attack code that is then automatically verified as a feasible exploit. Our system is implemented in Android, and our evaluation shows that it is a feasible approach to automatically and precisely discover vulnerabilities at scale.

### Acknowledgments

This material is based upon work supported in part by the National Science Foundation (NSF) under Grant no. 0954096 and 1314823. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF.

### References

1. Binary Expression Tree. https://en.wikipedia.org/wiki/Binary_expression_tree
2. Is android malware served in theatres more sophisticated? http://www.honeynet.org/node/1081
3. Akhawe, D., Barth, A., Lam, P.E., Mitchell, J., Song, D.: Towards a formal foundation of web security. In: Computer Security Foundations Symposium (CSF) (2010)
4. Arzt, S., Rasthofer, S., Fritz, C., Bodden, E., Bartel, A., Klein, J., Le Traon, Y., Octeau, D., McDaniel, P.: Flowdroid: precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps. In: PLDI (2014)
5. Aviram, N., Schinzel, S., Somorovsky, J., Heninger, N., Dankel, M., Steube, J., Valenta, L., Adrian, D., Halderman, J.A., Dukhovni, V., Kasper, E., Cohney, S., Engels, S., Paar, C., Shavitt, Y.: Drown: breaking TLS using SSLv2. In: USENIX Security (2016)
6. Beurdouche, B., Bhargavan, K., Delignat-Lavaud, A., Fournet, C., Kohlweiss, M., Pironti, A., Strub, P.-Y., Zinzindohoue, J.K.: A messy state of the union: taming the composite state machines of TLS. In: IEEE Symposium on Security and Privacy (2015)
7. Calzavara, S., Grishchenko, I., Maffei, M.: Horndroid: practical and sound static analysis of android applications by SMT solving. In: IEEE European Symposium on Security and Privacy, EuroS&P (2016)
8. Chin, E., Wagner, D.: Bifocals: analyzing WebView vulnerabilities in android applications. In: Kim, Y., Lee, H., Perrig, A. (eds.) WISA 2013. LNCS, vol. 8267, pp. 138–159. Springer, Cham (2014). doi:10.1007/978-3-319-05149-9_9
9. Demetriou, S., Merrill, W., Yang, W., Zhang, A., Gunter, C.A.: Free for all! Assessing user data exposure to advertising libraries on android. In: NDSS (2016)
10. Enck, W., Gilbert, P., Chun, B.-G., Cox, L.P., Jung, J., McDaniel, P., Sheth, A.N.: Taintdroid: an information-flow tracking system for realtime privacy monitoring on smartphones. In: OSDI (2010)
11. Fahl, S., Harbach, M., Muders, T., Baumgärtner, L., Freisleben, B., Smith, M.: Why Eve and Mallory love Android: an analysis of Android SSL (in)security. In: ACM CCS (2012)
12. Fuchs, A.P., Chaudhuri, A., Foster, J.S.: Scandroid: Automated security certification of android applications. Manuscript, Univ. of Maryland (2009)
13. Georgiev, M., Iyengar, S., Jana, S., Anubhai, R., Boneh, D., Shmatikov, V.: The most dangerous code in the world: Validating SSL certificates in non-browser software. In: ACM CCS (2012)
14. Georgiev, M., Jana, S., Shmatikov, V.: Breaking and fixing origin-based access control in hybrid web/mobile application frameworks. In: NDSS, vol. 2014 (2014)
15. Gordon, M.I., Kim, D., Perkins, J., Gilham, L., Nguyen, N., Rinard, M.: Information-flow analysis of android applications in DroidSafe. In: NDSS (2015)
16. Hardy, N.: The confused deputy: (or why capabilities might have been invented). ACM SIGOPS Operating Syst. Rev. 22(4), 36–38 (1988)
17. Hassanshahi, B., Jia, Y., Yap, R.H.C., Saxena, P., Liang, Z.: Web-to-application injection attacks on Android: characterization and detection. In: Pernul, G., Ryan, P.Y.A., Weippl, E. (eds.) ESORICS 2015. LNCS, vol. 9327, pp. 577–598. Springer, Cham (2015). doi:10.1007/978-3-319-24177-7_29
18. Huang, W., Dong, Y., Milanova, A., Dolby, J.: Scalable and precise taint analysis for Android. In: ISSTA, pp. 106–117 (2015)
19. Jin, X., Wang, L., Luo, T., Du, W.: Fine-grained access control for HTML5-based mobile applications in Android. In: Desmedt, Y. (ed.) ISC 2013. LNCS, vol. 7807, pp. 309–318. Springer, Cham (2015). doi:10.1007/978-3-319-27659-5_22
20. Liang, J., Jiang, J., Duan, H., Li, K., Wan, T., Wu, J.: When HTTPS meets CDN: a case of authentication in delegated service. In: IEEE Symposium on Security and Privacy (2014)
21. Lu, L., Li, Z., Wu, Z., Lee, W., Jiang, G.: Chex: statically vetting Android apps for component hijacking vulnerabilities. In: ACM CCS (2012)
22. Luo, T., Hao, H., Du, W., Wang, Y., Yin, H.: Attacks on WebView in the Android system. In: ASCAC (2011)
23. Mutchler, P., Doupe, A., Mitchell, J., Kruegel, C., Vigna, G., Doup, A., Mitchell, J., Kruegel, C., Vigna, G.: A large-scale study of mobile web app. security. In: MoST (2015)
24. P.A. Networks. New Android Trojan Xbot Phishes Credit Cards and Bank Accounts, Encrypts Devices for Ransom. http://researchcenter.paloaltonetworks.com/2016/02/new-android-trojan-xbot-phishes-credit-cards-and-bank-accounts-encrypts-devices-for-ransom/
25. Rasthofer, S., Arzt, S., Bodden, E.: A machine-learning approach for classifying and categorizing Android sources and sinks. In: NDSS, pp. 23–26 (2014)
26. Rastogi, V., Shao, R., Chen, Y., Pan, X., Zou, S., Riley, R.: Are these ads safe: detecting hidden attacks through the mobile app-web interfaces. In: NDSS (2016)
27. Sedol, S., Johari, R.: Survey of cross-site scripting attack in Android apps. Int. J. Inform. Comput. Technol. 4(11), 1079–1084 (2014)
28. Singh, K.: Practical context-aware permission control for hybrid mobile applications. In: Stolfo, S.J., Stavrou, A., Wright, C.V. (eds.) RAID 2013. LNCS, vol. 8145, pp. 307–327. Springer, Heidelberg (2013). doi:10.1007/978-3-642-41284-4_16
29. Sounthiraraj, D., Sahs, J., Greenwood, G., Lin, Z., Khan, L.: SMV-HUNTER: large scale, automated detection of SSL/TLS man-in-the-middle vulnerabilities in Android apps. In: NDSS (2014)
30. Steensgaard, B.: Points-to analysis in almost linear time. In: POPL, New York, NY, USA, pp. 32–41 (1996)
31. Tuncay, G.S., Demetriou, S., Gunter, C.A.: Draco: a system for uniform and fine-grained access control for web code on Android. In: ACM CCS (2016)
32. Wang, R., Xing, L., Wang, X., Chen, S.: Unauthorized origin crossing on mobile platforms: threats and mitigation. In: ACM CCS (2013)
33. Wei, F., Roy, S., Ou, X., et al.: Amandroid: a precise and general inter-component data flow analysis framework for security vetting of Android apps. In: ACM CCS (2014)
34. Wu, D., Chang, R.K.C.: Indirect File Leaks in Mobile Applications. MoST (2015)