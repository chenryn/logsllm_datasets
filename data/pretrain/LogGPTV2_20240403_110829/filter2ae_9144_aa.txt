# MacOS上的堆利用
##### 译文声明
本文是翻译文章，文章原作者 ChaMd5安全团队，文章来源： ChaMd5安全团队
原文地址：[https://mp.weixin.qq.com/s?timestamp=1555292797&src=3&ver=1&signature=on5LP301rw1I6VdKUWDKN*5xJPijYxTSRFMKT8OalzwkDX*c5EylKaSk1Vo8*m8knUcVQubvDnX87JEb4fYtK9ehkp6sleX5XtgxL-DT8ciwxFQVsthC9BLsg09iC5nc-LtTmdMDx35iWUHHByBE*92I45UNY0Sv6CcLHS69TeE=](https://mp.weixin.qq.com/s?timestamp=1555292797&src=3&ver=1&signature=on5LP301rw1I6VdKUWDKN*5xJPijYxTSRFMKT8OalzwkDX*c5EylKaSk1Vo8*m8knUcVQubvDnX87JEb4fYtK9ehkp6sleX5XtgxL-DT8ciwxFQVsthC9BLsg09iC5nc-LtTmdMDx35iWUHHByBE*92I45UNY0Sv6CcLHS69TeE=)
译文仅供参考，具体内容表达以及含义原文为准。
**0CTF / TCTF2019**
比赛时出了一道MacOS下的堆利用题目，这里以该题为背景介绍下MacOS下的堆利用攻击。前面主要详细介绍下MacOS系统的堆，如果想看利用可跳到后面的`applepie
exp编写`介绍章节。
## MacOS下的堆介绍
MacOS高版本系统使用Magazine Allocator进行堆分配，低版本使用Scalable
Allocator，详细结构这里不做介绍，它在分配时按照申请大小将堆分为三类 **tiny** , **small** , **large**  
其中tiny&small用一个叫做 **Quantum ( Q )** 的单位管理
  * **tiny** (Q = 16) ( **tiny**  tiny堆在释放时，将该chunk挂在freelist上，这里和Linux类似
比较有意思的一点是，tiny堆在释放时，会在chunk上 **写入元数据** ，我们值得关心的就是这一点
        # -----------------------------------------------        # AAAAA....
        #           
        #                   ...AAA...  
        #                                       .....AAAA
        # -----------------------------------------------        #                       |
        #                       | after free
        #                       |
        #                       ↓
        # -----------------------------------------------        # checksum(prev_pointer) | checksum(next_pointer)
        #           size         | ...
        #                       ...
        #                        | size
        # -----------------------------------------------    
这里有两个pointer和Linux上chunk的头极其相似，同样的，它们的作用也一样，在freelist上获取chunk时将会用这个pointer来进行链表的操作，还有chunk在free时，会进行合并检查，然后用这两个pointer进行unlink操作。  
 ** _但是_**
这里如果按照Linux的方式去攻击堆时，就会发现这里的checksum会阻止堆的元数据被溢出修改。`后面会大致介绍这里的checksum`
关于tiny堆释放时的需要注意的另外一个点：
    a1 = malloc(496)
    a2 = malloc(496)
    a3 = malloc(496)
    free(a1)
    free(a3)
    #这里会发现a1, a3会的prev_pointer & next_pointer会正确的关联起来
    free(a2)
    #当a2也free之后，会发现a2, a3的头部被清空，a1头部的size却是三者之和，并且移动到small堆中
#### **small堆**
small堆与tiny堆不同，释放后会先移动到cache中，等到下一个small堆被free时，当前的才会被移动到freelist中
###  堆的释放 – chunk元数据(metadata)的变化
####  mag_free_list
这里便是要讲上文提到的freelist,`mag_free_list`是个负责存放地址的列表，一共包含32个元素，各个元素处储存着已经free的对应
**Q** 值的chunk地址，前31个分别是从1Q~31Q的chunk freelist，第32个存放比31Q还要大的chunk freelist。  
当新的chunk被free时，将按照chunk的大小，存放在对应Q值的freelist上，并按照双向链表设置好checksum(prev_pointer),
checksum(next_pointer) {参照Linux的freelist}
####  mag_free_bit_map
这个则如名字所示，按位来标记Q(n)是否具有freelist
###  堆的释放 – checksum
程序在运行时，都会随机生成一个cookie，这个cookie会pointer进行下面的计算生成一个checksum, 然后将(checksum > 4)运算后将checksum保存在高位上，以便检测堆的元数据是否被溢出破坏
    static MALLOC_INLINE uintptr_t
    free_list_checksum_ptr(rack_t *rack, void *ptr)
    {
        uintptr_t p = (uintptr_t)ptr;
        return (p >> NYBBLE) | ((free_list_gen_checksum(p ^ rack->cookie) & (uintptr_t)0xF) u;
        t = (t > ANTI_NYBBLE); // compiles to rotate instruction
        p.u = t & ~(uintptr_t)0xF;
        if ((t ^ free_list_gen_checksum(p.u ^ rack->cookie)) & (uintptr_t)0xF) {
            free_list_checksum_botch(rack, ptr, (void *)ptr->u);
            __builtin_trap();
        }
        return p.p;
    }
    static MALLOC_INLINE uintptr_t
    free_list_gen_checksum(uintptr_t ptr)
    {
        uint8_t chk;
        chk = (unsigned char)(ptr >> 0);
        chk += (unsigned char)(ptr >> 8);
        chk += (unsigned char)(ptr >> 16);
        chk += (unsigned char)(ptr >> 24);
    #if __LP64__
        chk += (unsigned char)(ptr >> 32);
        chk += (unsigned char)(ptr >> 40);
        chk += (unsigned char)(ptr >> 48);
        chk += (unsigned char)(ptr >> 56);
    #endif
        return chk;
    }
###  magazine_t
这个则包含了上述介绍过的各种数据，比如chunk cache, 以及mag_free_bit_map, mag_free_list,
以及最后一个被使用的region, 以及所有region的链表
    struct magazine_t {
        ...
        void *mag_last_free;
        unsigned[8] mag_bitmap;
        free_list_t*[256] mag_free_list;
        region_t mag_last_region;
        region_trailer_t *firstNode, *lastNode;
        ...
    }
###  堆的申请
整个申请流程是首先从cache中寻找是否有对应的堆，如果没有接着从freelist中寻找，没找到再从region中去申请
## 题目攻击思路
首先题目保护全开，具有PIE，再分析程序流程。  
程序整个流程就是以下面的结构体进行堆数据操作。
    struct mem {
        int StyleTableIndex
        int ShapeTableIndex
        int Time
        int NameSize
        char *NameMem
    }
  * 溢出
发现在update()更新mem时，可以随意设定当前mem->nameSize的大小，导致修改name时，可溢出修改name后的下一块mem的数据。  
但是修改的size发现做了限制，导致数据溢出最大只能修改到mem结构的前三项  
mem->StyleTableIndex  
mem->ShapeTableIndex  
mem->Time
  * leak
在show()显示时，可以用StyleTable[offset/8]来leak数据
因为有PIE的存在，程序每次运行堆栈地址都会随机，所以整个利用思路就是先leak
libsystem_c.dylib的地址，接着利用heap操作产生的漏洞去将包含的execv(‘/bin/sh’)代码运行地址写入可以劫持到程序流程的地方。
###  利用MacOS堆的特性leak libsystem_c.dylib
查看程序运行时的vmmap，可以看到程序下方有个Malloc metadata的region，这里开头存放的就是DefaultZone
我们可以看下libmalloc的源代码
    typedef struct _malloc_zone_t {
        /* Only zone implementors should depend on the layout of this structure;
        Regular callers should use the access functions below */
        void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */
        void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */
        size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */
        void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);
        void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */
        void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */
        void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);
        void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);
        void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */
        const char    *zone_name;
        /* Optional batch callbacks; these may be NULL */
        unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */
        void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */
        struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);
        unsigned    version;
        /* aligned memory allocation. The callback may be NULL. Present in version >= 5. */
        void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);
        /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version >= 6.*/
        void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);
        /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version >= 8. */
        size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);
        /*
         * Checks whether an address might belong to the zone. May be NULL. Present in version >= 10.
         * False positives are allowed (e.g. the pointer was freed, or it's in zone space that has
         * not yet been allocated. False negatives are not allowed.
         */
        boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);
    } malloc_zone_t;
值得我们仔细关注的是这里的  
`struct malloc_introspection_t * MALLOC_INTROSPECT_TBL_PTR(introspect);`