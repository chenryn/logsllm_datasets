the current maintainers of a package to add her as a maintainer.
For example, in the recent event-stream incident9, the attacker
employed social engineering to obtain publishing rights on
the target package. The attacker then removed the original
maintainer and hence became the sole owner of the package.
A variant of this attack is when an attacker injects code into
the source base of the target package. For example, such code
injection may happen through a pull request, via compromised
development tools, or even due to the fact that the attacker
has commit rights on the repository of the package, but not
npm publishing rights. Once vulnerable or malicious code is
injected, the legitimate maintainer would publish the package
on npm, unaware of its security problems. Another takeover-
like attack is typosquatting, where an adversary publishes
malicious code under a package name similar to the name of
a legitimate, popular package. Whenever a user accidentally
mistypes a package name during installation, or a developer
mistypes the name of a package to depend on, the malicious
code will be installed. Previous work shows that typosquatting
attacks are easy to deploy and effective in practice [31].
Account Takeover (TM-acc) The security of a package
depends on the security of its maintainer accounts. An attacker
may compromise the credentials of a maintainer to deploy
insecure code under the maintainer’s name. At least one recent
incident (eslint-scope) is based on account takeover. While
we are not aware of how the account was hijacked in this
case, there are various paths toward account takeover, e.g.,
weak passwords, social engineering, reuse of compromised
passwords, and data breaches on npm.
Collusion Attack (TM-coll) The above scenarios all as-
sume a single point of failure. In addition, the npm ecosystem
may get attacked via multiple instances of the above threats.
Such a collusion attack may happen when multiple main-
tainers decide to conspire and to cause intentional harm, or
when multiple packages or maintainers are taken over by an
attacker.
7https://www.npmjs.com/advisories
8https://snyk.io/vuln/?type=npm
9https://github.com/dominictarr/event-stream/issues/116
USENIX Association
28th USENIX Security Symposium    997
3 Methodology
3.2 Metrics
To analyze how realistic the above threats are, we systemati-
cally study package dependencies, maintainers, and known
security vulnerabilities in npm. The following explains the
data and metrics we use for this study.
3.1 Data Used for the Study
Packages and Their Dependencies To understand the im-
pact of security problems across the ecosystem, we analyze
the dependencies between packages and their evolution.
Deﬁnition 3.1 Let t be a speciﬁc point in time, Pt be a set of
npm package names, and Et = {(pi, p j)|pi (cid:54)= p j ∈ Pt} a set
of directed edges between packages, where pi has a regular
dependency on p j. We call Gt = (Pt ,Et ) the npm dependency
graph at a given time t.
We denote the universe of all packages ever published on
npm with P . By aggregating the meta information about pack-
ages, we can easily construct the dependency graph without
the need to download or install every package. Npm offers
an API endpoint for downloading this metadata for all the
releases of all packages ever published. In total we consider
676,539 nodes and 4,543,473 edges.
To analyze the evolution of packages we gather data about
all their releases. As a convention, for any time interval t,
such as years or months, we denote with t the snapshot at the
beginning of that time interval. For example, G2015 refers to
the dependency graph at the beginning of the year 2015. In
total we analyze 5,386,239 releases, therefore an average of
almost eight versions per package. Our observation period
ends in April 2018.
Maintainers Every package has one or more developers
responsible for publishing updates to the package.
Deﬁnition 3.2 For every p ∈ Pt, the set of maintainers M(p)
contains all users that have publishing rights for p.
Note that a speciﬁc user may appear as the maintainer of
multiple packages and that the union of all maintainers in the
ecosystem is denoted with M .
Vulnerabilities The npm community issues advisories or
public reports about vulnerabilities in speciﬁc npm packages.
These advisories specify if there is a patch available and which
releases of the package are affected by the vulnerability.
Deﬁnition 3.3 We say that a given package p ∈ P is vul-
nerable at a moment t if there exists a public advisory for
that package and if no patch was released for the described
vulnerability at an earlier moment t(cid:48) < t.
We denote the set of vulnerable packages with V ⊂ P . In
total, we consider 609 advisories affecting 600 packages. We
extract the data from the publicly available npm advisories10.
10https://www.npmjs.com/advisories
We introduce a set of metrics for studying the risk of attacks
on the npm ecosystem.
Packages and Their Dependencies The following mea-
sures the inﬂuence of a given package on other packages in
the ecosystem.
Deﬁnition 3.4 For every p ∈ Pt, the package reach PR(p)
represents the set of all the packages that have a transitive
dependency on p in Gt.
Note that the package itself is not included in this set. The
reach PR(p) contains names of packages in the ecosystem.
Therefore, the size of the set is bounded by the following
values 0 ≤ |PR(p)| < |Pt|.
Since |PR(p)| does not account for the ecosystem changes,
the metric may grow simply because the ecosystem grows.
To address this, we also consider the average package reach:
PRt =
∑∀p∈Pt |PR(p)|
|Pt|
(1)
Using the bounds discussed before for PR(p), we can calcu-
late the ones for its average 0 ≤ PRt < |Pt|. The upper limit is
obtained for a fully connected graph in which all packages can
reach all the other packages and hence |PR(p)| = |Pt|− 1,∀p.
If PRt grows monotonously, we say that the ecosystem is get-
ting more dense, and hence the average package inﬂuences
an increasingly large number of packages.
The inverse of package reach is a metric to quantify how
many packages are implicitly trusted when installing a partic-
ular package.
Deﬁnition 3.5 For every p ∈ Pt, the set of implicitly trusted
packages ITP(p) contains all the packages pi for which
p ∈ PR(pi).
Similarly to the previous case, we also consider the size of
the set |ITP(p)| and the average number of implicitly trusted
package ITPt, having the same bounds as their package reach
counterpart.
Even though the average metrics ITPt and PRt are equiv-
alent for a given graph, the distinction between their non-
averaged counterparts is very important from a security point
of view. To see why, consider the example in Figure 1. The
average PR = IT P is 5/6 = 0.83 both on the right and on the
left. However, on the left, a popular package p1 is dependent
upon by many others. Hence, the package reach of p1 is ﬁve,
and the number of implicitly trusted packages is one for each
of the other packages. On the right, though, the number of
implicitly trusted packages for p4 is three, as users of p4
implicitly trust packages p1, p2, and p3.
998    28th USENIX Security Symposium
USENIX Association
p1
p6
p1
p5
p2
p3
p4
p6
p5
p2
p3
p4
(a) Wide distribution of trust:
max(PR) = 5,max(ITP) = 1
Figure 1: Dependency graphs with different maximum pack-
age reaches (PR) and different maximum numbers of trusted
packages (ITP).
(b) Narrow distribution of trust:
max(PR) = 3,max(ITP) = 3
Maintainers The number of implicitly trusted packages or
the package reach are important metrics for reasoning about
TM-pkg, but not about TM-acc. That is because users may de-
cide to split their functionality across multiple micropackages
for which they are the sole maintainers. To put it differently,
a large attack surface for TM-pkg does not imply one for
TM-acc.
Therefore, we deﬁne maintainer reach MRt (m) and implic-
itly trusted maintainers ITMt (p) for showing the inﬂuence of
maintainers.
Deﬁnition 3.6 Let m be an npm maintainer. The maintainer
reach MR(m) is the combined reach of all the maintainer’s
packages, MR(m) = ∪m∈M(p)PR(p)
Deﬁnition 3.7 For every p ∈ Pt, the set of implicitly trusted
maintainers ITM(p) contains all the maintainers that have
publishing rights on at least one implicitly trusted package,
ITM(p) = ∪pi∈ITP(p)M(pi).
The above metrics have the same bounds as their packages
counterparts. Once again, the distinction between the package
and the maintainer-level metrics is for shedding light on the
security relevance of human actors in the ecosystem.
Furthermore, to approximate the maximum damage that
colluding maintainers can incur on the ecosystem (TM-coll),
we deﬁne an order in which the colluding maintainers are
selected:
call
L ⊂ M a
Deﬁnition 3.8 We
set
collusion
tainers
egy iff ∀mi ∈ L there is no mk (cid:54)= mi
∪ j<iMR(m j)∪ MR(mi) < ∪ j<iMR(m j)∪ MR(mk).
of main-
strat-
for which
ordered
an
desirable
Figure 2: Evolution of number of packages and maintainers.
Vulnerabilities For reasoning about TM-leg, we need to
estimate how much of the ecosystem depends on vulnerable
code:
Deﬁnition 3.9 Given all vulnerable packages pi ∈ Vt at
time t, we deﬁne the reach of vulnerable code at time t as
VRt = ∪pi∈Vt PR(pi).
Of course the actual reach of vulnerable code can not
be fully calculated since it would rely on all vulnerabilities
present in npm modules, not only on the published ones. How-
ever, since in TM-leg we are interested in publicly known
vulnerabilities, we deﬁne our metric according to this sce-
nario. In these conditions, the speed at which vulnerabilities
are reported is an important factor to consider:
Deﬁnition 3.10 Given all vulnerable packages pi ∈ Vt at
time t, we deﬁne the vulnerability reporting rate VRRt at
time t as VRRt =
|Vt|
|Pt| .
4 Results
We start by reporting the results on the nature of package level
dependencies and their evolution over time (corresponding
to TM-mal and TM-pkg). We then discuss the inﬂuence that
maintainers have in the ecosystem (related to TM-acc and
TM-coll). Finally, we explore the dangers of depending on
unpatched security vulnerabilities (addressing TM-leg).
Therefore, the desirable collusion strategy is a hill climbing
algorithm in which at each step we choose the maintainer that
provides the highest local increase in package reach at that
point. We note that the problem of ﬁnding the set of n main-
tainers that cover the most packages is an NP-hard problem
called maximum coverage problem. Hence, we believe that
the proposed solution is a good enough approximation that
shows how vulnerable the ecosystem is to a collusion attack,
but that does not necessary yield the optimal solution.
4.1 Dependencies in the Ecosystem
To set the stage for a thorough analysis of security risks en-
tailed by the structure of the npm ecosystem, we start with
a general analysis of npm and its evolution. Since its incep-
tion in 2010, the npm ecosystem has grown from a small
collection of packages maintained by a few people to the
world’s largest software ecosystem. Figure 2 shows the evo-
lution of the number of packages available on npm and the
USENIX Association
28th USENIX Security Symposium    999
each depended upon package runs its post-installation scripts
on the user’s machine – code executed with the user’s operat-
ing system-level permissions. When using the package, calls
into third-party modules may execute any of the code shipped
with the depended upon packages.
When installing an average npm package, a user implic-
itly trusts around 80 other packages due to transitive
dependencies.
One can observe in Figure 3 a chilling effect on the number
of dependencies around the year 2016 which will become
more apparent in the following graphs. Decan et al. [14]
hypothesize that this effect is due to the left-pad incident. In
order to conﬁrm that this is not simply due to removal of more
than a hundred packages belonging to the left-pad’s owner, we
remove all the packages owned by this maintainer. We see no
signiﬁcant difference for the trend in Figure 3 when removing
these packages, hence we conclude that indeed there is a
signiﬁcant change in the structure of transitive dependencies
in the ecosystem around 2016.
4.1.2 Package Reach
The above analysis focuses on depended upon packages. We
now study the inverse phenomenon: packages impacted by in-
dividual packages, i.e., package reach as deﬁned in Section 3.
Figure 4 shows how many other packages a single package
reaches via direct or indirect dependencies. The graph at the
top is for an average package, showing that it impacts about