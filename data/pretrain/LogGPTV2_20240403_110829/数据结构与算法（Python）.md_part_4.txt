>>>
元组tuple和列表list类似，也是异质数据序列容器，区别是，tuple不可改变其中数据，就
像字符串。元表不可被修改。元表表示为用圆括号括起的，用逗号隔开的一系列值。当然，作为一
个序列，它也适用于上述的关于序列的运算符，例如 ：
>>> myTuple = (2,True,4.96)
>>> myTuple
(2, True, 4.96)
>>> len(myTuple)
3
>>> myTuple[0]
2
>>> myTuple * 3
(2, True, 4.96, 2, True, 4.96, 2, True, 4.96)
>>> myTuple[0:2]
(2, True)
>>>
但是，如果你试图改变元组里的一个元素，马上就会报错。注意有关error的消息中会包含问
题的位置和原因。
>>> myTuple[1]=False
Traceback (most recent call last):
File "", line 1, in -toplevel-
myTuple[1]=False
TypeError: object doesn't support item assignment
>>>
集合是0个或多个数据的无序散列容器。集合不允许出现重复元素，表示为花括号括起的、用
逗号隔开的一系列值。空的集合表示为set()。集合是异质的,并且集合是可变的。例如：
>>> {3,6,"cat",4.5,False}
{False, 4.5, 3, 6, 'cat'}
>>> mySet = {3,6,"cat",4.5,False}
>>> mySet
{False, 4.5, 3, 6, 'cat'}
尽管集合是无序的，它仍然支持一些与之前所示的其他容器相类似的操作，表1.5回顾了这些
操作, 并且之后给出了如何使用这些操作的具体例子:
运算 运算 解释
符
属于关系 in 判断一个元素是否属于这个集合
元素数目 len 返回值是集合中元素的数目
|（并集） 集合 A | 集合 B 返回一个新集合，这个集合是集合 A,B 的并集
&（交集） 集合 A & 集合 B 返回一个新集合，这个集合只有集合 A,B 共有的
元素，是集合 A,B 的交集
- 集合 A – 集合 B 返回一个新集合，这个集合是集合 A 除去 A 与 B
共有的元素（A-（A∩B））
判断集合 A 中的所有元素是否都在集合 B 中，返
>> mySet
{False, 4.5, 3, 6, 'cat'}
>>> len(mySet)
5
>>> False in mySet
True
>>> "dog" in mySet
False
>>>
集合提供了许多方法，用于实现一些数学操作，表1.6大致列举了一些这样的函数，之后也有
一些使用实例。注意，union, intersection, issubset和difference 这些函数的功能也可用上述
在表五中出现的运算符代替。
函数名 使用方法 解释
返回一个新集合，这个集合含有 A,B 中的所有元素，
union A.union(B)
是集合 A,B 的并集
返回一个新集合，这个集合只有集合 A,B 共有的元
intersection A.intersection(B)
素，是集合 A,B 的交集
返回一个新集合，这个集合是集合 A 除去 A 与 B 共
difference A.difference(B)
有的元素（A-（A∩B））
判断集合 A 中的所有元素是否都在集合 B 中，返回
issubset A.issubset(B)
布尔值 True 或者 False
把 item 这个元素添加到集合 A 中
add A.add(item)
从集合 A 中除去 item 这个元素
remove A.remove(item)
表1.6 Python中集合操作的函数
>>> mySet
{False, 4.5, 3, 6, 'cat'}
>>> yourSet = {99,3,100}
>>> mySet.union(yourSet)
{False, 4.5, 3, 100, 6, 'cat', 99}
>>> mySet | yourSet
{False, 4.5, 3, 100, 6, 'cat', 99}
>>> mySet.intersection(yourSet)
{3}
>>> mySet & yourSet
{3}
>>> mySet.difference(yourSet)
{False, 4.5, 6, 'cat'}
>>> mySet - yourSet
{False, 4.5, 6, 'cat'}
>>> {3,100}.issubset(yourSet)
True
>>> {3,100}>> mySet.add("house")
>>> mySet
{False, 4.5, 3, 6, 'house', 'cat'}
>>> mySet.remove(4.5)
>>> mySet
{False, 3, 6, 'house', 'cat'}
>>> mySet.pop()
False
>>> mySet
{3, 6, 'house', 'cat'}
>>> mySet.clear()
>>> mySet
set()
>>>
介绍的最后一种 Python的数据类型是字典，字典是由许多对相互之间有联系的元素组成的, 每
对都包含一个键（key）和一个值（value）。这种元素对被称为键值对，一般记作键：值（key：
value）。字典的表示方法是，大括号内若干对键值对排列在一起，它们之间用逗号隔开。 举个例
子:
>>> capitals = {'Iowa':'DesMoines','Wisconsin':'Madison'}
>>> capitals
{'Wisconsin': 'Madison', 'Iowa': 'DesMoines'}
>>>
我们可以通过元素的键来获取它的值，也可以添加另外的键值对来改动字典。“通过键来获取
值”这一操作的语法和从序列中读取元素的操作差不多，只不过后者是通过序列下标来获取，而前
者是通过键获取。添加新元素也是类似的，序列中添加一个新元素，要增加 一个下标，而字典则是
增加一个键值对。
>>> capitals = {'Iowa':'DesMoines','Wisconsin':'Madison'}
>>> print(capitals['Iowa'])
DesMoines
>>> capitals['Utah']='SaltLakeCity'
>>> print(capitals)
{'Wisconsin': 'Madison', 'Utah': 'SaltLakeCity', 'Iowa': 'DesMoines'}
>>> capitals['California']='Sacramento'
>>> print(len(capitals))
4
>>> for k in capitals:
print(capitals[k]," is the capital of ", k)
('Madison', ' is the capital of ', 'Wisconsin') ('SaltLakeCity', ' is the capital of ', 'Utah')
('DesMoines', ' is the capital of ', 'Iowa') ('Sacramento', ' is the capital of ', 'California')
代码1.5 字典(intro_1.5)
切记，字典型对于键(key)的存储是没有特定的顺序的，如上例中，第一个添加的键值对
( ’Utah’:’SaltLakeCity’ )被放在了字典中的第一个位置,而第二个添加的键值对
(’California’:’Sacramento’)被放在了最后一个位置。关于键的摆放位置实际上是和“散列
法”这一概念有关，这会在第四章中详细论述。在上例中我们也展示了 length 函数，它和之前几
种数据类型一样, 可以用来求字典中所含键值对的数目。
字典可以通过函数和运算符来操作。表 1.7 和表 1.8 分别给出了字典中所能使用的运算符，
以及具有类似功能的函数，之后的一段代码给出了它们的实际操作。key，value和item这三个函数
分别能够给出字典中所有的键、值、键值对，然后你可以用 list 函数把它们得到的结果转 变为列
表。get函数有两种不同的用法。第一种，如果查找的 key 不在字典中，它就会返回None；第二
种，加入一个可选参数，如果查找的 key 不在字典中,就返回一个特定的值。
运算符 用法 解释
[] mydict[‘key’] 返回 key 这个键所对应的值，如果 key 不存在，则会报
错
In key in mydict 如果 key 这个键在字典中，那么就返回 True，如果不在，
就返回 False
del del mydict[‘key’] 在字典中移除 key 这个键所对应的键值对
表1.7 Python中字典运算符
>>> phoneext={'david':1410,'brad':1137}
>>> phoneext
{'brad': 1137, 'david': 1410}
>>> phoneext.keys()
dict_keys(['brad', 'david'])
>>> list(phoneext.keys())
['brad', 'david']
>>> phoneext.values()
dict_values([1137, 1410])
>>> list(phoneext.values())
[1137, 1410]
>>> phoneext.items()
dict_items([('brad', 1137), ('david', 1410)])
>>> list(phoneext.items())
[('brad', 1137), ('david', 1410)]
>>> phoneext.get("kent")
>>> phoneext.get("kent","NO ENTRY")
'NO ENTRY'
>>>
函数名 使用方法 解释
keys adict.keys() 以列表的形式返回 adict 中的所有键(key)
values adict.values() 以列表的形式返回 adict 中的所有值(value)
items adict.items() 以列表的形式返回 adict 中的所有键值对，列表的每个
元素是包含键和值的元组
get adict.get(key) 返回 key 所对应的值，如果 key 不存在，就返回 None
get adict.get(key,alt) 返回 key 所对应的值，如果 key 不存在，就返回 alt
表1.8 Python中字典的函数
1.7.2 输入与输出
无论是获取数据，或者是返回某种结果，我们都经常需要与用户进行互动。如今的大多数程序都用
一个对话框作为一种要求用户提供某种类型的输入的方式。虽然 Python 有对话框, 但我们有更简
单的函数可以解决这个问题。Python 就为我们提供了这样一个函数，它要求用户输入某些数据，同
时以字符串的形式为用户提供输入提示(就是输入的时候提示个“please input your data”之类
的)。这个函数就是 input。
Python 中的 ‘’ 函数后面的括号里只能接受单一的字符串，这个字符串被称为提示符(prompt),
因为这个字符串一般输入的是有用的文本信息，用于提示用户输入。举个例子,你可以这样:
aName = input('Please enter your name: ')
之后，无论用户在看到了提示之后输入了什么，它都会被存放在 aName 这个变量中。使用 input，