title:Poseidon: Mitigating Volumetric DDoS Attacks with Programmable Switches
author:Menghao Zhang and
Guanyu Li and
Shicheng Wang and
Chang Liu and
Ang Chen and
Hongxin Hu and
Guofei Gu and
Qi Li and
Mingwei Xu and
Jianping Wu
Poseidon: Mitigating Volumetric DDoS Attacks with
Programmable Switches
Menghao Zhang(cid:63), Guanyu Li(cid:63), Shicheng Wang(cid:63), Chang Liu(cid:63), Ang Chen†, Hongxin Hu◦, Guofei Gu‡,
Qi Li(cid:63), Mingwei Xu(cid:63), Jianping Wu(cid:63)
(cid:63)Institute for Network Sciences and Cyberspace & Department of Computer Science and Technology, Tsinghua University
(cid:63)Beijing National Research Center for Information Science and Technology (BNRist)
†Rice University
◦School of Computing, Clemson University
‡SUCCESS Lab, Texas A&M University
Abstract—Distributed Denial-of-Service (DDoS) attacks have
become a critical threat to the Internet. Due to the increasing
number of vulnerable Internet of Things (IoT) devices, attackers
can easily compromise a large set of nodes and launch high-
volume DDoS attacks from the botnets. State-of-the-art DDoS
defenses, however, have not caught up with the fast develop-
ment of the attacks. Middlebox-based defenses can achieve high
performance with specialized hardware; however, these defenses
incur a high cost, and deploying new defenses typically requires a
device upgrade. On the other hand, software-based defenses are
highly ﬂexible, but software-based packet processing leads to high
performance overheads. In this paper, we propose POSEIDON, a
system that addresses these limitations in today’s DDoS defenses.
It leverages emerging programmable switches, which can be
reconﬁgured in the ﬁeld without additional hardware upgrade.
Users of POSEIDON can specify their defense strategies in a
modular fashion in the form of a set of defense primitives; this can
be further customized easily for each network and extended to in-
clude new defenses. POSEIDON then maps the defense primitives
to run on programmable switches—and when necessary, on server
software—for effective defense. When attacks change, POSEIDON
can reconﬁgure the underlying defense primitives to respond
to the new attack patterns. Evaluations using our prototype
demonstrate that POSEIDON can effectively defend against high-
volume attacks, easily support customization of defense strategies,
and adapt to dynamic attacks with low overheads.
I.
INTRODUCTION
Distributed Denial-of-Service (DDoS) attacks have been
a longstanding threat. They have become even more so as
an increasing number of vulnerable Internet of Things (IoT)
devices are connected online. Over the past a few years,
there has been a dramatic increase in the scale and diversity
of DDoS attacks, many of which have frequently made the
headlines [80], [59], [54], [66]. Recent surveys report 400,000
DDoS attacks every month [67], with peak volume reaching
Tbps [5]. These attacks are also evolving quickly, leveraging
new or mixed attack vectors [40], [62], [68], [20].
Today’s defenses against large-scale DDoS attacks, how-
ever, have not caught up. One of the most widely adopted
DDoS defenses is using a trafﬁc scrubbing center, where a
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24007
www.ndss-symposium.org
range of defense mechanisms are deployed near the destina-
tions to mitigate DDoS “as-a-service” [17]. However, most
of the devices deployed in the trafﬁc scrubbing centers are
expensive and proprietary hardware appliances, i.e., middle-
boxes [50], [57], [14]. Although these middleboxes deliver
high performance,
they tend to be inﬂexible in terms of
functionality, capacity, and placement locations. As a result,
whenever a new attack vector emerges,
its corresponding
defense would require an upgrade of the middleboxes, which
in turn requires rounds of negotiations between customers and
vendors. In addition to this lack of agility, hardware upgrades
also incur signiﬁcant economic costs.
Recent trends in networking—Software Deﬁned Network-
ing (SDN) and Network Function Virtualization (NFV)—can
mitigate some concerns above by employing software-based
network programmability. For instance, Bohatei [22] lever-
ages NFV to elastically scale the number of defense virtual
machines (VMs) based on attack composition, and it adopts
SDN to steer the suspicious trafﬁc to proper VMs. It also
designs several efﬁcient resource management mechanisms for
scalability, responsiveness, and attack resilience. Despite these
beneﬁts, server-based packet processing incurs additional la-
tency overheads and defense costs. These problems are deeply
rooted in the nature of software-based platforms, where packets
are processed on general-purpose CPUs rather than specialized
network hardware customized to sustain Tbps trafﬁc.
An ideal DDoS trafﬁc scrubbing service should have low
operational and capital cost; and at the same time, it should
have high performance in packet processing and enable agile
deployment of new defenses. These requirements are becoming
more and more urgent with the increasing number of IoT
botnets [3], [83], new variants of DDoS attacks [63], [76],
and the stringent latency demands in today’s network ser-
vices [28], [92]. We observe that the emerging programmable
switches [10] developed in the latest networking technology
can provide an exciting opportunity to bridge this gap. First
off, since programmable switches provide several orders of
magnitude higher throughput
than highly-optimized packet
processing software [51], [35], a single switch could poten-
tially replace hundreds of servers, signiﬁcantly reducing per-
capacity capital cost and operational expense. Moreover, such
switches support stateful packet processing using domain-
speciﬁc languages (e.g., P4 [9]), which can process packets
line rate in the switch
with user-deﬁned logic at
pipeline. These potential beneﬁts are particularly valuable for
DDoS defense.
terabit
While programmable switches are a promising candidate
for DDoS defense, there are three challenges that we must
address. First, we desire a high-level abstraction that can
capture a wide range of DDoS defense policies. However,
different DDoS attacks exploit a variety of protocol- and
system-vulnerabilities. The corresponding DDoS defenses also
need to be rather heterogeneous in order to handle different
types of attacks. Such requirements make it challenging to
describe the defense policies uniformly. Second, although
programmable switches provide several orders of magnitude
higher throughput and lower latency than commodity servers,
they only have restrictive computational models and limited
on-chip resources;
this makes it challenging to implement
sophisticated DDoS defenses (e.g., puzzle for HTTP Flood),
and we also need to work within the switch resource limi-
tations. Third, DDoS attacks are dynamic in terms of attack
types and composition. This raises another requirement that the
defense should be adaptive to attack dynamics. It is challenging
to achieve this with high efﬁciency (i.e., switch resource
utilization) and strong correctness guarantees (i.e., without
interrupting legitimate ﬂows).
To address the challenges above, in this paper, we propose
POSEIDON, a performant, cost-efﬁcient and agile DDoS de-
fense system with programmable switches. First, we provide
a modular policy abstraction for expressing defense policies,
which can capture a wide range of DDoS defenses con-
cisely. Second, we partition the defense primitives to run on
programmable switches—and when necessary, on commodity
servers—according to their properties, and map the high-level
policies to the defense resources with an optimized orchestra-
tion mechanism. Third, we develop an effective runtime man-
agement mechanism to reconﬁgure POSEIDON for dynamic
defense without interrupting legitimate ﬂows. We stress that
POSEIDON is not intended to provide a new algorithmic or
theoretical contribution to DDoS defense, but rather to provide
a practical and system-level solution leveraging the emerging
programmable switches, which could potentially become a new
platform for future DDoS defenses. Our implementation and
evaluation demonstrate that POSEIDON is able to potentially
defend against ∼Tbps attack trafﬁc, capture a range of defense
policies within tens of lines of code, adapt to policy changes
in seconds, and handle dynamic attacks with negligible over-
heads.
In summary, we make the following contributions:
• We analyze the challenges of the current DDoS de-
fense practices, identify new opportunities provided by
programmable switches (§II), and discuss the design
challenges in integrating programmable switches into
the existing DDoS defense framework (§III).
• We provide a simple and modular abstraction to ex-
press DDoS defense policies, shielding the underlying
hardware complexities from programmers (§IV).
• We develop an optimized resource orchestration mech-
anism to map the high-level policy primitives to the
underlying hardware resources (§V).
• We develop a runtime management mechanism that
can adapt
to dynamic attacks with high resource
utilization efﬁciency and strong correctness guarantees
for legitimate ﬂows (§VI).
• We implement a prototype of POSEIDON, and conduct
extensive experiments to demonstrate the advantages
of POSEIDON (§VII, §VIII).
Finally, we discuss several practical issues (§IX), summarize
related work (§X), and then conclude the paper (§XI).
II. MOTIVATION AND OBSERVATION
In this section, we further motivate the need for advanced
DDoS defenses, and describe why the emergence of pro-
grammable switches is a promising enabler of new DDoS
defense systems.
A. Challenges in DDoS defense
DDoS attacks have become a critical threat to the Internet
services. To defend against DDoS attacks, one of the most
deployed defenses is using a trafﬁc scrubbing center, where a
large cluster of commodity servers or proprietary middleboxes
are organized to ﬁlter the malicious trafﬁc. Two essential re-
quirements are defense cost and agility. Unfortunately, today’s
defense systems are lacking in both regards.
First, DDoS defense should be cost-efﬁcient. As DDoS at-
tacks are challenging to eliminate without making fundamental
changes to the Internet architecture, there will always be a “cat-
and-mouse” game between attackers and victims. If one side
could obtain more resources (attack trafﬁc vs. defense devices)
with lower cost, that side will win out. As a well-known fact
in the operational security community, the costs for DDoS
attackers and victims are determined by two separate markets,
namely, botnet markets and defense markets [39]. As a result,
it is important to increase the difﬁculty to obtain botnets and
to reduce the costs to deploy defense countermeasures. Un-
fortunately, with the massive usage of vulnerable IoT devices
and the emergence of various powerful botnets (e.g., Mirai [3],
[13]), this balance is shifted towards attackers quickly and the
Internet is stricken by storms of larger and larger DDoS attacks
more and more frequently [63], [76], [83]. Although we can
scale up the scrubbing capacity by adding more servers or
proprietary middleboxes, doing so raises the capital cost and
operational complexity, which is not symmetric to the rapid
growth of attack trafﬁc nowadays.
Second, DDoS defense should be agile in terms of new
defense deployment and trafﬁc scrubbing procedure. As dis-
cussed above, DDoS attacks are still evolving rapidly, and
new attack vectors are emerging constantly [40], [62], [68],
[20]. To address a new attack vector, hardware upgrades are
necessary. However, proprietary middleboxes are extremely
hard to upgrade, and even adding simple functionality such
as modifying the statistic granularity is difﬁcult to achieve
without vendor support [57], [14]. Such inﬂexibility to deploy
new defense mechanisms hinders our ability to quickly respond
to new variants of DDoS attacks. To make matters worse,
today’s vendors usually deploy all known defense counter-
measures into middleboxes to cope with attack dynamics [57],
[14], which results in substantial processing resource waste
and further raises the capital cost. Since it is unlikely to see
all attacks simultaneously, most of the hardware resources
are left unused during DDoS defense. Server-based solutions
provide high programmability to solve the problem above, but
this comes with high latency, high jitter and poor isolation
2
TABLE I: Capital cost for different defense hardware.
Device
NSFOCUS
ADS
Commodity
Server
Programmable
Switch
Capability Equipment Cost
48Gbps
40Gbps
3.3Tbps
$102,550
($2,136/Gbps)
$4,400
($110/Gbps)
$10,500
($3/Gbps)
Power Cost
600Wtts
(12.5Wtts/Gbps)
600Wtts
(15Wtts/Gbps)
450Wtts
(0.1Wtts/Gbps)
Lower unit capital cost. The cost beneﬁt when introduc-
ing programmable switches into DDoS defense framework
includes two parts: equipment cost (in dollars) and power
consumption (in Watts). As shown in TABLE I, according to
our investigation, a typical 48Gbps DDoS defense middlebox
costs about $102,550 and uses 600 Watts [57], a common
server equipped with a 40Gbps NIC costs about $4,400 in
2018 and uses 600 Watts under full
load, and a 3.3Tbps
Barefoot Toﬁno switch costs about $10,500 and has a power
consumption of around 450 Watts [74]. From this table, we
can see that compared with the other two hardware devices,
packet processing with programmable switches saves dollars
by tens of to hundreds of times, which shows their potentials
to reduce the cost for attack trafﬁc scrubbing.
Flexibility to support future attacks. As newer and larger
DDoS attacks emerge, enterprises today have to frequently
purchase more capable hardware appliances and integrate
them into the defense infrastructure. Proprietary middleboxes
cannot easily support new attacks because of their limited
programmability. Software-based defenses (e.g., Bohatei) are
much more programmable, but they can only handle lower-
speed trafﬁc. In contrast, a single programmable switch could
replace the deployment of numerous servers, and it can be
programmed with, domain-speciﬁc languages like P4 to enable
new defenses. These features provide higher performance and
ﬂexibility to defend against advanced DDoS attacks.
High packet processing performance. Switching ASICs are
speciﬁcally designed and optimized for packet processing
at line rate. They can achieve several orders of magnitude
higher throughput and lower latency compared with highly-
optimized software solutions [34]. Also, switching ASICs can
provide strong performance isolation [51], which is essential
for avoiding increased delays or packet drops for legitimate
trafﬁc during DDoS attacks. Other alternatives, such as Smart
Network Interface Cards (NICs), Field Programmable Gate
Arrays (FPGA) and Network Processing Units (NPUs) cannot
match the performance of switching ASICs [34], [35], [78].
Such performance characteristics make switching ASICs a
desirable platform for high-throughput and low-latency DDoS
defenses, as the resulting defenses are a good match for
the requirements of latency-sensitive services in today’s data
centers.
III. SYSTEM OVERVIEW
In this section, we describe our defense scenario, workﬂow,
and design challenges in more detail.
A. Problem Scope
Deployment Scenario: Our scenario focuses on the DDoS
defense in trafﬁc scrubbing centers, where an ISP or cloud net-
Fig. 1: Switch data plane architecture.
in packet processing. Software processing adds a latency of
50us to 1ms when handling as little as 100K packets per
second [26], which is unacceptable for many latency-sensitive
services [28], [92] common in today’s data centers. When
software experiences a ﬂash crowd, legitimate trafﬁc served by
the server also experiences increased delays, even unexpected
packet drops [26], [51], which makes scrubbing procedure
challenging even for latency-insensitive services.
B. Opportunities of Programmable Switches
Current trends in SDN have extended the network pro-
grammability to the data plane through programmable switch-
ing ASICs (Application-Speciﬁc Integrated Circuits) and
domain-speciﬁc languages (e.g., P4 [9]). In programmable
switching ASICs,
there are multiple ingress and egress
pipelines, each with multiple ingress and egress ports
(Fig. 1(a)). Packets are processed sequentially by each stage
in a pipeline (Fig. 1(b)). Each stage has its own dedicated
resources, such as registers (for storage and stateful packet
processing), match-action units (for data plane customization),
and stateful ALUs (for computation). Match-action tables
match certain packet ﬁelds or metadata and apply actions on
the packet (Fig. 1(c)). Each table modiﬁes packet ﬁelds and
generates metadata through which tables can share informa-
tion. Using programmable switching ASICs, programmers can
customize data plane logics with domain-speciﬁc languages