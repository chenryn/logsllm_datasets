rest of the ndings to be indeed true positives. However, although all
of the reported overows/underows being semantically possible,
yet most of them are unlikely to be exploited in practice. The reason
is twofold: 1) a large number of overows and underows may only
be triggered by the owner of the smart contract and 2) a large
number of overows and underows are due to implementations
either not checking whether the balance of a receiver may overow
after a transfer (see Listing 5), or whether the value of the total
supply may underow before subtracting the amount of tokens to
be burned.
1 function transfer ( address _to , uint256 _value ) returns
( bool success ) {
if ( balances [ msg . sender ] >= _value && _value > 0) {
balances [ msg . sender ] -= _value ;
balances [ _to ] += _value ;
Transfer ( msg . sender , _to , _value );
2
3
4
5
6
7
8 }
Listing 5: Overow at Line 4 in StandardToken’s transfer
function.
return true ;
} else { return false ; }
1 function burn ( uint256 _value ) returns ( bool success ) {
2
3
4
5
6
7 }
if ( balances [ msg . sender ] = value ) return false ;
// checking for overflows
if ( balances [ to ] + value < balances [ to ]) return false ;
balances [ from ] -= value ;
allowed [ from ][ msg . sender ] -= value ;
balances [ to ] += value ;
// Notify anyone listening that this transfer took
2
3
4
5
6
7
8
9
10
11
12
13
place
Transfer ( from , to , value );
return true ;
14
15
16 }
Listing 7: RemiCoin’s transferFrom function allows an
arbitrary user to steal tokens from another user.
RemiCoin (RMC) was released in 2017 and has a market capital
of $27,520. Its founder/CEO is unknown. At its peak in October
2017, RemiCoin was traded for $1.82, whereas now its value has
dropped to $0.0147. At the time of writing, 348 addresses hold Remi-
Coins and a total of 11,497 transfers have been made so far. We
checked whether this bug has been exploited in the wild. We found
multiple transactions resulting in integer underows6. However,
we miss evidence of these being targeted attacks as the victims
are still left with a rather high amount of tokens. Since the bug
results in transactions with a legitimate allowance being refused,
we nd it quite surprising that this bug has not been noticed so far.
Demonstrating the above attack on the public blockchain is feasible.
However, for ethical reasons we were reluctant to do so. Therefore,
we demonstrate the attack on a copy of the smart contract that we
deployed on the Ropsten test network7 and created two test ac-
counts: 1) 0xe9131d546bba6e233b0a19e504179dc61365a77f and
2) 0x7e2a886f1ba5942cc7a3a53fc6fae94868e318a0. We deploy-
ed the contract via the rst account, hence making this account
the holder of the total supply of tokens. Afterwards, we performed
our attack by calling the transferFrom function and passing as
arguments the address of the rst account, the address of the sec-
ond account and nally the total supply of tokens8. As a result, the
second account now owns all of the tokens and its allowance was
set from zero to a substantial amount.
6 DISCUSSION
In this section, we summarise weaknesses in the Ethereum ecosys-
tem that lead to smart contracts that are prone to integer bugs.
6https://bit.ly/2LHeNf6
7https://bit.ly/2HIKbrx
8https://bit.ly/2l7ITNy
Further, we discuss possible remedies to prevent integer bugs from
happening in smart contracts.
6.1 Causes for Integer Bugs
Weaknesses of Solidity and EVM. Solidity is a language that has
been designed to lower the bar for developers entering the smart
contract ecosystem. In that respect, its syntax resembles JavaScript,
suggesting a dynamically typed scripting language, which in fact,
it is not. Then again, during compilation from Solidity to EVM, the
compiler warns about some type casts which gives the developer
the impression of a strictly static type validation – which again is
not true. In fact, Solidity compiles into statically EVM bytecode, but
the type system of Solidity does not strictly map into that of EVM.
For example, although integers with less than 256 do not exist
in EVM, Solidity attempts to give the developer the impression
of dierent integer types by providing respective type identiers
and generating wrap-around behaviour during compilation. This
is a weakness because rst, it suggests that developers could save
memory by using shorter integer types and second, it makes the
unexpected (integers wrapping around) the rule.
As a second weakness we consider the overow handling of
EVM itself. Unlike in low-level programming, deliberate integer
overows is a rarely used feature in application development and
we have not come across a single smart contract that uses integer
overow in a deliberate way. Nevertheless, neither the Solidity
compiler nor EVM treat integer overows as an exception but
rather treat them as a real CPU would do – with some unexpected
deviations such as feasibility of division by zero. Given the fact
that aborting a smart contract will result in a safe rollback of the
transaction, treating overows as an exception and panicking seems
to be the safer alternative than silent wrapping.
Unsafe Implementations of Standards. The ERC-20 [35] token
standard provides a standardised Application Programming Inter-
face (API) for tokens within Ethereum smart contracts. The API
provides basic functionality in order to transfer tokens, as well as to
allow tokens to be approved such that they may be spent by another
on-chain third-party. The standard describes an interface consisting
of a number of functions and events, which a smart contract must
implement in order to be compliant. The main issue with the current
standard, is that it solely provides an interface. Its implementation
is left to the developer of the token. As a consequence, many dif-
ferent implementations exist. Some implementations might have
bugs and might be copied by other developers, with the bugs left
unnoticed, hereby spreading the bugs across multiple contracts. In
addition, some tokens introduce new functionality that is not part
of the standard and hereby potentially introduce new bugs.
Negligible and Incorrect Use of Safe Libraries. In Section 5.2.2 we
analysed the safety of 495 token smart contracts. Token contracts
perform a number of arithmetic operations such as subtracting
from balances and adding to balances. However, these operations
may produce integer bugs such as overows and underows. There-
fore, it is recommended to perform such operations using a safe
arithmetic library such as SafeMath [27]. SafeMath provides safe
arithmetic operations for multiplication, division, addition and sub-
traction. We found that 337 out of the 495 contracts include the
673
O: Hunting for Integer Bugs in Ethereum Smart Contracts
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
SafeMath library in their source code. Thus roughly 32% of the to-
kens do not make use of a SafeMath library and are therefore highly
susceptible to overows and underows. Moreover, O found
53 out of the 337 contracts to include bugs related to overows and
underows. After manual inspection, we found that even though
developers make use of the SafeMath library, this does not neces-
sarily mean that they use it for every single arithmetic operation
performed by their smart contract.
6.2 Ways Towards Safe Integer Handling
There are various ways to reduce the likelihood of potentially cata-
strophic integer bugs in Ethereum smart contracts. We discuss two
dierent ways in the following:
1) Handle integer bugs at the application layer. This is the approach
taken by libraries such as SafeMath. This is already a best practice
and the only way to avoid overows without modifying the Solidity
compiler or EVM. However, it comes at the price of additional EVM
instructions which increases gas costs. Obviously not all developers
see the benet of using additional libraries for solving apparently
simple arithmetic tasks.
2) Handle integer bugs at the compiler level. Compiler-generated
overow checks remove the burden from developers but still create
additional overhead in terms of gas costs and runtime performance.
Other languages such as Rust go a route that combines rigorous
static checking with fail-fast at development time and defensive
programming at runtime. This approach could be retrotted to
the Solidity compiler without aecting the language or the EVM
themselves: as we have shown in this paper, static integer overow
checking of real-world smart contracts is feasible and could be
integrated into the compiler to identify potential overow bugs at
development time (as it is done by [24] for C code, for example).
By additional annotations such as //@allow_overflow, developers
could explicitly mark variables that should be treated in an unsafe
way to allow deliberate overows. The drawback is obviously that
still, generated EVM contains potential unnecessary and costly
runtime checks.
7 RELATED WORK
In the past years, several approaches have been proposed in order to
tackle the challenge of fully formalising reasoning about Ethereum
smart contracts. Numerous attempts have been made in modelling
the semantics of Ethereum smart contracts in state-of-the-art proof
assistants [1, 2, 12, 15, 16, 30]. Bhargavan et al. propose to translate
a subset of Solidity to F* for formal verication [2]. This is similar
to the approach initially followed by the Solidity compiler of trans-
lating Solidity contracts into WhyML to generate formal proofs
for the why3 framework [30]. A number of alternative translations
of EVM bytecode to manual assisted proofs have been proposed,
including proofs in Coq [16] and Isabelle/HOL [1, 15]. While these
approaches enable formal machine-assisted proofs of various safety
and security properties of smart contracts, none of them provide
means for fully automated analysis.
As a result, a large number of automated tools have been pro-
posed for ensuring correctness and safety of smart contracts [18,
20, 23, 25, 26, 33]. All of these tools are based on symbolically exe-
cuting EVM bytecode. Luu et al. were the rst to present a symbolic
674
execution tool called O [20]. The tool is capable of automati-
cally detecting vulnerability patterns such as transaction-ordering
dependence, timestamp dependence, mishandled exceptions and re-
entrancy. Nikolic et al. present M [25], a tool that builds up on
O and employs inter-procedural symbolic analysis as well as
concrete validation in order to nd and validate vulnerabilities on
trace properties, such as greedy, prodigal, and suicidal, in Ethereum
smart contracts. Tsankov et al. present S [33], a tool that
rst symbolically analyses a contract’s dependency graph to extract
semantic information and afterwards checks for violations of safety
patterns. To enable extensibility, the tool permits new patterns to
be specied via a designated domain-specic language. In any case,
none of the aforementioned tools currently check for integer bugs
in smart contracts.
Kalra et al. propose Z [18], a framework for automated veri-
cation of smart contracts using abstract interpretation and symbolic
model checking, accepting user-provided policies. Z inserts
policy predicates as assert statements in the source code, then
translates everything to an intermediate LLVM representation, and
nally invokes its verier to determine assertion violations. The