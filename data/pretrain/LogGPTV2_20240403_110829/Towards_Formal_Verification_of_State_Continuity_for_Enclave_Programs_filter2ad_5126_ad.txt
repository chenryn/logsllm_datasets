rule open to executability without
order dependencies of timepoints
and facts
Modeling instructions in individ-
ual rules and utilizing atomic rule
executability (§2.2.7)
Arguments
through public channel
and returns
pass
Public channel use in combination
Tamarin’s built-in Dolev Yao ad-
versary capabilities
Table 1: SGX threat model construction
pointer. These two constraints effectively establish a unique
pair instance lock@t1 and unlock@t3 with pointer instance n.
Constraints at line 5-6 enforce any other lock-unlock pair, rep-
resented by pointer variable ptr_2, must occur either before
or after the lock-unlock pair established at line 3-4. Line 7
covers the other possible order of two arbitrary lock instances
in the premise. Particularly, the lock behavior enforced at lines
2-6 for #t1 
( #t1  #t =# t3 )
& ( All Lock ( ptr_2 , owner ) @t == >
#t 
#t = local_a. For each instance of an enclave-thread,
only one of the condition holds true based on the enclave-
thread speciﬁc instances of local variable local_a and the
global variable valG.
5 Case Studies
In this section, we present three case studies to showcase our
approach towards automated veriﬁcation of state continuity.
5.1 State Continuity w/ Monotonic Counters
Hyperledger Sawtooth [1] is a permissioned blockchain frame-
work to build customized decentralized applications. Saw-
tooth supports multiple consensus protocols, including a
Proof-of-Elapsed-Time (PoET) that leverages Intel SGX to
ensure each node’s fair participation in the consensus proto-
col. PoET protocol works in two phases: the sign-up phase
and the election phase.
To join the distributed network, a node launches an enclave
which generates a pair of asymmetric keys and sends the
public key certiﬁcate (together with a linkable attestation
signature) to the network. Thus the identity of an enclave
(and the node) can be uniquely identiﬁed by the certiﬁcate.
Additionally, a trusted MC will be created to enforce unique
PoET certiﬁcate generation per node. After this sign-up phase,
the node qualiﬁes for the node election phase.
The election phase of Sawtooth V1.0.5 [3] is described
in Figure 3. Two ecalls are implemented to allow the node
to participate in the block leader election. The ﬁrst ecall
CreateWaitTimer (CWT) performs three major steps. First,
it records the current time as the reference start time using
trusted time API time_ref and generates a random time
duration as wait_duration that the nodes must wait. Sec-
ond, it increments the associated MC and records the counter
value in MC_ref. Third, it encapsulates time_ref, MC_ref,
and wait_duration in an object waitTimerObject, which
is signed with the private key of the node and transferred
out to the application, so that the node can wait outside the
enclave for the wait duration before invoking the second ecall.
The second ecall CreateWaitCertificate (CWC) per-
forms several checks to ensure the fairness of the protocol:
First, it unseals the approved sign-up data created during the
sign-up phase. Second, waitTimerObject is veriﬁed with
PoET node’s public key to ensure the integrity of encapsulated
variables. Third, the latest MC value is read and compared
against the reference value. Fourth, by reading the current
time, it calculates whether the elapsed time is greater than
the expected wait duration. Only after all the checks pass
does the enclave generate a PoET certiﬁcate to establish the
proof of the elapsed wait time. Before returning, the MC is
incremented in order to prevent another certiﬁcate generation
without any wait time. Once the certiﬁcate is broadcasted
into the peer-to-peer network, the node with the certiﬁcate of
the smallest wait duration wins the round and is allowed to
publish a block in the ledger.
582    30th USENIX Security Symposium
USENIX Association
In order to aid the termination of the proof, we also in-
cluded two helper lemmas (see §2.2.5). The ﬁrst lemma states
that each MC read or increment rule instance must have a cor-
responding antecedent MC create rule instance. The second
lemma ensures that the MC must increase monotonically.
5.1.2 Security Property
The security property studied here is to ensure fairness of the
protocol. Speciﬁcally, for each CWT ecall, only one CWC is
allowed to generate a certiﬁcate after the duration has passed.
This is enforced by the increasing MC values. The applica-
tions state transits in the following sequence:
1. MC value is less than the reference value ⇒ the certiﬁcate
is not generated yet;
2. MC value equals the reference value ⇒ generate the cer-
tiﬁcate and increment the MC value;
3. MC value is greater than the reference value ⇒ Abort
(certiﬁcate as already been generated).
The property, as shown below, states that a node cannot
generate two certiﬁcates with the same MC_ref.
All PoETCertificate_ex ( platform , MC_ref ) @t1
& PoETCertificate_ex ( platform , MC_ref ) @t2
== > # t1 =# t2
5.1.3 Analysis Results
For the vulnerable version V1.0.5, Tamarin shows that the
security property does not hold. In the proof graph, process
identity helps in tracking different enclave-processes. The at-
tack is shown by instantiating two parallel enclave-processes,
with shared MC, which can read the same reference MC value
using read API before certiﬁcate generation. The detailed at-
tack graph, produced by Tamarin, is shown in Appendix B
for readers of interests. The vulnerability exists due to using
a non-incremental API, sgx_read_monotonic_counter, to
gauge the certiﬁcate generation state, especially one where an
adversary can repeat this state by exploiting multiple enclave-
processes. We have conﬁrmed the attack validity in the Saw-
tooth SGX code.
The vulnerability is ﬁxed in the latest version of Sawtooth
[2] by revising the implementation of the ecall CWC. Speciﬁ-
cally, the call to sgx_increment_monotonic_counter was
moved to the beginning of ecall. This prevents the second con-
current ecall from generating the certiﬁcate without increasing
the counter. We accommodate the change into the Tamarin
safe model by replacing Read MC API with Increment API
and omitting the Increment MC API after successful certiﬁ-
cation generation. After this change, the desired property is
proved. That is, only one certiﬁcate with unique reference
MC value can be generated per node per election round.
Figure 3: Protocol workﬂow of Sawtooth PoET.
5.1.1 Tamarin Model
We model one ISV and multiple nodes in the blockchain
network. The association network has three layers: ISV, Plat-
form/MRENCLAVE/Users, and enclave-process. The ecall
CWT is modeled as a sequence of two rules and CWC is
modeled as three rules. MC is modeled in the same way as
described in §4.5. MC counters are associated with the same
MRENCLAVE owner policy. The ecall CWT receives sign-up
information, and returns the reference MC value and its sig-
nature, and the sealed sign-up data, which will be used by
the ecall CWC. CWC performs checks of the input data, and
generates a certiﬁcate if all checks pass. The wait operation
is abstracted away.
Rules representing critical events are designated with
speciﬁc action-labels. For example, the CWC rule for
generating the certiﬁcate generation event is marked with
the
action-label PoETCertificate_valMC(platform,
MC_ref), where platform represents the node’s identity and
MC_ref is the reference MC value obtained from the MC.
USENIX Association
30th USENIX Security Symposium    583
Sawtooth ApplicationMCKeyGen SKuser,  PKuserSign-up PhaseSGX Create MC1, mcidSGX Seal Policy MRENCLAVE seal_cwt ← {mcid, SKuser,  PKuser}seal_keyecall CWT(seal_cwt) SGX Unseal mcid, SKuser,  PKuserSGX Inc MC, mcidMC_refSGX Seal Policy MRENCLAVE seal_cwc ← {mcid, MC_ref, SKuser,  PKuser}seal_keymc_sign ← Sign{MC_ref}SKuserecall CWC(seal_cwc, mc_sign, MC_ref) SGX Unseal mcid, MC_ref, SKuser,  PKuserVerifySign  Sign{MC_ref}SKuser with PKuserSGX Read MC, mcidvalMCIf  valMC == MC_ref        Gen PoETCertificateelse           exit ecallwait outside ecallSGX Inc MC, mcidvalMC5.2 State Continuity with Global Variables
SGXEnabledAccess [19] is a secure remote monitoring frame-
work for IoT devices. Due to limited computing power and
resources of the IoT devices (e.g., Samsung SmartHome), the
collected IoT data is often sent to a remote cloud server for
further processing. One application of such a framework is
remote patient monitoring. Personal vitals of a patient are
collected by several IoT devices’ sensors and aggregated by
a trusted broker (TB) gateway on the user side; the data is
sent to a cloud server for analysis and processing by health
care providers (HCP). TB maintains a user-deﬁned policy
specifying which HCP services can access the patient data
and provisions secret keys and the encrypted data to the HCP
cloud application accordingly. SGX is leveraged on the HCP
side to protect user data from unauthorized access.
To allow the user to manage the access control to the her
uploaded data, a heartbeat protocol is introduced between
the TB and HCP enclave. After establishing a secure RA
session with the HCP application, the TB program period-
ically sends encrypted heartbeat signals to the HCP cloud.
Each signal consists of two parameters: 1) an activeness ﬂag
(i.e., is_revoked) indicating whether the uploaded data can
be accessed and 2) a monotonically increasing counter for
indexing the heartbeat signals. As long as the user allows
her uploaded data to be accessed within the HCP service, the
heartbeat signal is sent with an active state. Once a user de-
cides to revoke access to her uploaded data, the last heartbeat
signal is sent with an inactive state. On the HCP side, heart-
beat signals are processed within an SGX enclave through
an ecall ecall_heartbeat_process. The enclave decrypts
the message (with the key derived from the remote attesta-
tion) and retrieves the counter value and the activeness ﬂag.
The enclave maintains two global variables to track the latest
counter and to ensure the maximum allowed duration between
heartbeat signals. These two global variables serve to prevent
replays of the heartbeat signals and packet delays.
5.2.1 Tamarin Model
As
shown in Figure 4, we modeled the
We model multiple users (represented by TBs) communicat-
ing with the HCP application. Since the ISV and platform
entities were not required in enclave operations, the associa-
tion network consists of only one layer—the enclave-process.
ecall
heartbeat_process as a sequence of four rules cover-
ing steps 1-2, 3, 4, 5, respectively. Additional two rules are
introduced to cover branching at step 3 and 5 of the enclave-
thread instructions. The thread decrypts the received heartbeat
signal, performs various checks, and updates the global
variable accordingly. The events of global variable update
are recorded by designating a speciﬁc action-label E_update
(p_id, t_id, k, ptrG, valG, ptrG_new, valG_new,
is_revoked_rcvd) to the ecall rule, which updates the
global variable. Here p_id and t_id are the process identity
Figure 4: Interaction workﬂow of one TB device with ecall
heartbeat_process
and thread identity; k is the RA key; ptrG and valG are the