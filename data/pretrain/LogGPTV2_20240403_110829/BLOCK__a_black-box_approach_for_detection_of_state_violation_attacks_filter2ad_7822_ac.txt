Web ApplicaƟon
Database
Index by session  id
Session
Info 
Figure 4: Overview of BLOCK
processor ﬁrst extracts web templates from observed web
pages, then parses both the input and output messages into
the designated format: a request or response key associated
with a set of key/value pairs for both parameters and ses-
sion variables. The parsed traces are fed into the invariant
extractor, where all three types of invariants are derived.
Especially, the value-related invariants (e.g., the equality re-
lationship between variables, the enumeration value set of
variables) are inferred by leveraging Daikon engine [9], a
well-known tool for dynamic inference of program invari-
ants. The traces are transformed into the format required by
Daikon engine and the output is a set of invariants extracted
for each declared entry. Presence-related invariants are ex-
tracted by self-developed programs. All extracted invariants
comprise the web application’s speciﬁcation.
Web Request
User
Simulator
BLOCK
Message Constructor
Web Server
Web Page
Web 
ApplicaƟon
Templates
Trace Collector
Template Extractor
Invariants
Invariant Extractor
Session
Info 
Figure 5: Training Mode
4.2 Detection Mode
Once the invariants are extracted, BLOCK switches to
the detection mode, as shown in Fig. 6. The invariant in-
terpreter loads and interprets the extracted invariants. At
runtime, the message constructor combines session informa-
tion with the intercepted web request, composes an input
and sends it to the detector for evaluation. If the input is
accepted, the web request is forwarded to the web applica-
tion and logged as the current input for the web application.
Otherwise, the web request is dropped. When the message
constructor receives a web response, if the response is a redi-
rection, the subsequent web request will not be evaluated or
logged. If the response is a web page, the message construc-
tor assigns the web page a response key based on its web
template, composes an output and sends it to the detector,
where the output is paired with the current input and eval-
uated. If the output is accepted, the web page is returned to
the client and the key pair is logged for the current user ses-
sion. Otherwise, the web response is blocked and the current
input is invalidated. After the user’s session has terminated,
all of the logged key pairs are cleaned up.
5. EVALUATION
(cid:1)(cid:2)(cid:1)
Web Request
BLOCK
Client
Message Constructor
Web Page
Templates
Detector
Invariants
Invariant Interpreter
Web Server
Web 
ApplicaƟon
Session
Info 
Figure 6: Detection Mode
We evaluate our approach using a set of open source PHP
web applications, which are representative with diﬀerent types
of functionalities. (1) Scarf is a conference management sys-
tem, which is used for managing sessions, papers, users and
comments.
It is known with an auth bypass vulnerability
(CVE-2006-5909). The attacker can directly visit the ad-
ministrative page generaloptions.php and modify the system
settings and user accounts, since the admin page doesn’t
check the privilege of current user. It echoes the ﬁrst case
of auth bypass in the example application. (2) Simplecms
is a simple content management system that allows the ad-
min to publish and manage contents. It is also vulnerable
to an auth bypass attack in Auth.php page (BID 19386). It
uses the register globals mechanism insecurely. An attacker
can append a parameter loggedin to the web request and
bypass the authentication check. It echoes the second case
of auth bypass in the example application.
(3) Bloggit is
a blog application that supports web blog management. It
also has an auth bypass vulnerability (CVE-2006-7014) in
admin.php page where the restrictive code continues being
executed after the auth check fails. It echoes the third case
of auth bypass in the example application. (4) Wackopicko
[24] is an online photo sharing website that allows users to
upload pictures, comment on and purchase other people’s
pictures, etc. It is initially written for testing web applica-
tion vulnerability scanners.
It is designed with a number
of vulnerabilities, such as cross-site scripting, SQL injection,
ﬁle inclusion, etc. Here, we focus on its parameter manip-
ulation vulnerability. After a user logs in, he/she can view
the personal information in home.php page. However, an
attacker can manipulate the userid parameter to view any
other user’s information and owned pictures. (5) OsCom-
merce [17] is a widely-used open source e-commerce applica-
tion. To evaluate our approach of handling workﬂow bypass
attacks, we instrument one vulnerability into the checkout
procedure, which allows the attacker to directly go to the
payment page without selecting the shipping method and
the total charge doesn’t include shipping fees. Table 1 shows
a summary of web applications we use for evaluation.
All the web applications and BLOCK (based on Web-
Scarab) are deployed on a 2.13GHz Core 2 Linux server with
2GB RAM, running Ubuntu 10.10, Apache web server (ver-
sion 2.2.16) and PHP (version 5.3.3). To collect training
traces, each web application is driven by a user simulator,
which emulates the interactions between a normal user and
the web application. For each web application, user roles
and atomic operations are ﬁrst identiﬁed manually. Then,
the user simulator is developed based on the Selenium web-
driver [21] to emulate a normal user operating a web applica-
tion. The simulator leverages a library of user information
(cid:1)(cid:3)(cid:2)
Table 1: Summary of Evaluated Web Applications
Application PHP
ﬁles
21
Vulnerability
Description
Scarf
Auth
bypass
(CVE-2006-5909)
Auth
(BID 19386)
bypass
Auth
bypass
(CVE-2006-7104)
Parameter ma-
nipulation
Workﬂow bypass
(instrumented)
Simplecms
23
BloggIt
24
Wackopicko
53
OsCommerce 533
Conference
management
system
Content
management
system
Blog engine
Photo shar-
ing website
Open source
e-commerce
solution
of all the undergraduate students from a network security
class and is able to automatically explore the web appli-
cation, such as clicking the links, ﬁlling in and submitting
forms. Among the available atomic operations for the cur-
rently chosen user, it randomly selects one as the emulated
user’s next step. The user simulator is set up at a 2.83GHz
Core 2 desktop with 8GB RAM running Windows 7 and
Firefox 4. The client is connected to the web server using
Ethernet.
5.1 Detection Effectiveness
1
BLOCK ﬁrst runs in the training mode to collect the ex-
ecution traces, generated by the user simulators. Table 2
. Then, it ana-
shows the summary of our collected traces
lyzes those traces, extracts web request keys, web page tem-
plates, as well as all three types of invariants. To observe
the impact of the training set size on the number of derived
invariants, we vary the training set size and calculate the
resulting invariants. Fig. 7 shows the experiment result we
obtain for the Scarf application. We can see that the num-
bers of type I and III invariants initially decrease and then
converge with the increase of training set size, indicating the
elimination of false invariants learnt from insuﬃcient train-
ing samples. The number of type II invariants ﬁrst increases,
due to the exploration of new state space that has not been
revealed by the small training set, then also slowly converges.
Based on this observation, we use the training set for each
application where the number of invariants converges.
800
600
400
200
s
t
n
a
i
r
a
v
n
i
f
o
r
e
b
m
u
N
0
500
1000
1500
2000
Training set size (# of requests)
Type I Invariant
Type II Invariant
Type III Invariant
2500
3000
Figure 7: Number of invariants vs. Training set size
(Scarf application)
1
Here, we note that our training only covers the part of most
used functions for customers in OsCommerce application.
Also, we don’t count redirection headers as web pages.
Table 2: Summary of Training Set
Application
Requests Web
Scarf
Simplecms
BloggIt
Wackopicko
OsCommerce
3225
2661
2657
2949
3879
Pages
3200
2555
2645
2946
3444
Request
Keys
21
17
16
20
25
Web Tem-
plates
26
12
13
12
36
Key
Pairs
69
34
47
30
123
I
Type
Inv
90
56
65
36
374
Type II
Inv
640
190
377
155
4609
Type III
Inv
11
28
9
37
26
Then BLOCK switches to the detection mode. The clean
test set is generated by both the user simulators and the un-
dergraduate students who manually operate the web appli-
cations. Ten attack instances are manually generated under
diﬀerent circumstances against each web application. Table
3 shows the summary of the test set and all the detection re-
sults. All of the attacks are successfully detected by BLOCK
and the false positives for both web requests and responses
are fairly low. This fact demonstrates the eﬀectiveness of
our approach at detecting state violation attacks.
We further investigate those false positives and ﬁnd out
two major sources. One is the incomplete exploration of the
web application performed by the user simulator. The capa-
bility of the user simulator determines the state space that
our detection system can characterize for the web applica-
tion. The more the simulator explores, the richer and more
accurate these invariants are. In our evaluation, some false
positives result from error pages that are not explored by the
simulator, thus not observed and proﬁled by the invariant
extractor. In practice, if real-world traces are available, our
detection system can be readily applied and work eﬀectively.
The other source of false positives is the inaccurate symbol-
ization of web pages. Page symbolization aﬀects both the
training and detection phase.
In the training phase, both
the number and the quality of the inferred invariants, es-
pecially for type II, are closely related with the number of
extracted web templates. We can see that the number of
type I and III invariants converges very fast, thus leading to
an extremely low number of false positives for web requests,
while type II invariants bring more false positives of web re-
sponses. In the detection phase, due to the content drift of
web pages, it is possible that a web page is classiﬁed into a
wrong template, which likely results in an unobserved pair
of input/output and thus a false positive. We use the same
clustering threshold for all applications to extract web tem-
plates, which also introduces certain level of inaccuracies.
Since web template extraction is not our focus in this paper,
we adapt the methods from TEXT [13] and it works well
with the web application we use for evaluation. To increase
the accuracy and robustness of web page symbolization, ad-
vanced algorithms or manual audit can be introduced for
guiding the process.
The detection results also show the types of invariants
violated by diﬀerent attacks. Auth bypass attacks on in-
suﬃcient checking of session variables result in violations
of type I invariants that are imposed on the session state,
when web requests are received. They would also violate
type III invariants due to the missing step of authentica-