the oracles Πs
U involved in the executions of P . Dur-
ing the game, A can ask any of the above queries, and
once, asks a Test-query. Then, one ﬂips a coin b and
returns SK if b = 1 or a random string if b = 0. At the
end of the game, adversary A outputs a bit b
and wins
. The Test-query is asked only once
the game if b = b
and is only available if Πs
U is Fresh (see section 5).
(cid:2)
(cid:2)
4.6 Executing the Protocol in the Presence of
an Adversary
Choose a protocol P with a session-key space SK, and
an adversary A. The security deﬁnitions take place in the
context of making A play the above game Gameake(A, P ).
P determines how Πs
U behaves in response to messages from
the environment. A sends these messages:
it controls all
communications between instances; it can at any time force
an oracle Πs
U to divulge SK or more seriously LLU ; it can
initiate simultaneous executions of P . This game is initial-
ized by providing coin tosses to GLL, A, all Πs
U , and running
GLL(1k) to set LLU . Then
2571. Initialize any Πs
SK ← null.
U to SIDS ← null, PIDS ← null,
2. Initialize adversary A with 1k and access to any Πs
U ,
3. Run adversary A and answer oracle queries as deﬁned
above.
4.7 Discussion
The group Diﬃe-Hellman-like protocols [2, 3, 13, 18, 20,
27, 31] are generally speciﬁed using the broadcast commu-
nication primitive; the broadcast primitive allows a player
to send messages to an arbitrary pool of players in a single
round. However such a communication convention is irrele-
vant to our notions of security; for example, one can always
turn a broadcast-based protocol P into a protocol P
which
sends only one message in each round and which still meets
our deﬁnitions of security as long as P does.
(cid:2)
The group Diﬃe-Hellman-like protocols also employ a dif-
ferent connectivity graph (e.g, ring or tree) to route mes-
sages among players. The connectivity graph allows the pro-
tocols to meet speciﬁc performance attributes. However the
way the messages are routed among players does not impact
our security deﬁnitions; one can always turn a protocol P
into a protocol P
that diﬀers only in its message routing.
(cid:2)
5. DEFINITIONS OF SECURITY
In this section we present the deﬁnitions that should be
satisﬁed by a group Diﬃe-Hellman scheme and what break-
ing a group Diﬃe-Hellman scheme means. We uniquely de-
ﬁne the partnering from the session IDS and, thus, it is
publicly available to the adversary3. We present each def-
inition in a systematic way: we give an intuition and then
formalize it.
Recall that forward-secrecy entails that loss of a LL-key
does not compromise the semantic security of previously-
distributed session keys. For the purpose of this paper, we
only consider a weak corruption model, in which the adver-
sary obtains only the long-lived key and not any internal
data (i.e. random bits used by a process). Let’s also recall
that a function (k) is negligible if for every c > 0 there exists
a kc > 0 such that for all k > kc, (k)  1,≺ Πs1
with :
1 , Πs2
2 , . . . , Πsk
k
(cid:16)
Πs1
k = Πt
We denote this partnering as Πs
1 = Πs
i , Πsk
i−1 ↔ Πsi
i .
j, Πsi−1
i (cid:1) Πt
j.
We complete in polynomial time (in |V |) the graph GSIDS
to obtain the graph of partnering : GP IDS = (V
), where
j} (see [15] for graph
(cid:2)
V
algorithms), and then deﬁne the partner IDS for oracle Πs
i
as:
i (cid:1) Πt
= {(Πs
= V and E
j) : Πs
i , Πt
, E
(cid:2)
(cid:2)
(cid:2)
PIDS(Πs
i ) = {Πt
j
j}
i (cid:1) Πt
: Πs
Although the above deﬁnitions may appear quite artiﬁ-
cial, we emphasize that the authentication goals need to
be deﬁned from essentially public criteria (in other words,
from the partnering notion). Claiming “players are mutu-
ally authenticated iﬀ they hold the same SK” would lead to
unpractical deﬁnitions. The mutual authentication is essen-
tialy a public, veriﬁable notion.
5.2 Freshness
U accepts. Third, Πs
The freshness deﬁnition captures the intuitive notion that
a session key SK is deﬁned Fresh if no oracle is corrupted
at that moment, and it remains Fresh if no Reveal-query
is asked later to the oracle or one of its partners. More
precisely, an oracle Πs
U is Fresh (or holds a Fresh SK) if
the following four conditions hold: First, Πs
U has accepted.
Second, nobody has been asked for a Corrupt-query before
U has not been asked for a Reveal-
Πs
query. Fourth, the partners of Πs
U ) have not been
asked for a Reveal-query.
5.3 AKE Security
In an execution of P , we say an adversary A (compu-
tationally bounded) wins if she asks a single Test-query to
a Fresh oracle and correctly guesses the bit b used in the
game Gameake(A, P ). We denote the ake advantage as
P (A); the advantage is taken over all bit tosses. Pro-
Advake
tocol P is an A-secure AKE if Advake
5.4 Authentication Security
P (A) is negligible.
U , PIDS(Πs
U .
This deﬁnition of authentication captures the intuitive no-
tion that it should be hard for a computationally bounded
adversary A to impersonate a player U through one of its
instances Πs
In an execution of P , we say adversary A violates player-
to-players authentication (PPsA) for oracle Πs
U if Πs
U ter-
U ) and |PIDS(Πs
U )| (cid:11)=
minates holding SIDS(Πs
(A)
n − 1. We denote the ppsa probability as Succppsa
(A) is
and say protocol P is an A-secure PPsA if Succppsa
negligible.
In an execution of P , we say adversary A violates mutual
authentication (MA) if A violates PPsA authentication for
at least one oracle Πs
U . We name the probability of such an
P (A) and say protocol P is an
event the ma success Succma
P (A) is negligible.
A-secure MA if Succma
U ), PIDS(Πs
P
P
Therefore to deal with mutual authentication (or player-
to-players authentication in a similar way), we consider a
258new game Gamema(A, P ) in which the adversary exactly
plays the same way as in the game Gameake(A, P ) with
the same oracle accesses but with a diﬀerent goal: to violate
the mutual authentication. In this new game, the adversary
is not really interested in the Test-query, in the sense that
it can terminate whenever he wants. However, we leave this
query available for simplicity.
5.5 Secure Signature Schemes
A signature scheme is deﬁned by the following [28]:
• Key generation algorithm G. On input 1k with security
parameter k, the algorithm G produces a pair (Kp, Ks)
of matching public and secret keys. Algorithm G is
probabilistic.
• Signing algorithm Σ. Given a message m and (Kp, Ks),
Σ produces a signature σ. Algorithm Σ might be prob-
abilistic.
• Veriﬁcation algorithm V . Given a signature σ, a mes-
sage m and Kp, V tests whether σ is a valid signature
of m with respect to Ks. In general, algorithm V is
not probabilistic.
Σ (A).
The signature scheme is (t, )-CMA-secure if there is
no adversary A which can get a probability greater than
 in mounting an existential forgery under an adaptively
chosen-message attack (CMA) within time t. We denote
this probability  as Succcma
5.6  Decisional and Computational Diffie-Hell-
Let G = (cid:2)g(cid:3) be a cyclic group of prime order p and x1, x2, r
chosen at random in Zp. A (T, )-DDH-distinguisher for G
is a probabilistic Turing machine ∆ running in time T that
given any triplet (gx1 , gx2 , gr) outputs “True” or “False”
man Assumptions
such that:(cid:2)(cid:2)(cid:2) Pr[∆(gx1 , gx2 , gx1x2 ) = “True”] −
Pr[∆(gx1 , gx2 , gr) = “True”]
(cid:2)(cid:2)(cid:2) ≥ 
We denote this diﬀerence of probabilities as Advddh
G (∆). The
DDH problem is (T, )-intractable if there is no (T, )-
DDH-distinguisher for G.
A (T, )-CDH-attacker for G is a probabilistic Turing ma-
chine ∆ running in time T that given (gx1 , gx2 ), outputs
gx1x2 with probability at least  = Succcdh
G (∆). The CDH
problem is (T, )-intractable if there is no (T, )-attacker
for G.
5.7  Group Computational Diffie-Hellman As-
Let G = (cid:2)g(cid:3) be a cyclic group of prime order p and n be a
polynomially-bounded integer. Let In be {1, . . . , n}, P(In)
be the set of all subsets of In and Γ be a subset of P(In)
such that In /∈ Γ.
sumption (G-CDH)
We deﬁne the Group Diﬃe-Hellman distribution relative
(cid:5)
to Γ as:
(cid:1)
G-CDHΓ =
(J, g
j∈J xj ) | (x1, . . . , xn) ∈R Zn
p
(cid:3) (cid:4)
J∈Γ
If Γ = P(I)\{In}, we say that G-CDHΓ is the Full Gener-
alized Diﬃe-Hellman distribution [12, 25, 31].
Given Γ, a (T, ) G-CDHΓ-attacker for G is a probabilistic
Turing machine ∆ running in time T that given G-CDHΓ
outputs gx1···xn with probability at least . We denote this
probability by Succgcdh
(∆). The G-CDHΓ problem is (T, )-
intractable if there is no (T, )-G-CDHΓ-attacker for G.
G
In the same way, we can deﬁne a G-DDHΓ distinguisher
as a probabilistic Turing machine that given G-CDHΓ and
either gx1···xn or a random value, can distinguish the two
situations with non-negligible probability.
5.8 Adversary’s Resources.
resources the adversary A expends. The resources are:
The security is formulated as a function of the amount of
• t time of computing;
• qse, qre, qco number of Send, Reveal and Corrupt queries
adversary A respectively makes.
By notation Adv(t, . . .) or Succ(t, . . .), we mean the maxi-
mum values of Adv(A) or Succ(A) respectively, over all ad-
versaries A that expend at most the speciﬁed amount of
resources.
6. A SECURE AUTHENTICATED GROUP
DIFFIE-HELLMAN SCHEME
We ﬁrst introduce the protocol AKE1 and then prove it
is a secure AKE scheme in the ideal hash model. Then at
the end of this section we comment on the security theorem
and the proof.
6.1 Preliminaries
In the following we assume the ideal hash function model.
to {0, 1}(cid:28) where " is a
We use a hash function H from {0, 1}∗
security parameter. The session-key space SK associated to
this protocol is {0, 1}(cid:28) equipped with a uniform distribution.
In this model, a new query, namely Hash-query is available
to adversary A; the adversary can submit an arbitraly long
bit string and obtain the value of H(m).
Arithmetic is in a ﬁnite cyclic group G = of order a
k-bit prime number q. This group could be a prime subgroup
∗
p, or it could be an (hyper)-elliptic curve group. We
of Z
denote the operation multiplicatively.
6.2 Description of AKE1
This is a protocol in which the players ID = {Ui : 1 ≤ i ≤
n} are arranged in a ring, the name of the players are in the
protocol ﬂows, the ﬂows are signed using the long-lived key
LLU , the session key SK is sk = H(ID, F ln, gx1...xn ), where
F ln is the downﬂow; SIDS and PIDS are appropriately de-
ﬁned.
As illustrated by the example on Figure 1, the protocol
consists of two stages: up-ﬂow and down-ﬂow. In the up-
ﬂow the player raises the received intermediate values to
the power of its private input and forwards the result to the
next player in the ring. The down-ﬂow takes place when
Un receives the last up-ﬂow and computes sk. Un raises
the intermediate values it has received to the power of its
private key and broadcasts the result (i.e. F ln) which allows
the other players to construct sk, granted their private data.
6.3 Security Theorem
Let P be the AKE1 protocol, GLL be the associated LL-
key generator. One can state the following security result:
259U 1
R← [0, p − 1]
x1
X1 := {g, gx1}
F l1 := {ID, X1}
U 2
U 3
U 4
−−−−−−−−−−−−−−→
[F l1]U1
−−−−−−−−−−−−−−→
[F l2]U2
−−−−−−−−−−−−−−→
[F l3]U3
?
V (F l1)
= 1