title:AppPolicyModules: Mandatory Access Control for Third-Party Apps
author:Enrico Bacis and
Simone Mutti and
Stefano Paraboschi
AppPolicyModules: Mandatory Access Control
for Third-Party Apps
Enrico Bacis
PI:EMAIL
Simone Mutti
PI:EMAIL
Stefano Paraboschi
PI:EMAIL
Department of Management, Information and Production Engineering
Università degli Studi di Bergamo, Italy
ABSTRACT
Android has recently introduced the support for Mandatory
Access Control, which extends previous security services re-
lying on the Android Permission Framework and on the
kernel-level Discretionary Access Control. This extension
has been obtained with the use of SELinux and its adap-
tation to Android (SEAndroid). Currently, the use of the
MAC model is limited to the protection of system resources.
All the apps that are installed by users fall in a single undif-
ferentiated domain, untrusted app. We propose an extension
of the architecture that permits to associate with each app a
dedicated MAC policy, contained in a dedicated appPolicy-
Module, in order to protect app resources even from malware
with root privileges.
A crucial diﬀerence with respect to the support for policy
modules already available in some SELinux implementations
is the need to constrain the policies in order to guarantee
that an app policy is not able to manipulate the system
policy. We present the security requirements that have to
be satisﬁed by the support for modules and show that our
solution satisﬁes these requirements. The support for app-
PolicyModules can also be the basis for the automatic gen-
eration of policies, with a stricter enforcement of Android
permissions. A prototype has been implemented and exper-
imental results show a minimal performance overhead for
app installation and runtime.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Access control
Keywords
Android, App Security, Policy Modularity, Administrative
Policies, Mandatory Access Control, SELinux
1.
INTRODUCTION
Mobile operating systems play a central role in the evolu-
tion of Information and Communication Technologies. One
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore..
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714626.
of the clearest trends of the past few years has been the adop-
tion by users of mobile portable devices, replacing personal
computers as the reference platform for the delivery of many
ICT resources and services. The rapid success and wide de-
ployment of mobile operating systems has also introduced
a number of challenging security requirements, making ex-
plicit the need for an improvement of security technology.
The mobile scenario is indeed characterized by two mu-
tually reinforcing aspects. On one hand, mobile devices are
high-value targets, since they oﬀer a direct ﬁnancial incen-
tive in the use of the credit that can be associated with the
device or in the abuse of the available payment services (e.g.,
Google Wallet, telephone credit and mobile banking) [13,18].
In addition, mobile devices permit the recovery of large col-
lections of personal information and are the target of choice
if an adversary wants to monitor the location and behavior
of an individual. On the other hand, the system presents
a high exposure, with users of modern mobile devices con-
tinuously adding new apps to their devices, to support a
large variety of functions (we follow the common convention
and use the term app to denote applications for a mobile
operating system).
The risks are then greater and diﬀerent from those of clas-
sical operating systems [2]. The frequent installation of ex-
ternal code creates an important threat. The design of secu-
rity solutions for mobile operating systems has to consider
a careful balance between, on one side, the need for users to
easily extend with unpredictable apps the set of functions of
the system and, on the other side, the need for the system
to be protected from potentially malicious apps.
It is to note that the greatest threats derive from apps that
are oﬀered through delivery channels that are alternative to
the “oﬃcial” app markets (e.g., [19]), whose number of app
installations is increasing rapidly, pointing out the need of
wider security layers. Apps in oﬃcial markets, instead, are
veriﬁed by the market owner and the ones detected as misbe-
having are promptly removed from the market. The correct
management of the app market is crucial, nevertheless it is
not able by itself to fully mitigate the security concerns. The
mobile operating systems have to provide a line of defense
internal to the device against apps that, due to malicious in-
tent or the presence of ﬂaws in system components or other
apps, may let an adversary abuse the system.
1.1 Rationale of the approach
The approach that we propose follows the principles of the
Android security model, which aims at isolating from each
other the apps that are executed by the system. Each app is
conﬁned within an assigned domain and interaction between
the elements of the system is managed by a privileged com-
ponent, which enforces the restrictions speciﬁed by a policy.
The approach presented in the paper aims at strengthening
this barrier, introducing an additional mechanism to guar-
antee that apps are isolated and cannot manipulate the be-
havior of other apps. The additional mechanism is obtained
with an adaptation of the services of a Mandatory Access
Control (MAC) model, which enriches the Discretionary Ac-
cess Control (DAC) services native to the Linux kernel.
MAC models are commonly perceived as oﬀering a signif-
icant contribution to the security of systems. However, one
drawback of MAC models is represented by policy manage-
ment which is a especially critical in complex systems such
as Android, where each OEM tries to customize the MAC
policy for its own devices. Samsung KNOX is the most well-
known example. Policy customization provides beneﬁts in
terms of security, but it inevitably leads to policy fragmen-
tation. Our work tries to do a step ahead in the policy
standardization deﬁning a set of entry points which can be
used by both OEMs and developers in order to extend, un-
der speciﬁc constraints, the MAC policy to fulﬁll their own
security requirements and subsequently try to mitigate the
policy fragmentation problem.
Apps can only become known to the system when the
owner asks for their installation. The MAC policy has then
to be dynamic, with the ability to react to the installation
and deletion of apps, which requires modularity and the ca-
pability to incrementally update the security policy, with
a policy module associated with an app. We use the term
appPolicyModule to characterize it (when space is limited,
like in table headers, we may use the acronym APM). The
support for appPolicyModules allows app developers to ben-
eﬁt from the presence of a MAC model, letting them deﬁne
security policies that increase the protection the app can get
against attacks coming from other apps, which may try to
manipulate the app and exploit its vulnerabilities.
1.2 Outline
Section 2 provides an overview of the Android security ar-
chitecture, describing the role of the MAC model introduced
by SEAndroid. Section 3 describes the threat to third-party
apps that the policy modules want to mitigate. Section 4
presents a model of SELinux policies, used in Section 5 to
formalize the requirements that policy modules have to sat-
isfy. Section 6 introduces the syntax used by appPolicyMod-
ules. Section 7 illustrates how the use of appPolicyModules
can improve the support of Android permissions. In Section
8 we discuss the performance results. Section 9 provides a
comparison with previous work in the area. Finally, Section
10 draws a few concluding remarks.
2. ANDROID SECURITY ARCHITECTURE
The Android security model shows a direct correspon-
dence with the overall Android architecture, which is or-
ganized in three layers (from bottom to top): (a) an un-
derlying Linux kernel, (b) a middleware framework, and (c)
an upper application layer. The Linux kernel in the lowest
layer provides low-level services and device drivers to other
layers and it diﬀers from a traditional Linux kernel, because
it aims at running in an embedded environment and does
not have all the features of a traditional Linux distribution.
The second layer, the middleware framework, is composed of
native Android libraries, runtime modules (e.g., the Dalvik
Virtual Machine and the alternative Android Runtime ART)
and an application support framework. The third layer is
composed by apps. Apps are divided into two categories:
(i) pre-installed apps (e.g., Web browser, phone dialer) and
(ii) third-party apps installed by the user. In the paper we
focus on the consideration of third-party apps, since the pre-
installed ones are already covered by the system policy.
Android provides distinct security mechanisms at the dis-
tinct layers. The Linux security model based on user identi-
ﬁers (uid) and group identiﬁers (gid) operates at the lowest
layer, with each app receiving a dedicated uid and gid. The
granularity of this access control model is at the level of ﬁles
and processes, reusing all the features of the classical DAC
model of Unix/Linux, with a compact acl that describes for
each resource the operations permitted respectively to the
owner, members of the resource group, and every user of the
system.
At the application layer, Android uses ﬁne-grained per-
missions to allow apps or components to interact with other
apps/components or critical resources. The Android Per-
mission Framework contains a rich and structured collection
of privileges, in the 4.4.4 version more than 200, focused on
the management of the large variety of resources that are
oﬀered by the operating system to apps. The access control
model assumes that apps specify in their manifest the set
of privileges that will be required for their execution. At
installation time, users of Android devices have to explicitly
accept the request for privileges by the app; in case the user
does not accept the app request, the app is not installed.
2.1 SEAndroid
Recently, the SEAndroid initiative [15] has led to a sig-
niﬁcant extension of the security services, with the integra-
tion of Security Enhanced Linux (SELinux) [12] into the
Android operating system. The goal of SEAndroid is to
build a mandatory access control (MAC) model in Android
using SELinux to enforce kernel-level MAC, introducing a
set of middleware MAC extensions to the Android Permis-
sion Framework. SELinux originally started as the Flux
Advanced Security Kernel (FLASK) [10] development by
the Utah University Flux team and the US Department of
Defense. The development was enhanced by the NSA and
released as open source software. SELinux policies are ex-
pressed at the level of security context (also known as secu-
rity label or just label ). SELinux requires a security context
to be associated with every process (or subject) and object,
which is used to decide whether access is allowed or not as
deﬁned by the policy. Every request a process generates to
access a resource will be accepted only if it is authorized
by both the classical DAC access control service and by the
SELinux policy. The advantage of SELinux compared to the
DAC model are its ﬂexibility (the design of Linux assumes
a root user that has full access to DAC-protected resources)
and the fact that process and resource labels can be assigned
and updated in a way that is speciﬁed at system level by the
SELinux policy (in the DAC model owners are able to fully
control the resources).
The middleware MAC extension chosen to bridge the gap
between SELinux and the Android permission framework
is called install-time MAC [15] (several middleware MACs
have been developed, but only the install-time MAC has
been integrated into the AOSP). This mechanism allows to
check an app against a MAC policy (i.e., mac permissions.xml).
The integration of this middleware MAC ensures that the
policy checks are unbypassable and always applied when
apps are installed and when they are loaded during system
startup.
The current design of SEAndroid aims at protecting core
system resources from possible ﬂaws in the implementa-
tion of security in the Android Permission Framework or at
the DAC level. The exploitation of vulnerabilities becomes
harder due to the constraints on privilege escalation that are
introduced by SELinux. Unfortunately, the current use of
SELinux in Android aims at protecting the system compo-
nents and trusted apps from abuses by third-party apps. All
the third-party apps fall within a single untrusted app do-
main and an app interested in getting protection from other
apps or from internal vulnerabilities can only rely on An-
droid permissions and the Linux DAC support. This is a
signiﬁcant limitation, since apps can get a concrete beneﬁt
from the speciﬁcation of their own policy.
3. THREAT MODEL
In Android each app receives a dedicated uid and gid at
install-time. These identiﬁers are used to set the user and
the group owner of the resources installed by the app in the
default data directory, which is /data/data/“package name”.
By default, the apps databases, settings, and all other data
go there. Since user data for an application also resides in
/data/data/“package name”, it is important that only that
application has access to that particular folder. This conﬁne-
ment of the data folders permits to enforce a strict isolation
from other applications.
In Android this isolation is only
enforced at DAC level, but this is not enough to protect the
app and its own resources by other apps with root privileges.
Android, by default, comes with a restricted set of permis-
sions for its user and the installed applications (i.e., no root
privileges). Despite this, apps can gain root privileges in
two ways and use it to provide desirable additional features
for users, but a malicious app may also abuse it to bypass
Android’s security measures.
On one hand many benign apps require root privileges to
accomplish their job. For example, Titanium Backup [17]
is one of Google Play’s best-selling apps and it needs root
privileges to backup system and user applications along with
their data. In this scenario, the user typically ﬂashes a recov-
ery console on the device which has the permission to write
on the system partition and from there she installs an app
such as SuperSU or Superuser in order to gain and manage
root privileges. After that, the user can give root privileges
to other applications. According to Google, users install
non-malicious rooting apps by a ratio of 671 per million in
2014 (increased by 38% compared to the 491 per million
in 2013 [11]). Moreover, there are successful community-
ROMs, such as CyanogenMod with over 10 million installa-