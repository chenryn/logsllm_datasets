# AppPolicyModules: Mandatory Access Control for Third-Party Apps

**Authors:**
- Enrico Bacis
- Simone Mutti
- Stefano Paraboschi

**Affiliation:**
Department of Management, Information and Production Engineering  
Università degli Studi di Bergamo, Italy

## Abstract
Android has recently introduced support for Mandatory Access Control (MAC), which extends the existing security services provided by the Android Permission Framework and kernel-level Discretionary Access Control (DAC). This extension is achieved through the use of SELinux, adapted for Android as SEAndroid. Currently, the MAC model is primarily used to protect system resources, with all user-installed apps falling into a single, undifferentiated "untrusted app" domain. We propose an extension to this architecture that allows each app to have its own dedicated MAC policy, encapsulated in an appPolicyModule. This approach enhances the protection of app resources even from malware with root privileges.

A key difference from existing SELinux policy modules is the need to constrain these policies to ensure they cannot manipulate the system policy. We present the security requirements for this module support and demonstrate that our solution meets these requirements. The appPolicyModules can also serve as a basis for automatically generating policies, enforcing Android permissions more strictly. A prototype implementation shows minimal performance overhead during app installation and runtime.

**Categories and Subject Descriptors:**
- D.4.6 [Security and Protection]: Access control

**Keywords:**
- Android, App Security, Policy Modularity, Administrative Policies, Mandatory Access Control, SELinux

## 1. Introduction
Mobile operating systems play a central role in the evolution of Information and Communication Technologies (ICT). One of the most significant trends in recent years is the widespread adoption of mobile devices, replacing personal computers as the primary platform for accessing ICT resources and services. This rapid adoption has introduced new security challenges, highlighting the need for improved security technologies.

### 1.1 Mobile Security Challenges
Mobile devices are high-value targets due to their financial incentives, such as credit card information and payment services like Google Wallet. They also store large amounts of personal data, making them attractive for surveillance. Additionally, the frequent installation of new apps by users increases the exposure to potential threats. Unlike traditional operating systems, mobile platforms must balance the need for easy app installation with robust security measures.

Apps from unofficial markets pose a greater risk compared to those from official stores, which are vetted and promptly removed if found to be malicious. However, even with strict market management, internal device defenses are necessary to protect against potentially harmful apps.

### 1.2 Rationale of the Approach
Our approach aligns with the Android security model, which aims to isolate apps from each other. Each app is confined within a specific domain, and interactions are managed by a privileged component enforcing a security policy. We enhance this isolation by introducing a mechanism based on Mandatory Access Control (MAC), which complements the native Discretionary Access Control (DAC) services of the Linux kernel.

MAC models are known for their strong security benefits but face challenges in policy management, especially in complex systems like Android. OEMs often customize MAC policies, leading to fragmentation. Our work addresses this by defining a set of entry points for both OEMs and developers to extend the MAC policy under specific constraints, aiming to standardize and mitigate fragmentation.

The MAC policy must be dynamic, capable of updating with the installation and deletion of apps. This requires modularity, allowing each app to have its own appPolicyModule (APM). This feature enables app developers to define security policies that enhance protection against attacks from other apps, including those with root privileges.

### 1.3 Outline
- **Section 2:** Overview of the Android security architecture, focusing on the role of the MAC model introduced by SEAndroid.
- **Section 3:** Description of the threats to third-party apps that appPolicyModules aim to mitigate.
- **Section 4:** Presentation of a model for SELinux policies.
- **Section 5:** Formalization of the requirements for policy modules.
- **Section 6:** Introduction of the syntax used by appPolicyModules.
- **Section 7:** Illustration of how appPolicyModules can improve the enforcement of Android permissions.
- **Section 8:** Discussion of performance results.
- **Section 9:** Comparison with previous work.
- **Section 10:** Concluding remarks.

## 2. Android Security Architecture
The Android security model is closely aligned with the overall Android architecture, which consists of three layers:
1. **Linux Kernel Layer:** Provides low-level services and device drivers, tailored for embedded environments.
2. **Middleware Framework Layer:** Comprises native libraries, runtime modules (e.g., Dalvik VM, ART), and application support frameworks.
3. **Application Layer:** Contains pre-installed and third-party apps.

### 2.1 SEAndroid
SEAndroid integrates Security Enhanced Linux (SELinux) into Android, extending the security services to include a mandatory access control (MAC) model. SELinux, originally developed as the Flux Advanced Security Kernel (FLASK), was enhanced by the NSA and released as open-source software. SELinux policies are defined at the level of security contexts, which are associated with processes and objects to determine access permissions.

The middleware MAC extension, called install-time MAC, ensures that policy checks are applied when apps are installed and loaded. The current design of SEAndroid focuses on protecting core system resources from flaws in the Android Permission Framework or DAC. However, all third-party apps fall into a single untrusted domain, limiting their ability to protect themselves from other apps or internal vulnerabilities. This is a significant limitation, as apps could benefit from specifying their own policies.

## 3. Threat Model
In Android, each app receives a unique uid and gid at installation, which are used to set the ownership of resources in the default data directory (`/data/data/“package name”`). This confinement enforces isolation from other applications at the DAC level. However, this is insufficient to protect apps from other apps with root privileges.

Root privileges can be gained in two ways:
1. **Benign Apps:** Some legitimate apps, like Titanium Backup, require root privileges to perform their functions. Users typically flash a recovery console and install apps like SuperSU to manage root privileges.
2. **Malicious Apps:** These can abuse root privileges to bypass Android's security measures.

According to Google, the installation of non-malicious rooting apps increased by 38% in 2014, with community ROMs like CyanogenMod being widely adopted. This highlights the need for additional security measures to protect app resources.