title:SANA: Secure and Scalable Aggregate Network Attestation
author:Moreno Ambrosin and
Mauro Conti and
Ahmad Ibrahim and
Gregory Neven and
Ahmad-Reza Sadeghi and
Matthias Schunter
SANA: Secure and Scalable Aggregate Network Attestation
Moreno Ambrosin1, Mauro Conti1, Ahmad Ibrahim2∗, Gregory Neven3,
Ahmad-Reza Sadeghi2, and Matthias Schunter4
1University of Padua, Italy
3IBM Research - Zurich, Switzerland
2Technische Universität Darmstadt, Germany
4Intel Labs - Darmstadt, Germany
{ahmad.ibrahim, ahmad.sadeghi}@trust.tu-darmstadt.de,
{ambrosin, conti}@math.unipd.it, PI:EMAIL, PI:EMAIL
ABSTRACT
Large numbers of smart connected devices, also named as the In-
ternet of Things (IoT), are permeating our environments (homes,
factories, cars, and also our body—with wearable devices) to collect
data and act on the insight derived. Ensuring software integrity (in-
cluding OS, apps, and conﬁgurations) on such smart devices is then
essential to guarantee both privacy and safety. A key mechanism to
protect the software integrity of these devices is remote attestation:
A process that allows a remote veriﬁer to validate the integrity of
the software of a device. This process usually makes use of a signed
hash value of the actual device’s software, generated by dedicated
hardware. While individual device attestation is a well-established
technique, to date integrity veriﬁcation of a very large number of
devices remains an open problem, due to scalability issues.
In this paper, we present SANA, the ﬁrst secure and scalable pro-
tocol for efﬁcient attestation of large sets of devices that works under
realistic assumptions. SANA relies on a novel signature scheme to
allow anyone to publicly verify a collective attestation in constant
time and space, for virtually an unlimited number of devices. We
substantially improve existing swarm attestation schemes [5] by sup-
porting a realistic trust model where: (1) only the targeted devices
are required to implement attestation; (2) compromising any device
does not harm others; and (3) all aggregators can be untrusted. We
implemented SANA and demonstrated its efﬁciency on tiny sensor
devices. Furthermore, we simulated SANA at large scale, to assess
its scalability. Our results show that SANA can provide efﬁcient
attestation of networks of 1, 000, 000 devices, in only 2.5 seconds.
1.
INTRODUCTION
Smart devices are rapidly spreading into every domain of our life.
These devices range from tiny wearables to larger industrial devices,
which could be also integrated among them, e.g., setting up building
automation (which involves physical access control, lighting, sheath-
ing, ventilating, and air conditioning). Unlike traditional computing
devices, smart devices that are deployed in massive numbers are
∗Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978335
often limited in cost, computing power, and size. Moreover, embed-
ded devices are often security and privacy critical, since they sense
the environment, collect private information, or controls physical
equipment, possibly causing damages also in the physical world.
Unfortunately, smart devices usually lack the security capabilities of
general purpose computers. Indeed, an adversary can easily attack
such devices, and compromise both their privacy and safety. One
common attack is to modify or replace a device’s ﬁrmware, as part
of a larger attack scenario [2, 1]. In order to prevent such attacks and
ensure the safe and secure operation of a device, it is important to
guarantee its software integrity, e.g., via remote software attestation.
Remote software attestation is an interactive protocol that allows
a prover to prove its software integrity to a remote veriﬁer. The
prover demonstrates to the veriﬁer that its software is in a known
“good state”, which has not been modiﬁed. This is usually achieved
by signing integrity-protected memory regions. Attestation of indi-
vidual smart devices is a well established research area. However,
to date there is a lack of viable approaches to securely scale device
attestation to a very large number of devices: Indeed, today’s Inter-
net of Things (IoT) infrastructures often rely on a cloud backend to
handle each individual device. However, this traditional approach
has some shortcomings, in particular in terms of communication
and computation cost for the cloud infrastructure, which is linear in
the number of attested devices. Recently, one proposed approach,
SEDA [5], moved a ﬁrst step towards a more scalable and efﬁcient
protocol for attesting a large population of devices. SEDA assumes
a software-only adversary, i.e., an adversary that can compromise
only the software of the target device. It uses (symmetric key based)
hop-by-hop attestation within a group of devices, transitively collect-
ing and aggregating attestation responses along an aggregation tree.
SEDA merely reports the number of devices that passed attestation,
and does not provide additional information about the identity of
devices that failed attestation.
Unfortunately, while SEDA substantially increased the scalability
of network attestation, it also requires trust in all intermediaries. As
a consequence, all devices involved in the attestation protocol are
required to: (1) be equipped with a trusted execution environment;
and (2) participate in the attestation process. These requirements
represent a signiﬁcant limitation when not all the devices in a given
area are “trusted" to the same single entity (e.g., to the entity that
acts as a veriﬁer of the attestation process). Moreover, in presence
of a stronger adversary capable of physical attacks, i.e., capable of
tampering with the hardware of even a limited number of devices,
SEDA fails to guarantee the security of all other devices.
Contributions. In this paper, we propose SANA, the ﬁrst attesta-
tion scheme for large collections of devices that: (i) is scalable, i.e.,
it efﬁciently veriﬁes the integrity of a large collection of devices
Figure 1: Collective attestation in a network of seven devices (four aggregators and ﬁve provers)
by means of a novel signature scheme, which allows aggregation
of attestation proofs; (ii) is publicly veriﬁable, i.e., the produced
aggregate signature can be veriﬁed by any one knowing the (ag-
gregate) public key; and (iii) enables untrusted aggregation, i.e.,
compromise (including physical tampering) of aggregating nodes
does not affect the integrity of the attestation process. Similar to all
other conventional attestation schemes, SANA does not deal with
privacy concerns, such as linking the software conﬁguration with a
device’s identity. Our main focus is providing standard attestation
capabilities for large IoT deployments. Required privacy can be
provided using secure channels. Our new approach brings the
following three technical contributions:
Novel Optimistic Aggregate Signature Scheme. We present a novel
signature scheme, called Optimistic Aggregate Signature (OAS).
OAS allows the aggregation of signatures on different attestation
responses, while having a veriﬁcation overhead that is constant in
the size of the network. The idea of combining aggregate and multi-
signature is to take the best-of-both-worlds. This has been necessary
since none of the existing schemes satisﬁed the novel requirements
we identiﬁed for secure collective attestation.
Secure Collective Attestation Scheme. We designed SANA, the
ﬁrst collective attestation scheme for networks of embedded devices
that supports high dynamicity and adheres to common assumptions
made in single-prover attestation. SANA leverages OAS over ag-
gregation trees to provide highly scalable attestation of large device
populations, in a single round-trip. SANA is applicable in settings
consistent with large scale IoT device deployments, where aggrega-
tor devices can be untrusted routers or cloud servers and is secure in
presence of a strong adversary capable of physical attacks.
Evaluation and Performance Analysis. We analyze the perfor-
mance of SANA on three state-of-the-art security architectures for
low-end embedded devices (e.g., SMART [12], TrustLite [17], and
TyTAN [11]), and present the simulation results for networks of up
to 1, 000, 000 devices, in order to demonstrate its scalability.
Outline. We introduce SANA in Section 2 and we present our nota-
tion in Section 3. We describe our signature scheme in Section 4,
and present the SANA protocol in Section 5. We describe an imple-
mentation of SANA in Section 6, and report performance results
in Section 7. In Section 8, we describe an extension of SANA. In
Section 9 we overview the related work, and the paper concludes in
Section 10.
2. SANA
2.1 System Model
We consider large groups of embedded devices, e.g., industrial
control systems, IoT devices in smart environments, and prospecting
robots. Each group consists of a number of interconnected devices
Di forming a network G, with either static or dynamic topology. G
may not have a routing protocol in place. However, devices in G are
able to identify and communicate to their direct neighbors, which is
a minimal assumption in such networks [29].
We formally deﬁne SANA as a protocol between the following
logical entities: prover (P), aggregator (A), owner (O), and veri-
ﬁer (V). As shown in Figure 1, a prover Pi composes a proof of
integrity of its software conﬁguration, i.e., an attestation response,
to be delivered via aggregators to a remote veriﬁer. In our setting,
provers can have different software and hardware conﬁguration.
However, we expect the majority of them to have a good software
conﬁguration (i.e., the latest non-compromised software version).
We refer to this type of provers as good provers(cid:101)Pi, while we refer
to the rest of the provers as bad provers(cid:98)Pi (i.e., devices with mali-
cious or outdated software). An aggregator Ai has the purpose of
relaying messages between entities, and collecting and aggregating
attestation responses from provers, or other aggregators. The entity
O represents the network owner or operator, responsible for the
deployment, as well as the maintenance, of every prover Pi in G.
Note that, a physical device in G can embed the functionalities of
every logical component described above, or a combination of them.
As an example, in Figure 1 device D3 acts both as a prover(cid:98)P3, and
an aggregator A2, while D5 acts only as a prover(cid:98)P4.
The goal of a collective attestation protocol is to assure a veriﬁer
V, which is typically, but not necessarily, the same entity as O, of
the overall integrity of G, i.e., the software integrity of every prover
Pi in G. Provided that none of the provers is physically attacked, G
is considered trustworthy if all the provers in G are good, i.e., have
the latest non-compromised software version approved by V. How-
ever, unlike existing attestation schemes that assume a software-only
attacker, SANA also considers the presence of physically tampered
devices, which may evade their detection. Consequently, we con-
sider G to be trustworthy, if at least all but physically tampered
provers are good. SANA can identify bad devices, as well as their
current software conﬁguration.
2.2 Protocol Overview
Figure 1 illustrates the concept of SANA, in a setting where G
is composed of seven physical devices D1, D2, D3, D4, D5, D6,
and D7. SANA is executed between the following (logical) entities:
four aggregators, A1, A2, A3, and A4, ﬁve provers,(cid:101)P1,(cid:98)P2,(cid:101)P3,(cid:101)P4,
and(cid:98)P5, the owner O, and a veriﬁer V. Each prover Pi is initialized
attestation protocol (operation 1 shown for (cid:101)P1 in Figure 1). The
with the cryptographic material needed to execute SANA collective
initialization is performed in a secure environment, and preferably,
but not necessarily, by O. At a given time, a veriﬁer V, which
possesses an appropriate attestation token generated by O, may
attest G. Note that, if V and O are two distinct entities, the token is
securely exchanged ofﬂine (operation 2 in Figure 1).
In order to attest the network, V chooses an aggregator (randomly
or based on physical proximity with the corresponding device; A1 in
Figure 1) and sends it an attestation request containing an attestation
VA1eP1A2bP3eP2A3eP4bP5O(sk1,pk1)12tokenReqTokenTattRes4attResattResaggResaggResaggResattResattResInteractioninaAggregationtreeedgeVeriﬁerNetworkOwnerTemporarylink5attReq,TaggRes44455534trustedenvironmentA4D1D2D3D4D5D7D6DiDeviceePlbPjGoodproverBadproverAkAggregatorattReq,T3attReq,T3attReq,TattReq,T3attReq,TattReq,TattReq,T333attReq,T33token (operation 3 in Figure 1). The request is ﬂooded in the
network forming a logical aggregation tree, that has provers as leaf
nodes, and aggregators as intermediate nodes.
Leaf nodes of the aggregation tree, i.e., provers(cid:101)P1,(cid:98)P2,(cid:101)P3,(cid:98)P4
and(cid:101)P5, create their attestation response and send it to their parent
nodes (operation 4 in Figure 1). Aggregators, i.e., non-leaf nodes
(A1, A2, A3 and A4), in turn, aggregate the attestation responses
received from their child nodes (operation 5 in Figure 1), and
forward the result to their parents. Finally, the aggregated report is
received and veriﬁed by V.
2.3 Requirements and Assumptions
Objectives. Following the collective attestation literature and the
discussion in Section 1, a scalable attestation protocol for collections
of devices should, under a strong adversary model, possess the
following properties:
• Unforgeability and Freshness. If the attestation hardware of a
prover is unchanged and a correct veriﬁer was able to validate
the aggregate attestation result including a given prover, then
the claimed integrity measurement reﬂects an actual software
conﬁguration of this prover at a time during this protocol run.
• Completeness. If the attestation hardware of provers is un-
changed and a correct veriﬁer was able to validate the ag-
gregate attestation result for a given set of provers, then all
provers actually reported their software conﬁguration in the
given protocol run.
• Scalablity. The protocol allows a veriﬁer to attest a large
network of devices. The communication and computational
complexity for prover and veriﬁer must be at most logarithmic
in the number of devices in the collection.
• Public Veriﬁability. In a public key domain, the collective
attestation evidence collected by a veriﬁer can be veriﬁed by