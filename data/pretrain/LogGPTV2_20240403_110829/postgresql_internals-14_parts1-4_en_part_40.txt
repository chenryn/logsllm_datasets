indexbyanotherindexwithanincludedcolumn:
=> CREATE UNIQUE INDEX ON bookings(book_ref) INCLUDE (book_date);
=> BEGIN;
=> ALTER TABLE bookings
DROP CONSTRAINT bookings_pkey CASCADE;
384
20.3 BitmapScans
NOTICE: drop cascades to constraint tickets_book_ref_fkey on table
tickets
ALTER TABLE
=> ALTER TABLE bookings ADD CONSTRAINT bookings_pkey PRIMARY KEY
USING INDEX bookings_book_ref_book_date_idx; -- a new index
NOTICE: ALTER TABLE / ADD CONSTRAINT USING INDEX will rename index
"bookings_book_ref_book_date_idx" to "bookings_pkey"
ALTER TABLE
=> ALTER TABLE tickets
ADD FOREIGN KEY (book_ref) REFERENCES bookings(book_ref);
=> COMMIT;
=> EXPLAIN SELECT book_ref, book_date
FROM bookings WHERE book_ref  CREATE INDEX ON bookings(total_amount);
=> EXPLAIN
SELECT * FROM bookings WHERE total_amount = 48500.00;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Bitmap Heap Scan on bookings (cost=54.63..7040.42 rows=2865 wid...
Recheck Cond: (total_amount = 48500.00)
−> Bitmap Index Scan on bookings_total_amount_idx
(cost=0.00..53.92 rows=2865 width=0)
Index Cond: (total_amount = 48500.00)
(5 rows)
TheBitmapIndexScan1nodegetsthebitmapofalls2fromtheaccessmethod.
The bitmap consists of separate segments, each corresponding to a single heap
page. All these segments have the same size, which is enough for all the page
tuples,nomatterhowmanyofthemarepresent. Thisnumberislimitedbecause
atupleheaderisquitelarge;astandard-sizepagecanaccommodatetuplesat
themost,whichfitbytes.3
ThentheBitmap Heap Scan4 traversesthebitmapsegmentbysegment,readsthe
correspondingpages,andchecksalltheirtuplesthataremarkedall-visible.Thus,
pagesarereadinascendingorderbasedontheirnumbers,andeachofthemisread
exactlyonce.
Thatsaid,thisprocessisnotthesameassequentialscanningsincetheaccessed
pages rarely follow each other. Regular prefetching performed by the operating
system does not help in this case,so the Bitmap Heap Scan node implements its
1 ownprefetchingbyasynchronouslyreadingeffective_io_concurrency pages—andit
istheonlynodethatdoesit. Thismechanismreliesontheposix_fadvisefunction
implementedbysomeoperatingsystems.Ifyoursystemsupportsthisfunction,it
makessensetoconfiguretheeffective_io_concurrency parameteratthetablespace
levelinaccordancewiththehardwarecapabilities.
1 backend/executor/nodeBitmapIndexscan.c
2 backend/access/index/indexam.c,index_getbitmapfunction
3 backend/nodes/tidbitmap.c
4 backend/executor/nodeBitmapHeapscan.c
386
20.3 BitmapScans
Asynchronousprefetchingisalsousedbysomeotherinternalprocesses:
• forindexpageswhenheaprowsarebeingdeleted1 v.
• forheappagesduringanalysis()2 v.
Theprefetchdepthisdefinedbythemaintenance_io_concurrency. 10
BitmapAccuracy
Themorepagescontainthetuplesthatsatisfythefilterconditionofthequery,the
biggeristhebitmap. Itisbuiltinthelocalmemoryofthebackend,anditssizeis
limitedbythework_memparameter. Oncethemaximumallowedsizeisreached, 4MB
somebitmapsegmentsbecomelossy: eachbitofalossysegmentcorrespondstoa
wholepage,whilethesegmentitselfcomprisesarangeofpages.3 Asaresult,the
sizeofthebitmapbecomessmallerattheexpenseofitsaccuracy.
Thecommandshowstheaccuracyofthebuiltbitmap:
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT * FROM bookings WHERE total_amount > 150000.00;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Bitmap Heap Scan on bookings (actual rows=242691 loops=1)
Recheck Cond: (total_amount > 150000.00)
Heap Blocks: exact=13447
−> Bitmap Index Scan on bookings_total_amount_idx (actual rows...
Index Cond: (total_amount > 150000.00)
(5 rows)
Herewehaveenoughmemoryforanexactbitmap.
Ifwedecreasethework_memvalue,someofthebitmapsegmentsbecomelossy:
=> SET work_mem = '512kB';
1 backend/access/heap/heapam.c,index_delete_prefetch_bufferfunction
2 backend/commands/analyze.c,acquire_sample_rowsfunction
3 backend/nodes/tidbitmap.c,tbm_lossifyfunction
387
Chapter20 IndexScans
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT * FROM bookings WHERE total_amount > 150000.00;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Bitmap Heap Scan on bookings (actual rows=242691 loops=1)
Recheck Cond: (total_amount > 150000.00)
Rows Removed by Index Recheck: 1145721
Heap Blocks: exact=5178 lossy=8269
−> Bitmap Index Scan on bookings_total_amount_idx (actual rows...
Index Cond: (total_amount > 150000.00)
(6 rows)
=> RESET work_mem;
Whenreadingaheappagethatcorrespondstoalossybitmapsegment,Postgre
hastorecheckthefilterconditionforeachtupleinthepage. Theconditiontobe
recheckedisalwaysdisplayedintheplanasRecheckCond,evenifthisrecheckis
not performed. The number of tuples filtered out during a recheck is displayed
separately(asRowsRemovedbyIndexRecheck).
Ifthesizeoftheresultsetistoobig,thebitmapmaynotfitthework_memmemorychunk,
evenifallitssegmentsarelossy.Thenthislimitisignored,andthebitmaptakesasmuch
spaceasrequired.Postgreneitherfurtherreducesthebitmapaccuracynorflushesany
ofitssegmentstodisk.
Operations on Bitmaps
Ifthequeryappliesconditionstoseveraltablecolumnsthathaveseparateindexes
createdonthem,abitmapscancanuseseveralindexestogether.1 Alltheseindexes
havetheirownbitmapsbuiltonthefly;thebitmapsarethencombinedtogether
bitbybit,usingeitherlogicalconjunction(iftheexpressionsareconnectedby)
orlogicaldisjunction(iftheexpressionsareconnectedby).Forexample:
=> EXPLAIN (costs off)
SELECT * FROM bookings
WHERE book_date  250000;
1 postgresql.org/docs/14/indexes-ordering.html
388
20.3 BitmapScans
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Bitmap Heap Scan on bookings
Recheck Cond: ((total_amount > '250000'::numeric) AND (book_da...
−> BitmapAnd
−> Bitmap Index Scan on bookings_total_amount_idx
Index Cond: (total_amount > '250000'::numeric)
−> Bitmap Index Scan on bookings_book_date_idx
Index Cond: (book_date  EXPLAIN
SELECT * FROM bookings WHERE total_amount = 28000.00;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Bitmap Heap Scan on bookings (cost=599.48..14444.96 rows=31878 ...
Recheck Cond: (total_amount = 28000.00)
−> Bitmap Index Scan on bookings_total_amount_idx
(cost=0.00..591.51 rows=31878 width=0)
Index Cond: (total_amount = 28000.00)
(5 rows)
Theapproximateselectivityoftheconditionusedbytheplannerequals
=> SELECT round(31878::numeric/reltuples::numeric, 4)
FROM pg_class WHERE relname = 'bookings';
round
−−−−−−−−
0.0151
(1 row)
1 backend/nodes/tidbitmap.c,tbm_union&tbm_intersectfunctions
389
Chapter20 IndexScans
ThetotalcostoftheBitmap IndexScannodeisestimatedinthesamewayasthe
costofaregularindexscanthatdoesnottakeheapaccessintoaccount:
=> SELECT round(
current_setting('random_page_cost')::real * pages +
current_setting('cpu_index_tuple_cost')::real * tuples +
current_setting('cpu_operator_cost')::real * tuples
)
FROM (
SELECT relpages * 0.0151 AS pages, reltuples * 0.0151 AS tuples
FROM pg_class WHERE relname = 'bookings_total_amount_idx'
) c;
round
−−−−−−−
589
(1 row)
The / cost estimation for the Bitmap Heap Scan node differs from that for a
perfect-correlation case of a regular index scan. A bitmap allows reading heap
pagesinascendingorderbasedontheirnumbers,withoutgettingbacktooneand
the same page,but the tuples that satisfy the filter condition do not follow each
other anymore. Instead of reading a strictly sequential page range that is quite
compact,Postgreislikelytoaccessfarmorepages.
Thenumberofpagestobereadisestimatedbythefollowingformula:1
2relpages⋅reltuples⋅sel
min ,relpages
(2relpages+reltuples⋅sel )
The estimated cost of reading a single page falls between seq_page_cost and ran-
dom_page_cost,dependingontheratioofthefractionoffetchedpagestothetotal
numberofpagesinthetable:
1 backend/optimizer/path/costsize.c,compute_bitmap_pagesfunction
390
20.3 BitmapScans
=> WITH t AS (
SELECT relpages,
least(
(2 * relpages * reltuples * 0.0151) /
(2 * relpages + reltuples * 0.0151),
relpages
) AS pages_fetched,
round(reltuples * 0.0151) AS tuples_fetched,
current_setting('random_page_cost')::real AS rnd_cost,
current_setting('seq_page_cost')::real AS seq_cost
FROM pg_class WHERE relname = 'bookings'
)
SELECT pages_fetched,
rnd_cost - (rnd_cost - seq_cost) *
sqrt(pages_fetched / relpages) AS cost_per_page,
tuples_fetched
FROM t;
pages_fetched | cost_per_page | tuples_fetched
−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−
13447 | 1 | 31878
(1 row)
As usual, the / estimation is increased by the cost of processing each fetched
tuple. If an exact bitmap is used, the number of tuples is estimated at the total
numberoftuplesinthetablemultipliedbytheselectivityoffilterconditions.But
ifanybitmapsegmentsarelossy,Postgrehastoaccessthecorrespondingpages
torecheckalltheirtuples.
alossybitmapsegment anexactsegment
Thus,theestimationtakesintoaccounttheexpectedfractionoflossybitmapseg- v.
ments(whichcanbecalculatedbasedonthetotalnumberofselectedrowsandthe
bitmapsizelimitdefinedbywork_mem).1
1 backend/optimizer/path/costsize.c,compute_bitmap_pagesfunction
391
Chapter20 IndexScans
The total cost of condition rechecks also increases the estimation (regardless of
thebitmapaccuracy).
ThestartupcostestimationoftheBitmapHeapScannodeisbasedonthetotalcost
oftheBitmapIndexScannode,whichisextendedbythecostofbitmapprocessing:
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Bitmap Heap Scan on bookings
(cost=599.48..14444.96 rows=31878 width=21)
Recheck Cond: (total_amount = 28000.00)
−> Bitmap Index Scan on bookings_total_amount_idx
(cost=0.00..591.51 rows=31878 width=0)
Index Cond: (total_amount = 28000.00)
(6 rows)
Herethebitmapisexact,andthecostisestimatedroughlyasfollows:1
=> WITH t AS (
SELECT 1 AS cost_per_page,
13447 AS pages_fetched,
31878 AS tuples_fetched
),
costs(startup_cost, run_cost) AS (
SELECT
( SELECT round(
589 /* cost estimation for the child node */ +
0.1 * current_setting('cpu_operator_cost')::real *
reltuples * 0.0151
)
FROM pg_class WHERE relname = 'bookings_total_amount_idx'
),
( SELECT round(
cost_per_page * pages_fetched +
current_setting('cpu_tuple_cost')::real * tuples_fetched +
current_setting('cpu_operator_cost')::real * tuples_fetched
)
FROM t
)
)
SELECT startup_cost, run_cost,
startup_cost + run_cost AS total_cost
FROM costs;
1 backend/optimizer/path/costsize.c,cost_bitmap_heap_scanfunction
392
20.4 ParallelIndexScans
startup_cost | run_cost | total_cost
−−−−−−−−−−−−−−+−−−−−−−−−−+−−−−−−−−−−−−
597 | 13845 | 14442
(1 row)
Ifthequeryplancombinesseveralbitmaps,thesumofthecostsofseparateindex
scansisincreasedbya(small)costofmergingthemtogether.1
20.4 Parallel Index Scans
All the index scanning modes—a regular index scan, an index-only scan, and a v..
bitmapscan—havetheirownflavorsforparallelplans. p.
The cost of parallel execution is estimated in the same way as that of sequen-
tialone,but(justlikeinthecaseofaparallelsequentialscan)resourcesare
distributed between all parallel processes, thus reducing the total cost. The /
component of the cost is not distributed because processes are synchronized to
performpageaccesssequentially.
Now let me show you several examples of parallel plans without breaking down
theircostestimation.