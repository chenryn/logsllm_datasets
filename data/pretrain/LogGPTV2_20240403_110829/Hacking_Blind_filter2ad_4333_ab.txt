actually loaded in memory.
These requirements can easily be brute-forced on 32-bit
systems [9], [14] through simple guessing. This is not practical
for 64-bit systems; in fact, most public exploits target 32-bit
systems only. The purpose of the BROP attack is to circumvent
these requirements on 64-bit systems. Hence, the rest of this
discussion exclusively considers 64-bit attacks.
The ﬁrst requirement in practice means that the attacker
must have a copy of the vulnerable binary to disassemble and
ﬁnd gadgets. To our knowledge, our proposed BROP attack is
the ﬁrst general-purpose technique that can be used to defeat
NX when the binary code is completely unavailable.
Defeating ASLR is also a signiﬁcant challenge without
there are some possible strategies. Firstly, an
BROP, but
information leak might reveal the address location of a code
segment. Secondly, it may be possible to exploit any code that
remains statically positioned across executions. For example,
on Linux it is usually the case that the executable’s code is
mapped to a ﬁxed address even though dynamic libraries and
other data memory regions are randomized with ASLR. As a
result, an attacker could simply apply ROP to the program’s
text segment directly. Additionally, on some platforms, such as
Windows, there are shared libraries that are incompatible with
ASLR, and thus such libraries are mapped to static locations.
On Linux, it is possible to apply ASLR to the entire address
space, including the program’s text segment, by enabling PIE.
229
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
Binary available
N
Y
PIE
N
rerand
N
Y
Y
N
PIE
Y
rerand
N
Y
BROP
BROP
Stack read
?
ROP
ROP
Stack read
?
buffer
canary
11 22 33 44 55 66 77 88
AAAAAAAAAA 00 22 33 44 55 66 77 88
AAAAAAAAAA 01 22 33 44 55 66 77 88
crash
crash
...
AAAAAAAAAA 11 22 33 44 55 66 77 88
no crash
Figure 4. Techniques needed to attack different 64-bit scenarios. BROP and
stack read are our contributions.
With GCC, this is achieved through the -pie ﬂag. Using
PIE has been recommended in previous studies [15], but
unfortunately, it has not been widely deployed to date. When
PIE is enabled, there are no known general-purpose 64-bit
techniques, outside of our proposed generalized stack reading
attack, that can be used to defeat ASLR.
Figure 4 shows how our BROP attack improves the state
of the art in 64-bit exploit techniques. Today there are general
techniques (ROP) to attack 64-bit servers only when the
exact binary is available to the attacker and PIE is not used.
Our stack reading technique makes it possible to attack PIE
servers that do not rerandomize after a crash (i.e., fork-only
without execve). The BROP attack additionally opens up the
possibility of hacking systems where the binary is unknown.
In all cases, the BROP attack cannot target PIE servers that
rerandomize (e.g., execve) after a crash.
Hacking without binary knowledge is useful even in the
not-completely-blind case (e.g., open-source) because it makes
it possible to write generic, robust exploits that work against
all distributions and are agnostic to a speciﬁc version of the
binary. Today, attackers need to gather exact information (e.g.,
binaries) for all possible combinations of distribution versions
and vulnerable software versions, and build an exploit for each.
One might assume attackers would only bother with the most
popular combinations. An implication of our work is that more
obscure distributions offer little protection (through obscurity)
against buffer overﬂows.
V. BROP ENVIRONMENT
The Blind Remote Oriented Programming (BROP) attack
makes the following assumptions and requires the following
environment:
•
•
A stack vulnerability and knowledge of how to trigger
it.
A server application that restarts after a crash.
The threat model for a BROP attack is an attacker that
knows an input string that crashes a server due to a stack
overﬂow bug. The attacker must be able to overwrite a variable
length of bytes including a return instruction pointer. The
attacker need not know the source or binary of the server.
The attacker is able to crash the server as many times as he
wishes while conducting the attack, and the server must restart.
Figure 5. Stack reading. A single byte on the stack is overwritten with guess
X. If the service crashes, the wrong value was guessed. Otherwise, the stack
is overwritten with the same value and no crash occurs. After at most 256
attempts, the correct value will be guessed. The process is then repeated for
subsequent bytes on the stack.
If the server is compiled with the PIE ﬂag, the server must be a
forking daemon and must restart without using execve. The
same is true for overﬂows where the canary must be modiﬁed
by the exploit. The attacker is also able to distinguish when
a server crashes prematurely, e.g., by noticing that the socket
closes without receiving a response.
VI. ATTACK OUTLINE
The BROP attack has the following phases:
1)
2)
3)
Stack reading: read the stack to leak canaries and a
return address to defeat ASLR.
Blind ROP: ﬁnd enough gadgets to invoke write
and control its arguments.
Build the exploit: dump enough of the binary to ﬁnd
enough gadgets to build a shellcode, and launch the
ﬁnal exploit.
The ﬁrst phase is needed so that a starting point address for
scanning gadgets is found. Gadgets are then searched for until
enough are found to invoke write. After that, the binary is
transferred over the network from memory, enabling known
techniques to be applied toward building the ﬁnal exploit.
VII. STACK READING: ASLR DE-RANDOMIZATION
Exploits must have a method of defeating ASLR for
conﬁgurations where PIE is used. We present a new stack
reading technique that generalizes a known technique used for
leaking canaries. It is useful even in cases where the binary is
known and a full BROP attack is not required. The basic idea
in leaking canaries is to overﬂow a single byte, overwriting a
single byte of the canary with value x. If x was correct, the
server does not crash. The algorithm is repeated for all possible
256 byte values until it is found (128 tries on average). The
attack continues for the next byte until all 8 canary bytes (on
64-bit) are leaked. Figure 5 illustrates the attack. We generalize
the attack to leak more words from the stack (“stack reading”).
After the canary, one typically ﬁnds the saved frame pointer
and then the saved return address, so three words need to be
read. Figure 6 shows a typical stack layout.
There are a few subtleties that apply to generalized stack
reading but not to reading canaries. With canaries, exact values
230
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
buffer
canary
saved frame 
pointer
saved return 
address
Figure 6. Typical stack layout. The canary protects saved registers. If it is
overwritten (by an overﬂow) then the program aborts prior to returning to the
saved return address.
TABLE I.
AVERAGE REQUESTS NEEDED TO BRUTE-FORCE ASLR
VERSUS OUR STACK READING TECHNIQUE.
0x0
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
0x7
0x9
pop rsi
pop r15
ret
pop rdi
ret
Platform
32-bit Linux
64-bit Linux
64-bit Mac OS X
Entropy
16-bits
28-bits
16-bits
Brute Force
215
227
215
Stack Reading
512
640
640
Figure 7. The BROP gadget. If parsed at offset 0x7, it yields a pop rsi
gadget, and at offset 0x9, it yields a pop rdi gadget. These two gadgets
control the ﬁrst two arguments to calls. By ﬁnding a single gadget (the BROP
gadget) one actually ﬁnds two useful gadgets.
is correct. In general
will always be returned because there is only one value canary
that
though, stack reading will not
necessarily return the exact saved instruction pointer present on
the stack. It is possible that a slightly different value is returned
depending on whether another value still resumes program
execution without causing a crash. For example, suppose that
0x400010 was stored on the stack and the value 0x400007 is
currently being tested. It is possible that the program keeps
executing without crashing and 0x400007 is obtained from
stack reading. This is OK as the attacker is searching for any
valid value in the .text segment range and not for a speciﬁc
one.
It is possible that stack reading does not return an address
in the application’s own .text segment, but rather a return
address in a library. This can happen, for example, when the
vulnerability lies in a library, or a callback happens. This is
ﬁne because gadgets can be found in the library instead. One
can also stack read further to ﬁnd more return addresses, if
needed.
On 64-bit x86 systems only a portion of the address space
is made available to the operating system (canonical form
addresses). This allows us to skip several bytes when reading
pointers. For user space processes the top two bytes are always
zero. In fact, on Linux the third byte is 0x7f for libraries
and the stack. The main binary and heap are usually stored at
0x00 for executables compiled without the PIE ﬂag. Thus we
can skip on average three bytes (384 requests) when reading
addresses.
Table I shows the complexity of using stack reading versus
standard brute-force attacks. We compare 32-bit and 64-bit
systems across several operating systems. Clearly the brute-
force attack on 64-bit Linux is not practical and attackers
have resorted to other techniques to circumvent ASLR. Many
attacks have depended on non-randomized (without PIE) bi-
naries that are common on Linux. Similarly Windows exploits
have also resorted to attacking binaries that have opted out
of randomization, or libraries that randomize once per reboot.
Other attacks have used leaked pointers sometimes requiring
another vulnerability.
The fact that stack reading succeeds tells the attacker that
the BROP environment exists and that a stack overﬂow, rather
than some random bug, is being triggered. A bug like a null
pointer dereference may cause a crash for all possible byte
values being probed, or a no crash for multiple possible values
(as opposed to one only). The words returned by stack reading
give further evidence of the BROP attack working because
the values can be somewhat sanitized: e.g., a random canary
(which always starts with zero on Linux), a frame pointer, and
a return address with known upper bits (0x40 for non-PIE or
0x7f).
VIII. BROP ATTACK
The BROP attack allows writing exploits without pos-
sessing the target binary. It
introduces techniques to ﬁnd
ROP gadgets remotely and optimizations to make the attack
practical.
A. The pieces of the puzzle
The goal is to ﬁnd enough gadgets to invoke write. After
that, the binary can be dumped from memory to the network
to ﬁnd more gadgets. The write system call takes three
arguments: a socket, a buffer and a length. Arguments are
passed in rdi, rsi and rdx registers, and the system call
number is stored in the rax register. The following gadgets
are therefore needed:
1)
2)
3)
4)
5)
pop rdi; ret (socket)
pop rsi; ret (buffer)
pop rdx; ret (length)
pop rax; ret (write syscall number)
syscall
While an attack that ﬁnds all these gadgets is possible (see
Section VIII-I) we ﬁrst describe an optimized version that
makes the attack more practical.
The ﬁrst optimization is the BROP gadget. Shown in
Figure 7, the BROP gadget is very common as it restores all
callee saved registers. Misaligned parses of it yield a pop
rdi and pop rsi. So by ﬁnding a single gadget, we ﬁnd
two gadgets that control the ﬁrst two arguments of a call.
The second optimization is ﬁnding a call write.
Instead of ﬁnding two gadgets
(pop rax; ret and
syscall) we can ﬁnd a single call write instruction.
One convenient place to ﬁnd call write is the program’s
Procedure Linking Table (PLT). The PLT is a jump table used
for dynamic linking containing all external library calls made
by the application. Figure 8 shows the structure of an ELF
binary; the PLT is the ﬁrst region to contain valid executable
code.
231
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
0x400000
ELF header
symbol table
PLT
.text
GOT
Read
Execute
Read
Write
Figure 8. ELF loaded in memory. The PLT contains a jump table to external
functions (e.g., libc calls).
The problem is now reduced to ﬁnding the BROP gadget,
write’s entry in the PLT and a way to control rdx for the length
of the write. Any greater than zero length for write will do as
one can leak the binary in multiple small chunks by chaining
writes. We note that at the time of exploit, rdx may have a
sane (greater than zero) value so having to control rdx may be
unnecessary, but for the general case it is. Unfortunately pop
rdx; ret gadgets are rare, so an optimization is to ﬁnd a
call to strcmp instead (again in the PLT) which sets rdx to
the length of the string being compared. The optimized attack
therefore requires:
1)
2)
Finding the BROP gadget.
Finding the PLT.
•
•
Finding the entry for write.
Finding the entry for strcmp.
B. Finding gadgets and the stop gadget
The basic idea in ﬁnding gadgets remotely is to scan the
application’s text segment by overwriting the saved return ad-
dress with an address pointing to text and inspecting program
behavior. A starting address can be found from the initial stack
reading phase or 0x400000 can be used on default non-PIE
Linux. Generally speaking two things will occur: the program
will crash or it will hang, and in turn the connection will close
or stay open. Most of the time the program will crash, but
when it does not, a gadget is found. For example, 0x400000
may point to code with a null pointer dereference and cause a
crash. The next address, 0x400001, may point to code which
causes an inﬁnite loop and keeps the connection open. These
latter gadgets that stop program execution are fundamental to
ﬁnding other gadgets: we call these stop gadgets.
like pop rdi; ret,
A problem with using this technique naively for ﬁnding
gadgets is that even if the return address is overwritten with
the address of a useful gadget
the
application will still likely crash because it will eventually
attempt to return to the next word on the stack, likely an
invalid address. The crash would cause us to discard the gadget
classifying it as uninteresting. Figure 9 shows this. To ﬁnd