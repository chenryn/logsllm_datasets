From LNK to RCE
Finding bugs in Windows Shell Link Parser
Lays
Who am I - Lays
• Senior Researcher at TeamT5
• Focus on Reverse Engineering / Vulnerability Research
• MSRC Most Valuable Security Researcher 2019 / 2020
• Acknowledged by Microsoft / Samsung / NETGEAR / Synology …
• HITCON / 217 CTF Team
• Co-Founder of Pwnable.tw
Agenda
• Motivation
• Windows LNK File Format
• Fuzzing the Parser
• Case Study
• Reversing the Undocumented Logic
• Case Study
• Conclusion
Motivation
Motivation
• While studying for master’s degree
• I created a Fuzzer for Windows
• Based on WinAFL + Static Binary Instrumentation
• High Performance Coverage-Guided Fuzzing without source code
• I need some Real-World Targets!
Finding Fuzzing Targets
• Complex Binary Format
• Which is (Win)AFL good at
• Better to be remote triggerable
Finding Fuzzing Targets
• Complex Binary Format
• Which is (Win)AFL good at
• Better to be remote triggerable
Windows LNK File
• Also known as Shortcut
• Windows Shell Link
• What you See is What you Parsed … and get you Pwned
• Removable Drives
• Remote Share
• Sounds cool, let’s fuzz this
DEMO - LNK DoS
Windows LNK Format
LNK is “ REALLY ” Complicated
• On Linux / macOS…
• It’s really hard to remember the order…
(A) ln -s  
(B) ln -s  
LNK is “ REALLY ” Complicated
• But on Windows…
• It’s harder
SHELL_LINK = SHELL_LINK_HEADER 
[LINKTARGET_IDLIST] 
[LINKINFO]     
[STRING_DATA] 
*EXTRA_DATA
Windows Shell Link File Format
ShellLinkHeader
LinkTargetIDList
LinkInfo
StringData
ExtraData
HeaderSize
LinkCLSID
LinkFlags
FileAttributes
CreationTime
AccessTime
WriteTime
FileSizes
IconIndex
ShowCommand
HotKey
HasLinkTargetIDList
HasLinkInfo
HasName
HasRelativePath
HasWorkingDir
HasArguments
HasIconLocation
0x4C
00021401-0000-0000-C000-000000000046
Windows Shell Link File Format
ShellLinkHeader
LinkTargetIDList
LinkInfo
StringData
ExtraData
Windows Shell Link File Format
ShellLinkHeader
LinkTargetIDList
LinkInfo
StringData
ExtraData
Windows Folder -> C:\Windows\
User Folder    -> C:\Users\HITCON\
Recycle Bin    -> ?
Control Panel  -> ??
Printers       -> ???
Windows Shell Link File Format
ShellLinkHeader
LinkTargetIDList
LinkInfo
StringData
ExtraData
LinkInfoSize
LinkInfoHeaderSize
LinkInfoFlags
VolumeIDOffset
LocalBasePathOffset
CommonNetworkRelativeLinkOffset
CommonPathSuffixOffset
LocalBasePathOffsetUnicode (optional)
CommonPathSuffixOffsetUnicode (optional)
VolumeID
LocalBasePath 
CommonNetworkRelativeLink  
CommonPathSuffix   
LocalBasePathUnicode    
CommonPathSuffixUnicode     
Windows Shell Link File Format
ShellLinkHeader
LinkTargetIDList
LinkInfo
StringData
ExtraData
STRING_DATA = [NAME_STRING] [RELATIVE_PATH] [WORKING_DIR]
[COMMAND_LINE_ARGUMENTS] [ICON_LOCATION]
Windows Shell Link File Format
ShellLinkHeader
LinkTargetIDList
LinkInfo
StringData
ExtraData
Windows Shell Link File Format
ShellLinkHeader
LinkTargetIDList
LinkInfo
StringData
ExtraData
EXTRA_DATA_BLOCK = CONSOLE_PROPS / CONSOLE_FE_PROPS / DARWIN_PROPS /
ENVIRONMENT_PROPS / ICON_ENVIRONMENT_PROPS /
KNOWN_FOLDER_PROPS / PROPERTY_STORE_PROPS /
SHIM_PROPS / SPECIAL_FOLDER_PROPS /
TRACKER_PROPS / VISTA_AND_ABOVE_IDLIST_PROPS
Windows Shell Link File Format
ShellLinkHeader
LinkTargetIDList
LinkInfo
StringData
ExtraData
EXTRA_DATA_BLOCK = CONSOLE_PROPS / CONSOLE_FE_PROPS / DARWIN_PROPS /
ENVIRONMENT_PROPS / ICON_ENVIRONMENT_PROPS /
KNOWN_FOLDER_PROPS / PROPERTY_STORE_PROPS /
SHIM_PROPS / SPECIAL_FOLDER_PROPS /
TRACKER_PROPS / VISTA_AND_ABOVE_IDLIST_PROPS
Example: LNK to C:\test\a.txt
4c00 0000 0114 0200 0000 0000 c000 0000 0000 0046 9b00 0800 2000 0000 d0e9 eef2  L..................F.... .......
1515 c901 d0e9 eef2 1515 c901 d0e9 eef2 1515 c901 0000 0000 0000 0000 0100 0000  ................................
0000 0000 0000 0000 0000 0000 bd00 1400 1f50 e04f d020 ea3a 6910 a2d8 0800 2b30  .................P.O. .:i.....+0
309d 1900 2f43 3a5c 0000 0000 0000 0000 0000 0000 0000 0000 0000 0046 0031 0000  0.../C:\...................F.1..
0000 002c 3969 a310 0074 6573 7400 0032 0007 0004 00ef be2c 3965 a32c 3969 a326  ...,9i...test..2.......,9e.,9i.&
0000 0003 1e00 0000 00f5 1e00 0000 0000 0000 0000 0074 0065 0073 0074 0000 0014  .....................t.e.s.t....
0048 0032 0000 0000 002c 3969 a320 0061 2e74 7874 0034 0007 0004 00ef be2c 3969  .H.2.....,9i. .a.txt.4.......,9i
a32c 3969 a326 0000 002d 6e00 0000 0096 0100 0000 0000 0000 0000 0061 002e 0074  .,9i.&...-n................a...t
0078 0074 0000 0014 0000 003c 0000 001c 0000 0001 0000 001c 0000 002d 0000 0000  .x.t....... CLSID of MY Computer
IDList[1]
= Volume
-> C:\
IDList[2]
= Directory 
-> test
IDList[3]   = File 
-> a.txt
TerminalID
• LinkTargetIDList
Example: LNK to C:\test\a.txt
0000 001c 0000 0001 0000 001c 0000 002d 0000 0000  
0000 003b 0000 0011 0000 0003 0000 0081 8a7a 3010 0000 0000 433a 5c74 6573 745c
C:\test\
612e 7478 7400 00
a.txt
LinkInfoSize
= 0x3C
LinkInfoHeaderSize
= 0x1C
LinkInfoFlags   
= 0x1  ( VolumeIDAndLocalBasePath )
VolumeIDOffset   
= 0x1C -> { Size = 0x11, Type = DRIVE_FIXED, SerialNumber = 0x307A8A81
VolumeLabelOffset = 0x10 -> “” }
LocalBasePathOffset
= 0x2D -> “C:\test\a.txt”
CommonPathSuffixOffset = 0x3B -> “”
Example: LNK to C:\test\a.txt
• LinkInfo
9b00 0800
07 002e 005c 0061 002e 0074 0078 0074 0007 0043 003a 005c 0074
..\.a...t.x.t
C.:.\.t
0065 0073 0074 00
.e.s.t
HasRelativePath | HasWorkingDir flags set
StringData (RelativePath, len=7)  = L“.\a.txt”
StringData (Working Dir, len=7)   = L“C:\test”
Example: LNK to C:\test\a.txt
• StringData
60 0000 0003 0000 a058 0000 0000 0000 0063 6872 6973 2d78 7073
chris-xps
0000 0000 0000 0040 78c7 9447 fac7 46b3 565c 2dc6 b6d1 15ec 46cd 7b22 7fdd 1194
9900 1372 1687 4a40 78c7 9447 fac7 46b3 565c 2dc6 b6d1 15ec 46cd 7b22 7fdd 1194  
9900 1372 1687 4a00 0000 00                                                      
BlockSize
= 0x60
BlockSignature = 0xA0000003 ( TrackerDataBlock )
Length   
= 0x58
Version   
= 0x0
MachineID
= “chris-xps”
Droid
= {94c77840-fa47-46c7-b356-5c2dc6b6d115, 94c77840-fa47-46c7-b356-5c2dc6b6d115}
DroidBirth
= {7bcd46ec-7f22-11dd-9499-00137216874a, 7bcd46ec-7f22-11dd-9499-00137216874a}
TerminalBlock
Example: LNK to C:\test\a.txt
• ExtraData
LNK Format Resources
• MSDN
• MS-SHLLINK
• LECmd
• Lnk Explorer Command line edition
• liblnk / libfwsi
• Detailed LNK / Shell Item format
Fuzzing
Fuzzing
• Write the Harness 
• Prepare Corpus
• Collect different LNK files
• Create manually 
• Testcases from GitHub
• Old CVE PoC
• …
• Run the Fuzzer
• Check code coverage with drcov and lighthouse + IDA Pro
• Use interesting testcases as new seed
• Reversing the target to help Fuzzer
Fuzzing
• Write the Harness 
• Prepare Corpus
• Collect different LNK files
• Create manually 
• Testcases from GitHub
• Old CVE PoC
• …
• Run the Fuzzer
• Check code coverage with drcov and lighthouse + IDA Pro
• Use interesting testcases as new seed
• Reversing the target to help Fuzzer
Fuzzing - Harness
• Reversing Explorer
• We known that LNK is handled by IShellLink in windows.storage.dll
• Copy example code of IShellLink::Load from MSDN
IShellLink* psl;
IPersistFile* ppf;
// Create IShellLink
CoCreateInstance(CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER, IID_IShellLink, (LPVOID*)&psl);
// Get a pointer to the IPersistFile interface.
psl->QueryInterface(IID_IPersistFile, (void **)&ppf);
// Load LNK file
ppf->Load(argv[1], STGM_READ);
Fuzzing - Harness
• Wrap with while loop
• Also instrustment windows.storage.dll
while (__afl_persistent_loop()) {
// Load LNK file
ppf->Load(argv[1], STGM_READ);
}
Fuzzing
• Write the Harness 
• Prepare Corpus
• Collect different LNK files
• Create manually 
• Testcases from GitHub
• Old CVE PoC
• …
• Run the Fuzzer
• Check code coverage with drcov and lighthouse + IDA Pro
• Use interesting testcases as new seed
• Reversing the target to help Fuzzer
LNK Bugs in the Past
• CVE-2010-2568 ( Stuxnet 1.0 / CPL Logic bug RCE )
• CVE-2015-0096 ( Patch Bypass )
• CVE-2017-8464 ( Stuxnet 3.0 / CPL Logic bug RCE )
• CVE-2018-8345 ( Lucas Leong / Uninitialized Pointer RCE )
• CVE-2018-8346 ( Lucas Leong / Uninitialized Pointer Info Disclosure )
LNK Bugs in the Past
• CVE-2010-2568 ( Stuxnet 1.0 / CPL Logic bug RCE )
• CVE-2015-0096 ( Patch Bypass )
• CVE-2017-8464 ( Stuxnet 3.0 / CPL Logic bug RCE )
• CVE-2018-8345 ( Lucas Leong / Uninitialized Pointer RCE )
• CVE-2018-8346 ( Lucas Leong / Uninitialized Pointer Info Disclosure )
CVE-2017-8464 - Stuxnet 3.0
• Actually a logical Bug in CControlPanelFolder
• Load any dll as CPL file
• PoC is quite small
00000000: 4c00 0000 0114 0200 0000 0000 c000 0000 L...............
00000010: 0000 0046 8100 0000 0000 0000 0000 0000 ...F............
00000020: 0000 0000 0000 0000 0000 0000 0000 0000 ................
00000030: 0000 0000 0000 0000 0000 0000 0000 0000 ................
00000040: 0000 0000 0000 0000 0000 0000 6800 1400 ............h...