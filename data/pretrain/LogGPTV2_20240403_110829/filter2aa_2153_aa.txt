# From LNK to RCE: Finding Bugs in the Windows Shell Link Parser

## About the Speaker
**Lays**
- Senior Researcher at TeamT5
- Focus on Reverse Engineering and Vulnerability Research
- MSRC Most Valuable Security Researcher (2019, 2020)
- Acknowledged by Microsoft, Samsung, NETGEAR, Synology, and others
- HITCON / 217 CTF Team
- Co-Founder of Pwnable.tw

## Agenda
1. Motivation
2. Windows LNK File Format
3. Fuzzing the Parser
4. Case Study
5. Reversing the Undocumented Logic
6. Conclusion

## Motivation
- During my masterâ€™s degree, I developed a fuzzer for Windows.
- Based on WinAFL and Static Binary Instrumentation.
- High-performance coverage-guided fuzzing without source code.
- Needed real-world targets for testing.

### Finding Fuzzing Targets
- Complex binary formats that WinAFL is good at handling.
- Preferably remotely triggerable.

## Windows LNK File
- Also known as a Shortcut or Windows Shell Link.
- Can be triggered from removable drives or remote shares.
- A complex format that can lead to vulnerabilities if not parsed correctly.

### Demo: LNK Denial of Service (DoS)

## Windows LNK File Format
- **ShellLinkHeader**
  - HeaderSize
  - LinkCLSID
  - LinkFlags
  - FileAttributes
  - CreationTime
  - AccessTime
  - WriteTime
  - FileSizes
  - IconIndex
  - ShowCommand
  - HotKey
  - Flags (e.g., HasLinkTargetIDList, HasLinkInfo, HasName, HasRelativePath, HasWorkingDir, HasArguments, HasIconLocation)

- **LinkTargetIDList**
  - IDList[1] = Volume (e.g., C:\)
  - IDList[2] = Directory (e.g., test)
  - IDList[3] = File (e.g., a.txt)

- **LinkInfo**
  - LinkInfoSize
  - LinkInfoHeaderSize
  - LinkInfoFlags
  - VolumeIDOffset
  - LocalBasePathOffset
  - CommonNetworkRelativeLinkOffset
  - CommonPathSuffixOffset
  - LocalBasePathOffsetUnicode (optional)
  - CommonPathSuffixOffsetUnicode (optional)
  - VolumeID
  - LocalBasePath
  - CommonNetworkRelativeLink
  - CommonPathSuffix
  - LocalBasePathUnicode
  - CommonPathSuffixUnicode

- **StringData**
  - [NAME_STRING]
  - [RELATIVE_PATH]
  - [WORKING_DIR]
  - [COMMAND_LINE_ARGUMENTS]
  - [ICON_LOCATION]

- **ExtraData**
  - CONSOLE_PROPS
  - CONSOLE_FE_PROPS
  - DARWIN_PROPS
  - ENVIRONMENT_PROPS
  - ICON_ENVIRONMENT_PROPS
  - KNOWN_FOLDER_PROPS
  - PROPERTY_STORE_PROPS
  - SHIM_PROPS
  - SPECIAL_FOLDER_PROPS
  - TRACKER_PROPS
  - VISTA_AND_ABOVE_IDLIST_PROPS

### Example: LNK to C:\test\a.txt
- **Hex Dump:**
  ```
  4c00 0000 0114 0200 0000 0000 c000 0000 0000 0046 9b00 0800 2000 0000 d0e9 eef2 
  1515 c901 d0e9 eef2 1515 c901 d0e9 eef2 1515 c901 0000 0000 0000 0000 0100 0000 
  0000 0000 0000 0000 0000 0000 bd00 1400 1f50 e04f d020 ea3a 6910 a2d8 0800 2b30 
  309d 1900 2f43 3a5c 0000 0000 0000 0000 0000 0000 0000 0000 0000 0046 0031 0000 
  0000 002c 3969 a310 0074 6573 7400 0032 0007 0004 00ef be2c 3965 a32c 3969 a326 
  0000 0003 1e00 0000 00f5 1e00 0000 0000 0000 0000 0074 0065 0073 0074 0000 0014 
  0048 0032 0000 0000 002c 3969 a320 0061 2e74 7874 0034 0007 0004 00ef be2c 3969 
  a32c 3969 a326 0000 002d 6e00 0000 0096 0100 0000 0000 0000 0000 0061 002e 0074 
  0078 0074 0000 0014 0000 003c 0000 001c 0000 0001 0000 001c 0000 002d 0000 0000 
  0000 003b 0000 0011 0000 0003 0000 0081 8a7a 3010 0000 0000 433a 5c74 6573 745c 
  612e 7478 7400 00
  ```

- **Parsed Data:**
  - **LinkTargetIDList:**
    - Volume: C:\
    - Directory: test
    - File: a.txt
  - **LinkInfo:**
    - LinkInfoSize: 0x3C
    - LinkInfoHeaderSize: 0x1C
    - LinkInfoFlags: 0x1 (VolumeIDAndLocalBasePath)
    - VolumeIDOffset: 0x1C
    - LocalBasePathOffset: 0x2D
    - CommonPathSuffixOffset: 0x3B
  - **StringData:**
    - RelativePath: L"\\a.txt"
    - WorkingDir: L"C:\\test"
  - **ExtraData:**
    - BlockSize: 0x60
    - BlockSignature: 0xA0000003 (TrackerDataBlock)
    - Length: 0x58
    - Version: 0x0
    - MachineID: "chris-xps"
    - Droid: {94c77840-fa47-46c7-b356-5c2dc6b6d115}
    - DroidBirth: {7bcd46ec-7f22-11dd-9499-00137216874a}

### Resources for LNK Format
- MSDN
- MS-SHLLINK
- LECmd
- Lnk Explorer Command line edition
- liblnk / libfwsi
- Detailed LNK / Shell Item format

## Fuzzing
### Steps
1. **Write the Harness:**
   - Reverse-engineered Explorer to understand how LNK files are handled.
   - Used IShellLink interface in windows.storage.dll.
   - Created a harness with a while loop to load LNK files.

2. **Prepare Corpus:**
   - Collected different LNK files.
   - Created manually.
   - Used test cases from GitHub and old CVE PoCs.

3. **Run the Fuzzer:**
   - Checked code coverage using drcov and lighthouse + IDA Pro.
   - Used interesting test cases as new seeds.
   - Reversed the target to help the fuzzer.

### Example Code for Harness
```cpp
IShellLink* psl;
IPersistFile* ppf;

// Create IShellLink
CoCreateInstance(CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER, IID_IShellLink, (LPVOID*)&psl);

// Get a pointer to the IPersistFile interface.
psl->QueryInterface(IID_IPersistFile, (void **)&ppf);

while (__afl_persistent_loop()) {
    // Load LNK file
    ppf->Load(argv[1], STGM_READ);
}
```

## Past LNK Bugs
- **CVE-2010-2568 (Stuxnet 1.0 / CPL Logic bug RCE)**
- **CVE-2015-0096 (Patch Bypass)**
- **CVE-2017-8464 (Stuxnet 3.0 / CPL Logic bug RCE)**
- **CVE-2018-8345 (Lucas Leong / Uninitialized Pointer RCE)**
- **CVE-2018-8346 (Lucas Leong / Uninitialized Pointer Info Disclosure)**

### CVE-2017-8464 - Stuxnet 3.0
- Logical bug in `CControlPanelFolder`.
- Allowed loading any DLL as a CPL file.
- Small PoC available.

### Hex Dump of CVE-2017-8464 PoC
```
00000000: 4c00 0000 0114 0200 0000 0000 c000 0000 L...............
00000010: 0000 0046 8100 0000 0000 0000 0000 0000 ...F............
00000020: 0000 0000 0000 0000 0000 0000 0000 0000 ................
00000030: 0000 0000 0000 0000 0000 0000 0000 0000 ................
00000040: 0000 0000 0000 0000 0000 0000 6800 1400 ............h...
```

## Conclusion
- The Windows LNK file format is complex and can be a source of vulnerabilities.
- Fuzzing is an effective method to find such bugs.
- Understanding the undocumented logic and reversing the target can significantly enhance the effectiveness of the fuzzer.