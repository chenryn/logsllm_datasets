importantly 
the  basic  lack  of  trust  in  any  human 
influenced  transactions,  as  the  Internet  was  not  designed 
with the current demands it faces in consideration. Many 
of  the  potential  solutions  that  are  highlighted  by  the 
research  community  suggest  essential  changes  to  the 
Internet  or  the  protocols  to  increase  the  level  of  trust 
technically,  and  to  make  untrustworthy  behavior  by 
network entities undesirable.  
This  strategic  response,  by  the  research  community,  is 
opposed  to  the  current  commercial  attitude  which  is  the 
introduction  of entities into  the  network that can attempt 
to assure security by increasing the technological cost of 
attacking  systems,  e.g. 
introduction  of  firewall 
technology, cryptography etc. This is because there is no 
central  authority  or  responsibility  for  how  the  Internet 
operates  other  than  the  issue  of  cost.  With  cost  as  a 
primary  consideration,  the  attackers  are  always  going  to 
be able to develop attacks faster than it takes to introduce 
stumbling blocks for the attacks. 
The attack technology has developed and to some extent 
come  full  circle  as  denial  of  service  attacks  were  often 
originally  used  to  assist  intrusion  attempts  by  bringing 
down  systems  so  that  the  addresses  could  be  spoofed. 
Denials  of  service  attacks  have  become  a  threat  by 
themselves,  unrelated  to  system  intrusions.  Now  the 
DDoS  toolkits  require  system  penetration  and  Trojan 
horse programs, so the system intrusion is now motivated 
by  the  denial  of  service  attack.  This  returns  to  the  trust 
issue as there is now no longer a need for an attacker to 
spoof  addresses,  if  the  attacker  can  penetrate  just  one 
the 
to  permit 
program  onto a system, the question must be asked “can 
every  user  be  trusted  to  have  a  high  level  of  security 
awareness”?   
To  prevent  denial  of  service  within  a  distributed 
environment, what is required is a network that can fairly 
guarantee delivery of services and requests from a purely 
technical  aspect.  However  the  purely  technical  solution 
also  needs  fair  human-computer  transactions  i.e.  the 
administrators  are  required 
the  computer 
systems to behave in a fair manner. 
By the above-mentioned criteria the effective operation of 
the system requires that every party behave fairly in every 
transaction.  Any  party  therefore  misbehaving  can  cause 
the  distributed  system  to  be  exploited  to  deny  service  to 
any other party.  Therefore there can be no true technical 
solution to the Denial of service problem, however many 
researchers have sought to develop systems that make this 
possibility undesirable and difficult. 
3. Classification of Denial-of-Service 
Denial  of  service  is  not  a  difficult  problem  to  detect. 
Gilgor’s  work  [12]  highlighted  that  using  a  maximum 
waiting  time  it  was  a  simple  matter  to  identify  that  a 
service  or  request  had  not  been  delivered  within  that 
specified time. That paper identifies two important points: 
the  acceptable  time  is  predetermined  as  an  operational 
policy  requirement;  and  without  an  alternative  route  to 
request resources or direct requests then there is no way to 
do anything other than detect the denial of service. 
However denial of service is not a single problem. It is in-
fact  two  clearly  separate  problems,  the  Producer  and 
Consumer problems as highlighted in [17]: 
•  Consumer attacks 
A  Consumer  attack  is  when  a  party  C  seeks  to 
consume another party A’s request for a resource to a 
third  party  B,  or  consume  the  actual  resource  that  B 
has allocated to A.  
Figure 1. Request passing from A to B 
For  example,  Server  A  is  requesting  a  resource  from 
Server B, via Server C. Figures 1 and 2 show the normal 
sequence of events for this request and supply transaction. 
Figure 1 shows the request passing from A to C, and from 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:37 UTC from IEEE Xplore.  Restrictions apply. 
3 
C  to  B.  Figure  2  shows  the  requested  resource  then 
passing from B to C, then from C to A. 
available  are  unsuitable  or  unmanageable,  requires  A  to 
use its own internal resources. Server A has only a finite 
number  of  internal  resources  and  if  it  has  to  manage  a 
large number of ‘made available’ resources this can force 
it to use up all the internal resources, therefore Server A 
can  no  longer  operate  –  it  has  had  its  operating  policy 
violated. 
Figure 2. Resource allocation from B to A 
Figures 3 and 4 show the consumer problem. In figure 3, 
no  request  can  reach  B  as  Server  C  is  refusing  to  pass 
requests from A to B. Figure 4 shows a request (Fig 1) has 
been successful but the resource that B is allocating to A 
is unable to reach A due to C consuming that resource. 
Figure 3. Refusing to pass requests 
Figure 4. Consuming allocated resources 
•  Producer attacks 
This  is  where  parties  C1-Cn  causes  a  resource  to  be 
made available to another party A, which violates A’s 
operating policy. 
Figure  5  shows  the  Producer  problem.  In  this  example 
Server A is connected to a number of other servers C1-n. A 
receives  a  number  of  resource  from  the  servers  it  is 
connected to. In general, if a server increases the number 
of  resources  it  has  access  to  this  cannot  normally  be 
considered  a  problem.  The  increase  in  resources  is 
realistically  an  increase  in  functionality.  The  Producer 
problem is however based upon the resources being made 
available  violating Servers A’s  operating  policy  – that is 
to say that Server A is unable to manage those resources. 
For Server A to determine that the resources being made 
Figure 5. The Producer problem 
The Consumer problem (Figures 3 and 4) is the classical 
Man-in-the-Middle  problem,  where  party  C  sits  between 
parties  A  and  B.  It  is  a  simple  matter  for  party  C  to 
perform this attack. The only effective defence against this 
form  of  attack  is  for  party  A  to  identify  the  attack,  by 
using  Gilgor’s  [13]  principle  of  maximum  waiting  time 
and route through an alternative channel if available. 
The  Producer  problem  can  be  considered  the  ‘modern’ 
network denial of service or DDoS. The Producer problem 
clearly highlights the untrustworthy nature of the network 
entity  transactions,  as  there  are  a  number  of  policy 
constraints  which  if  violated  cause  this  type  of  incident. 
As  noted  above,  the  victim  must  identify  if  any  policy 
constraint  has  been  violated  when  it  accepts  a  resource. 
This  acceptance  test  causes  the  victim  to  use  its  own 
internal  resources  to  search  through  a  large  number  of 
possible  violations.  The  types  of  policy  constraints  that 
have  been  identified  as  capable  of  violation  within  this 
work are: 
1.  The resource must arrive in a timely manner 
2.  The resource must contain correct information 
3.  The resource must be answered (if required) 
4.  The resource must actually arrive 
5.  The resource must be well formed (i.e. not corrupted) 
6.  The resource must be in the correct format  
Descriptions: 
•  Points  1  and  4  are  distinct  due  to  the  term  ‘timely’. 
An  operating  policy  will  have  the  acceptable  arrival 
time  specified.  If  the  element  fails  to  arrive  within 
that  time,  then  it  is  acted  upon  with  regard  to  the 
policy,  which  will  most  likely  mean  the  element 
being  discarded.  Point  4  has  an  arrival  time  of 
infinity,  therefore  the  operating  policy  is  irrelevant 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:37 UTC from IEEE Xplore.  Restrictions apply. 
4 
and the element’s lack of arrival is dependent purely 
upon the communication medium.  
•  Point  2  refers  to  the  element  containing  correct 
information. This is important because the receiver is 
expecting to be given information that is correct, and 
if it does not then it cannot perform the action that it 
wanted  to,  i.e.  the  correct  information  has  been 
denied.  
•  Point  3  covers  incidents,  where  the  element  can  be 
considered denied until it is acknowledged [22]. If a 
communications  element  from  party  A  arrives  at 
party B and is not acknowledged, then clearly party A 
has no idea if the element has got through to party B, 
and  may  well  try  to  re-send  the  element  depending 
upon A’s operating policy. 
•  Points  5  and  6  are  very  similar  yet  distinct.  Point  5 
states that the information in an element is useless if it 
has been changed which is an integrity issue, whereas 
point 6 states that the information is equally useless if 
it  is  laid  out  in  a  format  that  the  receiving  party 
doesn’t understand. Point 5 is distinct also from point 
2,  as  it  covers  useless  corrupted  information  not 
information  that  is  correctly  formatted,  which  is 
worthless in content.  
Within  this  section  the  denial  of  service  problem  is 
classified into two separate and very distinct problems: the 
Producer  and  the  Consumer  problems.  The  Producer 
problem  is  synonymous  with  modern  DDoS.  It  has  been 
demonstrated  that  there  are  many  ways  of  making  a 
resource  available  to  a  victim  machine  that  can  possibly 
violate  that  victim  machines  operating  policies.  This 
highlights  the  complexity  of  the  Producer  Problem  and 
any  framework  to  respond  to  DDoS  must  consider  the 
producer problem in general.    
4.  Requirements  for Responding  to Network 
Denial of Service 
There  are  two  clear  research  directions  for  managing 
network  denial  of  service 
incidents:  prevention  of 
incidents prior to occurrence; and response to incidents as 
they  are  occurring.  There are no  general solutions to the 
general  denial  of  service  problem,  or  any  guides  or 
frameworks for dealing with incidents. There are specific 
problems that can be readily identified such as SYN flood, 
as  these  are  incidents  that  have  a  specific  symptom  and 
effect.  Solutions  have  been  developed  for  many  of  these 
specific instances, however they do not solve the general 
capability  for  certain  parties  on  a  network  to  be  able  to 
cause  incidents,  as  the  capacity  to  violate  the  policy 
constraints was demonstrated to be a simple matter in the 
previous section. Gilgor argues in [14] that prevention of 
network denial of service is virtually intractable.  
When policy is considered crucial and it is accepted that 
denial of service is an intractable problem, then prevention 
of  denial  of  service  becomes  an  unreasonable  goal.  This 
project identified that response to incidents and detection 
5 
of  incidents  are  important  for  providing  assurance  to 
networks  requiring  rapid  reaction  to  DDoS  incidents.  A 
general  framework  for  responding  to  DDoS  incidents 
would  have  several  desirable  requirements  for 
the 
framework of operation:  
a)  Generality – Denial of service may occur across many 
different  platforms  within  a  computer  network  and 
development of a framework restricted in its domain 
of  application  is  not  desirable.  For  example  a 
framework  for  the  detection  of  UNIX  denial  of 
service  gives  less  insight  into  combating  the  same 
denial  of  service  on  a  Microsoft  NT  system,  than  a 
general  theory  that  could  be  deduced  to  the  specific 
systems. 
b)  Not  exploitable  –  The  framework  should  be  secure, 
but as Pfleeger [23] points out that no system is 100% 
secure,  therefore  the  framework  must  not  be  able  to 
be exploited such that it can cause a denial of service. 
Other  aspects  such  as  fault  tolerance  [18]  and 
confidentiality must also be considered as operational 
policy constraints.  
c)  Policy  –  An  integral  part  of  denial  of  service  is  the 
traditional concept of integrity and availability, but as 
technology  advances,  networks  are  required 
to 
perform  a  variety  of  different  roles.  Now  the  model 
should  be  confidentiality, integrity  and acceptability. 
This  acceptability  as  defined  by  the  policy  of 
operation,  needs  to  be  a  fundamental  framework 
requirement.  There  are  many  possible  operational 
policy  constraints,  with  some 
that  have  been 
highlighted  from  the  literature  survey  and  many 
others which need more thorough research: 
•  Timely – The term “real time” as noted in [20] is 
something  of  a  misnomer,  when  it  comes  to 
intrusion  detection.  However  for  the  framework 
to be effective it must be considerate to the speed 
of  operation  and  the  cost/benefit  evaluation  of 
time/detection. 
•  Survivable/Adaptive  –  From  the  work  in  [10]  it 
can  be  shown  that  a  system  must  be  able  to 
provide core functions while compromised. This 
is  the  concept  of  system  survivability,  and  it  is 
central to ‘policy directed adaptability’. 