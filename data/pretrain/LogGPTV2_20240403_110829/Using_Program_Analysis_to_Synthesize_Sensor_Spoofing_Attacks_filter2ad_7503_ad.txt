with FIE. In this case, “-” means that the pattern for the
gesture was not found within 36 hours.
7https://github.com/johnhowe/FreeStanding
8
764FIE
DrE
Forward Compositional
Push
Pull
Flick
Zoom out
Zoom in
Punch
Reverse Punch
Double Flick
-
-
-
-
-
-
-
-
-
-
-
28m
-
-
-
13m
53s
4m 37s
2h 8m
51s
43s
2m 21s
2m
34s
Table 2: Gesture pattern extraction times
FIE failed to reach the target lines in all cases. There are
two main reasons for this. AllSee’s code includes a func-
tion that contains two loops and is responsible for obtaining
amplitude samples of the ambient wireless signal; one loop
iteration corresponds to one sample. Recognizing a gesture
involves executing the loop 16 times in a row (once it devi-
ates, the counter drops to zero). The ﬁrmware invokes this
function at least twice, which results in path explosion. The
second reason is that AllSee computes a moving average over
the last 64 ADC values. We observed that when the number
of ADC values is large, it can take tens of seconds for the
STP solver to solve a single formula in the path constraints.
DrE’s forward mode was able to extract patterns for two of
the gestures. Its state selection strategy gives preference to
states that are closer to the target line. Therefore, once the
execution breaks out of the ﬁrst loop and enters the second
loop, it keeps choosing states in the second loop forever.
DrE’s compositional mode is much more eﬃcient. It was
able to extract signal patterns for 7 out of 8 gestures in less
than ﬁve minutes. For the last gesture, however, it took a
bit more than two hours. In the latter case, the tool spent
most of the time in the last forward pass verifying diﬀerent
combinations of obtained execution paths. Because the code
computes the moving average over the last 64 ADC values,
most of the time was spent in the STP solver.
Extracted patterns.
The extracted patterns of signal
amplitude changes (read from ADC after sampling) corre-
sponding to diﬀerent gestures are shown side by side with
the original copies from [18] in Figures 10 and 11 in the Ap-
pendix. The patterns obtained via symbolic execution in
most cases are simpler than the original ones. This could
make spooﬁng attacks easier compared to the case when an
attacker needs to reproduce the exact patterns from AllSee’s
description [18], which is an extra beneﬁt of our approach
(in addition to automated extraction).
6. SIGNAL SPOOFING
So far we obtained sequences of ADC values that make
AllSee ﬁrmware recognize speciﬁc gestures. In this section,
we report on proof-of-concept experiments that show how
to trigger these ADC values by sending wireless signals such
that the results of sampling by AllSee’s sensor have the
shapes shown in Figures 10 and 11 in the Appendix.
6.1 Experimental setup
Porting ﬁrmware. The original AllSee source code was
written for the now obsolete MSP430F5310 launchpad, and
we could not readily purchase this legacy launchpad from
Texas Instruments. We therefore ported the ﬁrmware to
the MSP430G2553 microcontroller. This involved diﬀerent
Figure 7: AllSee hardware emulation
assignments to control registers (in order to properly set up
the clock system, UART, etc.) We conﬁgured the ADC to
measure voltage between 0 and 2.5 volts. We did not modify
any of the core functions responsible for gesture recognition.
Hardware emulation.
In order to minimize overall power
consumption, AllSee uses custom-built hardware: an enve-
lope detector and low-pass ﬁlter to extract low-frequency
amplitude changes from the carrier signal. Since we did
not have this hardware, in our experiments we emulated it
with software-deﬁned radio. Our emulation conﬁguration
is shown in Figure 7. An Ettus USRP B210 [13] device
equipped with an omnidirectional antenna is connected to
a laptop with gnuradio [15]. Using emulation also allowed
us to use a diﬀerent carrier frequency of 903 MHz (which
is at the beginning of ISM8) band. Corresponding gnuradio
blocks are responsible for extracting the signal amplitude
and removing high-frequency amplitude changes (we chose
cutoﬀ frequency of 100 Hz). The extracted samples are then
converted back to voltage levels and sent to the MSP430 de-
vice through a digital-to-analog converter (we chose to use
ArduinoDue [4] for that).
To reduce internal noise from the power supply and volt-
age reference of the A/D converter, we applied power sup-
ply decoupling as speciﬁed in [31]. We also added a low-
pass ﬁlter on the ADC input (i.e., between Arduino DAC
and MSP430). The resulting accuracy of ADC was approx-
imately 2 bits.
In order to support a large number of devices, gnuradio
abstracts the actual signal amplitude values; instead of con-
crete signal strength levels each transmitted/received sample
is characterized by a unitless value in the range [0; 1]. These
values are proportional to the actual amplitude, but getting
the actual voltage requires calibrating the device.
We performed a series of gestures and measured the dis-
tortion in the background signal (in terms of gnuradio unit-
less values). We then took this value and matched it with
the signal threshold (in terms of ADC steps) from the AllSee
ﬁrmware, thus computing the correspondence between USR-
P/gnuradio unitless amplitude and ADC level on the MSP430
device. We believe that this calibration methodology is sim-
ilar to how one would calibrate the original AllSee.
Once the hardware emulation was calibrated, we performed
a series of gestures. While ultimately the shapes of the dis-
torted background signals were consistent across repeats of
the same gesture, only one (Flick) gesture had similar ampli-
tude changes to that reported in [18]. Figure 12 in the Ap-
pendix shows the signal patterns for two gestures obtained
through our emulation next to the patterns from [18]. We
believe that the diﬀerence in shapes is caused by the dif-
ference in hardware conﬁgurations and environment condi-
8The industrial, scientiﬁc and medical (ISM) radio bands
are radio bands reserved internationally for the use of ra-
dio frequency energy for industrial, scientiﬁc and medical
purposes other than telecommunications.
9
ArduinoMSP430g2553Ettus USRPEttus USRPAllsee hardware emulation765tions. To have a “ﬂick” recognized as such in our environ-
ment would require additional tuning of the ﬁrmware to the
new conditions. Because we wanted to assess as unmodi-
ﬁed an AllSee ﬁrmware as possible, we abstained from any
additional modiﬁcations to the ﬁrmware.
Reduced sampling rate.
The original ﬁrmware uses
an ADC sampling rate of 200 samples per second. In the
following experiments, we reduced it to 2 samples per second
to facilitate synchronization between the emulated hardware
and the MSP430 ADC port. These synchronization issues do
not reﬂect a deﬁciency of DrE, but instead are the byproduct
of our three-component hardware emulation and the added
low-pass ﬁlter on the ADC input. They would not be present
in the original non-emulated hardware, and so attacks would
work at the original sampling rate.
Roughly speaking, in the case of 200 Hz sampling rate,
the signal that the attacker will need to generate to ensure
the ﬁrmware reads the same sequence of ADC outputs will
have the same shape as in the case of 2 samples per second,
but because it is transmitted faster, it will be “shrunk.” For
example, assume that DrE’s output indicates that the sec-
ond ADC reading should be larger than the ﬁrst one.
In
the 2 Hz case, the amplitude should rise in approximately
0.5 seconds after the ﬁrst reading. In the 200 Hz case, the
amplitude should rise in approximately 0.005 seconds after
the ﬁrst reading.
6.2 Experiments
Once the ADC conﬁguration is set, a signal pattern corre-
sponds to speciﬁc voltage levels at the time the ADC reads
a sample. In the ﬁrst set of experiments, we applied volt-
age patterns produced by our symbolic execution tool to the
ADC-enabled MSP430 pin directly. Each pattern triggered
the corresponding gesture recognition in almost 100% of
cases: due to internal ADC noise, a negligible number of ges-
tures were not recognized correctly. We also observed spo-
radic voltage spikes that randomly triggered gesture recog-
nition even though no pattern was sent.
In the second set of experiments, we carry out a complete
signal spooﬁng attack and measure how accurately we can
transmit signal patterns over the air. As an attacker we
used another USRP B210 at 903 MHz. We carry out the
experiments in the following setting: the attacker’s USRP
and the receiving antenna were placed 2 feet apart within
line of sight of each other. This setting corresponds to use
cases described in [18] (in which reported accuracies were
greater than 90% at the distance of 2 feet).
In our experiments we were able to successfully spoof all
8 gestures, often by sending just one copy of the signal pat-
tern. The chance (based on 100 experiments) that a single
pattern is recognized as the corresponding gesture by AllSee
is shown in the third column of Table 3. The second column
shows the number of transmissions per signal pattern. The
more transmissions the attacker needs to send, the longer
(in milliseconds) it takes him to spoof a gesture. Note that
in our experiments we reduced the sampling rate; it is pos-
sible (and expected) that the success rate will be lower for
the original sampling rate of 200Hz.
We use the numbers from Table 3 to compute the time
for an attacker to spoof a gesture, on average and with 80%
and 90% quantiles. Before we describe the actual times, we
need to take into account some of the AllSee control logic.
In order to avoid random human motion near the device
Gesture
Flick
Push
Pull
Double Flick
Punch
Reverse Punch
Zoom in
Zoom out
# of samples in
pattern
Success %
148
68
100
36
84
84
52
52
39%
63%
56%
81%
58%
66%
77%
79%
Table 3: Percentage of 100 transmissions of each spoofed
pattern that successfully triggered recognition of the asso-
ciated gesture. The second column is the number of trans-
missions that must be sent for that pattern.
Simple Gesture
Average
80% quantile
95% quantile
Flick
Push
Pull
Double Flick
Punch
Reverse Punch
Zoom in
Zoom out
184
54
89
22
72
64
34
33
241
55
98
17
78
63
28
27
448
102
182
32
145
117
53
50
Gesture with guard Average
80% quantile
95% quantile
Flick
Push
Pull
Double Flick
Punch
Reverse Punch
Zoom in
Zoom out
234
67
110
27
89
78
41
40
390
117
181
54
152
126
72
69
726
218
337
101
283
235
135
129
Table 4: Time (in seconds) before a gesture is successfully
spoofed assuming 2 samples per second. Upper part: single
gestures. Lower part: combined with guard gesture.
from being classiﬁed as the target gestures, AllSee uses the
double ﬂick gesture as a “guard” that must be performed
for AllSee to start accepting subsequent gesture commands.
This means that forcing a gesture to be recognized actually
requires spooﬁng two sub-gestures.
Table 4 shows the time (in seconds) for a gesture to be
successfully spoofed at sampling rate of 2 samples/sec. The
upper part of the table shows the times without the double-
ﬂick preamble. The lower part corresponds to the case when
each gesture must be preceded by the double-ﬂick preamble.
For 7 gestures out of 8, it takes less then 90 seconds on aver-
age to be spoofed. If the double-ﬂick preamble is required,
for 7 gestures out of 8 it takes less then 110 seconds to be
spoofed on the average. For the original sampling rate of
200 samples/sec, assuming the same probabilities as in Ta-
ble 3, gesture spooﬁng would be 100 times faster: it would
take less then 3.5 seconds including double-ﬂick preamble to
spoof 7 gestures out of 8 with 95% probability.
Finally we set the distance between the attacker and AllSee
to six feet and had people walk occasionally in the vicinity.
Even in this environment, for which AllSee was not designed,
we were able to successfully spoof four of the eight gestures.
7. RELATED WORK
FIE [10] is an existing tool for the symbolic execution of
MSP430 ﬁrmware source code that built on an earlier x86
system, KLEE [8]. In our experiments, FIE often produced
10
766a large number of paths that are, in fact, infeasible with
properly functioning hardware. It also omits important (and
sometimes the only reachable) paths. Overall FIE’s explicit
design goal of exhaustively exploring all code paths results
in shallow code coverage, making it hard for FIE to reach
points of interest in non-trivial ﬁrmware.
Modular approaches for (non-directed) symbolic execu-
tion appeared in several previous papers. In compositional
symbolic execution [16], a set of execution paths of a func-
tion can be represented as a function summary. In [16], func-
tion summaries are built using the top-to-bottom approach.
This approach is well-suited for increasing code coverage but
it can take a long time to reach a speciﬁc point in the code
(e.g., if it is reached only when a rare condition is satisﬁed).
A demand-driven variant of this approach [3] inherits the
same problems. In this paper, we develop a bottom-up ap-
proach instead. This allows us to capture the constraints
deﬁning reachability of the target program point early in
the analysis. We use the ﬁnal forward pass, after stitching
function summaries, to eliminate infeasible paths.
Under-constrained symbolic execution [12, 26] checks sin-
gle functions. Executing functions in isolation is part of our