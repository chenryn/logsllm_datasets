# Postgres Conference China 2016 中国用户大会

## GIS 简介

### 定义
地理信息系统（Geographic Information System，简称GIS）有时又称为“地学信息系统”，是一个用于采集、存储、管理、运算、分析、显示和描述空间数据的技术系统。

### 组成
- 人员
- 数据
- 硬件
- 软件
- 过程

## POSTGIS 简介

### 定义
PostGIS是对象关系型数据库系统PostgreSQL的一个扩展，提供以下空间信息服务功能：
- 空间对象
- 空间索引
- 空间操作函数
- 空间操作符

同时，PostGIS遵循OpenGIS的规范。

### 发展历程
- 2001年5月发布了PostGIS的第一版（PostGIS V0.1）

### 特性
- 空间数据类型（点、线、多边形、多点、多线等）
- 数据存取和构造方法（如GeomFromText()、AsBinary()等）
- 空间分析函数（如Area和Length等）
- 元数据的支持
- 二元谓词
- 空间操作符

## POSTGIS 类型

- `POINT(0 0)` —— 点
- `LINESTRING(0 0,1 1,1 2)` —— 线
- `POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1, 2 1, 2 2, 1 2,1 1))` —— 面
- `MULTIPOINT(0 0,1 2)` —— 多点
- `MULTILINESTRING((0 0,1 1,1 2),(2 3,3 2,5 4))` —— 多线
- `MULTIPOLYGON(((0 0,4 0,4 4,0 4,0 0),(1 1,2 1,2 2,1 2,1 1)), ((-1 -1,-1 -2,-2 -2,-2 -1,-1 -1)))` —— 多面
- `GEOMETRYCOLLECTION(POINT(2 3),LINESTRING((2 3,3 4)))` —— 几何集合

## 几何对象关系函数

- 获取两个几何对象间的距离：`ST_Distance(geometry, geometry)`
- 判断两个几何对象是否分离：`ST_Disjoint(geometry, geometry)`
- 判断两个几何对象是否相交：`ST_Intersects(geometry, geometry)`
- 判断两个几何对象的边缘是否接触：`ST_Touches(geometry, geometry)`
- 判断两个几何对象是否互相穿过：`ST_Crosses(geometry, geometry)`
- 判断A是否被B包含：`ST_Within(geometry A, geometry B)`
- 判断两个几何对象是否重叠：`ST_Overlaps(geometry, geometry)`
- 判断A是否包含B：`ST_Contains(geometry A, geometry B)`
- 判断A是否覆盖B：`ST_Covers(geometry A, geometry B)`
- 判断A是否被B所覆盖：`ST_CoveredBy(geometry A, geometry B)`

## 几何对象处理函数

- 获取几何对象的中心：`ST_Centroid(geometry)`
- 面积量测：`ST_Area(geometry)`
- 长度量测：`ST_Length(geometry)`
- 返回曲面上的一个点：`ST_PointOnSurface(geometry)`
- 获取边界：`ST_Boundary(geometry)`
- 获取缓冲后的几何对象：`ST_Buffer(geometry, double, [integer])`
- 获取多几何对象的外接对象：`ST_ConvexHull(geometry)`
- 获取两个几何对象相交的部分：`ST_Intersection(geometry, geometry)`
- 将经度小于0的值加360使所有经度值在0-360之间：`ST_Shift_Longitude(geometry)`
- 获取两个几何对象不相交的部分（A、B可互换）：`ST_SymDifference(geometry A, geometry B)`
- 从A去除和B相交的部分后返回：`ST_Difference(geometry A, geometry B)`
- 返回两个几何对象的合并结果：`ST_Union(geometry, geometry)`
- 返回一系列几何对象的合并结果：`ST_Union(geometry set)`

## 几何对象存取函数

- 判断几何对象是否为空：`ST_IsEmpty(geometry)`
- 判断几何对象是否不包含特殊点（比如自相交）：`ST_IsSimple(geometry)`
- 判断几何对象是否闭合：`ST_IsClosed(geometry)`
- 判断曲线是否闭合并且不包含特殊点：`ST_IsRing(geometry)`
- 获取多几何对象中的对象个数：`ST_NumGeometries(geometry)`
- 获取多几何对象中第N个对象：`ST_GeometryN(geometry, int)`
- 获取几何对象中的点个数：`ST_NumPoints(geometry)`
- 获取几何对象的第N个点：`ST_PointN(geometry, integer)`
- 获取线的终点：`ST_EndPoint(geometry)`
- 获取线的起始点：`ST_StartPoint(geometry)`
- 获取几何对象的类型：`GeometryType(geometry)`
- 获取点的X坐标：`ST_X(geometry)`
- 获取点的Y坐标：`ST_Y(geometry)`
- 获取点的Z坐标：`ST_Z(geometry)`
- 获取点的M值：`ST_M(geometry)`

## POSTGIS 应用案例

### 接触
我们最初接触POSTGIS是因为需要处理空间信息。随着业务的发展，团队逐渐开始使用POSTGIS。

### 查询之痛
随着业务数据量的增长，查询效率变得越来越慢。

### 部分转移
决定将原系统中的空间信息部分转移到POSTGIS来处理。

## 存储 Point

```sql
CREATE TABLE sys_gps (
    id BIGINT,
    car_id BIGINT,
    position_name VARCHAR(20),
    point_xy GEOMETRY
);

INSERT INTO sys_gps (id, car_id, position_name, point_xy)
VALUES 
(1, 100001, '北京', ST_Transform(ST_GeomFromText('POINT(116.46 39.92)', 4326), 2163)),
(2, 100002, '上海', ST_Transform(ST_GeomFromText('POINT(121.47 31.23)', 4326), 2163)),
(3, 520100, '贵阳', ST_Transform(ST_GeomFromText('POINT(106.71 26.57)', 4326), 2163)),
(4, 520100, '乌鲁木齐', ST_Transform(ST_GeomFromText('POINT(87.6177 43.7928)', 4326), 2163));
```

## GIS 函数 - 距离

### 点跟点的直线距离——贵阳到乌鲁木齐（单位千米）

```sql
SELECT ST_Distance(
    ST_Transform(ST_GeomFromText('POINT(106.71 26.57)', 4326), 2163),
    ST_Transform(ST_GeomFromText('POINT(87.6177 43.7928)', 4326), 2163)
) / 1000 AS st_distance;
```

结果：
```
+------------------+
| st_distance      |
+------------------+
| 3311.3406955529  |
+------------------+
1 row in set
```

## GIS 函数 - 范围

### 查询云飞科技周边10千米的车辆

```sql
SELECT *, 
       ST_Distance(point_xy, ST_Transform(ST_GeomFromText('POINT(106.661412 26.626848)', 4326), 2163))
FROM sys_gps
WHERE point_xy && ST_Buffer(ST_Transform(ST_GeomFromText('POINT(106.661412 26.626848)', 4326), 2163), 10000, 10);
```

结果：
```
+--------+------------------+
| car_id | st_distance      |
+--------+------------------+
| 10036  | 1016.9653164     |
| 28643  | 3649.89641365    |
| 29751  | 8964.623         |
+--------+------------------+
3 rows in set
```

## PG-Java

### JDBC 驱动下载
[下载链接](http://jdbc.postgresql.org/download.html)

### JDBC 配置
```java
Class.forName("org.postgresql.Driver");
Connection connection = DriverManager.getConnection(
    "jdbc:postgresql://***.***.***.***:5432/***", "用户名", "密码");
```

### Hibernate 配置
```properties
driverClassName=org.postgresql.Driver
url=jdbc:postgresql://***.***.***.***/***
username=***
password=***
```

### PG 的 Java 对象
- `PGpoint`
- `Pgline`
- ...

## PG-GPS 采集

### APP端
负责采集GPS点信息并上传到Java端。

### 服务端
接收APP端上传的GPS采集信息数据，并存储到PG数据库。

### PG端
存储GPS信息。

## 轨迹回放

### PG端
做GPS轨迹信息查询的优化。

### Java端
结合PG提供的`PGpoint`对象读取出PG存储的GPS点信息。

### Web端
结合百度地图的API（Polyline对象）实现将后台查询出来的GPS轨迹信息绘制在地图上。

## GiST 索引 - 查询优化

### 创建GiST索引
```sql
CREATE INDEX idx_cust_car_gps_1 ON area_gps USING GIST (point_xy);
```

### 建立GiST索引的语法
```sql
CREATE INDEX [indexname] ON [tablename] USING GIST ([geometryfield]);
```

要建立PostGIS 2.0+支持的n维索引，可以使用以下语法：
```sql
CREATE INDEX [indexname] ON [tablename] USING GIST ([geometryfield] gist_geometry_ops_nd);
```

## GIS 的后续应用

### 3D 点
- 存储室内数据

### 线
- 转移原系统的线路数据

### Web Site
- 部分业务直接集成到PostgreSQL来，应用程序直接访问PostgreSQL Web接口获取数据，如车辆的GPS点数据

---

感谢大家！

### Q & A

如有任何问题，请随时提问。