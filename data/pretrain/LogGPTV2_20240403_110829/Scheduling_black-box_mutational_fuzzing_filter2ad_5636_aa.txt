title:Scheduling black-box mutational fuzzing
author:Maverick Woo and
Sang Kil Cha and
Samantha Gottlieb and
David Brumley
Scheduling Black-box Mutational Fuzzing
Maverick Woo
Sang Kil Cha
Samantha Gottlieb
Carnegie Mellon University
{pooh,sangkilc,sgottlie,dbrumley}@cmu.edu
David Brumley
ABSTRACT
Black-box mutational fuzzing is a simple yet eﬀective tech-
nique to ﬁnd bugs in software. Given a set of program-seed
pairs, we ask how to schedule the fuzzings of these pairs in
order to maximize the number of unique bugs found at any
point in time. We develop an analytic framework using a
mathematical model of black-box mutational fuzzing and
use it to evaluate 26 existing and new randomized online
scheduling algorithms. Our experiments show that one of
our new scheduling algorithms outperforms the multi-armed
bandit algorithm in the current version of the CERT Basic
Fuzzing Framework (BFF) by ﬁnding 1.5× more unique bugs
in the same amount of time.
Categories and Subject Descriptors
D.2.5 [Software Engineering]: Testing and Debugging—
Testing Tools
General Terms
Security
Keywords
Software Security; Fuzz Conﬁguration Scheduling
1 Introduction
A General (or professor) walks into a cramped cubicle, telling
the lone security analyst (or graduate student) that she has
one week to ﬁnd a zero-day exploit against a certain popular
OS distribution, all the while making it sound as if this task
is as easy as catching the next bus. Although our analyst
has access to several program analysis tools for ﬁnding bugs
[8, 10, 11, 21] and generating exploits [4, 9], she still faces a
harsh reality: the target OS distribution contains thousands
of programs, each with potentially tens or even hundreds
of yet undiscovered bugs. What tools should she use for
this mission? Which programs should she analyze, and in
what order? How much time should she dedicate to a given
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516736.
program? Above all, how can she maximize her likelihood of
success within the given time budget?
In this paper, we focus on the setting where our analyst
has chosen to ﬁnd bugs via black-box mutational fuzzing. At
a high level, this technique takes as input a program p and a
seed s that is usually assumed to be a well-formed input for p.
Then, a program known as a black-box mutational fuzzer is
used to fuzz the program p with the seed s, i.e., execute p on
a potentially malformed input x obtained by randomly mu-
tating s in a precise manner to be described in §2. Through
repeated fuzzings, we may discover a number of inputs that
crash p. These crashing inputs are then passed to down-
stream analyses to triage each crash into a corresponding
bug, test each newly-discovered bug for exploitability, and
generate exploits when possible.
Intuitively, our analyst may try to improve her chances
by ﬁnding the greatest number of unique bugs among the
programs to be analyzed within the given time budget. To
model this, let us introduce the notion of a fuzz campaign.
We assume our analyst has already obtained a list of program-
seed pairs (pi, si) to be fuzzed through prior manual and/or
automatic analysis. A fuzz campaign takes this list as input
and reports each new (previously unseen) bug when it is
discovered. As a simpliﬁcation, we also assume that the
fuzz campaign is orchestrated in epochs. At the beginning of
each epoch we select one program-seed pair based only on
information obtained during the campaign, and we fuzz that
pair for the entire epoch. This latter assumption has two
subtle but important implications. First, though it does not
limit us to fuzzing with only one computer, it does require
that every computer in the campaign fuzz the same program-
seed pair during an epoch. Second, while our deﬁnition of
a fuzz conﬁguration in §2 is more general than a program-
seed pair, we also explain our decision to equate these two
concepts in our present work. As such, what we need to
select for each epoch is really a fuzz conﬁguration, which
gives rise to our naming of the Fuzz Conﬁguration Scheduling
(FCS) problem.
To ﬁnd the greatest number of unique bugs given the above
problem setting, our analyst must allocate her time wisely.
Since initially she has no information on which conﬁguration
will yield more new bugs, she should explore the conﬁgu-
rations and reduce her risk by fuzzing each conﬁguration
for an adequate amount of time. As she starts to identify
some conﬁgurations that she believes may yield more new
bugs in the future, she should also exploit this information
by increasing the time allocated to fuzz these conﬁgurations.
Of course, any increase in exploitation reduces exploration,
which may cause our analyst to under-explore and miss con-
ﬁgurations that are capable of yielding more new bugs. This
is the classic “exploration vs. exploitation” trade-oﬀ, which
signiﬁes that we are dealing with a Multi-Armed Bandit
(MAB) problem [5].
Unfortunately, merely recognizing the MAB nature of our
problem is not suﬃcient to give us an easy solution. As we
explain in §3, even though there are many existing MAB
algorithms and some even come with excellent theoretical
guarantees, we are not aware of any MAB algorithm that
is designed to cater to the speciﬁcs of ﬁnding unique bugs
using black-box mutational fuzzing. For example, suppose
we have just found a crash by fuzzing a program-seed pair
and the crash gets triaged to a new bug. Should an MAB
algorithm consider this as a high reward, thus steering itself
to fuzz this pair more frequently in the future? Exactly what
does this information tell us about the probability of ﬁnding
another new bug from this pair in future fuzzes? What if the
bug was instead a duplicate, i.e., one that has already been
discovered in a previous fuzz run? Does that mean we should
assign a zero reward since this bug does not contribute to
the number of unique bugs found?
As a ﬁrst step to answer these questions and design more
suitable MAB algorithms for our problem, we discover that
the memoryless property of black-box mutational fuzzing
allows us to formally model the repeated fuzzings of a con-
ﬁguration as a bug arrival process. Our insight is that this
process is a weighted variant of the Coupon Collector’s Prob-
lem (CCP) where each coupon type has its own ﬁxed but
initially unknown arrival probability. We explain in §4.1 how
to view each fuzz run as the arrival of a coupon and each
unique bug as a coupon type. Using this analogy, it is easy
to understand the need to use the weighted variant of the
CCP (WCCP) and the challenge in estimating the arrival
probabilities.
The WCCP connection has proven to be more powerful
than simply aﬀording us clean and formal notation—not only
does it explain why our problem is impossible to optimize in
its most general setting due to the No Free Lunch Theorem,
but it also pinpoints how we can circumvent this impossibility
result if we are willing to make certain assumptions about
the arrival probabilities in the WCCP (§4.2). Of course, we
also understand that our analyst may not be comfortable
in making any such assumptions. This is why we have
also investigated how she can use the statistical concept of
conﬁdence intervals to estimate an upperbound on the sum
of the arrival probabilities of the unique bugs that remain
to be discovered in a fuzz conﬁguration. We argue in §4.3
why this upperbound oﬀers a pragmatic way to cope with
the above impossibility result.
Having developed these analytical tools, we explore the
design space of online algorithms for our problem in §4.4.
We investigate two epoch types, ﬁve belief functions that es-
timate future bug arrival using past observations, two MAB
algorithms that use such belief functions and three that do
not. By combining these dimensions, we obtain 26 online
algorithms for our problem. While some of these algorithms
have appeared in prior work, the majority of them are new.
In addition, we also present oﬄine algorithms for our prob-
lem in §4.5. In the case where the sets of unique bugs from
each conﬁguration are disjoint, we obtain an eﬃcient algo-
rithm that computes the oﬄine optimal, i.e., the maximum
number of unique bugs that can be found by any algorithm
in any given time budget. In the other case where these
sets may overlap, we also propose an eﬃcient heuristic that
lowerbounds the oﬄine optimal.
To evaluate our online algorithms, we built FuzzSim, a
novel replay-based fuzz simulation system that we present in
§5. FuzzSim is capable of simulating any online algorithm
using pre-recorded fuzzing data. We used it to implement
numerous algorithms, including the 26 presented in this
paper. We also collected two extensive sets of fuzzing data
based on the most recent stable release of the Debian Linux
distribution up to the time of our data collection. To this
end, we ﬁrst assembled 100 program-seed pairs comprising
FFMpeg with 100 diﬀerent seeds and another 100 pairs
comprising 100 diﬀerent Linux ﬁle conversion utilities, each
with an input seed that has been manually veriﬁed to be valid.
Then, we fuzzed each of these 200 program-seed pairs for
10 days, which amounts to 48, 000 CPU hours of fuzzing in
total. The performance of our online algorithms on these two
datasets is presented in §6. In addition, we are also releasing
FuzzSim as well as our datasets in support of open science.
Besides replicating our experiments, this will also enable
fellow researchers to evaluate other algorithms. For details,
please visit http://security.ece.cmu.edu/fuzzsim/.
2 Problem Setting and Notation
Let us start by setting out the deﬁnitions and assump-
tions needed to mathematically model black-box mutational
fuzzing. Our model is motivated by and consistent with real-
world fuzzers such as zzuf [16]. We then present our problem
statement and discuss several algorithmic considerations. For
the rest of this paper, the terms “fuzzer” and “fuzzing” refer
to the black-box mutational variant unless otherwise stated.
2.1 Black-box Mutational Fuzzing
Black-box mutational fuzzing is a dynamic bug-ﬁnding tech-
nique. It endeavors to ﬁnd bugs in a given program p by
running it on a sequence of inputs generated by randomly
mutating a given seed input s. The program that generates
these inputs and executes p on them is known as a black-box
mutational fuzzer. In principle, there is no restriction on s
other than it being a string with a ﬁnite length; however, in
practice, s is often chosen to be a well-formed input for p
in the interest of ﬁnding bugs in p more eﬀectively. With
each execution, p either crashes or properly terminates. Mul-
tiple crashes, however, may be due to the same underlying
bug. Thus there needs to be a bug-triage process to map
each crash into its corresponding bug. Understanding the
eﬀects of these multiplicities is key to analyzing black-box
mutational fuzzing.
To formally deﬁne black-box mutational fuzzing, we need a
notion of “random mutations” for bit strings. In what follows,
let |s| denote the bit-length of s.
Definition 2.1. A random mutation of a bit b is the
exclusive-or1of the bit b and a uniformly-chosen bit. With
respect to a given mutation ratio r ∈ [0, 1], a random mu-
tation of a string s is generated by ﬁrst selecting d = r · |s|
diﬀerent bit-positions uniformly at random among the(cid:0)|s|
possible combinations and then randomly mutating those d
bits in s.
1Mutations in the form of unconditionally setting or unsetting
the bit are possible, but they are both harder to analyze
mathematically and less frequently used in practice. To
justify the latter, we note that zzuf defaults to exclusive-or.
(cid:1)
d
Definition 2.2. A black-box mutational fuzzer is a ran-
domized algorithm that takes as input a fuzz conﬁguration,
which comprises (i) a program p, (ii) a seed input s, and (iii)
a mutation ratio r ∈ [0, 1]. In a fuzz run, the fuzzer generates
an input x by randomly mutating s with the mutation ratio
r and then runs p on x. The outcome of this fuzz run is a
crash or a proper termination of p.
At this point, it is convenient to set up one additional
notation to complement Deﬁnition 2.1. Let Hd(s) denote
the set of all strings obtained by randomly-mutating s with
the mutation ratio r = d/|s|. This notation highlights the
equivalence between the set of all obtainable inputs and the
set of all |s|-bit strings within a Hamming distance of d
from s. In this notation, the input string x in Deﬁnition 2.1
is simply a string chosen uniformly at random from Hd(s).
As we explain below, in this paper we use a globally-ﬁxed
mutation ratio and therefore d is ﬁxed once s is given. This
is why we simply write H(s) instead of Hd(s).
We now state and justify several assumptions of our math-
ematical model, all of which are satisﬁed by typical fuzzers
in practice.
Assumption 1. Each seed input has ﬁnite length.
This assumption is always satisﬁed when fuzzing ﬁle inputs.
In practice, some fuzzers can also perform stream fuzzing,
which randomly mutates each bit in an input stream with a
user-conﬁgurable probability. Notice that while the expected
number of randomly-mutated bits is ﬁxed, the actual number
is not. We do not model stream fuzzing.
Assumption 2. An execution of the program exhibits ex-
actly one of the following two possible outcomes—it either
crashes or properly terminates.
In essence, this assumption means we focus exclusively on
ﬁnding bugs that lead to crashes. Finding logical bugs that
do not lead to crashes would typically require a correctness
speciﬁcation of the program under test. At present, such spec-
iﬁcations are rare in practice and therefore this assumption
does not impose a severe restriction.
Assumption 3. The outcome of an execution of the pro-
gram depends solely on the input x generated by the fuzzer.
This assumption ensures we are not ﬁnding bugs caused
by input channels not under the fuzzer’s control. Since
the generated input alone determines whether the program
crashes or terminates properly, all bugs found during fuzzing
are deterministically reproducible. In practice, inputs that
do not cause a crash in downstream analyses are discarded.
Mutation Ratio. We include the mutation ratio as a third
parameter in our deﬁnition of fuzz conﬁgurations given in
Deﬁnition 2.2. Our choice reﬂects the importance of this
parameter in practice since diﬀerent seeds may need to be
fuzzed at diﬀerent mutation ratios to be eﬀective in ﬁnd-
ing bugs. However, in order to evaluate a large number of
scheduling algorithms, our work is based on a replay simula-
tion as detailed in §5. Gathering the ground-truth fuzzing
data for such simulations is resource-intensive, prohibitively
so if we examine multiple mutation ratios. As such, our