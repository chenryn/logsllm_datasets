                    $arr = [];
                    foreach ($val as $k => $value) {
                        $arr[$k] = $this->subToArray($value, $visible, $hidden, $key);
                    }
                    $item[$key] = $arr;
                } else {
                    // 模型属性
                    $item[$key] = $this->getAttr($key);
                }
            }
            // 追加属性（必须定义获取器）
            if (!empty($this->append)) {
                foreach ($this->append as $key => $name) {
                    if (is_array($name)) {
                        // 追加关联对象属性
                        $relation   = $this->getAttr($key);
                        $item[$key] = $relation->append($name)->toArray();
                    } elseif (strpos($name, '.')) {
                        list($key, $attr) = explode('.', $name);
                        // 追加关联对象属性
                        $relation   = $this->getAttr($key);
                        $item[$key] = $relation->append([$attr])->toArray();
                    } else {
                        $relation = Loader::parseName($name, 1, false);
                        if (method_exists($this, $relation)) {
                            $modelRelation = $this->$relation();
                            $value         = $this->getRelationData($modelRelation);
                            if (method_exists($modelRelation, 'getBindAttr')) {
                                $bindAttr = $modelRelation->getBindAttr();
                                if ($bindAttr) {
                                    foreach ($bindAttr as $key => $attr) {
                                        $key = is_numeric($key) ? $attr : $key;
                                        if (isset($this->data[$key])) {
                                            throw new Exception('bind attr has exists:' . $key);
                                        } else {
                                            $item[$key] = $value ? $value->getAttr($attr) : null;
                                        }
                                    }
                                    continue;
                                }
                            }
                            $item[$name] = $value;
                        } else {
                            $item[$name] = $this->getAttr($name);
                        }
                    }
                }
            }
            return !empty($item) ? $item : [];
        }
这里比较长，但是不需要进行特别详细的审计，主要是看看有没有可以利用的危险函数，或者是可以当成跳板的利用点。
简单看了一下，这里没有什么危险函数，所以要考虑找跳板。
这里比较常见的跳板主要是`__call()`
看看有没有可控的，调用了函数的变量。
可以看到，一共有这三个变量调用了方法，找一下有没有可控的。
**利用PHPSTORM的查找写入值，可以比较方便的看见写入和读取的过程。**
### 前提:
#### 首先看`$relation`
前两个是用getAttr()函数来返回以$key为键名的数组$data的元素值。
后一个是调用了Loader类中的方法，看一下方法：
函数备注了字符串命名风格转换，理论上来说对于输入的字符串`$name`是不会有什么影响的，如果`$name`可以进行控制的话，那么就可以控制到`$relation`。
回头查看一下：
通过查看`append`的调用，可以发现`append`是可以控制的，那么`$name`和`$relation`就是可以控制的了。可以通过这里触发`__call()`魔术方法。
#### 然后是看`$modelRelation`
这里有一个写入值的地方。
说实话，这部分我没看懂代码
查了一下之后， 对于这部分代码可以理解为：
    $modelRelation = $this->$relation(); //relation是一个可以改变的函数名，可以根据$relatioin不同值，来使得$modelRelation等于不同函数的返回值。
同时要进入这部分，需要首先满足`method_exists()`这个方法。
用于这部分，就是需要满足`$relation()`所指向的方法，是存在于Model类中的方法。
这里选择的是getError()这个方法，因为返回值是可以控制的。
所以只要通过设置`$error`为一个对象，同时将`$relation`设置为getError,就可以实现对`$modelRelation`的控制，进而触发`__call()`
#### 最后看一下`$value`
这里可以看见两个写入值的地方，跟进一下`getRelationData($modelRelation)`
这里首先判断了一下传入的参数是Relation类的对象（也就是$modelRelation）
可以看见下面有一个$value = $this->parent，而`$parent`是可控的，这里如果能控制就很方便了。
看看判断条件：
    if ($this->parent && !$modelRelation->isSelfRelation() && get_class($modelRelation->getModel()) == get_class($this->parent))
分析一下：
这里需要`$this->parent`存在，`$modelRelation`中存在`isSelfRelation()`且返回值为0，`$modelRelation`中存在`getModel()`方法。
满足以上条件之后，就可以进入if，然后令`$value=$this->partent`。所以`$value`也是可以控制的
### 触发__call():
接下来就是要考虑怎么调用函数，来触发`__call()`。
    if (!empty($this->append)) {
                foreach ($this->append as $key => $name) {
                    if (is_array($name)) {
                        // 追加关联对象属性
                        $relation   = $this->getAttr($key);
                        $item[$key] = $relation->append($name)->toArray();
                    } elseif (strpos($name, '.')) {
                        list($key, $attr) = explode('.', $name);
                        // 追加关联对象属性
                        $relation   = $this->getAttr($key);
                        $item[$key] = $relation->append([$attr])->toArray();
                    } else {
                        $relation = Loader::parseName($name, 1, false);
                        if (method_exists($this, $relation)) {
                            $modelRelation = $this->$relation();
                            $value         = $this->getRelationData($modelRelation);
                            if (method_exists($modelRelation, 'getBindAttr')) {
                                $bindAttr = $modelRelation->getBindAttr();
                                if ($bindAttr) {
                                    foreach ($bindAttr as $key => $attr) {
                                        $key = is_numeric($key) ? $attr : $key;
                                        if (isset($this->data[$key])) {
                                            throw new Exception('bind attr has exists:' . $key);
                                        } else {
                                            $item[$key] = $value ? $value->getAttr($attr) : null;
                                        }
                                    }
                                    continue;
                                }
                            }
                            $item[$name] = $value;
                        } else {
                            $item[$name] = $this->getAttr($name);
                        }
                    }
                }
            }
            return !empty($item) ? $item : [];
        }
#### 1、`if (!empty($this->append))`
可以直接控制，进入
#### 2、`foreach ($this->append as $key => $name)`
控制了`$append`,可以直接进入。
#### 3、`if (is_array($name))`
令上一步中的`$name`不是数组，进入。
#### 4、`elseif (strpos($name, '.'))`
`$name`不存在`.`，进入。
#### 5、`if (method_exists($this, $relation))`
要保证在Model类中，`$relation`表示的函数存在即可进入。
#### 6、`if (method_exists($modelRelation, 'getBindAttr'))`
保证在`$modelRelation`表示的类中存在`getBindAttr()`方法可以进入。
#### 7、`if ($bindAttr)`
保证`$modelRelation->getBindAttr();`存在，可以进入
#### 8、`if (isset($this->data[$key])) {`
使得`$data`中以`$key`为键的元素是空即可绕过。
#### 分析：
对于以上的八个关键点，进行分析：
因为我们可以控制`$append`，所以我们可以对`$key`和`$name`的值进行控制（通过第二点的foreach）。
接下来第三点，我们需要保证在`$append`中元素不为数组，这很好实现，随便写入一个字符串，例如`Ho1L0w-By`（只是一个例子）即可（但实际上后面的要求不一样，只是就目前情况分析）。
第四点，要求`$name`，也就是`$append`中的元素中不能有`.`，写的字符串已经实现了。
第五点和第六点需要一起看，就像是我们之前分析`$relation`和`$modelRelation`一样，为了控制第六点中的`$modelRelation`中存在`getBindAttr()`方法，我们需要将`$relation`控制写为`getError`，这样才能控制`$modelRelation`的值，使得`$modelRelation`中存在`getBindAttr()`
那么总结一下上面的六点：
`$append`中的`$key`和`$name`可以控制，且`$name`的值必须为`getError`，然后通过设置`$error`值，来进一步控制`$modelRelation`。  
而根据我们之前对于`getRelationData()`方法中，`$value =
$this->partent`的分析，这里来总结一下对于`$modelRelation`需要的条件
> 1、是Relation对象
>
> 2、存在isSelfRelation()方法，且返回值存在
>
> 3、存在getModel()方法，且返回值与get_class($this->parent)相同。（双等号）
>
> 4、存在getBindAttr()
进行用法查找：
可以看见这些里面都存在Relation的类。
而看过`Relation`类之后可以发现，在所有的Relation的子类中都存在`isSelfRelation()`和`getModel()`。
这里跟进一下`getModel()`函数：
查找一下用法，可以知道`$query`是可控的，这里需要知道哪个类的`getModel()`方法是可控的，来控制返回值。
可以看见是可控的，选择Query.php。
接下来就是在这些子类中找存在`getBindAttr()`方法的类
在这里可以看见，和上面的重合点有一个，就是OneToOne.php里面。
而这里因为OneToOne这个类是抽象类，所以还需要找到它的子类。
这里可以选择HasOne.php。
这里就已经解决了`$modelRelation`的需求，可以继续看剩下的7，8点。
第七点需要我们返回的`$bindAttr`的值存在，看一下OneToOne.php中的`getBindAttr()`方法，可以看见是可控的，简单绕过。
第八点我们对$key的值溯源一下，
看一下这个三元运算，只要`$key`是数字，就可以设置`$key`的值为`$attr`，可以看见`$key`和`$attr`都是我们可以进行控制的，因为`$bindAttr`可以控制。
到这里，已经可以执行我们需要的函数来触发`__call()`了。
### 选择__call():
进行全局搜索，找到一个合适的__call()方法
这里根据前人经验，可以选择Output.php（篇幅有限）
这里是路径：
    thinkphp/library/think/console/Output.php
在这里主要需要看的是这两个函数：
`array_unshift()`，`call_user_func_array()`。
`array_unshift()` 函数用于向数组插入新元素。新数组的值将被插入到数组的开头。
`call_user_func_array` — 调用回调函数，并把一个数组参数作为回调函数的参数
可以看到第一个没什么用，但是第二个比较有意思，这里可以调用回调函数。
> 什么是回调函数？
>
> 通俗的来说，回调函数是一个我们定义的函数，但是不是我们直接来调用，而是通过另一个函数来调用，这个函数通过接收回调函数的名字和参数来实现对它的调用。
看看手册里的说明。
因为是在
    $item[$key] = $value ? $value->getAttr($attr) : null;
对__call()进行的触发，所以此处在__call()中的参数，`$method`是`getAttr()`，`$args`是`$attr`的值。
第一个if中，可以看见styles是可控的。
将`$styles`中的值多添加一个`getAttr()`即可进入
这里跟进类中的`block`方法：
跟进`writeln`(一看就很敏感)
跟进`write`
查看一下`$handle`的用法