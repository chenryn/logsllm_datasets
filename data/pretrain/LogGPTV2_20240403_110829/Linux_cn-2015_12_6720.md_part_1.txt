---
author: icing
category: 系统运维
comments_data:
- date: '2015-12-24 15:48:18'
  message: Not many people use the apache
  postip: 183.131.11.57
  username: 夜域诡士 [Firefox 38.0|GNU/Linux]
- date: '2016-03-03 17:09:30'
  message: 感谢翻译
  postip: 122.61.148.207
  username: 来自新西兰的 Chrome 48.0|Windows 10 用户
- date: '2016-03-17 19:24:21'
  message: 来自UFO的 Chrome 48.0|Windows 10x64 用户!
  postip: 115.56.39.219
  username: 来自河南商丘的 Chrome 48.0|Windows 10 用户
- date: '2016-03-17 21:55:55'
  message: 使用多重代理（虚拟机+linux+torbrowser+lantern+https+VPN），隐藏IP地址！
  postip: 115.56.39.219
  username: 来自河南商丘的 Chrome 48.0|Windows 10 用户
count:
  commentnum: 4
  favtimes: 6
  likes: 0
  sharetimes: 0
  viewnum: 24373
date: '2015-12-11 09:33:00'
editorchoice: true
excerpt: 刚发布的 Apache httpd 2.4.17 终于支持 HTTP/2 了。这个页面给出了一些如何构建/部署/配置的建议。目的是为了大家发现 bugs
  时能升级它，或者给一些能更好工作的建议。
fromurl: https://icing.github.io/mod_h2/howto.html
id: 6720
islctt: true
largepic: /data/attachment/album/201512/10/004228qw58toeoabwe2dpa.jpg
permalink: /article-6720-1.html
pic: /data/attachment/album/201512/10/004228qw58toeoabwe2dpa.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 2544
- displayorder: 1
  raid: 5128
- displayorder: 2
  raid: 6368
- displayorder: 3
  raid: 6551
- displayorder: 0
  raid: 7934
reviewer: ''
selector: ''
summary: 刚发布的 Apache httpd 2.4.17 终于支持 HTTP/2 了。这个页面给出了一些如何构建/部署/配置的建议。目的是为了大家发现 bugs
  时能升级它，或者给一些能更好工作的建议。
tags:
- http/2
- apache
thumb: false
title: 如何在 Apache 中启用 HTTP/2
titlepic: false
translator: ictlyh
updated: '2015-12-11 09:33:00'
---
Copyright (C) 2015 greenbytes GmbH
刚发布的 Apache httpd 2.4.17 终于支持 HTTP/2 了。这个页面给出了一些如何构建/部署/配置的建议。目的是为了大家发现 bugs 时能升级它，或者给一些能更好工作的建议。
最后，这会归并回到官方 Apache 文档，这里只会留下一个到那里的链接。暂时我们还没做到。
![](/data/attachment/album/201512/10/004228qw58toeoabwe2dpa.jpg)
### 源码
你可以从[这里](https://httpd.apache.org/download.cgi)得到 Apache 版本。Apache 2.4.17 及其更高版本都支持 HTTP/2。我不会再重复介绍如何构建该服务器的指令。在很多地方有很好的指南，例如[这里](https://httpd.apache.org/docs/2.4/install.html)。
（有任何这个试验性软件包的相关链接？在 Twitter 上告诉我吧 @icing）
#### 编译支持 HTTP/2
在你编译版本之前，你要进行一些**配置**。这里有成千上万的选项。和 HTTP/2 相关的是：
* **--enable-http2**
启用在 Apache 服务器内部实现该协议的 ‘http2’ 模块。
* **--with-nghttp2=**
指定 http2 模块需要的 libnghttp2 模块的非默认位置。如果 nghttp2 是在默认的位置，配置过程会自动采用。
* **--enable-nghttp2-staticlib-deps**
很少用到的选项，你可能想将 nghttp2 库静态链接到服务器里。在大部分平台上，只有在找不到共享 nghttp2 库时才有用。
如果你想自己编译 nghttp2，你可以到 [nghttp2.org](https://nghttp2.org/) 查看文档。最新的 Fedora 以及其它版本已经附带了这个库。
#### TLS 支持
大部分人想在浏览器上使用 HTTP/2， 而浏览器只在使用 TLS 连接（**https:// 开头的 url**）时才支持 HTTP/2。你需要一些我下面介绍的配置。但首先你需要的是支持 ALPN 扩展的 TLS 库。
ALPN 用来 协商   （    negotiate    ） 服务器和客户端之间的协议。如果你服务器上 TLS 库还没有实现 ALPN，客户端只能通过 HTTP/1.1 通信。那么，可以和 Apache 链接并支持它的是什么库呢？
* **OpenSSL 1.0.2** 及其以后。
* ??? （别的我也不知道了）
如果你的 OpenSSL 库是 Linux 版本自带的，这里使用的版本号可能和官方 OpenSSL 版本的不同。如果不确定的话检查一下你的 Linux 版本吧。
### 配置
另一个给服务器的好建议是为 http2 模块设置合适的日志等级。添加下面的配置：
```
# 放在某个地方的这样一行
LoadModule http2_module modules/mod_http2.so
    LogLevel http2:info
```
当你启动服务器的时候，你可以在错误日志中看来类似的一行：
```
[timestamp] [http2:info] [pid XXXXX:tid numbers] 
  mod_http2 (v1.0.0, nghttp2 1.3.4), initializing...
```
#### 协议
那么，假设你已经编译部署好了服务器， TLS 库也是最新的，你启动了你的服务器，打开了浏览器。。。你怎么知道它在工作呢？
如果除此之外你没有添加其它的服务器配置，很可能它没有工作。
你需要告诉服务器在哪里使用该协议。默认情况下，你的服务器并没有启动 HTTP/2 协议。因为这样比较安全，也许才能让你已有的部署可以继续工作。
你可以用新的 **Protocols** 指令启用 HTTP/2 协议：
```
# 对于 https 服务器
Protocols h2 http/1.1
...
# 对于 http 服务器
Protocols h2c http/1.1
```
你可以给整个服务器或者指定的 **vhosts** 添加这个配置。
#### SSL 参数
对于 TLS （SSL），HTTP/2 有一些特殊的要求。阅读下面的“ https:// 连接”一节了解更详细的信息。
### http:// 连接 (h2c)
尽管现在还没有浏览器支持，但是 HTTP/2 协议也工作在 http:// 这样的 url 上， 而且 mod\_h[ttp]2 也支持。启用它你唯一所要做的是在 Protocols 配置中启用它：
```
# 对于 http 服务器
Protocols h2c http/1.1
```
这里有一些支持 **h2c** 的客户端（和客户端库）。我会在下面介绍：
#### curl
Daniel Stenberg 维护的用于访问网络资源的命令行客户端 curl 当然支持。如果你的系统上有 curl，有一个简单的方法检查它是否支持 http/2：
```
sh> curl -V
curl 7.43.0 (x86_64-apple-darwin15.0) libcurl/7.43.0 SecureTransport zlib/1.2.5
Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp 
Features: AsynchDNS IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz UnixSockets 
```
不好了。这些功能中没有 'HTTP2'。你想要的是下面这样：
```
sh> curl -V
url 7.45.0 (x86_64-apple-darwin15.0.0) libcurl/7.45.0 OpenSSL/1.0.2d zlib/1.2.8 nghttp2/1.3.4
Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp 
Features: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP HTTP2 UnixSockets
```
如果你的 curl 支持 HTTP2 功能，你可以用一些简单的命令检查你的服务器：
```
sh> curl -v --http2 http:///
...
> Connection: Upgrade, HTTP2-Settings
> Upgrade: h2c
> HTTP2-Settings: AAMAAABkAAQAAP__
> 
```
恭喜，如果看到了有 **...101 Switching...** 的行就表示它正在工作！
有一些情况不会发生 HTTP/2 的 升级切换   （    Upgrade    ） 。如果你的第一个请求有 请求数据   （    body    ） ，例如你上传一个文件时，就不会触发升级切换。[h2c 限制](https://icing.github.io/mod_h2/howto.html#h2c-restrictions)部分有详细的解释。
#### nghttp
nghttp2 可以一同编译它自己的客户端和服务器。如果你的系统中有该客户端，你可以简单地通过获取一个资源来验证你的安装：
```
sh> nghttp -uv http:///
[  0.001] Connected
[  0.001] HTTP Upgrade request
...
Connection: Upgrade, HTTP2-Settings
Upgrade: h2c
HTTP2-Settings: AAMAAABkAAQAAP__
...
[  0.005] HTTP Upgrade response
HTTP/1.1 101 Switching Protocols
Upgrade: h2c
Connection: Upgrade
[  0.006] HTTP Upgrade success
...
```
这和我们上面 **curl** 例子中看到的 Upgrade 输出很相似。
有另外一种在命令行参数中不用 **-u** 参数而使用 **h2c** 的方法。这个参数会指示 **nghttp** 进行 HTTP/1 升级切换过程。但如果我们不使用呢？
```
sh> nghttp -v http:///
[  0.002] Connected
[  0.002] send SETTINGS frame 
...
[  0.002] send HEADERS frame 
          ; END_STREAM | END_HEADERS | PRIORITY
          (padlen=0, dep_stream_id=11, weight=16, exclusive=0)
          ; Open new stream
          :method: GET
          :path: /
          :scheme: http
...