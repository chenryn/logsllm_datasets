b) Signature format: A signature under public key
pk comprises of (R, σ) where R ∈ G and σ ∈ Zq. Note that
in practice, some ECDSA/Schnorr implementations will only
contain the x-coordinate of R instead of the whole value. This
is only done for efﬁciency reasons with no implications for
security, and does not affect compatibility with our protocols.
III. DEFINING OFFLINE REFRESH
A notion of ofﬂine refresh that is not a priori too restrictive
or offers too weak a security guarantee is tricky to deﬁne.
Existing deﬁnitions (eg. [3]) require that the refresh procedure
always terminate successfully when honest parties receive the
instruction. This can be viewed as the proactive analog of
the well-studied MPC notion of Guaranteed Output Delivery
(GOD). It is immediate from foundational results on dishonest
majority coin tossing [35] that if there is no honest majority
involved in the refresh procedure that achieves GOD, then
the resulting randomness for proactivization is succeptible to
unacceptable bias.
One may consider instead a proactive analog of the MPC
notion of security with abort. This notion allows the adversary
to abort the computation if it so desires, possibly receiving
output while depriving honest parties of it. Efﬁcient dishonest
majority MPC protocols that achieve security with abort are
known in the literature [36], [37] indicating that this notion
may be the correct one.
the difference being that
However one must be careful when deﬁning exactly what
power to allow the adversary in aborting the refresh procedure.
Security with abort in the standard MPC setting comes with
a ﬁne-grained separation between selective and unanimous
abort [38],
in the former some
honest parties may get output while others not, while in the
latter all honest parties agree on whether or not to abort. In
standard MPC protocol design the choice between these two
security notions offers a meaningful tradeoff: selective abort
while offering strictly weaker security is sufﬁcient for many
applications, and is much more efﬁcient in round complexity
and/or use of broadcast [39]. When translated to the setting
of proactive security however we argue that this distinction
is much more drastic, to the point of making selective abort
patently undesirable.
a) Refresh with Selective Abort is Insufﬁcient: Consider
the following adaptation of security with selective abort: at
the end of the refresh protocol, the adversary has the power
to choose exactly which (honest) parties successfully advance
to the next epoch. This gives the adversary the power to
execute attacks on the honest parties’ private state that were
not feasible without the proactivization protocol. In particular
an adversary could for instance convince one half of the honest
parties to advance to the next epoch while the remaining
honest parties do not. As the parties that advance erase their
state from the previous epoch, their secrets will no longer be
correlated with the parties that do not advance. This means that
even if the system has an honest majority of parties (which
in the static setting means the shared secret can always be
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:17:03 UTC from IEEE Xplore.  Restrictions apply. 
612
reconstructed/used if desired), the refresh procedure gives the
adversary a window to throw the parties out of sync and ‘erase’
the common secret from the system’s distributed state.
Concretely this could translate to attacks where a single
malformed message or network issue causes a threshold wallet
to permanently erase the common secret key, which in many
cases could mean an irreversible loss of funds.
b) Refresh with unanimous erasure: We settle on ‘unan-
imous erasure’ as the correct deﬁnition for proactive security,
as the analog of security with unanimous abort. Informally,
this means that the adversary has the power to decide whether
or not to move to the next epoch, but crucially all honest
parties agree on the epoch with the caveat that they may
not be activated synchronously. Ofﬂine refresh is captured
by allowing the adversary to advance the epoch arbitrarily
many times (and even change corruptions) without activating
all honest parties, however any honest party if activated must
‘catch up’ non-interactively to the current epoch.
c) Corruption Caveats: Deﬁning a meaningful model
that allows different parties to stay “ofﬂine” (and therefore
effectively exist in different epochs at the same time) while
simultaneously honouring the assumption that only a threshold
number of parties are corrupt at any given epoch requires
particular care. We handle this issue by requiring that the ad-
versary allows a party to “update” before corrupting it. While
this appears to weaken the model, a deﬁnition without this
restriction would be inherently unachievable, as an adversary
would be able to effectively “travel in time”. For instance, if
some party P is ofﬂine from epoch i onward, an adversary
who corrupts it after the the system has progressed to epoch
i + 1 will obtain this party’s state at epoch i even after that
epoch has passed. This would be problematic if the adversary
had already corrupted (and subsequently uncorrupted) t − 1
different parties at epoch i, as gaining P ’s state for epoch i will
completely reveal the system’s secrets, all without violating the
assumption that only t− 1 parties may be corrupt at any given
point in time. See the paragraph on Corruptions in the formal
deﬁnition that follows for further discussion.
d) Parameters: The system consists of n parties, of
which t are necessary to operate by accessing the secret.
The adversary may corrupt at most t−1 parties. The refresh
procedure is run by activating tρ parties.
With these security notions in mind, we formalize the
deﬁnition of proactive security with unanimous erasure and
ofﬂine refresh in the UC model.
A. UC Deﬁnition
We build on the deﬁnition of Almansa et al. [3] to a notion
of mobile adversaries that accommodates ‘ofﬂine’ parties. We
do this by having each party maintain a counter epoch written
on a special tape, and deﬁne the state of the system relative
to these epoch values. While in our deﬁnition the adversary
Z may choose to activate parties in sequences that leave them
in different epochs, the deﬁnition of Almansa et al. does not
permit this. In particular their deﬁnition requires all honest
parties to ﬁrst agree that they have all successfully reached
the latest epoch before the adversary is permitted to change
corruptions.
a) Epochs: Each party has a special “epoch tape” on
which it writes an integer epoch. At the start of the protocol,
this tape contains the value 0 for all honest parties. We use
the term “system epoch” to refer to the largest epoch value
written on any honest party’s tape.
b) Operations: There are two kinds of commands that
the environment Z can send to a party: operate, refresh,
and update. Intuitively operate corresponds to use of
the system’s service, refresh the candidate proactivization
generation, and update the application of this proactivization
to rerandomize parties’ private state. The operate command
will be issued to t parties simultaneously (in any realization
this will require them to interact), refresh to tρ parties (also
requiring interaction), and operate will be individual and
non-interactive in its realization.
c) Non-degeneracy: Upon being given the refresh
command, an honest party must write the current system epoch
on its epoch tape. In order to rule out degenerate realizations,
we also require that if any t honest parties are given the
operate command, the next refresh command sent to
an honest party P will result
in the system epoch being
incremented.
d) Corruptions: At any given time, there can be at most
t − 1 parties controlled by Z. Mobility of corruptions must
adhere to the following rule: Z may decide to “uncorrupt” a
party P at any time, however before corrupting a new party
P (cid:48) ∈ (cid:126)P it must ﬁrst “leave” P , then send refresh to any tρ
parties without aborting (i.e. increments the epoch counter),
and ﬁnally update to P (cid:48) before being given its internal state
(and full control over subsequent actions). Note that omitting
this ﬁnal update message (i.e. allowing Z to corrupt P (cid:48)
before it has refreshed) will give Z the views of both P and
P (cid:48) from the same system epoch, in which case the system
will be fully compromised. This is implied by any standard
deﬁnition of proactive security. In fact, our revised deﬁnition
grants Z more power than that of Almansa et al. [3], as here
not every party need refresh before Z changes corruptions.
Crucially we allow the system epoch to be pushed forward
by any tρ parties, i.e. consecutive epoch increments may be
enabled by completely non-overlapping sets of parties. This
captures our notion of “ofﬂine refresh” where not all parties
in the system need be online to move the system forward; any
tρ parties can keep the epoch counter progressing while the
others catch up at their own speed.
e) Ofﬂine-refresh must be non-interactive: A direct im-
plication of our deﬁnition is that one can not wait for ofﬂine
parties to respond before incrementing the epoch counter,
which captures the spirit of the problem at hand.
IV. INSTANTIATING OFFLINE REFRESH
With the model and deﬁnitions in place, we now incremen-
tally work towards our protocol via a sequence of stepping
stones to introduce which tools we use and why.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:17:03 UTC from IEEE Xplore.  Restrictions apply. 
613
A. Simple Honest Majority Instantiation
We begin by sketching a ‘baby protocol’ for proactive secret
sharing with tρ = 2t− 1 and n = tρ + 1, i.e. where the refresh
protocol is run by an honest majority of online parties and one
party (labelled Poﬀ) stays ofﬂine.
a) Network: It is immediate that a necessary underlying
assumption is a forward secure channel that supports delivery
to ofﬂine parties. Formally, this is captured by having ofﬂine
parties accumulate messages in a buffer that they read when
they become online. In practice an ofﬂine party may not
literally be disconnected from the network and need a buffer,
just that the refresh protocol does not require its participation.
Alternatively message delivery may be aided by a server as in
the Signal protocol [40], [41]. We assume that the tρ online
parties share a broadcast channel (which is not necessarily
visible to Poﬀ).
b) Protocol Sketch: Roughly, the protocol works by ﬁrst
having the online tρ parties compute an independent re-sharing
of the common secret sk by sampling a fresh degree t − 1
polynomial f over Zq such that f (0) = sk and setting
polynomial F over G such that F (i) = f (i) · G. Following
this they compute a re-sharing of the new share of Poﬀ by
sampling f(cid:48) such that f(cid:48)(0) = f (oﬀ) and set F (cid:48) such that
F (cid:48)(i) = f(cid:48)(i) · G. Each Pi sends f(cid:48)(i), F, F (cid:48) to Poﬀ, who
takes the most frequently occurring F, F (cid:48) to be the correct one
(guaranteed to be unambiguous due to an honest majority) and
interpolates f(cid:48)(0) = f (oﬀ). This always succeeds as t honest
online parties equates to t evaluations reliably communicated
on a degree t − 1 polynomial. As we do not implement the
protocol, we defer details to the full version of this paper.
Hence we have shown that ofﬂine refresh is easy to satisfy
in the presence of an online honest majority.
B. Dishonest Majority with Ofﬂine Broadcast
Folklore techniques such as Cleve [35] give strong evidence
that unanimous erasure in a (2, 3) system is impossible to
achieve over private channels alone. We give a rough sketch
here as to why this is the case.
Consider a system comprising P0, P1, Poﬀ in which Poﬀ
is ofﬂine, one of P0 or P1 may be corrupt, and the honest
party and Poﬀ must either agree on a random bit (successful
termination) or agree to abort. The non-degeneracy require-
ment is that an honest execution does not induce an abort.
Additionally the parties have access to arbitrary correlated
randomness generated in some ofﬂine phase, which rules out
direct application of the t < n/3 consensus lower bound [42].
This system and its constraints captures a simpliﬁed notion of
unanimous erasure.
We will argue that if P0 is corrupt, then P1 and Poﬀ can not
meet the constraints of the system. Observe that in the event
of successful termination the private communication from P0
to Poﬀ is by itself sufﬁcient to ‘convince’ Poﬀ not to abort;
if this were not true then a corrupt P1 could simply erase
its entire private channel, which forces Poﬀ to abort while
honest P0 who is unaware of this terminates successfully.
We call a transcript from either one of P0 or P1 to Poﬀ as
‘convincing’ if it induces Poﬀ to terminate successfully with
an output bit instead of aborting. Without loss of generality
there must be some round in the protocol where P0 gains
the ability to produce a convincing transcript, but P1 has not
yet acquired this ability (either party having this ability from
round 0 would clearly admit trivial attacks). Therefore if P0
simply halts the protocol with P1 at this point, P1 will have
no way of knowing whether P0 will choose to convince Poﬀ
to abort or to terminate successfully.
a) Ofﬂine Broadcast: In order to overcome this challenge
we introduce a powerful notion of an ‘ofﬂine broadcast chan-
nel’, which is a broadcast channel shared by P0, P1, Poﬀ but
crucially is invisible to the adversary if none of the parties are
corrupt. Our ﬁnal protocol will not use so strong a tool, but
it provides an instructive stepping stone.
b) Leaking the Difference Polynomial: We observe that
any proactivization protocol where an adversary corrupts t
parties has the following property: deﬁne fδ(i) = f(cid:48)(i)−f (i),
i.e. the polynomial that encodes the difference between old and
new shares. Given f (i), f(cid:48)(i) for any t− 1 values of i (which
the adversary has by virtue of corrupting t − 1 parties) one
can compute fδ(x) for any x. This is because fδ(0) = 0 (as
f (0) = f(cid:48)(0)) and fδ is a degree t − 1 polynomial of which
one now has t points.
Given an ofﬂine broadcast channel, designing a refresh
protocol for P0, P1, Poﬀ using the above observation is as
simple as sampling the difference polynomial on the broadcast
channel. In particular the refresh protocol proceeds as follows:
1) P0 samples a uniform fδ,0 and ofﬂine-broadcasts a com-
mitment to fδ,0.
2) P1 samples a uniform fδ,1 and ofﬂine-broadcasts it.
3) P0 decommits fδ on the ofﬂine-broadcast channel.
4) Each party (either immediately, or upon waking up)
deﬁnes fδ = fδ,0 + fδ,1 and updates its local share as
f(cid:48)(i) = f (i) + fδ(i)
It is clear that the above ofﬂine refresh protocol tolerates a
mobile malicious adversary that corrupts at most one party
at any given time (which is optimal in a t = 2 system).
In particular the ofﬂine broadcast channel allows for the
following properties:
• The online parties and Poﬀ use the same criteria to
compute fδ and so are always in agreement.
• Since the ofﬂine broadcast channel is invisible to the
adversary when switching corruptions, the uniform choice
of fδ ensures that
the resulting refreshed polynomial
is distributed independently of any parties’ view from
earlier.
Unfortunately this ofﬂine broadcast primitive is an unrea-
sonably strong assumption to make in practice. Broadcast
is either implemented via interactive protocols, or inherently
public when using a ledger/blockchain. We therefore carefully
design a protocol that somewhat achieves the effect of this
ofﬂine broadcast channel; we will use private channels to
communicate candidate fδ values along with a public ledger
to reach agreement on whether or not to use them, and rely on
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:17:03 UTC from IEEE Xplore.  Restrictions apply. 
614
the intrinsic entropy of certain common threshold signatures
to bind the public and private components.
c) A Note on Parameters: As our subsequent construc-
tions are explicitly for t = tρ = 2, we drop the t, tρ notation
until we revisit the general multiparty setting in Section X.
V. THRESHOLD SIGNATURE ABSTRACTION
A threshold signature scheme [1] allows the power of
producing a digital signature to be delegated to multiple
parties, so that a threshold number of them must work together
in order to produce a signature. Speciﬁcally a (t, n) signature
scheme is a system in which n parties hold shares of the
signing key, of which any t must collaborate to sign a message.
In this section we focus on (2, n) threshold versions of the
ECDSA [43] and Schnorr [10] Signature schemes. As our
techniques are general and not speciﬁc to any one threshold
signature scheme, we use an abstraction of such protocols for
ease of exposition.
A. Abstraction
Sign,πσ
Setup(κ)
Sign(pk, skb, 1 − b, m)
Sign) of the following formats:
We assume that a (2, n) threshold signature over group
(G, G, q) can be decomposed in a triple of algorithms
(πDKG
Setup,πR
• (ski ∈ Zq, pk ∈ G) ← πDKG
This protocol is run with n parties and has each honest
party Pi obtain public output pk and private output ski. In
addition to this, there must exist a degree-1 polynomial
f over Zq such that ∀i ∈ [n], ski = f (i).
• (R ∈ G, stateb ∈ {0, 1}∗) ← πR
Run by party Pb with P1−b as counterparty,