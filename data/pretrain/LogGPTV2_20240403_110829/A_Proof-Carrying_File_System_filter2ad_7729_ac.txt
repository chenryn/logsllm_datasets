If an administrator k creates a rule represented
Representation of policy in BL.
by formula s, and puts it in a certiﬁcate that is valid from time u1 to time u2, then this
rule is reﬂected in BL as the assumption k claims s ◦ [u1, u2]. In addition, we require
that each rule be accompanied by a unique name (a string), which is written in the
certiﬁcate with the rule. This name is used to refer to the assumption in proofs. The
whole policy has the general form Γ = {xi : ki claims si ◦ [ui, u(cid:48)
i] | 1 ≤ i ≤ n}, where ki’s
are administrators, and xi’s are unique names for the rules of the policy.
What should be proved? We assume the existence of one distinguished administra-
tor, symbolically denoted admin, who has the ultimate authority on access. In order to
get permission η on ﬁle f at time u, user k must prove that the policy in eﬀect entails
the deﬁned judgment auth(k, f, η, u), where:
auth(k, f, η, u) (cid:44) (admin says may(k, f, η)) ◦ [u, u]
may is a ﬁxed uninterpreted predicate taking three arguments, and u is the time of access
([u, u] is a singleton set containing exactly the time point u).
When we start constructing a proof in BL at the top level, the exact view α does
not matter. Further the set Ψ is empty, and Σ is a ﬁxed map provided externally. To
get access it must be shown that: Σ;·; E; Γ α−→ auth(k, f, η, u), where α is a view made
of fresh constants, Γ is the policy, u is the time of access, and E is the environment at
time u.
10
Usually, admin delegates part of its authority to other administrators through rules.
Also, in most policies, admin may have authority over the predicate may but not others.
For this reason, it is advisable to keep admin distinct from (cid:96), the strongest principal
whom everyone believes on every predicate.
Interpreted Predicates. BL natively supports two interpreted predicates, although
support for other predicates can be added easily. These two predicates are: owner(f, k),
which means that ﬁle f has owner k, and has xattr(f, a, v), which means that ﬁle f has
value v for the extended attribute user.#pcfs.a. Extended attributes beginning with
the preﬁx user.#pcfs. are specially protected by PCFS (a special permission called
“govern” is needed to change them). These attributes can be used to label ﬁles in a
secure manner, as we illustrate in the following example.
Interpreted predicates are
written in boldface to distinguish them from others.
Example 1. We present a fragment of a case study that uses BL to model policies for
control and dissemination of classiﬁed ﬁles in the U.S. Consider a hypothetical intelli-
gence agency where each ﬁle and each user is assumed to have a classiﬁcation level, which
is an element of the ordered set conﬁdential < secret < topsecret. The classiﬁcation level
of a ﬁle is assumed to be written in an extended attribute user.#pcfs.level on the
ﬁle. We also assume one distinguished administrator (in addition to admin) called hr
who is responsible for deciding attributes of users (e.g., giving them classiﬁcation levels
and employment certiﬁcations).
In order that principal k may read ﬁle f, three conditions must be satisﬁed: (a) k
should be an employee of the intelligence organization (predicate employee(k)), (b) k
should have a classiﬁcation level above the ﬁle (predicate hasLevelForFile(k, f)), and
(c) k should get permission from the owner of the ﬁle. Let us assume that this rule came
in eﬀect in 2000, and will remain in eﬀect till 2010. The following rule (created by admin)
captures this intent. For readability, we omit all sort annotations from quantiﬁers.
admin claims ∀k, k(cid:48), f.
(((hr says employee(k)) ∧
hasLevelForFile(k, f) ∧
owner(f, k(cid:48)) ∧
(k(cid:48) says may(k, f, read))) ⊃ may(k, f, read))
(1)
(2)
◦ [2000, 2010]
The predicate hasLevelForFile(k, f) may further be deﬁned by admin in terms of
classiﬁcation levels of k and f.
admin claims ∀k, f, l, l(cid:48).
((has xattr(f, level, l) ∧
(hr says levelPrin(k, l(cid:48))) ∧
below(l, l(cid:48))) ⊃ hasLevelForFile(k, f))
◦ [2000, 2010]
It is instructive to observe the use of the interpreted predicates owner and has xattr
in these rules. The predicate below(l, l(cid:48)) captures the order l < l(cid:48) between classiﬁcation
levels. We assume that all principals believe this order. Hence it is stated by the
strongest principal (cid:96).
11
(3) (cid:96) claims below(conﬁdential, secret) ◦ [2000, 2010]
(4) (cid:96) claims below(secret, topsecret) ◦ [2000, 2010]
(5) (cid:96) claims below(conﬁdential, topsecret) ◦ [2000, 2010]
As an illustration of the use of this policy, let us assume that ﬁle /secret.txt is owned
by Alice (user id 1003) and classiﬁed at the level secret. Thus the following must hold
in the prevailing ﬁle system state E:
(A) E |= owner(/secret.txt, uid 1003)
(B) E |= has xattr(/secret.txt, level, secret)
Suppose further that Bob (user id 1500) is an employee cleared at level topsecret from
2007 to 2009, and that Alice wants to let Bob read ﬁle /secret.txt from 2008 to 2009.
This information may be captured by the following formulas (signed by the respective
principals).
(6) hr claims employee(uid 1500) ◦ [2007, 2009]
(7) hr claims levelPrin(uid 1500, topsecret) ◦ [2007, 2009]
(8) (uid 1003) claims may(uid 1500, secret.txt, read)
◦ [2008, 2009]
Let Γ denote the set of policy rules (1)–(8) (with corresponding names p1–p8), and let Σ
be a map that deﬁnes the constants used in the policy. Then using the rules of Figure 2
we can show that there is a proof term M such that M :: Σ;·; E; Γ α−→ (admin says
may(uid 1500, /secret.txt, read)) ◦ [2008, 2009], if E satisﬁes the conditions (A) and (B).
From Theorem 3.2 it follows that M :: Σ;·; E; Γ α−→ auth(uid 1500, /secret.txt, read, u)
whenever u ∈ [2008, 2009], and hence Bob should be able to read /secret.txt from 2008
to 2009. This is what we may intuitively expect because the intersection of the validities
of all certiﬁcates issued here is exactly [2008, 2009].
4 PCFS Front End: Proof Search and Veriﬁcation
Having discussed the syntax and proof system of BL, we now turn to its implementation
in proof search and proof veriﬁcation tools. We start by describing the proof search tool
brieﬂy, and then turn to the proof veriﬁcation tool and the structure of procaps.
4.1 Automatic Proof Search
Even though users are free to construct proofs of access by any means they like, PCFS
provides a command line tool called pcfs-search for performing this task automatically.
As discussed in Section 3, the objective is to prove a judgment of the form Σ;·; E; Γ α−→
(admin says may(k, f, η)) ◦ [u, u], where u is the expected time of access, and E is the
expected environment at time u. Of course, in almost all cases, it is unreasonable to
expect that the time of access can be predicted in advance to the precision of seconds
(which is the precision at which enforcement of time works in PCFS), so instead of
12
an exact time u, the user provides a range of time [u1, u2] during which she desires
access. Similarly, since the environment E at time u may also be diﬃcult to predict, the
environment at the time of proof construction is used as a proxy. The prover can also
be run in interactive mode, where it asks for user input about the expected environment
if it fails to construct a proof in the prevailing one.
The user must also provide the parameters k, f, η and the policy Γ (in the form of
certiﬁcates obtained from administrators). The output of the tool is the proof term
M such that M :: Σ;·; E; Γ α−→ (admin says may(k, f, η)) ◦ [u1, u2]. By Theorem 3.2 it
follows that M :: Σ;·; E; Γ α−→ auth(k, f, η, u) for every u ∈ [u1, u2], so this proof term
M can be used for access at any time point in the interval [u1, u2].
Proof search in BL is in general an undecidable problem because BL extends ﬁrst-
order intuitionistic logic, which is itself undecidable. However, as past work on languages
and logics for authorization shows [10, 11, 14, 26, 30], most access policies in practice
ﬁt into a restricted fragment of logic on which logic programming techniques can be
used for proof construction. Although logic programming methods work fast, extending
them from fragments of ﬁrst-order logic (where they are well understood) to BL’s ad-
ditional constructs – k says s, s @ [u1, u2], constraints, and interpreted predicates – is
a challenging task. The @ modality is particularly diﬃcult to handle since it interacts
with all other connectives of BL in non-trivial ways. We omit a description of the proof
search method, but refer the reader to prior work for details [17].
4.2 Proof Veriﬁcation and Procaps
The proof veriﬁer checks proofs that a user constructs and issues procaps in return.
Since these procaps can be directly used for access, the proof veriﬁer is a trusted piece
of code. Brieﬂy, the proof veriﬁer is invoked with a command line tool pcfs-verify.
It is given as input the policy Γ (in the form of signed certiﬁcates), the parameters k,
f, η, and a proof term M. The veriﬁer ﬁrst checks that the policy is correct, i.e., all
its certiﬁcates have authentic digital signatures. For this, the veriﬁer must have access
to some public key infrastructure (PKI) that maps public keys to principals that own
them. We use a simple PKI, with a single certifying authority (CA) that certiﬁes all
keys. The public key of the CA is stored in a specially protected ﬁle in PCFS itself (see
Section 5).
Second, the veriﬁer checks the logical structure of the proof term, i.e., it makes
sure that it is the case that M :: Σ;·; E; Γ α−→ auth(k, f, η, u). Checking a logical proof
is mostly standard; it works on the observation that the proof term (together with
the policy) is enough to reconstruct the structure of the entire proof. Once this step
succeeds, the veriﬁer outputs for the user a signed capability, which contains the tuple
(cid:104)k, f, η(cid:105). There are three subtleties here.
1. How does the veriﬁer get access to the secret key needed to sign the procap? (Or,
what prevents users from accessing the key and forging procaps?)
2. What ﬁle system state E is the proof checked in? This is relevant because it should
never be the case that a proof successfully checks in some state E but the resulting
procap is used in a state where the proof veriﬁcation would have failed.
3. How does the procap reﬂect the time interval over which the proof is valid?
13
To address problem (1), we use a simple method. The secret key is stored in a specially
marked ﬁle in the PCFS ﬁle system. The ﬁle system interface ensures that only a
speciﬁc user id (called pcfssystem) has read access to this ﬁle. The veriﬁcation tool
pcfs-verify’s disk ﬁle is owned by this user, and executes with a set-uid bit. As a
result, when a user invokes this program, it runs with pcfssystem’s user id, and hence
gets access to this key.
Problem (2) is addressed by never checking interpreted predicates during proof ver-
iﬁcation.
Instead, when the veriﬁer encounters the proof term pf sinjI, which cor-
responds to an application of the rule (interI) from Figure 2, the veriﬁer writes the
interpreted predicate i to be checked in the output procap. This predicate must then be
checked by the ﬁle system backend when the procap is used. As a result, any interpreted
predicates on which the validity of the proof depends are transferred unchanged to the
procap, and are checked in the state prevalent at the time of access (see Appendix B for
details).
To address problem (3), we use a special symbolic constant ctime, which has sort
time, and is supposed to represent the actual time at which access is requested. The
veriﬁer tries to check that M :: Σ, ctime:time;·;·; Γ α−→ auth(k, f, η, ctime). Observe that
the time of access u is replaced by this symbolic constant. During the veriﬁcation, many
judgments of the form Ψ |= u1 ≤ u2 are encountered (e.g., in the rules (hyp), (claims),
(⊃E), and (consI)) where either Ψ, u1, or u2 contains ctime. If this happens, then instead
of verifying the judgment using the external decision procedure, it is written into the
output procap. During ﬁle access, the ﬁle system backend substitutes the actual time of
access for the constant ctime in the judgment and checks it (see Appendix B for details).
Symbolic constants similar to ctime have been used to represent access policies in
the past [8, 10]. However, in each of these cases, the constant is a part of the logic and
can be used within a policy (similar to our interpreted predicates). In contrast, we use
the constant as an enforcement technique only; time in the logic is represented using
the @ connective.
Procap structure.
In summary, a procap contains four components (cid:104)ψ,(cid:126)i, (cid:126)C, Ξ(cid:105), where
- ψ = (cid:104)k, f, η(cid:105) is a three-tuple that lists the principal, ﬁle, and permission that the
procap authorizes.
- (cid:126)i is a list of interpreted predicates on which the veriﬁed proof depends (point (2)
above).
- (cid:126)C is a list of judgments Ψ |= u1 ≤ u2 that contain the constant ctime, and on
which the proof depends (point (3) above). In most cases Ψ is ·.
- Ξ is a cryptographic signature over the ﬁrst three components. This guarantees
the procap’s authenticity.
Procap veriﬁcation. Before admitting a procap, the ﬁle system backend must check
not only its signature Ξ, but also the interpreted predicates (cid:126)i (in the state prevalent
at the time of access) and the constraint judgments in the list (cid:126)C (with ctime substi-
tuted by the actual time of access). The following (informally stated) theorem shows
that these checks guarantee that the proof in lieu of which the procap was obtained
14
authorizes the operation at the actual time of access. A precise formalization of the
veriﬁcation procedure, a formal statement of this theorem, and its proof are presented
in Appendix B.
Theorem 4.1 (Enforcement correctness). Suppose that the veriﬁcation of a proof term
M which establishes the right ψ = (cid:104)k, f, η(cid:105) from policy Γ results in a procap (cid:104)ψ,(cid:126)i, (cid:126)C, Ξ(cid:105).
Further let E be a ﬁle system state, which occurs at some time u, and assume that:
1. For each i ∈ (cid:126)i, E |= i
2. For each (Ψ |= u1 ≤ u2) ∈ (cid:126)C, Ψ[u/ctime] |= c[u/ctime]
Then, M :: Σ;·; E; Γ α−→ auth(k, f, η, u).
Example 2. At the end of Example 1, we constructed a proof term M which estab-
lished E; Γ α−→ (admin says may(uid 1500, /secret.txt, read)) ◦ [2008, 2009], where E was
required to satisfy the two conditions (A) and (B). If we give this proof term to our
proof veriﬁer, the resulting procap has the structure (cid:104)ψ,(cid:126)i, (cid:126)C, Ξ(cid:105), where
- ψ = (cid:104)uid 1500, /secret.txt, read(cid:105)
- (cid:126)i = owner(/secret.txt, uid 1003), has xattr(/secret.txt, level, secret)
- (cid:126)C = · |= 2008:01:01:00:00:00 ≤ ctime, · |= ctime ≤ 2009:12:31:23:59:59
The predicates in list (cid:126)i imply that the procap is valid only in a state where /secret.txt is
owned by Alice, and it has extended attribute user.#pcfs.level set to secret. These
correspond exactly to conditions (A) and (B) from Example 1, and are necessary for the
proof term M to be valid. The list (cid:126)C means that the time of access ctime must lie in
the interval [2008, 2009], which is also what we may expect from the policy rules.
Certiﬁcate Revocation. A revocation refers to the withdrawal of a policy rule or fact
after it has been created but before it expires. Revocations are an issue for enforcement
because proofs and procaps depending on a revoked statement may already have been
generated. There are two simple ways to enforce revocations using procaps, both of
which we describe brieﬂy. (The current implementation of PCFS does not implement
revocation, but either of these methods is easy to add.)
- A list of unique ids of certiﬁcates on which a proof depends can be included in
the procap generated from it. Before admitting a procap, the ﬁle system backend
can compare the list of certiﬁcate ids in it to a list of revoked certiﬁcates provided
by administrators. If there is an overlap, the procap can be rejected. Although
this method would enforce revocation perfectly, it would also slow down ﬁle access
because an additional check must be performed on each procap.
- Alternatively, the list of revoked certiﬁcates can be provided to the proof veriﬁer
instead of the ﬁle system backend. The veriﬁer can then refuse to accept any proof
that depends on revoked certiﬁcates. If the veriﬁer issues a procap, it can be short
lived, i.e., its validity can be restricted to a short duration T using a constraint on
ctime. Although the eﬀect of revocation in this method is not immediate (it can
lag by a time T ), the ﬁle system backend does not get involved, so its performance
is not aﬀected.
15
5 PCFS Backend
Whereas the front end of PCFS is used to generate procaps from proofs of access, the
backend grants access to ﬁles and directories using the procaps to check access rights.
The two ends are linked by procaps only; indeed the backend of the ﬁle system is entirely
agnostic to the logic used. If we had a diﬀerent logic for writing the policy, we could
use the same backend, so long as the logic’s proof veriﬁer generated the same procaps.
Since the backend is called at every single ﬁle access, it needs to be extremely eﬃcient.
In this section, we discuss its design and implementation.
Overall architecture. The PCFS backend is implemented as a process server, which
listens to upcalls made by the kernel module Fuse. The latter happens whenever a
process makes a system call to access a ﬁle or directory within the mount path of PCFS.
Depending on the operation requested, a speciﬁc handling function is invoked. There is
one function for every POSIX ﬁle system operation like open, read, write, stat, unlink,
rmdir, mkdir, etc. This handling function looks up and checks procaps corresponding
to permissions needed to perform the operation. If the checks succeed, it invokes an
identical ﬁle system call, but on a diﬀerent mount path, which is actually an ext3 ﬁle