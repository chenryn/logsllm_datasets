```
你将看到一个屏幕，询问你的 Nginx 构建中要包含哪些模块。对于这个项目，你需要添加 RTMP 模块。向下滚动直到选中 RTMP 模块，并按下空格键。然后按回车键继续剩下的构建和安装。
Nginx 安装完成后，就该为它配置流式传输了。
首先，在 `/etc/rc.conf` 中添加一个条目以确保 Nginx 服务器在系统启动时启动：
```
nano /etc/rc.conf
```
将此文本添加到文件中：
```
nginx_enable="YES"
```
![](/data/attachment/album/202201/08/102946crrhghmgnnyd3qg5.png)
接下来，创建一个网站根目录，Nginx 将从中提供其内容。我自己的目录叫 `stream`：
```
cd /usr/local/www/
mkdir stream
chmod -R 755 stream/
```
现在你已经创建了你的流目录，通过编辑配置文件来配置 Nginx：
```
nano /usr/local/etc/nginx/nginx.conf
```
在文件顶部加载你的流媒体模块：
```
load_module /usr/local/libexec/nginx/ngx_stream_module.so;
load_module /usr/local/libexec/nginx/ngx_rtmp_module.so;
```
![](/data/attachment/album/202201/08/102946q29allttdl7atwxk.png)
在 `Server` 部分下，更改 `root` 位置以匹配你之前创建的目录位置：
```
Location / {
  root /usr/local/www/stream
}
```
![](/data/attachment/album/202201/08/102947fohorivi7ik17ozj.png)
最后，添加你的 RTMP 设置，以便 Nginx 知道如何处理你的媒体流：
```
rtmp {
  server {
    listen 1935;
    chunk_size 4096;
    application live {
      live on;
      record off;
    }
  }
}
```
保存配置。在 Nano 中，你可以通过快捷键 `Ctrl+X`、`Y`，然后按回车键来执行此操作。
如你所见，这么一个非常小的配置将创建一个工作的流服务器。稍后，你将添加更多内容到此配置中，但这将为你提供一个很好的起点。
但是，在开始第一个流之前，你需要使用新配置重新启动 Nginx：
```
service nginx restart
```
### 设置你的流媒体软件
#### 使用 OBS 进行广播
现在你的服务器已准备好接受你的视频流，是时候设置你的流媒体软件了。本教程使用功能强大的开源的 Open Broadcast Studio（OBS）。
前往 [OBS 网站](https://obsproject.com/)，找到适用于你的操作系统的版本并安装它。OBS 启动后，你应该会看到一个首次运行向导，该向导将帮助你使用最适合你的硬件的设置来配置 OBS。
![](/data/attachment/album/202201/08/102947q8qzoo0rb28rau23.png)
OBS 没有捕获任何内容，因为你没有为其提供源。在本教程中，你只需为流捕获桌面。单击“ 来源   Source ”下的 “+” 按钮，选择“ 显示捕获   Screen Capture ”，然后选择要捕获的桌面。
单击“ 确定   OK ”，你应该会看到 OBS 镜像了你的桌面。
现在可以将你新配置的视频流发送到你的服务器了。在 OBS 中，单击“ 文件 &gt; 设置   File &gt; Settings ”。 单击“ 流   Stream ”部分，并将“ 串流类型   Stream Type ” 设置为“ 自定义流媒体服务器   Custom Streaming Server ”。
在 URL 框中，输入前缀 `rtmp://` 后跟流媒体服务器的 IP 地址，后跟 `/live`。例如，`rtmp://IP-ADDRESS/live`。
接下来，你可能需要输入“ 串流密钥   Stream key ”，这是观看你的流所需的特殊标识符。 在“ 串流密钥   Stream key ”框中输入你想要（并且可以记住）的任何关键词。
![](/data/attachment/album/202201/08/102947x7b272iobmf7vbvw.png)
单击“ 应用   Apply ”，然后单击“ 确定   OK ”。
现在 OBS 已配置为将你的流发送到你的服务器，你可以开始你的第一个视频流。 单击“ 开始推流   Start Streaming ”。
如果一切正常，你应该会看到按钮更改为“ 停止推流   Stop Streaming ”，并且在 OBS 的底部将出现一些带宽指标。
![](/data/attachment/album/202201/08/102948usll78du6hmf6sbr.png)
如果你收到错误消息，请仔细检查 OBS 中的流设置是否有拼写错误。如果一切看起来都不错，则可能是另一个问题阻止了它的工作。
### 观看你的视频流
如果没有人观看，就说明直播视频不是很好，所以请成为你的第一个观众！
有许多支持 RTMP 的开源媒体播放器，但最著名的可能是 [VLC 媒体播放器](https://www.videolan.org/vlc/index.html)。
安装并启动 VLC 后，通过单击“ 媒体 &gt; 打开网络串流   Media &gt; Open Network Stream ” 打开你的流。输入你的流的路径，添加你在 OBS 中设置的串流密钥，然后单击“ 播放   Play ”。 例如，`rtmp://IP-ADDRESS/live/SECRET-KEY`。
你现在应该可以看到自己的实时视频流了！
![](/data/attachment/album/202201/08/102948s44c1wx6mwxxctpt.png)
### 接下来要做什么？
本项目是一个非常简单的设置，可以让你开始工作。 以下是你可能想要使用的另外两个功能。
* **限制访问：** 你可能想要做的下一件事情是限制对你服务器的访问，因为默认设置允许任何人与服务器之间进行流传输。有多种设置方法，例如操作系统防火墙、[.htaccess 文件](https://httpd.apache.org/docs/current/howto/htaccess.html)，甚至使用 [STMP 模块中的内置访问控制](https://github.com/arut/nginx-rtmp-module/wiki/Directives#access)。
* **录制流：** 这个简单的 Nginx 配置只会流传输而不会保存你的视频，但这很容易修改。在 Nginx 配置文件中的 RTMP 部分下，设置录制选项和要保存视频的位置。确保你设置的路径存在并且 Nginx 能够写入它。
```
application live {
  live on;
  record all;
  record_path /var/www/html/recordings;
  record_unique on;
}
```
实时流媒体的世界在不断发展，如果你对更高级的用途感兴趣，可以在互联网上找到许多其他很棒的资源。祝你好运，直播快乐！
---
via: 
作者：[Aaron J.Prisk](https://opensource.com/users/ricepriskytreat) 选题：[lujun9972](https://github.com/lujun9972) 译者：[Starryi](https://github.com/Starryi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出