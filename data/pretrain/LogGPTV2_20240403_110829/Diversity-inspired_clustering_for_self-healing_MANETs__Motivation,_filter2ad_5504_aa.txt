title:Diversity-inspired clustering for self-healing MANETs: Motivation,
protocol, and performability evaluation
author:Ann T. Tai and
Kam S. Tso and
William H. Sanders
Diversity-Inspired Clustering for Self-Healing MANETs: Motivation, Protocol,
and Performability Evaluation
Ann T. Tai† Kam S. Tso‡
IA Tech, Inc.
Los Angeles, CA 90094
Abstract
Swarm systems, which typically comprise a large num-
ber of lightweight mobile components, must be capable of
self-healing.
In this paper, we propose a self-organizing,
self-healing framework called “superimposed” clustering
for such systems. The framework makes a signiﬁcant depar-
ture from traditional clustering algorithms that apply a sin-
gle policy to form clusters through iterations. Speciﬁcally,
our superimposed clustering protocol (SCP) selects a pair
of diversiﬁed clustering polices to simultaneously build two
sets of clusters, which we view as two cluster layers with
one on top of the other. Via redundancy shadowing, SCP
is able to extract and combine the complementary portions
of the two layers to form a clustered network such that the
vast majority of nodes can be organized through a single
round. Moreover, SCP exploits shadow redundancy to en-
able gracefully degradable clustering coverage to mitigate
cluster damage caused by node failure, death, or migration.
We present the notion of superimposed clustering by devis-
ing a protocol and conducting a performability evaluation.
1
Introduction
Fast-advancing micro- and nano-electro-mechanical
technologies have enabled the creation of systems consist-
ing of hundreds of small mobile components (e.g., micro-
scale robots, rovers, and UAVs). Those systems are often
called swarm systems (see [1, 2], for example).
Typical applications of swarm systems include micro-
robot swarms for natural disaster rescue, relief, and recov-
ery; micro-robot teams for detection of potential biologi-
cal, chemical, or radiological threats to homeland security;
and micro-rover groups for sample-return deep-space ex-
ploration missions. Not surprisingly, those applications are
built over mobile ad hoc wireless networks (MANETs).
Since most of swarm system applications are mission-
critical, robustness and self-healing properties are essen-
†Ann T. Tai is now afﬁliated with WW Technology Group.
‡Kam S. Tso is now afﬁliated with iRise.
William H. Sanders
University of Illinois
Urbana, IL 61801
tial to such systems.
In addition, their deployment ﬁelds
are often harsh and hazardous, making swarm compo-
nents vulnerable to failure. On the other hand, such sys-
tems are built upon a large number of nondedicated re-
sources and have the ability to aggregate the limited ca-
pacities of individual resources to achieve big, but adaptive
goals. This enables loss-tolerance and gracefully degrad-
able performance [3, 4, 5].
In addition, adaptive goals
and coordination among system components may necessi-
tate proactive reclustering of the surviving components to
maintain or restore system serviceability (see [6], for ex-
ample). Since self-healing is typically achieved by a sys-
tem’s self-organizing capability, a clustering protocol (a
self-organizing mechanism for scalable network commu-
nication) that supports gracefully degradable performance
and that is adequately efﬁcient to permit proactive reclus-
tering is highly desirable.
While many important research results have been pub-
lished through the past decade to address optimization prob-
lems in cluster formation, issues concerning how to make
a clustering protocol support gracefully degradable perfor-
mance remain largely untouched. In addition, most clus-
tering algorithms are aimed at perfect clustering coverage.
While their initial cluster formation is able to achieve per-
fect coverage, traditional clustering approaches typically re-
quire reactive cluster maintenance, as nodes may migrate,
fail, or die due to power exhaustion. Such reactive mainte-
nance or clusterhead reelection could result in service dis-
ruption and a ripple effect in reclustering [7].
With the above motivation, we propose a notion called
superimposed clustering. Rather than search for an optimal
clusterhead selection or guarantee perfect clustering cover-
age, our intent is to let the vast majority of nodes be or-
ganized in a predictable time frame. In turn, this enables
reasonably frequent reclustering to keep surviving hosts or-
ganized — a proactive means for self-healing. In particular,
our superimposed clustering protocol (SCP) applies two di-
versiﬁed clustering policies simultaneously to form two dif-
ferent sets of clusters, which we view as two cluster layers,
with one on top of the other. Subsequently, via redundancy
shadowing, an SCP is able to extract and combine the com-
plementary portions in the two layers to enable signiﬁcantly
better clustering coverage in a single round. In addition to
the performance advantage, the shadowed redundancies let
cluster-damage mitigation be accomplished without service
disruption, enabling gracefully degraded performance be-
tween two epochs of reclustering.
It is noteworthy that resource diversity is traditionally ap-
plied to validate computation correctness based on the con-
vergence of computation results [8]. In contrast, SCP aims
to apply diversiﬁed clustering policies to obtain results that
are mutually compensating. While superimposed clustering
is a general self-organizing framework for MANETs, we in-
vestigate the framework in this paper based on an instance
of SCP. Among other choices for a pair of clustering crite-
ria (of which the combination will enable the realization of
superimposed clustering), we select the well-known maxi-
mum ID and minimum ID clustering policies [7].
The remainder of the paper is organized as follows. Sec-
tion 2 provides the fundamentals of clustering and the sys-
tem model. Section 3 explains the SCP algorithm. Section
4 presents a performability evaluation. Section 5 describes
related work. The concluding section discusses the signiﬁ-
cance of the framework of superimposed clustering.
2 Fundamentals
2.1 Terminology and Basics of Clustering
A cluster can be viewed as a unit disk with a radius equal
to the center node’s transmission range. As a result, any
non-center nodes in a cluster are one-hop neighbors of the
center node. The center node and its neighbors are called
clusterhead (CH) and clustermembers (CMs), respectively,
while a node that has one-hop neighbors in two or more
clusters can become a gateway (GW) node. After an au-
tonomous cluster formation, only CHs and GWs partici-
pate in the intercluster communication; CMs may talk to
each other either directly or via their CHs. As the back-
bone of a cluster-based network consists only of the CHs
and GWs, system-wide information dissemination can be
done far more efﬁciently than with ﬂat ﬂooding.
For simplicity of illustration, we use the term “neigh-
bor” to refer to a one-hop neighbor. In addition, the words
“node,” “host,” and “component” are used interchangeably
in the remainder of this paper. Finally, when we say “a CH
loses its serviceability,” we mean that a CH fails, dies, or
abruptly departs from its cluster.
2.2 System Model
As mentioned earlier, our intent is to devise a cluster-
ing framework for systems consisting of a large number of
micro-scale hosts with low to moderate mobility. Exam-
ples are collaborating micro-robot or micro-rover swarms,
micro-satellite constellations, and micro-UAV formation
ﬂying in which UAVs have low relative mobility (in addition
to group mobility). While all the hosts are allowed to move
to any locations in the deployment ﬁeld, some may exhibit
model-based statistical preferences [9] in mobile behavior,
to improve the chances of reaching an application-speciﬁc
goal (a typical mechanism used in self-stabilizing systems).
Since mobile hosts can circumvent asymmetric link
problems via open- or closed-loop power control, all the
hosts presumably have the same transmission range. And
since memory density has doubled every 18 months per
Moore’s law, swarm hosts are able to have a large amount of
memory with no increased size, weight, or energy consump-
tion. In swarm systems, local coordinators (i.e., CHs in a
cluster-based network) are typically ordinary hosts instead
of superpower entities. Thus, minimizing clusterhead count
is not essential, but energy conservation is important. As
various lightweight localization algorithms are now avail-
able to allow an autonomous host to compute its distances
to other hosts or landmarks, a swarm host is capable of be-
ing location-aware even if it is not equipped with a GPS (see
[10], for example).
Additionally, mobile-host collaboration usually takes
place among nearby peers, so that periodic neighborhood
probing is often required for collaboration planning (e.g.,
to get enough hosts to lift a piece of rock). Consequently,
reasonably frequent proactive reclustering is desirable for
both performance and self-healing purposes [3]. As swarm
systems plan to adopt self-adaptive spread spectrum tech-
niques to circumvent the crowded spectrum problem in ad
hoc wireless networks [11], radio resource allocation will
not be a problem for reclustering.
3 Superimposed Clustering
3.1 Concept
We ﬁrst let N1(v) denote the node set that includes all
the one-hop neighbors of node v (excluding v itself). Using
the notation, we can then deﬁne the two-hop neighborhood
of v as follows: N2(v) = N1(v) ∪ (∪u∈N1(v)N1(u)).
Further, we deﬁne two subsets of N1(v):
ˆN1(v) ⊆ N1(v), such that ∀u∈ ˆN1(v), ID(u) > ID(v)
ˇN1(v) ⊆ N1(v), such that ∀u ∈ ˇN1(v), ID(u) < ID(v)
Then if we let Gh(v) and Gm(v) be the indicator vari-
ables to show whether v is a CH or CM of a cluster, re-
spectively, the combined MaxMin-ID clustering policy of
the proposed SCP can be deﬁned as follows:
Gh(v) = 1 ⇔ N1(v) (cid:54)= ∅ ∧ ( ˆN1(v) = ∅ ∨ ˇN1(v) = ∅)
Gm(v) = 1 ⇔ N1(v) (cid:54)= ∅ ∧ (∃u, u ∈ N1(v), Gh(u) = 1)
Due to policy diversity, v will never be qualiﬁed to be a
CH by both Max-ID and Min-ID criteria. On the other hand,
the above deﬁnitions collectively reveal that superimposed
clustering permits a node v to be a CH per one policy and
a CM per the other. In turn, this implies the possibility that
one cluster could completely overlap with another cluster or
several other clusters, resulting in cluster redundancy.
Accordingly, the essence of superimposed clustering is
to extract and combine the complementary portions of clus-
ter layers through redundancy shadowing. While the con-
cept of redundancy shadowing is explained in Section 3.2,
below we informally describe the idea of SCP.
Figure 1 illustrates the idea of superimposed clustering
based on an example scenario. For clarity, we let 30 nodes
be represented by their unique IDs (0 through 29) and be
randomly distributed such that the nodes with boldface IDs
are the CHs. For simplicity, in the remainder of the text,
we use the term “node n” to refer to a node whose ID is n.
Figures 1(a) and 1(b) show that when Max-ID and Min-ID
policies are applied alone, 6 and 11 nodes are left unclus-
tered, respectively, upon the completions of the ﬁrst rounds
of the corresponding protocols.
(a) Max-ID Policy
(b) Min-ID Policy
(c) MaxMin-ID Policy
(d) Degraded Coverage
Figure 1: Superimposed Clustering: An Example
However, when the two policies are applied in parallel,
only two nodes are left unclustered after a single round, as
shown in Figure 1(c), a signiﬁcant improvement of cluster-
ing efﬁciency over single-policy-based or sequential hybrid
(i.e., conditional use of an alternative policy) approaches.
Note also that in Figure 1(c), the clusters in which the
CHs are node 0 and node 27 disappear from the superim-
posed clusters. That is a result of redundancy shadowing,
which is described in the next subsection.
3.2 Redundancy Shadowing
Informally speaking, redundancy shadowing is a pro-
cess through which only non-redundant clusters will remain
active in a cluster-based network. When we say a “non-
redundant cluster,” we mean that some node will become
unclustered if that cluster is removed; whereas a “redun-
dant cluster” can be removed without causing any node to
become unclustered. The deﬁnitions can be stated in math-
ematical terms as follows:
Deﬁnition 1 A cluster N1(v) ∪ {v} in which N1(v) (cid:54)= ∅
and v is the CH is said to be a “non-redundant cluster” if
∃u, u ∈ N1(v) ∪ {v},∀w, w ∈ N1(u) − {v}, Gh(w) = 0.
Deﬁnition 2 A cluster N1(v) ∪ {v} in which N1(v) (cid:54)= ∅
and v is the CH is said to be a “redundant cluster” if
∀u, u ∈ N1(v) ∪ {v},∃w, w ∈ N1(u) − {v}, Gh(w) = 1
and N1(w) ∪ {w} is a non-redundant cluster.
In addition, we use the term preliminary N2 knowledge
to refer to a node v’s knowledge about 1) {ID(u) | u ∈
N1(v)}, and 2) ∀u, u ∈ N1(v), {ID(w) | w ∈ N1(u)}.
Coupled with the clustering policy stated in Section 3.1, the
preliminary N2 knowledge will enable a node v that is not a
CH candidate to determine whether it is afﬁliated with one
and only one cluster (i.e., a sole cluster afﬁliation), which is
stated formally in the following theorem:
Theorem 1 A node v that is not a CH candidate will be
able to determine whether it is afﬁliated with one and only
one cluster if N1(v) (cid:54)= ∅ and v has preliminary N2 knowl-
edge.
Proof. If N1(v) (cid:54)= ∅ and v has preliminary N2 knowledge,
then ∀u, u ∈ N1(v), v will be aware of whether the follow-
ing condition holds:
ˆN1(u) = ∅ ∨ ˇN1(u) = ∅
Hence, by checking each neighbor’s CH qualiﬁcation, v is
able to identify its sole cluster afﬁliation.
Q.E.D.
Furthermore, we deﬁne a special type of non-redundant
cluster as follows:
Deﬁnition 3 A cluster N1(v) ∪ {v} in which N1(v) (cid:54)= ∅
and v is the CH is said to be an “inclusion-type non-
redundant cluster” if ∃u, u∈ N1(v), N1(u)∪ u ⊂ N1(v)∪
v,∀w, w ∈ N1(u) − {v}, Gh(w) = 0.
As stated by Theorem 2 below, preliminary N2 knowledge
sufﬁces the purpose of identifying a non-redundant cluster
of that type (which we call “N2-detectable” for simplicity).
Theorem 2 An inclusion-type non-redundant cluster is an
N2-detectable non-redundant cluster.