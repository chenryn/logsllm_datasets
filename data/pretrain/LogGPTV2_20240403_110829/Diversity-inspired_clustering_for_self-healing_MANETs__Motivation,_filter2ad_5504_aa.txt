# Diversity-Inspired Clustering for Self-Healing MANETs: Motivation, Protocol, and Performability Evaluation

**Authors:**
- Ann T. Tai†
- Kam S. Tso‡
- William H. Sanders

**Affiliations:**
- †Ann T. Tai is now affiliated with WW Technology Group.
- ‡Kam S. Tso is now affiliated with iRise.
- William H. Sanders, University of Illinois, Urbana, IL 61801

**Abstract:**
Swarm systems, which typically comprise a large number of lightweight mobile components, must be capable of self-healing. In this paper, we propose a self-organizing, self-healing framework called "superimposed" clustering for such systems. This framework significantly departs from traditional clustering algorithms that apply a single policy to form clusters through iterations. Specifically, our Superimposed Clustering Protocol (SCP) selects a pair of diversified clustering policies to simultaneously build two sets of clusters, which we view as two cluster layers, one on top of the other. Via redundancy shadowing, SCP is able to extract and combine the complementary portions of the two layers to form a clustered network such that the vast majority of nodes can be organized in a single round. Moreover, SCP exploits shadow redundancy to enable gracefully degradable clustering coverage to mitigate cluster damage caused by node failure, death, or migration. We present the notion of superimposed clustering by devising a protocol and conducting a performability evaluation.

## 1. Introduction
Fast-advancing micro- and nano-electro-mechanical technologies have enabled the creation of systems consisting of hundreds of small mobile components (e.g., micro-scale robots, rovers, and UAVs). These systems are often referred to as swarm systems. Typical applications of swarm systems include natural disaster rescue, detection of potential biological, chemical, or radiological threats, and deep-space exploration missions. Such applications are built over mobile ad hoc wireless networks (MANETs).

Since most swarm system applications are mission-critical, robustness and self-healing properties are essential. Additionally, their deployment fields are often harsh and hazardous, making swarm components vulnerable to failure. However, these systems are built upon a large number of nondedicated resources and have the ability to aggregate the limited capacities of individual resources to achieve big, but adaptive goals. This enables loss-tolerance and gracefully degradable performance. Adaptive goals and coordination among system components may necessitate proactive reclustering of the surviving components to maintain or restore system serviceability. Since self-healing is typically achieved by a system's self-organizing capability, a clustering protocol that supports gracefully degradable performance and is sufficiently efficient to permit proactive reclustering is highly desirable.

While many important research results have been published to address optimization problems in cluster formation, issues concerning how to make a clustering protocol support gracefully degradable performance remain largely unaddressed. Most clustering algorithms aim for perfect clustering coverage, but their initial cluster formation, while achieving perfect coverage, typically requires reactive cluster maintenance. This can result in service disruption and a ripple effect in reclustering.

With this motivation, we propose a notion called superimposed clustering. Rather than searching for an optimal clusterhead selection or guaranteeing perfect clustering coverage, our intent is to let the vast majority of nodes be organized in a predictable time frame. This enables reasonably frequent reclustering to keep surviving hosts organized, a proactive means for self-healing. Our Superimposed Clustering Protocol (SCP) applies two diversified clustering policies simultaneously to form two different sets of clusters, viewed as two cluster layers, one on top of the other. Subsequently, via redundancy shadowing, SCP is able to extract and combine the complementary portions in the two layers to enable significantly better clustering coverage in a single round. The shadowed redundancies also allow cluster-damage mitigation without service disruption, enabling gracefully degraded performance between two epochs of reclustering.

It is noteworthy that resource diversity is traditionally applied to validate computation correctness based on the convergence of computation results. In contrast, SCP aims to apply diversified clustering policies to obtain mutually compensating results. While superimposed clustering is a general self-organizing framework for MANETs, we investigate the framework in this paper based on an instance of SCP. Among other choices for a pair of clustering criteria, we select the well-known maximum ID and minimum ID clustering policies.

The remainder of the paper is organized as follows. Section 2 provides the fundamentals of clustering and the system model. Section 3 explains the SCP algorithm. Section 4 presents a performability evaluation. Section 5 describes related work. The concluding section discusses the significance of the superimposed clustering framework.

## 2. Fundamentals

### 2.1 Terminology and Basics of Clustering
A cluster can be viewed as a unit disk with a radius equal to the center node’s transmission range. As a result, any non-center nodes in a cluster are one-hop neighbors of the center node. The center node and its neighbors are called clusterhead (CH) and clustermembers (CMs), respectively, while a node that has one-hop neighbors in two or more clusters can become a gateway (GW) node. After autonomous cluster formation, only CHs and GWs participate in intercluster communication; CMs may talk to each other either directly or via their CHs. As the backbone of a cluster-based network consists only of the CHs and GWs, system-wide information dissemination can be done far more efficiently than with flat flooding.

For simplicity, we use the term "neighbor" to refer to a one-hop neighbor. The words "node," "host," and "component" are used interchangeably. When we say "a CH loses its serviceability," we mean that a CH fails, dies, or abruptly departs from its cluster.

### 2.2 System Model
Our intent is to devise a clustering framework for systems consisting of a large number of micro-scale hosts with low to moderate mobility. Examples include collaborating micro-robot or micro-rover swarms, micro-satellite constellations, and micro-UAV formation flying. While all hosts are allowed to move to any locations in the deployment field, some may exhibit model-based statistical preferences in mobile behavior to improve the chances of reaching an application-specific goal. Since mobile hosts can circumvent asymmetric link problems via open- or closed-loop power control, all hosts presumably have the same transmission range. With Moore's law, swarm hosts can have a large amount of memory without increased size, weight, or energy consumption. Local coordinators (i.e., CHs in a cluster-based network) are typically ordinary hosts, so minimizing clusterhead count is not essential, but energy conservation is important. Various lightweight localization algorithms allow a swarm host to be location-aware even without GPS. Mobile-host collaboration usually takes place among nearby peers, requiring periodic neighborhood probing for collaboration planning. Consequently, reasonably frequent proactive reclustering is desirable for both performance and self-healing purposes. As swarm systems plan to adopt self-adaptive spread spectrum techniques, radio resource allocation will not be a problem for reclustering.

## 3. Superimposed Clustering

### 3.1 Concept
We first define the node set \( N1(v) \) to include all the one-hop neighbors of node \( v \) (excluding \( v \) itself). Using this notation, we can define the two-hop neighborhood of \( v \) as follows:
\[ N2(v) = N1(v) \cup (\cup_{u \in N1(v)} N1(u)) \]

Further, we define two subsets of \( N1(v) \):
\[ \hat{N1}(v) \subseteq N1(v), \text{ such that } \forall u \in \hat{N1}(v), \text{ID}(u) > \text{ID}(v) \]
\[ \check{N1}(v) \subseteq N1(v), \text{ such that } \forall u \in \check{N1}(v), \text{ID}(u) < \text{ID}(v) \]

If we let \( Gh(v) \) and \( Gm(v) \) be the indicator variables to show whether \( v \) is a CH or CM of a cluster, respectively, the combined MaxMin-ID clustering policy of the proposed SCP can be defined as follows:
\[ Gh(v) = 1 \Leftrightarrow N1(v) \neq \emptyset \land (\hat{N1}(v) = \emptyset \lor \check{N1}(v) = \emptyset) \]
\[ Gm(v) = 1 \Leftrightarrow N1(v) \neq \emptyset \land (\exists u, u \in N1(v), Gh(u) = 1) \]

Due to policy diversity, \( v \) will never be qualified to be a CH by both Max-ID and Min-ID criteria. On the other hand, the above definitions collectively reveal that superimposed clustering permits a node \( v \) to be a CH per one policy and a CM per the other. This implies the possibility that one cluster could completely overlap with another cluster or several other clusters, resulting in cluster redundancy.

The essence of superimposed clustering is to extract and combine the complementary portions of cluster layers through redundancy shadowing. The concept of redundancy shadowing is explained in Section 3.2. Below, we informally describe the idea of SCP.

Figure 1 illustrates the idea of superimposed clustering based on an example scenario. For clarity, we let 30 nodes be represented by their unique IDs (0 through 29) and be randomly distributed such that the nodes with boldface IDs are the CHs. For simplicity, in the remainder of the text, we use the term "node n" to refer to a node whose ID is \( n \).

Figures 1(a) and 1(b) show that when Max-ID and Min-ID policies are applied alone, 6 and 11 nodes are left unclustered, respectively, upon the completions of the first rounds of the corresponding protocols.

(a) Max-ID Policy
(b) Min-ID Policy
(c) MaxMin-ID Policy
(d) Degraded Coverage
Figure 1: Superimposed Clustering: An Example

However, when the two policies are applied in parallel, only two nodes are left unclustered after a single round, as shown in Figure 1(c), a significant improvement of clustering efficiency over single-policy-based or sequential hybrid (i.e., conditional use of an alternative policy) approaches. Note also that in Figure 1(c), the clusters in which the CHs are node 0 and node 27 disappear from the superimposed clusters. This is a result of redundancy shadowing, which is described in the next subsection.

### 3.2 Redundancy Shadowing
Redundancy shadowing is a process through which only non-redundant clusters will remain active in a cluster-based network. A "non-redundant cluster" is one where some node will become unclustered if that cluster is removed, whereas a "redundant cluster" can be removed without causing any node to become unclustered. The definitions can be stated in mathematical terms as follows:

**Definition 1:** A cluster \( N1(v) \cup \{v\} \) in which \( N1(v) \neq \emptyset \) and \( v \) is the CH is said to be a "non-redundant cluster" if:
\[ \exists u, u \in N1(v) \cup \{v\}, \forall w, w \in N1(u) - \{v\}, Gh(w) = 0 \]

**Definition 2:** A cluster \( N1(v) \cup \{v\} \) in which \( N1(v) \neq \emptyset \) and \( v \) is the CH is said to be a "redundant cluster" if:
\[ \forall u, u \in N1(v) \cup \{v\}, \exists w, w \in N1(u) - \{v\}, Gh(w) = 1 \text{ and } N1(w) \cup \{w\} \text{ is a non-redundant cluster} \]

Additionally, we use the term "preliminary N2 knowledge" to refer to a node \( v \)'s knowledge about:
1. \( \{ \text{ID}(u) | u \in N1(v) \} \)
2. \( \forall u, u \in N1(v), \{ \text{ID}(w) | w \in N1(u) \} \)

Coupled with the clustering policy stated in Section 3.1, the preliminary N2 knowledge will enable a node \( v \) that is not a CH candidate to determine whether it is affiliated with one and only one cluster (i.e., a sole cluster affiliation), which is stated formally in the following theorem:

**Theorem 1:** A node \( v \) that is not a CH candidate will be able to determine whether it is affiliated with one and only one cluster if \( N1(v) \neq \emptyset \) and \( v \) has preliminary N2 knowledge.

**Proof:** If \( N1(v) \neq \emptyset \) and \( v \) has preliminary N2 knowledge, then \( \forall u, u \in N1(v) \), \( v \) will be aware of whether the following condition holds:
\[ \hat{N1}(u) = \emptyset \lor \check{N1}(u) = \emptyset \]

Hence, by checking each neighbor's CH qualification, \( v \) is able to identify its sole cluster affiliation. Q.E.D.

Furthermore, we define a special type of non-redundant cluster as follows:

**Definition 3:** A cluster \( N1(v) \cup \{v\} \) in which \( N1(v) \neq \emptyset \) and \( v \) is the CH is said to be an "inclusion-type non-redundant cluster" if:
\[ \exists u, u \in N1(v), N1(u) \cup \{u\} \subset N1(v) \cup \{v\}, \forall w, w \in N1(u) - \{v\}, Gh(w) = 0 \]

As stated by Theorem 2 below, preliminary N2 knowledge suffices the purpose of identifying a non-redundant cluster of that type (which we call "N2-detectable" for simplicity).

**Theorem 2:** An inclusion-type non-redundant cluster is an N2-detectable non-redundant cluster.