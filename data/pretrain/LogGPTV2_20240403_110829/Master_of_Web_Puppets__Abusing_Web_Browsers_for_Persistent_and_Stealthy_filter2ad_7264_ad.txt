mixnets), through which users could route their web trafﬁc.
Such chain could be created by bots connected with encrypted
peer-to-peer channels with each other by using WebRTC.2
2WebRTC trafﬁc is always encrypted. Transmitted data is protected by
Datagram Transport Layer Security (DTLS) [49] and Secure Real-time
Transport Protocol (SRTP) [41].
8
There are already such browser-based proxies implemented
over WebRTC, like Stanford’s Flash Proxies [17] and Tor
Project’s Snowﬂake [26]. Apparently, a solid implementation
of such a service within a service worker, capable of providing
strong anonymity guarantees (e.g., similar or close to Tor), is
not a trivial task and requires deeper analysis. Hence, such an
exploration is beyond the scope of this paper.
2) Click Fraud: Having a large botnet can become proﬁtable
in many ways. One such way is to abuse the digital advertising
ecosystem, by having bots rather than humans view or click on
online advertisements. It is estimated that online advertising
fraud will cost advertisers $19 billion in 2018, which represents
9% of total digital advertising spend [31].
MarioNet can be easily used to generate clicks, as well
as surf targeted websites for a period of time, stream online
videos to increase views, manipulate online polls, and possibly
sign up for newsletters. To achieve that, the service worker can
obtain periodically a list of online links that is requested to visit,
possibly combined with metadata such as visit duration, number
of clicks, etc. In addition, due to the rich programming features
that JavaScript offers, MarioNet can be easily programmed to
follow a human-centric online behavioral model (e.g., similar to
the one proposed by Baldi et al. [6]) to evade countermeasures
that seek to block users with unusual activity (e.g., clicking
too many links in a short period of time).
VI. EVALUATION
A. Prototype Setup
To assess the feasibility and effectiveness of our approach,
and also to check the existence of possible code protection and
restriction mechanisms, we build a real world deployment of
our MarioNet prototype. Our prototype consists of two servers;
the ﬁrst server is an Apache web server that hosts a simple
webpage, and the second one is a command and control server
(i.e., Puppeteer), delivering tasks to the Servants. Upon the
ﬁrst website visit, the webpage registers a service worker in
the Servant and a sync manager that is responsible to keep the
service worker alive in the background. After its registration, the
Servant opens a full-duplex connection—using the WebSocket
API [47]—with the Puppeteer and retrieves a JavaScript code
snippet that executes through eval(). In order to be able to
use eval() from within the service worker, the collaborating
web server gives the needed permission through the HTTP
Content Security Policy (CSP).
Browser Compatibility: As discussed in Section IV, our
approach is based on existing components of HTML5 such
as Service Workers and its interface SyncManager. Table II
summarizes the browser compatibility of these components,
and thus the compatibility of our framework. As we can see,
some vendors like Google, started supporting service workers
quite early (2016), while others caught up only until recently,
i.e., Safari (2018). Still, MarioNet is compatible with the most
popular browsers in both desktop and mobiles.
In our experiments we tested MarioNet with four popular
desktop browsers, namely Chrome, Firefox, Opera and Safari.
However, we chose to exclude Safari from the performance
evaluation results, due to its bad performance sustained in all
the experiments conducted. Even though the service worker
TABLE II: MarioNet’s browser compatibility
Device
Desktop
Mobile
Browser
Chrome
Firefox
Opera
Edge
Safari
IE
Samsung Internet
Chrome Android
UC Browser
iOS Safari
Firefox Android
Android Browser
Opera Mobile
Opera Mini
Blackberry
SW compatibility
since v40
since v44
since v26
since v17
since v11.1
NoSupport
since v4
since v64
since v11.8
since v11.3
since v57
Partially since v62
Partially since v37
NoSupport
NoSupport
Fig. 3: Rate of asynchronous outgoing HTTP OPTION requests
for different browsers and network connections in the DDoS
scenario. An orchestrated DoS attack in MarioNet can achieve
rates of up to 1632 reqs/sec per infected device.
functionality is provided by Safari, we experienced several
performance glitches. We believe that this behavior is due
to the recently adaptation of service workers in Safari (2018).
Even for simple workloads, i.e., a simple counting example, the
performance achieved by the service worker is extremely slow
(i.e., 20 − 50× lower) compared to the performance achieved
by the other three browsers.
B. Performance Evaluation
In order to demonstrate the effectiveness of MarioNet, we
conduct several experiments with various popular browsers
and hardware settings, which allow us to make useful and
interesting comparisons. However, it is noted that in this paper
we do not aim to provide an optimal implementation in terms
of performance, but rather to demonstrate the feasibility of
the aforementioned attacks. To that end, the performance of
the system can be further improved by using WebAssembly.
Furthermore, all the experiments presented in this section were
9
 1 10 100 1000 100001GbitWiFiDSLRegular4GGood3GRegular3GGood2GRegular2GGPRSHTTP requests/secNetwork ConnectionFirefoxChromeOperaFig. 4: Hashrate for different equipped
CPUs and utilization levels in the cryp-
tojacking scenario. As expected, victim’s
hardware affects signiﬁcantly the compu-
tation power that MarioNet may obtain.
Fig. 5: Hashrate for different utilization
levels and Power modes in the cryptojack-
ing scenario. The OS may slow down clock
speed of the victim’s device, reducing up
to 78.41% the computation power.
Fig. 6: Hashrate for different
infected
browsers and utilization levels in the cryp-
tojacking scenario. Firefox browser can
calculate up to 1.51× more hashes per
second than Chrome and Opera.
conducted in a controlled environment, without reaching any
host outside our local network (see Section VIII).
1) Abuse of network resources: In the ﬁrst experiment,
we measure the rate of HTTP requests that the MarioNet
framework can achieve from a single browser. As described
in Section V-A, the Puppeteer instructs the Servant to con-
tinuously send multiple HTTP requests to a remote server,
via XMLHttpRequest.send(). Figure 3 shows the rate
achieved for different browsers and different types of networks.
To measure the rate, we ran tcpdump at the targeted server
and captured all the incoming HTTP trafﬁc. As can be seen in
Figure 3, even devices over inferior network connections are
capable of contributing a fair share in such a distributed attack
(e.g., an average of 214 reqs/sec on Good3G networks). For
high network bandwidth, i.e., 1 GbE, Opera tends to achieve
higher rates (up to 1632 reqs/sec on average).
2) Abuse of computation power: The next experiment
explores the computation capacity that the infected browsers
can provide. Figure 4 presents the hashrate achieved when
mining Monero coins in Chrome, for different CPU models
and various utilization thresholds. As expected, the performance
gain is highly affected by the equipped hardware. Speciﬁcally,
we see that Intel i7-4790 can give 29% more hashes per second
than Intel i5-5200U, when fully utilized.
After experimenting with different operating systems, we no-
ticed that the different power mode characteristics they provide
can drastically affect the sustained performance of CryptoNight
execution. Figure 5 shows the performance achieved on a
Windows 7 desktop computer that is equipped with an Intel
i7-4790K, at 4.0GHz, under 3 different power modes (namely
High Performance, Balanced and Power Saver). When fully
utilized, the Power Saver mode forces the CPU to reduce the
voltage and clock speed, which causes a decrease of up to
78.41% compared to the High Performance mode. In addition,
in the Balanced mode, when CPU utilization exceeds 50% the
operating system allows the CPU to run in full speed in order
to cover the increased computation needs, thus verging the
hashrate of High Performance mode.
Next, we explore how different infected browsers affect the
computation gain of MarioNet. Figure 6 shows the hash-rate
Fig. 7: Cracking speed of different browsers in the distributed
password-cracking scenario. MarioNet can brute-force per
victim around 500K MD5 hashes per second or around 300K
SHA-256 hashes, irrespective of the infected browser.
achieved for different browsers, when using a Intel i7-5557U
CPU. We observe that Firefox can calculate up to 34.55% more
hashes per second than Chrome and Opera, which are both
based on Chromium and the V8 JavaScript engine.
The earnings of an attacker that launches a distributed
MarioNet-like Monero mining attack can be estimated with
the following equation: Earnings = ((total hashrate ×
block reward)/current dif f iculty) × time. For this esti-
mation we consider a scenario of an attacker that controls a
website that attracts on average 10000 unique visitors per day,
that the visitors of the malicious site have mid-range devices,
and that the attacker utilizes only a single core of their devices
at a utilization level of 60%-70% (i.e., user hashrate of 10
h/s). According to the current difﬁculty of Monero mining,
the attacker will earn around 0.5 monero every 12 hours,
which is easily achievable when considering the persistence
characteristics of a MarioNet-like attack. It should be noticed
though, that this is a very conservative estimation, since we
only assume that the attacker infects a relatively small number
of users, and that the victims’ devices are only slightly utilized.
In our last experiment, we explore the performance sustained
10
 0 5 10 15 2010%20%30%40%50%60%70%80%90%100%Hashrate (Hashes/sec)CPU utilization thresholdIntel i7-4790, 3.6GHzIntel i7-4770, 3.4GHzIntel i7-5557U, 3.1GHzIntel i5-5200U, 2.2GHz 0 5 10 15 2010%20%30%40%50%60%70%80%90%100%Hashrate (Hashes/sec)CPU utilization thresholdHigh PerformanceBalancedPower Saver 0 5 10 15 2010%20%30%40%50%60%70%80%90%100%Hashrate (Hashes/sec)CPU utilization thresholdFirefoxChromeOpera 0 100 200 300 400 500 600 700ChromeFirefoxOperaCracking speed (KHashes/sec)MD5SHA-256for password cracking. Figure 7 plots the achieved rate for
hashing 10-digit alphanumerical passwords on a brute-force
manner, for both MD5 and SHA-256 algorithms. As we can
see, all browsers achieve similar and comparable performance.
This means that a single browser can brute-force around 500K
MD5 hashes per second or 300K SHA-256 hashes, irrespective
of the infected browser.
3) Persistent and Evasive abuse: In order to assess the
persistence and evasiveness of our approach, we deliver
MarioNet within a webpage destined to perform cryptojacking.
Before fetching the webpage in a Chrome browser, (i) we open
tcpdump and (ii) we deploy in our browser the following ex-
tensions/tools: Tamper Chrome HTTP capturing extension [20],
Chrome’s default DevTools, WebSniffer [2], and HTTP Spy [1]
to explore in the real world, the stealthiness of MarioNet against
state-of-the-art monitoring and blocking extensions. After fully
rendering the webpage and planting the Servant, we close the
associated browser tab. Then, from the Puppeteer, (iii) we push
a cryptocurrency mining task to the Servant and let it run for
3 consecutive days. We see that although the Servant regularly
communicated with the Puppeteer to obtain PoW tasks, as
tcpdump correctly captured, none of the employed extensions
was able to monitor any Servant-related trafﬁc other than the
very ﬁrst GET request of the webpage, right before infection.
Comparison to state-of-the-art web botnets: In order to
compare MarioNet with the state-of-the-art web-botnets, we
load our password cracking algorithm in a set of web workers as
described in related approaches [13], [54]. Given that these web-
botnets run only for as long as the victim is surﬁng the webpage,
they need to fully utilize the resources of the infected device in
order to scrounge a meaningful gain from this short infection
window. As a consequence, they usually occupy concurrently
all system cores across the entire period of a website visit,
which studies have shown that it is 1 minute on average [53].
In Figure 8, we plot the total number of SHA-256 hashes
brute-forced by the 2 approaches in an infected browser for a
period of 12 hours. For MarioNet, we measure two cases: (i)
the best case, where the password cracker runs uninterruptedly
in the victim’s device, and (ii) the worst case, where along
with the malicious computations there is heavy utilization from
other processes too. In the second case, to simulate this heavy
load, we concurrently run a multi-threaded pi digit calculator
that fully utilizes all 8 system’s cores. As we can see, although
web-botnet utilizes greedily 8× more resources, MarioNet
due to its persistence, enjoys a higher efﬁciency after the
18th minute of an open browser, even under extreme heavy
concurrent interference. Consequently, while until today, the
business model of malicious websites were to deploy a web-
botnet and ﬁnd a way to keep the user on the website (by
providing free movie streaming, online games or include pop-
under windows [70]), with MarioNet it takes only a momentary
visit to infect the user and take control of their browser.
VII. DEFENSES
In this section we examine potential defense mechanisms
that could detect and mitigate MarioNet type of attacks. The
goal is to determine whether it is feasible to detect the general
methodology of the attack vectors that are opened through the
misuse of the service worker mechanisms, rather than mitigating
the speciﬁc use cases studied in this paper.
Fig. 8: Number of SHA256 hashes brute-forced by MarioNet
and previous Web-botnet approaches that utilize Web Workers,
in the lapse of time. The persistence of MarioNet makes a single
infected browser compute hashes as long as the browser is open
and thus be more efﬁcient than opportunistic Web-Botnets.
We present various defense strategies and discuss the
corresponding tradeoffs they bring. We categorize the defenses
in two classes: (i) those that can be deployed inside a vanilla
browser (e.g., via an extension), and (ii) those that can be
deployed in the host (through anti-virus tools, IDS/IPS, ﬁrewalls,
etc.) or by modifying the browser.
A. In-browser Mechanisms
1) Restricting or Disabling Service Workers: Service work-
ers have been introduced to enable rich ofﬂine user experi-
ence, such as periodic background synchronization and push
notiﬁcations, embedded content fallback, caching, message
relaying across pages, ofﬂine fallback, and user-side load
balancing. Traditionally, these types of functionality required
a native application. However, the window of opportunity for
abuse by attackers, makes for a difﬁcult tradeoff between
rich user experience and security. In the case of MarioNet,
disabling service workers could indeed prevent the persistence