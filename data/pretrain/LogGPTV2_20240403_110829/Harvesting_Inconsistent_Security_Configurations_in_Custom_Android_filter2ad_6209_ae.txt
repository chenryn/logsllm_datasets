(cid:40)(cid:32)(cid:44)(cid:1)
(cid:38)(cid:32)(cid:44)(cid:1)
(cid:36)(cid:32)(cid:44)(cid:1)
(cid:34)(cid:32)(cid:44)(cid:1)
(cid:32)(cid:44)(cid:1)
(cid:39)(cid:40)(cid:29)(cid:33)(cid:40)(cid:1)
(cid:39)(cid:34)(cid:29)(cid:35)(cid:34)(cid:1)
(cid:34)(cid:33)(cid:29)(cid:40)(cid:34)(cid:1)
(cid:34)(cid:39)(cid:29)(cid:38)(cid:40)(cid:1)
(cid:38)(cid:33)(cid:29)(cid:38)(cid:41)(cid:1)
(cid:35)(cid:40)(cid:29)(cid:35)(cid:33)(cid:1)
(cid:36)(cid:39)(cid:29)(cid:32)(cid:33)(cid:1)
(cid:37)(cid:34)(cid:29)(cid:41)(cid:41)(cid:1)
(cid:44)(cid:5)(cid:23)(cid:14)(cid:12)(cid:21)(cid:22)(cid:1)
(cid:44)(cid:4)(cid:19)(cid:26)(cid:18)(cid:13)(cid:21)(cid:8)(cid:11)(cid:12)(cid:1)
(cid:6)(cid:12)(cid:21)(cid:17)(cid:15)(cid:22)(cid:22)(cid:15)(cid:19)(cid:18)(cid:1)
(cid:6)(cid:21)(cid:19)(cid:23)(cid:12)(cid:10)(cid:23)(cid:12)(cid:11)(cid:1)
(cid:2)(cid:21)(cid:19)(cid:8)(cid:11)(cid:10)(cid:8)(cid:22)(cid:23)(cid:1)
(cid:3)(cid:19)(cid:17)(cid:20)(cid:19)(cid:18)(cid:12)(cid:18)(cid:23)(cid:1)
(cid:7)(cid:15)(cid:22)(cid:15)(cid:9)(cid:15)(cid:16)(cid:15)(cid:23)(cid:27)(cid:1)
(cid:3)(cid:19)(cid:17)(cid:20)(cid:19)(cid:18)(cid:12)(cid:18)(cid:23)(cid:1)
(cid:6)(cid:21)(cid:19)(cid:23)(cid:12)(cid:10)(cid:24)(cid:19)(cid:18)(cid:1)
Figure 7: Percentage of Security Features Downgrades
tent can further set the action REFRESH_RESET_FAIL and
thus trigger the privileged functionality (rebooting the
phone) without the required REBOOT permission. We have
conﬁrmed this dangerous pattern in several preloaded
apps and were able to achieve various damages. We ﬁled
a bug report about this discovered vulnerability to An-
droid Security team and informed other vendors about it.
6.6 Downgrades Through Version Analysis
A dangerous pattern that we are interested in is whether
there are any security downgrades through versions. For
example, unlike a security conﬁguration upgrade, possi-
bly attributed to ﬁxing discovered bugs in earlier images,
downgrading a security conﬁguration is quite dangerous
as it will lead to a potential exposure of privileged re-
sources that were already secured on previous versions.
For each security conﬁguration, we report in Figure 7,
the percentage of security conﬁguration downgrades out
of all detected cases. As Figure 7 illustrates, a large num-
ber of conﬁgurations are indeed downgraded. For exam-
ple, 52% of inconsistent component protection mismatch
are actually caused by downgrading the protection.
USENIX Association  
25th USENIX Security Symposium  1163
7 Attacks
We would like to ﬁnd out whether the risky patterns dis-
covered can actually lead to actual vulnerabilities. To do
that, we have selected some high impact cases, and tried
to design attacks to verify whether these cases can be-
come vulnerabilities. Due to resources limitations, our
veriﬁcation is driven by the test devices that we have,
including Samsung Edge 6 Plus (5.1.1), Edge 6 (5.0.1),
Nexus 6 (5.1.1), Note2 (4.4.2), Samsung S4 (5.0.1), Mo-
toX (5.0.1), BLU Neo4 (4.2.2), and Digiland DL700D
(4.4.0). We have found 10 actual attacks, some of which
were conﬁrmed on several devices. We have ﬁled secu-
rity reports for the conﬁrmed vulnerabilities to the corre-
sponding vendors. We discuss here 6 attacks. At the end
of this section, we discuss possible impacts of 40 ran-
domly selected cases in other devices to demonstrate the
signiﬁcance of inconsistent security conﬁgurations.
Stealing emails. SecEmailSync.apk is a preloaded app
on most Samsung devices. It includes a content provider,
called "com.samsung.android.email.otherprovider",
which maintains a copy of user’s emails received
through the default Samsung email app. Our Cross-
Model and Cross-Region analyses reveal inconsistent
permission protections on this provider among several
Samsung images. The Read and Write accesses to this
provider are protected with a Signature permission
"com.samsung.android.email.permission.ACCESS_
PROVIDER" on Samsung Grand On(5.1.1, India), S6
Edge (5.1.1, UAE), and other devices. However, this
provider is not protected with any permission on several
other devices such as our test device S6 Edge (5.1.1,
Global edition). We wrote an attack app that queries
this content provider. It was able to access user’s private
emails on the victim device without any permission.
Forging premium SMS messages. The TeleService
package (com.android.phone) is preloaded on many
Samsung devices, and provides several services for
phone and calls management. A notable service is
.TPhoneService, which performs some major phone
functionalities such as accepting voice and video calls,
dialing new phone numbers, sending messages (e.g.
to inform why a call cannot be received), as well as
recording voice and video calls. Our Cross-Model and
Cross-Version analyses reveal a permission mismatch
on this critical service. On several devices, such as
Samsung S5 LTE-A (4.4.2, Korea), the access to this
service is protected with the Signature permission
com.skt.prod.permission.OEM_PHONE_SERVICE,
which makes
party apps.
such Samsung Note 2 (4.4.2, Global
this
the
to third-
However, on several other devices
edition),
service is protected with another permission
service unaccessible
app
functionalities
It
factory
reset. The
this critical broadcast
receiver.
ServiceModeApp_FB.apk
includes a broadcast
that
preloaded
per-
related to sensitive
receiver
listens
intent ﬁlters including the action ﬁlter
com.skt.prod.permission.PHONE_SERVICE for which
our analysis reveals a missing deﬁnition. We built an
attack app that deﬁnes the missing permission with
a Normal protection level. Our app was able to suc-
cessfully bind to com.android.phone.TPhoneService
and invoke the send-message API on Samsung Note 2,
allowing to forge SMS messages without the usually
required SEND_SMS.
Unauthorized
Samsung
forms various
phone settings.
ServiceModeAppBroadcastReceiver
to several
com.samsung.intent.action.SEC_FACTORY_RESET_
WITHOUT_FACTORY_UI that allows to factory reset the
phone and delete all data without user conﬁrma-
tion. Our Cross-Version analysis reveals a protection
In
mismatch for
most devices running Kitkat and below,
this re-
ceiver
is protected with the Signature permission
com.sec.android.app.servicemodeapp.permission.
KEYSTRING. However, on several Lollipop images, it is
not correctly protected. Further investigation reveals that
this is caused by the duplicate receiver pattern discussed
in Section 6.5. The declaration of the receiver has
been duplicated on the victim images such that the ﬁrst
one requires a Signature permission while the second
one does not. As discussed in Section 6.5, using this
risky pattern allows a caller app to bypass any restric-
tions on the ﬁrst declared broadcast receivers through
explicit invocation. We wrote an attacking app that
invokes the broadcast receiver explicitly with the action
com.samsung.intent.action.SEC_FACTORY_RESET_
WITHOUT_FACTORY_UI and were able to factory reset
several victim devices including the latest S6 Edge Plus
5.1.1, S6 Edge 5.0.1, and S4 5.0.1.
Accessing critical drivers with a normal per-
mission. Our Cross-Vendor
a
the system GID.
critical protection downgrade of
On some images,
such as Samsung S5 (4.4.2),
this GID is mapped to the Signature permission
com.qualcomm.permission.IZAT. Nevertheless,
on
other images (e.g., Redmi Note 4.4.2 and Digiland
DL700D 4.4.0), this GID is mapped to a Normal level
android.permission.ACCESS_MTK_MMHW,
permission
indicating that any third-party app can easily get the
system GID. Table 4 lists the device drivers that are
accessible via the system GID on the Digiland DL700D
Tablet. These are privileged drivers, but they can now be
accessible to normal apps.
Triggering emergency broadcasts without permis-
sion. CellBroadcastReceiver is a preloaded Google
analysis
reveals
1164  25th USENIX Security Symposium 
USENIX Association
Table 4: Drivers accessible to System GID
Driver
bootimg; devmap; mtk_disp; pro_info; preloader; recovery
pro_info; devmap; dkb; gps; gsensor; hdmitx; hwmsensor;
kb; logo; misc; misc-sd; nvram; rtc0; sec; seccfg ; stpwmt
touch; ttyMT2 ; wmtWiﬁ; wmtdetect
cpuctl
ACL
r –
rw-
r-x
analyses
this
discovered
a
receiver
among
PrivilegedCellBroadcastReceiver
several
For instance, on Nexus S 4G 4.1.1,
functionalities based on
app that performs critical
It registers the broadcast
received cell broadcasts.
receiver
that
allows receiving emergency broadcasts from the cell
providers (e.g., evacuation alerts, presidential alerts,
amber alerts, etc.) and displaying corresponding alerts.
This critical functionality can be triggered if the ac-
tion
android.provider.Telephony.SMS_EMERGENCY_
CB_RECEIVED is received.
Our Cross-Vendor and
protection
Cross-Version
de-
mismatch
on
vices.
this
receiver is protected with the Signature permission
android.permission.BROADCAST_SMS. However,
on
other devices (e.g., Nexus6 5.1.1 and MotoX XT1095
it
5.0.1),
is protected with the Dangerous permis-
android.permission.READ_PHONE_STATE. Our
sion
investigation reveals that this is also due to the du-
plicate receivers risky pattern (Section 6.5). On the
victim devices,
PrivilegedCellBroadcastReceiver
has been declared twice such that its ﬁrst declaration
requires a Signature permission and handles the action
android.provider.Telephony.SMS_EMERGENCY_CB
_RECEIVED, while the second declaration handles less
privileged actions and requires a Dangerous permission.
As discussed, any third-party app can bypass the permis-
sion requirement on the ﬁrst receiver through explicit
invocation. We wrote an attack app that was able to
trigger this receiver and show various emergency alerts.
Tampering with system wide settings. SystemUI is a
preloaded app that controls system windows. It handles
and draws a lot of system UIs such as top status bar,
system notiﬁcation and dialogs. To manage the top status
bar, the custom Samsung SystemUI includes a service
com.android.systemui.PhoneSettingService, which
handles incoming requests to turn on/off a variety of sys-
tem wide settings appearing on the top status bar. These
settings include turning on/off wiﬁ, bluetooth, location,
mobile data, nfc, driving mode, etc; that are usually done
with user consent. Our analysis shows a protection mis-
match for this service. On S5(4.4.2) and Note8(4.4.2),
this service is protected with a signature permission
com.sec.phonesettingservice.permission.PHONE_
SETTING, while on Note 2, 4.4.2,
the service is not
protected with any permission. We wrote an attack app
that successfully asks the privileged service to turn on
all the settings mentioned above without any permission.
Other Randomly Selected Cases. The impact of in-
consistent security conﬁgurations are signiﬁcant. In ad-
dition to end-to-end attacks we built, we also randomly
sampled 40 inconsistencies and manually analyzed what
could happen once they were exploited. Note that due to
the lack of physical devices, all we could do is just static
analysis to infer possible consequences once an exploit
succeeds. Such an analysis may not be accurate, but it is
still important for understanding the impacts of inconsis-
tent security conﬁgurations. The outcomes of our analy-
sis are shown in Table 5. Please note that we could not
assess the impact in 5 cases (heavily obfuscated code),
while we conﬁrmed that 2 cases have been hardened via