### 6.6 Downgrades Through Version Analysis

A critical pattern we investigate is whether there are any security downgrades through versions. Unlike a security configuration upgrade, which often addresses discovered bugs in earlier images, downgrading a security configuration can be extremely dangerous as it exposes previously secured privileged resources.

For each security configuration, Figure 7 illustrates the percentage of security configuration downgrades out of all detected cases. As shown, a significant number of configurations are indeed downgraded. For example, 52% of inconsistent component protection mismatches are caused by downgrading the protection.

**Figure 7: Percentage of Security Features Downgrades**

### 7. Attacks

To determine if the risky patterns discovered can lead to actual vulnerabilities, we selected some high-impact cases and designed attacks to verify their exploitability. Due to resource limitations, our verification was conducted on the following test devices:
- Samsung Edge 6 Plus (5.1.1)
- Edge 6 (5.0.1)
- Nexus 6 (5.1.1)
- Note2 (4.4.2)
- Samsung S4 (5.0.1)
- MotoX (5.0.1)
- BLU Neo4 (4.2.2)
- Digiland DL700D (4.4.0)

We identified 10 actual attacks, some of which were confirmed on multiple devices. We have filed security reports for the confirmed vulnerabilities with the corresponding vendors. Below, we discuss six of these attacks. At the end of this section, we also analyze the potential impacts of 40 randomly selected cases to highlight the significance of inconsistent security configurations.

#### 1. Stealing Emails

**SecEmailSync.apk** is a preloaded app on most Samsung devices, including a content provider called "com.samsung.android.email.otherprovider" that maintains a copy of user emails received through the default Samsung email app. Our Cross-Model and Cross-Region analyses revealed inconsistent permission protections on this provider among several Samsung images.

- **Protected Devices**: On Samsung Grand On (5.1.1, India), S6 Edge (5.1.1, UAE), and other devices, read and write access to this provider is protected by the Signature permission "com.samsung.android.email.permission.ACCESS_PROVIDER."
- **Unprotected Devices**: On several other devices, such as our test device S6 Edge (5.1.1, Global edition), this provider is not protected by any permission.

We developed an attack app that queries this content provider and successfully accessed the user's private emails without any required permissions.

#### 2. Forging Premium SMS Messages

The **TeleService** package (com.android.phone) is preloaded on many Samsung devices and provides services for phone and call management. A notable service, **TPhoneService**, performs major phone functionalities such as accepting voice and video calls, dialing new numbers, sending messages, and recording calls.

- **Protected Devices**: On devices like Samsung S5 LTE-A (4.4.2, Korea), access to this service is protected by the Signature permission "com.skt.prod.permission.OEM_PHONE_SERVICE."
- **Unprotected Devices**: On other devices, such as Samsung Note 2 (4.4.2, Global edition), this service is protected by another permission, making it unaccessible to third-party apps.

We built an attack app that defines the missing permission with a Normal protection level, allowing us to bind to **com.android.phone.TPhoneService** and invoke the send-message API on Samsung Note 2, enabling the forging of SMS messages without the required SEND_SMS permission.

#### 3. Unauthorized Factory Reset

**ServiceModeApp_FB.apk** includes a broadcast receiver that listens to intents including the action filter "com.samsung.intent.action.SEC_FACTORY_RESET_WITHOUT_FACTORY_UI," allowing a factory reset of the phone without user confirmation.

- **Protected Devices**: On most devices running KitKat and below, this receiver is protected by the Signature permission "com.sec.android.app.servicemodeapp.permission.KEYSTRING."
- **Unprotected Devices**: On several Lollipop images, the receiver is not correctly protected due to the duplicate receiver pattern discussed in Section 6.5. The first declaration requires a Signature permission, while the second does not.

We wrote an attacking app that invokes the broadcast receiver explicitly with the action "com.samsung.intent.action.SEC_FACTORY_RESET_WITHOUT_FACTORY_UI" and successfully performed a factory reset on several victim devices, including the latest S6 Edge Plus (5.1.1), S6 Edge (5.0.1), and S4 (5.0.1).

#### 4. Accessing Critical Drivers with Normal Permission

Our Cross-Vendor analysis revealed a critical protection downgrade of the system GID.

- **Protected Devices**: On some images, such as Samsung S5 (4.4.2), this GID is mapped to the Signature permission "com.qualcomm.permission.IZAT."
- **Unprotected Devices**: On other images (e.g., Redmi Note 4.4.2 and Digiland DL700D 4.4.0), this GID is mapped to a Normal level permission "android.permission.ACCESS_MTK_MMHW," allowing any third-party app to easily get the system GID.

**Table 4: Drivers Accessible to System GID**

| Driver | ACL |
|--------|-----|
| bootimg | r – |
| devmap | rw- |
| mtk_disp | r-x |
| pro_info | r– |
| preloader | r– |
| recovery | r– |
| dkb | r– |
| gps | r– |
| gsensor | r– |
| hdmitx | r– |
| hwmsensor | r– |
| kb | r– |
| logo | r– |
| misc | r– |
| misc-sd | r– |
| nvram | r– |
| rtc0 | r– |
| sec | r– |
| seccfg | r– |
| stpwmt | r– |
| touch | r– |
| ttyMT2 | r– |
| wmtWi-Fi | r– |
| wmtdetect | r– |
| cpuctl | r– |

#### 5. Triggering Emergency Broadcasts Without Permission

**CellBroadcastReceiver** is a preloaded Google app that registers a broadcast receiver to receive emergency broadcasts from cell providers (e.g., evacuation alerts, presidential alerts, amber alerts) and display corresponding alerts.

- **Protected Devices**: On some devices, this receiver is protected by the Signature permission "android.permission.BROADCAST_SMS."
- **Unprotected Devices**: On other devices (e.g., Nexus6 5.1.1 and MotoX XT1095 5.0.1), it is protected by the Dangerous permission "android.permission.READ_PHONE_STATE."

We wrote an attack app that successfully triggered this receiver and displayed various emergency alerts.

#### 6. Tampering with System-Wide Settings

**SystemUI** is a preloaded app that controls system windows, including the top status bar, system notifications, and dialogs. It includes a service, **com.android.systemui.PhoneSettingService**, which handles incoming requests to turn on/off various system-wide settings.

- **Protected Devices**: On S5 (4.4.2) and Note8 (4.4.2), this service is protected by the Signature permission "com.sec.phonesettingservice.permission.PHONE_SETTING."
- **Unprotected Devices**: On Note 2 (4.4.2), the service is not protected by any permission.

We developed an attack app that successfully turned on all the mentioned settings without any required permissions.

### Other Randomly Selected Cases

The impact of inconsistent security configurations is significant. In addition to the end-to-end attacks we built, we also randomly sampled 40 inconsistencies and manually analyzed their potential consequences. Due to the lack of physical devices, our analysis was static and may not be entirely accurate, but it still provides important insights into the impacts of inconsistent security configurations.

**Table 5: Outcomes of Analysis**

| Case | Potential Impact |
|------|------------------|
| ...  | ...              |

Please note that we could not assess the impact in 5 cases (heavily obfuscated code), while we confirmed that 2 cases have been hardened via recent updates.