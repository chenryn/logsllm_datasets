=τ t′
i−1 =τ t′.
i−1 such that t′
ti−1 =τ t, and ¬blocking(ti−1, Pαi−1). Since t = t′.out(cr , x), we also have ti−1 = t′
(1)
In addition, note that since the property is clearly satisfied at the 0th step, i ≥ 1. Hence, it holds for i − 1, i.e. there exists ti−1 such that
Then, for all t′
i
The same sequence of actions ti−1 is blocking at step i and not at step i − 1, which differs only by the vote of of ai. This lets us construct
at step
an attack on privacy, which constitutes a contradiction. Indeed, by assumption 5, we may add a voter b (cid:60) dom(α), who votes for v′
i
i − 1, and for vi at step i, and there exists tr such that
i−1 (=τ t′), by (1), blocking(t′
i−1.out(cr , x) for some t′
i .out(cr , x), Pαi) holds.
i−1 (=τ t′), we have shown that blocking(t′
i−1.tr′.out(cr , x),ψ) ∈ trace(Pαi−1∪{b(cid:55)→v′
i }).
Therefore, the processes Pαi∪{b(cid:55)→vi } and Pαi−1∪{b(cid:55)→v′
i .out(cr , x), Pαi), and thus for all tr′′ =τ tr and all ψ ′, (t′
• there exists tr′ =τ tr and ψ such that (t′
i .tr′′.out(cr , x),ψ ′) (cid:60)
• for all t′
i
trace(Pαi∪{b(cid:55)→vi }).
i } are not trace equivalent. Since they only differ by the votes of ai and b, who
respectively vote for vi, v′
Thus, for all i, there exists ti such that ti =τ t, of the form t′
i .out(cr , x), such that ¬blocking(ti , Pαi). In other words, there exists ϕi such
that (ti , ϕi) ∈ trace(Pαi). By assumption 1, there exists Vi such that ϕi(x) ∈ R(ρ(Vi)), i.e. result(ti , ϕi , Vi). Let V ′ def= Vm. Note that V0 = V .
For all i ∈(cid:74)0, m−1(cid:75), αi and αi +1 only differ by the vote of ai +1, which is v′
i +1|}) =
ρ(Vi +1 ⊎ {|vi +1|}).
That is to say, by assumption 3, that ρ(Vi) ∗ ρ({|v′
i +1|}) = ρ(Vi +1) ∗ ρ({|vi +1|}).
Therefore, by rewriting these m equalities successively, we have
i +1 in αi +1 and vi +1 in αi. Hence, by F, we have ρ(Vi ⊎{|v′
, vi on the right, this breaks privacy, which contradicts the hypotheses.
on the left and v′
i
=τ t′
i
i.e., by assumption 3,
By definition, this means
which concludes the proof.
ρ(V0) ∗ ρ({|v
ρ(V) ∗ ρ({|v
′
m|}) = ρ(Vm) ∗ ρ({|v1|}) ∗ . . . ∗ ρ({|vm|}),
′
1|}) ∗ . . . ∗ ρ({|v
i | i ∈(cid:74)1, m(cid:75)|}) = ρ({|vi | i ∈(cid:74)1, m(cid:75)|}) ∗ ρ(V
ρ(V) ∗ ρ(Vchange) = ρ(Vwanted) ∗ ρ(V
′)
′
′).
□
Lemma A.3 (F F implies V with a neutral vote). Under assumptions 1, 2, 3, 4, 5, and assuming the existence of a neutral vote (assumption 6),
F F ⇒ V
Proof. Under assumption 6, there exists a neutral vote vneutral. Assume F F holds.
Let α be an affectation of votes, and let (t′.out(cr , x), ϕ) ∈ trace(Pα). Let t
def= t′.out(cr , x). To prove individual verifiability, we need to
show that the result in this trace contains at least the (intended) votes of the honest voters. That is to say, we must show that there exists Vc
such that ϕ(x) ∈ R(ρ({|v | ∃a. Voted(a, v) ∈ t|} ⊎ Vc)).
def= {|v | ∃a. Voted(a, v) ∈ t|} be the multiset of all intended honest votes in t. Let k
By assumption 1, there exists V such that ϕ(x) ∈ R(ρ(V)). We have result(t, ϕ, V).
Let Vwanted
By F F, there exists a multiset Vc such that ρ(V) ∗ ρ(Vchange) = ρ(Vwanted) ∗ ρ(Vc).
By assumption 3, ρ(Vchange) = ρ({|vneutral|})k. As, by assumption 6, ρ({|vneutral|}) is neutral for ∗, so is ρ(Vchange).
Therefore, ρ(V) = ρ(Vwanted) ∗ ρ(Vc) = ρ(Vwanted ⊎ Vc), which proves the claim.
Lemma A.4 (F F implies V with a special vote). Under assumptions 1, 2, 3, 4, 5, and assuming the existence of a vote that is counted
def= |Vwanted|, and Vchange
def= k · vneutral.
□
separately (assumption 7),
F F ⇒ V
17
Proof. Under assumption 7, there exists a special vote vspecial which is counted separately in the result.
Assume F F holds.
Let α be an affectation of votes, and let (t′.out(cr , x), ϕ) ∈ trace(Pα). Let t
def= t′.out(cr , x). To prove individual verifiability, we need to
show that the result in this trace contains at least the (intended) votes of the honest voters. That is to say, we must show that there exists Vc
such that ϕ(x) ∈ R(ρ({|v | ∃a. Voted(a, v) ∈ t|} ⊎ Vc)).
def= {|v | ∃a. Voted(a, v) ∈ t ∧ v (cid:44) vspecial|} be the multiset of all intended honest votes in t that are not vspecial.
By assumption 1, there exists V such that ϕ(x) ∈ R(ρ(V)). We have result(t, ϕ, V).
Let Vwanted
Let k
By F F, there exists a multiset Vc such that ρ(V) ∗ ρ(Vchange) = ρ(Vwanted) ∗ ρ(Vc).
We may rewrite this equality as ρ(V ⊎ k · vspecial) = ρ(Vwanted ⊎ Vc) by assumption 3.
Assumption 7 then lets us deduce that
def= |Vwanted|, and Vchange
def= k · vspecial.
(V ⊎ k · vspecial)(vspecial) = (Vwanted ⊎ Vc)(vspecial).
Yet, Vwanted(vspecial) = 0 by definition. Therefore, Vc(vspecial) ≥ k, and we may write Vc = V ′
′
c ⊎ k · vspecial),
ρ(V ⊎ k · vspecial) = ρ(Vwanted ⊎ V
c ⊎ k · vspecial for some V ′
c . We then have
which implies by assumption 7 that
ρ(V) = ρ(Vwanted ⊎ V
′
c ).
Since Vwanted contains all the intended honest votes different from vspecial, it remains to be proved that V ′
c contains sufficiently many
instances of vspecial.
Let k′ def= |{|Voted(a, vspecial) ∈ t
Let v ∈ V such that v (cid:44) vspecial. Let V ′
By F F, there exists V ′′
c such that
def= k′ · v.
change
| a ∈ A|}| the number of intended votes for vspecial in t; and V ′
def= k′ · vspecial.
wanted
i.e., by assumption 3,
By assumption 7, we then have
ρ(V) ∗ ρ(V
′
change) = ρ(V
′
wanted) ∗ ρ(V
′′
c ),
ρ(V ⊎ k
′ · v) = ρ(k
′ · vspecial ⊎ V
′′
c ).
As before, since v (cid:44) vspecial, this means that V(vspecial) ≥ k′.
vspecial (cid:60) Vwanted, (V ′
Therefore we have
We already know that ρ(V) = ρ(Vwanted ⊎ V ′
c = V ′′′
c )(vspecial) ≥ k′, i.e. V ′
(V ⊎ k
′ · vspecial ⊎ V
′ · v)(vspecial) = (k
c ). By applying assumption 7 again, (Vwanted ⊎ V ′
c ⊎ k′ · vspecial for some V ′′′
′′
c )(vspecial).
c
.
c )(vspecial) = V(vspecial) ≥ k′. Since
which concludes the proof.
ρ(V) = ρ(Vwanted ⊎ k
′ · vspecial ⊎ V
′′′
c
) = ρ({|v | ∃a. Voted(a, v) ∈ t|} ⊎ V
′′′
c
),
□
The next theorem corresponds to Theorem 3.11.
Theorem A.5 (Privacy implies individual verifiability when there is a neutral or a special vote). Under assumptions 1, 2, 3, 4, 5,
and assuming the existence of either a neutral vote or a special vote counted separately (assumptions 6 or 7),
P ⇒ V
Proof. This follows directly from Lemmas A.1, A.2, A.3, and A.4.
□
Appendix B COMPUTATIONAL PROOF
B.1 Assumptions summary
We first recall some of the hypotheses used in the proofs, that were presented in Sections 2, 4.1 and 4.3. Some of these assumptions differ
depending on whether the scheme is id-based or cred-based, or apply only to one of these two classes of schemes. In such cases, the
differences will be clearly stated.
18
(1) The voting scheme has the piecewise tally property. In the case of id-based schemes, the assumption is that for all boards BB1, BB2, if
sk is the election key and U is a list of registered users and credentials, and if
then the tally can be computed separately:
ValidTally(BB1 ⊎ BB2, sk, U) ∧
∀b ∈ BB1. ∀b′ ∈ BB2. openid(b) (cid:44) openid(b′)
T ally(BB1 ⊎ BB2, sk, U) = Tally(BB1, sk, U) ∗ Tally(BB2, sk, U).
In the case of credential-based schemes, the assumption is that for all boards BB1, BB2, if sk is the election key and U is a list of
registered users and credentials, and if
then the tally can be computed separately:
∀b ∈ BB1. ∀b
′ ∈ BB2. opencred(b, sk, U) (cid:44) opencred(b
′
, sk, U)
T ally(BB1 ⊎ BB2, sk, U) = Tally(BB1, sk, U) ∗ Tally(BB2, sk, U).
(2) In the case of id-based schemes only, the tally only counts ballots cast with registered ids, i.e. ∀BB, sk, U. Tally(BB, sk, U) =
Tally(BB′, sk, U) where BB′ = [b ∈ BB | (openid(b),∗) ∈ U].
(3) Registering more voters does not change the tally. In the case of id-based schemes, the assumption is that for all board BB, election key
sk and list of voters U, if U, U′ have no id in common and ∀b ∈ BB. (openid(b),∗) (cid:60) U′, then Tally(BB, sk, U) = Tally(BB, sk, U ∩ U′).
In the case of credential-based schemes, the assumption is that if U, U′ share no credentials and∀b ∈ BB. (∗, opencred(b, sk, U∪U′)) (cid:60) U′,
then Tally(BB, sk, U) = Tally(BB, sk, U ∪ U′).
for all election keys (pk, sk), if BB = [Vote(idi , credi , pk, vi)|i ∈(cid:74)1, n(cid:75)], then
(4) The voting scheme is correct,i.e. for all distinct identities U = id1, . . . , idn, and credentials cred1, . . . , credn, for all votes v1, . . . , vn,
Tally(BB, sk, U) = ρ(v1, . . . , vn).
(5) There exists a neutral vote vneutral ∈ V, such that ρ({vneutral}) is neutral for ∗.
(6) Given a multiset of valid votes V and a result r, it is possible to efficiently decide whether r can be decomposed into ρ(V) ∗ ρ(V ′) for
some multiset V ′ of valid votes.
That is to say there exists a PPTM D such that
∀r , V . D(r , V) = 1 ⇐⇒ ∃V
′
. r = ρ(V) ∗ ρ(V
′).
In the proof that privacy implies individual verifiability against a dishonest board provided the voters are careful, we also use the following
two hypotheses:
(7) If a voter’s intended ballot is indeed the one which will be selected from the board by the revote policy, then this voter must be
satisfied with the board. Formally, for all registered voter id with credential cred, for all ballot b, voter knowledge L, and board BB,
• For id-based schemes: if the revote policy is to count the last (resp. first) ballot cast for each id, the assumption is that if the last
(resp. first) element of L is (b,∗), and the last (resp. first) ballot b′ ∈ BB such that openid(b′) = id is b, then VerifVoter(id, cred, L, BB)
holds.
• For credential-based schemes: if the revote policy is to count the last (resp. first) ballot cast for each credential, the assumption is
that if the last (resp. first) element of L is (b,∗), and the last (resp. first) ballot b′ ∈ BB such that opencred(b′, sk, U) = cred is b, then
VerifVoter(id, cred, L, BB) holds.
(8) If a voter id is satisfied with a board BB, then id remains satisfied with any board obtained from BB by adding new ballots that do not
interfere with id’s given the revote policy.
Formally, for all board BB, election key pk, registered voter id with credential cred and knowledge L, for all BB′,
• For id-based schemes: the assumption is that if ∀b ∈ BB′. openid(b) (cid:44) id then
VerifVoter(id, cred, L, BB) ⇐⇒ VerifVoter(id, cred, L, BB ⊎ BB′).
• For credential-based schemes: the assumption is that if ∀b ∈ BB′. opencred(b, sk, U) (cid:44) cred then
VerifVoter(id, cred, L, BB) ⇐⇒ VerifVoter(id, cred, L, BB ⊎ BB′).
We will also assume, depending on whether the voting scheme is id or credential based, that no polynomial adversary wins ExpValidTally
with non-negligible probability, i.e.
∀A. P(cid:104)
∀A. P(cid:104)
(λ) = 1(cid:105) is negligible,
ExpNMA (λ) = 1(cid:105) is negligible,
A
ExpValidTally
or that no polynomial adversary wins ExpNM with non-negligible probability,i.e.
where ExpValidTally is defined on Figure 6 and ExpNM is defined on Figure 7.
19
vote(id, v)
Ov,f
if (id, ∗) ∈ U\CU ∧ (id, ∗) (cid:60) Voted then
b ← Vote(id, credid, pk, v)
BB ← BB∥b
Voted ← Voted∥(id, v)
return b
where (id, credid) ∈ U
vote(id, v0, v1)
Op,f
if (id, ∗) ∈ U\CU ∧ (id, ∗) (cid:60) V0 ∪ V1 then
b ← Vote(id, credid, pk, vβ)
BB ← BB∥b
V0 ← V0∥(id, v0)
V1 ← V1∥(id, v1)
return b
where (id, credid) ∈ U
Figure 12: Oracles for the individual verifiability and privacy games (revote policy = first vote)
if
then
∀A.
(cid:12)(cid:12)(cid:12)P(cid:104)
Exppriv,0
A (λ) = 1(cid:105) − P(cid:104)
ExpverifA (λ) = 1(cid:105)
∀A. P(cid:104)
A (λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) is negligible,
Exppriv,1
B.2 Privacy implies individual verifiability with a honest board (proof of Theorem 4.4)
We consider the case of protocols where the revote policy is to count only the last ballot (for each id or credential) or the first ballot. In the
case of the last ballot, the definitions of the individual verifiability and privacy games can be found on Figures 4 and 5. In the case of the first
ballot, we adapt these definitions by replacing the oracles Ov
, described on Figure 12. These two oracles
are analogous to Ov
, but keep only the first votes from each voter in the lists V0, V1, Voted, instead of the last.
with Ov,f
vote