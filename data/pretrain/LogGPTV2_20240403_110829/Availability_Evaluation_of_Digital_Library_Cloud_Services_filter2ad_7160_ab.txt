### Table III: Model Parameters
| Parameters | Values |
|------------|--------|
| MTTF       | 6865.3 hours |
| MTTR       | 10 minutes |

### Parameterization of RBD and SPN Availability Models
The mean time to failure (MTTF) obtained from the accelerated test was used to parameterize the Reliability Block Diagram (RBD) and Stochastic Petri Net (SPN) availability models, as described in the previous section. Additionally, Table I presents the MTTF values for other components used in the RBD models.

Based on the architecture depicted in Figure 2 (baseline), an RBD model was constructed. Using a hierarchical approach, the front-end was modeled first (see Figure 4). The availability of the front-end was then calculated. Next, the Node represented by the digital library service (see Figure 4) was modeled, and its availability was computed. Finally, the combined model, as shown in Figure 6, was analyzed.

### Table I: RBD Parameters
| Parameters        | Hw   | OS   | VM   | Management Tool | Digital Library |
|-------------------|------|------|------|-----------------|-----------------|
| MTTF              | 8760 h | 1440 h | 788.4 h | 2880 h          | 6865.3 h        |
| MTTR              | 100 min | 1 hr | 1 hr | 10 min         | 10 min          |

### Steady-State Availability
Steady-state availability quantifies the combined effect of both failure and repair processes in a system. It can be calculated using Equation 6:

\[
\text{Availability} = \frac{\text{MTTF}}{\text{MTTF} + \text{MTTR}}
\]

### Results and Discussions
This section presents the results and discussions from the digital library cloud service. First, the failure rates under accelerated conditions were determined. Then, the availability model was parameterized, and an analysis was performed. Based on this analysis, the availability of the digital library service deployed in the cloud computing environment was obtained. By analyzing the availability results, a designer can verify the respective downtime and identify the system parts that most affect the system's availability.

#### Test Environment
The test environment consisted of three computers with identical configurations (CPU: Intel i5 1.2 GHz, RAM: 2048 MB, NIC: 100 Mbps). One computer generated traffic, another served as the management cloud server (front-end), and the third hosted the digital library service (node). All computers were interconnected via an Ethernet switch. The management server used the open-source project OpenNebula [13], and the digital library service was DSpace [14]. OpenNebula provides features for managing virtual machines and private clouds, while DSpace is an open-source software for creating open digital repositories.

### Table IV: RBD Availability
| Model             | Frontend | Node | Frontend + Node |
|-------------------|----------|------|-----------------|
| Availability (%)  | 99.785029 | 99.767472 | 99.553288      |
| Downtime (hours) | 18.83    | 20.36 | 39.13           |

The downtime increases due to the series composition, i.e., non-redundancy. Through these results, designers in cloud computing environments can define service policies to balance availability and costs.

### Redundant Models and Scenarios
To improve availability levels, two redundant models were considered in two scenarios:

1. **Scenario 1**: 
   - **Cold Standby (Sc1.1)**: A spare VM is activated when a failure is detected in the main VM.
   - **Hot Standby (Sc1.2)**: Two digital library services (VMs) run in parallel.

   These strategies aim to increase the availability levels and reduce outages, making the service more reliable for library users. Figure 9 shows the availability analysis results in terms of the number of nines for the baseline scenario and the two redundant strategies.

2. **Scenario 2**:
   - **Redundancy in Front-End**: Strategies with cold standby (Sc2.1) and hot standby (Sc2.2) were considered for the front-end. Figure 10 shows the availability results in number of nines for each redundancy. The downtime difference between hot and cold redundant strategies is approximately 87.4%.

3. **Scenario 3**:
   - **Cold Standby Redundancy in Front-End and Node**: This scenario evaluates the availability levels based on the time to activate the spare redundancy. Figure 11 presents the availability results considering the number of nines. The availability decreases over time due to the increased activation time for the spare redundancy.

### Related Research
- **Yang Jie and Liu Wanjun [16]**: Described a short review of digital libraries through cloud computing, defining concepts about cloud-based architecture on service, application, and resource layers.
- **ShaÔ¨Å et al. [17]**: Reviewed how cloud computing can contribute to digital and virtual library technologies, outlining advantages and disadvantages.
- **Victor Jess [3]**: Presented a file-storage service implemented in a private/hybrid cloud-computing environment, analyzing response times.
- **Weiming [18]**: Proposed a platform as a service for fast development and deployment of digital libraries, ensuring reliability, security, and other quality attributes.
- **Papadmapriya and Rajmohan [21]**: Proposed a model for evaluating web service quality, defining attributes and metrics.
- **Wei et al. [22]**: Used a hierarchical method to propose hybrid models combining RBDs and General Stochastic Petri Nets for dependability analysis in cloud computing.

### Conclusion
This work presented a hierarchical modeling method to analyze the availability of digital library management. An accelerated life testing model was used to obtain the availability parameters, and a hierarchical model was created to estimate the availability of the cloud computing architecture. Redundant models were used to compare critical levels of availability, aiming to provide high-quality services and prevent outages. The results show that the proposed approach can improve the availability of digital library services in cloud computing. Future work will explore the impact of different redundancy models, including associated costs and live migration mechanisms.

### References
[References are listed as in the original text, with no changes made.]