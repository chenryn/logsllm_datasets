marks that n2 is a VAR_DECL, or an ASSIGN_EXP node.
JAW
Another aspect to consider is the number of attacker-
controllable items within a request. For example, Program 3
of Figure 4 shows a more complex example where the attacker
can also control the content of the request body, increasing
the ﬂexibility to create an exploit for the vulnerable behav-
ior. For this, a query can cluster vulnerable lines of code that
belong to the same HTTP request, making use of the PDG
dependencies among elements of the same request. Then, the
query can count the number of attacker-controllable injection
points (see, e.g., the two injection points in line 6 of Program
3 as well as the injection point in line 4).
4
In this section, we present JAW, a framework to study client-
side CSRF vulnerabilities using HPGs. Starting from a seed
URL of a web site, JAW visits web pages using a JavaScript-
enabled web crawler to collect the web resources. During the
visit, JAW also collects run-time state values. Then, given
a list of user-deﬁned semantic types and their mapping to
JavaScript language tokens, JAW constructs the HPG. The
construction has two phases. First, JAW identiﬁes external
JavaScript used by the program and processes it in isolation
to extract a symbolic model. Then, it constructs the graph
of the rest of the JavaScript code, and link elements of the
JavaScript program to the state values. Finally, JAW analyzes
client-side CSRF by executing queries on the HPG (§3.3).
Figure 5 shows an overview of the JAW’s architecture.
4.1 Data Collection
The data collection module performs two tasks: crawling to
discover URLs from different user states, and collecting the
JavaScript code and state values for each web page found.
Input. The input of the data collection module is a seed URL
of the web application under test, and, optionally, test cases
to pass the user login, e.g., as scripted Selenium tasks [17] or
via trace recording [15, 16].
Crawler. We developed a crawler that uses a headless in-
stance of Chrome [10] controlled via Selenium [17]. Starting
from the seed URL, the crawler visits the web application to
collect web resources and run-time execution data. It follows
the iterative deepening depth-ﬁrst search strategy, and termi-
nates when no other URLs are found, or when its allocated
time budget runs out (default is 24h). Optionally, if provided
as input, it executes test cases before the crawling session.
JavaScript Code and State Values. When visiting each
page, the crawler stores the web resources and state values ev-
ery ti = 10 seconds for m = 2 times (conﬁgurable parameters).
The crawler collects the HTML page, JavaScript program,
ﬁred events, HTTP requests and responses, and the JavaScript
properties explicitly shown in (bottom left of) Figure 2 for
each ti interval. While JavaScript properties are extracted via
USENIX Association
30th USENIX Security Symposium    2531
Figure 5: Architecture of JAW.
the Selenium interface, we developed a Chrome extension for
our crawler that resorts to function hooking to intercept calls
to the addEventListener for collecting events and to the
chrome.webRequest API to intercept the network trafﬁc.
4.2 Graph Construction
JavaScript code and state values collected are next used to
build a HPG. The built graph is imported into a Neo4j [14]
database allowing for ﬁne-grained, declarative path traversals
to detect and study client-side CSRF. This section delineates
technical details for constructing HPGs.
Normalizing JavaScript Code. As a ﬁrst step, JAW creates
a normalized JavaScript program by concatenating code seg-
ments inside the script tags and HTML attributes (i.e., inline
JavaScript code), preserving the execution order of program
segments. When combining inline code, JAW replaces inline
event handler registration with addEventListener API.
Library Detection. To identify libraries, we use Library De-
tector [13], a tool that searches for known library signatures
inside the execution environment (e.g., global variables)3.
HPG Construction. JAW constructs HPGs as follows. First,
a graph is created for the symbolic modeling of each detected
library. This step is skipped if a symbolic model for the library
already exists. Then, it creates a graph for the program under
analysis. Regardless the use of the graph, the rules to construct
a HPG do not change, as presented next.
1. AST—JAW uses Esprima [7], a standard-compliant EC-
MAScript [11] parser to generate the AST of the normalized
source code. The output of Esprima is a JSON representation
of the AST. In this representation, a node is a key-value dic-
tionary with a type property (e.g., VAR_DECL) and edges
are represented with ad-hoc dictionary keys. We mapped the
JSON output to AST nodes and AST edges of our graph.
2. CFG— We extensively reviewed open-source CFG gen-
erators, such as escontrol [5], styx [18], or ast-ﬂow-graph [1],
and selected Esgraph [6] because of its popularity, and compli-
ance with Esprima. Starting from an AST, Esgraph generates
a CFG where nodes are AST nodes for statements or dec-
larations, and an edge is labeled with true or false, for a
conditional branch, or ε for a node of the same basic block.
3. PDG—JAW uses dujs [4], a def-use analysis library
based on Esgraph. We modiﬁed dujs to add support for global
variables, closures, and anonymous function calls. The output
of dujs is a list of def-use relationships for each variable v
3We refer interested readers to Appendix A.2.
between the AST edges, that JAW import as data dependence
edges Dv in our HPG. For the control dependence edges, JAW
calculates post-dominator trees [58] from the CFG, one for
each statement s. Then, JAW maps each edge of the tree to Ct
or Cf for the true or false branch, respectively.
4. IPCG—JAW generates the IPCG as follows. During
the construction of the AST and CFG, JAW keeps track of
all function deﬁnitions and call sites. Then, it associates a
call site to the function deﬁnition(s) it may invoke. There are
ﬁve types of call expressions in JavaScript: function calls on
the global object (e.g., foo()), property calls (e.g., a.foo(),
or a[‘foo’]()), constructor calls (e.g., new Foo()), invoca-
tions via the call() [9], and apply() method [8]. For all
cases, the actual function deﬁnition name may be aliased. We
resolve the pointers using our PDG, and connect the call edge
accordingly. If the value of the pointer is conditioned, we
connect an edge to each respective function deﬁnition.
5. ERDDG—For the generation of the ERDDG, JAW
keeps track of event dispatches and handler registrations dur-
ing the creation of the AST and the CFG. For each event
handler found, JAW creates a registration edge that connects
the top-level AST node (i.e., CFG node) to the handler func-
tion, and a dependency edge connecting the handler function
to statements of the body. To associate each event dispatch
to a registration site, we check if they target the same DOM
element. For this, we resolve the pointer on which the event
is dispatched, and the pointer on which the handler is regis-
tered leveraging our PDG, and check if they refer to the same
variable declaration or different variables with verbatim or
semantically same values. We use the DOM snapshot to check
if two different DOM queries can semantically target the same
element. For example, an element can be queried with its id,
or alternatively its name attribute. Once we determine that
the pointers reference the same element, we connect an edge
between the dispatch and registration sites.
6. Semantic Types and Propagation— The input for this
step is a mapping T between a semantic type t and a sig-
nature for AST node σ, e.g., we map the type WIN.LOC to
the JavaScript property window.location. For each pair
(t,σ) ∈ T , JAW stores each type t to the AST node that is
matching the signature σ. Then, JAW propagates the type t
through the HPG.
Algorithm 1 propagates forward a type t from a node n
to other nodes. First, the function propagateLeft assigns
the type t to the variable v on the left-hand side (e.g., of
an assignment), if any, and returns it. Then, the function
2532    30th USENIX Security Symposium
USENIX Association
Algorithm 1: Forward semantic type propagation
inputs :Node n with a variable having semantic type t.
outputs :Propagates semantic types and returns the last tainted node.
function propagateForward(n, t):
v ← propagateLeft(n, t) // taint left-hand side
nt ← n // last tainted node
P ← propagateByPDG(n, v, t) // tainted PDG paths
for pi ∈ P do
nt ← pi[pi.length− 1] // last CFG-level tainted node
vt ← getRightHandSideTaintedVariable(nt , t)
if hasSymbolicFunctionCall(nt ) and hasSemanticType(nt ,
“o<-i”) then
o ← propagateLeft(nt , t)
propagateForward(o, t) // recursion
end
if hasCallExpressionWithCallArgOfType(nt , t) then
c ← traverseCallEdge(nt , vt , t) // call def param
ret ← propagateForward(c, t) // returned variable
if isRetStmt(ret) and hasSemanticType(ret, t) then
vle f t ← propagateLeft(nt , t)
if vle f t is not null then
propagateForward(vle f t , t) // recursion
end
end
end
if hasDispatchEdgeWithArgOfType(nt , t) then
e ← traverseDispatchAndRegistrationEdges(nt , vt , t) //
handler param
propagateForward(e, t)
end
end
return nt // last tainted node
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
propagateByPDG propagates t following PDG edges and
returns the visited paths P. Then, for each node nt at the
end of the path pi ∈ P, we distinguish three cases. The ﬁrst
case is that nt is a function call that is modeled by the spe-
cial semantic types assigned during the symbolic modeling.
If so, we taint the output variable o, and recursively call
propagateForward for o. Second, nt is a call expression
having an IPCG edge. In this case, we taint the parameter
c on the function deﬁnition corresponding to the argument
tainted on the call site, and call propagateForward for c.
Then, we check if the last tainted node from the context of
the function deﬁnition is a tainted return statement. If so, we
call propagateForward for the variable vle f t on the call site
that holds the returned result. Third, nt is an event dispatch
expression that passes tainted data. In this case, we jump the
dispatch and registration edges, taint the corresponding event
variable, and call propagateForward for the variable. This
process terminates when none of the above criteria holds.
JAW performs the semantic type propagation when creating
both the HPG for the symbolic modeling of a library and the
HPG of the rest of the code. When creating the HPG for the
rest of the code, the semantic type mapping T includes the
mapping created during the symbolic modeling.
Symbolic Modeling. The output of this step is a mapping
of semantic types and AST nodes, which is used during the
construction of a HPG for the program under analysis. Sym-
bolic modeling starts with the construction of a HPG from
the library source code. Then, after the propagation of the
semantic types, JAW searches for function deﬁnitions with
intra-procedural input-output relationships. More speciﬁcally,
JAW identiﬁes all non-anonymous function expressions with
at least one input parameter, and track the value of its re-
turn statement(s), if any, through a backward program slicing
approach. At a high level, we start from where a value is re-
turned, ﬂow through where it is modiﬁed, and end at where it
is generated leveraging the PDG, CFG, IPCG, and ERDDG
graphs. If the returned variable, say o, has a PDG control de-
pendency to a function input, say i, we assign the type o ~ i to
the function. If we establish a PDG data dependency, we mark
it with o ← i. Finally, JAW selects all function expression and
object property nodes with at least one semantic type, that
will be used in the HPG construction of the JavaScript code.
5 Evaluation
The overarching goal of our evaluation is to study client-side
CSRF vulnerabilities and to assess the efﬁcacy and practi-
cality of JAW. We run JAW on 4,836 web pages, crawled
from 106 popular web applications, generating HPGs for
228,763,028 LoC. During this process, we discover 12,701
forgeable client-side requests split across 87 applications. We
ﬁnd that seven applications suffer from at least one zero-day
client-side CSRF vulnerability that can be exploited to per-
form state-changing actions and violate the server’s integrity.
Before presenting the evaluation results, we discuss the
experimental setup (§5.1) and show properties of problem
space and how JAW tackled them (§5.2). Then, we report the
ﬁndings of our experiments (§5.3), and ﬁnally, conclude with
the analysis of JAW’s results (§5.4).
5.1 Experimental Setup and Methodology
Testbed. We select web applications from the Bitnami
catalog [2] that offers ready-to-deploy containers of pre-
conﬁgured web applications. We choose Bitnami applications
due to their popularity (e.g., see [19]), diversity, and use by
prior work (e.g., see [69]). At the time of the evaluation, Bit-
nami contains 211 containers. We discard 105 containers
without web applications and duplicates, e.g., the same web
application using different web servers. The remaining 106
web applications are: 23 content management system, 15 ana-
lytics, 11 customer relationship management, ten developer
tools and bug tracking, eight e-commerce, eight forum and
chat, ﬁve email and marketing automation, four e-learning,
three media sharing, two project management, two account-
ing and poll management, and 15 other. The complete list of
web applications is in Appendix B.1, among which we have
WordPress, Drupal, GitLab, phpMyAdmin, and ownCloud.
Then, for each web application, we created one user account
for each supported levels of privilege and a Selenium test case
to perform the login. In total, we created 136 test scripts,
ranging from one to ﬁve test cases per application.
JAW Inputs. The inputs of JAW are the seed URLs, the Se-
lenium test cases, and a semantic type mapping. The seed
URLs contain the URLs for the user login (total of 113 login
URLs), whereas the test cases are the ones we prepared when
conﬁguring the testbed. Then, for all web applications, we
used the semantic types listed in Table 4 in Appendix A.1.
Methodology for Client-side CSRF Detection. We de-
USENIX Association
30th USENIX Security Symposium    2533
ployed the web applications under evaluation locally, and
instantiated JAW against each of the targets. After the data
collection and creation of the HPGs, we run a set of queries to
identify attacker-controllable requests. We then use additional
queries to identify the request ﬁelds under the control of the
attacker and the type of control. We assess the accuracy of the
query results via manual veriﬁcation. For each forgeable re-
quest, we load the page in an instrumented browser and verify
whether the manipulated inputs are observed in the client-side
requests. For example, if the request uses data values of type
WIN.LOC, we inject a token in the vulnerable page URL and
search the token in the outgoing request. After conﬁrming the
forgeability of the request, we look for its use in an attack.
First, we search for server-side endpoints performing security-
relevant state-changing actions, such as modifying data on
the server-side storage. Then, we construct a string that, when
processed by the vulnerable page, it will result in a request
towards the identiﬁed endpoint. Finally, we pack the string
into a malicious URL and verify whether the attack works
against a web application user with a valid session, who clicks
on the URL.
Methodology for Impact of Dynamic Snapshotting. We
performed additional experiments to assess the impact of our
dynamic snapshotting approach in (i) vulnerability detection,
and (ii) HPG construction. First, we prepared a variant of
JAW, hereafter referred to as JAW-static, which follows a
pure static approach for HPG construction and analysis (§3.1).
Speciﬁcally, JAW-static does not consider the following dy-
namic information: ﬁred events, handler registrations, HTTP
messages, global object states, points-to analysis for DOM
queries, dynamic insertion of script tags, and the DOM tree