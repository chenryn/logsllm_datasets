Definition 4
(Indistinguishability of states). For
a set of escape hatches E say that states s and s(cid:48) are indis-
tinguishable by E up to (cid:96) (written s I(E, (cid:96)) s(cid:48)) if ∀(e, (cid:96)(cid:48)) ∈ E
such that (cid:96)(cid:48) (cid:118) (cid:96) it holds that s(e) = s(cid:48)(e).
This allows us to deﬁne our security condition.
Definition 5
(Composite delimited release). For
origins O, a system (cid:104)S,(cid:55)→(cid:105) satisﬁes composite delimited re-
lease if for every level (cid:96) and any states s1 and s2 such that
s1 ∼(cid:96) s2 and s I(Compose(O), (cid:96)) s(cid:48) then whenever s1 ⇓ s(cid:48)
and s2 ⇓ s(cid:48)
2 it holds s(cid:48)
1 ∼(cid:96) s(cid:48)
2.
1
Example.
Assume variables x and y with levels Γ(x) = {A} and
Γ(y) = {B}. Consider origin A with declassiﬁcation policy
E(A) = {(x + y,⊥)}. A allows declassiﬁcation of x + y to
the public level. Assume also that B has no reference of y
in its declassiﬁcation policy E(B). The composite of these
policies allows declassiﬁcation of x + y to target level {B},
because declassiﬁers(x + y,{B}, AB) = {A} and {A, B} (cid:118)
This deﬁnition uses composite policies to ﬁlter out dis-
allowed declassiﬁcations. For instance, in a system with
two origins A and B, such that A’s declassiﬁcation policy
is empty, B’s code cannot declassify any information about
A’s data.
In browser-speciﬁc settings this prevents unin-
tended leakage of information.
The composite delimited release precisely regulates what
information can be declassiﬁed, because the escape hatches
document.location = "http://evil.com/leak?secret="+encodeURI(form.CardNumber.value);
(a) Leak via URL
if (form.CardType.value == "VISA") new Image().src="http://evil.com/leak?VISA=yes";
else new Image().src="http://evil.com/leak?VISA=no";
(b) Implicit ﬂow
Figure 6: Explicit and implicit ﬂows
are related to the initial values in the program. For exam-
ple, assume that both A and B contain only (x + y,⊥) in
their escape hatch sets, where Γ(x) = {A} and Γ(y) = {B}.
Assume there is also x(cid:48) with Γ(x(cid:48)) = {A}. Composite de-
limited release allows declassiﬁcation of the initial value of
x + y. If, however, x is updated to x(cid:48), which is diﬀerent from
the initial values of x, then the declassiﬁcation of x + y is
rejected.
Composite delimited release can be enforced in two steps.
The ﬁrst step checks that all declassiﬁcations are allowed,
i.e., all involved origins agree on the declassiﬁed escape hatches.
Second step has to ensure that the value of an escape hatch
expression is not changed since the start of the system. Such
an enforcement can be done both statically [31] and dynam-
ically [5].
4. ENFORCEMENT CONSIDERATIONS
This section provides practical considerations for imple-
menting an enforcement mechanism for the policies that we
have discussed. Enforcement can be realized by a collection
of diﬀerent techniques, which we bring up in this section.
Regardless of the technique used, we need to consider all
possible communication channels. This includes direct com-
munication channels such as XMLHttpRequest, but also in-
direct ones such as modiﬁcation of the DOM tree or commu-
nication requests that happen after the user follows a link
on a page.
4.1
Information-ﬂow tracking
When tracking the actual information ﬂow in JavaScript
code, a combination of standard information-ﬂow control [17,
26, 34] can be used with tracking information ﬂow in the
presence of language features such as dynamic code evalua-
tion.
4.1.1 Explicit and implicit ﬂow
To illustrate simple ﬂows, consider an application that
processes a credit card number. Such applications often em-
ploy simple validating scripts on the client side before the
number is sent to the server. Assume ﬁelds CardNumber and
CardType contain the actual number and type of the card.
Figure 6(a) corresponds to an explicit ﬂow, where secret data
is explicitly passed to the public sink via URL. Figure 6(b)
illustrates an implicit [17] ﬂow via control ﬂow: depending
on the secret data, there are diﬀerent side eﬀects that are
visible for the attacker. The program branches on whether
or not the credit card number type form.CardType.value
is VISA, and communicates this sensitive information bit
to the attacker through the URL. These ﬂows are relatively
well understood [30]. Note that these attacks demonstrate
diﬀerent sinks for communicating data to the attacker: the
former uses the redirection mechanism, and the latter cre-
ates a new image with the source URL leading to the at-
tacker’s web site.
4.1.2 Beyond simple ﬂows
While tracking explicit and implicit ﬂows is relatively well-
understood [17, 26, 34], JavaScript and DOM open up fur-
ther channels for leaking information. One particular chal-
lenge is the dynamic code evaluation feature of JavaScript,
which that evaluates a given string by the function eval ().
Static analysis is bound to be conservative when analyzing
programs that include eval (), especially if strings to be eval-
uated are not known at the time of analysis. However, recent
progress on dynamically analyzing programs for secure in-
formation ﬂow [32, 6, 5] shows how to enforce versions of
security that are insensitive to program nontermination ei-
ther purely dynamically or by hybrids of static and dynamic
techniques.
Vogt et al.[35] show how a runtime monitor can be used
for tracking information ﬂow. They modify the source code
of the Firefox browser, adding a monitor to the JavaScript
engine. Although they adopt the simplistic high-low security
lattice (see the discussion in Section 6), their enforcement
can be extended with our lattice model in a straightforward
fashion. With Vogt’s implementation as a starting point,
our larger research program pursues modular enforcement
by hybrid mechanisms that combines monitoring with on-
the-ﬂy static analysis for a languages with dynamic code
evaluation [5], timeout [28], tree manipulation [29], and com-
munication primitives [5].
4.2 Communication channels
Any action that results in a request being sent is po-
tentially a communication channel. While some of the ac-
tions were intended for this purpose, some have unintention-
ally arisen from the design of the browser. These channels
need to be controlled in order to prevent information leaks.
The channels can be categorized in navigation channels and
content-request channels.
4.2.1 Navigation channels
Navigation channels are the result of navigation in the
browser. When the browser navigates to a new page, a re-
quest that is sent to the target location may include any
information from the current document. Some navigation
channels are one-way, since the document initiating the nav-
igation is usually unloaded to make place for the new docu-
ment. Below we list possible navigation channels.
Window navigation.
When a browser window navigates to a new page, a new
document is requested and loaded inside that window, re-
placing the current document. Window navigation is initi-
ated by setting the location attribute of the window to a new
address. Another way to navigate windows is by spawning
new ones, using the window.open() method, or navigating
previously spawned windows to a new address.
Frame navigation.
Frame navigation may happen when a frame parent resets
the src attribute of the frame node. This applies to frame
nodes created by both the frame tag and the iframe tag.
This replaces the document currently loaded in the frame
with the document being requested. However, the parent of
the frame persists, and access to the content from the parent
frame or other frames is restricted by SOP.
Links and forms.
An often disregarded form of navigation is user interac-
tion with links and forms. Note that the target of a link or
a form of one of the components may be modiﬁed by an-
other component. As a result, information about the user
interaction may be leaked to an arbitrary origin.
4.2.2 Content-request channels
Content-request channels stem from the diﬀerent possibil-
ities for requesting new content within the browser. These
channels are two-way channels, since the requested content
is included in the current document.
The XMLHttpRequest object.
The XMLHttpRequest object allows JavaScript code to
request content from the origin of the document. In mashups,
this corresponds to the origin of the integrator. In current
browsers, the XMLHttpRequest communication channel is
the only communication channel restricted by the SOP. In a
mashup, this prevents components from requesting content
from arbitrary origins.
In our approach, components can communicate with their
respective origin regardless of the origin of the document.
The information that can be communicated in this manner
is restricted by the information ﬂow policy. This makes our
approach more permissive than the current standards, while
still maintaining conﬁdentiality.
DOM-tree modiﬁcation.
When DOM nodes are added or modiﬁed this can result in
new content being requested from arbitrary origins. These
requests can carry information in the URL being requested
as well as in the content received. This creates an uninten-
tional communication channel through which an attacker
may leak information.
5. EXTENSIONS
We discuss an extension with integrity policies and appli-
cability of our approach to server-side mashups.
5.1
Integrity
While the primary focus of this paper is conﬁdentiality,
we brieﬂy discuss integrity extensions to our approach. In
an extension to integrity, the security levels need to reﬂect
both conﬁdentiality and integrity of data. Such levels are
denoted as pairs (cid:96)C ; (cid:96)I , where (cid:96)C is a conﬁdentiality com-
ponent, and (cid:96)I is an integrity component of the level. Each
of the components is, as previously, a set of involved ori-
gins, where integrity component enlists origins that trust
that level. Therefore, integrity ordering is dual to the one
Figure 7: Combined security lattice
of conﬁdentiality: the more origins the label includes, the
more trusted it is. The bottom ⊥ corresponds to trust by
no origin, the least trusted level.
Figure 7 shows the combined security lattice for both con-
ﬁdentiality and integrity, assuming three origins A, B, and
C. The least restrictive level is ⊥; A, B, C, corresponding to
the least conﬁdential and the most trusted data. The most
restrictive level is A, B, C;⊥ corresponding to the most con-
ﬁdential and least trusted data.
Note that this extension allows one to reason not only
about pure integrity policies, but also about the relationship
between integrity and conﬁdentiality [25].
In both cases,
policies for endorsing untrusted data [3] are important.
5.2 Server-side mashups
This paper has so far considered client-side mashups, where
the components are combined in the browser. However, our
approach may just as well be applied on the server side. If
none of the mashup components contains user-speciﬁc infor-
mation or if the integrator has access to all required user
information, then the components may be combined on the
server side. This opens up for the possibility of statically an-
alyzing all code before delivering it to the client. A popular
example of such a mashup is the social network Facebook
[1], which combines static analysis of the third-party code
with rewriting of the code to ensure isolation.
6. RELATED WORK
We discuss most related work on declassiﬁcation, moni-
toring information-ﬂow in browsers, and access control in
mashups.
Declassiﬁcation.
Much progress has been recently made on policies along
the dimensions of declassiﬁcation [33] that correspond to
what information is released, where in the systems it is re-
leased, when and by whom. Combining the dimensions re-
mains an open challenge [33]. Recently, the what and where
dimensions, and sometimes their combinations, received par-
ticular attention [23, 4, 8, 11, 5].
The who dimension of declassiﬁcation has been investi-
gated in the context of robustness [25, 3], but in separation
from what is declassiﬁed. Lux and Mantel [22] investigate a
bisimulation-based condition that helps expressing who (or,
more precisely, what input channels) may aﬀect declassiﬁ-
cation.
The composite delimited release policy we suggest in this
paper combines the what and who dimensions. The escape