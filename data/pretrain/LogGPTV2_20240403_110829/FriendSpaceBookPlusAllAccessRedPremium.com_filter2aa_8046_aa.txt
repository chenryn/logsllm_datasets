# FriendSpaceBookPlusAllAccessRedPremium.com
Category: Reversing
## Description
> Having snooped around like the expert spy you were never trained to be, you found something that takes your interest: "Cookie/www.FriendSpaceBookPlusAllAccessRedPremium.com" But unbeknownst to you, it was only the 700nm Wavelength herring rather than a delicious cookie that you could have found. It looks exactly like a credential for another system. You find yourself in search of a friendly book to read. Having already spent some time trying to find a way to gain more intelligence... and learn about those fluffy creatures, you (several)-momentarily divert your attention here. It's a place of all the individuals in the world sharing large amounts of data with one another. Strangely enough, all of the inhabitants seem to speak using this weird pictorial language. And there is hot disagreement over what the meaning of an eggplant is. But not much Cauliflower here. They must be very private creatures. SarahH has left open some proprietary tools, surely running this will take you to them. Decipher this language and move forth!
A `vm.py` script was attached:
```python
import sys
# Implements a simple stack-based VM
class VM:
  def __init__(self, rom):
    self.rom = rom
    self.accumulator1 = 0
    self.accumulator2 = 0
    self.instruction_pointer = 1
    self.stack = []
  def step(self):
    cur_ins = self.rom[self.instruction_pointer]
    self.instruction_pointer += 1
    fn = VM.OPERATIONS.get(cur_ins, None)
    if cur_ins[0] == '🖋':
      return
    if fn is None:
      raise RuntimeError("Unknown instruction '{}' at {}".format(
          repr(cur_ins), self.instruction_pointer - 1))
    else:
      fn(self)
  def add(self):
    self.stack.append(self.stack.pop() + self.stack.pop())
  def sub(self):
    a = self.stack.pop()
    b = self.stack.pop()
    self.stack.append(b - a)
  def if_zero(self):
    if self.stack[-1] == 0:
      while self.rom[self.instruction_pointer] != '😐':
        if self.rom[self.instruction_pointer] in ['🏀', '⛰']:
          break
        self.step()
    else:
      self.find_first_endif()
      self.instruction_pointer += 1
  def if_not_zero(self):
    if self.stack[-1] != 0:
      while self.rom[self.instruction_pointer] != '😐':
        if self.rom[self.instruction_pointer] in ['🏀', '⛰']:
          break
        self.step()
    else:
      self.find_first_endif()
      self.instruction_pointer += 1
  def find_first_endif(self):
    while self.rom[self.instruction_pointer] != '😐':
      self.instruction_pointer += 1
  def jump_to(self):
    marker = self.rom[self.instruction_pointer]
    if marker[0] != '💰':
      print('Incorrect symbol : ' + marker[0])
      raise SystemExit()
    marker = '🖋' + marker[1:]
    self.instruction_pointer = self.rom.index(marker) + 1
  def jump_top(self):
    self.instruction_pointer = self.stack.pop()
  def exit(self):
    print('\nDone.')
    raise SystemExit()
  def print_top(self):
    sys.stdout.write(chr(self.stack.pop()))
    sys.stdout.flush()
  def push(self):
    if self.rom[self.instruction_pointer] == '🥇':
      self.stack.append(self.accumulator1)
    elif self.rom[self.instruction_pointer] == '🥈':
      self.stack.append(self.accumulator2)
    else:
      raise RuntimeError('Unknown instruction {} at position {}'.format(
          self.rom[self.instruction_pointer], str(self.instruction_pointer)))
    self.instruction_pointer += 1
  def pop(self):
    if self.rom[self.instruction_pointer] == '🥇':
      self.accumulator1 = self.stack.pop()
    elif self.rom[self.instruction_pointer] == '🥈':
      self.accumulator2 = self.stack.pop()
    else:
      raise RuntimeError('Unknown instruction {} at position {}'.format(
          self.rom[self.instruction_pointer], str(self.instruction_pointer)))
    self.instruction_pointer += 1
  def pop_out(self):
    self.stack.pop()
  def load(self):
    num = 0
    if self.rom[self.instruction_pointer] == '🥇':
      acc = 1
    elif self.rom[self.instruction_pointer] == '🥈':
      acc = 2
    else:
      raise RuntimeError('Unknown instruction {} at position {}'.format(
          self.rom[self.instruction_pointer], str(self.instruction_pointer)))
    self.instruction_pointer += 1
    while self.rom[self.instruction_pointer] != '✋':
      num = num * 10 + (ord(self.rom[self.instruction_pointer][0]) - ord('0'))
      self.instruction_pointer += 1
    if acc == 1:
      self.accumulator1 = num
    else:
      self.accumulator2 = num
    self.instruction_pointer += 1
  def clone(self):
    self.stack.append(self.stack[-1])
  def multiply(self):
    a = self.stack.pop()
    b = self.stack.pop()
    self.stack.append(b * a)
  def divide(self):
    a = self.stack.pop()
    b = self.stack.pop()
    self.stack.append(b // a)
  def modulo(self):
    a = self.stack.pop()
    b = self.stack.pop()
    self.stack.append(b % a)
  def xor(self):
    a = self.stack.pop()
    b = self.stack.pop()
    self.stack.append(b ^ a)
  OPERATIONS = {
      '🍡': add,
      '🤡': clone,
      '📐': divide,
      '😲': if_zero,
      '😄': if_not_zero,
      '🏀': jump_to,
      '🚛': load,
      '📬': modulo,
      '⭐': multiply,
      '🍿': pop,
      '📤': pop_out,
      '🎤': print_top,
      '📥': push,
      '🔪': sub,
      '🌓': xor,
      '⛰': jump_top,
      '⌛': exit
  }
if __name__ == '__main__':
  if len(sys.argv) != 2:
    print('Missing program')
    raise SystemExit()
  with open(sys.argv[1], 'r') as f:
    print('Running ....')
    all_ins = ['']
    all_ins.extend(f.read().split())
    vm = VM(all_ins)
    while 1:
      vm.step()
```
A "program" was attached as well. 
```
🚛 🥇 0️⃣ ✋ 📥 🥇
🚛 🥇 1️⃣ 7️⃣ 4️⃣ 8️⃣ 8️⃣ ✋ 📥 🥇
🚛 🥇 1️⃣ 6️⃣ 7️⃣ 5️⃣ 8️⃣ ✋ 📥 🥇
🚛 🥇 1️⃣ 6️⃣ 5️⃣ 9️⃣ 9️⃣ ✋ 📥 🥇
🚛 🥇 1️⃣ 6️⃣ 2️⃣ 8️⃣ 5️⃣ ✋ 📥 🥇
🚛 🥇 1️⃣ 6️⃣ 0️⃣ 9️⃣ 4️⃣ ✋ 📥 🥇
🚛 🥇 1️⃣ 5️⃣ 5️⃣ 0️⃣ 5️⃣ ✋ 📥 🥇
// More ...
```
## Solution
This virtual machine is based on emoji 😲!
Let's start from running the program:
```console
root@kali:/media/sf_CTFs/google/FriendSpaceBookPlusAllAccessRedPremium.com# python3 vm.py program
Running ....
http://emoji-t0anaxn
```
It prints the beginning of a URI, character by character, and at some point stops. It seems that each character takes longer to print compared to the previous one.
The first thing we'll want to do is write a simple disassembler to translate the emoji into meaningful instructions. We do that using the VM itself as a base, and printing the different commands instead of executing them.
```python
import sys
class VM:
  def __init__(self, rom):
    self.rom = rom
    self.instruction_pointer = 1
  def step(self):
    cur_ins = self.rom[self.instruction_pointer]
    self.instruction_pointer += 1
    fn = VM.OPERATIONS.get(cur_ins, None)
    if cur_ins[0] == '🖋':
      print ("--- label ---")
      return
    elif cur_ins == '😐':
      print ("endif")
      return
    elif cur_ins == '✋':
      print ("stop_atoi?")
      return
    if fn is None:
      raise RuntimeError("Unknown instruction '{}' at {}".format(
          repr(cur_ins), self.instruction_pointer - 1))
    elif isinstance(fn, str):
      print (fn)
    else:
      fn(self)
  def jump_to(self):
    print ("jmp ", end='')
    marker = self.rom[self.instruction_pointer]
    if marker[0] != '💰':
      print('Incorrect symbol : ' + marker[0])
      raise SystemExit()
    marker = '🖋' + marker[1:]
    print(self.rom.index(marker) + 1)
    self.instruction_pointer += 1
  def push(self):
    print ("push ", end='')
    if self.rom[self.instruction_pointer] == '🥇':
      print("accumulator1")
    elif self.rom[self.instruction_pointer] == '🥈':
      print("accumulator2")
    else:
      raise RuntimeError('Unknown instruction {} at position {}'.format(
          self.rom[self.instruction_pointer], str(self.instruction_pointer)))
    self.instruction_pointer += 1
  def pop(self):
    print ("pop ", end='')
    if self.rom[self.instruction_pointer] == '🥇':
      print("accumulator1")
    elif self.rom[self.instruction_pointer] == '🥈':
      print("accumulator2")
    else:
      raise RuntimeError('Unknown instruction {} at position {}'.format(
          self.rom[self.instruction_pointer], str(self.instruction_pointer)))
    self.instruction_pointer += 1
  def load(self):
    print ("load ", end='')
    num = 0
    if self.rom[self.instruction_pointer] == '🥇':
      print("accumulator1 ", end='')
    elif self.rom[self.instruction_pointer] == '🥈':
      print("accumulator2 ", end='')
    else:
      raise RuntimeError('Unknown instruction {} at position {}'.format(
          self.rom[self.instruction_pointer], str(self.instruction_pointer)))
    self.instruction_pointer += 1
    while self.rom[self.instruction_pointer] != '✋':
      num = num * 10 + (ord(self.rom[self.instruction_pointer][0]) - ord('0'))
      self.instruction_pointer += 1
    print(num)
    self.instruction_pointer += 1
  OPERATIONS = {
      '🍡': "add",
      '🤡': "clone",
      '📐': "divide",
      '😲': "if_zero",
      '😄': "if_not_zero",
      '🏀': jump_to,
      '🚛': load,
      '📬': "modulo",
      '⭐': "multiply",
      '🍿': pop,
      '📤': "pop_out",
      '🎤': "print_top",
      '📥': push,
      '🔪': "sub",
      '🌓': "xor",
      '⛰': "jump_top",
      '⌛': "exit"
  }
if __name__ == '__main__':
  if len(sys.argv) != 2:
    print('Missing program')
    raise SystemExit()
  with open(sys.argv[1], 'r', encoding="utf8") as f:
    all_ins = ['']
    all_ins.extend(f.read().split())
    vm = VM(all_ins)
    while vm.instruction_pointer < len(all_ins):
      print("{}: ".format(vm.instruction_pointer), end='')
      vm.step()
```
We get the following program:
```
root@kali:/media/sf_CTFs/google/FriendSpaceBookPlusAllAccessRedPremium.com# python3 disassembler.py program
1: load accumulator1 0
5: push accumulator1
7: load accumulator1 17488
15: push accumulator1
17: load accumulator1 16758
25: push accumulator1
27: load accumulator1 16599
35: push accumulator1
37: load accumulator1 16285
45: push accumulator1
47: load accumulator1 16094
55: push accumulator1
57: load accumulator1 15505
65: push accumulator1
67: load accumulator1 15417
75: push accumulator1
77: load accumulator1 14832
85: push accumulator1
87: load accumulator1 14450
95: push accumulator1
97: load accumulator1 13893
105: push accumulator1
107: load accumulator1 13926
115: push accumulator1
117: load accumulator1 13437
125: push accumulator1
127: load accumulator1 12833