接口 230
gopl
7.1. 接口约定
目前为止，我们看到的类型都是具体的类型。一个具体的类型可以准确的描述它所代表的
值，并且展示出对类型本身的一些操作方式：就像数字类型的算术操作，切片类型的取下
标、添加元素和范围获取操作。具体的类型还可以通过它的内置方法提供额外的行为操作。
总的来说，当你拿到一个具体的类型时你就知道它的本身是什么和你可以用它来做什么。
在Go语言中还存在着另外一种类型：接口类型。接口类型是一种抽象的类型。它不会暴露出
它所代表的对象的内部值的结构和这个对象支持的基础操作的集合；它们只会展示出它们自
己的方法。也就是说当你有看到一个接口类型的值时，你不知道它是什么，唯一知道的就是
可以通过它的方法来做什么。
在本书中，我们一直使用两个相似的函数来进行字符串的格式化：fmt.Printf它会把结果写到
标准输出和fmt.Sprintf它会把结果以字符串的形式返回。得益于使用接口，我们不必可悲的因
为返回结果在使用方式上的一些浅显不同就必需把格式化这个最困难的过程复制一份。实际
上，这两个函数都使用了另一个函数fmt.Fprintf来进行封装。fmt.Fprintf这个函数对它的计算
结果会被怎么使用是完全不知道的。
package fmt
func Fprintf(w io.Writer, format string, args ...interface{}) (int, error)
func Printf(format string, args ...interface{}) (int, error) {
return Fprintf(os.Stdout, format, args...)
}
func Sprintf(format string, args ...interface{}) string {
var buf bytes.Buffer
Fprintf(&buf, format, args...)
return buf.String()
}
Fprintf的前缀F表示文件(File)也表明格式化输出结果应该被写入第一个参数提供的文件中。在
Printf函数中的第一个参数os.Stdout是 类型；在Sprintf函数中的第一个参数&buf是
*os.File
一个指向可以写入字节的内存缓冲区，然而它 并不是一个文件类型尽管它在某种意义上和文
件类型相似。
即使Fprintf函数中的第一个参数也不是一个文件类型。它是io.Writer类型这是一个接口类型定
义如下：
接口是合约 231
gopl
package io
// Writer is the interface that wraps the basic Write method.
type Writer interface {
// Write writes len(p) bytes from p to the underlying data stream.
// It returns the number of bytes written from p (0 <= n <= len(p))
// and any error encountered that caused the write to stop early.
// Write must return a non-nil error if it returns n < len(p).
// Write must not modify the slice data, even temporarily.
//
// Implementations must not retain p.
Write(p []byte) (n int, err error)
}
io.Writer类型定义了函数Fprintf和这个函数调用者之间的约定。一方面这个约定需要调用者提
供具体类型的值就像 和 ，这些类型都有一个特定签名和行为的Write
*os.File *bytes.Buffer
的函数。另一方面这个约定保证了Fprintf接受任何满足io.Writer接口的值都可以工作。Fprintf
函数可能没有假定写入的是一个文件或是一段内存，而是写入一个可以调用Write函数的值。
因为fmt.Fprintf函数没有对具体操作的值做任何假设而是仅仅通过io.Writer接口的约定来保证
行为，所以第一个参数可以安全地传入一个任何具体类型的值只需要满足io.Writer接口。一个
类型可以自由的使用另一个满足相同接口的类型来进行替换被称作可替换性(LSP里氏替换)。
这是一个面向对象的特征。
让我们通过一个新的类型来进行校验，下面 类型里的Write方法，仅仅在丢失写
*ByteCounter
向它的字节前统计它们的长度。(在这个+=赋值语句中，让len(p)的类型和 的类型匹配的转
*c
换是必须的。)
gopl.io/ch7/bytecounter
type ByteCounter int
func (c *ByteCounter) Write(p []byte) (int, error) {
*c += ByteCounter(len(p)) // convert int to ByteCounter
return len(p), nil
}
因为*ByteCounter满足io.Writer的约定，我们可以把它传入Fprintf函数中；Fprintf函数执行字
符串格式化的过程不会去关注ByteCounter正确的累加结果的长度。
接口是合约 232
gopl
var c ByteCounter
c.Write([]byte("hello"))
fmt.Println(c) // "5", = len("hello")
c = 0 // reset the counter
var name = "Dolly"
fmt.Fprintf(&c, "hello, %s", name)
fmt.Println(c) // "12", = len("hello, Dolly")
除了io.Writer这个接口类型，还有另一个对fmt包很重要的接口类型。Fprintf和Fprintln函数向
类型提供了一种控制它们值输出的途径。在2.5节中，我们为Celsius类型提供了一个String方
法以便于可以打印成这样"100°C" ，在6.5节中我们给*IntSet添加一个String方法，这样集合可
以用传统的符号来进行表示就像"{1 2 3}"。给一个类型定义String方法，可以让它满足最广泛
使用之一的接口类型fmt.Stringer：
package fmt
// The String method is used to print values passed
// as an operand to any format that accepts a string
// or to an unformatted printer such as Print.
type Stringer interface {
String() string
}
我们会在7.10节解释fmt包怎么发现哪些值是满足这个接口类型的。
练习 7.1： 使用来自ByteCounter的思路，实现一个针对对单词和行数的计数器。你会发现
bufio.ScanWords非常的有用。
练习 7.2： 写一个带有如下函数签名的函数CountingWriter，传入一个io.Writer接口类型，返
回一个新的Writer类型把原来的Writer封装在里面和一个表示写入新的Writer字节数的int64类
型指针
func CountingWriter(w io.Writer) (io.Writer, *int64)
练习 7.3： 为在gopl.io/ch4/treesort (§4.4)的*tree类型实现一个String方法去展示tree类型的值
序列。
接口是合约 233
gopl
7.2. 接口类型
接口类型具体描述了一系列方法的集合，一个实现了这些方法的具体类型是这个接口类型的
实例。
io.Writer类型是用的最广泛的接口之一，因为它提供了所有的类型写入bytes的抽象，包括文
件类型，内存缓冲区，网络链接，HTTP客户端，压缩工具，哈希等等。io包中定义了很多其
它有用的接口类型。Reader可以代表任意可以读取bytes的类型，Closer可以是任意可以关闭
的值，例如一个文件或是网络链接。（到现在你可能注意到了很多Go语言中单方法接口的命
名习惯）
package io
type Reader interface {
Read(p []byte) (n int, err error)
}
type Closer interface {
Close() error
}
在往下看，我们发现有些新的接口类型通过组合已经有的接口来定义。下面是两个例子：
type ReadWriter interface {
Reader
Writer
}
type ReadWriteCloser interface {
Reader
Writer
Closer
}
上面用到的语法和结构内嵌相似，我们可以用这种方式以一个简写命名另一个接口，而不用
声明它所有的方法。这种方式本称为接口内嵌。尽管略失简洁，我们可以像下面这样，不使
用内嵌来声明io.Writer接口。
type ReadWriter interface {
Read(p []byte) (n int, err error)
Write(p []byte) (n int, err error)
}
或者甚至使用种混合的风格：
接口类型 234
gopl
type ReadWriter interface {
Read(p []byte) (n int, err error)
Writer
}
上面3种定义方式都是一样的效果。方法的顺序变化也没有影响，唯一重要的就是这个集合里
面的方法。
练习 7.4： strings.NewReader函数通过读取一个string参数返回一个满足io.Reader接口类型
的值（和其它值）。实现一个简单版本的NewReader，并用它来构造一个接收字符串输入的
HTML解析器（§5.2）
练习 7.5： io包里面的LimitReader函数接收一个io.Reader接口类型的r和字节数n，并且返回
另一个从r中读取字节但是当读完n个字节后就表示读到文件结束的Reader。实现这个
LimitReader函数：
func LimitReader(r io.Reader, n int64) io.Reader
接口类型 235
gopl
7.3. 实现接口的条件
一个类型如果拥有一个接口需要的所有方法，那么这个类型就实现了这个接口。例
如， 类型实现了io.Reader，Writer，Closer，和ReadWriter接
*os.File
口。 实现了Reader，Writer，和ReadWriter这些接口，但是它没有实现Closer
*bytes.Buffer
接口因为它不具有Close方法。Go的程序员经常会简要的把一个具体的类型描述成一个特定的
接口类型。举个例子， 是io.Writer； 是io.ReadWriter。
*bytes.Buffer *os.Files
接口指定的规则非常简单：表达一个类型属于某个接口只要这个类型实现这个接口。所以：
var w io.Writer
w = os.Stdout // OK: *os.File has Write method
w = new(bytes.Buffer) // OK: *bytes.Buffer has Write method
w = time.Second // compile error: time.Duration lacks Write method
var rwc io.ReadWriteCloser
rwc = os.Stdout // OK: *os.File has Read, Write, Close methods
rwc = new(bytes.Buffer) // compile error: *bytes.Buffer lacks Close method
这个规则甚至适用于等式右边本身也是一个接口类型
w = rwc // OK: io.ReadWriteCloser has Write method
rwc = w // compile error: io.Writer lacks Close method
因为ReadWriter和ReadWriteCloser包含所有Writer的方法，所以任何实现了ReadWriter和
ReadWriteCloser的类型必定也实现了Writer接口
在进一步学习前，必须先解释表示一个类型持有一个方法当中的细节。回想在6.2章中，对于
每一个命名过的具体类型T；它一些方法的接收者是类型T本身然而另一些则是一个 的指
*T
针。还记得在T类型的参数上调用一个 的方法是合法的，只要这个参数是一个变量；编译
*T
器隐式的获取了它的地址。但这仅仅是一个语法糖：T类型的值不拥有所有 指针的方法，
*T
那这样它就可能只实现更少的接口。
举个例子可能会更清晰一点。在第6.5章中，IntSet类型的String方法的接收者是一个指针类
型，所以我们不能在一个不能寻址的IntSet值上调用这个方法：
type IntSet struct { /* ... */ }
func (*IntSet) String() string
var _ = IntSet{}.String() // compile error: String requires *IntSet receiver
但是我们可以在一个IntSet值上调用这个方法：
实现接口的条件 236
gopl
var s IntSet
var _ = s.String() // OK: s is a variable and &s has a String method
然而，由于只有 类型有String方法，所以也只有 类型实现了fmt.Stringer接
*IntSet *IntSet
口：
var _ fmt.Stringer = &s // OK
var _ fmt.Stringer = s // compile error: IntSet lacks String method
12.8章包含了一个打印出任意值的所有方法的程序，然后可以使用godoc -analysis=type
tool(§10.7.4)展示每个类型的方法和具体类型和接口之间的关系
就像信封封装和隐藏信件起来一样，接口类型封装和隐藏具体类型和它的值。即使具体类型
有其它的方法也只有接口类型暴露出来的方法会被调用到：
os.Stdout.Write([]byte("hello")) // OK: *os.File has Write method
os.Stdout.Close() // OK: *os.File has Close method
var w io.Writer
w = os.Stdout
w.Write([]byte("hello")) // OK: io.Writer has Write method
w.Close() // compile error: io.Writer lacks Close method
一个有更多方法的接口类型，比如io.ReadWriter，和少一些方法的接口类型,例如io.Reader，
进行对比；更多方法的接口类型会告诉我们更多关于它的值持有的信息，并且对实现它的类
型要求更加严格。那么关于interface{}类型，它没有任何方法，请讲出哪些具体的类型实现了
它？
这看上去好像没有用，但实际上interface{}被称为空接口类型是不可或缺的。因为空接口类型
对实现它的类型没有要求，所以我们可以将任意一个值赋给空接口类型。
var any interface{}
any = true
any = 12.34
any = "hello"
any = map[string]int{"one": 1}
any = new(bytes.Buffer)
尽管不是很明显，从本书最早的的例子中我们就已经在使用空接口类型。它允许像fmt.Println
或者5.7章中的errorf函数接受任何类型的参数。
对于创建的一个interface{}值持有一个boolean，float，string，map，pointer，或者任意其它
的类型；我们当然不能直接对它持有的值做操作，因为interface{}没有任何方法。我们会在
7.10章中学到一种用类型断言来获取interface{}中值的方法。
实现接口的条件 237
gopl
因为接口实现只依赖于判断的两个类型的方法，所以没有必要定义一个具体类型和它实现的
接口之间的关系。也就是说，尝试文档化和断言这种关系几乎没有用，所以并没有通过程序
强制定义。下面的定义在编译期断言一个 的值实现了io.Writer接口类型:
*bytes.Buffer
// *bytes.Buffer must satisfy io.Writer
var w io.Writer = new(bytes.Buffer)
因为任意 的值，甚至包括nil通过 进行显示的转换都实现
*bytes.Buffer (*bytes.Buffer)(nil)
了这个接口，所以我们不必分配一个新的变量。并且因为我们绝不会引用变量w，我们可以使
用空标识符来进行代替。总的看，这些变化可以让我们得到一个更朴素的版本：
// *bytes.Buffer must satisfy io.Writer