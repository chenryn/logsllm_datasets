trend in robotics is towards advanced, data-driven controllers,
such as those based on neural networks (NN), that usually do
not come with safety guarantees. Our approach of integrating
RTA into a programming framework is motivated by the need
to enable the use of such advanced controllers (e.g., designed
using NN or optimized for performance) while retaining strong
guarantees of safety.
B. Programming Reactive Robotic Software
The Robot Operating System (ROS [11]) is an open-source
meta-operating system considered as the de facto standard for
robot software development. In most cases, a ROS programmer
implements the system as a collection of periodic processes
that communicates using the publish-subscribe model of com-
munication. SOTER provides a high-level domain speciﬁc lan-
guage based on a similar publish-subscribe model of commu-
nication. A program in SOTER is a collection of periodic nodes
(processes) communicating with each other by publishing on
and subscribing to message topics. A node periodically listens
to data published on certain topics, performs computation, and
publishes computed results on certain other topics. A topic is
an abstraction of a communication channel.
Topics. Figure 4 declares the topic targetWaypoint that can
be used to communicate messages of type coord (coordinates
in 3D space). In SOTER, a node communicates with other
nodes in the system by publishing messages on a topic (e.g.,
targetWaypoint) and the target nodes can consume these
messages by subscribing to it.
Fig. 4. Declaration of topics and nodes in SOTER
Nodes. Figure 4 also declares a node MotionPrimitive that
subscribes to topics localPosition and targetWaypoint.
Each node has a separate local buffer associated with each
subscribed topic. The publish operation on a topic adds the
message into the corresponding local buffer of all the nodes
that have subscribed to that topic. The MotionPrimitive
node runs periodically every 10 ms. It reads messages from
the subscribed topics, performs local computations, and then
publishes the control action on the output
topic. For the
exposition of this paper, we ignore the syntactic details of
the node body, it can be any sequential program that performs
the required read → compute → publish step.
C. Guaranteeing Safety using Runtime Assurance
In practice, the motion primitives (e.g., MotionPrimitive
node in Figure 4) might generate control actions to traverse
the reference trajectory from current position to the target way-
point using a low-level controller provided by the third-party
3
robot manufacturer (e.g., [12]). These low-level controllers
generally use approximate models of the dynamics of the robot
and are optimized for performance rather than safety, making
them unsafe.
region. If AC is wrapped inside an RTA module (see Figure 1)
then DM must detect this imminent danger and switch to SC
(blue trajectory) with enough time for SC to gain control over
the drone. SC must be certiﬁed to keep the drone inside φsaf e
and also move it to a state in φsaf er where DM evaluates
that it is safe enough to return control back to AC. The novel
aspect of an RTA module formalized in this paper is that it also
allows control to return back to AC to maximize performance.
Fig. 7. Declaration of an RTA module
of
MotionPrimitive
checks
(from Figure
MotionPrimitiveSC
compiler
that
Figure 7 presents the declaration of an RTA module
4)
consisting
as AC and
SC nodes.
and
The
the declared RTA module
SafeMotionPrimitive is well-formed (Section III-C) and
then generates the DM and the other glue code that together
guarantees the φsaf e property. Details about other components
of the module declaration are provided in Section III-C.
Compositional RTA System. A large system is generally
built by composing multiple components together. When the
system-level speciﬁcation is decomposed into a collection of
simpler component-level speciﬁcations, one can scale provable
guarantees to large, real-world systems.
Fig. 5. Experiments with third-party and machine-learning controllers
the actual
To demonstrate this, we experimented with the low-level
controllers provided by the PX4 Autopilot [12] (Figure 5
(right)). The drone was tasked to repeatedly visit locations
g1 to g4 in that order, i.e., the sequence of waypoints g1, . . . g4
are passed to the MotionPrimitive node. The blue lines
represent
trajectories of the drone. Given the
complex dynamics of a drone and noisy sensors, ensuring
that it precisely follows a ﬁxed trajectory (ideally a straight
line joining the waypoints) is extremely hard. The low-level
controller (untrusted) optimizes for time and, hence, during
high speed maneuvers the reduced control on the drone
leads to overshoot and trajectories that collide with obstacles
(represented by the red regions). We also conducted similar
experiment with a different low-level controller designed using
data-driven approach (Figure 5 (left)) where we tasked the
drone to follow a eight loop. The trajectories in green represent
the cases where the drone closely follows loop, the trajectories
in red represent the cases the drone dangerously deviates from
the reference trajectory. Note that in both cases, the controllers
can be used during majority of their mission except for a few
instances of unsafe maneuvers. This motivates the need for
a RTA system that guarantees safety by switching to a safe
controller in case of danger but also maximizes the use of the
untrusted but performant controller under nominal conditions.
Runtime Assurance module. Figure 6 illustrates the behavior
of a SOTER based RTA-protected motion primitive module.
Fig. 6. An RTA-protected Motion Primitive
We want the drone to move from its current location wi
to the target location wf , and the desired safety property
is that
the drone must always remain inside the region
φsaf e (outermost tube). Initially, the untrusted AC node (e.g.,
MotionPrimitive) is in control of the drone (red trajectory),
and since it is not certiﬁed for correctness it may generate
controls action that tries to push the drone outside the φsaf e
Fig. 8. An RTA Protected Software Stack for Drone Surveillance
SOTER enables building a reliable version (Figure 8) of the
software stack with runtime assurance of the safety invariant:
φplan ∧ φmpr ∧ φbat. We decompose the stack into three
components: (1) An RTA-protected motion planner that guar-
antees φplan, (2) A battery-safety RTA module that guarantees
φbat, and (3) An RTA-protected motion primitive module that
guarantees φmpr. Our theory of well-formed RTA modules
(Theorem 3.1) ensures that if the constructed modules are
well-formed then they satisfy the desired safety invariant and
4
their composition (Theorem 4.1) helps prove that the system-
level speciﬁcation is satisﬁed.
III. RUNTIME ASSURANCE MODULE
In this section, we formalize the SOTER runtime assurance
module and present the well-formedness conditions required
for its correctness. We conclude by informally describing the
behavior of a system protected by an RTA module.
A. Programming Model
Recollect that a program in SOTER is a collection of periodic
nodes communicating with each other by publishing on and
subscribing to message topics.
Topic. Formally, a topic is a tuple (e, v) consisting of a unique
name e ∈ T , where T is the universe of all topic names, and
a value v ∈ V, where V is the universe of all possible values
that can be communicated using topic e. For simplicity of
presentation: (1) we assume that all topics share the same set
V of possible values and (2) instead of modeling the local
buffers associated with each subscribed topic of a node; we
model the communication between nodes using the global
value associated with each topic.
Let N represent the set of names of all the nodes. We
sometimes refer to a node by its unique name, for example,
when Nac ∈ N and we say “node Nac”, we are referring
to a node with name Nac. Let L represent the set of all
possible values the local state of any node could have during
its execution. A valuation of a set X ⊆ T of topic names is
a map from each topic name x ∈ X to the value v stored at
topic (x, v). Let Vals(X) represent the valuations of set X.
Node. A node in SOTER is a tuple (N, I, O, T, C) where:
1. N ∈ N is the unique name of the node.
2. I ⊆ T is the set of names of all topics subscribed to by
3. O ⊆ T is the set of names of all topics on which the node
publishes (output). The output topics are disjoint from the
set of input topics (I ∩ O = ∅).
4. T ⊆ L× (I → V)×L× (O → V) is the transition relation
of the node. If (l, Vals(I), l(cid:48), Vals(O)) ∈ T , then on the
input (subscribed) topics valuation of Vals(I), the local
state of the node moves from l to l(cid:48) and publishes on the
output topics to update its valuation to Vals(O).
5. C = {(N, t0), (N, t1), . . .} is the time-table representing
the node (inputs).
the times t0, t1, . . . at which the node N takes a step.
Intuitively, a node is a periodic input-output state-transition
system: at every time instant in its calendar, the node reads the
values in its input topics, updates its local state, and publishes
values on its output topics. Note that we are using the timeout-
based discrete event simulation [18] to model the periodic real-
time process as a standard transition system (more details in
Section IV). Each node speciﬁes, using a time-table, the ﬁxed
times at which it should be scheduled. For a periodic node with
period δ, the calendar will have entries (N, t0), (N, t1), . . .
such that ti+1 − ti = δ for all i. We refer to the components
of a node with name N ∈ N as I(N ), O(N ), T (N ) and C(N )
respectively. We use δ(N ) to refer to the period δ of node N.
B. Runtime Assurance Module
Let S represent the state space of the system, i.e., the set
of all possible conﬁgurations of the system (formally deﬁned
in Section IV). We assume that the desired safety property
is given in the form of a subset φsaf e ⊆ S (safe states). The
goal is to ensure using an RTA module that the system always
stays inside the safe set φsaf e.
RTA Module. An RTA module is represented as a tuple
(Nac, Nsc, Ndm, ∆, φsaf e, φsaf er) where:
1. Nac ∈ N is the advanced controller (AC) node,
2. Nsc ∈ N is the safe controller (SC) node,
3. Ndm ∈ N is the decision module (DM) node,
4. ∆ ∈ R+ represents the period of DM (δ(Nsc) = ∆),
5. φsaf e ⊆ S is the desired safety property.
6. φsaf er ⊆ φsaf e is a stronger safety property.
Fig. 9. Decision Module Switching Logic for Module M
Given an RTA module M, Figure 9 presents the switching
logic that sets the mode of the RTA module given the current
state st of the system. The DM node evaluates this switching
logic once every ∆ time unit. When it runs, it ﬁrst reads
the current state st and sets mode based on it. Note that
the set φsaf er determines when it is safe to switch from Nsc
to Nac. ReachM (s,∗, t) ⊆ S represents the set of all states
reachable in time [0, t] starting from the state s, using any
non-deterministic controller. We formally deﬁne Reach in
Section IV, informally, ReachM (st,∗, 2∆) (cid:54)⊆ φsaf e checks
that
the system will remain inside φsaf e in the next 2∆
time. This 2∆ look ahead is used to determine when it is
necessary to switch to using Nsc, in order to ensure that the
Nsc (δ(Nsc) ≤ ∆) will be executed at least once before
the system leaves φsaf e. The SOTER compiler automatically
generates a unique DM node (Ndm) for each primitive RTA
module declaration.
DM is the node (Ndm, Idm,∅, Tdm, Cdm) where:
1. The local state is a binary variable mode : {AC, SC}.
2. Topics subscribed by DM include the topics subscribed by
either of the nodes; i.e., I(Nac) ⊆ Idm and I(Nsc) ⊆ Idm.
3. DM does not publish on any topic. But it updates a global
data structure that controls the outputs of AC and SC nodes
(more details in Section IV).
4. If (mode, Vals(Idm), mode(cid:48),∅) ∈ Tdm, then the local state
moves from mode to mode(cid:48) based on the logic in Figure 9.
5. Cdm = {(Ndm, t0), (Ndm, t1), . . .} where ∀i|ti − ti+1| =
For an RTA module (Nac, Nsc, Ndm, ∆, φsaf e, φsaf er),
∆ represents the time-table of the node.
We are implicitly assuming that the topics Idm read by the
DM contain enough information to evaluate φsaf e, φsaf er, and
perform the reachability computation described in Section IV.
Given a declaration of the RTA module (Figure 7), the SOTER
compiler can automatically generate its DM.
5
C. Correctness of an RTA Module
i.e.,
Given a safe set φsaf e, our goal is to prove that the RTA-
protected system always stays inside this safe set. We need the
RTA module to satisfy some additional conditions in order to
prove its safety.
Well-formed RTA Module. An RTA module M =
(Nac, Nsc, Ndm, ∆, φsaf e, φsaf er) is said to be well-formed
if its components satisfy the following properties:
(P1a) The maximum period of Nac and Nsc is ∆,
δ(Ndm) = ∆, δ(Nac) ≤ ∆, and δ(Nsc) ≤ ∆.
(P1b) The output topics of the Nac and Nsc nodes must be
same, i.e., O(Nac) = O(Nsc).
The safe controller, Nsc, must satisfy the following properties:
(P2a) (Safety) ReachM (φsaf e, Nsc,∞) ⊆ φsaf e. This prop-
erty ensures that if the system is in φsaf e, then it will remain
in that region as long as we use Nsc.
(P2b) (Liveness) For every state s ∈ φsaf e, there exists a
time T such that for all s(cid:48) ∈ ReachM (s, Nsc, T ), we have
ReachM (s(cid:48), Nsc, ∆) ⊆ φsaf er. In words, from every state in
φsaf e, after some ﬁnite time the system is guaranteed to stay
in φsaf er for at least ∆ time.
(P3) ReachM (φsaf er,∗, 2∆) ⊆ φsaf e. This condition says
that irrespective of the controller, if we start from a state
in φsaf er, we will continue to remain in φsaf e for 2∆ time
units. Note that this condition is stronger than the condition
φsaf er ⊆ φsaf e.
THEOREM 3.1 (RUNTIME ASSURANCE): For a well-
let φInv(mode, s) denote the
formed RTA module M,
predicate (mode=SC ∧ s ∈ φsaf e) ∨ (mode=AC ∧
ReachM (s,∗, ∆) ⊆ φsaf e). If the initial state satisﬁes the
invariant φInv, then every state st reachable from s will also
satisfy the invariant φInv.
Proof. Let (mode, s) be the initial mode and initial state of the
system. We are given that the invariant holds at this state. Since
the initial mode is SC, then, by assumption, s ∈ φsaf e. We
need to prove that all states st reachable from s also satisfy the
invariant. If there is no mode change, then invariant is satisﬁed
by Property (P2a). Hence, assume there are mode switches.
We prove that in every time interval between two consecutive
executions of the DM, the invariant holds. So, consider time
T when the DM executes.
(Case1) The mode at time T is SC and there is no mode switch
at this time. Property (P2a) implies that all future states will
satisfy the invariant.
(Case2) The mode at time T is SC and there is a mode switch
to the AC at this time. Then, the current state sT at time
T satisﬁes the condition sT ∈ φsaf er. By Property (P3), we
know that ReachM (sT ,∗, 2∆) ⊆ φsaf e, and hence, it follows
that ReachM (sT ,∗, ∆) ⊆ φsaf e, and hence the invariant φInv
holds at time T . In fact, irrespective of what actions AC
applies to the plant, Property (P3) guarantees that the invariant
will hold for the interval [T, T + ∆]. Now, it follows from
Property (P1) that the DM will execute again at or before the
time instant T + ∆, and hence the invariant holds until the
next execution of DM.
(Case3) The current mode at time T is AC and there is a mode
switch to SC at this time. Then, the current state sT at time T
satisﬁes the condition ReachM (sT ,∗, 2∆) (cid:54)⊆ φsaf e. Since the