tablish a connection, it ﬁrst broadcasts advertising packets,
indicating its availability. In Step 2, when the mobile app
is launched, it receives the advertisements and then sends
a scan request to the monitor. In Step 3, the blood pressure
monitor responds with a scan response packet. During
this connection stage, the mobile app uses advertising and
scanning to collect information about the blood pressure
monitor such as the monitor’s name, MAC address, and
primary services. In Step 4, the mobile initiates a connection
with the blood pressure monitor of interest. Here the mobile
device is called the master/initiator for its role of initiating
the connection. The peer BLE device such as the blood
pressure monitor is called the slave/responder.
2.2.2 Pairing Stage
A mobile app and the system Settings app on most OSes
such as Android can initiate a pairing process through SMP
shown in Figure 1. As a slave device, the blood pressure
monitor may send a security request and ask the mobile de-
vice (i.e., the master) to initiate the pairing process, which
can be divided into the following three phases.
Phase 1 – Pairing feature exchange In Step 5, the two
devices announce their pairing features as follows to nego-
tiate a common association method. 1. Authentication re-
quirements – Authentication requirements include bonding
and MITM protection. Bonding means that the keys gener-
ated during the pairing process will be saved for later use to
reduce delay caused by a future pairing process. MITM pro-
tection indicates the preference of defense against MITM at-
tacks. If two devices explicitly set MITM protection as false,
Just Works is selected as the association method. If one de-
USENIX Association
29th USENIX Security Symposium    39
2.2.3 Communication Stage
The ATT protocol is a server/client protocol with the slave
as the server and the master as the client. For example, the
app on the mobile device is a client and the blood pressure
monitor is a server in Figure 2. A server maintains services
in the format of attributes. The client accesses the values of
attributes from the server. An attribute has four properties:
an attribute handle, a universally unique identiﬁer (UUID), a
value, and a set of permissions. To access an attribute at the
server in Steps 10 and 11, a client can issue a read/write re-
quest to the server with the attribute handle, which uniquely
identiﬁes the attribute. The UUID refers to the data type.
The permission protects attributes on a device and speciﬁes
the security levels required to access attributes.
2.3 BLE Security and Privacy
2.3.1 Association Methods in BLE
Passkey Entry: During the pairing process, one device
such as a mobile needs to display a 6-digit pin, and the user
inputs the pin on the other device using a keypad/keyboard.
The authentication stage 1 (i.e., Step 7) in Figure 2 fails if
the attacker does not know the pin.
Numeric Comparison: This association method is ap-
plicable when both devices have displays and conﬁrmation
buttons. A function converts the exchanged public keys and
nonces into a six-digit number. Each device displays the
number [1] and the user conﬁrms that these two displayed
numbers match by pressing a “Yes” button on each device
to proceed the pairing process. The fact that both displayed
numbers are the same ensures that the exchanged two pubic
keys are from the two intended pairing devices.
Out of Band (OOB): In OOB, a secret is shared through
an out-of-band venue such as near-ﬁeld communication
(NFC) and the LTK is derived from this secret. If the OOB
venue is secure, the MITM attack can be defeated.
It
Just Works:
is designed for devices without I/O
to MITM
capabilities [1] and is unfortunately subject
attacks.
Just Works has almost the same pairing process
as Numeric Comparison except that the generated number
is not displayed and the user is not involved to ensure the
exchanged pubic keys are the same.
2.3.2 Attribute Permission
The client (master) may access the attributes at the server
(slave). The permission speciﬁes the security level required
to access attributes and may be read/write, encrypted read-
/write, authenticated read/write, or authorized read/write.
Authorized read/write is unspeciﬁed in the BLE speciﬁca-
tion yet while the ﬁrst three security levels correspond to the
adopted association methods. Different association methods
result in different types of keys, and a speciﬁc type of key
may have access to an attribute with a particular permission.
types
of
two
Speciﬁcally,
BLE deﬁnes
keys:
unauthenticated-and-no-MITM-protection keys correspond-
ing to Just Works and authenticated-and-MITM-protection
keys corresponding to Passkey Entry, Numeric Comparison
and OOB. A read/write attribute can be accessed with no re-
striction. An encrypted read/write attribute can be accessed
with an unauthenticated-and-no-MITM-protection key or
authenticated-and-MITM-protection key. An authenticated
read/write attribute can only be accessed when the link is
encrypted with an authenticated-and-MITM-protection key.
If the attribute such as the keyboard input is sensitive, a high
security level like authenticated read/write shall be used so
that secure pairing protocols are required to counter eaves-
dropping and MITM attacks, and prevent keystroke leaking.
We ﬁnd that the permission is often misused in practice,
causes security issues, and will discuss the misuse in §4.4.2.
2.3.3
Identity Privacy
Identity Resolving Key (IRK) shall be shared during
pairing for device identity privacy. A BLE device such
as a mobile can be tracked if its MAC address is used in
advertisement and later communication. BLE addresses this
privacy issue by IRK and a suite of protocols. In particular,
IRK is used to generate resolvable private addresses in
advertisement and communication. Only a device with
privacy requirements needs to distribute its IRK and real
MAC address to its peer device. For example, if a mobile
needs to protect its MAC address, it distributes its IRK and
real MAC address to its peer device ﬁrst. Then, the mobile
uses this IRK to generate a resolvable private address for its
packets and the peer device uses the mobile’s IRK to resolve
the private address.
If the mobile’s peer device needs to
protect its MAC address, it sends its own IRK and MAC
address to the mobile for private address generation and
resolution although this practice is rare.
2.4 BLE Proﬁles
A Bluetooth proﬁle speciﬁes functionalities and features
of all layers in Figure 1 for a particular class of applications.
For example, the Human Interface Device Proﬁle (HID)
deﬁnes rules that allow a HID device, such as a keyboard, to
accept inputs from humans and shows the output to humans
through Bluetooth. A proﬁle may contain other proﬁles and
protocols as its building blocks. The Generic Access Proﬁle
(GAP) deﬁnes the basic requirements of a Bluetooth device
and all Bluetooth devices implement GAP. For example,
GAP performs advertising and scanning.
A smart device can implement the Generic Attribute Pro-
ﬁle (GATT), which is built upon the ATT protocol, to ex-
change arbitrary data in the format of attributes with its peer
devices. GATT organizes attributes into services. A ser-
vice contains zero or more characteristics, which are also
attributes and user data containers. A characteristic contains
zero or more descriptors, which provide more metadata. A
40    29th USENIX Security Symposium
USENIX Association
primary service provides the primary functionality of the de-
vice. A secondary service can work as a building block and
should be included in the primary service.
3 SCO Mode Design Flaws
In this section, we ﬁrst discuss speciﬁcation deﬁciency and
introduce four key capabilities required to support the SCO
mode at initiators such as mobile devices. Next, we show the
design ﬂaws in the Android BLE programming framework
due to the lack of these capabilities while similar issues in
other OSes are presented in §7.
3.1 Speciﬁcation Deﬁciency
For a slave device such as a blood pressure monitor in Fig-
ure 2 that provides services, the BLE speciﬁcation deﬁnes
the SCO mode. This mode provides the highest BLE se-
curity level (Mode 1, Level 4 [8]), in which only the three
secure association methods, Passkey Entry, Numeric Com-
parison and secure OOB, can be used and the BLE Legacy is
not allowed. In this mode, if secure pairing is not used, the
device shall send Pairing Failed packets with the error code
“Authentication Requirements”. According to Page 373, Vol
3, Part C of the BLE speciﬁcation [8], when a device is in the
SCO mode, “The device shall only accept new outgoing and
incoming service level connections for services that require
Security Mode 1, Level 4 when the remote device supports
LE Secure Connections and authenticated pairing is used.”,
where the service level connection refers to the application
layer connection.
It can be observed that although BLE speciﬁes the SCO
mode for a slave that provides services, it does not explicitly
deﬁne (or require) the SCO mode for a master, which is
also the airing initiator such as the mobile in Figure 2.
Unfortunately, without such a requirement at the initiator,
an attacker can spoof a victim BLE device (e.g., using a
fake blood pressure monitor) and connect to the initiator to
launch various attacks as shown in this paper.
In our analysis, we ﬁnd that the following four stages are
critical to implement the SCO mode at the initiator, which
includes initiation, status management, error handling, and
bond management. Correspondingly, we propose four re-
quired capabilities at the initiator as follows:
• Initiation – A mobile application/app shall have the ca-
pability of instructing the OS, i.e., the BLE stack, a se-
cure association method to enforce.
• Status management – The OS shall memorize the
speciﬁed secure association method, enforce it at the
right time and notify the application of the result. The
right time is between Step 5 and Step 6 in Figure 2 when
the peer device sends its I/O capabilities and the initia-
tor determines the association method correspondingly.
• Error handling – When errors happen during com-
munication, the OS and application shall coordinate
Pairing stage
Initiation
Status
management
Error
handling
Bond
management
Design ﬂaws
Flaw 1 – No mechanism to specify a association method
Flaw 2 – No mechanism to enforce a speciﬁed association
method or for an app to obtain the negotiated
association method in time
Flaw 3 – No mechanism for an app to handle errors while
the BLE stack mishandles pairing errors
Flaw 4 – No mechanism to programmatically remove a
suspicious/broken bond and start re-pairing.
Table 1: Design ﬂaws that an OS may have
to handle these errors and enforce the speciﬁed secure
association method.
• Bond management – The app shall have the capability
of removing a broken bond caused by errors in order to
initiate the enforcement process again.
Table 1 lists four design ﬂaws that an OS may have corre-
sponding to the four capabilities.
3.2 Design Flaws in Android
We now show how the BLE speciﬁcation shortcoming
leads to security issues in Android. We focus on Android be-
cause of its prevalence and rich set of BLE applications. We
later also show that security issues in Android endanger peer
BLE devices in §6.3 and similar issues exist in non-Android
OSes in §7. Android has all the four design ﬂaws in Table 1
as follows.
Flaw 1 – No mechanism to specify a association method.
The function createBond() in Listing 1 is the only function
an Android app can use to start a pairing process with a peer
BLE device. It does not accept any input parameter and the
app cannot specify any particular association method even if
it knows its peer BLE device’s I/O capabilities. The return
value of this function, true or false, indicates if the pair-
ing process has been successfully started. createBond()
also checks if the mobile device has an LTK in the device. If
yes, createBond() returns false and will not re-pair with
the peer device since the mobile device was paired with the
device. In addition, createBond() is an asynchronous call
and does not wait for the pairing process to complete.
1 boolean createBond () {
2
3
...
DeviceProperties deviceProp = mRemoteDevices .
getDeviceProperties ( device );
// if already paired , return false
if ( deviceProp != null && deviceProp .
getBondState () != BluetoothDevice . BOND_NONE ) {
4
5
6
7
8
9
10
11
12
13 }
return false ;
}
...
// put a create bond message into the message
processing queue
Message msg = obtainMessage ( BondStateMachine .
CREATE_BOND );
sendMessage ( msg );
return true ;
Listing 1: The function createBond() (Android 9.0)
USENIX Association
29th USENIX Security Symposium    41
Flaw 2 – No mechanism to enforce a speciﬁed associ-
ation method or for an app to obtain the negotiated
association method in time.
From source code, we
ﬁnd Android only relies on exchanged I/O features to
determine the association method.
An app may use
the following asynchronous mechanisms to obtain the
status of a pairing process after pairing is completed.
Through the intent ACTION_BOND_STATE_CHANGED,
the
app knows pairing status including pairing in progress
(BOND_BONDING),
or
pairing succeeded (BOND_BONDED). Through the intent
ACTION_PAIRING_REQUEST, the app knows either Passkey
Entry or Numeric Comparison is adopted.
By regis-
tering both intents ACTION_BOND_STATE_CHANGED and
ACTION_PAIRING_REQUEST, an app knows the adopted
association method, Passkey Entry, Numeric Comparison,
Just Works or plaintext communication only after the pairing
process is completed. Therefore, an app cannot use Listing 2
to enforce a speciﬁed association method in time. This ﬂaw
can be exploited to steal a mobile’s MAC address and IRK,
as shown in §4.3.
(BOND_NONE),
pairing
failure
Flaw 3 – No mechanism for an app to handle errors
while the BLE stack mishandles pairing errors. The
Android BLE programming framework does not memorize
a negotiated association method. Further, Android does not
provide APIs for apps to properly process pairing errors.
Pairing errors of interest are introduced below.
“Pin or Key Missing (0x06)”: When an Android
mobile and its peer BLE device are paired, their communica-
tion link is encrypted with the negotiated keys including the
LTK. If a peer BLE device’s LTK is intentionally removed,
the device will send an error code “Pin or Key Missing
(0x06)” to the mobile. However, the Android mobile does
not notify the user of this error.
Instead, it automatically
communicates with the peer device in plaintext. Moreover,
there are no APIs or mechanisms for an Android App to de-
tect the 0x06 error. An app cannot use the Android reﬂection
technique [9] to call a system level function isEncrypted()
and check if the communication is in plaintext since it is pro-
hibited [10]. We also ﬁnd when this error occurs, Android
does not remove the corresponding LTK. It should have re-
moved the LTK since the communication is in plaintext and
the LTK is supposed to encrypt the communication.
“Insufficient Authentication (0x05)” or
“Insufficient Encryption (0x0f)”: When an ini-
tiator tries to access an attribute with the “encrypted
read/write” or “authenticated read/write” per-