#include 
typedef struct { // this is returned by PBResolveFileIDRefSync()
unsigned char length;
unsigned char characters[255];
} HFSStr255;
int
main(int argc, char **argv)
{
FIDParam pb;
OSStatus result;
long tmpSrcDirID;
int len = MAXPATHLEN - 1;
char path[MAXPATHLEN] = { '\0' };
char *cursor = (char *)(path + (MAXPATHLEN - 1));
char *upath;
HFSStr255 *p, pbuf;
if (argc != 2) {
fprintf(stderr, "usage: %s \n", argv[0]);
exit(1);
}
tmpSrcDirID = atoi(argv[1]);
pb.ioVRefNum = 0; // no volume reference number -- use default
pb.ioSrcDirID = -1; // parent directory ID -- we don't know it yet
while (1) {
pb.ioNamePtr = (StringPtr)&pbuf; // a pointer to a pathname
pb.ioFileID = tmpSrcDirID; // the given CNID
if ((result = PBResolveFileIDRefSync((HParmBlkPtr)&pb)) length);
memcpy(cursor, p->characters, p->length);
*--cursor = '/';
len -= (1 + p->length);
tmpSrcDirID = pb.ioSrcDirID;
}
if ((upath = strchr(cursor, '/')) != NULL) {
*upath = '\0';
upath++;
} else
upath = "";
printf("%s:/%s\n", cursor, upath);
return 0;
}
$ gcc -Wall -o cnid2path cnid2path.c -framework Carbon
$ ls -i /mach_kernel
2150438 /mach_kernel
$ ./cnid2path 2150438
Macintosh HD:/mach_kernel
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 34 of 81
12.7.2.2. Examining the Catalog B-Tree
We can use hfsdebug to examine the header node of the Catalog B-Tree (Figure 1216) and to list one or more
types of records contained in the tree's leaf nodes.
Figure 1216. The contents of a Catalog B-Tree's header node
$ sudo hfsdebug -v
...
fileCount = 1447728
folderCount = 148872 /* not including the root folder */
...
$ sudo hfsdebug -b catalog
# HFS+ Catalog B-Tree
# B-Tree Node Descriptor
fLink = 60928
bLink = 0
kind = 1 (kBTHeaderNode)
height = 0
numRecords = 3
reserved = 0
# B-Tree Header Record
treeDepth = 4
rootNode = 38030
leafRecords = 3193202
firstLeafNode = 9309
lastLeafNode = 71671
nodeSize = 8192 bytes
maxKeyLength = 516 bytes
totalNodes = 73984
freeNodes = 2098
reserved1 = 0
clumpSize = 35651584 (ignored)
btreeType = 0 (kHFSBTreeType)
keyCompareType = 0xcf (kHFSCaseFolding, case-insensitive)
attributes = 00000000000000000000000000000110
. kBTBigKeys (keyLength is UInt16)
. kBTVariableIndexKeys
The volume whose Catalog B-Tree's header node is shown in Figure 1216 contains over 3 million leaf nodes.
We can verify that the precise number is equal to exactly twice the sum of the volume's file and folder counts,
with the folder count being one more than what's displayed (to account for the root folder). Of particular
interest is the tree's depthonly 4. The node size of 8KB is the default for volumes greater than 1GB in size.[18]
[18] The default catalog B-Tree node size is 4KB for volumes less than 1GB in size.
12.7.3. The Extents Overflow File
Depending on the amount and contiguity of free space available on a volume, allocation of storage to a file
fork may be physically noncontiguous. In other words, a fork's logically contiguous content may be divided
into multiple contiguous segments, or extents. We earlier defined an extent descriptor as a pair of numbers
representing a contiguous range of allocation blocks belonging to a fork, and an extent record as an array of
eight extent descriptors. A file record in the catalog has space for holding an extent record each for the file's
data and resource forks. If a fork has more than eight fragments, its remaining extents are stored in the leaf
nodes of the Extents Overflow file.
Unlike the Catalog B-Tree, which has multiple types of leaf records, the Extents Overflow B-Tree has only
one, consisting of a single HFSPlusExtentRecord structure. The key format is represented by the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 35 of 81
HFSPlusExtentKey structure, which consists of a fork type (forkType), a CNID (fileID), and a starting
allocation block number (startBlock). Whereas the Catalog B-Tree uses variable-length keys, the Extents
Overflow keys are fixed-size. Figure 1217 shows the data types used in the key format. When comparing two
Extents Overflow B-Tree keys, their fileID fields are compared first, followed by the forkType fields, and
finally the startBlock fields.
Figure 1217. Searching in the Extents Overflow B-Tree
[View full size image]
12.7.3.1. Examining Fragmentation
We can use hfsdebug to display all fragmented file forks on a volume. Fragmentation in file systems has
traditionally been an important factor that affects performance negatively. Modern file systems are usually less
prone to fragmentation than their ancestors are. Numerous algorithms and schemes have been incorporated
into file systems to reduce fragmentation and, in some cases, even undo existing fragmentationthe Mac OS X
HFS+ implementation is an example of the latter. Nevertheless, fragmentation is still a cause for concern for
both the designers and the users of file systems.
What Is Fragmentation?
In a typical scenario, an operating system uses a disk drive in a mode where the drive's storage
space appears as a logically contiguous sequence of blocks. The drive performs read-ahead
operations and supports large-size I/O requests for contiguous blocks. The performance of
modern drives is higher when I/O requests have a larger size. More contiguity in file allocation
allows for larger I/O requests (plus any CPU overheads may be amortized), leading to better
sequential I/O performance. Therefore, it is desirable for data to be contiguous on disk. It is
somewhat subjective and context-dependent to define fragmentation, especially since it can exist
in several forms, such as those listed here.
User-level data fragmentation Even if a file is contiguous on disk, it may contain
information that is not contiguous at the user level. For example, a word processor
document may be contiguous on disk but not in how the word processor reads it. It is both
difficult and not worthwhile to quantify or deal with such fragmentation because it depends
on the application in question, the file format, and other hard-to-control factors. We will
not discuss this kind of fragmentation here.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 36 of 81
Internal fragmentation We alluded to internal fragmentation in Section 12.2.2. Both the
allocation block size and the storage medium's sector size are much larger than a byte-
stream's fundamental unit of storage consumption: a byte. On a volume with 4KB
allocation blocks, a 1-byte file would "use" 4KB of on-disk storage. Thus, 4095 bytes
would be wasted until the file's size grows. Such wastage is referred to as internal
fragmentation.
External fragmentation External fragmentation is what people usually mean when they
refer to fragmentation. A file is externally fragmented if not all its contents reside in
contiguous blocks at the volume level. We can consider a fragment to be synonymous with
an HFS+ extent. In other words, an unfragmented file has exactly one extent. Each
additional extent introduces one discontinuity in the file.
Since an HFS+ file can have a data fork, a resource fork, and an arbitrary number of named forks
(see Section 12.7.4), each of which is an on-disk stream of bytes, it is easier to talk about a fork's
fragmentation rather than a file's fragmentation. Moreover, since a data or resource fork's first
eight extent descriptors are resident in the file's Catalog file record, we can classify the
fragmentation of these forks as mild (at least two and at most eight extents) or severe (more than
eight extents).
We can use hfsdebug to obtain summarized usage statistics for a volume. The information printed includes the
total sizes of all the data and resource forks on the volume, along with the amounts of storage actually
allocated. The difference between allocated storage and actual usage quantifies internal fragmentation.
$ sudo hfsdebug -s
# Volume Summary Information
files = 1448399
folders = 149187
aliases = 10
hard links = 6010
symbolic links = 13037
invisible files = 737
empty files = 10095
# Data Forks
non-zero data forks = 1437152
fragmented data forks = 2804
allocation blocks used = 31022304
allocated storage = 127067357184 bytes
(124089216.00 KB/121180.88 MB/118.34 GB)
actual usage = 123375522741 bytes
(120483908.93 KB/117660.07 MB/114.90 GB)
total extent records = 1437773
total extent descriptors = 1446845
overflow extent records = 621
overflow extent descriptors = 4817
# Resource Forks
non-zero resource forks = 11570
fragmented resource forks = 650
allocation blocks used = 158884
allocated storage = 650788864 bytes
(635536.00 KB/620.64 MB/0.61 GB)
actual usage = 615347452 bytes
(600925.25 KB/586.84 MB/0.57 GB)
total extent records = 11570
total extent descriptors = 12234
overflow extent records = 0
overflow extent descriptors = 0
10418 files have content in both their data and resource forks.
We can also use hfsdebug to examine the fragmented forks in more detail. When run with the -f option,
hfsdebug lists all forks with more than one extent on the volume. For each fork, the output consists of the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 37 of 81
following information:
The owning file's CNID
The fork's type
 A map of the fork's layout on disk (e.g., the string ":10:20:30:" for a fork that has three extents
containing 10, 20, and 30 blocks, respectively)
The size of the fork in bytes
The fork's total number of allocation blocks
The fork's total number of extents
The fork's average blocks per extent
The owning file's Unix pathname
[View full width]
$ sudo hfsdebug -f
# Volume Fragmentation Details
cnid=877872 fork=data map=:265:11:6:3:2:2:8: bytes=1213026 blocks=297 extents=7 avg=42.43
blks/ext path=Macintosh HD:/Desktop DF
cnid=329243 fork=data map=:256:27: bytes=1155108 blocks=283 extents=2 avg=141.50 blks/ext
path=Macintosh HD:/%00%00%00%00HFS+ Private Data/iNode329243
...
12.7.3.2. Examining the Extents Overflow B-Tree
Figure 1218 shows the output for the header node of the Extents Overflow B-Tree on the volume from Figure
1216.
Figure 1218. The contents of an Extents Overflow B-Tree's header node
$ sudo hfsdebug -b extents
# HFS+ Overflow Extents B-Tree
# B-Tree Node Descriptor
fLink = 0
bLink = 0
kind = 1 (kBTHeaderNode)
height = 0
numRecords = 3
reserved = 0
# B-Tree Header Record
treeDepth = 2
rootNode = 3
leafRecords = 617
firstLeafNode = 13
lastLeafNode = 17
nodeSize = 4096 bytes
maxKeyLength = 10 bytes
totalNodes = 2048
freeNodes = 2030
reserved1 = 0
clumpSize = 8388608 (ignored)
btreeType = 0 (kHFSBTreeType)
keyCompareType = 0 (unspecified/default)
attributes = 00000000000000000000000000000010
. kBTBigKeys (keyLength is UInt16)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 38 of 81
Figure 1218 shows that there are 617 leaf records in the tree. We can list all the leaf records to determine the
number of files that have more than eight extents. As shown here, there are 37 such files in our example.
$ sudo hfsdebug -b extents -l any
# Extent Record
keyLength = 10
forkType = 0
pad = 0
fileID = 118928
startBlock = 0x175 (373)
path = Macintosh HD:/.Spotlight-V100/store.db
0x180dc7 0x50
0x180f3e 0x10
0x180f9d 0x40
0x1810ee 0x80
0x191a33 0xf0
0x1961dc 0x10
0x19646d 0x10
0x19648d 0x10
# Extent Record
keyLength = 10
^C
$ sudo hfsdebug -b extents -l any | grep fileID | sort | uniq | wc -l
37
12.7.4. The Attributes File
The Attributes file is a B-Tree that allows the implementation of named forks. A named fork is simply another
byte-streamsimilar to the data and resource forks. However, it can be associated with either a file or a folder,
which can have any number of associated named forks. Beginning with Mac OS X 10.4, named forks are used
to implement extended attributes for files and folders. In turn, the support for access control lists (ACLs) in
Mac OS X 10.4 uses extended attributes for storing ACL data attached to files and folders. Each extended
attribute is a name-value pair: The name is a Unicode string and the corresponding value is arbitrary data. As
with node names in the Catalog B-Tree, the Unicode characters in attribute names are stored fully decomposed
and in canonical order. Attribute data can have its own extents, so, in theory, attributes can be arbitrarily large.
However, Mac OS X 10.4 supports only inline attributes, which can fit within a single B-Tree node while
maintaining any structural overheads and other requirements for B-Tree nodes. In other words, inline attributes
do not require any initial or overflow extents for their storage.
A B-Tree node must be large enough that if it were an index node, it would contain at least two keys of
maximum size. This means space must be reserved for at least three record offsets. Each node also has a node
descriptor. Given that the default node size for the Attributes B-Tree is 8KB, the kernel calculates the
maximum inline attribute size as 3802 bytes.
Figure 1219 shows the key and record formats used in the Attributes B-Tree. The key format is represented by
an HFSPlusAttrKey structure, which includes a CNID (fileID), a starting allocation block number
(startBlock) for attributes with extents, and a Unicode name (attrName) for the attribute.
Figure 1219. Searching in the Attributes B-Tree
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 39 of 81
When comparing two Attributes B-Tree keys, their fileID fields are compared first, followed by the
attrName fields, and finally the startBlock fields. Figure 1219 shows that there can be three types of records