ion. As we later see the existing interface is not feasible
for fuzzing since we need the ability to closely control all
parameters in the encoded SMS format as well as a way
to inject binary payloads.
Using a mobile phone to inject SMS messages into the
network is not an option as this would be very slow as we
show later. Instead we built a software framework based
on a modiﬁed version of OpenBSC that allows us to:
• Inject pre-encoded SMS into the phone network
• Extensive logging of fuzzing related feedback from
the phone
• Logging of non-feedback events, i.e. a crash result-
ing in losing connection to the network
• Automatic detection of SMS that caused a certain
event
• Process malformed SMS with OpenBSC
• Smart fuzzing of various SMS features
• Ability to fuzz multiple phones at once
• Sending SMS at higher rate than on a real network
The format of an SMS [15] differs depending
on whether the message is Mobile Originated
(MO) or Mobile Terminated (MT). This
is
mapped to the two formats SMS SUBMIT (MO) and
SMS DELIVER (MT). In a typical GSM network, shown
in Figure 4, an SMS message that is sent from a mo-
bile device is transferred Over-the-Air to the BTS of an
operator in SMS SUBMIT format. Every BTS is han-
dled by a Base Station Controller (BSC) that is inter-
acting with a Mobile Switching Center (MSC), which
acts as the central entity handling trafﬁc within the net-
work. The MSC relays the SMS message to the respon-
sible Short Message Service Center (SMSC), which is
usually a combination of software and hardware that for-
wards and relays messages to the destination phone or
other SMSCs (in case of inter-operator messages or an
operator with multiple SMSCs). In our setup OpenBSC
acts as BSC, MSC, and SMSC. During the ﬁnal trans-
mission to the destination the SMS will get converted
to SMS DELIVER, this is taken care of by OpenBSC.
Both formats are similar and no ﬁeld that is subject to
our fuzzing is lost. SMS SUBMIT only contains the
destination number and since SMS works in a store-and-
forward fashion, the destination address is replaced with
the sender number on the ﬁnal transmission to the desti-
nation. SMS DELIVER does not include the destination
number but instead relies on an existing channel to the
phone (after the phone has been paged). For this rea-
son we utilize the SMS SUBMIT format when injecting
messages.
4.2 Sending SMS Messages
OpenBSC itself does not provide an interface to submit
pre-encoded SMS messages to the network, but only an
interface to submit text SMS messages that are then con-
verted into the corresponding encoding. We added a new
interface to OpenBSC that allows us to submit SMS mes-
sages directly in SMS SUBMIT format. These messages
are inserted into a database that is used by OpenBSC
as part of the SMSC functionality.
In our version not
only the parsed SMS values are stored, but also the com-
plete encoded message for easy reproducibility. Modi-
fying the existing text message interface to be capable
of handling binary encoded SMS messages proved to be
infeasible. Messages submitted over this interface are
instantly transmitted to the subscriber if he is attached to
the network. This means opening a channel, initiating a
data connection, sending the message and tearing down
the connection. This works, but is very slow and takes
about seven seconds per message. This is also the reason
why we did not want to use a mobile phone to send our
fuzz-messages in the ﬁrst place. Our method of inject-
ing messages is much faster. Prior to testing we use our
new interface to inject thousands of messages into the
SMSC database. Next, we send these messages. Ideally,
this only opens a channel once and sends all SMS mes-
sages (pending delivery) to the recipient and then closes
the connection. This greatly improves the speed at which
we can fuzz since the actual message transfer only takes
about one second.
In essence we removed the sending mobile phone and
replace it with a direct interface to the network. This way
it was not necessary to modify the target mobile phone in
any way.
4.3 Monitoring for Crashes
In fuzz-based testing, monitoring is one of the essential
parts. Without good monitoring one will not catch any
bugs.
OpenBSC itself already has an error handler that takes
care of errors reported from the phone, which we mod-
iﬁed to ﬁt our fuzzing case. The default error handler
does not differentiate between errors and is not taking the
cause of an error into account. It simply stops the SMS
sending process in case of an error. The only exception
is a Memory Exceeded error, which causes OpenBSC
to dispatch a signal handler to wait for an SMMA signal
(released short message memory) indicating that there is
enough space again.
The mobile phone as well as the MSC are usually di-
vided into separated layers for transferring and process-
ing a message. As shown in Figure 2 they consist of
a Short Message Transport Layer (SM-TL), Short Mes-
sage Relay Layer (SM-RL) and the Connection Sublayer
(CM-Sub). The SM-TL [13] receives and relays mes-
sages that it receives from the application layer in TPDU
form (Transport Protocol Data Unit). This is the original
encoding form that we describe later in this paper. The
message is passed to the SM-RL to transport the TPDU
to the mobile station. At this point the TPDU is encap-
sulated as an RPDU. As soon as a connection is estab-
lished between the mobile station and the network the
RPDU is transferred Over-the-Air encapsulated in a CP-
DATA unit that is part of Short Message Control Protocol
(SM-CP). Both sides communicate via their CM-Subs
with each other. The CM-Sub on the phone side will
unpack the CPDU and forward the encapsulated TPDU
to the Transport Layer using an RP-DATA unit. At this
point the mobile phone stack has already performed san-
ity checks on the content of the SMS and parsed it. The
resulting reply, passed to CM-Sub, will include an ac-
knowledgement of the SMS message and it will then be
passed to the higher layers. From there it will end up
in the user interface or an error message is encapsulated
and sent back to the network. For our monitoring we
need to log these replies carefully to observe the status
of the phone.
Figure 2: Mobile terminated SMS
From the wide variety of error messages a phone can
reply to a received SMS message (deﬁned in [14]), we
observed during our fuzzing experiments that all of the
tested phones either reply with a Protocol Error
or Invalid Mandatory Information message
in the case of a malformed message. These two re-
sponses besides the memory error have been the only er-
rors that we observed in practice. We added code to ﬂag
such an SMS message as invalid in the database and con-
tinue delivering the next SMS that has not been ﬂagged
5
as invalid. OpenBSC would otherwise continue trying to
retransmit the malformed SMS message and thus block
further delivery for the speciﬁc recipient.
or already during receiving it in which it will never be ac-
knowledged and OpenBSC continuously tries to deliver
the SMS message.
SMS messages are usually sent over a SDCCH (Stand-
alone Dedicated Control Channel) or a SACCH (Slow
Associated Control Channel). The details of such a chan-
nel are not important for the scope of this paper. However
the use of such a logical channel is an important mea-
surement to detect mobile phone crashes. Such a channel
will be established between the BTS and the phone on the
start of an SMS delivery by paging the phone on a broad-
cast channel. As we explained earlier, we only open the
channel once and send a batch of messages using this
one channel. The channel related signaling between the
BSC and the BTS happens over the A-bis interface over
highly standardized protocols. We added modiﬁcations
to the A-bis Radio Signaling Link code of OpenBSC that
allows us to check if a channel tear down happens in a
usual error condition, log when this happens and which
phone was previously assigned to this channel.
So while we lack possibilities to conduct traditional
debugging methods on the device itself we can use the
open part - OpenBSC - to do some debugging on the
other end of the point-to-point connection.
The difference to traditional debugging techniques is
that we are mostly limited towards noticing an error con-
dition and monitoring the impact of such an error. We
are not able to peek at register values and other soft-
ware related details of the phone ﬁrmware. However,
it is enough to be able to reliably detect and reproduce
the error. Using this method it also possible to ﬁnd code
execution ﬂaws. However exploiting them and getting to
know the details about the speciﬁc behavior requires the
effort of reverse engineering the ﬁrmware for a speciﬁc
model. We try to avoid such a large scale test of phones
but these bugs are a good base for further investigations
such as reverse engineering of ﬁrmware.
In the next step we have written a script that parses the
log ﬁle, evaluates it and takes actions in order to deter-
mine which SMS message caused a problem.
When delivering an SMS message to a recipient phone
under the assumption that it is associated with the cell
in practice three things can happen. Either the message
is accepted and acknowledged, it is rejected with a rea-
son indicating the error, or an unexpected error occurs.
Such an unexpected error can be that the phone just dis-
connected because it crashed or due to other reasons the
received message is never acknowledged. In the latter
case, OpenBSC stores the SMS message in the database,
increases a delivery attempt counter and tries to retrans-
mit the SMS message when the phone associates with
the cell again. For our fuzzing results this means that
this method detects bugs in which the SMS message ei-
ther results in a phone crash after it accepted the message
Detecting the SMS message that caused such an error
condition then is fairly simple. Our script checks the er-
ror condition and if it occurred because of the loss of a
channel it ﬁrst looks up the database to ﬁnd SMS mes-
sages that have a delivery count that is bigger or equal
to one and the message is not marked as sent (meaning
it was not acknowledged). In this case we can with a
high probability say that the found SMS message caused
the problem.
If there is no message the script checks
which messages have been sent in a certain time inter-
val around the time of the log event. During our testing
we decided that a one minute time interval works well
enough to have a fairly small subset of candidate SMS
messages that could have caused a problem. Figure 3
shows the logical view of our monitoring setup.
     SMS
 Message
Generator
Fuzzing Framework
inject SMS
m ap S M S to error
SMS Database
Delivery Engine
nanoBTS
deliver    
  feedback
OpenBSC
Monitor
log evaluation
Logging
Figure 3: Logical view of our setup.
Target Phone
J2ME
 Echo
Server
4.4 Additional Monitoring Techniques
In addition to the aforementioned OpenBSC setup we
have developed more methods for monitoring for abnor-
mal behavior.
Bluetooth: Bluetooth can be used to check if a de-
vice crashes or hangs. Our monitor script connects to the
device using a Bluetooth virtual serial connection (RF-
COMM) by connecting to the RFCOMM channel for
the phone’s dial-up service. The script calls recv(2)
and blocks since the client normally is supposed to send
data to the phone. When the phone crashes or hangs, the
physical Bluetooth connection is interrupted and recv(2)
returns, thus signaling us that something went wrong.
J2ME: Almost every modern feature phone supports
J2ME [41] and this is providing us with the only way
to do measurements on the phone since they do not run
native applications. Applications running on the mobile
phone can register a handler in an SMS registry simi-
lar to binding an application to a TCP/UDP port. SMS
can make use of a User Data Header [13] (UDH) that
indicates that a certain SMS message is addressed to a
6
speciﬁc SMS-port. When the phone receives a message
this header ﬁeld will be parsed and the message is for-
warded to the application registered for this port. Our
J2ME application that is installed to the fuzzed phone
registers to a speciﬁc port and receives SMS messages
on it. For each chunk of fuzzed SMS messages we in-
ject a valid message that is addressed to this port. The
application then replies with an SMS message back to
a special number that is not assigned to a phone. Fig-
ure 3 shows this as the J2ME echo server. The message
is just saved to the SMS database. This allows us to eas-
ily lookup the count of SMS messages for this special
number in the database and check if it increased or not.
If not, it is very likely that some odd behavior was trig-
gered. This kind of monitoring is useful to identify bugs
that block the phone from processing received messages
such as those described in [44].
4.5 SMS SUBMIT Encoding
The SMS SUBMIT format as deﬁned in [13] consists of
a number of bit and byte ﬁelds, the destination address,
and the message payload. Below we brieﬂy describe the
parts the are important for our analysis. We included a
diagram of the structure of an SMS SUBMIT message
in the Appendix.
TP-Protocol-Identiﬁer (1 octet) describes the type of
messaging service being used. This references to a
higher layer protocol or telematic interworking being
used. While this is included in the speciﬁcations, we be-
lieve that these interworkings are mostly legacy support
and not in use these days. This makes it an interesting
target to study unusual behavior.
TP-Data-Coding-Scheme (1 octet) as described in [12]
indicates the message class and the alphabet that is used
to encode the TP-User-Data (the message payload). This
can be either the default 7 bit, 8 bit or 16 bit alphabet and
a reserved value.
The TP-User-Data ﬁeld together with the TP-
Protocol-Identiﬁer and the TP-Data-Coding-Scheme are
the main targets for fuzzing. The receiving phone parses
and displays the message based on this information.
However these ﬁelds are not enough to cover the com-
plete range of possible SMS features. If the TP-User-
Data-Header-Indicator bit (one of the earlier mentioned
bit ﬁelds) is set this indicates that TP-User-Data includes
a UDH.
The UDH is used to provide additional control infor-
mation like headers in IP packets. It can hold multiple so
called Information Elements [15] (IEI), for example el-
ements for port addressing, message concatenation, text
formatting and many more. IEIs are represented in a sim-
ple type-length-value format. We included an example
UDH with multiple IEIs in the Appendix.
4.6 Fuzzing Test-cases
We have implemented a subset of the SMS speciﬁcation
as a Python library to create SMS PDUs (Protocol Data
Unit) and used this to develop a variety of fuzzers. This
includes fuzzers for vCard, vCalendar, Extended Mes-
saging Service, multipart, SIM-Data-Download, WAP
push service indication, ﬂash SMS, MMS indication,
UDH, simple text messages and various others fuzzing
only single ﬁelds that are part of a speciﬁc SMS feature.
Some of these features can also be combined. For exam-
ple most of the features can either consist of single SMS
message or be part of a multipart sequence by adding the
corresponding multipart UDH.
For the scope of this paper we focused on fuzzing mul-
tipart, MMS indication (WAP push), simple text, ﬂash
SMS, and simple text messages with protocol ID/data
coding scheme combinations. These test cases cover a
wide variety of different SMS features.
Multipart: SMS originally was designed to send up
to 140 bytes of user data. Due to 7-bit encoding it is
possible to send up to 160 bytes. However various SMS
features rely on the possibility to send more data, e.g.
binary encoded data. Multipart SMS allow this by split-
ting payload across a number of SMS messages. This
is achieved by using a multipart UDH chunk (IEI: 0,
length: 3). This UDH chunk comprises three one byte
values. The ﬁrst byte encodes a reference number that
should be random and the same in all message parts that
belong to the same multipart sequence. Based on this
value the phone is later able to reassemble the message.
The second byte indicates the number of parts in the se-
quence and the last byte speciﬁes the current chunk ID.
By fuzzing these three values we were mainly looking for