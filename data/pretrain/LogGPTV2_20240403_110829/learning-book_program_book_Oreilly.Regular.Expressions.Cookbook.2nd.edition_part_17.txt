Problem
You have been given the regular expression  [$"' (n\d/\\] as the solution to a problem.
This regular expression consists of a single character class that matches a dollar sign,
a double quote, a single quote, a line feed, any digit berween O and 9, a forward slash,
or a backslash. You want to hardcode this regular expression into your source code as
a string constant or regular expression operator.
Solution
C#
As a normal string:
[VP\\\..\s]
As a verbatim string:
e"[$"*n\d/\]
VB.NET
[\Vp...s].
Java
[1VP\\u\.\$]。
JavaScript
/[$*'\\d/\]/
3.1 Literal Regular Expresions in Source Code I 111
---
## Page 128
XRegExp
V..s]
PHP
xV/p..$]x.
Perl
Pattern-matching operator:
/[\s"*\n\\/]/
m![\s"'\n\d/\]!
Substitution operator:
s![\$"'\n\d/\]!!
Python
Raw triple-quoted string:
r*"*[s"*\n\d/\]***
Normal string:
[VP\\\..\s]
Ruby
Literal regex delimited with forward slashes:
/\/p\\,$]/
Literal regex delimited with punctuation of your choice:
%r![$"'\n\d/\]!
Discussion
When this book shows you a regular expression by iself (as opposed to as part of a
larger source code snippet), it always shows regular expressions unadorned. This recipe
is the only exception. If you're using a regular expression tester such as RegexBuddy
or RegexPal, you would type in the regex this way. If your application accepts a regular
expression as user input, the user would type it in this way.
But if you want to hardcode the regular expression into your source code, you have
extra work. Carelessly copying and pasting regular expressions from a regular expres-
sion tester into your source code—or vice versa—will often leave you scratching your
head as to why the regular expression works in your tool but not in your source code,
or why the tester fails on a regex you've copied from somebody else’s code. All pro-
gramming languages discussed in this book require literal regular expressions to be
112 | Chapter 3: Programming with RegularExpressions
---
## Page 129
delimited in a certain way, with some languages requiring strings and some requiring
characters with special meanings in the language, you have to escape them.
a special regex constant. If your regex includes the language’s delimiters or certain other
The backslash is the most commonly used escape character. That’s why most of the
solutions to this problem have far more backslashes in them than the four in the original
regular expression.
C#
In C#, you can pass literal regular expressions to the Regex() constructor, and to various
is always declared as a string.
member functions in the Regex class. The parameter that takes the regular expression
C# supports two kinds of string literals. The most common kind is the double-quoted
string, well-known from languages such as C++ and Java. Wirthin double-quoted
strings, double quotes and backslashes must be escaped with a backslash. Escapes for
nonprintable characters, such as \n, are also supported in strings. There is a difference
Recipe 3.4) to turn on free-spacing mode, as explained in Recipe 2.18. *n is a string
with a literal line break, which is ignored as whitespace. *\n" is a string with the regex
token , which matches a newline.
Verbatim strings start with an at sign and a double quote, and end with a double quote
on its own. To include a double quote in a verbatim string, double it up. Backslashes
@n" is always the regex token  at the string level, but can span multiple
lines instead. That makes verbatim strings ideal for free-spacing regular expressions.
The choice is clear: use verbatim srings to put regular expressions into your C# source
code.
VB.NET
In VB.NET, you can passliteral regular expressions to the Regex() constructor, and to
various member functions in the Regex class. The parameter that takes the regular ex-
pression is always declared as a string.
Visual Basic uses double-quoted strings. Double quotes within the string must be dou-
bled. No other characters need to be escaped.
Java
In Java, you can pass literal regular expressions to the Pattern,conpile() class factory,
and to various functions of the String class. The parameter that takes the regular ex-
pression is always declared as a string.
3.1 Literal Regular Expresions in Source Code I 113
---
## Page 130
Java uses double-quoted strings. Within double-quoted srings, double quotes and
backslashes must be escaped with a backslash. Escapes for nonprintable characters,
such as *\n, and Unicode escapes such as \uFFF> are also supported in srings.
There is a difference between *\n" and *\\n" when using Pattern.covMENTS (see
Recipe 3.4) to turm on free-spacing mode, as explained in Recipe 2.18. *\n* is a sting
with a literal line break, which is ignored as whitespace. *\n" is a string with the regex
token , which matches a newline.
JavaScript
In JavaScript, regular expressions are best created by using the special syntax for de-
claring literal regular expressions. Simply place your regular expression berween two
forward slashes. If anyforward slashes ocur within theregularexpression itself, escape
those with a backslash.
Although it is possible to create a RegExp object from a string, it makes little sense to
use the string notation for literal regular expressions in your code. You would have to
escape quotes and backslashes, which generally leads to a forest of backslashes.
XRegExp
If you use XRegExp to extend JavaScript’s regular expression syntax, then you will be
creating XRegExp objects from strings, and you'll need to escape quotes and backslashes.
PHP
Literal regular expressions for use with PHP's preg functions are a curious contraption.
Unlike JavaScript or Perl, PHP does not have a native regular expression type. Regular
expressions must always be quoted as strings. This is true for the ereg and mb_ereg
functions as well. But in their quest to mimic Perl, the developers of PHP's wrapper
functions for PCRE added an additional requirement.
Within the string, the regular expression must be quoted as a Perl-style literal regular
expression. That means that where you would write /regex/ in Perl, the string for PHP's
preg functions becomes */regex/′. As in Perl, you can use any pair of punctuation
characters as the delimiters. If the regex delimiter occurs within the regex, it must be
escaped with a backslash. To avoid this, choose a delimiter that does not occur in the
regex. For this recipe, we used the percentage sign, because the forward slash occurs
in the regex but the percentage sign does not. If the forward slash does not occur in the
regex, use that, as it's the most commonly used delimiter in Perl and the required
delimiter in JavaScript and Ruby.
PHP supports both single-quoted and double-quoted strings. Both require the quote
(single or double) and the backslash within a regex to be escaped with a backslash. In
double-quoted strings, the dollar sign also needs to be escaped. For regular expressions,
114 | Chapter3: Programming with RegularExpressions
---
## Page 131
you should use single-quoted strings, unless you really want to interpolate variables in
your regex.
Perl
In Perl literal regular expressions are used with the pattem-matching operator and the
substirution operator The pattern-matching operator consists of two forward slashes,
with the regex berween it. Forward slashes within the regular expression must be es-
caped with a backslash. There’s noneed to escape any other characters, except perhaps
$ and @, as explained at the end of this subsection.
An altermative notation for the pattern-matching operator puts the regular expression
between any pair of punctuation characters, preceded by the letter m. If you use any
kind of opening and closing puncruation (parentheses, braces, or brackets) as the de-
limiter, they need to match up: for example, n{regex). If you use other punctuation,
simply use the same character twice. The solution for this recipe uses the exclamation
point. That saves us having to escape the literal forward slash in the regular expression
Only the closing delimiter needs to be escaped with a backslash.
The substitution operator is similar to the patterm-matching operator. It starts with s
instead of m, and tacks on the replacement text. When using brackets or similar punc-
tuation as the delimiters, you need two pairs: s[regex] [replace]. If you mix different
delimiters, you also need two pairs: s[regex] /replace/ For all other punctuation, use
it three times: s/regex/replace/.
Perl parses the patterm-matching and substitution operators as double-quoted strings.
If you writem/I am $name/ and $name holds “Jana, you end up with the regular expression
I*arm*Jan. $° is also a variable in Perl, so we have to escape the literal dollar sign in
the character class in our regular expression in this recipe.
Neverescape a dollar sign that you want to use asan anchor (see Recipe 2.5). An escaped
dollar sign is always a literal. Perl is smart enough to differentiate between dollars used
as anchors, and dollars used for variable interpolation, due to the fact that anchors can
be used sensibly only at the end of a group or the whole regex, orbefore a newline. You
x m xu o m no   syntax for Uni-
code properties. You can then load unicode-blocks. Js, unicode-categories.Js, and/or
118 I Chapter 3: Programming with Regular Expressions
---
## Page 135
unicode-scripts- Js to make it possible to match Unicode blocks, categories, and/or
scripts with \pf--·}).
If you are using Node.js to run JavaScript on a server, then you'll need to install
the command line. Once installed, your server-side scriprs can import the XRegExp
XRegExp as an npm package. This can be done by entering npm instal1 xregexp on
library as shown in the Solution section.
PHP
The preg functions are built-in and always available in PHP 4.2.0 and later.
Perl
Perl'sregular expression support is built-in and always available.
Python
You have to import the re module into your script to be able to use Python’s regular
expression functions.
Ruby
Ruby’s regular expression support is built-in and always available
3.3CreateRegular Expression Objects
Problem
You want to instantiate a regular expression object or otherwise compile a regular
expression so you can use it efficiently throughout your application
Solution
C#
If you know the regex to be correct:
Regex regexobj = new Regex(“regex pattern");
If the regex is provided by the end user (UserInput being a string variable):
}x↓
(4nduxasn)xa8ag mau = [qoxa8ax xaag