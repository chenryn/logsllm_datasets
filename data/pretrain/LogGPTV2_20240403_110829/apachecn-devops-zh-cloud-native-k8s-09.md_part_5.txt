耶格公开了一个查看痕迹的 UI，并与普罗米修斯集成。耶格的官方文档可以在[https://www.jaegertracing.io/docs/](https://www.jaegertracing.io/docs/)找到。一定要查看文档中的新信息，因为自从这本书出版以来，事情可能已经发生了变化。
### 使用耶格操作器安装耶格
为了安装耶格，我们将使用耶格算子，这是我们在本书中遇到的第一个算子。Kubernetes 中的一个*操作符*仅仅是一个用于创建使用 Kubernetes 语言的定制应用控制器的模式。这意味着不必为一个应用部署所有不同的 Kubernetes 资源，您可以部署单个 Pod(或者通常是单个 Deployment)，该应用将与 Kubernetes 对话，并为您加速所有其他所需的资源。它甚至可以更进一步，自我操作应用，在必要时进行资源更改。运营商可能非常复杂，但作为最终用户，他们让我们更容易在 Kubernetes 集群上部署商业或开源软件。
为了开始使用耶格运营商，我们需要为耶格创建一些初始资源，然后运营商将完成剩下的工作。安装耶格的先决条件是`nginx-ingress`控制器安装在我们的集群上，因为这是我们访问耶格用户界面的方式。
首先，我们需要为耶格创建一个名字空间。我们可以通过`kubectl create namespace`命令获得:
```
kubectl create namespace observability
```
现在我们的名字空间已经创建，我们需要创建一些 **CRDs** ，Jaeger 和操作者将使用它们。我们将在关于扩展 Kubernetes 的章节中深入讨论 CRD，但是现在，将它们视为一种选择 Kubernetes API 来为应用构建定制功能的方式。使用以下步骤，让我们安装 Jaeger:
1.  To create the Jaeger CRDs, run the following command:
    ```
    kubectl create -f https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/crds/jaegertracing.io_jaegers_crd.yaml
    ```
    创建了 CRD 后，操作员需要创建一些角色和绑定来完成工作。
2.  我们希望 Jaeger 在我们的集群中拥有集群范围的权限，因此我们也将创建一些可选的集群角色和集群角色绑定。为此，我们运行以下命令:
    ```
    kubectl create -n observability -f https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/service_account.yaml
    kubectl create -n observability -f https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/role.yaml
    kubectl create -n observability -f https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/role_binding.yaml
    kubectl create -f https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/cluster_role.yaml
    kubectl create -f https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/cluster_role_binding.yaml
    ```
3.  现在，我们终于拥有了操作员工作所需的所有部件。让我们用最后一个`kubectl`命令来安装操作员:
    ```
    kubectl create -n observability -f https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/operator.yaml
    ```
4.  最后，使用以下命令检查操作员是否正在运行:
    ```
    kubectl get deploy -n observability
    ```
如果操作员运行正常，您将看到类似于以下输出的内容，其中一个 Pod 可用于部署:
![Figure 9.20 – Jaeger Operator Pod output](img/B14790_09_020_new.jpg)
图 9.20–耶格操作员舱输出
我们现在已经启动并运行了耶格操作器，但耶格本身并没有运行。为什么会这样？Jaeger 是一个高度复杂的系统，可以在不同的配置下运行，操作员可以更容易地部署这些配置。
耶格操作员使用名为`Jaeger`的 CRD 读取耶格实例的配置，此时操作员将在 Kubernetes 上部署所有必要的 Pods 和其他资源。
耶格可以通过三种主要配置运行:*all one*、 *Production* 和 *Streaming* 。关于这些配置的完整讨论不在本书的讨论范围之内(查看之前分享的 Jaeger docs 链接)，但是我们将使用 AllInOne 配置。这种配置将耶格用户界面、收集器、代理和英格斯托尔结合到一个独立的容器中，不包含任何持久存储。这非常适合演示目的——要查看生产就绪配置，请查看 Jaeger 文档。
为了创建我们的耶格部署，我们需要告诉耶格操作员我们选择的配置。我们用我们早先创造的 CRD——耶格·CRD 来做这件事。为此 CRD 实例创建一个新文件:
机甲猎人，亚马尔
```
apiVersion: jaegertracing.io/v1
kind: Jaeger
metadata:
  name: all-in-one
  namespace: observability
spec:
  strategy: allInOne
```
我们只是使用了 Jaeger 类型配置的一小部分——同样，查看文档了解完整的故事。
现在，我们可以通过运行以下命令来创建 Jaeger 实例:
```
Kubectl apply -f jaeger-allinone.yaml
```
这个命令创建了我们之前安装的耶格 CRD 的一个实例。此时，耶格操作者应该意识到 CRD 已经被创造了。不到一分钟，我们真正的耶格 Pod 应该会运行。我们可以通过使用以下命令列出可观察性名称空间中的所有 Pods 来检查它:
```
Kubectl get po -n observability
```
作为输出，您应该会看到新创建的 Jaeger Pod，用于我们的一体化实例:
```
NAME                         READY   STATUS    RESTARTS   AGE
all-in-one-12t6bc95sr-aog4s  1/1     Running   0          5m
```
当我们的集群上也有一个入口控制器运行时，Jaeger Operator 会创建一个入口记录。这意味着我们可以简单地使用 kubectl 列出我们的入口条目，看看在哪里可以访问 Jaeger 用户界面。
您可以使用以下命令列出项目:
```
Kubectl get ingress -n observability
```
输出应该显示耶格用户界面的新入口，如图所示:
![Figure 9.21 – Jaeger UI Service output](img/B14790_09_021_new.jpg)
图 9.21–耶格用户界面服务输出
现在，您可以导航到集群入口记录中列出的地址来查看耶格用户界面。它应该如下所示:
![Figure 9.22 – Jaeger UI](img/B14790_09_022_new.jpg)
图 9.22–耶格用户界面
如你所见，耶格界面非常简单。顶部有三个标签–**搜索**、**比较**和**系统架构**。我们将重点关注**搜索**选项卡，但要了解其他两个选项卡的更多信息，请查看[https://www . jaegertracing . io](https://www.jaegertracing.io)上的 Jaeger 文档。
耶格**搜索**页面允许我们基于许多输入来搜索踪迹。我们可以根据跟踪中包含的服务进行搜索，也可以根据标签、持续时间等进行搜索。然而，现在我们的耶格系统里什么都没有。
这样做的原因是，即使我们已经启动并运行了耶格，我们的应用仍然需要配置为向耶格发送跟踪。这通常需要在代码或框架级别完成，超出了本书的范围。如果你想玩耶格的追踪功能，可以安装一个示例应用——参见[https://www . jaegertracing . io/docs/1.18/入门/#sample-app-hotrod](https://www.jaegertracing.io/docs/1.18/getting-started/#sample-app-hotrod) 的耶格文档页面。
通过服务向耶格发送跟踪，可以看到跟踪。耶格身上的一个痕迹看起来如下。为了可读性，我们已经裁剪出了跟踪的一些后续部分，但是这应该会让您很好地了解跟踪可能是什么样子:
![Figure 9.23 – Trace view in Jaeger](img/B14790_09_023_new.jpg)
图 9.23–耶格中的轨迹视图
如您所见，追踪的 Jaeger UI 视图将服务追踪分割成组成部分。每个服务到服务的调用，以及服务本身中的任何特定调用，在跟踪中都有自己的线路。您看到的水平条形图随着时间从左向右移动，跟踪中的每个单独调用都有自己的行。在这个痕迹中，可以看到我们有 HTTP 调用，SQL 调用，以及的一些 Redis 语句。
您应该能够看到 Jaeger 和 tracing 如何帮助开发人员理解服务到服务调用的网络，以及如何帮助找到瓶颈。
有了 Jaeger 的评论，我们有了一个完全开源的解决方案来解决可观察性桶中的每个问题。然而，这并不意味着没有商业解决方案有意义的用例——在许多情况下的确如此。
## 第三方工装
除了许多开源库，Kubernetes 上还有许多商业上可用的度量、日志和警报产品。其中一些可能比开源选项更强大。
通常，度量和日志记录中的大多数工具都要求您在集群上提供资源，以便将度量和日志转发给您选择的服务。在我们在本章中使用的示例中，这些服务在集群中运行，尽管在商业产品中，这些服务通常是独立的 SaaS 应用，您可以在其中登录以分析日志并查看指标。例如，使用我们在本章中提供的 EFK 栈，您可以向弹性支付托管解决方案的费用，该解决方案的弹性搜索和基巴纳部分将托管在弹性的基础架构上，从而降低解决方案的复杂性。这个领域还有很多其他的解决方案，供应商包括 Sumo Logic、Logz.io、New Relic、DataDog 和 AppDynamics。
对于生产环境，通常使用单独的计算(单独的群集、服务或 SaaS 工具)来执行日志和指标分析。这确保了运行您的实际软件的集群可以单独专用于该应用，并且任何昂贵的日志搜索或查询功能都可以单独处理。这也意味着，如果我们的应用集群出现故障，我们仍然可以查看日志和指标，直到出现故障。
# 总结
在这一章中，我们学习了 Kubernetes 上的可观测性。我们首先了解了可观察性的四个主要原则:度量、日志、跟踪和警报。然后我们发现了 Kubernetes 本身是如何为可观察性提供工具的，包括它如何管理日志和资源度量，以及如何部署 Kubernetes Dashboard。最后，我们学习了如何实现和使用一些关键的开源工具来为四大支柱提供可视化、搜索和警报。这些知识将帮助您为未来的 Kubernetes 集群构建强大的可观测性基础设施，并帮助您决定在集群中观测什么是最重要的。
在下一章中，我们将使用我们所学到的关于可观察性的知识来帮助我们解决 Kubernetes 上的应用问题。
# 问题
1.  解释指标和日志之间的区别。
2.  为什么会使用 Grafana，而不是简单的使用普罗米修斯 UI？
3.  在生产环境中运行 EFK 栈时(为了尽可能地减少生产应用集群的计算量)，栈的哪一部分将在生产应用集群上运行？哪一部分会从集群中流出？
# 进一步阅读
*   深入回顾 Kibana Timelon:[https://www . elastic . co/guide/en/Kibana/7.10/Timelon-教程-创建-时间序列-可视化. html](https://www.elastic.co/guide/en/kibana/7.10/timelion-tutorial-create-time-series-visualizations.html)