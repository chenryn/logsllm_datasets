stats**]{.guilabel} 页面，会显示所有处理器和核心的 P-states
使用情况，包括 Turbo 模式（若可用）。CPU 处于 C 状态或者 P
状态的时间越长越好（`C4`{.literal} 比
`C3`{.literal}更高）。这能很好的显示 CPU
使用量的优化程度如何。当系统闲置时，C 状态或者 P
状态的停留时间在理想状况下应该是 90% 或者更高。
:::
::: para
[**Device Stats**]{.guilabel}
页面提供了和[**概览**]{.guilabel}页面类似的信息，但它只提供和装置有关的信息。
:::
::: para
[**Tunables**]{.guilabel}
页面包含了关于优化系统以降低电量消耗的建议。请使用 [**up**]{.keycap} 和
[**down**]{.keycap} 键浏览建议，使用 [**enter**]{.keycap}
键将建议切换为开启或关闭。
:::
::: figure
[⁠]{#Audit_and_Analysis.html#figu-PowerTOP}
::: figure-contents
::: mediaobject
![PowerTOP 操作画面](images/powertop.png)
:::
:::
**图 2.1. PowerTOP 操作画面**
:::
::: para
你还可以通过运行 [**PowerTOP**]{.application} 并使用 `--html`{.option}
选项来生成 HTML 报告。将 *htmlfile.html* 参数替换为您想要的输出文件名称
。
:::
``` screen
powertop --html=htmlfile.html
```
::: para
[**PowerTOP**]{.application} 默认每 20 秒进行测量，可通过
`--time`{.option} 选项改变这一设置：
:::
``` screen
powertop --html=htmlfile.html --time=seconds
```
::: para
欲知更多有关 PowerTOP 的信息，请参阅 [PowerTOP
主页](https://01.org/powertop/)。
:::
::: para
[**PowerTOP**]{.application} 还可以和 [**turbostat**]{.application}
实用工具搭配使用。 [**turbostat**]{.application}
实用工具是一种报告工具，它能显示 Intel 64
处理器上有关处理器拓扑、频率、闲置状态统计、温度和电源使用状况的信息。欲知更多有关
[**turbostat**]{.application} 实用工具的信息，请参阅
`turbostat`{.command}(8) man
page，或参阅《[性能微调指南](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Performance_Tuning_Guide/)》。
:::
:::
::: section
::: titlepage
# [⁠]{#Audit_and_Analysis.html#diskdevstat_and_netdevstat}2.3. Diskdevstat 和 Netdevstat {.title}
:::
[]{#Audit_and_Analysis.html#idm139882385219136
.indexterm}[]{#Audit_and_Analysis.html#idm139882406209808
.indexterm}[]{#Audit_and_Analysis.html#idm139882400198784
.indexterm}[]{#Audit_and_Analysis.html#idm139882406158992 .indexterm}
::: para
[**Diskdevstat**]{.application} 和 [**netdevstat**]{.application} 都属于
[**SystemTap**]{.application}
工具，它们的功能是搜集系统上运行的所有应用程序的磁盘和网络活动的详细信息。这些工具的灵感来自于
[**PowerTOP**]{.application}，PowerTOP 可显示每个应用程序每秒唤醒 CPU
的次数（请参阅〈[第 2.2 节
"PowerTOP"](#Audit_and_Analysis.html#PowerTOP){.xref}〉）。这些工具收集的统计数据可让您识别那些使用大量的小型
I/O
操作的应用程序，这种应用程序比少量的较大操作更耗电。其它的监控工具只测量传输速度，无法帮助分辨此类使用量。
:::
::: para
使用 [**SystemTap**]{.application} 来安装这些工具，请以
`root`{.systemitem} 身份执行以下指令：
:::
``` screen
yum install tuned-utils-systemtap kernel-debuginfo
```
::: para
使用以下命令运行这些工具：
:::
``` screen
diskdevstat
```
::: para
或使用以下命令运行这些工具：
:::
``` screen
netdevstat
```
::: para
这两个命令都可以接受三个参数，分别为：
:::
::: para
`diskdevstat update_interval total_duration display_histogram`{.command}
:::
::: para
`netdevstat update_interval total_duration display_histogram`{.command}
:::
::: variablelist
[*update_interval*]{.term}
:   ::: para
    显示更新的时间间隔，以秒为单位。默认值：`5`{.literal}
    :::
[*total_duration*]{.term}
:   ::: para
    整体运行时间，以秒为单位。默认值：`86400`{.literal}（一天）
    :::
[*display_histogram*]{.term}
:   ::: para
    是否在运行结束时将收集的所有数据以柱形图显示的标志。
    :::
:::
::: para
输出结果和 [**PowerTOP**]{.application} 的结果类似。以下是在使用 KDE 4.2
的 Fedora 10 系统上运行 [**diskdevstat**]{.application} 的输出结果示例：
:::
``` screen
  PID   UID DEV     WRITE_CNT WRITE_MIN WRITE_MAX WRITE_AVG    READ_CNT  READ_MIN  READ_MAX  READ_AVG COMMAND        
 2789  2903 sda1          854     0.000   120.000    39.836           0     0.000     0.000     0.000 plasma            
15494     0 sda1            0     0.000     0.000     0.000         758     0.000     0.012     0.000 0logwatch         
15520     0 sda1            0     0.000     0.000     0.000         140     0.000     0.009     0.000 perl              
15549     0 sda1            0     0.000     0.000     0.000         140     0.000     0.009     0.000 perl              
15585     0 sda1            0     0.000     0.000     0.000         108     0.001     0.002     0.000 perl              
 2573     0 sda1           63     0.033  3600.015   515.226           0     0.000     0.000     0.000 auditd            
15429     0 sda1            0     0.000     0.000     0.000          62     0.009     0.009     0.000 crond             
15379     0 sda1            0     0.000     0.000     0.000          62     0.008     0.008     0.000 crond             
15473     0 sda1            0     0.000     0.000     0.000          62     0.008     0.008     0.000 crond             
15415     0 sda1            0     0.000     0.000     0.000          62     0.008     0.008     0.000 crond             
15433     0 sda1            0     0.000     0.000     0.000          62     0.008     0.008     0.000 crond             
15425     0 sda1            0     0.000     0.000     0.000          62     0.007     0.007     0.000 crond             
15375     0 sda1            0     0.000     0.000     0.000          62     0.008     0.008     0.000 crond             
15477     0 sda1            0     0.000     0.000     0.000          62     0.007     0.007     0.000 crond             
15469     0 sda1            0     0.000     0.000     0.000          62     0.007     0.007     0.000 crond             
15419     0 sda1            0     0.000     0.000     0.000          62     0.008     0.008     0.000 crond             
15481     0 sda1            0     0.000     0.000     0.000          61     0.000     0.001     0.000 crond             
15355     0 sda1            0     0.000     0.000     0.000          37     0.000     0.014     0.001 laptop_mode       
 2153     0 sda1           26     0.003  3600.029  1290.730           0     0.000     0.000     0.000 rsyslogd          
15575     0 sda1            0     0.000     0.000     0.000          16     0.000     0.000     0.000 cat               
15581     0 sda1            0     0.000     0.000     0.000          12     0.001     0.002     0.000 perl              
15582     0 sda1            0     0.000     0.000     0.000          12     0.001     0.002     0.000 perl              
15579     0 sda1            0     0.000     0.000     0.000          12     0.000     0.001     0.000 perl              
15580     0 sda1            0     0.000     0.000     0.000          12     0.001     0.001     0.000 perl              
15354     0 sda1            0     0.000     0.000     0.000          12     0.000     0.170     0.014 sh                
15584     0 sda1            0     0.000     0.000     0.000          12     0.001     0.002     0.000 perl              
15548     0 sda1            0     0.000     0.000     0.000          12     0.001     0.014     0.001 perl              
15577     0 sda1            0     0.000     0.000     0.000          12     0.001     0.003     0.000 perl              
15519     0 sda1            0     0.000     0.000     0.000          12     0.001     0.005     0.000 perl              
15578     0 sda1            0     0.000     0.000     0.000          12     0.001     0.001     0.000 perl              
15583     0 sda1            0     0.000     0.000     0.000          12     0.001     0.001     0.000 perl              
15547     0 sda1            0     0.000     0.000     0.000          11     0.000     0.002     0.000 perl              
15576     0 sda1            0     0.000     0.000     0.000          11     0.001     0.001     0.000 perl              
15518     0 sda1            0     0.000     0.000     0.000          11     0.000     0.001     0.000 perl              
15354     0 sda1            0     0.000     0.000     0.000          10     0.053     0.053     0.005 lm_lid.sh
```
::: para
这些列代表：
:::
::: variablelist
[PID]{.term}
:   ::: para
    应用程序的进程 ID
    :::
[UID]{.term}
:   ::: para
    运行中的应用程序用户 ID
    :::
[DEV]{.term}
:   ::: para
    发生 I/O 的装置
    :::
[WRITE_CNT]{.term}
:   ::: para
    写入操作总数
    :::
[WRITE_MIN]{.term}
:   ::: para
    两次连续写入所需最短时间（以秒为单位）
    :::
[WRITE_MAX]{.term}
:   ::: para
    两次连续写入所需最长时间（以秒为单位）
    :::
[WRITE_AVG]{.term}
:   ::: para
    两个连续写入操作所需平均时间（以秒为单位）
    :::
[READ_CNT]{.term}
:   ::: para
    读取操作总数
    :::
[READ_MIN]{.term}
:   ::: para
    两次连续读取所需最短时间（以秒为单位）
    :::
[READ_MAX]{.term}
:   ::: para
    两次连续读取所需最长时间（以秒为单位）
    :::
[READ_AVG]{.term}
:   ::: para
    两次连续读取所需平均时间（以秒为单位）
    :::
[COMMAND]{.term}
:   ::: para
    进程名称
    :::
:::
::: para
在这个示例中，可看到三个非常明显的应用程序：
:::
``` screen
  PID   UID DEV     WRITE_CNT WRITE_MIN WRITE_MAX WRITE_AVG    READ_CNT  READ_MIN  READ_MAX  READ_AVG COMMAND
 2789  2903 sda1          854     0.000   120.000    39.836           0     0.000     0.000     0.000 plasma
 2573     0 sda1           63     0.033  3600.015   515.226           0     0.000     0.000     0.000 auditd
 2153     0 sda1           26     0.003  3600.029  1290.730           0     0.000     0.000     0.000 rsyslogd
```
::: para
这三个应用程序的 `WRITE_CNT`{.literal} 都大于
`0`{.literal}，这意味着它们在测量期间都执行了一些写入操作。其中，[**plasma**]{.application}
最严重：它执行的写入操作最多，当然写入操作平均间隔时间就最短。如果您想找到最耗电的应用程序，那么
[**Plasma**]{.application} 就是最佳的观察对象。
:::
::: para
请使用 [**strace**]{.application} 和 [**ltrace**]{.application}
命令，通过追踪所有给定进程 ID
的系统调用，对应用程序进行进一步检查。在这个示例中，您可以运行：
:::
``` screen
strace -p 2789
```
::: para
在这个示例中，`strace`{.command} 的输出结果中包含一个每 45
秒重复一次的模式，该模式会打开用户的 KDE
图标缓冲文件，接着写入，然后马上关闭该文件。这导致必需在硬盘上进行物理写入，因为文件原数据已经改变了（更准确地说是时间被修改了）。最终修复是为了避免在没有图标更新时进行不必要的调用。
:::
:::
::: section
::: titlepage
# [⁠]{#Audit_and_Analysis.html#BLTK}2.4. 电池寿命工具组件 {.title}
:::
::: para
Red Hat Enterprise Linux 7
添加了[**电池寿命工具组件**]{.application}（Battery Life Tool Kit，简称
``{=html}BLTK``{=html}），这是一套用来模仿、分析电池寿命和性能的测试程序。``{=html}BLTK``{=html}
通过执行一系列模拟特定用户组的任务，并将结果形成报告，来达到这一目的。尽管
``{=html}BLTK``{=html}
是为检测笔记本电脑的性能设计的，如果启动时使用 `-a`{.option} 选项，BLTK
也能报告台式电脑的性能。
:::
::: para
BLTK
能生成和真实的计算机使用中非常相似的工作负荷。例如：`office`{.literal}
负荷写入一个文本，再加以校正，并将同样的程序应用到电子表格中。运行带
[**PowerTOP**]{.application} 或者任何其它审核或分析工具的
BLTK，就可以测试当计算机处于活跃状态，而不是仅仅处于闲置状态时，您的优化是否有效。因为您可以在不同设置中多次运行同样的负荷，并比较不同设置下得到的结果。
:::
::: para
使用以下命令安装
``{=html}BLTK``{=html}：
:::
``` screen
yum install bltk
```
::: para
使用以下命令运行
``{=html}BLTK``{=html}：
:::
``` screen
bltk workload options
```