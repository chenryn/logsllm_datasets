### 优化后的文本

#### 20.2 定义BRE模式

**示例：匹配包含 "at" 的行**

```plaintext
That is a very nice hat.
This test is at line four.
```

在第四行中，尽管 `at` 前没有其他字符，但空格也是字符，因此该行也符合模式。而在第五行中，`at` 出现在行首，所以不匹配。

**20.2.5 字符组**

点号特殊字符可以匹配任意单个字符，但如果你希望限定具体的待匹配字符，可以使用字符组（character class）来定义一组可能的字符。例如：

```bash
$ sed -n '/[ch]at/p' data6
The cat is sleeping.
That is a very nice hat.
```

这里，我们只匹配了包含 `cat` 或 `hat` 的行，而排除了仅包含 `at` 的行。此外，字符组还可以处理大小写不确定的情况：

```bash
$ echo "Yes\nyes" | sed -n '/[Yy]es/p'
Yes
yes
```

**多个字符组的应用**

```bash
$ sed -n '/[ag][ae][0-9][0-9][0-9][0-9][0-9]/p' data8
60633
46201
22203
```

为了确保只匹配五位数，需要指定它们位于行首和行尾：

```bash
$ sed -n '/^[0-9][0-9][0-9][0-9][0-9]$/p' data8
60633
46201
22203
```

**拼写错误的单词匹配**

```bash
$ cat data9
I need to have gome malntenence done on my car.
I'll pay that in a seperate invoice.
After I pay for the maintenance my car will be as good as nev.

$ sed -n -e '/maint[ea]n[ae]nce/p' -e '/sep[ea]r[ea]te/p' data9
I need to have gome malntenence done on my car.
I'll pay that in a seperate invoice.
```

**20.2.6 排除型字符组**

通过在字符组前加脱字符 `^`，可以匹配不在组内的字符：

```bash
$ sed -n '/[^ch]at/p' data6
This test is at line four.
```

**20.2.7 区间**

使用区间可以简化字符组的定义，例如：

```bash
$ sed -n '/[0-9][0-9][0-9][0-9][0-9]/p' data8
60633
46201
22203
```

字母区间也可以用于匹配特定范围内的字母：

```bash
$ sed -n '/[c-h]at/p' data6
The cat is sleeping.
That is a very nice hat.
```

**20.2.8 特殊字符组**

BRE 提供了一些预定义的字符组，例如 `[[:alpha:]]` 匹配任何字母字符：

```bash
$ echo "abc123" | sed -n '/[[:digit:]]/p'
abc123

$ echo "This is, a test" | sed -n '/[[:punct:]]/p'
This is, a test
```

**20.2.9 星号**

星号 `*` 表示前面的字符可以出现零次或多次：

```bash
$ echo "leeeek" | sed -n '/le*k/p'
leeek
leeeek
```

**20.3 扩展正则表达式 (ERE)**

**问号**

问号 `?` 表示前面的字符可以出现零次或一次：

```bash
$ echo "bt" | gawk '/be?t/ {print $0}'
bt

$ echo "bet" | gawk '/be?t/ {print $0}'
bet

$ echo "beet" | gawk '/be?t/ {print $0}'
```

**加号**

加号 `+` 表示前面的字符可以出现一次或多次：

```bash
$ echo "beeet" | gawk '/be+t/ {print $0}'
beeet

$ echo "beet" | gawk '/be+t/ {print $0}'
beet

$ echo "bet" | gawk '/be+t/ {print $0}'
```

通过这些扩展符号，你可以更灵活地处理各种复杂的文本匹配需求。