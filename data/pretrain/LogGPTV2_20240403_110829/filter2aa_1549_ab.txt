# Relocation Bonus: Crafting and Testing the Attack

## The Final Attack
### Overview
Due to the nature of the attack, it works best as a tool that rebuilds regular PE (Portable Executable) files. The following steps outline the process:

1. **Load Target PE File**
2. **Apply Original Relocations for Base of 0x00010000**
3. **Turn ASLR (Address Space Layout Randomization) Off** by flipping a bit in the PE Header.
4. **Set Desired Base to 0xFFFF0000**
5. **Loop Over Data to Obfuscate in uint32_t-sized Chunks**: Decrement each chunk by the expected value of delta (0x00010000 - 0xFFFF0000).
6. **Discard Original Relocations Table**
7. **Generate New Relocations Table**: Contain the location of each decrement done inside the loop using `IMAGE_REL_BASED_HIGHLOW`.
8. **Save New PE File to Disk**

### Expected Value of Delta
- **Delta**: 0x00010000 - 0xFFFF0000

### Testing the Attack
- **Windows 7**: Works!
- **Windows 8**: Not commonly used.
- **Windows 10**: Rejected.

## Exploring New Terrain
### Embedding PE Copies
- **Embed PE Copies for All Possible Base Addresses**: This approach results in a file size that is too large.

### Tweaking ASLR Configuration
- **Tweaking ASLR Configuration**: Works.
- **Set Mandatory ASLR to On**
- **Set Bottom-Up ASLR to Off**

### Registry Configuration
- **Registry Key**:
  ```plaintext
  [HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\NAME_OF_EXE]
  "MitigationAuditOptions"=hex:00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
  "MitigationOptions"=hex:00,01,22,00,00,00,00,00,00,00,00,00,00,00,00,00
  ```

### Conclusion
- **Windows 10**: Can work, but not preferred.

## A New Hope
### Preselection via File Mapping Invalidation
- **Preselection via File Mapping Invalidation**: Further exploration needed.

## Weaponization
### Requirements
The tool must:
1. **Create a New Section with Enough Room for the Code**
2. **Embed the Code Inside the New Section**
3. **Inform the Embedded Code of the True EntryPoint**
4. **Overwrite EntryPoint to Point to the Embedded Code**

### ASLR Preselection Code
- **Position-Agnostic**
- **Generically Embeddable in Any PE**

### Results
- **It Works!**

## Caveats
- **Performance**: Can be slow, averaging around 200 iterations to land.
- **Imports**: Cannot be obfuscated.

### Advantages
- **Base Address Flexibility**: Base can be any address, not just 0x00010000.
- **Symbolic Execution**: Needed to discover the intended base to fix up the file for analysis.

## Use Cases
- **Annoying Analysts**
- **Breaking Automated Static Analysis Systems**
- **Breaking Tools**
- **Breaking AV Parsers**

## Potential Improvements
- **More Obfuscations**
- **New Targets**
- **Multiple Passes**
- **Header Scrambling**
- **Combining with Runtime Packers**
- **Support for 64-bit Binaries**
- **Support for DLLs**
- **Selective Obfuscations**

## Resources
- **Website**: [nickcano.com](https://nickcano.com)
- **GitHub**: [nickcano](https://github.com/nickcano)
- **Twitter**: [@nickcano93](https://twitter.com/nickcano93)
- **Books**: [No Starch Press](https://nostarch.com/gamehacking)
- **Courses**: [Pluralsight](https://pluralsight.com/authors/nick-cano)
- **Source Code**:
  - [RelocBonus](https://github.com/nickcano/RelocBonus)
  - [RelocBonusSlides](https://github.com/nickcano/RelocBonusSlides)
- **References**:
  - [MSDN: PE Format](https://msdn.microsoft.com/en-us/library/ms809762.aspx)
  - [Corkami: PE PoCs](https://github.com/corkami/pocs/tree/master/PE)

---

This document provides a clear and structured overview of the relocation bonus attack, including its implementation, testing, and potential improvements.