正如我们在`marshal_with`装饰器中所指定的那样，返回对象会自动对它们进行封送(编码成 JSON)。
# 验证请求
认证逻辑封装在`thoughts_backend/token_validation.py`文件中。这包括标题的生成和验证。
以下函数生成`Bearer`标记:
```
def encode_token(payload, private_key):
    return jwt.encode(payload, private_key, algorithm='RS256')
def generate_token_header(username, private_key):
    '''
    Generate a token header base on the username. 
    Sign using the private key.
    '''
    payload = {
        'username': username,
        'iat': datetime.utcnow(),
        'exp': datetime.utcnow() + timedelta(days=2),
    }
    token = encode_token(payload, private_key)
    token = token.decode('utf8')
    return f'Bearer {token}'
```
这产生了 JWT 有效载荷。它包括用作自定义值的`username`，但它还添加了两个标准字段，一个`exp`到期日期和令牌的`iat`生成时间。
然后，使用 RS256 算法和私钥对令牌进行编码，并以正确的格式返回:`Bearer `。
相反的操作是从编码的头中获取用户名。这里的代码更长，因为我们应该考虑不同的选项，我们可能会收到`Authentication`头。这个头直接来自我们的公共应用编程接口，所以我们应该期待任何价值和程序为它做好防御准备。
令牌本身的解码很简单，因为`jwt.decode`动作会这样做:
```
def decode_token(token, public_key):
    return jwt.decode(token, public_key, algoritms='RS256')
```
但是在到达该步骤之前，我们需要获取令牌并验证报头在多种情况下是否有效，因此我们首先检查报头是否为空，以及它是否具有正确的格式，提取令牌:
```
def validate_token_header(header, public_key):
    if not header:
        logger.info('No header')
        return None
    # Retrieve the Bearer token
    parse_result = parse('Bearer {}', header)
    if not parse_result:
        logger.info(f'Wrong format for header "{header}"')
        return None
    token = parse_result[0]
```
然后，我们解码令牌。如果令牌无法用公钥解码，则会引发`DecodeError`。令牌也可以过期:
```
    try:
        decoded_token = decode_token(token.encode('utf8'), public_key)
    except jwt.exceptions.DecodeError:
        logger.warning(f'Error decoding header "{header}". '
        'This may be key missmatch or wrong key')
        return None
    except jwt.exceptions.ExpiredSignatureError:
        logger.info(f'Authentication header has expired')
        return None
```
然后，检查其是否具有预期的`exp`和`username`参数。如果缺少这些参数中的任何一个，这意味着解码后的令牌格式不正确。在不同版本中更改代码时，可能会发生这种情况:
```
    # Check expiry is in the token
    if 'exp' not in decoded_token:
        logger.warning('Token does not have expiry (exp)')
        return None
    # Check username is in the token
    if 'username' not in decoded_token:
        logger.warning('Token does not have username')
        return None
    logger.info('Header successfully validated')
    return decoded_token['username']
```
如果一切顺利，在最后返回用户名。
每个可能的问题都以不同的严重程度记录下来。大多数常见事件都以信息安全级别记录，因为它们并不严重。令牌解码后出现格式错误等情况可能表明我们的编码过程有问题。
请注意，我们使用私有/公共密钥模式，而不是对称密钥模式来编码和解码令牌。这意味着解码和编码密钥是不同的。
Technically, this is a sign/verification as it is used to generate a signature, and not encode/decode, but it's the naming convention used in JWT.
在我们的微服务结构中，只有签名机构需要私钥。这增加了安全性，因为其他服务中的任何密钥泄漏都将无法检索能够签名承载令牌的密钥。不过，我们需要生成适当的私钥和公钥。
要生成私钥/公钥，请运行以下命令:
```
$ openssl genrsa -out key.pem 2048
Generating RSA private key, 2048 bit long modulus
.....................+++
.............................+++
```
然后，要提取公钥，请使用以下命令:
```
$ openssl rsa -in key.pem -outform PEM -pubout -out key.pub
```
这将生成两个文件:`key.pem`和`key.pub`以及一个私有/公共密钥对。以文本格式读取它们就足以将其用作编码/解码 JWT 令牌的密钥:
```
>> with open('private.pem') as fp:
>> ..  private_key = fp.read()
>> generate_token_header('peter', private_key)
'Bearer '
```
请注意，对于测试，我们生成了一个**样本密钥对**，该密钥对以字符串形式附加。这些密钥是专门为这种用途创建的，不会在其他地方使用。请不要在任何地方使用它们，因为它们在 GitHub 中是公开的。
Be aware that you require a non-encrypted private key, not protected by a password, as the JWT module doesn't allow you to add a password. **Do not store production secret keys in unprotected files**. In [Chapter 3](03.html), *Build, Run, and Test Your Service Using Docker*, we'll see how to inject this secret using an environment variable, and in [Chapter 11](11.html), *Handling Change, Dependencies, and Secrets in the System*, we'll see how to properly deal with secrets in production environments.
# 测试代码
为了测试我们的应用，我们使用了优秀的`pytest`框架，这是 Python 应用测试运行器的黄金标准。
基本上`pytest`有很多插件和附加组件来处理很多情况。我们将使用`pytest-flask`，这有助于运行 Flask 应用的测试。
要运行所有测试，只需在命令行中调用`pytest`:
```
$ pytest
============== test session starts ==============
....
==== 17 passed, 177 warnings in 1.50 seconds =====
```
Note that `pytest` has a lot of features available to deal with a lot of situations while testing. Things running a subset of matched tests (the `-k` option), running the last failed tests (`--lf`), or stopping after the first failure (`-x`) are incredibly useful when working with tests. I highly recommend checking its full documentation ([https://docs.pytest.org/en/latest/](https://docs.pytest.org/en/latest/)) and discovering all its possibilities.
There are also a lot of plugins and extensions for using databases or frameworks, reporting code coverage, profiling, BDD, and many others. It is worth finding out about them.
我们配置基本用法，包括始终在`pytest.ini`文件中启用标志和在`conftest.py`中启用夹具。
# 定义 pytest 夹具
夹具在`pytest`中用于准备测试应该执行的环境，准备测试并在测试结束时进行清洁。如文档中所示，`pytest-flask`预计会有应用夹具。该插件生成一个`client`夹具，我们可以使用它在测试模式下发送请求。我们在`thoughts_fixture`夹具中看到这个夹具在运行，它通过应用编程接口产生三个想法，并在我们的测试运行后删除所有内容。
结构简化如下:
1.  产生三个想法。储存其`thought_id`:
```
@pytest.fixture
def thought_fixture(client):
    thought_ids = []
    for _ in range(3):
        thought = {
            'text': fake.text(240),
        }
        header = token_validation.generate_token_header(fake.name(),
                                                        PRIVATE_KEY)
        headers = {
            'Authorization': header,
        }
        response = client.post('/api/me/thoughts/', data=thought,
                               headers=headers)
        assert http.client.CREATED == response.status_code
        result = response.json
        thought_ids.append(result['id'])
```
2.  然后，将`yield thought_ids`添加到测试中:
```
yield thought_ids
```
3.  检索所有想法并逐一删除:
```
# Clean up all thoughts
response = client.get('/api/thoughts/')
thoughts = response.json
for thought in thoughts:
    thought_id = thought['id']
    url = f'/admin/thoughts/{thought_id}/'
    response = client.delete(url)
    assert http.client.NO_CONTENT == response.status_code
```
请注意，我们使用`faker`模块来生成假名称和文本。您可以在[https://faker.readthedocs.io/en/stable/](https://faker.readthedocs.io/en/stable/)查看其完整文档。这是一个为你的测试生成随机值的好方法，避免了重复使用`test_user`和`test_text`。通过独立检查输入，而不是盲目复制占位符，这也有助于塑造您的测试。
Fixtures can also exercise your API. You can choose a lower-level approach such as writing raw information in your database, but using your own defined API is a great way of ensuring that you have a complete and useful interface. In our example, we added an admin interface that's used to delete thoughts. This is exercised throughout the fixture as well as the creation of thoughts for a whole and complete interface.
This way, we also use tests to validate that we can use our microservice as a complete service, without tricking ourselves into hacking our way to perform common operations.
还要注意`pytest-flask`提供的`client`夹具的使用。
# 理解 test_token_validation.py
该测试文件测试`token_validation`模块的行为。本模块讲述了认证头的生成和验证，因此彻底测试它非常重要。
测试检查报头是否可以用正确的密钥进行编码和解码。它还根据无效输入检查所有不同的可能性:不正确格式的不同形状、无效解码密钥或过期令牌。
为了检查过期的令牌，我们使用了两个模块:`freezegun`，进行测试以检索特定的测试时间([https://github.com/spulec/freezegun](https://github.com/spulec/freezegun))和`delorean`，以轻松解析日期(尽管该模块能力更强；查看[https://delorean.readthedocs.io/en/latest/](https://delorean.readthedocs.io/en/latest/)的文件。这两个模块非常容易使用，非常适合测试。
例如，此测试检查过期的令牌:
```
@freeze_time('2018-05-17 13:47:34')
def test_invalid_token_header_expired():
    expiry = delorean.parse('2018-05-17 13:47:33').datetime
    payload = {
        'username': 'tonystark',
        'exp': expiry,
    }
    token = token_validation.encode_token(payload, PRIVATE_KEY)
    token = token.decode('utf8')
    header = f'Bearer {token}'
    result = token_validation.validate_token_header(header, PUBLIC_KEY)
    assert None is result
```
请注意，冻结时间正好是令牌到期后的 1 秒。
用于测试的公钥和私钥在`constants.py`文件中定义。有一个额外的独立公钥用于检查如果用无效公钥解码令牌会发生什么。
It is worth saying it again: please *do not* use any of these keys. These keys are for running tests only and are available to anyone who has access to this book.
# test_thoughts.py
该文件检查定义的应用编程接口。每个 API 都经过测试以正确执行操作(创建新的想法、返回用户的想法、检索所有想法、搜索想法并按 ID 检索一个想法)以及一些错误测试(未授权的创建和检索用户想法的请求，或检索不存在的想法)。
这里，我们再次使用`freezegun`来确定想法是何时创建的，而不是根据测试运行的时间来创建时间戳。
# 摘要
在这一章中，我们看到了如何开发一个 web 微服务。我们从遵循 REST 原则设计其 API 开始。然后，我们描述了如何访问数据库的模式，以及如何使用 SQLAlchemy 来访问它。
然后，我们学习了如何使用 Flask-RESTPlus 实现它。我们学习了如何定义映射到 API 端点的资源，如何解析输入值，如何处理操作，以及如何使用序列化器模型返回结果。我们描述了认证层是如何工作的。
我们包括了测试，并描述了如何使用`pytest`夹具为我们的测试创造初始条件。在下一章中，我们将研究如何将服务容器化，并通过 Docker 运行它。
# 问题
1.  你能说出 RESTful 应用的特点吗？
2.  使用 Flask-RESTPlus 有什么好处？
3.  你知道 Flask-RESTPlus 的哪些替代框架？
4.  命名测试中用来修正时间的 Python 包。
5.  能否描述一下认证流程？
6.  为什么我们选择 SQLAlchemy 作为示例项目的数据库接口？
# 进一步阅读
有关 RESTful 设计的深入描述，不仅限于 Python，您可以在*动手 RESTful API 设计模式和最佳实践*(https://www . packtpub . com/GB/application-development/Hands-RESTful-API-Design-Patterns-和最佳实践)中找到更多信息。你可以在*Flask:Building Python Web Services*([https://www . packtpub . com/GB/Web-development/Flask-Building-Python-Web-Services](https://www.packtpub.com/gb/web-development/flask-building-python-web-services))一书中了解更多如何使用 Flask 框架。