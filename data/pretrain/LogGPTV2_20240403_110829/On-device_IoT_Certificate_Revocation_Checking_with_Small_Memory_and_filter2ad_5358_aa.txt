title:On-device IoT Certificate Revocation Checking with Small Memory and
Low Latency
author:Xiaofeng Shi and
Shouqian Shi and
Minmei Wang and
Jonne Kaunisto and
Chen Qian
On-device IoT Certificate Revocation Checking with Small
Memory and Low Latency
Xiaofeng Shi
PI:EMAIL
University of California
Santa Cruz, CA, USA
Shouqian Shi
PI:EMAIL
University of California
Santa Cruz, CA, USA
Minmei Wang
PI:EMAIL
University of California
Santa Cruz, CA, USA
Jonne Kaunisto
PI:EMAIL
University of California
Santa Cruz, CA, USA
ABSTRACT
Allowing a device to verify the digital certificate of another device
is an essential requirement and key building block of many secu-
rity protocols for emerging and future IoT systems that involve
device-to-device communication. However, on-device certificate
verification is challenging for current devices, mainly because the
certificate revocation (CR) checking step costs too much resource
on IoT devices and the synchronization of CR status to devices
yields a long latency. This paper presents an on-device CR checking
system called TinyCR, which achieves 100% accuracy, memory and
computation efficiency, low synchronization latency, and low net-
work bandwidth, while being compatible with the current certificate
standard. We design a new compact and dynamic data structure
called DASS to store and query global CR status on a device in
TinyCR. Our implementation shows that TinyCR only costs each
device 1.7 MB of memory to track 100 million IoT certificates with
1% revocation rate. Checking the CR status of one certificate spends
less than 1 microsecond on a Raspberry Pi 3. TinyCR can also be
updated instantly when there are new certificates added or revoked.
CCS CONCEPTS
• Security and privacy → Mobile and wireless security.
KEYWORDS
IoT security, authentication, certificate revocation checking
ACM Reference Format:
Xiaofeng Shi, Shouqian Shi, Minmei Wang, Jonne Kaunisto, and Chen Qian.
2021. On-device IoT Certificate Revocation Checking with Small Memory
and Low Latency. In Proceedings of the 2021 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’21), November 15–19, 2021,
Virtual Event, Republic of Korea. ACM, New York, NY, USA, 17 pages. https:
//doi.org/10.1145/3460120.3484580
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3484580
Chen Qian
PI:EMAIL
University of California
Santa Cruz, CA, USA
1 INTRODUCTION
Recent years have witnessed the rapid growth of Internet of Things
(IoT) devices widely deployed in various applications [7]. With
the growing trend that IoT services scale from local area domains
to wider area domains, there is an increasing demand for secure
peer-to-peer communication protocols in a universe with millions
of IoT devices. Under this context, many security protocols for IoT
should be re-designed. For example, future IoT devices can use any
untrusted access point (such as a public 5G AP) to connect to the
Internet or use the short-range wireless media such as Bluetooth
and visible lights to communicate with another device directly.
Thus, peer-to-peer device authentication becomes a fundamen-
tal security problem of novel IoT and the building block of many
emerging critical IoT security protocols for communication privacy
(such as the TLS-style protocols) as well as IoT data authenticity and
integrity (such as the digital signature protocols) [1, 2, 20, 23]. The
state-of-the-art solution of device authentication is to use device
certificates based on the Public Key Infrastructure (PKI) [1, 2]: each
device is assigned a device certificate by a Certification Authority
(CA), which can be used as a digital signature of its public key. For
example, the IoT architecture of Symantec enterprise security (now
Broadcom) allows assigning certificates to millions of devices [1]
and verifying the device certificates by the device management
servers [2]. Note that the “CA” for IoT devices refers to not only the
general public SSL certificate authority, but the private certificate
issuer in a service managed by the service provider.
On-device certificate verification [32, 35], i.e., allowing one IoT
device to verify the certificate of another device, remains a challeng-
ing problem mainly due to the high latency and bandwidth cost of
the revocation-checking step. On-device certificate verification is a
vital step for IoT security: 1) Many emerging and future IoT applica-
tions require secure peer-to-peer communication directly or via the
Internet, such as autonomous robotic systems, vehicular communi-
cation, wearable healthcare systems, smart industrial control, and
IoT-based post-disaster management. A device should use its own
data and power to verify the certificate of another communicating
device, to further build a secure channel using protocols such as
DTLS [27]; 2) An IoT device may need to process the sensing data
collected from other devices, which carries the digital signatures
from the sensing sources [20]. Verifying the public-key certificates
is essential in validating digital signatures to ensure data authen-
ticity and integrity. For example, in a smart city, an IoT sensor has
 This work is licensed under a Creative Commons Attribution International 4.0 License. CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea. © 2021 Copyright is held by the owner/author(s). ACM ISBN 978-1-4503-8454-4/21/11. https://doi.org/10.1145/3460120.3484580  Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1118to authenticate the mobile devices of the authorized users so that
it can only provide the sensing data to the users who subscribe to
the service. Meanwhile, user devices have to verify the signatures
of sensing data to ensure the data are not tempered by an attacker.
Why on-device certificate verification is challenging? Verifying
a digital certificate takes three main steps: 1) check its validity pe-
riod; 2) validate the CA’s digital signature using CA’s public key; 3)
verify the certificate revocation (CR) status. Step 1 is simple. Step
2, although involving expensive public key cryptography, takes
bounded time and memory. Step 3 is considered an expensive pro-
cess even for a desktop machine [19, 29, 38]. Some issued digital
certificates may have been revoked by the CAs [17, 38, 39] due to
a number of reasons: 1) the device is stolen; 2) the private key of
a device could be compromised by attackers; 3) the CA may find
that a certificate is a mis-issuance; 4) a device may unsubscribe
from an IoT service while its certificate is still within its valid time
period; 5) the database of an IoT service provider or device manu-
facturer might be hacked and the private key information could be
leaked. Upon being notified with these situations, the CA should
immediately labeling these certificates as “revoked”.
For SSL certificates, a certificate revocation list (CRL) [15] con-
taining all revoked certificates is prepared by the CA and sent to
web browsers for revocation checking [29, 38, 39]. The CRL intro-
duces substantial overhead even if it runs on a desktop machine,
because the CRL size is proportional to the number of revoked cer-
tificates, which can be in millions [29, 38, 39]. For IoT, the overhead
problem is more severe, because: 1) the number of IoT devices could
be more than that of web servers; 2) the memory, CPU, and network
resource of an IoT device is much weaker than those of a desktop.
An alternative solution is to use Online Certificate Status Protocol
(OCSP) [22], which increases CR verification latency and the risk of
leaking user privacy (such as accessing history of the device) [30].
In addition, unlike web servers, IoT devices are small in size, have
better mobility and are usually maintained by individual users,
which also means the devices are much easier to be hacked or
stolen. At service-level, it is also more common for an IoT device
to be unsubscribed from a service while the certificate is still in
valid period. Hence, revocations for IoT certificates happen more
frequently and have to be properly handled. When a revocation
happens, how soon other parties are aware of the revocation and
no longer trust the device becomes a rather critical metric of the
security property in the protocol.
The main requirements of practical on-device IoT CR checking
are summarized as follows:
(1) Accuracy: A device should determine a certificate revoca-
tion status without error.
(2) Efficiency: The protocol should cost small memory, compu-
tation, and network resource on IoT devices.
(3) Low latency: Two types of latencies are essential, namely
the synchronization latency and query latency (defined in
Sec. 3). Both latencies should be maintained low.
(4) User privacy: The protocol should not leak the identities
of the accessing devices, locations, and/or communication
pattern/frequency of users.
(5) Compatibility: The protocol is required to be compatible
with current certificate standards and existing certificates.
To our knowledge, there is no solution for on-device IoT CR check-
ing that satisfies all above requirements. Recent works on web
certificates [19, 29] may focus on a subset of them, but fail to ad-
dress all, as analyzed in Sec. 2.
This work presents TinyCR, the first IoT certificate system
for on-device CR checking, which achieves all the five listed
requirements. Our key innovation is a new compact and fast data
structure named Dynamic Asymmetric Set Separator (DASS) to
represent the revocation status of all certificates on IoT devices
with zero error. TinyCR also includes a management program
running on a server maintained by the IoT service provider to
synchronize the DASS on devices, which can be easily replicated
to avoid a single point of failure. We have implemented both the
management and on-device programs. TinyCR is very efficient: it
only needs 1.7 MB on-device memory to track the CR status of 100
million certificates with 1% revocation rate and verifies a certificate
revocation status within 1 microsecond on a Raspberry Pi 3. The
device can also be instantly synchronized when new revocations
happen. Hence, TinyCR uses very small resource to effectively
protect the whole IoT network from the attackers who intend to
abuse the revoked certificates. Our source code of TinyCR is open
to public for re-use and results reproduction (link) [3].
Based on our analysis and evaluations, TinyCR is the ideal so-
lution for CR in any scenario that satisfies: 1) Users need fast or
frequent authentication. TinyCR has a clear advantage in latency
compared to OCSP and equivalent performance compared to CR-
Lite [19] (the state of the art). 2) Each user device has a limited size
of memory that can be used to store the CR list, such as several
MBs. TinyCR costs slightly less memory than CRLite and much
less than other CRL solutions when the revocation ratio is low. 3)
Low CRL synchronization latency is crucial for better security. The
faster the devices can realize a revocation made by the CA, the
lower is the risk for certificate abuse. To our knowledge, TinyCR is
the first on-device CR checking protocol that supports real-time or
high-frequency updating in response to the certificate set changes.
4) User devices prefer low bandwidth cost and the dynamics of
certificates are moderate. Experiments show that the bandwidth
cost of TinyCR is orders of magnitude lower than that of CRLite, if
the number of new certificates added per day or number of revoked
certificated per day are fewer than 1% of the existing certificate sets.
If these changes per day are on the same order of magnitude of the
size of total certificates – although unlikely in practice – TinyCR
still wins if high updating frequency (i.e., one update per hour) is
required, while costs more bandwidth for infrequent update set-
tings (i.e., one update per day). We believe these situations well
characterize the scenarios of IoT P2P communication.
The rest of this paper is organized as follows. In Sec. 2, we review
the state-of-the-art approaches for CR verification. In Sec. 3, we
present an overview of the TinyCR system and the threat model.
The data structure and the optimization methods of DASS are il-
lustrated in Sec. 4, and the system design of TinyCR is shown in
Sec. 5. We present the experimental results of TinyCR in Sec. 6.
We discuss the real deployment concerns in Sec. 7. We present the
security analysis in Sec. 8 and conclude the paper in Sec. 9.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1119Method
Memory
cost
∼ 38 MB
CRL [15, 21]
OCSP [21, 22] ∼ 1 KB/req.
29.1 MB
Othello [37]
1.7 MB
CRLite [19]
1.3 MB
Let’s Rev. [29]
TinyCR (ours)
1.7 MB
Query
time
≫ 250 ms
≤ 250 ms
< 1 µs
< 1 µs
∼ 10 ms
< 1 µs
-
-
0∼100 B
-
-
0∼20 KB
0.53 MB
62.6 KB
< 1 ms
1 day∗
1 day
< 1 ms
Table 1: Comparison of certificate revocation verification protocols with 100 million certificates, assuming 1% revocation rate
and 0.02% new revocations per day. ∗ Can be shorter with higher daily delta message cost.
2.8∼21.6 KB
0∼108 B
-
-