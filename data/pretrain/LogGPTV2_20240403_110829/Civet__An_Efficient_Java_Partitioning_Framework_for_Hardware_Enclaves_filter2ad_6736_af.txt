[3] David Lie, Chandramohan A Thekkath, and Mark
Horowitz. Implementing an untrusted operating system
on trusted hardware. ACM SIGOPS Operating Systems
Review, 2003.
[4] Victor Costan, Ilia Lebedev, and Srinivas Devadas. Sanc-
tum: Minimal hardware extensions for strong software
isolation. In USENIX Security, volume 16, 2016.
[5] Felix Schuster, Manuel Costa, Cédric Fournet, Christos
Gkantsidis, Marcus Peinado, Gloria Mainar-Ruiz, and
Mark Russinovich. VC3: Trustworthy data analytics in
the cloud using SGX. In IEEE S&P, 2015.
[6] Wenting Zheng, Ankur Dave, Jethro G. Beekman,
Raluca Ada Popa, Joseph E. Gonzalez, and Ion Sto-
ica. Opaque: An oblivious and encrypted distributed
analytics platform. In NSDI, 2017.
[7] Stefan Brenner, Colin Wulf, David Goltzsche, Nico We-
ichbrodt, Matthias Lorenz, Christof Fetzer, Peter Piet-
zuch, and Rüdiger Kapitza. SecureKeeper: Conﬁdential
ZooKeeper using Intel SGX. In Proceedings of the 17th
International Middleware Conference, 2016.
[8] David Goltzsche, Colin Wulf, Divya Muthukumaran,
Konrad Rieck, Peter Pietzuch, and Rüdiger Kapitza.
TrustJS: Trusted client-side execution of JavaScript. In
Proceedings of the 10th European Workshop on Systems
Security, 2017.
[9] Mark Russinovich.
Introducing Azure conﬁdential
https://azure.microsoft.com/en-
computing.
us/blog/introducing-azure-confidential-
computing/, 2017 September.
[10] Pratheek Karnati and Karna Bojjireddy. Data-in-use
protection on IBM Cloud – IBM, Intel, and Fortanix
partner to keep enterprises secure to the core.
[11] Apache Hadoop. http://hadoop.apache.org/.
[12] Andrew Baumann, Marcus Peinado, and Galen Hunt.
Shielding applications from an untrusted cloud with
Haven. In OSDI, 2014.
[13] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas
Knauth, Andre Martin, Christian Priebe, Joshua Lind,
Divya Muthukumaran, Daniel O’Keeffe, Mark L. Still-
well, David Goltzsche, Dave Eyers, Rüdiger Kapitza,
Peter Pietzuch, and Christof Fetzer. SCONE: Secure
Linux containers with Intel SGX. In OSDI, 2016.
[14] Graphene library OS.
oscarlab/graphene.
http://github.com/
[15] SGX-LKL. https://github.com/lsds/sgx-lkl.
[16] Chia-Che Tsai, Donald E. Porter, and Mona Vij.
Graphene-SGX: A practical library os for unmodiﬁed
applications on SGX. In USENIX ATC, 2017.
[17] Nuno Santos, Himanshu Raj, Stefan Saroiu, and Alec
Wolman. Using arm trustzone to build a trusted lan-
In ASPLOS,
guage runtime for mobile applications.
2014.
[18] Joshua Lind, Christian Priebe, Divya Muthukumaran,
Dan O’Keeffe, Pierre-Louis Aublin, Florian Kelbert,
Tobias Reiher, David Goltzsche, David Eyers, Rudiger
Kapitza, Christof Fetzer, and Peter Pietzuch. Glamdring:
Automatic application partitioning for Intel SGX.
In
USENIX ATC, 2017.
[19] Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, and
Yubin Xia. Thwarting memory disclosure with efﬁcient
In CCS,
hypervisor-enforced intra-domain isolation.
2015.
[20] ARM TrustZone. http://www.arm.com/products/
processors/technologies/trustzone/.
[21] Stephen Checkoway and Hovav Shacham. Iago attacks:
Why the system call API is a bad untrusted RPC inter-
face. In ASPLOS, 2013.
[22] CWE-843: Access of resource using incompatible type
(’type confusion’). https://cwe.mitre.org/data/
definitions/843.html.
[23] Gang Tan and Jason Croft. An empirical security study
In USENIX Security,
of the native code in the JDK.
2008.
[24] Phosphor: Dynamic taint
tracking for the JVM.
https://github.com/Programming-Systems-
Lab/phosphor.
[25] Meni Orenbach, Pavel Lifshits, Marina Minkin, and
Mark Silberstein. Eleos: Exitless OS services for SGX
enclaves. In EuroSys, 2017.
[26] Shweta Shinde, Dat Le Tien, Shruti Tople, and Prateek
Saxena. PANOPLY: Low-TCB Linux Applications
With SGX Enclaves. In NDSS, 2017.
[27] Software Guard Extenstions (SGX) SDK for Linux.
[28] sgx-utils.
utils.
https://github.com/jethrogb/sgx-
[29] Rust SGX SDK.
rust-sgx-sdk.
https://github.com/baidu/
[30] Konstantin Rubinov, Lucia Rosculete, Tulika Mitra, and
Abhik Roychoudhury. Automated partitioning of An-
droid applications for trusted execution environments.
520    29th USENIX Security Symposium
USENIX Association
In IEEE/ACM 38th International Conference on Soft-
ware Engineering (ICSE), 2016.
[31] Adrien Ghosn, James R. Larus, and Edouard Bugnion.
Secured routines: Language-based construction of
trusted execution environments. In USENIX ATC, 2019.
[32] Stefan Brenner, Tobias Hundt, Giovanni Mazzeo, and
Rüdiger Kapitza. Secure cloud micro services using
Intel SGX. In IFIP International Conference on Dis-
tributed Applications and Interoperable Systems, 2017.
[33] Marcela S Melara, Michael J Freedman, and Mic Bow-
man. EnclaveDom: Privilege separation for large-TCB
applications in trusted execution environments. arXiv
preprint arXiv:1907.13245, 2019.
[34] Michiaki Tatsubori, Toshiyuki Sasaki, Shigeru Chiba,
and Kozo Itano. A bytecode translator for distributed
In Proceedings
execution of “legacy” Java software.
of the 15th European Conference on Object-Oriented
Programming, 2001.
[35] Eli Tilevich and Yannis Smaragdakis. J-Orchestra: Au-
tomatic Java application partitioning. In Proceedings
of the 16th European Conference on Object-Oriented
Programming, 2002.
[36] Steve Zdancewic, Lantian Zheng, Nathaniel Nystrom,
and Andrew C. Myers. Untrusted hosts and conﬁden-
tiality: Secure program partitioning. In SOSP, 2001.
[37] Stephen Chong, Jed Liu, Andrew C. Myers, Xin Qi,
K. Vikram, Lantian Zheng, and Xin Zheng. Secure web
applications via automatic partitioning. In SOSP, 2007.
[38] M Miller. Robust composition: Towards a uniﬁed ap-
proach to access control and concurrency control 2006.
Johns Hopkins: Baltimore, MD, page 302, 2006.
[39] Adrian Mettler, David A. Wagner, and Tyler Close. Joe-
E: A security-oriented subset of java. In NDSS, 2010.
[40] Fred Spiessens and Peter Van Roy. The oz-e project:
Design guidelines for a secure multiparadigm program-
ming language. In International Conference on Multi-
paradigm Programming in Mozart/OZ, 2004.
[41] Marc Stiegler and Mark Miller. How emily tamed the
caml. Hewlett Packard Labs Tech Report, 2006.
[42] Raoul Strackx and Frank Piessens. Ariadne: A minimal
approach to state continuity. In USENIX Security, 2016.
[43] Yuanzhong Xu, Weidong Cui, and Marcus Peinado.
Controlled-channel attacks: Deterministic side chan-
In IEEE S&P,
nels for untrusted operating systems.
2015.
[44] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank
Piessens, and Raoul Strackx. Telling your secrets with-
out page faults: Stealthy page table-based attacks on
enclaved execution. In USENIX Security, 2017.
[45] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko,
Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza
Sadeghi. Software Grand Exposure: SGX cache attacks
are practical. In 11th USENIX Workshop on Offensive
Technologies (WOOT 17), 2017.
[46] Marcus Hähnel, Weidong Cui, and Marcus Peinado.
High-resolution side channels for untrusted operating
systems. In USENIX ATC, 2017.
[47] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim,
Hyesoon Kim, and Marcus Peinado.
Inferring ﬁne-
grained control ﬂow inside SGX enclaves with branch
shadowing. In USENIX Security, 2017.
[48] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian
Zhang, XiaoFeng Wang, Vincent Bindschaedler, Haixu
Tang, and Carl A. Gunter. Leaky cauldron on the dark
land: Understanding memory side-channel hazards in
SGX. In CCS, 2017.
[49] Paul Kocher, Daniel Genkin, Daniel Gruss, Werner Haas,
Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas
Prescher, Michael Schwarz, and Yuval Yarom. Spectre
attacks: Exploiting speculative execution. In IEEE S&P,
2018.
[50] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisen-
barth. CacheZoom: How SGX ampliﬁes the power of
cache attacks. In CHES, 2017.
[51] Johannes Götzfried, Moritz Eckert, Sebastian Schinzel,
and Tilo Müller. Cache attacks on Intel SGX. In Euro
S&P, 2017.
[52] Li Li, Tegawendé F. Bissyandé, Damien Octeau, and
Jacques Klein. DroidRA: Taming reﬂection to support
whole-program analysis of android apps. In Proceed-
ings of the 25th International Symposium on Software
Testing and Analysis, 2016.
[53] Eric Bodden, Andreas Sewe, Jan Sinschek, Hela Oues-
lati, and Mira Mezini. Taming reﬂection: Aiding static
analysis in the presence of reﬂection and custom class
loaders. In Proceedings of the 33rd International Con-
ference on Software Engineering, 2011.
[54] Paulo Barros, Rene Just, Suzanne Millstein, Paul Vines,
Werner Dietl, Marcelo dAmorim, and Michael D. Ernst.
Static analysis of implicit control ﬂow: Resolving java
In Proceedings of the
reﬂection and android intents.
2015 30th IEEE/ACM International Conference on Au-
tomated Software Engineering (ASE), 2015.
USENIX Association
29th USENIX Security Symposium    521
[55] B. G. Ryder. Constructing the call graph of a program.
IEEE Transaction of Software Engineering., May 1979.
[56] Mark Weiser. Program slicing.
In Proceedings of
the International Conference on Software Engineering
(ICSE), 1981.
[57] Lars Ole Andersen. Program Analysis and Specializa-
tion for the C Programming Language. PhD thesis,
Johns Hopkins University, 1994.
[58] Bjarne Steensgaard. Points-to analysis in almost lin-
ear time. In Proceedings of the 23rd ACM SIGPLAN-
SIGACT Symposium on Principles of Programming Lan-
guages, 1996.
[59] Manuvir Das. Uniﬁcation-based pointer analysis with
directional assignments. In PLDI, 2000.
[60] Raja Vallée-Rai, Phong Co, Etienne Gagnon, Laurie
Hendren, Patrick Lam, and Vijay Sundaresan. Soot - a
Java bytecode optimization framework. In Proceedings
of the Conference of the Centre for Advanced Studies on
Collaborative Research, 1999.
[61] Ondˇrej Lhoták and Laurie Hendren. Scaling Java points-
to analysis using SPARK. In Proceedings of the 12th
International Conference on Compiler Construction,
2003.
[62] Jens Knoop, Oliver Rüthing, and Bernhard Steffen. Par-
tial dead code elimination. In PLDI, 1994.
[63] Apache Tomcat. http://tomcat.apache.org/.
[64] AppArmor. http://wiki.apparmor.net/.
[65] Cynthia Dwork. Differential privacy.
In Proceed-
ings of the 33rd international conference on Automata,
Languages and Programming-Volume Part II. Springer-
Verlag, 2006.
[66] Edward J. Schwartz, Thanassis Avgerinos, and David
Brumley. All you ever wanted to know about dynamic
taint analysis and forward symbolic execution (but might
have been afraid to ask). In IEEE S&P, 2010.
[67] Vivek Haldar, Deepak Chandra, and Michael Franz. Dy-
In Proceedings of
namic taint propagation for Java.
the 21st Annual Computer Security Applications Con-
ference, 2005.
[68] James Clause, Wanchun Li, and Alessandro Orso. Dy-
tan: A generic dynamic taint analysis framework. In
Proceedings of the 2007 International Symposium on
Software Testing and Analysis, 2007.
[69] Wei Xu, Sandeep Bhatkar, and R. Sekar. Taint-enhanced
policy enforcement: A practical approach to defeat a
wide range of attacks. In USENIX Security, 2006.
[70] Winnie Cheng, Qin Zhao, Bei Yu, and Scott Hiroshige.
TaintTrace: Efﬁcient ﬂow tracing with dynamic binary
rewriting. In Proceedings of the 11th IEEE Symposium
on Computers and Communications, 2006.
[71] Nicholas Nethercote and Julian Seward. Valgrind: a
framework for heavyweight dynamic binary instrumen-
tation. In ACM Sigplan notices, 2007.
[72] William Enck, Peter Gilbert, Seungyeop Han, Vasant
Tendulkar, Byung-Gon Chun, Landon P. Cox, Jaeyeon
Jung, Patrick McDaniel, and Anmol N. Sheth. Taint-
Droid: An information-ﬂow tracking system for real-
time privacy monitoring on smartphones. ACM Trans.
Comput. Syst., 2014.
[73] James Newsome and Dawn Song. Dynamic taint anal-
ysis for automatic detection, analysis, and signature—
generation of exploits on commodity software. In NDSS,
2005.
[74] Jonathan Bell and Gail Kaiser. Phosphor: Illuminat-
In ACM
ing dynamic data ﬂow in commodity jvms.
SIGPLAN Notices. ACM, 2014.
[75] Java
garbage
collection
basics.
http:
//www.oracle.com/webfolder/technetwork/
tutorials/obe/java/gc01/index.html.
[76] Meysam Taassori, Ali Shaﬁee, and Rajeev Balasubramo-
nian. VAULT: Reducing paging overheads in SGX with
efﬁcient integrity veriﬁcation structures. In ASPLOS,
2018.
[77] FST:
fast
java serialization drop in-replacement.
https://github.com/RuedigerMoeller/fast-
serialization.
[78] Intel® Software Guard Extensions for Linux* OS -
http://github.com/01org/linux-
SGX driver.
sgx-driver.
[79] Aapo Kyrola, Guy Blelloch, and Carlos Guestrin.
GraphChi: Large-scale graph computation on just a
PC. In OSDI, 2012.
[80] LiveJournal
social
network
dataset.
https://snap.stanford.edu/data/soc-
LiveJournal1.html.
522    29th USENIX Security Symposium
USENIX Association