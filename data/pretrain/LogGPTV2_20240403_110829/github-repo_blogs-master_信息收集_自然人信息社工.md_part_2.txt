如果邮件表头内含有"X-Originating-IP:"的key值，value值即为发送者的IP。比较常见的QQ邮箱、126邮箱，都有本字段。
如果没有该字段，可以考虑标头内的Received字段。（多个Received字段时考虑最底部的，不一定有，有也不一定准）
#### 7.2 发方写邮件探针
原理是通过在邮件内容中嵌入动态加载的外部图片，当收信人点开邮件时就会在图片服务器上留下IP。
具体方式是以源代码或文本模式写一封邮件，在邮件正文中嵌入图片html格式的图片链接。可以将图片自身的大小设的非常小，且将img字段设为不可见。这样攻击者打开邮件也无法感知。
```text
```
### 8  脱敏恢复
#### 8.1 身份证号脱敏恢复
身份证号是的编排是有一定规律可循的。除了最后1位是校验位外，其余各位与出生地、出生日期、性别、出生编号系系相关，因此即使是经脱敏处理的身份证号，仍能通过程序分析的方式过滤出可能的身份证序列组合。
这里写了一个[脱敏身份证恢复工具](https://github.com/aplyc1a/toolkits/blob/master/0x01%20%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/info-sfz.py)，支持对身份证后4、6位及身份证内生日的爆破。
#### 8.2 手机号脱敏恢复
介绍怎么尽可能的恢复手机号的所有位数，但在此之前需要一定的知识介绍。
手机号码的11位是有规律可循的。
| 1-3位      | 4-7位    | 8-11位   |
| ---------- | -------- | -------- |
| 移动接入码 | 地区编码 | 用户号码 |
**移动接入码**
| 运营商类型 | 移动接入码                                                   |
| ---------- | ------------------------------------------------------------ |
| 电信       | 133 149 153 173 174 177 180 181 189 191 199                  |
| 联通       | 130 131 132 145 146 155 156 166 167 171 175 176 185 186      |
| 移动       | 134 135 136 137 138 139 147 148 150 151 152 157 158 159 172  178 182 183 184 187 188 195 198 |
| 虚拟运营商 | 162  165 167 170 171                                         |
移动接入码是由运营商去向工信部申请，由工信部统一颁发的，每颁发一次，都会发布一个《电信网号码资源使用证书》。通过下载历年的证书我们能获得不同号段的分配说明。这里有个问题，国家这些年一直在推携号转网，初衷是帮助用户能够自主切换号码的运营商，如果真的全面推展开，且大家的使用积极性很高的化，那移动接入码就不再能准确区分手机号码是哪家运营商的了，但从目前的结果来看，通过移动接入码来判断运营商归属仍然是一个高度有效的方法。
**地区编码**
地区编码的具体数值分配由各运营商管理，因此很难给出一个通用的结构组成。所幸，网上有人专门通过爬虫等方式收集了运营商的地区编码数据库。如下所示：
https://github.com/dannyhu926/phone_location
##### 8.2.1 已知目标手机号前3后4位+城市
使用下面这个shell命令简单分析以下，可以发现，如果移动接入码固定的情况下，一个城市的前7位（移动接入码+地区编码）的可能性不超过5000,更普遍的情况下是可以控制在500以内的。
```shell
array=( 134 135 136 137 138 139 147 148 150 151 152 157 158 159 172 178 182 183 184 187 188 195 198 130 131 132 145 146 155 156 166 167 171 175 176 185 186 133 149 153 173 174 177 180 181 189 191 199 )
for i in ${array[@]}; do     cat phone_location.sql |grep "'$i'"|awk '{print $8}'|sort -nr | uniq -c|sort -nr|head -n 1; done
```
因此，这时，如果已知手机号前3后4位时，如果知道目标所处的位置将能极大的缩小目标号码的可能范围。结果的可能数<=5000。
##### 8.2.2 已知目标手机号后4位+城市
使用下面的shell命令简单分析一下，可以发现，如果只知道目标所处的城市，那么前7位的可能性不超过20000。
```shell
clear;cat phone_location.sql |awk '{print $8}'|sort -nr|uniq -c |sort -nr|head -n 10
```
因此，总的来说这种情况下需要遍历的手机号可能不超过20000。
##### 8.2.3 已知后4位
如果只知道后4位别的一概不知，则要尝试482049次，才能保证遍历到正确的目标号码。
```shell
clear;cat phone_location.sql |grep "INSERT"|grep "phone_location"|wc -l
```
 ### 9 其他
围绕得到的基本信息，可以在社交帐号内进行进一步的信息挖掘，获得其他信息。
#### 9.1 字典定制化
理想情况下的一个人的互联网账户都要满足登录密码需要满足长度、复杂度、无意义、唯一性的要求，但实际操作起来这是几乎不可能的。
实际场景下对口令的选取往往围绕用户自身及周边的特点展开。如果信息收集的足够彻底，我们可以依据以下的信息，生成关键词根，通过词根间的组合填充，进而生成定制化字典。
```text
{
    "人":{
        "拼音全称1":"chuanjianguo",
		"拼音全称2":"ChuanJianguo",
		"拼音简写1":"CJg",
		"拼音简写2":"cjg",
		"拼音全称3":"jianguo"
    },
    "生日":{
        "生日全部1":"20210512",
		"生日部分":"0512"
    },
    "电话": {
	    "手机号后6位":"123456",
		"手机号后4位":"3456"
	},
	"学校":{
	    "学号":"123456",
		"毕业或入学年份":"2021"
	},
	"sfz":{
		"sfz后6位":"654321",
		"sfz后4位":"4321"
	},
	"爱好/宠物":{
		"关键字":"xiuer"
	},
	"公司":{
		"name1":"Google",
		"name2":"GG"
	},
	"其他":{
	    "通用词缀":"略"
	}
}
```
#### 9.2 口令哈希逆向查询
在线密文密码查询网站，有时能帮助我们得到明文密码。
https://cmd5.com/
#### 9.3 图片搜索
**百度识图**：https://image.baidu.com/?fr=shitu
**谷歌识图**：https://images.google.com/