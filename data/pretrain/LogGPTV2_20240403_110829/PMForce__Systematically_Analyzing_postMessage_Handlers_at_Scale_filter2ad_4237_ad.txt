43
16
23
38
80
Sink
eval
insertAdjacentHTML
innerHTML
document.write
scriptTextContent
jQuery .html
sum code execution
set cookie
localStorage
sum state manipulation
total sum
total number
of handlers
number of
unique handlers
132
38
37
26
4
3
217
108
63
161
377
57
4
37
4
4
3
105
101
60
150
252
find evidence that our candidate indeed triggered the intended
functionality we generate a report of a successful exploitation,
meaning our analysis does not have any false positive cases.
4.4 Modeling PM Laundering and Leakage
PM laundering and PM leakage both capture similar flows, albeit
with slightly different environmental constraints. In the case of PM
laundering, the attacker wants to achieve that a postMessage han-
dler relays (parts of) the message that the attacker sent to another
frame. This is then received by the second frame with the origin of
the relaying frame. Contrary, for PM leakage, the attacker wants to
be the target of a postMessage carrying sensitive information such
as localStorage entries or cookie values.
In both cases, the attacker needs to be able to control which doc-
ument receives the postMessage. We can distinguish between two
cases of how a target page might send postMessages, i.e., by fetch-
ing specific iframe elements from the DOM or by using relative
frame handlers such as top, opener or event.source. Unfortu-
nately, as described by Barth et al. [3], an attacker can navigate
specific sub-frames of any target page using the window.frames
property cross-origin, leaving the former trivially exploitable. As
for the latter, exploitability strictly boils down to the attacker’s
capabilities of manipulating these properties, e.g., having a site
frame another vulnerable application. Since there is no objective
criterion which allows us to define the success of an attacker as
these issues are context-specific, we resort to manual analysis in
those cases where we find potentially dangerous patterns as output
by our dynamic execution engine.
To also account for flows coming from either document.cookie
and localStorage, we replace values fetched from either storage
mechanism with our proxy values and capture operations on these
as in our general case. This showcases the flexibility of our frame-
work, as we can essentially replace any value with a proxy version
to capture all operations performed on these objects.
5 RESULTS
In this section, we discuss the results of applying PMForce to the
top 100,000 sites, according to Tranco[19] created on March 22,
sites
56
11
19
1
3
1
91
106
23
128
219
2020. We visited each tranco link, and ten randomly selected same-
site links found on the starting page and analyzed each handler
that was registered by the pages, totalling 758,658 documents and
27,499 handler functions Our experiment was conducted March 23,
2020 and took around 24 hours using 130 parallel instances of our
pipeline, using a timeout of 30 seconds per query to the SMT solver.
5.1 Vulnerability Analysis
Table 1 depicts the findings of our experiment on the Tranco top
100,000. The total number of handlers represents the amount of
unique handlers per hash sum of the handler code, for which we
could observe a tainted data flow into the respective sinks. By
manually sampling our results we could find various handlers which
use slightly differing layouts, as they were the same library but
slightly adapted to the website, or had differing nonces across
observed instances of the same handler. To paint a clear picture
of how many different families of handlers we could observe to
be vulnerable, we used a hash over the lexical structure, i.e., the
representation as tokens, of the registered handlers and used this
as a distinguishing factor. Overall, this resulted in 10,846 unique
handlers that we encountered in our experiment. In total, we found
252 handler families with a data flow to any of our considered
sinks, out of which we are unable to analyze 21 due to timeouts
and another 21 due to unsupported behavior. We defer a detailed
analysis of these issues to Section 6.1.
Naturally, not all of our forcefully found flows are abusable by an
attacker, e.g., sanitized values for XSS or only partially controllable
storage values. The number of abusable cases represents our auto-
matically verified issues, which can then be further classified among
handlers without any check and handlers with origin checks. Even
though Son and Shmatikov [24] showed that most origin checks are
faulty, we defer a thorough analysis of these checks to Section 5.2.
In terms of direct XSS, we find that eval is the most prominent
sink, with 43 unique handlers that have an exploitable flow. Out
of those, 25 do not perform any origin checks and thus can be
exploited by a web attacker without any other pre-conditions. Sim-
ilarly, 16 handlers use attacker-controllable data in an assignment
to innerHTML, out of which twelve do not perform an origin check.
1
2
3
4
window.onmessage = function (event){
if(event.data.type === 'foobar')
eval(event.data)
}
Figure 8: Example of false positive of the taint analysis
Randomly sampling eight (~20%) handlers for which we could not
automatically validate code execution flaws, we could find five cases
in which exploitability relied on environmental constraints, e.g.,
the presence of certain DOM elements which were not present in
the page. One handler, depicted in Figure 8, is unexploitable. In this
handler, it is first checked that the property type of event.data
exists, and subsequently eval is called with the entire event.data
object. To exploit this as an attacker, we’d have to set event.data
to, e.g., alert(1). The surrounding code, however, expects the data
property to be an object with the key type, i.e., there is no way to
satisfy both constraints. The remaining two handlers ensure that
only alphanumerical payloads can be used in the context of the
sink, for which none of our Exploit Templates fulfill this criterion.
While we cannot automatically validate such cases, the output of
our taint analysis might be passed to a human expert to provide a
final verdict on the exploitability using domain knowledge to, e.g.,
bypass custom sanitization or filter routines. However, we were
still able to find 43 handlers that lead to a trivial code execution
by any web attacker and overall 66 that might be abusable by an
attacker if they could compromise a trusted host.
We note here that the sum of handlers with and without origin
check amounts to 67. This is caused by the fact that we determine
uniqueness on the structure of the directly registered handler, not
all code that was used to handle an incoming message. An example
of such a handler is shown in Figure 10 in the appendix, where the
same dispatcher is used to invoke different functionality (once with
and once without origin checks) for different sites. Even though we
analyze all hash-unique handlers, the table shows the aggregate of
structure-unique handlers, hence folding together cases where the
registered handler matches, but the invoked functionality differs.
In terms of arbitrary storage manipulation, we could find that
30 handlers are susceptible to localStorage alterations, while 18
to cookie alterations. Again the vast majority does not perform
any checks at all, leading to trivial manipulations by an attacker.
Sampling another 20 handlers (~20%) where PMForce was unable to
validate storage manipulations, uncovers 19 cases in which the han-
dler only allows certain prefixes for the keys of storage alterations
or even allows only a single fixed key. In the remaining handler,
we could observe that the constraint solver runs into a timeout,
even though an arbitrary storage manipulation was possible, which
forms a false negative in our analysis. While alterations of specific
key-value pairs might still suffice in a specific attack scenario, this
does not capture the attack vector that we set out to investigate,
i.e., full control of the client-side storage mechanism.
To conclude our results, we found that 43 handlers allowed for
trivial XSS affecting 91 sites, as well as, 38 handlers allowing for
storage manipulation affecting 128 sites. In total, an attacker can
exploit 219 sites due to a complete lack of origin checks.
Even though an abundance of handler functions are performing
non-critical operations, we can still find various handlers that do,
and that can be abused by an attacker. This highlights the strengths
of PMForce in contrast to manual efforts, which would no longer
scale to the current corpus of handler functions.
5.2 Origin Checks
We now turn to analyze the correctness of the origin checks of the
problematic handlers we discovered. Using our lexical uniqueness
criterion, we captured a total of 32 unique handlers that have ex-
ploitable flows once the origin check can be bypassed by an attacker
which would affect another 160 sites. Manually examining these
checks shows that contrary to the results of Son and Shmatikov
[24] from 2013, nowadays, 24 out of the 32 handlers perform strict
origin checks that are not circumventable. With 19 out of these 24
handlers, the vast majority compares the origin to a set of fix ori-
gins. The remaining five implement checks that allow for arbitrary
subdomains of a set of fixed eTLD+1, either via regular expressions
or checking that the origin ends with the eTLD+1. The incorrect
checks constitute of seven indexOf checks that an attacker can cir-
cumvent using an arbitrary domain with appropriate subdomains
or registering a specifically crafted domain and one incorrect check
using a broken regular expression. We can conclude that contrary
to previous analyses, origin checks have shifted to being mostly
correctly implemented with the exceptional odd-ones out.
5.3 PostMessage Relays
In this section, we set out to discuss the results of our manual in-
vestigation of handlers for which we could observe a flow from a
received postMessage to another call to the postMessage function.
We found a total of 45 unique handlers that exhibited any such flow,
from which 25 use the data taken from the received postMessage
and use it inside a fixed structure that is then sent further along,
thus, not controllable by an attacker. Of the remaining 20 handlers,
four reflect the message to the sender, thus cannot be used to relay
a message to another frame reliably. In Chrome the event.source
property will be set to null once the frame that originally sent the
message was navigated, thus preventing an attacker from navigat-
ing the attack page before the postMessage is processed. Firefox
and Safari, in contrast, do not have this protective measure in place,
which introduces a race condition, in which the attacker tries to
navigate the frame before the vulnerable handler echos the data
back using the event.source property. While we were able to
confirm these issues with toy examples, in which messages are
reflected to the sender after 100ms, we discard these cases for our
analysis as they are dependent on whether or not an attacker can
delay the execution of the vulnerable handler in practice.
Overall, this leaves us with 16 handlers that relay messages that
an attacker can abuse. For six, the message is relayed to the parent
frame, and ten relay the message to another frame in the same
document. As described by Barth et al. [3], frames can be navigated
across origins, which allows an attacker to set the location of any
target frame across origins, unless site make use of CSP’s frame-src
directive. In fact, in two of these ten cases, frame-src prevents an
attacker from choosing arbitrary targets for the relay.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
While the direct security implications of postMessage relays
remain dependent on further postMessage handlers, which allow
particular origins to execute sensitive functionalities, they unveil a
more general issue that arises from the usage of the origin as an
integrity check. The receiving frame cannot discern whether the
message stems from the benign sender, an attacker, or even any
other script that runs in the same origin as the intended sender
(e.g., as a third-party script).
5.4 Privacy Leaks
In a separate crawl of the same dataset performed on March 25,
2020, we proxied all elements stemming from either cookie or lo-
calStorage and observed flows from these stores which are sent
out via a postMessage as described in Section 4.4. We found eight
unique handlers with such a flow, for which one was a false positive,
and all other flows constituted privacy leaks. Four handlers leaked
specific values to the sender, and three leaked arbitrary values that
can be influenced via the received postMessage. Contrary to our
other cases, these were exclusively found on a single site and were
not part of library functionality found on multiple sites.
Naturally, this analysis comes with the inherent limitation that
we do not have any means to log in to the sites. While this is a
general limitation of a large-scale analysis, our framework could
be used in a context where automatic logins are feasible, e.g., as-
sisted by login information of the developer. This would allow us
to uncover more functionality of the sites overall, but in particular,
could unveil more handler functions which handle sensitive user
data since these might only be present after the login.
5.5 Case Studies
In the following, we discuss two case studies that depict interesting
vulnerabilities that we could find with PMForce.
Obfuscated Ad Frame. We found an XSS flaw in the obfuscated
postMessage handler of an ad company (shown in Figure 9). Our
dynamic analysis collected the corresponding values used in the
conditionals, which are shown as comments in the source code.
The postMessage format expected by the handler consists of four
strings separated by the string ˜@#bdf#@˜. The first string needs
to be Ad, and the second string is the injection point. The third
and fourth string are used for checks not directly related to the
exploitable program trace, however, they need to be present to
avoid a runtime error. The setIfr method calls document.write
with our payload enclosed in HTML which is fixed by the page.
We note that our approach was able to fully automatically find and
validate the exploit; a task that would be extremely time-consuming
for a manual analysis of this heavily obfuscated code snippet.
Bot Protection Service. We found that a widely used bot protec-
tion service was, once it suspected a browser of being operated
automatically, delivering captcha interstitials, which had a vulnera-
ble postMessage handler accepting messages from any origin and
using sent data to set cookies. This pattern can be used by an at-
tacker to set arbitrary cookies for all the sites that make use of
this protection mechanism by first triggering the bot detection via
frequent requests and then use the handler to set cookies. Inves-
tigating one of the vulnerable sites, an online real estate market
function receiver(a) {
if (a[_$_8e7c[46]]) { // a['data']
var s = _$_8e7c[1]; //
try {
event.data.split('~@#bdf#@~')[3]
var r = _$_8e7c[47]; // r = ~@#bdf#@~