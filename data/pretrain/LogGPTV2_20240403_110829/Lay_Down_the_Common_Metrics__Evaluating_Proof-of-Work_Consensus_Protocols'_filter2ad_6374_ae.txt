in NC, as every attacker block can orphan an honest block
without any risk. The results are shown in Fig. 7.
Result 12: Raising σ drastically increases Rsb for weak
attackers, but it is less effective for strong attackers.
Strong attackers can often ﬁnd more than one block in a row,
allowing them to initiate double-spending for less rewards.
Result 13: Rsb(α, σ) decreases superlinearly with α.
The subversion bounty provides some guidance for mer-
chants to choose the maximum value received in a block and
the number of conﬁrmations, based on the estimated attacker
ability and the consensus protocol.
VII. CENSORSHIP SUSCEPTIBILITY ANALYSIS
A. Modeling Censorship Susceptibility
The censorship susceptibility MDPs are different from in-
centive compatibility MDPs in their reward calculation. Here,
the attacker’s reward in a step is calculated as the compliant
miners’ loss Oc due to the attack. In NC, Oc is deﬁned as the
number of orphaned honest blocks. In Fruitchains, the attacker
receives all compliant miners’ fruit rewards if the attacker wins
a block race no shorter than To. In RS, the attacker receives
one block reward for each honest block rendered invisible and
half of a block reward for each visible honest block with a
competitor. In Subchains, the attacker receives Ratiow2b units
of rewards for each invalidated honest block.
B. Evaluation Results
The protocols’ C(α) are computed with the following
parameters. Three γ values are considered: 0, 0.5 and 1,
with the exception that our Fruitchains MDP does not support
γ = 0.5. We set bmax in Subchains as 20 and lmax = 40 in the
three other protocols to ensure a fair comparison. We truncate
Fig. 8. Censorship susceptibility C(α) of four protocols, lmax = 40. We put
γ = 0.5 and γ = 1 in the same chart to save space. Larger number indicates
worse performance.
a ﬁeld representing the attacker’s own fruits in Fruitchains
MDP to enable larger values for lmax, as these fruits do not
contribute to the censorship attack. Other parameters are the
same with our subversion gain evaluation. The results are listed
in Fig. 8.
Result 14: Subchains’s C(α) performs worse than NC,
whereas Fruitchains performs better. RS’s C(α) is worse than
NC when γ = 0, but better when γ ≥ 0.5.
Subchains performs worse than NC for all parameter sets
with α < 0.45 and γ < 1. When γ = 1, its performance is
almost identical to that of NC. The reason for Subchains’s poor
performance in C(α) is similar to that of I(α). RS performs
worse than NC when γ = 0 because in NC, the attacker cannot
orphan an honest block with just one attacker block in a block
race, whereas in RS, the attacker block can “loot” half of a
block reward from its honest competitor. Fruitchains performs
the best for all α ≤ 0.3 because in Fruitchains, the attacker
cannot invalidate any honest fruit without winning a block race
of length To, which is difﬁcult for weak attackers.
is that when α ≥ 0.4, RS’s C(α)
outperforms that of Fruitchains, due to their different gap
deﬁnitions. In Fruitchains, winning a block race with at least
To blocks invalidates all honest fruits mined in the current
block race, as their gaps are calculated from their pointer
blocks, which are either “outdated”—mined before the current
block race, or invalidated—not in the main chain. On the
other hand, RS’s gap is calculated from an uncle’s own height,
An interesting fact
185
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
00.10.20.30.40.50.60.70.80.10.150.20.250.30.350.40.45 ytilibitpecsuS pihsrosneCC(α)The attacker's mining power share αRS, γ=0Subchains (lower bounds), γ=0NC, γ=0Fruitchains (lower bounds), γ=000.20.40.60.810.10.150.20.250.30.350.40.45 ytilibitpecsuS pihsrosneCC(α)The attacker's mining power share αSubchains (lower bounds), γ=0.5NC, γ=0.5RS, γ=0.5NC, γ=1Subchains (lower bounds), γ=1RS, γ=1Fruitchains (lower bounds), γ=1therefore when the attacker wins a long block race, the last
several honest blocks may still be referred to in the blockchain
as valid uncles, splitting the attacker’s rewards.
Result 15: Fruitchains’s and RS’s gap deﬁnitions perform
better in terms of censorship resistance facing weak and strong
attackers, respectively.
VIII. SECURITY TRADE-OFFS IN ATTACK RESISTANCE
A. Security vs. Performance
Our results conﬁrm two security-performance trade-offs.
First, longer conﬁrmation delay contributes to better attack
resistance, as shown in Result 6, 8, and our subversion bounty
analysis. Second, higher bandwidth consumption, if properly
utilized, strengthens the system by reducing the attacker’s
“lucky” space of gambling, as shown in Result 7. Moreover,
our model quantiﬁes the inﬂuence of each parameter on the
protocols’ attack resistance, allowing practitioners to choose
these parameters according to their use cases.
B. “Rewarding the Bad” vs. “Punishing the Good”
None of the protocols we have studied successfully defends
against all three attacks. Their weaknesses are not protocol-
speciﬁc, but inherent to their technical approaches. Reward-
all protocols improve censorship resistance by increasing the
difﬁculty to invalidate other miners’ rewards, at the price of
removing the risk to fork the blockchain, thus encouraging
double-spending attacks. Punishment protocols improve selﬁsh
mining and double-spending resistance by discouraging mali-
cious behaviors, at the price of lowering the attacker’s difﬁ-
culty to damage the compliant miners’ income, thus facilitating
censorship. Reward-lucky protocols, contrary to their design-
ers’ intention, allow the attacker to invalidate the compliant
miners’ “lucky” blocks with the attacker’s “unlucky” units in
a risk-free manner, leaving them more vulnerable to all three
attacks. We conclude that none of the three approaches can
improve the security of PoW against three major attacks; they
only offer different trade-offs in resistance. In other words,
to date, no protocol achieves better resistance than NC in
defending all three attacks.
We further summarize these weaknesses into a dilemma
between “rewarding the bad” and “punishing the good”, which
roots in information asymmetry we identiﬁed in Sect.
IV-D.
Recall
that due to this asymmetry, when the blockchain
is forked, the protocol is unable to distinguish whether a
contentious unit, be it a block, fruit or weak block,
is a
product of compliant or malicious behavior. As a result, if
all contentious units are rewarded or punished equally, either
“the bad” are rewarded, as in reward-all protocols, or “the
good” are punished, as in punishment protocols. Selectively
rewarding some contentious units without solving information
asymmetry, as in reward-lucky protocols, usually increases
the vulnerability to malicious manipulation, allowing both
undesirable consequences to happen. This dilemma reveals
that it is difﬁcult, if not impossible, to defend against all three
attacks with just a novel reward distribution policy.
IX. DISCUSSION
A. Future Directions for PoW Protocol Designs
First, we highlight an empirical lesson summarized from our
ﬁndings: complexity is the enemy of security. As demonstrated
by our results, despite the simplicity of NC, to date there
is no protocol that surpasses NC in all our security metrics
when the attacker has no network propagation advantage.
The seemingly more sophisticated later designs, contrary to
their own claims, not only invite new attack strategies, but
also complicate the analysis. In fact, some protocols are so
complicated that their vulnerabilities could only be revealed
through our MDP modeling.
As we have identiﬁed the cruxes of existing designs’ un-
satisfactory chain quality and attack resistance as their unre-
alistic and inconsistent security assumptions and the dilemma
between “rewarding the bad” and “punishing the good”, re-
spectively, we present our suggestions on more secure PoW
designs in the following two directions, accordingly.
1) Introducing and realizing practical assumptions to raise
the chain quality: Such assumptions may include:
• Awareness of network conditions. Knowledge on whether
the network is partitioned and the slowest block propagation
time allows the participants to identify block withholding
behaviors with a higher level of conﬁdence. This informa-
tion helps distinguish between honest and attacker blocks,
and thus it contributes to raising chain quality.
In the real world, well-established techniques from dis-
tributed databases can help to detect network partitions.
The block propagation delay can be estimated from various
measurement data, such as the current orphan rate [55],
which are locally available or accessible from multiple
online sources [56],
• A loosely synchronized clock. With a loosely synchronized
clock, participants can use the gap between a block’s
receiving time and its timestamp as an indicator of malicious
behaviors. This indicator could help to further raise the
chain quality in combination with the previous assumption.
Note that the assumption of a roughly accurate clock is
necessary for all PoS protocols and is inherent to NC, as
Bitcoin adjusts the block difﬁculty and the block reward
according to the block timestamps reported by the miners.
• Responsible parties with large deposits or public real-world
identities. The absence of legislation in permissionless
blockchains is not in favor of security. This situation can be
mitigated by demanding a large deposit before performing
certain actions to increase the amount of penalty, or limiting
these actions to parties with publicly veriﬁed real-world
identities in order to put their reputation at stake.
Realizing these assumptions requires continuous work from
researchers and developers as these seem to be necessary
preconditions to improve the chain quality.
2) Outsourcing liability to raise attack resistance:
• Introducing additional punishment rules. The unfair rewards
go to the malicious miners can be balanced with additional
punishment. This approach demands that cryptographic
186
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
proofs of the malicious behaviors are embedded in the
blockchain. For example, accountable assertions can be used
to deter double-spending [57]. Designing such proofs for
censorship attacks is an interesting research direction.
• Relying on “layer 2” protocols to protect against speciﬁc
attacks. This approach reduces the consensus protocol’s
pressure on defending against certain attacks. For exam-
ple, as Bitcoin’s layer 2 solution, lightning network [58]
guarantees double-spending resistance for its transactions,
requiring the underlying consensus protocol to resist against
selﬁsh mining and censorship attacks.
B. Future Directions for PoW Protocols’ Security Analyses
Three common pitfalls in existing security analyses prevent
these vulnerabilities from being discovered in the ﬁrst place:
• Limiting the analysis to only one attack strategy. Our work
shows that such analysis is far from sufﬁcient: protocol-
speciﬁc rules often inspire new attack strategies, causing
more damage than the generic strategy analyzed by the
designer. Typical examples include SHTB’s “smallest hash
ﬁrst” rule that inspires a “withhold when the hash is small
enough” strategy and Subchains’s “weak block counts in
chain length” rule that inspires a “withhold weak blocks to
invalidate honest blocks” strategy. In particular, given the
recent advancement of artiﬁcial intelligence, we can expect
future attackers to be equipped with more sophisticated
strategies. Therefore, a solid protocol design calls for a
formal, rather than a heuristic, security analysis.
• Limiting the analysis against
just one type of attacker
incentive. The blockchain ecosystem results in complex
interactions between attackers and other players: an attacker
may focus on short-term rewards, as in double-spending
attacks, or risk short-term rewards for higher future returns,
as in selﬁsh mining, or even sacriﬁce all rewards to cause
damage on other players, as in censorship attacks. This
complexity,
together with the multifunctional nature of
blockchains, demands the security evaluation to be more
comprehensive in terms of attacker incentive. Nevertheless,
existing analyses typically focus on short-term reward seek-
ers, leaving the protocol vulnerable to attackers with the
two other incentives. The problem is more prominent for
permissionless designs, where transactions are processed by
anonymous parties, who abide by the protocol only out of
their will and interests as deﬁned by themselves. The lack
of outside-the-blockchain negative consequences, especially
legislative ones, opens the door for various attacker incen-
tives which need to be taken into account.
• Proving the system’s security within an unrealistic param-
eter range. Even if the security proofs give solid results, it
is unclear whether the system is secure in a more realistic
parameter range. For example, we reveal that Fruitchains is
susceptible to selﬁsh mining and double-spending attacks
if the conﬁrmation delay is shortened to more reasonable
values. Therefore, we argue that future security analyses
should depart from real-world parameters to provide more
objective and meaningful results.
As demonstrated in this research, analyzing protocol secu-
rity with artiﬁcial intelligence techniques has the following
three-fold advantage. First, it simpliﬁes the analysis with well-
established algorithms, which enables us to analyze protocols
more complicated than NC. Second, it allows accurate eval-
uation of the parameter choices. Third, these techniques can
compute the attacker’s optimal strategies, allowing designers
to gain direct insights and iteratively improve their designs.
Note that, although vulnerability identiﬁcation is simpliﬁed,
it is more difﬁcult to prove that a protocol resists against
an attack with these techniques. Security cannot be claimed
without proving that the strategy space used to compute the
utility covers all rational strategies.
X. RELATED WORK
Most research analyzing PoW protocol security focuses on
NC [3], [51], [52], [59]–[62]. To the best of our knowl-
edge, this paper presents the ﬁrst cross-protocol multi-metric
blockchain security evaluation.
Modeling a consensus protocol as a Markov process allows
researchers to quantify the attacker’s optimal utility with well-
studied algorithms. Speciﬁcally, Gervais et al. study the selﬁsh
mining and double-spending resistance of NC with different
parameters [31]. Zhang and Preneel evaluate the security of
Bitcoin Unlimited, a Bitcoin scaling proposal [26]. Kiffer
et al. [63] analyze Chainweb’s and GHOST’s consistency,
namely whether all compliant parties share the same ledger,
regardless of whether the ledger is biased by an attacker.
XI. CONCLUSION
Since the introduction of Bitcoin, new PoW designs emerge
on a daily basis from both industry and academia. However,
technology advancement cannot be simply measured by the
number of protocols, but only by convincing improvements in
performance or security. Unfortunately, the security of most
of these alternative protocols remains self-claimed, and many
of them seem to share similar vulnerabilities. To address this
situation, this paper systematically analyze the security of
seven most representative and inﬂuential alternative designs.
However, our results show that none of these designs out-
perform NC in terms of either the chain quality or attack
resistance in all scenarios. We identify the roots of their
unsatisfactory performance as PoW protocols’ unrealistic as-
sumptions and information asymmetry between the compliant
miners and the attacker. Moreover, we discover a considerable
number of protocol-speciﬁc attacks and quantify two security-
performance trade-offs with ﬁner granularity. These results
allow us to pinpoint some promising directions towards more
secure PoW protocol designs and more solid security analysis.
ACKNOWLEDGEMENTS
This work was supported in part by Blockstream, the Flem-
ish government imec ICON BoSS project, and the Research
Council KU Leuven: C16/15/058. We would like to thank
Yonatan Sompolinsky, Andrew Miller, Kaiyu Shao, Pieter
Wuille, Gregory Maxwell, Adam Back and the anonymous
reviewers for their valuable comments and suggestions.
187
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:01 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] mapofcoins. (2018) Map of coins: BTC map. [Online]. Available:
http://mapofcoins.com/bitcoin
[2] S. Nakamoto. (2008) Bitcoin: A peer-to-peer electronic cash system.
[Online]. Available: http://www.bitcoin.org/bitcoin.pdf
[3] J. A. Garay, A. Kiayias, and N. Leonardos, “The Bitcoin backbone
protocol: Analysis and applications,” in EUROCRYPT, 2015, pp. 281–
310.
[4] A. Sapirshtein, Y. Sompolinsky, and A. Zohar, “Optimal selﬁsh mining
strategies in Bitcoin,” in Financial Cryptography and Data Security,
2016, pp. 515–532.
[5] K. Nayak, S. Kumar, A. Miller, and E. Shi, “Stubborn mining: Gener-
alizing selﬁsh mining and combining with an eclipse attack,” in IEEE
European Symposium on Security and Privacy (EuroS&P).
IEEE, 2016,
pp. 305–320.
[6] I. Eyal and E. G. Sirer, “Majority is not enough: Bitcoin mining is
Springer,
vulnerable,” in Financial Cryptography and Data Security.
2014, pp. 436–454.
[7] L. Bahack, “Theoretical Bitcoin attacks with less than half of the