### SELinux Compliance Analysis

#### Summary of SELinux Violations
- **Max Min Values and Standard Deviation (σ)**
  - SDK Version: 21, 22, 23, 24, 25, 26, 27, 28, 5.0, 5.1, 6.0, 7.0, 7.1, 8.0, 8.1, 9.0
  - Max: 5, 1, 1, 1, 1, 1, 1, 1, 5, 7, 5, 2, 1, 4, 1, 1
  - Min: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  - Avg: 5.0, 3.1, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 8.0, 4.0, 3.6, 7.2, 56.3, 7.2, 7.2, 4.0
  - σ: 0, 2.2, 1.3, 0.3, 0, 1.3, 0, 0, 10.4, 15.7, 3.9, 88.1, 7.7, 2, 7.5, 8.8

- **CDD Violations**
  - SDK 21: 1/58 (1.7%)
  - SDK 22: 20/251 (7.9%)
  - SDK 23: 58/359 (16.1%)
  - SDK 24: 8/226 (3.5%)
  - SDK 25: 3/163 (1.8%)
  - SDK 26: 121/141 (85.8%)
  - SDK 27: 110/139 (79.1%)
  - SDK 28: 122/196 (62.2%)
  - Total: 443/1533 (28.9%)

- **Neverallow Rules Violations**
  - SDK 21: 8
  - SDK 22: 4.6
  - SDK 23: 3.6
  - SDK 24: 7.2
  - SDK 25: 56.3
  - SDK 26: 7.2
  - SDK 27: 7.2
  - SDK 28: 4.0
  - ROMs: 39, 121, 10, 158, 27, 25, 37

#### Analysis of SELinux Policy Compliance
For 351 ROMs, we identified that they correctly support SELinux at the kernel level, but no policy was found. We hypothesize that these might be incremental updates, not containing the policy. Our focus is on the remaining 1,817 ROMs that define a SELinux policy. Out of these, 7% (108 ROMs) violate the CDD specification for their corresponding Android version by defining one or more permissive domains. This violation is spread across 16 different vendors.

We analyzed the distribution of these violations with respect to their SDK level to determine if this problem only affects older versions of Android. Surprisingly, even though Google forbids permissive domains starting from Android 5.0 (SDK 20), several ROMs are still non-compliant after four major releases and a complete redesign of SELinux in Android 8 [25]. Table III summarizes the results of this analysis, showing the persistence of the problem even after the introduction of Project Treble.

#### Detection of Neverallow Rule Violations
To identify whether a vendor tampered with any of the predefined neverallow rules, which is a strict violation of the CDD starting from Android 5.0, we performed the following steps:
1. For each ROM, we retrieved the tag used by the vendor as a base system.
2. We saved both the textual and compiled versions of the policy.
3. We identified all differences between the compiled policies and collected the customizations introduced by the vendor.
4. For each additional vendor-only rule, we recompiled the original AOSP policy with the new rule and checked for compilation errors.
5. If a compilation error occurred due to a neverallow rule violation, we marked the vendor policy as non-compliant.

Out of 1,533 ROMs with a SELinux policy (targeting Android ≥ 5), 29% (443) violated the CDD by defining one or more rules violating the default neverallow rules. These images, from 21 unique vendors, allowed operations that were not supposed to be available. Table IV summarizes the results of this second analysis, showing that the introduction of Project Treble failed to mitigate the vendors' problems related to SELinux customizations. The problem has increased dramatically, reaching peaks of 85% of the ROMs having at least one violation for SDK levels 26, 27, and 28.

Although the Vendor Test Suites contain tests to check for SELinux violations, the results show that these tests are easily bypassed by vendors, who frequently violate them, making them non-compliant with the CDD and potentially introducing security issues. We believe most vendors use this practice to quickly fix compatibility issues introduced by their customizations, as modifying or commenting out a neverallow rule is easier than re-architecting a customization to fit the requirements.

### Binary Compliance

The last category of system hardening defined by Google is related to user-space binaries. The requirements for binaries were introduced in Android 9 and cover two aspects: Control Flow Integrity (CFI) and Integer Overflow Sanitization (IntSan). CFI prevents changes to the control flow of a compiled binary, making it harder to exploit, while IntSan provides compile-time instrumentation to detect signed and unsigned arithmetic integer overflow, safely aborting the process when an overflow is detected. Both protections have been gradually introduced by Google to harden the Android Media Stack component, which has been subject to numerous attacks, including Stagefright [29].

To take advantage of these protections, developers must use a compiler that supports them. Officially, Google uses and supports Clang, but both features are also available on the GCC compiler. The CDD strongly recommends that vendors do not remove CFI or IntSan compiler mitigations from components that have them enabled.

To identify if vendors adhere to this recommendation, we proceeded as follows:
1. For each ROM, we identified its AOSP base image.
2. We extracted all binaries shared between the vendor ROM and the corresponding AOSP base image.
3. For each binary, we tested its security features. If the original binary (present in the AOSP base image) had CFI or IntSan enabled and the corresponding binary in the third-party ROM did not, we marked the ROM as not respecting the CDD recommendation.

Since both defense mechanisms were introduced in the CDD from Android 9, we considered the 196 ROMs with SDK ≥ 28. Among them, 85 (43.37%) contained at least one binary that disabled CFI, and 104 (53.06%) contained at least one that disabled IntSan. In these cases, six unique vendors lowered the security of a binary, violating the CDD recommendation. However, these vendors did not entirely disable CFI or IntSan for all binaries: on average, among the ROMs that violated the recommendations, the vendors disabled CFI for 38.7% (σ = 36.5) of the binaries and IntSan for 35.8% (σ = 34.9) of them.

### Additional Customizations

This section discusses our analysis of OEM customizations that, while not strictly violating the requirements, negatively impact the security posture of the overall ROM.

#### New Functions in System Libraries
The majority of Android's core system components are written in unsafe memory languages like C and C++ and shipped as ELF libraries. Vendors can add functionalities to such libraries, increasing the attack surface. A recent example is a bug found in Samsung’s customizations of Google’s Skia library [2], which added support for new proprietary formats and was vulnerable to memory corruption bugs, allowing remote code execution.

To assess the prevalence of vendor customizations that add functionalities, we inspected all binaries that are also found in the original AOSP (referred to as Shared Libraries) and extracted the list of exported functions not present in the original version. We considered a ROM to have added functionality to a given binary if it contains symbols not appearing in any AOSP release.

Figure 2 summarizes our findings, showing an almost constant trend of roughly 80 new functions added to 20% of the system libraries, indicating that Project Treble's efforts have not been fully effective. Vendors are still using old AOSP functions, which can be dangerous as they do not receive security patches.

#### Compile-time Hardening
In addition to the CDD, Google maintains a Security Enhancements (SE) webpage [30] discussing security and privacy enhancements for each Android version. While the CDD only started discussing binary hardening in Android 9 (2018), the SE has covered this topic since Android 3 (2009). We analyzed customizations related to these aspects, focusing on:
- Stack Canaries
- No eXecute (NX)
- Position Independent Executables (PIE)
- Full Relocation Read-Only (Full RELRO)
- Fortify Source
- Use of setuid/setgid binaries

We compiled a list of artifacts whose presence or absence can be used to infer whether an ELF binary implements each mitigation technique. This information allowed us to compare the security-related compiler options used by vendors for their binaries with respect to AOSP.

Figure 3 shows the mean percentages of binaries using certain security features. We found that around 40% of vendors' binaries lack basic features like Stack Canaries, possibly due to performance penalties. NX adoption and Full RELRO have always been common in AOSP binaries, but there is a substantial gap with vendors' binaries. We also found an inconsistency regarding NX adoption: the CDD never mentions NX, while the CTS contains a test to verify its enablement at runtime.

Finally, we measured the prevalence of setuid/setgid files. Since Android 4.3 (SDK 18), the AOSP removed all setuid executables. Among the vendor binaries, 319/447 (71%) of the ROMs with SDK < 18 and 371/2453 (15%) of the ROMs with SDK ≥ 18 contain at least one setuid executable. Common setuid executables include `su`, `procmem`, `netcfg`, `procrank`, and `tcpdump`, which should be removed from the final released ROM as they can severely affect the device's security posture.

#### Android Init Script Customizations
Android relies on a custom init script system to start binaries at boot time. This component has been subject to numerous security problems, often due to vendor changes. To study this aspect, we extracted from each ROM the number of new services it defines with respect to its corresponding AOSP base image, focusing on those that start at system boot and run with root user privileges.

Figure 4 summarizes our findings, displaying the distribution of the number of new services for each SDK level.