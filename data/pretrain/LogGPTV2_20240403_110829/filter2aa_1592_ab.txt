# .NET Assembly Structure and Malware Analysis

## Overview
- **Presenter:** Alexandre Borges – Malware and Security Researcher
- **Event:** DEF CON USA 2019

## .NET Assembly Structure
A .NET assembly can be either an executable (.exe) or a dynamic link library (.dll). The structure of a .NET assembly includes the following components:

### PE (Portable Executable) Header
- **DOS Header**
- **PE Header**
- **Data Directories** (including size and location of CLR header)
- **Section Headers**
  - `.text` (includes MSIL and metadata)
  - `.idata`
  - `.data`
  - Remaining sections

### CLR (Common Language Runtime) Header
- **CLR Header**: Represented by the `IMAGE_COR20_HEADER` structure defined in `CorHdr.h`.
- **CLR Data**: Contains:
  - Metadata information (size and RVA)
  - Token of the entry point (EntryPointTokenField)
  - V-table fixup table (used when a managed method is called from unmanaged code)
  - Resource information (size and RVA)
  - Flags indicating:
    - 32-bit only
    - Strong assembly
    - Native code entry point
  - Managed resources are contained in the `.text` section, not the `.rsrc` section.

## Metadata
Metadata in a .NET assembly is organized as tables that describe all declared or referenced data. These tables include:

### Definition Tables
- `ModuleDef`, `TypeDef`, `MethodDef`, `FieldDef`, `ParamDef`, `PropertyDef`, `EventDef`

### Reference Tables
- `AssemblyRef`, `ModuleRef`, `TypeRef`, `MemberRef`

### Manifest Tables
- `AssemblyDef`, `FileDef`, `ManifestResourceDef`, `ExportedTypesDef`

### Characteristics of Malicious .NET Samples
- **Code Manipulation**: Commonly seen in constructors, class constructors, and finalizers.
- **P/Invoke**: Calling unmanaged functions from DLLs.
- **COM Components**: Frequently used.
- **Managed Code Size**: Even trivial .NET malware can have small managed code segments.

## Tools for Analysis
- **ILDasm.exe**: 
  - **View -> MetaInfo -> Show!**
  - **View -> Statistics**

## Metadata Heaps
- **GUID Heap**: Contains 16-byte objects.
- **String Heap**: Contains strings.
- **Blob Heap**: Contains arbitrary binary objects aligned on a 4-byte boundary.

### Named Streams
- `#GUID`: Global unique identifiers.
- `#Strings`: Names of classes, methods, etc.
- `#US`: User-defined strings.
- `#~`: Compressed metadata stream.
- `#-`: Uncompressed metadata stream.
- `Blob`: Binary object metadata.

### Tokens and RIDs
- **RID (Record Identifiers)**: Used as row indexes in metadata tables.
- **Tokens**: Determine which metadata tables are being referred to. Tokens are 4 bytes, with the first byte identifying the metadata table and the remaining three bytes being the RID.
- **Auxiliary Tables**: Hardcoded and not covered by tokens.

## JIT Compiler and Memory Management
- **JIT Compiler**: Stores native instructions in memory, which are discarded after the application terminates.
- **Memory Dump**: Can be performed to examine the code.
- **Checking .NET Version**:
  - Subdirectories under `C:\Windows\Microsoft.NET`
  - `clrver.exe`
  - `clrver.exe -all`

### IL (Intermediate Language)
- **Stack-Based**: No register manipulation instructions.
- **Reverse Engineering**: Easy to check and reverse using tools like `ILDasm.exe`.
- **Ngen.exe**: Compiles IL instructions to native code.
- **CLR Checks**: Ensures compatibility with the runtime environment.

### .NET Malware Characteristics
- **Encrypted Resources**: Often encrypted binaries and DLLs.
- **Multi-File Assemblies**: Types partitioned over different files.
- **Mixed Languages**: Some malware uses both C# and VB in the same assembly.

## Assemblies
- **Private Assemblies**: Specific to an application and deployed in the same directory.
- **Shared Assemblies**: Shared and used by multiple applications.
- **Memory Management**: Managed by the CLR, which controls access between application domains.
- **Marshalling**: Permits cross-access requests between application domains.

### Compilation of Multi-File .NET Malware
- **Example Commands**:
  ```sh
  csc.exe /t:module hooking.cs
  csc.exe /t:module injection.cs
  csc.exe /out:malwarelib.dll /t:library /addmodule:hooking.netmodule /addmodule:injection.netmodule Defcon.cs
  ```
- **Manifest File**: Wraps up all modules, resources, and other details.

### GAC (Global Assembly Cache)
- **Installation**: Only strong assemblies (signed) can be installed in the GAC.
- **GACUtil.exe**: Used to install assemblies into the GAC.
- **MSI**: Can be used to install malware into the GAC on home-user systems.
- **Delay Signing**: Partial signing using only the public key, allowing installation without the private key.

### Example Commands for Delay Signing
```sh
csc.exe /out:malware.dll /t:exe Program.cs
```

---

**Alexandre Borges – Malware and Security Researcher**
**DEF CON USA 2019**