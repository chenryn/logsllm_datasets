RabbitMQ还不够。让我们对RabbitMQ服务器的配置做些改动吧。
9.4自动化vhost和用户配置
在使用ManagementAPI之前，部署RabbitMQ中最麻烦的就是，自动化创
建虚拟主机和用户以满足应用的需要了。像Chef或Puppet这样的自动化部署工
具运行的服务器，通常和应用程序需要通信的RabbitMQ服务器不相同。当只能
用rabbitmqctl来创建用户和虚拟主机的时候，问题就来了。因为这意味着你
必须在所有应用服务器上安装Erlang和rabbitmqctl。如果可以在运行应用的那
3resP_payload字典中还有许多其他数据统计，这里展示的只是其中一部分而已。其中还包含了持
久化消息数量、等待确认消息数量、队列中消息的平均进出速率等。在清单中的syS.exit（O)之前
添加printrepr(resp_payload)用以查看所有的字段。
---
## Page 204
182
第9章使用RESTAPI控制Rabbit
台服务器上就能创建用户和vhost，而不需要将Erlang安装到每一个服务器上（并
且需要将所有的Erlangcookie进行同步）的话，岂不妙哉？幸好我们活在Rabbit
ManagementAPI的时代！你可以使用ManagementAPI编写一个命令行脚本，它能
够创建、删除、展示以及列出用户列表（另外做些简单的扩展就能配置vhost了）。
而且不需要安装Erlang或者Erlangcookie！
由于我们已经介绍了如何连接、认证和发送基本API请求，下面将要专注于为
何创建和删除用户（或者vhost）的请求互不相同。让我们从user_manager·py脚
本的完整内容开始，如下列清单所示。
清单9.5user_manager.py—RabbitMQ用户管理
import sys, json, httplib, base64
1分配
if len(sys.argv) 5:
res_params = sys.argv[5:]
else:
res_params = []
base_path ="/api/users"
②构造API
路径
if action == "list":
path = base_path
method = "GET"
if action =="create":
path = base_path + "/" + res_params [0]
method ="PUT"
if action == "delete":
path =base_path +"/"+ res_params[0]
method ="DELETE"
if action == "show":
path=base_path
method="GET"
json_args = ""
conn = httplib.HTTPConnection(server，port)
credentials=base64.b64encode("%s:&s"%(username,password))
conn.request(method,path,json_args,
{"Content-Type":"application/json",
"Authorization":"Basic"+credentials})
response = conn.getresponse()
if response.status > 299:
print "Error executing API call (%d):%s" %(response.status,
response.read())
sys.exit(2)
resp_payload = response.read()
4
if action in ["list"，"show"]:
解析并展示
resp_payload = json.loads(resp_payload)
响应内容
if action =="list":
处理list
print"Count:%d"len(resp_payload)
for user in resp_payload:
结果6
print"User:%(name)s"%user
print "\tPassword: %(password_hash)s" % user
处理show
结果
if action == "show":
print "User:%(name)s"% resp_payload
print"\tPassword:%(password_hash)s"%resp_payload
else:
create和delete
print "Completed request!"
动作的请求返
8回结果为空
sys.exit(0)
和队列数据统计脚本相比，你验证了1命令行参数并将其赋值给各内存变量。
到目前为止唯一不同的地方在于参数变多了。之前用于表示vhost和队列名称的那
个参数，现在用来表示采取的动作（create，delete，list，show）以及动作相关的参
数了。举个例子：
$ python user_manager.py 1ocalhost:55672 guest guest \
create myuser password true
这会连接到localhostAPI服务器，使用 guest作为用户名和密码，并创建
名为myuser的用户，密码为password，并且是一位管理员（true）。如果你将
true更改为false的话，那么该用户将不会成为管理员。
下一步开始构造请求路径?。所有API请求的基本路径是／api/users。你将
用户名（在res_params数组中的下标O处）添加到基本路径之后：
base_path = "/api/users"
---
## Page 206
184
第9章使用RESTAPI控制Rabbit
if action == "list":
path = base_path
method="GET"
if action == "create":
path = base_path + "/" + res_params[0]
method ="pUT"
if action == "delete":
path =base_path +"/"+res_params[0]
method ="DELETE"
if action == "show":
path = base_path +"/"+ res_params[o]
method = "GET"
在这里，你可以清楚地看到API是如何解释相同请求路径上不同的HTTP动作
的。如果将方法设置为PUT，那么API服务器会根据/api/users/
来创建用户。沿用同样的请求路径，但是将方法设置为DELETE的话，会导致用户
被删除。同样地，API服务器会将GET解读为将用户详细信息以JSON哈希表的格
式返回。唯一古怪的是列出所有用户。你在/api/users上发送GET请求而不是在
/api/users/上（这里会明确指明用户名）发送请求。由于请求路径
务器返回哈希表列表，每个哈希表代表了一位用户的详细信息）。
在构造完路径之后，你需要决定该请求是否应该创建用户3。如果是的话，则
需要构建一个JSON编码的哈希表来包含新用户的密码和管理员状态。
json_args = ""
if action == "create":
json_args = {"password" : res_params [l],
"administrator" : json.loads (res_params [2]) }
json_args = json.dumps(json_args)
用于创建用户的哈希表需要两个字段：password和administrator。
password包含了一个纯文本密码；而administrator是一个布尔类型，需要设
置为true或者false。请求构造完毕后，你就可以像在队列数据统计脚本中做的
那样进行连接并发送4请求了。唯一不同之处在于，当动作为创建用户的时候，需
要为请求指定正文。
一旦请求发送出去之后，并且没有发生任何错误的话，你读取5响应并继续运
行程序。如果该动作是创建或者删除用户的话8，那就没有返回内容了，所以只需
---
## Page 207
9.4自动化vhost和用户配置
185
打印一个确认消息，说明请求已经成功了。如果请求动作是list或者show的话，那
么你就要用JSON对响应进行解码。在解码之后，你就有了本地Python数据结构。
如果用户请求的是用户列表的话，那么将返回哈希表数组。因此你需要对用户列表
进行迭代·，并打印每位用户的name、password_hash和administrator状
态4。
if action == "list":
print "Count: %d" % len(resp_payload)
for user in resp_payload:
print"User:(name)s"user
print "\tPassword: %(password_hash)s" % user
print "\tAdministrator: %(administrator)s\n" % user
如果是展示特定用户的话，那么响应结果不会是哈希表数组，而是单一的哈希
表。除了7包含了用户的name、passwordhash和administrator外，和你在
队列数据统计脚本中看到的相似。
if action == "show":
print "\tPassword: %(password_hash) s" % resp_payload
print "\tAdministrator: &(administrator) s\n" % resp_payload
现在你拥有了功能丰富的实用程序，可以在任何安装了Management插件的
RabbitMQ服务器上创建、删除、展示以及列出用户列表。让我们看看，如何使用
该程序先创建用户，再展示用户：
$ python user_manager.py localhost:55672 guest guest \
create newusernewpasstrue
Completed request!
shownewuser
User:newuser
PasSWOrd: o/ZEH9Z86FNUtzu2MzN1mDSTDFE=
Administrator: True
在产品环境中，你可能想要为脚本添加严格的参数验证。但事实上你可以原样
使用它来管理用户的创建。事实上，我们在部署应用时，就使用了相似的脚本来自
4你可能注意到我们使用的是Python的字符串格式化功能。举例来说，"User：（name）s"user
告诉Python创建一个新的字符串，并用值user["name"]替换字符串中g（name）s的位置。你可以
使用语法"User：”+user["name"]来获得相同的结果。
---
## Page 208
186
第9章使用RESTAPI控制Rabbit
动化创建RabbitMQ用户。通过构造这段脚本，你不仅学习了如何使用Management
API来展示条目，还学习了如何展示条目列表，以及如何创建和删除这些条目。你
可以将这些概念应用到处理其他条目/资源类型（用户、队列、交换器、连接、权限等)。
本章附带了一份脚本，名为user_vhost_manager.py。它扩展了用户管理脚本,
添加了对创建vhost的管理，以及对用户或者vhost权限的操作。
9.5总结
在我们开始本章之前，手工管理Rabbit服务器的方式无非是rabbitmqctl和
ManagementWebUI。你无法编写自动化脚本或者实用程序来和Rabbit集成，用
于管理服务器配置或者监控内部状态。但是通过学习Rabbit ManagementAPI的
工作机制，你现在可以构建工具，用来监控队列状态并根据需求管理用户了。你
不再受手工管理RabbitMQ服务器的摆布，因为现在你能编写实用程序，通过使
用ManagementAPI来自动化Rabbit配置，定制适合组织的过程。你可以尽情使
用ManagementAPI，构建Rabbit管理工具的唯一限制就是你的想象力。Rabbit
ManagementAPI还可以支持自动化监控RabbitMQ的健康状态。在理解了如何使用
API构建工具之后，你能更深人地利用这些技能来加强对Rabbit基础设施的监控，
并确保它们处于最佳状态。
---
## Page 209
监控
本章要点
■编写Nagios健康检测的基础
使用AMQP和RESTAPI来监控Rabbit内部状态
确认Rabbit可用并且能够进行响应
■观察队列状态以尽早检测消费者问题
二检测消息通信结构中不合需求的配置更改
你的RabbitMQ服务器运行正常，同时你那风靡全球的遛狗应用正带来数以干
计的订单。这一切看起来棒极了，直到你突然接到了电话：客户在使用Web应用时
遇到了错误，并且订单处理流程完全停止了。RabbitMQ服务器岩机了，而且更糟
糕的是看起来服务器已经岩机了好几个小时了。你真心希望能在RabbitMQ一岩机
就能主动收到通知，而不是事发之后由客户来告诉你，因为那时候你已经损失好几
千美元了。将Rabbit设置成高可用性，然后使用它来编写应用，这还不够。之前的
悲剧仍然会重复发生。如果你希望运维能够足够可靠的话，那么就需要监控Rabbit，
以确保它正常运行，并且你发送给它的消息都能如期消费。采取适当的监控措施，
你不仅能在事情变糟时及时发现（譬如Rabbit服务器命悬一线时），而且还能及时
发现消息通信基础设施是否正饱受煎熬一这就能避免让你的客户失望，同时守住
---
## Page 210
188
第10章监控
了你的底线。举个例子，如果遛狗订单队列突然之间有1000万条消息在等待消费，
而平时正常情况下只有1000条消息，这时候你能够及时收到通知的话，那不是很
棒吗？或者订单队列的durable设定突然之间变成了transient，在遇到断电并导致
所有订单都消失之前，你能及时知道的话，那也很不错吧？在本章中，你将学习如
何编写程序来监控Rabbit以及消息通信基础设施的方方面面。然后你就能将这些监
控程序植人监控和告警框架之中，因而当消息通信偏离轨道时你能及时收到告警通
知。让我们从如何使用AMQP和RESTAPI来监控RabbitMQ的内部状态开始吧。
10.1监控RabbitMQ：密切关注你的warren
监控RabbitMQ并不只是确保端口5672是开启的并能接收TCP连接而已。对
于像Rabbit这样复杂的系统，如果你能够模拟AMQP客户端来确保连接之后获取
信道的话，才算那么回事儿。如果你能使用RESTAPI来找出是否所有构成Rabbit
的Erlang部件都正常运行，并且它们之间能正确通信的话，这就非常不错了。为了
实现上述功能，你必须理解如何编写一个监控系统可以理解的健康检测程序。在这
里，系统指的是Nagios。让我们看看Nagios 是什么，以及一个健康检测该实现哪些
功能。
10.1.1为Nagios编写健康检测
当今有许多不同的商业和开源监控框架可供选择。最流行的其中之一是Nagios。