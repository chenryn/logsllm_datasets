the same server, we consider them to belong to the same
campaign.
Table 6 shows top-3 campaigns with most crowdturﬁng
apps. The largest one includes nine apps with hidden app
ranking manipulation UIs, and all of them connect to the
server uxiaowei.com. Interestingly, we observe that seven
crowdturﬁng app owners (e.g., id109****906, id110****416,
id110****262, id114****820) are related to this campaign.
This campaign enjoyed a long lifetime, from May 2016 to
March 2018.
4.5 Case Study
Here we introduce a typical app with hidden crowdturﬁng
UI sohouermusic, which disguises as a music player, but also
receives app ranking manipulation tasks (download, install,
make up fake reviews, etc.). We observed that triggering the
illicit service is surprisingly difﬁcult, and such triggering pro-
cess is designed to evade app vetting. Speciﬁcally, the so-
houermusic app is promoted on popular social networks (e.g.,
WeChat), which redirect users to a website (play.sohouer.com).
Only when a user visits the website on his iPhone and requires
an invitation scheme sohouermusic://invite=[serial number]
to be sent, will the app load its hidden UI. However, before
the UI is actually rendered, the sohouer app checks whether
it has passed the vetting process via its server, and the hidden
crowdturﬁng UI shows up only when the remote server re-
Figure 9: Distribution of the categories of crowdturﬁng tasks
per app.
Table 4: Top-6 most common illicit crowdturﬁng tasks in apps
with hidden crowdturﬁng UIs.
Crowdturﬁng tasks # apps # download (K)
App ranking
manipulation
Fraud account
registration
Fake review
Bonus scalping
Online blog
reposting
Order scalping
82
28
13
11
9
9
32,268
15,618
1,218
13,990
14,602
601
Highest
ranking
5
64
79
18
19
122
ulation app com.zhang.samusic has a daily task volume of
42,064 for manipulating 24 apps. Given an average task price
of $0.14, the revenue for all those tasks is around $5.88K.
Furthermore, we analyze network trafﬁc of such apps to
study their servers, which distribute the tasks to the apps (see
Figure 2). Interestingly, due to the difﬁculty in publishing
crowdturﬁng apps, we ﬁnd that multiple servers even share
one client. In particular, besides their own servers, six apps are
found to receive crowdturﬁng tasks from seven other servers
(e.g., qumi.com and domob.cn) and all these tasks are related
to app ranking manipulation.
Campaign discovery. In contrast to the web-based crowd-
turﬁng platforms [49], which are dominated by a few popular
websites, we observed that the iOS-based crowdturﬁng plat-
forms are more diverse. To study the relations among these
crowdturﬁng apps, we built a graph for campaign discovery
and further manually analyzed large campaigns identiﬁed. In
the graph, each app is regarded as a node, and an edge con-
necting two apps represents that they are all from the same
developer, with similar code or similar network behaviors. In
particular, we crawled apps’ developer information from the
776    28th USENIX Security Symposium
USENIX Association
sponds with “isreview: 0” and a scripturl. Besides acting as a
client of a crowdturﬁng platform, such an app also stealthily
collects user’s data ; e.g., device type, version, jailbreak status,
location. Another interesting observation is that the sohouer-
music developers are persistent: after the sohouermusic app
was removed (after we reported to Apple), the hidden crowd-
turﬁng UI was quickly repackaged into a sohouercamera app
and was submitted through a different developer account.
5 Discussion
Evasion. The current implementation of Cruiser is based on
identifying two types of conditionally triggered UIs for further
semantic analysis (see Section 3.2). Hence, to evade Cruiser,
the adversary may use the hidden crowdturﬁng UI, which is
triggered by users and also avoids the root UI. Such evasion
techniques, however, will cause the possible crowdturﬁng
UIs to be triggered during app vetting. This is because all
clickable elements may be triggered by Apple employee’s
manual or automatic analysis during app vetting [47]. This
defeats the purpose of hidden UI.
The adversary may play other evasion tricks, by hiding
semantic texts on the hidden crowdturﬁng UI to downgrade
the accuracy of the Semantic Analyzer. In particular, the ad-
versary can show crowdturﬁng related texts in the images, or
obfuscate class names and method names, even dynamically
fetch the crowdturﬁng related content. One possible solution
is to run an Optical Character Recognition (OCR) tool [36]
to extract the texts from images in the resource ﬁles, which
enables to identify enough UI semantic even when the code
is obfuscated. Considering the dynamically fetched hidden
crowdturﬁng content, the adversary may deliver it on runtime
using dynamic code loading (e.g., JSPatch [12]). However,
Apple regulates and carefully monitors those dynamic code
enabling techniques (e.g., hot patching frameworks) to mini-
mize the attack vector; recently, Apple even bans or rejects
any apps that use hot patch [39] from their App Store.
Limitations. Although Cruiser can already achieve a preci-
sion around 90%, still human involvement is needed to ensure
that the apps reported are indeed problematic. Therefore, in
the current form, it can only serve as a triage tool, instead
of a full-ﬂedged detection system. Also, as mentioned ear-
lier, our current design is focused on iOS based apps, since
cybercriminals have more intentions to utilize hidden UI to
inﬁltrate the iOS app store than that of Android: centralized
app vetting and installation make it hard for the crowdturﬁng
app to reach out to the iPhone users. In the meantime, based
on our observations, such hidden crowdturﬁng apps exist,
though less pervasive, in the Android world. In particular, we
conducted a small-scale study to ﬁnd whether our detected
apps have Android versions by searching for app names on
Google Play, third-party stores and app download portals, and
further manually examining them. We did not ﬁnd any hidden
crowdturﬁng apps, but did observe blatant crowdturﬁng apps
(without hidden UIs) in less regulated third-party Android
app stores.
Moreover, besides crowdturﬁng, we do think that cyber-
criminals can use hidden UI techniques for other abusive
services, such as delivering unauthorized content, or even
malware. When looking into such apps (those found in our
research to carry hidden UIs but not perform crowdturﬁng),
we found instances such as covering a phishing UI behind
a travel app. A natural follow-up step is to investigate all
abusive services exploring hidden UI to inﬁltrate the iOS app
store and characterize the underground markets behind them.
We will leave this as our future work.
Ethical issue. Our research only involved analysis of pre-
existing code and app content and did not collect new data
during the study. Therefore, it is just a secondary analysis of
already published materials, which does not constitute human-
subject research. Another ethical concern comes from the
potential that Cruiser could be used to identify possible be-
nign hidden UIs; e.g., for censorship circumvention. Here
we clarify that Cruiser is just a methodology for discovery
and understanding of a new type of cybercrime, and during
our study, we did not observe any such censorship evasion
attempts. We acknowledge that any evasion detection tech-
niques, including ours, could also be used for censorship. In
the meantime, our methodology has been tailored towards
crowdturﬁng detection: e.g., the features used by the structure
miner are based upon the structures of real-world crowdturf-
ing apps, the Word2vec model and other NLP components are
all built on crowdturﬁng data. We are not sure how effective
our approach would be when applying it to detect other types
of hidden content, and how much additional effort is needed
to make it a full-ﬂedged censorship tool.
Responsible disclosure. Since the discovery of apps with
hidden crowdturﬁng UI, we have been in active communica-
tion with Apple. So far, we have reported all the apps detected
in our research to Apple, who has removed all of them from
the App Store; also upon Apple’s request, we provided a list
of ﬁngerprints for eliminating the similar apps.
6 Related Work
Study on crowdturﬁng. The ecosystem of web-based crowd-
turﬁng has been studied for long. Motoyama et al. [37] identi-
ﬁed the labor market Freelance involved in service abuse (e.g.,
fraud account creation) and characterized how pricing and
demand evolved in supporting this activity. Wang et al. [49]
studied two Chinese online crowdturﬁng platforms and also
revealed the impact of the crowdturﬁng followers task on
those platforms to microblogging sites. Stringhini el al. [45]
investigated ﬁve Twitter follower markets to study the size
of these markets and the price distribution of their service.
Su et al. [46] studied the spamming activity of “Add To Fa-
USENIX Association
28th USENIX Security Symposium    777
vorites” by collecting the several “Add To Favorites” tasks
information from one crowdturﬁng platform. In our research,
to the best of our knowledge we for the ﬁrst time investigate
the crowdturﬁng platforms on the mobile devices, and reveal
several unique characteristics; e.g., fragmented crowdturﬁng
markets, mobile targeted crowdturﬁng tasks, stealthy worker
recruitment channel, hidden crowdturﬁng UI techniques.
Illicit iOS app detection. Compared with Android, the Ap-
ple platforms are much less studied in terms of their security
protection. Egele et al [23] proposed PiOS, which uses con-
trol ﬂow analysis to detect privacy leaks in iOS apps. Deng et
al [18] presented an approach to detect private API abuse by
binary instrumentation and static analysis. Chen et al. [14] de-
termines potentially harmful iOS libraries by looking for their
counterparts on Android. Bai et al. [11] and Xing et al. [53]
uncovered several zero conﬁguration and cross-app resource
sharing vulnerabilities, and proposed the corresponding de-
tection methods. Understanding the security implications of
hidden crowdturﬁng UI in iOS apps has never been done
before. Also, none of the prior research provides a UI based
detection mechanism to identify illicit iOS apps with hidden
UI.
Text analysis for mobile security. Numerous studies have
looked into apps’ UI texts to detect mobile threats such as task
jacking, mobile phishing attack, ransomware, or to protect
user privacy. AsDroid [33] checks the coherence between the
semantics of the UI text (e.g., text of button) and program be-
havior associated with the UI (e.g., button) to detect malicious
behavior (e.g., sensitive API) in Android apps such as sending
short messages and making phone calls. Heldroid [10] uses a
supervised classiﬁer to detect threatening sentences from An-
droid apps to detect ransomware. SUPOR [32], UIPicker [38]
and UiRef [9] identify sensitive user inputs within user in-
terfaces to protect user privacy. In particular, SUPOR [32]
extracts layouts by modifying the static rendering engine of
the Android Developer Tool (ADT). UIPicker [38] operates di-
rectly on the XML speciﬁcation of layouts. UiRef [9] resolves
the semantics of user-input widgets by analyzing the GUIs
of Android applications. It improves the accuracy of SUPOR
by addressing ambiguity of descriptive text through word
embedding. In addition to UI texts, researchers intensively
leverage Natural Language Processing (NLP) to process app
descriptions for mobile security research. Examples include
WHYPER [40] and AutoCog [41], which check whether an
Android app properly indicates its permission usage in its
app description, CHABADA [29] applied topic modeling
technique on an app’s text description to help infer user’s
expectation of security and privacy relevant actions. Different
from previous works, our work compared the semantics of
conditionally triggered UI texts of iOS apps, crowdturﬁng key-
words and app descriptions to identify hidden crowdturﬁng
apps. Also, sensitive or private APIs are not used for detection
in our work as the illicit behavior of the app we detect are
based on UI not API. Also, different from SUPOR, UIPicker
and UiRef, we extract UI texts from UI hierarchies (LVCG)
we generated from iOS apps.
7 Conclusion
In this paper, we report our study on illicit iOS apps with hid-
den crowdturﬁng UIs, which introduce conditionally triggered
UIs and a large semantic gap between hidden crowdturﬁng
UI and other UIs in the app. Exploiting these features, our
crowdturﬁng UI scanner for iOS, Cruiser, utilizes iOS UI hier-
archy analysis technique and NLP techniques to automatically
generate a UI hierarchy from binary and UI layout ﬁles and
investigate conditionally triggered UI and the semantic gap
to identify such illicit apps. Our study shows that Cruiser in-
troduces a reasonable false detection rate (about 11.1%) with
over 94.1% coverage. Running on 28K iOS apps, Cruiser
automatically detects 93 apps with hidden crowdturﬁng UIs,
which brings to light the signiﬁcant impact of such illicit apps:
they indeed successfully inﬁltrate App Store, even bypassing
app vetting several times. What is worse, we observed an
increasing trend of the number of such apps in App Store.
Our research further uncovers a set of unique characteristics
of iOS crowdturﬁng, which has never been revealed before:
for example, we observe several remote crowdturﬁng servers
share one iOS crowdturﬁng app as a client, which may be
due to the difﬁculty of inﬁltration; also, such illicit apps were
promoted by crowdturﬁng gateway sites to recruit workers,
etc. Moving forward, we further investigate the hidden UI
techniques providing by illicit app developers, including logic
bomb, command and control infrastructure, and scheme tech-
nique etc.
8 Acknowledgements
We are grateful to our shepherd Gianluca Stringhini and the
anonymous reviewers for their insightful comments. This
work is supported in part by NSF CNS-1801365, 1527141,
1618493, 1801432, 1838083 and ARO W911NF1610127.
References
[1] Amazon mechanical turk: Access a global, on-demand, 24x7 workforce. https:
//www.mturk.com.
[2] Google translate. https://translate.google.com.
[3] Number
of
apps