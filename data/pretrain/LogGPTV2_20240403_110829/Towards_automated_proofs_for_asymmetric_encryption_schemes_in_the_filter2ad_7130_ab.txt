of a value u from the appropriate domain. Given a state
S, S((cid:2)H ).dom, respectively S((cid:2)H ).res, denotes the list ob-
tained by projecting each pair in S((cid:2)H ) to its ﬁrst, respec-
tively second, element.
−1))
and yields a distribution on conﬁgurations. A conﬁgura-
tion is composed of a state S, a vector of hash functions
−1) of a trapdoor permutation
(H1, . . . , Hn) and a pair (f, f
and its inverse. Let Γ denote the set of conﬁgurations and
Dist(Γ) the set of distributions on conﬁgurations. The se-
mantics is given in Table 2, where δ(x) denotes the Dirac
measure, i.e. Pr(x) = 1. Notice that the semantic function
of commands can be lifted in the usual way to a function
from Dist(Γ) to Dist(Γ). By abuse of notation we also
denote the lifted semantics by [[c]].
A program takes as input a conﬁguration (S, (cid:2)H, (f, f
(cid:3)
(cid:3)
−1))
, (cid:2)H, (f, f
A notational convention:
r← [[c]](S, (cid:2)H, (f, f
It is easy to prove that com-
−1). Therefore,
mands preserve the values of (cid:2)H and (f, f
−1))
we can, without ambiguity, write S
r← [[c]](S, (cid:2)H, (f, f
−1)). According
instead of (S
to our semantics, commands denote functions that transform
distributions on conﬁgurations to distributions on conﬁgu-
rations. However, only distributions that are constructible
are of interest. Their set is denoted by Dist(Γ, (cid:2)H, (cid:3)) and is
deﬁned as the set of distributions of the form:
() : (S, (cid:2)H, f, f−1)]
[(f, f−1)
−1 and (cid:2)H and which
where A is an algorithm accessing f , f
records its queries to hashing oracles into the (cid:2)H’s in S.
2.2 Asymmetric Encryption
r← (cid:0)(1η ); (cid:2)H r← Ω; S r← A (cid:3)H,f,f−1
We study generic constructions that convert any trapdoor
permutation into a public-key encryption scheme. More
speciﬁcally, our aim is to provide an automatic veriﬁcation
method for generic encryption schemes. We also adapt IND-
CPA and IND-CCA security notions to our setting.
bs[n, k], when m > k
Definition 2.1. A generic encryption scheme is deﬁned
by a triple ((cid:3),E (ine, oute) : c,D(ind, outd) : c(cid:3)
) such that:
• (cid:3) is a trapdoor permutation generator that on input η
−1)
generates an η-bit string trapdoor permutation (f, f
• E (ine, oute) : c and D(ind, outd) : c(cid:3)
tions for encryption and decryption.
are oracle declara-
Definition 2.2. Let GE be a generic encryption scheme
deﬁned by ((cid:3),E (ine, oute) : c, D(ind, outd) : c(cid:3)
). Let A =
(A1, A2) be an adversary and X ∈ Dist(Γ, (cid:2)H, (cid:3)). For α ∈
{cpa, cca} and η ∈ , let
Advind−α
A,GE (η, X) = 2 ∗ Pr[(S, (cid:2)H, (f, f
−1))
r← A
O1
1 (f ); b
r← X;
r← {0, 1};
(x0, x1, s)
(cid:3) r← [[E (xb, oute)]](S, (cid:2)H, (f, f
−1)) :
S
(oute)) = b] − 1
O2
A
2 (f, x0, x1, s, S
(cid:3)
where if α = cpa then O1 = O2 = (cid:2)H and if α = cca then
O1 = O2 = (cid:2)H ∪ {D}.
We insist, above, that A1 outputs x0, x1 such that |x0| =
|x1| and that in the case of CCA, A2 does not ask its or-
acle D to decrypt S
(y). We say that GE is IND-α secure
if Advind−α
A,GE (η, X) is negligible for any constructible distribu-
tion ensemble X and polynomial-time adversary A.
(cid:3)
3.
IND-CPA SECURITY
In this section, we present an eﬀective procedure to ver-
ify IND-CPA security. The procedure may fail to prove a
secure encryption scheme but never declares correct an in-
secure one. Thus, we sacriﬁce completeness for soundness,
a situation very frequent in veriﬁcation2. We insist that our
procedure does not fail for any of the numerous construc-
tions we tried.
We are aiming at developing a procedure that allows us
to prove properties, i.e. invariants, of the encryption oracle.
More precisely, the procedure annotates each control point
of the encryption command with a set of predicates that
hold at that point for any execution except with negligible
probability. Given an encryption oracle E (ine, oute) : c we
want to prove that at the ﬁnal control point, we have an
invariant that tells us that the value of oute is indistinguish-
able from a random value. As we will show, this implies
IND-CPA security.
A few words now concerning how we present the veriﬁ-
cation procedure. First, we present in the assertion lan-
guage the invariant properties we are interested in. Then,
we present a set of rules of the form {ϕ}c{ϕ
(cid:3)} meaning that
execution of command c in any distribution that satisﬁes ϕ
(cid:3)
leads to a distribution that satisﬁes ϕ
. Using Hoare logic
terminology, this means that the triple {ϕ}c{ϕ
(cid:3)} is valid.
From now on, we suppose that the adversary has access
to the hash functions (cid:2)H, and he is given the trapdoor per-
−1.
mutation f , but not its inverse f
3.1 The Assertion Language
Our assertion language is deﬁned by the following gram-
mar, where ψ deﬁnes the set of atomic assertions:
ψ ::= Indis(νx; V1; V2) | WS(x; V ) | H(H, e)
ϕ ::= true | ψ | ϕ ∧ ϕ,
2We conjecture that the IND-CPA veriﬁcation problem of
schemes described in our language is undecidable.
Command
c
::= x
Oracle declaration O ::= N (x, y) : c
r← U | x := f (y) | x := f
| x := y ⊕ z | x := y||z | if x = y then c1 else c2 ﬁ | c; c
−1(y) | x := H(y) | x := y[n, m]
Table 1: Language grammar.
−1)) = [u
r← U]](S, (cid:2)H, (f, f
[[x
[[x := f (y)]](S, (cid:2)H, (f, f
−1(y)]](S, (cid:2)H, (f, f
[[x := f
[[x := y[n, m]]](S, (cid:2)H, (f, f
[[x := H(y)]](S, (cid:2)H, (f, f
r← U : (S{x (cid:9)→ u}, (cid:2)H, (f, f
−1)) = δ(S{x (cid:9)→ f (S(y))}, (cid:2)H, (f, f
−1))]
−1))
−1)) = δ(S{x (cid:9)→ f
−1(S(y))}, (cid:2)H, (f, f
−1)) = δ(S{x (cid:9)→ S(y)[n, m]}, (cid:2)H, (f, f
−1)) =
8<
: δ(S{x (cid:9)→ v}, (cid:2)H, (f, f
δ(S{x (cid:9)→ v, (cid:2)H (cid:9)→ S((cid:2)H ) · (S(y), v)}, (cid:2)H, (f, f
−1))
−1))
−1))
; if (S(y), v) ∈ (cid:2)H
if (S(y), v) (cid:11)∈ (cid:2)H and v = (cid:2)H(H)(S(y))
−1)) ;
−1)) = δ(S{x (cid:9)→ S(y) ⊕ S(z)}, (cid:2)H, (f, f
−1)) = δ(S{x (cid:9)→ S(y)||S(z)}, (cid:2)H, (f, f
−1))
−1))
if S(x) = 1
−1)) otherwise
[[c1]](S, (cid:2)H, (f, f
[[c2]](S, (cid:2)H, (f, f
−1)) =
−1))
j
−1)) = [[c]](S{x (cid:9)→ v}, (cid:2)H, (f, f
−1)) where c is the body of N .
[[x := y ⊕ z]](S, (cid:2)H, (f, f
[[x := y||z]](S, (cid:2)H, (f, f
[[c1; c2]] = [[c2]] ◦ [[c1]]
[[if x then c1 else c2 ﬁ]](S, (cid:2)H, (f, f
[[N (v, y)]](S, (cid:2)H, (f, f
Table 2: The semantics of the programming language
where V1, V2 ⊆ Var and e is an expression, that is, a variable
x or the concatenation of a polynomial number of variables.
Intuitively, Indis(νx; V1; V2) is satisﬁed by a distribution
on conﬁgurations, if any adversary has negligible probability
to distinguish whether he is given the value of x or a random
value, even when he is additionally given the values of the
variables in V1 and the image by the one-way permutation
of those in V2. The assertion WS(x; V ) is satisﬁed by a
distribution, if any adversary has negligible probability to
compute the value of x, even when he is given the values
of the variables in V . Finally, H(H, e) is satisﬁed when the
value of e has not been submitted to the hash oracle H.
Notations: We use Indis(νx; V ) instead of Indis(νx; V ; ∅)
and Indis(νx) instead of Indis(νx; Var). We also write V, x
instead of V ∪ {x} and even x, y instead of {x, y}.
Formally, the meaning of the assertion language is deﬁned
by a satisfaction relation X |= ϕ, which tells us when a
distribution on conﬁgurations X satisﬁes the assertion ϕ. In
order to deﬁne the satisfaction relation X |= ϕ, we need to
generalize indistinguishability as follows. Let X be a family
of distributions in Dist(Γ, (cid:2)H, (cid:3)) and V1 and V2 be sets of
variables in Var. By D(X, V1, V2) we denote the following
distribution family (on tuples of bit-strings):
D(X, V1, V2)η =
−1))
[(S, (cid:2)H, (f, f
r← X : (S(V1), f (S(V2)), (cid:2)H, f )]
Here S(V1) is the point-wise application of S to the el-
ements of V1 and f (S(V2)) is the point-wise application
(cid:3)
of f to the elements of S(V2). We say that X and X
are V1; V2-indistinguishable, denoted by X ∼V1;V2 X
if
D(X, V1, V2) ∼ D(X
, V1, V2).
,
(cid:3)
(cid:3)
Example 3.1. Let S0 be any state and let H1 be a hash
function. Recall that we are working in the ROM. Consider
the following distributions: Xη = [β; S := S0{x (cid:9)→ u, y (cid:9)→
H1(u)} : (S, (cid:2)H, (f, f
(cid:3) r← {0, 1}p(η); S :=
−1))] and X
S0{x (cid:9)→ u, y (cid:9)→ H1(u
r←
)} : (S, (cid:2)H, (f, f
(cid:3)
−1))], where β = (cid:2)H
(cid:3)
η = [β; u
(cid:3)
(cid:3)
−1)
r← (cid:3)(1η); u
r← {0, 1}p(η), where p is a polyno-
but we do not have
, because then the adversary can query the
Ω; (f, f
mial. Then, we have X ∼{y};{x} X
X ∼{y,x};∅ X
value of H1(x) and match it to that of y.
The satisfaction relation X |= ψ is deﬁned as follows:
.
iﬀ X |= ϕ and X |= ϕ
(cid:3)
• X |= true, X |= ϕ ∧ ϕ
(cid:3)
• X |= Indis(νx; V1; V2) iﬀ X ∼V1;V2 [u
r← U;
(S, (cid:2)H, (f, f
−1))
r← X : (S{x (cid:9)→ u}, (cid:2)H, (f, f
• X |= WS(x; V ) iﬀ Pr[(S, (cid:2)H, (f, f
−1))
−1))]
r← X : A(S(V ))
= S(x)] is negligible, for any adversary A.
• X |= H(H, e) iﬀ Pr[(S, (cid:2)H, (f, f
S((cid:2)H ).dom] is negligible.
−1))
r← X : S(e) ∈
The relation between our Hoare triples and semantic security
is established by the following proposition that states that
if the value of oute is indistinguishable from a random value
then the scheme considered is IND-CPA.
Proposition 3.1. Let ((cid:3),E (ine, oute) : c,D(ind, outd) :
c(cid:3)
) be a generic encryption scheme. It is IND-CPA secure if
{true}c{Indis(νoute; oute, ine)} is valid.
If {true}c{Indis(νoute; oute, ine)} holds then the encryption
scheme is secure with respect to randomness of ciphertext.
It is standard that randomness of ciphertext implies IND-
CPA security.
3.2 A Hoare Logic for IND-CPA security
In this section we present our Hoare logic for IND-CPA
security. We begin with a set of preservation axioms that tell
us when an invariant established at the control point before
a command can be transferred to the next control point.
−1(y), x := y[n, m]
Then, for each command, except x := f
and conditional, we present a set of speciﬁc axioms that
allow us to establish new invariants. The commands that
are not considered are usually not used in encryption but
only in decryption procedures, and hence, are irrelevant for
IND-CPA security.
3.2.1 Generic preservation rules:
r← U or x := y||t or
We assume z (cid:11)= x and c is either x
x = y ⊕ t or x := f (y) or x := H(y) or x := t ⊕ H(y).
Lemma 3.2. The following axioms are sound, when x (cid:11)∈
V1 ∪ V2:
• (G1) {Indis(νz; V1; V2)} c {Indis(νz; V1; V2)}