### [`v-for` with a Component](https://vuejs.org/guide/essentials/list.html#v-for-with-a-component)
You can directly use `v-for` on a [component](#components), like any normal
element (don't forget to provide a key):
```html
```
However, this won't automatically pass any data to the component, because
components have isolated scopes of their own. In order to pass the iterated data
into the component, we should also use props:
```html
```
The reason for not automatically injecting item into the component is because
that makes the component tightly coupled to how `v-for` works. Being explicit
about where its data comes from makes the component reusable in other
situations.
## [Computed Property](https://vuejs.org/tutorial/#step-8)
We can declare a property that is reactively computed from other properties
using the `computed` option:
```javascript
export default {
  // ...
  computed: {
    filteredTodos() {
        if (this.hideCompleted) {
            return this.todos.filter((t) => t.done === false)
          } else {
            return this.todos
          }
        }
    }
  }
}
```
A computed property tracks other reactive state used in its computation as
dependencies. It caches the result and automatically updates it when its
dependencies change. So it's better than defining the function as a `method`
## [Lifecycle hooks](https://vuejs.org/guide/essentials/lifecycle.html)
Each Vue component instance goes through a series of initialization steps when
it's created - for example, it needs to set up data observation, compile the
template, mount the instance to the DOM, and update the DOM when data changes.
Along the way, it also runs functions called lifecycle hooks, giving users the
opportunity to add their own code at specific stages.
For example, the `mounted` hook can be used to run code after the component has
finished the initial rendering and created the DOM nodes:
```javascript
export default {
  mounted() {
    console.log(`the component is now mounted.`)
  }
}
```
There are also other hooks which will be called at different stages of the
instance's lifecycle, with the most commonly used being `mounted`, `updated`,
and `unmounted`.
All lifecycle hooks are called with their `this` context pointing to the current
active instance invoking it. Note this means you should avoid using arrow
functions when declaring lifecycle hooks, as you won't be able to access the
component instance via this if you do so.
## [Template Refs](https://vuejs.org/guide/essentials/template-refs.html)
While Vue's declarative rendering model abstracts away most of the direct DOM
operations for you, there may still be cases where we need direct access to the
underlying DOM elements. To achieve this, we can use the special `ref` attribute:
```html
```
`ref` allows us to obtain a direct reference to a specific DOM element or child
component instance after it's mounted. This may be useful when you want to, for
example, programmatically focus an input on component mount, or initialize a 3rd
party library on an element.
The resulting ref is exposed on `this.$refs`:
```javascript
```
```html
```
Note that you can only access the `ref` after the component is mounted. If you
try to access `$refs.input` in a template expression, it will be `null` on the
first render. This is because the element doesn't exist until after the first
render!
## [Watchers](https://vuejs.org/tutorial/#step-10)
Computed properties allow us to declaratively compute derived values. However,
there are cases where we need to perform "side effects" in reaction to state
changes, for example, mutating the DOM, or changing another piece of state
based on the result of an async operation.
With Options API, we can use the `watch` option to trigger a function whenever
a reactive property changes:
```javascript
export default {
  data() {
    return {
      question: '',
      answer: 'Questions usually contain a question mark. ;-)'
    }
  },
  watch: {
    // whenever question changes, this function will run
    question(newQuestion, oldQuestion) {
      if (newQuestion.indexOf('?') > -1) {
        this.getAnswer()
      }
    }
  },
  methods: {
    async getAnswer() {
      this.answer = 'Thinking...'
      try {
        const res = await fetch('https://yesno.wtf/api')
        this.answer = (await res.json()).answer
      } catch (error) {
        this.answer = 'Error! Could not reach the API. ' + error
      }
    }
  }
}
```
```html
  Ask a yes/no question:
{{ answer }}
```
### Deep watchers
`watch` is shallow by default: the callback will only trigger when the watched
property has been assigned a new value - it won't trigger on nested property
changes. If you want the callback to fire on all nested mutations, you need to
use a deep watcher:
```javascript
export default {
  watch: {
    someObject: {
      handler(newValue, oldValue) {
        // Note: `newValue` will be equal to `oldValue` here
        // on nested mutations as long as the object itself
        // hasn't been replaced.
      },
      deep: true
    }
  }
}
```
!!! note
        "Deep watch requires traversing all nested properties in the watched object, and can be expensive when used on large data structures. Use it only when necessary and beware of the performance implications."
### Eager watchers
`watch` is lazy by default: the callback won't be called until the watched
source has changed. But in some cases we may want the same callback logic to be
run eagerly, for example, we may want to fetch some initial data, and then
re-fetch the data whenever relevant state changes.
We can force a watcher's callback to be executed immediately by declaring it
using an object with a `handler` function and the `immediate: true` option:
```javascript
export default {
  // ...
  watch: {
    question: {
      handler(newQuestion) {
        // this will be run immediately on component creation.
      },
      // force eager callback execution
      immediate: true
    }
  }
  // ...
}
```
## Environment variables
If you're using Vue 3 and Vite you can use [the environment
variables](https://vitejs.dev/guide/env-and-mode.html) by defining them in
`.env` files.
You can specify environment variables by placing the following files in your
project root:
* `.env`: Loaded in all cases.
* `.env.local`: Loaded in all cases, ignored by git.
* `.env.[mode]`: Only loaded in specified mode.
* `.env.[mode].local`: Only loaded in specified mode, ignored by git.
An env file simply contains `key=value` pairs of environment variables, by
default only variables that start with `VITE_` will be exposed.:
```
DB_PASSWORD=foobar
VITE_SOME_KEY=123
```
Only `VITE_SOME_KEY` will be exposed as `import.meta.env.VITE_SOME_KEY` to your
client source code, but `DB_PASSWORD` will not. So for example in a component
you can use:
```vue
export default {
  props: {},
  mounted() {
    console.log(import.meta.env.VITE_SOME_KEY)
  },
  data: () => ({
  }),
}
```
## [Make HTTP requests](https://blog.bitsrc.io/requests-in-vuejs-fetch-api-and-axios-a-comparison-a0c13f241888)
There are many ways to do requests to external services:
* [Fetch API](#fetch-api)
* [Axios](#axios)
### Fetch API
The Fetch API is a standard API for making HTTP requests on the browser.
It a great alternative to the old `XMLHttpRequestconstructor` for making
requests.
It supports all kinds of requests, including GET, POST, PUT, PATCH, DELETE, and
OPTIONS, which is what most people need.
To make a request with the Fetch API, we don’t have to do anything. All we have
to do is to make the request directly with the `fetch` object. For instance, you
can write:
```html
    {{data}}
```
In the code above, we made a simple GET request from an API and then convert the
data from JSON to a JavaScript object with the `json()` method.
#### Adding headers
Like most HTTP clients, we can send request headers and bodies with the Fetch API.
To send a request with HTTP headers, we can write:
```html
```
In the code above, we used the `Headers` constructor, which is used to add
requests headers to Fetch API requests.
The append method appends our 'Authorization' header to the request.
We’ve to set the mode to 'cors' for a cross-domain request and headers is set to
the headers object returned by the `Headers` constructor.
#### Adding body to a request
To make a request body, we can write the following:
```html
      Create
    {{data}}
```
In the code above, we made the request by stringifying the this.post object and
then sending it with a POST request.
### [Axios](https://axios-http.com/)
Axios is a popular HTTP client that works on both browser and Node.js apps.
We can install it by running:
```bash
npm i axios
```
Then we can use it to make requests a simple GET request as follows:
```html
  {{data}}
```
In the code above, we call the `axios.get` method with the URL to make the request.
Then we assign the response data to an object.
#### Adding headers
If we want to make a request with headers, we can write:
```html
```
In the code above, we made a GET request with our Pexels API key with the axios
method, which can be used for making any kind of request.
If no request verb is specified, then it’ll be a GET request.
As we can see, the code is a bit shorter since we don’t have to create an object
with the `Headers` constructor.
If we want to set the same header in multiple requests, we can use a request
interceptor to set the header or other config for all requests.
For instance, we can rewrite the above example as follows:
```javascript
// main.js:
import Vue from "vue";
import App from "./App.vue";
import axios from 'axios'
axios.interceptors.request.use(
  config => {
    return {
      ...config,
      headers: {
        Authorization: "api_key"
      }
    };
  },
  error => Promise.reject(error)
);
Vue.config.productionTip = false;
new Vue({
  render: h => h(App)
}).$mount("#app");
```
```html
import axios from 'axios'
export default {
  name: "App",
  data() {
    return {
      data: {}
    };
  },
  beforeMount() {
    this.getPhoto();
  },
  methods: {
    async getPhoto() {