零、前⾔
⼗⼀本来打算不卷了，好好放松放松，但是⼏个事情对我触动⽐较⼤，所以就⼜给⾃⼰设了个搞懂 RMI 反序列化相
关攻击的学习⽬标。
再加上⼀是为后续深⼊ IIOP/T3 打下基础，⼆是最近⼀位师傅问了我关于利⽤ RMI 回显的思路，帮师傅搞了半天没
有搞定，怪我之前对 RMI 只是浅浅的了解，甚⾄都算不上会，没能帮上这位师傅的忙，很是⾃责，所以花点时间学
⼀学。
这部分的实现略有复杂，本⽂在写的时候也是深感吃⼒，RMI 相关的⽂章在⽹上乱七⼋糟，由于⼜涉及到安全更新
和绕过，之前看了⼏次看的头晕眼花，这次趁着有空梳理⼀下。
个⼈能⼒有限，如有理解错误及偏差，请不吝赐教。
⼀、RMI 介绍
RMI (Remote Method Invocation) 远程⽅法调⽤，顾名思义，是⼀种调⽤远程位置的对象来执⾏⽅法的思想。
这种思想在 C 语⾔中的 RPC（Remote Procedure Calls）中早就有了体现，但是 RPC 是打包和传送数据结构，⽽
在 Java 中，我们通常传递⼀个完整的对象，这个对象既包含数据，也包含数据和操作数据的⽅法，Java 中如果想
完整的在⽹络中向远程位置传输⼀个对象，我们通常使⽤的⽅法是 Java 原⽣反序列化，并且可以结合动态类加载
和安全管理器来安全的传输⼀个 Java 类。
⽽具体的实现思想就是让我们获取远程主机上对象的引⽤，我们调⽤这个引⽤对象，但实际⽅法的执⾏在远程位置
上。
为了屏蔽⽹络通信的复杂性，RMI 引⼊了两个概念，分别是 Stubs（客户端存根） 以及 Skeletons（服务端⻣
架），当客户端（Client）试图调⽤⼀个在远端的 Object 时，实际调⽤的是客户端本地的⼀个代理类（Proxy），
这个代理类就称为 Stub，⽽在调⽤远端（Server）的⽬标类之前，也会经过⼀个对应的远端代理类，就是
Skeleton，它从 Stub 中接收远程⽅法调⽤并传递给真实的⽬标类。Stubs 以及 Skeletons 的调⽤对于 RMI 服务的
使⽤者来讲是隐藏的，我们⽆需主动的去调⽤相关的⽅法。但实际的客户端和服务端的⽹络通信时通过 Stub 和
Skeleton 来实现的。
这⾥先简单列⼀下整体调⽤时序图，后⾯会详细进⾏展开说：
使⽤ RMI ，⾸先要定义⼀个我们期望能够远程调⽤的接⼝，这个接⼝必须扩展 java.rmi.Remote  接⼝，⽤来远
程调⽤的对象作为这个接⼝的实例，也将实现这个接⼝，为这个接⼝⽣成的代理（Stub）也是如此。这个接⼝中的
所有⽅法都必须声明抛出 java.rmi.RemoteException  异常，例如：
其次我们来创建这个远程接⼝的实现类，这个类中是真正的执⾏逻辑代码，并且通常会扩展
java.rmi.server.UnicastRemoteObject  类，扩展此类后，RMI 会⾃动将这个类 export 给远程想要调⽤它的
Client 端，同时还提供了⼀些基础的 equals/hashcode/toString  ⽅法。这⾥必须为这个实现类提供⼀个构造函
数并且抛出 RemoteException。
在 export 时，会随机绑定⼀个端⼝，监听客户端的请求，所以即使不注册，直接请求这个端⼝也可以通信，这部
分也会在后⾯展开说。
如果不想让远程对象成为 UnicastRemoteObject 的⼦类，后⾯就需要主动的使⽤其静态⽅法 exportObject  来⼿
动 export 对象。示例代码如下：
public interface RemoteInterface extends Remote {
  public String sayHello() throws RemoteException;
  public String sayHello(Object name) throws RemoteException;
  public String sayGoodbye() throws RemoteException;
}
public class RemoteObject extends UnicastRemoteObject implements RemoteInterface {
  protected RemoteObject() throws RemoteException {
  }
  @Override
  public String sayHello() throws RemoteException {
    return "Hello My Friend";
  }
  @Override
  public String sayHello(Object name) throws RemoteException {
    return name.getClass().getName();
  }
  @Override
  public String sayGoodbye() throws RemoteException {
    return "Bye";
  }
}
现在可以被远程调⽤的对象被创建好了，接下来改如何调⽤呢？Java RMI 设计了⼀个 Registry 的思想，很好理
解，我们可以使⽤注册表来查找⼀个远端对象的引⽤，更通俗的来讲，这个就是⼀个 RMI 电话本，我们想在某个⼈
那⾥获取信息时（Remote Method Invocation），我们在电话本上（Registry）通过这个⼈的名称 （Name）来
找到这个⼈的电话号码（Reference），并通过这个号码找到这个⼈（Remote Object）。
这种电话本的思想，由 java.rmi.registry.Registry  和 java.rmi.Naming  来实现。这⾥分别来说说这两个
东⻄。
先来说说 java.rmi.Naming ，这是⼀个 final 类，提供了在远程对象注册表（Registry）中存储和获取远程对象引
⽤的⽅法，这个类提供的每个⽅法都有⼀个 URL 格式的参数，格式如下： //host:port/name ：
host 表示注册表所在的主机
port 表示注册表接受调⽤的端⼝号，默认为 1099
name 表示⼀个注册 Remote Object 的引⽤的名称，不能是注册表中的⼀些关键字
Naming 提供了查询（lookup）、绑定（bind）、重新绑定（rebind）、接触绑定（unbind）、list（列表）⽤来
对注册表进⾏操作。也就是说，Naming 是⼀个⽤来对注册表进⾏操作的类。⽽这些⽅法的具体实现，其实是调⽤
LocateRegistry.getRegistry  ⽅法获取了 Registry 接⼝的实现类，并调⽤其相关⽅法进⾏实现的。
那就说到了 java.rmi.registry.Registry  接⼝，这个接⼝在 RMI 下有两个实现类，分别是 RegistryImpl 以及
RegistryImpl_Stub，具体也放⾯后⾯来说。
我们通常使⽤ LocateRegistry#createRegistry()  ⽅法来创建注册中⼼：
然后将待调⽤的类进⾏绑定：
客户端进⾏调⽤：
public class Registry {
  public static void main(String args[]) {
    try {
      LocateRegistry.createRegistry(1099);
      System.out.println("Server Start");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
public class RemoteServer {
  public static void main(String[] args) throws RemoteException, MalformedURLException, 
AlreadyBoundException, InterruptedException {
    // 创建远程对象
    RemoteInterface remoteObject = new RemoteObject();
    // 绑定
    Naming.bind("rmi://localhost:1099/Hello", remoteObject);
  }
}
这⾥ RemoteInterface 接⼝在 Client/Server/Registry 均应该存在，只不过通常 Registry 与 Server 通常在同⼀端
上。
这样⼀次简单的远程调⽤通信就完成了，但是这其中还有⼏个特性需要说⼀下。
⾸先是动态类加载，如果客户端在调⽤时，传递了⼀个可序列化对象，这个对象在服务端不存在，则在服务端会抛
出 ClassNotFound 的异常，但是 RMI ⽀持动态类加载，如果设置了 java.rmi.server.codebase ，则会尝试从
其中的地址获取 .class  并加载及反序列化。
可使⽤ System.setProperty("java.rmi.server.codebase", "http://127.0.0.1:9999/");  进⾏设置，
或使⽤启动参数 -Djava.rmi.server.codebase="http://127.0.0.1:9999/"  进⾏指定。
接下来就是安全策略的设置，因为我们通过⽹络加载外部类并执⾏⽅法，所以我们必须要有⼀个安全管理器来进⾏
管理，如果没有设置安全管理，则 RMI 不会动态加载任何类，通常我们使⽤：
public class RMIClient {
  public static void main(String[] args) throws RemoteException, NotBoundException {
    // sun.rmi.registry.RegistryImpl_Stub
    Registry registry = LocateRegistry.getRegistry("localhost", 1099);
    System.out.println(Arrays.toString(registry.list()));
    // lookup and call
    RemoteInterface stub = (RemoteInterface) registry.lookup("Hello");
    System.out.println(stub.sayHello());
    System.out.println(stub.sayGoodbye());
  }
}
管理器应与管理策略相辅相成，所以我们还需要提供⼀个策略⽂件，⾥⾯配置允许那些主机进⾏哪些操作，这⾥为
了⽅便测试，直接设置全部权限：
同样可以使⽤ -Djava.security.policy=rmi.policy  或 System.setProperty("java.security.policy",
RemoteServer.class.getClassLoader().getResource("rmi.policy").toString());  来进⾏设置。
⼆、源码分析