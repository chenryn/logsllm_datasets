    def proof_of_work(sh):
        sh.recvuntil("XXXX+")
        suffix = sh.recvuntil(')').decode("utf8")[:-1]
        log.success(suffix)
        sh.recvuntil("== ")
        cipher = sh.recvline().strip().decode("utf8")
        proof = mbruteforce(lambda x: sha256((x + suffix).encode()).hexdigest() ==  cipher, string.ascii_letters + string.digits, length=4, method='fixed')
        sh.sendlineafter("Give me XXXX:", proof)
    proof_of_work(sh)
    sh.interactive()
    # These three are constants
    p = 12039102490128509125925019010000012423515617235219127649182470182570195018265927223
    g = 10729072579307052184848302322451332192456229619044181105063011741516558110216720725
    def int2str(data, mode="big"):
        if mode == "little":
            return sum([ord(data[_]) * 2 ** (8 * _) for _ in range(len(data))])
        elif mode == "big":
            return sum([ord(data[::-1][_]) * 2 ** (8 * _) for _ in range(len(data))])
    def get_parameter(m):
        x = int2str(m, 'little')
        y = pow(g, x, p)
        a = bytes_to_long(hashlib.sha256(long_to_bytes(y).rjust(128, b"\0")).digest())
        b = pow(a, a, p - 1)
        h = pow(g, b, p)
        return y, h, b
    def sign(m):
        y, h, b = get_parameter(m)
        r = getStrongPrime(512)
        s = (y * powmod(h, r, p)) % p 
        return str(r),str(s)
    def verify(m, r, s):
        y, h, b = get_parameter(m)
        if s == ((y * powmod(h, r, p)) % p):
            return True
        else:
            return False
    sh.recvuntil("Here is the frist message(64 bytes):")
    message1 = bytes.fromhex(sh.recvuntil("\n")[:-1].decode()).decode()
    sh.recvuntil("Here is the second message(64 bytes):")
    message2 = sh.recvuntil("\n")[:-1].decode()
    print("message2",message2)
    message2 = bytes.fromhex(message2).decode()
    sh.recvuntil("The frist message's 'r':")
    message1_r = int(sh.recvuntil("\n")[:-1])
    sh.recvuntil("Please choice your options:")
    #根据题目获取各个参数
    message1_y, message1_h, message1_b = get_parameter(message1)
    message1_s = (message1_y * pow(message1_h, message1_r, p)) % p
    message2_s = message1_s
    message2_y, message2_h, message2_b = get_parameter(message2)
    ######################################################
    #解题核心
    #x1+b1r1=x2+b2r2
    x1 = int2str(message1, 'little')
    b1 = message1_b
    r1 = message1_r
    x2 = int2str(message2, 'little')
    b2 = message2_b
    tmp = gcd(b2,p-1)
    print(tmp)
    r2 = (((x1+b1*r1-x2)//tmp)*inverse(b2//tmp,p-1))%(p-1)
    ######################################################
    sh.sendline("3")
    sh.recvuntil("Please give me the (r,s) of the second message:")
    print("("+str(r2)+","+str(message2_s)+")")
    sh.sendline("("+str(r2)+","+str(message2_s)+")")
    sh.interactive()
## ECDSA
这道题贼狠，源码都不给，来看一看MENU叭
    [DEBUG] Received 0xd bytes:
        b'Give me XXXX:'
    [DEBUG] Sent 0x5 bytes:
        b'bwUI\n'
    [DEBUG] Received 0x4f bytes:
        b'Hello,guys!Welcome to my ECC Signature System!I promise no one can exploit it!\n'
    [DEBUG] Received 0x269 bytes:
        b'Howevers if you can exploit it in 10 times,I will give what you want!\n'
        b'Here is the frist message(64 bytes):fipoN9jy/*@~J:] PcZY8{&X!7v+\\duTln_#k(WK^Q2L) e + rk = ds => s = (e + rk)*d^{-1}
由于两个msg的s要保持一直，那么我们构造的等式就是(e_1 + rk) * d^{-1} = (e_2 + rk) * d^{-1}
很显然啊，因为d不能等于0，这等式不可能成立啊，于是陷入僵局。
但这里我们忘了一个很重要的性质，就是，我们最后验证的是v = r，而r是什么，r = dG.x，我们要知道的是，椭圆曲线是一个关于x轴对称的图形，所以其实
r = -dG.x。华点都发现了，这题就解决了，
等式变为 (e_1 + rk) * d^{-1} = (e_2 + rk) * (-d)^{-1}
化成同余式就是(e_1 + rk) * d^{-1} ≡ (e_2 + rk) * (-d)^{-1} mod{n}
有 e_1 + rk ≡ -e_2 -rk mod{n}
有 k ≡ (-e1-e2) // 2r mod{n}
然后怕【我们去查一下这条曲线的[参数](https://www.secg.org/sec2-v2.pdf)即可
参考脚本
    from pwn import *
    from Crypto.Util.number import *
    sh=remote("139.129.98.9","30002")
    from pwnlib.util.iters import mbruteforce
    from hashlib import sha256
    import hashlib
    from math import gcd
    context.log_level = 'debug'
    a=0
    b=7
    q=0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
    gx=0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798
    gy=0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8
    order=0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141
    ecc = EllipticCurve(GF(q), [a,b])
    G = ecc(gx,gy)
    import hashlib
    def sha1(content):
        return hashlib.sha1(content).digest()
    def proof_of_work(sh):
        sh.recvuntil("XXXX+")
        suffix = sh.recvuntil(')').decode("utf8")[:-1]
        log.success(suffix)
        sh.recvuntil("== ")
        cipher = sh.recvline().strip().decode("utf8")
        proof = mbruteforce(lambda x: sha256((x + suffix).encode()).hexdigest() ==  cipher, string.ascii_letters + string.digits, length=4, method='fixed')
        sh.sendlineafter("Give me XXXX:", proof)
    proof_of_work(sh)
    sh.recvuntil("Here is the frist message(64 bytes):")
    msg1 = sh.recvuntil("\n")[:-1]
    sh.recvuntil("Here is the second message(64 bytes):")
    msg2 = sh.recvuntil("\n")[:-1]
    message = hex(bytes_to_long(msg1))[2:]
    e1=bytes_to_long(sha1(msg1))
    e2=bytes_to_long(sha1(msg2))
    ######################################################
    #解题核心
    #pubkey = sh.recvuntil("\n")[:-2].decode()
    #r=[d * G].x
    d=12321
    r=int((d*G)[0])
    new_k = ((-e1-e2)*inverse(2*r,order))%order
    new_Q = new_k * G
    new_S = ((e1 + new_k*r)*inverse(d,order))%order
    newpubkey = hex(new_Q[0]).replace("0x","").rjust(64,"0")+hex(new_Q[1]).replace("0x","").rjust(64,"0")
    newsignature = hex(r).replace("0x","").rjust(64,"0")+hex(new_S).replace("0x","").rjust(64,"0")
    ######################################################
    sh.recvuntil("Please choice your options:")
    sh.sendline("3")
    sh.recvuntil("Please give me your public_key(hex):")
    sh.sendline(newpubkey)
    sh.recvuntil("Please choice your options:")
    sh.sendline("6")
    sh.recvuntil("Please give me the signature(hex) of the frist message:\n")
    sh.sendline(newsignature)
    sh.recvuntil("Please give me the signature(hex) of the second message:\n")
    sh.sendline(newsignature)
    sh.interactive()