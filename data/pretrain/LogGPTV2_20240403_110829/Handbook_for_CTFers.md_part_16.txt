Fig, 2.74 Result
Fig, 2.75 Result
127.0.0.1:8888
error
---
## Page 150
134
2 Advanced Web
alezt (1) 
click
2. XSS with HTML5 Features
Some features of HTML5 can refer to the website *htp:/html5sec.org/". The “on"
event trigger of many tags requires interaction, such as mouse over and click, the
code is as follows:
osmo a snoo eogeuone m en ,ndu, o jo snque ,snsoone, au
here, and the “onfocus" event can be triggered without interaction. Two input tag
compete for focus, when the focus is on another “*input” tag, the previous one will
trigger the “blur" event. For example:
3. Pseudo protocol and XSS
Usually, we use the HTTP/HTTPS protocol in the browser to visit the website, but in
a page, when the mouse hovers over a hyperlink, we will always see this link:
“javascript:void(o)", this is actually implemented using the JavaScript pseudo-
protocol. If you click manually, or when the JavaScript execution on the page
jumps to the JavaScript pseudo-protocol, the browser will not lead us to visit this
address, but will treat the content after “javascript:" as JavaScript code, directly in
the current page is executed. So, for such a label:
x
(, x nq sem o on df sou  1  s x no 
directly on the current page. In addition to clicking directly with the “a tag, there are
oojord sduogeae[ a 1on o1 sAem soo Aue
For example, when using JavaScript to jump to other pages, the jump protocol
can also be triggered using JavaScript pseudo-protocol. The code is as follows:
1ocation.href=javascript : alert (document domain) * ;
So if there is such a code in some login/logout business:
---
## Page 151
2.3 The Magic of XSS
135
1ogout
The jump address is controllable, and we can control the jump address to the
JavaScript pseudo-protocol, thus realizing XSS attacks, as shown in Fig. 2.76.
-opnasd iduogeae o uoddns ose Sen uuoj, pue Se oueg, “uope u]
protocol. Interested readers can try the following on their own. The difference is that
q o spu e o, o nq uo nom pss oq o  oe, 
triggered when the form is submitted.
In addition to the JavaScript pseudo-protocol, there are other pseudo-protocols
that can achieve similar effects in “iframe” tags. For example, the “data" pseudo-
protocol:
①127.0.0.1:8888/xss/logout.html?jumpurl=javascript:alert(0)
127.0.0.1:8888
0
Fig, 2.76 Result
---
## Page 152
136
2 Advanced Web
4. XSS caused by secondary rendering
Back-end languages such as Flask’s jinja2, if used improperly, there may be
template injection, and XSS may also be formed on the front-end for this reason.
For example, in AngularJS:
dud >
Stemplate = *Hello {{name}}* .S_GET[′t′] ;
? >
 IDOCTYPE htm1>
cdiv ng- app="">
name : 
The above code will directly output the parameter °t"' to the AngularJS template.
When we visit the page, JavaScript wil parse the code in the template and get a
front-end template injection. The AngularJS engine parses the expression *3*3" and
prints the result, as shown in Fig. 2.77.
Using sandbox escape vulnerabilities, we can achieve the purpose of executing
arbitrary JavaScript code. Such XSS is caused by the secondary rendering of part of
the output by the front end, so there is no such feature as the *script” tag, and it will
not be blocked by the browser at will, as shown in Fig. 2.78.
Reference: https://portswigger.net/blog/XSS-without-html-client-side-template-
injection-with-angularjs。
( can be used to bypass filter or when the case is not considered,
the script tag can be bypassed by changing the case. See Fig. 2.79.
dud >
function filter (Spayload) {
Sdata = stz_replace (*script*, "", $payload) ;
return Sdata;
---
## Page 154
138
2 Advanced Web
e:127.0.0.1:888
1hello alert(1)
Fig, 2.79 Result
Snane = fi1ter ($_GET ["name"] ) ;
echo *hello Sname";
, we can directly introduce new tags, or introduce
tag events, such as onload, onmousemove, etc. When the statement is output to the
a Supoou TLH Aq togop au ssedkq ueo am uaaa Se a jo toeo
payload, as shown in Fig. 2.80.
Use burpsuite to entity encode the payload:
1mg src=x one22o2="&#x61 ;&#x6c ;&#x65 ;&#x72 ;&#x74 ;&#x28 ; &#x31 ;
&#x29 ; " />
It can be triggered by opening the browser, as shown in Fig. 2.81.
The XSS can be triggered is related to the order in which the browser renders the
page. Our payload is in the tag attribute. Before triggering the event, the browser has
decoded the payload once, that is, converted from entity encoding to regular data.
If you filter JavaScript functions, such as filtering character combinations like
“eval(", you can bypass it in the following ways:
Fig, 2.80 HTML encoding
the payload
alert(1)
6#x61;$#x6c;h#x65.h#x72:#x74;5#x28;$#x31:$#x29
 127.0.0.1
1
 Don't allow 127.0.0.1 to prompt you again
中
Fig, 2.81 Result
---
## Page 155
2.3 The Magic of XSS
139
aaa=eval ;
aaa ("evil code*) ;
blacklisting-
Because JavaScript is very flexible, it is very difficult to filter XSS attacks by
3. Output in JavaScript variable
By closing the JavaScript statement, our aftack statement will escape.The experi-
enced developers may encode or escape the quotation marks to prevent XSS.
However, XSS may still be formed in conjunction with some special scenarios.
For example, for the following two-input injection:
:ZanduT , = ssed pue , tanduT , = aueu gHaHH sxasn wosd + JoaT39
If only single quotation marks are filtered without considering “",the second
single quotation mark in the statement will be escaped so that the first single
quotation mark and the third single quotation mark will be closed, and the attack
statement will escape:
SELECT + FROM users WHERE name = '\′ and pass = 'union select xoxxxx#
There are similar scenarios in XSS.For example:
cmeta charset="gb18030*>
var ur1 = 'http : / /nu11 com/?name=′+′′ ;
There are two input points and output points, If you enter the quotation mark, it
will be encoded as the entitative char of HTML, but the htmlentities function
couidn’t filter ", so we can use "° to make the attack statement escape,as shown
in Fig. 2.82.
Enter *" at the end of the name, close the previous JavaScript statement at the
 no , s  e  s s e rd e
---
## Page 156
140
2  Advanced Web
C
8:127.0.0.1
TFE
ht=3
ceitle
et="gb18030°
/head
bodya
'trnu//=du, =
';alert(1);//°;
Fig, 2.82 Result
use eval(window.name) to introduce malicious code or use “String.fromCharCode"
in JavaScript to avoid using filtered characters such as quotation marks.
Introduce a few more tips,as shown in Fig. 2.83.If the payload hide in location.
hash, the characters after the “#' in the URL will not be sent to the server, so there is
no filtering by the sever.
As shown in Fig. 2.84, in JavaScript, backticks can be used directly as string
boundary char.
4. CSP filter and bypass
O D 127.00.1/
Na/load hide inhash
Fig, 2.83 Result
---
## Page 157
2.3 The Magic of XSS
141
O 127.0.8.1/mame/5ade-alert[ 233//]
 127.48.1
Fig, 2.84 Result
We refer https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP to introduce
CSP.
CSP (Content Security Policy) is an additional layer of security, it is used to
detect and weaken certain types of attacks, including cross-site scripting (XSS) and
data injection attacks.Whether it's data theft, contamination of website content, or
distribution of malicious software, these attacks are the main means.
CSP is designed to be fully backward compatible. Browsers that do not support
CSP can also work normally with servers that implement CSP, and browsers that do
not support CSP will just ignore it and run normally, and the default web content
uses the standard same-origin policy. If the website does not provide a CSP header,
the browser will also use the standard same-origin policy.
In order to make the CSP available, we need to conFig. the web server to retum
the Content-Security-Policy HTTP header (sometimes called X-Content-Security-
Policy header, which is the old version, so you don’t need to specify it). In addition,
the  element can also be used to configurethe strategy.
It can also be seen from the previous filtering bypass that XSS defense is by no
s s s q  ss d  q o ao d p a s
additional rules for browsers to render pages and execute JavaScript in order to
prevent XSS. This rule is executed at the browser layer, and you only need to
configure the server to retum the Content-Security-Policy header. For example:
---
## Page 158
142
qPM peouapy 
Fig, 2.85 An error will be reported on the browser’s console interface
This code will stipulate that the JavaScript files referenced by this page are only
allowed to come from subdomains of Baidu, and any other way of JavaScript
execution will be intercepted, including the code in the script tag of the page itself.
If a JavaScript file of an untrusted domain is referenced, an error will be reported on
the browser?s console interface (press F12 to open the console), as shown in Fig. 2.85.
CSP rules are shown in Table 2.1.
Each rule in the table corresponds to a certain part of the request in the browser. For
example, the default-src directive defines those security policies that are not specified
by more precise directives, which can be understood as a default policy for all requests
in the page; script-src can specify the source of JavaScript resource files that are allowed
to be loaded. Readers can leam the meaning of the rest of the rules on your own.
In the setting of CSP rules, "*' can be used as a wildcard. For example, "*.baidu.
Com" refers to JavaScript resource files that allow loading all subdomains of Baidu;
moog-uauo, se qons sued pue sooood ooads uoads spoddns ose 1!
ed pue poood ooads a soads /sf/o, npeqs/:d s-ds :oo
In addition, script-src also supports specified keywords. Common keywords are
as follows:
•none:It is forbidden to load all resources.
·s
self:Allow to load resource files of the same origin.
unsafe-inline:Allows to execute embedded JavaScript code directly in the page.
•unsafe-eval:It is allowed to use “evalO" and other methods to create codes
through character strings.
Table 2.1 CSP rules
Diretives
Explanation
defaslt-src
Defines the default policy for fetching resources
connect-
Applies to AJAX, WebSocket, fetch(),  or EventSource
font-src
STC
Defines valid sources of font resources
frame-src
Defines valid sources for loading frames
img-src
Defines valid sources of images
media-src
Defines valid sources of audio and video, eg HTML5 s,  elements
object-src
Defines valid sources of plugins, eg , 
bypass csp
Note that if it is an image upload interface, that is, if the Content-Type returned
when accessing the uploaded resource is like image/png, it will be rejected by the
browser.
Assuming that an a.xxxxx file is uploaded, the file is imported into the src
attribute of the script tag through the GET parameter of the URL. The Content-
type retumed at this time is text/plain, and the analysis result is shown in Fig. 2.86.
127.0.0.1:8888/xss/csp.php?url=upload/a.xxxx
127.0.0.1:8888
csp bypass
Fig, 2.86 Result
---
## Page 160