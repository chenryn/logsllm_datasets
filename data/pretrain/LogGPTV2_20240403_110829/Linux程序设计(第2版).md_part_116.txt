604
Linux程序设计
print
*\nCatalog number: $cdcatnun\n*;
print
"Title: Scdtitleln*:
print *Artist/Composer: $cdac\n\n*;
print
"Type: $cdtype\n';
get_return();
if (Sasklist）（
print *View tracks for this cD?*;
1f 1/^y(?:es)?s/1){
print *\n":
print *\n*:
list_tracks();
return 1:
8）在剥离了从数组里删除旧曲目的功能之后，update_cd很容易实现。我们用另一个grep函
数来做这项工作，但这一次我们要用“regexp/”语法否定那个规则表达式。
sub update, cd (
unless (Scdcatnum){
print *You must select a CD first\n*;
find_cd(*n*) ;
if($cdcatnum){
print “Cuzrent tracks are :-\n*;
print *\nThis will re-enter the tracks for Scdtitlen":
list_tracks():
if (get_confirn())(
tracks=grep1/^$cdcatnum,/,9tracks;
add_record_tracks();
9）因为数据都已经被保存到数组里去了，所以统计数据库内容的工作是轻面易举的。
sub count_cds (
print *with a total of *.(scalar @tracks).tracks.n*:
print Found*.(scalar @titles).*CDs,';
get_return():
10）我们已经见过怎样才能使用grep和--个规则否定表达式从一个数组里除数据项了；现
在再做一次：
sub remove_records {
unless (Scdcatnum){
print *You aust select a CD first\n*:
find_cd(*n*);
1
ift$cdcatnun）(
print *You are about to delete Scdtitle\n*;
if (get_confirm()）（
@titles=grep1/~$cdcatnum,/.Qtitles:
ecdcatnum=**
print *Bntry .emoved′;
get_returni1 :
11)list_tracks需要分页显示，所以我们需要把数据写到一个临时文件，再用shel来对它进行
加入jaVa编程群：524621833
---
## Page 623
第18章Perl程序设计语言
605
操作。
sub list_tracks {
unless($cdcatnum{
print *No CD selected yet. n*;
return
open (TEMP,*>$Lanp_fi1e*)
1
temp =grep /^$cdearnun,/,etracks;
or die *Can't write tc Stemp_file: S!\n′;
f (scalar @temp s= 0)(
print *No tracks found for Scdtitle\n′:
}else f
print TEMP *\n$cdtitle :=n\n;
foreach （eterp）（
s*,*?,//;Remove the first field
print TEMP $_.*\n°:
close TEMP:
unlink(Stemp_file); # Delete it.
get_return():
12）下面是主程序部分。T万不要忘记在退出之前要把数组里的数据写回到文件去。在开始
读取文件之前，我们还必须保证它们确实存在，如果不存在就建立它。当然，我们也不必非得
这样做一如果文件不存在，我们可以不必报告出错，数组都是空的，文件可以等到我们退出程
序时再创建不迟。
File tests work like shell
systen(*touch $title_file*) unless(-f Stitle_file);
system(*touch $tracks_file*) unless ( -f Stracks_file 1;
read_in() :
print *\a\nMini CD Banager\n*:
systen(*clear*):
sleep(3);
while (1){
set_menu_choice():
if (Smenu_choice c-/a/i) ( add_records();)
elsif （Smenu_choice z-/r/i)（remove_recordsi):}
elsif
(Smenu_choice =-/u/i)
(Smenu_choice =-/f/i)
elsif
{update_cd(}:}
(find_cd(*y*):)
elsif
($nenu_choice =-/c/i)
{count_cds{};)
elsif
(Smenu_choice =~/b/i)
(Smenu_choice =~/1/1)
{list_tracks1}:}
elsif
foreach (etitles）[
print "\n':
print *s_n*;
print *\n′;
get_return{} :
elsif {$menu_choice =~/q/i){last;}
else (print *Sorry. choice not recognized.\n*;)
1
tidy_up();
exi t;
18.3命令行上的Perl
现在，我们已经见过一个完整的Perl程序了，再来点Perl的日常使用怎么样？这么说吧，
加入jaVa编程群：524621833
---
## Page 624
606Linux程序设计
Perl就像sed和awk一样非常适合用做过滤器来完成i常的系统维护工作：事实上，Perl提供了一
组相当有用的命令行选项来帮助我们完成这些工作就像我们在这一章的开始见到的“-w”一
样、完全可以把这些选项放在我们脚本的“#！语句行上。
首先要介绍的是“e”。类似于sed和awk中的用法，它允许我们执行只有一-行的Perl脚本，
如下所示：
Sperl -e'print *Bello,world\n*;
Hello, world
类似地，我们可以给Perl提供一个文件名让它用做标准输入，可以把我们熟悉的注释清理语
句写成下面这个样子：
S perl-'while(<>){print unless/^#/ )′ayfile
它会去掉myfile里使用的注释行后再打印出来。因为循环处理文件的每-行是一个经常要用
到的操作，所以Perl专门为此准备了个特殊的语法：“-n”选项。如下所示：
S perl -n-o'print unless /*#/'myfile
mhile {<>]{
print or die *p destination: $!\n*;
1
这在查找与替换操作使用的规则表达式里很有用.比如说，“perl-p-e`s/foo/bar/g”file”会
把文件打印出来，并且把每一处出现“foo”的地方都替换为“bar”。现在，我们再前进一步，
假设我们确实想把文件里的每一个“August”都替换为“September”。普通的做法是先把替换后
的输出结果保存到一个临时文件里，然后通过mv命令用临时文件替换掉旧文件。但在Perl里不
必这样麻烦。Perl通过“i”选项支持对文件进行“当时当地”的修改。请看，“perl-p-i·e
s/August/September/g'myfile”相当于shell里的下列命令：
Sweda/August/Septeabex/gmyfile>tmptile;
Smv tmpfilemyfi1e;
e's/August/Septemberlgmyfile”既完成了对文件的修改，又保存了一个名为myfile.bak的备份文
件。这个办法可以轻易地建立起功能非常强大的过滤器和文件编辑器。
那么，命令行上还能变出其他魔术吗？我们已经见过“-w”可以为你的脚本打开附加的错
误报警功能。现在再向大家介绍“-c”选项一一它可以在不运行脚本的前提下对程序进行语法
检查；和“-d”调试器选项-一它是一个功能强大的追踪脚本程序错误问题的工具。最后、再
们？用“1”选项打开行自动处理功能试试它将自动卡掉通过rcadhine操作符读人脚本的任河
一起真管用！
加入jaVva编程群：524621833
---
## Page 625
第18章Perl程序设计语言
607
18.4模块
如果你是在认认真真地编写Perl程序，就会逐渐地发现自已正在编写的代码有许多是以前曾
经编写过的，比如网络程序设计、文本和HTML的处理、会令行参数的处理、保存数据到文件，
等等。也许还会出现这样的情况：你认为有些事情在Perl里是很难完成的，因此需要使用-个C
语言扩展等。
Perl模块就是用来对付这两种情况的：它们提供了代码的再使用性，就像C语言里的函数
库；同时也允许与其他程序设计语言进行通信和交流。我们不准备在这里深入探讨各种模块的
使用方法和如何建立你自已的模块，但将尽量让大家对可以利用模块来完成的工作有一个初步
的认识。
18.4.1CPAN
CPAN是一个重要的Perl模块仓库站点，全称是“ComprehensivePerlArchiveNetwork”（智
能化Perl档案网）。正如它名字里说的那样，它是一组几平囊括了所有Perl模块的镜像档案：模块
之多超出你的想象。CPAN模块仓库的人口点是http：//www.cpan.org/或者是http：
//www.perl.com/CPAN/；它们会把你引导到离你最近的镜像站点。从CPAN上你可以下载文档，
教程以及最新版本的Per源代码，但你最想从它那里得到的应该是模块了。在本地镜像站点的
/modules/bycategory子目录里可以查到其中存放若的模块的清单，面各种CPAN模块的介绍说明
则可以在主目录中的CPAN.html文件里查出来。
18.4.2安装一个模块
从CPAN下载到一个模块之后，我们就可以按照下而的步骤把它安装到自己的系统里。我们
以Net:：Telnet模块为例进行说明。假设我们已经从CPAN下载了Net-Telnet-3.01.tar.gz文件，现在
就需要执行下面这些命令：
S tar sxf Met-Talnet-3.01.tar.gz
Sperl Makefile.PL
S cd Mot-Telnet-3.01
Looks good
Checking if your kit is complete...
Writing Makefjle for Net:Telnet
S make Instal1
最后一个步骤可能需要具备特定的权限才能把模块文件安装到Perl子目录里去。
安装模块还有另外一个办法。在你的Perl发行版本里带有一个由AndrcasKonig编写的名为
CPAN的模块，它可以引导你完成整个安装过程。你只需敲人下而的命令：
S perl -HCPAN -e she11
再根据提示进行操作就行了。这个办法可以用来安装成批的模块，比如libwww这样拥有大
量依赖关系的模块等。
18.4.3perldoc命令
一切模块（包括Perl自带的模块，以及Perl语言本身）都应该带有完整的文档。这些文档是
加入jaVa编程群：524621833
---
## Page 626
608
Linux程序设计
说，要想阅读刚才安装的Net:：Telnet模块的文档、我们要使用命令：
>
$ perldoc Net::Telnet
如果想进一步了解Perl语言，可以从“perldocperl”开始；然后认真阅读它指向的所有页
面-—当然这需要你有足够耐心。perldoc有两个很有用的选项，一个是“-qkeyword”，它的作
用是在浩瀚的PerlFAQ里查找指定的关键字：举例来说，“perldoc-qY2K”会把千年虫方面的
资料找出来，另一个选项是“-ffunction"，它会把perlfunc文档里与function函数有关的章节找
出来。比如说，你可以试试“perldoc-funshift”。
18.4.4网络功能
这些模块对我们的帮助可以说是雪中送炭。你需要从CPAN站点下载一组相关的模块。
1. LWP
LWP（libwww-perl）是涵盖了Web服务器操作和客户操作的一组模块。让我们假设整个模
块组都已经安装好了。下面先通过模块LWP:：Simple来完成一些简单的操作。首先下载HTML格
式的当日新闻，如下所示：
,wq Auoxa/yn oooqq*snau// :dau,2f= smaus
use LWP::Sinpie;
现在用HTML分析器（HTML-Parser）库里的HTML：LinkExtor模块把其中的链接全部提取
出来。如下所示：
Sp= HTML::LinkExtor->new(1:
use HTML::LinkExtor;
links = Sp->links: # Array of all the links in the file
(smaus)sxed
好了，大家可能还不太看得懂这段代码，但这只是因为我们还没有向大家介绍面向对象的
程序设计。不管怎么说，就像C语言的函数库一样，Perl模块可以极大地简化程序设计工作。
2. 1O:Socket
现在，学习点套接字网络功能怎么样？还记得那个连接到·个时间服务器并获取了当地时
间的C语言程序吗？下面是我们在Perl里的做法。套接字库IO:：Socket是一个应该随你的Perl发行
版本一起提供的标准模块。
use 10::Socket;
Shost-“localhost*unless(Shost=shift);
$socket =IO::Socket::INET->newt
PeerAddr => Shost,
oI die Couldn't connect to Shost: $e
PeerPort => *daytime*)
Srime =;Sockets act 1ike filehandles.
print $time:
我们当然可以用Perl内建的各种套接字函数（socket、connect、gethostbyname等）来完成这
项工作，但现在的办法简洁得多。让模块来干这些事情吧
加入jaVa编程群：524621833
---
## Page 627
第18章Perl程序设计语言609
3.网络模块
如果你打算用Perl语言来实现系统任务的自动化.就会发现Net:：系列模块的用处。我们刚才
安装的Net:：Telnet模块提供了对telnet会话的访问和控制手段，包括自动化地连接、登录和执行
命令等.类似地，Net:：FTP模块（属于libnet模块组）能够帮助我们自动化地完成FTP任务。下
面是我们从CPAN下载MDS模块的操作过程：
Sftp = Wet::FTP->new(*ftp.cpan.org*) or die *Couldn’t connect: $8n*:
use Net::tTP;
Sftp->1ogin(*anonynous*);