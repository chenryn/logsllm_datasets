        for seg in idautils.Segments():
            if (idc.SegName(seg)).lower()=='.text' or (idc.SegName(seg)).lower()=='text':
                textStart=idc.SegStart(seg);
                textEnd=idc.SegEnd(seg);
            if (idc.SegName(seg)).lower()=='.data' or (idc.SegName(seg)).lower()=='data':
                dataStart=idc.SegStart(seg);
                dataEnd=idc.SegEnd(seg);
            if (idc.SegName(seg)).lower()=='.rdata' or (idc.SegName(seg)).lower()=='rdata':
                rdataStart=idc.SegStart(seg);
                rdataEnd=idc.SegEnd(seg);
        return dataStart,dataEnd,rdataStart,rdataEnd;
###  3.3 编写查找常量
  * 查找函数非常简单，但是有一些点需要注意： 
    1. 常量存储不一定都是BYTE格式，有很大可能是WORD、DWORD乃至QWORD，因此需要能够支持指定数据格式类型的匹配。
    2. 在密码学中我们的索引下标（压缩或扩展变换中使用的数组）都是从1开始的，而在C语言中是从0开始的，所以匹配时需要注意可能存在一个单位的偏移。
    def findCrypt(pattens,size=1):
        # 目前已支持搜索data，rdata段，支持由于C语言数组下标造成的偏移的矫正，支持Crypto的单个数据单位大小指定
        dataStart,dataEnd,rdataStart,rdataEnd=getSegAddr();
        crypt={};
        for key in pattens:
            tmp=pattens[key];
            patten=[0]*size*len(tmp);
            for i in range(len(tmp)):
                patten[i*size]=tmp[i];
            addr_d1=match(patten,dataStart,dataEnd);
            addr_r1=match(patten,rdataStart,rdataEnd);
            # 考虑到C数组从0开始，所以index可能-1
            for i in range(len(patten)):
                if i%size==0:
                    patten[i]-=1;
            addr_d2=match(patten,dataStart,dataEnd);
            addr_r2=match(patten,rdataStart,rdataEnd);
            if (addr_d1&addr_r1&addr_d2&addr_r2)==idc.BADADDR:
                print 'const not found';
            else:
                crypt[key]=addr_d1&addr_r1&addr_d2&addr_r2;
                print 'Find %s in addr %08x'%(key,addr_d1&addr_r1&addr_d2&addr_r2)
        return crypt;
    def match(patten,startEa,endEa):
        if startEa==endEa:
            return idc.BADADDR;
        cur=startEa;
        while cur   * 最终判断出各个函数的调用关系。
## 五、总结
  * 我们成功通过了IDA Python实现了调用图生成，完成了对DES的识别与分析，但是树的代码方面有待优化（本人不是非常擅长这部分，欢迎各位大佬指正与优化），其中难免存在错漏，也欢迎各位大佬们指出。
## 六、参考文献
  * FLIRT 常见库地址 
    * 
    * 
  * IDA Python-book 翻译版地址 
  * DES 算法参考 
  * 调用图绘制 