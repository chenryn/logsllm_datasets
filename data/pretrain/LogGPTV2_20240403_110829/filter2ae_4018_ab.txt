        for i in range(0,n):
            if hash[i]!='0':    #hash值从0到n,如果有不为0的则返回False
                return False
        return True
    def hash_calculate(index,previous_hash,timestamp,transaction,n):#n表示计算难度
        hash=""        #初始化
        nonce=0        #初始随机数
        while True:
            data=str(index)+previous_hash+timestamp+transaction+str(nonce)
            hash=get_hash(data)        #计算hash
            if get_nonce(hash,n):    #获取hash值前n位为0
                return hash,nonce    #计算成功返回hash值和随机数nonce 
            nonce=nonce+1        
    def blockchain(index,previous_hash,timestamp,transaction,hash,nonce):
        print "-----------------------------------------------------"
        print u"第%s个区块信息:" % str(index)
        print u"区块index: %s" % str(index)
        print u"区块previous_hash: %s" % previous_hash
        print u"区块timestamp: %s" % timestamp
        print u"区块transaction: %s " % transaction
        print u"区块hash: %s" % hash
        print u"区块nonce: %d" % nonce
    if __name__=="__main__":
        n=int(sys.argv[1])        #传入计算难度
        #print n
        #data="admin"
        #print get_hash(data)
        #print get_nonce(get_hash(data),n)
        block_transaction=["test1","test2","test3","test4"]        #区块交易数据(transaction)
        #index=0
        previous_hash=""    #创世块，previous_hash为空
        nowtime=time.time()    #获取当前时间戳
        for i in range(0,len(block_transaction)):
            #获取指定格式的时间
            timenow=time.localtime(nowtime)    #获取当前时间，年月日时分秒格式
            thetime=time.strftime("%Y-%m-%d %H:%M:%S",timenow) #指定时间格式
            #print thetime
            hash,nonce=hash_calculate(i,previous_hash,thetime,block_transaction[i],n+i)#后面每个区块难度加1
            #print hash
            #print nonce
            blockchain(i,previous_hash,thetime,block_transaction[i],hash,nonce)
            print u"计算nonce耗时:%d 毫秒"% ((time.time()-nowtime)*1000)    #获取计算时间
            print "-----------------------------------------------------"
            previous_hash=hash
            nonce=0
以下是运行结果
从结果我们可以看到，随着计算难度的增加，计算满足条件的hash所耗的时间会越来越长。
当计算难度n很大的时候，计算hash所需的时间不可想象。这个过程其实就是一个很形象的“挖矿”。
> 在千千万万个节点中，谁先计算出这个满足条件的hash值，谁就获得了记账权，通过把数据打包到区块获得一定的奖励。
在实际的区块链系统中，也是通过去计算某个满足条件的数据来争夺记账权。
## 三、区块链应用
区块链目前被应用在公证类、证券市场、游戏、支付系统、数字加密货币等各大领域。
区块链最典型的应用就是比特币！
## 四、区块链生态安全
不管任何东西，没有绝对的安全，区块链也不例外。
用户的每一笔交易、用户的资产、交易平台的资金，矿池的安全等等，近些年来受到了黑客的无数次攻击，每一次损失的金额都不小。黑客可以攻破整个网络、篡改用户数据、盗取用户身份信息…..
区块链由于本身的特性，它能保证数据的完整性，能够保证数据不被篡改，但并不能完全挡住黑客的攻击。
谈及区块链安全，不应该仅局限于关注区块链本身，它的使用者及它衍生出的东西，我们都需要重点去关注。
* * *
以数字加密货币为例，我们比较关心和重视的问题：
  * 个人安全：用户冷热钱包的保存，私钥的保存，用户自身的安全意识，用户的习惯
  * 交易平台安全：平台系统存在的安全风险，系统稳定性，系统可用性等
  * 矿池安全：云矿池系统存在的安全威胁，外界的安全防护
  * 矿机安全：矿机本身硬件及软件的安全性
  * 区块链底层代码安全：代码可能存在的漏洞风险，以及用户的危险输入等
  * 智能合约安全：智能合约逻辑的正确性，可用性
  * 物理安全：硬件钱包本身的安全
  * 社会工程学：用户、交易平台管理人员、矿池管理人员存在被钓鱼，被社会工程学攻击的风险
  * 权限安全：权限校验，身份验证可能存在的绕过风险
  * ……
* * *
关于智能合约安全，[分布式应用安全项目](https://www.dasp.co/)（DASP）公布了一份安全社区内智能合约 Top10漏洞。
1.重入漏洞  
2.访问控制  
3.算术问题  
4.未检查返回值的低级别调用  
5.拒绝服务  
6.错误随机性  
7.前台运行  
8.时间篡改  
9.短地址攻击  
10.未知的未知物
了解详细漏洞信息请访问官网。
## 五、区块链安全解决方案
以数字加密货币为例，针对可能存在的安全风险，我们可以采用以下的方案：
  * 基础安全建设，提升整体架构的安全性
  * 对交易平台，矿池系统等进行安全评估测试
  * 对数字货币系统进行代码审计
  * 对智能合约实现代码进行安全审计，及时发现存在的风险点
  * 建立安全应急响应中心，及时响应并修复漏洞  
– 建立完善的安全标准和规范
  * 提高用户、从业人员、管理员等的安全意识
  * 定期针对开发人员做安全培训
  * 建立安全监测中心，及时发现问题所在
  * ……
##
## 参考资料