and p = 1/200 as the sampling rate. Clearly the SYN-
pktct MLE is not an unbiased estimator and cannot
capture important features of the original ﬂow size
distribution. On the other hand, the SYN-seq MLE
is not only an unbiased estimator but also has small
standard deviation errors for most ﬂow sizes.
Figure 2 shows a graph with the original ﬂow size dis-
tribution and its estimates using SYN-pktct and SYN-seq
MLEs. The MLE curves show the mean and standard devi-
ation errors of the estimates obtained from 120 independent
runs. The standard deviation errors are computed with re-
spect to the average of the estimates and not to the true
ﬂow size distribution values (cid:2)θ. Observe that although SYN-
pktct MLE exhibits tight standard deviation errors, most
estimates are wrong. Moreover, it does not capture impor-
tant features of the original ﬂow size distribution. Wrong
estimate averages and small standard deviation errors in
the SYN-pktct MLE are indications that the estimator was
able to extract only a small amount of information from the
5 × 109 SYN sampled ﬂows. On the other hand, the SYN-
seq MLE, which adds TCP sequence number information to
the previous estimator, shows itself to be an unbiased esti-
mator (i.e., E[˜θi] = θi , 1 ≤ i ≤ W ) with tight standard
deviation errors. According to the Cram´er-Rao bound, the
SYN-pktct MLE needs at least 1017 SYN samples ﬂows to
achieve a result comparable to the one obtained using the
SYN-seq MLE with 5 × 109 SYN sampled ﬂows.
Note that both SYN-pktct and SYN-seq estimators ne-
glected all sampled ﬂows without a SYN sampled packet,
Figure 3: Flow size distribution estimates obtained
from ALL-pktct and ALL-seq-sﬂag MLEs. We used
120 independent runs with 1.8 × 1010 sampled ﬂows
each and p = 1/200 as the sampling rate. As ex-
pected, 1.8 × 1010 sampled ﬂows is too small of a
sample set for the ALL-pktct MLE to become an un-
biased estimator. The SYN-seq-sﬂags MLE, on the
other hand, substantially improved on the SYN-seq
MLE estimates.
The following experiment uses the parameters given at the
beginning of Section 4.2. Figure 3 shows graphs of the orig-
inal ﬂow size distribution and its estimates obtained from
ALL-pktct and ALL-seq-sﬂag MLEs. Again the estimator
using packet counts (ALL-pktct) was not unbiased and un-
able to capture important features of the ﬂow size distri-
bution. It is interesting to note that the ALL-pktct MLE
seems to ﬁnd an accurate estimate for the fraction of ﬂows
with size one. This accuracy is misleading. On our exper-
iments we found that this “accuracy” is highly dependent
˜(cid:2)θ(0) of the MLE algorithm. We also
on the initial value
found that ALL-pktct MLE estimates E[˜θ1] = 0.32 with
high conﬁdence (the standard deviation errors on the graph
are very small) for the BB-East-2 trace, result similar to the
one obtained on Figure 3 for the BB-East-1 trace. But in
the BB-East-2 case, the true value is θ1 = 0.09, while in the
BB-East-1 trace θ1 = 0.36. This means that estimates from
ALL-pktct and SYN-pktct do not have a strong relationship
with the true distribution values.
Figure 3 also shows that the ALL-seq-sﬂag MLE estimates
are unbiased and have very tight standard deviation errors
for the BB-East-1 trace. Similar results were also obtained
from the BB-East-2 trace. Note that ALL-seq-sﬂag MLE
greatly improves on the SYN-seq MLE estimates for small
ﬂow sizes. Next we show that ALL-seq-sﬂag MLE can be
considered as an eﬃcient estimator and that the Cram´er-
Rao bound is tight.
4.4 An efﬁcient estimator: ALL-seq-sﬂag MLE
Figure 4 shows the mean standard deviation error of ALL-
seq-sﬂag MLE estimates compared to its respective Cram´er-
Rao bound. For a large number of sampled ﬂows (≥ 108)
the Cram´er-Rao bound and the ALL-seq-sﬂag MLE mean
standard deviation error are almost indistinguishable. Thus
the Cram´er-Rao bound is tight and the ALL-seq-sﬂag MLE
appears to be eﬃcient for a large number of samples. For
a much smaller sample set, 260, 000 sampled ﬂows, there
is a small bias on the estimates of the ALL-seq-sﬂag MLE.
The mean standard deviation error that is fairly close to the
Cram´er-Rao bound. Thus, one can argue that the ALL-seq-
sﬂag MLE is an eﬃcient estimator for practical purposes
even when there are only 260, 000 sampled ﬂows.
Figure 4: This graph compares the standard devia-
tion errors of the ALL-seq-sﬂag MLE estimates with
the Cram´er-Rao bound.
The next section evaluates the SYN-seq MLE on an actual
trace.
5. EVALUATION ON NETWORK TRACES
The focus of this section is to evaluate the ﬂow size dis-
tribution estimators in an Internet backbone environment.
We evaluate our algorithms with packet traces from a Tier-
1 ISP’s backbone network. They are collected using IP-
MON, a passive measurement system that captures the ﬁrst
Mean number of samples obtained with h
Samples obtained with approximation
 100000
 10000
 1000
 100
 10
 1
)
r
,
S
(
e
l
p
u
t
h
t
i
w
s
e
l
p
m
a
s
f
o
r
e
b
m
u
N
 0.1
 0
 20
 40
 60
 80
 100
Sample tuple (SYN,r)
Figure 5: Number of sampled ﬂows with label
(S, r), r ≥ 1 obtained from both h drawn syntheti-
cally, and ˜h obtained using the real sampled trace.
Results from the BB-East-2 trace. Packet sampling
rate p = 0.01. This graph shows n ˆd(S,r), the num-
ber of sample tuples (S, r) (from ﬂows with a SYN
sampled packet). Notice that the average is slightly
underestimated.
64 bytes IP packet header of every packet on an optical
link [7]. The BB-East-1 and BB-East-2 traces are from two
OC-48 links between backbone routers on the east coast.
The Access-East trace is from an access link in the east
coast. The statistics of these traces are listed in Table 3.
Internet ﬂows sizes can be on the order of millions of pack-
ets, i.e., MLE equation (15) with W (cid:10) 1 is intractable. Next
we will see how to estimate TCP ﬂow size distributions over
real traces for very large maximum ﬂow sizes W (cid:10) 1.
Trace
Access-East
BB-East-1
BB-East-2
Table 3: Trace Facts
Avg. Rate Active Flows Duration
2 hours
373Mbps
867Mbps
2 hours
2 hours
25Mbps
61,000/sec
140,000/sec
5,000/sec
5.1 Large maximum ﬂow sizes
Unfortunately, our model in Section 2, requires one pa-
rameter for each ﬂow size from 1 to W . One could model the
tail of the ﬂow size distribution as a Pareto model, which
would replace most of the larger ﬂow sizes parameters by
the two parameters of the Pareto distribution. But even
in this case, the estimator still needs to compute sample
probabilities dj and this implies summing a large number of
coeﬃcients (up to W ) on equation (2), with its associated
computational cost.
Fortunately, TCP sequence number MLEs are fairly ro-
bust to mismatches between the modeled maximum ﬂow
size W and the actual maximum ﬂow of the set of ﬂows that
generated the samples. All estimates presented next were
from the BB-East-2 trace.
Mean number of samples obtained with h
Samples obtained with approximation
 1e+06
 100000
 10000
 1000
 100
)
r
,
N
(
e
l
p
u
t
h
t
i
w
s
e
l
p
m
a
s
f
o
r
e
b
m
u
N
 10
 0
 20
 40
 60
 80
 100
Sample tuple (NOSYN,r)
Figure 6: Number of sampled ﬂows with label
(S, r), r ≥ 1 obtained from both h drawn syntheti-
cally, and ˜h obtained using the real sampled trace.
Results from the BB-East-2 trace. Packet sampling
rate p = 0.01. This graph shows n ˆd(N,r), the number
of sample tuples (N, r) (from ﬂows without a SYN
sampled packet). Notice that the average is slightly
overestimated.
5.2 An approximation to h(smin, smax)
Before proceeding to the actual estimation of the ﬂow size
distribution we need to address one last issue. Function h
introduced in Section 3.3.2 takes as arguments two TCP
sequence numbers of two packets in a ﬂow and returns the
number of packets sent between these two packets. Before
we can estimate ﬂow sizes from real Internet traces we need
to approximate h using real Internet sampled ﬂows. We
describe this next.
The baseline for our approximation ˜h(s1, s2) to h(s1, s2)
is to use |s1 − s2| divided by the maximum data segment
transmitted on the ﬂow, where s1 and s2 are two TCP se-
quence numbers of packets belonging to the same ﬂow. The
reasoning here is that while a TCP application has enough
data to send, most TCP protocol stacks will send packets
with data up to the maximum payload size. Most TCP im-
plementations use maximum payload sizes of 1460, 1448 or
536. Notice that we are looking at only one direction of the
ﬂow, i.e., we only have access to one side of the two-way
TCP connection. Unfortunately a good approximation of h
requires enhancements to the baseline approach.
Zero sized packets and modern web browsers present two
diﬃcult issues to resolve in ﬁnding a good ˜h. (1) Since zero
sized packets do not increase the TCP sequence number
counter, they are almost totally invisible to us if not sam-
pled.
(2) Modern web browsers use persistent HTTP 1.1
connections since an user is expected to follow many links
on the same web server. Upon receiving a request for a page,
the web server sends all packets with the same size except
for the last one. The user’s browser keeps the TCP connec-
tion open, and in the event of a new user requested page,
it asks for more data over the same TCP connection. This
creates a TCP ﬂow from possibly many independent ﬂows.
One can argue that these are independent TCP ﬂows and
should be treated as such. However, as they share the same
SYN packet, our model groups them into a single ﬂow.
We ﬁrst deal with the multiple payload size problem. A
sizable amount of the web-servers on the Internet are Linux
machines. Linux machines have an interesting behavior on
their IPID ﬁeld, they are all sequential for a given a TCP
ﬂow (a reference to the many uses of the IPID ﬁeld can be
found on [1]). With distinct payload sizes inside the same
ﬂow, most of them not sampled, |s1 − s2| will likely not give
us a number that is a multiple of the maximum payload
size per packet in the ﬂow.
If these small sized payloads
are not a large fraction of the total number of packets we
can verify whether the number of packets obtained using
the IPID diﬀerence of the packets is close to the number
obtained using Sequence Numbers.
If so, we will use the
IPID diﬀerence.
In most TCP ﬂows the majority of the data is sent in one
direction, i.e., the TCP sequence number diﬀerence on one
direction is much larger than on the other. If most of the
data is being sent in the direction being sampled, we obtain
maximum payload sizes from the sampled ﬂow, by discard-
ing FIN and SYN packets (usually smaller), assuming sam-
pled packets are representative of the unsampled packets.
Otherwise, we denote the ﬂow as a TCP ACK ﬂow. TCP
ACK ﬂows usually have many zero sized packets. One can
estimate the value of h on TCP ACK ﬂows by looking at the
TCP ACK sequence numbers, which are sequence numbers
of the data being sent on the opposite direction of the sam-
pled packets. We keep statistics on the distribution of some
speciﬁc payload sizes (such as sizes 1460, 536) of non TCP
ACK ﬂows and assume that the payload size distribution in
both directions is the same. Using the TCP ACK sequence
numbers and the above mentioned distribution we obtain an
estimate of the value of h.
The above function ˜h is a rather simplistic application of
TCP protocol information; however it works reasonably well
although the proposed estimator can certainly beneﬁt from
a more accurate model of h. We leave the construction of a
better model for future research.
The above observations were made from trace Access-
East, and then tested on BB-East-2. Sampling ﬂows on the
BB-East-2 trace at rate p = 1/100 generates, on average, ap-
proximately 125,000 sampled TCP ﬂows to be used by the
estimator. Figures 5 and 6 show how well we can approx-
imate the sample tuples n ˆd(S,r) and n ˆd(N,r), respectively,
obtained from ˜h over real sampled data from BB-East-2.
Recall that n ˆd(S,r) (n ˆd(N,r)) are the counts of the sampled
SYN (NON-SYN) ﬂows where r = h(s
(u)
max, s
(u)
min).
Note that the use of ˜h results in a slight underestimate of
the number of sampled SYN ﬂows and a slight overestimate
of the number of sampled NON-SYN ﬂows. This matter
needs further investigation but it might indicate that sam-
pled ﬂows are suﬀering from ﬂow splitting [11]. A future
research topic is to account for ﬂow splitting in the model.
In what follows we obtain ﬂow size distribution estimates
from the BB-East-2 trace.
5.3 Evaluation and performance
Using the sampled ﬂow size distribution obtained using ˜h
(Figures 5 and 6), we ﬁnd estimates for the ﬂow size distri-
bution of the ﬂows contained at the BB-East-2 trace. We use
the SYN-seq MLE with maximum ﬂow size W = 50. Fig-
ure 7 shows that the SYN-seq MLE captures some features
of the ﬂow size distribution. Once again, we use ˜θ(0) = 1/W
as the initial guess estimate for the MLE algorithm. The
conjugate gradient algorithm took 85 seconds in average (on
a Mobile Pentium4 2.0GHz processor) to achieve the the es-
timates shown in Figure 7. The ALL-seq-sﬂag MLE with
W = 150 obtains similar but noisier results. The reason
why SYN-seq MLE outperforms the ALL-seq-sﬂag MLE is