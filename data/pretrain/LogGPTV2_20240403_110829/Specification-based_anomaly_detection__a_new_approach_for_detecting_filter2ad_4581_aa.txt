title:Specification-based anomaly detection: a new approach for detecting
network intrusions
author:R. Sekar and
Ajay Gupta and
J. Frullo and
T. Shanbhag and
A. Tiwari and
H. Yang and
S. Zhou
Speciﬁcation-based Anomaly Detection:
A New Approach for Detecting Network Intrusions
R. Sekar, A. Gupta, J. Frullo, T. Shanbhag, A. Tiwari, H. Yang and S. Zhou
Department of Computer Science
Stony Brook University, Stony Brook, NY 11794.
ABSTRACT
Unlike signature or misuse based intrusion detection techniques,
anomaly detection is capable of detecting novel attacks. How-
ever, the use of anomaly detection in practice is hampered by a
high rate of false alarms. Speciﬁcation-based techniques have been
shown to produce a low rate of false alarms, but are not as effective
as anomaly detection in detecting novel attacks, especially when
it comes to network probing and denial-of-service attacks. This
paper presents a new approach that combines speciﬁcation-based
and anomaly-based intrusion detection, mitigating the weaknesses
of the two approaches while magnifying their strengths. Our ap-
proach begins with state-machine speciﬁcations of network proto-
cols, and augments these state machines with information about
statistics that need to be maintained to detect anomalies. We present
a speciﬁcation language in which all of this information can be cap-
tured in a succinct manner. We demonstrate the effectiveness of the
approach on the 1999 Lincoln Labs intrusion detection evaluation
data, where we are able to detect all of the probing and denial-of-
service attacks with a low rate of false alarms (less than 10 per day).
Whereas feature selection was a crucial step that required a great
deal of expertise and insight in the case of previous anomaly de-
tection approaches, we show that the use of protocol speciﬁcations
in our approach simpliﬁes this problem. Moreover, the machine
learning component of our approach is robust enough to operate
without human supervision, and fast enough that no sampling tech-
niques need to be employed. As further evidence of effectiveness,
we present results of applying our approach to detect stealthy email
viruses in an intranet environment.
Categories and Subject Descriptors
K.6.5 [Security and Protection]:
C.2.3 [Network Operations]: Network monitoring
Unauthorized access;
General Terms
Security, Management
Keywords
Intrusion detection, anomaly detection, network monitoring
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’02, November 18–22, 2002, Washington, DC, USA.
Copyright 2002 ACM 1-58113-612-9/02/0011 ...$5.00.
1.
INTRODUCTION
Intrusion detection approaches can be divided into misuse de-
tection, anomaly detection and speciﬁcation-based detection. Mis-
use detection techniques detect attacks as instances of attack sig-
natures. This approach can detect known attacks accurately, but is
ineffective against previously unseen attacks, as no signatures are
available for such attacks.
Anomaly detection overcomes the limitation of misuse detec-
tion by focusing on normal system behaviors, rather than attack
behaviors. This approach is characterized by two phases: in the
training phase, the behavior of the system is observed in the ab-
sence of attacks, and machine learning techniques used to create a
proﬁle of such normal behavior. In the detection phase, this pro-
ﬁle is compared against the current behavior of the system, and
any deviations are ﬂagged as potential attacks. Unfortunately, sys-
tems often exhibit legitimate but previously unseen behavior, which
leads anomaly detection techniques to produce a high degree of
false alarms. Moreover, the effectiveness of anomaly detection is
affected greatly by what aspects (also called “features”) of the sys-
tem behavior are learnt. The problem of selecting an appropriate
set of features has proved to be a hard problem.
Speciﬁcation-based techniques are similar to anomaly detection
in that they also detect attacks as deviations from a norm. However,
instead of relying on machine learning techniques, speciﬁcation-
based approaches are based on manually developed speciﬁcations
that capture legitimate (rather than previously seen) system behav-
iors. They avoid the high rate of false alarms caused by legitimate-
but-unseen-behavior in the anomaly detection approach. Their down-
side, however, is that development of detailed speciﬁcations can be
time-consuming. Thus, one has to trade off speciﬁcation develop-
ment effort for increased false negatives (i.e., likelihood that some
attacks may be missed).
Given the complementary nature of the strengths and weaknesses
of anomaly and speciﬁcation-based approaches, a natural question
is whether the two approaches can be combined in such a way that
we can realize the combination of their strengths, while avoiding
the weaknesses of either one. We answer this question afﬁrma-
tively in this paper by developing a new and effective network in-
trusion detection technique that combines these two approaches.
We demonstrate the effectiveness of our approach using experi-
ments involving the 1999 Lincoln Labs Intrusion detection data
[7]. As further evidence, we also summarize the results of using
our approach in a very different context, namely, detection of email
ﬂooding attacks due to viruses.
1.1 Overview of Approach
The ﬁrst step in our approach is to develop speciﬁcations of hosts
and routers in terms of network packets received or transmitted by
265pkt(ext_ifc, p)|p.dst == gateway
INIT
pkt(ext_ifc, p)|p.dst != gateway
src = p.src, dst = p.dst
PKT
RCVD
pkt(ext_ifc, p)|(p.src = src)
         && (p.dst == dst)
DONE
timeout()
Figure 1: Simpliﬁed IP Protocol State Machine
them. These speciﬁcations are derived from RFCs or other descrip-
tions of protocols such as the IP, ARP, TCP and UDP. Consider a
gateway node that connects an organization’s local network to the
Internet. Figure 1 is a pictorial representation of a speciﬁcation
characterizing the gateway’s behavior, as observed at the IP pro-
tocol layer. The ﬁgure incorporates the following simpliﬁcations:
no IP fragmentation is modeled, and only packets from the Inter-
net (but not those sent to the Internet) are captured. These packets
may be destined for the gateway itself, in which case the state ma-
chine makes a transition from the INIT to DONE state. Otherwise, a
packet may be destined for an internal machine, in which case the
gateway will ﬁrst receive it on its external network interface, and
make a transition from the INIT to PKT RCVD state. Next, it will
relay the packet on its internal network interface, making a transi-
tion to the DONE state. Occasionally, the relay may not take place.
This may be due to a variety of reasons, including (a) the gateway
could not resolve the MAC address corresponding to the IP address
of the target machine, (b) the gateway machine is malfunctioning,
etc. We model such situations with a timeout transition from the
PKT RCVD state to the DONE state.
As shown in Figure 1, speciﬁcations are based on extended ﬁnite
state automata (EFSA). An EFSA is similar to a ﬁnite-state automa-
ton, with the following differences: (a) an EFSA makes transitions
on events that may have arguments, and (b) it can use a ﬁnite set
of state variables in which values can be stored. In the ﬁgure, we
see two events, namely, pkt and timeout. The former event de-
notes the reception or transmission of a packet. Its ﬁrst argument
identiﬁes the network interface on which the packet was received
or transmitted. Its second argument captures the packet contents.
The timeout denotes a time out transition, which will be taken if
no other transitions are taken out of a state for a predeﬁned period
of time. The IP state machine uses two state variables src and
dst. These variables are used to store the source and destination
IP addresses seen in a packet arriving on the gateway’s external in-
terface. By using these state variables, the state machine is able to
match a packet received on the external interface with the corre-
sponding packet (when it is relayed) on the internal interface.
To understand how such EFSA speciﬁcations can be used for
monitoring protocol behavior, consider the IP state machine again.
For each IP packet received on the external network interface, we
create an instance of the IP state machine that is in the INIT state,
and add this instance to the list of active IP machine instances.
Next, the packet is given to every IP state machine instance in this
list, and each of them that can make a transition on this packet is
permitted to do so. Any state machine that reaches the DONE state is
deleted from the list. Thus, when monitoring protocol behavior, we
create many instances of the state machine, each of which traces a
path in the EFSA from the INIT to the DONE state. (A trace is char-
acterized by a sequence of states, where “state” includes not only
the control state of the automata (e.g., DONE, PKT RCVD and DONE)
but also the values of state variables.)
Now, we superimpose statistical machine learning over this spec-
iﬁcation as follows. Note that the EFSA speciﬁcations map the
statistical properties of the IP packet stream to properties of traces
accepted by the EFSA speciﬁcations. Thus, we can characterize
the statistical properties of the IP packet stream in terms of:
(cid:15) the frequency (across traces) with which a particular transi-
tion in the EFSA is taken, e.g., the frequency with which the
timeout transition is taken
(cid:15) the most commonly encountered value of a state variable at a
particular control state of the EFSA, e.g., the most common
value for the dst state variable at the PKT RCVD state. (This
value would correspond to the IP address to which maximum
number of IP packets are received from the Internet.)
(cid:15) the distribution of values of a state variable, e.g., how fre-
quently does the protocol ﬁeld (in the IP header) have the
value TCP, UDP, etc.
In addition, we may be interested in statistical properties across a
subset of traces, rather than all traces. The traces of interest can
be speciﬁed on the basis of state variable values. For instance, we
may be interested in the number of IP-packets being relayed by
the gateway to a particular local machine . We will do this by
selecting traces that have dst equal to  in their PKT RCVD state,
and identifying the number of times the transition from PKT RCVD
to DONE was taken in these traces1. A second, orthogonal way to
select a subset of traces is based on time: we may be interested in
traces that were observed within the last T seconds.
Based on learning statistical properties associated with the IP-
state machine, we could detect several kinds of attacks. We de-
scribe the detection of IP sweep attack in particular, as the detection
mechanism is quite interesting. Typically, detection of IPsweep at-
tack requires an IDS to incorporate knowledge about IPsweeps at
some level. Often, a particular statistic is designed that speciﬁ-
cally targets IPsweep, e.g., the number of different IP addresses for
which packets were received in the last  seconds for some suitably
small value of . Once this is done, there is no surprise that the
attacks can be detected fairly accurately, based on anomalies in this
statistic. In contrast, we do not encode any knowledge about IP-
sweeps in our approach. Nevertheless, we are able to detect them
as follows. Since an IPsweep attack is designed to identify the IP
addresses in use on a target network, the attacker does not know
legitimate IP addresses in the target domain at the time of attack.
This implies that several packets will be sent by the attacker to
nonexistent hosts. This would result in a sudden spurt of timeout
transitions being taken in the IP state machine. Thus, the statistics
on the frequency of timeout transitions from the PKT RCVD state
can serve as a reliable indicator of the IPsweep attack.
1More powerful primitives for trace selection are possible, but not
necessary — a complex selection condition can be directly incorpo-
rated into the EFSA as follows: introduce a new state variable that
records the outcome of testing this condition. Now, the complex
selection criteria reduces to that of selecting those traces where this
new state variable has the value 	e.
2661.2 Beneﬁts of Approach
Our approach:
(cid:15) provides accurate attack detection. Our experimental results
illustrate that our approach provides:
– excellent detection of known and unknown attacks. Al-
though there have been questions about the realism with
the 1999 Lincoln Labs evaluation data, it is neverthe-
less remarkable that our approach can identify all of
the attacks that were within the scope of our system.
The detected attacks include very stealthy attacks, e.g.,
port sweeps that involve 3 packets from two different
hosts. As further evidence of effectiveness, we provide
preliminary results in a very different context, namely,
for detecting anomalies caused by email viruses.
– low false alarm rates. Our system generated, on the
average, 5.5 false alarms per day. This is at the low
end of the false alarm rates reported in the 1999 eval-
uation, even when misuse detection based approaches
(which traditionally have had much lower false alarm
rates compared to anomaly detection) are taken into ac-
count.
(cid:15) simpliﬁes feature selection. One of the difﬁculties in anomaly
detection is the choice of parameters that should be learnt.
With network packet data, there is a large number of parame-
ters, with many parameters assuming values from very large
sets. Moreover, attack detection often requires one to con-
sider sequences of packets. Note that the number of pos-
sible parameter combinations across packet sequences in-
creases rapidly with sequence length — for instance, if a
single packet has 10 parameters of interest, a sequence of
3 packets has a total of 103 possible parameters. Select-
ing a small set of parameters from such an extremely large
space of parameters is a challenging problem.
In our ap-
proach, properties of sequences are mapped into properties
associated with individual transitions in the state machines.
This enables us to detect most attacks by simply monitoring
the distribution of frequencies with which each transition is
taken.
(cid:15) employs redundancy to improve attack detection. Our ap-
proach tends to learn very detailed information about many
different characteristics of network protocols. Although most
attacks can be detected by looking at a fraction of these char-
acteristics, the redundant characteristics beneﬁt in two ways:
– An attack would likely change at least a subset of the
large set of characteristics being monitored. Thus, the
redundancy provides a “safety cushion” against making
a poor choice of characteristics to monitor, or inadequa-
cies in the learning algorithms.
– It becomes much harder to craft evasive attacks, wherein
an attacker attempts to carry out an attack without per-
turbing the parameters and features being monitored.
Clearly, it is much harder to craft attacks that preserve
many different characteristics and features of the sys-
tem, as opposed to just a few.
(cid:15) supports unsupervised learning. Our approach is robust enough
to accommodate unsupervised learning, i.e., the information
learnt at the end of the training phase does not need to be
inspected or modiﬁed by a human before it is used for detec-
tion2.
In summary, our approach enables seamless combination of anomaly
detection and speciﬁcation-based detection. The combination pro-
vides signiﬁcantly more value than the “sum of its parts,” as many
attacks undetectable by either of those approaches become detectable
using our approach. At the same time, the false alarm rate is con-
tained at a low level. Preliminary performance measurements (which
are preliminary in the sense that no systematic attempt to improve
performance has been undertaken so far) indicates that our im-
plementation provides adequate performance, processing an entire
day’s data (about 0.7GB) in under ten minutes.
1.3 Organization of the Paper
In Section 2, we present a summary of our speciﬁcation lan-
guage. The language is designed to enable concise speciﬁcations
of protocols. We illustrate the language with a complete speciﬁca-
tion of the IP state machine shown in Figure 1. Further discussion
of speciﬁcation development process appears in Section 3, together
with a discussion of our TCP state machine speciﬁcation. Section 4
describes how anomaly detection is mapped onto these speciﬁca-
tions. Section 5 describes our experimental results with the 1999
Lincoln Labs data. We used state machine models of IP and TCP
protocols in this experiment. Section 5.2 provides a short descrip-
tion of a second experiment where our approach was used to detect
email viruses. Comparison with related work appears in Section 6.
Finally, concluding remarks appear in Section 7.
2. STATE-MACHINE LANGUAGE
As mentioned earlier, network protocols are modeled using ex-
tended ﬁnite state automata (EFSA), which augment traditional FSA
with a set of state variables. Formally, an EFSA  is a septuple
; 	; ; f; V; D; Æ, where:
(cid:15)  is the alphabet of the EFSA. It is an event alphabet, i.e.,
elements of  are characterized by an event name as well as
event arguments.
(cid:15) 	 is a ﬁnite set of states (also called as control states) of the
EFSA