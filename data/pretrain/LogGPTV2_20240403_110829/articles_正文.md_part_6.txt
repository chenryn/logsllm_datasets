因此，在采集大量小文件时需要注意以下几点：
（1）严格控制CPU和内存的使用。
（2）将Agent的文件描述符分配得多一些（这需要在Agent端进行控制），采集完成之后迅速释放文件描述符。Agent不要持有长时间的文件句柄。
### 4.2.5 其他日志采集问题
上面几个问题是日志采集过程中比较常见的问题，但因为每个用户的使用环境不一样，可能还会有其他需求，例如：
（1）为了节省带宽，需要对发送端进行限流。
（2）为了一次性发送更多事件，需要让发送端对日志进行压缩后发送。
（3）为了保证传输安全，需要对日志进行加密后发送。
（4）为了实现跨不同网络的传输，需要对发送端使用代理方式，由一个发送端进行集中发送。
在上面这些需求的实现过程中，出现问题的概率较小，只在某些特定环境下需要关注。
## 4.3 小结
本章主要介绍了常见的日志采集方式，探讨了每种采集方式的优缺点及适用环境。用户可以根据实际使用环境来进行选择，选择好之后需要注意在采集过程中可能遇到的问题（尤其是Agent采集）。日志采集最关键的一点是不影响业务系统的使用。
第5章 字段解析
>  字段的概念
>
>  通用字段
>
>  字段抽取
>
>  schema on write与schema on read
>
>  字段解析常见问题
>
>  小结
在了解了日志采集过程之后，本章将介绍日志的解析方法。如果说日志是一段文本，记载着计算机每天所做的各类工作和运行状态，那么字段就是其中有意义的单词或短语。字段解析就是把日志中的字段提取出来并进行分析。
字段解析是日志分析的重要步骤，也是众多其他日志处理方法的前提。
## 5.1 字段的概念
通常来说，日志是某些操作及其结果的集合，它们按照时间排序。这些信息都可以作为字段被提取出来。以下面这条日志记录为例：
192.168.1.103 - - \[01/Aug/2014:12:07:39 +0800\] \"GET / HTTP/1.1\\\"
200 3228 \"-\" \"Mozilla/4.0 (compatible;
MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727;
.NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322;
.NET4.0C)"
可抽取的部分字段如下：
 client_ip：192.168.1.103
 timestamp：01/Aug/2014:12:07:39+0800
 method：GET
 status：200
 resp_len：3228
 os：Windows NT 5.1
可以直观地看到，该日志记录中包含了日志来源地址、日志产生的时间戳、请求方式、状态码、消息长度、系统描述等信息。这些就是从日志记录中抽取的字段，它们有特定的含义。
不同的字段对于不同的管理人员有不同的意义。对应上面的例子，对于网络管理员来说，他可能比较关注浏览器版本（如MSIE
8.0）、操作系统（如Windows NT
5.1）等字段；而对于数据库管理员来说，他可能比较关注某类数据库信息，如与MySQL相关的信息。
## 5.2 通用字段
日志来源不同会导致日志内容也有所不同，但有些字段是存在于大多数日志中的，它们包含日志产生的基本信息，称为通用字段。本节将对部分通用字段进行阐述。
### 5.2.1 时间戳
时间戳表示日志产生的具体时间，通常包含年、月、日、时、分、秒，有时还包含时区。例如：
2017-06-08T11:29:29.209Z
上述示例是标准的XML
Schema日期型数据格式。T表示后面跟着时间。Z代表0时区，也称UTC统一时间（UTC通用标准时）。
值得注意的是，时间戳有各种各样的格式。
 若采用ISO 8601标准的格式，则形式如FriJul0521:28:242013ISO8601。
 若采用UNIX系统的格式，则形式如1412899200.000。
### 5.2.2 日志来源
日志来源表明日志从哪里来。机房中的各种软件（系统、防火墙等）和硬件（交换机、路由器等）都在不断地生成日志，都可能成为日志来源。根据日志采集方式分类，基于推送方式的日志来源主要有Syslog、SNMP、Windows等，基于拉取方式的日志来源有Checkpoint防火墙日志、MySQL数据库日志等。
下面列出了一些常见的日志来源。
 操作系统：记录操作系统的各种活动信息，如Linux系统的登录信息。
 网络守护进程：记录各类网络连接服务的消息。
 应用程序：记录应用程序用户的活动信息。
### 5.2.3 执行结果
日志通常会表明相应的系统活动是成功还是失败，并给出提示信息。下面的示例就是明确的报错信息，表示数据库连接失败。
ERROR: DB connection error!
### 5.2.4 日志优先级
日志优先级代表日志消息的重要性，用户可以根据需求解析不同等级的日志。以Apache的一个开源项目Log4j为例，Log4j定义了8种日志级别，优先级从高到低依次为OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE、ALL。
>  ALL：最低级别，用于打开所有日志记录。
>
>  TRACE：很低的日志级别，一般不会使用。
>
> 
> DEBUG：指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中输出一些运行信息。
>
> 
> INFO：在粗粒度级别上突出强调应用程序的运行过程，主要用于生产环境中输出程序运行的一些重要信息。
>
> 
> WARN：表明会出现潜在错误的情形，有些信息不是错误信息，但也要给程序员一些提示。
>
>  ERROR：指出虽然发生错误事件，但不影响系统继续运行。
>
>  FATAL：指出某个严重的错误事件将导致应用程序退出，级别比较高。
>
>  OFF：最高级别，用于关闭所有日志记录。
值得注意的是，当解析某个级别的日志时，比该级别高的所有日志也会被解析出来。例如，如果优先级设置为WARN，那么OFF、FATAL、ERROR、WARN四个级别的日志都在输出范围内。
## 5.3 字段抽取
获取日志中字段的过程称为字段抽取，这是字段解析的第一个步骤。
### 5.3.1 日志语法
在进行字段抽取之前，先要了解日志语法。
任何格式的日志文件都具有语法。日志语法在概念上与人类语言（如英语）的语法相似。人类语言中的句子通常包含主语、谓语、宾语、补语、定语等。了解日志语法后，就能将日志分解成各个组成部分，便于之后的日志抽取和分析。
下面试着对Syslog的单条记录做一次语法分析，例如：
SERVERS.NET class 1 do not match hint records
这里，"主语"是class，"谓语"是match，"宾语"是records。
不同的日志类型有不同的日志语法，实际应用中应选择比较好的日志语法。换句话说，应当使用一种能够尽可能提供完整、清晰信息的日志结构。那么，什么是比较好的日志语法呢？由于不同的日志有不同的使用场景，因此很难定义哪些具体的字段是一定有用的，但通用的判断标准可参考1.2.3节的内容。
### 5.3.2 字段抽取方法
1\. 简单的字段抽取
简单的字段抽取可根据字段已知的开始和结束位置，抽取该字段的值。
应用编程语言的字符串处理函数就是一个很好的例子，如Python中的slice函数：
slice(start,stop)
给定参数start和stop，即可对日志文本进行截取，从而获得指定位置的信息。
2\. 正则表达式
正则表达式，又称规则表达式（Regular
Expression，RE），是计算机科学中的一个常用概念。正则表达式描述了一种字符串匹配模式，可以用来检查某个字符串中是否含有某种子串，并将匹配的子串替换或抽取出来。许多程序设计语言都支持正则表达式。
在日志解析过程中，正则表达式可用于提取符合某种定义模式的字段，尤其是在了解日志相应的语法结构后。
假设有这样一条日志：
2014-05-14 23:24:47 15752 \[Note\] InnoDB: 128 rollback segment(s) are
active
如果希望抽取以下字段：timestamp、pid、loglevel和message，可以配置如下正则表达式：
(?\\\S+\\S+)(?\\\S+)\\\[(?\\\S+\\\](?\.\*)
其中，\\S表示匹配非空格字符；\\S+表示匹配连续的非空格字符；（?\value)表示提取名称为key的字段，其值为value。利用上述正则表达式可解析出如下结果。
 timestamp：2014-05-14 23:24:47
 pid：15752
 loglevel：Note
 message：InnoDB: 128 rollback segment(s) are active
3\. 含义解析
有些字段除了本身的含义，对其还可以进一步解析出字段值所代表的含义。例如，根据日志中的手机号码或固定电话号码信息，可进一步解析出城市、运营商归属地等信息。
还有一些字段本身具有特殊的语法结构，列举如下。
1）URL字段
URL有固定的格式，可以表明当前链接使用哪种网络协议，以及服务器名称等。例如：
https://tower.im/attachments/472615098d4d4d3d87e5662fe842effe/preview?t=0
2）CSV字段
针对CSV格式的日志解析，可以将字符串按照固定分隔符进行切分，例如：
192.168.1.21, mobile_api, admin,13800000000
可以根据","对其进行切分，然后定义切分后的字段名称列表为ip, application,
admin, telephone。
3）XML字段
XML是一种标记语言，具有特殊的信息符号------标记。
例如，\就是一个标记：
\Don\'t forget the meeting!\
4）Syslog日志中的字段
对于Syslog日志中的PRI部分，可以进一步解析出Severity和Facility字段。下面是一条Syslog日志：
\Feb 8 10:00:50 beast logmask\[1833\]: informative message, pid =
1833
其中，\是PRI部分，将数字30转换成二进制后，其低3位表示Severity，剩下的高位部分右移3位就表示Facility。
4\. key-value解析