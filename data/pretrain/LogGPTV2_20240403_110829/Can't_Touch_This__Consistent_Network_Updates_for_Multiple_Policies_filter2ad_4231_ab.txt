1
and π(2)
and π(2)
1 , π(2)
1 , π(1)
2 ) is
2 ) in orange;
Example: Figure 1 shows an example of a concurrent
policy update of two policies: at the top, update (π(1)
shown in black, at the bottom, update (π(2)
the old policies (π(1)
1 ) are drawn using solid lines, the
new policies (π(1)
2 ) using dashed lines. Let us ﬁrst just
have a look at the black policy update. The old policy traverses
the nodes from v1 to v4 in numerical order, whereas the new
policy traverses them in the following order: v1, v3, v2, v4.
In order to guarantee a loop-free update, we need to make
sure that the update on v2 is installed before we send out
the update for v3; otherwise we risk a loop between the two
nodes. Let us now focus on the orange policy update, in
which the nodes are traversed in exactly the opposite order (in
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:41 UTC from IEEE Xplore.  Restrictions apply. 
the old and the new policy), and thus, for the orange policy
we need to update v3 before we update v2. In a concurrent
update of these two policies, we are forced to choose one
of the nodes (v2 or v3), and to send only one update (for a
single policy) to break the cycle. This means that we need an
extra interaction round (or touch) for this node, to install the
= {v3} for
update for the second policy in a later round. This leads to a
possible update schedule of U (1)
={v2} for
the black policy and U (2)
is: U1 = {v1, v2, v4}, U2 = {v3}, U3 = {v2} showing that v2 is
the orange policy. The overall update schedule therefore then
= {v1, v2}, U (1)
={v3}, U (2)
={v4}, U (2)
1
2
1
2
touched twice.
3
Goal: Minimum Number of Touches: Interactions with a
node come at a certain cost, resource- and time-wise [2],
[18], [43], and should be minimized. Accordingly, we are
interested in schedules which jointly optimize the updates of
multiple (namely k) policies, in such a manner that the number
of interactions with nodes, henceforth also called touches, is
minimized. That is, while when reasoning about consistency,
we focused on individual update schedules, we now want to
jointly optimize the possible individual ri-round policy upate
ri , to form a global
schedules U (i) = U (i)
schedule U = U1∪ U2∪ . . .∪ UR, where Ui is the set of nodes
Our objective is to minimize ∑i∣Ui∣, where Ui denotes
which are updated in round i. The Ui sets do not have to be
disjoint: switches may be touched multiple times.
2 ⊍ . . . ⊍ U (i)
1 ⊍ U (i)
the set of nodes which are updated in round i. Observe
that a solution to our problem always exists: we can simply
concatenate the individual policy schedules. However,
the
resulting number of touches is high: each node is touched
k times, once for each policy. It is also easy to see that it
is not always possible to align the k policy updates in such
a manner that each node is only touched once: in order to
preserve consistency for the individual policy updates, in the
global schedule U, nodes may occur repeatedly, in multiple
rounds as seen in Figure 1.
Example: Let us give an example. Figure 2 shows the
construction of a worst case scenario, henceforth called multi-
touch lock, requiring a maximal number of touches. Our
example is for four concurrent policy updates. Each policy
update consists of a source and a destination node on the
outside, as well as the four nodes in the center of the ﬁgure.
The order in which the nodes in the center are traversed in
the new policy is exactly the reversed order in which they are
traversed in the old policy. This leads to a chain of backward
edges, e.g., the policy from v1 to v11 traverses the nodes in
the order v4, v5, v9, v8 whereas the nodes in the new policy
are traversed as v8, v9, v5, v4. Hence, the nodes need to be
updated one by one in a given order. Since the other policy
updates have a similar structure, they also require a certain
order of node updates. An update with a minimum number
of touches always needs as many extra touches as there are
different policies: thus, we need to touch four nodes twice.
Edge/Node Classiﬁcation: We introduce the following use-
2 ),
ful edge (resp. node) classiﬁcation. For each edge or equiva-
1 , π(i)
2 ), depending on whether the new
we deﬁne a direction forward resp. backward with respect to
lently node, and with respect to each policy update(π(i)
a policy update (π(i)
edge (according to π(i)
2 ) points in the same direction as the
1 , π(i)
Fig. 2: Construction of a multi-touch lock. Four concurrent
policy updates are shown in different colors, the old policies
are shown using solid lines, and the new policies are shown
using dashed lines of the same color.
old policy (according to π(i)
1 ), or in the opposite direction.
As we will see, this distinction is useful as it is often safe to
update any number of forward-pointing edges as they cannot
introduce loops, while it can be harmful to update backward
edges.
2
1
As we will see, it is useful to classify edges not only for
to π(i)
update schedules from π(i)
2 , but also “looking backward
in time”, from π(i)
to π(i)
1 . Given this perspective, we can
classify the old (solid) rules as backward or forward relative
to the new ones (dashed): we just need to draw the new
route as a straight path and see, if the old rule points forward
or backward. Accordingly, we propose two-letter codes to
describe the edges resp. nodes with respect to each policy
2 )—the ﬁrst letter will denote, whether the
update (π(i)
outgoing dashed edge of π(i)
(B) with respect
describe the old edge relative to the new path.
2 points forward (F) or backward
the second letter will
1 . Similarly,
1 , π(i)
to π(i)
For example, consider the black policy in Figure 1. With
respect to this policy, v1 is an FF node: the dashed edge points
forward w.r.t. the solid policy (F⋅), but also the solid edge
points forward w.r.t. the dashed policy (⋅F). Similarly, v2 is
FB and v3 is BF.
It is easy to see that in the ﬁrst update round, we can
safely update any subset of rules which are either FF or FB:
a forwarding edge can never introduce a loop. By symmetry,
2 )
a similar observation holds for the last round: Consider an
1 , π(i)
1 ).
2 , π(i)
Accordingly, in the last round, we can safely update any subset
of rules which are either BF or FF, just like in the ﬁrst round
2 ). The last round of updating (π(i)
update (π(i)
can be seen as the ﬁrst round of an update (π(i)
1 , π(i)
135
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:41 UTC from IEEE Xplore.  Restrictions apply. 
where we can update any FB or FF.
In summary, for each node resp. each link and each
policy, we deﬁne a 2-letter code. As a node can be involved
in multiple policies, we can concatenate the 2-letter codes
of the different policies to fully characterize the node. For
example, in case of two policies, we will have nodes of the
form (F∣B)4= {FFFF,FFFB, . . .}. The ﬁrst two letters denote
the orientation regarding the ﬁrst policy and the last
two
letters denote the orientation regarding the second policy. For
example, in Figure 1, v2 is FB in the black policy and BF in
the orange policy, so overall it is FBBF.
III. COMPUTATIONAL HARDNESS
In this section we will prove that optimizing the number
hard. We ﬁrst
Supersequence (SCS) problems,
leverage a connection to Shortest Common
the problem
of touches, when the number of rounds is constrained, is NP-
is computationally hard already for three policies (k = 3),
principle be updated in two rounds (ri = 2 ∀i). We then
problem is even hard for two policies (k = 2) which could be
updated in two rounds each (ri = 2 ∀i), by a reduction from
which individually (without optimizing the touches) could in
present our main technical result, a theorem stating that the
to show that
Max-2SAT [19].
A. Hardness for 3 Policies
Interestingly, the problem of ﬁnding an update schedule
which minimizes the node interactions in an n-node network is
already computationally hard for k = 3 policies, which could in
principle be updated consistently in a R = 2-round schedule. In
this section, we ﬁrst establish a connection to the SCS problem,
limited to instances in which each sequence has length 2 and
each character appears in at most 3 sequences. We will refer
to this problem by SCS(2, 3).
two sequences X = (x1, . . . , x(cid:2)1) and Y = (y1, ..., y(cid:2)2), a
sequence s = (u1, . . . , u(cid:2)3) is a common supersequence of X
Generally, the SCS problem is deﬁned as follows. Given
and Y if s is a supersequence of both X and Y : X and Y can
be derived from s by deleting some elements without changing
the order of the remaining elements. A shortest common
supersequence is a common supersequence of minimal length.
is the shortest supersequence. The SCS(2,3) problem variant
where each sequence has length two and each character
For example, for X = abcbdab and Y = bdcaba, s= abdcabdab
appears in at most 3 sequences was proven to be NP-hard
only k = 3 policies, so that each policy will consist of sequen-
to encode sequences using
In our reduction we want
by Timkovskii [40].
tially connected graphs, each representing one sequence. As
we want to optimize the number of touches, in the reduction,
we can focus on schedules where in each round only one node
is updated. Under these assumptions updating a schedule is a
sequence of nodes.
As an example, and to show the relationship to super-
sequence problems, let us consider the policy presented on
Figure 3. In this instance, node w must be updated after node v:
otherwise it will violate loop-freedom. Thus, a valid schedule
is a supersequence of the sequence vw.
136
We will use this graph as a gadget representing sequences
in the reduction, that is for each sequence vw we will create
the graph in Figure 3 to force that v is updated before w. In
the policy we will connect these gadgets sequentially in an
arbitrary order.
Because any node may appear at most once in each policy,
we need to partition sequences into 3 sets, such that no
character appears twice in one set. For some instances such a
partition does not exist, and we will need the following lemma.
be any sequence in S. Then, let x be a new character (i.e., no
Lemma 1. Let S be an instance of SCS(2, 3) and let w = ab
sequence contains x) and let S′ = S ∖{w}∪{ax, xb}. Then,
of length k+ 1.
S has a supersequence of length k iff S′ has a supersequence
Proof: First, let us assume that s is a supersequence of S
of length k. Then, in s there is some character a, which is
before some character b (there may be many occurrences of a
and b, but there is at least one pair, such that a is before b).
We add x immediately after a, and hence, this new sequence
is a supersequence to all sequences in S and both ax and xb.
Now let us assume that s′ is a supersequence of S′ of
●
length (cid:3). We consider two cases:
There is exactly one occurrence of x in s′. Then in s′
there is an a before this x and a b after it, so s′ is a
supersequence to w. Therefore, if we remove x from s′
we get a supersequence of S of length (cid:3)− 1.
There are at least two occurrences of x in s′. Then, we
add a at the beginning of s′ and remove all occurences
of x. Such a sequence is a supersequence of ab, and
in consequence of S, and has length at most (cid:3)− 1.
●
We proceed to create the policies as follows. We will
consider sequences in arbitrary order. Let w = ab be any
sequence. Then, if there is a policy without a and b we create
a gadget for this sequence in this policy. Otherwise we create a
new character x and two new sequences ax and xb. According
to Lemma 1, after this change, we will be able to retrieve a
shortest supersequence for the original problem.
In this situation we need to ﬁnd policies where we can
include the gadgets for ax and xb. We have created at most
two gadgets with letter a, because there are at most three
occurrences of a in total. Therefore there is at least one policy
without a, and we create a gadget for ax in it. Similarly, there
is at least one policy without b, hence, we create a gadget
for xb in it. Since, there was no policy without both a and b
(as otherwise we would have created a gadget for ab in this
policy), there is no policy with two repetitions of x (since we
included the gadgets in two different policies). The length of
the schedule is equal to the number of touches, and hence, this
schedule is also a shortest supersequence.
B. Hardness for 2 Policies
With these intuitions in mind, we now present the main