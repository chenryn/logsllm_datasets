### Concurrent Policy Update and Optimization

#### Example: Concurrent Policy Update
Figure 1 illustrates a concurrent policy update for two policies, \(\pi(1)\) and \(\pi(2)\). The old policies are shown in solid lines, and the new policies are in dashed lines. 

- **Black Policy (π(1))**:
  - Old Policy: Traverses nodes \(v_1\) to \(v_4\) in numerical order.
  - New Policy: Traverses nodes in the order \(v_1, v_3, v_2, v_4\).
  - To ensure a loop-free update, the update on \(v_2\) must be installed before the update for \(v_3\).

- **Orange Policy (π(2))**:
  - Old Policy: Traverses nodes in numerical order.
  - New Policy: Traverses nodes in the reverse order.
  - For the orange policy, the update on \(v_3\) must be installed before the update for \(v_2\).

In a concurrent update of these two policies, we must choose one of the nodes (\(v_2\) or \(v_3\)) and send only one update to break the cycle. This requires an extra interaction round (or touch) for the node to install the update for the second policy in a later round.

- **Update Schedule**:
  - Black Policy: \(U(1) = \{v_1, v_2, v_4\}, U(2) = \{v_3\}, U(3) = \{v_2\}\)
  - Orange Policy: \(U(1) = \{v_1, v_2\}, U(2) = \{v_3\}, U(3) = \{v_4\}\)

#### Goal: Minimizing the Number of Touches
Interactions with a node come at a certain cost in terms of resources and time. Therefore, we aim to optimize the update schedules for multiple policies to minimize the number of interactions (touches) with nodes.

- **Objective**: Minimize \(\sum_{i} |U_i|\), where \(U_i\) is the set of nodes updated in round \(i\).
- **Constraints**:
  - The sets \(U_i\) do not have to be disjoint; switches may be touched multiple times.
  - A solution always exists by concatenating individual policy schedules, but this results in each node being touched \(k\) times.
  - It is not always possible to align the \(k\) policy updates such that each node is only touched once due to consistency requirements.

#### Example: Multi-Touch Lock
Figure 2 shows a worst-case scenario called a multi-touch lock, requiring a maximal number of touches for four concurrent policy updates. Each policy update involves a source and destination node, as well as four central nodes. The new policy traverses the central nodes in the reverse order of the old policy, leading to a chain of backward edges. This structure requires updating nodes in a specific order, resulting in extra touches.

- **Edge/Node Classification**:
  - For each edge or node, we classify it as forward (F) or backward (B) with respect to the policy update.
  - This classification helps in determining safe updates, as forward edges cannot introduce loops, while backward edges can.

- **Two-Letter Codes**:
  - Nodes are classified using two-letter codes (e.g., FF, FB, BF, BB) based on the direction of the edges relative to the old and new policies.
  - In Figure 1, \(v_2\) is classified as FBBF, indicating its role in both black and orange policies.

#### Computational Hardness
We prove that optimizing the number of touches is computationally hard, even for a small number of policies.

- **Hardness for 3 Policies**:
  - The problem is NP-hard for \(k = 3\) policies, which could be updated consistently in a 2-round schedule.
  - We establish a connection to the Shortest Common Supersequence (SCS) problem, specifically SCS(2, 3), and use a reduction to show hardness.

- **Hardness for 2 Policies**:
  - The problem remains hard for \(k = 2\) policies, which could be updated in two rounds each, by a reduction from Max-2SAT.

#### Reduction Details
- **Gadget Construction**:
  - We create gadgets representing sequences to enforce a specific order of updates.
  - For example, in Figure 3, node \(w\) must be updated after node \(v\) to maintain loop-freedom.

- **Lemma 1**:
  - If \(S\) is an instance of SCS(2, 3) and \(w = ab\), then adding a new character \(x\) and creating sequences \(ax\) and \(xb\) ensures that \(S\) has a supersequence of length \(k\) if and only if \(S'\) has a supersequence of length \(k + 1\).

- **Policy Creation**:
  - We partition sequences into 3 sets to avoid character repetition and create gadgets for each sequence.
  - This construction ensures that the length of the schedule (number of touches) is minimized.

By understanding these concepts and constraints, we can develop more efficient and loop-free update schedules for multiple policies.