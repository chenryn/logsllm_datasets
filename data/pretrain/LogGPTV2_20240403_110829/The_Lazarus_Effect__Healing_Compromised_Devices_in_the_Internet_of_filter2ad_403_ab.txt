facto standard TEE for MCUs. Our TEE model isolates between two
operating environments: a higher-privileged trusted world and a
lower-privileged normal world. After a reset, boot code can assign
various resources to either the trusted or the normal world. This
includes devices as well as RAM and flash which can be assigned
to either the trusted or the normal world in chunks of different
granularities. Code running in the normal world can only access
those resources that have been assigned to it.
3 THREAT MODEL
The software on the device is composed of Lazarus and the main
IoT application logic. The latter may include an OS and applications
running on it, a hypervisor, or bare-metal applications and is subject
to compromise by a remote attacker. We assume the attacker to be
capable of arbitrarily compromising this untrusted software. This
includes the possibility that attacker code persists across device
resets. An example is the exploitation of software vulnerabilities
or misconfigurations of the OS or application logic. With these
capabilities, the attacker is able to control common IoT devices at
will and to make them unavailable.
Lazarus is composed of its core TCB and a downloader, i.e. a
networking stack that allows Lazarus to communicate directly with
the hub. We assume the core TCB to be immune to compromise as
it is small and well isolated from a potential attacker. In contrast,
we only assume the more exposed downloader to work correctly
when not under attack. The core TCB puts protections in place that
allow easy recovery from a compromise of the downloader.
We assume the hardware to work correctly according to specifi-
cation. For instance, the attacker cannot alter code in ROM, or in-
terfere with peripherals shielded by the TEE. However, the attacker
may be able to leak secrets from the TEE, e.g., as demonstrated
by Lapid and Wool [24]. The attacker is unable to efficiently break
state-of-the-art cryptographic primitives.
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan8The attacker may eavesdrop on the communication channel be-
tween device and hub as well as forge or tamper with messages.
However, the attacker can block the channel only for a limited
amount of time. We consider prolonged attacks on the commu-
nication channel to be detectable and remediatable by network
operators.
The focus of this paper is the protection of IoT devices. The hub, a
web service likely to reside in a commercial cloud, can be protected
with the full array of industrial-strength IT security solutions and
is outside scope of this paper. Thus, we consider the hub to be
immune to attacks. The same holds for the environment in which
devices are provisioned. As we focus on scalable attacks, we leave
physical attacks requiring proximity of the attacker to a device out
of scope.
4 DESIGN OF LAZARUS
In this section, we describe the design of Lazarus, for which we com-
bine several hardware and software building blocks. To overcome
the three problems of existing cyber-resilient IoT architectures
listed in the introduction, we set the following design goals:
DG-I Strong isolation of Lazarus from untrusted software while
minimizing hardware requirements. This makes Lazarus ap-
plicable on a wide range of low-cost MCU-based IoT devices.
DG-II Prevent malware from damaging devices or making them
permanently unavailable.
DG-III Provide a stable device identity and attestation of the soft-
ware stack even in case of an update to Lazarus.
DG-IV Lazarus should require only minimal changes in existing
OS and application software.
In support of DG-I, we will realize the reset trigger TEETrigger
and latches in software. We achieve DG-II by regulating access
by untrusted software to peripherals critical for the availability of
devices such as a Flash Memory Controller (FMC). Lazarus requires
only the following hardware:
Entropy source to ensure freshness and non-forgeability of mes-
sages Lazarus exchanges with the hub, e.g., a Hardware Ran-
dom Number Generator (HRNG).
Orderly reset to allow Lazarus to execute deterministically from
a clean state after reset, regardless of prior state.
TEE for realizing latches, TEETrigger, and for controlling access
to critical peripherals.
Ordinary watchdog timer (WDT) as a building block for TEE-
Trigger. This simple device is commonly included in MCUs
to detect software crashes and reset the device. Software is
expected to service the WDT periodically. The WDT will
reset the device if it has not been serviced for some amount
of time.
These hardware features exist on a broad set of modern MCUs. In
contrast to CIDER [54], Lazarus requires neither hardware latches,
nor an external reset trigger.
Lazarus is split between a trusted boot loader and a runtime
component that executes inside the TEE concurrently with the
untrusted software which runs outside the TEE. After a reset, the
boot loader runs DICE++. Subsequently, similar to the CIDER boot
loader, it may download and install updates to the untrusted soft-
ware. Finally, it initializes the Lazarus runtime component in the
TEE and transfers control to the untrusted software.
We first describe how we construct latches and TEETrigger to
isolate Lazarus from untrusted software (DG-I). Then, we focus on
the isolation of critical peripherals (DG-II) and on our extension of
DICE (DG-III). Finally, we describe how we use these mechanisms
to design our end-to-end system and refer to DG-IV.
4.1 Construction of Latches
Lazarus has to protect its binaries and data in flash from being
corrupted by the untrusted software. We configure the TEE to
make the flash range that stores Lazarus code or data inaccessible
to the untrusted world. Effectively, this constitutes a latch, as the
restrictions will stay in place until the next reset, and the untrusted
software has no means of unlocking the latch. We use the same
mechanism to protect RAM for the Lazarus runtime component
running in in the TEE.
DICE without hardware support: On MCUs without hardware
support for DICE, we can use our TEE-based latches to build DICE
in software. The software consists of the UDS (i.e., a unique secret)
and code that hashes the next binary and derives the CDI from
it and the UDS. This code runs immediately after a reset. Its last
action is to read-write-latch itself including the UDS, thus making
itself and the UDS inaccessible until the next reset. Control and the
CDI are then transferred to the Lazarus boot code.
4.2 Construction of TEETrigger
We use the TEE and the WDT to construct our reset trigger TEE-
Trigger. TEETrigger is software running in the secure world which
exposes the standard AWDT interfaces [54] to the normal world.
A simple TEETrigger version could implement the AWDT initial-
ization call by storing the hub’s public key (provided as a parameter)
and starting the hardware WDT with the timeout value from the
AWDT initialization call. A second AWDT function generates a
nonce using the HRNG, stores it in trusted memory and also re-
turns the nonce to the untrusted caller. Untrusted application code
can use the nonce to request a deferral ticket for the AWDT from the
hub. If the hub issues such a ticket, the untrusted application code
can use the third AWDT interface to request deferral of AWDT ex-
piration and, thus, device reset to be postponed. TEETrigger could
implement this third call by using the public key that was provided
during initialization to verify the signature on the deferral ticket
and only servicing the WDT if the signature verification succeeds
and the nonce from the deferral ticket matches the stored nonce.
In practice, the situation is complicated by a mismatch between
the timeout intervals supported by most existing hardware WDTs
(at most few minutes) and those expected of AWDTs (hours to
weeks). In order to support AWDT timeout intervals that are not
limited by those of the WDT hardware, we take advantage of a
WDT feature that causes the WDT to issue an interrupt a short
time before resetting the device. This interrupt warns software that
a device reset is imminent. We maintain a counter which is set to a
positive value during AWDT initialization. Our interrupt handler
will decrement the counter and service the WDT if and only if
the result is not negative. For example, if the WDT hardware only
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan9Figure 1: Interposition between untrusted software and crit-
ical peripherals through handlers in the TEE.
to regulate flash writes can be determined at design time of
an IoT use case.
Figure 2: Modification to DICE (in gray) to exchange a shared
secret and static identifier with the hub at first device boot.
supports timeout intervals of up to one minute, and we desire a 10
minute timeout for the AWDT, we can set the counter to 10 during
initialization or after a valid deferral ticket has been received. This
will cause TEETrigger to service the hardware WDT ten times for
a ten minute timeout interval.
4.3 Isolation of Critical Peripherals
Untrusted software should be able to execute unconstrained and
thus be allowed to access peripherals. However, to assure recover-
ability, we must regulate its access to certain critical peripherals.
Otherwise, untrusted code could, for instance, put devices into an
irrecoverable low-power state, wear out flash, or permanently dis-
able peripherals used for communication. This would make devices
permanently unavailable and could even cause physical damage.
Therefore, the Lazarus runtime component running in the trusted
world of the TEE interposes between the untrusted code and these
critical peripherals. We define a set of entry points into the TEE to
allow untrusted software controlled access to critical peripherals.
Figure 1 depicts this with “peripheral handlers” serving as entry
points into the TEE.
An example of illicit use of critical peripherals is excessive flash
writes by untrusted software. Even though the storage of trusted
components of Lazarus may be latched using the TEE, excessive
writes to unprotected storage locations could still cause flash to
wear out. flash writes are handled via an FMC. This is why we
define the FMC as a critical peripheral to be only accessible from
within the TEE. For persisting data, untrusted software must then
use our entry point to the TEE, where our trusted FMC handler
manages write requests. Note that writing to flash is generally a
slow operation. Interposing on such operations will have a limited
performance impact.
Untrusted software might receive data from the hub, such as
updates, or retrieve other data (e.g., from sensors) it has to store.
When our flash write handler in the TEE receives a flash write
attempt, it only allows:
• Writing to unprotected flash memory areas (areas that are
not latched). This includes areas storing code and data of
untrusted software and a staging area for storing updates.
Writes to latched areas (storing Lazarus) are prohibited. This
prevents untrusted software from circumventing the TEE’s
WRLatch for Lazarus code by using the handler.
• A reasonable amount of flash writes. We assume that for
flash write events, a reasonable threshold or rate limitation
The FMC is one example of a critical peripheral and its presence
or criticality may depend on the IoT use case and device type.
The absolute minimum set of critical peripherals that need to be
protected for Lazarus are:
• Storage controllers allowing to write persistent storage sub-
• Power control peripherals that can put the device into low
• The WDT used by TEETrigger.
power modes or turn the device off.
ject to wear out.
If a handler in the TEE detects illicit use of peripherals, it will reset
the device. This allows remediation through Lazarus and can help
the hub detect faulty behavior or compromise of business logic.
Other peripherals such as networking devices or other storage con-
trollers may be critical depending on the device type and IoT use
case. Our prototype demonstrates that adapting the untrusted soft-
ware to this protection mechanism requires only minor adaptations
to certain library function calls (DG-IV).
4.4 Extension of DICE
To achieve design goal DG-III, we introduce a mechanism that al-
lows updating early-boot code like Lazarus without loss of device
identity. Updating early boot code like Lazarus is essential in prac-
tice, e.g. when updating cryptographic implementations or when
an exploitable vulnerability has been identified. However, updating
an early-boot component like Lazarus results in an unpredictable
CDI and thus in a new DeviceID and AliasID. A hub knowing de-
vices and their identities has no means of relating the new and old
DeviceID after an update and has no way to verify that the update
was indeed applied.
As a practical solution for updating early-boot code without
loosing the device identity, we propose DICE++ as an extension
to DICE. DICE++ enables devices to provide the hub with crypto-
graphic proof of identity after a change in the DeviceID. This allows
the hub to associate the old and the new DeviceID and AliasID and
to verify that devices have properly applied their early-boot code
update. DICE++ thus minimizes the amount of code that cannot be
updated in practice. Our design of DICE++ can supplement existing
DICE implementations on shipped devices, which we demonstrate
in Section 5. The first part of this section describes device provi-
sioning while the second part explains device authentication after
an update of early-boot code.
Device Provisioning. Our idea for re-associating device identities
after an update of an early-boot component is to use a static se-
cret and identifier shared between device and hub. We create the
secret and identifier on the device in a secure environment during
Non-SecureSecure……accessUntrustedSoware Peripheral1… Peripheralnaccessrequest CriticalPeripheral1 PeripheralHandler1 CriticalPeripherali PeripheralHandleri CriticalPeripheraln…RESETDICE++RecoveryTCBdev_uuid,static_symCDIUDSAlias IDX (only at ﬁrst boot)Device IDSession 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan10Figure 3: Modification to DICE key derivation and identity-
based attestation (in gray) for updating the recovery TCB.
provisioning and exchange it with the hub. After an update, the
device with a new DeviceID uses the static identifier for making
an “identity claim”. The hub requests proof of possession of the
respective shared secret to verify a device’s identity claim.
At the first boot of a device, DICE++ randomly generates the
static identifier dev_uuid. Further DICE++ derives the shared se-
cret static_sym as follows: static_sym := KDF(U DS, dev_uuid).
The secret static_sym is derived with a one way function based on
the UDS and the static identifier, allowing no conclusions on the
UDS. Both dev_uuid and static_sym remain unchanged when an
early-boot component is updated. We use a secret different than
the UDS to share with the hub, because static_sym is less security
critical. static_sym is only used for re-association, not for regular
attestation/authentication. Device identities are not compromised
should static_sym ever leak. In contrast, if the burnt-in UDS leaks,
the device is irrecoverably compromised. In such cases, we can re-
generate dev_UU ID, which causes derivation of a new static_sym,
avoiding loss of a device.
Being in a secure environment, dev_uuid, static_sym and the
initial DeviceID are read out and transferred to the hub. For this
purpose, DICE++ provides dev_uuid and static_sym once at first
boot to the next layer. At this time, early-boot code and environment
can still be trusted. It is also possible to exchange dev_uuid and
static_sym online after enrollment. In this case, the early-boot
component generates the structure X at initial boot and sends it to
the hub on first connection:
X := siд(enc(dev_uuid|static_sym)Hubpub)DeviceI D1
pr iv
This means that the early-boot component encrypts static_sym
and dev_uuid with the hub public key and signs it with its ini-
tial DeviceID private key, enabling confidential and authenticated
transmission. The derivations at first boot are depicted in Figure 2.
Re-Association after Update. At every boot, DICE++ generates
an additional key other than the CDI for the early-boot component.
We call this key core_auth, which DICE++ derives as follows:
core_authx := KDF(static_sym, hash(Mx |dev_uuid))
This key depends on the current version x of the early-boot compo-
nent M on the device and allows it to authenticate itself. DICE++
hashes the early-boot component appended with the identifier
dev_uuid and uses it with static_sym as input to a Key Derivation
Function (KDF). The key core_authx can only be computed with
knowledge of static_sym and indicates that the software stack M
in version x was measured on the device with dev_uuid. An up-
date to version x + 1 causes an independent derivation of the key
core_authx +1. Only DICE++ and the hub are able to derive this key
as it depends on static_sym and thus cannot be forged or predicted.
Figure 4: Boot flow of Lazarus including latching, TEE-
Trigger initialization and peripheral handler setup.
The early-boot component receives this key from DICE++, which
it uses to derive an “identity token”, which we call dev_auth. Using
dev_authx +1, a modified early-boot component can prove to the
hub that it was successfully updated and is running on exactly the
device with the prior DeviceID. The derivations for core_auth and
dev_auth are illustrated by Figure 3. To compute dev_authx +1, the
early-boot component uses core_authx +1 as key for a Hash-based
MAC (HMAC) over the new DeviceID and dev_uuid, i.e.,
dev_authx +1 := HMAC(core_authx +1, DeviceIDx +1
pub|dev_uuid)
dev_authx +1 can only be computed by an early-boot component
exactly in version x + 1 running on the device dev_uuid and be-
longs to the DeviceID in version x + 1. dev_authx +1 depends on
core_authx +1 which is only present after a correct update to ver-
sion x + 1. Thus, dev_authx +1 cannot be forged either. Early-boot
code can now pass dev_authx +1 and dev_uuid to the next layer to