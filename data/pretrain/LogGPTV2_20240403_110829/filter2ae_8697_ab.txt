最后，它使用一个名为的实用程序relOpWithSwapAndNegate来检查size表达式是否小于限制。它使谓词也能处理这样的场景：
    if (packet.data.size >= limit) {
      return -1;
    } else {
      ... packet.data.size ...
    }
有时实现边界检查的另一种方式是通过调用min，如此谓词所检测到的：
    /**
     * Holds if `size` is bounds checked with a call to `min`:
     * 
     *    size = min(n, limit);
     *
     *    ... size ...
     */
    predicate minSize(Expr size) {
      exists (DataFlow::Node source, DataFlow::Node sink
      | DataFlow::localFlow(source, sink) and
        source.asExpr().(FunctionCall).getTarget().getName() = "min" and
        size = sink.asExpr())
    }
我将这两个谓词组合如下：
    /**
     * Holds if `size` has been bounds checked.
     */
    predicate checkedSize(Expr size) {
      lowerBound(size) >= 0 and
      (guardedSize(_, size, _, _) or minSize(size))
    }
请注意，我还习惯lowerBound确保不存在负整数溢出的可能性。唯一剩下要做的就是checkedSize在isSink方法中使用，以减少误报的数量。这是完成的查询：
    /**
     * @name bcopy of network data
     * @description Copying a variable-sized network buffer into kernel memory
     * @kind path-problem
     * @problem.severity warning
     * @id apple-xnu/cpp/bcopy-negative-size
     */
    import cpp
    import semmle.code.cpp.valuenumbering.GlobalValueNumbering
    import semmle.code.cpp.controlflow.Guards
    import semmle.code.cpp.dataflow.DataFlow
    import semmle.code.cpp.dataflow.TaintTracking
    import semmle.code.cpp.rangeanalysis.RangeAnalysisUtils
    import semmle.code.cpp.rangeanalysis.SimpleRangeAnalysis
    import DataFlow::PathGraph
    /**
     * Holds if `guard` is a bounds check which ensures that `size` is less than
     * `limit`. For example:
     * 
     *   if (size = 0 and
      (guardedSize(_, size, _, _) or minSize(size))
    }
    class MyCfg extends DataFlow::Configuration {
      MyCfg() {
        this = "MyCfg"
      }
      override predicate isSink(DataFlow::Node sink) {
        exists (FunctionCall call
        | sink.asExpr() = call.getArgument(1) and
          call.getTarget().getName() = "__builtin___memmove_chk" and
          not checkedSize(call.getArgument(2)))
      }
      override predicate isSource(DataFlow::Node source) {
        source.asExpr().(FunctionCall).getTarget().getName() = "mbuf_data"
      }
    }
    from DataFlow::PathNode sink, DataFlow::PathNode source, MyCfg dataFlow
    where dataFlow.hasFlowPath(source, sink)
    select sink, source, sink, "bcopy of network data"
**在XNU上尝试QL**  
与大多数其他开源项目不同，XNU无法在LGTM上查询。这是因为LGTM使用Linux工作程序来构建项目，但XNU只能在Mac上构建。即使在Mac上，XNU也非常容易构建。如果我没有找到杰里米·安德鲁斯这篇非常有用的博客文章，我就无法做到。使用Jeremy
Andrus的说明和脚本，我为三个最新发布的XNU版本手动构建了快照。：您可以从这些链接下载快照10.13.4，10.13.5，10.13.6。不幸的是，Apple尚未发布10.14（Mojave
/ iOS 12）的源代码，因此我无法创建QL快照来运行针对它的查询。要在这些QL快照上运行查询，您需要下载QL for
Eclipse。可以在此处找到有关如何使用QL for Eclipse的说明。