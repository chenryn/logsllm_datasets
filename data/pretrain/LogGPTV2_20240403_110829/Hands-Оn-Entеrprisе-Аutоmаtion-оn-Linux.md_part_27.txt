out across a wide number of servers. Indeed, in the case of FreeIPA, there are already freely
available Ansible roles and playbooks that can set up not only the Linux clients, but even
your server architecture as well. Thus, automation of all key components within your Linux
infrastructure can be achieved.
[ 288 ]
Managing Users on Linux Chapter 10
In this chapter, you learned how to effectively manage user accounts with Ansible across a
large number of Linux servers. You then learned how to integrate logins with common
directory servers such as FreeIPA and Microsoft AD using Ansible, and finally, you
learned how Ansible can be used to enforce configuration and audit its state.
In the next chapter, we will explore the use of Ansible in database management.
Questions
1. What are the benefits of local user accounts, even when a directory service is
employed?
2. Which module is used to create and manipulate user accounts in Ansible?
3. How would you generate an encrypted password hash, using just Ansible?
4. Which package is used to integrate Linux servers with AD?
5. How can you use Ansible to audit configuration from a group of servers?
6. What is the purpose of validating the sudoers file when deploying it from a
template?
7. What additional benefits does a directory service bring that Ansible could not
provide, even though it can deploy user accounts across all your servers?
8. How would you make the choice between FreeIPA and AD?
Further reading
For an in-depth understanding of Ansible, please refer to Mastering Ansible, Third
Edition—James Freeman and Jesse Keating (https:/​/​www.​packtpub.​com/​gb/
virtualization-​and-​cloud/​mastering-​ansible-​third-​edition).
To explore the setup and use of AD in greater depth, readers may refer
to Mastering Active Directory, Second Edition—Dishan Francis (https:/​/​www.
packtpub.​com/​cloud-​networking/​mastering-​active-​directory-​second-
edition).
[ 289 ]
11
Database Management
No application stack is complete without data, and this is commonly stored in a database.
There is a myriad of databases to choose from when your platform is Linux, and the whole
topic of database management and administration often warrants entire books by itself—in
fact, normally one book per database technology. In spite of the vastness of this topic, a
little knowledge of Ansible can assist greatly when it comes to database administration.
Indeed, whether you are installing a new database server, or performing maintenance or
administration tasks on an existing one, our original principles discussed in Chapter 1,
Building a Standard Operating Environment on Linux still apply. Indeed, why would you go to
all the trouble of standardizing your Linux environment and ensuring all changes are
automated, only to insist on manual management of the database tier? This could easily
result in a lack of standardization, auditability, and even traceability (for example, who
made which changes, and when?). Ansible can perform database operations and
configuration via modules. It is perhaps not a replacement for some of the more advanced
database management tools available on the market, but if these can be driven through the
command line, it can execute these on your behalf, as well as taking care of many tasks
itself. Ultimately, you want all changes to be documented (or self-documented) and
auditable, and Ansible (combined with Ansible Tower, or AWX) can help you achieve this.
This chapter explores methods that will help you with this.
The following topics will be covered in this chapter:
Installing databases with Ansible
Importing and exporting data
Performing routine maintenance
Database Management Chapter 11
Technical requirements
This chapter includes examples, based on the following technologies:
Ubuntu Server 18.04 LTS
CentOS 7.6
Ansible 2.8
To run through these examples, you will need access to two servers or virtual machines
running one each of the operating systems just listed, and also, Ansible. Note that the
examples given in this chapter may be destructive in nature (for example, they add and
remove databases and tables, and change database configuration) and, if run as is, are only
intended to be run in an isolated test environment. Once you are satisfied that you have a
safe environment in which to operate, let's get started on looking at the installation of new
software packages with Ansible. All example code discussed in this chapter is available
from GitHub, at the following URL: https:/​/​github.​com/​PacktPublishing/​Hands-​On-
Enterprise-​Automation-​on-​Linux/​tree/​master/​chapter11.
Installing databases with Ansible
In Chapter 7, Configuration Management with Ansible, we explored a few examples of
package installation and used MariaDB server in some of our examples. Of course,
MariaDB is only one of a myriad of databases available on Linux, and there are too many
to cover in detail here. Nonetheless, Ansible can help you install just about any database
server on Linux, and in this chapter, we will proceed through a series of examples that will
provide you with the tools and techniques to install your own database server, no matter
what it is.
Let's get started in the next section, by building on our example of installing MariaDB.
Installing MariaDB server with Ansible
Although earlier in the book, we installed the native mariadb-server package that ships
with CentOS 7, most enterprises that need a MariaDB server would choose to standardize
on a specific release directly from MariaDB. This is often more up to date than the version
shipped with a given Linux release, and hence provides newer features and, sometimes,
performance improvements. In addition, standardizing on a release directly from MariaDB
ensures consistency of your platform, a principle we have kept to throughout this book.
[ 291 ]
Database Management Chapter 11
Let's take a simple example—suppose you are running your infrastructure on Red Hat
Enterprise Linux (RHEL) 7. This ships with MariaDB version 5.5.64. Now, suppose you
want to standardize your infrastructure on the newly released RHEL 8—if you are relying
on the packages supplied by Red Hat, this suddenly moves you to version 10.3.11 of
MariaDB, meaning not only an upgrade to your Linux infrastructure but also to your
databases, too.
Instead, it would be better to standardize upfront on a release directly from MariaDB itself.
At the time of writing, the latest stable release of MariaDB is 10.4—but let us suppose that
you have standardized on the 10.3 release, as it is known, and tested successfully in your
environment.
The installation process is quite straightforward and is well documented on the MariaDB
website—see https:/​/​mariadb.​com/​kb/​en/​library/​yum/​ for CentOS- and Red Hat-specific
examples. However, this details the manual installation process, and we wish to automate
this with Ansible. Let's now build this into a real, working Ansible example.
In this example, we will follow the instructions from MariaDB, which
includes downloading the packages from their repository. Although for
simplicity we will follow this example through, you could mirror the
MariaDB package repositories into Pulp or Katello, as detailed in Chapter
8, Enterprise Repository Management with Pulp and Chapter 9, Patching with
Katello.
1. First of all, we can see from the installation documentation that we need to create
a .repo file, to tell yum where to download the packages from. We can use a
template to provide this, such that the MariaDB version can be defined by a
variable and thus changed in the future when migration to version 10.4 (or
indeed, any other future version) is deemed necessary.
Thus, our template file, defined in
roles/installmariadb/templates/mariadb.repo.j2, would look like this:
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/{{ mariadb_version }}/centos7-
amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1
[ 292 ]
Database Management Chapter 11
2. Once we have created this, we should also create a default for this variable, to
prevent any issues or errors if it is not specified when the role is run—this will be
defined in roles/installmariadb/defaults/main.yml. Ordinarily, this
variable would be provided in the inventory file for a given server or group of
servers, or by one of the many other supported methods in Ansible, but the
defaults file provides a catch-all, in case it gets overlooked. Run the following
code:
---
mariadb_version: "10.3"
3. With this defined, we can now begin to build up the tasks in our role
in roles/installmariadb/tasks/main.yml, as follows:
---
- name: Populate MariaDB yum template on target host
template:
src: templates/mariadb.repo.j2
dest: /etc/yum.repos.d/mariadb.repo
owner: root
group: root
mode: '0644'
This will ensure that the correct repository file is written to the server, and if it is
ever incorrectly modified, restored to its original, desired state.
On CentOS or RHEL, you could also use the yum_repository Ansible
module to perform this task—however, this has the disadvantage of being
unable to modify an existing repository definition, and so, in a scenario
where we might wish to change the repository version in future, we are
better off using a template.
4. Next, we should clean out the yum cache—this is especially important when
upgrading MariaDB to a new version, as package names will be the same, and
cached information could cause issues with the installation. At present, cleaning
the yum cache is achieved using the shell module, to run the yum clean all
command. However, as this is a shell command, it will always run, and this
could be considered inefficient—especially as this command being run would
result in any future package operations needing to update the yum cache again,
even if we didn't modify the MariaDB repository definition. Thus, we want to
run it only when the template module task results in a changed state.
[ 293 ]
Database Management Chapter 11
To do this, we must first add this line to our template task, to store the results of
the task:
register: mariadbtemplate
5. Now, when we define our shell command, we can tell Ansible to only run it if the
template task resulted in a changed state, as follows:
- name: Clean out yum cache only if template was changed
shell: "yum clean all"
when: mariadbtemplate.changed
6. With our cache appropriately cleared out, we can then install the required
MariaDB packages—the list used in the task shown in the following code block is
taken from the MariaDB documentation referenced earlier in this section, but you
should tailor it to your exact requirements:
- name: Install MariaDB packages
yum:
name:
- MariaDB-server
- galera
- MariaDB-client
- MariaDB-shared
- MariaDB-backup
- MariaDB-common
state: latest
The use of state: latest ensures that we always install the latest packages
from the repository file created by our template task. Thus, this role can be used
equally for initial installation and upgrade to the latest version. However, if you
do not want this behavior, change this statement to state: present—this
simply ensures that the packages listed are installed on our target host. If they are,
it does not update them to the latest version—it simply returns an ok status and
proceeds to the next task, even if updates are available.
[ 294 ]
Database Management Chapter 11
7. With the packages installed, we must ensure that the server service is then
started at boot time. We would probably also want to start it now so that we can
perform any initial configuration work on it. Thus, we will add a final task to our
installmariadb role that looks like this:
- name: Ensure mariadb-server service starts on boot and is started
now
service:
name: mariadb
state: started
enabled: yes
8. Also, we know that CentOS 7 has a firewall enabled by default—as such, we
must change the firewall rules to ensure that our newly installed MariaDB server
can be accessed. The task to perform this would look something like this:
- name: Open firewall port for MariaDB server
firewalld:
service: mysql
permanent: yes
state: enabled
immediate: yes
9. Let's now run this role and see it in action—the output should look something
like this:
[ 295 ]
Database Management Chapter 11
The output has been truncated to conserve space, but clearly shows the installation in
progress. Note that the warning can safely be ignored—the Ansible engine has detected our
yum clean all command and is helpfully advising us to use the yum module—however,
the yum module in this instance does not provide the function we need, and hence, we used
the shell module instead.
With the database installed and running, we have the following three high-level tasks to
perform next:
Update the MariaDB configuration.
Secure the MariaDB installation.
Load initial data (or schemas) into the database.
Of these tasks, we explored, in detail, methods to use the Ansible template module
effectively to manage the MariaDB configuration in Chapter 7, Configuration Management
with Ansible (see the Making scalable dynamic configuration changes section). As such, we will
not go into detail on this here—however, check the configuration file structure for your
chosen version of MariaDB, as it might differ from that shown in the aforementioned
chapter.
If you have installed MariaDB RPMs on a platform such as CentOS, you
can find out where the configuration files live, by running the command
rpm -qc MariaDB-server in a root shell.
Thus, assuming that you have the installation and configuration of the database server in
hand, let us proceed to secure it. This, at a bare minimum, will entail changing the root
password, though good practice states that you should also remove remote root access, the
test database, and the anonymous user accounts that come with a default MariaDB
installation.
MariaDB comes with a command-line utility called
mysql_secure_installation, to perform exactly these
tasks—however, it is an interactive tool and does not lend itself to
automation with Ansible. Luckily, Ansible provides modules for
interacting with the database that can assist us in performing exactly these
tasks.
[ 296 ]
Database Management Chapter 11
To separate out these tasks from the installation, we'll create a new role called
securemariadb. Before we can define the tasks, we must define a variable to contain the
root password for the MariaDB installation. Note that normally, you would provide this in
a more secure manner—perhaps through an Ansible Vault file, or using some of the
advanced features in AWX or Ansible Tower. For simplicity, in this example, we will define
a variables file in the role (in roles/securemariadb/vars/main.yml), as follows:
---
mariadb_root_password: "securepw"
Now, let's build up the tasks for the role. Ansible includes a few native modules for use in
database management, and we can make use of these here, to make the required changes to
our MariaDB database.
Note, however, that some modules have certain Python requirements, and
in the case of our example system—MariaDB on CentOS 7—we must
install the MySQL-python package.
Knowing this, the first step in building up our role is to install the prerequisite Python
package, as follows:
---
- name: Install the MariaDB Python module required by Ansible
yum:
name: MySQL-python
state: latest
Our most immediate task, once this is installed, is to set the password on the local root
account, and prevent anyone from logging in without authentication. Run the following
code:
- name: Set the local root password
mysql_user:
user: root
password: "{{ mariadb_root_password }}"
host: "localhost"
So far, this is a textbook example of how to use the mysql_user module—however, there is
a twist in our usage from here. The preceding example takes advantage of the fact that no
root password is set—it is implicitly manipulating the database as root, by virtue of the
fact that we will put become: yes in our site.yml file, and thus, the playbook will be run
as root. At the time that this task is run, the root user has no password, and so, the above
task will run satisfactorily.
[ 297 ]
Database Management Chapter 11
The answer to this is to add the login_user and login_password parameters to the
module for all future tasks, to ensure that we have authenticated successfully with the
database to perform the required tasks.
This role will only run successfully once as it is written—on the second
run, a password will be set for the root MariaDB user, and the preceding
task will fail. However, if we specify a login_password for the above
task, and the password is blank (as in the initial run), the task will also
fail. There are a number of ways around this, such as setting the old
password in another variable or, indeed, committing to only running this
role once. You could also specify ignore_errors: yes under this task
so that, if the root password is already set, we simply carry on to the next
tasks, which should run successfully.
With this condition understood, we now add another task to the role, to remove the remote
root accounts, as follows:
- name: Delete root MariaDB user for remote logins
mysql_user:
user: root
host: "{{ ansible_fqdn }}"
state: absent
login_user: root