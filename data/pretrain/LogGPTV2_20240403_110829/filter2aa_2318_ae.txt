Email  
●
Password  
●
Token  
●
Secret  
●
Key  
The   output   should   look   something   like   this:  
As   you   can   see   above    we   have   the   field   names   addressable_type,   city,   and   much   more   
which   isn't   displayed   as   the   output   was   too   large.  
To   query   all   values   that   contain   a   specific   field   name   use   the   following   command   
“/_all/_search?q=_exists:email&pretty=1”  .   This   will   return   documents   that   contain   a   field   
name(column)   named   email   as   shown   below:  
Again   you   can   replace   “_all”   with   the   name   of   an   index   to   perform   searches   specifically   
against   that   endpoint.  
Summary  
ElasticSearch   is   just   another   database   where   you   can   store   and   query   information.   The   
major   problem   is   that   people   expose   the   unauthenticated   web   service   to   the   public.   With   
unauthenticated   access   to   the   web   service   attackers   can   easily   dump   the   entire   
database.   Always   be   on   the   lookout   for   port   9200.  
Mongo  Database  
Introduction  
Like   Elasticsearch   MongoDB   is   a   nosql   database    that   uses   JSON-like   documents   to   
store   data.   Also   similar   to    the   rest   of   the   databases   we   have   talked   about   Mongo   DB   
fails   to   implement   authentication   by   default.   This   means   it's   up   to   the   user   to   enable   this   
which   they   often   forget.  
MongoDB  
If   you're   searching   for   MongoDB   instances,   be   on   the   lookout   for   port   27017.   As   
mentioned   earlier   MongoDB   doesn't   have   authentication   enabled   by   default   so   to   test   
for   this   vulnerability   just   try   to   login.   To   do   this   I   normally   just   use   the   mongo   cli   as   
shown   below:  
●
mongo   ip-address-here  
Once   logged   into   the   database   try   issuing   a   command,   if  you   get   an   “unauthorized”   
error   message   prompting   for   authentication   then   the   endpoint   has   authentication   
enabled.  
However,   if  you   can   run   arbitrary   commands   against   the   system   then   authentication   has   
not   been   set   up   and   you   can   do   whatever   you   want.  
Summary  
If   you   see   port   27017   open   or   any   other   MongoDB   associate   port   make   sure   to   test   the   
endpoint   to   see   if  its  missing   authentication.   Exploiting   this   misconfiguration   is   as   easy   
as   connecting   to   the   database   and   extracting   the   data.   This   is   as   easy   as   it  gets   folks.  
Conclusion  
If   an   application   needs   to   store   data   chances   are   its  being   stored   in   a   database.   These   
databases   hold   all   kinds   of   sensitive   information   such   as   passwords,   tokens,   private   
messages,   and   everything   else.   That's   why   databases   are   always   popular   targets   by   
hackers.   Since   these   are   such   popular   targets   you   would   think   they   would   be   fairly   
secure   but   they   aren't.   A   lot   of   databases   are   missing   authentication   by   default!   This   
means   if  connected   to   the   internet   anyone   could   connect   to   these   devices   to   extract   the   
information   they   hold.  
Name  
Endpoint  
Firebase   DB  
*.firebaseio.com/.json  
Elasticsearch  
Port:9200  
MongoDB  
Port:27017  
CouchDB  
Port:5985,6984  
CassandraDB  
Port:9042,9160  
Basic  Hacking  Brute  Forcing  
Introduction  
Brute   forcing   is   a   classic   attack   that   has   been   around   forever   and   shows   no   signs   of   
being   eliminated.   Passwords   are   a   weak   point   of   security   and   as   an   attacker   you   should   
take   full   advantage   of   this.   Easily   guessable   passwords,   using   default   passwords,   and   
password   reuse   are   easy   ways   for   an   organization   to   get   compromised.   The   rule   of   
thumb   is   if  there   is   a   login   screen   it  should   be   brute   forced.  
Login  Pages  
There   are   three   things   you   need   to   have   if  you   want   to   launch   a   brute   force   attack.   The   
three   things   you   need   are   an   endpoint   with   a   login   page,   a   username   ,   and   a   password.   
First   you   need   to   find   the   endpoint   you   want   to   target.   
Name  
Endpoint  
Web   Application   Login   Page  
Web   application   login   page,   Outlook   mail,   
VPN,   Router,   Firewall,   Wordpress   admin   
panel,   etc  
SSH  
Port:22  
RDP  
Port:3389  
VNC  
Port:5900  
FTP  
Port:21  
Telnet  
Port:23  
Default  Credentials  
Now   that   you   know   which   endpoints   to   look   out   for   you   need   to   get   a   list   of   usernames   
and   passwords.   This   technique   may   be   basic   but   you   would   be   surprised   at   the   number   
of   times   iv   compromised   an   organization   because   they   are   using   default   credentials.  
As   shown   above   one   of   the   best   places   to   find   default   passwords   is   SecList:  
●
https://github.com/danielmiessler/SecLists/tree/master/Passwords/Default-Credentials  
The   above   picture   is   an   example   file   containing   default   usernames   and   passwords   to   
hundreds   of   routers.   All   you   have   to   do   is   look   up   the   target   vendor   and   try   all   the   
default   passwords   it  uses,   this   technique   works   very   well   as   people   often   forget   to   
change   the   default   credentials.  
If   you   are   targeting   an   SSH   server   or   something   other   than   a   router   the   process   will   be   
slightly   different.   Not   really,   those   services   also   come   with   default   credentials   as   shown   
in   the   image   below:  
Depending   on   the   service   you   are   brute   forcing   you   will   want   to   find   or   create   a   list   of  
credentials   tailored   toward   that.   You   may   also   find   that   sec   list   does   not   have   any   
default   passwords   impacting   the   target   technology.    If   that's   the   case   just   perform   a   
Google   search   or   two,   I   normally   find   these   things   in   the   first   few   links.  
Brute  Forcing  
Once   you   have   a   good   set   of   credentials   you   can   start   the   actual   process   of   brute   
forcing.   You   could   do   this   by   hand   but   I   would   100%   recommend   using   a   tool   for   this   job   
unless   you   are   only   testing   5   passwords   or   something   small   like   that.   
●
https://github.com/vanhauser-thc/thc-hydra  
If   you're   performing   a   brute   force   attack   you   probably   want   to   use   the   tool   “hydra”.   This   
tool   supports   a   bunch   of   different   protocols   and   has   never   let   me   down.   Once   you   have   
the   target   endpoint   and   credentials   you   can   use   any   tool   to   perform   the   brute   force   
attack   just   pick   one   you   like.  
Conclusion  
Brute   force   attacks   is   an   easy   way   to   compromise   a   target   application.    With  the   use   of   
default   passwords,   easily   guessable   passwords,   and   password   reuse   finding   a   target   
vulnerable   to   this   shouldn't   be   that   hard.   All   you   need   is   a   good   credential   list   and   you're   
ready   to   go.  
Basic  Hacking  Burp  Suite  
Introduction  
If   there   is   one   tool   that   you    NEED   to   have   to   be   a   successful   Bug   Bounty   Hunter   it  would   
be   Burp   Suite.   You   can   find   plenty   of   bugs   without   ever   leaving   Burp,   it  is   by   far   my   most   
used   and   favorite   tool   to   use,   almost   every   web   attack   I   pull   off   is   in   Burp.   If   you   don’t   
know   what   Burp   is   it’s  a   tool   for   performing   security   tests   against   web   applications.   The   
tool   acts   as   a   proxy   and   allows   you   to   inspect,   modify,   replay,   etc   to   web   requests.   
Almost   every   exploit   your   going   to   pull   off   will   be   done   with   Burp.  
●
https://portswigger.net/burp  
Note   that   there   is   a   free   version   (community)   but   I   HIGHLY   recommend   purchasing   a   
professional   license.   This   is   a   must   have   tool!  
Proxy  
The   proxy   tab   is   probably   the   most   important   tab   in   Burp.   This   is   where   you   can   see   all   
of   your   traffic  that   passes   by   the   Burp   proxy.   The   first   thing   you   want   to   do   when   Burp   
loads   is   make   sure   your   proxy   is   up   and   running   as   shown   in   the   below   image:  
The   next   step   is   to   force   your   browser   to   route   its  traffic  through   the   Burp   proxy,   this   can   
be   accomplished   by   changing   your   browsers   proxy   setting   and   shown   below,   note   this   
will   be   different   depending   on   which   browser   you   use:  
Once   you   have   the   Burp   proxy   listening,   the   browser   configured   to   use   Burp,   and   you   
imported   the   Burp   certificate   in   your   browser   you   will   be   good   to   go.   Once   you   navigate   
to   a   web   page   you   should   see   the   request   show   up   in   Burp   as   shown   below:  
As   you   can   see   in   the   above   image   the   “intercept”   tab   is   toggled   on,   this   means   that   
Burp   will   intercept   each   HTTP   request   and   you   will   have   to   manually   press   the   “forward”   
button   for   the   request   to   continue   to   the   server.   While   on   this   tab   you   can   also   modify   
the   requests   before   forwarding   it  to   the   back-end   server.   However,   I   only   use   this   tab   
when   i'm   trying   to   isolate   requests   from  a   specific   feature,   I   normally   turn   “intercept”   to   
off   and   I   view   the   traffic  in   the   “HTTP   History”   tab   and   shown   below:  
As   you   can   see   the   “HTTP   History”   tab   shows   each   HTTP   request   and   response   that   
was   made   by   and   sent   to   our   browser.   This   is   where   I   spend   80%   of   my   time   looking   for   
something   that   peaks   my   interest.   When   looking   at   the   traffic  I'm   mostly   paying   attention   
to   the   method,url,   and   MIME   type   fields.   Why?   Because   when   I   see   a   POST   method   
being   used   I   think   of   Stored   XSS,   Cross   site   request   forgery,   and   many   more   
vulnerabilities.   When   I   see   a   URL   with   an   email,username,or   id   in   it  I   think   IDOR.   When   
I   see   a   JSON   MIME   type   I   think   back-end   API.   Most   of   this   knowledge   of   knowing   what   
to   look   for   comes   with   experience,   as   you   test   so   many   apps   you   start   to   see   things   that   
look   similar   and   you   start   to   notice   things   that   look   interesting.  
Clicking   on   an   HTTP   request   will   show   you   the   clients   request   and   the   servers   
response,   this   can   be   seen   in   the   above   image.   Note   that   while   in   this   view   these   values   
can’t   be   modified,   you   will   have   to   send   the   request   to   the   repeater   if  you   want   to   modify   
the   request   and   replay   it,   this   will   be   discussed   in   more   detail   later.  
One   functionality   that   I   use   to   find   a   lot   of   vulnerabilities   and   make   my   life   easier   is   the   
search   feature.   Basically   you   can   search   for   a   word(s)   across   all   of   your   Burp   traffic.   
This   is   extremely   powerful   and   has   directly   led   me   to   finding   vulnerabilities.   For  example   
I   may   search   for   the   word   “url=”   this   should   show   me   all   requests   which   have   the   
parameter   URL   in   it,   I   can   then   test   for   Server   Side   Request   Forgery   (SSRF)   or   open   
redirect   vulnerabilities.   I   might   also   search   for   the   header   “Access-Control-Allow-Origin”   
or   the“callback=”   GET   parameter    when   testing   for   Same   Origin   Policy   (SOP)   bypasses.   
These   are   just   some   examples,   your   query   will   change   depending   on   what   you're   
looking   for   but   you   can   find   all   kinds   of   interesting   leads.   Also   don't   worry   if  you   don't   
know   what   SSRF   or   SOP   bypass   means   these   attacks   will   be   discussed   in   the   
upcoming   chapters.  
Burps   proxy   tab   is   where   you   will   spend   most   of   your   time   so   make   sure   you   are   familiar   
with   it.   Any   traffic  that   is   sent   by   your   browser   will   be   shown   in   the   HTTP   history   tab   just   
make   sure   you   have   intercept   turned   off   so   that   you   don’t   have   to   manually   forward   
each   request.  
  Target  
I   generally   don't   find   myself   in   the   target   section   of   burp   suite   but   I   think   it's   still   
important   to   know   what   it  is.  The   “Site   Map”   sub   tab   organizes   each   request   seen   by   the  
proxy   and   build   a   site   map   as   shown   below:  
As   you   can   see   in   the   above   image   a   site   map   is   built   which   easily   allows   us   to   view   
requests   from  a   specific   target.   This   becomes   fairly   useful   when   hitting   an   
undocumented   API   endpoint   as   this   view   allows   you   to   build   a   picture   of   the   possible   
endpoints.   You   can   also   view   the   HTTP   requests   in   this   tab,   clicking   on   a   folder   in   the   
sitemap   will   only   show   requests   from  that   path.   
In   addition   to   the   “Site   Map”   tab   there   is   a   “Scope”   tab.   I   almost   never   use   this   but   if  you   
want   to   define   the   scope   of   your   target   this   will   limit   burps   scans   to   only   the   domains   in   
scope.  
Intruder  
If   you're   doing   any   fuzzing   or   brute   forcing   with   Burp   you're   probably   doing   it  in   the  
“intruder”   tab.   When   you   find   an   interesting   request   right   click   it  then   click   “Send   to   
Intruder”,   this   will   send   your   requests   to   the   intruder   tab   as   shown   below:  
Go   to   the   intruder   tab   and   you   should   see   something   like   this:  
Now   click   the   “Clear”   button   to   reset   everything.   Now   from  here   your   steps   vary   
depending   on   what   you're   trying   to   do,   but   suppose   we   are   trying   to   do   some   parameter   
fuzzing.   One   of   the   first   things   we   need   to   do   is   select   the   value   we   are   trying   to   modify.   
This   can   be   done   by   highlighting   the   value   and   pressing   the   “Add”   button   as   shown   
below:  
As   you   can   see   above   we   are   selecting   the   “cb”   parameter   value.   Since   we   are   
attempting   to   do   parameter   fuzzing   this   is   the   value   that   will   be   replaced   with   our   fuzzing   
payloads.   
You   may   have   also   noticed   the   “Attack   type”   drop   down   menu   is   set   to   “Sniper”,   there   
are   four   different   attack   types   which   are   described   in   the   table   below:  
Sniper  
Uses   a   single   payload   list;  Replaces   one   position   at   a   time;  