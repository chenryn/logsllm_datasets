还有其他几个声明表明`id_token`何时不应再被接受。这些索赔都是从世界协调时(1970 年 1 月 1 日)开始以秒为单位计算的:
*   `exp`:当`id_token`到期时
*   `iat`:创建`id_token`时
*   `nbf`:应该允许绝对最早的一个`id_token`
为什么令牌没有单一的到期时间？
创建`id_token`的系统上的时钟不太可能与评估它的系统具有完全相同的时间。通常会有偏差，根据时钟的设置，可能会有几分钟。除了到期之外，还有一个“之前没有”给了标准时间偏差一些空间。
在一个`id_token`中有其他的声明，这些声明并不重要，但是有额外的上下文。示例包括您的姓名、联系信息、组织等。
虽然令牌的主要用途是与 Kubernetes API 服务器交互，但它们并不仅限于 API 交互。除了去 API 服务器，webhook 调用也可能收到你的`id_token`。
您可能已经在集群上部署了 OPA 作为验证网络钩子。当有人提交 pod 创建请求时，webhook 会收到用户的`id_token`，可以用于其他决策。
一个例子是，您希望确保基于提交者的组织将 PVC 映射到特定的 PVs。组织包含在`id_token`中，传递给 Kubernetes，再传递到 OPA webhook 上。由于令牌已经被传递给了网络钩子，因此这些信息可以在您的 OPA 策略中使用。
## 其他认证选项
在本节中，我们将重点放在 OIDC，并介绍了为什么它是最佳认证机制的原因。这当然不是唯一的选项，我们将在本节中讨论其他选项以及它们何时合适。
### 证书
这通常是每个人向 Kubernetes 集群进行认证的第一次体验。
一旦 Kubernetes 安装完成，一个包含证书和私钥的预构建 kubectl `config`文件就被创建并准备好使用。该文件仅应在“紧急情况下打碎玻璃”的情况下使用，在这种情况下，所有其他形式的认证都不可用。它应该由贵组织的特权访问标准来控制。当使用这个配置文件时，它不能识别用户，并且很容易被滥用，因为它不允许简单的审计跟踪。
虽然这是证书认证的标准用例，但它不是证书认证的唯一用例。正确完成的证书认证是业内公认的最强凭据之一。
证书认证被美国联邦政府用于其最重要的任务。在高级别上，证书认证包括使用客户端密钥和证书来协商您与 API 服务器的 HTTPS 连接。应用编程接口服务器可以获取您用来建立连接的证书，并根据**证书颁发机构** ( **CA** )证书对其进行验证。一旦通过验证，它会将证书中的属性映射到 API 服务器可以识别的用户和组。
为了获得证书认证的安全优势，私钥需要在隔离的硬件上生成，通常以智能卡的形式，并且永远不要离开该硬件。生成证书签名请求并提交给签署公钥的证书颁发机构，从而创建一个证书，然后安装在专用硬件上。在任何情况下，证书颁发机构都不会获得私钥，因此即使证书颁发机构遭到破坏，您也无法获得用户的私钥。如果证书需要吊销，它会被添加到吊销列表中，可以从 LDAP 目录、文件中提取，也可以使用 OCSP 协议进行检查。
这看起来可能是一个有吸引力的选择，那么为什么不应该使用 Kubernetes 的证书呢？
*   智能卡集成使用一种叫做 PKCS11 的标准，这种标准无论是`kubectl`还是 API 服务器都不支持。
*   API 服务器无法检查证书撤销列表或使用 OCSP，因此一旦创建了证书，就无法撤销它，以便 API 服务器可以使用它。
此外，很少使用正确生成密钥对的过程。它需要构建一个复杂的界面，用户很难将其与需要运行的命令行工具结合使用。为了避免这种情况，会为您生成证书和密钥对，您可以下载它，或者通过电子邮件发送给您，从而降低该过程的安全性。
不应该对用户使用证书认证的另一个原因是很难利用组。虽然您可以将组嵌入到证书的主题中，但是您不能撤销证书。因此，如果用户的角色发生变化，您可以给他们一个新的证书，但不能阻止他们使用旧的证书。
正如本节介绍中所述，在“遇到紧急情况时打碎玻璃”的情况下，使用证书进行认证是证书认证的一种很好的用途。如果所有其他认证方法都遇到问题，这可能是进入群集的唯一方法。
### 服务帐户
服务帐户似乎提供了一种简单的访问方法。创建它们很容易。以下命令创建一个服务帐户对象和一个存储服务帐户令牌的密码:
```
kubectl create sa mysa -n default
```
接下来，以下命令将以 JSON 格式检索服务帐户的令牌，并只返回令牌的值。然后，该令牌可用于访问应用编程接口服务器:
```
kubectl get secret $(kubectl get sa mysa -n default -o json | jq -r '.secrets[0].name') -o json | jq -r '.data.token' | base64 -d
```
为了展示这个例子，让我们直接调用 API 端点，而不提供任何凭据:
```
curl -v --insecure https://0.0.0.0:32768/api
```
您将收到以下信息:
```
.
.
.
{
  "kind": "Status",
  "apiVersion": "v1",
  "metadata": {
  },
  "status": "Failure",
  "message": "forbidden: User \"system:anonymous\" cannot get path \"/api\"",
  "reason": "Forbidden",
  "details": {
  },
  "code": 403
* Connection #0 to host 0.0.0.0 left intact
```
默认情况下，大多数 Kubernetes 发行版不允许匿名访问 API 服务器，因此我们收到一个 *403 错误*，因为我们没有指定用户。
现在，让我们将服务帐户添加到 API 请求中:
```
export KUBE_AZ=$(kubectl get secret $(kubectl get sa mysa -n default -o json | jq -r '.secrets[0].name') -o json | jq -r '.data.token' | base64 -d)
curl  -H "Authorization: Bearer $KUBE_AZ" --insecure https://0.0.0.0:32768/api
{
  "kind": "APIVersions",
  "versions": [
    "v1"
  ],
  "serverAddressByClientCIDRs": [
    {
      "clientCIDR": "0.0.0.0/0",
      "serverAddress": "172.17.0.3:6443"
    }
  ]
}
```
成功！这是一个简单的过程，所以你可能会想，“为什么我需要担心所有复杂的 OIDC 乱局？”该解决方案的简单性带来了多个安全问题:
*   **令牌的安全传输**:服务账户是自包含的，不需要任何东西来解锁或验证所有权，所以如果令牌在运输途中被取走，你没有办法停止它的使用。您可以设置一个系统，让用户登录来下载一个带有令牌的文件，但是现在您有了一个不太安全的 OIDC 版本。
*   **无到期**:当你解码一个服务账号令牌时，没有任何东西告诉你令牌什么时候到期。那是因为令牌永远不会过期。您可以通过删除服务帐户并重新创建它来撤销令牌，但这意味着您需要一个适当的系统来做到这一点。同样，你建造了一个能力较弱的 OIDC。
*   **审核**:一旦找回钥匙，车主就可以轻松发放服务账号。如果有多个用户使用同一个密钥，审计帐户的使用就变得非常困难。
除了这些问题，您不能将服务帐户放入任意组。这意味着 RBAC 绑定必须直接指向服务帐户，或者使用服务帐户所属的预建组之一。当我们谈论授权时，我们将探讨为什么这是一个问题，所以现在请记住这一点。
最后，服务帐户从未被设计为在集群之外使用。就像用锤子敲进一颗螺丝钉。有了足够的肌肉和愤怒，你会把它带进去，但它不会很漂亮，没有人会对结果感到满意。
### TokenRequest API
在撰写本文时，`TokenRequest` API 仍然是一个 **beta** 特性。
`TokenRequest` API 允许您请求特定范围的短期服务帐户。虽然它提供了稍好的安全性，因为它将过期并且范围有限，但它仍然绑定到服务帐户，这意味着没有组，并且仍然存在将令牌安全地提供给用户并审核其使用的问题。
`TokenRequest` API 生成的令牌是为其他系统与你的集群对话而构建的；它们不应该被用户使用。
### 自定义认证 webhooks
如果你已经有了一个不使用现有标准的身份平台，一个定制的认证网钩会让你集成它，而不必定制 API 服务器。托管托管 Kubernetes 实例的云提供商通常使用该功能。
您可以定义一个认证 webhook，API 服务器将使用令牌调用它来验证它并获取关于用户的信息。除非您使用为其构建 Kubernetes 分发版的自定义 IAM 令牌系统来管理公共云，否则不要这样做。编写自己的认证就像编写自己的加密一样，只是不要这样做。我们为 Kubernetes 看到的每个自定义认证系统都可以归结为对 OIDC 的苍白模仿或“传递密码”。就像用锤子敲螺丝一样，你可以做到，但是会很痛苦。这主要是因为你更有可能把螺丝拧进自己的脚，而不是把螺丝穿过木板。
### 拱顶石
熟悉 OpenStack 的人会认出 Keystone 这个名字是一个身份提供者。如果您不熟悉 Keystone，它是 OpenStack 部署中使用的默认身份提供程序。
Keystone 托管处理认证和令牌生成的应用编程接口。OpenStack 将用户存储在 Keystone 的数据库中。虽然使用 Keystone 更常见于 OpenStack，但 Kubernetes 也可以配置为使用 Keystone 进行用户名和密码认证，但有一些限制:
*   使用 Keystone 作为 Kubernetes 的 IdP 的主要限制是，它只能与 Keystone 的 LDAP 实现一起工作。虽然您可以使用这种方法，但是您应该考虑到只支持用户名和密码，因此您正在创建一个具有非标准协议的身份提供者，以向 LDAP 服务器进行认证，这几乎是任何 OIDC IdP 都可以开箱即用的。
*   你不能用 Keystone 来利用 SAML 或 OIDC，尽管 Keystone 支持 OpenStack 的两种协议，这限制了用户进行认证的方式，从而使你无法使用多种多因素选项。
*   很少有应用知道如何在 OpenStack 之外使用 Keystone 协议。您的集群将有多个应用组成您的平台，这些应用不知道如何与 Keystone 集成。
使用 Keystone 当然是一个吸引人的想法，尤其是如果你正在 OpenStack 上部署，但最终，它非常有限，你可能会投入和使用 OIDC 一样多的工作来集成 Keystone。
下一节将讨论我们在这里探讨的细节，并将它们应用于将认证集成到集群中。当您完成实现时，您将看到`kubectl`、应用编程接口服务器和您的身份提供者如何交互来提供对集群的安全访问。我们将把这些特性与常见的企业需求联系起来，以说明为什么理解 OpenID Connect 协议的细节很重要。
# 为 OpenID 连接配置种类
对于我们的示例部署，我们将使用来自客户的场景，FooWidgets。Foowidgets 有一个 Kubernetes 集群，他们希望使用 OIDC 集成这个集群。建议的解决方案需要满足以下要求:
*   Kubernetes 必须使用我们的中央认证系统，活动目录联合服务。
*   我们需要能够将活动目录组映射到我们的 RBAC `RoleBinding`对象。
*   用户需要访问 Kubernetes 仪表板。
*   用户需要能够使用命令行界面。
*   必须满足所有企业合规性要求。
让我们详细探讨 每一项，并解释我们如何满足客户的需求。
## 解决需求
我们企业的需求需要多个移动部件，包括集群内部和外部。我们将研究这些组件中的每一个，以及它们与构建经过认证的集群之间的关系。
### 使用活动目录联合服务
如今，大多数企业使用微软的活动目录来存储关于用户及其凭证的信息。根据您企业的规模，拥有多个用户居住的域或林并不罕见。如果您的 IdP 很好地集成到微软的 Kerberos 环境中，它可能知道如何导航这些不同的系统。大多数非微软应用不是，包括大多数身份提供者。**活动目录联盟服务** ( **ADFS** )是微软的 IdP，支持【SAML2 和 OpenID Connect，它知道如何导航企业实现的域和林。这在许多大企业中很常见。
ADFS 的下一个决定是使用 SAML2 还是 OpenID Connect。在撰写本文时，SAML2 更容易实现，大多数拥有 ADFS 的企业环境更喜欢使用 SAML2。SAML2 的另一个好处是它不需要我们的集群和 ADFS 服务器之间的连接；所有重要信息都通过用户的浏览器传输。这减少了为启动和运行集群而需要实现的潜在防火墙规则。
重要说明
别担心——你不需要 ADFS 准备好去做这个练习。我们有一个方便的 SAML 测试身份提供者，我们将使用它。您不需要安装任何东西就可以在您的 KinD 集群中使用 SAML2。
### 将活动目录组映射到 RBAC 角色绑定
当我们开始谈论授权时，这将变得非常重要。这里需要指出的重要一点是，ADFS 有能力将用户的组成员身份放入 SAML 断言中，然后我们的集群可以使用它。
### 不间断的仪表板访问