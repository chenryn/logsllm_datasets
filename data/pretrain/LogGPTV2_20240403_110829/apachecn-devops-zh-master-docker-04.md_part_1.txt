# 四、管理容器
到目前为止，我们一直专注于如何构建、存储和分发我们的 Docker 映像。现在，我们将了解如何启动容器，以及如何使用 Docker 命令行客户端来管理容器并与之交互。
在深入研究可用的命令之前，我们将通过深入了解更多细节来重温第一章中使用的命令。一旦我们熟悉了容器命令，我们将查看 Docker 网络和 Docker 卷。
我们将涵盖以下主题:
*   Docker 容器命令:
    *   基础知识
    *   与您的容器交互
    *   日志和流程信息
    *   资源限制
    *   容器状态和杂项命令
    *   移除容器
*   Docker 网络和卷
# 技术要求
在本章中，我们将继续使用本地 Docker 安装。和之前一样，本章中的截图将来自我的首选操作系统 macOS，但是我们将运行的 Docker 命令将在我们迄今为止安装了 Docker 的所有三个操作系统上工作；然而，一些支持命令可能只适用于 macOS 和基于 Linux 的操作系统，它们将是少之又少。
查看以下视频，了解《行为准则》:
[http://bit.ly/2yupP3n](http://bit.ly/2yupP3n)
# Docker 容器命令
在我们深入研究更复杂的 Docker 命令之前，让我们回顾一下前面几章中使用的命令，并深入了解更多细节。
# 基础知识
在[第 1 章](01.html)、*Docker 概述*中，我们使用以下命令启动了所有容器中最基本的容器`hello-world`容器:
```
$ docker container run hello-world
```
您可能还记得，该命令从 Docker 集线器中拉出一个 1.84 KB 的映像。您可以在[https://store.docker.com/img/hello-world/](https://store.docker.com/img/hello-world/)找到该映像的 Docker Store 页面，根据以下 Dockerfile，它运行一个名为`hello`的可执行文件:
```
FROM scratch
COPY hello /
CMD ["/hello"]
```
`hello`可执行文件将`Hello from Docker!`文本打印到终端，然后程序退出。从以下终端输出的完整消息文本中可以看到，`hello`二进制文件也让您确切知道刚刚发生了哪些步骤:
![](img/60c57d8f-1e69-4387-ae4f-61328267a54a.png)
随着进程的退出，我们的容器也停止了；这可以通过运行以下命令看到:
```
$ docker container ls -a
```
该命令的输出如下所示:
![](img/00190aaa-8351-4217-a20a-9a5f46206da2.png)
您可能会注意到，在终端输出中，我首先运行了带有和不带有`-a`标志的`docker container ls`—这是`--all`的简写，因为在没有标志的情况下运行它不会显示任何退出的容器。
我们不必给我们的容器命名，因为它存在的时间还不够长，不足以让我们关心它叫什么。然而，Docker 会自动为容器命名，在我的例子中，你可以看到它被称为`pensive_hermann`。
在您使用 Docker 的过程中，您会注意到，如果您选择让它为您生成容器，它会为您的容器提供一些非常有趣的名称。虽然这有点跑题，但是生成名称的代码可以在`names-generator.go`中找到。就在源代码的末尾，它有如下`if`语句:
```
if name == "boring_wozniak" /* Steve Wozniak is not boring */ {
  goto begin
}
```
这意味着永远不会有一个叫做`boring_wozniak`的容器(也是非常正确的)。
Steve Wozniak is an inventor, electronics engineer, programmer, and entrepreneur who co-founded Apple Inc. with Steve Jobs. He is known as a pioneer of the personal computer revolution of the 70s and 80s, and is definitely not boring!
我们可以通过运行以下命令移除状态为`exited`的容器，确保您用自己的容器名称替换容器名称:
```
$ docker container rm pensive_hermann
```
同样，在[第 1 章](01.html)、 *Docker 概述*的结尾，我们使用官方 nginx 映像启动了一个容器，使用了以下命令:
```
$ docker container run -d --name nginx-test -p 8080:80 nginx
```
大家可能还记得，这个下载映像并运行它，将我们主机上的端口`8080`映射到容器上的端口`80`，并将其称为`nginx-test`:
![](img/796a8134-aa46-4c0a-b133-d47ebca3ad68.png)
如您所见，运行`docker image ls`向我们显示，我们现在已经下载并运行了两个映像。以下命令向我们展示了一个正在运行的容器:
```
$ docker container ls
```
以下终端输出显示，当我运行命令时，我的手机已经开机 5 分钟了:
![](img/f002c3b3-9feb-4993-8137-95b09982b12c.png)
从我们的`docker container run`命令中可以看到，我们引入了三个标志。其中之一是`-d`，这是`--detach`的简写。如果我们没有添加这个标志，那么我们的容器将在前台执行，这意味着我们的终端将被冻结，直到我们通过按下 *Ctrl* + *C* 向进程传递一个转义命令。
我们可以通过运行以下命令来启动第二个`nginx`容器，并在我们已经启动的容器旁边运行，从而看到这一点:
```
$ docker container run --name nginx-foreground -p 9090:80 nginx
```
一旦启动，打开浏览器，进入`http://localhost:9090/`。当您加载页面时，您会注意到您的页面访问被打印到屏幕上；在浏览器中点击刷新会显示更多点击，直到你在终端中按下 *Ctrl* + *C* 。
![](img/5f74deb2-6202-486b-b99e-542262ab4569.png)
运行`docker container ls -a`显示您有两个容器，其中一个已经退出:
![](img/595d8d02-f115-4928-9bc6-689caa8046a2.png)
发生了什么？当我们移除分离标志时，Docker 将我们直接连接到容器内的 nginx 进程，这意味着我们可以看到该进程的`stdin`、`stdout`和`stderr`。当我们使用 *Ctrl* + *C* 时，我们实际上向 nginx 进程发送了一条指令来终止它。因为这是保持我们的容器运行的进程，一旦不再有运行的进程，容器就立即退出。
Standard input (`stdin`) is the handle that our process reads to get information from the end user. Standard output (`stdout`) is where the process writes normal information to. Standard error (`stderr`) is where the process writes error messages to.
当我们启动`nginx-foreground`容器时，您可能已经注意到的另一件事是，我们使用`--name`标志给了它一个不同的名称。
这是因为不能有两个同名的容器，因为 Docker 为您提供了使用`CONTAINER ID`或`NAME`值与容器交互的选项。这就是名字生成器功能存在的原因:给你不想给自己命名的容器分配一个随机的名字——也是为了确保我们永远不会称史蒂夫·沃兹尼亚克为无聊。
最后要提到的是，当我们启动`nginx-foreground`时，我们要求 Docker 将港口`9090`映射到容器上的港口`80`。这是因为我们不能将多个进程分配给主机上的一个端口，所以如果我们尝试启动与第一个端口相同的第二个容器，我们会收到一条错误消息:
```
docker: Error response from daemon: driver failed programming external connectivity on endpoint nginx-foreground (3f5b355607f24e03f09a60ee688645f223bafe4492f807459e4a2b83571f23f4): Bind for 0.0.0.0:8080 failed: port is already allocated.
```
此外，由于我们在前台运行容器，您可能会从 nginx 进程收到一个错误，因为它无法启动:
```
ERRO[0003] error getting events from daemon: net/http: request cancelled
```
但是，您可能还注意到，我们正在映射到容器上的端口 80—为什么那里没有错误？
嗯，正如[第 1 章](01.html)*Docker 概述*所解释的，容器本身就是孤立的资源，也就是说我们可以用港口 80 重映射推出任意多的容器，它们永远不会和其他容器发生冲突；只有当我们想从 Docker 主机路由到暴露的容器端口时，才会遇到问题。
让我们的 nginx 容器在下一节继续运行。
# 与您的容器交互
到目前为止，我们的容器只运行一个进程。Docker 为您提供了一些工具，使您能够分叉其他进程并与之交互。
# 附上
与运行容器交互的第一种方式是`attach`到运行过程。我们仍在运行我们的`nginx-test`容器，因此让我们通过运行以下命令来连接到它:
```
$ docker container attach nginx-test
```
打开浏览器，转到`http://localhost:8080/`会将 nginx 访问日志打印到屏幕上，就像我们启动`nginx-foreground`容器时一样。按下 *Ctrl* + *C* 将终止该过程，并使您的终端恢复正常；但是，和以前一样，我们会终止保持容器运行的进程:
![](img/1bb4e06d-3b7a-4ff5-a240-277270cfc9f2.png)
我们可以通过运行以下命令来启动容器备份:
```
$ docker container start nginx-test
```
这将在分离状态下启动容器，这意味着它将再次在后台运行，因为这是容器最初启动的状态。前往`http://localhost:8080/`会再次显示 nginx 欢迎页面。
让我们重新连接到我们的流程，但这次有了一个额外的选项:
```
$ docker container attach --sig-proxy=false nginx-test 
```
点击几次容器的网址，然后按下 *Ctrl* + *C* 会将我们从 nginx 进程中分离出来，但这一次，它不会终止 nginx 进程，而是将我们返回到我们的终端，使容器处于分离状态，这可以通过运行`docker container ls`看到:
![](img/a4b9322c-7f40-4ca1-8a24-86b30d727a2b.png)
# 高级管理人员
如果您需要连接到您的容器正在运行的进程，那么`attach`命令是有用的，但是如果您需要一些更具交互性的东西呢？
可以使用`exec`命令；这在容器中产生了第二个进程，您可以与之交互。例如，要查看`/etc/debian_version`文件的内容，我们可以运行以下命令:
```
$ docker container exec nginx-test cat /etc/debian_version
```
这将产生第二个过程，在这种情况下是 cat 命令，它将`/etc/debian_version`的内容打印到`stdout`。然后，第二个进程将终止，让我们的容器保持在执行 exec 命令之前的状态:
![](img/26de55e0-7fde-47c8-8d5b-304a3fe6da7e.png)
通过运行以下命令，我们可以更进一步:
```
$ docker container exec -i -t nginx-test /bin/bash
```
这一次，我们分叉了一个 bash 进程，并使用`-i`和`-t`标志来保持对容器的开放控制台访问。`-i`标志是`--interactive`的简写，它指示 Docker 保持`stdin`打开，以便我们可以向进程发送命令。`-t`标志是`--tty`的缩写，为会话分配一个伪 TTY。
Early user terminals connected to computers were called teletypewriters. While these devices are no longer used today, the acronym TTY has continued to be used to described text-only consoles in modern computing.
这意味着您将能够像远程终端会话一样与容器交互，如 SSH:
![](img/adc82b1e-ce80-447f-ba61-df6187947c28.png)
虽然这非常有用，因为您可以像虚拟机一样与容器交互，但我不建议对容器进行任何更改，因为它们正在使用伪 TTY 运行。这些更改很可能不会持续，并且在移除容器时会丢失。我们将在[第 12 章](13.html)、*Docker 工作流程*中更详细地探讨这背后的思想。
# 日志和流程信息
到目前为止，我们已经附加到容器中的流程，或者容器本身，以查看信息。Docker 提供了一些命令，允许您查看关于容器的信息，而不必使用`attach`或`exec`命令。
# 日志
`logs`命令非常不言自明；它允许您与容器的`stdout`流进行交互，Docker 正在后台跟踪该流。例如，要查看我们的`nginx-test`容器最后写入`stdout`的条目，您只需要使用以下命令:
```
$ docker container logs --tail 5 nginx-test
```
该命令的输出如下所示:
![](img/f4d55587-638d-40a9-b254-6ea3b7dfd5ca.png)
要实时查看日志，我只需运行以下命令:
```
$ docker container logs -f nginx-test
```
`-f`标志是`--follow`的简写。比方说，我还可以通过运行以下命令来查看自某个时间以来记录的所有内容:
```
$ docker container logs --since 2018-08-25T18:00 nginx-test
```
该命令的输出如下所示:
![](img/81472a8d-7d42-47f3-8992-3ef68d28d1f2.png)
您可能会注意到，在前面的输出中，访问日志中的时间戳是 17:12，在 18:00 之前。为什么会这样？
`logs`命令显示的是 Docker 记录的`stdout`的时间戳，而不是容器内的时间。当我运行以下命令时，您可以看到这一点:
```
$ date
$ docker container exec nginx-test date 
```
输出如下所示:
![](img/ad0e1a71-4115-41f3-9cf9-ce4611e9c86e.png)
由于**英国夏令时** ( **BST** )在我的主机上生效，我的主机和容器之间有一个小时的时差。
幸运的是，为了避免混淆——或者根据你对它的看法增加混淆——你可以将`-t`添加到你的`logs`命令中: