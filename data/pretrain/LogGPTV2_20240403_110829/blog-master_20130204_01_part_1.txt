## PostgreSQL PITR THREE recovery target MODE: name,xid,time USE CASE - 1  
### 作者                                       
digoal                               
### 日期                                                                                                   
2013-02-04                              
### 标签                                
PostgreSQL , PITR , 时间点恢复 , 最佳实践  
----                                                                                                
## 背景                            
前面一篇BLOG分析了PostgreSQL PITR的停止点recoveryStopsHere,   
[PostgreSQL recovery target introduce](../201301/20130130_01.md)  
我们知道停止点的判断首先要满足xl_info是以下值之一 :   
```  
XLOG_XACT_COMMIT  
XLOG_XACT_ABORT  
XLOG_XACT_COMMIT_COMPACT  
```  
也就是事务结束(提交或者回滚)的位置.  
src/include/access/xact.h  
```  
/*  
 * XLOG allows to store some information in high 4 bits of log  
 * record xl_info field  
 */  
#define XLOG_XACT_COMMIT                        0x00  
#define XLOG_XACT_PREPARE                       0x10  
#define XLOG_XACT_ABORT                         0x20  
#define XLOG_XACT_COMMIT_PREPARED       0x30  
#define XLOG_XACT_ABORT_PREPARED        0x40  
#define XLOG_XACT_ASSIGNMENT            0x50  
#define XLOG_XACT_COMMIT_COMPACT        0x60  
```  
或者是一个还原点 :   
```  
XLOG_RESTORE_POINT  
```  
也就是使用pg_create_restore_point创建的还原点.  
src/include/catalog/pg_control.h  
```  
/* XLOG info values for XLOG rmgr */  
#define XLOG_CHECKPOINT_SHUTDOWN                0x00  
#define XLOG_CHECKPOINT_ONLINE                  0x10  
#define XLOG_NOOP                                               0x20  
#define XLOG_NEXTOID                                    0x30  
#define XLOG_SWITCH                                             0x40  
#define XLOG_BACKUP_END                                 0x50  
#define XLOG_PARAMETER_CHANGE                   0x60  
#define XLOG_RESTORE_POINT                              0x70  
#define XLOG_FPW_CHANGE                         0x80  
```  
## 注意  
恢复PAUSE 的处理在判断recovery_target_inclusive前, 所以如果recovery.conf中使用了pause_at_recovery_target, 那么recovery_target_inclusive将不起作用.  
src/backend/access/transam/xlog.c  
```  
				/*  
                                 * Have we reached our recovery target?  
                                 */  
                                if (recoveryStopsHere(record, &recoveryApply))  
                                {  
                                        if (recoveryPauseAtTarget)  
                                        {  
                                                SetRecoveryPause(true);  
                                                recoveryPausesHere();  
                                        }  
                                        reachedStopPoint = true;        /* see below */  
                                        recoveryContinue = false;  
                                        /* Exit loop if we reached non-inclusive recovery target */  
                                        if (!recoveryApply)  
                                                break;  
                                }  
```  
下面以PostgreSQL 9.2.1为例, 来解释一下停止点的含义.  
测试环境 :   
```  
$PGDATA=/data05/ocz/pg_root  
backupdir=/data05/ocz/pgbak  
archdir=/data05/ocz/pgbak/arch  
postgresql.conf  
wal_level = hot_standby  
archive_mode = on  
archive_command = 'cp %p /data05/ocz/pgbak/arch/%f'  
hot_standby = on  
recovery.conf  
restore_command = 'cp /data05/ocz/pgbak/arch/%f %p'  
#recovery_target_name = ''  
#recovery_target_time = ''      # e.g. '2004-07-14 22:39:00 EST'  
#recovery_target_xid = '1687'  
#recovery_target_inclusive = true  # 默认true  
recovery_target_timeline = 'latest'  
pause_at_recovery_target = true  
standby_mode = on  
```  
1\.   
基础备份, 将$PGDATA拷贝到/data05/ocz/pgbak/pg_root  
```  
select pg_start_backup(now()::text);  
cp -r $PGDATA /data05/ocz/pgbak/pg_root  
select pg_stop_backup();  
```  
2\.   
创建测试表 :   
测试表 :   
```  
create table a(id int, crt_time timestamp);  
create table b(id int, crt_time timestamp);  
create table c(id int, crt_time timestamp);  
```  
3\.   
请按顺序执行以下SQL, 注意每一个PITR恢复停止点.   
一个长事务在执行过程中, 可能已经有几个新的事务执行并提交了.   
根据恢复停止点的概念, 恢复到一个小的XID, 数据库打开的时候, 可能已经到了大的xid. 原因就是如此.  
```  
SESSION A :   
postgres=# begin;  
BEGIN  
postgres=# insert into a (id, crt_time) values (1, clock_timestamp()) returning id,crt_time;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:30:44.091741  
(1 row)  
INSERT 0 1  
SESSION B :   
postgres=# begin;  
BEGIN  
postgres=# insert into b (id, crt_time) values (1, clock_timestamp()) returning id,crt_time;  
 id |         crt_time            
----+---------------------------  
  1 | 2013-02-04 15:31:05.93215  
(1 row)  
INSERT 0 1  
SESSION A :   
postgres=# insert into a (id, crt_time) values (2, clock_timestamp()) returning id,crt_time;  
 id |         crt_time            
----+---------------------------  
  2 | 2013-02-04 15:31:19.57222  
(1 row)  
INSERT 0 1  
SESSION C :   
postgres=# begin;  
BEGIN  
postgres=# insert into c (id, crt_time) values (1, clock_timestamp()) returning id,crt_time;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:31:34.491555  
(1 row)  
INSERT 0 1  
SESSION D :   
postgres=# select pg_create_restore_point('test1');  
 pg_create_restore_point   
-------------------------  
 0/50026C8  
(1 row)  
-- 本例的第1个还原点. (recovery_target_name='test1')  
select * from a;  
select * from b;  
select * from c;  
-- 无数据.  
SESSION A :   
postgres=# insert into a (id, crt_time) values (3, clock_timestamp()) returning id,crt_time;  
 id |          crt_time            
----+----------------------------  
  3 | 2013-02-04 15:32:00.226317  
(1 row)  
INSERT 0 1  
SESSION C :   
postgres=# insert into c (id, crt_time) values (2, clock_timestamp()) returning id,crt_time;  
 id |          crt_time            
----+----------------------------  
  2 | 2013-02-04 15:32:19.168515  
(1 row)  
INSERT 0 1  
postgres=# select txid_current();  
 txid_current   
--------------  
         1696  
(1 row)  
postgres=# commit;  
COMMIT  
-- 本例的第2个还原点.(recovery_target_xid='1696')  
postgres=# select * from a;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from b;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from c;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:31:34.491555  
  2 | 2013-02-04 15:32:19.168515  
(2 rows)  
SESSION D :   
postgres=# select pg_create_restore_point('test2');  
 pg_create_restore_point   
-------------------------  
 0/5002910  
(1 row)  
-- 本例的第3个还原点.(recovery_target_name='test2')  
postgres=# select * from a;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from b;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from c;  
 id |          crt_time            
----+----------------------------  
  1 | 2013-02-04 15:31:34.491555  
  2 | 2013-02-04 15:32:19.168515  
(2 rows)  
SESSION B :   
postgres=# select txid_current();  
 txid_current   
--------------  
         1695  
(1 row)  
postgres=# commit;  
COMMIT  
-- 本例的第4个还原点.(recovery_target_xid='1695')  
postgres=# select * from a;  
 id | crt_time   
----+----------  
(0 rows)  
postgres=# select * from b;  
 id |         crt_time            
----+---------------------------  
  1 | 2013-02-04 15:31:05.93215  