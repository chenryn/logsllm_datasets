## PostgreSQL 13 preview - wait event sample - 等待事件统计(插件,hook) - ASH - performance insight   
### 作者                                                                      
digoal                                                                                                               
### 日期                                                                                                               
2020-01-01                                                                                                            
### 标签                                                                                                               
PostgreSQL , 等待事件 , 统计 , 采样 , ash , 性能洞察 , performance insight , oracle , mysql , powa   
----                                                                                                               
## 背景     
PostgreSQL 活跃会话表pg_stat_activity 表示数据库会话的当前状态，其中有表示会话当前正在等待的事件的信息，但是只有当前状态，实际上，我们可能还需要更多信息来分析数据库的性能问题：  
1、某个事务，有多少种等待事件，每个等待事件分别等了多少次，每个等待事件分别等了多久。  
2、某条sql，在一次特定的请求种：有多少种等待事件，每个等待事件分别等了多少次，每个等待事件分别等了多久。  
3、某条sql，在一个统计周期内请求了多少次，一共：有多少种等待事件，每个等待事件分别等了多少次，每个等待事件分别等了多久。  
4、某个会话，在一个统计周期内请求了多少次，一共：有多少种等待事件，每个等待事件分别等了多少次，每个等待事件分别等了多久。  
5、某个DB，在一个统计周期内请求了多少次，一共：有多少种等待事件，每个等待事件分别等了多少次，每个等待事件分别等了多久。  
6、用户，在一个统计周期内请求了多少次，一共：有多少种等待事件，每个等待事件分别等了多少次，每个等待事件分别等了多久。  
如果有以上统计信息，可以更加精准的了解数据库的瓶颈在哪？  
要完成以上统计，必须记录每次等待的耗时，次数。目前并没有这个信息。  
```  
db1=# \d pg_stat_activity   
                      View "pg_catalog.pg_stat_activity"  
      Column      |           Type           | Collation | Nullable | Default   
------------------+--------------------------+-----------+----------+---------  
 datid            | oid                      |           |          |   
 datname          | name                     |           |          |   
 pid              | integer                  |           |          |   
 usesysid         | oid                      |           |          |   
 usename          | name                     |           |          |   
 application_name | text                     |           |          |   
 client_addr      | inet                     |           |          |   
 client_hostname  | text                     |           |          |   
 client_port      | integer                  |           |          |   
 backend_start    | timestamp with time zone |           |          |   
 xact_start       | timestamp with time zone |           |          |   
 query_start      | timestamp with time zone |           |          |   
 state_change     | timestamp with time zone |           |          |   
 wait_event_type  | text                     |           |          |   
 wait_event       | text                     |           |          |   
 state            | text                     |           |          |   
 backend_xid      | xid                      |           |          |   
 backend_xmin     | xid                      |           |          |   
 query            | text                     |           |          |   
 backend_type     | text                     |           |          |   
```  
```  
db1=# select wait_event_type, wait_event, count(*) from pg_stat_activity group by 1,2 order by 3 desc;  
 wait_event_type |      wait_event      | count   
-----------------+----------------------+-------  
                 |                      |    26  
 Client          | ClientRead           |     5  
 Activity        | LogicalLauncherMain  |     1  
 LWLock          | ProcArrayLock        |     1  
 Activity        | BgWriterHibernate    |     1  
 IPC             | ProcArrayGroupUpdate |     1  
 IO              | WALWrite             |     1  
 Activity        | CheckpointerMain     |     1  
 Activity        | AutoVacuumMain       |     1  
(9 rows)   
```  
目前有什么？  
1、pg_wait_sampling插件，记录等待事件的次数，但是不记录等待时间。  
[《PostgreSQL 等待事件 及 等待采样统计(pg_wait_sampling)》](../201610/20161006_01.md)    
powa有用到这个插件来展示等待事件维度的统计数据。  
[《powa4 PostreSQL Workload Analyzer - PostgreSQL监控工具、带WEB展示 - 索引推荐,等待事件分析,命中率,配置变更跟踪等》](../201905/20190520_01.md)    
2、除此以外，aws, alibaba在产品中也提供了等待事件的快照（定期采集pg_stat_activity）的信息，同样，只有等待事件的次数，没有耗时。  
[《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)    
PG 13可能引入等待事件的统计（包括次数、耗时），类似oracle ash  
```  
Top 5 Timed Events  
~~~~~~~~~~~~~~~~~~                                                % Total  
Event                                         Waits    Time (s) Call Time  
-------------------------------------- ------------ ----------- ---------  
CPU time                                                    559     88.80  
log file parallel write                       2,181          28      4.42  
SQL*Net more data from client               516,611          27      4.24  
db file parallel write                       13,383          13      2.04  
db file sequential read                         563           2       .27  
```  
但是同时行业可能引入一个问题，性能损耗，因为gettimeofday引入的问题。  
因此可能会以插件形式存在，用户可以自由开关统计。  
```  
Michael Paquier  writes:  
> This does not need a configure switch.  
It probably is there because the OP realizes that most people wouldn't  
accept having this code compiled in.  
> What's the performance penalty?  I am pretty sure that this is  
> measurable as wait events are stored for a backend for each I/O  
> operation as well, and you are calling a C routine within an inlined  
> function which is designed to be light-weight, doing only a four-byte  
> atomic operation.  
On machines with slow gettimeofday(), I suspect the cost of this  
patch would be staggering.  Even with relatively fast gettimeofday,  
it doesn't look acceptable for calls in hot code paths (for instance,  
lwlock.c).  
A bigger problem is that it breaks stuff.  There are countless  
calls to pgstat_report_wait_start/pgstat_report_wait_end that  
assume they have no side-effects (for example, on errno) and  
can never fail.  I wouldn't trust GetCurrentTimestamp() for either.  
If the report_wait calls can't be dropped into code with *complete*  
certainty that they're safe, that's a big cost.  
Why exactly is this insisting on logging timestamps and not,  
say, just incrementing a counter?  I think doing it like this  
is almost certain to end in rejection.  
			regards, tom lane  
```  
于此相关的行为包括：auto_explain 插件开启后，也会引入gettimeofday。凡有时间相关的可能都有类似问题，例如 log_duration, log_min_duration_statement, pg_stat_statements 等。  
[《PostgreSQL pg_stat_statements 开启后引入slock导致高并发下的性能问题》](../201912/20191230_02.md)    
在这个patch的讨论中也提到了一个想法，采样统计，不统计每次等待，想法类似  
[《PostgreSQL 13 preview - SQL采样比例设置 log_min_duration_sample log_min_duration_sample》](../201912/20191204_04.md)    
[《PostgreSQL 12 preview - 支持SQL采样比例设置 - Log all statements from a sample of transactions》](../201904/20190405_09.md)    
## patch 原型  
```  
Hello hackers,  
  This proposal is about recording additional statisticsofwait events.  
  PostgreSQL statistics Issue  
  ----------------------------------------  
  The pg_stat_activity view is very useful in analysis for performance issues.  
  But it is difficult to get information of wait events in detail,  
  when you need to deep dive into analysis of performance.  
  It is because pg_stat_activity just shows the current wait status of backend.  
  If PostgreSQL provides additional statistics about wait events,  
  it will be helpful in pinpointing the exact cause of throughput issue.  
  Proposal  
  ----------------------------------------  
  Record additional statistics items per wait event for every backend.  
  - total elapsed time to wait  
  - max elapsed time to wait  
  - number of times being waited  
  I suggest storing the above statistics in the pgBackendStatus structure.  
  typedef struct PgBackendStatus  
  {  
  ...  
  /*  
  * proc's wait_event additional information.  
  * each wait_events elapsed time  count.  
  */  
  TimestampTz st_wait_event_start_timestamp;  
  uint64 st_wait_event_total_elapsed[NUM_WAIT_EVENT];  
  uint64 st_wait_event_max_elapsed[NUM_WAIT_EVENT];  
  uint32 st_wait_event_counting[NUM_WAIT_EVENT];  
  }  
  PoC test  
  ----------------------------------------  
  I wrote a prototype patch.  
  With this patch, you can get additional wait event stats via  
  the new procedure ‘pg_stat_get_wait_events()’.  
  You can test by following steps.  
  1. apply git patch  
  - patch -p0  wait_event_stat_patchfile.diff  
  2. make distclean  
  3. configure --with-wait-event-detail  
  4. make  make install  
  5. start postgreSQL and execute psql  
  6. using pg_stat_get_wait_events(null) function  
  - input parameter is pid.  
  display example  
  postgres=# select * from pg_stat_get_wait_events(null) where counting 0;  
  pid | wait_event_type | wait_event | total_elapsed | max_elapsed | counting  
  -------+-----------------+-----------------------+---------------+-------------+----------  
  25291| LWLock | WALBufMappingLock |1359|376|6  
  25291| LWLock | WALWriteLock |679733|113803|8  
  25291| IO | BufFileRead |780|7|171  
  25291| IO | BufFileWrite |1247|19|171  
  25291| IO | DataFileExtend |44703|53|3395  
  25291| IO | DataFileImmediateSync |268798|72286|12  
  25291| IO | DataFileRead |91763|22149|30  
  25291| IO | WALSync |441139|60456|28  
  25291| IO | WALWrite |9567|637|737  
  24251| LWLock | WALBufMappingLock |1256|350|6  
  24251| LWLock | WALWriteLock |649140|153994|7  
  24251| IO | BufFileRead |620|9|172  
  24251| IO | BufFileWrite |1228|20|171  
  24251| IO | DataFileExtend |26884|51|3395  
  24251| IO | DataFileImmediateSync |208630|21067|12  
  24251| IO | DataFileRead |426278|17327|128  
  24251| IO | WALSync |307055|70853|24  
  24251| IO | WALWrite |17935|961|2720  
  (18rows)  
  etc. concept proposal  
  ------------------------------------------  