ciﬁc application, unless they are corrupt or become corrupted in
which case they behave like attacker processes and attacker scripts;
browsers are speciﬁed by the FKS model (see below). The mod-
eling of OAuth servers and scripts is outlined in Section 5.1 and
deﬁned in detail in [17].
Web Browsers. An honest browser is thought to be used by one
honest user, who is modeled as part of the browser. User actions,
such as following a link, are modeled as non-deterministic actions
of the web browser. User credentials are stored in the initial state
of the browser and are given to selected web pages when needed.
Besides user credentials, the state of a web browser contains (among
others) a tree of windows and documents, cookies, and web storage
data (localStorage and sessionStorage).
event and a state as input and (non-deterministically) returns a new
state and a sequence of events. The relation models a computation
step of the process. It is required that the output can be computed
(more formally, derived in the usual DY style) from the input event
and the state.
The so-called attacker process is a DY process which records all
messages it receives and outputs all events it can possibly derive
from its recorded messages. Hence, an attacker process carries out
all attacks any DY process could possibly perform. Attackers can
corrupt other parties.
A window inside a browser contains a set of documents (one be-
ing active at any time), modeling the history of documents presented
in this window. Each represents one loaded web page and contains
(among others) a script and a list of subwindows (modeling iframes).
The script, when triggered by the browser, is provided with all data
it has access to, such as a (limited) view on other documents and
windows, certain cookies, and web storage data. Scripts then output
a command and a new state. This way, scripts can navigate or create
windows, send XHRs and postMessages, submit forms, set/change
cookies and web storage data, and create iframes. Navigation and
security rules ensure that scripts can manipulate only speciﬁc as-
pects of the browser’s state, according to the web standards.
A browser can output messages on the network of different types,
namely DNS and HTTP(S) requests as well as XHRs, and it pro-
cesses the responses. Several HTTP(S) headers are modeled, includ-
ing, for example, cookie, location, strict transport security (STS),
and origin headers. A browser, at any time, can also receive a
so-called trigger message upon which the browser non-determinis-
tically chooses an action, for instance, to trigger a script in some
document. The script now outputs a command, as described above,
which is then further processed by the browser. Browsers can also
become corrupted, i.e., be taken over by web and network attackers.
Once corrupted, a browser behaves like an attacker process.
5. ANALYSIS
We now present our security analysis of OAuth (with the ﬁxes
mentioned in Section 3 applied). We ﬁrst present our model of
OAuth. We then formalize the security properties and state the
main theorem, namely the security of OAuth w.r.t. these properties.
We provide full details of the model and our proof in the technical
report [17].
5.1 Model
As mentioned above, our model for OAuth is based on the FKS
model outlined in Section 4. For the analysis, we extended the
model to include HTTP Basic Authentication [19] and Referrer
Policies [13] (the Referer header itself was already part of the
model). We developed the OAuth model to adhere to RFC6749,
the OAuth 2.0 standard, and follow the security considerations de-
scribed in [26].
Design. Our comprehensive model of OAuth includes all conﬁgu-
ration options of OAuth and makes as few assumptions as possible
in order to strengthen our security results:
OAuth Modes. Every RP and IdP may run any of the four OAuth
modes, even simultaneously.
Corruption. RPs, IdPs, and browsers can be corrupted by the at-
tacker at any time.
Redirection URIs. RP chooses redirection URIs explicitly or the
IdP selects a redirection URI that was registered before. Redirec-
tion URIs can contain patterns. This covers all cases speciﬁed in
the OAuth standard. We allow that IdPs do not strictly check the
redirection URIs, and instead apply loose checking, i.e., only the
origin is checked (this is the default for Facebook, for example).
This only strengthens the security guarantees we prove.
Client Secrets. Just as in the OAuth standard, RPs can, for a certain
IdP, have a secret or not have a secret in our model.
Usage of HTTP and HTTPS. Users may visit HTTP and HTTPS
URIs (e.g., for RPs) and parties are not required to use Strict-
Transport-Security (STS), although we still recommend STS in
practice (for example, to reduce the risk of password eavesdrop-
ping). Again, this only strengthens our results.
General User Interaction. As usual in the FKS model, the user can
at any time navigate backwards or forward in her browser history,
navigate to any web page, open multiple windows, start simultane-
ous login ﬂows using different or the same IdPs, etc. Web pages at
RPs can contain regular links to arbitrary external web sites.
Authentication at IdP. User authentication at the IdP, which is out
of the scope of OAuth, is performed using username and password.
Session Mechanism at RP. OAuth does not prescribe a speciﬁc ses-
sion mechanism to be used at an RP. Our model therefore includes
a standard cookie-based session mechanism (as suggested in [8]).
Attack Mitigations. To prove the security properties of OAuth,
our model includes the ﬁxes against the new attacks presented in
1211Section 3 as well as standard mitigations against known attacks. Al-
together this offers clear implementation guidelines, without which
OAuth would be insecure:
Honest Parties. RPs and IdPs, as long as they are honest, do
not include (untrusted) third-party JavaScript on their websites, do
not contain open redirectors, and do not have Cross-Site Script-
ing vulnerabilities. Otherwise, access tokens and authorization
codes can be stolen in various ways, as described, among others,
in [6, 20, 26, 36].
CSRF Protection. The state parameter is used with a nonce that is
bound to the user’s session (see [8]) to prevent CSRF vulnerabilities
on the RP redirection endpoint. Omitting or incorrectly using this
parameter can lead to attacks described in [6, 20, 25, 26, 36].
More speciﬁcally, a new state nonce is freshly chosen for each
login attempt. Otherwise, the following attack is applicable: First,
a user starts an OAuth ﬂow at some RP using a malicious IdP. The
IdP learns the state value that is used in the current user session.
Then, as soon as the user starts a new OAuth ﬂow with the same RP
and an honest IdP, the malicious IdP can use the known state value
to mount a CSRF attack, breaking the session integrity property.14
We also model CSRF protection for some URIs as follows: For
RPs, we model origin header checking15 (1) at the URI where the
OAuth ﬂow is started (for the implicit and authorization code mode),
(2) at the password login for the resource owner password creden-
tials mode, and (3) at the URI to which the JavaScript posts the
access token in the implicit mode. For IdPs, we do the same at the
URI to which the username and password pairs are posted. The
CSRF protection of these four URIs is out of the scope of OAuth
and therefore, we follow good web development practices by check-
ing the origin header. Without this or similar CSRF protection, IdPs
and RPs would be vulnerable to CSRF attacks described in [6, 36].
Referrer Policy and Status Codes. RPs and IdPs use the Referrer
Policy [13] to specify that Referer headers on links from any of
their web pages may not contain more than the origin of the re-
spective page. Otherwise, RPs or IdPs would be vulnerable to the
state leak attack described in Section 3.3 and the code leak attack
described in [21]. IdPs use 303 redirects following our ﬁx described
in Section 3.1.
HTTPS Endpoints. All endpoint URIs use HTTPS to protect against
attackers eavesdropping on tokens or manipulating messages (see,
e.g., [26, 36]). Obviously, IdPs or RPs do not register URIs that
point to servers other than their own. (Otherwise, access tokens or
authorization codes can be stolen trivially.)
Session Cookies. Cookies are always set with the secure attribute,
ensuring that the cookie value is only transmitted over HTTPS. Oth-
erwise, a network attacker could read cookie values by eavesdrop-
ping on non-HTTPS connections to RPs. After successful login at
an RP, the RP creates a fresh session id for that user. Otherwise, a
network attacker could set a login session cookie that is bound to a
known state value into the user’s browser (see [39]), lure the user
into logging in at the corresponding RP, and then use the session
cookie to access the user’s data at the RP (session ﬁxation, see [28]).
14Note that in this attack, the state value does not leak uninten-
tionally (in contrast to the state leak attack). Also note that this
attack and the mitigation we describe here, while not surprising, do
not seem to have been explicitly documented so far. For example,
nytimes.com is vulnerable also to this attack.
15The origin header is added to certain HTTP(S) requests by
browsers to declare the origin of the document that caused the re-
quest. For example, when a user submits a form loaded from the
URI http://a/form and this form is sent to http://b/path then the brow-
ser will add the origin header http://a in the request to b. All modern
browsers support origin headers. See [12] for details.
Authentication to the IdP. It is assumed that the user only ever sends
her password over an encrypted channel and only to the IdP this
password was chosen for (or to trusted RPs, as mentioned above).
(The user also does not re-use her password for different IdPs.)
Otherwise, a malicious IdP would be able to use the account of the
user at an honest IdP.
Authentication using Access Tokens. When an RP sends an access
token to the introspection endpoint of an IdP for authentication
(Step 12 in Figure 1), the IdP returns the user identiﬁer and the
client id for which the access token was issued (Step 13 ). The
RP must check that the returned client id is its own, otherwise a
malicious RP could impersonate an honest user at an honest RP
(see [20, 37]). We therefore require this check.
User Intention Tracking. We use explicit user intention tracking.
Otherwise, the attack described in Section 3.4 can be applied.
Concepts Used in Our Model. In our model and the security prop-
erties, we use the following concepts:
Protected Resources. Closely following RFC6749 [20], OAuth pro-
tected resources are an abstract concept for any resource an RP
could use at an IdP after successful authorization. For example, if
Facebook gives access to the friends list of a user to an RP, this
would be considered a protected resource. In our model, there is a
mapping from (IdP, RP, identity) to nonces (which model protected
resources). In this mapping, the identity part can be ⊥, modeling a
resource that is acquired in the client credentials mode and thus not
bound to a user.
Service Tokens. When OAuth is used for authentication, we as-
sume that after successful login, the RP sends a service token to the
browser. The intuition is that with this service token a user can use
the services of the RP. The service token consists of a nonce, the
user’s identiﬁer, and the domain of the IdP which was used in the
login process. The service token is a generic model for any session
mechanism the RP could use to track the user’s login status (e.g.,
a cookie). We note that the actual session mechanism used by the
RP after a successful login is out of the scope of OAuth, which is
why we use the generic concept of a service token. In our model,
the service token is delivered by an RP to a browser as a cookie.
Trusted RPs. In our model, among others, a browser can choose to
launch the resource owner password credentials mode with any RP,
causing this RP to know the password of the user. RPs, however,
can become corrupted and thus leak the password to the attacker.
Therefore, to deﬁne the security properties, we deﬁne the concept
of trusted RPs. Intuitively, this is a set of RPs a user entrusts with
her password. In particular, whether an RP is trusted depends on
the user. In our security properties, when we state that an adversary
should not be able to impersonate a user u in a run, we would
assume that all trusted RPs of u have not become corrupted in this
run.
OAuth Web System with a Network Attacker. We model OAuth
as a class of web systems (in the sense of Section 4) that can contain
an unbounded ﬁnite number of RPs, IdPs, and browsers. We call a
web system OWS n an OAuth web system with a network attacker if
it is of the form described in what follows.
Outline. The system consists of a network attacker, a ﬁnite set of
web browsers, a ﬁnite set of web servers for the RPs, and a ﬁnite
set of web servers for the IdPs. Recall that in OWS n, since we have
a network attacker, we do not need to consider web attackers (as
our network attacker subsumes all web attackers). The set of scripts
consists of the three scripts script_rp_index, script_rp_implicit, and
script_idp_form. We now brieﬂy sketch RPs, IdPs, and the scripts,
with full details provided in our technical report [17].
1212Relying Parties. Each RP is a web server modeled as an atomic DY
process following the description in Section 2, including all OAuth
modes, as well as the ﬁxes and mitigations discussed before. The
RP can either (at any time) launch a client credentials mode ﬂow or
wait for users to start any of the other ﬂows. RP manages two kinds
of sessions: The login sessions, which are used only during the user
login phase, and the service sessions (modeled by a service token
as described above). When receiving a special message, an RP can
become corrupted and then behaves like an attacker process.
Identity Providers. Each IdP is a web server modeled as an atomic
DY process following the description in Section 2, again including
all OAuth modes, as well as the ﬁxes and mitigations discussed
before. Users can authenticate to an IdP with their credentials. Just
as RPs, IdPs can become corrupted at any time.
Scripts. The scripts which run in a user’s browser are deﬁned as
follows: The script script_rp_index is loaded from an RP into a
user’s browser when the user visits the RP’s web site.
It starts
the authorization or login process. The script script_rp_implicit is
loaded into the user’s browser from an RP during an implicit mode
ﬂow to retrieve the data from the URI fragment. It extracts the
access token and state from the fragment part of its own URI. The
script then sends this information in the body of an HTTPS POST
request to the RP. The script script_idp_form is loaded from an IdP
into the user’s browser for user authentication at the IdP.
OAuth Web System with Web Attackers. In addition to OWS n,
we also consider a class of web systems where the network attacker
is replaced by an unbounded ﬁnite set of web attackers. We denote
such a system by OWS w and call it an OAuth web system with web
attackers, Such web systems are used to analyze session integrity,
see below.
Limitations of Our OAuth Model. While our model of OAuth is
very comprehensive, a few aspects of OAuth were not taken into
consideration in our analysis:
We do not model expiration of access tokens and session ids.
Also, IdPs may issue so-called refresh tokens in Step 9 of Figure 1.
In practice, an RP may use such a (long-living) refresh token to
obtain a new (short-lived) access token. In our model, we overap-
proximate this by not expiring access tokens. We also do not model
revocation of access tokens and user log out.
OAuth IdPs support controlling the scope of resources made avail-
able to an RP. For example, a Facebook user can grant a third party
the right to read her user proﬁle but deny access to her friends list.
The scope is a property of the access token, but handled internally
by the IdP with its implementation, details, and semantics highly
dependent on the IdP. We therefore model that RPs always get full
access to the user’s data at the IdP.
In practice, IdPs can send error messages (mostly static strings)
to RPs. We do not model these.
Limitations of the underlying FKS model are discussed in [14].
5.2 Security Properties
Based on the formal OAuth model described above, we now for-
mulate central security properties of OAuth, namely authorization,
authentication, and session integrity (see our technical report [17]
for the full formal deﬁnitions).
Authorization. Intuitively, authorization for OWS n means that an
attacker should not be able to obtain or use a protected resource
available to some honest RP at an IdP for some user unless, roughly
speaking, the user’s browser or the IdP is corrupted.
More formally, we say that OWS n is secure w.r.t. authorization if
the following holds true: if at any point in a run of OWS n an attacker
can obtain a protected resource available to some honest RP r at an
IdP i for some user u, then the IdP i is corrupt or, if u (cid:54)= ⊥, we have
that the browser of u or at least one of the trusted RPs of u must be
corrupted. Recall that if u = ⊥, then the resource was acquired in
the client credentials mode, and hence, is not bound to a user.
Authentication. Intuitively, authentication for OWS n means that
an attacker should not be able to login at an (honest) RP under the
identity of a user unless, roughly speaking, the IdP involved or the
user’s browser is corrupted. As explained above, being logged in at
an RP under some user identity means to have obtained a service
token for this identity from the RP.
More formally, we say that OWS n is secure w.r.t. authentication