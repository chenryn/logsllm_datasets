### Specific Application and Attacker Processes

In the context of a specific application, unless they are corrupt or become corrupted, processes and scripts behave as expected. In the event of corruption, these entities behave like attacker processes and scripts. Browsers, as specified by the FKS model (detailed below), are an essential part of this framework. The modeling of OAuth servers and scripts is outlined in Section 5.1 and defined in detail in [17].

### Web Browsers

An honest browser is assumed to be used by a single honest user, who is modeled as part of the browser. User actions, such as following a link, are modeled as non-deterministic actions of the web browser. User credentials are stored in the initial state of the browser and provided to selected web pages when necessary. The state of a web browser includes, among other things, a tree of windows and documents, cookies, and web storage data (localStorage and sessionStorage).

### Browser State and Events

A browser takes an event and a state as input and (non-deterministically) returns a new state and a sequence of events. This relation models a computation step of the process. It is required that the output can be computed (more formally, derived in the usual DY style) from the input event and the state.

The so-called attacker process is a DY process that records all messages it receives and outputs all events it can possibly derive from its recorded messages. Therefore, an attacker process can carry out any attack that a DY process could perform. Attackers can also corrupt other parties.

### Browser Windows and Documents

A window within a browser contains a set of documents (one being active at any time), modeling the history of documents presented in that window. Each document represents a loaded web page and includes, among other things, a script and a list of subwindows (modeling iframes). When triggered by the browser, the script is provided with all accessible data, such as a limited view on other documents and windows, certain cookies, and web storage data. Scripts then output a command and a new state, allowing them to navigate or create windows, send XHRs and postMessages, submit forms, set/change cookies and web storage data, and create iframes. Navigation and security rules ensure that scripts can only manipulate specific aspects of the browser's state according to web standards.

### Network Interactions

A browser can output messages on the network of different types, including DNS and HTTP(S) requests as well as XHRs, and it processes the responses. Several HTTP(S) headers are modeled, including cookie, location, strict transport security (STS), and origin headers. At any time, a browser can receive a trigger message, upon which the browser non-deterministically chooses an action, such as triggering a script in some document. The script then outputs a command, which is further processed by the browser. Browsers can also become corrupted, i.e., be taken over by web and network attackers. Once corrupted, a browser behaves like an attacker process.

### Security Analysis

We now present our security analysis of OAuth (with the fixes mentioned in Section 3 applied). We first present our model of OAuth, formalize the security properties, and state the main theorem, namely the security of OAuth with respect to these properties. Full details of the model and proof are provided in the technical report [17].

### Model

Our model for OAuth is based on the FKS model outlined in Section 4. For the analysis, we extended the model to include HTTP Basic Authentication [19] and Referrer Policies [13]. The OAuth model adheres to RFC6749, the OAuth 2.0 standard, and follows the security considerations described in [26].

#### Design

Our comprehensive model of OAuth includes all configuration options and makes as few assumptions as possible to strengthen our security results:

- **OAuth Modes**: Every RP and IdP may run any of the four OAuth modes, even simultaneously.
- **Corruption**: RPs, IdPs, and browsers can be corrupted by the attacker at any time.
- **Redirection URIs**: RPs choose redirection URIs explicitly, or the IdP selects a registered redirection URI. Redirection URIs can contain patterns, and IdPs can apply loose checking, e.g., only checking the origin.
- **Client Secrets**: RPs can have a secret or not, as per the OAuth standard.
- **HTTP and HTTPS Usage**: Users can visit HTTP and HTTPS URIs, and parties are not required to use Strict-Transport-Security (STS).
- **General User Interaction**: Users can navigate backwards or forwards, open multiple windows, and start simultaneous login flows using different or the same IdPs.

#### Authentication and Session Mechanisms

- **IdP Authentication**: User authentication at the IdP, which is out of the scope of OAuth, is performed using username and password.
- **Session Mechanism at RP**: Our model includes a standard cookie-based session mechanism.
- **Attack Mitigations**: The model includes fixes against new attacks and standard mitigations against known attacks.

### Security Properties

Based on the formal OAuth model, we formulate central security properties: authorization, authentication, and session integrity.

- **Authorization**: An attacker should not be able to obtain or use a protected resource available to an honest RP at an IdP for some user unless the IdP, the user's browser, or at least one of the trusted RPs of the user is corrupted.
- **Authentication**: An attacker should not be able to log in at an (honest) RP under the identity of a user unless the IdP involved or the user's browser is corrupted.

For detailed formal definitions, see our technical report [17].

### Limitations

While our model of OAuth is comprehensive, it does not cover:
- Expiration of access tokens and session IDs.
- Revocation of access tokens and user logout.
- Scope control of resources made available to an RP.
- Error messages sent by IdPs to RPs.

Limitations of the underlying FKS model are discussed in [14].