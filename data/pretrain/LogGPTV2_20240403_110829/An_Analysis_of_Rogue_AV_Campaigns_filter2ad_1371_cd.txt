the data and code of the VMM. Second, we enable VMX root-mode. Third, we
304
L. Martignoni et al.
Non-root mode
Root mode
IDT
GDT/LDT
Data &
Data &
Data &
Code
Data &
Code
Code
Code
Page
table
Page
Page
table
table
Page
table
Guest state
area
VMCS
Host state
area
Control
ﬁelds
GDT/LDT
IDT
Page
table
Data &
Code
Physical memory
Fig. 3. Memory layout after the launch of HyperSleuth; (cid:2)(cid:2)(cid:3) denotes the CPU con-
texts stored in the VMCS, −→ denotes physical memory mappings, and
denotes the
physical memory locations of the VMM that must not be made accessible to the guest.
create and initialize the VMCS. Fourth, we resume the normal execution of the
guest by entering non-root mode.
When, at the end of the launch, the CPU enters non-root mode, it loads
the context for executing the guest from the guest-state area of the VMCS.
The trick to load the VMM without interrupting the execution of the OS and
users’ applications is to set, in the VMCS, the context for non-root mode to the
same context in which the launch was initiated. The context in which the VMM
executes is instead deﬁned by the host-state area of the VMCS. Like during an
enter, the CPU loads the context from the VMCS during an exit. The context
is created from scratch during the launch and the host-state area is conﬁgured
accordingly. In particular, we create and register a dummy Interrupt Descriptor
Table (to ignore interrupts that might occur during switches between the two
VMX modes), we register the Global and Local Descriptor Tables (we use the
same tables used in non-root mode), we register the address of the VMM entry
point (i.e., the address of the routine for handling exits), and we assign the stack.
The set of events that trigger exits to root-mode are deﬁned in the execution
control ﬁelds of the VMCS. The conﬁguration of these ﬁelds depends on the type
of the forensic analysis we want to perform and can be changed dynamically.
VMM Trusted Launch. Although on the paper the launch of the VMM
appears a very simple process, it requires to perform several operations. Such
operations must be performed atomically, otherwise a skilled attacker may in-
terfere with the whole bootstrap process and tamper VMM code and data. To
maximize HyperSleuth portability, we decided to address this problem using a
software-based primitive for tamper-proof code execution. The primitive we rely
on is thoroughly described in [14]. In a few words, the primitive is based on a
challenge-response protocol and a checksum function. The trusted host issues
a challenge for the untrusted system and the challenge consists in computing a
Live and Trustworthy Forensic Analysis of Commodity Production Systems
305
checksum. The result of the checksum is sent back to the trusted host. A valid
checksum received within a predeﬁned time is the proof that a Trusted Comput-
ing Base (TCB) has been established on the untrusted system. The checksum
function is constructed such that the correct checksum value can be computed
in time only if the checksum function and the code for launching the VMM are
not tampered, and if the environment in which the checksum is computed and in
which the VMM launch will be performed guarantees that no attacker can inter-
rupt the execution and regain the control of the execution before the launch is
completed. Practically speaking, the correct checksum will be computed in time
only if the computation and the launch are performed with kernel privileges,
with interrupts disabled, and no VMM is running.
MMU Virtualization. In order to guarantee complete isolation of the VMM
from the guest, it is essential to ensure that the guest cannot access any of the
memory pages in use by the VMM (i.e., the crosshatched regions in Figure 3).
However, to perform any useful analysis, we need the opposite to be possible.
Although modern x86 CPUs provide hardware support for MMU virtualiza-
tion, we have opted for a software-based approach to maximize the portability
of HyperSleuth. The approach we use is based on the assumption that the direct
access to physical memory locations is not allowed by the CPU (with paging
enabled) and that physical memory locations are referenced through virtual ad-
dresses. The CPU maintains a mapping between virtual and physical memory
locations and manages the permissions of these locations through page tables.
By assuming the complete control of the page tables, the VMM can decide which
physical locations the guest can access. To do that, the VMM maintains a shadow
page table for each page table used by the guest, and tricks the guest into using
the shadow page table instead of the real one [17].
A shadow page table is a clone of the original page table and is used to
maintain a diﬀerent mapping between virtual and host physical addresses and to
enforce stricter memory protections. In our particular scenario, where the VMM
manages a single guest and the OS has already ﬁlled the page tables (because
the VMM launch is delayed), the speciﬁc duty of the shadow page table is to
maintain as much as possible the original mapping between virtual and physical
addresses and to ensure that none of the pages assigned to the VMM is mapped
into a virtual page accessible to the guest. As described in Section 4, we also
rely on the shadow page table to restrict and trap certain memory accesses to
perform the live forensic analysis. The algorithm we currently use to maintain
the shadow page tables trades oﬀ performance for simplicity and is based on
tracing and simulating all accesses to tables.
Unrestricted Guest Access to I/O Devices. In the typical deployment,
physical I/O devices connected to the host are shared between the VMM and
one or more guests. In our particular scenario, instead, there is no need to share
any I/O device between the guest and the VMM: HyperSleuth executes batch and
interacts only with the trusted host via network. Thus, the guest can be given
direct and unrestricted access to I/O devices. Since the OS runs in non-root
mode, unmodiﬁed, and at the highest privilege level, it is authorized to perform
306
L. Martignoni et al.
I/O operations, unless the VMM conﬁgures the execution control ﬁelds of the
VMCS such that I/O operations cause exits to root-mode. By not doing so, the
VMM allows the guest OS to perform unrestricted and direct I/O. This approach
simpliﬁes drastically the architecture of the VMM and, most importantly, allows
the OS to continue to perform I/O activities exactly as before, without any
additional overhead.
Direct Network Access. HyperSleuth relies on a trusted host to bootstrap
the dynamic root of trust and to store the result of the analysis. Since we are
assuming that no existing software component of the host can be trusted, the
only viable approach to communicate securely over the network is to dialog
directly with the network card. For this reason, HyperSleuth contains a mini-
malistic network driver that supports the card available on the host. All the
data transmitted over the network is encapsulated in UDP packets. Packets are
signed and encrypted automatically by the driver using a pre-shared key, which
we hardcode in HyperSleuth just before the launch.
As described in the previous paragraph, HyperSleuth does not virtualize hard-
ware peripherals, but it lets the guest to access them directly. Thus, the network
card must be shared transparently with the guest. In other words, to avoid in-
terferences with the network activity of the guest, HyperSleuth must save and
restore the original state of the card (i.e., the content of PCI registers), respec-
tively before and after using the network. To transmit a packet the driver writes
the physical address and the size of the packet to the appropriate control reg-
isters of the device. The driver then polls the status register of the device until
the transmission is completed. Polling is used because, for simplicity, we execute
all VMM code with interrupts disabled. Packets reception is implemented in the
same way.
VMM Removal. HyperSleuth can be completely removed from the system at
the end of the analysis. The removal essentially is the opposite process of the
launch. First, we disable VMX root-mode. Second, we deallocate the memory
regions assigned to the VMM (e.g., the Interrupt Descriptor Table, the stack,
and the code). Third, we update the context of the CPU such that the OS and
users’ applications can resume their normal execution. More precisely, we set the
context to that stored in the guest-state area of the VMCS, which reﬂects the
context of the CPU in non-root mode when the last exit occurred. Fourth, we
transfer the execution to a small snippet of code that deallocates the VMCS and
then transfers the control to where the execution was interrupted in non-root
mode.
4 Live Forensic Analysis
HyperSleuth operates completely in batch mode. The only user action required
is to copy an executable on the system to be analyzed and to ﬁre its execution.
This executable is a loader that establishes the dynamic root of trust by creating
a tamper-proof execution environment and by using this environment to launch
Live and Trustworthy Forensic Analysis of Commodity Production Systems
307
the VMM. Note that, the loader is removed from the memory and the disk
to prevent malicious software to detect its presence. Once launched, the VMM
performs the forensic analysis, transmits the results to the trusted hosts and
then removes itself.
Although HyperSleuth VMM is completely transparent to the OS and users’
applications and it is removed after the end of the analysis, the launch of the
VMM is a slightly invasive process. Indeed, it requires to execute the loader
that in turn loads a kernel driver (to launch the VMM) and might start other
additional in-guest utilities. Our claim is that, considered the valuable volatile
information HyperSleuth can gather from the system, the little modiﬁcations its
installation produces to the state of the system are an acceptable compromise.
After all, no zero invasive solution for a posteriori forensic analysis exists.
Currently, HyperSleuth supports three live forensic applications: a lazy phys-
ical memory dumper, a lie detector, and a system call tracer. Clearly, all these
analyses could be performed also without the need of a dynamic root of trust and
the VMM. Indeed, there are several commercial and open source applications
with the same capabilities available, but, by operating at the same privilege level
of the OS kernel to analyze, they can easily be tampered by an attacker (with
the same privileges), and cannot thus provide the safety guarantees oﬀered by
HyperSleuth.
4.1 Physical Memory Dumper
Traditional approaches for dumping the content of the physical memory are
typically based on kernel drivers or on FireWire devices. Unfortunately, both
approaches have a major drawback that limits their applicability to non pro-
duction systems. Dumping the content of the physical memory is an operation
that should be performed atomically, to guarantee the integrity of the dumped
data. Failing to achieve this would, in fact, enable an attacker to make arbitrary
modiﬁcation to the content of the memory, potentially hampering any forensic
analysis of live data. On the other side, if the dump is performed atomically,
the system, and the services the system provides, will be blocked for the en-
tire duration of the dump. That is not desirable, especially if there is only a
marginal evidence that the system has been compromised. Being the dump very
time consuming, the downtime might be economically very expensive and even
dangerous.
To address this problem, we exploit HyperSleuth’s persistent trusted execu-
tion environment to implement a new approach for dumping lazily the content
of the physical memory. This approach guarantees that the state of the physical
memory dumped corresponds to the state of the memory at the time the dump
is requested. That is, no malicious process can “clean” the memory after Hy-
perSleuth has been installed. Moreover, being performed lazily, the dump of the
state of the memory does not monopolize the CPU and does not interrupt the
execution of the processes running in the system. In other words, HyperSleuth
allows to dump the content of the physical memory even of a production system
without causing any outage of the services oﬀered by the system.
308
L. Martignoni et al.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
switch (VMM exit reason)
case CR3 write:
Sync PT and SPT
for (v = 0; v < sizeof(SPT); v++)
if (SPT[v].Writable && !DUMPED[SPT[v].PhysicalAddress])
SPT[v].Writable = 0;
case Page fault: // ’v’ is the faulty address
if (PT/SPT access)
Sync PT and SPT and protect SPTEs if necessary
else if (write access && PT[v].Writable)
if (!DUMPED[PT[v].PhysicalAddress])
DUMP(PT[v].PhysicalAddress);
SPT[v].Writable = DUMPED[PT[v].PhysicalAddress] = 1;
else
Pass the exception to the OS
case Hlt:
for (p = 0; p < sizeof(DUMPED); p++)
if (!DUMPED[p])
DUMP(p); DUMPED[p] = 1;
break;
Fig. 4. Algorithm for lazy dump of the physical memory
The dump of the memory is transmitted via network to the trusted host. Each
page is fragmented, to ﬁt the MTU of the channel, and labelled. The receiver
reassembles the fragments and reorders the pages to reconstruct the original bit-
stream image of the physical memory. To ease further analysis, the image pro-
duced by HyperSleuth is compatible with oﬀ-the-shelf tools for memory forensic
analysis (e.g., Volatility [18]).
The algorithm we developed for dumping lazily the content of the physical
memory is partially inspired by the technique used by operating systems for
handling shared memory and known as copy-on-write. The rationale of the algo-
rithm is that the dump of a physical memory page can be safely postponed until
the page is accessed for writing. More precisely, the algorithm adopts a com-
bination of two strategies to dump the memory: dump-on-write (DOW), and
dump-on-idle (DOI). The former permits to dump a page before it is modiﬁed
by the guest; the latter permits to dump a page when the guest is idle. Note
that the algorithm assumes that the guest cannot access directly the physical
memory. However, an attacker could still program a hardware device to alter the
content of the memory by performing a DMA operation. In our current threat
model we do not consider DMA-based attacks.
Figure 4 shows the pseudo-code of our memory dumper. Essentially the VMM
intercepts three types of events: updates of the page table address, page-fault
exceptions, and CPU idle loops. The algorithm maintains a map of the physical
pages that have already been dumped (DUMPED) and leverages the shadow page
table (SPT) to enforce stricter permissions than the ones speciﬁed in the real page
table (PT) currently used by the system. When the page table address (stored
in the CR3 register) is updated, typically during a context switch, the algorithm
synchronizes the shadow page table and the page table (line 3). Subsequently,
all the entries of the shadow page table mapping physical not yet dumped pages
Live and Trustworthy Forensic Analysis of Commodity Production Systems
309
are granted read-only permissions (lines 4–6). Such a protection ensures that
all the memory accesses performed by the guest OS for writing to any virtual
page mapped into a physical page that has not been dumped yet results in
a page fault exception. The VMM intercepts all the page fault exceptions for
keeping the shadow page table and the real page table in sync, for reinforcing
our write protection after every update of the page table (lines 9–10), and also
for intercepting all write accesses to pages not yet dumped (lines 11–14). The
latter type of faults are characterized by a write access to a non-writable virtual
page that is marked as writable in the real page table. If the accessed physical
page has not been dumped yet, the algorithm dumps the page and ﬂags it as
such. All other types of page fault exceptions are delivered to the guest OS that
will manage them accordingly. Finally, the VMM detects CPU idle loops by
intercepting all occurrences of the hlt instruction. This instruction is executed
by the OS when there is no immediate work to be done, and it halts the CPU
until an interrupt is delivered. We exploit these short idle periods to dump the
pending pages (lines 19–22). It is worth noting that a loaded system might enter
very few idle loops. For this reason, at every context switch we check whether
the CPU has recently entered the idle loop and, if not, we force a dump of a
small subset of the pending pages (not shown in the ﬁgure).
4.2 Lie Detector
Kernel-level malware are particularly insidious as they operate at a very high
privilege level and can, in principle, hide any resource an attacker wants to
protect from being discovered (e.g., processes, network communications, ﬁles).
Diﬀerent techniques exist to achieve such a goal (see [1]), but all of them aim at
forcing the OS to lie about its state, eventually. Therefore, the only eﬀective way
to discover such liars is to compare the state of the system perceived from the
system itself with the state of the system perceived by a VMM. Unfortunately,
so far lie detection has been possible only using a traditional VMM and thus it
has not been applicable on production systems not already deployed in virtual
machine environments. On the other hand, HyperSleuth’s hot-plug capability of
securely migrating a host OS into a guest one (and vice-versa) on-the-ﬂy makes
it a perfect candidate for detecting liars in production systems that had not been
deployed in virtual machine environments since the beginning.
To this end, besides launching the VMM, HyperSleuth loader runs a simple
in-guest utility that collects detailed information about the state of the system
and transmits its output to the trusted host. This utility performs the oper-
ations typically performed by system tools to display information about the
state of the system and intentionally relies on the untrusted code of the OS.
The intent is to trigger the malicious code installed by the attacker to hide any
malicious software component or activity. For example, this utility collects the
list of running processes, active networks connections, loaded drivers, open ﬁles
and registry keys, and so on. At the end of its execution, the utility performs a
VMM call to transfer the execution to the HyperSleuth VMM. At this point the
VMM collects the same information through OS-aware inspection. That is, the
310
L. Martignoni et al.
VMM does not rely on any untrusted code of the system, but rather implements
its own primitives for inspecting the state of the guest and, when possible, oﬀers
multiple primitives to inspect the state of the same resource. For example it
oﬀers primitives to retrieve the list of running processes/threads, each of which
relies on a diﬀerent data structure available in the kernel. Finally, the trusted
host compares the views provided by the in-guest utility and the VMM.
Since the state of the system changes dynamically and since the in-guest utility
and the VMM does not run simultaneously, we repeat the procedure multiple
times, with a variable delay between each run to limit any measurement error.
4.3 System Call Tracer
System calls tracing has been widely recognized as a way to infer, observe, and