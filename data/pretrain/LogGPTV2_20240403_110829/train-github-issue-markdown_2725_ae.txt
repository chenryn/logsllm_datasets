                extra_args : list, optional
                   List of extra string arguments to be passed to the underlying movie
                   utility. If ``None``, defaults to :rc:`animation.extra_args`.
                metadata : Dict[str, str], optional
                   Dictionary of keys and values for metadata to include in
                   the output file. Some keys that may be of use include:
                   title, artist, genre, subject, copyright, srcform, comment.
                extra_anim : list, optional
                   Additional `Animation` objects that should be included
                   in the saved movie file. These need to be from the same
                   `matplotlib.figure.Figure` instance. Also, animation frames will
                   just be simply combined, so there should be a 1:1 correspondence
                   between the frames from the different animations.
                savefig_kwargs : dict, optional
                   Is a dictionary containing keyword arguments to be passed
                   on to the `savefig` command which is called repeatedly to
                   save the individual frames.
                Notes
                -----
                fps, codec, bitrate, extra_args, metadata are used to
                construct a :class:`MovieWriter` instance and can only be
                passed if `writer` is a string.  If they are passed as
                non-`None` and ``writer`` is a :class:`MovieWriter`, a
                `RuntimeError` will be raised.
                '''
            # If the writer is None, use the rc param to find the name of the one
            # to use
            if writer is None:
                writer = rcParams['animation.writer']
            elif (not isinstance(writer, six.string_types) and
                    any(arg is not None
                        for arg in (fps, codec, bitrate, extra_args, metadata))):
                raise RuntimeError('Passing in values for arguments '
                                   'fps, codec, bitrate, extra_args, or metadata '
                                   'is not supported when writer is an existing '
                                   'MovieWriter instance. These should instead be '
                                   'passed as arguments when creating the '
                                   'MovieWriter instance.')
            if savefig_kwargs is None:
                savefig_kwargs = {}
            # Need to disconnect the first draw callback, since we'll be doing
            # draws. Otherwise, we'll end up starting the animation.
            if self._first_draw_id is not None:
                self._fig.canvas.mpl_disconnect(self._first_draw_id)
                reconnect_first_draw = True
            else:
                reconnect_first_draw = False
            if fps is None and hasattr(self, '_interval'):
                # Convert interval in ms to frames per second
                fps = 1000. / self._interval
            # Re-use the savefig DPI for ours if none is given
            if dpi is None:
                dpi = rcParams['savefig.dpi']
            if dpi == 'figure':
                dpi = self._fig.dpi
            if codec is None:
                codec = rcParams['animation.codec']
            if bitrate is None:
                bitrate = rcParams['animation.bitrate']
            all_anim = [self]
            if extra_anim is not None:
                all_anim.extend(anim
                                for anim
                                in extra_anim if anim._fig is self._fig)
            # If we have the name of a writer, instantiate an instance of the
            # registered class.
            if isinstance(writer, six.string_types):
                if writer in writers.avail:
                    writer = writers[writer](fps, codec, bitrate,
                                             extra_args=extra_args,
                                             metadata=metadata)
                else:
                    _log.warning("MovieWriter %s unavailable.", writer)
                    try:
                        writer = writers[writers.list()[0]](fps, codec, bitrate,
                                                            extra_args=extra_args,
                                                            metadata=metadata)
                    except IndexError:
                        raise ValueError("Cannot save animation: no writers are "
                                         "available. Please install ffmpeg to "
                                         "save animations.")
            _log.info('Animation.save using %s', type(writer))
            if 'bbox_inches' in savefig_kwargs:
                _log.warning("Warning: discarding the 'bbox_inches' argument in "
                             "'savefig_kwargs' as it may cause frame size "
                             "to vary, which is inappropriate for animation.")
                savefig_kwargs.pop('bbox_inches')
            # Create a new sequence of frames for saved data. This is different
            # from new_frame_seq() to give the ability to save 'live' generated
            # frame information to be saved later.
            # TODO: Right now, after closing the figure, saving a movie won't work
            # since GUI widgets are gone. Either need to remove extra code to
            # allow for this non-existent use case or find a way to make it work.
            with rc_context():
                if rcParams['savefig.bbox'] == 'tight':
                    _log.info("Disabling savefig.bbox = 'tight', as it may cause "
                              "frame size to vary, which is inappropriate for "
                              "animation.")
                    rcParams['savefig.bbox'] = None
                with writer.saving(self._fig, filename, dpi):
                    for anim in all_anim:
                        # Clear the initial frame
                        anim._init_draw()
                    for data in zip(*[a.new_saved_frame_seq() for a in all_anim]):
                        for anim, d in zip(all_anim, data):
                            # TODO: See if turning off blit is really necessary
                            anim._draw_next_frame(d, blit=False)
    >                   writer.grab_frame(**savefig_kwargs)
    build/lib.linux-x86_64-2.7-pydebug/matplotlib/animation.py:1200: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
    type = 
    value = ImportError('/usr/lib/python2.7/dist-packages/PIL/_imaging.x86_64-linux-gnu.so: undefined symbol: Py_InitModule4_64',)
    traceback = 
        def __exit__(self, type, value, traceback):
            if type is None:
                try:
                    self.gen.next()
                except StopIteration:
                    return
                else:
                    raise RuntimeError("generator didn't stop")
            else:
                if value is None:
                    # Need to force instantiation so we can reliably
                    # tell if we get the same exception back
                    value = type()
                try:
    >               self.gen.throw(type, value, traceback)
    /usr/lib/python2.7/contextlib.py:35: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
    fig = , outfile = 'movie.gif', dpi = 100.0
    args = (), kwargs = {}
        @contextlib.contextmanager
        def saving(self, fig, outfile, dpi, *args, **kwargs):
            '''
                Context manager to facilitate writing the movie file.
                ``*args, **kw`` are any parameters that should be passed to `setup`.
                '''
            # This particular sequence is what contextlib.contextmanager wants
            self.setup(fig, outfile, dpi, *args, **kwargs)
            try:
                yield self
            finally:
    >           self.finish()
    build/lib.linux-x86_64-2.7-pydebug/matplotlib/animation.py:241: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
        def finish(self):
    >       self._frames[0].save(
                self._outfile, save_all=True, append_images=self._frames[1:],
                duration=int(1000 / self.fps))
    E       IndexError: list index out of range
    build/lib.linux-x86_64-2.7-pydebug/matplotlib/animation.py:610: IndexError
    ------------------------------ Captured log call -------------------------------
    animation.py              1172 INFO     Animation.save using 
    _____________________________ test_log_scales[png] _____________________________
    self = 
    func =  at 0x7f4fd446c258>, when = 'call'
        def __init__(self, func, when):
            #: context of invocation: one of "setup", "call",
            #: "teardown", "memocollect"
            self.when = when
            self.start = time()
            try:
    >           self.result = func()
    /usr/lib/python2.7/dist-packages/_pytest/runner.py:189: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    >   return CallInfo(lambda: ihook(item=item, **kwds), when=when)
    /usr/lib/python2.7/dist-packages/_pytest/runner.py:175: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = , args = ()
    kwargs = {'item': }, notincall = set([])
        def __call__(self, *args, **kwargs):
            if args:
                raise TypeError("hook calling supports only keyword arguments")
            assert not self.is_historic()
            if self.argnames:
                notincall = set(self.argnames) - set(['__multicall__']) - set(
                    kwargs.keys())
                if notincall:
                    warnings.warn(
                        "Argument(s) {} which are declared in the hookspec "
                        "can not be found in this hook call"
                        .format(tuple(notincall)),
                        stacklevel=2,
                    )
    >       return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:617: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
    hook = 
    methods = [, , ]
    kwargs = {'item': }
        def _hookexec(self, hook, methods, kwargs):
            # called from all hookcaller instances.
            # enable_tracing will set its own wrapping function at self._inner_hookexec
    >       return self._inner_hookexec(hook, methods, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:222: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    hook = 
    methods = [, , ]
    kwargs = {'item': }
        self._inner_hookexec = lambda hook, methods, kwargs: \
            hook.multicall(
                methods, kwargs,
    >           firstresult=hook.spec_opts.get('firstresult'),
            )
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:216: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    item = 
        def pytest_runtest_call(item):
            _update_current_test_var(item, 'call')
            try:
    >           item.runtest()
    /usr/lib/python2.7/dist-packages/_pytest/runner.py:106: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
        def runtest(self):
            """ execute the underlying test function. """
    >       self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    /usr/lib/python2.7/dist-packages/_pytest/python.py:1171: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = , args = ()
    kwargs = {'pyfuncitem': }, notincall = set([])
        def __call__(self, *args, **kwargs):
            if args:
                raise TypeError("hook calling supports only keyword arguments")