Theorem 5. Let IV be a ﬁxed κ-bit string and let h be a function family from
{0, 1}κ × {0, 1}b to {0, 1}κ, where the key is the ﬁrst input on κ bits. Let h′ be the
hash function deﬁned by h′
IV (pad, ·) = h(IV, · ⊕ pad) where the key is pad. Let A be a
cre-adversary against the construction that has time-complexity at most T , generates
labels of at most ℓ blocks and a key of at most 1 block and min-entropy m. Then there
exist one prf-adversary A1 against h′ and two prf-adversaries A2 and A3 against h
such that advcre
HmacH (A) is upper bounded by:
r22κ(cid:16)2−m + 2 · advprf
h′ (A1)(cid:17)
2
+
1
2t
+ advprf
h
(A2) + 2ℓ · advprf
h
(A3)
where A1 makes two queries with time-complexity T + 2Th, A2 makes one query with
time-complexity T and A3 makes at most 2 queries with time-complexity O(ℓ · Th),
where Th is the time for one computation of h.
The proof of this theorem, which can be found in appendix A, is similar to the
proof of theorem 2, but Bellare’s result cannot be applied directly to Nmac used with
H: the output of H is much smaller than the output of H and due to it, his proof has
to be adapted. We obtain the following result:
Lemma 6. Let h : {0, 1}κ × {0, 1}b → {0, 1}κ be a family of functions. Let A
NmacH
be a pf-prf-adversary against NmacH that makes at most q oracle queries, each of at
most ℓ blocks, and has time-complexity T . Then there exist prf-adversaries A1 and A2
against h such that the advantage advpf−prf
NmacH(cid:17) is upper bounded by:
NmacH(cid:16)A
2(cid:19)(cid:20)2ℓ · advprf
h
(A2) +
1
2t(cid:21) .
advprf
h
(A1) +(cid:18)q
10
Furthermore, A1 has time-complexity at most T and makes at most q oracle queries
while A2 has time-complexity at most O(ℓTh) and makes at most 2 oracle queries,
where Th is the time for one computation of h.
This lemma can be established with a proof similar to the one for Hmac with H,
that can be found in [2], except that the tests are made upon the t most signiﬁcant
bits of the output of H and that the adversary is constrained to output preﬁx-free
messages.
3.3 When the Shared Key is larger than the block length
As explain in section 3.1, if the key is larger than the block size, then it is ﬁrst
hashed and padded with ’0’ bits to obtain a b-bit string. This case is rarely studied
in Hmac security analysis and requires that we study what is the impact of the key
hashing. However it is of practical interest since the Diﬃe-Hellman key exchange over
Z⋆
p (where p is a prime) generates a premaster-secret of at least 1024 bits, which is
greater than the 512-bit Hmac-sha-1 key size. In this section, we focus on Hmac used
with a truncated hash function H. We ﬁrst give the security results and then give the
intermediate lemmas used in the proof, in particular we study the cascade mode as a
randomness extractor.
Results for Hmac The hashing of the premaster-secret has two main consequences
on our proof. The output is a t-bit string and as a ﬁrst consequence we have to show
that a lot of the entropy of the input is preserved: if the output had low entropy, an
exhaustive search could allow to guess the few possible values of the key. We are more
precise and show that the output of the hashing is indistinguishable from the uniform
when Hmac is used with H.
The other consequence of the hashing is that Hmac is keyed with a key with the
b−t least signiﬁcant bits equal to ’0’. We have to show that even in these circumstances
it is still a good prf, which guarantees that the output of Hmac is indistinguishable
from the uniform. To this end, we consider the related key attacks against h when the
input and the output are reversed.
From the function family h : {0, 1}κ × {0, 1}b → {0, 1}κ we deﬁne the family of
parametrized by a set Φ ⊂ F(t,t) of key-derivation functions (where F(t,t) is the set of
all functions from {0, 1}t to {0, 1}t). In the rka game, a challenger chooses a random
bit b and a random key K. If b = 1 it chooses a random function G from the set of all
functionsbh : {0, 1}t × {0, 1}κ → {0, 1}κ deﬁned bybh(x, y) = h(y, xk0b−t).
A related-key attack on a family of functions bh : {0, 1}t × {0, 1}κ → {0, 1}κ is
the functions from {0, 1}t × {0, 1}κ to {0, 1}κ and uses G(K, ·). If b = 0, it usesbh(K, ·).
b = 1 andbh(φ(K), x) otherwise. Her rka-advantage is deﬁned by:
bh ⇒ 1i − Pr(cid:2)AG ⇒ 1(cid:3) .
The goal of the rka-adversary is to guess the value of b. She may make an oracle query
of the form φ, x where φ ∈ Φ and x ∈ {0, 1}κ and the oracle returns G(φ(K), x) if
advrka
bh,Φ
(A) = PrhA
For any string str ∈ {0, 1}t let ∆str : {0, 1}t → {0, 1}t be deﬁned by ∆str(K) = K⊕str.
Theorem 7. Let h be a function family from {0, 1}κ × {0, 1}b to {0, 1}κ. Let ipad
and opad be two b-bit strings and let Φ = {∆ipad, ∆opad}. Let A be a pf-cre-adversary
against the construction that has time-complexity at most t, generate labels of at most
11
ℓ blocks and a key of s ≥ 2 blocks and min-entropy m. Then there exist a rka-adversary
HmacH (A) is upper
A2 against bh and three prf-adversaries A1, A3, A4 such that advpf−cre
bounded by:
r2t(cid:16)3 · 2−m + 2s · advprf
h
+advprf
h
(A3) + 2ℓ · advprf
(A1)(cid:17) + advrka
bh
(A4) + 1
2t
h
(A2)
where A1 and A2 make at most 2 queries and have time-complexity t, A3 makes one
query with time-complexity t and A4 makes at most 2 queries with time-complexity
O(ℓ · Th).
To show this theorem, we ﬁrst apply a preﬁx-free computational variant of the
Leftover Hash Lemma to the cascade construction. This result is stated in lemma 8
below. This way we show that the output of the hashing is a random looking t-bit
string. Since h, where input and key are reversed and where the key is restricted to the
t ﬁrst bits, is a prf resistant to rka, and since the output k of the hashing is random
looking, the output of h(IV, ipad ⊕ kk0b−t)kh(IV, opad ⊕ kk0b−t) is indistinguishable
from the uniform. Therefore we key with two random looking bit strings and since
Nmac is a prf, its output seems to be uniformly distributed. All the precise proofs of
the results of this section are in appendix B.
Note that in this proof we assume that IV is chosen at random at the beginning
of the game. On the other hand, we do not use the fact that ipad and opad are chosen
at random at the beginning of the game. This assumption is indeed not useful in this
particular context.
The cascade mode is a good pf-cre In this section we show that the cascade mode
is a good extractor of entropy, if the compression function is a prf. The main result of
this part is the following lemma, used in the proof of theorem 7:
Lemma 8. Let A be a pf-cre-adversary against h∗ which has a time-complexity at
most T and produces a distribution of min-entropy at least m, with messages of at
most ℓ blocks. Then there is a prf-adversary A′ with running-time at most O(T ) and
messages at most ℓ-block long such that:
advpf-cre
h∗
(A) ≤q2t · (3 · 2−m + 2ℓ · advprf
h
(A′)).
This lemma is a direct consequence of the two lemmas 9 and 10 below.
Lemma 9. Let A∗ be a pf-au-adversary against h∗ which generates messages of at
most ℓ blocks. Then there is a prf-adversary A against h such that:
advpf-au
h∗
(A∗) ≤ 2ℓ · advprf
h
(A) +
1
2t
and A makes at most 2 queries and has about the same time-complexity as A∗.
Lemma 10 (pf computational LHL). Let H be a family of functions from {0, 1}k ×
Dom to {0, 1}t such that for every au-adversary B, running in time T and producing a
distribution over Dom×Dom of min-entropy at least 2m−2, advpf−cau
(B) ≤ 1/2t +ε.
Then for every adversary A running in time O(T ) producing a distribution of min-
entropy at least m:
H
advpf-cre
H
(A) ≤p2t · (3 · 2−m + ε)
12
Remark that ε ≥ 2−κ that is why the output of the hash function has to be smaller
than the key, that is t < κ. Indeed, consider the following prf-adversary with running
time T and which makes two queries: she chooses at random (x1, x2) ∈ {0, 1}b, sends
it to the challenger which returns (y1, y2). Then she chooses T = T /Tf keys K and
tests for all key if h(K, x1) is equal to y1. If it is the case, she checks if h(K, x2) equals
y2 and if it is also the case, then she returns 1, else she returns 0 at the end. Her
prf-advantage is greater than 2−κ, therefore ε ≥ 2−κ. This adversary is called the
exhaustive search adversary.
4 Applications to the Key Derivation Function of TLS
In this section we apply the methods and the results of previous section to the new
draft-version of tls v.1.2 [11]. We give security proofs for the key-extraction function
described in the standard, function which is very similar to the one used in previous
versions of tls.
Besides, the new tls standard promotes the use of at least sha-256 or a stronger
standard hash function. In this paper, we focus on sha-384 and give security results
addressing the speciﬁc case of a truncated iterated hash function.
4.1 Brief Description of TLS Key Extraction Function
In tls the key extraction is performed the following way. Firstly the client and the
server exchange two random 256-bit strings rands and randc with 224 random bits in
each. Then the client and the server exchange a premaster key.
In the RSA key exchange, the client generates a 368-bit random string, concate-
nates it to the latest version of the protocol supported, encoded on 16 bits, and
encrypts them under the server’s RSA public key. The latter 384-bit string is the
premaster-secret. It is a 384-bit value, but there are only 368 random bits of entropy
(the 16 most signiﬁcant bits are ﬁxed).
In the Diﬃe-Hellman key exchange, the client and the server use a group G, in
which the DDH assumption holds, and then perform a DH protocol to obtain a com-
mon random element of G. The binary representation of this element is the premaster-
secret. Note that this binary representation is not a uniformly distributed bit string.
In both cases, we denote by pmk the premaster-secret. Then, the so-called master-
secret, denoted by mk is created. During the ﬁrst computation, the parties extract
the entropy of pmk using a function called Hprf.
The function Hprf can be any function speciﬁed by the cipher-suite in used, but
in this paper we focus on the function proposed in the standard, function which is
very similar to the one used in the previous version of the protocol, tls 1.1. This
function is constructed from several concatenations and iterations of Hmac. For sake
of simplicity, we do not describe precisely this function here, for more details, see [11].
The same way Hmac is derived from Nmac, function Hprf can be seen as derived
from a function that we call Nprf, that is HprfHash
ipad,opad(IV ; k, x) is equal to:
NprfHash (h(IV, k ⊕ ipad), h(IV, k ⊕ opad), x) .
The same way we have shown that Hmac is a good computational randomness extrac-
tor since it is the composite of Nmac, which is a prf, with a computational randomness
extractor, we show here that Hprf is a good computational randomness extractor
since is the composite of Nprf, which is a prf, with a computational randomness
extractor. Note that contrarily to Hmac, we only have to choose randomly IV , ipad
is ﬁxed.
As Nprf is a concatenation and a composite of several Nmac, the prf-resistance of
Nprf can be reduced to the prf-resistance of Nmac. The number v of concatenations
depends on the output length required by the cipher suite and the prf-security of this
number.
13
Theorem 11. Let u ≥ 1, t ≥ 1 and let h : {0, 1}κ × {0, 1}b → {0, 1}κ be a family of
functions. Let A be a prf-adversary against NprfH constructed with v concatenations
of NmacH . The algorithm A can make at most q queries, each of at most u blocks, and
has time-complexity at most T . Then there exist a prf-adversary A′ against Nmac
such that:
advprf
NprfH (A) ≤ advprf
NmacH(cid:0)A′(cid:1) + qv2/2κ.
Besides, A′ has time-complexity at most T + O(qv) and makes at most 2vq queries of
at most u blocks.
4.2 Security Results
In this subsection, we adapt theorems of the previous section to the case of tls.
Theoretical Results First we give the security result for a long key, that is a s-block
key with s ≥ 2. Note the similarity with theorem 7. It is proved exactly the same way,
except that at the end of the proof the Nprf prf-security is introduced and is reduced
to the prf-security of Nmac.
Theorem 12. Let h be a function family from {0, 1}κ × {0, 1}b to {0, 1}κ. Let ipad
and opad be two b-bit strings and let Φ = {∆ipad, ∆opad}. Let A be a pf-cre-adversary
against Hprf that has time-complexity at most T , generate labels of at most ℓ blocks
and a key of s ≥ 2 blocks and min-entropy m. Assume that Hprf is a concatenation
of v Hmac. Then there exist a rka-adversary A2 against bh and three prf-adversaries
HmacH (A) is upper bounded by: