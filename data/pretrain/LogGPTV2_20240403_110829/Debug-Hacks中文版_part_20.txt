$ svn diff signal.c
if (sigaltstack(&ss, NULL) = -1)
ss.ss_size = SIGSTKSZ;
if (ss.ss_sp = NULL)
Ss.ss_sp = malloc(SIGSTKSZ);
stack_t ss;
+static void register_sigaltstack() {
+/* alternate stack for SIGSEGV */
+#ifdef SIGSEGV
+#define ALT_STACK_ SIZE (4*1024)
#ifdef POSIX_SIGNAL
typedef RETSIGTYPE (*sighandler_t)(int);
static const struct signals {
+#endif
+static int is_altstack_defined = 0;
+#ifdef SIGSEGV
#endif
# define NSIG (_SIGMAX + 1)
--- signal.c (revision 20086)
Index: signal.c
ss.ss_flags = 0;
const char *signm;
1*错误处理*/；
/*错误处理*/；
if(is_altstack_ defined)
 stack_t newss, oldss;
int signo;
 signal.c (working copy)
第 4章应用程序调试实践
www.TopSage.com
I* For QNX *1
---
## Page 163
@d -1070,6 +1102,7 @
#ifdef SIGPIPE
#endif
@d -663,6 +694,7 @@
+
+#endif
+#ifdef SA_ONSTACK
@@ -432,7 +458,12 @0
#ifdef SIGSEGV
+if (signum = SIGSEGV)
sigaction(signum, &sigact, &old);
#endif
 sigact.sa_flags |= SA_NOCLDWAIT;
ruby_signal(int signum, sighandler_t handler)
static sighandler_t
+#endif
return old.sa_handler;
if (sigaction(signum, &sigact, &old) '
#endif
《BINARY HACKS》 的“HACK#76
 install_sighandler(SIGSEGV, sigsegv);
 install_sighandler(SIGBUS, sigbus);
(pp.291~300)
第 4章应用程序调试实践
www.TopSage.com
用 sigaltstack 处理 stack overflow"
:17
一吉冈弘隆
---
## Page 165
要理解这一点，需要了解GDB等调试器是如何输出backtrace的。
为何出现这样的backtrace信息？
过程中产生了SIGSEGV，但从th_req(）是如何到nanosleep()的呢？
的core执行backtrace，却完全看不出什么函数被调用，似乎是nanosleep(）执行
用调试器分析时的固定做法就是先backtrace。但是，对该例中的程序运行时生成
检查backtrace
某个进行线程间通信的程序中含有bug，生成了core文件（内核转储文件）。
问题内容
信息也并不完整。要记住，调试器的backtrace并非万能钥匙。
题现象发生的路径就变得异常困难。此外，由于存在栈破坏，可以说backtrace
栈破坏有时会导致问题难以分析。特别是，由于无法获取backtrace信息，追溯问
概要
#27
HACK
#11x00d02inth_req（p=0x1877c90)at bugg.:167
#10
8
满
#0 0x00003b4869ac80 in nanosleep () from/Lib64/Libc.so.6
苦
(gdb）bt
0x000000004162f130in ？?（)
0x0000000001877c90
0x0000000000000002
0x000eelcd000eelcc
0x000eelcb000eelca
0x000ee1ca000ee1c9
0x000ee1c8000ee1c7
0x000ee1c6000ee1c5
0x000eelc4000ee1c3in77()
0x000eelc2000eelc1in??()
述backtrace无法正确显示时的调试方法。
本hack以在多线程应用程序中由于线程间冲突导致的栈破坏为例，讲
backtrace无法正确显示
in?？（）
2in？?
in??
in??
in??
in??
in??
www.TopSage.com
0
---
## Page 166
155
返回地址被破坏了。其实，可以认为是栈被破坏了。
本例中要返回到地址0x000ee1c2000ee1c1，也就是说跳转到该地址，此时只能怀疑
栈上的返回地址不正确。
处取出返回地址，然后跳转到该地址。因此，可以认为跳转地址不正确，也就是
这是个retq指令，是函数的返回指令。在x86 中，函数返回就是从栈指针的地址
指令指针RIP的值为0x3b4869ac80，
利用GDB 进行分析时，
查看寄存器和栈
的前提下才成立。认为调试器的 backtrace 信息绝对正确是十分危险的。
调试器生成的 backtrace 信息。极端一点说，信赖 backtrace 只有在栈没有被破坏
本例比较极端，实际上也有比较实际的例子。但是，如果栈被破坏，就不能信任
情况，基本上可以认为栈被破坏了。
如上所述，backtrace 信息依赖于栈的信息。因此，像本例这种backtrace 不正确的
的栈知识”。
backtrace 的地址来自进程的栈上。关于栈的内容请参见“HACK#9调试时必需
回地址和调试信息得出的栈使用量，依次求出调用者函数。也就是说，调试器的
调试器的backtrace 是根据栈里保存的函数返回地址来显示的。根据栈空间上的返
什么是backtrace
148】第4 章应用程序调试实践
0x4162f0c8:0x000eelc2000eelcl
(gdb) x/g 0x4162f0c8
0x3b4869ac80 :
(gdb) x/i θx3b4869ac80
3
(gdb) info reg
0x3b4869ac80
0x4162f0c8
，寄存器信息绝不可忽视。来看看当前的寄存器信息。
www.TopSage.com
retg
θx3b4869ac80 
0x4162f0c8
，下面来查看一-下要执行什么指令。
---
## Page 167
图 4-2 
图。图中根据栈的状态画出了请求线程。
图 4-2 和图 4-3分别为该应用程序正常时的行为示意图和问题发生时的行为示意
而且这个“其他线程”向栈内写入数据的操作被推迟了，从而导致了栈破坏。
地址写入了数据。
本例的应用程序中，在线程间的数据处理上传递了栈的指针，导致其他线程向该
递处理。
执行写入的位置，看看有没有对栈空间（也就是自动变量空间）的引用、指针传
调查栈破坏的方法有许多种，但最现实的方法就是根据被破坏的数据内容，判断
被破坏。也就是说，GDB 输出的局部变量也变得不可信。
问题。另外，栈空间还被用做局部变量的保存空间，因此局部变量内容也有可能
像这种栈破坏导致无法获取backtrace 信息的情况，从调试角度来看是极其严重的
0x000eelc2999eelc1不是正确的地址。
据来看，最后的nanosleep(）是从地址0x000eelc2999eelcl调用的，而
没错，最初的 backtrace 显示的结果对于调试器来说没有问题，但从该进程的栈数
#1 0x000ee1c2000ee1c1 in 7? ()
#0 0x0003b4869ac88 in nanosleep () from /lib64/libc.so.6
(gdb)bt
正常时应用程序的行为
的电
请求的数据
请求线程
返回地址A
返回地址A
www.TopSage.com
针，请求处理
传递指向 DATA的指
HACK#27 backtrace 无法正确显示| 149
+
处理线程
---
## Page 168
157
156
参考文献
反过来说，如果觉得backtrace 不太对，可以怀疑是否栈被破坏了。
信息、无法预料的变量破坏等问题，调试本身也会变得很困难。
本 hack 讲述了栈破坏导致的问题。栈破坏一旦发生，就会出现无法获取backtrace
总结
图4-3发生问题时应用程序的行为
150 
 Intel@ 64 and LA-32 Architectures Software Developer's Manuals
http://www.intel.com/products/processor/manuals/index.htm
PSP
】第4章应用程序调试实践
请求线程
返回地址B
返回地址C
返回地址A
请求的数据
返
回地址
甜路
X
www.TopSage.com
等待响应超时
将诺求数报写入毕已
与
+
处理线程
负载过高，陷入
等待状态
一岛本裕志
---
## Page 169
者调用了错误的地址 0x20656c62，导致了 segmentation fault 的发生。
backtrace 显示的内容很可能不是实际跟踪的内容。也就是说，代码突然跳转到或
靠的。实际上，用 GDB 显示停止处的代码，也像下面这样无法显示。这是因为
指定-g选项后，各个栈帧都应显示出函数名。
入 core 并显示 backtrace 之后，栈帧中还是没有显示符号名，如下所示。通常，
可以怀疑是缓冲区溢出的情况之一就是，即使指定了编译选项-g，利用 GDB 读
可怀疑是缓冲区溢出的情况
也可能会引起缓冲区溢出，本 hack 后半部分也会讲述这种bug 的调试方法。
时有发生。此外，在计算数组的下标时，如果计算方法有误，就可能算出负下标，
全的函数、源代码检查工具、编译器在构建时的报警等。即便如此，这种bug仍
全漏洞，因此出现了许多预防措施和应对措施，如通过指定缓冲区大小来编写安
空间之外写入数据。特别是如果这类 bug 发生在栈上的缓冲区中，就可能引发安
错误地操作数组导致的典型 bug 之一就是缓冲区溢出，也就是说向已分配的内存
数组的错误操作
#28
MACR
“HACK#27backtrace无法正确显示”也讲过，在这种情况下backtrace 是不可
(gdb)x/i 0x72727563
0x20656c62: Cannot access memory at address 0x20656c62
(gdb) x/i 0x20656c62
(gdb)bt
0x080483c0 in main ()
0xb802acao in ?? () from /lib/ld-linux.so.2
oxb8008ff4 in ?? ()
0x0804948c in ??
0x08040079 in？
0x72727563 in ??
0x20656c62 in ??
数组非法访问导致内存破坏
的调试方法。
本 hack 讲述引发 segmentation fault 的原因之
0
0
) from /lib/libc.so.6
www.TopSage.com
HACK#28 数组非法访问导致内存破坏 1151
-错误的数组操作
158
---
## Page 170
159
这种调查中，很重要的是需要怀疑数据是否为字符串的一部分，因为错误地将数
这个数据的地方。
该数据的地方。以本hack开头的栈跟踪为例，我们要寻找错误地写入0x20656c62
简单来说，确定破坏地址值的位置的方法，就是将错误地址当做数据，寻找复制
确定破坏跳转地址值的位置 (栈破坏）
本hack开头提到的segmentationfault的形式显露出来。
的空间中，因此即使bug破坏其内容，也无法立即被检测到。之后，问题就会以
相反，第2、第3类方法使用的地址位于GOT（GlobalOffsetTable）或栈等可写
此时，core文件中会记录这一瞬间的程序计数器的值，因此分析也比较容易。
址一般保存在只读空间内。所以，尝试破坏该地址就会产生segmentation fault。
地址。但是，第1类方法使用的地址很难被破坏，这是因为第1类方法使用的地
如果 bug 破坏了这些方法用到的值（被错误的地址覆盖），就可能跳转到错误的
向的位置的值作为跳转（返回）地址使用（参见“HACK#9调试时必需的栈知识"）
类方法就是执行ret命令，用于函数结束时返回调用者函数。ret命令将栈指针指
保存了跳转地址（参见“HACK#63理解用GOT/PLT调用函数的原理”）。第
同一源代码内的函数时也会使用这种方法。第2类就是指定一块内存区域，其中
地址并调用。C语言中的if或for语句等进行条件判断时会用到这种方法，调用
理一下改变程序运行地址的方法。方法基本可以分为3类。第1类就是直接指定
那么，是从哪里跳转到或调用了不存在的地址呢？在调查这个问题之前，先来整
运行地址的改变
152|