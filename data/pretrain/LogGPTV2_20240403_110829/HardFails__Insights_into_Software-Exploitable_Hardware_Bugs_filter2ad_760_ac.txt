### 文本优化

#### 简介
本文档描述了在两个RISC-V SoC（Pulpino和PULPissimo）中发现的安全漏洞，并通过Hack@DAC竞赛来检测这些漏洞。我们将详细介绍SoC的架构、发现的漏洞类型及其验证方法。

#### Pulpino 和 PULPissimo 的架构

**Ariane**
- **概述**: Ariane是一款基于RISC-V指令集的处理器，具备数据和指令转换旁路缓冲器（TLBs）、硬件页表遍历器以及分支预测单元，以支持推测执行。其高级微架构如附录A中的图4所示。
- **TLB Page Fault Timing Side Channel (L-1 & L-2)**: 在分析Ariane RTL时，我们注意到TLB访问存在时间侧信道泄漏。非法访问导致的TLB页面错误与未映射内存导致的页面错误在时钟周期数上不同。这种差异在RTL中表现为处理器的微架构行为，从而构成一个可被软件利用的时间侧信道。先前的研究已经展示了如何利用这一特性来探测已映射和未映射的页面，从而破坏基于随机化的防御机制[24, 29]。要正式证明不存在这种时间通道泄漏，需要对至少七个RTL模块进行建模、分析和验证，这在当前行业标准工具中是不支持的。因此，唯一的选择是手动检查和跟踪RTL模块之间的时钟周期转换，但这非常繁琐且容易出错。

**PULPissimo**
- **概述**: PULPissimo是一个基于更简单的RISC-V核心的SoC，具有指令和数据RAM，如图2所示。它提供了一个高级扩展接口（AXI），用于从核心访问内存。外设直接连接到高级外设总线（APB），并通过桥接模块连接到AXI。它支持自主I/O、外部中断控制器，并包含调试单元和SPI从设备。
- **预取缓存状态未回滚 (L-1 & L-3)**: 当执行系统返回指令时，Ariane的核心特权级别不会立即改变，直到该指令退休。在此期间，继续以当前较高的系统特权级别进行线性预取（由分支预测引导）。一旦指令退休，核心的执行模式将变为非特权模式，但预取到缓存中的条目不会被刷新。这些共享缓存条目对用户空间软件可见，从而在特权和非特权软件之间启用时间通道。
- **固件配置的内存范围 (L-4)**: 在PULPissimo中，我们添加了注入了漏洞的外设，以重现CVE中的漏洞。我们添加了一个AES加密/解密引擎，其输入密钥存储并从紧耦合到处理器的内存中获取。密钥存储的内存地址未知，仅通过观察RTL无法确定其是否在受保护的内存范围内。在实际的SoC中，AES密钥存储在可编程熔丝中。在安全启动过程中，引导加载程序/固件会感知熔丝并将密钥存储到内存映射寄存器中。然后配置访问控制过滤器，只允许AES引擎访问这些寄存器，从而保护此内存范围。由于我们使用的开源SoC没有熔丝基础设施，因此密钥存储被模拟为MMIO空间中的寄存器。

#### 安全漏洞

**内存地址范围重叠 (L-1 & L-4)**
- **概述**: PULPissimo通过将外设映射到不同的内存地址范围来提供I/O支持。如果设计阶段或固件中存在地址范围重叠的错误，可能会破坏访问控制策略并产生严重的安全后果，例如特权提升。我们在RTL中注入了一个漏洞，使SPI主外设和SoC控制外设之间存在地址范围重叠，从而使不可信的SPI主外设能够通过APB总线访问SoC控制内存地址范围。

#### Hack@DAC竞赛

**竞赛准备**
- **测试平台**: 使用开源RISC-V SoC的RTL作为Hack@DAC和我们调查的测试平台。尽管这些SoC比高端行业专有设计简单，但它们允许我们可行地注入和检测较简单的RTL中的漏洞。
- **竞赛阶段**: Hack@DAC分为两个阶段：初步阶段（Phase 1）和最终阶段（Phase 2）。Phase 1远程进行，持续两个月；Phase 2在DAC会议期间进行，时间为8小时。Phase 1使用Pulpino SoC，Phase 2使用更复杂的PULPissimo SoC。

**竞赛目标**
- **安全功能**: 我们在SoC中实现了额外的安全功能，包括JTAG模块的密码锁和某些外设的访问控制。对于Phase 2 SoC，还添加了一个实现多种加密算法的加密单元。
- **安全目标**: 提供了三个主要的安全目标：非特权代码不应超出其特权级别；JTAG模块应防止物理攻击者访问；SoC应阻止软件对手发起拒绝服务攻击。

**竞赛漏洞**
- **UDMA地址范围重叠**: 修改了UDMA的内存地址范围，使其与SPI主端口重叠。这个漏洞允许访问UDMA内存的攻击者提升其权限并修改SPI内存。
- **GPIO错误**: GPIO内存的地址范围声明错误。具有GPIO访问权限的攻击者可以提升其权限并访问SPI主控和SoC控制。
- **调试/JTAG错误**: 调试单元中的密码检查逻辑存在缺陷，其状态在成功检查后没有正确重置。我们硬编码了调试单元密码，且JTAG接口未受密码保护。
- **不受信任的引导ROM**: 一个原生漏洞（漏洞#22）允许非特权代码篡改引导ROM，并可能以特权级别执行不受信任的引导代码。

通过上述详细描述，我们可以更好地理解SoC中的安全漏洞及其验证方法，并通过Hack@DAC竞赛来检测这些漏洞。