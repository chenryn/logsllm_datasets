### TCP Conformance Testing and Results

#### TCP Options
- **OptionSupport (4)**
- **OptionUnknown (6)**
- **MSSSupport (4,14,16)**
- **MSSMissing (15,16)**

**Behavior for Invalid Checksums:**
- When sending a SYN or an ACK segment with a non-zero but invalid checksum, the target must respond with a RST segment or ignore it.
- When sending a SYN or an ACK segment with an explicit zeroed checksum, the same behavior applies.

**PASS Condition:**
- When sending a SYN segment with EOOL and NOOP options, the target must respond with a SYN/ACK segment.
- When sending a SYN segment with an unassigned option (# 158), the target must respond with a SYN/ACK segment.
- When sending a SYN segment with an MSS of 515 bytes, the target must not send segments exceeding 515 bytes.
- When sending a SYN segment without an MSS, the target must not send segments exceeding 536 bytes (IPv4) or 1220 bytes (IPv6, not tested).

#### TCP Flags
- **Reserved (no MUST)**
- **UrgentPointer (30,31)**

**PASS Condition:**
- When sending a SYN segment with a reserved flag set (# 2), the target must respond with a SYN/ACK segment with zeroed reserved flags.
- Subsequently, when sending an ACK segment with a reserved flag set (# 2), the target must not retransmit the SYN/ACK segment.
- When sending a sequence of segments flagged as urgent, the target must acknowledge them with an ACK segment.

### TCP Checksum
The TCP checksum is essential for protecting against segment corruption in transit and is mandatory to both calculate and verify. Even though most Layer 2 protocols already protect against segment corruption, software or hardware bugs in intermediate systems can still alter packet data. Therefore, high-layer checksums remain vital. The performance implications of calculating and verifying checksums can lead to an incentive to skip this step, even though it is typically offloaded to the NIC. 

- **ChecksumIncorrect**: This test uses a randomly chosen incorrect checksum.
- **ChecksumZero**: This test zeroes the checksum field, which could appear as if the field is unused.

### TCP Options
TCP specifies up to 40 bytes of options for future extensibility. It is crucial that these bytes are usable and, if used, handled correctly. Implementations must support the End of Option List (EOOL), NOOP, and Maximum Segment Size (MSS) options. These options are tested for their significance in interoperability, extensibility, and performance.

- **OptionSupport**: Validates the support of EOOL and NOOP.
- **OptionUnknown**: Checks the handling of an unassigned option.
- **MSSSupport**: Verifies the proper handling of an explicitly stated MSS value.
- **MSSMissing**: Tests the usage of default values specified by the RFC in the absence of the MSS option.

### TCP Flags
TCP's extensibility is guaranteed by (im-)mutable control flags in its header, of which four are currently reserved for future use. A TCP implementation must zero (when sending) and ignore (when receiving) unknown header flags.

- **Reserved**: Tests the handling of unknown header flags.
- **UrgentPointer**: Validates the support of segments flagged as urgent. The test splits around 500 bytes of urgent data into a sequence of three segments, each flagged as urgent. The urgent pointer field carries the offset from its current sequence number to the sequence number following the urgent data.

### Test Results
**Table 2: Results of Testbed Measurements**

| OS/Stack | ChecksumIncorrect | ChecksumZero | OptionSupport | OptionUnknown | MSSSupport | MSSMissing | Reserved | UrgentPointer |
|----------|--------------------|--------------|---------------|---------------|------------|------------|----------|---------------|
| Linux 5.2.10 | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |
| Windows 10 1809 | ✓ | ✓ | ✓ | ✓ | ✓ | ✗ | ✓ | ✓ |
| macOS 10.14.6 | ✓ | ✓ | ✓ | ✓ | ✓ | ✗ | ✓ | ✓ |
| uIP 1.0 | ✓ | ✓ | ✓ | ✓ | ✓ | ✗ | ✓ | ✗ |
| lwIP 2.1.2 | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |
| Seastar 19.06 | ✗ | ✗ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |

**Notation:**
- **PASS (✓)**: Connections that unmistakably conform.
- **UNK**: Not clearly determinable results.
- **FTarget (✗)**: Non-conformities raised by the target host.
- **FPath**: Non-conformities raised by middleboxes on the path.

### Validation
To evaluate our test design, we performed controlled measurements using a testbed setup, eliminating possible on-path middlebox interference. We verified our test implementations by targeting current versions of the three dominant operating systems (Linux, Windows, and macOS) as well as three alternative TCP stacks (uIP, lwIP, and Seastar).

**Results:**
- Linux and lwIP achieved full conformance to the tested requirements.
- All other stacks failed in at least one test each.
- uIP exposed a critical flaw by crashing when receiving a segment with urgent data.
- Seastar failed both checksum tests due to mismatches between believed and actually enabled features.
- macOS and Windows had MSS non-conformities, which could be mitigated by path maximum transmission unit (MTU) discovery.

### Takeaway
Only two tested stacks (Linux and lwIP) passed all tests and showed full conformance. Surprisingly, all other stacks failed in at least one category each, indicating non-conformance to basic mandatory TCP implementation requirements in current OS implementations.

### TCP Conformance in the Wild
#### Measurement Setup and Target Hosts
- **Measurement Setup**: Active probes were performed against target hosts in the Internet using a single vantage point within the IPv4 research network of our university between August 13 and 22, 2019.
- **Target Hosts**: A total of 3,731,566 targets were aggregated from three sources:
  - HTTP Archive (July 2019 dataset)
  - Alexa Internet’s top one million most visited sites list (August 10, 2019)
  - Censys port 80 and 443 scans

**HTTP Archive**:
- Crawled about 5M domains from the Chrome User Experience Report.
- Resolved 876,835 URLs to IPv4 addresses through public DNS services.
- Sampled to at most 10,000 entries per CDN, leading to 147,318 hosts.
- Final set of 27,795 CDN targets after removing duplicates and blacklist filtering.

**Alexa 1M List**:
- Resolved every domain with and without www-prefix.
- Randomly selected one target with and without www-prefix per domain.
- Final set of 466,685 Alexa targets after removing duplicates and blacklist filtering.

**Censys**:
- Provided research access to Internet-wide port scans.

This comprehensive approach ensures a diverse set of end-to-end paths and end hosts, providing a representative picture of TCP conformance in the wild.