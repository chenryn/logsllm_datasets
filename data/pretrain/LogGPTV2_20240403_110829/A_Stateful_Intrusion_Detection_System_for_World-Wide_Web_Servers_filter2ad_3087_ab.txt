### 4. An Intrusion Detection System for Web Servers

The WebSTAT intrusion detection system was developed following the outlined process. It combines new and existing modules to create a comprehensive solution for detecting web server attacks. Specifically, a language extension module defining web-specific events and an event provider that parses web server logs and generates corresponding events were developed. Additionally, pre-existing language extensions and event providers, originally designed for network-based and host-based intrusion sensors, were integrated into WebSTAT without modification, thanks to the modular nature of the STAT framework. Finally, several STATL scenarios were created to detect various types of attacks against web servers.

#### 4.1. System Architecture

Figure 1 illustrates the WebSTAT component-based architecture. The system is composed of domain-independent STAT runtime, language extensions, event providers, attack scenarios, and response functions. 

- **Web Language Extension:** This module defines the basic client request event, auxiliary types, and web-specific predicates. Figure 2 shows a simplified version of the `Request` class, which abstracts an entry in the web server's application log. The `Request` class is a subclass of `STAT_Event`, the root event class in the STAT framework.

```cpp
class Request : public STAT_Event {
public:
    string request;
    string userAgent;
    string encodedRequest; // Decoded string
    bool isRequestEncoded; // Encoding flag
    // Client request
    // User agent
    [...]
}
```

- **Log-Based Event Provider:** This component reads and parses events from the server application log file, creating `Request` objects and inserting them into the STAT Core event queue. The STAT Core then extracts these events and passes them to active attack scenarios for analysis.

- **Attack Scenarios:** These are represented using STATL to specify state-transition models over the event stream. A common pattern used in many WebSTAT scenarios is the "counting scenario" pattern, which requires parameters such as threshold, alert frequency, and inactivity timeout. This pattern is used in the web crawler, pattern matching, and repeated failed access scenarios.

#### 4.2. Attack Scenarios

##### 4.2.1. Malicious Web Crawler Scenario

This scenario checks if web crawlers adhere to the instructions specified in the `robots.txt` file. If any crawler violates these instructions, an alarm is raised. For this scenario to function, the `User-Agent` field must be logged in the Extended Log Format (ELF).

- **Example `robots.txt` File:**

  ```plaintext
  User-agent: *
  Disallow: /cyberworld/map/
  User-agent: cybermapper
  Disallow:
  ```

  This example specifies that no robots should visit URLs starting with `/cyberworld/map/`, except for the robot called `cybermapper`.

##### 4.2.2. Repeated Failed Access Scenario

This scenario detects multiple client errors, including failed authentication attempts, from a particular client or subnet. Such activity indicates a potential probe by a malicious entity. An internal counter records the number of failed requests, and if it exceeds the event threshold, an alarm is raised.

##### 4.2.3. Cookie Stealing Scenario

This scenario detects improper use of session cookies. It records the issuance or initial use of a session cookie by a remote client and maps the cookie to an IP address. Subsequent use by the same client resets an inactivity timer, while a different IP using the same cookie triggers an alarm. The scenario requires parameters for session timeout and cookie name.

- **State-Transition Diagram:**

  ```plaintext
  New cookie issued or used
  Cookie used by different IP
  s0
  Cookie in use
  Cookie stolen
  Session timeout or cookie expiration
  Cookie used by same IP
  ```

##### 4.2.4. Buffer Overflow Scenario

Buffer overflows are a common attack vector. WebSTAT includes a scenario to detect conditions indicative of buffer overflow attempts, such as the presence of binary data or extremely long requests. The scenario requires a parameter for the request length threshold.

- **State-Transition Diagram:**

  ```plaintext
  [Diagram for buffer overflow detection]
  ```

  Note: If a buffer overflow exploits a vulnerability in the web server code, a log entry might not be created, and the attack could go undetected.

##### 4.2.5. Combining Network and Application-Level Buffer Overflow Detection

The STAT framework supports cross-domain intrusion detection by providing a comprehensive set of extension and provider modules. With multiple event providers loaded from different domains, attack scenarios can examine various event sources, enhancing the overall detection capability.

By integrating these components and scenarios, WebSTAT provides a robust and flexible solution for detecting and responding to a wide range of web server attacks.