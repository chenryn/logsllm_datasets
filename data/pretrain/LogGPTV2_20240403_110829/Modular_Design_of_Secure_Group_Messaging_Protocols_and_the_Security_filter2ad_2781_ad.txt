if ¬HG.checkGI(vid, GI)
win
if HG.isRemoved(ID, vid)
V-Pt[ID] ← vidroot
V-Pt[ID] ← vid
else
𝑖[ID] ← 0
P-St[ID] ← ∅
if Del[ID]
V-St[ID].last.flag ← false
V-Tr[ID] +← V-St[ID].first
else
V-St[ID].enq((V-Pt[ID], true))
Figure 4: Commit-related oracles of the security game for se-
cure group-messaging schemes. The compatibility functions are
described in the accompanying text; a formal description is pro-
vided in Section D of the Appendix.
Delivering and injecting commit messages. As with proposals, there
are two oracles that allow attacker A to get a commit message
(CM) to a current group member—for honestly generated CMs and
for adversarially generated CMs (Figure 4). The former oracle, dlv-
CM, can be used by A to deliver to a party ID any CM 𝑇 that
corresponds to a child epoch vid of ID’s current epoch V-Pt[ID],
provided all proposals that lead to vid have been delivered to ID.
Oracle dlv-CM runs SGM algorithm Proc-CM on 𝑇 , which results
in group information GI being output. This information is checked
by function HG.checkGI. Function checkGI checks that GI correctly
reports the new group roster, the originator, as well as the parties
added and removed. Next, if ID has been removed as part of the
commit (checked by function HG.isRemoved), its pointer V-Pt[ID]
is set to vidroot; otherwise, V-Pt[ID] is set to the new epoch vid.
Furthermore, the index counter 𝑖[ID] is reset to 0, and P-St[ID],
the set of proposals stored, is set to the empty set. If ID deletes
old values, i.e., if Del[ID] = true, the game changes the flag in
(·, flag) = V-St[ID].last to false since it is no longer the newest state.
If ID does not delete old values, this change is not made, and the
first element of V-St[ID] is put into V-Tr[ID] (because it is about
to be removed from the queue). Finally, the new epoch vid is added
to the end of queue V-St[ID]. Recall that this queue has a capacity
of 𝑟, which means that the first element of the queue is removed.
This captures that information about the oldest epoch in ID’s state
is now deleted by ID.
The second oracle, inj-CM, is used by A to inject CMs to a
party ID. More precisely, A is allowed to submit any CM 𝑇 ′ that
(a) either belongs to an epoch different from any child epoch of
vid := V-Pt[ID] or (b) is completely made up. A call to this second
oracle is only allowed if the adversary is not currently able to forge
messages for epoch vid. Similarly to proposals, whether this is the
case is determined via the (generic) safety predicates *auth-compr
and *SK-compr.
Delivering and injecting welcome messages. The oracles dlv-WM
and inj-WM can be used by A to deliver and inject welcome mes-
sages, respectively. The work analogously to oracles dlv-CM and
inj-CM above.
Sending messages and challenges. Oracle send allows A to instruct
any current group member S to send a message 𝑚 and associated
data (AD) 𝑎. The oracle runs algorithm Send on 𝑚 and 𝑎, which
creates a ciphertext 𝑒. The oracle increments S’s message counter,
and stores the triple (𝑎, 𝑚, 𝑒) in AM.
The challenge oracle chall works quite similarly, except that A
specifies two equal-length messages 𝑚0 and 𝑚1, and 𝑚𝑏 is passed to
Send (where 𝑏 is the bit chosen during initialization). Furthermore,
the pair (S, 𝑖[S]) is recorded in array Chall.
Delivering and injecting application messages. The attacker can get
application messages to group members in two ways, by using ei-
ther dlv-AM or inj-AM—for honestly and adversarially generated
AMs, respectively. Oracle dlv-AM takes as input a tuple (vid, S, 𝑖, R)
identifying the epoch, the sender, the index, and the recipient of the
AM to be delivered. Then, the corresponding AD and ciphertext
are input to Rcv, which subsequently outputs (𝐸′, S′, 𝑖′, 𝑚′). These
values are checked, and if R misidentifies any of them, the attacker
immediately wins the security game. Subsequently, AM[vid, S, 𝑖, R]
is set to received, indicating that R should no longer keep around
any key material that can be used to decipher 𝑒. If R does not delete
old values, then a corresponding entry is place in array AM-Tr[R].
Note that the oracle does not return any values since the attacker
knows which values are output by Rcv.
Oracle inj-AM allows A to inject any AD/ciphertext pair (𝑎′, 𝑒′)
to a group member R as long as they do not correspond to an hon-
estly generated AM. The game requires that if Rcv accepts 𝑒′ and
outputs (𝐸′, S′, 𝑖′, 𝑚′), it must be the case that (1) the key material
for the 𝑖′th message sent by S′ in epoch 𝐸′ has not been compro-
mised, and (2) no message has been output for these identifiers
before (i.e., a successful replay attack is considered a break of au-
thenticity). Whether (1) is the case is determined by the (generic)
safety predicates *AM-sec and *SK-compr.
Corruption oracle. The corruption oracle corr allows the attacker to
leak the state of any party ID. It does bookkeeping for the following:
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1470// S sends message 𝑚 with AD 𝑎
send(S, 𝑎, 𝑚)
req *compat-send(S)
(𝑠[S], 𝑒) ← Send(𝑠[S], 𝑎, 𝑚)
𝑖[S]++
for R ∈ HG.roster(V-Pt[S]) \ {S}
AM[V-Pt[S], S, 𝑖[S], R] ←
(𝑎, 𝑚, 𝑒)
return 𝑒
// Deliver 𝑖th
dlv-AM(vid, S, 𝑖, R)
msg of S in vid to R
req *compat-dlv-AM(vid, S, 𝑖, R)
(𝑎, 𝑚, 𝑒) ← AM[S, vid, 𝑖, R]
(𝑠[R], 𝐸′, S′, 𝑖′, 𝑚′) ← Rcv(𝑠[R], 𝑎, 𝑒)
if (𝐸′, S′, 𝑖′, 𝑚′) ̸=
(Ep-ID[vid], S, 𝑖, 𝑚)
win
if ¬Del[R]
AM-Tr[R] ← (vid, S, 𝑖)
AM[vid, S, 𝑖, R] ← received
// Attacker leaks state of ID
corr(ID)
for (vid, flag) ∈ V-St[ID] ∪ V-Tr[ID]
V-Lk +← (vid, ID)
if flag
AM-Rcvd ←
{(S, 𝑖) | AM[vid, S, 𝑖, ID] =
received}
AM-Lk +←
(vid, AM-Rcvd, AM-Tr[ID])
𝑊 ← WK-St[ID] ∪ WK-Tr[ID]
WK-Lk +← {wkid ∈ 𝑊 |
WK-ID[wkid] = ID}
𝑆 ← SK-St[ID] ∪ SK-Tr[ID]
SK-Lk +← {skid ∈ 𝑆 |
SK-ID[skid] = ID}
HG.corrHanging(ID)
return 𝑠[ID]
// Disable deletions for ID
no-del(ID)
disable deletions for ID
Del[ID] ← false
// Safety for privacy
*priv-safe
return ∀vid, S, 𝑖 : ((S, 𝑖) ∈
Chall[vid] =⇒ *AM-sec(vid, S, 𝑖))
// S sends challenge with AD 𝑎
chall(S, 𝑎, 𝑚0, 𝑚1)
req *compat-chall(S)
(𝑠[S], 𝑒) ← Send(𝑠[S], 𝑎, 𝑚𝑏)
𝑖[S]++
for R ∈ HG.roster(V-Pt[S]) \ {S}
AM[V-Pt[S], S, 𝑖[S], R] ←
(𝑎, 𝑚, 𝑒)
Chall[V-Pt[S]] +← (S, 𝑖[S])
return 𝑒
// 𝑎′, 𝑒′ get injected to R
inj-AM(𝑎′, 𝑒′, R)
req *compat-inj-AM(𝑎′, 𝑒′, R)
(𝑠[R], 𝐸′, S′, 𝑖′, 𝑚′) ← Rcv(𝑠[R], 𝑎′, 𝑒′)
if 𝑚′ ̸= ⊥
let vid′ : Ep-ID[vid′] = 𝐸′
if ¬(cid:16)¬*AM-sec(vid′, S′, 𝑖′)
∧ *SK-compr(vid′, S′)(cid:17)
∨ AM[vid′, S′, 𝑖′, R] =
received
if ¬Del[vid]
AM[vid′, S′, 𝑖′, R] ←
received
win
AM-Tr[R] ← (vid′, S′, 𝑖′)
return (𝐸′, S′, 𝑖′, 𝑚′)
• Pending proposals and commits. If at the time ID is corrupted,
there are outstanding (i.e., uncommitted) update proposals
(with ID) pid by ID or hanging (i.e, created but not processed
yet) commits (with ID) vid by ID, the attacker learns the
corresponding secrets. To that end HG.corrHanging(ID) sets
BR[pid] ← true resp. BR[vid] ← true for all of them. This
will reflect the fact that these update proposals / commits
cannot be used for PCS.
Disabling deletions. When the attacker calls oracle no-del for a
party ID, that party stops deleting old values and stores them on a
special trash tape instead (which is leaked along with the rest of
ID’s state to the attacker upon state compromise).
3.2.6 Privacy-related safety. At the end of the execution of the
SGM security game, the procedure *priv-safe ensures that the
attacker has only challenged messages that are considered secure
by the (generic) safety predicate *AM-sec. If the condition is not
satisfied, the attacker loses the game.
3.2.7 Advantage. Let Π = {*AM-sec, *auth-compr, *SK-compr}
be the set of generic safety predicates used in the SGM definition.
The attacker A is parameterized by it’s running time, 𝑡, and the
number of challenge queries, 𝑞, and referred to as (𝑡, 𝑞)-attacker.
The advantage of A against an SGM scheme Γ w.r.t. to predicates
Π is denoted by AdvΓ
SGM,Π(A).
Definition 3.1. An SGM scheme Γ is (𝑡, 𝑞, 𝜀)-secure w.r.t. predicates
Π, if for all (𝑡, 𝑞)-attackers,
AdvΓ
SGM,Π(A) ≤ 𝜀 .
Figure 5: Send/receive, corruption, no-deletion, and privacy-
safety oracles of the security game for secure group-messaging
schemes. The compatibility functions are described in the accom-
panying text; a formal description is provided in Section D of the
Appendix.
• Epochs: All epochs ID currently stores information for are
kept track of by V-St[ID]; recall that for (vid, flag) ∈ V-St[ID]
the variable flag records whether or not the information
stored about vid allows to infer key material of child epochs.
The security game copies the pairs in V-St[ID] with flag =
true into the set V-Lk. Additionally, for all (vid, ·) ∈ V-St[ID],
records the current set of messages already received by ID in
epoch vid. This helps keep track of which application mes-
sages are affected by this instance of state leakage. Finally,
the values in V-Tr[ID] are also recorded.
• Welcome keys: By leaking ID’s state, A learns all welcome
secret keys currently stored by ID: either because ID is sup-
posed to be storing them (recorded by WK-St[ID]) or because
they are in ID’s trash (i.e., in WK-Tr[ID]). The corresponding
wkids are added to the set WK-Lk.
• Signature keys: Handled analogously to welcome keys.
• Application-message trash: The attacker also learns all values
in the array AM-Tr[ID].
4 MODULARIZING MLS AND PROVING ITS
SECURITY
This section provides a summary of the MLS protocol, our modu-
larization of it, as well as the security proofs for the full protocol—
based only on the security of the generic components—and for the
components themselves (based on specific common cryptographic
assumptions).
Our modularization splits MLS into the following three compo-
nent primitives: continuous group key-agrement (CGKA), forward-
secure group AEAD (FS-GAEAD), and PRF-PRNGs. FS-GAEAD corre-
sponds to a single epoch of secure group messaging, the PRF-PRNG
can be thought of as an entropy pool from which key material for
FS-GAEAD is extracted, and the entropy pool itself is continually
refreshed by values from CGKA.
4.1 Continuous Group Key Agreement
CGKA schemes have a structure that is very close to that of an SGM
protocol: they proceed in epochs using the propose-and-commit
paradigm and provide algorithms for group creation/joining, in-
teraction with the PKI, issuing proposals, and creating/processing
commits. However, instead of being used to send/receive messages,
in each epoch, CGKA scheme outputs a high-entropy update secret.
The full CGKA syntax can be found in Section A of the Appendix.
The part of MLS responsible for CGKA is called TreeKEM; an
improved version called RTreeKEM is also known and considered
in this work, despite not currently being part of the MLS standard.
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1471Security definition. CGKA schemes are expected to guarantee the
secrecy of the generated group keys. Furthermore, just like SGM
schemes, they must provide post-compromise forward secrecy (PCFS).
Once more, both update proposals and commits must contribute to
post-compromise security (PCS). CGKA schemes must also be able
to deal with bad randomness as well as parties who do not delete
old values.
An important difference between CGKA and SGM schemes is
that the former are designed in a fully authenticated setting. That
is, the attacker in the CGKA security game is not permitted to inject
control messages. This turns out to be sufficient as the “authenti-
cation layer” can be added by the higher-level protocol using the
CGKA scheme; it also greatly simplifies the security analysis.
Similarly to SGM, the CGKA security game allows adversary A
to control the execution of and attack a single group. In particular,
A controls who creates the group, who is added and removed, who
updates, who commits, etc. The attacker is also allowed to leak the
state of any party (whether currently part of the group or not) at
any time. The privacy of keys is captured by considering a challenge
that outputs either the actual key output by the CGKA scheme or a
truly random one—which one is determined by an internal random
bit 𝑏, which must be guessed by A at the end.
The CGKA security game follows the history-graph paradigm
to keep track of all the relevant execution data. The recorded data
informs a safety predicate *CGKA-priv used at the end of the game
to exclude trivial wins by A. More details can be found in Section A
of the Appendix.
Instantiation: (R)TreeKEM. The (R)TreeKEM CGKA protocols are
based on so-called (binary) ratchet trees (RTs). In an RT, group
members are arranged at the leaves, and all nodes have an associated
public-key encryption (PKE) key pair, except for the root. The tree
invariant is that each user knows all secret keys on their direct path,
i.e., on the path from their leaf node to the root. In order to perform
a commit operation and produce a new update secret 𝐼, a party
first generates fresh key pairs on every node of their direct path.
Then, for every node 𝑣′ on its co-path—the sequence of siblings of
nodes on the direct path—it encrypts specific information under the
public key of 𝑣′ that allows each party in the subtree of 𝑣′ to learn
all new secret keys from 𝑣’s parent up to the root. In TreeKEM,
standard (CPA-secure) PKE is used. As shown in previous work [3],
this leads to subpar PCFS. RTreeKEM improves on this by using
so-called updatable PKE (UPKE), in which public and secret keys are
“rolled forward” every time a message is encrypted and decrypted,
respectively.
Security results. In order to establish adaptive security of the RTreeKEM