Connection: Keep-Alive
User-Agent: Mozilla/4.0
Host: www99.americanexpress.com
Cookie: Manage=cards; s session id=1231122950204954-05-05
Figure 3. HTTP GET request generated when accessing
account summary from americanexpress.com
ing the design methodology of websites.
It assumes that
the actions that are triggered at a web server in response to
a request only depend on the values of the constant valued
attributes. Therefore, two requests with the same set of con-
stant valued attributes names but different values can have
different semantics at the server side. This assumes that the
random valued attributes do not dictate semantics at the web
server side. This is a reasonable assumption, since it is un-
clear why websites would be designed in such fashion. We
have manually validated this assumption by examining the
request messages for many popular websites and we have
not encountered any website that contradicts this assump-
tion.
Also, an HTTP request contains some header informa-
tion such as accept, referer, etc. Delegate ignores these at-
tributes because any alteration of these values by malware
can only cause denial of service and are not signiﬁcant for
protecting against dangerous requests.
The formal model of an HTTP request message as an
HTTP request object prunes away some unnecessary infor-
mation in the request and classiﬁes the rest of the informa-
tion as constant or random. Fig 2 shows an example HTTP
request and its corresponding HTTP request object. This
example also includes the classiﬁcation of the (cid:0)attribute,
value(cid:1) pairs. This request is generated when a user is try-
ing to access his/her credit card payment history from amer-
icanexpress.com. Only a portion of the HTTP request is
shown for simplicity.
HTTP Template:
(cid:2)URL,/myca/onlinepayment/us/action(cid:3), constant
(cid:2)Type, GET(cid:3) , constant
(cid:2)request type, authreg CardPayments (cid:3), constant
(cid:2)Manage, cards(cid:3), constant
(cid:2)s session id, *(cid:3), Random
Proxy Action:
Validate
Message:
Trying to access the American express account summary.
Figure 4. An example Rule
A rule is the basic building block of the policy language.
Each rule instructs the proxy which action to take for cer-
tain kinds of requests. Each rule has the following structure:
RULE:
(cid:0)HTTP TEMPLATE(cid:1) (cid:0)PROXY ACTION(cid:1) (cid:0)MESSAGE(cid:1)
HTTP TEMPLATE describes the class of requests per-
taining to the rule. Informally, an HTML TEMPLATE has
to encompass a set of HTTP requests. PROXY ACTION
describes the action that the proxy takes for the class of
requests, and MESSAGE contains the message the proxy
sends to the user when validation is required.
Deﬁnition 4 - HTTP TEMPLATE: An HTTP Template
contains a set of (cid:0)attribute,value(cid:1) pairs, denoted as (cid:3)(cid:0)(cid:1) .
The cardinality of the set (cid:3)(cid:0)(cid:1) is at least two. The HTTP
template also contains the URL and the type pairs. The rest
of the (cid:0)attribute,value(cid:1) pairs are classiﬁed as either con-
stant or random. For constant valued attributes, the value is
stored in the rule. For random valued attributes, no value is
stored.
The following deﬁnition describes when a request R con-
forms to a HTTP Template T.
Deﬁnition 5 - Template Conformance: A request R
conforms to an HTTP Template T, when the following
holds:
(cid:1) R.urlpair = T.urlpair
(cid:1) R.typepair = T.typepair
(cid:1) Let all constant valued (cid:0)attributes,value(cid:1) pairs in
(cid:2)(cid:0)(cid:1) be represented by the set (cid:2)(cid:4)
(cid:0)(cid:1) . Let all con-
stant valued (cid:0)attributes,value(cid:1) pairs in (cid:3)(cid:0)(cid:1) be rep-
resented by the set (cid:3) (cid:4)
(cid:0)(cid:1) . Then, (cid:2)(cid:4)
(cid:0)(cid:1) = (cid:3) (cid:4)
(cid:0)(cid:1) .
(cid:1) Let all random valued attribute names in (cid:2)(cid:0)(cid:1) be rep-
resented by the set (cid:2)(cid:5)
(cid:0). Let all random valued at-
tribute names in (cid:3)(cid:0)(cid:1) be represented by the set (cid:3) (cid:5)
(cid:0) .
Then, (cid:2)(cid:5)
(cid:0) = (cid:3) (cid:5)
(cid:0)
Fig 4 shows an HTTP TEMPLATE example. A request
R conforms to a Template T, if all constant valued pairs
from R match their corresponding pairs in T. The random
variable values are ignored since they are session speciﬁc.
Consider the two HTTP GET requests in Fig 2 and
Fig 3. The GET request in ﬁg 2 is generated when the
user is trying to access his/her payment history from amer-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:32:31 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006HTTP POST MESSAGE:
Accept: image/gif,
Referer: http://home.americanexpress.com/home/mt personal cm.shtml
Connection: Keep-Alive
User-Agent: Mozilla/4.0
UserID=bobwiley009&Password=notherealpassword&manage=cards
Figure 5. An example POST message
Validation Message:
Are you trying to log in to americanexpress.com??
Form reconstruction:
UserID = NOT SPECIFIED TO BE FILLED IN BY THE PROXY
Password = NOT SPECIFIED TO BE FILLED IN BY THE PROXY
NO DESCRIPTION=cards
Figure 6. An example Validation Message
icanexpress.com, while the other GET request is gener-
ated when the user is trying to access his account sum-
mary from the same website. Both these requests have the
same set of constant valued attributes, but the value of the
action request type dictates the information that the web
server should return.
PROXY ACTION: PROXY ACTION speciﬁes the ac-
tion the proxy takes when an HTTP request conforms to the
HTTP TEMPLATE. There are four possible proxy actions:
1. Validate: The proxy contacts the user via the cell
phone to validate the HTTP request.
2. Accept: The proxy forwards the HTTP request to the
web server without any user validation.
3. Defer: The proxy stores the HTTP request locally
and not forward the request to the web server. The
user can validate the request once he/she is back
working on the trusted proxy. Defer action is very
helpful, since it saves the bother of contacting the
user via the cell phone. Such an action is applied
to requests which are not urgent. Since HTTP is a
stateless protocol, requests can be stored locally and
sent at a later time during a new session to have the
same effect.
4. Drop: The proxy drops the request and does not for-
ward it to the web server. This applies to requests
that the user never intends to issue from an untrusted
machine.
MESSAGE: MESSAGE refers to a text message that is
sent to the user when a request sent by the user satisﬁes
the HTTP TEMPLATE and PROXY ACTION is set to Val-
idate. Otherwise, the MESSAGE is left blank. The message
states the semantic meaning or the purpose of the request.
Since this message is given by the user, the user can eas-
ily identify the essence of the request when the message is
received on the cell phone.
Validation messages need to be sent to the user only for
HTTP GET and HTTP POST messages. Even though there
are 6 other types of HTTP messages, these are the only
two relevant to the Delegate architecture. An HTTP GET
message retrieves a resource from the web server, while an
HTTP POST messages sends data to a web page for further
processing. Fig 2 shows an example of the GET request
and ﬁgure 5 shows an example of the HTTP POST request.
The end of a POST request contains a data string, which
contains the data that is being submitted to the web server.
To validate an HTTP GET message, the entire message is
sent to the user. Validation of HTTP POST messages is not
that simple. Typically, POST messages are generated when
a user submits a form. When a post message is received, the
proxy constructs a text representation of the form and sends
it to the user for validation. A text representation of a form
is constructed in the following manner: a) The descriptive
text preceding each input element is located. b) The set of
(cid:0)descriptive text, input value(cid:1) pairs for all the input ele-
ments constitutes the text representation of the form. Fig
6 shows the validation message sent to the user when the
proxy receives the POST message in ﬁg 5. Note, the value
cards does not have any descriptive text in the form.
Improving the expressiveness of the HTTP templates
Previously, we have deﬁned HTTP templates that are ap-
plicable only for a particular kind of requests. To provide
set semantics to HTTP Templates, we allow regular expres-
sions to be placed in the value part of the (cid:0)attribute, value(cid:1)
pairs. We denote such templates as coarse templates. For
such templates, we modify Deﬁnition 5 as follows:
Deﬁnition 5b: A request R conforms to a coarse tem-
plate (cid:3)(cid:4), when the following holds:
(cid:1) R.urlpair matches with the regular expression speci-
ﬁed in (cid:3)(cid:4) (cid:4)	 (cid:9)(cid:10).
(cid:1) R.typepair matches with the regular expression speci-
ﬁed in (cid:3)(cid:4) (cid:4)(cid:12)(cid:13)(cid:9)(cid:10).
(cid:15)(cid:1)(cid:27) (cid:16)(cid:28)(cid:6)(cid:18)(cid:6)(cid:7) (cid:22)	 (cid:4)
The rule-based approach is reminiscent of ﬁrewalls. The
proxy acts as a remote, personal ﬁrewall to protect the user’s
privacy and security. As in traditional ﬁrewalls, a single re-
quest can conform to several templates with conﬂicting ac-
tions. For instance, consider a user providing his validation
policy to the proxy for the amazon.com website. The user
does not want to validate any GET requests unless the GET
request fetches his/her past purchases. The easiest way to
create this policy is to create two rules, one rule accepts all
GET requests and another rule validates any GET request
for the history page. These two rules clearly conﬂict. If
conﬂicts were not allowed, the user is forced to specify a
rule for every web page that she expects to access.
The actions in Delegate have a clear precedence: Vali-
date, Defer, Drop, and Accept. When two different rules
conﬂict, the conﬂict is resolved according to the prece-
dence order. The conﬂict resolution operation is associa-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:32:31 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006tive, therefore, when more than two rules conﬂict, the order
in which the conﬂicts are resolved does not matter.
(cid:15)(cid:1)(cid:15) (cid:22)	 (cid:4) (cid:29)(cid:4)(cid:4)(cid:13)(cid:6)
Delegate relies on a policy database of rules for each
website the user accesses from an untrusted machine. Poli-
cies can originate from someone other than the user. For
instance, security experts can develop policy ﬁles for cer-
tain websites that a user can easily install and use. A user
could customize the policy to meet her requirements. An-
other likely scenario is for a webmaster to provide policies
that identify dangerous actions and provide meaningful val-
idation messages to the user. The webmaster is well-suited
to understand those requests that pose the greatest threat to
users if exploited by malware. A webmasters could spec-
ify a range of policy options geared for users with different
levels of privacy preferences. As the Delegate architecture
is deployed, websites would have a competitive advantage
by providing their users with protective policies when using
untrusted machines. The system is more suitable for non-
technical users if experts supply the policies.
We are exploring an approach to policy generation that
can be used by experts to easily create policies. This ap-
proach has the potential to make it easier for non-experts
to generate their own rules. The approach is to access the
web from the trusted machine that runs the proxy, and have
the proxy assist in automatically generating rules based on
user feedback. To achieve this, the user ﬁrst switches Del-
egate into learning mode and then starts to access websites
as he/she normally would through a proxy.
Whenever the proxy encounters an SCR or a PIR request,
Delegate asks the user whether a rule should be generated.
Since if is difﬁcult to determine a PIR request compared
to an SCR request, Delegate assumes every request to an
image or multimedia object is not a PIR request. Thus, re-
quests that access web pages (i.e. requests that access html
ﬁles, asp pages, etc) are assumed to be PIR requests. For in-
stance, assume that the user is accessing his email account
and has just created an email and pressed the send button.
This generates a POST message that is forwarded to the
proxy. The proxy now asks the user if he wants to create
a rule for this action. If the user responds afﬁrmatively, the
proxy creates an HTTP TEMPLATE for the request as de-
scribed in the previous sections. Now the user can modify
the default template, by placing the “*” operator and mak-
ing the HTTP TEMPLATE more generic. Since the user
is fully aware of this last action (in this case, the user sent
an email), the user chooses an appropriate proxy action and
creates a meaningful message to complete the creation of
the rule if validation is required. Initially, the rule is stored
in the policy database and is not immediately applicable
for future requests. Since the proxy needs to classify the
(cid:0)attribute, value(cid:1) pairs of the HTTP Template as either
constant or random, the proxy waits until the next time it
encounters the same request in a different session so that it
can check for constants. After receiving the rule twice, the
proxy then can apply the rule with immediate effect.
Training the proxy could require a signiﬁcant effort on
the part of the user, since the policies are website speciﬁc
and users wish to access them from the untrusted machine.