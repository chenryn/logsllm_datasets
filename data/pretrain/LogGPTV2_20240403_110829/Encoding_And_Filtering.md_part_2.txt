### Base 64 Encoding Scheme

**Base 64 Encoding Table:**

| Binary | Decimal | Character |
|--------|---------|-----------|
| 001000 | 8       | I         |
| 011000 | 24      | Y         |
| 101000 | 40      | o         |
| 111000 | 56      | 4         |
| 001001 | 9       | J         |
| 011001 | 25      | Z         |
| 101001 | 41      | p         |
| 111001 | 57      | 5         |
| 001010 | 10      | K         |
| 011010 | 26      | a         |
| 101010 | 42      | q         |
| 111010 | 58      | 6         |
| 001011 | 11      | L         |
| 011011 | 27      | b         |
| 101011 | 43      | r         |
| 111011 | 59      | 7         |
| 001100 | 12      | M         |
| 011100 | 28      | c         |
| 101100 | 44      | s         |
| 111100 | 60      | 8         |
| 001101 | 13      | N         |
| 011101 | 29      | d         |
| 101101 | 45      | t         |
| 111101 | 61      | 9         |
| 001110 | 14      | O         |
| 011110 | 30      | e         |
| 101110 | 46      | u         |
| 111110 | 62      | +         |
| 001111 | 15      | P         |
| 011111 | 31      | f         |
| 101111 | 47      | v         |
| 111111 | 63      | /         |

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.34**

#### 1.1.1.3.2 Base 64
**Base 64 Encoding Scheme**

If the total number of bits is not a multiple of 6, null bits need to be added until the total is both a multiple of 6 and the result length is a multiple of 4.

- If the latest group is 'null' (000000), the respective encoding value is `=`.
- If there are two trailing "null groups," they will be encoded as `==`.

Let's check out some examples.

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.35**

#### 1.1.1.3.2 Base 64
**Base 64 Encoding Scheme**

To encode the term "HEY":

- 1st 6 bits
- 2nd 6 bits
- 3rd 6 bits
- 4th 6 bits

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.36**

#### 1.1.1.3.2 Base 64
**Base 64 Encoding Scheme**

To encode the term "HI":

- 1st 6 bits
- 2nd 6 bits
- 3rd 6 bits
- Padding

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.37**

#### 1.1.1.3.2 Base 64
**Base 64 Encoding Scheme**

To encode the character "H":

- 1st 6 bits
- 2nd 6 bits
- Padding

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.38**

#### 1.1.1.3.2 Base 64
**Base 64 Encoding Scheme**

Due to its popularity, many programming languages have implementations for Base64 encoding and decoding. Let's look at some examples.

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.39**

#### 1.1.1.3.2 Base 64
**Base 64 Encoding Scheme: PHP**

PHP uses the `base64_encode` and `base64_decode` functions for encoding and decoding data based on MIME Base 64 implementation:

- **Encode:**
  ```php
  // Encode
  $encoded = base64_encode('your string');
  ```

- **Decode:**
  ```php
  // Decode
  $decoded = base64_decode('encoded string');
  ```

[PHP Documentation: base64_encode](https://www.php.net/base64_encode)  
[PHP Documentation: base64_decode](https://www.php.net/base64_decode)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.40**

#### 1.1.1.3.2 Base 64
**Base 64 Encoding Scheme: JavaScript**

Many browsers can handle Base64 natively through the `btoa` and `atob` functions:

- **Encode:**
  ```javascript
  window.btoa('encode this string'); // Encode
  ```

- **Decode:**
  ```javascript
  window.atob('ZW5jb2RlIHRoaXMgc3RyaW5n'); // Decode
  ```

[MDN Web Docs: Window.btoa](https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa)  
[MDN Web Docs: Window.atob](https://developer.mozilla.org/en-US/docs/Web/API/Window.atob)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.41**

#### 1.1.1.3.2 Base 64
**Base 64 Encoding Scheme**

It is important to note that if you want to handle Unicode strings, you should encode them before using Base64 functions. For example, in JavaScript, this can be done as follows:

- **Escapes and encodings** are required to avoid exceptions with characters out of range. Learn more [here](https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa).

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.42**

#### 1.1.1.4 Unicode Encoding
**Unicode (aka ISO/IEC 10646 Universal Character Set)**

Unicode is the character encoding standard created to enable people around the world to use computers in any language. It supports all the world's writing systems.

- **Security Implications:** Incorrect usage of Unicode can expose web applications to possible security attacks, such as bypassing filters.

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.43**

#### 1.1.1.4 Unicode Encoding

For a better background on Unicode, character sets, and related topics, refer to the following link:
[Joel on Software: The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)](http://www.joelonsoftware.com/articles/Unicode.html)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.44**

#### 1.1.1.4 Unicode Encoding

There are three ways to map Unicode character points:

- **UTF-8**
- **UTF-16**
- **UTF-32**

UTF stands for Unicode Transformation Format, and the trailing number indicates the number of bits to represent code points.

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.45**

#### 1.1.1.4 Unicode Encoding

Each UTF has a different representation, and it is important to understand how to handle these in tests. The following table shows a sample message encoded in the three different UTF formats.

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.46**

#### 1.1.1.4 Unicode Encoding

It is also useful to know how Unicode characters are handled through different implementations like URLs, HTML, JavaScript, etc. Some examples are provided below.

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.47**

#### 1.1.1.4 Unicode Encoding

Another interesting aspect is the interpretation that humans and different implementations give to some characters.

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.48**

#### 1.1.1.4 Unicode Encoding
**Homoglyph | Visual Spoofing**

In typography, a homoglyph is one or more characters, or glyphs, with shapes that either appear identical or cannot be differentiated by quick visual inspection. [Wikipedia]

- **Homograph:** A word that looks the same as another word.
- **Homoglyph:** A look-alike character used to create homographs.

[Wikipedia: Homoglyph](http://en.wikipedia.org/wiki/Homoglyph)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.49**

#### 1.1.1.4 Unicode Encoding
**Homoglyph | Visual Spoofing**

One possible attack with Unicode is called **Visual Spoofing**:

- **U+006F** LATIN SMALL LETTER O
- **U+03BF** GREEK SMALL LETTER OMICRON

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.50**

#### 1.1.1.4 Unicode Encoding
**Homoglyph | Visual Spoofing**

Analyzing the character code points, the differences between "o" and "ο" are evident, but for a human, this is not so obvious. These kinds of characters, known as confusables, received special attention from the Unicode Consortium (TR39). They provide a utility to see the combinations that are confusable with an input string.

[Unicode TR39: Security Considerations for the Use of Unicode in Identifiers](http://www.unicode.org/reports/tr39/)  
[Unicode CLDR: Confusables Utility](http://unicode.org/cldr/utility/confusables.jsp)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.51**

#### 1.1.1.4 Unicode Encoding
**Homoglyph | Visual Spoofing - Example: google.com**

- **U+0065** LATIN SMALL LETTER E
- **U+0063** LATIN SMALL LETTER C
- **U+043E** CYRILLIC SMALL LETTER O
- **U+03F2** GREEK LUNATE SIGMA SYMBOL

- **google.com VS gοоglе.ϲom**
  - **U+006F** LATIN SMALL LETTER O
  - **U+043E** CYRILLIC SMALL LETTER O
  - **U+0435** CYRILLIC SMALL LETTER IE
  - **U+03BF** GREEK SMALL LETTER OMICRON

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.52**

#### 1.1.1.4 Unicode Encoding
**Homoglyph | Visual Spoofing**

To speed up the generation of homographs, Adrian “Irongeek” Crenshaw created an application:

- **Homoglyph Attack Generator**
  - [Homoglyph Attack Generator](http://www.irongeek.com/homoglyph-attack-generator.php)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.53**

#### 1.1.1.4 Unicode Encoding
**Homoglyph | Visual Spoofing**

This tool is part of a paper where the author explains the abuse of Unicode characters to obfuscate phishing attacks through the use of homoglyphs and Punycode.

- **Punycode and Homoglyph Attacks to Obfuscate URLs for Phishing**
  - [Paper by Adrian Crenshaw](http://www.irongeek.com/i.php?page=security/out-of-character-use-of-punycode-and-homoglyph-attacks-to-obfuscate-urls-for-phishing)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.54**

#### 1.1.1.4 Unicode Encoding
**Computer Interpretations**

Another interesting aspect is related to string and character transformations that occur during normal software processes, such as upper and lower casing transformations.

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.55**

#### 1.1.1.4 Unicode Encoding
**Computer Interpretations - Example: Censured Feedback**

In a feedback page, the application layer performs a censorship check before storing data in a database. There is an input filter that blocks the term "EVIL," then transforms the string to lowercase and stores it in the database.

- **Input Flow:**
  - **User sends the message:**
    - **Evİl intent, as usual!**
  - **Filter checks for evil strings, but without success:**
    - **Evİl != evil**
    - **U+0130 (İ):** LATIN CAPITAL LETTER I WITH DOT ABOVE
  - **Casing operation is performed [to lowercase]:**
    - **evil intent, as usual!**
    - **U+0130 (İ) to lowercase is U+0069 (i):** LATIN SMALL LETTER I
  - **CENSURED BYPASSED**

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.56**

#### 1.1.1.4 Unicode Encoding
**Computer Interpretations - Example: Censured Feedback**

This happened because the casing operation was performed after the security check. This also works by uppercasing characters, such as:

- **ſ S:**
  - **U+017F (ſ):** LATIN SMALL LETTER LONG S
  - **U+0053 (S):** LATIN CAPITAL LETTER S

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.57**

#### 1.1.1.4 Unicode Encoding
**Computer Interpretations - Example: Censured Feedback**

This type of vulnerable implementation may allow an attacker to bypass filters, such as anti cross-site scripting and SQL injection filters. These are real-world issues, as demonstrated in the following case:

- **Creative usernames and Spotify account hijacking**
  - [Spotify Labs Blog Post](http://labs.spotify.com/2013/06/18/creative-usernames/)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.58**

#### 1.1.1.4 Unicode Encoding
**Computer Interpretations**

Other ways characters and strings can be transformed by software processes include normalization, canonicalization, best fit mapping, etc. These are summarized and explained by Chris Weber in his:

- **Unicode Security Guide**
  - [Unicode Security Guide](http://websec.github.io/unicode-security-guide/)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.59**

#### 1.1.1.4 Unicode Encoding
**Computer Interpretations: Mixed Examples**

- **Normalization:**
  - **ⓓⓡⓞⓟ ⓣⓐⓑⓛⓔ becomes drop table**

- **Canonicalization:**
  - **‹ (U+2039) becomes ﹤ (URL)**
  - **Example URL:**
    - **FORW-URL?is_ok=yes**
    - **Encoded:**
      - **FORW-URL%3Fis_ok%3Dyes**
    - **URL:**
      - **http://mywebsite/login.php?redirectURL=FORW-URL%3Fis_ok%3Dyes**

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.65**

#### 1.1.2 Multiple (De|En) Codings
**Example: URL-Encoding > URL**

Even if a parameter sent is not a URL, encoding is still required:

- **I♥🍻**
- **Encoded:**
  - **I%E2%99%A5%F0%9F%8D%BB**
- **URL:**
  - **http://mywebsite/login.php?param=I%E2%99%A5%F0%9F%8D%BB**

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.66**

#### 1.1.2 Multiple (De|En) Codings
**Example: URL-Encoding > URL**

Multiple encodings may also occur if the parameter sent is previously encoded, like the following: