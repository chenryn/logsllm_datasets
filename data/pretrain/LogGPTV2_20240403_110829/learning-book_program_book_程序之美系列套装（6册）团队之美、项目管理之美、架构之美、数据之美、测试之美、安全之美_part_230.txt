爆发，萨瓦一家后来飞离了巴黎，LeCorbusier才有幸不必在法庭上
应诉。这一切只因他设计了基本上无法居住的、特别漂亮的“居住
机器”（machine-for-living）（DeBotton2006）
另一名现代建筑的名誉领袖LudwigMiesvanderRohe，使用了基于I
型金属梁的极简主义规范系统。他“在书桌旁边保留了全尺寸型金
属梁的详细信息以获得恰好那样的比例。他认为"型金属梁”是多利
安式圆柱（DoricColumn）的现代等价物”（Jencks2006）。
更著名的是他对“少即是多”的运用，通过这个原则，他希望将建筑
带回主要本质：没有装饰、装修或多余的元素，除非它们实现了特
定的功能。型金属梁是建筑的基本部分。或者说看起来似乎是这
样。MiesvanderRohe的一件主要作品是纽约的Seagram大厦，建成
于1958（参见图14-5）。建筑师面临了一个难题：尽管他很想在结
构中展示型金属梁，但在美国的建筑法规中却不允许这样做，法规
要求金属支撑必须包以防火材料，如混凝土。但很奇怪，仔细看
Seagram大厦会看到它表面的i型金属梁。这些不是真正的支撑i型金
属梁。MiesvanderRohe要求在表面添加假的I型金属梁，这样它们
就能“揭示”内部的结构。而且，为了不影响大厦的视觉效果，窗户
1301
---
## Page 1303
的形状只能处于三种状态：打开、关闭或打开一半。对于防护太阳
光来说，这可能不是最佳的安排（Wolfe1982）。
图14-5：Seagram大厦
一流的现代建筑师LouisSullivan（摩天大楼的创造者之一，Wright
的指导者，以及其他一些成就）写下了著名的一段话：
不论是翔的雄鹰，或盛开的苹果花、辛苦工作的马匹、无忧无虑
的天鹅、枝叶繁茂的橡树、蜓的溪流、飘浮的云朵、飞奔的太
阳，形式总是服从于功能，这就是自然的法则。功能不变，形式就
1302
---
## Page 1304
不变。花岗岩、永恒沉寂的山峦，常年不变；一闪而过的生命，生
长成形，转瞬即逝。
这是所有事物的法则，无论有机还是无机、实体的还是形而上的、
关于人的还是关于超人的、有关大脑和心灵的所有现象，即生命可
以通过它的表达方式来认识，形式总是服从于功能。这就是自然法
则。（Sullivan1896)
MiesvanderRohe接下来似乎在脑T上贴上了“形式服从于功能"的
标签。也许可能是这样的格言更有煽动性，而不是描述真实发生的
情况。PaulRand可能是一流的美国图形设计师。他曾负责设计
IBM、ABC和最初UPS的标志，他与SteveJobs在NeXT计算机公司合
作过，他写了一些有影响的书籍，介绍他的设计理论。他指出：
分离形式和功能，分离概念和执行，不太可能产生具有美学价值的
东西，而这些美学价值是一直以来反复不断呈现的。类似地，如果
某系统根本不考虑美学，将艺术家与他的产品分开来，将艺术家和
他的产品割裂开来，将个人的工作分开来，或由集体创作，或者由
一个创造过程得到“百果馅”，那么从长期来看，不仅产品会贬值，
它的创作者也会贬值。（Rand1985）
责难现代建筑是很容易的，特别是MiesvanderRohe和LeCorbusier
的作品在世界范围内被拙劣地模仿，造成了许多丑陋的民居区、犯
罪滋生的工人宿舍和没有灵魂的商业中心。更有趣的是深入研究大
师们自己的评论。我们看到，Wright、LeCorbusier和Miesvander
Rohe都受到了批评，因为他们不让步。他们因坚定不移而受批评，
因不做折中而受批评。他们尖锐的观点给我们留下了美丽的建筑，
但这些建筑没有给我们带来物质上的享受。
坚定不移不一定是缺点。在《DoctorDobb'sJournal》杂志1996年4
月的访谈中，DonaldKnuth被问到他对EdsgerDijkstra的看法。“他了
不起的地方在于他不做折中。想到用C++编程就会让他身体不舒
服。”他的不折中达到了这样一种程度，以至于多年未碰计算机，
写了“关于谦恭程序员（HumbleProgrammer）的真正极好的文章来
讨论这一点”。Dijkstra是最有影响力的计算机科学家之一，他的著
作今天仍然充满了有价值的建议，当我们被编程领域最新的时尚或
银弹吸引时，阅读这些著作是很有益的。对于那些必须在真实世界
计算机上编程的程序员来说，他不让步的姿态使他的著作显得尤为
珍贵。
1303
---
## Page 1305
这可能是理解Smalltalk的角色的关键，像在它之前的Algol一样，
Smalltallk在我们的职业生涯中扮演了重要角色。有一些建筑师并辟
了新的道路，为将来的几代人创建了纪念碑，可能这些建筑的本质
比实际的房屋或办公楼更是一种宣言。没人会争论Fallingwater打动
拜访者的力量以及它为年轻架构师带来的灵感，即使我们可能会争
论它是否是合适的住房，或者我们可能争论“形式服从于功能”，并
让装饰到处都是，直到后门。类似地，有一些软件系统的成功更多
地在于它们对代码的影响，而不是用它们来编写代码。
如果我们想编写代码，为了业务或为了并心，我们就需要从美丽的
架构中获取灵感，但我们也许不能直接利用它来工作。我们的工作
必须以美丽的架构为榜样，但必须是实际可行的。最纯粹最美丽的
智力体系是纯数学，我们可以从中学到很多，但我们不能用它来编
程。我们必须开发出能工作的系统，这就是事情开始变得复杂的原
因。有时候人们很容易迷失在设计方法学中，忘记了我们的目标是
不同的。ChristopherAlexander，这位作为设计模式之父的架构师这
样说到：
整个学术领域都是围绕着“设计方法"的思想发展起来的一我也被看
作是这些所谓的设计方法的拥护者之一。我对此非常报歉，我想公
并声明，我完全拒绝将设计方法作为一个课题来研究，因为我认为
将设计的研究和设计的实践分离开来是非常荒唐的。实际上，学习
设计方法而不实践设计的人几乎都是失败的设计者，他们没有活
力，他们丧失了创造事物的冲动，或者说从来就没有过这种冲动。
(Alexander 1971)
作为程序员，我们必须创造能工作的系统，而不只是看起来漂亮的
东西。这两者不一定不可兼得。图14-6展示了RobertMaillart设计的
Salginatobel大桥，它峻工于1930年。Maillart是瑞士人，学的是工
程，但他的作品，特别是他的桥，是建筑之美的典范。最重要的
是，这些作品不只是漂亮。Maillart在竞标中赢得合同再建造大
桥，以Salginatobel大桥为例，他击败了其他19份竞争设计，赢得了
合同。建造大桥和公路当时只花了70万瑞士法郎，在今大接近400
万。这座桥不是一个小工程。它的跨度达到90米，拱顶距Salgina河
谷底达80米（Billington2000）。结构的修长和轻巧是它低成本的原
因。这座桥的低成本要归因于它的优雅。
Maillart的主要优点在于他的实用主义观点。他通过一种创造性的直
觉得到了他的设计。他避开装饰和点缀，而且也没有模仿传统的建
1304
---
## Page 1306
筑风格。他设计的结构不能由当时的计算工具分析（而且缺少计算
机），所以不能证明设计是可靠的。他利用简化的图形分析来评估
设计的可行性。如果Maillart必须等待其设计的严格证明，他的所有
作品都不会建造（他于1940年去世）。Maillart"发现创新，尤其是
桥梁设计的创新，不是来自于实验室的工作和数学理论，而是来自
于设计室和建筑工地。数据在工程中扮演了十分重要的角色。但桥
梁设计中的创新是可视的几何学想象的产物，而不是来自于抽象的
数值分析，也不是从一般理论推导而来”（Billington1997）。
编程像建筑一样，是一种实践。我们最好避免教条主义，而是将注
意力放在能工作的东西上：
建筑是全能和无能的危险混合。表面上涉及的是“塑造"这个世界，
因为他们要成为有影响力的建筑师，就要影响其他人一客户、个人
或机构。因此，不连贯，或者更准确地说，随意性，是所有建筑师
生涯的底层结构：他们面对的是随意的指令序列，以及他们没有确
定的参数，在他们几乎不了解的国家，面对他们几乎没有意识到的
问题，人们希望他们处理那些即使聪明得多的人都很难处理的问
题。建筑在本质上就是混乱的冒险。（Koolhas等1998）
建筑是混乱的冒险，因为只有美丽的架构是不够的。不仅要美丽，
而且要有用，这是建筑和编程等活动的法则。
1305
---
## Page 1307
图14-6:Salginatobel大桥
参考资料
Abrahams,David,and Aleskey Gurtovoy.2005, C++Template
Metaprogramming:
Concepts,Tools,and Techniques from Boost and Beyond.Boston,MA:
Addison-Wesley.
Alexander,Christopher.1971.Notes on the Synthesis of Form,Preface to the
paperback edition.Cambridge,MA:Harvard University Press.
Alpert,Sherman R., Kyle Brown,and Bobby Woolf.1998.The Design
Patterns Smalltalk Companion.Boston,MA: Addison-Wesley
Billington,David P.200o."The Revolutionary Bridges of Robert
Maillart."Scientific American.July,pp.85-91.
Billington,David P.1997.Robert Maillart: Builder,Designer,and
Artist.New York,NY: Cambridge University Press.
Black,Andrew P.,et al.2007.Squeak By Example.Square Bracket
Publishing.
Bloch,Joshua.2008.EffectiveJava,SecondEdition.Boston,MA:
Addison-Wesley.
Brand,Stewart. 1997.How Buildings Learn: What Happens After They're
Bult,Revised.
Edition.London,UK:Phoenix Ilustrated
Calvino,Italo. 1986."Why Read the Classics?"The Uses of
Literature.Translated by Patrick Creagh.New York,NY:Harcourt Brace
Jovanovich.
Conroy,Thomas J., and Eduardo Pelegri-Llopart.1983."An Assessment
of Method-Lookup Caches for SmallTalk-80 Implementations."Smalltalk
80: Bits of History, Words of Advice.Ed.Glenn Krasner.Boston,MA:
Addison-Wesley.
1306
---
## Page 1308
Curtis,William J.R.1996.Modern Architecture Since 1900,Third
Edition.New York,NY: Phaidon Press.
De Boton,Alain.2006.The Architecture of Happiness.London,UK
Hamish Hamilton.
Gamma,Erich,et al.1994.Design Patterns: Elements of Reusable Object-
Oriented Software.Boston,MA: Addison-Wesley.
Goldberg,Adele,and David Robson.1989.Smalltalk-80:The
Language.Boston,MA: Addison- Wesley.
Forman,Ira R.,and Scott H.Danforth.1999.Putting Metaclasses to
Work: A New Dimension in Object Oriented Programming.Boston,MA:
Addison-Wesley.
Jencks,Charles.2006.The New Paradigm in Architecture: The Language
of Post-Modernism.New Haven,CT:Yale University Press.
Josuttis,Nicolai M.1999.The C++Library: A Tutorial and
Reference.Boston,MA:Addison-Wesley.
Kaufimann,Edgar Jr.1986.Fallingwater: A Frank Lloyd Wright Country
House.New York,NY: Abbeville Press.
Koolhas,Rem,et al.1998.S,M,L,XL,Second Edition.New York,NY: The
Monacelli Press.
McCarthy,John.1960."Recursive Functions of Symbolic Expressions and
Their Computation by Machine,Part I."Communications of the ACM,April
1960.
McConnell,Steve.2004.Code Complete,SecondEdition.Redmond,WA:
Microsoft Press.Meyers,Scott.2005.Effective C++:55 Ways toImprove
your Programs and Designs.Boston,MA: Addison-Wesley.
Norman,Donald.1988.The Psychology of Everyday Things.New