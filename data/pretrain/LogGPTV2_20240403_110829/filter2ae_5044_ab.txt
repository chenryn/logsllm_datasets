            AND [RANDNUM]=[RANDNUM1]
根据测试向量，将`[RANDNUM]=[RANDNUM1]`随机生成两个数字，生成的逻辑假数据包如下：
    example.php?id=1 AND 8858=3197
在发送第一个逻辑假包之后，sqlmap就开始进行网页相似度计算，首先移除动态随机字符串之后得出逻辑假页面与原始页面网页相似度值为0.787，并认为该页面与原始页面不相似。该网页相似度值将会被置为本组测试向量过程中的临界点，sqlmap默认的容差为0.05，也就是说，当一个响应的网页相似度大于0.792（0.787+0.05）时，sqlmap认为该响应与原始页面相似，否则，与原始页面不相似。
根据测试向量，将`[RANDNUM]=[RANDNUM]`随机生成一个数字，生成的逻辑真数据包如下：
    example.php?id=1 AND 1293=1293
发送逻辑真请求后，sqlmap接受响应并计算网页相似度，此处计算网页相似度为1（随机字符串被移除），大于0.792，逻辑真响应与原始响应相似。
将`[RANDNUM]=[RANDNUM1]`随机生成两个数字，用于确认的逻辑假数据包如下：
    example.php?id=1 AND 2560=4847
再一次发送逻辑假请求，去除随机字符串后计算网页相似度，值为0.787，认为该网页与原始网页不相似。至此，sqlmap认为注入存在，接下来进入误报检测环节。
在布尔盲注误报检测中，会生成三个不同的数字，并有这些数字组成不同的逻辑，把这些逻辑替换测试向量中原有的逻辑，并观察响应是否如预期。回顾一下测试向量，其中包含一个``标签，标签中的`[INFERENCE]`就是三个数字组成的逻辑替换的地方。
看一下误报检测流程图，一共有五个误报检测逻辑，在实际情况中分别为：
    example.php?id=1 AND 25=25
网页相似度值为1，与原始页面相似。第二个逻辑：
    example.php?id=1 AND 25=83
网页相似度值为0.787，与原始页面不相似。第三个逻辑：
    example.php?id=1 AND 83=53
网页相似度值为0.787，与原始页面不相似。第四个逻辑：
    example.php?id=1 AND 53=53
网页相似度值为1，与原始页面相似。第五个逻辑：
    example.php?id=1 AND 83 53
网页相似度值为0.603，与原始页面不相似。至此，误报检测完成，确定注入存在。
## sqlmap检测之错误注入
### 错误注入主要流程
上图为错误注入流程图，虚线之上表示前置发包过程，虚线之下表示针对每个注入点，都会进行循环发包的流程。
sqlmap错误注入并不是单纯的让数据库服务器报错并回显，sqlmap是要对数据库所报出的SQL错误进行控制。错误注入的精髓在于payload，每一个payload发包的响应都有精确的正则进行匹配。如果错误注入能够成功匹配，payload中有包含SQL绝对发生执行的逻辑存在，案例分析将会详细分析。
由于错误注入的识别方式中存在正则匹配，可以理解为能够匹配的响应通常不会发生误报，因此不需要误报检测。
### 错误注入案例分析
在上述漏洞场景中，进行错误注入案例分析。
首先看一下原始请求：
    example.php?id=1
可以成功注入的测试向量：
        MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
        ...
            AND (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)
            [DELIMITER_START](?P.*?)[DELIMITER_STOP]
            MySQL
             >= 5.0
根据测试向量，将`[RANDNUM], [DELIMITER_START], [DELIMITER_STOP]`按需进行替换，生成的逻辑假数据包如下：
    example.php?id=1 AND (SELECT 4229 FROM(SELECT COUNT(*),CONCAT(0x7176707871,(SELECT (ELT(4229=4229,1))),0x7176627671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)
根据数据包可以看到`[RANDNUM]`值为`4229`，`[DELIMITER_START]`在payload中值为`0x7176707871`，回显时值为`qvpxq`，`[DELIMITER_STOP]`在payload中值为`0x7176627671`，回显时值为`qvbvq`。
sqlmap的错误注入是控制注入的SQL语句报出
    SQL error: Duplicate entry 'qvpxq1qvbvq1' for key 'group_key'
这样的错误，测试向量中的正则表达（`[DELIMITER_START](?P.*?)[DELIMITER_STOP]`）是正好能够提取中间的数值1。至此，错误注入存在。
## sqlmap检测之union注入
### union注入主要流程
上图为union注入流程图，虚线之上表示前置发包过程，虚线之下表示针对每个注入点，都会进行循环发包的流程。
union注入是四种注入探测方式中最复杂的一种，在大的流程图下还包括
  1. order by列数探测技术
  2. select null列数探测技术
  3. select null字符串位置确定技术
三种技术，这三种技术也包含复杂的流程和算法。单纯的union注入的前置发包过程中没有稳定性检测的部分，也就意味着单纯的union注入过程中网页相似度对比是不会进行去重的。
union注入的流程可以分为两步走，第一步为确定列数，以order by列数探测技术为主，select
null列数探测技术为辅形成列数确定技术；第二步为在确定列数的基础上，查找某一个字段是字符串字段，保证数据库信息可以从该字段注出。
由于union注入的识别方式中存在正则匹配，可以理解为能够匹配的响应通常不会发生误报，因此不需要误报检测。
#### order by列数探测技术
![order
by列数探测流程图](https://images.seebug.org/content/images/2018/10/723cf19b-13bc-4b24-aa88-a6ca2d26a04e.jpg-w331s)
order by列数探测技术依赖于网页相似度对比技术和二分差值算法。如果order by 1，响应页面与原始页面相似，order by
1000（随机四位数），响应页面与原始页面不相似，则认为order by技术可以用于列数确定。
#### select null列数探测技术
![select
null列数探测流程图](https://images.seebug.org/content/images/2018/10/e57e72d5-1d88-4e84-bf44-0b7e12a70144.jpg-w331s)
select null列数探测技术依赖于网页相似度对比技术和高斯分布（正态分布），以下说明可以结合案例分析一起解读。
select null列数探测技术在进行时，会首先指定列数猜测过程中的最大值与最小值（指定列数 最少/最小值 为1，最多/最大值
为10），sqlmap会同时发送10个数据包，包含1个NULL至10个NULL，取回10个包的响应后进行网页相似度分析，并获取网页相似度数值（共10个，非True/False）。在这10个数值中，如果select
null列数探测成功，那么成功那个响应的网页相似度数值只可能是最大值或者最小值。对10个数值中去除最大值和最小值后，留下8个值，可以认为，这8个值都是列数猜测不成功返回的响应，对这个8个数据进行高斯分布建模，得出的模型就是列数猜测不成功的模型。现在使用最大值或者最小值来计算是否符合这个不成功的模型，如果符合，说明这个数据也是列数猜测不成功的响应，如果不符合，说明这个数据也是列数猜测成功的响应。
高斯分布属于异常检测算法的一种，以下是笔者认为理解该算法的一些关键点：
  * 为何要用异常检测算法
网站的响应是基于逻辑的，如果一组请求，网站的处理逻辑相同，那么响应几乎也是相同的。
如果某一个响应出现了变化，那么我们认为，网站处理逻辑变了，这种逻辑的变化，可能是注入成功了，因为一组请求里只有一个请求可能成功，那么这个点可以认为是异常点。
  * 建模思路
在union注入中，由于只使用网页相似度作为建模（高斯分布）指标，那么异常值只可能在最大值或者最小值，去除掉两个可能值之后的数据，就都是一个逻辑出来的数据（即注入不成功），使用注入不成功的数据进行高斯建模（这也是为啥select
null技术猜测列数需要有最小跨度的原因，数据太少，没法建模，数据越多，模型越准确），出来的模型就是注入不成功的模型，也就是说，服从这个模型的数据99.99%的概率是不成功的，而不服从这个分布（异常点）也就是注入成功的了。
  * union注入中为何使用相似度作为高斯建模的唯一自变量
union注入是一种回显形式的注入攻击，响应文本内容是union注入是否最明显的判断方式。由于存在诸多的类似不可控广告这样的噪声内容存在，对于机器来说，使用相似度来判断页面内容是方便合理的。比如时间注入，使用响应时间作为分布会更合理。
  * 7个标准差代表什么
7个标准差在这里把一组数据一分为二，代表着分开的两组数据产生于不同的机制，在这里也就是网站处理逻辑不一样，一种是成功执行SQL语句，一种是没有成功执行SQL语句。
#### select null字符串位置确定技术
![select
null字符串位置确定流程图](https://images.seebug.org/content/images/2018/10/c6daf3ab-fd28-48d7-a909-4b268e15a749.jpg-w331s)
select null字符串位置确定技术依赖于正则匹配技术，这是的union注入不需要误报检测流程。select
null字符串位置确定的过程中，如果遇到NULL字符串无法成功找出字符串位置，那么sqlmap会自动指定一个数字替换payload中NULL字符串，并且payload的组合方式会发生改变（payload拼接在参数值后方
改为 参数值更改为一个负数，然后拼接payload），以保证指定的数字能够回显在响应中。
### union注入案例分析