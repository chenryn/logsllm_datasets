### HTTP/1.1: 互联网标准
将HTTP转变为官方IETF互联网标准的工作与围绕HTTP/1.0的文档工作并行进行，计划从1995年至1999年完成。事实上，首个正式的HTTP/1.1标准在RFC 2068中定义，并于1997年1月发布，即HTTP/1.0发布后约六个月。两年半后的1999年6月，一些新的改进和更新被纳入标准，并作为RFC 2616发布。

HTTP/1.1标准解决了早期版本中的许多协议歧义，并引入了多项关键性能优化：持久连接、分块传输编码、字节范围请求、增强的缓存机制、传输编码和请求管道化。

这些功能使我们能够审视现代HTTP浏览器和客户端执行的典型HTTP/1.1会话：

```plaintext
$> telnet website.org 80
Connected to xxx.xxx.xxx.xxx
GET /index.html HTTP/1.1 ❶
Host: website.org
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4)... (省略)
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
Cookie: __qca=P0-800083390... (省略)
HTTP/1.1 200 OK ❷
Server: nginx/1.0.11
Connection: keep-alive
Content-Type: text/html; charset=utf-8
Via: HTTP/1.1 GWA
Date: Wed, 25 Jul 2012 20:23:35 GMT
Expires: Wed, 25 Jul 2012 20:23:35 GMT
Cache-Control: max-age=0, no-cache
Transfer-Encoding: chunked
100 ❸
(省略)
100
(省略)
0 ❹
GET /favicon.ico HTTP/1.1 ❺
Host: www.website.org
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4)... (省略)
Accept: */*
Referer: http://website.org/
Connection: close ❻
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
Cookie: __qca=P0-800083390... (省略)
HTTP/1.1 200 OK ❼
Server: nginx/1.0.11
Content-Type: image/x-icon
Content-Length: 3638
Connection: close
Last-Modified: Thu, 19 Jul 2012 17:51:44 GMT
Cache-Control: max-age=315360000
Accept-Ranges: bytes
Via: HTTP/1.1 GWA
Date: Sat, 21 Jul 2012 21:35:22 GMT
Expires: Thu, 31 Dec 2037 23:55:55 GMT
Etag: W/PSA-GAu26oXbDi
(图标数据)
(连接关闭)
```

* ❶ 请求HTML文件，包括编码、字符集和cookie元数据。
* ❷ 原始HTML请求的分块响应。
* ❸ 以ASCII十六进制数字（表示256字节）显示块中的八位元数量。
* ❹ 分块流响应结束。
* ❺ 在同一TCP连接上请求一个图标文件。
* ❻ 通知服务器不再重用连接。
* ❼ 图标响应后，然后关闭连接。

这里发生了很多事情！最显著的区别是我们通过一个连接请求了两个对象：一个HTML页面和一个图像。这就是持久连接的实际应用，它允许我们重用现有的TCP连接来处理同一个主机的多个请求，从而提供更快的用户体验。参见[TCP优化](https://hpbn.co/building-blocks-of-tcp/#optimizing-for-tcp)。

要终止持久连接，注意第二个客户端请求通过`Connection`请求头向服务器发送显式的`close`。类似地，一旦传输响应，服务器也可以通知客户端关闭当前的TCP连接。从技术上讲，任何一方都可以在没有此类信号的情况下终止TCP连接，但客户端和服务器应尽可能提供此类信号，以便双方都能启用更好的连接重用策略。

HTTP/1.1改变了HTTP协议的语义，默认情况下使用持久连接。这意味着除非另有说明（通过`Connection: close`头），否则服务器应默认保持连接打开。

同样的功能也被反向移植到HTTP/1.0，通过`Connection: keep-Alive`头启用。因此，如果你使用HTTP/1.1，从技术上讲，你不需要`Connection: keep-Alive`头，但许多客户端仍然选择提供它。

此外，HTTP/1.1协议还添加了内容编码、字符集、语言协商、传输编码、缓存指令、客户端cookie以及可以针对每个请求协商的其他十几个功能。

我们不打算详细讨论每个HTTP/1.1特性的语义。这个主题可以写成一本专门的书，已经有许多优秀的书籍可供参考。相反，前面的示例很好地展示了HTTP的快速进展和演变，以及每个客户端-服务器交换的复杂性。

要了解HTTP协议的所有内部工作原理，可以参考David Gourley和Brian Totty共同撰写的权威指南《The Definitive Guide》。

### HTTP/2: 提高传输性能

自RFC 2616发布以来，HTTP已成为互联网空前增长的基础：数十亿各种形状和大小的设备，从台式机到我们口袋里的小型网络设备，每天都在使用HTTP来传送新闻、视频和其他数百万种网络应用程序。

起初，HTTP是一个简单的用于检索超文本的协议，很快演变成一种通用的超媒体传输协议。现在，十年过去了，它几乎可以支持你能想象到的任何用例。协议的服务器无处不在，客户端也广泛使用该协议，这意味着许多应用程序都是专门为HTTP设计和部署的。

需要一个协议来控制你的咖啡壶？RFC 2324已经涵盖了超文本咖啡壶控制协议（HTCPCP/1.0），尽管它最初是IETF的一个愚人节玩笑，但在我们这个超链接的新世界中，它不仅仅是一个玩笑。

**超文本传输协议（HTTP）** 是一个应用程序级协议，用于分布式、协作、超媒体信息系统。它是一种通用的、无状态的协议，可以通过扩展请求方法、错误码和头来支持超出超文本之外的许多任务，如名称服务器和分布式对象管理系统。HTTP的一个特性是数据表示的类型和协商，允许独立于传输的数据构建系统。

HTTP协议的简单性是其最初被采用和快速增长的原因。事实上，现在使用HTTP作为主要控制和数据协议的嵌入式设备（传感器、执行器和咖啡壶）并不罕见。然而，在其自身成功的压力下，随着我们将越来越多的日常互动转移到网络——社交、电子邮件、新闻和视频，以及越来越多的个人和工作空间，它也开始显示出压力的迹象。用户和Web开发人员现在都要求HTTP/1.1提供近乎实时的响应能力和更高的性能，如果不进行一些修改，就无法满足这些要求。

为了应对这些新挑战，HTTP必须继续发展。因此，HTTPbis工作组在2012年初宣布了一项针对HTTP/2的新计划：

> 已经有一个协议中出现了新的实现经验和兴趣，该协议保留了HTTP的语义，但没有保留HTTP/1.x的消息框架和语法，这些问题已被确定为妨碍性能和鼓励滥用底层传输。
>
> 工作组将使用有序的双向流生成HTTP当前语义的新表达规范。与HTTP/1.x一样，主要传输目标是TCP，但也应该可以使用其他方式传输。

HTTP/2的主要重点是提高传输性能，支持更低的延迟和更高的吞吐量。虽然主要版本增量听起来像是一个很大的步骤，但从性能角度来看，这是一个重大进步。重要的是要注意，没有任何高级协议语义受到影响：所有的HTTP头、值和用例都保持不变。

任何现有的网站或应用程序都可以并且将通过HTTP/2传送而无需修改。你无需修改应用程序标记来利用HTTP/2。HTTP服务器将来一定会使用HTTP/2，但这对大多数用户来说应该是透明的升级。如果工作组实现目标，唯一的区别应该是我们的应用程序以更低的延迟和更好的网络连接利用率来传送数据。

话虽如此，我们不要走得太远。在讨论新的HTTP/2协议功能之前，有必要回顾一下现有的HTTP/1.1部署和性能最佳实践。HTTP/2工作组正在新规范上取得快速进展，但即使最终标准已经完成并准备就绪，在可预见的未来，我们仍然必须支持旧的HTTP/1.1客户端，实际上这可能需要十年或更长时间。

---

via: 
作者：[Ilya Grigorik](https://www.igvita.com/)  
选题：[lujun9972](https://github.com/lujun9972)  
译者：[MjSeven](https://github.com/MjSeven)  
校对：[wxy](https://github.com/wxy)

本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出