cache, it is relayed to the nameserver. The IP address
of the nameserver is hidden and only the resolver
communicates with the nameserver directly.
B. Collecting Data with Email Servers
We perform our study of DNS resolution platforms on a
dataset of diverse networks, which comprise: (1) open
recursive resolvers, (2) resolvers operated by Internet
Service Providers (ISPs), and (3) resolvers serving
enterprises. Our data collection methodology generates
active probes to the DNS resolvers in the target (tested)
networks directly in case of networks operating open
recursive resolvers and indirectly via email servers or
web browsers.
In contrast to prior work on DNS, which typically
collect data from open resolvers, our work provides a
wide view on different types of networks. We explain
the data collection for our dataset using open resolvers,
email servers and ad-network in Sections III-A, III-B
and III-C respectively.
In Figure 2 we list top ten Internet Service Providers
(ISPs) of the DNS platforms in our dataset (each column
represents a distinct dataset).
A. Collecting Data with Open Resolvers
Our dataset of networks operating open resolvers
contains popular networks, and excludes malicious net-
works and home networks. We discuss our data collec-
tion and show that the networks are well managed and
often security aware.
Our population of networks running open resolvers
includes public services, Google Public DNS and
OpenDNS as well as 1K networks operating open
resolvers among top-10K Alexa networks (taken from
www.alexa.com).
We obtain the IP addresses of 1K domains containing
open resolvers out of top-10K Alexa networks in two
steps: (1) we queried the top-10K Alexa domains for
nameserver (NS) records, and their corresponding IP
addresses (A records); (2) we select the ﬁrst 1K domains
that provide open DNS resolution services, by querying
these IP addresses for records in our domain. This
resulted in 1739 IP addresses located in 63 countries,
and hosted by 1532 Autonomous Systems (ASes). These
IP addresses correspond to open resolvers whose main
purpose is to reduce trafﬁc to the nameservers, by
responding to the clients’ queries from the cache. The
open resolvers are transparent to the clients, since the
We collected a set of DNS resolvers using email
server in the top-1K enterprise networks according to
Alexa3. We establish an SMTP session to each SMTP
email server in the list of enterprise networks, over
which we sent an email message to a non-existing
email-box in the target domain, that the SMTP server
is responsible for. Upon receipt of email messages,
the SMTP servers trigger DNS requests via the local
recursive resolvers in order to locate or to authenticate
the originator of the email message. Since the desti-
nation is a non-existing recipient, the receiving email
server must generate a Delivery Status Notiﬁcation
(DSN, or bounce) message to the originator of the email
message informing the sender that the message could
not be delivered. The rule to send bounce messages
is mandated by [RFC5321], to enable the originator of
email messages to detect and ﬁx problems and prevent
email messages from silently vanishing.
The email server, sending the bounce message, has
to perform some DNS resolution via its local DNS
resolver, typically searching for MX and A records of
the target email server, but also possibly via other DNS
request types.
In Table I we list the DNS request types’ triggered
by the resolvers in the 1K domains with emails that we
surveyed. We use the queries of the resolvers to initiate
our study (described in subsequent sections).
Query type
Modern SPF queries (TXT qtype)
Obsolete SPF [RFC7208] (SPF qtype)
ADSP (w/DKIM)
DKIM
DMARC
MX/A queries for sending email server
TABLE I
Fraction
69.6%
14.2%
2%
0.3%
35.3%
30.4%
DNS QUERIES GENERATED DURING THE SMTP POPULATION
DATA COLLECTION.
C. Collecting Data with Web-Browsers
We used an ad-network to collect data from the
resolvers used by web clients. The vast majority of
3Alexa website also provides ranking of networks according to
different categories. We used top-1K networks of enterprises.
370
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
the clients attracted through an ad-network were from
networks of different ISPs.
For our study, we embedded our script (which is a
combination of Javascript and HTML) in an ad network
page, and placed it at a static URL. Our script
is
wrapped in an iframe by the ad network, and iframe
is placed on webpages. When downloading the web
page,
the Javascript causes the browser to navigate
to our URLs, which generates DNS requests to our
CDE infrastructure Figure 1. We received more than
12K web clients, in which an AJAX call was made
to our web server (indicating the page was loaded and
functional, i.e., Javascript running). Our test ran as a
pop-under and needed several minutes to complete. Out
of 12K clients, approximately 1:50 of the executions
resulted in tests that completed successfully.
IV. Caches Discovery and Enumeration
Understanding and characterising the caches in reso-
lution platforms is prerequisite for: identifying vulner-
abilities in caches, such as those exposing to cache
poisoning attacks, for hardening caches against attacks,
e.g., by designing secure caching policies or cache
selection algorithms, for upgrading DNS platforms with
the required resources, for extending DNS to support
new systems that use the DNS infrastructure and for
facilitating research on caches in the Internet.
In this section we present our methodology for char-
acterising caches and then in Section V we apply it
for evaluation of caches in the resolution platforms in
the Internet. Our study in this section is comprised of
two parts: we design techniques for caches discovery
and enumeration and we learn the mapping between the
caches and the set of ingress and egress IP addresses
of a given DNS resolution platform. We use a prober
to initiate our study by triggering DNS queries either
directly via the ingress IP address of the DNS resolution
platform, or indirectly, via email server or web browser
(see Section I-A). A direct prober can issue DNS request
the ingress IP address of the resolution platform. In con-
trast, when using the latter (email or web browsers) we
do not know the IP address of the ingress resolver and
do not communicate with it directly. Communication
between the prober and the DNS resolution platform
enables us to create a mapping between the prober and
the set of caches.
Then, we use the communication between the set
of egress IP addresses and our Caches Discovery and
Enumeration (CDE) infrastructure for discovery of the
egress IP addresses used by DNS resolution platform.
We describe methodology and then present methods
for counting the caches and characterising the cache to
IP mappings. We discuss the challenges in discovering
and enumerating caches when a direct access to the
target resolution platform is not available, i.e., when the
tests are carried out via web browsers or email servers,
and show how to overcome this limitation.
A. Setup and Methodology
The setting that we consider consists of a target
DNS resolution platform and of our Caches Discov-
ery and Enumeration (CDE) infrastructure, see Fig-
ure 1. All the communication channels between our
CDE infrastructure and the DNS resolution platform
are illustrated in blue. The CDE infrastructure owns a
domain cache.example and uses subdomains, under
cache.example. It also utilises nameservers, author-
itative for cache.example, and nameservers author-
itative for the subdomains of cache.example. The
probers initiate the study of DNS resolution platforms
by triggering DNS queries. The study is composed of
a set of q DNS requests to the (direct or indirect)
prober. The ingress DNS resolver is conﬁgured to use
one or more caches; let n be the number of caches. The
queries, arriving at the resolution platform, are assigned
to caches by means of a load balancer. The load balancer
is situated on the DNS resolution platform (see Figure
1).
Resolution platforms use different cache selection
methods for probing caches. Within our study we iden-
tiﬁed two cache selection methods: trafﬁc dependent
(which attempt to evenly distribute the queries’ volume
to caches) and unpredictable. An example of the former
category is round robin cache selection, where the next
cache is probed each time a new query arrives. A
random cache selection is a representative of the un-
predictable category, where a randomly selected cache
is probed next. We also identiﬁed more complex cache
selection strategies, e.g., those that look not only at
the volume of the arriving DNS queries but are also
a function of a requested domain in the query or of a
source IP in a DNS request. Our measurement indicates
that more than 80% of the networks in our dataset
support unpredictable cache selection. A comprehensive
study of cache selection algorithms is outside the scope
of this study and we propose it as one of the interesting
followup topics for future work.
During each iteration, i.e., when the ingress resolver
receives a DNS query, exactly one cache is selected
by the load balancer for sampling. If a DNS record,
corresponding to the query, exists in the selected cache
(i.e., a cache hit event occurs), the query is responded
from the cache. Otherwise, if no corresponding value
exists in the cache (a cache miss event occurs), the query
is sent by the egress DNS resolver to the nameserver,
authoritative for the domain that was in the query. Our
371
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 2. Distribution of Internet Network Operators across the networks in our dataset.
study proceeds by observing and counting the number
of queries arriving at our nameservers.
In the following sections we describe techniques, that
use this setup,
including
caches enumeration and mapping. We report on Internet
measurements of our techniques in Section V.
to characterise the caches,
B. Techniques and Tools
Our study of the DNS resolution platforms is per-
formed on three dataset of networks: ISPs (via web
browsers), enterprises (via SMTP), and networks which
provide open resolution services. Applying our method-
ology to the DNS resolution platforms in each popula-
tion requires facing some challenges, as we next explain.
When studying open recursive resolvers (set-up 2 in
Figure 1), our prober has a direct access to the ingress
IP address, and can control the timing of the queries and
the number of times a given query is issued. In contrast,
when performing tests via email servers and web clients
our prober has only an indirect access to the ingress
resolver in the target DNS resolution platform (set-up
1 in Figure 1), and has to bypass the local caches and
proxies between the internal proxy (set-up 1 in Figure
1) and the ingress IP address of the resolver. The local
caches include caches in operating systems, caches in
stub resolvers, caches in web browsers and web proxies;
for instance, a local cache within the browsers, such
as Internet Explorer or the stub DNS resolver’s cache
within the operating systems, such as Windows8. The
intermediate local caches introduce two challenges: (1)
each hostname can be queried only once (the subsequent
queries for that name are responded from the local cache
without reaching the ingress resolver - until its time-to-
live (TTL) expires), and (2) during the test we do not
have control over the timing of the queries. We explain
our approaches for bypassing the local caches in Section
IV-B2.
Another challenge is related to a direct or indirect
access to the egress DNS resolver in the target resolution
platform. A direct access to egress IP address assumes
that our CDE infrastructure can attract DNS requests
for resources within the domain that we own, i.e., such
we can observe the queries arriving at our nameservers.
However, a direct egress access may not always be
available. For instance if it is desirable not to ‘leave
traces’ in the logs of a domain used for the tests (say,
if the caches study is performed by an attacker as part
of an Advanced Persistent Threat (APT) attack), or if
the users and servers in a target network are restricted
to use only a set of allowed domains (e.g., in some
critical infrastructures), or if the resolution platform is
restricted to using only domains that a nameserver is
authoritative for (see discussion in Section III-A). To
that end, we design indirect egress caches discovery
and enumeration techniques, using timing side channels.
The timing channel measures the difference in latency
for cached vs. non-cached records.
In Sections IV-B1 and IV-B2 we design methodolo-
gies assuming a direct egress access and in Section
IV-B3 we adapt the techniques for an indirect egress
access.
1) Direct Ingress and Direct Egress Access: Open
recursive resolvers provide direct access to triggering
DNS requests at ingress resolvers. In particular, in order
to discover and enumerate the caches used by a given
ingress IP address of an open resolver on a resolution
platform, our direct prober (set-up 2 in Figure 1) sends
q queries to a resource record within our domain, such
that all of the q queries are for the same query name. In
the zone ﬁle of our domain cache.example we setup
a corresponding DNS record, mapping the resource to
an IP address, as follows: name.cache.example
IN A a.b.c.d.
372
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
a) Caches Enumeration: On our nameserver we
count the number of queries that arrive from an egress
IP address of the target resolution platform for the name
that our client requested. The number of queries ω  n allows to
cover all the caches. But, what should the value q be?
In Section V-B we provide an analysis for the number
of queries needed to probe all the caches behind an
ingress IP address of a resolution platform. In Section
V we describe the approach that we devised and used
in our Internet evaluations.
b) IPs to Caches Mapping: In order to discover
the mapping between {IIN} ingress IP addresses and
clusters of caches we use the following approach: (1) we
apply the caches enumeration technique (above) using
IN (out of a set of {IIN} ingress
any ingress IP address I1
IP addresses), and plant a ‘honey’ record in all the
caches mapped to that IP address. Then, for each ingress
IN (for 1 < i < |{IIN}|) we send queries for the