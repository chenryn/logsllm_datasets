### Cache and Nameserver Communication

When a DNS query is cached, it is relayed to the nameserver. The IP address of the nameserver is kept hidden, and only the resolver communicates directly with the nameserver.

### Data Collection with Email Servers

Our study on DNS resolution platforms involves a diverse dataset of networks, including:
1. Open recursive resolvers
2. Resolvers operated by Internet Service Providers (ISPs)
3. Resolvers serving enterprises

Our data collection methodology generates active probes to DNS resolvers in the target networks. For networks with open recursive resolvers, we send direct probes. For other networks, we use indirect methods via email servers or web browsers.

Unlike previous studies that typically collect data from open resolvers, our work provides a comprehensive view of different types of networks. We detail the data collection for open resolvers, email servers, and ad-networks in Sections III-A, III-B, and III-C, respectively.

### Top ISPs in Our Dataset

Figure 2 lists the top ten ISPs in our dataset, with each column representing a distinct dataset.

### Data Collection with Open Resolvers

Our dataset includes popular networks operating open resolvers, excluding malicious and home networks. We ensure these networks are well-managed and security-aware.

Our population of open resolvers includes public services like Google Public DNS and OpenDNS, as well as 1,000 networks from the top-10,000 Alexa-ranked networks. We obtained the IP addresses of these open resolvers in two steps:
1. Queried the top-10,000 Alexa domains for nameserver (NS) records and their corresponding IP addresses (A records).
2. Selected the first 1,000 domains providing open DNS resolution services by querying these IP addresses for records in our domain.

This resulted in 1,739 IP addresses located in 63 countries, hosted by 1,532 Autonomous Systems (ASes). These IP addresses correspond to open resolvers, which reduce traffic to nameservers by responding to client queries from the cache. The open resolvers are transparent to clients.

### Data Collection with Email Servers

We collected DNS resolvers using email servers in the top-1,000 enterprise networks according to Alexa. We established an SMTP session with each SMTP email server, sending an email to a non-existent mailbox in the target domain. Upon receipt, the SMTP server triggers DNS requests via local recursive resolvers to locate or authenticate the originator of the email. Since the destination is non-existent, the receiving email server must generate a Delivery Status Notification (DSN, or bounce) message to inform the sender that the message could not be delivered. This rule is mandated by [RFC5321] to help detect and fix problems and prevent emails from silently vanishing.

The email server, when sending the bounce message, performs DNS resolution via its local DNS resolver, typically searching for MX and A records of the target email server, but also possibly other DNS request types.

Table I shows the DNS request types triggered by the resolvers in the 1,000 domains with emails we surveyed. We use these queries to initiate our study, described in subsequent sections.

| Query Type | Fraction |
|------------|----------|
| Modern SPF queries (TXT qtype) | 69.6% |
| Obsolete SPF [RFC7208] (SPF qtype) | 14.2% |
| ADSP (w/DKIM) | 2% |
| DKIM | 0.3% |
| DMARC | 35.3% |
| MX/A queries for sending email server | 30.4% |

### Data Collection with Web Browsers

We used an ad-network to collect data from resolvers used by web clients. The majority of clients attracted through the ad-network were from different ISP networks.

For our study, we embedded a script (a combination of JavaScript and HTML) in an ad network page at a static URL. The script, wrapped in an iframe, is placed on webpages. When downloading the webpage, the JavaScript causes the browser to navigate to our URLs, generating DNS requests to our CDE infrastructure. We received more than 12,000 web clients, with approximately 1:50 executions resulting in successful tests.

### Cache Discovery and Enumeration

Understanding and characterizing caches in resolution platforms is essential for identifying vulnerabilities, hardening against attacks, upgrading resources, extending DNS support, and facilitating research.

In this section, we present our methodology for characterizing caches and then apply it to evaluate caches in Internet resolution platforms. Our study involves designing techniques for cache discovery and enumeration and learning the mapping between caches and the set of ingress and egress IP addresses of a given DNS resolution platform.

### Setup and Methodology

Our setup consists of a target DNS resolution platform and our Caches Discovery and Enumeration (CDE) infrastructure. The CDE infrastructure owns a domain `cache.example` and uses subdomains under `cache.example`. It utilizes nameservers authoritative for `cache.example` and its subdomains. Probers initiate the study by triggering DNS queries. The ingress DNS resolver is configured to use one or more caches, and the queries are assigned to caches by a load balancer.

Resolution platforms use different cache selection methods, such as traffic-dependent (evenly distributing queries) and unpredictable (randomly selecting caches). Our measurements indicate that over 80% of the networks in our dataset support unpredictable cache selection.

During each iteration, the ingress resolver receives a DNS query, and one cache is selected by the load balancer. If the query is in the cache (cache hit), it is responded from the cache. Otherwise, if no corresponding value exists (cache miss), the query is sent to the authoritative nameserver.

### Techniques and Tools

Our study involves three datasets of networks: ISPs (via web browsers), enterprises (via SMTP), and networks providing open resolution services. Each setup presents unique challenges.

#### Direct Ingress and Egress Access

Open recursive resolvers provide direct access to triggering DNS requests. To discover and enumerate caches, our prober sends `q` queries to a resource record within our domain, all for the same query name. In the zone file of our domain `cache.example`, we set up a corresponding DNS record.

##### Caches Enumeration

On our nameserver, we count the number of queries arriving from the egress IP address of the target resolution platform. The number of queries `ω ≤ n` allows us to cover all caches. We provide an analysis for the number of queries needed to probe all caches behind an ingress IP address in Section V-B.

##### IPs to Caches Mapping

To discover the mapping between ingress IP addresses and clusters of caches, we use the following approach:
1. Apply the caches enumeration technique using any ingress IP address `I1` from a set `{IIN}` and plant a 'honey' record in all caches mapped to that IP address.
2. For each remaining ingress IP address `Ii` (for `1 < i < |{IIN}|`), we send queries for the honey record to determine the cache cluster.