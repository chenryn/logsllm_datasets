### Introduction to SKEE: A Secure Execution Environment for ARM

SKEE (Secure Kernel Execution Environment) is a system designed to build an ARM hypervisor using para-virtualization. It incorporates two key ideas from para-virtualization approaches:
1. Creating a separate protected address space for the monitor.
2. Preventing the kernel from accessing the MMU (Memory Management Unit).

However, SKEE differs from traditional para-virtualization techniques in two significant ways:
1. **Privilege Level**: SKEE operates at the same privileged layer as the kernel. In contrast, para-virtualization techniques, such as ARMVisor, place the kernel in a less privileged layer alongside user-space code. This approach is less secure and more challenging to implement in real-world systems.
2. **Context Switching**: SKEE introduces a novel context switching technique that provides an atomic, deterministic, and exclusive switch gate to the isolated environment.

### Comparison with Existing Systems

**Nested Virtualization:**
- The Turtles Project [12] and CloudVisor [55] are examples of systems that propose multiple layers of virtualization on the same system, known as nested virtualization. These can be used to achieve the objectives of SKEE. However, both are built for the x86 architecture, whereas SKEE is the first system to achieve these objectives on the ARM architecture.

**Hypervisor Integrity and Protection:**
- Techniques like HyperSentry [9], HyperCheck [51], and HyperSafe [52] measure and protect the integrity of the hypervisor. However, these approaches cannot eliminate all attacks targeting the virtualization layer.

### Alternative Isolation Techniques

**Microhypervisors, Sandboxing, and Hardware Protection:**
- Section I discussed other research directions that achieve isolation without relying on a hypervisor, including microhypervisors, sandboxing, and hardware protection.
- **x86-Specific Systems:**
  - Flicker [40], [41]: Uses Intel Trusted eXecution Technology (TXT).
  - SIM [48]: Relies on CR3_TARGET_LIST, a feature provided by Intel.
  - Nested Kernel [19]: Uses the Write Protection (WP) bit of the CR0 register.
  - SICE [10]: Utilizes x86's System Management Mode (SMM).
- Unfortunately, ARM lacks equivalent hardware features.

**Formally Verified Microkernels:**
- Previous research has proposed using formally verified microkernels to create a secure core [22], [33], [35]. While this can host security tools, formal verification is a long and challenging process, making it less practical.

**Sandboxing:**
- VirtualGhost [15] suggests a sandbox that relies on compilation-time constraints. However, using a custom compiler is also challenging and reduces the likelihood of adoption in real-world systems.

**OS Protection:**
- Systems like Native Client [54] and Minibox [36] protect the OS from potentially malicious code. ARM-specific techniques include ARM-Lock [57] and AppCage [56]. These systems can complement SKEE by confining its environment to ensure it does not jump back to the kernel while the SKEE address space is exposed.

### Conclusion

SKEE is a system that enables ARM platforms to support an isolated execution environment without adding code to the TCB of higher-privileged layers. The new environment is designed to provide security monitoring and protection of the OS kernel.

**Key Properties of SKEE:**
1. **Isolation from the Kernel**: Ensures the kernel cannot interfere with the isolated environment.
2. **Secure Context Switching**: Provides an atomic, deterministic, and exclusive switch gate between the isolated environment and the kernel.
3. **Event Hooking**: Allows placing hooks to intercept kernel events for security inspection.

We presented a detailed security analysis proving that SKEE's protection is non-bypassable by the kernel. Additionally, we provided a prototype implementation and evaluation results, demonstrating that SKEE is a practical solution for real-world systems. Future work will focus on integrating intrusion detection and system monitoring mechanisms within SKEE to detect and respond to attacks.

### References

[References listed here, formatted as per the original text]

This optimized version of the text is more structured, clear, and professional, making it easier to understand and follow.