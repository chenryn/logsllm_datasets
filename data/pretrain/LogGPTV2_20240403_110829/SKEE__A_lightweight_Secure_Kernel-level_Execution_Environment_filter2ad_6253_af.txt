tems that build an ARM hypervisor using para-virtualization.
SKEE adopts two ideas that are used in para-virtualization
approaches: 1) creating a separate protected address space for
the monitor and 2) preventing the kernel from accessing the
MMU. Nevertheless, there are two key differences between
the two approaches. First, SKEE’s runs at the same privileged
layer as the kernel. Para-virtualization techniques, such as
ARMVisor, put the kernel in a less privileged layer alongside
user space code, which is less secure and harder to implement
on real-world systems. The second is SKEE’s novel context
switching technique, which provides an atomic, deterministic
and exclusive switch gate to the isolated environment.
The turtles project [12] and CloudVisor [55] are examples
of systems that propose having multiple layers of virtualization
on the same system, a.k.a. nested virtualization. This can be
used to achieve the objectives of SKEE. Nevertheless, they are
both built for the x86 architecture. SKEE is the ﬁrst system
that achieves the same objectives on the ARM architecture.
There are techniques to measure the integrity of the hy-
pervisor, such as HyperSentry [9] and HyperCheck [51], and
to protect it from potential attacks, such as HyperSafe [52].
13
Nevertheless, these approaches cannot eliminate all attacks that
target the virtualization layer.
Section I also discussed the main research directions that
achieve isolation without relying on the hypervisor, which are
microhypervisors, sandboxing and hardware protection.
There are multiple systems that achieve hardware-based
isolation on x86, such as Flicker [40], [41], SIM [48], Nested
Kernel [19], and SICE [10]. However, they all rely on x86-
speciﬁc hardware features. Flicker uses Intel Trusted eXe-
cution Technology (TXT). SIM relies on the presence of a
CR3_TARGET_LIST, which is a feature provided by Intel to
allow the guest OS to switch the address spaces without active
involvement of the hypervisor. Nested Kernel uses the Write
Protection (WP) bit of the CR0 register to prevent the kernel
from accessing the isolated environment. When the (WP) bit is
set, the kernel is prevented from writing to read-only pages.
When it is clear, the kernel is allowed to write to any page
despite the read-only protection. This bit is used as a gate to
switch the access permission for certain parts of the kernel.
SICE relies on x86’s System Management Mode (SMM).
Unfortunately, ARM does not have equivalent features.
In addition to these directions, previous research work
proposed using formally veriﬁed microkernels to have a secure
core [22], [33], [35]. This secure code can be used to host
a security tool. However, formal veriﬁcation is a challenging
long process. Adding a security tool to the microkernel will
make it a less practical solution.
VirtualGhost [15] suggests a sandbox that relies on com-
pilation time constraints. Nevertheless, the process of using a
custom compiler is also challenging and decreases the chance
of adopting this solution in real-world systems.
Finally, there are systems that protect the OS from poten-
tially malicious code. The most notable work in this direction
is Native Client [54] and Minibox [36]. There is also ARM-
Lock [57] and AppCage [56], which achieve the same objective
using ARM speciﬁc techniques. As mentioned in Section IV,
these systems can be used to compliment SKEE in conﬁning
its environment to guarantee that it will not jump back to the
kernel while the SKEE address space is exposed.
VII. CONCLUSION
We introduced SKEE, a system that enables ARM plat-
forms to support an isolated execution environment without
adding code to the TCB of higher privileged layers. The new
environment is designed to provide security monitoring and
protection of the OS kernel.
SKEE provides the isolated environment with three key
properties: 1) isolation from the kernel, 2) a secure gate to
switch the context between the isolated environment and the
kernel, and 3) the ability to place hooks to intercept kernel
events for security inspection.
We presented a detailed security analysis that proves the
SKEE protection is non-bypassable by the kernel. We also
presented prototype implementation and evaluation results. The
results show that SKEE is a practical solution for real-world
systems. The future work will focus on integrating intrusion
detection and system monitoring mechanisms to run inside
SKEE to detect attacks and take the proper corrective actions.
REFERENCES
[1]
[2]
rooting method: Motochopper,”
“Android
how-to-root/motochopper-method.
“How to root my Android device using vRoot,” http://http://androidxda.
com/download-vroot.
http://hexamob.com/
[3] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-ﬂow
integrity,” in Proceedings of the 12th ACM Conference on Computer
and Communications Security, ser. CCS ’05. ACM, 2005, pp. 340–
353.
I. Anati, S. Gueron, S. Johnson, and V. Scarlata, “Innovative technology
for CPU based attestation and sealing,” in Proceedings of the 2nd
International Workshop on Hardware and Architectural Support for
Security and Privacy, 2013, p. 10.
[4]
[5] Argp and Karl, “Exploiting UMA, FreeBSD’s kernel memory allocator,”
in Phrack Magazine, vol. 0x0d, November 2009.
[6] ARM Ltd, TrustZone Technology Overview.
http://www.arm.com/products/esd/trustzone home.html
[Online]. Available:
[7] ARM System Memory Management Unit. Architecture Speciﬁcation,
ARM Ltd, 2012.
[8] A. M. Azab, P. Ning, E. C. Sezer, and X. Zhang, “HIMA: A hypervisor-
based integrity measurement agent,” in Proceedings of the 25th Annual
Computer Security Applications Conference (ACSAC ’09), 2009, pp.
193–206.
[9] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky,
“HyperSentry: enabling stealthy in-context measurement of hypervisor
integrity,” in Proceedings of the 17th ACM conference on Computer
and communications security (CCS ’10), 2010, pp. 38–49.
[10] A. M. Azab, P. Ning, and X. Zhang, “SICE: A hardware-level strongly
isolated computing environment for x86 multi-core platforms,” in Pro-
ceedings of the 18th ACM conference on Computer and communications
security, ser. CCS ’11, 2011, pp. 375–388.
[11] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma,
and W. Shen, “Hypervision across worlds: Real-time kernel protection
from the arm trustzone secure world,” in Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security, ser.
CCS ’14. ACM, 2014, pp. 90–102.
[12] M. Ben-Yehuda, M. D. Day, Z. Dubitzky, M. Factor, N. Har’El,
A. Gordon, A. Liguori, O. Wasserman, and B.-A. Yassour, “The turtles
project: Design and implementation of nested virtualization.” in OSDI,
vol. 10, 2010, pp. 423–436.
[14]
[13] Y. Cheng, X. Ding, and R. H. Deng, “Efﬁcient virtualization-based
application protection against untrusted operating system,” in Pro-
ceedings of the 10th ACM Symposium on Information, Computer and
Communications Security, ser. ASIA CCS ’15. ACM, 2015, pp. 345–
356.
J. Criswell, A. Lenharth, D. Dhurjati, and V. Adve, “Secure virtual
architecture: a safe execution environment for commodity operating
systems,” in Proceedings of the 21st ACM SIGOPS symposium on
Operating systems principles (SOSP ’07), 2007, pp. 351–366.
J. Criswell, N. Dautenhahn, and V. Adve, “Virtual ghost: Protecting
applications from hostile operating systems,” in Proceedings of the 19th
International Conference on Architectural Support for Programming
Languages and Operating Systems, ser. ASPLOS ’14. ACM, 2014,
pp. 81–96.
[15]
[16] CVEdetails.com,
“Vmware: Vulnerability statistics,” http://www.
cvedetails.com/vendor/252/Vmware.html.
[17] ——, “Xen: Vulnerability statistics,” http://www.cvedetails.com/vendor/
6276/XEN.html.
[18] C. Dall and J. Nieh, “Kvm/arm: The design and implementation of
the linux arm hypervisor,” in Proceedings of the 19th International
Conference on Architectural Support for Programming Languages and
Operating Systems, ser. ASPLOS ’14. ACM, 2014, pp. 333–348.
[19] N. Dautenhahn, T. Kasampalis, W. Dietz, J. Criswell, and V. Adve,
“Nested kernel: An operating system architecture for intra-kernel
privilege separation,” in Proceedings of the Twentieth International
Conference on Architectural Support for Programming Languages and
Operating Systems, ser. ASPLOS ’15. ACM, 2015, pp. 191–206.
[20] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund,
S. N¨urnberger, and A.-R. Sadeghi, “MoCFI: A framework to mitigate
14
[21]
control-ﬂow attacks on smartphones,” in Proceedings of
Symposium on Network and Distributed System Security, 2012.
J.-H. Ding, C.-J. Lin, P.-H. Chang, C.-H. Tsang, W.-C. Hsu, and Y.-C.
Chung, “ARMvisor: System virtualization for ARM,” in Proceedings
of the Ottawa Linux Symposium (OLS), 2012, pp. 93–107.
the 19th
[22] K. Fisher, “Using formal methods to eliminate exploitable bugs,” in
24th USENIX Security Symposium (USENIX Security 15). USENIX
Association, Aug. 2015.
[23] T. Garﬁnkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh, “Terra: a
virtual machine-based platform for trusted computing,” in Proceedings
of the 19th ACM symposium on Operating systems principles (SOSP
’03), 2003, pp. 193–206.
[24] T. Garﬁnkel and M. Rosenblum, “A virtual machine introspection based
architecture for intrusion detection,” in Proceedings of the 10th Network
and Distributed Systems Security Symposium, 2003, pp. 191–206.
[25] X. Ge, H. Vijayakumar, and T. Jaeger, “SPROBES: Enforcing kernel
code integrity on the trustzone architecture,” in Proceedings of the 2014
Mobile Security Technologies (MoST) workshop, 2014.
[26] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and J. Del Cuvillo,
“Using innovative instructions to create trustworthy software solutions,”
in Proceedings of the 2nd International Workshop on Hardware and
Architectural Support for Security and Privacy. ACM, 2013, p. 11.
[27] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel,
“Inktag: Secure applications on an untrusted operating system,” in
Proceedings of the Eighteenth International Conference on Architec-
tural Support for Programming Languages and Operating Systems, ser.
ASPLOS ’13. ACM, 2013, pp. 265–278.
[28] G. Hotz, “towelroot,” https://towelroot.com/.
[29] R. Hund, T. Holz, and F. C. Freiling, “Return-oriented rootkits: Bypass-
ing kernel code integrity protection mechanisms,” in Proceedings of the
18th USENIX Security Symposium, 2009.
[30] X. Jiang, X. Wang, and D. Xu, “Stealthy malware detection through
vmm-based “out-of-the-box” semantic view reconstruction,” in Pro-
ceedings of the 14th ACM conference on Computer and communications
security (CCS ’07), 2007, pp. 128–138.
[31] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau, “Ant-
farm: tracking processes in a virtual machine environment,” in Pro-
ceedings of the annual conference on USENIX ’06 Annual Technical
Conference (ATEC ’06), 2006, pp. 1–1.
[32] V. P. Kemerlis, M. Polychronakis, and A. D. Keromytis, “ret2dir:
Rethinking kernel isolation,” in 23rd USENIX Security Symposium.
USENIX Association, 2014.
[33] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin,
D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell,
H. Tuch, and S. Winwood, “sel4: formal veriﬁcation of an OS kernel,”
in Proceedings of the ACM SIGOPS 22nd symposium on Operating
systems principles (SOSP ’09), 2009, pp. 207–220.
[34] K. Kourai and S. Chiba, “Hyperspector: virtual distributed monitoring
environments for secure intrusion detection,” in Proceedings of the 1st
ACM/USENIX international conference on Virtual execution environ-
ments (VEE ’05), 2005, pp. 197–207.
[35] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and M. Peter,
“L4android: A generic operating system framework for secure smart-
phones,” in Proceedings of the 1st ACM Workshop on Security and
Privacy in Smartphones and Mobile Devices (SPSM ’11), 2011.
[36] Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and W. Drewry,
“Minibox: A two-way sandbox for x86 native code,” in 2014 USENIX
Annual Technical Conference (USENIX ATC 14). USENIX Associa-
tion, Jun. 2014, pp. 409–420.
[37] L. Litty, H. A. Lagar-Cavilla, and D. Lie, “Hypervisor support for
identifying covertly executing binaries,” in Proceedings of the 17th
USENIX Security Symposium, 2008, pp. 243–258.
[38] S. McCanne and V. Jacobson, “The BSD packet ﬁlter: A new architec-
ture for user-level packet capture,” in Proceedings of the USENIX Winter
1993 Conference Proceedings on USENIX Winter 1993 Conference
Proceedings, ser. USENIX’93, 1993.
J. McCune, Y. Li, N. Qu, A. Datta, V. Gligor, and A. Perrig, “Efﬁcient
TCB reduction and attestation,” in the 31st IEEE Symposium on Security
and Privacy, May 2010.
[39]
[40]
[41]
J. McCune, B. Parno, A. Perrig, M. Reiter, and H. Isozaki, “Flicker: an
execution infrastructure for TCB minimization,” in Proceedings of the
ACM European Conference on Computer Systems (EuroSys), 2008.
J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and A. Seshadri,
“Minimal tcb code execution (extended abstract),” in Proceedings of the
2007 IEEE Symposium on Security and Privacy (SP’07), May 2007.
[42] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ,
V. Shanbhogue, and U. R. Savagaonkar, “Innovative instructions and
software model for isolated execution,” in Proceedings of
the 2nd
International Workshop on Hardware and Architectural Support for
Security and Privacy. ACM, 2013, pp. 1–1.
[43] B. D. Payne, M. Carbone, M. Sharif, and W. Lee, “Lares: An architec-
ture for secure active monitoring using virtualization,” in Proceedings of
the 29th IEEE Symposium on Security and Privacy, 2008, pp. 233–247.
[44] N. L. Petroni Jr. and M. Hicks, “Automated detection of persistent kernel
control-ﬂow attacks,” in Proceedings of the 14th ACM conference on
Computer and communications security (CCS ’07), 2007, pp. 103–115.
J. Rhee, R. Riley, D. Xu, and X. Jiang, “Defeating dynamic data
kernel rootkit attacks via VMM-based guest-transparent monitoring,” in
Proceedings of the International Conference on Availability, Reliability
and Security (ARES ’09), 2009, pp. 74–81.
[45]
[46] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “SecVisor: a tiny hypervisor
to provide lifetime kernel code integrity for commodity OSes,” in
Proceedings of twenty-ﬁrst ACM SIGOPS symposium on Operating
systems principles (SOSP ’07), 2007, pp. 335–350.
[47] H. Shacham, “The geometry of innocent ﬂesh on the bone: return-into-
libc without function calls (on the x86),” in Proceedings of the 14th
ACM conference on Computer and Communications Security (CCS ’07),
2007, pp. 552–561.
[48] M. Sharif, W. Lee, W. Cui, and A. Lanzi, “Secure in-vm monitoring
using hardware virtualization,” in Proceedings of the 16th ACM confer-
ence on Computer and communications security (CCS ’09), 2009, pp.
477–487.
[49] U. Steinberg and B. Kauer, “NOVA: a microhypervisor-based secure
virtualization architecture,” in Proceedings of the 5th European confer-
ence on Computer systems (EuroSys’10). ACM, 2010, pp. 209–222.
[50] R. Strackx and F. Piessens, “Fides: Selectively hardening software
application components against kernel-level or process-level malware,”
in Proceedings of the 2012 ACM Conference on Computer and Com-
munications Security, ser. CCS ’12. ACM, 2012, pp. 2–13.
J. Wang, A. Stavrou, and A. K. Ghosh, “HyperCheck: A hardware-
assisted integrity monitor,” in Proceedings of the 13th International
Symposium on Recent Advances in Intrusion Detection (RAID’10),
September 2010.
[51]
[52] Z. Wang and X. Jiang, “HyperSafe: A lightweight approach to provide
lifetime hypervisor control-ﬂow integrity,” in Proceedings of the 31st
IEEE Symposium on Security and Privacy, May 2010.
[53] W. Xu, J. Li, J. Shu, W. Yang, T. Xie, Y. Zhang, and D. Gu, “From
collision to exploitation: Unleashing use-after-free vulnerabilities in
linux kernel,” in Proceedings of the 22Nd ACM SIGSAC Conference
on Computer and Communications Security, ser. CCS ’15.
ACM,
2015, pp. 414–425.
[54] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar, “Native client: A sandbox
for portable, untrusted x86 native code,” in Security and Privacy, 2009
30th IEEE Symposium on.
IEEE, 2009, pp. 79–93.
[55] F. Zhang, J. Chen, H. Chen, and B. Zang, “Cloudvisor: Retroﬁtting
protection of virtual machines in multi-tenant cloud with nested vir-
tualization,” in Proceedings of the Twenty-Third ACM Symposium on
Operating Systems Principles, ser. SOSP ’11. ACM, 2011, pp. 203–
216.
[56] Y. Zhou, K. Patel, L. Wu, Z. Wang, and X. Jiang, “Hybrid user-
level sandboxing of third-party android apps,” in Proceedings of the
10th ACM Symposium on Information, Computer and Communications
Security, ser. ASIA CCS ’15. ACM, 2015, pp. 19–30.
[57] Y. Zhou, X. Wang, Y. Chen, and Z. Wang, “ARMlock: Hardware-based
fault isolation for ARM,” in Proceedings of the 2014 ACM SIGSAC
Conference on Computer and Communications Security, ser. CCS ’14.
ACM, 2014, pp. 558–569.
15