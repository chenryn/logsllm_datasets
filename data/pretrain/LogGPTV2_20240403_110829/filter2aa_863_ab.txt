2.1 Scope
9  "New OT/IoT Security Report: Trends and Countermeasures for Critical Infrastructure Attacks," Nozomi Networks Labs, 
February 2, 2022. 
10  "Worker Safety," Ubisense.
11   "Simatic RTLS: How to create a safe working environment," Markus Weinlaender, Siemens Ingenuity, July 13, 2020.
9
WHITE PAPER
UWB Real Time Locating Systems: How Secure Radio Communications May Fail in Practice
2. Methodology and Attack Demos
It is thus paramount that the security of industrial and 
healthcare UWB RTLS is as robust as possible, to prevent 
adversaries from taking advantage of systems that cause 
safety-related consequences to victims.
Having defined the industry scope, we performed 
an analysis of the RTLS targeting the industrial and 
healthcare sectors available on the market, that took into 
consideration aspects such as product features, availability 
time, or cost of purchase. Ultimately, we identified and 
purchased the following RTLS solutions:
 y Sewio Indoor Tracking RTLS UWB Wi-Fi Ki12 (Figure 3)
 y Avalue Renity Artemis Enterprise Kit13 (Figure 4)
Both of these UWB RTLS kits come equipped with a set of tags, 
anchors, and a server software that can be accessed to view 
the location of tags, enable functionalities such as the safety 
features described above, perform maintenance operations, etc.
Figure 2 - Examples of safety-related use cases advertised by vendors for UWB RTLS.
Figure 3 - Sewio Indoor 
Tracking RTLS UWB Wi-Fi Kit.
Figure 4 - Avalue Renity 
Artemis Enterprise Kit
12 "Indoor Tracking RTLS UWB Wi-Fi Kit," Sewio,
13  “Artemis Enterprise Kit,” Avalue Renity.
10
WHITE PAPER
UWB Real Time Locating Systems: How Secure Radio Communications May Fail in Practice
2. Methodology and Attack Demos
2.1.2 Technical Scope
Figure 5 portrays the architecture of a generic UWB RTLS, 
outlining the components involved as well as the protocols 
that are used in its communications.
In an average RTLS infrastructure, a tag communicates with a set 
of anchors deployed in strategic positions of a room by means 
of UWB signals. These anchors then not only communicate with 
each other via UWB, but also interact with the RTLS server 
via common network media, such as Ethernet or Wi-Fi.
The purpose of each of these communications is different, 
and is summarized below:
 y A tag sends UWB signals to the anchors, which receive 
them and keep track of the arrival times of each UWB 
message. This information will be used later by the RTLS 
Server to compute the position of the tag.
 y One reference anchor sends UWB signals to the other anchors, 
which receive them and keep track of the arrival times of 
each UWB message. This information is then used by the 
RTLS Server to perform the synchronization of the anchors.
 y Finally, the anchors send all arrival times of the 
transmitted and received UWB messages to an RTLS 
Server via Ethernet, Wi-Fi, or other media. The RTLS Server 
uses all data to complete the anchor synchronization 
process and reconstruct the position of the tag.
Given the architecture illustrated above, to obtain an 
overall secure positioning system, it is crucial that both 
the UWB signals and the communications via Ethernet, 
Wi-Fi, or other media are secured. A flaw in any of these 
communication steps may compromise the security of the 
entire infrastructure.
Up to now, security research has exclusively focused on the 
analysis of UWB signals, leading to the publication of multiple 
security studies that appeared in numerous conferences, such 
as ACM WiSec 2021 Architecture of a generic UWB RTLS14, 
NDSS 201915, or Usenix 2019.16
14 "Security Analysis of IEEE 802.15.4z/HRP UWB Time-of-Flight Distance Measurement," Mridula Singh, Marc Roeschlin, Ezzat 
Zalzala, Patrick Leu, and Srdjan Čapkun, in Proceedings of the 14th ACM Conference on Security and Privacy in Wireless and 
Mobile Networks (WiSec '21), 2021.
15   "UWB with Pulse Reordering: Securing Ranging against Relay and Physical-Layer Attacks," Mridula Singh, Patrick Leu, 
and Srdjan Čapkun, in Proceedings of Network and Distributed Systems Security (NDSS) Symposium 2019, 2019.
16   "UWB-ED: Distance Enlargement Attack Detection in Ultra-Wideband," Mridula Singh, Patrick Leu, AbdelRahman Abdou, 
and Srdjan Čapkun, in Proceedings of the 28th USENIX Security Symposium, 2019.
Figure 5 - Architecture of a generic UWB RTLS.
Ethernet, or Wi-Fi, or other media,
focus of this research
Ultra-wideband
Anchors
RTLS Server
Tag
11
WHITE PAPER
UWB Real Time Locating Systems: How Secure Radio Communications May Fail in Practice
2. Methodology and Attack Demos
Literature presents many algorithms that leverage TDoA 
to locate assets in any kind of environment.17,18,19 To better 
clarify the reversing procedure adopted for this work and 
understand the preconditions necessary for an attack, the 
fundamentals behind TDoA are worth a brief analysis.
2.2.1 Packet Taxonomy
In a TDoA RTLS, there are normally two kinds of packets 
that are exchanged between the anchors and the server:
1. Synchronization packets, also known as “sync” packets, 
or “CCP” packets;
2. Positioning packets, also known as “blink” packets, or 
“TDoA” packets.
Synchronization packets are used for anchor 
synchronization purposes. Periodically, a reference anchor 
(sometimes called “master” in off-the-shelf RTLS) transmits 
an UWB signal that is received by all other non-reference 
anchors (sometimes called “slaves” in off-the-shelf RTLS). 
The reference anchor sends a synchronization packet 
on the network containing the instant at which it has 
sent the UWB signal, and the non-reference anchors a 
synchronization packet containing the instant at which they 
received it. It is important note that the anchors’ clocks are 
usually not in sync with each other (e.g., at the same exact 
time, anchor 1 might have its clock at 8.4322348 s, anchor 2 
at 2.4524391 s, anchor 3 at 15.1147349 s, etc.), due to different 
boot times, clock drifts, or other reasons.
This synchronization schema is a form of wireless 
synchronization, because it involves the transmission of a 
wireless UWB signal. Alternatively, some RTLS may replace 
the transmission of UWB signals with a wired clock signal 
generated by a single clock source and distributed to all 
anchors. This solution, however, requires additional wiring 
and appliances and, as such, is less common in off-the-shelf 
solutions.
Positioning packets are used for tag localization purposes. 
A tag emits an UWB signal, which is received by all anchors. 
All anchors send the instant at which they received the 
UWB signal from the tag inside positioning packets to the 
central positioning server. This information, together with 
the synchronization packets, is used to compute the tag 
position. Again, these instants generally differ greatly, not 
only because they depend on the distance travelled by the 
UWB signal from the tag to reach the anchor, but also on 
the current anchor’s clock that is not in sync with that of the 
other anchors (e.g., for the same UWB signal emitted by a 
tag, anchor 1 might report it received at 8.6215658 s, anchor 
2 at 2.6490112 s, anchor 3 at 15.3001173 s, etc.).
2.2 TDoA Background and Theory
17  "New three-dimensional positioning algorithm through integrating TDOA and Newton’s method," Junsuo Qu, Haonan Shi, 
Ning Qiao, Chen Wu, Chang Su, and Abolfazl Razi, in J Wireless Com Network, 2020.
18  "Time Difference of Arrival (TDoA) Localization Combining Weighted Least Squares and Firefly Algorithm," Peng Wu, 
Shaojing Su, Zhen Zuo, Xiaojun Guo, Bei Sun, and Xudong Wen, in Sensors, 2019.
19  "An Efficient TDOA-Based Localization Algorithm Without Synchronization Between Base Stations," Sangdeok Kim, and 
Jong-Wha Chong, in Location-Related Challenges and Strategies in Wireless Sensor Networks, 2015.
12
WHITE PAPER
UWB Real Time Locating Systems: How Secure Radio Communications May Fail in Practice
2. Methodology and Attack Demos
2.2.2 Algorithm Details
The routine implemented in UWB RTLS can usually be 
organized in two different steps:
1. clock synchronization;
2. position estimation.
Clock Synchronization: As mentioned before, each anchor has 
a different time domain. To compare the received timestamps 
from different anchors, the server needs a clock model able 
to translate the local anchor timestamp domain to a global 
timestamp domain. To do this, the reference anchor periodically 
sends a synchronization UWB signal, which is received by the 
other anchors. As the anchors receive this signal, they send a 
packet to the server indicating the timestamp when the signal 
was received. At this point, the server is able to compute 
the clock offsets for each anchor i at each algorithm iteration 
instant t, based on the reference anchor.
There are many wireless synchronization algorithms that 
have been proposed in literature. In this white paper, we 
describe the Linear Interpolation algorithm, a simple yet 
effective way to achieve wireless synchronization among 
anchors with different time domains. This is also the same 
algorithm that we applied later while posing as an attacker, 
listening to the packets exchanged on the wire and trying 
to reconstruct the position of the tags.
In this algorithm, to achieve synchronization, a new parameter 
called Clock Skew (CS) is computed for each anchor.
The computation of the CS derives from the 
synchronization packets transmission period: for the 
reference anchor, the parameter refAnchorSyncPeriod 
is computed by subtracting the timestamp of the last-
but-one synchronization packet sTs (reference, t-1) to the 
timestamp of the last synchronization packet sTs(reference, 
t) sent by the reference anchor (Eq. 1). The same procedure 
is adopted to compute the nonRefAnchorSyncPeriod for 
each non-reference anchor (Eq. 2).
For each anchor, the Clock Skew is computed as the 
ratio between the refAnchorSyncPeriod and its 
nonRefAnchorSyncPeriod (Eq. 3). It is important to notice 
that the Clock Skew for the reference anchor is equal to 1, as 
it is the reference for all the other anchors.
Finally, to determine the location of a tag j, the server needs 
the positioning timestamps for, at least, N+1 anchors, where 
N indicates the number of dimensions (X, Y, Z) of the tag 
that the system wants to compute. 
To this extent, the concept of Global Time (GT) is introduced: 
the GT represents the conversion of the positioning 
timestamp of an anchor to a common clock domain, so that 
these new timestamps can be compared and used together 
to estimate the tag position.
Given an anchor i, a tag j, and an iteration instant t, the 
equation follows.
Eq 4 formally describes what has been mentioned before: 
sTs(i, t) indicates the timestamp of the synchronization 
packet during the iteration instant t sent by anchor i, pTs(i, j, t) 
represents the positioning packet sent by tag j to anchor 
i during the iteration instant t, while ToF(i) represents the 
time of flight from each anchor to the reference, i.e. the 
time that it takes for a signal to be transmitted and received 
among the reference anchor and the non-reference 
ones. Please note that the GT(reference, j, t) is simply 
pTs(reference, j, t) - sTS(reference, t).
refAnchorSyncPeriod(t) = sTs(reference, t) - sTs(reference, t-1
GT(i, j, t) = CS(i, t) * (pTs(i, j, t) - sTS(i, t)) + ToF(i)
nonRefAnchorSyncPeriod(i, t) = sTs(i, t) - sTs(i, t-1)
Eq. 1
Eq. 4
Eq. 2
CS(i, t) = refAnchorSyncPeriod(t)/nonRefAnchorSyncPeriod(i, t)
Eq. 3
13
WHITE PAPER
UWB Real Time Locating Systems: How Secure Radio Communications May Fail in Practice
2. Methodology and Attack Demos
Position Estimation: the so obtained GTs can be directly 
compared to find the difference of the distances between 
each anchor i and the tag j at a certain iteration instant t:
Where Delta(i, j, t) is the difference of the respective 
distances between the tag j and the reference anchor at 
instant t, and the tag j and the non-reference anchor i at 
instant t, while c is the speed of light constant. In fact:
Where d(reference, j, t) is the distance between the tag 
j and the reference anchor at instant t, and d(i, j, t) the 
distance between the tag j and the non-reference anchor i 
at instant t.
Once the server computes the distance differences between 
the tag and each anchor, the last missing step is the 
computation of the spatial coordinates. This is simply done 
by using the formula of the distance between two points:
Where Xj,t is the X coordinate of tag j at instant t, Xi is the X 
coordinate of anchor i (constant across time), and Yj,t, Yi, Zj,t, 
Zi are the analogous versions for the Y and Z coordinates.
Finally, by considering Eq. 5, 6, and 7, a non-linear system of 
equations can be set up to solve for Xj,t, Yj,t, and Zj,t, which is 
the position of tag j at the instant t.
By looking at this system, the reader may now understand 
the requirement of N+1 anchors, where N indicates the 
number of dimensions (X, Y, Z) of the tag that the system 
wants to compute.
This is a quadratic N-equations-three-unknowns system, 
that, if solved, leads to the computation of Xj,t, Yj,t, and Zj,t. 
For three coordinates, at least three equations are needed, 
thus 4 anchors. If only two coordinates are necessary, at 
least two equations are needed, thus 3 anchors.
If more anchors than coordinates are available, it is 
possible to use the additional available information to 
increase the precision of the computed tag position, which 
may be influenced by external factors such as temporary 
noise, interferences, etc.
From the equations above, it is also possible to conclude 
that, to obtain the position of a tag, the following data 
need to be known:
 y All coordinates of the anchors involved
 y Synchronization timestamps
 y Positioning timestamps
Delta(i, j, t) = (GT(reference, j, t) - GT(i, j, t)) * c
Delta(i, j, t) = (GT(reference, j, t) - GT(i, j, t)) * c = 
GT(reference, j, t) * c - GT(i, j, t) * c = d(reference, j, t) - d(i, j, t)
Delta(1, j, t) = sqrt((Xj,t – Xreference)^2 + (Yj,t – Yreference)^2 + (Zj,t 
– Zreference)^2) - sqrt((Xj,t – X1)^2 + (Yj,t – Y1)^2 + (Zj,t – Z1)^2)
Delta(2, j, t) = sqrt((Xj,t – Xreference)^2 + (Yj,t – Yreference)^2 + (Zj,t 
– Zreference)^2) - sqrt((Xj,t – X2)^2 + (Yj,t – Y2)^2 + (Zj,t – Z2)^2)
…
Delta(N, j, t) = sqrt((Xj,t – Xreference)^2 + (Yj,t – Yreference)^2 + (Zj,t 
– Zreference)^2) - sqrt((Xj,t – XN)^2 + (Yj,t – YN)^2 + (Zj,t – ZN)^2) 
d(i, j, t) = sqrt((Xj,t – Xi)^2 + (Yj,t – Yi)^2 + (Zj,t – Zi)^2)
Eq. 5
Eq. 6
Eq. 8
Eq. 7
14
WHITE PAPER
UWB Real Time Locating Systems: How Secure Radio Communications May Fail in Practice
2. Methodology and Attack Demos
In order to identify the TDoA routines executed by both 
Sewio and Avalue UWB RTLS, understand how the network 
traffic is processed by the two solutions, and assess 
the security of the network communications, a reverse 
engineering activity was done. The following two sections 
describe this process for both solutions.
2.3.1 Sewio RTLS
The Sewio RTLS can be configured to employ either 
Ethernet or Wi-Fi as a backhaul for the communications 
among the anchors and server. Multiple Wireshark captures 
in a variety of situations have been performed, to collect as 
many packet samples as possible. Some of these samples 
are reported in Figure 6 and Figure 7.
2.3 Reverse Engineering of Device Network Traffic
Figure 6 - Sewio RTLS network packet sample.
Figure 7 - Sewio RTLS network packet sample (2).
15
WHITE PAPER
UWB Real Time Locating Systems: How Secure Radio Communications May Fail in Practice
2. Methodology and Attack Demos
The first step of the reverse engineering process consists 
of analyzing the traffic generated by the Sewio anchors, 
to understand which protocols and which ports they use 
to transmit the information to the server. As can be seen, 
the Sewio RTLS uses a custom, unknown binary network 
protocol for the communications among anchors and 
server. No standard data structures are immediately 
recognizable. Consequently, an analysis of the server 
software is required, in order to understand how packets 
are processed and complete their dissection.
In reference to the previous figures, Sewio anchors (IPs: 
192.168.225.{11,12,13,14,15})  communicate with the server over 
UDP on port 5000. By looking at the output of netstat (Figure 
8), the traffic is processed by a NodeJS server instance.
A quick look at the output of ps also confirmed that NodeJS is running RTLSmanager.js (Figure 9).