nize a subset of these operations that do not change sys-
tem state, and permit them. For instance, it is reasonable
to consider that DNS queries do not modify system state.
Similarly, sufﬁcient intelligence may be built into the im-
plementation to recognize and permit certain device-level
operations that query system state without modifying it.
More generally, service-speciﬁc proxies may be built that
can forward those service requests that do not change sys-
tem state, while disallowing other requests. Such service-
speciﬁc proxies may be built to access X-windows, web
servers, audio devices, etc. For the rest of this paper, we
do not discuss such service-speciﬁc proxies, but focus on
achieving ﬁle system level isolation.
In our approach, ﬁle-level isolation is achieved using iso-
lation contexts. An isolation context can be thought of as a
“private copy” of the entire ﬁle system. It is implemented
using a copy-on-write technique, so that its storage require-
ment is proportional to the changes made within the isola-
tion context, and not on the size of the entire ﬁle system. A
new isolation context is created when an untrusted process
is about to be executed. If this process creates child pro-
cesses, then all such children and their descendants are ex-
ecuted within the same isolation context. This ensures that
the untrusted process and its descendants have an identical
(and consistent) view of the ﬁle system state. Multiple un-
trusted applications may be executed independently, each
within its own isolation context2.
To implement isolation contexts, ﬁle system changes
made by an untrusted process are redirected so that they
do not change global system state. Such redirection may be
built into the application itself or within the system libraries
is not our main goal in this paper.
2 Copy-on-write provides one-way-isolation, i.e., changes made within
an isolation context are shielded from the rest of the system, but the
changes made outside of isolation contexts may be visible inside.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:46 UTC from IEEE Xplore.  Restrictions apply. 
Untrusted
Processes
GUI
System Call Interceptor
Manager
Alcatraz
Isolation
Engine
Modification
Cache
Mapping
Table
CWD
Tracking
Confinement
Engine
Operating System
Figure 1. System Architecture
that are used to access ﬁles. Neither approach is satisfactory,
since they require the applications to be trusted. In particu-
lar, a malicious application can bypass such redirection, and
make direct access to the system calls provided by the OS
for manipulating ﬁles. We therefore rely on OS-level mech-
anisms that can support secure redirection. There are two
main choices in this regard:
• System-call interposition: Since all accesses to system
resources (including accesses to ﬁles, devices and the
network) are effected through system calls, interposing
at this level provides a secure way to achieve isolation.
• Interposition at the VFS layer: The Virtual File System
layer provides an abstract interface within the OS ker-
nel for accessing all ﬁle systems. One beneﬁt of inter-
posing at this layer is that of higher performance: only
ﬁle system operations are interposed, as opposed to all
system calls.
Of these choices, we have adopted system call interposition
for two reasons. First, it can be implemented without requir-
ing changes to the operating system. Indeed, the ptrace
mechanism in Linux permits ordinary users to intercept sys-
tem calls made by their processes, without requiring them
to make any OS-level changes that need superuser privilege.
Second, as discussed earlier, we need to monitor non-ﬁle
operations made by the untrusted process, and hence sys-
tem call interposition would be necessary even if ﬁle level
isolation were implemented using VFS interposition.
2.2. System Overview
The architecture of our system, called Alcatraz, is shown
in Figure 1. The isolation engine consists of several com-
ponents. The manager module coordinates the operations
of the isolation engine. It uses the modiﬁcation cache as a
scratch-pad area where new ﬁles (or directories) created by
the untrusted process are held. The modiﬁcation cache is
a dedicated area within the ﬁle system, and uses a distinc-
tive name so that multiple Alcatraz sessions can run on the
same system. For ﬁles (and directories) stored in the modiﬁ-
cation cache, the mapping table provides the translation be-
tween ﬁle names used by an untrusted process and their cor-
responding names within the modiﬁcation cache. The table
also records other information pertaining to modiﬁed ﬁles,
e.g., whether a ﬁle is deleted.
Note that the isolation engine holds all the information
about modiﬁcations to the ﬁle system, and the operating
system kernel does not know about these changes. There-
fore the isolation engine needs to modify the arguments
and/or the return values of system calls that access ﬁles.
In particular, when a system call is invoked in an isolated
process, the system call interceptor sends a notiﬁcation to
the manager module. The manager module handles ﬁle sys-
tem modiﬁcation operations, while forwarding the rest of
the system calls to the conﬁnement engine. If the ﬁle opera-
tion refers to objects that have been modiﬁed, then the man-
ager modiﬁes the path name argument so that it refers to
the modiﬁed object located within the modiﬁcation cache.
These (possibly modiﬁed) arguments are returned back to
the system call interceptor. When the system call returns,
the manager module is once again notiﬁed, so that it may
modify the results returned by the system call as necessary.
The mapping table maps one absolute ﬁle name into an-
other. However, not all the system calls are invoked with ab-
solute path names. Hence ﬁle names must be resolved into
absolute path names, with symbolic links expanded, and the
“.” and “..” entries resolved. The CWD Tracking mod-
ule helps this process. It maintains the current working di-
rectory of each process and updates them when a process
makes a system call that results in changes to that direc-
tory. The current working directory of a parent process will
be inherited by its children.
After the untrusted process ﬁnishes execution, the isola-
tion engine invokes a GUI (graphical user interface), which
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:46 UTC from IEEE Xplore.  Restrictions apply. 
Read Only
Operations
execve, chdir, access, chroot,
readlink, uselib, statfs, stat,
lstat, stat64, lstat64, oldstat,
getdents, getdents64, readdir
Regular Files
open,
truncate,
truncate64
Modiﬁcation Operations
Directories
creat, link, unlink,
mknod, rename, mkdir,
rmdir, acct, symlink,
open
Inodes
chmod, lchown,
utime, oldlstat,
chown, lchown32,
chown32
Figure 2. Classiﬁcation of System Calls
presents a compact summary of the security relevant actions
made by the process. If these changes are accepted by the
user, then they are “copied over” so that they become visi-
ble to other processes in the system. Criteria for determin-
ing whether such copying can be done while preserving iso-
lation semantics is described later in the paper. Below, we
describe the key components of Alcatraz in further detail.
2.3. Manager
As mentioned above, the key problem in implementing
the isolation engine is that of modifying ﬁle-related system
calls in a manner that provides a consistent view of the sys-
tem state to the isolated process. This becomes a challeng-
ing task when we consider the different kinds of ﬁle sys-
tem objects (regular ﬁles, directories, symbolic links, etc.)
and the large number of ﬁle system related operations (34
out of the 243 system calls in Linux kerner version 2.4.18).
To tackle this complexity, we make the following observa-
tions about the kinds of ﬁle system objects that need to be
considered: regular ﬁles, directories, symbolic links, and In-
odes. (Inodes contain meta data about ﬁles, such as per-
mission, ownership etc.) File modiﬁcation operations may
be different across these ﬁle types. For example, regular
ﬁles are viewed as a stream of bytes, and can be modi-
ﬁed by seeking to any location (expressed as a byte offset)
within the ﬁle, and performing a write system call. Direc-
tories, on the other hand, are viewed as a sequence of direc-
tory entries, which are records containing information about
the ﬁles within the directory. For symbolic links, the only
modiﬁcationis that of ﬁle deletion. In this sense, it is noth-
ing more than a directory modiﬁcation operation. Thus, we
need only consider three kinds of objects on the ﬁle sys-
tem: regular ﬁles, directories, and Inodes.
Now consider the system call operations on the ﬁle sys-
tem. For the isolation operation, we need to consider only
those system calls that are path name related. System calls
that operate on ﬁle descriptors (e.g., read, write and
mmap) can be left to the operating system to handle. Path
name based operations can be classiﬁed as shown in Fig-
ure 2 based on whether they modify the ﬁle system and the
object modiﬁed. Since the manner in which “read” opera-
tions are implemented is determined by the way modiﬁca-
tions are implemented, our description below is organized
by the three categories of modiﬁcation operations.
Regular ﬁle modiﬁcations. Consider a process that opens
a ﬁle f for writing. A natural way to isolate the execu-
tion of the process is to create a new copy f (cid:1)
of f that is
stored within the modiﬁcation cache. All future accesses to
f, whether they be modiﬁcations or reads, will be redirected
to f(cid:1). To enable this redirection, an entry associating f with
f(cid:1) is inserted into the mapping table. An optimization that
avoids copying of ﬁles is possible in the common case when
a ﬁle is truncated to zero length at the open.
Directory modiﬁcations. The above simple implementa-
tion of copy-on-write does not directly extend to directo-
ries. In particular, there is no way to copy a directory into
the modiﬁcation cache without copying the ﬁles and direc-
tories contained within. The problem can be partially over-
come by creating a new, empty directory in the modiﬁcation
cache, and creating hard links from this directory to every
ﬁle in the original directory. However, Linux disallows cre-
ation of hard links to directories, so this approach will not
work when subdirectories are involved. Clearly, the alterna-
tive of copying the entire ﬁle system contents rooted at the
current directory would be far too inefﬁcient.
To develop a more efﬁcient approach for copy-on-write,
we observe that unlike a regular ﬁles, directories are ac-
cessed in a structured manner using specialized directory
operations such as mkdir and getdents. Thus, our ap-
proach is one of modifying these operations in a manner that
achieves copy-on-write semantics without having to per-
form actual copies of directory contents. In particular, modi-
ﬁcations to directories, such as creation/deletion of new ﬁles
or directories, are recorded in the modiﬁcation cache.
When the contents of such modiﬁed directories are read
using the getdents operation, we can modify the returned
directory entries as follows. Any directory entry f that is
mapped into f(cid:1)
by the mapping table is replaced so as to
contain the information about f (cid:1). If the ﬁle f has been
deleted by the isolated process, then the entry correspond-
ing to f is deleted from the getdents return value. It is
possible that all the entries returned by getdents may be
deleted in this step. If, as a result of this, no entries are re-
turned to the isolated process, it would conclude that the end
of the directory has been reached. (This is how getdents
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:43:46 UTC from IEEE Xplore.  Restrictions apply. 
works under Linux.) To solve this problem, the manager
ﬁrst retrieves all of the directory entries in the directory, and
applies the above changes to the directory entries. We then
append new directory entries that are recorded in the mod-
iﬁcation cache but not present in the rest of the ﬁle system.
The result is returned to the isolated process.
Inode modiﬁcation. Modiﬁcation can also be made to In-
odes which store ﬁle system meta data. Inodes are associ-
ated with ﬁles and cannot be copied separately. Therefore,
if the modiﬁcation is made to a ﬁle that has already been
copied to the temporary location (i.e., just created or mod-
iﬁed ﬁle), we can redirect this operation to its counterpart
in the temporary location. If the modiﬁcation is made to
an unchanged regular ﬁle, we can again copy the ﬁle into
the modiﬁcation cache and proceed as in the previous case.
However, this approach does not work on directories be-
cause, as mentioned in the preceding section, we cannot
copy a directory. One possibility is to use the isolation layer
to record the changed Inode information of directories and
let all related system calls make use of this information.
However, this solution is not very useful in all cases, as the
kernel does not know about the existence of such informa-
tion. For example, if the untrusted program adds write per-
mission to an existing directory, using this approach, this
change will be stored in the isolation layer, but the kernel
will still not allow it to write into that directory because this
changed permission information is not visible to the kernel.
In our implementation, the isolation layer records an error
message in such situations, and allows continued execution
of the isolated process. This limitation has not posed a sig-
niﬁcant problem in practice, since it is very unusual for un-