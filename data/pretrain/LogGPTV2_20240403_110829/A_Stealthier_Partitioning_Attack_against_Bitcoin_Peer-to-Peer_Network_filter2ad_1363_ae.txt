tables of a 30 days old node with shadow IPs. Number of
shadow IPs surges after attacking for 25–30 days in both tables
indicates that at the same time, a huge number of non-shadow
IPs become terrible and are evicted.
s
n
o
i
t
c
e
n
n
o
c
t
i
h
g
e
l
l
a
f
o
y
t
i
l
i
b
a
b
o
r
P
s
P
I
w
o
d
a
h
s
o
t
e
d
a
m
0.4
0.3
0.2
0.1
0
0
Rank 1
Rank 10
Rank 30
Rank 50
Rank 70
5 10 15 20 25 30 35 40 45 50
Attack duration (days)
s
n
o
i
t
c
e
n
n
o
c
t
i
h
g
e
l
l
a
f
o
y
t
i
l
i
b
a
b
o
r
P
s
P
I
w
o
d
a
h
s
o
t
e
d
a
m
0.4
0.3
0.2
0.1
0
0
10 days old Victim
20 days old Victim
30 days old Victim
40 days old Victim
50 days old Victim
5 10 15 20 25 30 35 40 45 50
Attack duration (days)
(a) Adversaries with varying
rankings. Victim is hosted at
AS 16509.
(b) Victim nodes with varying
ages. Adversary is AS 6939,
victim is hosted at AS 16509.
Figure 9: Probability of making all eight outgoing connections
to shadow IPs for varying adversary’s rankings and victim’s
ages. In all experiments, attacks are non-adaptive for fair
comparisons.
To better understand the adversary’s attack success prob-
ability, we illustrate how shadow IPs are inserted into the
two tables for the same attack instance in Figure 8. Overall,
the number of shadow IPs in both tables tends to increase.
Particularly, in the ﬁrst 25 days of the attack, shadow IPs
are inserted with a relatively low rate. After day 25 of the
attack, the number of shadow IPs signiﬁcantly increase as the
existing legitimate IPs in the new table become terrible and
get evicted; see Figure 8a. Similarly, Figure 8b also shows the
number of shadow IPs that are migrated to the tried table
increases signiﬁcantly after attacking for 30 days. Note that
although the adversary cannot evict all legitimate IPs to occupy
all the slots, shadow IPs still dominates the reachable IPs in
both tables, which explains the increasing probability f of a
single outgoing connection is made to shadow IP.
2) Attack Effectiveness for Varying Victim’s Age and Ad-
versary AS’ Ranking: We show the attack effectiveness with
various attacker’s rankings in Figure 9a and with different
victim node’s ages in Figure 9b. Figure 9a shows similar
growth patterns of f 8 with only minor differences. This
suggests that the topological advantages of among ASes even
with very different rankings are quite limited. The results from
Figure 9b shows that younger victim nodes tend to be more
vulnerable to the EREBUS attacks as the adversary’s success
rates when attacking these nodes are higher. However, the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:22 UTC from IEEE Xplore.  Restrictions apply. 
903
adversary can still achieve a certain success rate (e.g., 18% in
our experiments with 50 days old nodes), which requires only
a few times of rebooting the victim until all of its outgoing
connections are occupied.
3) Required Attack Trafﬁc Rate: We estimate the attack
trafﬁc needed in the EREBUS attacks. In 50 days of the attack
emulations, our Python script sends shadow IPs to the victim
at the rate of 2 IPs per second. This rate is only slightly
higher than the IPs inserting rate before the attack starts
(about 1.3 IPs per second). Note that the rate of non-shadow
IPs is signiﬁcantly reduced once the attack begins because
the attacker occupies most of the incoming connections as
well. Thus, the total rate of incoming IPs during the attack
is comparable to the typical rate of incoming IPs before the
attack. Considering every 500 seconds, the adversary needs to
send an addr message containing 1,000 shadow IPs over a
TCP connection made with the victim. The entire connection
(i.e., downstream and upstream) includes a TCP handshake
(214 bytes), a Bitcoin version handshake (614 bytes), an
addr message (30,093 bytes) and other packets such as TCP
ACKs and Bitcoin pings (about 1,500 bytes). Thus, in total,
the adversary needs to maintain only the trafﬁc rate of about
520 bit/s to launch the EREBUS attack against one victim node.
4) Attack Scalability: The EREBUS attack is highly scal-
able. One adversary AS can target multiple Bitcoin nodes
at
the same time in parallel without any extended attack
preparation and execution time. This is because an attack
execution against each Bitcoin node is independent of each
other.
For the concurrent attacks, the adversary AS must send
different attack Bitcoin messages to different Bitcoin nodes.
This simply requires a linear increase in attack trafﬁc volume
as the number of targeted Bitcoin nodes increases. Considering
the low attack trafﬁc rate per targeted node, attacking multiple
nodes (even tens or hundreds of nodes) still requires negligible
total attack trafﬁc rate compared to the multi Tbit/s trafﬁc
capacity of large ASes and it can be easily handled by a single
or a couple of commodity servers in the adversary AS.
The EREBUS adversary may want to choose the targeted
Bitcoin nodes carefully to achieve her ultimate attack goals;
e.g., controlling several mining pool gateways, attempting
double-spending. Detailed algorithms for determining the set
of targeted Bitcoin nodes with adaptive attacker strategies have
been discussed by Apostolaki et al. [3].
VII. COUNTERMEASURES
Since the EREBUS attack exploits no design or implemen-
tation bugs of Bitcoin core but only the enormous network
address resources of network adversaries, the prevention of
the attack (e.g., via ﬁxing bugs) is hard. Fortunately, making
the EREBUS attack much harder is still possible.
For the sake of argument, we ﬁrst discuss several naive,
the
ineffective countermeasures that do not work against
EREBUS attack. Then, we discuss a couple of effective coun-
termeasures: the ones that do not change Bitcoin core, and the
ones that do require its changes.
A. Ineffective Countermeasures
We list six naive solutions that do not, unfortunately, work
in practice against the EREBUS attack.
the active route measurement
1) Active route measurements: A victim Bitcoin node may
actively measure the end-to-end routes from itself to its peers
to test whether its connections traverse a common, potentially
malicious AS. However,
is
ineffective because it can be easily spoofed by the EREBUS ad-
versary and the detection of such spooﬁng is hard. When route
probe packets (e.g., traceroute probes) traverse through
the adversary AS, she can alter the measured routes (e.g.,
by spooﬁng IPs of ICMP error messages for traceroute)
and make the routes look benign (i.e., not
traversing the
adversary AS). Worse yet, the detection of such spooﬁng is
not straightforward. A victim node may try to detect such
spooﬁng by identifying unusual routes via IP-level route
analysis; however, the accuracy of such route manipulation
detection is yet unknown and also many false positives may
occur whenever router-level paths change.
2) Inter-domain route estimation: A victim node may try
to run BGP simulations to estimate the inter-domain routes of
its connections (just like the EREBUS adversary does) to detect
the EREBUS attack. This approach is, however, unfortunately
ineffective because it is hard for a victim node to validate
the estimated routes due to the lack of the ground truth route
measurement data (see above for why active route measure-
ment is hard). Without the validation of the routes, many
false positives and negatives may occur if the estimated routes
differ from the real ones. Note that, the EREBUS adversary, in
contrast, can accurately validate her route estimation because
she sees all the Bitcoin packets from the victim node if she is
on the end-to-end routes.
3) Whitelisting IP addresses: One way to prevent
the
EREBUS attacks would be to maintain a whitelist of real
Bitcoin nodes in a central location and inform this to all
the Bitcoin nodes so that they can easily ignore shadow IPs.
Bitcoin, however, in principle allows any node to join and
leave the system at any point in time without any permission.
Thus, maintaining such whitelist strongly violates the permis-
sionless blockchain principle. Whitelisting can be centralized
or decentralized but either way, it is impractical to operate
one. A single (or a small number of) centralized whitelist can
be a perfect single point of failure of the system because the
compromise of the list can fully control the network graph.
A decentralized implementation of a whitelist is not trivial
because it requires building consensus on such lists among
large numbers of nodes itself.
4) Rate limiting addr messages: Another candidate so-
lution would be to limit
the number of addr messages,
particularly, the number of IPs received from other Bitcoin
nodes to limit the EREBUS adversary’s capability. A victim
node can enforce a lower limit to the addr messages received
from incoming connections than the ones from outgoing
connections as most of shadow IPs are sent via incoming
connections. However, as we observe in our attack emulation
in Section VI, the number of IP addresses sent by an attacker
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:22 UTC from IEEE Xplore.  Restrictions apply. 
904
AS is not very different (e.g., only about 1×–2× of the normal
rate), making it hard to design a rate limiter in practice.
5) Rate limiting incoming connections: Similarly, one may
attempt to limit the number of incoming connections per unit
time to make the ﬂooding of new incoming connections to a
victim node less effective. However, rate limiting the incoming
connections does not decrease the chance of adversary occupy-
ing the incoming connections when the adversary’s incoming
connection requests are indistinguishable from other requests.
6) Network-level data-plane detection: A benign, cautious
transit AS may attempt to detect the EREBUS attack launched
by a neighbor AS by monitoring any unusually large numbers
of Bitcoin messages (e.g., version, verack, addr) to multi-
ple Bitcoin nodes from the single transit AS. However, such
data-plane, in-network detection is hard because: (1) attack
trafﬁc rate is not signiﬁcantly higher than the benign cases;
and (2) one cannot deﬁnitively conﬁrm the originator of any
suspicious Bitcoin messages.
B. Countermeasures without Bitcoin Protocol Changes
To test the reachability of an IP address with an EREBUS-
AS-free path, a Bitcoin node may rely on third-party proxies
(e.g., VPNs, Tor, relays [20], [2]). Although this approach
can potentially detect EREBUS attacks without modifying the
current Bitcoin protocol, there are a few caveats of designing
and using such third-party proxy systems:
• Limited scalability. It would be challenging if most of
Bitcoin nodes want
to have their separate proxy-based
reachability tests. There exist around 10K potentially vul-
nerable nodes in the Bitcoin peer-to-peer system. Providing
multiple proxies (ideally in different locations) for all the
nodes would be difﬁcult in practice; e.g., no single VPN
service has that many different VPN nodes (even Tor has
less than 1K exit nodes in total). Moreover, the reliance on
the external proxies would increase the attack surface; viz.,
several vulnerabilities of Bitcoin over Tor [10].
• Centralization. Due to the limited scalability, any proxy-
based approaches could easily end up with a small number
of centralized proxies; e.g., a handful of Bitcoin relays, a
few popular VPN servers. When a small number of proxies
become the centralized components in the peer-to-peer
system, they naturally have the power to control the peer-to-
peer network topology. Unless we have a highly trustworthy
proxy service for the Bitcoin peer-to-peer network, we
should critically evaluate the potential risk of centralization
in any proxy-based countermeasures.
C. Countermeasures with Bitcoin Protocol Changes
With some Bitcoin protocol changes, we can make the
EREBUS attack much harder. We discuss and evaluate several
potential countermeasures.
[C1] Table size reduction. The size of the new and tried
tables is an important system parameter that affects the prob-
ability of the adversary-injected IP addresses selected for out-
going connections. The Bitcoin community has increased the
table sizes four times as the countermeasure against the Eclipse
Baseline
[C1]: Table size / 4
[C1]: Table size / 2
[C1]: Table size x 2
[C2]: No. of outgoing connections x 2
[C1] & [C2]: Table size / 4 & 
 No. of outgoing connections x 2
0.6
0.5
0.4
0.3
0.2
0.1
)
6
1
r
o
8
(
l
l
a
f
o
y
t
i
l
i
b
a
b
o
r
P
P