3/ min(t1, t2)
2/ min(t1, t2)
0 in our fault model
0 in our fault model
0 in our fault model
Table 1. Summarizing the success probabilities of a fault
attack adversary
5.7 Further Security Considerations
Note that disclosure of most intermediate variables can
be used to break the system. E.g., if our countermeasure
prevents a Bellcore attack on a faulty Sp using c1 (cid:5)= 1, c2 = 1
and c1 is revealed, then gcd(me − Sigc1 , N ) = p. This also
implies that the bitlength of the parameters ti must be large
enough to defend against a brute force search on ci from lines
4 and 5 of Algorithm 2.
The length of the two parameters ti should be as small
as possible to ease the cost of computation, but it must be
large enough to guarantee security. Section 5.1 shows that
the most promising attacks succeed with a probability of at
most 3/ min(t1, t2). Hence, both t1 and t2 must be large
enough to ensure that attacking the scheme succeeds only
with negligible probability. The deﬁnition of ”small” and
”negligible” will have to be adapted to the actual imple-
mentation of a system using our algorithm.
If we assume
a very high level of security, we will demand a security of
280, i.e. l(ti) > 80. Less conservative security considerations
may allow to reduce this bound. Practical applications may
only need to guarantee the security of the signature key for
a small time like 2 years — today’s credit cards incorporate
In cases like these, l(ti) = 60
the same security feature.
seems to be secure (the SETI@home project as one of the
largest open attacks achieved about 261 operations [19]). If
less powerful attacks are assumed, this level might be low-
ered even further.
6. CONCLUSIONS
The fault models described in Section 3 show that the
adversaries known in the literature can be described with
few parameters. This description leads to a common model
with proper mathematical formulations. The models always
assume quite natural the most powerful adversary known.
However, the power of the adversary is gradually reduced
due to countermeasures in eﬀect on the attacked smartcard.
The proposed algorithm develops known ideas into a form
that can be proven to be secure within the presented frame-
work with respect to the Bellcore attack. The only problem
still unsolved by software mechanisms poses the fault model
#1 (precise bit error attacks on an unprotected smartcard).
If the power of the adversary is not reduced by hardware
or software means, the adversary may perform a successful
oracle attack circumventing the proposed countermeasure:
as attacks like those described in [21] or [17] allow to set
any speciﬁc bit to any speciﬁc value, we just need l(x) steps
to determine the bit pattern, and hence the value, of any
parameter x. We guess a bit value, set that bit and verify
whether the ﬁnal result and therefore the guess is correct
or not. This reveals any attacked parameter and only uses
the knowledge whether a fault occurred or not. No speciﬁc
value is needed. No eﬃcient software countermeasure pro-
tecting against such a fault can withhold that information
from the adversary. Therefore, we insist that all currently
proposed CRT-RSA implementations are broken by this at-
tack. To prevent this fault model #1, smartcards must ﬁght
the cause of error rather than the eﬀect on computation to
reduce the power of the adversary signiﬁcantly. Luckily, var-
ious but not all hardware manufacturers of cryptographic
devices such as smartcard ICs have been aware of the im-
portance of protecting their chips against intrusion. To do
so they use carefully developed logic families, sensors, ﬁlters,
regulators, etc. We are also investigating possible software
countermeasures that use random bits to alter the param-
eters. As oracle attacks need to test several identical runs
of an algorithm, this will eﬀectively reduce the power of the
adversary. We will elaborate this idea and present an en-
hanced algorithm in a diﬀerent paper shortly.
7. REFERENCES
[1] R. Anderson and M. Kuhn. Tamper resistance — a
cautionary note. In Proceedings of the Second
USENIX Workshop on Electronic Commerce, pages 1
– 11, Oakland, California, November 18-21 1996.
USENIX Association.
[2] C. Aum¨uller, P. Bier, W. Fischer, P. Hofreiter, and
J.-P. Seifert. Fault attacks on RSA with CRT:
Concrete results and practical countermeasures. In
Workshop on Cryptographic Hardware and Embedded
Systems 2002 (CHES 2002), Hotel Soﬁtel, San
Francisco Bay (Redwood City), USA, August 13–15
2002.
[3] F. Bao, H. Deng, R. Y. Jeng, A. D. Narasimhalu, and
T. Ngair. Breaking public key cryptosystems on
tamper resistant devices in the presence of transient
faults. In B. Christianson, B. Crispo, M. Lomas, and
M. Roe, editors, Security Protocols, volume 1362 of
Lecture Notes in Computer Science, pages 115–124.
Springer-Verlag, 1998.
[4] M. Bellare and P. Rogaway. Optimal asymmetric
encryption. In Advances in cryptology —
EUROCRYPT ’94 (Perugia), Lecture Notes in
Computer Science, pages 92–111. Springer, Berlin,
1995.
[5] J. Bl¨omer and A. May. personal communication, 2002.
[6] J. Bl¨omer and J.-P. Seifert. Fault based cryptanalysis
of the Advanced Encryption Standard (AES). In
Seventh International Financial Cryptography
Conference (FC 2003) (Gosier, Guadeloupe, FWI
January 27-30), 2003.
[7] D. Boneh, R. A. DeMillo, and R. J. Lipton. On the
importance of checking cryptographic protocols for
faults. In W. Fumy, editor, Advances in Cryptology —
EUROCRYPT’97, volume 1233 of Lecture Notes in
Computer Science, pages 37–51. Springer-Verlag, 1997.
[8] D. Boneh, R. A. DeMillo, and R. J. Lipton. On the
importance of eliminating errors in cryptographic
computations. J. Cryptology, 14(2):101–119, 2001.
[9] C. Clavier, J.-S. Coron, and N. Dabbous. Diﬀerential
power analysis in the presence of hardware
countermeasures. In Cryptographic Hardware and
Embedded Systems – Proceedings of CHES 2000,
Worcester, MA, USA, volume 1965 of Lecture Notes
in Computer Science, pages 252–263. Springer-Verlag,
2000.
[10] J.-S. Coron. Resistance against diﬀerential power
analysis for elliptic curve cryptosystems. In
Proceedings of Cryptographic Hardware and Embedded
Systems (CHES’99), volume 1717 of Lecture Notes in
Computer Science, page 292 ﬀ. Springer-Verlag, 1999.
[11] J.-S. Coron, P. Kocher, and D. Naccache. Statistics
and secret leakage. In Proceedings of Financial
Cryptography, volume 1962 of Lecture Notes in
Computer Science, page 157 ﬀ. Springer-Verlag, 2000.
[12] C. Couvreur and J. Quisquater. Fast decipherment
algorithm for RSA public-key cryptosystem.
Electronic Letters, 18(21):905–907, 1982.
[13] G. Hardy and J. Littlewood. Some problems of
’Partitio Numerorum’ III: On the expression of a
number as a sum of primes. In Acta Mathematica,
volume 44, pages 1–70, 1922.
[14] M. Joye, J.-J. Quisquater, S.-M. Yen, and M. Yung.
Observability analysis: Detecting when improved
cryptosystems fail. In B. Preneel, editor, Topics in
Cryptology — CT-RSA 2002, volume 2271 of Lecture
Notes in Computer Science, pages 17–29, San Jose,
CA, USA, February 18–22, 2002, February 2002.
Springer-Verlag.
[15] B. Kaliski, Jr. and M. Robshaw. Comments on some
new attacks on cryptographic devices. Bulletin 5, RSA
Laboratories, July 1997.
[16] I. Peterson. Chinks in digital armor — exploiting
faults to break smart-card cryptosystems. Science
News, 151(5):78–79, 1997.
[17] J.-J. Quisquater and D. Samyde. Eddy current for
magnetic analysis with active sensor. In Proceedings of
Esmart 2002 3rd edition. Nice, France, September
2002.
[18] W. Rankl and W. Eﬃng. Smart Card Handbook. John
Wiley & Sons, 2nd edition, 2000.
[19] T. SETI@home project. Current total statistics, June
28th 2002.
http://setiathome.ssl.berkeley.edu/totals.html.
[20] A. Shamir. Method and apparatus for protecting
public key schemes from timing and fault attacks,
1999. US Patent No. 5,991,415, Nov. 23, 1999.
[21] S. Skorobogatov and R. Anderson. Optical fault
induction attacks. In Workshop on Cryptographic
Hardware and Embedded Systems 2002 (CHES 2002),
Hotel Soﬁtel, San Francisco Bay (Redwood City),
USA, August 13 - 15, 2002, 2002.
[22] S.-M. Yen and M. Joye. Checking before output may
not be enough against fault-based cryptanalysis. IEEE
Transactions on Computers, 49(9):967–970, September
2000.
[23] S.-M. Yen, S. Kim, S. Lim, and S. Moon. A
countermeasure against one physical cryptanalysis
may beneﬁt another attack. In K. Kim, editor,
Information Security and Cryptology — ICISC 2001,
volume 2288 of LNCS, page 414 ﬀ., 4th International
Conference Seoul, Korea, December 6-7, 2001. 2001.
Springer-Verlag.
[24] S.-M. Yen, S. Kim, S. Lim, and S. Moon. RSA
speedup with residue number system immune against
hardware fault cryptanalysis. In K. Kim, editor,
Information Security and Cryptology — ICISC 2001,
volume 2288 of LNCS, page 397 ﬀ., 4th International
Conference Seoul, Korea, December 6-7, 2001. 2001.
Springer-Verlag. (journal version in IEEE Trans. on
Comp., April 2003).
APPENDIX
A. PROVING THAT S 0 = S + E(X)  (S	   S )
IS HARMLESS
Assume that an adversary attacks the CRT combination
S = Sp+X·(Sq−Sp) mod N t1t2 with X = pt1·((pt1)
−1 mod
qt2). X is assumed to be precomputed and stored on the
card. A random error induced into X will result in a faulty
value S
instead of S:
(cid:2)
(cid:2)
S
= Sp + X · (Sq − Sp) + e(X) · (Sq − Sp) mod N t1t2
= S + e(X) · (Sq − Sp) mod N t1t2,
with e(X) ∈ [−X, 2l(X) − 1 − X]. The additional term is
the induced error. The countermeasure of Algorithm 2 will
fail to detect this fault iﬀ the addend is a multiple of both
t1 and t2, i.e. if t1 · t2|e(X) · (Sq − Sp) mod N t1t2 because
both t1 and t2 are diﬀerent primes. The latter property also
implies that at least one of the factors must be a multiple
of t1 and one (possibly the same) a multiple of t2.
As we consider the security independent from the adver-
sary’s choices for m, we ﬁrst assume that neither t1 nor t2
divides (Sq − Sp). As e(X) is an equally distributed value
from a consecutive interval, and t1 and t2 may be seen as
independent values, the probability for t1|e(X) and t2|e(X)
is at most 1/(t1 · t2).
For the message dependent question whether any of the
primes ti divides (Sq − Sp), let Sq := c be ﬁxed ﬁrst (with
0 ≤ c < qt2). In this case, there are pt1 integers in [c− pt1 +
1, c]. Of these numbers, only multiples of t1 are counted.
Hence, there are at most (cid:15)(pt1)/t1(cid:16) = (cid:15)p(cid:16) many such inte-
gers. Therefore, the probability of getting such an integer is
≤ p · 1/(pt1) = 1/t1. If we now count the overall number of
possible integers for all choices of c, we determine
Pr[(Sq − Sp) = k · t1]
=
=
c=0
qt2−1
X
qt2−1
X
≤ 1
qt2
c=0
Pr[(Sq − Sp) = k · t1|Sq = c] · Pr[Sq = c]
Pr[(c − Sp) = k · t1 for some k] · 1
qt2
· qt2 · 1
t1
=
1
t1
.
As the same consideration holds for t2, we have a maxi-
mum of 2/ min(t1, t2) messages where the probability that
a random error is not detected is signiﬁcantly higher than
1/(t1 · t2).
B. UNDETECTABLE BYTE ERRORS
Similar to the analysis in Section 5.1, results for induced
byte faults according to the byte error fault models #2 and
#3 can be stated. This models an attack on a variable x
as f (x) = x + b · 2k with |b| ∈ Z28, 0 ≤ k < l(x) − 7.
All probabilities stated in the following will be over random
choices of errors e(x) = b · 2k with random b and k. Here, b
will always denote a random byte value, that can be either
positive or negative. The analysis of a byte error attack
is completely analogous to the analysis for random errors
presented in Section 5. The results of the analysis of byte
errors are shown in Table 2. The displayed results are better
than the results for random errors as analyzed in Section
5. This is not surprising, since the special structure of the
induced error, i.e. b < 28, eliminates some possible attacks,
i.e. attacks which require that the greatest common divisor
of b and ti−1 is large, which is impossible for byte errors. On
the other hand, the following two cases yield worse results,
because they cannot be based on Assumption 1:
• attack on the stored variable 1
If a random byte fault is induced into pt1, such that pt1
is changed to pt1 + b· 2k, an undetectable error requires
that md div (pt1 + b · 2k) ≡ 0 mod t1.
• attack on  or the exponentiation’s intermedi-
ate variable
Any random byte fault induced during the exponentia-
tion that causes an intermediate value y of Algorithm
3 to be changed into y + b · 2k must fulﬁll the equation
b · 2k ≡ −2y mod t1 in order to induce an undetectable
error. For messages m ≡ 0 mod t1, all faults yield an
undetectable error.
Comment. Both cases described above require the ad-
versary to be able to construct malicious messages in
order to be practical. However, the adversary has no in-
formation about t1, which is needed to construct a ma-
licious message. Therefore, his best choice is to choose
random m for input. In this case, his success probabil-
ity is negligible.
The two special messages m = 0 and m = 1 need to be
excluded from the set of possible inputs. Here, the same
considerations as in Section 5 apply.
fault attack on
probability of the attack
line 1
line 2
line 3
3/t1
3/t2
1/(t1 · t2)
lines 4 – 6
0 in our fault model
Table 2. Summarizing the success probabilities of a fault
attack adversary for byte faults
C. UNDETECTABLE BIT ERRORS
The analysis of bit errors is completely analogous to the
analysis in Section 5. Here, the precise bit error fault model
#1 is considered, where a variable x is changed to f (x) =
x ± 2k with 0 ≤ k < l(x). The results are exactly the same
as in Table 2. Note that similar to the results in Appendix
B, attacks on pt1 require that md div (pt1 ± 2k) ≡ 0 mod
t1 and attacks on m or the exponentiation’s intermediate
variable require that ±2k ≡ −2y mod t1 in order to induce
undetectable errors. An adversary cannot construct such
messages unless he knows ti. As these values are secret, his
chance of successfully choosing a random m that satisﬁes
any of these conditions is negligible. Note that the results
in this section only consider Bellcore attacks.