# 3. Further Security Considerations

It is important to note that the disclosure of most intermediate variables can be used to compromise the system. For example, if our countermeasure prevents a Bellcore attack on a faulty \( S_p \) using \( c_1 \neq 1 \), \( c_2 = 1 \), and \( c_1 \) is revealed, then \( \gcd(m^e - \text{Sig}_{c_1}, N) = p \). This also implies that the bit length of the parameters \( t_i \) must be sufficiently large to defend against a brute-force search on \( c_i \) from lines 4 and 5 of Algorithm 2.

The parameters \( t_1 \) and \( t_2 \) should be as small as possible to minimize computational costs, but they must be large enough to ensure security. As shown in Section 5.1, the most promising attacks succeed with a probability of at most \( \frac{3}{\min(t_1, t_2)} \). Therefore, both \( t_1 \) and \( t_2 \) must be sufficiently large to ensure that the success probability of an attack is negligible. The definitions of "small" and "negligible" will depend on the specific implementation of the system.

For a very high level of security, we might require a security level of 80 bits, i.e., \( l(t_i) > 80 \). Less conservative security considerations may allow for a lower bound. In practical applications, such as those requiring the security of a signature key for a short period (e.g., 2 years, as with today's credit cards), a bit length of \( l(t_i) = 60 \) might be sufficient. The SETI@home project, one of the largest open attacks, achieved about \( 2^{61} \) operations [19], suggesting that \( l(t_i) = 60 \) is reasonably secure. If less powerful attacks are assumed, this level might be further reduced.

# 4. Conclusions

The fault models described in Section 3 show that the adversaries known in the literature can be characterized with a few parameters. This leads to a common model with proper mathematical formulations. The models assume the most powerful adversary known, but the power of the adversary is gradually reduced by countermeasures implemented on the attacked smart card.

The proposed algorithm builds on existing ideas and can be proven secure within the presented framework against the Bellcore attack. However, the only remaining issue is the fault model #1, which involves precise bit error attacks on an unprotected smart card. If the adversary's power is not reduced by hardware or software means, they can perform a successful oracle attack that circumvents the proposed countermeasure. Attacks like those described in [21] or [17] allow setting any specific bit to any specific value, requiring only \( l(x) \) steps to determine the bit pattern and hence the value of any parameter \( x \). By guessing a bit value, setting that bit, and verifying whether the final result and therefore the guess is correct, the adversary can reveal any attacked parameter. No efficient software countermeasure can protect against such a fault without revealing information to the adversary. Therefore, all currently proposed CRT-RSA implementations are vulnerable to this attack.

To prevent fault model #1, smart cards must address the cause of errors rather than their effects on computation to significantly reduce the adversary's power. Many, but not all, hardware manufacturers of cryptographic devices, such as smart card ICs, are aware of the importance of protecting their chips against intrusion. They use carefully developed logic families, sensors, filters, regulators, etc. We are also investigating possible software countermeasures that use random bits to alter the parameters. Since oracle attacks require testing several identical runs of an algorithm, this will effectively reduce the adversary's power. We will elaborate on this idea and present an enhanced algorithm in a future paper.

# 5. References

[1] R. Anderson and M. Kuhn. Tamper resistance — a cautionary note. In Proceedings of the Second USENIX Workshop on Electronic Commerce, pages 1 – 11, Oakland, California, November 18-21, 1996. USENIX Association.
[2] C. Aumüller, P. Bier, W. Fischer, P. Hofreiter, and J.-P. Seifert. Fault attacks on RSA with CRT: Concrete results and practical countermeasures. In Workshop on Cryptographic Hardware and Embedded Systems 2002 (CHES 2002), Hotel Sofitel, San Francisco Bay (Redwood City), USA, August 13–15, 2002.
[3] F. Bao, H. Deng, R. Y. Jeng, A. D. Narasimhalu, and T. Ngair. Breaking public key cryptosystems on tamper resistant devices in the presence of transient faults. In B. Christianson, B. Crispo, M. Lomas, and M. Roe, editors, Security Protocols, volume 1362 of Lecture Notes in Computer Science, pages 115–124. Springer-Verlag, 1998.
[4] M. Bellare and P. Rogaway. Optimal asymmetric encryption. In Advances in cryptology — EUROCRYPT ’94 (Perugia), Lecture Notes in Computer Science, pages 92–111. Springer, Berlin, 1995.
[5] J. Blömer and A. May. Personal communication, 2002.
[6] J. Blömer and J.-P. Seifert. Fault-based cryptanalysis of the Advanced Encryption Standard (AES). In Seventh International Financial Cryptography Conference (FC 2003) (Gosier, Guadeloupe, FWI January 27-30), 2003.
[7] D. Boneh, R. A. DeMillo, and R. J. Lipton. On the importance of checking cryptographic protocols for faults. In W. Fumy, editor, Advances in Cryptology — EUROCRYPT’97, volume 1233 of Lecture Notes in Computer Science, pages 37–51. Springer-Verlag, 1997.
[8] D. Boneh, R. A. DeMillo, and R. J. Lipton. On the importance of eliminating errors in cryptographic computations. J. Cryptology, 14(2):101–119, 2001.
[9] C. Clavier, J.-S. Coron, and N. Dabbous. Differential power analysis in the presence of hardware countermeasures. In Cryptographic Hardware and Embedded Systems – Proceedings of CHES 2000, Worcester, MA, USA, volume 1965 of Lecture Notes in Computer Science, pages 252–263. Springer-Verlag, 2000.
[10] J.-S. Coron. Resistance against differential power analysis for elliptic curve cryptosystems. In Proceedings of Cryptographic Hardware and Embedded Systems (CHES’99), volume 1717 of Lecture Notes in Computer Science, page 292 ff. Springer-Verlag, 1999.
[11] J.-S. Coron, P. Kocher, and D. Naccache. Statistics and secret leakage. In Proceedings of Financial Cryptography, volume 1962 of Lecture Notes in Computer Science, page 157 ff. Springer-Verlag, 2000.
[12] C. Couvreur and J. Quisquater. Fast decipherment algorithm for RSA public-key cryptosystem. Electronic Letters, 18(21):905–907, 1982.
[13] G. Hardy and J. Littlewood. Some problems of 'Partitio Numerorum' III: On the expression of a number as a sum of primes. In Acta Mathematica, volume 44, pages 1–70, 1922.
[14] M. Joye, J.-J. Quisquater, S.-M. Yen, and M. Yung. Observability analysis: Detecting when improved cryptosystems fail. In B. Preneel, editor, Topics in Cryptology — CT-RSA 2002, volume 2271 of Lecture Notes in Computer Science, pages 17–29, San Jose, CA, USA, February 18–22, 2002. Springer-Verlag.
[15] B. Kaliski, Jr. and M. Robshaw. Comments on some new attacks on cryptographic devices. Bulletin 5, RSA Laboratories, July 1997.
[16] I. Peterson. Chinks in digital armor — exploiting faults to break smart-card cryptosystems. Science News, 151(5):78–79, 1997.
[17] J.-J. Quisquater and D. Samyde. Eddy current for magnetic analysis with active sensor. In Proceedings of Esmart 2002 3rd edition. Nice, France, September 2002.
[18] W. Rankl and W. Effing. Smart Card Handbook. John Wiley & Sons, 2nd edition, 2000.
[19] T. SETI@home project. Current total statistics, June 28th, 2002. http://setiathome.ssl.berkeley.edu/totals.html.
[20] A. Shamir. Method and apparatus for protecting public key schemes from timing and fault attacks, 1999. US Patent No. 5,991,415, Nov. 23, 1999.
[21] S. Skorobogatov and R. Anderson. Optical fault induction attacks. In Workshop on Cryptographic Hardware and Embedded Systems 2002 (CHES 2002), Hotel Sofitel, San Francisco Bay (Redwood City), USA, August 13 - 15, 2002.
[22] S.-M. Yen and M. Joye. Checking before output may not be enough against fault-based cryptanalysis. IEEE Transactions on Computers, 49(9):967–970, September 2000.
[23] S.-M. Yen, S. Kim, S. Lim, and S. Moon. A countermeasure against one physical cryptanalysis may benefit another attack. In K. Kim, editor, Information Security and Cryptology — ICISC 2001, volume 2288 of LNCS, page 414 ff., 4th International Conference Seoul, Korea, December 6-7, 2001. Springer-Verlag, 2001.
[24] S.-M. Yen, S. Kim, S. Lim, and S. Moon. RSA speedup with residue number system immune against hardware fault cryptanalysis. In K. Kim, editor, Information Security and Cryptology — ICISC 2001, volume 2288 of LNCS, page 397 ff., 4th International Conference Seoul, Korea, December 6-7, 2001. Springer-Verlag. (Journal version in IEEE Trans. on Comp., April 2003).

# Appendix

## A. Proving That \( S' = S + E(X) \cdot (S_q - S_p) \) Is Harmless

Assume that an adversary attacks the CRT combination \( S = S_p + X \cdot (S_q - S_p) \mod N t_1 t_2 \) with \( X = p t_1 \cdot ((p t_1)^{-1} \mod q t_2) \). \( X \) is precomputed and stored on the card. A random error induced into \( X \) will result in a faulty value \( S' \) instead of \( S \):

\[ S' = S_p + X \cdot (S_q - S_p) + e(X) \cdot (S_q - S_p) \mod N t_1 t_2 \]
\[ = S + e(X) \cdot (S_q - S_p) \mod N t_1 t_2, \]

with \( e(X) \in [-X, 2^{l(X)} - 1 - X] \). The additional term is the induced error. The countermeasure in Algorithm 2 will fail to detect this fault if the addend is a multiple of both \( t_1 \) and \( t_2 \), i.e., if \( t_1 \cdot t_2 \mid e(X) \cdot (S_q - S_p) \mod N t_1 t_2 \). Since \( t_1 \) and \( t_2 \) are different primes, at least one of the factors must be a multiple of \( t_1 \) and one (possibly the same) a multiple of \( t_2 \).

Considering the security independent of the adversary's choices for \( m \), we first assume that neither \( t_1 \) nor \( t_2 \) divides \( (S_q - S_p) \). As \( e(X) \) is an equally distributed value from a consecutive interval, and \( t_1 \) and \( t_2 \) are independent, the probability for \( t_1 \mid e(X) \) and \( t_2 \mid e(X) \) is at most \( \frac{1}{t_1 \cdot t_2} \).

For the message-dependent question of whether any of the primes \( t_i \) divides \( (S_q - S_p) \), let \( S_q := c \) be fixed (with \( 0 \leq c < q t_2 \)). There are \( p t_1 \) integers in the range \([c - p t_1 + 1, c]\). Of these numbers, only multiples of \( t_1 \) are counted. Hence, there are at most \( \left\lfloor \frac{p t_1}{t_1} \right\rfloor = \left\lfloor p \right\rfloor \) such integers. Therefore, the probability of getting such an integer is \( \leq \frac{p}{p t_1} = \frac{1}{t_1} \). Summing over all possible values of \( c \), we get:

\[ \Pr[(S_q - S_p) = k \cdot t_1] \leq \frac{1}{t_1}. \]

Since the same consideration holds for \( t_2 \), we have a maximum of \( \frac{2}{\min(t_1, t_2)} \) messages where the probability that a random error is not detected is significantly higher than \( \frac{1}{t_1 \cdot t_2} \).

## B. Undetectable Byte Errors

Similar to the analysis in Section 5.1, results for induced byte faults according to the byte error fault models #2 and #3 can be stated. This models an attack on a variable \( x \) as \( f(x) = x + b \cdot 2^k \) with \( |b| \in \mathbb{Z}_{2^8} \), \( 0 \leq k < l(x) - 7 \). All probabilities stated in the following will be over random choices of errors \( e(x) = b \cdot 2^k \) with random \( b \) and \( k \). Here, \( b \) will always denote a random byte value, which can be either positive or negative. The analysis of a byte error attack is completely analogous to the analysis for random errors presented in Section 5. The results of the analysis of byte errors are shown in Table 2. The displayed results are better than the results for random errors as analyzed in Section 5. This is not surprising, since the special structure of the induced error, i.e., \( b < 2^8 \), eliminates some possible attacks, i.e., attacks which require that the greatest common divisor of \( b \) and \( t_i - 1 \) is large, which is impossible for byte errors. On the other hand, the following two cases yield worse results because they cannot be based on Assumption 1:

- **Attack on the stored variable \( p t_1 \)**: If a random byte fault is induced into \( p t_1 \), such that \( p t_1 \) is changed to \( p t_1 + b \cdot 2^k \), an undetectable error requires that \( m d \div (p t_1 + b \cdot 2^k) \equiv 0 \mod t_1 \).
- **Attack on \( \alpha \) or the exponentiation’s intermediate variable**: Any random byte fault induced during the exponentiation that causes an intermediate value \( y \) of Algorithm 3 to be changed into \( y + b \cdot 2^k \) must fulfill the equation \( b \cdot 2^k \equiv -2y \mod t_1 \) in order to induce an undetectable error. For messages \( m \equiv 0 \mod t_1 \), all faults yield an undetectable error.

**Comment**: Both cases described above require the adversary to be able to construct malicious messages in order to be practical. However, the adversary has no information about \( t_1 \), which is needed to construct a malicious message. Therefore, their best choice is to choose random \( m \) for input. In this case, their success probability is negligible.

The two special messages \( m = 0 \) and \( m = 1 \) need to be excluded from the set of possible inputs. Here, the same considerations as in Section 5 apply.

| Fault Attack on | Probability of the Attack |
|-----------------|--------------------------|
| Line 1          | \( \frac{3}{t_1} \)       |
| Line 2          | \( \frac{3}{t_2} \)       |
| Line 3          | \( \frac{1}{t_1 \cdot t_2} \) |
| Lines 4 – 6     | 0 in our fault model      |

Table 2: Summarizing the success probabilities of a fault attack adversary for byte faults

## C. Undetectable Bit Errors

The analysis of bit errors is completely analogous to the analysis in Section 5. Here, the precise bit error fault model #1 is considered, where a variable \( x \) is changed to \( f(x) = x \pm 2^k \) with \( 0 \leq k < l(x) \). The results are exactly the same as in Table 2. Note that similar to the results in Appendix B, attacks on \( p t_1 \) require that \( m d \div (p t_1 \pm 2^k) \equiv 0 \mod t_1 \) and attacks on \( m \) or the exponentiation’s intermediate variable require that \( \pm 2^k \equiv -2y \mod t_1 \) in order to induce undetectable errors. An adversary cannot construct such messages unless they know \( t_i \). As these values are secret, their chance of successfully choosing a random \( m \) that satisfies any of these conditions is negligible. Note that the results in this section only consider Bellcore attacks.