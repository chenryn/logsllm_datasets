title:Sync HotStuff: Simple and Practical Synchronous State Machine Replication
author:Ittai Abraham and
Dahlia Malkhi and
Kartik Nayak and
Ling Ren and
Maofan Yin
Sync HotStuff: Simple and Practical
Synchronous State Machine Replication
Ittai Abraham1, Dahlia Malkhi2∗, Kartik Nayak3∗, Ling Ren4∗and Maofan Yin5∗
1VMware Research PI:EMAIL
2Calibra PI:EMAIL
4University of Illinois at Urbana-Champaign PI:EMAIL
5Cornell University PI:EMAIL
3Duke University
PI:EMAIL
Abstract—Synchronous solutions for Byzantine Fault Tolerance
(BFT) can tolerate up to minority faults. In this work, we present
Sync HotStuff, a surprisingly simple and intuitive synchronous
BFT solution that achieves consensus with a latency of 2∆ in
the steady state (where ∆ is a synchronous message delay upper
bound). In addition, Sync HotStuff ensures safety in a weaker
synchronous model in which the synchrony assumption does not
have to hold for all replicas all the time. Moreover, Sync HotStuff
has optimistic responsiveness, i.e., it advances at network speed
when less than one-quarter of the replicas are not responding.
Borrowing from practical partially synchronous BFT solutions,
Sync HotStuff has a two-phase leader-based structure, and has
been fully prototyped under the standard synchrony assumption.
When tolerating a single fault, Sync HotStuff achieves a through-
put of over 280 Kops/sec under typical network performance,
which is comparable to the best known partially synchronous
solution.
I. INTRODUCTION
Byzantine Fault Tolerance (BFT) protocols relying on a
synchrony assumption have the advantage of tolerating up to
one-half Byzantine faults [1], while asynchronous or partially
synchronous protocols tolerate only one-third [2]. On the ﬂip
side, synchronous protocols are often considered impractical
for three main reasons. First, existing synchronous protocols
require a large number of rounds. Second, most synchronous
protocols require lock-step execution (i.e., replicas must start
and end each round at the same time), making them hard
to implement and further exacerbating the latency problem.
Third, an adversary may attack the network to violate the
synchrony assumption, causing the protocol to be unsafe.
In this work, we introduce Sync HotStuff, a synchronous
BFT state machine replication (SMR) protocol that addresses
the above concerns with a surprisingly simple and intuitive
solution (see Figure 1). In Sync HotStuff, in the standard
synchrony model, a leader broadcasts a proposal; the replicas
echo it; and each replica can commit after waiting for the
maximum round-trip delay unless it hears by that time an
equivocating proposal signed by the leader. (If the leader does
not propose, replicas time out and perform a leader change;
details on this step are given in the body of the paper.)
Simple yet powerful, Sync HotStuff achieves the following
desirable properties. First, as in most synchronous solutions,
∗Part of the work was done while the authors were at VMware Research.
Sync HotStuff tolerates up to one-half Byzantine replicas.
Second, inspired by Hanke et al. [3], Sync HotStuff does
not require lock-step execution in the steady state. Third,
with minor modiﬁcations, Sync HotStuff can handle a weaker
and more realistic synchrony model suggested by Chan et
al. [4]. Finally, Sync HotStuff is prototyped and shown to offer
practical performance. It achieves a throughput comparable
to partially synchronous protocols and the commit latency is
roughly a single maximum round-trip delay. Given the above
properties, we believe Sync HotStuff can be the protocol
of choice for single-datacenter replicated services as well as
consortium blockchain applications.
We proceed to elaborate on the key techniques and key
results of Sync HotStuff, which removes performance barriers
on synchronous BFT under weaker assumptions.
Near-optimal latency. The ﬁrst key contribution is the afore-
mentioned extremely simple steady state protocol (Figure 1).
We observe that waiting for a single maximum round-trip de-
lay sufﬁces for replicas to commit. Furthermore, our protocol
does not have to be executed in a lock-step fashion, despite
relying on synchrony. In other words, other than the concurrent
waiting step, replicas move to the next step upon receiving
enough messages of the previous step, without waiting for
the conservative synchrony delay bound. This gives a latency
of 2∆ + O(δ) in steady state where ∆ denotes the known
bound assumed on maximal network transmission delay and δ
denotes the actual network delay, which can be much smaller
than ∆.
Assuming δ (cid:28) ∆, the above latency is within a factor of
two of the optimal latency that can be obtained by synchronous
protocols: we give a minor adaptation to the proof of Dwork
et al. [2] to show that a ∆ latency is necessary for any
protocol tolerating more than one-third Byzantine faults. The
∆ latency lower bound should not be surprising because a
protocol that commits faster than ∆, in a way, does not take
advantage of synchrony and is thus subject to the one-third
partial synchrony barrier. In fact, we conjecture a stronger
latency lower bound of 2∆. Our intuition is that replicas can
be out-of-sync by ∆, so one ∆ is needed for lagging replicas to
catch up and another ∆ is needed for messages to be delivered
(the current lower bound proof only captures the latter ∆).
1
Moreover, though O(δ) latency is impossible to guarantee
under more than one-third faults, it can be achieved opti-
mistically. The Thunderella protocol [5] achieves O(δ) latency
when the leader is honest and more than three-quarter of the
replicas are responding. We show that our protocol can be
adapted to incorporate this idea.
Practical throughput. The key technique to improve through-
put is to move the synchronous waiting steps off the critical
path. The only step in steady state that requires waiting for
a conservative O(∆) time is to check for a leader equivo-
cation before committing and it is made concurrent to main
logic. Thus, replicas start working on the next block without
waiting for the previous blocks to be committed. (The non-
blocking commit also reduces latency, since a block can
now be proposed before the previous block is committed.)
The other synchronous waiting steps are in the view-change
protocol, which occurs infrequently. Therefore, in the steady
state, replicas are always sending protocol messages and
utilizing the entire network capacity, thus behaving exactly
like partially synchronous protocols. Our experiments validate
that Sync HotStuff achieves throughput comparable to partially
synchronous protocols. In fact, since a synchronous solution
tolerates more corruption (half vs. one-third), it requires fewer
replicas to be deployed to tolerate a given number of faults. In
our experiments, we observe that in some cases, Sync HotStuff
can even slightly outperform partially synchronous solutions
in throughput.
Safety despite some sluggish honest replicas. Synchronous
protocols proven secure under the standard synchrony as-
sumption fail to provide safety if a single message between
honest replicas is delayed. Recently, Guo et al. [6] proposed a
“weak synchrony” model that allows the message delay bound
∆, at any point in time, to be violated for a set of honest
replicas. We call these replicas sluggish. We call the remaining
honest replicas prompt and messages of prompt replicas can
reach each other within ∆ time. To reﬂect reality and be
more conservative, the model allows sluggish replicas to be
arbitrarily mobile, i.e., an adversary decides which replicas are
sluggish at any time. Messages sent by or sent to a sluggish
replica may take an arbitrarily long time until the replica is
prompt again. Since “weak synchrony” has been used in the
literature to describe other models (e.g., [7], [8], [9]), we will
refer to this model as the mobile sluggish model in this paper.
We call the synchrony model without mobile sluggish faults
standard synchrony.
With standard synchrony, if a replica sends a message to
another replica, it is guaranteed to arrive within ∆ time. Our
protocol and proofs crucially use this fact to achieve safety.
With a mobile sluggish fault model, on the other hand, the
delivery is not guaranteed if the sender or the receiver is
sluggish. In that sense,
the guarantee for a single replica
sending or receiving a message is similar to that of partially
synchronous network model. The central observation enabling
us to tackle mobile sluggish faults is the following: assuming a
minority of the replicas are sluggish or Byzantine at any point
in time, if a replica receives a message from a majority of
replicas, at least one of the senders must be prompt and honest.
We use this observation atop Sync-HotStuff-under-standard-
synchrony to obtain a protocol in the mobile sluggish model.
The resulting protocol ensure safety as long as the number of
sluggish plus Byzantine faults combined is less than one-half;
in other words, at any time, a majority of replicas must be
honest and prompt, which has been shown to be a necessary
condition [6] in the mobile sluggish model.
Organization. In the remainder of this section, we deﬁne state
machine replication. In Section II, we describe Sync HotStuff
in the standard synchrony model without sluggish faults. Sec-
tion III augments this protocol to tolerate sluggish faults. Sec-
tion IV adds an optimistically responsive mode to Sync Hot-
Stuff with sluggish faults. Section V presents the results based
on our implementation and evaluation. Section VI compares
with closely related works.
A. Deﬁnitions and Model
State Machine Replication (SMR). A state machine repli-
cation protocol is used for building a fault-tolerant service
to process client requests. The service consists of n replicas,
up to f of which may be faulty. The service commits client
requests into a linearizable log and produces a consistent view
of the log akin to a single non-faulty server. More formally, a
state machine replication service provides the following two
guarantees:
(safety) non-faulty replicas do not commit different val-
ues at the same log position,
(liveness) each client request is eventually committed by
all non-faulty replicas.
We assume that the network consists of pairwise, authenti-
cated communication channels between replicas. We assume
digital signatures and a public-key infrastructure (PKI), and
use (cid:104)x(cid:105)p to denote a message x signed by replica p. (It is
sufﬁcient to sign the hash digest of a message for efﬁciency.)
Wherever it is clear from context, we omit the subscript p. We
also assume that there is no drift between the clocks used by
the replicas, i.e., the clocks run at the same rate. Our protocol
is secure under a sluggish mobile adversary. However, for
ease of exposition we ﬁrst explain the protocol in the standard
synchrony model. We describe these models in the respective
sections.
II. SYNC HOTSTUFF UNDER STANDARD SYNCHRONY
We ﬁrst present Sync HotStuff in the standard synchrony
model (without mobile sluggish faults). Here, the synchrony
assumption states that a message sent at
time t by any
replica arrives at another replica by time t + ∆ where ∆ is
a known maximum network delay. We use δ to denote the
actual message delay in the network. We show a protocol
that tolerates minority Byzantine replicas, i.e., n = 2f + 1.
We reiterate that although the protocol assumes synchrony,
replicas do not progress in lock-steps.
Sync HotStuff takes the Paxos/PBFT’s approach of having
a stable leader in a steady state. Each period of steady state
is called a view, numbered by integers. The leader of view v
can simply be replica (v mod n), i.e., leaders are scheduled
in a round-robin order. The leader is expected to keep making
progress by committing client requests at increasing heights.
If replicas detect Byzantine behavior by the leader or lack of
progress in a view, they blame the leader and engage in a view-
change protocol to replace the leader. Figures 1 and 2 describe
the steady state and view-change protocols, respectively.
Blocks and block format. As commonly done in SMR, client
requests are batched into blocks. The protocol forms a chain
of blocks. We refer to a block’s position in the chain as its
height. A block Bk at height k has the following format
Bk := (bk, H(Bk−1))
where bk denotes a proposed value at height k and H(Bk−1)
is a hash digest of the predecessor block. The ﬁrst block B1 =
(b1,⊥) has no predecessor. Every subsequent block Bk must
specify a predecessor block Bk−1 by including a hash of it.
A block is valid if (i) its predecessor is valid or ⊥, and (ii) its
proposed value meets application-level validity conditions and
is consistent with its chain of ancestors (e.g., does not double
spend a transaction in one of its ancestor blocks).
Block extension and equivocation. If a block Bk is an
ancestor of another B(cid:96) ((cid:96) ≥ k), we say B(cid:96) extends Bk. Note
that a block extends itself. We say two blocks B(cid:96) and B(cid:48)
(cid:96)(cid:48)
equivocate each other if they do not extend one another.
Certiﬁed and locked blocks. A key ingredient of BFT
solutions is a quorum certiﬁcate, a set of signed votes on
a block from a quorum of replicas in the same view. In
Sync HotStuff, a quorum consists of f + 1 replicas (out of