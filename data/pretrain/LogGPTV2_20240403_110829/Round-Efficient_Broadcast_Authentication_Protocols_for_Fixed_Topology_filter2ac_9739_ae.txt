query the challenger to execute the authentication protocol
for some adaptively chosen M1, . . . , Mq. (3) The adversary
constructs a forged data-message M (cid:2) (cid:10)= Mi for all i, . . . , q,
and sends a (polynomially bounded) series of messages to
some receivers not in C. The adversary wins if any of
these uncompromised receivers accept M (cid:2)
because of these
messages. We say the protocol is -secure if the probability
of any adversary winning is at most .
The construction of a MMAC from a broadcast protocol
is based on ﬁnding a set of nodes that do not interact directly
or indirectly in the protocol. More formally:
Deﬁnition 1. For a given sequence of messages in a
protocol, Node A is an upstream node of node B if A could
have sent any information to Node B in the protocol. Let B
be a downstream node of node A iff node A is upstream of
B.
More precisely, A is upstream of B if there exists a
sequence of nodes X1, . . . , Xk and messages m1, . . . , mk
in successive (not necessarily consecutive) rounds that start
with A and end with B (e.g., A → X1 : m1, X1 → X2 : m2,
. . ., Xk → B : mk in successive rounds).
Lemma 1. Let P be a broadcast authentication protocol
that is -secure against arbitrary coalitions of receivers that
has congestion at most c(n) bits. Let S be a subset of m
receivers in the protocol P such that no two members of
S are upstream (or downstream) of each other. Then there
exists an MMAC for m receivers with tag length no more
than c(n) bits that is also -secure.
268
Proof: We can construct a MMAC for
receivers
s1, . . . , sm in S by deﬁning the three subroutines KEY-
GEN,MAC-GEN and MAC-VER in terms of the broadcast
authentication protocol P . Let KEY-GEN be deﬁned as
follows: for each receiver si in S, let rki be the receiver key
of si in P ; let the information sk known to the sender be all
the information known by all principals in the broadcast pro-
tocol. This allows the sender to fully simulate the execution
of any run of the protocol; in particular it can predict a-priori
the set of messages it will send in any run of the protocol
for a given message M . Hence, let the tag T generated by
MAC-GEN(M, sk) be the ordered set of all messages sent by
the sender for a given broadcast of message M . We deﬁne
MAC-VER(M, T, rki) such that it simulates the operation of
P to the point of veriﬁcation by receiver si. Let RS be the
set of all nodes that are upstream of any node in S. By
deﬁnition of S, RS ∩ S = ∅. Encode (publicly) inside MAC-
VER all the protocol information associated with the nodes
in RS (including their receiver keys). By deﬁnition of RS,
this information allows any MMAC receiver si to accurately
simulate the entire broadcast protocol from the point of view
of node si in the broadcast protocol; in other words, all
messages sent and received by node si
in the broadcast
protocol can be generated from this information by MMAC
receiver si. We can thus deﬁne MAC-VER(M, T, rki) to
return ‘accept’ if si accepts the payload M in the simulation
of the protocol P where the sender sends the messages
encoded in T , and ’reject’ if si does not accept M .
Since the protocol P has at most c(n) bits of congestion,
the tag T is no more than c(n) bits since it consists of all
messages from a single node (the sender). It remains to show
that the MMAC construction is at least as secure as P .
Let adversary A be an adversary for the MMAC game
that wins with probability . We deﬁne Adversary B for
attacking the broadcast authentication protocol that runs A
as a subroutine. Adversary B ﬁrst compromises RS, the set
of all nodes upstream of S. From this, B constructs the
KEY-GEN,MAC-GEN and MAC-VER for the MMAC, which
is fed to A. Now A adaptively selects some set SA for
compromise; these nodes are also adaptively compromised
by B in the broadcast authentication protocol. By deﬁnition
of S, RS ∩ S = ∅, so the set S− SA remain uncompromised
and T (cid:2)
for both adversaries. During the chosen message attack
phase, queries of A are forwarded to B’s challenger, and
the corresponding MMACs are reconstructed by inspection
of the sender’s messages for Mi. Now when attacker A
produces M (cid:2)
, since Adversary B has compromised
all receivers upstream of S, it can use this information as a
script to (interactively and independently) simulate the pro-
tocol P to each member of S. Since MAC-VER(M (cid:2), T (cid:2), rki)
succeeds with at least  probability for some receiver in
S − SA, by construction, the chance of Adversary B suc-
cessfully causing a receiver in S − SA to accept the forged
broadcast message M (cid:2)
is also .
Lemma 2. In any broadcast authentication protocol, for any
topology, at least n/2 nodes start executing the protocol only
after (cid:7)log n(cid:8) rounds.
Proof: The doubling broadcast of Sec. VI-A) is the
fastest rate at which information can spread in the network.
At round (cid:7)log n(cid:8) − 1, no more than 2(cid:4)log n(cid:5)−1 ≤ n/2
remaining nodes must start the protocol after (cid:7)log n(cid:8) rounds.
nodes have received their ﬁrst message of the protocol; the
Lemma 3. Let G be a network topology and L ⊆ V be a
subset of the nodes in G. Let U (v, t) be an upper bound
on the number of nodes in L that can receive information
from a node v ∈ L within t rounds. Then U (v, t) is also
an upper bound on the number of nodes in L that can send
information to v within t rounds in the topology.
Proof: Any schedule for disseminating information
from v can be converted to a schedule for converge-casting
information to v by reversing the schedule chronologically
and reversing the direction of all communications. Hence, in
a ﬁxed topology, the maximum possible number of upstream
and downstream nodes from a given node v are the same.
Lemma 4. If a broadcast authentication protocol takes no
more than (2 − ρ)(cid:7)log n(cid:8) rounds, then there exists a set S
of at least 1
4
downstream of each other.
receivers that are not mutually upstream or
nρ
Proof: Let L be the set of receivers which started the
protocol after round (cid:7)log n(cid:8). By Lemma 2, |L| ≥ n/2.
The nodes in L only have (1 − ρ)(cid:7)log n(cid:8) rounds remaining
in which to exchange information. By the doubling broad-
cast of Section VI-A, any node in L can reach at most
2(1−ρ) log n ≤ n1−ρ
other members of L within that time;
by Lemma 3, likewise less than n1−ρ
of the other nodes in
L can be upstream nodes of li. Hence, we can construct S
as follows: starting with empty S, select any node li in L;
remove it from L and add it to S; also remove all nodes in L
that are upstream or downstream of li. After each selection,
the size of L decreases by less than 2n1−ρ
nodes. Hence,
nρ
we can perform such a selection at least 1
2
times. The resultant S has at least 1
4
are neither upstream nor downstream of each other.
n/2n1−ρ = 1
4
nρ
nodes each of which
Theorem 1. Any deterministic -secure broadcast protocol
taking at most (2 − ρ)(cid:7)log n(cid:8) rounds either implies an
( + 1/2m)-secure signature mechanism or requires at least
nρ − m bits of congestion where m is a constant security
1
4
parameter (e.g., 128).
Proof: By Lemmas 4 and 1, any deterministic broadcast
taking at most (2 − ρ)(cid:7)log n(cid:8) rounds implies
protocol
an equivalently-secure MMAC for 1
receivers with tag
4
length equal to the congestion at the sender. Boneh, Durfee
nρ
and Franklin [18] showed that an -secure MMAC for r
receivers with tag length no more than r − m bits implies
an (+1/2m)-secure signature scheme. Hence, the broadcast
protocol either involves the use of a ( + 1/2m)-secure
nρ − m bits
signature primitive, or it must incur at least 1
4
of congestion at the sender.
More signiﬁcantly,
this implies that no deterministic
broadcast protocol can take asymptotically less than 2 log n
rounds while achieving congestion complexity polylogarith-
mic in n. This means that the hash tree based algorithm of
Section VI-B achieving 2 log n + 1 rounds is asymptotically
optimal for protocols with polylog congestion complexity; in
other words the existence of the algorithm of Section VI-B
shows that bound we have proved is tight for polylog-
congestion algorithms under the full-duplex communication
model. As noted earlier in the beginning of SectionVI, this
lower bound holds for all topologies. Since the algorithm of
Section VI-B relies on a two-way exchange of information
in each round, whether this bound is tight for the half-
duplex communication model (where all communications
are strictly one-way in each round) remains an open ques-
tion.
VII. EXTENDING THE LOWER BOUND TO TREE
TOPOLOGIES
the rate of 2t
The method of proving the round complexity lower bound
of 2 log n for arbitrary topologies can be extended to trees.
The proof for trees follows the same structure as the
proof for fully connected topologies (Section VI-C); while
in fully-connected
information spreads at
topologies, we can show that it spreads at a slower rate
between leaf nodes in trees and hence the round complexity
lower bound is higher. Speciﬁcally, we prove the following
lemma:
Lemma 5. Let v be a vertex at the greatest depth in an
arbitrary tree topology with a designated root r. The number
√
of nodes that can be reached from v within t rounds is no
5, where φ is the golden ratio (≈ 1.618).
more than φt+3/
Proof: We consider the set of all nodes reachable from
each node at each depth from u to the root. We deﬁne a
term T (t, h) as the size of the h height-bounded maximum
dissemination tree (see Section VI-A, Figure 6) of t rounds.
This can be deﬁned as the maximum size of the set of nodes
reached from a single node v0 given t rounds such that no
node is more than h hops away from v0. This can be obtained
from the maximum dissemination tree T (t) by truncating off
all levels with depth greater than h.
We observe that T (t, h) = T (t − 1, h) + T (t − 1, h − 1).
This follows from the observation that in the ﬁrst round,
the original node v0 can send to at most one other node
v1; in the remaining t − 1 rounds, each of these two nodes
then continue disseminating into their respective subtrees,
except that the height bound of the maximum dissemination
269
√
hence F (t)  1.44 log n − 1.33. Hence, in
t = logφ n + (logφ
the remaining (1.44 − ρ) log n − 1.33 rounds, u can reach
√
at most φ(1.44−ρ) log n+1.67/
total members
of L (including u itself); by Lemma 3, likewise less than
n1−0.694ρ
of the other nodes in L can be upstream nodes of
li. Hence, we can construct S as follows: starting with empty
S, select a node li that is at the greatest depth in the tree of
all the nodes in L; remove it from L and add it to S; also
remove all nodes in L that are upstream or downstream of li.
Repeat until L is empty. After each selection, the size of L
decreases by no more than 2n1−0.694ρ
nodes. Hence, we can
n0.694ρ
perform such a selection at least 1
2
times. The resultant S has at least 1
nodes each of
4
which are neither upstream nor downstream of each other.
n/2n1−0.694ρ = 1
4
5 ≤ n1−0.694ρ
n0.694ρ
Theorem 2. Any deterministic -secure broadcast protocol
on a tree topology taking at most (2.44 − ρ) log n − 2.33
rounds either implies an ( + 1/2m)-secure signature mech-
n0.694ρ − m bits of congestion
anism or requires at least 1
4
where m is a constant security parameter (e.g., 128).
Proof: Identical to the proof of Theorem 1, except using
Lemma 6 instead of Lemma 4.
Theorem 2 implies that any protocol with at most (2.44−
ρ) log n−2.33 rounds on a tree topology must involve either
a signature scheme or congestion polynomial in n. In partic-
ular this rules out the possibility of strictly 2-pass schemes
on max-dissemination trees with polylog congestion, since
such a scheme would take only 2 log n rounds. From the
discussion at the beginning of Section VI-B, we note that a
3-pass broadcast authentication protocol takes only 3 log n
rounds on maximum dissemination trees; we conjecture that
the small gap factor between 2.44 and 3 seems to indicate
that the current 3-pass schemes are likely round complexity-
optimal for such trees, i.e., the true lower bound over all trees
is possibly 3 log n.
Figure 8. Reachable nodes
Figure 9. Structure of T (t, h)
tree rooted at v1 is one less than the original height bound h.