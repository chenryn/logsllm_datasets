problem. Attack countermeasure tree (ACT) [7] provides
a simple yet compact approach for security analysis, har-
nessing the beneÔ¨Åts of the aforementioned models and
allowing us to perform optimal countermeasure selection
for different attack scenarios under given constraints with
a non-state-space approach using reduction technique and
implicit enumeration (branch and bound). We compare the
efÔ¨Åciency of our algorithms with the approach in [6] as well
as the ART-based method [8].
VII. DISCUSSION
In this section, we Ô¨Årst describe the utility of our proposed
approach in large ACTs. Then we discuss a comparative
study of efÔ¨Åciency of ACT over other attack tree models
via simulation results.
Optimal countermeasure selection in large ACTs. To
design large ACTs, we use an approach similar to the one
used in [27]. We build the ACT for a simple network with a
router and Ô¨Årewall with one or more attacker hosts outside
the Ô¨Årewall, two or more target hosts inside the Ô¨Årewall.
A certain number of vulnerabilities are associated with each
host. To design larger ACTs, we keep increasing the number
of hosts and no. of vulnerabilities per host in this benchmark
network. The method we use for ACT generation was dis-
cussed later. In ACTs with thousands of nodes, partial cover
with intent is convenient for protecting the system against
only the critical attack scenarios (i.e., the attack events in
CVS). Using objective function F1 in large ACTs, we Ô¨Ånd
that the majority of countermeasures in the corresponding
optimal countermeasure set are placed at higher levels of
the ACT. This is because a countermeasure at a higher level
of the ACT can cover a larger subtree than one at a lower
level and F1 aims to minimize the number of countermea-
sures used. Security investment cost for a countermeasure
increases as we move up the ACT (as countermeasures tend
to get more sophisticated at higher levels/advance stages of
attack). Hence with objective function F3, F4 and in some
special cases F2 in large ACTs, the optimal countermeasure
sets are dominated by countermeasures at lower levels of the
ACT. The use of branch and bound algorithm is also a good
Ô¨Åt for large ACTs. From Figure 8, we see that recursion tree
size for explicit enumeration is 2ùëõ where ùëõ is the number of
countermeasures in ACT. However owing to our bounding
strategies, we Ô¨Ånd the size of our branch and bound recursion
tree to be polynomial (n2) in the number of countermea-
sures (n) in the average case and linear in the best case.
Attack actions that occur sequentially (for e.g., Sybil attack
where masquerading attacker sends out fake response to
route request messages that results in spreading of incorrect
neighborhood information) are best represented by Markov
chains. To incorporate such sequential attack actions in large
ACTs, an ACT is transformed into a hierarchical model with
lower level Markov chains that represent attack progression.
These low-level Markov chains are characterized by safe
states and unsafe states. Probability of being in one or more
unsafe states is passed to the high-level ACT (as probability
of attack success for that node). Countermeasure actions can
also be incorporated into the state transition model of the
Markov chain. Algorithm 3 for objective functions F3 and
F4 can still be used to solve for optimal countermeasure
sets of hierarchical ACT. The presence of the lower-level
Markov chain is factored in only during the computation of
the objective function value for a certain partial solution.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:10 UTC from IEEE Xplore.  Restrictions apply. 
Comparison with ART-based optimization [8] via
trace-driven simulation. We use a network model with 2
attacker hosts, 7 target hosts and a set of 12 vulnerabilities
on each host. The resultant ACT has 3078 nodes whereas
the resulting ART has 2859 nodes (detection techniques
are not
included in ART structure and hence ART has
lesser no. of nodes). We preprocess a slice of the trafÔ¨Åc
trace from the MIT Lincoln Lab tcpdump dataset [28]
to simulate our network data trafÔ¨Åc. A simpliÔ¨Åed version
of the MDP (Markov Decision Process) and ART-based
RRE engine (presented in [8]) with objective function F3
returns an optimal countermeasure set within 3 minutes ¬± 7
sec whereas our ACT-based branch-and-bound method with
objective function F3 does the same in 17 seconds ¬± 2 sec.
The simulation is run on the same system described earlier
in Section V. Simulation results return the same optimal
solution for our approach and ART-based optimization using
objective functions F3 and F4. Our comparison with RRE
[8] here is limited to the efÔ¨Åciency of the optimal response
action selection step. RRE with its local and global decision
making engines performs online recovery of a system under
attack. In future work, we will compare the efÔ¨Åciency of
online recovery with RRE to our approach. Among other
methods for selecting optimal security actions using ATs
[6], attack response trees [8],
intrusion graphs [26] and
attack graphs [18], our approach is the Ô¨Årst to cast the
optimization problem into an integer programming problem
(as opposed to linear programming problem in existing
strategies). Existing strategies [6] use probability of attack,
security cost or impact as control variables for their ob-
jective functions. In contrast, the control variables in our
objective functions are boolean variables (xùëó) that represent
the inclusion or exclusion of a countermeasure (CMùëó) in
the optimal countermeasure set (ùí™ùí´ùíØ ), hence making the
problem simpler to understand and easier to solve.
Automated generation of ACT. Early work on attack
graph (AG) generation applied symbolic model checking
[29] on the system‚Äôs Ô¨Ånite state machine (FSM) model
and extended the approach for AT generation. However the
worst case size of an FSM model being exponential in
the number of bits in its state representation leads to state
space explosion problem. Hence, we extend Ammann et.al.‚Äôs
approach [27] by using a series-parallel graph model [30]
called exploit graph (EG) (which is a non-state-space model)
for our automated ACT generation. Any atomic attack is
characterized by a set of preconditions and postconditions
and the vulnerability exploit used to execute the attack step.
Bypassing countermeasures speciÔ¨Åc to a certain attack also
feature among preconditions of that attack. These precon-
ditions and post-conditions can be viewed as nodes in the
exploit graph structure. An edge (representing the exploit
step) connects each precondition node to its corresponding
postcondition node. If a set of preconditions all need to be
true for the exploit to be successful, the resulting subgraph
is of AND type. If the exploit succeeds when any one of the
preconditions is true, then the resulting subgraph is of OR
type. In this way, one can build an exploit graph for every
system. Any system‚Äôs exploit graph is a forest of ACTs.
Given a set of preconditions and a speciÔ¨Åc attack goal,
we generate the ACT for that attack goal by pruning the
system‚Äôs exploit graph. In future work, we look to improve
our ACT generation by extending the attack graph generation
method proposed by Ingols et.al. [31] that uses enhanced
host-to-host reachability computation and modeling of zero-
day exploits while taking into account multi-stage, multi-
host attacks as in MulVal [32].
VIII. CONCLUSIONS
In this paper, we began with brief introduction to attack
countermeasure trees (ACT), an analytic model that allows
one to comprehensively perform qualitative and probabilistic
analysis of the security of a system. ACT takes into account
attacks as well as countermeasures (in the form of detection
mechanisms and mitigation techniques). Detections and mit-
igations can be placed not just at leaf nodes but also at any
intermediate nodes of ACT. We use ACT to perform fast
and efÔ¨Åcient computation of optimal set of countermeasures
for systems based on a non-state space model thus avoiding
the state-space explosion problem [8]. We study several
objective functions (some linear, some non-linear) with goals
such as minimizing security investment cost in the ACT
and maximizing the beneÔ¨Åt from implementing a certain
countermeasure set in the ACT under different constraints.
Our approach is to Ô¨Årst cast the optimization problem into
an integer programming problem as opposed to linear pro-
gramming problem in existing strategies. Using a non-state-
space model allows us to explore objective functions such
as minimizing the number of countermeasures used in ACT
that do not need probability assignments. We showed greedy
strategies and implicit enumeration techniques (branch and
bound) to compute optimal countermeasure sets and we
discuss several case studies that illustrate the corresponding
algorithms. We also compare the efÔ¨Åciency of our algorithms
with explicit enumeration strategy, genetic algorithms [6]
and MDP-based approach using attack response trees [8].
ACKNOWLEDGMENT
This research was supported by US National Science
Foundation grant NSF-CNS-08-31325. The authors would
like to thank Prof. Paulo Maciel and Prof. Dijiang Huang for
their invaluable comments during structuring of the paper.
REFERENCES
[1] B. Schneier, Secrets and Lies: Digital Security in a Networked World.
John Wiley and Sons Inc., 2000.
[2] X. Ou, S. Govindavajhala, and A. Appel, ‚ÄúMulVAL: A Logic-based
Network Security Analyzer,‚Äù in Proc. Usenix Security, 2005, pp. 113‚Äì
128.
[3] K. S. Trivedi, D. S. Kim, A. Roy, and D. Medhi, ‚ÄúDependability and
security models,‚Äù in Proc. DRCN.
IEEE, 2009, pp. 11‚Äì20.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:10 UTC from IEEE Xplore.  Restrictions apply. 
[4] W. Sonnenreich, J. Albanese, and B. Stout, ‚ÄúReturn On Security
Investment (ROSI): A Practical Quantitative Model,‚Äù J. of Research
and Practice in Information Technology, vol. 38, no. 1, pp. 45‚Äì56,
2006.
[5] I. Ray and N. Poolsapassit, ‚ÄúUsing Attack Trees to Identify Malicious
Attacks from Authorized Insiders,‚Äù in Proc. ESORICS, 2005, pp. 231‚Äì
246.
[6] R. Dewri, N. Poolsappasit, I. Ray, and D. Whitley, ‚ÄúOptimal security
hardening using multi-objective optimization on attack tree models of
networks,‚Äù in Proc. CCS. ACM, 2007, pp. 204‚Äì213.
[7] A. Roy, D. S. Kim, and K. S. Trivedi, ‚ÄúACT: Towards unifying the
constructs of attack and defense trees,‚Äù J. of Security and Communica-
tion Networks, vol. Special Issue on defending against insider threats
and data leakage, 2011.
[8] S. A. Zonouz, H. Khurana, W. H. Sanders, and T. M. Yardley, ‚ÄúRRE:
A Game-Theoretic Intrusion Response and Recovery Engine,‚Äù in Proc.
DSN.
IEEE, 2009, pp. 439‚Äì448.
[9] Z. Duan, X. Yuan, and J. Chandrasekhar, ‚ÄúConstructing Inter-Domain
Packet Filters to Control IP SpooÔ¨Ång Based on BGP Updates ,‚Äù in
Proc. INFOCOM, 2006, pp. 1‚Äì12.
[10] A. Mizrak, S. Savage, and K. Marzullo, ‚ÄúDetecting compromised
routers via packet forwarding behavior,‚Äù IEEE Networks, vol. 22,
no. 2, pp. 34‚Äì39, 2008.
[11] S. Convery, D. Cook, and M. Franz, ‚ÄúAn Attack Tree for the Border
Gateway Protocol,‚Äù Cisco Internet draft 2002.
[12] R. Kuhn, K. Sriram, and D. Montgomery, ‚ÄúBorder gateway protocol
security: Recommendations of the national institute of standards and
technology,‚Äù NIST Special Publication 800-54, 2007.
[13] K. S. Trivedi and R. Sahner, ‚ÄúSharpe at the age of twenty two,‚Äù ACM
SIGMETRICS Perf. Eval. Review, vol. 36, no. 4, pp. 52‚Äì57, 2009.
[14] L. Watters, ‚ÄúReduction of integer polynomial programming problems
to zero-one linear programming problems,‚Äù Operations Research,
vol. 15, no. 6, pp. 1171‚Äì1174, 1967.
[15] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, Introduction
to Algorithms. MIT press, 2001.
[16] E. L. McCluskey, ‚ÄúMinimization of Boolean functions,‚Äù Bell Systems
Technology Journal, vol. 35, pp. 1417‚Äì1444, 1959.
[17] A. Roy, D. Kim, and K. Trivedi, ‚ÄúCyber Security analysis using Attack
Countermeasure Trees,‚Äù in Proc. CSIIRW. ACM, 2010, pp. 28‚Äì31.
[18] S. Noel and S. Jajodia, ‚ÄúOptimal ids sensor placement and alert priori-
tization using attack graphs,‚Äù J. of Network and Systems Management,
vol. 16, no. 3, pp. 259‚Äì275, 2008.
[19] F. Hillier and G. Lieberman, Introduction to operations research.
McGraw-Hill New York, 1990.
[20] D. M. Nicol, W. H. Sanders, and K. S. Trivedi, ‚ÄúModel-based eval-
uation: From dependability to security,‚Äù IEEE Trans. on Dependable
and Secure Computing, vol. 1, no. 1, pp. 48‚Äì65, 2004.
[21] http://www.isi.deterlab.net/.
[22] A. Sharma, Z. Kalbarczyk, J. Barlow, and R. Iyer, ‚ÄúAnalysis of
security data from a large computing organization,‚Äù in Proc. DSN.
IEEE, 2011, pp. 506‚Äì517.
[23] E. Alata, V. Nicomette, M. Ka√¢niche, M. Dacier, and M. Herrb,
‚ÄúLessons learned from the deployment of a high-interaction honey-
pot,‚Äù in Proc. EDCC.
IEEE, 2006, pp. 39‚Äì44.
[24] L. Pi√®tre-Cambac√©d√®s and M. Bouissou, ‚ÄúAttack and defense dynamic
modeling with BDMP,‚Äù in Proc. MMM-ACNS, 2010, pp. 86‚Äì101.
[25] S. Bistarelli, M. D. Aglio, and P. Peretti, ‚ÄúStrategic Games on Defense
Trees,‚Äù LNCS, vol. 4691, pp. 1‚Äì15, 2007.
[26] B. Foo, Y. S. Wu, Y. C. Mao, S. Bagchi, and E. Spafford, ‚ÄúADEPTS:
Adaptive Intrusion Response Using Attack Graphs in an E-Commerce
Environment,‚Äù in Proc. DSN.
IEEE, 2005, pp. 508‚Äì517.
[27] P. Ammann, D. Wijesekara, and S. Kaushik, ‚ÄúScalable Graph based
Network Vulnerability Analysis,‚Äù in Proc. IEEE S & P, 2002, pp.
217‚Äì224.
[28] http://www.ll.mit.edu/mission/communications/ist/corpora/ideval/data/
1999data.html.
[29] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. Wing, ‚ÄúAutomated
generation and analysis of attack graphs,‚Äù in Proc. IEEE S & P, 2002,
pp. 273‚Äì284.
[30] R. Sahner and K. S. Trivedi, ‚ÄúPerformance and Reliability Analysis
using Directed Acyclic Graphs,‚Äù IEEE Transactions on Software
Engineering, vol. 13, no. 10, pp. 1105‚Äì1114, 1987.
[31] K. Ingols, M. Chu, R. Lippmann, S. Webster, and S. Boyer, ‚ÄúModeling
modern network attacks and countermeasures using attack graphs,‚Äù in
Proc. ACSAC.
IEEE, 2009, pp. 117‚Äì126.
[32] X. Ou, W. Boyer, and M. McQueen, ‚ÄúA scalable approach to attack
graph generation,‚Äù in Proc. CCS. ACM, 2006, pp. 336‚Äì345.
[33] G. H. Baker and A. Berg, ‚ÄúSupervisory Control and Data Acquisition
(SCADA) Systems,‚Äù The Critical Infrastructure Protection Report 1.6,
2002.
APPENDIX
Values for the input parameters for atomic attack events of
BGP and SCADA ACTs are in Table A.3 and for the input
parameters for countermeasure nodes of both ACTs are in
Table A.4. Probability values are generated by preprocessing
trafÔ¨Åc traces. Attack cost and impact values in Table A.3 and
security investment cost values in Table A.4 for BGP and
SCADA ACT are obtained from [11] and [33] respectively.
However these values were estimated for a certain speciÔ¨Åc
network (BGP) and industrial (SCADA) environment and
we only use them to illustrate our examples.
PARAMETER VALUES FOR ATTACK NODES IN ACT
Table A.3
ACT Node
Probability attack cost(in $) attack impact
of attack
(in 103$)
(ùëÜùê∂ùê¥ùê∑ùê¥)
(ùëÜùê∂ùê¥ùê∑ùê¥)
(ùëÜùê∂ùê¥ùê∑ùê¥)
A111(ùêµùê∫ùëÉ )
A1121(ùêµùê∫ùëÉ )
A1122(ùêµùê∫ùëÉ )
A1123(ùêµùê∫ùëÉ )
A121(ùêµùê∫ùëÉ )
A2(ùêµùê∫ùëÉ )
AùëÜ1
AùëÜ2
AùëÜ3
Aùëä ùëÜùê∏ (ùëÜùê∂ùê¥ùê∑ùê¥)
Aùëà ùêøùê¥ùëÅ (ùëÜùê∂ùê¥ùê∑ùê¥)
AùêªùëÄ ùêº (ùëÜùê∂ùê¥ùê∑ùê¥)
AùëÜùê∂ùëÇùëÉ ùêπ (ùëÜùê∂ùê¥ùê∑ùê¥)
(ùëÜùê∂ùê¥ùê∑ùê¥)
Aùê∫1
(ùëÜùê∂ùê¥ùê∑ùê¥)
Aùê∫2
(ùëÜùê∂ùê¥ùê∑ùê¥)
Aùê∫3
Aùê∑ùêµ (ùëÜùê∂ùê¥ùê∑ùê¥)
Aùëàùëä ùê¥ùëÅ (ùëÜùê∂ùê¥ùê∑ùê¥)
Aùëä ùëÜ (ùëÜùê∂ùê¥ùê∑ùê¥)
0.08
0.1
0.15
0.2
0.1
0.4
0.1
0.1
0.1
0.25
0.3
0.2
0.15
0.15
0.3
0.2
0.5
0.35
0.4
50
60
70
100
150
190
100
110
90
250
275
100
120
100
30
40
170
160
150
200
130
100
300
250
275
300
150
225
250
275
100
120
300
200
150
50
100
150
PARAMETER VALUES FOR COUNTERMEASURE NODES IN ACT
Table A.4
ACT Node
ùëùùê∑ùëò or ùëùùëÄùëò Security investment
cost (in $)
D1(ùêµùê∫ùëÉ )
M1(ùêµùê∫ùëÉ )
D121(ùêµùê∫ùëÉ )
M121(ùêµùê∫ùëÉ )
D2(ùêµùê∫ùëÉ )
M2(ùêµùê∫ùëÉ )
Mùë†ùë§ùëñùë°ùëê‚Ñé(ùëÜùê∂ùê¥ùê∑ùê¥)
Mùëüùëíùë†ùë°ùëéùëüùë°ùê∫1
Mùëüùëíùë†ùë°ùëéùëüùë°ùê∫2
Mùëüùëíùë†ùë°ùëéùëüùë°ùê∫3
(ùëÜùê∂ùê¥ùê∑ùê¥)
(ùëÜùê∂ùê¥ùê∑ùê¥)
(ùëÜùê∂ùê¥ùê∑ùê¥)
0.5
0.6
0.8
0.5
0.7
0.5
0.25
0.4
0.5
0.6
10
30
10
20
15
35
15
25
20
30
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:10 UTC from IEEE Xplore.  Restrictions apply.