### Attack Countermeasure Tree (ACT) for Security Analysis

**Introduction:**
The Attack Countermeasure Tree (ACT) [7] offers a compact and efficient approach for security analysis, combining the benefits of various models. It enables optimal countermeasure selection for different attack scenarios under given constraints using a non-state-space approach with reduction techniques and implicit enumeration (branch and bound). This paper compares the efficiency of our algorithms with those in [6] and the ART-based method [8].

### Discussion

#### Utility of ACT in Large Networks
This section describes the utility of the proposed ACT approach in large networks and compares its efficiency with other attack tree models through simulation results.

**Optimal Countermeasure Selection in Large ACTs:**
To design large ACTs, we use an approach similar to that in [27], building an ACT for a simple network with a router, firewall, one or more attacker hosts outside the firewall, and two or more target hosts inside. Each host is associated with a certain number of vulnerabilities. To create larger ACTs, we increase the number of hosts and vulnerabilities per host in this benchmark network. The method for ACT generation is discussed later.

In ACTs with thousands of nodes, partial cover with intent is useful for protecting the system against critical attack scenarios (i.e., attack events in the Critical Vulnerability Set, CVS). Using objective function F1 in large ACTs, we find that the majority of countermeasures in the optimal set are placed at higher levels of the ACT. This is because a countermeasure at a higher level can cover a larger subtree, and F1 aims to minimize the number of countermeasures used. As the security investment cost increases with the level in the ACT (due to more sophisticated countermeasures at higher levels), objective functions F3, F4, and in some special cases F2, result in optimal sets dominated by lower-level countermeasures. The branch and bound algorithm is well-suited for large ACTs, reducing the recursion tree size from 2^n (where n is the number of countermeasures) to polynomial (n^2) on average and linear in the best case.

**Sequential Attack Actions:**
Sequential attack actions, such as Sybil attacks, are best represented by Markov chains. To incorporate these in large ACTs, the ACT is transformed into a hierarchical model with lower-level Markov chains representing attack progression. These chains are characterized by safe and unsafe states, with the probability of being in one or more unsafe states passed to the high-level ACT as the probability of attack success. Countermeasure actions can also be incorporated into the state transition model of the Markov chain. Algorithm 3 for objective functions F3 and F4 can still be used to solve for optimal countermeasure sets in hierarchical ACTs, with the presence of lower-level Markov chains factored in during the computation of the objective function value for a partial solution.

**Comparison with ART-based Optimization:**
We compare our ACT-based branch-and-bound method with the ART-based method [8] via trace-driven simulation. Using a network model with 2 attacker hosts, 7 target hosts, and 12 vulnerabilities per host, the resulting ACT has 3078 nodes, while the ART has 2859 nodes (detection techniques are not included in the ART structure). We preprocess a slice of traffic data from the MIT Lincoln Lab tcpdump dataset [28] to simulate network traffic. A simplified version of the MDP and ART-based RRE engine with objective function F3 returns an optimal countermeasure set within 3 minutes ± 7 seconds, whereas our ACT-based method does so in 17 seconds ± 2 seconds. The simulation runs on the same system described in Section V, and both approaches return the same optimal solution for objective functions F3 and F4. Our comparison with RRE [8] is limited to the efficiency of the optimal response action selection step. Future work will compare the efficiency of online recovery with RRE to our approach.

**Automated Generation of ACT:**
Early work on attack graph (AG) generation applied symbolic model checking [29] on the system’s finite state machine (FSM) model, but this leads to state space explosion. We extend Ammann et al.'s approach [27] by using a series-parallel graph model called the exploit graph (EG), which is a non-state-space model. Any atomic attack is characterized by preconditions and postconditions, and the vulnerability exploit used to execute the attack step. Bypassing specific countermeasures for an attack is also a precondition. These preconditions and post-conditions are nodes in the exploit graph, connected by edges representing the exploit steps. AND and OR subgraphs represent the conditions for successful exploits. The exploit graph for a system is a forest of ACTs. Given a set of preconditions and a specific attack goal, we generate the ACT by pruning the system's exploit graph. Future work will improve ACT generation by extending the attack graph generation method proposed by Ingols et al. [31], which uses enhanced host-to-host reachability computation and modeling of zero-day exploits for multi-stage, multi-host attacks as in MulVal [32].

### Conclusions

In this paper, we introduced the Attack Countermeasure Tree (ACT), an analytic model for comprehensive qualitative and probabilistic security analysis. ACT considers both attacks and countermeasures, allowing detections and mitigations to be placed at any node. We use ACT to compute optimal countermeasure sets efficiently, avoiding the state-space explosion problem. We study several objective functions, including minimizing security investment cost and maximizing the benefit of implementing a countermeasure set under different constraints. Our approach casts the optimization problem into an integer programming problem, using a non-state-space model to explore objective functions like minimizing the number of countermeasures. We demonstrate greedy strategies and implicit enumeration techniques (branch and bound) for computing optimal countermeasure sets and discuss several case studies. We also compare the efficiency of our algorithms with explicit enumeration, genetic algorithms [6], and MDP-based approaches using attack response trees [8].

### Acknowledgments

This research was supported by the US National Science Foundation grant NSF-CNS-08-31325. The authors thank Prof. Paulo Maciel and Prof. Dijiang Huang for their invaluable comments during the structuring of the paper.

### References

[References listed as provided, with no changes.]

### Appendix

#### Parameter Values for Atomic Attack Events in BGP and SCADA ACTs

| ACT Node | Probability of Attack | Attack Cost (in $) | Attack Impact (in 10^3$) |
|----------|----------------------|--------------------|-------------------------|
| A111(BGP) | 0.08                 | 50                 | 250                     |
| A1121(BGP) | 0.1                  | 60                 | 275                     |
| A1122(BGP) | 0.15                 | 70                 | 100                     |
| A1123(BGP) | 0.2                  | 100                | 120                     |
| A121(BGP) | 0.1                  | 150                | 100                     |
| A2(BGP) | 0.4                  | 190                | 30                      |
| A𝑆1 | 0.1                  | 100                | 40                      |
| A𝑆2 | 0.1                  | 110                | 170                     |
| A𝑆3 | 0.1                  | 90                 | 160                     |
| A𝑊 𝑆𝐸 (SCADA) | 0.25               | 250                | 275                     |
| A𝑈 𝐿𝐴𝑁 (SCADA) | 0.3               | 275                | 300                     |
| A𝐻𝑀 𝐼 (SCADA) | 0.2                | 100                | 150                     |
| A𝑆𝐶𝑂𝑃 𝐹 (SCADA) | 0.15             | 120                | 200                     |
| A𝐺1 (SCADA) | 0.15                | 100                | 130                     |
| A𝐺2 (SCADA) | 0.3                 | 30                 | 100                     |
| A𝐺3 (SCADA) | 0.2                 | 40                 | 300                     |
| A𝐷𝐵 (SCADA) | 0.5                 | 170                | 250                     |
| A𝑈𝑊 𝐴𝑁 (SCADA) | 0.35              | 160                | 275                     |
| A𝑊 𝑆 (SCADA) | 0.4                | 150                | 120                     |

#### Parameter Values for Countermeasure Nodes in ACT

| ACT Node | Detection/ Mitigation Probability | Security Investment Cost (in $) |
|----------|----------------------------------|---------------------------------|
| D1(BGP) | 0.5                              | 10                              |
| M1(BGP) | 0.6                              | 30                              |
| D121(BGP) | 0.8                            | 10                              |
| M121(BGP) | 0.5                            | 20                              |
| D2(BGP) | 0.7                             | 15                              |
| M2(BGP) | 0.5                             | 35                              |
| M𝑠𝑤𝑖𝑡𝑐ℎ(SCADA) | 0.25                       | 15                              |
| M𝑟𝑒𝑠𝑡𝑎𝑟𝑡𝐺1 (SCADA) | 0.4          | 25                              |
| M𝑟𝑒𝑠𝑡𝑎𝑟𝑡𝐺2 (SCADA) | 0.5          | 20                              |
| M𝑟𝑒𝑠𝑡𝑎𝑟𝑡𝐺3 (SCADA) | 0.6          | 30                              |

[Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 07:17:10 UTC from IEEE Xplore. Restrictions apply.]