ing the sVOLE protocol. Recall that our extended functionality can
be viewed as adding the support to output VOPE correlations over
extension field Fpr . Our protocol to accomplish it takes two steps:
1) packing subfield VOLE correlations between Fp and Fpr into
ext-sVOLE
sVOLE
sVOLE
Protocol Π
, which returns a uniform
p ,r
ext-sVOLE
Initialize. P and V send (init) to Fp ,r
∆ ∈ Fpr to V.
Generate sVOLE correlations. On input (extend, ℓ), two parties P
and V call Fp ,r
Generate VOPE correlations. On input (VOPE, d), two parties P
and V execute the following:
(1) For each i ∈ [2d − 1], two parties perform as follows:
to directly generate ℓ sVOLE correlations.
(b) P computes Mi
(a) Both parties send (extend, r) to Fp ,r

h∈[r] uh · X h−1 ∈ Fpr , and V computes Ki :=
, which returns
{(mh , uh)}h∈[r] to P and {kh }h∈[r] to V such that kh =
mh + uh · ∆ ∈ Fpr and uh ∈ Fp for h ∈ [r].
:=
h∈[r] kh ·
X h−1 ∈ Fpr , where Ki = Mi + Ui · ∆, and recall that each
element in Fpr (cid:27) Fp[X]/f (X) is denoted by a polynomial.
(2) P defines д1(x) = M1 + U1 · x, and V sets B1 = K1. If d > 1,
h∈[r] mh · X h−1 ∈ Fpr and Ui
:= 
from i = 1 to d − 1, two parties execute as follows:
(a) P computes the following univariate polynomial:
дi +1(x) = дi(x) · (Mi +1 + Ui +1 · x) + (Md +i + Ud +i · x).
(b) V computes Bi +1 := Bi · Ki +1 + Kd +i .
Then, P computes the coefficients {Ai }i∈[0,d] locally such that
sVOLE
дd(x) =
i∈[0,d] Ai · x i , and V defines B := Bd .
(3) P outputs {Ai }i∈[0,d]; V outputs B.
Figure 3: Protocol for extended subfield VOLE in the F p,r
hybrid model.
sVOLE-
VOLE correlations over Fpr ; 2) multiplying independent VOLE cor-
relations to obtain a VOPE correlation. We note that a malicious
party V could cause the outputting coefficients A1, . . . , Ad−1 of
honest party P to be always 0 by setting ∆ = 0 and all its keys as
0. To prevent the attack, we iteratively multiply the VOLE correla-
tions over Fpr , and use an extra independent VOLE correlation to
randomize the product of VOLE correlations after multiplication is
computed in every iteration. Details of the protocol are described
in Figure 3.
The security of this protocol is proved in the following theorem,
where the proof of this theorem is postponed to Appendix B.
Theorem 4.1. Protocol Π
p,r
ext-sVOLE shown in Figure 3 UC-realizes
ext-sVOLE with statistical error (d − 1)/pr and information-theoretic
F p,r
security in the F p,r
sVOLE-hybrid model.
4.2 Our ZK Protocol using extended sVOLE
We have already discussed the intuition of our ZK protocol for cir-
cuit satisfiability over any field in Section 3.1, and thus here directly
describe the details of the protocol in Figure 4. The online phase of
the ZK protocol requires three rounds of communication. At the
end of this section, we will show that the online phase can be made
non-interactive in the random oracle model. Functionality F p,r
sVOLE
can be securely realized in constant rounds using known protocols
(e.g., [17, 41, 48, 49]), and thus F p,r
is able to be instantiated
using constant-round protocols. Overall, the ZK protocol shown
in Figure 4 has constant rounds. In the following, we prove the
security of our ZK protocol.
ext-sVOLE
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2992Protocol Π
p ,r
ZK
0, A∗
1 · ∆.
ext-sVOLE
ext-sVOLE
ext-sVOLE
Inputs: The prover P and the verifier V hold a circuit C over any
field Fp with t multiplication gates. Prover P also holds a witness w
such that C(w) = 1 and |w | = n (i.e., |Iin| = n).
Preprocessing phase: Both the circuit and witness are unknown.
(1) P and V send (init) to Fp ,r
, which returns a uniform ∆ ∈
(2) P and V send (extend, n + t) to Fp ,r
(3) P and V send (VOPE, 1) to Fp ,r
Fpr to V.
thenticated values {[µi]}i∈[n] and {[νi]}i∈[t] to the parties.
(A∗
1) to P and B∗ to V, such that B∗ = A∗
, which returns uniform
, which returns au-
0 + A∗
Online phase: Now the circuit and witness are known by the parties.
(4) For i ∈ Iin, P sends δi := wi − µi ∈ Fp to V, and then both
(5) For each gate (α , β , γ , T) ∈ C, in a topological order:
parties compute [wi] := [µi] + δi .
• If T = Add, two parties locally compute [wγ ] := [wα ] + [wβ].
• If T = Mult and this is the i-th multiplication gate, P sends
di := wα · wβ − νi ∈ Fp to V, and then both parties compute
[wγ ] := [νi] + di (with wγ = wα · wβ in the honest case).
(6) For the i-th multiplication gate, two parties hold an authenti-
cated triple ([wα ], [wβ], [wγ ]) (with ki = mi + wi
· ∆ for
i ∈ {α , β , γ }) from the previous step and execute the follow-
ing:
• P computes A0,i := mα · mβ ∈ Fpr and A1,i := wα · mβ +
wβ · mα − mγ ∈ Fpr .
• V computes Bi := kα · kβ − kγ · ∆ ∈ Fpr .
A1,i · ∆ for all i ∈ [t].
(a) V samples χ ← Fpr and sends it to P.
i∈[t] A0,i · χ i +A∗
i∈[t] A1,i ·
χ i + A∗
i∈[t] Bi · χ i + B∗ and checks that
W = U +V · ∆. If the check fails, V outputs false and aborts.
(8) For the single output wire h in the circuit C, both parties hold
[wh] with kh = mh + wh · ∆, and check that wh = 1 as follows:
• In parallel with the previous step, P sends mh to V.
• V checks that kh = mh + ∆. If the check fails, then V outputs
false. Otherwise, V outputs true.
(b) P computes U :=
(c) Then V computes W :=
(7) P and V perform the following check to verify that Bi = A0,i +
0 and V :=
1, and sends (U , V ) to V.
ext-sVOLE-hybrid model.
Figure 4: Zero-knowledge protocol for circuit satisfiability
over any field in the F p,r
Proof of security. When both parties are honest, we easily see
that the verifier will output true with probability 1. In particular,
according to the description in Section 3.1, we have that the check
in protocol Π
always passes for an honest execution. For an
honest protocol execution, we always have that wh = 1 (and thus
kh = mh + ∆) for the single output wire h. Overall, our ZK protocol
p,r
Π
ZK
Theorem 4.2. Protocol Π
shown in Figure 4 achieves perfect completeness.
proves the circuit satisfiability in the F p,r
soundness error (t + 3)/pr and information-theoretic security.
ZK UC-realizes functionality FZK that
ext-sVOLE-hybrid model with
p,r
ZK
p,r
Proof. We first consider the case of a malicious prover (i.e.,
soundness and knowledge extraction) and then consider the case of
a malicious verifier (i.e., zero knowledge). In each case, we construct
a simulator S given access to FZK, and running the adversary
A as a subroutine while emulating F p,r
for A. We always
ext-sVOLE
implicitly assume that S passes all communication between A and
environment Z.
ext-sVOLE
Malicious prover. S interacts with adversary A as follows:
(1) S emulates F p,r
1) ∈ (Fpr )2 from A and defines B∗ accordingly.
for A by choosing uniform ∆ ∈ Fpr ,
and recording all the values {µi}i∈[n] and {νi}i∈[N] and their
corresponding MAC tags, which are received by F p,r
ext-sVOLE
from adversary A. These values define the corresponding keys
in the natural way. When emulating F p,r
, S also receives
(A∗
0, A∗
(2) When A sends {δi}i∈Iin
in step 4, S computes wi := δi + µi ∈
Fp for i ∈ Iin.
(3) S executes the rest of the protocol as an honest verifier, using
∆ and the keys defined in the first step. If the honest verifier
outputs false, then S sends w = ⊥ and C to FZK and aborts. If
the honest verifier outputs true, then S sends w and C to FZK
where w = (w1, . . . , wn) is defined as above.
ext-sVOLE
Clearly, the view of adversary A simulated by S has the identical
distribution as its view in the real-world execution. Whenever the
verifier in the real-world execution outputs false, the verifier in the
ideal-world execution outputs false as well (since S sends ⊥ to FZK
in this case). Thus, it only remains to bound the probability that the
verifier in the real-world execution outputs true but the witness
w sent by S to FZK satisfies C(w) = 0. In the following, we show
that if C(w) = 0 then the probability that the honest verifier in the
real-world execution outputs true is at most (t + 3)/pr .
By induction, we prove that all the values on the wires in the
circuit are correct. It is trivial that the values associated with the
input wires and the output wires of Add gates are computed cor-
rectly. Therefore, we focus on analyzing the correctness of the
values related to the output wires of Mult gates. When we ana-
lyze the correctness of the output value with respect to the i-th
multiplication gate, we always assume that the output values as-
sociated with the first (i − 1) multiplication gates are correct by
induction. For the i-th multiplication gate, two parties hold an
authenticated triple ([wα],[wβ],[wγ ]) with wγ = wα · wβ + ei,
where ei ∈ Fp is an error chosen by adversary A by sending
an incorrect value d′
. Thus, we have
i
kγ = mγ + wγ · ∆ = mγ + (wα · wβ) · ∆ + ei · ∆. Further, we have:
in step 5 of protocol Π
p,r
ZK
Bi = kα · kβ − kγ · ∆
= (mα + wα · ∆) · (mβ + wβ · ∆)
− (mγ + wα · wβ · ∆ + ei · ∆) · ∆
= mα · mβ + (wα · mβ + wβ · mα − mγ ) · ∆ − ei · ∆
= A0,i + A1,i · ∆ − ei · ∆
2
.
2
In step 7 of the ZK protocol, A sends U ′ = U + Eu and V ′ = V + Ev
to the honest verifier, where U , V ∈ Fpr are computed following
the protocol description, and Eu, Ev ∈ Fpr are the adversarially
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2993∗
(cid:16)
i∈[t]
i∈[t]
2
i∈[t]
i∈[t]
∗
∗
1 · ∆
0 + A
ei · χi(cid:17) · ∆
2
.
If the check passes in step 7, then we have that W = U ′ + V ′ · ∆.
Therefore, we obtain that
Bi · χi + B
chosen errors. Furthermore, we have the following:
A0,i + A1,i · ∆ − ei · ∆
W = 
= 
= U + V · ∆ −(cid:16)
(cid:1) +(cid:0)V
=(cid:0)U
2(cid:17) · χi + A
ei · χi(cid:17) · ∆
(cid:1) · ∆ −(cid:16)
ei · χi(cid:17) · ∆
(cid:16)
If
the adversary’s view. Below, we consider that

Eu + Ev · ∆ +
i∈[t]
′ − Ev
′ − Eu
2 = 0.
i∈[t] ei · χi (cid:44) 0, then the above equation holds with probability
at most 2/pr , as ∆ ∈ Fpr is uniformly random and kept secret from
i∈[t] ei · χi = 0.
If there exists some i ∈ [t] such that ei (cid:44) 0, the probability that
i∈[t] ei · χi = 0 is at most t/pr , as χ is sampled uniformly at
random after ei for all i ∈ [t] have been determined. Overall, all the
values on the wires in the circuit are correct, except with probability
at most (t + 2)/pr .
Now, we assume that all the values on the wires in the circuit are
correct. If C(w) = 0 but the honest verifier outputs true in step 8,
then adversary A must send mh + ∆ to the honest verifier where
mh is an MAC tag on output wire h known by A. In other words,
A learns ∆, which occurs with probability at most 1/pr .
In conclusion, any unbounded environment Z cannot distin-
guish between the real-world execution and ideal-world execution,
except with probability (t + 3)/pr .
Malicious verifier. If S receives false from FZK, then it simply
aborts. Otherwise, S interacts with adversary A as follows:
(1) In the preprocessing phase, S emulates F p,r
.
ext-sVOLE
(2) S executes steps 4–5 of protocol Π
p,r
ZK
by recording