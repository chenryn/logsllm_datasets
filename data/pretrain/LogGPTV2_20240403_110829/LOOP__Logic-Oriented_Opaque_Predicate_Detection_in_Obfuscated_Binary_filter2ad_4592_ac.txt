3
4
5
6
7
8
on the Pin DBI framework [32] (version 2.12) with 1,752
lines of code in C/C++. To make the logged trace com-
pact, we start trace logging when unpacking routine ﬁnishes
and support on-demand logging for instructions of inter-
est. LOOP’s oﬄine analysis part is implemented on top of
BAP [7] (version 0.8) with 2, 588 lines of OCaml code. We
rely on BAP to lift up x86 instructions to the BAP IL and
convert BAP IL to CVC formulas. LOOP’s backward slic-
ing is performed on BAP IL; the opaque predicate detector
and trace segment comparison tool are built on BAP’s sym-
bolic execution engine. We use STP [23] as our constraint
solver. Besides, we write 644 lines of Perl scripts to glue all
components together to automate the detection. To facili-
tate future research, we have made LOOP code available at
https://github.com/s3team/loop.
6. EVALUATION
We evaluate LOOP’s eﬀectiveness to automatically de-
tect various opaque predicates. We test LOOP with a set
of Linux common utilities and highly obfuscated malicious
programs. We make sure we have the ground truth so that
we can accurately assess false positives and false negatives.
Also, since LOOP is strongly motivated by its application,
we evaluate the impact of LOOP in the task of code nor-
malization for metamorphic malware. The experiments are
performed on a machine with a Intel Core i7-3770 proces-
sor (Quad Core, 3.40GHz) and 8GB memory, running both
Ubuntu 12.04 and Windows XP SP3.
6.1 Evaluation with Common Utilities
This experiment is designed to evaluate the eﬀectiveness
and eﬃciency of our method. First, we select ten widely
used utility programs in Linux as our test cases. To en-
sure the samples’ variety, those candidates are picked from
diﬀerent areas, including data compression, core utilities,
regular expression search, hash computing, web ﬁle trans-
fer, and HTTP server. Since all of those programs are open
source, we can easily verify our detection results. We im-
plement automatic opaque predicate insertion as an LLVM
pass, based on Obfuscator-LLVM [26]. For each program,
we insert seven opaque predicates, including three invari-
ant, three contextual and one dynamic opaque predicates.
The three invariant opaque predicates are randomly selected
from Table 1; the three contextual opaque predicates are
chosen from Table 2. We use the example of dynamic opaque
predicates shown in Figure 5. At the same time, we make
sure that all the opaque predicates can be reached by the
test inputs.
We ﬁrst label the inputs of test cases as tainted and record
tainted instructions. Then we run LOOP’s oﬄine analysis
to detect the opaque predicates. Table 3 shows the exper-
imental results. The second column shows the number of
763Program
bzip
grep
ls
head
md5sum
thttpd
boa
wget
scp
libpng
#Predicates
Invariant
Table 3: Evaluation results on linux common utilities.
Contextual
Dynamic
(no-taint, taint) #OP SE (s)
0.9
0.9
3.3
0.7
2.8
8.7
6.8
3.0
3.4
51.4
(6,313, 13)
(4,969, 16)
(5,867, 21)
(1,496, 11)
(3,450, 14)
(6,605, 124)
(4,718, 131)
(3,230, 36)
(2,402, 30)
(25,377, 446)
4
5
13
6
3
3
3
5
5
7
STP (s) #OP SE (s)
1.2
1.8
22.4
1.1
1.5
3.6
2.5
2.0
2.8
14.6
1.4
1.5
3.9
2.5
4.5
16.8
18.7
7.6
5.8
351.6
6
6
3
7
3
3
3
3
4
4
STP (s) #OP SE (s)
1.8
2.3/1.9
2.4
1.6/1.3
12.5
3.5/2.8
1.9
1.3/1.3
25.0/20.3
1.0
1.4
5.4/2.2
1.7
6.2/1.8
1.5
2.2/1.2
1.5
4.1/2.4
33.2/11.6
10.4
2
3
1
1
1
1
1
1
1
2
STP (s)
2.4
0.3
2.1
1.0
2.2
0.7
0.8
0.7
0.7
5.2
(#FP, #FN)
(5, 0)
(6, 0)
(10, 0)
(1, 0)
(0, 0)
(0, 0)
(0, 0)
(2, 0)
(3, 0)
(6, 0)
predicates before and after taint. It is evident that forward
taint propagation reduces the number of predicates signif-
icantly. For each category of opaque predicate, we report
the number of opaque predicate detected (#OP), the time
of symbolic execution (SE) and the time of running STP
solver (STP). Note that in the column of STP time for con-
textual opaque predicates, we list the diﬀerent time before
and after “short cut” optimization (see Section 4.4).
For the majority of our test cases, the symbolic execution
and STP solver only take several seconds. Because libpng’s
trace size is large and its invariant opaque predicates in-
serted involve modulus arithmetic, the corresponding STP
solving time is the longest. The data presented in the eighth
column indicate that the eﬀect of “short cut” optimization
is encouraging, especially for the cases with large path for-
mulas (e.g., libpng). Furthermore, we manually verify each
logged traces and ﬁnd that our approach successfully diag-
noses all the opaque predicates if there is any; that is, we
have zero false negatives (#FN in the last column).
To test false positives of our approach, namely whether
LOOP mistakes a normal condition as an opaque predicate,
we conduct a similar evaluation on our test cases’ clean ver-
sion (no opaque predicate insertion). Contrary to our expec-
tation, we notice that seven out of ten cases detect opaque
predicates but all of them are false positives (#FP in the last
column). We look into the factors leading to the false posi-
tives and ﬁnd that one major reason is “under tainting” [27],
which is a common problem in taint analysis. Generally, un-
der tainting means instructions that should be tainted are
not recorded. As a result, under tainting will mistakenly
replace some symbols with concrete values. For instance,
supposing y with a concrete value of 2 is not labeled as a
symbol in the predicate y > 1, the predicate in the trace
would be 2 > 1, which is a tautology, and LOOP will issue
a false alarm.
6.2 Evaluation with Obfuscated Malware
Opaque predicates are also widely used by malware devel-
opers. Moreover, opaque predicates are typically integrated
with other obfuscation methods to impede reverse engineer-
ing attempts. To evaluate the resilience of LOOP against
various obfuscation methods, we collect 15 malware bina-
ries from VX Heavens.1 These malware samples are chosen
for two reasons: 1) they are representative in obfuscation
techniques; 2) we have either source code (e.g., QQThief
and KeyLogger) or detailed reverse engineering reports (e.g.,
Figure 9: Example of an opaque predicate in mal-
ware.
Bagle and Mydoom). Hence, we can accurately evaluate our
detection results.
Table 4 shows a variety of obfuscation techniques with
diﬀerent purposes. Column 4 ∼ 9 represent the methods to
obfuscate code and data, such as binary compression and
encryption packers, junk code, code reorder, and opaque
constant. Column 10 ∼ 12 denote the control ﬂow obfus-
cation methods in addition to opaque predicates, includ-
ing call-stack tampering, CFG ﬂatten, and obfuscated con-
trol transfer target. The methods in column 13 and 14 are
used to detect the debugging and virtual machine (VM) en-
vironment. The “# OP” column presents the number of
opaque predicates detected by LOOP. The triple such as
(5,3,1) represents the number of invariant, contextual, and
dynamic opaque predicates, respectively. We ﬁnd that most
malware samples (12 out of 15) are embedded with opaque
predicates and invariant opaque predicates are the most fre-
quently used. The high number (90) of invariant opaque
predicates detected in Hunatcha is caused by loop unrolling.
With the help of source code and reverse engineering re-
ports, we count false positives and false negatives (shown in
column 16). Similar with common utilities’ results, LOOP
achieves zero false negatives. That is, LOOP does not miss
any opaque predicates. The last column lists the total oﬄine
analysis time. Note that our generic unpacking cannot han-
dle virtualization obfuscators [18] such as VMProtect2 and
Themida3. In our test cases, we ﬁnd two malware samples
(BullMoose and Branko) are obfuscated with virtualization
obfuscation. As a result, the logged trace mixes the code of
virtualization interpreter with the code of malicious payload.
LOOP nevertheless detects opaque predicates successfully.
Figure 9 shows an opaque predicate we detected in Key-
Logger Trojan. This opaque predicate utilizes the fact of
stack memory alignment, and therefore both ebp and esp
are even numbers. After several arithmetic operations, the
1http://vxheaven.org/src.php
2http://vmpsoft.com/
3http://www.oreans.com/themida.php
call near ptr GetFontData                                                                   and eax, ebp                                                                                          inc eax                                         and eax, 01h                        cmp eax, 0                             jne   new_target                    ;  eax = 0xFFFFFFFF;  ebp, esp are even numbers;  eax = eax & ebp;  eax is an even number;  eax += 1, eax is an odd number;  eax = 01h;  always true764Table 4: Various obfuscation methods applied by malicious program.
)
b
k
(
Sample
Bube
Tefuss
Champ
BullMoose
QQThief
KeyLogger
Autocrat
Codbot
Loony
Branko
Hunatcha
Bagle
Sasser
Mydoom
Zeynep
Type
Virus
Virus
Virus
Trojan
Trojan
Trojan
Backdoor
Backdoor
Backdoor
Worm
Worm
Worm
Worm
Worm
Worm
.
f
s
n
a
r
t
.
t
a
c
s
u
f
b
O
g
n
i
g
g
u