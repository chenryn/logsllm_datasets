### 4.1 Request Scalability with Threshold ùë°

Further experiments demonstrate that the number of rate-limiters \( m \) for a fixed threshold \( t \) does not significantly impact throughput. The following figures illustrate the amortized time per request as a function of the corruption threshold \( t \).

**Figure 6: Amortized Time per Request vs. Corruption Threshold \( t \)**

- **Encrypt**
  - \( t = 1 \)
  - \( t = 3 \)
  - \( t = 5 \)
  - \( t = 9 \)
  - \( t = 11 \)
  - \( t = 13 \)
  - \( t = 15 \)

- **Decrypt**
  - \( t = 1 \)
  - \( t = 3 \)
  - \( t = 5 \)
  - \( t = 9 \)
  - \( t = 11 \)
  - \( t = 13 \)
  - \( t = 15 \)

**Amortized Time (seconds/request)**
- **Encrypt**
  - 0
  - 1
  - 2
  - 3
  - 4
  - \( \times 10^{-2} \)

- **Decrypt**
  - 0
  - 2
  - 4
  - 6
  - \( \times 10^{-3} \)

### 4.2 Scalability

Table 2 illustrates that the throughput of \((t, m)\)-PHE scales linearly with the number of cores. It is observed that the throughput increases more rapidly with the core count than it decreases with the corruption threshold. This characteristic ensures easy adaptability in real-world applications, as service providers can compensate for lower throughput caused by higher corruption thresholds by utilizing more cores. For practical deployment, a single TLS connection is expected to be used for all messages in an encryption or decryption protocol execution.

**Table 2: Encryption and Decryption Requests per Second**

| **Threshold \( t \)** | **1-Core** | **2-Core** | **4-Core** | **8-Core** |
|-----------------------|------------|------------|------------|------------|
| 1                     | 1097.51    | 2186.59    | 4466.24    | 8509.77    |
| 3                     | 1044.93    | 1993.20    | 3821.29    | 7469.21    |
| 5                     | 546.76     | 1080.64    | 2087.75    | 4020.21    |
| 8                     | 367.70     | 742.97     | 1440.42    | 2820.17    |
| 11                    | 257.51     | 510.17     | 992.99     | 1920.39    |
| 13                    | 192.95     | 375.96     | 744.61     | 1436.60    |
| 15                    | 162.88     | 324.38     | 636.10     | 1244.31    |

| **Threshold \( t \)** | **1-Core** | **2-Core** | **4-Core** | **8-Core** |
|-----------------------|------------|------------|------------|------------|
| 1                     | 958.23     | 1739.31    | 3658.78    | 7081.30    |
| 3                     | 394.05     | 770.41     | 1460.12    | 2883.66    |
| 5                     | 166.77     | 336.20     | 648.21     | 1259.41    |
| 8                     | 107.46     | 214.14     | 412.59     | 807.90     |
| 11                    | 70.49      | 139.80     | 272.14     | 528.41     |
| 13                    | 51.64      | 103.00     | 201.24     | 387.20     |
| 15                    | 43.98      | 87.71      | 171.18     | 329.63     |

### 4.3 Comparison to Memory-Hard Functions

Memory-hard functions are commonly used for password hashing and password-based key derivation. According to current best practices [19], algorithms like scrypt or Argon2 [5] are typically configured to limit login throughput to tens of requests per second, which is significantly slower than using \((t, m)\)-PHE. Therefore, \((t, m)\)-PHE can be directly employed in practice while offering better security against offline brute-force attacks.

### Acknowledgments

This work is partially supported by the Deutsche Forschungs-gemeinschaft (DFG); the Bavarian State Ministry of Science and the Arts in the framework of the Centre Digitisation.Bavaria (ZD.B); and the State of Bavaria at the Nuremberg Campus of Technology (NCT). NCT is a research cooperation between the Friedrich-Alexander-Universit√§t Erlangen-N√ºrnberg (FAU) and the Technische Hochschule N√ºrnberg Georg Simon Ohm (THN). M.Z. was supported by the BayWISS Consortium Digitization.

### References

[1] Shashank Agrawal, Peihan Miao, Payman Mohassel, and Pratyay Mukherjee. 2018. PASTA: PASsword-based threshold authentication. In ACM CCS 2018. David Lie, Mohammad Mannan, Michael Backes, and XiaoFeng Wang, editors. ACM Press, (October 2018), 2042‚Äì2059. doi: 10.1145/3243734.3243839.

[2] Joseph A. Akinyele, Christina Garman, Ian Miers, Matthew W. Pagano, Michael Rushanan, Matthew Green, and Aviel D. Rubin. 2013. Charm: a framework for rapidly prototyping cryptosystems. Journal of Cryptographic Engineering, 3, 2, 111‚Äì128. issn: 2190-8508. doi: 10.1007/s13389-013-0057-3. http://dx.doi.org/10.1007/s13389-013-0057-3.

[3] Noga Alon, Zvi Galil, and Moti Yung. 1995. Efficient dynamic-resharing ‚Äúverifiable secret sharing‚Äù against mobile adversary. In Algorithms ‚Äî ESA ‚Äô95. Paul Spirakis, editor. Springer Berlin Heidelberg, Berlin, Heidelberg, 523‚Äì537. isbn: 978-3-540-44913-3.

[4] Ali Bagherzandi, Stanislaw Jarecki, Nitesh Saxena, and Yanbin Lu. 2011. Password-protected secret sharing. In ACM CCS 2011. Yan Chen, George Danezis, and Vitaly Shmatikov, editors. ACM Press, (October 2011), 433‚Äì444. doi: 10.1145/2046707.2046758.

[5] Alex Biryukov, Daniel Dinu, and Dmitry Khovratovich. 2016. Argon2: new generation of memory-hard functions for password hashing and other applications. In IEEE European Symposium on Security and Privacy, EuroS&P 2016, Saarbr√ºcken, Germany, March 21-24, 2016. IEEE, 292‚Äì302. isbn: 978-1-5090-1751-5. doi: 10.1109/EuroSP.2016.31. http://dx.doi.org/10.1109/EuroSP.2016.31.

[6] Taher ElGamal. 1984. A public key cryptosystem and a signature scheme based on discrete logarithms. In CRYPTO‚Äô84 (LNCS). G. R. Blakley and David Chaum, editors. Volume 196. Springer, Heidelberg, (August 1984), 10‚Äì18.

[7] Adam Everspaugh, Rahul Chatterjee, Samuel Scott, Ari Juels, and Thomas Ristenpart. 2015. The pythia PRF service. In USENIX Security 2015. Jaeyeon Jung and Thorsten Holz, editors. USENIX Association, (August 2015), 547‚Äì562.

[8] Pooya Farshim, Beno√Æt Libert, Kenneth G. Paterson, and Elizabeth A. Quaglia. 2013. Robust encryption, revisited. In PKC 2013 (LNCS). Kaoru Kurosawa and Goichiro Hanaoka, editors. Springer, (February 2013), 331‚Äì348. doi: 10.1007/978-3-642-36362-7_21.