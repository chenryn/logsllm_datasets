[9] “Jtag debugging,” https://blog.attify.com/hack-iot-device/.
[10] “Jtag fuse and protection using a trusted execution environment,”
http://www.freepatentsonline.com/9021585.html.
[11] “Jtag fuse flow,” https://e2e.ti.com/support/microcontrollers/msp430/f/166/
t/18936?JTAG-FUSE-BLOW.
[12] “Katyusha rest and soap fuzzer,” https://github.com/lpredova/Katyusha.
[13] “UFuzz, or Universal Plug and Fuzz, is an automatic UPnP fuzzing tool.”
https://github.com/phikshun/ufuzz.
[14] “Web services fuzzing tool for http and soap,” https://sourceforge.net/projects/
wsfuzzer/files/.
[15] “Debugging Bluetooth With An Android App,” https://blog.bluetooth.com/
debugging-bluetooth-with-an-android-app, 2016.
[16] V. Afonso, A. Bianchi, Y. Fratantonio, A. Doupé, M. Polino, P. de Geus,
C. Kruegel, and G. Vigna, “Going native: Using a large-scale analysis of
android apps to create a practical native-code sandboxing policy,” in The
Network and Distributed System Security Symposium, 2016, pp. 1–15.
[17] O. Alrawi, C. Lever, M. Antonakakis, and F. Monrose, “Sok: Security
evaluation of home-based iot deployments,” in Proceedings of the IEEE
Symposium on Security and Privacy, 2019.
[18] Ben Herzberg, Dima Bekerman, Igal Zeifman, “Breaking Down Mirai: An
IoT DDoS Botnet Analysis,” https://www.incapsula.com/blog/malware-
analysis-mirai-ddos-botnet.html.
[19] M. Böhme, V.-T. Pham, M.-D. Nguyen, and A. Roychoudhury, “Directed
greybox fuzzing,” in Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2017, pp. 2329–2344.
[20] M. Böhme, V.-T. Pham, and A. Roychoudhury, “Coverage-based greybox
fuzzing as markov chain,” in Proceedings of the 2016 ACM Conference
on Computer and Communications Security, ser. CCS ’16. New
York, NY, USA: ACM, 2016, pp. 1032–1043. [Online]. Available:
http://doi.acm.org/10.1145/2976749.2978428
[21] R. M. Bolle, J. H. Connell, and N. K. Ratha, “System and method for liveness
authentication using an augmented challenge/response scheme,” Feb. 1 2005,
uS Patent 6,851,051.
[22] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler, “Exe:
Automatically generating inputs of death,” in Proceedings of the 2006
ACM Conference on Computer and Communications Security, ser. CCS
’06. New York, NY, USA: ACM, 2006, pp. 322–335. [Online]. Available:
http://doi.acm.org/10.1145/1180405.1180445
[23] G. Campana, “Fuzzgrind: un outil de fuzzing automatique,” Actes du, pp.
213–229, 2009.
[24] D. D. Chen, M. Woo, D. Brumley, and M. Egele, “Towards automated
dynamic analysis for linux-based embedded firmware.” in NDSS, 2016.
[25] J. Chen, W. Diao, Q. Zhao, C. Zuo, Z. Lin, X. Wang, W. C. Lau, M. Sun,
R. Yang, and K. Zhang, “Iotfuzzer: Discovering memory corruptions in iot
through app-based fuzzing,” in Proc. of the ISOC Network and Distributed
System Security Symposium (NDSS), 2018.
[26] P. Chen and H. Chen, “Angora: Efficient fuzzing by principled search,” arXiv
preprint arXiv:1803.01307, 2018.
[27] Chris Brook, “TRAVEL ROUTERS, NAS DEVICES AMONG EASILY
HACKED IOT DEVICES,” https://threatpost.com/travel-routers-nas-devices-
among-easily-hacked-iot-devices/124877/.
[28] P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda, “Prospex:
Protocol specification extraction,” in Proceedings of
the 2009 IEEE
Symposium on Security and Privacy, ser. SP ’09. Washington, DC,
USA: IEEE Computer Society, 2009, pp. 110–125. [Online]. Available:
http://dx.doi.org/10.1109/SP.2009.14
[29] A. Continella, Y. Fratantonio, M. Lindorfer, A. Puccetti, A. Zand, C. Kruegel,
and G. Vigna, “Obfuscation-resilient privacy leak detection for mobile apps
through differential analysis,” in Proceedings of the ISOC Network and Dis-
tributed System Security Symposium (NDSS), San Diego, CA, February 2017.
[30] J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili, S. Hao, C. Kruegel, and
G. Vigna, “Difuze: Interface aware fuzzing for kernel drivers,” in Proceedings
of the 2017 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2017, pp. 2123–2138.
[31] A. Costin, J. Zaddach, A. Francillon, D. Balzarotti, and S. Antipolis, “A
large-scale analysis of the security of embedded firmwares.” in USENIX
Security Symposium, 2014, pp. 95–110.
[32] D. Davidson, B. Moench, T. Ristenpart, and S. Jha, “Fie on firmware: Finding
vulnerabilities in embedded systems using symbolic execution,” in USENIX
Security Symposium, 2013, pp. 463–478.
[33] K. Dewey, J. Roesch, and B. Hardekopf, “Fuzzing the rust typechecker using
clp (t),” in Proceedings of the 2015 IEEE/ACM International Conference
on Automated Software Engineering, ser. ASE ’15. Washington, DC,
USA: IEEE Computer Society, 2015, pp. 482–493. [Online]. Available:
http://dx.doi.org/10.1109/ASE.2015.65
[34] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. N. Sheth, “Taintdroid: an information-flow tracking
system for realtime privacy monitoring on smartphones,” ACM Transactions
on Computer Systems (TOCS), vol. 32, no. 2, p. 5, 2014.
[35] S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen, “Collafl: Path
sensitive fuzzing,” in 2018 IEEE Symposium on Security and Privacy (SP).
IEEE, 2018, pp. 679–696.
[36] V. Ganesh, T. Leek, and M. Rinard, “Taint-based directed whitebox fuzzing,”
in Proceedings of the 2009 International Conference on Software Engineering,
ser. ICSE ’09. Washington, DC, USA: IEEE Computer Society, 2009, pp.
474–484. [Online]. Available: http://dx.doi.org/10.1109/ICSE.2009.5070546
[37] P. Godefroid, A. Kiezun, and M. Y. Levin, “Grammar-based whitebox
fuzzing,” in Proceedings of the 2008 ACM SIGPLAN Conference on
Programming Language Design and Implementation, ser. PLDI ’08.
New York, NY, USA: ACM, 2008, pp. 206–215. [Online]. Available:
http://doi.acm.org/10.1145/1375581.1375607
[38] P. Godefroid, N. Klarlund, and K. Sen, “Dart: Directed automated
random testing,” in Proceedings of the 2005 ACM SIGPLAN Conference
on Programming Language Design and Implementation, ser. PLDI ’05.
New York, NY, USA: ACM, 2005, pp. 213–223. [Online]. Available:
http://doi.acm.org/10.1145/1065010.1065036
[39] P. Godefroid, M. Y. Levin, D. A. Molnar et al., “Automated whitebox fuzz
testing.” in Proceedings of the 2008 Symposium on Network and Distributed
System Security, ser. NDSS ’08, San Diego, CA, USA, 2008.
[40] L. Gomez, I. Neamtiu, T. Azim, and T. Millstein, “Reran: Timing-and touch-
sensitive record and replay for android,” in Proceedings of the 2013 Interna-
tional Conference on Software Engineering.
IEEE Press, 2013, pp. 72–81.
[41] G. Grieco, M. Ceresa, and P. Buiras, “Quickfuzz: An automatic random
fuzzer for common file formats,” in Proceedings of the 2016 International
Symposium on Haskell, ser. Haskell ’16. New York, NY, USA: ACM, 2016,
pp. 13–20. [Online]. Available: http://doi.acm.org/10.1145/2976002.2976017
[42] Z. Gui, H. Shu, and J. Yang, “Firmnano: Toward iot firmware fuzzing through
augmented virtual execution,” in 2020 IEEE 11th International Conference
on Software Engineering and Service Science (ICSESS), 2020, pp. 290–294.
[43] E. Gustafson, M. Muench, C. Spensky, N. Redini, A. Machiry,
Y. Fratantonio, D. Balzarotti, A. Francillon, Y. R. Choe, C. Kruegel,
and G. Vigna, “Toward the analysis of embedded firmware through
automated re-hosting,” in 22nd International Symposium on Research
in Attacks, Intrusions and Defenses (RAID 2019). Chaoyang District,
Beijing: USENIX Association, Sep. 2019, pp. 135–150. [Online]. Available:
https://www.usenix.org/conference/raid2019/presentation/gustafson
[44] I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos, “Dowser: a guided
fuzzer to find buffer overflow vulnerabilities,” in Proceedings of the 2013
USENIX Security Symposium, ser. SEC ’13, Washington, DC, USA, 2013,
pp. 49–64.
[45] H. Han and S. K. Cha, “Imf: Inferred model-based fuzzer,” in Proceedings
of the 2017 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2017, pp. 2345–2358.
[46] C. Holler, K. Herzig, and A. Zeller, “Fuzzing with code fragments.” in
Proceedings of the 2012 USENIX Security Symposium, ser. SEC ’12,
Bellevue, WA, USA, 2012, pp. 445–458.
[47] K. Ispoglou, D. Austin, V. Mohan, and M. Payer, “Fuzzgen: Automatic
fuzzer generation,” in 29th USENIX Security Symposium (USENIX Security
20). Boston, MA: USENIX Association, Aug. 2020. [Online]. Available:
https://www.usenix.org/conference/usenixsecurity20/presentation/ispoglou
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
498
[48] James Lyne,
“Uncovering
a CCTV
https://www.rsaconference.com/videos/demo-uncovering-
IoT Vulnerabilities
in
Camera,”
iot-vulnerabilities-in-a-cctv-camera.
[49] L. Jost, “Entropy and diversity,” Oikos, vol. 113, no. 2, pp. 363–375, 2006.
[50] D. M. Junior, L. Melo, H. Lu, M. d’Amorim, and A. Prakash, “Beware of the
app! on the vulnerability surface of smart devices through their companion
apps,” arXiv preprint arXiv:1901.10062, 2019.
[51] C. Kolias, G. Kambourakis, A. Stavrou, and J. Voas, “Ddos in the iot: Mirai
and other botnets,” Computer, vol. 50, no. 7, pp. 80–84, 2017.
[52] K. Koscher, T. Kohno, and D. Molnar, “Surrogates: Enabling near-real-time
dynamic analyses of embedded systems.” in WOOT, 2015.
[53] D. Kumar, K. Shen, B. Case, D. Garg, G. Alperovich, D. Kuznetsov, R. Gupta,
and Z. Durumeric, “All things considered: An analysis of iot devices on home
networks,” in 28th {USENIX} Security Symposium ({USENIX} Security 19),
2019, pp. 1169–1185.
[54] V. Le, C. Sun, and Z. Su, “Finding deep compiler bugs via guided stochastic
program mutation,” in Proceedings of the 2015 ACM SIGPLAN International
Conference on Object-Oriented Programming, Systems, Languages, and
Applications, ser. OOPSLA ’15. New York, NY, USA: ACM, 2015, pp.
386–399. [Online]. Available: http://doi.acm.org/10.1145/2814270.2814319
[55] K. Lee, Y. Lee, H. Lee, and K. Yim, “A brief review on jtag security,” in 2016
10th International Conference on Innovative Mobile and Internet Services
in Ubiquitous Computing (IMIS), July 2016, pp. 486–490.
[56] C. Lemieux and K. Sen, “Fairfuzz: Targeting rare branches to rapidly
increase greybox fuzz testing coverage,” CoRR, vol. abs/1709.07101, 2017.
[Online]. Available: http://arxiv.org/abs/1709.07101
[57] Y. Li, B. Chen, M. Chandramohan, S.-W. Lin, Y. Liu, and A. Tiu, “Steelix:
Program-state based binary fuzzing,” in Proceedings of the 2017 11th Joint
Meeting on Foundations of Software Engineering, ser. ESEC/FSE 2017.
New York, NY, USA: ACM, 2017, pp. 627–637. [Online]. Available:
http://doi.acm.org/10.1145/3106237.3106295
[58] Z. Lin, X. Zhang, and D. Xu, “Automatic reverse engineering of data
structures from binary execution,” in Proceedings of the 2010 Annual
Information Security Symposium, ser. CERIAS ’10. West Lafayette,
IN: CERIAS - Purdue University, 2010, pp. 5:1–5:1. [Online]. Available:
http://dl.acm.org/citation.cfm?id=2788959.2788964
[59] Lucian Constantin, “Hackers found 47 new vulnerabilities in 23 IoT devices
at DEFCON,” https://www.csoonline.com/article/3119765/security/hackers-
found-47-new-vulnerabilities-in-23-iot-devices-at-def-con.html.
[60] B. P. Miller, L. Fredriksen, and B. So, “An empirical study of the reliability
of unix utilities,” Commun. ACM, vol. 33, no. 12, pp. 32–44, Dec. 1990.
[Online]. Available: http://doi.acm.org/10.1145/96267.96279
[61] M. Muench, J. Stijohann, F. Kargl, A. Francillon, and D. Balzarotti, “What
you corrupt is not what you crash: Challenges in fuzzing embedded devices,”
in NDSS 2018, Network and Distributed Systems Security Symposium, 18-21
February 2018, San Diego, CA, USA, San Diego, UNITED STATES, 02
2018. [Online]. Available: http://www.eurecom.fr/publication/5417
[62] M. Neugschwandtner, P. Milani Comparetti, I. Haller, and H. Bos, “The
borg: Nanoprobing binaries for buffer overreads,” in Proceedings of the
2015 ACM Conference on Data and Application Security and Privacy, ser.
CODASPY ’15. New York, NY, USA: ACM, 2015, pp. 87–97. [Online].
Available: http://doi.acm.org/10.1145/2699026.2699098
[63] F. Nielson, H. Riis Nielson, and C. Hankin, Principles of Program Analysis,
01 1999.
no. 10, pp. 12–13, 2016.
1991, vol. 26, no. 11.
[64] A. Nordrum, “The internet of fewer things [news],” IEEE Spectrum, vol. 53,
[65] J. Palsberg and M. I. Schwartzbach, Object-oriented type inference. ACM,
[66] Peach, “The peach fuzzer,” 2017, http://www.peachfuzzer.com/.
[67] H. Peng, Y. Shoshitaishvili, and M. Payer, “T-fuzz: fuzzing by program
transformation,” in Proceedings of the IEEE Symposium on Security and
Privacy (S&P), 2018.
[68] P. Pokorny and M. Royal, “Dumb fuzzing in practice,” 2012.
[69] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos, “Vuzzer:
Application-aware evolutionary fuzzing,” in Proceedings of the Network and
Distributed System Security Symposium (NDSS), 2017.
[70] N. Redini, A. Machiry, R. Wang, C. Spensky, A. Continella, Y. Shoshitaishvili,
C. Kruegel, and G. Vigna, “Karonte: Detecting insecure multi-binary
interactions in embedded firmware,” in Proceedings of the IEEE Symposium
on Security and Privacy (S&P), May 2020.
[71] Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel, and G. Vigna, “Firmalice-
automatic detection of authentication bypass vulnerabilities in binary
firmware.” in NDSS, 2015.
[72] M. Smith, M. Helmi, and J. Miller, “Comparison of approaches to use existing
architectural features in embedded processors to achieve hardware-assisted
test insertion,” Proceedings Work-in-Progress Session, 2010.
[73] P. Srivastava, H. Peng, J. Li, H. Okhravi, H. Shrobe, and M. Payer, “FirmFuzz:
Automated IoT Firmware Introspection and Analysis,” in Proc. ACM CCS
Workshop on IoT Security and Privacy (IoT S&P), 2019.
[74] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta,
Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Driller: Augmenting Fuzzing
Through Selective Symbolic Execution,” in Proceedings of the 2016 Network
and Distributed System Security Symposium, ser. NDSS ’16, San Diego, CA,
USA, 2016.
[75] M. Sun, T. Wei, and J. Lui, “Taintart: A practical multi-level information-flow
tracking system for android runtime,” in Proceedings of the 2016 ACM
SIGSAC Conference on Computer and Communications Security. ACM,
2016, pp. 331–342.
[76] R. Vallée-Rai, E. Gagnon, L. Hendren, P. Lam, P. Pominville, and V. Sundare-
san, “Optimizing java bytecode using the soot framework: Is it feasible?” in In-
ternational conference on compiler construction. Springer, 2000, pp. 18–34.
[77] J. Wang, B. Chen, L. Wei, and Y. Liu, “Skyfire: Data-driven seed generation
for fuzzing,” in 2017 IEEE Symposium on Security and Privacy (SP), May
2017, pp. 579–594.
[78] T. Wang, T. Wei, G. Gu, and W. Zou, “Taintscope: A checksum-aware
directed fuzzing tool for automatic software vulnerability detection,” in
Proceedings of the 2010 IEEE Symposium on Security and Privacy, ser. SP
’10. San Jose, CA, USA: IEEE, 2010, pp. 497–512.
[79] X. Wang, Y. Sun, S. Nanda, and X. Wang, “Looking from the mirror:
Evaluating iot device security through mobile companion apps,” in 28th
USENIX Security Symposium (USENIX Security 19). Santa Clara, CA:
USENIX Association, Aug. 2019, pp. 1151–1167. [Online]. Available: https:
//www.usenix.org/conference/usenixsecurity19/presentation/wang-xueqiang
[80] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace, “Reformat: Automatic
reverse engineering of encrypted messages,” in Computer Security –
ESORICS 2009, M. Backes and P. Ning, Eds. Berlin, Heidelberg: Springer
Berlin Heidelberg, 2009, pp. 200–215.
[81] Z. Wang, Y. Zhang, and Q. Liu, “Rpfuzzer: A framework for discovering
router protocols vulnerabilities based on fuzzing.” KSII Transactions on
Internet & Information Systems, vol. 7, no. 8, 2013.
[82] H. Wen, Q. Zhao, Q. A. Chen, and Z. Lin, “Automated Cross-Platform Reverse
Engineering of CAN Bus Commands From Mobile Apps,” in Proceedings of
the ISOC Network and Distributed System Security Symposium (NDSS), 2020.
[83] T. Wilson, “Evaluation of fuzzing as a test method for an embedded system,”
2018.
[84] J. Zaddach, L. Bruno, A. Francillon, and D. Balzarotti, “Avatar: A framework
to support dynamic security analysis of embedded systems’ firmwares.” in
NDSS, 2014.
[85] M. Zalewski., “American fuzzy lop,” 2017, http://lcamtuf.coredump.cx/afl/
technical_details.txt.
[86] Q. Zhao, C. Zuo, D.-G. Brendan, G. Pellegrino, and Z. Lin, “Automatic
uncovering of hidden behaviors from input validation in mobile apps,” 2020.
[87] Y. Zheng, A. Davanian, H. Yin, C. Song, H. Zhu, and L. Sun, “Firm-afl: High-
throughput greybox fuzzing of iot firmware via augmented process emulation,”
in 28th USENIX Security Symposium (USENIX Security 19). Santa Clara,
CA: USENIX Association, Aug. 2019, pp. 1099–1114. [Online]. Available:
https://www.usenix.org/conference/usenixsecurity19/presentation/zheng
[88] W. Zhou, Y. Jia, Y. Yao, L. Zhu, L. Guan, Y. Mao, P. Liu, and Y. Zhang,
“Discovering and understanding the security hazards in the interactions
between iot devices, mobile apps, and clouds on smart home platforms,”
in 28th USENIX Security Symposium (USENIX Security 19). Santa Clara,
CA: USENIX Association, Aug. 2019, pp. 1133–1150. [Online]. Available:
https://www.usenix.org/conference/usenixsecurity19/presentation/zhou
APPENDIX
In this appendix, we provide technical details about DIANE’s
different components. We implemented DIANE in about 4,500
lines of Python code, following the high-level architecture depicted
in Figure 2. DIANE is implemented on top of pysoot 4, which
leverages Soot [76] to translate the companion app’s bytecode
into an intermediate representation. DIANE currently only handles
Android applications.
4https://github.com/angr/pysoot/
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
499
A. Static Analysis
To find the initial set of sendMessage candidates within
a companion app, we analyze its internal representation. In
particular, we select all those functions that either contain calls
(Soot intermediate-representation invoke instructions) to native
methods (having the native attribute) or calls to methods in the
Android framework known to implement network I/O operations
(e.g., java.net.*, javax.net.*, or android.net.*).
By applying these rules, we obtain a list of functions that, when
invoked, potentially send network messages to the IoT device.
B. Dynamic Analysis
APK Instrumentation. To hook methods of the APK under
analysis and to fuzz them, we use Frida [8]. More precisely, each
method is hooked and dynamically modified to include additional
code. This injected additional code is used to enable fuzzing of
the method arguments and of the used class fields and to extract
information necessary for our analysis, such as the timestamp
when the method is invoked and the contents of its parameters.
Network Interception. DIANE intercepts the network traffic
generated by the companion app at runtime. DIANE supports the
interception of traffic sent using both the WiFi and Bluetooth
interfaces. Note that our approach is independent of the specific
network medium and only requires to passively observe the
communication channel without accessing the content of the
exchanged data. For traffic transmitted over WiFi, DIANE leverages
a router and the tool tcpdump to capture the packets sent from
the smartphone to the IoT device, filtering the IP addresses. Traffic
transmitted using the Bluetooth interface is instead captured using
the Bluetooth HCI snoop Android debugging functionality [15].
Unless otherwise specified, we use the term network activity to
refer both to WiFi and Bluetooth network traffic.
Fuzzing Objects. DIANE fuzzes both primitive variables (e.g.,
int, float) and class instances. To do this we use pysoot to
retrieve the class definition of the considered class instances, and
we fuzz each field whose type is either primitive or known (e.g.,
java.lang.String).
C. Hybrid Analysis
Fuzzing Trigger Identification Details. To implement the fuzzing
triggers algorithm described in Section III-A, we implemented a
static inter-function backward slicer on top of pysoot. Theoretically,
the backward slice of a given variable might traverse an arbitrary
number of functions. Therefore, to keep our analysis tractable, our
backward slicer algorithm adopts a conservative approach.
Conversely, if v is a class object, we use pysoot to retrieve its
class definition, and we consider each field variable vc whose
type is either primitive or known. For all these field variables, we
compute their entropy as specified above, and we add them to the
Lif set or to the Lof set, based on to which live set v belongs.
Specifically, when calculating the backward slice of a variable
v, our backward slicer traverses up to N consecutive function calls
(we set N to five in our experiments), and it over-approximates data
dependencies when a function call is not followed. For instance, if
a function call takes v as one of its arguments, and the function call
is not followed, we assume that v is data-dependent on all the other
arguments. Although this approach might lead our static analysis
phase to produce false positives, it does not affect the performance
of our tool, since, as explained in Section III-A, we use dynamic
analysis to validate the results produced by static analysis.
To build the data-transforming function dominator trees, as
explained in Section III-A, we first need to build the companion
app call graph. To achieve this, we perform intra-procedural type
inference [65] to determine the possible dynamic types of the object
on which a method is called. When this fails, we over-approximate
the possible targets as all the subclasses of its static type.
Entropy Calculation Details. To find data-transforming functions,
DIANE needs to calculate the entropy of each variable v within
the live sets Lif and Lof of a function scope f. To achieve
this, if v is a primitive variable (e.g., int), or a known type
(i.e., String, Integer, Float, and Double), we convert
the data it contains in its byte representation and calculate the
Shannon entropy of this sequence of bytes. Note that the entropy
is computed on the entire sequence of bytes, rather than the single
bytes considered separately.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
500