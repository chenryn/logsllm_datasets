double overlay – we use DHT communication for efficient search,
over a source-routing overlay, over IP.) To avoid celebrity attacks,
every MCON node can only communicate directly with a con-
stant k other nodes, since direct IP communication is sufficient to
break membership-concealment. Most communication takes place
through the DHT overlay, which connects any two nodes by log N
logical hops, where N is the total number of members. This con-
tributes significantly to the scalability and efficiency of our system.
Many popular DHT designs use iterative routing, where a node
will communicate with its DHT neighbor to ask for the IP address
of the next DHT hop, with which it will then communicate directly.
The process repeats until the desired node is found, at which time
the origin and the destination can communicate directly over IP. We
cannot achieve membership concealment in the iterative scheme,
since an adversary can learn the IP addresses of all intermediate
nodes as well as the final destination by repeatedly searching the
network. In recursive routing, nodes communicate only with their
DHT neighbors, who forward requests to the next DHT hop on
behalf of the originator.
In this scheme, all communication be-
tween source and destination happens through multiple intermedi-
aries. Sometimes recursive routing carries the benefit of plausible
deniability of query origin – a node receiving a message from a
physical neighbor cannot distinguish whether that neighbor origi-
nated or forwarded the message.
Our design relies on a trusted central authority (the Member-
ship and Invitation Authority, or MIA) to invite new nodes into
the MCON and act as a key issuer. The MIA is also responsible
for keeping track of node degree, ensuring that nodes do not ex-
ceed the global constraint. To prevent Sybil attacks, the authority
can use existing systems such as SybilLimit or SybilInfer [49, 23],
which use a social network to bound the number of Sybil identi-
ties accepted into the network. Note that membership concealing
properties of our scheme do not depend on the number of Sybil
6We omit full algorithms due to space constraints.
nodes in the network, provided they are not connected to honest
nodes. Since honest nodes will not directly communicate with any-
one other than their neighbors, Sybil nodes without edges to honest
nodes will only affect the robustness of routing in our network, not
its security. Since future designs will distribute the functionality of
the MIA throughout the network, we want to minimize our current
dependence on it. To that end, the MIA is only needed when a new
node joins. Moreover, it does not have to respond in real time, and
so can be offline and does not constitute a central point of failure
for denial of availability attacks. Unlike the Tor authority, nodes
need never contact the MIA directly, so it can remain hidden.
Below we present three MCON designs:
the first is more ef-
ficient, the second is more robust in high-churn situations, and the
third is a hybrid. They can all be split into three major components:
invitation and join, route discovery, and overlay routing.
Invitation and join. The network is built by starting from a
small “seed” and adding nodes one by one, expanding it to form
the full MCON. While the seed can be an arbitrary group of social
network nodes matching certain mutual connectivity parameters,
growing that network is challenging. In our system, nodes who are
already part of the MCON invite other nodes with whom they share
connections in the social network. Nodes must receive multiple in-
vitations in order to join the MCON, and the entire process must
be somehow mediated to ensure admission control and key distri-
bution for the MCON. While this is currently handled by a central-
ized entity, future designs will incorporate distributed computation
of this information by MCON members.
Route discovery. Once node A has been admitted to the MCON,
it must construct a DHT routing table for efficient communication.
The routing table consists of sourse routes to other DHT nodes that
share different prefix lengths with A. Routes are discovered by
flooding requests over the “physical” network. Since nodes only
communicate with their neighbors, route responses must conceal
information about intermediate nodes. We accomplish this by us-
ing private routing tokens. A node building a routing table obtains
information about the next hop (one of his direct neighbors), the
destination (one of his DHT neighbors), and no information about
the intermediate nodes.
Overlay routing. Finally, once a node builds his DHT rout-
ing table, he can route to arbitrary DHT keys. As in route discov-
ery, communication happens strictly through the node’s “physical”
neighbors, and DHT communication is recursively routed. MCON
communication consists of two layers: routing to a DHT hop, and
routing between DHT hops. In the first step, the node uses the col-
lected private routing tokens to deliver a message to the first DHT
hop. That DHT node will then use her routing table to transport
the message to the next DHT hop, and so on until the destination is
reached. Nodes never communicate directly with anyone other than
their physical neighbors, and layers of encryption prevent the expo-
sure of the DHT message as well as the source and destination. We
ensure resistance to confirmation and brute-force scanning attacks
by using strong binding – an MCON node will only communicate
directly with her physical neighbors, ignoring all messages from
other nodes (enforced by cryptographic signatures).
5.1 Efficient design
Network construction. We start network construction with a clique
of ⌈k/2⌉ social network neighbors, where k is the maximum num-
ber of allowed MCON physical neighbors. The MIA iteratively
“grows” the network by finding nodes to invite. Node A can be in-
vited if: a) A has at least ⌈k/2⌉ social friends in the current MCON,
b) those friends have at most k − 1 “physical neighbors,” and c) A
is not in the MCON, and has not been previously invited. Call
A’s friends satisfying (a) and (b) her potential physical neighbors.
394Once A has been identified, the MIA randomly chooses ⌈k/2⌉ of
A’s potential physical neighbors, tells them A’s new pseudonym,
and instructs them to (1) add A to their list of physical neighbors
and (2) send an invitation to A with their IP addresses, MCON
pseudonyms, public keys, and DHT ID. Once A receives the in-
vitation and joins, the MIA assigns her a private key and a set of
identity-based private keys [6].
Route discovery request. After join-
ing, A can discover her logical neigh-
bors and build a routing table. The
routing table is composed of source
routes to DHT nodes whose pseudo-
nyms share a common prefix with
A’s pseudonym.
(For instance, in
the Kademlia DHT protocol [30],
A acquires K routing table entries
for every i-bit prefix of A’s pseudo-
nym.) These source routes are dis-
covered by scoped flooding over the
physical links of the MCON, anal-
Figure 2: Routing to a log-
ogously to a wireless ad-hoc rout-
ical hop over 4 physical hops
ing protocol, such as Virtual Ring
Routing [8]. A continues sending discovery requests, increasing
the scope of each by one, until her entire routing table is filled.
(This constitutes a depth-limited breadth-first search of the net-
work.) While expensive, floods are only needed during initial route
discovery. A uses these source routes to establish onion routes
to each of its routing table entries, similar to Tor tunnels [16].
Onion-wrapped source routes ensure that for most routes neither
the source nor the destination learn anything about each other ex-
cept that they share a common pseudonym prefix. Moreover, most
intermediate nodes in a source route know neither the source nor
the destination, and cannot determine if any message is addressed
to the same node as any other message, ensuring unlinkability.
Route discovery messages are in the form of (ID, scope,
IBEprefix(z, gx, R)), where IBE is identity-based encryption [6],
scope is the flood depth, gx is a Diffie-Hellman half-key,7 R is a
route descriptor, z is a random number, and ID is h(h(z)), with
h being a cryptographically secure hash function. IBEprefix is an
identity-based encryption to an i-bit prefix of A’s pseudonym [6],
meaning that only a node matching the search parameters can open
the message. The route descriptor is a random bit-string of some
fixed size. A stores z, the prefix, the route, and the DH half-key
for later reference. When relaying a route discovery message, each
node will decrement the scope by one, dropping messages whose
scope is 0. Relaying nodes will also record the request ID and phys-
ical neighbor from whom it came.8 These records are kept either
until a reply is received or a timer expires.
Route discovery reply. When node F receives a route discovery
request which he can decrypt (meaning F ’s DHT ID contains the
prefix to which the message is encrypted), he generates a DH half-
key and composes a response in the form of (ID′, gy, R, Ek1 (z),
MACk2 (Ek1 (z))), where k1 and k2 are keys derived from the full
DH key, i.e. k1 = h(0, gxy) and k2 = h(1, gxy). ID′ is h(z), the
pre-image of the request ID. The response also includes R from
the route discovery message (unchanged), and a message authen-
tication code (MAC) of z. F keeps a record of z, D, and the DH
key for later use. (Every message from the same source must be
tagged with z to allow F to look up the shared key.) F sends this
7If the shared DH key is gxy, where x and y are private keys, then
one DH half-key is gx and the other is gy.
8If identical requests are received from multiple neighbors, all
their identities are stored.
response to the physical neighbor D from whom he received the re-
quest, and also floods the original request, decrementing the scope.
The resulting source route is shown in Figure 2.
Once D receives a route reply, he looks up h(h(z)) in a table of
previous request IDs to verify that the request was correctly opened
and to find the next hop where the response must be sent. He con-
structs a “route token,” encrypts it with his public key, and prepends
the resulting ciphertext to the route contained in the response. He
also removes an equal-length token from the end of the route string.
The new token identifies the next and previous hops along that
route, and can only be decrypted by D. The encryption should
include a random component to prevent every token that points to
the same node from being identical, since the route is visible to
intermediate nodes. D then sends the response to the appropriate
physical neighbor. In this way, the originator of the request (A)
will get back a series of tokens that are meaningless to her, but that
comprise a source route to her logical neighbor. Additionally, since
A generated the original random route string, she can ensure that it
passes some rudimentary sanity checks: she knows the exact length
of the route since she iteratively increased the scope of the flood, al-
lowing her to check that only the correct number of routing tokens
have been changed. An incorrect count would indicate that some-
one is not following the protocol, and the route should be discarded.
Since A is likely to get multiple replies to a route request, she
must arbitrarily select a reply message from which to extract rout-
ing information. (More than one message can be used to build re-
dundancy into the routing table.) We must be careful to defend
against multiple adversarial replies, although any such countermea-
sure would ultimately prove futile since a single adversary “close”
the A may respond on behalf of any and all adversaries in the net-
work. To reduce the number of adversaries in A’s routing table,
she should first select a random physical neighbor from whom she
has received at least one response, and then select one of those re-
sponses at random. The intuition behind this strategy is that the
distribution of DHT IDs should be similar independent of which
“direction” in the network the request is routed, so the number
of responses from each physical neighbor should be comparable.
A large response set may indicate an adversarial node. We avoid
wormhole attacks [26] since A already knows the cost of each route
– the scope of the flood – and thus knows that each route returned
for a given scope has the same cost.
After route discovery, A sets up shared keys with each node
along the physical route in a process similar to constructing a Tor
tunnel [16]. While A does not know the identities or pseudonyms
of nodes along the route and cannot authenticate their DH keys, the
final DH key (shared with F ) is authenticated, since only a node
with a given pseudonym prefix could have decoded the half-key. A
can use this information to detect man-in-the-middle attacks.
DHT routing. Once the logical routing table has been built, MCON
routing is identical to DHT routing, with the exception that mes-
sages to every logical hop must traverse a number of physical hops.
When searching, A hashes the search term to determine the des-
tination (X) and the closest logical hop in A’s routing table (F ).
She then retrieves the DH key and index z shared with F , along
with the source route (B, C, D) and the associated keys shared
with each physical hop. A uses identity-based encryption to en-
cipher the hash of the search term so only a node logically close
to X can open the message. (Authenticating the final logical hop
prevents arbitrary DHT nodes falsely claiming responsibility for a
given key.) She composes a message containing z and the result-
ing ciphertext, encrypts it to F using the shared DH key, attaches
a MAC, and onion-wraps it such that each physical hop must re-
move a layer of encryption to forward the message. Route tokens
395are included in the onion-wrapped portions so that each hop only
receives its own token.
DHT (overlay) messages are in the form of (ID, EP1 (R1,
EP2 (R2, E...(R..., z, Ek1 (M )), MACk2 (ID, z, Ek2 (M ))))), Pi
is the ith physical hop in the route and ID is the message identifier,
followed by repeated layers of onion encryption containing route
tokens. The inner-most onion layer is composed using the verified
DH key shared with the logical hop and contains a message M for
the final DHT hop. M is in the format of IBEL(h(search term)),
where L is the DHT (logical) destination.
Onion wrapping. Onion-wrapping messages and randomizing rout-
ing tokens prevents A, B, and C from linking messages or learning
the MCON topology. However, any one of them may monitor the
amount of time between query and response along a given source
route, and can deduce the magnitude of the ID prefix match be-
tween the source and destination nodes. (Messages sent to an early
logical hop along a route will take a long time to return a result,
while messages sent from the last logical hop to the query desti-
nation would see an almost immediate response.) We can prevent
this attack by asking each logical hop to delay query responses for
a fixed amount of time. Since the number of logical hops required
to complete a query is uniform for a given network size, and since
each logical hop knows its logical distance from the destination, the