高级 NoSQLi
NoSQL 注入并不新鲜，但 NodeJS 章节的目的是展示更新的框架和语言以及如何潜在地引进
新的漏洞。例如，Node.js 有一个 qs 模块，它具有将 HTTP 请求参数转换为 JSON 对象的特
定语法。默认情况下，qs 模块在 Express 中使用“body-parser”中间件的一部分。
qs 模块：一个查询字符串解析和字符串化库，增加了一些安全性。
[https://www.npmjs.com/package/qs]
这是什么意思？如果使用 qs 模块，如果在参数中使用括号表示法，POST 请求将在服务器端
转换为 JSON。因此，看起来像用户名 [value] = admin&password [value] = admin 的 POST
请求将转换为 {"username"：{"value"："admin"}，"password"：{"value"："admin" }} 。现在，qs
模块也将接受并转换 POST 参数以协助 NoSQLi：
79
第3章 抛传——Web 应用程序漏洞利用
例如，我们可以发出如下的 POST 请求：
username=admin&password[$gt]=
服务器端请求转换将转换为：
{"username": "admin", "password":{"$gt":""}
现在看起来类似于传统的 NoSQLi 攻击。
现在，我们的请求看起来与上一节中的 NoSQLi 相同。让我们看看这个操作：
转到 http://chat:3000/nosql2
打开 Burp Intercept
使用 admin 登录：
修改 POST 参数：
username=admin&password[$gt]=&submit=login
你应该可以使用 admin 登录了！你已使用 Express Framework 使用的 qs 模块解析器执行
NoSQL 注入，作为解析器中间件的一部分。但等等，还有更多！如果你不知道要攻击哪个用
户名怎么办？我们可以使用同样的攻击来查找和登录其他帐户吗？
如果不是使用密码的话，那我们也可以尝试使用用户名吗？在这种情况下，NoSQLi POST 请
求看起来像：
username[$gt]=admin&password[$gt]=&submit=login
上面的 POST 请求实际上是在数据库中查询下一个大于 admin 的用户名，并使用密码字段生
成一个 TRUE 语句。如果成功，你应该在管理员之后按字母顺序作为下一个用户登录。继续
这样做，直到找到 superaccount 。
更多 NoSQL Payload：
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20Injection
https://blog.websecurify.com/2014/08/hacking-nodejs-andmongodb.html
https://www.owasp.org/index.php/Testing_for_NoSQL_injection
反序列化攻击
80
第3章 抛传——Web 应用程序漏洞利用
在过去的几年中，通过网络进行的序列化/反序列化攻击变得越来越流行。我们在 BlackHat上
看到了许多不同的讨论，发现了 Jenkins 和 Apache Struts2 等常见应用程序中的关键漏洞，
并且正在开发像 ysoserial 这样工具的大量活跃研究。那么反序列化攻击有什么厉害之处呢？
在我们开始之前，我们需要了解为什么要序列化。序列化数据有很多原因，但最常用于生成
值/数据的可存储表示而不会丢失其类型或结构。序列化将对象转换为字节流，以通过网络传
输或存储。通常，转换方法涉及 XML，JSON 或特定于该语言的序列化方法。
NodeJS 中的反序列化
很多时候，发现复杂的漏洞需要深入了解应用程序。在我们的场景中，Chat NodeJS 应用程
序正在使用易受攻击的 serialize.js 版本 。可以发现这个 Node 库易受攻击，因为 “不受信任
的数据被传递到 unserialize() 函数中，攻击者通过传递一个存在 Immediately Invoked
Function Expression(IIFE)的 JavaScript 对象可以引起任意代码执行。”（
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5941 ）
让我们逐步了解攻击的细节，以便更好地了解正在发生的事情。第一，我们查看了
serialize.js 文件并快速搜索 eval（ https://github.com/luin/serialize/search?
utf8=%E2%9C%93&q=eval&type= ）。通常，允许用户输入进入 JavaScript eval 语句是坏的
消息，因为 eval() 执行原始 JavaScript。如果攻击者能够将 JavaScript 注入此语句，他们
将能够在服务器上执行远程执行代码。
其次，我们需要创建一个序列化的 payload，它将被反序列化，并通过我们的 JavaScript
payload require('child_process').exec('ls') .
{“thp”:“_$$ND_FUNC$$_function (){require(‘child_process’).exec(‘DO SYSTEM COMMANDS HER
E’, function(error, stdout, stderr) { console.log(stdout) });}()”}
上面的 JSON 对象将通过以下的请求 (){require('child_process').exec('ls')} 进入
unserialize 函数中的 eval 语句，为我们提供远程代码执行。要注意的最后一部分是结尾括号
添加了“()”，因为没有它我们的函数就不会被调用。第一个发现此漏洞的研究员 Ajin Abraham
发现，使用立即调用的函数表达式或 IIFE（ https://en.wikipedia.org/wiki/Immediately-
invoked_function_expression ）将允许在创建后执行该函数。有关此漏洞的更多详细信息，
请访问：https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5941 。
在我们的聊天应用程序示例中，我们将查看 cookie 值，该值正在使用此易受攻击的库进行反
序列化：
转到 http://chat:3000
81
第3章 抛传——Web 应用程序漏洞利用
代理 burp 中的流量并查看 cookie
识别一个 cookie 名称“donotdecodeme”
将该 Cookie 复制到 Burp Suite Decoder 和 Base64 中进行解码
如前所述，每种语言都有其独特的地方，NodeJS 也不例外。在 Node/Express/Pug 中，你无
法直接写入 Web 目录，但是可以像在 PHP 中一样访问它。必须有一个指向文件夹的指定路
径，该文件夹既可写又可访问到公共网络。
创建有效 payload
在开始之前，请记住实验中的所有这些 payload 都可以从这里复制粘
贴：http://bit.ly/2qBDrFo
获取原始 payload 并修改你的 shell 执行“'DO SYSTEM COMMANDS HERE”
{"thp":"_$$ND_FUNC$$_function(){require('child_process').exec('DO SYSTEM COMMANDS HERE
', function(error, stdout, stderr) {console.log(stdout)});}"}
例：
82
第3章 抛传——Web 应用程序漏洞利用
{"thp":"_$$ND_FUNC$$_function(){require('child_process').exec('DO SYSTEM COMMANDS
HERE', function(error, stdout, stderr) { console.log(stdout) });}()"}
由于原始 Cookie 已编码，我们必须通过 Burp Decoder/Encoder 对我们的 payload 进行
base64编码 *示例 payload：
eyJ0aHAiOiJfJCRORF9GVU5DJCRfZnVuY3Rpb24gKCl7cmVxd
注销，打开Burp拦截，并转发/（home）请求
将 cookie 修改为新创建的 Base64 payload
转发流量，因为公用文件夹是/的路由，你应该能够打开浏览器并转到
http://chat:3000/hacked.txt
你现在可以进行远程执行代码！随意对此系统进行后期利用。首先尝试访问
。
/etc/passwd
在 node-serialize 模块的源代码中，我们可以利用函数表达式，这对于使用用户输入执行此操
作的任何 JavaScript/NodeJS 应用程序来说都是一个严重的问题。这种糟糕的做法让我们攻
陷了这个应用程序。
参考文献：
83
第3章 抛传——Web 应用程序漏洞利用
https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-
remote-code-execution/
https://github.com/luin/serialize
https://snyk.io/test/npm/node-serialize?severity=high&severity=medium&severity=low
https://blog.websecurify.com/2017/02/hacking-node-serialize.html
模板引擎攻击——模板注入
模板引擎由于其模块化和简洁的代码与标准 HTML 相比而被更频繁地使用。模板注入是指用
户输入直接传递到渲染模板，允许修改底层模板。这可以在 wiki，WSYWIG 或电子邮件模板
中恶意使用。这种情况很少发生在无意中，所以它经常被误解为只是 XSS。模板注入通常允
许攻击者访问底层操作系统以获取远程代码执行。
在下一个示例中，你将通过 Pug 对我们的 NodeJS 应用程序执行模板注入攻击。我们无意中
将自己暴露给模板注入，使用带有用户输入的元重定向，使用模板文字 ${} 直接在 Pug 中呈
现。重要的是要注意模板文字允许使用换行符，这是我们必须破坏段落标记，因为 Pug 是空
格和换行符，类似于 Python 。
在 Pug 中，第一个字符或单词表示表示标签或功能的 Pug 关键字。你也可以使用缩进指定多
行字符串，如下所示：
p.
这是段落缩进。
这仍然是段落标记的一部分。
以下是 HTML 和 Pug 模板的示例：
上面的示例文本显示了它在 HTML 中的外观以及相应的 Pug Markup 语言的外观。通过模板
和字符串插值，我们可以创建快速，可重用且高效的模板
84
第3章 抛传——Web 应用程序漏洞利用
模板注入示例
聊天应用程序容易受到模板注入攻击。在下面的应用程序中，我们将看看我们是否可以与
Pug 模板系统进行交互。这通常可以通过检查我们提供的输入参数是否可以处理基本操作来
完成。James Kettle 写了一篇关于攻击模板和与底层模板系统交互的大论文（
http://ubm.io/2ECTYSi ）。
与 Pug 交互：
转到 http://chat:3000 并使用任何有效帐户登录
转到 http://chat:3000/directmessage 并输入用户和评论以及“发送”，接下来，返回 Direct
Message 页面并尝试将 XSS payload 输入到用户参数 
http://chat:3000/ti?
user=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&comment
这表明应用程序容易受到 XSS 的攻击，但我们可以与模板系统进行交互吗？
在 Burp 历史记录中，查看服务器请 request/response 的响应 /ti?user= ，并将请求发
送到 Burp Repeater（ctrl+r）
85
第3章 抛传——Web 应用程序漏洞利用
测试基本操作
我们可以通过将它传递给算术字符串来测试模板注入的 XSS 易受攻击参数。如果我们的输入
被读取，它将识别它易受模板注入的影响。这是因为模板（如编码语言）可以轻松支持评估
算术运算符。
测试基本操作符：
在 Burp Repeater 中，测试 /ti 上的每个参数以进行模板注入。我们可以通过传递9乘
9这样的数学运算来做到这一点。
我们可以看到它没有用，我们没有得到81，请记住，我们的用户输入包含在段落标记
内，所以我们可以假设我们的 Pug 模板代码看起来像这样：
p Message has been sent to !{user}
利用 Pug 的特点：
正如我们之前所说，Pug 是空格分隔的（类似于 Python），换行符开始一个新的模板输
入，这意味着如果我们可以突破 Pug 中的当前行，我们可以执行新的模板代码。在这种
情况下，我们将打破段落标记 ，如上所示，并执行新的恶意模板代码。为此，我们
将不得不使用一些 URL 编码来利用此漏洞（ http://bit.ly/2qxeDiy ）。
让我们逐步完成每个要求以执行模板注入：
首先，我们需要触发一个新行并突破当前模板。这可以使用以下字符完成：
%0a new line
其次，我们可以通过使用“=”符号来利用 Pug 中的算术函数
86
第3章 抛传——Web 应用程序漏洞利用
%3d%编码“=”符号
最后，我们可以输入我们的数学方程式