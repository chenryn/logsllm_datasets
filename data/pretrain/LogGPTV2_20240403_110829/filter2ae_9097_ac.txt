        rc->_image    = StripPath(IMG_Name(SEC_Img(RTN_Sec(rtn))).c_str());
        rc->_address  = RTN_Address(rtn);
        rc->_icount   = 0;
        rc->_rtnCount = 0;
        // 添加到routines列表
        rc->_next = RtnList;
        RtnList   = rc;
        RTN_Open(rtn);
        // 在routine入口处插入一个call，增加call计数
        RTN_InsertCall(rtn, IPOINT_BEFORE, (AFUNPTR)docount, IARG_PTR, &(rc->_rtnCount), IARG_END);
        // 对于routine中的每条指令
        for (INS ins = RTN_InsHead(rtn); INS_Valid(ins); ins = INS_Next(ins))
        {
            // 插入对docount函数的调用，增加该rtn中的指令计数
            INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_PTR, &(rc->_icount), IARG_END);
        }
        RTN_Close(rtn);
    }
    // 退出函数，打印每个procedure的名字和计数
    VOID Fini(INT32 code, VOID* v)
    {
        outFile _next)
        {
            if (rc->_icount > 0)
                outFile _name _image _address _rtnCount _icount 
    \#include "pin.H"
    \#include 
    \#include 
    using std::cerr;
    using std::endl;
    std::ofstream* out = 0;
    //=======================================================
    //  Analysis routines
    //=======================================================
    // 从内存转移到寄存器中
    ADDRINT DoLoad(REG reg, ADDRINT* addr)
    {
      *out 
    #include 
    using std::cerr;
    using std::dec;
    using std::endl;
    using std::hex;
    using std::ios;
    using std::ofstream;
    using std::string;
    KNOB KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool", "o", "invocation.out", "specify output file name");
    ofstream OutFile;
    /*
     * Analysis routines
     */
    VOID Taken(const CONTEXT* ctxt)
    {
        ADDRINT TakenIP = (ADDRINT)PIN_GetContextReg(ctxt, REG_INST_PTR);
        OutFile << "Taken: IP = " << hex << TakenIP << dec << endl;
    }
    VOID Before(CONTEXT* ctxt)
    {
        ADDRINT BeforeIP = (ADDRINT)PIN_GetContextReg(ctxt, REG_INST_PTR);
        OutFile << "Before: IP = " << hex << BeforeIP << dec << endl;
    }
    VOID After(CONTEXT* ctxt)
    {
        ADDRINT AfterIP = (ADDRINT)PIN_GetContextReg(ctxt, REG_INST_PTR);
        OutFile << "After: IP = " << hex << AfterIP << dec << endl;
    }
    /*
     * Instrumentation routines
     */
    VOID ImageLoad(IMG img, VOID* v)
    {
        for (SEC sec = IMG_SecHead(img); SEC_Valid(sec); sec = SEC_Next(sec))
        {
            // RTN_InsertCall()和INS_InsertCall()谁先出现谁先执行
            // 在下面的代码中，IPOINT_AFTER在IPOINT_BEFORE之前执行。
            for (RTN rtn = SEC_RtnHead(sec); RTN_Valid(rtn); rtn = RTN_Next(rtn))
            {
                // 打开RTN.
                RTN_Open(rtn);
                // IPOINT_AFTER通过在一个routine中对每个return指令插桩实现。
                // Pin会尝试查找所有的return指令，成不成功则是另外一回事（有点可爱23333）。
                RTN_InsertCall(rtn, IPOINT_AFTER, (AFUNPTR)After, IARG_CONTEXT, IARG_END);
                // 检查routine中的每条指令
                for (INS ins = RTN_InsHead(rtn); INS_Valid(ins); ins = INS_Next(ins))
                {
                    if (INS_IsRet(ins))
                    {
                        // 插桩每条return指令
                        // IPOINT_TAKEN_BRANCH总是最后使用
                        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)Before, IARG_CONTEXT, IARG_END);
                        INS_InsertCall(ins, IPOINT_TAKEN_BRANCH, (AFUNPTR)Taken, IARG_CONTEXT, IARG_END);
                    }
                }
                // 关闭RTN.
                RTN_Close(rtn);
            }
        }
    }
    VOID Fini(INT32 code, VOID* v) { OutFile.close(); }
    /* ===================================================================== */
    /* Print Help Message                                                    */
    /* ===================================================================== */
    INT32 Usage()
    {
        cerr << "This is the invocation pintool" << endl;
        cerr << endl << KNOB_BASE::StringKnobSummary() << endl;
        return -1;
    }
    /* ===================================================================== */
    /* Main                                                                  */
    /* ===================================================================== */
    int main(int argc, char* argv[])
    {
        //  初始化
        if (PIN_Init(argc, argv)) return Usage();
        PIN_InitSymbols();
        // 注册ImageLoad函数
        IMG_AddInstrumentFunction(ImageLoad, 0);
        PIN_AddFiniFunction(Fini, 0);
        // 写入到文件
        OutFile.open(KnobOutputFile.Value().c_str());
        OutFile.setf(ios::showbase);
        // 开始执行，无返回
        PIN_StartProgram();
        return 0;
    }
### **_10\. 查看函数参数值_**
功能：使用RTN_InsertCall()查看函数参数
执行和查看输出：
    $ ../../../pin -t obj-intel64/malloctrace.so -- /bin/cp makefile obj-intel64/malloctrace.so.makefile.copy
    $ cat malloctrace.out
    malloc(0x5a1)
     returns 0x7f87d8ce2190
    malloc(0x4a1)
     returns 0x7f87d8ce2740
    malloc(0x10)
     returns 0x7f87d8ce2bf0
    malloc(0x9d)
     returns 0x7f87d8ce2c00
    malloc(0x28)
     returns 0x7f87d8ce2ca0
    malloc(0x140)
     returns 0x7f87d8ce2cd0
    malloc(0x26)
     returns 0x7f87d8ce2e10
    free(0)
    malloc(0x4b0)
     returns 0x7f87c4428000
    malloc(0x26)
     returns 0x7f87c44284b0
    malloc(0x22)
     returns 0x7f87c44284e0
    free(0)