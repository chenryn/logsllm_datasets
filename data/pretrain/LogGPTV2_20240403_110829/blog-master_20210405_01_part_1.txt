## hash join, hash表选择问题: 小表一定是hash table吗?   
### 作者    
digoal    
### 日期    
2021-04-05     
### 标签    
PostgreSQL , cost , 选择性 , 唯一值个数 , 选择性      
----    
## 背景    
两个表JOIN时, 如果使用hashjoin, 那么hash表的选择和什么有关:  
- 唯一值个数  
- 记录数  
- 如果有where filter:   
    - where filter后的记录数  
    - where filter后的唯一值个数  
最后, 都是看cost! 代价低的优先.   
怎么观察? 用pg_hint_plan可以观察.  
[《PostgreSQL hint pg_hint_plan 的详细用法》](../202103/20210327_03.md)    
https://pghintplan.osdn.jp/hint_list.html  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/optimizer/path/costsize.c;h=05686d01942b873476b11e9c6014e598ffa2d349;hb=dfc843d465689d2c2af8b0e01c66c51ccaae2343  
先rewrite, 然后生成paths, 然后计算cost(计算代价的部分, 可以看到hashjoin 选择不同的hash table时 cost和记录数, mcv(most common values), 唯一值个数都有关系.), 最后选择代价低的.     
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/optimizer/README;h=4aefde8bb18d6d61d77a527d73dc1798e8fea2ac;hb=dfc843d465689d2c2af8b0e01c66c51ccaae2343  
src/backend/optimizer/path/costsize.c   
```  
3714 /*  
3715  * initial_cost_hashjoin  
3716  *    Preliminary estimate of the cost of a hashjoin path.  
3717  *  
3718  * This must quickly produce lower-bound estimates of the path's startup and  
3719  * total costs.  If we are unable to eliminate the proposed path from  
3720  * consideration using the lower bounds, final_cost_hashjoin will be called  
3721  * to obtain the final estimates.  
3722  *  
3723  * The exact division of labor between this function and final_cost_hashjoin  
3724  * is private to them, and represents a tradeoff between speed of the initial  
3725  * estimate and getting a tight lower bound.  We choose to not examine the  
3726  * join quals here (other than by counting the number of hash clauses),  
3727  * so we can't do much with CPU costs.  We do assume that  
3728  * ExecChooseHashTableSize is cheap enough to use here.  
3729  *  
3730  * 'workspace' is to be filled with startup_cost, total_cost, and perhaps  
3731  *      other data to be used by final_cost_hashjoin  
3732  * 'jointype' is the type of join to be performed  
3733  * 'hashclauses' is the list of joinclauses to be used as hash clauses  
3734  * 'outer_path' is the outer input to the join  
3735  * 'inner_path' is the inner input to the join  
3736  * 'extra' contains miscellaneous information about the join  
3737  * 'parallel_hash' indicates that inner_path is partial and that a shared  
3738  *      hash table will be built in parallel  
3739  */  
3740 void  
3741 initial_cost_hashjoin(PlannerInfo *root, JoinCostWorkspace *workspace,  
3742                       JoinType jointype,  
3743                       List *hashclauses,  
3744                       Path *outer_path, Path *inner_path,  
3745                       JoinPathExtraData *extra,  
3746                       bool parallel_hash)  
3747 {  
3748     Cost        startup_cost = 0;  
3749     Cost        run_cost = 0;  
3750     double      outer_path_rows = outer_path->rows;  
3751     double      inner_path_rows = inner_path->rows;  
3752     double      inner_path_rows_total = inner_path_rows;  
3753     int         num_hashclauses = list_length(hashclauses);  
3754     int         numbuckets;  
3755     int         numbatches;  
3756     int         num_skew_mcvs;  
3757     size_t      space_allowed;  /* unused */  
3758   
3759     /* cost of source data */  
3760     startup_cost += outer_path->startup_cost;  
3761     run_cost += outer_path->total_cost - outer_path->startup_cost;  
3762     startup_cost += inner_path->total_cost;  
3763   
3764     /*  
3765      * Cost of computing hash function: must do it once per input tuple. We  
3766      * charge one cpu_operator_cost for each column's hash function.  Also,  
3767      * tack on one cpu_tuple_cost per inner row, to model the costs of  
3768      * inserting the row into the hashtable.  
3769      *  
3770      * XXX when a hashclause is more complex than a single operator, we really  
3771      * should charge the extra eval costs of the left or right side, as  
3772      * appropriate, here.  This seems more work than it's worth at the moment.  
3773      */  
3774     startup_cost += (cpu_operator_cost * num_hashclauses + cpu_tuple_cost)  
3775         * inner_path_rows;  
3776     run_cost += cpu_operator_cost * num_hashclauses * outer_path_rows;  
3777   
3778     /*  
3779      * If this is a parallel hash build, then the value we have for  
3780      * inner_rows_total currently refers only to the rows returned by each  
3781      * participant.  For shared hash table size estimation, we need the total  
3782      * number, so we need to undo the division.  
3783      */  
3784     if (parallel_hash)  
3785         inner_path_rows_total *= get_parallel_divisor(inner_path);  
3786   
3787     /*  
3788      * Get hash table size that executor would use for inner relation.  
3789      *  
3790      * XXX for the moment, always assume that skew optimization will be  
3791      * performed.  As long as SKEW_HASH_MEM_PERCENT is small, it's not worth  
3792      * trying to determine that for sure.  
3793      *  
3794      * XXX at some point it might be interesting to try to account for skew  
3795      * optimization in the cost estimate, but for now, we don't.  
3796      */  
3797     ExecChooseHashTableSize(inner_path_rows_total,  
3798                             inner_path->pathtarget->width,  
3799                             true,   /* useskew */  
3800                             parallel_hash,  /* try_combined_hash_mem */  
3801                             outer_path->parallel_workers,  
3802                             &space_allowed,  
3803                             &numbuckets,  
3804                             &numbatches,  
3805                             &num_skew_mcvs);  
3806   
3807     /*  
3808      * If inner relation is too big then we will need to "batch" the join,  
3809      * which implies writing and reading most of the tuples to disk an extra  
3810      * time.  Charge seq_page_cost per page, since the I/O should be nice and  
3811      * sequential.  Writing the inner rel counts as startup cost, all the rest  
3812      * as run cost.  
3813      */  
3814     if (numbatches > 1)  
3815     {  
3816         double      outerpages = page_size(outer_path_rows,  
3817                                            outer_path->pathtarget->width);  
3818         double      innerpages = page_size(inner_path_rows,  
3819                                            inner_path->pathtarget->width);  
3820   
3821         startup_cost += seq_page_cost * innerpages;  
3822         run_cost += seq_page_cost * (innerpages + 2 * outerpages);  
3823     }  
3824   
3825     /* CPU costs left for later */  
3826   
3827     /* Public result fields */  
3828     workspace->startup_cost = startup_cost;  
3829     workspace->total_cost = startup_cost + run_cost;  
3830     /* Save private data for final_cost_hashjoin */  
3831     workspace->run_cost = run_cost;  
3832     workspace->numbuckets = numbuckets;  
3833     workspace->numbatches = numbatches;  
3834     workspace->inner_rows_total = inner_path_rows_total;  
3835 }  
3836   
3837 /*  
3838  * final_cost_hashjoin  
3839  *    Final estimate of the cost and result size of a hashjoin path.  
3840  *  
3841  * Note: the numbatches estimate is also saved into 'path' for use later  
3842  *  
3843  * 'path' is already filled in except for the rows and cost fields and  
3844  *      num_batches  
3845  * 'workspace' is the result from initial_cost_hashjoin  
3846  * 'extra' contains miscellaneous information about the join  
3847  */  
3848 void  
3849 final_cost_hashjoin(PlannerInfo *root, HashPath *path,  
3850                     JoinCostWorkspace *workspace,  
3851                     JoinPathExtraData *extra)  
3852 {  
3853     Path       *outer_path = path->jpath.outerjoinpath;  
3854     Path       *inner_path = path->jpath.innerjoinpath;  
3855     double      outer_path_rows = outer_path->rows;  
3856     double      inner_path_rows = inner_path->rows;  
3857     double      inner_path_rows_total = workspace->inner_rows_total;  
3858     List       *hashclauses = path->path_hashclauses;  
3859     Cost        startup_cost = workspace->startup_cost;  
3860     Cost        run_cost = workspace->run_cost;  
3861     int         numbuckets = workspace->numbuckets;  
3862     int         numbatches = workspace->numbatches;  
3863     int         hash_mem;  
3864     Cost        cpu_per_tuple;  
3865     QualCost    hash_qual_cost;  
3866     QualCost    qp_qual_cost;  
3867     double      hashjointuples;  
3868     double      virtualbuckets;  
3869     Selectivity innerbucketsize;  
3870     Selectivity innermcvfreq;  
3871     ListCell   *hcl;  
3872   
3873     /* Mark the path with the correct row estimate */  
3874     if (path->jpath.path.param_info)  
3875         path->jpath.path.rows = path->jpath.path.param_info->ppi_rows;  
3876     else  
3877         path->jpath.path.rows = path->jpath.path.parent->rows;  
3878   
3879     /* For partial paths, scale row estimate. */  
3880     if (path->jpath.path.parallel_workers > 0)  
3881     {  
3882         double      parallel_divisor = get_parallel_divisor(&path->jpath.path);  
3883   
3884         path->jpath.path.rows =  
3885             clamp_row_est(path->jpath.path.rows / parallel_divisor);  
3886     }  
3887   
3888     /*  
3889      * We could include disable_cost in the preliminary estimate, but that  
3890      * would amount to optimizing for the case where the join method is  
3891      * disabled, which doesn't seem like the way to bet.  
3892      */  
3893     if (!enable_hashjoin)  
3894         startup_cost += disable_cost;  
3895   
3896     /* mark the path with estimated # of batches */  
3897     path->num_batches = numbatches;  
3898   