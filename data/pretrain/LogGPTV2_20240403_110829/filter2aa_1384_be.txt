weren’t the case, when you do eventually compromise a vulnerable target, a command
What if I already use Linux as my primary OS?
Even if you are running Linux as your bread-and-butter OS, you should get used to the
idea of setting up a VM for pentesting. There are many benefits to doing things this
way, including the ability to snapshot your base system with all of your tools set up
and configured. Then, after each engagement, you can revert to the snapshot, remov-
ing any changes you may have made that were specific to a particular pentest. Addi-
tionally, you can add an extra layer of security by encrypting your VM’s virtual hard
disk, which is a good practice that I also recommend.
223
APPENDIX A
Building a virtual pentest platform
shell is often the best-case scenario in terms of remote access to your compromised host.
If you aren’t already an avid command-line ninja, you’ll definitely be on your way by the
time you finished reading this appendix.
A.2.1
Managing Ubuntu packages with apt
Although Ubuntu and several other Linux distributions come with a GUI for manag-
ing packages, you’re going to use the command-line tool apt exclusively for installing
and maintaining Linux packages. The apt command is used to interact with the
Advanced Packaging Tool (APT), which is how all Debian Linux–based distributions
manage their OS packages. You have to preface these commands with sudo because
they require root access to the Linux filesystem. 
 The first thing you should do after creating your Linux VM is to update your pack-
ages; to do that, run the following two commands from your Linux VM. The first com-
mand updates the repositories with the latest information about available packages,
and the second installs any available package updates to these existing packages that
are already on your system:
sudo apt update
sudo apt upgrade
Next you should install some additional packages:
 The open-vm-tools and open-vm-tools-desktop packages will provide you
with a more comfortable user experience with your VM, allowing you to do
things like make the window full screen and share files between your VM and
host machine. 
 The openssh client and server packages will let you remotely manage your
Linux VM using SSH. 
Python-pip is a preferred method of installing many open source Python tools
and frameworks. 
 Vim is an awesome and extremely capable text editor that I highly recommend
you use. 
 Curl is a powerful command-line tool for interacting with web servers. 
 Tmux is a terminal multiplexer that has entire books written about it. In short,
it can make your Linux terminal an extremely efficient place to multi-task. 
net-tools provides a series of useful commands for general network trouble-
shooting.
The following command installs all of these packages:
~$ sudo apt install open-vm-tools open-vm-tools-desktop openssh-client
openssh-server python-pip vim curl tmux medusa libssl-dev libffi-dev
python-dev build-essential net-tools -y
224
APPENDIX A
Building a virtual pentest platform
A.2.2
Installing CrackMapExec
CrackMapExec (CME) is a powerful framework written in Python. Although it has
many useful features, this book primarily focuses on its ability to perform password
guessing and remote administration of Windows systems. Installing it is straightfor-
ward if you use pip. Just type pip install crackmapexec, and you’re all set. You need
to restart your bash prompt after the installation to use the cme command.
A.2.3
Customizing your terminal look and feel
You can spend hours customizing the fonts, colors, prompts, and status bars to get the
terminal looking exactly the way you want it to. This is a personal decision that I
encourage you to explore. I don’t want to spend too much time on it here; instead,
here’s a link to my personal terminal customizations on my GitHub page: https://
www.github.com/r3dy/ubuntu-terminal. It includes a detailed README file with
installation instructions; feel free to check it out if you want to copy me until you’ve
had a chance to develop your own preferences. That said, I’m sure there will be some
things you don’t like; play around until you find what works for you. 
 Appendix B includes useful information about tmux, a powerful terminal multi-
plexer that can help you to manage multiple terminal windows more effectively while
doing pentesting or any other general computing in a Linux environment. If you are
not using tmux regularly, then I recommend reading that section of appendix B
before continuing with setting up your VM.
A.3
Installing Nmap
Nmap is an open source network mapping tool used daily by information security pro-
fessionals throughout the world. The primary use for Nmap on a network pentest is to
discover live hosts and enumerate listening services on those hosts. Remember, as a sim-
ulated attacker, you don’t know where anything is, so you need a reliable way to discover
information about your target network. For example, host webprod01.acmecorp.local
might have an instance of Apache Tomcat/Coyote JSP listening on TCP port 8081 that
could be vulnerable to attack. As a pentester, this is something you are interested in
knowing, and Nmap is just the tool to help you discover it.
A.3.1
NSE: The Nmap scripting engine
Before you type apt install nmap, I want to explain a little about the Nmap scripting
engine (NSE). NSE scripts are standalone scripts that can be added to an Nmap scan
at runtime to allow you to tap into the powerful Nmap engine to repeat a workflow
you’ve identified that typically is targeted against a specific network protocol on a sin-
gle host. Throughout chapters 3 and 4, you’re going to use the core Nmap functional-
ity to discover and identify live network hosts and services running on those systems.
Here’s an example. 
 Due to the rate at which NSE scripts are being developed and included in the main
Nmap repository, it’s best to stick to the latest build—sometimes referred to as the
bleeding-edge repository. If you simply rely on whatever version of Nmap your Linux
225
APPENDIX A
Building a virtual pentest platform
distribution ships with, you are likely to miss out on recently developed functionality.
This becomes blatantly clear if you run the following commands at your terminal
command prompt. As you can see from the output, at the time of writing this, Ubuntu
ships with Nmap version 7.60.
~$ sudo apt install nmap 
~$ nmap -V
Nmap version 7.60 ( https://nmap.org )     
Platform: x86_64-pc-linux-gnu
Compiled with: liblua-5.3.3 openssl-1.1.0g nmap-libssh2-1.8.0 libz-1.2.8
libpcre-8.39 libpcap-1.8.1 nmap-libdnet-1.12 ipv6
Compiled without:
Available nsock engines: epoll poll select
Look in the /usr/share/nmap/scripts directory (where all the NSE scripts are stored)
by running the following command. You can see that version 7.60 comes with 579
scripts:
~$ ls -lah /usr/share/nmap/scripts/*.nse |wc -l
579
That’s 579 individual use cases for which a security researcher was tasked with con-
ducting a repetitive task against a large number of hosts and was kind enough to cre-
ate an automated solution that you can benefit from, should you find yourself in a
similar encounter.
 Now go to GitHub and take a look at the current bleeding-edge release of Nmap at
https://github.com/nmap/nmap. At the time of writing, Nmap is on an entirely new
Listing A.1
Installing Nmap using the built-in OS package manager
Example of an NSE script use case
Suppose you are conducting a pentest for a large company—think 10,000+ IP
addresses. After running Nmap, you discover that your target network has 652 serv-
ers running a VNC screen-sharing application on TCP port 5900. As a simulated net-
work attacker, your next thought should be to wonder if any of these VNC services
were configured sloppily with a default or non-existent password. If you had only a
handful of systems to test, you could attempt a VNC connection with each of them
and type in a couple of default passwords one at a time—but this would be a night-
mare to repeat against 652 different servers.
A security professional named Patrik Karlsson presumably found himself in precisely
this situation, because he created a handy NSE script called vnc-brute that can be
used to quickly test VNC services for default passwords. Thanks to Patrik’s work and
the work of countless others, Nmap comes with hundreds of useful NSE scripts that
you might need on a pentest.
Nmap version 7.60 was 
installed when I used the 
built-in OS package manager.
226
APPENDIX A
Building a virtual pentest platform
release, version 7.70, that presumably has new features, enhancements, and bug fixes.
Additionally, the scripts directory contains 597 NSE scripts—almost 20 more than the
previous version. This is why I prefer to compile from source and strongly recommend
that you do the same. 
NOTE
If you’ve never compiled an application from source on Linux before,
don’t worry. It’s straightforward and requires only a handful of commands
from the terminal. In the next section, I walk you through compiling and
installing Nmap from the source.
A.3.2
Operating system dependencies
For Nmap to compile correctly on your Ubuntu VM, you need to install the necessary
OS dependencies, which are libraries that contain pieces of code that nmap requires to
operate. 
 Run the following command to install these libraries:
sudo apt install git wget build-essential checkinstall libpcre3-dev libssl
dev libpcap-dev -y
The output will be similar to the following:
Reading package lists... Done
Building dependency tree       
Reading state information... Done
wget is already the newest version (1.19.4-1ubuntu2.2).
The following additional packages will be installed:
  dpkg-dev fakeroot g++ g++-7 gcc gcc-7 git-man libalgorithm-diff-perl
  libalgorithm-diff-xs-perl libalgorithm-merge-perl libasan4 libatomic1
  libc-dev-bin libc6-dev libcilkrts5 liberror-perl libfakeroot libgcc-7-dev
  libitm1 liblsan0 libmpx2 libpcap0.8-dev libpcre16-3 libpcre32-3
  libpcrecpp0v5 libquadmath0 libssl-doc libstdc++-7-dev libtsan0 libubsan0
  linux-libc-dev make manpages-dev
Suggested packages:
  debian-keyring g++-multilib g++-7-multilib gcc-7-doc libstdc++6-7-dbg
  ...
It’s important to note that as time progresses, these dependencies change, so the com-
mand that installs these dependencies may not work when you read this. That said, if
you run into trouble when you run the command, the error message in the Ubuntu
output should be all you need to sort out the solution. 
 For example, if libpcre3-dev fails to install, you can run the command apt
search libpcre; you might find that it’s been changed to libpcre4-dev. With that
information, you can modify the command and move on. I keep an up-to-date set of
installation instructions on my blog: https://www.pentestgeek.com/tools/how-to-
install-nmap.
227
APPENDIX A
Building a virtual pentest platform
A.3.3
Compiling and installing from source
After you’ve installed all the dependencies for Ubuntu, check out the latest stable
release of Nmap from GitHub. You can do this by running the following command at
the prompt in your VM terminal:
~$ git clone https://github.com/nmap/nmap.git
When that’s finished, change into the newly created Nmap directory with the follow-
ing command:
~$ cd nmap/
From in the Nmap directory, you can run the pre-build configuration script by prefac-
ing the script with ./, which in Linux means the current directory. Run the following
pre-build configuration script:
~$ ./configure
Next, build and compile the binaries using the make command:
~$ make
Finally, install the executables to the /usr/local/bin directory by running this
command: 
~$ sudo make install
When the make command completes (“NMAP SUCCESSFULLY INSTALLED”),
you’re all set; Nmap is now installed on your system. You should be able to run Nmap
from any directory on your Ubuntu VM, and you should also be running the latest sta-
ble release. 
~$ nmap -V
nmap version 7.70SVN#A ( https://nmap.org )
Platform: x86_64-unknown-linux-gnu
Compiled with: nmap-liblua-5.3.5 openssl-1.1.0g nmap-libssh2-1.8.2 libz
1.2.11 libpcre-8.39 libpcap-1.8.1 nmap-libdnet-1.12 ipv6
Compiled without:
Available nsock engines: epoll poll select  
Listing A.2
Compiling and Installing Nmap from source
Nmap version 7.70 is installed
when you compile from source.
Source install does not replace the apt install
If you couldn’t help yourself and went ahead and installed Nmap using apt install
nmap from your terminal, notice that after completing the source-based installation in
this section, the command nmap -V still returns the out-of-date version.
228
APPENDIX A
Building a virtual pentest platform
A.3.4
Exploring the documentation
The last thing to do before moving on to the next section is to familiarize yourself with
the Nmap quick help file, which you can open by typing the following command: 
nmap -h
It’s lengthy output, so you might want to pipe it using the more command:
nmap -h | more
That way, you can page through the output one terminal screen at a time. 
 By the time you finish this book, you’ll have learned too many Nmap commands to
remember. This is when the quick help file piped into grep can be handy. Suppose
you think to yourself, “How do I pass an argument to an NSE script again?” You can
type nmap -h | grep -I script to quickly navigate to that section of the help file.
~$ nmap -h | grep -i script 
SCRIPT SCAN:
  -sC: equivalent to --script=default
  --script=:  is a comma separated list 
  --script-args=: provide arguments to scripts
  --script-args-file=filename: provide NSE script args in a file
  --script-trace: Show all data sent and received
  --script-updatedb: Update the script database.
  --script-help=: Show help about scripts.
            is a comma-separated list of script-files 
           script-categories.
  -A: Enable OS detection, version detection, script scanning, and traceroute
If the quick help file doesn’t go into enough detail, you can use the manpages for a
deeper explanation of any particular component of Nmap. Type man nmap at a termi-
nal prompt to access the manpages for Nmap.
A.4
The Ruby scripting language
The last thing I want to do in this section is enter the never-ending and never-productive
battle about which scripting language is the best. Instead, I want to offer an easy intro-
duction for those of you who haven’t done much scripting before, and I’m going to do
that with the Ruby scripting language. If you’re married to another language and are
competent enough to automate repetitive tasks, then by all means, feel free to skip this
section.
Listing A.3
Search Nmap’s help menu with the grep command
(continued)
This happens because a few files are left over even if you uninstalled the apt pack-
age. The solution to this problem is to follow the instructions at https://nmap.org/
book/inst-removing-nmap.html to remove Nmap from your system. Once that’s com-
plete, you can go back through the source-based installation.
The large output from nmap -h can be 
trimmed down to a specific string using grep.
229
APPENDIX A
Building a virtual pentest platform
 If you’re wondering why I’ve chosen Ruby instead of Python or Node.js or some-
thing else, the answer is simple: it’s the scripting language I know best. When I’m
faced with a tedious and repetitive task that I need to automate, such as sending a
POST request to several web servers and searching the HTTP response for a given
string, my mind starts to visualize Ruby code to do it, simply because Ruby was the first
language I spent time learning. Why did I choose to learn Ruby? Because the
Metasploit framework is written in Ruby, and one day I needed to make some custom-
izations to a module. (I had so much fun learning Ruby that I eventually authored a
few of my own modules, which are now part of the Metasploit framework.) 
 Throughout my career, I’ve written dozens of little scripts and tools to automate
bits and pieces of a network pentest, some of which are covered throughout this book.
It will be easier for you to follow along if you’re familiar with some key Ruby concepts
and gems. Because you’re setting up your pentest platform right now, it’s the perfect
time to get your fingers dirty and write some code.
A.4.1
Installing Ruby Version Manager 
First, the easy part: installing Ruby. Instead of using whatever version ships by default with
Ubuntu, I strongly recommend you use Ruby Version Manager (RVM) to install Ruby. It
does a fantastic job taking care of all the various OS dependencies and code libraries that
each version needs and keeps them separate from one another. RVM is a great way to man-
age the many different versions of the Ruby core language as well as version-compatible
gems, which you’ll no doubt have to switch between when using various tools. As luck
would have it, the fine folks at the RVM project have created a si bash script you can use
to install it (https://rvm.io/rvm/install). Use the following steps to install RVM:
1
Install the required GNU Privacy Guard (GPG) keys to verify the installation
packages with the following single command:
~$ gpg -–keyserver hkp://pool.sks-keyservers.net -–recv-keys
409B6B1796C275462A1703113804BB82D39DC0E3
7D2BAF1CF37B13E2069D6956105BD0E739499BDB
2
Run the following command to pull down the RVM installation script while
simultaneously installing the current latest stable version of Ruby, which was
2.6.0 at the time of writing:
~$ \curl -sSL https://get.rvm.io | bash -s stable --ruby
3
Follow the instructions from the command-line installation script, which tells
you to source the rvm script to set a bunch of environment variables that are
required for RVM to function like a native Linux command:
~$ source ~/.rvm/scripts/rvm
I recommend appending this command to your .bashrc file, which ensures that
it gets executed each time you open a terminal: 
~$ echo source ~/.rvm/scripts/rvm >> ~/.bashrc
230
APPENDIX A
Building a virtual pentest platform
You should now be able to run the rvm list command and get output similar to the
following:
~$ rvm list
=* ruby-2.6.0 [ x86_64 ]
# => - current
# =* - current && default
#  * - default 
A.4.2
Writing an obligatory Hello World example
I’m going to follow an ancient tradition that dates back to a time before I can remem-
ber and teach you how to write your very own Ruby script that does nothing except