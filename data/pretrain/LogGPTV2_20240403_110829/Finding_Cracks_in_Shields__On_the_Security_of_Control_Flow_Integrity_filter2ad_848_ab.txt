the CFG with runtime context.
However, the claimed boundary is not accurate. In practice, CFI-
protected ICT instructions still can jump to unintended targets.
More details are discussed in section 7.
3.2 CFI Evaluations
Given the large amount of proposed CFI solutions, one would
wonder which CFI is better. Three relevant works have been pro-
posed to evaluate them as shown in Table A4.
Burow et.al. [9] conducted a survey on the accuracy, security and
performance of CFI mechanisms. Regarding the security evaluation,
they profiled the runtime transfer targets of ICT instructions for
the SPEC CPU2006 benchmarks, then used the profiled targets as
Session 6B: Exploitation and Defenses CCS '20, November 9–13, 2020, Virtual Event, USA1823Figure 2: Overview of our security evaluation framework, consisting of two components, i.e., CScan and CBench. CScan instruments target
programs to accurately collect the number of feasible targets for each ICT at runtime. CBench consists of a set of vulnerable programs and
typical attacks against them, and demonstrates the effectiveness of target CFI mechanisms.
the lower bounds on the legitimate targets and compared them to
the legitimate targets claimed by CFI mechanisms. However, the
profiling was not complete due to the limitation of dynamic testing,
and the comparison to lower bounds did not reflect the actual
security guarantee of CFI mechanisms. Our evaluation shows that
its claims on the strengths of some different CFI mechanisms are
not accurate.
As illustrated in Figure 2, CScan obtains the accurate runtime fea-
sible targets by debugging the target CFI-protected benchmark
applications and testing the feasibility of potential targets at each
ICT instruction. ICTs with fewer targets do not guarantee the in-
feasibility of exploits, but it can reflect the difficulty of exploits to
a certain extent. Besides, compared with our method, AIR is too
rough to even tell coarse-grained CFI from fine-grained CFI [9].
CONFIRM [68] presents a test suite to evaluate the compatibil-
ity and applicability of control-flow integrity solutions, without
considering the security guarantees. For example, inside the vtbl-
call and tail-call test cases of CONFIRM, no vulnerability-oriented
tests exist and only the compatibility and performance are tested.
Instead, CBench focuses on security testing.
LLVM-CFI [39] uses a unified static analysis framework to simu-
late security policies, thus the estimation cannot precisely reflect
the metric on real-world programs. Moreover, its static analysis
framework could not simulate modern CFI mechanisms that dy-
namically refine legitimate targets for ICT instructions.
Therefore, existing security evaluations of CFI mechanisms are not
adequate. More specifically, they cannot answer the aforementioned
two research questions, i.e., what the real boundaries enforced by
CFI mechanisms are, and whether the risks between the claimed
boundaries of CFI mechanisms and the real boundaries are realistic.
In this paper, we try to answer these questions. Table A4 shows
the detailed comparison between our work and existing CFI evalua-
tions. We evaluated two new security methods on ICT instructions
to provide a more precise result on the security of CFI mechanisms.
4 Methodology
4.1 Our Methods
To precisely evaluate the security boundary and answer the three
questions raised in Section 1, we propose CScan and CBench respec-
tively to evaluate the practical security of the CFI mechanisms
through two orthogonal aspects.
Effectiveness against typical attacks. The types of vulnera-
bilities and exploitation methods may vary. A CFI mechanism could
occasionally miss certain corner cases and fail to provide adequate
defenses. Therefore, its effectiveness against a comprehensive set
of typical attacks also shows the strength of its security. Ideally,
if a set of typical attacks is complete, i.e., including all potential
types of attacks in the real world, the security boundary of a CFI
mechanism can be represented as the effectiveness against this set.
However, it is infeasible in practice to include all potential attacks.
Therefore, the effectiveness evaluation is not complete. But still,
given a comprehensive set of typical attacks, we could evaluate
a CFI mechanism’s effectiveness, and demonstrate corner cases
where it fails to protect, and even prove whether the feasible tar-
gets exceeding the ideal boundary are realistic (i.e., RQ3). CBench
provides a comprehensive set of typical attacks, and evaluates the
effectiveness of target CFI mechanisms on these attack scenarios.
4.2 CScan: Feasible Targets Recognition
Assumptions. We assume the CFI-protected applications will be
attacked by a powerful attacker, who has found proper vulnerabili-
ties and is able to exploit them to read from or write arbitrary value
to arbitrary accessible addresses at any time. This threat model is
powerful yet realistic. On the other hand, we assume target CFI
mechanisms satisfying two common requirements: 1) they use some
specific signals or handler functions to process security violations.
2) they complete the security checks before the ICT instruction
jumps. Most CFI solutions meet these requirements.
4.2.1 Overall Workflow At the high level, CScan acts like a
hypothetical attacker, by modifying ICT transfer targets at runtime
and validating whether it could pass the deployed CFI security
checks. Specifically, it recognizes all runtime feasible targets for
ICT instructions in target CFI-protected applications as follows.
First, it locates ICT instructions in target applications, and traces
back instructions that are responsible for setting their transfer tar-
gets with certain source values (e.g., from memory). A powerful
attacker could overwrite these in-memory source values with vul-
nerabilities and then tamper the transfer targets. Therefore, CScan
simulates an attacker by inserting debug breakpoints after these
Runtime feasible targets. For each CFI-protected ICT instruc-
tion, it can jump to a specific set of targets at runtime. A powerful
yet realistic attacker could hijack this ICT instruction to (and only
to) jump to any target in this set. Therefore, the set of runtime
feasible targets is the real security boundary of a CFI mechanism,
which includes the claimed boundary and some unintended targets.
The number of runtime feasible targets of a specific ICT instruction
represents the runtime risks of being hijacked at that instruction
(i.e., RQ1). Moreover, the number of unintended targets represents
the flaws introduced by the target CFI implementation (i.e., RQ2).
Session 6B: Exploitation and Defenses CCS '20, November 9–13, 2020, Virtual Event, USA1824transfer target assignment instructions and modifying the runtime
transfer targets externally.
Second, it locates security violation handler functions used by
CFI mechanisms, and instruments them to restore the program ex-
ecution context. Each time the handler is invoked, the hypothetical
attacker fails to pass the CFI check. Then, the context restoring op-
eration in the handler enables the attacker to test another transfer
target fast and safely.
Third, it instruments the identified ICT instructions with code
stubs, which could dump the addresses of the ICT instruction and
its runtime transfer target. The recorded information reflects all ICT
instructions’ runtime feasible targets that could pass the deployed
CFI checks.
4.2.2 Design Choices To provide a precise evaluation of run-
time feasible targets, CScan must meet the following requirements.
• Locate ICT instructions precisely and exhaustively. CScan recog-
nizes ICT instructions with a source code analysis pass, and
traces back instructions that define the transfer targets with
state-of-the-art use-def analysis.
• Enumerate transfer targets selectively. The instrumented debug-
ging stubs that act as a hypothetical attacker cannot enumerate
all potential transfer targets due to the high overhead. Instead,
only executable memory addresses will be enumerated. More-
over, each debugging stub will be invoked at most once.
• Retrieve CFI check results accurately. CScan hooks the error han-
dler to get notified when the forged transfer targets fail to pass
CFI checks, and instruments ICT instructions to dump forged
transfer targets successfully pass CFI checks.
4.3 CBench: Typical Attacks Evaluation
Although CScan provides the real boundary of a CFI mechanism,
it cannot determine whether the unintended targets are realistic,
and what attack scenarios will cause the CFI to fail. Therefore, we
further propose CBench to evaluate CFI mechanisms’ effectiveness
against typical attacks. In practice, there are many types of pro-
grams and vulnerabilities, and many ways to exploit them. So, to
conduct a thorough evaluation, we constructed a comprehensive
set of typical attacks in CBench. CBench can be used as a sanity
check for CFI developers. Beyond that, it also reflects the general
security level of CFI to a certain extent.
4.3.1 Typical ICT Hijacking For x86 applications, there are
three types of ICT instructions, i.e., indirect calls, indirect jumps
and return instructions. Each could be exploited in different ways.
Indirect Call Hijacking Indirect calls can be hijacked if the func-
tion pointers being used are tampered with.
• Function pointer overwrite. A typical exploit is overwriting the
• Function pointer reuse. Attackers could also overwrite pointers
or offsets used in a memory dereference, loading an existing
function pointer from memory and hijacking the control flow
when this pointer is used.
function pointer to an arbitrary address.
Virtual Call (VTable) Hijacking Virtual call is a special type
of indirect calls, which is usually used by dynamical dispatchers,
e.g., those used by C++ polymorphism. Targets of virtual calls
are retrieved from VTables, which are indexed by objects that are
writable, and thus could be tampered with.
• VTable injection. Attackers could inject a fake VTable consisting
of fake virtual function pointers into memory, and overwrite
vulnerable objects, then hijack the control flow when virtual
functions are being invoked.
• VTable reuse. Attackers could also overwrite vulnerable objects
to point to existing VTables, and hijack virtual calls to existing
virtual functions. COOP [51] is a typical VTable reuse attack.
Indirect Jump Hijacking Indirect jumps could be exploited in a
same way as indirect calls. There are two common cases in practice.
• Tail call. A tail function call usually will be compiled into an
indirect jump. Attackers could exploit them in the same way as
indirect calls. But certain defenses may overlook this case.
• Setjmp/longjmp. This function pair is used by C programs to
handle exceptions. Setjmp will save the current context into a
buffer jmp_buf, and longjmp will restore the saved context by
an indirect jump. Attackers could overwrite jmp_buf and hijack
the control flow when longjmp is invoked.
Return Hijacking Return addresses are stored on the stack and
could be overwritten by attackers to launch hijacking.
• Return address overwrite. Attackers could overwrite the return
addresses on the stack to point to arbitrary code regions, includ-
ing ROP gadgets. ROP [49] is a typical method to bypass data
execution prevention (DEP).
• Return address reuse. Attackers could overwrite the return ad-
dresses to existing return addresses, to bypass certain security
checks, e.g., PARTS [34].
4.3.2 Typical Vulnerabilities. Different vulnerabilities enable
different types of attacks. Some attacks can break certain CFI schemes.
Therefore, CBench covers a wide range of vulnerabilities.
• Buffer overflow and underflow. Such vulnerabilities cause out-of-
bound memory read or write. There are two specific types of
buffer overflows, including stack-based and heap-based.
• Integer overflow. Due to the limitation of hardware resources,
integers in programs are of limited ranges. Arithmetic operations
would yield results exceeding the ranges and break programs’
semantics.
• Use after free (UAF). This is a typical type of temporal vulnera-
bilities, in which a dangling pointer refers to a memory region
allocated to a new object. Dereferencing the dangling pointer
will corrupt the new object.
• Race condition. This is another type of temporal vulnerability,
in which two threads could access a shared resource (e.g., mem-
ory) concurrently. Different access orders could yield different
program behaviors.
• Type confusion. Polymorphic objects could be used as base class
instances (i.e., up-cast) or derived class instances (i.e., down-cast)
at runtime. Unsafe down casts will wrongly interpret a smaller
base class object as a larger derived class object, causing memory
corruption when such an object is dereferenced.
4.3.3 Compatibility Issues When deploying CFI mechanisms
to real world applications, there are several compatibility issues,
which could also cause security concerns in some cases.
Inline assembly support Some applications may have some in-
line assembly code. CFI solutions that solely rely on source code
analysis may overlook these assembly code, and leave potential
Session 6B: Exploitation and Defenses CCS '20, November 9–13, 2020, Virtual Event, USA1825attack surface. Attackers could exploit ICT instructions in inline
assembly code to bypass CFI.
DSO support Modern applications consist of multiple modules, i.e.,
DSO (Dynamic Shared Objects). However, many CFI mechanisms
only retrieve information from a single module, and cannot provide
full support for ICT instructions that transfer to targets in external
modules (DSO).
• Cross-DSO Forward Control-flow Transfer. Indirect call or jump
instructions could jump to targets in external modules. Even
worse, the transfer targets (e.g., function pointers) could be re-
trieved from external modules as well. CFI mechanisms may fail
to determine the validity of these targets.
• Cross-DSO Backward Control-flow Transfer. Return instructions
could also transfer to external modules as well, especially when
a CFI-protected function is invoked as a callback in external
modules.
vDSO support. For performance reasons, Linux kernel exports
a small set of frequently invoked kernel routines to user space
processes. As a result, the runtime address space of a target program
has some external code and data. CFI mechanisms may overlook
this part too and leave potential attack surfaces. CBench also covers
this case in the benchmark.
5 Implementation
In this section, we’ll present the implementation details of (1)
CScan, i.e., the tool used for precisely evaluating the number of
runtime feasible targets, and (2) CBench, i.e., the test suite used
for verifying the effectiveness of CFI mechanisms against typical
attacks.
5.1 CScan
We implemented CScan in Rust with 3500 LoC in total. The main
workflow of our CScan is described as follows.
First of all, CScan semantically analyzes the benchmark applica-
tions’ source code, and finds instructions that load ICT instructions’
transfer targets from memory. If the memory is writable, CScan
will insert a software interrupt instruction INT3 after the load in-
struction. Otherwise, the transfer targets are loaded from read-only
memory (e.g., VTable), and CScan iteratively finds the source (e.g.,
objects) of such memory and instruments INT3 if the source is
writable. If the transfer targets are loaded from a chain of read-only
memory, then no instrumentation will be made.
At runtime, these software interrupts will be triggered, and
CScan will disassemble the preceding memory load instruction
with a customized disassembler based on Capstone [1]. It then over-
writes the value of the register used in the memory load operation
with crafted values, to simulate an attacker who can tamper with
writable memory. CScan will iterate all executable code addresses
(for direct transfer target loads) or all accessible addresses (for
nested loads like virtual function pointer loads) and use them as
crafted values one by one. Then, CScan monitors the program’s
further behavior.
If the tampered transfer targets cannot pass the security checks
employed by the CFI mechanism, specific error handlers, e.g., UD2,
INT3, exit functions, will be executed to prevent control-flow hi-
jacking attacks. CScan listens to such signals or hooks such handlers,
and restores the program context to the previously instrumented
INT3 instruction, then begins next iteration of transfer target over-
writing.
If the tampered transfer targets pass the security checks em-
ployed by the CFI mechanism, the ICT instruction will be hijacked
to the tampered target. CScan sets a breakpoint before each ICT. At
runtime, if such a breakpoint is hit, CScan will record the address
of the ICT instruction as well as the tampered transfer target. The
set of such addresses represent the exact runtime feasible targets
of each ICT instruction.
Performance optimization. An ICT may be executed multiple
times at runtime, but it is not necessary to test its feasible targets
every time.
For context-insensitive CFI schemes such as Clang-CFI, Clang-
CFI-DSO, TypeArmor , MCFI, and TSX-based CFI, transfer targets
allowed by each ICT instruction will not change. To accelerate
testing, CScan dynamically replaces the INT3 with NOP. As a result,
CScan will only detect and test each ICT for once.
For context-sensitive CFI schemes, e.g., OS-CFI and CFI-LB, trans-
fer targets allowed by each ICT instruction may change each time
it is executed. CScan collects the context information of each ICT
instruction, and dynamically filter out tested contexts. Note that,
πCFI is a special context-sensitive CFI solution, which gradually
extends the transfer target set of an ICT instruction each time the
ICT is executed, and reduces the security guarantee gradually. To
reflect the highest security strength, each πCFI-protected ICT is
tested only once.
Corner cases For compatibility, we have made special adjustments
to CScan for some CFI implementations.
TSX-based CFI allows jumping to any executable address begin-
ning with a special TSX transaction instruction. CScan therefore
traverses all executable address spaces to find the same machine
code as the instruction, and uses them as crafted transfer targets.
MCFI/πCFI maintains two tables: one Bary Table storing IDs
of ICT instructions and one Tary Table storing the IDs of transfer
targets, and queries these two tables to find IDs of a specific ICT
and the target being used, then checks if they match. Only targets
recorded in the Tary Table could pass the CFI check. Therefore,
CScan only iterates targets in this table to test target ICT instruc-
tions.
Lockdown caches checked target addresses to optimize runtime
performance. If a target address is found in the cache, Lockdown
directly jumps to that address without CFI checks. To accurately get
the number of addresses passed through the check, we modified the
default configuration of Lockdown to suppress the cache. Further,
Lockdown does not store transfer targets in registers, but passes
them to the CFI check functions as parameters via the stack. CScan
therefore overwrites these parameters directly.
5.2 CBench
To demonstrate the effectiveness of each CFI scheme against
typical attacks, we developed the CBench test suite consisting of 23
vulnerable C/C++ programs. These programs represent different
attack scenarios, and are briefly listed in Table A5. We then protect
these vulnerable programs with target CFI mechanisms, and eval-
uate the hardened programs’ security with crafted attacks. There