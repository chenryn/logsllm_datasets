照以下公式：
单价=平台能力项资源 TCO/成本驱动因素最大月取值
 平台能力项资源TCO：包括该平台能力项所直接使用的资
源成本总和；
 成本驱动因素最大月取值：按照一定月份周期内，平台能
力项统计到的每月成本驱动因素数量，取最大月份的数量；
４．出账
确定单价之后，业务使用方对成本就有了稳定的预期。账单可
以根据计量的颗粒度进行输出，为便于技术方和业务方及时了解成
⽹址：SRE-Elite.com 20 0 微信：SRE精英联盟
SRE实践白皮书（2023年）
本变动情况，至少实现 T+1 按天维度的成本明细账单，能细化实现
小时或者分钟成本明细粒度更优。
通过公式可以输出费⽤账单：成本=单价*⽤量
1）技术方： 对单价的负责，是平台能力项的成本责任方，通
过对底层资源的合理选型、技术架构的优化、资源利用率的提升和
资源管控的强化，推动平台能力项单价的优化，将优化成果转化为
成本收益，提升平台的成本竞争力。
2）业务方： 对用量的负责，通过管理和优化业务应用实例的
数量、存储量、生命周期、资源占用方式（共享 /独占）、调用策
略，降低对平台能力项的使用量，从而节约业务成本。
示例说明：
以 K8S 容器计算平台作为例子，按照每个集群进行定价，建立
每个集群的成本驱动因素监控和统计，定期输出 K8S 算力成本账
单。
平台能力项：K8S 容器计算服务，不同集群由于机型和地区不
一样，采用不同单价计费
业务对象标签：业务 A，业务 B，业务 C ...（通过应用元数据一
级模块归集映射，与财务结算单位对应）
成本驱动因素：考虑人力及时间投入，建立单一的综合指标-算
力核时，包含 CPU 和内存用量按照一定比例系数折算的用量之和，
比例系统可以参考行业或按照云厂商主机的 CPU 和内存成本比例统
计。
监控和统计：T+1天输出
⽹址：SRE-Elite.com 20 1 微信：SRE精英联盟
SRE实践白皮书（2023年）
平台能力项资源TCO：以K集群为范围计算 TCO，K集群TCO=
云主机成本+磁盘成本+日志服务成本+网络成本
成本驱动因素最大月取值：以近半年为周期统计，K 集群最大
月取值为 5000核时
K集群单价=K集群 TCO/5000核时=xx元/核时
账单：T+1 天输出，如业务 A 一天使用了 1000 核时，则业务 A
算力成本=1000*K 集群单价；如业务 B 一天使用了 1500 核时，则业
务 B算力成本=1500*K集群单价
3.7.2 异构应用平台工程建设
异构应用（Heterogeneous Application）是指由多种不同技术、
架构、编程语言或平台构建的应用程序。在异构应用中，各个组件
可能运行在不同的操作系统上，使用不同的数据库系统，或者由不
同的编程语言编写，由此而带来了一系列的运维复杂度，如集成和
管理的复杂性、技术栈的多样性导致的维护成本等。
面向异构应用，平台工程建设需要考虑不同应用系统和平台之
间的异构性，包括不同的数据格式、协议、接口等，通过技术手段
实现数据的转换、集成和共享，通过管理手段，包括对异构系统的
统一管理、安全管理、维护管理等。
⽹址：SRE-Elite.com 20 2 微信：SRE精英联盟
SRE实践白皮书（2023年）
3.7.2.1 总体设计
如图所示，面向异构应的平台工程的总体结构可划分为 3 层，
自下而上依次是：原子平台层、PaaS 层和 SaaS 层，其中 PaaS 层包
括 aPaaS 和 iPaaS 两大核心能力，SaaS 根据场景分为一级 SaaS 和二
级 SaaS 。除此之外，平台工程本身也需要提供平台服务管理和安全
审计的能力。
3.7.2.2 aPaaS结构设计
aPaaS，全称是 Application Platform as a Service，即应用程序平
台即服务。与传统的 PaaS（Platform as a Service）平台不同，aPaaS
更加注重应用程序的开发和部署，而不是基础设施和资源的管理。
aPaaS 平台提供了一系列的工具和服务，包括应用程序开发、测试、
部署、托管、监控和管理等。开发人员可以使用这些工具和服务来
快速构建、测试和部署应用程序，而无需关注底层的基础设施和资
源管理。
⽹址：SRE-Elite.com 20 3 微信：SRE精英联盟
SRE实践白皮书（2023年）
aPaaS 主要提供 2 个能力，面向开发者的工具和面向应用的运行
环境托管服务。
1．开发者工具
1）统一的后台开发框架
一套完善的前后台开发框架可以帮助开发人员更快地开发应用
程序，并且可以简化代码的编写和维护。
（1）分析并确定框架功能：需要提供统一登录、身份认证、安
全防护等基础的功能，提供消息通知、日志记录、访问统计等通用
的组件服务，提供多种数据库访问方案；提供基本的预处理函数或
公共组件使用的代码编写样例等。
（2）选择框架的技术语言：不同的编程语言，需要提供不同的
开发框架，当前主流的编程预言师 Python、Golang、Java 等。可以
根据平台工程开发者的技术特性，按需提供必要的开发框架。
（3）研发前制定编码规范：为了保证代码质量和一致性，除了
最基础的命名规范、注释规范、代码格式外，还需要包括平台级的
公共变量规范、系统变量规范、错误码规范、日志输出规范等，并
通过代码审查等手段确保开发者遵循规范。
2）通用的前端组件库
一组根据业务场景和产品特性预先定义好的前端组件和代码
库，在进行原子平台开发/SaaS 开发的过程中，可以帮助开发人员快
速地构建出高效、可维护的产品页面。
（1）制定设计规范：由产品经理和设计师主导，根据行业标准
⽹址：SRE-Elite.com 20 4 微信：SRE精英联盟
SRE实践白皮书（2023年）
和业务场景，制定前端组件共同遵守的设计规范，确定最基本的设
计元素，包括颜色、字体、图标、网格和布局等。
（2）交互设计：基于基本元素，设计一套常用的 UI 组件和交互
模式，如按钮、表单、导航、对话框、搜索等。保证各产品间一致
的视觉交互体验，延续相同的用户习惯，减少认知上的理解差距，
减少无意义的探索和重复设计。
（3）统一组件实现：组件包含了通用的场景和产品的经典交互
逻辑有前端组件，如横向导航必要字段与交互方式、页脚 footer的通
用内容与交互、项目空间选择器、无权限通用页面、版本日志展示
框等，更能提升研发效率及平台的一致性。
（4）持续更新前端技术语言：一些著名的通用的前端组件库包
括 React、Vue 和 Angular 等。这些组件的技术语言都在不断发展，
选择了一个语言后，对应的前端组件库要不断更新。
3）可视化开发（LessCode or LowCode）
可视化开发（LessCode or LowCode）：是一种可视化编程语言，
用于创建可拖放、可配置的界面和交互式应用。
（1）分析并确定产品功能：需要提供的基础功能有可视化代码
编辑器、拖拽式的前端页面生成方案，还需要提供在线调试和预览
能力，与 PaaS 的应用托管能力打通，支持一键部署并发布应用。
（2）前后台协作模式：这种模式需要预定义好前台和后台的数
据和协议规范，开发者先以前端的身份在可视化开发平台生成需要
的产品 Web 页面，再以后台开发者的身份编写业务逻辑、处理数据
⽹址：SRE-Elite.com 20 5 微信：SRE精英联盟
SRE实践白皮书（2023年）
存储等。
（3）可扩展的模板市场：提供常用的前端交互逻辑函数，这些
函数可以统一使用 JS 语法编写代码，通过发起 Ajax 请求，获取接口
数据，转发后台配置，绑定组件事件，配合页面生命周期等，实现
不同的功能。
（4）可扩展的模板市场：提供官网类、后台管理类、公告类等
应用级模板，包含应用完整的功能，如：函数，变量，数据库等，
可直接基于应用模板创建新应用，无需从 0 到 1 进行组装，只需要
将模板对应内容进行修改即可快速完成应用的开发。
4）增强服务（如 AIDev）
在提供了基础的开发者工具后，可以结合当下先进的技术，降
低工具的使用门槛，提高工具效率。
（1）AIDev：通常指的是人工智能（ AI）开发（Dev），通过这
个技术可以与现有产品的资料查询、技术支持、代码生成等场景结
合，进一步降低工具的使用门槛。
（2）微前端：一种前端和后端协作开发的模式，可以在大型
的、复杂的 SaaS 研发中使用该技术方案，将组件拆分成多个小型
的、独立的服务，通过 API 进行通信和协作。只要提前预定每个组
件都要遵循的一套标准和规范， 就可以将这种模式应用到 Web 应
用、移动应用、桌面应用等。
2．运行时环境托管服务
1）k8s容器托管
⽹址：SRE-Elite.com 20 6 微信：SRE精英联盟
SRE实践白皮书（2023年）
Kubernetes（通常简称为 K8s）是一种开源的容器编排和管理平
台，它本身特性有自动化容器部署、升级、回滚、监控、扩展和负
载均衡等。SRE 更侧重于建设产品化 Web 页面，让开发者无需掌握
专业的k8s技能，无需关注基础设施细节，也能使用容器托管能力。
（1）规范用户操作路径：将代码库、开发框架、可视化开发等
开发者需要的资源通过产品化的 Web 页面呈现出来，开发者就可以
按照“我要开发--创建应用--填写应用基本信息--选择开发框架--选择
代码库”的路径完成 SaaS 开发前的简单准备工作；当开发者完成业
务逻辑代码后，再继续按照“应用部署--部署到预发布环境--部署到
生产环境”的路径，完成应用的发布上线。
（2）提供最佳运行资源：每一个应用运行时，提供基础设施的
基本要求，如运行时 Pod的副本数、CPU、内存、存储要求等。
2）应用部署流水线建设
制定开发的代码分支管理规范和制品晋级规范，可以进一步减
少产品-研发-运维-测试各岗位间沟通成本，快速建设应用部署的流
水线。
（1）规范代码分支管理规范：用语义化版本号 “主版本号.次版
本号.修订号（Major.Minior.Patch）”，严格遵守版本号递增的规则。
a. 主版本号 Major：
 产品侧：大功能，影响现有用户的使用习惯，新增亮点服
务
 研发侧：不兼容的变更，影响软件的升级与维护，影响基
⽹址：SRE-Elite.com 20 7 微信：SRE精英联盟
SRE实践白皮书（2023年）