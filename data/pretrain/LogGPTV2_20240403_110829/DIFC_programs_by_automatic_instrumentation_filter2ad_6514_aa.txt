title:DIFC programs by automatic instrumentation
author:William R. Harris and
Somesh Jha and
Thomas W. Reps
DIFC Programs by Automatic Instrumentation ∗
William R. Harris
Univ. of Wisconsin, Madison
Dept. of Computer Sciences
PI:EMAIL
Somesh Jha
Univ. of Wisconsin, Madison
Dept. of Computer Sciences
PI:EMAIL
Thomas Reps †
Univ. of Wisconsin, Madison
Dept. of Computer Sciences
PI:EMAIL
ABSTRACT
Decentralized information ﬂow control (DIFC) operating
systems provide applications with mechanisms for enforcing
information-ﬂow policies for their data. However, signiﬁ-
cant obstacles keep such operating systems from achieving
widespread adoption. One key obstacle is that DIFC operat-
ing systems provide only low-level mechanisms for allowing
application programmers to enforce their desired policies. It
can be diﬃcult for the programmer to ensure that their use
of these mechanisms enforces their high-level policies, while
at the same time not breaking the underlying functionality
of their application. These are issues both for programmers
who would develop new applications for a DIFC operating
system and for programmers who would port existing appli-
cations to a DIFC operating system.
Our work signiﬁcantly eases these tasks. We present an
automatic technique that takes as input a program with no
DIFC code, and two policies: one that speciﬁes prohibited
information ﬂows and one that speciﬁes ﬂows that must be
allowed. Our technique then produces a new version of the
input program that satisﬁes the two policies. To evaluate our
technique, we implemented it in an automatic tool, called
Swim (for Secure What I Mean), and applied it to a set of
real-world programs and policies. The results of our evalu-
ation demonstrate that the technique is suﬃciently expres-
sive to produce programs for real-world policies, and that
it can produce such programs eﬃciently. It thus represents
a signiﬁcant contribution towards developing systems with
strong end-to-end information-ﬂow guarantees.
†Also aﬃliated with GrammaTech, Inc.
∗Supported by NSF under grants CCF-0540955, CCF-
0810053, CCF-0904371, and CNS-0904831, by ONR under
grant N00014-09-1-0510, by ARL under grant W911NF-09-
1-0413, and by AFRL under grant FA9550-09-1-0279. Any
opinions, ﬁndings, and conclusions or recommendations ex-
pressed in this material are those of the authors and do not
necessarily reﬂect the views of NSF, ONR, ARL, and AFRL.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
Categories and Subject Descriptors
D.2.4 [Software / Program Veriﬁcation]: Formal meth-
ods; D.4.6 [Security and Protection]: Information ﬂow
controls
General Terms
Languages, Security
Keywords
Constraint Solving, DIFC, Instrumentation
1.
INTRODUCTION
Decentralized information ﬂow control (DIFC) operating
systems are a recent innovation aimed at providing applica-
tions with mechanisms for ensuring the secrecy and integrity
of their data [14, 21, 23]. To achieve this goal, a DIFC OS
associates with each process a label drawn from a partially-
ordered set. A process may send data to another process
only if the processes’ labels satisfy a certain ordering, i.e.,
label(sender) ⊆ label(receiver). A process may change its
own labels, subject to certain restrictions enforced by the
DIFC OS. Thus, processes express how they intend their in-
formation to be shared by attaching labels to OS objects,
and the DIFC OS respects these intentions by enforcing a
semantics of labels.
Previous work has concerned how to implement DIFC sys-
tems, in some cases atop standard operating systems. Fur-
thermore, some systems have formal proofs that if an appli-
cation running on the system correctly manipulates labels to
implement a policy, then the system will enforce the policy
[13]. However, for a user to have end-to-end assurance that
their application implements a high-level information-ﬂow
policy, they must have assurance that the application in-
deed correctly manipulates labels. The label manipulations
allowed by DIFC systems are expressive but low-level, so
a high-level policy is semantically distant from a program’s
label manipulations.
For the remainder of this paper, we narrow our discus-
sion from general DIFC systems to Flume [14]. In principle,
our approach can be applied to arbitrary DIFC operating
systems. However, targeting Flume yields both theoretical
and practical beneﬁts. From a theoretical standpoint, Flume
deﬁnes the semantics of manipulating labels in terms of set
operations, a well-understood formalism. From a practical
standpoint, Flume runs on Linux, giving our approach po-
tentially wide applicability. The work in [14] gives a com-
prehensive description of the Flume system.
284void ap_mpm_run()
A1: while (*)
A2:
A3:
A4:
Conn c = get_request_connection();
Conn c’ = c; c = fresh_connection();
tag_t t = create_tag();
A5:
A6:
A7:
spawn(’proxy’, [c, c’] , {t}, {t}, {t} );
spawn(’proxy’, [c’, c] , {t}, {t}, {t} );
spawn(‘worker’, [c], {t}, {t}, {} );
void proxy(Conn c, Conn c’,
Label lab, Label pos_cap, Label neg_cap )
P1: while (*)
P2:
P3:
P4:
P5:
expand_label(pos_cap);
Buffer b = read(c);
clear_label(neg_cap);
write(c’, b);
Figure 1: An example derived from the Apache
multi-process module. Key: Typewriter typeface:
original code;
code for proxy
processes to mediate interprocess communication,
added manually; shaded code :
label-manipulation
code, added automatically by Swim.
underlined code:
Flume’s label-manipulation primitives provide a low-level
“assembly language” for enforcing security policies. To il-
lustrate the gap between low-level label manipulations and
high-level policies, consider the problem of isolating Worker
processes in the server program shown in Fig. 1. Fig. 1 gives
a simpliﬁed excerpt from an Apache multi-process mod-
ule (MPM) [1]. Suppose that the program consists of all
the non-shaded code (in particular, it includes the under-
lined code). In this program, an MPM process executes the
function ap_mpm_run, iterating through the loop indeﬁnitely
(lines A1–A7). On each iteration of the loop, the MPM waits
for a new connection c that communicates information for
a service request (line A2). When the MPM receives a con-
nection, it spawns a Worker process to handle the request
sent over the connection (line A7). Along with the Worker,
the MPM process spawns two processes to serve as proxies
for when the Worker sends information to the Requester (line
A5) and receives information from the Requester (line A6).
Now consider the high-level policy that the Worker pro-
cesses should be isolated from each other: no Worker process
should be able leak information to another Worker process
through a storage channel,1 even if both processes are com-
promised and acting in collusion. It is diﬃcult to design a
server that upholds such a property: a Worker process may
be compromised through any of a multitude of vulnerabil-
ities, such as a stack-smashing attack. Once processes are
compromised, they can communicate through any of several
channels on the system, such as the ﬁle system.
However, the server can isolate Worker processes when
executed on Flume. Suppose that the server in Fig. 1 is
rewritten to include the shaded code, which makes use of
Flume label-manipulation operations. The label manipu-
lations ensure process isolation as follows. As before, an
MPM process spawns a Worker process and two Proxy pro-
cesses for each request. In addition, at line A4, the MPM
1DIFC systems do not address timing channels.
process creates a fresh, atomic tag, and then initializes the
label of the next Worker process to contain the tag, but does
not give the Worker the capability to remove the tag from
its label (line A7). This restriction on removing the tag is
the key to isolating each Worker process. It causes the la-
bel of each Worker to contain a tag that the Worker cannot
remove. Because the Flume reference monitor intercepts all
communications between processes, and only allows a com-
munication to succeed if the label of the sending process is
a subset of the label of the receiving process, no Worker can
send data successfully to another Worker. Flume associates
other system objects, such as ﬁles, with tags as well, so the
processes cannot communicate through ﬁles either.
However, while the label mechanisms provided by Flume
are powerful, their power can lead to unintended side eﬀects.
In Fig. 1, the MPM process has no control over the label of
a process that issues service requests. If the MPM gave each
Worker a unique tag and manipulated labels in no other way,
then the label of each Worker would contain a tag t, while
the label of the process that issued the request would not
contain t. Consequently, the label of the Worker would not
be a subset of the label of the receiver, and the Worker could
not send information to the Requester. The MPM resolves
this as follows. Let ProxyS be the process spawned in line
A5 to forward information from its associated Worker to the
service requester. The MPM gives to ProxyS the capability
to add and remove from its label the tag t. To receive data
from the Worker, ProxyS expands its label to include t; to
forward the data to the requester, it clears its label to be
empty. Overall, the untrusted Worker is isolated, while the
small and trusted Proxys can mediate the communication of
information from the Worker to the Requester.
This example illustrates that labels are a powerful mech-
anism for enabling application programmers to enforce
information-ﬂow policies. However, the example also illus-
trates that there is a signiﬁcant gap between the high-level
policies of programmers, e.g., that no Worker should be able
to send information to another Worker, and the manipu-
lations of labels required to implement such a policy.
It
also illustrates that these manipulations may be quite sub-
tle when balancing desired security goals with the required
functionality of an application. Currently, if programmers
are to develop applications for DIFC systems, they must re-
solve these issues manually. If they wish to instrument exist-
ing applications to run on DIFC systems, they must ensure
that their instrumentation implements their policy while not
breaking the functionality requirements of an existing, and
potentially large and complex, program. If their instrumen-
tations do break functionality, it can be extremely diﬃcult
to discover this through testing: when a DIFC system blocks
a communication, it may not report the failure, because such
a report can leak information [14]. Label-manipulation code
could thus introduce a new class of security and functionality
bugs that could prove extremely diﬃcult even to observe.
We have addressed this problem by creating an automatic
DIFC instrumenter, which produces programs that, by con-
struction, satisfy a high-level DIFC policy. Our DIFC in-
strumenter, called Swim (for Secure What I Mean), takes
as input a program with no DIFC code, and two high-level
declarative policies: one that speciﬁes prohibited informa-
tion ﬂows (e.g., “Workers should not communicate with each
other.”), and one that speciﬁes ﬂows that must be allowed
(e.g., “A Worker should be able to communicate to a proxy.”).
285own ﬁle descriptors. Instead, a process asks Flume for
a new channel, and receives back a pair of endpoints.
Endpoints may be passed to other processes, but each
endpoint may be claimed by at most one process, after
which they are used like ordinary ﬁle descriptors.
The monitor forbids a process p with label lp to send data
through endpoint e with label le unless lp ⊆ le. Likewise,
the monitor forbids data from endpoint e(cid:48) to be received by
a process p(cid:48) unless le(cid:48) ⊆ lp(cid:48) . A Flume process may create
another process by invoking the spawn command. spawn
takes as input (i) the path to the executable to be executed,
(ii) an ordered set of endpoints that the new process may
access from the beginning of execution, (iii) an initial label,
and (iv) an initial capability set, which must be a subset of
the capability set of the spawning process.2
We now describe the approach employed by Swim by dis-
cussing each step of how Swim instruments the example from
Fig. 1. Swim’s workﬂow is depicted in Fig. 2.
Programs and Policies as Inputs. Swim takes two in-
puts: a C program and a policy. The C program does not
manipulate Flume labels. For the example in Fig. 1, Swim
receives the unshaded code (i.e., the version of the server
without the calls to create_tag(), expand_label(), and
clear_label()). Swim represents programs internally using
a dialect of Communicating Sequential Processes (CSP) [2]:
it translates the C program into a CSP program that mod-
els properties relevant to DIFC instrumentation, and then
analyzes the CSP program. We use CSP as an intermediate
representation because CSP is a natural formalism for rep-
resenting programs that involve an a priori unbounded set
of processes.
Exa. 1. The following are a representative sample of the
equations generated when Swim translates the unshaded code
from Fig. 1 to CSP:
A5 = A6(cid:57) P1
P1 = P3
A6 = A7(cid:57) P1
init = A1(cid:57) R
P3 = ?r → P5
A7 = A1(cid:57) W
P5 = !s → P1
In these equations, each variable corresponds to a program
point in the C program, and each equation deﬁnes the be-
havior of the program at the corresponding point. The ex-
pressions on the right-hand sides of equations are referred
to as CSP process templates. The equation A5 = A6(cid:57) P1
denotes that a process executing A5 can make a transition
that launches two processes, one executing A6 and the other
executing P1. The equation P3 =?r → P5 denotes that a
process executing P3 can receive a message from endpoint r
and then make a transition to P5. The deﬁnitions of other
process-template variables are similar.
The process-template variables R and W refer to Requester
and Worker processes, respectively. They are deﬁned by other
CSP equations, which are not shown above.
Swim’s second input is a policy that speciﬁes the desired
information ﬂows. Policies are sets of declarative ﬂow asser-
tions, which are of two forms. A ﬂow assertion of the form
Secrecy(Source, Sink, Declass, Anc) speciﬁes that any process
executing template Source must not be able to send informa-
tion to a process executing template Sink unless (i) the infor-
mation ﬂows through a process executing template Declass,
2In our examples, we use two sets of explicit positive and
negative capabilities, rather than one set with capabilities
marked with + or −.
Figure 2: Workﬂow of the DIFC instrumenter, Swim.
When successful, Swim rewrites the input program with
label-manipulation code so that it enforces the input policy.
When unsuccessful, Swim produces a minimal subprogram
of the original program and a minimal subset of policies in
conﬂict for which Swim could not ﬁnd an instrumentation.
Thus, if a programmer provides policies that are in con-
ﬂict, Swim identiﬁes a small subset of policies that are in
conﬂict. To do so, Swim reduces the problem of correctly
instrumenting the program to a problem of solving a system
of set constraints. It feeds the resulting constraint system to
an oﬀ-the-shelf Satisﬁability Modulo Theories (SMT) solver
[6], which in our experiments found solutions to the systems
in seconds (see Tab. 4). From a solution, Swim instruments
the program. Thus the programmer reasons about informa-
tion ﬂow at the policy level, and leaves to Swim the task of
correctly manipulating labels. If the programmer provides
as input to Swim the program in Fig. 1 without the shaded
code, and a formal statement of a high-level policy similar
to the one stated above, Swim produces the entire program
given in Fig. 1.
The remainder of this paper is organized as follows: §2
gives an overview of our technique by describing the steps
that it takes to instrument the example in Fig. 1. §3 formally
describes the technique. §4 reports our experience applying
the technique to real-world programs and information-ﬂow
policies. §5 places our work in the context of other work on
DIFC systems and program synthesis. §6 concludes. Some
technical details are covered in the appendices of [9].
2. OVERVIEW
We now informally describe each step of the workﬂow of