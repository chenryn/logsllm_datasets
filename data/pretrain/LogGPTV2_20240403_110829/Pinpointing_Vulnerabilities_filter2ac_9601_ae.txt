-->\n");
syslog (LOG_ERROR , joke_str );
}
return -2;
} e l s e {
...
}
3
4
5
6
7
8
9
10
11
12
13
14
15
16 }
17 i n t syslog ( i n t priority , const char *format , ...) {
18
19
20
21
...
// process format string
// and write it to log_entry buffer
log_entry_len += vsnprintf ( log_entry_idx ,
MAX_SYSLOG_LEN - log_entry_len , format ,
args);
...
return 0;
22
23
24 }
Figure 7: Code sketch of vulnerability-related functions in CNMP.
syslog takes the user-controlled joke_str, and passes it as a
format-string argument to vsnprintf.
8
that can be recovered from the environment, such as HTML ﬁles.
However, Ravel has to record the data read from the random pool
because they cannot be reproduced.
4. DISCUSSION
In this section, we discuss potential ways to improve the design
and implementation of Ravel and the future work. First, Ravel
focuses on pinpointing vulnerabilities from a recorded attack. The
attack detector plays an important role in the overall eﬀectiveness of
Ravel. Ravel has been designed not to rely on details of the detector
– its only input is a recorded execution history that is known to
contain some attacks. Therefore, it is possible to integrate a wide
range of attack detection techniques. For example, recent advances
in control-ﬂow integrity [52, 61, 62] make it a practical choice as
the attack detector. Eﬀective and low-overhead attack detection for
data-only and other emerging attacks is still an ongoing research
topic.
Second, Ravel uses R&R to detach the time-consuming vulnera-
bility locator from the production system and make attacks repro-
ducible for oﬄine analyses. Ravel’s R&R is an always-on kernel-
based R&R system for processes. This imposes strict requirements
in its performance and storage overhead.
In the future, we plan
to integrate more techniques in eidetic systems [23] to optimize
the storage for long-running processes. As expected, this will in-
crease the performance overhead (eidetic systems have about 8% of
overhead). Another challenge is how to reduce the replay time for
long-running processes even though replaying is much faster than
recording (because most syscalls are not re-executed). To address
that, we may periodically checkpoint the process and start replaying
at the nearest checkpoints. The challenge is then how to locate
vulnerabilities from a potentially incomplete execution history.
Third, by design, Ravel can only locate attacks that change the
data ﬂow. It is ineﬀective against attacks that do not do so. For
example, SQL injections can be leveraged to execute malicious SQL
queries without exploiting any ﬂaws in the SQL server, and vulner-
abilities in Java programs can be exploited without compromising
the Java virtual machine. Other examples include attacks that mis-
use the benign/obsolete program features for malicious purposes,
such as Shellshock [65]. Moreover, the design of Ravel may cause
imprecision in the analyses. First, we use dynamic analysis to gen-
erate the program’s data-ﬂow graph (DFG). The incompleteness in
the DFG may lead to false positives. We plan to explore methods to
increase the code coverage of the dynamic analysis to build better
DFGs [58]. Second, Ravel relies on heuristics to reﬁne the loca-
tions of vulnerabilities, such as the signs of integers. Heuristics
is by nature imprecise and may introduce both false positives and
false negatives. Third, Ravel keeps track of memory lifetime to aid
the detection of double-frees and use-after-frees. This method is
less eﬀective for programs that use custom memory allocators. We
could use (more) heuristics to automatically detect custom memory
allocators.
5. RELATED WORK
In this section, we present and compare with the related work
regarding attacks and defenses of memory-based vulnerabilities.
Attack detection and exploit mitigation: the ﬁrst category of
the related work is a long stream of research in the attack detection
and exploit mitigation [1, 3, 4, 6, 11, 21, 22, 29, 33, 51, 10, 63, 64,
66, 67] (a recent survey paper provides a comprehensive overview
of these systems [59]). For example, W ⊕ X [22] and ASLR [60]
are two widely adopted exploit mitigation techniques. W ⊕ X pre-
vents executing the data and modifying the code. However, it can
Figure 8: Performance overhead of Ravel’s online components rel-
ative to the original FreeBSD system.
3.2 Performance
To make the most use of Ravel, it should be deployed in pro-
duction systems to catch in-the-wild, zero-day vulnerabilities. This
imposes a strict performance requirement on both its design and
implementation. However, locating vulnerabilities requires time-
consuming analyses of the program’s memory access patterns. To
address that, we use record & replay (R&R) to separate the system
into an online component and an oﬄine component. The former
records the program’s execution and detects ongoing attacks; while
the latter replays the execution to locate vulnerabilities. As such,
the performance of the online component is more critical than the
oﬄine component and is the focus of our performance evaluation.
The online overhead can mainly be attributed to the attack detection
and the recording. Our prototype employs two lightweight attack
detection mechanisms. As such, most of the overhead comes from
the recording.
We measured the performance of Ravel with a set of standard
benchmarks (SPEC CPU 2006 4) and several real-world applica-
tions. All the experiments were conducted on an Intel Core i7
computer with 16 GB of memory. The OS was based on FreeBSD
release 10.2 for x86-64. All the test applications were installed
directly from FreeBSD’s software repository. These applications
include two popular web servers, NGINX and Apache. We used
ApacheBench to send 5 × 106 requests to each server with a con-
currency of 10. To diversify the tests, Apache was conﬁgured
to work in the worker mode with multi-threading enabled; while
NGINX was conﬁgured to use poll, instead of kqueue as it is
in Apache, for connection processing. The third application we
tested was dd. Speciﬁcally, we used it to read 10MB of data from
the kernel’s random number pool (/dev/random) and compressed
the data with lzma. The command line was dd if=/dev/random
bs=1k count=10000 | lzma > /dev/null. As mentioned be-
fore, random numbers are a source of non-determinism and are
always recorded.
The results are illustrated in Figure 8.
It shows that the per-
formance overhead of Ravel for most CPU-intensive benchmarks is
negligible. For I/O intensive ones like the web servers, the overhead
is also rather small at about 2%. This is expected as the recording
mostly happens when there is a syscall, a relatively infrequent event
given the speed of today’s computers. Our optimization of the stor-
age consumption for R&R allows Ravel to avoid recording the data
4SPEC CPU2006 has dropped the support to FreeBSD for a long
time. There are many compatibility issues that prevent some bench-
marks from compiling despite all the compilers we tried (including
the oﬃcial Clang/LLVM compiler and several versions of gcc).
9
  0.0%  0.5%  1.0%  1.5%  2.0%  2.5%bzip2gccmcfgobmkhmmersjenglibquantumh264refomnetppastarxalancbmknginxApacherandomRelative Performance Overheadbe bypassed by reusing the existing code, such as return-to-libc
and return-orient programming (ROP) [8, 54]. Many systems have
been proposed to defeat ROP, say, by diversifying the program’s
code [42]. For example, ASLR randomizes the process’ address
space layout to make it harder for attackers to locate the reusable
code. ASLR is susceptible to information leaks [56]. Many im-
provements to ASLR have been proposed to address this problem
by making ASLR more ﬁne-grained [33, 51, 64], preventing code
from being read [4, 15], and real-time re-randomization [6, 14].
Nevertheless, W ⊕ X and ASLR have signiﬁcantly raised the bar for
reliable exploits. These defenses can be integrated with Ravel to
enable the defense in depth. They will also improve Ravel’s attack
detection since they make exploits crash more often.
From another perspective, control-ﬂow integrity (CFI [1]) and
data-ﬂow integrity (DFI [11]) provide a comprehensive protection
against control-ﬂow and data-ﬂow attacks, respectively. They en-
force the security policy that run-time control ﬂow/data ﬂow must
follow the program’s control-ﬂow/data-ﬂow graph. CFI is an ef-
fective defense against most control-ﬂow attacks. DFI has an even
broader coverage because it can also detect data-only attacks. These
two techniques have inspired a lot of related systems, including
Ravel [21, 29, 57, 66, 67]. One of their focuses is to minimize the
performance overhead so that they can be practically deployed [57,
66]. For example, Kenali enforces DFI for the kernel’s access con-
trol system [57]. It automatically infers the critical data that need
protection and enforces DFI for that data. CFI as a generic attack
detection technique can be integrated into Ravel. Ravel’s archi-
tecture can be easily extended with all kinds of attack detection
techniques. Ravel’s data-ﬂow analysis extends DFI with analy-
ses to locate and reﬁne underlying vulnerabilities. As we have
demonstrated, a data-ﬂow violation does not always coincide with
the exploited vulnerabilities. Moreover, full DFI enforcement is
still prohibitively expensive [11]. Ravel’s use of R&R detaches
the (high-overhead) vulnerability locator from production systems.
WIT (Write Integrity Testing) is another eﬀective defense against
memory errors [3]. It enforces a policy in which each instruction
can only write to the set of statically-determined, authorized objects.
WIT reduces its overhead by checking only memory writes but not
reads. Consequently, WIT cannot detect read-only vulnerabilities
such as information leaks. Ravel checks both memory reads and
writes for vulnerabilities
Data-only attacks: as control-ﬂow hijacking becomes more
challenging, more attention is paid to data-only attacks (or non-
control-data attacks) [13, 35, 36]. Data-only attacks do not change
the control ﬂow. They instead manipulate sensitive run-time data to
indirectly control the program’s execution, escalate privileges, leak
information, etc. Recently, data-oriented programming (DOP) [36]
demonstrates that attackers can systemically construct expressive
non-control-data exploits, and a large percentage of the evaluated
real-world programs have gadgets to simulate arbitrary computa-
tions. Eﬀective, low-overhead detection of data-only attacks is a
challenging problem. DFI can detect many but not all data-only
attacks (i.e., it cannot detect attacks that do not change the def-
use relations). Likewise, Ravel can also locate many but not all
data-only vulnerabilities.
Vulnerability/bug discovery: There are also many eﬀorts to dis-
cover vulnerabilities through dynamic and static analysis [5, 25, 55,
58]. For example, fuzz testing is a popular, practical approach to
discover software vulnerabilities. It tries to crash a program by feed-
ing it random inputs. However, fuzz testing often ends with a poor
code coverage. To address that, Driller uses concolic execution
to guide the fuzzer when it stops [58]. To evaluate vulnerabil-
ity discovery tools, LAVA [25] proposes a dynamic taint-analysis
10
based approach to generate large ground-truth vulnerability cor-
pora on demand. Gist is a tool to diagnose program failures (i.e.,
crashes) [37]. Speciﬁcally, it traces the program execution with
Intel’s processor tracing technology and combines static program
slicing and dynamic analysis to ﬁnd root causes of program failures.
Ravel shares the same vision as Gist, but it takes a very diﬀerent
approach because of its diﬀerent focus — Gist focuses on solving
program failures, while Ravel focuses on locating vulnerabilities.
Many vulnerabilities such as buﬀer overﬂows and information leaks
can be exploited without causing program failures, rendering Gist
ineﬀective in locating vulnerabilities.
Record & replay: the last category of related work is record &
replay (R&R) [23, 31, 38, 41, 53]. In particular, Arnold is an always-
on R&R system. It enables an interesting concept called the eidetic
system in which the complete execution history of the system is kept
and can be queried for information about the past execution [23]. We
adopt some techniques of Arnold to reduce Ravel’s performance and
storage overhead. Ravel’s R&R is diﬀerent from other R&R systems
with its instrumented replay. R&R has a variety of interesting
usages including software debugging and intrusion detection. For
example, BackTracker can reconstruct a past intrusion by building
an attack dependence graph backwards [38]. Ravel also relies on
R&R to reproduce an attack, but it aims at locating vulnerabilities.
BackTracker works on the high-level objects such as processes and
ﬁles; while Ravel works on the low-level memory accesses with
diﬀerent analyses.
6. SUMMARY
We have presented the design and evaluation of Ravel, a practical
system to pinpoint exploited vulnerabilities. Speciﬁcally, it records
the execution history of a production program and simultaneously
monitors its execution for attacks.
If an attack is detected, the
execution history is replayed with instrumentation to locate the
exploited vulnerabilities. With its data-ﬂow and other analyses,
Ravel can pinpoint many diﬀerent types of memory vulnerabilities,
such as buﬀer (heap) overﬂows, integer errors, and information
leaks. Our evaluation shows that Ravel is eﬀective and incurs low
performance overhead.
7. ACKNOWLEDGMENTS
We would like to thank our shepherd Mathias Payer and the
anonymous reviewers for their insightful comments that greatly
helped improve the presentation of this paper. This work was sup-
ported in part by the US National Science Foundation (NSF) under
Grant 1453020. Any opinions, ﬁndings, and conclusions or recom-