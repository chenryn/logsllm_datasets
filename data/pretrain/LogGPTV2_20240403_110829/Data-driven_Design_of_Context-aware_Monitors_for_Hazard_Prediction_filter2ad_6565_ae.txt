Fig. 8: Average Hazard Coverage with Different Fault Types and
Initial BG Values on Glucosym
takes hours for the BG to transmit into the vessel and for
insulin to take effect. Besides, the TTH in 7.1% of hazardous
simulations was less than zero, which means that the hazards
happened even before we injected any faults to the controller,
indicating the inadequacy of the APS control algorithm.
Fault Types: We also analyzed the relationship between the
overall hazard coverage (averaged across all the patients) with
the fault types and initial BG values. As shown in Fig. 8, we
observed that for the set of patient proﬁles that we studied,
OpenAPS controller was more vulnerable to maximize_rate
and maximize_glucose attacks or faults while less vulnerable to
bitﬂip_decrate or bitﬂip_decglucose faults. This is because in
the latter cases, the APS controller can inject extra insulin after
the faults go away to avoid high-risk situations. In contrast, a
large amount of IOB remains in the body, even after the effects
of the former faults or attacks have disappeared, and keeps
decreasing BG and puts patients at the risk of hypoglycemia.
Further, we observed an increase in hazard coverage when the
initial BG values increased in about half of the fault types,
which indicates faults may have more impact on risky patients.
2) Monitor Prediction Accuracy: Table V shows the aver-
age performance of the CAWT monitor (over all the patients
and fault scenarios) versus all other non-ML-based baseline
monitors. We see that for the same number of simulations, the
proposed CAWT monitor outperformed the Guideline monitor
and MPC monitor in every metric listed in Table V on the
Glucosym simulator. Even though the CAWT monitor had a
slightly larger FNR on the T1DS2013 simulator, it held the
lowest FPR and achieved the highest overall accuracy and F1
score. We will further analyze the trade-off between low FPR
and low FNR as well as their average risk in Section V-E5.
Without learning the thresholds of BG values and IOB, the
CAWOT monitor had a higher FPR and lower accuracy and
F1 score than the MPC monitor on the T1DS2013 simulator,
but still kept the advantage over Guideline and MPC monitors
on the Glucosym simulator, which demonstrates the beneﬁt
of knowing the context as well as the disadvantage of not
specifying boundary thresholds in SCS. Considering its worse
performance than the CAWT monitor, we do not show the
CAWOT monitor’s results in the following sections.
To sum up, by learning tight thresholds for SCS rules,
CAWT monitor achieved an improvement of 12.6%-14.9% in
overall F1 score over the CAWOT monitor and outperformed
Gluc
osym
T1DS
2013
492
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:48 UTC from IEEE Xplore.  Restrictions apply. 
and calculated the average time overhead for each safety
monitor. Results showed that
the CAWT monitor has the
lowest average time overhead of 252.7 us among all the safety
monitors, while the time overhead of MPC, Guideline, DT,
MLP, and LSTM monitors was 123.9 ms, 664.1 us, 1.3 ms,
30.7 ms, and 32.6 ms, respectively.
VI. DISCUSSION
Our experiments provided the following key insights:
OpenAPS control software cannot tolerate safety-critical
faults. OpenAPS is an advanced fully-automated Control-to-
Target (CTT) system [76] already equipped with some safety
features, but: (1) Hazards happened even without injecting any
faults to it. (2) It failed to tolerate the simulated attacks and
faults. In 13.8% of the situations where hazard happened,
the BG value was less than 40 mg/dL,
implying severe
hypoglycemia and that the patient was unable to function [77].
(3) New hazards happened even after removing the faults.
Patient-speciﬁc models outperform the population-based
model. We compared the CAWT monitor’s performance with
the patient-speciﬁc thresholds learned from each patient’s
data traces versus the population-based thresholds learned
from all patients’ data. For the population-based model, we
learned the thresholds from the data of randomly chosen
70% patients and tested the model on the remaining 30% of
patients’ data. As shown in Table VIII, the proposed CAWT
monitor with patient-speciﬁc thresholds held an advantage
over a population-based CAWT monitor with at most 3.1%
and 5.3% increase in accuracy and early detection rate (EDR),
respectively. Besides, the patient-speciﬁc CAWT monitor kept
the FNR low with a slightly higher FPR, therefore achieved a
24.4% higher F1 score. These results conﬁrm the fact that each
patient has different biomedical characteristics and different
tolerance levels to erroneous insulin amounts injected, and the
safety monitor logic needs to be reﬁned for each patient.
Adversarial training improves safety monitor perfor-
mance. Using the thresholds learned from fault-free data, the
proposed CAWT monitor can only detect the UCAs before the
hazard happened for 88.3% of the time and failed to generate
an alert for a hazardous situation in 9% of the simulations.
Adversarial training and reﬁnement of SCS formulas with the
faulty data improved the CAWT monitor’s performance with
11.3% in EDR and 8.5% in overall F1 score.
Weakly supervised context-aware monitor outperforms
ML-based monitors. Our experiments showed that in most
situations the CAWT monitor could achieve a better or compa-
rable performance to the ML-based monitors that we explored
in this paper. There are several other advantages that a CAWT
monitor has over ML-based monitors:
TABLE VIII: Performance of the Proposed CAWT Monitor with
Either Patient-speciﬁc Threshold or Population-based Threshold
EDR
99.7%
96.6%
100.0%
95.0%
100.0%
96.4%
Threshold
Patient-speciﬁc
Population-based
Patient-speciﬁc
Population-based
Patient-speciﬁc
Population-based
F1 Score
0.94
0.80
0.97
0.84
0.97
0.78
FPR
0.007
0.006
0.008
0.007
0.005
0.007
ACC
0.99
0.97
0.99
0.97
0.99
0.96
FNR
0.00
0.22
0.01
0.21
0.02
0.28
Patient
patientA
patientH
patientJ
Fig. 9: Average Reaction Time for Each Monitor (minutes).
ensuring safe reaction time for the patients. In contrast,
Guideline and MPC monitors have a very high standard
deviation, showing the disadvantages of not being context-
aware or patient-speciﬁc.
• Although their average reaction time was about 40 minutes
longer than CAWT monitor’s, ML-based baseline monitors’
performance was not stable, and their early detection rate
was 0.4%-4.3% less than the proposed CAWT monitor.
5) Hazard Mitigation: We compared the mitigation perfor-
mance of the CAWT monitor with the following monitors: DT
monitor, which has the longest reaction time, MLP monitor
with almost
the same F1 score as LSTM on Glucosym
simulator but with simpler logic, and MPC monitor as the best
non-ML-based baseline monitor. We reran the simulations with
each monitor and the mitigation algorithm (Algorithm 1) and
calculated the recovery rate, number of new hazards introduced
because of FPs, and the average risk.
TABLE VII: Mitigation Performance of the CAWT Monitor and
Three Baseline Monitors Using the Same Mitigation Strategy
Monitor
Recovery Rate
No. New Hazard
Avg. Risk
DT
MLP
CAWT
MPC
54.0% 40.3% 39.0% 4.3%
8
123
0.02
0.22
227
0.76
177
0.68
Table VII shows that the CAWT monitor successfully pre-
vented 54% of the hazards that happened previously and only
introduced eight new hazards due to false alarms, thus having
the lowest average risk among the monitors. In comparison, the
MPC baseline monitor’s recovery rate with the same mitigation
algorithm was 4.3%, which demonstrates the disadvantages of
not being context-aware and having insufﬁcient reaction time.
Even though it achieved the longest average reaction time, the
DT monitor only prevented 40.3% of hazards from happening
and introduced the largest number of new hazards, showing the
drawback of having large FPR. A similar situation occurred
to the MLP monitor, except that it got a lower average risk
due to having a lower FPR than the DT monitor.
These results show that: (1) having a reasonable enough
reaction time matters in ensuring a better recovery rate; (2)
an appropriate balance between competitive long reaction
time and low FPR is more critical in improving recovery
performance than merely the longest average reaction time at
any price; (3) the proposed CAWT monitor demonstrated the
best performance in mitigating hazards, and (4) nevertheless,
only having an insulin pump limited the recovery rate from
being further improved in our simulations.
6) Resource Utilization: We ran the simulations with dif-
ferent safety monitors and without a monitor a thousand times
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:48 UTC from IEEE Xplore.  Restrictions apply. 
493
1) Binary vs. Multi-class Classiﬁcation: The ML-based
monitors explored here worked as binary classiﬁers that can
only detect if a control action is safe or unsafe. However,
for successful hazard mitigation, we also need to identify the
type of predicted hazard a UCA would result in. For this
purpose, we retrained the ML-based monitors as multi-class
classiﬁers with the knowledge of hazard types. Results showed
that each baseline monitor’s performance dropped with at least
a 14.3% increase in FNR and 0.8%-2.3% decrease in accuracy.
In contrast, the CAWT monitor’s performance stayed the same
as it had the knowledge of context from SCS.
2) Data Limitation and Corner Cases: Fully supervised
ML-based monitors tend to suffer from overﬁtting to the
datasets they have been trained on [78]. For example, we
evaluated their performance on datasets collected from fault-
free simulations, and results showed at least a 48.9% drop
in F1 score compared to their performance on faulty data. In
comparison, the F1 score of the CAWT monitor only decreased
3.9% because it was trained using a weakly supervised ap-
proach that only uses faulty data to tighten the SCS thresholds.
3) Application Strategies and Resource Limitations: To
implement the proposed CAWT monitor in a real application,
we need to have access to the patient proﬁle, collect data from
simulation or real-time APS operation for several days, and
reﬁne the unknown thresholds for each SCS rule ofﬂine. At
runtime, the CAWT monitor will load the learned thresholds
and work as a wrapper integrated with the APS controller with
very simple logic that requires minimal resources. However,
the ML-based monitors need to load the pre-trained models
and utilize much more resources than the CAWT monitor.
4) Monitor Safety and Interpretability: Neural network
classiﬁers are black-box systems [79] that, by default, do
not provide transparency and explainability for their deci-
sions. They are also vulnerable to adversarial attacks, slight
perturbations, and noise in the input [80] that can lead to
misclassiﬁcation results. But our proposed CAWT monitor
relies on a weakly supervised and transparent model, which is
simpler to verify, update, and protect.
VII. THREATS TO VALIDITY
This paper focuses on the safety-critical faults or attacks
targeting the APS control software. Any perturbations in
the sensor data will potentially affect both the controller
and the safety monitor’s behavior. However, a number of
glucose sensor error models [81]–[83] have been explored and
successfully applied to CGM sensors (e.g., Dexcom G4/G5
[84], [85] and Medtronic Enlite sensors [82]), which can detect
the disturbance in sensor data brought by environment noise
or calibration error. Further, the OpenAPS control software
we used can automatically adjust the control strategy based
on the sensor errors reported by CGM sensors and keep
the control command safe. So our proposed monitor can
learn appropriate parameters from recorded data to capture
the controller’s behavior. Besides, several different approaches
(e.g., change detection, redundant sensors, or ML models)
have been proposed to protect the APS from faults/attacks that
directly comprise sensors and actuators. Those sensor checking
mechanisms can be integrated with our safety monitor.
The proposed monitor’s performance heavily relies on the
accuracy and completeness of the generated SCSs, which
might not be easy to derive for highly complex systems. How-
ever, our method only uses a subset of state variables that can
fully represent the system’s dynamics. Besides, our proposed
formal framework for generating SCSs in collaboration with
domain experts can reduce the chance of manual errors.
VIII. RELATED WORK
Run-time Monitoring and Anomaly Detection in CPS:
Recent works on run-time safety monitoring in CPS focus
on control invariant methods [86], dynamic invariant detec-
tion [20], application-dependent multi-level monitoring [87],
unsupervised anomaly detection from streaming data [88],
[89], and run-time safety guards that satisfy a predeﬁned set
of safety properties [90], [91].
Run-time Monitoring with STL Learning: Several re-
cent works [11], [46], [92] have focused on approaches for
monitoring, learning, and control of CPS behaviors with STL.
For example, [93] applied STL learning and monitoring to
anomaly detection in CPS and [94] used STL learning for
characterizing T1D patient behaviors.
Our work distinguishes from these previous works in com-
bining the STL formalism for speciﬁcation of safety context
with patient-speciﬁc STL learning for the design of context-
aware monitors that can predict and mitigate safety hazards.
Safety of APS: Previous works [3], [33], [76], [95], [96]
have provided a comprehensive review of safety and secu-
rity issues and design requirements for APS, including the
common faults, possible attacks, and their outcomes along
with solutions to address them. In particular, fault-tolerant and
fail-safe controllers and fault detection/diagnosis mechanisms
were proposed to address glucose sensor and insulin pump
faults [97]. However, most previous efforts have focused on
the faults and attacks targeting the sensors and actuators, rather
than the APS controller, and on the development of methods
that react upon the occurrence of hypo/hyperglycemia events
rather than predicting hazards for timely mitigation [96].
IX. CONCLUSION
This paper presented a formal framework for the combined
model and data-driven design of context-aware safety monitors
that can predict and mitigate hazards in MCPS. We developed
two closed-loop APS simulation systems as case studies to
evaluate the proposed method. Experimental results showed
that our monitor outperforms several baseline monitors de-
veloped using medical guidelines, MPC, and ML in accurate
and timely prediction of hazards and has stable performance
in ensuring sufﬁcient reaction time and mitigating hazards.
Future work will focus on evaluating the applicability of this
approach to a broader range of MCPS and patient scenarios.
ACKNOWLEDGMENT
This material is based upon work supported by the National
Science Foundation (NSF) under Grant No. 1748737.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:48 UTC from IEEE Xplore.  Restrictions apply. 
494
REFERENCES
[1] H. Alemzadeh, R. K. Iyer, and Z. Kalbarczyk et al., “Analysis of safety-