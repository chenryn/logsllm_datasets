be the result of breaking up long linked roles. Then the
time complexity of the backward algorithm, applied to C(cid:9)
, is
O(N 3L), where N is the number of credentials in C, and L
is the length of the longest linked role in C.
This O(N 3L) worst-case complexity is the same as that
of the algorithm in Clarke et al. [8].
Instead of breaking up long linked names, one can extend
our algorithms to handle them directly. It is also not dif-
ﬁcult to extend our algorithms to handle SPKI delegation
certiﬁcates.
In particular, it is straightforward to extend
our techniques for handling intersections to handle thresh-
old structures as well.
4. DISTRIBUTED CHAIN DISCOVERY
The algorithms given in the previous section can be used
when credential storage is not centralized, but distributed
among credentials’ subjects and issuers. As discussed in sec-
tion 1, it is impractical to require either that all credentials
be stored by their issuers or that all be stored by their sub-
jects. Yet if no constraint is imposed on where credentials
are stored, some chains cannot be found without broadcast,
which we assume is unavailable.
Example 4. Consider the following credentials from ex-
ample 3: ABU .accredited ←− StateU and StateU .stuID ←−
Alice. If both of these are stored exclusively with StateU ,
none of our search procedures can ﬁnd the chain that autho-
rizes Alice. Arriving at ABU and at Alice, the procedure is
unable to locate either of these two key credentials.
This section presents a type system for credential storage
that ensures chains of well-typed credentials can be found.
4.1 Traversability
∗→ A.r.
Suppose that D
∗→ A.r) = chain(D
We introduce notions of path traversability to formalize
the three diﬀerent directions in which distributed chains can
be located and assembled, depending on the storage charac-
teristics of their constituent credentials. We call the three
notions, forward traversability, backward traversability, and
conﬂuence, respectively. Working from one end or the other,
or from both simultaneously, a search agent needs to be able
∗→ A.r,
to ﬁnd the credential deﬁning each edge in a path, D
∗→ A.r), which prove
as well as in the other paths of chain(D
the existence of derived edges in D
∗→ A.r consists entirely of edges that
represent credentials that are stored by their subjects. (In
∗→ A.r
this case, (D
forward traversable because forward search can drive its dis-
tributed discovery, as follows. Obtain from D the ﬁrst cre-
dential of the path and, with it, the identity (and hence
the location) of the issuer of that credential. That issuer is
the subject of the next credential. By visiting each succes-
sive entity in the path and requesting their credentials, each
credential in the path can be obtained, without broadcast.
A backward traversable path is analogous to a forward
traversable path, except the credentials involved are held
∗→ A.r that is backward traversable
by issuers. A path D
can be discovered by doing backward search starting from
A.r. Credentials involved in the path can be collected from
entities starting with A and working from issuers to subjects.
Roughly speaking, a conﬂuent path can be decomposed
into two subpaths, one forward traversable and the other
∗→ A.r).) We call D
backward traversable. When both ends are known, a con-
ﬂuent path can be collected and assembled by starting at
both ends and working inwards.
We deﬁne these notions of traversability for both edges
and paths in credential graphs. Following the deﬁnition, we
discuss the intuition behind traversability of derived edges.
(Traversibility and Confluence ).
Let GC = (cid:19)NC, EC(cid:20) be the credential graph for a given set of
credentials, C.
An edge added by closure property 1 is:
Definition 2
Forward traversable if the credential it represents
is held by each subject of the credential;
Backward traversable if the credential it repre-
Conﬂuent if it is forward or backward traversable.
sents is held by the issuer of the credential;
∗→ e2 is:
A path e1
Forward traversable if it is empty (e1 = e2), or it
consists entirely of forward traversable edges;
Backward traversable if it is empty, or it consists
∗→ e(cid:9) → e(cid:9)(cid:9)
entirely of backward traversable edges;
∗→ e2 where e1
Conﬂuent if it is empty, or it can be decomposed
∗→ e(cid:9)
into e1
is forward traversable, e(cid:9)(cid:9) ∗→ e2 is backward
traversable, and e(cid:9) → e(cid:9)(cid:9)
is conﬂuent. Note
that paths that are forward traversable or back-
ward traversable are also conﬂuent.
An edge added by closure property 2, B.r2→ A.r1.r2 is:
Forward traversable if the path it is derived from,
∗→ A.r1 is backward
∗→ A.r1, is forward traversable;
Backward traversable if B
B
traversable;
Conﬂuent if B
∗→ A.r1 is conﬂuent;
An edge added by closure property 3, D→ f1 ∩ ··· ∩ fk is :
[1..k] with D
(b) for each j ∈ [1..k], D
Forward traversable if (a) there exists an (cid:23) ∈
∗→ f(cid:14) forward traversable, and
∗→ fj is conﬂuent;
Backward traversable if (a) there exists an (cid:23) ∈
∗→ fj backward traversable, and
∗→ fj is conﬂuent;
∗→ fj is con-
Conﬂuent if for each j ∈ [1..k], D
[1..k] with D
(b) for each j ∈ [1..k], D
ﬂuent;
Here is why a derived edge of the form B.r2 → A.r1.r2 has
the same traversability as the path that it is derived from.
∗→ B.r2 →
Suppose there is a forward traversable path D
∗→ A.r. Starting at D, a search agent can traverse
A.r1.r2
to B.r2. From there, the agent knows B, which enables it
∗→ A.r1. Upon reaching
to continue searching, traversing B
A.r1, the search agent has proven the existence of B.r2 →
A.r1.r2. Additionally, it knows A, so it can continue forward
search from A.r1.r2.
∗→ A.r
Now suppose there is a forward traversable path D
that can be decomposed into D→ f1∩···∩fk → B.r1
∗→ A.r.
The edge f1 ∩ ··· ∩ fk → B.r1 is forward traversable, so it
is stored by the entity base(fj), for each j ∈ [1..k]. If there
∗→ f(cid:14) forward traversable, a search agent
is one f(cid:14) with D
can use it to get from D to f(cid:14). From base(f(cid:14)), the agent can
obtain the credential B.r1←− f1 ∩···∩ fk, thereby identify-
ing all other fj’s. The search agent then ﬁnds a path from
162D to each fj, and continues its forward search from B.r1.
∗→ fj only needs
Since both ends are known, each path D
to be conﬂuent. The rationale for backward traversability
of edges derived from backward traversible paths is similar.
4.2 A Credential Type System
If all credentials are stored by their issuers, all paths
are backward traversable. Similarly, if all credentials are
stored by their subjects, all paths are forward traversable.
As we argued in section 1, neither arrangement by itself is
satisfactory—greater ﬂexibility is required in practice. Yet
some constraints must be imposed on credential storage, or
else many paths cannot be discovered. One way to organize
those constraints is by requiring that all credentials deﬁn-
ing a given role name have the same storage characteristics.
Capitalizing on this observation to support distributed dis-
covery, we introduce a type system for credential storage, the
important feature of which is that, given a set of well-typed
credentials, every path in its credential graph is conﬂuent.
In our type system, each role name has two types: an
issuer-side type speciﬁes whether a search agent can trace
credentials that deﬁne the role name by starting from the
credentials’ issuers; the other, a subject-side type, speciﬁes
these credentials’ traceability from their subjects.
The possible issuer-side type values are issuer-traces-none,
issuer-traces-def, and issuer-traces-all. If a role name r is
issuer-traces-def, then from any entity A one can ﬁnd all
credentials deﬁning A.r. In other words, A must store all
credentials deﬁning A.r. However, this does not guarantee
that one can ﬁnd all members of A.r. For instance, we
might have A.r ←− B.r1, with r1 issuer-traces-none. This
motivates the stronger type: issuer-traces-all. A role name
r being issuer-traces-all implies not only that r is issuer-
traces-def, but also that, for any entity A, using backward
searching, one can ﬁnd all the members of the role A.r.
The possible subject-side type values are subject-traces-
If a role name r is subject-
none and subject-traces-all.
traces-all, then for any entity B, by using forward search,
one can ﬁnd all roles A.r such that B is a member of A.r.
There are three values for the issuer-side type and two
values for the subject-side type, yielding six combinations;
however, a role name that is both issuer-traces-none and
subject-traces-none is useless, so it is forbidden. This is
captured by the notion of well-typedness.
We now extend this type system to role expressions and
then deﬁne the notion of well-typed credentials. As we show
in the next section, together these two deﬁnitions guaran-
tee that when credentials are well-typed, the following three
conditions hold. If a role expression e is issuer-traces-all, one
can ﬁnd all members of e by doing backward search from e.
If e is subject-traces-all, then from any of its members, D,
one can ﬁnd a chain to e by doing forward search. If e is
issuer-traces-def, then from any of its members, D, one can
ﬁnd a chain from D to e by doing bi-directional search.
Definition 3
• A role expression is well-typed if it is not both issuer-
(Types of role expressions).
traces-none and subject-traces-none.
• An entity A is both issuer-traces-all and subject-traces-
all.
• A role A.r has the same type as r.
• A linked role A.r1.r2 is
issuer-traces-all
issuer-traces-def
when both r1 and r2 are issuer-
traces-all
when r1 is issuer-traces-all and
r2 is issuer-traces-def, or r1 is
issuer-traces-def and r2 is
subject-traces-all
issuer-traces-none otherwise
subject-traces-all
when both r1 and r2 are
subject-traces-all
subject-traces-none otherwise
issuer-traces-all
• An intersection f1 ∩ ··· ∩ fk is
issuer-traces-def
issuer-traces-none otherwise
subject-traces-all
when there exists an f(cid:14) that
is issuer-traces-all, and all
fj’s are well-typed
when all fj’s are well-typed
when there exists an f(cid:14) that
is subject-traces-all, and all
fj’s are well-typed
subject-traces-none otherwise
The typing rule for a linked role A.r1.r2 may need some
If both r1 and r2 are issuer-traces-all, then
explanation.
from A.r1.r2, one can ﬁnd all members of A.r1, and then,
for each such member, B, ﬁnd all members of B.r2. If both
r1 and r2 are subject-traces-all, then from any member, D,
of A.r1.r2, one can ﬁrst ﬁnd that D is a member of B.r2, and
then ﬁnd that B is a member of A.r1, thereby determining
that D is a member of A.r1.r2. Knowing both ends, D and
A.r1.r2, one needs to ﬁnd a middle point, B.r2, using for-
ward or backward search from one side. Then the other side
can be handled by bi-direction search. If r1 is issuer-traces-
all, one can ﬁnd all members of A.r1, then r2 only needs
to be issuer-traces-def. Similarly, if r2 is subject-traces-all,
then one can trace to B.r2 from D, and so r1 only needs to
be issuer-traces-def.
Definition 4
dential A.r ←− e is well-typed if all of
conditions are satisﬁed:
(Well-typed Credentials). A cre-