• ifn = 4,6,10,thenr0
(n) = r0
aretheexceptionalcases);
• ifpr(n) = 2 andn = 8 orn ≥ 12 (notexceptional),then
(n) = r0
r0
• ifpr(n) > 2,thenr0
• ifpr(n) = 3 andpr2
• ifpr(n) = 3 andpr2
• ifpr(n) ≥ 5,thenr0
Conjecture 2. Withthenotationofthetheoremabove,the
followingshouldhold:
• ifpr(n) = 3 andpr2
3n/5− 3;
(n,[1,2]) = (n− 3)/2;
(n) = 5,thenr0
(n) > 5,thenr0
(n) ≤ n− 2n/pr(n)− 1.
(n) ≤ 3n/5− 3;
(n) ≤ 2n/3− 2;
(n) = 5,thenr0
(n,[1,2]) = n/2;
(n,[1,3]) =
(n) = r0
2,1
• ifpr(n) = 3 andpr2
(n) > 5,then
(n,[1,3]) = 2n/3− 3,and
a. r0
(n,[s0
, s1
b. whenever r0
[s0
(n) = r0
(n) = r0
] = [2,n/3 + 1];
• if pr(n) ≥ 5, then r0
2n/pr(n)− 1,whens0
= s1
, s1
]) = 2n/3− 2,then
]) = n −
(n,[s0
, s1
= n/pr(n) + 1;
Theorem 5. Conjecture 2 holds for all n ≤ 120. In addi-
tion,ifpr(n) = 3,thentheconjectureholdsforalln ≤ 300.
Before we discuss these rather complicated theorems
and the conjecture in detail, we remark that Theorem 5 is
established by a purely numerical calculation (testing the
row rank of all possible “failed” generator matrices as in
the proof of Theorem 1). For practical array sizes, the
two theorems provide a complete description of this design
for HoVer3
2,1 codes. We tested very large array sizes for
pr(n) = 3,pr2
(n) = 5 but were unable to reﬁne the conjec-
ture in this case (see the additional remarks below). Partial
proofs of Theorem 4 are in the appendix of [9].
, s1
[r, n] code (for even n), which was a surprise.
The ﬁrst two items of Theorem 4 completely characterize
(n) for n even.
r0
In particular, it shows that the optimal
choice for offsets is [s0
] = [1,2]. Note that for the non-
exceptional cases, this code supports one more row than the
HoVer2
1,1
The rest of the theorem and conjecture deal with odd n
(when pr(n) ≥ 3). The third item covers odd n for the spe-
ciﬁc offsets [1,2]. This gives a lower bound on r0
(n) that is
clearly not optimal as is seen in the rest of theorem and in
the conjecture.
For the case where pr(n) ≥ 5, the last item in the theorem
(n) and the last item in the
= n/pr(n) + 1,
r0
provides an upper bound on r0
= s1
conjecture claims that, for offsets s0
this bound is tight. So, for prime n = p ≥ 5,
(p,[2,2]) = n− 3,
(p) = r0
(n) ≤ n− 2n/pr(n)− 1
is less than that in Theorem 3 (for HoVer2
tional term n/pr(n).
r0
which is a special case of Conjecture 1. The bound
1,1) by an addi-
The remainder of the theorem and conjecture deal with
the case that pr(n) = 3. This subdivides into two addi-
(n) = 5 (that
tional cases, depending on whether or not pr2
(n) = 5, the theorem
is, whether or not 5 divides n). If pr2
gives the upper bound and the conjecture gives the lower
bound, and further identiﬁes the best offsets as [1,3]. We
have a partial proof of the lower bound, but failed (because
of time constraints) to ﬁnish analyzing all the cases.
For the remaining case when pr2
(n) > 5, there is a gap
of one between the upper bound of the theorem and the
lower bound of the conjecture. Generally, offsets [1,3]
(n), but erratically, the offsets
give the best value for r0
[2,n/3 + 1] did one better (achieving the upper bound of
the theorem). We examined this case extensively (up to
n ≤ 300 and a few cases beyond) and found only n =
9,27,33,63,87,117,123,153,207,243,297 achieve the up-
per bound (and only with offsets [2,n/3 + 1]). There ap-
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
peared to be no pattern to these cases, which is why we do
not have a more precise conjecture.
3.2.2. Other constructions with t = 3,v = 1 and t = 4.
In [9], there are discussions of two additional constructions.
Constructions of HoVer3
1,1 codes (3-fault tolerant, with one
h-parity strip and only one v-parity row) are given. In these
constructions, each data element must touch two different
parity elements in the one row. For a given array size, these
codes have maximal r approximately equal to one-half of
that for a HoVer3
2,1 code – this halving of the number of rows
is analogous to the difference between the X-code (with two
v-parity rows) and the BCP or ZZS codes (with one v-parity
row). Unfortunately, the formulas (theorem and conjec-
ture) for maximal r in these cases are more complicated and
murkier than we saw above for HoVer3
In addition there is a discussion of 4-fault
3,1 codes obtained from the HoVer3
tolerant
HoVer4
2,1 type construc-
tions by adding a third vertical parity, generally computed
along a slope of +2 or −2 though other choices did yield
useful constructions. The results here are mostly experi-
mental and certainly not complete. We mention them only
to show that higher fault tolerant HoVer codes are possible
and how they might be achieved (with additional work).
The following table shows r0 for a small sample of the
v,1 codes we discovered during our search
valid the HoVert
(we expect that these are not the theoretical maximums).
2,1.
Valid [r, n] for [t, v, h] = [3,1,1] and [4,3,1]
11 r4
n r3
11 r4
n r3
31
31
13
26 6
1
1
5
17
27 8
1
1
6
28 7
2
2
7
13
29 13 21
8
1
3
30 7
4
9
15
2
4
10 2
31 14 22
11 4
6
4. Features
11 r4
n r3
31
5
2
12
7
5
13
7
3
14
15
4
8
6
4
16
10
7
17
18
4
8
11 r4
n r3
31
12
19 8
9
20 4
13
21 6
15
22 5
23 10 15
9
24 6
25 9
16
In this section we summarize the key features of these
In
HoVer codes, both the advantages and disadvantages.
general, there are direct trade-offs between the two.
4.1. Storage eﬃciency
There are two ways to measure the storage efﬁciency of
these HoVer codes, depending on whether or not an array is
“packed” (to ﬁll the 2 portion of one stripe with data or par-
ity of another stripe – see earlier remarks in Section 2). The
packed case measures efﬁciency in the sense of coding the-
ory (the rate of the code); we call this EﬀC. The unpacked
version assumes that the 2 subarray of the data/parity lay-
out (Figure 1) is physically wasted disk space; we use EﬀD
for this type of efﬁciency.
A comparison of these functions to MDS codes should
apply only when the number of disks (or strips) in the array
is the same. So we compare to t-fault tolerant MDS hori-
zontal codes (so h = t and v = 0) with stripe size equal to N
and data strips equal to n = N − t = N − h and some num-
ber of rows r. We label this optimal efﬁciency as EﬀO(t, N)
with N = n + h (it does not depend on r).
We have the formulas
EﬀD(r, n,v, h) =
EﬀC(r, n,v, h) =
rn
(r + v)(n + h) ,
(r + v)(n + h)− vh
rn
,
EﬀO(t, N) = nr
Nr
and, since v + h ≤ t, the relations
= N − t
,
N
EﬀD(r, n,v, h) < EﬀC(r, n,v, h) < EﬀO(t, n + h).
Clearly, EﬀC and EﬀD are increasing functions of r and
n (independently). That is, for ﬁxed n, the efﬁciences are
maximal for the largest admissible r. By Theorem 1,
EﬀD(r, n,v, h) = EﬀO(t, n + h)− O(1/r)
and so approximates (but is strictly less than) the optimal
efﬁciency for a t-fault tolerant code. These “inefﬁciencies”
appear in two places. First, the optimal efﬁciency for an r-
row horizontal code would have tr redundant bits, whereas
our codes have nv+ rh; this is strictly larger than tr because
of Theorem 1. The second inefﬁciency comes from the fact
that Theorem 1 provides only an upper bound on r and we
saw in our constructions that this was not always achieved.
The following table shows the comparison of the best
efﬁciency values for the HoVer2
1,1 codes of Section 3.1 as a
percentage of the value for an MDS optimal efﬁciency code.
Note that n represents the number of data/parity strips so is
one less than the array size. The worst efﬁciencies are for n
even, that is, for an odd array size; the best efﬁciencies are
for n prime, which includes common array sizes of 8 (n = 7)
and 12 (n = 11) but not 16, unfortunately.
Relative efﬁciency of HoVer2
11
6
2
9
15
n
r0
9
EﬀD 93.8 80.0 97.2 85.7 93.8 88.9 99.0 90.9 99.3 92.3 96.4
EﬀC 97.8 84.0 99.3 88.2 95.3 90.5 99.8 92.1 99.9 93.2 97.0
1,1 codes
13
11