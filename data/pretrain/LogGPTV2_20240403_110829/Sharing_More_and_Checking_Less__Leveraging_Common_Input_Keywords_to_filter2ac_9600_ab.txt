89
59
76
31
53
86
31
101
81
81
161
114
135
133
85
100
69
49,288
241,314
119,537
139,885
467,706
517,254
83,911
84,764
522,317
53,931
Average
-
106
227,990
64
59
92.4
vides more details of the back-end. goform/setUsbUnload
is split into two parts, while setUsbUnload is used to ﬁnd
the input handler formsetUsbUnload. deviceName is used by
formsetUsbUnload to get the device name. With the help of
the common keywords setUsbUnload and deviceName, we
can recognize the user-input handler formsetUsbUnload (line
3) in the back-end and locate line 9 as the start point of pro-
cessing the input. Now, we can use the data-ﬂow analysis
technique, like taint analysis [30, 35, 40], to track the usage
of untrusted input and detect unsafe usage. In this example,
we set cmd as the taint source and track its usage. At line 10,
we ﬁnd cmd is used as the parameter of the security-critical
function doSystemCall with no constraints. This triggers an
alert to signal the potential vulnerability.
To verify that our intuition works on normal IoT devices,
we inspect 10 routers from ﬁve vendors to check whether the
front-end and back-end use common keywords to represent
the user input. Speciﬁcally, we extracted strings from the back-
end and front-end based on the following three principles. 1)
We select front-end strings that are used to encode user-input
in the network package sent to the back-end. Speciﬁcally,
the string is some “key” in the network package that has the
form of ...&key=value&.... We manually triggered as many
actions as possible in the front-end to cover more request
messages. 2) We select back-end strings that are used to re-
trieve input data from the messages. Based on our knowledge
of IoT ﬁrmware, we deﬁne several functions that are com-
monly used to obtain input value, such as websGetVar in the
motivation example. We collect constant-string arguments of
these functions as interesting back-end strings. 3) We take
an intersection of collect front-end and back-end strings. For
each string in the intersection, we mutate the associated data
in the front-end to trigger the request message sending to
the back-end, and check the value of the associated variables
in the back-end. If the back-end variable changes its value
accordingly, we conﬁrm that the tested string is a shared key-
word to represent user input. We perform the mutation several
times to avoid accidentally-changed back-end variables.
Table 1 shows our veriﬁcation result. On average, 92.4%
of the keyword-value pairs captured in the front-end match
the ones in the back-end, showing that our intuition works for
these common devices. For two devices, all front-end strings
match with the back-end ones, where we can completely rely
on the shared strings to identify the input data from the back-
end. However, for other devices, like Tenda AC9, the matched
strings only account for 81.4%, and we have to inspect the
other 18.6% to achieve a more accurate analysis.
2.3 Challenges and Our Approaches
Although our method seems straightforward for the motivat-
ing example, there are three challenges when we apply it to
real-world embedded systems.
C1: Identifying keywords in the front-end. User input is
usually labeled with a keyword hidden in the front-end, like
deviceName in the motivating sample. However, an unpacked
ﬁrmware contains thousands of strings in the front-end. For
example, the ﬁrmware of Netgear R7000P listed in Table 1
contains more than 600 front-end ﬁles and nearly ten thousand
strings. It is challenging to understand the semantics of each
string without domain knowledge or real executions.
C2: Locating the input handler in the back-end. The back-
end binaries contain many functions, where only a small part
of them handle the user input. Meanwhile, they also contain a
large number of strings and corresponding reference points.
As Table 1 shows, each device contains more than 40,000
strings in the back-end binaries. Therefore, it is challenging to
identify the entry point of user input in the back-end. Ideally,
the point should be strongly connected with the user input,
and its location should be close to the real usage of the input.
C3: Tracking the massive paths of user input to detect
vulnerabilities. To detect the vulnerability, we need to track
the data ﬂow from the entrance of the input to all sinks, which
may contain massive paths. Unfortunately, the state-of-the-art
analysis tools [34, 38] introduce high overhead, and cannot
handle the elaborate control-ﬂow graph or bypass the user-
input sanitization. We need an efﬁcient method for data-ﬂow
analysis and path exploration.
In this paper, we design SaTC to address the challenges
above to detect common vulnerabilities in embedded sys-
tems effectively. Figure 2 provides an overview of our sys-
tem, which takes as input a ﬁrmware sample (i.e., the entire
ﬁrmware image) and produces various bug reports. As the ﬁrst
step, SaTC unpacks the ﬁrmware image using an off-the-shelf
ﬁrmware unpacker, like binwalk [21]. From the unpacked
image, it recognizes front-end ﬁles and back-end programs
based on the ﬁle types: HTML, JavaScript, and XML ﬁles
are usually front-end ﬁles, while executable binaries and li-
braries are back-end ﬁles. Then, SaTC analyzes the front-end
ﬁles and utilizes typical patterns to extract the potential key-
306    30th USENIX Security Symposium
USENIX Association
end resources: HTML ﬁles, XML ﬁles, and JavaScript ﬁles.
Since HTML ﬁles have a standard format, we use regular
expressions to extract the keywords, such as the values of
the id, name, and action attributes. The values of the action
attributes are treated as action keywords. The XML-based
services, such as Simple Object Access Protocol (SOAP) and
Universal Plug and Play protocol (UPnP), usually have a ﬁxed
format in their XML ﬁles to label input data. Hence, we only
need to do a pre-analysis and then use regular expressions
to extract the keywords. The name of the ﬁrst-level label
in the XML body is treated as an action keyword. The for-
mat of JavaScript is ever-changing, and thus the regular ex-
pression cannot correctly identify the keywords. Hence, we
parse a JavaScript ﬁle into an abstract syntax tree (AST) and
scan every Literal node to extract the value from value
attributes. If the Literal node contains the symbol /, we
take the string as the action keyword. We further search all
CallExpression nodes to ﬁnd the ones that use typical ap-
plication programming interface (API) as their callee, such
as sendSOAPAction. The API methods or arguments of the
matched nodes are also treated as action keywords. With this
method, from the code in Figure 1 our extraction module will
get target, goform/setUsbUnload, and deviceName.
The strings collected from HTML, XML and AST contain
many fake keywords, which not only bring signiﬁcant burden
to string matching in the next step, but also introduce false
positives in the bug detection. For example, string target is
commonly used in the front-end, but does not have the coun-
terpart in the back-end. To ﬁlter the invalid keywords, we de-
signed several rules based on our experience. First, we remove
strings with special characters, such as ! and @, which will
be escaped when the front-end generates the HTTP request.
Second, if a string ends with =, we retain the left-hand part and
discard the right-hand side. Symbol = is usually facilitated to
concatenate parameters and variables, such as deviceName=
in Figure 1, where only the parameter name will be reused
in the back-end. Third, we ﬁlter out strings shorter than a
threshold (we use 5 in our work) as the parameter keyword
and action keyword usually have non-trivial names.
After ﬁltering, the candidate list may still contain many
distractors that are not used as input keywords. To reduce the
complexity of the subsequent modules, we use two heuris-
tics to identify and exclude them from the keyword set. If a
JavaScript ﬁle is referenced by a lot of HTML ﬁles, we treat it
as a common, shared library, like a charting library. As library
ﬁles usually do not contain input keywords, we will ignore
all candidates from such ﬁles. If a keyword is referenced by
several front-end ﬁles, such as Button and Cancel, it may be a
common string rather than an input keyword. We also remove
such keywords from the candidate list.
Border Binary Recognition. In the ﬁrmware back-end, a
border binary exports the device functionalities to the front-
end, and meanwhile accepts the user input from the front-
end [34]. Therefore, the border binary is a good starting point
Figure 2: Structure of SaTC. SaTC searches in the ﬁrmware front-
end to ﬁnd input keywords and locates their references in the back-
end. Starting from reference points, SaTC uses input-sensitive taint
analysis to discover vulnerabilities in the back-end.
words of the user input. In Figure 1, deviceName, target and
goform/setUsbUnload will be identiﬁed as input keywords.
After that, SaTC recognizes the border binaries in the back-
end, which invokes different handling functions based on the
user-input keywords. From these functions, we try to locate
the points that retrieve the user input. To ﬁnd the implicit
entry points related to the user-input, we further apply our
intuition to multiple back-end programs: user-input may be
delivered from one program to another via shared keywords.
This helps us track implicit data dependencies among binaries.
In Listing 1, the code at line 9 parses the user-input via the
input keyword deviceName, and thus SaTC treats it as one
entry point of user input. Finally, we use our input-sensitive
taint analysis to track the usage of the untrusted data. We
design several optimizations to make the traditional taint anal-
ysis efﬁcient on embedded systems, including coarse-grained
taint propagation, input-guided path selection, and the trace
merging technique. When SaTC ﬁnds the user input is used
in any predeﬁned sink, like as a parameter of a system call, it
collects the path constraints and judges the reachability. If the
sink is reachable while the input has weak constraints, SaTC
raises an alert of the potential vulnerability.
3 Input Keyword Extraction
Given an unpacked ﬁrmware, SaTC ﬁrst extracts potential
keywords from the front-end ﬁles. We classify keywords into
two types based on their usage in the back-end: one type is
used to label user input, like the deviceName in Listing 1 and
we call them parameter keywords; another type is to label
the handler function, such as setUsbUnload in Listing 1, and
we call them action keywords. We identify input keywords
and their types based on the common patterns in different
front-end ﬁles. We also apply different ﬁne-grained rules to
two types of keywords to ﬁlter out false positives.
In our current design, we consider three categories of front-
USENIX Association
30th USENIX Security Symposium    307
Keywords SetBack-EndFront-EndPre-ProcessingInputKeywordExtractionInput Entry RecognitionTaint EngineInput SensitiveData Flow AnalysisStart PointSaTC1 SetWebFilterSettings () {//in binary prog.cgi
2
pcVar1 = webGetVarString (wp ,"/ SetWebFilterSettings /
WebFilterMethod ");
3
iVar2= webGetCount (wp ,"/ SetWebFilterSettings / WebFilterURLs /
string #");
}
i = 0;
if (iVar2 <=i) {
/* NVRAM operations */
nvram_safe_set (" url_filter_mode ",pcVar1 );
nvram_safe_set (" url_filter_rule ",tmpBuf );
4
5
6
7
8
9
10 }
11 upload_url_filter_rules () {//in binary rc
12
13
14
15
16 }
/* NVRAM operations */
iVar1= nvram_get_int (" url_filter_max_num ");
__s1 =( char *) nvram_safe_get (" url_filter_mode ");
__src =( char *) nvram_safe_get (" url_filter_rule ");
Listing 2: Pseudocode of NVRAM Operations. Function call at
line 2 is the input entry, which uses a superset of the keyword
WebFilterMethod to retrieve the input.
for our analysis. Based on the input keywords, SaTC can
recognize the border binaries in a short time. Speciﬁcally, we
extract strings from each back-end binary and try to match
them with the input candidate keywords. We treat the binary
with the maximum matched keywords as the border binary.
4 Input Entry Recognition
After receiving a request from the front-end, the web server
invokes the corresponding handling function to parse the input
data. The data-extracting point is the target of the subsequent
analysis, and we deﬁne it as the input entry. The input-entry
recognition module detects the entry points in the back-end
binaries based on the references to front-end keywords.
(cid:26)ki
concat(ki,str)
s(ki) =
L : ret = f oo(ski , ...),
P : ret = bar(ski , ...,& f oo),
,
ki ∈ keywords,str is any string
ki ∈ parameter_keywords
ki ∈ action_keywords
(1)
Keyword Reference Locator. Equation 1 shows our method
to locate input entries from the border binaries in the back-
end. ski represents a string that either exactly equals to one
input keyword ki, or contains a substring that is ki. The locator
detects the location inside the border binaries that references
to the string ski. As the handling functions usually use the in-
put keywords to extract the target data from the request, SaTC
locates function calls L that take the input keywords as param-
eters, like foo(“devName”). Consider our motivating example
in Figure 1, the input-keyword extractor identiﬁes the string
deviceName as a parameter keyword, and recognizes httpd as
the border binary. While searching the keyword references in
httpd, as Listing 1 shows, our locator ﬁnds the function call
to websGetVar uses deviceName as a parameter (line 9). This
function call is treated as a keyword reference location, and
thus an input entry. In another example in Listing 2, at line
2 the function call to webGetVarString uses the concatena-
tion of string SetWebFilterSettings and parameter keyword
WebFilterMethod as its argument. Therefore, this function
call is also an input entry.
Among all keyword references, we prioritize the ones in-
side the action handlers. Speciﬁcally, SaTC searches the func-
tion calls P that takes the action keywords and function point-
ers as arguments. As the action keywords are used to retrieve
handlers for particular inputs, we treat the routines speci-
ﬁed in the function pointer as the action handler. If some
reference points L of parameter keywords are inside these
handler functions, we will prioritize exploring L before oth-
ers. In Listing 1, SaTC locates function formsetUsbUnload
as the action handler, since the function call at line 3 takes
the action keywords setUsbUnload and formsetUsbUnload
as the arguments. Therefore, as a reference point, line 9 in
formsetUsbUnload will be analyzed before other entries.
Lp : ret = f oo(pi, ...), pi /∈ keywords, ∃L : dist(Lp,L) < MAX
(2)
Implicit Entry Finder. During our experiment, we ﬁnd sev-
eral real input entries in the back-end do not have correspond-
ing keywords in the front-end. For example, in Listing 3, func-
tion formSetSambaConf retrieves several elements from the
data package, and each string should be treated as a valid in-
put entry, like password. However, our input-keyword extrac-
tion module ﬁnds all keywords except action and usbName.
Without action in data, line 4 will return a null pointer, and
the condition in line 9 will always be false. Therefore, in the
normal execution, the code injection vulnerability in line 10
will never be triggered. SaTC will also miss this vulnerabil-
ity. However, attackers can directly send arbitrary requests
without the help of the front-end. Therefore, they can provide
a malicious request that contains both action and usbName,
and launch the code injection attack.
To mitigate this problem, we propose to take similar code
patterns around known input entries into consideration for
analysis. Equation 2 shows our idea: if we have identiﬁed
an input entry L, another function call f oo around L will
be considered as another input entry as long as f oo has the
similar code pattern as L. We call the missing keyword pi here
as an implicit keyword. This method will help SaTC detect
some missing entries and thus mitigates false negatives in the
bug detection. In Listing 3, both action and usbName will be
treated as implicit keywords. Once SaTC performs data-ﬂow
analysis for them, it will identify the code injection bug easily.
Cross-Process Entry Finder. During the data-ﬂow analysis,
we ﬁnd that some data-ﬂow of input could be interrupted at
the process boundary. For example, in Listing 2 the input
pcVar1 is saved into the non-volatile random-access mem-
ory (NVRAM) in one process prog.cgi (line 7), and then is
retrieved in another process rc from NVRAM (line 14). Fortu-
nately, we can apply our original insight again to connect data-
ﬂows across different processes: the data-saving location and
the data-retrieving location usually share the same keyword.
In Listing 2, both prog.cgi and rc take url_filter_mode to
share pcVar1, and use url_filter_rule to deliver tmpBuf.
308    30th USENIX Security Symposium
USENIX Association
1 int formSetSambaConf ( uint32 user_input ) {
2
3
4
5
6
7
8
9
10