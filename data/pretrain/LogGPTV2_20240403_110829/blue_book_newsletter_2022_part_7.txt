    Correct code:
    ```python
    list(0 for y in list(range(10)))
    tuple(0 for y in list(range(10)))
    sum(y**2 for y in list(range(10)))
    max(y**2 for y in list(range(10)))
    min(y**2 for y in list(range(10)))
    ```
* New: [Fix W1510: Using subprocess.run without explicitly set check is not recommended.](python_snippets.md#fix-w1510:-using-subprocess.run-without-explicitly-set-check-is-not-recommended)
    The `run` call in the example will succeed whether the command is successful or
    not. This is a problem because we silently ignore errors.
    ```python
    import subprocess
    def example():
        proc = subprocess.run("ls")
        return proc.stdout
    ```
    When we pass `check=True`, the behavior changes towards raising an exception
    when the return code of the command is non-zero.
* New: [Convert bytes to string.](python_snippets.md#convert-bytes-to-string)
    ```python
    byte_var.decode('utf-8')
    ```
* New: [Use pipes with subprocess.](python_snippets.md#use-pipes-with-subprocess)
    To use pipes with subprocess you need to use the flag `check=True` which is [a
    bad idea](https://github.com/duo-labs/dlint/blob/master/docs/linters/DUO116.md).
    Instead you should use two processes and link them together in python:
    ```python
    ps = subprocess.Popen(('ps', '-A'), stdout=subprocess.PIPE)
    +output = subprocess.check_output(('grep', 'process_name'), stdin=ps.stdout)
    ps.wait()
    ```
* New: [Pass input to the stdin of a subprocess.](python_snippets.md#pass-input-to-the-stdin-of-a-subprocess)
    ```python
    import subprocess
    p = subprocess.run(['myapp'], input='data_to_write', text=True)
    ```
* New: [Copy and paste from clipboard.](python_snippets.md#copy-and-paste-from-clipboard)
    You can use [many libraries](https://www.delftstack.com/howto/python/python-copy-to-clipboard/) to
    do it, but if you don't want to add any other dependencies you can use
    `subprocess run`.
    To copy from the `selection` clipboard, assuming you've got `xclip` installed,
    you could do:
    ```python
    subprocess.run(
        ['xclip', '-selection', 'clipboard', '-i'],
        input='text to be copied',
        text=True,
        check=True,
    )
    ```
    To paste it:
    ```python
    subprocess.check_output(
        ['xclip', '-o', '-selection', 'clipboard']
    ).decode('utf-8')
    ```
    Good luck testing that in the CI xD
* New: [Get an instance of an Enum by value.](python_snippets.md#get-an-instance-of-an-enum-by-value)
    If you want to initialize a pydantic model with an `Enum` but all you have is
    the value of the `Enum` then you need to create a method to get the correct
    Enum. Otherwise `mypy` will complain that the type of the assignation is `str`
    and not `Enum`.
    So if the model is the next one:
    ```python
    class ServiceStatus(BaseModel):
        """Model the docker status of a service."""
        name: str
        environment: Environment
    ```
    You can't do `ServiceStatus(name='test', environment='production')`. you need to
    add the `get_by_value` method to the `Enum` class:
    ```python
    class Environment(str, Enum):
        """Set the possible environments."""
        STAGING = "staging"
        PRODUCTION = "production"
        @classmethod
        def get_by_value(cls, value: str) -> Enum:
            """Return the Enum element that meets a value"""
            return [member for member in cls if member.value == value][0]
    ```
    Now you can do:
    ```python
    ServiceStatus(
        name='test',
        environment=Environment.get_by_value('production')
    )
    ```
* New: [Print datetime with a defined format.](python_snippets.md#print-datetime-with-a-defined-format)
    ```python
    now = datetime.now()
    today.strftime('We are the %d, %b %Y')
    ```
    Where the datetime format is a string built from [these directives](#parse-a-datetime-from-a-string).
* New: [Print string with asciiart.](python_snippets.md#print-string-with-asciiart)
    ```bash
    pip install pyfiglet
    ```
    ```python
    from pyfiglet import figlet_format
    print(figlet_format('09 : 30'))
    ```
    If you want to change the default width of 80 caracteres use:
    ```python
    from pyfiglet import Figlet
    f = Figlet(font="standard", width=100)
    print(f.renderText("aaaaaaaaaaaaaaaaa"))
    ```
* New: [Print specific time format.](python_snippets.md#print-specific-time-format)
    ```python
    datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
    ```
    Code  Meaning Example
    %a  Weekday as locale’s abbreviated name. Mon
    %A  Weekday as locale’s full name.  Monday
    %w  Weekday as a decimal number, where 0 is Sunday and 6 is Saturday. 1
    %d  Day of the month as a zero-padded decimal number. 30
    %-d Day of the month as a decimal number. (Platform specific) 30
    %b  Month as locale’s abbreviated name. Sep
    %B  Month as locale’s full name.  September
    %m  Month as a zero-padded decimal number.  09
    %-m Month as a decimal number. (Platform specific)  9
    %y  Year without century as a zero-padded decimal number. 13
    %Y  Year with century as a decimal number.  2013
    %H  Hour (24-hour clock) as a zero-padded decimal number. 07
    %-H Hour (24-hour clock) as a decimal number. (Platform specific) 7
    %I  Hour (12-hour clock) as a zero-padded decimal number. 07
    %-I Hour (12-hour clock) as a decimal number. (Platform specific) 7
    %p  Locale’s equivalent of either AM or PM. AM
    %M  Minute as a zero-padded decimal number. 06
    %-M Minute as a decimal number. (Platform specific) 6
    %S  Second as a zero-padded decimal number. 05
    %-S Second as a decimal number. (Platform specific) 5
    %f  Microsecond as a decimal number, zero-padded on the left. 000000
    %z  UTC offset in the form +HHMM or -HHMM (empty string if the the object is naive).
    %Z  Time zone name (empty string if the object is naive).
    %j  Day of the year as a zero-padded decimal number.  273
    %-j Day of the year as a decimal number. (Platform specific)  273
    %U  Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.  39
    %W  Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.
    %c  Locale’s appropriate date and time representation.  Mon Sep 30 07:06:05 2013
    %x  Locale’s appropriate date representation. 09/30/13
    %X  Locale’s appropriate time representation. 07:06:05
    %%  A literal '%' character.  %
* Correction: Deprecate tmpdir in favour of tmp_path.
* New: [Pad integer with zeros.](python_snippets.md#pad-integer-with-zeros)
    ```python
    >>> length = 1
    >>> print(f'length = {length:03}')
    length = 001
    ```
* New: [Pathlib make parent directories if they don't exist.](python_snippets.md#pathlib-make-parent-directories-if-they-don't-exist)
    ```python
    pathlib.Path("/tmp/sub1/sub2").mkdir(parents=True, exist_ok=True)
    ```
    From the
    [docs](https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir):
    - If `parents` is `true`, any missing parents of this path are created as
      needed; they are created with the default permissions without taking mode into
      account (mimicking the POSIX `mkdir -p` command).
    - If `parents` is `false` (the default), a missing parent raises
      `FileNotFoundError`.
    - If `exist_ok` is `false` (the default), `FileExistsError` is raised if the
      target directory already exists.
    - If `exist_ok` is `true`, `FileExistsError` exceptions will be ignored (same
      behavior as the POSIX `mkdir -p` command), but only if the last path component
      is not an existing non-directory file.
* New: [Pathlib touch a file.](python_snippets.md#pathlib-touch-a-file)
    Create a file at this given path.
    ```python
    pathlib.Path("/tmp/file.txt").touch(exist_ok=True)
    ```
    If the file already exists, the function succeeds if `exist_ok` is `true` (and
    its modification time is updated to the current time), otherwise
    `FileExistsError` is raised.
    If the parent directory doesn't exist you need to create it first.
    ```python
    global_conf_path = xdg_home / "autoimport" / "config.toml"
    global_conf_path.parent.mkdir(parents=True)
    global_conf_path.touch(exist_ok=True)
    ```
* New: [Pad a string with spaces.](python_snippets.md#pad-a-string-with-spaces)
    ```python
    >>> name = 'John'
    >>> name.ljust(15)
    'John           '
    ```
* New: [Get hostname of the machine.](python_snippets.md#get-hostname-of-the-machine)
    Any of the next three options:
    ```python
    import os
    os.uname()[1]
    import platform
    platform.node()
    import socket
    socket.gethostname()
    ```
* New: [Get common elements of two lists.](python_snippets.md#get-common-elements-of-two-lists)
    ```python
    >>> a = ['a', 'b']
    >>> b = ['c', 'd', 'b']
    >>> set(a) & set(b)
    {'b'}
    ```
* New: [Recursively find files.](python_snippets.md#recursively-find-files)
    ```python
    from pathlib import Path
    for path in Path("src").rglob("*.c"):
        print(path.name)
    ```
* New: [Print an exception using the logging module.](python_snippets.md#using-the-logging-module)
    Logging an exception can be done with the module-level function
    `logging.exception()` like so:
    ```python
    import logging
    try:
        1 / 0
    except BaseException:
        logging.exception("An exception was thrown!")
    ```
    ```
    ERROR:root:An exception was thrown!
    Traceback (most recent call last):
    File ".../Desktop/test.py", line 4, in 
        1/0
    ZeroDivisionError: division by zero
    ```
    Notes
    - The function `logging.exception()` should only be called from an exception
      handler.
    - The logging module should not be used inside a logging handler to avoid a
      `RecursionError`.
    It's also possible to log the exception with another log level but still show
    the exception details by using the keyword argument `exc_info=True`, like so:
    ```python
    logging.critical("An exception was thrown!", exc_info=True)
    logging.error("An exception was thrown!", exc_info=True)
    logging.warning("An exception was thrown!", exc_info=True)
    logging.info("An exception was thrown!", exc_info=True)
    logging.debug("An exception was thrown!", exc_info=True)
    logging.log(level, "An exception was thrown!", exc_info=True)
    ```
* New: [Print an exception with the traceback module.](python_snippets.md#with-the-traceback-module)
    The `traceback` module provides methods for formatting and printing exceptions
    and their tracebacks, e.g. this would print exception like the default handler
    does:
    ```python
    import traceback
    try:
        1 / 0
    except Exception:
        traceback.print_exc()
    ```
    ```python
    Traceback (most recent call last):
      File "C:\scripts\divide_by_zero.py", line 4, in 
        1/0
    ZeroDivisionError: division by zero
    ```
### [ICS](ics.md)
* New: Introduce ICS.
    [ics](https://icspy.readthedocs.io/en/stable/index.html) is a pythonic iCalendar
    library. Its goals are to read and write ics data in
    a developer-friendly way.
### [Maison](maison.md)
* New: Introduce Maison.
    [Maison](https://github.com/dbatten5/maison) is a Python library to read
    configuration settings from configuration files using
    [`pydantic`](pydantic.md) behind the scenes.
    It's useful to parse TOML config files.
### [Pydantic](pydantic.md)
* New: Use mypy pydantic's plugin.
    If you use [mypy](mypy.md) I highly recommend you to [activate the pydantic plugin](https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin) by adding to your `pyproject.toml`:
    ```toml
    [tool.mypy]
    plugins = [
      "pydantic.mypy"
    ]
    [tool.pydantic-mypy]
    init_forbid_extra = true
    init_typed = true
    warn_required_dynamic_aliases = true
    warn_untyped_fields = true
    ```
* New: [Ignore a field when representing an object.](pydantic.md#ignore-a-field-when-representing-an-object)
    Use `repr=False`. This is useful for properties that don't return a value
    quickly, for example if you save an `sh` background process.
    ```python
    class Temp(BaseModel):
        foo: typing.Any
        boo: typing.Any = Field(..., repr=False)
    ```
### [Elasticsearch](elasticsearch.md)
* New: [Delete snapshot repository.](elasticsearch.md#delete-snapshot-repository)
    ```bash
    curl -XDELETE {{ url }}/_snapshot/{{ backup_path }}
    ```