AES 等。重新编译内核启动后会自动注册 eCryptfs，其 init 的代码如清单六所示。
###### 清单六 eCryptfs init 过程
    static int __init ecryptfs_init(void)
    {
        int rc;
        //eCryptfs的extent size不能大于page size
        if (ECRYPTFS_DEFAULT_EXTENT_SIZE > PAGE_CACHE_SIZE) {
            rc = -EINVAL;  ecryptfs_printk(KERN_ERR，…);     goto out;
        }
        /*为上文列举到的eCryptfs重要的数据结构对象申请内存，如eCryptfs的auth token、superblock、inode、dentry、file、key    等*/
        rc = ecryptfs_init_kmem_caches(); 
        …
        //建立sysfs接口，该接口中的version各bit分别代表eCryptfs支持的能力和属性
        rc = do_sysfs_registration(); 
        …
        //建立kthread，为后续eCryptfs读写lower file时能借助内核函数得到rw的权限
        rc = ecryptfs_init_kthread();
        …
        //在chromeos中该函数为空，直接返回0 
        rc = ecryptfs_init_messaging();
        …
        //初始化kernel crypto
        rc = ecryptfs_init_crypto();
        …
        //注册eCryptfs文件系统
        rc = register_filesystem(&ecryptfs_fs_type);
        …
        return rc;
    }
##### eCryptfs mount 过程
在使能了 eCryptfs 的内核，当用户在应用层下发“mount –t ecryptfs src dst options”指令时触发执行上文清单一中的
ecryptfs_mount 函数进行文件系统的挂载安装并初始化 auth token，成功执行后完成对 src 目录的 eCryptfs
属性的指定，eCryptfs 开始正常工作，此后任何在src目录下新建的文件都会被自动加密处理，若之前该目录已有加密文件，此时会被自动解密。
ecryptfs_mount 涉及的代码比较多，篇幅有限，化繁为简，函数调用关系如图五所示。
图五 eCryptfs mount的函数调用关系图
从图五可看到mount时首先利用函数ecryptfs_parse_options()对传入的option参数做解析，完成了如下事项：
  1. 调用函数`ecryptfs_init_mount_crypt_stat()`初始化用于保存 auth token 相关的 `struct ecryptfs_mount_crypt_stat` 对象；
  2. 调用函数`ecryptfs_add_global_auth_tok()`将从 option 传入的分别用于 FEK 和 FNEK（File Name Encryption Key，用于文件名加解密）的 auth token的 signature 保存到 `struct ecryptfs_mount_crypt_stat` 对象；
  3. 分析 option 传入参数，初始化 `struct ecryptfs_mount_crypt_stat` 对象的成员，如 `global_default_cipher_name`、`global_default_cipher_key_size`、`flags、global_default_fnek_sig`、`global_default_fn_cipher_name`、`global_default_fn_cipher_key_bytes`等；
  4. 调用函数`ecryptfs_add_new_key_tfm()`针对 FEK 和 FNEK 的加密算法分别初始化相应的 kernel crypto tfm 接口；
  5. 调用函数`ecryptfs_init_global_auth_toks()`将解析 option 后得到 key sign 做为参数利用 keyring 的 request_key 接口获取上层应用传入的 auth token，并将 auth token 添加入 `struct ecryptfs_mount_crypt_stat` 的全局链表中，供后续使用。
接着为 eCryptfs 创建 superblock 对象并初始化，具体如下：通过函数 sget()创建 eCryptfs 类型的
superblock；调用`bdi_setup_and_register()`函数为 eCryptfs 的 `ecryptfs_sb_info`
对象初始化及注册数据的回写设备bdi；初始化 eCryptfs superblock 对象的各成员，如
s_fs_info、s_bdi、s_op、s_d_op 等；然后获取当前挂载点的 path 并判断是否已经是
eCryptfs，同时对执行者的权限做出判断；再通过 `ecryptfs_set_superblock_lower()`函数将 eCryptfs 的
superblock 和当前挂载点上底层文件系统对应的 VFS superblock 产生映射关系；根据传入的 mount option 参数及VFS映射点
superblock 的值初始化 eCryptfs superblock 对象flag成员，如关键的 MS_RDONLY 属性；根据 VFS 映射点
superblock 的值初始化 eCryptfs superblock 对象的其他成员 ，如
s_maxbytes、s_blocksize、s_stack_depth；最后设置 superblock 对象的 s_magic 为
ECRYPTFS_SUPER_MAGIC。这可看出 eCryptfs 在 Linux kernel 的系统架构中，其依赖于 VFS 并处于 VFS
之下层，实际文件系统之上层。
下一步到创建 eCryptfs 的 inode
并初始化，相应工作通过函数`ecryptfs_get_inode()`完成，具体包括：首先获取当前挂载点对应的 VFS 的 inode；然后调用函数
iget5_locked() 在挂载的fs中获取或创建一个 eCryptfs 的 inode，并将该 inode 与挂载点对应的 VFS 的 inode
建立映射关系，与 superblock 类似，eCryptfs 的 inode 对象的部分初始值从其映射的 VFS inode 中拷贝，inode
operation 由函数 `ecryptfs_inode_set()` 发起初始化，根据inode是符号链接还是目录文件还是普通文件分别进行不同的i_op
赋值，如`ecryptfs_symlink_iops/ecryptfs_dir_iops/ecryptfs_main_iops`；同时对 `i_fop
file_operations` 进行赋值，如`ecryptfs_dir_fops/ecryptfs_main_fops` 。
然后调用`d_make_root()`函数为之前创建的 superblock 设置 eCryptfs 的根目录 s_root。
最后通过`ecryptfs_set_dentry_private()`函数为 eCryptfs 设置 dentry。
##### 加密文件creat过程
creat 过程特指应用层通过 creat 系统调用创建一个新的加密文件的流程。以应用程序通过 creat() 函数在以 eCryptfs
挂载的目录下创建加密文件为例，其函数调用流程如图六所示，creat()通过系统调用进入 VFS，后经过层层函数调用，最终调用到 eCryptfs
层的`ecryptfs_create()`函数，该部分不属于 eCryptfs 的重点，不详述。
图六 create经由VFS调用ecryptfs_create的流程
图七 eCryptfs创建加密文件的函数调用过程
eCryptfs 层通过 `ecryptfs_create()` 函数完成最终的加密文件的创建，关键代码的调用流程如图七所示，以代码做为视图，分为三大步骤：
1、通过 `ecryptfs_do_create()` 函数创建 eCryptfs 文件的 inode 并初始化；
2、通过函数`ecryptfs_initialize_file()`将新创建的文件初始化成 eCryptfs
加密文件的格式，添加入诸如加密算法、密钥信息等，为后续的读写操作初始化好 crypto 接口；
3、通过`d_instantiate()`函数将步骤一生成的 inode 信息初始化相应的 dentry。具体如下：
一．为新文件创建 inode
首先借助`ecryptfs_dentry_to_lower()`函数根据 eCryptfs 和底层文件系统（在 chromeos 里就是
ext4）的映射关系获取到底层文件系统的 dentry
值。然后调用`vfs_create()`函数在底层文件系统上创建inode，紧接着利用`__ecryptfs_get_inode()`函数创建
eCryptfs 的 inode
对象并初始化以及建立其与底层文件系统inode间的映射关系，之后通过`fsstack_copy_attr_times()`、`fsstack_copy_inode_size()`函数利用底层文件系统的
inode 对象的值初始化 eCryptfs inode 的相应值。
二．初始化 eCryptfs 新文件
经过步骤一完成了在底层文件系统上新建了文件，现在通过函数`ecryptfs_initialize_file()`将该文件设置成 eCryptfs
加密文件的格式。
  1. `ecryptfs_new_file_context()`函数完成初始化文件的 context，主要包括加密算法 cipher、auth token、生成针对文件加密的随机密钥等，这里使用的关键数据结构是 struct ecryptfs_crypt_stat，具体如清单五所示，初始化文件的 context 基本可以看成是初始化`struct ecryptfs_crypt_stat`对象，该对象的 cipher、auth token、key sign 等值从 mount eCryptfs 传入的 option 并保存在`struct ecryptfs_mount_crypt_stat` （详见清单四）对象中获取。具体是：首先由`ecryptfs_set_default_crypt_stat_vals()`函数完成 flags、extent_size、metadata_size、cipher、key_size、file_version、mount_crypt_stat 等 `ecryptfs_crypt_stat`对象的缺省值设置；然后再通过`ecryptfs_copy_mount_wide_flags_to_inode_flags()`函数根据mount时设置的`ecryptfs_mount_crypt_stat`的 flags 重新设置 `ecryptfs_crypt_stat` 对象 flags；接着由`ecryptfs_copy_mount_wide_sigs_to_inode_sigs()`函数将 mount 时保存的 key sign 赋值给 `ecryptfs_crypt_stat` 对象的 keysig_list 中的节点对象中的 keysig；然后继续将`ecryptfs_mount_crypt_stat`的 cipher、key_size 等值赋给 `ecryptfs_crypt_stat` 对象中的相应值；再调用函数`ecryptfs_generate_new_key()`生成 key 并保存到 `ecryptfs_crypt_stat` 对象的 key；最后通过`ecryptfs_init_crypt_ctx()` 函数完成 kernel crypto context 的初始化，如 tfm，为后续的写操作时的加密做好准备。
  2. `ecryptfs_get_lower_file()`通过调用底层文件系统的接口打开文件，需要注意的是`ecryptfs_privileged_open()`，该函数唤醒了上文清单六提到 kthread，借助该内核线程，eCryptfs 巧妙避开了底层文件的读写权限的限制。
  3. `ecryptfs_write_metadata()` 完成关键的写入 eCryptfs 文件格式到新创建的文件中。
关键函数`ecryptfs_write_headers_virt()`的代码如清单七所示，eCryptfs
保存格式如清单七的注释（也可参考上文的图四），其格式传承自OpenPGP，最后在`ecryptfs_generate_key_packet_set()`完成
EFEK 的生成，并根据 token_type 的类型是 ECRYPTFS_PASSWORD 还是 ECRYPTFS_PRIVATE_KEY 生成不同的
OpenPGP 的 Tag，之后保存到 eCryptfs 文件头部 bytes 26 开始的地方。这里以 ECRYPTFS_PASSWORD 为例，因此
bytes 26 地址起存放的内容是 Tag3 和 Tag11，对应着 EFEK 和 Key sign。否则保存的是 Tag1，即 EFEK。Tag3 或
Tag1 的具体定义详见 OpenPGP 的描述文档 RFC2440.
之后将生成的 eCryptfs
文件的头部数据保存到底层文件系统中，该工作由`ecryptfs_write_metadata_to_contents()`完成。
  1. 最后通过`ecryptfs_put_lower_file()`将文件改动的所有脏数据回写入磁盘。
三．最后通过 d_instantiate() 函数将步骤一生成的 inode 信息初始化相应的 dentry，方便后续的读写操作。
###### 清单七 写入eCryptfs格式文件的关键函数
    /* Format version: 1
    *   Header Extent:
     *     Octets 0-7:        Unencrypted file size (big-endian)
     *     Octets 8-15:       eCryptfs special marker
     *     Octets 16-19:      Flags
     *      Octet 16:         File format version number (between 0 and 255)
     *      Octets 17-18:     Reserved
     *      Octet 19:         Bit 1 (lsb): Reserved
     *                        Bit 2: Encrypted?
     *                        Bits 3-8: Reserved
     *     Octets 20-23:      Header extent size (big-endian)
     *     Octets 24-25:      Number of header extents at front of file (big-endian)
     *     Octet  26:        Begin RFC 2440 authentication token packet set
     *   Data Extent 0:        Lower data (CBC encrypted)
     *   Data Extent 1:        Lower data (CBC encrypted)
     *   ...
    */
    static int ecryptfs_write_headers_virt(char *page_virt, size_t max,
                           size_t *size,
                           struct ecryptfs_crypt_stat *crypt_stat,
                           struct dentry *ecryptfs_dentry)
    {
        int rc;
        size_t written;
        size_t offset;
        offset = ECRYPTFS_FILE_SIZE_BYTES;
        write_ecryptfs_marker((page_virt + offset), &written);
        offset += written;
        ecryptfs_write_crypt_stat_flags((page_virt + offset), crypt_stat,
                        &written);
        offset += written;
        ecryptfs_write_header_metadata((page_virt + offset), crypt_stat,
                           &written);
        offset += written;
        rc = ecryptfs_generate_key_packet_set((page_virt + offset), crypt_stat,
                              ecryptfs_dentry, &written,
                              max - offset);
        …
        return rc;
    }
##### 加密文件open过程
这里 open 过程主要指通过 open 系统调用打开一个已存在的加密文件的流程。当应用程序在已完成 eCryptfs 挂载的目录下
open一个已存在的加密文件时（这里以普通文件为例），其系统调用流程如图八所示，经由层层调用后进入ecryptfs_open()函数，由其完成加密文件的
metadata 分析，然后取出EFEK并使用 kernel crypto 解密得到 FEK。另外在文中”create过程”分析时，着重介绍了创建
eCryptfs
格式文件的过程，省略了在完成lookup_open()函数调用后的vfs_open()的分析，它与这里介绍的vfs_open()流程是一样的。需要特别指出的是在`do_dentry_open`函数里初始化了struct
file的f_mapping成员，让其指向inode->i_mapping；而在上图五的 inode
的创建函数`ecryptfs_inode_set`中存在`“inode->i_mapping->a_ops =
&ecryptfs_aops”`的赋值语句，这为后续的加密文件的页读写时使用的关键对象`struct address_space_operations
a_ops`做好了初始化。
下面重点介绍 ecryptfs_open() 函数，其主要的函数调用关系如图九所示。eCryptfs 支持 Tag3 和 Tag1 的形式保存
EFEK，这里的分析默认是采用了 Tag3 的方式。
图八 create 经由 VFS 调用 ecryptfs_create 的流程
图九 eCryptfs 创建加密文件的函数调用过程
`ecryptfs_open()`函数的完成的主要功能包括读取底层文件，分析其文件头部的 metadata，取出关键的 EFEK 及 key
sign，之后根据key sign从`ecryptfs_mount_crypt_stat`对象中匹配到相应的 auth token，再调用 kernel
crypto 解密 EFEK 得到 FEK，最后将 FEK 保存到`ecryptfs_crypt_stat`的 key 成员中，完成
`ecryptfs_crypt_stat` 对象的初始化，供后续的文件加解密使用。具体如下：
  1. `ecryptfs_set_file_private()`巧妙的将 `struct ecryptfs_file_info` 保存到 struct file 的 private_data 中，完成 VFS 和 eCryptfs 之间的链式表达及映射；
  2. `ecryptfs_get_lower_file()`借助 kthread 内核线程巧妙的获取到底层文件的RW权限；
  3. `ecryptfs_set_file_lower()` 完成 `struct ecryptfs_file_info`的 wfi_file 和底层文件系统文件 lower_file 之间的映射；
  4. `read_or_initialize_metadata()` 完成了 ecryptfs_open 的大部分功能，首先通过`ecryptfs_copy_mount_wide_flags_to_inode_flags()`从文件对应的 `ecryptfs_mount_crypt_stat` 中拷贝 flags 对`ecryptfs_crypt_stat`的 flags 进行初始化；之后使用函数 `ecryptfs_read_lower()` 读取文件的头部数据，紧接着利用`ecryptfs_read_headers_virt()` 进行数据分析和处理，包括：
1) 利用`ecryptfs_set_default_sizes()`初始化`ecryptfs_crypt_stat`对象的
extent_size、iv_bytes、metadata_size 等成员的默认值;
2) 使用`ecryptfs_validate_marker()`校验文件的 marker 标记值是否符合 eCryptfs 文件格式；
3) 通过`ecryptfs_process_flags()`取出文件 metadata 保存的 flag 并修正
`ecryptfs_crypt_stat` 对象成员 flags 的值,同时初始化对象成员 file_version；
4) 在`parse_header_metadata()`分析文件的 metadata 的大小并保存到 `ecryptfs_crypt_stat` 对象成员
metadata_size；
5) 通过 `ecryptfs_parse_packet_set()` 解析 Tag3 和 Tag11 的 OpenPGP 格式包，获取 EFEK 及
key sign，后根据 key sign 匹配到 auth token，再调用 kernel crypto 解密 EFEK 得到
FEK。对应的代码实现逻辑是：`parse_tag_3_packet()`解析 Tag3，获取 EFEK 和 cipher，同时将 cipher 保存到
`ecryptfs_crypt_stat` 对象成员 cipher；parse_tag_11_packet() 解析出 key sign，保存到
auth_tok_list 链表中；`ecryptfs_get_auth_tok_sig()`从 auth_tok_list 链表中获取到 key
sign;然后通过`ecryptfs_find_auth_tok_for_sig()`根据 key sign
从`ecryptfs_mount_crypt_stat`对象中匹配到相应的 auth token；再利用
`decrypt_passphrase_encrypted_session_key()`使用分析得到的 auth token、cipher 解密出