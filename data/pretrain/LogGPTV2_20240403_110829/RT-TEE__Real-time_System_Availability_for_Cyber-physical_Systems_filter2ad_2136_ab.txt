• We designed and implemented a real-time trusted execu-
tion environment, RT-TEE, capable of ensuring real-time
availability on both CPU and I/O for commodity embed-
ded processors in the presence of a compromised OS,
addressing a key requirement for safety-critical CPS/IoT.
• To balance real-time responsiveness and TCB minimiza-
tion, we designed and developed a policy-based event-
driven hierarchical scheduler. To minimize the attack
surface of device drivers in the TCB, we developed an
I/O reference monitor on top of driver debloating and
sandboxing to ensure the real-time I/O availability.
• We implemented a prototype on both ARMv8-A and
ARMv8-M processors1. We tested our system on both
synthetic tasks as well as real-world applications, cov-
ering three CPS platforms, quadcopter, plane, and rover,
in simulation. We also deployed RT-TEE on a real-life
quadcopter to validate the feasibility.
II. BACKGROUND AND MOTIVATION
Lack of Availability in Existing TEE Deployment Model:
ARM processor families, which power more than 60% of
embedded devices, have a long history of building a trusted
1The prototype source code and emulation environment is available at
https://github.com/WUSTL-CSPL/RT-TEE
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
2353
execution environment called ARM TrustZone into both low-
end Cortex-M and high-end Cortex-A series. Similar to ARM,
many commodity [16], [35], [15] and customized proces-
sor [18], [36], [17] offerings enable hardware-enforced re-
source isolation between the secure and non-secure environ-
ment, which are also referred to as the secure world and non-
secure/normal world in ARM. Using such isolation, TEE offers
a secure environment for secure processing even if the non-
secure OS is compromised. However, based on the design
principle of TCB minimization, most existing deployment
models of powerful TEE hardware rely on the non-secure
OS for resource orchestration. Using the current most widely
deployed embedded TEE, TrustZone, as a case study, we
surveyed all existing TEE software stacks, including nVidia
TLK, Linaro OP-TEE, Trustonic TEE, Huawei iTrustee, An-
droid Trusty, and Qualcomm TEE. All of them rely on the
non-secure OS for resource management, including process
scheduling. The detailed survey can be found in Appendix J.
Real-Time System Background: Contrary to the popular
belief that real-time systems need to complete individual tasks
quickly, the expectation in the real-time system community is
that a task shall ﬁnish before its deadline [37]. A task is usually
implemented as a thread in an OS. Real-time (RT) tasks are
tasks with certain timing constraints. Periodic tasks are the
most common model in real-time scheduling, because they
map well to cyber-physical processes, where a task releases
jobs periodically. The interval between two consecutive job
releases is referred to as the period. Each job needs to be
executed and completed before its deadline. A deadline can
be explicit (speciﬁed) or implicit (at the end of a period).
A hard real-time job must be completed before the deadline;
completion past the deadline does not provide any utility and
may lead to serious consequences. To facilitate scheduling, a
priority is assigned to a task. The priority can be ﬁxed (i.e.,
determined before run-time) or dynamic (i.e., changing based
on the current tasks running in the system).
Security Implication of Real-time Property: The timing
critical nature of CPS changes the landscape of attack vectors
when the non-secure OS is compromised. Resources not only
need to be made available, but also have to be available in a
timely manner such that the computation can ﬁnish on time.
To motivate the necessity of real-time scheduling for security,
we developed a concrete attack called time warping attack that
exploits DVFS and can destabilize the system even when the
controller for the CPS is bug-free and protected by TEE.
Time Warping Attack: Dynamic Voltage and Frequency
Scaling is a ubiquitous energy management technique that
enables a trade-off between processor speed and energy con-
sumption. During the schedulability test, the worst-case exe-
cution time is calculated based on the assumption of speciﬁc
processor frequency. When it is changed, the original allocated
budget for secure/critical tasks will no longer sufﬁce. Since
the frequency scaling attack can occur anytime during the
execution of the secure environment by launching the attack on
a different core occupied by the untrusted non-secure OS, the
(a) Localization Trajectories
(b) Absolute Pose Error
Fig. 1: Trajectory under Frequency Scaling Attack in Open-loop Testing.
secure environment also faces the challenge of time-of-check
vs time-of-use (ToCToU). This frequency reduction leads to
a misconception of time elapsing in the secure environment,
and results in control destabilization.
To visualize the potential impact, we launched the attack
against
the control program of the drone, which is using
VINS-Fusion [38] for localization. The testing environment
is the EuroC drone dataset recorded in the ETH machine
hall. Our attack lowered the frequency of the processor by
half. As shown in Fig. 1a and Fig. 1b, the trajectory under
Timing Warping Attack deviates signiﬁcantly even in open-
loop testing. Fig. 1b shows the deviations quantitatively with
respect to time. At a certain range along the trajectory, the
deviation is more than 3 meters, which would lead to the drone
crashing into the machinery in the factory in the real world.
III. THREAT MODEL AND SECURITY GOAL
Threat Model: We aim to tackle a strong adversary who can
exploit software vulnerabilities to execute arbitrary code in the
non-secure OS. The attacker’s goal is to launch a denial of
service attack (DoS) to destabilize the cyber-physical system,
causing adverse kinetic effect. Among all the possible attack
vectors, an adversary may attempt to disable an I/O device
to prevent sensing or actuation. He/she may also attempt to
prevent
the controller from running by denying access to
processor/memory or by directly tampering with the controller
memory. For example, an attacker may also attempt to delay
pedestrian detection on self-driving vehicles. In a time warping
attack, the processor frequency is maliciously modiﬁed to deny
localization process access to computing, leading to the drone
crashing. However, we leave the defense against side-channel
attacks and hardware attacks for future work.
Assumptions: We assume the hardware platform supports a
trusted execution environment that provides strong isolation on
processor, memory, and peripherals. Isolation is a key design
principle of TEE among both the commodity TEEs [35], [15],
[39], [16] and customized TEEs [36], [30], [28]. We also
assume that there is a time source capable of accounting for
physical world time. We also assume all the hardware com-
ponents can be trusted, including processor, sensor/actuator
peripherals, and bus masters.
Security Goal: The goal of RT-TEE is to provide a real-
time trusted execution environment on embedded CPSs. In
the presence of an untrusted OS, RT-TEE has the following
goals besides existing conventional TEE protection:
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
3354
Launch Time Warping AttackLaunch Time Warping AttackA. Minimal Abstraction for Resource Availability
trustworthy resource management
The ﬁrst challenge is to identify the minimal set of re-
quirements to bootstrap resource availability such that the
rest of the design can build on top of a hardware abstrac-
tion layer. While TEEs such as TrustZone are designed to
provide resource isolation, separation alone does not provide
availability, especially when the software component (OS) that
is responsible for resource management is not in the TCB.
Recognizing that
is not
possible, we then ask what the essential components of CPS
are and what type of availability guarantee should be provided.
A foundational design for many CPSs is the control loop,
which consists of sensing, control, and actuation. Deriving
from this requirement, RT-TEE has to ensure the integrity and
availability of computation for control computation and I/O
for sensing and actuation.
Primitive for Bootstrapping Computation Availability:
There are two requirements. First, the TCB has to be able
to regain control of the processor from the non-secure OS
to perform computation. This requires a secure timer which
is not modiﬁable by the non-secure OS and traps the pro-
cessor directly into the secure environment. Secure timer is
also instrumental for real-time responsiveness, since it allows
the secure environment to obtain processor resources in a
timely and deterministic manner. Due to the importance of
such features, secure timer is widely available in commodity
embedded TEE platforms. According to our survey, secure
timer is available in 19 out of 21 processors that support
ARM TrustZone. More details can be found in Appendix A.
Furthermore, research prototypes such as AION [28] and
others [30], [40], [18], [17], [41] also provide secure timer
as a primitive. Second, the secure environment also needs
to maintain access to the processor to ﬁnish the necessary
computation. Therefore it is important for the TCB to have the
ability to prevent interruptions from the non-secure OS. Using
the ability to regain control and prevent further interruptions,
the TCB can bootstrap the computational availability.
Primitive for Boostrapping I/O Availability: Recognizing
the importance of peripheral access in embedded systems,
many existing embedded TEEs provide primitives for the TCB
to obtain exclusive access to individual I/O devices [35], [15],
[42], [28]. For example, different from SGX, which is widely
deployed in server platforms, both ARM TrustZone and the
customized TEE SoC proposed in [30] have primitives to
enable exclusive I/O access. Once the secure environment
has exclusive access, it can leverage software to mediate all
the requests to the peripheral devices to ensure prioritization,
bootstrapping the I/O availability.
Primitive for Obtaining Physical Passage of Time: CPS has
to sense and actuate at the right time to ensure safety during
its interaction with the physical world [31], [33]. As a result,
accurate accounting of time passage in the physical world is
essential. The secure physical world clock primitive can be
realized using a SoC-provided non-mutable clock or software-
based time keeping on top of a secure physical timer.
Fig. 2: System Overview for Trusted CPS Framework
R1. Access to Computation and I/O Resources. Cyber-
physical control loops often involve sensing, computation, and
actuation. To provide a minimalist execution environment for
the cyber-physical system controller, the secure safety-critical
process shall have access to both computation resources (for
control) and I/O resources (for interaction with physical world
with sensing and actuation).
R2. Access to Physical Passage of Time. A trustworthy
source of the physical passage of time is crucial because the
computing system is trying to control a physical world process.
Inducing an actuation at the wrong time can easily destabilize
the control system.
R3. Real-time Availability. Many safety-critical CPS con-
trollers are real-time in nature. Results from processes such
as pedestrian detection or collision avoidance have little to no
value if they exceed the deadlines. Therefore, the resources
shall be available to the protected workload in real-time.
R4. Prevention of DoS by Shutdown or Peripheral Damage.
While DoS attacks often pose little risk to safety in IT
computing environments, they can be catastrophic in CPSs.
As a result, RT-TEE shall be able to prevent a non-secure OS
from denying access to resources (processor and peripherals)
by shutting down the computing system or putting sensors/ac-
tuators in non-recoverable states.
R5. Minimal Impact on TCB. Complete mediation of access
to system resources is necessary for availability assurance.
Even when only critical resources are mediated, there is a
signiﬁcant increase in the size of TCB, e.g., from the inclusion
of device drivers. RT-TEE shall maintain a small TCB.
IV. RT-TEE DESIGN
RT-TEE aims to provide real-time system availability in
the presence of a non-secure operating system. As shown
in Fig. 2, RT-TEE leverages hardware primitives to isolate
resources between the secure environment and the non-secure
environment. There are three key design elements in RT-TEE,
bootstrapping availability, real-time processor availability, and
real-time I/O availability. For the rest of the discussion, we will
use ARM as a reference architecture. However, we believe the
design philosophy can also beneﬁt other platforms.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
4355
Video StreamingFail-safeCheckerFail-safeControllerCPUUserKernelNon-Secure OSHierarchical SchedulingNon-SecureSecureI/OcompassbarometerIMUmotorsReal-timeProcessorAvailabilityReal-time I/OAvailabilityBootstrappingAvailabilitywith ResourceIsolationCritical Peripherals led lightcameraUncritical PeripheralsSandboxedFeature Rich DriversI/O Reference MonitorTrustedDebloatedDriverOS as well. This will signiﬁcantly increase the complexity
of the scheduler, leading to a large expansion of the TCB. To
make such coordination more challenging, the secure TCB also
has to assume all schedule-related inputs from the non-secure
environment are malicious. As a result, interaction between
the two environments on scheduling has to be minimized.
One scheduling method that minimizes interactions is to
always prioritize secure critical tasks. This approach is called
idle scheduling and has been adopted in previous works [44],
[45]. However, while security and criticality are often aligned,
secure critical tasks may not necessarily require the shortest re-
sponse time. For example, it is better for the system to process
the video streaming workload ﬁrst, as long as the control tasks
meet their deadline and are capable of maintaining control
of the vehicle frame. As a result, idle scheduling can lead
to degraded overall system performance while gaining little
advantage in control performance. These design trade-offs are
often observed in mixed-criticality systems (MCSs), a concept
that originally came from avionics. Due to increasing pressure
to reduce space, weight, and power (SWaP), most modern
CPSs consolidate functionality on single physical processors,
often making them MCSs [34], [33].
Our Solution – Policy-based Event-driven Hierarchical
Scheduling for Real-time Computation Availability: To
decouple task security/criticality from timeliness/task priority,
and to enable better overall system performance without
increasing the complexity of the secure scheduler, we make
use of hierarchical scheduling [46] to harmonize security/-
criticality and timeliness. Hierarchical scheduling is a layered
approach where the scheduler at each layer is only responsible
for subsystems in that layer. Using composition scheduling
analysis, it is possible to produce a system speciﬁcation that
will satisfy all the real-time constraints of all the tasks. In
other words, as long as the scheduler strictly follows the spec-
iﬁcation/policy produced by the analysis, all tasks (secure and
non-secure) are guaranteed to have the computation resources
to ﬁnish before the deadlines. RT-TEE employs a two-layer
hierarchical scheduling design to decouple real-time prop-
erties (priority) with security properties (security/criticality),
enabling more effective resource coordination between secure
and non-secure environments with minimized interaction.
However, direct application of conventional hierarchical
scheduling in RT-TEE has several signiﬁcant drawbacks. First,
a conventional scheduling system often makes use of timer
to interrupt at ﬁxed intervals, usually single jiffy, to provide
time tracking. While this overhead is tolerable without the
security architecture, frequent timer interrupts are prohibitively
expensive in RT-TEE due to the expensive context switching.
To tackle this challenge, our scheduler leverages the prop-
erty that tasks are predictable in cyber-physical systems to
only interrupt based on scheduling events, such as budget
replenishment and task completions. The event-driven schedul-
ing system signiﬁcantly reduces the interrupt overhead in
the scheduling system. Furthermore, different from existing
scheduling systems where I/O events can interrupt the running
Fig. 3: RT-TEE Scheduling Architecture
B. Real-time Availability for Computation
Building on top of the bootstrapped computation availabil-
ity, a key research question is how to ensure the real-time
property of computation availability. In safety-critical real-time
cyber-physical systems, security, criticality, and timeliness are
often the most
important attributes of individual real-time
tasks (processes). Security often describes the ability to main-
tain conﬁdentiality and integrity against adversarial attacks.
Existing TEEs are designed to protect these two properties.
Criticality reﬂects the importance of the task for the correct
functioning of the cyber-physical system. Security and criti-
cality are often aligned; critical tasks also need to be secure.
Timeliness captures the need to complete a particular task in a
timely manner, i.e., completing before the deadline. To ensure
timeliness, system designers have to perform schedulability
analysis [43], [33] at design time. The analysis takes in a set of
real-time task characteristics (periods, deadlines, budgets) and
produces a set of scheduling parameters that can guarantee that
all tasks will have the computation resources to ﬁnish before