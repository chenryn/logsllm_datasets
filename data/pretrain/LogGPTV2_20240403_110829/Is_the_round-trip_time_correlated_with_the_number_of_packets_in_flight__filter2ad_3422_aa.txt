title:Is the round-trip time correlated with the number of packets in flight?
author:Saad Biaz and
Nitin H. Vaidya
Is the Round-trip Time Correlated with the Number of
Packets in Flight ?∗
Computer Science and Software Engineering
Dept. of Electrical and Computer Engineering,
Nitin H. Vaidya
Saad Biaz
Auburn University
PI:EMAIL
ABSTRACT
TCP uses packet loss as a feedback from the network to
adapt its sending rate. TCP keeps increasing its sending
rate as long as no packet loss occurs (unless constrained
by buﬀer size). Alternative congestion avoidance techniques
(CATs) have been proposed to avoid such “aggressive” be-
havior. These CATs use simple statistics on observed round-
trip times and/or throughput of a TCP connection in re-
sponse to variations in congestion window size. These CATs
have a supposed ability to detect queue build-up.
The objective of this paper is to question the ability of
these CATs to reliably detect queue build-up under real net-
work conditions. For this purpose, the sample coeﬃcient of
correlation between round-trip time and the number of pack-
ets in ﬂight is analyzed for 14,218 connections over 737 In-
ternet paths. These coeﬃcients of correlation were extracted
from a set of tcpdump traces collected by Vern Paxson.
The coeﬃcients of correlation measured conﬁrm that the
correlation between RTT and window size is often weak.
Categories and Subject Descriptors
C.4 [Performance of Systems]: Measurements techniques;
C.2.2 [Computer Communication Networks]: Network
Protocol
General Terms
Congestion control
Keywords
TCP, congestion predictors, roundtrip time, congestion win-
dow size, correlation
∗
grant ANI 01-96413.
Research supported in part by National Science Foundation
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’03, October 27–29, 2003, Miami Beach, Florida, USA.
Copyright 2003 ACM 1-58113-773-7/03/0010 ...$5.00.
and Coordinated Science Laboratory
University of Illinois at Urbana-Champaign
PI:EMAIL
1.
INTRODUCTION
TCP is a popular protocol for reliable data delivery in the
Internet. TCP is robust in that it can adapt to disparate
network conditions [7]. TCP senders use packet loss as a
feedback from the network to adjust a congestion window
size to adapt its oﬀered load to the network conditions. A
TCP sender keeps increasing its oﬀered load (i.e., conges-
tion window size) until packet loss occurs (unless limited by
receiver buﬀer size). To avoid such “provoked” losses, sev-
eral congestion avoidance techniques (CATs) [8, 5, 16] at-
tempt to determine the appropriate load on the network by
using simple statistics on observed round-trip times (RTT)
and/or observed throughput of a TCP connection. These
techniques attempt to perform congestion avoidance by de-
tecting queue build-up in the network, thus preventing con-
gestion losses. Such congestion avoidance techniques, if re-
liable, can potentially be used to distinguish packet losses
due to congestion from those due to other causes (such as
transmission errors) [3]. These techniques were tested in
order to distinguish congestion losses from wireless trans-
mission losses. The results were quite poor [3] raising a
natural question about the CATs’s ability to detect queue
build-up under real network conditions. Andren et. al [1]
also showed that there is a weak correlation between loss
and delay. More recently, Martin et. al [10, 9] showed that
(1) the congestion information contained in RTT variations
is not suﬃcient to reliably predict packet loss and (2) that
the impact of one ﬂow on the congestion level of the path
is minimal when this ﬂow consumes a small fraction of the
resources at the bottleneck.
This paper makes an attempt to evaluate the rationale
upon which congestion avoidance techniques (CATs) are
built. For this purpose, the coeﬃcient of correlation be-
tween the round trip time and the amount of data in ﬂight
is evaluated for 14,218 TCP connections over 737 Internet
paths – amount of data in ﬂight is the amount of data sent
by a TCP sender for which an acknowledgement has not
been delivered to the sender. These data collected in [12]
are quite old when many “fast” links were T1 links! Band-
width on most links has dramatically increased since the
collection of this data. But these data are unique because
they span many paths with diﬀerent round trip times.
The CATs are designed based on the assumption that
an increase of the load by a user would increase the round
trip delay when queue build-up occurs. Therefore, it may be
inferred that, there should be some correlation between the
load (amount of data in ﬂight) variations and the observed
round trip time variations. It is then interesting to measure
the coeﬃcient of correlation between the amount of data in
ﬂight and the round trip time observed by the sender. These
results conﬁrm and explain the results obtained by Padhye
et al. [11] and by Hengartner et al. [6].
To derive the TCP throughput model [11], Padhye as-
sumed the independence between the window size and the
round-trip time. Padhye et al. veriﬁed the hypothesis on a
small set of TCP connections by measuring the correlation
between window size and round-trip time. He observed a
weak correlation on high speed links and a strong correla-
tion up to 0.95 on slow links (modem connection with 28.8
Kbps).
In [6], Hengartner et al. decomposed TCP Vegas into
the various novel mechanisms proposed by Brakmo et al. [5]
and assessed the eﬀect of each of these mechanisms on per-
formance. Hengartner et al. show that TCP Vegas’ innova-
tive congestion avoidance mechanism has only a minor inﬂu-
ence on throughput. Moreover, Hengartner show that TCP
Vegas’s innovative congestion avoidance mechanism has a
slightly negative inﬂuence on throughput when the bottle-
neck link has high bandwidth. This paper explains this
last surprising result.
To our knowledge, there has been no published work relat-
ing the study of this correlation on a large set of connections.
The rest of this paper is organized as follows. Section 2
presents the terminology and notations used in this paper.
Section 3 summarizes three congestion avoidance techniques
(CATs). Experiments and results are discussed in Section 4.
Conclusions are presented in Section 5.
2. TERMINOLOGY AND NOTATIONS
W =    1                   1      2                            1      2     3 
PT
i
PT
1
PF
1
PW
1
P
1
1
0
P
2
2
PT
0
PF
0
PW
0
P
0
0
RTT
0
i
i-th packet
Tails
2
Fronts
P
4
4
P
5
5
Monitored
All
time
4
RTT
3
RTT
4
PF
2
PW
2
P
3
3
2
j
Ack
RTT
1
RTT
2
Figure 1: Illustration for the notations
Figure 1 illustrates most of the terms used in this paper;
these terms are deﬁned below. Figure 1 represents a typical
beginning of a connection where packets 0 through 5 are sent
by a sender. SYN/ACK packets are not considered. The
sender sends ﬁrst packet 0 (white rectangle above the time
line) and awaits for an acknowledgement (small black packet
below the time line) from the receiver before sending packet
1. When ack 0 is received, the congestion window is in-
creased by one Maximum Segment Size (MSS)1. Therefore,
two packets, 1 and 2, are sent back-to-back (burst). Packet 1
1Ack i acknowledges receipt of data through packet i; for
simplicity, this notation is diﬀerent from TCP syntax.
is the front and packet 2 is the tail of this burst. The sender
then waits for an ack, until ack 2 is received. (Note that
this example assumes delayed acknowledgement.) Again the
congestion window size is incremented and the sender may
send a burst of three packets 3, 4, and 5. Notations are
deﬁned below.
• packet Pi: Pi is the i-th packet sent by the sender, ex-
cluding any retransmitted packets. Essentially, the set
of packets Pi contains those packets for which round-
trip time (RTT) could be calculated using traced in-
formation at the sender. (Note that TCP senders do
not, in fact, keep track of the RTT of each Pi.) To
avoid the ambiguity of computing the round trip time
when a packet is transmitted more than once, retrans-
mitted packets are omitted in the analysis.
In Fig-
ure 1, packets numbered 0, 1, 2, ··· , 5 are, respectively,
P0, P1, P2,··· , P5. In this ﬁgure, there are no retrans-
mitted packets.
In the following, a packet P is said
“relevant” if P = Pi for some i.
• packet P Wj: TCP sender measures the round-trip
time (RTT) for one packet “per window”. P Wj is
the j-th packet for which an RTT sample is collected.
P Wj is referred as a “monitored” packet. In Figure 1,
TCP sender monitors only packets P0, P1 and P3 and
determines their RTT. Therefore, packets P W0, P W1,
and P W2 are respectively the packets P0, P1 and P3.
• packet P Fk: packets sent by a TCP sender are divided
into “bursts” – during a burst, packets are sent back-
to-back (line-rate burst) by the TCP sender. Later in
the paper, the method of how a burst is identiﬁed is
described. P Fk is the k-th relevant packet that ap-
pears at the front of a burst. In Figure 1, there are
three bursts: a burst consisting of packet 0, a burst
consisting of packets 1, 2, and a burst consisting of
packets 3, 4, 5. The front packets for these bursts are
respectively P F0 = P0, P F1 = P1, and P F2 = P3.
• packet P Tm: P Tm is the m-th relevant packet that
In Figure 1, the tail
appears at the tail of a burst.
packets are P T0 = P0, P T1 = P2, and P T2 = P5.
• W (Pi), amount of data in ﬂight2 for Pi: W (Pi) is the
amount of data transmitted (including Pi) by the TCP
sender for which an acknowledgement is not received
by the sender until after Pi is transmitted. On top of
Figure 1, the value W (Pi) is provided for each packet
Pi. For example, when P0 is sent, the number of pack-
ets in ﬂight is W (P0) = 1 packet. When P5 is sent,
W (P5) is equal to 3 packets
• Round-trip time RT T (Pi) for packet Pi: RT T (Pi) is
the duration from the time when Pi is transmitted,
until the time when an acknowledgement for Pi is re-
ceived by the TCP sender.
In Figure 1, for brevity,
RT T (Pi) is denoted as RT Ti.
• Sign(x) : Sign(x) = x|x| is respectively equal to 1, 0,
or −1 if x is positive, null, or negative.
2Although the amount of data is measured in bytes in this
analysis, in the discussion, it may occasionally be stated as
a number of packets.
• Connection Cl is the l-th TCP connection in the TCP
dataset used in this study with l from 1 to 14,218.
• Bandwidth B(Cl) is an estimate of the bandwidth of
the bottleneck link for the connection Cl.
Now, some coeﬃcients of correlation are deﬁned for connec-
tion Cl to be evaluated during these experiments.
• ρ(Cl, RT T (Pi), W (Pi)) is the coeﬃcient of correlation
between RT T (Pi) and W (Pi) for the relevant packets
Pi.
• ρW (Cl, RT T (P Wi), W (P Wi)) is similarly deﬁned for
the monitored packets P Wi.
• ρF (Cl, RT T (P Fi), W (P Fi)) is similarly deﬁned for the
packets P Fi at the front of bursts.
• ρT (Cl, RT T (P Ti), W (P Ti)) is similarly deﬁned for the
packets P Ti at the tail of bursts.
The coeﬃcient of correlation ρ(Cl, xi, yi) for connection Cl
is deﬁned as [15]:
ρ(Cl, xi, yi) =
i(xi − ¯x)(yi − ¯y)
i(xi − ¯x)2i(yi − ¯y)2
where ¯x and ¯y are, respectively, the means over xi’s and yi’s.
Since sample coeﬃcient of correlation is a commonly used
metric to evaluate the degree of relationship among vari-
ables, this metric is chosen for this study as well. The above
coeﬃcients of correlation are calculated between values of
RTT and W samples. Similar coeﬃcients of correlation for
the direction of change (increase or decrease) in the values
of RTT and W are deﬁned.
• ρv(Cl, Sign(δRT T ), Sign(δW )) is the coeﬃcient of cor-
relation between Sign(RT T (Pi) − RT T (Pi−1)) and
Sign(W (Pi) − W (Pi−1)) for the packets Pi
• ρWv(Cl, Sign(δRT T ), Sign(δW )) is similarly deﬁned
for the packets P Wi
• ρFv(Cl, Sign(δRT T ), Sign(δW )) is similarly deﬁned
for the packets P Fi
• ρTv(Cl, Sign(δRT T ), Sign(δW )) is similarly deﬁned for