Chrome/Win 73
932.7
IE 9/Win 73
4511.2
1: Acer Aspire, Ubuntu 11.10, Core i5, 2.53 GHz, 4GB RAM
2: MacBook Pro, Os X 10.7.2, Core i7, 2,2 GHz, 8GB RAM
3: ThinkPad T410s, Win7 Pro x64 SP1, Core i5 2,6 GHz, 4GB RAM
1024 Bit
261.1
426.8
257.9
942.5
281.9
1314.6
768 Bit
116.7
182.6
113.9
405.6
127.2
592.2
Table 2: JavaScript implementation performance
(times in ms, averaged over ten runs)
the user can be tricked into entering his password in non-
BetterAuth form ﬁeld, the attacker is still able to steal it.
What is needed to close this hole is a visually unspoofable
“trusted path” [43] from the user to a well isolated password
handler within the browser.
If such functionality is pro-
vided, further security guarantees in respect to the handling
of the password data can be robustly introduced. Merely
implementing such an approach is not a hard task on the
engineering level, in parts it has already been done with the
authentication dialogues for HTTP basic and digest authen-
tication as well in various research prototypes. However, it
is a major challenge in UI design. A right balance has to be
found between the needs of Web UI designers and the ability
of users to reliably recognize such “secure” entry forms.
Limited protection against Clickjacking: As moti-
vated in Sec. 2.2.2, Clickjacking can be regarded as a class
of vulnerabilities rooted in the current practice of authen-
tication tracking. More precisely, Clickjacking is based on
the adversary’s capability to load cross-domain, authenti-
cated GUI interfaces into the iframe. If BetterAuth is used
without any conﬁgured public interfaces (see Sec. 3.5), this
attack pattern would be infeasible, as no entry point into
the application logic can be accessed from outside of an au-
thenticated context. However, this protection ends as soon
as public interfaces are added: In this case, the application
probably oﬀers a navigation path from the public interface
to the targeted GUI interface. By tricking the user into
multiple click-interactions with the disguised iframe, the at-
tacker may be able to trick the user into unknowingly con-
duct this navigation. As all requests which originate from
the public interface come from an authenticated context,
they transparently receive request signatures, resulting in
potential access of the attacker to the targeted Web GUI.
Therefore, public interfaces should still be protected with
anti-framing measures. Nonetheless, BetterAuth raises the
bar of diﬃculty for Clickjacking attacks and with the set of
public interfaces being limited and explicitly conﬁgured, full
anti-framing protection is a straight forward task.
Replay attacks: If implemented in the from it is de-
scribed in Sec. 3, the communication between browser and
server would be susceptible to replay attacks from network
attackers. We left handling of this issue out of the descrip-
tion for brevity and clarity reasons. However, adding replay
protection to the authentication tracking process is straight-
forward, using a sliding window of monotonous growing nonces
in the requests and limited state-keeping on the server-side.
176
6. RELATED WORK
7. CONCLUSION
Isolated security aspects of the Web authentication have
received considerable attention, foremost the areas of phish-
ing [8, 37, 41],cross-site scripting [25, 29, 20, 31]and CSRF [3,
33]. Due to the narrow focus of these works, we omit a de-
tailled discussion. For the remainder of this section, we fo-
cus on password protocols and approaches that target Web
authentication.
Password protocols: Bellovin and Merritt proposed
the Encrypted Key Exchange (EKE) protocol that is based
on pre-shared secretes, i.e. passwords, and secure against
dictionary attacks [4, 5]. They put emphasis on consider-
ing which messages should be encrypted with the password
without increasing the risk of oﬄine, brute-force attacks.
One drawback of this approach in modern web scenarios lies
in the fact that the password has to be stored in cleartext
on server side. Jablon proposed an improved approach that
eliminates this need [18]. Wu proposed a modiﬁed version
of EKE, called Asymmetric Key Exchange (AKE), which is
ﬁnally used to derive the Secure Remote Password (SRP)
protocol [42]. It ceases to use symmetric cryptography and
focuses on strong security properties with respect to leak-
age of server’s user database or session keys. Steiner et
al. describe the integration of a slightly modiﬁed version
of Bellovin’s and Merritt’s approach [4], named DH-EKE,
into TLS [40]. This way, they eliminate the need for a pub-
lic key infrastructure. Due to mutual authentication, certiﬁ-
cates become obsolete. Their Secure Password-Based Cipher
Suite for TLS implements conﬁdentiality and authenticity.
Web authentication: SessionLock [1] is closely related
to our transitional JavaScript implementation of BetterAuth.
The paper demonstrates how standard JavaScript can be
used to substitute cookie-based authentication tracking with
a browser-driven HMAC scheme. SessionLock does not pro-
tect against CSRF problems and does not handle the initial
authentication step.
[2] introduces browser authentication
without user authentication: The browser, generates a self-
signed certiﬁcate. This certiﬁcate must not contain any user-
related information. A new certiﬁcate is issued by the client
for every single server domain (“origin”). Session tracking
can be secured by relating session cookies to the respective
client certiﬁcate, hence, mitigating several of the cookie re-
lated threats, such as SID theft or session ﬁxation. Finally,
the most recent draft of HTTP/1.1 speciﬁcation provides an
extension of long-known HTTP Basic and Digest Authen-
tication based on Challenge-Response Authentication [13],
which prevents known eavesdropping attacks on the former
HTTP authentication standards.
Chen et al. address the problem of cross-site attacks that
occur while surﬁng sensitive and non-trustworthy websites
at the same time in one browser [7]. Therefore, they iso-
late browser sessions which prevents cross-domain attacks.
Same-domain attacks are out of scope of this approach. This
feature is comparable with our context dependent authenti-
cation and public interfaces. The security level of app isola-
tion is equivalent to surﬁng diﬀerent websites using diﬀerent
browsers.
In this paper we presented BetterAuth. BetterAuth is a
mutual Web authentication protocol that was designed to
be secure by default, thus, freeing the developers and opera-
tors of Web applications from the need to counter potential
threats at various heterogeneous places in the application’s
architecture, as it is required by the currently established
approach. BetterAuth signiﬁcantly improves the susceptibil-
ity of the authentication process to known threats, ranging
from network attacks, over Cross-site Request Forgery, up to
Phishing. Furthermore, the protocol was designed in a fash-
ion that allows an implementation in standard JavaScript,
enabling its deployment even in situation in which no
widespread native browser support is present yet.
8. REFERENCES
[1] B. Adida. Sessionlock: securing web sessions against
eavesdropping. In Proceeding of the 17th international
conference on World Wide Web, WWW ’08, pages
517–524, New York, NY, USA, 2008. ACM.
[2] D. Balfanz, D. Smetters, M. Upadhyay, and A. Barth.
TLS Origin-Bound Certiﬁcates. [IETF draft], http://
tools.ietf.org/html/draft-balfanz-tls-obc-01,
Version 01, November 2011.
[3] A. Barth, C. Jackson, and J. C. Mitchell. Robust
Defenses for Cross-Site Request Forgery. In CCS’09,
2009.
[4] S. M. Bellovin and M. Merritt. Encrypted Key
Exchange: Password-Based Protocols Secure Against
Dictionary Attacks. In Proc. IEEE Computer Society
Symposium on Research in Security and Privacy,
pages 72–84, Oakland, CA, May 1992.
[5] S. M. Bellovin and M. Merritt. Augmented Encrypted
Key Exchange. In Proceedings of the First ACM
Conference on Computer and Communications
Security, pages 244–250, Fairfax, VA, November 1993.
[6] A. Bortz, A. Barth, and A. Czeskis. Origin Cookies:
Session Integrity for Web Applications. In W2SP
2011, 2011.
[7] E. Y. Chen, J. Bau, C. Reis, A. Barth, and C. Jackson.
App Isolation: Get the Security of Multiple Browsers
with Just One. In 18th ACM Conference on Computer
and Communications Security (CCS), 2011.
[8] R. Dhamija and J. Tygar. The Battle Against
Phishing: Dynamic Security Skins. In Symposium On
Usable Privacy and Security (SOUPS) 2005, July
2005.
[9] P. Eckersley. How secure is HTTPS today? How often
is it attacked? [online], https://www.eff.org/
deeplinks/2011/10/how-secure-https-today,
October 2011.
[10] P. Eckersley and J. Burns. The (Decentralized) SSL
Observatory. Invited Talk, Usenix Security 2011,
http://static.usenix.org/events/sec11/tech/
slides/eckersley.pdf, August 2011.
[11] I. H. (Ed. Web Storage. W3C Candidate
Recommendation,
http://www.w3.org/TR/webstorage/, December 2011.
[12] J. Engler, C. Karlof, E. Shi, and D. Song. Is it too late
for PAKE? In Proceedings of W2SP, 2009.
[13] R. Fielding, J. Gettys, J. Mogul, H. Frystyk,
L. Masinter, P. Leach, T. Berners-Lee, Y. Lafon, and
177
J. Reschke. HTTP/1.1, part 7: Authentication. [IETF
draft], http://tools.ietf.org/html/
draft-ietf-httpbis-p7-auth-18, Version 18,
January 2012.
[14] Google. Safe Browsing for Firefox. [application], http:
//www.google.com/tools/firefox/safebrowsing/,
(03/20/06), 2006.
[15] R. Hansen and J. Grossman. Clickjacking. [online],
http://www.sectheory.com/clickjacking.htm, last
accessed 02/13/12, August 2008.
[16] E. Henning. Trustwave issued a man-in-the-middle
certiﬁcate. [online],
http://www.h-online.com/security/news/item/
Trustwave-issued-a-man-in-the-middle-
certificate- 1429982.html, February
2012.
Structure Integrity: A Robust Basis for Cross-site
Scripting Defense. In Network & Distributed System
Security Symposium (NDSS 2009), 2009.
[30] J. Nelson and D. Jeske. Limits to Anti Phishing. In
Proceedings of the W3C Security and Usability
Workshop, 2006.
[31] N. Nikiforakis, W. Meert, Y. Younan, M. Johns, and
W. Joosen. SessionShield: Lightweight Protection
against Session Hijacking. In 3rd International
Symposium on Engineering Secure Software and
Systems (ESSoS ’11), LNCS. Springer, February 2011.
[32] Y. Oiwa, H. Watanabe, H. Takagi, B. Kihara,
T. Hayashi, and Y. Ioku. Mutual Authentication
Protocol for HTTP. [IETF draft], http://tools.
ietf.org/html/draft-oiwa-http-mutualauth-10,
Version 10, October 2011.
[17] J. Hodges, C. Jackson, and A. Barth. HTTP Strict
[33] Open Web Application Security Project. Cross-Site
Transport Security (HSTS). [IETF draft],
http://tools.ietf.org/html/
draft-ietf-websec-strict-transport-sec-04,
Version 04, January 2012.
[18] D. Jablon. Extended Password Key Exchange
Protocols Immune to Dictionary Attacks. Enabling
Technologies, IEEE International Workshops on,
0:0248, 1997.
[19] C. Jackson and A. Barth. ForceHTTPS: Protecting
High-Security Web Sites from Network Attacks. In
WWW 2008, 2008.
[20] M. Johns. SessionSafe: Implementing XSS Immune
Session Handling. In European Symposium on
Research in Computer Security (ESORICS 2006).
Springer, September 2006.
[21] M. Johns, B. Braun, M. Schrank, and J. Posegga.
Reliable Protection Against Session Fixation Attacks.
In 26th ACM Symposium on Applied Computing (SAC
2011). ACM, March 2011.
[22] D. Kaminsky. h0h0h0h0. Talk at the ToorCon Seattle
Conference, http://seattle.toorcon.org/2008/
conference.php?id=42, April 2008.
Request Forgery (CSRF) Prevention Cheat Sheet.
[online],
https://www.owasp.org/index.php/Cross-Site_
Request_Forgery_(CSRF)_Prevention_Cheat_Sheet,
accessed November 2011, 2010.
[34] J. Ruderman. The Same Origin Policy. [online],
http://www.mozilla.org/projects/security/
components/same-origin.html (01/10/06), August
2001.
[35] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson.
Busting Frame Busting: a Study of Clickjacking
Vulnerabilities on Popular Sites. In Web 2.0 Security
and Privacy (W2SP 2010), 2010.
[36] D. Sandler and D. S. Wallach.  must die! In Web 2.0 Security and
Privacy (W2SP). IEEE, May 2008.
[37] M. Shariﬁ, A. Saberi, M. Vahidi, and M. Zorouﬁ. A
Zero Knowledge Password Proof Mutual
Authentication Technique Against Real-Time
Phishing Attacks. In P. D. McDaniel and S. K. Gupta,
editors, ICISS, volume 4812 of Lecture Notes in
Computer Science, pages 254–258. Springer, 2007.
[23] A. Klein. ”Divide and Conquer” - HTTP Response
[38] E. Shepherd. window.postmessage. [online],
Splitting, Web Cache Poisoning Attacks, and Related
Topics. Whitepaper, Sanctum Inc.,
http://packetstormsecurity.org/papers/general/
whitepaper_httpresponse.pdf, March 2004.
[24] H. Krawczyk, M. Bellare, and R. Canetti. HMAC:
Keyed-Hashing for Message Authentication. RFC
2104, http://tools.ietf.org/html/rfc2104,
February 1997.
[25] M. T. Louw and V. Venkatakrishnan. BluePrint:
Robust Prevention of Cross-site Scripting Attacks for
Existing Browsers. In IEEE Symposium on Security
and Privacy (Oakland’09), May 2009.
[26] M. Marlinspike. New Tricks For Defeating SSL In
Practice. Talk at the Black Hat DC conference, 2009.
[27] Microsoft. Ie8 security part vii: Clickjacking defenses,
2009.
[28] MSDN. Mitigating Cross-site Scripting With
HTTP-only Cookies. [online],
http://msdn.microsoft.com/workshop/author/
dhtml/httponly_cookies.asp, (01/23/06).
[29] Y. Nadji, P. Saxena, and D. Song. Document
https://developer.mozilla.org/en/DOM/window.
postMessage, last accessed 02/12/12, October 2011.
[39] S. Stamm, Z. Ramzan, and M. Jakobsson. Drive-by
Pharming. In In Proceedings of Information and
Communications Security (ICICS ’07), number 4861
in LNCS, December 2007.
[40] M. Steiner, P. Buhler, T. Eirich, and M. Waidner.
Secure Password-Based Cipher Suite for TLS. In
NDSS, pages 134–157, 2001.
[41] M. Wu, R. C. Miller, and G. Little. Web Wallet:
Preventing Phishing Attacks by Revealing User
Intentions. In Proceedings of the second symposium on
Usable privacy and security (SOUPS 06), 2006.
[42] T. Wu. The secure remote password protocol. In
Proceedings of the 1998 Internet Society Network and
Distributed System Security Symposium, pages 97–111,
1998.
[43] K.-P. Yee. User interaction design for secure systems.
In Proceedings of the 4th International Conference on
Information and Communications Security, ICICS ’02,
pages 278–290, London, UK, UK, 2002.
Springer-Verlag.
178