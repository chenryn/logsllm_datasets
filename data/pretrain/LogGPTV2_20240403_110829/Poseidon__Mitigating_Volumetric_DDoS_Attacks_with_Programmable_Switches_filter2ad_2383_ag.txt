[72] A. Sivaraman, A. Cheung, M. Budiu, C. Kim, M. Alizadeh, H. Balakr-
ishnan, G. Varghese, N. McKeown, and S. Licking, “Packet transactions:
High-level programming for line-rate switches,” in Proceedings of the
2016 ACM SIGCOMM Conference. ACM, 2016, pp. 15–28.
[74]
[73] V. Sivaraman, S. Narayana, O. Rottenstreich, S. Muthukrishnan, and
J. Rexford, “Heavy-hitter detection entirely in the data plane,” in
Proceedings of the Symposium on SDN Research. ACM, 2017, pp.
164–176.
J. Sonchack, A. J. Aviv, E. Keller, and J. M. Smith, “Turboﬂow:
information rich ﬂow record generation on commodity switches,” in
Proceedings of the Thirteenth EuroSys Conference. ACM, 2018, p. 11.
J. Sonchack, O. Michel, A. J. Aviv, E. Keller, and J. M. Smith, “Scaling
hardware accelerated network monitoring to concurrent and dynamic
queries with* ﬂow,” in 2018 USENIX Annual Technical Conference
USENIX ATC 18). USENIX Association, 2018.
[75]
[76] T. Spring, “Mirai variant targets ﬁnancial sector with iot ddos attacks,”
https://threatpost.com/mirai-variant-targets-ﬁnancial-sector-with-iot-
ddos-attacks/131056/, 2018, [Online; accessed Jul. 29, 2019].
stresser,”
generation
“The
next
ip
//www.stressthem.to/, 2019, [Online; accessed Aug. 19, 2019].
[77] StressThem,
https:
[78] Y. Tokusashi, H. T. Dang, F. Pedone, R. Soul´e, and N. Zilberman,
“The case for in-network computing on demand,” in Proceedings of the
Fourteenth EuroSys Conference 2019. ACM, 2019, p. 21.
[79] TS3Booter, “ts3booter.net,” https://ts3booter.net/, 2019, [Online; ac-
cessed Aug. 19, 2019].
[80] W. Turton, “An interview with lizard squad,
the hackers who
took down xbox live,” https://www.dailydot.com/debug/lizard-squad-
hackers/, 2017, [Online; accessed Jul. 15, 2019].
[81] C. S. University, “Darpa 2009 intrusion detection dataset,” http://
www.darpa2009.netsec.colostate.edu/, 2019, [Online; accessed Aug.
19, 2019].
[82] X. Wang and M. K. Reiter, “Defending against denial-of-service attacks
with puzzle auctions,” in Security and Privacy, 2003. Proceedings. 2003
Symposium on.
IEEE, 2003, pp. 78–92.
[83] S. Weagle, “The rise of
iot botnet
threats and ddos attacks,”
https://www.corero.com/blog/870-the-rise-of-iot-botnet-threats-and-
ddos-attacks.html, 2018, [Online; accessed Jul. 30, 2019].
[84] S. Woo, J. Sherry, S. Han, S. Moon, S. Ratnasamy, and S. Shenker,
“Elastic scaling of stateful network functions,” in 15th USENIX Sym-
posium on Networked Systems Design and Implementation (NSDI 18).
USENIX Association, 2018.
[85] Y. Xu and Y. Liu, “DDoS attack detection under SDN context,” in
INFOCOM 2016-The 35th Annual IEEE International Conference on
Computer Communications, IEEE.
IEEE, 2016, pp. 1–9.
[86] T. Yang, J. Jiang, P. Liu, Q. Huang, J. Gong, Y. Zhou, R. Miao,
X. Li, and S. Uhlig, “Elastic sketch: Adaptive and fast network-wide
measurements,” in Proceedings of the 2018 Conference of the ACM
Special Interest Group on Data Communication. ACM, 2018, pp.
561–575.
[87] N. Yaseen, J. Sonchack, and V. Liu, “Synchronized network snapshots,”
in Proceedings of the 2018 Conference of the ACM Special Interest
Group on Data Communication. ACM, 2018, pp. 402–416.
[88] M. Yu, L. Jose, and R. Miao, “Software deﬁned trafﬁc measurement
with opensketch.” in NSDI, vol. 13, 2013, pp. 29–42.
[89] T. Yu, S. K. Fayaz, M. P. Collins, V. Sekar, and S. Seshan, “PSI: Precise
security instrumentation for enterprise networks.” in NDSS, 2017.
[90] S. T. Zargar, J. Joshi, and D. Tipper, “A survey of defense mechanisms
against distributed denial of service (DDoS) ﬂooding attacks,” IEEE
communications surveys & tutorials, vol. 15, no. 4, pp. 2046–2069,
2013.
[91] M. Zhang, G. Li, L. Xu, J. Bi, G. Gu, and J. Bai, “Control plane
reﬂection attacks in SDNs: new attacks and countermeasures,” in Inter-
national Symposium on Research in Attacks, Intrusions, and Defenses.
Springer, 2018, pp. 161–183.
[92] Y. Zhu, H. Eran, D. Firestone, C. Guo, M. Lipshteyn, Y. Liron,
J. Padhye, S. Raindel, M. H. Yahia, and M. Zhang, “Congestion control
for large-scale RDMA deployments,” in ACM SIGCOMM Computer
Communication Review, vol. 45, no. 4. ACM, 2015, pp. 523–536.
APPENDIX
A. Defense Examples by POSEIDON language
Here are several extra defense examples in POSEIDON
language.
SlowLoris attack. In SlowLoris attacks, TCP sessions are
established between the bots and the victim server. After a
session has been established, the bot does not respond with
ACK packets, so this keeps the session open until timeout.
Empty sessions occupy CPU and RAM resources, so the victim
servers do not have enough resources to accept new requests.
To mitigate this attack, a potential defense the operators could
use is to count the number of bytes sent by each source IP
and the number of TCP sessions established by each source
IP (line 1, line 2). During the previous period, if the average
number of bytes per connection is smaller than a threshold
(T), then we can rate-limit the session establishment rate for
this source IP (line 4, line 5, line 6). Otherwise, we allow its
packets to pass (line 7, line 8).
packet_byte = aggr(True, [ip.src], 5)
connection_number = count(pkt.tcp.flag == SYN, [ip.src], 5)
if packet_byte([pkt.ip.src]) /
connection_number([pkt.ip.src]) = T:
rlimit
else:
pass
Elephant ﬂow. To detect very large ﬂows from some source
IP addresses, we can ﬁrst count the number of bytes each ﬂow
sends every 5 seconds (line 1, line 2). During the previous
period, if the total bytes for a ﬂow exceeds a threshold, we
rate-limit this ﬂow (line 4—6). Otherwise, we allow its packet
to pass (line 7, line 8).
packet_byte_counter = aggr(True, [ip.src, ip.dst,
ip.protocol, tcp.sport, tcp.dport], 5)
if packet_byte_count([ip.src, ip.dst, ip.protocol,
tcp.sport, tcp.dport]) >= T:
rlimit
else:
pass
B. The P4 implementation of a sample POSEIDON policy
Here we include the P4 implementation for one sample
POSEIDON policy, SYN ﬂood defense, as shown in Fig. 4.
The P4 snippet is simpliﬁed for clarity of presentation.
/* Header declaration */
struct headers {
ether_t ether;
ipv4_t
tcp_t
ipv4;
tcp;
}
// Definitions of ether_t, ipv4_t and tcp_t are omitted
/* Metadata declaration */
header_type syn_proxy_meta_t {
fields { ... }
}
metadata syn_proxy_meta_t meta;
// We remove the specific fields of metadata
/* Parser declaration */
parser parse_ether {
extract(ether);
return select(latest.etherType) {
ETHERTYPE_IPV4: parse_ipv4;
default: ingresss;
}
parser parse_ipv4 {
extract(ipv4);
return select(latest.protocol) {
IP_PROTOCOLS_TCP : parse_tcp;
default: ingress;
}
}
}
parser parse_tcp {
extract(tcp);
return ingress;
}
// Calculation of checksum is ignored
/* Monitor (counter) declaration */
register syn_count_cm_sketch_row1 {
width : WIDTH;
instance_count : COLUMN;
}
register syn_count_cm_sketch_row1_last_period {
width : WIDTH;
instance_count : COLUMN;
}
register ack_count_cm_sketch_row1 {
width : WIDTH;
instance_count : COLUMN;
}
register ack_count_cm_sketch_row1_last_period {
width : WIDTH;
instance_count : COLUMN;
}
// We omit the other rows of two count-min sketches
/* Match-Action Table declaration */
table syn_count_update_table {
read {
}
tcp.syn : exact;
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
actions {
update_syn_count;
_nop;
}
}
action update_syn_count() {
index_calculate(meta.syn_count_index, ipv4.srcAddr);
syn_count_cm_sketch_add(meta.syn_count_index, 1);
}
// Definitions of other tables and actions are skipped
/* Control flow declaration */
control ingress {
// Monitoring period
apply(syn_count_update_table);
apply(ack_count_update_table);
apply(syn_count_read_table);
apply(ack_count_read_table);
// Packet processing period
if (meta.ack_count_value == 0) {
apply(drop_table);
}
else if (meta.syn_count_value == meta.ack_count_value){
apply(forward_table);
}
else {
}
apply(syn_proxy_table);
}
// We ignore some details in the ingress control
// and the definition of egress control
18