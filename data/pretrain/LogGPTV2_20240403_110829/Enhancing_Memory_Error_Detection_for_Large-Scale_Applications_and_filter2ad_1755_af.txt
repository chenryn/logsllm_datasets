# Optimized Text

## Table VIII: System Call Invocations During Benchmark Execution
| Application | Chrome | Firefox | Apache | Nginx | OpenSSL |
|-------------|--------|---------|--------|-------|---------|
| Baseline    | 280,279 | 7,184   | 1,788,698 | 1,805,388 | 1,213,057 |
| ASAN        | 1.23x  | 1.06x   | 1.73x  | 1.02x | 57.57x  |
| MEDS        | 21.73x | 8.46x   | 2.21x  | 1.94x | 7,680.44x |

## Table IX: Physical Memory Usage Comparison
| Application | Baseline | ASAN | MEDS-H | MEDS-HS | MEDS-HSG |
|-------------|----------|------|--------|---------|----------|
| Chrome      | 83%      | 110% | 116%   | 111%    | 95%      |
| Firefox     | 130%     | 136% | 128%   | 44%     | 74%      |
| Apache      | 82%      | 98%  | 78%    | 292%    | 301%     |
| Nginx       | 57%      | 367% | 409%   | 432%    | 58%      |
| Physical Memory (MB) | 733MB | 725MB | 217KB | 195KB | 339KB |

### Physical Memory Usage Analysis
MEDS imposes higher physical memory usage due to the storage of additional metadata for shadow memory and page-alias mapping. As shown in Table IX, MEDS-H, MEDS-HS, and MEDS-HSG use 133%, 200%, and 212% more physical memory on average than the baseline, respectively. Specifically, in OpenSSL, MEDS uses 432% more memory, and in Apache, it uses 301% more. For the remaining four applications, the average increase is 109%. This is because OpenSSL allocates small memory blocks (8 to 32 bytes), and MEDS appends 8 bytes of per-object metadata for aliasing information. Additionally, OpenSSL does not deallocate memory during evaluation, leading to increased shadow memory page mappings. This characteristic is also reflected in the high TLB misses observed in Table VII. In contrast, ASAN uses 95% more memory than the baseline, as it commits physical memory for redzones and quarantine zones.

### Discussion
#### Potential Use-Cases
MEDS is designed to be a general-purpose tool for enhancing memory error detection. One potential use-case is in mitigating memory corruption attacks for large-scale applications such as Chrome, Firefox, Nginx, and Apache. MEDS meets compatibility requirements and enhances detection capabilities compared to other tools, making it suitable for these cases. However, the performance overheads may make it less suitable for performance-critical applications.

Another use-case is augmenting fuzz testing. As demonstrated in Â§VI-C, MEDS outperforms ASAN in detecting memory errors. Given the importance of fuzz testing, many vendors, including Google, dedicate significant computing resources to it. Since MEDS can find more memory errors in the same amount of time, it can save computing resources and help identify bugs earlier in the development cycle.

#### Kernel-Level Support for Performance Improvements
This paper focuses on maintaining compatibility with existing systems, particularly without introducing new features in the Linux kernel. Future improvements could include kernel-level support. For example, modifying the `mremap` system call to maintain a special flag for page aliasing would allow MEDS to avoid expensive user-level copy-on-write mechanisms. Additionally, providing an ELF loader in the Linux kernel that specifies `MAP_SHARED` for global object pages could eliminate redundant allocation phases.

### Additional Related Work
#### Pointer-Based Memory Error Detection
Pointer-based detection techniques track pointer capabilities and check memory access validity. These techniques can be classified into fat-pointer-based and disjoint-metadata-based approaches. CCured is a fat-pointer-based approach, while SoftBound is a disjoint-metadata-based approach. Intel MPX is a hardware implementation of SoftBound. While these methods are effective, they face compatibility issues with C/C++ language features, leading to backward-compatibility problems, especially for complex software like Chrome and Firefox.

#### Memory Error Exploits and Mitigation
Memory errors can lead to arbitrary read and write capabilities, enabling various attacks such as code corruption, control-flow hijacking, data-only attacks, and information leaks. Mitigation techniques like code signing, DEP, stack cookies, shadow stacks, and CFI have been developed to counter these threats. However, the power of arbitrary read and write capabilities often allows attackers to find new ways to exploit vulnerabilities.

### Conclusion
MEDS enhances memory error detectability by utilizing 64-bit virtual address space to approximate infinite gaps and heaps. The novel allocator, MEDSALLOC, uses a page-aliasing scheme to minimize physical memory overhead. Our evaluation with large-scale real-world programs shows that MEDS provides good compatibility and detectability with moderate runtime overhead.

### Acknowledgment
This research was supported in part by NSF award CNS-1718997, ONR grant N00014-17-1-2893, Korea NRF/MSIT (2017M3C4A7065925), and Samsung Research Funding & Incubation Center (SRFC-IT1701-05).

### References
[References listed here, formatted consistently]

---

This optimized text aims to provide a clear, coherent, and professional presentation of the information. Tables and sections are organized for better readability, and the content is structured to enhance understanding and flow.