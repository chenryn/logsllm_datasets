*priv-safe
if (*AM-sec(S′, 𝑖′)) ∨ AM[S′, 𝑖′, R] = received
if ∀(S, 𝑖) : (S, 𝑖) ∈ Chall =⇒ *FS-sec(S, 𝑖)
return false
return true
Figure 15: The main oracles of the FS-GAEAD security game.
Oracle inj-AM can be used by A to inject any non-honestly gen-
erated AD/ciphertext pair. Algorithm Rcv must reject all such pairs
unless they are compromised, which is the case if A has learned the
corresponding key material via state compromise. Whether or not
this is the case is determined by the safety helper function *FS-sec,
which is discussed below. Irrespective of whether a compromise
has occurred, Rcv is required to detect and prevent replays.
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1481Corruption. By calling oracle corr(ID) the attacker can learn the cur-
rent state of party ID. The game adds the triple (ID, AM-Rcvd, AM-Tr[ID])
to the set AM-Lk to indicate that ID’s state is now compromised,
but the messages recorded in AM-Rcvd are supposed to remain
secure (because the corresponding key material must have been
deleted); the game also adds potential trash, AM-Tr[ID], stored by
ID to the same set.
B.2.2 Privacy-related safety. At the end of the execution of the FS-
GAEAD security game, the procedure *priv-safe ensures that the
attacker has only challenged messages that are considered secure
by the (generic) safety predicate *FS-sec. If the condition is not
satisfied, the attacker loses the game.
B.2.3 Advantage. Let Π = *FS-sec be the generic safety predicate
used in the FS-GAEAD definition. The attacker A is parameter-
ized by it’s running time 𝑡 and the number of challenge queries
𝑞, referred to as (𝑡, 𝑞)-attacker. The advantage of A against an FS-
GAEAD scheme F w.r.t. to predicate Π is denoted by AdvFSfs,Π(A).
Definition B.1. An FS-GAEAD scheme F is (𝑡, 𝑞, 𝜀)-secure w.r.t.
predicate Π, if for all (𝑡, 𝑞)-attackers,
AdvF
FS-GAEAD,Π(A) ≤ 𝜀 .
C PRF-PRNGS
C.1 Syntax
A PRF-PNRG PP is an algorithm (𝜎′, 𝑅) ← PP(𝜎, 𝐼, 𝐶): it takes the
current state 𝜎, absorbs input 𝐼 along with context information 𝐶,
and produces a new state 𝜎′ as well as an output string 𝑅.
C.2 Security
A PRF-PRNG must satisfy PCFS (cf. Section 3.2) and be resilient to
splitting-attacks. Therefore, the security game for PRF-PRNGs (cf.
Figure 16) follows the same history-graph approach as the defini-
tions of SGM and CKGA. However, since the game only consists of
the state of the PRF-PRNG and there are no parties, it suffices to
keep track of a much smaller amount information:
• Nodes of the history graph only consist of the vid.
• For every node vid,
– the value 𝜎[vid] stores the corresponding state of the PRF-
PRNG,
– the value 𝑅[vid] stores the corresponding output of the
PRF-PRNG, and
– the value BI[vid] is a flag indicating whether the input 𝐼
absorbed to reach the state 𝜎[vid] is known to the attacker.
• The set V-Lk records the vids for which the PRF-PRNG state
is leaked to the attacker.
The root node vidroot of the history graph corresponds to the initial
state of the PRF-PRNG, which is assumed to be the all-zero string.
The attacker A has the following capabilities:
• He may create a new child state of any node vid by calling
oracle process and specifying an input/context pair (𝐼, 𝐶); of
course, only one such call per triple (vid, 𝐼, 𝐶) is allowed. If
init
corr (vid)
𝑏 ←R {0, 1}
vidroot ← HG.init
𝜎[vidroot] ← 0
V-Lk ← ∅
𝑅[·] ← ∅
Reveal[·] ← ∅
Chall[·] ← ∅
BI[·] ← ∅
V-Lk +← vid
return 𝜎[vid]
process(vid, 𝐼, 𝐶)
req ̸∃ child of vid for (𝐼, 𝐶)
vid′ ← HG.create(vid, 𝐼)
BI[vid′] ← (𝐼 ̸= ⊥)
(𝜎[vid′], 𝑅[vid′]) ← PP(𝜎[vid], 𝐼, 𝐶)
return vid′
req 𝑅[vid] ̸= 𝜀
req ¬(Reveal[vid] ∨ Chall[vid])
Reveal[vid] ← true
return 𝑅[vid]
req 𝑅[vid] ̸= 𝜀
req ¬(Reveal[vid] ∨ Chall[vid])
𝑅0 ← 𝑅[vid]
𝑅1 ← R
Chall[vid] ← true
return 𝑅𝑏
return ∀vid : Chall[vid] =⇒ *PP-secure(vid)
Figure 16: PRF-PRNG security game.
reveal(vid)
chall(vid)
safe
the call is made with 𝐼 ̸= ⊥, the game samples 𝐼 it randomly.
The value BI[vid] is set accordingly.
• He may reveal or challenge outputs 𝑅[vid] corresponding to
arbitrary nodes vid ̸= vidroot by calling the corresponding
oracles reveal and chall, respectively. The flags Reveal[vid]
resp. store Chall[vid] whether a reveal resp. a challenge has
been requested for vid.
• Finally, A can also leak the state 𝜎[vid] for any epoch vid ̸=
vidroot using oracle corr.
As per usual, at the end of the game, the oracle safe ensures that A
does not win the game trivially; safe uses a generic safety predicate
*PP-secure.
C.2.1 Advantage. Let Π = *PP-secure be the generic safety predi-
cate used in the PRF-PRNG definition. The attacker A is parameter-
ized by it’s running time 𝑡, referred to as 𝑡-attacker. The advantage
of A against a PP scheme PRF-PRNG w.r.t. to predicate Π is denoted
by AdvPP
PRF-PRNG,Π(A).
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1482Definition C.1. A PRF-PRNG scheme PP is (𝑡, 𝜀)-secure w.r.t. pred-
icate Π, if for all 𝑡-attackers,
AdvPP
PRF-PRNG,Π(A) ≤ 𝜀 .
D SECURE GROUP MESSAGING
In this section we define compatibility helpers for SGM.
*compat-create(ID, skid, wkid)
*compat-dlv-CM(ID, vid)
*compat-inj-CM(ID,𝑇′)
chk HG.isChild(V-Pt[ID], vid)
chk HG[vid].pid ⊆ P-St[ID]
return true
vid ← V-Pt[ID]
chk vid ̸= vidroot
chk ∀vid′ ∈ HG.children(vid) :
𝑇′ ̸= CM[vid′, ID]
*compat-dlv-CM(ID, vid)
return true
chk HG.isChild(V-Pt[ID], vid)
chk HG[vid].pid ⊆ P-St[ID]
return true
vid ← V-Pt[ID]
chk vid ̸= vidroot
chk ∀vid′ ∈ HG.children(vid) :
𝑇′ ̸= CM[vid′, ID]
*compat-inj-CM(ID,𝑇′)
return true
*compat-dlv-WM(ID, vid)
chk V-Pt[ID] = vidroot
wkid ← HG.addedWK(ID, vid)
chk wkid ̸= ⊥
∧ wkid ∈ WK-St[ID]
*compat-inj-WM(ID,𝑊 ′)
return true
vid ← V-Pt[ID]
chk vid = vidroot
chk ∀vid′ :
𝑊 ′ ̸= CM[vid′, ID]
return true
*compat-send(S)
chk V-Pt[ID] ̸= vidroot
return true
*compat-chall(S, 𝑚0, 𝑚1)
chk V-Pt[ID] ̸= vidroot
chk |𝑚0|= |𝑚1|
return true
*compat-dlv-AM(vid, S, 𝑖, R)
chk vid ∈ V-St[R]
chk AM[vid, S, 𝑖, R] /∈
{𝜖, received}
return true
chk ∀S, vid, 𝑖, 𝑚 :
AM[vid, S, 𝑖, R] ̸= (𝑎, 𝑚, 𝑒)
return true
*compat-inj-AM(𝑎, 𝑒, R)
chk V-Pt[ID] = vidroot
chk SK-ID[skid] = ID
chk WK-SK[wkid] = skid
chk skid ∈ SK-St[ID]
chk wkid ∈ WK-St[ID]
return true
vid ← V-Pt[ID]
chk vid ̸= vidroot
𝐺 ← HG.roster(vid)
select op
case add do
*compat-prop(op, ID, ID′, skid)
chk
CL-KB[ID, ID′] ̸= ∅
chk ID′ /∈ 𝐺
chk ID′ ∈ 𝐺
chk skid ∈ SK-St[ID]
case rem do
case upd do
*compat-dlv-PM(ID, pid)
return true
chk Props[pid].vid = V-Pt[ID]
return true
vid ← V-Pt[ID]
chk vid ̸= vidroot
chk ̸∃ pid :
*compat-inj-PM(ID, 𝑃′)
Props[pid].vid = vid
∧ 𝑃′ = PM[pid]
*compat-commit(ID, pid)
return true
vid ← V-Pt[ID]
chk vid ̸= vidroot
chk pid ⊆ P-St[ID]
G ← HG.roster(vid)
for pid ∈ pid
G ← *app-prop(G, pid)
chk G ̸= ⊥
return true
*app-prop(G, pid)
𝑝 ← Props[pid]
req 𝑝.orig ∈ G
select op
case add do
(ID′, ·, ·) ← 𝑝.data
req ID′ /∈ G
G +← ID′
ID′ ← 𝑝.data
req ID′ ∈ 𝐺
G −← ID′
case rem do
return G
Figure 17: Compatibility oracles of the security game for secure
group-messaging schemes.
E SGM CONSTRUCTION
In this section we formally define the helper functions of our SGM
construction.
// Returns ids, wpks, of new parties
*added(P)
if 𝑃 = ("add", ·, ·, (ID𝑎, kb′), ·)
ID[·] ← 𝜀
wpk[·] ← 𝜀
𝑖 ← 1 for 𝑃 ∈ P
(wpk, ·) ← kb′
ID[𝑖] ← ID𝑎
wpk[𝑖] ← wpk
𝑖++
return (ID, wpk)
// Returns spks after applying props
*new-spks(epid, P)
spk ← s.Ep-SPK[epid]
for 𝑃 ∈ P
if 𝑃 = ("add", ·, ·, (ID𝑎, kb′), ·)
(·, spk) ← kb′
spk[ID𝑎] ← spk
spk[ID𝑟 ] ← 𝜀
spk[ID𝑢] ← spk
if 𝑃 = ("rem", ·, ·, ID𝑟 , ·)
if 𝑃 = ("upd", ·, ID𝑢, spk, ·)
return spk
// Returns position of ID in roster
*roster-pos(ID, G)
[ID1, . . . , ID𝑛] ← G
for 𝑖 ∈ [1, 𝑛]
if ID𝑖 = ID
return 𝑖
if P′ = ("rem", ·, ID𝑠, ID𝑟 , ¯P)
if P′ = ("add", ·, ID𝑠, (ID𝑎, kb′), ¯P)
// Returns Proposal Info
*get-propInfo(P′)
op = add
orig = ID𝑠
(wpk, spk) ← kb′; data = (ID𝑎, wpk, spk)
op = rem
orig = ID𝑠
data = ID𝑟
op = upd
orig = ID𝑠
data = spk
if P′ = ("upd", ·, ID𝑠, spk, ¯P)
return (op, orig, data)
Figure 18: The SGM Construction : Helper Algorithm.
Helpers. *added receives a vector of proposals P and returns the
ids and welcome public keys of newly added members. *new-spks
receives an epoch id and vector of proposals, (epid, P), and returns
the public verification keys for the ids affected by the proposals in P.
*roster-pos returns the position of ID in G, and *get-propInfo
receives a proposal P′ and returns the proposal information, namely
the operation, op, the proposal origin, orig, and the data, data,
where if op = add, data holds the id, ID𝑎, welcome key material,
wpk, and the signature verification key spk, of the newly added
member. If op = rem, data holds the id of the removed party ID𝑟 ,
and if op = upd, data holds the updated verification key spk.
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1483