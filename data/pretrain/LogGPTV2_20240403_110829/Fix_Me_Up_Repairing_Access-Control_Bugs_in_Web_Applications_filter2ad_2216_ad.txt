4. Otherwise, if s is immediately control-dependent on
some conditional statement t, insert s(cid:48) as the last state-
ment on the statement list of the matching branch of
the corresponding conditional t(cid:48) ∈ mtgt.
5. Otherwise, insert s(cid:48) after iptgt, i.e., as the next state-
ment on the statement list containing iptgt. For exam-
ple, if iptgt is an assignment, insert s(cid:48) as the next state-
ment. If iptgt is a conditional, insert s(cid:48) after the true
and false clauses, at the same nesting level as iptgt.
6. Add (s, s(cid:48)) to StatementM ap and set iptgt to s(cid:48).
ApplyACT returns the repaired AST, the inserted check,
and the number of reused statements.
Variable renaming. When FIXMEUP inserts statements
into a method, it must create new variable names that do not
conﬂict with those that already exist in the target method.
Furthermore, because FIXMEUP, when possible, reuses ex-
isting statements that match statements from the ACT se-
mantically (rather than syntactically), it must rename vari-
ables. Lastly, as the algorithm establishes new names and
matches, it must rewrite subsequent dependent statements
to use the new names. The isMatching function in Figure 6
establishes a mapping between a variable name from the
template and a variable name from the target method when
it matches assignment statements.
As FIXMEUP inserts subsequent statements, it uses the
variable map to replace the names from the template. Be-
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43 }
1
2
3
4
5
6
7
8
9
10
11
12
13 }
1
2
3
4
//
Insert
statements only in entry and/or
last method of CCtgt that
matches a method from adapted ACT . Other methods match ACT
exactly (see AdaptACT).
// INPUT
ACT : access−control template
CCtgt = {(cs(cid:48)
0), (cs(cid:48)
1, m(cid:48)
2, m(cid:48)
vulnerable sensitive operation sso
1) . . . (sso, m(cid:48)
n)}: calling context of the
RepairedAST : AST of the repaired code
InsertedCheck: inserted access−control check
M atchCount: number of ACT statements found in the target
// OUTPUT
5
6
7
8
9
10 M atchCount ← 0
11
12
13
14
15
16
17
18
19
20
21
22
23
24
Is there a statement after iptgt in mtgt that matches s?
InsertedCheck ← null
m0 ← the entry of ACT
minline ← the method containing check in ACT
for ( msrc ∈ {m0, minline} ) {
iptgt ← null
mtgt ← M ethodM ap(msrc)
for ( s ∈ ACT (msrc) in order ) {
//
s(cid:48) ← FindMatchingStmt(s, iptgt, mtgt)
if (s(cid:48) (cid:54)= null) { // target method already contains s
iptgt ← s(cid:48)
M atchCount++
} else { // no match,
(t, d) ← a pair of statement t and direction d s.t. s is immediately control
s(cid:48) ← RenameVars(s, mtgt) // rename variables in s for mtgt
if (s(cid:48) is a conditional statement ) { // add two branches
add true and f alse branches to s(cid:48) with empty statements
if (s is the access control check)
−dependent on t in d
insert s into target
InsertedCheck ← s(cid:48)
}
if (iptgt == null) {
insert s(cid:48) at the ﬁrst
} else if (t (cid:54)= null) { // s is immediately control−dependent on t
statement
in mtgt
insert on the corresponding conditional branch
//
t(cid:48) ← StatementM ap(t)
insert s(cid:48) at the last statement on branch d of t(cid:48)
} else { insert s(cid:48) immediately after iptgt in mtgt }
iptgt ← s(cid:48)
StatementM ap ← StatementM ap ∪ {(s, s(cid:48))}
} } }
RepairedAST s ← all modiﬁed ASTs of mtgt ∈ M ethodM ap
return (RepairedAST s, InsertedCheck, M atchCount)
RenameVars (s, mtgt) {
// INPUT: s ∈ ACT , target method mtgt
// OUTPUT: s(cid:48) with variables remapped, updated V arM ap
s(cid:48) ← clone s
if (s = “vACT = . . . ” and vACT is local) {
if ((cid:54) ∃t s.t. (vACT , t) ∈ V arM ap) {
V arM ap ← V arM ap ∪ {(vACT , vnew)}
}}
for (v ∈ s(cid:48)) {
if (∃(v, vnew) ∈ V arM ap)
replace v with vnew in s(cid:48)
}
return s(cid:48)
Figure 9: Applying an access-control template
fore ApplyACT inserts a statement, it calls RenameVars to
remap all variable names to the names used by the target
method. For unmapped variables, RenameVars creates fresh
names that do not conﬂict with the existing names.
Dealing with multiple matching statements.
In theory,
there may exist multiple statements in mtgt that match s
FindMatchingStmt(s, iptgt, mtgt) {
// INPUT:
s: statement
iptgt: last inserted statement in mtgt
in ACT
if (mtgt contains the sensitive operation sso)
SL = { statements in mtgt after iptgt that dominate sso}
else
SL = { statements in mtgt after iptgt that dominate the callsite of next
for(t ∈ SL) {
method in CCtgt }
if (isM atching(s, t)) {
StatementM ap ← StatementM ap ∪ {(s, t)}
return t
If multiple statements in SL match s, they are handled as described in
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17 }
}
//
Section 5.3
}
return null
Figure 10: Matching statements
and thus multiple ways to insert ACTadapted into the tar-
get context. Should this happen, FIXMEUP is designed
to exhaustively explore all possible matches, generate the
corresponding candidate repairs, and validate each candi-
date. FIXMEUP picks the validated candidate that reuses
the most statements already present in the target and sug-
gests it to the developer.
5.4 Validating repairs
As mentioned above, FIXMEUP can potentially introduce
two types of semantic errors into the repaired program: (1)
unintended changes to the inserted policy, and (2) unin-
tended changes to the program. Unintended changes to the
inserted policy may occur when existing statements change
the semantics of the inserted code. Unintended changes to
the program may occur when the inserted code changes the
semantics of existing statements.
To detect type (1) errors, FIXMEUP computes afresh an
ACT from the repaired code and compares it—using Vali-
dateRepair from Figure 7—with the ACT on which the re-
pair was based. An ACT captures all control and data de-
pendences. Any interference from the existing statements
that affects the inserted code must change the dependences
of the inserted statements. For example, suppose the reused
statement has dependent statements already in the program
that are not part of the ACT. In this case, the ACTs will not
match and FIXMEUP will issue a warning. This validation
procedure guarantees that reusing an existing statement is
always safe. We examined all 38 repairs suggested by FIX-
MEUP for our benchmarks (see Section 6) and in only one
case did the insertion of the repair code change the ACT
semantics. FIXMEUP’s validation algorithm detected this
inconsistency and issued a warning.
With respect to type (2) errors, unintended changes to the
program, observe that the actual purpose of the repair is to
change the program’s semantics by adding access-control
logic. FIXMEUP therefore cannot guarantee that the re-
paired program is free from type (2) errors because it cannot
know the full intent of the programmer.
The purpose of repair is to introduce a new dependence:
all statements after the inserted access-control check be-
come control-dependent on the check, which is a desired se-
mantic change. Because FIXMEUP inserts the check along
with the statements deﬁning the values used in the check,
the inserted access-control logic may change both control
and data dependences of statements that appear after the
check. Our repair procedure minimizes the risk of unin-
tended dependences by reusing existing statements as much
as possible and by renaming all variables deﬁned in the
template to fresh names, thus preventing unintended depen-
dences with the variables already present in the program.
In just one of the 38 repairs on our benchmarks (see Fig-
ure 14 in Section 6) did an incorrectly annotated role cause
FIXMEUP to “repair” a context that already implemented a
different access-control policy and thus introduce unwanted
changes to the program.
5.5 Discussion and limitations
Good program analysis and transformation tools help de-
velopers produce correct code. They are especially useful
for subtle semantic bugs such as inconsistent enforcement
of access-control policies, but developers must still be inti-
mately involved in the process. The rest of this section dis-
cusses the general limitations of any automated repair tool
and the speciﬁc limitations of our implementation.
Programmer burden. Suggesting a repair, or any pro-
gram change,
to developers requires some speciﬁcation
of correct behavior. We rely on developers to annotate
access-control checks and security-sensitive operations in
their applications and tag them with the corresponding user
role. We believe that this speciﬁcation burden is relatively
light and, furthermore, it can be supported by policy in-
ference tools [32]. We require that the speciﬁcations be
consistent for all security-sensitive operations in a given
role.
If the programmer wants different checks in differ-
ent contexts for the same operation, the speciﬁcation won’t
be consistent and our approach will attempt to conserva-
tively over-protect the operation. For example, Figure 11
shows that FIXMEUP inserts a credential check performed
in one context into a different context that already performs
a CAPTCHA check, in this case introducing an unwanted
duplicate check. Developers should always examine sug-
gested repairs for correctness.
We believe that the consequences of access-control er-
rors are sufﬁciently dire to motivate the developers to bear
this burden in exchange for suggested code repairs, since it
is easier to reject or manually ﬁx a suggested change than it
is to ﬁnd the error and write the entire repair by hand. The
latter requires systematic, tedious, error-prone examination
of the entire program and its call graph. Language features
of PHP, such as the absence of a proper module system, dy-
namic typing, and eval, further complicate this process for
PHP developers. The number of errors found by FIXMEUP
in real-world PHP applications attests to the difﬁculty of
correctly programming access control in PHP.
Static analysis. FIXMEUP uses a standard static interpro-
cedural data- and control-dependence analysis to extract the
program slice representing the access-control logic. Be-
cause this analysis is conservative, the slice could contain
extraneous statements and therefore would be hard to ap-
ply as a transformation. Program slicing for more general
debugging purposes often produces large slices [34]. Fortu-
nately, access-control policies are typically self-contained
and much more constrained. They consist of retrieving
stored values into local variables, checks on these variables,
and code that exits or restarts the program after the check
fails. Consequently, access-control templates tend to be
short (see Table 2).
Our FIXMEUP prototype does not handle the dynamic
language features of PHP, nor does it precisely model all
system calls with external side effects.
In particular, the
analysis resolves dynamic types conservatively to build the
call graph, but does not model eval or dynamic class
loading, which is unsound in general.
In practice, only
myBB uses eval and we manually veriﬁed that there are
no call chains or def-use chains involving eval that lead to
security-sensitive operations, thus eval does not affect the
computed ACTs.
Static analysis can only analyze code that is present at
analysis time. PHP supports dynamic class loading and thus
potentially loads classes our code does not analyze. How-
ever, our benchmarks use dynamic class loading in only a
few cases, and we do analyze the classes they load. To han-
dle these cases, we annotated 18 method invocations with
the corresponding dynamic methods to generate a sound
call graph that includes all possible call edges.
etc., but
imprecision.
Our analysis models database connections such as
open, close, and write, ﬁle operations that return ﬁle
it does not perform symbolic
descriptors,
string analysis on the arguments.
This is a pos-
sible source of
For example, consider
two statements: writeData("a.txt",$data) and
$newdata = readData($b). If $b is “a.txt”, the sec-
ond statement is data-dependent on the ﬁrst. A more precise
algorithm would perform symbolic analysis to determine if
the two statements may depend on each other and conserva-
tively insert a dependence edge. Not doing this makes our
analysis unsound in general, but in practice, we never ob-
served these types of dependences. Therefore, even a more
conservative analysis would have produced the same results
on our benchmarks.
Statement matching is weaker than semantic equiva-
lence. For example, our matching algorithm does not cap-
ture that statements a = b + c and a = add(b, c) are equiva-
lent. Another minor limitation of our matching algorithm is
the use of coarse-grained statement dependences instead of
variable def-use chains on the remapped variable names. A
more precise algorithm would enforce consistency between
the def-use information for each variable name varx used in
sx and vary used in sy, even if the names are not the same
given the variable mapping produced thus far. The current
algorithm may yield a match with an inconsistent variable
mapping in distinct statements and thus change the def-use
dependences at the statement level. We never encountered
this problem in practice and, in any case, our validation pro-
cedure catches errors of this type.
6 Evaluation
We evaluate FIXMEUP on ten open-source interactive PHP
Web applications, listed in Table 2. We chose SCARF,
YaPiG, AWCM, minibloggie, and DNscript because they
were analyzed in prior work on detecting access-control
vulnerabilities [32, 36]. Unlike FIXMEUP, none of the pre-
vious techniques repair the bugs they ﬁnd. In addition to
repairing known vulnerabilities, FIXMEUP found four new
vulnerabilities in AWCM 2.2 and one new vulnerability in
YaPiG that prior analysis [36] missed. We added Newss-
cript and phpCommunityCal to our benchmarks because
they have known access-control vulnerabilities, all of which
FIXMEUP repaired successfully. To test the scalability of
FIXMEUP, we included two relatively large applications,
GRBoard and myBB. Table 2 lists the lines of code (LoC)
and total analysis time for each application, measured on a
Linux workstation with Intel dual core 2.66GHz CPU with
2 GB of RAM. Analysis time scales well with the number
of lines in the program.
Our benchmarks are typical of server-side PHP applica-
tions: they store information in a database or local ﬁle and
manage it based on requests from Web users. Table 2 shows
that four applications have a single access-control policy
that applies throughout the program. The other six have two
user roles each and thus two role-speciﬁc policies. Policies
were speciﬁed by manual annotation. They are universal,
i.e., they prescribe an access-control check that must be per-
formed in all contexts associated with the given role.
FIXMEUP ﬁnds 38 access-control bugs, correctly re-
pairs 30 instances, and issues one warning. Nine of the ten
benchmarks contained bugs. Seven bugs were previously
unknown. As mentioned above, ﬁve of the previously un-
known bugs appeared in applications that had been analyzed
in prior work which missed the bugs. Five of the ten appli-
cations implement seven correct, but alternative policies in
some of their contexts (i.e., these policies differ from the
policy in the template).
The fourth and ﬁfth columns in Table 2 characterize the
access-control templates; the third column lists the user role
Analysis
LoC time (s)
26
2,287
3,150
22
Web applications
minibloggie 1.1
DNscript
Events Lister 2.03
Newsscript 1.3
SCARF (before patch)
YaPiG 0.95
2,571
2,635
1,490
7,194