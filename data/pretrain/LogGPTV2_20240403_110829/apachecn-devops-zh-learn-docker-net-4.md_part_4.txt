## 使用 Docker 部署网络应用
在这个练习中，我们将安装一个简单的网络应用:
1.  使用以下命令安装 Docker:
    ```
    # sudo yum install -y golang git device-mapper-event-libs docker
    # sudo chkconfig docker on
    # sudo service docker start
    # export GOPATH=~/go
    # go get github.com/golang/example/outyet
    # cd $GOPATH/src/github.com/golang/example/outyet
    # sudo docker build -t outyet.
    ```
2.  以下命令在将 Docker 文件添加到马拉松之前对其进行测试:
    ```
    # sudo docker run --publish 6060:8080 --name test --rm outyet
    ```
3.  转到浏览器上的`http://192.168.10.10:6060/`以确认其工作正常。一旦完成，你可以点击 *CTRL* + *C* 退出 Outyet Docker。
4.  使用马拉松 Docker 支持创建马拉松应用，如下所示:
    ```
    # vi /home/user/outyet.json
    {
     "id": "outyet",
     "cpus": 0.2,
     "mem": 20.0,
     "instances": 1,
     "constraints": [["hostname", "UNIQUE", ""]],
     "container": {
     "type": "DOCKER",
     "docker": {
     "image": "outyet",
     "network": "BRIDGE",
     "portMappings": [ { "containerPort": 8080, "hostPort": 0, "servicePort": 0, "protocol": "tcp" }
     ]
     }
     }
    }
    # echo 'docker,mesos' | sudo tee /etc/mesos-slave/containerizers
    # sudo service mesos-slave restart
    ```
5.  使用 Marathon Docker 更好地配置和管理容器，如下所示:
    ```
    # curl -X POST http://192.168.10.10:8080/v2/apps -d /home/user/outyet.json -H "Content-type: application/json"
    ```
6.  You can check all your applications on the Marathon GUI at `http://192.168.10.10:8080`, as shown in the following screenshot:
    ![Deploying a web app using Docker](img/00031.jpeg)
## 使用 DCOS 在自动气象站上部署介子
在这最后一部分，我们将在 AWS 上部署中间层最新推出的 DCOS，以便在我们的数据中心管理和部署 Docker 服务:
1.  Create an AWS key pair in the region where the cluster is required to be deployed by going to the navigation pane and choosing **Key Pairs** under **NETWORK & SECURITY**:
    ![Deploying Mesos on AWS using DCOS](img/00032.jpeg)
2.  After being created, the key can be viewed as follows and the generated key pair (`.pem`) file should be stored in a secure location for future use:
    ![Deploying Mesos on AWS using DCOS](img/00033.jpeg)
3.  The DCOS cluster can be created by selecting the **1 Master** template on the official Mesosphere site:
    ![Deploying Mesos on AWS using DCOS](img/00034.jpeg)
    也可以通过在栈部署中提供亚马逊 S3 模板网址的链接来实现:
    ![Deploying Mesos on AWS using DCOS](img/00035.jpeg)
4.  Click on the **Next** button. Fill in the details such as **Stack name** and **KeyName**, generated in the previous step:
    ![Deploying Mesos on AWS using DCOS](img/00036.jpeg)
5.  Review the details before clicking on the **Create** button:
    ![Deploying Mesos on AWS using DCOS](img/00037.jpeg)
6.  After 5 to 10 minutes, the Mesos stack will be deployed and the Mesos UI can be accessed at the URL shown in the following screenshot:
    ![Deploying Mesos on AWS using DCOS](img/00038.jpeg)
7.  Now, we will be installing the DCOS CLI on a Linux machine with Python (2.7 or 3.4) and pip preinstalled, using the following commands:
    ```
    $ sudo pip install virtualenv
    $ mkdir dcos
    $ cd dcos
    $ curl -O https://downloads.mesosphere.io/dcos-cli/install.sh
    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
     Dload  Upload   Total   Spent    Left  Speed
    100  3654  100  3654    0     0   3631      0  0:00:01  0:00:01 --:--:--  3635
    $ ls
    install.sh
    $ bash install.sh . http://mesos-dco-elasticl-17lqe4oh09r07-1358461817.us-west-1.elb.amazonaws.com
    Installing DCOS CLI from PyPI...
    New python executable in /home/vkohli/dcos/bin/python
    Installing setuptools, pip, wheel...done.
    [core.reporting]: set to 'True'
    [core.dcos_url]: set to 'http://mesos-dco-elasticl-17lqe4oh09r07-1358461817.us-west-1.elb.amazonaws.com'
    [core.ssl_verify]: set to 'false'
    [core.timeout]: set to '5'
    [package.cache]: set to '/home/vkohli/.dcos/cache'
    [package.sources]: set to '[u'https://github.com/mesosphere/universe/archive/version-1.x.zip']'
    Go to the following link in your browser:
    https://accounts.mesosphere.com/oauth/authorize?scope=&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code&client_id=6a552732-ab9b-410d-9b7d-d8c6523b09a1&access_type=offline
    Enter verification code: Skipping authentication.
    Enter email address: Skipping email input.
    Updating source [https://github.com/mesosphere/universe/archive/version-1.x.zip]
    Modify your bash profile to add DCOS to your PATH? [yes/no]  yes
    Finished installing and configuring DCOS CLI.
    Run this command to set up your environment and to get started:
    source ~/.bashrc && dcos help
    ```
    DCOS 帮助文件如下所示:
    ```
    $ source ~/.bashrc && dcos help
    Command line utility for the Mesosphere Datacenter Operating System (DCOS). The Mesosphere DCOS is a distributed operating system built around Apache Mesos. This utility provides tools for easy management of a DCOS installation.
    Available DCOS commands:
     config       Get and set DCOS CLI configuration properties
     help         Display command line usage information
     marathon     Deploy and manage applications on the DCOS
     node         Manage DCOS nodes
     package      Install and manage DCOS packages
     service      Manage DCOS services
     task         Manage DCOS tasks
    ```
8.  现在，我们将在更新后使用 DCOS 包在 Mesos 集群上部署一个 Spark 应用。用`dcos  --help` :
    ```
    $ dcos config show package.sources
    [
     "https://github.com/mesosphere/universe/archive/version-1.x.zip"
    ]
    $ dcos package update
    Updating source [https://github.com/mesosphere/universe/archive/version-1.x.zip]
    $ dcos package search
    NAME       VERSION            FRAMEWORK     SOURCE             DESCRIPTION
    arangodb   0.2.1                True     https://github.com/mesosphere/universe/archive/version-1.x.zip   A distributed free and open-source database with a flexible data model for documents, graphs, and key-values. Build high performance applications using a convenient SQL-like query language or JavaScript extensions.
    cassandra  0.2.0-1               True     https://github.com/mesosphere/universe/archive/version-1.x.zip  Apache Cassandra running on Apache Mesos.
    chronos    2.4.0                 True     https://github.com/mesosphere/universe/archive/version-1.x.zip  A fault tolerant job scheduler for Mesos which handles dependencies and ISO8601 based schedules.
    hdfs       0.1.7                 True     https://github.com/mesosphere/universe/archive/version-1.x.zip  Hadoop Distributed File System (HDFS), Highly Available.
    kafka      0.9.2.0               True     https://github.com/mesosphere/universe/archive/version-1.x.zip  Apache Kafka running on top of Apache Mesos.
    marathon   0.11.1                True     https://github.com/mesosphere/universe/archive/version-1.x.zip  A cluster-wide init and control system for services in cgroups or Docker containers.
    spark      1.5.0-multi-roles-v2  True     https://github.com/mesosphere/universe/archive/version-1.x.zip  Spark is a fast and general cluster computing system for Big Data.
    ```
    获得一个详细命令描述
9.  火花套装可按安装如下:
    ```
    $ dcos package install spark
    Note that the Apache Spark DCOS Service is beta and there may be bugs, incomplete features, incorrect documentation or other discrepancies.
    We recommend a minimum of two nodes with at least 2 CPU and 2GB of RAM available for the Spark Service and running a Spark job.
    Note: The Spark CLI may take up to 5min to download depending on your connection.
    Continue installing? [yes/no] yes
    Installing Marathon app for package [spark] version [1.5.0-multi-roles-v2]
    Installing CLI subcommand for package [spark] version [1.5.0-multi-roles-v2]
    ```
10.  After deployment, it can be seen in the DCOS UI under the **Services** tab, as shown in the following screenshot:
    ![Deploying Mesos on AWS using DCOS](img/00039.jpeg)
11.  为了在前面的 Marathon 集群上部署虚拟 Docker 应用，我们可以使用 JSON 文件来定义容器映像、要执行的命令以及部署后要公开的端口:
    ```
    $ nano definition.json
    {
     "container": {
     "type": "DOCKER",
     "docker": {
     "image": "superguenter/demo-app"
     }
     },
     "cmd":  "python -m SimpleHTTPServer $PORT",
     "id": "demo",
     "cpus": 0.01,
     "mem": 256,
     "ports": [3000]
    }
    ```
12.  该 app 可添加至马拉松，列表如下:
    ```
    $ dcos marathon app add definition.json
    $ dcos marathon app list
    ID       MEM    CPUS  TASKS  HEALTH  DEPLOYMENT  CONTAINER  CMD
    /demo   256.0   0.01   1/1    ---       ---        DOCKER   python -m SimpleHTTPServer $PORT
    /spark  1024.0  1.0    1/1    1/1       ---        DOCKER   mv /mnt/mesos/sandbox/log4j.properties conf/log4j.properties && ./bin/spark-class org.apache.spark.deploy.mesos.MesosClusterDispatcher --port $PORT0 --webui-port $PORT1 --master mesos://zk://master.mesos:2181/mesos --zk master.mesos:2181 --host $HOST --name spark
    ```
13.  前面的 Docker 应用的三个实例可以如下启动:
    ```
    $ dcos marathon app update --force demo instances=3
    Created deployment 28171707-83c2-43f7-afa1-5b66336e36d7
    $ dcos marathon deployment list
    APP    ACTION  PROGRESS  ID
    /demo  scale     0/1     28171707-83c2-43f7-afa1-5b66336e36d7
    ```
14.  The deployed application can be seen in the DCOS UI by clicking on the **Tasks** tab under **Services**:
    ![Deploying Mesos on AWS using DCOS](img/00040.jpeg)
# 总结
在本章中，我们学习了使用各种框架的 Docker 网络，例如原生的 Docker Swarm。Swarm 使用 libnetwork 或现成的覆盖网络，提供多主机网络功能。
另一方面，Kubernetes 与 Docker 的视角不同，在 Docker 中，每个 pod 都获得其唯一的 IP 地址，pod 之间的通信可以在服务的帮助下进行。使用开放的虚拟交换机或 IP 转发和高级路由规则，可以增强 Kubernetes 网络，以提供不同子网的主机之间的连接，以及将主机暴露给外部世界的能力。在中间层的例子中，我们可以看到 Marathon 被用作部署的容器联网的后端。以中间层的 DCOS 为例，整个部署的机器栈被视为一台机器，以便在部署的容器服务之间提供丰富的网络体验。
在下一章中，我们将通过了解内核命名空间、cgroups 和虚拟防火墙来了解基本 Docker 网络的安全性和 QoS。