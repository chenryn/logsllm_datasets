Certainly! Here's a more polished and professional version of your text:

---

I am using `logging.config.fileConfig` to set up my logging from a configuration file that includes both console and file handlers. I then use `logging.getLogger(name)` to get the logger and start logging.

At certain points, I need to change the filename for the file handler, i.e., perform log rotation. However, I cannot use the `TimedRotatingFileHandler` due to some issues with the Windows platform. To achieve this, I tried to access the file handler via `logger.handlers`, but it returns an empty list, preventing me from closing the handlers. When I step through the code in a debugger, the list is clearly not empty, as the logging is working correctly.

### Issue
The problem is that when you initialize logging using a configuration file, the `logging.handlers` list is not populated. This means you cannot iterate over the handlers to close and flush their streams before opening a new one with a different filename.

### Explanation
- **TimeRotatingFileHandler or RotatingFileHandler**: These handlers are defined in `logging/handlers.py`. When they perform a roll-over, they only close their own stream. They have no knowledge of other open streams managed by the parent logging class (which is typically a singleton). This can lead to file locks and failures during roll-over.
- **Logging Initialization**: If you initialize logging programmatically and add handlers using `addHandler` on the logger, the `logging.handlers` list is populated. You can then iterate over the handlers, close them, and manually rotate the log files.

### Solution
To resolve this issue, I recommend initializing the logging programmatically and adding the handlers directly. This approach ensures that the `logging.handlers` list is populated, allowing you to manage the handlers as needed.

```python
import logging
from logging.handlers import RotatingFileHandler

# Initialize the logger
logger = logging.getLogger('my_logger')
logger.setLevel(logging.DEBUG)

# Create a file handler
file_handler = RotatingFileHandler('my_log.log', maxBytes=1024*1024, backupCount=5)
file_handler.setLevel(logging.DEBUG)

# Create a console handler
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)

# Add the handlers to the logger
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# Now you can access and manage the handlers
for handler in logger.handlers:
    handler.close()

# Perform log rotation and re-add the handlers
file_handler = RotatingFileHandler('new_log.log', maxBytes=1024*1024, backupCount=5)
logger.addHandler(file_handler)
```

This solution works around the issue and allows for proper log rotation. It appears to be a bug in the logging class, especially since it works on Unix systems but not on Windows.

Thank you to everyone who provided assistance, especially @falsetru.

---

I hope this helps! Let me know if you need any further adjustments.