}
print urlencode(serialize(new Example));
    This code snippet defines a class named
     CodeSnippet
    and set its
     code
    property to
     phpinfo();
    . Then it defines a class named
     Example
    , and sets its
     obj
    property to a new
     CodeSnippet
    instance on instantiation. Finally, it creates an
     Example
    instance, serializes it, and URL-encodes the serialized string. The attacker can then feed the generated string into the POST parameter
     data
    .
    该代码片段定义了一个名为 CodeSnippet 的类，并将其代码属性设置为 phpinfo（）; 。然后它定义了一个名为 Example 的类，并在实例化时将其 obj 属性设置为新的 CodeSnippet 实例。最后，它创建一个 Example 实例，对其进行序列化，然后对序列化的字符串进行 URL 编码。攻击者可以将生成的字符串输入 POST 参数数据中。
    Notice that the attacker’s serialized object uses class and property names found elsewhere in the application’s source code. As a result, the program will do the following when it receives the crafted
     data
    string.
    请注意攻击者的序列化对象使用了应用程序源代码中其他地方发现的类和属性名称。因此，当程序接收到制作的数据字符串时，它将执行以下操作。
    First, it will unserialize the object and create an
     Example
    instance. Then, since
     Example
    implements
     __wakeup()
    , the program will call
     __wakeup()
    and see that the
     obj
    property is set to a
     CodeSnippet
    instance. Finally, it will call the
     evaluate()
    method of the
     obj
    , which runs
     eval("phpinfo();")
    , since the attacker set the
     code
    property to
     phpinfo()
    . The attacker is able to execute any PHP code of their choosing.
    首先，它会反序列化对象并创建一个 Example 实例。然后，由于 Example 实现了 __wakeup()，程序将调用 __wakeup()，并看到 obj 属性被设置为 CodeSnippet 实例。最后，它将调用 obj 的 evaluate() 方法，运行 eval("phpinfo();")，因为攻击者将 code 属性设置为 phpinfo()。攻击者能够执行任何所选择的 PHP 代码。
    POP chains achieve RCE by chaining and reusing code found in the application’s codebase. Let’s look at another example of how to use POP chains to achieve SQL injection. This example is also taken from
     https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection
    .
    POP链通过链接和重用应用程序代码库中发现的代码实现RCE。让我们看另一个使用POP链实现SQL注入的例子。这个例子也来自https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection。
    Say an application defines a class called
     Example3
    somewhere in the code and deserializes unsanitized user input from the POST parameter
     data
    :
    应用程序在代码的某处定义了一个名为Example3的类，并从POST参数数据反序列化未经过滤的用户输入。
class Example3
{
  protected $obj;
  function __construct()
  {
    // some PHP code...
  }
1 function __toString()
  {
    if (isset($this->obj)) return $this->obj->getValue();
  }
}
// some PHP code...
$user_data = unserialize($_POST['data']);
// some PHP code...
    Notice that
     Example3
    implements the
     __toString()
    magic method
     1
    . In this case, when an
     Example3
    instance is treated as a string, it will return the result of the
     getValue()
    method run on its
     $obj
    property.
    请注意，示例3实现了__toString()魔术方法1。在这种情况下，当一个Example3实例被视为字符串时，它将返回在其$obj属性上运行的getValue()方法的结果。
    Let’s also say that, somewhere in the application, the code defines the class
     SQL_Row_Value
    . It has a method named
     getValue()
    , which executes a SQL query. The SQL query takes input from the
     $_table
    property of the
     SQL_Row_Value
    instance:
    假设在应用程序的某个地方，代码定义了SQL_Row_Value类。它有一个名为getValue()的方法，用于执行SQL查询。该SQL查询从SQL_Row_Value实例的$ _table属性中获取输入：
class SQL_Row_Value
{
  private $_table;
  // some PHP code...
  function getValue($id)
  {
    $sql = "SELECT * FROM {$this->_table} WHERE id = " . (int)$id;
    $result = mysql_query($sql, $DBFactory::getConnection());
    $row = mysql_fetch_assoc($result);
return $row['value'];
  }
}
    An attacker can achieve SQL injection by controlling the
     $obj
    in
     Example3
    . The following code will create an
     Example3
    instance with
     $obj
    set to a
     SQL_Row_Value
    instance, and with
     $_table
    set to the string
     "SQL Injection"
    :
    攻击者可以通过控制Example3中的$obj实现SQL注入。以下代码将创建一个Example3实例，其$obj设置为SQL_Row_Value实例，并将$_table设置为字符串“SQL注入”：
class SQL_Row_Value
{
  private $_table = "SQL Injection";
}
class Example3
{
  protected $obj;
  function __construct()
  {
    $this->obj = new SQL_Row_Value;
  }
}
print urlencode(serialize(new Example3));
    As a result, whenever the attacker’s
     Example3
    instance is treated as a string, its
     $obj
    ’s
     get_Value()
    method will be executed. This means the
     SQL_Row_Value
    ’s
     get_Value()
    method will be executed with the
     $_table
    string set to
     "SQL Injection"
    .
    因此，每当攻击者的 Example3 实例被视为字符串时，其 $obj 的 get_Value() 方法将被执行。这意味着 SQL_Row_Value 的 get_Value() 方法将被执行，并将 $_table 字符串设置为“SQL 注入”。
    The attacker has achieved a limited SQL injection, since they can control the string passed into the SQL query
     SELECT * FROM {$this->_table} WHERE id = " . (int)$id;
    .
    攻击者已经成功进行了有限的SQL注入，因为他们可以控制传递到SQL查询语句 `SELECT * FROM {$this->_table} WHERE id = " . (int)$id;` 中的字符串。
    POP chains are similar to
     return-oriented programming (
     ROP)
    attacks, an interesting technique used in binary exploitation. You can read more about it on Wikipedia, at
     https://en.wikipedia.org/wiki/Return-oriented_programming
     .
    POP链和返回导向编程（ROP）攻击类似，是二进制利用中使用的一种有趣技术。更多信息请参见维基百科网址：https://en.wikipedia.org/wiki/Return-oriented_programming。
    Java
    Now that you understand how insecure deserialization in PHP works, let’s explore another programming language prone to these vulnerabilities: Java. Java applications are prone to insecure deserialization vulnerabilities because many of them handle serialized objects. To understand how to exploit deserialization vulnerabilities in Java, let’s look at how serialization and deserialization work in Java.
    现在你已经了解了PHP中不安全反序列化的工作原理，让我们来探究另一种易受这些漏洞影响的编程语言：Java。由于许多Java应用程序都处理序列化对象，因此Java应用程序容易受到不安全的反序列化漏洞的影响。要了解如何利用Java中的反序列化漏洞，让我们来看看Java中序列化和反序列化的工作原理。
    For Java objects to be serializable, their classes must implement the
     java.io.Serializable
    interface. These classes also implement special methods,
     writeObject()
    and
     readObject()
    , to handle the serialization and deserialization, respectively, of objects of that class. Let’s look at an example. Store this code in a file named
     SerializeTest.java
    :
    Java对象要实现序列化，它们的类必须实现java.io.Serializable接口。这些类还实现了特殊方法writeObject()和readObject()，用于分别处理该类对象的序列化和反序列化。让我们来看一个例子。将这个代码存储在名为SerializeTest.java的文件中：
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.Serializable;
import java.io.IOException;
1 class User implements Serializable{
2 public String username;
}
public class SerializeTest{
  public static void main(String args[]) throws Exception{
    3 User newUser = new User();
    4 newUser.username = "vickie";
      FileOutputStream fos = new FileOutputStream("object.ser");
      ObjectOutputStream os = new ObjectOutputStream(fos);