title:Reinhardt: Real-time Reconfigurable Hardware Architecture for Regular
Expression Matching in DPI
author:Taejune Park and
Jaehyun Nam and
Seung Ho Na and
Jaewoong Chung and
Seungwon Shin
Reinhardt: Real-time Reconfigurable Hardware Architecture for
Regular Expression Matching in DPI
Taejune Park
PI:EMAIL
Chonnam National University
Republic of Korea
Jaehyun Nam
PI:EMAIL
AccuKnox
USA
Seung Ho Na
PI:EMAIL
KAIST
Republic of Korea
Jaewoong Chung
PI:EMAIL
Atto Research
Republic of Korea
ABSTRACT
Regular expression (regex) matching is an integral part of deep
packet inspection (DPI) but a major bottleneck due to its low per-
formance. For regex matching (REM) acceleration, FPGA-based
studies have emerged and exploited parallelism by matching mul-
tiple regex patterns concurrently. However, even though guaran-
teeing high-performance, existing FPGA-based regex solutions do
not still support dynamic updates in run time. Hence, it was in-
appropriate as a DPI function due to frequently altered malicious
signatures. In this work, we introduce Reinhardt, a real-time re-
configurable hardware architecture for REM. Reinhardt represents
regex patterns as a combination of reconfigurable cells in hardware
and updates regex patterns in real-time while providing high per-
formance. We implement the prototype using NetFPGA-SUME, and
our evaluation demonstrates that Reinhardt updates hundreds of
patterns within a second and achieves up to 10 Gbps throughput
(max. hardware bandwidth). Our case studies show that Reinhardt
can operate as NIDS/NIPS and as the REM accelerator for them.
CCS CONCEPTS
• Security and privacy → Intrusion detection systems; Hard-
ware security implementation.
KEYWORDS
Deep Packet Inspection, Pattern matching, Regex, Hardware
ACM Reference Format:
Taejune Park, Jaehyun Nam, Seung Ho Na, Jaewoong Chung, and Seungwon
Shin. 2021. Reinhardt: Real-time Reconfigurable Hardware Architecture for
Regular Expression Matching in DPI. In Annual Computer Security Applica-
tions Conference (ACSAC ’21), December 6–10, 2021, Virtual Event, USA. ACM,
New York, NY, USA, 14 pages. https://doi.org/10.1145/3485832.3485878
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485878
Seungwon Shin
PI:EMAIL
KAIST
Republic of Korea
1 INTRODUCTION
As network traffic has become sophisticated with time, payload anal-
ysis has also become an essential operation in network protection.
In that sense, Deep packet inspection (DPI) that analyzes packet
payloads plays a central role in classifying and handling application
traffic as well as security (network intrusion detection/prevention
systems (NIDS/IPS) [64, 66, 84]). The DPI system in modern net-
works should satisfy high performance and dynamic updatability to
deal with a large amount of traffic and rapidly-changing networks
[4, 7, 20, 72, 74, 79]. Unfortunately, regular expression matching
(REM) is considered the major obstacle in achieving them; REM
is the essential function of DPI because it enables DPI to search
matches in packet payloads with specific patterns efficiently. How-
ever, as REM is commonly implemented by Finite-State Machines
(FSM), a time-consuming and computationally intensive operation,
REM is the major bottleneck in DPI performance. Thus, several
trials have been to accelerate REM using hardware, mainly based
on Field-Programmable Gate Arrays (FPGA), by matching multiple
regex patterns in parallel to support deterministic high performance
[29, 30, 44, 48, 62, 65, 82].
However, FPGA-based REM raises three critical obstacles in
adoption as DPI in practice due to the lack of dynamic updatability.
First, updating patterns in FPGA takes a significant amount of time.
Any pattern change requires a long compilation (i.e., synthesis,
map, placement, and routing), which may take at least a couple
of hours. Second, while updating, service interruption is inevitable
for initializing the device, which exposes a network to potential
threats, and which impedes service availability. Lastly, the update
has to perform in an all-or-nothing fashion. Even a tiny pattern
change requires the entire recompilation processes and service
interruptions to commence; the on-demand update of patterns is
a burdensome task. FPGA-based REM has these challenges due
to difficulty in update tasks, and therefore not very suitable for
NIDS/IPS where signatures should be frequently updated to respond
against emerging attacks. Also, while this issue in FPGA-based
REM has been pointed out for years, it still remains as a significant
unsolved limitation [14, 39, 75, 79].
To grant dynamic updatability to FPGA-based REM, we pro-
pose a real-time reconfigurable hardware architecture for high-
performance DPI, Reinhardt. We shift the paradigm of regex pattern
matching on FPGA from a circuit level to a logic level; Reinhardt
consists of reconfigurable cells that can change their connections
620ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Taejune Park, Jaehyun Nam, Seung Ho Na, Jaewoong Chung, and Seungwon Shin
in real-time. The combination of the cells will implement FSM cor-
responding to given regex patterns by our conversion algorithm.
Therefore, the deployment and modification of regex patterns per-
form fast and dynamically without the long compilation and service
interruptions. Furthermore, applying this updatability, Reinhardt
stores the information of cell connections in memory and can dy-
namically fetch them by swapping pattern sets in processing, al-
lowing a packet to be inspected with multiple patterns continuosly.
We implement a Reinhardt prototype using NetFPGA-SUME
[52, 85]. Our prototype supports 1.4-10 Gbps throughput with 800-
160 regex patterns, respectively. The updating time is less than one
second without service interruption, outperforming today’s FPGA-
based solutions. Also, comparing with DPDK-Hyperscan [35, 78],
Reinhardt has competitive benefits in providing stable performance,
enabling deterministic processing. Our case studies on NIDS/IPS
and Snort IDS acceleration using Reinhardt give an intuition on how
to leverage the unique strengths of Reinhardt as high-performance
security services. In particular, Reinhardt NIDS/IPS covers up to
87% of signatures in Snort 2.9.7 default rules (6,411 signatures), and
the hardware acceleration improves the overall throughput up to
65 times the original performance.
2 BACKGROUND AND MOTIVATION
Regular expressions (regex) are helpful to structurize a string that
contains a set of specific patterns (e.g., attack signatures) with
metacharacters having a special meaning for literal characters. Thus,
regex matching (REM) becomes one of the most critical functions
in DPI to search for one or more matches of specific patterns in
an observation string (i.e., packet payload). This section presents
the performance degradation in DPI caused by REM and discusses
the challenges of previous efforts for accelerating the matching
performance by parallelizing the matching process using FPGA.
2.1 Performance Degradation in REM
REM generates an equivalent finite-state machine (FSM) for a given
regex pattern and drives the state machine on an observation string.
Unfortunately, traversing an FSM is time-consuming and memory-
intensive work because it has to inquire state transitions over its
state graph on each input character from an observation string.
Also, as the complexity and number of regex patterns increase, REM
requires more memory access to read the string and continuously
traverse multiple state graphs. The complexity of its matching
process leads to significant performance degradation.
We evaluate how REM severely causes performance degrada-
tion by conducting a microbenchmark through the PCRE engine
[28] of Snort 2.9.7 [64], one of the most popular regex engines. For
this, we randomly select regex patterns from the default Snort rule-
set (i.e., select patterns having “pcre” option), and those randomly
selected rules contain 1.6 (noted as Simple) and 7.6 (noted as Com-
plex) metacharacters on average, respectively. This evaluation is
conducted on Intel Xeon E5-2630, and the input traffic is generated
by Intel DPDK-Pktgen [35].
Figure 1 illustrates the performance variations with different
complexity and number of regex patterns. We dramatically see
throughput degradations as the number of regex patterns increases;
With 50 simple and complex rules, the throughputs become 153 and
∗ Simple and complex regex patterns contain 1.6 and 7.6 metacharacters on average.
Figure 1: PCRE Performance variations in Snort IDS
67 Mbps, respectively, dropping up to 97.9% and 99.1% compared to
No pattern. With 100 rules, the throughputs are no longer viable.
While the throughput is declining, the latency increases from 50 µs
to 273 µs, 5.5 times the baseline with the number of patterns and
complexity. These performance degradations mostly come from
frequent state transitions along input strings (packet payloads) and
metacharacter operations, incurring heavy memory accesses. Also,
as the number of rules increases, the impact of the state transition
overhead gets accumulated. These results conclude that REM is a
bottleneck and should be improved for practical deployments.
2.2 Accelerating REM via Hardware (FPGA)
As depicted in Figure 1, REM suffers from the performance issue.
Thus, to improve the performance of REM, prior studies have sug-
gested some hardware accelerated approaches using FPGA [29, 30,
44, 48, 62, 65, 82] 1; FPGA-based REM situates the state machines
of regex at a circuit level (H/W) and works massively parallel by
exploiting the natural parallelism of hardware, and can be directly
connected to network interfaces (i.e., bump-in-the-wire). Thus, they
can handle incoming packets in a constant time regardless of the
number of patterns and without an unnecessarily cumbersome
procedure such as copying to memory, CPU, and applications, guar-
anteeing deterministic performance [12, 16, 24, 70]. Thus, FPGA-
based solutions are more welcomed for mission-critical systems
and time-sensitive networks [23, 27, 42, 60].
For regex processing, FPGA-based solutions mostly adopt non-
deterministic finite automata (NFA) rather than deterministic-finite
automata (DFA) [62, 79]. It is because 1) parallel processing in
hardware allows concurrent access to multiple states, efficiently
handling non-deterministic states, and 2) DFA requires much larger
space than NFA while the space is one of the sensitive issues in
FPGA due to its limited resource. Thus, we will describe this paper
based on NFA-based REM.
2.3 Challenges in FPGA-based REM