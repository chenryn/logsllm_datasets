flour,salt, milk",
             "directions":"Preheat the oven to 350 degrees F (175 degrees C).
               Line a cupcake pan with paper liners, or grease and flour 
cups..."
             }' http://localhost:8080/recipe
This returns the following JSon response:
{
         "recipeId":"10003",
         "location":"http://localhost:8080/recipe/10003",
}
To update an existing recipe, use the following cURL command:
curl  -X PUT -H 'Content-Type: application/json'
        -d '{"name":"Peanut Butter Cupcake",
              "ingredients":"peanut butter, eggs, sugar,unsalted butter, 
flour,salt, milk",
              "directions":"Preheat the oven to 350 degrees F (175 degrees C). 
Line a cupcake pan with
              paper liners, or grease and flour cups..."
             }' http://localhost:8080/recipe/10003
This returns the following JSON response:
{
         "recipeId":"10003",
         "location":"http://localhost:8080/recipe/10003",
}
To delete an existing recipe, use the following cURL command:
\> curl  -X DELETE http://localhost:8080/recipe/10001
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
415
Note To do remote debugging with Apache Tomcat, start the server under Linux 
operating system as sh catalina.sh jpda run or under Windows operating system as 
catalina.bat jpda run. This opens port 8000 for remote debugging connections.
CONFIGURING APACHE DIRECTORY SERVER (LDAP)
Apache directory Server is an open source LdAP server distributed under Apache 2.0 license. 
You can download the latest version from http://directory.apache.org/studio/. It’s 
recommended that you download the Apache directory Studio8 itself, as it comes with a set 
of very useful tools to configure LdAP. We use Apache directory Studio 2.0.0 in the following 
example.
The following steps are needed only if you don’t have an LdAP server set up to run. First you 
need to start Apache directory Studio. This provides a management console to create and 
manage LdAP servers and connections. Then proceed with the following steps:
 1. From Apache directory Studio, go to the LdAP Servers view. If it’s not there 
already, go to Window ➤ Show View ➤ LdAP Servers.
 2. Right-click LdAP Servers View, choose new ➤ new Server, and select 
ApachedS 2.0.0. Give any name to the server in the Server name text box, and 
click Finish.
 3. The server you created appears in the LdAP Servers view. Right-click the 
server, and select Run. If it’s started properly, State is updated to Started.
 4. To view or edit the configuration of the server, right-click it and select open 
configuration. By default, the server starts on LdAP port 10389 and LdAPS port 
10696.
8 Apache Directory Studio user guide for setting up and getting started is available at http://
directory.apache.org/studio/users-guide/apache_directory_studio/
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
416
now you have an LdAP server up and running. Before you proceed any further, let’s create a 
test connection to it from the Apache directory Studio:
 1. From Apache directory Studio, get to the connections view. If it’s not there 
already, go to Window ➤ Show View ➤ connections.
 2. Right-click connections View, and select new connection.
 3. In the connection name text box, give a name to the connection.
 4. The Host name field should point to the server where you started the LdAP 
server. In this case, it’s localhost.
 5. The Port field should point to the port of your LdAP server, which is 10389 in 
this case.
 6. Keep Encryption Method set to no Encryption for the time being. click next.
 7. Type uid=admin,ou=system as the Bind dn and secret as the Bind 
Password, and click Finish. These are the default Bind dn and password values 
for Apache directory Server.
 8. The connection you just created appears in the connections view. double-click 
it, and the data retrieved from the underlying LdAP server appears in the LdAP 
Browser view.
In the sections that follow, you need some users and groups in the LdAP server. Let’s create 
a user and a group. First you need to create an organizational unit (oU) structure under the 
dc=example,dc=com domain in Apache directory Server:
 1. In Apache directory Studio, get to the LdAP browser by clicking the appropriate 
LdAP connection in the connections view.
 2. Right-click dc=example,dc=com, and choose new ➤ new Entry ➤ create 
Entry From Scratch. Pick organizationalUnit from Available object classes, click 
Add, and then click next. Select ou for the Rdn, and give it the value groups. 
click next and then Finish.
 3. Right-click dc=example,dc=com, and choose new ➤ new Entry ➤ create 
Entry From Scratch. Pick organizationalUnit from Available object class, click 
Add, and then click next. Select ou for the Rdn, and give it the value users. 
click next and then Finish.
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
417
 4. Right-click dc=example,dc=com/ou=users, and choose new ➤ new Entry 
➤ create Entry From Scratch. Pick inetorgPerson from Available object class, 
click Add, and then click next. Select uid for the Rdn, give it a value, and click 
next. complete the empty fields with appropriate values. Right-click the same 
pane, and choose new Attribute. Select userPassword as the Attribute Type, and 
click Finish. Enter a password, select SSHA-256 as the hashing method, and 
click oK.
 5. The user you created appears under dc=example,dc=com/ou=users in the 
LdAP browser.
 6. To create a group, right-click dc=example,dc=com/ou=groups ➤ new 
➤ new Entry ➤ create Entry From Scratch. Pick groupofUniquenames from 
Available object class, click Add, and click next. Select cn for the Rdn, give it 
a value, and click next. Give the dn of the user created in the previous step as 
the uniqueMember (e.g., uid=prabath,ou=users,ou=system), and click 
Finish.
 7. The group you created appears under dc=example,dc=com/ou=groups in 
the LdAP browser.
CONNECTING APACHE TOMCAT TO APACHE DIRECTORY SERVER (LDAP)
You’ve already deployed the Recipe API in Apache Tomcat. Let’s see how you can configure 
Apache Tomcat to talk to the LdAP server you configured, following these steps:
 1. Shut down the Tomcat server if it’s running.
 2. By default, Tomcat finds users from the conf/tomcat-users.xml file via 
org.apache.catalina.realm.UserDatabaseRealm.
 3. open [TOMCAT_HOME]\conf\server.xml, and comment out the following 
line in it:
 4. In [TOMCAT_HOME]\conf\server.xml, comment out the following line, 
which points to the UserDatabaseRealm:
 5. To connect to the LdAP server, you should use the JNDIRealm. copy and paste 
the following configuration into [ToMcAT_HoME]\conf\server.xml just after 
:
SECURING AN API WITH HTTP BASIC AUTHENTICATION
The Recipe API that you deployed in Apache Tomcat is still an open API. Let’s see how to 
secure it with HTTP Basic authentication. You want to authenticate users against the corporate 
LdAP server and also use access control based on HTTP operations (GET, POST, DELETE, 
PUT). The following steps guide you on how to secure the Recipe API with HTTP Basic 
authentication:
 1. Shut down the Tomcat server if it’s running, and make sure connectivity to the 
LdAP server works correctly.
 2. open [TOMCAT_HOME]\webapps\recipe\WEB-INF\web.xml and add the 
following under the root element . The security-role element 
at the bottom of the following configuration lists all the roles allowed to use this 
web application:
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
419
          Secured Recipe API
          /∗
          admin
          BASIC
          cute-cupcakes.com
          admin
This configuration will protect the complete Recipe API from unauthenticated 
access attempts. A legitimate user should have an account in the corporate 
LdAP server and also should be in the admin group. If you don’t have a group 
called admin, change the preceding configuration appropriately.
 3. You can further enable fine-grained access control to the Recipe API by HTTP 
operation. You need to have a  element defined 
for each scenario. The following two configuration blocks will let any user that 
belongs to the admin group perform GET/POST/PUT/DELETE on the Recipe API, 
whereas a user that belongs to the user group can only do a GET. When you 
define an http-method inside a web-resource-collection element, only 
those methods are protected. The rest can be invoked by anyone if no other 
security constraint has any restrictions on those methods. For example, if you 
only had the second block, then any user would be able to do a POST. Having 
the first block that controls POST will allow only the legitimate user to do a 
POST to the Recipe API. The security-role element at the bottom of the 
following configuration lists all the roles allowed to use this web application:
           Secured Recipe API
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
420
           /∗
           GET
           PUT
           POST
           DELETE
           admin
           Secured Recipe API
           /∗
           GET
           user
           BASIC
           cute-cupcakes.com
           admin
           user
ENABLING TLS IN APACHE TOMCAT
The way you configured HTTP Basic authentication in the previous exercise isn’t secure 
enough. It uses HTTP to transfer credentials. Anyone who can intercept the channel can see 
the credentials in cleartext. Let’s see how to enable Transport Layer Security (TLS) in Apache 
Tomcat and restrict access to the Recipe API only via TLS:
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
421
 1. To enable TLS, first you need to have a keystore with a public/private key 
pair. You can create a keystore using Java keytool. It comes with the JdK 
distribution, and you can find it in [JAVA_HoME]\bin. The following command 
creates a Java keystore with the name catalina-keystore.jks. This command 
uses catalina123 as the keystore password as well as the private key 
password.
Note JAVA_HOME refers to the directory where you’ve installed the JdK. To run 
the keytool, you need to have Java installed in your system.
\> keytool   -genkey -alias localhost -keyalg RSA -keysize 1024
             -dname "CN=localhost"
             -keypass catalina123
             -keystore catalina-keystore.jks
             -storepass catalina123
 2. copy catalina-keystore.jks to [TOMCAT_HOME]\conf, and add 
the following element to [TOMCAT_HOME]\conf\server.xml under the 
 parent element. Replace the values of keyStoreFile and 
keystorePass elements appropriately:
 3. Start the Tomcat server, and execute the following cURL command to validate 
the TLS connectivity. Make sure you replace the values of username and 
password appropriately. They must come from the underlying user store:
\> curl -k  -u username:password  https://localhost:8443/recipe
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
422
You’ve configured Apache Tomcat to work with TLS. next you need to make sure that 
the Recipe API only accepts connections over TLS.
open [TOMCAT_HOME]\webapps\recipe\WEB-INF\web.xml, and add the 
following under each  element. This makes sure only  
TLS connections are accepted:
    CONFIDENTIAL
SECURING THE RECIPE API WITH HTTP DIGEST AUTHENTICATION
The Tomcat JNDIRealm that you used previously to connect to the LdAP server doesn’t 
support HTTP digest authentication. If you need HTTP digest authentication support, you have 
to write your own Realm, extending Tomcat JNDIRealm, and override the getPassword() 
method. To see how to secure an API with digest authentication, we need to switch back to the 
Tomcat UserDatabaseRealm:
 1. open [TOMCAT_HOME]\conf\server.xml, and make sure that the following 
line is there. If you commented this out during a previous exercise, revert it 
back:
 2. In [TOMCAT_HOME]\conf\server.xml, make sure that the following line, 
which points to UserDatabaseRealm, is there. If you commented it out during 
a previous exercise, revert it back:
APPEndIx F  BASIc/dIGEST AUTHEnTIcATIon
423
 3. open [TOMCAT_HOME]\webapps\recipe\WEB-INF\web.xml, and add the 
following under the root element :
                Secured Recipe API
               /∗ 
               admin
               DIGEST
               cute-cupcakes.com
               admin