         Buffers: shared hit=84  
         ->  Bitmap Index Scan on idx_bi  (cost=0.00..45.90 rows=1002192 width=0) (actual time=1.401..1.401 rows=63840 loops=1)  
               Index Cond: ((bi_user_tmall_vis1.bid = 1) AND (bi_user_tmall_vis1.cnt >= 1) AND (bi_user_tmall_vis1.cnt   Bitmap Index Scan on idx_bi  (cost=0.00..45.90 rows=1002192 width=0) (actual time=1.318..1.318 rows=63840 loops=1)  
               Index Cond: ((bi_user_tmall_vis1.bid = 2000) AND (bi_user_tmall_vis1.cnt = 1) AND (bi_user_tmall_vis1.cnt   Bitmap Index Scan on idx_bi  (cost=0.00..45.90 rows=1002192 width=0) (actual time=1.368..1.368 rows=63840 loops=1)  
         Index Cond: ((bi_user_tmall_vis1.bid = 1) AND (bi_user_tmall_vis1.cnt >= 1) AND (bi_user_tmall_vis1.cnt <= 100))  
         Buffers: shared hit=42  
 Planning time: 0.109 ms  
 Execution time: 97.744 ms  
(11 rows)  
```  
### 不同pages_per_range的对比  
索引精度 | 单表数据量 | 单表大小 | 索引大小 | 1个条件 | 2个条件 | 3个条件  
---|---|---|---|---|---|---  
pages_per_range=1 | 64亿 | 311GB | 1.6GB | 8.2秒 | - | -  
pages_per_range=128 | 64亿 | 311GB | 13MB | 62毫秒 | - | 191毫秒  
pages_per_range=256 | 64亿 | 311GB | 6MB | 33毫秒 | - | 105毫秒  
pages_per_range=512 | 64亿 | 311GB | 3MB | 25毫秒 | - | 78毫秒  
pages_per_range=sqrt(pg_class.relpages)=6384 | 64亿 | 311GB | 300KB | 97毫秒 | 112毫秒 | 139毫秒  
虽然精度高，但是由于目前PG BRIN索引扫描方式是全扫的，所以索引本身越大，扫描索引本身的成本占比就越高，8.2秒就是这样来的。  
当精度调成512时，单个条件变成了25毫秒，而索引大小只有3MB。  
开不开心，意不意外。  
## BRIN内核优化思考  
为了降低BRIN索引本身的扫描开销，我们可以把BRIN索引的边界，再生成一颗树，通过树来扫描，提高速率，而不是全扫的方式。  
那么以后我们就只需要考虑精度=1的就可以了。因为这样过滤性是最好的，同时BRIN索引本身的扫描成本又是很低的。从而使BRIN索引的效率在海量数据的情况下，大幅度提升。  
## 小结  
本文主要讲了BRIN索引的原理，扫描的原理，精度参数的原理，以及如何选择精度参数，还讲了如何通过调整内核优化BRIN索引扫描的方法来降低BRIN索引本身的成本。  
好了，祝大家玩得开心。你懂PostgreSQL多少，她就能给你多少，PG是一个可玩性很强的企业级开源数据库，加油。  
BRIN索引的特性，可以用来支撑万亿级别甚至更大体量的海量数据筛选，同时索引的存储、对写入造成的影响等几乎为0。绝对属于黑科技级别的特性。  
## 参考  
[《PostGIS空间索引(GiST、BRIN、R-Tree)选择、优化 - 阿里云RDS PostgreSQL最佳实践》](../201708/20170820_01.md)    
[《自动选择正确索引访问接口(btree,hash,gin,gist,sp-gist,brin,bitmap...)的方法》](../201706/20170617_01.md)    
[《PostgreSQL 并行写入堆表，如何保证时序线性存储 - BRIN索引优化》](../201706/20170611_02.md)    
[《PostgreSQL 10.0 preview 功能增强 - BRIN 索引更新smooth化》](../201704/20170405_01.md)    
[《PostgreSQL 聚集存储 与 BRIN索引 - 高并发行为、轨迹类大吞吐数据查询场景解说》](../201702/20170219_01.md)    
[《PostgreSQL 物联网黑科技 - 瘦身几百倍的索引(BRIN index)》](../201604/20160414_01.md)    
[《PostgreSQL 9.5 new feature - lets BRIN be used with R-Tree-like indexing strategies For "inclusion" opclasses》](../201505/20150526_01.md)    
[《PostgreSQL 9.5 new feature - BRIN (block range index) index》](../201504/20150419_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")