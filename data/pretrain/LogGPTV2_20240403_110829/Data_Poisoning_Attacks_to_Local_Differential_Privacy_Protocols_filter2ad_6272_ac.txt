= 1
r
· p + (1− 1
r
)q,
(21)
where r = |T| is the number of target items. According
to Equation (13), we can obtain the overall gain as G =
(p+(r−1)q)m
(n+m)(p−q) − c.
Maximal gain attack (MGA): For each fake user, MGA
crafts its perturbed value by solving the optimization prob-
lem in Equation (15). For the kRR protocol, we have
∑t∈T 1S(y)(t) ≤ 1 and ∑t∈T 1S(y)(t) = 1 when y is a target
item in T . Therefore, MGA picks any target item for each
fake user. Moreover, according to Equation (13), the overall
gain is G =
(n+m)(p−q) − c.
m
3.4 Attacking OUE
Random perturbed-value attack (RPA): For each fake user,
RPA selects a d-bits binary vector yyyi from the encoded space
{0,1}d uniformly at random as its perturbed vector and sends
it to the server. We denote by yi, j the j-th bit of the per-
turbed vector yyyi. Therefore, for each target item t ∈ T , we
have E[1S(yyyi)(t)] = Pr(yi,t = 1) = 1
2. According to Equation
2(n+m)(p−q) − c.
(13), we can obtain the overall gain as G =
Random item attack (RIA): For each fake user, RIA ran-
domly selects a target item ti ∈ T , encodes it to a d-bits binary
vector ei whose bits are all zeros except the ti-th bit, randomly
perturbs ei following Equation (6), and sends the perturbed
vector yyyi to the server. For a target item t ∈ T , we can calculate
the expected value of the characteristic function as follows:
rm
E[1S(yyyi)(t)] = Pr(yi,t = 1)
= Pr(ti = t)Pr(yi,t = 1|ti = t)
+ Pr(ti (cid:4)= t)Pr(yi,t = 1|ti (cid:4)= t)
= 1
r
· p + (1− 1
r
)· q,
(22)
(23)
(24)
(n+m)(p−q) − c.
where p and q are deﬁned in Equation (6). Therefore, the
overall gain is G = (p+(r−1)q)m
Maximal gain attack (MGA): For each fake user, MGA
chooses a perturbed vector yyyi that is a solution of the optimiza-
tion problem deﬁned in Equation (15). For OUE, we have
∑t∈T 1S(yyyi)(t) ≤ r and ∑t∈T 1S(yyyi)(t) = r is achieved when
1S(yyyi)(t) = 1,∀t ∈ T . Thus, for each fake user, MGA initial-
izes a perturbed vector yyyi as a binary vector of all 0’s and sets
yi,t = 1 for all t ∈ T . However, if all fake users send the same
perturbed binary vector to the server, the server can easily
detect the fake users. For instance, there is only one entry in
the perturbed binary vector that has value 1 when we only
have 1 target item; and the server could detect a vector with
only a single 1 to be from a fake user, because it is statistically
unlikely for a genuine user to send such a vector. Therefore,
MGA also randomly samples l non-target bits of the perturbed
vector yyyi and sets them to 1. Speciﬁcally, we set l such that
the number of 1’s in the binary vector is the expected number
of 1’s in the perturbed binary vector of a genuine user. Since
the perturbed binary vector of a genuine user has p + (d−1)q
1’s on average, we set l = (cid:10)p + (d − 1)q− r(cid:11). Note that r is
usually much smaller than d, so l is a non-negative value. The
ﬁnal binary vector is sent to the server. According to Equation
(13), the overall gain is G =
(n+m)(p−q) − c.
rm
952    30th USENIX Security Symposium
USENIX Association
Random perturbed-value attack (RPA)
Random item attack (RIA)
Maximal gain attack (MGA)
Standard deviation of estimation
kRR
− fT )
β( r
d
β(1− fT )
β(1− fT ) +
√
d−2+eε
√
r
(eε−1)
n
β(d−r)
eε−1
OUE
β(r− fT )
β(1− fT )
√
2reε/2
(eε−1)
n
OLH
−β fT
β(1− fT )
√
2reε/2
(eε−1)
n
β(2r− fT ) + 2βr
eε−1
β(2r− fT ) + 2βr
eε−1
Table 1: Overall gains of the three attacks for kRR, OUE, and OLH. n is the number of genuine users, β = m
n+m is the
fraction of fake users among all users, d is the number of items, r is the number of target items, fT = ∑t∈T ft is the sum
of true frequencies of the target items among the genuine users, ε is the privacy budget, and e is the base of the natural
logarithm. To understand the signiﬁcance of the overall gains, we also include the standard deviations of the estimated
total frequencies of the target items among the n genuine users [59] in the table.
3.5 Attacking OLH
Random perturbed-value attack (RPA): For each fake user,
RPA randomly selects a hash function Hi ∈ H and a hash value
ai ∈ [d
(cid:5)], and sends the tuple yi = (Hi,ai) to the server. For
each t ∈ T , we have E[1S(yyyi)(t)] = Pr(Hi(t) = ai) = 1
d(cid:5) . There-
d(cid:5)(n+m)(p−q) − c.
fore, we can obtain the overall gain as G =
Random item attack (RIA): For each fake user, RIA ran-
domly selects a target item ti, randomly selects a hash function
Hi ∈ H, and calculates the hash value hi = Hi(ti). The tuple
(Hi,hi) is then perturbed as (Hi,ai) according to Equation (7).
(Hi,ai) is the perturbed value, i.e., yi = (Hi,ai). We assume
(cid:5)]
the hash function Hi maps any item in [d] to a value in [d
uniformly at random. For a target item t ∈ T , we can calculate
the expectation of the characteristic function as follows:
rm
E[1S(yi)(t)] = Pr(Hi(t) = ai)
= Pr(ti = t)Pr(Hi(t) = ai|ti = t)
+ Pr(ti (cid:4)= t)Pr(Hi(t) = ai|ti (cid:4)= t)
= 1
r
· p + (1− 1
r
)· q.
(n+m)(p−q) − c.
(25)
(26)
(27)
Thus, the overall gain for RIA is G = [p+(r−1)q]m
Maximal gain attack (MGA): For each fake user, MGA
chooses a perturbed value yi = (Hi,ai) that is a solution of
the optimization problem deﬁned in Equation (15). For OLH,
we have ∑t∈T 1S(yi)(t) ≤ r and ∑t∈T 1S(yi)(t) = r is achieved
when the hash function Hi maps all items in T to ai, i.e.,
Hi(t) = ai,∀t ∈ T . Thus, for each fake user, MGA searches
for a hash function Hi in H such that Hi(t) = ai,∀t ∈ T holds.
Therefore, according to Equation (13), the overall gain is
(n+m)(p−q) −c. Note that we may not be able to ﬁnd such
G =
a hash function in practice. In our experiments, for each fake
user, we randomly sample 1,000 hash functions and use the
one that hashes the most target items to the same value.
rm
3.6 Theoretical Analysis
Table 1 summarizes the overall gains of the three attacks for
kRR, OUE, and OLH, where we have replaced the parameters
p and q for each LDP protocol according to Section 2.1. Next,
we compare the three attacks, discuss a fundamental security-
privacy tradeoff, and compare the three LDP protocols with
respect to their security against our data poisoning attacks.
Comparing the three attacks: All three attacks achieve
larger overall gains when the target items’ true frequencies
are smaller (i.e., fT is smaller). MGA achieves the largest
overall gain among the three attacks. In fact, given an LDP
protocol, a set of target items and fake users, MGA achieves
the largest overall gain among all possible attacks. This is
because MGA crafts the perturbed values for the fake users
such that the overall gain is maximized. RIA achieves larger
overall gains than RPA for kRR and OLH, while RPA achieves
a larger overall gain than RIA for OUE.
Table 1 also includes the standard deviations of the es-
√
timated total frequencies of the target items among the n
genuine users. Due to the
n term in the denominators, the
standard deviations are much smaller than the overall gains
of our MGA attacks. For instance, on the Zipf dataset in our
experiments with the default parameter settings, the overall
gains of MGA are 1600, 82, and 82 times larger than the
standard deviations for kRR, OUE, and OLH, respectively.
Fundamental security-privacy tradeoffs: The security of
an LDP protocol is determined by the strongest attack (i.e.,
MGA) to it. Intuitively, when the privacy budget ε is smaller
(i.e., stronger privacy), genuine users add larger noise to their
data. However, the perturbed values that MGA crafts for the
fake users do not depend on the privacy budget. As a result,
the fake users contribute more towards the estimated item
frequencies, making the overall gain larger. In other words,
we have a fundamental security-privacy tradeoff. Formally,
the following theorem shows such tradeoffs.
Theorem 1 (Security-Privacy Tradeoff). For any of the three
LDP protocols kRR, OUE, and OLH, when the privacy budget
ε is smaller (i.e., stronger privacy), MGA achieves a larger
overall gain G (i.e., weaker security).
Proof. Table 1 shows that ε is in the denominator of the
overall gains for MGA. Therefore, the overall gains of MGA
increase as ε decreases.
USENIX Association
30th USENIX Security Symposium    953
Comparing the security of the three LDP protocols: Ta-
ble 1 shows that, when MGA is used, OUE and OLH achieve
the same overall gain. Therefore, OUE and OLH have the
same level of security against data poisoning attacks. The
following theorem shows that OUE and OLH are more secure
than kRR when the number of items is larger than a threshold.
Theorem 2. Suppose MGA is used. OUE and OLH are more
secure than kRR when the number of items is larger than some
threshold, i.e., d > (2r− 1)(eε − 1) + 3r.
Proof. See Appendix A.
4 Attacking Heavy Hitter Identiﬁcation
4.1 Threat model
Attacker’s capability and background knowledge: We
make the same assumption on the attacker’s capability and
background knowledge as in attacking frequency estimation,
i.e., the attacker can inject fake users into the protocol and
send arbitrary data to the central server.
Attacker’s goal: We consider the attacker’s goal is to pro-
mote some target items, i.e., manipulate the heavy hitter iden-
tiﬁcation protocol to recognize the target items as top-k heavy
hitters. Formally, we denote by T = {t1,t2,··· ,tr} the set of r
target items, which are not among the true top-k heavy hitters.
We deﬁne success rate of an attack as the fraction of target
items that are promoted to be top-k heavy hitters by the attack.
An attacker’s goal is to achieve a high success rate.
4.2 Attacks
State-of-the-art heavy hitter identiﬁcation protocols iteratively
apply frequency estimation protocols. Therefore, we apply
the three attacks for frequency estimation to heavy hitter iden-
tiﬁcation. Next, we use PEM as an example to illustrate how
to attack heavy hitter identiﬁcation protocols.
In PEM, each item is encoded by a γ-bits binary vector
and users are randomly divided into g groups. On average,
each group contains a fraction of m
n+m fake users. In the jth
iteration, PEM uses OLH to perturb the ﬁrst λ j bits of the
binary vectors for users in the jth group and sends them to
the central server. An attacker uses the RPA, RIA, or MGA to
craft the data sent from the fake users to the central server by
treating the ﬁrst λ j bits of the binary vectors corresponding
to the target items as the “target items” in the jth iteration.
Such attacks can increase the likelihood that the ﬁrst λ j bits
of the target items are identiﬁed as the top-k preﬁxes in the
jth iteration, which in turn makes it more likely to promote
the target items as top-k heavy hitters.
Parameter Default setting
β
r
fT
ε
k
g
0.05
1
0.01
1
20
10
Table 2: Default parameter settings.
5 Evaluation
5.1 Experimental Setup
Datasets: We evaluate our attacks on three datasets, in-
cluding a synthetic dataset and two real-world datasets, i.e.,
Fire [4] and IPUMS [51].
• Zipf: Following previous work on LDP protocols, we
generate random data following the Zipf’s distribution. In
particular, we use the same parameter in the Zipf’s distri-
bution as in [59]. By default, we synthesize a dataset with
1,024 items and 1,000,000 users.
• Fire [4]: The Fire dataset was collected by the San Fran-
cisco Fire Department, recording information about calls
for service. We ﬁlter the records by call type and use the
data of type “Alarms”. We treat the unit ID as the item that
each user holds, which results in a total of 244 items and
548,868 users.
• IPUMS [51]: The IPUMS dataset contains the US census
data over the years. We select the latest data of 2017 and
treat the city attribute as the item each user holds, which
results in a total of 102 items and 389,894 users.
Parameter setting: For frequency estimation, the overall
gains of our attacks may depend on β (the fraction of fake
users), r and fT (the number of target items and their true
frequencies), ε (privacy budget), and d (number of items in
the domain). For heavy hitter identiﬁcation, the success rates
of our attacks further depend on k (the number of items iden-
tiﬁed as heavy hitters) and g (the group size used by the
PEM protocol). Table 2 shows the default settings for these
parameters, which we will use in our experiments unless other-
wise mentioned. We will study the impact of each parameter,
while ﬁxing the remaining parameters to their default settings.
(cid:5) is an integer.
Moreover, we use d
(cid:5) = (cid:6)eε + 1(cid:7) in OLH as d
5.2 Results for Frequency Estimation
Impact of different parameters: Table 1 shows the theoret-
ical overall gains of the three attacks for the kRR, OUE, and
OLH protocols. We use these theoretical results to study the
impact of each parameter. Figures 1 to 3 show the impact of
different parameters on the overall gains and normalized over-
all gains. A normalized overall gain is the ratio between the
total frequencies of the target items after and before an attack,
954    30th USENIX Security Symposium
USENIX Association
Figure 1: Impact of different parameters on the overall gains (ﬁrst row) and normalized overall gains (second row) of
the three attacks for kRR.
Figure 2: Impact of different parameters on the overall gains (ﬁrst row) and normalized overall gains (second row) of
the three attacks for OUE.
Figure 3: Impact of different parameters on the overall gains (ﬁrst row) and normalized overall gains (second row) of
the three attacks for OLH.
i.e., (G + fT )/ fT , where fT is the total true frequencies of the
target items. We observe that MGA outperforms RIA, which
outperforms RPA or achieves similar (normalized) overall
gains with RPA. The reason is that MGA is an optimization-
based attack, RIA considers information of the target items,
and RPA does not consider information about the target items.
Next, we focus our analysis on MGA since it is the strongest
attack. The (normalized) overall gains of MGA increase as