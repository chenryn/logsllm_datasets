I am trying to get integration `webpack-hot-middleware` working, and I'm
hitting the issue where when accessing a non-root path, I get a `404` as
webpack tries to get the generated `.json` file from a relative path. The
solutions I've found indicate that configuring `webpack` with:
    output:
      path: target.dir
      filename: 'all.js'
      publicPath: '/'
... and `webpack-dev-middleware` with the same `publicPath: '/'` should
resolve the issue.
However, none of my files are served properly with this configuration as
`webpack` seems to be stripping out the entire host for some reason. So I get
the following request:
`GET http://all.js`
Then when I try to add the full host as some other solutions recommend using
`publicPath: http://192.168.0.101:3001`, webpack sends:
`GET http://192.168.0.101:3001/http://192.168.101:3001/all.js`
Here's my full config:
      config =
        bail: true
        context: paths.app.dir
        devtool: 'cheap-module-sourcemap'
        entry: [ 'webpack-hot-middleware/client?path=/__webpack_hmr', './index' ]
        output:
          path: target.dir
          filename: 'all.js'
          publicPath: '/'
        resolve:
          extensions: [ '', '.js', '.coffee' ]
          modulesDirectories: [
            "#{ paths.main.dir }/node_modules"
            "#{ paths.root.dir }/node_modules"
          ]
        resolveLoader:
          modulesDirectories: [ "#{ paths.tasks.dir }/node_modules" ]
        module:
          loaders: [
            { test: /\.coffee$/, loaders: [ 'react-hot', 'coffee', 'cjsx' ] }
            { test: /\.styl$/, loaders: [ 'style', 'css', 'stylus' ] }
          ]
        plugins: [
          new $.webpack.optimize.OccurenceOrderPlugin()
          new $.webpack.NoErrorsPlugin()
          new $.webpack.HotModuleReplacementPlugin()
          new $.htmlWebpackPlugin {
            filename: 'index.html'
            inject: false
            template: "#{ paths.app.dir }/index.ejs"
          }
          new $.webpack.DefinePlugin {
            'process.env':
              NODE_ENV: JSON.stringify(env.name)
              POLLINATE_API_URL: JSON.stringify("http://#{ ports.host }:#{ ports.api }")
          }
        ]
Am I doing something wrong here? It seems like the expected behavior of
`publicPath: '/'` would solve my problem but it's not working in my case.
In case it's relevant, here's the middleware:
      middleware = [
        $.connectHistoryApiFallback()
      ]
      if inDevMode
        middleware.push($.webpackDevMiddleware(compiler, { noInfo: true }))
        middleware.push($.webpackHotMiddleware(compiler, { path: '/__webpack_hmr', heartbeat: 10 * 1000 }))
      $.connect.server
        host: argv.host || ports.host
        port: argv.port || project.port
        root: target.dir
        middleware: -> middleware