# Fast and Secure Three-Party Computation: The Garbled Circuit Approach

## Authors
- Payman Mohassel, Yahoo Labs, Sunnyvale, California, USA
- Mike Rosulek, Oregon State University, Corvallis, Oregon, USA
- Ye Zhang, Google, Mountain View, CA, USA

## Abstract
Many practical deployments of secure multi-party computation (MPC) have utilized information-theoretic three-party protocols that can tolerate a single, semi-honest corrupt party, due to their high efficiency. This paper introduces a new approach for secure three-party computation (3PC) that enhances security while maintaining practical efficiency comparable to traditional information-theoretic protocols. Our protocol, based on garbled circuits, provides security against a single, malicious corrupt party and operates in a constant number of rounds. It relies solely on inexpensive symmetric-key cryptography, including hash functions, block ciphers, and pseudorandom generators, and does not require oblivious transfers. The performance of our protocol is comparable to Yao's (semi-honest) 2PC protocol.

We demonstrate the practicality of our protocol through an implementation using the JustGarble framework by Bellare et al. (S&P 2013). Our implementation includes various optimizations, such as the most recent techniques for efficient circuit garbling. We conduct experiments on several benchmarking circuits in different setups, confirming that our protocol, despite providing a more stringent security guarantee, performs comparably to existing information-theoretic 3PC protocols.

## 1. Introduction
Secure multi-party computation (MPC) enables a set of parties to compute a function of their joint inputs without revealing any additional information beyond the output. MPC has numerous applications, including privacy-preserving tasks on sensitive data and distributing trust while maintaining functionality. Since the seminal work of [Yao86, GMW87], MPC has been extensively researched, with a focus on improving security and efficiency.

Three-party computation (3PC), where the adversary can corrupt at most one party (honest majority), is a significant special case. It has been the subject of active research, implementation, and optimization in frameworks like VIFF [Gei07], Sharemind [BLW08], ShareMonad [LDDAM12, LADM14], and MEVAL [CMF+14]. These protocols have been used in various applications, such as statistical data analysis [BTW12] and email filtering [LADM14]. They have also been deployed in practice for online beet auctions [BCD+09] and financial data analysis [BTW12].

Protocols designed for 3PC with one corruption are often more efficient than their two-party counterparts or dishonest-majority protocols because they typically use secret-sharing schemes, which require only arithmetic operations. However, these solutions have drawbacks, such as high round complexity proportional to the circuit depth and, except for [IKHC14], only provide security against semi-honest adversaries. Our work shows that malicious security can be achieved with little to no overhead over semi-honest security in the 3PC setting.

### 1.1 Our Contributions
- **Protocol Design**: We design a new 3PC protocol based on Garbled Circuits (GC) [Yao82, LP09, BHR12b]. Our protocol is constant-round and secure against a malicious adversary that corrupts one party. Unlike standard approaches, we avoid cut-and-choose techniques and public-key operations like Oblivious Transfer.
- **Security Proofs**: We prove our protocol secure in the Universal Composability (UC) model, using only symmetric key primitives.
- **Implementation and Experiments**: We implement our protocol using the JustGarble framework, incorporating state-of-the-art "half-gates" garbling. Our experiments show that our protocol is competitive with prior work while achieving stronger malicious security. Communication remains the major bottleneck, even in the three-party setting. We also explore a distributed credential encryption service application, demonstrating fast online phases.

### 1.2 Related Work
- **Honest Majority MPC**: A large body of work has studied the round and communication complexity of honest-majority MPC protocols, often using verifiable secret sharing (VSS) [BOGW88, RBO89]. The practical efficiency and constant factors of these constructions are not fully examined.
- **Existing Implementations**: The only known implementation of 3PC with malicious security is [IKHC14], which compiles semi-honest 3PC into malicious 3PC with small overhead. Other implementations [BLW08, LDDAM12, ZSB13, CMF+14] provide security against semi-honest adversaries.
- **General Multiparty Protocols**: General multiparty and constant-round variants of Yao’s garbled circuit have been studied in both semi-honest [BMR90] and malicious [DI05, IKP10] settings. An implementation exists for the semi-honest case [BDNP08].
- **Concurrent Work**: Ishai et al. [IKKPC15] describe efficient, constant-round secure computation protocols for 3 and 4 parties, tolerating 1 malicious corruption. Their protocol and ours use different techniques and achieve different properties.

### 1.3 Organization
- **Section 2**: Preliminaries, including the UC framework and building blocks.
- **Section 3**: Main construction and security proof.
- **Section 4**: Implementation, experimental results, and comparison with other implementations.
- **Section 5**: Discussion of the distributed encryption service application.

## 2. Preliminaries

### 2.1 Secure MPC: UC Framework
We define the security of multi-party computation using the Universal Composition (UC) framework [Can01]. In this framework, an execution involves a collection of interactive Turing machines. We consider an adversary that can statically corrupt at most one party and security against active adversaries, meaning a corrupt party may deviate arbitrarily from the protocol.

**Security Definition**: Security is defined by comparing a real and ideal interaction. Let `real[Z,A, π, k]` denote the final output of the environment Z when interacting with adversary A and honest parties executing protocol π on security parameter k. In the ideal interaction, parties run a dummy protocol, forwarding inputs to an uncorruptable functionality machine and responses to the environment. Let `ideal[Z,S,F, k]` denote the output of the environment Z when interacting with adversary S and honest parties running the dummy protocol in the presence of functionality F on security parameter k.

A protocol π securely realizes a functionality F if for every adversary A attacking the real interaction, there exists an adversary S (a simulator) attacking the ideal interaction such that for all environments Z, the following quantity is negligible (in k):
\[
\left| \Pr\left(\text{real}[Z,A, \pi, k] = 1\right) - \Pr\left(\text{ideal}[Z,S,F, k] = 1\right) \right|
\]

**Target Functionality**: The code of the functionality F defines the required security properties. Figure 1 defines the ideal functionality Ff for secure 3-party computation of a function f.

- **Input Collection**: On message `(input, xi)` from party Pi, record xi internally and send `(inputfrom, Pi)` to the adversary.
- **Computation**: After all 3 parties have given input, compute `y = f(x1, x2, x3)`. If any party is corrupt, send `(output, y)` to the adversary; otherwise, send `(output, y)` to all parties.
- **Unfair Output**: On message `deliver` from the adversary, send `(output, y)` to all honest parties.

**Contrasting Active and Semi-Honest Security**: When one party (e.g., P1) is actively corrupt, it may send unexpected messages to an honest party (e.g., P3), potentially leaking extra information about another honest party (e.g., P2). However, this is not a violation of security in the 1-out-of-3 corruption case. A protocol with malicious security must handle unexpected messages appropriately, focusing on the final output of honest parties rather than their entire view. We leave as an open problem to achieve security in the presence of one active and one semi-honest party with comparable efficiency to our protocol.

Our primary point of comparison is against existing 3PC protocols that tolerate 1 semi-honest corruption. In these protocols, a single, actively corrupt party can cause significant issues, but our protocol addresses this with minimal overhead.