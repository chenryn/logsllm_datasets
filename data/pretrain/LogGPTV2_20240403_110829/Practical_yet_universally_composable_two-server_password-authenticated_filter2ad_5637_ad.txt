2 ←R Zq and encrypt password shares under the
2). En-
1 ←
2 ←
Choose s(cid:48)
1, s(cid:48)
1 ← encPK (p(cid:48)
CRS as C(cid:48)
crypt the shares and randomness for both servers as F (cid:48)
2, PK u)) and F (cid:48)
1, s(cid:48)
enc2PE 1 ((p(cid:48)
enc2PE 2 ((p(cid:48)
2, s(cid:48)
2, PK u)).
1, C(cid:48)
1, C(cid:48)
2 ← encPK (p(cid:48)
1, C(cid:48)
1, C(cid:48)
(d) Send encryptions to servers: Send (F (cid:48)
1), C(cid:48)
1);∗; (sid , qid(cid:48), C(cid:48)
2);∗; (sid , qid(cid:48), C(cid:48)
2, PK u) to S1
1; s(cid:48)
2; s(cid:48)
and (F (cid:48)
2, C(cid:48)
1, C(cid:48)
2, PK u) to S2.
531U(cid:48)
R1
R7
(F (cid:48)
(F (cid:48)
1, C(cid:48)
2, C(cid:48)
1, C(cid:48)
1, C(cid:48)
2, PK u)
2, PK u)
-
1, ˜C(cid:48)
2, sigSS 1
( ˜C(cid:48)


(sid , qid(cid:48), C(cid:48)
1, C(cid:48)
2, PK u, ˜C(cid:48)
1, ˜C(cid:48)
2))
S1
R2
R4
R6
π1, (pk , E1, sigSS 1

π3, π4, ˜C(cid:48)
1

(sid, qid(cid:48), C(cid:48)
1, C(cid:48)
π2, (E, sigSS 2
2, PK u, E1, pk ))
(sid, qid(cid:48), C(cid:48)
1, C(cid:48)
2, PK u, E))
S2
-
- R3
(sid, qid(cid:48), C(cid:48)
1, C(cid:48)
2, PK u, ˜C(cid:48)
-
π5, ˜C(cid:48)
1, ˜C(cid:48)
2))
2
R5
( ˜C(cid:48)
1, ˜C(cid:48)
2, sigSS 2
Figure 5: Communication messages of the Retrieve protocol with computation steps Ri. In this picture, zero-knowledge proofs are
assumed to be non-interactive and thus denoted simply as sending the value π; however, depending on their instantiation, they might
be interactive protocols.
Step R2: The ﬁrst server S1 proceeds as follows.
(a) Receive message from user, fail if account doesn’t exist: Parse
the message received from U(cid:48) as (Rtr, sid , qid(cid:48), 1, F (cid:48)
1, C(cid:48)
2,
PK u). If no entry st 1[sid ] exists in the state information then
fail, else recover st 1[sid ] = (PS 2, p1, K1, s1, ˜s1, C1, ˜C1, C2,
˜C2).
1, C(cid:48)
(b) Ask environment for permission to continue: Output (RNot,
sid , qid(cid:48)) to the environment and wait for an input (Perm, sid ,
qid(cid:48), a) with a ∈ {allow, deny}. If a = deny then fail.
(c) Decrypt share and randomness: Decrypt F (cid:48)
1 with label (sid ,
qid(cid:48), C(cid:48)
1, C(cid:48)
2, PK u), which will fail if the label is wrong.
(d) Verify correct encryption of share under CRS: Check that C(cid:48)
1 =
encPK (p(cid:48)
1; s(cid:48)
1).
(e) Generate key pair for homomorphic encryption scheme and en-
crypt shares’ quotient: Generate (pk , sk ) ← keyg(1k), choose
r1 ←R Zq, and compute E1 ← encpk (p1/p(cid:48)
1; r1).
(f) Send signed encrypted quotient to second server: Compute the
2, PK u, E1, pk ) and
(sid , qid(cid:48), C(cid:48)
1, C(cid:48)
signature σ(cid:48)
send (pk , E1, σ(cid:48)
1 ← sigSS 1
1) to S2.
(g) Prove to second server that E1 is correct: Perform the follow-
ing proof protocol with S2:
π1 := ZK{(p1, p
(cid:48)
1, s1, s
(cid:48)
1, r1) : E1 = encpk (p1/p
∧ C1 = encPK (p1; s1) ∧ C
(cid:48)
1 = encPK (p
1)} .
(cid:48)
(cid:48)
1; r1)
(cid:48)
1; s
Step R3: The second server S2 proceeds as follows.
(a) Receive message from user, fail if account doesn’t exist: Parse
the message received from U(cid:48) as (Rtr, sid , qid(cid:48), 1, F (cid:48)
1, C(cid:48)
2,
PK u). If no entry st 2[sid ] exists in the saved state then fail,
else recover st 2[sid ] = (PS 1, p2, K2, s2, ˜s2, C1, ˜C1, C2, ˜C2).
2, C(cid:48)
(b) Ask environment for permission to continue: Output (RNot,
sid , qid(cid:48)) to the environment and wait for an input (Perm, sid ,
qid(cid:48), a) with a ∈ {allow, deny}. If a = deny then fail.
(c) Receive message from ﬁrst server and check proof: Parse the
1). Further-
message from S1 as (Rtr, sid , qid(cid:48), 2, pk , E1, σ(cid:48)
more interact in the proof π1 with S1.
(d) Decrypt password share and randomness: Decrypt F (cid:48)
2 with la-
bel (sid , qid(cid:48), C(cid:48)
1, C(cid:48)
2, PK u) and fail if decryption fails.
(e) Verify share encryption under CRS and ﬁrst server’s signa-
2) and that verPS 1 ((sid ,
2 = encPK (p(cid:48)
ture: Check that C(cid:48)
qid(cid:48), C(cid:48)
1, C(cid:48)
2, PK u, E1, pk ), σ(cid:48)
2; s(cid:48)
1) = 1.
(f) Multiply encryption by quotient of own shares: Choose random
2; r2) and E ←
r2, z ←R Zq and compute E2 ← encpk (p2/p(cid:48)
(E1 × E2)z.
(g) Send signed encrypted quotient to ﬁrst server: Compute σ(cid:48)
2) to S1.
2, PK u, E) and send (E, σ(cid:48)
(sid , qid(cid:48), C(cid:48)
1, C(cid:48)
sigSS 2
2 ←
(h) Prove to ﬁrst server that E is correct: Perform with S1 the
proof protocol:
π2 := ZK{(p2, p
(cid:48)
2, s2, s
(cid:48)
2, r2, z) :
E = (E1 × encpk (p
(cid:48)
2/p2; r2))z
∧ C2 = encPK (p2; s2) ∧ C
(cid:48)
2 = encPK (p
(cid:48)
2; s
2)} .
(cid:48)
Step R4: The ﬁrst server S1 proceeds as follows.
(a) Receive message from second server and verify proof: Parse
the message from S2 as (E, σ(cid:48)
2) and interact with S2 in π2.
(b) Verify signature and check z (cid:54)= 0: Verify that verPS 2 ((sid ,
qid(cid:48), C(cid:48)
1, C(cid:48)
2, PK u, E), σ(cid:48)
2) = 1 and that E (cid:54)= encpk (1; 0).
(c) Learn whether password matches: Decrypt E using sk and
verify that it decrypts to 1.
(d) Inform and convince second server of result: Prove to S2 that
E indeed decrypts to 1 with the protocol:
π3 := ZK{(sk ) : 1 = decsk (E)}.
(e) Veriﬁably encrypt key share for the user: Compute ciphertext
1 to S2.
1 encrypts the same key share as ˜C1 from
1 ←R Zq and send ˜C(cid:48)
1 ← encPK u (K1; ˜s(cid:48)
˜C(cid:48)
Prove to S2 that ˜C(cid:48)
the setup phase:
1) with ˜s(cid:48)
1) : ˜C1 = encPK (K1; ˜s1) ∧
π4 := ZK{(K1, ˜s1, ˜s
(cid:48)
1)}.
(cid:48)
(cid:48)
1 = encPK u (K1; ˜s
˜C
Step R5: The second server S2 proceeds as follows.
(a) Receive message from ﬁrst server and verify proof: Parse the
1 and participate in proofs π3 and π4
message from S1 as ˜C(cid:48)
with S1.
532(b) Veriﬁably encrypt key share for the user: Compute ciphertext
2 to S1.
2 encrypts the same key share as ˜C2 from
2 ←R Zq and send ˜C(cid:48)
2 ← encPK u (K2; ˜s(cid:48)
˜C(cid:48)
Prove to S1 that ˜C(cid:48)
the setup phase:
2) with ˜s(cid:48)
π5 := ZK{(K2, ˜s2, ˜s
2) : ˜C2 = encPK (K2; ˜s2) ∧
(cid:48)
2)} .
(cid:48)
(cid:48)
2 = encPK u (K2; ˜s
(c) Send signed result to user and ﬁnish protocol: Compute τ(cid:48)
1, ˜C(cid:48)
1, ˜C(cid:48)
2, PK u, ˜C(cid:48)
sigSS 2
to U(cid:48). Output (Rtr, sid , qid(cid:48), succ).
2) and send ( ˜C(cid:48)
(sid , qid(cid:48), C(cid:48)
1, C(cid:48)
˜C
2 ←
2, ˜τ(cid:48)
2)
Step R6: The ﬁrst server S1 proceeds as follows.
(a) Receive message from second server and verify proofs: Parse
the message from S2 as ˜C(cid:48)
2 and interact with it in π5.
1, C(cid:48)
(sid , qid(cid:48), C(cid:48)
(b) Send signed result to user and ﬁnish protocol: Compute τ(cid:48)
1, ˜C(cid:48)
1, ˜C(cid:48)
2, PK u, ˜C(cid:48)
sigSS 1
to U(cid:48). Output (Rtr, sid , qid(cid:48), succ).
Step R7: The user U(cid:48) proceeds as follows.
(a) Receive messages from both servers: Parse the messages from
2) and send ( ˜C(cid:48)
1 ←
2, τ(cid:48)
1)
S1 and S2 as ( ˜C(cid:48)
1, ˜C(cid:48)
2, τ(cid:48)
1) and ( ˜C(cid:48)
1, ˜C(cid:48)
2, τ(cid:48)
2), respectively.
(b) Check that both servers agree and verify signatures: Check