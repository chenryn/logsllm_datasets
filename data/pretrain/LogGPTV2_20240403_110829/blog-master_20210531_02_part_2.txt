               Buffers: shared hit=7336    
 Planning:    
   Buffers: shared hit=2    
 Planning Time: 0.199 ms    
 Execution Time: 39.427 ms    
(16 rows)    
Time: 40.055 ms    
postgres=#  select *, ts_rank_cd(tsv , to_tsquery('abc & c'),32) from tsv where tsv @@ to_tsquery('abc & c') order by ts_rank_cd(tsv, to_tsquery('abc & c'),32) desc limit 10;     
   id   |                                                                                        tsv                                                                                        | ts_rank_cd     
--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------    
 386419 | 'abc':9,12 'abceadba':3 'b':8,16 'badeebdebbb':4 'bdd':20 'bea':2 'c':10,14 'cad':7 'cbedbbdeb':5 'ccdadcda':6 'd':1,15 'ddeceb':13 'deabdd':11 'e':18                            | 0.16666667    
 568798 | 'abc':12 'addb':14 'aecdcecdbcebdbceeebaebca':4 'c':11,13 'cceddac':10 'd':1,3 'dab':6 'dcaddeeb':7 'de':8 'ea':5 'eadbadeacb':15 'edbb':2 'eecddada':9                           | 0.16666667    
 246969 | 'aa':3 'aabbdaaea':15 'abc':6 'adaecaceec':8 'aea':9 'aebb':20 'beed':14 'c':4,5,7,17 'dbaa':18 'dbe':12 'dcdda':13 'dd':16 'ebadeec':10 'ebcce':1 'ebdbedc':19                   | 0.16666667    
 276756 | 'aba':13 'abc':8 'aeecdceedaacdec':16 'b':5,6 'babba':12 'beadbcdeeeecbbbde':15 'c':7,9 'cabaacadb':11 'cb':10 'dcaebdbabddd':1 'dedaadd':14 'e':2 'ebdb':4                       | 0.16666667    
 534425 | 'aa':7 'abc':19 'b':2 'baebdacbc':13 'c':9,18,20 'cabcdaaada':5 'cc':17 'cd':4 'ce':21 'd':12 'dcadccbcddc':15 'dcbcacec':11 'dea':1 'e':14 'ea':6 'eceeeadc':16 'edd':10 'ede':3 | 0.16666667    
 545684 | 'abc':11 'c':10,12 'caebdacdeabbccadec':3 'cbecc':2 'ccace':15 'cdb':13 'cddaccbacbcb':8 'cecadbbecda':5 'ddaab':6 'e':4,14 'eaeccedbdbc':1 'ebdeb':7                             | 0.16666667    
 137518 | 'abc':13 'accebbedeabbdaa':2 'c':4,9,12,14 'cba':7 'cc':16 'ce':10 'dbbeebbdbd':18 'dce':8 'ddaeab':17 'eabadc':3 'eac':1 'eacc':11 'ecabdcddbecaebb':15 'ed':5                   | 0.16666667    
 227131 | 'abc':2 'abeaacaeceaed':7 'b':12 'baae':13 'bddccbabcbbcaa':9 'c':1,3,11 'caeabd':8 'cbadea':5 'ccaacdeeabccabc':10 'dcac':6 'eadaebbcccac':4 'ed':14                             | 0.16666667    
 264722 | 'abc':4 'acaabbeacacdbcaec':10 'ad':1 'ada':2 'c':3,5,6 'cbbcbcadee':13 'd':14 'dbdc':8 'decaceaaa':7 'deec':11 'ebcdaecea':12 'ecc':16 'ecdbebbbca':9                            | 0.16666667    
 634783 | 'aaaba':11 'aba':10 'abbc':5 'abc':14 'ad':2 'adca':16 'bdbbb':6 'c':9,13,15 'cbacccadacbbdeda':1 'cbb':17 'd':4 'dcbd':3 'debdadd':12 'dedadeaeecacaceceebdd':8 'ea':7           | 0.16666667    
(10 rows)    
Time: 63.782 ms    
```    
2、RUM 索引, 不需要回表计算rank:      
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) select *,tsv  to_tsquery('abc & c') from tsv where tsv @@ to_tsquery('abc & c') order by tsv  to_tsquery('abc & c') limit 10;    
                                                               QUERY PLAN                                                                   
----------------------------------------------------------------------------------------------------------------------------------------    
 Limit  (cost=11.25..23.91 rows=10 width=215) (actual time=35.455..35.547 rows=10 loops=1)    
   Output: id, tsv, ((tsv  to_tsquery('abc & c'::text)))    
   Buffers: shared hit=1086    
   ->  Index Scan using idx_tsv_1 on public.tsv  (cost=11.25..8899.62 rows=7021 width=215) (actual time=35.453..35.526 rows=10 loops=1)    
         Output: id, tsv, (tsv  to_tsquery('abc & c'::text))    
         Index Cond: (tsv.tsv @@ to_tsquery('abc & c'::text))    
         Order By: (tsv.tsv  to_tsquery('abc & c'::text))    
         Buffers: shared hit=1086    
 Planning:    
   Buffers: shared hit=1    
 Planning Time: 0.187 ms    
 Execution Time: 36.395 ms    
(12 rows)    
Time: 37.025 ms    
postgres=#  select *,tsv  to_tsquery('abc & c') from tsv where tsv @@ to_tsquery('abc & c') order by tsv  to_tsquery('abc & c') limit 10;    
   id    |                                                                                        tsv                                                                                        | ?column?     
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------    
  534425 | 'aa':7 'abc':19 'b':2 'baebdacbc':13 'c':9,18,20 'cabcdaaada':5 'cc':17 'cd':4 'ce':21 'd':12 'dcadccbcddc':15 'dcbcacec':11 'dea':1 'e':14 'ea':6 'eceeeadc':16 'edd':10 'ede':3 | 4.112335    
 1082907 | 'abc':9 'aeac':12 'bac':5 'baddaecd':6 'bc':7 'c':4,8,10 'd':3 'dadebcd':2 'dbebecabcaaeedaacdaaceebbbadeeeaad':11 'eaab':1 'ebaaebdaaaedc':13 'ed':14                            | 4.112335    
  264722 | 'abc':4 'acaabbeacacdbcaec':10 'ad':1 'ada':2 'c':3,5,6 'cbbcbcadee':13 'd':14 'dbdc':8 'decaceaaa':7 'deec':11 'ebcdaecea':12 'ecc':16 'ecdbebbbca':9                            | 4.112335    
  568798 | 'abc':12 'addb':14 'aecdcecdbcebdbceeebaebca':4 'c':11,13 'cceddac':10 'd':1,3 'dab':6 'dcaddeeb':7 'de':8 'ea':5 'eadbadeacb':15 'edbb':2 'eecddada':9                           | 4.112335    
  545684 | 'abc':11 'c':10,12 'caebdacdeabbccadec':3 'cbecc':2 'ccace':15 'cdb':13 'cddaccbacbcb':8 'cecadbbecda':5 'ddaab':6 'e':4,14 'eaeccedbdbc':1 'ebdeb':7                             | 4.112335    
  634783 | 'aaaba':11 'aba':10 'abbc':5 'abc':14 'ad':2 'adca':16 'bdbbb':6 'c':9,13,15 'cbacccadacbbdeda':1 'cbb':17 'd':4 'dcbd':3 'debdadd':12 'dedadeaeecacaceceebdd':8 'ea':7           | 4.112335    
  743324 | 'abc':14 'aeaddecbbd':12 'c':13,15,21 'ca':19 'ccca':1 'cdbbebdb':17 'cdc':2 'cdeeea':11 'd':4 'dadb':7 'db':8 'dbbcb':10 'dcdbeab':5 'ece':3 'ed':18 'eedcddddb':9               | 4.112335    
  905287 | 'abc':15 'ad':12 'b':10 'babebaca':17 'bbeebbedaacc':18 'bccdbc':1 'bcebb':9 'c':14,16 'cebaaaea':2 'd':13 'dc':7,11 'dca':4 'ddaebdddbc':8 'ddddebdbd':5 'e':6 'ebddb':3         | 4.112335    
  826801 | 'abc':4 'accbbe':11 'aebeedcebdcb':7 'b':1,9 'ba':13 'bbae':14 'bc':16 'bcecdeceeebad':17 'c':3,5 'cbcbbdeb':6 'd':15 'dcadbebce':12 'ebeceaabad':8 'ed':10 'ee':2                | 4.112335    
  246969 | 'aa':3 'aabbdaaea':15 'abc':6 'adaecaceec':8 'aea':9 'aebb':20 'beed':14 'c':4,5,7,17 'dbaa':18 'dbe':12 'dcdda':13 'dd':16 'ebadeec':10 'ebcce':1 'ebdbedc':19                   | 4.112335    
(10 rows)    
Time: 38.362 ms    
```    
## 例子2: RUM addon 其他字段信息到posting tree     
### rum_TYPE_ops    
For types: int2, int4, int8, float4, float8, money, oid, time, timetz, date,    
interval, macaddr, inet, cidr, text, varchar, char, bytea, bit, varbit,    
numeric, timestamp, timestamptz    
Supported operations: `=`, `>` for all types and    
``, `` for int2, int4, int8, float4, float8, money, oid,    
timestamp and timestamptz types.    
Supports ordering by ``, `` operators. Can be used with    
`rum_tsvector_addon_ops`, `rum_tsvector_hash_addon_ops' and `rum_anyarray_addon_ops` operator classes.    
### rum_tsvector_addon_ops    
For type: `tsvector`    
This operator class stores `tsvector` lexems with any supported by module    
field. There is the example.    
Let us assume we have the table:    
```sql    
CREATE TABLE tsts (id int, t tsvector, d timestamp);    
\copy tsts from 'rum/data/tsts.data'    
CREATE INDEX tsts_idx ON tsts USING rum (t rum_tsvector_addon_ops, d)    
    WITH (attach = 'd', to = 't');    
```    
Now we can execute the following queries:    
```sql    
EXPLAIN (costs off)    
    SELECT id, d, d  '2016-05-16 14:21:25' FROM tsts WHERE t @@ 'wr&qh' ORDER BY d  '2016-05-16 14:21:25' LIMIT 5;    
                                    QUERY PLAN    
-----------------------------------------------------------------------------------    
 Limit    
   ->  Index Scan using tsts_idx on tsts    
         Index Cond: (t @@ '''wr'' & ''qh'''::tsquery)    
         Order By: (d  'Mon May 16 14:21:25 2016'::timestamp without time zone)    
(4 rows)    
SELECT id, d, d  '2016-05-16 14:21:25' FROM tsts WHERE t @@ 'wr&qh' ORDER BY d  '2016-05-16 14:21:25' LIMIT 5;    
 id  |                d                |   ?column?    
-----+---------------------------------+---------------    
 355 | Mon May 16 14:21:22.326724 2016 |      2.673276    
 354 | Mon May 16 13:21:22.326724 2016 |   3602.673276    
 371 | Tue May 17 06:21:22.326724 2016 |  57597.326724    
 406 | Wed May 18 17:21:22.326724 2016 | 183597.326724    
 415 | Thu May 19 02:21:22.326724 2016 | 215997.326724    
(5 rows)    
```    
> **Warning:** Currently RUM has bogus behaviour when one creates an index using ordering over pass-by-reference additional information. This is due to the fact that posting trees have fixed length right bound and fixed length non-leaf posting items. It isn't allowed to create such indexes.    
### rum_tsvector_hash_addon_ops    
For type: `tsvector`    
This operator class stores hash of `tsvector` lexems with any supported by module    
field.    
**Doesn't** support prefix search.    
### rum_anyarray_addon_ops    
For type: `anyarray`    
This operator class stores `anyarrray` elements with any supported by module field.    
### rum_anyarray_addon_ops 的例子    
```    
postgres=# create extension rum;    
CREATE EXTENSION    
create table tbl (    
id serial8 primary key,    
a int[],    
n int,    
crt_time timestamp    
);    
create index idx_tbl_1 on tbl using rum (a rum_anyarray_addon_ops, n) with (attach='n', to='a');    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from tbl where a @> array[1,2,3] and n  '{1,2,3}'::integer[]) AND (tbl.n <= 1))    
   Buffers: shared hit=1768    
 Planning:    
   Buffers: shared hit=1    
 Planning Time: 0.092 ms    
 Execution Time: 130.735 ms    
(8 rows)    
```    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")