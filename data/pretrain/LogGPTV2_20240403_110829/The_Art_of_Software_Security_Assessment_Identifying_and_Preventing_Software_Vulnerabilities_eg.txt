   clen = atoi(content_length); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
953 
   data = (char *)malloc(clen + 1); 
   if(!data) 
       return NULL; 
   tcp_read_data(s, data, clen); 
   data[clen] = '\0'; 
   return data; 
} 
The Content-Length value is converted from a string to an integer and then used to 
allocate a block of data. Because the conversion is unchecked, a client could supply 
the maximum representable integer. When it's added to in the argument to malloc(), 
an integer overflow occurs and a small allocation takes place. The following call to 
tcp_read_data() then allows data read from the network to overwrite parts of the 
process heap. Also, note that the line in the code that NUL-terminates the 
user-supplied buffer writes a NUL byte out of bounds (because clen is 0xFFFFFFFF, 
which is equivalent to data[-1]one byte before the beginning of the buffer). 
The second issue in dealing with Content-Length header interpretation involves 
handling signed Content-Length values. If the length value is interpreted as a 
negative number, size calculation errors likely occur, with memory corruption being 
the end result. Consider the following code (originally from AOLServer): 
typedef struct Request { 
    ... other members ... 
    char *next;    /* Next read offset. */ 
    char *content;    /* Start of content. */ 
    int  length;    /* Length of content. */ 
    int  avail;    /* Bytes avail in buffer. */ 
    int  leadblanks;    /* # of leading blank lines read */ 
    ... other members ... 
} Request; 
static int 
SockRead(Sock *sockPtr) 
{ 
    Ns_Sock *sock = (Ns_Sock *) sockPtr; 
    struct iovec buf; 
    Request *reqPtr; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
954 
    Tcl_DString *bufPtr; 
    char *s, *e, save; 
    int  cnt, len, nread, n; 
    ... 
    s = Ns_SetIGet(reqPtr->headers, "content-length"); 
    if (s != NULL) { 
        reqPtr->length = atoi(s); 
    ... 
       if (reqPtr->length length > 
          sockPtr->drvPtr->servPtr->limits.maxpost) { 
          return SOCK_ERROR; 
       } 
    ... 
    if (reqPtr->coff > 0 && reqPtr->length avail) { 
        reqPtr->content = bufPtr->string + reqPtr->coff; 
        reqPtr->next = reqPtr->content; 
        reqPtr->avail = reqPtr->length; 
        /* 
         * Ensure that there are no "bonus" crlf chars left 
         * visible in the buffer beyond the specified 
         * content-length. This happens from some browsers 
         * on POST requests. 
         */ 
        if (reqPtr->length > 0) { 
            reqPtr->content[reqPtr->length] = '\0'; 
        } 
        return (reqPtr->request ? SOCK_READY : SOCK_ERROR); 
    } 
This code is quite strange. After retrieving a Content-Length specified by users, it 
explicitly checks for values less than 0. If Content-Length is less than 0 and greater 
than maxpost (also a signed integer, which is initialized to a default value of 256KB), 
an error is signaled. A negative Content-Length triggers the first condition but not the 
second, so this error doesn't occur for negative values supplied to Content-Length. 
(Most likely, the developers meant to use || in the if statement rather than &&.) As a 
result, reqPtr->avail (meant to indicate how much data is available in 
reqPtr->content) is set to a negative integer of the attacker's choosing, and is then 
used at various points throughout the program. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
955 
Data can also be posted to HTTP servers via chunked encoding. With this method, 
input is supplied by a series of delineated chunks and then combined when all chunks 
have been received to form the original data contents. Instead of specifying a content 
size with the Content-Length header, the Transfer-Encoding header is used, and it 
takes the value "chunked." It also has a boundary pattern to delineate the supplied 
chunks. The header looks something like this: 
Transfer-Encoding: chunked; boundary= 
A chunk is composed of a size (expressed in hexadecimal), a newline (carriage 
return/line feed [CRLF] combination), the chunk data (which is the length specified by 
the size), and finally a trailing newline (CRLF combination). Here's an example: 
8 
AAAAAAAA 
10 
AAAAAAAABBBBBBBB 
0 
The example shows two data chunks of lengths 8 and 16. (Remember, the size is in 
hexadecimal, so "10" is used rather than the decimal "16.") A 0-length chunk 
indicates that no more chunks follow, and the data transfer is complete. As you might 
have guessed, remote attackers specifying arbitrary sizes has been a major problem 
in the past; careful sanitation of specified sizes is required to avoid integer overflows 
or sign-comparison vulnerabilities. These vulnerabilities are much like the errors that 
can happen when processing a Content-Length value that hasn't been validated 
adequately, although processing chunk-encoded data poses additional dangers. In 
the Content-Length integer overflows, an allocation wrapper performing some sort of 
rounding was necessary for a vulnerability to exist; otherwise, no integer wrap would 
occur. With chunked encoding, however, data in one chunk is added to the previous 
chunk data already received. By supplying multiple chunks, attackers might be able 
to trigger an integer overflow even if no allocation wrappers or rounding is used, as 
shown in this example: 
char *read_chunks(int sock, size_t *length) 
{ 
    size_t total = 0; 
    char *data = NULL; 
    *length = 0; 
    for(;;){ 
        char chunkline[MAX_LINE]; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
956 
        int n; 
        size_t chunksize; 
        n = read_line(sock, chunkline, sizeof(chunkline)-1); 
        if(n  ISAKMP_MAXPACKET) 
        return 1; 
    if((packet = (unsigned char *)mymalloc(length  
                  sizeof(struct isakmp_hdr))) == NULL) 
        return 1; 
    ... process data ... 
} 
In this example, there's a sanity check for unusually large length values, so an integer 
overflow couldn't be triggered as in the previous example. However, length is 
assumed to be larger than or equal to sizeof(struct isakmp_hdr), but no explicit 
check is ever made. Therefore, a length value less than sizeof(struct isakmp_hdr) 
causes the argument to mymalloc() to underflow, resulting in a very large integer. If 
this argument is passed to directly to malloc(), this large allocation might just fail. 
However, because the mymalloc() function rounds up its size parameter, it can be 
made to wrap over the integer boundary again. This causes a small allocation that's 
probably followed by another read() operation with a large size argument. 
Payloads 
As mentioned, the remainder of an ISAKMP packet is composed of a varying number 
of payloads. All payloads have the same basic structure, although the data fields in 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
961 
the payload are interpreted differently, depending on their type. The payload 
structure is shown in Figure 16-2. 
Figure 16-2. ISAKMP payload header structure 
Next payload (8 bits) This field identifies the type of the next payload in the 
packet. If there's no payload following this one, the next payload type is set to 
none (0). 
Reserved (8 bits) Not yet used. 
Length (16 bits) This field specifies the length of the payload (including the 
four header bytes). 
Data This field represents the payload data. Its meaning depends on the 
payload type. 
The length field is, of course, significant when processing payloads. The issues in 
dealing with this length value are similar to those you might encounter when dealing 
with the ISAKMP header length, but you need to consider some unique factors. First, 
the length field in the payload header is 16 bits, not 32 bits. This means less chance 
of an integer overflow condition occurring unless 16-bit variables are used in the code. 
Even then, the chances of an integer overflow are reduced. To see how this works, 
look at the following code: 
#define ROUNDUP(x) ((x + 7) & 0xFFFFFFF8) 
struct _payload { 
    unsigned char type; 
    unsigned short length; 
    unsigned char *data; 
}; 
void *mymalloc(unsigned short length) 
{ 
    length = ROUNDUP(length); 
    return malloc(length); 
} 
struct payload *payload_read(char *srcptr, size_t srcsize, 
       unsigned char type, unsigned char *nexttype) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
962 
{ 
    struct _payload *payload; 
    if(srcsize < 4) 