title:Erlay: Efficient Transaction Relay for Bitcoin
author:Gleb Naumenko and
Gregory Maxwell and
Pieter Wuille and
Alexandra Fedorova and
Ivan Beschastnikh
Erlay: Efficient Transaction Relay for Bitcoin
Gleb Naumenko
PI:EMAIL
University of British Columbia
Gregory Maxwell
PI:EMAIL
Pieter Wuille
PI:EMAIL
Blockstream
Alexandra Fedorova
PI:EMAIL
University of British Columbia
ABSTRACT
Bitcoin is a top-ranked cryptocurrency that has experienced huge
growth and survived numerous attacks. The protocols making up
Bitcoin must therefore accommodate the growth of the network
and ensure security.
Security of the Bitcoin network depends on connectivity be-
tween the nodes. Higher connectivity yields better security. In this
paper we make two observations: (1) current connectivity in the
Bitcoin network is too low for optimal security; (2) at the same
time, increasing connectivity will substantially increase the band-
width used by the transaction dissemination protocol, making it
prohibitively expensive to operate a Bitcoin node. Half of the total
bandwidth needed to operate a Bitcoin node is currently used to
just announce transactions. Unlike block relay, transaction dissemi-
nation has received little attention in prior work.
We propose a new transaction dissemination protocol, Erlay,
that not only reduces the bandwidth consumption by 40% assum-
ing current connectivity, but also keeps the bandwidth use almost
constant as the connectivity increases. In contrast, the existing
protocol increases the bandwidth consumption linearly with the
number of connections. By allowing more connections at a small
cost, Erlay improves the security of the Bitcoin network. And, as we
demonstrate, Erlay also hardens the network against attacks that
attempt to learn the origin node of a transaction. Erlay is currently
being investigated by the Bitcoin community for future use with
the Bitcoin protocol.
CCS CONCEPTS
• Networks → Peer-to-peer protocols; Network simulations; •
Security and privacy → Distributed systems security; Pseudonymity,
anonymity and untraceability; Privacy-preserving protocols; Denial-
of-service attacks.
KEYWORDS
peer-to-peer, gossip, bandwidth, distributed systems
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354237
Ivan Beschastnikh
PI:EMAIL
University of British Columbia
ACM Reference Format:
Gleb Naumenko, Gregory Maxwell, Pieter Wuille, Alexandra Fedorova,
and Ivan Beschastnikh. 2019. Erlay: Efficient Transaction Relay for Bitcoin.
In 2019 ACM SIGSAC Conference on Computer& Communications Security
(CCS ’19), November 11–15, 2019, London, United Kingdom. ACM, New York,
NY, USA, 15 pages. https://doi.org/10.1145/3319535.3354237
1 INTRODUCTION
Bitcoin is a peer-to-peer (P2P) electronic cash system [52]. Recent
estimates indicate that there are over 60,000 nodes in the Bitcoin
network 1(as of March 2019). To keep up with the growth in the
number of nodes and usage of the network, the system must be
continually optimized while retaining the security guarantees that
its users have come to expect.
Security of the Bitcoin network depends on adequate network
connectivity. Bitcoin literature has repeatedly recommended in-
creasing the number of connections between nodes to make the
network more robust [11, 20]. As we explain in Section 3, certain
attacks become less successful if the network is highly connected.
Unfortunately, increasing the connectivity of the Bitcoin network
linearly increases the bandwidth consumption of transaction relay—
the protocol that currently takes up half of the total bandwidth
required to operate a Bitcoin node. Today, transaction relay alone
consumes as much as 18GB per node per month. If the connectivity
were increased from the currently used eight outbound connections
to 24, the per-node bandwidth used to relay transactions would
exceed 50GB/month. This would make it prohibitively expensive
for some users to operate a Bitcoin node.
While many Internet providers in North America offer practically
unlimited bandwidth, some do impose caps. For example, at the time
of this writing, Suddenlink and Mediacom in the US offer plans with
200-350GB data usage caps [60]. In Western Canada, Shaw Cable
and Telus, the only home Internet providers available, cap data
usage at 150GB and 300GB respectively for their CAD$80/month
plans [4, 5]. With these caps, operating a private Bitcoin node
may require upgrading to a more expensive plan. The situation is
worse in places like South Africa [37] and Asia, where Bitcoin is
gaining popularity. In these regions Internet access is capped at 5-30
GB/month (except at night) [3, 6]. While operating a private node
is expensive for these users, the cost of operating a public node, at
350GB/month, is prohibitive. If the number of private nodes in the
network doubles, the cost for a public node jumps to 700GB/month
only for relaying transactions.
Despite this inefficiency, transaction relay has not received much
attention in the literature, in contrast to block relay [2, 17, 56].
1https://luke.dashjr.org/programs/bitcoin/files/charts/software.html
Figure 1: Lifecycle of a Bitcoin transaction. In this paper
we optimize the protocols for relaying transactions between
nodes in the Bitcoin network (grey box).
The overarching reason why the Bitcoin transaction relay proto-
col is inefficient is that it relies on flooding. A Bitcoin transaction
corresponds to a transfer of funds between several accounts. Fig. 1
overviews the lifecycle of a transaction in the Bitcoin network. To
be accepted by the network of nodes, a transaction must be first
disseminated, or relayed, throughout the network. Then it must
be validated and included in a block with other valid transactions.
Finally, the block containing the transaction must be relayed to all
the nodes. Every Bitcoin transaction must reach almost all nodes in
the network, and prior work has demonstrated that full coverage
of the network is important for security [63].
Today, Bitcoin disseminates transactions by ensuring that every
message received by a node is transmitted to all of its neighbors.
This flooding has high fault-tolerance since no single point of fail-
ure will halt relay, and it has low latency since nodes learn about
transactions as fast as possible [43].
However, flooding has poor bandwidth efficiency: every node in
the network learns about the transaction multiple times. Our empir-
ical measurements demonstrate that transaction announcements
account for 30–50% of the overall Bitcoin traffic. This inefficiency is
an important scalability limitation: the inefficiency increases as the
network becomes more connected, while the connectivity of the
network is desirable to the growth and the security of the network.
Prior work has explored two principal approaches to address
this inefficient use of bandwidth. The first is the use of short trans-
action identifiers (to decrease message size) [39]. The second is
to exclusively use blocks and never transmit individual transac-
tions [45]. Both approaches are inadequate: short identifiers only
reduce the constant factor and do not scale with the connectivity of
the network, while using only blocks creates spikes in block relay
and transaction validation. We discuss these approaches further in
Section 13.
The contribution of this paper is Erlay, a new protocol that we
designed to optimize Bitcoin’s transaction relay while maintaining
the existing security guarantees. The main idea behind Erlay is to
reduce the amount of information propagated via flooding and
instead use an efficient set reconciliation method [50] for most of
the transaction dissemination. In addition, we designed the Erlay
protocol to withstand DoS, timing, and other attacks.
We implemented Erlay in a simulator and as part of the mainline
Bitcoin node software, and evaluated Erlay at scale. Our results
show that Erlay makes announcement-related bandwidth negligible
while keeping latency to a small fraction of the inter-block interval.
In summary, this paper makes the following contributions:
Figure 2: Private and public nodes in the Bitcoin network.
• We analyze bandwidth inefficiency of Bitcoin’s transaction
relay protocol. We do this by running a node connected to
the Bitcoin network as well as by simulating the Bitcoin
network. Our results demonstrate that 88% of the bandwidth
used to announce transactions (and around 44% of the overall
bandwidth) is redundant.
• We propose a bandwidth-efficient transaction relay protocol
for Bitcoin called Erlay, which is a combination of fast low-
fanout flooding and efficient set reconciliation, designed to
work under the assumptions of the Bitcoin network.
• We demonstrate that Erlay achieves a close to optimal com-
bination of resource consumption and propagation delay,
and is robust to attacks. Erlay reduces the bandwidth used
to announce transactions by 84% immediately and allows
the Bitcoin network to achieve higher connectivity in the
future for better security.
We also discuss how Erlay may be applied to cryptocurrencies
with higher transaction rate in Appendix A.
Next, we review the background for our work.
2 BITCOIN BACKGROUND
For the purpose of connectivity graph and propagation analysis,
there are 2 types of nodes in the Bitcoin network: private nodes
that do not accept inbound connections and public nodes that
do accept inbound connections (see Fig. 2). Public nodes act as a
backbone of the network: they help new nodes bootstrap onto the
network. Once they have joined the network, public and private
nodes are indistinguishable in their operation: both node types per-
form transaction and block validation, and relay valid transactions
and blocks to their peers.
The current version of the Bitcoin transaction relay protocol
propagates messages among nodes using diffusion [1], which is a
variation on random flooding. Flooding is a protocol where each
node announces every transaction it receives to each of its peers.
Announcements can be sent on either inbound and outbound links.
With diffusion, a peer injects a random delay before announcing a
received transaction to its peers. This mitigates timing attacks [54]
and significantly reduces the probability of in-flight collisions (when
two nodes simultaneously announce the same transaction over the
link between them).
n more blocks mined that follow block Btx createdand signedtx relayedto other nodestx validatedby other nodestx includedin a mined block Bblock B relayedand validatedtx conﬁrmed…Private nodes [Max inbound: 0, Max outbound: 8]…Public nodes [Max inbound: 125, Max outbound: 8]Next, let us consider how many times an announcement is sent
with BTCFlood. By definition, each node relays an announcement
on each of the links except the one where that announcement orig-
inally arrived. In other words, each link sees each announcement
once, if no two nodes ever send the same announcement to each
other simultaneously, and more than once if they do. Therefore, in
BTCFlood each announcement is sent at least as many times as the
number of links.
If N is the number of nodes in the Bitcoin network, the num-
ber of links is 8N , because each node must make eight outbound
connections. Therefore, the number of redundant announcements
is at least 8N − N = 7N . Each announcement takes 32 bytes out
of 300 total bytes needed to relay a single transaction to one node.
(These 300 bytes include the announcement, the response, and the
full transaction body). Therefore, if at least seven out of eight an-
nouncements are redundant (corresponding to 224 bytes), at least
43% of all announcement traffic is wasteful.
We validated this analysis experimentally. We configured a pub-
lic Bitcoin node with eight outbound connections and ran it for
one week. During this time, our node also received four inbound
connections. We measured the bandwidth dedicated to transac-
tion announcements and other transaction dissemination traffic.
A received announcement was considered redundant if it corre-
sponded to an already known transaction. A sent announcement
was considered redundant if it was not followed by a transaction
request. According to our measurements (taken at multiple nodes
at different locations) 10% of the traffic corresponding to received
announcements and 95% of the traffic corresponding to the sent
announcements were redundant. Overall, 55% of all traffic used by
our node was redundant.
Higher connectivity requires more bandwidth. Given that the
amount of redundant traffic is proportional to the number of links,
increasing the connectivity of the network (the number of out-
bound links per node) linearly increases bandwidth consumption
in BTCFlood.
We modeled how the bandwidth consumption of disseminating
one transaction across the network of 60K nodes increases with
connectivity. Fig. 4 (whose results we confirmed via simulation)
shows that announcement traffic turns dominant as the network be-
comes more connected. With eight connections per node, a private
node may consume 9GB of bandwidth per month just for announc-
ing transactions. Setting connectivity to 24 in Bitcoin today would
cause transaction relay to consume over 15GB/month.
Higher connectivity offers more security. In P2P networks,
higher connectivity improves network security. This was demon-
strated by both traditional P2P research [8, 9] and Bitcoin-specific
prior work [11, 20, 36, 44, 55].
Certain attacks become less successful if the network is highly
connected [35, 44, 54]. The eclipse attack paper [36] has shown that
fewer than 13 connections would be detrimental to the security
of the network. A recently discovered vulnerability [22] relies on
InvBlock [49]. InvBlock is a technique that prevents a transaction
from being propagated by first announcing it to a node, but then
withholding the transaction contents for two minutes. With higher
connectivity, this attack is easier to mitigate.
Figure 3: Transaction exchange between two peers.
The protocol by which a transaction propagates between two
peers is illustrated in Fig. 3. When a Bitcoin node receives a trans-
action (peer 1 in Fig. 3), it advertises the transaction to all of its
peers except for the node that sent the transaction in the first place
and other nodes from which it already received an advertisement.
To advertise a transaction, a node sends a hash of the transaction
within an inventory, or INV message. If a node (peer 2 in Fig. 3)
hears about a transaction for the first time, it will request the full
transaction by sending a GETDATA message to the node that sent
it the INV message.
We refer to the transaction-advertising portion of the protocol
(all the INV messages) as BTCFlood. Since it relies on flooding, most
transactions are advertised through each link in the network in one
direction (except those that are advertised during the block relay
phase). As a result, a node with n connections will send and receive
between n and 2n INV messages for a single transaction (two nodes
may announce the same transaction simultaneously to each other).
Both public and private nodes limit the number of inbound and
outbound connections (Fig. 2). By default a private node has no
inbound connections and up to 8 outbound connections, while a
public node can have 8 outbound connections as well as up to
125 inbound connections (but the inbound connection limit can be
configured up to around 1,000). Thus, as the number of private nodes
in the Bitcoin network grows, the bandwidth and computational
requirements to run a public node quickly increase. This is because
private nodes connect to multiple public nodes to ensure that they
are connected to the network through more than a single peer.
As a result, Bitcoin designers have focused on (1) making the
running of a public node more accessible, in terms of required