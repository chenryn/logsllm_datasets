[32] A. Muffet, “Facebook: Password hashing & authentication,” Presentation
at Real World Crypto, 2015.
[33] R. Munroe, “Password strength,” https://xkcd.com/936/, accessed: 2015-
11-13.
[34] G. L. Nemhauser, L. A. Wolsey, and M. L. Fisher, “An analysis of ap-
proximations for maximizing submodular set functionsi,” Mathematical
Programming, vol. 14, no. 1, pp. 265–294, 1978.
[35] R. Ostrovsky and Y. Rabani, “Low distortion embeddings for edit
distance,” Journal of the ACM (JACM), vol. 54, no. 5, p. 23, 2007.
[36] C. Percival and S. Josefsson, “The scrypt password-based key derivation
function,” 2015.
[37] R. Shay, P. G. Kelley, S. Komanduri, M. L. Mazurek, B. Ur, T. Vidas,
L. Bauer, N. Christin, and L. F. Cranor, “Correct horse battery staple:
Exploring the usability of system-assigned passphrases,” in Proceedings
of the Eighth Symposium on Usable Privacy and Security. ACM, 2012,
p. 7.
[38] R. Shay, S. Komanduri, A. L. Durity, P. S. Huh, M. L. Mazurek,
S. M. Segreti, B. Ur, L. Bauer, N. Christin, and L. F. Cranor, “Can
long passwords be secure and usable?” in Proceedings of the SIGCHI
Conference on Human Factors in Computing Systems. ACM, 2014,
pp. 2927–2936.
[39] M. Siegler, “One of the 32 million with a RockYou account? you may
want to change all your passwords. like now.” TechCrunch, 14 Dec.
2009.
[40] T. F. Smith and M. S. Waterman, “Identiﬁcation of common molecular
subsequences,” Journal of Molecular Biology, vol. 147, no. 1, pp. 195–
197, 1981.
[41] B. Ur, P. G. Kelley, S. Komanduri, J. Lee, M. Maass, M. L. Mazurek,
T. Passaro, R. Shay, T. Vidas, L. Bauer et al., “How does your password
measure up? the effect of strength meters on password creation.” in
USENIX Security Symposium, 2012, pp. 65–80.
[42] B. Ur, F. Noma, J. Bees, S. M. Segreti, R. Shay, L. Bauer, N. Christin,
and L. F. Cranor, ““I added ‘!’ at the end to make it secure”: Observing
814814
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
password creation in the lab,” in Eleventh Symposium On Usable Privacy
and Security (SOUPS 2015), 2015, pp. 123–140.
[43] M. Weir, S. Aggarwal, B. de Medeiros, and B. Glodek, “Password
cracking using probabilistic context-free grammars,” in IEEE Symposium
on Security and Privacy (SP), 2009, pp. 162–175.
[44] D. Wheeler, “zxcvbn: Realistic password strength estimation,” Drop-
box Tech Blog, Apr. 2012, https://blogs.dropbox.com/tech/2012/04/
zxcvbn-realistic-password-strength-estimation/.
[45] Y. Zhang, F. Monrose, and M. K. Reiter, “The security of
modern password expiration: an algorithmic framework and empirical
analysis,” in ACM Conference on Computer and Communications
Security (ACM CCS), 2010, pp. 176–186.
[Online]. Available:
http://doi.acm.org/10.1145/1866307.1866328
A. Secure Sketches
APPENDIX
O
(cid:3)
(cid:2)√
log(n log F ) log log(n log F )
Secure sketches and fuzzy extractors, explored by Dodis
et al. [16], [17], are designed to generate consistent, cryp-
tographically strong keys from noisy secrets, such as bio-
metric data. They may also be applied to passwords, as
typographical errors in passwords can be modeled as noise.
Dodis et al. proposed two ways to construct secure sketches
for the edit-distance metric space; see Section 7 of [17]. They
show how to use a low-distortion embedding for the edit-
distance metric given by Ostrovsky and Rabani [35], and
also describe a relaxed embedding for the edit-distance metric
using c-shingles. The security losses for these constructions,
as given in Proposition 7.2 and Theorem 7.5 of [17], are
c (cid:17) log(n − c +
t(log F )2
1) − (2c − 1)t(cid:16)log(F c + 1)(cid:17) respectively. Here, n is the size
of the password, F is the alphabet size, t is the number
of errors/edits tolerated, and c is a construction parameter
denoting the size of the shingles. In our setting, typical values
would be n = 8, t = 1, and F = 96. The value of c, according
to Theorem 7.4, should be 1 in our setting (and the loss
is an increasing function in c). Given these parameters, the
entropy loss of the two secure sketches would be ≈ 91 bits
and ≈ 31 bits respectively. The min-entropy of real world
password distributions is only about ≤ 8 bits [10]. Thus known
constructions provide no security guarantees in our context,
and providing proven constructions that do would seem to
require new techniques.
B. Sanitizing Caps-Lock Errors
and (cid:16) n
As mentioned in the paper body, preliminary analysis of
the data revealed that a large fraction of errors was caused by
accidental pressing of the caps-lock key. Measuring the rate of
caps-lock errors is more challenging than for other typos, for
two reasons. First, caps-lock key presses are not recordable via
keystroke logging, and thus not directly detectable remotely.
Second, if the user engages the caps-lock key while typing one
password, there’s a chance that it will remain on (erroneously)
while the next one is entered. In MTurk, if an individual
worker is to be permitted to enter more than one password—
even across multiple HITs—propagation of caps-lock typos
across passwords is therefore methodologically unavoidable.
This second issue accounts for the (artiﬁcially) high rate of
caps-lock typos observed in our experiments. We found that
76 HITs contributed to 1120 caps-lock errors.
To adjust for the effect of such propagation errors in
determining the rate of caps-lock typos, we do the following.
We deﬁne a caps-lock error as an incorrect password which,
when the cases of all the letters are inverted, becomes correct.
In sequentially processing the passwords in a HIT, we use a
variable CL-ERR ∈ {0, 1} to denote a heuristic determination
as to whether the caps lock is in an error state when the user
entered a password in a HIT. (An error state could either be
that caps lock is on and the user should have typed lower-
case letters, or caps lock is off and the user should have typed
upper case letters.) We initially let CL-ERR = 0. When we
detect a caps-lock error in a password, we record it and set
CL-ERR = 1. If it is already the case that CL-ERR = 1 when
we reach a password in a HIT, we discard the password. That
is, in such cases, we do not count it in our computation of
error rates for any typo. Additionally, for every password in
a HIT, we determine (heuristically) whether the caps lock has
been turned off during entry of the password. If the password
contains at least one letter and the password was submitted
correctly, then we set CL-ERR = 0.
In general, the intuition here is that we keep track heuris-
tically of whether the caps-lock key appears to be engaged
erroneously. If the entry of a password in a HIT has been
affected by the state of the erroneously engaged caps-lock
key, we treat it as “tainted,” and thus discard it from our
experiment. (We assume heuristically that caps-lock errors are
independent of other typos. The global effect of discarding
“tainted” passwords and not recording typos they contain in
addition to caps-lock errors is small in any case.)
C. Complexity and Typo Likelihood
Our MTurk experiments revealed a signiﬁcant initial ﬁnding
regarding the frequency of typos. Typo rates in our study
increased under the following three distinct metrics relating
to password complexity.
Lexical diversity in passwords: One might suspect that more
lexically diverse passwords—ones that include symbols, letters
with different cases, numbers or some combination thereof—
would be more prone to typos. We deﬁne four character
classes: upper case letters,
lower case letters, digits, and
symbols. Now, based on how many of the four classes of
characters are present within a password we can partition
passwords into four buckets. For example, passwords con-
taining characters from only one of the four classes are
binned as bucket 1, passwords containing exactly two different
classes of characters are bucket 2, etc. In our ﬁrst sample
of 100,000 passwords, there were very few lexically diverse
passwords. RockYou has  211
0.1
0.08
0.06
0.04
0.02
o
p
y
t
f
o
y
t
i
l
i
b
a
b
o
r
P
1
12–211
2–11
Popularity (RockYou frequency)
Fig. 9: Three experiments showing typo frequency relative to various partitions of passwords into buckets. Bucket size is
indicated on the left of each ﬁgure, and corresponding typo rates on the right. (Left) Passwords are partitioned into four
buckets based on diversity of character types. For each bucket we report the percentage of samples (blue bars) that fall in
that bucket and what fraction of those samples are mistyped (red line). (Middle) Passwords are categorized into buckets by
increasing order of length. (Right) Passwords are assigned to buckets by decreasing frequency (increasing unpopularity) in
RockYou. Bucket frequency ranges are selected so that each bucket has roughly an equal number of samples.
Password length: We divide passwords into ﬁve groups based
on their lengths, namely ≤ 5, 6–7, 8–9, 10–11, and ≥ 12. For
each class, we compute the percentage of samples that lie in
that class, along with the percentage of passwords in those
samples that were mistyped. In the middle graph of Figure 9
we show these numbers for each of the length groups. As one
might expect, typo likelihood grows with password length.
Password popularity: We sort the list of sampled passwords
for our MTurk experiment based on their frequency counts
in the RockYou leak. (Ties were broken alphabetically.) We
then split the passwords into four buckets, adjusting their
corresponding frequency ranges to ensure that buckets are of
roughly equal size. (Some unevenness was unavoidable, as
many passwords occur only once in the Rockyou leak.) For
each bucket, we present the number of mistyped passwords in
the right graph of Figure 9. We can see the clear trend that
passwords that are popular among RockYou users are more
likely to be typed correctly. For example, passwords used by
more than 211 users are 1.5 times more likely to mistyped
than those used by only one user.
Discussion: password typing complexity. As noted above,
lexical diversity, length, and popularity are related metrics.
Inspection of the passwords within the various buckets used
in the charts of Figure 9 reveals that there is signiﬁcant overlap
between them. As one example, 18% of the passwords with
lexical-diversity bucket 4 both have length ≥ 12 and are
unpopular (f = 1).
The three metrics together highlight different aspects of
the underlying and intuitive trend: some passwords are more
difﬁcult to type than others. It appears, moreover, that typos
are more likely to surface in harder-to-guess passwords. Con-
sequently, typo correction could help encourage users to adopt
stronger passwords by easing the use of such passwords. We
leave rigorous study of this hypothesis to future work, but note
that it offers further potential motivation for our work.
D. Typist Speed and Typo Rate
As an enhancement of our experimental results in Sec-
tion III, we report on two experiments that provide further
illumination of password features that lead to typos. These
experiments further emphasize our observation that typo rates
appear to increase with password complexity.
Typist and typo likelihood.
In our MTurk experiments,
we timestamped each character as it was typed during the
experiments. We sorted the workers based on their average
typing speed (characters-per-minute) and binned workers into
four quartiles. For each quartile, we consider the subset of
passwords that were typed by the typists whose speed falls in
that quartile, and we compute the fraction of passwords that
were mistyped in that subset. The data is reported in Figure 10.
We found that slow typists make more mistakes than faster
typists. It could be that faster typists are also more skilled and
so less likely to make mistakes.
Password entry time. We binned the passwords into four
quartiles based on the time required to type those passwords.
The fraction of typos in each of that quartile is reported in the
middle chart of Figure 11. Passwords that required more time
on average to type are more likely to be mistyped.
E. Computing λgreedy
q
We start by showing that computing the optimal q guesses
to make against a relaxed checker is NP-hard in general. Later,
we present an efﬁcient approximate algorithm for the problem.
Deﬁnition 1. Best-q-guess. Given a function B : S → PW∗
,
a password distribution p over PW ⊆ S, and a query budget
816816
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
s
s
a
l
c
h
c
a
e
n
i
s
e
l
p
m
a
s
f
o
%
50
40
30
20
10
0
109
0.1
0.09
0.08
o
p
y