这次存放的对象并非是一个虚表对象，这个对象是一个int
Array的维度对象，这样我们通过条件断点来跟踪两个对象的创建过程。我们重点关注两个对象创建的函数，一个是FlowItem::`vftable对应的虚表对象，另一个是引发崩溃的int
Array对象。这两个函数的返回值，也就是eax寄存器中存放的就是指向这两个创建对象的指针。
    MSHTML!Array::Create
    MSHTML!Array>::Create
通过对这两个对象进行跟踪，我们可以看见到对象的创建，以及后续引用对象，导致Type Confusion。
    //下条件断点，打印每一次int Array object创建的信息
    0:007:x86> bp 6912e1fb ".printf \"Something: 0x%08x,0x%08x\\n\",@eax,poi(eax);g;"
    //对象被不断创建
    0:007:x86> g
    Something: 0x088abc84,0x0098c788
    Something: 0x088abc84,0x09806790
    Something: 0x088abc84,0x097d9010
    Something: 0x088abc5c,0x097dafd8
    Something: 0x088abc84,0x097ce050
    Something: 0x088abc84,0x098026e0
    Something: 0x088abc84,0x098044c8
    Something: 0x088abc84,0x097ff540
    Something: 0x088abc5c,0x097d5058
    Something: 0x088abafc,0x097cab00
    Something: 0x088abafc,0x0980a690 //key!!
    Breakpoint 1 hit
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d31:
    6968fc82 e86df072ff      call    MSHTML!Layout::Patchable >::Readable (68dbecf4)
    0:007:x86> r//第一次命中时，是正常的FlowItem对象
    eax=0980aa80 ebx=0094d364 ecx=0094d364 edx=0094d364 esi=00000064 edi=69ad8080
    eip=6968fc82 esp=088abb28 ebp=088abb54 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d31:
    6968fc82 e86df072ff      call    MSHTML!Layout::Patchable >::Readable (68dbecf4)
    0:007:x86> g
    Breakpoint 1 hit
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d31:
    6968fc82 e86df072ff      call    MSHTML!Layout::Patchable >::Readable (68dbecf4)
    0:007:x86> r//第二次命中时，注意ecx寄存器的值，0x0980a690
    eax=0980a570 ebx=0980a690 ecx=0980a690 edx=00000000 esi=00000064 edi=69adc680
    eip=6968fc82 esp=088abb28 ebp=088abb54 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d31:
    6968fc82 e86df072ff      call    MSHTML!Layout::Patchable >::Readable (68dbecf4)
果然第二次命中的时候，是一个int Array Object。因此，这个漏洞就是由于Layout::Patchable
>::Readable函数是处理虚表对象的函数，但是由于boom()函数中引用th1.align导致Readable函数第二次引用，由于没有对对象属性进行检查，导致第二次会将table对象传入。
这就是一个典型的Type Confusion。
而Readable会将这个对象当作虚表对象处理，而这个int Array维度对象我们可以控制，从而通过控制Readable返回值来达到代码执行。
* * *
### Exploitation Surface
如果想利用这个漏洞，我们需要分析一下攻击面，首先是我们可控的位置是什么（也就是在之前我提到的int
Array的维度），这个可控的位置是否有利用点，有哪些防护，是否有可能绕过等等。
首先我们来看一下利用位置的上下文。
    cmp     dword ptr [eax],0 
    je      MSHTML!Layout::MultiColumnBoxBuilder::HandleColumnBreakOnColumnSpanningElement+0x2c3d83
    mov     ecx,ebx
    call    MSHTML!Layout::Patchable >::Readable
    mov     dword ptr [ebp-10h],esp
    mov     ebx,dword ptr [eax]
    mov     eax,dword ptr [ebx]
    mov     edi,dword ptr [eax+1A4h]
    mov     ecx,edi
    call    dword ptr [MSHTML!__guard_check_icall_fptr]
    mov     ecx,ebx
    call    edi
可看到，在eax作为指针返回后，会在后续继续调用到一个Readable函数，而在这个函数后返回后，eax会连续传递，最后调用到call
edi，引用这个虚函数。
也就是说，一旦我们可以控制这个指针，我们就有可能在call edi位置达到代码执行的效果。
而可以看到，在call edi之前，有一处call
__guard_check_icall_fptr，这是Windows新的防护机制CFG，在执行虚函数调用前，会检查虚函数。
因此，我们简单分析一下我们的攻击面，首先我们可控的位置是int Array
Object+0x4位置的值，这个值控制范围有限，因此我们似乎不能通过这种方法来获得任意地址的读写能力，因此对于我们来说ASLR对于这个漏洞来说不好绕过。ASLR和DEP不好绕过。
接下来，我们要分析的就是，如何控制这个值。这个对象经过我们刚才的分析，是由MSHTML!Array::Create函数创建的对象，但赋值并非在这个位置。在分析的过程中，我对Layout中的大量类函数进行了跟踪分析，这里我将通过正向来直接跟大家展示这个值是从什么位置来的。
* * *
### 跟踪TableBoxBuilder结构体
这里，我们稍微修改一下PoC，主要是对th1对象中的width值进行修改。
下面调试过程中，由于多次重启，堆地址值有所变化，但不影响分析。
首先，我们要关注的是一个名为FlowBoxBuilder的对象，这个对象偏移＋0x124的位置将会存放Width值生成的一个size。在Layout::FlowBoxBuilder::FlowBoxBuilder函数中，这个结构体对象被创建。
    0:007:x86> p
    MSHTML!Layout::FlowBoxBuilder::FlowBoxBuilder+0xe:
    67c70ae4 8bd9            mov     ebx,ecx//对象位置被初始化
    0:007:x86> r ecx
    ecx=09a42ad8
    0:007:x86> dd 09a42ad8+124//对应位置的成员变量已经被初始化
    09a42bfc  e0e0e0e0 e0e0e0e0 e0e0e0e0 e0e0e0e0
    0:007:x86> ba w1 09a42ad8+124 //对＋0x124位置下写入断点
    0:007:x86> g
    Breakpoint 4 hit
    MSHTML!Layout::FlowBoxBuilder::InitializeBoxSizing+0x11b:
    67b18c75 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]
    0:007:x86> dd 09a42ad8+124//可以看到在InitializeBoxSizing函数中被赋值
    09a42bfc  00989680=1000000
可以看到，在MSHTML!Layout::FlowBoxBuilder::InitializeBoxSizing函数中，FlowBoxBuilder+0x124位置被赋值。赋值的内容是0x989680，就是1000000，这个值又是从哪里来的呢？在MSHTML中有一个函数MSHTML!Layout::ContainerBoxBuilder::ComputeBoxModelForChildWithUsedWidth，这个计算会将table的width＊100。
如上面的代码片段，FlowBoxBuilder在InitializeBoxSizing中初始化之后，偏移＋0x124位置会将ComputeBoxModelForChildWithUsedWidth函数的计算值保存。
随后这个值会加上200，之后这个值回存入结构体中，然后会存放在FlowBoxBuilder结构体＋0x114的位置。
    67b0201a 8906            mov     dword ptr [esi],eax
    0:007:x86> g
    Breakpoint 7 hit
    MSHTML!TSmartPointer::operator=+0x13:
    67b0201c 85c9            test    ecx,ecx
    0:007:x86> dd 09b40948+114//
    09b40a5c  09b778d0 00000000 e0e0e0e0 00000000//在FlowBoxBuilder+0x114位置存放了一个结构体
    09b40a6c  00989874 //+200之后依然存放在FlowBoxBuilder+0x124的位置 
    0:007:x86> dd 09b778d0
    09b778d0  67e6c574 00000001 09b36560 09b6f968//结构体＋0xc位置存放着目标结构体，这个结构体其实就是一个int Array结构，这个结构会在后续调用中用到。
    09b778e0  00989874 
    0:007:x86> dd 09b6f968
    09b6f968  00000000 001e84a8 003d0950 005b8df8
    09b6f978  007a12a0 00989748 a0a0a0a0 a0a0a0a0
    09b6f988  00000000 00000000 4c762d5c 000c2ca7
    09b6f998  09b5a4a8 09b71a68 f0f0f0f0 f0f0f0f0
    09b6f9a8  f0f0f0f0 f0f0f0f0 a0a0a0a0 a0a0a0a0
    09b6f9b8  00000000 00000000 59752d4a 140c2caa
    09b6f9c8  abcdaaaa 80411000 00000044 0000006c
    09b6f9d8  09b6fa58 09b6f910 04d67e6c dcbaaaaa
    0:007:x86> kb//调用逻辑
    ChildEBP RetAddr  Args to Child              