In this section we evaluate three existing MCISes, consisting of
an iOS app and a receiver: ForeFlight with the Appareo Stratus 2,
Garmin Pilot with the Garmin GDL 39, and WingX Pro7 with the
Sagetech Clarity.
6.1 ForeFlight with the Appareo Stratus 2
ForeFlight is the most popular iOS aviation app. The FAA has re-
cently approved the use of ForeFlight as a class 2 EFB (Section 2.3)
on all Frontier Airlines ﬂights [23]. ForeFlight only works with
two models of UAT receivers, the ﬁrst-generation Stratus and the
Stratus 2, both made by Appareo.4 The app requires a $74.99 per
year subscription, which includes FAA aeronautical charts and a
number of real-time weather products retrieved while the device has
an Internet connection. Our evaluation is based on version 5.6 of
the ForeFlight app.
The Appareo Stratus 2 (Figure 2, left) is the second generation of
the Stratus device. Both the ﬁrst generation Stratus and the Stratus 2
only work with the ForeFlight app. The Stratus 2 costs $899 and
incorporates a GPS receiver, 1090ES receiver, UAT receiver, and
an AHRS module. The Stratus 2 communicates with the iPad via
WiFi in infrastructure mode by acting as an access point. The user
conﬁgures the iPad to connect to this access point in order for the
ForeFlight app to receive data from the unit. Our Stratus 2 was
running ﬁrmware version 1.3.0.389.
4ForeFlight also interacts with XM weather services and several
other GPS-only devices.
6406.1.1 Receiver to App Channel Integrity
The Stratus 2 receiver sends information to the app via UDP
broadcast on its WiFi network. All data is broadcast unencrypted
and unauthenticated using a proprietary, but easy to reverse-engineer,
protocol. The ForeFlight app ensures that it is communicating with
the Stratus 2 unit by checking the SSID and IP address subnet
assigned by the AP. We were able to impersonate the receiver and
inject arbitrary information, which the app accepted and displayed.
We could also concurrently connect a malicious device to the
Stratus 2 and broadcast data to the same broadcast address used by
the Stratus 2 itself; the Stratus 2 (acting as an access point) relayed
our forged data to the iPad. This behavior can be exploited by a
malicious app to inject spoofed packets into the receiver to app
channel. With this attack, the iPad receives both legitimate and
forged data. However, because the user interface is updated at ﬁxed
intervals, an attacker sending forged messages immediately after
the Status 2 itself will cause the app to immediately overwrite the
correct data.
We were thus able to inject arbitrary data into the receiver to
app channel, including invalid and inconsistent data, which the
app displayed. Such an attack can be carried out with a concealed
device on board the aircraft during ﬂight, or using a transmitter
of sufﬁcient power outside the aircraft. Once an AP association
has been established, it is possible to inject packets surreptitiously
without the need to receive packets transmitted by the Stratus 2 AP.
Vulnerability. An attacker with time-of-use proximity or collo-
cated app capability can manipulate all receiver-originated data.
6.1.2 App to Receiver Channel Integrity
The reverse channel, from app to receiver, is also neither en-
crypted nor authenticated. The app (and, therefore, the attacker) can
adjust 802.11 transmitter power level and indicator LED brightness.
Vulnerability (minor). An attacker with time-of-use proximity or
collocated app capability can modify some receiver settings.
6.1.3 EFB Data Integrity
The ForeFlight app downloads subscription data using an SSL
connection. The app did not accept self-signed certiﬁcates. We were
unable to tamper with this data.
6.1.4 Receiver Integrity
Receiver ﬁrmware can be updated using the ForeFlight app when
connected to the Stratus 2. The ﬁrmware is packaged with the app
and updated with the app. Although it is possible to extract the
ﬁrmware from the app bundle as well as to capture it during an
update, the ﬁrmware image itself is encrypted or scrambled, which
we failed to break with a modest reverse-engineering effort.
Vulnerability. An attacker with brief proximity or collocated app
capability can downgrade receiver ﬁrmware.
6.2 Garmin Pilot with the Garmin GDL 39
The Garmin Pilot app provides features similar to ForeFlight. It
interoperates with the Garmin GDL 39 receiver and Garmin GLO
GPS-only receiver. Garmin Pilot requires a $75 subscription. We
evaluated Garmin Pilot version 6.0.1.
The GDL 39 receiver costs $599 and incorporates a GPS receiver,
1090ES receiver, UAT receiver.
(A more expensive model, the
GDL 39 3D, also includes an AHRS module.) Unlike the Stratus 2
or the Clarity, the GDL 39 communicates with the iPad using Blue-
tooth. The Bluetooth link uses RFCOMM, which provides RS-232
emulation over a Bluetooth link. Our unit had ﬁrmware version
2.80.
6.2.1 Receiver to App Channel Integrity
When the Garmin Pilot app connects to the receiver, the two
devices engage in a handshake. The receiver sends a nonce and a
key to the app; the app then encrypts the nonce sent to it with a 16
round Blowﬁsh cipher and the key and then encrypts a static message
with the output of the ﬁrst cipher as a key to an 11 round Blowﬁsh
cipher. We suspect that this unusual algorithm is meant to mutually
authenticate the app and receiver. The code to carry out this process
in included in the app and the receiver ﬁrmware image; it was
extracted by a hobbyist and posted on the Web.5 We did not attempt
receiver to application attacks; however, we believe it is possible to
impersonate the receiver (requires time-of-use proximity).
6.2.2 App to Receiver Channel Integrity
We were able both to passively listen on this channel using a
script written by the aforementioned hobbyist and to spoof requests
from the app to the receiver. We were also able to determine the
address of the GDL 39 wirelessly via snifﬁng and then connect to
the device without pairing.
6.2.3 EFB Data Integrity
The Garmin Pilot app updates its documents and charts over
HTTP. We were able to modify the aeronautical charts retrieved
by the app and presented to the pilot. Other communication (i.e.,
weather and ﬂight plan ﬁling) was carried out over HTTPS. The app
did not accept self-signed certiﬁcates.
Vulnerability. An attacker update man-in-the-middle capability
can tamper with EFB data use by the app.
6.2.4 Receiver Integrity
The GDL 39 ﬁrmware can be updated via Bluetooth using the
Garmin Pilot app or a GDL 39 utility app. Because the receiver
communicates with the iPad using the Bluetooth link, the iPad can
remain connected to the Internet while communicating with the
GDL 39. The ﬁrmware update relies on this: both the Garmin Pi-
lot app and the GDL 39 Utility app check for new ﬁrmware when
connected to the device and an Internet connection is available. All
update-related communication is unencrypted and unauthenticated;
we were able to redirect both apps to download our own ﬁrmware im-
age:
Vulnerability. An attacker with brief proximity, collocated app, or
update man-in-the-middle capability can install arbitrary receiver
ﬁrmware.
6.3 WingX Pro7 with the Sagetech Clarity
WingX Pro7 is an independent app that interoperates with eleven
different UAT receivers. WingX Pro7 requires a $99.99 per year
subscription. It provides FAA aeronautical charts and a number of
real-time weather data products retrieved while the device has an
Internet connection. We evaluated WingX Pro7 version 7.1.2.5 with
the Sagetech Clarity UAT receiver.
The Sagetech Clarity CL01 UAT receiver costs $1,150 and incor-
porates a GPS receiver, 1090ES receiver, and UAT receiver. (The
CL02 model includes an AHRS module and costs $250 more.)
The Clarity unit communicates with the iPad via WiFi in ad-hoc
mode. The Clarity uses a message format very similar to the Garmin
GDL 90 Data Interface Speciﬁcation. In addition to this format, it
includes messages with information about the current ﬁrmware, the
serial number, and device status.
5http://www.chartbundle.com/tech/gdl39/
6416.3.1 Receiver to App Channel Integrity
The Clarity receiver transmits all data unencrypted and unauthen-
ticated. The WingX Pro7 app checks that the IP address subnet is
correct, but performs no other device authentication. As with the
Stratus 2 and ForeFlight app, it is possible to impersonate the Clarity
device to the WingX Pro7 app and to inject packets into the channel.
We were successful in doing both.
Vulnerability. An attacker with time-of-use proximity or collo-
cated app capability can manipulate all non-EFB data.
6.3.2 App to Receiver Channel Integrity
The Clarity is unique among the three devices we examined in
that it does not receive any data from the app. A user cannot adjust
any internal settings or trigger a ﬁrmware update using the app.
Firmware updates require connecting the Clarity unit to a PC via
USB.
6.3.3 EFB Data Integrity
All app data is retrieved unencrypted over HTTP, except for
monetary transactions, which are done through the Apple App Store.
We were able to modify the aeronautical charts and other information
retrieved by the device.
Vulnerability. An attacker update man-in-the-middle capability
can modify EFB data use by the app.
6.3.4 Receiver Integrity
To update the ﬁrmware on the Clarity, the unit must be connected
to a Windows PC via USB. The ﬁrmware can then be updated using
the Sagetech Clarity Firmware Update application. The ﬁrmware
image is bundled with the application itself; updating the ﬁrmware
requires downloading a new version of the Update application. The
update itself relies on the standard USB DFU protocol. While the
DFU protocol standardized how data is transferred over USB, it does
not specify a format for the update image, treating it as a sequence
of bytes only. In the case of the Clarity, the ﬁrmware image is
not encrypted or authenticated. We were able to update the Clarity
ﬁrmware with a modiﬁed ﬁrmware image.
Modifying with device ﬁrmware requires either physical access to
the unit or the ability to modify the Update application, either on the
user’s PC or while it is being downloaded. The Firmware Update
application is downloaded from Sagetech over HTTP; HTTPS is not
supported.
Vulnerability. An attacker with brief access or update man-in-the-
middle capability can install arbitrary receiver ﬁrmware.
6.4 Malicious Firmware Attack
To demonstrate attacks on receiver integrity on the Sagetech
Clarity and the Garmin GDL 39, we developed a modiﬁed ﬁrmware
image for each. The modiﬁed ﬁrmware perturbs GPS coordinates
within 20 miles of an “attractor,” so that a pilot attempting to ﬂy in
a straight line through the area is led to deviate toward the center.
We were able to install the malicious ﬁrmware on both the GDL 39
(via brief proximity) and the Clarity (via brief access or update
man-in-the-middle tampering).
6.5 Malicious Collocated App Attack
We also developed a malicious iOS app that carries out two
attacks. In the ﬁrst attack, the malicious app impersonates Stratus
broadcasts to the ForeFlight app, causing it to display incorrect data.
In the second attack, our app downgrades the Stratus 2 ﬁrmware.
The ﬁrst attacks requires the app to run in the background while the
ForeFlight app is running, while the second attack does not require
the app remain running after the downgrade.
We also developed an Android6 app attacking the GDL 39. Our
app updates the GDL 39 ﬁrmware without user knowledge (see
Section 6.4). This attack requires the app to be launched when the
GDL 39 receiver is powered and paired with the Android device.
Gaining the collocated app capability necessary to carry out the
above attack can be achieved by tricking the user into installing
an app on her device. There are several ways of doing so: by
developing a new app users might be lured into trying (and, for the
ﬁrst two attacks, keeping) or by cloning a popular app (e.g., Flappy
Bird) [34]. An attacker can also buy an existing app and its user
base from the app developer, and then release an update with the
attack functionality.
7. RECOMMENDATIONS
The attacks described in Section 6 can be prevented by following
well-established secure design recommendations described in prior
work on similar systems [6, 49].
7.1 Receiver to App Channel
Data sent from the receiver to the app should be signed by the
device. Device private keys should be stored in non-volatile memory
only accessible by the signed code. (Most modern SoCs provide
secure non-volatile memory storage, as well as AES hardware.)
Furthermore, each receiver should have its own private key, so that
even if a private key is extracted from one device, it cannot be used
in another.
Pairing. The receiver and app should be paired, and the app should
only accept data from the receiver to which it has been paired.
Pairing should always require explicit user interaction.
Replay protection. The data authentication scheme should also
protect against replay, for example, by using a nonce randomly
generated by the app and a message sequence number. The receiver
should also generate periodic, time-stamped heartbeat messages.
The app should ensure that the message time stamps are within the
expected period, allowing for a small amount of clock drift.7 This
prevents an attacker from signiﬁcantly delaying information from
the receiver.
Preventing selective denial.
In Section 4.1 we pointed out the
possibility that an attacker could attempt to selectively block certain
messages. With both WiFi and Bluetooth protocol stacks, it is possi-
ble to arrange reliable, in-order message delivery to the application
layer. Therefore, an application should not silently drop messages
that fail to authenticate and should not ignore gaps in the message
sequence numbers, as this indicates adversarial message tampering,
rather than natural transmission errors.
7.2 App to Receiver Channel
Any receiver conﬁguration changes sent by the app to the receiver
should be signed by the paired app (see Pairing above). The same
session nonce and sequence number mechanism should be used as
for the receiver to app channel. Pairing should should require user
input, for example, pressing the power button rapidly three times.
7.3 Firmware Updates
6While we developed the app for the Android platform, there is no
technical reason why a similar app could not be developed for iOS.
7Many tablet PCs have a built-in GPS receiver, which can eliminate
the need to compensate for clock drift.
642Firmware updates should be signed by the developer. The sig-
nature should be checked by a secure bootloader. Ideally, program
ﬂash should be large enough to hold two ﬁrmware images, so that,
should an update fail, the bootloader could load the previously work-
ing image.
It is advisable for the bootloader to be able to handle revocation
of the public developer key used to authenticate ﬁrmware images.
7.4 EFB Updates
EFB updates should be signed by the app data provider. Most
aeronautical data has a pair of “effective from . . . to” dates. These
should be used to prevent an attacker from downgrading aeronautical
data.
Ideally, the entire FAA to MCIS supply chain should be
secured. However, to our knowledge, the FAA does not digitally sign
the aeronautical data it provides. At the very least, the aeronautical
data provider should download the data from the FAA site using
HTTPS to prevent man-in-the-middle tampering.
7.5 Aeronautical Information Services
The security issues of today’s aeronautical information services
have been discussed in prior work (see Section 2.1). We hope that
these problems will be remedied in the future. When this happens,
MCISes should be updated to authenticate the information received
via these services.
7.6 Security-Aware Software Development
The vulnerabilities described in Section 6 resulted from a failure
to consider security threats in the design of the MCIS. We did not
look for traditional programming errors, such as buffer overﬂows,
because we did not need to: design ﬂaws alone were sufﬁcient to
successfully attack these systems. MCIS developers should also
ensure that their software development practices do not undermine
the security of their systems.
8. CONCLUSION
We motivated this work with the question: Do mobile cockpit
information systems provide the security guarantees expected of