148
Chapter 5 bpftrace
This output is from bpftrace version v0.9-232-g60e6, 15-Jun-2019. As more features are added this
USAGE message may become unwieldy, and a short and a long version may be added. Check the
output for your current version to see if this is the case.
5.9
9bpftraceProbeTypes
Table 52 lists available probe types. Many of these also have a shortcut alias, which help create
shorter one-liners.
Table 5-2  bpftrace Probe Types
Type
Shortcut
Description
tracepoint
Kermel static instrumentation points
usdt
User-level statically defined tracing
kprobe
k
Kernel dynamic function instrumentation
kretprobe
kx
Kernel dynamic function return instrumentation
uprobe
User-level dynamic function instrumentation
uretprobe
User-level dynamic function retum instrumentation
softvare
S
Kernel software-based events
hardvare
h
Hardware counter-based instrumentation
profile
Ω,
Timed sampling across all CPUs
Interva1
Timed reporting (from one CPU)
BEGIN
Start of bpftrace
END
End of bpftrace
These probe types are interfaces to existing kernel technologies. Chapter 2 explains how these
technologies work: kprobes, uprobes, tracepoints, USDT, and PMCs (used by the hardware
probe type).
Some probes may fire frequently, such as for scheduler events, memory allocations, and network 
packets. To reduce overhead, ry to solve your problems by using less-frequent events wherever
possible. See Chapter 18 for a discussion on minimizing overhead that applies to both BCC and
bpftrace development.
The following sections summarize bpftrace probe usage.
5.9.1 tracepoint
The tracepoint probe type instruments tracepoints: kernel static instrumentation points. Format:
tracepoint: tracepoint_
---
## Page 186
5.9 bpftrace Probe Types  149
The tracepoint_name is the full name of the tracepoint, including the colon, which separates
the tracepoint into its own hierarchy of class and event name. For example, the tracepoint
net:netif_rx can be instrumented in bpftrace with the probe tracepoint:net:netif_rx.
Tracepoints usually provide arguments: these are fields of information that can be accessed in
bpftrace via the args built-in. For example, net:netif_rx has a field called len for the packet length
that can accessed using args->len.
If you're new to bpftrace and tracing, system call tracepoints are good targets to instrument. They
provide broad coverage of kernel resource usage and have a well-documented API: the syscall man
pages. For example, the tracepoints:
syscalls:sys_entex_read
peax"aTxa"ss:ateoss
instrument the start and end of the read(2) system call. The man page has its signature:
ssize_t read(int fd, void *buf, size_t count) ;
For the sys_enter_read tracepoint, its arguments should be available as args->fd, args->buf, and
args->count. This can be checked using the 1 (list) and v (verbose) modes of bpftrace:
 bpftrace -1v tracepoint:syscalls:sys_enter_read
tracepointisysca1ls:sys_enter_read
int syscall_nr;
unsigned int fd
char * buf;
size_t count,
The man page also describes what these arguments are and the return value of the read(2) syscall,
which can be instrumented using the sys_exit_read tracepoint. This tracepoint has an additional
argument not found in the man page, —syscall_nr, for the syscall number.
As an interesting tracepoint example, I wil trace the enter and exit of the clone(2) syscall, which
su ssand puano ag sd m I squasa asa rog (zog o rens) sassad mau sapea
and PID using bpftrace built-in variables. For the exit, I will also print the return value using a
tracepoint argument:
printf ("-> clone () by 4s PID 4d\n*, corm, pid) : 1
tracepoint:syscalls:sys_exit_clone (
printf("ret, comn, pid) : 1
Attach.ing 2 probes...
> clone (1 by bash PID 2582
: Greater than
*=; Greater than or equal to
•>: Shift left, shift right
 +=, -=, *=, /=, %=, &=, ^=, >=: Compound operator
5.12
bpftraceVariables
As introduced in Section 5.7.10, there are three variable types: built-in, scratch, and map variables.
5.12.1
Built-in Variables
The built-in variables provided by bpftrace are usually for read-only access of information. The
most important built-in variables are listed in Table 5-5.
Table 5-5 bpftrace Selected Built-in Variables
Built-in Variable
Type
Description
pid
integer
Process ID (kemel tgid)
t.1d
 integer
Thread ID (kernel pid)
u1d
integer
 User ID
username
string
Usename
n.sec.s
integer
Timestamp, in nanoseconds
elapsed
integer
Timestamp, in nanoseconds, since bpftrace initialization
cpu
integer
Processor ID
comm:
string
Process name
ks tack
string
Kernel stack trace