### Chapter 5: bpftrace

#### 5.9 bpftrace Probe Types

This output is from bpftrace version v0.9-232-g60e6, dated 15-Jun-2019. As more features are added, the USAGE message may become unwieldy, and a short and a long version may be introduced. Please check the output for your current version to see if this is the case.

Table 5-2 lists the available probe types in bpftrace. Many of these probes also have shortcut aliases, which help create shorter one-liners.

**Table 5-2: bpftrace Probe Types**

| Type         | Shortcut | Description                               |
|--------------|----------|-------------------------------------------|
| tracepoint   |          | Kernel static instrumentation points      |
| usdt         |          | User-level statically defined tracing     |
| kprobe       | k        | Kernel dynamic function instrumentation   |
| kretprobe    | kx       | Kernel dynamic function return instrumentation |
| uprobe       |          | User-level dynamic function instrumentation |
| uretprobe    |          | User-level dynamic function return instrumentation |
| software     | S        | Kernel software-based events              |
| hardware     | h        | Hardware counter-based instrumentation    |
| profile      | Î©,       | Timed sampling across all CPUs            |
| interval     |          | Timed reporting (from one CPU)            |
| BEGIN        |          | Start of bpftrace                         |
| END          |          | End of bpftrace                           |

These probe types are interfaces to existing kernel technologies. Chapter 2 explains how these technologies work, including kprobes, uprobes, tracepoints, USDT, and PMCs (used by the hardware probe type).

Some probes may fire frequently, such as for scheduler events, memory allocations, and network packets. To reduce overhead, try to solve your problems using less-frequent events wherever possible. See Chapter 18 for a discussion on minimizing overhead that applies to both BCC and bpftrace development.

The following sections summarize the usage of bpftrace probes.

##### 5.9.1 tracepoint

The `tracepoint` probe type instruments tracepoints, which are kernel static instrumentation points. The format is:

```
tracepoint:tracepoint_name
```

The `tracepoint_name` is the full name of the tracepoint, including the colon, which separates the tracepoint into its own hierarchy of class and event name. For example, the tracepoint `net:netif_rx` can be instrumented in bpftrace with the probe `tracepoint:net:netif_rx`.

Tracepoints usually provide arguments, which are fields of information that can be accessed in bpftrace via the `args` built-in. For example, `net:netif_rx` has a field called `len` for the packet length, which can be accessed using `args->len`.

If you are new to bpftrace and tracing, system call tracepoints are good targets to instrument. They provide broad coverage of kernel resource usage and have a well-documented API: the syscall man pages. For example, the tracepoints `syscalls:sys_enter_read` and `syscalls:sys_exit_read` instrument the start and end of the `read(2)` system call. The man page has its signature:

```c
ssize_t read(int fd, void *buf, size_t count);
```

For the `sys_enter_read` tracepoint, its arguments should be available as `args->fd`, `args->buf`, and `args->count`. This can be checked using the `-l` (list) and `-v` (verbose) modes of bpftrace:

```sh
bpftrace -lv tracepoint:syscalls:sys_enter_read
```

The man page also describes what these arguments are and the return value of the `read(2)` syscall, which can be instrumented using the `sys_exit_read` tracepoint. This tracepoint has an additional argument not found in the man page, `syscall_nr`, for the syscall number.

As an interesting example, I will trace the enter and exit of the `clone(2)` syscall, which creates a new process. I will print the command, PID, and return value using bpftrace built-in variables. For the exit, I will also print the return value using a tracepoint argument:

```sh
printf("-> clone() by %s PID %d\n", comm, pid): tracepoint:syscalls:sys_enter_clone
printf("ret: %d, comm: %s, pid: %d\n", args->ret, comm, pid): tracepoint:syscalls:sys_exit_clone
```

Attaching 2 probes...

```
> clone() by bash PID 2582
ret: 2583, comm: bash, pid: 2582
```

#### 5.12 bpftrace Variables

As introduced in Section 5.7.10, there are three variable types in bpftrace: built-in, scratch, and map variables.

##### 5.12.1 Built-in Variables

The built-in variables provided by bpftrace are usually for read-only access to information. The most important built-in variables are listed in Table 5-5.

**Table 5-5: bpftrace Selected Built-in Variables**

| Built-in Variable | Type    | Description                              |
|-------------------|---------|------------------------------------------|
| pid               | integer | Process ID (kernel tgid)                 |
| tid               | integer | Thread ID (kernel pid)                   |
| uid               | integer | User ID                                  |
| username          | string  | Username                                 |
| nsecs             | integer | Timestamp, in nanoseconds                |
| elapsed           | integer | Timestamp, in nanoseconds, since bpftrace initialization |
| cpu               | integer | Processor ID                             |
| comm              | string  | Process name                             |
| kstack            | string  | Kernel stack trace                       |