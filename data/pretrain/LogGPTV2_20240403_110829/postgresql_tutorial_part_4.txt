INSERT INTO SELLS (SNO, PNO)
VALUES (1, 1);
23
Chapter 2. SQL
Update
To change one or more attribute values of tuples in a relation the UPDATE command is used.
The syntax is:
UPDATE table_name
SET name_of_attr_1 = value_1
[, ... [, name_of_attr_k = value_k]]
WHERE condition;
To change the value of attribute PRICE of the part ’Screw’ in the relation PART we use:
UPDATE PART
SET PRICE = 15
WHERE PNAME = ’Screw’;
The new value of attribute PRICE of the tuple whose name is ’Screw’ is now 15.
Delete
To delete a tuple from a particular table use the command DELETE FROM. The syntax is:
DELETE FROM table_name
WHERE condition;
To delete the supplier called ’Smith’ of the table SUPPLIER the following statement is used:
DELETE FROM SUPPLIER
WHERE SNAME = ’Smith’;
System Catalogs
In every SQL database system system catalogs are used to keep track of which tables, views
indexes etc. are defined in the database. These system catalogs can be queried as if they were
normal relations. For example there is one catalog used for the definition of views. This catalog
stores the query from the view definition. Whenever a query against a view is made, the system
first gets the view definition query out of the catalog and materializes the view before
proceeding with the user query (see SIM98 for a more detailed description). For more
information about system catalogs refer to DATE.
Embedded SQL
In this section we will sketch how SQL can be embedded into a host language (e.g. C). There
are two main reasons why we want to use SQL from a host language:
24
Chapter 2. SQL
There are queries that cannot be formulated using pure SQL (i.e. recursive queries). To be
able to perform such queries we need a host language with a greater expressive power than
SQL.
We simply want to access a database from some application that is written in the host
language (e.g. a ticket reservation system with a graphical user interface is written in C and
the information about which tickets are still left is stored in a database that can be accessed
using embedded SQL).
A program using embedded SQL in a host language consists of statements of the host language
and of embedded SQL (ESQL) statements. Every ESQL statement begins with the keywords
EXEC SQL. The ESQL statements are transformed to statements of the host language by a
precompiler (which usually inserts calls to library routines that perform the various SQL
commands).
When we look at the examples throughout Select we realize that the result of the queries is
very often a set of tuples. Most host languages are not designed to operate on sets so we need a
mechanism to access every single tuple of the set of tuples returned by a SELECT statement.
This mechanism can be provided by declaring a cursor. After that we can use the FETCH
command to retrieve a tuple and set the cursor to the next tuple.
For a detailed discussion on embedded SQL refer to [Date and Darwen, 1997], [Date, 1994],
or [Ullman, 1988].
25
Chapter 3. Architecture
Postgres Architectural Concepts
Before we begin, you should understand the basic Postgres system architecture. Understanding
how the parts of Postgres interact will make the next chapter somewhat clearer. In database
jargon, Postgres uses a simple "process per-user" client/server model. A Postgres session
consists of the following cooperating UNIX processes (programs):
A supervisory daemon process (postmaster),
the user’s frontend application (e.g., the psql program), and
the one or more backend database servers (the postgres process itself).
A single postmaster manages a given collection of databases on a single host. Such a collection
of databases is called an installation or site. Frontend applications that wish to access a given
database within an installation make calls to the library. The library sends user requests over
the network to the postmaster (How a connection is established), which in turn starts a new
backend server process and connects the frontend process to the new server. From that point on,
the frontend process and the backend server communicate without intervention by the
postmaster. Hence, the postmaster is always running, waiting for requests, whereas frontend
and backend processes come and go.
The libpq library allows a single frontend to make multiple connections to backend processes.
However, the frontend application is still a single-threaded process. Multithreaded
frontend/backend connections are not currently supported in libpq. One implication of this
architecture is that the postmaster and the backend always run on the same machine (the
database server), while the frontend application may run anywhere. You should keep this in
mind, because the files that can be accessed on a client machine may not be accessible (or may
only be accessed using a different filename) on the database server machine.
You should also be aware that the postmaster and postgres servers run with the user-id of the
Postgres "superuser." Note that the Postgres superuser does not have to be a special user (e.g., a
user named "postgres"). Furthermore, the Postgres superuser should definitely not be the UNIX
superuser ("root")! In any case, all files relating to a database should belong to this Postgres
superuser.
26
Chapter 3. Architecture
Figure 3-1. How a connection is established
User
LIBPQ
App POSTMASTER
client host
(a) frontend sends request to postmaster server host
via well-known network socket
User
LIBPQ
App POSTMASTER
client host
SERVER
(b) postmaster creates backend server
server host
User
LIBPQ
App POSTMASTER
client host
SERVER
(c) frontend connected to backend server server host
And multiple connections
can be established...
POSTMASTER
SERVER
User
App LIBPQ server host
client host
POSTMASTER
(d) frontend connected
SERVER
to multiple backend servers
server host
27
Chapter 4. Getting Started
How to begin work with Postgres for a new user.
Some of the steps required to use Postgres can be performed by any Postgres user, and some
must be done by the site database administrator. This site administrator is the person who
installed the software, created the database directories and started the postmaster process. This
person does not have to be the UNIX superuser (root) or the computer system administrator; a
person can install and use Postgres without any special accounts or privileges.
If you are installing Postgres yourself, then refer to the Administrator’s Guide for instructions
on installation, and return to this guide when the installation is complete.
Throughout this manual, any examples that begin with the character % are commands that
should be typed at the UNIX shell prompt. Examples that begin with the character * are
commands in the Postgres query language, Postgres SQL.
Setting Up Your Environment
This section discusses how to set up your own environment so that you can use frontend
applications. We assume Postgres has already been successfully installed and started; refer to
the Administrator’s Guide and the installation notes for how to install Postgres.
Postgres is a client/server application. As a user, you only need access to the client portions of
the installation (an example of a client application is the interactive monitor psql). For
simplicity, we will assume that Postgres has been installed in the directory /usr/local/pgsql.
Therefore, wherever you see the directory /usr/local/pgsql you should substitute the name of the
directory where Postgres is actually installed. All Postgres commands are installed in the
directory /usr/local/pgsql/bin. Therefore, you should add this directory to your shell command
path. If you use a variant of the Berkeley C shell, such as csh or tcsh, you would add
% set path = ( /usr/local/pgsql/bin path )
in the .login file in your home directory. If you use a variant of the Bourne shell, such as sh,
ksh, or bash, then you would add
% PATH=/usr/local/pgsql/bin:$PATH
% export PATH
to the .profile file in your home directory. From now on, we will assume that you have added
the Postgres bin directory to your path. In addition, we will make frequent reference to setting a
shell variable or setting an environment variable throughout this document. If you did not fully
understand the last paragraph on modifying your search path, you should consult the UNIX
manual pages that describe your shell before going any further.
If your site administrator has not set things up in the default way, you may have some more
work to do. For example, if the database server machine is a remote machine, you will need to
set the PGHOST environment variable to the name of the database server machine. The
environment variable PGPORT may also have to be set. The bottom line is this: if you try to
start an application program and it complains that it cannot connect to the postmaster, you
28
Chapter 4. Getting Started
should immediately consult your site administrator to make sure that your environment is
properly set up.
Starting the Interactive Monitor (psql)
Assuming that your site administrator has properly started the postmaster process and
authorized you to use the database, you (as a user) may begin to start up applications. As
previously mentioned, you should add /usr/local/pgsql/bin to your shell search path. In most
cases, this is all you should have to do in terms of preparation.
As of Postgres v6.3, two different styles of connections are supported. The site administrator
will have chosen to allow TCP/IP network connections or will have restricted database access
to local (same-machine) socket connections only. These choices become significant if you
encounter problems in connecting to a database.
If you get the following error message from a Postgres command (such as psql or createdb):
% psql template1
Connection to database ’postgres’ failed.
connectDB() failed: Is the postmaster running and accepting connections
at ’UNIX Socket’ on port ’5432’?
or
% psql -h localhost template1
Connection to database ’postgres’ failed.
connectDB() failed: Is the postmaster running and accepting TCP/IP
(with -i) connections at ’localhost’ on port ’5432’?
it is usually because (1) the postmaster is not running, or (2) you are attempting to connect to
the wrong server host. If you get the following error message:
FATAL 1:Feb 17 23:19:55:process userid (2360) != database owner (268)
it means that the site administrator started the postmaster as the wrong user. Tell him to restart
it as the Postgres superuser.
Managing a Database
Now that Postgres is up and running we can create some databases to experiment with. Here,
we describe the basic commands for managing a database.
Most Postgres applications assume that the database name, if not specified, is the same as the
name on your computer account.
If your database administrator has set up your account without database creation privileges,
then she should have told you what the name of your database is. If this is the case, then you
can skip the sections on creating and destroying databases.
Creating a Database
Let’s say you want to create a database named mydb. You can do this with the following
command:
29
Chapter 4. Getting Started
% createdb mydb
If you do not have the privileges required to create a database, you will see the following:
% createdb mydb
WARN:user "your username" is not allowed to create/destroy databases
createdb: database creation failed on mydb.
Postgres allows you to create any number of databases at a given site and you automatically
become the database administrator of the database you just created. Database names must have
an alphabetic first character and are limited to 32 characters in length. Not every user has
authorization to become a database administrator. If Postgres refuses to create databases for
you, then the site administrator needs to grant you permission to create databases. Consult your
site administrator if this occurs.
Accessing a Database
Once you have constructed a database, you can access it by:
running the Postgres terminal monitor programs (e.g. psql) which allows you to interactively
enter, edit, and execute SQL commands.
writing a C program using the LIBPQ subroutine library. This allows you to submit SQL
commands from C and get answers and status messages back to your program. This interface
is discussed further in The PostgreSQL Programmer’s Guide.
You might want to start up psql, to try out the examples in this manual. It can be activated for
the mydb database by typing the command:
% psql mydb
You will be greeted with the following message:
Welcome to the POSTGRESQL interactive sql monitor:
Please read the file COPYRIGHT for copyright terms of POSTGRESQL
type \? for help on slash commands
type \q to quit
type \g or terminate with semicolon to execute query
You are currently connected to the database: template1
mydb=>
This prompt indicates that the terminal monitor is listening to you and that you can type SQL
queries into a workspace maintained by the terminal monitor. The psql program responds to
escape codes that begin with the backslash character, \ For example, you can get help on the
syntax of various Postgres SQL commands by typing:
mydb=> \h
Once you have finished entering your queries into the workspace, you can pass the contents of
the workspace to the Postgres server by typing:
mydb=> \g
This tells the server to process the query. If you terminate your query with a semicolon, the \g
is not necessary. psql will automatically process semicolon terminated queries. To read queries
from a file, say myFile, instead of entering them interactively, type:
30
Chapter 4. Getting Started
mydb=> \i fileName
To get out of psql and return to UNIX, type
mydb=> \q
and psql will quit and return you to your command shell. (For more escape codes, type \h at
the monitor prompt.) White space (i.e., spaces, tabs and newlines) may be used freely in SQL
queries. Single-line comments are denoted by --. Everything after the dashes up to the end of
the line is ignored. Multiple-line comments, and comments within a line, are denoted by /* ... */
Destroying a Database
If you are the database administrator for the database mydb, you can destroy it using the
following UNIX command:
% destroydb mydb
This action physically removes all of the UNIX files associated with the database and cannot
be undone, so this should only be done with a great deal of forethought.
31
Chapter 5. The Query Language
The Postgres query language is a variant of the SQL3 draft next-generation standard. It has
many extensions such as an extensible type system, inheritance, functions and production rules.
These are features carried over from the original Postgres query language, PostQuel. This
section provides an overview of how to use Postgres SQL to perform simple operations. This
manual is only intended to give you an idea of our flavor of SQL and is in no way a complete
tutorial on SQL. Numerous books have been written on SQL, including [MELT93] and
[DATE97]. You should be aware that some language features are extensions to the ANSI
standard.
Interactive Monitor
In the examples that follow, we assume that you have created the mydb database as described
in the previous subsection and have started psql. Examples in this manual can also be found in
/usr/local/pgsql/src/tutorial/. Refer to the README file in that directory for how to use them.
To start the tutorial, do the following:
% cd /usr/local/pgsql/src/tutorial
% psql -s mydb
Welcome to the POSTGRESQL interactive sql monitor:
Please read the file COPYRIGHT for copyright terms of POSTGRESQL
type \? for help on slash commands
type \q to quit
type \g or terminate with semicolon to execute query
You are currently connected to the database: postgres
mydb=> \i basics.sql
The \i command read in queries from the specified files. The -s option puts you in single step
mode which pauses before sending a query to the backend. Queries in this section are in the file
basics.sql.
psql has a variety of \d commands for showing system information. Consult these commands
for more details; for a listing, type \? at the psql prompt.
Concepts
The fundamental notion in Postgres is that of a class, which is a named collection of object
instances. Each instance has the same collection of named attributes, and each attribute is of a
specific type. Furthermore, each instance has a permanent object identifier (OID) that is unique
throughout the installation. Because SQL syntax refers to tables, we will use the terms table
and class interchangeably. Likewise, an SQL row is an instance and SQL columns are
attributes. As previously discussed, classes are grouped into databases, and a collection of
databases managed by a single postmaster process constitutes an installation or site.
32
Chapter 5. The Query Language
Creating a New Class
You can create a new class by specifying the class name, along with all attribute names and
their types:
CREATE TABLE weather (
city varchar(80),
temp_lo int, -- low temperature
temp_hi int, -- high temperature
prcp real, -- precipitation
date date
);
Note that both keywords and identifiers are case-insensitive; identifiers can become
case-sensitive by surrounding them with double-quotes as allowed by SQL92. Postgres SQL
supports the usual SQL types int, float, real, smallint, char(N), varchar(N), date, time, and
timestamp, as well as other types of general utility and a rich set of geometric types. As we will
see later, Postgres can be customized with an arbitrary number of user-defined data types.
Consequently, type names are not syntactical keywords, except where required to support
special cases in the SQL92 standard. So far, the Postgres create command looks exactly like the
command used to create a table in a traditional relational system. However, we will presently
see that classes have properties that are extensions of the relational model.
Populating a Class with Instances
The insert statement is used to populate a class with instances:
INSERT INTO weather
VALUES (’San Francisco’, 46, 50, 0.25, ’11/27/1994’)
You can also use the copy command to perform load large amounts of data from flat (ASCII)
files. This is usually faster because the data is read (or written) as a single atomic transaction
directly to or from the target table. An example would be:
COPY INTO weather FROM ’/home/user/weather.txt’
USING DELIMITERS ’|’;
where the path name for the source file must be available to the backend server machine, not
the client, since the backend server reads the file directly.
Querying a Class
The weather class can be queried with normal relational selection and projection queries. A
SQL select statement is used to do this. The statement is divided into a target list (the part that
33
Chapter 5. The Query Language
lists the attributes to be returned) and a qualification (the part that specifies any restrictions).
For example, to retrieve all the rows of weather, type:
SELECT * FROM WEATHER;