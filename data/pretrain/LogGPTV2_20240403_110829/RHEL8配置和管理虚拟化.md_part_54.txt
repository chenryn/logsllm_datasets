      [**4**]{.strong}   仅记录错误消息。
      ------------------ --------------------------------------
    :::
    :::
    ::: example
    []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#idm140399935052304}
    **例 19.1. 日志过滤器的 libvirtd.conf 设置示例**
    ::: example-contents
    以下设置：
    ::: itemizedlist
    -   记录来自 `remote`{.literal},`util.json`{.literal} 和
        `rpc`{.literal} 层的所有错误和警告信息
    -   仅记录来自 `事件`{.literal} 层的错误消息。
    -   将过滤的日志保存到 `/var/log/libvirt/libvirtd.log`{.literal}
    :::
    ``` literallayout
    log_filters="3:remote 4:event 3:util.json 3:rpc"
    log_outputs="1:file:/var/log/libvirt/libvirtd.log"
    ```
    :::
    :::
3.  保存并退出。
4.  重新启动 `libvirtd`{.literal} 服务。
    ``` literallayout
    $ systemctl restart libvirtd.service
    ```
:::
:::
::: section
::: titlepage
## []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#enabling-virtual-machine-debug-logs-during-runtime_generating-virtual-machine-debug-logs}在运行时启用虚拟机调试日志 {.title}
:::
您可以修改 libvirt
守护进程的运行时设置，以启用调试日志并将其保存到输出文件中。
这在无法重新启动 `libvirtd`{.literal}
时很有用，因为重新启动可以解决问题，或者因为同时运行迁移或备份等其他进程。如果您要在不编辑配置文件或重启守护进程的情况下尝试命令，修改运行时设置也很有用。
::: itemizedlist
**先决条件**
-   确保已安装 `libvirt-admin`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  [**可选：**]{.strong}备份活跃的日志过滤器集合。
    ``` literallayout
    # virt-admin daemon-log-filters >> virt-filters-backup
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    建议您备份一组活跃的过滤器，以便在生成日志后恢复它们。如果您没有恢复过滤器，则信息将继续被记录，这可能会影响系统性能。
    :::
2.  使用 `virt-admin`{.literal}
    实用程序启用调试并根据您的要求设置过滤器。
    ::: table
    []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#idm140399935814368}
    **表 19.2. 调试过滤器值**
    ::: table-contents
      ------------------ --------------------------------------
      [**1**]{.strong}   记录 libvirt 生成的所有消息。
      [**2**]{.strong}   记录所有非调试信息。
      [**3**]{.strong}   记录所有警告和错误消息。这是默认值。
      [**4**]{.strong}   仅记录错误消息。
      ------------------ --------------------------------------
    :::
    :::
    ::: example
    []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#idm140400009433888}
    **例 19.2. 日志过滤器的 virt-admin 设置示例**
    ::: example-contents
    以下命令：
    ::: itemizedlist
    -   记录来自 `远程`{.literal}、`util.json`{.literal} 和
        `rpc`{.literal} 层的所有错误和警告消息
    -   仅记录来自 `事件`{.literal} 层的错误消息。
    :::
    ``` literallayout
    # virt-admin daemon-log-filters "3:remote 4:event 3:util.json 3:rpc"
    ```
    :::
    :::
3.  使用 `virt-admin`{.literal} 实用程序将日志保存到特定的文件或目录中。
    例如，以下命令将日志输出保存到
    `/var/ log/libvirt/ 目录中的 libvirt.`{.literal} log``{=html}
    文件中：
    ``` literallayout
    # virt-admin daemon-log-outputs "1:file:/var/log/libvirt/libvirtd.log"
    ```
4.  [**可选：**]{.strong}
    您还可以删除过滤器来生成包含所有与虚拟机相关的信息的日志文件。但不建议您这样做，因为这个文件可能包含由
    libvirt 模块生成的大量冗余信息。
    ::: itemizedlist
    -   使用 `virt-admin`{.literal} 实用程序指定一组空白的过滤器。
        ``` literallayout
        # virt-admin daemon-log-filters
          Logging filters:
        ```
    :::
5.  [**可选：**]{.strong}使用备份文件将过滤器恢复到其原始状态。\
    使用保存的值执行第二步，以恢复过滤器。
:::
:::
::: section
::: titlepage
## []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#attaching-virtual-machine-debug-logs_generating-virtual-machine-debug-logs}附加虚拟机调试日志来支持请求 {.title}
:::
您可能需要请求额外的支持来诊断和解决虚拟机(VM)问题。强烈建议将 debug
日志附加到支持请求中，以确保支持团队有权访问所需的所有信息，以提供与虚拟机相关的问题的快速解决方案。
::: itemizedlist
**流程**
-   要报告问题并请求支持，[创建一个支持问题单](https://access.redhat.com/support/cases/#/case/new?intcmp=hp%7Ca%7Ca3%7Ccase&){.link}。
-   根据遇到的问题，将以下日志与您的报告一起附加：
    ::: itemizedlist
    -   对于 libvirt 服务的问题，请从主机连接
        `/var/log/libvirt/libvirtd.log`{.literal} 文件。
    -   对于特定虚拟机的问题，请附加对应的日志文件。
        例如，对于 [*testguest1*]{.emphasis} 虚拟机，请连接
        `testguest1.log`{.literal} 文件，该文件可在
        `/var/log/libvirt/qemu/testguest1.log`{.literal} 中找到。
    :::
:::
::: itemizedlist
**其它资源**
-   如需更多与附加日志文件的信息，请参阅 [How to provide files to Red
    Hat Support?](https://access.redhat.com/solutions/2112){.link}
:::
:::
:::
::: section
::: titlepage
# []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#dumping-a-virtual-machine-core_diagnosing-virtual-machine-problems}转储虚拟机内核 {.title}
:::
要分析虚拟机(VM)崩溃或出现故障的原因，您可以将虚拟机内核转储到磁盘上的文件，以便稍后分析和诊断。
本节
[简要介绍内核转储，](#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#how-virtual-machine-core-dumping-works_dumping-a-virtual-machine-core "虚拟机内核转储的工作原理"){.link}
并解释如何将
[虚拟机内核转储到特定](#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#creating-a-virtual-machine-core-dump-file_dumping-a-virtual-machine-core "创建虚拟机内核转储文件"){.link}
文件。
::: section
::: titlepage
## []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#how-virtual-machine-core-dumping-works_dumping-a-virtual-machine-core}虚拟机内核转储的工作原理 {.title}
:::
虚拟机(VM)需要许多正在运行的进程来准确高效地工作。在某些情况下，运行中的虚拟机在使用时可能会意外终止或出现故障。重新启动虚拟机可能会导致数据被重置或丢失，从而难以诊断导致虚拟机崩溃的确切问题。
在这种情况下，您可以在重启虚拟机前使用 `virsh dump`{.literal}
[*工具将虚拟机内核保存（或转储*]{.emphasis}）到文件中。内核转储文件包含虚拟机的原始物理内存映像，其中包含有关虚拟机的详细信息。此信息可用于手动诊断虚拟机问题，也可以使用
`crash`{.literal} 实用程序等工具来诊断。
::: itemizedlist
**其它资源**
-   有关使用 `crash 工具的详情请参考 crash`{.literal} man page 和 [crash
    工具主页](https://github.com/crash-utility/crash){.link}。
:::
:::
::: section
::: titlepage
## []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#creating-a-virtual-machine-core-dump-file_dumping-a-virtual-machine-core}创建虚拟机内核转储文件 {.title}
:::
虚拟机(VM)内核转储包含任何给定时间有关虚拟机状态的详细信息。此信息与虚拟机的快照类似，可以帮助您检测虚拟机出现故障或突然关闭时出现问题。
::: itemizedlist
**先决条件**
-   请确定您有足够的磁盘空间保存该文件。请注意，虚拟机消耗的空间取决于分配给虚拟机的
    RAM 量。
:::
::: itemizedlist
**流程**
-   使用 `virsh dump`{.literal} 工具程序。
    例如，以下命令可将 geo `er1`{.literal} 虚拟机的核心、内存和 CPU
    通用寄存器文件转储到 `/core/ file 目录中的 gargantua.`{.literal}
    file``{=html} ：
    ``` literallayout
    # virsh dump lander1 /core/file/gargantua.file --memory-only
      Domain lander1 dumped to /core/file/gargantua.file
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`crash`{.literal} 实用程序不再支持 virsh dump 命令的默认文件格式。要使用
`崩溃`{.literal} 分析核心转储文件，您必须使用 `--memory-only`{.literal}
选项创建 文件。
另外，在创建内核转储文件以附加到红帽支持问题单时，您必须使用
`--memory-only`{.literal} 选项。
:::
::: itemizedlist
**其它资源**
-   有关其他 `virsh 转储`{.literal} 参数，请使用
    `virsh dump --help`{.literal} 或查看 `virsh`{.literal} man page。
-   有关打开支持问题单的详情，请参考
    [打开支持案例](https://access.redhat.com/support/cases/#/case/new?intcmp=hp%7Ca%7Ca3%7Ccase&){.link}。
:::
:::
:::
::: section
::: titlepage
# []{#diagnosing-virtual-machine-problems_configuring-and-managing-virtualization.html#backtracing-virtual-machine-processes_diagnosing-virtual-machine-problems}回溯虚拟机进程 {.title}
:::
与虚拟机(VM)相关的进程出现故障时，您可以使用 `gstack`{.literal}
命令和进程标识符(PID)来为出现故障的进程生成执行堆栈跟踪。如果该进程是线程组的一部分，那么也会跟踪所有线程。
::: itemizedlist
**先决条件**
-   确保已安装 `GDB`{.literal} 软件包。
    有关安装 `GDB`{.literal} 和可用组件的详情，请参考 [安装 GNU
    Debugger](https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/9/html/user_guide/chap-gdb#sect-GDB-Install){.link}。
-   请确定您知道要追踪进程的 PID。
    您可以使用 `pgrep`{.literal} 命令及进程的名称来查找 PID。例如：
    ``` literallayout
    # pgrep libvirt
    22014
    22025
    ```
:::
::: itemizedlist
**流程**
-   使用 `gstack`{.literal} 实用程序，后跟您要回溯的进程的 PID。
    例如：以下命令追踪 PID 为 22014 的 libvirt 进程。
    ``` literallayout
    # gstack 22014
    Thread 3 (Thread 0x7f33edaf7700 (LWP 22017)):
    #0  0x00007f33f81aef21 in poll () from /lib64/libc.so.6