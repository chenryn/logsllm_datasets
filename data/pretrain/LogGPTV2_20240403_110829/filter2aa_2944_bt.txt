pod labels.
Use the Docker 
image that you 
built with Jib.
Expose the 
port that the 
server runs on.
353
Deploying Natter on Kubernetes
approach to allowing connections from external clients. Create a new file named
natter-api-service.yaml in the kubernetes folder with the contents of listing 10.8. 
apiVersion: v1
kind: Service
metadata:
  name: natter-api-service
  namespace: natter-api
spec:
  type: NodePort          
  selector:
    app: natter-api
  ports:
    - protocol: TCP
      port: 4567
      nodePort: 30567    
Now run the command kubectl apply -f kubernetes/natter-api-service.yaml to
start the service. You can then run the following to get a URL that you can use with
curl to interact with the service:
$ minikube service --url natter-api-service --namespace=natter-api
This will produce output like the following:
http://192.168.99.109:30567
You can then use that URL to access the API as in the following example:
$ curl -X POST -H 'Content-Type: application/json' \
  -d '{"username":"test","password":"password"}' \
  http://192.168.99.109:30567/users
{"username":"test"}
You now have the API running in Kubernetes.
10.2.4 The link-preview microservice
You have Docker images for the Natter API and the H2 database deployed and run-
ning in Kubernetes, so it’s now time to develop the link-preview microservice. To sim-
plify development, you can create the new microservice within the existing Maven
project and reuse the existing classes.
NOTE
The implementation in this chapter is extremely naïve from a perfor-
mance and scalability perspective and is intended only to demonstrate API
security techniques within Kubernetes.
To implement the service, you can use the jsoup library (https://jsoup.org) for Java,
which simplifies fetching and parsing HTML pages. To include jsoup in the project,
Listing 10.8
Exposing the API as a service
Specify the type as 
NodePort to allow 
external connections.
Specify the port to expose on 
each node; it must be in the 
range 30000–32767.
354
CHAPTER 10
Microservice APIs in Kubernetes
open the pom.xml file in your editor and add the following lines to the  section:
      org.jsoup
      jsoup
      1.13.1
An implementation of the microservice is shown in listing 10.9. The API exposes a sin-
gle operation, implemented as a GET request to the /preview endpoint with the URL
from the link as a query parameter. You can use jsoup to fetch the URL and parse the
HTML that is returned. Jsoup does a good job of ensuring the URL is a valid HTTP or
HTTPS URL, so you can skip performing those checks yourself and instead register
Spark exception handlers to return an appropriate response if the URL is invalid or
cannot be fetched for any reason.
WARNING
If you process URLs in this way, you should ensure that an attacker
can’t submit file:// URLs and use this to access protected files on the API
server disk. Jsoup strictly validates that the URL scheme is HTTP before load-
ing any resources, but if you use a different library you should check the doc-
umentation or perform your own validation.
After jsoup fetches the HTML page, you can use the selectFirst method to find
metadata tags in the document. In this case, you’re interested in the following tags:
 The document title.
 The Open Graph description property, if it exists. This is represented in the
HTML as a  tag with the property attribute set to og:description.
 The Open Graph image property, which will provide a link to a thumbnail
image to accompany the preview.
You can also use the doc.location() method to find the URL that the document was
finally fetched from just in case any redirects occurred. Navigate to the src/main/
java/com/manning/apisecurityinaction folder and create a new file named Link-
Previewer.java. Copy the contents of listing 10.9 into the file and save it.
WARNING
This implementation is vulnerable to server-side request forgery (SSRF)
attacks. You’ll mitigate these issues in section 10.2.7.
package com.manning.apisecurityinaction;
import java.net.*;
import org.json.JSONObject;
import org.jsoup.Jsoup;
Listing 10.9
The link-preview microservice
355
Deploying Natter on Kubernetes
import org.slf4j.*;
import spark.ExceptionHandler;
import static spark.Spark.*;
public class LinkPreviewer {
    private static final Logger logger =
            LoggerFactory.getLogger(LinkPreviewer.class);
    public static void main(String...args) {
        afterAfter((request, response) -> {                     
            response.type("application/json; charset=utf-8");   
        });                                                     
        get("/preview", (request, response) -> {
            var url = request.queryParams("url");
            var doc = Jsoup.connect(url).timeout(3000).get();         
            var title = doc.title();                                  
            var desc = doc.head()                                     
                    .selectFirst("meta[property='og:description']");  
            var img = doc.head()                                      
                    .selectFirst("meta[property='og:image']");        
            return new JSONObject()
                    .put("url", doc.location())                      
                    .putOpt("title", title)                          
                    .putOpt("description",                           
                        desc == null ? null : desc.attr("content"))  
                    .putOpt("image",                                 
                        img == null ? null : img.attr("content"));   
        });
        exception(IllegalArgumentException.class, handleException(400));  
        exception(MalformedURLException.class, handleException(400));     
        exception(Exception.class, handleException(502));                 
        exception(UnknownHostException.class, handleException(404));      
    }
    private static  ExceptionHandler              
            handleException(int status) {                                 
        return (ex, request, response) -> {                               
            logger.error("Caught error {} - returning status {}",         
                ex, status);                                              
            response.status(status);                                      
            response.body(new JSONObject()                                
                .put("status", status).toString());                       
        };
    }
}
10.2.5 Deploying the new microservice
To deploy the new microservice to Kubernetes, you need to first build the link-preview
microservice as a Docker image, and then create a new Kubernetes deployment and
service configuration for it. You can reuse the existing jib-maven-plugin the build the
Because this 
service will only 
be called by other 
services, you can 
omit the browser 
security headers.
Extract
metadata
properties from
the HTML.
Produce a JSON
response, taking
care with
attributes that
might be null.
Return
appropriate
HTTP status
codes if jsoup
raises an
exception.
356
CHAPTER 10
Microservice APIs in Kubernetes
Docker image, overriding the image name and main class on the command line.
Open a terminal in the root folder of the Natter API project and run the following
commands to build the image to the Minikube Docker daemon. First, ensure the envi-
ronment is configured correctly by running:
eval $(minikube docker-env)
Then use Jib to build the image for the link-preview service:
mvn clean compile jib:dockerBuild \
  -Djib.to.image=apisecurityinaction/link-preview \
  -Djib.container.mainClass=com.manning.apisecurityinaction.
➥ LinkPreviewer
You can then deploy the service to Kubernetes by applying a deployment configura-
tion, as shown in listing 10.10. This is a copy of the deployment configuration used for
the main Natter API, with the pod names changed and updated to use the Docker
image that you just built. Create a new file named kubernetes/natter-link-preview-
deployment.yaml using the contents of listing 10.10. 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: link-preview-service-deployment
  namespace: natter-api
spec:
  selector:
    matchLabels:
      app: link-preview-service      
  replicas: 1
  template:
    metadata:
      labels:
        app: link-preview-service    
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
        - name: link-preview-service
          image: apisecurityinaction/link-preview-service:latest    
          imagePullPolicy: Never
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - all
          ports:
            - containerPort: 4567
Listing 10.10
The link-preview service deployment
Give the pods the 
name link-preview-
service.
Use the link-
preview-service
Docker image
you just built.
357
Deploying Natter on Kubernetes
Run the following command to create the new deployment:
kubectl apply -f \
  kubernetes/natter-link-preview-deployment.yaml
To allow the Natter API to locate the new service, you should also create a new Kuber-
netes service configuration for it. Listing 10.11 shows the configuration for the new
service, selecting the pods you just created and exposing port 4567 to allow access to
the API. Create the file kubernetes/natter-link-preview-service.yaml with the contents
of the new listing. 
apiVersion: v1
kind: Service
metadata:
  name: natter-link-preview-service     
  namespace: natter-api
spec:
  selector:
    app: link-preview      
  ports:
    - protocol: TCP    
      port: 4567       
Run the following command to expose the service within the cluster:
kubectl apply -f kubernetes/natter-link-preview-service.yaml
10.2.6 Calling the link-preview microservice
The ideal place to call the link-preview service is when a message is initially posted to the
Natter API. The preview data can then be stored in the database along with the message
and served up to all users. For simplicity, you can instead call the service when reading a
message. This is very inefficient because the preview will be regenerated every time the
message is read, but it is convenient for the purpose of demonstration.
 The code to call the link-preview microservice is shown in listing 10.12. Open the
SpaceController.java file and add the following imports to the top:
import java.net.*;
import java.net.http.*;
import java.net.http.HttpResponse.BodyHandlers;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.regex.Pattern;
Then add the fields and new method defined in the listing. The new method takes
a link, extracted from a message, and calls the link-preview service passing the link
URL as a query parameter. If the response is successful, then it returns the link-
preview JSON.
Listing 10.11
The link-preview service configuration
Give the service 
a name.
Make sure to use the matching 
label for the deployment pods.
Expose port 4567 that 
the API will run on.
358
CHAPTER 10
Microservice APIs in Kubernetes
  private final HttpClient httpClient = HttpClient.newHttpClient();   
  private final URI linkPreviewService = URI.create(                  
          "http://natter-link-preview-service:4567");                 
  private JSONObject fetchLinkPreview(String link) {
      var url = linkPreviewService.resolve("/preview?url=" +      
              URLEncoder.encode(link, StandardCharsets.UTF_8));   
      var request = HttpRequest.newBuilder(url)                   
              .GET()                                              
              .build();                                           
      try {
          var response = httpClient.send(request,
                  BodyHandlers.ofString());
          if (response.statusCode() == 200) {         
            return new JSONObject(response.body());   
          }
      } catch (Exception ignored) { }
      return null;
  }
To return the links from the Natter API, you need to update the Message class used to
represent a message read from the database. In the SpaceController.java file, find the
Message class definition and update it to add a new links field containing a list of link
previews, as shown in listing 10.13.
TIP
If you haven’t added support for reading messages to the Natter API,
you can download a fully implemented API from the GitHub repository
accompanying the book: https://github.com/NeilMadden/apisecurityinaction.
Check out the chapter10 branch for a starting point, or chapter10-end for the
completed code.
  public static class Message {
    private final long spaceId;
    private final long msgId;
    private final String author;
    private final Instant time;
    private final String message;
    private final List links = new ArrayList<>();   
    public Message(long spaceId, long msgId, String author,
        Instant time, String message) {
      this.spaceId = spaceId;
      this.msgId = msgId;
      this.author = author;
      this.time = time;
      this.message = message;
    }
Listing 10.12
Fetching a link preview
Listing 10.13
Adding links to a message
Construct a HttpClient and a constant for the microservice URI.
Create a GET 
request to the 
service, passing 
the link as the url 
query parameter.
If the response is 
successful, then return 
the JSON link preview.
Add a list of 
link previews 
to the class.
359
Deploying Natter on Kubernetes
    @Override
    public String toString() {
      JSONObject msg = new JSONObject();
      msg.put("uri",
          "/spaces/" + spaceId + "/messages/" + msgId);
      msg.put("author", author);
      msg.put("time", time.toString());
      msg.put("message", message);
      msg.put("links", links);        
      return msg.toString();
    }
  }
Finally, you can update the readMessage method to scan the text of a message for
strings that look like URLs and fetch a link preview for those links. You can use a
regular expression to search for potential links in the message. In this case, you’ll
just look for any strings that start with http:/ / or https:/ /, as shown in listing 10.14.
Once a potential link has been found, you can use the fetchLinkPreview method
you just wrote to fetch the link preview. If the link was valid and a preview was
returned, then add the preview to the list of links on the message. Update the read-
Message method in the SpaceController.java file to match listing 10.14. The new
code is highlighted in bold.
  public Message readMessage(Request request, Response response) {
    var spaceId = Long.parseLong(request.params(":spaceId"));
    var msgId = Long.parseLong(request.params(":msgId"));
    var message = database.findUnique(Message.class,
        "SELECT space_id, msg_id, author, msg_time, msg_text " +
            "FROM messages WHERE msg_id = ? AND space_id = ?",
        msgId, spaceId);
    var linkPattern = Pattern.compile("https?://\\S+");    
    var matcher = linkPattern.matcher(message.message);    
    int start = 0;
    while (matcher.find(start)) {               
        var url = matcher.group();              
        var preview = fetchLinkPreview(url);    
        if (preview != null) {
            message.links.add(preview);    
        }
        start = matcher.end();
    }
    response.status(200);
    return message;
  }
Listing 10.14
Scanning messages for links
Return the links as 
a new field on the 
message response.
Use a regular 
expression to find 
links in the message.
Send each link to 
the link-preview 
service.