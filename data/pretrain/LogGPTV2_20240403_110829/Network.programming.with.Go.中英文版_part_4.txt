fmt.Fprintf(os.Stderr, "Usage: %s hostname\n", os.Args[0])
os.Exit(1)
}
name := os.Args[1]
addrs, err := net.LookupHost(name)
if err != nil {
fmt.Println("Error: ", err.Error())
os.Exit(2)
}
for _, s := range addrs {
fmt.Println(s)
}
os.Exit(0)
}
Note that this function returns strings, not IPAddress values.
注意，这个函数返回字符串，而不是IPAddress。
3.5 Services 服务
Services run on host machines. They are typically long lived and are designed to
wait for requests and respond to them. There are many types of services, and there
are many ways in which they can offer their services to clients. The internet world
bases many of these services on two methods of communication, TCP and UDP, although
there are other communication protocols such as SCTP waiting in the wings to take
over. Many other types of service, such as peer-to-peer, remote procedure calls,
communicating agents, and many others are built on top of TCP and UDP.
服务运行在主机。它们通常长期存活，同时被设计成等待的请求和响应请求。有许多类型的服务，有
他们能够通过各种方法向客户提供服务。互联网的世界基于TCP 和UDP 这两种通信方法提供许多这
些服务，虽然也有其他通信协议如SCTP​​伺机取代。许多其他类型的服务，例如点对点, 远过程调
用, 通信代理, 和许多其他建立在 TCP 和UDP 之上的服务之上。
Ports
端口
Services live on host machines. The IP address will locate the host. But on each
computer may be many services, and a simple way is needed to distinguish between
them. The method used by TCP, UDP, SCTP and others is to use a port number. This
is an unsigned integer beween 1 and 65,535 and each service will associate itself
with one or more of these port numbers.
服务存活于主机内。IP 地址可以定位主机。但在每台计算机上可能会提供多种服务，需要一个简单
的方法对它们加以区分。TCP，UDP，SCTP 或者其他协议使用端口号来加以区分。这里使用一个 1 到
65,535 的无符号整数，每个服务将这些端口号中的一个或多个相关联。
There are many "standard" ports. Telnet usually uses port 23 with the TCP protocol.
DNS uses port 53, either with TCP or with UDP. FTP uses ports 21 and 20, one for
commands, the other for data transfer. HTTP usually uses port 80, but it often uses
ports 8000, 8080 and 8088, all with TCP. The X Window System often takes ports
6000-6007, both on TCP and UDP.
有很多“标准”的端口。Telnet 服务通常使用端口号23 的TCP 协议。DNS 使用端口号53 的 TCP 或
UDP 协议。FTP 使用端口21 和20 的命令，进行数据传输。HTTP 通常使用端口 80，但经常使用，端
口8000，8080 和8088，协议为TCP。X Window 系统往往需要端口 6000-6007，TCP 和 UDP 协议。
On a Unix system, the commonly used ports are listed in the file /etc/services. Go
has a function to interrogate this file
在Unix 系统中, /etc/services文件列出了常用的端口。Go 语言有一个函数可以获取该文件。
func LookupPort(network, service string) (port int, err os.Error)
The network argument is a string such as "tcp" or "udp", while the service is a string
such as "telnet" or "domain" (for DNS).
network 是一个字符串例如"tcp"或"udp", service也是一个字符串，如"telnet"或
"domain"(DNS)。
A program using this is
示例程序如下
/* LookupPort
*/
package main
import (
"net"
"os"
"fmt"
)
func main() {
if len(os.Args) != 3 {
fmt.Fprintf(os.Stderr,
"Usage: %s network-type service\n",
os.Args[0])
os.Exit(1)
}
networkType := os.Args[1]
service := os.Args[2]
port, err := net.LookupPort(networkType, service)
if err != nil {
fmt.Println("Error: ", err.Error())
os.Exit(2)
}
fmt.Println("Service port ", port)
os.Exit(0)
}
For example, running LookupPort tcp telnet prints Service port: 23
举个例子, 运行LookupPort tcp telnet 打印 Service port: 23
The type TCPAddr
TCPAddr 类型
The type TCPAddr is a structure containing an IP and a port:
TCPAddr类型包含一个IP和一个port的结构:
type TCPAddr struct {
IP IP
Port int
}
The function to create a TCPAddr is ResolveTCPAddr
函数ResolveTCPAddr用来创建一个TCPAddr
func ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error)
where net is one of "tcp", "tcp4" or "tcp6" and the addr is a string composed of
a host name or IP address, followed by the port number after a ":", such as
"www.google.com:80" or '127.0.0.1:22". if the address is an IPv6 address, which
already has colons in it, then the host part must be enclosed in square brackets,
such as "[::1]:23". Another special case is often used for servers, where the host
address is zero, so that the TCP address is really just the port name, as in ":80"
for an HTTP server.
net是"tcp", "tcp4"或"tcp6"其中之一，addr是一个字符串，由主机名或IP 地址，以及":"后跟
随着端口号组成，例如： "www.google.com:80" 或 '127.0.0.1:22"。如果地址是一个 IPv6 地
址，由于已经有冒号，主机部分，必须放在方括号内, 例如："[::1]:23". 另一种特殊情况是经常
用于服务器, 主机地址为0, 因此，TCP 地址实际上就是端口名称, 例如：":80" 用来表示 HTTP 服
务器。
3.6 TCP Sockets TCP 套接字
When you know how to reach a service via its network and port IDs, what then? If
you are a client you need an API that will allow you to connect to a service and
then to send messages to that service and read replies back from the service.
当你知道如何通过网络和端口ID 查找一个服务时，然后呢？如果你是一个客户端，你需要一个 API，
让您连接到服务，然后将消息发送到该服务，并从服务读取回复。
If you are a server, you need to be able to bind to a port and listen at it. When
a message comes in you need to be able to read it and write back to the client.
如果你是一个服务器，你需要能够绑定到一个端口，并监听它。当有消息到来，你需要能够读取它并
回复客户端。
The net.TCPConn is the Go type which allows full duplex communication between the
client and the server. Two major methods of interest are
net.TCPConn是允许在客户端和服务器之间的全双工通信的Go 类型。两种主要方法是
func (c *TCPConn) Write(b []byte) (n int, err os.Error)
func (c *TCPConn) Read(b []byte) (n int, err os.Error)
A TCPConn is used by both a client and a server to read and write messages.
TCPConn被客户端和服务器用来读写消息。/p>
TCP client
TCP 客户端
Once a client has established a TCP address for a service, it "dials" the service.
If succesful, the dial returns a TCPConn for communication. The client and the server
exchange messages on this. Typically a client writes a request to the server using
the TCPConn, and reads a response from the TCPConn. This continues until either (or
both) sides close the connection. A TCP connection is established by the client using
the function
一旦客户端已经建立TCP 服务, 就可以和对方设备"通话"了. 如果成功，该调用返回一个用于通信
的TCPConn。客户端和服务器通过它交换消息。通常情况下，客户端使用TCPConn写入请求到服务器,
并从TCPConn的读取响应。持续如此，直到任一（或两者）的两侧关闭连接。客户端使用该函数建立
一个TCP 连接。
func DialTCP(net string, laddr, raddr *TCPAddr) (c *TCPConn, err os.Error)
where laddr is the local address which is usually set to nil and raddr is the remote
address of the service, and the net string is one of "tcp4", "tcp6" or "tcp" depending
on whether you want a TCPv4 connection, a TCPv6 connection or don't care.
其中laddr是本地地址，通常设置为nil和 raddr是一个服务的远程地址, net是一个字符串，根据
您是否希望是一个TCPv4 连接，TCPv6 连接来设置为"tcp4", "tcp6"或"tcp"中的一个，当然你也
可以不关心链接形式。
A simple example can be provided by a client to a web (HTTP) server. We will deal
in substantially more detail with HTTP clients and servers in a later chapter, but
for now we will keep it simple.
一个简单的例子，展示个客户端连接到一个网页(HTTP)服务器。在后面的章节，我们将处理大量的
HTTP 客户端和服务器细节，现在我们先从简单的看看。
One of the possible messages that a client can send is the "HEAD" message. This queries
a server for information about the server and a document on that server. The server
returns information, but does not return the document itself. The request sent to
query an HTTP server could be
客户端可能发送的消息之一就是“HEAD”消息。这用来查询服务器的信息和文档信息。 服务器返回的
信息，不返回文档本身。发送到服务器的请求可能是
"HEAD / HTTP/1.0\r\n\r\n"
which asks for information about the root document and the server. A typical response
might be
这是在请求服务器的根文件信息。 一个典型的响应可能是
HTTP/1.0 200 OK
ETag: "-9985996"
Last-Modified: Thu, 25 Mar 2010 17:51:10 GMT
Content-Length: 18074
Connection: close
Date: Sat, 28 Aug 2010 00:43:48 GMT
Server: lighttpd/1.4.23
We first give the program (GetHeadInfo.go) to establish the connection for a TCP
address, send the request string, read and print the response. Once compiled it can
be invoked by e.g.
我们首先通过(GetHeadInfo.go)程序来建立TCP 连接，发送请求字符串，读取并打印响应。编译后
就可以调用，例如：
GetHeadInfo www.google.com:80
The program is
程序
/* GetHeadInfo
*/
package main
import (
"net"
"os"
"fmt"
"io/ioutil"
)
func main() {
if len(os.Args) != 2 {
fmt.Fprintf(os.Stderr, "Usage: %s host:port ", os.Args[0])
os.Exit(1)
}
service := os.Args[1]
tcpAddr, err := net.ResolveTCPAddr("tcp4", service)
checkError(err)
conn, err := net.DialTCP("tcp", nil, tcpAddr)
checkError(err)
_, err = conn.Write([]byte("HEAD / HTTP/1.0\r\n\r\n"))
checkError(err)
//result, err := readFully(conn)
result, err := ioutil.ReadAll(conn)
checkError(err)
fmt.Println(string(result))
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
os.Exit(1)
}
}
The first point to note is the almost excessive amount of error checking that is
going on. This is normal for networking programs: the opportunities for failure are
substantially greater than for standalone programs. Hardware may fail on the client,
the server, or on any of the routers and switches in the middle; communication may
be blocked by a firewall; timeouts may occur due to network load; the server may
crash while the client is talking to it. The following checks are performed:
第一个要注意的点是近乎多余的错误检查。因为正常情况下，网络程序失败的机会大大超过单机的程
序。在客户端，服务器端或任何路由和中间交换上，硬件可能失败；通信可能会被防火墙阻塞;因网
络负载可能会出现超时;当客户端联系服务器，服务器可能会崩溃，下列检查是必须的：
1. There may be syntax errors in the address specified
2. The attempt to connect to the remote service may fail. For example, the service
requested might not be running, or there may be no such host connected to the
network
3. Although a connection has been established, writes to the service might fail
if the connection has died suddenly, or the network times out
4. Similarly, the reads might fail
1. 指定的地址中可能存在语法错误
2. 尝试连接到远程服务可能会失败。例如, 所请求的服务可能没有运行, 或者有可能是主机没有
连接到网络
3. 虽然连接已经建立，如果连接突然丢失也可能导致写失败，或网络超时
4. 同样，读操作也可能会失败
Reading from the server requires a comment. In this case, we read essentially a single
response from the server. This will be terminated by end-of-file on the connection.
However, it may consist of several TCP packets, so we need to keep reading till the
end of file. The io/ioutil function ReadAll will look after these issues and return
the complete response. (Thanks to Roger Peppe on the golang-nuts mailing list.).
值得一提的是,如何从服务端读取数据。在这种情况下，读本质上是一个单一的来自服务器的响应，
这将终止文件结束的连接。但是，它可能包括多个TCP 数据包，所以我们需要不断地读，直到文件
的末尾。在io/ioutil下的ReadAll函数考虑这些问题，并返回完整响应。(感谢Roger Peppe 在
golang-nuts 上的邮件列表。)。
There are some language issues involved. First, most of the functions return a dual
value, with possible error as second value. If no error occurs, then this will be nil.
In C, the same behaviour is gained by special values such as NULL, or -1, or zero
being returned - if that is possible. In Java, the same error checking is managed
by throwing and catching exceptions, which can make the code look very messy.
有一些涉及语言的问题，首先, 大多数函数返回两个值, 第二个值是可能出现的错误。如果没有错误
发生, 那么它的值为nil。在C中, 如果需要的话，同样的行为通过定义特殊值例如NULL, 或 -1, 或
0 来返回。在 Java 中, 同样的错误检查通过抛出和捕获异常来管理，它会使代码看起来很凌乱。
In earlier versions of this program, I returned the result in the array buf, which
is of type [512]byte. Attempts to coerce this to a string failed - only byte arrays
of type []byte can be coerced. This is a bit of a nuisance.
在这个程序的早期版本, 我在返回结果中返回buf数组, 它的类型是[512]byte。我试图强迫类型为
一个字符串但失败了- 只有字节数组类型[]byte可以强制转换。这确实有点困扰。
A Daytime server
一个时间(Daytime)服务器
About the simplest service that we can build is the daytime service. This is a standard
Internet service, defined by RFC 867, with a default port of 13, on both TCP and
UDP. Unfortunately, with the (justified) increase in paranoia over security, hardly
any sites run a daytime server any more. Never mind, we can build our own. (For those
interested, if you install inetd on your system, you usually get a daytime server
thrown in.)
最简单的服务，我们可以建立是时间(Daytime)服务。这是一个标准的互联网服务, 由RFC 867 定
义, 默认的端口 13, 协议是TCP 和UDP。很遗憾, 对安全的偏执，几乎没有任何站点运行着时间
(Daytime)服务器。不过没关系，我们可以建立我们自己的。 (对于那些有兴趣, 你可以在你的系统
安装inetd, 你通常可以得到一个时间(Daytime)服务器。)
A server registers itself on a port, and listens on that port. Then it blocks on
an "accept" operation, waiting for clients to connect. When a client connects, the
accept call returns, with a connection object. The daytime service is very simple
and just writes the current time to the client, closes the connection, and resumes
waiting for the next client.
在一个服务器上注册并监听一个端口。然后它阻塞在一个"accept"操作，并等待客户端连接。当一
个客户端连接, accept 调用返回一个连接(connection)对象。时间(Daytime)服务非常简单，只
是将当前时间写入到客户端, 关闭该连接，并继续等待下一个客户端。
The relevant calls are
有关调用
func ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.Error)
func (l *TCPListener) Accept() (c Conn, err os.Error)
The argument net can be set to one of the strings "tcp", "tcp4" or "tcp6". The IP
address should be set to zero if you want to listen on all network interfaces, or
to the IP address of a single network interface if you only want to listen on that
interface. If the port is set to zero, then the O/S will choose a port for you.
Otherwise you can choose your own. Note that on a Unix system, you cannot listen
on a port below 1024 unless you are the system supervisor, root, and ports below
128 are standardised by the IETF. The example program chooses port 1200 for no
particular reason. The TCP address is given as ":1200" - all interfaces, port 1200.
net参数可以设置为字符串"tcp", "tcp4"或者"tcp6"中的一个。如果你想监听所有网络接口，IP
地址应设置为0，或如果你只是想监听一个简单网络接口，IP 地址可以设置为该网络的地址。如果
端口设置为0，O/S 会为你选择一个端口。否则，你可以选择你自己的。需要注意的是，在Unix 系
统上，除非你是监控系统，否则不能监听低于1024 的端口，小于128 的端口是由IETF 标准化。该
示例程序选择端口1200 没有特别的原因。TCP 地址如下":1200" - 所有网络接口, 端口1200。
The program is
程序
/* DaytimeServer
*/
package main
import (
"fmt"
"net"
"os"
"time"
)
func main() {
service := ":1200"
tcpAddr, err := net.ResolveTCPAddr("ip4", service)
checkError(err)
listener, err := net.ListenTCP("tcp", tcpAddr)
checkError(err)
for {
conn, err := listener.Accept()
if err != nil {
continue
}
daytime := time.Now().String()
conn.Write([]byte(daytime)) // don't care about return value
conn.Close() // we're finished with this client
}
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
os.Exit(1)
}
}
If you run this server, it will just wait there, not doing much. When a client connects
to it, it will respond by sending the daytime string to it and then return to waiting
for the next client.
如果你运行该服务器, 它会在那里等待， 没有做任何事。当一个客户端连接到该服务器, 它会响应
发送时间(Daytime)字符串，然后继续等待下一个客户端。
Note the changed error handling in the server as compared to a client. The server
should run forever, so that if any error occurs with a client, the server just ignores
that client and carries on. A client could otherwise try to mess up the connection
with the server, and bring it down!