fuzzer and the fuzzer is then able to explore inputs that cause
different internal states.
while(true) {
ox=x; oy=y;
switch (input[i]) {
case 'w': y--; break;
case 's': y++; break;
case 'a': x--; break;
case 'd': x++; break;
}
if (maze[y][x] == '#'){ Bug(); }
//If target is blocked, do not advance
if (maze[y][x] != ' ') { x = ox; y = oy; }
}
Listing 1: A harder version of the maze game.
Consider the code in Listing 1. It
implements a small
game, in which the player has to navigate a labyrinth by
moving in one of four possible directions. It is based on the
famous labyrinth demo that is commonly used by the symbolic
execution community to demonstrate how a symbolic executor
can explore the state space of a maze. In this modiﬁed version,
it is possible to walk backward and to stay in the same place.
This creates a vast amount of different paths through the
program. At the same time, there are effectively only four
branches that can be covered, thus the coverage alone is not a
(a) The abstract state machine of the maze
game reduced to x, y pairs. Since the
mazes have only a few states, the fuzzer
can enumerate all.
(b) The analyst can abstract the large set
of states into smaller set of states that are
supposedly separated by certain operations.
The fuzzer can then explore edge tuples on
this state machine.
Fig. 2: An analyst view on two fuzzing problems.
Fig. 3: The circles mark the best observed x values so far. Optimizing x
for each altitude independently helps overcoming dead ends. In this case, the
input maximizing the value observed at y = 12 (x12) is very unlikely to be
helpful (Mario will hit the wall or the ceiling). However, the inputs with the
best observed values for other altitudes (such as x10) are not caught in a dead
end.
good indicator of interesting behavior. In this harder version,
even KLEE [12] fails to solve the labyrinth. Here, it is essential
to understand that the x and y coordinates are relevant states
that need to be explored. In mazes with dead ends, it is even
impossible to ﬁnd a solution by trying to increase x or y
individually. The combination of both x and y has to be
considered to uncover a solution. Since the maze is rather
small (at most only a few hundred different x, y pairs are
reachable), the analyst can instruct the fuzzer to consider any
new pair as new coverage (Figure 2.a).
Similar scenarios, where the user is aware of the precise
aspect of the state that is interesting to explore also occur with
larger state spaces. One example that demonstrates a similar
scenario is the game Super Mario Bros. (Figure 3). Again,
we mostly care about the player coordinates. However, the
space of player coordinates is signiﬁcantly larger (in the order
of the 106) than in the maze game. As a consequence, the
analyst needs to be able to provide a goal that the fuzzer
can work towards (i.e., increase the x coordinate), instead of
simply exploring all different states. This way, the fuzzer can
discard inferior intermediate results.
2) Known State Changes:
the user
might not be aware of which parts of the relevant state are
interesting to explore or the state might be spread out across
In some scenarios,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:13 UTC from IEEE Xplore.  Restrictions apply. 
1600
the application and hard to identify. Alternatively, the state
might be known, but no sufﬁciently small subset can be
identiﬁed to be used to guide the fuzzer directly. However,
it might be possible to identify parts of the code that are
expected to change the state. This situation commonly occurs
in applications that consume highly structured data such as
sequences of messages or lists of chunks in ﬁle formats. In
such situations, instead of directly exposing the state itself, the
user can create a variable that contains a log of messages or
chunk types. This variable can act as a proxy for the actual
state changes and can be exposed to the feedback function
(Figure 2.b). As a consequence, the fuzzer can now try to
explore different combinations of those state changes. In such
scenarios, the state change log serves as an abstraction layer
to the real state that cannot easily be exposed to the fuzzer.
We further elaborate on this in Example 4 of Section III-D.
msg = parse_msg();
switch(msg.type) {
case Hello: eval_hello(msg); break;
case Login: eval_login(msg); break;
case Msg_A: eval_msg_a(msg); break;
}
Listing 2: A common problem in protocol fuzzing.
Consider the dispatcher code shown in Listing 2, which is
based on many common protocol implementations. The fuzzer
will successfully uncover the different messages. However,
AFL has difﬁculties to generate interesting sequences of mes-
sages, as no novel coverage is produced for chaining messages.
The fundamental problem here is that the fuzzer is not able
to distinguish between different states in the program state
machine. By using a log of the types of messages that were
successfully processed, the fuzzer is able to explore different
states, resulting from combinations of messages, much more
effectively.
3) Missing Intermediate State: A simple example for issues
where neither coverage nor values in the program provide
relevant feedback are magic byte checks. Out of the box, AFL-
style fuzzers will not be able to solve them. Note that various
approaches try to solve this case using additional methods [1],
[7], [14], [53], [60]. However, the same problem persists in
more complex cases: if the relationship between the input and
the ﬁnal comparison gets more complex, even techniques like
concolic execution will fail. A human analyst on the other
hand, can usually reason about how the program behaves and
can often provide an indicator of progress. By encoding this
indicator as additional artiﬁcial intermediate states, the analyst
is able to guide the fuzzer. Note that for simple magic bytes
like situations, this is exactly what LAF-INTEL does.
Consider the code in Listing 3, which is based on a hard
case found in the well-known objdump binary. The program
contains a function that performs a hash table lookup and
one if condition where the lookup result is used to search
for a given string. More speciﬁcally, the key is ﬁrst hashed,
and the corresponding bucket is checked. If the bucket is
empty, no further processing takes place. If the bucket contains
some values, they are compared individually. This poses a
signiﬁcant challenge both to a concolic execution based tools
as well as fuzzers: solving this constraint requires to ﬁnd a
very speciﬁc combination of both a path (i.e., number of loop
iterations necessary to calculate the hash) and the hash value
that all share the same coverage. Even if the exact path is
found, we now still depend on both the hash and the actual
string matching. The fuzzer has to solve the comparison while
maintaining that the hash of the input is always equal to the
hash of the target string. A concolic executor would have great
trouble ﬁnding the exact path to solve this constraint.
//shortened version of a hashmap lookup from binutils
entry* bfd_get_section_by_name(table *tbl, char *str) {
entry *lp;
uint32_t hash = bfd_hash_hash(str);
uint32_t i = hash % tbl->size;
//Every hash bucket contains a linked list of strings
for (lp = tbl->table[i]; lp != NULL; lp = lp->next) {
if (lp->hash == hash && strcmp( lp->string, str) == 0)
return lp;
}
return NULL;
}
// used somewhere else
section = bfd_get_section_by_name (abfd, ".bootloader");
if (section != NULL){ ... }
Listing 3: A hash map lookup that is hard to solve (from binutils libbfd,
available at bfd/section.c).
We found that similar conditions occur more than 500 times
with various strings throughout the binutils code base. In
most cases, the hash table is ﬁlled with values from the input,
and a ﬁxed string is looked up. A human can recognize that
this effectively implements a one-to-many string comparison.
Using this insight, she can guide the fuzzer to ﬁnd a solution,
by turning this complex constraint into a series of simple string
comparisons that can be solved with LAF-INTEL-like feedback.
B. Feedback Mechanisms
As no current fuzzer allows a human analyst to directly pro-
vide feedback to the fuzzer, we design a set of annotations that
allow the analyst to inﬂuence the fuzzer’s feedback function.
Our goal is that an analyst can use these annotations to provide
high-level steering for the fuzzing process. In an interactive
fuzzing session, the analyst inspects the code coverage from
time to time to identify branches that seem hard to cover for
the fuzzer. Then the analyst can identify the reason why the
fuzzer is unable to make progress. Typically, this is an easy
task for a human. When the road block is found, the analyst
can start a second fuzzing session that focuses on solving
this road block using a custom annotation. The annotation
itself is a small patch to the target application,
typically
consisting of one, sometimes two lines of code that provide
additional feedback information. When the fuzzer solves the
road block, the long-running fuzzing session picks the inputs
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:13 UTC from IEEE Xplore.  Restrictions apply. 
1601
that produce new coverage from the temporary session and
continues fuzzing, hence overcoming the hard case.
To facilitate a workﬂow like this, we designed four general
primitives that can be used to annotate source code:
IJON_INC(x);
Listing 5: Using the IJON-INC annotation to expose the value x to the
feedback function.
1) We allow the analyst to select which code regions are
relevant to solve the problem at hand.
2) We allow direct access to the AFL bitmap to store
additional values. Bitmap entries can either be directly
set or incremented, hence enabling to expose state values
to the feedback function.
3) We enable the analyst to inﬂuence the coverage calcu-
lation. This allows the same edge coverage to result in
different bitmap coverage. This allows to create much
more ﬁne-grained feedback in different states.
4) We introduce a primitive that allows the user to add
hill climbing optimization [48]. This way, the user can
provide a goal to work towards if the space of possible
states is too large to explore exhaustively.
In the following, we explain these annotations in more detail
and illustrate how they work and can be used to implement the
additional feedback mechanisms described in Section III-A.
C. IJON-Enable
The IJON-ENABLE (and IJON-DISABLE) annotation can be
used to enable and disable coverage feedback. This way, we
can effectively exclude certain parts of the code base or guide
the fuzzer to only explore code if certain conditions are met.
IJON_DISABLE();
//...
if(x<0)
IJON_ENABLE();
Listing 4: Using the IJON-ENABLE annotation. The green highlight indicates
an added annotation.
Example 1. Consider the annotation (green highlight) in List-
ing 4. In this example, IJON-ENABLE restricts the temporary
fuzzing sessions to inputs that reach the annotated line and
have a negative value for x. This annotation allows the fuzzer
to focus on the hard problem without wasting time exploring
the many other paths in the input queue.
D. IJON-INC and IJON-SET
The IJON-INC and IJON-SET annotations can be used to
increment or set a speciﬁc entry in the bitmap. This effectively
allows new values in the state to be considered as equal
to new code coverage. The analyst can use this annotation
to expose aspects of the state to the fuzzer selectively. As
a result, the fuzzer can then explore many different values
of this variable. Effectively, this annotation adds a feedback
mechanism beyond code coverage. The fuzzer is now also
rewarded for new data coverage obtained via its test cases.
This annotation can be used to provide feedback in all three
scenarios that we described earlier.
Example 2. Consider the annotation shown in Listing 5. Every
time x changes, a new entry in the bitmap is incremented. For
example, if x is equal to 5, we calculate an index in the bitmap
based on a hash of the current ﬁle name and the current line
number and the value 5. The corresponding entry in the bitmap
is then incremented. This allows the fuzzer to learn a variety
of inputs that display a large range of behaviors, bit by bit.
Similarly,
to the IJON-INC annotation, we also provide
the IJON-SET annotation. Instead of incrementing the entry,
this annotation sets the least signiﬁcant bit of the bitmap
value directly. This enables to control speciﬁc entries in the
bitmap to guide the fuzzer. This primitive is used in all three
annotation approaches introduced earlier.
while(true) {
ox=x; oy=y;
IJON_SET(hash_int(x,y));
switch (input[i]) {
case 'w': y--; break;
//....
Listing 6: Annotated version of the maze.
Example 3. We added a one-line annotation (see Listing 6)
to the maze game introduced in Section III-A1. It uses the
combination of both x and y coordinates as feedback. As a
result, any newly visited position in the game is considered
as new coverage. We used IJON-SET instead of IJON-INC,
since we do not care how often the given position was visited.
Instead, we are only interested in the fact that a new position
was visited.
If the state cannot easily be observed, we can use state
change logging (as described earlier), in which we annotated
operations which are known to affect the state that we care
about and use the log of state changes as index for the
feedback.
Example 4. As another example, consider Listing 7. After
each successfully parsed and handled message, we append
the command index, which represents the type of the message,
to the state change log. Then we set a single bit, addressed
by the hash of
the state change log. As a consequence,
whenever we see a new combination of up to four successfully
handled messages, the fuzzer considers the input as interesting,
providing a much better coverage in the state space of the
application.
E. IJON-STATE
If the messages cannot easily be concatenated (e.g., because
there is a message counter), the state change log might be
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:13 UTC from IEEE Xplore.  Restrictions apply. 
1602
//abbreviated libtpms parsing code in ExecCommand.c
msg = parse(msg);
err = handle(msg);
if(err != 0){goto Cleanup;}
state_log=(state_log<<8)+command.index;
IJON_SET(state_log);
Listing 7: Annotated version of libtpms.
insufﬁcient to explore different states. To produce a more ﬁne-
grained feedback, we can explore the Cartesian product of
the state and the code coverage. To enable this, we provide
a third primitive that is able to change the computation of
the edge coverage itself. Similar to ANGORA, we extended
the edge tuple with a third component named the “virtual
state”. This virtual state component is also considered when
calculating the bitmap index of any edge. This annotation is
called IJON-STATE. Whenever the virtual state changes, any
edge triggers new coverage. This primitive has to be used
carefully: if the number of virtual states grows too large, the
fuzzer is overwhelmed with a large number of inputs which
effectively slows down the fuzzing progress.
IJON_STATE(has_hello + has_login);
msg = parse_msg();
//...
Listing 8: Annotated version of the protocol fuzzing example (using IJON-
STATE).
Example 5. Consider the example provided in Listing 8.
As discussed previously, without annotations, the fuzzers may
have difﬁculties exploring the combination of various mes-
sages. By explicitly adding the protocol state to the fuzzer’s
virtual state, we create multiple virtual copies of the code,
depending on the protocol state.
Therefore, the fuzzer is able to fully explore all possible
messages in various states of
the protocol state machine.
Effectively, the same edge coverage can now result in different
bitmap coverage, and hence the fuzzer can efﬁciently explore
the state space of the program under test. Note that, to prevent
state explosion, there are only three possible values for the
state. As a result, the fuzzer can fully re-explore the whole
code base, once successfully authenticated.
F. IJON-MAX
So far, we mostly dealt with providing feedback that can
be used to increase the diversity of the inputs stored. In some
cases, however, we want to optimize towards a speciﬁc goal
or the state space is simply too large to cover completely.
In such cases, we might not care about a diverse set of
values or want to discard all intermediate values. To allow
effective fuzzing in such cases, we provide a maximization
primitive called IJON-MAX. It effectively turns the fuzzer into
a generic hill climbing-based black box optimizer. To enable
maximizing more than one value, multiple (by default 512)
slots are provided to store those values. Like the coverage
bitmap, each value is maximized independently. Using this
primitive, it is also possible to easily build a minimization
primitive for x, by maximizing −x.
//inside main loop, after calculating positions
IJON_MAX(player_y, player_x);
Listing 9: Annotated version of the game Super Mario Bros.
Example 6. Consider the video game Super Mario Bros., in
which a player controls a character in a side-scrolling game.
In each level, the objective is to reach the end of the level,
while avoiding hazards such as enemies, traps, and pits. In
case the character is touched by an enemy or falls into a pit,
the game ends. To properly explore the state space of the game,
it is important to reach the end of each level. As illustrated