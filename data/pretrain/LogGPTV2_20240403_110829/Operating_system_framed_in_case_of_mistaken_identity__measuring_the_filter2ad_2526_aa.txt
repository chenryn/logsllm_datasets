title:Operating system framed in case of mistaken identity: measuring the
success of web-based spoofing attacks on OS password-entry dialogs
author:Cristian Bravo-Lillo and
Lorrie Faith Cranor and
Julie S. Downs and
Saranga Komanduri and
Stuart E. Schechter and
Manya Sleeper
Operating System Framed in Case of Mistaken Identity
Measuring the success of web-based spooﬁng attacks on OS password-entry
Cristian Bravo-Lillo1
PI:EMAIL
Saranga Komanduri2
PI:EMAIL
dialogs
Lorrie Cranor1,2
PI:EMAIL
Stuart Schechter4
PI:EMAIL
Julie Downs3
PI:EMAIL
Manya Sleeper2
PI:EMAIL
Carnegie Mellon University, 1Engineering and Public Policy, 2Computer Science, 3Social and Decision Science
4Microsoft Research
Abstract
When asking users to enter credentials, today’s desktop op-
erating systems often use windows that provide scant ev-
idence that a trusted path has been established; evidence
that would allow a user to know that a request is genuine
and that the password will not be read by untrusted prin-
cipals. We measure the eﬃcacy of web-based attacks that
spoof these operating system credential-entry windows to
steal users’ device-login passwords. We recruited 504 users
of Amazon’s Mechanical Turk to evaluate a series of games
on third-party websites. The third such website indicated
that it needed to install software from the publisher that
provided the participants’ operating system: Microsoft’s Sil-
verlight for Windows Vista/7 users and Apple’s QuickTime
for Mac OS users. The website then displayed a spoofed
replica of a window the participant’s client operating system
would use to request a user’s device credentials. In our most
eﬀective attacks, over 20% of participants entered passwords
that they later admitted were the genuine credentials used
to login to their devices. Even among those who declined to
enter their credentials, many participants were oblivious to
the spooﬁng attack. Participants were more likely to conﬁrm
that they were worried about the consequences of installing
software from a legitimate source than to report that they
thought the credential-entry window might have appeared
as a result of an attempt to steal their password.
Categories and Subject Descriptors
H.5.2 [User Interfaces]: Evaluation/methodology, Interac-
tion styles; I.3.6 [Computing Methodologies]: Method-
ologies and Techniques, Interaction Techniques
Keywords
trusted path, user interface, spooﬁng attack, usable security
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$10.00.
1.
INTRODUCTION
When a user interacts with a computing device, she may
actually be communicating with a number of diﬀerent prin-
cipals, including the operating system (OS), installed appli-
cations, or websites. The security of many user experiences
rests on the assumption that there is a trusted path from
the user to the principal she is communicating with, and
that the user can correctly identify (authenticate) this prin-
cipal. It is assumed that there is a trusted path between the
user and the OS for such purposes as authenticating with
a shared secret (e.g. a password) and authorizing access to
capabilities that may impact the security of the system.
In this paper, we measure the eﬃcacy of web-based attacks
that spoof OS windows to trick users of Mac OS X (Mac OS)
and Windows Vista/7 (Windows) into entering their device
(OS-level) login credentials. The spooﬁng attacks we tested
exploit the fact that these operating systems often request
users’ device credentials by overlaying windows on top of
windows from other principals.
Stealing credentials via spooﬁng requires two separate forms
of social engineering. First, the attacker must give the user
motivation to enter her credentials. This means creating a
task or scenario that the user wants to complete, or believes
she needs to complete, and that can only be completed if
she provides her credentials. In the extreme, this could be
as simple as presenting a window that can be dismissed only
by entering credentials, and that the user will want to close.
Second, the attacker must spoof the credential-entry inter-
face in place of a genuine interface with suﬃcient ﬁdelity
that the user will trust it.
In our attacks, we tried to motivate users to enter creden-
tials by convincing them that they should install software,
and that their credentials were required to do so. In many
contexts, credentials are indeed required to install software.
On Mac OS, installing software requires a privilege eleva-
tion, which causes a credential-entry window to appear in
the center of the screen. On Windows, User Account Con-
trol (UAC [18]) is a protection mechanism that controls the
elevation of privilege to allow installations and other sensi-
tive actions. As with Mac OS, it uses a window to verify user
intent before elevating. However, unlike Mac OS, its default
conﬁguration will only request a username and password if
the current user does not have the administrator privilege
required for elevation. Furthermore, Windows attempts to
365diﬀerentiate UAC windows from other windows by dimming
the contents of the rest of the screen when a UAC window
is present.
Windows applications may also request that the OS present
the Windows credential-entry experience (CredUI) [14] in
situations where the user should re-authenticate. Notably,
Microsoft Outlook may request the users’ credentials via
CredUI, and Microsoft Lync may request credentials through
a custom interface, even if the user has already provided
these same credentials to login to her PC. CredUI does not
dim the portions of the users’ screen controlled by other
principals.
On Mac OS, we spoofed the password-entry window that
appears when users need to elevate privileges to authorize
software installs (Figure 1a). For Windows users, we tested
both a spoofed User Account Control [18] window (Fig-
ure 1b) and a Windows CredUI [14] window (Figure 1c).
Studying security behavior is diﬃcult, as individuals’ real-
world behaviors may diﬀer from how they behave in a lab-
oratory environment. The knowledge that a study pertains
to security may cause users to focus on security more than
they otherwise would. Thus, asking participants to evaluate
warnings directly may lead to answers that are less sponta-
neous [2]. We used the subterfuge of an Amazon Mechani-
cal Turk task to evaluate third-party online games to create
a situation in which real users would encounter a spooﬁng
attack on what appeared to be a third-party site, outside
of the control of researchers. While our study design lim-
ited our participant pool to users of Mechanical Turk, the
methodology increased ecological validity.
We asked 504 workers to evaluate a series of three online
games, hosted on third-party websites, for such factors as
level of enjoyment and age appropriateness. The third such
website, controlled by us, spoofed an OS credential-entry
window requiring device-login credentials.
Under our experimental conditions, we found that in over
20% of trials, our most eﬀective attacks yielded passwords
that users later admitted that were their genuine device login
passwords. Furthermore, when participants who refrained
from revealing their credentials were asked why they did
so, only 35.3% conﬁrmed that they thought the password-
entry interface might be an attempt to steal their passwords
(a lack of trust in the interface). Many of the remaining
participants may have oblivious to the attack, but simply
weren’t motivated to enter their credentials to install new
software.
The consequences of an attacker obtaining device creden-
tials are diﬀerent than, and in some cases may be more se-
vere than, an attacker gaining website credentials. They
also vary greatly with the security posture of the victim
or the victim’s organization. If the user’s device allows re-
mote access and no ﬁrewalls block it, an attacker with the
username and password will obtain complete control of the
user’s device account and will be able to install backdoors
and key loggers. If the compromised user has administrative
access to the machine, the attacker’s keylogger can collect
usernames and passwords from other users and the attack
can snowball. Enterprise users may be more likely to have
remote access restricted by ﬁrewalls, but in many cases a
Windows domain username and password may be suﬃcient
to allow a new computer to be added to a domain, allow-
ing an attacker to bypass ﬁrewalls. Even if compromised
credentials cannot be used for remote device access, many
enterprises also allow access to web- and smartphone-based
email clients using these username and password credentials.
(a) MacOS treatments
(b) UAC treatments
(c) CredUI treatments
Figure 1: Our spoofed credential-entry windows
2. RELATED ATTACKS
The spoofable credential-entry windows we examine in
this paper are one instance of a trusted path vulnerability.
More familiar examples are phishing of website credentials,
in which both emails and websites are spoofed, and scare-
ware, in which attackers spoof infection alerts that appear to
come from already-installed trusted software to trick users
into installing malware posing as antivirus software.
Felten provides the earliest demonstration of a web spoof-
ing attack, describing it as allowing “an attacker to create a
‘shadow copy’ of the entire World Wide Web” to observe user
behavior and capture user information [9]. The bulk of web
spooﬁng attacks take the form of phishing and its variants,
in which attackers spoof email, text messages, voice, and
other communications channels to lure victims to spoofed
websites. When users login to the spoofed website, their cre-
dentials are sent to the attacker. Phishing succeeds because
many users cannot, or do not, authenticate websites. Many
users instead rely on the content area of the page, assuming
that the look and feel of a website are diﬃcult to copy [6].
Such users fail to properly interpret indicators of website
authenticity [7]. Increasingly sophisticated spooﬁng attacks
have been implemented, including attacks on more modern
browsers [29], attacks that use a graphical element to cover
366up the SSL lock icon [15], and attacks that spoof the entire
browser window, including the certiﬁcate functionality [16].
Phishing attacks are similar to the attack in our work
in that they use spooﬁng to steal credentials, motivating a
user to login via a URL that leads to the spoofed site and
then convincing the user to trust the spoofed site. Scare-
ware attacks are similar to our work in that they often spoof
windows that appear to come from trusted client software.
Scare tactics motivate users to install fake antivirus software.
They create the illusion that the client is already infected
with malware. Once installed, the fake antivirus software is
used to trick the user into paying to keep the software ‘up
to date’. Stone-Gross et al. summarize the methods and
economics behind such fake antivirus attacks [26].
One of the challenges in understanding the scope of the
scareware problem is that fake antivirus software is installed
not only through social engineering scare tactics, but also
through vulnerabilities, including browser vulnerabilities that
allow attackers to perform ‘drive-by downloads’. In the one-
year period from July 2008 to June 2009, Symantec reports
having received 43 million attempts to install rogue security
software [27] (Symantec has not released more up-to-date
statistics.) Rajab et al. claim that fake antivirus attacks
date back as far as 2003, and found that, from January 1
2009 to January 31 2010, such attacks were increasing as a
percent of domains containing malware from an incidence
rate of 3% to 15% [21]. The fraction of fake antivirus sites
that use social engineering as an installation mechanisms
also increased to 90% [21].
The best publicly-available statistics on the rate at which
users are tricked by scareware come from Cova et al., who
discovered servers hosting rogue antivirus campaigns that
reported event counts such as the number of users who
downloaded the scareware [4]. The researchers discovered
that 7.7% of users who received javascript that simulated
an antivirus scan initiated a download of the scareware.
The actual per-attack success rates were lower as downloads
may be aborted before installation commences. Only 5%
of machines that presented the fake scan reported back to
the attacker’s infrastructure that installation was successful
(roughly two thirds of the 7.7% that downloaded the scare-
ware.) [3].
3. EXPERIMENTAL DESIGN
We designed our experiment to determine the fraction of
users who would enter their passwords into a spoofed OS
window, the fraction who would detect that the window was
spoofed, and what clues (if any) users looked for to detect
if a window was spoofed.
3.1 Experimental procedure
Our experiment mimicked the experience of going to a pre-
viously unvisited website and receiving a spoofed installation
window designed to steal username and password creden-
tials. The rules of informed consent dictate that we disclose
the identity of our research institution before collecting data
from users. We thus needed a study design that would allow
us to minimize the likelihood that participants’ trust in our
research institution would cause them to behave less safely
than they otherwise would.
We received Institutional Review Board (IRB) approval
to create a deception study in which participants were told
that their job was to help us evaluate third-party gaming
websites. We did so because any trust participants had in
our institution should not extend to third-party websites,
and so before directing participants to these sites we noti-
ﬁed participants that these sites were outside our control.
However, the simulated attacks took place on a confeder-
ate gaming website, which we secretly did control. We use
the term confederate, because this website was used in much