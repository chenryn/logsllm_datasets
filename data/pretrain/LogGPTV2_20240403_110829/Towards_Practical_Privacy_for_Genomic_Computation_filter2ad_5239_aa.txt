title:Towards Practical Privacy for Genomic Computation
author:Somesh Jha and
Louis Kruger and
Vitaly Shmatikov
2008 IEEE Symposium on Security and Privacy
Towards Practical Privacy for Genomic Computation
∗
Somesh Jha
∗
Louis Kruger
Vitaly Shmatikov
†
Abstract
Many basic tasks in computational biology involve
operations on individual DNA and protein sequences.
These sequences, even when anonymized, are vulnerable
to re-identiﬁcation attacks and may reveal highly sensi-
tive information about individuals.
We present a relatively efﬁcient, privacy-preserving
implementation of fundamental genomic computations
such as calculating the edit distance and Smith-
Waterman similarity scores between two sequences. Our
techniques are cryptographically secure and signiﬁ-
cantly more practical than previous solutions. We eval-
uate our prototype implementation on sequences from
the Pfam database of protein families, and demonstrate
that its performance is adequate for solving real-world
sequence-alignment and related problems in a privacy-
preserving manner.
Furthermore, our techniques have applications be-
yond computational biology. They can be used to ob-
tain efﬁcient, privacy-preserving implementations for
many dynamic programming algorithms over distributed
datasets.
1 Introduction
Genomic data such as DNA and protein sequences
are increasingly collected by government agencies for
law enforcement and medical purposes, disseminated
via public repositories for research and medical stud-
ies, and even stored in private databases of commer-
cial enterprises. For example, deCODE Genetics aims
to collect the complete genome sequences of the entire
population of Iceland [8], while the non-proﬁt HapMap
Project is developing a public repository of representa-
Emails:
∗
†
University of Wisconsin - Madison, WI 53706.
{jha,kruger}@cs.wisc.edu
The University of Texas at Austin, TX 78712.
Email:
PI:EMAIL . Supported in part by the NSF grant IIS-
0534198.
tive genome sequences in order to help researchers to
discover genes associated with speciﬁc diseases [16].
The underlying genome records are typically col-
lected from speciﬁc individuals, and thus contain a lot of
sensitive personal information, including genetic mark-
ers for diseases, information that can be be used to es-
tablish paternity and maternity, and so on. Therefore,
genomic records are usually stored in an anonymized
form, that is, without explicit references to the identities
of people from whom they were collected.
Even if genome sequences are anonymized, re-
identiﬁcation is a major threat.
In many cases, a ma-
licious user can easily de-anonymize the sequence and
link it to its human contributor simply by recognizing the
presence of certain markers [11]. Furthermore, many ge-
netic markers are expressible in the person’s phenotype,
which includes externally observable features [25]. In
general, protecting privacy of individual DNA when the
corresponding genome sequence is available to potential
attackers does not appear realistic. Developing practi-
cal tools which can support collaborative analysis of ge-
nomic data without requiring the participants to release
the underlying DNA and protein sequences is perhaps
the most important privacy challenge in computational
biology today.
In this paper, we design and implement cryptograph-
ically secure protocols for collaborative two-party com-
putation on genomic data which are signiﬁcantly more
efﬁcient than previously proposed solutions. Our main
focus is on the dynamic programming algorithms such
as the edit distance and the Smith-Waterman algorithm
for sequence alignment, which are among the funda-
mental building blocks of computational biology [15,
Chapter 11].
This paper makes the following contributions:
• We design and implement
several privacy-
preserving protocols
for computing the edit
distance between two strings α and β, i.e., the
minimum number of delete, insert, and replace
operations needed to convert α into β.
978-0-7695-3168-7 /08 $25.00 © 2008 IEEE
DOI 10.1109/SP.2008.34
216
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
• We construct a protocol
for computing the
Smith-Waterman similarity score between two se-
quences [28] which is signiﬁcantly more tractable
than generic solutions. Smith-Waterman scores are
used for sequence alignment (e.g., pairwise Smith-
Waterman distances are directly used in phyloge-
netic tree reconstruction) and also as a distance
metric in clustering algorithms.
• We demonstrate that,
in addition to privacy-
preserving computation on genomic data, our tech-
niques generalize to a wide variety of dynamic pro-
gramming problems [4, Chapter 15].
• We evaluate our implementation on realistic case
studies, including protein sequences from the Pfam
database [2]. Our experimental results demonstrate
that our methods are tractable on sequences of up
to several hundred symbols in length.
Note: Our implementation is available for down-
load from the website http://pages.cs.
wisc.edu/˜lpkruger/sfe/ .
Even though theoretical constructions for various se-
cure multi-party computation (SMC) tasks have received
much attention (see related work below), actual imple-
mentations and performance measurements are excep-
tionally rare. Asymptotic analysis can provide a rough
intuition, but in the absence of concrete implementations
and experimental evaluations it is hard to tell whether
these theoretical designs are feasible for practical prob-
lems.
The protocols presented in this paper are accompa-
nied by publicly available implementations. They have
been evaluated on real protein sequences and analysis
workloads, demonstrating that they can be applied in
practice to problem instances of realistic size, while
achieving the same level of cryptographic security as
theoretical constructions.
Related work: Public availability of personal informa-
tion due to the Internet has brought privacy concerns to
the forefront [6, 30]. Therefore, there has been consider-
able interest in developing privacy protection technolo-
gies [5, 12, 27].
One of the fundamental cryptographic primitives for
designing privacy-preserving protocols is secure func-
tion evaluation (SFE). Generic protocols for SFE [14,
31] enable two parties A and B with respective in-
puts x and y to jointly compute any efﬁciently com-
putable (i.e., probabilistic polynomial-time) function
f(x, y) while preserving the privacy of their respective
inputs: A does not learn anything from the protocol
execution beyond what is revealed by her own input x
and the result f(x, y); a symmetric condition holds for
B. Our constructions employ Yao’s “garbled circuits”
method [21, 31] as a building block for several sub-
protocols, including privacy-preserving equality testing.
Some of our protocols use the garbled circuits construc-
tion in a non-black-box way, exploiting the speciﬁcs of
circuit encoding.
Special-purpose privacy-preserving protocols have
been developed for tasks such as auctions, surveys, re-
mote diagnostics, and so on [23, 20, 9, 10, 3], but
privacy-preserving genomic computation has received
little attention. We are aware of only two papers de-
voted to this or similar problems: Atallah et al. [1]
and Szaida et al. [29]. Neither paper provides a proof
of security. The edit distance protocol of [1] is im-
practical even for very small problem instances due to
its immense computational cost (see Section 6 and ap-
pendix C). The distributed Smith-Waterman algorithm
of [29] involves decomposing the problem instance into
sub-problems, which are passed out to several partici-
pants. It is presumed that because each participant sees
only his sub-problem, he cannot infer the inputs for the
original problem (this does not appear to imply standard
cryptographic security). It is unclear how the protocol
of [29] may be used in the two-party case, or whether
it can be generalized to other dynamic programming al-
gorithms. By contrast, our techniques are provably se-
cure and substantially more scalable, as demonstrated by
our evaluation on realistic instances of genomic analysis
problems.
2 Cryptographic Toolkit
Oblivious transfer. Oblivious transfer was originally
proposed by Rabin [26]. Informally, a 1-out-of-n oblivi-
ous transfer (denoted as OT n
1 ) is a protocol between two
parties, the chooser and the sender. The sender’s inputs
into the protocol are n values v1, . . . , vn. The chooser’s
input is an index i such that 1 ≤ i ≤ n. As a result of the
protocol, the chooser receives vi, but does not learn any-
thing about the rest of the sender’s values. The sender
learns nothing. Our protocols do not depend on a par-
ticular construction of oblivious transfer; therefore, we
simply assume that we have access to a cryptographic
primitive implementing OT n
1 . In our implementations,
we rely on the Naor-Pinkas construction [22].
Oblivious circuit evaluation. We also employ two
standard methods for secure circuit evaluation: Yao’s
“garbled circuits” method and secure computation with
217
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
shares. Consider any (arithmetic or Boolean) circuit C,
and two parties, Alice and Bob, who wish to evaluate C
on their respective inputs x and y.
Yao’s “garbled circuits” method was originally pro-
posed in [31] (a complete description and security proofs
can be found in [21]). Informally, Alice securely trans-
forms the circuit so that Bob can evaluate it without
learning her inputs or the values on any internal circuit
wire.
Alice does this by generating two random keys for
each circuit wire, one representing 0 on that wire, the
other representing 1. The keys representing Alice’s own
inputs into the circuit she simply sends to Bob. The keys
representing Bob’s inputs are transferred to Bob via the
OT 2
1 protocol. For each of Bob’s input wires, Bob acts
as the chooser using his input bit on that wire as his input
into OT 2
1 , and Alice acts as the sender with the two wire
keys for that wire as her inputs into OT 2
1 . If Bob has a
q-bit input into the circuit, then q instances of OT 2
1 are
needed to transfer the wire keys representing his input,
since each input bit is represented by a separate key.
Alice produces the “garbled” truth table for each cir-
cuit gate in such a way that Bob, if he knows the wire
keys representing the values on the gate input wires,
can decrypt exactly one row of the garbled truth table
and obtain the key representing the value of the out-
put wire. For example, consider an AND gate whose
input wires are a and b, and whose output wire is c.
Let k0
c be the random wire keys repre-
senting the bit values on these wires. The garbled truth
table for the gate is a random permutation of the fol-
a(Ek0
c )).
lowing four ciphertexts: Ek1
(k0
c )). Yao’s protocol main-
Ek0
tains the invariant that for every circuit wire, Bob learns
exactly one wire key.
c )), Ek0
c )), Ek1
b , k1
b , k0
a, k1
a, k0
a(Ek0
b
a(Ek1
b
c , k1
a(Ek1
b
(k1
(k0
(k0
b
Because wire keys are random and the mapping from
wire keys to values is not known to Bob (except for the
wire keys corresponding to his own inputs), this does not
leak any information about the actual wire values. The
circuit can thus be evaluated “obliviously.” For example,
given the above table and the input wire keys k0
a and k1
b
representing, respectively, 0 on input wire a and 1 on
input wire b, Bob can decrypt exactly one row of the
table, and learn the random key k0
c representing 0 (i.e.,
the correct result of evaluating the gate) on the output
wire c.
Observe that until Alice reveals the mapping, Bob
does not know which bits are represented by the wire
keys he holds. For the standard garbled circuit evalua-
tion, Alice reveals the mapping only for the wires that
represent the output of the entire circuit, but not for the
218
internal wires.
Several of our protocols rely on the representation of
bit values on circuit wires by random keys. These pro-
tocols use Yao’s construction not as a “black box” im-
plementation of secure circuit evaluation, but exploit its
internal structure in a fundamental way.
The second standard method is secure computation
with shares (SCWS) [13, Chapter 7]. This protocol
maintains the invariant that, for every circuit wire w, Al-
ice learns a random value sA and Bob learns sB, where
sA ⊕ sB = bw, the actual bit value of the wire. In our
protocols, we use exclusive-or, but they can work with
any secret sharing scheme. Because the shares are ran-
dom, neither party knows the actual wire value. For each
output wire of the circuit, Alice and Bob can combine
their shares to reconstruct the output bit.
3 Privacy-Preserving Edit Distance
3.1 Edit distance: deﬁnition
Let α and β be two strings over an alphabet Σ. Let
the lengths of α and β (denoted by | α | and | β |) be
n and m, respectively. The edit distance between the
two strings α and β (denoted by δ(α, β)) is the mini-
mum number of edit operations (delete, insert, and re-
place) needed to transform α into β. The following dy-
namic programming algorithm computes δ(α, β) in time
O(nm) [15].
Given a string α, let α[1 ··· i] denote the ﬁrst i char-
acters of α, and α[i] denote the i-th character of α. The
dynamic programming algorithm maintains a (n + 1) ×
(m + 1) matrix D(0 ··· n, 0 ··· m), where D(i, j) is the
edit distance between α[1 ··· i] and β[1 ··· j].
For the base case, we have the following:
D(i, 0) = i , 0 ≤ i ≤ n
D(0, j) = j , 0 ≤ j ≤ m
(1)
(2)
Next we describe a recursive relationship between the
value D(i, j) and the entries of D with indices smaller
than i and j. The (i, j)-th entry D(i, j) of the matrix is
computed as follows:
D(i, j) = min[D(i − 1, j) + 1, D(i, j − 1) + 1,
(3)
where t(i, j) is deﬁned to have value 1 if α[i] (cid:3)= β[j],
and has value 0 if α[i] = β[j]. The entire algorithm for
computing edit distance is shown in Figure 1.
D(i − 1, j − 1) + t(i, j)]
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
• Compute D(i, 0) and D(0, j) for 1 ≤ i ≤ n and 1 ≤ j ≤ m using equations 1 and 2.
• Compute D(i, j) for 1 ≤ i ≤ n and 1 ≤ j ≤ m in row major order using equation 3. In other words, we
ﬁrst compute all entries for row 1, then row 2, and so on.
• The edit distance δ(α, β) is equal to D(n, m).
Figure 1. Algorithm for computing edit distance.
3.2 Preserving privacy in edit distance