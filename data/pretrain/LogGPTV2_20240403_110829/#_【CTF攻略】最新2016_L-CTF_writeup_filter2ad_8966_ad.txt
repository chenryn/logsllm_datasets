        g = []
        for i in xrange(5):
            t = ord(data[i])
            k = ord(iv[i])
            g.append(ror8(t^k,4))
        return ''.join(map(lambda x:chr(x), g))
    def dexor_1(data,key):
        g = []
        for i in xrange(5):
            t = ord(data[i])
            k = ord(key[i])
            g.append(t^k)
        return ''.join(map(lambda x:chr(x), g))
    encdata = '''
    D9 EF 31 06 88 D6 00 62
    B1 07 48 6A 73 80 18 01
    D9 D2 75 08 25 01 18 BF
    FC 26 8C 85 83 76 12 31
    BA C6 98
    '''.replace('n','').replace(' ','').decode('hex')
    hexdump(encdata)
    s = ''
    for i in xrange(6):
        k = dexor_2(encdata[30-5*i:35-5*i])
        k = dexor_1(k,encdata[25-5*i:30-5*i])
        s = k + s
        print k
    print s
    print dexor_2(encdata[0:5])
    hexdump(s)
    hexdump(dexor_2(encdata[0:5]))
    # flag = 'LCTF{Th4nk_y0u_f0r_play1ng_th1s_gam3}'
Re200
程序最后一步是维吉尼亚加密，把密文仍到[https://www.guballa.de/vigenere-solver](https://www.guballa.de/vigenere-solver)
里得到密钥ieedcpgdhkedddfenkfaifgggcgbbbgf，然后根据程序对原始密钥的转换过程得到原始密钥
byte_804A440 = 0
byte_804A441= 0
    def process0():
        global byte_804A440
        global byte_804A441
        v0 = byte_804A441 & 0xF0 | byte_804A440 & 0xF
        byte_804A440 = (byte_804A440 & 0xF0 | byte_804A441 & 0xF) ^ 0x99
        byte_804A441 = v0 ^ 0x55
    def process1():
        global byte_804A440
        global byte_804A441
        byte_804A440 ^= byte_804A441
        v0 = byte_804A441 >> 4
        byte_804A441 = v0 | (16 * byte_804A441 & 0xFF)
    def process2():
        global byte_804A440
        global byte_804A441
        v0 = byte_804A440 >> 4
        byte_804A440 = (16 * byte_804A441 & 0xFF) | (byte_804A440 & 0xF)
        byte_804A441 = v0 | byte_804A441 & 0xF0
    def process3():
        global byte_804A440
        global byte_804A441
        byte_804A440 ^= 16 * byte_804A440 & 0xFF
        byte_804A441 ^= 16 * byte_804A441 & 0xFF
    def generate(key):
        global byte_804A440
        global byte_804A441
        if (len(key) & 1) == 1:
            key += 'x53'
        key2 = []
        key3 = []
        cipher = []
        for i in range(0, len(key), 2):
            byte_804A440 = ord(key[i])
            byte_804A441 = ord(key[i+1])
            choice = (byte_804A440 >> 2) & 3
            if choice == 0:
                process0()
            elif choice == 1:
                process1()
            elif choice == 2:
                process2()
            elif choice == 3:
                process3()
            key2.append(byte_804A440)
            key2.append(byte_804A441)
        for num in key2:
            key3.append((num & 0xF) + 0x61)
            key3.append((num >> 4) + 0x61)
        return ''.join([chr(num) for num in key3])
    final_key = 'ieedcpgdhkedddfenkfaifgggcgbbbgf'
    origin_key = ''
    for n in range(0, len(final_key), 4):
        part_key = final_key[n:n+4]
        for i in range(0x20, 0x7f):
            for j in range(0x20, 0x7f):
                key = chr(i) + chr(j)
                key_stream = generate(key)
                if key_stream == part_key:
                    origin_key += key
    print origin_key
在反推nkfa时可得到两个结果，根据语义得到Flag为H4ck1ngT0TheGate
**Re300**
程序接受管理服务器发来的控制指令进行相应的操作，根据流量包，管理服务器发送了DDos的SYN攻击指令，但是对指令数据做了AES加密，分析程序可得到key，于是解密
    from Crypto.Cipher import AES
    data1 = [
    0x06, 0x00, 0x00, 0x00, 0xf1, 0x4e, 0x0b, 0xfe, 
    0x2d, 0x94, 0xc3, 0x5c, 0x4b, 0xc6, 0x3a, 0x63, 
    0x54, 0x0d, 0xd5, 0x25, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0xb1, 0x2b, 0x36, 0xee, 
    0xda, 0xb3, 0x5c, 0x0b, 0x08, 0x9f, 0x58, 0x7e, 
    0x20, 0xeb, 0x8d, 0x01, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x7d, 0xf7, 0x6b, 0x0c, 
    0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 
    0xb9, 0x1b, 0x54, 0x6f, 0x47, 0x8d, 0x65, 0x40, 
    0x86, 0xb4, 0x7b, 0xd5, 0xb6, 0x4b, 0x40, 0xf6, 
    0xd6, 0x8d, 0x61, 0xd8, 0xb2, 0xed, 0xf9, 0x5c, 
    0x17, 0xe1, 0xc8, 0xae, 0x73, 0x19, 0x3c, 0x50, 
    0x45, 0xd5, 0x7a, 0xee, 0xcc, 0x31, 0x00 ]
    data2 = []
    key = 'x2Bx7Ex15x16x28xAExD2xA6xABxF7x15x88x09xCFx4Fx3C'
    cipher = AES.new(key)
    for i in range(0, 0x1a):
        encrypt_data = data1[4+i*16:4+16+i*16]
        plain = cipher.decrypt(''.join([chr(num) for num in encrypt_data]))
        data2.append(plain)
    print data2
得到ip为172.16.20.59，port为80，md5(ip:port)就得到flag
**Re400**
考查区块链的知识，幸亏之前听过实验室的小伙伴分享，给的magic_file是一个区块链记录，具体的是每个区块80个字节，每个块中的第4-36字节是上一块的hash值，第76-80字节是nonce，但是发现这个区块链中除了开始几个区块之外后面的区块的nonce都被清除了，程序的开始部分是在计算出每个区块的nonce值，由于一共有3400个区块，因此计算出所有的nonce需要花费很长的时间，另外最后的区块的hash值00000000d66d589aa63025b450d32cc7679e3969d62b240b348332acc16eb582，通过google发现这个区块链是公开的，因此就可以知道这个区块链所有区块的nonce，接下来可以通过查询区块的api获得之前所有区块的nonce
    import requests
    r = requests.get('https://chain.api.btc.com/v3/block/00000000d66d589aa63025b450d32cc7679e3969d62b240b348332acc16eb582')
    data = r.json()
    end = 0x7c2bac1d
    file = open('nonce', 'w')
    while (True):
        file.write(str(data['data']['nonce']) + 'n')
        if data['data']['nonce'] == end:
            print 'end'
            break
        r = requests.get('https://chain.api.btc.com/v3/block/%s' % data['data']['prev_block_hash'])
        data = r.json()
然后把获得的nonce写进每个区块
    import pwn
    file1 = open('magic_file', 'rb')
    file2 = open('nonce')
    file3 = open('origin_magic_file', 'wb')
    data1 = file1.read()
    data1 = list(data1)
    data2 = file2.readlines()
    data3 = []
    for line in data2:
        data3.append(pwn.p32(int(line[:-1])))
    for i in range(0, 3400):
        data1[i*80+76] = data3[3399 - i][0]
        data1[i*80+77] = data3[3399 - i][1]
        data1[i*80+78] = data3[3399 - i][2]
        data1[i*80+79] = data3[3399 - i][3]
    file3.write(''.join(data1))
    file3.close()
最后使用生成的magic_file运行程序得到flag，另外CPU需要支持AVX指令集才能正常运行程序。