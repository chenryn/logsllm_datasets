Each experimentâ€™s results are the compilation of 25,000(cid:150)
30,000 trials. If the faults could be injected at any randomly
selected clock cycle, the overall results would have a con(cid:2)-
dence interval of less than 0.7% at a 95% con(cid:2)dence level.
Note that for many of the experiments, the aggregate results
are subdivided for analysis, yielding larger con(cid:2)dence inter-
vals. As an extreme example, the qctrl results in Figure 9
consisted of only approximately 100 trials. This yields a con-
(cid:2)dence interval of about 10%, the largest of the data presented
in this work.
3. Injection Experiment Results
1Technically, some fraction of TLB misses would result in Termination,
speci(cid:2)cally if the errant execution accesses an invalid or inaccessible page of
memory. We conservatively categorize all TLB misses as SDC.
In this section, we present the results of our fault injec-
tion campaigns. Our results are partitioned into three sub-



sections.
In the (cid:2)rst subsection, we analyze the effects of
injecting faults randomly throughout the pipeline logic. In
the second subsection, we target groups of elements within
the pipeline logic with similar logical function, for example,
the latches and RAMs that constitute the physical register (cid:2)le.
Finally, we examine the relationship between microarchitec-
tural masking and pipeline utilization.
3.1. Transient Faults in Pipeline State
Using the fault injection methodology described in Sec-
tion 2, we performed two fault injection campaigns: one
where we injected all bits of state (latches and RAM cells)
within the processor pipeline and one where we injected only
latches. The objective of these experiments is to gain insight
into the native level of microarchitectural masking present in
a modern processor.
Before presenting the results, we must point out that we
concentrate the fault injections on the irregular portions of
the pipeline by excluding data cache, instruction cache, and
predictor RAM arrays from the fault injection campaigns.
Fault injection into cache arrays is not interesting because
these structures are easily protected with parity and error cor-
recting codes (We do, however, inject errors into the various
structures that support the caches, such as miss handling reg-
isters and memory data path latches). We also exclude any
prediction structures determined to have no effect on correct-
ness (typically, prediction structures such as branch predic-
tors only affect timing).
Figure 3 contains the results of both fault injection cam-
paigns. Each bar in the graph represents a different bench-
mark application from the SPEC2000 integer benchmark
suite. Furthermore, the data from fault injection into latches
and RAMs are labeled with an l+r suf(cid:2)x, while data from
injection into only latches are labeled with an l suf(cid:2)x.
The different benchmarks represent different workloads
on the processor, which affect the masking rate of the mi-
croarchitecture. The aggregate results are presented in the
rightmost bars in each graph. The benchmark gzip has the
highest rate of instructions committed per cycle (IPC) and
bzip2 has relatively high IPC and branch prediction rates as
well as the highest data cache hit rate. These factors con-
tribute to higher failure rates, since on average, more mean-
ingful work is in progress resulting in more vulnerable state.
We quantitatively measure this effect in Section 3.3.
Examining the aggregate bars of both graphs, one can ob-
serve that approximately 85% of latch+RAM faults and about
88% of latch-based faults are successfully masked. The frac-
tion of trials in the Gray Area accounts for another 3% for
both experiments; these faults are likely to have been masked
also, but we were not able to determine conclusively in our
framework. The remaining 12% of latch+RAM trials and 9%
of latch trials were known failures that were either SDC or
Terminated.
To understand the intrinsic level of microarchitectural
100%
95%
90%
85%
80%
sdc
terminated
gray
uarch
cc1_l
cc1_l+r
gap_l+r
gap_l
gzip_l+r
gzip_l
75%
bzip2_l+r
bzip2_l
Figure 3. Fault injection results by benchmark.
aggregate_l
aggregate_l+r
vortex_l
vortex_l+r
parser_l
parser_l+r
mcf_l+r
mcf_l
masking for our microarchitecture (between 80-90%) one
must consider that for a high-performance processor, there
are many instances of idle logic, dead program state, and in-
correct speculation that mask the effects of a transient fault.
The effect of incorrect speculation is of signi(cid:2)cance for a cur-
rent processor and increases the masking rates over the 60-
70% estimated for a processor from the late 1980s by Czech
and Siewiorek [6].
3.2. Transient Faults in Logic Blocks
The next question we ask is how various logic blocks in
the pipeline contribute to the failure rate of the microarchi-
tecture. To accomplish this, each latch or RAM cell in the
processor was categorized based on the general function pro-
vided by that bit of state. For example, latches and RAM cells
that hold instruction input and output operands are placed into
a data category. Table 1 lists the various categories of logic
blocks and provides a brief description for each, as well as the
number of bits of latches and RAM cells within that category.
The results of the fault injection campaigns (latches and
latches+RAMs) were then categorized by the logic block of
the bit of state that was injected and the resulting outcome of
the trial. The results are presented in Figures 4 and 5.
Examining Figure 4, which presents the results for each
functional block when errors are injected into latches+RAMs,
one can observe that the architectural register alias table
(archrat) and the physical register (cid:2)le (reg(cid:2)le) are especially
vulnerable to soft errors. This is not surprising since these
structures contain the software visible register (cid:2)le. The spec-
ulative register alias table (specrat) and the speculative free
list (specfreelist) also appear to be particularly vulnerable. In
order to bolster the overall reliability of our microarchitec-
ture, it would be sensible to harden these and other structures,
and we discuss some ways to do so in Section 4.
Both the latch+RAM injections and the latch-only injec-
tions show high vulnerability for the bits categorized as qctrl
and valid. Their impact on the overall fail rate is small, how-
ever, since they constitute only a small fraction of the total
state of the machine. Also, it is interesting to note that the fail
rate of the data category is the lowest, due to a combination
of low utilization rate, speculation, and logical masking.
Category
addr
archfreelist
archrat
ctrl
data
insn
pc
qctrl
reg(cid:2)le
regptr
robptr
specfreelist
specrat
valid
Description
64-bit address (cid:2)eld for memory operations.
Architectural register free list.
Architectural register alias table.
Miscellaneous control state such as decoded instruction
bundle control words and state machines.
Instruction input and output operands.
Parts of the instruction word passed along with each instruction.
62-bit program counter (cid:2)elds.
Control state associated with queues.
65-bit register (cid:2)le entries and scoreboard bits.
7-bit physical register (cid:2)le pointers.
6-bit ROB tags.
Speculative register free list.
Speculative register alias table.
Valid bits throughout the pipeline.
Bits of Latches
Bits of RAMs
384
0
0
2502
5899
1525
1984
176
80
978
352
0
0
263
3584
336
224
1916
2820
2016
12480
0
5200
1852
444
336
224
124
Table 1. Description of different categories of state.
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
addr
archrat
archfreelist
ctrl
data
insn
pc
sdc
terminated
gray
uarch
qctrl
regfile
regptr
robptr
specrat
specfreelist
aggregate
valid
fault
injection into
Figure 4. Results of
latches+RAMs by type.
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
sdc
terminated
gray
uarch
aggregate
valid
addr
ctrl
data
insn
insnctrl
memdata
pc
qctrl
regptr
robptr
Figure 5. Results of fault injection into latches
by type.
3.3. Correlation Between Utilization and Masking
We were able to extract an interesting phenomenon from
the data collected from our fault injection campaigns(cid:151)there
is a correlation between the number of valid instructions in
the pipeline and the level of microarchitectural masking. In
Figure 6, a scatter-plot shows the percentage of non-failures
(Gray Area and
Arch Match) versus the number of valid in-
structions in the pipeline at the time of injection. Here, valid
instructions are de(cid:2)ned as instructions that will eventually
commit their results to architected state, i.e. those that are not
a result of a mis-speculation. This plot was generated for in-
jections into latches+RAMs, and a linear least mean squared
trendline is also displayed. This data is in the same vein as
work done by Mukherjee et al. [21], which estimated archi-
tectural vulnerability factors for various structures based on
their level of utilization.
Each data point in the scatter plot represents 100 trials
from a starting checkpoint. The relatively small number of
trials per data point results in a large con(cid:2)dence interval, con-
tributing to noise in the graph. Nonetheless, a strong trend is
present, indicating that a microprocessor is more vulnerable
to transient faults when it is full of valid instructions. Inter-
estingly, even when the pipeline is nearly full (we can theo-
retically have at most 132 instructions in the pipeline at any
point in time), approximately 70% of all transient faults still
do not propagate to architectural state, better re(cid:3)ecting mask-
ing levels quoted by past researchers.
100%
e
t
a
r
t
l
u
a
f
i
n
g
n
e
b
95%
90%
85%
80%
75%
70%