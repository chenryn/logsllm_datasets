### 注
尾随点是这里语法的一个重要部分:
![docker build](img/image01_18a.jpg)
打开 JavaScript 目录，构建如下 JavaScript 映像:
```
>$ docker build -t js-docker .
```
运行命令将根据**文件**中的四行命令概述四个步骤。
运行`docker images`列出了你已经创建的两个映像和你之前提取的任何其他映像。
## 移除 Docker 映像
`docker rmi `命令用于删除映像。让我提醒你，运行`docker images`命令可以找到映像标识。
要删除未标记的映像(假定不相关)，bash 脚本的知识会派上用场。使用以下命令:
```
docker rmi $(docker images | grep "^" | awk "{print $3}")
```
这只是在`docker images`命令的行中搜索带有的映像，并返回第三列中的映像标识:
![Removing Docker Images](img/image01_19a.jpg)
## 活动 4 —利用 Docker 映像
通过在终端上键入`docker`，确保 Docker CLI 正在运行。
让你熟悉用映像运行容器。
您被要求从活动 C 中编写的文档文件中构建一个映像。停止正在运行的容器，删除映像，并使用不同的名称重建它。
1.  Docker 启动并运行了吗？在终端或命令行应用上键入`docker` 。
2.  打开 JavaScript 示例目录。
3.  运行`docker build -t `(观察步骤并记录结果)。
4.  运行`docker run .`
5.  运行`docker stop .`
6.  运行`docker rmi .`
7.  运行`docker build -t .`
8.  运行`docker ps`(注意结果；旧映像不应该存在)。
# 从映像运行容器
还记得我们提到的容器是由映像构建的吗？命令`docker run `基于该映像创建一个容器。可以说容器是映像的运行实例。另一个提醒是，该映像可以是本地的，也可以在注册表中。
继续运行已经创建的映像`docker run python-docker`和`docker run js-docker:`
![Running Containers From Images](img/image01_20a.jpg)
你注意到了什么？容器将输出传送到终端的相应线路。请注意，Dockerfile 中以 CMD 开头的命令是这样运行的:
```
docker build -t python-docker:test .  and docker build -t js-docker:test .
```
然后，运行以下命令:
```
python-docker:test and docker run js-docker:test
```
### 注
您将在终端上看不到任何输出。
这并不是因为我们没有一个命令`CMD`在容器一打开就运行。对于由 **Python** 和 **Node** 构建的两个映像，都有一个从基础映像继承的`CMD`。
### 注
创建的映像总是从基础映像继承。
我们运行的两个容器包含运行一次并退出的脚本。检查`docker ps`的结果，您将没有列出之前运行的两个容器中的任何内容。但是，运行`docker ps -a`会显示容器及其退出状态。
有一个命令列显示构建容器的映像的 CMD。
运行容器时，可以按如下方式指定名称:
`docker run --name  `(例如`docker run --name py-docker-container python-docker`):
![Running Containers From Images](img/image01_21a.jpg)
我们之前概述过，您只想要相关的 Docker 映像，而不是``标记的 Docker 映像。
作为对于容器，需要注意的是一张图片可以有多个容器。`docker rm `是移除容器的命令。这适用于退出的容器(那些没有运行的容器)。
### 注
对于仍在运行的容器，您必须:
移除容器前，请停止容器(`docker stop )`
用力移除容器(`docker rm  -f`)
如果运行`docker ps`、则不会列出任何容器，但如果我们运行`docker ps -a`，您会注意到容器已列出，它们的命令列将显示继承的 CMD 命令:`python3`和`node`:
![Running Containers From Images](img/image01_22a.jpg)
## 蟒蛇
Python 映像的 Dockerfile 中的 CMD 为`python3`。这意味着`python3`命令在容器中运行，容器退出。
### 注
考虑到这一点，人们无需在自己的机器上安装 Python 就可以运行 Python。
尝试运行这个:`docker run -it python-docker:test`(用我们上次创建的映像)。
我们进入容器中的一个交互式 bash 外壳。`-it`指示 Docker 容器创建这个 shell。外壳运行`python3`，这是 Python 基础映像中的 CMD:
![Python](img/image01_23a.jpg)
在命令`docker run -it python-docker:test python3 run.py, python3 run.py`中就像在容器内的终端中一样运行。注意`run.py`在容器内，所以运行。运行`docker run -it python python3 run.py`将表明缺少`run.py`脚本:
![Python](img/image01_24a.jpg)
![Python](img/image01_25a.jpg)
同样的也适用于 JavaScript，说明这个概念是全面适用的。
`docker run -it js-docker:test`(我们上次创建的映像)将有一个外壳运行节点(节点基础映像中的 CMD):
![Python](img/image01_26a.jpg)
`docker run -it js-docker:test node run.js`将输出`Hello Docker - JS:`
![Python](img/image01_27a.jpg)
这证明了 Docker 映像中的继承因素。
现在，用最后一行的 **CMD 命令**将 Dockerfiles 返回到它们的原始状态。
# 版本化映像和 Docker 集线器
还记得在*话题 D* 中谈到的版本化映像吗？我们通过添加最新的和使用一些数字对我们的映像，如`3.x.x`或`3.x.x-rc.`
在本主题中，我们将通过使用标签进行版本控制，并了解官方映像在过去是如何进行版本控制的，从而学习最佳实践。
这里使用的命令如下:
```
docker build -t : 
```
比方说，我们知道 Python 有几个版本:Python 3.6、3.5 等等。Node.js 还有几个。如果您查看 Docker Hub 上的官方 Node.js 页面，您会在列表顶部看到以下内容:
9.1.0、9.1、9、最新(9.1/Dockerfile)(截至 2017 年 11 月):
![Versioning Images and Docker Hub](img/image01_28a.jpg)
这个版本化系统叫做 semver:语义版本化。该版本号以增量方式具有格式 MAJOR、MINOR、PATCH:
**主要**:对于向后不兼容的变更
**MINOR** :当你有向后兼容的变化时
**补丁**:当你修复向后兼容的 bug 时
您会注意到标签，如`rc`和其他附加到映像的预发布和构建元数据。
当建立你的形象，特别是发布给公众或你的团队时，使用 semver 是最好的做法。
也就是说，我主张你永远这样做，并把它作为个人的口头禅:永远是关键。它将消除使用映像时的模糊和混乱。
# 部署 Docker 映像到 Docker 中心
每次我们运行时，创建的映像在本地都是可用的。通常，Dockerfile 与代码库一起托管；因此，在新机器上，需要使用`docker build`来创建 Docker 映像。
借助 Docker Hub，任何开发人员都有机会将 Docker 映像托管到运行 Docker 的任何机器中。这有两个作用:
*   消除了重复的运行任务`docker build`
*   添加了一种共享应用的额外方式，与共享应用代码库链接和详细说明设置过程的**自述文件**相比，该方式更易于设置
`docker login`是通过命令行界面连接到**Docker 中心**的命令。您需要在 hub.docker.com 有一个帐户，并通过终端输入用户名和密码。
`docker push `是将映像发送到注册表的命令，Docker Hub:
![Deploying a Docker Image to Docker Hub](img/image01_30a.jpg)
在[hub.docker.com](http://hub.docker.com)上对你的映像进行简单的搜索，就会得到你的 Docker 映像的输出。
在一台新机器上，一个简单的`docker pull ` 命令将在本地生成一份你的映像。
# 总结
在本课中，我们完成了以下工作:
*   回顾了 DevOps 工作流和 Docker 的一些用例
*   浏览 Dockerfile 语法
*   对应用和运行容器的构建映像有了深入的了解
*   构建了许多映像，对它们进行版本控制，并将其推送到 Docker Hub