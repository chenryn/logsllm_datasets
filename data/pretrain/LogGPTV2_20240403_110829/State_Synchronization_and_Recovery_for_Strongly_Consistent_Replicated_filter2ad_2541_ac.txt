### Level State Synchronization

The synchronization of the client-server negotiated information is compared with the state of the ORBS (Object Request Broker Service) hosting operational replicas of the same server object. The response from the new server replica, to an artificially-injected handshake, confirms to Eternal's Recovery Mechanisms that the ORBPOA-level state for the new server replica is correctly synchronized. This response can then be safely discarded.

### 4.3 Infrastructure-Level State

Infrastructure-level state is entirely independent of and invisible to the replicated object, as well as the ORB and POA. It involves only the information that Eternal needs to maintain consistent replication. This state includes essential information for duplicate detection and garbage collection of the log.

For each operational replica it hosts, Eternal's Recovery Mechanisms (running on the same processor as the replica) store the following locally:

- **Interoperable Object Reference (IOR):** A stringified representation of the serverâ€™s host name, port number, object key, etc.
- **Invocations:** The invocations issued by the replica and for which responses are awaited.
- **Enqueued Invocations and Responses:** Invocations and responses enqueued while the replica is not quiescent, for delivery when it becomes quiescent.
- **Replication Style:** The type of the replica, such as active, warm passive primary, warm passive backup, cold passive primary, or cold passive backup.
- **Operation Identifiers:** Eternal-generated identifiers that enable the Recovery Mechanisms to filter duplicate invocations and responses intended for the replica.

During recovery, the Recovery Mechanisms hosting an existing replica "piggyback" the infrastructure-level state onto the application-level and ORB/POA-level states, transferring them to the Recovery Mechanisms hosting the new replica. The receiving mechanisms assign the application-level state first, followed by the ORB/POA-level state, and finally the infrastructure-level state before allowing the new replica to become fully operational and process any incoming invocations or responses. The retrieval and assignment of the three types of state appear as a single atomic action, ensuring that the state transfer occurs at a single logical point in time.

### 5 State Transfer

The frequency of state retrieval or checkpointing is determined on a per-replicated-object basis by the user at the time of deploying the application, along with other fault tolerance properties such as replication style, number of replicas, and their locations.

Checkpointing frequency does not guarantee immediate state retrieval (via a `get-state()` operation). The replicated object may be in the middle of another operation or waiting for a response. To determine the appropriate time to deliver the `get-state()` invocation, Eternal must ensure the object is quiescent, i.e., safe from the viewpoint of replica consistency to receive a new invocation. Determining quiescence involves examining the status of current invocations, threads executing within the process, and shared data with other in-process objects. The use of one-way, CORBA-supported invocations that do not return responses adds complexity. Eternal provides mechanisms to ascertain quiescence, though these are beyond the scope of this paper.

### 5.1 Synchronization of State Transfer Messages

During recovery, the current application-level state must be retrieved from an existing replica or a log before being assigned to a new replica. It is crucial that the retrieval and assignment of state be seen to occur at the same logical point in time; otherwise, the state retrieved by the `get-state()` invocation will not match the state assigned by the `set-state()` invocation. The Recovery Mechanisms handle these synchronization issues.

- **`get-state()` Invocation:** Must be delivered only to existing replicas with the current consistent state.
- **`set-state()` Invocation:** Must be delivered only to the new replica.

Both invocations are received in the sequence of multicast messages by the Mechanisms hosting both the new and existing replicas. However, the actions taken upon receipt differ based on whether the receiving Recovery Mechanisms host an existing or a new replica.

**Figure 5** illustrates the steps in synchronizing the state transfer for two replicas of a replicated object A, where A1 is an existing replica and A2 is a new replica.

1. **Step (i):** At the existing replica A1, Eternal delivers the `get-state()` invocation. Since the new or recovering replica A2 has not yet been initialized with the correct state, the `get-state()` operation is not delivered to A2. Instead, the receipt of the `get-state()` invocation triggers Eternal to start enqueueing normal incoming IIOP messages at the new or recovering replica.

2. **Step (ii):** While A1 is performing the `get-state()` operation, regular invocations (e.g., Invocation X) may arrive for the replicated object A. Since A1 is busy, these invocations are enqueued for later delivery. Similarly, since A2 has not yet been recovered, these invocations are also enqueued at A2.

3. **Step (iii):** The `get-state()` invocation completes. Eternal extracts the return value and uses it as the parameter for a fabricated `set-state()` invocation. The relevant pieces of ORB/POA-level and infrastructure-level state are piggybacked onto this `set-state()` invocation.

4. **Step (iv):** The `set-state()` invocation, along with the piggybacked ORB/POA-level and infrastructure-level states, is multicast. Replica A1 is now free to process invocations, and Eternal delivers the enqueued messages (e.g., Invocations X and Y) to A1.

5. **Step (v):** When the `set-state()` invocation is received by Eternal at the new or recovering replica A2, it overwrites the message at the head of the queue (previously occupied by the `get-state()` invocation). The piggybacked ORB/POA-level and infrastructure-level states are extracted and assigned to their respective counterparts for A2, while the `set-state()` invocation containing the application-level state is processed.

This ensures that the state transfer is synchronized and consistent across all replicas.