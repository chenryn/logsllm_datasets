### System Call Performance and Overheads with SEIMI

SEIMI introduces additional performance overheads for system calls, particularly those involving simple kernel operations. This is due to the extra steps required for saving and restoring the interrupted context during signal handling, leading to higher performance costs.

### Table IV: Context-Switching Latency (in µs)

| Configuration | Native (µs) | SEIMI (µs) | Slowdown (%) |
|---------------|-------------|------------|--------------|
| 2p/0K         | 12.6        | 15.9       | 20.0%        |
| 2p/16K        | 8.43        | 11.52      | 18.9%        |
| 2p/64K        | 8.13        | 10.1       | 16.1%        |
| 8p/16K        | 12.2        | 14.8       | 24.2%        |
| 8p/64K        | 2.05        | 2.45       | 21.3%        |
| 16p/16K       | 2.06        | 2.46       | 36.7%        |
| 16p/64K       | 3.1         | 3.6        | 26.2%        |

**Analysis:**
- The table shows the latency of context switches for different numbers of processes and working set sizes.
- Context switch time is defined as the time needed to save the state of one process and restore the state of another.
- Tests with more processes generally have higher overheads, while tests with larger working set sizes but the same number of processes have lower overheads.
- The geometric mean overhead of SEIMI is 22.51%.

### Table V: File & VM System Latency (in µs)

| Operation     | Native (µs) | SEIMI (µs) | Slowdown (%) |
|---------------|-------------|------------|--------------|
| 0K File Create| 5.4717      | 6.9623     | 27.2%        |
| 0K File Delete| 4.7816      | 5.3421     | 11.7%        |
| 10K File Mmap | 10.9        | 14.5       | 33.0%        |
| Protection Fault | 6.6214    | 7.4527     | 12.6%        |
| Page Fault    | 6779        | 12500      | 84.4%        |
| 100fd Select  | 0.636       | 1.038      | 63.2%        |
| 100fd Read    | 0.1593      | 0.2128     | 33.6%        |
| 100fd Write   | 1.016       | 1.705      | 67.8%        |

**Analysis:**
- The table shows the latency for file creation/deletion, file mappings, protection fault, page fault, and select() on file descriptors.
- The geometric mean overhead of SEIMI is 33.56%, with a maximum of 84.4% and a minimum of 11.7%.
- The protection fault and page fault tests reflect the overhead incurred by SEIMI on exception handling via triggering more expensive VM exits.
- Other tests mainly incur overheads due to system call handling in SEIMI.

### Figure 5: Performance Overhead on SPEC Benchmarks

- **OCFI:**
  - MPX: 26.63%
  - MPK: 34.83%
  - SEIMI: 18.29%
  - SEIMI is faster in all 19 cases, with ∆pk ranging from 0.08% to 231.03%. Compared to MPX, SEIMI is faster in nine cases, with ∆px ranging from 2.13% to 143.37%.
  
- **SS:**
  - MPX: 14.57%
  - MPK: 21.08%
  - SEIMI: 12.49%
  - SEIMI is faster in all cases, with ∆pk ranging from 0.27% to 90.5%. Compared to MPX, SEIMI is faster in eight cases, with ∆px ranging from 1.04% to 98.39%.
  
- **CPI:**
  - MPX: 6.20%
  - MPK: 6.11%
  - SEIMI: 4.15%
  - SEIMI is faster in most cases, except for 447.dealII, 462.libquantum, and 473.astar, where ∆pk is -1.64%, -5.26%, and -1.07% respectively. For other cases, ∆pk ranges from 0.01% to 100.93%. Compared to MPX, SEIMI is faster in ten out of seventeen cases, with ∆px ranging from 0.48% to 17.88%.
  
- **AG:**
  - MPX: 10.35%
  - MPK: 2.14%
  - SEIMI: 1.04%
  - 433.milc is the only case where MPK is faster than SEIMI, with ∆pk = -1.25%. For other cases, ∆pk ranges from 0.01% to 11.34%. Compared to MPX, SEIMI is faster in all cases except 473.astar, with ∆px = -13.38%. For the remaining cases, ∆px ranges from 2.28% to 28.27%.

### Performance Analysis

- On average, SEIMI incurs less performance overhead compared to MPX and MPK schemes.
- In some cases, the MPX-based scheme may outperform SEIMI. The overhead in the address-based scheme (MPX) mainly comes from bound-checking, while the domain-based scheme (MPK) incurs overhead from enabling and disabling access permissions.
- The relative performance depends on the specific workload, with CFreq (bound-checking frequency) and SFreq (permission-switching frequency) being key factors.

### Table VII: Performance Overhead on Real-World Applications

| Application   | IH (%) | SEIMI (%) | MPK (%) | MPX (%) |
|---------------|--------|-----------|---------|---------|
| Nginx         | 1.86   | 1.77      | 5.32    | 3.86    |
| Apache        | 1.64   | 2.82      | 1.82    | 2.43    |
| Lighttpd      | 2.77   | 5.74      | 4.46    | 0.90    |
| Openlitespeed | 1.04   | 1.61      | 3.88    | 6.38    |
| MySQL         | 3.17   | 3.79      | 8.08    | 8.95    |
| SQLite        | 1.42   | 2.70      | 1.84    | 1.58    |
| Redis         | 1.10   | 4.71      | 2.15    | 4.71    |
| Memcached     | 2.43   | 1.45      | 5.01    | 2.58    |
| ChakraCore    | 0.90   | 2.94      | 3.42    | 3.78    |
| V8            | 6.38   | 1.70      | 6.83    | 3.42    |
| JavaScriptCore| 8.95   | 5.39      | 1.44    | 1.42    |
| SpiderMonkey  | 1.58   | 0.91      | 2.89    | 2.99    |

**Note:**
- Overheads are normalized to the unprotected applications.
- "—" indicates that the defense failed to compile or run.

### Table VIII: Effects of Bound-Checking and Permission-Switching Frequencies on Performance

| Application   | IH (%) | SEIMI (%) | MPK (%) | MPX (%) |
|---------------|--------|-----------|---------|---------|
| Nginx         | 2.01   | —         | —       | —       |
| Apache        | —      | —         | —       | —       |
| Lighttpd      | —      | —         | —       | —       |
| Openlitespeed | —      | —         | —       | —       |
| MySQL         | —      | —         | —       | —       |
| SQLite        | —      | —         | —       | —       |
| Redis         | —      | —         | —       | —       |
| Memcached     | —      | —         | —       | —       |
| ChakraCore    | —      | —         | —       | —       |
| V8            | —      | —         | —       | —       |
| JavaScriptCore| —      | —         | —       | —       |
| SpiderMonkey  | —      | —         | —       | —       |

**Note:**
- The table shows the effects of bound-checking frequency (CFreq) and permission-switching frequency (SFreq) on performance.
- The exact values for CFreq and SFreq are not provided in the original data.