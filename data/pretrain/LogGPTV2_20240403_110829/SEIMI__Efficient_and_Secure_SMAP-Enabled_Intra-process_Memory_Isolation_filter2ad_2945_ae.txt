than system calls (as shown in Table I). As a result, system calls
with simple kernel operations tend to have higher performance
overheads with SEIMI. For signals, SEIMI performs extra
operations on saving and restoring the interrupted context, thus
incurring higher performance overhead.
TABLE IV: Context-switching latency (in µs); smaller is better.
2p/0K 2p/16K 2p/64K 8p/16K 8p/64K 16p/16K 16p/64K
Config
12.6
2.05
Native
SEIMI
15.9
2.46
Slowdown 20.0% 18.9% 16.1% 24.2% 21.3% 36.7% 26.2%
8.43
11.52
8.13
10.1
12.2
14.8
2.06
2.45
3.1
3.6
Table IV shows the latency of context switches with various
numbers of processes and different working set sizes via pipe-
based taken passing. Context switch time is defined here as the
time needed to save the state of one process and restore the
state of another process. The results show that tests with more
processes have a higher overhead; however, tests with larger
working set sizes but same number of processes have a smaller
overhead. The geomean overhead of SEIMI is 22.51%.
Config
0K File
TABLE V: File & VM system latency (in µs); smaller is better.
100fd
select
0.636 0.1593 1.016
Native
SEIMI
1.038 0.2128 1.705
Slowdown 27.2% 11.7% 33.0% 12.6% 84.4% 63.2% 33.6% 67.8%
Prot
Create Delete Create Delete Latency Fault
5.4717 4.7816 10.9 6.6214
6779
6.9623 5.3421 14.5 7.4527 12500
Page
Fault
10K File
Mmap
Table V shows the latency of file creation/deletion, file
mappings, protection fault, page fault, and select() on file
descriptors. The geomean overhead of SEIMI is 33.56%, with a
maximum of 84.4% and a minimum of 11.7%. The protection
fault and page fault tests reflect the overhead incurred by
SEIMI on the exception handling via triggering the more
expensive VM exits. The overheads in other tests are mainly
incurred by the system-calls handling in SEIMI.
Fig. 5: Performance overhead on the SPEC benchmarks incurred by defenses when using IH/MPX/MPK/SEIMI to protect their sensitive data.
All overheads are normalized to the unprotected benchmarks. Some benchmarks are missing, because the defenses failed to compile or run.
TABLE VI: Local-communication latency (in µs); smaller is better.
Pipe
9.2
11.7
9.883
11.7
13.9
17.6
Config
AF
UNIX
UDP RPC/ TCP RPC/ TCP
TCP conn
22
17.6
Native
SEIMI
23.9
24
Slowdown 33.1% 27.2% 18.4% 34.2% 26.6% 35.8% 9.1%
UDP
14.9
20
5.582
7.428
Table VI shows the results for various local communication-
related operations, such as TCP connection and IPC communi-
cation using pipe, TCP, UDP, RPCs, and UNIX sockets. The
geomean overhead of SEIMI is 24.23%, with a maximum of
35.8% and a minimum of 9.1%.
B. Macrobenchmarks Evaluation
Figure 5 shows the performance overhead of four defenses
with different
isolation schemes. The geometric mean of
performance overheads incurred by OCFI, SS, CPI, and AG
with the IH-based scheme are 5.19%, 3.33%, 3.44%, and 0.98%,
respectively. To better compare SEIMI with MPK/MPX,
we define Overheadscheme as the overhead incurred by a
defense with a specific isolation scheme. We also define ∆pk
(=Overheadmpk − Overheadseimi) as the relative overhead
between MPK and SEIMI; ∆px is the relative overhead
between MPX and SEIMI.
OCFI. As shown in Figure 5(a), when using MPX, MPK,
and SEIMI to protect OCFI, the performance overheads are
26.63%, 34.83% and 18.29%. Compared to MPK, SEIMI is
faster in all 19 cases, and the range of ∆pk is [0.08%, 231.03%].
Compared to MPX, SEIMI is faster on nine cases. For these
nine cases, the range of ∆px is [2.13%, 143.37%]; for the
remaining cases, the range of ∆px is [-281.99%, -14.94%].
SS. As shown in Figure 5(b), when using MPX, MPK, and
SEIMI to protect SS, the performance overhead are 14.57%,
21.08%, and 12.49%, respectively. Compared to MPK, SEIMI
is faster on all cases, and the range of ∆pk is [0.27%, 90.5%].
Compared to MPX, SEIMI is faster on eight cases. For these
eight cases, the range of ∆px is [1.04%, 98.39%]; for the
remaining cases, the range of ∆px is [-110.84%, -7.96%].
Fig. 6: The impact of bound-checking frequency (CFreq) and
permission-switching frequency (SFreq) on performance.
CPI. As shown in Figure 5(c), when using MPX, MPK, and
SEIMI to protect CPI, the performance overhead are 6.20%,
6.11%, and 4.15%, respectively. Compared to MPK, SEIMI
is faster on all cases except 447.dealII, 462.libquantum, and
473.astar (∆pk is -1.64%, -5.26%, and -1.07%). This is because
these cases have more frequent VM exits than others. For other
cases, the range of ∆pk is [0.01%, 100.93%]. Compared to
MPX, SEIMI is faster on ten cases (10/17). For these ten
cases, the range of ∆px is [0.48%, 17.88%]; for the remaining
cases, the range of ∆px is [-121.86%, -0.7%].
AG. As shown in Figure 5(d), when using MPX, MPK, and
SEIMI to protect AG, the performance overhead are 10.35%,
2.14%, and 1.04%, respectively. 433.milc (∆pk=-1.25%) is the
only case where MPK is faster than SEIMI, which is also
due to more frequent VM exits. For the remaining cases, the
range of ∆pk is [0.01%, 11.34%]. Compared to MPX, SEIMI
is faster on all cases except 473.astar (∆px=-13.38%). For the
remaining cases, the range of ∆px is [2.28%, 28.27%].
Performance Analysis: On average, the performance over-
head incurred by SEIMI is much less than the MPX-based
scheme and the MPK-based scheme. However, in some cases,
the MPX-based scheme may outperform SEIMI. We conduct
the following analysis to explain the reasons. The overhead
incurred by the address-based scheme mainly comes from the
bound-checking while the overhead incurred by the domain-
based mainly comes from the enabling and disabling of the
access permission. Therefore, which performs better depends
on the protection workloads. We define CFreq as the number
11
-10%10%30%50%70%90%ORIGMPXMPKSEIMI(c) CPI-10%40%90%140%190%240%290%340%390%Runtime OverheadORIGMPXMPKSEIMI(a) OCFI-10%40%90%140%190%Runtime OverheadORIGMPXMPKSEIMI(b) SS(d) AG135%210%285%360%435%510%585%135%210%285%120%200%280%360%IHIHIH-5%0%5%10%15%20%25%30%ORIGMPXMPKSEIMIIH0.01.02.03.04.05.06.07.0020040060080010001200Overhead Ratio OH(MPX) / OH(SEIMI)Trendline (MPX/SEIMI)CFreq./ SFreq.12.1E+1020002347001200TABLE VII: Performance overhead on real world applications incurred by four defenses when using IH/MPX/MPK/SEIMI to protect their
sensitive data. All overheads are normalized to the unprotected applications. “—” represents the defense failed to compile or run it.
OCFI
SS
CPI
AG
Applications
Nginx
Apache
Lighttpd
Openlitespeed
MySQL
SQLite
Redis
Memcached
ChakraCore
V8
JavaScriptCore
SpiderMonkey
IH
1.86%
1.64%
2.77%
1.04%
3.17%
1.42%
SEIMI
MPK
1.77%
5.32%
2.82%
1.82%
5.74% 4.46%
1.61%
3.88%
3.79%
8.08%
2.70%
1.84%
MPX
IH
SEIMI
3.86%
1.10%
2.43% 0.90% 6.38% 8.95%
1.58%
4.71%
2.15% 1.45% 5.01% 2.58%
2.94% 3.42%
3.78% 1.70% 6.83% 3.42%
5.39%
1.44%
1.42% 0.91% 2.89% 2.99%
12.09%
1.75%
3.94%
—
1.61%
2.11%
1.94% 1.36% 3.11% 2.66%
4.51% 5.46% 13.12% 10.31% 1.18% 2.81% 5.36% 5.06% 1.24% 4.47% 4.81%
3.44% 1.04% 6.02% 7.28%
1.64%
—
5.15%
3.03%
—
2.57%
2.96%
2.22% 22.87% 39.65% 26.81% 20.69% 38.34% 47.77% 31.82%
—
1.75%
5.19%
—
MPK
MPX
7.33% 10.49%
6.83%
6.36%
6.33%
6.85%
1.92%
3.39%
9.60% 11.99%
3.46%
2.19%
5.57%
8.13%
7.92% 10.09%
8.01%
4.05%
6.64%
12.09%
11.63%
7.46%
9.90%
5.04%
2.74%
4.10%
3.37%
2.38%
4.37%
2.05%
—
—
IH MPX MPK SEIMI
IH MPX MPK SEIMI
2.01%
—
—
—
—
—
—
—
—
—
—
—
TABLE VIII: The effects of bound-checking frequency and
permission-switching frequency on performance.
3.08% 0.74% 7.60% 5.27%
—
1.80%
—
2.46%
—
1.38%
—
—
2.18%