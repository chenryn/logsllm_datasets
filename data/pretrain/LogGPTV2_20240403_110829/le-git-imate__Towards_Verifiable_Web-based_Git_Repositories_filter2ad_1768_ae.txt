Keybase puts the private keys at risk if the passphrase is compromised.
We note that GitHub has recently introduced a feature to verify GPG signed commits using the public
key of the signer [45], which is stored and managed by GitHub. However, relying on an untrusted server
to manage user keys does not ﬁt our threat model, and so le-git-imate does not leverage this feature.
6. Security analysis
In this section, we analyze the security guarantees provided by le-git-imate.
6.1. Prevent web UI attacks
le-git-imate relies in part on extracting information from the commit webpage in order to compute the
veriﬁcation record (for the lightweight design) or the signed commit object (for the main design). To
prevent the web UI attacks described in Section 4.3, le-git-imate has additional checks that retrieve Git
objects via the API, and verify their correctness before use based on either a le-git-imate veriﬁcation
record or a standard Git commit signature.
To defend against a server that presents an incorrect list of changes before a merge commit, we use
the API to compute independently the list of changes based on the heads of the branches that are being
426
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
merged. We then compare it with the list of changes presented in the webpage, and alert the user of any
inconsistencies. Since the “hash tree” ﬁeld is computed based on Git objects retrieved via the API, the
GitHub server has to create commit objects that are consistent with the commit signature. Otherwise,
any inconsistencies will be detected when the veriﬁcation procedure is run.
To defend against the hidden HTML tags attack, we leverage the fact that a benign GitHub merge
commit webpage should present only one HTML tag describing the number of commits present in the
branches being merged. If more than one such tag is detected, we notify the user. We also inform the
user about the number of commits that should be visible in the rendered webpage, and the user can
visually check this information. Assuming there are n commits, we then check that there are n HTML
tags describing a commit and report any discrepancy to the user as well.
Before pushing the commit to the server, le-git-imate displays in a pop-up window three text areas as
follows:
(1) information about parent commit (author, committer, and creation date), retrieved via the API. This
helps the user to detect if the new commit is added on top of a commit other than the head of the
branch;
(2) for regular commits, the differences between the parent commit (retrieved via the API) and the
commit that is about to be created. This allows the user to detect any inconspicuous changes made
by malicious scripts in the commit webpage;
(3) the ﬁelds of the new commit object. This allows the user to check if the ﬁelds of the new commit
match the information displayed on GitHub’s commit webpage.
Whereas these checks may not be 100% effective since they are done manually by the user, they
provide important clues to the user about potential ongoing attacks. le-git-imate forces the server to
provide consistent repository information between what is displayed in the user’s browser and what is
provided in response to API queries. For example, in the incorrect history merge attack of Fig. 7, if C4
is hidden from both browser UI and API queries, the user doing the merge would notice the attack, for
instance, because the latest displayed commit, C3, may not have a satisfactory commit message (e.g.,
ready to be merged, or feature/patch is ﬁnished). If the server displays C4 on the webpage, but hides it
in API queries, the manual checks would help to detect the inconsistency.
It is notable that the pop-up window could be integrated with the original GitHub webpage. However,
the content of the GitHub page may be manipulated by malicious scripts originating from the untrusted
server. To mitigate this threat, le-git-imate uses an isolated pop-up window to display the signed infor-
mation. Since this pop-up window is created locally by le-git-imate, the browser enforces that data in
this window can only be written by scripts associated with the le-git-imate extension. A similar approach
is used by other security-conscious browser extensions such as Mailvelope [46] and FlowCrypt [47].
Based on the above discussion, we argue that le-git-imate achieves security guarantee SG1.
6.2. Ensure accurate web UI commits
To create a signed veriﬁcation record or a standard Git commit signature, le-git-imate uses information
about the user (i.e., author, committer), the state of the repository (i.e., the head of the branch), and the
user’s requested actions (i.e., the “tree hash” computed over the changes made by the user). To capture
such information, le-git-imate relies on the content of the GitHub webpage and a set of Git objects
retrieved from the server. Since all this information is veriﬁed before use (as described in Section 6.1),
le-git-imate cannot be tricked into using incorrect information. Thus the commits created by le-git-imate
reﬂect the user’s actions and our solution achieves security guarantee SG2.
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
427
6.3. Prevent modiﬁcation of committed data
Commits created by le-git-imate have either a signed veriﬁcation record or a standard commit signa-
ture. In either case, the signature is calculated over a payload of information including the commit size,
the tree hash, the hash of parent(s) commit, and the commit’s author. This prevents attackers from chang-
ing the committed data without being detected. Indeed, any unauthorized modiﬁcations (e.g., delete a ﬁle
or change the author) in the committed data will be caught during the veriﬁcation procedure (described
in Section 5.3.3). Therefore, we conclude that le-git-imate achieves security guarantee SG3.
7. Experimental evaluation
In this section, we study the performance of our browser extension prototype to see whether it meets
design goal #5. Speciﬁcally, we investigate whether the time to sign a web UI commit remains within
usable parameters for our different implementations. In addition, we consider the tradeoffs between
setup time and disk space required.
For this evaluation, we covered ﬁve variants of our tool:
• No-Cache: In this approach, a local Git CLI client clones an entire branch and computes the new
Git commit object, whereas the browser extension computes the veriﬁcation record based on infor-
mation from the new commit. This is the “Basic approach 1” described in Section 5.4.2.
• Cache: This approach is the same as above, but it uses a local copy of the repository (as cache).
Thus, the client retrieves only new objects that were created since the previous commit. Based on
our ﬁndings about the top 50 most starred GitHub projects, we assume a cached local repository is
behind the remote repository by 4 commits (for a regular commit) and by 10 commits (for a merge
commit). This corresponds to the “Basic approach 2” described in Section 5.4.2.
• NativeSign: A baseline approach in which the local script of the extension performs a signed commit
locally using a Git client. This is the same as the Cache approach, however, it results in a standard
signed Git commit object.
• Optimized1: An optimized approach based on the lightweight design, that queries for Git objects
on demand to compute the veriﬁcation record exclusively in the browser. This does not require a
local repository nor any additional tools outside of the browser.
• Optimized2: An optimized approach based on the main design, that queries for Git objects on
demand to create signed commit objects exclusively in the browser. Compared to the Optimized1
variant, it creates a standard signed Git commit object on the client side.
7.1. Experimental results
To test our implementations against a wide range of scenarios, we picked ﬁve repositories of different
history sizes, ﬁle counts, directory-tree depths and ﬁle sizes, as shown in Table 1. To simulate real-life
scenarios, they were chosen from the top 50 most popular GitHub repositories (popularity is based on
the “star” ranking used by GitHub, which reﬂects users’ level of interest in a project5).
The client was run on a system with Intel Core i7-6820HQ CPU at 2.70 GHz and 16 GB RAM.
The client software consisted of Linux 4.8.6-300.fc25.x86_64 with git 2.19 and the GnuPG gnupg2-2.7
5The statistics refer to the top 50 GitHub projects as of August 25, 2019.
428
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
Table 1
Size (MB)
File count
File size (bytes)
History size (# of commits)
Repositories chosen for the evaluation. We show the size of the master branch, the number of ﬁles, the average ﬁle size, and the
number of commits for each repository
Repo.
gitignore
vue
youtube-dl
react
go
3,153
3,035
17,231
121,293
40,779
564
10,880
6,308
9,132
10,543
231
549
944
1,563
8,677
1.9
15.2
46.7
97.6
182.3
Table 2
Execution time for a regular commit (in seconds)
Repo.
gitignore
vue
youtube-dl
react
go
No-Cache
0.37
0.85
4.01
5.46
14.81
Cache
0.16
0.22
0.22
0.25
0.20
NativeSign
Optimized1
Optimized2
0.16
0.22
0.23
0.25
0.21
0.33
0.35
0.32
0.36
0.45
0.61
0.62
0.66
0.63
0.72
library for 2048-bit RSA signatures. Experimental data points in the tables of this section represent the
median over 30 independent runs. For all variants, the time to push the Git commit object to the server is
not included in the measurements. When running the ﬁve variants of our tool, we noticed that one CPU
core (out of 8 cores) was used.
We note that, compared to an earlier version of this article [48], the experimental numbers in this sec-
tion for the Optimized1 of le-git-imate are smaller. This is because we have improved the implementation
of that variant by reducing the number of GitHub API calls by two times for regular commits (from four
to two API calls) and by four times for merge commits (from twelve to three API calls).
Regular commits. Table 2 shows the execution time for regular commits for all variants of our tool.
A regular commit consists of editing a ﬁle that is two subdirectory levels below the root level and
committing the changed ﬁle (we also measured the time for commits in a subdirectory nested up to four
levels below the root level, but the difference is negligible – under a tenth of a second). The size of the
changes for the edited ﬁle was 1.2 kilobytes, which is the maximum size of the changes observed for the
top 50 most starred GitHub projects.
In the case of the No-Cache variant, the execution time is dominated by the time to clone the repository.
Notice that this only requires to retrieve one commit object with all its corresponding trees and blobs,
which leaves little space for optimization. In contrast, the Cache and NativeSign variants are barely
affected by network operations, since only new objects are retrieved from the remote Git repository.
The optimized variants fetch the minimum number of Git objects needed to compute the commit
object. As a result, they are inﬂuenced by two factors: (1) the number of changed ﬁles and (2) the location
of these ﬁles in the repository, which determines the number of tree objects needed to be retrieved. In
particular, repository size is not a major factor for the performance of the optimized variants.
It is important to point out that the execution time for the optimized variants is dominated by the time
to retrieve the Git objects from the remote server over the network. On average, Optimized1 is about
300 ms faster than Optimized2 due to the fact that Optimized2 needs to create a packﬁle of all new
objects the server does not have. That includes, as explained in Section 5.4.3, making additional network
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
429
Table 3
Execution time for a merge commit (in seconds)
Repo.
gitignore
vue
youtube-dl
react
go
No-Cache
0.41
0.92