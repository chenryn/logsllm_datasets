:::
以具有超级用户权限（root 用户）的用户身份运行容器工具，如 Podman、Skopeo
或 Buildah 是确保容器能够完全访问系统中可用的任何功能。但是，在 RHEL 8.1
中使用的名为\"Rootless
Containers\"的功能，您可以以普通用户身份使用容器。
虽然容器引擎（如 Docker）可让您以普通（非 root）用户身份运行 Docker
命令，但执行这些请求的 Docker 守护进程将以 root
用户身份运行。因此，普通用户可以通过其容器发出可能会损害系统的请求。通过设置无根容器用户，系统管理员可以防止常规用户造成容器活动潜在的损坏，同时仍允许这些用户在其自己的帐户下安全地运行大多数容器功能。
这个步骤描述了如何设置您的系统以使用 Podman、Skopeo 和 Buildah 工具以非
root
用户身份处理容器。它还描述了您将遇到的一些限制，因为常规用户帐户无法完全访问其容器可能需要运行的所有操作系统功能。
::: itemizedlist
**先决条件**
-   您需要成为 root 用户来设置 RHEL 系统，以允许非 root
    用户帐户使用容器工具。
:::
::: orderedlist
**流程**
1.  安装 RHEL。
2.  安装 `podman`{.literal} 软件包：
    ``` literallayout
    # yum install podman -y
    ```
3.  创建新用户帐户：
    ``` literallayout
    # useradd -c "Joe Jones" joe
    # passwd joe
    ```
    ::: itemizedlist
    -   用户会自动配置为能够使用无根 Podman。
    -   `useradd`{.literal} 命令会在 `/etc/subuid 和 /etc/sub`{.literal}
        gid``{=html} 文件中自动设置可访问用户和组 ID 的范围。
    :::
4.  连接到用户：
    ``` literallayout
    $ ssh PI:EMAIL
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
不要使用 `su`{.literal} 或 `su -`{.literal}
命令，因为这些命令不会设置正确的环境变量。
:::
::: orderedlist
1.  拉取 `registry.access.redhat.com/ubi8/ubi`{.literal} 容器镜像：
    ``` literallayout
    $ podman pull registry.access.redhat.com/ubi8/ubi
    ```
2.  运行名为 `myubi`{.literal} 的容器并显示 OS 版本：
    ``` literallayout
    $ podman run --rm --name=myubi registry.access.redhat.com/ubi8/ubi cat \
        /etc/os-release
    NAME="Red Hat Enterprise Linux"
    VERSION="8.4 (Ootpa)"
    ```
:::
::: itemizedlist
**其它资源**
-   [使用 Podman
    的无根容器：基础知识](https://developers.redhat.com/blog/2020/09/25/rootless-containers-with-podman-the-basics/){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_starting-with-containers_building-running-and-managing-containers.html#proc_upgrading-to-rootless-containers_assembly_starting-with-containers}升级到无根容器 {.title}
:::
本节介绍如何从 RHEL 7 升级到 rootless 容器。您必须手动配置用户和组 ID。
在从 RHEL 7 升级到 rootless 容器时需要考虑以下几点：
::: itemizedlist
-   如果设置多个无根容器用户，请为每个用户使用唯一的范围。
-   使用 65536 UID 和 GID
    最大限度与现有容器镜像兼容，但这个数字可以减小。
-   切勿使用 1000 以下的 UID 或 GID，或重新使用来自现有用户帐户的 UID 或
    GID（默认情况下，从 1000 开始）。
:::
::: itemizedlist
**先决条件**
-   已创建用户帐户。
:::
::: itemizedlist
**流程**
-   运行 `usermod`{.literal} 命令，为用户分配 UID 和 GID：
    ``` literallayout
    # usermod --add-subuids 200000-201000 --add-subgids 200000-201000 username
    ```
    ::: itemizedlist
    -   `usermod --add-subuid`{.literal}
        命令手动向用户帐户添加一系列可访问的用户 ID。
    -   `usermod --add-subgids`{.literal}
        命令手动向用户帐户添加一组可访问的用户 GID 和组 ID。
    :::
:::
::: itemizedlist
**验证步骤**
-   检查 UID 和 GID 是否已正确设置：
    ``` literallayout
    # grep username /etc/subuid /etc/subgid
    #/etc/subuid:username:200000:1001
    #/etc/subgid:username:200000:1001
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_starting-with-containers_building-running-and-managing-containers.html#con_special-considerations-for-rootless-containers_assembly_starting-with-containers}对无根容器的特别考虑 {.title}
:::
以非 root 用户身份运行容器时，需要考虑以下事项：
::: itemizedlist
-   对于 root
    用户(`/var/lib/containers/storage)和非 root 用户($HOME/`{.literal}.local/share/containers/storage``{=html})，主机容器存储的路径不同。
-   运行无根容器的用户被授予在主机系统上作为用户和组群 ID
    运行的特殊权限。但是，它们对主机上的操作系统没有 root 权限。
-   如果您需要配置无根容器环境，请在主目录(`$HOME/.config/containers`{.literal})中创建配置文件。配置文件包括
    `storage.conf`{.literal} （用于配置存储）和
    `containers.conf`{.literal} （用于各种容器设置）。您还可以创建
    `registry.conf`{.literal} 文件，以标识使用 Podman
    拉取、搜索或运行镜像时可用的容器 registry。
:::
::: itemizedlist
-   有些系统功能在没有 root
    特权的情况下将无法更改。例如，您无法通过在容器内设置
    `SYS_TIME`{.literal}
    功能并运行网络时间服务(`ntpd`{.literal})来更改系统时钟。您必须以
    root 用户身份运行该容器，绕过无根容器环境并使用 root
    用户的环境。例如：
    ``` screen
    $ sudo podman run -d --cap-add SYS_TIME ntpd
    ```
    请注意，这个示例允许 `ntpd`{.literal}
    为整个系统调整时间，而不只是在容器内调整。
-   无根容器无法访问号小于 1024
    的端口。在无根容器命名空间中，它可以启动一个从容器中公开 httpd
    服务端口 80 的服务，但无法在命名空间外访问：
    ``` screen
    $ podman run -d httpd
    ```
    但是，容器需要 root 权限，使用 root
    用户的容器环境向主机系统公开该端口：
    ``` screen
    $ sudo podman run -d -p 80:80 httpd
    ```
-   workstation 的管理员可以允许用户在编号低于 1024
    的端口上公开服务，但他们应了解安全隐患。例如，普通用户可以在官方端口
    80 上运行 Web
    服务器，并让外部用户认为它是由管理员配置的。这在工作站上可以接受用于测试，但在可通过网络访问的开发服务器上可能不是不错的想法，在生产服务器上绝对不应该这样做。要允许用户将端口绑定到
    80 以下的端口，请运行以下命令：
    ``` screen
    # echo 80 > /proc/sys/net/ipv4/ip_unprivileged_port_start
    ```
:::
::: itemizedlist
**其它资源**
-   [无根 Podman
    的缺点](https://github.com/containers/libpod/blob/master/rootless.md){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_starting-with-containers_building-running-and-managing-containers.html#_additional_resources}其它资源 {.title}
:::
::: itemizedlist
-   [容器术语实用简介](https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction){.link}
:::
:::
:::
[]{#assembly_types-of-container-images_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#assembly_types-of-container-images_building-running-and-managing-containers}第 2 章 容器镜像类型 {.title}
:::
容器镜像是一个二进制文件，其中包含运行单个容器的所有要求，以及描述其需求和功能的元数据。
容器镜像有两种类型：
::: itemizedlist
-   红帽企业 Linux 基础镜像（RHEL 基础镜像）
-   红帽通用基础镜像（UBI 镜像）
:::
这两种类型的容器镜像都是从红帽企业 Linux
的部分内容构建的。通过使用这些容器，用户可以从出色的可靠性、安全性、性能和生命周期中受益。
两种容器镜像的主要区别在于 UBI
镜像允许您与其他人共享容器镜像。您可以使用 UBI
构建容器化应用程序，将其推送到您选择的 registry
服务器，与他人轻松共享，甚至将其部署在非红帽平台上。UBI
镜像旨在作为容器开发的云原生和 Web 应用程序用例的基础。
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#con_general-characteristics-of-rhel-containerErra-images_assembly_types-of-container-images}RHEL 容器镜像的一般特征 {.title}
:::
以下特征适用于 RHEL 基础镜像和 UBI 镜像。
通常，RHEL 容器镜像是：
::: itemizedlist
-   [**支持**]{.strong}：红帽支持用于容器化应用程序。它们包含与 Red Hat
    Enterprise Linux 相同的安全、经过测试并认证的软件包。
-   [**目录**]{.strong}: 在 [Red Hat Container
    Catalog](https://access.redhat.com/containers/){.link}
    中列出，其中包含每个镜像的描述、技术详情和健康索引。
-   [**更新**]{.strong} ： [Red Hat Container Image
    Updates](https://access.redhat.com/articles/2208321){.link}
    文章附带了定义明确的更新计划，以获取最新的软件。
-   [**跟踪：由红帽产品勘误跟踪**]{.strong}，以帮助了解每次更新中添加的更改。
-   [**可重复使用**]{.strong}
    ：在生产环境中需要下载并缓存容器镜像。每个容器镜像都可以被包括在其基础的所有容器重复使用。
:::
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#con_characteristics-of-ubi-images_assembly_types-of-container-images}UBI 镜像的特性 {.title}
:::
UBI 镜像允许您与他人共享容器镜像。提供四个 UBI
镜像：micro、min、standard 和 init。预构建语言运行时镜像和 YUM
存储库可用于构建应用程序。
以下特征适用于 UBI 镜像：
::: itemizedlist
-   [**基于 RHEL 内容的子集构建**]{.strong}: 红帽通用基础镜像由普通 Red
    Hat Enterprise Linux 内容的子集构建。
-   [**可重新分发**]{.strong} ： UBI 镜像可让红帽客户、合作伙伴、ISV
    和其他客户标准化。使用 UBI
    镜像，您可以在可自由共享和部署官方红帽软件的基础上构建容器镜像。
-   [**提供一组四个基础镜像**]{.strong} ：micro、min、standard 和 init。
-   [**提供一组预构建的语言运行时容器镜像：基于**]{.strong} [Application
    Streams](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/installing_managing_and_removing_user-space_components/using-appstream_using-appstream#application-streams_using-appstream){.link}
    的运行时镜像为应用提供基础，可受益于标准、受支持的运行时，如
    python、perl、php、dtnet、nodejs 和 ruby。
-   [**提供一组关联的 YUM 存储库**]{.strong} ： YUM 存储库包括 RPM
    软件包和更新，允许您添加应用程序依赖项并重新构建 UBI 容器镜像。
    ::: itemizedlist
    -   The `ubi-8-baseos`{.literal} 存储库包含容器中可以包含的 RHEL
        软件包的可重新分发子集。
    -   The `ubi-8-appstream`{.literal}
        存储库包含应用程序流软件包，您可以添加到 UBI
        镜像中，以帮助您对需要特定运行时的应用程序进行标准化。
    -   [**添加 UBI RPM**]{.strong}：您可以从预先配置的 UBI 软件仓库将
        RPM 软件包添加到 UBI
        镜像中。如果您处于断开连接的环境中，则必须允许 UBI Content
        Delivery[Network(https://cdn-ubi.redhat.com](https://cdn-ubi.redhat.com){.link})列入这个功能。详情请查看
        [Connect to
        https://cdn-ubi.redhat.com](https://access.redhat.com/solutions/4165521){.link}。
    :::
-   [**许可证**]{.strong}：可以使用并重新分发 UBI 镜像,，遵循 [Red Hat
    Universal Base Image End User Licensing
    Agreement](https://www.redhat.com/licenses/EULA_Red_Hat_Universal_Base_Image_English_20190422.pdf){.link}。
:::
::: itemizedlist
**其它资源**
-   [红帽通用基础镜像简介](https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image){.link}
-   [通用基础镜像(UBI)：镜像、存储库和软件包](https://access.redhat.com/articles/4238681){.link}
-   [您都需要了解 Red Hat Universal Base
    Image](http://crunchtools.com/all-you-need-to-know-about-red-hat-universal-base-image/){.link}
-   [常见问题 -
    通用基础镜像](https://developers.redhat.com/articles/ubi-faq){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#con_understanding-the-ubi-standard-images_assembly_types-of-container-images}了解 UBI 标准镜像 {.title}
:::
标准镜像(named `ubi`{.literal})专为在 RHEL 上运行的任何应用程序设计。UBI
标准镜像的主要功能包括：
::: itemizedlist
-   [**init 系统**]{.strong}：标准基础镜像中有管理 systemd 服务所需的
    systemd 初始化系统的所有功能。这些 init
    系统可让您安装预配置为自动启动服务的 RPM 软件包，如 Web
    服务器(httpd`)`{.literal}或 FTP 服务器(`vsftpd`{.literal})。
-   [**yum**]{.strong} ：您可以访问免费的 yum
    存储库来添加和更新软件。您可以使用标准 `yum`{.literal}
    命令集（`yum`{.literal}
    `、yum-config-manager`{.literal}、`yumdownloader`{.literal} 等）。
-   [**实用程序**]{.strong} ：实用程序包括
    `tar`{.literal}、`dmidecode`{.literal}、`gzip`{.literal}、`getfacl`{.literal}
    和其他 acl 命令、`dmsetup`{.literal}
    和其他设备映射器命令（此处未提及的其他实用程序）。
:::
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#con_understanding-the-ubi-init-images_assembly_types-of-container-images}了解 UBI init 镜像 {.title}
:::
UBI init 镜像（名为 `ubi-init）`{.literal} 包含 systemd
初始化系统，这有助于构建您要在其中运行 systemd 服务的镜像，如 web
服务器或文件服务器。init
镜像内容小于您使用标准镜像获得的内容，但要比最小镜像中的内容要多。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
由于 `ubi8-init`{.literal} 镜像在 `ubi8`{.literal}
镜像基础上构建，因此其内容基本相同。但是，有一些关键区别：