clocks to the messages transmitted among processes. Then,
the synchronized logic clocks are used to time-stamp the
method-execution events hence maintain the global partial
ordering of all such events during D’s execution.
For each of the n processes (Pi) in the execution, besides
the trace (Ti) of the partially-ordered, time-stamped method
execution events, a mapping (p2 f m[i]) is produced to keep the
timestamp (p2 f m[i][ j]) of each message-passing event of Pi
receiving the ﬁrst message from a process Pj (i, j∈[1,n], j(cid:54)=i).
This mapping is used to enhance the precision of the
interprocess dependence inference.
Method-level analysis (1.3). With the event traces and
mapping from Step 1.2, FLOWDIST then identiﬁes (from
D) the list SO (resp., SI) of the enclosing methods of each
source (resp., sink) in C and computes the method-level
paths according to Algorithm 1. The key idea is to combine
method-level control ﬂow and process-level data ﬂow for a
dynamic method-level dependence approximation.
speciﬁc concrete execution of D, and a user conﬁguration
C that speciﬁes the sources and sinks as common inputs
required by DIFA/DTA. Optionally, a list of message-passing
APIs that FLOWDIST recognizes in order to monitor
interprocess communication (i.e., message-passing) events
may be given in C. If the user does not specify this
list, common message-passing APIs in the language (e.g.,
Java) SDK would be considered by default (as listed
in [65]/Message_PassingAPIList.txt and in the Appendix).
With these inputs, FLOWDIST proﬁles method execution
events and branch coverage hence computes method-level
information ﬂow paths in its pre-analysis phase (Phase 1)
to narrow down the scope of later analyses that may be
highly expensive (hence impede the overall scalability of
FLOWDIST) otherwise. Then, in the reﬁnement phase (Phase
2), FLOWDIST reﬁnes the method-level paths via a hybrid
analysis of dynamic dependencies, using the method events
and branch coverage. This phase produces statement-level
ﬂow paths as the eventual output of FLOWDIST.
Working example. To illustrate how FLOWDIST works, we
will use the case of Figure 1 as a working example: running
ZooKeeper against a system test, querying information ﬂow
paths between two methods (java.nio.channels.SocketChannel
read(java.nio.ByteBuffer) and java.io.DataOutput writeInt(int)) as
a source/sink pair (i.e., ﬂow path query). For brevity, we will
omit from our illustrations the callees not shown in the ﬁgure.
3.2 Pre-analysis (Phase 1)
Figure 3: The process of FLOWDIST pre-analysis (Phase 1).
To enable a cost-effective DIFA, FLOWDIST uses (1)
several forms of dynamic data and (2) static dependencies.
Computing these, especially (2), can be too expensive to scale
to large-scale systems, as we have empirically validated. The
pre-analysis aims to reduce the overall cost by narrowing
down the scope of such computations, in three steps as shown
in Figure 3 and detailed below.
Static analysis and instrumentation (1.1). FLOWDIST
utilizes three kinds of dynamic data in its hybrid analysis
of dynamic dependencies to achieve a good cost-effectiveness
balance, as inspired by prior work [70]: (1) two kinds
of method execution events—entry (i.e., program control
entering a method) and returned-into (i.e., program control
returning from a callee into a caller), (2) two kinds of
The algorithm searches paths ps by traversing the n
per-process traces (lines 2-11). In each trace Ti, the set Sd
of covered source-enclosing methods is obtained (line 3). No
path would start in Pi (corresponding to Ti) if there is no
source executed in Pi (line 4). Otherwise, for each method q
in Sd, the algorithm attempts to identify paths starting at q by
computing its dynamic dependence set DS(q) (lines 5-10).
2096    30th USENIX Security Symposium
USENIX Association
Static Analysis & InstrumentationComputing relevant methods andprobing for monitoring eventsInstrumented programD TracingRun D  to trace method and branch eventsMethod event tracesMethod-level information flow pathsMethod-Level AnalysisComputing method-level information flow paths1.1Branch coverageUser configuration CDistributed program DProgram Input I1.21.3Sd = {s|s ∈ SO∧ s ∈ Ti}
if Sd==/0 then continue
for each method q ∈ Sd do
Algorithm 1 Computing method-level ﬂow paths
let SO and SI be the list of source and sink enclosing methods, respectively
let Ti be time-stamped method execution event trace in process Pi, i∈[1,n]
1: ps = /0
// initialize the set of all method-level paths between the given pair
2: for i=1 to n do
// traverse the n processes of the given execution
3:
4:
5:
6:
7:
8:
9:
10:
11:
if DS(q)∩ SI==/0 then continue
ps ∪= { |m1 == q ∧ mk ∈ SI ∧
// ﬁrst infer intraprocess dependencies
DS(q) = {m|m ∈ Ti ∧ f e(q) ≤ lr(m)}
for j=1 to n do
// then infer interprocess dependencies
if i== j ∨ p2 f m[i][ j]==null then continue
DS(q) ∪= {m|m ∈ Tj ∧ f e(q) ≤ p2 f m[i][ j] ≤ lr(m)}
∀i be a source-sink callsite pair between which paths are computed
let outlets be the list of all outlets
let inlets be the list of all inlets
1: SOFPS=/0, REFPS=/0, SIFPS=/0, intraFP=/0
2: merge Ti, i∈[1,n] into a global partially ordered sequence ES
3: dDG = buildDyndepGraph(sDG, , ES)
4: dDG(cid:48) = pruneDyndepGraph(dDG, SC)
5: SOFPS = findPaths(dDG(cid:48), {s}, outlets, tr(s))
6: for i= to n do
intraFP ∪= findPaths(dDG(cid:48),{s},{t},S j)
7:
if tr(s) == Ti ∨ tr(t) == Ti then continue
8:
REFPS ∪= findPaths(dDG(cid:48), inlets, outlets, Ti)
9:
10: SIFPS = findPaths(dDG(cid:48), inlets, {t}, tr(t))
11: return [spliceSegs(SOFPS, REFPS, SIFPS), intraFP]
// compute remote segments of interprocess paths
// intraprocess paths
// hybrid analysis
// statement-level pruning
control dependent on a covered branch are considered covered.
Importantly, during this inference, only methods on any
method-level path found in Phase 1 are considered. The
insight is that statements in other methods will not appear on
the ﬁnal (statement-level) information ﬂow paths.
Statement-level analysis (2.3). With the covered statements
(SC), per-process method event
traces (Ti), and partial
static dependence graph (sDG) of D, FLOWDIST now
computes statement-level information ﬂow paths between
each source-sink callsite pair () with Algorithm 2. It
identiﬁes the callsites of message sending and receiving APIs
(within the methods on the method-level ﬂow paths), referred
to as outlets and inlets, indicating where information ﬂows
out from and into each process, respectively.
First, per-process sequences of method events are merged
as a whole-system event sequence ES (line 2) ordered by
event timestamps. Then, the subroutine buildDyndepGraph
constructs a dynamic dependence graph dDG (line 3)
by referring to the static dependencies in sDG while
traversing ES, using a hybrid dependence analysis inspired
by DIVER [51]. The key idea is summarized as follows.
First, interprocedural dependencies in sDG are categorized
into two classes: adjacent (due to parameter or return-value
passing) and posterior (due to the def-use associations of heap
variables and control dependencies). Next, when scanning ES,
a static dependence of a method m2 on another method m1
is activated (hence added to dDG) if (1) that dependence
is adjacent and m2 happens immediately after m1 in ES or
(2) the dependence is posterior and m2 happens anywhere
after m1 in ES. The analysis treats all static intraprocedural
dependencies in a method that is in ES as activated and adds
them to dDG. And the graph construction starts with s and
only includes dependencies that reach t.
The resulting dependencies (in dDG) would be imprecise at
statement level. Thus, FLOWDIST proceeds with a subroutine
pruneDyndepGraph which prunes spurious dependencies in
Figure 5: The partial static dependence graph created in (the
Step 2.1 of) Phase 2 for the working example.
dDG per the statement coverage SC: nodes corresponding
to unexercised statements and their associated edges are
removed from the graph, resulting in the pruned graph dDG(cid:48)
(line 4). While the pruning may still leave spurious dynamic
dependencies [39] in dDG(cid:48), we make this choice to contain
the overall analysis cost of FLOWDIST to gain in scalability.
With the dDG(cid:48), the algorithm then computes both
intraprocess and interprocess information ﬂow paths with
findPaths(G,X,Y,T), a subroutine that ﬁnds paths from any
statement in X to any statement in Y on a graph G while only
considering nodes in T. Intraprocess paths (intraFP) in each
process are computed by simply traversing dDG(cid:48) (line 7).
For any interprocess ﬂow path, however, the sink is not
explicitly reachable from the source on dDG(cid:48) because it
(as a projection of sDG) remains disconnected. FLOWDIST
computes the three segments separately (§2). First, the
segment within the source (s)’s process (SOFPS) is computed
via a traversal on dDG(cid:48) (line 5) that retrieves paths from s to
a relevant outlet within that process’s trace—tr(x) denotes
the trace that includes an event of the method that encloses
a statement x. The segment within the sink (t)’s process
(SIFPS) is computed similarly (line 10), but by searching
paths from any inlet to t. The remaining segment (REFPS)
is searched within each process (lines 6-9) other than the
one that encloses s or t (line 8). The search is again realized
through a traversal on dDG(cid:48), looking for paths from any inlet
to any outlet within the process. Finally, these segments
are spliced into interprocess information ﬂow paths with
the subroutine spliceSegs, according to the timestamps of
relevant inlets/outlets. The splicing works such that there are
not any events between the end of an SOFPS and the start of
an REFPS, nor between the end of the REFPS and the start
of an SIFPS as per the global partially ordered sequence ES.
With the intraprocess paths, these spliced interprocess paths
are then returned as the output of this algorithm (line 11).
Illustration. For the working example, Figure 5 depicts the
dDG (i.e., before pruning), including three subgraphs each for
one of the three processes Client (left), Container (middle),
and Server (right)—only the part for the code of Figure 1 is
shown. FLOWDIST then infers the covered statements from
2098    30th USENIX Security Symposium
USENIX Association
691031077068455Blue line: SOFPS     Green line: REFPS     Red line: SIFPSSolid line: intra-process flowDashed line: interprocess flow7576777879671011026163ClientContainerServer393397392438442443454210209212211213214435432433437 ... ... ... ... ... ...SourceSinkthe branch coverage obtained in Phase 1: 68, ..., 103, ..., 107,
392, 393, ..., 397, ..., 438, ..., 442, 443, ..., 454, 455.
The dark solid nodes indicate covered statements on
the corresponding dDG(cid:48), among which {107,397} are outlets
and {392,438} are inlets—in the example code, the actual
message-sending/receiving APIs are invoked within some of
the relevant methods shown (e.g., ZooKeeper(...) at line 392).
The grey nodes are those pruned away per the statement
coverage. After executing Algorithm 2, SOFPS=, REFPS=, and
SIFPS=.
these
segments leads to the entire path , as also highlighted
intraFP==/0 as there is
in arrowed lines of Figure 1.
no intraprocedural
information ﬂow path between the
source-sink pair in this example.
Splicing
4 Alternative Designs
The default design of FLOWDIST as presented above
targets common distributed systems in general. To more
systematically explore the multi-staged reﬁnement-based
methodology for DIFA, we have developed two alternative
designs: FLOWDISTsim and FLOWDISTmul. They may offer
even greater cost-effectiveness and scalability for systems that
meet certain conditions, by further reducing analysis costs
while without compromising soundness and precision.
FLOWDISTsim: In the Step 1.1 of FLOWDIST, the goal of
the static analysis (i.e., ICFG construction) is to reduce
the instrumentation scope hence the costs of tracing
method and branch events. Yet with certain systems,
probing for and tracing all such events is cheap, and the
cost incurred by this static analysis itself may outweigh
the cost reduction. Optimized for systems meeting these