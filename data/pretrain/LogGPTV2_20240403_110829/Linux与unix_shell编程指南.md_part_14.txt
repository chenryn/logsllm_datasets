### 系统中的账号核实程序

系统中使用的账号核实程序旨在检验数据操作员的数据输入。遗憾的是，该程序存在一些问题，或者说是“非文本特征”。当一条记录被发现包含错误时，它本应只打印一行“ERROR *”，但实际上却打印了多行这样的错误信息。这可能会导致账号管理员产生误解。因此，需要使用`awk`脚本来过滤这些错误行的出现频率，确保每个失败记录仅对应一个错误行。

#### 示例文件
在应用`awk`脚本进行过滤之前，先查看部分文件内容：
```
...
ERROR *
...
ERROR *
...
```

#### `awk`脚本
以下是用于过滤错误行的`awk`脚本：
```bash
awk '/ERROR */ {if (seen[$0]++ == 0) print $0}' input_file
```

#### 过滤结果
运行上述`awk`脚本后，输出将如下所示：
```
ERROR *
```

### 在`awk`中使用FS变量

如果需要使用非空格字符作为域分隔符（FS），例如`#`或`:`，可以通过在命令行中指定`FS`选项来轻松实现。例如：
```bash
awk -F'#' '{print $1, $5}' /etc/passwd
```

在`awk`脚本中设置`FS`变量应在`BEGIN`部分进行。否则，`awk`可能无法正确识别域分隔符。

### 向`awk`脚本传递值

向`awk`脚本传递值的方式与向单行命令传递值类似，格式如下：
```bash
awk -f script_file var=value input_file
```

以下是一个示例脚本，用于检查文件中的特定域是否等于给定值：
```bash
awk -v MAX=7 'NF > MAX {print "Too many fields: " $0}' /etc/passwd
```

### `awk`数组

`awk`数组不需要预先定义或指定元素个数。可以使用循环来访问数组。以下是一个基本结构示例：
```bash
split("1 2 3 # 4 5 6 # 6 7 8", myarray, "#")
for (element in myarray) {
    print myarray[element]
}
```

### 示例：统计俱乐部成员级别

假设有一个空手道数据库文件，其中包含学生级别和年龄信息，两个域由`#`分隔。目标是统计不同级别的学生数量以及成年人和未成年人的数量。

#### 文件内容
```
Yellow#Senior
Orange#Junior
Red#Senior
...
```

#### `awk`脚本
```bash
awk -F'#' '
BEGIN {
    FS = "#"
    color["Yellow"] = 0
    color["Orange"] = 0
    color["Red"] = 0
    senior_or_junior["Senior"] = 0
    senior_or_junior["Junior"] = 0
}
{
    if ($1 in color) color[$1]++
    if ($2 in senior_or_junior) senior_or_junior[$2]++
}
END {
    for (c in color) print c, color[c]
    for (s in senior_or_junior) print s, senior_or_junior[s]
}' input_file
```

### 小结

`awk`语言虽然有些复杂，但编写简单的单行命令或小脚本并不难。本章介绍了`awk`的基本功能，希望大家已经掌握了其基本用法。`awk`是shell编程的重要工具，尽管它提供了强大的文本处理能力，但并不要求成为专家。

### `sed`介绍

`sed`是一个非交互性文本流编辑器，可以编辑文件或标准输入导出的文本拷贝。标准输入可以来自键盘、文件重定向、字符串或变量，或者是管道的文本。`sed`可以处理小到大文件的各种编辑任务，并且可以在不在现场的情况下进行编辑。

#### 调用`sed`

调用`sed`有三种方式：
1. 在命令行键入命令。
2. 将`sed`命令插入脚本文件，然后调用`sed`。
3. 将`sed`命令插入脚本文件，并使脚本可执行。

#### 基本`sed`编辑命令

| 命令 | 功能 |
| --- | --- |
| `p` | 打印匹配行 |
| `=` | 显示文件行号 |
| `a \` | 在定位行号后附加新文本信息 |
| `i \` | 在定位行号后插入新文本信息 |
| `d` | 删除定位行 |
| `c \` | 用新文本替换定位文本 |
| `s` | 使用替换模式替换相应模式 |
| `r` | 从另一个文件中读文本 |
| `w` | 写文本到一个文件 |
| `q` | 第一个模式匹配完成后退出或立即退出 |
| `l` | 显示与八进制ASCII代码等价的控制字符 |
| `{ }` | 在定位行执行的命令组 |
| `n` | 从另一个文件中读文本下一行，并附加在下一行 |
| `g` | 将模式2粘贴到/pattern n/ |
| `y` | 传送字符 |

#### 示例

1. **打印第二行**：
   ```bash
   sed -n '2p' quote.txt
   ```

2. **打印第1到第3行**：
   ```bash
   sed -n '1,3p' quote.txt
   ```

通过这些示例，大家可以更好地理解如何使用`sed`进行文本编辑。