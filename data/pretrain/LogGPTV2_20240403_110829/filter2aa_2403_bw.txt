imul    edx, ebx, 600      
; edx=x*600 
add     eax, edx  
; eax=eax+edx=y*30 + x*600 
lea     edx, [eax+ecx] 
; edx=y*30 + x*600 + z 
mov     eax, [ebp+value] 
mov     dword ptr ds:a[edx*4], eax  ; *(a+edx*4)=value 
pop     ebx 
pop     ebp 
retn 
insert  
endp 
GCC 的处理方法和 MSVC 不同。在计算 30y 的时候，GCC 没有使用乘法指令。它的计算公式是(y  + 
y)  
#include  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
252 
逆向工程权威指南（上册） 
const char month2[12][10]= 
{ 
  { 'J','a','n','u','a','r','y',  0,  0,  0 }, 
  { 'F','e','b','r','u','a','r','y',  0,  0 }, 
  { 'M','a','r','c','h',  0,  0,  0,  0,  0 }, 
  { 'A','p','r','i','l',  0,  0,  0,  0,  0 }, 
  { 'M','a','y',  0,  0,  0,  0,  0,  0,  0 }, 
  { 'J','u','n','e',  0,  0,  0,  0,  0,  0 }, 
  { 'J','u','l','y',  0,  0,  0,  0,  0,  0 }, 
  { 'A','u','g','u','s','t',  0,  0,  0,  0 }, 
  { 'S','e','p','t','e','m','b','e','r',  0 }, 
  { 'O','c','t','o','b','e','r',  0,  0,  0 }, 
  { 'N','o','v','e','m','b','e','r',  0,  0 }, 
  { 'D','e','c','e','m','b','e','r',  0,  0 } 
}; 
// in 0..11 range 
const char* get_month2 (int month) 
{ 
  return &month2[month][0]; 
}; 
编译上述程序可得如下所示的指令。 
指令清单 18.30  Optimizing MSVC 2013 x64 
month2  DB       04aH 
  DB       061H 
  DB       06eH 
  DB       075H 
  DB       061H 
  DB       072H 
  DB       079H 
  DB       00H 
  DB       00H 
  DB       00H 
... 
get_month2 PROC 
; sign-extend input argument and promote to 64-bit value 
  movsxd rax, ecx 
  lea rcx, QWORD PTR [rax+rax*4] 
; RCX=month+month*4=month*5 
  lea  
rax, OFFSET FLAT:month2 
; RAX=pointer to table 
  lea  
rax, QWORD PTR [rax+rcx*2] 
; RAX=pointer to table + RCX*2=pointer to table + month*5*2=pointer to table + month*10 
  ret  
0 
get_month2 ENDP 
上 述 程 序 完 全 不 访 问 内 存 。 整 个 函 数 的 功 能 ， 只 是 计 算 月 份 名 称 字 符 串 的 首 字 母 指 针
pointer_to_the_table+month*10。它使用单条 LEA 指令，替代了多条 MUL 和 MOV 指令。 
上述数组的每个字符串都占用 10 字节空间。最长的字符串由“September”和内容为零的字节构成，
其余的字符串使用零字节对齐，所以每个字符串都占用 10 个字节。如此一来，计算字符串首地址的方式变
得简单，整个函数的效率也会有所提高。 
使用 GCC 4.9 进行优化编译，程序的指令甚至会更少。 
指令清单 18.31  Optimizing GCC 4.9 x64 
  movsx 
rdi, edi 
  lea  
rax, [rdi+rdi*4] 
  lea  
rax, month2[rax+rax] 
  ret 
它同样使用 LEA 指令进行“乘以 10”的运算。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
253 
若由 GCC 进行非优化编译，那么乘法运算的实现方式将会有所不同。 
指令清单 18.32  Non-optimizing GCC 4.9 x64 
get_month2: 
  push    rbp 
  mov     rbp, rsp 
  mov     DWORD PTR [rbp-4], edi 
  mov     eax, DWORD PTR [rbp-4] 
  movsx   rdx, eax 
; RDX = sign-extended input value 
  mov     rax, rdx 
; RAX = month 
  sal     rax, 2 
; RAX = month<<2 = month*4 
  add     rax, rdx 
; RAX = RAX+RDX = month*4+month = month*5 
  add     rax, rax 
; RAX = RAX*2 = month*5*2 = month*10 
  add     rax, OFFSET FLAT:month2 
; RAX = month*10 + pointer to the table 
  pop     rbp 
  ret 
而在不开启优化选项的情况下，MSVC 编译器会直接使用 IMUL 指令。 
指令清单 18.33  Non-optimizing MSVC 2013 x64 
month$ = 8 
get_month2 PROC 
  mov      DWORD PTR [rsp+8], ecx 
  movsxd  rax, DWORD PTR month$[rsp] 
; RAX = sign-extended input value into 64-bit one 
  imul     rax, rax, 10 
; RAX = RAX*10 
  lea      rcx, OFFSET FLAT:month2 
; RCX = pointer to the table 
  add      rcx, rax 
; RCX = RCX+RAX = pointer to the table+month*10 
  mov      rax, rcx 
; RAX = pointer to the table+month*10 
  mov      ecx, 1 
; RCX = 1 
  imul     rcx, rcx, 0 
; RCX = 1*0 = 0 
  add      rax, rcx 
; RAX = pointer to the table+month*10 + 0 = pointer to the table+month*10 
  ret      0 
get_month2 ENDP 
不过此处有些令人费解：为什么 RCX 要乘以零，再把零加在最终结果里？虽然说它不影响最终运行
结果，但是也足以说是编译器的某种怪癖了。本文刻意演示这种怪癖代码，是希望读者不要拘泥于编译器
生成的指令的形式，而要从编程人员的角度理解程序的源代码。 
18.7.1 32 位 ARM 
由 Keil 优化编译而生成的 Thumb 模式程序，会直接使用乘法运算指令 MULS。 
指令清单 18.34  Optimizing Keil 6/2013 (Thumb mode) 
; R0 = month 
  MOVS      r1,#0xa 
; R1 = 10 
  MULS      r0,r1,r0 
; R0 = R1*R0 = 10*month 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
254 
逆向工程权威指南（上册） 
  LDR       r1,|L0.68| 
; R1 = pointer to the table 
  ADDS      r0,r0,r1 
; R0 = R0+R1 = 10*month + pointer to the table 
  BX        lr 
而优化编译生成的 ARM 模式程序，会使用加法运算和位移操作指令。 
指令清单 18.35  Optimizing Keil 6/2013 (ARM mode) 
; R0 = month 
  LDR       r1,|L0.104| 
; R1 = pointer to the table 
  ADD       r0,r0,r0,LSL #2 
; R0 = R0+R0<<2 = R0+R0*4 = month*5 
  ADD       r0,r1,r0,LSL #1 
; R0 = R1+R0<<2 = pointer to the table + month*5*2 = pointer to the table + month*10 
  BX        lr 
18.7.2 ARM64 
指令清单 18.36  Optimizing GCC 4.9 ARM64 
; W0 = month 
  sxtw     x0, w0 
; X0 = sign-extended input value 
  adrp     x1, .LANCHOR1 
  add      x1, x1, :lo12:.LANCHOR1 
; X1 = pointer to the table 
  add      x0, x0, x0, lsl 2 
; X0 = X0+X0<<2 = X0+X0*4 = X0*5 
  add      x0, x1, x0, lsl 1 
; X0 = X1+X0<<1 = X1+X0*2 = pointer to the table + X0*10 
  ret 