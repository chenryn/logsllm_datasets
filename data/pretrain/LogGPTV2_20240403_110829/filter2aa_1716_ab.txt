Execute a RISC instruction, and observe its results
US8880851
 Patents suggest the pipeline splits
after instructions are fetched
 So we set the god mode bit,
executing the launch instruction,
… and … nothing happens.
 Processor continues executing x86.  No visible change.
The x86 bridge
 Trial.
 Error.
 Misery.
 Speculate:
 Rather than switching decoders, the
launch instruction may modify functionality 
within the x86 decoder
The x86 bridge
opcode
modr/m
imm32
imm32
imm32
imm32
x86 Decoder
RISC 
mode?
RISC Decoder
Pre-decoder
Instruction Cache
No
Yes
opcode
modr/m
imm32
imm32
imm32
imm32
imm32
imm32
imm32
imm32
 In this setup, some x86 instruction, 
if the processor is in RISC mode, 
can pass a portion of itself 
onto the RISC processor
 Since this instruction joins the two cores,
we call it the bridge instruction
The x86 bridge
 How to find the bridge instruction?
 Sufficient to detect that a RISC instruction 
has been executed
The x86 bridge
 If the RISC core really provides 
a privilege circumvention mechanism…
then some RISC instruction, 
executed in ring 3, 
should be able to corrupt the system
 Easy to detect: 
processor lock, kernel panic, or system reset.
 None of these should happen when 
executing ring 3 x86 instructions
The x86 bridge
 Use sandsifter
 Run in random instruction generation mode
 Modify to execute the launch instruction 
before each x86 instruction
 With the right combination of
the x86 wrapper instruction,
and a corrupting RISC instruction …
the processor locks,
the kernel panics,
or the system resets.
The x86 bridge
 When this is observed,
the last instruction generated
is the bridge instruction.
 ~ 1 hour fuzzing
bound %eax,0x00000000(,%eax,1)
The bridge instruction
 bound %eax,0x00000000(,%eax,1)
 The 32-bit constant in the instruction is
the 32-bit RISC instruction
sent to the deeply embedded core.
The bridge instruction
 We know how to execute instructions on the DEC
 Now, what do we execute?
i.e. what do these instructions even look like?
What architecture is this?
A deeply embedded instruction set
 Assume that the RISC core is 
some common architecture
 Try executing simple instructions from 
ARM, PowerPC, MIPS, etc.
 e.g. ADD R0, R0, #1
A deeply embedded instruction set
 Challenge:
 RISC core likely has register file inaccessible to the x86 core
 No obvious way to check the effects of the RISC instruction
 Solution:
 It is still possible to rule out architectures
 Many instructions sent to the DEC cause a processor lock
(One of the few visible effects)
 Execute simple, non-locking instructions for each architecture
 If processor locks, rule out that architecture
 30 different architectures ruled out for the DEC
A deeply embedded instruction set
 Dealing with an unknown architecture
 Must reverse engineer 
the format of the instructions
for the deeply embedded core
 A deeply embedded instruction set (DEIS)
A deeply embedded instruction set
 Approach:
 Execute a RISC instruction, and observe its results
 Challenge:
 No knowledge of RISC ISA, 
cannot observe the results on the RISC core
 Solution:
 Patents suggest that the RISC core and x86 core 
have a partially shared register file
 Should be possible to observe some results 
of the RISC instruction on the x86 core
A deeply embedded instruction set
Approach:
Execute a RISC instruction, and observe its results
US8880851
 Toggle the god mode bit (through LKM)
 Generate an input state
 Registers (GPRs, SPRs, MMX)
 Userland buffer
 Kernel buffer (through LKM)
 Record the input state
 Generate a random RISC instruction
 Wrap RISC instruction in the x86 bridge instruction
 Execute RISC instruction on the DEC 
by preceding it with the launch instruction
 Record the output state
 Observe any changes between the input and output state
A deeply embedded instruction set
movl %[input_eax], %%eax
movl %[input_ebx], %%ebx
movl %[input_ecx], %%ecx
movl %[input_edx], %%edx
movl %[input_esi], %%esi
movl %[input_edi], %%edi
movl %[input_ebp], %%ebp
movl %[input_esp], %%esp
.byte 0x0f, 0x3f 
bound %eax,0xa310075b(,%eax,1) 
movl %%eax, %[output_eax]
movl %%ebx, %[output_ebx]
movl %%ecx, %[output_ecx]
movl %%edx, %[output_edx]
movl %%esi, %[output_esi]
movl %%edi, %[output_edi]
movl %%ebp, %[output_ebp]
movl %%esp, %[output_esp]
Load a pre-generated system 
state from memory.
Execute the launch insn., 
followed by the x86 bridge, 
containing the RISC insn.
Save the new system state for 
offline analysis
 Assisted fuzzing:
 Identifying arithmetic instructions:
 Load initial register state with random values
 Identifying memory accesses:
 Load initial register state with pointers
to either the user land or kernel buffers
A deeply embedded instruction set
 Challenge:
 Unknown instruction set
 Accidentally generate instructions causing 
kernel panics, processor locks, system reboots.
 ~20 random RISC instructions before 
unrecoverable corruption
 Then necessary to reboot the target
 ~2 minute reboot
 Months of fuzzing to collect enough 
data to reverse engineer the DEIS
A deeply embedded instruction set
Target 1 
Target 0 
Target 2 
Target 3 
…
Relay
Switch
Master
KVM
 (Image)
A deeply embedded instruction set
 Solution:
 Extend the earlier automated setup
 7 target machines, PXE booting from a master
 Master assigns fuzzing tasks 
to agents running on each target
 Lets master coordinate the fuzzing workload
 Intelligently task workers with high priority or unexplored 
segments of the instruction space
 Targets attached to relays, controlled by the master
 When the master stops receiving data from a target
 Assume crashed, panicked, reset, locked, etc.
 Target is forcefully reset through relay
 Fuzzing results collected from each target 
and aggregated on the master
A deeply embedded instruction set
 (Demo)
A deeply embedded instruction set
 (Demo 2)
A deeply embedded instruction set
 3 weeks
 15 gigabytes of logs
 2,301,295 state diffs
 4000 hours of compute time
A deeply embedded instruction set
 Extract patterns from the state diffs 
to identify patterns in the instructions
 Automation: the collector
A deeply embedded instruction set
 collector automatically identifies patterns in state diffs:
 word  swap
 high word copy
 low word copy
 immediate load
 (pre) register to register transfer
 (post) register to register transfer
 1-, 2-, 4-, 8- byte memory writes
 1-, 2-, 4-, 8- byte memory reads
 increment by 1, 2, 4, or 8
 decrement by 1, 2, 4, or 8
 write instruction pointer
 1- through 16- bit shifts
 relative immediate load
 add, subtract, multiply, divide, modulo, xor, binary and, binary or
A deeply embedded instruction set
==== sub, 4 ====
0a1dc726  [ 0000 1010  0001 1101  1100 0111  0010 0110 ]:   eax: 0804e289 -> 0804e285
0a3d6720  [ 0000 1010  0011 1101  0110 0111  0010 0000 ]:   ecx: 0841fec2 -> 0841febe
0a503e29  [ 0000 1010  0101 0000  0011 1110  0010 1001 ]:   edx: 2c9e4a84 -> 2c9e4a80
0a5fb7db  [ 0000 1010  0101 1111  1011 0111  1101 1011 ]:   edx: 327f8c66 -> 327f8c62
0a7f4460  [ 0000 1010  0111 1111  0100 0100  0110 0000 ]:   ebx: b753be82 -> b753be7e
0a90aeb8  [ 0000 1010  1001 0000  1010 1110  1011 1000 ]:   esp: 961f6d51 -> 961f6d4d
0ab05498  [ 0000 1010  1011 0000  0101 0100  1001 1000 ]:   ebp: 859a7955 -> 859a7951
0abfb48d  [ 0000 1010  1011 1111  1011 0100  1000 1101 ]:   ebp: d8de0d7b -> d8de0d77
0ad03f09  [ 0000 1010  1101 0000  0011 1111  0000 1001 ]:   esi: 0841fec4 -> 0841fec0
0af088c6  [ 0000 1010  1111 0000  1000 1000  1100 0110 ]:   edi: 256339e4 -> 256339e0
0affcf92  [ 0000 1010  1111 1111  1100 1111  1001 0010 ]:   edi: f4cef2ab -> f4cef2a7
0e1d87be  [ 0000 1110  0001 1101  1000 0111  1011 1110 ]:   eax: 0804e289 -> 0804e285
0e301f44  [ 0000 1110  0011 0000  0001 1111  0100 0100 ]:   ecx: faa1aa22 -> faa1aa1e
0e30753f  [ 0000 1110  0011 0000  0111 0101  0011 1111 ]:   ecx: 46e4f482 -> 46e4f47e
0e309f8c  [ 0000 1110  0011 0000  1001 1111  1000 1100 ]:   ecx: 8e9099e9 -> 8e9099e5
0e5ff9f4  [ 0000 1110  0101 1111  1111 1001  1111 0100 ]:   edx: b4511f1b -> b4511f17
0e83d850  [ 0000 1110  1000 0011  1101 1000  0101 0000 ]:   esp: 3b92e942 -> 3b92e93e
0eb05c9b  [ 0000 1110  1011 0000  0101 1100  1001 1011 ]:   ebp: 33004709 -> 33004705
0edf3b78  [ 0000 1110  1101 1111  0011 1011  0111 1000 ]:   esi: 0841fec4 -> 0841fec0
0effd2ad  [ 0000 1110  1111 1111  1101 0010  1010 1101 ]:   edi: 989d68db -> 989d68d7
8d2bf748  [ 1000 1101  0010 1011  1111 0111  0100 1000 ]:   eax: 0804e289 -> 0804e285
a95053d4  [ 1010 1001  0101 0000  0101 0011  1101 0100 ]:   eax: 0804e289 -> 0804e285
df14296d  [ 1101 1111  0001 0100  0010 1001  0110 1101 ]:   esp: 0841fec7 -> 0841fec3
eb36ae2c  [ 1110 1011  0011 0110  1010 1110  0010 1100 ]:   esi: 0841fec4 -> 0841fec0
eb71bafc  [ 1110 1011  0111 0001  1011 1010  1111 1100 ]:   ecx: 0841fec2 -> 0841febe
eb72b0d6  [ 1110 1011  0111 0010  1011 0000  1101 0110 ]:   edx: 0841fec3 -> 0841febf
fd77063c  [ 1111 1101  0111 0111  0000 0110  0011 1100 ]:   edi: 0841fec5 -> 0841fec1
ff7762d4  [ 1111 1111  0111 0111  0110 0010  1101 0100 ]:   edi: 0841fec5 -> 0841fec1
A deeply embedded instruction set
 Instructions are then binned 
based on which diff categories they fell into
 A bin is a set of instructions
whose categories are identical
A deeply embedded instruction set
==== bin: memory write // add, 4 ====
e87262cc  [ 1110 1000  0111 0010  0110 0010  1100 1100 ]
eab5f409  [ 1110 1010  1011 0101  1111 0100  0000 1001 ]
ebb7b489  [ 1110 1011  1011 0111  1011 0100  1000 1001 ]
f2169a0a  [ 1111 0010  0001 0110  1001 1010  0000 1010 ]
f2b7ad29  [ 1111 0010  1011 0111  1010 1101  0010 1001 ]
fa12fea8  [ 1111 1010  0001 0010  1111 1110  1010 1000 ]
fc74182a  [ 1111 1100  0111 0100  0001 1000  0010 1010 ]
fc759d01  [ 1111 1100  0111 0101  1001 1101  0000 0001 ]
==== bin: add, 4 ====
0a580eef  [ 0000 1010  0101 1000  0000 1110  1110 1111 ]
0a78884e  [ 0000 1010  0111 1000  1000 1000  0100 1110 ]
0a99118a  [ 0000 1010  1001 1001  0001 0001  1000 1010 ]
0acb6190  [ 0000 1010  1100 1011  0110 0001  1001 0000 ]
0aeb0a40  [ 0000 1010  1110 1011  0000 1010  0100 0000 ]
0e0b979a  [ 0000 1110  0000 1011  1001 0111  1001 1010 ]
0e394d65  [ 0000 1110  0011 1001  0100 1101  0110 0101 ]
0e98e966  [ 0000 1110  1001 1000  1110 1001  0110 0110 ]