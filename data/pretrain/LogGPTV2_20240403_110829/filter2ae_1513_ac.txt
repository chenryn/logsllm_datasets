引用：  
[Apache Wicket Home Page](https://wicket.apache.org/)  
[CWE-20: Improper Input
Validation](http://cwe.mitre.org/data/definitions/20.html)
# MD2, MD4 和 MD5都是脆弱的哈希函数
漏洞特征：WEAK_MESSAGE_DIGEST_MD5  
不建议使用MD2, MD4 和 MD5这个摘要算法。应该使用PBKDF2作为密码的摘要算法。  
md5哈希算法的安全性被严重损害。现已存在一种碰撞攻击，这种攻击可以用奔腾2.6 GHz
4核处理器在几秒内碰撞出另一个哈希相同的字符串。进一步来说，还有选择前缀碰撞攻击（chosen-prefix collision attack
），这种攻击能在一个小时之内找到两个前缀相同的哈希，只要现有计算机的计算水平就可以达到。
**"SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256:**  
所有散列计算程序都支持这些哈希函数的使用。  
NISI:通信传输：[传输中建议使用的加密算法和密钥长度](
PBKDF的主要思想是减缓字典生成的时间或者增加攻击者攻击每一个密码的时间。攻击者会有一个密码表去爆破PBKDF所使用的迭代计数器和salt。因为攻击者必须花费大量的计算时间去尝试破解每一个密码，所以攻击者很难用字典攻击和爆破攻击去获得成功。  
NISI:[基于密码的密钥的加密建议](http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf)
有漏洞的代码：
    MessageDigest md5Digest = MessageDigest.getInstance("MD5");
        md5Digest.update(password.getBytes());
        byte[] hashValue = md5Digest.digest();
解决方案：
    public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
        gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
        return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
    }
解决方案（java 8 和之后的版本）
    public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
        SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        return f.generateSecret(spec).getEncoded();
    }
引用：  
[1] [On Collisions for
MD5](http://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf):
Master Thesis by M.M.J. Stevens  
[2] [Chosen-prefix collisions for MD5 and
applications](http://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf): Paper written by
Marc Stevens  
Wikipedia: MD5  
[NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic
Algorithms and Key
Lengths](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf)  
[NIST: Recommendation for Password-Based Key
Derivation](http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf)  
[Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java
](https://stackoverflow.com/q/22580853/89769)  
[CWE-327: Use of a Broken or Risky Cryptographic
Algorithm](http://cwe.mitre.org/data/definitions/327.html)
# SHA-1 是脆弱的哈希算法
漏洞特征： WEAK_MESSAGE_DIGEST_SHA1  
不建议使用SHA-1算法去加密密码、做数字签名和其他用途。应该使用PBKDF2作为密码的摘要算法。
**“SHA-1用于生成电子签名：**  
SHA-1可能仅仅用于NIST指导的特殊协议的电子签名的生成。但是在其他的应用中，SHA-1 不应该用于电子签名
**SHA-1用于电子签名的验证：**  
对于电子签名的验证，SHA-1可以被用于传统应用  
**"SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256:**  
所有散列计算程序都支持这些哈希函数的使用。  
NISI:通信传输：[传输中建议使用的加密算法和密钥长度](
PBKDF的主要思想是减缓字典生成的时间或者增加攻击者攻击每一个密码的时间。攻击者会有一个密码表去爆破PBKDF所使用的迭代计数器和salt。因为攻击者必须花费大量的计算时间去尝试破解每一个密码，所以攻击者很难用字典攻击和爆破攻击去获得成功。  
NISI:[基于密码的密钥的加密建议](http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf)
有漏洞的代码：
    MessageDigest sha1Digest = MessageDigest.getInstance("SHA1");
    sha1Digest.update(password.getBytes());
    byte[] hashValue = sha1Digest.digest();
    byte[] hashValue = DigestUtils.getSha1Digest().digest(password.getBytes());
解决方案：
    public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
        gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
        return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
    }
解决方案（java 8 及以后的版本）
    public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
        SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        return f.generateSecret(spec).getEncoded();
    }
引用：  
[Qualys blog: SHA1 Deprecation: What You Need to
Know](https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know)  
[Google Online Security Blog: Gradually sunsetting
SHA-1](https://googleonlinesecurity.blogspot.ca/2014/09/gradually-sunsetting-sha-1.html)  
[NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic
Algorithms and Key
Lengths](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf)  
[NIST: Recommendation for Password-Based Key
Derivation](http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf)  
[Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for
Java](https://stackoverflow.com/q/22580853/89769)  
[CWE-327: Use of a Broken or Risky Cryptographic
Algorithm](http://cwe.mitre.org/data/definitions/327.html)
# DefaultHttpClient的默认构造函数与TLS 1.2不兼容
漏洞特征： DEFAULT_HTTP_CLIENT  
有漏洞的代码：
    HttpClient client = new DefaultHttpClient();
解决方案：  
用建议的构造函数去升级你的代码并且配置jvm中https.protocols选项，使其包含TLSv1.2:  
使用SystemDefaultHttpClient 代替
  * 示例代码： 
        HttpClient client = new SystemDefaultHttpClient();
  * 基于SSLSocketFactory类创建一个HttpClient，通过 [getSystemSocketFactory()](https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLSocketFactory.html#getSystemSocketFactory\()) 获得一个SSLScoketFactory实例，用这个实例去初始化一个HttpClient
  * 基于SSLConnectionSocketFactory类创建一个HttpClient，通过 [getSystemSocketFactory()](https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLSocketFactory.html#getSystemSocketFactory\()) 获得一个SSLScoketFactory实例，用这个实例去初始化一个HttpClient
  * 使用HttpClientBuilder，在调用build()之前调用useSystemProperties()  
示例代码：
        HttpClient client = HttpClientBuilder.create().useSystemProperties().build();
  * HttpClients,调用 createSystem()去创建一个实例 
示例代码：
    HttpClient client = HttpClients.createSystem();
引用：  
[Diagnosing TLS, SSL, and HTTPS](https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https)
# 脆弱的SSLContext
漏洞特征： SSL_CONTEXT  
有漏洞的代码：
    SSLContext.getInstance("SSL");
解决方案：  
用下面的代码升级你的代码，并且配置jvm的https.protocols选项，使其包含TLSv1.2
    SSLContext.getInstance("TLS");
引用：  
[Diagnosing TLS, SSL, and HTTPS](https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https)
# 习惯使用的信息摘要算法
自己实现消息摘要算法是不靠谱的。  
[NIST](http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html)建议使用SHA-224,
SHA-256, SHA-384, SHA-512, SHA-512/224, or SHA-512/256。  
**“SHA-1用于生成电子签名：**  
SHA-1可能仅仅用于NIST指导的特殊协议的电子签名的生成。但是在其他的应用中，SHA-1 不应该用于电子签名
**SHA-1用于电子签名的验证：**  
对于电子签名的验证，SHA-1可以被用于传统应用  
**"SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256:**  
所有散列计算程序都支持这些哈希函数的使用。  
NISI:通信传输：[传输中建议使用的加密算法和密钥长度](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf)  
有漏洞的代码：
    MyProprietaryMessageDigest extends MessageDigest {
        @Override
        protected byte[] engineDigest() {
            [...]
            //Creativity is a bad idea
            return [...];
        }
    }
使用其中一种信息摘要算法去升级你的代码。这些算法非常强大，能足够满足你的安全需求。  
解决方案示例：
    MessageDigest sha256Digest = MessageDigest.getInstance("SHA256");
    sha256Digest.update(password.getBytes());
引用：  
[NIST Approved Hashing
Algorithms](http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html)  
[CWE-327: Use of a Broken or Risky Cryptographic
Algorithm](http://cwe.mitre.org/data/definitions/327.html)
# 读取文件的缺陷
漏洞特征： FILE_UPLOAD_FILENAME  
通过篡改FileUpload API 提供的文件名，客户端可以任意访问系统中的文件  
比如：
    "../../../config/overide_file"
    "shell.jsp\u0000expected.gif"
所以，上面的这些值应该没有做任何过滤就直接进入到了文件系统api之中。如果可能，应用应该生成自己的文件名，并且使用它们。  
即使这样，被提供的文件名也要去验证它们的有效性，以确保它们没有包含未授权的路径（比如./\\)和未授权的文件。
引用：  
[Securiteam: File upload security
recommendations](http://blogs.securiteam.com/index.php/archives/1268)  
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path
Traversal')](http://cwe.mitre.org/data/definitions/22.html)  
[WASC-33: Path
Traversal](http://projects.webappsec.org/w/page/13246952/Path%20Traversal)  
[OWASP: Path Traversal](https://www.owasp.org/index.php/Path_Traversal)  
[CAPEC-126: Path Traversal](http://capec.mitre.org/data/definitions/126.html)  
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path
Traversal') ](http://cwe.mitre.org/data/definitions/22.html)
# 正则dos
漏洞特征： REDOS  
正则表达式(regexs)经常导致拒绝服务攻击（(DOS)。这是因为当正则表达式引擎分析一些字符串的时候会消耗大量的时间，而这也取决于正则是怎么写的。  
比如，对于正则`^(a+)+$`,如果输入"aaaaaaaaaaaaaaaaX"，就会让正则表达式引擎分析65536种不同的路径。  
所以，可能只要客户端发送一个请求就可以让服务器端消耗巨大的计算资源。问题可能就是类似于这样的正则表达式，由于括号内的+ (or a _)和括号外的+ (or
a_ )
，当输入相同字符串的时候，可能会有两种不同的处理方式。以这样的方式去写正则，+号会消耗字符'a'。为了修复这样问题，正则表达式应该被重写，目的是消除歧义.比如，上面那个有问题的正则表达式就可以被改写为`^a+$`，无论如何，这可能是作者的意思。总之，这可能是原来正则表达式的意思，这个新正则表达式会更快的匹配字符串，并且也不会受到ReDos攻击。  
引用：  
[Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS
Vulnerabilities](http://www.jroller.com/sebastianKuebeck/entry/detecting_and_preventing_redos_vulnerabilities)  
[1] [OWASP: Regular expression Denial of
Service](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)  
[CWE-400: Uncontrolled Resource Consumption ('Resource
Exhaustion')](http://cwe.mitre.org/data/definitions/400.html)