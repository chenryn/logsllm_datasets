RET
_io_stihlt: ; void io_stihlt(void);
STI
HLT
RET
_io_in8: ; int io_in8(int port);
MOV EDX,[ESP+4] ; port
MOV EAX,0
IN AL,DX
RET
_io_in16: ; int io_in16(int port);
MOV EDX,[ESP+4] ; port
MOV EAX,0
IN AX,DX
RET
_io_in32: ; int io_in32(int port);
MOV EDX,[ESP+4] ; port
IN EAX,DX
RET
_io_out8: ; void io_out8(int port, int data);
MOV EDX,[ESP+4] ; port
MOV AL,[ESP+8] ; data
OUT DX,AL
RET
_io_out16: ; void io_out16(int port, int data);
MOV EDX,[ESP+4] ; port
MOV EAX,[ESP+8] ; data
OUT DX,AX
RET
_io_out32: ; void io_out32(int port, int data);
MOV EDX,[ESP+4] ; port
MOV EAX,[ESP+8] ; data
OUT DX,EAX
RET
_io_load_eflags: ; int io_load_eflags(void);
PUSHFD ; 指 PUSH EFLAGS
POP EAX
RET
_io_store_eflags: ; void io_store_eflags(int eflags);
MOV EAX,[ESP+4]
图灵社区会员 metorm 专享 尊重版权
6 色号设定（harib01f） …… 83
PUSH EAX
1
POPFD ; 指 POP EFLAGS
RET
到现在为止的说明，想必大家都已经懂了，尚且需要说明的只有与EFLAGS相关的部分了。 2
如果有“MOV EAX,EFLAGS”之类的指令就简单了，但CPU没有这种指令。能够用来读写
EFLAGS的，只有PUSHFD和POPFD指令。 3
■■■■■
4
PUSHFD是“push flags double-word”的缩写，意思是将标志位的值按双字长压入栈。其实
它所做的，无非就是“PUSH EFLAGS”。POPFD是“pop flags double-word”的缩写，意思是按
双字长将标志位从栈弹出。它所做的，就是“POP EFLAGS”。 4
栈是数据结构的一种，大家暂时只要理解到这个程度就够了。往栈登录数据的动作称为push
（推），请想象一下往烤箱里放面包的情景。从栈里取出数据的动作称为pop（弹出）。 6
也就是说，“PUSHFD POP EAX”，是指首先将EFLAGS压入栈，再将弹出的值代入EAX。
所以说它代替了“MOV EAX,EFLAGS”。另一方面，PUSH EAX POPFD正与此相反，它相当于 7
“MOV EFLAGS,EAX”。
8
9
10
11
12
13
14
15
16
■■■■■
图灵社区会员 metorm 专享 尊重版权
84 …… 第4天：C语言与画面显示的练习
最后要讲的是io_load_eflags。它对我们而言，是第一个有返回值的函数的例子，但根据C语
言的规约，执行RET语句时，EAX中的值就被看作是函数的返回值，所以这样就可以。
另外，虽然还有几个函数是不必要的，但因为将来会用到，所以这里就顺便做了。虽然不知
道什么时候用，用于什么目的，但通过到目前为止的讲解也能明白其中的意义。
好了，讲解完了以后执行一下吧。运行“make run”。条纹的图案没有变化，但颜色变了！
成功了！
77 绘制矩形（harib01g）
颜色备齐了，下面我们来画“画”吧。首先从VRAM与画面上的“点”的关系开始说起。在
当前画面模式中，画面上有320×200（=64 000）个像素。假设左上点的坐标是（0,0），右下点的
坐标是（319319），那么像素坐标（x,y）对应的VRAM地址应按下式计算。
0xa0000 + x + y * 320
其他画面模式也基本相同，只是0xa0000这个起始地址和y的系数320有些不同。
根据上式计算像素的地址，往该地址的内存里存放某种颜色的号码，那么画面上该像素的位
置就出现相应的颜色。这样就画出了一个点。继续增加x的值，循环以上操作，就能画一条长长
的水平直线。再向下循环这条直线，就能够画很多的直线，组成一个有填充色的长方形。
根据这种思路，我们制作了函数boxfill8。源程序就是bootpack.c。并且在程序HariMain中，
我们不再画条纹图案，而是使用这个函数3次，画3个矩形。也不知能不能正常运行，我们来“make
run”看看。哦，好像成功了。
本次的bootpack.c节选
#define COL8_000000 0
#define COL8_FF0000 1
#define COL8_00FF00 2
#define COL8_FFFF00 3
图灵社区会员 metorm 专享 尊重版权
7 绘制矩形（harib01g） …… 85
#define COL8_0000FF 4
1
#define COL8_FF00FF 5
#define COL8_00FFFF 6
#define COL8_FFFFFF 7
#define COL8_C6C6C6 8 2
#define COL8_840000 9
#define COL8_008400 10
#define COL8_848400 11
3
#define COL8_000084 12
#define COL8_840084 13
#define COL8_008484 14
#define COL8_848484 15 4
void HariMain(void)
{
4
char *p; /* p变量的地址 */
init_palette(); /* 设置调色板 */
p = (char *) 0xa0000; /* 将地址赋值进去 */ 6
boxfill8(p, 320, COL8_FF0000, 20, 20, 120, 120);
boxfill8(p, 320, COL8_00FF00, 70, 50, 170, 150);
7
boxfill8(p, 320, COL8_0000FF, 120, 80, 220, 180);
for (;;) {
io_hlt();
8
}
}
void boxfill8(unsigned char *vram, int xsize, unsigned char c, int x0, int y0, int x1, int y1)
9
{
int x, y;
for (y = y0; y <= y1; y++) {
for (x = x0; x <= x1; x++) 10
vram[y * xsize + x] = c;
}
return;
11
}
12
13
14
15
16
这次新出现了#define声明方式，它用来表示常数声明。要记住哪种色号对应哪种颜色实在太
图灵社区会员 metorm 专享 尊重版权
86 …… 第4天：C语言与画面显示的练习
麻烦了，所以为了便于理解，做了以上声明。
88 今天的成果（harib01h）
我们已经努力到现在了，再加最后一把劲儿。这次我们只修改HariMain程序。让我们看看执
行结果会是什么样呢？
本次的HariMain
void HariMain(void)
{
char *vram;
int xsize, ysize;
init_palette();
vram = (char *) 0xa0000;
xsize = 320;
ysize = 200;
boxfill8(vram, xsize, COL8_008484, 0, 0, xsize - 1, ysize - 29);
boxfill8(vram, xsize, COL8_C6C6C6, 0, ysize - 28, xsize - 1, ysize - 28);
boxfill8(vram, xsize, COL8_FFFFFF, 0, ysize - 27, xsize - 1, ysize - 27);
boxfill8(vram, xsize, COL8_C6C6C6, 0, ysize - 26, xsize - 1, ysize - 1);
boxfill8(vram, xsize, COL8_FFFFFF, 3, ysize - 24, 59, ysize - 24);
boxfill8(vram, xsize, COL8_FFFFFF, 2, ysize - 24, 2, ysize - 4);
boxfill8(vram, xsize, COL8_848484, 3, ysize - 4, 59, ysize - 4);
boxfill8(vram, xsize, COL8_848484, 59, ysize - 23, 59, ysize - 5);
boxfill8(vram, xsize, COL8_000000, 2, ysize - 3, 59, ysize - 3);
boxfill8(vram, xsize, COL8_000000, 60, ysize - 24, 60, ysize - 3);
boxfill8(vram, xsize, COL8_848484, xsize - 47, ysize - 24, xsize - 4, ysize - 24);
boxfill8(vram, xsize, COL8_848484, xsize - 47, ysize - 23, xsize - 47, ysize - 4);
boxfill8(vram, xsize, COL8_FFFFFF, xsize - 47, ysize - 3, xsize - 4, ysize - 3);
boxfill8(vram, xsize, COL8_FFFFFF, xsize - 3, ysize - 24, xsize - 3, ysize - 3);
for (;;) {
io_hlt();
}
}
图灵社区会员 metorm 专享 尊重版权
8 今天的成果（harib01h） …… 87
任务条（task bar）有点大了，这是因为像素数太少的缘故吧。但很有进步，已经有点操作系
1
统的样子了。总算到了这一步。从什么都不会开始，到现在只用了四天。嗯，干得不错嘛。现在
的haribote.sys是1216字节，大概是1.2KB吧。虽然这个操作系统很小，但已经有这么多功能了。
2
好，今天先到此为止，明天再见啦。
3
4
4
6
7
8
9
10
11
12
13
14
15
16
图灵社区会员 metorm 专享 尊重版权
第 5 天
结构体、文字显示与GDT/IDT初始化
 接收启动信息（harib02a）  显示鼠标指针（harib02h）
 试用结构体（harib02b）  GDT与IDT的初始化（harib02i）
 试用箭头记号（harib02c）
 显示字符（harib02d）
 增加字体（harib02e）
 显示字符串（harib02f）
 显示变量值（harib02g）
11 接收启动信息（harib02a）
我们今天从哪儿开始讲呢？现在“纸娃娃操作系统”的外观已经有了很大的进步，所以下面
做些内部工作吧。
到昨天为止，在bootpack.c里的，都是将0xa0000呀，320、200等数字直接写入程序，而本来
这些值应该从asmhead.nas先前保存下来的值中取。如果不这样做的话，当画面模式改变时，系统
就不能正确运行。
所以我们就试着用指针来取得这些值。顺便说一下，binfo是bootinfo的缩写，scrn是screen（画
面）的缩写。
本次的HariMain节选
void HariMain(void)
{
char *vram;
int xsize, ysize;
short *binfo_scrnx, *binfo_scrny;
int *binfo_vram;
init_palette();
binfo_scrnx = (short *) 0x0ff4;
binfo_scrny = (short *) 0x0ff6;
binfo_vram = (int *) 0x0ff8;
图灵社区会员 metorm 专享 尊重版权
2 试用结构体（harib02b） …… 89
xsize = *binfo_scrnx;
1
ysize = *binfo_scrny;
vram = (char *) *binfo_vram;
这里出现的0x0ff4之类的地址到底是从哪里来的呢？其实这些地址仅仅是为了与asmhead. 2
nas保持一致才出现的。
另外，我们把显示画面背景的部分独立出来，单独做成一个函数init_screen。独立的功能做 3
成独立的函数，这样程序读起来要容易一些。
4
好了，做完了。执行一下吧。……嗯，暂时好像没什么问题。只是没什么意思，因为画面显
示内容没有变化。
5
22 试用结构体（harib02b）
5
上面的方法倒也不能说不好，只是代码的行数多了些，不太令人满意。而如果采用之前的
COLUMN-2里（第4章）的写法：
7
xsize = *((short *) 0x0ff4);
程序长度是变短了，但这样的写法看起来就像是使用了什么特殊技巧。我们还是尝试一下更
8