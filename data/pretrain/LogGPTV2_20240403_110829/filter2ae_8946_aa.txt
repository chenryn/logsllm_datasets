在 [Recon Montreal 2018](https://recon.cx/2018/montreal/)上我与[Alex
Ionescu](https://twitter.com/aionescu)一起展示了"未知已知的dll和其他违反代码完整性信任的行为"。我们描述了Microsoft
Windows的代码完整性机制的实现以及Microsoft如何实现受保护的进程(PP)。作为其中一部分，我演示了各种绕过Protected Process
Light (PPL)的方法，有些需要管理员权限，有些不需要。
在此博文中，我将描述我在Windows 10
1803上发现一种将代码注入PPL的方法的过程。由于微软认为唯一违反了防御安全边界的问题现在已经修复，因此我可以更详细地讨论这个漏洞。
##### Windows保护进程的背景
Windows Protected Process
(PP)模型的起源可以追溯到Vista，在Vista中引入了它来保护DRM进程。受保护的进程模型受到严格限制，将加载的dll限制为操作系统安装的代码子集。此外，要使可执行文件被认为具有启动保护资格，它必须使用嵌入在二进制文件中的特定Microsoft证书进行签名。没有受保护的进程无法打开具有足够权限注入任意代码或读取内存的受保护进程的句柄，是内核强制执行的一项保护措施。
在Windows 8.1中引入了一种新的机制，即Protected Process Light
(PPL)，使得保护更加普遍。PPL放宽了某些限制，即哪些dll对于加载受保护的进程有效，并为主要的可执行文件引入了不同的签名要求。另一个重大变化是引入了一组签名级别，以区分不同类型的受保护进程。一个级别的PPL可以在相同或更低的签名级别上开放任何进程的完全访问权限，并将有限的访问权限授予更高级别。这些签名级别被扩展到旧的PP模型中，一个级别的PP可以在相同或更低的签名级别上打开所有的PP和PPL，但是反过来不是这样的，PPL不能在任何签名级别上以完全访问的方式打开PP。以下是一些层次及关系图:  
签名级别允许微软向第三方开放受保护的进程，尽管目前第三方可以创建的唯一受保护进程类型是Anti-Malware PPL。Anti-Malware
级别是特殊的，因为它允许第三方通过注册 Early Launch Anti-Malware
(ELAM)证书添加额外的允许签名密钥。还有微软的TruePlay，这是一种反欺诈的技术，它使用了PPL的组件，但对于这个讨论来说并不重要。
我可以花很多时间来描述PP和PPL在幕后是如何工作的，但是我建议阅读Alex Ionescu的博客系列文章(第[1](http://www.alex-ionescu.com/?p=97)、[2](http://www.alex-ionescu.com/?p=116)和[3](http://www.alex-ionescu.com/?p=146)部分)，这会做得更好。虽然博客文章主要基于Windows 8.1，但大多数概念在Windows
10中并没有发生实质性的变化。
我在之前以Oracle在Windows上的VirtualBox虚拟化平台上的自定义实现的形式写过关于保护进程的文章[link](https://googleprojectzero.blogspot.com/2017/08/bypassing-virtualbox-process-hardening.html/)，。博客展示了我如何使用多种不同的技术绕过进程保护。当时我没有提到的是我所描述的第一种技术，将JScript代码注入到这个过程中，这也与微软的PPL实现背道而驰。正如我报告中所说，我可以将任意的代码注入到PPL到Microsoft(见issue
[1336](https://bugs.chromium.org/p/project-zero/issues/detail?id=1336))，这是出于对微软想要慎重的修复这个问题。在这种情况下，微软决定它不会作为一个安全公告被修复。然而，在Windows下一个主要版本(1803版)中，微软通过向CI添加以下代码修复了这个问题。DLL，内核的完整代码库:
    UNICODE_STRING g_BlockedDllsForPPL[] = {
     DECLARE_USTR("scrobj.dll"),
     DECLARE_USTR("scrrun.dll"),
     DECLARE_USTR("jscript.dll"),
     DECLARE_USTR("jscript9.dll"),
     DECLARE_USTR("vbscript.dll")
    };
    NTSTATUS CipMitigatePPLBypassThroughInterpreters(PEPROCESS Process, 
                                                    LPBYTE Image, 
                                                    SIZE_T ImageSize) {
     if (!PsIsProtectedProcess(Process))
       return STATUS_SUCCESS;
     UNICODE_STRING OriginalImageName;
     // Get the original filename from the image resources.
     SIPolicyGetOriginalFilenameAndVersionFromImageBase(
         Image, ImageSize, &OriginalImageName);
     for(int i = 0; i < _countof(g_BlockedDllsForPPL); ++i) {
       if (RtlEqualUnicodeString(g_BlockedDllsForPPL[i], 
                                 &OriginalImageName, TRUE)) {
         return STATUS_DYNAMIC_CODE_BLOCKED;
       }
     }
     return STATUS_SUCCESS;
    }
该修复程序将根据一个包含5个dll的黑名单检查部分正在加载的图像的资源的原始文件名。DLLs黑名单包括了诸如实现了原始的JScript脚本引擎的JSCRIPT.dll，和实现了scriptlet对象的SCROBJ.DLL。如果内核检测到PP或PPL加载了这些dll中的一个，那么使用STATUS_DYNAMIC_CODE_BLOCKED拒绝加载图像。如果您修改其中一个列出的dll的资源部分，则图像签名将失效，从而导致由于密码散列不匹配而导致图像加载失败。实际上，这与Oracle在VirtualBox中用来阻止攻击的修复方法是相同的，尽管它是在用户模式中实现的。
##### 寻找新的目标
前面使用脚本代码的注入技术是一种通用技术，适用于任何加载COM对象的PPL。技术修复后，我决定回过头来看看作为PPL可以加载哪些可执行程序，看看它们是否有任何明显的漏洞，我可以利用这些漏洞来获得任意的代码执行。我本可以选择去追求一个完整的PP，但是PPL似乎是两者中比较容易的，我必须从某个地方开始。如果我们能够获得管理员权限，那么注入PPL的方法有很多，其中最简单的方法就是加载内核驱动程序。由于这个原因，我发现的任何漏洞都必须从一个正常的用户帐户运行。我还想获得最高的签名级别，那意味着PPL在Windows
TCB签名级别。
第一步是识别作为受保护进程运行的可执行程序，这给了我们分析漏洞的最大攻击面。根据Alex的博客文章，似乎为了加载为PP或PPL，签名证书需要在证书的增强密钥使用(EKU)扩展中有一个特殊的对象标识符(OID)。PP和PPL有单独的OID;我们可以在下面的WERFAULTSECURE.exe的比较中看到这一点，可以运行为PP/PPL和CSRSS.EXE，只能作为PPL运行。
我决定寻找嵌入了EKU OIDs签名的可执行文件，这样我就能得到所有可执行文件的列表，以寻找可利用的行为.我为我的[NtObjectManager
PowerShell](https://www.powershellgallery.com/packages/NtObjectManager)
模块编写了Get-EmbeddedAuthenticodeSignature cmdlet来提取这些信息。
此时，我意识到依赖签名证书的方法存在一个问题，我希望能够以PP或PPL的形式运行许多二进制文件，但是我生成的列表中没有这些文件。由于PP最初是为DRM设计的，所以没有明显的可执行文件来处理受保护的媒体路径，比如AUDIODG.EXE。同时,根据我之前的研究设备保护和Windows
10系列,我知道必须有一个可执行的运行在.net框架可以作为PPL添加缓存签署NGEN水平信息生成的二进制文件(NGEN是一个将net汇编转换为本机代码的提前JIT)。PP/PPL的标准比我预期的更流畅。我不再做静态分析，而是决定执行动态分析，于是开始保护我可以列举和查询的每个可执行文件。我编写了下面的脚本来测试单个可执行文件：
    Import-Module NtObjectManager
    function Test-ProtectedProcess {
       [CmdletBinding()]
       param(
           [Parameter(Mandatory, ValueFromPipelineByPropertyName)]
           [string]$FullName,
           [NtApiDotNet.PsProtectedType]$ProtectedType = 0,
           [NtApiDotNet.PsProtectedSigner]$ProtectedSigner = 0
           )
       BEGIN {
           $config = New-NtProcessConfig abc -ProcessFlags ProtectedProcess `
               -ThreadFlags Suspended -TerminateOnDispose `
               -ProtectedType $ProtectedType `
               -ProtectedSigner $ProtectedSigner
       }
       PROCESS {
           $path = Get-NtFilePath $FullName
           Write-Host $path
           try {
               Use-NtObject($p = New-NtProcess $path -Config $config) {
                   $prot = $p.Process.Protection
                   $props = @{
                       Path=$path;
                       Type=$prot.Type;
                       Signer=$prot.Signer;
                       Level=$prot.Level.ToString("X");
                   }
                   $obj = New-Object –TypeName PSObject –Prop $props