            v3 = data[76]
            result = data[36]
            v4 = data[36]
            for k in range(8,0,-1):
                result = 9*k
                data[9*k+4]=data[9*(k-1)+4]
            data[4]=v3
            for l in range(8):
                data[l+36]=data[l+37]
                result=l+1
            data[44]=v4
    def check():
        for n in range(9):
            v5=[0 for m in range(9)]
            for i in range(9):
                v5[i]=data[((check_data[9*n+i])&0xF)+9 * ((((check_data[9*n+i])) >> 4) & 0xF)]
                s.add(v5[i]>0,v5[i]> 24)
        i = ((switch_code>>16)&0xf)+9*((((switch_code>>16)&0xff)>>4)&0xf)
        byte_switch_code = switch_code&0xff
        if ((switch_code>>8)&0xff == 0xcc):
            d_input = m_input
        else:
            d_input = m_input[::-1]
        if v1 == op[0]:
            data[i]=d_input[byte_switch_code]
        elif v1 == op[1]:
            data[i]+=d_input[byte_switch_code]
            data[i]&=0xff
        elif v1 == op[2]:
            data[i]-=d_input[byte_switch_code]
            data[i]&=0xff
        elif v1 == op[3]:
            data[i]=data[i]/d_input[byte_switch_code]
            data[i]&=0xFF
        elif v1 == op[4]:
            data[i]*=d_input[byte_switch_code]
            data[i]&=0xFF
        elif v1 == op[5]:
            data[i]^=d_input[byte_switch_code]
            data[i]&=0xFF
        elif v1 == op[6]:
            data[i]^=d_input[byte_switch_code-1]+d_input[byte_switch_code]-d_input[byte_switch_code+1]
            data[i]&=0xFF
        elif v1 == op[7]:
            data[i]^=d_input[byte_switch_code]*16
            data[i]&=0xFF
        elif v1 == op[8]:
            data[i]|=d_input[byte_switch_code]
            data[i]&=0xFF
        elif v1 == op[9]:
            data[i]^=d_input[byte_switch_code+1]^d_input[byte_switch_code-1]^(d_input[byte_switch_code-2]+d_input[byte_switch_code]-d_input[byte_switch_code+2])
            data[i]&=0xFF
        elif v1 == 0xDD:
            print "vmx_off"
        elif v1 == 0xFF:
            check()
            return
        else:
            print "error"
    from z3 import *
    s=Solver()
    m_input = [BitVec("fla%d"%i,32) for i in range(27)]
    for i in m_input:
        s.add(i>32,i 1、最后在恢复代码的时候确实是很累的活，将伪C代码转换为python脚本，中间还是有一些部分需要去理解的，自己动手恢复一遍会收获很多。  
>  2、由于写的时候，时间跨度比较大，函数名和截图不一定能对上号，双手奉上idb，作为参考。  
>  3、相关的idb已上传至网盘
相关附件  
 密码:182w
## 总结
这篇文章经历的时间有点长了，不过总算是结尾了，也算是善始善终。在写作期间，先后也查看了许多别人的解法，但是总归没有自己动手。如此详实的记载一遍，一方面切实能自己动手完整的解题并留下宝贵的过程，另一面也可以分享出来给大家作为参考。文中必定还有许多内容值得推敲，如有问题，还请大家指出。
## 最后
v爷爷的[出题思路](https://bbs.pediy.com/thread-247741.htm)
夜影师傅的[解题思路](https://bbs.pediy.com/thread-247741.htm)
> 看到没有！这就是大佬！ORZ～