task wrapper(type: Wrapper) {
    gradleVersion = '7.6'
    distributionUrl = '../../gradle-7.6-bin.zip'
    distributionPath=wrapper/dists
}
```
`distributionUrl` 属性可以设置为本地的项目目录，你也可以设置为网络地址。
## Gradle 任务
在 Gradle 中，任务(Task)是构建执行的单个工作单元。
Gradle 的构建是基于 Task 进行的，当你运行项目的时候，实际就是在执行了一系列的 Task 比如编译 Java 源码的 Task、生成 jar 文件的 Task。
Task 的声明方式如下（还有其他几种声明方式）：
```groovy
// 声明一个名字为 helloTask 的 Task
task helloTask{
     doLast{
       println "Hello"
     }
}
```
创建一个 Task 后，可以根据需要给 Task 添加不同的 Action，上面的“doLast”就是给队列尾增加一个 Action。
```groovy
 //在Action 队列头部添加Action
 Task doFirst(Action action);
 Task doFirst(Closure action);
 //在Action 队列尾部添加Action
 Task doLast(Action action);
 Task doLast(Closure action);
 //删除所有的Action
 Task deleteAllActions();
```
一个 Task 中可以有多个 Acton，从队列头部开始向队列尾部执行 Acton。
Action 代表的是一个个函数、方法，每个 Task 都是一堆 Action 按序组成的执行图。
Task 声明依赖的关键字是`dependsOn`，支持声明一个或多个依赖：
```groovy
task first {
 doLast {
        println "+++++first+++++"
    }
}
task second {
 doLast {
        println "+++++second+++++"
    }
}
// 指定多个 task 依赖
task print(dependsOn :[second,first]) {
 doLast {
      logger.quiet "指定多个task依赖"
    }
}
// 指定一个 task 依赖
task third(dependsOn : print) {
 doLast {
      println '+++++third+++++'
    }
}
```
执行 Task 之前，会先执行它的依赖 Task。
我们还可以设置默认 Task，脚本中我们不调用默认 Task ，也会执行。
```groovy
defaultTasks 'clean', 'run'
task clean {
    doLast {
        println 'Default Cleaning!'
    }
}
task run {
    doLast {
        println 'Default Running!'
    }
}
```
Gradle 本身也内置了很多 Task 比如 copy（复制文件）、delete（删除文件）。
```groovy
task deleteFile(type: Delete) {
    delete "C:\\Users\\guide\\Desktop\\test"
}
```
## Gradle 插件
Gradle 提供的是一套核心的构建机制，而 Gradle 插件则是运行在这套机制上的一些具体构建逻辑，其本质上和 `.gradle` 文件是相同。你可以将 Gradle 插件看作是封装了一系列 Task 并执行的工具。
Gradle 插件主要分为两类：
- 脚本插件：脚本插件就是一个普通的脚本文件，它可以被导入都其他构建脚本中。
- 二进制插件 / 对象插件：在一个单独的插件模块中定义，其他模块通过 Plugin ID 应用插件。因为这种方式发布和复用更加友好，我们一般接触到的 Gradle 插件都是指二进制插件的形式。
虽然 Gradle 插件与 .gradle 文件本质上没有区别，`.gradle` 文件也能实现 Gradle 插件类似的功能。但是，Gradle 插件使用了独立模块封装构建逻辑，无论是从开发开始使用来看，Gradle 插件的整体体验都更友好。
- **逻辑复用：** 将相同的逻辑提供给多个相似项目复用，减少重复维护类似逻辑开销。当然 .gradle 文件也能做到逻辑复用，但 Gradle 插件的封装性更好；
- **组件发布：** 可以将插件发布到 Maven 仓库进行管理，其他项目可以使用插件 ID 依赖。当然 .gradle 文件也可以放到一个远程路径被其他项目引用；
- **构建配置：** Gradle 插件可以声明插件扩展来暴露可配置的属性，提供定制化能力。当然 .gradle 文件也可以做到，但实现会麻烦些。
## Gradle 构建生命周期
Gradle 构建的生命周期有三个阶段：**初始化阶段，配置阶段**和**运行阶段**。
![](https://oss.javaguide.cn/github/javaguide/csdn/dadbdf59fccd9a2ebf60a2d018541e52.png)
在初始化阶段与配置阶段之间、配置阶段结束之后、执行阶段结束之后，我们都可以加一些定制化的 Hook。
![](https://oss.javaguide.cn/github/javaguide/csdn/5c297ccc4dac83229ff3e19caee9d1d2.png)
### 初始化阶段
Gradle 支持单项目和多项目构建。在初始化阶段，Gradle 确定哪些项目将参与构建，并为每个项目创建一个 [Project 实例](https://docs.gradle.org/current/dsl/org.gradle.api.Project.html) 。本质上也就是执行 `settings.gradle` 脚本，从而读取整个项目中有多少个 Project 实例。
### 配置阶段
在配置阶段，Gradle 会解析每个工程的 `build.gradle` 文件，创建要执行的任务子集和确定各种任务之间的关系，以供执行阶段按照顺序执行，并对任务的做一些初始化配置。
每个 `build.gradle` 对应一个 Project 对象，配置阶段执行的代码包括 `build.gradle` 中的各种语句、闭包以及 Task 中的配置语句。
在配置阶段结束后，Gradle 会根据 Task 的依赖关系会创建一个 **有向无环图** 。
### 运行阶段
在运行阶段，Gradle 根据配置阶段创建和配置的要执行的任务子集，执行任务。
## 参考
- Gradle 官方文档：
- Gradle 入门教程：
- Groovy 快速入门看这篇就够了：
- 【Gradle】Gradle 的生命周期详解：
- 手把手带你自定义 Gradle 插件 —— Gradle 系列(2)：
- Gradle 爬坑指南 -- 理解 Plugin、Task、构建流程：