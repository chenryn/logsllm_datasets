# Foreign Data Wrappers (FDWs): Usage and Development
## Presentation by Ashutosh Bapat, Rushabh Lathia | PGCon 2016
### Â© Copyright EnterpriseDB Corporation, 2015-2016. All Rights Reserved.

## postgres_fdw Demo

## Create Server Options
- **Libpq Connection Options**:
  - Excludes: `User`, `password` (use user mapping options), `client_encoding` (set to the local server's encoding).
  - Relevant Options:
    - `host/hostaddr`: Name or location of the foreign server.
    - `port`: Port number.
    - `dbname`: Database name to connect to.
    - `sslmode` and other SSL-related options.

## Planner Cost Options
- **fdw_startup_cost**: Represents the cost of establishing a connection, parsing, and planning the query.
- **fdw_tuple_cost**: Represents the cost of transferring data per tuple.
- **use_remote_estimate**: Uses `EXPLAIN` to get the cost of executing the query on the foreign server.
- **fetch_size**: Number of tuples to fetch in each operation.
- **extensions**: List of matching extensions available on the foreign server.

## Create User Mapping Options
- **user**: Foreign server user name to connect as.
- **password**: Password for the user.

## Create Foreign Table Options
- **schema_name**: Schema on the foreign server where the foreign table is located.
- **table_name**: Name of the table on the foreign server.
- **column_name**: Name of the column on the foreign server.
- **use_remote_estimate, fetch_size**: Similar to the foreign server settings.

## Query Processing in PostgreSQL

## FDW and Query Execution
- **PostgreSQL Foreign Data Wrapper (FDW)**:
  - **Parse Tree**: `AddForeignUpdateTargets()`
  - **Query Rewrite**: `GetForeignPaths()`, `GetForeignJoinPaths()`, `GetForeignUpperPaths()`
  - **Create Paths**: `GetForeignPlan()`, `PlanForeignModify()`, `Convert cheapest path to plan`
  - **Begin Execution**: `BeginForeignPlan()`, `BeginForeignModify()`, `BeginDirectModify()`
  - **Execute Plan**: Iterate over the execution tree until it outputs rows.
  - **End Execution**: `EndForeignPlan()`, `EndForeignModify()`, `EndDirectModify()`

## Node Types in PostgreSQL
- **Basic Block of Any Tree Structure**:
  - **Parse Nodes**: Appear in parse trees.
  - **Expression Nodes**: Appear everywhere to represent various expressions.
  - **Plan Nodes**: Appear in plan trees.
  - **Execution State Nodes**: Appear in execution trees, holding the current execution state of the node.

## Path and Path Cost
- **Each Operation in a Query**:
  - Can be realized in multiple ways (e.g., joins: hash, merge, nested loop).
  - Each method is represented as a path.
  - **Path**:
    - A lightweight plan.
    - Estimated cost models execution time.
    - **Startup Cost**: Cost expended before fetching any tuples.
    - **Total Cost**: Startup cost + cost for fetching all tuples.

## Relations: Unit of Query Result
- **Query**: Ordered set of (SQL) operations.
- **Relation**: Result of each operation (e.g., result of scanning a table, joins, grouping, limit).
- **RelOptInfo**:
  - Represents results of various operations in the query.
  - Holds all paths for realizing that result.
  - **fdw_private**: Member for FDW-specific information (e.g., file_fdw stores the file path on the disk).

## Example Query Plan
```sql
EXPLAIN VERBOSE SELECT count(*), t1.a FROM t1, t2 WHERE t1.a = t2.a GROUP BY t1.a, t1.b + t2.b ORDER BY t1.b + t2.b;
```
**QUERY PLAN**:
- **Group Aggregate**:
  - **Output**: `count(*), t1.a, ((t1.b + t2.b))`
  - **Group Key**: `((t1.b + t2.b)), t1.a`
  - **Sort**:
    - **Output**: `t1.a, ((t1.b + t2.b))`
    - **Sort Key**: `((t1.b + t2.b)), t1.a`
  - **Hash Join**:
    - **Output**: `t1.a, (t1.b + t2.b)`
    - **Hash Cond**: `(t1.a = t2.a)`
    - **Seq Scan on frgn_schema.t1**:
      - **Output**: `t1.a, t1.b`
    - **Hash**:
      - **Output**: `t2.b, t2.a`
      - **Seq Scan on frgn_schema.t2**:
        - **Output**: `t2.b, t2.a`

## Writing a Foreign Data Wrapper
- **blackhole_fdw**:
  - Accepts everything and returns nothing.
  - Skeleton template for writing a new FDW.
  - Available at: [https://bitbucket.org/adunstan/blackhole_fdw/src](https://bitbucket.org/adunstan/blackhole_fdw/src)
  - Heavily annotated code, ready to use extension files.

## FDW Handler and Validator
- **Handler Function**:
  - Returns a structure of function pointers implementing FDW APIs.
- **Validator Function**:
  - Validates options given to `CREATE/ALTER` commands.
  - Input: Array of options with values, type of object (server, table, user mapping).
  - Throws an error on encountering an invalid option.

## Pushing Down Operations
- **Aim**: Delegate or push down operations to the foreign server.
- **Pushable Operations (as of 9.6)**:
  - Expressions in `SELECT` clause.
  - Conditions in `WHERE`, `ON`, `HAVING` clauses.
  - Joins, sorting, aggregates, grouping, `LIMIT`.

## Push-Down Considerations
- **Push-Down Safety**:
  - Can the foreign server evaluate a construct? (e.g., `file_fdw` may not evaluate joins).
  - Evaluation should produce the same result as the local server.
  - **Examples**:
    - `now()`: Unsafe.
    - Arithmetic, logical operations on integers: Safe.
- **Pushdown Efficiency**:
  - Is evaluation at the foreign server going to improve performance?

## Writing a Simple Table Scanner: Planning
- **PostgreSQL Planner**:
  - **GetForeignRelSize()**: Estimate sizes of relations (number of rows and width).
  - **GetForeignPaths()**: Create paths, add `ForeignPath` for relation with cost.
  - **GetForeignPlan()**: Create plan for the cheapest path, create `ForeignScan` plan.

## Writing a Simple Table Scanner: Execution
- **PostgreSQL Executor**:
  - **ExecInitNode() - BeginForeignScan()**: Prepare for foreign scan, connect to the server.
  - **IterateForeignScan()**: Fetch data, return rows one at a time.
  - **EndForeignScan()**: Finish execution, clean up.

## file_fdw Executor Using COPY Protocol
- **fileBeginForeignScan()**:
  - Calls `BeginCopyFrom()` with filename and foreign table options.
  - Opens file, reads header if any.
  - Sets up data type input functions.
- **fileEndForeignScan()**:
  - Calls `EndCopyFrom()`.
  - Closes file.
- **fileRescanForeignScan()**:
  - Ends and begins copy from the file.

## file_fdw: Per Row Data Conversion
- **fileIterateForeignScan()**:
  - Calls `NextCopyFrom()`.
  - Reads next record from the file.
  - Separates data column-wise using delimiters.
  - Converts input data to PostgreSQL data format using data type input functions (e.g., `date_in()` for text, `date_receive()` for binary).

## mongo_fdw in a Nutshell
- **Example**:
  ```sql
  CREATE FOREIGN TABLE warehouse(
    _id NAME,
    warehouse_id int,
    warehouse_name text,
    warehouse_created timestamptz
  ) SERVER mongo_server OPTIONS (database 'db', collection 'warehouse');

  SELECT * FROM warehouse WHERE warehouse_id = 1;
  ```
  - **MongoDB Query**:
    ```javascript
    db.warehouse.find({"warehouse_id" : 1}).pretty()
    {
      "_id" : ObjectId("53720b1904864dc1f5a571a0"),
      "warehouse_id" : 1,
      "warehouse_name" : "UPS",
      "warehouse_created" : ISODate("2014-12-12T07:12:10Z")
    }
    ```
  - **Result**:
    ```plaintext
    _id | warehouse_id | warehouse_name | warehouse_created
    ------------------------+----------------+---------------------------
    53720b1904864dc1f5a571a0| 1 | UPS | 12-DEC-14 12:12:10 +05:00
    ```

## mongo_fdw: Scanning a Simple Table
- **MongoBeginForeignScan**:
  - Open connection to MongoDB - `MongoConnect()`.
  - Create MongoDB cursor - `MongoCursorCreate()`.
- **MongoRescanForeignScan**:
  - Close running cursor: `MongoCursorDestroy()`.
  - Reopen it: `MongoCursorCreate()`.
- **MongoEndForeignScan**:
  - Close running cursor: `MongoCursorDestroy()`.

## mongo_fdw: Iterating Over Rows
- **MongoIterateForeignScan**:
  - Fetch next record - `MongoCursorNext()`.
  - Fetch columns from the record by iterating over the contents using `MongoCursorBson()`, `BsonIterInit()`, `BsonIterNext()`.
  - Fetch column value using `BsonIter` (e.g., `BsonIterInt()`, `BsonIterDouble()`).
  - Convert to PostgreSQL using `GetDatum()` calls (e.g., `Int32GetDatum()`, `Float4GetDatum()`).

## Join and Post-Join Operation Pushdown
- **Use `GetForeignJoinPaths()`**:
  - Add `ForeignPaths` for join between two foreign relations.
  - Assess pushdown safety of join.
- **Use `GetForeignUpperPaths()`**:
  - Add `ForeignPaths` for operations like grouping, aggregation, sort, limit, etc.
- **In `GetForeignPlan()`**:
  - Create a `fdw_scan_tlist` representing the result of the join from the foreign server.

## Modifying a Foreign Table: Rewriter and Planner
- **PostgreSQL Rewriter, Planner**:
  - **AddForeignUpdateTargets()**: Expand target list for DML (e.g., rowid, primary key).
  - **PlanForeignModify**: Create `ModifyTable` plan, add FDW-specific information to the `ModifyPlan` node.

## Modifying a Foreign Table: Execution
- **PostgreSQL Executor**:
  - **ExecInitNode() - BeginForeignModify()**: Preparation before actual data modifications, connect to the server.
  - **ExecForeignInsert/Update/Delete**: Modify data on the foreign server one row at a time.
  - **EndForeignModify**: Finish execution, clean up.

## Direct Modification: Planner
- **PlanDirectModify()**:
  - Assess whether the DML is safe to be executed on the foreign server.
  - Construct the query/code to execute the DML on the foreign server.
  - Add `ForeignScan` plan as subplan to the given `ModifyTable` plan.

## Direct Modification: Execution
- **PostgreSQL Executor**:
  - **ExecInitNode() - BeginDirectModify()**: Preparation before actual data modifications, connect to the server.
  - **IterateDirectModify()**: En-masse data modification, return one row at a time for triggers, returning, etc.
  - **EndDirectModify**: Finish execution, clean up.

## More APIs and Further Reading
- **ExplainForeignScan, ExplainForeignModify**: For adding FDW-specific information in `EXPLAIN` output.
- **AnalyzeForeignTable**: Scan foreign table to sample rows for collecting statistics.
- **ImportForeignSchema**: Implementation hook for `IMPORT FOREIGN SCHEMA` command.
- **Further Reading**: [http://www.postgresql.org/docs/devel/static/fdwhandler.html](http://www.postgresql.org/docs/devel/static/fdwhandler.html)

## Multicorn
- **Python-based Extension and FDW**:
  - Makes it easy to write FDWs.
  - A "wrapper over wrapper".
  - Good for quick implementations.