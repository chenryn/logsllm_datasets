作者：GToad  
作者博客：[GToad Blog](https://gtoad.github.io/2018/07/06/Android-Native-Hook-Practice/)
本文章所对应项目长期维护与更新，因为在我自己的几台测试机上用得还挺顺手的。本项目作为作者本人的一个学习项目将会长期更新以修复当前可能存在的Bug以及跟进以后Android
NDK可能出现的主流汇编模式。
## 前言
在目前的安卓APP测试中对于Native Hook的需求越来越大，越来越多的APP开始逐渐使用NDK来开发核心或者敏感代码逻辑。个人认为原因如下：
  1. 安全的考虑。各大APP越来越注重安全性，NDK所编译出来的so库逆向难度明显高于java代码产生的dex文件。越是敏感的加密算法与数据就越是需要用NDK进行开发。
  2. 性能的追求。NDK对于一些高性能的功能需求是java层无法比拟的。
  3. 手游的兴起。虚幻4，Unity等引擎开发的手游中都有大量包含游戏逻辑的so库。
因此，本人调查了一下Android Native Hook工具目前的现状。尽管Java层的Hook工具多种多样，但是Native
Hook的工具却非常少并且在`安卓5.0以上`的适配工具更是寥寥无几。（文末说明1）而目前Native Hook主要有两大技术路线：
  1. PLT Hook
  2. Inline Hook
这两种技术路线本人都实践了一下，关于它们的对比，我在[《Android Native
Hook技术路线概述》](https://gtoad.github.io/2018/07/05/Android-Native-Hook/)中有介绍，所以这里就不多说了。最终，我用了`Inline Hook`来做这个项目。
本文篇幅已经较长，因此写了一些独立的学习笔记来对其中的细节问题进行解释：
  1. [《Android Native Hook技术路线概述》](https://gtoad.github.io/2018/07/05/Android-Native-Hook/)
  2. [《Android Inline Hook中的指令修复》](https://gtoad.github.io/2018/07/13/Android-Inline-Hook-Fix/)
  3. [项目仓库](https://github.com/GToad/Android_Inline_Hook)
  4. [项目案例——Arm32](https://github.com/GToad/Android_Inline_Hook_Arm_Example)
  5. [项目案例——Thumb-2](https://github.com/GToad/Android_Inline_Hook_Thumb_Example)
## 目标效果
根据本人自身的使用需求提出了如下几点目标：
  1. 工具运行原理中不能涉及调试目标APP，否则本工具在遇到反调试措施的APP时会失效。尽管可以先去逆向调试patch掉反调试功能，但是对于大多数情况下只是想看看参数和返回值的Hook需求而言，这样的前期处理实在过于麻烦。
  2. 依靠现有的各大Java Hook工具就能运行本工具，换句话说就是最好能用类似这些工具的插件的形式加载起本工具从而获得Native Hook的能力。由于Java Hook工具如Xposed、YAHFA等对于各个版本的Android都做了不错的适配，因此利用这些已有的工具即可向目标APP的Native层中注入我们的Hook功能将会方便很多小伙伴的使用。
  3. 既然要能够让各种Java Hook工具都能用本工具得到Native Hook的能力，那就这个工具就要有被加载起来以后自动执行自身功能逻辑的能力！而不是针对各个Java Hook工具找调用起来的方式。
  4. 要适配Android NDK下的armv7和thumb-2指令集。由于现在默认编译为thumb-2模式，所以对于thumb16和thumb32的Native Hook支持是重中之重。
  5. 修复Inline Hook后的原本指令。
  6. Hook目标的最小单位至少是函数，最好可以是某行汇编代码。
## 最终方案
最后完成项目的方案是：本工具是一个so库。用Java Hook工具在APP的入口Activity运行一开始的onCreate方法处Hook，然后加载本so。
加载后，自动开始执行Hook逻辑。
为了方便叙述，接下来的Java Hook工具我就使用目前这类工具里最流行的`Xposed`，本项目的生成文件名为`libautohook.so`。
## 自动执行
我们只是用Xposed加载了这个libautohook.so，那其中的函数该怎么自动执行呢？
目前想到两个方法：
  1. 利用JniOnload来自动执行。该函数是NDK中用户可以选择性自定义实现的函数。如果用户不实现，则系统默认使用NDK的版本为1.1。但是如果用户有定义这个函数，那Android VM就会在System.loadLibrary()加载so库时自动先执行这个函数来获得其返回的版本号。尽管该函数最终要返回的是NDK的版本号，但是其函数可以加入任意其它逻辑的代码，从而实现加载so时的自动执行。这样就能优先于所有其它被APP NDK调用的功能函数被调用，从而进行Hook。目前许多APP加固工具和APP初始化工作都会用此方法。
  2. 本文采用的是第二种方法。该方法网络资料中使用较少。它是利用了`__attribute__((constructor))`属性。使用这个constructor属性编译的普通ELF文件被加载入内存后，最先执行的不是main函数，而是具有该属性的函数。同样，本项目中利用此属性编译出来的so文件被加载后，尽管so里没有main函数，但是依然能优先执行，且其执行甚至在JniOnload之前。于是逆向分析了一下编译出来的so库文件。发现具有`constructor`属性的函数会被登记在.init_array中。（相对应的`destructor`属性会在ELF卸载时被自动调用，这些函数会被登记入.fini_array）
值得一提的是，`constructor`属性的函数是可以有多个的，对其执行顺序有要求的同学可以通过在代码中对这些函数声明进行排序从而改变其在.init_array中的顺序，二者是按顺序对应的。而执行时，会从.init_array中自上而下地执行这些函数。所以图中的自动优先执行顺序为：main5->main3->main1->main2->main4。并且后面会说到，从+1可以看出这些函数是thumb模式编译的。
## 方案设计
先说一下使用的工具：
  1. 使用`keystone`查找指定架构下汇编指令的机器码
  2. 使用`MS VISIO`制作了下面的设计图
  3. 调试工具用的是`IDA pro`
#### Arm32方案
现在我们的代码可以在一开始就执行了，那该如何设计这套Inline
Hook方案呢？目标是thumb-2和arm指令集下是两套相似的方案。我参考了腾讯游戏安全实验室的一篇教程，其中给出了一个初步的armv7指令集下的Native
Hook方案，整理后如下图：
###### Arm 第1步
根据/proc/self/map中目标so库的内存加载地址与目标Hook地址的偏移计算出实际需要Hook的内存地址。将目标地址处的2条ARM32汇编代码（8
Bytes）进行备份，然后用一条LDR PC指令和一个地址（共计8
Bytes）替换它们。这样就能（以arm模式）将PC指向图中第二部分stub代码所在的位置。由于使用的是LDR而不是BLX，所以lr寄存器不受影响。关键代码如下：
    //LDR PC, [PC, #-4]对应的机器码为：0xE51FF004
    BYTE szLdrPCOpcodes[8] = {0x04, 0xF0, 0x1F, 0xE5};
    //将目的地址拷贝到跳转指令下方的4 Bytes中
    memcpy(szLdrPCOpcodes + 4, &pJumpAddress, 4);
###### Arm 第2步
构造stub代码。构造思路是先保存当前全部的寄存器状态到栈中。然后用BLX命令（以arm模式）跳转去执行用户自定义的Hook后的函数。执行完成后，从栈恢复所有的寄存器状态。最后（以arm模式）跳转至第三部分备份代码处。关键代码如下：
    _shellcode_start_s:
        push    {r0, r1, r2, r3}
        mrs     r0, cpsr
        str     r0, [sp, #0xC]
        str     r14, [sp, #8]   
        add     r14, sp, #0x10
        str     r14, [sp, #4]    
        pop     {r0}               
        push    {r0-r12}           
        mov     r0, sp
        ldr     r3, _hookstub_function_addr_s
        blx     r3
        ldr     r0, [sp, #0x3C]
        msr     cpsr, r0
        ldmfd   sp!, {r0-r12}       
        ldr     r14, [sp, #4]
        ldr     sp, [r13]
        ldr     pc, _old_function_addr_s
###### Arm 第3步
构造备份代码。构造思路是先执行之前备份的2条arm32代码（共计8
Btyes），然后用LDR指令跳转回Hook地址+8bytes的地址处继续执行。此处先不考虑PC修复，下文会说明。构造出来的汇编代码如下：
    备份代码1
    备份代码2
    LDR PC, [PC, #-4]
    HOOK_ADDR+8
#### Thumb-2方案
以上是本工具在arm指令集上的Native
Hook基本方案。那么在thumb-2指令集上该怎么办呢？我决定使用多模式切换来实现(文末解释2)，整理后如下图：
`虽然这部分内容与arm32很相似，但由于细节坑较多，所以我认为下文重新梳理详细思路是必要的。`
###### Thumb-2 第1步
第一步，根据/proc/self/map中目标so库的内存加载地址与目标Hook地址的偏移计算出实际需要Hook的内存地址。将目标地址处的X
Bytes的thumb汇编代码进行备份。然后用一条LDR.W PC指令和一个地址（共计8
Bytes）替换它们。这样就能（以arm模式）将PC指向图中第二部分stub代码所在的位置。由于使用的是LDR.W而不是BLX，所以lr寄存器不受影响。
`细节1`：为什么说是X Bytes？参考了网上不少的资料，发现大部分代码中都简单地将arm模式设置为8 bytes的备份，thumb模式12
bytes的备份。对arm32来说很合理，因为2条arm32指令足矣，上文处理arm32时也是这么做的。而thumb-2模式则不一样，thumb-2模式是thumb16（2
bytes）与thumb32（4
bytes）指令混合使用。本人在实际测试中出现过2+2+2+2+2+4>12的情形，这种情况下，最后一条thumb32指令会被截断，从而在备份代码中执行了一条只有前半段的thumb32，而在4->1的返回后还要执行一个只有后半段的thumb32。因此，本项目最初在第一步备份代码前会检查最后第11和12byte是不是前半条thumb32，如果不是，则备份12
byte。如果是的话，就备份10
byte。但是后来发现也不行，因为Thumb32指令的低16位可能会被误判为新Thumb32指令的开头。因此，最终通过统计末尾连续“疑似”Thumb32高16位的数量，当数量为单数则备份10
bytes，数量为偶数则备份12
bytes。这么做的原因如下：如果这个16位符合Thumb32指令的高16位格式，那它肯定不是Thumb16，只可能是Thumb32的高16位或低16位。因为Thumb16是不会和Thumb32有歧义的。那么，当它前面的16位也是类似的“疑似”Thumb32的话，可能是它俩共同组成了一个Thumb32，也可能是它们一个是结尾一个是开头。所以，如果结尾出现1条疑似Thumb32，则说明这是一条截断的，出现2条疑似Thumb32，说明它俩是一整条，出现3条，说明前2条是一条thumb32，最后一条是被截断的前部分，依此类推。用下面这张图可能更容易理解，总之：`疑似Thumb32的2
Bytes可能是Thumb32高16位或Thumb32低16位，但不可能是Thumb16`:
`细节2`：为什么Plan B是10 byte？我们需要插入的跳转是8
byte，但是thumb32中如果指令涉及修改PC的话，那么这条指令所在的地址一定要能整除4，否则程序会崩溃。我们的指令地址肯定都是能被2整除的，但是能被4整除是真的说不准。因此，当出现地址不能被4整除时，我们需要先补一个thumb16的NOP指令（2
bytes）。这样一来就需要2+8=10 Bytes了。尽管这时候选择14 Bytes也差不多，我也没有内存空间节省强迫症，但是选择这10
Bytes主要还是为了提醒一下大家这边补NOP的细节问题。 关键代码如下：
    bool InitThumbHookInfo(INLINE_HOOK_INFO* pstInlineHook)
    {
        ......
        uint16_t *p11;
        for (int k=5;k>=0;k--){
            p11 = pstInlineHook->pHookAddr-1+k*2;
            LOGI("P11 : %x",*p11);
            if(isThumb32(*p11)){
                is_thumb32_count += 1;
            }else{
                break;
            }
        }
        //如果是的话就需要备份14byte或者10byte才能使得汇编指令不被截断。由于跳转指令在补nop的情况下也只需要10byte，
        //所以就取pstInlineHook->backUpLength为10
        if(is_thumb32_count%2==1)