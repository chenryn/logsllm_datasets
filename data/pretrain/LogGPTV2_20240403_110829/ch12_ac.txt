◆ ◆ ◆
在PayPal， 我们相信站点可靠性工程师既是 DevOps 的终极推动者，也是 DevOps 的理想实践者。为此，我们主要通过两种方式进行可靠性设计。第一，作为平台提供商，构建并持续改进关键工具，使整个企业中的其他 SRE、开发团队和操作团队得以实现。第二，作为业务关键型产品团队中的嵌入式专家，需要专门的可靠性工程来实现世界一流的可用性、生产率等。
随着我们在 DevOps 实践中成长，我们发现，在组织内越来越需要有天份的 SRE 来针对 PayPal 这样的复杂系统来开发心理模型。这种心理模型是 SRE 开发高效工具和平台的关键。此心理模型还使 SRE 功能对更广泛的开发团队和运营团队具有独特的价值，例如导出系统知识、共享关键服务的所有权、在重大事件期间利用专业知识以及推动有洞察力的故障报告。—Andrew Farmer，高级经理，SRE，PayPal 公司。
◆ ◆ ◆
我相信 SRE 是一种能够大规模帮助 DevOps 的做法。我们将公司从 8 个团队扩展到 20 个团队时，仅 DevOps 就为我们工作得很好。然而，随着实践 DevOps 的工程团队数量的增加，很明显，我们需要一些总体的东西来帮助指导和支持这些团队。并非所有团队都共享经验教训，可靠的实践并不总是得到他们所需的关注。
SRE 有助于对我们的团队（在专注近期事件历史之外）着眼于对可靠性进行更高程度的监控。通过手动和工具测试和分析，SRE 能够帮助团队了解其可靠性风险，并帮助确定其优先级。SRE 团队还能够投入时间构建通用型工具和服务，支持所有工程团队确保其产品的可靠性。正如 DevOps 和 PaaS【平台即服务】可以共存一样，我相信 DevOps 和可靠性即服务（SRE）可以共存。—Bennie Johnston，SRE 负责人，Just Eat
◆ ◆ ◆
最大的区别是 DevOps 是一种方法，而 SRE 是一个特定的工作角色。尽管它通常表现为“部署系统”的守护者，但 DevOps 植根于对交付流程和管理服务总体有效性的多学科检查。SRE 角色是在线服务分工的体现。与专注于功能的传统专业化不同，SRE 的劳动分工围绕产品进行一致，而不考虑功能。
造成两者混淆的一个关键原因是，两者都努力采用多学科或跨职能的方法来实践；但焦点才是两者的不同之处。DevOps 专注于流程，SRE 专注于产品。 
—Chris McEniry，系统架构师
◆ ◆ ◆—Chris McEniry，系统架构师
◆ ◆ ◆
SRE 和 DevOps 具有广泛的重叠范围，但它们是截然不同的想法。与实际使用一样，当公司希望维护开发人员在继续改进现有软件系统时也负责生产和非生产基础结构时，会为 DevOps 招募员工。与此相反，当公司希望在基础设施管理和开发之间保持分工时，他们往往会招聘站点可靠性工程师。SRE 将具有更深入和更广泛的基础架构技能，包括更多负载均衡器、网络、数据库和容器编排系统，如 Kubernetes；而 DevOps 开发人员通常拥有业务领域和首选编程语言的更深层专业知识。
DevOps 团队更有可能在具有通用技术堆栈或云托管基础结构的环境中使用。在这些情况下，云提供商会负责基础结构，以便开发人员可以更专注于提供业务价值。越来越多的 SRE 存在于偏向于自我托管或具有复杂基础结构要求的环境的保留型公司中。这些 SRE 提供以前是系统管理员域的操作支持。不同之处在于，SRE 应利用编程技能来自动执行环境构建和应用程序部署，或者以传统系统管理员无法采用的方式为基础结构工具编写修补程序。—John Siegrist, release engineer, Deswik Mining
◆ ◆ ◆
虽然 DevOps 和 SRE 角色在许多技术执行方面重叠，但区别可能来自组织的规模和规模。由于软件及其生态系统不遵循规模经济，随着组织的软件和基础设施规模的增长，团队必须专业化和集中化；这就是从 DevOps 到 SRE 的可能过渡发挥作用的地方。对于小型企业和组织，DevOps 文化减少了开发和操作之间的敌视，从而快速迭代和更改。随着组织的发展和扩展，标准化软件的开发和部署方式变得势在必行，以减少在低估和完成工作时的认知负载和工作量。
DevOps 和 SRE 角色都可以在这里做出贡献，DevOps 可以更专注于开发人员的工作效率（例如，构建系统、培训、更好的测试等工具），而 SRE 则侧重于缩短维护停机时间、维护生产系统以及专业化工具（例如分布式跟踪基础结构），这两个角色都成为具有规模的全职作业。共同的目标是再次实现从代码提交到生产部署的更改，这种更改尽可能无摩擦、高度可见且可预测。是的，DevOps 和 SRE 角色可以共存，但往往用词模糊且不易区分。它很大程度上取决于组织、业务和规模。—Pranay Kanwar, staff site reliability engineer, LinkedIn
◆ ◆ ◆
在 DevOps 和操作方面拥有丰富的经验，现在还参与了许多 SRE 团队，因此这个话题一直是我感到有点吸引人的东西。我认为，这两个概念有很多重叠之处，尽管它们仍然相当不同。一方面，我们有 DevOps，一个全球化的软件开发运动，强调从系统思维的角度看待软件的交付。另一方面，我们有SRE，它采用从软件工程的角度管理运维的方法。SRE 的许多部分很容易融入 DevOps CAMS 模型，特别是因为它与具有错误预算的文化以及使用四个黄金指标的测量等内容相关。我认为对我来说，最有趣的事情是，SRE 从传统的操作工作中带回了一点“混乱之墙”，我们总是在 DevOps 中尽可能地消除它。这绝不意味着在 SRE 软件是“隔离墙”，就像我们对传统的软件开发的嘲弄一样。但是，与在 DevOps 模型中时刻准备轮值的开发人员不同，SRE 模型中有明确的职责范围，他们负责满足生产系统的 SLO，即使这意味着要解决这些问题。这可能是因为规模化扩展带来的。在某些方面，SRE 是传统模型和新的 DevOps 模型的混合体，将“运维是一组特殊人群”的元素与传统模型以及 DevOps 中 CAMS 模型的许多组件引入。并不是大家认为的混乱之墙，而是关于对话或协作的墙（而且是一个很容易逾越的墙）！难怪我们很难区分二者。 
—Dave Mangot，前站点可靠性工程主管，SolarWinds Cloud
◆ ◆ ◆◆ ◆ ◆
DevOps 实际上是关于开发人员和运维人员协同工作，具有互补和重叠的技能，但真正专注于不同的领域。主要目标是支持开发人员快速开发高质量的代码、功能和为最终用户提供价值。同时，要将其干净、快速地部署到高质量、高度可维护且可靠的基础架构上，然后支持并维护它，以带来可靠性、可扩展性、性能、安全性和成本节约。
另一方面，SRE 实际上是关于构建和管理高度可靠的系统和应用程序。因此，它在理想中处于更高层的运维级别，因为 SRE 侧重于体系结构、配置、工具、监视和管理以及流程，以便 DevOps 团队能够真正实现其目标。开发人员和运维往往被日常的操劳拖累，而 SRE 可确保整个系统和生态系统能够实现其目标。 
—Steve Mushero, CEO, OpsStack
◆ ◆ ◆—Steve Mushero, CEO, OpsStack
◆ ◆ ◆
与其探讨 DevOps 和 SRE 之间的关系不如说如何定义实际 SRE 角色的位置，并且通过 DevOps 的方法与运维人员一起在 SRE 团队中实践和演练。在 DevOps/SRE 相似的地方在于，要求工程师（系统工程师或软件工程师）将软件工程原则应用于向用户或其他系统提供服务的软件系统的运维。在 DevOps/SRE 不同的地方在于，没有关于如何实现 DevOps 的规则和法则的宣言。对于 SRE，虽然没有成功的保证，但组织正在大步前进，提供有关如何定义和实现 SRE 的案例，因此它不会被遗忘。例如，公共云公司正在为客户提供免费服务，以帮助在其组织内实施 SRE。
在组织中实施 SRE 时，你会自动使用 DevOps 方法作为该实现的一部分，因此，从某种意义上说，这是在组织内实现。在 SRE 团队支持的软件系统和服务执行运维工作时，则要兼顾对利用软件工程原则的任务保持关注。—Chad Todd
◆ ◆ ◆
当你用 SLO 来驱动时，SRE 就是 DevOps。两者都追求相同的目标，但走不同的路。SLO 有助于引导努力和投资，在 DevOps 中没有类似的工具。
DevOps 在初创公司中更为常见，在初创公司中，尽可能快地达到生产目标的积极性明显超过可靠性或可用性。当创新与可靠性之间的冲突开始出现时，SRE 对成熟的企业更有意义。 
—Luis Mineiro，首席站点可靠性工程师，Zalando
◆ ◆ ◆