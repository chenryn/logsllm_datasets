1.hosts和users
—hosts:webservers
sudo:yes
remote_user: yourname
hosts: webservers
remote user: root
hosts: webservers
handlers:
-name: write the apache config file
yum: pkg=httpd state=latest
-name: ensure apache is at the latest version
tasks:
remote_user: root
vars:
hosts:
template:src=/srv/httpd.j2 dest=/etc/httpd.conf
service: name=httpd state=started
-name: ensure apache is running
notify:
max clients:200
http _port:80
一
service:name-httpd state=restarted
name:restart apache
restart apache
webservers
集中化运维利器
-Ansible
二
---
## Page 52
自动化运维软件设计实战
使用模板模块：
使用文件模块：
使用shell模块：
使用command模块：
使用服务模块：
每一个PlayBook 都会有一份作业列表，
2.Tasks list
采用自己的账户登录，采用其他账户执行sudo：
tasks:
tasks:
tasks:
tasks:
-hosts: webservers
sudo:yes
-name: run this command and ignore the result
-name:disable selinux
-name: make sure apache is running
sudo_user: postgres
sudo: yes
remote_user: yourname
tasks:
remote_user: yourname
copy: src=/etc/ansible/hosts dest=/etc/ansible/hosts
name: Copy ansible inventory file to client
shell:/usr/bin/somecommand 1l /bin/true
command:/sbin/setenforce 0
service:name=httpd state=running
-service:name=nginx state=started
说明究竟要按照什么样的顺序去执行这些命令。
---
## Page 53
而设计的。
到重用的目标，这时可以采用include。总的来说，PlayBook的 Include就是为了解决重用
在这种情况下就可以使用Ansible的Handlers功能。
时就需要有一个通知的动作。即当配置文件下发完成后，需要通知Apache服务进行重启。
在开发的时候，我们有变量这个概念，有了变量，也就意味着函数的可重用性得到了
2.5.3
引用的同时传入变量：
简单的include：
2.5.2
对一个正在运行的Apache服务完成配置文件的更新之后，需要重启Apache服务，这
配置完模板之后重启服务：
可以把Handlers看作观察者模式，
3.Handlers
tasks:
-include:tasks/foo.yml
tasks:
-name: template configuration file
tasks:
-include: wordpress.yml user=timmy
notify:
template:src=template.j2 dest=/etc/httpd.conf
-name:create a virtualhostfile for(f vhost})
变量
include:wordpress.yml user=bob
include:wordpress.yml user=alice
Include语法
template:src=somefile.j2dest=/etc/httpd/conf.d/[( vhost }}
-restart apache
一旦某个动作有反应了，就会回调给定的方法。
章
集中化运维利器一
Ansible
---
## Page 54
用性得到了提高。
保证。而在Ansible的 PlayBook 里面，也是有变量这个概念的。这样使得PlayBook的可重
自动化运维软件设计实战
路径过滤器：
默认变量：
条件过滤器是一个类似Swtich语句的功能。
条件过滤器：
变量格式化过滤器：
使用变量：
在PlayBook中定义变量：
My amp goesto{max_amp_value}}
(variable | mandatory1)
tasks:
( some_variable|to_nice_yaml )
 some_variableI to_nice_json l1
-debug:msg="it was skipped"
-shell:/usr/bin/foc
hosts: webservers
when:result|success
debug: msg="it succeeded"
when:resultlfailed
debug:msg="it failed"
http_port:80
when:result|skipped
when:resultlchanged
debug:msg="it changed”
ignore_errors: True
register:result
---
## Page 55
一些条件判断的功能，而Ansible也提供了非常强大的条件功能供我们使用。
或者是针对不同的操作系统、不同的IP段执行不同的操作。为了达到这些目的，需要具备
用到PlayBook的条件判断功能。例如，当运行的前置命令成功了，才执行后续的命令。又
other_variable=foo"
对主机进行批量操作时，我们需要根据不同的情况进行不同的操作。这时我们就需要
当操作系统是Debian的时候关机：
2.5.4
从命令行传递变量：
循环变量：
If判断：
为变量做md5运算：
为变量编码或解码：
ansible-playbook
tasks:
{%endfor%}
[%forhost in groups['app_servers'] %}
{%endif%}
{% ifwebserver' in group_names %]
(path|basename}}
{ hostvars[host]['ansible_eth0']['ipv4']['address'] 1}
(filename |md5 }}
decoded|b64encode1
encoded 1b64decode 1}
command:/sbin/shutdown -t now
条件
1dirname}}
release.yml
#给路径加上文件夹名称
#给变量加上绝对路径
--extra-vars
集中化运维利器
"version=1.23.45
Ansibl
---
## Page 56
自动化运维软件设计实战
把文件名称作为变量循环：
用哈希表做循环变量：
常用循环的写法：
2.5.5
判断变量是否已经定义：
带管道的when语句：
name: add several users
tasks:
tasks:
with items:
user:name=(( item.name } state=present groups={ item.groups })
name:add several users
with_items:
user:name={( item }} state=present groups=wheel
-command:/bin/still/something_else
一
循环
when:resultlskipped
when: resultlsuccess-
command:/bin/something_else
when:resultlfailed
command:/bin/something
ignore errors:True
register: result
command:/bin/false
when:ansible_os_family=="Debian"
-testuser2
{name:'testuserl',
testuserl
when:bar is not defined
when:foo is defined
groups:wheel
'root'
---
## Page 57
随机变量循环：
循环的变量为整形，如i=0;i>{
192.168.41.139Isuccess >>{
shell: rm -f /home/inspection.txt
fetch:dest=/home/demo/report validate_md5=yes src=/home/inspection.txt
-name：执行脚本，生成报告
name：清理主机上生成的报告
name：抓取生成的报告
script:/home/inspection.sh
"ping":"pong"
"changed":false,
"ping":"pong"
"changed":false,
集中化运维利器一
Ansible
---
## Page 60
川
自动化运维软件设计实战
执行结果如下所示。
ansible-playbook inspection.yml
然后调用ansible-playbook进行巡检：
然后我们可以看到管理节点上的/home/demo目录下会产生一个report目录：
192.168.41.139
192.168.41.138
PLAY RECAP
changed:
changed:[192.168.41.139]
TASK：[清理主机上生成的报告】
changed:[192.168.41.138]
changed:[192.168.41.139]
*************************************************
TASK：[抓取生成的报告】
changed:[192.168.41.139]
changed:[192.168.41.138]
TASK：[执行脚本，生成报告]
ok:[192.168.41.139]
ok:[192.168.41.138]
GATHERING FACTS
PLAY[all]
***********************************
-hosts:all
shell:rm -f/home/inspection.txt
-name：清理主机上生成的报告
fetch:dest=/home/demo/report validate_md5=yes src=/home/inspection.txt
-name：抓取生成的报告
script:/home/inspection.sh
-name：执行脚本，生成报告
tasks:
[192.168.41.138]
：ok=4
ok=4
*********
changed=3
unreachable=0
unreachable=0
failed=(
failed=0
---
## Page 61
式，这种调用方式主要是针对开发者而设计的。
2.6使用Ansible的API
简单调用：
Ansible除了有直接命令调用、PlayBook调用的方式，还支持直接通过API调用的方
我们可以查看到相应的巡检报告：
import ansible.runner
值线程/0.080.040.001/14021335
1分钟/5分钟/15分钟平均负载/在采样时刻，运行任务的数目/系统活跃任务的个数/最大的pid
14:36,3 users,
13:08:30up
时间/系统运行时间/当前登录用户／系统过去1分钟/5分钟/15分钟内平均负载/
内存空闲：
内存总大小：
内存简要信
系统环境变量
CPU的主频：
逻
物理CPU个数：
CPU核数：
485M30M430M 7%/boot
vg_centos-1v_root 18G877M16G6%/ tmpfs504M0504M0%/dev/shm/dev/sda1
磁盘使用情况：
操作系统版本：
系统内核：
主机名：
服务器IP：
2014年12月24系统巡检报告