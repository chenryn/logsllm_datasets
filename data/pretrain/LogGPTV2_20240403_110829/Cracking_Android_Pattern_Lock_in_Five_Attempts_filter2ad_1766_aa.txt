title:Cracking Android Pattern Lock in Five Attempts
author:Guixin Ye and
Zhanyong Tang and
Dingyi Fang and
Xiaojiang Chen and
Kwang In Kim and
Ben Taylor and
Zheng Wang
Cracking Android Pattern Lock in Five Attempts
Guixin Ye†, Zhanyong Tang∗,†, Dingyi Fang†, Xiaojiang Chen†, Kwang In Kim‡, Ben Taylor§, and Zheng Wang∗,§
†School of Information Science and Technology, Northwest University, China
Email: PI:EMAIL, {zytang, dyf, xjchen}@nwu.edu.cn
‡Department of Computer Science, University of Bath, UK
§School of Computing and Communications, Lancaster University, UK
Email: {b.d.taylor, z.wang}@lancaster.ac.uk
Email: PI:EMAIL
Abstract—Pattern lock is widely used as a mechanism for
authentication and authorization on Android devices. In this
paper, we demonstrate a novel video-based attack to reconstruct
Android lock patterns from video footage ﬁlmed using a mobile
phone camera. Unlike prior attacks on pattern lock, our approach
does not require the video to capture any content displayed on the
screen. Instead, we employ a computer vision algorithm to track
the ﬁngertip movements to infer the pattern. Using the geometry
information extracted from the tracked ﬁngertip motions, our ap-
proach is able to accurately identify a small number of (often one)
candidate patterns to be tested by an adversary. We thoroughly
evaluated our approach using 120 unique patterns collected from
215 independent users, by applying it to reconstruct patterns from
video footage ﬁlmed using smartphone cameras. Experimental
results show that our approach can break over 95% of the
patterns in ﬁve attempts before the device is automatically locked
by the Android system. We discovered that, in contrast to many
people’s belief, complex patterns do not offer stronger protection
under our attacking scenarios. This is demonstrated by the fact
that we are able to break all but one complex patterns (with a
97.5% success rate) as opposed to 60% of the simple patterns in
the ﬁrst attempt. Since our threat model is common in day-to-day
lives, our workr calls for the community to revisit the risks of
using Android pattern lock to protect sensitive information.
I.
INTRODUCTION
Pattern lock is widely used on Android devices to protect
sensitive information. It is preferred by some users over PIN-
or text-based passwords, as psychology studies show that the
human brain remembers and recalls visual information better
than numbers and letters [9]. According to a recent study,
40% of the Android users use patterns to protect their devices
instead of a PIN [7]. Pattern lock is also used for authentication
– for example, Alipay, the largest third-party online-payment
platform, uses pattern lock as part of the login authentication.
Given its pervasive usage, a security breach of the pattern lock
could lead to serious consequences.
*Corresponding authors: Zhanyong Tang and Zheng Wang
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23130
Researchers have uncovered a number of ways to crack
Android pattern lock. Smudge attacks use the oily residues left
on the screen to recover the pattern [1]. However, this approach
relies on the persistence of the smudge which can be easily
destroyed by subsequent on-screen activities after unlocking.
In a recent study, Zhang et al. [34] shows that it is possible
to infer a locking pattern by analyzing how the WiFi signal is
affected by the ﬁnger motions when drawing the pattern. Their
approach is restricted to a limit set of scenarios due to: (1) the
complex setup of the attack and (2) the WiFi signal can be
disrupted by any moving objects nearby or body movements.
Recently, video-based side-channel attacks are shown to be
effective in reconstructing PIN- or text-based passwords. Some
of the early work in this area rely on video footage ﬁlmed using
a camera directly faced the screen or the keyboard [4, 16].
Recent work shows that this limitation can be lifted by exploit-
ing spatial-temporal dynamics of the hands during typing [23].
Despite the success of video-based attacks on PIN- and text-
based passwords, no work so far has exploited video-based
side-channels to crack pattern lock. To do so, the attack must
address a number of new challenges. These include: How to
map the user’s ﬁngertip movements to a graphical structure
consisting of continuous points instead of discrete keystrokes?
How to transform the ﬁngertip movements tracked from the
camera’s perspective to the user’s view point
to correctly
reconstruct the pattern? How to cancel the camera shake effect
that can signiﬁcantly affect the performance of the attack? How
to identify two overlapping line segments of a pattern? The size
of the touch-screen or the pattern grid can vary from one device
or one application to the other, how can the algorithm adapt
to these changes? These issues make prior work video-based
attacks inapplicable. To overcome these challenges requires
creative solutions to be constructed in the new application
context of pattern lock.
This paper presents a novel approach to crack Android
pattern lock using video footage that captures the user’s
ﬁngertip motions when drawing the pattern. Unlike smudge
attacks [1], our approach does not require the video footage
or images to be captured by a camera directly faced the screen.
Furthermore, the video can be ﬁlmed at a distance of 2 meters
from the user in public places. Such a distance is less likely to
raise suspicion compared to shoulder surﬁng [21] that requires
a closer observation distance to have a clear sight of the content
displayed on the screen.
Our attack employs a computer vision algorithm to track
the ﬁngertip motions from the video. Using the geometry
attempts (Section VI-A). Given that the Android operating
system (OS) allows ﬁve tries before locking the device,
our attack represents a real threat for pattern lock.
• Identifying New Vulnerabilities: According to a recent
study [8], direct observation techniques, e.g. shoulder
surﬁng, are considered to be a low risk due to the close
distance between the attacker and the user (in order to
gain a clear sight of the device screen). As a result, many
users may underestimate the dangers from using pattern
lock in public places. Under our attack, ﬁlming can be
carried out at a distance of 2 meters from the user and the
mobile phone camera does not need to directly face the
target device. Such a camera setting makes our attack less
likely to raise suspicion and more likely to success when
compared to direct observation techniques. For instance,
the video can be ﬁlmed by an adversary who pretends to
interact with his phone, sitting next to the user in a public
place (see Figure 1). In many similar scenarios, many
users will not be suspicious of the attacker’s behavior.
• New Findings: Our study suggests that complex patterns
are more vulnerable under video-based attacks (Sec-
tion VI-A). This ﬁnding debunks many people’s concep-
tion that more complex patterns give stronger protection.
Therefore, our work sheds new insights on the practical
use of pattern lock.
II. BACKGROUND
A. Android Pattern Lock
Pattern lock is widely used to protect sensitive information
and perform authentication on Android touch-screen devices.
To unlock a device protected with pattern lock, the user is
asked to draw a predeﬁned sequence of connected dots on a
pattern grid1. Figure 2 (e) shows a pattern which consists of
seven dots on a 3 × 3 grid. To form a pattern, the user starts
by selecting one dot as the starting point and then swiping
over multiple dots of the grid until the ﬁngertip is lifted from
the screen. There are several rules for creating an Android
pattern: (1) a pattern must consist of at least four dots; (2) each
dot can only be visited once; and (3) a previously unvisited
dot will become visited if it is part of a horizontal, vertical
or diagonal line segment of the pattern. Taking into account
these constraints, the total number of possible patterns on a
3× 3 grid is 389,112 [29]. Given the large number of possible
patterns, performing brute-force attacks on Android pattern
lock is ineffective, because the device will be automatically
locked after ﬁve failed tries.
B. Threat Model
In our threat model, we assume an adversary wants to
access some sensitive information from or to install malware
on a target device that is protected by pattern lock. This type
of attacks is mostly likely to be performed by an attacker who
have physically access to the target device for a short period
of time (e.g. via attending a meeting or a party where the
target user presents). To quickly gain access to the device,
the attacker would like to obtain the user’s locking pattern in
advance.
1In this paper we use the Android default pattern grid with 3 × 3 dots,
unless otherwise stated.
(a) The user was listening to
music and unaware of what
was happening around.
(b) The device screen seen
from the video ﬁlmed in (a).
(c) The video was recorded
from a distance of 2.5 meters.
(d) The device screen seen
from the video ﬁlmed in (c).
(e) An
scenario.
outdoor
ﬁlming
(f) The device screen seen
from the video ﬁlmed in (e).
Figure 1. Examples of scenarios in which a mobile phone camera is used
to ﬁlm the unlocking process. In these scenarios, the camera does not need to
have a clear sight of the screen.
information extracted from the ﬁngertip motions, it then maps
the tracked ﬁngertip locations to a small number of (often just
one) candidate patterns to be tested on the target device.
We thoroughly evaluate our approach using 120 unique
patterns collected from independent users. We show that our
approach is effective in inferring candidate patterns and as
a result, an attacker can unlock the target device with a
success rate of over 95% (up to 97.5%) in ﬁve attempts. We
demonstrate that, in contrast to many people’s belief, complex
patterns do not provide stronger protection over simple patterns
under our attack. According to a recent study [18], people tend
to use complex patterns for important ﬁnancial applications
such as online banking and shopping. Our ﬁnding suggests that
using pattern lock to protect sensitive information is risky.
Contributions The key contribution of this paper is a new
attack for Android pattern lock. Our attack exploits techniques
developed in the computer vision domain to address the key
challenges highlighted above.
This paper makes the following speciﬁc contributions:
• A New Attack: This is the ﬁrst work to reconstruct locking
patterns without relying on the content shown on the
screen (Section II-B). Experimental results show that our
method can break over 95% of the locking patterns in ﬁve
2
Figure 2. Overview of the attack. Our system takes in a video segment that records the unlocking process (a). The adversary ﬁrst marks two areas of interest
on the ﬁrst video frame (b): one contains the ﬁngertip involved in pattern drawing, and the other contains part of the device. Our system then tries to track
the ﬁngertip’s location w.r.t. to the device. The tracking algorithm produces a ﬁngertip movement trajectory from the camera’s perspective (c) which is then
transformed to the user’s perspective (d). Finally, the resulting trajectory in (d) is mapped to several candidate patterns (e) to be tested on the target device (f).
The attack starts from ﬁlming how the user unlocks the
device. Video recording can be done on-site or ahead of time.
The video will then be processed to identify a small number
of patterns to be tested on the target device. Because ﬁlming
can be carried out from a distance of as far as 2 meters using a
mobile phone camera and the camera does not need to directly
face the target device, this activity often will not be noticed by
the user. Moreover, given that many users use the same pattern
across devices and applications, the pattern obtained from one
device could also be used to break the user’s other devices.
We want to stress that the goal of this paper is to demonstrate
the feasibility of a new attack and the countermeasure is left
to our future work.
Examples of Filming Scenarios Figure 1 illustrates three
scenarios where ﬁlming can be performed without raising
suspicion to many users. For all the examples presented in
Figure 1, the ﬁlming camera had a left- or right-front view
angle from the target device and did not directly face the
screen of the target device. Due to the ﬁlming distance (2-
3 meters), the recoded video typically does not have a clear
vision of the content displayed on the screen. This observation
can be conﬁrmed by the video snapshot placing alongside each
scenario, where it is impossible to identify the content shown
on the screen. The examples given in Figure 1 are some of the
day-to-day scenarios where security of the user’s device can
be compromised under our attack.
Assumptions Our attack requires the video footage to have
a vision of the user’s ﬁngertip that was involved in pattern
drawing as well as part of the device (e.g. an edge of a phone).
We believe this is a reasonable assumption because in practice
many users often do not fully cover their ﬁngers and the entire
device when drawing a pattern. This is particularly true when
holding a large-screen device by hands. To launch the attack,
the attacker needs to know the layout of the grid, e.g. whether
it is a 3 × 3 or a 6 × 6 grid. Our approach is to generate a set
of candidate patterns for each of the Android pattern grids and
the attacker can simply decide which set of candidate patterns
to use after seeing the target device (at the time the layout
of the grid will be available). However, unlike prior work on
video-based attacks on keystroke based authentication [23], our
approach does not require having knowledge of the console’s
geometry. In other words, the size of the screen or the position
of the pattern grid on the screen does not affect the accuracy of
our attack. We also assume the video does not need to capture
any content displayed on the screen. This assumption makes
previous video-based attacks on pattern lock [1] inapplicable.
III. OVERVIEW OF OUR ATTACK
This section gives an overview of our attacking system
which analyzes the user’s ﬁngertip movement to infer the
locking pattern. The system takes in a video segment that
records the entire unlocking process. It produces a small
number of candidate patterns to be tested on the target device.
Figure 2 depicts the ﬁve steps of our attack:
1 Filming and Video Preprocessing: The attack begins from
ﬁlming how the pattern is drawn. The video footage can be
ﬁlmed at a distance of around 2 meters from the user using
a mobile phone camera (or 9 meters using a low-end digital
single reﬂex camera). After recording, the attacker needs to cut
out a video segment that contains the entire unlocking process.
We have shown that it is possible to automatically identify
this video segments in some scenarios (Section IV-A). After
cutting out the video segment, the attacker is then asked to
mark two areas of interest from one of the video frames: one
area consists of the ﬁngertip used to draw the pattern, and the
other consists of part of the device (see Figure 2 (b)).
2 Track Fingertip Locations: Once the areas of interest are
highlighted, a computer vision algorithm will be applied to
locate the ﬁngertip from each video frame (Section IV-B2).
The algorithm aggregates the successfully tracked ﬁngertip
locations to produce a ﬁngertip movement trajectory. This is
illustrated in Figure 2 (c). Keep in mind that at this stage the
tracked trajectory is presented from the camera’s perspective.
3 Filming Angle Transformation: This step transforms the
tracked ﬁngertip locations from the camera’s perspective to the
user’s. We use an edge detection algorithm to automatically
calculate the ﬁlming angle which is then used to perform the
transformation (Section IV-C). For example, Figure 2 (c) will
be transformed to Figure 2 (d) to obtain a ﬁngertip movement
trajectory from the user’s perspective.
4 Identify and Rank Candidate Patterns: In this step, our
software automatically maps the tracked ﬁngertip movement
trajectory to a number of candidate patterns (Section IV-D). We
rank the candidate patterns based on a heuristic described in
Section IV-D2. For instance, the ﬁngertip movement trajectory
in Figure 2 (d) could be mapped to a number of candidate
patterns shown in Figure 11. We show that our approach
can reject most patterns to leave no more than ﬁve candidate
patterns to be tried out on the target device.
5 Test Candidate Patterns: In this ﬁnal step, the attacker
tests the candidate patterns on the target device.
3
-60-3003060-60-3003060-60-3003060-60-3003060(a) Video footage12(b) Marked tracking areas(c) Fingertip trajectory (camera s perspective)3(d) Transformed trajectory   (user s perspective)4(e) Candidate patterns5(f) Correct patternAttackerAttackerOur systemIV.
IMPLEMENTATION DETAILS
A. Video preprocessing
the video segment
The ﬁrst step of our attack is to identify the unlocking
process from the video footage. While all our participants (see
Section V-A) consider this as a straightforward manual task,
we developed a simple yet effective heuristic to automatically
detect
in some typical scenarios. Our
heuristic is based on the following observations: (1) before or
after unlocking, users often pause for a few seconds; (2) two
consecutive on-screen operations (e.g. swiping, zooming etc.)
typically expose some spatial-temporal motion characteristics.
In order to test our hypothesis, we have recorded 50 video
streams (each video lasts around 2 minutes) of how ten of