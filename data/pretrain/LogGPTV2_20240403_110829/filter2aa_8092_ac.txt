param_1 = int(sys.argv[1])
uVar3 = param_1 * 2 & 2
if (param_1  U
1 -> D'
2 -> L
3 -> R'
4 -> B
5 -> F'
```
Note that a single letter by itself refers to a **clockwise** face rotation in 90 degrees (quarter turn), while a letter followed by an apostrophe means to turn that face **counterclockwise** 90 degrees. Since `kociemba` doesn't limit itself to just 6 operations but instead uses all 12, we must translate the output of `kociemba` to the input for the challenge by performing three consecutive turns when a move we need is missing. For example, if `kociemba` instructs us to perform `D`, we can arrive to the same state by performing `D'` three times instead.
The following script performs solves the cube for our specific state:
```python
import kociemba
import itertools
# kociemba accepts the input in the order of {U, R, F, D, L, B}
faces = [
            [0x03, 0x05, 0x02,   0x06, 0x01, 0x06,   0x04, 0x01, 0x06], # 5 | 50 | U
            [0x04, 0x04, 0x01,   0x03, 0x05, 0x05,   0x05, 0x06, 0x06], # 3 | 30 | R
            [0x06, 0x02, 0x02,   0x04, 0x03, 0x02,   0x05, 0x04, 0x04], # 1 | 10 | F
            [0x03, 0x02, 0x01,   0x05, 0x06, 0x03,   0x02, 0x05, 0x05], # 6 | 60 | D
            [0x02, 0x02, 0x05,   0x01, 0x02, 0x01,   0x06, 0x01, 0x01], # 4 | 40 | L
            [0x04, 0x06, 0x01,   0x04, 0x04, 0x03,   0x03, 0x03, 0x03], # 2 | 20 | B
        ]
color_id_to_encoding = {
    1: 'U',
    2: 'L',
    3: 'F',
    4: 'B',
    5: 'R',
    6: 'D'
}
"""
Move mapping
0 -> U
1 -> D'
2 -> L
3 -> R'
4 -> B
5 -> F'
"""
moves = {
    "R" : "333", 
    "R'": "3",
    "U" : "0", 
    "U'": "000", 
    "D" : "111", 
    "D'": "1", 
    "L" : "2", 
    "L'": "222", 
    "B" : "4", 
    "B'": "444", 
    "F" : "555", 
    "F'": "5"
}
cube_repr = ""
for c in itertools.chain.from_iterable(faces):
    cube_repr += color_id_to_encoding[c]
try:
    s = kociemba.solve(cube_repr)
    print(cube_repr)
    print(s)
    for x in s.split(" "):
        if len(x) == 2 and x[1] == "2":
            print(moves[x[0]], end="")
            print(moves[x[0]], end="")
        else:
            print(moves[x], end="")
    print("\n")
except ValueError:
    pass
```
Output:
```console
┌──(user@kali)-[/media/sf_CTFs/technion/Sliding_2]
└─$ python3 solve.py
FRLDUDBUDBBUFRRRDDDLLBFLRBBFLURDFLRRLLRULUDUUBDUBBFFFF
R U' R U D2 R F B' D' R' U' B2 R2 U' L2 D' F2 U2 L2 F2
333000333011111133355544413000443333330002215555550022555555
```
Let's enter it as the solution to get the flag:
```console
┌──(user@kali)-[/media/sf_CTFs/technion/Sliding_2]
└─$ echo 333000333011111133355544413000443333330002215555550022555555 | nc ctf.cs.technion.ac.il 4312
Enter key: Congratulation, The flag is cstechnion{at_least_you_now_know_how_to_solve_a_rubik's_cube}
```