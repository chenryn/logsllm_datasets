signature, which depends on the Strong RSA Assump-
tion, (2) the zero-knowledge proof (or argument) sys-
tem, which relies on the Strong RSA Assumption and
the Random Oracle Model, (3) the collision-resistant
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007Algorithm 3.1: CalcCoin
Input: pkM ∈ {0, 1}∗ merchant’s public key,
contract ∈ {0, 1}∗
(s, t, σ, J) a wallet coin
User Data: u private key, gu public key,
R ← H(pkM||info) ;
S ← Fs(J) ;
T ← guFt(J)R ;
Calculate ZKPOK Φ of (J, u, s, t, σ) such that:
0 ≤ J < n
S = Fs(J)
T = guFt(J)R
VerifySig(pkB, (u, s, t), σ) = true
F is a pseudo-random function, H is a
collision-resistant hash function.
return (S, T, Φ, R)
hash function H and (4) the security of the pseudo-
random function Fs(x), which if instantiated as the
Dodis-Yampolskiy pseudo-random function, depends
on the q-DHI and q-DBDHI assumptions
3.2 Endorsed E-Cash Construction
Our endorsed e-cash construction is based on CHL.
The wallet coin (J, u, s, t, σ) is the same as before, but
the unendorsed coin is a blinded version of the CHL
e-coin. Instead of giving the merchant (S, T, Φ, R), the
user chooses a random endorsement (x1, x2, x3) and
calculates (S0, T 0, Φ0, R, y), where S0 = Sgx1, T 0 =
T gx2 and y = Ped(x1, x2; x3). The value Φ0
is a
zero-knowledge proof that the unendorsed coin is valid.
Once the merchant learns the endorsement, he can eas-
ily reconstruct (S, T, Φ0, R), which along with y and
(x1, x2, x3) constitutes an endorsed coin that can be
deposited with the bank. The user can generate as
many unendorsed versions of the same wallet coin as
he wants by choosing diﬀerent endorsements. However,
if he endorses two versions of the same wallet coin, the
bank will identify him using the same method as in
CHL.
1hb
Global parameters: Same as in CHL. Additionally,
let g, h1, h2 be elements in G whose discrete logarithms
with respect to each other are unknown. We deﬁne the
q → G, where
homomorphic one-way function φ : Z3
φ(a, b, c) = ha
2gc. We split the public parameters
params = (paramsCHL, paramsZK ), where paramsZK
is used for the ZKPOK in the SplitCoin protocol and
paramsCHL is used for everything else (and is, in fact,
the same as in the CHL system).
SplitCoin, deﬁned in Algorithm 3.2, creates an
endorsable coin (S0, T 0, Φ0, R, (x1, x2, x3), y), where
(S0, T 0, Φ0, R, y) is the unendorsed coin and (x1, x2, x3)
receives
When the merchant
is the endorsement (with φ(x1, x2, x3) = y). The val-
ues S0 and T 0 are blinded versions of S and T and Φ0
is the zero-knowledge proof that S0 and T 0 are formed
correctly. The merchant veriﬁes Φ0 during the ESpend
protocol.
the endorsement
(x1, x2, x3) for his unendorsed coin (S0, T 0, Φ0, R, y) he
calls Reconstruct to create an endorsed coin (S =
S0/gx1, T = T 0/gx2, Φ0, R, (x1, x2, x3), y). The en-
dorsed coin is almost identical to the original coin
(S, T, Φ, R), except that Φ0 is a zero-knowledge proof of
slightly diﬀerent information. Possession of that infor-
mation is suﬃcient to create a valid CHL coin and the
bank can safely accept it. The bank can also iden-
tify double-spenders because S, T, R are constructed
the same way as in the CHL Spend protocol.
Algorithm 3.2: SplitCoin
Input: pkM ∈ {0, 1}∗ merchant’s public key,
contract ∈ {0, 1}∗
(s, t, σ, J) a wallet coin
User Data: u private key, gu public key,
R ← H(pkM||contract) ;
x1, x2, x3 ← Zq ;
y ← φ(x1, x2, x3) ;
S0 ← Fs(J)gx1 ;
T 0 ← guFt(J)Rgx2 ;
Calculate ZKPOK Φ0 of (J, u, s, t, σ, x1, x2, x3)
such that:
y = hx1
1 hx2
2 gx3
0 ≤ J < n
S0 = Fs(J)gx1
T 0 = guFt(J)Rgx2
VerifySig(pkB, (u, s, t), σ) = true
return (S0, T 0, Φ0, R, (x1, x2, x3), y)
Eﬃciency: SplitCoin is very similar to CalcCoin; it
requires two more multi-base exponentiation from the
user, one to compute y and one due to its inclusion
in the proof, and one more multi-base exponentiation
from the merchant and bank to verify the proof. (Note:
we compute T 0 slightly diﬀerent from CHL, but this has
a negligible eﬀect on the computation.)
Security: our endorsed e-cash system requires the
same assumptions as CHL.
3.3 Security
Theorem 3.1. The endorsed e-cash system described
in Section 3.2 meets the deﬁnition of a secure endorsed
e-cash system.
Proof. Correctness. It is easy to see the system is cor-
rect because the key values S, T, R are identical to the
CHL e-cash system.
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007is
SCHL
intended
Anonymity. We construct an algorithm S that im-
personates all honest users of the endorsed e-cash sys-
tem without access to their data during the ESpend
protocol. (Recall, in our deﬁnition, the adversary ac-
cesses an interfaces Game, which either invokes real
users or S). S will use SCHL, the simulator for the CHL
Spend protocol, and SZK, the simulator for the zero-
knowledge system, as building blocks. We will show
that any adversary A that can distinguish when the in-
terface Game plays the real game with real users or the
ideal game using S can either (1) break the anonymity
of CHL or (2) violate the zero-knowledge property of
the ZKPOK system.
S gets as input (params, auxsim, pkB). The en-
dorsed e-cash system generated (params, auxsim)
during GameSetup;
some of those parameters are
intended for SCHL and SZK: (params CHL,
auxsim CHL)
for
and
(params ZK, auxsim ZK) is for SZK.
S has to simulate ESpend. It gets (contract, pkM)
from A. S executes Spend(SCHL(params CHL,
auxsim CHL),S(contract, pkM, pkB, n)) (n is the size of
the wallets), pretending to be a merchant. S does
not need the merchant’s secret-key for the Spend pro-
tocol. SCHL gives S some coin (S, T, Φ, R). S pre-
tends to run SplitCoin. First it randomly generate
(x1, x2, x3). Then it uses the the “endorsement” to cal-
culate: y = φ(x1, x2, x3), S0 = Sgx1, and T 0 = T gx2.
Then it calls SZK(params ZK, auxsim ZK) to generate a
fake proof Φ0. S sets coin0 = (S0, T 0, Φ0, R, y). It stores
(φ, (x1, x2, x3), y, coin0) in a database for later use and
returns (φ, y, coin0) to the adversary.
We prove S is indistinguishable from real users via a
hybrid argument. Consider an algorithm S1 that acts
just like a real user, but after constructing a legitimate
unendorsed coin, invokes SZK to create a fake proof
Φ0. If A can distinguish S1 from a real user, A violates
the zero-knowledge property of the ZKPOK system.
Now consider algorithm S2 that generates unendorsed
coins using SCHL and SZK, but makes sure that all
unendorsed versions of the same coin have the same
In this case, if A can distinguish S1
serial number.
from S2, A violates the anonymity of CHL. Finally,
by the deﬁnition of SplitCoin, the S0 and T 0 are in-
formation theoretically independent of the real serial
number. Therefore, S2 is indistinguishable from S. By
the hybrid argument, no adversary can tell when Game
is playing the ideal game or the real game.
Balance. We need to show that no consortium
of users and merchants can cheat an honest bank.
Suppose we have an adversary A that can break
the balance property of our endorsed e-cash system.
A executes the Withdraw protocol u times to with-
draw un coins (assuming n coins per wallet). We
take the knowledge extractor X from the CHL sys-
tem and use it to generate serial numbers S1, . . . , Sun
from all the invocations of Withdraw (recall that our
endorsed e-cash uses the same Withdraw protocol
as CHL). Eventually, A produces an endorsed coin
(S, T, Φ0, R, (x1, x2, x3), y) that the bank accepts, but
S 6∈ S1, . . . , Sun. Since the bank accepted the en-
dorsed coin, this implies that φ(x1, x2, x3) = y and
Φ0 is valid. Since Φ0 is formed by a sound ZKPOK
system, A knows values J, u, s, t, σ such that:
(1)
S0 = Sgx1 = Fs(J)gx1, (2) T 0 = T gx2 = Ft(J)Rgx2,
and (3) VerifySig(pkB, (u, s, t), σ) = true.
Therefore, we can use A to create a proof Φ such
that the CHL bank accepts the coin (S, T, Φ, R). We
construct a reduction that breaks the security of the
CHL scheme by playing middleman in the Withdraw
and Deposit invocations that A makes. The reduction
can set up the public parameters for the endorsed e-
cash ZKPOK, and exploit them to extract the values
u, s, t, σ from A. As a result, it can construct a valid
CHL ZKPOK for coins that A tries to deposit.
Culpability and Exculpability. Since Reconstruct cre-
ates a coin (S, T, Φ0, R, (x1, x2, x3), y) where (S, T, R)
are the same as in the CHL system,
the CHL
PublicSecurityProtocols can remain unchanged. There-
fore, culpability and exculpability are preserved.
3.4 On-line Endorsed E-cash
On-line e-cash lets merchants verify with a perma-
nently available (i.e., on-line) bank whether an e-coin
was previously spent. Double-spending is detected be-
fore it happens.
The Spend protocol would consist of three stages.
First, the user gives the merchant an e-coin serial num-
ber. Next the merchant veriﬁes with the bank that the
e-coin has not yet been spent. Finally, the user and
merchant perform a fair exchange of the e-coin’s en-
dorsement and the promised good or service.
For the sake of eﬃciency, our on-line endorsed e-cash
system makes the user give the merchant the e-coin
serial number S in the clear before the start of the fair
exchange. This lets the bank quickly check whether
the e-coin has been spent. (If the user sent a blinded
version of the serial number, then he and the bank
would have to go through an onerous zero-knowledge
proof that the promised e-coin’s serial number is not in
the database of spent e-coins.) Unfortunately, the user
now sacriﬁces some anonymity because e-coins can be
linked to each other, if not the user.
We now describe the on-line endorsed e-cash Spend
protocol in detail.
The user sends S in the clear along with a timeout
value timeout that tells the bank when the unendorsed
coin expires. He also generates an endorsement x and
calculates y = φ(x). The user creates a signature V on
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007(pkM, contract, y, timeout) using S as the veriﬁcation
key (details later). Since the double-spending equation
T is no longer needed, the Withdraw protocol generates
a shorter wallet W = (J, u, s, σ).
Algorithm 3.3: SplitOnLineCoin
Input: pkM ∈ {0, 1}∗ merchant’s public key,
contract ∈ {0, 1}∗, timeout expiration
time
a wallet coin
User Data: u private key, gu public key, (s, σ, J)
x ← Zq ;
y ← gx ;
S ← Fs(J) ;
R ← pkM||contract||y||timeout ;
V ← Sign(1/(J + s), R) ;
Calculate ZKPOK Φ0 of (J, u, s, σ, x) such that:
y = gx
0 ≤ J < n
S = Fs(J)
VerifySig(pkB, (u, s), σ) = true
return (S, Φ0, R, V, x, y)
R
The
function
ties
to the
We describe how a user calculates a coin in Algo-
rithm 3.4.1. All the global parameters are the same as
before. The unendorsed coin is (S, Φ0, R, V, y) and the
endorsement is x. The homomorphic one-way function
φ : Zq → G is deﬁned as φ(x) = gx.
=
Sign
(pkM||contract||y||timeout)
serial number
of the coin.
If we use the Dodis-Yampolskiy PRF,
then S = Fs(J) = g1/(1+s+J). We can sign R using
a discrete logarithm based signature scheme such as
Schnorr [Sch91] or DSS [Kra99] with 1/(1 + s + J) as
the secret key and S as the veriﬁcation key. Alterna-
tively, we can use the even more eﬃcient BLS [BLS01]
signature: The ZKPOK for the Dodis-Yampolskiy
PRF requires a bilinear map e : ¯G × ¯G → G and
publishing a proof π = ¯g1/(1+s+J). We can sign R
using 1/(1 + s + J) as the secret key and π as the
veriﬁcation key.
The OnLineSpend protocol works as follows: The
user invokes SplitOnLineCoin to generate an endorsable
coin (S, Φ0, R, V, x, y) and gives (S, Φ0, R, V, y) to the
merchant. The merchant veriﬁes the unendorsed coin
and takes it to the bank to reserve the coin until time-
out. The bank veriﬁes that the unendorsed coin is valid.
Then it checks if S ∈ L∪L0, where L is the list of previ-
ously spent coins and L0 is the list of temporarily locked
serial numbers; if yes, this means the user is trying to
double-spend and the bank informs the merchant not
to accept the coin. If the unendorsed coin passes the
test, the bank notiﬁes the merchant and adds S to L0.
If the merchant deposits the endorsed coin before time-
out then the bank transfers S from L0 to L. Otherwise,
merchant returns to deposit the coin, the bank simply
removes S from L0.
It is the merchant’s responsibil-
ity to make sure the fair exchange resolves before the
timeout occurs and the user’s responsibility not to cre-
ate any unendorsed coins with the same serial number
until after timeout.
In oﬀ-line endorsed e-cash, a malicious TTP can
trick a user into double-spending by falsely claiming
a fair exchange terminated unsuccessfully. As a con-
sequence, when the user tries spending the wallet coin
a second time, the bank learns the user’s identity and
may even trace all of the other coins the user spent.
Even if the user later produces a certiﬁcate from the
TTP stating that the ﬁrst exchange was supposed to
be aborted, the user’s privacy is already compromised.
In on-line e-cash, this is no longer an issue. The
user’s identity can never be revealed because there is
no double-spending equation. If the bank gets an en-
dorsed coin from a fair exchange that a TTP claimed
was aborted, then the user can resolve the issue anony-
mously by publishing the signed abort certiﬁcate.
On-line endorsed e-cash has roughly the same com-
munication cost as oﬀ-line endorsed e-cash. The
biggest diﬀerence is that the bank must store serial
numbers that might be used.
4 Endorsed E-Cash Protocols
Endorsed e-cash is better than standard e-cash be-
cause the lightweight structure of endorsements lends
it to many nice protocols. In this section, we describe
three such protocols: optimistic fair exchange of a sin-
gle endorsed e-coin for digital goods and services, ef-
ﬁcient fair exchange of multiple coins, and threshold
secret sharing of endorsements.
4.1 Optimistic Fair Exchange of E-Cash
for Digital Goods
We want to be able to exchange e-cash for digital
content. We want the exchange to be fair: either the
user gets the digital content and the merchant gets an
e-coin or neither of them get anything. Asokan, Shoup
and Waidner [ASW00] present an optimistic fair ex-
change protocol for exchanging digital signatures for
digital goods with the help of a trusted third party
(TTP). It is optimistic in the sense that the TTP gets
involved only if either the user or the merchant violate
the protocol.
Suppose user Alice has a signature and merchant
Bob has the goods. The Asokan et al. protocol re-
quires Alice to reduce the promise of her signature to
the promise of a homomorphic pre-image. This is pre-