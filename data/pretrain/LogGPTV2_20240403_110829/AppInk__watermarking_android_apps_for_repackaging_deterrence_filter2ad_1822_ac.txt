received event is handled by the method onReceive of the
activity registered for SMS_RECEIVED intent. By issuing these
events in a well-deﬁned order, the app under test invokes these
event handlers in order, and responds in a deterministic manner.
For the purpose of automatic test generation, model based meth-
ods have been well studied for event-driven software in general, and
actively investigated for Android apps in particular [26, 34, 38, 47].
But to use it in AppInk, we need to have an app’s event ﬂow model
as input. One option is to ask developers to provide the model.
But this puts an extra burden on them, and it is also prone to error.
Another option is to infer the event ﬂow model through reverse
engineering. We note that generating a complete app model is
hard, but unlike common test case generation (whose task is to
exhaustively generate test sets to cover as many paths as possible),
AppInk only needs one test case if it can trigger as large set of code
segments as possible to achieve stealthy watermark embedding.
Therefore we only need to have a partial model for the app event
ﬂow.
AppInk uses static method to infer a partial event ﬂow
for Android apps in a conservative but safe way.
model
including
This is achieved through parsing app source ﬁles,
AndroidManifest.xml, UI layout, Java and other resource
ﬁles. The generated model is fed to an existing model-based test
generator for Android [11] to generate a set of test cases, from
which we pick the test input that covers most code segments.
We now use an example app to describe how AppInk generates
Figure 5 shows the user interface
the event ﬂow model.
elements and relevant events for the app NotePad.
The
ﬁrst screen (5a) pops right after the app starts. By analyzing
the layout and Java source ﬁles, we infer that the event Add
note is handled by method onOptionsItemSelected in
ﬁle NotesList.java. The second screen (5b) shows the
UI elements for the action of adding a note,
including a text
input box and two menu items (Save and Discard), whose
event handlers are the method onOptionsItemSelected in
ﬁle NoteEditor.java. The third screen (5c) shows the UI
elements for editing a note, including a test input and three menu
items (Save, Delete, and Edit Title), each of which has its
own handler. The last screen (5d) shows the UI elements for editing
title, including a test input and one button (Ok), whose handler is
the onClick method in ﬁle TitleEditor.java.
At this point, each screen shows only individual events. Through
analyzing the handler for the event of clicking Add note (method
onOptionsItemSelected in ﬁle NotesList.java), Ap-
pInk determines that
it starts an activity with the intent of
ACTION_INSERT, which is found later to be deﬁned in ﬁle
NoteEditor.java by parsing ﬁle AndroidManifest.xml.
So the event Add Note connects screens 5a and 5b. Through
(a) Main Activity - NotesList
(b) Note Editor - Create Note
(c) Note Editor - Edit Note
Figure 5: User interface elements in app NotePad.
(d) Note Editor - Edit Title
S_a
Discard
Back
Save
Back
Save
Delete
Edit_note
S_b
Add_note
S_c
Ok
Back
Edit_title
S_d
Figure 6: Event ﬂow graph for NotePad.
1
2
3
4
5
6
7
8
9
10
11
public void testEventSequence() {
clickOnMenuItem("Add note");
enterText(0, "Test");
clickOnMenuItem("Save");
goBackToActivity("NotesList");
clickInList(1);
clickOnMenuItem("Edit Title");
clickOnButton("Ok");
clickInList(1);
clickOnMenuItem("Delete");
}
Figure 7: Skeleton code to drive NotePad.
a similar analysis, we determine that the event of clicking list
item connects screens 5a and 5c, and the event of clicking Edit
title connects screens 5c and 5d. Furthermore, there is a back
button below the display screen of the phone, which connects the
current screen and the one before it. Having these connecting
events, AppInk generates the event ﬂow model as depicted in
Figure 6.
After feeding the above event ﬂow graph into M[agi]C [11] —
a test input generator tool, we obtain a test case with the skeleton
shown in Figure 7. This skeleton encodes the event sequence of
Add note, Enter text, Save, Back, Click list item
1, Edit Title, Ok, Click list item 1, and Delete.
This sequence covers all the activity classes in the app,
thus
presenting an optimal test for watermarking purpose.
3.3 Source Code Instrumentation
Having the manifest app source, together with the original app
source and the generated watermarking code, AppInk uses source
code instrumentation to perform the watermark embedding. The
choice of source code instrumentation is reasonable since AppInk
is used by app developers, who already have the app source code
at hand. This also helps integrate AppInk with the well-established
app development environment for Android. We note that AppInk
can be supported by bytecode level instrumentation as well.
three steps
Source code instrumentation uses
to embed
developer-provided watermarks. First, AppInk fetches all control
events (including clicking button, menu and list items) from the
manifest app, each of which is mapped to a single event handler
in the original app (such as onOptionsItemSelected and
onClick). Next, AppInk splits the watermarking code into the
same number of code segments as the number of the event handlers,
and generates a conﬁguration ﬁle to record the one-to-one mapping
from the watermarking code segments to the event handlers. Last,
AppInk parses the source code of the original app, generates its
abstract syntax tree, identiﬁes nodes for the event handlers, and
inserts the watermarking code segments into their corresponding
event handlers.
After the above instrumentation, AppInk automatically builds
and generates an executable app package and signs it [20], which
can be used for public release. The manifest app is built into an-
other executable package, which is not released to public. Instead it
will be submitted upon request to the arbitrator for the veriﬁcation
purpose. All these steps are serialized with an automated script,
which is seamlessly integrated into the app-building process.
3.4 Watermark Recognizer
The watermark recognizer takes both apps as input: a released
app for reviewing and the associated manifest app as the driver.
The core part of the recognizer (Figure 8) is an extended Dalvik
virtual machine (DVM), which is the execution engine for An-
droid app code and maintains the runtime heap. Unlike traditional
watermarking tool for Java that uses the Java debug interface to
access object reference information and reconstruct the watermark-
ing object, AppInk leverages the customized DVM to fetch object
reference information from the runtime heap directly. Further, with
the help of the manifest app generated in Section 3.2, the watermark
recognizer enables automatic watermark extraction without any
user intervention, which is highly desirable for scalable handling
of a large number of apps submitted to app markets.
Just like Java virtual machine executing Java code by interpret-
ing bytecode, DVM executes Dalvik bytecode, which is the main
body of Android apps. Therefore it has access to all the needed
information for watermark extraction purpose. Particularly, DVM
Manifest
event
App
Released 
App
0
1
2
3
watermark
value
object reference
relationship
adb
script
Execution Engine
Runtime Heap
Dalvik Virtual Machine
Figure 8: Work ﬂow of watermark recognizer.
1
2
3
4
5
6
7
8
9
adb install -r releasedApp.apk
adb install -r appTest.apk
adb shell am instrument -w InstrumentTestRunner
pid=‘adb shell ps|grep appName| awk ’{print \$2}’‘
### Send USR2 signal to trigger GC
adb shell kill -10 $pid
adb logcat -d | grep $pid > $pid.log
java appink.wmGraphRecognizer $pid.log
Figure 9: Shell script to drive watermark extraction.
manages memory space for Android apps, and maintains relevant
information for memory reclaim (garbage collection). All object
reference information is maintained, so AppInk only needs to
extend the garbage collector to record and export this information,
among which a later module will search for the watermarking
graph. The identiﬁed watermarking graph is then decoded to
recover its corresponding watermark object and to verify whether
it is the same as what the author claims.
More speciﬁcally, DVM uses mark-and-sweep algorithm [49] to
execute the task of garbage collection, which scans all allocated
objects and their member ﬁelds (a reference relationship forms
between an object and its member ﬁelds) and determines if any
object is not needed any more and thus can be reclaimed. We
develop a module in DVM to record these object reference rela-
tionships in the scanning phase and export them into a log ﬁle.
From these reference relationships, a reverse process of that in
the watermarking code generation (cf. Section 3.1) is applied to
recover the watermark value.
Towards automatic operations, we create a shell script based
on Android debug bridge [18] to link all these steps, as shown in
Figure 9. The script ﬁrst installs both apps – the released app and
the manifest app (lines 1 and 2), and then starts the manifest app
through the instrumentation command of Android activity manager
(line 3). This will feed the event sequence to the released app in a
speciﬁed order. The command at line 5 gets the process identiﬁer of
the running DVM, and line 7 sends a SIGUSR2 signal to trigger the
object reference recording module inside the extended DVM. The
commands at lines 8 and 9 fetch these recorded messages, search
for reference relationship pattern among them, and try to extract
the embedded watermark.
4.
IMPLEMENTATION
We have implemented an AppInk prototype on Ubuntu 10.04.
The watermarking code generation component is implemented in
Java, which accepts an integer or a string as input and outputs
its corresponding watermarking code.
In the manifest app gen-
eration component, the parsing of Java source ﬁles is based on
ANTLR [40] – a language parser generator. More concretely, we
input a Java language grammar [15] into ANTLR, which generates
a Java AST (abstract syntax tree) parser. By iterating through
the AST, AppInk can locate the nodes for all event handlers, and
identify the connecting events for different UI states. The parsing
of AndroidManifest.xml, UI layouts, and resource ﬁles is
written in Python. Another Python script glues the output results
from these parsing modules, generates the event ﬂow graph, feeds
it to the test case generator named M[agi]C, and picks up the test
case which has the largest coverage of watermarking code.
The source code instrumentation component includes three steps.
It ﬁrst parses the manifest app source to identify all these event
handlers to insert the watermarking code, and then splits the water-
marking code into segments with the same number as that of events
to be delivered. Last it extends the Java source parser generated in
the manifest app generation component to insert the watermarking
code segments into the execution path for their corresponding
event handlers. To automate the watermark extraction on the
arbitrating side, this component also generates the shell script to
drive watermark extraction (as presented in Figure 9). Basically,
this script only needs relevant information for a released app and
its manifest app, which is readily available after the completion of
the ﬁrst three components.
Having this watermark extraction script at hand, the watermark
recognizer needs two modules to achieve the ﬁnal watermark recog-
nition task. The ﬁrst module implements the extended DVM
to record and export object reference information when the app
receives a SIGUSR2 signal. This is achieved by modifying the
garbage collector code (in C language) in DVM and rebuilding the
Android open source project. The second module is written in
Java, which searches through these object reference relationships
to match any potential watermarking graph, and decodes the graph
to recover the corresponding watermark value.
5. ANALYSIS AND EVALUATION
While AppInk aims to embed strong ownership veriﬁcation mech-
anism into Android apps, attackers always strive to defeat the
protections in any way they can think of. In this section, we ﬁrst
analyze the robustness of AppInk against three common attacks
toward watermarking, namely distortive, subtractive, and additive
attacks. We then evaluate it against two open source repackaging
tools to demonstrate its effectiveness. Finally we evaluate the
runtime performance overhead for watermarked apps.
5.1 Robustness Analysis
AppInk adopts dynamic graph based watermarking as its key
technique to defend against app repackaging. Therefore its ro-
bustness depends heavily on that of dynamic graph watermarking,
which is highly resistant against distortive attacks, subtractive at-
tacks, and additive attacks according to our analysis.
Distortive attacks: This type of attacks applies semantic-preserving
transformations on target apps, trying to make it hard or impossible