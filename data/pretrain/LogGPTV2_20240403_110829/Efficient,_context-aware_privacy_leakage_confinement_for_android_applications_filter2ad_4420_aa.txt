title:Efficient, context-aware privacy leakage confinement for android applications
without firmware modding
author:Mu Zhang and
Heng Yin
Efﬁcient, Context-Aware Privacy Leakage Conﬁnement for
Android Applications without Firmware Modding
Mu Zhang
Department of EECS
Syracuse University
Syracuse, USA
PI:EMAIL
Heng Yin
Department of EECS
Syracuse University
Syracuse, USA
PI:EMAIL
ABSTRACT
As Android has become the most prevalent operating system in mo-
bile devices, privacy concerns in the Android platform are increas-
ing. A mechanism for efﬁcient runtime enforcement of information-
ﬂow security policies in Android apps is desirable to conﬁne pri-
vacy leakage. The prior works towards this problem require ﬁrmware
modiﬁcation (i.e., modding) and incur considerable runtime over-
head. Besides, no effective mechanism is in place to distinguish
malicious privacy leakage from those of legitimate uses.
In this
paper, we take a bytecode rewriting approach. Given an unknown
Android app, we selectively insert instrumentation code into the
app to keep track of private information and detect leakage at run-
time. To distinguish legitimate and malicious leaks, we model the
user’s decisions with a context-aware policy enforcement mecha-
nism. We have implemented a prototype called Capper and eval-
uated its efﬁcacy on conﬁning privacy-breaching apps. Our eval-
uation on 4723 real-world Android applications demonstrates that
Capper can effectively track and mitigate privacy leaks. More-
over, after going through a series of optimizations, the instrumen-
tation code only represents a small portion (4.48% on average) of
the entire program. The runtime overhead introduced by Capper
is also minimal, merely 1.5% for intensive data propagation.
Categories and Subject Descriptors
D.2.4 [Software Engineering]: Software/Program Veriﬁcation—
Validation; D.4.6 [Operating Systems]: Security and Protection—
Information ﬂow controls
General Terms
Security
Keywords
Android; Privacy leakage; Context-aware policy; Bytecode rewrit-
ing
Permission to make digital or hard copies of all or part of this work for personal 
or classroom use is granted without fee provided that copies are not made or 
distributed for profit or commercial advantage and that copies bear this notice 
and the full citation on the first page. Copyrights for components of this work 
owned  by  others  than  ACM  must  be  honored.  Abstracting  with  credit  is 
permitted. To copy otherwise, or republish, to post on servers or to redistribute 
to  lists,  requires  prior  specific  permission  and/or  a  fee.  Request  permissions 
from permissions@acm.org. 
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan. 
Copyright © 2014 ACM  978-1-4503-2800-5/14/06…$15.00. 
http://dx.doi.org/10.1145/2590296.2590312.
1.
INTRODUCTION
Android continues to dominate in the battle to be the top smart-
phone system in the world, and ranked as the top smartphone plat-
form with 52 percent market share (71.1 million subscribers) in Q1
2013. The success of Android is also reﬂected from the popular-
ity of its application markets. Tens of thousands of Android apps
become available in Google Play while popular apps (e.g., Adobe
Flash Player 11) have been downloaded and installed over 100 mil-
lion times.
Meanwhile, privacy concerns in the Android platform are in-
creasing. Previous studies [12, 13, 19, 31, 36, 38] have exposed that
both benign and malicious apps are stealthily leaking users’ pri-
vate information to remote servers. Efforts have also been made
to detect and analyze privacy leakage either statically or dynami-
cally [12, 13, 17, 21, 24, 25, 34]. Nevertheless, a good solution to
defeat privacy leakage at runtime is still lacking. We argue that a
practical solution needs to achieve the following goals:
• Information-ﬂow based security. Privacy leakage is fun-
damentally an information ﬂow security problem. A desir-
able solution to defeat privacy leakage would detect sensitive
information ﬂow and block it right at the sinks. However,
most of prior efforts to this problem are “end-point” solu-
tions. Some earlier solutions extended Android’s install-time
constraints and enriched Android permissions [14,29]. Some
aimed at enforcing permissions in a ﬁner-grained manner and
in a more ﬂexible way [6, 8, 27, 39]. Some attempted to im-
prove isolation on various levels and each isolated compo-
nent could be assigned with a different set of permissions [5,
22, 30]. In addition, efforts were made to introduce supple-
mentary user consent acquisition mechanism, so that access
to sensitive resource also requires user approval [23, 32]. All
these “end-point” solutions only mediate the access to pri-
vate information, without directly tackling the privacy leak-
age problem.
• Low runtime overhead. An information-ﬂow based solu-
tion must have very low runtime overhead to be adopted
on end users’ devices. To directly address privacy leakage
problem, Hornyack et al. proposed AppFence to enforce
information ﬂow policies at runtime [19]. With support of
TaintDroid [12], AppFence keeps track of the propagation
of private information. Once privacy leakage is detected,
AppFence either blocks the leakage at the sink or shufﬂe the
information from the source. Though effective in terms of
blocking privacy leakage, its efﬁciency is not favorable. Due
to the taint tracking on every single Dalvik bytecode instruc-
tion, AppFence incurs signiﬁcant performance overhead.
• No ﬁrmware modding. For a practical solution to be widely
adopted, it is also crucial to avoid ﬁrmware modding. Unfor-
259tunately, the existing information-ﬂow based solutions such
as AppFence require modiﬁcations on the stock software stack,
making it difﬁcult to be deployed on millions of mobile de-
vices.
• Context-aware policy enforcement. Many apps need to ac-
cess user’s privacy for legitimate functionalities and these in-
formation ﬂows should not be stopped. Therefore, to defeat
privacy leakage without compromising legitimate function-
ality, a good solution needs to be aware of the context where
a sensitive information ﬂow is observed and make appropri-
ate security decisions. To the best of our knowledge, we are
not aware that such a policy mechanism exists.
In this paper, we aim to achieve all these design goals by taking a
bytecode rewriting approach. Given an unknown Android app, we
selectively rewrite the program by inserting bytecode instructions
for tracking sensitive information ﬂows only in certain fractions of
the program (which are called taint slices) that are potentially in-
volved in information leakage. When an information leakage is
actually observed at a sink node (e.g., an HTTP Post operation),
this behavior along with the program context is sent to the policy
management service installed on the device and the user will be no-
tiﬁed to make an appropriate decision. For example, the rewritten
app may detect the location information being sent out to a Google
server while the user is navigating with Google Map, and notify
the user. Since the user is actively interacting with the device and
understands the context very well, he or she can make a proper de-
cision. In this case, the user will allow this behavior. To ensure
good user experiences, the number of such prompts must be min-
imized. To do so, our policy service needs to accurately model
the context for the user’s decisions. As a result, when an informa-
tion leakage happens in the same context, the same decision can be
made without raising a prompt. After exploring the design space
of the context modeling and making a balance between sensitiv-
ity, performance overhead, and robustness, we choose to model the
context using parameterized source and sink pairs.
Consequently, our approach fulﬁlls all the requirements: 1) ac-
tual privacy leaks are captured accurately at runtime, with the sup-
port of inserted taint tracking code; 2) the performance overhead
of our approach is minimal, due to the static dataﬂow analysis in
advance and numerous optimizations that are applied to the instru-
mentation code; 3) the deployment of our approach is simple, as
we only rewrite the original app to enforce certain information ﬂow
policies and no ﬁrmware modiﬁcation is needed; 4) policy enforce-
ment is context-aware, because the user’s decisions are associated
with abstract program contexts.
We implement a prototype, Capper1, in 16 thousand lines of
Java code, based on the Java bytecode optimization framework
Soot [3]. We leverage Soot’s capability to perform static dataﬂow
analysis and bytecode instrumentation. We evaluate our tool on
4723 real-world privacy-breaching Android apps. Our experiments
show that rewritten programs run correctly after instrumentation,
while privacy leakage is effectively eliminated.
Contributions.
In summary, this paper makes the following contributions:
• We propose a bytecode rewriting approach to the problem of
privacy leaks in Android applications. It requires no ﬁrmware
changes and incurs minimal performance impact.
1Capper is short for Context-Aware Privacy Policy Enforcement
with Re-writing.
Figure 1: Architecture of Capper
• We design a novel mechanism to model program contexts
with user knowledge. This helps differentiate between be-
nign operations on sensitive data and actual privacy leakage.
• We evaluate Capper on 4723 real Android apps. The exper-
iments show that our approach is both effective and efﬁcient.
We demonstrate that rewritten programs run correctly after
instrumentation, while privacy leakage is effectively elimi-
nated. We show that only a small portion (2.48% on average)
of the program needs to be instrumented and after a series of
optimizations the ﬁnal program size increases only 4.48% on
average. We also show that our runtime overhead is minimal,
merely 1.5% for intensive data propagation.
2. APPROACH OVERVIEW
In this section, we present an overview of our technique. Further,
we deﬁne the problem scope and provide a running example.
2.1 Key Techniques
Figure 1 depicts an overview of our techniques. When a user is
about to install an app onto his Android device, this app will go
through our bytecode rewriting engine (BRIFT) and be rewritten
into a new app, in which sensitive information ﬂows are monitored
by the inserted bytecode instructions. Therefore, when this new app
is actually running on the device and is observed to send out sen-
sitive information, this behavior (along with the program context)
will be reported to the policy management service for decision.
If this behavior under this program context is observed for the
ﬁrst time, the policy management service will prompt the user to
make a proper decision: either allow or deny such a behavior. The
user’s decision will be recorded along with the program context, so
the policy management service will make the recorded decision for
the same behaviors under the same context.
Therefore, our solution to defeat privacy leakage consists of the
following two enabling techniques.
(1) Bytecode Rewriting for Information Flow Control.
Given a bytecode program, the goal of our bytecode rewriting is
to insert a minimum amount of bytecode instructions into the byte-
code program to trace the propagation of certain sensitive informa-
tion ﬂows (or taint). To achieve this goal, we ﬁrst conduct static
dataﬂow analysis to compute a number of program slices that are
involved in the taint propagation. Then we insert bytecode instruc-
tions along the program slices to keep track of taint propagation at
runtime. Further, we perform a series of optimizations to reduce
the amount of inserted instructions. More details are presented in
Section 3.
(2) Context-aware Policy Enforcement.
The user allows or denies a certain information ﬂow in a speciﬁc
context. The key for a context-aware policy enforcement is to prop-
Phone  App          ServiceBRIFTAPKAPK’InstallQueryPromptDecideWarning Dialog260erly model the context. The context modeling must be sensitive
enough to distinguish different program contexts, but not too sen-
sitive. Otherwise, a slight difference in the program execution may
be treated as a new context and may cause unnecessarily annoy-
ing prompts to the user. Further, the context modeling should also
be robust enough to counter mimicry attacks. An attacker may be
able to “mimic” a legitimate program context to bypass the context-
aware policy enforcement. We present more details about the con-
text modeling and policy enforcement in Section 4.
2.2 Problem Scope
Our proposed solution is designed to enforce user preferred pri-
vacy policy on innocent Android apps. Our solution can be used
to block privacy leakage in most of current Android malware apps,
but a dedicated malware author can still ﬁnd ways to circumvent
our conﬁnement. For instance, malware can exﬁltrate private in-
formation through side channels (such as implicit ﬂows and timing
channels). Most of previous solutions (including dynamic mon-
itoring and static analysis approaches) share the same limitation.
Moreover, the proposed technique (again shared by most of previ-
ous solutions) cannot handle native components and Java reﬂective
calls in a general way. In rare occasions, our system will raise a
warning to the user that the rewritten app may still be unsafe if
we observe a JNI call or a reﬂective call appears on the informa-
tion propagation path. According to our experimental evaluation in
Section 5, only a small fraction (5%) of apps belong to this cate-
gory. In this case, a security-conscious user may decide not to use
this unsafe app or resort to other solutions.
2.3 Running Example
To elaborate the whole process, we use a synthetic running ex-
ample to explain our approach. Figure 2 presents our synthetic run-
ning example in Java source code. More concretely, the example
class extends an Android Activity and overrides several call-
backs including onStart(), onResume() and onDestroy().
When the Activity starts, onStart() method will get the de-
vice identiﬁer by calling getIMEI(), which returns the real de-
vice ID if it succeeds or empty string otherwise. On receiving the
return value from getIMEI(), the program stores it to a static
ﬁeld deviceId. Further, both onResume() and onDestroy()
read the device ID from this static ﬁeld but use it for different pur-
poses. While onResume() shows the device ID on screen via a
Toast notiﬁcation, onDestroy() encrypts it and sends it to a
remote server through a raw socket. In Section 3 and 4 , we show
how to perform bytecode rewriting and mitigate privacy leakage
with this example.
3. BYTECODE REWRITING
We leverage our BRIFT2 engine to insert the information ﬂow
control logic into a given Android app. BRIFT takes the follow-
ing steps to rewrite a bytecode program: 1) it ﬁrst translates the
Dalvik executable (i.e., DEX ﬁle) to an intermediate representa-
tion (IR) to facilitate analysis and instrumentation; 2) it performs
application-wide static dataﬂow analysis on IR to identify program
slices for information leakage; 3) to keep track of data propagation
and prevent the actual information leakage, it instruments the IR by
inserting new IR statements along the program slices; 4) to further
improve performance, it applies a series of optimization methods
to remove redundant and unnecessary IR statements; and 5) in the
end, it generates a new Dalvik executable from the IR and uses it
2It is short for Bytecode Rewriting for Information Flow Tracking
private byte key = DEFAULT_KEY;
private String addr = DEFAULT_ADDR;
private static String deviceId;
1 public class Leakage extends Activity{
2
3
4
5
6
7
public String getIMEI(){
TelephonyManager manager = (TelephonyManager)
getSystemService("phone");
String imei = manager.getDeviceId();
if(imei==null){
imei = "";
}else{
imei = manager.getDeviceId();
}
return imei;
}
public byte crypt(byte plain){
return (byte)(plain ^ key);
}
public void post(String addr, byte[] bytes){
OutputStream output = conn.getOutputStream();