any party. In this case, the Unforgeability requirement only
proves the state of the prover within the time window between
generation of the challenge by the owner, and the receipt of
the evidence from the veriﬁer.
• Privacy Preservation. Veriﬁcation does not require detailed
knowledge of the conﬁguration of G (e.g., its topology ).
• Heterogeneity. The protocol is applicable to networks with
heterogeneous devices. The scheme can use any integrity
measurement mechanism used by devices in G.
• Availability. If all participants are honest and the network
is available then the protocol produces collective attestation
evidence.
• Limiting DoS. It should not be possible to run a global DoS
attack over the whole network through one device.
Unforgeability, completeness, and scalability are the main ob-
jectives of collective attestation. However, a collective attestation
scheme should also be DoS limiting. These four properties form
the crux of SANA’s contribution. Public veriﬁability and privacy
preservation are required in scenarios where network conﬁguration
should not be disclosed to the verifying entity (e.g., when the mainte-
nance in a smart factory is outsourced), and can be achieved through
digital signatures and aggregation. Heterogeneity, on the other hand,
is needed to support new device types and future attestation schemes,
and is achieved by separating the measurement and the reporting
mechanisms used for attestation [5].
Adversary Model. During initial key exchange, we assume the
existence of secure channels between any two honest participants.
Afterwards, we assume an adversary A can eavesdrop, insert, or
modify all messages exchanged between all devices in G. Further-
more, we assume two types of attacker: (1) a software only attacker,
as common in the attestation literature, which can manipulate (i.e.,
compromise) the software of all provers in G, but not physically
attack them; and (2) an attacker capable of physically tampering
with aggregator devices, i.e., extract their cryptographic material
or modify their software. However, in both cases we assume A is
not capable of forging an Optimistic Aggregate Signature (OAS)
according to Deﬁnition 3. Finally, while we consider DoS attacks in
general to be out of scope, we aim to limit these attacks by prevent-
ing A from running a global DoS on the whole network through one
single device.
Security Assumptions. We assume all provers in G correctly im-
plement the minimal hardware features required for secure remote
attestation described in [12], and adapted in [5]. A potential imple-
mentation of Pi could have: (1) a Read Only Memory (ROM) that
stores the protocol code and the related cryptographic key(s); and
(2) a simple Memory Protection Unit (MPU), that restricts access to
cryptographic key(s) to protocol code only, and ensures secrecy of
the key(s) through non-interruptible, and clean execution of the pro-
tocol code. We also assume the owner O to be trusted. Finally, we
assume all cryptographic schemes used in our protocol are secure.
3. PRELIMINARIES AND NOTATIONS
Let |M| denote the number of elements in a ﬁnite set M. If n
is an integer (or a bit-string), (cid:96)n indicates the bit-length of n. Let
m ←R M denote the assignment of a uniformly sampled element
of M to variable m. Furthermore, let {0, 1}(cid:96) be the set of all
bit-strings of length (cid:96). If E is some event (e.g., the result of a
security experiment), then Pr[E] denotes the probability that E
occurs. Probability ((cid:96)) is called negligible if, for all polynomials
f, ((cid:96)) ≤ 1/f ((cid:96)) for all sufﬁciently large (cid:96) ∈ N.
Let A be a probabilistic algorithm. Then y ← A(x) means that
on input x, A assigns its output to variable y. We occasionally
overload notation to let A(x) denote the set of all outputs y that
have non-zero probability of being returned by A on input x. K is
the set of key pairs (pk , sk ) that have non-zero probability of being
returned by KeyGen((cid:96)Sign).
We denote with AB an algorithm A that arbitrarily inter-
acts with algorithm B while it
The term
prot [A : xA; B : xB; ∗ : xpub] → [A : yA; B : yB] denotes an in-
teractive protocol prot between two probabilistic algorithms A and
B. Hereby, A (resp. B) gets private input xA (resp. xB) and public
input xpub. While A (resp. B) is operating, it can interact with B
(resp. A). As a result, A (resp. B) outputs yA (resp. yB).
is executing.
A multi-signature scheme [15, 23] allows n different signers to
sign the same message m in a constant-size signature, i.e., with
signature length independent of n. Most multi-signature schemes
also have veriﬁcation time quasi-independent of n, meaning that the
number of core cryptographic operations (e.g., exponentiations or
pairing computations) is independent of n. An aggregate signature
scheme [10] allows n different signers to sign n different messages
m1, . . . , mn with a constant-size signature, but all known schemes
have veriﬁcation time linear in n.
4. PROPOSED OAS SCHEME
We propose Optimistic Aggregate Signatures (OAS) as a general-
ization of aggregate and multi-signatures, where n different signers
can sign different messages m1, . . . , mn, but most signers are ex-
pected to sign the “default” message M . Individual signatures can
be aggregated into an aggregate signature that, in the optimistic
case where most signers sign M , is signiﬁcantly shorter and can be
veriﬁed signiﬁcantly faster than n separate signatures. In particular,
aggregate signature size and veriﬁcation time should be independent
of the number of signers who signed M . Our construction has aggre-
gate signature size linear in the number of messages different from
M and in the number of signers signing those messages. Veriﬁcation
time is linear in the number of different messages that were signed,
but independent of the number of signers.
4.1 Deﬁnition of an OAS Schemes
An OAS scheme provides both scalability and heterogeneity and
is thus applicable for secure collective attestation. Deﬁnition 1
provides a formal deﬁnition of OAS schemes, while Deﬁnition 3
deﬁnes the unforgeability property for OAS schemes.
tuple
of
probabilistic
polynomial
DEFINITION 1
(OAS)
time
(OPTIMISTIC AGGREGATE SIGNATURES).
An Optimistic Aggregate Signature
is
scheme
a
algorithms
(KeyGen, AggPK, Sign, AggSig, Verify). On input of
the se-
curity parameter (cid:96)Sign ∈ N, KeyGen outputs a secret signing
key sk i and a public veriﬁcation key pk i, for each device Di,
i.e., (sk i, pk i) ← KeyGen(1(cid:96)Sign ). On input a set of public keys
{pk 1, . . . , pk n}, the public key aggregation algorithm AggPK
outputs an aggregate public key apk. On input a secret key sk,
a message m ∈ {0, 1}∗, and the default message M ∈ {0, 1}∗,
Sign outputs a signature α on m, i.e., α ← Sign(sk , m, M ). Note
that, the signature α is already considered an aggregate signature,
containing only pk’s signature on m. On input two aggregate
signatures α1, α2 and the default message M ,
the signature
aggregation algorithm AggSig outputs a new aggregate signature
α that includes all signatures in α1 and α2. To verify an aggregate
signature, the Verify algorithm takes an aggregate public key apk,
a set of public keys S⊥ of signers who did not contribute a signature
to the aggregate, an aggregate signature α, and the default message
M as input, and outputs either ⊥ to indicate that the signature is
invalid, or a set B = {(mi, Si) : i = 1, . . . , µ}, indicating that the
signers with public key pk i ∈ Si signed message mi, and that all
other signers whose keys were included in the aggregated public key
apk but not in any of S⊥, S1, . . . , Sµ signed the default message
M .
Intuitively, the correctness of an OAS scheme is deﬁned as fol-
lows: if all signers behave honestly and contribute at most one
signature to the aggregate, then the veriﬁcation algorithm pro-
duces the output that attributes the correct message to the cor-
rect signer. Deﬁning this formally is a bit tedious, however, due
to the many different orders in which signatures can be aggre-
gated. To simplify notation, for two sets B1,B2 containing tu-
ples (m, S) ∈ {0, 1}∗ × ({0, 1}∗)∗, let B = B1 (cid:116) B2 be the
“merged” set of tuples (m, S) where S = S1∪S2 if ∃(m, S1) ∈ B1
and ∃(m, S2) ∈ B2, where S = S1 if ∃(m, S1) ∈ B1 and
(cid:54) ∃(m, S2) ∈ B2, and where S = S2 if ∃(m, S2) ∈ B2 and
(cid:54) ∃(m, S1) ∈ B1.
(CORRECTNESS OF OAS). An OAS scheme is
DEFINITION 2
correct if:
(i) signing works, i.e., for all (cid:96)Sign ∈ N, all m, M ∈ {0, 1}∗,
all (pk , sk ) ← KeyGen((cid:96)Sign), all sets S⊥ such that pk (cid:54)∈ S⊥, it
holds that Verify(apk , S⊥, α, M ) returns ∅ if m = M and returns
{m,{pk}} if m (cid:54)= M whenever apk ← AggPK(S⊥ ∪ {pk}) and
α ← Sign(sk , m, M ).
(ii) aggregation works, i.e., for all aggregate signatures α1, α2,
all disjoint sets S1, S2, all subsets S⊥,1 ⊆ S1 and S⊥,2 ⊆ S2, and
all messages M ∈ {0, 1}∗, if Verify(apk 1, S⊥,1, α1, M ) = B1
and Verify(apk 2, S⊥,2, α2, M ) = B2 for apk 1 ← AggPK(S1),
apk 2 ← AggPK(S2), and apk ← AggPK(S1 ∪ S2), then it holds
that Verify(apk , S⊥,1 ∪ S⊥,2, α, M ) = B1 (cid:116) B2.
DEFINITION 3
(UNFORGEABILITY OF OAS).
Unforgeability of an OAS scheme requires that, even if all
other signers are dishonest, an adversary cannot produce an
aggregate signature that attributes a message to an honest
signer that never signed such message. More formally, for any
polynomial-time adversary A,
the following experiment must
return 0 with negligible probability:
(pk , sk ) ← KeyGen((cid:96)Sign)
(α, S⊥, (pk 1, . . . , pk n), (sk 1, . . . , sk n)) ← ASign(sk ,·)(pk )
If ∃ i : pk i (cid:54)= pk ∧ (pk i, sk i) (cid:54)∈ KeyGen((cid:96)Sign) then return 0
Let S ← {pk 1, . . . , pk n}
apk ← AggPK(S)
B ← Verify(apk , S⊥, α, M )
If S⊥ (cid:54)⊆ S or ∃(mi, Si) ∈ B : Si (cid:54)⊆ S then return 0
If ∃(mi, Si) ∈ B : pk ∈ Si and mi (cid:54)∈ Q then return 1
Let SM ← S \(cid:0)S⊥ ∪(cid:83)(mi,Si)∈B Si(cid:1)
If pk ∈ SM and M (cid:54)∈ Q then return 1
Else return 0
where Q is the set of messages that A queried from its Sign(sk ,·)
oracle.
The unforgeability notion in Deﬁnition 3 requires the adversary
to know the secret keys of all corrupt signers, which is modeled in
the game by requiring the adversary to output those secret keys as
part of his forgery. In practice, this can either be realized by letting a
trusted entity generate the keys of all signers, or by letting all signers
perform an extractable proof of knowledge of their secret key, either
interactively with a trusted entity, or non-interactively and include
it in their public keys. Alternatively, Ristenpart and Yilek [28]
showed that with minor modiﬁcations to some schemes, including
Boldyreva’s multi-signature scheme [9], it sufﬁces to let signers
create a simpler proof of possession, that is essentially a signature
on a challenge message. Therefore, being our OAS construction
in Section 4.2 based on Boldyreva’s multi-signature scheme, this
technique can be applied to our scheme as well. Also, note that the
above deﬁnition insists that the sets of public keys S⊥ and Si are
subsets of S = {pk 1, . . . , pk n}. It is up to the veriﬁer to perform
this check, either by looking up the relevant keys in S, or, if the
veriﬁer does not know S, by letting signers prove that their keys
were included in apk, e.g., through a certiﬁcate.
4.2 Our OAS Scheme from pairings
In what follows, we introduce our OAS construction from pair-
ings. Our scheme can be seen as a combination of Boldyreva’s
multi-signature scheme [9] and Boneh et al.’s aggregate signature
scheme [10]. In a multi-signature scheme, all signers sign the same
message and the signature can be veriﬁed in constant time. In the
aggregate signature scheme of Boneh et al., all signers have to sign
different messages and veriﬁcation is linear in the number of ag-
gregated signatures. Our construction essentially uses Boldyreva’s
multi-signature scheme to compress the signatures of those signers
who sign the same message, and uses Boneh et al.’s scheme on top
of it to aggregate the multi-signatures. Even though anyone familiar
with these schemes immediately sees that the algebra works out,
one has to tread very carefully in terms of security. Indeed, aggre-
gate signatures are notorious for having subtle restrictions on key
setup, signer composition, and the messages being signed, which,
when not adhered to, can ruin the scheme’s security [7]. We refer
the reader to Appendix B for a formal proof that our construction
indeed does satisfy the security notion of Deﬁnition 3. We note that
Syta et al. [32] already suggested to use Boneh et al.’s aggregate sig-
nature scheme in distributed signing applications, but they require
all nodes to sign the same message and lacked a detailed security
proof, which, given the subtleties mentioned above, is more than
just a formality.
Let G1, G2, Gt be multiplicative groups of prime order p with
generators g1, g2, gt, respectively, with an efﬁciently computable
bilinear map e : G1 × G2 → Gt so that e(gx
for
all x, y ∈ Zp, and with an efﬁciently computable isomorphism
ψ : G2 → G1 so that ψ(g2) = g1. Let H : {0, 1}∗ → G1 be a
hash function modeled as a random oracle [8].
Key generation. Each signer chooses random secret key x ←R Zp