repeat forever
(cid:1)
end repeat
RESPONSE(not rec f rom) received from (n − f) distinct processes
foreach j do send QUERY() topj enddo;
wait until
let I= the set of the processes from which pi received a RESPONSE message;
let X= the set of the not rec f rom sets received from the processes in I;
not rec f romi ← Π − I;
suspectedi ← (cid:3)
ls∈X ls
(cid:2)
;
task T 2:
(8) upon reception of QUERY() from pj do send RESPONSE(not rec f romi) to pj
Figure 1. Failure Detector Module F Di Associated with pi
Strong completeness. Let us ﬁrst note that (due to Lemma
1) if a process p(cid:1) crashes and if pi is correct, then eventually
p(cid:1) remains permanently in not rec f romi. We show that
eventually p(cid:1) remains permanently in suspectedi.
Let us ﬁrst observe that there is a time t after which
all faulty processes have crashed. Moreover, there is a
time t(cid:2) ≥ t after which all RESPONSE() messages that
are received (1) have been sent by correct processes
and (2) do carry the identity of p(cid:1) (as, after some time,
p(cid:1) belongs permanently to the not rec f rom set of all
correct processes). Furthermore, as at most f processes
crash and the channels are reliable, each correct process
pi
inﬁnitely often receives SUSPICION messages from
(n − f) different processes, and after t(cid:2)
all those messages
carry the identity of p(cid:1).
, line 7 is
executed inﬁnitely often, and each time it is executed p(cid:1)
belongs to all the sets of X. So, there is a time after which
every crashed process is suspected by every correct process.
It follows that after t(cid:2)
Perpetual/eventual weak accuracy. Let us ﬁrst assume that
there is a correct process that, after some ﬁnite time, does
not belong to the not rec f romi sets of at least (f + 1)
processes (assertion Q). We show that the suspectedi sets
satisfy eventual weak accuracy.
After t(cid:2)
So, there is a time t, a correct process pu and a set Q of
(f + 1) processes such that, after t, pu never belong to the
not rec f rom set of a process of Q. Moreover, let t(cid:2) ≥ t
be a time after which all RESPONSE() messages sent before
t by the processes of Q have been received (or discarded).
, pu can appear in the RESPONSE() messages of at
most (n− (f + 1)) processes, from which we conclude that
at line 5 there is at least one RESPONSE(not rec f rom)
message that does not carry the identity of pu. It follows
that after t(cid:2)
, pu can no longer appear in a set suspectedi.
Hence, the eventual weak accuracy property.
When there is a correct process that, from the beginning
of the execution, does not belong to the not rec f romi sets
of at least (f + 1) processes, the proof that the suspectedi
sets satisfy perpetual weak accuracy property is the same as
previously, considering t = t(cid:2) = 0.
2Lemma 2
Theorem 1 Let 1 ≤ f  1.
As the response from a process to its own queries is as-
sumed to always arrive among the ﬁrst (n − f) responses
it is waiting for (see Section 2.2), we have ∀t : pi ∈ rt
i.
So, PR1(S) means that there is a set of two processes, say
{pi, pj}, such that pj (until it possibly crashes) always re-
ceives and processes the response from pi to its queries (in
other words, the responses from pi always arrive among the
(n−1) responses pj is waiting for and so are never discard-
ed by pj). This means that before pj (possibly) crashes we
have pj ∈ rt
i, and after it has crashed we have pj ∈ f t.
.
Considering the last query issued by pk terminated at or
before t, let rtd(k, (cid:1), t) denote the round-trip delay of the
corresponding query-response exchanged between pk and
p(cid:1). If there is no response from p(cid:1) or if the response is dis-
carded by pk, let rtd(k, (cid:1), t) = +∞. With these notations
PR1(S) can be rewritten as follows:
PR1(S) ≡ ∃(pi, pj) : ∀t : (pj /∈ f t) ⇒ (cid:1)
rtd(j, i, t) (cid:13)= +∞(cid:2)
This property can be rephrased as a property C on the
“The asynchronous
behavior of the channels, namely:
distributed system has a channel, say the channel (pi, pj),
such that, each time pj issues a query, this channel is
never theslowest(intermsofround-tripdelay)amongthe
(n − 1) channels connecting pj to the other processes.
(Moreover, this has to hold only until pi or pj crashes)”.
The “eventual” version of C, denoted EC can be deﬁned
similarly: “There is a time after which there is a channel
inthesystem, say(pi, pj), thatisnevertheslowestamong
the channels connecting pi or pj to the other processes”.
It follows that, when the underlying system satisﬁes the
channel property C (resp. EC), the protocol described in
Figure 1 builds a failure detector of the class S (resp. 3S).
The previous discussion has a nice consequence (which
is an interesting result of the paper), namely, the consensus
problem can be solved8 despite one process crash in
asynchronous distributed systems as soon as there is a
channel (pi, pj) that (from the beginning/after some time)
8Using S-based or 3S-based consensus protocols as described in [5,
17].
is never the slowest among the channels connecting pi or
pj to the other processes.
Remark. Assuming n ≥ 4, let us consider the following
channel property C(cid:2)
: ““There is a channel that, for each
query issued by any of the two processes it connects, al-
ways produces the greatest round-trip delay (greatest with
respecttotheround-tripdelaysproducedbytheotherchan-
nels involved in the same query)”. We have C(cid:2) ⇒ C. So,
C(cid:2)
allows to solve the consensus problem in presence of one
process crash.
5.2 Probabilistic Analysis
The aim of this section is to compute the probability that
the property PR1(S) be satisﬁed in an asynchronous dis-
tributed system made up of n processes in which at most
one process can crash (f = 1), i.e., to compute
rtd(i, j, t) (cid:13)= +∞(cid:2)(cid:5)
(cid:4)∃(pi, pj) : ∀t : (pj /∈ f t) ⇒ (cid:1)
proba
.
To compute such a probability we assume that no pro-
cess crashes (this is because, as soon as a process crash-
es, PR1(S) is trivially satisﬁed). So, assuming no process
crash, we want to compute:
(cid:4)∃(pi, pj) : ∀t :
proba
(cid:1)
rtd(i, j, t) (cid:13)= +∞(cid:2)(cid:5)
.
In order to take into account the time parameter t in a simple
way, we consider that a protocol execution proceeds in con-
secutive asynchronous rounds in the sense that during each
“round” r, each process issues a query, waits for the ﬁrst
(n − 1) corresponding responses, and then proceeds to the
next “round”. As the system is asynchronous, the (n − 1)
RESPONSE messages associated with a query issued by a
process pi can arrive to it in any order. It follows that the
previous probability tends towards 0 when t (i.e., r) tends
towards +∞. But, as no real execution is inﬁnite, we are
interested in protocol executions made up of a ﬁnite num-
ber x of rounds. Actually, x measures the length of a time
period during which the failure detector of the class S is
used9. So, from a realistic point of view, we are interested
in computing the following probability p(x):
rtd(j, i, r) (cid:13)= +∞(cid:2)(cid:5)
Let discardedi(r) be the identity of the process whose re-
sponse has not been received among the (n − 1) ﬁrst re-
sponses to the query issued by pi during round r. As by as-
sumption no process crashes, discardedi(r) is always de-
ﬁned, and we have j = discardedi(r) ⇔ rtd(i, j, r) =
9As noticed in [5], this period has only to be long enough for the upper
layer protocol using the failure detector of the class S to be able to achieve
its goal.
(cid:4)∃(pi, pj) : ∀r ≤ x :
p(x) = proba
(cid:1)
.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
+∞. Hence, p(x) can be rewritten as follows:
p(x) = proba
(cid:4)∃pi,∃pj (cid:13)= pi :
(cid:6)
(cid:5)
(j (cid:13)= discardedi(r))
.
0<r≤x
Computing the p(x) function Let prop(i, x) ≡ ∀pj (cid:13)=
pi :
(cid:5)
0<r≤x (j = discardedi(r))
(cid:7)
. We have:
p(x) = proba[∃pi : ¬ prop(i, x)],
i.e.,
p(x) = 1 − proba[∀pi : prop(i, x)].
Let pp(i, x) = proba[prop(i, x)]. As no process plays a
particular role, for any (i, j, x) we have pp(i, x) = pp(j, x).
Let pp(x) be that value. Moreover, ∀(i, j, r, r(cid:2)) the identi-
ties k = discardedi(r) and k(cid:2) = discardedj(r(cid:2)) are inde-
pendent random variables (they are not related by the query
mechanism). Moreover, the property prop(i, x) is veriﬁed
(or not) for each process pi independently from the other
processes. We can conclude from this discussion that p(x)
follows a binomial distribution and we get:
p(x) = 1 − (cid:1)
(cid:2)n.
pp(x)
The computation of pp(x) can be done by observing that
the x (probabilistic) events corresponding to the collect of
the (n−1) response messages do correspond to a “trial with
replacement” among (n − 1) values10. Each query can be
seen as “selecting” a process id to discard it, and so pp(x)
is the probability that each process identity is drawn out at
least once. It follows that pp(x) can be computed from basic
probability theorems. Then, as soon as pp(x) is determined,
one can easily compute p(x).
Practical results The previous determination of the prob-
ability p(x) can be used to evaluate “how realistic” is the
property PR1(S) in an asynchronous system. Let us notice
that the number of rounds considered (x) can be interpreted
as the duration of a session during which the upper layer
application uses the class S failure detector that is built11.
We have seen that p(x) tends towards 0 when x tend-
s towards +∞. So, it is interesting to know if p(x) tends
quickly towards 0 or not. To this aim, let us consider the
two curves depicted in Figure 2.(a) whose horizontal axis
corresponds to the number n of processes, and vertical axis
corresponds to the probability p(x). The curves correspond
to the cases where the number x of rounds that are consid-
ered (i.e., the length of a session using S) are x = 3n/2 and
x = 2n, respectively (the highest curve depicts p(3n/2),
10We assume that a process pi always receives its own responses to its
own queries.
11As an example, a session is the period corresponding to an execution
of an S-based consensus protocol. Such protocols requires at most n “up-
per layer” rounds [5].