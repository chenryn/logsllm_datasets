### 优化后的文本

#### 列存储与压缩设置
可以选择“列存、最大块、最高压缩级别”。

- **6. HybridDB for PostgreSQL 压缩算法**
  - **支持的压缩算法**：HybridDB for PostgreSQL 仅支持 `zlib` 和 `RLE_TYPE` 两种压缩算法。
  - **应用场景**：
    - **RLE_TYPE**：适用于重复值较多且紧挨着存储的列。
    - **zlib**：通用型压缩算法，适用于大多数场景。

#### 常见问题解答
- **7. 设置 COMPRESSLEVEL 的标准**
  - **建议**：通常建议使用默认值，以平衡压缩比和性能。具体设置可以根据用户对压缩比的需求进行调整。
  
- **8. appendonly 表的操作限制**
  - **更新和删除**：appendonly 表支持更新和删除操作。
  - **列存储要求**：如果选择列存储，必须将表设置为 appendonly (AO) 表。

- **9. 事实表的设计建议**
  - **需求**：用户需要进行聚合运算，且可能偶尔需要更新数据。
  - **设计建议**：
    - 可以选择列存储的 AO 表。
    - 注意：更新和删除操作不建议并发执行，建议采用单线程批量处理。HDB PG 的更新和删除操作会锁表，并发会导致等待。

- **10. BLOCKSIZE 属性的设置**
  - **默认设置**：通常情况下，不需要手动设置 BLOCKSIZE，可以使用默认值。
  - **特殊情况**：当需要非常高的压缩比时，可以设置为列存储并使用最大 BLOCKSIZE。

- **11. AO 表的使用建议**
  - **写入方式**：建议批量写入数据，避免逐条写入，以提高性能并减少膨胀。
  - **维护**：对于经常有更新和删除操作的表，建议每天执行一次 `VACUUM` 操作，或在大量更新/删除后手动执行 `VACUUM`。

```sql
VACUUM table_name;
```

#### 数据库物理架构
- **实例 (Instance)**
- **数据库 (Database)**
  - **系统模式 (pg_catalog, information_schema)**
  - **用户模式 (public/other schema)**
    - **系统表/视图 (system tbl/view)**
    - **用户表/视图 (table/view, func, ...)**
  - **全局对象 (global obj(s))**
    - **默认表空间 (pg_default/other)**
    - **全局表空间 (pg_global)**
- **事务 (xact)**
- **表空间 (tablespace)**
- **日志 (log, stats, WAL)**
- **数据文件 (DataFILE(s))**
- **虚拟内存 (VM, FSM)**
- **序列 (seri), 配置 (conf), 归档目录 (归档 DIR)**

#### 权限体系
- **参考文档**：[PostgreSQL 官方文档](https://www.postgresql.org/docs/devel/static/sql-grant.html)

#### 数据库进程结构
- **主进程 (postmaster)**：负责监听和创建子进程。
- **恢复进程 (startup)**：用于数据库恢复。
- **系统日志记录进程 (syslogger)**。
- **统计信息收集进程 (pgstat)**。
- **归档进程 (pgarch)**：开启归档时由 postmaster 创建。
- **检查点进程 (checkpointer)**。
- **后台写入进程 (bgwriter)**：负责将共享缓冲区中的脏数据写入磁盘。
- **自动垃圾回收进程 (autovacuum launcher)**：开启 autovacuum 时由 postmaster 创建。
- **垃圾回收工作进程 (autovacuum worker)**：由 autovacuum launcher 创建。
- **后台工作进程 (bgworker)**：包括逻辑复制、并行计算等。
- **WAL 发送进程 (wal sender)**：用于逻辑复制和流式物理复制。
- **WAL 接收进程 (wal receiver)**：用于逻辑复制和流式物理复制。
- **工作进程 (work process)**：动态创建，例如并行计算进程。

#### 查询处理流程
- **查询 (QUERY)**
- **并行执行 (parallel exec)**
- **并行工作进程 (parallel workers)**
- **检查点 (ckpt)**
- **WAL 发送 (wal sender)**
- **WAL 接收 (wal receiver)**

#### 准备语句 (Prepared Statement)
- **原理**：为什么需要 prepared statement。
- **相关技术**：Oracle, MySQL, PostgreSQL。

#### 数据页结构
- **布局 (layout)**
  - **页面头部 (page header)**
  - **元组 (tuple)**
    - **详情**：src/include/access/htup_details.h
    - **TOAST**：当变长字段压缩后超过 1/4 个 PAGE 时，转存到 TOAST，TUPLE 中存储地址。
      - **访问**：通过 toast macro 访问 TOAST 内的数据。
      - **容量**：每个变长字段可以存储 1GB（压缩后），例如字符串、数组、bytea、varbit 等。
  - **切片结构**：当变长字段超过 1/4 PAGE 时，使用切片存储格式。
  - **大对象介绍**：最大存储 4TB，支持 offset 操作。

#### 思考与问题
- **索引类型及适用场景**：Oracle 中的索引类型及其适用场景。
- **索引引入的成本**：每种索引的成本及不适合的场景。
- **模糊查询、全文检索、相似查询**：如何处理这些查询。
- **正排、倒排、NULL 处理**：双向链表的应用。
- **空间数据**：几何运算、距离排序。
- **长字符串检索**：哈希 (hash)。
- **计算型检索**：表达式。
- **部分索引 (partial index)**：只检索某些数据。
- **多字段组合检索**：Bloom、RUM、GIN。
- **时序数据范围检索**：range。
- **Oracle 全文索引的延迟**：如何处理延迟问题。

#### 自动选择索引接口
- **BTree**：支持普通类型、数组类型、多列组合查询。
- **SPGiST**：支持平面几何类型、范围类型。
- **RUM**：支持多值类型、普通类型。
- **BRIN**：适合线性数据、时序数据。
- **Bloom**：支持多列组合等值查询。
- **表达式索引**：搜索条件为表达式的场景。
- **条件索引 (定向索引)**：强制过滤某些条件的场景。

#### 索引结构
- **BTree**：详细说明见 [GitHub 文档](https://github.com/digoal/blog/blob/master/201605/20160528_01.md)。
- **Gin**：倒排结构，支持多值类型，详见 [PostgreSQL 官方文档](https://www.postgresql.org/docs/10/static/gin.html)。
- **Hash**：哈希值转换，映射到 bucket，详见 [GitHub 文档](https://github.com/digoal/blog/blob/master/201005/20100511_02.md)。
- **GiST, SPGiST**：空间分区通用索引结构，详见 [GitHub 文档](https://github.com/digoal/blog/blob/master/201708/20170824_02.md)。
- **BRIN**：适合线性数据、时序数据，详见 [GitHub 文档](https://github.com/digoal/blog/blob/master/201803/20180323_05.md)。
- **其他索引结构**：RUM、Bloom、Zombodb。

#### 多列复合索引设计
- **字段顺序原则**：详见 [GitHub 文档](https://github.com/digoal/blog/blob/master/201803/20180314_02.md)。
- **非驱动列查询优化**：详见 [GitHub 文档](https://github.com/digoal/blog/blob/master/201803/20180323_03.md)。

#### 删除操作后的表大小
- **水位概念**：理解水位概念。
- **回收机制**：
  - **HEAP PAGE**：末页没有任何数据时释放真实空间，FSM 会尝试重用空闲空间，VACUUM 回收垃圾 TUPLE。
  - **INDEX PAGE**：不同索引实现不同，nbtree 在任何情况下都不会回收真实占用空间，仅做 REUSE。
  - **示例**：
    ```sql
    CREATE TABLE test (id int);
    INSERT INTO test SELECT generate_series(1, 10000000);
    DELETE FROM test WHERE ctid <> (1, 1);
    VACUUM test;
    TRUNCATE test;
    INSERT INTO test SELECT generate_series(1, 10000000);
    DELETE FROM test WHERE ctid <> (100, 1);
    VACUUM test;
    ```

#### 自由空间管理 (FSM)
- **详情**：src/backend/storage/freespace/README
- **参考文档**：[GitHub 文档](https://github.com/digoal/blog/blob/master/201005/20100511_02.md)