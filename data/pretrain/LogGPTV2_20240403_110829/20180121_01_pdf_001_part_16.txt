可以选择“列存、最大块、压缩级别选最高”。
• 6. HybridDB for PostgreSQL 仅支持 zlib 和 RLE_TYPE 压缩算法，这两种
压缩算法分别使用在什么场景下？RLE_TYPE是否只适用于有大量重复
数据的列？
– Rle_type适合重复值较多，同时紧挨着存储的列。
– Zlib通用。
常见热门问题
• 7. HybridDB for PostgreSQL表压缩时，设置COMPRESSLEVEL时，
以什么标准设置COMPRESSLEVEL的值？比如某列的数据量达到
多少时，我要把COMPRESSLEVEL最好设置成4而不是2？
– 和用户关心的压缩比有关，通常建议不设置，选择默认压缩比和
性能较为均衡。
• 8. appendonly表，是否只能insert，不能update、delete。按列
存、压缩的前提条件是不是设置成appendonly？
– Appendonly表可以update、delete。
– 列存仅支持appendonly，所以如果要选择列存，必须是AO表。
常见热门问题
• 9. 用户的事实表需要进行聚合运算，又有可能会被UPDATE（但更新频率不高），这种表怎
么如何设计？（按列存但不满足APPENDONLY条件，按行存性能低）。在实际中，人社地市
局有可能对操作数据进行回退\更正操作。
– AO表支持更新和删除，可以选择列存AO表。
– 但是需注意，对同一张表的更新和删除操作不建议并发，建议采用单线程批量更新和删除。因为目前
HDB PG的更新、删除是锁表的，并发会等待。
• 10. GP建表语句中的BLOCKSIZE属性在什么情况下需要用户进行设置，通常情况下是否可使用
默认值不设置？
– 通常不需要设置，仅当用户需要非常大的压缩比时，可以使用列存，并设置blocksize为最大值。
• 11. AO表使用建议
– AO表建议批量写入，不建议来一条，写一条。性能会非常差。而且会膨胀。
– 对于经常有更新、删除的表，建议每天做一次vacuum。或者在更新、删除大量数据后，人为执行一下
vacuum。
• vacuum table_name;
目录
• 产品介绍
• 生态介绍
• 应用案例
• 开发、管理实践
• 数据库原理
• 参考文档
数据库物理架构
instance
database
pg_catalog information_schema
public/other schema schema
schema
system tbl\view
table view,func,...
global obj(s)
pg_default/other pg_global
xact, tablespace tablespace
log,
stats,
WAL DataFILE(s DataFILE(s
slot, VM,FSM VM,FSM
) )
seri,
conf
... 归档 DIR DIR
数据库物理架构
逻辑结构
• https://github.com/digoal/blog/blob/master/201605/20160510_01.md
权限体系
https://www.postgresql.org/docs/devel/static/sql-grant.html
数据库进程结构
• postmaster -- 所有数据库进程的主进程(负责监听和fork子进程)
• startup -- 主要用于数据库恢复的进程
• syslogger -- 记录系统日志
• pgstat -- 收集统计信息
• pgarch -- 如果开启了归档, 那么postmaster会fork一个归档进程.
• checkpointer -- 负责检查点的进程
• bgwriter -- 负责把shared buffer中的脏数据写入磁盘的进程
• autovacuum lanucher -- 负责回收垃圾数据的进程, 如果开启了autovacuum的话,那么postmaster
会fork这个进程.
• autovacuum worker -- 负责回收垃圾数据的worker进程, 是lanucher进程fork出来的.
• bgworker -- 分为很多种worker，例如logical replication worker launcher. parallel worker.
replication worker等
• wal sender -- 逻辑复制、流式物理复制的WAL发送进程
• wal receiver -- 逻辑复制、流式物理复制的WAL接收进程
• work process -- 工作进程，动态fork，例如并行计算的进程。
数据库进程结构
query(s)
parallel exec
parallel
workers
ckpt
wal
sender
wal
receiver
处理流程
QUERY
https://www.postgresql.org/developer/backend/
为什么需要prepared statement
原理。
oracle, mysql ,pg
数据页结构
layout
https://www.postgresql.org/docs/devel/static/storage.html
数据文件结构
单表
大小
取决
于
blocksize
寻址空间
page layout
page header
结构
tuple
详情：
src/include/access/htup_details.h
https://www.postgresql.org/docs/devel/static/storage.html
结构
tuple layout
tuple header
介绍
TOAST
• 当变长字段压缩后超过1/4个PAGE
• 转存到TOAST，TUPLE中存储地址
• 通过toast macro访问toast内的数据
• 一个变长字段可以存储1GB（压缩后），例如字符串，数组，bytea，varbit等
每个表、索引对应的
T0AST
切片结构
当变长字段，超过1/4 PAGE
大对象介绍
• 类似 TOAST的切片存储格式
• 最大存储 4TB一个大对象
• 支持 offset操作
• 为什么数据库需要blob, toast?
• 现在存储建议用什么架构？
思考、问题
• Oracle里有几种索引
• 分别适用什么场景，支持什么操作
• 索引引入的成本有哪些
• 每种索引有什么不适合的场景
• 遇到 模糊查询、全文检索、相似查询 怎么办
• 遇到正排、倒排、NULL怎么处理(双向链表)
• 空间数据，几何运算、距离排序
• 长字符串检索(hash)
• 计算型检索(表达式)
• 只检索某些数据如何优化(partial index)
• 多字段任意组合检索(bloom,rum,gin)
• 时序数据范围检索(range)
• Oracle全文索引的延迟？
索引接口的选择
select * from pg_am;
https://www.postgresql.org/docs/devel/static/sql-createindex.html
https://github.com/digoal/blog/blob/master/201706/20170627_01.md
自动选择索引接口：
https://github.com/digoal/blog/blob/master/201706/20170617_01.md
索引接口的选择
• BTree
– =, >, >=, ,>,-|-,&
– 普通类型(通过btree_gist 插件支持)：与B-Tree类似，增加空间类型类似操作符
– 数组类型(通过intarray 插件支持)：与GIN类似
– 多列：任意列组合查询
• SPGiST
– 平面几何类型：与GiST类似
– 范围类型：与GiST类似
索引接口的选择
• RUM
– 多值类型(数组、全文检索类型)：包含、相交、相似排序
– 普通类型：与B-Tree类似
• BRIN
– 适合 线性数据、时序数据、（HEAP PAGE之间边界清晰的数据）。
– 普通类型：与B-Tree类似
– 空间类型：包含
• Bloom
– 多列：任意列组合，等值查询
• 表达式索引
– 搜索条件为表达式时。
– where st_makepoint(x,y) op ?
– create index idx on tbl USING gist ( (st_makepoint(x,y)) );
• 条件索引(定向索引)
– 搜索时，强制过滤某些条件时。
– where status='active' and col=? 。
– create index idx on tbl (col) where status='active'; --激活用户占比70%，只针对这些数据进行索引
– 监控系统例子 select x from tbl where temp>60; --99, 1% 异常数据
索引结构
btree
• https://github.com/digoal/blog/blob/master/
201605/20160528_01.md
• src/backend/access/nbtree/README
索引结构
btree
索引结构
btree
索引结构
gin
• src/backend/access/gin/README
• 倒排结构
https://www.postgresql.org/docs/10/static/gin.html ctid(行号) ctid(行号)
– 多值类型element tree
posting
– ctids (posting list or tree) posting list
tree
• 写入优化
– element pending list
row1: array[key.....(s)]
– gin_pending_list_limit ...... posting list
• 大结果集查询优化-fuzzy match
– gin_fuzzy_search_limit
...
metapage 倒排树
pending
list for
fast update
...
key,point key,point key,point
... ... ...
索引结构
gin
• https://www.cybertec-
postgresql.com/en/what-postgresql-full-text-
search-has-to-do-with-vacuum/
索引结构
hash
• hash值转换，hash值映射到某个bucket。
• bucket数量为2的N次方。至少包括2个bucket。
• metapage，page zero。包括控制信息。
• 每个bucket内至少一个primary page。放不下时，增加overflow page。
• hash index支持长字符串。page内存储的是HASH VALUE。
• 每个page内，hash value有序存放，支持binary search. 跨page不保证有序。
• 分裂优化，增加bucket时，hash mapping会变化，需要分裂。2^n映射。有一定的优化策略
special
• (切成4个部分，增量进行split)。
space
• src/backend/access/hash/README
• src/backend/utils/hash/dynahash.c double
link
meta
page
bucket1 bucket2
primary overflow primary overflow
page page(s) page page(s)
... ...
bitmappage:
标记overflow page 状态
bitmap bitmap (reuse,free)
page page
索引结构
gist, spgist
索引结构
gist, spgist
• [空间分区]通用索引结构
• r-tree base on gist
• src/backend/access/gist/README
• src/backend/access/spgist/README
• https://github.com/digoal/blog/blob/master/201708/20170824_02.md
• https://github.com/digoal/blog/blob/master/201708/20170820_01.md
• https://github.com/digoal/blog/blob/master/201709/20170905_01.md
• https://github.com/digoal/blog/blob/master/201708/20170825_01.md
索引结构
brin
• src/backend/access/brin/README
• 定义粒度
– N个连续的块
• 索引字段值在连续N个块内的边界值
– 普通边界
– RANGE边界
– 空间边界（BOUND BOX）
– PostgreSQL 11 优化(分段 bound box)
• https://github.com/digoal/blog/blob/master/201803/20180323_05.m
d
其他索引结构
• rum
– https://github.com/postgrespro/rum
• bloom
– https://www.postgresql.org/docs/devel/static/bloom.
html
• zombodb
– https://github.com/zombodb/zombodb
cluster
思考、问题
• 多列复合索引如何设计字段顺序
• 非驱动列查询，如何使用索引扫描
多列复合索引字段顺序原则
• https://github.com/digoal/blog/blob/master/201803/20180314_02.md
非驱动列查询的优化
• https://github.com/digoal/blog/blob/master/201803/20180323_03.md
思考
• 为什么 DELETE后表还是那么大？
– 理解水位概念
– 如果要降水位，需要移动 BLOCK，索引会怎么
样？
的回收、 机制
PAGE REUSE
• HEAP PAGE
– 末页没有任何数据，释放真实空间。
– FSM，见缝插针。只要有空间就可以使用。但不一定回收物理空间。
– VACUUM回收垃圾TUPLE。
– 为什么不能回收空洞、首部空间？（想想ctid寻址，索引如何引用heap）
– 首部空间什么时候可以回收？（无索引）
– TOAST PAGE同样需要考虑。（涉及TUPLE 内的toast引用，寻址）
• INDEX PAGE
– 不同索引实现不一样。（nbtree，任何情况下都不回收真实占用空间，仅
做REUSE。）
– 没有任何引用的页，REUSE。但不一定释放空间。
• 双向链接。即使仅剩1个有效ITEM，这个PAGE也不会被REUSE。
例子
• create table test (id int);
• insert into test select generate_series(1,10000000);
• delete from test where ctid <> (1,1);
• vacuum test;
• -- 观察表大小
• truncate test;
• insert into test select generate_series(1,10000000);
• delete from test where ctid <> (100,1);
• vacuum test;
• -- 观察表大小
• 为什么？
结构
FSM
• src/backend/storage/freespace/README
• https://github.com/digoal/blog/blob/master/201
005/20100511_02.md