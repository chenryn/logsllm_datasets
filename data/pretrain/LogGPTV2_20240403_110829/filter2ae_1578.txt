# 0x00 前言
本文记录了一次自我引导进入误区的经历，并分享从中获得的宝贵经验。

# 0x01 问题背景
在一次抓包过程中，发现输入号码后会触发两次查询：
1. 验证卡号是否存在；
2. 获取卡号对应的个人信息。
初步判断：**这些操作涉及了数据库查询**。

# 0x02 进一步测试
## Part I: 自动化工具
- **使用sqlmap进行自动化测试**。首次运行时设置了以下参数：
  - `--delay 10`：考虑到目标系统的敏感性及可能存在的WAF防护措施，设置请求延迟以避免因频繁请求导致IP被封禁。
  - `--time-sec 15`：针对时间盲注设置延时。
  - `--timeout 20`：设定超时阈值。
  - `--tamper`：启用混淆技术绕过防护机制。
  
  > 注意：通常应先尝试确定哪些字符被过滤，再根据具体情况构造payload和tamper脚本。但此次未能通过自动化工具有效检测到注入漏洞，可能是由于默认tamper配置未能生成有效payload。

## Part II: 手工注入
### 信息确认
- 回归手工注入前，需先识别数据库类型等基本信息以便后续构造payload。
- 尝试了如下几种payload来验证数据库版本等信息：
  - `/ 'and @@version` 或 `/ ' and @@version --`（提示语法错误）
  - `/ ' select @@version` （同样失败）

> Tips:
> - 利用数据库内置函数优先级较高的特性进行测试。
> - 根据报错信息推断数据库类型。
> - 若payload成功执行，则页面将显示相应数据库版本信息。

### MSSQL 注入
- 确认数据库为MSSQL后，继续尝试爆破其他系统参数：
  - `and db_name()>0 and '1'='1`：获取当前数据库名称
  - `and user_name()>0 and '1'='1`：获取当前用户名
  - `and @@servername>0 and '1'='1`：获取服务器名

> 注：在尝试进一步爆破表结构时遇到无回显问题，查阅资料得知这可能是MSSQL 2008特有的“出库不出表”现象所致。

## Part III: 出库不出表？
- 经与同事讨论分析，明确了该现象的原因在于用户ID与后续逻辑条件之间的连接方式：
  - 使用`or`连接时，无论ID查询结果如何，都会执行下一步，从而可能导致预期外的结果。
  - 使用`and`连接时，只有当ID存在且满足后续条件时才会产生有效输出；否则整个表达式结果始终为假。

### 完成手工注入
- 采用社会工程学方法找到一个有效的用户ID用于测试。
- 成功实施了对其他数据库、表以及字段的枚举攻击。

# 思路反思
- 此次经历揭示了一个重要教训：对于用户输入处理流程的理解至关重要。两个独立的查询步骤之间缺乏逻辑关联，使得某些情况下即使存在SQL注入点也难以直接观察到效果。希望此案例能提醒初学者注意此类陷阱。

# 0x03 参考资源
- 本次实践不仅增强了个人技能，还发现了许多有价值的在线学习平台和参考资料，如Cheat Sheets等，非常有助于深入理解和掌握相关知识。