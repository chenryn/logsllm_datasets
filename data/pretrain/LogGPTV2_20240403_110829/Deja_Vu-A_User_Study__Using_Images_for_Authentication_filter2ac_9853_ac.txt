cation rates can be signiﬁcantly improved by “training”
the user during passface creation, which we did not do
in our study.
A drawback of their system is that users pick faces which
they are attracted to, which greatly facilitates imperson-
ation attacks.
Interestingly, in our study many users
told us that they did not select photographs of people
because they did not feel that they could relate person-
ally to the image. We did notice that when pictures of
people were chosen, the people closely resembled the
users (e.g., one user selected an image that resembled
his grandparents, one Indian woman selected an image
of an Indian woman and a Chinese woman selected an
image of a Chinese man). Since we use randomly gen-
erated images, knowing the preferences of a person only
has limited usefulness.
Ellison et al. propose a scheme in which a user can pro-
tect a secret key using “the personal entropy in his whole
life”, that is by encrypting the passphrase using the an-
swers to several personal questions [EHMS99]. The
scheme is designed so that a user can forget the answers
to a subset of the questions and still recover the secret
key, while an attacker must learn the answer to a large
subset of the questions to learn the key.
Naor and Shamir propose a Visual Cryptography
scheme, which splits secret information into two trans-
parencies, such that each part contains no useful infor-
mation, but the combination reveals the secret [NS95].
Naor and Pinkas extend this idea as a means for a user
to authenticate text and images [NP97]. In this case, the
recipient is equipped with a transparency. When the re-
cipient places the transparency over a message or image
that was sent to him, the combination of both images re-
veals the message. Visual cryptography could be used to
devise a user authentication scheme that is token based.
Ian Goldberg’s “visual key ﬁngerprint”[Gol96] and
Raph Levien’s [Lev96] PGP Snowﬂake were developed
as a way to graphically identify and recognize PGP key
ﬁngerprints.
Adams and Sasse propose that educating users in secu-
rity is a solution for the problem of choosing weak pass-
words [AS99]. They claim that if users receive speciﬁc
security training and understand security models, they
will select secure passwords and refrain from engaging
in insecure behavior. In our user study, however, we dis-
cover that the level of security training did not prevent
users from choosing trivial passwords or from storing
them insecurely. We conjecture that this is the case be-
cause people prefer convenience over security. There-
fore, security should be an inherent component of the
system by default.
6 Conclusions and Future Work
Previous
research recognized the weaknesses of
knowledge-based authentication schemes (in particular
password-based computer logins). So far, however, most
of the proposed solutions have been based on technical
ﬁxes or on educating users. Neither of these address
the fundamental problem of knowledge-based authenti-
cation systems, which is that the authentication task is
based on precise recall of the secret knowledge.
Since people are much better at recognizing previously
seen images than at precisely recalling pass phrases
from memory, we employ a recognition-based approach
for authentication. We examine the requirements of a
recognition-based system and propose D´ej`a Vu, in which
we replace the precise recall of pass phrases with the
recognition of previously seen images. This system has
the advantage that the authentication task is more reli-
able, easier and fun to use. In addition, the system pre-
vents users from choosing weak passwords and makes it
difﬁcult for users to write passwords down and to com-
municate them to others.
We conducted a user study which compares D´ej`a Vu to
traditional password and PIN authentication. Results in-
dicate that image authentication systems have potential
applications, especially where text input is hard (e.g.,
PDAs or ATMs), for infrequently used passwords or in
situations where passwords must be frequently changed.
Since the error recovery rate was signiﬁcantly higher for
images, compared to passwords and PINS, such a sys-
tem may be useful in environments where high availabil-
ity of a password is paramount and where the difﬁculty
to communicate passwords to others is desired. Further
study is required to determine how user performance and
error rate will vary with frequency of use, over longer
time periods and with large or multiple portfolios.
Many improvements can be made to strengthen the sys-
tem against attack and to improve its usability. For ex-
ample, we are exploring ways to mask or distort portfo-
lio images, such that users will be able to recognize their
images, while leaking information about the portfolio to
observers. We are also exploring authentication schemes
that take advantage of other innate human abilities (e.g.,
spatial navigation).
Hackers recognize that humans are often the weakest
link in system security and exploit this using social en-
gineering tactics[Kni94]. Yet designers do not always
include human limitations in their evaluation of system
security. Systems should not only be evaluated theoreti-
cally, but by how secure they are in common practice.
Acknowledgments
We would like to thank Doug Tygar, James Landay, and
John Canny for their encouragement and advice. We
would also like to thank Dawn Song and Ben Gross for
their valuable feedback. Furthermore, we would like to
thank the anonymous reviewers for their valuable com-
ments and suggestions.
References
[And94]
[Art99]
[AS99]
Ross J. Anderson. Why Cryptosystems Fail.
Communications of the ACM, 37(11):32–
40, November 1994.
ID Arts. http://www.id-arts.com/
technology/papers/, 1999.
Anne Adams and Martina Angela Sasse.
Users are not the enemy: Why users com-
promise computer security mechanisms and
how to take remedial measures. Communi-
cations of the ACM, 42(12):40–46, Decem-
ber 1999.
[Bau98]
Andrej Bauer.
Gallery of random art.
WWW at http://andrej.com/art/,
1998.
[Bel93]
W. Belgers. Unix password security, 1993.
[Lev96]
G. Blonder. United states patent, 1996.
United States Patent 5559961.
[Man96]
Raph Levien. Pgp snowﬂake. Personal
communication, 1996.
Udi Manber. A simple scheme to make
passwords based on one-way functions
much harder to crack. Computers and Se-
curity, 15(2):171–176, 1996.
R. Morris and K. Thompson. Password se-
curity: A case history. Communications of
the ACM, 22(11), Nov 1979.
D. Muffett. Crack: A sensible password
checker for unix, 1992. A document dis-
tributed with the Crack 4.1 software pack-
age.
Jakob Nielsen. Usability Engineering. Aca-
demic Press, 1993.
M. Naor and B. Pinkas. Visual authenti-
cation and identiﬁcation.
In Burt Kaliski,
editor, Advances in Cryptology - Crypto
’97, pages 322–336, Berlin, 1997. Springer-
Verlag. Lecture Notes in Computer Science
Volume 1294.
M. Naor and A. Shamir. Visual cryptogra-
phy. In Alfredo De Santis, editor, Advances
in Cryptology - EuroCrypt ’94, pages 1–
12, Berlin, 1995. Springer-Verlag. Lecture
Notes in Computer Science Volume 950.
Passlogix. v-go. WWW at http://www.
passlogix.com/, 2000.
A. Paivio and K. Csapo. Concrete im-
age and verbal memory codes. Journal of
Experimental Psychology, 80(2):279–285,
1969.
Adrian Perrig and Dawn Song. Hash vi-
sualization: A new technique to improve
real-world security.
In Proceedings of the
1999 International Workshop on Crypto-
graphic Techniques and E-Commerce (Cry-
TEC ’99), 1999.
L. Standing, J. Conezio, and R.N. Haber.
Perception and memory for pictures:
Single-trial learning of 2500 visual stimuli.
Psychonomic Science, 19(2):73–74, 1970.
Karl Sims. Artiﬁcial evolution for computer
graphics.
In Thomas W. Sederberg, edi-
tor, Proceedings of the ACM SIGGRAPH
Conference on Computer Graphics (SIG-
GRAPH ’91), pages 319–328, Las Vegas,
Nevada, USA, July 1991. ACM Press.
[MT79]
[Muf92]
[Nie93]
[NP97]
[NS95]
[Pas00]
[PC69]
[PS99]
[SCH70]
[Sim91]
[Blo96]
[CB94]
[Dha00]
B. Cheswick and S. Bellovin. Firewalls and
internet security: Repelling the wily hacker,
1994.
Rachna Dhamija. Hash visualization in user
authentication. In Proceedings of the Com-
puter Human Interaction 2000 Conference,
April 2000.
[DP89]
D. W. Davies and W. L. Price. Security for
Computer Networks. John Wiley and Sons,
1989.
[EHMS99] Carl Ellison, Chris Hall, Randy Milbert,
and Bruce Schneier. Protecting secret keys
with personal entropy. to appear in Future
Generation Computer Systems, 1999.
[FK89]
[Gol96]
[Hab70]
[Int80]
D. C. Feldmeier and P. R. Karn. UNIX pass-
word security—ten years later (invited),
1989. Lecture Notes in Computer Science
Volume 435.
Ian Goldberg.
Visual key ﬁngerprint
code. Available at http://www.cs.
berkeley.edu/iang/visprint.c,
1996.
Ralph Norman Haber. How we remem-
ber what we see.
Scientiﬁc American,
222(5):104–112, May 1970.
Helene Intraub. Presentation rate and the
representation of brieﬂy glimpsed pictures
in memory. Journal of Experimental Psy-
chology: Human Learning and Memory,
6(1):1–12, 1980.
[JMM99] Ian Jermyn, Alain Mayer, Fabian Monrose,
Michael K. Reiter, and Aviel D. Rubin. The
design and analysis of graphical passwords.
In Proceedings of the 8th USENIX Security
Symposium, August 1999.
[Kle90]
Daniel Klein. A survey of, and improve-
ments to, password security. In Proceedings
of the USENIX Second Security Workshop,
Portland, Oregon, 1990.
[Kni94]
The Knightmare. Secrets of a Super Hacker.
Loompanics Unlimited, Port Townsend,
Washington, 1994.
[SNS88]
[WT99]
J. Steiner, C. Neuman, and J. Schiller. Ker-
beros: An authentication service for open
network systems.
In USENIX Conference
Proceedings, pages 191–200, 1988.
Alma Whitten and J. D. Tygar. Why johnny
can’t encrypt: A usability evaluation of pgp
5.0. In Proceedings of the 8th USENIX Se-
curity Symposium, August 1999.
A Random Art
Image
(a)
x; x; x
for expression
Image for expression
(b)
(A.1)
One proposed hash visualization algorithm is Random
Art, a technique that converts meaningless strings into
abstract structured images. Random Art was developed
by Andrej Bauer, and is based on an idea of genetic art
by Michael Witbrock and John Mount. Originally Ran-
dom Art was conceived for automatic generation of artis-
tic images. A brief overview and demonstration of Ran-
dom Art can be found at Andrej’s Random Art web site
[Bau98].
The basic idea is to use a binary string  as a seed for
a random number generator. The randomness is used to
construct a random expression which describes a func-
tion generating the image—mapping each image pixel to
a color value. The pixel coordinates range continuously
from  1 to 1, in both x and y dimensions. The image
resolution deﬁnes the sampling rate of the continuous
image. For example, to generate a 100  100 image, we
sample the function at 10000 locations.
[ 1; 1]2
Random Art is an algorithm such that given a bit-string
as input, it will generate a function F :
!
[ 1; 1]3, which deﬁnes an image. The bit-string input
is used as a seed for the pseudo-random number gener-
ator, and the function is constructed by choosing rules
from a grammar depending on the value of the pseudo-
random number generator. The function F maps each
pixel x; y to a RGB value (r,g,b) which is a triple of in-
tensities for the red, green and blue values, respectively.
For example, the expression F x; y = x; x; x pro-
duces a horizontal gray grade, as shown in ﬁgure 3(a). A
more complicated example is the following expression,
which is shown in ﬁgure 3(b).
if xy > 0 he x; y; 1
e e fdx; y; fdx; y; fdx; y
Figure 3: Examples of images and corresponding ex-
pressions.
The function F can also be seen as an expression tree,
which is generated using a grammar G and a depth pa-
rameter d, which speciﬁes the minimum depth of the
expression tree that is generated. The grammar G de-
ﬁnes the structure of the expression trees. It is a version
of a context-free grammar, in which alternatives are la-
beled with probabilities. In addition, it is assumed that
if the ﬁrst alternative in the rule is followed repeatedly,
a terminal clause is reached. This condition is needed
when the algorithm needs to terminate the generation of
a branch. For illustration, consider the following simple
grammar:
E ::= C; C; C1
A ::= hrandom number 2 [ 1; 1]i
C ::= A
 1
4  (cid:12)
(cid:12) addC; C 3
8  (cid:12)
 1
3  (cid:12)
 1
3  (cid:12)
(cid:12) 	 C; C 3
(cid:12) x
8 
 1
3 
(cid:12) y
The numbers in subscripts are the probabilities with
which alternatives are chosen by the algorithm. There
are three rules in this simple grammar. The rule E spec-
iﬁes that an expression is a triple of compound expres-
sion C. The rule C says that every compound expression
C is an atomic expression A with probability 1
4 , or ei-
ther the function add or 	  applied to two compound
expressions, with probabilities 3
8 for each function. An
atomic expression A is either a constant, which is gen-
erated as a pseudorandom ﬂoating point number, or one
of the coordinates x or y. All functions appearing in the
Random Art algorithm are scaled so that they map the
interval [ 1; 1] to the interval [ 1; 1]. This condition
ensures that all randomly generated expression trees are
valid. For example, the scaling for the add function is
achieved by deﬁning addx; y = x  y=2.
(A.1)
The grammar used in the Random Art implementation
sin
mod
mix
y
mult
div
plus
rgb
x
sin
mult
exp
y
BW
x
mult
div
BW
y
x
RGB
0.302982
BW
y
x
x
0.590654
0.0983035
0.269608
-0.495324
-0.678638
(a) Random Art expression tree
(b) Generated image
Figure 4: Random Art expression tree and the corresponding image
is too large to be shown in this paper. Other functions
included are: sin, cos, exp, square root, division, mix.
The function ixa; b; c; d is a function which blends
expressions c and d depending on the parameters a and
b. We show an example of an expression tree of depth 5
in ﬁgure 4, along with the corresponding image. For the
other images in this paper, we used a depth of 12.