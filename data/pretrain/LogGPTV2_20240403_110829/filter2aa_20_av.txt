外部页面（假定为攻击者用来收集信息的网站）
各自的脚本代码如下所示。
代码清单 /462/46-001.php
     Next 
代码清单 /462/46-002.php
       跳转到外部网站的连接 
代码清单 /462/46-900.cgi【攻击者用来收集信息的网站】
    #!/usr/bin/perl
    use utf8;
    use strict;
    use CGI qw/-no_xhtml :standard/;
    use Encode qw/encode/;
    my $e_referer = escapeHTML(referer());
    print encode('UTF-8', 
    这是收集会话 ID 的网站。Referer 信息如下 
    $e_referer
    END_OF_HTML
图 4-52 展示了页面的跳转过程。点击链接后跳转到外部网站时，URL 中的会话 ID 遭到了泄漏。
图 4-52 示例页面跳转
通过 Referer 泄漏会话 ID 所需的条件
网站满足以下两个条件时就有可能通过 Referer 泄漏会话 ID。
能够使用被嵌入 URL 的会话 ID
存在跳转至外部网站的链接。或用户能够自己发布链接
攻击流程
Referer 造成的会话 ID 泄漏可分为偶发事故和有意针对安全隐患实施的攻击这两种情况。其中，后者仅存在于应用的用户能够自己发布链接的网站。比如 Web 邮箱、论坛、博客、社交网站等。
接下来我们就以从 Web 邮箱实施攻击为例进行说明。攻击者发送带有链接的邮件给攻击目标应用的用户。邮件中通过“请看我的个人主页”或者“史上最大让利折扣”等语句引诱用户点击链接跳转至攻击者的网站。
图 4-53 从 Web 邮箱发动攻击
由于多数 Web 邮箱都会将 URL 格式的字符串转换为链接形式，因此，用户一旦点击链接进入攻击者的网站，Web 邮箱的 URL 中嵌入的会话 ID 就会通过 Referer 泄漏到攻击者网站。攻击者利用得到的 Referer 信息，就能够伪装成该用户。
2000 年 12 月，独立行政法人产业技术综合研究所的高木浩光等人组成的小组发表了题为“不用 Cookie 而在 URL 中嵌入 ID 的会话管理方式的安全隐患（1）——通过取得 REFERER 信息劫持免费邮箱网站的问题”的文章 36
 。文中列举了在当时的 7 个 Web 邮箱服务中，将会话 ID 嵌入 URL 后会话 ID 通过 Referer 泄漏的状况、原理以及解决方法。虽然距离文章发表已经过去了十几年，但此问题还是没有得到足够的重视。
事故性的会话 ID 泄漏
如果网站不允许用户自己发布链接，攻击者就很难将用户诱导至自己的网站，然而，即使在这种情况下，只要网站中存在指向外部网站的链接，就仍然有可能将会话 ID 泄漏至这些外部网站。万一外部网站的管理员心怀不轨，就能够从 Referer 的日志中获取会话 ID 来伪装用户。
此外，也有因用户自己将带有会话 ID 的 URL 发布到论坛等地方，使该 URL 被搜索引擎收录而造成信息泄漏的事件。
影响
嵌入 URL 的会话 ID 经由 Referer 泄漏的影响，同前述的会话劫持的影响一样。
36
 原文标题为：Cookie を使用せず URL に埋め込む ID に赖ったセッション管理方式の脆弱性 (1)——REFERER 情报取得による脆弱フリーメールサイトの乘っ取り问题——。原始的文章页面已被删除，现在可以从已归档的页面中浏览该文章。http://web.archive.org/web/20030828174518/http://securit.gtrc.aist.go.jp/SecurIT/advisory/webmail-1/
安全隐患的产生原因
会话 ID 嵌入 URL 的直接原因为设置不完善或者程序中存在问题。
将会话 ID 嵌入 URL 分为有意和无意两种情况。而之所以特意将会话 ID 嵌入 URL，可能是因为以下两点原因。
2000 年前后由于隐私方面的问题而兴起了“Cookie 有害论”，造成了部分网站停止使用 Cookie。
NTT Docomo 的手机浏览器迟迟不支持 Cookie37
 ，因此，在面向手机的应用中，将会话 ID 嵌入 URL 至今还是主流方法。
37
 2009 年夏季以后的机型终于支持 Cookie 了。
由于第三方 Cookie38
 能够追踪用户的访问历史而造成隐私方面的问题，因此便产生了“Cookie 有害论”。但是那次事件以后，浏览器普遍都默认禁用了第三方 Cookie，所以也就没有理由连第一方 Cookie 也都禁用了。而且通常情况下将会话 ID 保存至 Cookie 中是最安全的方法，因此，如果由于厌恶 Cookie 而将会话 ID 嵌入到 URL 中，反而会使个人信息泄漏等事件更易于发生。
38
 第三方 Cookie 不是由正在浏览的网站发行的 Cookie，而是指由横幅广告商或其他网站发行的 Cookie。
而手机方面，由于截至写作此书时大部分手机浏览器还不支持 Cookie，因此完全杜绝向 URL 中嵌入会话 ID 是非常艰难的。该问题将在第 7 章中详细讲述。
对策
为了不使用嵌入在 URL 中的会话 ID，就需要通过设置将会话 ID 保存在 Cookie 中。下面就来看一下各编程语言中将会话 ID 保存至 Cookie 的设置或编程方法。
PHP
PHP 中进行如下设置后，就能将会话 ID 仅保存在 Cookie 中。
[Session]
session.use_cookies = 1
session.use_only_cookies = 1
Java Servlet（J2EE）
J2EE 中将会话 ID 嵌入 URL（J2EE 中称为 URL 重写）需要调用 HttpServletResponse
 接口的 encodeURL
 方法或 encodeRedirectURL
 方法来重写 URL，因此，只要保证程序中没有调用的相关方法，会话 ID 就不会被嵌入到 URL。
ASP.NET
ASP.NET 中默认将会话 ID 保存至 Cookie 中，但通过设置 web.config 也能采用将会话 ID 嵌入 URL 的方式。新生成 web.config 时可以不做任何操作，但如果要更改既有网站的设置，就需要进行以下设置将会话 ID 保存至 Cookie。
4.6.4 固定会话 ID
概要
会话劫持的另一种攻击手段为从外部挟持会话 ID，这被称为会话固定攻击（Session Fixation Attack）。
会话固定攻击的流程如下。
1. 取得会话 ID
2. 强行将步骤 1 中的会话 ID 交给被害人
3. 被害人登录攻击目标 Web 应用
4. 攻击者使用该会话 ID 成功进入目标应用
会话固定攻击造成的影响同窃取会话 ID 一样，即通过伪装用户导致信息泄漏，以及使用被害人的权限恶意使用应用中的功能，如发布、更改或删除数据等。
应对会话固定攻击时，由于想要彻底杜绝上述的步骤 2 非常困难，因此普遍采用在用户登录时更换其会话 ID 的方法，这样就可以使攻击者无从得知用户登录后的会话 ID。
固定会话 ID 所导致的安全隐患总览
攻击手段与影响
接下来我们将通过示例脚本来解说会话固定攻击的方法与影响。
示例脚本介绍
为了方便会话固定攻击的实施，该示例脚本通过设置 .htaccess 使会话 ID 同时保存在了 Cookie 和 URL 中。具体设置如下。
代码清单 /463/.htaccess
php_flag session.use_cookies On
php_flag session.use_only_cookies Off
php_flag session.use_trans_sid On
示例脚本为精简后的认证页面和个人信息显示页面。页面构成如下。
用户名输入页面
认证页面（演示中不确认密码）
个人信息显示页面（显示用户名）
脚本的代码如下。
代码清单 /463/46-010.php
    用户名 :
代码清单 /463/46-011.php
     登录成功 
     个人信息 
代码清单 /463/46-012.php
    当前用户名 :
该示例脚本在正常情况下的页面跳转如下所示。
图 4-54 示例页面跳转
会话固定攻击解说
下面我们来尝试攻击该示例脚本。攻击者使用如下 URL 将应用的用户诱导至登录页面。进行此操作前需要先清空 Cookie，因此请重启浏览器。
http://example.jp/463/46-010.php?PHPSESSID=ABC
下图为用户无意中点击恶意链接后跳转至的登录页面，可以看出用户在页面上输入了用户名（此处为 tanaka）。然后用户点击登录按钮后，认证就将在会话 ID 被固定的状态下进行。
图 4-55 在通过恶意 URL 跳转至的登录页面进行登录
这时，PHPSESSIS=ABC 的会话 ID 生效，用户信息就将被存储在此会话中。攻击者在受害用户进行登录时即可伺机使用如下 URL 访问被害人的个人信息。
http://example.jp/463/46-012.php?PHPSESSID=ABC
攻击者查看被害人的个人信息时的情形如下图所示。为了区别于被害人的页面，这里使用了 Google Chrome 浏览器。
图 4-56 成功查看了被害人的个人信息
由此可见，攻击者能够成功看到被害人的个人信息。
登录前的会话固定攻击
前面我们介绍了针对登录后的页面的会话固定攻击，而如果登录前的页面中使用了会话变量，就同样也会遭受会话固定攻击。这被称为登录前的会话固定攻击。下面我们就通过示例脚本来进行讲解。
示例脚本代码如下。代码中包括个人信息输入、个人信息确认、个人信息注册（演示中不执行注册处理）3 个页面。输入的字符串被保存至会话变量，点击确认画面上的“返回”链接时，用户就能看到刚才在文本框中输入的内容。