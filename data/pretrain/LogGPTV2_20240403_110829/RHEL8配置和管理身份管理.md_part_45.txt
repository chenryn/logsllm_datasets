        2.  将 `Stage User Provisioning`{.literal}
            特权添加到该角色。这个特权提供了添加 stage 用户的能力：
            ``` literallayout
            $ ipa role-add-privilege "System Provisioning" --privileges="Stage User Provisioning"
            ```
        3.  将 provisionator 用户添加到角色中：
            ``` literallayout
            $ ipa role-add-member --users=provisionator "System Provisioning"
            ```
        4.  验证 provisionator 在 IdM 中是否存在：
        :::
        ``` literallayout
        $ ipa user-find provisionator --all --raw
        --------------
        1 user matched
        --------------
          dn: uid=provisionator,cn=users,cn=accounts,dc=idm,dc=example,dc=com
          uid: provisionator
          [...]
        ```
    :::
3.  创建用户 [**activator**]{.strong}，其具有管理用户帐户的特权。
    ::: orderedlist
    1.  添加 activator 用户帐户：
        ``` literallayout
        $ ipa user-add activator --first=activation --last=account --password
        ```
    2.  通过将用户添加到默认的 `User Administrator`{.literal} 角色来授予
        activator 用户所需的特权：
        ``` literallayout
        $ ipa role-add-member --users=activator "User Administrator"
        ```
    :::
4.  为应用程序帐户创建用户组：
    ``` literallayout
    $ ipa group-add application-accounts
    ```
5.  更新组的密码策略。以下策略可防止帐户的密码过期和锁住，但通过要求复杂的密码来弥补潜在的风险：
    ``` literallayout
    $ ipa pwpolicy-add application-accounts --maxlife=10000 --minlife=0 --history=0 --minclasses=4 --minlength=8 --priority=1 --maxfail=0 --failinterval=1 --lockouttime=0
    ```
6.  （可选）验证密码策略是否在 IdM 中存在：
    ``` literallayout
    $ ipa pwpolicy-show application-accounts
      Group: application-accounts
      Max lifetime (days): 10000
      Min lifetime (hours): 0
      History size: 0
    [...]
    ```
7.  将调配和激活帐户添加到应用程序帐户的组中：
    ``` literallayout
    $ ipa group-add-member application-accounts --users={provisionator,activator}
    ```
8.  更改用户帐户的密码：
    ``` literallayout
    $ kpasswd provisionator
    $ kpasswd activator
    ```
    更改密码是必需的，因为新的 IdM 用户密码会立即过期。
:::
::: itemizedlist
**其他资源：**
-   有关添加新用户的详情，请参阅
    [使用命令行管理用户帐户](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_identity_management/index#managing-user-accounts-using-the-command-line_configuring-and-managing-idm){.link}。
-   有关授予用户管理其他用户帐户所需的特权的详情，请参阅
    [向用户委派权限](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html-single/linux_domain_identity_authentication_and_policy_guide/index#delegating-users){.link}。
-   有关管理 IdM 密码策略的详情，请参阅 [定义 IdM
    密码策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_identity_management/index#defining-idm-password-policies_configuring-and-managing-idm){.link}。
:::
:::
::: section
::: titlepage
# []{#configuring-IdM-for-external-provisioning-of-users_configuring-and-managing-idm.html#configuring-automatic-activation-of-IdM-stage-user-accounts_configuring-IdM-for-external-provisioning-of-users}配置 IdM stage用户帐户的自动激活 {.title}
:::
此流程演示了如何为激活 stage
用户创建脚本。系统在指定的时间间隔自动运行脚本。这样可确保新用户帐户被自动激活，并在创建后很快可用。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
该流程假定外部调配系统的所有者已经验证了用户，并且在脚本将它们添加到 IdM
之前，它们不需要在 IdM 端进行额外的验证。
:::
这对于仅在一个 IdM 服务器上启用激活过程足够了。
::: itemizedlist
**先决条件**
-   [**provisionator**]{.strong} 和 [**activator**]{.strong} 帐户在 IdM
    中存在。详情请参阅 [为 stage 用户帐户的自动激活准备 IdM
    帐户](#configuring-IdM-for-external-provisioning-of-users_configuring-and-managing-idm.html#preparing-IdM-accounts-for-automatic-activation-of-stage-user-accounts_configuring-IdM-for-external-provisioning-of-users "为 stage 用户帐户的自动激活准备 IdM 帐户"){.link}。
-   在运行该流程的 IdM 服务器上您需要有 root 权限。
-   以 IdM 管理员身份登录。
-   您信任外部调配系统。
:::
::: orderedlist
**流程**
1.  为激活帐户生成 keytab 文件：
    ``` literallayout
    # ipa-getkeytab -s server.idm.example.com -p "activator" -k /etc/krb5.ipa-activation.keytab
    ```
    如果您要在多个 IdM 服务器上启用激活过程，请仅在一个服务器上生成
    keytab 文件。然后，将 keytab 文件复制到其他服务器上。
2.  创建一个包含以下内容的 `/usr/local/sbin/ipa-activate-all`{.literal}
    脚本来激活所有用户：
    ``` literallayout
    #!/bin/bash
    kinit -k -i activator
    ipa stageuser-find --all --raw | grep "  uid:" | cut -d ":" -f 2 | while read uid; do ipa stageuser-activate ${uid}; done
    ```
3.  编辑 `ipa-activate-all`{.literal} 脚本的权限和所有权来使其可执行：
    ``` literallayout
    # chmod 755 /usr/local/sbin/ipa-activate-all
    # chown root:root /usr/local/sbin/ipa-activate-all
    ```
4.  创建一个 systemd 单元文件
    `/etc/systemd/system/ipa-activate-all.service`{.literal}，内容如下：
    ``` literallayout
    [Unit]
    Description=Scan IdM every minute for any stage users that must be activated
    [Service]
    Environment=KRB5_CLIENT_KTNAME=/etc/krb5.ipa-activation.keytab
    Environment=KRB5CCNAME=FILE:/tmp/krb5cc_ipa-activate-all
    ExecStart=/usr/local/sbin/ipa-activate-all
    ```
5.  创建一个 systemd 计时器
    `/etc/systemd/system/ipa-activate-all.timer`{.literal}，内容如下：
    ``` literallayout
    [Unit]
    Description=Scan IdM every minute for any stage users that must be activated
    [Timer]
    OnBootSec=15min
    OnUnitActiveSec=1min
    [Install]
    WantedBy=multi-user.target
    ```
6.  重新载入新配置：
    ``` literallayout
    # systemctl daemon-reload
    ```
7.  启用 `ipa-activate-all.timer`{.literal}:
    ``` literallayout
    # systemctl enable ipa-activate-all.timer
    ```
8.  启动 `ipa-activate-all.timer`{.literal}:
    ``` literallayout
    # systemctl start ipa-activate-all.timer
    ```
9.  （可选）验证 `ipa-activate-all.timer`{.literal}
    守护进程是否正在运行：
    ``` literallayout
    # systemctl status ipa-activate-all.timer
    ● ipa-activate-all.timer - Scan IdM every minute for any stage users that must be activated
       Loaded: loaded (/etc/systemd/system/ipa-activate-all.timer; enabled; vendor preset: disabled)
       Active: active (waiting) since Wed 2020-06-10 16:34:55 CEST; 15s ago
      Trigger: Wed 2020-06-10 16:35:55 CEST; 44s left
    Jun 10 16:34:55 server.idm.example.com systemd[1]: Started Scan IdM every minute for any stage users that must be activated.
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-IdM-for-external-provisioning-of-users_configuring-and-managing-idm.html#adding-an-IdM-stage-user-defined-in-an-LDIF-file_configuring-IdM-for-external-provisioning-of-users}添加 LDIF 文件中定义的 IdM stage 用户 {.title}
:::
本节描述了外部配置系统的管理员如何访问 IdM LDAP，并使用 LDIF 文件来添加
stage
用户。虽然下例中演示了添加一个单独的用户，但可以以批量模式在一个文件中添加多个用户。
::: itemizedlist
**先决条件**
-   IdM 管理员已为其创建了 [**provisionator**]{.strong}
    帐户及密码。详情请参阅 [为 stage 用户帐户的自动激活准备 IdM
    帐户](#configuring-IdM-for-external-provisioning-of-users_configuring-and-managing-idm.html#preparing-IdM-accounts-for-automatic-activation-of-stage-user-accounts_configuring-IdM-for-external-provisioning-of-users "为 stage 用户帐户的自动激活准备 IdM 帐户"){.link}。
-   作为外部管理员，您知道 [**provisionator**]{.strong} 帐户的密码。
-   您可以从 LDAP 服务器通过 SSH 连接到 IdM 服务器。
-   您可以提供 IdM stage
    用户必须有的最小的属性集来允许正确处理用户生命周期，即：
    ::: itemizedlist
    -   `可区分的名称`{.literal} (dn)
    -   `通用名称`{.literal} (cn)
    -   `姓氏`{.literal} (sn)
    -   `uid`{.literal}
    :::
:::
::: orderedlist
**流程**
1.  在外部服务器上，创建一个包含有关新用户信息的 LDIF 文件：
    ``` literallayout
    dn: uid=stageidmuser,cn=staged users,cn=accounts,cn=provisioning,dc=idm,dc=example,dc=com
    changetype: add
    objectClass: top
    objectClass: inetorgperson
    uid: stageidmuser
    sn: surname
    givenName: first_name
    cn: full_name
    ```
2.  将 LDIF 文件从外部服务器传到 IdM 服务器：
    ``` literallayout
    $ scp add-stageidmuser.ldif PI:EMAIL:/provisionator/
    Password:
    add-stageidmuser.ldif                                                                                          100%  364   217.6KB/s   00:00
    ```
3.  使用 `SSH`{.literal} 协议，以 [**provisionator**]{.strong}
    身份连接到 IdM 服务器：
    ``` literallayout
    $ ssh PI:EMAIL
    Password:
    [provisionator@server ~]$
    ```
4.  在 IdM 服务器上，获取 provisionator 帐户的 Kerberos
    票据授予票(TGT)：
    ``` literallayout
    [provisionator@server ~]$ kinit provisionator
    ```
5.  输入 `ldapadd`{.literal} 命令，以及 -f 选项和 LDIF 文件的名称。指定
    IdM 服务器的名称和端口号：
    ``` literallayout
    ~]$ ldapadd -h server.idm.example.com -p 389 -f  add-stageidmuser.ldif
    SASL/GSSAPI authentication started
    SASL username: PI:EMAIL
    SASL SSF: 256
    SASL data security layer installed.
    adding the entry "uid=stageidmuser,cn=staged users,cn=accounts,cn=provisioning,dc=idm,dc=example,dc=com"
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-IdM-for-external-provisioning-of-users_configuring-and-managing-idm.html#adding-an-IdM-stage-user-directly-from-the-CLI-using-ldapmodify_configuring-IdM-for-external-provisioning-of-users}使用 ldapmodify 直接从 CLI 添加 IdM stage 用户 {.title}
:::
本节描述了外部调配系统的管理员如何访问身份管理(IdM)LDAP，并使用
`ldapmodify`{.literal} 工具添加 stage 用户。
::: itemizedlist
**先决条件**
-   IdM 管理员已为其创建了 [**provisionator**]{.strong}
    帐户和密码。详情请参阅 [为 stage 用户帐户的自动激活准备 IdM
    帐户](#configuring-IdM-for-external-provisioning-of-users_configuring-and-managing-idm.html#preparing-IdM-accounts-for-automatic-activation-of-stage-user-accounts_configuring-IdM-for-external-provisioning-of-users "为 stage 用户帐户的自动激活准备 IdM 帐户"){.link}。
-   作为外部管理员，您知道 [**provisionator**]{.strong} 帐户的密码。
-   您可以从 LDAP 服务器通过 SSH 连接到 IdM 服务器。
-   您可以提供 IdM stage
    用户必须有的最小的属性集来允许正确处理用户生命周期，即：
    ::: itemizedlist
    -   `可区分的名称`{.literal} (dn)
    -   `通用名称`{.literal} (cn)
    -   `姓氏`{.literal} (sn)
    -   `uid`{.literal}
    :::
:::
::: orderedlist
**流程**
1.  使用您的 IdM 身份和凭证，通过 `SSH`{.literal} 协议连接到 IdM
    服务器：
    ``` literallayout
    $ ssh PI:EMAIL
    Password:
    [provisionator@server ~]$
    ```
2.  获取 [**provisionator**]{.strong} 帐户的 TGT，这是具有添加新 stage
    用户角色的 IdM 用户：
    ``` literallayout
    $ kinit provisionator
    ```
3.  输入 `ldapmodify`{.literal} 命令，并将通用安全服务
    API(GSSAPI)指定为用于身份验证的简单身份验证和安全层(SASL)机制。指定