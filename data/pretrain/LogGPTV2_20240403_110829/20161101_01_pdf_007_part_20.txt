Recheck Cond: (id > 9999)
-> Bitmap Index Scan on tbl1_pkey (cost=0.00..111.29 rows=10001 width=0)
Index Cond: (id > 9999)
(11 rows)
关闭hash连接后, 选择了合并连接. 合并连接的tbl1表选择了位图扫描和排序节点.
PostgreSQL 数据访问方法开关
digoal=# set enable_sort=off;
SET
digoal=# explain select tbl.*,tbl1.* from tbl, tbl1 where tbl.id=tbl1.id and tbl1.id>9999;
QUERY PLAN
------------------------------------------------------------------------------
Nested Loop (cost=0.30..43415.50 rows=5000 width=90)
-> Seq Scan on tbl (cost=0.00..124.00 rows=10000 width=45)
-> Bitmap Heap Scan on tbl1 (cost=0.30..4.32 rows=1 width=45)
Recheck Cond: ((id = tbl.id) AND (id > 9999))
-> Bitmap Index Scan on tbl1_pkey (cost=0.00..0.30 rows=1 width=0)
Index Cond: ((id = tbl.id) AND (id > 9999))
(6 rows)
关闭排序后, 选择了嵌套循环.
PostgreSQL 数据访问方法开关
digoal=# \q
digoal=# set enable_mergejoin=off;
SET
digoal=# explain select tbl.*,tbl1.* from tbl, tbl1 where tbl.id=tbl1.id and tbl1.id>9999;
QUERY PLAN
-----------------------------------------------------------------------------------
Hash Join (cost=249.29..687.32 rows=5000 width=90)
Hash Cond: (tbl1.id = tbl.id)
-> Index Scan using tbl1_pkey on tbl1 (cost=0.29..238.30 rows=10001 width=45)
Index Cond: (id > 9999)
-> Hash (cost=124.00..124.00 rows=10000 width=45)
-> Seq Scan on tbl (cost=0.00..124.00 rows=10000 width=45)
(6 rows)
PostgreSQL 数据访问方法开关
digoal=# set enable_hashjoin=off;
SET
digoal=# explain select tbl.*,tbl1.* from tbl, tbl1 where tbl.id=tbl1.id and tbl1.id>9999;
QUERY PLAN
-----------------------------------------------------------------------------------
Nested Loop (cost=0.57..3520.62 rows=5000 width=90)
-> Index Scan using tbl1_pkey on tbl1 (cost=0.29..238.30 rows=10001 width=45)
Index Cond: (id > 9999)
-> Index Scan using idx_tbl_id on tbl (cost=0.29..0.32 rows=1 width=45)
Index Cond: (id = tbl1.id)
(5 rows)
PostgreSQL 数据访问方法开关
digoal=# set enable_nestloop=off;
SET
digoal=# explain select tbl.*,tbl1.* from tbl, tbl1 where tbl.id=tbl1.id and tbl1.id>9999;
QUERY PLAN
-----------------------------------------------------------------------------------
Nested Loop (cost=10000000000.57..10000003520.62 rows=5000 width=90)
-> Index Scan using tbl1_pkey on tbl1 (cost=0.29..238.30 rows=10001 width=45)
Index Cond: (id > 9999)
-> Index Scan using idx_tbl_id on tbl (cost=0.29..0.32 rows=1 width=45)
Index Cond: (id = tbl1.id)
(5 rows)
所有的连接方法都关闭后, 选择了nestloop关联.
PostgreSQL 数据访问方法开关
digoal=# set enable_indexscan=off;
SET
digoal=# set enable_bitmapscan=off;
SET
digoal=# explain select tbl.*,tbl1.* from tbl, tbl1 where tbl.id=tbl1.id and tbl1.id>9999;
QUERY PLAN
-----------------------------------------------------------------------
Nested Loop (cost=10000000000.00..10001500596.00 rows=5000 width=90)
Join Filter: (tbl.id = tbl1.id)
-> Seq Scan on tbl (cost=0.00..124.00 rows=10000 width=45)
-> Materialize (cost=0.00..347.00 rows=10001 width=45)
-> Seq Scan on tbl1 (cost=0.00..297.00 rows=10001 width=45)
Filter: (id > 9999)
(6 rows)
关闭索引扫描和位图扫描后, 嵌套循环连接的内部节点选择了物化.
PostgreSQL 数据访问方法开关
digoal=# set enable_material=off;
SET
digoal=# explain select tbl.*,tbl1.* from tbl, tbl1 where tbl.id=tbl1.id and tbl1.id>9999;
QUERY PLAN
-----------------------------------------------------------------------
Nested Loop (cost=10000000000.00..10002490546.00 rows=5000 width=90)
Join Filter: (tbl.id = tbl1.id)
-> Seq Scan on tbl1 (cost=0.00..297.00 rows=10001 width=45)
Filter: (id > 9999)
-> Seq Scan on tbl (cost=0.00..124.00 rows=10000 width=45)
(5 rows)
关闭物化, 嵌套循环连接的内部节点使用全表扫描.
提升子查询关联等级配置参数
 参数 : from_collapse_limit 代码 : src/backend/optimizer/plan/initsplan.c
 foreach(l, f->fromlist)
 {
 Relids sub_qualscope;
 List *sub_joinlist;
 int sub_members;
 sub_joinlist = deconstruct_recurse(root, lfirst(l),
 below_outer_join,
 &sub_qualscope,
 inner_join_rels,
 &child_postponed_quals);
 *qualscope = bms_add_members(*qualscope, sub_qualscope);
 sub_members = list_length(sub_joinlist);
 remaining--;
 if (sub_members jointype == JOIN_FULL)
 {
 /* force the join order exactly at this node */
 joinlist = list_make1(list_make2(leftjoinlist, rightjoinlist));
 }
 else if (list_length(leftjoinlist) + list_length(rightjoinlist)  Nested Loop (cost=1.92..60.36 rows=1 width=69)
 -> Nested Loop (cost=1.49..51.90 rows=1 width=69)
 -> Nested Loop (cost=1.19..43.57 rows=1 width=69)
 -> Nested Loop (cost=0.89..35.25 rows=1 width=69)
 -> Nested Loop (cost=0.59..26.93 rows=1 width=36)
 -> Nested Loop (cost=0.31..18.61 rows=1 width=36)
 -> Nested Loop (cost=0.16..10.44 rows=1 width=36)
 -> Index Scan using tbl_join_1_pkey on tbl_join_1 t1 (cost=0.16..8.18 rows=1 width=36)
 Index Cond: (id = 10000)
 -> Seq Scan on tbl_join_2 t2 (cost=0.00..2.25 rows=1 width=4)
 Filter: (id = 10000)
 -> Index Only Scan using tbl_join_3_pkey on tbl_join_3 t3 (cost=0.15..8.17 rows=1 width=4)
 Index Cond: (id = 10000)
指定表的关联顺序配置参数
 -> Index Only Scan using tbl_join_4_pkey on tbl_join_4 t4 (cost=0.29..8.30 rows=1 width=4)
 Index Cond: (id = 10000)
 -> Index Scan using tbl_join_5_pkey on tbl_join_5 t5 (cost=0.29..8.31 rows=1 width=37)
 Index Cond: (id = 10000)
 -> Index Only Scan using tbl_join_6_pkey on tbl_join_6 t6 (cost=0.30..8.32 rows=1 width=4)
 Index Cond: (id = 10000)
 -> Index Only Scan using tbl_join_7_pkey on tbl_join_7 t7 (cost=0.30..8.32 rows=1 width=4)
 Index Cond: (id = 10000)
 -> Index Only Scan using tbl_join_8_pkey on tbl_join_8 t8 (cost=0.43..8.45 rows=1 width=4)
 Index Cond: (id = 10000)
 -> Index Only Scan using tbl_join_9_pkey on tbl_join_9 t9 (cost=0.43..8.45 rows=1 width=4)
 Index Cond: (id = 10000)
 (26 rows)