digoal=# select * from test for share;  
 id | info   
----+------  
  2 |   
  1 | test  
(2 rows)  
```  
SESSION B :   
```  
digoal=# select pg_backend_pid();  
 pg_backend_pid   
----------------  
          10102  
(1 row)  
digoal=# begin;  
BEGIN  
digoal=# select * from test for share;  
 id | info   
----+------  
  2 |   
  1 | test  
(2 rows)  
```  
SESSION C GDB :   
```  
[root@db-172-16-3-150 ~]# gdb  
(gdb) attach 12822  
Attaching to process 12822  
(gdb) b LockTuple  
Breakpoint 1 at 0x65d240: file lmgr.c, line 388.  
(gdb) c  
Continuing.  
```  
SESSION C :   
```  
digoal=# select pg_backend_pid();  
 pg_backend_pid   
----------------  
          12822  
(1 row)  
digoal=# begin;  
BEGIN  
digoal=# select * from test for update;  
```  
SESSION C GDB :   
```  
Breakpoint 1, LockTuple (relation=0x2b7faf660578, tid=0x7ffff88ddce4, lockmode=8) at lmgr.c:388  
388     {  
(gdb) n  
391             SET_LOCKTAG_TUPLE(tag,  
(gdb) p tag  
$1 = {locktag_field1 = 8, locktag_field2 = 0, locktag_field3 = 2, locktag_field4 = 0, locktag_type = 0 '\000',   
  locktag_lockmethodid = 0 '\000'}  
(gdb) n  
388     {  
(gdb)   
391             SET_LOCKTAG_TUPLE(tag,  
(gdb) p tag  
$2 = {locktag_field1 = 8, locktag_field2 = 0, locktag_field3 = 2, locktag_field4 = 0, locktag_type = 0 '\000',   
  locktag_lockmethodid = 0 '\000'}  
(gdb) n  
397             (void) LockAcquire(&tag, lockmode, false, false);  
(gdb) p lockmode  
$3 = 8  
(gdb) p tag  
$4 = {locktag_field1 = 16384, locktag_field2 = 16742, locktag_field3 = 0, locktag_field4 = 0, locktag_type = 0 '\000',   
  locktag_lockmethodid = 0 '\000'}  
(gdb) n  
391             SET_LOCKTAG_TUPLE(tag,  
(gdb)   
397             (void) LockAcquire(&tag, lockmode, false, false);  
(gdb)   
398     }  
(gdb)   
heap_lock_tuple (relation=0x2b7faf660578, tuple=0x7ffff88ddce0, cid=0, mode=LockTupleExclusive, nowait=0 '\000',   
    follow_updates=1 '\001', buffer=0x7ffff88ddd18, hufd=0x7ffff88ddd00) at heapam.c:4011  
4011                    if (mode == LockTupleKeyShare)  
(gdb)   
4085                    else if (mode == LockTupleShare)  
(gdb)   
4106                    else if (mode == LockTupleNoKeyExclusive)  
(gdb)   
4192                            if (infomask & HEAP_XMAX_IS_MULTI)  
(gdb)   
4194                                    MultiXactStatus status = get_mxact_status_for_lock(mode, false);  
(gdb)   
4197                                    if (status >= MultiXactStatusNoKeyUpdate)  
(gdb)   
4201                                    if (nowait)  
(gdb)   
4211                                            MultiXactIdWait((MultiXactId) xwait, status, NULL, infomask);  
(gdb) p xwait  
$5 = 28  
-- 因为SESSION A和SESSION B共享锁住了2行, 所以锁信息在pg_multixact中, 因此这里跟踪到的是MultiXactIdWait.  
-- 如果是单事务锁, 这里应该跟踪到XactLockTableWait.  
(gdb) n  
... 等待锁.  
```  
SESSION X :   
```  
digoal=# select * from pgrowlocks('test');  
 locked_row | locker | multi |    xids     |     modes     |     pids        
------------+--------+-------+-------------+---------------+---------------  
 (0,2)      |     28 | t     | {1785,1786} | {Share,Share} | {10099,10102}  
 (0,3)      |     28 | t     | {1785,1786} | {Share,Share} | {10099,10102}  
(2 rows)  
digoal=# select * from heap_page_items(get_raw_page('test', 0));  
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------  
  1 |   8160 |        1 |     28 |      2 |     27 |        0 | (0,3)  |       16385 |       4416 |     24 |        |        
  2 |   8128 |        1 |     28 |      2 |     28 |        0 | (0,2)  |           1 |       4560 |     24 |        |        
  3 |   8088 |        1 |     33 |   1783 |     28 |        0 | (0,3)  |       32770 |      12754 |     24 |        |        
(3 rows)  
```  
gdb跟踪到的xwait就是这里的t_max : 28.  
SESSION D :   
```  
digoal=# select pg_backend_pid();  
 pg_backend_pid   
----------------  
          14886  
(1 row)  
```  
SESSION D GDB :   
```  
(gdb) attach 14886  
Attaching to program: /home/pgdev/pgsql9.3/bin/postgres, process 14886  
(gdb) b LockTuple  
Note: breakpoint 1 also set at pc 0x65d240.  
Breakpoint 2 at 0x65d240: file lmgr.c, line 388.  
(gdb) c  
Continuing.  
```  
SESSION D :   
```  
digoal=# begin;  
BEGIN  
digoal=# select * from test for share;  
```  
SESSION D GDB :   
```  
Breakpoint 1, LockTuple (relation=0x2b7faf643e30, tid=0x7ffff88ddce4, lockmode=2) at lmgr.c:388  
388     {  
(gdb) n  
391             SET_LOCKTAG_TUPLE(tag,  
(gdb)   
388     {  
(gdb)   
391             SET_LOCKTAG_TUPLE(tag,  
(gdb)   
397             (void) LockAcquire(&tag, lockmode, false, false);  
(gdb)   
391             SET_LOCKTAG_TUPLE(tag,  
(gdb)   
397             (void) LockAcquire(&tag, lockmode, false, false);  
(gdb)   
等待, 未跟踪到MultiXactIdWait.   
那这里其实是进入了LockAcquireExtended函数的这个逻辑  
00900     /*  
00901      * If lock requested conflicts with locks requested by waiters, must join  
00902      * wait queue.  Otherwise, check for conflict with already-held locks.  
00903      * (That's last because most complex check.)  
00904      */  
00905     if (lockMethodTable->conflictTab[lockmode] & lock->waitMask)  
00906         status = STATUS_FOUND;  
00907     else  
00908         status = LockCheckConflicts(lockMethodTable, lockmode,  
00909                                     lock, proclock, MyProc);  
```  
另一种方法是使用开发参数进行跟踪 :   
SESSION C :   
```  
digoal=# \set VERBOSITY verbose  
digoal=# set trace_locks = on;  
SET  
digoal=# set trace_userlocks = on;  
SET  
digoal=# set client_min_messages=debug5;  
DEBUG:  00000: CommitTransactionCommand  
LOCATION:  finish_xact_command, postgres.c:2409  
DEBUG:  00000: CommitTransaction  
LOCATION:  ShowTransactionState, xact.c:4388  
DEBUG:  00000: name: unnamed; blockState:       STARTED; state: INPROGR, xid/subid/cid: 0/1/0, nestlvl: 1, children:   
LOCATION:  ShowTransactionStateRec, xact.c:4426  
LOG:  00000: LockReleaseAll: lockmethod=1  
LOCATION:  LockReleaseAll, lock.c:1941  
LOG:  00000: LockReleaseAll done  
LOCATION:  LockReleaseAll, lock.c:2164  
LOG:  00000: LockReleaseAll: lockmethod=2  
LOCATION:  LockReleaseAll, lock.c:1941  
LOG:  00000: LockReleaseAll done  
LOCATION:  LockReleaseAll, lock.c:2164  
SET  
digoal=# begin;  
DEBUG:  00000: StartTransactionCommand  
LOCATION:  start_xact_command, postgres.c:2385  
DEBUG:  00000: StartTransaction  
LOCATION:  ShowTransactionState, xact.c:4388  
DEBUG:  00000: name: unnamed; blockState:       DEFAULT; state: INPROGR, xid/subid/cid: 0/1/0, nestlvl: 1, children:   
LOCATION:  ShowTransactionStateRec, xact.c:4426  
DEBUG:  00000: ProcessUtility  
LOCATION:  PortalRunUtility, pquery.c:1154  
DEBUG:  00000: CommitTransactionCommand  
LOCATION:  finish_xact_command, postgres.c:2409  
BEGIN  
digoal=# select * from test for update;  
DEBUG:  00000: StartTransactionCommand  
LOCATION:  start_xact_command, postgres.c:2385  
LOG:  00000: LockAcquire: lock [16384,16742] RowShareLock  
LINE 1: select * from test for update;  
                      ^  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockAcquire: lock [16384,16742] AccessShareLock  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockRelease: lock [16384,16742] AccessShareLock  
LOCATION:  LockRelease, lock.c:1751  
LOG:  00000: LockAcquire: lock [16384,16745] AccessShareLock  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockAcquire: lock [16384,16742] RowShareLock  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockAcquire: lock [16384,16742] AccessExclusiveLock  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockAcquire: new: lock(0x2b7faf13b898) id(16384,16742,0,2,3,1) grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0 wait(0) type(AccessExclusiveLock)  
LOCATION:  LOCK_PRINT, lock.c:318  
LOG:  00000: LockAcquire: new: proclock(0x2b7faf1c12c8) lock(0x2b7faf13b898) method(1) proc(0x2b7faf3da6a0) hold(0)  
LOCATION:  PROCLOCK_PRINT, lock.c:330  
LOG:  00000: LockCheckConflicts: no conflict: proclock(0x2b7faf1c12c8) lock(0x2b7faf13b898) method(1) proc(0x2b7faf3da6a0) hold(0)  
LOCATION:  PROCLOCK_PRINT, lock.c:330  
-- 先检测与已经存在的请求锁的队列中的锁是否有冲突. 有冲突则加入等待队列. 没有冲突则与已经HOLD的锁检测冲突性.如果发现冲突则加入队列中.  
-- 这就能解释本文的第二个问题了.  
00900     /*  
00901      * If lock requested conflicts with locks requested by waiters, must join  
00902      * wait queue.  Otherwise, check for conflict with already-held locks.  
00903      * (That's last because most complex check.)  
00904      */  
LOG:  00000: GrantLock: lock(0x2b7faf13b898) id(16384,16742,0,2,3,1) grantMask(100) req(0,0,0,0,0,0,0)=1 grant(0,0,0,0,0,0,0)=1 wait(0) type(AccessExclusiveLock)  
LOCATION:  LOCK_PRINT, lock.c:318  
```  
SESSION D :   
```  
digoal=# set trace_locks = on;  
SET  
digoal=# set trace_userlocks = on;  
SET  
digoal=# \set VERBOSITY verbose  
digoal=# set client_min_messages=debug5;  
DEBUG:  00000: CommitTransactionCommand  
LOCATION:  finish_xact_command, postgres.c:2409  
DEBUG:  00000: CommitTransaction  
LOCATION:  ShowTransactionState, xact.c:4388  
DEBUG:  00000: name: unnamed; blockState:       STARTED; state: INPROGR, xid/subid/cid: 0/1/0, nestlvl: 1, children:   
LOCATION:  ShowTransactionStateRec, xact.c:4426  
LOG:  00000: LockReleaseAll: lockmethod=1  
LOCATION:  LockReleaseAll, lock.c:1941  
LOG:  00000: LockReleaseAll done  
LOCATION:  LockReleaseAll, lock.c:2164  
LOG:  00000: LockReleaseAll: lockmethod=2  
LOCATION:  LockReleaseAll, lock.c:1941  
LOG:  00000: LockReleaseAll done  
LOCATION:  LockReleaseAll, lock.c:2164  
SET  
digoal=# begin;  
DEBUG:  00000: StartTransactionCommand  
LOCATION:  start_xact_command, postgres.c:2385  
DEBUG:  00000: StartTransaction  
LOCATION:  ShowTransactionState, xact.c:4388  
DEBUG:  00000: name: unnamed; blockState:       DEFAULT; state: INPROGR, xid/subid/cid: 0/1/0, nestlvl: 1, children:   
LOCATION:  ShowTransactionStateRec, xact.c:4426  
DEBUG:  00000: ProcessUtility  
LOCATION:  PortalRunUtility, pquery.c:1154  
DEBUG:  00000: CommitTransactionCommand  
LOCATION:  finish_xact_command, postgres.c:2409  
BEGIN  
digoal=# select * from test for share;  
DEBUG:  00000: StartTransactionCommand  
LOCATION:  start_xact_command, postgres.c:2385  
LOG:  00000: LockAcquire: lock [16384,16742] RowShareLock  
LINE 1: select * from test for share;  
                      ^  
LOCATION:  LockAcquireExtended, lock.c:729  
```  
对应代码:  
```  
00725 #ifdef LOCK_DEBUG  
00726     if (LOCK_DEBUG_ENABLED(locktag))  
00727         elog(LOG, "LockAcquire: lock [%u,%u] %s",  
00728              locktag->locktag_field1, locktag->locktag_field2,  
00729              lockMethodTable->lockModeNames[lockmode]);  
00730 #endif  
这里的16384是dbid, 16742是relid, 代码如下 :   
00240 #define SET_LOCKTAG_TUPLE(locktag,dboid,reloid,blocknum,offnum) \  
00241     ((locktag).locktag_field1 = (dboid), \  
00242      (locktag).locktag_field2 = (reloid), \  
00243      (locktag).locktag_field3 = (blocknum), \  
00244      (locktag).locktag_field4 = (offnum), \  
00245      (locktag).locktag_type = LOCKTAG_TUPLE, \  
00246      (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)  
```  
验证如下 :  
```  
pgdev@db-172-16-3-150-> psql  