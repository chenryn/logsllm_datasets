out, as it still fails to reach T1 before reaching T2. Com-
bining both, the seed distance is calculated as 1 + max.
• Seed C. Since it reaches T1 before T2, the distance of
%free is 0. Meanwhile, since it deflects T2 by one basic
block at e, the distance of %use is 1. Combining both,
the seed distance is 1.
Notice that CDGF properly gives a shorter seed distance to
a more desirable seed, namely C = n2
n1 > n2
n1 
cond "none"
CONSTRAINT %trans:
site 
cond "none"
CONSTRAINT %crash:
site 
cond "none"
Figure 6: nT constraint template.
Dn = min(ccon, Dn
2. When last constraint remains:
M).
Once all constraints are satisfied except the last one, the
total distance is solely determined by the distance of the last
constraint, because (N( ⃗B∗)− τn) = (M− M) = 0.
3. When all constraints satisfied:
Dn = 0.
Similar to the distances defined so far, the total distance gets
zero as both of the terms are reduced to zero. Inversely, the
zero total distance indicates that all constraints are satisfied
in the specified order.
Finally, we define the total distance of a seed as the mini-
mum total distance throughout its execution. Formally, if s is
a seed that generates the basic block trace ⃗B, the total distance
of a seed D(s) is defined as D(s) = min(Dn),∀n.
5 Constraint Generation
The basic approach of constraint generation is, given an addi-
tional information source, finding proper target sites and data
conditions to fill out a pre-defined constraint template. We de-
sign constraint generation for two such sources: crash dumps
from memory error detectors [39, 41] and patch changelogs.
5.1 Crash Dump
Constraint generation for crash dumps refers to the bug types
to choose an appropriate template. We compose three tem-
plates that can support seven bug types in total. In particular,
the nT template with multiple target sites handles use-after-
free, double-free, and use-of-uninitialized-value (§5.1.1), the
2T+D template with two target sites and data conditions han-
dles stack-buffer-overflow and heap-buffer-overflow (§5.1.2),
and the 1T+D template with one target site and data conditions
handles assertion-failure and divide-by-zero (§5.1.3).
5.1.1 Multiple Target Sites (nT)
Figure 6 shows the nT constraint template with multiple target
sites. The template is useful when a crash dump informs
the target sites required to be reached in order. The bracket-
enclosed placeholders are replaced to the program location
found at the top of the corresponding stack dumps.
USENIX Association
30th USENIX Security Symposium    3565
CONSTRAINT %alloc:
site 
cond "none"
CONSTRAINT %access:
site 
assert " %alloc .ret 
cond ""
Figure 8: 1T+D constraint template.
Avoiding wrapper functions. To make the target sites more
representative, we avoid choosing a target site inside memory
wrappers by checking if the name of the stack frame caller
contains the keywords such as "alloc", "free", or "mem". If a
location is inside a memory wrapper, we take the location of
lower stack frames instead.
Constraint description. The template specifies multiple tar-
get sites that are required to be reached in the specified order
to reproduce the crash. The %cause constraint represents
where the cause is generated. The %trans constraint rep-
resents where the cause is transferred. Finally, the %crash
constraint represents where the crash occurs.
Corresponding bug types. Use-after-free, double-free, and
use-of-uninitialized-value correspond to the nT constraint tem-
plate. Use-after-free and double-free bugs set 
and  to where an address is freed and used,
and do not use the %trans constraint. Use-of-uninitialized-
value sets  and  to where the
uninitialized value is created and used, and set 
to where it is transferred if the uninitialized value is mediated
by multiple variables.
5.1.2 Two Target Sites with Data Conditions (2T+D)
Figure 7 shows the 2T+D constraint template with two target
sites and data conditions. The illustrated data conditions are
for buffer-overflow bugs, where endaddr denotes the end of
the allocated memory, namely ret + size. Similar to the
nT template, the bracket-enclosed placeholders are replaced
to the program location at the top of the corresponding stack
dumps. We capture the variables inside of memory wrappers,
even if the target sites are set to outside of them.
Constraint description. The template specifies two target
sites and data conditions to reproduce buffer-overflow. The
%alloc constraint first guides the program to where a buffer
is allocated. When  is reached, it captures
the begin and end address of the allocated buffer as ret and
endaddr. Next, the %access constraint guides to where the
buffer is accessed. When  is reached, the
assert condition first identifies whether the accessed address
(%access.addr) belongs to the buffer allocated by . If it does, to increase the likelihood of overflow, the
cond condition drives the accessed address to the boundary.
Notice that the data conditions are intended to drive buffer-
overflow, not to detect one; while the likelihood of buffer-
overflow is increased by both data conditions (i.e., assert
and cond), the actual buffer-overflow will be detected by the
memory error detectors [39, 41] regardless of whether both
data conditions are satisfied.
Corresponding bug types. Heap-buffer-overflow and stack-
buffer-overflow correspond to the 2T+D constraint template. In
both bugs,  is set to where a buffer is allocated
and  to where a buffer is accessed out of
bound. The template currently does not support global-buffer-
overflow and buffer-underflow. See §8 for details.
5.1.3 One Target Site with Data Conditions (1T+D)
Figure 8 shows the 1T+D constraint template with one target
site and data conditions. The template is useful when a crash
dump does not reveal multiple target sites, but the bug type
suggests some definite buggy conditions.
Constraint description. The template specifies one target
site that is required to be reached and data conditions that
needs to be satisfied at the target site. The %constr con-
straint specifies such a target site () and data
conditions ().
Corresponding bug types. Divide-by-zero and assertion-
failure correspond to the 1T+D template. Divide-by-zero
sets  to the crashing division expression and
 to %constr.rhs == 0, where rhs indicates
the divisor operand. Assertion-failure sets 
to the failed assertion check, and  to the negated
assertion condition.
5.2 Patch Changelog
Constraint generation for patch changelogs uses the 1T+D
constraint template shown in Figure 8. Since the patch is
supposed to fix the cause of the crash, we utilize the changed
source locations by assuming that they signify the cause.