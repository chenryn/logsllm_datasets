## Page 236
218
逆向工程权威指南（上册）
指令的4字节opcode。因为IT指令的高16位的opcode是0xBF，所以我们应当使用的Linux分析指令是：
1st*snsax b; 1oad D0 (a) into X0
.L76
1dr
[e*de]*ox
b
.L74
 ab的情况下，变量a的值将传递到X0寄存器：否则，变量b的值将传递给X0寄存器。最终，
X0的值传递给D0寄存器，成为函数的返回值。
练习题
请在不使用新指令（包括FCSEL指令）的前提下，优化本例的程序。
Optimizing GCC (Linaro) 4.9float
在把参数的数据类型从double 替换为 float 之后，再进行编译：
float f_max (float a, float b)
1(a>b)
return a1
return b;
; S0 - a, S1 - b
f_max:
nov result in S0
ret
程序使用了S-字头的寄存器，而不再使用D-字头寄存器。这是因为S-字头寄存器的32位（即64位D
字头寄存器的低32位）已经满足单精度浮点的存储需要了。
17.7.4 MIPS
即使是当今最受欢迎的MIPS 处理器，其协作处理器也只能设置一个条件标识位。供CPU访问。早期
的MIPS处理器只有一个标识条件位（即FCCO），现已逐步扩展到了8个（即FCC7~FCCO）。这些条件标
识位位于浮点条件码寄存器（FCCR）。
指令清单 17.23Optimizing GCC 4.4.5 (IDA)
d_sax:
 set FPU condition bit if $f14=a)
2 set return value to *b*:
locret_14:
mov.d
or
$at, $zero  branch delay slot, NOP
e天s
“C.LT.D”是比较两个数值的指令。在它的名称中，“LT”表示条件为“LessThan”，“D”表示其数据
类型为double。它将根据比较的结果设置、或清除FCCO条件位。
“BC1T”检测FCC0位，如果该标识位被置位（值为1）则进行跳转。“T”是True的缩写，表示
该指令的运行条件是“标识位被置位（True）”。实际上确实存在对应的BCIF指令，在判定条件为False
---
## Page 239
第17章FPU
221
的时候进行跳转。
无论上述条件转移指令是否发生跳转，它都决定了SFO的最终取值。
17.8
栈、计算器及逆波兰表示法
现在，我们可以理解部分旧式计算器采取逆波兰表示法的道理了。例如，在计算“12+34”时，这种
计算器要依次按下“12”、“34”和加号。这种计算器采用了堆栈机器（stackmachine）的构造。逆波兰记
法不需要括号来标识操作符的优先级。所以，在计算复杂表达式时，这种构造计算器的操作十分简单。
17.9x64
有关x86-64系统处理浮点数的方法，请参见本书第27章。
17.10
0练习题
17.10.1题目1
请去除17.7.1节所示例子中的FXCH指令，进行改写井进行测试。
17.10.2题目2
请描述下述代码的功能。
指令清单 17.24Optimizing MSVC 2010
30000000000000000000000000000010000
S：
_a1s = 8
:s1ze=8
_a3$ = 24
_a2$ = 16
:8ize=8
_a5$ = 40
_a4$ - 32
781ze-8
7size*8
_.f
PROC
f1d
QWORD PTR _a2$[esp-4]
QWORD PTR _a1$[esp4]
fadd
fadd
QWORD PTR _a3$ [esp4]
fadd
QWORD PTR _a4$[esp-4]
fadd
QWORD PTR _a5$[esp-4]
ATP
QWORD PTB __rea184014000000000000
ret
ENDP
_f
指令清单 17.25Non-optimizing Keil 6/2013 (Thumb mode/compiled for Cortex-R4F CPU)
f PROC
VADD.F64 d0, d0, d1
VM0V.F64 d1,#5.00000000
VADD.F64 d0, d0, d2
VADD,F64 d0, d0, d3
VDIV.F64 d0, d2, d1
VADD, F64 d2, d0, d4
① Reverse Polish notation, iff步 见 https://en.wikipedia.org/wilki/Reverse_Polish_notation.
---
## Page 240
222
逆向工程权威指南（上册）
BX
ENDP
指令清单17.26Optimizing GCC 4.9(ARM64)
f :
fadd
d1, 5.0e+0
tp *op *0P
fmov
fadd
d2, d0, d2
fadd
fadd
d0, d3,d4
d3,
d2,
d3
fdiv
ret.
d0, d0, d1
指令清单 17.27Optimizing GCC 4.4.5(MIPS)(IDA)
f:
arg_10
0x10
arg_14
0x14
arg_18
8[x0
arg_1c
0x1C
arg_20
=
0x24
0x20
arg_24
lwc1
$f0, arg_14 (Sap)
add.d $f2, $f12, $f14
1wc1
$f1,arg_10($sp)
lui
add.d
sfo,sf2,$fo
$v0,
($LC0 >> 16)
1wc1
$f2, arg_1c($sp)
or
$at, $zero
1vc1
$f3,
$zero
arg_18 ($sp)
add.d $fo, $f2
or
$at,
1vc1
$f2, arg_24($sp)
or
Sat, Szero
1vc1
$f3,
$at, Szero
arg_20 ($8p)
add.d $f0,
or
1vc1
$f2, dword_6C
$f2
1vc1
or
$f3,$LC0
$at,
$zero
div.d sfo, $f2
jr
$ra
:0$
vord 0x40140000 DATA XREF: f+C
[+44
dvord_6C1
-vord 0
 DATA XREF: f+3C
---
## Page 241
第18章数
组
在内存中，数组就是按次序排列的、相同数据类型的一组数据。
18.1
简介
include 
int main ()
int a[20];
int i;
for (i=0; 1<20; i++)
a [1]=1*21
for (1=0; 1<20; 1++)
printf (*a[td]=id\n*, 1, a[i]]:
return 0;
1;
18.1.1
x86
MSVC
使用MSVC2008编译上述程序可得如下所示的指令。
指令清单18.1MSVC2008
_TEXT
SEGMENT
_a$ = -80
_1$ = -84
1 size = 4
: size = 80
_nain
PROC
push
mov
ebp
sub
esp，84;00000054H
ebp, esp
mOv
[HORD PTR _1$[ebp], 0
daC
SHORT $LN6(eain
$L&5enain:
A0W
eax, DWORD PTR _1$[ebp]
add
DWORD PTR _i$ [ebp1, eax
eax,
1
$1868nain:
A0W
cBp
DWORD PTR _i$[ebp1, 20; 000000148
Jge
ecx, DMORD PTR _i$[ebp]
SHORT $LN4emain
nov
sh1
edx, DMORD PTR _1$ [ebp]
ecx, 1
nov
nov
DWORD PTR _a$[ebp+edx*4], ecx
$I848nain:
jmp
SHORT $LNSBnain
moV
DNORD PTR _i$[ebp] , 0
2mp
SHORT $LN3Bnain
---
## Page 242
224
逆向工程权威指南（上册）
SLN28main:
mov
eax, DWORD PTR _i$[ebp]
add
DMORD PTR _i$[ebp], eax
eax, 1
SLN38main:
cmp
DMORD PTR _i$[ebp], 20 
Jge
SBORT $L&1emain
:00000014H
nov
ecx,
DWORD PTR _1$[ebp]
nov
edx,
DWORD PTR _a$ [ebp+ecx*4]
push
edx
nov
eax, DWORD PTR _i$[ebp]
push
push
OFFSET $SG2463
eax
ca11