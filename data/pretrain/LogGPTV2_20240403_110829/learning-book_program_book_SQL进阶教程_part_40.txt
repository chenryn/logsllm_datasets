成 8、12。这样会影纳排序。
字。在使用名字的时候，处理方法和编号是一样的。也就是说，赋予表示
第二个是，一旦表中插入了数
据。那么再想改列的类型就比较
麻损，有时基至胃要把所有的数
据都先别掉，这样看末还不如从
队内部达成一致的适当的名字就行。
开始就设计。
一般来说，与编号相比，名字被用于聚合的频度很低，大多时候只作
注
为余列使用。我们不用刻意地消除其中的NULL，但是最好还是让
相反，如果必须使用名字列作为
连接列来使用,那么请思考下
NULL从名字列中消失。
例子直接使用名字作为盗接列，
是不显设计有间显。本书中有些
但那只是为了读者定解起来方便
对于数值型的列，笔者认为最好的方法是一开始就将NULL转换为0
再存储到数据库中。如果允许NULL，那么就必须在统计数据时使用
NULLIF函数或者ISNOTNULL谓词来排除NULL，笔者不推荐这样来做。
从笔者的经验来看，将NULL转换成0从来没有带来过任何问题，而且消
除NULL带来的好处有很多。
图灵社区会员非洲铜(PI:EMAIL)专享尊重版权
---
## Page 277
264—第2章关系数据库的世界
严格来讲，这种做法有点儿粗暴，这一点不可否认。就像JoeCelko
注0
说的那样，“没有油箱的车”和“空油箱”是不同的·。因此更加可行的
携白(S0L 权威指南 1第 4.反 1)。
方案是下面这样的方案。
1.转换为0。
2.如果一定要区分0和NULL，那么允许使用NULL。
如果能转换为0，希望大家还是尽量把NULL转换为0.
日期：用最大值或最小值代替
对于日期，NULL的含义存在多种可能性，需要根据具体情况决定是
使用默认值还是使用NULL。
当需要表示开始日期和结束日期这样的“期限”的时候，我们可以使
用0000-01-01或者9999-12-31这样可能存在的最大值或最小值来处理。例
如表示员工的入职日期或者信用卡的有效期的时候，就可以这样处理。这
种方法一直都被广泛使用着。
相反，当默认值原本就不清楚的时候，例如历史事件发生的日期，或
者某人的生日等，也就是当NULL的含义是“未知”的时候，我们不能像
前面那样设置一个有意义的默认值。这时可以允许使用NULL。
结束语
至此，我们分4种数据类型介绍了消除NULL的具体方法，这里总结如下。
(1)首先分析能不能设置默认值。
(2)仅在无论如何都无法设置默认值时允许使用NULL
笔者认为，如果遵守这两条原则，那就足以避免NULL带来的各种问题，
使系统开发能够更加顺利地进行。此外，大家可能会遇到“这种做法行不
通”或者“有更好的方法”的情况，这时请务必向分委会会长，也就是笔
者汇报一下。
图灵社区会员 非洲钢(PI:EMAIL) 专享 尊重版权
---
## Page 278
210SOL中的层级
265
SQL中的层级
严格的等级社会
在SQL中，使用GROUPBY聚合之后，我们就不能引用原表中除聚合键之外的列。对于不习惯SQL
的程序员来说，这个规则很让人讨厌，甚至被认为是多余的。但是，其实这只是SQL中的一种逻辑，是
为了严格区分层级。本节就从这个乍一看不可思议的现象讲起，逐步带大家接近SQL的本质。
谓词逻辑中的层级、集合论中的层级
1-8节介绍过，SQL引入了谓词逻辑的概念“阶”（order），大家还记
得吗？这个概念的作用是区分层级，可以用来区分集合论中的元素和集合，
以及谓词逻辑中的参数和谓词，是一个非常重要的概念。
前面讲过，在SQL中，使用BXISTS谓词时如果能意识到阶，那么
EXISTS谓词就容易理解了。此外，对于SQL中我们非常熟悉的运算-
GROUPBY聚合——来说，层级也有着非常重要的意义。
对于EXISTS来说，层级的差别与EXISTS谓词及其参数有关，因此
属于谓词逻辑中的阶。而GROUPBY中的阶与元素和集合的区别有关，因
此属于集合论中的阶。即使像GROUPBY这样被广泛使用的运算符，其实
也有很多值得深入思考的地方，本节将一一解开这些秘密。
为什么聚合后不能再引用原表中的列
接下来我们马上结合具体的例题来思考一下，首先，准备下面这样一
张曾在2-5节中使用过的表。
---
## Page 279
266—
第2章关系数据库的世界
Teams
mbe
大木
A
2B
选见
19
新蒂
4
23
山田
B
久本
B
29
桥田
C
30
野野宫
D
2B
鬼源
D
2B
加蒂
D
24
新城
D
22
这是一张管理A-D这4个小组的成员信息的表。首先，我们还是以
组为单位进行聚合查询。
-以组为单位进行聚合查询
SELSCT tean, AVG (age)
FROM Teans
ruees AE 4008D
tean AVG (age)
A
23.3
34.5
C
30.0
25.5
这条查询语句没有任何问题，它求的是每个组的平均年龄。那么如果
我们把它改成下面这样，结果会怎么样呢？
--以组为单位进行聚合查询？
SELSCT tean, AVG (agel , age
FROM Tesns
fueaa xa ano
这条查询语句的执行结果会出错。原因是不能选择SBLECT子句中新
语句违反了标准SQL的规定，因此不具有可移植性。
---
## Page 280
2-10SOL中的层级—267
标准SQL规定，在对表进行聚合查询的时候，只能在SELECT子句中
写下面3种内容。
1.通过GROUPBY子句指定的聚合键
2.聚合函数（SUM、AVG等）
3.常量
SQL的初学者大多会忽略这条约束，从而犯下在聚合查询时往
SELECT子句中加入多余列的错误。他们会在不断出错的过程中慢慢地习
惯，并在不经意间学会正确的写法，但是很少有人能正确地理解为什么会
的很多列都写在SELECT子句中？时，有没有觉得无从解释呢？
其实，这里隐藏了一个与本节主题紧密相连的间题。表Teams中的
"age”列存储了每位成员的年龄信息。但是需要注意的是，这里的年龄只
是每个人的属性，而不是小组的属性。所谓小组，指的是由多个人组成的
集合。因此，小组的属性只能是平均或者总和等统计性质的属性。
每个人的属性
小组的属性
姓名年龄
身高体重
平均年龄
人数
efc
最大身高
etc.
询问每个人的年龄是可以的，但是询问由多个人组成的小组的年龄就
没有意义了。对于小组来说，只有“平均年龄是多少？或者“最大身高
是多少”这样的问法才是有意义的。强行将适用于个体的属性套用于团
体之上，纯粹是一种分类错误。就像2-5节提到过的，GROUPBY的作用
是将一个个元素划分成若干个子集。这样看的话，关系模型中“列”的正
式名称叫作“属性”，其实也是有道理的。
MySQL会忽略掉层级的区别。因此这样的语句执行起来也不会出错。
可能对用户来说这样会比较舒服，但实际上它违背了SQL的基本原理。
---
## Page 281
268—第2章关系数据库的世界
使用GROUPBY聚合之后，SQL的操作对象便由0阶的“行”变为了1阶
的“行的集合”。此时，行的属性便不能使用了。SQL的世界其实是层级
分明的等级社会。将低阶概念的属性用在高阶概念上会导致秩序的混乱，
必须遭到惩罚。
因此，我们很容易就会明白，下面这条语句的错误也是相同的原因造
成的。
-错误
SSL&CT tean, AVG (agel , menber
向小组询间姓名是不会得到回答的。如果非要在结果中包含”member”
列的值，那么只能像下面这样使用聚合函数。
-正确
SELSCT tean, AVG (agel 。 NAK (nenber)
ruees A8 4008D
MAX[member）会计算出小组成员中以字典序排序后最后一个人的姓
名，因此这无疑是小组的属性。
如果稍微扩展一下这条查询语句，我们还可以求出“小组中年龄最大
的成员”，SQL语句如下所示。
SELSCT tean, MAX(agel .
(SELECT MAX (membex)
KHERE T2.team = T1.team
FROM Teans T2
AND T2.age = MAX(T1.age)  AS oldest
ruees AE 4008D
tean max(age)  oldest
大木
40
28
山田
C
30
桥田
28
野野宫
---
## Page 282
2-10SOL中的层级—269
这条语句稍微有些意外，而且很有趣。member是聚合之前的表的属性，
一般来说，不可能出现在聚合后的结果中（因为层级不同）。但是像这样
使用标量子查询的话，那就可以实现。
这条语句的关键点有两个。第一个是，子查询中的WHERE子句里使用
了MAX（T1.age）这样的聚合函数作为条件。我们在初学SQL时，会学到
不可以在WHERE子句中使用聚合函数，但是在本题中却是可以的。原因是，
这里对外层的表TI也进行了聚合，这样一来我们就可以在SELBCT子句
列）。SQL中的层级差别就是如此的严格，大家是否体会到了呢？
另一个是，当一个小组中年龄最大的成员有多人时，必须选出其中一
个人作为代表。这个是通过子查询中 SELBCT子句里的 MAX{member）来实
现的。例如，D小组中野野宫和鬼爆两人的年龄都是最大的，但是结果中
只出现了野野宫一人。如果不使用MAX函数，那幺子查询会返回多条数据，
这样就会出现执行错误。
单元素集合也是集合
经过前面的讨论，相信大家已经理解了在SQL中，集合中的元素（称
为元）和集合是有区别的。不过，这里还有一点需要大家特别注意。
请把注意力放在C组上。这个小组虽然称为小组，但是其实只有桥
田一位成员。因此小组的平均年龄就刚好与桥田的年龄相同。不只是年龄，
其他的属性也一样。像这样只有一个元素的集合，在集合论中叫作单元素
集合（singleton）。一般来说，单元素集合的属性和其唯一元素的属性是一
样的。这种只包含一个元素的集合让人觉得似乎没有必要特意地当成集合
来看待。其实在数学史上，围绕着是否承认单元素集合也曾经有过一些争
论。也有过这样的意见：单元素集合与元素在本质上是相同的，没有必要
特意当成集合。
图灵社区会员 非洲钢(PI:EMAIL) 专享 尊重版权
---
## Page 283
270—第2章关系数据库的世界
对于单元素集合来说，元素的属性和集合的属性一样
年龄=30
平均年龄=30
元素：a
集合：a
这里先给出结论吧，现在的集合论认为单元素集合是一种正常的集合。
单元素集合和空集一样，主要是为了保持理论的完整性而定义的。因此对
于以集合论为基础的SQL来说，当然也需要严格地区分元素和单元素集合。
因此，元素a和集合{a}之间存在着非常醒目的层级差别。
a≠{a}
这两个层级的区别分别对应着 SQL中的 WHERE子句和 HAVING子句
的区别。WHERE子句用于处理“行”这种O阶的对象，而HAVING子句用
来处理“集合”这种1阶的对象。
读到这里，对于为什么聚合查询的SELECT子句中不能直接引用原表
中的列，大家是否彻底理解了呢？如果明天新入职的程序员问大家这样基
础的问题，大家能像老手一般作出合理的解答吗？
---
## Page 284
3
第
章
附录
3-1
习题解答
3-2
参考文献
---
## Page 285
272
习题解答
这里针对第1章中各节的练习题进行解答。如果能把这些练习题全都做出来，那么大家就达到中级
水平了。
解答1-1CASE表达式
→练习题1-1-1多列数据的最大值
求两列中的最大值，应该很简单吧？只需要使用“y比x大时返回y，
否则返回x”这样的条件分支就可以表达。
SSL8Cr key.
-求x和y二者中较大的值
 NZHL A > X RSEN 3SYO
ELSE x END AS greatest
FROM Greatests;