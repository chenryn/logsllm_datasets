Where `target: "web"` is set inside Webpack, it defaults `resolve.mainFields`
to be `["browser", "module", "main"]`.
I'm running into issues whereby certain libraries like
https://github.com/krisk/fuse (amongst others) are not transpiling the code
they reference via `module`. This means that where `module` is prioritised
over `main`, certain cutting-edge features are making it into the bundle file,
hence resulting in poor browser compatibility.
The argument can be made that libraries should transpile their `module` output
by default whilst keeping ES Module support; however, this doesn't seem to be
standardised, and to me it seems like an uphill battle to enforce our
interpretation of a non-standard feature (there is no mention in any proposed
spec of whether `module` can or cannot contain cutting-edge JavaScript).
  1. Is this current method of prioritising the `module` field before `main` in all circumstances the most appropriate way to handle module resolution?
  2. What is the best approach to ensuring maximum browser compatibility whilst reducing the amount of code to be transpiled during build processes, and preserving features such as tree-shaking?
I am considering a strategy similar to the following:
  1. If `browser` exists on `package.json`, load this; if not,
  2. If `module` exists on `package.json` **and** `sideEffects` is set to `false`, load this; if not,
  3. If `main` exists on `package.json`, load this; if not,
  4. If `module` exists on `package.json`, load this.
Any suggestions or thoughts on this issue are welcome! Thanks ðŸ˜„