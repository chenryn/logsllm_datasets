case, focused its mutant operators on the URL content, and
successfully evaded the signature.
Finally, once we determined that our technique was able
to correctly derive both the basic and the string constraints,
we ran a second set of experiments to demonstrate that
our technique can successfully guide the evasion of closed-
source signatures for which we have no a priori knowledge.
To this end, we ran the unmodiﬁed Samba trans2open ex-
ploit over the link monitored by the Symantec IDS and ob-
served that the sensor indeed included a signature for this
attack. The dynamic taint analysis revealed a set of con-
straints that included the equality constraints on a 16-bit
word 0xd007 contained in the shellcode portion of the at-
tack. Using this information, Sploit was able to success-
fully generate a mutant that violated that particular con-
straint of the Symantec’s signature. Thus, the resulting mu-
tant exploit was able to successfully compromise the target
system while evading detection by Symantec’s NIDS.
5.3. Discussion
From these experiments, we can conclude that our dy-
namic taint analysis methodology is accurate enough to
properly reconstruct basic and string constraints used by
both open-source and closed-source intrusion detection en-
gines. The knowledge of what attack data is used by the
signatures and how it is used allowed Sploit to focus the
generation of test cases, thus increasing the chances of
spotting ﬂaws in the corresponding signatures in a reason-
able amount of time.
For example, let us consider the experiment with the IIS
chunked encoding attack, which involves the HTTP pro-
tocol. In this case, the large number of available mutant
operators for HTTP would make the test suite far too large
for an exhaustive analysis. In fact, without any informa-
tion on the way in which the IDS detects the attacks, Sploit
generated a test suite containing tens of millions of attack
mutations. Because of that, the information about the posi-
tion of the attack data in the network stream was extremely
important. By determining that the signature matched only
a few bytes inside one of the chunks, our mutation engine
could disable all the transformations that did not operate on
the data content of an HTTP request. This reduced the suite
to just a few hundreds of test cases. Finally, taking into ac-
count also the iTrace basic constraints, Sploit could remove
additional mutant operators, leaving just the ones that op-
erate on the end-of-line characters of the chunk data.
A similar reduction in the number of test cases was ob-
served in the case of the ans.pl experiment. In this case,
however, the knowledge that the IDS is looking for some-
thing inside the URL ﬁeld did not help much, because most
of the HTTP operators operate on the URL content. Fortu-
6161
nately, the string-based constraints derived by the analysis
were very effective, reducing the number of test cases to
only ﬁve mutants.
It is important to note that, in each experiment, the ﬁrst
mutant generated from the reduced test suite was success-
ful in both compromising the target and evading the NIDS
under test. As a result, instead of blindly testing a poten-
tially large set of attack variations hoping to ﬁnd a combi-
nation of mutant operators that can evade the signature, our
approach was able to eliminate a large portion of useless
test cases, evading the signature under analysis on the ﬁrst
attempt.
6. Related Work
The use of variations of attacks to test intrusion detec-
tion systems and other security mechanisms has recently
received considerable attention.
The idea of performing desynchronization attacks was
initially introduced by Ptacek and Newsham [20] and im-
plemented in evasion tools such as nidsbench [3] and con-
gestant [11]. Recently, a number of other techniques to per-
form desynchronization at the application level [21] and at
the attack payload level [15, 17] have been proposed. How-
ever, these techniques are mostly used as a way to evade de-
tection and not as comprehensive tools to test and evaluate
intrusion detection systems.
One of the earliest works that systematically considered
attack variations as a way to test intrusion detection sys-
tems was Raffael Marty’s Thor [12]. Thor’s design in-
cluded the possibility to generate variations at both the net-
work and the application layer. However, Thor’s imple-
mentation is limited to network-level evasion techniques,
which are orthogonal with respect to malicious payload be-
ing delivered with an attack. In addition, the only result
mentioned is the application of an evasion technique based
on IP fragmentation to an HTTP-based attack.
The ﬁrst complete framework for the generation of mu-
tant attacks was Sploit [29], which was used as a basis for
the work described in this paper. Sploit deﬁnes a number
of mutant operators and provides a mutation engine that ap-
plies the operators to an exploit template to automatically
generate variations of attacks. The ﬁrst Sploit prototype
successfully evaded both open-source and commercial in-
trusion detection systems. Note that Sploit does not claim
to completely cover the space of possible variations of an
attack, nor states that it guarantees that the variations of
attacks are successful. Nevertheless, it provides an effec-
tive framework for the composition of evasion techniques
to test the quality of intrusion detection signatures.
An approach similar to Sploit was introduced by Rubin
et al. in [22]. In this case, a tool called AGENT uses in-
ference rules to produce attack variations. The advantage
(and novelty) of AGENT is its formal characterization of
the type of transformations applied to an exploit. This al-
lows one to better characterize the mutation process and the
mutation space. However, its formal approach does not al-
low one to easily model very complex transformations and,
even though the mutation space can be formally described,
the approach provides no guidance as to how to explore this
space.
In [24], the same authors proposed a model to assess the
coverage of their mutant generation approach. In particu-
lar, given a set of transformation rules Φ, they deﬁned a
mutation algorithm as Φ-complete if it can generate all the
possible attack instances derivable from the original exploit
with respect to Φ. To address the fact that this algorithm
could potentially generate an inﬁnite number of test cases,
the authors limit the size (i.e., the number of bytes) of the
mutants that can be generated.
A ﬁrst step towards a guided form of mutation explo-
ration was presented in [14], where the authors reverse-
engineered a commercial, closed-source intrusion detec-
tion system to determine the inner workings of the signa-
ture matching process. This work introduced the use of
dynamic analysis to identify which portions of an attack
were actually used in the signature matching process. The
results of this analysis were used to guide a manual eva-
sion attacks. The work presented in this paper extends the
idea of using dynamic analysis, but relies on more sophisti-
cated techniques to automatically drive an exploit mutation
engine.
An area that is related to the extraction of ﬁnite state
automata (FSA) is automata induction or grammar infer-
ence. With grammar inference, the task is to identify an
automaton, given only examples of positive (and possibly
negative) instances of the language that this automaton ac-
cepts. While the task is very hard in theory [9], there have
been numerous approaches to ﬁnd acceptable solutions in
practice [2]. The most signiﬁcant difference to our work is
that we do not only have information about the input and
output behavior of the automaton that we aim to infer, but
we can also observe its internal state while processing in-
put. Thus, we can potentially produce much more accurate
results.
7. Conclusions and Future Work
Mutant exploits are an effective way to test intrusion de-
tection signatures and identify “blind spots” in intrusion de-
tection systems. Even though there exist several systems
that support the generation of mutant exploits by applying
mutant operators to an exploit template, the selection of the
test cases to execute is performed either manually by a hu-
man expert or randomly.
This paper presents a novel approach to reverse engi-
neering NIDS’s signatures in order to automatically extract
a set of constraints that are used to guide the test case gener-
6262
ation process. The approach is based on the dynamic anal-
ysis of the network intrusion detection binary to identify
which parts of a network stream are checked to identify an
attack and how the data is used in the decision process. The
results of the analysis are then used to automatically drive a
mutation engine so that it applies the most relevant mutant
operators to the detection-critical portions of the exploit.
The proposed approach was used to evade both an open-
source and a commercial, closed-source intrusion detection
systems.
Future work will focus on extending the set of con-
straints that we can extract from the signatures, and on pro-
viding a theoretical model for the automaton learning al-
gorithm that we use to reverse engineering the string con-
straints.
Acknowledgments
This research was partially supported by the National
Science Foundation, under grants CCR-0238492, CCR-
0524853, and CCR-0716095.
References
[1] A. Aho and M. Corasick. Efﬁcient string matching: An aid
to bibliographic search. Communications of the Association
for Computing Machinery, 18(6), 1975.
[2] D. Angluin and C. Smith. Inductive Inference: Theory and
Methods. ACM Computing Surveys, 15(3), 1983.
[3] Anzen. nidsbench:a network intrusion detection system test
suite. http://packetstorm.widexs.nl/UNIX/
IDS/nidsbench/, 1999.
[4] D. Balzarotti. Testing Intrusion Detection Systems. PhD
thesis, Politecnico di Milano, 2006.
[5] R. Boyer and J. Moore. A Fast String Searching Algorithm.
Communications of the Association for Computing Machin-
ery, 20(10), 1977.
[6] J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and
M. Rosenblum. Understanding Data Lifetime via Whole
System Simulation. In USENIX Security Symposium, 2004.
[7] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou,
L. Zhang, and P. Barham. Vigilante: End-to-end contain-
ment of Internet worms. In Proceedings of the ACM Sym-
posium on Operating Systems Principles, 2005.
[8] J. Crandall and F. Chong. Minos: Control Data Attack Pre-
In 37th Interna-
vention Orthogonal to Memory Model.
tional Symposium on Microarchitecture, 2004.
[9] E. Gold. Language Identiﬁcation in the Limit. Information
and Control, 5(1967), 10.
[10] P. Hazel. PCRE: Perl Compatible Regular Expressions.
http://www.pcre.org/, 2005.
[11] horizon. Defeating Sniffers and Intrusion Detection Sys-
tems. Phrack Magazine, 8(54), December 1998.
Thor.
[12] IBM Zurich Research Laboratory.
http:
//www.zurich.ibm.com/csc/infosec/gsal/
past-projects/thor/, 2004.
6363
[13] S. Jha, S. Rubin, and B. Miller. Using Attack Mutation to
Test a High-End NIDS. Information Security Bulletin, vol.
10, April 2005.
[14] C. Kruegel, D. Mutz, W. Robertson, G. Vigna, and R. Kem-
merer. Reverse Engineering of Network Signatures. In Pro-
ceedings of the AusCERT Asia Paciﬁc Information Technol-
ogy Security Conference, Gold Coast, Australia, May 2005.
[15] S. Macaulay. ADMmutate: Polymorphic Shellcode Engine.
http://www.ktwo.ca/security.html.
[16] R. Marty. Thor: A Tool to Test Intrusion Detection Sys-
tems by Variations of Attacks. Master’s thesis, ETH Zurich,
March 2002.
[17] Metasploit Project.
Metasploit.
http://www.
metasploit.com/, 2005.
[18] D. Mutz, G. Vigna, and R. Kemmerer. An Experience De-
veloping an IDS Stimulator for the Black-Box Testing of
In Proceedings of
Network Intrusion Detection Systems.
the 2003 Annual Computer Security Applications Confer-
ence (ACSAC ’03), pages 374–383, Las Vegas, Nevada, De-
cember 2003.
[19] J. Newsome and D. Song. Dynamic taint analysis for au-
tomatic detection, analysis, and signature generation of ex-
ploits on commodity software. In Proceedings of the Net-
work and Distributed System Security Symposium (NDSS),
2005.
[20] T. Ptacek and T. Newsham. Insertion, Evasion and Denial
of Service: Eluding Network Intrusion Detection. Technical
report, Secure Networks, January 1998.
[21] R. Graham. SideStep. http://www.robertgraham.
com/tmp/sidestep.html, 2005.
[22] S. Rubin, S. Jha, and B. Miller. Automatic generation and
In Proceedings of the Annual
analysis of NIDS attacks.
Computer Security Applications Conference (ACSAC), De-
cember 2004.
[23] S. Rubin, S. Jha, and B. Miller. Language-Based Genera-
tion and Evaluation of NIDS Signatures. IEEE Symposium
on Security and Privacy, Oakland, California, May, 2005.
[24] S. Rubin, S. Jha, and B. Miller. On the Completeness of
Attack Mutation Algorithms. Proceedings of the 19th IEEE
Workshop on Computer Security Foundations, pages 43–56,
2006.
[25] SecurityFocus. Avenger’s News System Remote Command
Execution Vulnerability. http://securityfocus.
com/bid/4149, 2002.
[26] SecurityFocus. Microsoft IIS Chunked Encoding Trans-
http://www.
fer Heap Overﬂow Vulnerability.
securityfocus.com/bid/4485, 2002.
[27] SecurityFocus. Samba ‘call trans2open’ Remote Buffer
http://securityfocus.
Overﬂow Vulnerability.
com/bid/7294, 2005.
[28] H. Spencer.
regex: Regular Expression Library. http:
//arglist.com/regex/, 2005.
[29] G. Vigna, W. Robertson, and D. Balzarotti.
Testing
Network-based Intrusion Detection Signatures Using Mu-
In Proceedings of the ACM Conference on
tant Exploits.
Computer and Communication Security (ACM CCS), pages
21–30, Washington, DC, October 2004.
[30] D. Wagner and P. Soto. Mimicry Attacks on Host-Based
In Proceedings of the 9th
Intrusion Detection Systems.
ACM Conference on Computer and Communications Se-
curity, pages 255–264, Washington DC, USA, November
2002.