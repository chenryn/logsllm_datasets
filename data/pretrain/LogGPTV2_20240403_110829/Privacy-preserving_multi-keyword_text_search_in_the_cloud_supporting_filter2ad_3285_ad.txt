### 优化后的文本

#### 图7：通过选择不同的标准差σ，可以在（a）精度和（b）排名隐私之间进行权衡。

- **图7(a)**：展示了在较小的σ值下，搜索方案的有效性几乎不受影响。用户仍然可以享受到与BMTS几乎相同的搜索结果。
- **图7(b)**：展示了较大的σ值可以更好地保护EMTS中的排名信息。

**注意**：σ是一个可调的搜索参数，由用户自行决定。选择不同的σ值反映了用户对搜索方案有效性和排名隐私及关键词隐私保护的偏好（详见第3.2节）。

#### 图8：构建索引树的时间成本。

- **图8(a)**：展示了在相同字典的情况下，构建索引树的时间成本几乎是线性的，随着文档数量的增加而增加。
- **图8(b)**：展示了在相同文档集的情况下，索引构建时间与字典中关键词的数量成正比。

此外，由于维度扩展，构建EMTS索引树比BMTS更耗时，这在图8(a)和图8(b)中都有体现。

### 性能分析

为了评估我们提出的技术的整体性能，我们在一台配备Intel Core i3处理器（3.3GHz）的Linux服务器上使用Java实现了整个安全搜索系统。文档集是从过去十年的IEEE INFOCOM出版物中构建的，包括约3600篇出版物，从中提取了约9000个关键词。本节详细介绍了性能结果。用于评估的文档和关键词是从创建的文档集中随机选择的。

#### 5.1 精度和隐私

为了评估EMTS中引入的幻影项对搜索结果准确性的影响，我们采用了[5]中定义的“精度”。即，top-k搜索的“精度”定义为Pk = k' / k，其中k'是云服务器返回的真实top-k文档的数量。图7(a)显示，当σ较小时，搜索方案的有效性几乎不受影响。用户仍然可以享受到与BMTS几乎相同的搜索结果。另一方面，我们评估了引入幻影项所获得的“排名隐私”。 “排名隐私”的定义也来自[5]，即在点k处的排名隐私计算为 (cid:3)Pk = (cid:6) (cid:2)pk / k^2。对于返回的每个文档d，令排名扰动 (cid:2)pk 为 |ud - ud'|，其中ud是返回的top-k文档中文档d的排名号（如果大于k则设为k），ud'是其在实际排名文档中的排名号。如图7(b)所示，较大的σ值提供了更好的排名信息保护。

#### 5.2 索引树的构建

显然，生成提出的索引树结构的时间成本主要取决于文档集DC和字典T的大小。在特定层级i，主要计算是划分后的索引向量的加密，涉及分割过程和两个ni × ni矩阵与ni维向量的乘法，其中ni = |Ti|在BMTS中，ni = |Ti| + Ui在EMTS中。图8(a)显示，在给定相同字典的情况下，构建索引树的时间成本几乎是线性的，随着文档数量的增加而增加。图8(b)显示，在相同文档集的情况下，索引构建时间与字典中关键词的数量成正比。此外，由于维度扩展，构建EMTS索引树比BMTS更耗时，这在图8(a)和图8(b)中都有体现。

### 表4：索引树的大小

| 字典大小 | BMTS (MB) | EMTS (MB) |
|---------|-----------|-----------|
| 2000    | 23.16     | 26.87     |
| 4000    | 46.34     | 53.77     |
| 6000    | 69.51     | 80.66     |
| 8000    | 92.68     | 107.54    |

从表4可以看出，随着字典大小的增加，索引树的大小也随之增加。EMTS的索引树比BMTS更大，这是由于EMTS中增加了维度。

### 结论

虽然最坏情况下的搜索复杂度并不优于线性搜索，但这种基于树的搜索算法在实际应用中代表了一个坚实的进步，因为它显著减少了搜索时间。从安全角度来看，整个搜索过程不会引入新的隐私漏洞，即使云服务器知道某个关键词位于某个层级，也无法通过搜索时间差异推断出具体的关键词。实际上，为了提高效率，云服务器执行层级选择的相似性评估（见第3节），因此已经掌握了关键词的位置信息。每个层级至少有80个维度，并且所有落入该层级的单词具有几乎相同的搜索时间，这有效地将一个关键词与其他至少79个关键词混淆在一起。此外，没有字典T，云服务器无法知道具体选择了哪些关键词来构建这个层级。因此，不可能区分这些关键词或识别出特定感兴趣的关键词。