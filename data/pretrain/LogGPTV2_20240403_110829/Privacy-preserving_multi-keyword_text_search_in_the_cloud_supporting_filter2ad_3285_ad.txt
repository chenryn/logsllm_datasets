y
c
a
v
i
r
p
k
n
a
R
150
0
50
σ = 0.03
σ = 0.05
70
130
Number of retrieved documents
110
90
σ = 0.03
σ = 0.05
70
130
Number of retrieved documents
110
90
150
)
s
(
e
e
r
t
x
e
d
n
i
g
n
d
i
l
i
u
b
f
o
e
m
T
i
30
25
20
15
10
5
0
5
BMTS
EMTS
15
10
30
Number of documents (× 102)
20
25
35
)
s
(
e
e
r
t
x
e
d
n
i
g
n
d
i
l
i
u
b
f
o
e
m
T
i
BMTS
EMTS
16
14
12
10
8
6
4
4
9
Number of keywords in the dictionary (× 103)
8
5
6
7
(a)
(b)
(a)
(b)
Figure 7: By choosing diﬀerent standard deviation
σ, the trade-oﬀ, between (a) Precision, and (b) Rank
privacy, can be achieved.
Figure 8: Time cost for building index tree.
(a)
For the diﬀerent size of document set with the same
dictionary, n = 4000.
(b) For the diﬀerent size of
dictionary with the same document set, m = 1000.
and the MDB-tree is not directly applicable for eﬃcient
search over vector indexes. From the extensive experiments
on our prototype implementation of the search algorithm,
we identiﬁed three eﬃciency-crucial factors and proposed
eﬀective strategies to improve the practical search eﬃcien-
cy with our vector indexes. Although the worst case search
complexity is no better than linear search that is the state-
of-the-art search eﬃciency in the multi-keyword encrypted
text search scenario, this much less time-consuming tree-
based search algorithm represents a solid step forward on
the utilization of encrypted cloud data in practice. From
the security point of view, the entire search process does
not introduce new privacy vulnerability when used with our
secure index scheme.
In particular, our scheme is secure
against search time analysis, i.e., the cloud server cannot in-
fer speciﬁc keyword by the diﬀerence of search time, even if
he/she knows that the keyword resides at a certain level. In
fact, for eﬃciency, the cloud server performs level-selected
similarity evaluation (see section 3), such that he/she has
already possessed the keyword position information. There
are at least 80 dimensions in an index vector at each level,
and all the words falling into this level have almost the same
search time. This eﬀectively blinds one keyword within at
least 79 other keywords at the same level. In addition, the
cloud server has no knowledge about which concrete set of
keywords are selected to build this level without the dictio-
nary T . Therefore, it is not possible to diﬀerentiate these
keywords or identify a particular keyword of interest.
5. PERFORMANCE ANALYSIS
To evaluate the overall performance of our proposed tech-
niques, we implemented the entire secure search system us-
ing JAVA on a Linux Server with Intel Core i3 Processor
3.3GHz. The document set is built from the recent ten years’
IEEE INFOCOM publications, including about 3600 publi-
cations, from which we extract about 9000 keywords.
In
this section we present the detailed performance result. The
documents and keywords used in the evaluation are selected
randomly from the created document sets.
5.1 Precision and Privacy
To evaluate the impact on the accuracy of search result
introduced by phantom terms in EMTS, we adopt the deﬁ-
nition of “precision” in [5]. Namely, the “precision” of a top-k
Size of dictionary
Table 4: Size of index tree
6000
69.51
80.66
2000
23.16
26.87
4000
46.34
53.77
BMTS (MB)
EMTS (MB)
8000
92.68
107.54
search is deﬁned as Pk = k(cid:4)/k where k(cid:4)
is the number of the
real top-k documents that are returned by the cloud server.
Fig. 7(a) shows that with a small σ, the eﬀectiveness of the
search scheme is not aﬀected much. The user can still en-
joy almost the same search result as BMTS. On the other
hand, we evaluate the “rank privacy” obtained from intro-
ducing phantom terms. The deﬁnition of “rank privacy” is
also adopted from [5], i.e., the rank privacy at point k is
(cid:6) (cid:2)pk/k2. For every document d in the
calculated as (cid:3)Pk =
returned top-k documents, let the rank perturbation (cid:2)pk be
|ud− ud
(cid:4)|, where ud is the rank number of document d in the
returned top-k documents and it is set to k if greater than
(cid:4)
k, and ud
is its rank number in the real ranked documents.
As shown in Fig. 7(b), large σ provides better protection of
rank information in EMTS.
It is worth noting that σ is a tunable search parameter
at the discretion of the user. The selection of diﬀerent σ
reﬂects his/her predilection for the better eﬀectiveness of
the search scheme or the better protected rank privacy and
keyword privacy (see section 3.2).
5.2 Construction for Index Tree
Apparently, the time cost for generating the proposed in-
dex tree structure mainly depends on the size of the docu-
ment set DC and dictionary T . At a particular level i, the
major computation is the encryption of the divided index
vectors, which involves the splitting process and two multi-
plications of an ni × ni matrix and an ni-dimensional vector
where ni = |Ti| in BMTS and ni = |Ti| + Ui in EMTS.
Fig. 8(a) shows that the time cost for building the index
tree is nearly linear to the number of the documents, given
the same dictionary, i.e., ni is ﬁxed at each level i when the
tree structure has a predeﬁned h levels. Fig. 8(b) shows that
with the same document set, the index construction time is
proportional to the number of keywords in the dictionary.
Besides, building the index tree for EMTS is slightly more
time-consuming than BMTS due to the dimension exten-
sion, which is shown in both Fig 8(a) and Fig 8(b). Note
7855
)
s
m
(
BMTS
EMTS
y
r
e
u
q
d
e
t
p
y
r
c
n
e
g
n
i
t
a
r
e
n
e
g
f
o
e
m
T
i
45
35
25
15
1
3
5
Number of levels
7
9
)
s
m
(
y
r
e
u
q
d
e
t
p
y
r
c
n
e
g
n
i
t
a
r
e
n
e
g
f
o
e
m
T
i
23
22
21
20
19
18
1
BMTS
EMTS
3
5
7
Number of keywords of interest
9
)
s
m
(
e
m
i
t
h
c
r
a
e
S
350
300
250
200
150
100
50
0
5
[5]
Baseline
BMTS
EMTS
15
10
30
Number of documents (× 102)
20
25
140
120
100
80
60
40
20
)
s
m
(
e