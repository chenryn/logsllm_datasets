dow is not authorized to transition from the background
(e.g., only the activity window a w2 is authorized in Fig-
ure 7), then the transition will not match the activity call
graph. In this case, a new binding request will be made to
the user, which will clearly identify the (malicious) appli-
cation. We discuss the authentication of the app identity
in Section 7. Both IDAC and UDAC allow such hijacking
and rely on the user to detect these subtle attacks.
A malicious application may try to circumvent the ac-
tivity call graph checking by creating a more fully con-
nected graph that allows more attack paths. However,
such an activity window call graph will require more user
authorizations, which may dissuade the user from that
application. Furthermore, intrusion analysis may lever-
age such activity window call graphs to detect possible
attacks.
6.5 Reusing Operation Bindings
Authorized operation bindings are cached to minimize the
user’s effort in making explicit authorizations of binding
requests to improve usability. Thus, AWare uses a caching
mechanism to require an explicit user’s authorization only
the ﬁrst time an operation binding is identiﬁed, similarly
to the ﬁrst-use permission mechanism. We hypothesize
that in most benign scenarios an authentic user interaction
with a speciﬁc application’s widget is going to gener-
ate a request for the same operation for the same set of
privacy-sensitive sensors each time. Hence, the previous
explicit authorization can be reused securely as implicit
authorization, as long as the integrity of the operation
binding is guaranteed. In Section 8.1.2, we show that
such an approach does not prohibitively increase the num-
ber of access control decisions that users need to make
thus avoiding decision fatigue [11].
However, we must ensure that operation bindings do
not become stale. For example, if the application changes
the way it elicits an operation, we should not allow the
application to reuse old methods to elicit that same oper-
ation. Thus, we require that an operation binding must
be removed from the cache whenever a new operation
binding is created for the same application that partially
matches the existing binding, except for the application
ﬁeld. For example, this prevents an operation from being
authorized in multiple ways, a widget from being used
for multiple operations or in multiple conﬁgurations, etc.
6.6 Supporting Existing Applications
As an alternative to previously proposed approaches
[39, 41], AWare is completely transparent to, and back-
ward compatible with, existing applications.
In fact,
AWare does not require any new external libraries, ap-
plication code annotation or rewriting, which would re-
quire signiﬁcant development effort/burden and impede
backward compatibility for existing applications.
AWare can be integrated with existing off-the-shelf op-
erating systems, as we show with our AWare prototype
discussed in Section 7. AWare only requires the integra-
tion of three software components at the middleware layer.
AWare’s components dynamically monitor the creation of
operation bindings and provide visual output to the user
to enable authorization of operations on privacy-sensitive
sensors. The integration with existing off-the-shelf oper-
ating systems facilitates adoption and deployability.
We discuss how AWare addresses special cases of appli-
cations accessing privacy-sensitive sensors via alternative
methods, such as via background processes and remote
commands, in Appendix A .
7 AWare Implementation
We implemented an AWare prototype by modifying a
recent release of the Android operating system (ver-
sion 6.0.1 r5) available via the Android Open Source
Project (AOSP)7. The AWare prototype is open-sourced
on github.com8. Its footprint is about 500 SLOC in C,
800 SLOC in C++ and 600 SLOC in Java. We tested the
AWare prototype on Nexus 5 and Nexus 5X smartphones.
In the following paragraphs, we describe how we imple-
mented the components required for AWare authorization
mechanism9.
Application Identity: To prove an app’s identity in
binding requests, AWare applies two methods. First,
AWare uses the checksum of the app’s binary signed with
the developer’s private key and veriﬁable with the devel-
oper’s public key [40], similarly to proposals in related
work [6]. In addition, AWare detects spooﬁng of apps’
names or identity marks by using the Comparison Algo-
7https://source.android.com
8https://github.com/gxp18/AWare
9For brevity, in this and the following sections, we use the abbrevia-
tion app to refer to an application.
386    26th USENIX Security Symposium
USENIX Association
rithm for Navigating Digital Image Databases (CANDID)
[25]. This comparison ensures that malicious apps do not
use the same name or identity mark of other ofﬁcial apps.
AWare collects the developers’ signatures and the apps
identity marks (names and logos) from the Google Play
store.
Widget and Display Context Authentication:
AWare identiﬁes application-deﬁned widgets and display
contexts at runtime before rendering the app’s user
interface to the user on the platform’s screen. AWare
uses the widget and window objects created in memory
by the Window Manager, before rendering them on the
platform’s screen,
to collect their graphical features
reliably. A secure operating systems must prevent apps
from being able to directly write into the frame buffers
read by the hardware composer, which composes and
renders graphic user interfaces on the platform screen.
Modern operating systems, such as the Android OS,
leverage mandatory access control mechanisms (i.e.,
SELinux rules) to guarantee that security sensitive device
ﬁles are only accessible by trusted software, such as
the Window Manager. Therefore, as shown in Figure 6,
although apps can specify the graphic components that
should compose their user interfaces, only the Window
Manager, a trusted Android service, can directly write
into the screen buffers subsequently processed by the
hardware composer. Thus, the Window Manager is the
man-in-the-middle and controls what apps are rendering
on screen via their user interfaces.
In the Appendix,
Tables 4 and Table 5 show comprehensive sets of widgets
and windows’ features used by AWare to authenticate the
widgets and their display contexts.
Activity Window Call Graph Construction: At run-
time, AWare detects inter-activity transitions necessary to
construct the per-application activity window call graph
by instrumenting the Android Activity Manager and Win-
dow Manager components. Also, AWare captures user
input events and system events by instrumenting the An-
droid Input Manager and the Event Manager components.
We discuss nested activity windows in Appendix C.
User Input Event Authentication: AWare leverages
SEAndroid [49] to ensure that processes running apps or
as background services cannot directly read or write input
events from input device ﬁles (i.e., /dev/input/*) cor-
responding to hardware interfaces attached to the mobile
platform. Thus, only the Android Input Manager, a trusted
system service, can read such ﬁles and forward input
events to apps. Also, AWare leverages the Android screen
overlay mechanism to detect when apps or background
services draw over the app currently in the foreground to
prevent input hijacking and avoid processing of any user
input event on overlaid GUI widgets. Thus, AWare consid-
ers user input events for the identiﬁcation of an operation
binding only if the widget and the corresponding window
Figure 8: AWare Binding Request
prompted to the user on the mo-
bile platform’s screen at Operation
Binding creation. The app’s iden-
tity is proved by the name and the
graphical mark. For better security,
in mobile platforms equipped with
a ﬁngerprint scanner, AWare recog-
nizes the device owner’s ﬁngerprint
as the only authorized input for cre-
ating a new Operation Binding.
are fully visible on the platform’s screen foreground. To
intercept user input events, we placed twelve hooks inside
the stock Android Input Manager.
Operation Request Mediation: The Hardware Ab-
straction Layer (HAL) implements an interface that al-
lows system services and privileged processes to access
privacy-sensitive sensors indirectly via well-deﬁned APIs
exposed by the kernel. Further, SEAndroid [49] ensures
that only system services can communicate with the HAL
at runtime. Thus, apps must interact with such system
services to request execution of speciﬁc operations tar-
geting privacy-sensitive sensors. Thus, AWare leverages
the complete mediation guaranteed at the system services
layer to identify operation requests generated by apps at
runtime, using ten hooks inside the stock Android Audio
System, Media Server, and Media Projection.
Operation Binding Management: The AWare pro-
totype implements the AWare MONITOR to handle call-
backs from the AWare hooks inside the Input Manager
and other system services. The AWare MONITOR is no-
tiﬁed of user input events and apps’ requests to access
privacy-sensitive sensors via a callback mechanism. Also,
the AWare MONITOR implements the logic for the opera-
tion binding creation and caching as well as the display
of binding requests and alerts to the user. User approvals
for binding requests are obtained by the AWare MON-
ITOR via authorization messages prompted to the user
on the mobile platform’s screen, as shown in Figure 8.
To protect the integrity of the trusted path for binding
requests, we prevent apps from creating windows that
overlap the AWare windows or modifying AWare win-
dows. To prevent overlapping, AWare leverages the An-
droid screen overlay protection mechanism. To prevent
unauthorized modiﬁcation, AWare implements the Com-
partmented Mode Workstation model [8] by using isolated
per-window processes forked from the Window Manager.
7.1 Control Points Available to the User
AWare provides the users with control points during au-
thorized use of privacy-sensitive sensors by apps. These
control points allow the users to control the apps’ use of
sensors and correct possible mistakes made during the
authorization process.
USENIX Association
26th USENIX Security Symposium    387
Figure 9: Architecture of the AWare authorization framework.
Figure 10: AWare security message dis-
played on the mobile platform’s sta-
tus bar notifying the user that
the
Instagram application is previewing
the back camera (B) for pictures. The se-
curity companion (e.g., a white ﬁsh) aids
the user in verifying the authenticity of
the authorization request. Each security
message includes the app identiﬁer (e.g.,
application name and identity mark) and
a text message specifying the ongoing
operation and the set of privacy-sensitive
sensors being accessed.
Figure 9 shows an overview of the AWare prototype
components and how the control points are activated. The
AWare MONITOR is designed to activate the AWare VI-
SUALIZER and the AWare LOGGER, upon the user autho-
rization of an operation binding.
7.1.1 Visualizing Ongoing Operations
AWare displays security messages on a reserved portion
of the screen, drawable only by the Window Manager
and not accessible by untrusted applications, to make
ongoing use of privacy-sensitive sensors visible to users
until they terminate. An example of security message is
shown in Figure 10. A security message includes the app
identiﬁer (e.g., application name and identity mark) and a
text message specifying the ongoing operation and the set
of privacy-sensitive sensors being accessed. The use of
security messages follows the principle of what the user
sees is what is happening [23], in fact, security messages
convey ongoing operations targeting privacy-sensitive
sensors when authorized by the user.
AWare leverages the Compartmented Mode Worksta-
tion principle [8] to ensure integrity and authenticity of
security messages. Also, AWare uses a security compan-
ion, a secret image chosen by the user, to aid users in
verifying the authenticity of security messages. We modi-
ﬁed the stock Android system user interface (SystemUI),
by adding an image view and a text view on the Android
status bar to display the AWare security messages spec-
ifying the application IDs and the ongoing operations,
whenever the AWare MONITOR authorizes system ser-
Figure 11: AWare Users may leverage AWare logs to take retrospective
security actions. The ﬁgure at the top right shows the list of operations
targeting the camera in authorized sessions. The ﬁgure at the bottom
right summarizes attempted accesses to privacy-sensitive sensors by
the SimpleFilters app, as examples of stealthy operations. The
security companion chosen by the user (e.g., a white ﬁsh) aids the user
in authenticating the logs.
vices to operate on privacy-sensitive sensors on behalf
of applications. Also, the AWare prototype leverages the
Android screen overlay mechanism to detect when appli-
cations or background services draw over the application
currently in the foreground, to prevent GUI overlay.
Further, security messages are made visible to the user
even if the application runs in full-screen mode. Re-
serving a small portion of the screen (5%) to convey a
security message is a reasonable trade-off for preventing
unwanted user distraction while delivering critical con-
tent in a timely and appropriate manner [32]. Our evalua-
tion with existing full-screen applications (Section 8.1.2)
reports that security messages do not impair the correct
functioning of full-screen apps. A transparent background
can also be used to reduce overlap with the foreground
application’s window. Lastly, the user can be given the
option to explicitly replace the on-screen notiﬁcation with
a periodic distinctive sound or a hardware sensor-use in-
dicator LED.
7.1.2 Logging Authorized Operations
AWare produces real-time logs of any operation explic-
itly authorized by the user and of any attempted use of
privacy-sensitive sensors from applications without a user-
initiated input. AWare makes attempted stealthy accesses,
by installed applications, visible to users via full-screen
alert messages and by producing a distinctive sound, or
by enabling a hardware sensor-use indicator LED. AWare
then allows the user to either uninstall suspicious applica-
tions or to terminate ongoing suspicious operations. Logs
are visible to users via a system application called AWare
LOGGER, which is accessible via the applications menu
or by tapping on the AWare security messages/alerts dis-
388    26th USENIX Security Symposium
USENIX Association
played on the mobile platform’s screen. Each log entry
reports information regarding the app ID, date, time, and
the privacy-sensitive sensors target of the operation, as
shown in Figure 11. Logs are not accessible to applica-
tions to preserve their integrity and avoid the creation of
side channels.
8 AWare Evaluation
We investigated the following research questions.
To what degree is the AWare operation binding concept
assisting the users in avoiding attacks? We performed a
laboratory-based user study and found that the operation
binding enforced by AWare signiﬁcantly raised the bar
for malicious apps trying to trick the users in authoriz-
ing unintended operations, going from an average attack
success rate of 85% down to 7%, on average, with AWare.
What is the decision overhead imposed to users due to
per-conﬁguration access control? We performed a ﬁeld-
based user study and found that the number of decisions
imposed to users by AWare remains conﬁned to less than
four decisions per app, on average, for the study period.
How many existing apps malfunction due to the inte-
gration of AWare? How many operations from legitimate
apps are incorrectly blocked by AWare (i.e., false posi-
tives)? We used a well-known compatibility test suite to
evaluate the compatibility of AWare with existing apps
and found that, out of 1,000 apps analyzed, only ﬁve
of them malfunctioned due to attempted operations that
AWare blocked as potentially malicious. However, these
malfunctioning instances have been resolved by features
developed in subsequent versions of the AWare prototype.
What is the performance overhead imposed by AWare
for the operation binding construction and enforcement?
We used a well-known software exerciser to measure the
performance overhead imposed by AWare. We found that
AWare introduced a negligible overhead on the order of
microseconds that is likely to be not noticeable by users.
8.1 Preliminaries for the User Studies
We designed our user studies following suggested prac-
tices for human subject studies in security to avoid com-
mon pitfalls in conducting and writing about security and
privacy human subject research [43]. Participants were in-
formed that the study was about mobile systems security,
with a focus on audio and video, and that the involved
researchers study operating systems security. An Institu-
tional Review Board (IRB) approval was obtained from
our institution. We recruited user study participants via
local mailing lists, Craigslist, and local groups on Face-
book, and compensated them with a $10 gift card. We
excluded friends and acquaintances from participating in
the studies to avoid acquiescence bias. Participants were
given the option to withdraw their consent to participate at
any time after the purpose of the study was revealed. For
all the experiments, we conﬁgured the test environment
on Nexus 5X smartphones and used a background service,
automatically relaunched at boot time, to log participants’
responses to system messages/alerts and all user input
actions taken by participants while interacting with the
testing apps.
8.1.1 Laboratory-Based User Study
We performed a laboratory-based user study to evaluate
the effectiveness of AWare in supporting users in avoiding
attacks by malicious apps and compared it with alternative
approaches.
We divided the participants into six groups. Partic-
ipants in Group1 interacted with a stock Android OS
using install-time permissions. Participants in Group2
interacted with a stock Android OS using ﬁrst-use permis-
sions. Participants in Group3 interacted with a modiﬁed
version of the Android OS implementing input-driven
access control, which binds user input events to the op-
eration requested by an app but does not prove the app’s
identity to the user. Participants in Group4 interacted
with a modiﬁed version of the Android OS implementing
the ﬁrst-use permissions and a security indicator that in-
forms the users about the origin of the app (i.e., developer
ID [6]). Participants in Group5 interacted with a modiﬁed
version of the Android OS implementing the use of access
control gadgets [41] including basic user interface conﬁg-
uration checks (i.e., no misleading text, UI background
and the text must preserve the contrast, no overlay of UI
elements, and user events occur in the correct location
at the correct time [39]) and timing checks for implicit
authorizations. Lastly, participants in Group6 interacted
with a modiﬁed version of the Android OS integrating the
AWare authorization framework.