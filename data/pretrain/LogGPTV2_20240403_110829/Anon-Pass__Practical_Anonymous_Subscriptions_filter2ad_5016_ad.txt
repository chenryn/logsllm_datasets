the lockout period5 between uses of an unlimited ride card.
Anon-Pass can provide anonymous authentication for a transit
subscription pass. A long epoch helps limit how often a user
can access; however, this is not enough to prevent two users
from sharing a single credential wherein the ﬁrst user uses the
credential immediately before an epoch change, and a second
uses the same credential immediately afterward. If a service
requires multiple authenticated tokens for the same credential
upon access, then this form of sharing is prevented.
V. IMPLEMENTATION
the cryptographic protocol
We implement
in a library,
libanonpass, using the Pairing Based Cryptographic Li-
brary [21], PolarSSL6 for clients, and OpenSSL7 for the server.
Both the client and server operations are encapsulated in this
library’s 1,434 lines of code.8 The library includes a number
of management functions for initializing and clearing data
structures, and protocol functions for creating and verifying
requests for registration, login, and re-up.
We arrange terms to minimize exponentiations and we reuse
partial computations in the login and re-up zero-knowledge
proofs to make them more efﬁcient. We further improve
performance by implementing a multi-epoch authorizing zero-
knowledge proof for verifying re-up tokens during a login.
In addition, we use two different forms of preprocessing:
preprocessing the pairing operation and precomputing a known
portion of the client login message. Table I shows the improve-
ments of these optimizations.
To show the ﬂexibility of our protocol, we implement
a number of usage scenarios including a streaming music
service, an anonymous unlimited-use public transit pass, and
a third party authentication proxy. These applications are all
large enough to highlight implementation issues speciﬁc to
each context.
The authentication server is implemented as a 926 line
the lightweight HTTP server Nginx9. Nginx
module for
uses a process pool rather than a thread pool for handling
concurrency and therefore minimizes synchronization. The
only shared state for Anon-Pass is a hash table of currently
active login tokens. In our prototype, we dedicate a server
to maintaining this hash table whose contents are get and set
using RPCs. The performance of this hash table server is not a
5http://www.mta.info/metrocard/compare.htm
6https://polarssl.org/
7http://www.openssl.org/
8Counted by SLOCCount. http://www.dwheeler.com/sloccount/
9http://nginx.org/
326
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
bottleneck for any of our workloads. In a deployment situation,
the hash table could be a distributed hash table (DHT) [28],
[22] run by the service provider. DHTs are a common part of
the software infrastructure in data centers.10
The resource gateway is implemented as a 443 line Nginx
module. The module performs all of the operations needed
by the application service. It can checks and updates session
information for clients, and terminates connections when an
unauthenticated request is made or a response is returned. Each
of these operations is designed to be as simple as possible and
could be merged with a frontend server or load balancer.
The basic client user agent consists of two pieces. There
are 789 lines of code that handle the client connection and
interface with libanonpass, and there are 357 lines of
code that handle conﬁguration parsing and the client state
machine. The protocol messages are sent by using cookies to
simplify server-side parsing and minimize client application
modiﬁcations.
In the rest of this section, we will talk about the structure
of each of these applications and the speciﬁc implementation
changes needed for each.
A. Streaming Music Service
We implement a streaming music service over HTTPS
by exposing media from web accessible URIs. The service
directly implements our anonymous credential scheme and
allows a user to choose the granularity of an anonymous
session as either a full playlist or as an individual song. We
modify 54 lines of VLC11 to communicate with our user-agent
and pass our session token as an additional cookie.
Our music service allows users to download songs, but we
rate-limit playback. Rate limiting reduces network bandwidth
usage, which allows our service to support more clients with
jitter-free service. Rate limiting also reduces the amount of
data a client can buffer during an epoch. If a client loses its
anonymous service in the next epoch, it will only have a small
amount of buffered data. The music service has no ability to
enforce access control for that buffered data.
B. Public Transit Pass
We implement a public transit pass as an Android appli-
cation. Currently, public transit providers who issue month
long or week long “unlimited” access passes limit user access
to prevent cheating. Without safeguards, a user could give
her pass to all of her friends to ride for free. Anonymous
subscriptions are able to provide these safeguards without
revealing user’s identity (so users’ movements cannot be
tracked).
As an example, the average daily ridership of BART in the
San Francisco Bay Area for the months of August through
October, 2012 is 401,323 people on weekdays [30]. While
we do not have data on trafﬁc peaks, the total load is easily
10For example, the Cassandra key-value store, which can easily be used
as a DHT, is used by a wide variety of commercial data centers. See http:
//www.datastax.com/cassandrausers.
11http://www.videolan.org/vlc/index.html
handled by Anon-Pass. A single three-epoch login veriﬁcation
takes approximately 8.4 ms on our system which is very
close to the base cost of login veriﬁcation of 7.9 ms. One
modern CPU core on a server can run the 400,000 veriﬁcations
in just a little under an hour. These operations are trivially
parallelizable across multiple cores and machines.
We use the Java Native Interface (JNI) to call Anon-Pass
from an Android application. The Android application has a
simple interface with a single button to generate a login and
two re-up additional PRFs. It then displays this data as a quick
response (QR) code for a physical scanner to read. If a transit
provider chooses a 6 minute epoch length, then this would
create a 12 to 18 minute window in which a login attempt
from the same phone would fail.
Other anonymous subscription systems such as Unlinkable
Serial Transactions [29] or anonymous blacklisting systems
such as Nymble [17] or BLAC [31] require network connec-
tivity at the time when a client uses an authentication token.
When using a blacklisting system, a user wants to proactively
fetch the blacklist to ensure that she is not on the list prior
to contacting a server, otherwise she could be deanonymized.
The size of a blacklist can grow quickly; for example, BLAC
adds 0.27KB of overhead per blacklist entry. When using a
UST-like system, the user must receive the next token when
a prior token is used up (but not before). Anon-Pass is ideal
for subway systems where network phone coverage is spotty
at best, since it only needs to communicate in one direction
at the subway entry gate.
C. Access Proxy
We implement a server to allow users to proxy access to
websites. In addition, the server could authenticate for users
with legitimate accounts provided by the service to access
news sites and other content. All trafﬁc and accesses appear to
originate from the same entity and it is up to the proxy service
to multiplex the user credentials. Users’ anonymity leverages
both the wide variety of accessible services as well as the
number of proxy users.
To approximate an access proxy, we sign up for accounts at
a number of news websites. The service consists for two parts:
the scraper logs into the news sites using valid credentials and
caches the results for later use, and the proxy injects cached
cookies into authenticated user requests. A legitimate service
running this type of proxy would likely need to work with
the news sites to better control creation of user accounts and
history. Ideally, the proxy service would provide ephemeral
user accounts for a client session; however, current systems
do not allow us to easily accomplish this task.
As an approximation of the necessary steps, we use a cache
of cookies, but allow more than one client to share a real user
account. The proxy cycles through its list of cookies for a
given news site rather than generating ephemeral accounts or
registering for new legitimate accounts.
VI. EVALUATION
We evaluate Anon-Pass
through a series of micro-
benchmarks and several larger systems. The authentication and
327
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
application servers run on two Dell Optiplex 780s, each of
which has a quad-core 2.66 GHz Intel Core 2 CPU, 8 GB of
RAM, and uses Ubuntu Linux 12.04. The hash server runs on
a Dell 755 with an older generation quad-core 2.66 GHz Intel
Core 2 CPU, only 4 GB of RAM, and also uses Ubuntu Linux
12.04. The elliptic pairing group is a Type A (in the naming
conventions of the PBC library) symmetric pairing group with
a 160-bit group order and 512-bit base ﬁeld, and the ECDSA
signature uses a 160-bit key.
A. Comparison to Prior Work
We compare the computational complexity of our scheme
to prior work by counting the computationally expensive op-
erations (i.e., group exponentiations and pairings) in each. We
only examine server-side computation, as this is the limiting
factor in the scalability of the system. The main competing
schemes are those from Camenisch et al. [4] and an adaptation
of a scheme from Brickell and Li [3].
Camenisch et al. [4] mention two alternatives for their
construction, using either an RSA-based signature scheme [6]
or the CL signature scheme we use. We found the description
of their RSA-based instantiation insufﬁcient to produce an
implementation, but note that the performance of this variant
will be hurt by the need to use large moduli to prevent known
factorization attacks. The second variant, using the same CL
signatures we use, is not described fully in their paper.
Brickell and Li [3] propose a scheme for direct anonymous
attestation (DAA) with controlled linkability which could
be adapted to give an anonymous subscription scheme with
conditional linkage. The correspondence between their scheme
and ours is that
the basename which controls linkability
in their scheme corresponds to the epoch number in our
scheme. Using different basenames per epoch ensures that the
(B, K) components of their signature are equal for the same
client secret if submitted in the same epoch and unlinkable
otherwise. Re-up for client secret f can be performed between
signatures (B1, K1) and (B2, K2) in their scheme via the
proof of knowledge
PoK{f | B
f
1 = K1 ∧ B
f
2 = K2},
though we stress that they do not consider this idea in their
work. Their scheme requires the use of asymmetric pairings.
With the PBC library, we measured that asymmetric pairings
lead to prohibitively slow login operations. (See Table III.)
Additionally, many of the curve families supported in PBC,
including all those with asymmetric pairings, have high em-
bedding degree. While high embedding degree leads to lower
ﬁeld sizes for G1 and G2 for a given level of security, it
complicates multiplication in GT , which can lead to a slower
re-up operation.
In comparing the above to our scheme we use notation from
Brickell and Li [3] to describe operation counts: Each count
is written as a sum of individual operation types. A term nGx
indicates n multiexponentiations in group G with x bases. P
indicates a pairing, and P p indicates a preprocessable pairing,
Login
Scheme
G3
Anon-Pass
Pairing-based DAA ([3]) G2
Clone Wars ([4])
T + G4
1 + G2
T + 8P p
2 + G4
T + P
Comparison impossible, see text
Re-up
2G2
T
2G2
T
†
SERVER-SIDE OPERATION COUNTS FOR THE DIFFERENT CRYPTOGRAPHIC
SCHEMES. † INDICATES ADDITIONS THAT WE PROPOSE TO EXISTING
TABLE II
SCHEMES.
Group Type G1 Exp G2 Exp GT Exp
A512 ECC
0.2
1.5
D159 ECC
F160 ECC
6.0
2.4
0.8
0.8
2.4
6.5
1.5
Pairing (Preprocessed)
1.8 (0.8)
5.1 (3.9)
27.7 (27.7)
OPERATION COSTS FOR DIFFERENT GROUPS PROVIDING 80-BIT SECURITY.
ALL TIMES ARE IN MILLISECONDS.
TABLE III
that is, one with one argument ﬁxed after server-side setup is
complete. Results are given in Table II.
We give measured operation costs in terms of CPU uti-
lization in Table III for different families of curves where
all components of the system are at least an 80-bit security
level. This implies EC group orders of at least 160 bits and
ﬁnite ﬁeld sizes of at least 1024 bits [26]. From these raw
operation times, we estimate CPU utilization for operations
in Table IV. We estimate multiexponentiation times based on
ratios of the number of multiplications required when we use
a simultaneous k-ary exponentiation for the optimal k value.
For 2, 3, and 4 bases with 1024-bit exponents, the costs
are 1.1, 1.3, and 1.4 times that of an optimal k single base
exponentiation respectively. See [23] for information on basic
exponentiation and multiexponentiation techniques.
B. Measured Operation Costs
Table V presents the base time for the protocol operations.
Here the operations are run in isolation. We did not use multi-
exponentiation in our prototype because the PBC library does
not implement the operations; however, this could be added
to further reduce the cost. In addition, there are overheads
when integrating the protocols into a full system. Figure 2
Scheme
Anon-Pass
Pairing-Based DAA [3]
Group
A512
D159
Login
6.9
15.2 (2.2×)
Re-up
0.44
3.3 (7.5×)
SERVER-SIDE OPERATION COSTS FOR DIFFERENT SCHEMES USING AN
OPTIMAL GROUP FOR RE-UP. ALL TIMES ARE IN MILLISECONDS.
TABLE IV
Protocol
Registration
Login
Re-up
Client
Create message
Verify signature
Create message
Create message
10.4
13.0
13.5
1.3
Server
Verify message
Sign message
Verify message
Verify message
7.3
12.5
7.9
0.7
RAW PROTOCOL OPERATION TIME IN MILLISECONDS.