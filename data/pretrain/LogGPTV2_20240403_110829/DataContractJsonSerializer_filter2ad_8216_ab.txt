构造函数中将`new List { typeof(WindowsPrincipal)}`传入，也能RCE。
除了上文三种方法外，再引入一个新的东西IDataContractSurrogate 接口
# IDataContractSurrogate
在DataContractJsonSerializer构造函数中有如下重载
    //
            // 摘要:
            //     初始化 System.Runtime.Serialization.Json.DataContractJsonSerializer 类的新实例，以便序列化或反序列化指定类型的对象。
            //     此方法还指定了可在对象图中呈现的已知类型的列表、要序列化或反序列化的最大图项数、是忽略意外数据还是发出类型信息以及自定义序列化的代理项。
            //
            // 参数:
            //   type:
            //     序列化或反序列化的实例的类型。
            //
            //   knownTypes:
            //     一个包含内容的根元素名称的 System.Xml.XmlDictionaryString。
            //
            //   maxItemsInObjectGraph:
            //     System.Collections.Generic.IEnumerable`1 的一个 System.Type，其中包含可在对象图中呈现的类型。
            //
            //   ignoreExtensionDataObject:
            //     若要在序列化时忽略 true 接口并在反序列化时忽略意外数据，则为 System.Runtime.Serialization.IExtensibleDataObject；否则为
            //     false。 默认值为 false。
            //
            //   dataContractSurrogate:
            //     一个用于自定义序列化过程的 System.Runtime.Serialization.IDataContractSurrogate 实现。
            //
            //   alwaysEmitTypeInformation:
            //     若要发出类型信息，则为 true；否则为 false。 默认值为 false。
            public DataContractJsonSerializer(Type type, IEnumerable knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, IDataContractSurrogate dataContractSurrogate, bool alwaysEmitTypeInformation);
其中提到了dataContractSurrogate参数，用于自定义序列化过程的
System.Runtime.Serialization.IDataContractSurrogate 实现。
因为DataContractJsonSerializer只有已知类型knownTypes的对象才能被序列化，而在实体类中不可避免的需要接入其他没有被标记DataContract特性的类，而没标记DataContract特性，就不在konwnTypes中，就不能被序列化。所以引入IDataContractSurrogate接口，作用是控制实体类引入了不在knownTypes中的类型实例应该如何被序列化存储。
写一个demo看看。
    using System;
    using System.CodeDom;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.IO;
    using System.Reflection;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Json;
    using System.Xml.Serialization;
    namespace DataContractJsonDeserializer
    {
        [DataContract]
        public class Person
        {
            [DataMember]
            public string Name { get; set; }
            [DataMember]
            public Dog dog;
        }
        public class Dog
        {
            public string Name { get; set; }
        }
        [DataContract]
        class DogSurrogated
        {
            [DataMember()]
            public string xmlData;
        }
        class DogSurrogate : IDataContractSurrogate
        {
            public object GetCustomDataToExport(MemberInfo memberInfo, Type dataContractType)
            {
                Console.WriteLine("GetCustomDataToExport invoked");
                return null;
            }
            public object GetCustomDataToExport(Type clrType, Type dataContractType)
            {
                Console.WriteLine("GetCustomDataToExport invoked");
                return null;
            }
            public Type GetDataContractType(Type type)
            {
                Console.WriteLine($"GetDataContractType invoked, {type}");
                if (type.IsAssignableFrom(typeof(Dog)))
                {
                    return typeof(DogSurrogated);
                }
                return type;
            }
            public object GetDeserializedObject(object obj, Type targetType)
            {
                Console.WriteLine($"GetDeserializedObject invoked {obj}");
                if (obj is DogSurrogated)
                {
                    DogSurrogated ps = (DogSurrogated)obj;
                    XmlSerializer xs = new XmlSerializer(typeof(Dog));
                    return (Dog)xs.Deserialize(new StringReader(ps.xmlData));
                }
                return obj;
            }
            public void GetKnownCustomDataTypes(Collection customDataTypes)
            {
                Console.WriteLine($"GetKnownCustomDataTypes invoked. {customDataTypes}");
            }
            public object GetObjectToSerialize(object obj, Type targetType)
            {
                Console.WriteLine($"GetObjectToSerialize invoked,{obj},{targetType.FullName}");
                if (obj is Dog)
                {
                    DogSurrogated ps = new DogSurrogated();
                    XmlSerializer xs = new XmlSerializer(typeof(Dog));
                    StringWriter sw = new StringWriter();
                    xs.Serialize(sw, (Dog)obj);
                    ps.xmlData = sw.ToString();
                    return ps;
                }
                return obj;
            }
            public Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData)
            {
                Console.WriteLine("GetReferencedTypeOnImport invoked");
                Console.WriteLine("\t Type Name: {0}", typeName);
                if (typeName.Equals("DogSurrogated"))
                {
                    Console.WriteLine("Returning Dog");
                    return typeof(Dog);
                }
                return null;
            }
            public CodeTypeDeclaration ProcessImportedType(CodeTypeDeclaration typeDeclaration, CodeCompileUnit compileUnit)
            {
                Console.WriteLine("ProcessImportedType invoked");
                return typeDeclaration;
            }
        }
        public class Program
        {
            public static void Main(string[] vs)
            {
                Person person = new Person();
                person.Name = "jack";
                Dog dog = new Dog();
                dog.Name = "jjjj";
                person.dog = dog;
                List knownTypes = new List();
                DogSurrogate surrogate = new DogSurrogate();
                //DataContractSerializer surrogateSerializer = new DataContractSerializer(typeof(Person), knownTypes, Int16.MaxValue, false, true, surrogate);
                DataContractJsonSerializer dataContractJsonSerializer = new DataContractJsonSerializer(typeof(Person), knownTypes, int.MaxValue, false, surrogate, false);
                FileStream fs = new FileStream("1.txt", FileMode.OpenOrCreate);
                dataContractJsonSerializer.WriteObject(fs, person);
                fs.Close();
                Console.WriteLine(File.ReadAllText("1.txt"));
                Person p1 = (Person)dataContractJsonSerializer.ReadObject(File.Open("1.txt", FileMode.Open));
                Console.WriteLine($"person.Name:{p1.Name}\t person.dog.Name:{p1.dog.Name}");
                Console.ReadKey();
            }
        }
    }
输出结果
    GetDataContractType invoked, DataContractJsonDeserializer.Person
    GetObjectToSerialize invoked,DataContractJsonDeserializer.Person,DataContractJsonDeserializer.Person
    GetDataContractType invoked, DataContractJsonDeserializer.Dog
    GetObjectToSerialize invoked,DataContractJsonDeserializer.Dog,DataContractJsonDeserializer.DogSurrogated
    {"Name":"jack","dog":{"xmlData":"\u000d\u000a\u000d\u000a  jjjj\u000d\u000a"}}
    GetDataContractType invoked, DataContractJsonDeserializer.Dog
    GetDeserializedObject invoked DataContractJsonDeserializer.DogSurrogated
    GetDeserializedObject invoked DataContractJsonDeserializer.Person
    person.Name:jack         person.dog.Name:jjjj
其中Person标记了DataContract，但是其dog字段的类型Dog没有标记DataContract，所以新建了一个DogSurrogated类来表示Dog类型。
在代码中新建了DogSurrogate类实现IDataContractSurrogate接口方法，并将其传入DataContractJsonSerializer构造函数。
通过DogSurrogate代理DogSurrogated实体类进行序列化，在GetDataContractType判断实例类型
如果是Dog类就用DogSurrogated类替代，并通过xmlserializer进行序列化存储到DogSurrogated.xmlData字段。反序列化时再通过xml反序列化读取xmlData字段转回来
那么这边其实有两个安全问题。
  1. GetDataContractType的时候判断type是否可控
  2. GetDeserializedObject GetObjectToSerialize 序列化反序列化时如果直接用其他反序列化formatter，那么也可能RCE。比如base64的binaryformatter。
# 审计视角
如上文所述，关注构造函数的参数type、knownTypes和自定义DataContractJsonSerializerSettings、自定义IDataContractSurrogate的实现。
# 后文
本文讲解了DataContractJsonSerializer的序列化和反序列化，并针对IDataContractSurrogate进行讲解。综合来讲DataContractJsonSerializer比较难利用。