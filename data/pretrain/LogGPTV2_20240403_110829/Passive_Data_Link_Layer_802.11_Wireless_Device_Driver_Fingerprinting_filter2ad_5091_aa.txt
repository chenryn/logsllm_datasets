title:Passive Data Link Layer 802.11 Wireless Device Driver Fingerprinting
author:Jason Franklin and
Damon McCoy
Passive Data Link Layer 802.11 Wireless Device Driver Fingerprinting
Jason Franklin1
Damon McCoy2
Jamie Van Randwyk5
Parisa Tabriz3
Vicentiu Neagoe4
Douglas Sicker6
Abstract
Motivated by the proliferation of wireless-enabled de-
vices and the suspect nature of device driver code, we
develop a passive ﬁngerprinting technique that identiﬁes
the wireless device driver running on an IEEE 802.11
compliant device. This technique is valuable to an at-
tacker wishing to conduct reconnaissance against a po-
tential target so that he may launch a driver-speciﬁc ex-
ploit.
In particular, we develop a unique ﬁngerprinting tech-
nique that accurately and efﬁciently identiﬁes the wire-
less driver without modiﬁcation to or cooperation from
a wireless device. We perform an evaluation of this ﬁn-
gerprinting technique that shows it both quickly and ac-
curately ﬁngerprints wireless device drivers in real world
wireless network conditions. Finally, we discuss ways to
prevent ﬁngerprinting that will aid in improving the secu-
rity of wireless communication for devices that employ
802.11 networking.
1 Introduction
Device drivers are a primary source of security holes in
modern operating systems [1]. Drivers experience er-
ror rates of three to seven times higher than other ker-
nel code, making them the poorest quality code in most
kernels [2]. There are a large number of different device
drivers available, each being a potentially large body of
code that is frequently modiﬁed to support new hard-
ware features. These factors and the fact that drivers
are often developed by programmers who lack intimate
knowledge of the operating system kernel contribute to
the disproportionately high number of bugs found in de-
vice drivers [3].
In general, device drivers execute in kernel space;
hence, exploiting a vulnerable driver leads to compro-
mise of the entire operating system. This threat is some-
what tempered by the fact that interacting with a driver
typically requires physical access to a system. As a re-
sult, most security holes in device drivers are difﬁcult to
exploit remotely. For instance, it is hard to remotely in-
teract with, much less exploit, a video or keyboard driver.
Classes of drivers exist with which it is possible to inter-
act without physical access to a system. Drivers for net-
work devices such as wireless cards, Ethernet cards, and
modems are examples.
In particular, wireless network
device drivers are easy to interact with and potentially
exploit if the attacker is within transmission range of the
wireless device. Today, the single most common and
widespread wireless devices are those conforming to the
IEEE 802.11 standards [4]. The vast number of 802.11
devices, the ease with which one may interact with their
drivers, and the suspect nature of driver code in general
has led us to evaluate the ability of an attacker to launch
a driver-speciﬁc exploit by ﬁrst ﬁngerprinting the device
driver.
Fingerprinting is a process by which a device or the
software it is running is identiﬁed by its externally ob-
servable characteristics. In this paper, we design, imple-
ment, and evaluate a technique for ﬁngerprinting IEEE
802.11a/b/g wireless network drivers. Our approach is
based on statistical analysis of the rate at which common
802.11 data link layer frames are transmitted by a wire-
less device. Since most wireless exploits are dependent
on the speciﬁc driver being used, wireless device driver
ﬁngerprinting can aid an attacker in launching a driver-
speciﬁc exploit against a victim whose device is running
a vulnerable driver.
Our technique is completely passive, meaning that a
ﬁngerprinter (attacker) needs only to be able to mon-
itor wireless trafﬁc from the ﬁngerprintee (target, vic-
tim). This makes it possible for anyone within transmis-
sion range of a wireless device to ﬁngerprint the device’s
wireless driver. Passive ﬁngerprinting techniques have
the advantage over active approaches in that they do not
transmit data, making prevention of such techniques dif-
ﬁcult. If an attacker can passively determine which driver
a device is using, he can successfully gain information
about his victim without fear of detection.
USENIX Association
Security ’06: 15th USENIX Security Symposium
167
Our ﬁngerprinting technique relies on the fact that
most stations actively scan for access points to connect
to by periodically sending out probe request frames. The
algorithm used to scan for access points is not explic-
itly deﬁned in the 802.11 standard. Therefore, it is up
to the developers of device drivers to implement their
own method for probing. This lack of an explicit spec-
iﬁcation for a probing algorithm in the 802.11 stan-
dard has led to the development of many wireless de-
vice drivers that perform this function entirely differ-
ently than other wireless device drivers. Our ﬁngerprint-
ing technique takes advantage of these implementation-
dependent differences to accurately ﬁngerprint a driver.
Speciﬁcally, our method is based on statistical analysis
of the inter-frame timing of transmitted probe requests.
A timing-based approach has a number of advantages
over a content-based approach. Primary among these
is the fact that coarse-grained timing information is pre-
served despite the encryption of frame content as speci-
ﬁed by security standards such as Wired Equivalent Pri-
vacy (WEP) or 802.11i [5].
Fingerprinting an 802.11 network interface card (NIC)
is not a new concept. Many tools exist, such as Ethe-
real [6], that use the wireless device’s Media Access
Control (MAC) address to identify the card manufac-
turer and model number. A MAC address is an ostensi-
bly unique character string that identiﬁes a speciﬁc phys-
ical network interface. The IEEE Standards Associa-
tion assigns each NIC manufacturer a special three-byte
code, referred to as an Organizationally Unique Identiﬁer
(OUI), which identiﬁes a particular manufacturer. While
not part of the standard, most manufacturers use the next
byte to specify the model of the NIC. There are a few no-
table advantages to using our method instead of relying
on the information contained in the captured MAC ad-
dress. First, the MAC address only identiﬁes the model
and manufacturer of the NIC. Our technique ﬁngerprints
the device driver (which resides at the operating system
level), where the bulk of exploits rest. Second, some
NICs can operate using multiple drivers, implying that
the MAC address would not be enough information to
identify what driver the NIC was using. Finally, whereas
the MAC address is easily alterable in most operating
systems, the features used by our passive technique are
not a conﬁgurable option in any of the drivers tested.
Our testing demonstrates an accuracy for our method
in identifying the driver that ranges from 77-96%, de-
pending on the network setting. Our technique requires
only a few minutes worth of network data to achieve this
high level of accuracy. We also conﬁrm that the tech-
nique can withstand realistic network conditions.
Contributions The main contributions of this paper
is the design, implementation, and evaluation of a pas-
sive wireless device driver ﬁngerprinting technique. Our
technique is capable of passively identifying the wireless
driver used by 802.11 wireless devices without special-
ized equipment and in realistic network conditions. In
addition, we demonstrate that our technique is accurate,
practical, fast, and requires little data to execute.
The remainder of the paper is organized as follows.
Background material is presented in Section 2. Section 3
presents the design for our wireless device ﬁngerprinting
technique. Section 4 describes the implementation of our
ﬁngerprinting technique and Section 5 presents our ex-
perimental results and evaluation of our technique under
realistic network conditions. Section 6 presents the limi-
tations of our technique and Section 7 discusses possible
ways to prevent driver ﬁngerprinting. Finally, Section 8
examines related work and we conclude in Section 9.
2 Background: IEEE 802.11 Networks
Wireless technologies are encroaching upon the tradi-
tional realm of “ﬁxed” or “wired” networks. The most
widely adopted wireless networking technology thus far
has been the 802.11 networking protocol, which consists
of six modulation techniques, the most of common of
which are the 802.11a, 802.11b, and 802.11g standard
amendments. The price erosion and popularity of 802.11
capable hardware (especially 802.11b/g) has made wire-
less networks both affordable and easy to deploy in a
number of settings, such as ofﬁces, homes, and wire-
less hot spots. Because of this, 802.11 is currently the
most popular and common non-telephony communica-
tion protocol available for wireless communication [7].
The 802.11 standard deﬁnes a set of protocol require-
ments for a wireless MAC, or medium access control,
which speciﬁes the behavior of data link layer commu-
nication between stations in a wireless network. A sta-
tion is simply a device with wireless capabilities, such
as a laptop or PDA with a wireless networking inter-
face. Throughout this paper, we often refer to stations
as clients. Most 802.11 networks operate in infrastruc-
ture mode (as opposed to ad-hoc mode) and use an ac-
cess point (AP) to manage all wireless communications;
it is this type of network that is the setting for our ﬁnger-
printing technique. An example of a simple infrastruc-
ture network with three clients and one access point is
depicted in Figure 1.
A key component of the 802.11 standard is the MAC
speciﬁcation that outlines the function of various com-
munication frames. The MAC coordinates access to the
wireless medium between stations and controls transmis-
sion of user data into the air via control and manage-
ment frames. Higher-level protocol data, such as data
produced by an application, is carried in data frames.
All 802.11 MAC frames include both a type and sub-
type ﬁeld, which are used to distinguish between the
three frame types (control, management, and data) and
168
Security ’06: 15th USENIX Security Symposium
USENIX Association
AP
Wireless
Medium
Client
Client
Client
Figure 1: An infrastructure mode IEEE 802.11 network.
various subtypes. We consider only management frames
in our passive ﬁngerprinting technique, and speciﬁcally
focus on probe request frames. Because of this, we only
describe the most pertinent MAC frames communicated
when a client joins a wireless network, and refer the
reader to the IEEE 802.11 standard speciﬁcation [4] for
a more detailed description of MAC framing.
Each mobile client must identify and associate with an
access point before it can receive network services. In a
process called active scanning, clients use probe request
frames to scan an area for a wireless access point, pro-
viding the data rates that the client can support inside
ﬁelds of the probe request. If an access point is compati-
ble with the client’s data rates, it sends a probe response
frame to acknowledge the request. Once a client identi-
ﬁes a network and authenticates to the access point via an
authentication request and authentication response, the
client can attempt to join the network by issuing an as-
sociation request. If the association is successful, the ac-
cess point will respond to the client with an association
response that includes a unique association ID for future
communications. At this point, all communication be-
tween a client and another machine, whether it resides
within the wireless network or is located outside of it, is
routed through and controlled by the access point.
3 Fingerprinting Approach
Our ﬁngerprinting technique is solely concerned with the
active scan function in wireless clients. When actively
scanning, clients send probe request frames to elicit re-
sponses from access points within transmission range.
The IEEE 802.11 standard describes the active scan func-
tion of a client as follows. For each channel, the client
broadcasts a probe request and starts a timer. If the timer
reaches MinChannelTime and the channel is idle, the
client scans the next channel. Otherwise, the client waits
until the timer reaches MaxChannelTime, processes the
received probe response frames and then scans the next
channel. Further detailed speciﬁcation of the active scan-
ning function is not provided in the IEEE 802.11 stan-
dard. As a result, implementing active scanning within
wireless drivers has become a poorly guided task. This
has led to the development of many drivers that perform
probing using slightly different techniques. By charac-
terizing these implementation-dependent probing algo-
rithms, we are able to passively identify the wireless
driver employed by a device.
A number of factors affect the probing behavior of
a client and make accurate ﬁngerprinting without client
cooperation a challenging task. From the perspective
of an external ﬁngerprinter, the probing behavior of a
client is dependent on unobservable internal factors such
as timers, and on uncontrollable external factors such as
background trafﬁc. A robust ﬁngerprinting method can-
not rely on client cooperation or assume a static envi-
ronment, hence our technique uses machine learning to
develop a model of a driver’s behavior. This model is
then used for future identiﬁcation.
Having explained the intuition behind our technique,
we turn our attention to two examples of representative
probing behavior. Figure 2(a) and Figure 2(b) are plots
of the time delta between arriving probe request frames
as transmitted by two different wireless drivers. Both ﬁg-
ures clearly depict a distinctly unique cyclic pattern. We
further describe the pertinent features of Figure 2(b) as a
way to characterize the differences between the probing
patterns. Figure 2(b) is composed of a repeating pulse
with an approximate amplitude of 50 seconds. These
large pulses are occasionally preceded and/or followed
by much smaller pulses ranging from 1-5 seconds. These
pulses indicates that probing was occurring in bursts of
probe request frames sent out, on average, every 50 sec-
onds.
Upon closer inspection, one notices that the cyclic pat-
tern exhibited by the driver probing is characterized by
small variations. Our observations reveal there are two
main reasons for this. The ﬁrst reason is due to loss
caused by signal interference. A ﬁngerprinter could sig-
niﬁcantly reduce this type of loss by using a higher gain
antenna found on commercial grade wireless cards. The
second source of variation comes from wireless drivers
continuously cycling through all eleven channels in the
2.4 GHz ISM band in search of other access points. The
channel cycling can be considered an additional source
of loss since probe request frames transmitted on unmon-
itored channels cannot be observed. Multiple wireless
cards could be used to monitor all eleven channels si-
multaneously; however, we make the more realistic as-
sumption that a ﬁngerprinter has a single wireless card
that can only monitor a small portion (e.g. one channel
at any point in time) of the eleven channels. This loss
indicates that some probe requests are missed, and sta-
tistical approaches are needed to compensate for the lost
frames. Given the data described above, we character-
USENIX Association
Security ’06: 15th USENIX Security Symposium
169
)
s
d
n
o
c
e
s
(
e
m
a
r
f
i
s
u
o
v
e
r
p
m
o
r
f
a
t
l
e
d
e
m
T
i
60
50
40
30
20
10
0
0
40
20
Observed Frame Number
60
80
100
(a) D-Link driver for the D-Link DWL-G520 (802.11b/g)
PCI wireless NIC
)
s
d
n
o
c
e
s
(
e
m
a
r
f
i
s
u