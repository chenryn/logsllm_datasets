correction using this synchronization signal.
(a) Resilient Synchronization Signal: In order to provide re-
silience against destructive interference and changes in the
network structure, Chorus designs the synchronization signal
sent from multiple nodes to be uncorrelated. Speciﬁcally, each
node chooses a random signal to be transmitted on each re-
source element used for synchronization, and sends this signal
as a repeated pattern in the synchronization subcarriers every
5 milliseconds. Sending a different random signal from each
node ensures that the synchronization signals from different
transmitters do not destructively combine in all the subcarriers
independent of the channels from the different transmitters to
every receiver. The receiver then correlates successive copies
of the synchronization signal to compute the phase change
accumulated in the 5 millisecond duration.
(a) Controller: Chorus formulates phase tracking as a control
problem. it then addresses it within the framework of robust
control, which is particularly suitable for dealing with uncer-
tainties and noisy feedback. Speciﬁcally, Chorus models the
system as a combination of a control block and a plant. The
objective of the control loop is to make the error signal, which
is the difference between the phase of the actual received syn-
chronization signal and the output phase of the plant (i.e., the
node), go to zero. The output phase of the plant is used to
466
Chorus: Truly Distributed Distributed-MIMO
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Measurement
 noise
Control Block
Plant
Reference
(Phase of  Sync)
+
-
FIR
Filter
Robust 
Control
Smooth Freq 
Integrator
+
Estimator
RF and 
Baseband
Delay
Output
Crystal
Figure 3—A Block-diagram of Chorus’s Controller. Chorus uses a robust controller which takes as input a smoothed version of the phase error. The controller
output is used to update a frequency drift and phase update. The plant refers to the controlled system which models the delays in the baseband.
modulate and demodulate the transmitted and received signals
at the node, and is intended to track the phase of the received
synchronization signal.
Fig. 3 shows a schematic of our system.
for coarse frequency offset correction, and leverages the LTE
frame structure for time synchronization as described in §7. It
then applies the coarse corrections in the baseband of the plant
before starting the controller.
• The control block takes as input an error signal correspond-
ing to the difference between the actual phase of the received
synchronization signal and the output phase of plant (with
added measurement noise). It then uses a Finite Impulse
Response (FIR) ﬁlter to reduce variability and smooth this
input signal. It feeds this smoothed value to a robust con-
troller that produces a phase correction to be used by the
plant.
• The plant consists of the RF and baseband systems which
incur some processing delay, and a correction module that
utilizes the phase output of the control block to perform fre-
quency and phase correction of the baseband system. Speciﬁ-
cally, the correction module uses the phase correction output
of the control block to produce a smoothed frequency esti-
mate, which it then feeds through an integrator to produce
an additional phase correction per sample. The output of the
integrator is added to the control block phase correction to
produce a combined phase correction. The local crystal has
frequency drift due to temperature and other variations, and
can be modeled as an additive disturbance to this combined
phase correction, which feeds into the baseband system.
Modeling tools provide support for designing such con-
trollers; speciﬁcally, the MATLAB Simulink toolbox can take
as input a model of the system, and produce a robust con-
troller [29]. However, typically, these controllers require the
system to be Linear Time Invariant (LTI). Unfortunately, phase
is non-linear since it wraps around. Hence, in order to use
these controllers effectively, one has to ensure that the system
operates in a range where the measured phase does not wrap
around. To ensure this, Chorus has an initialization phase that
estimates the coarse frequency and timing offset between the
synchronization signal and the local node, and corrects for it.
Chorus uses the standard OFDM CFO correction algorithm
7 LTE COMPATIBILITY
In this section, we describe how Chorus can be implemented
within the LTE protocol structure. Speciﬁcally, there are four
issues that need to be addressed in order to integrate Chorus
with LTE. We discuss these issues below.
7.1 Making Synchronization Signals
Transparent to End-User Devices
In earlier sections, we described how Chorus assigns different
synchronization frequencies to different layers. Of course, we
would like to transmit these synchronization signals in-band.
Furthermore, we would like these synchronization signals to be
transparent to existing end-user devices (called UEs in LTE).
Our basic idea is to make the synchronization signal look
like yet another user in the system. Only the small cells par-
ticipating in the Distributed-MIMO system understand how to
interpret the synchronization signal, and process it appropri-
ately, whereas regular user devices simply steer clear of these
frequency bands because they are not intended for them.
To achieve this, Chorus leverages the structure of LTE trans-
missions [16, 19, 20]. LTE transmissions are organized as
frames, with each frame being 10 ms long. Each frame can
be viewed as a time-frequency map. In particular, each frame
consists of 10 1 ms subframes. It is also divided in the fre-
quency domain into many subcarriers which are combined
using OFDM.
Users are allocated at the granularity of groups of subcarriers
for a subframe (Resource Block). Thus, we allocate the virtual
synchronization user two resource blocks each in subframe 0,
and subframe 5. A typical LTE channel of 10 MHz has 500
resource blocks in a frame. This amounts to a total overhead of
4/500, which is less than 1%. The overhead further decreases
467
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
E. Hamed et al.
with increasing channel width. Having allocated these resource
blocks for synchronization, Chorus maps the synchronization
signals for different layers to these resource blocks. Speciﬁ-
cally, we interleave the synchronization signals for the different
layers in these resource blocks, similar to the way user data is
interleaved.
7.2 Addressing FDD Systems
LTE systems come in two ﬂavors: TDD (Time Division Duplex)
which has the same frequency bands for uplink and downlink
and schedules uplink and downlink at different points in time,
and FDD (Frequency Division Duplex) which uses different
frequency bands for uplink and downlink, with both uplink and
downlink operating simultaneously at all times.
As we described above, to make the system transparent to
end-user devices, we need the synchronization signal to be
transmitted as if it were a virtual user. However, this means
that such signals would have to be transmitted on the downlink
frequencies for FDD systems. Small cells in FDD systems are
not capable of listening to downlink transmissions, and hence
cannot use these signals to synchronize. Conceptually, one
solution to this problem is to modify end-user devices to listen
to the synchronization signal on the downlink, synchronize to it,
and transmit a synchronization signal on the uplink. However,
this defeats the objective of not modifying end-user devices.
So, the solution is to simply have the operator deploy a few
special end-user devices that have been modiﬁed to support
this cascading of synchronization signals. We refer to these
boxes as Cascading End Users.2
7.3 Joining The Network
Initially, as a node decides to join the system, its phase might
not at all be coherent with other synchronized nodes in the
network. The node cannot simply start transmitting a synchro-
nization signal before it reaches a reasonable level of coherence.
Thus, when the node starts, it uses existing LTE synchroniza-
tion signals, speciﬁcally the Primary and Secondary Synchro-
nization Signals (PSS and SSS) that are transmitted by other
distributed-MIMO nodes, to obtain a coarse frequency offset
estimate and time synchronization to a frame boundary. Hav-
ing obtained these estimates, the Chorus node then determines
the synchronization layer to which it belongs, and starts its
controller. The controller then uses the synchronization signals
to start doing ﬁne tracking of the frequency offset, and reports
to the node when it has converged. At this point, the small
cell is fully synchronized and ready to join the distributed-
MIMO system by transmitting the synchronization signal on
its appropriate layer. The node also now joins the rest of the
2This does not mean that the operator actually deploys cellphones. The operator
deploys boxes that are similar in form factor to a picocell, but are signiﬁcantly
simpler – they do not need to do end-user data processing, and hence are not
limited by backhaul requirements or other deployment constraints.
distributed-MIMO nodes in transmitting PSS and SSS signals.
For FDD, the Cascading End Users will relay the PSS and SSS
on the uplink for use by the joining small cells.
7.4 Transmission
Now that small cells are part of the Distributed-MIMO net-
work, they can participate in joint transmission much like with
Coordinated Multi Point (CoMP) today. Speciﬁcally, the sys-
tem can use CSI-RS (Channel State Information Reference
Signals) to measure downlink channels and get feedback from
UEs, the UE-RS (UE-Speciﬁc Reference Signals) as pilots to
measure the beamformed downlink channel to end users, and
the actual data subcarriers for beamformed data transmission.
8 IMPLEMENTATION
We prototype Chorus using a joint software-hardware imple-
mentation. Our prototype is integrated with srsLTE [42], an
open source LTE stack library, and hence it is compatible with
LTE end user devices. The prototype runs on a custom pro-
grammable radio platform, which comprises of a Zedboard in-
tegrated with the Analog Devices RF frontend, FMCOMMS3.
The Zedboard has an FPGA connected to an ARM core by a
high-throughput, low latency bus, hence allowing for real-time
processing at the PHY layer. Our hardware implementation is
done using Verilog on the FPGA, and our software runs on the
ARM core.
We implement the components of Chorus in the different
software and hardware elements as follows:
• The layered architecture is implemented across both soft-
ware and hardware. Speciﬁcally, the hardware reports the
signal strength for the different synchronization layers to
our software, which determines which layer this small cell
node should belong to. The hardware then determines the
appropriate time-frequency pattern of the transmitted syn-
chronization signal based on this layer. Further, the initializa-
tion protocol described in §7 to determine time and coarse
frequency synchronization are implemented in hardware.
• Chorus’s controller that performs continuous synchroniza-
tion and ongoing tracking of the received synchronization
signal is implemented in hardware so as to be real-time and
responsive.
• The LTE frames for transmission are created jointly by soft-
ware and hardware. Speciﬁcally, the srsLTE software en-
codes and modulates the data, and produces protocol com-
pliant LTE frames, with both cell speciﬁc and user speciﬁc
information. The hardware translates this frame into the sig-
nal representation after augmenting it with synchronization
information depending on the layering information described
above.
468
Chorus: Truly Distributed Distributed-MIMO
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
• For joint transmissions, we provide software knobs that
allow the system to pick between diversity, nulling and mul-
tiplexing. The hardware executes on these knobs by perform-
ing the correct precoding.
11 RESULTS
In this section, we evaluate Chorus’s performance and scaling
behavior.
9 TESTBED
Our evaluation testbed is distributed across one ﬂoor in our
building (80 × 60 feet). Depending on their location, nodes
can be separated by elevator banks, passages and inside walls
etc. The testbed contains a total of 20 nodes, with each node
emulating either an LTE small cell or an LTE client. We assign
one LTE small cell node to be in layer 0, and then run our
layering algorithm to assign layers to other small cells. We
control the transmitted power of our nodes to create different
interference neighborhoods, and emulate a larger geographic
area. For each experiment, we deploy our nodes around the
ﬂoor to create different topologies and layering of small cells.
The exact topology for each experiment is described along with
the experiment (See Fig. 8 for an example layout for one of the
experiments.) In order to replicate LTE conditions as closely as
possible, we run our experiments in the white space frequency
bands. Speciﬁcally, we use the 680 MHz center frequency,
which is very close to the 700-800 MHz where major US
operators such as Verizon and AT&T run their networks. LTE
has multiple possible channel widths, and our prototype is
implemented using the 3 MHz channel width. Chorus can
support any channel width; however, our choice of 3 MHz
is dictated by the FPGA size and processing power of our
platform.
10 METRICS
In this section, we describe the metrics we use to evaluate
Chorus.
(a) Phase Variance: The key function of distributed MIMO
protocols is to synchronize the oscillator phase across different
nodes. Thus, it is natural to evaluate Chorus in terms of the
phase variance across the distributed MIMO transmitters. In
an ideal scenario, the phase across multiple independent trans-
mitters will be coherent across time, and the variance will be
zero. The smaller the phase variance, the lower the interference
caused by misalignment of signals during joint transmission.
(b) Throughput Gain: We compute the ratio of the total
throughput that can be delivered by the network, i.e. by con-
current transmissions from multiple independent small cells to
multiple end user devices using a distributed-MIMO scheme,
to the throughput delivered by the network without distributed-
MIMO, i,e. with only one small cell transmitting to a single
end user device at a time.
11.1 Resilience to Multiple Nodes
Transmitting the Synchronization Signal
A key property of Chorus is that it achieves resilience to the
failure of individual nodes and changes in network connectivity
by having multiple nodes simultaneously transmit the synchro-
nization signal. In this section, we verify how the quality of
synchronization varies as the number of nodes transmitting the
synchronization signal increases.
For this experiment, we deploy the nodes in our testbed such
that there are three distinct areas of connectivity. We pick one
node and assign it to layer 0. We then run the layering protocol,
which then assigns layer 1 to all the nodes that can hear layer 0,
and layer 2 to all the nodes that can hear layer 1. By deﬁnition,
layer 1 nodes synchronize to the layer 0 node, and layer 2
nodes synchronize to the combined signal from layer 1 nodes.
We vary the number of LTE small cells in layer 1. We then
pick one node in layer 2 to synchronize to the combined layer
1 signal. Our goal is to evaluate how well the node in layer 2
is synchronized to the individual nodes in layer 1, though it is
using a combined synchronization signal from all the layer 1
nodes. For this, we pick one node in layer 1 to transmit data
concurrently with the node in layer 2, and receive these signals
at an auxiliary node.3 To enable the auxiliary node to measure
the phase difference between the layer 1 and layer 2 nodes,
we make them transmit in alternate symbols, i.e., the layer 1
node transmits in the odd numbered symbols, and the layer 2
node transmits in the even numbered symbols. The auxiliary
node then compares the phase difference between the two
nodes using every pair of adjacent symbols, after compensating
for the corresponding channels between the layer 1 and layer
2 node to itself. We repeat the measurement with different
choices of layer 1 and layer 2 nodes.
Results. Fig. 4(a) plots the variance in the phase difference
between the data signals from layer 1 and layer 2 nodes as a
function of the number of transmitters on layer 1. The variance
is measured across 1 sec intervals which is signiﬁcantly larger
than the channel coherence time. If the layers are synchronized
perfectly, the phase difference between the adjacent symbols