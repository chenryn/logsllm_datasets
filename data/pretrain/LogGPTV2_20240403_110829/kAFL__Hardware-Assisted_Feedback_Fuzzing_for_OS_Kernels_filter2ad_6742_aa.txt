title:kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels
author:Sergej Schumilo and
Cornelius Aschermann and
Robert Gawlik and
Sebastian Schinzel and
Thorsten Holz
kAFL: Hardware-Assisted Feedback Fuzzing  
for OS Kernels
Sergej Schumilo, Cornelius Aschermann, and Robert Gawlik, Ruhr-Universität Bochum; 
Sebastian Schinzel, Münster University of Applied Sciences;  
Thorsten Holz, Ruhr-Universität Bochum
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/schumilo
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXkAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels
Sergej Schumilo
Ruhr-Universität Bochum
Cornelius Aschermann
Ruhr-Universität Bochum
Robert Gawlik
Ruhr-Universität Bochum
Sebastian Schinzel
Münster University of Applied Sciences
Thorsten Holz
Ruhr-Universität Bochum
Abstract
Many kinds of memory safety vulnerabilities have
systems
for decades.
been endangering software
Amongst other approaches,
fuzzing is a promising
technique to unveil various software faults. Recently,
feedback-guided fuzzing demonstrated its power, pro-
ducing a steady stream of security-critical software bugs.
Most fuzzing efforts—especially feedback fuzzing—are
limited to user space components of an operating system
(OS), although bugs in kernel components are more
severe, because they allow an attacker to gain access
to a system with full privileges. Unfortunately, kernel
components are difﬁcult to fuzz as feedback mechanisms
(i.e., guided code coverage) cannot be easily applied.
Additionally, non-determinism due to interrupts, kernel
threads, statefulness, and similar mechanisms poses
problems. Furthermore,
if a process fuzzes its own
kernel, a kernel crash highly impacts the performance of
the fuzzer as the OS needs to reboot.
In this paper, we approach the problem of coverage-
fuzzing in an OS-independent and
guided kernel
hardware-assisted way: We utilize a hypervisor and In-
tel’s Processor Trace (PT) technology. This allows us
to remain independent of the target OS as we just re-
quire a small user space component that interacts with
the targeted OS. As a result, our approach introduces
almost no performance overhead, even in cases where
the OS crashes, and performs up to 17,000 executions
per second on an off-the-shelf laptop. We developed a
framework called kernel-AFL (kAFL) to assess the secu-
rity of Linux, macOS, and Windows kernel components.
Among many crashes, we uncovered several ﬂaws in the
ext4 driver for Linux, the HFS and APFS ﬁle system of
macOS, and the NTFS driver of Windows.
1
Introduction
Several vulnerability classes such as memory corrup-
tions, race-conditional memory accesses, and use-after-
free vulnerabilities, are known threats for programs run-
ning in user mode as well as for the operating system
(OS) core itself. Past experience has shown that attack-
ers typically focus on user mode applications. This is
likely because vulnerabilities in user mode programs are
notoriously easier and more reliable to exploit. How-
ever, with the appearance of different kinds of exploit
defense mechanisms – especially in user mode, it has
become much harder nowadays to exploit known vul-
nerabilities. Due to those advanced defense mechanisms
in user mode, the kernel has become even more appeal-
ing to an attacker since most kernel defense mechanisms
are not widely deployed in practice. This is due to more
complex implementations, which may affect the system
performance. Furthermore, some of them are not part
of the ofﬁcial mainline code base or even require sup-
port for the latest CPU extension (e.g., SMAP / SMEP
on x86-64). Additionally, when compromising the OS,
an attacker typically gains full access to the system re-
sources (except for virtualized systems). Kernel-level
vulnerabilities are usually used for privilege escalation
or to gain persistence for kernel-based rootkits.
For a long time, fuzzing has been a critical compo-
nent in testing and establishing the quality of software.
However, with the development of American Fuzzy Lop
(AFL), smarter fuzzers have gained signiﬁcant traction
in the industry [1] as well as in research [8, 14, 35, 37].
This trend was further ampliﬁed by Google’s OSS Fuzz
project that successfully found—and continues to ﬁnd—
a signiﬁcant number of critical bugs in highly security-
relevant software. Finally, DARPA’s Cyber Grand Chal-
lenge showed that fuzzing remains highly relevant for
the state-of-the-art in bug ﬁnding. The latest generation
of feedback-driven fuzzers generally uses mechanisms
to learn which inputs are interesting and which are not.
Interesting inputs are used to produce more inputs that
may trigger new execution paths in the target. Inputs that
did not trigger interesting behavior in the program are
discarded. Thus, the fuzzer is able to “learn” the input
USENIX Association
26th USENIX Security Symposium    167
format. This greatly improves efﬁciency and usability
of fuzzers, especially by reducing the need for an oracle
which generates semi-valid inputs or an extensive corpus
that covers most paths in the target.
Unfortunately, AFL is limited to user space applica-
tions and lacks kernel support. Fuzzing kernels has a
set of additional challenges when compared to userland
(or ring 3) fuzzing: First, crashes and timeouts mandate
the use of virtualization to be able to catch faults and
continue gracefully. Second, kernel-level code has sig-
niﬁcantly more non-determinism than the average ring 3
program—mostly due to interrupts, kernel threads, state-
fulness, and similar mechanisms. This makes fuzzing
kernel code challenging. Furthermore, there is no equiv-
alent to command line arguments or stdin to interact
with kernels or drivers in a generic way except for plain
interrupt or sysenter instructions. In addition, the Win-
dows kernel and many relevant drivers and core compo-
nents (for Windows, macOS and even Linux) are closed
source and cannot be instrumented by common tech-
niques without a signiﬁcant performance overhead.
Previous approaches to kernel
fuzzing were not
portable because they relied on certain drivers or recom-
pilation [10, 34], were very slow due to emulation to
gather feedback [7], or simply were not feedback-driven
at all [11].
In this paper, we introduce a new technique that al-
lows applying feedback fuzzing to arbitrary (even closed
source) x86-64 based kernels, without any custom ring
0 target code or even OS-speciﬁc code at all. We
discuss the design and implementation of kernel-AFL
(kAFL), our prototype implementation of the proposed
techniques. The overhead for feedback generation is very
small (less than 5%) due to a new CPU feature: Intel’s
Processor Trace (PT) technology provides control ﬂow
information on running code. We use this information
to construct a feedback mechanism similar to AFL’s in-
strumentation. This allows us to obtain up to 17,000 ex-
ecutions per second on an off-the-shelf laptop (Thinkpad
T460p, i7-6700HQ and 32 GB RAM) for simple target
drivers. Additionally, we describe an efﬁcient way for
dealing with the non-determinisms that occur during ker-
nel fuzzing. Due to the modular design, kAFL is exten-
sible to fuzz any x86/x86-64 OS. We have applied kAFL
to Linux, macOS, and Windows and found multiple pre-
viously unknown bugs in kernel drivers in those OSs.
In summary, our contributions in this paper are:
• OS independence: We show that feedback-driven
fuzzing of closed-source kernel mode components
is possible in an (almost) OS-independent manner
by harnessing the hypervisor (VMM) to produce
coverage. This allows targeting any x86 operating
system kernel or user space component of interest.
• Hardware-assisted feedback: Our fuzzing ap-
proach utilizes Intel’s Processor Trace (PT) tech-
nology, and thus has a very small performance over-
head. Additionally, our PT-decoder is up to 30 times
faster than Intel’s ptxed decoder. Thereby, we ob-
tain complete trace information that we use to guide
our evolutionary fuzzing algorithm to maximize test
coverage.
• Extensible and modular design: Our modular de-
sign separates the fuzzer, the tracing engine, and
the target to fuzz. This allows to support additional
x86 operating systems’ kernel space and user space
components, without the need to develop a system
driver for the target OS.
• kernel-AFL: We incorporated our design con-
cepts and developed a prototype called kernel-AFL
(kAFL) which was able to ﬁnd several vulnerabili-
ties in kernel components of different operating sys-
tems. To foster research on this topic, we make the
source code of our prototype implementation avail-
able at https://github.com/RUB-SysSec/kAFL.
2 Technical Background
x86-64 Virtual Memory Layouts
We use the Intel Processor Trace (Intel PT) extension of
IA-32 CPUs to obtain coverage information for ring 0
execution of arbitrary (even closed-source) OS code. To
facilitate efﬁcient and OS-independent fuzzing, we also
make use of Intel’s hardware virtualization features (In-
tel VT-x). Hence, our approach requires a CPU that sup-
ports both Intel VT-x and Intel PT. This section provides a
brief overview of these hardware features and establishes
the technical foundation for the later sections.
2.1
Every commonly used x86-64 OS uses a split virtual
memory layout: The kernel is commonly located at the
upper half of each virtual memory space, whereas each
user mode process memory is located in the lower half.
For example, the virtual memory space of Linux is typ-
ically split into kernel space (upper half) and user space
(lower half) each with a size of 247 due to the 48-bit
virtual address limit of current x86-64 CPUs. Hence,
the kernel memory is mapped to any virtual address
space and therefore it is located always at the same
virtual address.
If an user mode process executes the
syscall/sysenter instruction for kernel interaction or
causes an exception that has to be handled by the OS, the
OS will keep the current CR3 value and thus does not
switch the virtual memory address space.
Instead, the
current virtual memory address space is reused and the
kernel handles the current user mode process related task
within the same address space.
168    26th USENIX Security Symposium
USENIX Association
2.2
Intel VT-x
The kernel fuzzing approach introduced in this paper re-
lies on modern x86-64 hardware virtualization technol-
ogy. Hence, we provide a brief overview of Intel’s hard-
ware virtualization technology, Intel VT-x.
We differentiate between three kinds of CPUs: phys-
ical CPUs, logical CPUs, and virtual CPUs (vCPUs). A
physical CPU is a CPU that is implemented in hardware.
Most modern CPUs support mechanisms to increase
multithreading performance without additional physical
CPU cores on the die (e.g., Intel Hyper-Threading). In
this case, there are multiple logical CPUs on one phys-
ical CPU. These different logical CPUs share the phys-
ical CPU and, thus, only one of them can be active at
a time. However, the execution of the different logical
CPUs is interleaved by the hardware and therefore the
available resources can be utilized more efﬁciently (e.g.,
one logical CPU uses the arithmetic logic unit while an-
other logical CPU waits for a data fetch) and the oper-
ating system can reduce the scheduling overhead. Each
logical CPU is usually treated like a whole CPU by the
operating system. Finally, it is possible to create multiple
hardware-supported virtual machines (VMs) on a single
logical CPU. In this case, each VM has a set of its own
vCPUs.
The virtualization role model is divided into two com-
ponents:
the virtual machine monitor (VMM) and the
VM. The VMM, also named hypervisor or host, is priv-
ileged software that has full control over the physical
CPU and provides virtualized guests with restricted ac-
cess to physical resources. The VM, also termed guest, is
a piece of software that is transparently executed within
the virtualized context provided by the VMM.
To provide full hardware-assisted virtualization sup-
port, Intel VT-x adds two additional execution modes
to the well-known protection ring based standard mode
of execution. The default mode of executions is called
VMX OFF. It does not implement any hardware virtual-
ization support. When using hardware-supported virtual-
ization, the CPU switches into the VMX ON state and dis-
tinguishes between two different execution modes: the
higher-privileged mode of the hypervisor (VMX root or
VMM), and the lower privileged execution mode of the
virtual machine guest (VMX non-root or VM).
When running in guest mode, several privileged ac-
tions or reasons (execution of restricted instructions, ex-
pired VMX-preemption timer, or access to certain em-
ulated devices) in the VM guest will trigger a VM-Exit
event and transfer control to the hypervisor. This way,
it is possible to run arbitrary software that expects priv-
ileged access to the hardware (such as an OS) inside a
VM. At the same time, a higher authority can meditate
and control the operations performed with a small per-
formance overhead.
To create, launch, and control a VM, the VMM has to
use a virtual machine control structure (VMCS) for each
vCPU [28]. The VMCS contains all essential informa-
tion about the current state and how to perform VMX
transitions of the vCPU.
Intel Processor Trace
2.3
With the ﬁfth generation of Intel Core processors (Broad-
well architecture), Intel has introduced a new processor
feature called Intel Processor Trace (Intel PT) to provide
execution and branch tracing information. Unlike other
branch tracing technologies such as Intel Last Branch
Record (LBR), the size of the output buffer is no longer
strictly limited by special registers.
Instead, it is only
limited by the size of the main memory. If the output
target is repeatedly and timely emptied, we can create
traces of arbitrary length. The processor’s output format
is packet-oriented and separated into two different types:
general execution information and control ﬂow informa-
tion packets.
Intel PT produces various types of con-
trol ﬂow related packet types during runtime. To obtain
control-ﬂow information from the trace data, we require
a decoder. The decoder needs the traced software to in-
terpret the packets that contain the addresses of condi-
tional branches.
Intel speciﬁes ﬁve types of control ﬂow affecting in-
structions called Change of Flow Instruction (CoFI). The
execution of different CoFI types results in different se-
quences of ﬂow information packets. The three CoFI
types relevant to our work are:
1. Taken-Not-Taken (TNT): If the processor exe-
cutes any conditional jump, the decision whether
this jump was taken or not is encoded in a TNT
packet.
2. Target IP (TIP): If the processor executes an indi-
rect jump or transfer instruction, the decoder will
not be able to recover the control ﬂow. There-
fore, the processor produces a TIP packet upon the
execution of an instruction of the type indirect
branch, near ret or far transfer. These TIP
packets store the corresponding target instruction
pointer executed by the processor after the transfer
or jump has occurred.
3. Flow Update Packets (FUP): Another case where