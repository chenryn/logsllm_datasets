title:Reducing protocol analysis with XOR to the XOR-free case in the
horn theory based approach
author:Ralf K&quot;usters and
Tomasz Truderung
Reducing Protocol Analysis with XOR to the XOR-free
Case in the Horn Theory Based Approach∗
Ralf Küsters
Tomasz Truderung
†
University of Trier
54286 Trier, Germany
{kuesters,truderun}@uni-trier.de
ABSTRACT
In the Horn theory based approach for cryptographic pro-
tocol analysis, cryptographic protocols and (Dolev-Yao) in-
truders are modeled by Horn theories and security analy-
sis boils down to solving the derivation problem for Horn
theories. This approach and the tools based on this ap-
proach, including ProVerif, have been very successful in the
automatic analysis of cryptographic protocols w.r.t. an un-
bounded number of sessions. However, dealing with the
algebraic properties of operators such as the exclusive OR
(XOR) has been problematic. In particular, ProVerif cannot
deal with XOR.
In this paper, we show how to reduce the derivation prob-
lem for Horn theories with XOR to the XOR-free case. Our
reduction works for an expressive class of Horn theories. A
large class of intruder capabilities and protocols that employ
the XOR operator can be modeled by these theories. Our
reduction allows us to carry out protocol analysis by tools,
such as ProVerif, that cannot deal with XOR, but are very
eﬃcient in the XOR-free case. We implemented our reduc-
tion and, in combination with ProVerif, applied it in the
automatic analysis of several protocols that use the XOR
operator. In one case, we found a new attack.
Categories and Subject Descriptors
D.2.4 [Software Engineering]: Program Veriﬁcation—
Formal methods; K.6.5 [Management of Computing and
Information Systems]: Security and Protection
General Terms
Security, Veriﬁcation
∗This work was partially supported by the DFG under Grant
KU 1434/4-1, the SNF under Grant 200021-116596, and
the Polish Ministry of Science and Education under Grant
3 T11C 042 30.
†On leave from University of Wroc(cid:32)law, Poland.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
Keywords
Security Protocols, Algebraic Properties
1.
INTRODUCTION
In the Horn theory based approach for cryptographic pro-
tocol analysis, cryptographic protocols and the so-called Do-
lev-Yao intruder are modeled by Horn theories. The security
analysis, including the analysis of secrecy and authentication
properties, then essentially boils down to solving the deriva-
tion problem for Horn theories, i.e., the question whether a
certain fact is derivable from the Horn theory. This kind of
analysis takes into account that an unbounded number of
protocol sessions may run concurrently. While the deriva-
tion problem is undecidable in general, there are very suc-
cessful automatic analysis tools, with ProVerif [2] being one
of the most promintent ones among them, which work well
in practice.
However, dealing with the algebraic properties of opera-
tors, such as the exclusive OR (XOR), which are frequently
used in cryptographic protocols, has been problematic in the
Horn theory approach. While ProVerif has been extended
to deal with certain algebraic properties in [4], associative
operators, which in particular include XOR, are still out of
the scope. Even though there exist some decidability results
for the derivation problem in certain classes of Horn theories
with XOR [9, 20, 14], the decision procedures have not led
to practical implementations yet, except for the very speciﬁc
setting in [14] (see the related work).
The goal of this work is therefore to come up with a practi-
cal approach that allows for the automatic analysis of a wide
range of cryptographic protocols with XOR, in a setting with
an unbounded number of protocol sessions. Our approach
is to reduce this problem to the one without XOR, i.e., to
the simpler case without algebraic properties. This simpler
problem can then be solved by tools, such as ProVerif, that
a priori cannot deal with XOR, but are very eﬃcient in solv-
ing the XOR-free case. More precisely, the contribution of
this paper is as follows.
Contribution of this paper. We consider an expres-
sive class of (unary) Horn theories, called ⊕-linear (see Sec-
tion 3). A Horn theory is ⊕-linear, if for every Horn clause in
this theory, except for the clause that models the intruder’s
ability to apply the XOR operator (I(x), I(y) → I(x ⊕ y)),
the terms that occur in these clauses are ⊕-linear. A term is
⊕-linear if for every subterm of the form t ⊕ t(cid:48) in this term,
it is true that t or t(cid:48) does not contain variables. We do not
put any other restriction on the Horn theories. In particu-
lar, our approach will allow us to deal with all cryptographic
protocols and intruder capabilities that can be modeled as
⊕-linear Horn theories.
We show that the derivation problem for ⊕-linear Horn
theories with XOR can be reduced to a purely syntactic
derivation problem, i.e., a derivation problem where the al-
gebraic properties of XOR do not have to be considered any-
more (see Section 3, 4, and 5). Now, the syntactic deriva-
tion problem can be solved by highly eﬃcient tools, such
as ProVerif, which cannot deal with XOR. We believe that
the techniques developed in this paper are interesting be-
yond the case of XOR. For example, using these techniques
it might be possible to also deal with other operators, such
as Diﬃe-Hellman-Exponentiation.
Using ProVerif, we apply our two step approach—ﬁrst re-
duce the problem, then run ProVerif on the result of the
reduction—to the analysis of several cryptographic proto-
cols that use the XOR operator in an essential way (see
Section 6). The experimental results demonstrate that our
approach is practical. In one case, we found a new attack
on a protocol.
We note that a potential alternative to our approach is to
perform uniﬁcation modulo XOR instead of syntactic uniﬁ-
cation in a resolution algorithm such as the one employed
by ProVerif. Whether or not this approach is practical is an
open problem. The main diﬃculty is that uniﬁcation mod-
ulo XOR is much more ineﬃcient than syntactic uniﬁcation;
it is NP-complete rather than linear and, in general, there
does not exist a (single) most general uniﬁer.
We point the reader to [17] for a full version of this paper
and to [16] for our implementation.
Related work.
In [9, 20], classes of Horn theories (secu-
rity protocols) are identiﬁed for which the derivation prob-
lem modulo XOR is shown to be decidable. These classes
are orthogonal to the one studied in this paper. While ⊕-
linearity is not required, other restrictions are put on the
Horn clauses, in particular linearity on the occurrence of
variables. The classes in [9, 20] do, for example, not contain
the Recursive Authentication and the SK3 protocol, which,
however, we can model (see Section 6). To the best of our
knowledge, the decision procedures proposed in [9, 20] have
not been implemented. The procedure proposed in [9] has
non-elementary runtime.
In [19, 14, 13], the IBM 4758 CCA API, which we also
consider in our experiments, has been analyzed. Notably,
in [14] a decision procedure, along with an implementation,
is presented for the automatic analysis of a class of security
protocols which contains the IBM 4758 CCA API. However,
the protocol class and the decision procedure is especially
tailored to the IBM 4758 CCA API. The only primitives
that can be handled are the XOR operator and symmetric
encryption. All other primitives, such as pairing, public-key
encryption, and hashing, are out of the scope of the method
in [14]. The speciﬁcation of the IBM 4758 CCA API in [14]
is hard coded in a C implementation.
In [4], it is described how the basic resolution algorithm
used in ProVerif can be extended to handle some equational
theories. However, as already mentioned in that work, asso-
ciative operators, such as XOR, are out of the scope of this
extension.
In [12], the so-called ﬁnite variant property has been stud-
ied for XOR and other operators. It has been used (implic-
itly or explicitly) in other works [10, 9], and also plays a role
in our work (see Section 4).
In [7, 10, 15], decision procedures for protocol analysis
with XOR w.r.t. a bounded (rather than an unbounded)
number of sessions are presented. The notion of ⊕-linearity
that we use is taken from the work in [15]. That work also
contains some reduction argument. However, our work is
diﬀerent to [15] in several respects: First, of course, our ap-
proach is for an unbounded number of sessions, but it is not
guaranteed to terminate. Second, the class of protocols (and
intruder capabilities) we can model in our setting is much
more general than the one in [15]. Third, the reduction
presented in [15] heavily depends on the bounded session
assumption; the argument would not work in our setting.
Fourth, the reduction presented in [15] is not practical.
2. PRELIMINARIES
In this section, we introduce Horn theories modulo the
XOR operator and illustrate how these theories are used to
model the so-called Dolev-Yao intruder and cryptographic
protocols by a running example.
Horn theories. Let Σ be a ﬁnite signature and V be
a set of variables. The set of terms over Σ and V is de-
ﬁned as usual. By var(t) we denote the set of variables that
occur in the term t. We assume Σ to contain the binary
function symbol ⊕ (exclusive OR), as well as a constant
0. To model cryptographic protocols, Σ typically also con-
tains constants (atomic messages), such as principal names,
nonces, and keys, the unary function symbol hash(·) (hash-
ing), the unary function symbol pub(·) (public key), and
binary function symbols such as (cid:104)·,·(cid:105) (pairing), {·}· (sym-
metric encryption), and {|·|}· (public key encryption). The
signature Σ may also contain any other free function sym-
bol, such as various kinds of signatures and MACs. We only
require that the corresponding intruder rules are ⊕-linear
(see Section 3), which rules that do not contain the symbol
⊕ always are.
Ground terms, i.e. terms without variables, are called mes-
sages. For a unary predicate q and a (ground) term t we call
q(t) a (ground) atom. A substitution is a ﬁnite set of pairs of
the form σ = {t1/x1, . . . , tn/xn}, where t1, . . . , tn are terms
and x1, . . . , xn are variables. The set dom(σ) = {x1, . . . , xn}
is called the domain of σ. We deﬁne σ(x) = x if x /∈ dom(σ).
The application tσ of σ to a term/atom/set of terms t is de-
ﬁned as usual.
We call a term standard if its top-symbol is not ⊕; oth-
erwise, it is called non-standard. For example, the term
(cid:104)a, b ⊕ a(cid:105) is standard, while b ⊕ a is non-standard.
A non-standard subterm s of t is called complete, if either
s = t or s occurs in t as a direct subterm of some standard
term. For instance, for t = (cid:104)a⊕{(x ⊕ y) ⊕ z}y, b(cid:105), the terms
a⊕{(x ⊕ y) ⊕ z}y and (x⊕y)⊕z are complete non-standard
subterms of t, but x ⊕ y is not.
To model the algebraic properties of the exclusive OR
(XOR), we consider the congruence relation ∼ on terms in-
duced by the following equational theory (see, e.g., [10, 7]):
x ⊕ y = y ⊕ x
x ⊕ x = 0
(x ⊕ y) ⊕ z = x ⊕ (y ⊕ z)
(1)
(2)
For example, we have that tex = a⊕b⊕{0}k⊕b⊕{c ⊕ c}k ∼
a. (Due to the associativity of ⊕ we often omit brackets and
simply write a ⊕ b ⊕ c instead of (a ⊕ b) ⊕ c or a ⊕ (b ⊕ c).)
x ⊕ 0 = x
For atoms q(t) and q(cid:48)(t(cid:48)), we write q(t) ∼ q(cid:48)(t(cid:48)) if q = q(cid:48) and
t ∼ t(cid:48). We say that two terms are equivalent modulo AC,
where AC stands for associativity and commutativity, if they
are equivalent modulo (1). A term is ⊕-reduced if modulo
AC, the identities (2), when interpreted as reductions from
left to right, cannot be applied. Clearly, every term can
be turned into ⊕-reduced form and this form is uniquely
determined modulo AC. For example, a is the ⊕-reduced
form of tex.
A Horn theory T is a ﬁnite set of Horn clauses of the form
a1, . . . , an → a0, where ai is an atom for every i ∈ {0, . . . , n}.
We assume that the variables that occur on the right-hand
side of a Horn clause also occur on the left-hand side.
If
n = 0, i.e., the left-hand side of the clause is always true, we
call the Horn clause a0 a fact.
Given a Horn theory T and a ground atom a, we say that a
can syntactically be derived from A w.r.t. T (written T (cid:96) a)
if there exists a derivation for a from T , i.e., there exists a
sequence π = b1, . . . , bl of ground atoms such that bl = a
and for every i ∈ {1, . . . , l} there exists a substitution σ and