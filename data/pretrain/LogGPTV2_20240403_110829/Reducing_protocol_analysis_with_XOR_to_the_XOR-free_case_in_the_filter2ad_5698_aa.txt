# Reducing Protocol Analysis with XOR to the XOR-free Case in the Horn Theory Based Approach

**Authors:**
- Ralf Küsters
- Tomasz Truderung

**Affiliation:**
University of Trier, 54286 Trier, Germany
- {kuesters, truderun}@uni-trier.de

## Abstract

In the Horn theory-based approach for cryptographic protocol analysis, both cryptographic protocols and Dolev-Yao intruders are modeled using Horn theories. Security analysis is reduced to solving the derivation problem for these Horn theories. This approach, and tools like ProVerif, have been highly successful in automatically analyzing cryptographic protocols with an unbounded number of sessions. However, handling the algebraic properties of operators such as the exclusive OR (XOR) has been challenging. Specifically, ProVerif cannot handle XOR.

In this paper, we present a method to reduce the derivation problem for Horn theories with XOR to the XOR-free case. Our reduction works for a broad and expressive class of Horn theories, allowing us to model a wide range of intruder capabilities and protocols that use XOR. This reduction enables the use of efficient tools like ProVerif, which are unable to handle XOR directly, for the automatic analysis of such protocols. We have implemented our reduction and, in combination with ProVerif, applied it to the automatic analysis of several protocols that use XOR. In one instance, we discovered a new attack.

**Categories and Subject Descriptors:**
- D.2.4 [Software Engineering]: Program Verification—Formal methods
- K.6.5 [Management of Computing and Information Systems]: Security and Protection

**General Terms:**
- Security, Verification

**Keywords:**
- Security Protocols, Algebraic Properties

## 1. Introduction

In the Horn theory-based approach for cryptographic protocol analysis, both cryptographic protocols and Dolev-Yao intruders are modeled using Horn theories. The security analysis, including the evaluation of secrecy and authentication properties, essentially reduces to solving the derivation problem for these Horn theories. This analysis accounts for an unbounded number of concurrent protocol sessions. While the general derivation problem is undecidable, tools like ProVerif [2] have proven effective in practical scenarios.

However, handling the algebraic properties of operators such as XOR, which are frequently used in cryptographic protocols, has been problematic. Although ProVerif has been extended to handle certain algebraic properties [4], associative operators like XOR remain out of scope. Despite some decidability results for the derivation problem in specific classes of Horn theories with XOR [9, 20, 14], practical implementations of these decision procedures are limited, except for the very specific setting in [14].

The goal of this work is to develop a practical approach for the automatic analysis of a wide range of cryptographic protocols that use XOR, in a setting with an unbounded number of sessions. Our approach involves reducing the problem to the XOR-free case, which can then be solved by tools like ProVerif. Specifically, our contributions are as follows:

### Contribution of this Paper
We consider an expressive class of (unary) Horn theories called ⊕-linear (see Section 3). A Horn theory is ⊕-linear if, for every Horn clause in the theory (except for the clause modeling the intruder's ability to apply XOR), the terms in these clauses are ⊕-linear. A term is ⊕-linear if, for every subterm of the form \( t \oplus t' \), either \( t \) or \( t' \) does not contain variables. Our approach allows us to handle all cryptographic protocols and intruder capabilities that can be modeled as ⊕-linear Horn theories.

We show that the derivation problem for ⊕-linear Horn theories with XOR can be reduced to a purely syntactic derivation problem, where the algebraic properties of XOR do not need to be considered (see Sections 3, 4, and 5). This syntactic derivation problem can be efficiently solved by tools like ProVerif, which cannot handle XOR. We believe that the techniques developed in this paper can also be applied to other operators, such as Diffie-Hellman-Exponentiation.

Using ProVerif, we apply our two-step approach—first reduce the problem, then run ProVerif on the result of the reduction—to the analysis of several cryptographic protocols that use XOR. Our experimental results demonstrate the practicality of our approach. In one case, we discovered a new attack on a protocol.

### Related Work
In [9, 20], classes of Horn theories (security protocols) are identified for which the derivation problem modulo XOR is decidable. These classes are orthogonal to the one studied in this paper. While ⊕-linearity is not required, other restrictions are placed on the Horn clauses, particularly linearity in the occurrence of variables. The classes in [9, 20] do not include the Recursive Authentication and SK3 protocols, which we can model (see Section 6). To our knowledge, the decision procedures proposed in [9, 20] have not been implemented. The procedure in [9] has non-elementary runtime.

In [19, 14, 13], the IBM 4758 CCA API, which we also consider in our experiments, has been analyzed. Notably, [14] presents a decision procedure and implementation for a class of security protocols that includes the IBM 4758 CCA API. However, this protocol class and decision procedure are tailored specifically to the IBM 4758 CCA API. The only primitives handled are XOR and symmetric encryption. Other primitives, such as pairing, public-key encryption, and hashing, are out of scope. The specification of the IBM 4758 CCA API in [14] is hard-coded in a C implementation.

In [4], it is described how the basic resolution algorithm used in ProVerif can be extended to handle some equational theories. However, associative operators like XOR are out of the scope of this extension.

In [12], the finite variant property for XOR and other operators is studied. It has been used implicitly or explicitly in other works [10, 9] and also plays a role in our work (see Section 4).

In [7, 10, 15], decision procedures for protocol analysis with XOR for a bounded number of sessions are presented. The notion of ⊕-linearity we use is taken from [15]. That work also contains some reduction arguments. However, our work differs in several respects: our approach is for an unbounded number of sessions, but it is not guaranteed to terminate; the class of protocols and intruder capabilities we can model is more general; the reduction in [15] depends heavily on the bounded session assumption and would not work in our setting; and the reduction in [15] is not practical.

## 2. Preliminaries

In this section, we introduce Horn theories modulo the XOR operator and illustrate how these theories are used to model the Dolev-Yao intruder and cryptographic protocols through a running example.

### Horn Theories
Let \(\Sigma\) be a finite signature and \(V\) be a set of variables. The set of terms over \(\Sigma\) and \(V\) is defined as usual. By \(\text{var}(t)\) we denote the set of variables that occur in the term \(t\). We assume \(\Sigma\) to contain the binary function symbol \(\oplus\) (exclusive OR) and a constant \(0\). To model cryptographic protocols, \(\Sigma\) typically also contains constants (atomic messages), such as principal names, nonces, and keys, the unary function symbol \(\text{hash}(\cdot)\) (hashing), the unary function symbol \(\text{pub}(\cdot)\) (public key), and binary function symbols such as \(\langle \cdot, \cdot \rangle\) (pairing), \(\{\cdot\}_\cdot\) (symmetric encryption), and \(\{|\cdot|\}_\cdot\) (public key encryption). The signature \(\Sigma\) may also contain any other free function symbols, such as various kinds of signatures and MACs. We require that the corresponding intruder rules are ⊕-linear (see Section 3), which rules that do not contain the symbol \(\oplus\) always are.

Ground terms, i.e., terms without variables, are called messages. For a unary predicate \(q\) and a (ground) term \(t\), we call \(q(t)\) a (ground) atom. A substitution is a finite set of pairs of the form \(\sigma = \{t_1/x_1, \ldots, t_n/x_n\}\), where \(t_1, \ldots, t_n\) are terms and \(x_1, \ldots, x_n\) are variables. The set \(\text{dom}(\sigma) = \{x_1, \ldots, x_n\}\) is called the domain of \(\sigma\). We define \(\sigma(x) = x\) if \(x \notin \text{dom}(\sigma)\). The application \(t\sigma\) of \(\sigma\) to a term/atom/set of terms \(t\) is defined as usual.

We call a term standard if its top-symbol is not \(\oplus\); otherwise, it is called non-standard. For example, the term \(\langle a, b \oplus a \rangle\) is standard, while \(b \oplus a\) is non-standard.

A non-standard subterm \(s\) of \(t\) is called complete if either \(s = t\) or \(s\) occurs in \(t\) as a direct subterm of some standard term. For instance, for \(t = \langle a \oplus \{(x \oplus y) \oplus z\}_y, b \rangle\), the terms \(a \oplus \{(x \oplus y) \oplus z\}_y\) and \((x \oplus y) \oplus z\) are complete non-standard subterms of \(t\), but \(x \oplus y\) is not.

To model the algebraic properties of the exclusive OR (XOR), we consider the congruence relation \(\sim\) on terms induced by the following equational theory (see, e.g., [10, 7]):
- \(x \oplus y = y \oplus x\)
- \(x \oplus x = 0\)
- \((x \oplus y) \oplus z = x \oplus (y \oplus z)\)

For example, we have that \(t_{\text{ex}} = a \oplus b \oplus \{0\}_k \oplus b \oplus \{c \oplus c\}_k \sim a\). (Due to the associativity of \(\oplus\), we often omit brackets and simply write \(a \oplus b \oplus c\) instead of \((a \oplus b) \oplus c\) or \(a \oplus (b \oplus c)\).)

- \(x \oplus 0 = x\)

For atoms \(q(t)\) and \(q'(t')\), we write \(q(t) \sim q'(t')\) if \(q = q'\) and \(t \sim t'\). We say that two terms are equivalent modulo AC (associativity and commutativity) if they are equivalent modulo (1). A term is \(\oplus\)-reduced if, modulo AC, the identities (2), when interpreted as reductions from left to right, cannot be applied. Clearly, every term can be turned into \(\oplus\)-reduced form, and this form is uniquely determined modulo AC. For example, \(a\) is the \(\oplus\)-reduced form of \(t_{\text{ex}}\).

A Horn theory \(T\) is a finite set of Horn clauses of the form \(a_1, \ldots, a_n \rightarrow a_0\), where \(a_i\) is an atom for every \(i \in \{0, \ldots, n\}\). We assume that the variables that occur on the right-hand side of a Horn clause also occur on the left-hand side. If \(n = 0\), i.e., the left-hand side of the clause is always true, we call the Horn clause \(a_0\) a fact.

Given a Horn theory \(T\) and a ground atom \(a\), we say that \(a\) can syntactically be derived from \(T\) (written \(T \vdash a\)) if there exists a derivation for \(a\) from \(T\), i.e., there exists a sequence \(\pi = b_1, \ldots, b_l\) of ground atoms such that \(b_l = a\) and for every \(i \in \{1, \ldots, l\}\) there exists a substitution \(\sigma\) and a Horn clause \(a_1, \ldots, a_n \rightarrow a_0\) in \(T\) such that \(b_i = a_0\sigma\) and for every \(j \in \{1, \ldots, n\}\), \(a_j\sigma \in \{b_1, \ldots, b_{i-1}\}\).