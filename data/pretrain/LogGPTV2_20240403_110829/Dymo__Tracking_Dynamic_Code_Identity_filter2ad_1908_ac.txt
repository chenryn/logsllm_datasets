the same access rights as the logged-in user. Dymo can be used by the local
host to enable the OS to make more precise access control decisions based on
the identity of applications. For example, the OS could have a policy that limits
network access to a set of trusted (whitelisted) applications, such as trusted web
browsers and e-mail clients. Another policy could impose restrictions on which
applications are allowed to access a particular sensitive ﬁle (similar to sealed
storage). Because Dymo precisely tracks the dynamic identity of a process, a
trusted (but vulnerable) application cannot be exploited to subvert an access
control policy. In particular, when a trusted process is exploited, its identity
label changes, and, thus, its permissions are implicitly taken away.
To use application-based access control, a mechanism must be in place to dis-
tribute identity labels for trusted applications, in addition to a set of permissions
that are associated with these applications. The most straightforward approach
for this would be to provide a global repository of labels so that all hosts that
run Dymo could obtain identity labels for the same applications. We note that
global distribution mechanisms already exist (such as Microsoft Update), which
Dymo could take advantage of. This would work well for trusted applications
that ship with Windows, and they could be equipped with default privileges.
Furthermore, it is also straightforward for an administrator to produce a
whitelist of identity labels for applications that users are allowed to run, for
example, in an enterprise network. To this end, one simply needs to run an
application on a system where Dymo is installed, exercising the main func-
tionalities so that all dynamic libraries are loaded. The identity label that our
system computes for this application can then be readily used and distributed
to all machines in the network. In this scenario, an administrator can restrict
the execution of applications to only those that have their labels in a whitelist,
or speciﬁc permissions can be enabled on a per-application basis.
One may argue that during this training period it may not be feasible to fully
exercise an application so as to guarantee that all possible dynamic libraries are
loaded. The problem is that, after Dymo is deployed, untrained paths of execu-
tion could lead an application to load unknown libraries that would invalidate
the application’s identity label, resulting in a false positive. We believe that such
problems can be mitigated by focused training that is guided by the users’ in-
tended workﬂow. Furthermore, an administrator may accept a small number of
false positives as a trade-oﬀ against spending more time to reveal an application’s
esoteric functionality that is rarely used.
4.2 Dymo Network Extension
In this section, we describe our implementation of an extension to Dymo to
inject a process’ identity label into the network packets that it sends. This allows
network entities to learn the provenance of the traﬃc. An example scenario that
could beneﬁt from such information is an enterprise deployment.
In a homogeneous enterprise network, most machines will run the same op-
erating system with identical patch levels. Moreover, a centralized authority can
enforce the software packages that are permissible on users’ machines. In this
scenario, it is easy to obtain the labels for those applications and correspond-
ing libraries that are allowed to connect to the outside Internet (e.g., simply by
running these applications under Dymo and recording the labels that are ob-
served). These labels then serve as a whitelist, and they can be deployed at the
network egress points (e.g., the gateway). Whenever traﬃc with an invalid label
is detected, the connection is terminated, and the source host can be inspected.
By analyzing labels in the network, policies can be enforced at the gateway,
instead of at each individual host, which makes policy management simpler and
more eﬃcient. Furthermore, the Dymo network extension allows for other traﬃc
monitoring possibilities, such as rate limiting packets from certain applications
or gathering statistics pertaining to the applications that are responsible for
sending traﬃc through the network.
To demonstrate how identity labels can be used in the network, we imple-
mented the Dymo network extension as a kernel module that intercepts out-
bound network traﬃc to inject all packets with the identity label of the origi-
nating process. We accomplish this by injecting a custom IP option into the IP
header of each packet, which makes it easy for network devices or hosts along
the path to analyze the label. In addition, as an optimization, the label is only
injected into the ﬁrst packet(s) of a TCP connection (i.e., the SYN packet).
The injector, a component that is positioned between the TCP/IP transport
driver and the network adapter, does the injection to ensure that all traﬃc is
labeled. A second component, called the broker, obtains the appropriate identity
label for the injector. These components are discussed next.
The Injector. The injector component is implemented as a Network Driver
Interface Speciﬁcation (NDIS) Intermediate Filter driver. It sits between the
TCP/IP Transport Provider (Tcpip.sys) and the network adapter, which al-
lows it to intercept all IP network traﬃc leaving the host. Due to the NDIS
architecture, the injection component executes in an arbitrary thread context.
Practically speaking, this means that the injector cannot reliably determine on
its own which process is responsible for a particular network packet. To solve this
problem, the injector enlists the help of a broker component (discussed below).
When a packet is passed down to the injector, it inspects the packet headers
and builds a connection ID consisting of the source and destination IP addresses,
the source and destination ports, and the protocol. The injector queries the
broker with the connection ID and receives back a process identity label. The
label is injected into the outbound packet as a custom IP option, the appropriate
IP headers are updated (e.g., header length and checksum), and the packet is
forwarded down to the network adapter for delivery.
The Broker. The broker component assists the injector in obtaining appropri-
ate identity labels. The broker receives a connection ID from the injector and
maps it to the ascribed process. It then obtains the label associated with the
given process and returns it to the injector.
The broker is implemented as a Transport Driver Interface (TDI) Filter
driver. It resides above Tcpip.sys in the transport protocol stack and ﬁlters
the TDI interfaces used to send packets. Through these interfaces, the broker is
notiﬁed when a process sends network traﬃc, and it parses the request for its
connection ID. Since the broker executes in the context of the process sending
the network traﬃc, it can maintain a table that maps connection IDs to the
corresponding processes.
Label Size Optimization. Identity labels, which store all image and region
hashes for a process, can become large. In fact, they might grow too large to ﬁt
into the IP option ﬁeld of one, or a few, network packets. For example, consider
the execution of Firefox. It is represented by 87 image and region hashes, each
of which is a 20 byte hash value, which results in an identity label size of 1.74
KB. To compress identity labels before embedding them into network packets,
Dymo uses Huﬀman encoding to condense image and region hashes into image
and region codes. Dymo then simply concatenates the resulting image and region
codes to generate the label that is sent over the network.
The Huﬀman codes are precomputed from a global input set which includes
all trusted applications and DLLs (with their diﬀerent versions), with shorter
codes being assigned to more popular (more frequently executed) images. The
codes are stored in a lookup table when Dymo begins operation. To generate
a Huﬀman code for an image hash, the system uses the computed hash of the
image to index into the lookup table and obtain the corresponding Huﬀman
code. If the lookup fails, Dymo generates an UNKNOWN IMAGE code to describe
the image; thus, untrusted or malicious images are easily detected. To generate
a region code, Dymo uses the hashes of the allocator, writer, and caller of the
region to compute a hash to index into the lookup table. If the lookup fails,
Dymo generates an UNKNOWN REGION code to describe the region.
In the current implementation, Huﬀman codes vary in length from 6 to 16
bits. When using optimized codes, Dymo generates an identity label for Firefox
that is 74 bytes, which is 4.25% of its size in the unoptimized case. Note that
the maximum size of the IP option is ﬁxed at 40 bytes. For identity labels that
exceed this 40 byte limit, we split the label over multiple packets.
5 Evaluation
We evaluated Dymo on three criteria that address the system requirements
discussed in Section 2.1: the precision of the identity labels it creates, its ability to
correctly reﬂect changes to the identity label when a process has been tampered
with, and its impact on application performance.
5.1 Label Precision
In order for an identity label to be meaningful, it must uniquely identify the
running application that it represents. That is to say, two diﬀerent applications
should receive diﬀerent labels, and the same application should receive the same
label when it is executed multiple times on the same or diﬀerent hosts. We say
that a label meeting these criteria is precise.
To evaluate the precision of Dymo’s identity labels, we deployed the Win-
dows XP SP3 operating system on three diﬀerent platforms: a virtual machine
running under VMware Fusion 2 on a Mac OS X host, a virtual machine running
under VirtualBox 3.1 on an Ubuntu host, and a standard, native installation on
bare metal. We then created a test application suite of 107 executables taken
from the Windows System32 directory. To conduct the experiment, we ﬁrst ob-
tained our database of identity labels using the training method described in
Section 4.1, that is, by simply running the applications on the test platforms
and storing the resulting labels. We then ran each application from the test
suite on every platform for ten seconds and for three iterations. In addition, we
performed similar tests for Internet Explorer, Firefox, and Thunderbird, which
are examples of large and complex applications. For these programs, instead of
only running the applications for ten seconds, we simulated a typical workﬂow
that involved browsing through a set of websites – including sites containing
JavaScript and Flash content – with Internet Explorer and Firefox and perform-
ing mail tasks in Thunderbird.
We found that in all cases, the generated identity labels were precise. There
were small diﬀerences in the dynamic loading of a few DLLs in some of the
processes, but according to the relaxed matching policy for establishing identity
as described in Section 3.3, all processes were accepted as belonging to their
corresponding applications. More speciﬁcally, for 99 of the 107 programs (93%),
as well as for Firefox and Thunderbird, the generated labels were identical on
all three platforms. In all other cases, the labels were identical among the three
runs, but sometimes diﬀered between the diﬀerent platforms. The reason for
the minor diﬀerences among the labels was that a particular library was not
present (or not loaded) on all platforms. As a result, the applications loaded a
diﬀerent number of libraries, which led to diﬀerent labels. For six programs, the
problem was that the native host was missing an audio driver, and our test suite
contained several audio-related programs such as Mplay32.exe, Sndrec32.exe,
and Sndvol32.exe. In one case, the VirtualBox platform was missing DLLs for
AppleTalk support. In the ﬁnal two cases (Magnify.exe and Internet Explorer),
the VirtualBox environment did not load Msvcp60.dll.
Our experiments demonstrate that identity labels are precise across platforms
according to the relaxed matching policy. In some special cases, certain libraries
are not present, but their absence does not change the fundamental identity of
the application.
5.2 Eﬀect of Process Tampering
An identity label encodes the execution history of a process. We can leverage this
property for detecting suspicious behavior of otherwise benign processes when
they are tampered with by malware or exploits.
Tampering by Malware. We identiﬁed three malware samples that perform
injection of code into the address space of other running processes. The ﬁrst
sample was a Zeus bot that modiﬁed a running instance of Internet Explorer by
injecting code into Browseui.dll and Ws2help.dll. The second sample was a
Korgo worm that injected a remote thread into Windows Explorer and loaded 19
DLLs for scanning activity and communication with a Command and Control
(C&C) server. The third sample was a suspicious program called YGB Hack
Time that was detected by 33 out of 42 (79%) antivirus engines in VirusTotal.
YGB injected a DLL called Itrack.dll into most running processes, including
Internet Explorer.
We executed the three samples on a virtual machine with Dymo running. The
identity labels of the target applications changed after all three malware samples
were executed and performed their injection. This demonstrates that Dymo is
able to dynamically update a process’ identity label according to changes in its
execution.
Tampering by Exploits. An alternative way to tamper with a process’ execu-
tion is through an exploit that targets a vulnerability in the process. Two com-
mon attack vectors are the buﬀer overﬂow exploit and drive-by download attack.
To demonstrate Dymo’s ability to detect such attacks, we used the Metasploit
Framework to deploy a VNC server that targets a buﬀer overﬂow vulnerability
in RealVNC Client and a web server to simulate the Operation Aurora drive-
by download exploit [24]. For both attacks, we conﬁgured Metasploit to use a
sophisticated Reﬂective DLL Injection exploit payload [5] that allows a DLL
to load itself into the target address space without using the facilities of the
Ntdll.dll image loader. This makes the injection stealthier because the DLL
is not registered with the hosting process (e.g., the DLL does not appear in the
list of loaded modules in the Process Environment Block).
We deployed our attack VNC server and web server and navigated to them
using a vulnerable version of RealVNC Client and Internet Explorer, respectively.
The identity labels changed for both vulnerable applications after the attack
because of the execution of code in RealVNC Client’s stack, Internet Explorer’s
heap, and the DLL injected into the address space of both. This demonstrates
that Dymo is able to update a process’ identity label even in the face of a
sophisticated attack technique designed to hide its presence.
5.3 Performance Impact
Dymo operates at a low level in the Windows XP kernel and must track when
a process loads DLLs and makes memory allocation or protection change re-
quests. Moreover, the system adds some logic to the page fault handler. Since
these kernel functions are frequently invoked, care must be taken to maintain an
acceptable level of performance.
Typically, a process will perform most, if not all, of the code loading work
very early in its lifetime. Figure 1 shows an example of DLL loading over time for
Internet Explorer, Firefox, and Thunderbird (only load-time DLLs are included).