---
author: Lee Briggs
category: 系统运维
comments_data:
- date: '2023-05-06 10:01:05'
  message: PL/SCHEME&nbsp; &nbsp;&nbsp;&nbsp;代码即数据&nbsp; &nbsp;&nbsp;&nbsp;https://www.rockdata.net/zh-cn/blog/2022/10/26/plscheme/
  postip: 113.137.58.77
  username: 来自陕西咸阳的 Chrome 113.0|Windows 10 用户
- date: '2023-05-06 10:02:48'
  message: PL/Scheme&nbsp; &nbsp;&nbsp;&nbsp;https://doc.rockdata.net/zh-cn/develop/plscheme/
  postip: 113.137.58.77
  username: 来自陕西咸阳的 Chrome 113.0|Windows 10 用户
count:
  commentnum: 2
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4596
date: '2020-11-27 15:11:43'
editorchoice: false
excerpt: 用 Node.js 或其他编程语言为你提供启动基础设施所需的一切服务。
fromurl: https://opensource.com/article/20/8/infrastructure-as-code-pulumi
id: 12862
islctt: true
largepic: /data/attachment/album/202011/27/151108bnnggmxegfzwog46.jpg
permalink: /article-12862-1.html
pic: /data/attachment/album/202011/27/151108bnnggmxegfzwog46.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 用 Node.js 或其他编程语言为你提供启动基础设施所需的一切服务。
tags:
- IaC
- 基础架构即代码
thumb: false
title: 使用你喜欢的编程语言，将基础设施作为代码进行配置
titlepic: true
translator: wxy
updated: '2020-11-27 15:11:43'
---
> 
> 用 Node.js 或其他编程语言为你提供启动基础设施所需的一切服务。
> 
> 
> 
![](/data/attachment/album/202011/27/151108bnnggmxegfzwog46.jpg)
当你在 IT 和技术的世界里遨游时，你会反复遇到一些术语。其中有些术语很难量化，随着时间的推移，可能会有不同的含义。[“DevOps”](https://opensource.com/resources/devops) 就是一个例子，这个词似乎（在我看来）会根据使用它的人而改变；最初的 DevOps 先驱者可能甚至不认识我们今天所说的 DevOps。
如果你是一个软件开发者，“ 基础架构即代码   Infrastructure as Code ”（IaC）可能是其中一个术语。IaC 是使用与你编写面向用户的功能相同的软件开发实践来声明应用程序运行的基础设施。这通常意味着使用 [Git](https://git-scm.com/) 或 [Mercurial](https://www.mercurial-scm.org/) 等工具进行版本控制，使用 Puppet、Chef 或 Ansible 进行[配置管理](https://opensource.com/article/18/12/configuration-management-tools)。在基础设施供应层，最常见的技术是 CloudFormation（专用于 AWS），或开源替代品 [Terraform](https://opensource.com/article/20/7/terraform-kubernetes)，用来创建供你的应用程序运行的混合云资源。
在配置管理领域有很好产品可供选择，可以将 IaC 写成配置文件或首选的编程语言，但这种选择在基础设施供应领域并不常见。
[Pulumi](https://www.pulumi.com/) 提供了一个使用标准编程语言来定义基础设施的方式。它支持一系列语言，包括 [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)、[TypeScript](https://www.typescriptlang.org/)、[Go](https://golang.org/)、[Python](https://www.python.org/) 和 [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language))。就像 Terraform 一样，Pulumi 对许多熟悉的云提供商有一流的支持，比如 [AWS](https://www.pulumi.com/docs/intro/cloud-providers/aws/)、[Azure](https://www.pulumi.com/docs/intro/cloud-providers/azure/)、[Google Cloud](https://www.pulumi.com/docs/intro/cloud-providers/gcp/) 和[其他提供商](https://www.pulumi.com/docs/reference/pkg/)。
在本文中，我将向你展示如何使用 Pulumi 以 Node.js 编写基础设施。
### 先决条件
首先，确保你已经做好了使用 Pulumi 的准备。Pulumi 支持所有主流的操作系统，所以你安装其先决条件的方法取决于你使用的操作系统。
首先，安装你喜欢的编程语言的解释器。我将使用 TypeScript，所以我需要安装 `node` 二进制。请查阅 Node 的[安装说明](https://nodejs.org/en/download/)，了解你的操作系统的信息。你可以在 [Mac](https://opensource.com/article/20/6/homebrew-mac) 或 [Linux](https://opensource.com/article/20/6/homebrew-linux) 上使用 [Homebrew](https://brew.sh/) 来安装：
```
brew install node
```
在 Linux 上，你可以使用你常用的软件包管理器，如 `apt` 或 `dnf`。
```
$ sudo dnf install nodejs
```
无论哪种情况，结果都应该是 `node` 二进制文件在你的 `$PATH` 中可用。要确认它是可访问的，运行：
```
node --version
```
接下来，安装 Pulumi 命令行界面（CLI）。你可以在 Pulumi 的文档中找到针对不同操作系统的[安装说明](https://www.pulumi.com/docs/get-started/install/)。在 Mac 或 Linux 上使用 `brew`：
```
brew install pulumi
```
另外，你也可以使用安装脚本。首先下载并审查它，然后执行它：
```
$ curl -fsSL --output pulumi_installer.sh https://get.pulumi.com/
$ more  pulumi_installer.sh
$ sh ./pulumi_installer.sh
```
同样，我们所希望的结果是在你的路径上有 `pulumi` 二进制。检查版本以确保你已经准备好了：
```
pulumi version
v2.5.0
```
### 配置 Pulumi
在你开始配置任何基础设施之前，给 Pulumi 一个存储其[状态](https://www.pulumi.com/docs/intro/concepts/state/)的地方。
Pulumi 将其状态存储在后端。默认的后端是 Pulumi 的软件即服务（它有一个针对个人用户的免费计划），但在这个例子中，我使用替代的文件后端。文件后端将在你的本地文件系统上创建一个文件来存储状态：
```
pulumi login --local
```
如果你打算和别人分享这个项目，文件后台可能不是一个好的起点。Pulumi 还可以将其状态存储在 AWS S3 等云对象存储中。要使用它，请创建一个 S3 bucket 并登录：
```
pulumi login --cloud-url s3://my-pulumi-state-bucket
```
现在你已经登录到了状态后端，你可以创建一个项目和一个堆栈了！
在你开始创建 Pulumi 项目之前，请先了解以下 Pulumi 术语，你将在本教程中看到这些术语。
#### 项目
   项目    project 是一个包含 `Pulumi.yaml` 文件的目录。这个文件包含了 Pulumi 需要知道的元数据，以便进行它的工作。在 `Pulumi.yaml` 文件中可以找到的示例字段有：
* 运行时（例如，Python、Node、Go、.Net）
* 项目说明（如“我的第一个 Pulumi 项目”）
* 项目名称
项目是一个松散的概念，可以满足你的需求。一般来说，一个项目包含了一系列的*资源*，这些资源是你想要提供和控制的东西。你可以选择拥有资源很少的小型 Pulumi 项目，也可以选择包含所有你需要的资源的大型项目。随着你对 Pulumi 越来越熟悉，你想如何布局你的项目会变得更加清晰。
#### 堆栈
Pulumi    堆栈    stack 允许你根据可配置的值来区分你的 Pulumi 项目。一个常见的用途是将一个项目部署到不同的环境，如开发或生产环境，或不同的地区，如欧洲、中东和非洲以及美国。
在入门时，你不大需要一个复杂的堆栈设置，所以本演练使用默认的堆栈名称 `dev`。
### 在 IaC 中使用 TypeScript
你可以使用方便的 `pulumi new` 命令来 初建   bootstrap 一个 Pulumi 项目。`new` 命令有一大堆标志和选项，可以帮助你入门 Pulumi，所以请继续创建你的第一个项目：
```
$ pulumi new typescript
This command will walk you through creating a new Pulumi project.
Enter a value or leave blank to accept the (default), and press .
Press ^C at any time to quit.
project name: (pulumi) my-first-project
project description: (A minimal TypeScript Pulumi program) My very first Pulumi program
Created project 'my-first-project'
Please enter your desired stack name.
To create a stack in an organization, use the format / (e.g. `acmecorp/dev`).
stack name: (dev) dev
Created stack 'dev'
Installing dependencies...
> node scripts/postinstall
added 82 packages from 126 contributors and audited 82 packages in 2.84s
13 packages are looking for funding
  run `npm fund` for details
found 0 vulnerabilities
Finished installing dependencies
Your new project is ready to go! ✨
To perform an initial deployment, run 'pulumi up'
```
这里发生了很多事情，我将其展开来说：
第一部分是为你的 Pulumi 项目确定一个模板。我选择了通用的 `typescript` 选项，但是有[很多选项可供选择](https://github.com/pulumi/templates)。
这个 `new` 命令从你的模板库中抓取模板，并将这个文件复制到本地，包括运行时的依赖关系（在本例中是 `package.json`）。
`new` 命令通过在这个目录下运行 `npm install` 来安装这些依赖关系。然后 `npm install` 下载并安装运行 Pulumi 程序所需的一切，在这种情况下就是：`@pulumi/pulumi` NPM 包。
你已经准备好创建你的第一个资源了!
### 创建你的第一个云资源
资源是一个由你的基础设施供应软件生命周期进行管理的东西。资源一般是一个 云提供商对象   cloud provider object ，比如 S3 桶。Pulumi 的提供商处理 Pulumi 资源，提供商是具体的云提供商。Pulumi 有大约 [40 个提供商](https://www.pulumi.com/docs/intro/cloud-providers/)可供你使用，但对于你的第一个资源，使用一个最简单的：   随机提供商    random provider 。
随机提供者顾名思义：它幂等地创建一个随机资源（例如，可以是一个字符串），并将其存储在 Pulumi 状态中。
使用 `npm` 将其添加到你的 Pulumi 项目中作为依赖关系：
```
npm install @pulumi/random
```
npm 包管理器下载并安装随机提供者包，并为你安装。现在你已经准备好编写你的 Pulumi 程序了。
当你之前生成你的项目时，Pulumi 的初建过程创建了一个 `index.ts` TypeScript 文件。在你喜欢的集成开发环境（IDE）中打开它，并添加你的第一个资源：
```
import * as pulumi from "@pulumi/pulumi";
import * as random from "@pulumi/random";
const password = new random.RandomString(`password`, {
    length: 10
})
```
如果你对 TypeScript 或 JavaScript 非常熟悉，这看起来会非常熟悉，因为它是用你熟悉的编程语言编写的。如果你使用的是 Pulumi 支持的其他语言之一，也是一样的。这里是之前的那个随机资源，但这次是用 Python 写的：