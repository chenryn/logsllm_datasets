Set packet in length=0
CD1 Delay ﬂow add
CD2 Change length to 0 on any message
CD3 Change inner packet length to 0 in packet in
1
2
2
8
2
ONOS
POX/RYU/FL
POX
RYU
RYU
No
No
No
No
No
No
Yes
No
No
Yes
Yes
LD
Change port lists in features reply/port status
33
ONOS/POX/FL Yes
BB
Change port lists in features reply/port status
20
ONOS/FL
FR1
Change ﬂow stats reply such that ﬂow rule
entry does not match
FR2
Change ﬂow stats reply such that packet count
is constant
UB
Change port in ﬁeld of the packet out message
8
4
6
ONOS
ONOS
POX/RYU
Yes
Yes
Yes
Yes
324
S. Jero et al.
discovered in POX. A similar operation stall occurs when dropping or ignoring
flow add messages; the ﬂow will eventually be inserted, but it will take extra
messages and controller processing. These bugs are due to the design of Open-
Flow and there are no known mitigations.
Periodic Switch Disconnect (SD)–Some Mitigations. We found many
bugs that cause the malicious switch to periodically disconnect. This causes
topology churn and prevents the installation of ﬂow rules or the delivery of
packet in/packet out messages. It takes about 3 s for the network to fully
recover from one of these events, although the TCP level disconnection is only
about half a second.
While most of these bugs are unavoidable and due to the reception of invalid
OpenFlow messages, we did identify two subcategories of these bugs that can
be easily ﬁxed. The ﬁrst of these, consists of duplication of ONOS handshake
messages. The state machine ONOS uses to control its handshake with a switch
is not tolerant to message duplication. As a result, duplicating these messages
results in a connection reset. This could be avoided by designing the handshake
state machine to tolerate duplication.
The second subcategory of
these bugs operates by modifying the
features reply message sent during the initial handshake to ONOS or POX
to include a port with number 0xFFFD. This triggers a disconnection by the
malicious switch the next time an ARP ﬂood occurs, which might be hours later.
The disconnection occurs because this port number (in OpenFlow 1.0) indicates
the controller and results in an invalid packet in being sent to the controller.
These bugs can be mitigated by modifying the controller to sanity check the list
of ports received from the switch.
Data-Plane Loss (DP)–No Known Mitigations. While we do not explic-
itly consider data-plane level attacks, we found several bugs which can trigger
data-plane packet loss. All the controllers we tested are vulnerable to drop-
ping occasional data-plane packets as a result of malicious switches discarding
packet in or packet out messages. A diﬀerent method to induce data loss is to
target the buﬀering of packets at malicious OpenFlow switches by corrupting the
buﬀers indicated in packet in or packet out messages. This causes the buﬀered
packet to eventually be dropped. These bugs can have particularly large impacts
on small ﬂows like ARP and DNS where installing ﬂow rules makes little sense.
We are not aware of any known mitigations against these bugs.
Flow Rule Modiﬁcation (FM)–No Known Mitigations. Another class of
bugs disrupts ﬂow rules from the controller by modifying flow add messages.
This enables the attacker to aﬀect the timeout, priority, and match ﬁelds and
masks of ﬂow rules in malicious switches as well as the actions performed on a
match. Our testing found a number of modiﬁcations that cause network-wide
denial of service, but speciﬁc changes to small sets of ﬂows are also possible. We
are not aware of any known mitigations against these bugs.
Port Conﬁg Modiﬁcation (PC)–No Known Mitigations. Similar to the
ﬂow rule modiﬁcation, a compromised switch can mislead a controller as to the
BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems
325
conﬁguration of its ports by modifying port mod messages. This conﬁguration
primarily consists of the port’s enabled or disabled state and whether it has
broadcast enabled. Our testing found a number of speciﬁc modiﬁcations that
cause broad, network-wide denial of service, but these bugs could also be used
for speciﬁc modiﬁcations targeting speciﬁc topology changes in networks. We
are not aware of any known mitigations against these bugs.
Packet Location Hijacking (LH)–No Known Mitigations. Several bugs
allow a malicious switch to change the apparent source port of a packet sent to
the controller and the apparent destination port of packets send by the controller.
This hijacking of packet locations has dramatic and wide spread eﬀects across the
network, including topology detection, MAC learning, and reactive forwarding.
Note that the topology poisoning attacks identiﬁed in prior eﬀorts [7,10] apply
these bugs to LLDP traﬃc on particular ports to carefully forge speciﬁc links
without breaking the entire network. While attacks forging LLDP packets can
be mitigated using cryptographic techniques, the more general bugs are more
diﬃcult to address, and we are not aware of any known mitigations.
Empty packet in’s (EP)–Some Mitigations. We identiﬁed a bug in the
ONOS controller where sending a packet in message with a zero-length pay-
load packet triggers a NULL pointer exception in the processing thread. ONOS’s
design separates the processing of messages from diﬀerent switches into diﬀerent
threads. As a result, this exception causes this switch’s to terminate, discon-
necting the malicious switch, but allows the controller to continue running. We
reported this bug to the ONOS project, which conﬁrmed it and veriﬁed that it
was no longer present in their most recent release.
However, a second bug exists which eﬀectively prevents all topology detection
and useful reactive forwarding through a compromised switch on any controller.
The bug is exploited by conﬁguring the compromised switch to send packet in
messages with a payload length of at most zero bytes. This means that no packet
headers will be sent to the controller, which can then do nothing useful with the
message, preventing topology detection, MAC learning, and reactive forwarding.
Preventing these bugs would require an update to the OpenFlow speciﬁcation
to disallow very small payload lengths.
Controller DoS (CD)–Some Mitigations. We identiﬁed several possible
bugs that can overload and DoS the controller. One unavoidable way to do this
is simply to delay the installation of ﬂow rules in malicious switches, causing
a ﬂood of packet in messages. This bug has been identiﬁed by several other
studies, including [7,42,44]. Note that ONOS and Floodlight partially mitigate
this bug by tracking ﬂow rules to prevent repeated insertion attempts. The only
complete mitigation is to proactively insert all needed ﬂow rules and never send
packets to the controller.
We also identiﬁed two new bugs that crash the Ryu controller. The ﬁrst
of these causes an inﬁnite loop when receiving an OpenFlow message with a
zero-length header while the second terminates the controller with an uncaught
326
S. Jero et al.
exception when a packet in message with a zero length payload is received. We
reported these bugs to the Ryu project, which has patched both.
Link Detection Failure (LD)–Some Mitigations. This bug works against
implementations of the LLDP protocol to prevent a correct global topology from
being constructed by a vulnerable controller. It exists in ONOS, Floodlight, and
POX; Ryu is not vulnerable only because it does not attempt to construct a
global view of the topology, but simply emulates a set of learning switches.
Link detection is typically implemented by having the controller send LLDP
packets out of each port on each switch that it knows about and observing where
the packet in messages containing those packets arrive. From the packet in
message, the controller knows what port the packet was received on, allowing
it to identify a unidirectional link between the port where this packet was sent
and the port where it was received.
This bug tampers with the list of ports sent by a malicious switch in the
features reply and port status messages that the controller uses to enumer-
ate available switch ports. If ports are omitted in these messages, no LLDP
packets will be sent on them, which means no links can form from those ports.
Without knowledge of these links, the controller is limited in its ability to route
packets and may be unable to reach certain destinations.
These bugs can be substantially mitigated by monitoring received packet in
messages and looking for previously unknown ports. If such ports are observed,
the controller can begin to send LLDP packets on those ports and emit an alert
about a malicious or buggy switch sending inconsistent information.
Broken ARP Broadcast (BB)–Some Mitigations. This bug is conceptually
similar to the link detection failure bug except that it applies to the network edge
ports of a malicious switch that are directly connected to hosts instead of to other
switches. It enables an attacker to render target hosts unreachable in a network
running ONOS or Floodlight. Both controllers identify edge ports as those that
have not received LLDP packets and are thus not connected to other switches and
only broadcast ARP requests on these ports. However, by relying solely on the
port lists from features reply and port status messages, certain ports may
be omitted from those messages and hidden from the controller, preventing ARP
broadcasts on those ports. This is despite other traﬃc from those ports. This
causes hosts behind these omitted ports of malicious switches to be eﬀectively
unreachable. This lasts until each target host sends an ARP request of its own,
at which point the controller receives the ARP request and learns the location
of the target host. Much like link detection failure bugs, monitoring received
packet in messages can substantially mitigate these bugs.
Unexpected Flow Rule Removal (FR)–Complete Mitigations. These
bugs confuse the ONOS controller into removing ﬂows that it installed on a
malicious switch, complicating debugging and directing suspicion away from the
malicious switch. This bug occurs because ONOS manages the ﬂow rules in
switches with a very heavy hand. In particular, it will remove any ﬂow rule
in the switch that it did not insert and will track the usage of ﬂow rules and
BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems
327
request removal of ﬂows rules that have been idle for some amount of time.
As a result, by modifying the ﬂow rule information returned to ONOS in the
flow stats reply message, a malicious switch can make a ﬂow rule appear idle
or appear suﬃciently diﬀerent that ONOS does not recognize it and orders its
removal. These bugs can be mitigated by relying on the ability of OpenFlow
switches to automatically remove ﬂow rules based on idle timeouts [31,33] and
ensuring that all expected rules are accounted for before beginning removal.
Unexpected Broadcast Behavior (UB)–Partial Mitigations. OpenFlow
packet out messages include a special broadcast option that asks a switch to
broadcast the included packet out of all ports with broadcast enabled that are
not the port on which this packet was received. However, this mechanism is vul-
nerable to subtle changes in behavior that cause unexpected packet forwarding
and cripples learning-switch type routing. This bug occurs when the packet out
message is modiﬁed by a malicious switch to change the in port, which results
in the packet being broadcast by the malicious switch out of the port on which
it was received. This has impact on learning switch routing because broadcast-
ing packets in this manner causes switches to learn incorrect locations for hosts
resulting in connectivity losses. These bugs can be detected by linking packets
sent at one switch with those received by other switches.
4.3 Attack Demonstrations
We demonstrate that one can weaponize the bugs in Table 2 into powerful attacks
with potentially disastrous consequences. We manually develop exploits for a few
of the bugs we discover and present these weaponized examples below. All attacks
were manually implemented and tested using BEADS. The network topology was
a simple tree with three switches and four hosts.
TLS Man-in-the-Middle. The security of TLS against man-in-the-middle
attacks relies on a correctly implemented certiﬁcate-based PKI and active user
involvement. Unfortunately, attackers can leverage maliciously obtained certiﬁ-
cates [22] or tools like SSLStrip [26] to observe (and potentially modify) conﬁ-
dential information exchanged between client and server.
We implemented this scenario using the Ryu controller, which provides learn-
ing switch routing. We assume that the attacker has access to a compromised
switch on path as well as a host that is not currently on the path between
client and server. We use the FM bug to alter the ﬂow table of the attacker-
controlled switch to insert his host, potentially performing an SSL man-in-the-
middle attack, into the path between the target client and server. Additional
rules must be inserted using the FM vulnerability to ensure that each switch
only sees packets with addresses that conform to the network topology.
Web Server Impersonation. In this scenario, an attacker wishes to imper-
sonate an internal web server. We use the ONOS controller (we believe POX
is vulnerable to a similar attack) and a malicious host at an arbitrary location
in the network. We used the ARP-location-injection bug to confuse the con-
troller into believing that the target webserver is now located on the same port
328
S. Jero et al.
as the attacker. All future connections from new or idle hosts are then sent to
the attacker. Since ONOS uses a global Proxy ARP cache, the attacker can be
anywhere on the network. This eﬀect lasts until the target server starts a new
connection with a host that causes a packet in to the controller. This will reset
the target server’s location and end the attack.
If the switch to which the target server is connected is compromised, the
attacker can increase the duration of this attack by also using the DP1 vulner-