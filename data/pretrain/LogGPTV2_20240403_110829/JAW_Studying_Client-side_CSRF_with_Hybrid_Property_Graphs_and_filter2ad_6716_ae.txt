8
1
280
12,701
36,665
49,366
5
83
8
1
8
1
12
87
101
106
Table 2: Number of forgeable requests and affected web applications.
requests include the manipulated content. After a careful in-
vestigation, we observed that the false positive occurs as a
result of inaccurate pointer analysis of the context-sensitive
this keyword, which has a run-time binding, and may be
different for each invocation of a function depending on how
the function is called, e.g., dynamically called functions, or
different invocation parameters using a hierarchy of call and
apply methods [8, 9] lead to different bindings of this.
Exploitations. Next, we looked for practical exploitations for
the 515 requests manually. In these experiments, we assumed
a web attacker model for all input sources, except for cookies
for which we assumed a network attacker model (see §2.1).
We were able to generate a working exploit for 203 forge-
able requests affecting seven web applications, all of them
using data values of WIN.LOC, that can be forged by any web
attacker. For the other groups of requests, we were not able
to ﬁnd an exploit. We point out that it is hard to achieve com-
pleteness when looking for exploitations manually as such
a task requires extensive knowledge of web applications for
identifying target URLs and the points where an attacker
could inject malicious payloads. The fact that we could not
ﬁnd an exploit does not imply that an exploit does not exist.
For these cases, we conﬁrmed that the JavaScript code sends
HTTP requests by processing data values taken from different
data structures unconditionally. A highly motivated attacker
could eventually ﬁnd a way to inject malicious payloads in
these data structures and exploit these forgeable requests.
5.4 Analysis of Forgeable Requests
In this section, we have a closer look at the degree of ma-
nipulation an attacker can have on the forgeable requests of
Table 2. We extracted the stack trace for the lines of code that
send forgeable requests and characterized the vulnerable be-
havior along three dimensions: forgeable request ﬁelds, type
of manipulation, and the request template.
Forgeable Fields. First, the request ﬁeld(s) that can be ma-
nipulated can determine the severity of the vulnerability. For
example, if the attacker can change the domain name of a
request, the client-side CSRF could be used to perform cross-
origin attacks. We grouped web applications in four cate-
gories, based on the ﬁeld being manipulated and found that in
nine, 34, 41, and 41 web applications, an attacker can manip-
ulate the URL domain, the URL path, the URL query string,
and the body parameter, respectively. Also, we grouped appli-
USENIX Association
30th USENIX Security Symposium    2535
Dom.
Path
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Outgoing HTTP Request
Query
Body
Part
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
One
One
One
One
One
One
One
One
Mult
Mult
Mult
Mult
Mult
Mult
Mult
Mult
Mult
Mult
Mult
Any
Any
Any
Any
Any
Any
Control
-, A, -
-, A, -
W, -, -
-, -, P
W, -, -
-, A, -
-, -, P
-, -, P
-, A, -
W, -, -
W, A, P
W, -, -
-, A, -
-, -, P
-, A, -
-, -, P
-, A, -
-, -, P
W, -, -
W, -, -
W, -, -
W, -, -
W, -, -
W, -, -
W, -, -
Total
Reqs
Apps
16
5
(∗)166
1
28
7
6
11
4
(∗)20
6
2
7
2
3
1
5
6
28
1
(∗)185
1
(∗)1
2
1
11
5
25
1
1
7
6
11
1
1
1
1
7
2
3
1
5
6
8
1
8
1
1
2
1
Legend: A=Appending; P=Prepending; W=Writing.
Table 3: Taxonomy of client-side CSRF. Each template reﬂects the level
of attacker’s control on the outgoing HTTP request. ∗ are the templates for
which we found an exploit.
cations by the number of ﬁelds that can be manipulated in a
request. In total, 55, 34, and 12 applications allow modifying
one, more than one, and all ﬁelds, respectively.
Operation to Forge a Field. Another factor that inﬂuences
the severity is the operation that copies a manipulated value
in one or more ﬁelds. We found that 28 applications allow an
attacker to change the value of one or multiple ﬁelds. Also, 38
and 28 applications allow an attacker to add one or multiple
ﬁelds by appending and prepending the attacker-controlled
string to the ﬁnal string, respectively.
Forgeable Request Templates. We characterize HTTP re-
quests via templates, where we encode the type and number
of ﬁelds that can be manipulated as well as the type of op-
eration. Table 3 lists all templates, and for each template, it
shows the number of matching requests and web applications
using them. In total, we identiﬁed 25 distinct templates. We
observed that the majority of web applications use only one
template (i.e., 68 applications) across all their web pages or
two templates (i.e., 17 applications).
5.5 Exploitations and Attacks
The 203 exploitable client-side CSRF affect seven targets, as
shown next. Our exploits attack web applications the same
way classical CSRFs do, i.e., by performing security-relevant
state-changing requests. In addition, we found exploitations
of client-side CSRF that enable XSS and SQLi attacks, which
cannot be exploited via the classical attack vector.
SuiteCRM and SugarCRM. In total, we found 115 and 38
forgeable requests in SuiteCRM and SugarCRM, which can
be exploited to violate the server’s integrity. In both appli-
cations, the JavaScript code reads a hash fragment parame-
ter, e.g., ajaxUILoc, and uses it verbatim as the endpoint to
which an asynchronous request is submitted. An attacker can
forge any arbitrary request towards state-changing server-side
endpoints to delete accounts, contacts, cases, or tasks–just to
name only a few instances that we conﬁrmed manually.
Neos. We found eight forgeable requests in Neos. In all of
them, each parameter p of the HTTP request originates from
the page’s URL parameter moduleArguments[@p]. Among
these, we have, for example, the action and controller param-
eters that are used by the backend server to route the request
to internal modules. Such behavior allows an attacker to di-
rect a request to any valid internal module, including those
implementing state-changing operations. For example, we
exploited this behavior to delete assets from the ﬁle system.
Kibana. We found one forgeable request, generated by Time-
lion, a Kibana’s component that combines and visualizes in-
dependent data sources. Timelion allows running queries on
data sources using a own query syntax. The JavaScript code
can read queries from the page’s URL fragment and pass
them to the server side. As a result, an attacker can execute
malicious queries without the victim’s consent or awareness.
Modx. We discovered 20 forgeable requests in Modx that can
be exploited in two distinct ways. First, Modx’s JavaScript
fetches a URL string from the query parameter of the page’s
URL, and uses it verbatim to submit an asynchronous request
with a valid anti-CSRF token. Similarly to SuiteCRM and Sug-
arCRM, an attacker can forge requests towards state-changing
server-side endpoints. Also, in one forgeable request, Modx
copies a page’s URL parameter in a client-side request, which
is reﬂected back in a response and inserted into the DOM
tree, allowing an attacker to use client-side CSRF to mount
client-side XSS. Based on our manual evaluation, the attacker
can exploit the client-side XSS only via client-side CSRF.
Odoo. We found one forgeable request that uses an id pa-
rameter of the URL fragment to load a database entity. We
discovered that the server uses this parameter in a SQL query
which is not properly validated, resulting in an SQLi vulnera-
bility. We note that, due to a anti-CSRF token, the exploitation
of the SQLi vulnerability via direct requests is extremely hard
without exploiting ﬁrst the client-side CSRF vulnerability.
Shopware. We found 20 forgeable requests sent by Shopware
on page load. The code maps the page’s URL hash fragment
to different parts of the outgoing request. First, the code uses
the ﬁrst fragment of the hash fragment as URL path of the
outgoing request. Then, it uses the remaining fragments as pa-
rameters of the outgoing request body. This allows an attacker,
for instance, to delete products of the shop’s catalog.
Impact of Dynamic Snapshotting
5.6
We designed and carried out additional experiments to show
the impact of dynamic snapshotting in vulnerability detection
and HPG construction (see our methodology in §5.1).
2536    30th USENIX Security Symposium
USENIX Association
5.6.1 Vulnerability Detection
We repeated our evaluation using JAW-static, and compared
the results with JAW (§5.1). In total, JAW-static found 48,543
requests, out of which 11,878 reported to be forgeable. By
comparing the difference, we observed that JAW-static has
detected 840 less forgeable requests (i.e., a lower bound of
+7.07% false negatives). Out of the 840 false negatives, 161
cases are vulnerabilities for which we found an exploit, i.e.,
JAW-static does not detect 79.3% of the exploitable client-side
CSRF vulnerabilities that was detected by JAW. Additionally,
JAW-static reported 17 more cases that were not vulnerable
(i.e., a lower bound of +0.15% false positives). We manually
examined all the false positive and false negative cases to
discover the underlying reasons.
False Positives (FP). Out of 17 FPs, 12 were due to non-
existing dynamically fetched code (i.e., by dynamic insertion
of script tags) where the value of the tainted variable changed
in the dynamic code. Such FPs are eliminated in JAW because
it monitors the program execution leveraging the DOM tree
and HTTP messages. Then, 3 out of the 17 cases were due to a
subsequent removal of the event handlers using dynamic code
evaluation constructs with dynamically generated strings. Fi-
nally, the last two FPs occurred due to the removal of elements
from the DOM tree, and thus the implicit removal of their
event handlers. Similarly, such FPs do not occur with JAW,
as it monitors the ﬁred events and their handlers at run-time.