### Web Content and Hybrid Frameworks: Defense Layers

Hybrid frameworks employ multiple layers of defense to protect web content. The first layer is the Same Origin Policy (SOP) within the embedded browser. For example, advertisements are confined within iframes, preventing them from accessing bridges in other frames. The second layer is the bridge mechanism itself, which may be difficult to invoke from inside an iframe. The third layer involves origin checks used by the framework’s local half to block unauthorized web content from accessing the bridge (see Section VII-B). The fourth layer is access control within the operating system (see Section III-B).

#### A. Conceptual Overview

We use the term "fracking" to describe any attack that allows malicious foreign-origin JavaScript to "drill" through these defense layers and gain unauthorized access to device resources. Fracking vulnerabilities have several distinguishing features compared to other security holes in hybrid and native mobile apps.

1. **Exploiting Mismatches and Semantic Gaps**:
   - Fracking attacks exploit the mismatches and semantic gaps between the SOP-based security policy governing the web half of hybrid apps and the OS access-control policy governing their local half. Specifically, hybrid frameworks often fail to correctly apply the SOP to bridges. This makes fracking vulnerabilities generic, affecting all bridge mechanisms across various hybrid frameworks, embedded browsers, and platforms, both mobile and desktop.

2. **Not Caused by User-Granted Permissions**:
   - Fracking vulnerabilities are not caused by the well-known weaknesses of access control based on user-granted permissions, such as apps requesting too many permissions or users granting permissions without understanding the consequences. Even on desktop platforms like macOS, where access control is not based on user-granted permissions, fracking can still occur. On Android, the issue is not just excessive permissions but the exposure of these permissions to untrusted web content included in the app.

3. **Distinct from Permission Re-delegation**:
   - Fracking is not an instance of Android's permission re-delegation problem. It occurs at a different layer where permission-based local access control meets origin-based web access control. Hybrid frameworks like PhoneGap do not blindly delegate their permissions to untrusted web content. Instead, they deploy several defenses to prevent "confused deputy" attacks and ensure that local permissions are only used by the origin to which they were delegated. However, as shown in Section VII, these defenses are largely ineffective.

4. **Challenges with Embedded Browsers**:
   - There is a significant difference between conventional and embedded web browsers that complicates defending against fracking. Conventional browsers interact with users, for example, Chrome's implementation of the WebRTC API pops up a user dialog box every time an access is attempted, showing the name of the requesting domain and asking for permission. In contrast, hybrid frameworks use embedded browsers to automatically access local device resources without user interaction. This means they cannot afford to ask for permission on every access and must rely on programmatic defenses.

#### B. Technical Details

A fracking attack is executed by a malicious script confined within an iframe in the embedded browser. While the SOP prevents it from accessing objects in other frames, it does not stop the script from including the hybrid framework’s JavaScript library or even a modified clone of this library to maliciously access the framework’s bridges.

- **Chosen-Bridge Attacks**:
  - Frameworks like PhoneGap support multiple bridges to and from local resources. They allow JavaScript on the web side to choose a bridge via `setNativeToJsBridgeMode` and `setJsToNativeBridgeMode` functions. These functions are not intended to be called directly by hybrid apps, but they are not protected by the SOP. Therefore, a malicious script can invoke them to select a vulnerable bridge. Even if some bridges are secure, a single vulnerable bridge can bypass all of the framework’s defenses. The availability of bridges varies by version, but malicious JavaScript can determine the version and adaptively choose the attack.

- **Exploiting Interface-Based Bridges**:
  - Any JavaScript object added to the embedded browser by the framework’s local half via functions like `addJavascriptInterface` in Android’s WebView or `ScriptEngine.addExtension` in BlackBerry is available by default to JavaScript in any iframe, regardless of its origin. Functions like `WebBrowser.InvokeScript` on iOS and Windows Phone complicate exploitation by injecting JavaScript into the main frame, not the iframe. Thus, while malicious JavaScript inside an iframe cannot see data returned from the device, it can still cause malicious side effects through web-to-local bridges, such as creating or deleting contacts or sending SMS to premium numbers.

- **Exploiting Event-Based Bridges**:
  - Event-based local-to-web bridges are difficult to use if the framework’s JavaScript library is running inside an iframe. Events that synchronize the framework’s web and local halves are always delivered to the main frame, even if the handler was registered from an iframe. This prevents the script in the iframe from learning that the local half is ready with the results. However, modified, malicious clones of the framework’s JavaScript library can still access local resources via event-based bridges. If the malicious script inside an iframe cannot receive synchronization events, it can simply block for a predefined interval until the local half is ready. Additionally, even if the framework’s utility objects are not visible from an iframe, the main JavaScript objects implementing the bridge are available, and malicious code can access them directly.

- **Exploiting URL Interposition-Based Bridges**:
  - Both methods for asynchronous URL loading—fetching an invisible iframe whose source URL encodes the message or issuing an XMLHttpRequest to an encoded URL—work from inside any iframe. Malicious JavaScript confined in an iframe can use either bridge to access the framework’s local half.

### VI. Fracking in the Wild

To estimate the prevalence of fracking vulnerabilities in real-world hybrid applications, we analyzed 7,167 free Android apps built using PhoneGap, the most popular hybrid framework. These apps were identified in our dataset of 128,000 free apps collected from Google Play between January 18 and March 18, 2013, by the presence of “cordovaVersion” or “phonegapVersion” in the dexdump of their APK and the presence of PhoneGap plugins in “plugins.xml”, “cordova.xml”, or “phonegap.xml”.

We implemented a tool called GapFinder to automatically extract from each PhoneGap app its (1) local permissions, (2) a subset of the web domains whose content is included in the app, and (3) the domain whitelist, if any. To extract permissions, GapFinder uses Android’s aapt (Android Asset Packaging Tool). To find domains contributing web content to the app, GapFinder uses apktool to reverse-engineer the APK, extracts HTML files used by the app, and automatically crawls each HTML file to depth 1 using Selenium with a Google Chrome driver and the browser string overwritten to mimic a Nexus 4 device. The resulting set of domains is a conservative underestimate because the app may fetch content from additional domains reached only by browsing to depth 2 or deeper. Also, with syndicated advertising, the actual domains may change from execution to execution.

- **Findings**:
  - 3,794 apps do not include any external content (such as iframes, scripts, etc.) in the HTML files extracted by our tool.
  - 45 apps include only HTTPS content.
  - The remaining 3,328 apps include content from at least one external domain via HTTP. Their device resources are thus potentially vulnerable to both web attackers (hosted at any of these domains) and network attackers.

Figs. 3 through 6 estimate the exposure of specific sensitive resources to web attackers. For example, Fig. 3 shows that 20 PhoneGap apps expose the ability to read the contacts list on the device to 20 or more web domains each. Fig. 4 shows that 19 apps expose the ability to write the contacts list to 20 or more domains each. Fig. 5 shows that each of 81 apps allows at least 20 domains to write into the device’s external storage. Fig. 6 shows that 407 apps expose fine-grained location data to at least 20 domains each.

All vulnerabilities were empirically confirmed by randomly sampling the set of vulnerable apps, injecting attack JavaScript into one or more foreign origins included in the app, and verifying that this JavaScript can successfully access local device resources.

Figs. 7 and 8 estimate the extent of exposure, i.e., how many web domains can access device resources by fracking a hybrid app. Fig. 7 shows that more than 150 apps expose their resources to at least 50 web domains each. Fig. 8 shows that most external domains have access to between 4 and 6 resources, but some have access to all 16 resources available in default PhoneGap.

Fig. 9 demonstrates that many apps use third-party plugins. These plugins expose many more resources than default PhoneGap, including fine-grained social-media permissions such as access to the user’s Facebook and Twitter. More than half of the apps in our survey incorporate at least 10 different plugins.

Examples of vulnerable PhoneGap apps include:
- **ForzeArmate**: An app for Italian servicemen which exposes the ability to write into external storage (among other permissions) to any domain advertising through Google syndication.
- **Edinburgh by Bus**: An app that exposes external storage to a large number of obscure Eastern European dating sites.
- **DrinkedIn BarFinder**: An app that exposes fine geolocation to domains such as freelifetimecheating.com, www.babesroulette.com, and many adult sites. Furthermore, content from all of these domains is loaded over HTTP and thus vulnerable to network attackers, who automatically gain access to the app’s local permissions.

### VII. Existing Defenses

#### A. Relying on the Browser

Several hybrid frameworks, including MoSync and Web Marmalade, rely on the embedded browser to prevent untrusted web content from accessing bridges to local resources. Because the bridges are added to the browser by local code, they have no web origin as far as the browser is concerned. Therefore, malicious web content from any origin can directly invoke the bridges, as explained in Section V-B. All hybrid apps based on any of these frameworks are generically vulnerable to fracking.

#### B. Whitelisting Authorized Domains

Some hybrid frameworks, including PhoneGap and BlackBerry WebWorks, implement defenses specifically to prevent foreign-origin content from accessing bridges (i.e., fracking attacks). The app creator supplies a whitelist of authorized domains, e.g., the app’s own domain. In PhoneGap, the whitelist is specified via a platform-specific configuration file such as `cordova.xml` or `config.xml`.

- **Implementation Challenges**:
  - Correctly implementing this defense is subtle and error-prone. The right property is NoBridge (Section III-C): web content loaded by the hybrid app from a non-whitelisted origin should not be able to access the bridge. Instead, the properties enforced by the actual defenses differ from framework to framework, platform to platform, and even from bridge to bridge within the same framework. For example, some PhoneGap bridges aim to enforce NoBridge, while other parts of the same framework aim to enforce a property we call NoLoad: the hybrid app should not be able to load any web content from a non-whitelisted origin. NoLoad implies NoBridge, but it is much coarser and breaks both the user interface and the business model of many free apps.

#### C. Enforcing NoLoad

PhoneGap on Android, iOS, and Windows Phone attempts to enforce the NoLoad property: if the app fetches an HTML element (e.g., an iframe) from a non-whitelisted domain, the element is simply not loaded. Main frames from non-whitelisted domains are opened in the default system browser, which does not have any bridges. Interestingly, event-based bridges in PhoneGap on Android attempt to enforce the NoBridge property (see Section VII-E), even though NoLoad implies NoBridge and, had it been implemented correctly, would have rendered the NoBridge checks in the same code superfluous.

- **Errors in Implementation**:
  - Implementations of the NoLoad defense are rife with errors of two major types: incorrect URL interception and incorrect URL matching against the domain whitelist.
  - **Android (other than event-based bridges)**:
    - Before version 2.6, PhoneGap on Android used a WebView callback `shouldOverrideUrlLoading` to intercept the loading of foreign-origin content. This callback is not invoked for iframe fetches or XMLHttpRequests, so it cannot prevent a hybrid app from loading unauthorized content, such as an ad in an iframe. PhoneGap 2.6, released on April 9, 2013, uses the `shouldInterceptRequest` callback, which correctly intercepts the loading of iframes. This callback is only supported by Android API 11 or later.
    - Unfortunately, this implementation intercepts and blocks the loading of any content from non-whitelisted domains. The problem is that URL interception in WebView does not provide any way to distinguish between URLs loaded in the same origin (e.g., via `<script>` tags) and URLs loaded in a foreign origin (e.g., via `<iframe>` tags). The resulting policy is thus stricter than the standard same origin policy! The hybrid app is not only prevented from loading foreign-origin content but also cannot include an external image or JavaScript library, which is a very common practice.
    - All tested versions of PhoneGap for Android, including 2.6, incorrectly match intercepted URLs against the whitelist. PhoneGap uses Java’s regular expression engine and anchors the expression for each whitelisted domain only at the beginning, but not the end:
      ```java
      this.whiteList.add(Pattern.compile("^https?://(.*\\.)?" + origin));
      ```
      For example, if `foo.com` is whitelisted, PhoneGap allows content to be loaded from `foo.com.evil.com`, violating the desired property. A similar observation was made in [19].
      - HTTP/HTTPS is ignored when checking URLs against the whitelist. A network attacker can thus downgrade connections from HTTPS to HTTP and inject malicious scripts into whitelisted origins.
  - **iOS**:
    - PhoneGap creates a subclass of `NSURLProtocol` named `CDVURLProtocol` to intercept URLs loaded in `UIWebView` and check whether the URL is whitelisted. `UIWebView` suffers from the same problem as `WebView`, and the resulting policy is stricter than the same origin policy.
    - PhoneGap on iOS only allows domain names to be specified in the whitelist, and it does not support subdomains. This can lead to similar issues as those observed in Android, where a malicious domain can be whitelisted if it matches a part of the whitelisted domain.