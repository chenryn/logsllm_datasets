title:Automated Discovery of Cross-Plane Event-Based Vulnerabilities in
Software-Defined Networking
author:Benjamin E. Ujcich and
Samuel Jero and
Richard Skowyra and
Steven R. Gomez and
Adam Bates and
William H. Sanders and
Hamed Okhravi
Automated Discovery of Cross-Plane Event-Based
Vulnerabilities in Software-Deﬁned Networking
Benjamin E. Ujcich∗, Samuel Jero†, Richard Skowyra†, Steven R. Gomez†,
Adam Bates∗, William H. Sanders∗, and Hamed Okhravi†
∗University of Illinois at Urbana-Champaign, Urbana, IL, USA
†MIT Lincoln Laboratory, Lexington, MA, USA
Abstract—Software-deﬁned networking (SDN) achieves a pro-
grammable control plane through the use of logically centralized,
event-driven controllers and through network applications (apps)
that extend the controllers’ functionality. As control plane deci-
sions are often based on the data plane, it is possible for carefully
crafted malicious data plane inputs to direct the control plane
towards unwanted states that bypass network security restrictions
(i.e., cross-plane attacks). Unfortunately, because of the complex
interplay among controllers, apps, and data plane inputs, at
present it is difﬁcult to systematically identify and analyze these
cross-plane vulnerabilities.
We present EVENTSCOPE, a vulnerability detection tool that
automatically analyzes SDN control plane event usage, discovers
candidate vulnerabilities based on missing event-handling rou-
tines, and validates vulnerabilities based on data plane effects.
To accurately detect missing event handlers without ground truth
or developer aid, we cluster apps according to similar event usage
and mark inconsistencies as candidates. We create an event ﬂow
graph to observe a global view of events and control ﬂows within
the control plane and use it to validate vulnerabilities that affect
the data plane. We applied EVENTSCOPE to the ONOS SDN
controller and uncovered 14 new vulnerabilities.
I.
INTRODUCTION
Software-deﬁned networking (SDN) has experienced a
rapid rise in adoption within data center providers, telecom-
munication providers, and other enterprises because of its
programmable and extensible control plane [30]. SDN claims
to decouple the network’s decision-making about forwarding
(i.e.,
the control plane) from the trafﬁc being forwarded
(i.e.,
the data plane) so as to allow centralized oversight
through an SDN controller and network applications (or apps)
in the enforcement of consistent (security) policies.
All popular modern SDN controllers, including ONOS [7],
OpenDaylight [51], Hewlett Packard Enterprise’s VAN SDN
DISTRIBUTION STATEMENT A. Approved for public release. Distri-
bution is unlimited. This material
is based upon work supported by the
Assistant Secretary of Defense for Research and Engineering under Air
Force Contract No. FA8702-15-D-0001. Any opinions, ﬁndings, conclusions
or recommendations expressed in this material are those of the author(s) and
do not necessarily reﬂect the views of the Assistant Secretary of Defense for
Research and Engineering.
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24080
www.ndss-symposium.org
Controller [21], and Floodlight [17], operate as reactive event-
driven architectures that, based on data plane activities, use
asynchronous event dispatchers, event listeners, and controller
API calls to pass information among controller and app com-
ponents.1 Each app’s event listeners subscribe to a subset of
the possible universe of events. Based on the event, an app
may call API services (e.g., a request to insert a new ﬂow
rule) or generate new events (e.g., a notiﬁcation that a new
host has been seen in the data plane).
SDN’s programmability signiﬁcantly alters the control
plane’s attack surface. The claim of control and data plane
decoupling belies a subtle and serious challenge: control plane
decisions are often made as a result of information collected
from an untrustworthy data plane. Prior attacks [14], [22], [57]
have demonstrated speciﬁc examples of what we generalize
as the class of cross-plane attacks, which allow attackers to
inﬂuence control plane decision-making without attacking the
controller or apps directly [70]. For instance, a clever attacker
who controls a data plane host can emit packets that are acted
upon by controller and app components, which can result in
malicious privilege escalation or malicious control over ﬂow
rule behaviors by a host.
In the context of cross-plane attacks, decisions made based
on untrusted data plane input may cause event handlers to
execute unintended code paths, or prevent the execution of
intended code paths, within the controller or apps. The event-
driven, composable, and interdependent nature of controller
and app components provides new potential for vulnerabilities
based on which apps handle (or, critically, which apps do
not handle) different kinds of events. For instance, apps
that operate as intended in isolation may create conﬂicting
behaviors when used together, and that may create vulnerable
conditions that are not found when apps are used in isolation.
As a result, the security posture of the SDN control plane
does not rely on properties of individual controller or app
components, but rather on the system-wide behavior of the
components’ event interactions as a whole.
The vulnerabilities that result from complex event and app
interactions are challenging to detect automatically because
such vulnerabilities are a class of logic (or semantic) bugs that
require local and global semantic understanding about events
and their use. Logic bugs are of interest to attackers because
such bugs are difﬁcult to identify during software development
1An SDN controller service or app often consists of multiple functional
units, which we call components. A functional unit ends at an API boundary
or event dispatch.
and can persist for years before disclosure [40]; existing tools
often focus on bugs related to language grammar or resource
use only (e.g., FindBugs [23], PMD [53], and Coverity [8])
or require developers to annotate code (e.g., KINT [63]),
rendering such tools difﬁcult to use in practice [27], [58].
In the absence of developer annotations that specify in-
tended app behavior, the vulnerability search space can become
large [11], [55], [34] [27]. However, by focusing on a narrower
scope of event-related vulnerabilities that involve missing or
unhandled events, we can tractably enumerate those conditions
and investigate them. Uncovering such vulnerabilities requires
understanding of how events are used within SDN components,
how events are passed between SDN components, and how
events’ actions propagate within the control plane to have data
plane effects. Given the event-driven nature of modern SDN
architectures, our insight is that event-related bugs that result
from unhandled events are of high interest in SDN security
evaluation, particularly if cross-plane attacks can be used to
trigger such vulnerabilities that ultimately lead to data plane
consequences (e.g., ﬂow rule installation).
Although tools have been developed to perform vulnerabil-
ity discovery in SDNs with fuzz testing [25], [34], concurrency
detection [66], and code analysis [32], [33], we are not aware
of any tools that are designed speciﬁcally to aid developers
and practitioners in the understanding of global event use
and in the identiﬁcation of unhandled event vulnerabilities at
design and testing time. Forensic SDN tools [62], [59] provide
causal explanations of past executions but do not identify
vulnerabilities ahead of time.
Overview: In this paper, we propose a systematic approach
for discovering cross-plane event-based vulnerabilities in SDN.
We designed a tool, EVENTSCOPE,
that aids practitioners
and developers in identifying candidate vulnerabilities and
determining whether such vulnerabilities can manifest them-
selves in the context of apps currently in use. Rather than
discover the existence of “bad” events, our goal is to identify
where the absence of a certain event handler may prevent
developer-intended code paths from executing. We investigate
how SDN controllers and apps use events to inﬂuence control
ﬂow (i.e., the series of code paths in the control plane that are
or are not executed) as well as implicit data ﬂow (i.e., the
propagation of untrusted data plane input that may impact
control plane decisions).
Our initial challenge is to identify what events an app
should handle. It is complicated because no ground truth exists
for this task, making simple heuristics and supervised learning
techniques difﬁcult to apply. A na¨ıve solution would be to
require an app to handle all events, but there are instances in
which an app does not need to do so, i.e., the lack of handling
of certain events does not negatively impact the app’s expected
operation or cause deleterious data plane effects. Instead,
EVENTSCOPE analyzes how events are handled within apps’
event listeners relative to other apps to identify potentially
missing events.
EVENTSCOPE then uses static analysis to abstract
the
SDN’s API functionality and event ﬂow into what we call an
event ﬂow graph. This data structure shows the control and data
ﬂow beginning from data plane inputs and ending at data plane
outputs (e.g., ﬂow rule installation and removal). That allows
EVENTSCOPE to identify the impact of a given component on
other components in the system.
Using the event ﬂow graph, EVENTSCOPE then validates
whether potentially missing events can cause data plane effects
in the presence or absence of other apps. Given an app with
such a candidate vulnerability, EVENTSCOPE identiﬁes other
apps that handle that app’s missing event and also have data
plane effects to create a context for that vulnerability. Next,
EVENTSCOPE represents these code executions as event ﬂow
graph paths to determine whether they have data plane effects.
Finally, EVENTSCOPE generates a list of vulnerabilities for
analysis by developers and practitioners.
Throughout
this paper, we use the open-source, Java-
based ONOS SDN controller [7] as a representative case
study. ONOS is used in production settings by telecommuni-
cations providers, and its codebase underlies proprietary SDN
controllers developed by Ciena, Samsung, and Huawei [45].
ONOS’s extensive event-centered design makes the controller
an ideal candidate for study. We analyzed how ONOS’s core
service and app components use events, discovering that many
events are not handled even when components subscribe to
those events. Although we focus on ONOS as a case study, we
note that all modern SDN controllers use a similar event-based
architecture;
thus, EVENTSCOPE’s methodology is broadly
applicable to all such controllers.
We identify 14 new vulnerabilities in ONOS and, for se-
lected cases, we show, through crafted exploits, how attackers
are able to inﬂuence control plane behavior from the data
plane alone. For instance, we were able to prevent ONOS’s
access control (ﬁrewall) app from installing ﬂow rules, which
allows hosts to communicate with each other in spite of access
control policies that should have denied their communication
(CVE-2018-12691). Additionally, we were able to leverage
ONOS’s host mobility app to remove the access control app’s
existing ﬂow rules (CVE-2019-11189). These results demon-
strate that, in real SDN implementations, instead of apps acting
constructively and composably they often have competing and
conﬂicting behavior. That conﬂict provides subtle opportunities
for vulnerabilities to appear.
Contributions: Our main contributions are:
1)
2)
3)
4)
An automated approach to analyze event use by ap-
plications that identiﬁes likely missing event handling
and checks whether this lack of event handling can
cause data-plane effects in combination with other
apps.
The event ﬂow graph data structure, which allows for
succinct identiﬁcation of (a) event dispatching, event
listening, and API use among SDN components, as
well as (b) the context to realize vulnerabilities.
An implementation of our vulnerability discovery
tool, EVENTSCOPE, in Java and Python.
The discovery and validation of 14 new vulnerabil-
ities in ONOS that escalate data plane access.
II. BACKGROUND
We describe here the features of the SDN architecture.
Although we use the ONOS SDN controller as a running exam-
ple, we note that other SDN controllers (e.g., Floodlight [17])
2
Fig. 1: SDN architecture overview. Apps subscribe to event
dispatchers and implement event listeners. Network, data store,
and service updates generate events.
share similar event-driven features. We outline the challenges
and mitigation approaches for SDN security that are related to
adversarial data plane input, event-driven apps, and event ﬂow
interactions.
A. SDN Architecture
1) Overview: Figure 1 shows an overview of the SDN
architecture. SDN decouples how trafﬁc decisions are made
(i.e.,
the control plane) from the trafﬁc being forwarded
(i.e., the data plane). Trafﬁc decisions are made in a logically
centralized controller that functions as the core of a network
operating system. Controllers manage network conﬁgurations
and forwarding rules in the network’s forwarding devices
through the southbound API (e.g., OpenFlow [39]).
2) Core services and app model: Controllers provide core
services (e.g., a host service that maintains data plane host
information) as a basis for extended functionality through
network applications (apps). Apps interact with the con-
troller’s core services through the northbound API and can
be installed as reactive components within the controller
or operate independently as proactive components that use
RESTful interfaces. (See Appendix A for an example of the
ONOS app’s code.) Core services and apps use event listeners
(described further in Section II-A3) to respond to events and
to actuate further functionality by calling core or internal
methods. The SDN app ecosystem allows third party and
independent developers to write apps that can be installed in
SDN controllers, and that can introduce security issues if apps
are malicious [33], [32] or if apps serve as indirect conduits
by which malicious activities can occur [59].
In addition to controlling forwarding decisions, SDN con-
trollers also expose abstractions of network objects and pro-
cesses. For instance, ONOS includes abstractions for Host
objects that represent end hosts, and for Device objects that
represent forwarding devices. Those abstractions are built on
top of information learned or programmed from lower levels.
location provider builds Host objects
In ONOS,
based upon information learned from Packet objects’ header
information. Apps interested in changes to hosts can reason
about such changes at the level of a host abstraction rather
than a packet abstraction.
the host
Fig. 2: Cross-plane attack example. Black arrows denote data
plane connections, blue arrows denote control plane control
ﬂow, and red arrows denote intended effect (e.g., increased
data plane access). 1: An attacker emits data plane packets.
2: The controller’s southbound API receives packets. 3: The
controller’s components use the data plane input to make a
data plane decision. 4: The controller emits new packets or
ﬂow rules into the data plane. 5: The attacker uses the new
packets or ﬂow rules as a step to actuate an attack.
3) Event model: Most SDN implementations are event-
driven systems that model data plane changes as asynchronous
events, such as the processing of an incoming data plane
packet, the discovery of new network topology links, and
changes in forwarding device states. Events have different
kinds depending on the abstraction they describe (e.g., hosts,
packets, links), and each event kind may have different event
types that further describe the functional nature of the event
(e.g., host added, host removed).
Events are sent
from event dispatchers and received
through event listeners. For instance, the controller may dis-
patch a network link event to all apps that are interested in