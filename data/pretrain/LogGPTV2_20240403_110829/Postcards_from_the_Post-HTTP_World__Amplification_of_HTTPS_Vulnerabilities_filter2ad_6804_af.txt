The SSL Pulse project [64] releases monthly measurements
on the prevalence of certain attacks and feature support. Novel
variants of old vulnerabilities were discovered, such as in the
ROBOT attack [14], or for CBC oracles via the TLS-Attacker
fuzzing tool [80]. Summaries of known TLS vulnerabilities
were published by Levillain et al. [54], [55] and by the
IETF [75]. Lessons learned from attacks known before 2013
have been summarized by Meyer and Schwenk [56].
None of the papers above systematically discusses and
quantiﬁes web application security issues. However, the risks
coming from the partial adoption of HTTP on HTTPS websites
have been studied in several research papers. For instance,
[22] performed a large-scale analysis of the security risks of
mixed content websites, [51] analyzed the state of the HSTS
deployment and [77] studied the threats posed by the leakage
of cookies over HTTP channels. There are also a few papers
quantifying how much incorrect TLS implementations affect
the security of the email infrastructure [30], [43].
The present paper contributes to the increasingly popu-
lar research line on large-scale security evaluations of the
Web [86]. Though several papers analyzed the security of
the HTTPS certiﬁcate ecosystem [31], [44], [87], we are not
aware of any scientiﬁc publication which quantiﬁes how much
cryptographic weaknesses in TLS implementations may harm
web application security. Other important aspects of web appli-
cation security which have been investigated by previous large-
scale measurements include the dangers of remote JavaScript
inclusion [61], the prevalence of DOM-based XSS [53] and
the state of the CSP adoption [18], [19], [91].
(cid:19)(cid:26)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
B. Ethics and Limitations
Due to both legal and ethical reasons, our analysis of TLS
vulnerabilities in the wild was limited to an unintrusive scan
based on the use of publicly available tools. The exploitabil-
ity of the discovered vulnerabilities was exclusively judged
through a systematic analysis of the output of those tools,
deﬁned via an extensive account of the existing literature
on attacks against TLS (summarized in the attack trees of
Section III). All the vulnerabilities we tested have been ﬁrst
published at major computer security conferences and/or re-
ceived extensive coverage in the hacking community. They
have all been shown to be exploitable in the wild, requiring a
practically feasible amount of computational power. Since we
did not run any active attack attempt, it is possible that the
vulnerabilities reported in the present study are not actually
exploitable in practice, e.g., due to the deployment of anomaly
detection systems. That said, the real effectiveness of such kind
of mitigations is hard to assess and ﬁxing the vulnerabilities
would be certainly preferable from a security perspective.
The set of the studied web application vulnerabilities is not
intended to be exhaustive: it just gives evidence of signiﬁcant
security threats posed by vulnerable TLS implementations
and allows for a systematic quantiﬁcation of their practical
relevance. The usage of heuristics in a few parts of our ex-
perimental evaluation, e.g., for session cookie detection, may
have introduced a bias in our quantitative assessment: better
heuristics may make the analysis more precise, but they are
likely not going to entail a signiﬁcant change of the currently
drawn picture, given the large scale of the experiments. We
manually conﬁrmed some of the security issues to provide
further evidence of the effectiveness of our methodology. We
also rechecked all the vulnerable sites explicitly mentioned
in this paper at the beginning of January 2019 and most
of them have ﬁxed the issues since our ﬁrst scan. We have
responsibly reported the discovered ﬂaws to the sites that are
still vulnerable and only one has answered dismissively with:
“this case has no direct security impact and we will not take
an immediate action or a ﬁx”. In fact, we did not ﬁnd a strong
interest in TLS-related issues even in vulnerability reward
programs but the fact that many sites ﬁxed the problems is
promising in terms of awareness of the risks due to wrong
HTTPS implementations.
C. Summary and Perspective
Though the use of HTTPS is necessary for web application
security, it is not a panacea, because ﬂaws in the underlying
TLS implementation may have a signiﬁcant security import
at the application layer. We have computed a few disquieting
numbers in our present evaluation: we summarize here the
most relevant observations and present our perspective on the
main ﬁndings.
Almost 10% of the homepages of the crawled websites is
compromisable, i.e., a determined network attacker may get
active scripting capabilities on them. For approximately 25%
of the compromisable pages, this security problem can be
ﬁxed just by revising the cryptographic implementation of their
host. Unfortunately, the security of the other 75% pages is
downgraded by the inclusion of external scripts retrieved over
tainted channels: this makes it hard for web developers to get
a realistic picture of the cryptographic robustness of their web
applications and ﬁx potential issues. Since we only crawled
homepages, our ﬁndings under-approximate the real situation,
as other webpages might include more insecure content. SRI
is a potentially effective defense mechanism for these cases,
but its adoption is minuscule and sub-optimal: approximately,
just 3% of the pages are using SRI and none of the attacks
we found is actually stopped by the current deployment.
For what concerns web session security, we found room
for session hijacking attacks by cookie stealing in around
10% of the crawled websites, while more than 13% of the
websites were found vulnerable to cookie forcing. The most
concerning aspect of cookie security is the impact of related
domains: even a single security issue on a related-domain host
may completely undermine session security, because related-
domain hosts may break both the conﬁdentiality and the
integrity of session cookies. Room for password theft was also
found in 10% of the login pages.
Finally, cryptographic weaknesses in the TLS implemen-
tations of web trackers may pose major threats to user pri-
vacy at scale. In our experimental analysis, we discovered
some prominent trackers inadvertently introducing this secu-
rity problem on a signiﬁcant amount of websites. The most
disquieting aspect here is that just a single vulnerable tracker
may signiﬁcantly harm user privacy at scale, as long as it is
popular enough to be included on many different websites: for
instance, one problem we found allows for user proﬁling on
142 websites, which can be further increased to 968 websites
by running a more powerful variant of the attack.
We expect this bleak picture to improve after both browsers
and servers provide a better support for TLS 1.3. Major
browser vendors already announced that they will deprecate
TLS 1.0 and 1.1 in 2020 [8]. However, backward compatibility
and slow adoption are always a major hindrance for web
security improvements, so we expect old TLS versions to stick
around for at least a few years. The present paper acts as a
cautionary tale of the threats they pose: we plan to supply
the toolchain developed for our study as a web application
to support developers who are interested in mitigating these
threats.
partially
supported
by CINI
Focardi
Riccardo
Acknowledgments:
and Marco
Squarcina were
project
FilieraSicura, funded by CISCO Systems Inc. and Leonardo
SpA. Marco Squarcina was also partially supported by the
European Research Council
the European
Unions Horizon 2020 research (grant agreement No 771527-
BROWSEC). Matus Nemec was partially supported by the
Czech Science Foundation under project GA16-08565S.
Marco Squarcina did most of the work on this project while
he was a postdoctoral researcher at Ca’ Foscari University.
(ERC) under
(cid:19)(cid:26)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] D. Adrian, L. Valenta, B. VanderSloot, E. Wustrow, S. Zanella-B´eguelin,
P. Zimmermann, K. Bhargavan, Z. Durumeric, P. Gaudry, M. Green,
J. A. Halderman, N. Heninger, D. Springall, and E. Thom´e, “Imperfect
Forward Secrecy,” in Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security – CCS '15. ACM, 2015.
[2] D. Akhawe, F. Braun, F. Marier, and J. Weinberge, “W3C Recommen-
dation: Subresource Integrity,” https://www.w3.org/TR/SRI/, 2016.
[3] N. J. AlFardan and K. G. Paterson, “Lucky Thirteen: Breaking the TLS
and DTLS Record Protocols,” in 2013 IEEE Symposium on Security and
Privacy.
IEEE, may 2013.
[4] N. Aviram, S. Schinzel, J. Somorovsky, N. Heninger, M. Dankel,
J. Steube, L. Valenta, D. Adrian, J. A. Halderman, V. Dukhovni,
E. K¨asper, S. Cohney, S. Engels, C. Paar, and Y. Shavitt, “DROWN:
Breaking TLS Using SSLv2,” in Proceedings of
the 25th USENIX
Security Symposium (USENIX Security 16). USENIX Association,
2016, pp. 689–706.
[Online]. Available: https://www.usenix.org/
conference/usenixsecurity16/technical-sessions/presentation/aviram
[5] R. Bardou, R. Focardi, Y. Kawamoto, L. Simionato, G. Steel, and J.-K.
Tsay, “Efﬁcient Padding Oracle Attacks on Cryptographic Hardware,” in
Advances in Cryptology – CRYPTO 2012. Springer Berlin Heidelberg,
2012, pp. 608–625.
[6] A. Barth, “HTTP State Management Mechanism,” http://tools.ietf.org/
html/rfc6265, 2011.
[7] T. Be’ery and A. Shulman, “A Perfect CRIME? Only TIME Will
Tell,” Black Hat Europe 2013, 2013, online, cit.
[2018-10-29].
[Online]. Available: https://media.blackhat.com/eu-13/brieﬁngs/Beery/
bh-eu-13-a-perfect-crime-beery-wp.pdf
[8] D. Benjamin, “Modernizing Transport Security,” Google Security Blog,
2018, cit. [2019-01-29]. [Online]. Available: https://security.googleblog.
com/2018/10/modernizing-transport-security.html
[9] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet,
M. Kohlweiss, A. Pironti, P.-Y. Strub, and J. K. Zinzindohoue, “A Messy
State of the Union: Taming the Composite State Machines of TLS,” in
2015 IEEE Symposium on Security and Privacy.
IEEE, may 2015.
[10] K. Bhargavan, A. D. Lavaud, C. Fournet, A. Pironti, and P. Y. Strub,
“Triple Handshakes and Cookie Cutters: Breaking and Fixing Authen-
tication over TLS,” in 2014 IEEE Symposium on Security and Privacy.
IEEE, may 2014.
[11] K. Bhargavan and G. Leurent, “Transcript Collision Attacks: Breaking
Authentication in TLS, IKE, and SSH,” in Proceedings of the 2016
Network and Distributed System Security Symposium.
Internet Society,
2016.
[12] ——, “On the Practical (In-)Security of 64-bit Block Ciphers,” in
Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security - CCS'16. ACM Press, 2016.
[13] D. Bleichenbacher, “Chosen ciphertext attacks against protocols based
on the RSA encryption standard PKCS#1,” in Advances in Cryptology
– CRYPTO '98. Springer Berlin Heidelberg, 1998, pp. 1–12.
[14] H. B¨ock,
J.
Somorovsky,
“Return Of
Bleichenbacher’s Oracle Threat (ROBOT),” in 27th USENIX Security
Symposium (USENIX Security 18). USENIX Association, 2018,
pp. 817–849. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity18/presentation/bock
and C. Young,
[15] B. B. Brumley and N. Tuveri, “Remote Timing Attacks Are Still
Springer Berlin
Practical,” in Computer Security – ESORICS 2011.
Heidelberg, 2011, pp. 355–371.
[16] M. Bugliesi, S. Calzavara, R. Focardi, and W. Khan, “CookiExt: Patch-
ing the browser against session hijacking attacks,” Journal of Computer
Security, vol. 23, no. 4, pp. 509–537, 2015.
[17] S. Calzavara, R. Focardi, M. Squarcina, and M. Tempesta, “Surviving
the Web: A Journey into Web Session Security,” ACM Comput. Surv.,
vol. 50, no. 1, pp. 13:1–13:34, 2017.
[18] S. Calzavara, A. Rabitti, and M. Bugliesi, “Content Security Problems?:
Evaluating the Effectiveness of Content Security Policy in the Wild,” in
Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security, 2016, pp. 1365–1375.
[19] ——, “Semantics-based analysis of content security policy deployment,”
TWEB, vol. 12, no. 2, pp. 10:1–10:36, 2018.
[20] S. Calzavara, G. Tolomei, A. Casini, M. Bugliesi, and S. Orlando, “A
Supervised Learning Approach to Protect Client Authentication on the
Web,” TWEB, vol. 9, no. 3, pp. 15:1–15:30, 2015.
[21] B. Canvel, A. Hiltgen, S. Vaudenay, and M. Vuagnoux, “Password
Interception in a SSL/TLS Channel,” in Advances in Cryptology –
CRYPTO 2003. Springer Berlin Heidelberg, 2003, pp. 583–599.
[22] P. Chen, N. Nikiforakis, C. Huygens, and L. Desmet, “A Dangerous
Mix: Large-Scale Analysis of Mixed-Content Websites,” in Information
Security, 16th International Conference, ISC 2013, Proceedings, 2013,
pp. 354–363.
[23] X. de Carn´e de Carnavalet and M. Mannan, “Killed by Proxy: Analyzing
Client-end TLS Interception Software,” in Proceedings 2016 Network
and Distributed System Security Symposium.
Internet Society, 2016.
[24] J.
E.
and
de Ruiter
TLS Implementations,”
(USENIX
193–206.
usenixsecurity15/technical-sessions/presentation/de-ruiter
Security
[Online]. Available:
Poll,
24th USENIX Security
USENIX Association,
of
Symposium
2015,
pp.
https://www.usenix.org/conference/
“Protocol
Fuzzing
State
15).
in
[25] T. Dierks and C. Allen, “RFC 2246: The TLS Protocol Version 1.0,”
Internet Engineering Task Force (IETF), 1999. [Online]. Available:
https://tools.ietf.org/html/rfc2246
[26] T. Dierks and E. Rescorla, “RFC 4346: The Transport Layer Security
(TLS) Protocol Version 1.1,” Internet Engineering Task Force (IETF),