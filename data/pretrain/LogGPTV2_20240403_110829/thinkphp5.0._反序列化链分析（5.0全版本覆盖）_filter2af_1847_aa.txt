# thinkphp5.0.*反序列化链分析（5.0全版本覆盖）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在一次渗透测试中遇到了一个基于Thinkphp5.0.10的站，站点具有非常多的disabled
function(phpinfo和scandir等常见函数也在里面)，最终想到的办法是采用反序列化的方法写shell。在网上找了一圈的反序列化的链子没有一个能用的，向上向下都不兼容。这些反序列化链后面写文件的部分都是相同的，但是前面对think\console\Output类中的__call方法的触发方法不尽相同。最终发现，可以将整个thinkphp5.0系列分为两部分，这两个部分具有不同的可通用的反序列化链。一部分是从5.0.0-5.0.3，另一部分则是5.0.4-5.0.24。
本次实验环境Windows+php7.3.4+apache2.4.39
## 1\. thinkphp5.0.0-thinkphp5.0.3
下面以版本ThinkPHP V5.0.3 为例进行分析。  
在thinkphp的反序列化链中，大部分网上的触发方法都是从think\process\pipes\Windows的__destruct方法出发
        public function __destruct()
        {
            $this->close();
            $this->removeFiles();
        }
        public function close()
        {
            parent::close();
            foreach ($this->fileHandles as $handle) {
                fclose($handle);
            }
            $this->fileHandles = [];
        }
        private function removeFiles()
        {
            foreach ($this->files as $filename) {
                if (file_exists($filename)) {
                    @unlink($filename);
                }
            }
            $this->files = [];
        }
在通过file_exists触发think\Model的__toString魔术方法，然后通过__toString方法调用的toJson，toJson调用的toArray，在toArray中触发think\console\Output中的__call方法。
        public function __toString()
        {
            return $this->toJson();
        }
        public function toJson($options = JSON_UNESCAPED_UNICODE)
        {
            return json_encode($this->toArray(), $options);
        }
但是问题来了  
下面是thinkphp5.0.03版本的toArray
        public function toArray()
        {
            $item = [];
            //过滤属性
            if (!empty($this->visible)) {
                $data = array_intersect_key($this->data, array_flip($this->visible));
            } elseif (!empty($this->hidden)) {
                $data = array_diff_key($this->data, array_flip($this->hidden));
            } else {
                $data = $this->data;
            }
            foreach ($data as $key => $val) {
                if ($val instanceof Model || $val instanceof Collection) {
                    // 关联模型对象
                    $item[$key] = $val->toArray();
                } elseif (is_array($val) && reset($val) instanceof Model) {
                    // 关联模型数据集
                    $arr = [];
                    foreach ($val as $k => $value) {
                        $arr[$k] = $value->toArray();
                    }
                    $item[$key] = $arr;
                } else {
                    // 模型属性
                    $item[$key] = $this->getAttr($key);
                }
            }
            // 追加属性（必须定义获取器）
            if (!empty($this->append)) {
                foreach ($this->append as $name) {
                    $item[$name] = $this->getAttr($name);
                }
            }
            return !empty($item) ? $item : [];
        }
与之相比，是thinkphp5.0.24的toArray（其实中间的几个版本的toArray也有差别，后面也会提到）
        public function toArray()
        {
            $item    = [];
            $visible = [];
            $hidden  = [];
            $data = array_merge($this->data, $this->relation);
            // 过滤属性
            if (!empty($this->visible)) {
                $array = $this->parseAttr($this->visible, $visible);
                $data  = array_intersect_key($data, array_flip($array));
            } elseif (!empty($this->hidden)) {
                $array = $this->parseAttr($this->hidden, $hidden, false);
                $data  = array_diff_key($data, array_flip($array));
            }
            foreach ($data as $key => $val) {
                if ($val instanceof Model || $val instanceof ModelCollection) {
                    // 关联模型对象
                    $item[$key] = $this->subToArray($val, $visible, $hidden, $key);
                } elseif (is_array($val) && reset($val) instanceof Model) {
                    // 关联模型数据集
                    $arr = [];
                    foreach ($val as $k => $value) {
                        $arr[$k] = $this->subToArray($value, $visible, $hidden, $key);
                    }
                    $item[$key] = $arr;
                } else {
                    // 模型属性
                    $item[$key] = $this->getAttr($key);
                }
            }
            // 追加属性（必须定义获取器）
            if (!empty($this->append)) {
                foreach ($this->append as $key => $name) {
                    if (is_array($name)) {
                        // 追加关联对象属性
                        $relation   = $this->getAttr($key);
                        $item[$key] = $relation->append($name)->toArray();
                    } elseif (strpos($name, '.')) {
                        list($key, $attr) = explode('.', $name);
                        // 追加关联对象属性
                        $relation   = $this->getAttr($key);
                        $item[$key] = $relation->append([$attr])->toArray();
                    } else {
                        $relation = Loader::parseName($name, 1, false);
                        if (method_exists($this, $relation)) {
                            $modelRelation = $this->$relation();
                            $value         = $this->getRelationData($modelRelation);
                            if (method_exists($modelRelation, 'getBindAttr')) {
                                $bindAttr = $modelRelation->getBindAttr();
                                if ($bindAttr) {
                                    foreach ($bindAttr as $key => $attr) {
                                        $key = is_numeric($key) ? $attr : $key;
                                        if (isset($this->data[$key])) {
                                            throw new Exception('bind attr has exists:' . $key);
                                        } else {
                                            $item[$key] = $value ? $value->getAttr($attr) : null;
                                        }
                                    }
                                    continue;
                                }
                            }
                            $item[$name] = $value;
                        } else {
                            $item[$name] = $this->getAttr($name);
                        }
                    }
                }
            }
            return !empty($item) ? $item : [];
        }
可以发现，在5.0.3版本中并没有用来调用任意Model中函数的下列代码
        if (method_exists($this, $relation)) {
            $modelRelation = $this->$relation();
            $value         = $this->getRelationData($modelRelation);
            //......
        }
而且用得都是写死的函数，不存在触发其它类魔术方法的条件。只能从头开始换一条__destruct路线进行分析。
一共还有三个的备选项
  1. thinkphp/library/think/process/pipes/Unix.php 
         public function __destruct()
     {
         $this->close();
     }
     public function close()
     {
         foreach ($this->pipes as $pipe) {
             fclose($pipe);
         }
         $this->pipes = [];
     }
不具备可利用性，pass
  2. thinkphp/library/think/db/Connection.php 
         public function __destruct()
     {
         // 释放查询
         if ($this->PDOStatement) {
             $this->free();
         }
         // 关闭连接
         $this->close();
     }
    }
     public function free()
     {
         $this->PDOStatement = null;
     }
     public function close()
     {
         $this->linkID = null;
     }
同样不具备可利用性。
  3. thinkphp/library/think/Process.php 
         public function __destruct()
     {
         $this->stop();
     }
     public function stop()
     {
         if ($this->isRunning()) {
             if ('\\' === DS && !$this->isSigchildEnabled()) {
                 exec(sprintf('taskkill /F /T /PID %d 2>&1', $this->getPid()), $output, $exitCode);
                 if ($exitCode > 0) {
                     throw new \RuntimeException('Unable to kill the process');
                 }
             } else {
                 $pids = preg_split('/\s+/', `ps -o pid --no-heading --ppid {$this->getPid()}`);
                 foreach ($pids as $pid) {
                     if (is_numeric($pid)) {
                         posix_kill($pid, 9);
                     }
                 }
             }
         }
         $this->updateStatus(false);
         if ($this->processInformation['running']) {
             $this->close();
         }
         return $this->exitcode;
     }
     public function isRunning()
     {
         if (self::STATUS_STARTED !== $this->status) {
             return false;
         }
         $this->updateStatus(false);
         return $this->processInformation['running'];
     }
     protected function updateStatus($blocking)
     {
         if (self::STATUS_STARTED !== $this->status) {
             return;
         }
         $this->processInformation = proc_get_status($this->process);
         $this->captureExitCode();
         $this->readPipes($blocking, '\\' === DS ? !$this->processInformation['running'] : true);
         if (!$this->processInformation['running']) {
             $this->close();
         }
     }
     protected function isSigchildEnabled()
     {
         if (null !== self::$sigchild) {
             return self::$sigchild;
         }
         if (!function_exists('phpinfo')) {
             return self::$sigchild = false;
         }
         ob_start();
         phpinfo(INFO_GENERAL);
         return self::$sigchild = false !== strpos(ob_get_clean(), '--enable-sigchild');
     }
     public function getPid()
     {
         if ($this->isSigchildEnabled()) {
             throw new \RuntimeException('This PHP has been compiled with --enable-sigchild. The process identifier can not be retrieved.');
         }
         $this->updateStatus(false);
         return $this->isRunning() ? $this->processInformation['pid'] : null;
     }
     private function close()
     {
         $this->processPipes->close();
         if (is_resource($this->process)) {
             $exitcode = proc_close($this->process);
         } else {
             $exitcode = -1;
         }
         $this->exitcode = -1 !== $exitcode ? $exitcode : (null !== $this->exitcode ? $this->exitcode : -1);
         $this->status   = self::STATUS_TERMINATED;
         if (-1 === $this->exitcode && null !== $this->fallbackExitcode) {
             $this->exitcode = $this->fallbackExitcode;