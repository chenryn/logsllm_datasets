col BOREALIS is based on.
Secure sealed-bid auctions are deployed in the real-world [15]. For a survey
on secure auctions, see [19]. Naor et al. [47] developed a secure auction pro-
tocol based on two servers. Cachin [20] developed a secure auction protocol
using an oblivious third party which is also the setup in Damg˚ard et al. [25]’s
protocol. Brandt [18] developed an interactive protocol requiring only a con-
stant number of rounds, but requires unary bid encoding and has later been
shown to additionally require expensive zero-knowledge proofs [28]. Improved
protocols for Vickrey (second price) auctions have been developed by Lipmaa
et al. [45] and Suzuki and Yokoo [51]. BOREALIS can be used to implement
secure auctions on the blockchain in a constant number of (three) rounds, using
binary bid encoding and highly practical ZK proofs. The advantage of an un-
6
forgeable history using a blockchain for auctions has been demonstrated before
by researchers [14], real-world auctions [49], and start-ups [6].
Some work has investigated the relation between MPC and blockchains.
Kosba et al. [38] developed secure and private smart contracts in Hawk, a system
which requires a manager overseeing all parties’ input. Generic secure compu-
tation has been implemented on the blockchain by Andrychowicz et al. [4] and
Zyskind et al. [54]. Both approaches require a number of rounds depending on
the circuit depth, but achieve a notion of fairness. Fairness can also be achieved
in oﬀ-chain multi-party protocols using incentives, e.g., by crypto-currencies, or
trusted hardware on the blockchain [11, 12, 23, 39, 40]. In contrast, BOREALIS
assumes honest majority, but optimizes eﬃciency. It requires only a constant
number (three) of rounds, we have implemented it in software, and no party
needs to reveal its input.
2 Preliminaries
Let {P1, . . . , Pn} be a set of parties. Each party Pi has an (cid:96) bit integer vi as
input.
Groth and Sahai Proof Systems: To prove that vi is the kth-ranked integer
among all inputs, this paper sets up systems of equations and proves their
correctness in zero-knowledge using Groth and Sahai’s framework [36]. While
Groth and Sahai deﬁne ZK proofs in multiple diﬀerent settings, we focus on the
case of proving validity of systems of equations over bilinear symmetric external
Diﬃe-Hellman (SXDH) groups (p, G1, G2, Gt, e,P1,P2). Here, G1, G2, and Gt
are groups of prime order p, and P1 and P2 generate G1 and G2, respectively.
Let λ be the security parameter and |p| ∈ poly(λ). Function e : G1 × G2 → Gt
is a bilinear map.
We choose prime order SXDH bilinear groups, as the decisional Diﬃe-Hellman
(DDH) assumption holds in both G1 and G2. Therefore, we will be able to use
additively homomorphic Elgamal encryption over elements in G1. Moreover,
there are eﬃcient implementations of Type-3 elliptic curves available which re-
alize SXDH groups [46]. For more details about parameters of our implementa-
tion, we refer to Section 7.
With Groth and Sahai’s framework [36] deﬁned over SXDH groups, we prove
validity of systems of equations in ZK. Using Groth and Sahai’s notation, we
set ring R = Zp and modules A1 = G1, A2 = Zp, AT = G1. This allows proving
equations of multi-scalar multiplications over G1 of type
(cid:126)y · (cid:126)γ1 + (cid:126)γ2 · (cid:126)x + (cid:126)x · Γ · (cid:126)y = t,
(1)
1 , γ2 ∈ Zm
p
p , and Γ ∈ Zm×n
where t ∈ G1, γ1 ∈ Gn
are publicly known (called con-
stants). The secret witnesses (called variables) in such proofs are (cid:126)x ∈ Gm
1 and
(cid:126)y ∈ Zn
p . Roughly speaking, we can prove equations combining secret elements
from G1 with public elements from Zp, public elements from G1 with secret ele-
ments from Zp, and secret elements from both G1 and Zp. We denote both types
7
of commitments, commitments to integers x ∈ Zp and commitments to points
x ∈ G1, simply by Com(x). We also simplify generation of a (random) common
reference string in the SXDH setting by hashing the latest λ block hashes of the
blockchain and use that as input to a PRG. For details on commitments and
CRS requirements in the SXDH setting, see § 9 in [36].
Additively Homomorphic Elgamal: As the DDH assumption holds in el-
liptic curve point group G1, we can use additively homomorphic Elgamal en-
$← Zp, let pk = sk · P1 be the public key. To
cryption. For private key sk
encrypt plaintext m ∈ Zp, randomly choose r
$← Zp and compute ciphertext
c = Epk(m) = (r · P1, r · pk + m · P1). In this paper, we will write c[0] for the
left-hand part r·P1 of ciphertext c and c[1] for c’s right-hand part r· pk + m·P1.
To decrypt c, ﬁrst compute m · P1 = c[1] − sk · c[0] and then solve the elliptic
curve discrete logarithm problem (ECDLP) to get m. Due to the computa-
tional hardness of ECDLP, m can be recovered only for small values of m.
Yet, as we will see, in this paper it will be suﬃcient to check whether m = 0,
which is easy. We have m = 0, iﬀ c[1] − sk · c[0] = O, the point at inﬁnity.
Note the additively homomorphic property of this encryption: for ciphertexts
c1 = (r1 · P1, r1 · pk + m1 · P1) and c2 = (r2 · P1, r2 · pk + m2 · P1), decrypting
ciphertext (c1[0] + c2[0], c1[1] + c2[1]) results in (m1 + m2) · P1 and therewith
m1 + m2.
Long-Term Key Pairs: For each party Pi, let sklt
private key and pklt
know other parties’ long-term public keys.
i ∈ Zp be Pi’s long term
i · P1 be Pi’s long term public key. Assume all parties
i = sklt
3 Security Deﬁnition
We deﬁne security following the standard ideal vs. real world paradigm. First,
we specify an ideal functionality Fkth-Ideal of our protocol to compute the index
of the kth-ranked integer, see Algorithm 1. This functionality encompasses both
steps in an auction protocol: the comparison of integers and the proof of rank k.
For any speciﬁc auction type, these two steps should be appropriately adapted.
In this ideal functionality, a trusted third party T T P receives all input in-
tegers vi from all parties Pi. If a malicious party Pi submits an invalid input
vi = ⊥, then vi is excluded from the computation. The TTP then computes
results γˆi,ˆj of comparisons between integers from parties Pˆi with valid integers
vˆi (cid:54)= ⊥. The kth-ranked integer is vι with index ι. Parties Pˆi who submitted
a valid integer vˆi (cid:54)= ⊥ receive from the TTP the result of each comparison
between their integer vˆi and all other integers vˆj. Finally, the TTP sends to
everybody via broadcast on the blockchain index ι of the kth-ranked integer vι
and the result of the comparisons between each bid vˆj (cid:54)= ⊥ and vι.
Note that if and only if a (malicious) party Pi submits a valid integer vi,
then vi is included in the computation of TTP. Assuming the blockchain is a
broadcast channel, we also guarantee delivery of TTP’s output.
8
1 for i = 1 to n do
2
3 end
Pi → T T P : vi ∈ {⊥, 0, . . . 2(cid:96) − 1}
// Let ˆI = {i|vi (cid:54)= ⊥}, ˆn = | ˆI|.
// ∀ˆi, ˆj ∈ ˆI, ˆj (cid:54)= ˆi : Let γˆi,ˆj = 1, if vˆi > vˆj and γˆi,ˆj = 0 otherwise.
// Let ι be the index of kth-ranked integer vι ∈ ˆI.
T T P → Pˆi : {γˆi,ˆj|ˆj ∈ ˆI ∧ ˆj (cid:54)= ˆi}
4 foreach ˆi ∈ ˆI do
5
6 end
// Via broadcast (on blockchain)
7 T T P → (cid:63) : (ι,{γι,ˆj|ˆj ∈ ˆI}});
Algorithm 1: Ideal Functionality Fkth-Ideal
We stress that functionality Fkth-Ideal reveals more than achievable by generic
MPC. Each party Pˆi learns whether another party Pˆj’s input vˆj is less or greater
than vˆi and less or greater than kth integer vι. However, neither the actual
values of vˆj or vι nor results of other parties’ comparisons are disclosed. While
Fkth-Ideal’s security is weaker than general MPC, the key advantage of Fkth-Ideal
is that it is generic among many auction types and enables us to still implement
an eﬃcient protocol with an optimal number of rounds, i.e., low latency on the
blockchain. In addition, we expect the additional leakage compared to MPC to
be acceptable in many real-world scenarios.
We consider a static, active adversary A that controls up to τ < n
2 parties.
All attacks admissible in the real implementation of the protocol correspond to
an attack in the ideal world implementation using a trusted third party. The
following Theorem 1 summarizes our main contribution.
Theorem 1. If adversary A is static, active, and controls up to τ < n
Pi, then protocol BOREALIS securely implements functionality Fkth-Ideal.
2 parties
4 BOREALIS Description
Before presenting technical details, we start by giving a high-level overview over
BOREALIS’ intuition and its main concepts in Section 4.1. To ease understand-
ing, we then present core comparisons by an example walk-through with just
two parties and two bit input integers in Section 4.2. We ﬁnally give full and
formal details of BOREALIS with pseudo-code in Section 4.3.
To furthermore ease exposition, our protocol presentation below assumes
existence of multiple new ZK proofs. In Section 5, we present formal details
on how we generate these proofs. Our last simpliﬁcation is that, for now, we
pretend that integers are pairwise diﬀerent. Later, in Section 4.4 we will explain
how to enforce distinct input integers with little overhead.
9
4.1 High-Level Overview
BOREALIS’ main idea for sealed-bid auctions is to employ a new comparison
mechanism as a building block. Comparisons allow party Pi with the kth-ranked
integer to prove this fact to other parties in ZK. As speciﬁed by the auction,
parties use the comparison mechanism and prove that their integers have certain
ranks. In the following, we focus only on the core comparison mechanism, where
eventually Pi proves rank k. The extension how multiple parties prove their
ranks will become obvious later.
So, assume that n parties have agreed to jointly compute the index of the kth
ranked integer of their input integers on a blockchain. Each party Pi has input
integer vi ∈ N,|vi| = (cid:96). We denote vi’s bit representation by vi = vi,(cid:96) . . . vi,1,
i.e., vi,1 is the least signiﬁcant bit of vi.
In BOREALIS’ ﬁrst round, each party Pi encrypts each bit vi,j with addi-
tively homomorphic Elgamal encryption and their own public key pki. Party Pi
publishes ciphertexts on the blockchain.
In the second round, each party Pi homomorphically evaluates a DGK com-
parison circuit with ciphertexts from other parties Pj using their own vi as
input. Results of these homomorphic evaluations are (cid:96) ciphertexts for each of
the n− 1 other parties. Party Pi publishes these (cid:96) ciphertext on the blockchain.
In the third and ﬁnal round, each party Pi decrypts all (cid:96) ciphertexts of each
of the n − 1 other parties. For the (cid:96) decrypted evaluations of another party Pj,
Pi determines whether vi < vj as follows. If exactly one of the (cid:96) evaluations
decrypts to 0, then vi < vj, otherwise vi ≥ vj. The one party Pι with the kth
integer vι has n − k − 1 comparisons vι < vj and k comparisons vι ≥ vj. Party
Pι announces ι on the blockchain (and reveals vι if required by the auction).
Technical Challenges: While the above protocol overview seems straightfor-
ward, it is obviously insecure. To protect against malicious adversaries, one has
to, e.g., prove correctness of DGK evaluations on the blockchain. The proof
of correctness, however, must be in ZK not to leak details about an input vi.
Along the same lines, second round comparisons require blinding and shuﬄing
of input. Blinding and shuﬄing requires (non-trivial) correctness proofs which
must be in ZK, too. Finally, we have to cope with malicious parties aborting
the protocol. Our main contribution is thus to solve these technical challenges
and enable maliciously-secure computation of the index of the kth integer in
O(1) rounds of interaction.
We now present a simpliﬁed (two party, two bit) version of BOREALIS’ core
technique, maliciously secure integer comparison.
4.2 Two Party, Two Bit Walk-Through
Assume two parties P1 = Alice and P2 = Bob. Let Alice’s input integer be
va = va,2va,1 and Bob’s be vb = vb,2vb,1. Alice and Bob want to compute a
10
generic comparison, i.e., whether va < vb. In the clear they would compute
c1 = va,1 − vb,1 + 1 + va,2 + vb,2 − 2 · va,2 · vb,2
c2 = va,2 − vb,2 + 1.
(2)
We know va < vb, iﬀ either c1 or c2 equals zero. Note that both c1 and c2
cannot be 0 at the same time, see DGK [24].
To protect against fully-malicious adversaries, our idea is to evaluate DGK
in the encrypted domain and prove evaluation correctness in ZK. We set up
a system of equations of multi-scalar multiplications and prove them in Groth
and Sahai’s framework.
A small technicality arises from the fact that computation of c1 in Equa-
tions (2) is not mod 2, but in the integers. To avoid “wrap-around”, we require
input bit length (cid:96) to be less than group order p. With |p| ∈ poly(λ) being a
security parameter, this always holds.
4.2.1 First Round
Below, we refer to multiple new ZK proofs. Technical details about computing
these proofs are in Section 5. Let Alice’s public key be pkA = skA · P1 with
private key skA ∈ Zp. Bob’s public key is pkB = skB · P1 with private key
skB ∈ Zp.
Alice computes Groth and Sahai commitments for va,1, va,2, skA and ran-
A ∈ Zp, βA ∈ {0, 1}. The exact meaning of each
domly chosen rA, r(cid:48)
variable will become clear below. She publishes commitments on the blockchain
together with encryptions
A, RA, R(cid:48)
EpkA(va,1)[0] =rA · P1
EpkA(va,1)[1] =rA · pkA + va,1 · P1
EpkA(va,2)[0] =r
EpkA(va,2)[1] =r
A · P1
(cid:48)
A · pkA + va,2 · P1
(cid:48)
(3)
She also computes a ZK proof that EpkA(va,1) and EpkA (va,2) are encryp-
tions of va,1 and va,2, i.e., she proves Equations (3). In addition, she prepares a
ZK proof that va,1, va,2, and βA are bits. Alice publishes ZK proofs on the block-
chain.
B ∈ Zp, βB ∈ {0, 1}
Similarly, Bob commits to vb,1, vb,2, skB, rB, r(cid:48)
B, RB, R(cid:48)
and computes
EpkB (vb,1)[0] =rB · P1
EpkB (vb,1)[1] =rB · pkB + vb,1 · P1
EpkB (vb,2)[0] =r
EpkB (vb,2)[1] =r
B · P1
(cid:48)
B · pkB + vb,2 · P1
(cid:48)
and publishes everything together with corresponding ZK proofs on the block-
chain. This concludes the ﬁrst round.
11
As one can see, Bob performs the exact same computation as Alice using
his input. Thus, in the following more involving computation of the comparison
circuit, we just describe Alice’s computation and remark that Bob performs the
same, but uses his input.
4.2.2 Second Round
Alice sees Bob’s ciphertexts EpkB (vb,1), EpkB (vb,2) on the blockchain. She now